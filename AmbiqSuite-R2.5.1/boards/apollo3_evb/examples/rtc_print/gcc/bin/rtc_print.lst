
bin/rtc_print.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 09 d5 00 00 71 d5 00 00 89 c4 00 00     ........q.......
    c010:	73 d5 00 00 73 d5 00 00 73 d5 00 00 00 00 00 00     s...s...s.......
	...
    c02c:	75 d5 00 00 75 d5 00 00 00 00 00 00 75 d5 00 00     u...u.......u...
    c03c:	75 d5 00 00 75 d5 00 00 75 d5 00 00 75 d5 00 00     u...u...u...u...
    c04c:	75 d5 00 00 75 d5 00 00 75 d5 00 00 75 d5 00 00     u...u...u...u...
    c05c:	75 d5 00 00 75 d5 00 00 75 d5 00 00 75 d5 00 00     u...u...u...u...
    c06c:	75 d5 00 00 75 d5 00 00 75 d5 00 00 0d c2 00 00     u...u...u.......
    c07c:	75 d5 00 00 75 d5 00 00 75 d5 00 00 75 d5 00 00     u...u...u...u...
    c08c:	75 d5 00 00 75 d5 00 00 75 d5 00 00 75 d5 00 00     u...u...u...u...
    c09c:	75 d5 00 00 75 d5 00 00 75 d5 00 00 75 d5 00 00     u...u...u...u...
    c0ac:	75 d5 00 00 75 d5 00 00 75 d5 00 00 75 d5 00 00     u...u...u...u...
    c0bc:	75 d5 00 00                                         u...

0000c0c0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    c1a0:	b082      	sub	sp, #8
    c1a2:	4603      	mov	r3, r0
    c1a4:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
    c1a8:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c1ac:	2b00      	cmp	r3, #0
    c1ae:	db0c      	blt.n	c1ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c1b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c1b4:	f003 021f 	and.w	r2, r3, #31
    c1b8:	4905      	ldr	r1, [pc, #20]	; (c1d0 <__NVIC_EnableIRQ+0x30>)
    c1ba:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c1be:	095b      	lsrs	r3, r3, #5
    c1c0:	2001      	movs	r0, #1
    c1c2:	fa00 f202 	lsl.w	r2, r0, r2
    c1c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
    c1ca:	bf00      	nop
    c1cc:	b002      	add	sp, #8
    c1ce:	4770      	bx	lr
    c1d0:	e000e100 	.word	0xe000e100

0000c1d4 <timerA0_init>:
// Init function for Timer A0.
//
//*****************************************************************************
void
timerA0_init(void)
{
    c1d4:	b508      	push	{r3, lr}
    //
    // Enable the LFRC.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_LFRC_START, 0);
    c1d6:	2100      	movs	r1, #0
    c1d8:	2002      	movs	r0, #2
    c1da:	f001 fc85 	bl	dae8 <am_hal_clkgen_control>

    //
    // Set up timer A0.
    //
    am_hal_ctimer_clear(0, AM_HAL_CTIMER_TIMERA);
    c1de:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c1e2:	2000      	movs	r0, #0
    c1e4:	f001 fda6 	bl	dd34 <am_hal_ctimer_clear>
    am_hal_ctimer_config(0, &g_sTimer0);
    c1e8:	4907      	ldr	r1, [pc, #28]	; (c208 <timerA0_init+0x34>)
    c1ea:	2000      	movs	r0, #0
    c1ec:	f001 fd36 	bl	dc5c <am_hal_ctimer_config>

    //
    // Set the timing for timerA0.
    //
    am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, 31, 0);
    c1f0:	2300      	movs	r3, #0
    c1f2:	221f      	movs	r2, #31
    c1f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c1f8:	2000      	movs	r0, #0
    c1fa:	f001 fdb1 	bl	dd60 <am_hal_ctimer_period_set>

    //
    // Clear the timer Interrupt
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    c1fe:	2001      	movs	r0, #1
    c200:	f001 fe1c 	bl	de3c <am_hal_ctimer_int_clear>
}
    c204:	bf00      	nop
    c206:	bd08      	pop	{r3, pc}
    c208:	10001054 	.word	0x10001054

0000c20c <am_ctimer_isr>:
// Timer Interrupt Service Routine (ISR)
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
    c20c:	b508      	push	{r3, lr}
    //
    // Clear TimerA0 Interrupt (write to clear).
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    c20e:	2001      	movs	r0, #1
    c210:	f001 fe14 	bl	de3c <am_hal_ctimer_int_clear>

    am_hal_rtc_time_get(&hal_time);
    c214:	4802      	ldr	r0, [pc, #8]	; (c220 <am_ctimer_isr+0x14>)
    c216:	f002 fb13 	bl	e840 <am_hal_rtc_time_get>

}
    c21a:	bf00      	nop
    c21c:	bd08      	pop	{r3, pc}
    c21e:	bf00      	nop
    c220:	100010cc 	.word	0x100010cc

0000c224 <toVal>:
// toVal() converts a string to an ASCII value.
//
//*****************************************************************************
int
toVal(char *pcAsciiStr)
{
    c224:	b084      	sub	sp, #16
    c226:	9001      	str	r0, [sp, #4]
    int iRetVal = 0;
    c228:	2300      	movs	r3, #0
    c22a:	9303      	str	r3, [sp, #12]
    iRetVal += pcAsciiStr[1] - '0';
    c22c:	9b01      	ldr	r3, [sp, #4]
    c22e:	3301      	adds	r3, #1
    c230:	781b      	ldrb	r3, [r3, #0]
    c232:	3b30      	subs	r3, #48	; 0x30
    c234:	9a03      	ldr	r2, [sp, #12]
    c236:	4413      	add	r3, r2
    c238:	9303      	str	r3, [sp, #12]
    iRetVal += pcAsciiStr[0] == ' ' ? 0 : (pcAsciiStr[0] - '0') * 10;
    c23a:	9b01      	ldr	r3, [sp, #4]
    c23c:	781b      	ldrb	r3, [r3, #0]
    c23e:	2b20      	cmp	r3, #32
    c240:	d009      	beq.n	c256 <toVal+0x32>
    c242:	9b01      	ldr	r3, [sp, #4]
    c244:	781b      	ldrb	r3, [r3, #0]
    c246:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    c24a:	4613      	mov	r3, r2
    c24c:	009b      	lsls	r3, r3, #2
    c24e:	4413      	add	r3, r2
    c250:	005b      	lsls	r3, r3, #1
    c252:	461a      	mov	r2, r3
    c254:	e000      	b.n	c258 <toVal+0x34>
    c256:	2200      	movs	r2, #0
    c258:	9b03      	ldr	r3, [sp, #12]
    c25a:	4413      	add	r3, r2
    c25c:	9303      	str	r3, [sp, #12]
    return iRetVal;
    c25e:	9b03      	ldr	r3, [sp, #12]
}
    c260:	4618      	mov	r0, r3
    c262:	b004      	add	sp, #16
    c264:	4770      	bx	lr
	...

0000c268 <mthToIndex>:
// by the string, and 12 indicating that the string is not a month.
//
//*****************************************************************************
int
mthToIndex(char *pcMon)
{
    c268:	b500      	push	{lr}
    c26a:	b085      	sub	sp, #20
    c26c:	9001      	str	r0, [sp, #4]
    int idx;
    for (idx = 0; idx < 12; idx++)
    c26e:	2300      	movs	r3, #0
    c270:	9303      	str	r3, [sp, #12]
    c272:	e010      	b.n	c296 <mthToIndex+0x2e>
    {
        if ( am_util_string_strnicmp(pcMonth[idx], pcMon, 3) == 0 )
    c274:	4a0c      	ldr	r2, [pc, #48]	; (c2a8 <mthToIndex+0x40>)
    c276:	9b03      	ldr	r3, [sp, #12]
    c278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c27c:	2203      	movs	r2, #3
    c27e:	9901      	ldr	r1, [sp, #4]
    c280:	4618      	mov	r0, r3
    c282:	f001 f837 	bl	d2f4 <am_util_string_strnicmp>
    c286:	4603      	mov	r3, r0
    c288:	2b00      	cmp	r3, #0
    c28a:	d101      	bne.n	c290 <mthToIndex+0x28>
        {
            return idx;
    c28c:	9b03      	ldr	r3, [sp, #12]
    c28e:	e006      	b.n	c29e <mthToIndex+0x36>
    for (idx = 0; idx < 12; idx++)
    c290:	9b03      	ldr	r3, [sp, #12]
    c292:	3301      	adds	r3, #1
    c294:	9303      	str	r3, [sp, #12]
    c296:	9b03      	ldr	r3, [sp, #12]
    c298:	2b0b      	cmp	r3, #11
    c29a:	ddeb      	ble.n	c274 <mthToIndex+0xc>
        }
    }
    return 12;
    c29c:	230c      	movs	r3, #12
}
    c29e:	4618      	mov	r0, r3
    c2a0:	b005      	add	sp, #20
    c2a2:	f85d fb04 	ldr.w	pc, [sp], #4
    c2a6:	bf00      	nop
    c2a8:	10001020 	.word	0x10001020

0000c2ac <main>:
// Main
//
//*****************************************************************************
int
main(void)
{
    c2ac:	b538      	push	{r3, r4, r5, lr}
    //
    // Set the clock frequency.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c2ae:	2100      	movs	r1, #0
    c2b0:	2000      	movs	r0, #0
    c2b2:	f001 fc19 	bl	dae8 <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c2b6:	4860      	ldr	r0, [pc, #384]	; (c438 <main+0x18c>)
    c2b8:	f001 fa6e 	bl	d798 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c2bc:	f001 fa90 	bl	d7e0 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    c2c0:	f001 f980 	bl	d5c4 <am_bsp_low_power_init>

    //
    // Enable the XT for the RTC.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_XTAL_START, 0);
    c2c4:	2100      	movs	r1, #0
    c2c6:	2001      	movs	r0, #1
    c2c8:	f001 fc0e 	bl	dae8 <am_hal_clkgen_control>

    //
    // Select XT for RTC clock source
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_XT);
    c2cc:	2000      	movs	r0, #0
    c2ce:	f002 fa03 	bl	e6d8 <am_hal_rtc_osc_select>

    //
    // Enable the RTC.
    //
    am_hal_rtc_osc_enable();
    c2d2:	f002 fa09 	bl	e6e8 <am_hal_rtc_osc_enable>

    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_bsp_itm_printf_enable();
    c2d6:	f001 fa3f 	bl	d758 <am_bsp_itm_printf_enable>

    //
    // Enable the ITM.
    //
    am_hal_itm_enable();
    c2da:	f001 ff97 	bl	e20c <am_hal_itm_enable>
#if defined(__GNUC__)  ||  defined(__ARMCC_VERSION)  ||  defined(__IAR_SYSTEMS_ICC__)
    //
    // The RTC is initialized from the date and time strings that are
    // obtained from the compiler at compile time.
    //
    hal_time.ui32Hour = toVal(&__TIME__[0]);
    c2de:	4857      	ldr	r0, [pc, #348]	; (c43c <main+0x190>)
    c2e0:	f7ff ffa0 	bl	c224 <toVal>
    c2e4:	4603      	mov	r3, r0
    c2e6:	461a      	mov	r2, r3
    c2e8:	4b55      	ldr	r3, [pc, #340]	; (c440 <main+0x194>)
    c2ea:	61da      	str	r2, [r3, #28]
    hal_time.ui32Minute = toVal(&__TIME__[3]);
    c2ec:	4855      	ldr	r0, [pc, #340]	; (c444 <main+0x198>)
    c2ee:	f7ff ff99 	bl	c224 <toVal>
    c2f2:	4603      	mov	r3, r0
    c2f4:	461a      	mov	r2, r3
    c2f6:	4b52      	ldr	r3, [pc, #328]	; (c440 <main+0x194>)
    c2f8:	621a      	str	r2, [r3, #32]
    hal_time.ui32Second = toVal(&__TIME__[6]);
    c2fa:	4853      	ldr	r0, [pc, #332]	; (c448 <main+0x19c>)
    c2fc:	f7ff ff92 	bl	c224 <toVal>
    c300:	4603      	mov	r3, r0
    c302:	461a      	mov	r2, r3
    c304:	4b4e      	ldr	r3, [pc, #312]	; (c440 <main+0x194>)
    c306:	625a      	str	r2, [r3, #36]	; 0x24
    hal_time.ui32Hundredths = 00;
    c308:	4b4d      	ldr	r3, [pc, #308]	; (c440 <main+0x194>)
    c30a:	2200      	movs	r2, #0
    c30c:	629a      	str	r2, [r3, #40]	; 0x28
    hal_time.ui32Weekday = am_util_time_computeDayofWeek(2000 + toVal(&__DATE__[9]), mthToIndex(&__DATE__[0]) + 1, toVal(&__DATE__[4]) );
    c30e:	484f      	ldr	r0, [pc, #316]	; (c44c <main+0x1a0>)
    c310:	f7ff ff88 	bl	c224 <toVal>
    c314:	4603      	mov	r3, r0
    c316:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
    c31a:	484d      	ldr	r0, [pc, #308]	; (c450 <main+0x1a4>)
    c31c:	f7ff ffa4 	bl	c268 <mthToIndex>
    c320:	4603      	mov	r3, r0
    c322:	1c5d      	adds	r5, r3, #1
    c324:	484b      	ldr	r0, [pc, #300]	; (c454 <main+0x1a8>)
    c326:	f7ff ff7d 	bl	c224 <toVal>
    c32a:	4603      	mov	r3, r0
    c32c:	461a      	mov	r2, r3
    c32e:	4629      	mov	r1, r5
    c330:	4620      	mov	r0, r4
    c332:	f001 f831 	bl	d398 <am_util_time_computeDayofWeek>
    c336:	4603      	mov	r3, r0
    c338:	461a      	mov	r2, r3
    c33a:	4b41      	ldr	r3, [pc, #260]	; (c440 <main+0x194>)
    c33c:	609a      	str	r2, [r3, #8]
    hal_time.ui32DayOfMonth = toVal(&__DATE__[4]);
    c33e:	4845      	ldr	r0, [pc, #276]	; (c454 <main+0x1a8>)
    c340:	f7ff ff70 	bl	c224 <toVal>
    c344:	4603      	mov	r3, r0
    c346:	461a      	mov	r2, r3
    c348:	4b3d      	ldr	r3, [pc, #244]	; (c440 <main+0x194>)
    c34a:	619a      	str	r2, [r3, #24]
    hal_time.ui32Month = mthToIndex(&__DATE__[0]);
    c34c:	4840      	ldr	r0, [pc, #256]	; (c450 <main+0x1a4>)
    c34e:	f7ff ff8b 	bl	c268 <mthToIndex>
    c352:	4603      	mov	r3, r0
    c354:	461a      	mov	r2, r3
    c356:	4b3a      	ldr	r3, [pc, #232]	; (c440 <main+0x194>)
    c358:	615a      	str	r2, [r3, #20]
    hal_time.ui32Year = toVal(&__DATE__[9]);
    c35a:	483c      	ldr	r0, [pc, #240]	; (c44c <main+0x1a0>)
    c35c:	f7ff ff62 	bl	c224 <toVal>
    c360:	4603      	mov	r3, r0
    c362:	461a      	mov	r2, r3
    c364:	4b36      	ldr	r3, [pc, #216]	; (c440 <main+0x194>)
    c366:	611a      	str	r2, [r3, #16]
    hal_time.ui32Century = 0;
    c368:	4b35      	ldr	r3, [pc, #212]	; (c440 <main+0x194>)
    c36a:	2200      	movs	r2, #0
    c36c:	60da      	str	r2, [r3, #12]
    hal_time.ui32DayOfMonth = 15;
    hal_time.ui32Month = 4;
    hal_time.ui32Year = 14;
    hal_time.ui32Century = 0;
#endif
    am_hal_rtc_time_set(&hal_time);
    c36e:	4834      	ldr	r0, [pc, #208]	; (c440 <main+0x194>)
    c370:	f002 f9ce 	bl	e710 <am_hal_rtc_time_set>

    //
    // TimerA0 init.
    //
    timerA0_init();
    c374:	f7ff ff2e 	bl	c1d4 <timerA0_init>

    //
    // Enable the timer Interrupt.
    //
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
    c378:	2001      	movs	r0, #1
    c37a:	f001 fd4b 	bl	de14 <am_hal_ctimer_int_enable>

    //
    // Enable the timer interrupt in the NVIC.
    //
    NVIC_EnableIRQ(CTIMER_IRQn);
    c37e:	200e      	movs	r0, #14
    c380:	f7ff ff0e 	bl	c1a0 <__NVIC_EnableIRQ>
    am_hal_interrupt_master_enable();
    c384:	f001 ff36 	bl	e1f4 <am_hal_interrupt_master_enable>

    //
    // Enable the timer.
    //
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
    c388:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c38c:	2000      	movs	r0, #0
    c38e:	f001 fca3 	bl	dcd8 <am_hal_ctimer_start>
    while (1)
    {
        //
        // Enable debug printf messages using ITM on SWO pin
        //
        am_bsp_debug_printf_enable();
    c392:	f001 f937 	bl	d604 <am_bsp_debug_printf_enable>

        //
        // Clear the terminal.
        //
        am_util_stdio_terminal_clear();
    c396:	f000 ffa5 	bl	d2e4 <am_util_stdio_terminal_clear>

        //
        // Print the banner.
        //
        am_util_stdio_printf("RTC Print Example\n");
    c39a:	482f      	ldr	r0, [pc, #188]	; (c458 <main+0x1ac>)
    c39c:	f000 ff82 	bl	d2a4 <am_util_stdio_printf>
        am_util_stdio_printf("This example was built on %s at %s.\n\n", __DATE__, __TIME__);
    c3a0:	4a26      	ldr	r2, [pc, #152]	; (c43c <main+0x190>)
    c3a2:	492b      	ldr	r1, [pc, #172]	; (c450 <main+0x1a4>)
    c3a4:	482d      	ldr	r0, [pc, #180]	; (c45c <main+0x1b0>)
    c3a6:	f000 ff7d 	bl	d2a4 <am_util_stdio_printf>

        //
        // Print RTC time.
        //
        am_hal_rtc_time_get(&hal_time);
    c3aa:	4825      	ldr	r0, [pc, #148]	; (c440 <main+0x194>)
    c3ac:	f002 fa48 	bl	e840 <am_hal_rtc_time_get>
        am_util_stdio_printf("\tIt is now ");
    c3b0:	482b      	ldr	r0, [pc, #172]	; (c460 <main+0x1b4>)
    c3b2:	f000 ff77 	bl	d2a4 <am_util_stdio_printf>
        am_util_stdio_printf("%d : ", hal_time.ui32Hour);
    c3b6:	4b22      	ldr	r3, [pc, #136]	; (c440 <main+0x194>)
    c3b8:	69db      	ldr	r3, [r3, #28]
    c3ba:	4619      	mov	r1, r3
    c3bc:	4829      	ldr	r0, [pc, #164]	; (c464 <main+0x1b8>)
    c3be:	f000 ff71 	bl	d2a4 <am_util_stdio_printf>
        am_util_stdio_printf("%02d : ", hal_time.ui32Minute);
    c3c2:	4b1f      	ldr	r3, [pc, #124]	; (c440 <main+0x194>)
    c3c4:	6a1b      	ldr	r3, [r3, #32]
    c3c6:	4619      	mov	r1, r3
    c3c8:	4827      	ldr	r0, [pc, #156]	; (c468 <main+0x1bc>)
    c3ca:	f000 ff6b 	bl	d2a4 <am_util_stdio_printf>
        am_util_stdio_printf("%02d.", hal_time.ui32Second);
    c3ce:	4b1c      	ldr	r3, [pc, #112]	; (c440 <main+0x194>)
    c3d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c3d2:	4619      	mov	r1, r3
    c3d4:	4825      	ldr	r0, [pc, #148]	; (c46c <main+0x1c0>)
    c3d6:	f000 ff65 	bl	d2a4 <am_util_stdio_printf>
        am_util_stdio_printf("%02d ", hal_time.ui32Hundredths);
    c3da:	4b19      	ldr	r3, [pc, #100]	; (c440 <main+0x194>)
    c3dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c3de:	4619      	mov	r1, r3
    c3e0:	4823      	ldr	r0, [pc, #140]	; (c470 <main+0x1c4>)
    c3e2:	f000 ff5f 	bl	d2a4 <am_util_stdio_printf>
        am_util_stdio_printf(pcWeekday[hal_time.ui32Weekday]);
    c3e6:	4b16      	ldr	r3, [pc, #88]	; (c440 <main+0x194>)
    c3e8:	689b      	ldr	r3, [r3, #8]
    c3ea:	4a22      	ldr	r2, [pc, #136]	; (c474 <main+0x1c8>)
    c3ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3f0:	4618      	mov	r0, r3
    c3f2:	f000 ff57 	bl	d2a4 <am_util_stdio_printf>
        am_util_stdio_printf(" ");
    c3f6:	4820      	ldr	r0, [pc, #128]	; (c478 <main+0x1cc>)
    c3f8:	f000 ff54 	bl	d2a4 <am_util_stdio_printf>
        am_util_stdio_printf(pcMonth[hal_time.ui32Month]);
    c3fc:	4b10      	ldr	r3, [pc, #64]	; (c440 <main+0x194>)
    c3fe:	695b      	ldr	r3, [r3, #20]
    c400:	4a1e      	ldr	r2, [pc, #120]	; (c47c <main+0x1d0>)
    c402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c406:	4618      	mov	r0, r3
    c408:	f000 ff4c 	bl	d2a4 <am_util_stdio_printf>
        am_util_stdio_printf(" ");
    c40c:	481a      	ldr	r0, [pc, #104]	; (c478 <main+0x1cc>)
    c40e:	f000 ff49 	bl	d2a4 <am_util_stdio_printf>
        am_util_stdio_printf("%d, ", hal_time.ui32DayOfMonth);
    c412:	4b0b      	ldr	r3, [pc, #44]	; (c440 <main+0x194>)
    c414:	699b      	ldr	r3, [r3, #24]
    c416:	4619      	mov	r1, r3
    c418:	4819      	ldr	r0, [pc, #100]	; (c480 <main+0x1d4>)
    c41a:	f000 ff43 	bl	d2a4 <am_util_stdio_printf>
        am_util_stdio_printf("20%02d", hal_time.ui32Year);
    c41e:	4b08      	ldr	r3, [pc, #32]	; (c440 <main+0x194>)
    c420:	691b      	ldr	r3, [r3, #16]
    c422:	4619      	mov	r1, r3
    c424:	4817      	ldr	r0, [pc, #92]	; (c484 <main+0x1d8>)
    c426:	f000 ff3d 	bl	d2a4 <am_util_stdio_printf>

        //
        // We are done printing. Disable debug printf messages on ITM.
        //
        am_bsp_debug_printf_disable();
    c42a:	f001 f95f 	bl	d6ec <am_bsp_debug_printf_disable>

        //
        // Go to Deep Sleep and wait for a wake up.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c42e:	2001      	movs	r0, #1
    c430:	f002 fa5a 	bl	e8e8 <am_hal_sysctrl_sleep>
        am_bsp_debug_printf_enable();
    c434:	e7ad      	b.n	c392 <main+0xe6>
    c436:	bf00      	nop
    c438:	0000f5c4 	.word	0x0000f5c4
    c43c:	0000f388 	.word	0x0000f388
    c440:	100010cc 	.word	0x100010cc
    c444:	0000f38b 	.word	0x0000f38b
    c448:	0000f38e 	.word	0x0000f38e
    c44c:	0000f39d 	.word	0x0000f39d
    c450:	0000f394 	.word	0x0000f394
    c454:	0000f398 	.word	0x0000f398
    c458:	0000f3a0 	.word	0x0000f3a0
    c45c:	0000f3b4 	.word	0x0000f3b4
    c460:	0000f3dc 	.word	0x0000f3dc
    c464:	0000f3e8 	.word	0x0000f3e8
    c468:	0000f3f0 	.word	0x0000f3f0
    c46c:	0000f3f8 	.word	0x0000f3f8
    c470:	0000f400 	.word	0x0000f400
    c474:	10001000 	.word	0x10001000
    c478:	0000f408 	.word	0x0000f408
    c47c:	10001020 	.word	0x10001020
    c480:	0000f40c 	.word	0x0000f40c
    c484:	0000f414 	.word	0x0000f414

0000c488 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    c488:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    c48a:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    c48e:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    c490:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    c494:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    c498:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c49c:	f000 f80a 	bl	c4b4 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    c4a0:	bd01      	pop	{r0, pc}
}
    c4a2:	bf00      	nop
    c4a4:	4618      	mov	r0, r3

0000c4a6 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c4a6:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c4a8:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c4aa:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c4ac:	4770      	bx	lr
}
    c4ae:	bf00      	nop
    c4b0:	4618      	mov	r0, r3
	...

0000c4b4 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c4b4:	b500      	push	{lr}
    c4b6:	b097      	sub	sp, #92	; 0x5c
    c4b8:	9001      	str	r0, [sp, #4]
    volatile am_fault_t sFaultData;
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_t  sHalFaultData = {0};
#else
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c4ba:	ab03      	add	r3, sp, #12
    c4bc:	2200      	movs	r2, #0
    c4be:	601a      	str	r2, [r3, #0]
    c4c0:	605a      	str	r2, [r3, #4]
    c4c2:	609a      	str	r2, [r3, #8]
    c4c4:	60da      	str	r2, [r3, #12]
    c4c6:	611a      	str	r2, [r3, #16]
    c4c8:	615a      	str	r2, [r3, #20]
#endif // if defined(AM_PART_APOLLO4)

    uint32_t u32Mask = 0;
    c4ca:	2300      	movs	r3, #0
    c4cc:	9315      	str	r3, [sp, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c4ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c4d0:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c4d2:	4b2e      	ldr	r3, [pc, #184]	; (c58c <am_util_faultisr_collect_data+0xd8>)
    c4d4:	681b      	ldr	r3, [r3, #0]
    c4d6:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c4d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c4da:	b2db      	uxtb	r3, r3
    c4dc:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c4e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c4e2:	0a1b      	lsrs	r3, r3, #8
    c4e4:	b2db      	uxtb	r3, r3
    c4e6:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c4ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c4ec:	0c1b      	lsrs	r3, r3, #16
    c4ee:	b29b      	uxth	r3, r3
    c4f0:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c4f4:	4b26      	ldr	r3, [pc, #152]	; (c590 <am_util_faultisr_collect_data+0xdc>)
    c4f6:	681b      	ldr	r3, [r3, #0]
    c4f8:	9312      	str	r3, [sp, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c4fa:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
    c4fe:	b2db      	uxtb	r3, r3
    c500:	f003 0302 	and.w	r3, r3, #2
    c504:	2b00      	cmp	r3, #0
    c506:	d005      	beq.n	c514 <am_util_faultisr_collect_data+0x60>
    c508:	9901      	ldr	r1, [sp, #4]
    c50a:	2006      	movs	r0, #6
    c50c:	f7ff ffcb 	bl	c4a6 <getStackedReg>
    c510:	4603      	mov	r3, r0
    c512:	e001      	b.n	c518 <am_util_faultisr_collect_data+0x64>
    c514:	f04f 33ff 	mov.w	r3, #4294967295
    c518:	9311      	str	r3, [sp, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c51a:	9901      	ldr	r1, [sp, #4]
    c51c:	2000      	movs	r0, #0
    c51e:	f7ff ffc2 	bl	c4a6 <getStackedReg>
    c522:	4603      	mov	r3, r0
    c524:	9309      	str	r3, [sp, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c526:	9901      	ldr	r1, [sp, #4]
    c528:	2001      	movs	r0, #1
    c52a:	f7ff ffbc 	bl	c4a6 <getStackedReg>
    c52e:	4603      	mov	r3, r0
    c530:	930a      	str	r3, [sp, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c532:	9901      	ldr	r1, [sp, #4]
    c534:	2002      	movs	r0, #2
    c536:	f7ff ffb6 	bl	c4a6 <getStackedReg>
    c53a:	4603      	mov	r3, r0
    c53c:	930b      	str	r3, [sp, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c53e:	9901      	ldr	r1, [sp, #4]
    c540:	2003      	movs	r0, #3
    c542:	f7ff ffb0 	bl	c4a6 <getStackedReg>
    c546:	4603      	mov	r3, r0
    c548:	930c      	str	r3, [sp, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c54a:	9901      	ldr	r1, [sp, #4]
    c54c:	2004      	movs	r0, #4
    c54e:	f7ff ffaa 	bl	c4a6 <getStackedReg>
    c552:	4603      	mov	r3, r0
    c554:	930d      	str	r3, [sp, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c556:	9901      	ldr	r1, [sp, #4]
    c558:	2005      	movs	r0, #5
    c55a:	f7ff ffa4 	bl	c4a6 <getStackedReg>
    c55e:	4603      	mov	r3, r0
    c560:	930e      	str	r3, [sp, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c562:	9901      	ldr	r1, [sp, #4]
    c564:	2006      	movs	r0, #6
    c566:	f7ff ff9e 	bl	c4a6 <getStackedReg>
    c56a:	4603      	mov	r3, r0
    c56c:	930f      	str	r3, [sp, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c56e:	9901      	ldr	r1, [sp, #4]
    c570:	2007      	movs	r0, #7
    c572:	f7ff ff98 	bl	c4a6 <getStackedReg>
    c576:	4603      	mov	r3, r0
    c578:	9310      	str	r3, [sp, #64]	; 0x40
    //
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_get(&sHalFaultData);
#else
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c57a:	ab03      	add	r3, sp, #12
    c57c:	4619      	mov	r1, r3
    c57e:	2002      	movs	r0, #2
    c580:	f001 feda 	bl	e338 <am_hal_mcuctrl_info_get>
      am_util_stdio_printf("   SYS Fault Address: 0x%08X\n", sHalFaultData.ui32SYS);
    }

#endif

    u32Mask = 0;
    c584:	2300      	movs	r3, #0
    c586:	9315      	str	r3, [sp, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    c588:	e7fe      	b.n	c588 <am_util_faultisr_collect_data+0xd4>
    c58a:	bf00      	nop
    c58c:	e000ed28 	.word	0xe000ed28
    c590:	e000ed38 	.word	0xe000ed38

0000c594 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    c594:	b082      	sub	sp, #8
    c596:	9001      	str	r0, [sp, #4]
    g_pfnCharPrint = pfnCharPrint;
    c598:	4a02      	ldr	r2, [pc, #8]	; (c5a4 <am_util_stdio_printf_init+0x10>)
    c59a:	9b01      	ldr	r3, [sp, #4]
    c59c:	6013      	str	r3, [r2, #0]
}
    c59e:	bf00      	nop
    c5a0:	b002      	add	sp, #8
    c5a2:	4770      	bx	lr
    c5a4:	100010f8 	.word	0x100010f8

0000c5a8 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c5a8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c5ac:	b098      	sub	sp, #96	; 0x60
    c5ae:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c5b2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c5b6:	f04f 0000 	mov.w	r0, #0
    c5ba:	f04f 0100 	mov.w	r1, #0
    c5be:	0018      	movs	r0, r3
    c5c0:	2100      	movs	r1, #0
    c5c2:	ea50 0301 	orrs.w	r3, r0, r1
    c5c6:	f000 80b0 	beq.w	c72a <divu64_10+0x182>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c5ca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c5ce:	f04f 0400 	mov.w	r4, #0
    c5d2:	f04f 0500 	mov.w	r5, #0
    c5d6:	0854      	lsrs	r4, r2, #1
    c5d8:	ea44 74c3 	orr.w	r4, r4, r3, lsl #31
    c5dc:	085d      	lsrs	r5, r3, #1
    c5de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c5e2:	f04f 0000 	mov.w	r0, #0
    c5e6:	f04f 0100 	mov.w	r1, #0
    c5ea:	0890      	lsrs	r0, r2, #2
    c5ec:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
    c5f0:	0899      	lsrs	r1, r3, #2
    c5f2:	eb14 0a00 	adds.w	sl, r4, r0
    c5f6:	eb45 0b01 	adc.w	fp, r5, r1
    c5fa:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
        q64 += (q64 >> 4);
    c5fe:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c602:	f04f 0000 	mov.w	r0, #0
    c606:	f04f 0100 	mov.w	r1, #0
    c60a:	0910      	lsrs	r0, r2, #4
    c60c:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
    c610:	0919      	lsrs	r1, r3, #4
    c612:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c616:	1814      	adds	r4, r2, r0
    c618:	9402      	str	r4, [sp, #8]
    c61a:	414b      	adcs	r3, r1
    c61c:	9303      	str	r3, [sp, #12]
    c61e:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    c622:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 8);
    c626:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c62a:	f04f 0000 	mov.w	r0, #0
    c62e:	f04f 0100 	mov.w	r1, #0
    c632:	0a10      	lsrs	r0, r2, #8
    c634:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
    c638:	0a19      	lsrs	r1, r3, #8
    c63a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c63e:	1814      	adds	r4, r2, r0
    c640:	9404      	str	r4, [sp, #16]
    c642:	414b      	adcs	r3, r1
    c644:	9305      	str	r3, [sp, #20]
    c646:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    c64a:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 16);
    c64e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c652:	f04f 0000 	mov.w	r0, #0
    c656:	f04f 0100 	mov.w	r1, #0
    c65a:	0c10      	lsrs	r0, r2, #16
    c65c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    c660:	0c19      	lsrs	r1, r3, #16
    c662:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c666:	1814      	adds	r4, r2, r0
    c668:	9406      	str	r4, [sp, #24]
    c66a:	414b      	adcs	r3, r1
    c66c:	9307      	str	r3, [sp, #28]
    c66e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
    c672:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 32);
    c676:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c67a:	f04f 0000 	mov.w	r0, #0
    c67e:	f04f 0100 	mov.w	r1, #0
    c682:	0018      	movs	r0, r3
    c684:	2100      	movs	r1, #0
    c686:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c68a:	1814      	adds	r4, r2, r0
    c68c:	9408      	str	r4, [sp, #32]
    c68e:	414b      	adcs	r3, r1
    c690:	9309      	str	r3, [sp, #36]	; 0x24
    c692:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
    c696:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 >>= 3;
    c69a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    c69e:	f04f 0200 	mov.w	r2, #0
    c6a2:	f04f 0300 	mov.w	r3, #0
    c6a6:	08c2      	lsrs	r2, r0, #3
    c6a8:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    c6ac:	08cb      	lsrs	r3, r1, #3
    c6ae:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
        r64 = ui64Val - q64*10;
    c6b2:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
    c6b6:	4622      	mov	r2, r4
    c6b8:	462b      	mov	r3, r5
    c6ba:	f04f 0000 	mov.w	r0, #0
    c6be:	f04f 0100 	mov.w	r1, #0
    c6c2:	0099      	lsls	r1, r3, #2
    c6c4:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
    c6c8:	0090      	lsls	r0, r2, #2
    c6ca:	4602      	mov	r2, r0
    c6cc:	460b      	mov	r3, r1
    c6ce:	1916      	adds	r6, r2, r4
    c6d0:	eb43 0705 	adc.w	r7, r3, r5
    c6d4:	19b3      	adds	r3, r6, r6
    c6d6:	930a      	str	r3, [sp, #40]	; 0x28
    c6d8:	eb47 0307 	adc.w	r3, r7, r7
    c6dc:	930b      	str	r3, [sp, #44]	; 0x2c
    c6de:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    c6e2:	4630      	mov	r0, r6
    c6e4:	4639      	mov	r1, r7
    c6e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c6ea:	1a14      	subs	r4, r2, r0
    c6ec:	940c      	str	r4, [sp, #48]	; 0x30
    c6ee:	eb63 0301 	sbc.w	r3, r3, r1
    c6f2:	930d      	str	r3, [sp, #52]	; 0x34
    c6f4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    c6f8:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
        return q64 + ((r64 + 6) >> 4);
    c6fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    c700:	f112 0806 	adds.w	r8, r2, #6
    c704:	f143 0900 	adc.w	r9, r3, #0
    c708:	f04f 0200 	mov.w	r2, #0
    c70c:	f04f 0300 	mov.w	r3, #0
    c710:	ea4f 1218 	mov.w	r2, r8, lsr #4
    c714:	ea42 7209 	orr.w	r2, r2, r9, lsl #28
    c718:	ea4f 1319 	mov.w	r3, r9, lsr #4
    c71c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    c720:	1814      	adds	r4, r2, r0
    c722:	9400      	str	r4, [sp, #0]
    c724:	414b      	adcs	r3, r1
    c726:	9301      	str	r3, [sp, #4]
    c728:	e02a      	b.n	c780 <divu64_10+0x1d8>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    c72a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c72c:	9317      	str	r3, [sp, #92]	; 0x5c
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c72e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c730:	085a      	lsrs	r2, r3, #1
    c732:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c734:	089b      	lsrs	r3, r3, #2
    c736:	4413      	add	r3, r2
    c738:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 4);
    c73a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c73c:	091b      	lsrs	r3, r3, #4
    c73e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c740:	4413      	add	r3, r2
    c742:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 8);
    c744:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c746:	0a1b      	lsrs	r3, r3, #8
    c748:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c74a:	4413      	add	r3, r2
    c74c:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 16);
    c74e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c750:	0c1b      	lsrs	r3, r3, #16
    c752:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c754:	4413      	add	r3, r2
    c756:	9316      	str	r3, [sp, #88]	; 0x58
        q32 >>= 3;
    c758:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c75a:	08db      	lsrs	r3, r3, #3
    c75c:	9316      	str	r3, [sp, #88]	; 0x58
        r32 = ui32Val - q32*10;
    c75e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c760:	4613      	mov	r3, r2
    c762:	009b      	lsls	r3, r3, #2
    c764:	4413      	add	r3, r2
    c766:	005b      	lsls	r3, r3, #1
    c768:	461a      	mov	r2, r3
    c76a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c76c:	1a9b      	subs	r3, r3, r2
    c76e:	9315      	str	r3, [sp, #84]	; 0x54
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c770:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c772:	3306      	adds	r3, #6
    c774:	091a      	lsrs	r2, r3, #4
    c776:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c778:	4413      	add	r3, r2
    c77a:	2200      	movs	r2, #0
    c77c:	9300      	str	r3, [sp, #0]
    c77e:	9201      	str	r2, [sp, #4]
    }
}
    c780:	e9dd 2300 	ldrd	r2, r3, [sp]
    c784:	4610      	mov	r0, r2
    c786:	4619      	mov	r1, r3
    c788:	b018      	add	sp, #96	; 0x60
    c78a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c78e:	4770      	bx	lr

0000c790 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    c790:	b500      	push	{lr}
    c792:	b085      	sub	sp, #20
    c794:	e9cd 0100 	strd	r0, r1, [sp]
    int iNDigits = ui64Val ? 0 : 1;
    c798:	9a00      	ldr	r2, [sp, #0]
    c79a:	9b01      	ldr	r3, [sp, #4]
    c79c:	4313      	orrs	r3, r2
    c79e:	2b00      	cmp	r3, #0
    c7a0:	bf0c      	ite	eq
    c7a2:	2301      	moveq	r3, #1
    c7a4:	2300      	movne	r3, #0
    c7a6:	b2db      	uxtb	r3, r3
    c7a8:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    c7aa:	e008      	b.n	c7be <ndigits_in_u64+0x2e>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    c7ac:	e9dd 0100 	ldrd	r0, r1, [sp]
    c7b0:	f7ff fefa 	bl	c5a8 <divu64_10>
    c7b4:	e9cd 0100 	strd	r0, r1, [sp]
        ++iNDigits;
    c7b8:	9b03      	ldr	r3, [sp, #12]
    c7ba:	3301      	adds	r3, #1
    c7bc:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    c7be:	e9dd 2300 	ldrd	r2, r3, [sp]
    c7c2:	4313      	orrs	r3, r2
    c7c4:	d1f2      	bne.n	c7ac <ndigits_in_u64+0x1c>
    }

    return iNDigits;
    c7c6:	9b03      	ldr	r3, [sp, #12]
}
    c7c8:	4618      	mov	r0, r3
    c7ca:	b005      	add	sp, #20
    c7cc:	f85d fb04 	ldr.w	pc, [sp], #4

0000c7d0 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    c7d0:	b530      	push	{r4, r5, lr}
    c7d2:	b083      	sub	sp, #12
    c7d4:	e9cd 0100 	strd	r0, r1, [sp]
    if ( i64Val < 0 )
    c7d8:	e9dd 2300 	ldrd	r2, r3, [sp]
    c7dc:	2b00      	cmp	r3, #0
    c7de:	da07      	bge.n	c7f0 <ndigits_in_i64+0x20>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    c7e0:	e9dd 2300 	ldrd	r2, r3, [sp]
    c7e4:	2100      	movs	r1, #0
    c7e6:	4254      	negs	r4, r2
    c7e8:	eb61 0503 	sbc.w	r5, r1, r3
    c7ec:	e9cd 4500 	strd	r4, r5, [sp]
    }

    return ndigits_in_u64((uint64_t) i64Val);
    c7f0:	e9dd 2300 	ldrd	r2, r3, [sp]
    c7f4:	4610      	mov	r0, r2
    c7f6:	4619      	mov	r1, r3
    c7f8:	f7ff ffca 	bl	c790 <ndigits_in_u64>
    c7fc:	4603      	mov	r3, r0
}
    c7fe:	4618      	mov	r0, r3
    c800:	b003      	add	sp, #12
    c802:	bd30      	pop	{r4, r5, pc}

0000c804 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    c804:	b084      	sub	sp, #16
    c806:	e9cd 0100 	strd	r0, r1, [sp]
    int iDigits = ui64Val ? 0 : 1;
    c80a:	9a00      	ldr	r2, [sp, #0]
    c80c:	9b01      	ldr	r3, [sp, #4]
    c80e:	4313      	orrs	r3, r2
    c810:	2b00      	cmp	r3, #0
    c812:	bf0c      	ite	eq
    c814:	2301      	moveq	r3, #1
    c816:	2300      	movne	r3, #0
    c818:	b2db      	uxtb	r3, r3
    c81a:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    c81c:	e00e      	b.n	c83c <ndigits_in_hex+0x38>
    {
        ui64Val >>= 4;
    c81e:	e9dd 0100 	ldrd	r0, r1, [sp]
    c822:	f04f 0200 	mov.w	r2, #0
    c826:	f04f 0300 	mov.w	r3, #0
    c82a:	0902      	lsrs	r2, r0, #4
    c82c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    c830:	090b      	lsrs	r3, r1, #4
    c832:	e9cd 2300 	strd	r2, r3, [sp]
        ++iDigits;
    c836:	9b03      	ldr	r3, [sp, #12]
    c838:	3301      	adds	r3, #1
    c83a:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    c83c:	e9dd 2300 	ldrd	r2, r3, [sp]
    c840:	4313      	orrs	r3, r2
    c842:	d1ec      	bne.n	c81e <ndigits_in_hex+0x1a>
    }

    return iDigits;
    c844:	9b03      	ldr	r3, [sp, #12]
}
    c846:	4618      	mov	r0, r3
    c848:	b004      	add	sp, #16
    c84a:	4770      	bx	lr

0000c84c <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    c84c:	b086      	sub	sp, #24
    c84e:	9001      	str	r0, [sp, #4]
    c850:	9100      	str	r1, [sp, #0]
    bool bNeg = false;
    c852:	2300      	movs	r3, #0
    c854:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    c858:	2300      	movs	r3, #0
    c85a:	9304      	str	r3, [sp, #16]
    c85c:	2300      	movs	r3, #0
    c85e:	9303      	str	r3, [sp, #12]

    if ( *pcStr == '-')
    c860:	9b01      	ldr	r3, [sp, #4]
    c862:	781b      	ldrb	r3, [r3, #0]
    c864:	2b2d      	cmp	r3, #45	; 0x2d
    c866:	d11c      	bne.n	c8a2 <decstr_to_int+0x56>
    {
        bNeg = true;
    c868:	2301      	movs	r3, #1
    c86a:	f88d 3017 	strb.w	r3, [sp, #23]
        pcStr++;
    c86e:	9b01      	ldr	r3, [sp, #4]
    c870:	3301      	adds	r3, #1
    c872:	9301      	str	r3, [sp, #4]
        uCnt++;
    c874:	9b03      	ldr	r3, [sp, #12]
    c876:	3301      	adds	r3, #1
    c878:	9303      	str	r3, [sp, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c87a:	e012      	b.n	c8a2 <decstr_to_int+0x56>
    {
        ++uCnt;
    c87c:	9b03      	ldr	r3, [sp, #12]
    c87e:	3301      	adds	r3, #1
    c880:	9303      	str	r3, [sp, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    c882:	9a04      	ldr	r2, [sp, #16]
    c884:	4613      	mov	r3, r2
    c886:	009b      	lsls	r3, r3, #2
    c888:	4413      	add	r3, r2
    c88a:	005b      	lsls	r3, r3, #1
    c88c:	9304      	str	r3, [sp, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    c88e:	9b01      	ldr	r3, [sp, #4]
    c890:	781b      	ldrb	r3, [r3, #0]
    c892:	461a      	mov	r2, r3
    c894:	9b04      	ldr	r3, [sp, #16]
    c896:	4413      	add	r3, r2
    c898:	3b30      	subs	r3, #48	; 0x30
    c89a:	9304      	str	r3, [sp, #16]
        pcStr++;
    c89c:	9b01      	ldr	r3, [sp, #4]
    c89e:	3301      	adds	r3, #1
    c8a0:	9301      	str	r3, [sp, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c8a2:	9b01      	ldr	r3, [sp, #4]
    c8a4:	781b      	ldrb	r3, [r3, #0]
    c8a6:	2b2f      	cmp	r3, #47	; 0x2f
    c8a8:	d903      	bls.n	c8b2 <decstr_to_int+0x66>
    c8aa:	9b01      	ldr	r3, [sp, #4]
    c8ac:	781b      	ldrb	r3, [r3, #0]
    c8ae:	2b39      	cmp	r3, #57	; 0x39
    c8b0:	d9e4      	bls.n	c87c <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    c8b2:	9b00      	ldr	r3, [sp, #0]
    c8b4:	2b00      	cmp	r3, #0
    c8b6:	d002      	beq.n	c8be <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    c8b8:	9b00      	ldr	r3, [sp, #0]
    c8ba:	9a03      	ldr	r2, [sp, #12]
    c8bc:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    c8be:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c8c2:	2b00      	cmp	r3, #0
    c8c4:	d002      	beq.n	c8cc <decstr_to_int+0x80>
    c8c6:	9b04      	ldr	r3, [sp, #16]
    c8c8:	425b      	negs	r3, r3
    c8ca:	e000      	b.n	c8ce <decstr_to_int+0x82>
    c8cc:	9b04      	ldr	r3, [sp, #16]
}
    c8ce:	4618      	mov	r0, r3
    c8d0:	b006      	add	sp, #24
    c8d2:	4770      	bx	lr

0000c8d4 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c8d4:	b500      	push	{lr}
    c8d6:	b091      	sub	sp, #68	; 0x44
    c8d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
    c8dc:	9201      	str	r2, [sp, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    c8de:	2300      	movs	r3, #0
    c8e0:	930f      	str	r3, [sp, #60]	; 0x3c
    c8e2:	2300      	movs	r3, #0
    c8e4:	930e      	str	r3, [sp, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    c8e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c8ea:	f7ff fe5d 	bl	c5a8 <divu64_10>
    c8ee:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    c8f2:	9902      	ldr	r1, [sp, #8]
    c8f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c8f6:	4613      	mov	r3, r2
    c8f8:	009b      	lsls	r3, r3, #2
    c8fa:	4413      	add	r3, r2
    c8fc:	005b      	lsls	r3, r3, #1
    c8fe:	1acb      	subs	r3, r1, r3
    c900:	930b      	str	r3, [sp, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    c902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c904:	b2da      	uxtb	r2, r3
    c906:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c908:	1c59      	adds	r1, r3, #1
    c90a:	910f      	str	r1, [sp, #60]	; 0x3c
    c90c:	3230      	adds	r2, #48	; 0x30
    c90e:	b2d2      	uxtb	r2, r2
    c910:	3340      	adds	r3, #64	; 0x40
    c912:	446b      	add	r3, sp
    c914:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    c918:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    c91c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    } while ( ui64Val );
    c920:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c924:	4313      	orrs	r3, r2
    c926:	d1de      	bne.n	c8e6 <uint64_to_str+0x12>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    c928:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c92a:	930e      	str	r3, [sp, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c92c:	9b01      	ldr	r3, [sp, #4]
    c92e:	2b00      	cmp	r3, #0
    c930:	d010      	beq.n	c954 <uint64_to_str+0x80>
    {
        while ( ix-- )
    c932:	e007      	b.n	c944 <uint64_to_str+0x70>
        {
            *pcBuf++ = tbuf[ix];
    c934:	9b01      	ldr	r3, [sp, #4]
    c936:	1c5a      	adds	r2, r3, #1
    c938:	9201      	str	r2, [sp, #4]
    c93a:	a904      	add	r1, sp, #16
    c93c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    c93e:	440a      	add	r2, r1
    c940:	7812      	ldrb	r2, [r2, #0]
    c942:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    c944:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c946:	1e5a      	subs	r2, r3, #1
    c948:	920f      	str	r2, [sp, #60]	; 0x3c
    c94a:	2b00      	cmp	r3, #0
    c94c:	d1f2      	bne.n	c934 <uint64_to_str+0x60>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    c94e:	9b01      	ldr	r3, [sp, #4]
    c950:	2200      	movs	r2, #0
    c952:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    c954:	9b0e      	ldr	r3, [sp, #56]	; 0x38
}
    c956:	4618      	mov	r0, r3
    c958:	b011      	add	sp, #68	; 0x44
    c95a:	f85d fb04 	ldr.w	pc, [sp], #4

0000c95e <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    c95e:	b08c      	sub	sp, #48	; 0x30
    c960:	e9cd 0102 	strd	r0, r1, [sp, #8]
    c964:	9201      	str	r2, [sp, #4]
    c966:	f88d 3003 	strb.w	r3, [sp, #3]
    int iNumDig, ix = 0;
    c96a:	2300      	movs	r3, #0
    c96c:	930b      	str	r3, [sp, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    c96e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c972:	4313      	orrs	r3, r2
    c974:	d135      	bne.n	c9e2 <uint64_to_hexstr+0x84>
    {
        tbuf[ix++] = '0';   // Print a '0'
    c976:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c978:	1c5a      	adds	r2, r3, #1
    c97a:	920b      	str	r2, [sp, #44]	; 0x2c
    c97c:	3330      	adds	r3, #48	; 0x30
    c97e:	446b      	add	r3, sp
    c980:	2230      	movs	r2, #48	; 0x30
    c982:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    c986:	e02c      	b.n	c9e2 <uint64_to_hexstr+0x84>
    {
        cCh = ui64Val & 0xf;
    c988:	f89d 3008 	ldrb.w	r3, [sp, #8]
    c98c:	f003 030f 	and.w	r3, r3, #15
    c990:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    c994:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    c998:	2b09      	cmp	r3, #9
    c99a:	d90b      	bls.n	c9b4 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    c99c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c9a0:	2b00      	cmp	r3, #0
    c9a2:	d001      	beq.n	c9a8 <uint64_to_hexstr+0x4a>
    c9a4:	2227      	movs	r2, #39	; 0x27
    c9a6:	e000      	b.n	c9aa <uint64_to_hexstr+0x4c>
    c9a8:	2207      	movs	r2, #7
    c9aa:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    c9ae:	4413      	add	r3, r2
    c9b0:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    c9b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c9b6:	1c5a      	adds	r2, r3, #1
    c9b8:	920b      	str	r2, [sp, #44]	; 0x2c
    c9ba:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    c9be:	3230      	adds	r2, #48	; 0x30
    c9c0:	b2d2      	uxtb	r2, r2
    c9c2:	3330      	adds	r3, #48	; 0x30
    c9c4:	446b      	add	r3, sp
    c9c6:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    c9ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c9ce:	f04f 0200 	mov.w	r2, #0
    c9d2:	f04f 0300 	mov.w	r3, #0
    c9d6:	0902      	lsrs	r2, r0, #4
    c9d8:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    c9dc:	090b      	lsrs	r3, r1, #4
    c9de:	e9cd 2302 	strd	r2, r3, [sp, #8]
    while ( ui64Val )
    c9e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c9e6:	4313      	orrs	r3, r2
    c9e8:	d1ce      	bne.n	c988 <uint64_to_hexstr+0x2a>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    c9ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c9ec:	9309      	str	r3, [sp, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    c9ee:	9b01      	ldr	r3, [sp, #4]
    c9f0:	2b00      	cmp	r3, #0
    c9f2:	d010      	beq.n	ca16 <uint64_to_hexstr+0xb8>
    {
        while (ix--)
    c9f4:	e007      	b.n	ca06 <uint64_to_hexstr+0xa8>
        {
            *pcBuf++ = tbuf[ix];
    c9f6:	9b01      	ldr	r3, [sp, #4]
    c9f8:	1c5a      	adds	r2, r3, #1
    c9fa:	9201      	str	r2, [sp, #4]
    c9fc:	a904      	add	r1, sp, #16
    c9fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ca00:	440a      	add	r2, r1
    ca02:	7812      	ldrb	r2, [r2, #0]
    ca04:	701a      	strb	r2, [r3, #0]
        while (ix--)
    ca06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca08:	1e5a      	subs	r2, r3, #1
    ca0a:	920b      	str	r2, [sp, #44]	; 0x2c
    ca0c:	2b00      	cmp	r3, #0
    ca0e:	d1f2      	bne.n	c9f6 <uint64_to_hexstr+0x98>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    ca10:	9b01      	ldr	r3, [sp, #4]
    ca12:	2200      	movs	r2, #0
    ca14:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    ca16:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    ca18:	4618      	mov	r0, r3
    ca1a:	b00c      	add	sp, #48	; 0x30
    ca1c:	4770      	bx	lr

0000ca1e <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    ca1e:	b084      	sub	sp, #16
    ca20:	9001      	str	r0, [sp, #4]
    uint32_t ui32RetVal = 0;
    ca22:	2300      	movs	r3, #0
    ca24:	9303      	str	r3, [sp, #12]
    if ( !pcBuf )
    ca26:	9b01      	ldr	r3, [sp, #4]
    ca28:	2b00      	cmp	r3, #0
    ca2a:	d104      	bne.n	ca36 <simple_strlen+0x18>
    {
        return ui32RetVal;
    ca2c:	9b03      	ldr	r3, [sp, #12]
    ca2e:	e009      	b.n	ca44 <simple_strlen+0x26>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    ca30:	9b03      	ldr	r3, [sp, #12]
    ca32:	3301      	adds	r3, #1
    ca34:	9303      	str	r3, [sp, #12]
    while ( *pcBuf++ )
    ca36:	9b01      	ldr	r3, [sp, #4]
    ca38:	1c5a      	adds	r2, r3, #1
    ca3a:	9201      	str	r2, [sp, #4]
    ca3c:	781b      	ldrb	r3, [r3, #0]
    ca3e:	2b00      	cmp	r3, #0
    ca40:	d1f6      	bne.n	ca30 <simple_strlen+0x12>
    }
    return ui32RetVal;
    ca42:	9b03      	ldr	r3, [sp, #12]
}
    ca44:	4618      	mov	r0, r3
    ca46:	b004      	add	sp, #16
    ca48:	4770      	bx	lr

0000ca4a <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    ca4a:	b086      	sub	sp, #24
    ca4c:	9003      	str	r0, [sp, #12]
    ca4e:	460b      	mov	r3, r1
    ca50:	9201      	str	r2, [sp, #4]
    ca52:	f88d 300b 	strb.w	r3, [sp, #11]
    int32_t i32Cnt = 0;
    ca56:	2300      	movs	r3, #0
    ca58:	9305      	str	r3, [sp, #20]

    if ( i32NumChars <= 0 )
    ca5a:	9b01      	ldr	r3, [sp, #4]
    ca5c:	2b00      	cmp	r3, #0
    ca5e:	dc0d      	bgt.n	ca7c <padbuffer+0x32>
    {
        return i32Cnt;
    ca60:	9b05      	ldr	r3, [sp, #20]
    ca62:	e011      	b.n	ca88 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    ca64:	9b03      	ldr	r3, [sp, #12]
    ca66:	2b00      	cmp	r3, #0
    ca68:	d005      	beq.n	ca76 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    ca6a:	9b03      	ldr	r3, [sp, #12]
    ca6c:	1c5a      	adds	r2, r3, #1
    ca6e:	9203      	str	r2, [sp, #12]
    ca70:	f89d 200b 	ldrb.w	r2, [sp, #11]
    ca74:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    ca76:	9b05      	ldr	r3, [sp, #20]
    ca78:	3301      	adds	r3, #1
    ca7a:	9305      	str	r3, [sp, #20]
    while ( i32NumChars-- )
    ca7c:	9b01      	ldr	r3, [sp, #4]
    ca7e:	1e5a      	subs	r2, r3, #1
    ca80:	9201      	str	r2, [sp, #4]
    ca82:	2b00      	cmp	r3, #0
    ca84:	d1ee      	bne.n	ca64 <padbuffer+0x1a>
    }

    return i32Cnt;
    ca86:	9b05      	ldr	r3, [sp, #20]
}
    ca88:	4618      	mov	r0, r3
    ca8a:	b006      	add	sp, #24
    ca8c:	4770      	bx	lr
	...

0000ca90 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    ca90:	b5f0      	push	{r4, r5, r6, r7, lr}
    ca92:	b08f      	sub	sp, #60	; 0x3c
    ca94:	ed8d 0a03 	vstr	s0, [sp, #12]
    ca98:	9002      	str	r0, [sp, #8]
    ca9a:	9101      	str	r1, [sp, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    ca9c:	9b02      	ldr	r3, [sp, #8]
    ca9e:	681b      	ldr	r3, [r3, #0]
    caa0:	9309      	str	r3, [sp, #36]	; 0x24
    if (iBufSize < 4)
    caa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    caa4:	2b03      	cmp	r3, #3
    caa6:	dc02      	bgt.n	caae <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    caa8:	f06f 0302 	mvn.w	r3, #2
    caac:	e0e9      	b.n	cc82 <ftoa+0x1f2>
    }

    if (fValue == 0.0f)
    caae:	eddd 7a03 	vldr	s15, [sp, #12]
    cab2:	eef5 7a40 	vcmp.f32	s15, #0.0
    cab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    caba:	d104      	bne.n	cac6 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    cabc:	9b02      	ldr	r3, [sp, #8]
    cabe:	4a72      	ldr	r2, [pc, #456]	; (cc88 <ftoa+0x1f8>)
    cac0:	601a      	str	r2, [r3, #0]
        return 3;
    cac2:	2303      	movs	r3, #3
    cac4:	e0dd      	b.n	cc82 <ftoa+0x1f2>
    }

    pcBufInitial = pcBuf;
    cac6:	9b02      	ldr	r3, [sp, #8]
    cac8:	9308      	str	r3, [sp, #32]

    unFloatValue.F = fValue;
    caca:	9b03      	ldr	r3, [sp, #12]
    cacc:	9304      	str	r3, [sp, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    cace:	9b04      	ldr	r3, [sp, #16]
    cad0:	15db      	asrs	r3, r3, #23
    cad2:	b2db      	uxtb	r3, r3
    cad4:	3b7f      	subs	r3, #127	; 0x7f
    cad6:	9307      	str	r3, [sp, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    cad8:	9b04      	ldr	r3, [sp, #16]
    cada:	f3c3 0316 	ubfx	r3, r3, #0, #23
    cade:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    cae2:	9306      	str	r3, [sp, #24]
    i32FracPart = 0;
    cae4:	2300      	movs	r3, #0
    cae6:	930c      	str	r3, [sp, #48]	; 0x30
    i32IntPart = 0;
    cae8:	2300      	movs	r3, #0
    caea:	930d      	str	r3, [sp, #52]	; 0x34

    if (iExp2 >= 31)
    caec:	9b07      	ldr	r3, [sp, #28]
    caee:	2b1e      	cmp	r3, #30
    caf0:	dd02      	ble.n	caf8 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    caf2:	f06f 0301 	mvn.w	r3, #1
    caf6:	e0c4      	b.n	cc82 <ftoa+0x1f2>
    }
    else if (iExp2 < -23)
    caf8:	9b07      	ldr	r3, [sp, #28]
    cafa:	f113 0f17 	cmn.w	r3, #23
    cafe:	da02      	bge.n	cb06 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    cb00:	f04f 33ff 	mov.w	r3, #4294967295
    cb04:	e0bd      	b.n	cc82 <ftoa+0x1f2>
    }
    else if (iExp2 >= 23)
    cb06:	9b07      	ldr	r3, [sp, #28]
    cb08:	2b16      	cmp	r3, #22
    cb0a:	dd06      	ble.n	cb1a <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    cb0c:	9b07      	ldr	r3, [sp, #28]
    cb0e:	3b17      	subs	r3, #23
    cb10:	9a06      	ldr	r2, [sp, #24]
    cb12:	fa02 f303 	lsl.w	r3, r2, r3
    cb16:	930d      	str	r3, [sp, #52]	; 0x34
    cb18:	e01a      	b.n	cb50 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    cb1a:	9b07      	ldr	r3, [sp, #28]
    cb1c:	2b00      	cmp	r3, #0
    cb1e:	db0f      	blt.n	cb40 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    cb20:	9b07      	ldr	r3, [sp, #28]
    cb22:	f1c3 0317 	rsb	r3, r3, #23
    cb26:	9a06      	ldr	r2, [sp, #24]
    cb28:	fa42 f303 	asr.w	r3, r2, r3
    cb2c:	930d      	str	r3, [sp, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    cb2e:	9b07      	ldr	r3, [sp, #28]
    cb30:	3301      	adds	r3, #1
    cb32:	9a06      	ldr	r2, [sp, #24]
    cb34:	fa02 f303 	lsl.w	r3, r2, r3
    cb38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cb3c:	930c      	str	r3, [sp, #48]	; 0x30
    cb3e:	e007      	b.n	cb50 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    cb40:	9b06      	ldr	r3, [sp, #24]
    cb42:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    cb46:	9b07      	ldr	r3, [sp, #28]
    cb48:	43db      	mvns	r3, r3
    cb4a:	fa42 f303 	asr.w	r3, r2, r3
    cb4e:	930c      	str	r3, [sp, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    cb50:	9b04      	ldr	r3, [sp, #16]
    cb52:	2b00      	cmp	r3, #0
    cb54:	da04      	bge.n	cb60 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    cb56:	9b02      	ldr	r3, [sp, #8]
    cb58:	1c5a      	adds	r2, r3, #1
    cb5a:	9202      	str	r2, [sp, #8]
    cb5c:	222d      	movs	r2, #45	; 0x2d
    cb5e:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    cb60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cb62:	2b00      	cmp	r3, #0
    cb64:	d105      	bne.n	cb72 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    cb66:	9b02      	ldr	r3, [sp, #8]
    cb68:	1c5a      	adds	r2, r3, #1
    cb6a:	9202      	str	r2, [sp, #8]
    cb6c:	2230      	movs	r2, #48	; 0x30
    cb6e:	701a      	strb	r2, [r3, #0]
    cb70:	e023      	b.n	cbba <ftoa+0x12a>
    }
    else
    {
        if (i32IntPart > 0)
    cb72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cb74:	2b00      	cmp	r3, #0
    cb76:	dd09      	ble.n	cb8c <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
    cb78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cb7a:	17da      	asrs	r2, r3, #31
    cb7c:	461e      	mov	r6, r3
    cb7e:	4617      	mov	r7, r2
    cb80:	9a02      	ldr	r2, [sp, #8]
    cb82:	4630      	mov	r0, r6
    cb84:	4639      	mov	r1, r7
    cb86:	f7ff fea5 	bl	c8d4 <uint64_to_str>
    cb8a:	e012      	b.n	cbb2 <ftoa+0x122>
        }
        else
        {
            *pcBuf++ = '-';
    cb8c:	9b02      	ldr	r3, [sp, #8]
    cb8e:	1c5a      	adds	r2, r3, #1
    cb90:	9202      	str	r2, [sp, #8]
    cb92:	222d      	movs	r2, #45	; 0x2d
    cb94:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    cb96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cb98:	425b      	negs	r3, r3
    cb9a:	17da      	asrs	r2, r3, #31
    cb9c:	461c      	mov	r4, r3
    cb9e:	4615      	mov	r5, r2
    cba0:	9a02      	ldr	r2, [sp, #8]
    cba2:	4620      	mov	r0, r4
    cba4:	4629      	mov	r1, r5
    cba6:	f7ff fe95 	bl	c8d4 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    cbaa:	e002      	b.n	cbb2 <ftoa+0x122>
        {
            pcBuf++;
    cbac:	9b02      	ldr	r3, [sp, #8]
    cbae:	3301      	adds	r3, #1
    cbb0:	9302      	str	r3, [sp, #8]
        while (*pcBuf)    // Get to end of new string
    cbb2:	9b02      	ldr	r3, [sp, #8]
    cbb4:	781b      	ldrb	r3, [r3, #0]
    cbb6:	2b00      	cmp	r3, #0
    cbb8:	d1f8      	bne.n	cbac <ftoa+0x11c>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    cbba:	9b02      	ldr	r3, [sp, #8]
    cbbc:	1c5a      	adds	r2, r3, #1
    cbbe:	9202      	str	r2, [sp, #8]
    cbc0:	222e      	movs	r2, #46	; 0x2e
    cbc2:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    cbc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cbc6:	2b00      	cmp	r3, #0
    cbc8:	d105      	bne.n	cbd6 <ftoa+0x146>
    {
        *pcBuf++ = '0';
    cbca:	9b02      	ldr	r3, [sp, #8]
    cbcc:	1c5a      	adds	r2, r3, #1
    cbce:	9202      	str	r2, [sp, #8]
    cbd0:	2230      	movs	r2, #48	; 0x30
    cbd2:	701a      	strb	r2, [r3, #0]
    cbd4:	e04f      	b.n	cc76 <ftoa+0x1e6>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    cbd6:	9a02      	ldr	r2, [sp, #8]
    cbd8:	9b08      	ldr	r3, [sp, #32]
    cbda:	1ad3      	subs	r3, r2, r3
    cbdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    cbde:	1ad3      	subs	r3, r2, r3
    cbe0:	3b01      	subs	r3, #1
    cbe2:	9305      	str	r3, [sp, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    cbe4:	9a05      	ldr	r2, [sp, #20]
    cbe6:	9b01      	ldr	r3, [sp, #4]
    cbe8:	4293      	cmp	r3, r2
    cbea:	bfa8      	it	ge
    cbec:	4613      	movge	r3, r2
    cbee:	9305      	str	r3, [sp, #20]

        for (jx = 0; jx < iMax; jx++)
    cbf0:	2300      	movs	r3, #0
    cbf2:	930a      	str	r3, [sp, #40]	; 0x28
    cbf4:	e015      	b.n	cc22 <ftoa+0x192>
        {
            i32FracPart *= 10;
    cbf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cbf8:	4613      	mov	r3, r2
    cbfa:	009b      	lsls	r3, r3, #2
    cbfc:	4413      	add	r3, r2
    cbfe:	005b      	lsls	r3, r3, #1
    cc00:	930c      	str	r3, [sp, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    cc02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cc04:	161b      	asrs	r3, r3, #24
    cc06:	b2da      	uxtb	r2, r3
    cc08:	9b02      	ldr	r3, [sp, #8]
    cc0a:	1c59      	adds	r1, r3, #1
    cc0c:	9102      	str	r1, [sp, #8]
    cc0e:	3230      	adds	r2, #48	; 0x30
    cc10:	b2d2      	uxtb	r2, r2
    cc12:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    cc14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cc16:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cc1a:	930c      	str	r3, [sp, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    cc1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cc1e:	3301      	adds	r3, #1
    cc20:	930a      	str	r3, [sp, #40]	; 0x28
    cc22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    cc24:	9b05      	ldr	r3, [sp, #20]
    cc26:	429a      	cmp	r2, r3
    cc28:	dbe5      	blt.n	cbf6 <ftoa+0x166>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    cc2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cc2c:	4613      	mov	r3, r2
    cc2e:	009b      	lsls	r3, r3, #2
    cc30:	4413      	add	r3, r2
    cc32:	005b      	lsls	r3, r3, #1
    cc34:	161b      	asrs	r3, r3, #24
    cc36:	2b04      	cmp	r3, #4
    cc38:	dd1d      	ble.n	cc76 <ftoa+0x1e6>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    cc3a:	9b02      	ldr	r3, [sp, #8]
    cc3c:	3b01      	subs	r3, #1
    cc3e:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cc40:	e015      	b.n	cc6e <ftoa+0x1de>
            {
                if ( *pcBuftmp == '.' )
    cc42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cc44:	781b      	ldrb	r3, [r3, #0]
    cc46:	2b2e      	cmp	r3, #46	; 0x2e
    cc48:	d00e      	beq.n	cc68 <ftoa+0x1d8>
                {
                }
                else if ( *pcBuftmp == '9' )
    cc4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cc4c:	781b      	ldrb	r3, [r3, #0]
    cc4e:	2b39      	cmp	r3, #57	; 0x39
    cc50:	d103      	bne.n	cc5a <ftoa+0x1ca>
                {
                    *pcBuftmp = '0';
    cc52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cc54:	2230      	movs	r2, #48	; 0x30
    cc56:	701a      	strb	r2, [r3, #0]
    cc58:	e006      	b.n	cc68 <ftoa+0x1d8>
                }
                else
                {
                    *pcBuftmp += 1;
    cc5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cc5c:	781b      	ldrb	r3, [r3, #0]
    cc5e:	3301      	adds	r3, #1
    cc60:	b2da      	uxtb	r2, r3
    cc62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cc64:	701a      	strb	r2, [r3, #0]
                    break;
    cc66:	e006      	b.n	cc76 <ftoa+0x1e6>
                }
                pcBuftmp--;
    cc68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cc6a:	3b01      	subs	r3, #1
    cc6c:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cc6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cc70:	9b08      	ldr	r3, [sp, #32]
    cc72:	429a      	cmp	r2, r3
    cc74:	d2e5      	bcs.n	cc42 <ftoa+0x1b2>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    cc76:	9b02      	ldr	r3, [sp, #8]
    cc78:	2200      	movs	r2, #0
    cc7a:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    cc7c:	9a02      	ldr	r2, [sp, #8]
    cc7e:	9b08      	ldr	r3, [sp, #32]
    cc80:	1ad3      	subs	r3, r2, r3
} // ftoa()
    cc82:	4618      	mov	r0, r3
    cc84:	b00f      	add	sp, #60	; 0x3c
    cc86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cc88:	00302e30 	.word	0x00302e30

0000cc8c <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    cc8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cc90:	b097      	sub	sp, #92	; 0x5c
    cc92:	9003      	str	r0, [sp, #12]
    cc94:	9102      	str	r1, [sp, #8]
    cc96:	9201      	str	r2, [sp, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    cc98:	2300      	movs	r3, #0
    cc9a:	9311      	str	r3, [sp, #68]	; 0x44
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    cc9c:	2300      	movs	r3, #0
    cc9e:	930b      	str	r3, [sp, #44]	; 0x2c

    while ( *pcFmt != 0x0 )
    cca0:	e2e9      	b.n	d276 <am_util_stdio_vsprintf+0x5ea>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    cca2:	2306      	movs	r3, #6
    cca4:	930e      	str	r3, [sp, #56]	; 0x38

        if ( *pcFmt != '%' )
    cca6:	9b02      	ldr	r3, [sp, #8]
    cca8:	781b      	ldrb	r3, [r3, #0]
    ccaa:	2b25      	cmp	r3, #37	; 0x25
    ccac:	d01f      	beq.n	ccee <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    ccae:	9b03      	ldr	r3, [sp, #12]
    ccb0:	2b00      	cmp	r3, #0
    ccb2:	d015      	beq.n	cce0 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    ccb4:	9b02      	ldr	r3, [sp, #8]
    ccb6:	781b      	ldrb	r3, [r3, #0]
    ccb8:	2b0a      	cmp	r3, #10
    ccba:	d10b      	bne.n	ccd4 <am_util_stdio_vsprintf+0x48>
    ccbc:	4ba8      	ldr	r3, [pc, #672]	; (cf60 <am_util_stdio_vsprintf+0x2d4>)
    ccbe:	781b      	ldrb	r3, [r3, #0]
    ccc0:	2b00      	cmp	r3, #0
    ccc2:	d007      	beq.n	ccd4 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    ccc4:	9b03      	ldr	r3, [sp, #12]
    ccc6:	1c5a      	adds	r2, r3, #1
    ccc8:	9203      	str	r2, [sp, #12]
    ccca:	220d      	movs	r2, #13
    cccc:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    ccce:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ccd0:	3301      	adds	r3, #1
    ccd2:	9311      	str	r3, [sp, #68]	; 0x44
                }
                *pcBuf++ = *pcFmt;
    ccd4:	9b03      	ldr	r3, [sp, #12]
    ccd6:	1c5a      	adds	r2, r3, #1
    ccd8:	9203      	str	r2, [sp, #12]
    ccda:	9a02      	ldr	r2, [sp, #8]
    ccdc:	7812      	ldrb	r2, [r2, #0]
    ccde:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    cce0:	9b02      	ldr	r3, [sp, #8]
    cce2:	3301      	adds	r3, #1
    cce4:	9302      	str	r3, [sp, #8]
            ++ui32CharCnt;
    cce6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cce8:	3301      	adds	r3, #1
    ccea:	9311      	str	r3, [sp, #68]	; 0x44
            continue;
    ccec:	e2c3      	b.n	d276 <am_util_stdio_vsprintf+0x5ea>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    ccee:	9b02      	ldr	r3, [sp, #8]
    ccf0:	3301      	adds	r3, #1
    ccf2:	9302      	str	r3, [sp, #8]
        bLower = bLongLong = false;
    ccf4:	2300      	movs	r3, #0
    ccf6:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    ccfa:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    ccfe:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    cd02:	2320      	movs	r3, #32
    cd04:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

        if ( *pcFmt == '0' )
    cd08:	9b02      	ldr	r3, [sp, #8]
    cd0a:	781b      	ldrb	r3, [r3, #0]
    cd0c:	2b30      	cmp	r3, #48	; 0x30
    cd0e:	d105      	bne.n	cd1c <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    cd10:	2330      	movs	r3, #48	; 0x30
    cd12:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
            ++pcFmt;
    cd16:	9b02      	ldr	r3, [sp, #8]
    cd18:	3301      	adds	r3, #1
    cd1a:	9302      	str	r3, [sp, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    cd1c:	ab05      	add	r3, sp, #20
    cd1e:	4619      	mov	r1, r3
    cd20:	9802      	ldr	r0, [sp, #8]
    cd22:	f7ff fd93 	bl	c84c <decstr_to_int>
    cd26:	4603      	mov	r3, r0
    cd28:	9310      	str	r3, [sp, #64]	; 0x40
        pcFmt += ui32NumChars;
    cd2a:	9b05      	ldr	r3, [sp, #20]
    cd2c:	9a02      	ldr	r2, [sp, #8]
    cd2e:	4413      	add	r3, r2
    cd30:	9302      	str	r3, [sp, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    cd32:	9b02      	ldr	r3, [sp, #8]
    cd34:	781b      	ldrb	r3, [r3, #0]
    cd36:	2b73      	cmp	r3, #115	; 0x73
    cd38:	d005      	beq.n	cd46 <am_util_stdio_vsprintf+0xba>
    cd3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cd3c:	2b00      	cmp	r3, #0
    cd3e:	da02      	bge.n	cd46 <am_util_stdio_vsprintf+0xba>
        {
            iWidth = -iWidth;
    cd40:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cd42:	425b      	negs	r3, r3
    cd44:	9310      	str	r3, [sp, #64]	; 0x40
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    cd46:	9b02      	ldr	r3, [sp, #8]
    cd48:	781b      	ldrb	r3, [r3, #0]
    cd4a:	2b2e      	cmp	r3, #46	; 0x2e
    cd4c:	d10d      	bne.n	cd6a <am_util_stdio_vsprintf+0xde>
        {
            ++pcFmt;
    cd4e:	9b02      	ldr	r3, [sp, #8]
    cd50:	3301      	adds	r3, #1
    cd52:	9302      	str	r3, [sp, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    cd54:	ab05      	add	r3, sp, #20
    cd56:	4619      	mov	r1, r3
    cd58:	9802      	ldr	r0, [sp, #8]
    cd5a:	f7ff fd77 	bl	c84c <decstr_to_int>
    cd5e:	4603      	mov	r3, r0
    cd60:	930e      	str	r3, [sp, #56]	; 0x38
            pcFmt += ui32NumChars;
    cd62:	9b05      	ldr	r3, [sp, #20]
    cd64:	9a02      	ldr	r2, [sp, #8]
    cd66:	4413      	add	r3, r2
    cd68:	9302      	str	r3, [sp, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    cd6a:	9b02      	ldr	r3, [sp, #8]
    cd6c:	781b      	ldrb	r3, [r3, #0]
    cd6e:	2b6c      	cmp	r3, #108	; 0x6c
    cd70:	d10c      	bne.n	cd8c <am_util_stdio_vsprintf+0x100>
        {
            pcFmt++;
    cd72:	9b02      	ldr	r3, [sp, #8]
    cd74:	3301      	adds	r3, #1
    cd76:	9302      	str	r3, [sp, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    cd78:	9b02      	ldr	r3, [sp, #8]
    cd7a:	781b      	ldrb	r3, [r3, #0]
    cd7c:	2b6c      	cmp	r3, #108	; 0x6c
    cd7e:	d105      	bne.n	cd8c <am_util_stdio_vsprintf+0x100>
            {
                pcFmt++;
    cd80:	9b02      	ldr	r3, [sp, #8]
    cd82:	3301      	adds	r3, #1
    cd84:	9302      	str	r3, [sp, #8]
                bLongLong = true;
    cd86:	2301      	movs	r3, #1
    cd88:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
            }
        }

        switch ( *pcFmt )
    cd8c:	9b02      	ldr	r3, [sp, #8]
    cd8e:	781b      	ldrb	r3, [r3, #0]
    cd90:	3b46      	subs	r3, #70	; 0x46
    cd92:	2b32      	cmp	r3, #50	; 0x32
    cd94:	f200 825c 	bhi.w	d250 <am_util_stdio_vsprintf+0x5c4>
    cd98:	a201      	add	r2, pc, #4	; (adr r2, cda0 <am_util_stdio_vsprintf+0x114>)
    cd9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cd9e:	bf00      	nop
    cda0:	0000d1d7 	.word	0x0000d1d7
    cda4:	0000d251 	.word	0x0000d251
    cda8:	0000d251 	.word	0x0000d251
    cdac:	0000d251 	.word	0x0000d251
    cdb0:	0000d251 	.word	0x0000d251
    cdb4:	0000d251 	.word	0x0000d251
    cdb8:	0000d251 	.word	0x0000d251
    cdbc:	0000d251 	.word	0x0000d251
    cdc0:	0000d251 	.word	0x0000d251
    cdc4:	0000d251 	.word	0x0000d251
    cdc8:	0000d251 	.word	0x0000d251
    cdcc:	0000d251 	.word	0x0000d251
    cdd0:	0000d251 	.word	0x0000d251
    cdd4:	0000d251 	.word	0x0000d251
    cdd8:	0000d251 	.word	0x0000d251
    cddc:	0000d251 	.word	0x0000d251
    cde0:	0000d251 	.word	0x0000d251
    cde4:	0000d251 	.word	0x0000d251
    cde8:	0000cf6b 	.word	0x0000cf6b
    cdec:	0000d251 	.word	0x0000d251
    cdf0:	0000d251 	.word	0x0000d251
    cdf4:	0000d251 	.word	0x0000d251
    cdf8:	0000d251 	.word	0x0000d251
    cdfc:	0000d251 	.word	0x0000d251
    ce00:	0000d251 	.word	0x0000d251
    ce04:	0000d251 	.word	0x0000d251
    ce08:	0000d251 	.word	0x0000d251
    ce0c:	0000d251 	.word	0x0000d251
    ce10:	0000d251 	.word	0x0000d251
    ce14:	0000ce6d 	.word	0x0000ce6d
    ce18:	0000d09b 	.word	0x0000d09b
    ce1c:	0000d251 	.word	0x0000d251
    ce20:	0000d1d7 	.word	0x0000d1d7
    ce24:	0000d251 	.word	0x0000d251
    ce28:	0000d251 	.word	0x0000d251
    ce2c:	0000d09b 	.word	0x0000d09b
    ce30:	0000d251 	.word	0x0000d251
    ce34:	0000d251 	.word	0x0000d251
    ce38:	0000d251 	.word	0x0000d251
    ce3c:	0000d251 	.word	0x0000d251
    ce40:	0000d251 	.word	0x0000d251
    ce44:	0000d251 	.word	0x0000d251
    ce48:	0000d251 	.word	0x0000d251
    ce4c:	0000d251 	.word	0x0000d251
    ce50:	0000d251 	.word	0x0000d251
    ce54:	0000ce93 	.word	0x0000ce93
    ce58:	0000d251 	.word	0x0000d251
    ce5c:	0000d005 	.word	0x0000d005
    ce60:	0000d251 	.word	0x0000d251
    ce64:	0000d251 	.word	0x0000d251
    ce68:	0000cf65 	.word	0x0000cf65
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    ce6c:	9b01      	ldr	r3, [sp, #4]
    ce6e:	1d1a      	adds	r2, r3, #4
    ce70:	9201      	str	r2, [sp, #4]
    ce72:	681b      	ldr	r3, [r3, #0]
    ce74:	f88d 301f 	strb.w	r3, [sp, #31]

                if ( pcBuf )
    ce78:	9b03      	ldr	r3, [sp, #12]
    ce7a:	2b00      	cmp	r3, #0
    ce7c:	d005      	beq.n	ce8a <am_util_stdio_vsprintf+0x1fe>
                {
                    *pcBuf++ = ui8CharSpecifier;
    ce7e:	9b03      	ldr	r3, [sp, #12]
    ce80:	1c5a      	adds	r2, r3, #1
    ce82:	9203      	str	r2, [sp, #12]
    ce84:	f89d 201f 	ldrb.w	r2, [sp, #31]
    ce88:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    ce8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ce8c:	3301      	adds	r3, #1
    ce8e:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    ce90:	e1ee      	b.n	d270 <am_util_stdio_vsprintf+0x5e4>

            case 's':
                pcStr = va_arg(pArgs, char *);
    ce92:	9b01      	ldr	r3, [sp, #4]
    ce94:	1d1a      	adds	r2, r3, #4
    ce96:	9201      	str	r2, [sp, #4]
    ce98:	681b      	ldr	r3, [r3, #0]
    ce9a:	9315      	str	r3, [sp, #84]	; 0x54
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    ce9c:	9815      	ldr	r0, [sp, #84]	; 0x54
    ce9e:	f7ff fdbe 	bl	ca1e <simple_strlen>
    cea2:	900b      	str	r0, [sp, #44]	; 0x2c
                if ( iWidth > 0 )
    cea4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cea6:	2b00      	cmp	r3, #0
    cea8:	dd2e      	ble.n	cf08 <am_util_stdio_vsprintf+0x27c>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    ceaa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ceac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ceae:	429a      	cmp	r2, r3
    ceb0:	d22a      	bcs.n	cf08 <am_util_stdio_vsprintf+0x27c>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    ceb2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ceb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ceb6:	1ad3      	subs	r3, r2, r3
    ceb8:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    ceba:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cebe:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cec0:	4619      	mov	r1, r3
    cec2:	9803      	ldr	r0, [sp, #12]
    cec4:	f7ff fdc1 	bl	ca4a <padbuffer>
    cec8:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    ceca:	9b03      	ldr	r3, [sp, #12]
    cecc:	2b00      	cmp	r3, #0
    cece:	d001      	beq.n	ced4 <am_util_stdio_vsprintf+0x248>
    ced0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ced2:	e000      	b.n	ced6 <am_util_stdio_vsprintf+0x24a>
    ced4:	2300      	movs	r3, #0
    ced6:	9a03      	ldr	r2, [sp, #12]
    ced8:	4413      	add	r3, r2
    ceda:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    cedc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cede:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cee0:	4413      	add	r3, r2
    cee2:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    cee4:	2300      	movs	r3, #0
    cee6:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }

                while (*pcStr != 0x0)
    cee8:	e00e      	b.n	cf08 <am_util_stdio_vsprintf+0x27c>
                {
                    if ( pcBuf )
    ceea:	9b03      	ldr	r3, [sp, #12]
    ceec:	2b00      	cmp	r3, #0
    ceee:	d005      	beq.n	cefc <am_util_stdio_vsprintf+0x270>
                    {
                        *pcBuf++ = *pcStr;
    cef0:	9b03      	ldr	r3, [sp, #12]
    cef2:	1c5a      	adds	r2, r3, #1
    cef4:	9203      	str	r2, [sp, #12]
    cef6:	9a15      	ldr	r2, [sp, #84]	; 0x54
    cef8:	7812      	ldrb	r2, [r2, #0]
    cefa:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    cefc:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cefe:	3301      	adds	r3, #1
    cf00:	9315      	str	r3, [sp, #84]	; 0x54
                    ++ui32CharCnt;
    cf02:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cf04:	3301      	adds	r3, #1
    cf06:	9311      	str	r3, [sp, #68]	; 0x44
                while (*pcStr != 0x0)
    cf08:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cf0a:	781b      	ldrb	r3, [r3, #0]
    cf0c:	2b00      	cmp	r3, #0
    cf0e:	d1ec      	bne.n	ceea <am_util_stdio_vsprintf+0x25e>
                }

                if ( iWidth )
    cf10:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf12:	2b00      	cmp	r3, #0
    cf14:	f000 81a9 	beq.w	d26a <am_util_stdio_vsprintf+0x5de>
                {
                    iWidth = -iWidth;
    cf18:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf1a:	425b      	negs	r3, r3
    cf1c:	9310      	str	r3, [sp, #64]	; 0x40

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    cf1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cf22:	429a      	cmp	r2, r3
    cf24:	f080 81a1 	bcs.w	d26a <am_util_stdio_vsprintf+0x5de>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cf28:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cf2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cf2c:	1ad3      	subs	r3, r2, r3
    cf2e:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cf30:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cf34:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cf36:	4619      	mov	r1, r3
    cf38:	9803      	ldr	r0, [sp, #12]
    cf3a:	f7ff fd86 	bl	ca4a <padbuffer>
    cf3e:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    cf40:	9b03      	ldr	r3, [sp, #12]
    cf42:	2b00      	cmp	r3, #0
    cf44:	d001      	beq.n	cf4a <am_util_stdio_vsprintf+0x2be>
    cf46:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf48:	e000      	b.n	cf4c <am_util_stdio_vsprintf+0x2c0>
    cf4a:	2300      	movs	r3, #0
    cf4c:	9a03      	ldr	r2, [sp, #12]
    cf4e:	4413      	add	r3, r2
    cf50:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    cf52:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf54:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cf56:	4413      	add	r3, r2
    cf58:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    cf5a:	2300      	movs	r3, #0
    cf5c:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }
                break;
    cf5e:	e184      	b.n	d26a <am_util_stdio_vsprintf+0x5de>
    cf60:	100011fc 	.word	0x100011fc

            case 'x':
                bLower = true;
    cf64:	2301      	movs	r3, #1
    cf66:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cf6a:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    cf6e:	2b00      	cmp	r3, #0
    cf70:	d009      	beq.n	cf86 <am_util_stdio_vsprintf+0x2fa>
    cf72:	9b01      	ldr	r3, [sp, #4]
    cf74:	3307      	adds	r3, #7
    cf76:	f023 0307 	bic.w	r3, r3, #7
    cf7a:	f103 0208 	add.w	r2, r3, #8
    cf7e:	9201      	str	r2, [sp, #4]
    cf80:	e9d3 4500 	ldrd	r4, r5, [r3]
    cf84:	e006      	b.n	cf94 <am_util_stdio_vsprintf+0x308>
                                      va_arg(pArgs, uint32_t);
    cf86:	9b01      	ldr	r3, [sp, #4]
    cf88:	1d1a      	adds	r2, r3, #4
    cf8a:	9201      	str	r2, [sp, #4]
    cf8c:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cf8e:	2200      	movs	r2, #0
    cf90:	461c      	mov	r4, r3
    cf92:	4615      	mov	r5, r2
    cf94:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48

                if ( iWidth )
    cf98:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf9a:	2b00      	cmp	r3, #0
    cf9c:	d01e      	beq.n	cfdc <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    cf9e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    cfa2:	f7ff fc2f 	bl	c804 <ndigits_in_hex>
    cfa6:	4602      	mov	r2, r0
    cfa8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfaa:	1a9b      	subs	r3, r3, r2
    cfac:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cfae:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cfb2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cfb4:	4619      	mov	r1, r3
    cfb6:	9803      	ldr	r0, [sp, #12]
    cfb8:	f7ff fd47 	bl	ca4a <padbuffer>
    cfbc:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    cfbe:	9b03      	ldr	r3, [sp, #12]
    cfc0:	2b00      	cmp	r3, #0
    cfc2:	d001      	beq.n	cfc8 <am_util_stdio_vsprintf+0x33c>
    cfc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfc6:	e000      	b.n	cfca <am_util_stdio_vsprintf+0x33e>
    cfc8:	2300      	movs	r3, #0
    cfca:	9a03      	ldr	r2, [sp, #12]
    cfcc:	4413      	add	r3, r2
    cfce:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    cfd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfd2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cfd4:	4413      	add	r3, r2
    cfd6:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    cfd8:	2300      	movs	r3, #0
    cfda:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    cfdc:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    cfe0:	9a03      	ldr	r2, [sp, #12]
    cfe2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    cfe6:	f7ff fcba 	bl	c95e <uint64_to_hexstr>
    cfea:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    cfec:	9b03      	ldr	r3, [sp, #12]
    cfee:	2b00      	cmp	r3, #0
    cff0:	d003      	beq.n	cffa <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    cff2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cff4:	9a03      	ldr	r2, [sp, #12]
    cff6:	4413      	add	r3, r2
    cff8:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    cffa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cffc:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cffe:	4413      	add	r3, r2
    d000:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d002:	e135      	b.n	d270 <am_util_stdio_vsprintf+0x5e4>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d004:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d008:	2b00      	cmp	r3, #0
    d00a:	d009      	beq.n	d020 <am_util_stdio_vsprintf+0x394>
    d00c:	9b01      	ldr	r3, [sp, #4]
    d00e:	3307      	adds	r3, #7
    d010:	f023 0307 	bic.w	r3, r3, #7
    d014:	f103 0208 	add.w	r2, r3, #8
    d018:	9201      	str	r2, [sp, #4]
    d01a:	e9d3 6700 	ldrd	r6, r7, [r3]
    d01e:	e006      	b.n	d02e <am_util_stdio_vsprintf+0x3a2>
                                      va_arg(pArgs, uint32_t);
    d020:	9b01      	ldr	r3, [sp, #4]
    d022:	1d1a      	adds	r2, r3, #4
    d024:	9201      	str	r2, [sp, #4]
    d026:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d028:	2200      	movs	r2, #0
    d02a:	461e      	mov	r6, r3
    d02c:	4617      	mov	r7, r2
    d02e:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48

                if ( iWidth )
    d032:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d034:	2b00      	cmp	r3, #0
    d036:	d01e      	beq.n	d076 <am_util_stdio_vsprintf+0x3ea>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    d038:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d03c:	f7ff fba8 	bl	c790 <ndigits_in_u64>
    d040:	4602      	mov	r2, r0
    d042:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d044:	1a9b      	subs	r3, r3, r2
    d046:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d048:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d04c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d04e:	4619      	mov	r1, r3
    d050:	9803      	ldr	r0, [sp, #12]
    d052:	f7ff fcfa 	bl	ca4a <padbuffer>
    d056:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d058:	9b03      	ldr	r3, [sp, #12]
    d05a:	2b00      	cmp	r3, #0
    d05c:	d001      	beq.n	d062 <am_util_stdio_vsprintf+0x3d6>
    d05e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d060:	e000      	b.n	d064 <am_util_stdio_vsprintf+0x3d8>
    d062:	2300      	movs	r3, #0
    d064:	9a03      	ldr	r2, [sp, #12]
    d066:	4413      	add	r3, r2
    d068:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d06a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d06c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d06e:	4413      	add	r3, r2
    d070:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d072:	2300      	movs	r3, #0
    d074:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d076:	9a03      	ldr	r2, [sp, #12]
    d078:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d07c:	f7ff fc2a 	bl	c8d4 <uint64_to_str>
    d080:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d082:	9b03      	ldr	r3, [sp, #12]
    d084:	2b00      	cmp	r3, #0
    d086:	d003      	beq.n	d090 <am_util_stdio_vsprintf+0x404>
                {
                    pcBuf += iVal;
    d088:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d08a:	9a03      	ldr	r2, [sp, #12]
    d08c:	4413      	add	r3, r2
    d08e:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d090:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d092:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d094:	4413      	add	r3, r2
    d096:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d098:	e0ea      	b.n	d270 <am_util_stdio_vsprintf+0x5e4>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d09a:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d09e:	2b00      	cmp	r3, #0
    d0a0:	d009      	beq.n	d0b6 <am_util_stdio_vsprintf+0x42a>
    d0a2:	9b01      	ldr	r3, [sp, #4]
    d0a4:	3307      	adds	r3, #7
    d0a6:	f023 0307 	bic.w	r3, r3, #7
    d0aa:	f103 0208 	add.w	r2, r3, #8
    d0ae:	9201      	str	r2, [sp, #4]
    d0b0:	e9d3 8900 	ldrd	r8, r9, [r3]
    d0b4:	e006      	b.n	d0c4 <am_util_stdio_vsprintf+0x438>
                                     va_arg(pArgs, int32_t);
    d0b6:	9b01      	ldr	r3, [sp, #4]
    d0b8:	1d1a      	adds	r2, r3, #4
    d0ba:	9201      	str	r2, [sp, #4]
    d0bc:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d0be:	17da      	asrs	r2, r3, #31
    d0c0:	4698      	mov	r8, r3
    d0c2:	4691      	mov	r9, r2
    d0c4:	e9cd 8908 	strd	r8, r9, [sp, #32]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    d0c8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d0cc:	2b00      	cmp	r3, #0
    d0ce:	da0c      	bge.n	d0ea <am_util_stdio_vsprintf+0x45e>
                {
                    ui64Val = -i64Val;          // Get absolute value
    d0d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d0d4:	2100      	movs	r1, #0
    d0d6:	f1d2 0a00 	rsbs	sl, r2, #0
    d0da:	eb61 0b03 	sbc.w	fp, r1, r3
    d0de:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
                    bNeg = true;
    d0e2:	2301      	movs	r3, #1
    d0e4:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    d0e8:	e006      	b.n	d0f8 <am_util_stdio_vsprintf+0x46c>
                }
                else
                {
                    ui64Val = i64Val;
    d0ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d0ee:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
                    bNeg = false;
    d0f2:	2300      	movs	r3, #0
    d0f4:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                }

                if ( iWidth )
    d0f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d0fa:	2b00      	cmp	r3, #0
    d0fc:	d04a      	beq.n	d194 <am_util_stdio_vsprintf+0x508>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    d0fe:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    d102:	4610      	mov	r0, r2
    d104:	4619      	mov	r1, r3
    d106:	f7ff fb63 	bl	c7d0 <ndigits_in_i64>
    d10a:	4602      	mov	r2, r0
    d10c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d10e:	1a9b      	subs	r3, r3, r2
    d110:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg )
    d112:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d116:	2b00      	cmp	r3, #0
    d118:	d011      	beq.n	d13e <am_util_stdio_vsprintf+0x4b2>
                    {
                        --iWidth;
    d11a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d11c:	3b01      	subs	r3, #1
    d11e:	9310      	str	r3, [sp, #64]	; 0x40

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    d120:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d124:	2b30      	cmp	r3, #48	; 0x30
    d126:	d10a      	bne.n	d13e <am_util_stdio_vsprintf+0x4b2>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    d128:	9b03      	ldr	r3, [sp, #12]
    d12a:	2b00      	cmp	r3, #0
    d12c:	d004      	beq.n	d138 <am_util_stdio_vsprintf+0x4ac>
                            {
                                *pcBuf++ = '-';
    d12e:	9b03      	ldr	r3, [sp, #12]
    d130:	1c5a      	adds	r2, r3, #1
    d132:	9203      	str	r2, [sp, #12]
    d134:	222d      	movs	r2, #45	; 0x2d
    d136:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    d138:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d13a:	3301      	adds	r3, #1
    d13c:	9311      	str	r3, [sp, #68]	; 0x44
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d13e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d142:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d144:	4619      	mov	r1, r3
    d146:	9803      	ldr	r0, [sp, #12]
    d148:	f7ff fc7f 	bl	ca4a <padbuffer>
    d14c:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d14e:	9b03      	ldr	r3, [sp, #12]
    d150:	2b00      	cmp	r3, #0
    d152:	d001      	beq.n	d158 <am_util_stdio_vsprintf+0x4cc>
    d154:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d156:	e000      	b.n	d15a <am_util_stdio_vsprintf+0x4ce>
    d158:	2300      	movs	r3, #0
    d15a:	9a03      	ldr	r2, [sp, #12]
    d15c:	4413      	add	r3, r2
    d15e:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d160:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d162:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d164:	4413      	add	r3, r2
    d166:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d168:	2300      	movs	r3, #0
    d16a:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d16c:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d170:	2b00      	cmp	r3, #0
    d172:	d01e      	beq.n	d1b2 <am_util_stdio_vsprintf+0x526>
    d174:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d178:	2b20      	cmp	r3, #32
    d17a:	d11a      	bne.n	d1b2 <am_util_stdio_vsprintf+0x526>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    d17c:	9b03      	ldr	r3, [sp, #12]
    d17e:	2b00      	cmp	r3, #0
    d180:	d004      	beq.n	d18c <am_util_stdio_vsprintf+0x500>
                        {
                            *pcBuf++ = '-';
    d182:	9b03      	ldr	r3, [sp, #12]
    d184:	1c5a      	adds	r2, r3, #1
    d186:	9203      	str	r2, [sp, #12]
    d188:	222d      	movs	r2, #45	; 0x2d
    d18a:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    d18c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d18e:	3301      	adds	r3, #1
    d190:	9311      	str	r3, [sp, #68]	; 0x44
    d192:	e00e      	b.n	d1b2 <am_util_stdio_vsprintf+0x526>
                    }
                }
                else
                {
                    if ( bNeg )
    d194:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d198:	2b00      	cmp	r3, #0
    d19a:	d00a      	beq.n	d1b2 <am_util_stdio_vsprintf+0x526>
                    {
                        if ( pcBuf )
    d19c:	9b03      	ldr	r3, [sp, #12]
    d19e:	2b00      	cmp	r3, #0
    d1a0:	d004      	beq.n	d1ac <am_util_stdio_vsprintf+0x520>
                        {
                            *pcBuf++ = '-';
    d1a2:	9b03      	ldr	r3, [sp, #12]
    d1a4:	1c5a      	adds	r2, r3, #1
    d1a6:	9203      	str	r2, [sp, #12]
    d1a8:	222d      	movs	r2, #45	; 0x2d
    d1aa:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    d1ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d1ae:	3301      	adds	r3, #1
    d1b0:	9311      	str	r3, [sp, #68]	; 0x44
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d1b2:	9a03      	ldr	r2, [sp, #12]
    d1b4:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d1b8:	f7ff fb8c 	bl	c8d4 <uint64_to_str>
    d1bc:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d1be:	9b03      	ldr	r3, [sp, #12]
    d1c0:	2b00      	cmp	r3, #0
    d1c2:	d003      	beq.n	d1cc <am_util_stdio_vsprintf+0x540>
                {
                    pcBuf += iVal;
    d1c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d1c6:	9a03      	ldr	r2, [sp, #12]
    d1c8:	4413      	add	r3, r2
    d1ca:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d1cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d1ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d1d0:	4413      	add	r3, r2
    d1d2:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d1d4:	e04c      	b.n	d270 <am_util_stdio_vsprintf+0x5e4>


            case 'f':
            case 'F':
                if ( pcBuf )
    d1d6:	9b03      	ldr	r3, [sp, #12]
    d1d8:	2b00      	cmp	r3, #0
    d1da:	d048      	beq.n	d26e <am_util_stdio_vsprintf+0x5e2>
                {
                    float fValue = va_arg(pArgs, double);
    d1dc:	9b01      	ldr	r3, [sp, #4]
    d1de:	3307      	adds	r3, #7
    d1e0:	f023 0307 	bic.w	r3, r3, #7
    d1e4:	f103 0208 	add.w	r2, r3, #8
    d1e8:	9201      	str	r2, [sp, #4]
    d1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
    d1ee:	4610      	mov	r0, r2
    d1f0:	4619      	mov	r1, r3
    d1f2:	f7fe ff85 	bl	c100 <__aeabi_d2f>
    d1f6:	4603      	mov	r3, r0
    d1f8:	9306      	str	r3, [sp, #24]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    d1fa:	9b03      	ldr	r3, [sp, #12]
    d1fc:	2214      	movs	r2, #20
    d1fe:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    d200:	990e      	ldr	r1, [sp, #56]	; 0x38
    d202:	9803      	ldr	r0, [sp, #12]
    d204:	ed9d 0a06 	vldr	s0, [sp, #24]
    d208:	f7ff fc42 	bl	ca90 <ftoa>
    d20c:	900f      	str	r0, [sp, #60]	; 0x3c
                    if ( iVal < 0 )
    d20e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d210:	2b00      	cmp	r3, #0
    d212:	da14      	bge.n	d23e <am_util_stdio_vsprintf+0x5b2>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d214:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d216:	f1b3 3fff 	cmp.w	r3, #4294967295
    d21a:	d102      	bne.n	d222 <am_util_stdio_vsprintf+0x596>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d21c:	4b1e      	ldr	r3, [pc, #120]	; (d298 <am_util_stdio_vsprintf+0x60c>)
    d21e:	930c      	str	r3, [sp, #48]	; 0x30
    d220:	e008      	b.n	d234 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d222:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d224:	f113 0f02 	cmn.w	r3, #2
    d228:	d102      	bne.n	d230 <am_util_stdio_vsprintf+0x5a4>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d22a:	4b1c      	ldr	r3, [pc, #112]	; (d29c <am_util_stdio_vsprintf+0x610>)
    d22c:	930c      	str	r3, [sp, #48]	; 0x30
    d22e:	e001      	b.n	d234 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d230:	4b1b      	ldr	r3, [pc, #108]	; (d2a0 <am_util_stdio_vsprintf+0x614>)
    d232:	930c      	str	r3, [sp, #48]	; 0x30
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d234:	9b03      	ldr	r3, [sp, #12]
    d236:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d238:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    d23a:	2303      	movs	r3, #3
    d23c:	930f      	str	r3, [sp, #60]	; 0x3c
                    }
                    ui32CharCnt += iVal;
    d23e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d240:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d242:	4413      	add	r3, r2
    d244:	9311      	str	r3, [sp, #68]	; 0x44
                    pcBuf += iVal;
    d246:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d248:	9a03      	ldr	r2, [sp, #12]
    d24a:	4413      	add	r3, r2
    d24c:	9303      	str	r3, [sp, #12]
                }
                break;
    d24e:	e00e      	b.n	d26e <am_util_stdio_vsprintf+0x5e2>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d250:	9b03      	ldr	r3, [sp, #12]
    d252:	2b00      	cmp	r3, #0
    d254:	d005      	beq.n	d262 <am_util_stdio_vsprintf+0x5d6>
                {
                    *pcBuf++ = *pcFmt;
    d256:	9b03      	ldr	r3, [sp, #12]
    d258:	1c5a      	adds	r2, r3, #1
    d25a:	9203      	str	r2, [sp, #12]
    d25c:	9a02      	ldr	r2, [sp, #8]
    d25e:	7812      	ldrb	r2, [r2, #0]
    d260:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d262:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d264:	3301      	adds	r3, #1
    d266:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d268:	e002      	b.n	d270 <am_util_stdio_vsprintf+0x5e4>
                break;
    d26a:	bf00      	nop
    d26c:	e000      	b.n	d270 <am_util_stdio_vsprintf+0x5e4>
                break;
    d26e:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d270:	9b02      	ldr	r3, [sp, #8]
    d272:	3301      	adds	r3, #1
    d274:	9302      	str	r3, [sp, #8]
    while ( *pcFmt != 0x0 )
    d276:	9b02      	ldr	r3, [sp, #8]
    d278:	781b      	ldrb	r3, [r3, #0]
    d27a:	2b00      	cmp	r3, #0
    d27c:	f47f ad11 	bne.w	cca2 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d280:	9b03      	ldr	r3, [sp, #12]
    d282:	2b00      	cmp	r3, #0
    d284:	d002      	beq.n	d28c <am_util_stdio_vsprintf+0x600>
    {
        *pcBuf = 0x0;
    d286:	9b03      	ldr	r3, [sp, #12]
    d288:	2200      	movs	r2, #0
    d28a:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d28c:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    d28e:	4618      	mov	r0, r3
    d290:	b017      	add	sp, #92	; 0x5c
    d292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d296:	bf00      	nop
    d298:	00302e30 	.word	0x00302e30
    d29c:	00232e23 	.word	0x00232e23
    d2a0:	003f2e3f 	.word	0x003f2e3f

0000d2a4 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d2a4:	b40f      	push	{r0, r1, r2, r3}
    d2a6:	b500      	push	{lr}
    d2a8:	b083      	sub	sp, #12
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d2aa:	4b0c      	ldr	r3, [pc, #48]	; (d2dc <am_util_stdio_printf+0x38>)
    d2ac:	681b      	ldr	r3, [r3, #0]
    d2ae:	2b00      	cmp	r3, #0
    d2b0:	d101      	bne.n	d2b6 <am_util_stdio_printf+0x12>
    {
        return 0;
    d2b2:	2300      	movs	r3, #0
    d2b4:	e00c      	b.n	d2d0 <am_util_stdio_printf+0x2c>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d2b6:	ab05      	add	r3, sp, #20
    d2b8:	9300      	str	r3, [sp, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d2ba:	9a00      	ldr	r2, [sp, #0]
    d2bc:	9904      	ldr	r1, [sp, #16]
    d2be:	4808      	ldr	r0, [pc, #32]	; (d2e0 <am_util_stdio_printf+0x3c>)
    d2c0:	f7ff fce4 	bl	cc8c <am_util_stdio_vsprintf>
    d2c4:	9001      	str	r0, [sp, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d2c6:	4b05      	ldr	r3, [pc, #20]	; (d2dc <am_util_stdio_printf+0x38>)
    d2c8:	681b      	ldr	r3, [r3, #0]
    d2ca:	4805      	ldr	r0, [pc, #20]	; (d2e0 <am_util_stdio_printf+0x3c>)
    d2cc:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d2ce:	9b01      	ldr	r3, [sp, #4]
}
    d2d0:	4618      	mov	r0, r3
    d2d2:	b003      	add	sp, #12
    d2d4:	f85d eb04 	ldr.w	lr, [sp], #4
    d2d8:	b004      	add	sp, #16
    d2da:	4770      	bx	lr
    d2dc:	100010f8 	.word	0x100010f8
    d2e0:	100010fc 	.word	0x100010fc

0000d2e4 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    d2e4:	b508      	push	{r3, lr}
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d2e6:	4802      	ldr	r0, [pc, #8]	; (d2f0 <am_util_stdio_terminal_clear+0xc>)
    d2e8:	f7ff ffdc 	bl	d2a4 <am_util_stdio_printf>
}
    d2ec:	bf00      	nop
    d2ee:	bd08      	pop	{r3, pc}
    d2f0:	0000f41c 	.word	0x0000f41c

0000d2f4 <am_util_string_strnicmp>:
//!  if str1>str2.
//
//*****************************************************************************
int32_t
am_util_string_strnicmp(const char *str1, const char *str2, int num)
{
    d2f4:	b086      	sub	sp, #24
    d2f6:	9003      	str	r0, [sp, #12]
    d2f8:	9102      	str	r1, [sp, #8]
    d2fa:	9201      	str	r2, [sp, #4]
    uint8_t cChar1, cChar2;

    while ( *str1 && *str2 && num )
    d2fc:	e03a      	b.n	d374 <am_util_string_strnicmp+0x80>
    {
        cChar1 = *str1;
    d2fe:	9b03      	ldr	r3, [sp, #12]
    d300:	781b      	ldrb	r3, [r3, #0]
    d302:	f88d 3017 	strb.w	r3, [sp, #23]
        cChar2 = *str2;
    d306:	9b02      	ldr	r3, [sp, #8]
    d308:	781b      	ldrb	r3, [r3, #0]
    d30a:	f88d 3016 	strb.w	r3, [sp, #22]

        cChar1 |= ( am_cattr[cChar1] & AM_CATTR_UPPER ) ? 0x20 : 0x00;
    d30e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d312:	4a20      	ldr	r2, [pc, #128]	; (d394 <am_util_string_strnicmp+0xa0>)
    d314:	5cd3      	ldrb	r3, [r2, r3]
    d316:	00db      	lsls	r3, r3, #3
    d318:	b25b      	sxtb	r3, r3
    d31a:	f003 0320 	and.w	r3, r3, #32
    d31e:	b25a      	sxtb	r2, r3
    d320:	f99d 3017 	ldrsb.w	r3, [sp, #23]
    d324:	4313      	orrs	r3, r2
    d326:	b25b      	sxtb	r3, r3
    d328:	f88d 3017 	strb.w	r3, [sp, #23]
        cChar2 |= ( am_cattr[cChar2] & AM_CATTR_UPPER ) ? 0x20 : 0x00;
    d32c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d330:	4a18      	ldr	r2, [pc, #96]	; (d394 <am_util_string_strnicmp+0xa0>)
    d332:	5cd3      	ldrb	r3, [r2, r3]
    d334:	00db      	lsls	r3, r3, #3
    d336:	b25b      	sxtb	r3, r3
    d338:	f003 0320 	and.w	r3, r3, #32
    d33c:	b25a      	sxtb	r2, r3
    d33e:	f99d 3016 	ldrsb.w	r3, [sp, #22]
    d342:	4313      	orrs	r3, r2
    d344:	b25b      	sxtb	r3, r3
    d346:	f88d 3016 	strb.w	r3, [sp, #22]

        if ( cChar1 != cChar2 )
    d34a:	f89d 2017 	ldrb.w	r2, [sp, #23]
    d34e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d352:	429a      	cmp	r2, r3
    d354:	d005      	beq.n	d362 <am_util_string_strnicmp+0x6e>
        {
            return cChar1 - cChar2;
    d356:	f89d 2017 	ldrb.w	r2, [sp, #23]
    d35a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d35e:	1ad3      	subs	r3, r2, r3
    d360:	e014      	b.n	d38c <am_util_string_strnicmp+0x98>
        }

        str1++;
    d362:	9b03      	ldr	r3, [sp, #12]
    d364:	3301      	adds	r3, #1
    d366:	9303      	str	r3, [sp, #12]
        str2++;
    d368:	9b02      	ldr	r3, [sp, #8]
    d36a:	3301      	adds	r3, #1
    d36c:	9302      	str	r3, [sp, #8]
        num--;
    d36e:	9b01      	ldr	r3, [sp, #4]
    d370:	3b01      	subs	r3, #1
    d372:	9301      	str	r3, [sp, #4]
    while ( *str1 && *str2 && num )
    d374:	9b03      	ldr	r3, [sp, #12]
    d376:	781b      	ldrb	r3, [r3, #0]
    d378:	2b00      	cmp	r3, #0
    d37a:	d006      	beq.n	d38a <am_util_string_strnicmp+0x96>
    d37c:	9b02      	ldr	r3, [sp, #8]
    d37e:	781b      	ldrb	r3, [r3, #0]
    d380:	2b00      	cmp	r3, #0
    d382:	d002      	beq.n	d38a <am_util_string_strnicmp+0x96>
    d384:	9b01      	ldr	r3, [sp, #4]
    d386:	2b00      	cmp	r3, #0
    d388:	d1b9      	bne.n	d2fe <am_util_string_strnicmp+0xa>
    }

    //
    // Since we made it here, the strings must be equal to n characters.
    //
    return 0;
    d38a:	2300      	movs	r3, #0
}
    d38c:	4618      	mov	r0, r3
    d38e:	b006      	add	sp, #24
    d390:	4770      	bx	lr
    d392:	bf00      	nop
    d394:	0000f430 	.word	0x0000f430

0000d398 <am_util_time_computeDayofWeek>:
//! 7   indicates that the given date is invalid (e.g. 2/29/2015).
//
//*****************************************************************************
int
am_util_time_computeDayofWeek(int iYear, int iMonth, int iDay)
{
    d398:	b08a      	sub	sp, #40	; 0x28
    d39a:	9003      	str	r0, [sp, #12]
    d39c:	9102      	str	r1, [sp, #8]
    d39e:	9201      	str	r2, [sp, #4]
    bool bInvalidDay;
    int iYearOffset;
    int iMonthOffset;
    int iWeekday;

    int iLeapYearOffset = 0;
    d3a0:	2300      	movs	r3, #0
    d3a2:	9308      	str	r3, [sp, #32]

    //
    // Validate inputs.  Return 7 if any are out-of-bounds.
    //
    if ( (iMonth < 1) || (iMonth > 12) || (iYear < 0) || (iDay < 1) )
    d3a4:	9b02      	ldr	r3, [sp, #8]
    d3a6:	2b00      	cmp	r3, #0
    d3a8:	dd08      	ble.n	d3bc <am_util_time_computeDayofWeek+0x24>
    d3aa:	9b02      	ldr	r3, [sp, #8]
    d3ac:	2b0c      	cmp	r3, #12
    d3ae:	dc05      	bgt.n	d3bc <am_util_time_computeDayofWeek+0x24>
    d3b0:	9b03      	ldr	r3, [sp, #12]
    d3b2:	2b00      	cmp	r3, #0
    d3b4:	db02      	blt.n	d3bc <am_util_time_computeDayofWeek+0x24>
    d3b6:	9b01      	ldr	r3, [sp, #4]
    d3b8:	2b00      	cmp	r3, #0
    d3ba:	dc01      	bgt.n	d3c0 <am_util_time_computeDayofWeek+0x28>
    {
        return 7;
    d3bc:	2107      	movs	r1, #7
    d3be:	e097      	b.n	d4f0 <am_util_time_computeDayofWeek+0x158>

    //
    // Make sure this day actually exists in this month. Make sure to include
    // an exception for leap years.
    //
    if (iDay > g_iDaysPerMonth[iMonth - 1])
    d3c0:	9b02      	ldr	r3, [sp, #8]
    d3c2:	3b01      	subs	r3, #1
    d3c4:	4a4c      	ldr	r2, [pc, #304]	; (d4f8 <am_util_time_computeDayofWeek+0x160>)
    d3c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    d3ca:	9b01      	ldr	r3, [sp, #4]
    d3cc:	429a      	cmp	r2, r3
    d3ce:	d22d      	bcs.n	d42c <am_util_time_computeDayofWeek+0x94>
    {
        if (iMonth == 2 && AM_UTIL_TIME_IS_LEAP_YEAR(iYear) && iDay == 29)
    d3d0:	9b02      	ldr	r3, [sp, #8]
    d3d2:	2b02      	cmp	r3, #2
    d3d4:	d126      	bne.n	d424 <am_util_time_computeDayofWeek+0x8c>
    d3d6:	9b03      	ldr	r3, [sp, #12]
    d3d8:	f003 0303 	and.w	r3, r3, #3
    d3dc:	2b00      	cmp	r3, #0
    d3de:	d121      	bne.n	d424 <am_util_time_computeDayofWeek+0x8c>
    d3e0:	9a03      	ldr	r2, [sp, #12]
    d3e2:	4b46      	ldr	r3, [pc, #280]	; (d4fc <am_util_time_computeDayofWeek+0x164>)
    d3e4:	fb83 1302 	smull	r1, r3, r3, r2
    d3e8:	1159      	asrs	r1, r3, #5
    d3ea:	17d3      	asrs	r3, r2, #31
    d3ec:	1acb      	subs	r3, r1, r3
    d3ee:	2164      	movs	r1, #100	; 0x64
    d3f0:	fb01 f303 	mul.w	r3, r1, r3
    d3f4:	1ad3      	subs	r3, r2, r3
    d3f6:	2b00      	cmp	r3, #0
    d3f8:	d10d      	bne.n	d416 <am_util_time_computeDayofWeek+0x7e>
    d3fa:	9a03      	ldr	r2, [sp, #12]
    d3fc:	4b3f      	ldr	r3, [pc, #252]	; (d4fc <am_util_time_computeDayofWeek+0x164>)
    d3fe:	fb83 1302 	smull	r1, r3, r3, r2
    d402:	11d9      	asrs	r1, r3, #7
    d404:	17d3      	asrs	r3, r2, #31
    d406:	1acb      	subs	r3, r1, r3
    d408:	f44f 71c8 	mov.w	r1, #400	; 0x190
    d40c:	fb01 f303 	mul.w	r3, r1, r3
    d410:	1ad3      	subs	r3, r2, r3
    d412:	2b00      	cmp	r3, #0
    d414:	d006      	beq.n	d424 <am_util_time_computeDayofWeek+0x8c>
    d416:	9b01      	ldr	r3, [sp, #4]
    d418:	2b1d      	cmp	r3, #29
    d41a:	d103      	bne.n	d424 <am_util_time_computeDayofWeek+0x8c>
        {
            bInvalidDay = false;
    d41c:	2300      	movs	r3, #0
    d41e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    d422:	e006      	b.n	d432 <am_util_time_computeDayofWeek+0x9a>
        }
        else
        {
            bInvalidDay = true;
    d424:	2301      	movs	r3, #1
    d426:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    d42a:	e002      	b.n	d432 <am_util_time_computeDayofWeek+0x9a>
        }
    }
    else
    {
        bInvalidDay = false;
    d42c:	2300      	movs	r3, #0
    d42e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    }

    if (bInvalidDay)
    d432:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    d436:	2b00      	cmp	r3, #0
    d438:	d001      	beq.n	d43e <am_util_time_computeDayofWeek+0xa6>
    {
        return 7;
    d43a:	2107      	movs	r1, #7
    d43c:	e058      	b.n	d4f0 <am_util_time_computeDayofWeek+0x158>
    }

    iYearOffset = 2 + iYear + iYear / 4 - iYear / 100 + iYear / 400;
    d43e:	9b03      	ldr	r3, [sp, #12]
    d440:	1c9a      	adds	r2, r3, #2
    d442:	9b03      	ldr	r3, [sp, #12]
    d444:	2b00      	cmp	r3, #0
    d446:	da00      	bge.n	d44a <am_util_time_computeDayofWeek+0xb2>
    d448:	3303      	adds	r3, #3
    d44a:	109b      	asrs	r3, r3, #2
    d44c:	441a      	add	r2, r3
    d44e:	9b03      	ldr	r3, [sp, #12]
    d450:	492a      	ldr	r1, [pc, #168]	; (d4fc <am_util_time_computeDayofWeek+0x164>)
    d452:	fb81 0103 	smull	r0, r1, r1, r3
    d456:	1149      	asrs	r1, r1, #5
    d458:	17db      	asrs	r3, r3, #31
    d45a:	1a5b      	subs	r3, r3, r1
    d45c:	441a      	add	r2, r3
    d45e:	9b03      	ldr	r3, [sp, #12]
    d460:	4926      	ldr	r1, [pc, #152]	; (d4fc <am_util_time_computeDayofWeek+0x164>)
    d462:	fb81 0103 	smull	r0, r1, r1, r3
    d466:	11c9      	asrs	r1, r1, #7
    d468:	17db      	asrs	r3, r3, #31
    d46a:	1acb      	subs	r3, r1, r3
    d46c:	4413      	add	r3, r2
    d46e:	9307      	str	r3, [sp, #28]
    iMonthOffset = g_iMonthOffsets[iMonth - 1];
    d470:	9b02      	ldr	r3, [sp, #8]
    d472:	3b01      	subs	r3, #1
    d474:	4a22      	ldr	r2, [pc, #136]	; (d500 <am_util_time_computeDayofWeek+0x168>)
    d476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d47a:	9306      	str	r3, [sp, #24]

    if (AM_UTIL_TIME_IS_LEAP_YEAR(iYear) && (iMonth < 3))
    d47c:	9b03      	ldr	r3, [sp, #12]
    d47e:	f003 0303 	and.w	r3, r3, #3
    d482:	2b00      	cmp	r3, #0
    d484:	d120      	bne.n	d4c8 <am_util_time_computeDayofWeek+0x130>
    d486:	9a03      	ldr	r2, [sp, #12]
    d488:	4b1c      	ldr	r3, [pc, #112]	; (d4fc <am_util_time_computeDayofWeek+0x164>)
    d48a:	fb83 1302 	smull	r1, r3, r3, r2
    d48e:	1159      	asrs	r1, r3, #5
    d490:	17d3      	asrs	r3, r2, #31
    d492:	1acb      	subs	r3, r1, r3
    d494:	2164      	movs	r1, #100	; 0x64
    d496:	fb01 f303 	mul.w	r3, r1, r3
    d49a:	1ad3      	subs	r3, r2, r3
    d49c:	2b00      	cmp	r3, #0
    d49e:	d10d      	bne.n	d4bc <am_util_time_computeDayofWeek+0x124>
    d4a0:	9a03      	ldr	r2, [sp, #12]
    d4a2:	4b16      	ldr	r3, [pc, #88]	; (d4fc <am_util_time_computeDayofWeek+0x164>)
    d4a4:	fb83 1302 	smull	r1, r3, r3, r2
    d4a8:	11d9      	asrs	r1, r3, #7
    d4aa:	17d3      	asrs	r3, r2, #31
    d4ac:	1acb      	subs	r3, r1, r3
    d4ae:	f44f 71c8 	mov.w	r1, #400	; 0x190
    d4b2:	fb01 f303 	mul.w	r3, r1, r3
    d4b6:	1ad3      	subs	r3, r2, r3
    d4b8:	2b00      	cmp	r3, #0
    d4ba:	d005      	beq.n	d4c8 <am_util_time_computeDayofWeek+0x130>
    d4bc:	9b02      	ldr	r3, [sp, #8]
    d4be:	2b02      	cmp	r3, #2
    d4c0:	dc02      	bgt.n	d4c8 <am_util_time_computeDayofWeek+0x130>
    {
        iLeapYearOffset = -1;
    d4c2:	f04f 33ff 	mov.w	r3, #4294967295
    d4c6:	9308      	str	r3, [sp, #32]
    }

    iWeekday = iDay + iYearOffset + iMonthOffset + iLeapYearOffset;
    d4c8:	9a01      	ldr	r2, [sp, #4]
    d4ca:	9b07      	ldr	r3, [sp, #28]
    d4cc:	441a      	add	r2, r3
    d4ce:	9b06      	ldr	r3, [sp, #24]
    d4d0:	4413      	add	r3, r2
    d4d2:	9a08      	ldr	r2, [sp, #32]
    d4d4:	4413      	add	r3, r2
    d4d6:	9305      	str	r3, [sp, #20]

    return iWeekday % 7;
    d4d8:	9a05      	ldr	r2, [sp, #20]
    d4da:	4b0a      	ldr	r3, [pc, #40]	; (d504 <am_util_time_computeDayofWeek+0x16c>)
    d4dc:	fb83 1302 	smull	r1, r3, r3, r2
    d4e0:	4413      	add	r3, r2
    d4e2:	1099      	asrs	r1, r3, #2
    d4e4:	17d3      	asrs	r3, r2, #31
    d4e6:	1ac9      	subs	r1, r1, r3
    d4e8:	460b      	mov	r3, r1
    d4ea:	00db      	lsls	r3, r3, #3
    d4ec:	1a5b      	subs	r3, r3, r1
    d4ee:	1ad1      	subs	r1, r2, r3
}
    d4f0:	460b      	mov	r3, r1
    d4f2:	4618      	mov	r0, r3
    d4f4:	b00a      	add	sp, #40	; 0x28
    d4f6:	4770      	bx	lr
    d4f8:	0000f530 	.word	0x0000f530
    d4fc:	51eb851f 	.word	0x51eb851f
    d500:	0000f560 	.word	0x0000f560
    d504:	92492493 	.word	0x92492493

0000d508 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    d508:	4811      	ldr	r0, [pc, #68]	; (d550 <zero_loop+0x12>)
    d50a:	4912      	ldr	r1, [pc, #72]	; (d554 <zero_loop+0x16>)
    d50c:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    d50e:	f8d1 d000 	ldr.w	sp, [r1]

#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    d512:	4811      	ldr	r0, [pc, #68]	; (d558 <zero_loop+0x1a>)
    d514:	6801      	ldr	r1, [r0, #0]
    d516:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d51a:	6001      	str	r1, [r0, #0]
    d51c:	f3bf 8f4f 	dsb	sy
    d520:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    d524:	480d      	ldr	r0, [pc, #52]	; (d55c <zero_loop+0x1e>)
    d526:	490e      	ldr	r1, [pc, #56]	; (d560 <zero_loop+0x22>)
    d528:	4a0e      	ldr	r2, [pc, #56]	; (d564 <zero_loop+0x26>)

0000d52a <copy_loop>:
    d52a:	f850 3b04 	ldr.w	r3, [r0], #4
    d52e:	f841 3b04 	str.w	r3, [r1], #4
    d532:	4291      	cmp	r1, r2
    d534:	dbf9      	blt.n	d52a <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    d536:	480c      	ldr	r0, [pc, #48]	; (d568 <zero_loop+0x2a>)
    d538:	490c      	ldr	r1, [pc, #48]	; (d56c <zero_loop+0x2e>)
    d53a:	f04f 0200 	mov.w	r2, #0

0000d53e <zero_loop>:
    d53e:	4288      	cmp	r0, r1
    d540:	bfb8      	it	lt
    d542:	f840 2b04 	strlt.w	r2, [r0], #4
    d546:	dbfa      	blt.n	d53e <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    d548:	f7fe feb0 	bl	c2ac <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    d54c:	be00      	bkpt	0x0000
}
    d54e:	bf00      	nop
    d550:	e000ed08 	.word	0xe000ed08
    d554:	0000c000 	.word	0x0000c000
    d558:	e000ed88 	.word	0xe000ed88
    d55c:	0000f878 	.word	0x0000f878
    d560:	10001000 	.word	0x10001000
    d564:	100010cc 	.word	0x100010cc
    d568:	100010cc 	.word	0x100010cc
    d56c:	10001ad8 	.word	0x10001ad8

0000d570 <NMI_Handler>:
NMI_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d570:	e7fe      	b.n	d570 <NMI_Handler>

0000d572 <BusFault_Handler>:
HardFault_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d572:	e7fe      	b.n	d572 <BusFault_Handler>

0000d574 <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d574:	e7fe      	b.n	d574 <DebugMon_Handler>
	...

0000d578 <am_bsp_uart_string_print>:
    d578:	b530      	push	{r4, r5, lr}
    d57a:	b087      	sub	sp, #28
    d57c:	7804      	ldrb	r4, [r0, #0]
    d57e:	2300      	movs	r3, #0
    d580:	4605      	mov	r5, r0
    d582:	9300      	str	r3, [sp, #0]
    d584:	b13c      	cbz	r4, d596 <am_bsp_uart_string_print+0x1e>
    d586:	4603      	mov	r3, r0
    d588:	f1c0 0101 	rsb	r1, r0, #1
    d58c:	18cc      	adds	r4, r1, r3
    d58e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    d592:	2a00      	cmp	r2, #0
    d594:	d1fa      	bne.n	d58c <am_bsp_uart_string_print+0x14>
    d596:	4b0a      	ldr	r3, [pc, #40]	; (d5c0 <am_bsp_uart_string_print+0x48>)
    d598:	f8cd d014 	str.w	sp, [sp, #20]
    d59c:	6818      	ldr	r0, [r3, #0]
    d59e:	2200      	movs	r2, #0
    d5a0:	f04f 33ff 	mov.w	r3, #4294967295
    d5a4:	a901      	add	r1, sp, #4
    d5a6:	e9cd 4303 	strd	r4, r3, [sp, #12]
    d5aa:	e9cd 2501 	strd	r2, r5, [sp, #4]
    d5ae:	f001 fbd5 	bl	ed5c <am_hal_uart_transfer>
    d5b2:	9b00      	ldr	r3, [sp, #0]
    d5b4:	42a3      	cmp	r3, r4
    d5b6:	d000      	beq.n	d5ba <am_bsp_uart_string_print+0x42>
    d5b8:	e7fe      	b.n	d5b8 <am_bsp_uart_string_print+0x40>
    d5ba:	b007      	add	sp, #28
    d5bc:	bd30      	pop	{r4, r5, pc}
    d5be:	bf00      	nop
    d5c0:	10001200 	.word	0x10001200

0000d5c4 <am_bsp_low_power_init>:
    d5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d5c6:	f000 ffa9 	bl	e51c <am_hal_pwrctrl_low_power_init>
    d5ca:	f001 f897 	bl	e6fc <am_hal_rtc_osc_disable>
    d5ce:	4b0b      	ldr	r3, [pc, #44]	; (d5fc <am_bsp_low_power_init+0x38>)
    d5d0:	4f0b      	ldr	r7, [pc, #44]	; (d600 <am_bsp_low_power_init+0x3c>)
    d5d2:	681e      	ldr	r6, [r3, #0]
    d5d4:	2400      	movs	r4, #0
    d5d6:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    d5da:	4631      	mov	r1, r6
    d5dc:	4628      	mov	r0, r5
    d5de:	f000 fc8f 	bl	df00 <am_hal_gpio_pinconfig>
    d5e2:	2103      	movs	r1, #3
    d5e4:	4628      	mov	r0, r5
    d5e6:	f000 fdc1 	bl	e16c <am_hal_gpio_state_write>
    d5ea:	3401      	adds	r4, #1
    d5ec:	2100      	movs	r1, #0
    d5ee:	4628      	mov	r0, r5
    d5f0:	f000 fdbc 	bl	e16c <am_hal_gpio_state_write>
    d5f4:	2c05      	cmp	r4, #5
    d5f6:	d1ee      	bne.n	d5d6 <am_bsp_low_power_init+0x12>
    d5f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d5fa:	bf00      	nop
    d5fc:	0000f5cc 	.word	0x0000f5cc
    d600:	10001060 	.word	0x10001060

0000d604 <am_bsp_debug_printf_enable>:
    d604:	b510      	push	{r4, lr}
    d606:	4a2e      	ldr	r2, [pc, #184]	; (d6c0 <am_bsp_debug_printf_enable+0xbc>)
    d608:	6813      	ldr	r3, [r2, #0]
    d60a:	2b01      	cmp	r3, #1
    d60c:	b086      	sub	sp, #24
    d60e:	d005      	beq.n	d61c <am_bsp_debug_printf_enable+0x18>
    d610:	2b02      	cmp	r3, #2
    d612:	d014      	beq.n	d63e <am_bsp_debug_printf_enable+0x3a>
    d614:	2b03      	cmp	r3, #3
    d616:	d030      	beq.n	d67a <am_bsp_debug_printf_enable+0x76>
    d618:	b006      	add	sp, #24
    d61a:	bd10      	pop	{r4, pc}
    d61c:	f000 fdf6 	bl	e20c <am_hal_itm_enable>
    d620:	4b28      	ldr	r3, [pc, #160]	; (d6c4 <am_bsp_debug_printf_enable+0xc0>)
    d622:	9301      	str	r3, [sp, #4]
    d624:	a801      	add	r0, sp, #4
    d626:	f001 f997 	bl	e958 <am_hal_tpiu_enable>
    d62a:	4b27      	ldr	r3, [pc, #156]	; (d6c8 <am_bsp_debug_printf_enable+0xc4>)
    d62c:	2029      	movs	r0, #41	; 0x29
    d62e:	6819      	ldr	r1, [r3, #0]
    d630:	f000 fc66 	bl	df00 <am_hal_gpio_pinconfig>
    d634:	4825      	ldr	r0, [pc, #148]	; (d6cc <am_bsp_debug_printf_enable+0xc8>)
    d636:	f7fe ffad 	bl	c594 <am_util_stdio_printf_init>
    d63a:	b006      	add	sp, #24
    d63c:	bd10      	pop	{r4, pc}
    d63e:	4c24      	ldr	r4, [pc, #144]	; (d6d0 <am_bsp_debug_printf_enable+0xcc>)
    d640:	2000      	movs	r0, #0
    d642:	4621      	mov	r1, r4
    d644:	f001 f9d8 	bl	e9f8 <am_hal_uart_initialize>
    d648:	2200      	movs	r2, #0
    d64a:	4611      	mov	r1, r2
    d64c:	6820      	ldr	r0, [r4, #0]
    d64e:	f001 fa0f 	bl	ea70 <am_hal_uart_power_control>
    d652:	4920      	ldr	r1, [pc, #128]	; (d6d4 <am_bsp_debug_printf_enable+0xd0>)
    d654:	6820      	ldr	r0, [r4, #0]
    d656:	f001 fa83 	bl	eb60 <am_hal_uart_configure>
    d65a:	4b1f      	ldr	r3, [pc, #124]	; (d6d8 <am_bsp_debug_printf_enable+0xd4>)
    d65c:	2016      	movs	r0, #22
    d65e:	6819      	ldr	r1, [r3, #0]
    d660:	f000 fc4e 	bl	df00 <am_hal_gpio_pinconfig>
    d664:	4b1d      	ldr	r3, [pc, #116]	; (d6dc <am_bsp_debug_printf_enable+0xd8>)
    d666:	2017      	movs	r0, #23
    d668:	6819      	ldr	r1, [r3, #0]
    d66a:	f000 fc49 	bl	df00 <am_hal_gpio_pinconfig>
    d66e:	481c      	ldr	r0, [pc, #112]	; (d6e0 <am_bsp_debug_printf_enable+0xdc>)
    d670:	b006      	add	sp, #24
    d672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d676:	f7fe bf8d 	b.w	c594 <am_util_stdio_printf_init>
    d67a:	4c15      	ldr	r4, [pc, #84]	; (d6d0 <am_bsp_debug_printf_enable+0xcc>)
    d67c:	2302      	movs	r3, #2
    d67e:	4621      	mov	r1, r4
    d680:	2000      	movs	r0, #0
    d682:	6013      	str	r3, [r2, #0]
    d684:	f001 f9b8 	bl	e9f8 <am_hal_uart_initialize>
    d688:	2200      	movs	r2, #0
    d68a:	4611      	mov	r1, r2
    d68c:	6820      	ldr	r0, [r4, #0]
    d68e:	f001 f9ef 	bl	ea70 <am_hal_uart_power_control>
    d692:	4914      	ldr	r1, [pc, #80]	; (d6e4 <am_bsp_debug_printf_enable+0xe0>)
    d694:	6820      	ldr	r0, [r4, #0]
    d696:	f001 fa63 	bl	eb60 <am_hal_uart_configure>
    d69a:	4b0f      	ldr	r3, [pc, #60]	; (d6d8 <am_bsp_debug_printf_enable+0xd4>)
    d69c:	2016      	movs	r0, #22
    d69e:	6819      	ldr	r1, [r3, #0]
    d6a0:	f000 fc2e 	bl	df00 <am_hal_gpio_pinconfig>
    d6a4:	4b0d      	ldr	r3, [pc, #52]	; (d6dc <am_bsp_debug_printf_enable+0xd8>)
    d6a6:	2017      	movs	r0, #23
    d6a8:	6819      	ldr	r1, [r3, #0]
    d6aa:	f000 fc29 	bl	df00 <am_hal_gpio_pinconfig>
    d6ae:	480c      	ldr	r0, [pc, #48]	; (d6e0 <am_bsp_debug_printf_enable+0xdc>)
    d6b0:	f7fe ff70 	bl	c594 <am_util_stdio_printf_init>
    d6b4:	4b0c      	ldr	r3, [pc, #48]	; (d6e8 <am_bsp_debug_printf_enable+0xe4>)
    d6b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    d6ba:	601a      	str	r2, [r3, #0]
    d6bc:	b006      	add	sp, #24
    d6be:	bd10      	pop	{r4, pc}
    d6c0:	10001204 	.word	0x10001204
    d6c4:	000f4240 	.word	0x000f4240
    d6c8:	0000f5c0 	.word	0x0000f5c0
    d6cc:	0000e309 	.word	0x0000e309
    d6d0:	10001200 	.word	0x10001200
    d6d4:	0000f590 	.word	0x0000f590
    d6d8:	0000f5bc 	.word	0x0000f5bc
    d6dc:	0000f5b8 	.word	0x0000f5b8
    d6e0:	0000d579 	.word	0x0000d579
    d6e4:	10001088 	.word	0x10001088
    d6e8:	e000e100 	.word	0xe000e100

0000d6ec <am_bsp_debug_printf_disable>:
    d6ec:	b538      	push	{r3, r4, r5, lr}
    d6ee:	4b17      	ldr	r3, [pc, #92]	; (d74c <am_bsp_debug_printf_disable+0x60>)
    d6f0:	681c      	ldr	r4, [r3, #0]
    d6f2:	2c01      	cmp	r4, #1
    d6f4:	d002      	beq.n	d6fc <am_bsp_debug_printf_disable+0x10>
    d6f6:	2c02      	cmp	r4, #2
    d6f8:	d00c      	beq.n	d714 <am_bsp_debug_printf_disable+0x28>
    d6fa:	bd38      	pop	{r3, r4, r5, pc}
    d6fc:	f000 fdaa 	bl	e254 <am_hal_itm_disable>
    d700:	2000      	movs	r0, #0
    d702:	f7fe ff47 	bl	c594 <am_util_stdio_printf_init>
    d706:	4b12      	ldr	r3, [pc, #72]	; (d750 <am_bsp_debug_printf_disable+0x64>)
    d708:	2029      	movs	r0, #41	; 0x29
    d70a:	6819      	ldr	r1, [r3, #0]
    d70c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d710:	f000 bbf6 	b.w	df00 <am_hal_gpio_pinconfig>
    d714:	4d0f      	ldr	r5, [pc, #60]	; (d754 <am_bsp_debug_printf_disable+0x68>)
    d716:	6828      	ldr	r0, [r5, #0]
    d718:	f001 fd20 	bl	f15c <am_hal_uart_tx_flush>
    d71c:	2000      	movs	r0, #0
    d71e:	f7fe ff39 	bl	c594 <am_util_stdio_printf_init>
    d722:	4621      	mov	r1, r4
    d724:	2200      	movs	r2, #0
    d726:	6828      	ldr	r0, [r5, #0]
    d728:	f001 f9a2 	bl	ea70 <am_hal_uart_power_control>
    d72c:	6828      	ldr	r0, [r5, #0]
    d72e:	f001 f98b 	bl	ea48 <am_hal_uart_deinitialize>
    d732:	4b07      	ldr	r3, [pc, #28]	; (d750 <am_bsp_debug_printf_disable+0x64>)
    d734:	681c      	ldr	r4, [r3, #0]
    d736:	2016      	movs	r0, #22
    d738:	4621      	mov	r1, r4
    d73a:	f000 fbe1 	bl	df00 <am_hal_gpio_pinconfig>
    d73e:	4621      	mov	r1, r4
    d740:	2017      	movs	r0, #23
    d742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d746:	f000 bbdb 	b.w	df00 <am_hal_gpio_pinconfig>
    d74a:	bf00      	nop
    d74c:	10001204 	.word	0x10001204
    d750:	0000f5c8 	.word	0x0000f5c8
    d754:	10001200 	.word	0x10001200

0000d758 <am_bsp_itm_printf_enable>:
    d758:	b500      	push	{lr}
    d75a:	4b0b      	ldr	r3, [pc, #44]	; (d788 <am_bsp_itm_printf_enable+0x30>)
    d75c:	b087      	sub	sp, #28
    d75e:	2201      	movs	r2, #1
    d760:	601a      	str	r2, [r3, #0]
    d762:	f000 fd53 	bl	e20c <am_hal_itm_enable>
    d766:	4b09      	ldr	r3, [pc, #36]	; (d78c <am_bsp_itm_printf_enable+0x34>)
    d768:	9301      	str	r3, [sp, #4]
    d76a:	a801      	add	r0, sp, #4
    d76c:	f001 f8f4 	bl	e958 <am_hal_tpiu_enable>
    d770:	4b07      	ldr	r3, [pc, #28]	; (d790 <am_bsp_itm_printf_enable+0x38>)
    d772:	2029      	movs	r0, #41	; 0x29
    d774:	6819      	ldr	r1, [r3, #0]
    d776:	f000 fbc3 	bl	df00 <am_hal_gpio_pinconfig>
    d77a:	4806      	ldr	r0, [pc, #24]	; (d794 <am_bsp_itm_printf_enable+0x3c>)
    d77c:	f7fe ff0a 	bl	c594 <am_util_stdio_printf_init>
    d780:	b007      	add	sp, #28
    d782:	f85d fb04 	ldr.w	pc, [sp], #4
    d786:	bf00      	nop
    d788:	10001204 	.word	0x10001204
    d78c:	000f4240 	.word	0x000f4240
    d790:	0000f5c0 	.word	0x0000f5c0
    d794:	0000e309 	.word	0x0000e309

0000d798 <am_hal_cachectrl_config>:
    d798:	b530      	push	{r4, r5, lr}
    d79a:	b083      	sub	sp, #12
    d79c:	4604      	mov	r4, r0
    d79e:	f000 fd2d 	bl	e1fc <am_hal_interrupt_master_disable>
    d7a2:	4d0e      	ldr	r5, [pc, #56]	; (d7dc <am_hal_cachectrl_config+0x44>)
    d7a4:	9001      	str	r0, [sp, #4]
    d7a6:	682b      	ldr	r3, [r5, #0]
    d7a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    d7ac:	602b      	str	r3, [r5, #0]
    d7ae:	9801      	ldr	r0, [sp, #4]
    d7b0:	f000 fd28 	bl	e204 <am_hal_interrupt_master_set>
    d7b4:	7863      	ldrb	r3, [r4, #1]
    d7b6:	7822      	ldrb	r2, [r4, #0]
    d7b8:	78a1      	ldrb	r1, [r4, #2]
    d7ba:	021b      	lsls	r3, r3, #8
    d7bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
    d7c0:	0112      	lsls	r2, r2, #4
    d7c2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    d7c6:	b2d2      	uxtb	r2, r2
    d7c8:	4313      	orrs	r3, r2
    d7ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d7ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d7d2:	2000      	movs	r0, #0
    d7d4:	602b      	str	r3, [r5, #0]
    d7d6:	b003      	add	sp, #12
    d7d8:	bd30      	pop	{r4, r5, pc}
    d7da:	bf00      	nop
    d7dc:	40018000 	.word	0x40018000

0000d7e0 <am_hal_cachectrl_enable>:
    d7e0:	4a03      	ldr	r2, [pc, #12]	; (d7f0 <am_hal_cachectrl_enable+0x10>)
    d7e2:	6813      	ldr	r3, [r2, #0]
    d7e4:	f043 0301 	orr.w	r3, r3, #1
    d7e8:	2000      	movs	r0, #0
    d7ea:	6013      	str	r3, [r2, #0]
    d7ec:	4770      	bx	lr
    d7ee:	bf00      	nop
    d7f0:	40018000 	.word	0x40018000

0000d7f4 <am_hal_cachectrl_control>:
    d7f4:	b510      	push	{r4, lr}
    d7f6:	3801      	subs	r0, #1
    d7f8:	b08e      	sub	sp, #56	; 0x38
    d7fa:	2810      	cmp	r0, #16
    d7fc:	f200 815e 	bhi.w	dabc <am_hal_cachectrl_control+0x2c8>
    d800:	e8df f010 	tbh	[pc, r0, lsl #1]
    d804:	00360018 	.word	0x00360018
    d808:	0040003d 	.word	0x0040003d
    d80c:	00450043 	.word	0x00450043
    d810:	0011001a 	.word	0x0011001a
    d814:	00540047 	.word	0x00540047
    d818:	009a0061 	.word	0x009a0061
    d81c:	010c00d3 	.word	0x010c00d3
    d820:	013f0126 	.word	0x013f0126
    d824:	001d      	.short	0x001d
    d826:	f44f 7300 	mov.w	r3, #512	; 0x200
    d82a:	4aac      	ldr	r2, [pc, #688]	; (dadc <am_hal_cachectrl_control+0x2e8>)
    d82c:	2000      	movs	r0, #0
    d82e:	6093      	str	r3, [r2, #8]
    d830:	b00e      	add	sp, #56	; 0x38
    d832:	bd10      	pop	{r4, pc}
    d834:	2301      	movs	r3, #1
    d836:	e7f8      	b.n	d82a <am_hal_cachectrl_control+0x36>
    d838:	f44f 6380 	mov.w	r3, #1024	; 0x400
    d83c:	e7f5      	b.n	d82a <am_hal_cachectrl_control+0x36>
    d83e:	2900      	cmp	r1, #0
    d840:	f000 813c 	beq.w	dabc <am_hal_cachectrl_control+0x2c8>
    d844:	684a      	ldr	r2, [r1, #4]
    d846:	48a6      	ldr	r0, [pc, #664]	; (dae0 <am_hal_cachectrl_control+0x2ec>)
    d848:	4202      	tst	r2, r0
    d84a:	f040 8137 	bne.w	dabc <am_hal_cachectrl_control+0x2c8>
    d84e:	688b      	ldr	r3, [r1, #8]
    d850:	4018      	ands	r0, r3
    d852:	f040 8133 	bne.w	dabc <am_hal_cachectrl_control+0x2c8>
    d856:	780c      	ldrb	r4, [r1, #0]
    d858:	2c00      	cmp	r4, #0
    d85a:	f040 8133 	bne.w	dac4 <am_hal_cachectrl_control+0x2d0>
    d85e:	4c9f      	ldr	r4, [pc, #636]	; (dadc <am_hal_cachectrl_control+0x2e8>)
    d860:	7849      	ldrb	r1, [r1, #1]
    d862:	6122      	str	r2, [r4, #16]
    d864:	6163      	str	r3, [r4, #20]
    d866:	6823      	ldr	r3, [r4, #0]
    d868:	f361 0382 	bfi	r3, r1, #2, #1
    d86c:	6023      	str	r3, [r4, #0]
    d86e:	e7df      	b.n	d830 <am_hal_cachectrl_control+0x3c>
    d870:	4b9a      	ldr	r3, [pc, #616]	; (dadc <am_hal_cachectrl_control+0x2e8>)
    d872:	681b      	ldr	r3, [r3, #0]
    d874:	01db      	lsls	r3, r3, #7
    d876:	f140 811f 	bpl.w	dab8 <am_hal_cachectrl_control+0x2c4>
    d87a:	2302      	movs	r3, #2
    d87c:	e7d5      	b.n	d82a <am_hal_cachectrl_control+0x36>
    d87e:	f44f 6388 	mov.w	r3, #1088	; 0x440
    d882:	e7d2      	b.n	d82a <am_hal_cachectrl_control+0x36>
    d884:	f44f 7308 	mov.w	r3, #544	; 0x220
    d888:	e7cf      	b.n	d82a <am_hal_cachectrl_control+0x36>
    d88a:	2340      	movs	r3, #64	; 0x40
    d88c:	e7cd      	b.n	d82a <am_hal_cachectrl_control+0x36>
    d88e:	2320      	movs	r3, #32
    d890:	e7cb      	b.n	d82a <am_hal_cachectrl_control+0x36>
    d892:	f000 fcb3 	bl	e1fc <am_hal_interrupt_master_disable>
    d896:	4a91      	ldr	r2, [pc, #580]	; (dadc <am_hal_cachectrl_control+0x2e8>)
    d898:	9000      	str	r0, [sp, #0]
    d89a:	6813      	ldr	r3, [r2, #0]
    d89c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    d8a0:	6013      	str	r3, [r2, #0]
    d8a2:	9800      	ldr	r0, [sp, #0]
    d8a4:	f000 fcae 	bl	e204 <am_hal_interrupt_master_set>
    d8a8:	2000      	movs	r0, #0
    d8aa:	e7c1      	b.n	d830 <am_hal_cachectrl_control+0x3c>
    d8ac:	f000 fca6 	bl	e1fc <am_hal_interrupt_master_disable>
    d8b0:	4a8a      	ldr	r2, [pc, #552]	; (dadc <am_hal_cachectrl_control+0x2e8>)
    d8b2:	9001      	str	r0, [sp, #4]
    d8b4:	6813      	ldr	r3, [r2, #0]
    d8b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    d8ba:	6013      	str	r3, [r2, #0]
    d8bc:	9801      	ldr	r0, [sp, #4]
    d8be:	f000 fca1 	bl	e204 <am_hal_interrupt_master_set>
    d8c2:	2000      	movs	r0, #0
    d8c4:	e7b4      	b.n	d830 <am_hal_cachectrl_control+0x3c>
    d8c6:	f000 fc99 	bl	e1fc <am_hal_interrupt_master_disable>
    d8ca:	4603      	mov	r3, r0
    d8cc:	4885      	ldr	r0, [pc, #532]	; (dae4 <am_hal_cachectrl_control+0x2f0>)
    d8ce:	9302      	str	r3, [sp, #8]
    d8d0:	f000 fb0c 	bl	deec <am_hal_flash_load_ui32>
    d8d4:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d8d8:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d8dc:	4881      	ldr	r0, [pc, #516]	; (dae4 <am_hal_cachectrl_control+0x2f0>)
    d8de:	f000 fb09 	bl	def4 <am_hal_flash_store_ui32>
    d8e2:	9802      	ldr	r0, [sp, #8]
    d8e4:	f000 fc8e 	bl	e204 <am_hal_interrupt_master_set>
    d8e8:	f000 fc88 	bl	e1fc <am_hal_interrupt_master_disable>
    d8ec:	4603      	mov	r3, r0
    d8ee:	487d      	ldr	r0, [pc, #500]	; (dae4 <am_hal_cachectrl_control+0x2f0>)
    d8f0:	9303      	str	r3, [sp, #12]
    d8f2:	f000 fafb 	bl	deec <am_hal_flash_load_ui32>
    d8f6:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d8fa:	f440 61ee 	orr.w	r1, r0, #1904	; 0x770
    d8fe:	4879      	ldr	r0, [pc, #484]	; (dae4 <am_hal_cachectrl_control+0x2f0>)
    d900:	f000 faf8 	bl	def4 <am_hal_flash_store_ui32>
    d904:	9803      	ldr	r0, [sp, #12]
    d906:	f000 fc7d 	bl	e204 <am_hal_interrupt_master_set>
    d90a:	f000 fc77 	bl	e1fc <am_hal_interrupt_master_disable>
    d90e:	4603      	mov	r3, r0
    d910:	4874      	ldr	r0, [pc, #464]	; (dae4 <am_hal_cachectrl_control+0x2f0>)
    d912:	9304      	str	r3, [sp, #16]
    d914:	f000 faea 	bl	deec <am_hal_flash_load_ui32>
    d918:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d91c:	f020 000f 	bic.w	r0, r0, #15
    d920:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d924:	f041 0103 	orr.w	r1, r1, #3
    d928:	486e      	ldr	r0, [pc, #440]	; (dae4 <am_hal_cachectrl_control+0x2f0>)
    d92a:	f000 fae3 	bl	def4 <am_hal_flash_store_ui32>
    d92e:	9804      	ldr	r0, [sp, #16]
    d930:	f000 fc68 	bl	e204 <am_hal_interrupt_master_set>
    d934:	2000      	movs	r0, #0
    d936:	e77b      	b.n	d830 <am_hal_cachectrl_control+0x3c>
    d938:	f000 fc60 	bl	e1fc <am_hal_interrupt_master_disable>
    d93c:	4603      	mov	r3, r0
    d93e:	4869      	ldr	r0, [pc, #420]	; (dae4 <am_hal_cachectrl_control+0x2f0>)
    d940:	9305      	str	r3, [sp, #20]
    d942:	f000 fad3 	bl	deec <am_hal_flash_load_ui32>
    d946:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d94a:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    d94e:	4865      	ldr	r0, [pc, #404]	; (dae4 <am_hal_cachectrl_control+0x2f0>)
    d950:	f000 fad0 	bl	def4 <am_hal_flash_store_ui32>
    d954:	9805      	ldr	r0, [sp, #20]
    d956:	f000 fc55 	bl	e204 <am_hal_interrupt_master_set>
    d95a:	f000 fc4f 	bl	e1fc <am_hal_interrupt_master_disable>
    d95e:	4603      	mov	r3, r0
    d960:	4860      	ldr	r0, [pc, #384]	; (dae4 <am_hal_cachectrl_control+0x2f0>)
    d962:	9306      	str	r3, [sp, #24]
    d964:	f000 fac2 	bl	deec <am_hal_flash_load_ui32>
    d968:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d96c:	f440 61ea 	orr.w	r1, r0, #1872	; 0x750
    d970:	485c      	ldr	r0, [pc, #368]	; (dae4 <am_hal_cachectrl_control+0x2f0>)
    d972:	f000 fabf 	bl	def4 <am_hal_flash_store_ui32>
    d976:	9806      	ldr	r0, [sp, #24]
    d978:	f000 fc44 	bl	e204 <am_hal_interrupt_master_set>
    d97c:	f000 fc3e 	bl	e1fc <am_hal_interrupt_master_disable>
    d980:	4603      	mov	r3, r0
    d982:	4858      	ldr	r0, [pc, #352]	; (dae4 <am_hal_cachectrl_control+0x2f0>)
    d984:	9307      	str	r3, [sp, #28]
    d986:	f000 fab1 	bl	deec <am_hal_flash_load_ui32>
    d98a:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d98e:	f020 000f 	bic.w	r0, r0, #15
    d992:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d996:	f041 0101 	orr.w	r1, r1, #1
    d99a:	4852      	ldr	r0, [pc, #328]	; (dae4 <am_hal_cachectrl_control+0x2f0>)
    d99c:	f000 faaa 	bl	def4 <am_hal_flash_store_ui32>
    d9a0:	9807      	ldr	r0, [sp, #28]
    d9a2:	f000 fc2f 	bl	e204 <am_hal_interrupt_master_set>
    d9a6:	2000      	movs	r0, #0
    d9a8:	e742      	b.n	d830 <am_hal_cachectrl_control+0x3c>
    d9aa:	f000 fc27 	bl	e1fc <am_hal_interrupt_master_disable>
    d9ae:	4603      	mov	r3, r0
    d9b0:	484c      	ldr	r0, [pc, #304]	; (dae4 <am_hal_cachectrl_control+0x2f0>)
    d9b2:	9308      	str	r3, [sp, #32]
    d9b4:	f000 fa9a 	bl	deec <am_hal_flash_load_ui32>
    d9b8:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d9bc:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    d9c0:	4848      	ldr	r0, [pc, #288]	; (dae4 <am_hal_cachectrl_control+0x2f0>)
    d9c2:	f000 fa97 	bl	def4 <am_hal_flash_store_ui32>
    d9c6:	9808      	ldr	r0, [sp, #32]
    d9c8:	f000 fc1c 	bl	e204 <am_hal_interrupt_master_set>
    d9cc:	f000 fc16 	bl	e1fc <am_hal_interrupt_master_disable>
    d9d0:	4603      	mov	r3, r0
    d9d2:	4844      	ldr	r0, [pc, #272]	; (dae4 <am_hal_cachectrl_control+0x2f0>)
    d9d4:	9309      	str	r3, [sp, #36]	; 0x24
    d9d6:	f000 fa89 	bl	deec <am_hal_flash_load_ui32>
    d9da:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d9de:	f440 61ec 	orr.w	r1, r0, #1888	; 0x760
    d9e2:	4840      	ldr	r0, [pc, #256]	; (dae4 <am_hal_cachectrl_control+0x2f0>)
    d9e4:	f000 fa86 	bl	def4 <am_hal_flash_store_ui32>
    d9e8:	9809      	ldr	r0, [sp, #36]	; 0x24
    d9ea:	f000 fc0b 	bl	e204 <am_hal_interrupt_master_set>
    d9ee:	f000 fc05 	bl	e1fc <am_hal_interrupt_master_disable>
    d9f2:	4603      	mov	r3, r0
    d9f4:	483b      	ldr	r0, [pc, #236]	; (dae4 <am_hal_cachectrl_control+0x2f0>)
    d9f6:	930a      	str	r3, [sp, #40]	; 0x28
    d9f8:	f000 fa78 	bl	deec <am_hal_flash_load_ui32>
    d9fc:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    da00:	f020 000f 	bic.w	r0, r0, #15
    da04:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    da08:	f041 0101 	orr.w	r1, r1, #1
    da0c:	4835      	ldr	r0, [pc, #212]	; (dae4 <am_hal_cachectrl_control+0x2f0>)
    da0e:	f000 fa71 	bl	def4 <am_hal_flash_store_ui32>
    da12:	980a      	ldr	r0, [sp, #40]	; 0x28
    da14:	f000 fbf6 	bl	e204 <am_hal_interrupt_master_set>
    da18:	2000      	movs	r0, #0
    da1a:	e709      	b.n	d830 <am_hal_cachectrl_control+0x3c>
    da1c:	2900      	cmp	r1, #0
    da1e:	d04d      	beq.n	dabc <am_hal_cachectrl_control+0x2c8>
    da20:	680c      	ldr	r4, [r1, #0]
    da22:	2c03      	cmp	r4, #3
    da24:	d84c      	bhi.n	dac0 <am_hal_cachectrl_control+0x2cc>
    da26:	f000 fbe9 	bl	e1fc <am_hal_interrupt_master_disable>
    da2a:	4603      	mov	r3, r0
    da2c:	482d      	ldr	r0, [pc, #180]	; (dae4 <am_hal_cachectrl_control+0x2f0>)
    da2e:	930b      	str	r3, [sp, #44]	; 0x2c
    da30:	f000 fa5c 	bl	deec <am_hal_flash_load_ui32>
    da34:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    da38:	ea40 3104 	orr.w	r1, r0, r4, lsl #12
    da3c:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    da40:	4828      	ldr	r0, [pc, #160]	; (dae4 <am_hal_cachectrl_control+0x2f0>)
    da42:	f000 fa57 	bl	def4 <am_hal_flash_store_ui32>
    da46:	980b      	ldr	r0, [sp, #44]	; 0x2c
    da48:	f000 fbdc 	bl	e204 <am_hal_interrupt_master_set>
    da4c:	2000      	movs	r0, #0
    da4e:	e6ef      	b.n	d830 <am_hal_cachectrl_control+0x3c>
    da50:	b3a1      	cbz	r1, dabc <am_hal_cachectrl_control+0x2c8>
    da52:	680c      	ldr	r4, [r1, #0]
    da54:	2c07      	cmp	r4, #7
    da56:	d833      	bhi.n	dac0 <am_hal_cachectrl_control+0x2cc>
    da58:	f000 fbd0 	bl	e1fc <am_hal_interrupt_master_disable>
    da5c:	4603      	mov	r3, r0
    da5e:	4821      	ldr	r0, [pc, #132]	; (dae4 <am_hal_cachectrl_control+0x2f0>)
    da60:	930c      	str	r3, [sp, #48]	; 0x30
    da62:	f000 fa43 	bl	deec <am_hal_flash_load_ui32>
    da66:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    da6a:	ea40 1104 	orr.w	r1, r0, r4, lsl #4
    da6e:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    da72:	481c      	ldr	r0, [pc, #112]	; (dae4 <am_hal_cachectrl_control+0x2f0>)
    da74:	f000 fa3e 	bl	def4 <am_hal_flash_store_ui32>
    da78:	980c      	ldr	r0, [sp, #48]	; 0x30
    da7a:	f000 fbc3 	bl	e204 <am_hal_interrupt_master_set>
    da7e:	2000      	movs	r0, #0
    da80:	e6d6      	b.n	d830 <am_hal_cachectrl_control+0x3c>
    da82:	b1d9      	cbz	r1, dabc <am_hal_cachectrl_control+0x2c8>
    da84:	680c      	ldr	r4, [r1, #0]
    da86:	2c0f      	cmp	r4, #15
    da88:	d81a      	bhi.n	dac0 <am_hal_cachectrl_control+0x2cc>
    da8a:	f000 fbb7 	bl	e1fc <am_hal_interrupt_master_disable>
    da8e:	4603      	mov	r3, r0
    da90:	4814      	ldr	r0, [pc, #80]	; (dae4 <am_hal_cachectrl_control+0x2f0>)
    da92:	930d      	str	r3, [sp, #52]	; 0x34
    da94:	f000 fa2a 	bl	deec <am_hal_flash_load_ui32>
    da98:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    da9c:	f020 000f 	bic.w	r0, r0, #15
    daa0:	ea40 0104 	orr.w	r1, r0, r4
    daa4:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    daa8:	480e      	ldr	r0, [pc, #56]	; (dae4 <am_hal_cachectrl_control+0x2f0>)
    daaa:	f000 fa23 	bl	def4 <am_hal_flash_store_ui32>
    daae:	980d      	ldr	r0, [sp, #52]	; 0x34
    dab0:	f000 fba8 	bl	e204 <am_hal_interrupt_master_set>
    dab4:	2000      	movs	r0, #0
    dab6:	e6bb      	b.n	d830 <am_hal_cachectrl_control+0x3c>
    dab8:	2007      	movs	r0, #7
    daba:	e6b9      	b.n	d830 <am_hal_cachectrl_control+0x3c>
    dabc:	2006      	movs	r0, #6
    dabe:	e6b7      	b.n	d830 <am_hal_cachectrl_control+0x3c>
    dac0:	2001      	movs	r0, #1
    dac2:	e6b5      	b.n	d830 <am_hal_cachectrl_control+0x3c>
    dac4:	2c01      	cmp	r4, #1
    dac6:	d1f9      	bne.n	dabc <am_hal_cachectrl_control+0x2c8>
    dac8:	4c04      	ldr	r4, [pc, #16]	; (dadc <am_hal_cachectrl_control+0x2e8>)
    daca:	7849      	ldrb	r1, [r1, #1]
    dacc:	61a2      	str	r2, [r4, #24]
    dace:	61e3      	str	r3, [r4, #28]
    dad0:	6823      	ldr	r3, [r4, #0]
    dad2:	f361 03c3 	bfi	r3, r1, #3, #1
    dad6:	6023      	str	r3, [r4, #0]
    dad8:	e6aa      	b.n	d830 <am_hal_cachectrl_control+0x3c>
    dada:	bf00      	nop
    dadc:	40018000 	.word	0x40018000
    dae0:	f800000f 	.word	0xf800000f
    dae4:	40018004 	.word	0x40018004

0000dae8 <am_hal_clkgen_control>:
    dae8:	4b49      	ldr	r3, [pc, #292]	; (dc10 <am_hal_clkgen_control+0x128>)
    daea:	681a      	ldr	r2, [r3, #0]
    daec:	b912      	cbnz	r2, daf4 <am_hal_clkgen_control+0xc>
    daee:	4a49      	ldr	r2, [pc, #292]	; (dc14 <am_hal_clkgen_control+0x12c>)
    daf0:	6812      	ldr	r2, [r2, #0]
    daf2:	601a      	str	r2, [r3, #0]
    daf4:	2809      	cmp	r0, #9
    daf6:	f200 8089 	bhi.w	dc0c <am_hal_clkgen_control+0x124>
    dafa:	e8df f000 	tbb	[pc, r0]
    dafe:	160d      	.short	0x160d
    db00:	423a261e 	.word	0x423a261e
    db04:	055c544c 	.word	0x055c544c
    db08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    db0c:	2000      	movs	r0, #0
    db0e:	6a1a      	ldr	r2, [r3, #32]
    db10:	f36f 0200 	bfc	r2, #0, #1
    db14:	621a      	str	r2, [r3, #32]
    db16:	4770      	bx	lr
    db18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    db1c:	2200      	movs	r2, #0
    db1e:	2147      	movs	r1, #71	; 0x47
    db20:	6159      	str	r1, [r3, #20]
    db22:	4610      	mov	r0, r2
    db24:	619a      	str	r2, [r3, #24]
    db26:	615a      	str	r2, [r3, #20]
    db28:	4770      	bx	lr
    db2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    db2e:	2000      	movs	r0, #0
    db30:	899a      	ldrh	r2, [r3, #12]
    db32:	f36f 0200 	bfc	r2, #0, #1
    db36:	819a      	strh	r2, [r3, #12]
    db38:	4770      	bx	lr
    db3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    db3e:	2000      	movs	r0, #0
    db40:	899a      	ldrh	r2, [r3, #12]
    db42:	f36f 0241 	bfc	r2, #1, #1
    db46:	819a      	strh	r2, [r3, #12]
    db48:	4770      	bx	lr
    db4a:	4a33      	ldr	r2, [pc, #204]	; (dc18 <am_hal_clkgen_control+0x130>)
    db4c:	68d3      	ldr	r3, [r2, #12]
    db4e:	b2db      	uxtb	r3, r3
    db50:	2b21      	cmp	r3, #33	; 0x21
    db52:	d106      	bne.n	db62 <am_hal_clkgen_control+0x7a>
    db54:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    db58:	2101      	movs	r1, #1
    db5a:	f361 2309 	bfi	r3, r1, #8, #2
    db5e:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    db62:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    db66:	2000      	movs	r0, #0
    db68:	8993      	ldrh	r3, [r2, #12]
    db6a:	f043 0301 	orr.w	r3, r3, #1
    db6e:	8193      	strh	r3, [r2, #12]
    db70:	4770      	bx	lr
    db72:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    db76:	2000      	movs	r0, #0
    db78:	8993      	ldrh	r3, [r2, #12]
    db7a:	f043 0302 	orr.w	r3, r3, #2
    db7e:	8193      	strh	r3, [r2, #12]
    db80:	4770      	bx	lr
    db82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    db86:	2200      	movs	r2, #0
    db88:	2047      	movs	r0, #71	; 0x47
    db8a:	2101      	movs	r1, #1
    db8c:	6158      	str	r0, [r3, #20]
    db8e:	6199      	str	r1, [r3, #24]
    db90:	4610      	mov	r0, r2
    db92:	615a      	str	r2, [r3, #20]
    db94:	4770      	bx	lr
    db96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    db9a:	2000      	movs	r0, #0
    db9c:	899a      	ldrh	r2, [r3, #12]
    db9e:	f36f 12c7 	bfc	r2, #7, #1
    dba2:	819a      	strh	r2, [r3, #12]
    dba4:	4770      	bx	lr
    dba6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dbaa:	2000      	movs	r0, #0
    dbac:	8993      	ldrh	r3, [r2, #12]
    dbae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    dbb2:	8193      	strh	r3, [r2, #12]
    dbb4:	4770      	bx	lr
    dbb6:	4a18      	ldr	r2, [pc, #96]	; (dc18 <am_hal_clkgen_control+0x130>)
    dbb8:	68d3      	ldr	r3, [r2, #12]
    dbba:	b2db      	uxtb	r3, r3
    dbbc:	2b21      	cmp	r3, #33	; 0x21
    dbbe:	d00a      	beq.n	dbd6 <am_hal_clkgen_control+0xee>
    dbc0:	b139      	cbz	r1, dbd2 <am_hal_clkgen_control+0xea>
    dbc2:	680b      	ldr	r3, [r1, #0]
    dbc4:	f043 0301 	orr.w	r3, r3, #1
    dbc8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dbcc:	2000      	movs	r0, #0
    dbce:	6213      	str	r3, [r2, #32]
    dbd0:	4770      	bx	lr
    dbd2:	4b12      	ldr	r3, [pc, #72]	; (dc1c <am_hal_clkgen_control+0x134>)
    dbd4:	e7f8      	b.n	dbc8 <am_hal_clkgen_control+0xe0>
    dbd6:	b500      	push	{lr}
    dbd8:	b083      	sub	sp, #12
    dbda:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    dbde:	9101      	str	r1, [sp, #4]
    dbe0:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    dbe4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    dbe8:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    dbec:	f000 f938 	bl	de60 <am_hal_flash_delay>
    dbf0:	9901      	ldr	r1, [sp, #4]
    dbf2:	b149      	cbz	r1, dc08 <am_hal_clkgen_control+0x120>
    dbf4:	680b      	ldr	r3, [r1, #0]
    dbf6:	f043 0301 	orr.w	r3, r3, #1
    dbfa:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dbfe:	2000      	movs	r0, #0
    dc00:	6213      	str	r3, [r2, #32]
    dc02:	b003      	add	sp, #12
    dc04:	f85d fb04 	ldr.w	pc, [sp], #4
    dc08:	4b04      	ldr	r3, [pc, #16]	; (dc1c <am_hal_clkgen_control+0x134>)
    dc0a:	e7f6      	b.n	dbfa <am_hal_clkgen_control+0x112>
    dc0c:	2006      	movs	r0, #6
    dc0e:	4770      	bx	lr
    dc10:	10001a08 	.word	0x10001a08
    dc14:	4ffff000 	.word	0x4ffff000
    dc18:	40020000 	.word	0x40020000
    dc1c:	0025b801 	.word	0x0025b801

0000dc20 <am_hal_clkgen_status_get>:
    dc20:	b1b0      	cbz	r0, dc50 <am_hal_clkgen_status_get+0x30>
    dc22:	b410      	push	{r4}
    dc24:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    dc28:	4603      	mov	r3, r0
    dc2a:	698c      	ldr	r4, [r1, #24]
    dc2c:	4809      	ldr	r0, [pc, #36]	; (dc54 <am_hal_clkgen_status_get+0x34>)
    dc2e:	4a0a      	ldr	r2, [pc, #40]	; (dc58 <am_hal_clkgen_status_get+0x38>)
    dc30:	f014 0f01 	tst.w	r4, #1
    dc34:	bf08      	it	eq
    dc36:	4602      	moveq	r2, r0
    dc38:	601a      	str	r2, [r3, #0]
    dc3a:	69ca      	ldr	r2, [r1, #28]
    dc3c:	f85d 4b04 	ldr.w	r4, [sp], #4
    dc40:	f002 0101 	and.w	r1, r2, #1
    dc44:	f3c2 0240 	ubfx	r2, r2, #1, #1
    dc48:	2000      	movs	r0, #0
    dc4a:	6059      	str	r1, [r3, #4]
    dc4c:	721a      	strb	r2, [r3, #8]
    dc4e:	4770      	bx	lr
    dc50:	2006      	movs	r0, #6
    dc52:	4770      	bx	lr
    dc54:	02dc6c00 	.word	0x02dc6c00
    dc58:	016e3600 	.word	0x016e3600

0000dc5c <am_hal_ctimer_config>:
    dc5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dc60:	b082      	sub	sp, #8
    dc62:	460c      	mov	r4, r1
    dc64:	4606      	mov	r6, r0
    dc66:	f000 fac9 	bl	e1fc <am_hal_interrupt_master_disable>
    dc6a:	4f19      	ldr	r7, [pc, #100]	; (dcd0 <am_hal_ctimer_config+0x74>)
    dc6c:	9001      	str	r0, [sp, #4]
    dc6e:	ea4f 1846 	mov.w	r8, r6, lsl #5
    dc72:	f858 3007 	ldr.w	r3, [r8, r7]
    dc76:	f043 2308 	orr.w	r3, r3, #134219776	; 0x8000800
    dc7a:	f848 3007 	str.w	r3, [r8, r7]
    dc7e:	9801      	ldr	r0, [sp, #4]
    dc80:	f000 fac0 	bl	e204 <am_hal_interrupt_master_set>
    dc84:	e9d4 5301 	ldrd	r5, r3, [r4, #4]
    dc88:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    dc8c:	6823      	ldr	r3, [r4, #0]
    dc8e:	b10b      	cbz	r3, dc94 <am_hal_ctimer_config+0x38>
    dc90:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    dc94:	f000 fab2 	bl	e1fc <am_hal_interrupt_master_disable>
    dc98:	9000      	str	r0, [sp, #0]
    dc9a:	f848 5007 	str.w	r5, [r8, r7]
    dc9e:	9800      	ldr	r0, [sp, #0]
    dca0:	f000 fab0 	bl	e204 <am_hal_interrupt_master_set>
    dca4:	6863      	ldr	r3, [r4, #4]
    dca6:	b90b      	cbnz	r3, dcac <am_hal_ctimer_config+0x50>
    dca8:	6822      	ldr	r2, [r4, #0]
    dcaa:	b14a      	cbz	r2, dcc0 <am_hal_ctimer_config+0x64>
    dcac:	f3c3 0344 	ubfx	r3, r3, #1, #5
    dcb0:	2200      	movs	r2, #0
    dcb2:	4808      	ldr	r0, [pc, #32]	; (dcd4 <am_hal_ctimer_config+0x78>)
    dcb4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
    dcb8:	54b3      	strb	r3, [r6, r2]
    dcba:	b002      	add	sp, #8
    dcbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dcc0:	68a3      	ldr	r3, [r4, #8]
    dcc2:	2b00      	cmp	r3, #0
    dcc4:	d0f9      	beq.n	dcba <am_hal_ctimer_config+0x5e>
    dcc6:	f3c3 0344 	ubfx	r3, r3, #1, #5
    dcca:	2201      	movs	r2, #1
    dccc:	e7f1      	b.n	dcb2 <am_hal_ctimer_config+0x56>
    dcce:	bf00      	nop
    dcd0:	4000800c 	.word	0x4000800c
    dcd4:	100010b0 	.word	0x100010b0

0000dcd8 <am_hal_ctimer_start>:
    dcd8:	b530      	push	{r4, r5, lr}
    dcda:	b083      	sub	sp, #12
    dcdc:	460c      	mov	r4, r1
    dcde:	4605      	mov	r5, r0
    dce0:	f000 fa8c 	bl	e1fc <am_hal_interrupt_master_disable>
    dce4:	ea4f 1c45 	mov.w	ip, r5, lsl #5
    dce8:	4910      	ldr	r1, [pc, #64]	; (dd2c <am_hal_ctimer_start+0x54>)
    dcea:	9001      	str	r0, [sp, #4]
    dcec:	f85c 3001 	ldr.w	r3, [ip, r1]
    dcf0:	f004 2208 	and.w	r2, r4, #134219776	; 0x8000800
    dcf4:	ea23 0202 	bic.w	r2, r3, r2
    dcf8:	f004 1301 	and.w	r3, r4, #65537	; 0x10001
    dcfc:	4313      	orrs	r3, r2
    dcfe:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    dd02:	f84c 3001 	str.w	r3, [ip, r1]
    dd06:	bf0c      	ite	eq
    dd08:	f3c3 4444 	ubfxeq	r4, r3, #17, #5
    dd0c:	f3c3 0444 	ubfxne	r4, r3, #1, #5
    dd10:	4b07      	ldr	r3, [pc, #28]	; (dd30 <am_hal_ctimer_start+0x58>)
    dd12:	9801      	ldr	r0, [sp, #4]
    dd14:	bf0c      	ite	eq
    dd16:	2201      	moveq	r2, #1
    dd18:	2200      	movne	r2, #0
    dd1a:	eb03 0545 	add.w	r5, r3, r5, lsl #1
    dd1e:	54ac      	strb	r4, [r5, r2]
    dd20:	b003      	add	sp, #12
    dd22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    dd26:	f000 ba6d 	b.w	e204 <am_hal_interrupt_master_set>
    dd2a:	bf00      	nop
    dd2c:	4000800c 	.word	0x4000800c
    dd30:	100010b0 	.word	0x100010b0

0000dd34 <am_hal_ctimer_clear>:
    dd34:	b530      	push	{r4, r5, lr}
    dd36:	b083      	sub	sp, #12
    dd38:	0145      	lsls	r5, r0, #5
    dd3a:	460c      	mov	r4, r1
    dd3c:	f000 fa5e 	bl	e1fc <am_hal_interrupt_master_disable>
    dd40:	4b06      	ldr	r3, [pc, #24]	; (dd5c <am_hal_ctimer_clear+0x28>)
    dd42:	9001      	str	r0, [sp, #4]
    dd44:	58e9      	ldr	r1, [r5, r3]
    dd46:	f004 2408 	and.w	r4, r4, #134219776	; 0x8000800
    dd4a:	430c      	orrs	r4, r1
    dd4c:	50ec      	str	r4, [r5, r3]
    dd4e:	9801      	ldr	r0, [sp, #4]
    dd50:	b003      	add	sp, #12
    dd52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    dd56:	f000 ba55 	b.w	e204 <am_hal_interrupt_master_set>
    dd5a:	bf00      	nop
    dd5c:	4000800c 	.word	0x4000800c

0000dd60 <am_hal_ctimer_period_set>:
    dd60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd64:	b082      	sub	sp, #8
    dd66:	0145      	lsls	r5, r0, #5
    dd68:	460e      	mov	r6, r1
    dd6a:	4614      	mov	r4, r2
    dd6c:	461f      	mov	r7, r3
    dd6e:	f000 fa45 	bl	e1fc <am_hal_interrupt_master_disable>
    dd72:	f8df 809c 	ldr.w	r8, [pc, #156]	; de10 <am_hal_ctimer_period_set+0xb0>
    dd76:	9001      	str	r0, [sp, #4]
    dd78:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    dd7c:	f855 2008 	ldr.w	r2, [r5, r8]
    dd80:	4821      	ldr	r0, [pc, #132]	; (de08 <am_hal_ctimer_period_set+0xa8>)
    dd82:	d02f      	beq.n	dde4 <am_hal_ctimer_period_set+0x84>
    dd84:	f402 72c0 	and.w	r2, r2, #384	; 0x180
    dd88:	2a80      	cmp	r2, #128	; 0x80
    dd8a:	d019      	beq.n	ddc0 <am_hal_ctimer_period_set+0x60>
    dd8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    dd90:	2100      	movs	r1, #0
    dd92:	4296      	cmp	r6, r2
    dd94:	460b      	mov	r3, r1
    dd96:	d01c      	beq.n	ddd2 <am_hal_ctimer_period_set+0x72>
    dd98:	4a1c      	ldr	r2, [pc, #112]	; (de0c <am_hal_ctimer_period_set+0xac>)
    dd9a:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    dd9e:	eb05 0702 	add.w	r7, r5, r2
    dda2:	d027      	beq.n	ddf4 <am_hal_ctimer_period_set+0x94>
    dda4:	0c1b      	lsrs	r3, r3, #16
    dda6:	041b      	lsls	r3, r3, #16
    dda8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
    ddac:	b2a4      	uxth	r4, r4
    ddae:	4321      	orrs	r1, r4
    ddb0:	5029      	str	r1, [r5, r0]
    ddb2:	50ab      	str	r3, [r5, r2]
    ddb4:	9801      	ldr	r0, [sp, #4]
    ddb6:	b002      	add	sp, #8
    ddb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ddbc:	f000 ba22 	b.w	e204 <am_hal_interrupt_master_set>
    ddc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ddc4:	4296      	cmp	r6, r2
    ddc6:	ea4f 4104 	mov.w	r1, r4, lsl #16
    ddca:	4623      	mov	r3, r4
    ddcc:	eba4 0407 	sub.w	r4, r4, r7
    ddd0:	d1e2      	bne.n	dd98 <am_hal_ctimer_period_set+0x38>
    ddd2:	b2a4      	uxth	r4, r4
    ddd4:	4321      	orrs	r1, r4
    ddd6:	5029      	str	r1, [r5, r0]
    ddd8:	9801      	ldr	r0, [sp, #4]
    ddda:	b002      	add	sp, #8
    dddc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    dde0:	f000 ba10 	b.w	e204 <am_hal_interrupt_master_set>
    dde4:	0c12      	lsrs	r2, r2, #16
    dde6:	f402 72c0 	and.w	r2, r2, #384	; 0x180
    ddea:	2a80      	cmp	r2, #128	; 0x80
    ddec:	d0e8      	beq.n	ddc0 <am_hal_ctimer_period_set+0x60>
    ddee:	4f07      	ldr	r7, [pc, #28]	; (de0c <am_hal_ctimer_period_set+0xac>)
    ddf0:	2100      	movs	r1, #0
    ddf2:	442f      	add	r7, r5
    ddf4:	b2a4      	uxth	r4, r4
    ddf6:	4321      	orrs	r1, r4
    ddf8:	6039      	str	r1, [r7, #0]
    ddfa:	9801      	ldr	r0, [sp, #4]
    ddfc:	b002      	add	sp, #8
    ddfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    de02:	f000 b9ff 	b.w	e204 <am_hal_interrupt_master_set>
    de06:	bf00      	nop
    de08:	40008004 	.word	0x40008004
    de0c:	40008008 	.word	0x40008008
    de10:	4000800c 	.word	0x4000800c

0000de14 <am_hal_ctimer_int_enable>:
    de14:	b510      	push	{r4, lr}
    de16:	b082      	sub	sp, #8
    de18:	4604      	mov	r4, r0
    de1a:	f000 f9ef 	bl	e1fc <am_hal_interrupt_master_disable>
    de1e:	4a06      	ldr	r2, [pc, #24]	; (de38 <am_hal_ctimer_int_enable+0x24>)
    de20:	9001      	str	r0, [sp, #4]
    de22:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    de26:	4323      	orrs	r3, r4
    de28:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    de2c:	9801      	ldr	r0, [sp, #4]
    de2e:	b002      	add	sp, #8
    de30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    de34:	f000 b9e6 	b.w	e204 <am_hal_interrupt_master_set>
    de38:	40008000 	.word	0x40008000

0000de3c <am_hal_ctimer_int_clear>:
    de3c:	b510      	push	{r4, lr}
    de3e:	b082      	sub	sp, #8
    de40:	4604      	mov	r4, r0
    de42:	f000 f9db 	bl	e1fc <am_hal_interrupt_master_disable>
    de46:	4b05      	ldr	r3, [pc, #20]	; (de5c <am_hal_ctimer_int_clear+0x20>)
    de48:	9001      	str	r0, [sp, #4]
    de4a:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
    de4e:	9801      	ldr	r0, [sp, #4]
    de50:	b002      	add	sp, #8
    de52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    de56:	f000 b9d5 	b.w	e204 <am_hal_interrupt_master_set>
    de5a:	bf00      	nop
    de5c:	40008000 	.word	0x40008000

0000de60 <am_hal_flash_delay>:
    de60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    de64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    de66:	075b      	lsls	r3, r3, #29
    de68:	bf46      	itte	mi
    de6a:	0040      	lslmi	r0, r0, #1
    de6c:	230e      	movmi	r3, #14
    de6e:	230b      	movpl	r3, #11
    de70:	4298      	cmp	r0, r3
    de72:	d902      	bls.n	de7a <am_hal_flash_delay+0x1a>
    de74:	4a01      	ldr	r2, [pc, #4]	; (de7c <am_hal_flash_delay+0x1c>)
    de76:	1ac0      	subs	r0, r0, r3
    de78:	4710      	bx	r2
    de7a:	4770      	bx	lr
    de7c:	0800009d 	.word	0x0800009d

0000de80 <am_hal_flash_delay_status_check>:
    de80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    de84:	f89d c020 	ldrb.w	ip, [sp, #32]
    de88:	f8df 805c 	ldr.w	r8, [pc, #92]	; dee8 <am_hal_flash_delay_status_check+0x68>
    de8c:	4604      	mov	r4, r0
    de8e:	460d      	mov	r5, r1
    de90:	4616      	mov	r6, r2
    de92:	461f      	mov	r7, r3
    de94:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    de98:	f1bc 0f00 	cmp.w	ip, #0
    de9c:	d00a      	beq.n	deb4 <am_hal_flash_delay_status_check+0x34>
    de9e:	e01a      	b.n	ded6 <am_hal_flash_delay_status_check+0x56>
    dea0:	b1f4      	cbz	r4, dee0 <am_hal_flash_delay_status_check+0x60>
    dea2:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    dea6:	f013 0f04 	tst.w	r3, #4
    deaa:	bf0c      	ite	eq
    deac:	2005      	moveq	r0, #5
    deae:	2012      	movne	r0, #18
    deb0:	3c01      	subs	r4, #1
    deb2:	47c0      	blx	r8
    deb4:	6828      	ldr	r0, [r5, #0]
    deb6:	4030      	ands	r0, r6
    deb8:	42b8      	cmp	r0, r7
    deba:	d0f1      	beq.n	dea0 <am_hal_flash_delay_status_check+0x20>
    debc:	2000      	movs	r0, #0
    debe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dec2:	b16c      	cbz	r4, dee0 <am_hal_flash_delay_status_check+0x60>
    dec4:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    dec8:	f013 0f04 	tst.w	r3, #4
    decc:	bf0c      	ite	eq
    dece:	2005      	moveq	r0, #5
    ded0:	2012      	movne	r0, #18
    ded2:	3c01      	subs	r4, #1
    ded4:	47c0      	blx	r8
    ded6:	6828      	ldr	r0, [r5, #0]
    ded8:	4030      	ands	r0, r6
    deda:	42b8      	cmp	r0, r7
    dedc:	d1f1      	bne.n	dec2 <am_hal_flash_delay_status_check+0x42>
    dede:	e7ed      	b.n	debc <am_hal_flash_delay_status_check+0x3c>
    dee0:	2004      	movs	r0, #4
    dee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dee6:	bf00      	nop
    dee8:	0800009d 	.word	0x0800009d

0000deec <am_hal_flash_load_ui32>:
    deec:	4b00      	ldr	r3, [pc, #0]	; (def0 <am_hal_flash_load_ui32+0x4>)
    deee:	4718      	bx	r3
    def0:	08000075 	.word	0x08000075

0000def4 <am_hal_flash_store_ui32>:
    def4:	4b01      	ldr	r3, [pc, #4]	; (defc <am_hal_flash_store_ui32+0x8>)
    def6:	f043 0301 	orr.w	r3, r3, #1
    defa:	4718      	bx	r3
    defc:	100010c0 	.word	0x100010c0

0000df00 <am_hal_gpio_pinconfig>:
    df00:	2831      	cmp	r0, #49	; 0x31
    df02:	f200 80c3 	bhi.w	e08c <am_hal_gpio_pinconfig+0x18c>
    df06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    df0a:	4604      	mov	r4, r0
    df0c:	f011 07e0 	ands.w	r7, r1, #224	; 0xe0
    df10:	f001 0007 	and.w	r0, r1, #7
    df14:	b085      	sub	sp, #20
    df16:	f3c1 03c1 	ubfx	r3, r1, #3, #2
    df1a:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    df1e:	d00f      	beq.n	df40 <am_hal_gpio_pinconfig+0x40>
    df20:	f3c1 1642 	ubfx	r6, r1, #5, #3
    df24:	1db5      	adds	r5, r6, #6
    df26:	f005 0507 	and.w	r5, r5, #7
    df2a:	2d03      	cmp	r5, #3
    df2c:	f042 0201 	orr.w	r2, r2, #1
    df30:	f240 80ae 	bls.w	e090 <am_hal_gpio_pinconfig+0x190>
    df34:	2fc0      	cmp	r7, #192	; 0xc0
    df36:	f000 80e1 	beq.w	e0fc <am_hal_gpio_pinconfig+0x1fc>
    df3a:	2f20      	cmp	r7, #32
    df3c:	f000 80e3 	beq.w	e106 <am_hal_gpio_pinconfig+0x206>
    df40:	b163      	cbz	r3, df5c <am_hal_gpio_pinconfig+0x5c>
    df42:	2b01      	cmp	r3, #1
    df44:	f000 80d3 	beq.w	e0ee <am_hal_gpio_pinconfig+0x1ee>
    df48:	2b02      	cmp	r3, #2
    df4a:	f040 80c9 	bne.w	e0e0 <am_hal_gpio_pinconfig+0x1e0>
    df4e:	4b79      	ldr	r3, [pc, #484]	; (e134 <am_hal_gpio_pinconfig+0x234>)
    df50:	5d1b      	ldrb	r3, [r3, r4]
    df52:	075b      	lsls	r3, r3, #29
    df54:	f140 80c4 	bpl.w	e0e0 <am_hal_gpio_pinconfig+0x1e0>
    df58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    df5c:	4b76      	ldr	r3, [pc, #472]	; (e138 <am_hal_gpio_pinconfig+0x238>)
    df5e:	5d1b      	ldrb	r3, [r3, r4]
    df60:	4103      	asrs	r3, r0
    df62:	005b      	lsls	r3, r3, #1
    df64:	f003 0302 	and.w	r3, r3, #2
    df68:	4313      	orrs	r3, r2
    df6a:	4a74      	ldr	r2, [pc, #464]	; (e13c <am_hal_gpio_pinconfig+0x23c>)
    df6c:	5d12      	ldrb	r2, [r2, r4]
    df6e:	4282      	cmp	r2, r0
    df70:	f000 8099 	beq.w	e0a6 <am_hal_gpio_pinconfig+0x1a6>
    df74:	f3c1 3000 	ubfx	r0, r1, #12, #1
    df78:	f3c1 2581 	ubfx	r5, r1, #10, #2
    df7c:	f3c1 3280 	ubfx	r2, r1, #14, #1
    df80:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    df84:	0a88      	lsrs	r0, r1, #10
    df86:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    df8a:	f000 0008 	and.w	r0, r0, #8
    df8e:	4302      	orrs	r2, r0
    df90:	f3c1 2007 	ubfx	r0, r1, #8, #8
    df94:	f000 050c 	and.w	r5, r0, #12
    df98:	2d04      	cmp	r5, #4
    df9a:	f000 80a5 	beq.w	e0e8 <am_hal_gpio_pinconfig+0x1e8>
    df9e:	4d68      	ldr	r5, [pc, #416]	; (e140 <am_hal_gpio_pinconfig+0x240>)
    dfa0:	682d      	ldr	r5, [r5, #0]
    dfa2:	eba1 0805 	sub.w	r8, r1, r5
    dfa6:	fab8 f888 	clz	r8, r8
    dfaa:	ea4f 1858 	mov.w	r8, r8, lsr #5
    dfae:	f010 0f60 	tst.w	r0, #96	; 0x60
    dfb2:	bf04      	itt	eq
    dfb4:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
    dfb8:	f360 0200 	bfieq	r2, r0, #0, #1
    dfbc:	00a0      	lsls	r0, r4, #2
    dfbe:	f3c1 2101 	ubfx	r1, r1, #8, #2
    dfc2:	2902      	cmp	r1, #2
    dfc4:	d05c      	beq.n	e080 <am_hal_gpio_pinconfig+0x180>
    dfc6:	2903      	cmp	r1, #3
    dfc8:	d058      	beq.n	e07c <am_hal_gpio_pinconfig+0x17c>
    dfca:	2901      	cmp	r1, #1
    dfcc:	ea4f 01c4 	mov.w	r1, r4, lsl #3
    dfd0:	bf08      	it	eq
    dfd2:	f043 0304 	orreq.w	r3, r3, #4
    dfd6:	f001 0118 	and.w	r1, r1, #24
    dfda:	2700      	movs	r7, #0
    dfdc:	f000 001c 	and.w	r0, r0, #28
    dfe0:	fa02 f600 	lsl.w	r6, r2, r0
    dfe4:	220f      	movs	r2, #15
    dfe6:	4082      	lsls	r2, r0
    dfe8:	43d2      	mvns	r2, r2
    dfea:	f04f 09ff 	mov.w	r9, #255	; 0xff
    dfee:	fa03 f501 	lsl.w	r5, r3, r1
    dff2:	fa09 f901 	lsl.w	r9, r9, r1
    dff6:	9201      	str	r2, [sp, #4]
    dff8:	f000 f900 	bl	e1fc <am_hal_interrupt_master_disable>
    dffc:	f024 0a03 	bic.w	sl, r4, #3
    e000:	ea4f 0b54 	mov.w	fp, r4, lsr #1
    e004:	f10a 4c80 	add.w	ip, sl, #1073741824	; 0x40000000
    e008:	4b4e      	ldr	r3, [pc, #312]	; (e144 <am_hal_gpio_pinconfig+0x244>)
    e00a:	494f      	ldr	r1, [pc, #316]	; (e148 <am_hal_gpio_pinconfig+0x248>)
    e00c:	9a01      	ldr	r2, [sp, #4]
    e00e:	9003      	str	r0, [sp, #12]
    e010:	ea6f 0909 	mvn.w	r9, r9
    e014:	f02b 0b03 	bic.w	fp, fp, #3
    e018:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
    e01c:	f1b8 0f00 	cmp.w	r8, #0
    e020:	d00b      	beq.n	e03a <am_hal_gpio_pinconfig+0x13a>
    e022:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
    e026:	f004 081f 	and.w	r8, r4, #31
    e02a:	4848      	ldr	r0, [pc, #288]	; (e14c <am_hal_gpio_pinconfig+0x24c>)
    e02c:	f00e 0e04 	and.w	lr, lr, #4
    e030:	2401      	movs	r4, #1
    e032:	fa04 f408 	lsl.w	r4, r4, r8
    e036:	f84e 4000 	str.w	r4, [lr, r0]
    e03a:	4845      	ldr	r0, [pc, #276]	; (e150 <am_hal_gpio_pinconfig+0x250>)
    e03c:	2473      	movs	r4, #115	; 0x73
    e03e:	6604      	str	r4, [r0, #96]	; 0x60
    e040:	f8dc 4000 	ldr.w	r4, [ip]
    e044:	ea04 0409 	and.w	r4, r4, r9
    e048:	4325      	orrs	r5, r4
    e04a:	f8cc 5000 	str.w	r5, [ip]
    e04e:	f85b 4003 	ldr.w	r4, [fp, r3]
    e052:	4022      	ands	r2, r4
    e054:	4332      	orrs	r2, r6
    e056:	f84b 2003 	str.w	r2, [fp, r3]
    e05a:	f85a 3001 	ldr.w	r3, [sl, r1]
    e05e:	ea03 0909 	and.w	r9, r3, r9
    e062:	2400      	movs	r4, #0
    e064:	ea49 0707 	orr.w	r7, r9, r7
    e068:	f84a 7001 	str.w	r7, [sl, r1]
    e06c:	6604      	str	r4, [r0, #96]	; 0x60
    e06e:	9803      	ldr	r0, [sp, #12]
    e070:	f000 f8c8 	bl	e204 <am_hal_interrupt_master_set>
    e074:	4620      	mov	r0, r4
    e076:	b005      	add	sp, #20
    e078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e07c:	f043 0304 	orr.w	r3, r3, #4
    e080:	00e1      	lsls	r1, r4, #3
    e082:	f001 0118 	and.w	r1, r1, #24
    e086:	2701      	movs	r7, #1
    e088:	408f      	lsls	r7, r1
    e08a:	e7a7      	b.n	dfdc <am_hal_gpio_pinconfig+0xdc>
    e08c:	2006      	movs	r0, #6
    e08e:	4770      	bx	lr
    e090:	4d28      	ldr	r5, [pc, #160]	; (e134 <am_hal_gpio_pinconfig+0x234>)
    e092:	5d2d      	ldrb	r5, [r5, r4]
    e094:	3e02      	subs	r6, #2
    e096:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    e09a:	07ee      	lsls	r6, r5, #31
    e09c:	d536      	bpl.n	e10c <am_hal_gpio_pinconfig+0x20c>
    e09e:	2b00      	cmp	r3, #0
    e0a0:	f43f af5c 	beq.w	df5c <am_hal_gpio_pinconfig+0x5c>
    e0a4:	e74d      	b.n	df42 <am_hal_gpio_pinconfig+0x42>
    e0a6:	f3c1 4202 	ubfx	r2, r1, #16, #3
    e0aa:	2a07      	cmp	r2, #7
    e0ac:	d030      	beq.n	e110 <am_hal_gpio_pinconfig+0x210>
    e0ae:	4d29      	ldr	r5, [pc, #164]	; (e154 <am_hal_gpio_pinconfig+0x254>)
    e0b0:	f3c1 40c1 	ubfx	r0, r1, #19, #2
    e0b4:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    e0b8:	f815 0024 	ldrb.w	r0, [r5, r4, lsl #2]
    e0bc:	4290      	cmp	r0, r2
    e0be:	d029      	beq.n	e114 <am_hal_gpio_pinconfig+0x214>
    e0c0:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    e0c4:	00a0      	lsls	r0, r4, #2
    e0c6:	786e      	ldrb	r6, [r5, #1]
    e0c8:	4296      	cmp	r6, r2
    e0ca:	d02d      	beq.n	e128 <am_hal_gpio_pinconfig+0x228>
    e0cc:	78ae      	ldrb	r6, [r5, #2]
    e0ce:	4296      	cmp	r6, r2
    e0d0:	d02c      	beq.n	e12c <am_hal_gpio_pinconfig+0x22c>
    e0d2:	78ed      	ldrb	r5, [r5, #3]
    e0d4:	4295      	cmp	r5, r2
    e0d6:	d02b      	beq.n	e130 <am_hal_gpio_pinconfig+0x230>
    e0d8:	481f      	ldr	r0, [pc, #124]	; (e158 <am_hal_gpio_pinconfig+0x258>)
    e0da:	b005      	add	sp, #20
    e0dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e0e0:	481e      	ldr	r0, [pc, #120]	; (e15c <am_hal_gpio_pinconfig+0x25c>)
    e0e2:	b005      	add	sp, #20
    e0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e0e8:	f04f 0801 	mov.w	r8, #1
    e0ec:	e75f      	b.n	dfae <am_hal_gpio_pinconfig+0xae>
    e0ee:	4b11      	ldr	r3, [pc, #68]	; (e134 <am_hal_gpio_pinconfig+0x234>)
    e0f0:	5d1b      	ldrb	r3, [r3, r4]
    e0f2:	079d      	lsls	r5, r3, #30
    e0f4:	d5f4      	bpl.n	e0e0 <am_hal_gpio_pinconfig+0x1e0>
    e0f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    e0fa:	e72f      	b.n	df5c <am_hal_gpio_pinconfig+0x5c>
    e0fc:	2c14      	cmp	r4, #20
    e0fe:	f43f af1f 	beq.w	df40 <am_hal_gpio_pinconfig+0x40>
    e102:	4817      	ldr	r0, [pc, #92]	; (e160 <am_hal_gpio_pinconfig+0x260>)
    e104:	e7b7      	b.n	e076 <am_hal_gpio_pinconfig+0x176>
    e106:	2c14      	cmp	r4, #20
    e108:	f47f af1a 	bne.w	df40 <am_hal_gpio_pinconfig+0x40>
    e10c:	4815      	ldr	r0, [pc, #84]	; (e164 <am_hal_gpio_pinconfig+0x264>)
    e10e:	e7b2      	b.n	e076 <am_hal_gpio_pinconfig+0x176>
    e110:	4815      	ldr	r0, [pc, #84]	; (e168 <am_hal_gpio_pinconfig+0x268>)
    e112:	e7b0      	b.n	e076 <am_hal_gpio_pinconfig+0x176>
    e114:	2200      	movs	r2, #0
    e116:	00a0      	lsls	r0, r4, #2
    e118:	0052      	lsls	r2, r2, #1
    e11a:	f3c1 5540 	ubfx	r5, r1, #21, #1
    e11e:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
    e122:	f04f 0800 	mov.w	r8, #0
    e126:	e74a      	b.n	dfbe <am_hal_gpio_pinconfig+0xbe>
    e128:	2201      	movs	r2, #1
    e12a:	e7f5      	b.n	e118 <am_hal_gpio_pinconfig+0x218>
    e12c:	2202      	movs	r2, #2
    e12e:	e7f3      	b.n	e118 <am_hal_gpio_pinconfig+0x218>
    e130:	2203      	movs	r2, #3
    e132:	e7f1      	b.n	e118 <am_hal_gpio_pinconfig+0x218>
    e134:	0000f5d0 	.word	0x0000f5d0
    e138:	0000f604 	.word	0x0000f604
    e13c:	0000f700 	.word	0x0000f700
    e140:	0000f5c8 	.word	0x0000f5c8
    e144:	40010040 	.word	0x40010040
    e148:	400100e0 	.word	0x400100e0
    e14c:	400100b4 	.word	0x400100b4
    e150:	40010000 	.word	0x40010000
    e154:	0000f638 	.word	0x0000f638
    e158:	08000104 	.word	0x08000104
    e15c:	08000102 	.word	0x08000102
    e160:	08000101 	.word	0x08000101
    e164:	08000100 	.word	0x08000100
    e168:	08000103 	.word	0x08000103

0000e16c <am_hal_gpio_state_write>:
    e16c:	2831      	cmp	r0, #49	; 0x31
    e16e:	d81a      	bhi.n	e1a6 <am_hal_gpio_state_write+0x3a>
    e170:	b570      	push	{r4, r5, r6, lr}
    e172:	2905      	cmp	r1, #5
    e174:	b082      	sub	sp, #8
    e176:	460d      	mov	r5, r1
    e178:	d812      	bhi.n	e1a0 <am_hal_gpio_state_write+0x34>
    e17a:	f000 031f 	and.w	r3, r0, #31
    e17e:	2201      	movs	r2, #1
    e180:	08c0      	lsrs	r0, r0, #3
    e182:	fa02 f603 	lsl.w	r6, r2, r3
    e186:	f000 0404 	and.w	r4, r0, #4
    e18a:	f000 f837 	bl	e1fc <am_hal_interrupt_master_disable>
    e18e:	3d01      	subs	r5, #1
    e190:	9001      	str	r0, [sp, #4]
    e192:	2d04      	cmp	r5, #4
    e194:	d821      	bhi.n	e1da <am_hal_gpio_state_write+0x6e>
    e196:	e8df f005 	tbb	[pc, r5]
    e19a:	1512      	.short	0x1512
    e19c:	1d1a      	.short	0x1d1a
    e19e:	08          	.byte	0x08
    e19f:	00          	.byte	0x00
    e1a0:	2006      	movs	r0, #6
    e1a2:	b002      	add	sp, #8
    e1a4:	bd70      	pop	{r4, r5, r6, pc}
    e1a6:	2005      	movs	r0, #5
    e1a8:	4770      	bx	lr
    e1aa:	4a0d      	ldr	r2, [pc, #52]	; (e1e0 <am_hal_gpio_state_write+0x74>)
    e1ac:	58a3      	ldr	r3, [r4, r2]
    e1ae:	4073      	eors	r3, r6
    e1b0:	50a3      	str	r3, [r4, r2]
    e1b2:	9801      	ldr	r0, [sp, #4]
    e1b4:	f000 f826 	bl	e204 <am_hal_interrupt_master_set>
    e1b8:	2000      	movs	r0, #0
    e1ba:	b002      	add	sp, #8
    e1bc:	bd70      	pop	{r4, r5, r6, pc}
    e1be:	4b09      	ldr	r3, [pc, #36]	; (e1e4 <am_hal_gpio_state_write+0x78>)
    e1c0:	50e6      	str	r6, [r4, r3]
    e1c2:	e7f6      	b.n	e1b2 <am_hal_gpio_state_write+0x46>
    e1c4:	4a08      	ldr	r2, [pc, #32]	; (e1e8 <am_hal_gpio_state_write+0x7c>)
    e1c6:	58a3      	ldr	r3, [r4, r2]
    e1c8:	4073      	eors	r3, r6
    e1ca:	50a3      	str	r3, [r4, r2]
    e1cc:	e7f1      	b.n	e1b2 <am_hal_gpio_state_write+0x46>
    e1ce:	4b04      	ldr	r3, [pc, #16]	; (e1e0 <am_hal_gpio_state_write+0x74>)
    e1d0:	50e6      	str	r6, [r4, r3]
    e1d2:	e7ee      	b.n	e1b2 <am_hal_gpio_state_write+0x46>
    e1d4:	4b05      	ldr	r3, [pc, #20]	; (e1ec <am_hal_gpio_state_write+0x80>)
    e1d6:	50e6      	str	r6, [r4, r3]
    e1d8:	e7eb      	b.n	e1b2 <am_hal_gpio_state_write+0x46>
    e1da:	4b05      	ldr	r3, [pc, #20]	; (e1f0 <am_hal_gpio_state_write+0x84>)
    e1dc:	50e6      	str	r6, [r4, r3]
    e1de:	e7e8      	b.n	e1b2 <am_hal_gpio_state_write+0x46>
    e1e0:	400100b4 	.word	0x400100b4
    e1e4:	40010090 	.word	0x40010090
    e1e8:	40010088 	.word	0x40010088
    e1ec:	400100a8 	.word	0x400100a8
    e1f0:	40010098 	.word	0x40010098

0000e1f4 <am_hal_interrupt_master_enable>:
    e1f4:	f3ef 8010 	mrs	r0, PRIMASK
    e1f8:	b662      	cpsie	i
    e1fa:	4770      	bx	lr

0000e1fc <am_hal_interrupt_master_disable>:
    e1fc:	f3ef 8010 	mrs	r0, PRIMASK
    e200:	b672      	cpsid	i
    e202:	4770      	bx	lr

0000e204 <am_hal_interrupt_master_set>:
    e204:	f380 8810 	msr	PRIMASK, r0
    e208:	4770      	bx	lr
    e20a:	bf00      	nop

0000e20c <am_hal_itm_enable>:
    e20c:	4a0e      	ldr	r2, [pc, #56]	; (e248 <am_hal_itm_enable+0x3c>)
    e20e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e212:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    e216:	b410      	push	{r4}
    e218:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    e21c:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e220:	01db      	lsls	r3, r3, #7
    e222:	d5fb      	bpl.n	e21c <am_hal_itm_enable+0x10>
    e224:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    e228:	4c08      	ldr	r4, [pc, #32]	; (e24c <am_hal_itm_enable+0x40>)
    e22a:	4a09      	ldr	r2, [pc, #36]	; (e250 <am_hal_itm_enable+0x44>)
    e22c:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    e230:	200f      	movs	r0, #15
    e232:	f04f 31ff 	mov.w	r1, #4294967295
    e236:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    e23a:	f85d 4b04 	ldr.w	r4, [sp], #4
    e23e:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    e242:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    e246:	4770      	bx	lr
    e248:	e000ed00 	.word	0xe000ed00
    e24c:	c5acce55 	.word	0xc5acce55
    e250:	00150511 	.word	0x00150511

0000e254 <am_hal_itm_disable>:
    e254:	4b27      	ldr	r3, [pc, #156]	; (e2f4 <am_hal_itm_disable+0xa0>)
    e256:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    e25a:	b510      	push	{r4, lr}
    e25c:	b9cb      	cbnz	r3, e292 <am_hal_itm_disable+0x3e>
    e25e:	4a26      	ldr	r2, [pc, #152]	; (e2f8 <am_hal_itm_disable+0xa4>)
    e260:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e264:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    e268:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    e26c:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e270:	01d9      	lsls	r1, r3, #7
    e272:	d5fb      	bpl.n	e26c <am_hal_itm_disable+0x18>
    e274:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    e278:	4c20      	ldr	r4, [pc, #128]	; (e2fc <am_hal_itm_disable+0xa8>)
    e27a:	4a21      	ldr	r2, [pc, #132]	; (e300 <am_hal_itm_disable+0xac>)
    e27c:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    e280:	200f      	movs	r0, #15
    e282:	f04f 31ff 	mov.w	r1, #4294967295
    e286:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    e28a:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    e28e:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    e292:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    e296:	f8d4 3e80 	ldr.w	r3, [r4, #3712]	; 0xe80
    e29a:	021b      	lsls	r3, r3, #8
    e29c:	d4fb      	bmi.n	e296 <am_hal_itm_disable+0x42>
    e29e:	f44f 7048 	mov.w	r0, #800	; 0x320
    e2a2:	f7ff fddd 	bl	de60 <am_hal_flash_delay>
    e2a6:	4b15      	ldr	r3, [pc, #84]	; (e2fc <am_hal_itm_disable+0xa8>)
    e2a8:	4916      	ldr	r1, [pc, #88]	; (e304 <am_hal_itm_disable+0xb0>)
    e2aa:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
    e2ae:	2064      	movs	r0, #100	; 0x64
    e2b0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    e2b4:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    e2b8:	f023 0301 	bic.w	r3, r3, #1
    e2bc:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
    e2c0:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    e2c4:	420b      	tst	r3, r1
    e2c6:	d1fb      	bne.n	e2c0 <am_hal_itm_disable+0x6c>
    e2c8:	3801      	subs	r0, #1
    e2ca:	d1f3      	bne.n	e2b4 <am_hal_itm_disable+0x60>
    e2cc:	4a0a      	ldr	r2, [pc, #40]	; (e2f8 <am_hal_itm_disable+0xa4>)
    e2ce:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e2d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    e2d6:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    e2da:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e2de:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    e2e2:	d1fa      	bne.n	e2da <am_hal_itm_disable+0x86>
    e2e4:	4a03      	ldr	r2, [pc, #12]	; (e2f4 <am_hal_itm_disable+0xa0>)
    e2e6:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    e2ea:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
    e2ee:	2b00      	cmp	r3, #0
    e2f0:	d1fb      	bne.n	e2ea <am_hal_itm_disable+0x96>
    e2f2:	bd10      	pop	{r4, pc}
    e2f4:	40020000 	.word	0x40020000
    e2f8:	e000ed00 	.word	0xe000ed00
    e2fc:	c5acce55 	.word	0xc5acce55
    e300:	00150511 	.word	0x00150511
    e304:	00800001 	.word	0x00800001

0000e308 <am_hal_itm_print>:
    e308:	7803      	ldrb	r3, [r0, #0]
    e30a:	b1a3      	cbz	r3, e336 <am_hal_itm_print+0x2e>
    e30c:	4603      	mov	r3, r0
    e30e:	f1c0 0c01 	rsb	ip, r0, #1
    e312:	eb0c 0103 	add.w	r1, ip, r3
    e316:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    e31a:	2a00      	cmp	r2, #0
    e31c:	d1f9      	bne.n	e312 <am_hal_itm_print+0xa>
    e31e:	4401      	add	r1, r0
    e320:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    e324:	f810 cb01 	ldrb.w	ip, [r0], #1
    e328:	6813      	ldr	r3, [r2, #0]
    e32a:	2b00      	cmp	r3, #0
    e32c:	d0fc      	beq.n	e328 <am_hal_itm_print+0x20>
    e32e:	4288      	cmp	r0, r1
    e330:	f882 c000 	strb.w	ip, [r2]
    e334:	d1f6      	bne.n	e324 <am_hal_itm_print+0x1c>
    e336:	4770      	bx	lr

0000e338 <am_hal_mcuctrl_info_get>:
    e338:	2900      	cmp	r1, #0
    e33a:	f000 808f 	beq.w	e45c <am_hal_mcuctrl_info_get+0x124>
    e33e:	2801      	cmp	r0, #1
    e340:	b430      	push	{r4, r5}
    e342:	d006      	beq.n	e352 <am_hal_mcuctrl_info_get+0x1a>
    e344:	2802      	cmp	r0, #2
    e346:	d06d      	beq.n	e424 <am_hal_mcuctrl_info_get+0xec>
    e348:	2800      	cmp	r0, #0
    e34a:	d055      	beq.n	e3f8 <am_hal_mcuctrl_info_get+0xc0>
    e34c:	2006      	movs	r0, #6
    e34e:	bc30      	pop	{r4, r5}
    e350:	4770      	bx	lr
    e352:	4a43      	ldr	r2, [pc, #268]	; (e460 <am_hal_mcuctrl_info_get+0x128>)
    e354:	4843      	ldr	r0, [pc, #268]	; (e464 <am_hal_mcuctrl_info_get+0x12c>)
    e356:	6813      	ldr	r3, [r2, #0]
    e358:	600b      	str	r3, [r1, #0]
    e35a:	6854      	ldr	r4, [r2, #4]
    e35c:	604c      	str	r4, [r1, #4]
    e35e:	6894      	ldr	r4, [r2, #8]
    e360:	608c      	str	r4, [r1, #8]
    e362:	68d4      	ldr	r4, [r2, #12]
    e364:	60cc      	str	r4, [r1, #12]
    e366:	f3c3 5503 	ubfx	r5, r3, #20, #4
    e36a:	6914      	ldr	r4, [r2, #16]
    e36c:	610c      	str	r4, [r1, #16]
    e36e:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    e372:	4c3d      	ldr	r4, [pc, #244]	; (e468 <am_hal_mcuctrl_info_get+0x130>)
    e374:	6950      	ldr	r0, [r2, #20]
    e376:	6148      	str	r0, [r1, #20]
    e378:	f003 0201 	and.w	r2, r3, #1
    e37c:	f3c3 4303 	ubfx	r3, r3, #16, #4
    e380:	e9c1 2506 	strd	r2, r5, [r1, #24]
    e384:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    e388:	4a38      	ldr	r2, [pc, #224]	; (e46c <am_hal_mcuctrl_info_get+0x134>)
    e38a:	620b      	str	r3, [r1, #32]
    e38c:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    e390:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    e394:	b2db      	uxtb	r3, r3
    e396:	f000 000f 	and.w	r0, r0, #15
    e39a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    e39e:	624b      	str	r3, [r1, #36]	; 0x24
    e3a0:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    e3a4:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
    e3a8:	f3c3 1303 	ubfx	r3, r3, #4, #4
    e3ac:	f000 000f 	and.w	r0, r0, #15
    e3b0:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
    e3b4:	628b      	str	r3, [r1, #40]	; 0x28
    e3b6:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    e3ba:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
    e3be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    e3c2:	f3c0 1003 	ubfx	r0, r0, #4, #4
    e3c6:	4303      	orrs	r3, r0
    e3c8:	62cb      	str	r3, [r1, #44]	; 0x2c
    e3ca:	f8d2 40fc 	ldr.w	r4, [r2, #252]	; 0xfc
    e3ce:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    e3d2:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    e3d6:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    e3da:	b2db      	uxtb	r3, r3
    e3dc:	041b      	lsls	r3, r3, #16
    e3de:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    e3e2:	fa5f fc82 	uxtb.w	ip, r2
    e3e6:	ea43 030c 	orr.w	r3, r3, ip
    e3ea:	b2c2      	uxtb	r2, r0
    e3ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e3f0:	630b      	str	r3, [r1, #48]	; 0x30
    e3f2:	2000      	movs	r0, #0
    e3f4:	bc30      	pop	{r4, r5}
    e3f6:	4770      	bx	lr
    e3f8:	4a19      	ldr	r2, [pc, #100]	; (e460 <am_hal_mcuctrl_info_get+0x128>)
    e3fa:	6993      	ldr	r3, [r2, #24]
    e3fc:	f3c3 1480 	ubfx	r4, r3, #6, #1
    e400:	700c      	strb	r4, [r1, #0]
    e402:	f8d2 41a0 	ldr.w	r4, [r2, #416]	; 0x1a0
    e406:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e40a:	704b      	strb	r3, [r1, #1]
    e40c:	f3c4 6381 	ubfx	r3, r4, #26, #2
    e410:	710b      	strb	r3, [r1, #4]
    e412:	6953      	ldr	r3, [r2, #20]
    e414:	f3c3 0240 	ubfx	r2, r3, #1, #1
    e418:	f003 0301 	and.w	r3, r3, #1
    e41c:	bc30      	pop	{r4, r5}
    e41e:	708a      	strb	r2, [r1, #2]
    e420:	70cb      	strb	r3, [r1, #3]
    e422:	4770      	bx	lr
    e424:	4a0e      	ldr	r2, [pc, #56]	; (e460 <am_hal_mcuctrl_info_get+0x128>)
    e426:	6848      	ldr	r0, [r1, #4]
    e428:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    e42c:	f003 0401 	and.w	r4, r3, #1
    e430:	700c      	strb	r4, [r1, #0]
    e432:	f3c3 0440 	ubfx	r4, r3, #1, #1
    e436:	720c      	strb	r4, [r1, #8]
    e438:	f8d2 41c4 	ldr.w	r4, [r2, #452]	; 0x1c4
    e43c:	60cc      	str	r4, [r1, #12]
    e43e:	f8d2 41c0 	ldr.w	r4, [r2, #448]	; 0x1c0
    e442:	4320      	orrs	r0, r4
    e444:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e448:	6048      	str	r0, [r1, #4]
    e44a:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    e44e:	740b      	strb	r3, [r1, #16]
    e450:	694b      	ldr	r3, [r1, #20]
    e452:	4313      	orrs	r3, r2
    e454:	2000      	movs	r0, #0
    e456:	bc30      	pop	{r4, r5}
    e458:	614b      	str	r3, [r1, #20]
    e45a:	4770      	bx	lr
    e45c:	2006      	movs	r0, #6
    e45e:	4770      	bx	lr
    e460:	40020000 	.word	0x40020000
    e464:	0000f734 	.word	0x0000f734
    e468:	0000f774 	.word	0x0000f774
    e46c:	f0000f00 	.word	0xf0000f00

0000e470 <am_hal_pwrctrl_periph_enable>:
    e470:	b570      	push	{r4, r5, r6, lr}
    e472:	b082      	sub	sp, #8
    e474:	4604      	mov	r4, r0
    e476:	f7ff fec1 	bl	e1fc <am_hal_interrupt_master_disable>
    e47a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e47e:	4e0f      	ldr	r6, [pc, #60]	; (e4bc <am_hal_pwrctrl_periph_enable+0x4c>)
    e480:	4d0f      	ldr	r5, [pc, #60]	; (e4c0 <am_hal_pwrctrl_periph_enable+0x50>)
    e482:	9001      	str	r0, [sp, #4]
    e484:	00a4      	lsls	r4, r4, #2
    e486:	68b3      	ldr	r3, [r6, #8]
    e488:	592a      	ldr	r2, [r5, r4]
    e48a:	4313      	orrs	r3, r2
    e48c:	60b3      	str	r3, [r6, #8]
    e48e:	9801      	ldr	r0, [sp, #4]
    e490:	442c      	add	r4, r5
    e492:	f7ff feb7 	bl	e204 <am_hal_interrupt_master_set>
    e496:	20a0      	movs	r0, #160	; 0xa0
    e498:	f7ff fce2 	bl	de60 <am_hal_flash_delay>
    e49c:	69b3      	ldr	r3, [r6, #24]
    e49e:	6864      	ldr	r4, [r4, #4]
    e4a0:	4223      	tst	r3, r4
    e4a2:	d103      	bne.n	e4ac <am_hal_pwrctrl_periph_enable+0x3c>
    e4a4:	20a0      	movs	r0, #160	; 0xa0
    e4a6:	f7ff fcdb 	bl	de60 <am_hal_flash_delay>
    e4aa:	69b3      	ldr	r3, [r6, #24]
    e4ac:	4b03      	ldr	r3, [pc, #12]	; (e4bc <am_hal_pwrctrl_periph_enable+0x4c>)
    e4ae:	699b      	ldr	r3, [r3, #24]
    e4b0:	4223      	tst	r3, r4
    e4b2:	bf0c      	ite	eq
    e4b4:	2001      	moveq	r0, #1
    e4b6:	2000      	movne	r0, #0
    e4b8:	b002      	add	sp, #8
    e4ba:	bd70      	pop	{r4, r5, r6, pc}
    e4bc:	40021000 	.word	0x40021000
    e4c0:	0000f7b4 	.word	0x0000f7b4

0000e4c4 <am_hal_pwrctrl_periph_disable>:
    e4c4:	b570      	push	{r4, r5, r6, lr}
    e4c6:	b082      	sub	sp, #8
    e4c8:	4604      	mov	r4, r0
    e4ca:	f7ff fe97 	bl	e1fc <am_hal_interrupt_master_disable>
    e4ce:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e4d2:	4e10      	ldr	r6, [pc, #64]	; (e514 <am_hal_pwrctrl_periph_disable+0x50>)
    e4d4:	4d10      	ldr	r5, [pc, #64]	; (e518 <am_hal_pwrctrl_periph_disable+0x54>)
    e4d6:	9001      	str	r0, [sp, #4]
    e4d8:	00a4      	lsls	r4, r4, #2
    e4da:	68b3      	ldr	r3, [r6, #8]
    e4dc:	592a      	ldr	r2, [r5, r4]
    e4de:	ea23 0302 	bic.w	r3, r3, r2
    e4e2:	60b3      	str	r3, [r6, #8]
    e4e4:	9801      	ldr	r0, [sp, #4]
    e4e6:	442c      	add	r4, r5
    e4e8:	f7ff fe8c 	bl	e204 <am_hal_interrupt_master_set>
    e4ec:	20a0      	movs	r0, #160	; 0xa0
    e4ee:	f7ff fcb7 	bl	de60 <am_hal_flash_delay>
    e4f2:	69b3      	ldr	r3, [r6, #24]
    e4f4:	6864      	ldr	r4, [r4, #4]
    e4f6:	4223      	tst	r3, r4
    e4f8:	d003      	beq.n	e502 <am_hal_pwrctrl_periph_disable+0x3e>
    e4fa:	20a0      	movs	r0, #160	; 0xa0
    e4fc:	f7ff fcb0 	bl	de60 <am_hal_flash_delay>
    e500:	69b3      	ldr	r3, [r6, #24]
    e502:	4b04      	ldr	r3, [pc, #16]	; (e514 <am_hal_pwrctrl_periph_disable+0x50>)
    e504:	699b      	ldr	r3, [r3, #24]
    e506:	4223      	tst	r3, r4
    e508:	bf14      	ite	ne
    e50a:	2001      	movne	r0, #1
    e50c:	2000      	moveq	r0, #0
    e50e:	b002      	add	sp, #8
    e510:	bd70      	pop	{r4, r5, r6, pc}
    e512:	bf00      	nop
    e514:	40021000 	.word	0x40021000
    e518:	0000f7b4 	.word	0x0000f7b4

0000e51c <am_hal_pwrctrl_low_power_init>:
    e51c:	b530      	push	{r4, r5, lr}
    e51e:	4b69      	ldr	r3, [pc, #420]	; (e6c4 <am_hal_pwrctrl_low_power_init+0x1a8>)
    e520:	681a      	ldr	r2, [r3, #0]
    e522:	b085      	sub	sp, #20
    e524:	b912      	cbnz	r2, e52c <am_hal_pwrctrl_low_power_init+0x10>
    e526:	4a68      	ldr	r2, [pc, #416]	; (e6c8 <am_hal_pwrctrl_low_power_init+0x1ac>)
    e528:	6812      	ldr	r2, [r2, #0]
    e52a:	601a      	str	r2, [r3, #0]
    e52c:	4b67      	ldr	r3, [pc, #412]	; (e6cc <am_hal_pwrctrl_low_power_init+0x1b0>)
    e52e:	68db      	ldr	r3, [r3, #12]
    e530:	b2db      	uxtb	r3, r3
    e532:	2b12      	cmp	r3, #18
    e534:	d104      	bne.n	e540 <am_hal_pwrctrl_low_power_init+0x24>
    e536:	4c66      	ldr	r4, [pc, #408]	; (e6d0 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e538:	6863      	ldr	r3, [r4, #4]
    e53a:	07d8      	lsls	r0, r3, #31
    e53c:	f100 8088 	bmi.w	e650 <am_hal_pwrctrl_low_power_init+0x134>
    e540:	4b62      	ldr	r3, [pc, #392]	; (e6cc <am_hal_pwrctrl_low_power_init+0x1b0>)
    e542:	68da      	ldr	r2, [r3, #12]
    e544:	b2d2      	uxtb	r2, r2
    e546:	2a20      	cmp	r2, #32
    e548:	d934      	bls.n	e5b4 <am_hal_pwrctrl_low_power_init+0x98>
    e54a:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
    e54e:	2002      	movs	r0, #2
    e550:	f360 4213 	bfi	r2, r0, #16, #4
    e554:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    e558:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
    e55c:	2203      	movs	r2, #3
    e55e:	f362 5117 	bfi	r1, r2, #20, #4
    e562:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
    e566:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e56a:	2405      	movs	r4, #5
    e56c:	f364 0103 	bfi	r1, r4, #0, #4
    e570:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e574:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e578:	f360 1107 	bfi	r1, r0, #4, #4
    e57c:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e580:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e584:	2406      	movs	r4, #6
    e586:	f364 210b 	bfi	r1, r4, #8, #4
    e58a:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e58e:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e592:	2001      	movs	r0, #1
    e594:	f360 310f 	bfi	r1, r0, #12, #4
    e598:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e59c:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e5a0:	f362 61de 	bfi	r1, r2, #27, #4
    e5a4:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e5a8:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
    e5ac:	f362 0103 	bfi	r1, r2, #0, #4
    e5b0:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
    e5b4:	4a45      	ldr	r2, [pc, #276]	; (e6cc <am_hal_pwrctrl_low_power_init+0x1b0>)
    e5b6:	68d3      	ldr	r3, [r2, #12]
    e5b8:	b2db      	uxtb	r3, r3
    e5ba:	2b11      	cmp	r3, #17
    e5bc:	d905      	bls.n	e5ca <am_hal_pwrctrl_low_power_init+0xae>
    e5be:	f8d2 335c 	ldr.w	r3, [r2, #860]	; 0x35c
    e5c2:	f36f 6318 	bfc	r3, #24, #1
    e5c6:	f8c2 335c 	str.w	r3, [r2, #860]	; 0x35c
    e5ca:	2100      	movs	r1, #0
    e5cc:	200c      	movs	r0, #12
    e5ce:	f7ff f911 	bl	d7f4 <am_hal_cachectrl_control>
    e5d2:	4b3f      	ldr	r3, [pc, #252]	; (e6d0 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e5d4:	699b      	ldr	r3, [r3, #24]
    e5d6:	f3c3 2500 	ubfx	r5, r3, #8, #1
    e5da:	05db      	lsls	r3, r3, #23
    e5dc:	d420      	bmi.n	e620 <am_hal_pwrctrl_low_power_init+0x104>
    e5de:	4c3b      	ldr	r4, [pc, #236]	; (e6cc <am_hal_pwrctrl_low_power_init+0x1b0>)
    e5e0:	68e3      	ldr	r3, [r4, #12]
    e5e2:	b2db      	uxtb	r3, r3
    e5e4:	2b11      	cmp	r3, #17
    e5e6:	d84e      	bhi.n	e686 <am_hal_pwrctrl_low_power_init+0x16a>
    e5e8:	4c38      	ldr	r4, [pc, #224]	; (e6cc <am_hal_pwrctrl_low_power_init+0x1b0>)
    e5ea:	493a      	ldr	r1, [pc, #232]	; (e6d4 <am_hal_pwrctrl_low_power_init+0x1b8>)
    e5ec:	7e22      	ldrb	r2, [r4, #24]
    e5ee:	2001      	movs	r0, #1
    e5f0:	4302      	orrs	r2, r0
    e5f2:	2307      	movs	r3, #7
    e5f4:	7622      	strb	r2, [r4, #24]
    e5f6:	9000      	str	r0, [sp, #0]
    e5f8:	461a      	mov	r2, r3
    e5fa:	f242 7010 	movw	r0, #10000	; 0x2710
    e5fe:	f7ff fc3f 	bl	de80 <am_hal_flash_delay_status_check>
    e602:	2800      	cmp	r0, #0
    e604:	d15a      	bne.n	e6bc <am_hal_pwrctrl_low_power_init+0x1a0>
    e606:	4b32      	ldr	r3, [pc, #200]	; (e6d0 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e608:	681a      	ldr	r2, [r3, #0]
    e60a:	f042 0201 	orr.w	r2, r2, #1
    e60e:	601a      	str	r2, [r3, #0]
    e610:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    e612:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    e616:	625a      	str	r2, [r3, #36]	; 0x24
    e618:	68e3      	ldr	r3, [r4, #12]
    e61a:	b2db      	uxtb	r3, r3
    e61c:	2b11      	cmp	r3, #17
    e61e:	d002      	beq.n	e626 <am_hal_pwrctrl_low_power_init+0x10a>
    e620:	2000      	movs	r0, #0
    e622:	b005      	add	sp, #20
    e624:	bd30      	pop	{r4, r5, pc}
    e626:	f8d4 335c 	ldr.w	r3, [r4, #860]	; 0x35c
    e62a:	f360 5356 	bfi	r3, r0, #21, #2
    e62e:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
    e632:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e636:	220f      	movs	r2, #15
    e638:	f362 138b 	bfi	r3, r2, #6, #6
    e63c:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e640:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e644:	f362 0305 	bfi	r3, r2, #0, #6
    e648:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e64c:	b005      	add	sp, #20
    e64e:	bd30      	pop	{r4, r5, pc}
    e650:	f7ff fdd4 	bl	e1fc <am_hal_interrupt_master_disable>
    e654:	9002      	str	r0, [sp, #8]
    e656:	68a3      	ldr	r3, [r4, #8]
    e658:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    e65c:	60a3      	str	r3, [r4, #8]
    e65e:	9802      	ldr	r0, [sp, #8]
    e660:	f7ff fdd0 	bl	e204 <am_hal_interrupt_master_set>
    e664:	20a0      	movs	r0, #160	; 0xa0
    e666:	f7ff fbfb 	bl	de60 <am_hal_flash_delay>
    e66a:	69a3      	ldr	r3, [r4, #24]
    e66c:	0619      	lsls	r1, r3, #24
    e66e:	d403      	bmi.n	e678 <am_hal_pwrctrl_low_power_init+0x15c>
    e670:	20a0      	movs	r0, #160	; 0xa0
    e672:	f7ff fbf5 	bl	de60 <am_hal_flash_delay>
    e676:	69a3      	ldr	r3, [r4, #24]
    e678:	4b15      	ldr	r3, [pc, #84]	; (e6d0 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e67a:	699b      	ldr	r3, [r3, #24]
    e67c:	061a      	lsls	r2, r3, #24
    e67e:	f53f af5f 	bmi.w	e540 <am_hal_pwrctrl_low_power_init+0x24>
    e682:	2001      	movs	r0, #1
    e684:	e7cd      	b.n	e622 <am_hal_pwrctrl_low_power_init+0x106>
    e686:	f7ff fdb9 	bl	e1fc <am_hal_interrupt_master_disable>
    e68a:	9003      	str	r0, [sp, #12]
    e68c:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e690:	2219      	movs	r2, #25
    e692:	f362 138b 	bfi	r3, r2, #6, #6
    e696:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e69a:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
    e69e:	210c      	movs	r1, #12
    e6a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e6a4:	f361 0205 	bfi	r2, r1, #0, #6
    e6a8:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
    e6ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    e6ae:	f365 5296 	bfi	r2, r5, #22, #1
    e6b2:	63da      	str	r2, [r3, #60]	; 0x3c
    e6b4:	9803      	ldr	r0, [sp, #12]
    e6b6:	f7ff fda5 	bl	e204 <am_hal_interrupt_master_set>
    e6ba:	e795      	b.n	e5e8 <am_hal_pwrctrl_low_power_init+0xcc>
    e6bc:	2004      	movs	r0, #4
    e6be:	b005      	add	sp, #20
    e6c0:	bd30      	pop	{r4, r5, pc}
    e6c2:	bf00      	nop
    e6c4:	10001a08 	.word	0x10001a08
    e6c8:	4ffff000 	.word	0x4ffff000
    e6cc:	40020000 	.word	0x40020000
    e6d0:	40021000 	.word	0x40021000
    e6d4:	40020018 	.word	0x40020018

0000e6d8 <am_hal_rtc_osc_select>:
    e6d8:	b928      	cbnz	r0, e6e6 <am_hal_rtc_osc_select+0xe>
    e6da:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e6de:	68d3      	ldr	r3, [r2, #12]
    e6e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    e6e4:	60d3      	str	r3, [r2, #12]
    e6e6:	4770      	bx	lr

0000e6e8 <am_hal_rtc_osc_enable>:
    e6e8:	4a03      	ldr	r2, [pc, #12]	; (e6f8 <am_hal_rtc_osc_enable+0x10>)
    e6ea:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    e6ee:	f36f 1304 	bfc	r3, #4, #1
    e6f2:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    e6f6:	4770      	bx	lr
    e6f8:	40004200 	.word	0x40004200

0000e6fc <am_hal_rtc_osc_disable>:
    e6fc:	4a03      	ldr	r2, [pc, #12]	; (e70c <am_hal_rtc_osc_disable+0x10>)
    e6fe:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    e702:	f043 0310 	orr.w	r3, r3, #16
    e706:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    e70a:	4770      	bx	lr
    e70c:	40004200 	.word	0x40004200

0000e710 <am_hal_rtc_time_set>:
    e710:	b5f0      	push	{r4, r5, r6, r7, lr}
    e712:	4c49      	ldr	r4, [pc, #292]	; (e838 <am_hal_rtc_time_set+0x128>)
    e714:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    e718:	f043 0301 	orr.w	r3, r3, #1
    e71c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    e720:	f890 e01c 	ldrb.w	lr, [r0, #28]
    e724:	4b45      	ldr	r3, [pc, #276]	; (e83c <am_hal_rtc_time_set+0x12c>)
    e726:	f890 1020 	ldrb.w	r1, [r0, #32]
    e72a:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
    e72e:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
    e732:	fba3 670e 	umull	r6, r7, r3, lr
    e736:	fba3 c601 	umull	ip, r6, r3, r1
    e73a:	ea4f 0cd7 	mov.w	ip, r7, lsr #3
    e73e:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
    e742:	ebae 0e4c 	sub.w	lr, lr, ip, lsl #1
    e746:	08ff      	lsrs	r7, r7, #3
    e748:	ea4e 1e07 	orr.w	lr, lr, r7, lsl #4
    e74c:	08f7      	lsrs	r7, r6, #3
    e74e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    e752:	08f6      	lsrs	r6, r6, #3
    e754:	eba1 0147 	sub.w	r1, r1, r7, lsl #1
    e758:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
    e75c:	fba3 6705 	umull	r6, r7, r3, r5
    e760:	fba3 c602 	umull	ip, r6, r3, r2
    e764:	ea4f 0cd7 	mov.w	ip, r7, lsr #3
    e768:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
    e76c:	eba5 0c4c 	sub.w	ip, r5, ip, lsl #1
    e770:	08ff      	lsrs	r7, r7, #3
    e772:	ea4f 6e0e 	mov.w	lr, lr, lsl #24
    e776:	0409      	lsls	r1, r1, #16
    e778:	f00e 5e7c 	and.w	lr, lr, #1056964608	; 0x3f000000
    e77c:	ea4c 1c07 	orr.w	ip, ip, r7, lsl #4
    e780:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
    e784:	ea4e 0101 	orr.w	r1, lr, r1
    e788:	fa5f fc8c 	uxtb.w	ip, ip
    e78c:	ea41 0c0c 	orr.w	ip, r1, ip
    e790:	08f1      	lsrs	r1, r6, #3
    e792:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    e796:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
    e79a:	08f6      	lsrs	r6, r6, #3
    e79c:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    e7a0:	0212      	lsls	r2, r2, #8
    e7a2:	f402 42fe 	and.w	r2, r2, #32512	; 0x7f00
    e7a6:	ea4c 0202 	orr.w	r2, ip, r2
    e7aa:	6422      	str	r2, [r4, #64]	; 0x40
    e7ac:	6842      	ldr	r2, [r0, #4]
    e7ae:	7c06      	ldrb	r6, [r0, #16]
    e7b0:	f890 c014 	ldrb.w	ip, [r0, #20]
    e7b4:	7e05      	ldrb	r5, [r0, #24]
    e7b6:	ea4f 7e02 	mov.w	lr, r2, lsl #28
    e7ba:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
    e7be:	06d0      	lsls	r0, r2, #27
    e7c0:	f00e 5e80 	and.w	lr, lr, #268435456	; 0x10000000
    e7c4:	f000 6000 	and.w	r0, r0, #134217728	; 0x8000000
    e7c8:	0609      	lsls	r1, r1, #24
    e7ca:	f001 61e0 	and.w	r1, r1, #117440512	; 0x7000000
    e7ce:	ea4e 0000 	orr.w	r0, lr, r0
    e7d2:	4308      	orrs	r0, r1
    e7d4:	fba3 1206 	umull	r1, r2, r3, r6
    e7d8:	fba3 1705 	umull	r1, r7, r3, r5
    e7dc:	08d1      	lsrs	r1, r2, #3
    e7de:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    e7e2:	fba3 3e0c 	umull	r3, lr, r3, ip
    e7e6:	08d2      	lsrs	r2, r2, #3
    e7e8:	eba6 0141 	sub.w	r1, r6, r1, lsl #1
    e7ec:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    e7f0:	ea4f 03de 	mov.w	r3, lr, lsr #3
    e7f4:	08fa      	lsrs	r2, r7, #3
    e7f6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    e7fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    e7fe:	eba5 0242 	sub.w	r2, r5, r2, lsl #1
    e802:	08ff      	lsrs	r7, r7, #3
    e804:	ebac 0343 	sub.w	r3, ip, r3, lsl #1
    e808:	ea4f 0ede 	mov.w	lr, lr, lsr #3
    e80c:	b2c9      	uxtb	r1, r1
    e80e:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
    e812:	ea43 130e 	orr.w	r3, r3, lr, lsl #4
    e816:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    e81a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    e81e:	021b      	lsls	r3, r3, #8
    e820:	430a      	orrs	r2, r1
    e822:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    e826:	4313      	orrs	r3, r2
    e828:	6463      	str	r3, [r4, #68]	; 0x44
    e82a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    e82e:	f36f 0300 	bfc	r3, #0, #1
    e832:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    e836:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e838:	40004200 	.word	0x40004200
    e83c:	cccccccd 	.word	0xcccccccd

0000e840 <am_hal_rtc_time_get>:
    e840:	4b28      	ldr	r3, [pc, #160]	; (e8e4 <am_hal_rtc_time_get+0xa4>)
    e842:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    e844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    e846:	f3c2 7101 	ubfx	r1, r2, #28, #2
    e84a:	b570      	push	{r4, r5, r6, lr}
    e84c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    e850:	f3c2 6403 	ubfx	r4, r2, #24, #4
    e854:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    e858:	61c1      	str	r1, [r0, #28]
    e85a:	f3c3 5103 	ubfx	r1, r3, #20, #4
    e85e:	f3c2 1403 	ubfx	r4, r2, #4, #4
    e862:	eb01 0581 	add.w	r5, r1, r1, lsl #2
    e866:	f3c3 4103 	ubfx	r1, r3, #16, #4
    e86a:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    e86e:	f3c2 3c02 	ubfx	ip, r2, #12, #3
    e872:	f002 040f 	and.w	r4, r2, #15
    e876:	eb01 0145 	add.w	r1, r1, r5, lsl #1
    e87a:	f3c2 5e02 	ubfx	lr, r2, #20, #3
    e87e:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
    e882:	eb04 0446 	add.w	r4, r4, r6, lsl #1
    e886:	b2c9      	uxtb	r1, r1
    e888:	f3c2 4503 	ubfx	r5, r2, #16, #4
    e88c:	f3c2 2203 	ubfx	r2, r2, #8, #4
    e890:	6101      	str	r1, [r0, #16]
    e892:	eb02 024c 	add.w	r2, r2, ip, lsl #1
    e896:	f3c3 3100 	ubfx	r1, r3, #12, #1
    e89a:	b2e4      	uxtb	r4, r4
    e89c:	6284      	str	r4, [r0, #40]	; 0x28
    e89e:	6242      	str	r2, [r0, #36]	; 0x24
    e8a0:	eb01 0481 	add.w	r4, r1, r1, lsl #2
    e8a4:	f3c3 2203 	ubfx	r2, r3, #8, #4
    e8a8:	f3c3 1101 	ubfx	r1, r3, #4, #2
    e8ac:	eb02 0444 	add.w	r4, r2, r4, lsl #1
    e8b0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    e8b4:	f003 020f 	and.w	r2, r3, #15
    e8b8:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    e8bc:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
    e8c0:	e9c0 4105 	strd	r4, r1, [r0, #20]
    e8c4:	0fda      	lsrs	r2, r3, #31
    e8c6:	f3c3 7400 	ubfx	r4, r3, #28, #1
    e8ca:	f3c3 61c0 	ubfx	r1, r3, #27, #1
    e8ce:	eb05 054e 	add.w	r5, r5, lr, lsl #1
    e8d2:	f3c3 6302 	ubfx	r3, r3, #24, #3
    e8d6:	e9c0 2400 	strd	r2, r4, [r0]
    e8da:	e9c0 3102 	strd	r3, r1, [r0, #8]
    e8de:	6205      	str	r5, [r0, #32]
    e8e0:	4610      	mov	r0, r2
    e8e2:	bd70      	pop	{r4, r5, r6, pc}
    e8e4:	40004200 	.word	0x40004200

0000e8e8 <am_hal_sysctrl_sleep>:
    e8e8:	b510      	push	{r4, lr}
    e8ea:	b082      	sub	sp, #8
    e8ec:	4604      	mov	r4, r0
    e8ee:	f7ff fc85 	bl	e1fc <am_hal_interrupt_master_disable>
    e8f2:	9001      	str	r0, [sp, #4]
    e8f4:	b124      	cbz	r4, e900 <am_hal_sysctrl_sleep+0x18>
    e8f6:	4b12      	ldr	r3, [pc, #72]	; (e940 <am_hal_sysctrl_sleep+0x58>)
    e8f8:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    e8fc:	07db      	lsls	r3, r3, #31
    e8fe:	d513      	bpl.n	e928 <am_hal_sysctrl_sleep+0x40>
    e900:	4a10      	ldr	r2, [pc, #64]	; (e944 <am_hal_sysctrl_sleep+0x5c>)
    e902:	6913      	ldr	r3, [r2, #16]
    e904:	f023 0304 	bic.w	r3, r3, #4
    e908:	6113      	str	r3, [r2, #16]
    e90a:	f3bf 8f4f 	dsb	sy
    e90e:	4a0e      	ldr	r2, [pc, #56]	; (e948 <am_hal_sysctrl_sleep+0x60>)
    e910:	4b0e      	ldr	r3, [pc, #56]	; (e94c <am_hal_sysctrl_sleep+0x64>)
    e912:	6812      	ldr	r2, [r2, #0]
    e914:	601a      	str	r2, [r3, #0]
    e916:	bf30      	wfi
    e918:	f3bf 8f6f 	isb	sy
    e91c:	9801      	ldr	r0, [sp, #4]
    e91e:	b002      	add	sp, #8
    e920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e924:	f7ff bc6e 	b.w	e204 <am_hal_interrupt_master_set>
    e928:	4b09      	ldr	r3, [pc, #36]	; (e950 <am_hal_sysctrl_sleep+0x68>)
    e92a:	681a      	ldr	r2, [r3, #0]
    e92c:	b912      	cbnz	r2, e934 <am_hal_sysctrl_sleep+0x4c>
    e92e:	4a09      	ldr	r2, [pc, #36]	; (e954 <am_hal_sysctrl_sleep+0x6c>)
    e930:	6812      	ldr	r2, [r2, #0]
    e932:	601a      	str	r2, [r3, #0]
    e934:	4a03      	ldr	r2, [pc, #12]	; (e944 <am_hal_sysctrl_sleep+0x5c>)
    e936:	6913      	ldr	r3, [r2, #16]
    e938:	f043 0304 	orr.w	r3, r3, #4
    e93c:	6113      	str	r3, [r2, #16]
    e93e:	e7e4      	b.n	e90a <am_hal_sysctrl_sleep+0x22>
    e940:	40020000 	.word	0x40020000
    e944:	e000ed00 	.word	0xe000ed00
    e948:	5fff0000 	.word	0x5fff0000
    e94c:	10001a0c 	.word	0x10001a0c
    e950:	10001a08 	.word	0x10001a08
    e954:	4ffff000 	.word	0x4ffff000

0000e958 <am_hal_tpiu_enable>:
    e958:	b510      	push	{r4, lr}
    e95a:	4b23      	ldr	r3, [pc, #140]	; (e9e8 <am_hal_tpiu_enable+0x90>)
    e95c:	6804      	ldr	r4, [r0, #0]
    e95e:	2200      	movs	r2, #0
    e960:	b084      	sub	sp, #16
    e962:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    e966:	b334      	cbz	r4, e9b6 <am_hal_tpiu_enable+0x5e>
    e968:	4a20      	ldr	r2, [pc, #128]	; (e9ec <am_hal_tpiu_enable+0x94>)
    e96a:	4921      	ldr	r1, [pc, #132]	; (e9f0 <am_hal_tpiu_enable+0x98>)
    e96c:	2001      	movs	r0, #1
    e96e:	6058      	str	r0, [r3, #4]
    e970:	f5a4 4361 	sub.w	r3, r4, #57600	; 0xe100
    e974:	a801      	add	r0, sp, #4
    e976:	428b      	cmp	r3, r1
    e978:	bf88      	it	hi
    e97a:	4614      	movhi	r4, r2
    e97c:	f7ff f950 	bl	dc20 <am_hal_clkgen_status_get>
    e980:	9b01      	ldr	r3, [sp, #4]
    e982:	1c5a      	adds	r2, r3, #1
    e984:	d02d      	beq.n	e9e2 <am_hal_tpiu_enable+0x8a>
    e986:	08db      	lsrs	r3, r3, #3
    e988:	fbb3 f4f4 	udiv	r4, r3, r4
    e98c:	3c01      	subs	r4, #1
    e98e:	b2a4      	uxth	r4, r4
    e990:	4b15      	ldr	r3, [pc, #84]	; (e9e8 <am_hal_tpiu_enable+0x90>)
    e992:	4a18      	ldr	r2, [pc, #96]	; (e9f4 <am_hal_tpiu_enable+0x9c>)
    e994:	611c      	str	r4, [r3, #16]
    e996:	2102      	movs	r1, #2
    e998:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
    e99c:	2000      	movs	r0, #0
    e99e:	f240 2101 	movw	r1, #513	; 0x201
    e9a2:	f8c3 0f00 	str.w	r0, [r3, #3840]	; 0xf00
    e9a6:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
    e9aa:	f44f 7048 	mov.w	r0, #800	; 0x320
    e9ae:	f7ff fa57 	bl	de60 <am_hal_flash_delay>
    e9b2:	b004      	add	sp, #16
    e9b4:	bd10      	pop	{r4, pc}
    e9b6:	6902      	ldr	r2, [r0, #16]
    e9b8:	611a      	str	r2, [r3, #16]
    e9ba:	6882      	ldr	r2, [r0, #8]
    e9bc:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    e9c0:	68c1      	ldr	r1, [r0, #12]
    e9c2:	2201      	movs	r2, #1
    e9c4:	3901      	subs	r1, #1
    e9c6:	408a      	lsls	r2, r1
    e9c8:	605a      	str	r2, [r3, #4]
    e9ca:	f8c3 4f00 	str.w	r4, [r3, #3840]	; 0xf00
    e9ce:	4a09      	ldr	r2, [pc, #36]	; (e9f4 <am_hal_tpiu_enable+0x9c>)
    e9d0:	6843      	ldr	r3, [r0, #4]
    e9d2:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    e9d6:	f44f 7048 	mov.w	r0, #800	; 0x320
    e9da:	f7ff fa41 	bl	de60 <am_hal_flash_delay>
    e9de:	b004      	add	sp, #16
    e9e0:	bd10      	pop	{r4, pc}
    e9e2:	2405      	movs	r4, #5
    e9e4:	e7d4      	b.n	e990 <am_hal_tpiu_enable+0x38>
    e9e6:	bf00      	nop
    e9e8:	e0040000 	.word	0xe0040000
    e9ec:	000f4240 	.word	0x000f4240
    e9f0:	001da380 	.word	0x001da380
    e9f4:	40020000 	.word	0x40020000

0000e9f8 <am_hal_uart_initialize>:
    e9f8:	2801      	cmp	r0, #1
    e9fa:	d81a      	bhi.n	ea32 <am_hal_uart_initialize+0x3a>
    e9fc:	b1e9      	cbz	r1, ea3a <am_hal_uart_initialize+0x42>
    e9fe:	b530      	push	{r4, r5, lr}
    ea00:	2264      	movs	r2, #100	; 0x64
    ea02:	4d0f      	ldr	r5, [pc, #60]	; (ea40 <am_hal_uart_initialize+0x48>)
    ea04:	fb00 f202 	mul.w	r2, r0, r2
    ea08:	18ac      	adds	r4, r5, r2
    ea0a:	78e3      	ldrb	r3, [r4, #3]
    ea0c:	f3c3 0e00 	ubfx	lr, r3, #0, #1
    ea10:	f013 0301 	ands.w	r3, r3, #1
    ea14:	d10f      	bne.n	ea36 <am_hal_uart_initialize+0x3e>
    ea16:	6260      	str	r0, [r4, #36]	; 0x24
    ea18:	58a8      	ldr	r0, [r5, r2]
    ea1a:	f000 4c7e 	and.w	ip, r0, #4261412864	; 0xfe000000
    ea1e:	4809      	ldr	r0, [pc, #36]	; (ea44 <am_hal_uart_initialize+0x4c>)
    ea20:	ea4c 0000 	orr.w	r0, ip, r0
    ea24:	50a8      	str	r0, [r5, r2]
    ea26:	f884 e004 	strb.w	lr, [r4, #4]
    ea2a:	6623      	str	r3, [r4, #96]	; 0x60
    ea2c:	4618      	mov	r0, r3
    ea2e:	600c      	str	r4, [r1, #0]
    ea30:	bd30      	pop	{r4, r5, pc}
    ea32:	2005      	movs	r0, #5
    ea34:	4770      	bx	lr
    ea36:	2007      	movs	r0, #7
    ea38:	bd30      	pop	{r4, r5, pc}
    ea3a:	2006      	movs	r0, #6
    ea3c:	4770      	bx	lr
    ea3e:	bf00      	nop
    ea40:	10001a10 	.word	0x10001a10
    ea44:	01ea9e06 	.word	0x01ea9e06

0000ea48 <am_hal_uart_deinitialize>:
    ea48:	b170      	cbz	r0, ea68 <am_hal_uart_deinitialize+0x20>
    ea4a:	6803      	ldr	r3, [r0, #0]
    ea4c:	4a07      	ldr	r2, [pc, #28]	; (ea6c <am_hal_uart_deinitialize+0x24>)
    ea4e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ea52:	4293      	cmp	r3, r2
    ea54:	d108      	bne.n	ea68 <am_hal_uart_deinitialize+0x20>
    ea56:	78c2      	ldrb	r2, [r0, #3]
    ea58:	2300      	movs	r3, #0
    ea5a:	f36f 0200 	bfc	r2, #0, #1
    ea5e:	70c2      	strb	r2, [r0, #3]
    ea60:	6243      	str	r3, [r0, #36]	; 0x24
    ea62:	7103      	strb	r3, [r0, #4]
    ea64:	4618      	mov	r0, r3
    ea66:	4770      	bx	lr
    ea68:	2002      	movs	r0, #2
    ea6a:	4770      	bx	lr
    ea6c:	01ea9e06 	.word	0x01ea9e06

0000ea70 <am_hal_uart_power_control>:
    ea70:	b5f0      	push	{r4, r5, r6, r7, lr}
    ea72:	4604      	mov	r4, r0
    ea74:	6800      	ldr	r0, [r0, #0]
    ea76:	4b39      	ldr	r3, [pc, #228]	; (eb5c <am_hal_uart_power_control+0xec>)
    ea78:	f020 467e 	bic.w	r6, r0, #4261412864	; 0xfe000000
    ea7c:	429e      	cmp	r6, r3
    ea7e:	b085      	sub	sp, #20
    ea80:	d13f      	bne.n	eb02 <am_hal_uart_power_control+0x92>
    ea82:	6a65      	ldr	r5, [r4, #36]	; 0x24
    ea84:	f105 0008 	add.w	r0, r5, #8
    ea88:	b2c7      	uxtb	r7, r0
    ea8a:	b189      	cbz	r1, eab0 <am_hal_uart_power_control+0x40>
    ea8c:	3901      	subs	r1, #1
    ea8e:	2901      	cmp	r1, #1
    ea90:	d834      	bhi.n	eafc <am_hal_uart_power_control+0x8c>
    ea92:	2a00      	cmp	r2, #0
    ea94:	d138      	bne.n	eb08 <am_hal_uart_power_control+0x98>
    ea96:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    ea9a:	351c      	adds	r5, #28
    ea9c:	032d      	lsls	r5, r5, #12
    ea9e:	f04f 33ff 	mov.w	r3, #4294967295
    eaa2:	646b      	str	r3, [r5, #68]	; 0x44
    eaa4:	4638      	mov	r0, r7
    eaa6:	f7ff fd0d 	bl	e4c4 <am_hal_pwrctrl_periph_disable>
    eaaa:	2000      	movs	r0, #0
    eaac:	b005      	add	sp, #20
    eaae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eab0:	2a00      	cmp	r2, #0
    eab2:	d04a      	beq.n	eb4a <am_hal_uart_power_control+0xda>
    eab4:	7923      	ldrb	r3, [r4, #4]
    eab6:	2b00      	cmp	r3, #0
    eab8:	d04e      	beq.n	eb58 <am_hal_uart_power_control+0xe8>
    eaba:	4638      	mov	r0, r7
    eabc:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    eac0:	9101      	str	r1, [sp, #4]
    eac2:	351c      	adds	r5, #28
    eac4:	f7ff fcd4 	bl	e470 <am_hal_pwrctrl_periph_enable>
    eac8:	f7ff fb98 	bl	e1fc <am_hal_interrupt_master_disable>
    eacc:	032d      	lsls	r5, r5, #12
    eace:	68a3      	ldr	r3, [r4, #8]
    ead0:	9002      	str	r0, [sp, #8]
    ead2:	622b      	str	r3, [r5, #32]
    ead4:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    ead8:	626a      	str	r2, [r5, #36]	; 0x24
    eada:	62ab      	str	r3, [r5, #40]	; 0x28
    eadc:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
    eae0:	62ea      	str	r2, [r5, #44]	; 0x2c
    eae2:	632b      	str	r3, [r5, #48]	; 0x30
    eae4:	e9d4 2307 	ldrd	r2, r3, [r4, #28]
    eae8:	9901      	ldr	r1, [sp, #4]
    eaea:	636a      	str	r2, [r5, #52]	; 0x34
    eaec:	63ab      	str	r3, [r5, #56]	; 0x38
    eaee:	9802      	ldr	r0, [sp, #8]
    eaf0:	7121      	strb	r1, [r4, #4]
    eaf2:	f7ff fb87 	bl	e204 <am_hal_interrupt_master_set>
    eaf6:	9901      	ldr	r1, [sp, #4]
    eaf8:	4608      	mov	r0, r1
    eafa:	e000      	b.n	eafe <am_hal_uart_power_control+0x8e>
    eafc:	2006      	movs	r0, #6
    eafe:	b005      	add	sp, #20
    eb00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eb02:	2002      	movs	r0, #2
    eb04:	b005      	add	sp, #20
    eb06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eb08:	f7ff fb78 	bl	e1fc <am_hal_interrupt_master_disable>
    eb0c:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    eb10:	351c      	adds	r5, #28
    eb12:	032d      	lsls	r5, r5, #12
    eb14:	9003      	str	r0, [sp, #12]
    eb16:	6a2b      	ldr	r3, [r5, #32]
    eb18:	60a3      	str	r3, [r4, #8]
    eb1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    eb1c:	60e3      	str	r3, [r4, #12]
    eb1e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    eb20:	6123      	str	r3, [r4, #16]
    eb22:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    eb24:	6163      	str	r3, [r4, #20]
    eb26:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    eb28:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    eb2a:	61a3      	str	r3, [r4, #24]
    eb2c:	6bab      	ldr	r3, [r5, #56]	; 0x38
    eb2e:	61e2      	str	r2, [r4, #28]
    eb30:	2201      	movs	r2, #1
    eb32:	6223      	str	r3, [r4, #32]
    eb34:	9803      	ldr	r0, [sp, #12]
    eb36:	7122      	strb	r2, [r4, #4]
    eb38:	f7ff fb64 	bl	e204 <am_hal_interrupt_master_set>
    eb3c:	6823      	ldr	r3, [r4, #0]
    eb3e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    eb42:	42b3      	cmp	r3, r6
    eb44:	d1ae      	bne.n	eaa4 <am_hal_uart_power_control+0x34>
    eb46:	6a65      	ldr	r5, [r4, #36]	; 0x24
    eb48:	e7a5      	b.n	ea96 <am_hal_uart_power_control+0x26>
    eb4a:	4638      	mov	r0, r7
    eb4c:	9201      	str	r2, [sp, #4]
    eb4e:	f7ff fc8f 	bl	e470 <am_hal_pwrctrl_periph_enable>
    eb52:	9a01      	ldr	r2, [sp, #4]
    eb54:	4610      	mov	r0, r2
    eb56:	e7d2      	b.n	eafe <am_hal_uart_power_control+0x8e>
    eb58:	2007      	movs	r0, #7
    eb5a:	e7d0      	b.n	eafe <am_hal_uart_power_control+0x8e>
    eb5c:	01ea9e06 	.word	0x01ea9e06

0000eb60 <am_hal_uart_configure>:
    eb60:	6803      	ldr	r3, [r0, #0]
    eb62:	4a78      	ldr	r2, [pc, #480]	; (ed44 <am_hal_uart_configure+0x1e4>)
    eb64:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    eb68:	4293      	cmp	r3, r2
    eb6a:	d001      	beq.n	eb70 <am_hal_uart_configure+0x10>
    eb6c:	2002      	movs	r0, #2
    eb6e:	4770      	bx	lr
    eb70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eb74:	6a44      	ldr	r4, [r0, #36]	; 0x24
    eb76:	f504 2480 	add.w	r4, r4, #262144	; 0x40000
    eb7a:	341c      	adds	r4, #28
    eb7c:	0324      	lsls	r4, r4, #12
    eb7e:	2700      	movs	r7, #0
    eb80:	b084      	sub	sp, #16
    eb82:	6327      	str	r7, [r4, #48]	; 0x30
    eb84:	460e      	mov	r6, r1
    eb86:	4605      	mov	r5, r0
    eb88:	f7ff fb38 	bl	e1fc <am_hal_interrupt_master_disable>
    eb8c:	9001      	str	r0, [sp, #4]
    eb8e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    eb90:	f043 0308 	orr.w	r3, r3, #8
    eb94:	8623      	strh	r3, [r4, #48]	; 0x30
    eb96:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    eb98:	2201      	movs	r2, #1
    eb9a:	f362 1306 	bfi	r3, r2, #4, #3
    eb9e:	8623      	strh	r3, [r4, #48]	; 0x30
    eba0:	9801      	ldr	r0, [sp, #4]
    eba2:	f7ff fb2f 	bl	e204 <am_hal_interrupt_master_set>
    eba6:	f7ff fb29 	bl	e1fc <am_hal_interrupt_master_disable>
    ebaa:	9002      	str	r0, [sp, #8]
    ebac:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    ebae:	f367 0300 	bfi	r3, r7, #0, #1
    ebb2:	8623      	strh	r3, [r4, #48]	; 0x30
    ebb4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    ebb6:	f367 2349 	bfi	r3, r7, #9, #1
    ebba:	8623      	strh	r3, [r4, #48]	; 0x30
    ebbc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    ebbe:	f367 2308 	bfi	r3, r7, #8, #1
    ebc2:	8623      	strh	r3, [r4, #48]	; 0x30
    ebc4:	9802      	ldr	r0, [sp, #8]
    ebc6:	f7ff fb1d 	bl	e204 <am_hal_interrupt_master_set>
    ebca:	4b5f      	ldr	r3, [pc, #380]	; (ed48 <am_hal_uart_configure+0x1e8>)
    ebcc:	6832      	ldr	r2, [r6, #0]
    ebce:	68db      	ldr	r3, [r3, #12]
    ebd0:	b2db      	uxtb	r3, r3
    ebd2:	2b12      	cmp	r3, #18
    ebd4:	d076      	beq.n	ecc4 <am_hal_uart_configure+0x164>
    ebd6:	4b5c      	ldr	r3, [pc, #368]	; (ed48 <am_hal_uart_configure+0x1e8>)
    ebd8:	68db      	ldr	r3, [r3, #12]
    ebda:	b2db      	uxtb	r3, r3
    ebdc:	2b20      	cmp	r3, #32
    ebde:	d902      	bls.n	ebe6 <am_hal_uart_configure+0x86>
    ebe0:	4b5a      	ldr	r3, [pc, #360]	; (ed4c <am_hal_uart_configure+0x1ec>)
    ebe2:	429a      	cmp	r2, r3
    ebe4:	d871      	bhi.n	ecca <am_hal_uart_configure+0x16a>
    ebe6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ebe8:	f3c3 1302 	ubfx	r3, r3, #4, #3
    ebec:	3b01      	subs	r3, #1
    ebee:	b2db      	uxtb	r3, r3
    ebf0:	2b03      	cmp	r3, #3
    ebf2:	d86c      	bhi.n	ecce <am_hal_uart_configure+0x16e>
    ebf4:	4956      	ldr	r1, [pc, #344]	; (ed50 <am_hal_uart_configure+0x1f0>)
    ebf6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    ebfa:	0112      	lsls	r2, r2, #4
    ebfc:	4291      	cmp	r1, r2
    ebfe:	ea4f 1381 	mov.w	r3, r1, lsl #6
    ec02:	fbb1 f0f2 	udiv	r0, r1, r2
    ec06:	fbb3 f3f2 	udiv	r3, r3, r2
    ec0a:	eba3 1380 	sub.w	r3, r3, r0, lsl #6
    ec0e:	d364      	bcc.n	ecda <am_hal_uart_configure+0x17a>
    ec10:	6260      	str	r0, [r4, #36]	; 0x24
    ec12:	6260      	str	r0, [r4, #36]	; 0x24
    ec14:	62a3      	str	r3, [r4, #40]	; 0x28
    ec16:	089b      	lsrs	r3, r3, #2
    ec18:	eb03 1300 	add.w	r3, r3, r0, lsl #4
    ec1c:	fbb1 f3f3 	udiv	r3, r1, r3
    ec20:	662b      	str	r3, [r5, #96]	; 0x60
    ec22:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    ec24:	f36f 338e 	bfc	r3, #14, #1
    ec28:	8623      	strh	r3, [r4, #48]	; 0x30
    ec2a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    ec2c:	f36f 33cf 	bfc	r3, #15, #1
    ec30:	8623      	strh	r3, [r4, #48]	; 0x30
    ec32:	6933      	ldr	r3, [r6, #16]
    ec34:	6b22      	ldr	r2, [r4, #48]	; 0x30
    ec36:	6971      	ldr	r1, [r6, #20]
    ec38:	431a      	orrs	r2, r3
    ec3a:	6873      	ldr	r3, [r6, #4]
    ec3c:	6322      	str	r2, [r4, #48]	; 0x30
    ec3e:	68f2      	ldr	r2, [r6, #12]
    ec40:	6361      	str	r1, [r4, #52]	; 0x34
    ec42:	4313      	orrs	r3, r2
    ec44:	68b2      	ldr	r2, [r6, #8]
    ec46:	4313      	orrs	r3, r2
    ec48:	f043 0310 	orr.w	r3, r3, #16
    ec4c:	62e3      	str	r3, [r4, #44]	; 0x2c
    ec4e:	f7ff fad5 	bl	e1fc <am_hal_interrupt_master_disable>
    ec52:	9003      	str	r0, [sp, #12]
    ec54:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    ec56:	f043 0301 	orr.w	r3, r3, #1
    ec5a:	8623      	strh	r3, [r4, #48]	; 0x30
    ec5c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    ec5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    ec62:	8623      	strh	r3, [r4, #48]	; 0x30
    ec64:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    ec66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    ec6a:	8623      	strh	r3, [r4, #48]	; 0x30
    ec6c:	9803      	ldr	r0, [sp, #12]
    ec6e:	f7ff fac9 	bl	e204 <am_hal_interrupt_master_set>
    ec72:	682a      	ldr	r2, [r5, #0]
    ec74:	4b33      	ldr	r3, [pc, #204]	; (ed44 <am_hal_uart_configure+0x1e4>)
    ec76:	f022 487e 	bic.w	r8, r2, #4261412864	; 0xfe000000
    ec7a:	4598      	cmp	r8, r3
    ec7c:	d11e      	bne.n	ecbc <am_hal_uart_configure+0x15c>
    ec7e:	69b1      	ldr	r1, [r6, #24]
    ec80:	e9d6 4708 	ldrd	r4, r7, [r6, #32]
    ec84:	b109      	cbz	r1, ec8a <am_hal_uart_configure+0x12a>
    ec86:	69f3      	ldr	r3, [r6, #28]
    ec88:	bb5b      	cbnz	r3, ece2 <am_hal_uart_configure+0x182>
    ec8a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ec8c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    ec90:	331c      	adds	r3, #28
    ec92:	031b      	lsls	r3, r3, #12
    ec94:	2200      	movs	r2, #0
    ec96:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
    ec9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    ec9c:	f022 0220 	bic.w	r2, r2, #32
    eca0:	639a      	str	r2, [r3, #56]	; 0x38
    eca2:	b10c      	cbz	r4, eca8 <am_hal_uart_configure+0x148>
    eca4:	2f00      	cmp	r7, #0
    eca6:	d132      	bne.n	ed0e <am_hal_uart_configure+0x1ae>
    eca8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    ecaa:	2000      	movs	r0, #0
    ecac:	f022 0250 	bic.w	r2, r2, #80	; 0x50
    ecb0:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
    ecb4:	639a      	str	r2, [r3, #56]	; 0x38
    ecb6:	b004      	add	sp, #16
    ecb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ecbc:	2000      	movs	r0, #0
    ecbe:	b004      	add	sp, #16
    ecc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ecc4:	f5b2 2f61 	cmp.w	r2, #921600	; 0xe1000
    ecc8:	d985      	bls.n	ebd6 <am_hal_uart_configure+0x76>
    ecca:	4822      	ldr	r0, [pc, #136]	; (ed54 <am_hal_uart_configure+0x1f4>)
    eccc:	e7f3      	b.n	ecb6 <am_hal_uart_configure+0x156>
    ecce:	4822      	ldr	r0, [pc, #136]	; (ed58 <am_hal_uart_configure+0x1f8>)
    ecd0:	2300      	movs	r3, #0
    ecd2:	662b      	str	r3, [r5, #96]	; 0x60
    ecd4:	b004      	add	sp, #16
    ecd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ecda:	2300      	movs	r3, #0
    ecdc:	481d      	ldr	r0, [pc, #116]	; (ed54 <am_hal_uart_configure+0x1f4>)
    ecde:	662b      	str	r3, [r5, #96]	; 0x60
    ece0:	e7e9      	b.n	ecb6 <am_hal_uart_configure+0x156>
    ece2:	2201      	movs	r2, #1
    ece4:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
    ece8:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    ecec:	f000 fa5e 	bl	f1ac <am_hal_queue_init>
    ecf0:	682b      	ldr	r3, [r5, #0]
    ecf2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ecf6:	4543      	cmp	r3, r8
    ecf8:	d1e0      	bne.n	ecbc <am_hal_uart_configure+0x15c>
    ecfa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ecfc:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    ed00:	331c      	adds	r3, #28
    ed02:	031b      	lsls	r3, r3, #12
    ed04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    ed06:	f042 0220 	orr.w	r2, r2, #32
    ed0a:	639a      	str	r2, [r3, #56]	; 0x38
    ed0c:	e7c9      	b.n	eca2 <am_hal_uart_configure+0x142>
    ed0e:	2201      	movs	r2, #1
    ed10:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
    ed14:	463b      	mov	r3, r7
    ed16:	4621      	mov	r1, r4
    ed18:	f105 0048 	add.w	r0, r5, #72	; 0x48
    ed1c:	f000 fa46 	bl	f1ac <am_hal_queue_init>
    ed20:	682b      	ldr	r3, [r5, #0]
    ed22:	4a08      	ldr	r2, [pc, #32]	; (ed44 <am_hal_uart_configure+0x1e4>)
    ed24:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ed28:	4293      	cmp	r3, r2
    ed2a:	d1c7      	bne.n	ecbc <am_hal_uart_configure+0x15c>
    ed2c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ed2e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    ed32:	331c      	adds	r3, #28
    ed34:	031b      	lsls	r3, r3, #12
    ed36:	2000      	movs	r0, #0
    ed38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    ed3a:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    ed3e:	639a      	str	r2, [r3, #56]	; 0x38
    ed40:	e7b9      	b.n	ecb6 <am_hal_uart_configure+0x156>
    ed42:	bf00      	nop
    ed44:	01ea9e06 	.word	0x01ea9e06
    ed48:	40020000 	.word	0x40020000
    ed4c:	0016e360 	.word	0x0016e360
    ed50:	0000f868 	.word	0x0000f868
    ed54:	08000003 	.word	0x08000003
    ed58:	08000002 	.word	0x08000002

0000ed5c <am_hal_uart_transfer>:
    ed5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ed60:	ed2d 8b02 	vpush	{d8}
    ed64:	680d      	ldr	r5, [r1, #0]
    ed66:	b091      	sub	sp, #68	; 0x44
    ed68:	4604      	mov	r4, r0
    ed6a:	b14d      	cbz	r5, ed80 <am_hal_uart_transfer+0x24>
    ed6c:	2d01      	cmp	r5, #1
    ed6e:	f000 808f 	beq.w	ee90 <am_hal_uart_transfer+0x134>
    ed72:	2507      	movs	r5, #7
    ed74:	4628      	mov	r0, r5
    ed76:	b011      	add	sp, #68	; 0x44
    ed78:	ecbd 8b02 	vpop	{d8}
    ed7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ed80:	e9d1 b802 	ldrd	fp, r8, [r1, #8]
    ed84:	684b      	ldr	r3, [r1, #4]
    ed86:	690a      	ldr	r2, [r1, #16]
    ed88:	9202      	str	r2, [sp, #8]
    ed8a:	4618      	mov	r0, r3
    ed8c:	f1b8 0f00 	cmp.w	r8, #0
    ed90:	f000 8111 	beq.w	efb6 <am_hal_uart_transfer+0x25a>
    ed94:	f1bb 0f00 	cmp.w	fp, #0
    ed98:	f000 8172 	beq.w	f080 <am_hal_uart_transfer+0x324>
    ed9c:	2c00      	cmp	r4, #0
    ed9e:	f000 8165 	beq.w	f06c <am_hal_uart_transfer+0x310>
    eda2:	46a9      	mov	r9, r5
    eda4:	462f      	mov	r7, r5
    eda6:	9501      	str	r5, [sp, #4]
    eda8:	4625      	mov	r5, r4
    edaa:	4619      	mov	r1, r3
    edac:	682a      	ldr	r2, [r5, #0]
    edae:	461c      	mov	r4, r3
    edb0:	4bad      	ldr	r3, [pc, #692]	; (f068 <am_hal_uart_transfer+0x30c>)
    edb2:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    edb6:	429a      	cmp	r2, r3
    edb8:	465e      	mov	r6, fp
    edba:	d12d      	bne.n	ee18 <am_hal_uart_transfer+0xbc>
    edbc:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    edc0:	bb7a      	cbnz	r2, ee22 <am_hal_uart_transfer+0xc6>
    edc2:	1e48      	subs	r0, r1, #1
    edc4:	6a69      	ldr	r1, [r5, #36]	; 0x24
    edc6:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    edca:	311c      	adds	r1, #28
    edcc:	0309      	lsls	r1, r1, #12
    edce:	698b      	ldr	r3, [r1, #24]
    edd0:	069b      	lsls	r3, r3, #26
    edd2:	d405      	bmi.n	ede0 <am_hal_uart_transfer+0x84>
    edd4:	3201      	adds	r2, #1
    edd6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    edda:	600b      	str	r3, [r1, #0]
    eddc:	4296      	cmp	r6, r2
    edde:	d8f6      	bhi.n	edce <am_hal_uart_transfer+0x72>
    ede0:	4417      	add	r7, r2
    ede2:	1ab6      	subs	r6, r6, r2
    ede4:	b936      	cbnz	r6, edf4 <am_hal_uart_transfer+0x98>
    ede6:	9d01      	ldr	r5, [sp, #4]
    ede8:	9b02      	ldr	r3, [sp, #8]
    edea:	2b00      	cmp	r3, #0
    edec:	f000 808c 	beq.w	ef08 <am_hal_uart_transfer+0x1ac>
    edf0:	601f      	str	r7, [r3, #0]
    edf2:	e7bf      	b.n	ed74 <am_hal_uart_transfer+0x18>
    edf4:	2010      	movs	r0, #16
    edf6:	f7ff f833 	bl	de60 <am_hal_flash_delay>
    edfa:	f1b8 3fff 	cmp.w	r8, #4294967295
    edfe:	bf18      	it	ne
    ee00:	f109 0901 	addne.w	r9, r9, #1
    ee04:	45c8      	cmp	r8, r9
    ee06:	d9ee      	bls.n	ede6 <am_hal_uart_transfer+0x8a>
    ee08:	682a      	ldr	r2, [r5, #0]
    ee0a:	4b97      	ldr	r3, [pc, #604]	; (f068 <am_hal_uart_transfer+0x30c>)
    ee0c:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    ee10:	429a      	cmp	r2, r3
    ee12:	eb04 0107 	add.w	r1, r4, r7
    ee16:	d0d1      	beq.n	edbc <am_hal_uart_transfer+0x60>
    ee18:	9b02      	ldr	r3, [sp, #8]
    ee1a:	b103      	cbz	r3, ee1e <am_hal_uart_transfer+0xc2>
    ee1c:	601f      	str	r7, [r3, #0]
    ee1e:	2502      	movs	r5, #2
    ee20:	e7a8      	b.n	ed74 <am_hal_uart_transfer+0x18>
    ee22:	e9d5 020d 	ldrd	r0, r2, [r5, #52]	; 0x34
    ee26:	1a12      	subs	r2, r2, r0
    ee28:	42b2      	cmp	r2, r6
    ee2a:	4613      	mov	r3, r2
    ee2c:	f105 0b2c 	add.w	fp, r5, #44	; 0x2c
    ee30:	bf28      	it	cs
    ee32:	4633      	movcs	r3, r6
    ee34:	461a      	mov	r2, r3
    ee36:	4658      	mov	r0, fp
    ee38:	9303      	str	r3, [sp, #12]
    ee3a:	f000 f9c3 	bl	f1c4 <am_hal_queue_item_add>
    ee3e:	f8d5 a024 	ldr.w	sl, [r5, #36]	; 0x24
    ee42:	f7ff f9db 	bl	e1fc <am_hal_interrupt_master_disable>
    ee46:	f50a 2a80 	add.w	sl, sl, #262144	; 0x40000
    ee4a:	f10a 0a1c 	add.w	sl, sl, #28
    ee4e:	9008      	str	r0, [sp, #32]
    ee50:	ea4f 3a0a 	mov.w	sl, sl, lsl #12
    ee54:	e00d      	b.n	ee72 <am_hal_uart_transfer+0x116>
    ee56:	f000 f9f3 	bl	f240 <am_hal_queue_item_get>
    ee5a:	b190      	cbz	r0, ee82 <am_hal_uart_transfer+0x126>
    ee5c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    ee5e:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    ee62:	321c      	adds	r2, #28
    ee64:	0312      	lsls	r2, r2, #12
    ee66:	6993      	ldr	r3, [r2, #24]
    ee68:	0699      	lsls	r1, r3, #26
    ee6a:	bf5c      	itt	pl
    ee6c:	f89d 301c 	ldrbpl.w	r3, [sp, #28]
    ee70:	6013      	strpl	r3, [r2, #0]
    ee72:	f8da 3018 	ldr.w	r3, [sl, #24]
    ee76:	069b      	lsls	r3, r3, #26
    ee78:	f04f 0201 	mov.w	r2, #1
    ee7c:	a907      	add	r1, sp, #28
    ee7e:	4658      	mov	r0, fp
    ee80:	d5e9      	bpl.n	ee56 <am_hal_uart_transfer+0xfa>
    ee82:	9b03      	ldr	r3, [sp, #12]
    ee84:	9808      	ldr	r0, [sp, #32]
    ee86:	441f      	add	r7, r3
    ee88:	1af6      	subs	r6, r6, r3
    ee8a:	f7ff f9bb 	bl	e204 <am_hal_interrupt_master_set>
    ee8e:	e7a9      	b.n	ede4 <am_hal_uart_transfer+0x88>
    ee90:	68cd      	ldr	r5, [r1, #12]
    ee92:	690b      	ldr	r3, [r1, #16]
    ee94:	9301      	str	r3, [sp, #4]
    ee96:	e9d1 b701 	ldrd	fp, r7, [r1, #4]
    ee9a:	2d00      	cmp	r5, #0
    ee9c:	f000 80b5 	beq.w	f00a <am_hal_uart_transfer+0x2ae>
    eea0:	2f00      	cmp	r7, #0
    eea2:	f000 811e 	beq.w	f0e2 <am_hal_uart_transfer+0x386>
    eea6:	2800      	cmp	r0, #0
    eea8:	f000 80e7 	beq.w	f07a <am_hal_uart_transfer+0x31e>
    eeac:	6822      	ldr	r2, [r4, #0]
    eeae:	f8df a1b8 	ldr.w	sl, [pc, #440]	; f068 <am_hal_uart_transfer+0x30c>
    eeb2:	f100 0348 	add.w	r3, r0, #72	; 0x48
    eeb6:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    eeba:	ee08 3a10 	vmov	s16, r3
    eebe:	f04f 0900 	mov.w	r9, #0
    eec2:	462b      	mov	r3, r5
    eec4:	4552      	cmp	r2, sl
    eec6:	46c8      	mov	r8, r9
    eec8:	465d      	mov	r5, fp
    eeca:	461e      	mov	r6, r3
    eecc:	d133      	bne.n	ef36 <am_hal_uart_transfer+0x1da>
    eece:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    eed2:	2a00      	cmp	r2, #0
    eed4:	d137      	bne.n	ef46 <am_hal_uart_transfer+0x1ea>
    eed6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    eed8:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    eedc:	311c      	adds	r1, #28
    eede:	1e68      	subs	r0, r5, #1
    eee0:	0309      	lsls	r1, r1, #12
    eee2:	698b      	ldr	r3, [r1, #24]
    eee4:	06dd      	lsls	r5, r3, #27
    eee6:	d408      	bmi.n	eefa <am_hal_uart_transfer+0x19e>
    eee8:	680b      	ldr	r3, [r1, #0]
    eeea:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    eeee:	d15e      	bne.n	efae <am_hal_uart_transfer+0x252>
    eef0:	3201      	adds	r2, #1
    eef2:	4297      	cmp	r7, r2
    eef4:	f800 3f01 	strb.w	r3, [r0, #1]!
    eef8:	d8f3      	bhi.n	eee2 <am_hal_uart_transfer+0x186>
    eefa:	4490      	add	r8, r2
    eefc:	1abf      	subs	r7, r7, r2
    eefe:	b957      	cbnz	r7, ef16 <am_hal_uart_transfer+0x1ba>
    ef00:	9b01      	ldr	r3, [sp, #4]
    ef02:	b10b      	cbz	r3, ef08 <am_hal_uart_transfer+0x1ac>
    ef04:	f8c3 8000 	str.w	r8, [r3]
    ef08:	2500      	movs	r5, #0
    ef0a:	4628      	mov	r0, r5
    ef0c:	b011      	add	sp, #68	; 0x44
    ef0e:	ecbd 8b02 	vpop	{d8}
    ef12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ef16:	2010      	movs	r0, #16
    ef18:	f7fe ffa2 	bl	de60 <am_hal_flash_delay>
    ef1c:	1c73      	adds	r3, r6, #1
    ef1e:	bf18      	it	ne
    ef20:	f109 0901 	addne.w	r9, r9, #1
    ef24:	454e      	cmp	r6, r9
    ef26:	d9eb      	bls.n	ef00 <am_hal_uart_transfer+0x1a4>
    ef28:	6822      	ldr	r2, [r4, #0]
    ef2a:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    ef2e:	4552      	cmp	r2, sl
    ef30:	eb0b 0508 	add.w	r5, fp, r8
    ef34:	d0cb      	beq.n	eece <am_hal_uart_transfer+0x172>
    ef36:	2502      	movs	r5, #2
    ef38:	9b01      	ldr	r3, [sp, #4]
    ef3a:	2b00      	cmp	r3, #0
    ef3c:	f43f af1a 	beq.w	ed74 <am_hal_uart_transfer+0x18>
    ef40:	f8c3 8000 	str.w	r8, [r3]
    ef44:	e716      	b.n	ed74 <am_hal_uart_transfer+0x18>
    ef46:	f7ff f959 	bl	e1fc <am_hal_interrupt_master_disable>
    ef4a:	9007      	str	r0, [sp, #28]
    ef4c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    ef4e:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    ef52:	301c      	adds	r0, #28
    ef54:	0300      	lsls	r0, r0, #12
    ef56:	f10d 0c20 	add.w	ip, sp, #32
    ef5a:	2200      	movs	r2, #0
    ef5c:	6983      	ldr	r3, [r0, #24]
    ef5e:	06db      	lsls	r3, r3, #27
    ef60:	d409      	bmi.n	ef76 <am_hal_uart_transfer+0x21a>
    ef62:	6803      	ldr	r3, [r0, #0]
    ef64:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    ef68:	f102 0201 	add.w	r2, r2, #1
    ef6c:	d119      	bne.n	efa2 <am_hal_uart_transfer+0x246>
    ef6e:	2a20      	cmp	r2, #32
    ef70:	f80c 3b01 	strb.w	r3, [ip], #1
    ef74:	d1f2      	bne.n	ef5c <am_hal_uart_transfer+0x200>
    ef76:	ee18 0a10 	vmov	r0, s16
    ef7a:	a908      	add	r1, sp, #32
    ef7c:	f000 f922 	bl	f1c4 <am_hal_queue_item_add>
    ef80:	2800      	cmp	r0, #0
    ef82:	d075      	beq.n	f070 <am_hal_uart_transfer+0x314>
    ef84:	9807      	ldr	r0, [sp, #28]
    ef86:	f7ff f93d 	bl	e204 <am_hal_interrupt_master_set>
    ef8a:	6d22      	ldr	r2, [r4, #80]	; 0x50
    ef8c:	42ba      	cmp	r2, r7
    ef8e:	bf28      	it	cs
    ef90:	463a      	movcs	r2, r7
    ef92:	ee18 0a10 	vmov	r0, s16
    ef96:	4629      	mov	r1, r5
    ef98:	4490      	add	r8, r2
    ef9a:	1abf      	subs	r7, r7, r2
    ef9c:	f000 f950 	bl	f240 <am_hal_queue_item_get>
    efa0:	e7ad      	b.n	eefe <am_hal_uart_transfer+0x1a2>
    efa2:	9807      	ldr	r0, [sp, #28]
    efa4:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    efa8:	f7ff f92c 	bl	e204 <am_hal_interrupt_master_set>
    efac:	e7c4      	b.n	ef38 <am_hal_uart_transfer+0x1dc>
    efae:	4490      	add	r8, r2
    efb0:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    efb4:	e7c0      	b.n	ef38 <am_hal_uart_transfer+0x1dc>
    efb6:	2c00      	cmp	r4, #0
    efb8:	f43f af31 	beq.w	ee1e <am_hal_uart_transfer+0xc2>
    efbc:	6822      	ldr	r2, [r4, #0]
    efbe:	492a      	ldr	r1, [pc, #168]	; (f068 <am_hal_uart_transfer+0x30c>)
    efc0:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    efc4:	428a      	cmp	r2, r1
    efc6:	f47f af2a 	bne.w	ee1e <am_hal_uart_transfer+0xc2>
    efca:	9b02      	ldr	r3, [sp, #8]
    efcc:	b10b      	cbz	r3, efd2 <am_hal_uart_transfer+0x276>
    efce:	f8c3 8000 	str.w	r8, [r3]
    efd2:	f1bb 0f00 	cmp.w	fp, #0
    efd6:	d097      	beq.n	ef08 <am_hal_uart_transfer+0x1ac>
    efd8:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
    efdc:	2d00      	cmp	r5, #0
    efde:	d151      	bne.n	f084 <am_hal_uart_transfer+0x328>
    efe0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    efe2:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    efe6:	311c      	adds	r1, #28
    efe8:	1e42      	subs	r2, r0, #1
    efea:	0309      	lsls	r1, r1, #12
    efec:	698b      	ldr	r3, [r1, #24]
    efee:	0698      	lsls	r0, r3, #26
    eff0:	d405      	bmi.n	effe <am_hal_uart_transfer+0x2a2>
    eff2:	3501      	adds	r5, #1
    eff4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    eff8:	600b      	str	r3, [r1, #0]
    effa:	45ab      	cmp	fp, r5
    effc:	d1f6      	bne.n	efec <am_hal_uart_transfer+0x290>
    effe:	9b02      	ldr	r3, [sp, #8]
    f000:	2b00      	cmp	r3, #0
    f002:	d081      	beq.n	ef08 <am_hal_uart_transfer+0x1ac>
    f004:	601d      	str	r5, [r3, #0]
    f006:	2500      	movs	r5, #0
    f008:	e6b4      	b.n	ed74 <am_hal_uart_transfer+0x18>
    f00a:	2800      	cmp	r0, #0
    f00c:	f43f af07 	beq.w	ee1e <am_hal_uart_transfer+0xc2>
    f010:	6802      	ldr	r2, [r0, #0]
    f012:	4915      	ldr	r1, [pc, #84]	; (f068 <am_hal_uart_transfer+0x30c>)
    f014:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    f018:	428a      	cmp	r2, r1
    f01a:	f47f af00 	bne.w	ee1e <am_hal_uart_transfer+0xc2>
    f01e:	b103      	cbz	r3, f022 <am_hal_uart_transfer+0x2c6>
    f020:	601d      	str	r5, [r3, #0]
    f022:	2f00      	cmp	r7, #0
    f024:	f43f af70 	beq.w	ef08 <am_hal_uart_transfer+0x1ac>
    f028:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    f02c:	2a00      	cmp	r2, #0
    f02e:	d15a      	bne.n	f0e6 <am_hal_uart_transfer+0x38a>
    f030:	6a61      	ldr	r1, [r4, #36]	; 0x24
    f032:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    f036:	311c      	adds	r1, #28
    f038:	f10b 33ff 	add.w	r3, fp, #4294967295
    f03c:	0309      	lsls	r1, r1, #12
    f03e:	4614      	mov	r4, r2
    f040:	698a      	ldr	r2, [r1, #24]
    f042:	06d2      	lsls	r2, r2, #27
    f044:	d409      	bmi.n	f05a <am_hal_uart_transfer+0x2fe>
    f046:	680a      	ldr	r2, [r1, #0]
    f048:	f412 6070 	ands.w	r0, r2, #3840	; 0xf00
    f04c:	d176      	bne.n	f13c <am_hal_uart_transfer+0x3e0>
    f04e:	3401      	adds	r4, #1
    f050:	42a7      	cmp	r7, r4
    f052:	f803 2f01 	strb.w	r2, [r3, #1]!
    f056:	d1f3      	bne.n	f040 <am_hal_uart_transfer+0x2e4>
    f058:	4605      	mov	r5, r0
    f05a:	9b01      	ldr	r3, [sp, #4]
    f05c:	2b00      	cmp	r3, #0
    f05e:	f43f ae89 	beq.w	ed74 <am_hal_uart_transfer+0x18>
    f062:	601c      	str	r4, [r3, #0]
    f064:	e686      	b.n	ed74 <am_hal_uart_transfer+0x18>
    f066:	bf00      	nop
    f068:	01ea9e06 	.word	0x01ea9e06
    f06c:	4627      	mov	r7, r4
    f06e:	e6d3      	b.n	ee18 <am_hal_uart_transfer+0xbc>
    f070:	9807      	ldr	r0, [sp, #28]
    f072:	4d39      	ldr	r5, [pc, #228]	; (f158 <am_hal_uart_transfer+0x3fc>)
    f074:	f7ff f8c6 	bl	e204 <am_hal_interrupt_master_set>
    f078:	e75e      	b.n	ef38 <am_hal_uart_transfer+0x1dc>
    f07a:	2502      	movs	r5, #2
    f07c:	4680      	mov	r8, r0
    f07e:	e75b      	b.n	ef38 <am_hal_uart_transfer+0x1dc>
    f080:	462f      	mov	r7, r5
    f082:	e6b1      	b.n	ede8 <am_hal_uart_transfer+0x8c>
    f084:	6b65      	ldr	r5, [r4, #52]	; 0x34
    f086:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    f088:	1b52      	subs	r2, r2, r5
    f08a:	455a      	cmp	r2, fp
    f08c:	f104 072c 	add.w	r7, r4, #44	; 0x2c
    f090:	4601      	mov	r1, r0
    f092:	bf28      	it	cs
    f094:	465a      	movcs	r2, fp
    f096:	4638      	mov	r0, r7
    f098:	4615      	mov	r5, r2
    f09a:	f000 f893 	bl	f1c4 <am_hal_queue_item_add>
    f09e:	6a66      	ldr	r6, [r4, #36]	; 0x24
    f0a0:	f7ff f8ac 	bl	e1fc <am_hal_interrupt_master_disable>
    f0a4:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
    f0a8:	361c      	adds	r6, #28
    f0aa:	9005      	str	r0, [sp, #20]
    f0ac:	0336      	lsls	r6, r6, #12
    f0ae:	e00f      	b.n	f0d0 <am_hal_uart_transfer+0x374>
    f0b0:	a908      	add	r1, sp, #32
    f0b2:	4638      	mov	r0, r7
    f0b4:	f000 f8c4 	bl	f240 <am_hal_queue_item_get>
    f0b8:	b178      	cbz	r0, f0da <am_hal_uart_transfer+0x37e>
    f0ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
    f0bc:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    f0c0:	321c      	adds	r2, #28
    f0c2:	0312      	lsls	r2, r2, #12
    f0c4:	6993      	ldr	r3, [r2, #24]
    f0c6:	0699      	lsls	r1, r3, #26
    f0c8:	bf5c      	itt	pl
    f0ca:	f89d 3020 	ldrbpl.w	r3, [sp, #32]
    f0ce:	6013      	strpl	r3, [r2, #0]
    f0d0:	69b3      	ldr	r3, [r6, #24]
    f0d2:	069b      	lsls	r3, r3, #26
    f0d4:	f04f 0201 	mov.w	r2, #1
    f0d8:	d5ea      	bpl.n	f0b0 <am_hal_uart_transfer+0x354>
    f0da:	9805      	ldr	r0, [sp, #20]
    f0dc:	f7ff f892 	bl	e204 <am_hal_interrupt_master_set>
    f0e0:	e78d      	b.n	effe <am_hal_uart_transfer+0x2a2>
    f0e2:	46b8      	mov	r8, r7
    f0e4:	e70c      	b.n	ef00 <am_hal_uart_transfer+0x1a4>
    f0e6:	f7ff f889 	bl	e1fc <am_hal_interrupt_master_disable>
    f0ea:	6a61      	ldr	r1, [r4, #36]	; 0x24
    f0ec:	9006      	str	r0, [sp, #24]
    f0ee:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    f0f2:	311c      	adds	r1, #28
    f0f4:	0309      	lsls	r1, r1, #12
    f0f6:	ae08      	add	r6, sp, #32
    f0f8:	2200      	movs	r2, #0
    f0fa:	698b      	ldr	r3, [r1, #24]
    f0fc:	06d8      	lsls	r0, r3, #27
    f0fe:	d409      	bmi.n	f114 <am_hal_uart_transfer+0x3b8>
    f100:	680b      	ldr	r3, [r1, #0]
    f102:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    f106:	f102 0201 	add.w	r2, r2, #1
    f10a:	d11a      	bne.n	f142 <am_hal_uart_transfer+0x3e6>
    f10c:	2a20      	cmp	r2, #32
    f10e:	f806 3b01 	strb.w	r3, [r6], #1
    f112:	d1f2      	bne.n	f0fa <am_hal_uart_transfer+0x39e>
    f114:	f104 0648 	add.w	r6, r4, #72	; 0x48
    f118:	a908      	add	r1, sp, #32
    f11a:	4630      	mov	r0, r6
    f11c:	f000 f852 	bl	f1c4 <am_hal_queue_item_add>
    f120:	b1a8      	cbz	r0, f14e <am_hal_uart_transfer+0x3f2>
    f122:	9806      	ldr	r0, [sp, #24]
    f124:	f7ff f86e 	bl	e204 <am_hal_interrupt_master_set>
    f128:	6d24      	ldr	r4, [r4, #80]	; 0x50
    f12a:	42bc      	cmp	r4, r7
    f12c:	bf28      	it	cs
    f12e:	463c      	movcs	r4, r7
    f130:	4659      	mov	r1, fp
    f132:	4630      	mov	r0, r6
    f134:	4622      	mov	r2, r4
    f136:	f000 f883 	bl	f240 <am_hal_queue_item_get>
    f13a:	e78e      	b.n	f05a <am_hal_uart_transfer+0x2fe>
    f13c:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    f140:	e78b      	b.n	f05a <am_hal_uart_transfer+0x2fe>
    f142:	9806      	ldr	r0, [sp, #24]
    f144:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    f148:	f7ff f85c 	bl	e204 <am_hal_interrupt_master_set>
    f14c:	e612      	b.n	ed74 <am_hal_uart_transfer+0x18>
    f14e:	9806      	ldr	r0, [sp, #24]
    f150:	4d01      	ldr	r5, [pc, #4]	; (f158 <am_hal_uart_transfer+0x3fc>)
    f152:	f7ff f857 	bl	e204 <am_hal_interrupt_master_set>
    f156:	e60d      	b.n	ed74 <am_hal_uart_transfer+0x18>
    f158:	08000001 	.word	0x08000001

0000f15c <am_hal_uart_tx_flush>:
    f15c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    f160:	b570      	push	{r4, r5, r6, lr}
    f162:	6a45      	ldr	r5, [r0, #36]	; 0x24
    f164:	4604      	mov	r4, r0
    f166:	b15b      	cbz	r3, f180 <am_hal_uart_tx_flush+0x24>
    f168:	6b43      	ldr	r3, [r0, #52]	; 0x34
    f16a:	b14b      	cbz	r3, f180 <am_hal_uart_tx_flush+0x24>
    f16c:	4e0e      	ldr	r6, [pc, #56]	; (f1a8 <am_hal_uart_tx_flush+0x4c>)
    f16e:	6e20      	ldr	r0, [r4, #96]	; 0x60
    f170:	fbb6 f0f0 	udiv	r0, r6, r0
    f174:	0100      	lsls	r0, r0, #4
    f176:	f7fe fe73 	bl	de60 <am_hal_flash_delay>
    f17a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    f17c:	2b00      	cmp	r3, #0
    f17e:	d1f6      	bne.n	f16e <am_hal_uart_tx_flush+0x12>
    f180:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    f184:	351c      	adds	r5, #28
    f186:	032d      	lsls	r5, r5, #12
    f188:	69ab      	ldr	r3, [r5, #24]
    f18a:	071a      	lsls	r2, r3, #28
    f18c:	d509      	bpl.n	f1a2 <am_hal_uart_tx_flush+0x46>
    f18e:	4e06      	ldr	r6, [pc, #24]	; (f1a8 <am_hal_uart_tx_flush+0x4c>)
    f190:	6e23      	ldr	r3, [r4, #96]	; 0x60
    f192:	fbb6 f3f3 	udiv	r3, r6, r3
    f196:	0118      	lsls	r0, r3, #4
    f198:	f7fe fe62 	bl	de60 <am_hal_flash_delay>
    f19c:	69ab      	ldr	r3, [r5, #24]
    f19e:	071b      	lsls	r3, r3, #28
    f1a0:	d4f6      	bmi.n	f190 <am_hal_uart_tx_flush+0x34>
    f1a2:	2000      	movs	r0, #0
    f1a4:	bd70      	pop	{r4, r5, r6, pc}
    f1a6:	bf00      	nop
    f1a8:	00b71b00 	.word	0x00b71b00

0000f1ac <am_hal_queue_init>:
    f1ac:	b410      	push	{r4}
    f1ae:	2400      	movs	r4, #0
    f1b0:	e9c0 4400 	strd	r4, r4, [r0]
    f1b4:	e9c0 4302 	strd	r4, r3, [r0, #8]
    f1b8:	e9c0 2104 	strd	r2, r1, [r0, #16]
    f1bc:	f85d 4b04 	ldr.w	r4, [sp], #4
    f1c0:	4770      	bx	lr
    f1c2:	bf00      	nop

0000f1c4 <am_hal_queue_item_add>:
    f1c4:	b570      	push	{r4, r5, r6, lr}
    f1c6:	6905      	ldr	r5, [r0, #16]
    f1c8:	b082      	sub	sp, #8
    f1ca:	4604      	mov	r4, r0
    f1cc:	fb02 f505 	mul.w	r5, r2, r5
    f1d0:	460e      	mov	r6, r1
    f1d2:	f7ff f813 	bl	e1fc <am_hal_interrupt_master_disable>
    f1d6:	68e2      	ldr	r2, [r4, #12]
    f1d8:	9001      	str	r0, [sp, #4]
    f1da:	68a0      	ldr	r0, [r4, #8]
    f1dc:	1a13      	subs	r3, r2, r0
    f1de:	42ab      	cmp	r3, r5
    f1e0:	d31c      	bcc.n	f21c <am_hal_queue_item_add+0x58>
    f1e2:	b195      	cbz	r5, f20a <am_hal_queue_item_add+0x46>
    f1e4:	6823      	ldr	r3, [r4, #0]
    f1e6:	b306      	cbz	r6, f22a <am_hal_queue_item_add+0x66>
    f1e8:	1e71      	subs	r1, r6, #1
    f1ea:	194e      	adds	r6, r1, r5
    f1ec:	6962      	ldr	r2, [r4, #20]
    f1ee:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    f1f2:	54d0      	strb	r0, [r2, r3]
    f1f4:	6823      	ldr	r3, [r4, #0]
    f1f6:	68e0      	ldr	r0, [r4, #12]
    f1f8:	3301      	adds	r3, #1
    f1fa:	428e      	cmp	r6, r1
    f1fc:	fbb3 f2f0 	udiv	r2, r3, r0
    f200:	fb00 3312 	mls	r3, r0, r2, r3
    f204:	6023      	str	r3, [r4, #0]
    f206:	d1f1      	bne.n	f1ec <am_hal_queue_item_add+0x28>
    f208:	68a0      	ldr	r0, [r4, #8]
    f20a:	4405      	add	r5, r0
    f20c:	60a5      	str	r5, [r4, #8]
    f20e:	9801      	ldr	r0, [sp, #4]
    f210:	f7fe fff8 	bl	e204 <am_hal_interrupt_master_set>
    f214:	2401      	movs	r4, #1
    f216:	4620      	mov	r0, r4
    f218:	b002      	add	sp, #8
    f21a:	bd70      	pop	{r4, r5, r6, pc}
    f21c:	9801      	ldr	r0, [sp, #4]
    f21e:	f7fe fff1 	bl	e204 <am_hal_interrupt_master_set>
    f222:	2400      	movs	r4, #0
    f224:	4620      	mov	r0, r4
    f226:	b002      	add	sp, #8
    f228:	bd70      	pop	{r4, r5, r6, pc}
    f22a:	4631      	mov	r1, r6
    f22c:	3101      	adds	r1, #1
    f22e:	3301      	adds	r3, #1
    f230:	428d      	cmp	r5, r1
    f232:	fbb3 f6f2 	udiv	r6, r3, r2
    f236:	fb02 3316 	mls	r3, r2, r6, r3
    f23a:	d1f7      	bne.n	f22c <am_hal_queue_item_add+0x68>
    f23c:	6023      	str	r3, [r4, #0]
    f23e:	e7e4      	b.n	f20a <am_hal_queue_item_add+0x46>

0000f240 <am_hal_queue_item_get>:
    f240:	b570      	push	{r4, r5, r6, lr}
    f242:	6905      	ldr	r5, [r0, #16]
    f244:	4604      	mov	r4, r0
    f246:	b082      	sub	sp, #8
    f248:	fb02 f505 	mul.w	r5, r2, r5
    f24c:	460e      	mov	r6, r1
    f24e:	f7fe ffd5 	bl	e1fc <am_hal_interrupt_master_disable>
    f252:	68a2      	ldr	r2, [r4, #8]
    f254:	9001      	str	r0, [sp, #4]
    f256:	42aa      	cmp	r2, r5
    f258:	d31c      	bcc.n	f294 <am_hal_queue_item_get+0x54>
    f25a:	b195      	cbz	r5, f282 <am_hal_queue_item_get+0x42>
    f25c:	6863      	ldr	r3, [r4, #4]
    f25e:	b306      	cbz	r6, f2a2 <am_hal_queue_item_get+0x62>
    f260:	1e71      	subs	r1, r6, #1
    f262:	194e      	adds	r6, r1, r5
    f264:	6962      	ldr	r2, [r4, #20]
    f266:	5cd3      	ldrb	r3, [r2, r3]
    f268:	f801 3f01 	strb.w	r3, [r1, #1]!
    f26c:	6863      	ldr	r3, [r4, #4]
    f26e:	68e0      	ldr	r0, [r4, #12]
    f270:	3301      	adds	r3, #1
    f272:	428e      	cmp	r6, r1
    f274:	fbb3 f2f0 	udiv	r2, r3, r0
    f278:	fb00 3312 	mls	r3, r0, r2, r3
    f27c:	6063      	str	r3, [r4, #4]
    f27e:	d1f1      	bne.n	f264 <am_hal_queue_item_get+0x24>
    f280:	68a2      	ldr	r2, [r4, #8]
    f282:	9801      	ldr	r0, [sp, #4]
    f284:	1b52      	subs	r2, r2, r5
    f286:	60a2      	str	r2, [r4, #8]
    f288:	f7fe ffbc 	bl	e204 <am_hal_interrupt_master_set>
    f28c:	2401      	movs	r4, #1
    f28e:	4620      	mov	r0, r4
    f290:	b002      	add	sp, #8
    f292:	bd70      	pop	{r4, r5, r6, pc}
    f294:	9801      	ldr	r0, [sp, #4]
    f296:	f7fe ffb5 	bl	e204 <am_hal_interrupt_master_set>
    f29a:	2400      	movs	r4, #0
    f29c:	4620      	mov	r0, r4
    f29e:	b002      	add	sp, #8
    f2a0:	bd70      	pop	{r4, r5, r6, pc}
    f2a2:	68e0      	ldr	r0, [r4, #12]
    f2a4:	4631      	mov	r1, r6
    f2a6:	3101      	adds	r1, #1
    f2a8:	3301      	adds	r3, #1
    f2aa:	42a9      	cmp	r1, r5
    f2ac:	fbb3 f6f0 	udiv	r6, r3, r0
    f2b0:	fb00 3316 	mls	r3, r0, r6, r3
    f2b4:	d1f7      	bne.n	f2a6 <am_hal_queue_item_get+0x66>
    f2b6:	6063      	str	r3, [r4, #4]
    f2b8:	e7e3      	b.n	f282 <am_hal_queue_item_get+0x42>
    f2ba:	bf00      	nop
    f2bc:	646e7553 	.word	0x646e7553
    f2c0:	00007961 	.word	0x00007961
    f2c4:	646e6f4d 	.word	0x646e6f4d
    f2c8:	00007961 	.word	0x00007961
    f2cc:	73657554 	.word	0x73657554
    f2d0:	00796164 	.word	0x00796164
    f2d4:	6e646557 	.word	0x6e646557
    f2d8:	61647365 	.word	0x61647365
    f2dc:	00000079 	.word	0x00000079
    f2e0:	72756854 	.word	0x72756854
    f2e4:	79616473 	.word	0x79616473
    f2e8:	00000000 	.word	0x00000000
    f2ec:	64697246 	.word	0x64697246
    f2f0:	00007961 	.word	0x00007961
    f2f4:	75746153 	.word	0x75746153
    f2f8:	79616472 	.word	0x79616472
    f2fc:	00000000 	.word	0x00000000
    f300:	61766e49 	.word	0x61766e49
    f304:	2064696c 	.word	0x2064696c
    f308:	00796164 	.word	0x00796164
    f30c:	756e614a 	.word	0x756e614a
    f310:	00797261 	.word	0x00797261
    f314:	72626546 	.word	0x72626546
    f318:	79726175 	.word	0x79726175
    f31c:	00000000 	.word	0x00000000
    f320:	6372614d 	.word	0x6372614d
    f324:	00000068 	.word	0x00000068
    f328:	69727041 	.word	0x69727041
    f32c:	0000006c 	.word	0x0000006c
    f330:	0079614d 	.word	0x0079614d
    f334:	656e754a 	.word	0x656e754a
    f338:	00000000 	.word	0x00000000
    f33c:	796c754a 	.word	0x796c754a
    f340:	00000000 	.word	0x00000000
    f344:	75677541 	.word	0x75677541
    f348:	00007473 	.word	0x00007473
    f34c:	74706553 	.word	0x74706553
    f350:	65626d65 	.word	0x65626d65
    f354:	00000072 	.word	0x00000072
    f358:	6f74634f 	.word	0x6f74634f
    f35c:	00726562 	.word	0x00726562
    f360:	65766f4e 	.word	0x65766f4e
    f364:	7265626d 	.word	0x7265626d
    f368:	00000000 	.word	0x00000000
    f36c:	65636544 	.word	0x65636544
    f370:	7265626d 	.word	0x7265626d
    f374:	00000000 	.word	0x00000000
    f378:	61766e49 	.word	0x61766e49
    f37c:	2064696c 	.word	0x2064696c
    f380:	746e6f6d 	.word	0x746e6f6d
    f384:	00000068 	.word	0x00000068
    f388:	343a3031 	.word	0x343a3031
    f38c:	39333a30 	.word	0x39333a30
    f390:	00000000 	.word	0x00000000
    f394:	20626546 	.word	0x20626546
    f398:	32203620 	.word	0x32203620
    f39c:	00323230 	.word	0x00323230
    f3a0:	20435452 	.word	0x20435452
    f3a4:	6e697250 	.word	0x6e697250
    f3a8:	78452074 	.word	0x78452074
    f3ac:	6c706d61 	.word	0x6c706d61
    f3b0:	00000a65 	.word	0x00000a65
    f3b4:	73696854 	.word	0x73696854
    f3b8:	61786520 	.word	0x61786520
    f3bc:	656c706d 	.word	0x656c706d
    f3c0:	73617720 	.word	0x73617720
    f3c4:	69756220 	.word	0x69756220
    f3c8:	6f20746c 	.word	0x6f20746c
    f3cc:	7325206e 	.word	0x7325206e
    f3d0:	20746120 	.word	0x20746120
    f3d4:	0a2e7325 	.word	0x0a2e7325
    f3d8:	0000000a 	.word	0x0000000a
    f3dc:	20744909 	.word	0x20744909
    f3e0:	6e207369 	.word	0x6e207369
    f3e4:	0020776f 	.word	0x0020776f
    f3e8:	3a206425 	.word	0x3a206425
    f3ec:	00000020 	.word	0x00000020
    f3f0:	64323025 	.word	0x64323025
    f3f4:	00203a20 	.word	0x00203a20
    f3f8:	64323025 	.word	0x64323025
    f3fc:	0000002e 	.word	0x0000002e
    f400:	64323025 	.word	0x64323025
    f404:	00000020 	.word	0x00000020
    f408:	00000020 	.word	0x00000020
    f40c:	202c6425 	.word	0x202c6425
    f410:	00000000 	.word	0x00000000
    f414:	30253032 	.word	0x30253032
    f418:	00006432 	.word	0x00006432
    f41c:	0a0a0a0a 	.word	0x0a0a0a0a
    f420:	0a0a0a0a 	.word	0x0a0a0a0a
    f424:	0a0a0a0a 	.word	0x0a0a0a0a
    f428:	0a0a0a0a 	.word	0x0a0a0a0a
    f42c:	00000a0a 	.word	0x00000a0a

0000f430 <am_cattr>:
	...
    f438:	20202000 00002020 00000000 00000000     .     ..........
	...
    f450:	80008020 80808080 00008080 00808000      ...............
    f460:	98989898 98989898 00009898 00000000     ................
    f470:	95959580 85959595 85858585 85858585     ................
    f480:	85858585 85858585 00858585 80800000     ................
    f490:	93939380 83939393 83838383 83838383     ................
    f4a0:	83838383 83838383 80838383 00808000     ................
	...

0000f530 <g_iDaysPerMonth>:
    f530:	0000001f 0000001c 0000001f 0000001e     ................
    f540:	0000001f 0000001e 0000001f 0000001f     ................
    f550:	0000001e 0000001f 0000001e 0000001f     ................

0000f560 <g_iMonthOffsets>:
    f560:	00000004 00000000 00000000 00000003     ................
    f570:	00000005 00000001 00000003 00000006     ................
    f580:	00000002 00000004 00000000 00000002     ................

0000f590 <g_sBspUartConfig>:
    f590:	0001c200 00000060 00000000 00000000     ....`...........
    f5a0:	00000000 00000012 00000000 00000000     ................
	...

0000f5b8 <g_AM_BSP_GPIO_COM_UART_RX>:
    f5b8:	00000000                                ....

0000f5bc <g_AM_BSP_GPIO_COM_UART_TX>:
    f5bc:	00000000                                ....

0000f5c0 <g_AM_BSP_GPIO_ITM_SWO>:
    f5c0:	00000002                                ....

0000f5c4 <am_hal_cachectrl_defaults>:
    f5c4:	00000308                                ....

0000f5c8 <g_AM_HAL_GPIO_DISABLE>:
    f5c8:	00000003                                ....

0000f5cc <g_AM_HAL_GPIO_OUTPUT>:
    f5cc:	00000403                                ....

0000f5d0 <g_ui8Bit76Capabilities>:
    f5d0:	02800101 80010180 80800101 80808080     ................
    f5e0:	80808080 80808008 01800180 80808080     ................
    f5f0:	80808080 01800402 01010401 80808080     ................
    f600:	00000101                                ....

0000f604 <g_ui8Inpen>:
    f604:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
    f614:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
    f624:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
    f634:	00003130                                01..

0000f638 <g_ui8NCEtable>:
    f638:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    f648:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    f658:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    f668:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    f678:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    f688:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    f698:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    f6a8:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    f6b8:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    f6c8:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    f6d8:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    f6e8:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    f6f8:	32221202 43231303                       .."2..#C

0000f700 <g_ui8nCEpins>:
    f700:	02070707 00080802 01020202 01010101     ................
    f710:	01010101 01010101 01010101 01010101     ................
    f720:	01010101 08010101 01010008 01010101     ................
    f730:	00000101                                ....

0000f734 <g_am_hal_mcuctrl_flash_size>:
    f734:	00004000 00008000 00010000 00020000     .@..............
    f744:	00040000 00080000 00100000 00200000     .............. .
    f754:	00180000 00000000 00000000 00000000     ................
	...

0000f774 <g_am_hal_mcuctrl_sram_size>:
    f774:	00004000 00008000 00010000 00020000     .@..............
    f784:	00040000 00080000 00100000 00060000     ................
    f794:	000c0000 00000000 00000000 00000000     ................
	...

0000f7b4 <am_hal_pwrctrl_peripheral_control>:
	...
    f7c0:	00000001 00000004 00000004 00000002     ................
    f7d0:	00000008 00000008 00000004 00000008     ................
    f7e0:	00000008 00000008 00000008 00000008     ................
    f7f0:	00000010 00000010 00000010 00000020     ............ ...
    f800:	00000010 00000010 00000040 00000010     ........@.......
    f810:	00000010 00000080 00000004 00000004     ................
    f820:	00000100 00000004 00000004 00000200     ................
    f830:	00000020 00000020 00000400 00000004      ... ...........
    f840:	00000004 00000800 00000040 00000040     ........@...@...
    f850:	00001000 00000080 00000080 00002000     ............. ..
    f860:	00000100 00000100                       ........

0000f868 <CSWTCH.20>:
    f868:	016e3600 00b71b00 005b8d80 002dc6c0     .6n.......[...-.
