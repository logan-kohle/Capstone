
bin/uart_boot_host.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 0d da 00 00 75 da 00 00 b1 cb 00 00     ........u.......
    c010:	77 da 00 00 77 da 00 00 77 da 00 00 00 00 00 00     w...w...w.......
	...
    c02c:	79 da 00 00 79 da 00 00 00 00 00 00 79 da 00 00     y...y.......y...
    c03c:	79 da 00 00 79 da 00 00 79 da 00 00 79 da 00 00     y...y...y...y...
    c04c:	79 da 00 00 79 da 00 00 79 da 00 00 79 da 00 00     y...y...y...y...
    c05c:	79 da 00 00 79 da 00 00 79 da 00 00 79 da 00 00     y...y...y...y...
    c06c:	79 da 00 00 79 da 00 00 f5 c3 00 00 79 da 00 00     y...y.......y...
    c07c:	59 c3 00 00 79 da 00 00 79 da 00 00 79 da 00 00     Y...y...y...y...
    c08c:	79 da 00 00 79 da 00 00 79 da 00 00 79 da 00 00     y...y...y...y...
    c09c:	79 da 00 00 79 da 00 00 79 da 00 00 79 da 00 00     y...y...y...y...
    c0ac:	79 da 00 00 79 da 00 00 79 da 00 00 79 da 00 00     y...y...y...y...
    c0bc:	79 da 00 00                                         y...

0000c0c0 <__Patchable>:
	...

0000c100 <memcpy>:
    c100:	4684      	mov	ip, r0
    c102:	ea41 0300 	orr.w	r3, r1, r0
    c106:	f013 0303 	ands.w	r3, r3, #3
    c10a:	d16d      	bne.n	c1e8 <memcpy+0xe8>
    c10c:	3a40      	subs	r2, #64	; 0x40
    c10e:	d341      	bcc.n	c194 <memcpy+0x94>
    c110:	f851 3b04 	ldr.w	r3, [r1], #4
    c114:	f840 3b04 	str.w	r3, [r0], #4
    c118:	f851 3b04 	ldr.w	r3, [r1], #4
    c11c:	f840 3b04 	str.w	r3, [r0], #4
    c120:	f851 3b04 	ldr.w	r3, [r1], #4
    c124:	f840 3b04 	str.w	r3, [r0], #4
    c128:	f851 3b04 	ldr.w	r3, [r1], #4
    c12c:	f840 3b04 	str.w	r3, [r0], #4
    c130:	f851 3b04 	ldr.w	r3, [r1], #4
    c134:	f840 3b04 	str.w	r3, [r0], #4
    c138:	f851 3b04 	ldr.w	r3, [r1], #4
    c13c:	f840 3b04 	str.w	r3, [r0], #4
    c140:	f851 3b04 	ldr.w	r3, [r1], #4
    c144:	f840 3b04 	str.w	r3, [r0], #4
    c148:	f851 3b04 	ldr.w	r3, [r1], #4
    c14c:	f840 3b04 	str.w	r3, [r0], #4
    c150:	f851 3b04 	ldr.w	r3, [r1], #4
    c154:	f840 3b04 	str.w	r3, [r0], #4
    c158:	f851 3b04 	ldr.w	r3, [r1], #4
    c15c:	f840 3b04 	str.w	r3, [r0], #4
    c160:	f851 3b04 	ldr.w	r3, [r1], #4
    c164:	f840 3b04 	str.w	r3, [r0], #4
    c168:	f851 3b04 	ldr.w	r3, [r1], #4
    c16c:	f840 3b04 	str.w	r3, [r0], #4
    c170:	f851 3b04 	ldr.w	r3, [r1], #4
    c174:	f840 3b04 	str.w	r3, [r0], #4
    c178:	f851 3b04 	ldr.w	r3, [r1], #4
    c17c:	f840 3b04 	str.w	r3, [r0], #4
    c180:	f851 3b04 	ldr.w	r3, [r1], #4
    c184:	f840 3b04 	str.w	r3, [r0], #4
    c188:	f851 3b04 	ldr.w	r3, [r1], #4
    c18c:	f840 3b04 	str.w	r3, [r0], #4
    c190:	3a40      	subs	r2, #64	; 0x40
    c192:	d2bd      	bcs.n	c110 <memcpy+0x10>
    c194:	3230      	adds	r2, #48	; 0x30
    c196:	d311      	bcc.n	c1bc <memcpy+0xbc>
    c198:	f851 3b04 	ldr.w	r3, [r1], #4
    c19c:	f840 3b04 	str.w	r3, [r0], #4
    c1a0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1a4:	f840 3b04 	str.w	r3, [r0], #4
    c1a8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1ac:	f840 3b04 	str.w	r3, [r0], #4
    c1b0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1b4:	f840 3b04 	str.w	r3, [r0], #4
    c1b8:	3a10      	subs	r2, #16
    c1ba:	d2ed      	bcs.n	c198 <memcpy+0x98>
    c1bc:	320c      	adds	r2, #12
    c1be:	d305      	bcc.n	c1cc <memcpy+0xcc>
    c1c0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1c4:	f840 3b04 	str.w	r3, [r0], #4
    c1c8:	3a04      	subs	r2, #4
    c1ca:	d2f9      	bcs.n	c1c0 <memcpy+0xc0>
    c1cc:	3204      	adds	r2, #4
    c1ce:	d008      	beq.n	c1e2 <memcpy+0xe2>
    c1d0:	07d2      	lsls	r2, r2, #31
    c1d2:	bf1c      	itt	ne
    c1d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c1d8:	f800 3b01 	strbne.w	r3, [r0], #1
    c1dc:	d301      	bcc.n	c1e2 <memcpy+0xe2>
    c1de:	880b      	ldrh	r3, [r1, #0]
    c1e0:	8003      	strh	r3, [r0, #0]
    c1e2:	4660      	mov	r0, ip
    c1e4:	4770      	bx	lr
    c1e6:	bf00      	nop
    c1e8:	2a08      	cmp	r2, #8
    c1ea:	d313      	bcc.n	c214 <memcpy+0x114>
    c1ec:	078b      	lsls	r3, r1, #30
    c1ee:	d08d      	beq.n	c10c <memcpy+0xc>
    c1f0:	f010 0303 	ands.w	r3, r0, #3
    c1f4:	d08a      	beq.n	c10c <memcpy+0xc>
    c1f6:	f1c3 0304 	rsb	r3, r3, #4
    c1fa:	1ad2      	subs	r2, r2, r3
    c1fc:	07db      	lsls	r3, r3, #31
    c1fe:	bf1c      	itt	ne
    c200:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c204:	f800 3b01 	strbne.w	r3, [r0], #1
    c208:	d380      	bcc.n	c10c <memcpy+0xc>
    c20a:	f831 3b02 	ldrh.w	r3, [r1], #2
    c20e:	f820 3b02 	strh.w	r3, [r0], #2
    c212:	e77b      	b.n	c10c <memcpy+0xc>
    c214:	3a04      	subs	r2, #4
    c216:	d3d9      	bcc.n	c1cc <memcpy+0xcc>
    c218:	3a01      	subs	r2, #1
    c21a:	f811 3b01 	ldrb.w	r3, [r1], #1
    c21e:	f800 3b01 	strb.w	r3, [r0], #1
    c222:	d2f9      	bcs.n	c218 <memcpy+0x118>
    c224:	780b      	ldrb	r3, [r1, #0]
    c226:	7003      	strb	r3, [r0, #0]
    c228:	784b      	ldrb	r3, [r1, #1]
    c22a:	7043      	strb	r3, [r0, #1]
    c22c:	788b      	ldrb	r3, [r1, #2]
    c22e:	7083      	strb	r3, [r0, #2]
    c230:	4660      	mov	r0, ip
    c232:	4770      	bx	lr

0000c234 <__aeabi_d2f>:
    c234:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c238:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c23c:	bf24      	itt	cs
    c23e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c242:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c246:	d90d      	bls.n	c264 <__aeabi_d2f+0x30>
    c248:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c24c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c250:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c254:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c258:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c25c:	bf08      	it	eq
    c25e:	f020 0001 	biceq.w	r0, r0, #1
    c262:	4770      	bx	lr
    c264:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c268:	d121      	bne.n	c2ae <__aeabi_d2f+0x7a>
    c26a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c26e:	bfbc      	itt	lt
    c270:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c274:	4770      	bxlt	lr
    c276:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c27a:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c27e:	f1c2 0218 	rsb	r2, r2, #24
    c282:	f1c2 0c20 	rsb	ip, r2, #32
    c286:	fa10 f30c 	lsls.w	r3, r0, ip
    c28a:	fa20 f002 	lsr.w	r0, r0, r2
    c28e:	bf18      	it	ne
    c290:	f040 0001 	orrne.w	r0, r0, #1
    c294:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c298:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c29c:	fa03 fc0c 	lsl.w	ip, r3, ip
    c2a0:	ea40 000c 	orr.w	r0, r0, ip
    c2a4:	fa23 f302 	lsr.w	r3, r3, r2
    c2a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c2ac:	e7cc      	b.n	c248 <__aeabi_d2f+0x14>
    c2ae:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c2b2:	d107      	bne.n	c2c4 <__aeabi_d2f+0x90>
    c2b4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c2b8:	bf1e      	ittt	ne
    c2ba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c2be:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c2c2:	4770      	bxne	lr
    c2c4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c2c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c2cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c2d0:	4770      	bx	lr
    c2d2:	bf00      	nop

0000c2d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    c2d4:	b082      	sub	sp, #8
    c2d6:	4603      	mov	r3, r0
    c2d8:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
    c2dc:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c2e0:	2b00      	cmp	r3, #0
    c2e2:	db0c      	blt.n	c2fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c2e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c2e8:	f003 021f 	and.w	r2, r3, #31
    c2ec:	4905      	ldr	r1, [pc, #20]	; (c304 <__NVIC_EnableIRQ+0x30>)
    c2ee:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c2f2:	095b      	lsrs	r3, r3, #5
    c2f4:	2001      	movs	r0, #1
    c2f6:	fa00 f202 	lsl.w	r2, r0, r2
    c2fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
    c2fe:	bf00      	nop
    c300:	b002      	add	sp, #8
    c302:	4770      	bx	lr
    c304:	e000e100 	.word	0xe000e100

0000c308 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    c308:	b082      	sub	sp, #8
    c30a:	4603      	mov	r3, r0
    c30c:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
    c310:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c314:	2b00      	cmp	r3, #0
    c316:	db13      	blt.n	c340 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c318:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c31c:	f003 021f 	and.w	r2, r3, #31
    c320:	4909      	ldr	r1, [pc, #36]	; (c348 <__NVIC_DisableIRQ+0x40>)
    c322:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c326:	095b      	lsrs	r3, r3, #5
    c328:	2001      	movs	r0, #1
    c32a:	fa00 f202 	lsl.w	r2, r0, r2
    c32e:	3320      	adds	r3, #32
    c330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    c334:	f3bf 8f4f 	dsb	sy
}
    c338:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
    c33a:	f3bf 8f6f 	isb	sy
}
    c33e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
    c340:	bf00      	nop
    c342:	b002      	add	sp, #8
    c344:	4770      	bx	lr
    c346:	bf00      	nop
    c348:	e000e100 	.word	0xe000e100

0000c34c <no_print>:
//
// no_print
//
//*****************************************************************************
int no_print(char*pFmtStr, ...)
{
    c34c:	b40f      	push	{r0, r1, r2, r3}
    return 0;
    c34e:	2300      	movs	r3, #0
}
    c350:	4618      	mov	r0, r3
    c352:	b004      	add	sp, #16
    c354:	4770      	bx	lr
	...

0000c358 <am_uart_isr>:
#if UART_HOST == 0
void am_uart_isr(void)
#else
void am_uart1_isr(void)
#endif
{
    c358:	b500      	push	{lr}
    c35a:	b089      	sub	sp, #36	; 0x24
    uint32_t ui32Status;

    //
    // Read the masked interrupt status from the UART.
    //
    am_hal_uart_interrupt_status_get(g_pvUART, &ui32Status, true);
    c35c:	4b21      	ldr	r3, [pc, #132]	; (c3e4 <am_uart_isr+0x8c>)
    c35e:	681b      	ldr	r3, [r3, #0]
    c360:	a907      	add	r1, sp, #28
    c362:	2201      	movs	r2, #1
    c364:	4618      	mov	r0, r3
    c366:	f003 fd2d 	bl	fdc4 <am_hal_uart_interrupt_status_get>
    am_hal_uart_interrupt_clear(g_pvUART, ui32Status);
    c36a:	4b1e      	ldr	r3, [pc, #120]	; (c3e4 <am_uart_isr+0x8c>)
    c36c:	681b      	ldr	r3, [r3, #0]
    c36e:	9a07      	ldr	r2, [sp, #28]
    c370:	4611      	mov	r1, r2
    c372:	4618      	mov	r0, r3
    c374:	f003 fd14 	bl	fda0 <am_hal_uart_interrupt_clear>
    am_hal_uart_interrupt_service(g_pvUART, ui32Status, 0);
    c378:	4b1a      	ldr	r3, [pc, #104]	; (c3e4 <am_uart_isr+0x8c>)
    c37a:	681b      	ldr	r3, [r3, #0]
    c37c:	9907      	ldr	r1, [sp, #28]
    c37e:	2200      	movs	r2, #0
    c380:	4618      	mov	r0, r3
    c382:	f003 fc5d 	bl	fc40 <am_hal_uart_interrupt_service>

    //
    // If there's an RX interrupt, handle it in a way that preserves the
    // timeout interrupt on gaps between packets.
    //
    if (ui32Status & (AM_HAL_UART_INT_RX_TMOUT | AM_HAL_UART_INT_RX))
    c386:	9b07      	ldr	r3, [sp, #28]
    c388:	f003 0350 	and.w	r3, r3, #80	; 0x50
    c38c:	2b00      	cmp	r3, #0
    c38e:	d024      	beq.n	c3da <am_uart_isr+0x82>
    {
        uint32_t ui32BytesRead;

        am_hal_uart_transfer_t sRead =
    c390:	2301      	movs	r3, #1
    c392:	9301      	str	r3, [sp, #4]
        {
            .ui32Direction = AM_HAL_UART_READ,
            .pui8Data = (uint8_t *) &(g_psWriteData.bytes[g_ui32UARTRxIndex]),
    c394:	4b14      	ldr	r3, [pc, #80]	; (c3e8 <am_uart_isr+0x90>)
    c396:	681b      	ldr	r3, [r3, #0]
    c398:	4a14      	ldr	r2, [pc, #80]	; (c3ec <am_uart_isr+0x94>)
    c39a:	4413      	add	r3, r2
        am_hal_uart_transfer_t sRead =
    c39c:	9302      	str	r3, [sp, #8]
    c39e:	2317      	movs	r3, #23
    c3a0:	9303      	str	r3, [sp, #12]
    c3a2:	2300      	movs	r3, #0
    c3a4:	9304      	str	r3, [sp, #16]
    c3a6:	ab06      	add	r3, sp, #24
    c3a8:	9305      	str	r3, [sp, #20]
            .ui32NumBytes = 23,
            .ui32TimeoutMs = 0,
            .pui32BytesTransferred = &ui32BytesRead,
        };

        am_hal_uart_transfer(g_pvUART, &sRead);
    c3aa:	4b0e      	ldr	r3, [pc, #56]	; (c3e4 <am_uart_isr+0x8c>)
    c3ac:	681b      	ldr	r3, [r3, #0]
    c3ae:	aa01      	add	r2, sp, #4
    c3b0:	4611      	mov	r1, r2
    c3b2:	4618      	mov	r0, r3
    c3b4:	f003 fa44 	bl	f840 <am_hal_uart_transfer>

        g_ui32UARTRxIndex += ui32BytesRead;
    c3b8:	4b0b      	ldr	r3, [pc, #44]	; (c3e8 <am_uart_isr+0x90>)
    c3ba:	681a      	ldr	r2, [r3, #0]
    c3bc:	9b06      	ldr	r3, [sp, #24]
    c3be:	4413      	add	r3, r2
    c3c0:	4a09      	ldr	r2, [pc, #36]	; (c3e8 <am_uart_isr+0x90>)
    c3c2:	6013      	str	r3, [r2, #0]

        //
        // If there is a TMOUT interrupt, assume we have a compete packet, and
        // send it over SPI.
        //
        if (ui32Status & (AM_HAL_UART_INT_RX_TMOUT))
    c3c4:	9b07      	ldr	r3, [sp, #28]
    c3c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c3ca:	2b00      	cmp	r3, #0
    c3cc:	d005      	beq.n	c3da <am_uart_isr+0x82>
        {
            NVIC_DisableIRQ((IRQn_Type)(UART0_IRQn + UART_HOST));
    c3ce:	200f      	movs	r0, #15
    c3d0:	f7ff ff9a 	bl	c308 <__NVIC_DisableIRQ>
            g_bRxTimeoutFlag = true;
    c3d4:	4b06      	ldr	r3, [pc, #24]	; (c3f0 <am_uart_isr+0x98>)
    c3d6:	2201      	movs	r2, #1
    c3d8:	701a      	strb	r2, [r3, #0]
        }
    }
}
    c3da:	bf00      	nop
    c3dc:	b009      	add	sp, #36	; 0x24
    c3de:	f85d fb04 	ldr.w	pc, [sp], #4
    c3e2:	bf00      	nop
    c3e4:	100078e4 	.word	0x100078e4
    c3e8:	100078d8 	.word	0x100078d8
    c3ec:	10001860 	.word	0x10001860
    c3f0:	100078dc 	.word	0x100078dc

0000c3f4 <am_gpio_isr>:
//
// Interrupt handler for the GPIO pins.
//
//*****************************************************************************
void am_gpio_isr(void)
{
    c3f4:	b500      	push	{lr}
    c3f6:	b083      	sub	sp, #12
    am_hal_gpio_interrupt_clear(pGpioIntStatusMask);
    am_hal_gpio_interrupt_service(pGpioIntStatusMask);
#elif defined(AM_PART_APOLLO3)
    uint64_t ui64Status;

    am_hal_gpio_interrupt_status_get(false, &ui64Status);
    c3f8:	466b      	mov	r3, sp
    c3fa:	4619      	mov	r1, r3
    c3fc:	2000      	movs	r0, #0
    c3fe:	f001 ffcf 	bl	e3a0 <am_hal_gpio_interrupt_status_get>
    am_hal_gpio_interrupt_clear(ui64Status);
    c402:	e9dd 2300 	ldrd	r2, r3, [sp]
    c406:	4610      	mov	r0, r2
    c408:	4619      	mov	r1, r3
    c40a:	f001 ffaf 	bl	e36c <am_hal_gpio_interrupt_clear>
    am_hal_gpio_interrupt_service(ui64Status);
    c40e:	e9dd 2300 	ldrd	r2, r3, [sp]
    c412:	4610      	mov	r0, r2
    c414:	4619      	mov	r1, r3
    c416:	f001 fff3 	bl	e400 <am_hal_gpio_interrupt_service>
#else
    #error Unknown device.
#endif
}
    c41a:	bf00      	nop
    c41c:	b003      	add	sp, #12
    c41e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000c424 <hostint_handler>:

// ISR callback for the host IOINT
static void hostint_handler(void)
{
    bIosInt = true;
    c424:	4b02      	ldr	r3, [pc, #8]	; (c430 <hostint_handler+0xc>)
    c426:	2201      	movs	r2, #1
    c428:	701a      	strb	r2, [r3, #0]
}
    c42a:	bf00      	nop
    c42c:	4770      	bx	lr
    c42e:	bf00      	nop
    c430:	100078dd 	.word	0x100078dd

0000c434 <iom_set_up>:
//
// Initialize the IOM.
//
//*****************************************************************************
static void iom_set_up(uint32_t iomModule, bool bSpi)
{
    c434:	b500      	push	{lr}
    c436:	b085      	sub	sp, #20
    c438:	9001      	str	r0, [sp, #4]
    c43a:	460b      	mov	r3, r1
    c43c:	f88d 3003 	strb.w	r3, [sp, #3]
    //
    // Initialize the IOM.
    //
    am_hal_iom_initialize(iomModule, &g_IOMHandle);
    c440:	4929      	ldr	r1, [pc, #164]	; (c4e8 <iom_set_up+0xb4>)
    c442:	9801      	ldr	r0, [sp, #4]
    c444:	f002 f8c4 	bl	e5d0 <am_hal_iom_initialize>

    am_hal_iom_power_ctrl(g_IOMHandle, AM_HAL_SYSCTRL_WAKE, false);
    c448:	4b27      	ldr	r3, [pc, #156]	; (c4e8 <iom_set_up+0xb4>)
    c44a:	681b      	ldr	r3, [r3, #0]
    c44c:	2200      	movs	r2, #0
    c44e:	2100      	movs	r1, #0
    c450:	4618      	mov	r0, r3
    c452:	f002 f951 	bl	e6f8 <am_hal_iom_power_ctrl>

    if ( bSpi )
    c456:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c45a:	2b00      	cmp	r3, #0
    c45c:	d00a      	beq.n	c474 <iom_set_up+0x40>
    {
        //
        // Configure the IOM for SPI.
        //
        am_hal_iom_configure(g_IOMHandle, &g_sIOMSpiConfig);
    c45e:	4b22      	ldr	r3, [pc, #136]	; (c4e8 <iom_set_up+0xb4>)
    c460:	681b      	ldr	r3, [r3, #0]
    c462:	4922      	ldr	r1, [pc, #136]	; (c4ec <iom_set_up+0xb8>)
    c464:	4618      	mov	r0, r3
    c466:	f002 fa1f 	bl	e8a8 <am_hal_iom_configure>

        //
        // Configure the IOM pins.
        //
        am_bsp_iom_pins_enable(iomModule, AM_HAL_IOM_SPI_MODE);
    c46a:	2100      	movs	r1, #0
    c46c:	9801      	ldr	r0, [sp, #4]
    c46e:	f001 fb45 	bl	dafc <am_bsp_iom_pins_enable>
    c472:	e009      	b.n	c488 <iom_set_up+0x54>
    else
    {
        //
        // Configure the IOM for I2C.
        //
        am_hal_iom_configure(g_IOMHandle, &g_sIOMI2cConfig);
    c474:	4b1c      	ldr	r3, [pc, #112]	; (c4e8 <iom_set_up+0xb4>)
    c476:	681b      	ldr	r3, [r3, #0]
    c478:	491d      	ldr	r1, [pc, #116]	; (c4f0 <iom_set_up+0xbc>)
    c47a:	4618      	mov	r0, r3
    c47c:	f002 fa14 	bl	e8a8 <am_hal_iom_configure>

        //
        // Configure the IOM pins.
        //
        am_bsp_iom_pins_enable(iomModule, AM_HAL_IOM_I2C_MODE);
    c480:	2101      	movs	r1, #1
    c482:	9801      	ldr	r0, [sp, #4]
    c484:	f001 fb3a 	bl	dafc <am_bsp_iom_pins_enable>
    }

    //
    // Enable the IOM.
    //
    am_hal_iom_enable(g_IOMHandle);
    c488:	4b17      	ldr	r3, [pc, #92]	; (c4e8 <iom_set_up+0xb4>)
    c48a:	681b      	ldr	r3, [r3, #0]
    c48c:	4618      	mov	r0, r3
    c48e:	f002 f8c7 	bl	e620 <am_hal_iom_enable>

    //
    // Set up the host IO interrupt
    //
    am_hal_gpio_pinconfig(BOOTLOADER_HANDSHAKE_PIN, g_AM_BSP_GPIO_BOOT_HANDSHAKE);
    c492:	4b18      	ldr	r3, [pc, #96]	; (c4f4 <iom_set_up+0xc0>)
    c494:	6819      	ldr	r1, [r3, #0]
    c496:	2002      	movs	r0, #2
    c498:	f001 fd98 	bl	dfcc <am_hal_gpio_pinconfig>

    AM_HAL_GPIO_MASKCREATE(GpioIntMask);
    c49c:	f04f 0200 	mov.w	r2, #0
    c4a0:	f04f 0300 	mov.w	r3, #0
    c4a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_MASKBIT(pGpioIntMask, BOOTLOADER_HANDSHAKE_PIN));
    c4a8:	f04f 0204 	mov.w	r2, #4
    c4ac:	f04f 0300 	mov.w	r3, #0
    c4b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    c4b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c4b8:	f001 ff58 	bl	e36c <am_hal_gpio_interrupt_clear>

    //
    // Register handler for IOS => IOM interrupt
    //
    am_hal_gpio_interrupt_register(BOOTLOADER_HANDSHAKE_PIN, hostint_handler);
    c4bc:	490e      	ldr	r1, [pc, #56]	; (c4f8 <iom_set_up+0xc4>)
    c4be:	2002      	movs	r0, #2
    c4c0:	f001 ff8e 	bl	e3e0 <am_hal_gpio_interrupt_register>
    am_hal_gpio_interrupt_enable(AM_HAL_GPIO_MASKBIT(pGpioIntMask, BOOTLOADER_HANDSHAKE_PIN));
    c4c4:	f04f 0204 	mov.w	r2, #4
    c4c8:	f04f 0300 	mov.w	r3, #0
    c4cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
    c4d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c4d4:	f001 ff2a 	bl	e32c <am_hal_gpio_interrupt_enable>
    NVIC_EnableIRQ(GPIO_IRQn);
    c4d8:	200d      	movs	r0, #13
    c4da:	f7ff fefb 	bl	c2d4 <__NVIC_EnableIRQ>
}
    c4de:	bf00      	nop
    c4e0:	b005      	add	sp, #20
    c4e2:	f85d fb04 	ldr.w	pc, [sp], #4
    c4e6:	bf00      	nop
    c4e8:	100078e0 	.word	0x100078e0
    c4ec:	10001018 	.word	0x10001018
    c4f0:	10001004 	.word	0x10001004
    c4f4:	10001000 	.word	0x10001000
    c4f8:	0000c425 	.word	0x0000c425

0000c4fc <uart_set_up>:
//
// Initialize the UART.
//
//*****************************************************************************
static void uart_set_up(uint32_t UARTNum)
{
    c4fc:	b530      	push	{r4, r5, lr}
    c4fe:	b08d      	sub	sp, #52	; 0x34
    c500:	9001      	str	r0, [sp, #4]
    //
    // Start the UART.
    //
    am_hal_uart_config_t sUartConfig =
    c502:	4b1d      	ldr	r3, [pc, #116]	; (c578 <uart_set_up+0x7c>)
    c504:	ac02      	add	r4, sp, #8
    c506:	461d      	mov	r5, r3
    c508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c50a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c50c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c50e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c510:	e895 0003 	ldmia.w	r5, {r0, r1}
    c514:	e884 0003 	stmia.w	r4, {r0, r1}
        .ui32TxBufferSize = sizeof(g_pui8UARTTXBuffer),
        .pui8RxBuffer = 0,
        .ui32RxBufferSize = 0,
    };

    am_hal_uart_initialize(UARTNum, &g_pvUART);
    c518:	4918      	ldr	r1, [pc, #96]	; (c57c <uart_set_up+0x80>)
    c51a:	9801      	ldr	r0, [sp, #4]
    c51c:	f002 fff2 	bl	f504 <am_hal_uart_initialize>
    am_hal_uart_power_control(g_pvUART, AM_HAL_SYSCTRL_WAKE, false);
    c520:	4b16      	ldr	r3, [pc, #88]	; (c57c <uart_set_up+0x80>)
    c522:	681b      	ldr	r3, [r3, #0]
    c524:	2200      	movs	r2, #0
    c526:	2100      	movs	r1, #0
    c528:	4618      	mov	r0, r3
    c52a:	f003 f813 	bl	f554 <am_hal_uart_power_control>
    am_hal_uart_configure(g_pvUART, &sUartConfig);
    c52e:	4b13      	ldr	r3, [pc, #76]	; (c57c <uart_set_up+0x80>)
    c530:	681b      	ldr	r3, [r3, #0]
    c532:	aa02      	add	r2, sp, #8
    c534:	4611      	mov	r1, r2
    c536:	4618      	mov	r0, r3
    c538:	f003 f884 	bl	f644 <am_hal_uart_configure>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_TX, g_AM_BSP_GPIO_COM_UART_TX);
    c53c:	4b10      	ldr	r3, [pc, #64]	; (c580 <uart_set_up+0x84>)
    c53e:	6819      	ldr	r1, [r3, #0]
    c540:	2016      	movs	r0, #22
    c542:	f001 fd43 	bl	dfcc <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_RX, g_AM_BSP_GPIO_COM_UART_RX);
    c546:	4b0f      	ldr	r3, [pc, #60]	; (c584 <uart_set_up+0x88>)
    c548:	6819      	ldr	r1, [r3, #0]
    c54a:	2017      	movs	r0, #23
    c54c:	f001 fd3e 	bl	dfcc <am_hal_gpio_pinconfig>

    //
    // Make sure to enable the interrupts for RX, since the HAL doesn't already
    // know we intend to use them.
    //
    NVIC_EnableIRQ((IRQn_Type)(UART0_IRQn + UARTNum));
    c550:	9b01      	ldr	r3, [sp, #4]
    c552:	b2db      	uxtb	r3, r3
    c554:	330f      	adds	r3, #15
    c556:	b2db      	uxtb	r3, r3
    c558:	b25b      	sxtb	r3, r3
    c55a:	4618      	mov	r0, r3
    c55c:	f7ff feba 	bl	c2d4 <__NVIC_EnableIRQ>
    am_hal_uart_interrupt_enable(g_pvUART, (AM_HAL_UART_INT_RX |
    c560:	4b06      	ldr	r3, [pc, #24]	; (c57c <uart_set_up+0x80>)
    c562:	681b      	ldr	r3, [r3, #0]
    c564:	2150      	movs	r1, #80	; 0x50
    c566:	4618      	mov	r0, r3
    c568:	f003 fc06 	bl	fd78 <am_hal_uart_interrupt_enable>
                                 AM_HAL_UART_INT_RX_TMOUT));

    am_hal_interrupt_master_enable();
    c56c:	f001 ffa6 	bl	e4bc <am_hal_interrupt_master_enable>
}
    c570:	bf00      	nop
    c572:	b00d      	add	sp, #52	; 0x34
    c574:	bd30      	pop	{r4, r5, pc}
    c576:	bf00      	nop
    c578:	000102ec 	.word	0x000102ec
    c57c:	100078e4 	.word	0x100078e4
    c580:	0001049c 	.word	0x0001049c
    c584:	00010498 	.word	0x00010498

0000c588 <USE_SPI_get>:
//
// Initialize the UART.
//
//*****************************************************************************
static bool USE_SPI_get(void)
{
    c588:	b500      	push	{lr}
    c58a:	b083      	sub	sp, #12
    uint32_t ui32Pinval;

    //
    // Configure the pin as input with a pullup.
    //
    am_hal_gpio_pinconfig(USE_SPI_PIN, g_AM_HAL_GPIO_INPUT_PULLUP);
    c58c:	4b0e      	ldr	r3, [pc, #56]	; (c5c8 <USE_SPI_get+0x40>)
    c58e:	6819      	ldr	r1, [r3, #0]
    c590:	2013      	movs	r0, #19
    c592:	f001 fd1b 	bl	dfcc <am_hal_gpio_pinconfig>

    //
    // Short delay for the pin configuration.
    //
    am_util_delay_us(5);
    c596:	2005      	movs	r0, #5
    c598:	f000 faee 	bl	cb78 <am_util_delay_us>

    //
    // If the pin is not pulled down, assume SPI.
    //
    am_hal_gpio_state_read(USE_SPI_PIN, AM_HAL_GPIO_INPUT_READ, &ui32Pinval);
    c59c:	ab01      	add	r3, sp, #4
    c59e:	461a      	mov	r2, r3
    c5a0:	2100      	movs	r1, #0
    c5a2:	2013      	movs	r0, #19
    c5a4:	f001 fe48 	bl	e238 <am_hal_gpio_state_read>

    //
    // Done with the pin.
    //
    am_hal_gpio_pinconfig(USE_SPI_PIN, g_AM_HAL_GPIO_DISABLE);
    c5a8:	4b08      	ldr	r3, [pc, #32]	; (c5cc <USE_SPI_get+0x44>)
    c5aa:	6819      	ldr	r1, [r3, #0]
    c5ac:	2013      	movs	r0, #19
    c5ae:	f001 fd0d 	bl	dfcc <am_hal_gpio_pinconfig>

    return ui32Pinval ? true : false;
    c5b2:	9b01      	ldr	r3, [sp, #4]
    c5b4:	2b00      	cmp	r3, #0
    c5b6:	bf14      	ite	ne
    c5b8:	2301      	movne	r3, #1
    c5ba:	2300      	moveq	r3, #0
    c5bc:	b2db      	uxtb	r3, r3
#else
    return (USE_SPI == 1);
#endif
} // USE_SPI_get()
    c5be:	4618      	mov	r0, r3
    c5c0:	b003      	add	sp, #12
    c5c2:	f85d fb04 	ldr.w	pc, [sp], #4
    c5c6:	bf00      	nop
    c5c8:	00010538 	.word	0x00010538
    c5cc:	00010534 	.word	0x00010534

0000c5d0 <start_boot_mode>:
//
// Reset the slave device and force it into boot mode.
//
//*****************************************************************************
void start_boot_mode(bool bReset)
{
    c5d0:	b500      	push	{lr}
    c5d2:	b083      	sub	sp, #12
    c5d4:	4603      	mov	r3, r0
    c5d6:	f88d 3007 	strb.w	r3, [sp, #7]
    if ( !bReset )
    c5da:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c5de:	f083 0301 	eor.w	r3, r3, #1
    c5e2:	b2db      	uxtb	r3, r3
    c5e4:	2b00      	cmp	r3, #0
    c5e6:	d012      	beq.n	c60e <start_boot_mode+0x3e>
    {
        //
        // Drive RESET high and configure the pin.
        //
        am_hal_gpio_state_write(DRIVE_SLAVE_RESET_PIN, AM_HAL_GPIO_OUTPUT_SET);
    c5e8:	2101      	movs	r1, #1
    c5ea:	2011      	movs	r0, #17
    c5ec:	f001 fe5a 	bl	e2a4 <am_hal_gpio_state_write>
        am_hal_gpio_pinconfig(DRIVE_SLAVE_RESET_PIN, g_AM_HAL_GPIO_OUTPUT);
    c5f0:	4b12      	ldr	r3, [pc, #72]	; (c63c <start_boot_mode+0x6c>)
    c5f2:	6819      	ldr	r1, [r3, #0]
    c5f4:	2011      	movs	r0, #17
    c5f6:	f001 fce9 	bl	dfcc <am_hal_gpio_pinconfig>

        //
        // Drive the override pin high and configure the pin.
        //
        am_hal_gpio_state_write(DRIVE_SLAVE_OVERRIDE_PIN, AM_HAL_GPIO_OUTPUT_SET);
    c5fa:	2101      	movs	r1, #1
    c5fc:	2004      	movs	r0, #4
    c5fe:	f001 fe51 	bl	e2a4 <am_hal_gpio_state_write>
        am_hal_gpio_pinconfig(DRIVE_SLAVE_OVERRIDE_PIN, g_AM_HAL_GPIO_OUTPUT);
    c602:	4b0e      	ldr	r3, [pc, #56]	; (c63c <start_boot_mode+0x6c>)
    c604:	6819      	ldr	r1, [r3, #0]
    c606:	2004      	movs	r0, #4
    c608:	f001 fce0 	bl	dfcc <am_hal_gpio_pinconfig>
        //
        // Short delay.
        //
        am_util_delay_us(5);
    }
}
    c60c:	e011      	b.n	c632 <start_boot_mode+0x62>
        am_hal_gpio_state_write(DRIVE_SLAVE_RESET_PIN, AM_HAL_GPIO_OUTPUT_CLEAR);
    c60e:	2100      	movs	r1, #0
    c610:	2011      	movs	r0, #17
    c612:	f001 fe47 	bl	e2a4 <am_hal_gpio_state_write>
        am_hal_gpio_state_write(DRIVE_SLAVE_OVERRIDE_PIN, AM_HAL_GPIO_OUTPUT_CLEAR);
    c616:	2100      	movs	r1, #0
    c618:	2004      	movs	r0, #4
    c61a:	f001 fe43 	bl	e2a4 <am_hal_gpio_state_write>
        am_util_delay_us(5);
    c61e:	2005      	movs	r0, #5
    c620:	f000 faaa 	bl	cb78 <am_util_delay_us>
        am_hal_gpio_state_write(DRIVE_SLAVE_RESET_PIN, AM_HAL_GPIO_OUTPUT_SET);
    c624:	2101      	movs	r1, #1
    c626:	2011      	movs	r0, #17
    c628:	f001 fe3c 	bl	e2a4 <am_hal_gpio_state_write>
        am_util_delay_us(5);
    c62c:	2005      	movs	r0, #5
    c62e:	f000 faa3 	bl	cb78 <am_util_delay_us>
}
    c632:	bf00      	nop
    c634:	b003      	add	sp, #12
    c636:	f85d fb04 	ldr.w	pc, [sp], #4
    c63a:	bf00      	nop
    c63c:	0001053c 	.word	0x0001053c

0000c640 <iom_slave_read>:
//
// Read a packet from the SBL IOS.
//
//*****************************************************************************
void iom_slave_read(bool bSpi, uint32_t offset, uint32_t *pBuf, uint32_t size)
{
    c640:	b500      	push	{lr}
    c642:	b08f      	sub	sp, #60	; 0x3c
    c644:	9102      	str	r1, [sp, #8]
    c646:	9201      	str	r2, [sp, #4]
    c648:	9300      	str	r3, [sp, #0]
    c64a:	4603      	mov	r3, r0
    c64c:	f88d 300f 	strb.w	r3, [sp, #15]
    am_hal_iom_transfer_t       Transaction;

    Transaction.ui32InstrLen    = 1;
    c650:	2301      	movs	r3, #1
    c652:	9305      	str	r3, [sp, #20]
    Transaction.ui32Instr       = offset;
    c654:	9b02      	ldr	r3, [sp, #8]
    c656:	9306      	str	r3, [sp, #24]
    Transaction.eDirection      = AM_HAL_IOM_RX;
    c658:	2301      	movs	r3, #1
    c65a:	f88d 3020 	strb.w	r3, [sp, #32]
    Transaction.ui32NumBytes    = size;
    c65e:	9b00      	ldr	r3, [sp, #0]
    c660:	9307      	str	r3, [sp, #28]
    Transaction.pui32RxBuffer   = pBuf;
    c662:	9b01      	ldr	r3, [sp, #4]
    c664:	930a      	str	r3, [sp, #40]	; 0x28
    Transaction.bContinue       = false;
    c666:	2300      	movs	r3, #0
    c668:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    Transaction.ui8RepeatCount  = 0;
    c66c:	2300      	movs	r3, #0
    c66e:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    Transaction.ui32PauseCondition = 0;
    c672:	2300      	movs	r3, #0
    c674:	930c      	str	r3, [sp, #48]	; 0x30
    Transaction.ui32StatusSetClr = 0;
    c676:	2300      	movs	r3, #0
    c678:	930d      	str	r3, [sp, #52]	; 0x34

    if ( bSpi )
    c67a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c67e:	2b00      	cmp	r3, #0
    c680:	d002      	beq.n	c688 <iom_slave_read+0x48>
    {
        Transaction.uPeerInfo.ui32SpiChipSelect = AM_BSP_IOM0_CS_CHNL;
    c682:	2300      	movs	r3, #0
    c684:	9304      	str	r3, [sp, #16]
    c686:	e001      	b.n	c68c <iom_slave_read+0x4c>
    }
    else
    {
        Transaction.uPeerInfo.ui32I2CDevAddr = (SLAVE_ADDRESS);
    c688:	2320      	movs	r3, #32
    c68a:	9304      	str	r3, [sp, #16]
    }

    am_hal_iom_blocking_transfer(g_IOMHandle, &Transaction);
    c68c:	4b05      	ldr	r3, [pc, #20]	; (c6a4 <iom_slave_read+0x64>)
    c68e:	681b      	ldr	r3, [r3, #0]
    c690:	aa04      	add	r2, sp, #16
    c692:	4611      	mov	r1, r2
    c694:	4618      	mov	r0, r3
    c696:	f002 fa5b 	bl	eb50 <am_hal_iom_blocking_transfer>
}
    c69a:	bf00      	nop
    c69c:	b00f      	add	sp, #60	; 0x3c
    c69e:	f85d fb04 	ldr.w	pc, [sp], #4
    c6a2:	bf00      	nop
    c6a4:	100078e0 	.word	0x100078e0

0000c6a8 <iom_slave_write>:
//
// Write a packet to the SBL IOS.
//
//*****************************************************************************
void iom_slave_write(bool bSpi, uint32_t offset, uint32_t *pBuf, uint32_t size)
{
    c6a8:	b500      	push	{lr}
    c6aa:	b08f      	sub	sp, #60	; 0x3c
    c6ac:	9102      	str	r1, [sp, #8]
    c6ae:	9201      	str	r2, [sp, #4]
    c6b0:	9300      	str	r3, [sp, #0]
    c6b2:	4603      	mov	r3, r0
    c6b4:	f88d 300f 	strb.w	r3, [sp, #15]
    am_hal_iom_transfer_t       Transaction;

    Transaction.ui32InstrLen    = 1;
    c6b8:	2301      	movs	r3, #1
    c6ba:	9305      	str	r3, [sp, #20]
    Transaction.ui32Instr       = offset;
    c6bc:	9b02      	ldr	r3, [sp, #8]
    c6be:	9306      	str	r3, [sp, #24]
    Transaction.eDirection      = AM_HAL_IOM_TX;
    c6c0:	2300      	movs	r3, #0
    c6c2:	f88d 3020 	strb.w	r3, [sp, #32]
    Transaction.ui32NumBytes    = size;
    c6c6:	9b00      	ldr	r3, [sp, #0]
    c6c8:	9307      	str	r3, [sp, #28]
    Transaction.pui32TxBuffer   = pBuf;
    c6ca:	9b01      	ldr	r3, [sp, #4]
    c6cc:	9309      	str	r3, [sp, #36]	; 0x24
    Transaction.bContinue       = false;
    c6ce:	2300      	movs	r3, #0
    c6d0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    Transaction.ui8RepeatCount  = 0;
    c6d4:	2300      	movs	r3, #0
    c6d6:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    Transaction.ui32PauseCondition = 0;
    c6da:	2300      	movs	r3, #0
    c6dc:	930c      	str	r3, [sp, #48]	; 0x30
    Transaction.ui32StatusSetClr = 0;
    c6de:	2300      	movs	r3, #0
    c6e0:	930d      	str	r3, [sp, #52]	; 0x34

    if ( bSpi )
    c6e2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c6e6:	2b00      	cmp	r3, #0
    c6e8:	d002      	beq.n	c6f0 <iom_slave_write+0x48>
    {
        Transaction.uPeerInfo.ui32SpiChipSelect = AM_BSP_IOM0_CS_CHNL;
    c6ea:	2300      	movs	r3, #0
    c6ec:	9304      	str	r3, [sp, #16]
    c6ee:	e001      	b.n	c6f4 <iom_slave_write+0x4c>
    }
    else
    {
        Transaction.uPeerInfo.ui32I2CDevAddr = (SLAVE_ADDRESS);
    c6f0:	2320      	movs	r3, #32
    c6f2:	9304      	str	r3, [sp, #16]
    }

    am_hal_iom_blocking_transfer(g_IOMHandle, &Transaction);
    c6f4:	4b05      	ldr	r3, [pc, #20]	; (c70c <iom_slave_write+0x64>)
    c6f6:	681b      	ldr	r3, [r3, #0]
    c6f8:	aa04      	add	r2, sp, #16
    c6fa:	4611      	mov	r1, r2
    c6fc:	4618      	mov	r0, r3
    c6fe:	f002 fa27 	bl	eb50 <am_hal_iom_blocking_transfer>
}
    c702:	bf00      	nop
    c704:	b00f      	add	sp, #60	; 0x3c
    c706:	f85d fb04 	ldr.w	pc, [sp], #4
    c70a:	bf00      	nop
    c70c:	100078e0 	.word	0x100078e0

0000c710 <send_hello>:
//
// Send a "HELLO" packet.
//
//*****************************************************************************
void send_hello(bool bSpi)
{
    c710:	b500      	push	{lr}
    c712:	b087      	sub	sp, #28
    c714:	4603      	mov	r3, r0
    c716:	f88d 3007 	strb.w	r3, [sp, #7]
    {
        am_secboot_ios_pkthdr_t   hdr;
        am_secboot_wired_msghdr_t msg;
    } pkt;

    pkt.hdr.bStart = 1;
    c71a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c71e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c722:	f88d 300f 	strb.w	r3, [sp, #15]
    pkt.hdr.bEnd = 1;
    c726:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c72a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c72e:	f88d 300f 	strb.w	r3, [sp, #15]
    pkt.hdr.length = 12;
    c732:	230c      	movs	r3, #12
    c734:	f8ad 300c 	strh.w	r3, [sp, #12]
    pkt.msg.msgType = AM_SECBOOT_WIRED_MSGTYPE_HELLO;
    c738:	2300      	movs	r3, #0
    c73a:	f8ad 3014 	strh.w	r3, [sp, #20]
    pkt.msg.length = sizeof(am_secboot_wired_msghdr_t);
    c73e:	2308      	movs	r3, #8
    c740:	f8ad 3016 	strh.w	r3, [sp, #22]

    //
    // Compute CRC
    //
    PRT_INFO("send_hello: sending bytes: %d.\n", pkt.msg.length );
    c744:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    c748:	4619      	mov	r1, r3
    c74a:	480c      	ldr	r0, [pc, #48]	; (c77c <send_hello+0x6c>)
    c74c:	f001 f93e 	bl	d9cc <am_util_stdio_printf>
    am_hal_crc32((uint32_t)&pkt.msg.msgType, pkt.msg.length - sizeof(uint32_t), &pkt.msg.crc32);
    c750:	ab03      	add	r3, sp, #12
    c752:	f103 0008 	add.w	r0, r3, #8
    c756:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    c75a:	1f19      	subs	r1, r3, #4
    c75c:	ab03      	add	r3, sp, #12
    c75e:	3304      	adds	r3, #4
    c760:	461a      	mov	r2, r3
    c762:	f002 fdd7 	bl	f314 <am_hal_crc32>
    iom_slave_write(bSpi, IOSOFFSET_WRITE_CMD, (uint32_t*)&pkt, sizeof(pkt));
    c766:	aa03      	add	r2, sp, #12
    c768:	f89d 0007 	ldrb.w	r0, [sp, #7]
    c76c:	230c      	movs	r3, #12
    c76e:	2180      	movs	r1, #128	; 0x80
    c770:	f7ff ff9a 	bl	c6a8 <iom_slave_write>
}
    c774:	bf00      	nop
    c776:	b007      	add	sp, #28
    c778:	f85d fb04 	ldr.w	pc, [sp], #4
    c77c:	00010314 	.word	0x00010314

0000c780 <main>:
// Main
//
//*****************************************************************************
int
main(void)
{
    c780:	b500      	push	{lr}
    c782:	b091      	sub	sp, #68	; 0x44
    bool     bSpi;
    uint32_t maxSize;
    uint32_t ui32ByteCnt;
    bool     bIOShdr;
    uint32_t ui32DotCnt = 0;
    c784:	2300      	movs	r3, #0
    c786:	930d      	str	r3, [sp, #52]	; 0x34

    //
    // Default setup.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c788:	2100      	movs	r1, #0
    c78a:	2000      	movs	r0, #0
    c78c:	f001 faec 	bl	dd68 <am_hal_clkgen_control>
    am_bsp_low_power_init();
    c790:	f001 f974 	bl	da7c <am_bsp_low_power_init>

    //
    // Check the SPI pin
    //
    bSpi = USE_SPI_get();
    c794:	f7ff fef8 	bl	c588 <USE_SPI_get>
    c798:	4603      	mov	r3, r0
    c79a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    maxSize = bSpi ? MAX_SPI_SIZE: MAX_I2C_SIZE;
    c79e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    c7a2:	2b00      	cmp	r3, #0
    c7a4:	d002      	beq.n	c7ac <main+0x2c>
    c7a6:	f240 33ff 	movw	r3, #1023	; 0x3ff
    c7aa:	e000      	b.n	c7ae <main+0x2e>
    c7ac:	23ff      	movs	r3, #255	; 0xff
    c7ae:	9308      	str	r3, [sp, #32]
    //
    // Enable the ITM
    //
    am_bsp_itm_printf_enable();
    c7b0:	f001 f984 	bl	dabc <am_bsp_itm_printf_enable>
    am_util_stdio_printf("\nApollo3 UART to IOS Host Bridge\n");
    c7b4:	48a8      	ldr	r0, [pc, #672]	; (ca58 <main+0x2d8>)
    c7b6:	f001 f909 	bl	d9cc <am_util_stdio_printf>

    if ( bSpi )
    c7ba:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    c7be:	2b00      	cmp	r3, #0
    c7c0:	d014      	beq.n	c7ec <main+0x6c>
    {
        am_util_stdio_printf("SPI clock = %d.%d MHz\n",
                             g_sIOMSpiConfig.ui32ClockFreq / 1000000,
    c7c2:	4ba6      	ldr	r3, [pc, #664]	; (ca5c <main+0x2dc>)
    c7c4:	685b      	ldr	r3, [r3, #4]
        am_util_stdio_printf("SPI clock = %d.%d MHz\n",
    c7c6:	4aa6      	ldr	r2, [pc, #664]	; (ca60 <main+0x2e0>)
    c7c8:	fba2 2303 	umull	r2, r3, r2, r3
    c7cc:	0c99      	lsrs	r1, r3, #18
                             g_sIOMSpiConfig.ui32ClockFreq % 1000000);
    c7ce:	4ba3      	ldr	r3, [pc, #652]	; (ca5c <main+0x2dc>)
    c7d0:	685a      	ldr	r2, [r3, #4]
        am_util_stdio_printf("SPI clock = %d.%d MHz\n",
    c7d2:	4ba3      	ldr	r3, [pc, #652]	; (ca60 <main+0x2e0>)
    c7d4:	fba3 0302 	umull	r0, r3, r3, r2
    c7d8:	0c9b      	lsrs	r3, r3, #18
    c7da:	48a2      	ldr	r0, [pc, #648]	; (ca64 <main+0x2e4>)
    c7dc:	fb00 f303 	mul.w	r3, r0, r3
    c7e0:	1ad3      	subs	r3, r2, r3
    c7e2:	461a      	mov	r2, r3
    c7e4:	48a0      	ldr	r0, [pc, #640]	; (ca68 <main+0x2e8>)
    c7e6:	f001 f8f1 	bl	d9cc <am_util_stdio_printf>
    c7ea:	e013      	b.n	c814 <main+0x94>
    }
    else
    {
        am_util_stdio_printf("I2C clock = %d.%d MHz\n",
                             g_sIOMI2cConfig.ui32ClockFreq / 1000000,
    c7ec:	4b9f      	ldr	r3, [pc, #636]	; (ca6c <main+0x2ec>)
    c7ee:	685b      	ldr	r3, [r3, #4]
        am_util_stdio_printf("I2C clock = %d.%d MHz\n",
    c7f0:	4a9b      	ldr	r2, [pc, #620]	; (ca60 <main+0x2e0>)
    c7f2:	fba2 2303 	umull	r2, r3, r2, r3
    c7f6:	0c99      	lsrs	r1, r3, #18
                             g_sIOMI2cConfig.ui32ClockFreq % 1000000);
    c7f8:	4b9c      	ldr	r3, [pc, #624]	; (ca6c <main+0x2ec>)
    c7fa:	685a      	ldr	r2, [r3, #4]
        am_util_stdio_printf("I2C clock = %d.%d MHz\n",
    c7fc:	4b98      	ldr	r3, [pc, #608]	; (ca60 <main+0x2e0>)
    c7fe:	fba3 0302 	umull	r0, r3, r3, r2
    c802:	0c9b      	lsrs	r3, r3, #18
    c804:	4897      	ldr	r0, [pc, #604]	; (ca64 <main+0x2e4>)
    c806:	fb00 f303 	mul.w	r3, r0, r3
    c80a:	1ad3      	subs	r3, r2, r3
    c80c:	461a      	mov	r2, r3
    c80e:	4898      	ldr	r0, [pc, #608]	; (ca70 <main+0x2f0>)
    c810:	f001 f8dc 	bl	d9cc <am_util_stdio_printf>
    }

    //
    // Set and configure the reset/bootmode pins high, but don't reset slave.
    //
    start_boot_mode(false);
    c814:	2000      	movs	r0, #0
    c816:	f7ff fedb 	bl	c5d0 <start_boot_mode>

    //
    // Start the IOM interface.
    //
    iom_set_up(IOM_MODULE, bSpi);
    c81a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    c81e:	4619      	mov	r1, r3
    c820:	2000      	movs	r0, #0
    c822:	f7ff fe07 	bl	c434 <iom_set_up>

    //
    // Start up the UART interface.
    //
    uart_set_up(UART_HOST);
    c826:	2000      	movs	r0, #0
    c828:	f7ff fe68 	bl	c4fc <uart_set_up>

    //
    // Force the slave into boot mode.
    //
    start_boot_mode(true);
    c82c:	2001      	movs	r0, #1
    c82e:	f7ff fecf 	bl	c5d0 <start_boot_mode>

#if 1
    //
    // Wait for initial handshake signal to know that IOS interface is alive
    //
    while( !bIosInt );
    c832:	bf00      	nop
    c834:	4b8f      	ldr	r3, [pc, #572]	; (ca74 <main+0x2f4>)
    c836:	781b      	ldrb	r3, [r3, #0]
    c838:	b2db      	uxtb	r3, r3
    c83a:	f083 0301 	eor.w	r3, r3, #1
    c83e:	b2db      	uxtb	r3, r3
    c840:	2b00      	cmp	r3, #0
    c842:	d1f7      	bne.n	c834 <main+0xb4>
    bIosInt = false;
    c844:	4b8b      	ldr	r3, [pc, #556]	; (ca74 <main+0x2f4>)
    c846:	2200      	movs	r2, #0
    c848:	701a      	strb	r2, [r3, #0]

    //
    // Short delay.
    //
    am_util_delay_ms(1);
    c84a:	2001      	movs	r0, #1
    c84c:	f000 f978 	bl	cb40 <am_util_delay_ms>

    //
    // Send the "HELLO" message to connect to the interface.
    //
    send_hello(bSpi);
    c850:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    c854:	4618      	mov	r0, r3
    c856:	f7ff ff5b 	bl	c710 <send_hello>

    while( !bIosInt );
    c85a:	bf00      	nop
    c85c:	4b85      	ldr	r3, [pc, #532]	; (ca74 <main+0x2f4>)
    c85e:	781b      	ldrb	r3, [r3, #0]
    c860:	b2db      	uxtb	r3, r3
    c862:	f083 0301 	eor.w	r3, r3, #1
    c866:	b2db      	uxtb	r3, r3
    c868:	2b00      	cmp	r3, #0
    c86a:	d1f7      	bne.n	c85c <main+0xdc>
    bIosInt = false;
    c86c:	4b81      	ldr	r3, [pc, #516]	; (ca74 <main+0x2f4>)
    c86e:	2200      	movs	r2, #0
    c870:	701a      	strb	r2, [r3, #0]

    //
    // Read the "STATUS" response from the IOS.
    //
    iom_slave_read(bSpi, IOSOFFSET_READ_FIFO, (uint32_t*)&g_psReadData, 88);
    c872:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    c876:	2358      	movs	r3, #88	; 0x58
    c878:	4a7f      	ldr	r2, [pc, #508]	; (ca78 <main+0x2f8>)
    c87a:	217f      	movs	r1, #127	; 0x7f
    c87c:	f7ff fee0 	bl	c640 <iom_slave_read>
        //
        // Disable interrupt while we decide whether we're going to sleep.
        //
        //uint32_t ui32IntStatus = am_hal_interrupt_master_disable();

        if ( bIosInt == true )
    c880:	4b7c      	ldr	r3, [pc, #496]	; (ca74 <main+0x2f4>)
    c882:	781b      	ldrb	r3, [r3, #0]
    c884:	b2db      	uxtb	r3, r3
    c886:	2b00      	cmp	r3, #0
    c888:	d031      	beq.n	c8ee <main+0x16e>
        {
            bIosInt = false;
    c88a:	4b7a      	ldr	r3, [pc, #488]	; (ca74 <main+0x2f4>)
    c88c:	2200      	movs	r2, #0
    c88e:	701a      	strb	r2, [r3, #0]
            uint32_t iosSize = 0;
    c890:	2300      	movs	r3, #0
    c892:	9305      	str	r3, [sp, #20]

            //
            // Read the Data Size from the IOS.
            //
            iom_slave_read(bSpi, IOSOFFSET_READ_FIFOCTR, &iosSize, 2);
    c894:	aa05      	add	r2, sp, #20
    c896:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    c89a:	2302      	movs	r3, #2
    c89c:	217c      	movs	r1, #124	; 0x7c
    c89e:	f7ff fecf 	bl	c640 <iom_slave_read>
            iosSize = (iosSize > maxSize) ? maxSize : iosSize;
    c8a2:	9a05      	ldr	r2, [sp, #20]
    c8a4:	9b08      	ldr	r3, [sp, #32]
    c8a6:	4293      	cmp	r3, r2
    c8a8:	bf28      	it	cs
    c8aa:	4613      	movcs	r3, r2
    c8ac:	9305      	str	r3, [sp, #20]

            if ( iosSize > 0 )
    c8ae:	9b05      	ldr	r3, [sp, #20]
    c8b0:	2b00      	cmp	r3, #0
    c8b2:	d0e5      	beq.n	c880 <main+0x100>
            {
                //
                // Read the Data from the IOS.
                //
                iom_slave_read(bSpi, IOSOFFSET_READ_FIFO, (uint32_t*)&g_psReadData, iosSize);
    c8b4:	9b05      	ldr	r3, [sp, #20]
    c8b6:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    c8ba:	4a6f      	ldr	r2, [pc, #444]	; (ca78 <main+0x2f8>)
    c8bc:	217f      	movs	r1, #127	; 0x7f
    c8be:	f7ff febf 	bl	c640 <iom_slave_read>

                //
                // Write the Data to the UART.
                //
                {
                    am_hal_uart_transfer_t sWrite =
    c8c2:	2300      	movs	r3, #0
    c8c4:	9300      	str	r3, [sp, #0]
    c8c6:	4b6c      	ldr	r3, [pc, #432]	; (ca78 <main+0x2f8>)
    c8c8:	9301      	str	r3, [sp, #4]
    c8ca:	9b05      	ldr	r3, [sp, #20]
    c8cc:	9302      	str	r3, [sp, #8]
    c8ce:	f04f 33ff 	mov.w	r3, #4294967295
    c8d2:	9303      	str	r3, [sp, #12]
    c8d4:	2300      	movs	r3, #0
    c8d6:	9304      	str	r3, [sp, #16]
                        .pui32BytesTransferred = 0,
                    };

                    //PRT_INFO("\nUART%d: %3d bytes.\n", UART_HOST, iosSize);
//                  bIOShdr = false;
                    am_hal_uart_transfer(g_pvUART, &sWrite);
    c8d8:	4b68      	ldr	r3, [pc, #416]	; (ca7c <main+0x2fc>)
    c8da:	681b      	ldr	r3, [r3, #0]
    c8dc:	466a      	mov	r2, sp
    c8de:	4611      	mov	r1, r2
    c8e0:	4618      	mov	r0, r3
    c8e2:	f002 ffad 	bl	f840 <am_hal_uart_transfer>
                    am_util_delay_ms(1);
    c8e6:	2001      	movs	r0, #1
    c8e8:	f000 f92a 	bl	cb40 <am_util_delay_ms>
    c8ec:	e7c8      	b.n	c880 <main+0x100>
                }
            }
        }
        else if (g_bRxTimeoutFlag)
    c8ee:	4b64      	ldr	r3, [pc, #400]	; (ca80 <main+0x300>)
    c8f0:	781b      	ldrb	r3, [r3, #0]
    c8f2:	b2db      	uxtb	r3, r3
    c8f4:	2b00      	cmp	r3, #0
    c8f6:	d0c3      	beq.n	c880 <main+0x100>
        {
            //
            // UART Buffer can contain more than one packet.
            // This outer loop parses
            //
            PRT_DATA("UART Data Size    : %d\n", g_ui32UARTRxIndex);
    c8f8:	4b62      	ldr	r3, [pc, #392]	; (ca84 <main+0x304>)
    c8fa:	681b      	ldr	r3, [r3, #0]
    c8fc:	4619      	mov	r1, r3
    c8fe:	4862      	ldr	r0, [pc, #392]	; (ca88 <main+0x308>)
    c900:	f7ff fd24 	bl	c34c <no_print>

            uint32_t ui32UARTBufOffset = 0;
    c904:	2300      	movs	r3, #0
    c906:	930c      	str	r3, [sp, #48]	; 0x30
            while ((ui32UARTBufOffset < g_ui32UARTRxIndex) && (g_ui32UARTRxIndex > 0))
    c908:	e0fc      	b.n	cb04 <main+0x384>
            {
                am_secboot_wired_msghdr_t *pHdr = (am_secboot_wired_msghdr_t *)&g_psWriteData.bytes[ui32UARTBufOffset];
    c90a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c90c:	4a5f      	ldr	r2, [pc, #380]	; (ca8c <main+0x30c>)
    c90e:	4413      	add	r3, r2
    c910:	9307      	str	r3, [sp, #28]
                uint32_t ui32PktLength = pHdr->length;
    c912:	9b07      	ldr	r3, [sp, #28]
    c914:	88db      	ldrh	r3, [r3, #6]
    c916:	9306      	str	r3, [sp, #24]

                PRT_DATA("Packet Length     : %d\n", ui32PktLength);
    c918:	9906      	ldr	r1, [sp, #24]
    c91a:	485d      	ldr	r0, [pc, #372]	; (ca90 <main+0x310>)
    c91c:	f7ff fd16 	bl	c34c <no_print>

                if ( 0 == ui32PktLength )
    c920:	9b06      	ldr	r3, [sp, #24]
    c922:	2b00      	cmp	r3, #0
    c924:	f000 80f9 	beq.w	cb1a <main+0x39a>
                {
                    break;
                }

                for (uint32_t index = 0; index < ui32PktLength; index += sizeof(g_IosPktData.data))
    c928:	2300      	movs	r3, #0
    c92a:	930b      	str	r3, [sp, #44]	; 0x2c
    c92c:	e0e1      	b.n	caf2 <main+0x372>
                {
                    PRT_DATA("index             : %d\n", index);
    c92e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c930:	4858      	ldr	r0, [pc, #352]	; (ca94 <main+0x314>)
    c932:	f7ff fd0b 	bl	c34c <no_print>

                    g_IosPktData.header.bStart = 0;
    c936:	4a58      	ldr	r2, [pc, #352]	; (ca98 <main+0x318>)
    c938:	78d3      	ldrb	r3, [r2, #3]
    c93a:	f36f 13c7 	bfc	r3, #7, #1
    c93e:	70d3      	strb	r3, [r2, #3]
                    g_IosPktData.header.bEnd = 0;
    c940:	4a55      	ldr	r2, [pc, #340]	; (ca98 <main+0x318>)
    c942:	78d3      	ldrb	r3, [r2, #3]
    c944:	f36f 1386 	bfc	r3, #6, #1
    c948:	70d3      	strb	r3, [r2, #3]
                    g_IosPktData.header.length = 0;
    c94a:	4b53      	ldr	r3, [pc, #332]	; (ca98 <main+0x318>)
    c94c:	2200      	movs	r2, #0
    c94e:	801a      	strh	r2, [r3, #0]

                    //
                    // If this is the first packet, then set the Start flag.
                    //
                    if ( 0 == index )
    c950:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c952:	2b00      	cmp	r3, #0
    c954:	d104      	bne.n	c960 <main+0x1e0>
                    {
                        g_IosPktData.header.bStart = 1;
    c956:	4a50      	ldr	r2, [pc, #320]	; (ca98 <main+0x318>)
    c958:	78d3      	ldrb	r3, [r2, #3]
    c95a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c95e:	70d3      	strb	r3, [r2, #3]
                    }

                    //
                    // If this this the last packet, then set the End flag.
                    //
                    if ((index + sizeof(g_IosPktData.data)) >= ui32PktLength)
    c960:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c962:	3374      	adds	r3, #116	; 0x74
    c964:	9a06      	ldr	r2, [sp, #24]
    c966:	429a      	cmp	r2, r3
    c968:	d804      	bhi.n	c974 <main+0x1f4>
                    {
                        g_IosPktData.header.bEnd = 1;
    c96a:	4a4b      	ldr	r2, [pc, #300]	; (ca98 <main+0x318>)
    c96c:	78d3      	ldrb	r3, [r2, #3]
    c96e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c972:	70d3      	strb	r3, [r2, #3]
                    }

                    //
                    // Build and Send the next packet.
                    //
                    g_IosPktData.header.length = ((ui32PktLength - index) < sizeof(g_IosPktData.data)) ? (ui32PktLength - index) : sizeof(g_IosPktData.data);
    c974:	9a06      	ldr	r2, [sp, #24]
    c976:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c978:	1ad3      	subs	r3, r2, r3
    c97a:	2b74      	cmp	r3, #116	; 0x74
    c97c:	bf28      	it	cs
    c97e:	2374      	movcs	r3, #116	; 0x74
    c980:	b29a      	uxth	r2, r3
    c982:	4b45      	ldr	r3, [pc, #276]	; (ca98 <main+0x318>)
    c984:	801a      	strh	r2, [r3, #0]
                    memcpy(&g_IosPktData.data[0], &g_psWriteData.bytes[index + ui32UARTBufOffset], g_IosPktData.header.length);
    c986:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c988:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c98a:	4413      	add	r3, r2
    c98c:	4a3f      	ldr	r2, [pc, #252]	; (ca8c <main+0x30c>)
    c98e:	4413      	add	r3, r2
    c990:	4a41      	ldr	r2, [pc, #260]	; (ca98 <main+0x318>)
    c992:	8812      	ldrh	r2, [r2, #0]
    c994:	4619      	mov	r1, r3
    c996:	4841      	ldr	r0, [pc, #260]	; (ca9c <main+0x31c>)
    c998:	f7ff fbb2 	bl	c100 <memcpy>
                    g_IosPktData.header.length += sizeof(am_secboot_ios_pkthdr_t);
    c99c:	4b3e      	ldr	r3, [pc, #248]	; (ca98 <main+0x318>)
    c99e:	881b      	ldrh	r3, [r3, #0]
    c9a0:	3304      	adds	r3, #4
    c9a2:	b29a      	uxth	r2, r3
    c9a4:	4b3c      	ldr	r3, [pc, #240]	; (ca98 <main+0x318>)
    c9a6:	801a      	strh	r2, [r3, #0]
                    bIosInt = false;
    c9a8:	4b32      	ldr	r3, [pc, #200]	; (ca74 <main+0x2f4>)
    c9aa:	2200      	movs	r2, #0
    c9ac:	701a      	strb	r2, [r3, #0]

                    PRT_DATA("IOS Length        : %d\n", g_IosPktData.header.length);
    c9ae:	4b3a      	ldr	r3, [pc, #232]	; (ca98 <main+0x318>)
    c9b0:	881b      	ldrh	r3, [r3, #0]
    c9b2:	4619      	mov	r1, r3
    c9b4:	483a      	ldr	r0, [pc, #232]	; (caa0 <main+0x320>)
    c9b6:	f7ff fcc9 	bl	c34c <no_print>
                    PRT_DATA("IOS Start Bit     : %d\n", g_IosPktData.header.bStart);
    c9ba:	4b37      	ldr	r3, [pc, #220]	; (ca98 <main+0x318>)
    c9bc:	78db      	ldrb	r3, [r3, #3]
    c9be:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    c9c2:	b2db      	uxtb	r3, r3
    c9c4:	4619      	mov	r1, r3
    c9c6:	4837      	ldr	r0, [pc, #220]	; (caa4 <main+0x324>)
    c9c8:	f7ff fcc0 	bl	c34c <no_print>
                    PRT_DATA("IOS End Bit       : %d\n", g_IosPktData.header.bEnd);
    c9cc:	4b32      	ldr	r3, [pc, #200]	; (ca98 <main+0x318>)
    c9ce:	78db      	ldrb	r3, [r3, #3]
    c9d0:	f3c3 1380 	ubfx	r3, r3, #6, #1
    c9d4:	b2db      	uxtb	r3, r3
    c9d6:	4619      	mov	r1, r3
    c9d8:	4833      	ldr	r0, [pc, #204]	; (caa8 <main+0x328>)
    c9da:	f7ff fcb7 	bl	c34c <no_print>

                    ui32ByteCnt += g_IosPktData.header.length;
    c9de:	4b2e      	ldr	r3, [pc, #184]	; (ca98 <main+0x318>)
    c9e0:	881b      	ldrh	r3, [r3, #0]
    c9e2:	461a      	mov	r2, r3
    c9e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c9e6:	4413      	add	r3, r2
    c9e8:	930f      	str	r3, [sp, #60]	; 0x3c
                    if ( bIOShdr )
    c9ea:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
    c9ee:	2b00      	cmp	r3, #0
    c9f0:	d006      	beq.n	ca00 <main+0x280>
                    {
                        PRT_DATA(", %d", g_IosPktData.header.length );
    c9f2:	4b29      	ldr	r3, [pc, #164]	; (ca98 <main+0x318>)
    c9f4:	881b      	ldrh	r3, [r3, #0]
    c9f6:	4619      	mov	r1, r3
    c9f8:	482c      	ldr	r0, [pc, #176]	; (caac <main+0x32c>)
    c9fa:	f7ff fca7 	bl	c34c <no_print>
    c9fe:	e009      	b.n	ca14 <main+0x294>
                    }
                    else
                    {
                        PRT_DATA("IOM  : sent bytes: %d (count=%d)", g_IosPktData.header.length, ui32ByteCnt );
    ca00:	4b25      	ldr	r3, [pc, #148]	; (ca98 <main+0x318>)
    ca02:	881b      	ldrh	r3, [r3, #0]
    ca04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    ca06:	4619      	mov	r1, r3
    ca08:	4829      	ldr	r0, [pc, #164]	; (cab0 <main+0x330>)
    ca0a:	f7ff fc9f 	bl	c34c <no_print>
                        bIOShdr = true;
    ca0e:	2301      	movs	r3, #1
    ca10:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
                    }

                    if ( ui32DotCnt >= 20 )
    ca14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ca16:	2b13      	cmp	r3, #19
    ca18:	d904      	bls.n	ca24 <main+0x2a4>
                    {
                        PRT_INFO("\n");
    ca1a:	4826      	ldr	r0, [pc, #152]	; (cab4 <main+0x334>)
    ca1c:	f000 ffd6 	bl	d9cc <am_util_stdio_printf>
                        ui32DotCnt = 0;
    ca20:	2300      	movs	r3, #0
    ca22:	930d      	str	r3, [sp, #52]	; 0x34
                    }
                    PRT_INFO("*");
    ca24:	4824      	ldr	r0, [pc, #144]	; (cab8 <main+0x338>)
    ca26:	f000 ffd1 	bl	d9cc <am_util_stdio_printf>
                    ui32DotCnt++;
    ca2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ca2c:	3301      	adds	r3, #1
    ca2e:	930d      	str	r3, [sp, #52]	; 0x34

                    iom_slave_write(bSpi, IOSOFFSET_WRITE_CMD, (uint32_t*)&g_IosPktData, g_IosPktData.header.length);
    ca30:	4b19      	ldr	r3, [pc, #100]	; (ca98 <main+0x318>)
    ca32:	881b      	ldrh	r3, [r3, #0]
    ca34:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    ca38:	4a17      	ldr	r2, [pc, #92]	; (ca98 <main+0x318>)
    ca3a:	2180      	movs	r1, #128	; 0x80
    ca3c:	f7ff fe34 	bl	c6a8 <iom_slave_write>

                    //
                    // Wait for the GPIO Interrupt before sending the next packet.
                    //
                    for (uint32_t timeout = 0; timeout < 10000; timeout++)
    ca40:	2300      	movs	r3, #0
    ca42:	930a      	str	r3, [sp, #40]	; 0x28
    ca44:	e042      	b.n	cacc <main+0x34c>
                    {
                        if ( bIosInt )
    ca46:	4b0b      	ldr	r3, [pc, #44]	; (ca74 <main+0x2f4>)
    ca48:	781b      	ldrb	r3, [r3, #0]
    ca4a:	b2db      	uxtb	r3, r3
    ca4c:	2b00      	cmp	r3, #0
    ca4e:	d037      	beq.n	cac0 <main+0x340>
                        {
                            PRT_DATA("Received Handshake for next packet\n");
    ca50:	481a      	ldr	r0, [pc, #104]	; (cabc <main+0x33c>)
    ca52:	f7ff fc7b 	bl	c34c <no_print>
                            break;
    ca56:	e03e      	b.n	cad6 <main+0x356>
    ca58:	00010334 	.word	0x00010334
    ca5c:	10001018 	.word	0x10001018
    ca60:	431bde83 	.word	0x431bde83
    ca64:	000f4240 	.word	0x000f4240
    ca68:	00010358 	.word	0x00010358
    ca6c:	10001004 	.word	0x10001004
    ca70:	00010370 	.word	0x00010370
    ca74:	100078dd 	.word	0x100078dd
    ca78:	10004860 	.word	0x10004860
    ca7c:	100078e4 	.word	0x100078e4
    ca80:	100078dc 	.word	0x100078dc
    ca84:	100078d8 	.word	0x100078d8
    ca88:	00010388 	.word	0x00010388
    ca8c:	10001860 	.word	0x10001860
    ca90:	000103a0 	.word	0x000103a0
    ca94:	000103b8 	.word	0x000103b8
    ca98:	10007860 	.word	0x10007860
    ca9c:	10007864 	.word	0x10007864
    caa0:	000103d0 	.word	0x000103d0
    caa4:	000103e8 	.word	0x000103e8
    caa8:	00010400 	.word	0x00010400
    caac:	00010418 	.word	0x00010418
    cab0:	00010420 	.word	0x00010420
    cab4:	00010444 	.word	0x00010444
    cab8:	00010448 	.word	0x00010448
    cabc:	0001044c 	.word	0x0001044c
                        }
                        else
                        {
                            am_util_delay_us(1);
    cac0:	2001      	movs	r0, #1
    cac2:	f000 f859 	bl	cb78 <am_util_delay_us>
                    for (uint32_t timeout = 0; timeout < 10000; timeout++)
    cac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cac8:	3301      	adds	r3, #1
    caca:	930a      	str	r3, [sp, #40]	; 0x28
    cacc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cace:	f242 720f 	movw	r2, #9999	; 0x270f
    cad2:	4293      	cmp	r3, r2
    cad4:	d9b7      	bls.n	ca46 <main+0x2c6>
                        }
                    }

                    if ( !bIosInt )
    cad6:	4b16      	ldr	r3, [pc, #88]	; (cb30 <main+0x3b0>)
    cad8:	781b      	ldrb	r3, [r3, #0]
    cada:	b2db      	uxtb	r3, r3
    cadc:	f083 0301 	eor.w	r3, r3, #1
    cae0:	b2db      	uxtb	r3, r3
    cae2:	2b00      	cmp	r3, #0
    cae4:	d002      	beq.n	caec <main+0x36c>
                    {
                        PRT_DATA("Timed out waiting for Handshake signal\n");
    cae6:	4813      	ldr	r0, [pc, #76]	; (cb34 <main+0x3b4>)
    cae8:	f7ff fc30 	bl	c34c <no_print>
                for (uint32_t index = 0; index < ui32PktLength; index += sizeof(g_IosPktData.data))
    caec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    caee:	3374      	adds	r3, #116	; 0x74
    caf0:	930b      	str	r3, [sp, #44]	; 0x2c
    caf2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    caf4:	9b06      	ldr	r3, [sp, #24]
    caf6:	429a      	cmp	r2, r3
    caf8:	f4ff af19 	bcc.w	c92e <main+0x1ae>
                    }
                }
                ui32UARTBufOffset += ui32PktLength;
    cafc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cafe:	9b06      	ldr	r3, [sp, #24]
    cb00:	4413      	add	r3, r2
    cb02:	930c      	str	r3, [sp, #48]	; 0x30
            while ((ui32UARTBufOffset < g_ui32UARTRxIndex) && (g_ui32UARTRxIndex > 0))
    cb04:	4b0c      	ldr	r3, [pc, #48]	; (cb38 <main+0x3b8>)
    cb06:	681b      	ldr	r3, [r3, #0]
    cb08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cb0a:	429a      	cmp	r2, r3
    cb0c:	d206      	bcs.n	cb1c <main+0x39c>
    cb0e:	4b0a      	ldr	r3, [pc, #40]	; (cb38 <main+0x3b8>)
    cb10:	681b      	ldr	r3, [r3, #0]
    cb12:	2b00      	cmp	r3, #0
    cb14:	f47f aef9 	bne.w	c90a <main+0x18a>
    cb18:	e000      	b.n	cb1c <main+0x39c>
                    break;
    cb1a:	bf00      	nop
            }

            g_ui32UARTRxIndex = 0;
    cb1c:	4b06      	ldr	r3, [pc, #24]	; (cb38 <main+0x3b8>)
    cb1e:	2200      	movs	r2, #0
    cb20:	601a      	str	r2, [r3, #0]
            g_bRxTimeoutFlag = false;
    cb22:	4b06      	ldr	r3, [pc, #24]	; (cb3c <main+0x3bc>)
    cb24:	2200      	movs	r2, #0
    cb26:	701a      	strb	r2, [r3, #0]
            NVIC_EnableIRQ((IRQn_Type)(UART0_IRQn + UART_HOST));
    cb28:	200f      	movs	r0, #15
    cb2a:	f7ff fbd3 	bl	c2d4 <__NVIC_EnableIRQ>
        if ( bIosInt == true )
    cb2e:	e6a7      	b.n	c880 <main+0x100>
    cb30:	100078dd 	.word	0x100078dd
    cb34:	00010470 	.word	0x00010470
    cb38:	100078d8 	.word	0x100078d8
    cb3c:	100078dc 	.word	0x100078dc

0000cb40 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    cb40:	b500      	push	{lr}
    cb42:	b089      	sub	sp, #36	; 0x24
    cb44:	9001      	str	r0, [sp, #4]
    am_hal_delay_us( ui32MilliSeconds * 1000);
#else // AM_PART_APOLLO4
    uint32_t ui32Loops, ui32HFRC;
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    cb46:	ab03      	add	r3, sp, #12
    cb48:	4618      	mov	r0, r3
    cb4a:	f001 f9a9 	bl	dea0 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
    cb4e:	9b03      	ldr	r3, [sp, #12]
    cb50:	9307      	str	r3, [sp, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    cb52:	9b07      	ldr	r3, [sp, #28]
    cb54:	4a07      	ldr	r2, [pc, #28]	; (cb74 <am_util_delay_ms+0x34>)
    cb56:	fba2 2303 	umull	r2, r3, r2, r3
    cb5a:	099a      	lsrs	r2, r3, #6
    cb5c:	9b01      	ldr	r3, [sp, #4]
    cb5e:	fb02 f303 	mul.w	r3, r2, r3
    cb62:	9306      	str	r3, [sp, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    cb64:	9806      	ldr	r0, [sp, #24]
    cb66:	f001 f9b9 	bl	dedc <am_hal_flash_delay>
#endif // AM_PART_APOLLO4
}
    cb6a:	bf00      	nop
    cb6c:	b009      	add	sp, #36	; 0x24
    cb6e:	f85d fb04 	ldr.w	pc, [sp], #4
    cb72:	bf00      	nop
    cb74:	057619f1 	.word	0x057619f1

0000cb78 <am_util_delay_us>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_us(uint32_t ui32MicroSeconds)
{
    cb78:	b500      	push	{lr}
    cb7a:	b089      	sub	sp, #36	; 0x24
    cb7c:	9001      	str	r0, [sp, #4]
#else // AM_PART_APOLLO4
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    cb7e:	ab03      	add	r3, sp, #12
    cb80:	4618      	mov	r0, r3
    cb82:	f001 f98d 	bl	dea0 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
    cb86:	9b03      	ldr	r3, [sp, #12]
    cb88:	9307      	str	r3, [sp, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MicroSeconds * (ui32HFRC / 3000000);
    cb8a:	9b07      	ldr	r3, [sp, #28]
    cb8c:	4a07      	ldr	r2, [pc, #28]	; (cbac <am_util_delay_us+0x34>)
    cb8e:	fba2 2303 	umull	r2, r3, r2, r3
    cb92:	0c9a      	lsrs	r2, r3, #18
    cb94:	9b01      	ldr	r3, [sp, #4]
    cb96:	fb02 f303 	mul.w	r3, r2, r3
    cb9a:	9306      	str	r3, [sp, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    cb9c:	9806      	ldr	r0, [sp, #24]
    cb9e:	f001 f99d 	bl	dedc <am_hal_flash_delay>
#endif // AM_PART_APOLLO4
}
    cba2:	bf00      	nop
    cba4:	b009      	add	sp, #36	; 0x24
    cba6:	f85d fb04 	ldr.w	pc, [sp], #4
    cbaa:	bf00      	nop
    cbac:	165e9f81 	.word	0x165e9f81

0000cbb0 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    cbb0:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    cbb2:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    cbb6:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    cbb8:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    cbbc:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    cbc0:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    cbc4:	f000 f80a 	bl	cbdc <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    cbc8:	bd01      	pop	{r0, pc}
}
    cbca:	bf00      	nop
    cbcc:	4618      	mov	r0, r3

0000cbce <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    cbce:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    cbd0:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    cbd2:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    cbd4:	4770      	bx	lr
}
    cbd6:	bf00      	nop
    cbd8:	4618      	mov	r0, r3
	...

0000cbdc <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    cbdc:	b500      	push	{lr}
    cbde:	b097      	sub	sp, #92	; 0x5c
    cbe0:	9001      	str	r0, [sp, #4]
    volatile am_fault_t sFaultData;
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_t  sHalFaultData = {0};
#else
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    cbe2:	ab03      	add	r3, sp, #12
    cbe4:	2200      	movs	r2, #0
    cbe6:	601a      	str	r2, [r3, #0]
    cbe8:	605a      	str	r2, [r3, #4]
    cbea:	609a      	str	r2, [r3, #8]
    cbec:	60da      	str	r2, [r3, #12]
    cbee:	611a      	str	r2, [r3, #16]
    cbf0:	615a      	str	r2, [r3, #20]
#endif // if defined(AM_PART_APOLLO4)

    uint32_t u32Mask = 0;
    cbf2:	2300      	movs	r3, #0
    cbf4:	9315      	str	r3, [sp, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    cbf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cbf8:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    cbfa:	4b2e      	ldr	r3, [pc, #184]	; (ccb4 <am_util_faultisr_collect_data+0xd8>)
    cbfc:	681b      	ldr	r3, [r3, #0]
    cbfe:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    cc00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    cc02:	b2db      	uxtb	r3, r3
    cc04:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    cc08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    cc0a:	0a1b      	lsrs	r3, r3, #8
    cc0c:	b2db      	uxtb	r3, r3
    cc0e:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    cc12:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    cc14:	0c1b      	lsrs	r3, r3, #16
    cc16:	b29b      	uxth	r3, r3
    cc18:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    cc1c:	4b26      	ldr	r3, [pc, #152]	; (ccb8 <am_util_faultisr_collect_data+0xdc>)
    cc1e:	681b      	ldr	r3, [r3, #0]
    cc20:	9312      	str	r3, [sp, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    cc22:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
    cc26:	b2db      	uxtb	r3, r3
    cc28:	f003 0302 	and.w	r3, r3, #2
    cc2c:	2b00      	cmp	r3, #0
    cc2e:	d005      	beq.n	cc3c <am_util_faultisr_collect_data+0x60>
    cc30:	9901      	ldr	r1, [sp, #4]
    cc32:	2006      	movs	r0, #6
    cc34:	f7ff ffcb 	bl	cbce <getStackedReg>
    cc38:	4603      	mov	r3, r0
    cc3a:	e001      	b.n	cc40 <am_util_faultisr_collect_data+0x64>
    cc3c:	f04f 33ff 	mov.w	r3, #4294967295
    cc40:	9311      	str	r3, [sp, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    cc42:	9901      	ldr	r1, [sp, #4]
    cc44:	2000      	movs	r0, #0
    cc46:	f7ff ffc2 	bl	cbce <getStackedReg>
    cc4a:	4603      	mov	r3, r0
    cc4c:	9309      	str	r3, [sp, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    cc4e:	9901      	ldr	r1, [sp, #4]
    cc50:	2001      	movs	r0, #1
    cc52:	f7ff ffbc 	bl	cbce <getStackedReg>
    cc56:	4603      	mov	r3, r0
    cc58:	930a      	str	r3, [sp, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    cc5a:	9901      	ldr	r1, [sp, #4]
    cc5c:	2002      	movs	r0, #2
    cc5e:	f7ff ffb6 	bl	cbce <getStackedReg>
    cc62:	4603      	mov	r3, r0
    cc64:	930b      	str	r3, [sp, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    cc66:	9901      	ldr	r1, [sp, #4]
    cc68:	2003      	movs	r0, #3
    cc6a:	f7ff ffb0 	bl	cbce <getStackedReg>
    cc6e:	4603      	mov	r3, r0
    cc70:	930c      	str	r3, [sp, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    cc72:	9901      	ldr	r1, [sp, #4]
    cc74:	2004      	movs	r0, #4
    cc76:	f7ff ffaa 	bl	cbce <getStackedReg>
    cc7a:	4603      	mov	r3, r0
    cc7c:	930d      	str	r3, [sp, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    cc7e:	9901      	ldr	r1, [sp, #4]
    cc80:	2005      	movs	r0, #5
    cc82:	f7ff ffa4 	bl	cbce <getStackedReg>
    cc86:	4603      	mov	r3, r0
    cc88:	930e      	str	r3, [sp, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    cc8a:	9901      	ldr	r1, [sp, #4]
    cc8c:	2006      	movs	r0, #6
    cc8e:	f7ff ff9e 	bl	cbce <getStackedReg>
    cc92:	4603      	mov	r3, r0
    cc94:	930f      	str	r3, [sp, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    cc96:	9901      	ldr	r1, [sp, #4]
    cc98:	2007      	movs	r0, #7
    cc9a:	f7ff ff98 	bl	cbce <getStackedReg>
    cc9e:	4603      	mov	r3, r0
    cca0:	9310      	str	r3, [sp, #64]	; 0x40
    //
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_get(&sHalFaultData);
#else
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    cca2:	ab03      	add	r3, sp, #12
    cca4:	4619      	mov	r1, r3
    cca6:	2002      	movs	r0, #2
    cca8:	f002 f95a 	bl	ef60 <am_hal_mcuctrl_info_get>
      am_util_stdio_printf("   SYS Fault Address: 0x%08X\n", sHalFaultData.ui32SYS);
    }

#endif

    u32Mask = 0;
    ccac:	2300      	movs	r3, #0
    ccae:	9315      	str	r3, [sp, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    ccb0:	e7fe      	b.n	ccb0 <am_util_faultisr_collect_data+0xd4>
    ccb2:	bf00      	nop
    ccb4:	e000ed28 	.word	0xe000ed28
    ccb8:	e000ed38 	.word	0xe000ed38

0000ccbc <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    ccbc:	b082      	sub	sp, #8
    ccbe:	9001      	str	r0, [sp, #4]
    g_pfnCharPrint = pfnCharPrint;
    ccc0:	4a02      	ldr	r2, [pc, #8]	; (cccc <am_util_stdio_printf_init+0x10>)
    ccc2:	9b01      	ldr	r3, [sp, #4]
    ccc4:	6013      	str	r3, [r2, #0]
}
    ccc6:	bf00      	nop
    ccc8:	b002      	add	sp, #8
    ccca:	4770      	bx	lr
    cccc:	100078e8 	.word	0x100078e8

0000ccd0 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    ccd0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    ccd4:	b098      	sub	sp, #96	; 0x60
    ccd6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    ccda:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    ccde:	f04f 0000 	mov.w	r0, #0
    cce2:	f04f 0100 	mov.w	r1, #0
    cce6:	0018      	movs	r0, r3
    cce8:	2100      	movs	r1, #0
    ccea:	ea50 0301 	orrs.w	r3, r0, r1
    ccee:	f000 80b0 	beq.w	ce52 <divu64_10+0x182>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    ccf2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    ccf6:	f04f 0400 	mov.w	r4, #0
    ccfa:	f04f 0500 	mov.w	r5, #0
    ccfe:	0854      	lsrs	r4, r2, #1
    cd00:	ea44 74c3 	orr.w	r4, r4, r3, lsl #31
    cd04:	085d      	lsrs	r5, r3, #1
    cd06:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    cd0a:	f04f 0000 	mov.w	r0, #0
    cd0e:	f04f 0100 	mov.w	r1, #0
    cd12:	0890      	lsrs	r0, r2, #2
    cd14:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
    cd18:	0899      	lsrs	r1, r3, #2
    cd1a:	eb14 0a00 	adds.w	sl, r4, r0
    cd1e:	eb45 0b01 	adc.w	fp, r5, r1
    cd22:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
        q64 += (q64 >> 4);
    cd26:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cd2a:	f04f 0000 	mov.w	r0, #0
    cd2e:	f04f 0100 	mov.w	r1, #0
    cd32:	0910      	lsrs	r0, r2, #4
    cd34:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
    cd38:	0919      	lsrs	r1, r3, #4
    cd3a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cd3e:	1814      	adds	r4, r2, r0
    cd40:	9402      	str	r4, [sp, #8]
    cd42:	414b      	adcs	r3, r1
    cd44:	9303      	str	r3, [sp, #12]
    cd46:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    cd4a:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 8);
    cd4e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cd52:	f04f 0000 	mov.w	r0, #0
    cd56:	f04f 0100 	mov.w	r1, #0
    cd5a:	0a10      	lsrs	r0, r2, #8
    cd5c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
    cd60:	0a19      	lsrs	r1, r3, #8
    cd62:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cd66:	1814      	adds	r4, r2, r0
    cd68:	9404      	str	r4, [sp, #16]
    cd6a:	414b      	adcs	r3, r1
    cd6c:	9305      	str	r3, [sp, #20]
    cd6e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    cd72:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 16);
    cd76:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cd7a:	f04f 0000 	mov.w	r0, #0
    cd7e:	f04f 0100 	mov.w	r1, #0
    cd82:	0c10      	lsrs	r0, r2, #16
    cd84:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    cd88:	0c19      	lsrs	r1, r3, #16
    cd8a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cd8e:	1814      	adds	r4, r2, r0
    cd90:	9406      	str	r4, [sp, #24]
    cd92:	414b      	adcs	r3, r1
    cd94:	9307      	str	r3, [sp, #28]
    cd96:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
    cd9a:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 32);
    cd9e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cda2:	f04f 0000 	mov.w	r0, #0
    cda6:	f04f 0100 	mov.w	r1, #0
    cdaa:	0018      	movs	r0, r3
    cdac:	2100      	movs	r1, #0
    cdae:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cdb2:	1814      	adds	r4, r2, r0
    cdb4:	9408      	str	r4, [sp, #32]
    cdb6:	414b      	adcs	r3, r1
    cdb8:	9309      	str	r3, [sp, #36]	; 0x24
    cdba:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
    cdbe:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 >>= 3;
    cdc2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    cdc6:	f04f 0200 	mov.w	r2, #0
    cdca:	f04f 0300 	mov.w	r3, #0
    cdce:	08c2      	lsrs	r2, r0, #3
    cdd0:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    cdd4:	08cb      	lsrs	r3, r1, #3
    cdd6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
        r64 = ui64Val - q64*10;
    cdda:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
    cdde:	4622      	mov	r2, r4
    cde0:	462b      	mov	r3, r5
    cde2:	f04f 0000 	mov.w	r0, #0
    cde6:	f04f 0100 	mov.w	r1, #0
    cdea:	0099      	lsls	r1, r3, #2
    cdec:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
    cdf0:	0090      	lsls	r0, r2, #2
    cdf2:	4602      	mov	r2, r0
    cdf4:	460b      	mov	r3, r1
    cdf6:	1916      	adds	r6, r2, r4
    cdf8:	eb43 0705 	adc.w	r7, r3, r5
    cdfc:	19b3      	adds	r3, r6, r6
    cdfe:	930a      	str	r3, [sp, #40]	; 0x28
    ce00:	eb47 0307 	adc.w	r3, r7, r7
    ce04:	930b      	str	r3, [sp, #44]	; 0x2c
    ce06:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    ce0a:	4630      	mov	r0, r6
    ce0c:	4639      	mov	r1, r7
    ce0e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    ce12:	1a14      	subs	r4, r2, r0
    ce14:	940c      	str	r4, [sp, #48]	; 0x30
    ce16:	eb63 0301 	sbc.w	r3, r3, r1
    ce1a:	930d      	str	r3, [sp, #52]	; 0x34
    ce1c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    ce20:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
        return q64 + ((r64 + 6) >> 4);
    ce24:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    ce28:	f112 0806 	adds.w	r8, r2, #6
    ce2c:	f143 0900 	adc.w	r9, r3, #0
    ce30:	f04f 0200 	mov.w	r2, #0
    ce34:	f04f 0300 	mov.w	r3, #0
    ce38:	ea4f 1218 	mov.w	r2, r8, lsr #4
    ce3c:	ea42 7209 	orr.w	r2, r2, r9, lsl #28
    ce40:	ea4f 1319 	mov.w	r3, r9, lsr #4
    ce44:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    ce48:	1814      	adds	r4, r2, r0
    ce4a:	9400      	str	r4, [sp, #0]
    ce4c:	414b      	adcs	r3, r1
    ce4e:	9301      	str	r3, [sp, #4]
    ce50:	e02a      	b.n	cea8 <divu64_10+0x1d8>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    ce52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ce54:	9317      	str	r3, [sp, #92]	; 0x5c
        q32 = (ui32Val>>1) + (ui32Val>>2);
    ce56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ce58:	085a      	lsrs	r2, r3, #1
    ce5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ce5c:	089b      	lsrs	r3, r3, #2
    ce5e:	4413      	add	r3, r2
    ce60:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 4);
    ce62:	9b16      	ldr	r3, [sp, #88]	; 0x58
    ce64:	091b      	lsrs	r3, r3, #4
    ce66:	9a16      	ldr	r2, [sp, #88]	; 0x58
    ce68:	4413      	add	r3, r2
    ce6a:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 8);
    ce6c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    ce6e:	0a1b      	lsrs	r3, r3, #8
    ce70:	9a16      	ldr	r2, [sp, #88]	; 0x58
    ce72:	4413      	add	r3, r2
    ce74:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 16);
    ce76:	9b16      	ldr	r3, [sp, #88]	; 0x58
    ce78:	0c1b      	lsrs	r3, r3, #16
    ce7a:	9a16      	ldr	r2, [sp, #88]	; 0x58
    ce7c:	4413      	add	r3, r2
    ce7e:	9316      	str	r3, [sp, #88]	; 0x58
        q32 >>= 3;
    ce80:	9b16      	ldr	r3, [sp, #88]	; 0x58
    ce82:	08db      	lsrs	r3, r3, #3
    ce84:	9316      	str	r3, [sp, #88]	; 0x58
        r32 = ui32Val - q32*10;
    ce86:	9a16      	ldr	r2, [sp, #88]	; 0x58
    ce88:	4613      	mov	r3, r2
    ce8a:	009b      	lsls	r3, r3, #2
    ce8c:	4413      	add	r3, r2
    ce8e:	005b      	lsls	r3, r3, #1
    ce90:	461a      	mov	r2, r3
    ce92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ce94:	1a9b      	subs	r3, r3, r2
    ce96:	9315      	str	r3, [sp, #84]	; 0x54
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    ce98:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ce9a:	3306      	adds	r3, #6
    ce9c:	091a      	lsrs	r2, r3, #4
    ce9e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    cea0:	4413      	add	r3, r2
    cea2:	2200      	movs	r2, #0
    cea4:	9300      	str	r3, [sp, #0]
    cea6:	9201      	str	r2, [sp, #4]
    }
}
    cea8:	e9dd 2300 	ldrd	r2, r3, [sp]
    ceac:	4610      	mov	r0, r2
    ceae:	4619      	mov	r1, r3
    ceb0:	b018      	add	sp, #96	; 0x60
    ceb2:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    ceb6:	4770      	bx	lr

0000ceb8 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    ceb8:	b500      	push	{lr}
    ceba:	b085      	sub	sp, #20
    cebc:	e9cd 0100 	strd	r0, r1, [sp]
    int iNDigits = ui64Val ? 0 : 1;
    cec0:	9a00      	ldr	r2, [sp, #0]
    cec2:	9b01      	ldr	r3, [sp, #4]
    cec4:	4313      	orrs	r3, r2
    cec6:	2b00      	cmp	r3, #0
    cec8:	bf0c      	ite	eq
    ceca:	2301      	moveq	r3, #1
    cecc:	2300      	movne	r3, #0
    cece:	b2db      	uxtb	r3, r3
    ced0:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    ced2:	e008      	b.n	cee6 <ndigits_in_u64+0x2e>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    ced4:	e9dd 0100 	ldrd	r0, r1, [sp]
    ced8:	f7ff fefa 	bl	ccd0 <divu64_10>
    cedc:	e9cd 0100 	strd	r0, r1, [sp]
        ++iNDigits;
    cee0:	9b03      	ldr	r3, [sp, #12]
    cee2:	3301      	adds	r3, #1
    cee4:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    cee6:	e9dd 2300 	ldrd	r2, r3, [sp]
    ceea:	4313      	orrs	r3, r2
    ceec:	d1f2      	bne.n	ced4 <ndigits_in_u64+0x1c>
    }

    return iNDigits;
    ceee:	9b03      	ldr	r3, [sp, #12]
}
    cef0:	4618      	mov	r0, r3
    cef2:	b005      	add	sp, #20
    cef4:	f85d fb04 	ldr.w	pc, [sp], #4

0000cef8 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    cef8:	b530      	push	{r4, r5, lr}
    cefa:	b083      	sub	sp, #12
    cefc:	e9cd 0100 	strd	r0, r1, [sp]
    if ( i64Val < 0 )
    cf00:	e9dd 2300 	ldrd	r2, r3, [sp]
    cf04:	2b00      	cmp	r3, #0
    cf06:	da07      	bge.n	cf18 <ndigits_in_i64+0x20>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    cf08:	e9dd 2300 	ldrd	r2, r3, [sp]
    cf0c:	2100      	movs	r1, #0
    cf0e:	4254      	negs	r4, r2
    cf10:	eb61 0503 	sbc.w	r5, r1, r3
    cf14:	e9cd 4500 	strd	r4, r5, [sp]
    }

    return ndigits_in_u64((uint64_t) i64Val);
    cf18:	e9dd 2300 	ldrd	r2, r3, [sp]
    cf1c:	4610      	mov	r0, r2
    cf1e:	4619      	mov	r1, r3
    cf20:	f7ff ffca 	bl	ceb8 <ndigits_in_u64>
    cf24:	4603      	mov	r3, r0
}
    cf26:	4618      	mov	r0, r3
    cf28:	b003      	add	sp, #12
    cf2a:	bd30      	pop	{r4, r5, pc}

0000cf2c <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    cf2c:	b084      	sub	sp, #16
    cf2e:	e9cd 0100 	strd	r0, r1, [sp]
    int iDigits = ui64Val ? 0 : 1;
    cf32:	9a00      	ldr	r2, [sp, #0]
    cf34:	9b01      	ldr	r3, [sp, #4]
    cf36:	4313      	orrs	r3, r2
    cf38:	2b00      	cmp	r3, #0
    cf3a:	bf0c      	ite	eq
    cf3c:	2301      	moveq	r3, #1
    cf3e:	2300      	movne	r3, #0
    cf40:	b2db      	uxtb	r3, r3
    cf42:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    cf44:	e00e      	b.n	cf64 <ndigits_in_hex+0x38>
    {
        ui64Val >>= 4;
    cf46:	e9dd 0100 	ldrd	r0, r1, [sp]
    cf4a:	f04f 0200 	mov.w	r2, #0
    cf4e:	f04f 0300 	mov.w	r3, #0
    cf52:	0902      	lsrs	r2, r0, #4
    cf54:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    cf58:	090b      	lsrs	r3, r1, #4
    cf5a:	e9cd 2300 	strd	r2, r3, [sp]
        ++iDigits;
    cf5e:	9b03      	ldr	r3, [sp, #12]
    cf60:	3301      	adds	r3, #1
    cf62:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    cf64:	e9dd 2300 	ldrd	r2, r3, [sp]
    cf68:	4313      	orrs	r3, r2
    cf6a:	d1ec      	bne.n	cf46 <ndigits_in_hex+0x1a>
    }

    return iDigits;
    cf6c:	9b03      	ldr	r3, [sp, #12]
}
    cf6e:	4618      	mov	r0, r3
    cf70:	b004      	add	sp, #16
    cf72:	4770      	bx	lr

0000cf74 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    cf74:	b086      	sub	sp, #24
    cf76:	9001      	str	r0, [sp, #4]
    cf78:	9100      	str	r1, [sp, #0]
    bool bNeg = false;
    cf7a:	2300      	movs	r3, #0
    cf7c:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    cf80:	2300      	movs	r3, #0
    cf82:	9304      	str	r3, [sp, #16]
    cf84:	2300      	movs	r3, #0
    cf86:	9303      	str	r3, [sp, #12]

    if ( *pcStr == '-')
    cf88:	9b01      	ldr	r3, [sp, #4]
    cf8a:	781b      	ldrb	r3, [r3, #0]
    cf8c:	2b2d      	cmp	r3, #45	; 0x2d
    cf8e:	d11c      	bne.n	cfca <decstr_to_int+0x56>
    {
        bNeg = true;
    cf90:	2301      	movs	r3, #1
    cf92:	f88d 3017 	strb.w	r3, [sp, #23]
        pcStr++;
    cf96:	9b01      	ldr	r3, [sp, #4]
    cf98:	3301      	adds	r3, #1
    cf9a:	9301      	str	r3, [sp, #4]
        uCnt++;
    cf9c:	9b03      	ldr	r3, [sp, #12]
    cf9e:	3301      	adds	r3, #1
    cfa0:	9303      	str	r3, [sp, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cfa2:	e012      	b.n	cfca <decstr_to_int+0x56>
    {
        ++uCnt;
    cfa4:	9b03      	ldr	r3, [sp, #12]
    cfa6:	3301      	adds	r3, #1
    cfa8:	9303      	str	r3, [sp, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    cfaa:	9a04      	ldr	r2, [sp, #16]
    cfac:	4613      	mov	r3, r2
    cfae:	009b      	lsls	r3, r3, #2
    cfb0:	4413      	add	r3, r2
    cfb2:	005b      	lsls	r3, r3, #1
    cfb4:	9304      	str	r3, [sp, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    cfb6:	9b01      	ldr	r3, [sp, #4]
    cfb8:	781b      	ldrb	r3, [r3, #0]
    cfba:	461a      	mov	r2, r3
    cfbc:	9b04      	ldr	r3, [sp, #16]
    cfbe:	4413      	add	r3, r2
    cfc0:	3b30      	subs	r3, #48	; 0x30
    cfc2:	9304      	str	r3, [sp, #16]
        pcStr++;
    cfc4:	9b01      	ldr	r3, [sp, #4]
    cfc6:	3301      	adds	r3, #1
    cfc8:	9301      	str	r3, [sp, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cfca:	9b01      	ldr	r3, [sp, #4]
    cfcc:	781b      	ldrb	r3, [r3, #0]
    cfce:	2b2f      	cmp	r3, #47	; 0x2f
    cfd0:	d903      	bls.n	cfda <decstr_to_int+0x66>
    cfd2:	9b01      	ldr	r3, [sp, #4]
    cfd4:	781b      	ldrb	r3, [r3, #0]
    cfd6:	2b39      	cmp	r3, #57	; 0x39
    cfd8:	d9e4      	bls.n	cfa4 <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    cfda:	9b00      	ldr	r3, [sp, #0]
    cfdc:	2b00      	cmp	r3, #0
    cfde:	d002      	beq.n	cfe6 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    cfe0:	9b00      	ldr	r3, [sp, #0]
    cfe2:	9a03      	ldr	r2, [sp, #12]
    cfe4:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    cfe6:	f89d 3017 	ldrb.w	r3, [sp, #23]
    cfea:	2b00      	cmp	r3, #0
    cfec:	d002      	beq.n	cff4 <decstr_to_int+0x80>
    cfee:	9b04      	ldr	r3, [sp, #16]
    cff0:	425b      	negs	r3, r3
    cff2:	e000      	b.n	cff6 <decstr_to_int+0x82>
    cff4:	9b04      	ldr	r3, [sp, #16]
}
    cff6:	4618      	mov	r0, r3
    cff8:	b006      	add	sp, #24
    cffa:	4770      	bx	lr

0000cffc <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    cffc:	b500      	push	{lr}
    cffe:	b091      	sub	sp, #68	; 0x44
    d000:	e9cd 0102 	strd	r0, r1, [sp, #8]
    d004:	9201      	str	r2, [sp, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    d006:	2300      	movs	r3, #0
    d008:	930f      	str	r3, [sp, #60]	; 0x3c
    d00a:	2300      	movs	r3, #0
    d00c:	930e      	str	r3, [sp, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    d00e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    d012:	f7ff fe5d 	bl	ccd0 <divu64_10>
    d016:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    d01a:	9902      	ldr	r1, [sp, #8]
    d01c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d01e:	4613      	mov	r3, r2
    d020:	009b      	lsls	r3, r3, #2
    d022:	4413      	add	r3, r2
    d024:	005b      	lsls	r3, r3, #1
    d026:	1acb      	subs	r3, r1, r3
    d028:	930b      	str	r3, [sp, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    d02a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d02c:	b2da      	uxtb	r2, r3
    d02e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d030:	1c59      	adds	r1, r3, #1
    d032:	910f      	str	r1, [sp, #60]	; 0x3c
    d034:	3230      	adds	r2, #48	; 0x30
    d036:	b2d2      	uxtb	r2, r2
    d038:	3340      	adds	r3, #64	; 0x40
    d03a:	446b      	add	r3, sp
    d03c:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    d040:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    d044:	e9cd 2302 	strd	r2, r3, [sp, #8]
    } while ( ui64Val );
    d048:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    d04c:	4313      	orrs	r3, r2
    d04e:	d1de      	bne.n	d00e <uint64_to_str+0x12>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    d050:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d052:	930e      	str	r3, [sp, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    d054:	9b01      	ldr	r3, [sp, #4]
    d056:	2b00      	cmp	r3, #0
    d058:	d010      	beq.n	d07c <uint64_to_str+0x80>
    {
        while ( ix-- )
    d05a:	e007      	b.n	d06c <uint64_to_str+0x70>
        {
            *pcBuf++ = tbuf[ix];
    d05c:	9b01      	ldr	r3, [sp, #4]
    d05e:	1c5a      	adds	r2, r3, #1
    d060:	9201      	str	r2, [sp, #4]
    d062:	a904      	add	r1, sp, #16
    d064:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    d066:	440a      	add	r2, r1
    d068:	7812      	ldrb	r2, [r2, #0]
    d06a:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    d06c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d06e:	1e5a      	subs	r2, r3, #1
    d070:	920f      	str	r2, [sp, #60]	; 0x3c
    d072:	2b00      	cmp	r3, #0
    d074:	d1f2      	bne.n	d05c <uint64_to_str+0x60>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    d076:	9b01      	ldr	r3, [sp, #4]
    d078:	2200      	movs	r2, #0
    d07a:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    d07c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
}
    d07e:	4618      	mov	r0, r3
    d080:	b011      	add	sp, #68	; 0x44
    d082:	f85d fb04 	ldr.w	pc, [sp], #4

0000d086 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    d086:	b08c      	sub	sp, #48	; 0x30
    d088:	e9cd 0102 	strd	r0, r1, [sp, #8]
    d08c:	9201      	str	r2, [sp, #4]
    d08e:	f88d 3003 	strb.w	r3, [sp, #3]
    int iNumDig, ix = 0;
    d092:	2300      	movs	r3, #0
    d094:	930b      	str	r3, [sp, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    d096:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    d09a:	4313      	orrs	r3, r2
    d09c:	d135      	bne.n	d10a <uint64_to_hexstr+0x84>
    {
        tbuf[ix++] = '0';   // Print a '0'
    d09e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d0a0:	1c5a      	adds	r2, r3, #1
    d0a2:	920b      	str	r2, [sp, #44]	; 0x2c
    d0a4:	3330      	adds	r3, #48	; 0x30
    d0a6:	446b      	add	r3, sp
    d0a8:	2230      	movs	r2, #48	; 0x30
    d0aa:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    d0ae:	e02c      	b.n	d10a <uint64_to_hexstr+0x84>
    {
        cCh = ui64Val & 0xf;
    d0b0:	f89d 3008 	ldrb.w	r3, [sp, #8]
    d0b4:	f003 030f 	and.w	r3, r3, #15
    d0b8:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    d0bc:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    d0c0:	2b09      	cmp	r3, #9
    d0c2:	d90b      	bls.n	d0dc <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    d0c4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d0c8:	2b00      	cmp	r3, #0
    d0ca:	d001      	beq.n	d0d0 <uint64_to_hexstr+0x4a>
    d0cc:	2227      	movs	r2, #39	; 0x27
    d0ce:	e000      	b.n	d0d2 <uint64_to_hexstr+0x4c>
    d0d0:	2207      	movs	r2, #7
    d0d2:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    d0d6:	4413      	add	r3, r2
    d0d8:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    d0dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d0de:	1c5a      	adds	r2, r3, #1
    d0e0:	920b      	str	r2, [sp, #44]	; 0x2c
    d0e2:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    d0e6:	3230      	adds	r2, #48	; 0x30
    d0e8:	b2d2      	uxtb	r2, r2
    d0ea:	3330      	adds	r3, #48	; 0x30
    d0ec:	446b      	add	r3, sp
    d0ee:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    d0f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    d0f6:	f04f 0200 	mov.w	r2, #0
    d0fa:	f04f 0300 	mov.w	r3, #0
    d0fe:	0902      	lsrs	r2, r0, #4
    d100:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    d104:	090b      	lsrs	r3, r1, #4
    d106:	e9cd 2302 	strd	r2, r3, [sp, #8]
    while ( ui64Val )
    d10a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    d10e:	4313      	orrs	r3, r2
    d110:	d1ce      	bne.n	d0b0 <uint64_to_hexstr+0x2a>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    d112:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d114:	9309      	str	r3, [sp, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    d116:	9b01      	ldr	r3, [sp, #4]
    d118:	2b00      	cmp	r3, #0
    d11a:	d010      	beq.n	d13e <uint64_to_hexstr+0xb8>
    {
        while (ix--)
    d11c:	e007      	b.n	d12e <uint64_to_hexstr+0xa8>
        {
            *pcBuf++ = tbuf[ix];
    d11e:	9b01      	ldr	r3, [sp, #4]
    d120:	1c5a      	adds	r2, r3, #1
    d122:	9201      	str	r2, [sp, #4]
    d124:	a904      	add	r1, sp, #16
    d126:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d128:	440a      	add	r2, r1
    d12a:	7812      	ldrb	r2, [r2, #0]
    d12c:	701a      	strb	r2, [r3, #0]
        while (ix--)
    d12e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d130:	1e5a      	subs	r2, r3, #1
    d132:	920b      	str	r2, [sp, #44]	; 0x2c
    d134:	2b00      	cmp	r3, #0
    d136:	d1f2      	bne.n	d11e <uint64_to_hexstr+0x98>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    d138:	9b01      	ldr	r3, [sp, #4]
    d13a:	2200      	movs	r2, #0
    d13c:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    d13e:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    d140:	4618      	mov	r0, r3
    d142:	b00c      	add	sp, #48	; 0x30
    d144:	4770      	bx	lr

0000d146 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    d146:	b084      	sub	sp, #16
    d148:	9001      	str	r0, [sp, #4]
    uint32_t ui32RetVal = 0;
    d14a:	2300      	movs	r3, #0
    d14c:	9303      	str	r3, [sp, #12]
    if ( !pcBuf )
    d14e:	9b01      	ldr	r3, [sp, #4]
    d150:	2b00      	cmp	r3, #0
    d152:	d104      	bne.n	d15e <simple_strlen+0x18>
    {
        return ui32RetVal;
    d154:	9b03      	ldr	r3, [sp, #12]
    d156:	e009      	b.n	d16c <simple_strlen+0x26>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    d158:	9b03      	ldr	r3, [sp, #12]
    d15a:	3301      	adds	r3, #1
    d15c:	9303      	str	r3, [sp, #12]
    while ( *pcBuf++ )
    d15e:	9b01      	ldr	r3, [sp, #4]
    d160:	1c5a      	adds	r2, r3, #1
    d162:	9201      	str	r2, [sp, #4]
    d164:	781b      	ldrb	r3, [r3, #0]
    d166:	2b00      	cmp	r3, #0
    d168:	d1f6      	bne.n	d158 <simple_strlen+0x12>
    }
    return ui32RetVal;
    d16a:	9b03      	ldr	r3, [sp, #12]
}
    d16c:	4618      	mov	r0, r3
    d16e:	b004      	add	sp, #16
    d170:	4770      	bx	lr

0000d172 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    d172:	b086      	sub	sp, #24
    d174:	9003      	str	r0, [sp, #12]
    d176:	460b      	mov	r3, r1
    d178:	9201      	str	r2, [sp, #4]
    d17a:	f88d 300b 	strb.w	r3, [sp, #11]
    int32_t i32Cnt = 0;
    d17e:	2300      	movs	r3, #0
    d180:	9305      	str	r3, [sp, #20]

    if ( i32NumChars <= 0 )
    d182:	9b01      	ldr	r3, [sp, #4]
    d184:	2b00      	cmp	r3, #0
    d186:	dc0d      	bgt.n	d1a4 <padbuffer+0x32>
    {
        return i32Cnt;
    d188:	9b05      	ldr	r3, [sp, #20]
    d18a:	e011      	b.n	d1b0 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    d18c:	9b03      	ldr	r3, [sp, #12]
    d18e:	2b00      	cmp	r3, #0
    d190:	d005      	beq.n	d19e <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    d192:	9b03      	ldr	r3, [sp, #12]
    d194:	1c5a      	adds	r2, r3, #1
    d196:	9203      	str	r2, [sp, #12]
    d198:	f89d 200b 	ldrb.w	r2, [sp, #11]
    d19c:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    d19e:	9b05      	ldr	r3, [sp, #20]
    d1a0:	3301      	adds	r3, #1
    d1a2:	9305      	str	r3, [sp, #20]
    while ( i32NumChars-- )
    d1a4:	9b01      	ldr	r3, [sp, #4]
    d1a6:	1e5a      	subs	r2, r3, #1
    d1a8:	9201      	str	r2, [sp, #4]
    d1aa:	2b00      	cmp	r3, #0
    d1ac:	d1ee      	bne.n	d18c <padbuffer+0x1a>
    }

    return i32Cnt;
    d1ae:	9b05      	ldr	r3, [sp, #20]
}
    d1b0:	4618      	mov	r0, r3
    d1b2:	b006      	add	sp, #24
    d1b4:	4770      	bx	lr
	...

0000d1b8 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    d1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d1ba:	b08f      	sub	sp, #60	; 0x3c
    d1bc:	ed8d 0a03 	vstr	s0, [sp, #12]
    d1c0:	9002      	str	r0, [sp, #8]
    d1c2:	9101      	str	r1, [sp, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    d1c4:	9b02      	ldr	r3, [sp, #8]
    d1c6:	681b      	ldr	r3, [r3, #0]
    d1c8:	9309      	str	r3, [sp, #36]	; 0x24
    if (iBufSize < 4)
    d1ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d1cc:	2b03      	cmp	r3, #3
    d1ce:	dc02      	bgt.n	d1d6 <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    d1d0:	f06f 0302 	mvn.w	r3, #2
    d1d4:	e0e9      	b.n	d3aa <ftoa+0x1f2>
    }

    if (fValue == 0.0f)
    d1d6:	eddd 7a03 	vldr	s15, [sp, #12]
    d1da:	eef5 7a40 	vcmp.f32	s15, #0.0
    d1de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d1e2:	d104      	bne.n	d1ee <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    d1e4:	9b02      	ldr	r3, [sp, #8]
    d1e6:	4a72      	ldr	r2, [pc, #456]	; (d3b0 <ftoa+0x1f8>)
    d1e8:	601a      	str	r2, [r3, #0]
        return 3;
    d1ea:	2303      	movs	r3, #3
    d1ec:	e0dd      	b.n	d3aa <ftoa+0x1f2>
    }

    pcBufInitial = pcBuf;
    d1ee:	9b02      	ldr	r3, [sp, #8]
    d1f0:	9308      	str	r3, [sp, #32]

    unFloatValue.F = fValue;
    d1f2:	9b03      	ldr	r3, [sp, #12]
    d1f4:	9304      	str	r3, [sp, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    d1f6:	9b04      	ldr	r3, [sp, #16]
    d1f8:	15db      	asrs	r3, r3, #23
    d1fa:	b2db      	uxtb	r3, r3
    d1fc:	3b7f      	subs	r3, #127	; 0x7f
    d1fe:	9307      	str	r3, [sp, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    d200:	9b04      	ldr	r3, [sp, #16]
    d202:	f3c3 0316 	ubfx	r3, r3, #0, #23
    d206:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    d20a:	9306      	str	r3, [sp, #24]
    i32FracPart = 0;
    d20c:	2300      	movs	r3, #0
    d20e:	930c      	str	r3, [sp, #48]	; 0x30
    i32IntPart = 0;
    d210:	2300      	movs	r3, #0
    d212:	930d      	str	r3, [sp, #52]	; 0x34

    if (iExp2 >= 31)
    d214:	9b07      	ldr	r3, [sp, #28]
    d216:	2b1e      	cmp	r3, #30
    d218:	dd02      	ble.n	d220 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    d21a:	f06f 0301 	mvn.w	r3, #1
    d21e:	e0c4      	b.n	d3aa <ftoa+0x1f2>
    }
    else if (iExp2 < -23)
    d220:	9b07      	ldr	r3, [sp, #28]
    d222:	f113 0f17 	cmn.w	r3, #23
    d226:	da02      	bge.n	d22e <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    d228:	f04f 33ff 	mov.w	r3, #4294967295
    d22c:	e0bd      	b.n	d3aa <ftoa+0x1f2>
    }
    else if (iExp2 >= 23)
    d22e:	9b07      	ldr	r3, [sp, #28]
    d230:	2b16      	cmp	r3, #22
    d232:	dd06      	ble.n	d242 <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    d234:	9b07      	ldr	r3, [sp, #28]
    d236:	3b17      	subs	r3, #23
    d238:	9a06      	ldr	r2, [sp, #24]
    d23a:	fa02 f303 	lsl.w	r3, r2, r3
    d23e:	930d      	str	r3, [sp, #52]	; 0x34
    d240:	e01a      	b.n	d278 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    d242:	9b07      	ldr	r3, [sp, #28]
    d244:	2b00      	cmp	r3, #0
    d246:	db0f      	blt.n	d268 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    d248:	9b07      	ldr	r3, [sp, #28]
    d24a:	f1c3 0317 	rsb	r3, r3, #23
    d24e:	9a06      	ldr	r2, [sp, #24]
    d250:	fa42 f303 	asr.w	r3, r2, r3
    d254:	930d      	str	r3, [sp, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    d256:	9b07      	ldr	r3, [sp, #28]
    d258:	3301      	adds	r3, #1
    d25a:	9a06      	ldr	r2, [sp, #24]
    d25c:	fa02 f303 	lsl.w	r3, r2, r3
    d260:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    d264:	930c      	str	r3, [sp, #48]	; 0x30
    d266:	e007      	b.n	d278 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    d268:	9b06      	ldr	r3, [sp, #24]
    d26a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    d26e:	9b07      	ldr	r3, [sp, #28]
    d270:	43db      	mvns	r3, r3
    d272:	fa42 f303 	asr.w	r3, r2, r3
    d276:	930c      	str	r3, [sp, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    d278:	9b04      	ldr	r3, [sp, #16]
    d27a:	2b00      	cmp	r3, #0
    d27c:	da04      	bge.n	d288 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    d27e:	9b02      	ldr	r3, [sp, #8]
    d280:	1c5a      	adds	r2, r3, #1
    d282:	9202      	str	r2, [sp, #8]
    d284:	222d      	movs	r2, #45	; 0x2d
    d286:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    d288:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d28a:	2b00      	cmp	r3, #0
    d28c:	d105      	bne.n	d29a <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    d28e:	9b02      	ldr	r3, [sp, #8]
    d290:	1c5a      	adds	r2, r3, #1
    d292:	9202      	str	r2, [sp, #8]
    d294:	2230      	movs	r2, #48	; 0x30
    d296:	701a      	strb	r2, [r3, #0]
    d298:	e023      	b.n	d2e2 <ftoa+0x12a>
    }
    else
    {
        if (i32IntPart > 0)
    d29a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d29c:	2b00      	cmp	r3, #0
    d29e:	dd09      	ble.n	d2b4 <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
    d2a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d2a2:	17da      	asrs	r2, r3, #31
    d2a4:	461e      	mov	r6, r3
    d2a6:	4617      	mov	r7, r2
    d2a8:	9a02      	ldr	r2, [sp, #8]
    d2aa:	4630      	mov	r0, r6
    d2ac:	4639      	mov	r1, r7
    d2ae:	f7ff fea5 	bl	cffc <uint64_to_str>
    d2b2:	e012      	b.n	d2da <ftoa+0x122>
        }
        else
        {
            *pcBuf++ = '-';
    d2b4:	9b02      	ldr	r3, [sp, #8]
    d2b6:	1c5a      	adds	r2, r3, #1
    d2b8:	9202      	str	r2, [sp, #8]
    d2ba:	222d      	movs	r2, #45	; 0x2d
    d2bc:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    d2be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d2c0:	425b      	negs	r3, r3
    d2c2:	17da      	asrs	r2, r3, #31
    d2c4:	461c      	mov	r4, r3
    d2c6:	4615      	mov	r5, r2
    d2c8:	9a02      	ldr	r2, [sp, #8]
    d2ca:	4620      	mov	r0, r4
    d2cc:	4629      	mov	r1, r5
    d2ce:	f7ff fe95 	bl	cffc <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    d2d2:	e002      	b.n	d2da <ftoa+0x122>
        {
            pcBuf++;
    d2d4:	9b02      	ldr	r3, [sp, #8]
    d2d6:	3301      	adds	r3, #1
    d2d8:	9302      	str	r3, [sp, #8]
        while (*pcBuf)    // Get to end of new string
    d2da:	9b02      	ldr	r3, [sp, #8]
    d2dc:	781b      	ldrb	r3, [r3, #0]
    d2de:	2b00      	cmp	r3, #0
    d2e0:	d1f8      	bne.n	d2d4 <ftoa+0x11c>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    d2e2:	9b02      	ldr	r3, [sp, #8]
    d2e4:	1c5a      	adds	r2, r3, #1
    d2e6:	9202      	str	r2, [sp, #8]
    d2e8:	222e      	movs	r2, #46	; 0x2e
    d2ea:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    d2ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d2ee:	2b00      	cmp	r3, #0
    d2f0:	d105      	bne.n	d2fe <ftoa+0x146>
    {
        *pcBuf++ = '0';
    d2f2:	9b02      	ldr	r3, [sp, #8]
    d2f4:	1c5a      	adds	r2, r3, #1
    d2f6:	9202      	str	r2, [sp, #8]
    d2f8:	2230      	movs	r2, #48	; 0x30
    d2fa:	701a      	strb	r2, [r3, #0]
    d2fc:	e04f      	b.n	d39e <ftoa+0x1e6>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    d2fe:	9a02      	ldr	r2, [sp, #8]
    d300:	9b08      	ldr	r3, [sp, #32]
    d302:	1ad3      	subs	r3, r2, r3
    d304:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d306:	1ad3      	subs	r3, r2, r3
    d308:	3b01      	subs	r3, #1
    d30a:	9305      	str	r3, [sp, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    d30c:	9a05      	ldr	r2, [sp, #20]
    d30e:	9b01      	ldr	r3, [sp, #4]
    d310:	4293      	cmp	r3, r2
    d312:	bfa8      	it	ge
    d314:	4613      	movge	r3, r2
    d316:	9305      	str	r3, [sp, #20]

        for (jx = 0; jx < iMax; jx++)
    d318:	2300      	movs	r3, #0
    d31a:	930a      	str	r3, [sp, #40]	; 0x28
    d31c:	e015      	b.n	d34a <ftoa+0x192>
        {
            i32FracPart *= 10;
    d31e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d320:	4613      	mov	r3, r2
    d322:	009b      	lsls	r3, r3, #2
    d324:	4413      	add	r3, r2
    d326:	005b      	lsls	r3, r3, #1
    d328:	930c      	str	r3, [sp, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d32a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d32c:	161b      	asrs	r3, r3, #24
    d32e:	b2da      	uxtb	r2, r3
    d330:	9b02      	ldr	r3, [sp, #8]
    d332:	1c59      	adds	r1, r3, #1
    d334:	9102      	str	r1, [sp, #8]
    d336:	3230      	adds	r2, #48	; 0x30
    d338:	b2d2      	uxtb	r2, r2
    d33a:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    d33c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d33e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    d342:	930c      	str	r3, [sp, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    d344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d346:	3301      	adds	r3, #1
    d348:	930a      	str	r3, [sp, #40]	; 0x28
    d34a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d34c:	9b05      	ldr	r3, [sp, #20]
    d34e:	429a      	cmp	r2, r3
    d350:	dbe5      	blt.n	d31e <ftoa+0x166>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    d352:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d354:	4613      	mov	r3, r2
    d356:	009b      	lsls	r3, r3, #2
    d358:	4413      	add	r3, r2
    d35a:	005b      	lsls	r3, r3, #1
    d35c:	161b      	asrs	r3, r3, #24
    d35e:	2b04      	cmp	r3, #4
    d360:	dd1d      	ble.n	d39e <ftoa+0x1e6>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    d362:	9b02      	ldr	r3, [sp, #8]
    d364:	3b01      	subs	r3, #1
    d366:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    d368:	e015      	b.n	d396 <ftoa+0x1de>
            {
                if ( *pcBuftmp == '.' )
    d36a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d36c:	781b      	ldrb	r3, [r3, #0]
    d36e:	2b2e      	cmp	r3, #46	; 0x2e
    d370:	d00e      	beq.n	d390 <ftoa+0x1d8>
                {
                }
                else if ( *pcBuftmp == '9' )
    d372:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d374:	781b      	ldrb	r3, [r3, #0]
    d376:	2b39      	cmp	r3, #57	; 0x39
    d378:	d103      	bne.n	d382 <ftoa+0x1ca>
                {
                    *pcBuftmp = '0';
    d37a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d37c:	2230      	movs	r2, #48	; 0x30
    d37e:	701a      	strb	r2, [r3, #0]
    d380:	e006      	b.n	d390 <ftoa+0x1d8>
                }
                else
                {
                    *pcBuftmp += 1;
    d382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d384:	781b      	ldrb	r3, [r3, #0]
    d386:	3301      	adds	r3, #1
    d388:	b2da      	uxtb	r2, r3
    d38a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d38c:	701a      	strb	r2, [r3, #0]
                    break;
    d38e:	e006      	b.n	d39e <ftoa+0x1e6>
                }
                pcBuftmp--;
    d390:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d392:	3b01      	subs	r3, #1
    d394:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    d396:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d398:	9b08      	ldr	r3, [sp, #32]
    d39a:	429a      	cmp	r2, r3
    d39c:	d2e5      	bcs.n	d36a <ftoa+0x1b2>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    d39e:	9b02      	ldr	r3, [sp, #8]
    d3a0:	2200      	movs	r2, #0
    d3a2:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    d3a4:	9a02      	ldr	r2, [sp, #8]
    d3a6:	9b08      	ldr	r3, [sp, #32]
    d3a8:	1ad3      	subs	r3, r2, r3
} // ftoa()
    d3aa:	4618      	mov	r0, r3
    d3ac:	b00f      	add	sp, #60	; 0x3c
    d3ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d3b0:	00302e30 	.word	0x00302e30

0000d3b4 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    d3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d3b8:	b097      	sub	sp, #92	; 0x5c
    d3ba:	9003      	str	r0, [sp, #12]
    d3bc:	9102      	str	r1, [sp, #8]
    d3be:	9201      	str	r2, [sp, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    d3c0:	2300      	movs	r3, #0
    d3c2:	9311      	str	r3, [sp, #68]	; 0x44
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    d3c4:	2300      	movs	r3, #0
    d3c6:	930b      	str	r3, [sp, #44]	; 0x2c

    while ( *pcFmt != 0x0 )
    d3c8:	e2e9      	b.n	d99e <am_util_stdio_vsprintf+0x5ea>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    d3ca:	2306      	movs	r3, #6
    d3cc:	930e      	str	r3, [sp, #56]	; 0x38

        if ( *pcFmt != '%' )
    d3ce:	9b02      	ldr	r3, [sp, #8]
    d3d0:	781b      	ldrb	r3, [r3, #0]
    d3d2:	2b25      	cmp	r3, #37	; 0x25
    d3d4:	d01f      	beq.n	d416 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    d3d6:	9b03      	ldr	r3, [sp, #12]
    d3d8:	2b00      	cmp	r3, #0
    d3da:	d015      	beq.n	d408 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    d3dc:	9b02      	ldr	r3, [sp, #8]
    d3de:	781b      	ldrb	r3, [r3, #0]
    d3e0:	2b0a      	cmp	r3, #10
    d3e2:	d10b      	bne.n	d3fc <am_util_stdio_vsprintf+0x48>
    d3e4:	4ba8      	ldr	r3, [pc, #672]	; (d688 <am_util_stdio_vsprintf+0x2d4>)
    d3e6:	781b      	ldrb	r3, [r3, #0]
    d3e8:	2b00      	cmp	r3, #0
    d3ea:	d007      	beq.n	d3fc <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    d3ec:	9b03      	ldr	r3, [sp, #12]
    d3ee:	1c5a      	adds	r2, r3, #1
    d3f0:	9203      	str	r2, [sp, #12]
    d3f2:	220d      	movs	r2, #13
    d3f4:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    d3f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d3f8:	3301      	adds	r3, #1
    d3fa:	9311      	str	r3, [sp, #68]	; 0x44
                }
                *pcBuf++ = *pcFmt;
    d3fc:	9b03      	ldr	r3, [sp, #12]
    d3fe:	1c5a      	adds	r2, r3, #1
    d400:	9203      	str	r2, [sp, #12]
    d402:	9a02      	ldr	r2, [sp, #8]
    d404:	7812      	ldrb	r2, [r2, #0]
    d406:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    d408:	9b02      	ldr	r3, [sp, #8]
    d40a:	3301      	adds	r3, #1
    d40c:	9302      	str	r3, [sp, #8]
            ++ui32CharCnt;
    d40e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d410:	3301      	adds	r3, #1
    d412:	9311      	str	r3, [sp, #68]	; 0x44
            continue;
    d414:	e2c3      	b.n	d99e <am_util_stdio_vsprintf+0x5ea>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    d416:	9b02      	ldr	r3, [sp, #8]
    d418:	3301      	adds	r3, #1
    d41a:	9302      	str	r3, [sp, #8]
        bLower = bLongLong = false;
    d41c:	2300      	movs	r3, #0
    d41e:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    d422:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d426:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    d42a:	2320      	movs	r3, #32
    d42c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

        if ( *pcFmt == '0' )
    d430:	9b02      	ldr	r3, [sp, #8]
    d432:	781b      	ldrb	r3, [r3, #0]
    d434:	2b30      	cmp	r3, #48	; 0x30
    d436:	d105      	bne.n	d444 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    d438:	2330      	movs	r3, #48	; 0x30
    d43a:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
            ++pcFmt;
    d43e:	9b02      	ldr	r3, [sp, #8]
    d440:	3301      	adds	r3, #1
    d442:	9302      	str	r3, [sp, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    d444:	ab05      	add	r3, sp, #20
    d446:	4619      	mov	r1, r3
    d448:	9802      	ldr	r0, [sp, #8]
    d44a:	f7ff fd93 	bl	cf74 <decstr_to_int>
    d44e:	4603      	mov	r3, r0
    d450:	9310      	str	r3, [sp, #64]	; 0x40
        pcFmt += ui32NumChars;
    d452:	9b05      	ldr	r3, [sp, #20]
    d454:	9a02      	ldr	r2, [sp, #8]
    d456:	4413      	add	r3, r2
    d458:	9302      	str	r3, [sp, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    d45a:	9b02      	ldr	r3, [sp, #8]
    d45c:	781b      	ldrb	r3, [r3, #0]
    d45e:	2b73      	cmp	r3, #115	; 0x73
    d460:	d005      	beq.n	d46e <am_util_stdio_vsprintf+0xba>
    d462:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d464:	2b00      	cmp	r3, #0
    d466:	da02      	bge.n	d46e <am_util_stdio_vsprintf+0xba>
        {
            iWidth = -iWidth;
    d468:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d46a:	425b      	negs	r3, r3
    d46c:	9310      	str	r3, [sp, #64]	; 0x40
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    d46e:	9b02      	ldr	r3, [sp, #8]
    d470:	781b      	ldrb	r3, [r3, #0]
    d472:	2b2e      	cmp	r3, #46	; 0x2e
    d474:	d10d      	bne.n	d492 <am_util_stdio_vsprintf+0xde>
        {
            ++pcFmt;
    d476:	9b02      	ldr	r3, [sp, #8]
    d478:	3301      	adds	r3, #1
    d47a:	9302      	str	r3, [sp, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    d47c:	ab05      	add	r3, sp, #20
    d47e:	4619      	mov	r1, r3
    d480:	9802      	ldr	r0, [sp, #8]
    d482:	f7ff fd77 	bl	cf74 <decstr_to_int>
    d486:	4603      	mov	r3, r0
    d488:	930e      	str	r3, [sp, #56]	; 0x38
            pcFmt += ui32NumChars;
    d48a:	9b05      	ldr	r3, [sp, #20]
    d48c:	9a02      	ldr	r2, [sp, #8]
    d48e:	4413      	add	r3, r2
    d490:	9302      	str	r3, [sp, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    d492:	9b02      	ldr	r3, [sp, #8]
    d494:	781b      	ldrb	r3, [r3, #0]
    d496:	2b6c      	cmp	r3, #108	; 0x6c
    d498:	d10c      	bne.n	d4b4 <am_util_stdio_vsprintf+0x100>
        {
            pcFmt++;
    d49a:	9b02      	ldr	r3, [sp, #8]
    d49c:	3301      	adds	r3, #1
    d49e:	9302      	str	r3, [sp, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    d4a0:	9b02      	ldr	r3, [sp, #8]
    d4a2:	781b      	ldrb	r3, [r3, #0]
    d4a4:	2b6c      	cmp	r3, #108	; 0x6c
    d4a6:	d105      	bne.n	d4b4 <am_util_stdio_vsprintf+0x100>
            {
                pcFmt++;
    d4a8:	9b02      	ldr	r3, [sp, #8]
    d4aa:	3301      	adds	r3, #1
    d4ac:	9302      	str	r3, [sp, #8]
                bLongLong = true;
    d4ae:	2301      	movs	r3, #1
    d4b0:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
            }
        }

        switch ( *pcFmt )
    d4b4:	9b02      	ldr	r3, [sp, #8]
    d4b6:	781b      	ldrb	r3, [r3, #0]
    d4b8:	3b46      	subs	r3, #70	; 0x46
    d4ba:	2b32      	cmp	r3, #50	; 0x32
    d4bc:	f200 825c 	bhi.w	d978 <am_util_stdio_vsprintf+0x5c4>
    d4c0:	a201      	add	r2, pc, #4	; (adr r2, d4c8 <am_util_stdio_vsprintf+0x114>)
    d4c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d4c6:	bf00      	nop
    d4c8:	0000d8ff 	.word	0x0000d8ff
    d4cc:	0000d979 	.word	0x0000d979
    d4d0:	0000d979 	.word	0x0000d979
    d4d4:	0000d979 	.word	0x0000d979
    d4d8:	0000d979 	.word	0x0000d979
    d4dc:	0000d979 	.word	0x0000d979
    d4e0:	0000d979 	.word	0x0000d979
    d4e4:	0000d979 	.word	0x0000d979
    d4e8:	0000d979 	.word	0x0000d979
    d4ec:	0000d979 	.word	0x0000d979
    d4f0:	0000d979 	.word	0x0000d979
    d4f4:	0000d979 	.word	0x0000d979
    d4f8:	0000d979 	.word	0x0000d979
    d4fc:	0000d979 	.word	0x0000d979
    d500:	0000d979 	.word	0x0000d979
    d504:	0000d979 	.word	0x0000d979
    d508:	0000d979 	.word	0x0000d979
    d50c:	0000d979 	.word	0x0000d979
    d510:	0000d693 	.word	0x0000d693
    d514:	0000d979 	.word	0x0000d979
    d518:	0000d979 	.word	0x0000d979
    d51c:	0000d979 	.word	0x0000d979
    d520:	0000d979 	.word	0x0000d979
    d524:	0000d979 	.word	0x0000d979
    d528:	0000d979 	.word	0x0000d979
    d52c:	0000d979 	.word	0x0000d979
    d530:	0000d979 	.word	0x0000d979
    d534:	0000d979 	.word	0x0000d979
    d538:	0000d979 	.word	0x0000d979
    d53c:	0000d595 	.word	0x0000d595
    d540:	0000d7c3 	.word	0x0000d7c3
    d544:	0000d979 	.word	0x0000d979
    d548:	0000d8ff 	.word	0x0000d8ff
    d54c:	0000d979 	.word	0x0000d979
    d550:	0000d979 	.word	0x0000d979
    d554:	0000d7c3 	.word	0x0000d7c3
    d558:	0000d979 	.word	0x0000d979
    d55c:	0000d979 	.word	0x0000d979
    d560:	0000d979 	.word	0x0000d979
    d564:	0000d979 	.word	0x0000d979
    d568:	0000d979 	.word	0x0000d979
    d56c:	0000d979 	.word	0x0000d979
    d570:	0000d979 	.word	0x0000d979
    d574:	0000d979 	.word	0x0000d979
    d578:	0000d979 	.word	0x0000d979
    d57c:	0000d5bb 	.word	0x0000d5bb
    d580:	0000d979 	.word	0x0000d979
    d584:	0000d72d 	.word	0x0000d72d
    d588:	0000d979 	.word	0x0000d979
    d58c:	0000d979 	.word	0x0000d979
    d590:	0000d68d 	.word	0x0000d68d
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    d594:	9b01      	ldr	r3, [sp, #4]
    d596:	1d1a      	adds	r2, r3, #4
    d598:	9201      	str	r2, [sp, #4]
    d59a:	681b      	ldr	r3, [r3, #0]
    d59c:	f88d 301f 	strb.w	r3, [sp, #31]

                if ( pcBuf )
    d5a0:	9b03      	ldr	r3, [sp, #12]
    d5a2:	2b00      	cmp	r3, #0
    d5a4:	d005      	beq.n	d5b2 <am_util_stdio_vsprintf+0x1fe>
                {
                    *pcBuf++ = ui8CharSpecifier;
    d5a6:	9b03      	ldr	r3, [sp, #12]
    d5a8:	1c5a      	adds	r2, r3, #1
    d5aa:	9203      	str	r2, [sp, #12]
    d5ac:	f89d 201f 	ldrb.w	r2, [sp, #31]
    d5b0:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d5b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d5b4:	3301      	adds	r3, #1
    d5b6:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d5b8:	e1ee      	b.n	d998 <am_util_stdio_vsprintf+0x5e4>

            case 's':
                pcStr = va_arg(pArgs, char *);
    d5ba:	9b01      	ldr	r3, [sp, #4]
    d5bc:	1d1a      	adds	r2, r3, #4
    d5be:	9201      	str	r2, [sp, #4]
    d5c0:	681b      	ldr	r3, [r3, #0]
    d5c2:	9315      	str	r3, [sp, #84]	; 0x54
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    d5c4:	9815      	ldr	r0, [sp, #84]	; 0x54
    d5c6:	f7ff fdbe 	bl	d146 <simple_strlen>
    d5ca:	900b      	str	r0, [sp, #44]	; 0x2c
                if ( iWidth > 0 )
    d5cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d5ce:	2b00      	cmp	r3, #0
    d5d0:	dd2e      	ble.n	d630 <am_util_stdio_vsprintf+0x27c>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    d5d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d5d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d5d6:	429a      	cmp	r2, r3
    d5d8:	d22a      	bcs.n	d630 <am_util_stdio_vsprintf+0x27c>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    d5da:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d5dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d5de:	1ad3      	subs	r3, r2, r3
    d5e0:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d5e2:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d5e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d5e8:	4619      	mov	r1, r3
    d5ea:	9803      	ldr	r0, [sp, #12]
    d5ec:	f7ff fdc1 	bl	d172 <padbuffer>
    d5f0:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    d5f2:	9b03      	ldr	r3, [sp, #12]
    d5f4:	2b00      	cmp	r3, #0
    d5f6:	d001      	beq.n	d5fc <am_util_stdio_vsprintf+0x248>
    d5f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d5fa:	e000      	b.n	d5fe <am_util_stdio_vsprintf+0x24a>
    d5fc:	2300      	movs	r3, #0
    d5fe:	9a03      	ldr	r2, [sp, #12]
    d600:	4413      	add	r3, r2
    d602:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    d604:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d606:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d608:	4413      	add	r3, r2
    d60a:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    d60c:	2300      	movs	r3, #0
    d60e:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }

                while (*pcStr != 0x0)
    d610:	e00e      	b.n	d630 <am_util_stdio_vsprintf+0x27c>
                {
                    if ( pcBuf )
    d612:	9b03      	ldr	r3, [sp, #12]
    d614:	2b00      	cmp	r3, #0
    d616:	d005      	beq.n	d624 <am_util_stdio_vsprintf+0x270>
                    {
                        *pcBuf++ = *pcStr;
    d618:	9b03      	ldr	r3, [sp, #12]
    d61a:	1c5a      	adds	r2, r3, #1
    d61c:	9203      	str	r2, [sp, #12]
    d61e:	9a15      	ldr	r2, [sp, #84]	; 0x54
    d620:	7812      	ldrb	r2, [r2, #0]
    d622:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    d624:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d626:	3301      	adds	r3, #1
    d628:	9315      	str	r3, [sp, #84]	; 0x54
                    ++ui32CharCnt;
    d62a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d62c:	3301      	adds	r3, #1
    d62e:	9311      	str	r3, [sp, #68]	; 0x44
                while (*pcStr != 0x0)
    d630:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d632:	781b      	ldrb	r3, [r3, #0]
    d634:	2b00      	cmp	r3, #0
    d636:	d1ec      	bne.n	d612 <am_util_stdio_vsprintf+0x25e>
                }

                if ( iWidth )
    d638:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d63a:	2b00      	cmp	r3, #0
    d63c:	f000 81a9 	beq.w	d992 <am_util_stdio_vsprintf+0x5de>
                {
                    iWidth = -iWidth;
    d640:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d642:	425b      	negs	r3, r3
    d644:	9310      	str	r3, [sp, #64]	; 0x40

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    d646:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d648:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d64a:	429a      	cmp	r2, r3
    d64c:	f080 81a1 	bcs.w	d992 <am_util_stdio_vsprintf+0x5de>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    d650:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d652:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d654:	1ad3      	subs	r3, r2, r3
    d656:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d658:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d65c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d65e:	4619      	mov	r1, r3
    d660:	9803      	ldr	r0, [sp, #12]
    d662:	f7ff fd86 	bl	d172 <padbuffer>
    d666:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    d668:	9b03      	ldr	r3, [sp, #12]
    d66a:	2b00      	cmp	r3, #0
    d66c:	d001      	beq.n	d672 <am_util_stdio_vsprintf+0x2be>
    d66e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d670:	e000      	b.n	d674 <am_util_stdio_vsprintf+0x2c0>
    d672:	2300      	movs	r3, #0
    d674:	9a03      	ldr	r2, [sp, #12]
    d676:	4413      	add	r3, r2
    d678:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    d67a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d67c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d67e:	4413      	add	r3, r2
    d680:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    d682:	2300      	movs	r3, #0
    d684:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }
                break;
    d686:	e184      	b.n	d992 <am_util_stdio_vsprintf+0x5de>
    d688:	100079ec 	.word	0x100079ec

            case 'x':
                bLower = true;
    d68c:	2301      	movs	r3, #1
    d68e:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d692:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d696:	2b00      	cmp	r3, #0
    d698:	d009      	beq.n	d6ae <am_util_stdio_vsprintf+0x2fa>
    d69a:	9b01      	ldr	r3, [sp, #4]
    d69c:	3307      	adds	r3, #7
    d69e:	f023 0307 	bic.w	r3, r3, #7
    d6a2:	f103 0208 	add.w	r2, r3, #8
    d6a6:	9201      	str	r2, [sp, #4]
    d6a8:	e9d3 4500 	ldrd	r4, r5, [r3]
    d6ac:	e006      	b.n	d6bc <am_util_stdio_vsprintf+0x308>
                                      va_arg(pArgs, uint32_t);
    d6ae:	9b01      	ldr	r3, [sp, #4]
    d6b0:	1d1a      	adds	r2, r3, #4
    d6b2:	9201      	str	r2, [sp, #4]
    d6b4:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d6b6:	2200      	movs	r2, #0
    d6b8:	461c      	mov	r4, r3
    d6ba:	4615      	mov	r5, r2
    d6bc:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48

                if ( iWidth )
    d6c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d6c2:	2b00      	cmp	r3, #0
    d6c4:	d01e      	beq.n	d704 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    d6c6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d6ca:	f7ff fc2f 	bl	cf2c <ndigits_in_hex>
    d6ce:	4602      	mov	r2, r0
    d6d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d6d2:	1a9b      	subs	r3, r3, r2
    d6d4:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d6d6:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d6da:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d6dc:	4619      	mov	r1, r3
    d6de:	9803      	ldr	r0, [sp, #12]
    d6e0:	f7ff fd47 	bl	d172 <padbuffer>
    d6e4:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d6e6:	9b03      	ldr	r3, [sp, #12]
    d6e8:	2b00      	cmp	r3, #0
    d6ea:	d001      	beq.n	d6f0 <am_util_stdio_vsprintf+0x33c>
    d6ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d6ee:	e000      	b.n	d6f2 <am_util_stdio_vsprintf+0x33e>
    d6f0:	2300      	movs	r3, #0
    d6f2:	9a03      	ldr	r2, [sp, #12]
    d6f4:	4413      	add	r3, r2
    d6f6:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d6f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d6fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d6fc:	4413      	add	r3, r2
    d6fe:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d700:	2300      	movs	r3, #0
    d702:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    d704:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    d708:	9a03      	ldr	r2, [sp, #12]
    d70a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d70e:	f7ff fcba 	bl	d086 <uint64_to_hexstr>
    d712:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d714:	9b03      	ldr	r3, [sp, #12]
    d716:	2b00      	cmp	r3, #0
    d718:	d003      	beq.n	d722 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    d71a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d71c:	9a03      	ldr	r2, [sp, #12]
    d71e:	4413      	add	r3, r2
    d720:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d722:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d724:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d726:	4413      	add	r3, r2
    d728:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d72a:	e135      	b.n	d998 <am_util_stdio_vsprintf+0x5e4>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d72c:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d730:	2b00      	cmp	r3, #0
    d732:	d009      	beq.n	d748 <am_util_stdio_vsprintf+0x394>
    d734:	9b01      	ldr	r3, [sp, #4]
    d736:	3307      	adds	r3, #7
    d738:	f023 0307 	bic.w	r3, r3, #7
    d73c:	f103 0208 	add.w	r2, r3, #8
    d740:	9201      	str	r2, [sp, #4]
    d742:	e9d3 6700 	ldrd	r6, r7, [r3]
    d746:	e006      	b.n	d756 <am_util_stdio_vsprintf+0x3a2>
                                      va_arg(pArgs, uint32_t);
    d748:	9b01      	ldr	r3, [sp, #4]
    d74a:	1d1a      	adds	r2, r3, #4
    d74c:	9201      	str	r2, [sp, #4]
    d74e:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d750:	2200      	movs	r2, #0
    d752:	461e      	mov	r6, r3
    d754:	4617      	mov	r7, r2
    d756:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48

                if ( iWidth )
    d75a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d75c:	2b00      	cmp	r3, #0
    d75e:	d01e      	beq.n	d79e <am_util_stdio_vsprintf+0x3ea>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    d760:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d764:	f7ff fba8 	bl	ceb8 <ndigits_in_u64>
    d768:	4602      	mov	r2, r0
    d76a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d76c:	1a9b      	subs	r3, r3, r2
    d76e:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d770:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d774:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d776:	4619      	mov	r1, r3
    d778:	9803      	ldr	r0, [sp, #12]
    d77a:	f7ff fcfa 	bl	d172 <padbuffer>
    d77e:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d780:	9b03      	ldr	r3, [sp, #12]
    d782:	2b00      	cmp	r3, #0
    d784:	d001      	beq.n	d78a <am_util_stdio_vsprintf+0x3d6>
    d786:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d788:	e000      	b.n	d78c <am_util_stdio_vsprintf+0x3d8>
    d78a:	2300      	movs	r3, #0
    d78c:	9a03      	ldr	r2, [sp, #12]
    d78e:	4413      	add	r3, r2
    d790:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d792:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d794:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d796:	4413      	add	r3, r2
    d798:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d79a:	2300      	movs	r3, #0
    d79c:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d79e:	9a03      	ldr	r2, [sp, #12]
    d7a0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d7a4:	f7ff fc2a 	bl	cffc <uint64_to_str>
    d7a8:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d7aa:	9b03      	ldr	r3, [sp, #12]
    d7ac:	2b00      	cmp	r3, #0
    d7ae:	d003      	beq.n	d7b8 <am_util_stdio_vsprintf+0x404>
                {
                    pcBuf += iVal;
    d7b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d7b2:	9a03      	ldr	r2, [sp, #12]
    d7b4:	4413      	add	r3, r2
    d7b6:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d7b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d7ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d7bc:	4413      	add	r3, r2
    d7be:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d7c0:	e0ea      	b.n	d998 <am_util_stdio_vsprintf+0x5e4>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d7c2:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d7c6:	2b00      	cmp	r3, #0
    d7c8:	d009      	beq.n	d7de <am_util_stdio_vsprintf+0x42a>
    d7ca:	9b01      	ldr	r3, [sp, #4]
    d7cc:	3307      	adds	r3, #7
    d7ce:	f023 0307 	bic.w	r3, r3, #7
    d7d2:	f103 0208 	add.w	r2, r3, #8
    d7d6:	9201      	str	r2, [sp, #4]
    d7d8:	e9d3 8900 	ldrd	r8, r9, [r3]
    d7dc:	e006      	b.n	d7ec <am_util_stdio_vsprintf+0x438>
                                     va_arg(pArgs, int32_t);
    d7de:	9b01      	ldr	r3, [sp, #4]
    d7e0:	1d1a      	adds	r2, r3, #4
    d7e2:	9201      	str	r2, [sp, #4]
    d7e4:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d7e6:	17da      	asrs	r2, r3, #31
    d7e8:	4698      	mov	r8, r3
    d7ea:	4691      	mov	r9, r2
    d7ec:	e9cd 8908 	strd	r8, r9, [sp, #32]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    d7f0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d7f4:	2b00      	cmp	r3, #0
    d7f6:	da0c      	bge.n	d812 <am_util_stdio_vsprintf+0x45e>
                {
                    ui64Val = -i64Val;          // Get absolute value
    d7f8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d7fc:	2100      	movs	r1, #0
    d7fe:	f1d2 0a00 	rsbs	sl, r2, #0
    d802:	eb61 0b03 	sbc.w	fp, r1, r3
    d806:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
                    bNeg = true;
    d80a:	2301      	movs	r3, #1
    d80c:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    d810:	e006      	b.n	d820 <am_util_stdio_vsprintf+0x46c>
                }
                else
                {
                    ui64Val = i64Val;
    d812:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d816:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
                    bNeg = false;
    d81a:	2300      	movs	r3, #0
    d81c:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                }

                if ( iWidth )
    d820:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d822:	2b00      	cmp	r3, #0
    d824:	d04a      	beq.n	d8bc <am_util_stdio_vsprintf+0x508>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    d826:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    d82a:	4610      	mov	r0, r2
    d82c:	4619      	mov	r1, r3
    d82e:	f7ff fb63 	bl	cef8 <ndigits_in_i64>
    d832:	4602      	mov	r2, r0
    d834:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d836:	1a9b      	subs	r3, r3, r2
    d838:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg )
    d83a:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d83e:	2b00      	cmp	r3, #0
    d840:	d011      	beq.n	d866 <am_util_stdio_vsprintf+0x4b2>
                    {
                        --iWidth;
    d842:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d844:	3b01      	subs	r3, #1
    d846:	9310      	str	r3, [sp, #64]	; 0x40

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    d848:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d84c:	2b30      	cmp	r3, #48	; 0x30
    d84e:	d10a      	bne.n	d866 <am_util_stdio_vsprintf+0x4b2>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    d850:	9b03      	ldr	r3, [sp, #12]
    d852:	2b00      	cmp	r3, #0
    d854:	d004      	beq.n	d860 <am_util_stdio_vsprintf+0x4ac>
                            {
                                *pcBuf++ = '-';
    d856:	9b03      	ldr	r3, [sp, #12]
    d858:	1c5a      	adds	r2, r3, #1
    d85a:	9203      	str	r2, [sp, #12]
    d85c:	222d      	movs	r2, #45	; 0x2d
    d85e:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    d860:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d862:	3301      	adds	r3, #1
    d864:	9311      	str	r3, [sp, #68]	; 0x44
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d866:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d86a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d86c:	4619      	mov	r1, r3
    d86e:	9803      	ldr	r0, [sp, #12]
    d870:	f7ff fc7f 	bl	d172 <padbuffer>
    d874:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d876:	9b03      	ldr	r3, [sp, #12]
    d878:	2b00      	cmp	r3, #0
    d87a:	d001      	beq.n	d880 <am_util_stdio_vsprintf+0x4cc>
    d87c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d87e:	e000      	b.n	d882 <am_util_stdio_vsprintf+0x4ce>
    d880:	2300      	movs	r3, #0
    d882:	9a03      	ldr	r2, [sp, #12]
    d884:	4413      	add	r3, r2
    d886:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d888:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d88a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d88c:	4413      	add	r3, r2
    d88e:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d890:	2300      	movs	r3, #0
    d892:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d894:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d898:	2b00      	cmp	r3, #0
    d89a:	d01e      	beq.n	d8da <am_util_stdio_vsprintf+0x526>
    d89c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d8a0:	2b20      	cmp	r3, #32
    d8a2:	d11a      	bne.n	d8da <am_util_stdio_vsprintf+0x526>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    d8a4:	9b03      	ldr	r3, [sp, #12]
    d8a6:	2b00      	cmp	r3, #0
    d8a8:	d004      	beq.n	d8b4 <am_util_stdio_vsprintf+0x500>
                        {
                            *pcBuf++ = '-';
    d8aa:	9b03      	ldr	r3, [sp, #12]
    d8ac:	1c5a      	adds	r2, r3, #1
    d8ae:	9203      	str	r2, [sp, #12]
    d8b0:	222d      	movs	r2, #45	; 0x2d
    d8b2:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    d8b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d8b6:	3301      	adds	r3, #1
    d8b8:	9311      	str	r3, [sp, #68]	; 0x44
    d8ba:	e00e      	b.n	d8da <am_util_stdio_vsprintf+0x526>
                    }
                }
                else
                {
                    if ( bNeg )
    d8bc:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d8c0:	2b00      	cmp	r3, #0
    d8c2:	d00a      	beq.n	d8da <am_util_stdio_vsprintf+0x526>
                    {
                        if ( pcBuf )
    d8c4:	9b03      	ldr	r3, [sp, #12]
    d8c6:	2b00      	cmp	r3, #0
    d8c8:	d004      	beq.n	d8d4 <am_util_stdio_vsprintf+0x520>
                        {
                            *pcBuf++ = '-';
    d8ca:	9b03      	ldr	r3, [sp, #12]
    d8cc:	1c5a      	adds	r2, r3, #1
    d8ce:	9203      	str	r2, [sp, #12]
    d8d0:	222d      	movs	r2, #45	; 0x2d
    d8d2:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    d8d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d8d6:	3301      	adds	r3, #1
    d8d8:	9311      	str	r3, [sp, #68]	; 0x44
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d8da:	9a03      	ldr	r2, [sp, #12]
    d8dc:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d8e0:	f7ff fb8c 	bl	cffc <uint64_to_str>
    d8e4:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d8e6:	9b03      	ldr	r3, [sp, #12]
    d8e8:	2b00      	cmp	r3, #0
    d8ea:	d003      	beq.n	d8f4 <am_util_stdio_vsprintf+0x540>
                {
                    pcBuf += iVal;
    d8ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d8ee:	9a03      	ldr	r2, [sp, #12]
    d8f0:	4413      	add	r3, r2
    d8f2:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d8f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d8f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d8f8:	4413      	add	r3, r2
    d8fa:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d8fc:	e04c      	b.n	d998 <am_util_stdio_vsprintf+0x5e4>


            case 'f':
            case 'F':
                if ( pcBuf )
    d8fe:	9b03      	ldr	r3, [sp, #12]
    d900:	2b00      	cmp	r3, #0
    d902:	d048      	beq.n	d996 <am_util_stdio_vsprintf+0x5e2>
                {
                    float fValue = va_arg(pArgs, double);
    d904:	9b01      	ldr	r3, [sp, #4]
    d906:	3307      	adds	r3, #7
    d908:	f023 0307 	bic.w	r3, r3, #7
    d90c:	f103 0208 	add.w	r2, r3, #8
    d910:	9201      	str	r2, [sp, #4]
    d912:	e9d3 2300 	ldrd	r2, r3, [r3]
    d916:	4610      	mov	r0, r2
    d918:	4619      	mov	r1, r3
    d91a:	f7fe fc8b 	bl	c234 <__aeabi_d2f>
    d91e:	4603      	mov	r3, r0
    d920:	9306      	str	r3, [sp, #24]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    d922:	9b03      	ldr	r3, [sp, #12]
    d924:	2214      	movs	r2, #20
    d926:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    d928:	990e      	ldr	r1, [sp, #56]	; 0x38
    d92a:	9803      	ldr	r0, [sp, #12]
    d92c:	ed9d 0a06 	vldr	s0, [sp, #24]
    d930:	f7ff fc42 	bl	d1b8 <ftoa>
    d934:	900f      	str	r0, [sp, #60]	; 0x3c
                    if ( iVal < 0 )
    d936:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d938:	2b00      	cmp	r3, #0
    d93a:	da14      	bge.n	d966 <am_util_stdio_vsprintf+0x5b2>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d93c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d93e:	f1b3 3fff 	cmp.w	r3, #4294967295
    d942:	d102      	bne.n	d94a <am_util_stdio_vsprintf+0x596>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d944:	4b1e      	ldr	r3, [pc, #120]	; (d9c0 <am_util_stdio_vsprintf+0x60c>)
    d946:	930c      	str	r3, [sp, #48]	; 0x30
    d948:	e008      	b.n	d95c <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d94a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d94c:	f113 0f02 	cmn.w	r3, #2
    d950:	d102      	bne.n	d958 <am_util_stdio_vsprintf+0x5a4>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d952:	4b1c      	ldr	r3, [pc, #112]	; (d9c4 <am_util_stdio_vsprintf+0x610>)
    d954:	930c      	str	r3, [sp, #48]	; 0x30
    d956:	e001      	b.n	d95c <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d958:	4b1b      	ldr	r3, [pc, #108]	; (d9c8 <am_util_stdio_vsprintf+0x614>)
    d95a:	930c      	str	r3, [sp, #48]	; 0x30
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d95c:	9b03      	ldr	r3, [sp, #12]
    d95e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d960:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    d962:	2303      	movs	r3, #3
    d964:	930f      	str	r3, [sp, #60]	; 0x3c
                    }
                    ui32CharCnt += iVal;
    d966:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d968:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d96a:	4413      	add	r3, r2
    d96c:	9311      	str	r3, [sp, #68]	; 0x44
                    pcBuf += iVal;
    d96e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d970:	9a03      	ldr	r2, [sp, #12]
    d972:	4413      	add	r3, r2
    d974:	9303      	str	r3, [sp, #12]
                }
                break;
    d976:	e00e      	b.n	d996 <am_util_stdio_vsprintf+0x5e2>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d978:	9b03      	ldr	r3, [sp, #12]
    d97a:	2b00      	cmp	r3, #0
    d97c:	d005      	beq.n	d98a <am_util_stdio_vsprintf+0x5d6>
                {
                    *pcBuf++ = *pcFmt;
    d97e:	9b03      	ldr	r3, [sp, #12]
    d980:	1c5a      	adds	r2, r3, #1
    d982:	9203      	str	r2, [sp, #12]
    d984:	9a02      	ldr	r2, [sp, #8]
    d986:	7812      	ldrb	r2, [r2, #0]
    d988:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d98a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d98c:	3301      	adds	r3, #1
    d98e:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d990:	e002      	b.n	d998 <am_util_stdio_vsprintf+0x5e4>
                break;
    d992:	bf00      	nop
    d994:	e000      	b.n	d998 <am_util_stdio_vsprintf+0x5e4>
                break;
    d996:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d998:	9b02      	ldr	r3, [sp, #8]
    d99a:	3301      	adds	r3, #1
    d99c:	9302      	str	r3, [sp, #8]
    while ( *pcFmt != 0x0 )
    d99e:	9b02      	ldr	r3, [sp, #8]
    d9a0:	781b      	ldrb	r3, [r3, #0]
    d9a2:	2b00      	cmp	r3, #0
    d9a4:	f47f ad11 	bne.w	d3ca <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d9a8:	9b03      	ldr	r3, [sp, #12]
    d9aa:	2b00      	cmp	r3, #0
    d9ac:	d002      	beq.n	d9b4 <am_util_stdio_vsprintf+0x600>
    {
        *pcBuf = 0x0;
    d9ae:	9b03      	ldr	r3, [sp, #12]
    d9b0:	2200      	movs	r2, #0
    d9b2:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d9b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    d9b6:	4618      	mov	r0, r3
    d9b8:	b017      	add	sp, #92	; 0x5c
    d9ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d9be:	bf00      	nop
    d9c0:	00302e30 	.word	0x00302e30
    d9c4:	00232e23 	.word	0x00232e23
    d9c8:	003f2e3f 	.word	0x003f2e3f

0000d9cc <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d9cc:	b40f      	push	{r0, r1, r2, r3}
    d9ce:	b500      	push	{lr}
    d9d0:	b083      	sub	sp, #12
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d9d2:	4b0c      	ldr	r3, [pc, #48]	; (da04 <am_util_stdio_printf+0x38>)
    d9d4:	681b      	ldr	r3, [r3, #0]
    d9d6:	2b00      	cmp	r3, #0
    d9d8:	d101      	bne.n	d9de <am_util_stdio_printf+0x12>
    {
        return 0;
    d9da:	2300      	movs	r3, #0
    d9dc:	e00c      	b.n	d9f8 <am_util_stdio_printf+0x2c>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d9de:	ab05      	add	r3, sp, #20
    d9e0:	9300      	str	r3, [sp, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d9e2:	9a00      	ldr	r2, [sp, #0]
    d9e4:	9904      	ldr	r1, [sp, #16]
    d9e6:	4808      	ldr	r0, [pc, #32]	; (da08 <am_util_stdio_printf+0x3c>)
    d9e8:	f7ff fce4 	bl	d3b4 <am_util_stdio_vsprintf>
    d9ec:	9001      	str	r0, [sp, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d9ee:	4b05      	ldr	r3, [pc, #20]	; (da04 <am_util_stdio_printf+0x38>)
    d9f0:	681b      	ldr	r3, [r3, #0]
    d9f2:	4805      	ldr	r0, [pc, #20]	; (da08 <am_util_stdio_printf+0x3c>)
    d9f4:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d9f6:	9b01      	ldr	r3, [sp, #4]
}
    d9f8:	4618      	mov	r0, r3
    d9fa:	b003      	add	sp, #12
    d9fc:	f85d eb04 	ldr.w	lr, [sp], #4
    da00:	b004      	add	sp, #16
    da02:	4770      	bx	lr
    da04:	100078e8 	.word	0x100078e8
    da08:	100078ec 	.word	0x100078ec

0000da0c <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    da0c:	4811      	ldr	r0, [pc, #68]	; (da54 <zero_loop+0x12>)
    da0e:	4912      	ldr	r1, [pc, #72]	; (da58 <zero_loop+0x16>)
    da10:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    da12:	f8d1 d000 	ldr.w	sp, [r1]

#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    da16:	4811      	ldr	r0, [pc, #68]	; (da5c <zero_loop+0x1a>)
    da18:	6801      	ldr	r1, [r0, #0]
    da1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    da1e:	6001      	str	r1, [r0, #0]
    da20:	f3bf 8f4f 	dsb	sy
    da24:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    da28:	480d      	ldr	r0, [pc, #52]	; (da60 <zero_loop+0x1e>)
    da2a:	490e      	ldr	r1, [pc, #56]	; (da64 <zero_loop+0x22>)
    da2c:	4a0e      	ldr	r2, [pc, #56]	; (da68 <zero_loop+0x26>)

0000da2e <copy_loop>:
    da2e:	f850 3b04 	ldr.w	r3, [r0], #4
    da32:	f841 3b04 	str.w	r3, [r1], #4
    da36:	4291      	cmp	r1, r2
    da38:	dbf9      	blt.n	da2e <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    da3a:	480c      	ldr	r0, [pc, #48]	; (da6c <zero_loop+0x2a>)
    da3c:	490c      	ldr	r1, [pc, #48]	; (da70 <zero_loop+0x2e>)
    da3e:	f04f 0200 	mov.w	r2, #0

0000da42 <zero_loop>:
    da42:	4288      	cmp	r0, r1
    da44:	bfb8      	it	lt
    da46:	f840 2b04 	strlt.w	r2, [r0], #4
    da4a:	dbfa      	blt.n	da42 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    da4c:	f7fe fe98 	bl	c780 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    da50:	be00      	bkpt	0x0000
}
    da52:	bf00      	nop
    da54:	e000ed08 	.word	0xe000ed08
    da58:	0000c000 	.word	0x0000c000
    da5c:	e000ed88 	.word	0xe000ed88
    da60:	00010928 	.word	0x00010928
    da64:	10001000 	.word	0x10001000
    da68:	10001060 	.word	0x10001060
    da6c:	10001060 	.word	0x10001060
    da70:	1000b388 	.word	0x1000b388

0000da74 <NMI_Handler>:
NMI_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    da74:	e7fe      	b.n	da74 <NMI_Handler>

0000da76 <BusFault_Handler>:
HardFault_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    da76:	e7fe      	b.n	da76 <BusFault_Handler>

0000da78 <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    da78:	e7fe      	b.n	da78 <DebugMon_Handler>
	...

0000da7c <am_bsp_low_power_init>:
    da7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    da7e:	f001 fb61 	bl	f144 <am_hal_pwrctrl_low_power_init>
    da82:	f001 fc3d 	bl	f300 <am_hal_rtc_osc_disable>
    da86:	4b0b      	ldr	r3, [pc, #44]	; (dab4 <am_bsp_low_power_init+0x38>)
    da88:	4f0b      	ldr	r7, [pc, #44]	; (dab8 <am_bsp_low_power_init+0x3c>)
    da8a:	681e      	ldr	r6, [r3, #0]
    da8c:	2400      	movs	r4, #0
    da8e:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    da92:	4631      	mov	r1, r6
    da94:	4628      	mov	r0, r5
    da96:	f000 fa99 	bl	dfcc <am_hal_gpio_pinconfig>
    da9a:	2103      	movs	r1, #3
    da9c:	4628      	mov	r0, r5
    da9e:	f000 fc01 	bl	e2a4 <am_hal_gpio_state_write>
    daa2:	3401      	adds	r4, #1
    daa4:	2100      	movs	r1, #0
    daa6:	4628      	mov	r0, r5
    daa8:	f000 fbfc 	bl	e2a4 <am_hal_gpio_state_write>
    daac:	2c05      	cmp	r4, #5
    daae:	d1ee      	bne.n	da8e <am_bsp_low_power_init+0x12>
    dab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dab2:	bf00      	nop
    dab4:	0001053c 	.word	0x0001053c
    dab8:	1000102c 	.word	0x1000102c

0000dabc <am_bsp_itm_printf_enable>:
    dabc:	b500      	push	{lr}
    dabe:	4b0b      	ldr	r3, [pc, #44]	; (daec <am_bsp_itm_printf_enable+0x30>)
    dac0:	b087      	sub	sp, #28
    dac2:	2201      	movs	r2, #1
    dac4:	601a      	str	r2, [r3, #0]
    dac6:	f001 fa0f 	bl	eee8 <am_hal_itm_enable>
    daca:	4b09      	ldr	r3, [pc, #36]	; (daf0 <am_bsp_itm_printf_enable+0x34>)
    dacc:	9301      	str	r3, [sp, #4]
    dace:	a801      	add	r0, sp, #4
    dad0:	f001 fcc8 	bl	f464 <am_hal_tpiu_enable>
    dad4:	4b07      	ldr	r3, [pc, #28]	; (daf4 <am_bsp_itm_printf_enable+0x38>)
    dad6:	2029      	movs	r0, #41	; 0x29
    dad8:	6819      	ldr	r1, [r3, #0]
    dada:	f000 fa77 	bl	dfcc <am_hal_gpio_pinconfig>
    dade:	4806      	ldr	r0, [pc, #24]	; (daf8 <am_bsp_itm_printf_enable+0x3c>)
    dae0:	f7ff f8ec 	bl	ccbc <am_util_stdio_printf_init>
    dae4:	b007      	add	sp, #28
    dae6:	f85d fb04 	ldr.w	pc, [sp], #4
    daea:	bf00      	nop
    daec:	100079f0 	.word	0x100079f0
    daf0:	000f4240 	.word	0x000f4240
    daf4:	00010530 	.word	0x00010530
    daf8:	0000ef31 	.word	0x0000ef31

0000dafc <am_bsp_iom_pins_enable>:
    dafc:	2805      	cmp	r0, #5
    dafe:	f200 80ea 	bhi.w	dcd6 <am_bsp_iom_pins_enable+0x1da>
    db02:	ea41 0180 	orr.w	r1, r1, r0, lsl #2
    db06:	b508      	push	{r3, lr}
    db08:	2915      	cmp	r1, #21
    db0a:	d817      	bhi.n	db3c <am_bsp_iom_pins_enable+0x40>
    db0c:	e8df f011 	tbh	[pc, r1, lsl #1]
    db10:	00390023 	.word	0x00390023
    db14:	00160016 	.word	0x00160016
    db18:	005b0045 	.word	0x005b0045
    db1c:	00160016 	.word	0x00160016
    db20:	007d0067 	.word	0x007d0067
    db24:	00160016 	.word	0x00160016
    db28:	009f0089 	.word	0x009f0089
    db2c:	00160016 	.word	0x00160016
    db30:	00c100ab 	.word	0x00c100ab
    db34:	00160016 	.word	0x00160016
    db38:	001700cd 	.word	0x001700cd
    db3c:	bd08      	pop	{r3, pc}
    db3e:	4b66      	ldr	r3, [pc, #408]	; (dcd8 <am_bsp_iom_pins_enable+0x1dc>)
    db40:	2030      	movs	r0, #48	; 0x30
    db42:	6819      	ldr	r1, [r3, #0]
    db44:	f000 fa42 	bl	dfcc <am_hal_gpio_pinconfig>
    db48:	4b64      	ldr	r3, [pc, #400]	; (dcdc <am_bsp_iom_pins_enable+0x1e0>)
    db4a:	2031      	movs	r0, #49	; 0x31
    db4c:	6819      	ldr	r1, [r3, #0]
    db4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    db52:	f000 ba3b 	b.w	dfcc <am_hal_gpio_pinconfig>
    db56:	4b62      	ldr	r3, [pc, #392]	; (dce0 <am_bsp_iom_pins_enable+0x1e4>)
    db58:	2005      	movs	r0, #5
    db5a:	6819      	ldr	r1, [r3, #0]
    db5c:	f000 fa36 	bl	dfcc <am_hal_gpio_pinconfig>
    db60:	4b60      	ldr	r3, [pc, #384]	; (dce4 <am_bsp_iom_pins_enable+0x1e8>)
    db62:	2006      	movs	r0, #6
    db64:	6819      	ldr	r1, [r3, #0]
    db66:	f000 fa31 	bl	dfcc <am_hal_gpio_pinconfig>
    db6a:	4b5f      	ldr	r3, [pc, #380]	; (dce8 <am_bsp_iom_pins_enable+0x1ec>)
    db6c:	2007      	movs	r0, #7
    db6e:	6819      	ldr	r1, [r3, #0]
    db70:	f000 fa2c 	bl	dfcc <am_hal_gpio_pinconfig>
    db74:	4b5d      	ldr	r3, [pc, #372]	; (dcec <am_bsp_iom_pins_enable+0x1f0>)
    db76:	200b      	movs	r0, #11
    db78:	6819      	ldr	r1, [r3, #0]
    db7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    db7e:	f000 ba25 	b.w	dfcc <am_hal_gpio_pinconfig>
    db82:	4b5b      	ldr	r3, [pc, #364]	; (dcf0 <am_bsp_iom_pins_enable+0x1f4>)
    db84:	2005      	movs	r0, #5
    db86:	6819      	ldr	r1, [r3, #0]
    db88:	f000 fa20 	bl	dfcc <am_hal_gpio_pinconfig>
    db8c:	4b59      	ldr	r3, [pc, #356]	; (dcf4 <am_bsp_iom_pins_enable+0x1f8>)
    db8e:	2006      	movs	r0, #6
    db90:	6819      	ldr	r1, [r3, #0]
    db92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    db96:	f000 ba19 	b.w	dfcc <am_hal_gpio_pinconfig>
    db9a:	4b57      	ldr	r3, [pc, #348]	; (dcf8 <am_bsp_iom_pins_enable+0x1fc>)
    db9c:	2008      	movs	r0, #8
    db9e:	6819      	ldr	r1, [r3, #0]
    dba0:	f000 fa14 	bl	dfcc <am_hal_gpio_pinconfig>
    dba4:	4b55      	ldr	r3, [pc, #340]	; (dcfc <am_bsp_iom_pins_enable+0x200>)
    dba6:	2009      	movs	r0, #9
    dba8:	6819      	ldr	r1, [r3, #0]
    dbaa:	f000 fa0f 	bl	dfcc <am_hal_gpio_pinconfig>
    dbae:	4b54      	ldr	r3, [pc, #336]	; (dd00 <am_bsp_iom_pins_enable+0x204>)
    dbb0:	200a      	movs	r0, #10
    dbb2:	6819      	ldr	r1, [r3, #0]
    dbb4:	f000 fa0a 	bl	dfcc <am_hal_gpio_pinconfig>
    dbb8:	4b52      	ldr	r3, [pc, #328]	; (dd04 <am_bsp_iom_pins_enable+0x208>)
    dbba:	200e      	movs	r0, #14
    dbbc:	6819      	ldr	r1, [r3, #0]
    dbbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dbc2:	f000 ba03 	b.w	dfcc <am_hal_gpio_pinconfig>
    dbc6:	4b50      	ldr	r3, [pc, #320]	; (dd08 <am_bsp_iom_pins_enable+0x20c>)
    dbc8:	2008      	movs	r0, #8
    dbca:	6819      	ldr	r1, [r3, #0]
    dbcc:	f000 f9fe 	bl	dfcc <am_hal_gpio_pinconfig>
    dbd0:	4b4e      	ldr	r3, [pc, #312]	; (dd0c <am_bsp_iom_pins_enable+0x210>)
    dbd2:	2009      	movs	r0, #9
    dbd4:	6819      	ldr	r1, [r3, #0]
    dbd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dbda:	f000 b9f7 	b.w	dfcc <am_hal_gpio_pinconfig>
    dbde:	4b4c      	ldr	r3, [pc, #304]	; (dd10 <am_bsp_iom_pins_enable+0x214>)
    dbe0:	201b      	movs	r0, #27
    dbe2:	6819      	ldr	r1, [r3, #0]
    dbe4:	f000 f9f2 	bl	dfcc <am_hal_gpio_pinconfig>
    dbe8:	4b4a      	ldr	r3, [pc, #296]	; (dd14 <am_bsp_iom_pins_enable+0x218>)
    dbea:	2019      	movs	r0, #25
    dbec:	6819      	ldr	r1, [r3, #0]
    dbee:	f000 f9ed 	bl	dfcc <am_hal_gpio_pinconfig>
    dbf2:	4b49      	ldr	r3, [pc, #292]	; (dd18 <am_bsp_iom_pins_enable+0x21c>)
    dbf4:	201c      	movs	r0, #28
    dbf6:	6819      	ldr	r1, [r3, #0]
    dbf8:	f000 f9e8 	bl	dfcc <am_hal_gpio_pinconfig>
    dbfc:	4b47      	ldr	r3, [pc, #284]	; (dd1c <am_bsp_iom_pins_enable+0x220>)
    dbfe:	200f      	movs	r0, #15
    dc00:	6819      	ldr	r1, [r3, #0]
    dc02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dc06:	f000 b9e1 	b.w	dfcc <am_hal_gpio_pinconfig>
    dc0a:	4b45      	ldr	r3, [pc, #276]	; (dd20 <am_bsp_iom_pins_enable+0x224>)
    dc0c:	201b      	movs	r0, #27
    dc0e:	6819      	ldr	r1, [r3, #0]
    dc10:	f000 f9dc 	bl	dfcc <am_hal_gpio_pinconfig>
    dc14:	4b43      	ldr	r3, [pc, #268]	; (dd24 <am_bsp_iom_pins_enable+0x228>)
    dc16:	2019      	movs	r0, #25
    dc18:	6819      	ldr	r1, [r3, #0]
    dc1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dc1e:	f000 b9d5 	b.w	dfcc <am_hal_gpio_pinconfig>
    dc22:	4b41      	ldr	r3, [pc, #260]	; (dd28 <am_bsp_iom_pins_enable+0x22c>)
    dc24:	202a      	movs	r0, #42	; 0x2a
    dc26:	6819      	ldr	r1, [r3, #0]
    dc28:	f000 f9d0 	bl	dfcc <am_hal_gpio_pinconfig>
    dc2c:	4b3f      	ldr	r3, [pc, #252]	; (dd2c <am_bsp_iom_pins_enable+0x230>)
    dc2e:	202b      	movs	r0, #43	; 0x2b
    dc30:	6819      	ldr	r1, [r3, #0]
    dc32:	f000 f9cb 	bl	dfcc <am_hal_gpio_pinconfig>
    dc36:	4b3e      	ldr	r3, [pc, #248]	; (dd30 <am_bsp_iom_pins_enable+0x234>)
    dc38:	2026      	movs	r0, #38	; 0x26
    dc3a:	6819      	ldr	r1, [r3, #0]
    dc3c:	f000 f9c6 	bl	dfcc <am_hal_gpio_pinconfig>
    dc40:	4b3c      	ldr	r3, [pc, #240]	; (dd34 <am_bsp_iom_pins_enable+0x238>)
    dc42:	200c      	movs	r0, #12
    dc44:	6819      	ldr	r1, [r3, #0]
    dc46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dc4a:	f000 b9bf 	b.w	dfcc <am_hal_gpio_pinconfig>
    dc4e:	4b3a      	ldr	r3, [pc, #232]	; (dd38 <am_bsp_iom_pins_enable+0x23c>)
    dc50:	202a      	movs	r0, #42	; 0x2a
    dc52:	6819      	ldr	r1, [r3, #0]
    dc54:	f000 f9ba 	bl	dfcc <am_hal_gpio_pinconfig>
    dc58:	4b38      	ldr	r3, [pc, #224]	; (dd3c <am_bsp_iom_pins_enable+0x240>)
    dc5a:	202b      	movs	r0, #43	; 0x2b
    dc5c:	6819      	ldr	r1, [r3, #0]
    dc5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dc62:	f000 b9b3 	b.w	dfcc <am_hal_gpio_pinconfig>
    dc66:	4b36      	ldr	r3, [pc, #216]	; (dd40 <am_bsp_iom_pins_enable+0x244>)
    dc68:	2027      	movs	r0, #39	; 0x27
    dc6a:	6819      	ldr	r1, [r3, #0]
    dc6c:	f000 f9ae 	bl	dfcc <am_hal_gpio_pinconfig>
    dc70:	4b34      	ldr	r3, [pc, #208]	; (dd44 <am_bsp_iom_pins_enable+0x248>)
    dc72:	2028      	movs	r0, #40	; 0x28
    dc74:	6819      	ldr	r1, [r3, #0]
    dc76:	f000 f9a9 	bl	dfcc <am_hal_gpio_pinconfig>
    dc7a:	4b33      	ldr	r3, [pc, #204]	; (dd48 <am_bsp_iom_pins_enable+0x24c>)
    dc7c:	202c      	movs	r0, #44	; 0x2c
    dc7e:	6819      	ldr	r1, [r3, #0]
    dc80:	f000 f9a4 	bl	dfcc <am_hal_gpio_pinconfig>
    dc84:	4b31      	ldr	r3, [pc, #196]	; (dd4c <am_bsp_iom_pins_enable+0x250>)
    dc86:	200d      	movs	r0, #13
    dc88:	6819      	ldr	r1, [r3, #0]
    dc8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dc8e:	f000 b99d 	b.w	dfcc <am_hal_gpio_pinconfig>
    dc92:	4b2f      	ldr	r3, [pc, #188]	; (dd50 <am_bsp_iom_pins_enable+0x254>)
    dc94:	2027      	movs	r0, #39	; 0x27
    dc96:	6819      	ldr	r1, [r3, #0]
    dc98:	f000 f998 	bl	dfcc <am_hal_gpio_pinconfig>
    dc9c:	4b2d      	ldr	r3, [pc, #180]	; (dd54 <am_bsp_iom_pins_enable+0x258>)
    dc9e:	2028      	movs	r0, #40	; 0x28
    dca0:	6819      	ldr	r1, [r3, #0]
    dca2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dca6:	f000 b991 	b.w	dfcc <am_hal_gpio_pinconfig>
    dcaa:	4b2b      	ldr	r3, [pc, #172]	; (dd58 <am_bsp_iom_pins_enable+0x25c>)
    dcac:	2030      	movs	r0, #48	; 0x30
    dcae:	6819      	ldr	r1, [r3, #0]
    dcb0:	f000 f98c 	bl	dfcc <am_hal_gpio_pinconfig>
    dcb4:	4b29      	ldr	r3, [pc, #164]	; (dd5c <am_bsp_iom_pins_enable+0x260>)
    dcb6:	2031      	movs	r0, #49	; 0x31
    dcb8:	6819      	ldr	r1, [r3, #0]
    dcba:	f000 f987 	bl	dfcc <am_hal_gpio_pinconfig>
    dcbe:	4b28      	ldr	r3, [pc, #160]	; (dd60 <am_bsp_iom_pins_enable+0x264>)
    dcc0:	202f      	movs	r0, #47	; 0x2f
    dcc2:	6819      	ldr	r1, [r3, #0]
    dcc4:	f000 f982 	bl	dfcc <am_hal_gpio_pinconfig>
    dcc8:	4b26      	ldr	r3, [pc, #152]	; (dd64 <am_bsp_iom_pins_enable+0x268>)
    dcca:	2010      	movs	r0, #16
    dccc:	6819      	ldr	r1, [r3, #0]
    dcce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dcd2:	f000 b97b 	b.w	dfcc <am_hal_gpio_pinconfig>
    dcd6:	4770      	bx	lr
    dcd8:	00010528 	.word	0x00010528
    dcdc:	0001052c 	.word	0x0001052c
    dce0:	000104ac 	.word	0x000104ac
    dce4:	000104a4 	.word	0x000104a4
    dce8:	000104a8 	.word	0x000104a8
    dcec:	000104a0 	.word	0x000104a0
    dcf0:	000104b0 	.word	0x000104b0
    dcf4:	000104b4 	.word	0x000104b4
    dcf8:	000104c4 	.word	0x000104c4
    dcfc:	000104bc 	.word	0x000104bc
    dd00:	000104c0 	.word	0x000104c0
    dd04:	000104b8 	.word	0x000104b8
    dd08:	000104c8 	.word	0x000104c8
    dd0c:	000104cc 	.word	0x000104cc
    dd10:	000104dc 	.word	0x000104dc
    dd14:	000104d4 	.word	0x000104d4
    dd18:	000104d8 	.word	0x000104d8
    dd1c:	000104d0 	.word	0x000104d0
    dd20:	000104e0 	.word	0x000104e0
    dd24:	000104e4 	.word	0x000104e4
    dd28:	000104f4 	.word	0x000104f4
    dd2c:	000104ec 	.word	0x000104ec
    dd30:	000104f0 	.word	0x000104f0
    dd34:	000104e8 	.word	0x000104e8
    dd38:	000104f8 	.word	0x000104f8
    dd3c:	000104fc 	.word	0x000104fc
    dd40:	0001050c 	.word	0x0001050c
    dd44:	00010504 	.word	0x00010504
    dd48:	00010508 	.word	0x00010508
    dd4c:	00010500 	.word	0x00010500
    dd50:	00010510 	.word	0x00010510
    dd54:	00010514 	.word	0x00010514
    dd58:	00010524 	.word	0x00010524
    dd5c:	0001051c 	.word	0x0001051c
    dd60:	00010520 	.word	0x00010520
    dd64:	00010518 	.word	0x00010518

0000dd68 <am_hal_clkgen_control>:
    dd68:	4b49      	ldr	r3, [pc, #292]	; (de90 <am_hal_clkgen_control+0x128>)
    dd6a:	681a      	ldr	r2, [r3, #0]
    dd6c:	b912      	cbnz	r2, dd74 <am_hal_clkgen_control+0xc>
    dd6e:	4a49      	ldr	r2, [pc, #292]	; (de94 <am_hal_clkgen_control+0x12c>)
    dd70:	6812      	ldr	r2, [r2, #0]
    dd72:	601a      	str	r2, [r3, #0]
    dd74:	2809      	cmp	r0, #9
    dd76:	f200 8089 	bhi.w	de8c <am_hal_clkgen_control+0x124>
    dd7a:	e8df f000 	tbb	[pc, r0]
    dd7e:	160d      	.short	0x160d
    dd80:	423a261e 	.word	0x423a261e
    dd84:	055c544c 	.word	0x055c544c
    dd88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dd8c:	2000      	movs	r0, #0
    dd8e:	6a1a      	ldr	r2, [r3, #32]
    dd90:	f36f 0200 	bfc	r2, #0, #1
    dd94:	621a      	str	r2, [r3, #32]
    dd96:	4770      	bx	lr
    dd98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dd9c:	2200      	movs	r2, #0
    dd9e:	2147      	movs	r1, #71	; 0x47
    dda0:	6159      	str	r1, [r3, #20]
    dda2:	4610      	mov	r0, r2
    dda4:	619a      	str	r2, [r3, #24]
    dda6:	615a      	str	r2, [r3, #20]
    dda8:	4770      	bx	lr
    ddaa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    ddae:	2000      	movs	r0, #0
    ddb0:	899a      	ldrh	r2, [r3, #12]
    ddb2:	f36f 0200 	bfc	r2, #0, #1
    ddb6:	819a      	strh	r2, [r3, #12]
    ddb8:	4770      	bx	lr
    ddba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    ddbe:	2000      	movs	r0, #0
    ddc0:	899a      	ldrh	r2, [r3, #12]
    ddc2:	f36f 0241 	bfc	r2, #1, #1
    ddc6:	819a      	strh	r2, [r3, #12]
    ddc8:	4770      	bx	lr
    ddca:	4a33      	ldr	r2, [pc, #204]	; (de98 <am_hal_clkgen_control+0x130>)
    ddcc:	68d3      	ldr	r3, [r2, #12]
    ddce:	b2db      	uxtb	r3, r3
    ddd0:	2b21      	cmp	r3, #33	; 0x21
    ddd2:	d106      	bne.n	dde2 <am_hal_clkgen_control+0x7a>
    ddd4:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    ddd8:	2101      	movs	r1, #1
    ddda:	f361 2309 	bfi	r3, r1, #8, #2
    ddde:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    dde2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dde6:	2000      	movs	r0, #0
    dde8:	8993      	ldrh	r3, [r2, #12]
    ddea:	f043 0301 	orr.w	r3, r3, #1
    ddee:	8193      	strh	r3, [r2, #12]
    ddf0:	4770      	bx	lr
    ddf2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    ddf6:	2000      	movs	r0, #0
    ddf8:	8993      	ldrh	r3, [r2, #12]
    ddfa:	f043 0302 	orr.w	r3, r3, #2
    ddfe:	8193      	strh	r3, [r2, #12]
    de00:	4770      	bx	lr
    de02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    de06:	2200      	movs	r2, #0
    de08:	2047      	movs	r0, #71	; 0x47
    de0a:	2101      	movs	r1, #1
    de0c:	6158      	str	r0, [r3, #20]
    de0e:	6199      	str	r1, [r3, #24]
    de10:	4610      	mov	r0, r2
    de12:	615a      	str	r2, [r3, #20]
    de14:	4770      	bx	lr
    de16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    de1a:	2000      	movs	r0, #0
    de1c:	899a      	ldrh	r2, [r3, #12]
    de1e:	f36f 12c7 	bfc	r2, #7, #1
    de22:	819a      	strh	r2, [r3, #12]
    de24:	4770      	bx	lr
    de26:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    de2a:	2000      	movs	r0, #0
    de2c:	8993      	ldrh	r3, [r2, #12]
    de2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    de32:	8193      	strh	r3, [r2, #12]
    de34:	4770      	bx	lr
    de36:	4a18      	ldr	r2, [pc, #96]	; (de98 <am_hal_clkgen_control+0x130>)
    de38:	68d3      	ldr	r3, [r2, #12]
    de3a:	b2db      	uxtb	r3, r3
    de3c:	2b21      	cmp	r3, #33	; 0x21
    de3e:	d00a      	beq.n	de56 <am_hal_clkgen_control+0xee>
    de40:	b139      	cbz	r1, de52 <am_hal_clkgen_control+0xea>
    de42:	680b      	ldr	r3, [r1, #0]
    de44:	f043 0301 	orr.w	r3, r3, #1
    de48:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    de4c:	2000      	movs	r0, #0
    de4e:	6213      	str	r3, [r2, #32]
    de50:	4770      	bx	lr
    de52:	4b12      	ldr	r3, [pc, #72]	; (de9c <am_hal_clkgen_control+0x134>)
    de54:	e7f8      	b.n	de48 <am_hal_clkgen_control+0xe0>
    de56:	b500      	push	{lr}
    de58:	b083      	sub	sp, #12
    de5a:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    de5e:	9101      	str	r1, [sp, #4]
    de60:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    de64:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    de68:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    de6c:	f000 f836 	bl	dedc <am_hal_flash_delay>
    de70:	9901      	ldr	r1, [sp, #4]
    de72:	b149      	cbz	r1, de88 <am_hal_clkgen_control+0x120>
    de74:	680b      	ldr	r3, [r1, #0]
    de76:	f043 0301 	orr.w	r3, r3, #1
    de7a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    de7e:	2000      	movs	r0, #0
    de80:	6213      	str	r3, [r2, #32]
    de82:	b003      	add	sp, #12
    de84:	f85d fb04 	ldr.w	pc, [sp], #4
    de88:	4b04      	ldr	r3, [pc, #16]	; (de9c <am_hal_clkgen_control+0x134>)
    de8a:	e7f6      	b.n	de7a <am_hal_clkgen_control+0x112>
    de8c:	2006      	movs	r0, #6
    de8e:	4770      	bx	lr
    de90:	1000af5c 	.word	0x1000af5c
    de94:	4ffff000 	.word	0x4ffff000
    de98:	40020000 	.word	0x40020000
    de9c:	0025b801 	.word	0x0025b801

0000dea0 <am_hal_clkgen_status_get>:
    dea0:	b1b0      	cbz	r0, ded0 <am_hal_clkgen_status_get+0x30>
    dea2:	b410      	push	{r4}
    dea4:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    dea8:	4603      	mov	r3, r0
    deaa:	698c      	ldr	r4, [r1, #24]
    deac:	4809      	ldr	r0, [pc, #36]	; (ded4 <am_hal_clkgen_status_get+0x34>)
    deae:	4a0a      	ldr	r2, [pc, #40]	; (ded8 <am_hal_clkgen_status_get+0x38>)
    deb0:	f014 0f01 	tst.w	r4, #1
    deb4:	bf08      	it	eq
    deb6:	4602      	moveq	r2, r0
    deb8:	601a      	str	r2, [r3, #0]
    deba:	69ca      	ldr	r2, [r1, #28]
    debc:	f85d 4b04 	ldr.w	r4, [sp], #4
    dec0:	f002 0101 	and.w	r1, r2, #1
    dec4:	f3c2 0240 	ubfx	r2, r2, #1, #1
    dec8:	2000      	movs	r0, #0
    deca:	6059      	str	r1, [r3, #4]
    decc:	721a      	strb	r2, [r3, #8]
    dece:	4770      	bx	lr
    ded0:	2006      	movs	r0, #6
    ded2:	4770      	bx	lr
    ded4:	02dc6c00 	.word	0x02dc6c00
    ded8:	016e3600 	.word	0x016e3600

0000dedc <am_hal_flash_delay>:
    dedc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    dee2:	075b      	lsls	r3, r3, #29
    dee4:	bf46      	itte	mi
    dee6:	0040      	lslmi	r0, r0, #1
    dee8:	230e      	movmi	r3, #14
    deea:	230b      	movpl	r3, #11
    deec:	4298      	cmp	r0, r3
    deee:	d902      	bls.n	def6 <am_hal_flash_delay+0x1a>
    def0:	4a01      	ldr	r2, [pc, #4]	; (def8 <am_hal_flash_delay+0x1c>)
    def2:	1ac0      	subs	r0, r0, r3
    def4:	4710      	bx	r2
    def6:	4770      	bx	lr
    def8:	0800009d 	.word	0x0800009d

0000defc <am_hal_flash_delay_status_change>:
    defc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    df00:	460d      	mov	r5, r1
    df02:	6809      	ldr	r1, [r1, #0]
    df04:	4011      	ands	r1, r2
    df06:	428b      	cmp	r3, r1
    df08:	d018      	beq.n	df3c <am_hal_flash_delay_status_change+0x40>
    df0a:	1e44      	subs	r4, r0, #1
    df0c:	b1c8      	cbz	r0, df42 <am_hal_flash_delay_status_change+0x46>
    df0e:	f8df 8038 	ldr.w	r8, [pc, #56]	; df48 <am_hal_flash_delay_status_change+0x4c>
    df12:	4616      	mov	r6, r2
    df14:	461f      	mov	r7, r3
    df16:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    df1a:	e001      	b.n	df20 <am_hal_flash_delay_status_change+0x24>
    df1c:	1c63      	adds	r3, r4, #1
    df1e:	d010      	beq.n	df42 <am_hal_flash_delay_status_change+0x46>
    df20:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    df24:	f013 0f04 	tst.w	r3, #4
    df28:	bf0c      	ite	eq
    df2a:	2005      	moveq	r0, #5
    df2c:	2012      	movne	r0, #18
    df2e:	47c0      	blx	r8
    df30:	6828      	ldr	r0, [r5, #0]
    df32:	4030      	ands	r0, r6
    df34:	42b8      	cmp	r0, r7
    df36:	f104 34ff 	add.w	r4, r4, #4294967295
    df3a:	d1ef      	bne.n	df1c <am_hal_flash_delay_status_change+0x20>
    df3c:	2000      	movs	r0, #0
    df3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    df42:	2004      	movs	r0, #4
    df44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    df48:	0800009d 	.word	0x0800009d

0000df4c <am_hal_flash_delay_status_check>:
    df4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    df50:	f89d c020 	ldrb.w	ip, [sp, #32]
    df54:	f8df 805c 	ldr.w	r8, [pc, #92]	; dfb4 <am_hal_flash_delay_status_check+0x68>
    df58:	4604      	mov	r4, r0
    df5a:	460d      	mov	r5, r1
    df5c:	4616      	mov	r6, r2
    df5e:	461f      	mov	r7, r3
    df60:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    df64:	f1bc 0f00 	cmp.w	ip, #0
    df68:	d00a      	beq.n	df80 <am_hal_flash_delay_status_check+0x34>
    df6a:	e01a      	b.n	dfa2 <am_hal_flash_delay_status_check+0x56>
    df6c:	b1f4      	cbz	r4, dfac <am_hal_flash_delay_status_check+0x60>
    df6e:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    df72:	f013 0f04 	tst.w	r3, #4
    df76:	bf0c      	ite	eq
    df78:	2005      	moveq	r0, #5
    df7a:	2012      	movne	r0, #18
    df7c:	3c01      	subs	r4, #1
    df7e:	47c0      	blx	r8
    df80:	6828      	ldr	r0, [r5, #0]
    df82:	4030      	ands	r0, r6
    df84:	42b8      	cmp	r0, r7
    df86:	d0f1      	beq.n	df6c <am_hal_flash_delay_status_check+0x20>
    df88:	2000      	movs	r0, #0
    df8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    df8e:	b16c      	cbz	r4, dfac <am_hal_flash_delay_status_check+0x60>
    df90:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    df94:	f013 0f04 	tst.w	r3, #4
    df98:	bf0c      	ite	eq
    df9a:	2005      	moveq	r0, #5
    df9c:	2012      	movne	r0, #18
    df9e:	3c01      	subs	r4, #1
    dfa0:	47c0      	blx	r8
    dfa2:	6828      	ldr	r0, [r5, #0]
    dfa4:	4030      	ands	r0, r6
    dfa6:	42b8      	cmp	r0, r7
    dfa8:	d1f1      	bne.n	df8e <am_hal_flash_delay_status_check+0x42>
    dfaa:	e7ed      	b.n	df88 <am_hal_flash_delay_status_check+0x3c>
    dfac:	2004      	movs	r0, #4
    dfae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dfb2:	bf00      	nop
    dfb4:	0800009d 	.word	0x0800009d

0000dfb8 <am_hal_flash_load_ui32>:
    dfb8:	4b00      	ldr	r3, [pc, #0]	; (dfbc <am_hal_flash_load_ui32+0x4>)
    dfba:	4718      	bx	r3
    dfbc:	08000075 	.word	0x08000075

0000dfc0 <am_hal_flash_store_ui32>:
    dfc0:	4b01      	ldr	r3, [pc, #4]	; (dfc8 <am_hal_flash_store_ui32+0x8>)
    dfc2:	f043 0301 	orr.w	r3, r3, #1
    dfc6:	4718      	bx	r3
    dfc8:	10001054 	.word	0x10001054

0000dfcc <am_hal_gpio_pinconfig>:
    dfcc:	2831      	cmp	r0, #49	; 0x31
    dfce:	f200 80c3 	bhi.w	e158 <am_hal_gpio_pinconfig+0x18c>
    dfd2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dfd6:	4604      	mov	r4, r0
    dfd8:	f011 07e0 	ands.w	r7, r1, #224	; 0xe0
    dfdc:	f001 0007 	and.w	r0, r1, #7
    dfe0:	b085      	sub	sp, #20
    dfe2:	f3c1 03c1 	ubfx	r3, r1, #3, #2
    dfe6:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    dfea:	d00f      	beq.n	e00c <am_hal_gpio_pinconfig+0x40>
    dfec:	f3c1 1642 	ubfx	r6, r1, #5, #3
    dff0:	1db5      	adds	r5, r6, #6
    dff2:	f005 0507 	and.w	r5, r5, #7
    dff6:	2d03      	cmp	r5, #3
    dff8:	f042 0201 	orr.w	r2, r2, #1
    dffc:	f240 80ae 	bls.w	e15c <am_hal_gpio_pinconfig+0x190>
    e000:	2fc0      	cmp	r7, #192	; 0xc0
    e002:	f000 80e1 	beq.w	e1c8 <am_hal_gpio_pinconfig+0x1fc>
    e006:	2f20      	cmp	r7, #32
    e008:	f000 80e3 	beq.w	e1d2 <am_hal_gpio_pinconfig+0x206>
    e00c:	b163      	cbz	r3, e028 <am_hal_gpio_pinconfig+0x5c>
    e00e:	2b01      	cmp	r3, #1
    e010:	f000 80d3 	beq.w	e1ba <am_hal_gpio_pinconfig+0x1ee>
    e014:	2b02      	cmp	r3, #2
    e016:	f040 80c9 	bne.w	e1ac <am_hal_gpio_pinconfig+0x1e0>
    e01a:	4b79      	ldr	r3, [pc, #484]	; (e200 <am_hal_gpio_pinconfig+0x234>)
    e01c:	5d1b      	ldrb	r3, [r3, r4]
    e01e:	075b      	lsls	r3, r3, #29
    e020:	f140 80c4 	bpl.w	e1ac <am_hal_gpio_pinconfig+0x1e0>
    e024:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    e028:	4b76      	ldr	r3, [pc, #472]	; (e204 <am_hal_gpio_pinconfig+0x238>)
    e02a:	5d1b      	ldrb	r3, [r3, r4]
    e02c:	4103      	asrs	r3, r0
    e02e:	005b      	lsls	r3, r3, #1
    e030:	f003 0302 	and.w	r3, r3, #2
    e034:	4313      	orrs	r3, r2
    e036:	4a74      	ldr	r2, [pc, #464]	; (e208 <am_hal_gpio_pinconfig+0x23c>)
    e038:	5d12      	ldrb	r2, [r2, r4]
    e03a:	4282      	cmp	r2, r0
    e03c:	f000 8099 	beq.w	e172 <am_hal_gpio_pinconfig+0x1a6>
    e040:	f3c1 3000 	ubfx	r0, r1, #12, #1
    e044:	f3c1 2581 	ubfx	r5, r1, #10, #2
    e048:	f3c1 3280 	ubfx	r2, r1, #14, #1
    e04c:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    e050:	0a88      	lsrs	r0, r1, #10
    e052:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    e056:	f000 0008 	and.w	r0, r0, #8
    e05a:	4302      	orrs	r2, r0
    e05c:	f3c1 2007 	ubfx	r0, r1, #8, #8
    e060:	f000 050c 	and.w	r5, r0, #12
    e064:	2d04      	cmp	r5, #4
    e066:	f000 80a5 	beq.w	e1b4 <am_hal_gpio_pinconfig+0x1e8>
    e06a:	4d68      	ldr	r5, [pc, #416]	; (e20c <am_hal_gpio_pinconfig+0x240>)
    e06c:	682d      	ldr	r5, [r5, #0]
    e06e:	eba1 0805 	sub.w	r8, r1, r5
    e072:	fab8 f888 	clz	r8, r8
    e076:	ea4f 1858 	mov.w	r8, r8, lsr #5
    e07a:	f010 0f60 	tst.w	r0, #96	; 0x60
    e07e:	bf04      	itt	eq
    e080:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
    e084:	f360 0200 	bfieq	r2, r0, #0, #1
    e088:	00a0      	lsls	r0, r4, #2
    e08a:	f3c1 2101 	ubfx	r1, r1, #8, #2
    e08e:	2902      	cmp	r1, #2
    e090:	d05c      	beq.n	e14c <am_hal_gpio_pinconfig+0x180>
    e092:	2903      	cmp	r1, #3
    e094:	d058      	beq.n	e148 <am_hal_gpio_pinconfig+0x17c>
    e096:	2901      	cmp	r1, #1
    e098:	ea4f 01c4 	mov.w	r1, r4, lsl #3
    e09c:	bf08      	it	eq
    e09e:	f043 0304 	orreq.w	r3, r3, #4
    e0a2:	f001 0118 	and.w	r1, r1, #24
    e0a6:	2700      	movs	r7, #0
    e0a8:	f000 001c 	and.w	r0, r0, #28
    e0ac:	fa02 f600 	lsl.w	r6, r2, r0
    e0b0:	220f      	movs	r2, #15
    e0b2:	4082      	lsls	r2, r0
    e0b4:	43d2      	mvns	r2, r2
    e0b6:	f04f 09ff 	mov.w	r9, #255	; 0xff
    e0ba:	fa03 f501 	lsl.w	r5, r3, r1
    e0be:	fa09 f901 	lsl.w	r9, r9, r1
    e0c2:	9201      	str	r2, [sp, #4]
    e0c4:	f000 f9fe 	bl	e4c4 <am_hal_interrupt_master_disable>
    e0c8:	f024 0a03 	bic.w	sl, r4, #3
    e0cc:	ea4f 0b54 	mov.w	fp, r4, lsr #1
    e0d0:	f10a 4c80 	add.w	ip, sl, #1073741824	; 0x40000000
    e0d4:	4b4e      	ldr	r3, [pc, #312]	; (e210 <am_hal_gpio_pinconfig+0x244>)
    e0d6:	494f      	ldr	r1, [pc, #316]	; (e214 <am_hal_gpio_pinconfig+0x248>)
    e0d8:	9a01      	ldr	r2, [sp, #4]
    e0da:	9003      	str	r0, [sp, #12]
    e0dc:	ea6f 0909 	mvn.w	r9, r9
    e0e0:	f02b 0b03 	bic.w	fp, fp, #3
    e0e4:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
    e0e8:	f1b8 0f00 	cmp.w	r8, #0
    e0ec:	d00b      	beq.n	e106 <am_hal_gpio_pinconfig+0x13a>
    e0ee:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
    e0f2:	f004 081f 	and.w	r8, r4, #31
    e0f6:	4848      	ldr	r0, [pc, #288]	; (e218 <am_hal_gpio_pinconfig+0x24c>)
    e0f8:	f00e 0e04 	and.w	lr, lr, #4
    e0fc:	2401      	movs	r4, #1
    e0fe:	fa04 f408 	lsl.w	r4, r4, r8
    e102:	f84e 4000 	str.w	r4, [lr, r0]
    e106:	4845      	ldr	r0, [pc, #276]	; (e21c <am_hal_gpio_pinconfig+0x250>)
    e108:	2473      	movs	r4, #115	; 0x73
    e10a:	6604      	str	r4, [r0, #96]	; 0x60
    e10c:	f8dc 4000 	ldr.w	r4, [ip]
    e110:	ea04 0409 	and.w	r4, r4, r9
    e114:	4325      	orrs	r5, r4
    e116:	f8cc 5000 	str.w	r5, [ip]
    e11a:	f85b 4003 	ldr.w	r4, [fp, r3]
    e11e:	4022      	ands	r2, r4
    e120:	4332      	orrs	r2, r6
    e122:	f84b 2003 	str.w	r2, [fp, r3]
    e126:	f85a 3001 	ldr.w	r3, [sl, r1]
    e12a:	ea03 0909 	and.w	r9, r3, r9
    e12e:	2400      	movs	r4, #0
    e130:	ea49 0707 	orr.w	r7, r9, r7
    e134:	f84a 7001 	str.w	r7, [sl, r1]
    e138:	6604      	str	r4, [r0, #96]	; 0x60
    e13a:	9803      	ldr	r0, [sp, #12]
    e13c:	f000 f9c6 	bl	e4cc <am_hal_interrupt_master_set>
    e140:	4620      	mov	r0, r4
    e142:	b005      	add	sp, #20
    e144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e148:	f043 0304 	orr.w	r3, r3, #4
    e14c:	00e1      	lsls	r1, r4, #3
    e14e:	f001 0118 	and.w	r1, r1, #24
    e152:	2701      	movs	r7, #1
    e154:	408f      	lsls	r7, r1
    e156:	e7a7      	b.n	e0a8 <am_hal_gpio_pinconfig+0xdc>
    e158:	2006      	movs	r0, #6
    e15a:	4770      	bx	lr
    e15c:	4d28      	ldr	r5, [pc, #160]	; (e200 <am_hal_gpio_pinconfig+0x234>)
    e15e:	5d2d      	ldrb	r5, [r5, r4]
    e160:	3e02      	subs	r6, #2
    e162:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    e166:	07ee      	lsls	r6, r5, #31
    e168:	d536      	bpl.n	e1d8 <am_hal_gpio_pinconfig+0x20c>
    e16a:	2b00      	cmp	r3, #0
    e16c:	f43f af5c 	beq.w	e028 <am_hal_gpio_pinconfig+0x5c>
    e170:	e74d      	b.n	e00e <am_hal_gpio_pinconfig+0x42>
    e172:	f3c1 4202 	ubfx	r2, r1, #16, #3
    e176:	2a07      	cmp	r2, #7
    e178:	d030      	beq.n	e1dc <am_hal_gpio_pinconfig+0x210>
    e17a:	4d29      	ldr	r5, [pc, #164]	; (e220 <am_hal_gpio_pinconfig+0x254>)
    e17c:	f3c1 40c1 	ubfx	r0, r1, #19, #2
    e180:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    e184:	f815 0024 	ldrb.w	r0, [r5, r4, lsl #2]
    e188:	4290      	cmp	r0, r2
    e18a:	d029      	beq.n	e1e0 <am_hal_gpio_pinconfig+0x214>
    e18c:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    e190:	00a0      	lsls	r0, r4, #2
    e192:	786e      	ldrb	r6, [r5, #1]
    e194:	4296      	cmp	r6, r2
    e196:	d02d      	beq.n	e1f4 <am_hal_gpio_pinconfig+0x228>
    e198:	78ae      	ldrb	r6, [r5, #2]
    e19a:	4296      	cmp	r6, r2
    e19c:	d02c      	beq.n	e1f8 <am_hal_gpio_pinconfig+0x22c>
    e19e:	78ed      	ldrb	r5, [r5, #3]
    e1a0:	4295      	cmp	r5, r2
    e1a2:	d02b      	beq.n	e1fc <am_hal_gpio_pinconfig+0x230>
    e1a4:	481f      	ldr	r0, [pc, #124]	; (e224 <am_hal_gpio_pinconfig+0x258>)
    e1a6:	b005      	add	sp, #20
    e1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e1ac:	481e      	ldr	r0, [pc, #120]	; (e228 <am_hal_gpio_pinconfig+0x25c>)
    e1ae:	b005      	add	sp, #20
    e1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e1b4:	f04f 0801 	mov.w	r8, #1
    e1b8:	e75f      	b.n	e07a <am_hal_gpio_pinconfig+0xae>
    e1ba:	4b11      	ldr	r3, [pc, #68]	; (e200 <am_hal_gpio_pinconfig+0x234>)
    e1bc:	5d1b      	ldrb	r3, [r3, r4]
    e1be:	079d      	lsls	r5, r3, #30
    e1c0:	d5f4      	bpl.n	e1ac <am_hal_gpio_pinconfig+0x1e0>
    e1c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    e1c6:	e72f      	b.n	e028 <am_hal_gpio_pinconfig+0x5c>
    e1c8:	2c14      	cmp	r4, #20
    e1ca:	f43f af1f 	beq.w	e00c <am_hal_gpio_pinconfig+0x40>
    e1ce:	4817      	ldr	r0, [pc, #92]	; (e22c <am_hal_gpio_pinconfig+0x260>)
    e1d0:	e7b7      	b.n	e142 <am_hal_gpio_pinconfig+0x176>
    e1d2:	2c14      	cmp	r4, #20
    e1d4:	f47f af1a 	bne.w	e00c <am_hal_gpio_pinconfig+0x40>
    e1d8:	4815      	ldr	r0, [pc, #84]	; (e230 <am_hal_gpio_pinconfig+0x264>)
    e1da:	e7b2      	b.n	e142 <am_hal_gpio_pinconfig+0x176>
    e1dc:	4815      	ldr	r0, [pc, #84]	; (e234 <am_hal_gpio_pinconfig+0x268>)
    e1de:	e7b0      	b.n	e142 <am_hal_gpio_pinconfig+0x176>
    e1e0:	2200      	movs	r2, #0
    e1e2:	00a0      	lsls	r0, r4, #2
    e1e4:	0052      	lsls	r2, r2, #1
    e1e6:	f3c1 5540 	ubfx	r5, r1, #21, #1
    e1ea:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
    e1ee:	f04f 0800 	mov.w	r8, #0
    e1f2:	e74a      	b.n	e08a <am_hal_gpio_pinconfig+0xbe>
    e1f4:	2201      	movs	r2, #1
    e1f6:	e7f5      	b.n	e1e4 <am_hal_gpio_pinconfig+0x218>
    e1f8:	2202      	movs	r2, #2
    e1fa:	e7f3      	b.n	e1e4 <am_hal_gpio_pinconfig+0x218>
    e1fc:	2203      	movs	r2, #3
    e1fe:	e7f1      	b.n	e1e4 <am_hal_gpio_pinconfig+0x218>
    e200:	00010540 	.word	0x00010540
    e204:	00010574 	.word	0x00010574
    e208:	00010670 	.word	0x00010670
    e20c:	00010534 	.word	0x00010534
    e210:	40010040 	.word	0x40010040
    e214:	400100e0 	.word	0x400100e0
    e218:	400100b4 	.word	0x400100b4
    e21c:	40010000 	.word	0x40010000
    e220:	000105a8 	.word	0x000105a8
    e224:	08000104 	.word	0x08000104
    e228:	08000102 	.word	0x08000102
    e22c:	08000101 	.word	0x08000101
    e230:	08000100 	.word	0x08000100
    e234:	08000103 	.word	0x08000103

0000e238 <am_hal_gpio_state_read>:
    e238:	b15a      	cbz	r2, e252 <am_hal_gpio_state_read+0x1a>
    e23a:	2831      	cmp	r0, #49	; 0x31
    e23c:	d81d      	bhi.n	e27a <am_hal_gpio_state_read+0x42>
    e23e:	08c3      	lsrs	r3, r0, #3
    e240:	2901      	cmp	r1, #1
    e242:	f003 0304 	and.w	r3, r3, #4
    e246:	f000 001f 	and.w	r0, r0, #31
    e24a:	d01b      	beq.n	e284 <am_hal_gpio_state_read+0x4c>
    e24c:	2902      	cmp	r1, #2
    e24e:	d00b      	beq.n	e268 <am_hal_gpio_state_read+0x30>
    e250:	b109      	cbz	r1, e256 <am_hal_gpio_state_read+0x1e>
    e252:	2006      	movs	r0, #6
    e254:	4770      	bx	lr
    e256:	4910      	ldr	r1, [pc, #64]	; (e298 <am_hal_gpio_state_read+0x60>)
    e258:	585b      	ldr	r3, [r3, r1]
    e25a:	fa23 f000 	lsr.w	r0, r3, r0
    e25e:	f000 0001 	and.w	r0, r0, #1
    e262:	6010      	str	r0, [r2, #0]
    e264:	2000      	movs	r0, #0
    e266:	4770      	bx	lr
    e268:	490c      	ldr	r1, [pc, #48]	; (e29c <am_hal_gpio_state_read+0x64>)
    e26a:	585b      	ldr	r3, [r3, r1]
    e26c:	fa23 f000 	lsr.w	r0, r3, r0
    e270:	f000 0001 	and.w	r0, r0, #1
    e274:	6010      	str	r0, [r2, #0]
    e276:	2000      	movs	r0, #0
    e278:	4770      	bx	lr
    e27a:	f04f 33ff 	mov.w	r3, #4294967295
    e27e:	6013      	str	r3, [r2, #0]
    e280:	2005      	movs	r0, #5
    e282:	4770      	bx	lr
    e284:	4906      	ldr	r1, [pc, #24]	; (e2a0 <am_hal_gpio_state_read+0x68>)
    e286:	585b      	ldr	r3, [r3, r1]
    e288:	fa23 f000 	lsr.w	r0, r3, r0
    e28c:	f000 0001 	and.w	r0, r0, #1
    e290:	6010      	str	r0, [r2, #0]
    e292:	2000      	movs	r0, #0
    e294:	4770      	bx	lr
    e296:	bf00      	nop
    e298:	40010080 	.word	0x40010080
    e29c:	400100a0 	.word	0x400100a0
    e2a0:	40010088 	.word	0x40010088

0000e2a4 <am_hal_gpio_state_write>:
    e2a4:	2831      	cmp	r0, #49	; 0x31
    e2a6:	d81a      	bhi.n	e2de <am_hal_gpio_state_write+0x3a>
    e2a8:	b570      	push	{r4, r5, r6, lr}
    e2aa:	2905      	cmp	r1, #5
    e2ac:	b082      	sub	sp, #8
    e2ae:	460d      	mov	r5, r1
    e2b0:	d812      	bhi.n	e2d8 <am_hal_gpio_state_write+0x34>
    e2b2:	f000 031f 	and.w	r3, r0, #31
    e2b6:	2201      	movs	r2, #1
    e2b8:	08c0      	lsrs	r0, r0, #3
    e2ba:	fa02 f603 	lsl.w	r6, r2, r3
    e2be:	f000 0404 	and.w	r4, r0, #4
    e2c2:	f000 f8ff 	bl	e4c4 <am_hal_interrupt_master_disable>
    e2c6:	3d01      	subs	r5, #1
    e2c8:	9001      	str	r0, [sp, #4]
    e2ca:	2d04      	cmp	r5, #4
    e2cc:	d821      	bhi.n	e312 <am_hal_gpio_state_write+0x6e>
    e2ce:	e8df f005 	tbb	[pc, r5]
    e2d2:	1512      	.short	0x1512
    e2d4:	1d1a      	.short	0x1d1a
    e2d6:	08          	.byte	0x08
    e2d7:	00          	.byte	0x00
    e2d8:	2006      	movs	r0, #6
    e2da:	b002      	add	sp, #8
    e2dc:	bd70      	pop	{r4, r5, r6, pc}
    e2de:	2005      	movs	r0, #5
    e2e0:	4770      	bx	lr
    e2e2:	4a0d      	ldr	r2, [pc, #52]	; (e318 <am_hal_gpio_state_write+0x74>)
    e2e4:	58a3      	ldr	r3, [r4, r2]
    e2e6:	4073      	eors	r3, r6
    e2e8:	50a3      	str	r3, [r4, r2]
    e2ea:	9801      	ldr	r0, [sp, #4]
    e2ec:	f000 f8ee 	bl	e4cc <am_hal_interrupt_master_set>
    e2f0:	2000      	movs	r0, #0
    e2f2:	b002      	add	sp, #8
    e2f4:	bd70      	pop	{r4, r5, r6, pc}
    e2f6:	4b09      	ldr	r3, [pc, #36]	; (e31c <am_hal_gpio_state_write+0x78>)
    e2f8:	50e6      	str	r6, [r4, r3]
    e2fa:	e7f6      	b.n	e2ea <am_hal_gpio_state_write+0x46>
    e2fc:	4a08      	ldr	r2, [pc, #32]	; (e320 <am_hal_gpio_state_write+0x7c>)
    e2fe:	58a3      	ldr	r3, [r4, r2]
    e300:	4073      	eors	r3, r6
    e302:	50a3      	str	r3, [r4, r2]
    e304:	e7f1      	b.n	e2ea <am_hal_gpio_state_write+0x46>
    e306:	4b04      	ldr	r3, [pc, #16]	; (e318 <am_hal_gpio_state_write+0x74>)
    e308:	50e6      	str	r6, [r4, r3]
    e30a:	e7ee      	b.n	e2ea <am_hal_gpio_state_write+0x46>
    e30c:	4b05      	ldr	r3, [pc, #20]	; (e324 <am_hal_gpio_state_write+0x80>)
    e30e:	50e6      	str	r6, [r4, r3]
    e310:	e7eb      	b.n	e2ea <am_hal_gpio_state_write+0x46>
    e312:	4b05      	ldr	r3, [pc, #20]	; (e328 <am_hal_gpio_state_write+0x84>)
    e314:	50e6      	str	r6, [r4, r3]
    e316:	e7e8      	b.n	e2ea <am_hal_gpio_state_write+0x46>
    e318:	400100b4 	.word	0x400100b4
    e31c:	40010090 	.word	0x40010090
    e320:	40010088 	.word	0x40010088
    e324:	400100a8 	.word	0x400100a8
    e328:	40010098 	.word	0x40010098

0000e32c <am_hal_gpio_interrupt_enable>:
    e32c:	b570      	push	{r4, r5, r6, lr}
    e32e:	0c8c      	lsrs	r4, r1, #18
    e330:	04a4      	lsls	r4, r4, #18
    e332:	b082      	sub	sp, #8
    e334:	b9ac      	cbnz	r4, e362 <am_hal_gpio_interrupt_enable+0x36>
    e336:	460d      	mov	r5, r1
    e338:	4606      	mov	r6, r0
    e33a:	f000 f8c3 	bl	e4c4 <am_hal_interrupt_master_disable>
    e33e:	4b0a      	ldr	r3, [pc, #40]	; (e368 <am_hal_gpio_interrupt_enable+0x3c>)
    e340:	9001      	str	r0, [sp, #4]
    e342:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
    e346:	4330      	orrs	r0, r6
    e348:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
    e34c:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
    e350:	430d      	orrs	r5, r1
    e352:	f8c3 5210 	str.w	r5, [r3, #528]	; 0x210
    e356:	9801      	ldr	r0, [sp, #4]
    e358:	f000 f8b8 	bl	e4cc <am_hal_interrupt_master_set>
    e35c:	4620      	mov	r0, r4
    e35e:	b002      	add	sp, #8
    e360:	bd70      	pop	{r4, r5, r6, pc}
    e362:	2005      	movs	r0, #5
    e364:	b002      	add	sp, #8
    e366:	bd70      	pop	{r4, r5, r6, pc}
    e368:	40010000 	.word	0x40010000

0000e36c <am_hal_gpio_interrupt_clear>:
    e36c:	b570      	push	{r4, r5, r6, lr}
    e36e:	0c8c      	lsrs	r4, r1, #18
    e370:	04a4      	lsls	r4, r4, #18
    e372:	b082      	sub	sp, #8
    e374:	b97c      	cbnz	r4, e396 <am_hal_gpio_interrupt_clear+0x2a>
    e376:	460d      	mov	r5, r1
    e378:	4606      	mov	r6, r0
    e37a:	f000 f8a3 	bl	e4c4 <am_hal_interrupt_master_disable>
    e37e:	4b07      	ldr	r3, [pc, #28]	; (e39c <am_hal_gpio_interrupt_clear+0x30>)
    e380:	9001      	str	r0, [sp, #4]
    e382:	f8c3 6208 	str.w	r6, [r3, #520]	; 0x208
    e386:	f8c3 5218 	str.w	r5, [r3, #536]	; 0x218
    e38a:	9801      	ldr	r0, [sp, #4]
    e38c:	f000 f89e 	bl	e4cc <am_hal_interrupt_master_set>
    e390:	4620      	mov	r0, r4
    e392:	b002      	add	sp, #8
    e394:	bd70      	pop	{r4, r5, r6, pc}
    e396:	2005      	movs	r0, #5
    e398:	b002      	add	sp, #8
    e39a:	bd70      	pop	{r4, r5, r6, pc}
    e39c:	40010000 	.word	0x40010000

0000e3a0 <am_hal_gpio_interrupt_status_get>:
    e3a0:	b1d1      	cbz	r1, e3d8 <am_hal_gpio_interrupt_status_get+0x38>
    e3a2:	b530      	push	{r4, r5, lr}
    e3a4:	b083      	sub	sp, #12
    e3a6:	460c      	mov	r4, r1
    e3a8:	4605      	mov	r5, r0
    e3aa:	f000 f88b 	bl	e4c4 <am_hal_interrupt_master_disable>
    e3ae:	4a0b      	ldr	r2, [pc, #44]	; (e3dc <am_hal_gpio_interrupt_status_get+0x3c>)
    e3b0:	9001      	str	r0, [sp, #4]
    e3b2:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
    e3b6:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
    e3ba:	b12d      	cbz	r5, e3c8 <am_hal_gpio_interrupt_status_get+0x28>
    e3bc:	f8d2 0210 	ldr.w	r0, [r2, #528]	; 0x210
    e3c0:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
    e3c4:	4003      	ands	r3, r0
    e3c6:	4011      	ands	r1, r2
    e3c8:	9801      	ldr	r0, [sp, #4]
    e3ca:	e9c4 1300 	strd	r1, r3, [r4]
    e3ce:	f000 f87d 	bl	e4cc <am_hal_interrupt_master_set>
    e3d2:	2000      	movs	r0, #0
    e3d4:	b003      	add	sp, #12
    e3d6:	bd30      	pop	{r4, r5, pc}
    e3d8:	2006      	movs	r0, #6
    e3da:	4770      	bx	lr
    e3dc:	40010000 	.word	0x40010000

0000e3e0 <am_hal_gpio_interrupt_register>:
    e3e0:	2831      	cmp	r0, #49	; 0x31
    e3e2:	4603      	mov	r3, r0
    e3e4:	d805      	bhi.n	e3f2 <am_hal_gpio_interrupt_register+0x12>
    e3e6:	b131      	cbz	r1, e3f6 <am_hal_gpio_interrupt_register+0x16>
    e3e8:	4a04      	ldr	r2, [pc, #16]	; (e3fc <am_hal_gpio_interrupt_register+0x1c>)
    e3ea:	2000      	movs	r0, #0
    e3ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    e3f0:	4770      	bx	lr
    e3f2:	2005      	movs	r0, #5
    e3f4:	4770      	bx	lr
    e3f6:	2006      	movs	r0, #6
    e3f8:	4770      	bx	lr
    e3fa:	bf00      	nop
    e3fc:	10007abc 	.word	0x10007abc

0000e400 <am_hal_gpio_interrupt_service>:
    e400:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e404:	0c8b      	lsrs	r3, r1, #18
    e406:	049b      	lsls	r3, r3, #18
    e408:	2b00      	cmp	r3, #0
    e40a:	d14d      	bne.n	e4a8 <am_hal_gpio_interrupt_service+0xa8>
    e40c:	ea50 0201 	orrs.w	r2, r0, r1
    e410:	460e      	mov	r6, r1
    e412:	4607      	mov	r7, r0
    e414:	d043      	beq.n	e49e <am_hal_gpio_interrupt_service+0x9e>
    e416:	4d27      	ldr	r5, [pc, #156]	; (e4b4 <am_hal_gpio_interrupt_service+0xb4>)
    e418:	f8df 909c 	ldr.w	r9, [pc, #156]	; e4b8 <am_hal_gpio_interrupt_service+0xb8>
    e41c:	469b      	mov	fp, r3
    e41e:	4698      	mov	r8, r3
    e420:	f1cb 0220 	rsb	r2, fp, #32
    e424:	fa06 f202 	lsl.w	r2, r6, r2
    e428:	f1ab 0320 	sub.w	r3, fp, #32
    e42c:	fa27 fa0b 	lsr.w	sl, r7, fp
    e430:	fa26 f303 	lsr.w	r3, r6, r3
    e434:	ea4a 0a02 	orr.w	sl, sl, r2
    e438:	ea5a 0a03 	orrs.w	sl, sl, r3
    e43c:	d01a      	beq.n	e474 <am_hal_gpio_interrupt_service+0x74>
    e43e:	2401      	movs	r4, #1
    e440:	f1ca 0300 	rsb	r3, sl, #0
    e444:	ea03 030a 	and.w	r3, r3, sl
    e448:	fab3 f383 	clz	r3, r3
    e44c:	f1c3 031f 	rsb	r3, r3, #31
    e450:	eb03 010b 	add.w	r1, r3, fp
    e454:	fa04 f303 	lsl.w	r3, r4, r3
    e458:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    e45c:	ea2a 0a03 	bic.w	sl, sl, r3
    e460:	b1ba      	cbz	r2, e492 <am_hal_gpio_interrupt_service+0x92>
    e462:	f012 0f01 	tst.w	r2, #1
    e466:	f042 0301 	orr.w	r3, r2, #1
    e46a:	d00b      	beq.n	e484 <am_hal_gpio_interrupt_service+0x84>
    e46c:	4790      	blx	r2
    e46e:	f1ba 0f00 	cmp.w	sl, #0
    e472:	d1e5      	bne.n	e440 <am_hal_gpio_interrupt_service+0x40>
    e474:	f10b 0b20 	add.w	fp, fp, #32
    e478:	f1bb 0f40 	cmp.w	fp, #64	; 0x40
    e47c:	d1d0      	bne.n	e420 <am_hal_gpio_interrupt_service+0x20>
    e47e:	4640      	mov	r0, r8
    e480:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e484:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
    e488:	4798      	blx	r3
    e48a:	f1ba 0f00 	cmp.w	sl, #0
    e48e:	d1d7      	bne.n	e440 <am_hal_gpio_interrupt_service+0x40>
    e490:	e7f0      	b.n	e474 <am_hal_gpio_interrupt_service+0x74>
    e492:	f04f 0807 	mov.w	r8, #7
    e496:	f1ba 0f00 	cmp.w	sl, #0
    e49a:	d1d1      	bne.n	e440 <am_hal_gpio_interrupt_service+0x40>
    e49c:	e7ea      	b.n	e474 <am_hal_gpio_interrupt_service+0x74>
    e49e:	f04f 0801 	mov.w	r8, #1
    e4a2:	4640      	mov	r0, r8
    e4a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e4a8:	f04f 0805 	mov.w	r8, #5
    e4ac:	4640      	mov	r0, r8
    e4ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e4b2:	bf00      	nop
    e4b4:	10007abc 	.word	0x10007abc
    e4b8:	100079f4 	.word	0x100079f4

0000e4bc <am_hal_interrupt_master_enable>:
    e4bc:	f3ef 8010 	mrs	r0, PRIMASK
    e4c0:	b662      	cpsie	i
    e4c2:	4770      	bx	lr

0000e4c4 <am_hal_interrupt_master_disable>:
    e4c4:	f3ef 8010 	mrs	r0, PRIMASK
    e4c8:	b672      	cpsid	i
    e4ca:	4770      	bx	lr

0000e4cc <am_hal_interrupt_master_set>:
    e4cc:	f380 8810 	msr	PRIMASK, r0
    e4d0:	4770      	bx	lr
    e4d2:	bf00      	nop

0000e4d4 <internal_iom_reset_on_error>:
    e4d4:	b570      	push	{r4, r5, r6, lr}
    e4d6:	6844      	ldr	r4, [r0, #4]
    e4d8:	f8d0 0864 	ldr.w	r0, [r0, #2148]	; 0x864
    e4dc:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
    e4e0:	3404      	adds	r4, #4
    e4e2:	0324      	lsls	r4, r4, #12
    e4e4:	2300      	movs	r3, #0
    e4e6:	f8d4 5200 	ldr.w	r5, [r4, #512]	; 0x200
    e4ea:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    e4ee:	050b      	lsls	r3, r1, #20
    e4f0:	d52a      	bpl.n	e548 <internal_iom_reset_on_error+0x74>
    e4f2:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
    e4f6:	079e      	lsls	r6, r3, #30
    e4f8:	d457      	bmi.n	e5aa <internal_iom_reset_on_error+0xd6>
    e4fa:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    e4fe:	079a      	lsls	r2, r3, #30
    e500:	d508      	bpl.n	e514 <internal_iom_reset_on_error+0x40>
    e502:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    e506:	f3c3 4307 	ubfx	r3, r3, #16, #8
    e50a:	2b03      	cmp	r3, #3
    e50c:	d9f5      	bls.n	e4fa <internal_iom_reset_on_error+0x26>
    e50e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e512:	e7f6      	b.n	e502 <internal_iom_reset_on_error+0x2e>
    e514:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    e518:	f003 0306 	and.w	r3, r3, #6
    e51c:	2b04      	cmp	r3, #4
    e51e:	d1f9      	bne.n	e514 <internal_iom_reset_on_error+0x40>
    e520:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    e524:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
    e528:	d00e      	beq.n	e548 <internal_iom_reset_on_error+0x74>
    e52a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    e52e:	f3c3 4307 	ubfx	r3, r3, #16, #8
    e532:	2b03      	cmp	r3, #3
    e534:	d9f4      	bls.n	e520 <internal_iom_reset_on_error+0x4c>
    e536:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e53a:	e7f6      	b.n	e52a <internal_iom_reset_on_error+0x56>
    e53c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    e540:	f003 0306 	and.w	r3, r3, #6
    e544:	2b04      	cmp	r3, #4
    e546:	d1f9      	bne.n	e53c <internal_iom_reset_on_error+0x68>
    e548:	06cb      	lsls	r3, r1, #27
    e54a:	d406      	bmi.n	e55a <internal_iom_reset_on_error+0x86>
    e54c:	f04f 33ff 	mov.w	r3, #4294967295
    e550:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    e554:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    e558:	bd70      	pop	{r4, r5, r6, pc}
    e55a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    e55e:	f003 0306 	and.w	r3, r3, #6
    e562:	2b04      	cmp	r3, #4
    e564:	d1f9      	bne.n	e55a <internal_iom_reset_on_error+0x86>
    e566:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
    e56a:	f36f 1304 	bfc	r3, #4, #1
    e56e:	f884 3214 	strb.w	r3, [r4, #532]	; 0x214
    e572:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
    e576:	f36f 0341 	bfc	r3, #1, #1
    e57a:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    e57e:	0040      	lsls	r0, r0, #1
    e580:	f7ff fcac 	bl	dedc <am_hal_flash_delay>
    e584:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
    e588:	f043 0302 	orr.w	r3, r3, #2
    e58c:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    e590:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
    e594:	f043 0310 	orr.w	r3, r3, #16
    e598:	f884 3214 	strb.w	r3, [r4, #532]	; 0x214
    e59c:	f04f 33ff 	mov.w	r3, #4294967295
    e5a0:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    e5a4:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    e5a8:	bd70      	pop	{r4, r5, r6, pc}
    e5aa:	f8d4 2288 	ldr.w	r2, [r4, #648]	; 0x288
    e5ae:	4e07      	ldr	r6, [pc, #28]	; (e5cc <internal_iom_reset_on_error+0xf8>)
    e5b0:	2a00      	cmp	r2, #0
    e5b2:	d0c3      	beq.n	e53c <internal_iom_reset_on_error+0x68>
    e5b4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    e5b8:	f3c3 2307 	ubfx	r3, r3, #8, #8
    e5bc:	2b03      	cmp	r3, #3
    e5be:	d9f9      	bls.n	e5b4 <internal_iom_reset_on_error+0xe0>
    e5c0:	2a04      	cmp	r2, #4
    e5c2:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
    e5c6:	d9b9      	bls.n	e53c <internal_iom_reset_on_error+0x68>
    e5c8:	3a04      	subs	r2, #4
    e5ca:	e7f1      	b.n	e5b0 <internal_iom_reset_on_error+0xdc>
    e5cc:	deadbeef 	.word	0xdeadbeef

0000e5d0 <am_hal_iom_initialize>:
    e5d0:	2805      	cmp	r0, #5
    e5d2:	d81a      	bhi.n	e60a <am_hal_iom_initialize+0x3a>
    e5d4:	b1e9      	cbz	r1, e612 <am_hal_iom_initialize+0x42>
    e5d6:	b530      	push	{r4, r5, lr}
    e5d8:	f640 0ca4 	movw	ip, #2212	; 0x8a4
    e5dc:	4d0e      	ldr	r5, [pc, #56]	; (e618 <am_hal_iom_initialize+0x48>)
    e5de:	fb0c fc00 	mul.w	ip, ip, r0
    e5e2:	eb05 040c 	add.w	r4, r5, ip
    e5e6:	4602      	mov	r2, r0
    e5e8:	78e3      	ldrb	r3, [r4, #3]
    e5ea:	f013 0301 	ands.w	r3, r3, #1
    e5ee:	d10e      	bne.n	e60e <am_hal_iom_initialize+0x3e>
    e5f0:	4618      	mov	r0, r3
    e5f2:	f855 300c 	ldr.w	r3, [r5, ip]
    e5f6:	f003 4e7c 	and.w	lr, r3, #4227858432	; 0xfc000000
    e5fa:	4b08      	ldr	r3, [pc, #32]	; (e61c <am_hal_iom_initialize+0x4c>)
    e5fc:	ea4e 0303 	orr.w	r3, lr, r3
    e600:	f845 300c 	str.w	r3, [r5, ip]
    e604:	6062      	str	r2, [r4, #4]
    e606:	600c      	str	r4, [r1, #0]
    e608:	bd30      	pop	{r4, r5, pc}
    e60a:	2005      	movs	r0, #5
    e60c:	4770      	bx	lr
    e60e:	2007      	movs	r0, #7
    e610:	bd30      	pop	{r4, r5, pc}
    e612:	2006      	movs	r0, #6
    e614:	4770      	bx	lr
    e616:	bf00      	nop
    e618:	10007b84 	.word	0x10007b84
    e61c:	01123456 	.word	0x01123456

0000e620 <am_hal_iom_enable>:
    e620:	2800      	cmp	r0, #0
    e622:	d063      	beq.n	e6ec <am_hal_iom_enable+0xcc>
    e624:	b530      	push	{r4, r5, lr}
    e626:	6803      	ldr	r3, [r0, #0]
    e628:	4a31      	ldr	r2, [pc, #196]	; (e6f0 <am_hal_iom_enable+0xd0>)
    e62a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e62e:	4293      	cmp	r3, r2
    e630:	b085      	sub	sp, #20
    e632:	4604      	mov	r4, r0
    e634:	d150      	bne.n	e6d8 <am_hal_iom_enable+0xb8>
    e636:	78c3      	ldrb	r3, [r0, #3]
    e638:	079b      	lsls	r3, r3, #30
    e63a:	d450      	bmi.n	e6de <am_hal_iom_enable+0xbe>
    e63c:	6840      	ldr	r0, [r0, #4]
    e63e:	7a21      	ldrb	r1, [r4, #8]
    e640:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    e644:	3304      	adds	r3, #4
    e646:	031b      	lsls	r3, r3, #12
    e648:	3900      	subs	r1, #0
    e64a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
    e64e:	bf18      	it	ne
    e650:	2101      	movne	r1, #1
    e652:	f3c2 0242 	ubfx	r2, r2, #1, #3
    e656:	4291      	cmp	r1, r2
    e658:	bf0c      	ite	eq
    e65a:	2201      	moveq	r2, #1
    e65c:	2210      	movne	r2, #16
    e65e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    e662:	68e2      	ldr	r2, [r4, #12]
    e664:	b38a      	cbz	r2, e6ca <am_hal_iom_enable+0xaa>
    e666:	4923      	ldr	r1, [pc, #140]	; (e6f4 <am_hal_iom_enable+0xd4>)
    e668:	9202      	str	r2, [sp, #8]
    e66a:	2200      	movs	r2, #0
    e66c:	6262      	str	r2, [r4, #36]	; 0x24
    e66e:	61e2      	str	r2, [r4, #28]
    e670:	f8c3 12a4 	str.w	r1, [r3, #676]	; 0x2a4
    e674:	6923      	ldr	r3, [r4, #16]
    e676:	f8c4 2854 	str.w	r2, [r4, #2132]	; 0x854
    e67a:	f884 283c 	strb.w	r2, [r4, #2108]	; 0x83c
    e67e:	f8c4 2838 	str.w	r2, [r4, #2104]	; 0x838
    e682:	f8c4 2844 	str.w	r2, [r4, #2116]	; 0x844
    e686:	f8c4 2840 	str.w	r2, [r4, #2112]	; 0x840
    e68a:	f8c4 2830 	str.w	r2, [r4, #2096]	; 0x830
    e68e:	f8c4 2828 	str.w	r2, [r4, #2088]	; 0x828
    e692:	6222      	str	r2, [r4, #32]
    e694:	f8c4 285c 	str.w	r2, [r4, #2140]	; 0x85c
    e698:	f44f 7580 	mov.w	r5, #256	; 0x100
    e69c:	2201      	movs	r2, #1
    e69e:	085b      	lsrs	r3, r3, #1
    e6a0:	f88d 200c 	strb.w	r2, [sp, #12]
    e6a4:	b2c0      	uxtb	r0, r0
    e6a6:	f604 0228 	addw	r2, r4, #2088	; 0x828
    e6aa:	f8a4 582c 	strh.w	r5, [r4, #2092]	; 0x82c
    e6ae:	a901      	add	r1, sp, #4
    e6b0:	9301      	str	r3, [sp, #4]
    e6b2:	f001 fd1d 	bl	100f0 <am_hal_cmdq_init>
    e6b6:	6863      	ldr	r3, [r4, #4]
    e6b8:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e6bc:	3304      	adds	r3, #4
    e6be:	2202      	movs	r2, #2
    e6c0:	031b      	lsls	r3, r3, #12
    e6c2:	b978      	cbnz	r0, e6e4 <am_hal_iom_enable+0xc4>
    e6c4:	6225      	str	r5, [r4, #32]
    e6c6:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    e6ca:	78e3      	ldrb	r3, [r4, #3]
    e6cc:	2000      	movs	r0, #0
    e6ce:	f043 0302 	orr.w	r3, r3, #2
    e6d2:	70e3      	strb	r3, [r4, #3]
    e6d4:	b005      	add	sp, #20
    e6d6:	bd30      	pop	{r4, r5, pc}
    e6d8:	2002      	movs	r0, #2
    e6da:	b005      	add	sp, #20
    e6dc:	bd30      	pop	{r4, r5, pc}
    e6de:	2000      	movs	r0, #0
    e6e0:	b005      	add	sp, #20
    e6e2:	bd30      	pop	{r4, r5, pc}
    e6e4:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    e6e8:	b005      	add	sp, #20
    e6ea:	bd30      	pop	{r4, r5, pc}
    e6ec:	2002      	movs	r0, #2
    e6ee:	4770      	bx	lr
    e6f0:	01123456 	.word	0x01123456
    e6f4:	00800040 	.word	0x00800040

0000e6f8 <am_hal_iom_power_ctrl>:
    e6f8:	b538      	push	{r3, r4, r5, lr}
    e6fa:	2800      	cmp	r0, #0
    e6fc:	d063      	beq.n	e7c6 <am_hal_iom_power_ctrl+0xce>
    e6fe:	6803      	ldr	r3, [r0, #0]
    e700:	4604      	mov	r4, r0
    e702:	4868      	ldr	r0, [pc, #416]	; (e8a4 <am_hal_iom_power_ctrl+0x1ac>)
    e704:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e708:	4283      	cmp	r3, r0
    e70a:	d15c      	bne.n	e7c6 <am_hal_iom_power_ctrl+0xce>
    e70c:	2900      	cmp	r1, #0
    e70e:	d060      	beq.n	e7d2 <am_hal_iom_power_ctrl+0xda>
    e710:	3901      	subs	r1, #1
    e712:	2901      	cmp	r1, #1
    e714:	d85a      	bhi.n	e7cc <am_hal_iom_power_ctrl+0xd4>
    e716:	78e3      	ldrb	r3, [r4, #3]
    e718:	6860      	ldr	r0, [r4, #4]
    e71a:	079b      	lsls	r3, r3, #30
    e71c:	d50e      	bpl.n	e73c <am_hal_iom_power_ctrl+0x44>
    e71e:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    e722:	3304      	adds	r3, #4
    e724:	031b      	lsls	r3, r3, #12
    e726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
    e72a:	f003 0306 	and.w	r3, r3, #6
    e72e:	2b04      	cmp	r3, #4
    e730:	f040 80b4 	bne.w	e89c <am_hal_iom_power_ctrl+0x1a4>
    e734:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e736:	2b00      	cmp	r3, #0
    e738:	f040 80b0 	bne.w	e89c <am_hal_iom_power_ctrl+0x1a4>
    e73c:	b3d2      	cbz	r2, e7b4 <am_hal_iom_power_ctrl+0xbc>
    e73e:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    e742:	3304      	adds	r3, #4
    e744:	031b      	lsls	r3, r3, #12
    e746:	2201      	movs	r2, #1
    e748:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    e74c:	f8c4 186c 	str.w	r1, [r4, #2156]	; 0x86c
    e750:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
    e754:	f8c4 1874 	str.w	r1, [r4, #2164]	; 0x874
    e758:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
    e75c:	f8c4 1878 	str.w	r1, [r4, #2168]	; 0x878
    e760:	f8d3 1294 	ldr.w	r1, [r3, #660]	; 0x294
    e764:	f8c4 187c 	str.w	r1, [r4, #2172]	; 0x87c
    e768:	f8d3 1298 	ldr.w	r1, [r3, #664]	; 0x298
    e76c:	f8c4 1880 	str.w	r1, [r4, #2176]	; 0x880
    e770:	f8d3 12a0 	ldr.w	r1, [r3, #672]	; 0x2a0
    e774:	f8c4 1884 	str.w	r1, [r4, #2180]	; 0x884
    e778:	f8d3 12a8 	ldr.w	r1, [r3, #680]	; 0x2a8
    e77c:	f8c4 1888 	str.w	r1, [r4, #2184]	; 0x888
    e780:	f8d3 12ac 	ldr.w	r1, [r3, #684]	; 0x2ac
    e784:	f8c4 188c 	str.w	r1, [r4, #2188]	; 0x88c
    e788:	f8d3 12b0 	ldr.w	r1, [r3, #688]	; 0x2b0
    e78c:	f8c4 1890 	str.w	r1, [r4, #2192]	; 0x890
    e790:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    e794:	f8c4 1894 	str.w	r1, [r4, #2196]	; 0x894
    e798:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    e79c:	f8c4 1898 	str.w	r1, [r4, #2200]	; 0x898
    e7a0:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
    e7a4:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
    e7a8:	f8c4 3870 	str.w	r3, [r4, #2160]	; 0x870
    e7ac:	f8c4 189c 	str.w	r1, [r4, #2204]	; 0x89c
    e7b0:	f884 2868 	strb.w	r2, [r4, #2152]	; 0x868
    e7b4:	3002      	adds	r0, #2
    e7b6:	b2c0      	uxtb	r0, r0
    e7b8:	f000 fc98 	bl	f0ec <am_hal_pwrctrl_periph_disable>
    e7bc:	2800      	cmp	r0, #0
    e7be:	d15e      	bne.n	e87e <am_hal_iom_power_ctrl+0x186>
    e7c0:	2500      	movs	r5, #0
    e7c2:	4628      	mov	r0, r5
    e7c4:	bd38      	pop	{r3, r4, r5, pc}
    e7c6:	2502      	movs	r5, #2
    e7c8:	4628      	mov	r0, r5
    e7ca:	bd38      	pop	{r3, r4, r5, pc}
    e7cc:	2506      	movs	r5, #6
    e7ce:	4628      	mov	r0, r5
    e7d0:	bd38      	pop	{r3, r4, r5, pc}
    e7d2:	2a00      	cmp	r2, #0
    e7d4:	d04c      	beq.n	e870 <am_hal_iom_power_ctrl+0x178>
    e7d6:	f894 3868 	ldrb.w	r3, [r4, #2152]	; 0x868
    e7da:	2b00      	cmp	r3, #0
    e7dc:	d060      	beq.n	e8a0 <am_hal_iom_power_ctrl+0x1a8>
    e7de:	6860      	ldr	r0, [r4, #4]
    e7e0:	3002      	adds	r0, #2
    e7e2:	b2c0      	uxtb	r0, r0
    e7e4:	f000 fc58 	bl	f098 <am_hal_pwrctrl_periph_enable>
    e7e8:	4605      	mov	r5, r0
    e7ea:	2800      	cmp	r0, #0
    e7ec:	d147      	bne.n	e87e <am_hal_iom_power_ctrl+0x186>
    e7ee:	6863      	ldr	r3, [r4, #4]
    e7f0:	f8d4 186c 	ldr.w	r1, [r4, #2156]	; 0x86c
    e7f4:	f8d4 287c 	ldr.w	r2, [r4, #2172]	; 0x87c
    e7f8:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e7fc:	3304      	adds	r3, #4
    e7fe:	031b      	lsls	r3, r3, #12
    e800:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    e804:	f8d4 1874 	ldr.w	r1, [r4, #2164]	; 0x874
    e808:	f8c3 1210 	str.w	r1, [r3, #528]	; 0x210
    e80c:	f8d4 1878 	ldr.w	r1, [r4, #2168]	; 0x878
    e810:	f8c3 1214 	str.w	r1, [r3, #532]	; 0x214
    e814:	f8d4 1880 	ldr.w	r1, [r4, #2176]	; 0x880
    e818:	f8c3 1298 	str.w	r1, [r3, #664]	; 0x298
    e81c:	f8d4 1888 	ldr.w	r1, [r4, #2184]	; 0x888
    e820:	f8c3 12a8 	str.w	r1, [r3, #680]	; 0x2a8
    e824:	f8d4 188c 	ldr.w	r1, [r4, #2188]	; 0x88c
    e828:	f8c3 12ac 	str.w	r1, [r3, #684]	; 0x2ac
    e82c:	f8d4 1890 	ldr.w	r1, [r4, #2192]	; 0x890
    e830:	f8c3 12b0 	str.w	r1, [r3, #688]	; 0x2b0
    e834:	f8d4 1894 	ldr.w	r1, [r4, #2196]	; 0x894
    e838:	f8c3 1300 	str.w	r1, [r3, #768]	; 0x300
    e83c:	f8d4 1898 	ldr.w	r1, [r4, #2200]	; 0x898
    e840:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
    e844:	f8d4 189c 	ldr.w	r1, [r4, #2204]	; 0x89c
    e848:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    e84c:	f8d4 1870 	ldr.w	r1, [r4, #2160]	; 0x870
    e850:	f8c3 1240 	str.w	r1, [r3, #576]	; 0x240
    e854:	f894 1884 	ldrb.w	r1, [r4, #2180]	; 0x884
    e858:	f8c3 12a4 	str.w	r1, [r3, #676]	; 0x2a4
    e85c:	f022 0101 	bic.w	r1, r2, #1
    e860:	07d2      	lsls	r2, r2, #31
    e862:	f8c3 1294 	str.w	r1, [r3, #660]	; 0x294
    e866:	d40c      	bmi.n	e882 <am_hal_iom_power_ctrl+0x18a>
    e868:	2300      	movs	r3, #0
    e86a:	f884 3868 	strb.w	r3, [r4, #2152]	; 0x868
    e86e:	e7ab      	b.n	e7c8 <am_hal_iom_power_ctrl+0xd0>
    e870:	6860      	ldr	r0, [r4, #4]
    e872:	3002      	adds	r0, #2
    e874:	b2c0      	uxtb	r0, r0
    e876:	f000 fc0f 	bl	f098 <am_hal_pwrctrl_periph_enable>
    e87a:	2800      	cmp	r0, #0
    e87c:	d0a0      	beq.n	e7c0 <am_hal_iom_power_ctrl+0xc8>
    e87e:	2509      	movs	r5, #9
    e880:	e7a2      	b.n	e7c8 <am_hal_iom_power_ctrl+0xd0>
    e882:	6a62      	ldr	r2, [r4, #36]	; 0x24
    e884:	b92a      	cbnz	r2, e892 <am_hal_iom_power_ctrl+0x19a>
    e886:	f8d3 2298 	ldr.w	r2, [r3, #664]	; 0x298
    e88a:	f503 7326 	add.w	r3, r3, #664	; 0x298
    e88e:	e9c2 3200 	strd	r3, r2, [r2]
    e892:	f8d4 0828 	ldr.w	r0, [r4, #2088]	; 0x828
    e896:	f001 fc83 	bl	101a0 <am_hal_cmdq_enable>
    e89a:	e7e5      	b.n	e868 <am_hal_iom_power_ctrl+0x170>
    e89c:	2503      	movs	r5, #3
    e89e:	e793      	b.n	e7c8 <am_hal_iom_power_ctrl+0xd0>
    e8a0:	2507      	movs	r5, #7
    e8a2:	e791      	b.n	e7c8 <am_hal_iom_power_ctrl+0xd0>
    e8a4:	01123456 	.word	0x01123456

0000e8a8 <am_hal_iom_configure>:
    e8a8:	b380      	cbz	r0, e90c <am_hal_iom_configure+0x64>
    e8aa:	6803      	ldr	r3, [r0, #0]
    e8ac:	4a98      	ldr	r2, [pc, #608]	; (eb10 <am_hal_iom_configure+0x268>)
    e8ae:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e8b2:	4293      	cmp	r3, r2
    e8b4:	d12a      	bne.n	e90c <am_hal_iom_configure+0x64>
    e8b6:	2900      	cmp	r1, #0
    e8b8:	f000 80fb 	beq.w	eab2 <am_hal_iom_configure+0x20a>
    e8bc:	6843      	ldr	r3, [r0, #4]
    e8be:	2b05      	cmp	r3, #5
    e8c0:	f200 80f7 	bhi.w	eab2 <am_hal_iom_configure+0x20a>
    e8c4:	78c2      	ldrb	r2, [r0, #3]
    e8c6:	0792      	lsls	r2, r2, #30
    e8c8:	f100 80f5 	bmi.w	eab6 <am_hal_iom_configure+0x20e>
    e8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e8d0:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e8d4:	3304      	adds	r3, #4
    e8d6:	780a      	ldrb	r2, [r1, #0]
    e8d8:	7202      	strb	r2, [r0, #8]
    e8da:	031b      	lsls	r3, r3, #12
    e8dc:	f241 0410 	movw	r4, #4112	; 0x1010
    e8e0:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    e8e4:	b1a2      	cbz	r2, e910 <am_hal_iom_configure+0x68>
    e8e6:	2a01      	cmp	r2, #1
    e8e8:	f040 80e7 	bne.w	eaba <am_hal_iom_configure+0x212>
    e8ec:	684a      	ldr	r2, [r1, #4]
    e8ee:	4c89      	ldr	r4, [pc, #548]	; (eb14 <am_hal_iom_configure+0x26c>)
    e8f0:	42a2      	cmp	r2, r4
    e8f2:	f000 8106 	beq.w	eb02 <am_hal_iom_configure+0x25a>
    e8f6:	4c88      	ldr	r4, [pc, #544]	; (eb18 <am_hal_iom_configure+0x270>)
    e8f8:	42a2      	cmp	r2, r4
    e8fa:	f000 80fc 	beq.w	eaf6 <am_hal_iom_configure+0x24e>
    e8fe:	4c87      	ldr	r4, [pc, #540]	; (eb1c <am_hal_iom_configure+0x274>)
    e900:	42a2      	cmp	r2, r4
    e902:	f000 80ec 	beq.w	eade <am_hal_iom_configure+0x236>
    e906:	2006      	movs	r0, #6
    e908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e90c:	2002      	movs	r0, #2
    e90e:	4770      	bx	lr
    e910:	7a0e      	ldrb	r6, [r1, #8]
    e912:	2e03      	cmp	r6, #3
    e914:	d8f7      	bhi.n	e906 <am_hal_iom_configure+0x5e>
    e916:	684c      	ldr	r4, [r1, #4]
    e918:	4a81      	ldr	r2, [pc, #516]	; (eb20 <am_hal_iom_configure+0x278>)
    e91a:	4294      	cmp	r4, r2
    e91c:	d8f3      	bhi.n	e906 <am_hal_iom_configure+0x5e>
    e91e:	fbb2 f5f4 	udiv	r5, r2, r4
    e922:	2c00      	cmp	r4, #0
    e924:	f000 80d0 	beq.w	eac8 <am_hal_iom_configure+0x220>
    e928:	fb04 2215 	mls	r2, r4, r5, r2
    e92c:	2a00      	cmp	r2, #0
    e92e:	bf0c      	ite	eq
    e930:	46ac      	moveq	ip, r5
    e932:	f105 0c01 	addne.w	ip, r5, #1
    e936:	f1cc 0200 	rsb	r2, ip, #0
    e93a:	ea02 020c 	and.w	r2, r2, ip
    e93e:	fab2 f282 	clz	r2, r2
    e942:	f1c2 021f 	rsb	r2, r2, #31
    e946:	2a06      	cmp	r2, #6
    e948:	bfa8      	it	ge
    e94a:	2206      	movge	r2, #6
    e94c:	f5b4 6f37 	cmp.w	r4, #2928	; 0xb70
    e950:	f240 80b5 	bls.w	eabe <am_hal_iom_configure+0x216>
    e954:	f8df e1e4 	ldr.w	lr, [pc, #484]	; eb3c <am_hal_iom_configure+0x294>
    e958:	f5a4 0774 	sub.w	r7, r4, #15990784	; 0xf40000
    e95c:	f5a7 5710 	sub.w	r7, r7, #9216	; 0x2400
    e960:	4577      	cmp	r7, lr
    e962:	bf34      	ite	cc
    e964:	f04f 0902 	movcc.w	r9, #2
    e968:	f04f 0900 	movcs.w	r9, #0
    e96c:	f109 0901 	add.w	r9, r9, #1
    e970:	bf34      	ite	cc
    e972:	f04f 0e01 	movcc.w	lr, #1
    e976:	f04f 0e00 	movcs.w	lr, #0
    e97a:	fa09 f802 	lsl.w	r8, r9, r2
    e97e:	fbbc f7f8 	udiv	r7, ip, r8
    e982:	fb08 c817 	mls	r8, r8, r7, ip
    e986:	f1b8 0f00 	cmp.w	r8, #0
    e98a:	bf18      	it	ne
    e98c:	3701      	addne	r7, #1
    e98e:	fab7 fa87 	clz	sl, r7
    e992:	f1ca 081f 	rsb	r8, sl, #31
    e996:	f1b8 0f07 	cmp.w	r8, #7
    e99a:	f240 8097 	bls.w	eacc <am_hal_iom_configure+0x224>
    e99e:	3a07      	subs	r2, #7
    e9a0:	4442      	add	r2, r8
    e9a2:	f102 0801 	add.w	r8, r2, #1
    e9a6:	f1b8 0f07 	cmp.w	r8, #7
    e9aa:	f200 808d 	bhi.w	eac8 <am_hal_iom_configure+0x220>
    e9ae:	f1ca 0a18 	rsb	sl, sl, #24
    e9b2:	f04f 0b01 	mov.w	fp, #1
    e9b6:	fa0b fb0a 	lsl.w	fp, fp, sl
    e9ba:	f10b 3bff 	add.w	fp, fp, #4294967295
    e9be:	fa27 fa0a 	lsr.w	sl, r7, sl
    e9c2:	ea0b 0b07 	and.w	fp, fp, r7
    e9c6:	f1bb 0f00 	cmp.w	fp, #0
    e9ca:	bf0c      	ite	eq
    e9cc:	4657      	moveq	r7, sl
    e9ce:	f10a 0701 	addne.w	r7, sl, #1
    e9d2:	f8df a16c 	ldr.w	sl, [pc, #364]	; eb40 <am_hal_iom_configure+0x298>
    e9d6:	4554      	cmp	r4, sl
    e9d8:	d27b      	bcs.n	ead2 <am_hal_iom_configure+0x22a>
    e9da:	2401      	movs	r4, #1
    e9dc:	4094      	lsls	r4, r2
    e9de:	45a4      	cmp	ip, r4
    e9e0:	d077      	beq.n	ead2 <am_hal_iom_configure+0x22a>
    e9e2:	f107 3cff 	add.w	ip, r7, #4294967295
    e9e6:	463c      	mov	r4, r7
    e9e8:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
    e9ec:	ea4f 0b66 	mov.w	fp, r6, asr #1
    e9f0:	f1bb 0f01 	cmp.w	fp, #1
    e9f4:	fa09 f202 	lsl.w	r2, r9, r2
    e9f8:	bf08      	it	eq
    e9fa:	3f02      	subeq	r7, #2
    e9fc:	fb04 f202 	mul.w	r2, r4, r2
    ea00:	ea4f 24ce 	mov.w	r4, lr, lsl #11
    ea04:	bf14      	ite	ne
    ea06:	ea4f 075c 	movne.w	r7, ip, lsr #1
    ea0a:	087f      	lsreq	r7, r7, #1
    ea0c:	ea44 2408 	orr.w	r4, r4, r8, lsl #8
    ea10:	ea44 040a 	orr.w	r4, r4, sl
    ea14:	043f      	lsls	r7, r7, #16
    ea16:	ea44 640c 	orr.w	r4, r4, ip, lsl #24
    ea1a:	f407 077f 	and.w	r7, r7, #16711680	; 0xff0000
    ea1e:	433c      	orrs	r4, r7
    ea20:	4f3f      	ldr	r7, [pc, #252]	; (eb20 <am_hal_iom_configure+0x278>)
    ea22:	f8df c120 	ldr.w	ip, [pc, #288]	; eb44 <am_hal_iom_configure+0x29c>
    ea26:	fbb7 f9f2 	udiv	r9, r7, r2
    ea2a:	fb02 7e19 	mls	lr, r2, r9, r7
    ea2e:	0852      	lsrs	r2, r2, #1
    ea30:	4572      	cmp	r2, lr
    ea32:	bf2c      	ite	cs
    ea34:	464f      	movcs	r7, r9
    ea36:	f109 0701 	addcc.w	r7, r9, #1
    ea3a:	f8df e10c 	ldr.w	lr, [pc, #268]	; eb48 <am_hal_iom_configure+0x2a0>
    ea3e:	fbac c207 	umull	ip, r2, ip, r7
    ea42:	f8df c108 	ldr.w	ip, [pc, #264]	; eb4c <am_hal_iom_configure+0x2a4>
    ea46:	0c12      	lsrs	r2, r2, #16
    ea48:	4577      	cmp	r7, lr
    ea4a:	ea4f 2808 	mov.w	r8, r8, lsl #8
    ea4e:	fb0c 7c12 	mls	ip, ip, r2, r7
    ea52:	d906      	bls.n	ea62 <am_hal_iom_configure+0x1ba>
    ea54:	1e57      	subs	r7, r2, #1
    ea56:	403a      	ands	r2, r7
    ea58:	ea52 020c 	orrs.w	r2, r2, ip
    ea5c:	d101      	bne.n	ea62 <am_hal_iom_configure+0x1ba>
    ea5e:	f448 6400 	orr.w	r4, r8, #2048	; 0x800
    ea62:	f044 0401 	orr.w	r4, r4, #1
    ea66:	f8c3 6300 	str.w	r6, [r3, #768]	; 0x300
    ea6a:	f8c3 4210 	str.w	r4, [r3, #528]	; 0x210
    ea6e:	e9d1 1303 	ldrd	r1, r3, [r1, #12]
    ea72:	f1a3 0208 	sub.w	r2, r3, #8
    ea76:	60c1      	str	r1, [r0, #12]
    ea78:	f246 015f 	movw	r1, #24671	; 0x605f
    ea7c:	ebb1 0f82 	cmp.w	r1, r2, lsl #2
    ea80:	6103      	str	r3, [r0, #16]
    ea82:	ea4f 0382 	mov.w	r3, r2, lsl #2
    ea86:	bf28      	it	cs
    ea88:	4a26      	ldrcs	r2, [pc, #152]	; (eb24 <am_hal_iom_configure+0x27c>)
    ea8a:	f8c0 5864 	str.w	r5, [r0, #2148]	; 0x864
    ea8e:	bf26      	itte	cs
    ea90:	fba2 2303 	umullcs	r2, r3, r2, r3
    ea94:	099b      	lsrcs	r3, r3, #6
    ea96:	f44f 7380 	movcc.w	r3, #256	; 0x100
    ea9a:	f8c0 3858 	str.w	r3, [r0, #2136]	; 0x858
    ea9e:	2300      	movs	r3, #0
    eaa0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    eaa4:	f8c0 38a0 	str.w	r3, [r0, #2208]	; 0x8a0
    eaa8:	f8c0 4860 	str.w	r4, [r0, #2144]	; 0x860
    eaac:	4618      	mov	r0, r3
    eaae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eab2:	2006      	movs	r0, #6
    eab4:	4770      	bx	lr
    eab6:	2007      	movs	r0, #7
    eab8:	4770      	bx	lr
    eaba:	2005      	movs	r0, #5
    eabc:	e724      	b.n	e908 <am_hal_iom_configure+0x60>
    eabe:	f04f 0903 	mov.w	r9, #3
    eac2:	f04f 0e01 	mov.w	lr, #1
    eac6:	e758      	b.n	e97a <am_hal_iom_configure+0xd2>
    eac8:	2401      	movs	r4, #1
    eaca:	e7cc      	b.n	ea66 <am_hal_iom_configure+0x1be>
    eacc:	f102 0801 	add.w	r8, r2, #1
    ead0:	e77f      	b.n	e9d2 <am_hal_iom_configure+0x12a>
    ead2:	f107 3cff 	add.w	ip, r7, #4294967295
    ead6:	2401      	movs	r4, #1
    ead8:	f04f 0a00 	mov.w	sl, #0
    eadc:	e786      	b.n	e9ec <am_hal_iom_configure+0x144>
    eade:	f104 44ee 	add.w	r4, r4, #1996488704	; 0x77000000
    eae2:	4a11      	ldr	r2, [pc, #68]	; (eb28 <am_hal_iom_configure+0x280>)
    eae4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    eae8:	f504 1466 	add.w	r4, r4, #3768320	; 0x398000
    eaec:	f604 3461 	addw	r4, r4, #2913	; 0xb61
    eaf0:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
    eaf4:	e7b9      	b.n	ea6a <am_hal_iom_configure+0x1c2>
    eaf6:	4a0d      	ldr	r2, [pc, #52]	; (eb2c <am_hal_iom_configure+0x284>)
    eaf8:	4c0d      	ldr	r4, [pc, #52]	; (eb30 <am_hal_iom_configure+0x288>)
    eafa:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    eafe:	2530      	movs	r5, #48	; 0x30
    eb00:	e7b3      	b.n	ea6a <am_hal_iom_configure+0x1c2>
    eb02:	4a0c      	ldr	r2, [pc, #48]	; (eb34 <am_hal_iom_configure+0x28c>)
    eb04:	4c0c      	ldr	r4, [pc, #48]	; (eb38 <am_hal_iom_configure+0x290>)
    eb06:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    eb0a:	2578      	movs	r5, #120	; 0x78
    eb0c:	e7ad      	b.n	ea6a <am_hal_iom_configure+0x1c2>
    eb0e:	bf00      	nop
    eb10:	01123456 	.word	0x01123456
    eb14:	00061a80 	.word	0x00061a80
    eb18:	000f4240 	.word	0x000f4240
    eb1c:	000186a0 	.word	0x000186a0
    eb20:	02dc6c00 	.word	0x02dc6c00
    eb24:	aaaaaaab 	.word	0xaaaaaaab
    eb28:	0003f070 	.word	0x0003f070
    eb2c:	00213040 	.word	0x00213040
    eb30:	06031301 	.word	0x06031301
    eb34:	0003f270 	.word	0x0003f270
    eb38:	1d0e1201 	.word	0x1d0e1201
    eb3c:	007a1200 	.word	0x007a1200
    eb40:	00b71b00 	.word	0x00b71b00
    eb44:	431bde83 	.word	0x431bde83
    eb48:	0003d08f 	.word	0x0003d08f
    eb4c:	0003d090 	.word	0x0003d090

0000eb50 <am_hal_iom_blocking_transfer>:
    eb50:	2800      	cmp	r0, #0
    eb52:	f000 8139 	beq.w	edc8 <am_hal_iom_blocking_transfer+0x278>
    eb56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eb5a:	6803      	ldr	r3, [r0, #0]
    eb5c:	4abd      	ldr	r2, [pc, #756]	; (ee54 <am_hal_iom_blocking_transfer+0x304>)
    eb5e:	ed2d 8b02 	vpush	{d8}
    eb62:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    eb66:	4293      	cmp	r3, r2
    eb68:	b085      	sub	sp, #20
    eb6a:	4606      	mov	r6, r0
    eb6c:	f040 810a 	bne.w	ed84 <am_hal_iom_blocking_transfer+0x234>
    eb70:	460c      	mov	r4, r1
    eb72:	2900      	cmp	r1, #0
    eb74:	f000 8111 	beq.w	ed9a <am_hal_iom_blocking_transfer+0x24a>
    eb78:	f891 8010 	ldrb.w	r8, [r1, #16]
    eb7c:	f1b8 0f01 	cmp.w	r8, #1
    eb80:	f200 8116 	bhi.w	edb0 <am_hal_iom_blocking_transfer+0x260>
    eb84:	f8d1 b00c 	ldr.w	fp, [r1, #12]
    eb88:	f1bb 0f00 	cmp.w	fp, #0
    eb8c:	f000 810c 	beq.w	eda8 <am_hal_iom_blocking_transfer+0x258>
    eb90:	f8d4 9004 	ldr.w	r9, [r4, #4]
    eb94:	f1b9 0f03 	cmp.w	r9, #3
    eb98:	f200 80ff 	bhi.w	ed9a <am_hal_iom_blocking_transfer+0x24a>
    eb9c:	f8d4 a008 	ldr.w	sl, [r4, #8]
    eba0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
    eba4:	f04f 33ff 	mov.w	r3, #4294967295
    eba8:	4093      	lsls	r3, r2
    ebaa:	ea13 0f0a 	tst.w	r3, sl
    ebae:	f040 80f4 	bne.w	ed9a <am_hal_iom_blocking_transfer+0x24a>
    ebb2:	f1bb 0f00 	cmp.w	fp, #0
    ebb6:	f000 8102 	beq.w	edbe <am_hal_iom_blocking_transfer+0x26e>
    ebba:	f1b8 0f00 	cmp.w	r8, #0
    ebbe:	f000 8106 	beq.w	edce <am_hal_iom_blocking_transfer+0x27e>
    ebc2:	69a3      	ldr	r3, [r4, #24]
    ebc4:	2b00      	cmp	r3, #0
    ebc6:	f000 80e8 	beq.w	ed9a <am_hal_iom_blocking_transfer+0x24a>
    ebca:	7a33      	ldrb	r3, [r6, #8]
    ebcc:	2b01      	cmp	r3, #1
    ebce:	f000 80e0 	beq.w	ed92 <am_hal_iom_blocking_transfer+0x242>
    ebd2:	b93b      	cbnz	r3, ebe4 <am_hal_iom_blocking_transfer+0x94>
    ebd4:	6823      	ldr	r3, [r4, #0]
    ebd6:	2b03      	cmp	r3, #3
    ebd8:	f200 80df 	bhi.w	ed9a <am_hal_iom_blocking_transfer+0x24a>
    ebdc:	f5bb 5f80 	cmp.w	fp, #4096	; 0x1000
    ebe0:	f080 80db 	bcs.w	ed9a <am_hal_iom_blocking_transfer+0x24a>
    ebe4:	f896 382c 	ldrb.w	r3, [r6, #2092]	; 0x82c
    ebe8:	2b02      	cmp	r3, #2
    ebea:	f000 80e1 	beq.w	edb0 <am_hal_iom_blocking_transfer+0x260>
    ebee:	e9d4 3705 	ldrd	r3, r7, [r4, #20]
    ebf2:	f1b8 0f00 	cmp.w	r8, #0
    ebf6:	bf08      	it	eq
    ebf8:	461f      	moveq	r7, r3
    ebfa:	2301      	movs	r3, #1
    ebfc:	9300      	str	r3, [sp, #0]
    ebfe:	6875      	ldr	r5, [r6, #4]
    ec00:	f894 c01c 	ldrb.w	ip, [r4, #28]
    ec04:	f8d6 0860 	ldr.w	r0, [r6, #2144]	; 0x860
    ec08:	9502      	str	r5, [sp, #8]
    ec0a:	2300      	movs	r3, #0
    ec0c:	f04f 32ff 	mov.w	r2, #4294967295
    ec10:	f106 0124 	add.w	r1, r6, #36	; 0x24
    ec14:	f8cd c00c 	str.w	ip, [sp, #12]
    ec18:	f7ff f998 	bl	df4c <am_hal_flash_delay_status_check>
    ec1c:	4603      	mov	r3, r0
    ec1e:	2800      	cmp	r0, #0
    ec20:	f040 80b1 	bne.w	ed86 <am_hal_iom_blocking_transfer+0x236>
    ec24:	9d02      	ldr	r5, [sp, #8]
    ec26:	f505 25a0 	add.w	r5, r5, #327680	; 0x50000
    ec2a:	3504      	adds	r5, #4
    ec2c:	2301      	movs	r3, #1
    ec2e:	032d      	lsls	r5, r5, #12
    ec30:	9300      	str	r3, [sp, #0]
    ec32:	f505 732d 	add.w	r3, r5, #692	; 0x2b4
    ec36:	4619      	mov	r1, r3
    ec38:	ee08 3a10 	vmov	s16, r3
    ec3c:	f8d6 0860 	ldr.w	r0, [r6, #2144]	; 0x860
    ec40:	2304      	movs	r3, #4
    ec42:	2206      	movs	r2, #6
    ec44:	f7ff f982 	bl	df4c <am_hal_flash_delay_status_check>
    ec48:	4603      	mov	r3, r0
    ec4a:	2800      	cmp	r0, #0
    ec4c:	f040 809b 	bne.w	ed86 <am_hal_iom_blocking_transfer+0x236>
    ec50:	f8d5 2200 	ldr.w	r2, [r5, #512]	; 0x200
    ec54:	9202      	str	r2, [sp, #8]
    ec56:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    ec5a:	f8b5 2280 	ldrh.w	r2, [r5, #640]	; 0x280
    ec5e:	f360 0200 	bfi	r2, r0, #0, #1
    ec62:	f8a5 2280 	strh.w	r2, [r5, #640]	; 0x280
    ec66:	6822      	ldr	r2, [r4, #0]
    ec68:	f04f 31ff 	mov.w	r1, #4294967295
    ec6c:	f8c5 1208 	str.w	r1, [r5, #520]	; 0x208
    ec70:	f8c5 2404 	str.w	r2, [r5, #1028]	; 0x404
    ec74:	7a31      	ldrb	r1, [r6, #8]
    ec76:	2900      	cmp	r1, #0
    ec78:	f000 80ae 	beq.w	edd8 <am_hal_iom_blocking_transfer+0x288>
    ec7c:	f8c5 021c 	str.w	r0, [r5, #540]	; 0x21c
    ec80:	4a75      	ldr	r2, [pc, #468]	; (ee58 <am_hal_iom_blocking_transfer+0x308>)
    ec82:	f1b8 0f01 	cmp.w	r8, #1
    ec86:	ea02 2b0b 	and.w	fp, r2, fp, lsl #8
    ec8a:	ea4b 0303 	orr.w	r3, fp, r3
    ec8e:	f000 80e9 	beq.w	ee64 <am_hal_iom_blocking_transfer+0x314>
    ec92:	f3ca 220f 	ubfx	r2, sl, #8, #16
    ec96:	68e4      	ldr	r4, [r4, #12]
    ec98:	f8c5 2220 	str.w	r2, [r5, #544]	; 0x220
    ec9c:	f8d5 2100 	ldr.w	r2, [r5, #256]	; 0x100
    eca0:	f3c2 2207 	ubfx	r2, r2, #8, #8
    eca4:	2a03      	cmp	r2, #3
    eca6:	46bb      	mov	fp, r7
    eca8:	d917      	bls.n	ecda <am_hal_iom_blocking_transfer+0x18a>
    ecaa:	b1b4      	cbz	r4, ecda <am_hal_iom_blocking_transfer+0x18a>
    ecac:	f85b 1b04 	ldr.w	r1, [fp], #4
    ecb0:	f8c5 110c 	str.w	r1, [r5, #268]	; 0x10c
    ecb4:	2c03      	cmp	r4, #3
    ecb6:	d90f      	bls.n	ecd8 <am_hal_iom_blocking_transfer+0x188>
    ecb8:	3a04      	subs	r2, #4
    ecba:	f022 0203 	bic.w	r2, r2, #3
    ecbe:	3204      	adds	r2, #4
    ecc0:	4417      	add	r7, r2
    ecc2:	455f      	cmp	r7, fp
    ecc4:	f1a4 0404 	sub.w	r4, r4, #4
    ecc8:	d007      	beq.n	ecda <am_hal_iom_blocking_transfer+0x18a>
    ecca:	b134      	cbz	r4, ecda <am_hal_iom_blocking_transfer+0x18a>
    eccc:	f85b 2b04 	ldr.w	r2, [fp], #4
    ecd0:	f8c5 210c 	str.w	r2, [r5, #268]	; 0x10c
    ecd4:	2c03      	cmp	r4, #3
    ecd6:	d8f4      	bhi.n	ecc2 <am_hal_iom_blocking_transfer+0x172>
    ecd8:	4644      	mov	r4, r8
    ecda:	ea4f 1949 	mov.w	r9, r9, lsl #5
    ecde:	9a03      	ldr	r2, [sp, #12]
    ece0:	ea49 6a0a 	orr.w	sl, r9, sl, lsl #24
    ece4:	ea4a 0303 	orr.w	r3, sl, r3
    ece8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
    ecec:	f043 0301 	orr.w	r3, r3, #1
    ecf0:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
    ecf4:	2c00      	cmp	r4, #0
    ecf6:	f000 8095 	beq.w	ee24 <am_hal_iom_blocking_transfer+0x2d4>
    ecfa:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    ecfe:	f3c3 2307 	ubfx	r3, r3, #8, #8
    ed02:	2b03      	cmp	r3, #3
    ed04:	f200 8090 	bhi.w	ee28 <am_hal_iom_blocking_transfer+0x2d8>
    ed08:	4f54      	ldr	r7, [pc, #336]	; (ee5c <am_hal_iom_blocking_transfer+0x30c>)
    ed0a:	e00a      	b.n	ed22 <am_hal_iom_blocking_transfer+0x1d2>
    ed0c:	3f01      	subs	r7, #1
    ed0e:	d00e      	beq.n	ed2e <am_hal_iom_blocking_transfer+0x1de>
    ed10:	f7ff f8e4 	bl	dedc <am_hal_flash_delay>
    ed14:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    ed18:	f3c3 2307 	ubfx	r3, r3, #8, #8
    ed1c:	2b03      	cmp	r3, #3
    ed1e:	f200 8083 	bhi.w	ee28 <am_hal_iom_blocking_transfer+0x2d8>
    ed22:	f8d5 3204 	ldr.w	r3, [r5, #516]	; 0x204
    ed26:	07db      	lsls	r3, r3, #31
    ed28:	f04f 0010 	mov.w	r0, #16
    ed2c:	d5ee      	bpl.n	ed0c <am_hal_iom_blocking_transfer+0x1bc>
    ed2e:	2701      	movs	r7, #1
    ed30:	2304      	movs	r3, #4
    ed32:	ee18 1a10 	vmov	r1, s16
    ed36:	484a      	ldr	r0, [pc, #296]	; (ee60 <am_hal_iom_blocking_transfer+0x310>)
    ed38:	9700      	str	r7, [sp, #0]
    ed3a:	2206      	movs	r2, #6
    ed3c:	f7ff f906 	bl	df4c <am_hal_flash_delay_status_check>
    ed40:	4603      	mov	r3, r0
    ed42:	b980      	cbnz	r0, ed66 <am_hal_iom_blocking_transfer+0x216>
    ed44:	f8d5 3204 	ldr.w	r3, [r5, #516]	; 0x204
    ed48:	f013 0f6c 	tst.w	r3, #108	; 0x6c
    ed4c:	f040 80bf 	bne.w	eece <am_hal_iom_blocking_transfer+0x37e>
    ed50:	0599      	lsls	r1, r3, #22
    ed52:	f100 80bf 	bmi.w	eed4 <am_hal_iom_blocking_transfer+0x384>
    ed56:	06da      	lsls	r2, r3, #27
    ed58:	f100 80be 	bmi.w	eed8 <am_hal_iom_blocking_transfer+0x388>
    ed5c:	f403 4390 	and.w	r3, r3, #18432	; 0x4800
    ed60:	4323      	orrs	r3, r4
    ed62:	d007      	beq.n	ed74 <am_hal_iom_blocking_transfer+0x224>
    ed64:	463b      	mov	r3, r7
    ed66:	f8d5 1204 	ldr.w	r1, [r5, #516]	; 0x204
    ed6a:	9303      	str	r3, [sp, #12]
    ed6c:	4630      	mov	r0, r6
    ed6e:	f7ff fbb1 	bl	e4d4 <internal_iom_reset_on_error>
    ed72:	9b03      	ldr	r3, [sp, #12]
    ed74:	f04f 32ff 	mov.w	r2, #4294967295
    ed78:	f8c5 2208 	str.w	r2, [r5, #520]	; 0x208
    ed7c:	9a02      	ldr	r2, [sp, #8]
    ed7e:	f8c5 2200 	str.w	r2, [r5, #512]	; 0x200
    ed82:	e000      	b.n	ed86 <am_hal_iom_blocking_transfer+0x236>
    ed84:	2302      	movs	r3, #2
    ed86:	4618      	mov	r0, r3
    ed88:	b005      	add	sp, #20
    ed8a:	ecbd 8b02 	vpop	{d8}
    ed8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ed92:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    ed96:	f67f af25 	bls.w	ebe4 <am_hal_iom_blocking_transfer+0x94>
    ed9a:	2306      	movs	r3, #6
    ed9c:	4618      	mov	r0, r3
    ed9e:	b005      	add	sp, #20
    eda0:	ecbd 8b02 	vpop	{d8}
    eda4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eda8:	f881 b010 	strb.w	fp, [r1, #16]
    edac:	46d8      	mov	r8, fp
    edae:	e6ef      	b.n	eb90 <am_hal_iom_blocking_transfer+0x40>
    edb0:	2307      	movs	r3, #7
    edb2:	4618      	mov	r0, r3
    edb4:	b005      	add	sp, #20
    edb6:	ecbd 8b02 	vpop	{d8}
    edba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    edbe:	7a33      	ldrb	r3, [r6, #8]
    edc0:	2b01      	cmp	r3, #1
    edc2:	f47f af06 	bne.w	ebd2 <am_hal_iom_blocking_transfer+0x82>
    edc6:	e70d      	b.n	ebe4 <am_hal_iom_blocking_transfer+0x94>
    edc8:	2302      	movs	r3, #2
    edca:	4618      	mov	r0, r3
    edcc:	4770      	bx	lr
    edce:	6963      	ldr	r3, [r4, #20]
    edd0:	2b00      	cmp	r3, #0
    edd2:	f47f aefa 	bne.w	ebca <am_hal_iom_blocking_transfer+0x7a>
    edd6:	e7e0      	b.n	ed9a <am_hal_iom_blocking_transfer+0x24a>
    edd8:	18b1      	adds	r1, r6, r2
    edda:	0513      	lsls	r3, r2, #20
    eddc:	f891 28a0 	ldrb.w	r2, [r1, #2208]	; 0x8a0
    ede0:	f8c5 221c 	str.w	r2, [r5, #540]	; 0x21c
    ede4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    ede8:	e74a      	b.n	ec80 <am_hal_iom_blocking_transfer+0x130>
    edea:	2b03      	cmp	r3, #3
    edec:	f8c8 1000 	str.w	r1, [r8]
    edf0:	f1a4 0404 	sub.w	r4, r4, #4
    edf4:	f108 0804 	add.w	r8, r8, #4
    edf8:	d966      	bls.n	eec8 <am_hal_iom_blocking_transfer+0x378>
    edfa:	b19c      	cbz	r4, ee24 <am_hal_iom_blocking_transfer+0x2d4>
    edfc:	2c03      	cmp	r4, #3
    edfe:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
    ee02:	f1a3 0304 	sub.w	r3, r3, #4
    ee06:	d8f0      	bhi.n	edea <am_hal_iom_blocking_transfer+0x29a>
    ee08:	3c01      	subs	r4, #1
    ee0a:	f888 1000 	strb.w	r1, [r8]
    ee0e:	ea4f 2311 	mov.w	r3, r1, lsr #8
    ee12:	d007      	beq.n	ee24 <am_hal_iom_blocking_transfer+0x2d4>
    ee14:	2c01      	cmp	r4, #1
    ee16:	f888 3001 	strb.w	r3, [r8, #1]
    ee1a:	ea4f 4111 	mov.w	r1, r1, lsr #16
    ee1e:	d001      	beq.n	ee24 <am_hal_iom_blocking_transfer+0x2d4>
    ee20:	f888 1002 	strb.w	r1, [r8, #2]
    ee24:	2400      	movs	r4, #0
    ee26:	e782      	b.n	ed2e <am_hal_iom_blocking_transfer+0x1de>
    ee28:	f004 0003 	and.w	r0, r4, #3
    ee2c:	465a      	mov	r2, fp
    ee2e:	f852 1b04 	ldr.w	r1, [r2], #4
    ee32:	f8c5 110c 	str.w	r1, [r5, #268]	; 0x10c
    ee36:	42a0      	cmp	r0, r4
    ee38:	ebab 0102 	sub.w	r1, fp, r2
    ee3c:	4419      	add	r1, r3
    ee3e:	f1a4 0404 	sub.w	r4, r4, #4
    ee42:	d004      	beq.n	ee4e <am_hal_iom_blocking_transfer+0x2fe>
    ee44:	2903      	cmp	r1, #3
    ee46:	d903      	bls.n	ee50 <am_hal_iom_blocking_transfer+0x300>
    ee48:	2c00      	cmp	r4, #0
    ee4a:	d1f0      	bne.n	ee2e <am_hal_iom_blocking_transfer+0x2de>
    ee4c:	e7ea      	b.n	ee24 <am_hal_iom_blocking_transfer+0x2d4>
    ee4e:	4644      	mov	r4, r8
    ee50:	4693      	mov	fp, r2
    ee52:	e74f      	b.n	ecf4 <am_hal_iom_blocking_transfer+0x1a4>
    ee54:	01123456 	.word	0x01123456
    ee58:	000fff00 	.word	0x000fff00
    ee5c:	0007a121 	.word	0x0007a121
    ee60:	0007a120 	.word	0x0007a120
    ee64:	ea4f 1249 	mov.w	r2, r9, lsl #5
    ee68:	ea42 620a 	orr.w	r2, r2, sl, lsl #24
    ee6c:	4313      	orrs	r3, r2
    ee6e:	9a03      	ldr	r2, [sp, #12]
    ee70:	68e4      	ldr	r4, [r4, #12]
    ee72:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
    ee76:	f043 0302 	orr.w	r3, r3, #2
    ee7a:	f3ca 220f 	ubfx	r2, sl, #8, #16
    ee7e:	f8c5 2220 	str.w	r2, [r5, #544]	; 0x220
    ee82:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
    ee86:	2c00      	cmp	r4, #0
    ee88:	d0cc      	beq.n	ee24 <am_hal_iom_blocking_transfer+0x2d4>
    ee8a:	2200      	movs	r2, #0
    ee8c:	46b8      	mov	r8, r7
    ee8e:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    ee92:	f3c3 4307 	ubfx	r3, r3, #16, #8
    ee96:	2b03      	cmp	r3, #3
    ee98:	d8b0      	bhi.n	edfc <am_hal_iom_blocking_transfer+0x2ac>
    ee9a:	4f10      	ldr	r7, [pc, #64]	; (eedc <am_hal_iom_blocking_transfer+0x38c>)
    ee9c:	e002      	b.n	eea4 <am_hal_iom_blocking_transfer+0x354>
    ee9e:	3f01      	subs	r7, #1
    eea0:	f43f af45 	beq.w	ed2e <am_hal_iom_blocking_transfer+0x1de>
    eea4:	2010      	movs	r0, #16
    eea6:	b112      	cbz	r2, eeae <am_hal_iom_blocking_transfer+0x35e>
    eea8:	42a3      	cmp	r3, r4
    eeaa:	f4ff af40 	bcc.w	ed2e <am_hal_iom_blocking_transfer+0x1de>
    eeae:	f7ff f815 	bl	dedc <am_hal_flash_delay>
    eeb2:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
    eeb6:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    eeba:	f3c3 4307 	ubfx	r3, r3, #16, #8
    eebe:	2b03      	cmp	r3, #3
    eec0:	f002 0201 	and.w	r2, r2, #1
    eec4:	d9eb      	bls.n	ee9e <am_hal_iom_blocking_transfer+0x34e>
    eec6:	e799      	b.n	edfc <am_hal_iom_blocking_transfer+0x2ac>
    eec8:	2c00      	cmp	r4, #0
    eeca:	d1e0      	bne.n	ee8e <am_hal_iom_blocking_transfer+0x33e>
    eecc:	e7aa      	b.n	ee24 <am_hal_iom_blocking_transfer+0x2d4>
    eece:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    eed2:	e748      	b.n	ed66 <am_hal_iom_blocking_transfer+0x216>
    eed4:	4b02      	ldr	r3, [pc, #8]	; (eee0 <am_hal_iom_blocking_transfer+0x390>)
    eed6:	e746      	b.n	ed66 <am_hal_iom_blocking_transfer+0x216>
    eed8:	4b02      	ldr	r3, [pc, #8]	; (eee4 <am_hal_iom_blocking_transfer+0x394>)
    eeda:	e744      	b.n	ed66 <am_hal_iom_blocking_transfer+0x216>
    eedc:	0007a120 	.word	0x0007a120
    eee0:	08000001 	.word	0x08000001
    eee4:	08000002 	.word	0x08000002

0000eee8 <am_hal_itm_enable>:
    eee8:	4a0e      	ldr	r2, [pc, #56]	; (ef24 <am_hal_itm_enable+0x3c>)
    eeea:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    eeee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    eef2:	b410      	push	{r4}
    eef4:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    eef8:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    eefc:	01db      	lsls	r3, r3, #7
    eefe:	d5fb      	bpl.n	eef8 <am_hal_itm_enable+0x10>
    ef00:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    ef04:	4c08      	ldr	r4, [pc, #32]	; (ef28 <am_hal_itm_enable+0x40>)
    ef06:	4a09      	ldr	r2, [pc, #36]	; (ef2c <am_hal_itm_enable+0x44>)
    ef08:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    ef0c:	200f      	movs	r0, #15
    ef0e:	f04f 31ff 	mov.w	r1, #4294967295
    ef12:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    ef16:	f85d 4b04 	ldr.w	r4, [sp], #4
    ef1a:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    ef1e:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    ef22:	4770      	bx	lr
    ef24:	e000ed00 	.word	0xe000ed00
    ef28:	c5acce55 	.word	0xc5acce55
    ef2c:	00150511 	.word	0x00150511

0000ef30 <am_hal_itm_print>:
    ef30:	7803      	ldrb	r3, [r0, #0]
    ef32:	b1a3      	cbz	r3, ef5e <am_hal_itm_print+0x2e>
    ef34:	4603      	mov	r3, r0
    ef36:	f1c0 0c01 	rsb	ip, r0, #1
    ef3a:	eb0c 0103 	add.w	r1, ip, r3
    ef3e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    ef42:	2a00      	cmp	r2, #0
    ef44:	d1f9      	bne.n	ef3a <am_hal_itm_print+0xa>
    ef46:	4401      	add	r1, r0
    ef48:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    ef4c:	f810 cb01 	ldrb.w	ip, [r0], #1
    ef50:	6813      	ldr	r3, [r2, #0]
    ef52:	2b00      	cmp	r3, #0
    ef54:	d0fc      	beq.n	ef50 <am_hal_itm_print+0x20>
    ef56:	4288      	cmp	r0, r1
    ef58:	f882 c000 	strb.w	ip, [r2]
    ef5c:	d1f6      	bne.n	ef4c <am_hal_itm_print+0x1c>
    ef5e:	4770      	bx	lr

0000ef60 <am_hal_mcuctrl_info_get>:
    ef60:	2900      	cmp	r1, #0
    ef62:	f000 808f 	beq.w	f084 <am_hal_mcuctrl_info_get+0x124>
    ef66:	2801      	cmp	r0, #1
    ef68:	b430      	push	{r4, r5}
    ef6a:	d006      	beq.n	ef7a <am_hal_mcuctrl_info_get+0x1a>
    ef6c:	2802      	cmp	r0, #2
    ef6e:	d06d      	beq.n	f04c <am_hal_mcuctrl_info_get+0xec>
    ef70:	2800      	cmp	r0, #0
    ef72:	d055      	beq.n	f020 <am_hal_mcuctrl_info_get+0xc0>
    ef74:	2006      	movs	r0, #6
    ef76:	bc30      	pop	{r4, r5}
    ef78:	4770      	bx	lr
    ef7a:	4a43      	ldr	r2, [pc, #268]	; (f088 <am_hal_mcuctrl_info_get+0x128>)
    ef7c:	4843      	ldr	r0, [pc, #268]	; (f08c <am_hal_mcuctrl_info_get+0x12c>)
    ef7e:	6813      	ldr	r3, [r2, #0]
    ef80:	600b      	str	r3, [r1, #0]
    ef82:	6854      	ldr	r4, [r2, #4]
    ef84:	604c      	str	r4, [r1, #4]
    ef86:	6894      	ldr	r4, [r2, #8]
    ef88:	608c      	str	r4, [r1, #8]
    ef8a:	68d4      	ldr	r4, [r2, #12]
    ef8c:	60cc      	str	r4, [r1, #12]
    ef8e:	f3c3 5503 	ubfx	r5, r3, #20, #4
    ef92:	6914      	ldr	r4, [r2, #16]
    ef94:	610c      	str	r4, [r1, #16]
    ef96:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    ef9a:	4c3d      	ldr	r4, [pc, #244]	; (f090 <am_hal_mcuctrl_info_get+0x130>)
    ef9c:	6950      	ldr	r0, [r2, #20]
    ef9e:	6148      	str	r0, [r1, #20]
    efa0:	f003 0201 	and.w	r2, r3, #1
    efa4:	f3c3 4303 	ubfx	r3, r3, #16, #4
    efa8:	e9c1 2506 	strd	r2, r5, [r1, #24]
    efac:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    efb0:	4a38      	ldr	r2, [pc, #224]	; (f094 <am_hal_mcuctrl_info_get+0x134>)
    efb2:	620b      	str	r3, [r1, #32]
    efb4:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    efb8:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    efbc:	b2db      	uxtb	r3, r3
    efbe:	f000 000f 	and.w	r0, r0, #15
    efc2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    efc6:	624b      	str	r3, [r1, #36]	; 0x24
    efc8:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    efcc:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
    efd0:	f3c3 1303 	ubfx	r3, r3, #4, #4
    efd4:	f000 000f 	and.w	r0, r0, #15
    efd8:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
    efdc:	628b      	str	r3, [r1, #40]	; 0x28
    efde:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    efe2:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
    efe6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    efea:	f3c0 1003 	ubfx	r0, r0, #4, #4
    efee:	4303      	orrs	r3, r0
    eff0:	62cb      	str	r3, [r1, #44]	; 0x2c
    eff2:	f8d2 40fc 	ldr.w	r4, [r2, #252]	; 0xfc
    eff6:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    effa:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    effe:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    f002:	b2db      	uxtb	r3, r3
    f004:	041b      	lsls	r3, r3, #16
    f006:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    f00a:	fa5f fc82 	uxtb.w	ip, r2
    f00e:	ea43 030c 	orr.w	r3, r3, ip
    f012:	b2c2      	uxtb	r2, r0
    f014:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    f018:	630b      	str	r3, [r1, #48]	; 0x30
    f01a:	2000      	movs	r0, #0
    f01c:	bc30      	pop	{r4, r5}
    f01e:	4770      	bx	lr
    f020:	4a19      	ldr	r2, [pc, #100]	; (f088 <am_hal_mcuctrl_info_get+0x128>)
    f022:	6993      	ldr	r3, [r2, #24]
    f024:	f3c3 1480 	ubfx	r4, r3, #6, #1
    f028:	700c      	strb	r4, [r1, #0]
    f02a:	f8d2 41a0 	ldr.w	r4, [r2, #416]	; 0x1a0
    f02e:	f3c3 0380 	ubfx	r3, r3, #2, #1
    f032:	704b      	strb	r3, [r1, #1]
    f034:	f3c4 6381 	ubfx	r3, r4, #26, #2
    f038:	710b      	strb	r3, [r1, #4]
    f03a:	6953      	ldr	r3, [r2, #20]
    f03c:	f3c3 0240 	ubfx	r2, r3, #1, #1
    f040:	f003 0301 	and.w	r3, r3, #1
    f044:	bc30      	pop	{r4, r5}
    f046:	708a      	strb	r2, [r1, #2]
    f048:	70cb      	strb	r3, [r1, #3]
    f04a:	4770      	bx	lr
    f04c:	4a0e      	ldr	r2, [pc, #56]	; (f088 <am_hal_mcuctrl_info_get+0x128>)
    f04e:	6848      	ldr	r0, [r1, #4]
    f050:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    f054:	f003 0401 	and.w	r4, r3, #1
    f058:	700c      	strb	r4, [r1, #0]
    f05a:	f3c3 0440 	ubfx	r4, r3, #1, #1
    f05e:	720c      	strb	r4, [r1, #8]
    f060:	f8d2 41c4 	ldr.w	r4, [r2, #452]	; 0x1c4
    f064:	60cc      	str	r4, [r1, #12]
    f066:	f8d2 41c0 	ldr.w	r4, [r2, #448]	; 0x1c0
    f06a:	4320      	orrs	r0, r4
    f06c:	f3c3 0380 	ubfx	r3, r3, #2, #1
    f070:	6048      	str	r0, [r1, #4]
    f072:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    f076:	740b      	strb	r3, [r1, #16]
    f078:	694b      	ldr	r3, [r1, #20]
    f07a:	4313      	orrs	r3, r2
    f07c:	2000      	movs	r0, #0
    f07e:	bc30      	pop	{r4, r5}
    f080:	614b      	str	r3, [r1, #20]
    f082:	4770      	bx	lr
    f084:	2006      	movs	r0, #6
    f086:	4770      	bx	lr
    f088:	40020000 	.word	0x40020000
    f08c:	000106a4 	.word	0x000106a4
    f090:	000106e4 	.word	0x000106e4
    f094:	f0000f00 	.word	0xf0000f00

0000f098 <am_hal_pwrctrl_periph_enable>:
    f098:	b570      	push	{r4, r5, r6, lr}
    f09a:	b082      	sub	sp, #8
    f09c:	4604      	mov	r4, r0
    f09e:	f7ff fa11 	bl	e4c4 <am_hal_interrupt_master_disable>
    f0a2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f0a6:	4e0f      	ldr	r6, [pc, #60]	; (f0e4 <am_hal_pwrctrl_periph_enable+0x4c>)
    f0a8:	4d0f      	ldr	r5, [pc, #60]	; (f0e8 <am_hal_pwrctrl_periph_enable+0x50>)
    f0aa:	9001      	str	r0, [sp, #4]
    f0ac:	00a4      	lsls	r4, r4, #2
    f0ae:	68b3      	ldr	r3, [r6, #8]
    f0b0:	592a      	ldr	r2, [r5, r4]
    f0b2:	4313      	orrs	r3, r2
    f0b4:	60b3      	str	r3, [r6, #8]
    f0b6:	9801      	ldr	r0, [sp, #4]
    f0b8:	442c      	add	r4, r5
    f0ba:	f7ff fa07 	bl	e4cc <am_hal_interrupt_master_set>
    f0be:	20a0      	movs	r0, #160	; 0xa0
    f0c0:	f7fe ff0c 	bl	dedc <am_hal_flash_delay>
    f0c4:	69b3      	ldr	r3, [r6, #24]
    f0c6:	6864      	ldr	r4, [r4, #4]
    f0c8:	4223      	tst	r3, r4
    f0ca:	d103      	bne.n	f0d4 <am_hal_pwrctrl_periph_enable+0x3c>
    f0cc:	20a0      	movs	r0, #160	; 0xa0
    f0ce:	f7fe ff05 	bl	dedc <am_hal_flash_delay>
    f0d2:	69b3      	ldr	r3, [r6, #24]
    f0d4:	4b03      	ldr	r3, [pc, #12]	; (f0e4 <am_hal_pwrctrl_periph_enable+0x4c>)
    f0d6:	699b      	ldr	r3, [r3, #24]
    f0d8:	4223      	tst	r3, r4
    f0da:	bf0c      	ite	eq
    f0dc:	2001      	moveq	r0, #1
    f0de:	2000      	movne	r0, #0
    f0e0:	b002      	add	sp, #8
    f0e2:	bd70      	pop	{r4, r5, r6, pc}
    f0e4:	40021000 	.word	0x40021000
    f0e8:	00010724 	.word	0x00010724

0000f0ec <am_hal_pwrctrl_periph_disable>:
    f0ec:	b570      	push	{r4, r5, r6, lr}
    f0ee:	b082      	sub	sp, #8
    f0f0:	4604      	mov	r4, r0
    f0f2:	f7ff f9e7 	bl	e4c4 <am_hal_interrupt_master_disable>
    f0f6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f0fa:	4e10      	ldr	r6, [pc, #64]	; (f13c <am_hal_pwrctrl_periph_disable+0x50>)
    f0fc:	4d10      	ldr	r5, [pc, #64]	; (f140 <am_hal_pwrctrl_periph_disable+0x54>)
    f0fe:	9001      	str	r0, [sp, #4]
    f100:	00a4      	lsls	r4, r4, #2
    f102:	68b3      	ldr	r3, [r6, #8]
    f104:	592a      	ldr	r2, [r5, r4]
    f106:	ea23 0302 	bic.w	r3, r3, r2
    f10a:	60b3      	str	r3, [r6, #8]
    f10c:	9801      	ldr	r0, [sp, #4]
    f10e:	442c      	add	r4, r5
    f110:	f7ff f9dc 	bl	e4cc <am_hal_interrupt_master_set>
    f114:	20a0      	movs	r0, #160	; 0xa0
    f116:	f7fe fee1 	bl	dedc <am_hal_flash_delay>
    f11a:	69b3      	ldr	r3, [r6, #24]
    f11c:	6864      	ldr	r4, [r4, #4]
    f11e:	4223      	tst	r3, r4
    f120:	d003      	beq.n	f12a <am_hal_pwrctrl_periph_disable+0x3e>
    f122:	20a0      	movs	r0, #160	; 0xa0
    f124:	f7fe feda 	bl	dedc <am_hal_flash_delay>
    f128:	69b3      	ldr	r3, [r6, #24]
    f12a:	4b04      	ldr	r3, [pc, #16]	; (f13c <am_hal_pwrctrl_periph_disable+0x50>)
    f12c:	699b      	ldr	r3, [r3, #24]
    f12e:	4223      	tst	r3, r4
    f130:	bf14      	ite	ne
    f132:	2001      	movne	r0, #1
    f134:	2000      	moveq	r0, #0
    f136:	b002      	add	sp, #8
    f138:	bd70      	pop	{r4, r5, r6, pc}
    f13a:	bf00      	nop
    f13c:	40021000 	.word	0x40021000
    f140:	00010724 	.word	0x00010724

0000f144 <am_hal_pwrctrl_low_power_init>:
    f144:	b530      	push	{r4, r5, lr}
    f146:	4b69      	ldr	r3, [pc, #420]	; (f2ec <am_hal_pwrctrl_low_power_init+0x1a8>)
    f148:	681a      	ldr	r2, [r3, #0]
    f14a:	b085      	sub	sp, #20
    f14c:	b912      	cbnz	r2, f154 <am_hal_pwrctrl_low_power_init+0x10>
    f14e:	4a68      	ldr	r2, [pc, #416]	; (f2f0 <am_hal_pwrctrl_low_power_init+0x1ac>)
    f150:	6812      	ldr	r2, [r2, #0]
    f152:	601a      	str	r2, [r3, #0]
    f154:	4b67      	ldr	r3, [pc, #412]	; (f2f4 <am_hal_pwrctrl_low_power_init+0x1b0>)
    f156:	68db      	ldr	r3, [r3, #12]
    f158:	b2db      	uxtb	r3, r3
    f15a:	2b12      	cmp	r3, #18
    f15c:	d104      	bne.n	f168 <am_hal_pwrctrl_low_power_init+0x24>
    f15e:	4c66      	ldr	r4, [pc, #408]	; (f2f8 <am_hal_pwrctrl_low_power_init+0x1b4>)
    f160:	6863      	ldr	r3, [r4, #4]
    f162:	07d8      	lsls	r0, r3, #31
    f164:	f100 8088 	bmi.w	f278 <am_hal_pwrctrl_low_power_init+0x134>
    f168:	4b62      	ldr	r3, [pc, #392]	; (f2f4 <am_hal_pwrctrl_low_power_init+0x1b0>)
    f16a:	68da      	ldr	r2, [r3, #12]
    f16c:	b2d2      	uxtb	r2, r2
    f16e:	2a20      	cmp	r2, #32
    f170:	d934      	bls.n	f1dc <am_hal_pwrctrl_low_power_init+0x98>
    f172:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
    f176:	2002      	movs	r0, #2
    f178:	f360 4213 	bfi	r2, r0, #16, #4
    f17c:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    f180:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
    f184:	2203      	movs	r2, #3
    f186:	f362 5117 	bfi	r1, r2, #20, #4
    f18a:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
    f18e:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    f192:	2405      	movs	r4, #5
    f194:	f364 0103 	bfi	r1, r4, #0, #4
    f198:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    f19c:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    f1a0:	f360 1107 	bfi	r1, r0, #4, #4
    f1a4:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    f1a8:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    f1ac:	2406      	movs	r4, #6
    f1ae:	f364 210b 	bfi	r1, r4, #8, #4
    f1b2:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    f1b6:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    f1ba:	2001      	movs	r0, #1
    f1bc:	f360 310f 	bfi	r1, r0, #12, #4
    f1c0:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    f1c4:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    f1c8:	f362 61de 	bfi	r1, r2, #27, #4
    f1cc:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    f1d0:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
    f1d4:	f362 0103 	bfi	r1, r2, #0, #4
    f1d8:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
    f1dc:	4a45      	ldr	r2, [pc, #276]	; (f2f4 <am_hal_pwrctrl_low_power_init+0x1b0>)
    f1de:	68d3      	ldr	r3, [r2, #12]
    f1e0:	b2db      	uxtb	r3, r3
    f1e2:	2b11      	cmp	r3, #17
    f1e4:	d905      	bls.n	f1f2 <am_hal_pwrctrl_low_power_init+0xae>
    f1e6:	f8d2 335c 	ldr.w	r3, [r2, #860]	; 0x35c
    f1ea:	f36f 6318 	bfc	r3, #24, #1
    f1ee:	f8c2 335c 	str.w	r3, [r2, #860]	; 0x35c
    f1f2:	2100      	movs	r1, #0
    f1f4:	200c      	movs	r0, #12
    f1f6:	f000 fe01 	bl	fdfc <am_hal_cachectrl_control>
    f1fa:	4b3f      	ldr	r3, [pc, #252]	; (f2f8 <am_hal_pwrctrl_low_power_init+0x1b4>)
    f1fc:	699b      	ldr	r3, [r3, #24]
    f1fe:	f3c3 2500 	ubfx	r5, r3, #8, #1
    f202:	05db      	lsls	r3, r3, #23
    f204:	d420      	bmi.n	f248 <am_hal_pwrctrl_low_power_init+0x104>
    f206:	4c3b      	ldr	r4, [pc, #236]	; (f2f4 <am_hal_pwrctrl_low_power_init+0x1b0>)
    f208:	68e3      	ldr	r3, [r4, #12]
    f20a:	b2db      	uxtb	r3, r3
    f20c:	2b11      	cmp	r3, #17
    f20e:	d84e      	bhi.n	f2ae <am_hal_pwrctrl_low_power_init+0x16a>
    f210:	4c38      	ldr	r4, [pc, #224]	; (f2f4 <am_hal_pwrctrl_low_power_init+0x1b0>)
    f212:	493a      	ldr	r1, [pc, #232]	; (f2fc <am_hal_pwrctrl_low_power_init+0x1b8>)
    f214:	7e22      	ldrb	r2, [r4, #24]
    f216:	2001      	movs	r0, #1
    f218:	4302      	orrs	r2, r0
    f21a:	2307      	movs	r3, #7
    f21c:	7622      	strb	r2, [r4, #24]
    f21e:	9000      	str	r0, [sp, #0]
    f220:	461a      	mov	r2, r3
    f222:	f242 7010 	movw	r0, #10000	; 0x2710
    f226:	f7fe fe91 	bl	df4c <am_hal_flash_delay_status_check>
    f22a:	2800      	cmp	r0, #0
    f22c:	d15a      	bne.n	f2e4 <am_hal_pwrctrl_low_power_init+0x1a0>
    f22e:	4b32      	ldr	r3, [pc, #200]	; (f2f8 <am_hal_pwrctrl_low_power_init+0x1b4>)
    f230:	681a      	ldr	r2, [r3, #0]
    f232:	f042 0201 	orr.w	r2, r2, #1
    f236:	601a      	str	r2, [r3, #0]
    f238:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f23a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    f23e:	625a      	str	r2, [r3, #36]	; 0x24
    f240:	68e3      	ldr	r3, [r4, #12]
    f242:	b2db      	uxtb	r3, r3
    f244:	2b11      	cmp	r3, #17
    f246:	d002      	beq.n	f24e <am_hal_pwrctrl_low_power_init+0x10a>
    f248:	2000      	movs	r0, #0
    f24a:	b005      	add	sp, #20
    f24c:	bd30      	pop	{r4, r5, pc}
    f24e:	f8d4 335c 	ldr.w	r3, [r4, #860]	; 0x35c
    f252:	f360 5356 	bfi	r3, r0, #21, #2
    f256:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
    f25a:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    f25e:	220f      	movs	r2, #15
    f260:	f362 138b 	bfi	r3, r2, #6, #6
    f264:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    f268:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    f26c:	f362 0305 	bfi	r3, r2, #0, #6
    f270:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    f274:	b005      	add	sp, #20
    f276:	bd30      	pop	{r4, r5, pc}
    f278:	f7ff f924 	bl	e4c4 <am_hal_interrupt_master_disable>
    f27c:	9002      	str	r0, [sp, #8]
    f27e:	68a3      	ldr	r3, [r4, #8]
    f280:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    f284:	60a3      	str	r3, [r4, #8]
    f286:	9802      	ldr	r0, [sp, #8]
    f288:	f7ff f920 	bl	e4cc <am_hal_interrupt_master_set>
    f28c:	20a0      	movs	r0, #160	; 0xa0
    f28e:	f7fe fe25 	bl	dedc <am_hal_flash_delay>
    f292:	69a3      	ldr	r3, [r4, #24]
    f294:	0619      	lsls	r1, r3, #24
    f296:	d403      	bmi.n	f2a0 <am_hal_pwrctrl_low_power_init+0x15c>
    f298:	20a0      	movs	r0, #160	; 0xa0
    f29a:	f7fe fe1f 	bl	dedc <am_hal_flash_delay>
    f29e:	69a3      	ldr	r3, [r4, #24]
    f2a0:	4b15      	ldr	r3, [pc, #84]	; (f2f8 <am_hal_pwrctrl_low_power_init+0x1b4>)
    f2a2:	699b      	ldr	r3, [r3, #24]
    f2a4:	061a      	lsls	r2, r3, #24
    f2a6:	f53f af5f 	bmi.w	f168 <am_hal_pwrctrl_low_power_init+0x24>
    f2aa:	2001      	movs	r0, #1
    f2ac:	e7cd      	b.n	f24a <am_hal_pwrctrl_low_power_init+0x106>
    f2ae:	f7ff f909 	bl	e4c4 <am_hal_interrupt_master_disable>
    f2b2:	9003      	str	r0, [sp, #12]
    f2b4:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    f2b8:	2219      	movs	r2, #25
    f2ba:	f362 138b 	bfi	r3, r2, #6, #6
    f2be:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    f2c2:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
    f2c6:	210c      	movs	r1, #12
    f2c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    f2cc:	f361 0205 	bfi	r2, r1, #0, #6
    f2d0:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
    f2d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    f2d6:	f365 5296 	bfi	r2, r5, #22, #1
    f2da:	63da      	str	r2, [r3, #60]	; 0x3c
    f2dc:	9803      	ldr	r0, [sp, #12]
    f2de:	f7ff f8f5 	bl	e4cc <am_hal_interrupt_master_set>
    f2e2:	e795      	b.n	f210 <am_hal_pwrctrl_low_power_init+0xcc>
    f2e4:	2004      	movs	r0, #4
    f2e6:	b005      	add	sp, #20
    f2e8:	bd30      	pop	{r4, r5, pc}
    f2ea:	bf00      	nop
    f2ec:	1000af5c 	.word	0x1000af5c
    f2f0:	4ffff000 	.word	0x4ffff000
    f2f4:	40020000 	.word	0x40020000
    f2f8:	40021000 	.word	0x40021000
    f2fc:	40020018 	.word	0x40020018

0000f300 <am_hal_rtc_osc_disable>:
    f300:	4a03      	ldr	r2, [pc, #12]	; (f310 <am_hal_rtc_osc_disable+0x10>)
    f302:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    f306:	f043 0310 	orr.w	r3, r3, #16
    f30a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    f30e:	4770      	bx	lr
    f310:	40004200 	.word	0x40004200

0000f314 <am_hal_crc32>:
    f314:	2a00      	cmp	r2, #0
    f316:	f000 809a 	beq.w	f44e <am_hal_crc32+0x13a>
    f31a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f31e:	4692      	mov	sl, r2
    f320:	f011 0203 	ands.w	r2, r1, #3
    f324:	460f      	mov	r7, r1
    f326:	f040 808f 	bne.w	f448 <am_hal_crc32+0x134>
    f32a:	4b4a      	ldr	r3, [pc, #296]	; (f454 <am_hal_crc32+0x140>)
    f32c:	4298      	cmp	r0, r3
    f32e:	d818      	bhi.n	f362 <am_hal_crc32+0x4e>
    f330:	4c49      	ldr	r4, [pc, #292]	; (f458 <am_hal_crc32+0x144>)
    f332:	f04f 33ff 	mov.w	r3, #4294967295
    f336:	6323      	str	r3, [r4, #48]	; 0x30
    f338:	6120      	str	r0, [r4, #16]
    f33a:	6227      	str	r7, [r4, #32]
    f33c:	6822      	ldr	r2, [r4, #0]
    f33e:	4847      	ldr	r0, [pc, #284]	; (f45c <am_hal_crc32+0x148>)
    f340:	f36f 1207 	bfc	r2, #4, #4
    f344:	6022      	str	r2, [r4, #0]
    f346:	6821      	ldr	r1, [r4, #0]
    f348:	2201      	movs	r2, #1
    f34a:	4311      	orrs	r1, r2
    f34c:	6021      	str	r1, [r4, #0]
    f34e:	2300      	movs	r3, #0
    f350:	4621      	mov	r1, r4
    f352:	f7fe fdd3 	bl	defc <am_hal_flash_delay_status_change>
    f356:	2800      	cmp	r0, #0
    f358:	d161      	bne.n	f41e <am_hal_crc32+0x10a>
    f35a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    f35c:	f8ca 3000 	str.w	r3, [sl]
    f360:	e05d      	b.n	f41e <am_hal_crc32+0x10a>
    f362:	f100 4170 	add.w	r1, r0, #4026531840	; 0xf0000000
    f366:	f5a3 2320 	sub.w	r3, r3, #655360	; 0xa0000
    f36a:	4299      	cmp	r1, r3
    f36c:	d9e0      	bls.n	f330 <am_hal_crc32+0x1c>
    f36e:	4d3a      	ldr	r5, [pc, #232]	; (f458 <am_hal_crc32+0x144>)
    f370:	4e3b      	ldr	r6, [pc, #236]	; (f460 <am_hal_crc32+0x14c>)
    f372:	612e      	str	r6, [r5, #16]
    f374:	682b      	ldr	r3, [r5, #0]
    f376:	f362 1307 	bfi	r3, r2, #4, #4
    f37a:	602b      	str	r3, [r5, #0]
    f37c:	f04f 33ff 	mov.w	r3, #4294967295
    f380:	4604      	mov	r4, r0
    f382:	632b      	str	r3, [r5, #48]	; 0x30
    f384:	4698      	mov	r8, r3
    f386:	2005      	movs	r0, #5
    f388:	2f00      	cmp	r7, #0
    f38a:	d046      	beq.n	f41a <am_hal_crc32+0x106>
    f38c:	f8df 90cc 	ldr.w	r9, [pc, #204]	; f45c <am_hal_crc32+0x148>
    f390:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    f394:	46bc      	mov	ip, r7
    f396:	bf28      	it	cs
    f398:	f44f 7c00 	movcs.w	ip, #512	; 0x200
    f39c:	ea4f 019c 	mov.w	r1, ip, lsr #2
    f3a0:	eba7 070c 	sub.w	r7, r7, ip
    f3a4:	1e48      	subs	r0, r1, #1
    f3a6:	b321      	cbz	r1, f3f2 <am_hal_crc32+0xde>
    f3a8:	1d23      	adds	r3, r4, #4
    f3aa:	1af3      	subs	r3, r6, r3
    f3ac:	f3c4 0202 	ubfx	r2, r4, #0, #3
    f3b0:	bf18      	it	ne
    f3b2:	2301      	movne	r3, #1
    f3b4:	2a00      	cmp	r2, #0
    f3b6:	bf18      	it	ne
    f3b8:	2300      	movne	r3, #0
    f3ba:	b393      	cbz	r3, f422 <am_hal_crc32+0x10e>
    f3bc:	280a      	cmp	r0, #10
    f3be:	d930      	bls.n	f422 <am_hal_crc32+0x10e>
    f3c0:	f1a4 0208 	sub.w	r2, r4, #8
    f3c4:	f02c 0e07 	bic.w	lr, ip, #7
    f3c8:	4825      	ldr	r0, [pc, #148]	; (f460 <am_hal_crc32+0x14c>)
    f3ca:	ea4f 03dc 	mov.w	r3, ip, lsr #3
    f3ce:	4496      	add	lr, r2
    f3d0:	ed92 7b02 	vldr	d7, [r2, #8]
    f3d4:	3208      	adds	r2, #8
    f3d6:	4596      	cmp	lr, r2
    f3d8:	eca0 7b02 	vstmia	r0!, {d7}
    f3dc:	d1f8      	bne.n	f3d0 <am_hal_crc32+0xbc>
    f3de:	ebb1 0f43 	cmp.w	r1, r3, lsl #1
    f3e2:	bf1b      	ittet	ne
    f3e4:	f854 2033 	ldrne.w	r2, [r4, r3, lsl #3]
    f3e8:	f846 2033 	strne.w	r2, [r6, r3, lsl #3]
    f3ec:	00db      	lsleq	r3, r3, #3
    f3ee:	008b      	lslne	r3, r1, #2
    f3f0:	441c      	add	r4, r3
    f3f2:	f8c5 c020 	str.w	ip, [r5, #32]
    f3f6:	682b      	ldr	r3, [r5, #0]
    f3f8:	4917      	ldr	r1, [pc, #92]	; (f458 <am_hal_crc32+0x144>)
    f3fa:	f043 0301 	orr.w	r3, r3, #1
    f3fe:	602b      	str	r3, [r5, #0]
    f400:	2201      	movs	r2, #1
    f402:	2300      	movs	r3, #0
    f404:	4648      	mov	r0, r9
    f406:	f7fe fd79 	bl	defc <am_hal_flash_delay_status_change>
    f40a:	b9b8      	cbnz	r0, f43c <am_hal_crc32+0x128>
    f40c:	682b      	ldr	r3, [r5, #0]
    f40e:	2b00      	cmp	r3, #0
    f410:	db14      	blt.n	f43c <am_hal_crc32+0x128>
    f412:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
    f416:	2f00      	cmp	r7, #0
    f418:	d1ba      	bne.n	f390 <am_hal_crc32+0x7c>
    f41a:	f8ca 8000 	str.w	r8, [sl]
    f41e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f422:	008b      	lsls	r3, r1, #2
    f424:	480e      	ldr	r0, [pc, #56]	; (f460 <am_hal_crc32+0x14c>)
    f426:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    f42a:	4622      	mov	r2, r4
    f42c:	468e      	mov	lr, r1
    f42e:	f852 1b04 	ldr.w	r1, [r2], #4
    f432:	f840 1b04 	str.w	r1, [r0], #4
    f436:	4596      	cmp	lr, r2
    f438:	d1f9      	bne.n	f42e <am_hal_crc32+0x11a>
    f43a:	e7d9      	b.n	f3f0 <am_hal_crc32+0xdc>
    f43c:	4b06      	ldr	r3, [pc, #24]	; (f458 <am_hal_crc32+0x144>)
    f43e:	681b      	ldr	r3, [r3, #0]
    f440:	2b00      	cmp	r3, #0
    f442:	daea      	bge.n	f41a <am_hal_crc32+0x106>
    f444:	2009      	movs	r0, #9
    f446:	e7ea      	b.n	f41e <am_hal_crc32+0x10a>
    f448:	2006      	movs	r0, #6
    f44a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f44e:	2006      	movs	r0, #6
    f450:	4770      	bx	lr
    f452:	bf00      	nop
    f454:	000ffffc 	.word	0x000ffffc
    f458:	40030000 	.word	0x40030000
    f45c:	000186a0 	.word	0x000186a0
    f460:	1000af60 	.word	0x1000af60

0000f464 <am_hal_tpiu_enable>:
    f464:	b510      	push	{r4, lr}
    f466:	4b23      	ldr	r3, [pc, #140]	; (f4f4 <am_hal_tpiu_enable+0x90>)
    f468:	6804      	ldr	r4, [r0, #0]
    f46a:	2200      	movs	r2, #0
    f46c:	b084      	sub	sp, #16
    f46e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    f472:	b334      	cbz	r4, f4c2 <am_hal_tpiu_enable+0x5e>
    f474:	4a20      	ldr	r2, [pc, #128]	; (f4f8 <am_hal_tpiu_enable+0x94>)
    f476:	4921      	ldr	r1, [pc, #132]	; (f4fc <am_hal_tpiu_enable+0x98>)
    f478:	2001      	movs	r0, #1
    f47a:	6058      	str	r0, [r3, #4]
    f47c:	f5a4 4361 	sub.w	r3, r4, #57600	; 0xe100
    f480:	a801      	add	r0, sp, #4
    f482:	428b      	cmp	r3, r1
    f484:	bf88      	it	hi
    f486:	4614      	movhi	r4, r2
    f488:	f7fe fd0a 	bl	dea0 <am_hal_clkgen_status_get>
    f48c:	9b01      	ldr	r3, [sp, #4]
    f48e:	1c5a      	adds	r2, r3, #1
    f490:	d02d      	beq.n	f4ee <am_hal_tpiu_enable+0x8a>
    f492:	08db      	lsrs	r3, r3, #3
    f494:	fbb3 f4f4 	udiv	r4, r3, r4
    f498:	3c01      	subs	r4, #1
    f49a:	b2a4      	uxth	r4, r4
    f49c:	4b15      	ldr	r3, [pc, #84]	; (f4f4 <am_hal_tpiu_enable+0x90>)
    f49e:	4a18      	ldr	r2, [pc, #96]	; (f500 <am_hal_tpiu_enable+0x9c>)
    f4a0:	611c      	str	r4, [r3, #16]
    f4a2:	2102      	movs	r1, #2
    f4a4:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
    f4a8:	2000      	movs	r0, #0
    f4aa:	f240 2101 	movw	r1, #513	; 0x201
    f4ae:	f8c3 0f00 	str.w	r0, [r3, #3840]	; 0xf00
    f4b2:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
    f4b6:	f44f 7048 	mov.w	r0, #800	; 0x320
    f4ba:	f7fe fd0f 	bl	dedc <am_hal_flash_delay>
    f4be:	b004      	add	sp, #16
    f4c0:	bd10      	pop	{r4, pc}
    f4c2:	6902      	ldr	r2, [r0, #16]
    f4c4:	611a      	str	r2, [r3, #16]
    f4c6:	6882      	ldr	r2, [r0, #8]
    f4c8:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    f4cc:	68c1      	ldr	r1, [r0, #12]
    f4ce:	2201      	movs	r2, #1
    f4d0:	3901      	subs	r1, #1
    f4d2:	408a      	lsls	r2, r1
    f4d4:	605a      	str	r2, [r3, #4]
    f4d6:	f8c3 4f00 	str.w	r4, [r3, #3840]	; 0xf00
    f4da:	4a09      	ldr	r2, [pc, #36]	; (f500 <am_hal_tpiu_enable+0x9c>)
    f4dc:	6843      	ldr	r3, [r0, #4]
    f4de:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    f4e2:	f44f 7048 	mov.w	r0, #800	; 0x320
    f4e6:	f7fe fcf9 	bl	dedc <am_hal_flash_delay>
    f4ea:	b004      	add	sp, #16
    f4ec:	bd10      	pop	{r4, pc}
    f4ee:	2405      	movs	r4, #5
    f4f0:	e7d4      	b.n	f49c <am_hal_tpiu_enable+0x38>
    f4f2:	bf00      	nop
    f4f4:	e0040000 	.word	0xe0040000
    f4f8:	000f4240 	.word	0x000f4240
    f4fc:	001da380 	.word	0x001da380
    f500:	40020000 	.word	0x40020000

0000f504 <am_hal_uart_initialize>:
    f504:	2801      	cmp	r0, #1
    f506:	d81a      	bhi.n	f53e <am_hal_uart_initialize+0x3a>
    f508:	b1e9      	cbz	r1, f546 <am_hal_uart_initialize+0x42>
    f50a:	b530      	push	{r4, r5, lr}
    f50c:	2264      	movs	r2, #100	; 0x64
    f50e:	4d0f      	ldr	r5, [pc, #60]	; (f54c <am_hal_uart_initialize+0x48>)
    f510:	fb00 f202 	mul.w	r2, r0, r2
    f514:	18ac      	adds	r4, r5, r2
    f516:	78e3      	ldrb	r3, [r4, #3]
    f518:	f3c3 0e00 	ubfx	lr, r3, #0, #1
    f51c:	f013 0301 	ands.w	r3, r3, #1
    f520:	d10f      	bne.n	f542 <am_hal_uart_initialize+0x3e>
    f522:	6260      	str	r0, [r4, #36]	; 0x24
    f524:	58a8      	ldr	r0, [r5, r2]
    f526:	f000 4c7e 	and.w	ip, r0, #4261412864	; 0xfe000000
    f52a:	4809      	ldr	r0, [pc, #36]	; (f550 <am_hal_uart_initialize+0x4c>)
    f52c:	ea4c 0000 	orr.w	r0, ip, r0
    f530:	50a8      	str	r0, [r5, r2]
    f532:	f884 e004 	strb.w	lr, [r4, #4]
    f536:	6623      	str	r3, [r4, #96]	; 0x60
    f538:	4618      	mov	r0, r3
    f53a:	600c      	str	r4, [r1, #0]
    f53c:	bd30      	pop	{r4, r5, pc}
    f53e:	2005      	movs	r0, #5
    f540:	4770      	bx	lr
    f542:	2007      	movs	r0, #7
    f544:	bd30      	pop	{r4, r5, pc}
    f546:	2006      	movs	r0, #6
    f548:	4770      	bx	lr
    f54a:	bf00      	nop
    f54c:	1000b160 	.word	0x1000b160
    f550:	01ea9e06 	.word	0x01ea9e06

0000f554 <am_hal_uart_power_control>:
    f554:	b5f0      	push	{r4, r5, r6, r7, lr}
    f556:	4604      	mov	r4, r0
    f558:	6800      	ldr	r0, [r0, #0]
    f55a:	4b39      	ldr	r3, [pc, #228]	; (f640 <am_hal_uart_power_control+0xec>)
    f55c:	f020 467e 	bic.w	r6, r0, #4261412864	; 0xfe000000
    f560:	429e      	cmp	r6, r3
    f562:	b085      	sub	sp, #20
    f564:	d13f      	bne.n	f5e6 <am_hal_uart_power_control+0x92>
    f566:	6a65      	ldr	r5, [r4, #36]	; 0x24
    f568:	f105 0008 	add.w	r0, r5, #8
    f56c:	b2c7      	uxtb	r7, r0
    f56e:	b189      	cbz	r1, f594 <am_hal_uart_power_control+0x40>
    f570:	3901      	subs	r1, #1
    f572:	2901      	cmp	r1, #1
    f574:	d834      	bhi.n	f5e0 <am_hal_uart_power_control+0x8c>
    f576:	2a00      	cmp	r2, #0
    f578:	d138      	bne.n	f5ec <am_hal_uart_power_control+0x98>
    f57a:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    f57e:	351c      	adds	r5, #28
    f580:	032d      	lsls	r5, r5, #12
    f582:	f04f 33ff 	mov.w	r3, #4294967295
    f586:	646b      	str	r3, [r5, #68]	; 0x44
    f588:	4638      	mov	r0, r7
    f58a:	f7ff fdaf 	bl	f0ec <am_hal_pwrctrl_periph_disable>
    f58e:	2000      	movs	r0, #0
    f590:	b005      	add	sp, #20
    f592:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f594:	2a00      	cmp	r2, #0
    f596:	d04a      	beq.n	f62e <am_hal_uart_power_control+0xda>
    f598:	7923      	ldrb	r3, [r4, #4]
    f59a:	2b00      	cmp	r3, #0
    f59c:	d04e      	beq.n	f63c <am_hal_uart_power_control+0xe8>
    f59e:	4638      	mov	r0, r7
    f5a0:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    f5a4:	9101      	str	r1, [sp, #4]
    f5a6:	351c      	adds	r5, #28
    f5a8:	f7ff fd76 	bl	f098 <am_hal_pwrctrl_periph_enable>
    f5ac:	f7fe ff8a 	bl	e4c4 <am_hal_interrupt_master_disable>
    f5b0:	032d      	lsls	r5, r5, #12
    f5b2:	68a3      	ldr	r3, [r4, #8]
    f5b4:	9002      	str	r0, [sp, #8]
    f5b6:	622b      	str	r3, [r5, #32]
    f5b8:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    f5bc:	626a      	str	r2, [r5, #36]	; 0x24
    f5be:	62ab      	str	r3, [r5, #40]	; 0x28
    f5c0:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
    f5c4:	62ea      	str	r2, [r5, #44]	; 0x2c
    f5c6:	632b      	str	r3, [r5, #48]	; 0x30
    f5c8:	e9d4 2307 	ldrd	r2, r3, [r4, #28]
    f5cc:	9901      	ldr	r1, [sp, #4]
    f5ce:	636a      	str	r2, [r5, #52]	; 0x34
    f5d0:	63ab      	str	r3, [r5, #56]	; 0x38
    f5d2:	9802      	ldr	r0, [sp, #8]
    f5d4:	7121      	strb	r1, [r4, #4]
    f5d6:	f7fe ff79 	bl	e4cc <am_hal_interrupt_master_set>
    f5da:	9901      	ldr	r1, [sp, #4]
    f5dc:	4608      	mov	r0, r1
    f5de:	e000      	b.n	f5e2 <am_hal_uart_power_control+0x8e>
    f5e0:	2006      	movs	r0, #6
    f5e2:	b005      	add	sp, #20
    f5e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f5e6:	2002      	movs	r0, #2
    f5e8:	b005      	add	sp, #20
    f5ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f5ec:	f7fe ff6a 	bl	e4c4 <am_hal_interrupt_master_disable>
    f5f0:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    f5f4:	351c      	adds	r5, #28
    f5f6:	032d      	lsls	r5, r5, #12
    f5f8:	9003      	str	r0, [sp, #12]
    f5fa:	6a2b      	ldr	r3, [r5, #32]
    f5fc:	60a3      	str	r3, [r4, #8]
    f5fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f600:	60e3      	str	r3, [r4, #12]
    f602:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f604:	6123      	str	r3, [r4, #16]
    f606:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    f608:	6163      	str	r3, [r4, #20]
    f60a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    f60c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    f60e:	61a3      	str	r3, [r4, #24]
    f610:	6bab      	ldr	r3, [r5, #56]	; 0x38
    f612:	61e2      	str	r2, [r4, #28]
    f614:	2201      	movs	r2, #1
    f616:	6223      	str	r3, [r4, #32]
    f618:	9803      	ldr	r0, [sp, #12]
    f61a:	7122      	strb	r2, [r4, #4]
    f61c:	f7fe ff56 	bl	e4cc <am_hal_interrupt_master_set>
    f620:	6823      	ldr	r3, [r4, #0]
    f622:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f626:	42b3      	cmp	r3, r6
    f628:	d1ae      	bne.n	f588 <am_hal_uart_power_control+0x34>
    f62a:	6a65      	ldr	r5, [r4, #36]	; 0x24
    f62c:	e7a5      	b.n	f57a <am_hal_uart_power_control+0x26>
    f62e:	4638      	mov	r0, r7
    f630:	9201      	str	r2, [sp, #4]
    f632:	f7ff fd31 	bl	f098 <am_hal_pwrctrl_periph_enable>
    f636:	9a01      	ldr	r2, [sp, #4]
    f638:	4610      	mov	r0, r2
    f63a:	e7d2      	b.n	f5e2 <am_hal_uart_power_control+0x8e>
    f63c:	2007      	movs	r0, #7
    f63e:	e7d0      	b.n	f5e2 <am_hal_uart_power_control+0x8e>
    f640:	01ea9e06 	.word	0x01ea9e06

0000f644 <am_hal_uart_configure>:
    f644:	6803      	ldr	r3, [r0, #0]
    f646:	4a78      	ldr	r2, [pc, #480]	; (f828 <am_hal_uart_configure+0x1e4>)
    f648:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f64c:	4293      	cmp	r3, r2
    f64e:	d001      	beq.n	f654 <am_hal_uart_configure+0x10>
    f650:	2002      	movs	r0, #2
    f652:	4770      	bx	lr
    f654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f658:	6a44      	ldr	r4, [r0, #36]	; 0x24
    f65a:	f504 2480 	add.w	r4, r4, #262144	; 0x40000
    f65e:	341c      	adds	r4, #28
    f660:	0324      	lsls	r4, r4, #12
    f662:	2700      	movs	r7, #0
    f664:	b084      	sub	sp, #16
    f666:	6327      	str	r7, [r4, #48]	; 0x30
    f668:	460e      	mov	r6, r1
    f66a:	4605      	mov	r5, r0
    f66c:	f7fe ff2a 	bl	e4c4 <am_hal_interrupt_master_disable>
    f670:	9001      	str	r0, [sp, #4]
    f672:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    f674:	f043 0308 	orr.w	r3, r3, #8
    f678:	8623      	strh	r3, [r4, #48]	; 0x30
    f67a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    f67c:	2201      	movs	r2, #1
    f67e:	f362 1306 	bfi	r3, r2, #4, #3
    f682:	8623      	strh	r3, [r4, #48]	; 0x30
    f684:	9801      	ldr	r0, [sp, #4]
    f686:	f7fe ff21 	bl	e4cc <am_hal_interrupt_master_set>
    f68a:	f7fe ff1b 	bl	e4c4 <am_hal_interrupt_master_disable>
    f68e:	9002      	str	r0, [sp, #8]
    f690:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    f692:	f367 0300 	bfi	r3, r7, #0, #1
    f696:	8623      	strh	r3, [r4, #48]	; 0x30
    f698:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    f69a:	f367 2349 	bfi	r3, r7, #9, #1
    f69e:	8623      	strh	r3, [r4, #48]	; 0x30
    f6a0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    f6a2:	f367 2308 	bfi	r3, r7, #8, #1
    f6a6:	8623      	strh	r3, [r4, #48]	; 0x30
    f6a8:	9802      	ldr	r0, [sp, #8]
    f6aa:	f7fe ff0f 	bl	e4cc <am_hal_interrupt_master_set>
    f6ae:	4b5f      	ldr	r3, [pc, #380]	; (f82c <am_hal_uart_configure+0x1e8>)
    f6b0:	6832      	ldr	r2, [r6, #0]
    f6b2:	68db      	ldr	r3, [r3, #12]
    f6b4:	b2db      	uxtb	r3, r3
    f6b6:	2b12      	cmp	r3, #18
    f6b8:	d076      	beq.n	f7a8 <am_hal_uart_configure+0x164>
    f6ba:	4b5c      	ldr	r3, [pc, #368]	; (f82c <am_hal_uart_configure+0x1e8>)
    f6bc:	68db      	ldr	r3, [r3, #12]
    f6be:	b2db      	uxtb	r3, r3
    f6c0:	2b20      	cmp	r3, #32
    f6c2:	d902      	bls.n	f6ca <am_hal_uart_configure+0x86>
    f6c4:	4b5a      	ldr	r3, [pc, #360]	; (f830 <am_hal_uart_configure+0x1ec>)
    f6c6:	429a      	cmp	r2, r3
    f6c8:	d871      	bhi.n	f7ae <am_hal_uart_configure+0x16a>
    f6ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
    f6cc:	f3c3 1302 	ubfx	r3, r3, #4, #3
    f6d0:	3b01      	subs	r3, #1
    f6d2:	b2db      	uxtb	r3, r3
    f6d4:	2b03      	cmp	r3, #3
    f6d6:	d86c      	bhi.n	f7b2 <am_hal_uart_configure+0x16e>
    f6d8:	4956      	ldr	r1, [pc, #344]	; (f834 <am_hal_uart_configure+0x1f0>)
    f6da:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    f6de:	0112      	lsls	r2, r2, #4
    f6e0:	4291      	cmp	r1, r2
    f6e2:	ea4f 1381 	mov.w	r3, r1, lsl #6
    f6e6:	fbb1 f0f2 	udiv	r0, r1, r2
    f6ea:	fbb3 f3f2 	udiv	r3, r3, r2
    f6ee:	eba3 1380 	sub.w	r3, r3, r0, lsl #6
    f6f2:	d364      	bcc.n	f7be <am_hal_uart_configure+0x17a>
    f6f4:	6260      	str	r0, [r4, #36]	; 0x24
    f6f6:	6260      	str	r0, [r4, #36]	; 0x24
    f6f8:	62a3      	str	r3, [r4, #40]	; 0x28
    f6fa:	089b      	lsrs	r3, r3, #2
    f6fc:	eb03 1300 	add.w	r3, r3, r0, lsl #4
    f700:	fbb1 f3f3 	udiv	r3, r1, r3
    f704:	662b      	str	r3, [r5, #96]	; 0x60
    f706:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    f708:	f36f 338e 	bfc	r3, #14, #1
    f70c:	8623      	strh	r3, [r4, #48]	; 0x30
    f70e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    f710:	f36f 33cf 	bfc	r3, #15, #1
    f714:	8623      	strh	r3, [r4, #48]	; 0x30
    f716:	6933      	ldr	r3, [r6, #16]
    f718:	6b22      	ldr	r2, [r4, #48]	; 0x30
    f71a:	6971      	ldr	r1, [r6, #20]
    f71c:	431a      	orrs	r2, r3
    f71e:	6873      	ldr	r3, [r6, #4]
    f720:	6322      	str	r2, [r4, #48]	; 0x30
    f722:	68f2      	ldr	r2, [r6, #12]
    f724:	6361      	str	r1, [r4, #52]	; 0x34
    f726:	4313      	orrs	r3, r2
    f728:	68b2      	ldr	r2, [r6, #8]
    f72a:	4313      	orrs	r3, r2
    f72c:	f043 0310 	orr.w	r3, r3, #16
    f730:	62e3      	str	r3, [r4, #44]	; 0x2c
    f732:	f7fe fec7 	bl	e4c4 <am_hal_interrupt_master_disable>
    f736:	9003      	str	r0, [sp, #12]
    f738:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    f73a:	f043 0301 	orr.w	r3, r3, #1
    f73e:	8623      	strh	r3, [r4, #48]	; 0x30
    f740:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    f742:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    f746:	8623      	strh	r3, [r4, #48]	; 0x30
    f748:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    f74a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    f74e:	8623      	strh	r3, [r4, #48]	; 0x30
    f750:	9803      	ldr	r0, [sp, #12]
    f752:	f7fe febb 	bl	e4cc <am_hal_interrupt_master_set>
    f756:	682a      	ldr	r2, [r5, #0]
    f758:	4b33      	ldr	r3, [pc, #204]	; (f828 <am_hal_uart_configure+0x1e4>)
    f75a:	f022 487e 	bic.w	r8, r2, #4261412864	; 0xfe000000
    f75e:	4598      	cmp	r8, r3
    f760:	d11e      	bne.n	f7a0 <am_hal_uart_configure+0x15c>
    f762:	69b1      	ldr	r1, [r6, #24]
    f764:	e9d6 4708 	ldrd	r4, r7, [r6, #32]
    f768:	b109      	cbz	r1, f76e <am_hal_uart_configure+0x12a>
    f76a:	69f3      	ldr	r3, [r6, #28]
    f76c:	bb5b      	cbnz	r3, f7c6 <am_hal_uart_configure+0x182>
    f76e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f770:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    f774:	331c      	adds	r3, #28
    f776:	031b      	lsls	r3, r3, #12
    f778:	2200      	movs	r2, #0
    f77a:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
    f77e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    f780:	f022 0220 	bic.w	r2, r2, #32
    f784:	639a      	str	r2, [r3, #56]	; 0x38
    f786:	b10c      	cbz	r4, f78c <am_hal_uart_configure+0x148>
    f788:	2f00      	cmp	r7, #0
    f78a:	d132      	bne.n	f7f2 <am_hal_uart_configure+0x1ae>
    f78c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    f78e:	2000      	movs	r0, #0
    f790:	f022 0250 	bic.w	r2, r2, #80	; 0x50
    f794:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
    f798:	639a      	str	r2, [r3, #56]	; 0x38
    f79a:	b004      	add	sp, #16
    f79c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f7a0:	2000      	movs	r0, #0
    f7a2:	b004      	add	sp, #16
    f7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f7a8:	f5b2 2f61 	cmp.w	r2, #921600	; 0xe1000
    f7ac:	d985      	bls.n	f6ba <am_hal_uart_configure+0x76>
    f7ae:	4822      	ldr	r0, [pc, #136]	; (f838 <am_hal_uart_configure+0x1f4>)
    f7b0:	e7f3      	b.n	f79a <am_hal_uart_configure+0x156>
    f7b2:	4822      	ldr	r0, [pc, #136]	; (f83c <am_hal_uart_configure+0x1f8>)
    f7b4:	2300      	movs	r3, #0
    f7b6:	662b      	str	r3, [r5, #96]	; 0x60
    f7b8:	b004      	add	sp, #16
    f7ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f7be:	2300      	movs	r3, #0
    f7c0:	481d      	ldr	r0, [pc, #116]	; (f838 <am_hal_uart_configure+0x1f4>)
    f7c2:	662b      	str	r3, [r5, #96]	; 0x60
    f7c4:	e7e9      	b.n	f79a <am_hal_uart_configure+0x156>
    f7c6:	2201      	movs	r2, #1
    f7c8:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
    f7cc:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    f7d0:	f000 fd04 	bl	101dc <am_hal_queue_init>
    f7d4:	682b      	ldr	r3, [r5, #0]
    f7d6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f7da:	4543      	cmp	r3, r8
    f7dc:	d1e0      	bne.n	f7a0 <am_hal_uart_configure+0x15c>
    f7de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f7e0:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    f7e4:	331c      	adds	r3, #28
    f7e6:	031b      	lsls	r3, r3, #12
    f7e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    f7ea:	f042 0220 	orr.w	r2, r2, #32
    f7ee:	639a      	str	r2, [r3, #56]	; 0x38
    f7f0:	e7c9      	b.n	f786 <am_hal_uart_configure+0x142>
    f7f2:	2201      	movs	r2, #1
    f7f4:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
    f7f8:	463b      	mov	r3, r7
    f7fa:	4621      	mov	r1, r4
    f7fc:	f105 0048 	add.w	r0, r5, #72	; 0x48
    f800:	f000 fcec 	bl	101dc <am_hal_queue_init>
    f804:	682b      	ldr	r3, [r5, #0]
    f806:	4a08      	ldr	r2, [pc, #32]	; (f828 <am_hal_uart_configure+0x1e4>)
    f808:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f80c:	4293      	cmp	r3, r2
    f80e:	d1c7      	bne.n	f7a0 <am_hal_uart_configure+0x15c>
    f810:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f812:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    f816:	331c      	adds	r3, #28
    f818:	031b      	lsls	r3, r3, #12
    f81a:	2000      	movs	r0, #0
    f81c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    f81e:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    f822:	639a      	str	r2, [r3, #56]	; 0x38
    f824:	e7b9      	b.n	f79a <am_hal_uart_configure+0x156>
    f826:	bf00      	nop
    f828:	01ea9e06 	.word	0x01ea9e06
    f82c:	40020000 	.word	0x40020000
    f830:	0016e360 	.word	0x0016e360
    f834:	000107d8 	.word	0x000107d8
    f838:	08000003 	.word	0x08000003
    f83c:	08000002 	.word	0x08000002

0000f840 <am_hal_uart_transfer>:
    f840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f844:	ed2d 8b02 	vpush	{d8}
    f848:	680d      	ldr	r5, [r1, #0]
    f84a:	b091      	sub	sp, #68	; 0x44
    f84c:	4604      	mov	r4, r0
    f84e:	b14d      	cbz	r5, f864 <am_hal_uart_transfer+0x24>
    f850:	2d01      	cmp	r5, #1
    f852:	f000 808f 	beq.w	f974 <am_hal_uart_transfer+0x134>
    f856:	2507      	movs	r5, #7
    f858:	4628      	mov	r0, r5
    f85a:	b011      	add	sp, #68	; 0x44
    f85c:	ecbd 8b02 	vpop	{d8}
    f860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f864:	e9d1 b802 	ldrd	fp, r8, [r1, #8]
    f868:	684b      	ldr	r3, [r1, #4]
    f86a:	690a      	ldr	r2, [r1, #16]
    f86c:	9202      	str	r2, [sp, #8]
    f86e:	4618      	mov	r0, r3
    f870:	f1b8 0f00 	cmp.w	r8, #0
    f874:	f000 8111 	beq.w	fa9a <am_hal_uart_transfer+0x25a>
    f878:	f1bb 0f00 	cmp.w	fp, #0
    f87c:	f000 8172 	beq.w	fb64 <am_hal_uart_transfer+0x324>
    f880:	2c00      	cmp	r4, #0
    f882:	f000 8165 	beq.w	fb50 <am_hal_uart_transfer+0x310>
    f886:	46a9      	mov	r9, r5
    f888:	462f      	mov	r7, r5
    f88a:	9501      	str	r5, [sp, #4]
    f88c:	4625      	mov	r5, r4
    f88e:	4619      	mov	r1, r3
    f890:	682a      	ldr	r2, [r5, #0]
    f892:	461c      	mov	r4, r3
    f894:	4bad      	ldr	r3, [pc, #692]	; (fb4c <am_hal_uart_transfer+0x30c>)
    f896:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    f89a:	429a      	cmp	r2, r3
    f89c:	465e      	mov	r6, fp
    f89e:	d12d      	bne.n	f8fc <am_hal_uart_transfer+0xbc>
    f8a0:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    f8a4:	bb7a      	cbnz	r2, f906 <am_hal_uart_transfer+0xc6>
    f8a6:	1e48      	subs	r0, r1, #1
    f8a8:	6a69      	ldr	r1, [r5, #36]	; 0x24
    f8aa:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    f8ae:	311c      	adds	r1, #28
    f8b0:	0309      	lsls	r1, r1, #12
    f8b2:	698b      	ldr	r3, [r1, #24]
    f8b4:	069b      	lsls	r3, r3, #26
    f8b6:	d405      	bmi.n	f8c4 <am_hal_uart_transfer+0x84>
    f8b8:	3201      	adds	r2, #1
    f8ba:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    f8be:	600b      	str	r3, [r1, #0]
    f8c0:	4296      	cmp	r6, r2
    f8c2:	d8f6      	bhi.n	f8b2 <am_hal_uart_transfer+0x72>
    f8c4:	4417      	add	r7, r2
    f8c6:	1ab6      	subs	r6, r6, r2
    f8c8:	b936      	cbnz	r6, f8d8 <am_hal_uart_transfer+0x98>
    f8ca:	9d01      	ldr	r5, [sp, #4]
    f8cc:	9b02      	ldr	r3, [sp, #8]
    f8ce:	2b00      	cmp	r3, #0
    f8d0:	f000 808c 	beq.w	f9ec <am_hal_uart_transfer+0x1ac>
    f8d4:	601f      	str	r7, [r3, #0]
    f8d6:	e7bf      	b.n	f858 <am_hal_uart_transfer+0x18>
    f8d8:	2010      	movs	r0, #16
    f8da:	f7fe faff 	bl	dedc <am_hal_flash_delay>
    f8de:	f1b8 3fff 	cmp.w	r8, #4294967295
    f8e2:	bf18      	it	ne
    f8e4:	f109 0901 	addne.w	r9, r9, #1
    f8e8:	45c8      	cmp	r8, r9
    f8ea:	d9ee      	bls.n	f8ca <am_hal_uart_transfer+0x8a>
    f8ec:	682a      	ldr	r2, [r5, #0]
    f8ee:	4b97      	ldr	r3, [pc, #604]	; (fb4c <am_hal_uart_transfer+0x30c>)
    f8f0:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    f8f4:	429a      	cmp	r2, r3
    f8f6:	eb04 0107 	add.w	r1, r4, r7
    f8fa:	d0d1      	beq.n	f8a0 <am_hal_uart_transfer+0x60>
    f8fc:	9b02      	ldr	r3, [sp, #8]
    f8fe:	b103      	cbz	r3, f902 <am_hal_uart_transfer+0xc2>
    f900:	601f      	str	r7, [r3, #0]
    f902:	2502      	movs	r5, #2
    f904:	e7a8      	b.n	f858 <am_hal_uart_transfer+0x18>
    f906:	e9d5 020d 	ldrd	r0, r2, [r5, #52]	; 0x34
    f90a:	1a12      	subs	r2, r2, r0
    f90c:	42b2      	cmp	r2, r6
    f90e:	4613      	mov	r3, r2
    f910:	f105 0b2c 	add.w	fp, r5, #44	; 0x2c
    f914:	bf28      	it	cs
    f916:	4633      	movcs	r3, r6
    f918:	461a      	mov	r2, r3
    f91a:	4658      	mov	r0, fp
    f91c:	9303      	str	r3, [sp, #12]
    f91e:	f000 fc69 	bl	101f4 <am_hal_queue_item_add>
    f922:	f8d5 a024 	ldr.w	sl, [r5, #36]	; 0x24
    f926:	f7fe fdcd 	bl	e4c4 <am_hal_interrupt_master_disable>
    f92a:	f50a 2a80 	add.w	sl, sl, #262144	; 0x40000
    f92e:	f10a 0a1c 	add.w	sl, sl, #28
    f932:	9008      	str	r0, [sp, #32]
    f934:	ea4f 3a0a 	mov.w	sl, sl, lsl #12
    f938:	e00d      	b.n	f956 <am_hal_uart_transfer+0x116>
    f93a:	f000 fc99 	bl	10270 <am_hal_queue_item_get>
    f93e:	b190      	cbz	r0, f966 <am_hal_uart_transfer+0x126>
    f940:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    f942:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    f946:	321c      	adds	r2, #28
    f948:	0312      	lsls	r2, r2, #12
    f94a:	6993      	ldr	r3, [r2, #24]
    f94c:	0699      	lsls	r1, r3, #26
    f94e:	bf5c      	itt	pl
    f950:	f89d 301c 	ldrbpl.w	r3, [sp, #28]
    f954:	6013      	strpl	r3, [r2, #0]
    f956:	f8da 3018 	ldr.w	r3, [sl, #24]
    f95a:	069b      	lsls	r3, r3, #26
    f95c:	f04f 0201 	mov.w	r2, #1
    f960:	a907      	add	r1, sp, #28
    f962:	4658      	mov	r0, fp
    f964:	d5e9      	bpl.n	f93a <am_hal_uart_transfer+0xfa>
    f966:	9b03      	ldr	r3, [sp, #12]
    f968:	9808      	ldr	r0, [sp, #32]
    f96a:	441f      	add	r7, r3
    f96c:	1af6      	subs	r6, r6, r3
    f96e:	f7fe fdad 	bl	e4cc <am_hal_interrupt_master_set>
    f972:	e7a9      	b.n	f8c8 <am_hal_uart_transfer+0x88>
    f974:	68cd      	ldr	r5, [r1, #12]
    f976:	690b      	ldr	r3, [r1, #16]
    f978:	9301      	str	r3, [sp, #4]
    f97a:	e9d1 b701 	ldrd	fp, r7, [r1, #4]
    f97e:	2d00      	cmp	r5, #0
    f980:	f000 80b5 	beq.w	faee <am_hal_uart_transfer+0x2ae>
    f984:	2f00      	cmp	r7, #0
    f986:	f000 811e 	beq.w	fbc6 <am_hal_uart_transfer+0x386>
    f98a:	2800      	cmp	r0, #0
    f98c:	f000 80e7 	beq.w	fb5e <am_hal_uart_transfer+0x31e>
    f990:	6822      	ldr	r2, [r4, #0]
    f992:	f8df a1b8 	ldr.w	sl, [pc, #440]	; fb4c <am_hal_uart_transfer+0x30c>
    f996:	f100 0348 	add.w	r3, r0, #72	; 0x48
    f99a:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    f99e:	ee08 3a10 	vmov	s16, r3
    f9a2:	f04f 0900 	mov.w	r9, #0
    f9a6:	462b      	mov	r3, r5
    f9a8:	4552      	cmp	r2, sl
    f9aa:	46c8      	mov	r8, r9
    f9ac:	465d      	mov	r5, fp
    f9ae:	461e      	mov	r6, r3
    f9b0:	d133      	bne.n	fa1a <am_hal_uart_transfer+0x1da>
    f9b2:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    f9b6:	2a00      	cmp	r2, #0
    f9b8:	d137      	bne.n	fa2a <am_hal_uart_transfer+0x1ea>
    f9ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
    f9bc:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    f9c0:	311c      	adds	r1, #28
    f9c2:	1e68      	subs	r0, r5, #1
    f9c4:	0309      	lsls	r1, r1, #12
    f9c6:	698b      	ldr	r3, [r1, #24]
    f9c8:	06dd      	lsls	r5, r3, #27
    f9ca:	d408      	bmi.n	f9de <am_hal_uart_transfer+0x19e>
    f9cc:	680b      	ldr	r3, [r1, #0]
    f9ce:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    f9d2:	d15e      	bne.n	fa92 <am_hal_uart_transfer+0x252>
    f9d4:	3201      	adds	r2, #1
    f9d6:	4297      	cmp	r7, r2
    f9d8:	f800 3f01 	strb.w	r3, [r0, #1]!
    f9dc:	d8f3      	bhi.n	f9c6 <am_hal_uart_transfer+0x186>
    f9de:	4490      	add	r8, r2
    f9e0:	1abf      	subs	r7, r7, r2
    f9e2:	b957      	cbnz	r7, f9fa <am_hal_uart_transfer+0x1ba>
    f9e4:	9b01      	ldr	r3, [sp, #4]
    f9e6:	b10b      	cbz	r3, f9ec <am_hal_uart_transfer+0x1ac>
    f9e8:	f8c3 8000 	str.w	r8, [r3]
    f9ec:	2500      	movs	r5, #0
    f9ee:	4628      	mov	r0, r5
    f9f0:	b011      	add	sp, #68	; 0x44
    f9f2:	ecbd 8b02 	vpop	{d8}
    f9f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f9fa:	2010      	movs	r0, #16
    f9fc:	f7fe fa6e 	bl	dedc <am_hal_flash_delay>
    fa00:	1c73      	adds	r3, r6, #1
    fa02:	bf18      	it	ne
    fa04:	f109 0901 	addne.w	r9, r9, #1
    fa08:	454e      	cmp	r6, r9
    fa0a:	d9eb      	bls.n	f9e4 <am_hal_uart_transfer+0x1a4>
    fa0c:	6822      	ldr	r2, [r4, #0]
    fa0e:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    fa12:	4552      	cmp	r2, sl
    fa14:	eb0b 0508 	add.w	r5, fp, r8
    fa18:	d0cb      	beq.n	f9b2 <am_hal_uart_transfer+0x172>
    fa1a:	2502      	movs	r5, #2
    fa1c:	9b01      	ldr	r3, [sp, #4]
    fa1e:	2b00      	cmp	r3, #0
    fa20:	f43f af1a 	beq.w	f858 <am_hal_uart_transfer+0x18>
    fa24:	f8c3 8000 	str.w	r8, [r3]
    fa28:	e716      	b.n	f858 <am_hal_uart_transfer+0x18>
    fa2a:	f7fe fd4b 	bl	e4c4 <am_hal_interrupt_master_disable>
    fa2e:	9007      	str	r0, [sp, #28]
    fa30:	6a60      	ldr	r0, [r4, #36]	; 0x24
    fa32:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    fa36:	301c      	adds	r0, #28
    fa38:	0300      	lsls	r0, r0, #12
    fa3a:	f10d 0c20 	add.w	ip, sp, #32
    fa3e:	2200      	movs	r2, #0
    fa40:	6983      	ldr	r3, [r0, #24]
    fa42:	06db      	lsls	r3, r3, #27
    fa44:	d409      	bmi.n	fa5a <am_hal_uart_transfer+0x21a>
    fa46:	6803      	ldr	r3, [r0, #0]
    fa48:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    fa4c:	f102 0201 	add.w	r2, r2, #1
    fa50:	d119      	bne.n	fa86 <am_hal_uart_transfer+0x246>
    fa52:	2a20      	cmp	r2, #32
    fa54:	f80c 3b01 	strb.w	r3, [ip], #1
    fa58:	d1f2      	bne.n	fa40 <am_hal_uart_transfer+0x200>
    fa5a:	ee18 0a10 	vmov	r0, s16
    fa5e:	a908      	add	r1, sp, #32
    fa60:	f000 fbc8 	bl	101f4 <am_hal_queue_item_add>
    fa64:	2800      	cmp	r0, #0
    fa66:	d075      	beq.n	fb54 <am_hal_uart_transfer+0x314>
    fa68:	9807      	ldr	r0, [sp, #28]
    fa6a:	f7fe fd2f 	bl	e4cc <am_hal_interrupt_master_set>
    fa6e:	6d22      	ldr	r2, [r4, #80]	; 0x50
    fa70:	42ba      	cmp	r2, r7
    fa72:	bf28      	it	cs
    fa74:	463a      	movcs	r2, r7
    fa76:	ee18 0a10 	vmov	r0, s16
    fa7a:	4629      	mov	r1, r5
    fa7c:	4490      	add	r8, r2
    fa7e:	1abf      	subs	r7, r7, r2
    fa80:	f000 fbf6 	bl	10270 <am_hal_queue_item_get>
    fa84:	e7ad      	b.n	f9e2 <am_hal_uart_transfer+0x1a2>
    fa86:	9807      	ldr	r0, [sp, #28]
    fa88:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    fa8c:	f7fe fd1e 	bl	e4cc <am_hal_interrupt_master_set>
    fa90:	e7c4      	b.n	fa1c <am_hal_uart_transfer+0x1dc>
    fa92:	4490      	add	r8, r2
    fa94:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    fa98:	e7c0      	b.n	fa1c <am_hal_uart_transfer+0x1dc>
    fa9a:	2c00      	cmp	r4, #0
    fa9c:	f43f af31 	beq.w	f902 <am_hal_uart_transfer+0xc2>
    faa0:	6822      	ldr	r2, [r4, #0]
    faa2:	492a      	ldr	r1, [pc, #168]	; (fb4c <am_hal_uart_transfer+0x30c>)
    faa4:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    faa8:	428a      	cmp	r2, r1
    faaa:	f47f af2a 	bne.w	f902 <am_hal_uart_transfer+0xc2>
    faae:	9b02      	ldr	r3, [sp, #8]
    fab0:	b10b      	cbz	r3, fab6 <am_hal_uart_transfer+0x276>
    fab2:	f8c3 8000 	str.w	r8, [r3]
    fab6:	f1bb 0f00 	cmp.w	fp, #0
    faba:	d097      	beq.n	f9ec <am_hal_uart_transfer+0x1ac>
    fabc:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
    fac0:	2d00      	cmp	r5, #0
    fac2:	d151      	bne.n	fb68 <am_hal_uart_transfer+0x328>
    fac4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    fac6:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    faca:	311c      	adds	r1, #28
    facc:	1e42      	subs	r2, r0, #1
    face:	0309      	lsls	r1, r1, #12
    fad0:	698b      	ldr	r3, [r1, #24]
    fad2:	0698      	lsls	r0, r3, #26
    fad4:	d405      	bmi.n	fae2 <am_hal_uart_transfer+0x2a2>
    fad6:	3501      	adds	r5, #1
    fad8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    fadc:	600b      	str	r3, [r1, #0]
    fade:	45ab      	cmp	fp, r5
    fae0:	d1f6      	bne.n	fad0 <am_hal_uart_transfer+0x290>
    fae2:	9b02      	ldr	r3, [sp, #8]
    fae4:	2b00      	cmp	r3, #0
    fae6:	d081      	beq.n	f9ec <am_hal_uart_transfer+0x1ac>
    fae8:	601d      	str	r5, [r3, #0]
    faea:	2500      	movs	r5, #0
    faec:	e6b4      	b.n	f858 <am_hal_uart_transfer+0x18>
    faee:	2800      	cmp	r0, #0
    faf0:	f43f af07 	beq.w	f902 <am_hal_uart_transfer+0xc2>
    faf4:	6802      	ldr	r2, [r0, #0]
    faf6:	4915      	ldr	r1, [pc, #84]	; (fb4c <am_hal_uart_transfer+0x30c>)
    faf8:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    fafc:	428a      	cmp	r2, r1
    fafe:	f47f af00 	bne.w	f902 <am_hal_uart_transfer+0xc2>
    fb02:	b103      	cbz	r3, fb06 <am_hal_uart_transfer+0x2c6>
    fb04:	601d      	str	r5, [r3, #0]
    fb06:	2f00      	cmp	r7, #0
    fb08:	f43f af70 	beq.w	f9ec <am_hal_uart_transfer+0x1ac>
    fb0c:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    fb10:	2a00      	cmp	r2, #0
    fb12:	d15a      	bne.n	fbca <am_hal_uart_transfer+0x38a>
    fb14:	6a61      	ldr	r1, [r4, #36]	; 0x24
    fb16:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    fb1a:	311c      	adds	r1, #28
    fb1c:	f10b 33ff 	add.w	r3, fp, #4294967295
    fb20:	0309      	lsls	r1, r1, #12
    fb22:	4614      	mov	r4, r2
    fb24:	698a      	ldr	r2, [r1, #24]
    fb26:	06d2      	lsls	r2, r2, #27
    fb28:	d409      	bmi.n	fb3e <am_hal_uart_transfer+0x2fe>
    fb2a:	680a      	ldr	r2, [r1, #0]
    fb2c:	f412 6070 	ands.w	r0, r2, #3840	; 0xf00
    fb30:	d176      	bne.n	fc20 <am_hal_uart_transfer+0x3e0>
    fb32:	3401      	adds	r4, #1
    fb34:	42a7      	cmp	r7, r4
    fb36:	f803 2f01 	strb.w	r2, [r3, #1]!
    fb3a:	d1f3      	bne.n	fb24 <am_hal_uart_transfer+0x2e4>
    fb3c:	4605      	mov	r5, r0
    fb3e:	9b01      	ldr	r3, [sp, #4]
    fb40:	2b00      	cmp	r3, #0
    fb42:	f43f ae89 	beq.w	f858 <am_hal_uart_transfer+0x18>
    fb46:	601c      	str	r4, [r3, #0]
    fb48:	e686      	b.n	f858 <am_hal_uart_transfer+0x18>
    fb4a:	bf00      	nop
    fb4c:	01ea9e06 	.word	0x01ea9e06
    fb50:	4627      	mov	r7, r4
    fb52:	e6d3      	b.n	f8fc <am_hal_uart_transfer+0xbc>
    fb54:	9807      	ldr	r0, [sp, #28]
    fb56:	4d39      	ldr	r5, [pc, #228]	; (fc3c <am_hal_uart_transfer+0x3fc>)
    fb58:	f7fe fcb8 	bl	e4cc <am_hal_interrupt_master_set>
    fb5c:	e75e      	b.n	fa1c <am_hal_uart_transfer+0x1dc>
    fb5e:	2502      	movs	r5, #2
    fb60:	4680      	mov	r8, r0
    fb62:	e75b      	b.n	fa1c <am_hal_uart_transfer+0x1dc>
    fb64:	462f      	mov	r7, r5
    fb66:	e6b1      	b.n	f8cc <am_hal_uart_transfer+0x8c>
    fb68:	6b65      	ldr	r5, [r4, #52]	; 0x34
    fb6a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    fb6c:	1b52      	subs	r2, r2, r5
    fb6e:	455a      	cmp	r2, fp
    fb70:	f104 072c 	add.w	r7, r4, #44	; 0x2c
    fb74:	4601      	mov	r1, r0
    fb76:	bf28      	it	cs
    fb78:	465a      	movcs	r2, fp
    fb7a:	4638      	mov	r0, r7
    fb7c:	4615      	mov	r5, r2
    fb7e:	f000 fb39 	bl	101f4 <am_hal_queue_item_add>
    fb82:	6a66      	ldr	r6, [r4, #36]	; 0x24
    fb84:	f7fe fc9e 	bl	e4c4 <am_hal_interrupt_master_disable>
    fb88:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
    fb8c:	361c      	adds	r6, #28
    fb8e:	9005      	str	r0, [sp, #20]
    fb90:	0336      	lsls	r6, r6, #12
    fb92:	e00f      	b.n	fbb4 <am_hal_uart_transfer+0x374>
    fb94:	a908      	add	r1, sp, #32
    fb96:	4638      	mov	r0, r7
    fb98:	f000 fb6a 	bl	10270 <am_hal_queue_item_get>
    fb9c:	b178      	cbz	r0, fbbe <am_hal_uart_transfer+0x37e>
    fb9e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    fba0:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    fba4:	321c      	adds	r2, #28
    fba6:	0312      	lsls	r2, r2, #12
    fba8:	6993      	ldr	r3, [r2, #24]
    fbaa:	0699      	lsls	r1, r3, #26
    fbac:	bf5c      	itt	pl
    fbae:	f89d 3020 	ldrbpl.w	r3, [sp, #32]
    fbb2:	6013      	strpl	r3, [r2, #0]
    fbb4:	69b3      	ldr	r3, [r6, #24]
    fbb6:	069b      	lsls	r3, r3, #26
    fbb8:	f04f 0201 	mov.w	r2, #1
    fbbc:	d5ea      	bpl.n	fb94 <am_hal_uart_transfer+0x354>
    fbbe:	9805      	ldr	r0, [sp, #20]
    fbc0:	f7fe fc84 	bl	e4cc <am_hal_interrupt_master_set>
    fbc4:	e78d      	b.n	fae2 <am_hal_uart_transfer+0x2a2>
    fbc6:	46b8      	mov	r8, r7
    fbc8:	e70c      	b.n	f9e4 <am_hal_uart_transfer+0x1a4>
    fbca:	f7fe fc7b 	bl	e4c4 <am_hal_interrupt_master_disable>
    fbce:	6a61      	ldr	r1, [r4, #36]	; 0x24
    fbd0:	9006      	str	r0, [sp, #24]
    fbd2:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    fbd6:	311c      	adds	r1, #28
    fbd8:	0309      	lsls	r1, r1, #12
    fbda:	ae08      	add	r6, sp, #32
    fbdc:	2200      	movs	r2, #0
    fbde:	698b      	ldr	r3, [r1, #24]
    fbe0:	06d8      	lsls	r0, r3, #27
    fbe2:	d409      	bmi.n	fbf8 <am_hal_uart_transfer+0x3b8>
    fbe4:	680b      	ldr	r3, [r1, #0]
    fbe6:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    fbea:	f102 0201 	add.w	r2, r2, #1
    fbee:	d11a      	bne.n	fc26 <am_hal_uart_transfer+0x3e6>
    fbf0:	2a20      	cmp	r2, #32
    fbf2:	f806 3b01 	strb.w	r3, [r6], #1
    fbf6:	d1f2      	bne.n	fbde <am_hal_uart_transfer+0x39e>
    fbf8:	f104 0648 	add.w	r6, r4, #72	; 0x48
    fbfc:	a908      	add	r1, sp, #32
    fbfe:	4630      	mov	r0, r6
    fc00:	f000 faf8 	bl	101f4 <am_hal_queue_item_add>
    fc04:	b1a8      	cbz	r0, fc32 <am_hal_uart_transfer+0x3f2>
    fc06:	9806      	ldr	r0, [sp, #24]
    fc08:	f7fe fc60 	bl	e4cc <am_hal_interrupt_master_set>
    fc0c:	6d24      	ldr	r4, [r4, #80]	; 0x50
    fc0e:	42bc      	cmp	r4, r7
    fc10:	bf28      	it	cs
    fc12:	463c      	movcs	r4, r7
    fc14:	4659      	mov	r1, fp
    fc16:	4630      	mov	r0, r6
    fc18:	4622      	mov	r2, r4
    fc1a:	f000 fb29 	bl	10270 <am_hal_queue_item_get>
    fc1e:	e78e      	b.n	fb3e <am_hal_uart_transfer+0x2fe>
    fc20:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    fc24:	e78b      	b.n	fb3e <am_hal_uart_transfer+0x2fe>
    fc26:	9806      	ldr	r0, [sp, #24]
    fc28:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    fc2c:	f7fe fc4e 	bl	e4cc <am_hal_interrupt_master_set>
    fc30:	e612      	b.n	f858 <am_hal_uart_transfer+0x18>
    fc32:	9806      	ldr	r0, [sp, #24]
    fc34:	4d01      	ldr	r5, [pc, #4]	; (fc3c <am_hal_uart_transfer+0x3fc>)
    fc36:	f7fe fc49 	bl	e4cc <am_hal_interrupt_master_set>
    fc3a:	e60d      	b.n	f858 <am_hal_uart_transfer+0x18>
    fc3c:	08000001 	.word	0x08000001

0000fc40 <am_hal_uart_interrupt_service>:
    fc40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fc44:	4680      	mov	r8, r0
    fc46:	484a      	ldr	r0, [pc, #296]	; (fd70 <am_hal_uart_interrupt_service+0x130>)
    fc48:	f8d8 3000 	ldr.w	r3, [r8]
    fc4c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fc50:	4283      	cmp	r3, r0
    fc52:	b08a      	sub	sp, #40	; 0x28
    fc54:	d126      	bne.n	fca4 <am_hal_uart_interrupt_service+0x64>
    fc56:	f011 0f50 	tst.w	r1, #80	; 0x50
    fc5a:	f8d8 5024 	ldr.w	r5, [r8, #36]	; 0x24
    fc5e:	460e      	mov	r6, r1
    fc60:	4614      	mov	r4, r2
    fc62:	d002      	beq.n	fc6a <am_hal_uart_interrupt_service+0x2a>
    fc64:	f898 3044 	ldrb.w	r3, [r8, #68]	; 0x44
    fc68:	bb6b      	cbnz	r3, fcc6 <am_hal_uart_interrupt_service+0x86>
    fc6a:	06b6      	lsls	r6, r6, #26
    fc6c:	d40a      	bmi.n	fc84 <am_hal_uart_interrupt_service+0x44>
    fc6e:	b12c      	cbz	r4, fc7c <am_hal_uart_interrupt_service+0x3c>
    fc70:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
    fc74:	b163      	cbz	r3, fc90 <am_hal_uart_interrupt_service+0x50>
    fc76:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
    fc7a:	b1bb      	cbz	r3, fcac <am_hal_uart_interrupt_service+0x6c>
    fc7c:	2000      	movs	r0, #0
    fc7e:	b00a      	add	sp, #40	; 0x28
    fc80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fc84:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
    fc88:	2b00      	cmp	r3, #0
    fc8a:	d13e      	bne.n	fd0a <am_hal_uart_interrupt_service+0xca>
    fc8c:	2c00      	cmp	r4, #0
    fc8e:	d0f5      	beq.n	fc7c <am_hal_uart_interrupt_service+0x3c>
    fc90:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    fc94:	351c      	adds	r5, #28
    fc96:	032d      	lsls	r5, r5, #12
    fc98:	69ab      	ldr	r3, [r5, #24]
    fc9a:	071b      	lsls	r3, r3, #28
    fc9c:	d40e      	bmi.n	fcbc <am_hal_uart_interrupt_service+0x7c>
    fc9e:	2301      	movs	r3, #1
    fca0:	6023      	str	r3, [r4, #0]
    fca2:	e7eb      	b.n	fc7c <am_hal_uart_interrupt_service+0x3c>
    fca4:	2002      	movs	r0, #2
    fca6:	b00a      	add	sp, #40	; 0x28
    fca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fcac:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    fcb0:	351c      	adds	r5, #28
    fcb2:	032d      	lsls	r5, r5, #12
    fcb4:	69ab      	ldr	r3, [r5, #24]
    fcb6:	071a      	lsls	r2, r3, #28
    fcb8:	d4e0      	bmi.n	fc7c <am_hal_uart_interrupt_service+0x3c>
    fcba:	e7f0      	b.n	fc9e <am_hal_uart_interrupt_service+0x5e>
    fcbc:	2000      	movs	r0, #0
    fcbe:	6020      	str	r0, [r4, #0]
    fcc0:	b00a      	add	sp, #40	; 0x28
    fcc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fcc6:	f7fe fbfd 	bl	e4c4 <am_hal_interrupt_master_disable>
    fcca:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
    fcce:	9001      	str	r0, [sp, #4]
    fcd0:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    fcd4:	311c      	adds	r1, #28
    fcd6:	0309      	lsls	r1, r1, #12
    fcd8:	a802      	add	r0, sp, #8
    fcda:	2200      	movs	r2, #0
    fcdc:	698b      	ldr	r3, [r1, #24]
    fcde:	06df      	lsls	r7, r3, #27
    fce0:	d409      	bmi.n	fcf6 <am_hal_uart_interrupt_service+0xb6>
    fce2:	680b      	ldr	r3, [r1, #0]
    fce4:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    fce8:	f102 0201 	add.w	r2, r2, #1
    fcec:	d134      	bne.n	fd58 <am_hal_uart_interrupt_service+0x118>
    fcee:	2a20      	cmp	r2, #32
    fcf0:	f800 3b01 	strb.w	r3, [r0], #1
    fcf4:	d1f2      	bne.n	fcdc <am_hal_uart_interrupt_service+0x9c>
    fcf6:	a902      	add	r1, sp, #8
    fcf8:	f108 0048 	add.w	r0, r8, #72	; 0x48
    fcfc:	f000 fa7a 	bl	101f4 <am_hal_queue_item_add>
    fd00:	b380      	cbz	r0, fd64 <am_hal_uart_interrupt_service+0x124>
    fd02:	9801      	ldr	r0, [sp, #4]
    fd04:	f7fe fbe2 	bl	e4cc <am_hal_interrupt_master_set>
    fd08:	e7af      	b.n	fc6a <am_hal_uart_interrupt_service+0x2a>
    fd0a:	f8d8 6024 	ldr.w	r6, [r8, #36]	; 0x24
    fd0e:	f7fe fbd9 	bl	e4c4 <am_hal_interrupt_master_disable>
    fd12:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
    fd16:	361c      	adds	r6, #28
    fd18:	9002      	str	r0, [sp, #8]
    fd1a:	0336      	lsls	r6, r6, #12
    fd1c:	f108 072c 	add.w	r7, r8, #44	; 0x2c
    fd20:	e011      	b.n	fd46 <am_hal_uart_interrupt_service+0x106>
    fd22:	f10d 0103 	add.w	r1, sp, #3
    fd26:	4638      	mov	r0, r7
    fd28:	f000 faa2 	bl	10270 <am_hal_queue_item_get>
    fd2c:	b180      	cbz	r0, fd50 <am_hal_uart_interrupt_service+0x110>
    fd2e:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
    fd32:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    fd36:	311c      	adds	r1, #28
    fd38:	0309      	lsls	r1, r1, #12
    fd3a:	698b      	ldr	r3, [r1, #24]
    fd3c:	0698      	lsls	r0, r3, #26
    fd3e:	bf5c      	itt	pl
    fd40:	f89d 3003 	ldrbpl.w	r3, [sp, #3]
    fd44:	600b      	strpl	r3, [r1, #0]
    fd46:	69b3      	ldr	r3, [r6, #24]
    fd48:	0699      	lsls	r1, r3, #26
    fd4a:	f04f 0201 	mov.w	r2, #1
    fd4e:	d5e8      	bpl.n	fd22 <am_hal_uart_interrupt_service+0xe2>
    fd50:	9802      	ldr	r0, [sp, #8]
    fd52:	f7fe fbbb 	bl	e4cc <am_hal_interrupt_master_set>
    fd56:	e78a      	b.n	fc6e <am_hal_uart_interrupt_service+0x2e>
    fd58:	9801      	ldr	r0, [sp, #4]
    fd5a:	f7fe fbb7 	bl	e4cc <am_hal_interrupt_master_set>
    fd5e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    fd62:	e78c      	b.n	fc7e <am_hal_uart_interrupt_service+0x3e>
    fd64:	9801      	ldr	r0, [sp, #4]
    fd66:	f7fe fbb1 	bl	e4cc <am_hal_interrupt_master_set>
    fd6a:	4802      	ldr	r0, [pc, #8]	; (fd74 <am_hal_uart_interrupt_service+0x134>)
    fd6c:	e787      	b.n	fc7e <am_hal_uart_interrupt_service+0x3e>
    fd6e:	bf00      	nop
    fd70:	01ea9e06 	.word	0x01ea9e06
    fd74:	08000001 	.word	0x08000001

0000fd78 <am_hal_uart_interrupt_enable>:
    fd78:	6803      	ldr	r3, [r0, #0]
    fd7a:	4a08      	ldr	r2, [pc, #32]	; (fd9c <am_hal_uart_interrupt_enable+0x24>)
    fd7c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fd80:	4293      	cmp	r3, r2
    fd82:	d109      	bne.n	fd98 <am_hal_uart_interrupt_enable+0x20>
    fd84:	6a43      	ldr	r3, [r0, #36]	; 0x24
    fd86:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fd8a:	331c      	adds	r3, #28
    fd8c:	031b      	lsls	r3, r3, #12
    fd8e:	2000      	movs	r0, #0
    fd90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    fd92:	4311      	orrs	r1, r2
    fd94:	6399      	str	r1, [r3, #56]	; 0x38
    fd96:	4770      	bx	lr
    fd98:	2002      	movs	r0, #2
    fd9a:	4770      	bx	lr
    fd9c:	01ea9e06 	.word	0x01ea9e06

0000fda0 <am_hal_uart_interrupt_clear>:
    fda0:	6803      	ldr	r3, [r0, #0]
    fda2:	4a07      	ldr	r2, [pc, #28]	; (fdc0 <am_hal_uart_interrupt_clear+0x20>)
    fda4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fda8:	4293      	cmp	r3, r2
    fdaa:	d107      	bne.n	fdbc <am_hal_uart_interrupt_clear+0x1c>
    fdac:	6a43      	ldr	r3, [r0, #36]	; 0x24
    fdae:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fdb2:	331c      	adds	r3, #28
    fdb4:	031b      	lsls	r3, r3, #12
    fdb6:	2000      	movs	r0, #0
    fdb8:	6459      	str	r1, [r3, #68]	; 0x44
    fdba:	4770      	bx	lr
    fdbc:	2002      	movs	r0, #2
    fdbe:	4770      	bx	lr
    fdc0:	01ea9e06 	.word	0x01ea9e06

0000fdc4 <am_hal_uart_interrupt_status_get>:
    fdc4:	6803      	ldr	r3, [r0, #0]
    fdc6:	b410      	push	{r4}
    fdc8:	4c0b      	ldr	r4, [pc, #44]	; (fdf8 <am_hal_uart_interrupt_status_get+0x34>)
    fdca:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fdce:	42a3      	cmp	r3, r4
    fdd0:	d10d      	bne.n	fdee <am_hal_uart_interrupt_status_get+0x2a>
    fdd2:	6a43      	ldr	r3, [r0, #36]	; 0x24
    fdd4:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fdd8:	331c      	adds	r3, #28
    fdda:	031b      	lsls	r3, r3, #12
    fddc:	b92a      	cbnz	r2, fdea <am_hal_uart_interrupt_status_get+0x26>
    fdde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    fde0:	f85d 4b04 	ldr.w	r4, [sp], #4
    fde4:	600b      	str	r3, [r1, #0]
    fde6:	2000      	movs	r0, #0
    fde8:	4770      	bx	lr
    fdea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    fdec:	e7f8      	b.n	fde0 <am_hal_uart_interrupt_status_get+0x1c>
    fdee:	2002      	movs	r0, #2
    fdf0:	f85d 4b04 	ldr.w	r4, [sp], #4
    fdf4:	4770      	bx	lr
    fdf6:	bf00      	nop
    fdf8:	01ea9e06 	.word	0x01ea9e06

0000fdfc <am_hal_cachectrl_control>:
    fdfc:	b510      	push	{r4, lr}
    fdfe:	3801      	subs	r0, #1
    fe00:	b08e      	sub	sp, #56	; 0x38
    fe02:	2810      	cmp	r0, #16
    fe04:	f200 815e 	bhi.w	100c4 <am_hal_cachectrl_control+0x2c8>
    fe08:	e8df f010 	tbh	[pc, r0, lsl #1]
    fe0c:	00360018 	.word	0x00360018
    fe10:	0040003d 	.word	0x0040003d
    fe14:	00450043 	.word	0x00450043
    fe18:	0011001a 	.word	0x0011001a
    fe1c:	00540047 	.word	0x00540047
    fe20:	009a0061 	.word	0x009a0061
    fe24:	010c00d3 	.word	0x010c00d3
    fe28:	013f0126 	.word	0x013f0126
    fe2c:	001d      	.short	0x001d
    fe2e:	f44f 7300 	mov.w	r3, #512	; 0x200
    fe32:	4aac      	ldr	r2, [pc, #688]	; (100e4 <am_hal_cachectrl_control+0x2e8>)
    fe34:	2000      	movs	r0, #0
    fe36:	6093      	str	r3, [r2, #8]
    fe38:	b00e      	add	sp, #56	; 0x38
    fe3a:	bd10      	pop	{r4, pc}
    fe3c:	2301      	movs	r3, #1
    fe3e:	e7f8      	b.n	fe32 <am_hal_cachectrl_control+0x36>
    fe40:	f44f 6380 	mov.w	r3, #1024	; 0x400
    fe44:	e7f5      	b.n	fe32 <am_hal_cachectrl_control+0x36>
    fe46:	2900      	cmp	r1, #0
    fe48:	f000 813c 	beq.w	100c4 <am_hal_cachectrl_control+0x2c8>
    fe4c:	684a      	ldr	r2, [r1, #4]
    fe4e:	48a6      	ldr	r0, [pc, #664]	; (100e8 <am_hal_cachectrl_control+0x2ec>)
    fe50:	4202      	tst	r2, r0
    fe52:	f040 8137 	bne.w	100c4 <am_hal_cachectrl_control+0x2c8>
    fe56:	688b      	ldr	r3, [r1, #8]
    fe58:	4018      	ands	r0, r3
    fe5a:	f040 8133 	bne.w	100c4 <am_hal_cachectrl_control+0x2c8>
    fe5e:	780c      	ldrb	r4, [r1, #0]
    fe60:	2c00      	cmp	r4, #0
    fe62:	f040 8133 	bne.w	100cc <am_hal_cachectrl_control+0x2d0>
    fe66:	4c9f      	ldr	r4, [pc, #636]	; (100e4 <am_hal_cachectrl_control+0x2e8>)
    fe68:	7849      	ldrb	r1, [r1, #1]
    fe6a:	6122      	str	r2, [r4, #16]
    fe6c:	6163      	str	r3, [r4, #20]
    fe6e:	6823      	ldr	r3, [r4, #0]
    fe70:	f361 0382 	bfi	r3, r1, #2, #1
    fe74:	6023      	str	r3, [r4, #0]
    fe76:	e7df      	b.n	fe38 <am_hal_cachectrl_control+0x3c>
    fe78:	4b9a      	ldr	r3, [pc, #616]	; (100e4 <am_hal_cachectrl_control+0x2e8>)
    fe7a:	681b      	ldr	r3, [r3, #0]
    fe7c:	01db      	lsls	r3, r3, #7
    fe7e:	f140 811f 	bpl.w	100c0 <am_hal_cachectrl_control+0x2c4>
    fe82:	2302      	movs	r3, #2
    fe84:	e7d5      	b.n	fe32 <am_hal_cachectrl_control+0x36>
    fe86:	f44f 6388 	mov.w	r3, #1088	; 0x440
    fe8a:	e7d2      	b.n	fe32 <am_hal_cachectrl_control+0x36>
    fe8c:	f44f 7308 	mov.w	r3, #544	; 0x220
    fe90:	e7cf      	b.n	fe32 <am_hal_cachectrl_control+0x36>
    fe92:	2340      	movs	r3, #64	; 0x40
    fe94:	e7cd      	b.n	fe32 <am_hal_cachectrl_control+0x36>
    fe96:	2320      	movs	r3, #32
    fe98:	e7cb      	b.n	fe32 <am_hal_cachectrl_control+0x36>
    fe9a:	f7fe fb13 	bl	e4c4 <am_hal_interrupt_master_disable>
    fe9e:	4a91      	ldr	r2, [pc, #580]	; (100e4 <am_hal_cachectrl_control+0x2e8>)
    fea0:	9000      	str	r0, [sp, #0]
    fea2:	6813      	ldr	r3, [r2, #0]
    fea4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    fea8:	6013      	str	r3, [r2, #0]
    feaa:	9800      	ldr	r0, [sp, #0]
    feac:	f7fe fb0e 	bl	e4cc <am_hal_interrupt_master_set>
    feb0:	2000      	movs	r0, #0
    feb2:	e7c1      	b.n	fe38 <am_hal_cachectrl_control+0x3c>
    feb4:	f7fe fb06 	bl	e4c4 <am_hal_interrupt_master_disable>
    feb8:	4a8a      	ldr	r2, [pc, #552]	; (100e4 <am_hal_cachectrl_control+0x2e8>)
    feba:	9001      	str	r0, [sp, #4]
    febc:	6813      	ldr	r3, [r2, #0]
    febe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    fec2:	6013      	str	r3, [r2, #0]
    fec4:	9801      	ldr	r0, [sp, #4]
    fec6:	f7fe fb01 	bl	e4cc <am_hal_interrupt_master_set>
    feca:	2000      	movs	r0, #0
    fecc:	e7b4      	b.n	fe38 <am_hal_cachectrl_control+0x3c>
    fece:	f7fe faf9 	bl	e4c4 <am_hal_interrupt_master_disable>
    fed2:	4603      	mov	r3, r0
    fed4:	4885      	ldr	r0, [pc, #532]	; (100ec <am_hal_cachectrl_control+0x2f0>)
    fed6:	9302      	str	r3, [sp, #8]
    fed8:	f7fe f86e 	bl	dfb8 <am_hal_flash_load_ui32>
    fedc:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    fee0:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    fee4:	4881      	ldr	r0, [pc, #516]	; (100ec <am_hal_cachectrl_control+0x2f0>)
    fee6:	f7fe f86b 	bl	dfc0 <am_hal_flash_store_ui32>
    feea:	9802      	ldr	r0, [sp, #8]
    feec:	f7fe faee 	bl	e4cc <am_hal_interrupt_master_set>
    fef0:	f7fe fae8 	bl	e4c4 <am_hal_interrupt_master_disable>
    fef4:	4603      	mov	r3, r0
    fef6:	487d      	ldr	r0, [pc, #500]	; (100ec <am_hal_cachectrl_control+0x2f0>)
    fef8:	9303      	str	r3, [sp, #12]
    fefa:	f7fe f85d 	bl	dfb8 <am_hal_flash_load_ui32>
    fefe:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    ff02:	f440 61ee 	orr.w	r1, r0, #1904	; 0x770
    ff06:	4879      	ldr	r0, [pc, #484]	; (100ec <am_hal_cachectrl_control+0x2f0>)
    ff08:	f7fe f85a 	bl	dfc0 <am_hal_flash_store_ui32>
    ff0c:	9803      	ldr	r0, [sp, #12]
    ff0e:	f7fe fadd 	bl	e4cc <am_hal_interrupt_master_set>
    ff12:	f7fe fad7 	bl	e4c4 <am_hal_interrupt_master_disable>
    ff16:	4603      	mov	r3, r0
    ff18:	4874      	ldr	r0, [pc, #464]	; (100ec <am_hal_cachectrl_control+0x2f0>)
    ff1a:	9304      	str	r3, [sp, #16]
    ff1c:	f7fe f84c 	bl	dfb8 <am_hal_flash_load_ui32>
    ff20:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    ff24:	f020 000f 	bic.w	r0, r0, #15
    ff28:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    ff2c:	f041 0103 	orr.w	r1, r1, #3
    ff30:	486e      	ldr	r0, [pc, #440]	; (100ec <am_hal_cachectrl_control+0x2f0>)
    ff32:	f7fe f845 	bl	dfc0 <am_hal_flash_store_ui32>
    ff36:	9804      	ldr	r0, [sp, #16]
    ff38:	f7fe fac8 	bl	e4cc <am_hal_interrupt_master_set>
    ff3c:	2000      	movs	r0, #0
    ff3e:	e77b      	b.n	fe38 <am_hal_cachectrl_control+0x3c>
    ff40:	f7fe fac0 	bl	e4c4 <am_hal_interrupt_master_disable>
    ff44:	4603      	mov	r3, r0
    ff46:	4869      	ldr	r0, [pc, #420]	; (100ec <am_hal_cachectrl_control+0x2f0>)
    ff48:	9305      	str	r3, [sp, #20]
    ff4a:	f7fe f835 	bl	dfb8 <am_hal_flash_load_ui32>
    ff4e:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    ff52:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    ff56:	4865      	ldr	r0, [pc, #404]	; (100ec <am_hal_cachectrl_control+0x2f0>)
    ff58:	f7fe f832 	bl	dfc0 <am_hal_flash_store_ui32>
    ff5c:	9805      	ldr	r0, [sp, #20]
    ff5e:	f7fe fab5 	bl	e4cc <am_hal_interrupt_master_set>
    ff62:	f7fe faaf 	bl	e4c4 <am_hal_interrupt_master_disable>
    ff66:	4603      	mov	r3, r0
    ff68:	4860      	ldr	r0, [pc, #384]	; (100ec <am_hal_cachectrl_control+0x2f0>)
    ff6a:	9306      	str	r3, [sp, #24]
    ff6c:	f7fe f824 	bl	dfb8 <am_hal_flash_load_ui32>
    ff70:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    ff74:	f440 61ea 	orr.w	r1, r0, #1872	; 0x750
    ff78:	485c      	ldr	r0, [pc, #368]	; (100ec <am_hal_cachectrl_control+0x2f0>)
    ff7a:	f7fe f821 	bl	dfc0 <am_hal_flash_store_ui32>
    ff7e:	9806      	ldr	r0, [sp, #24]
    ff80:	f7fe faa4 	bl	e4cc <am_hal_interrupt_master_set>
    ff84:	f7fe fa9e 	bl	e4c4 <am_hal_interrupt_master_disable>
    ff88:	4603      	mov	r3, r0
    ff8a:	4858      	ldr	r0, [pc, #352]	; (100ec <am_hal_cachectrl_control+0x2f0>)
    ff8c:	9307      	str	r3, [sp, #28]
    ff8e:	f7fe f813 	bl	dfb8 <am_hal_flash_load_ui32>
    ff92:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    ff96:	f020 000f 	bic.w	r0, r0, #15
    ff9a:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    ff9e:	f041 0101 	orr.w	r1, r1, #1
    ffa2:	4852      	ldr	r0, [pc, #328]	; (100ec <am_hal_cachectrl_control+0x2f0>)
    ffa4:	f7fe f80c 	bl	dfc0 <am_hal_flash_store_ui32>
    ffa8:	9807      	ldr	r0, [sp, #28]
    ffaa:	f7fe fa8f 	bl	e4cc <am_hal_interrupt_master_set>
    ffae:	2000      	movs	r0, #0
    ffb0:	e742      	b.n	fe38 <am_hal_cachectrl_control+0x3c>
    ffb2:	f7fe fa87 	bl	e4c4 <am_hal_interrupt_master_disable>
    ffb6:	4603      	mov	r3, r0
    ffb8:	484c      	ldr	r0, [pc, #304]	; (100ec <am_hal_cachectrl_control+0x2f0>)
    ffba:	9308      	str	r3, [sp, #32]
    ffbc:	f7fd fffc 	bl	dfb8 <am_hal_flash_load_ui32>
    ffc0:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    ffc4:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    ffc8:	4848      	ldr	r0, [pc, #288]	; (100ec <am_hal_cachectrl_control+0x2f0>)
    ffca:	f7fd fff9 	bl	dfc0 <am_hal_flash_store_ui32>
    ffce:	9808      	ldr	r0, [sp, #32]
    ffd0:	f7fe fa7c 	bl	e4cc <am_hal_interrupt_master_set>
    ffd4:	f7fe fa76 	bl	e4c4 <am_hal_interrupt_master_disable>
    ffd8:	4603      	mov	r3, r0
    ffda:	4844      	ldr	r0, [pc, #272]	; (100ec <am_hal_cachectrl_control+0x2f0>)
    ffdc:	9309      	str	r3, [sp, #36]	; 0x24
    ffde:	f7fd ffeb 	bl	dfb8 <am_hal_flash_load_ui32>
    ffe2:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    ffe6:	f440 61ec 	orr.w	r1, r0, #1888	; 0x760
    ffea:	4840      	ldr	r0, [pc, #256]	; (100ec <am_hal_cachectrl_control+0x2f0>)
    ffec:	f7fd ffe8 	bl	dfc0 <am_hal_flash_store_ui32>
    fff0:	9809      	ldr	r0, [sp, #36]	; 0x24
    fff2:	f7fe fa6b 	bl	e4cc <am_hal_interrupt_master_set>
    fff6:	f7fe fa65 	bl	e4c4 <am_hal_interrupt_master_disable>
    fffa:	4603      	mov	r3, r0
    fffc:	483b      	ldr	r0, [pc, #236]	; (100ec <am_hal_cachectrl_control+0x2f0>)
    fffe:	930a      	str	r3, [sp, #40]	; 0x28
   10000:	f7fd ffda 	bl	dfb8 <am_hal_flash_load_ui32>
   10004:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
   10008:	f020 000f 	bic.w	r0, r0, #15
   1000c:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
   10010:	f041 0101 	orr.w	r1, r1, #1
   10014:	4835      	ldr	r0, [pc, #212]	; (100ec <am_hal_cachectrl_control+0x2f0>)
   10016:	f7fd ffd3 	bl	dfc0 <am_hal_flash_store_ui32>
   1001a:	980a      	ldr	r0, [sp, #40]	; 0x28
   1001c:	f7fe fa56 	bl	e4cc <am_hal_interrupt_master_set>
   10020:	2000      	movs	r0, #0
   10022:	e709      	b.n	fe38 <am_hal_cachectrl_control+0x3c>
   10024:	2900      	cmp	r1, #0
   10026:	d04d      	beq.n	100c4 <am_hal_cachectrl_control+0x2c8>
   10028:	680c      	ldr	r4, [r1, #0]
   1002a:	2c03      	cmp	r4, #3
   1002c:	d84c      	bhi.n	100c8 <am_hal_cachectrl_control+0x2cc>
   1002e:	f7fe fa49 	bl	e4c4 <am_hal_interrupt_master_disable>
   10032:	4603      	mov	r3, r0
   10034:	482d      	ldr	r0, [pc, #180]	; (100ec <am_hal_cachectrl_control+0x2f0>)
   10036:	930b      	str	r3, [sp, #44]	; 0x2c
   10038:	f7fd ffbe 	bl	dfb8 <am_hal_flash_load_ui32>
   1003c:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
   10040:	ea40 3104 	orr.w	r1, r0, r4, lsl #12
   10044:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   10048:	4828      	ldr	r0, [pc, #160]	; (100ec <am_hal_cachectrl_control+0x2f0>)
   1004a:	f7fd ffb9 	bl	dfc0 <am_hal_flash_store_ui32>
   1004e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10050:	f7fe fa3c 	bl	e4cc <am_hal_interrupt_master_set>
   10054:	2000      	movs	r0, #0
   10056:	e6ef      	b.n	fe38 <am_hal_cachectrl_control+0x3c>
   10058:	b3a1      	cbz	r1, 100c4 <am_hal_cachectrl_control+0x2c8>
   1005a:	680c      	ldr	r4, [r1, #0]
   1005c:	2c07      	cmp	r4, #7
   1005e:	d833      	bhi.n	100c8 <am_hal_cachectrl_control+0x2cc>
   10060:	f7fe fa30 	bl	e4c4 <am_hal_interrupt_master_disable>
   10064:	4603      	mov	r3, r0
   10066:	4821      	ldr	r0, [pc, #132]	; (100ec <am_hal_cachectrl_control+0x2f0>)
   10068:	930c      	str	r3, [sp, #48]	; 0x30
   1006a:	f7fd ffa5 	bl	dfb8 <am_hal_flash_load_ui32>
   1006e:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
   10072:	ea40 1104 	orr.w	r1, r0, r4, lsl #4
   10076:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   1007a:	481c      	ldr	r0, [pc, #112]	; (100ec <am_hal_cachectrl_control+0x2f0>)
   1007c:	f7fd ffa0 	bl	dfc0 <am_hal_flash_store_ui32>
   10080:	980c      	ldr	r0, [sp, #48]	; 0x30
   10082:	f7fe fa23 	bl	e4cc <am_hal_interrupt_master_set>
   10086:	2000      	movs	r0, #0
   10088:	e6d6      	b.n	fe38 <am_hal_cachectrl_control+0x3c>
   1008a:	b1d9      	cbz	r1, 100c4 <am_hal_cachectrl_control+0x2c8>
   1008c:	680c      	ldr	r4, [r1, #0]
   1008e:	2c0f      	cmp	r4, #15
   10090:	d81a      	bhi.n	100c8 <am_hal_cachectrl_control+0x2cc>
   10092:	f7fe fa17 	bl	e4c4 <am_hal_interrupt_master_disable>
   10096:	4603      	mov	r3, r0
   10098:	4814      	ldr	r0, [pc, #80]	; (100ec <am_hal_cachectrl_control+0x2f0>)
   1009a:	930d      	str	r3, [sp, #52]	; 0x34
   1009c:	f7fd ff8c 	bl	dfb8 <am_hal_flash_load_ui32>
   100a0:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
   100a4:	f020 000f 	bic.w	r0, r0, #15
   100a8:	ea40 0104 	orr.w	r1, r0, r4
   100ac:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   100b0:	480e      	ldr	r0, [pc, #56]	; (100ec <am_hal_cachectrl_control+0x2f0>)
   100b2:	f7fd ff85 	bl	dfc0 <am_hal_flash_store_ui32>
   100b6:	980d      	ldr	r0, [sp, #52]	; 0x34
   100b8:	f7fe fa08 	bl	e4cc <am_hal_interrupt_master_set>
   100bc:	2000      	movs	r0, #0
   100be:	e6bb      	b.n	fe38 <am_hal_cachectrl_control+0x3c>
   100c0:	2007      	movs	r0, #7
   100c2:	e6b9      	b.n	fe38 <am_hal_cachectrl_control+0x3c>
   100c4:	2006      	movs	r0, #6
   100c6:	e6b7      	b.n	fe38 <am_hal_cachectrl_control+0x3c>
   100c8:	2001      	movs	r0, #1
   100ca:	e6b5      	b.n	fe38 <am_hal_cachectrl_control+0x3c>
   100cc:	2c01      	cmp	r4, #1
   100ce:	d1f9      	bne.n	100c4 <am_hal_cachectrl_control+0x2c8>
   100d0:	4c04      	ldr	r4, [pc, #16]	; (100e4 <am_hal_cachectrl_control+0x2e8>)
   100d2:	7849      	ldrb	r1, [r1, #1]
   100d4:	61a2      	str	r2, [r4, #24]
   100d6:	61e3      	str	r3, [r4, #28]
   100d8:	6823      	ldr	r3, [r4, #0]
   100da:	f361 03c3 	bfi	r3, r1, #3, #1
   100de:	6023      	str	r3, [r4, #0]
   100e0:	e6aa      	b.n	fe38 <am_hal_cachectrl_control+0x3c>
   100e2:	bf00      	nop
   100e4:	40018000 	.word	0x40018000
   100e8:	f800000f 	.word	0xf800000f
   100ec:	40018004 	.word	0x40018004

000100f0 <am_hal_cmdq_init>:
   100f0:	2807      	cmp	r0, #7
   100f2:	d849      	bhi.n	10188 <am_hal_cmdq_init+0x98>
   100f4:	2900      	cmp	r1, #0
   100f6:	d04b      	beq.n	10190 <am_hal_cmdq_init+0xa0>
   100f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   100fa:	684e      	ldr	r6, [r1, #4]
   100fc:	2e00      	cmp	r6, #0
   100fe:	d041      	beq.n	10184 <am_hal_cmdq_init+0x94>
   10100:	2a00      	cmp	r2, #0
   10102:	d03f      	beq.n	10184 <am_hal_cmdq_init+0x94>
   10104:	680c      	ldr	r4, [r1, #0]
   10106:	2c01      	cmp	r4, #1
   10108:	d93c      	bls.n	10184 <am_hal_cmdq_init+0x94>
   1010a:	4f22      	ldr	r7, [pc, #136]	; (10194 <am_hal_cmdq_init+0xa4>)
   1010c:	f04f 0e2c 	mov.w	lr, #44	; 0x2c
   10110:	fb0e fe00 	mul.w	lr, lr, r0
   10114:	eb07 030e 	add.w	r3, r7, lr
   10118:	78dd      	ldrb	r5, [r3, #3]
   1011a:	f015 0501 	ands.w	r5, r5, #1
   1011e:	d135      	bne.n	1018c <am_hal_cmdq_init+0x9c>
   10120:	00e4      	lsls	r4, r4, #3
   10122:	619c      	str	r4, [r3, #24]
   10124:	4434      	add	r4, r6
   10126:	e9c3 6401 	strd	r6, r4, [r3, #4]
   1012a:	e9c3 6604 	strd	r6, r6, [r3, #16]
   1012e:	60de      	str	r6, [r3, #12]
   10130:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
   10134:	4818      	ldr	r0, [pc, #96]	; (10198 <am_hal_cmdq_init+0xa8>)
   10136:	f857 400e 	ldr.w	r4, [r7, lr]
   1013a:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
   1013e:	f8df c05c 	ldr.w	ip, [pc, #92]	; 1019c <am_hal_cmdq_init+0xac>
   10142:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
   10146:	ea44 040c 	orr.w	r4, r4, ip
   1014a:	f847 400e 	str.w	r4, [r7, lr]
   1014e:	6258      	str	r0, [r3, #36]	; 0x24
   10150:	6880      	ldr	r0, [r0, #8]
   10152:	e9c3 5507 	strd	r5, r5, [r3, #28]
   10156:	6005      	str	r5, [r0, #0]
   10158:	6a58      	ldr	r0, [r3, #36]	; 0x24
   1015a:	68c0      	ldr	r0, [r0, #12]
   1015c:	6005      	str	r5, [r0, #0]
   1015e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   10160:	4628      	mov	r0, r5
   10162:	e9d4 5704 	ldrd	r5, r7, [r4, #16]
   10166:	682c      	ldr	r4, [r5, #0]
   10168:	433c      	orrs	r4, r7
   1016a:	602c      	str	r4, [r5, #0]
   1016c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   1016e:	6864      	ldr	r4, [r4, #4]
   10170:	6026      	str	r6, [r4, #0]
   10172:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   10174:	7a09      	ldrb	r1, [r1, #8]
   10176:	6824      	ldr	r4, [r4, #0]
   10178:	0049      	lsls	r1, r1, #1
   1017a:	f001 0102 	and.w	r1, r1, #2
   1017e:	6021      	str	r1, [r4, #0]
   10180:	6013      	str	r3, [r2, #0]
   10182:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10184:	2006      	movs	r0, #6
   10186:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10188:	2005      	movs	r0, #5
   1018a:	4770      	bx	lr
   1018c:	2007      	movs	r0, #7
   1018e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10190:	2006      	movs	r0, #6
   10192:	4770      	bx	lr
   10194:	1000b228 	.word	0x1000b228
   10198:	000107e8 	.word	0x000107e8
   1019c:	01cdcdcd 	.word	0x01cdcdcd

000101a0 <am_hal_cmdq_enable>:
   101a0:	4603      	mov	r3, r0
   101a2:	b1a0      	cbz	r0, 101ce <am_hal_cmdq_enable+0x2e>
   101a4:	6802      	ldr	r2, [r0, #0]
   101a6:	490c      	ldr	r1, [pc, #48]	; (101d8 <am_hal_cmdq_enable+0x38>)
   101a8:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   101ac:	428a      	cmp	r2, r1
   101ae:	d10e      	bne.n	101ce <am_hal_cmdq_enable+0x2e>
   101b0:	78c0      	ldrb	r0, [r0, #3]
   101b2:	f010 0002 	ands.w	r0, r0, #2
   101b6:	d10c      	bne.n	101d2 <am_hal_cmdq_enable+0x32>
   101b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   101ba:	6811      	ldr	r1, [r2, #0]
   101bc:	680a      	ldr	r2, [r1, #0]
   101be:	f042 0201 	orr.w	r2, r2, #1
   101c2:	600a      	str	r2, [r1, #0]
   101c4:	78da      	ldrb	r2, [r3, #3]
   101c6:	f042 0202 	orr.w	r2, r2, #2
   101ca:	70da      	strb	r2, [r3, #3]
   101cc:	4770      	bx	lr
   101ce:	2002      	movs	r0, #2
   101d0:	4770      	bx	lr
   101d2:	2000      	movs	r0, #0
   101d4:	4770      	bx	lr
   101d6:	bf00      	nop
   101d8:	01cdcdcd 	.word	0x01cdcdcd

000101dc <am_hal_queue_init>:
   101dc:	b410      	push	{r4}
   101de:	2400      	movs	r4, #0
   101e0:	e9c0 4400 	strd	r4, r4, [r0]
   101e4:	e9c0 4302 	strd	r4, r3, [r0, #8]
   101e8:	e9c0 2104 	strd	r2, r1, [r0, #16]
   101ec:	f85d 4b04 	ldr.w	r4, [sp], #4
   101f0:	4770      	bx	lr
   101f2:	bf00      	nop

000101f4 <am_hal_queue_item_add>:
   101f4:	b570      	push	{r4, r5, r6, lr}
   101f6:	6905      	ldr	r5, [r0, #16]
   101f8:	b082      	sub	sp, #8
   101fa:	4604      	mov	r4, r0
   101fc:	fb02 f505 	mul.w	r5, r2, r5
   10200:	460e      	mov	r6, r1
   10202:	f7fe f95f 	bl	e4c4 <am_hal_interrupt_master_disable>
   10206:	68e2      	ldr	r2, [r4, #12]
   10208:	9001      	str	r0, [sp, #4]
   1020a:	68a0      	ldr	r0, [r4, #8]
   1020c:	1a13      	subs	r3, r2, r0
   1020e:	42ab      	cmp	r3, r5
   10210:	d31c      	bcc.n	1024c <am_hal_queue_item_add+0x58>
   10212:	b195      	cbz	r5, 1023a <am_hal_queue_item_add+0x46>
   10214:	6823      	ldr	r3, [r4, #0]
   10216:	b306      	cbz	r6, 1025a <am_hal_queue_item_add+0x66>
   10218:	1e71      	subs	r1, r6, #1
   1021a:	194e      	adds	r6, r1, r5
   1021c:	6962      	ldr	r2, [r4, #20]
   1021e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   10222:	54d0      	strb	r0, [r2, r3]
   10224:	6823      	ldr	r3, [r4, #0]
   10226:	68e0      	ldr	r0, [r4, #12]
   10228:	3301      	adds	r3, #1
   1022a:	428e      	cmp	r6, r1
   1022c:	fbb3 f2f0 	udiv	r2, r3, r0
   10230:	fb00 3312 	mls	r3, r0, r2, r3
   10234:	6023      	str	r3, [r4, #0]
   10236:	d1f1      	bne.n	1021c <am_hal_queue_item_add+0x28>
   10238:	68a0      	ldr	r0, [r4, #8]
   1023a:	4405      	add	r5, r0
   1023c:	60a5      	str	r5, [r4, #8]
   1023e:	9801      	ldr	r0, [sp, #4]
   10240:	f7fe f944 	bl	e4cc <am_hal_interrupt_master_set>
   10244:	2401      	movs	r4, #1
   10246:	4620      	mov	r0, r4
   10248:	b002      	add	sp, #8
   1024a:	bd70      	pop	{r4, r5, r6, pc}
   1024c:	9801      	ldr	r0, [sp, #4]
   1024e:	f7fe f93d 	bl	e4cc <am_hal_interrupt_master_set>
   10252:	2400      	movs	r4, #0
   10254:	4620      	mov	r0, r4
   10256:	b002      	add	sp, #8
   10258:	bd70      	pop	{r4, r5, r6, pc}
   1025a:	4631      	mov	r1, r6
   1025c:	3101      	adds	r1, #1
   1025e:	3301      	adds	r3, #1
   10260:	428d      	cmp	r5, r1
   10262:	fbb3 f6f2 	udiv	r6, r3, r2
   10266:	fb02 3316 	mls	r3, r2, r6, r3
   1026a:	d1f7      	bne.n	1025c <am_hal_queue_item_add+0x68>
   1026c:	6023      	str	r3, [r4, #0]
   1026e:	e7e4      	b.n	1023a <am_hal_queue_item_add+0x46>

00010270 <am_hal_queue_item_get>:
   10270:	b570      	push	{r4, r5, r6, lr}
   10272:	6905      	ldr	r5, [r0, #16]
   10274:	4604      	mov	r4, r0
   10276:	b082      	sub	sp, #8
   10278:	fb02 f505 	mul.w	r5, r2, r5
   1027c:	460e      	mov	r6, r1
   1027e:	f7fe f921 	bl	e4c4 <am_hal_interrupt_master_disable>
   10282:	68a2      	ldr	r2, [r4, #8]
   10284:	9001      	str	r0, [sp, #4]
   10286:	42aa      	cmp	r2, r5
   10288:	d31c      	bcc.n	102c4 <am_hal_queue_item_get+0x54>
   1028a:	b195      	cbz	r5, 102b2 <am_hal_queue_item_get+0x42>
   1028c:	6863      	ldr	r3, [r4, #4]
   1028e:	b306      	cbz	r6, 102d2 <am_hal_queue_item_get+0x62>
   10290:	1e71      	subs	r1, r6, #1
   10292:	194e      	adds	r6, r1, r5
   10294:	6962      	ldr	r2, [r4, #20]
   10296:	5cd3      	ldrb	r3, [r2, r3]
   10298:	f801 3f01 	strb.w	r3, [r1, #1]!
   1029c:	6863      	ldr	r3, [r4, #4]
   1029e:	68e0      	ldr	r0, [r4, #12]
   102a0:	3301      	adds	r3, #1
   102a2:	428e      	cmp	r6, r1
   102a4:	fbb3 f2f0 	udiv	r2, r3, r0
   102a8:	fb00 3312 	mls	r3, r0, r2, r3
   102ac:	6063      	str	r3, [r4, #4]
   102ae:	d1f1      	bne.n	10294 <am_hal_queue_item_get+0x24>
   102b0:	68a2      	ldr	r2, [r4, #8]
   102b2:	9801      	ldr	r0, [sp, #4]
   102b4:	1b52      	subs	r2, r2, r5
   102b6:	60a2      	str	r2, [r4, #8]
   102b8:	f7fe f908 	bl	e4cc <am_hal_interrupt_master_set>
   102bc:	2401      	movs	r4, #1
   102be:	4620      	mov	r0, r4
   102c0:	b002      	add	sp, #8
   102c2:	bd70      	pop	{r4, r5, r6, pc}
   102c4:	9801      	ldr	r0, [sp, #4]
   102c6:	f7fe f901 	bl	e4cc <am_hal_interrupt_master_set>
   102ca:	2400      	movs	r4, #0
   102cc:	4620      	mov	r0, r4
   102ce:	b002      	add	sp, #8
   102d0:	bd70      	pop	{r4, r5, r6, pc}
   102d2:	68e0      	ldr	r0, [r4, #12]
   102d4:	4631      	mov	r1, r6
   102d6:	3101      	adds	r1, #1
   102d8:	3301      	adds	r3, #1
   102da:	42a9      	cmp	r1, r5
   102dc:	fbb3 f6f0 	udiv	r6, r3, r0
   102e0:	fb00 3316 	mls	r3, r0, r6, r3
   102e4:	d1f7      	bne.n	102d6 <am_hal_queue_item_get+0x66>
   102e6:	6063      	str	r3, [r4, #4]
   102e8:	e7e3      	b.n	102b2 <am_hal_queue_item_get+0x42>
   102ea:	bf00      	nop
   102ec:	0001c200 	.word	0x0001c200
   102f0:	00000060 	.word	0x00000060
	...
   10300:	0000001b 	.word	0x0000001b
   10304:	10001060 	.word	0x10001060
   10308:	00000800 	.word	0x00000800
	...
   10314:	646e6573 	.word	0x646e6573
   10318:	6c65685f 	.word	0x6c65685f
   1031c:	203a6f6c 	.word	0x203a6f6c
   10320:	646e6573 	.word	0x646e6573
   10324:	20676e69 	.word	0x20676e69
   10328:	65747962 	.word	0x65747962
   1032c:	25203a73 	.word	0x25203a73
   10330:	000a2e64 	.word	0x000a2e64
   10334:	6f70410a 	.word	0x6f70410a
   10338:	336f6c6c 	.word	0x336f6c6c
   1033c:	52415520 	.word	0x52415520
   10340:	6f742054 	.word	0x6f742054
   10344:	534f4920 	.word	0x534f4920
   10348:	736f4820 	.word	0x736f4820
   1034c:	72422074 	.word	0x72422074
   10350:	65676469 	.word	0x65676469
   10354:	0000000a 	.word	0x0000000a
   10358:	20495053 	.word	0x20495053
   1035c:	636f6c63 	.word	0x636f6c63
   10360:	203d206b 	.word	0x203d206b
   10364:	252e6425 	.word	0x252e6425
   10368:	484d2064 	.word	0x484d2064
   1036c:	00000a7a 	.word	0x00000a7a
   10370:	20433249 	.word	0x20433249
   10374:	636f6c63 	.word	0x636f6c63
   10378:	203d206b 	.word	0x203d206b
   1037c:	252e6425 	.word	0x252e6425
   10380:	484d2064 	.word	0x484d2064
   10384:	00000a7a 	.word	0x00000a7a
   10388:	54524155 	.word	0x54524155
   1038c:	74614420 	.word	0x74614420
   10390:	69532061 	.word	0x69532061
   10394:	2020657a 	.word	0x2020657a
   10398:	203a2020 	.word	0x203a2020
   1039c:	000a6425 	.word	0x000a6425
   103a0:	6b636150 	.word	0x6b636150
   103a4:	4c207465 	.word	0x4c207465
   103a8:	74676e65 	.word	0x74676e65
   103ac:	20202068 	.word	0x20202068
   103b0:	203a2020 	.word	0x203a2020
   103b4:	000a6425 	.word	0x000a6425
   103b8:	65646e69 	.word	0x65646e69
   103bc:	20202078 	.word	0x20202078
   103c0:	20202020 	.word	0x20202020
   103c4:	20202020 	.word	0x20202020
   103c8:	203a2020 	.word	0x203a2020
   103cc:	000a6425 	.word	0x000a6425
   103d0:	20534f49 	.word	0x20534f49
   103d4:	676e654c 	.word	0x676e654c
   103d8:	20206874 	.word	0x20206874
   103dc:	20202020 	.word	0x20202020
   103e0:	203a2020 	.word	0x203a2020
   103e4:	000a6425 	.word	0x000a6425
   103e8:	20534f49 	.word	0x20534f49
   103ec:	72617453 	.word	0x72617453
   103f0:	69422074 	.word	0x69422074
   103f4:	20202074 	.word	0x20202074
   103f8:	203a2020 	.word	0x203a2020
   103fc:	000a6425 	.word	0x000a6425
   10400:	20534f49 	.word	0x20534f49
   10404:	20646e45 	.word	0x20646e45
   10408:	20746942 	.word	0x20746942
   1040c:	20202020 	.word	0x20202020
   10410:	203a2020 	.word	0x203a2020
   10414:	000a6425 	.word	0x000a6425
   10418:	6425202c 	.word	0x6425202c
   1041c:	00000000 	.word	0x00000000
   10420:	204d4f49 	.word	0x204d4f49
   10424:	73203a20 	.word	0x73203a20
   10428:	20746e65 	.word	0x20746e65
   1042c:	65747962 	.word	0x65747962
   10430:	25203a73 	.word	0x25203a73
   10434:	63282064 	.word	0x63282064
   10438:	746e756f 	.word	0x746e756f
   1043c:	2964253d 	.word	0x2964253d
   10440:	00000000 	.word	0x00000000
   10444:	0000000a 	.word	0x0000000a
   10448:	0000002a 	.word	0x0000002a
   1044c:	65636552 	.word	0x65636552
   10450:	64657669 	.word	0x64657669
   10454:	6e614820 	.word	0x6e614820
   10458:	61687364 	.word	0x61687364
   1045c:	6620656b 	.word	0x6620656b
   10460:	6e20726f 	.word	0x6e20726f
   10464:	20747865 	.word	0x20747865
   10468:	6b636170 	.word	0x6b636170
   1046c:	000a7465 	.word	0x000a7465
   10470:	656d6954 	.word	0x656d6954
   10474:	756f2064 	.word	0x756f2064
   10478:	61772074 	.word	0x61772074
   1047c:	6e697469 	.word	0x6e697469
   10480:	6f662067 	.word	0x6f662067
   10484:	61482072 	.word	0x61482072
   10488:	6873646e 	.word	0x6873646e
   1048c:	20656b61 	.word	0x20656b61
   10490:	6e676973 	.word	0x6e676973
   10494:	000a6c61 	.word	0x000a6c61

00010498 <g_AM_BSP_GPIO_COM_UART_RX>:
   10498:	00000000                                ....

0001049c <g_AM_BSP_GPIO_COM_UART_TX>:
   1049c:	00000000                                ....

000104a0 <g_AM_BSP_GPIO_IOM0_CS>:
   104a0:	00000701                                ....

000104a4 <g_AM_BSP_GPIO_IOM0_MISO>:
   104a4:	00000001                                ....

000104a8 <g_AM_BSP_GPIO_IOM0_MOSI>:
   104a8:	00000301                                ....

000104ac <g_AM_BSP_GPIO_IOM0_SCK>:
   104ac:	00000301                                ....

000104b0 <g_AM_BSP_GPIO_IOM0_SCL>:
   104b0:	00000b40                                @...

000104b4 <g_AM_BSP_GPIO_IOM0_SDA>:
   104b4:	00000b40                                @...

000104b8 <g_AM_BSP_GPIO_IOM1_CS>:
   104b8:	00110701                                ....

000104bc <g_AM_BSP_GPIO_IOM1_MISO>:
   104bc:	00010001                                ....

000104c0 <g_AM_BSP_GPIO_IOM1_MOSI>:
   104c0:	00010301                                ....

000104c4 <g_AM_BSP_GPIO_IOM1_SCK>:
   104c4:	00010301                                ....

000104c8 <g_AM_BSP_GPIO_IOM1_SCL>:
   104c8:	00010b40                                @...

000104cc <g_AM_BSP_GPIO_IOM1_SDA>:
   104cc:	00010b40                                @...

000104d0 <g_AM_BSP_GPIO_IOM2_CS>:
   104d0:	001a0701                                ....

000104d4 <g_AM_BSP_GPIO_IOM2_MISO>:
   104d4:	00020005                                ....

000104d8 <g_AM_BSP_GPIO_IOM2_MOSI>:
   104d8:	00020305                                ....

000104dc <g_AM_BSP_GPIO_IOM2_SCK>:
   104dc:	00020305                                ....

000104e0 <g_AM_BSP_GPIO_IOM2_SCL>:
   104e0:	00020b44                                D...

000104e4 <g_AM_BSP_GPIO_IOM2_SDA>:
   104e4:	00020b44                                D...

000104e8 <g_AM_BSP_GPIO_IOM3_CS>:
   104e8:	00030701                                ....

000104ec <g_AM_BSP_GPIO_IOM3_MISO>:
   104ec:	00030005                                ....

000104f0 <g_AM_BSP_GPIO_IOM3_MOSI>:
   104f0:	00030305                                ....

000104f4 <g_AM_BSP_GPIO_IOM3_SCK>:
   104f4:	00030305                                ....

000104f8 <g_AM_BSP_GPIO_IOM3_SCL>:
   104f8:	00030b44                                D...

000104fc <g_AM_BSP_GPIO_IOM3_SDA>:
   104fc:	00030b44                                D...

00010500 <g_AM_BSP_GPIO_IOM4_CS>:
   10500:	000c0701                                ....

00010504 <g_AM_BSP_GPIO_IOM4_MISO>:
   10504:	00040005                                ....

00010508 <g_AM_BSP_GPIO_IOM4_MOSI>:
   10508:	00040305                                ....

0001050c <g_AM_BSP_GPIO_IOM4_SCK>:
   1050c:	00040305                                ....

00010510 <g_AM_BSP_GPIO_IOM4_SCL>:
   10510:	00040b44                                D...

00010514 <g_AM_BSP_GPIO_IOM4_SDA>:
   10514:	00040b44                                D...

00010518 <g_AM_BSP_GPIO_IOM5_CS>:
   10518:	00050701                                ....

0001051c <g_AM_BSP_GPIO_IOM5_MISO>:
   1051c:	00050005                                ....

00010520 <g_AM_BSP_GPIO_IOM5_MOSI>:
   10520:	00050305                                ....

00010524 <g_AM_BSP_GPIO_IOM5_SCK>:
   10524:	00050305                                ....

00010528 <g_AM_BSP_GPIO_IOM5_SCL>:
   10528:	00050b44                                D...

0001052c <g_AM_BSP_GPIO_IOM5_SDA>:
   1052c:	00050b44                                D...

00010530 <g_AM_BSP_GPIO_ITM_SWO>:
   10530:	00000002                                ....

00010534 <g_AM_HAL_GPIO_DISABLE>:
   10534:	00000003                                ....

00010538 <g_AM_HAL_GPIO_INPUT_PULLUP>:
   10538:	00001023                                #...

0001053c <g_AM_HAL_GPIO_OUTPUT>:
   1053c:	00000403                                ....

00010540 <g_ui8Bit76Capabilities>:
   10540:	02800101 80010180 80800101 80808080     ................
   10550:	80808080 80808008 01800180 80808080     ................
   10560:	80808080 01800402 01010401 80808080     ................
   10570:	00000101                                ....

00010574 <g_ui8Inpen>:
   10574:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
   10584:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
   10594:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
   105a4:	00003130                                01..

000105a8 <g_ui8NCEtable>:
   105a8:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   105b8:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   105c8:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   105d8:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   105e8:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   105f8:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   10608:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   10618:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   10628:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   10638:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   10648:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   10658:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   10668:	32221202 43231303                       .."2..#C

00010670 <g_ui8nCEpins>:
   10670:	02070707 00080802 01020202 01010101     ................
   10680:	01010101 01010101 01010101 01010101     ................
   10690:	01010101 08010101 01010008 01010101     ................
   106a0:	00000101                                ....

000106a4 <g_am_hal_mcuctrl_flash_size>:
   106a4:	00004000 00008000 00010000 00020000     .@..............
   106b4:	00040000 00080000 00100000 00200000     .............. .
   106c4:	00180000 00000000 00000000 00000000     ................
	...

000106e4 <g_am_hal_mcuctrl_sram_size>:
   106e4:	00004000 00008000 00010000 00020000     .@..............
   106f4:	00040000 00080000 00100000 00060000     ................
   10704:	000c0000 00000000 00000000 00000000     ................
	...

00010724 <am_hal_pwrctrl_peripheral_control>:
	...
   10730:	00000001 00000004 00000004 00000002     ................
   10740:	00000008 00000008 00000004 00000008     ................
   10750:	00000008 00000008 00000008 00000008     ................
   10760:	00000010 00000010 00000010 00000020     ............ ...
   10770:	00000010 00000010 00000040 00000010     ........@.......
   10780:	00000010 00000080 00000004 00000004     ................
   10790:	00000100 00000004 00000004 00000200     ................
   107a0:	00000020 00000020 00000400 00000004      ... ...........
   107b0:	00000004 00000800 00000040 00000040     ........@...@...
   107c0:	00001000 00000080 00000080 00002000     ............. ..
   107d0:	00000100 00000100                       ........

000107d8 <CSWTCH.20>:
   107d8:	016e3600 00b71b00 005b8d80 002dc6c0     .6n.......[...-.

000107e8 <gAmHalCmdQReg>:
   107e8:	50004294 50004298 500042ac 500042b0     .B.P.B.P.B.P.B.P
   107f8:	500042a8 00008000 5000429c 00000001     .B.P.....B.P....
   10808:	00000004 00000002 50005294 50005298     .........R.P.R.P
   10818:	500052ac 500052b0 500052a8 00008000     .R.P.R.P.R.P....
   10828:	5000529c 00000001 00000004 00000002     .R.P............
   10838:	50006294 50006298 500062ac 500062b0     .b.P.b.P.b.P.b.P
   10848:	500062a8 00008000 5000629c 00000001     .b.P.....b.P....
   10858:	00000004 00000002 50007294 50007298     .........r.P.r.P
   10868:	500072ac 500072b0 500072a8 00008000     .r.P.r.P.r.P....
   10878:	5000729c 00000001 00000004 00000002     .r.P............
   10888:	50008294 50008298 500082ac 500082b0     ...P...P...P...P
   10898:	500082a8 00008000 5000829c 00000001     ...P.......P....
   108a8:	00000004 00000002 50009294 50009298     ...........P...P
   108b8:	500092ac 500092b0 500092a8 00008000     ...P...P...P....
   108c8:	5000929c 00000001 00000004 00000002     ...P............
   108d8:	500142a0 500142a8 500142c0 500142c4     .B.P.B.P.B.P.B.P
   108e8:	500142b8 00004000 500142ac 00000001     .B.P.@...B.P....
   108f8:	00000004 00000008 5000c248 5000c24c     ........H..PL..P
   10908:	5000c260 5000c264 5000c25c 00008000     `..Pd..P\..P....
   10918:	5000c250 00000001 00000004 00000002     P..P............
