
bin/ios_fifo_host.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 c1 d3 00 00 29 d4 00 00 2b d4 00 00     ........)...+...
    c010:	2b d4 00 00 2b d4 00 00 2b d4 00 00 00 00 00 00     +...+...+.......
	...
    c02c:	2d d4 00 00 2d d4 00 00 00 00 00 00 2d d4 00 00     -...-.......-...
    c03c:	2d d4 00 00 2d d4 00 00 2d d4 00 00 2d d4 00 00     -...-...-...-...
    c04c:	2d d4 00 00 2d d4 00 00 2d d4 00 00 2d d4 00 00     -...-...-...-...
    c05c:	2d d4 00 00 2d d4 00 00 2d d4 00 00 2d d4 00 00     -...-...-...-...
    c06c:	2d d4 00 00 2d d4 00 00 7d c2 00 00 2d d4 00 00     -...-...}...-...
    c07c:	2d d4 00 00 2d d4 00 00 2d d4 00 00 2d d4 00 00     -...-...-...-...
    c08c:	2d d4 00 00 2d d4 00 00 2d d4 00 00 2d d4 00 00     -...-...-...-...
    c09c:	2d d4 00 00 2d d4 00 00 2d d4 00 00 2d d4 00 00     -...-...-...-...
    c0ac:	2d d4 00 00 2d d4 00 00 2d d4 00 00 2d d4 00 00     -...-...-...-...
    c0bc:	2d d4 00 00                                         -...

0000c0c0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    c1a0:	b082      	sub	sp, #8
    c1a2:	4603      	mov	r3, r0
    c1a4:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
    c1a8:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c1ac:	2b00      	cmp	r3, #0
    c1ae:	db0c      	blt.n	c1ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c1b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c1b4:	f003 021f 	and.w	r2, r3, #31
    c1b8:	4905      	ldr	r1, [pc, #20]	; (c1d0 <__NVIC_EnableIRQ+0x30>)
    c1ba:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c1be:	095b      	lsrs	r3, r3, #5
    c1c0:	2001      	movs	r0, #1
    c1c2:	fa00 f202 	lsl.w	r2, r0, r2
    c1c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
    c1ca:	bf00      	nop
    c1cc:	b002      	add	sp, #8
    c1ce:	4770      	bx	lr
    c1d0:	e000e100 	.word	0xe000e100

0000c1d4 <clear_rx_buf>:
//
// Clear Rx Buffer for comparison
//
//*****************************************************************************
void clear_rx_buf(void)
{
    c1d4:	b082      	sub	sp, #8
    uint32_t i;
    for ( i = 0; i < AM_TEST_RCV_BUF_SIZE; i++ )
    c1d6:	2300      	movs	r3, #0
    c1d8:	9301      	str	r3, [sp, #4]
    c1da:	e007      	b.n	c1ec <clear_rx_buf+0x18>
    {
        g_pui8RcvBuf[i] = EMPTY_BYTE;
    c1dc:	4a07      	ldr	r2, [pc, #28]	; (c1fc <clear_rx_buf+0x28>)
    c1de:	9b01      	ldr	r3, [sp, #4]
    c1e0:	4413      	add	r3, r2
    c1e2:	22ee      	movs	r2, #238	; 0xee
    c1e4:	701a      	strb	r2, [r3, #0]
    for ( i = 0; i < AM_TEST_RCV_BUF_SIZE; i++ )
    c1e6:	9b01      	ldr	r3, [sp, #4]
    c1e8:	3301      	adds	r3, #1
    c1ea:	9301      	str	r3, [sp, #4]
    c1ec:	9b01      	ldr	r3, [sp, #4]
    c1ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    c1f2:	d3f3      	bcc.n	c1dc <clear_rx_buf+0x8>
    }
}
    c1f4:	bf00      	nop
    c1f6:	bf00      	nop
    c1f8:	b002      	add	sp, #8
    c1fa:	4770      	bx	lr
    c1fc:	1000105c 	.word	0x1000105c

0000c200 <validate_rx_buf>:
// Validate Rx Buffer
// Returns 0 for success case
//
//*****************************************************************************
uint32_t validate_rx_buf(uint32_t rxSize)
{
    c200:	b500      	push	{lr}
    c202:	b085      	sub	sp, #20
    c204:	9001      	str	r0, [sp, #4]
    uint32_t i;
    for ( i = 0; i < rxSize; i++ )
    c206:	2300      	movs	r3, #0
    c208:	9303      	str	r3, [sp, #12]
    c20a:	e013      	b.n	c234 <validate_rx_buf+0x34>
    {
        if ( g_pui8RcvBuf[i] != (((g_startIdx + i) & 0xFF) ^ XOR_BYTE) )
    c20c:	4a14      	ldr	r2, [pc, #80]	; (c260 <validate_rx_buf+0x60>)
    c20e:	9b03      	ldr	r3, [sp, #12]
    c210:	4413      	add	r3, r2
    c212:	781b      	ldrb	r3, [r3, #0]
    c214:	4619      	mov	r1, r3
    c216:	4b13      	ldr	r3, [pc, #76]	; (c264 <validate_rx_buf+0x64>)
    c218:	681a      	ldr	r2, [r3, #0]
    c21a:	9b03      	ldr	r3, [sp, #12]
    c21c:	4413      	add	r3, r2
    c21e:	b2db      	uxtb	r3, r3
    c220:	4299      	cmp	r1, r3
    c222:	d004      	beq.n	c22e <validate_rx_buf+0x2e>
        {
            am_util_stdio_printf("Failed to compare buffers at index %d \n", i);
    c224:	9903      	ldr	r1, [sp, #12]
    c226:	4810      	ldr	r0, [pc, #64]	; (c268 <validate_rx_buf+0x68>)
    c228:	f001 f8a2 	bl	d370 <am_util_stdio_printf>
            break;
    c22c:	e006      	b.n	c23c <validate_rx_buf+0x3c>
    for ( i = 0; i < rxSize; i++ )
    c22e:	9b03      	ldr	r3, [sp, #12]
    c230:	3301      	adds	r3, #1
    c232:	9303      	str	r3, [sp, #12]
    c234:	9a03      	ldr	r2, [sp, #12]
    c236:	9b01      	ldr	r3, [sp, #4]
    c238:	429a      	cmp	r2, r3
    c23a:	d3e7      	bcc.n	c20c <validate_rx_buf+0xc>
        }
    }
    // Set the reference for next chunk
    g_startIdx += rxSize;
    c23c:	4b09      	ldr	r3, [pc, #36]	; (c264 <validate_rx_buf+0x64>)
    c23e:	681a      	ldr	r2, [r3, #0]
    c240:	9b01      	ldr	r3, [sp, #4]
    c242:	4413      	add	r3, r2
    c244:	4a07      	ldr	r2, [pc, #28]	; (c264 <validate_rx_buf+0x64>)
    c246:	6013      	str	r3, [r2, #0]
    return (i == rxSize);
    c248:	9a03      	ldr	r2, [sp, #12]
    c24a:	9b01      	ldr	r3, [sp, #4]
    c24c:	429a      	cmp	r2, r3
    c24e:	bf0c      	ite	eq
    c250:	2301      	moveq	r3, #1
    c252:	2300      	movne	r3, #0
    c254:	b2db      	uxtb	r3, r3
}
    c256:	4618      	mov	r0, r3
    c258:	b005      	add	sp, #20
    c25a:	f85d fb04 	ldr.w	pc, [sp], #4
    c25e:	bf00      	nop
    c260:	1000105c 	.word	0x1000105c
    c264:	1000145c 	.word	0x1000145c
    c268:	0000f020 	.word	0x0000f020

0000c26c <hostint_handler>:

// ISR callback for the host IOINT
static void hostint_handler(void)
{
    bIosInt = true;
    c26c:	4b02      	ldr	r3, [pc, #8]	; (c278 <hostint_handler+0xc>)
    c26e:	2201      	movs	r2, #1
    c270:	701a      	strb	r2, [r3, #0]
}
    c272:	bf00      	nop
    c274:	4770      	bx	lr
    c276:	bf00      	nop
    c278:	10001460 	.word	0x10001460

0000c27c <am_gpio_isr>:
//
// Interrupt handler for the GPIO pins.
//
//*****************************************************************************
void am_gpio_isr(void)
{
    c27c:	b500      	push	{lr}
    c27e:	b083      	sub	sp, #12
    am_hal_gpio_interrupt_clear(pGpioIntStatusMask);
    am_hal_gpio_interrupt_service(pGpioIntStatusMask);
#elif defined(AM_PART_APOLLO3)
    uint64_t ui64Status;

    am_hal_gpio_interrupt_status_get(false, &ui64Status);
    c280:	466b      	mov	r3, sp
    c282:	4619      	mov	r1, r3
    c284:	2000      	movs	r0, #0
    c286:	f001 feaf 	bl	dfe8 <am_hal_gpio_interrupt_status_get>
    am_hal_gpio_interrupt_clear(ui64Status);
    c28a:	e9dd 2300 	ldrd	r2, r3, [sp]
    c28e:	4610      	mov	r0, r2
    c290:	4619      	mov	r1, r3
    c292:	f001 fe8f 	bl	dfb4 <am_hal_gpio_interrupt_clear>
    am_hal_gpio_interrupt_service(ui64Status);
    c296:	e9dd 2300 	ldrd	r2, r3, [sp]
    c29a:	4610      	mov	r0, r2
    c29c:	4619      	mov	r1, r3
    c29e:	f001 fed3 	bl	e048 <am_hal_gpio_interrupt_service>
#else
    #error Unknown device.
#endif
}
    c2a2:	bf00      	nop
    c2a4:	b003      	add	sp, #12
    c2a6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000c2ac <iom_slave_read>:

void iom_slave_read(bool bSpi, uint32_t offset, uint32_t *pBuf, uint32_t size)
{
    c2ac:	b500      	push	{lr}
    c2ae:	b08f      	sub	sp, #60	; 0x3c
    c2b0:	9102      	str	r1, [sp, #8]
    c2b2:	9201      	str	r2, [sp, #4]
    c2b4:	9300      	str	r3, [sp, #0]
    c2b6:	4603      	mov	r3, r0
    c2b8:	f88d 300f 	strb.w	r3, [sp, #15]
    am_hal_iom_transfer_t       Transaction;

    Transaction.ui32InstrLen    = 1;
    c2bc:	2301      	movs	r3, #1
    c2be:	9305      	str	r3, [sp, #20]
    Transaction.ui32Instr       = offset;
    c2c0:	9b02      	ldr	r3, [sp, #8]
    c2c2:	9306      	str	r3, [sp, #24]
    Transaction.eDirection      = AM_HAL_IOM_RX;
    c2c4:	2301      	movs	r3, #1
    c2c6:	f88d 3020 	strb.w	r3, [sp, #32]
    Transaction.ui32NumBytes    = size;
    c2ca:	9b00      	ldr	r3, [sp, #0]
    c2cc:	9307      	str	r3, [sp, #28]
    Transaction.pui32RxBuffer   = pBuf;
    c2ce:	9b01      	ldr	r3, [sp, #4]
    c2d0:	930a      	str	r3, [sp, #40]	; 0x28
    Transaction.bContinue       = false;
    c2d2:	2300      	movs	r3, #0
    c2d4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    Transaction.ui8RepeatCount  = 0;
    c2d8:	2300      	movs	r3, #0
    c2da:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    Transaction.ui32PauseCondition = 0;
    c2de:	2300      	movs	r3, #0
    c2e0:	930c      	str	r3, [sp, #48]	; 0x30
    Transaction.ui32StatusSetClr = 0;
    c2e2:	2300      	movs	r3, #0
    c2e4:	930d      	str	r3, [sp, #52]	; 0x34

    if ( bSpi )
    c2e6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c2ea:	2b00      	cmp	r3, #0
    c2ec:	d002      	beq.n	c2f4 <iom_slave_read+0x48>
    {
        Transaction.uPeerInfo.ui32SpiChipSelect = AM_BSP_IOM0_CS_CHNL;
    c2ee:	2300      	movs	r3, #0
    c2f0:	9304      	str	r3, [sp, #16]
    c2f2:	e001      	b.n	c2f8 <iom_slave_read+0x4c>
    }
    else
    {
        Transaction.uPeerInfo.ui32I2CDevAddr = I2C_ADDR;
    c2f4:	2310      	movs	r3, #16
    c2f6:	9304      	str	r3, [sp, #16]
    }
    am_hal_iom_blocking_transfer(g_IOMHandle, &Transaction);
    c2f8:	4b05      	ldr	r3, [pc, #20]	; (c310 <iom_slave_read+0x64>)
    c2fa:	681b      	ldr	r3, [r3, #0]
    c2fc:	aa04      	add	r2, sp, #16
    c2fe:	4611      	mov	r1, r2
    c300:	4618      	mov	r0, r3
    c302:	f002 fa49 	bl	e798 <am_hal_iom_blocking_transfer>
}
    c306:	bf00      	nop
    c308:	b00f      	add	sp, #60	; 0x3c
    c30a:	f85d fb04 	ldr.w	pc, [sp], #4
    c30e:	bf00      	nop
    c310:	10001464 	.word	0x10001464

0000c314 <iom_slave_write>:

void iom_slave_write(bool bSpi, uint32_t offset, uint32_t *pBuf, uint32_t size)
{
    c314:	b500      	push	{lr}
    c316:	b08f      	sub	sp, #60	; 0x3c
    c318:	9102      	str	r1, [sp, #8]
    c31a:	9201      	str	r2, [sp, #4]
    c31c:	9300      	str	r3, [sp, #0]
    c31e:	4603      	mov	r3, r0
    c320:	f88d 300f 	strb.w	r3, [sp, #15]
    am_hal_iom_transfer_t       Transaction;

    Transaction.ui32InstrLen    = 1;
    c324:	2301      	movs	r3, #1
    c326:	9305      	str	r3, [sp, #20]
    Transaction.ui32Instr       = offset;
    c328:	9b02      	ldr	r3, [sp, #8]
    c32a:	9306      	str	r3, [sp, #24]
    Transaction.eDirection      = AM_HAL_IOM_TX;
    c32c:	2300      	movs	r3, #0
    c32e:	f88d 3020 	strb.w	r3, [sp, #32]
    Transaction.ui32NumBytes    = size;
    c332:	9b00      	ldr	r3, [sp, #0]
    c334:	9307      	str	r3, [sp, #28]
    Transaction.pui32TxBuffer   = pBuf;
    c336:	9b01      	ldr	r3, [sp, #4]
    c338:	9309      	str	r3, [sp, #36]	; 0x24
    Transaction.bContinue       = false;
    c33a:	2300      	movs	r3, #0
    c33c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    Transaction.ui8RepeatCount  = 0;
    c340:	2300      	movs	r3, #0
    c342:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    Transaction.ui32PauseCondition = 0;
    c346:	2300      	movs	r3, #0
    c348:	930c      	str	r3, [sp, #48]	; 0x30
    Transaction.ui32StatusSetClr = 0;
    c34a:	2300      	movs	r3, #0
    c34c:	930d      	str	r3, [sp, #52]	; 0x34

    if ( bSpi )
    c34e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c352:	2b00      	cmp	r3, #0
    c354:	d002      	beq.n	c35c <iom_slave_write+0x48>
    {
        Transaction.uPeerInfo.ui32SpiChipSelect = AM_BSP_IOM0_CS_CHNL;
    c356:	2300      	movs	r3, #0
    c358:	9304      	str	r3, [sp, #16]
    c35a:	e001      	b.n	c360 <iom_slave_write+0x4c>
    }
    else
    {
        Transaction.uPeerInfo.ui32I2CDevAddr = I2C_ADDR;
    c35c:	2310      	movs	r3, #16
    c35e:	9304      	str	r3, [sp, #16]
    }
    am_hal_iom_blocking_transfer(g_IOMHandle, &Transaction);
    c360:	4b05      	ldr	r3, [pc, #20]	; (c378 <iom_slave_write+0x64>)
    c362:	681b      	ldr	r3, [r3, #0]
    c364:	aa04      	add	r2, sp, #16
    c366:	4611      	mov	r1, r2
    c368:	4618      	mov	r0, r3
    c36a:	f002 fa15 	bl	e798 <am_hal_iom_blocking_transfer>
}
    c36e:	bf00      	nop
    c370:	b00f      	add	sp, #60	; 0x3c
    c372:	f85d fb04 	ldr.w	pc, [sp], #4
    c376:	bf00      	nop
    c378:	10001464 	.word	0x10001464

0000c37c <iom_set_up>:
            while (1);
    }
}
#endif
static void iom_set_up(uint32_t iomModule, bool bSpi)
{
    c37c:	b500      	push	{lr}
    c37e:	b087      	sub	sp, #28
    c380:	9001      	str	r0, [sp, #4]
    c382:	460b      	mov	r3, r1
    c384:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32_t ioIntEnable = AM_IOSTEST_IOSTOHOST_DATAAVAIL_INTMASK;
    c388:	2301      	movs	r3, #1
    c38a:	9303      	str	r3, [sp, #12]

    //
    // Initialize the IOM.
    //
    am_hal_iom_initialize(iomModule, &g_IOMHandle);
    c38c:	492c      	ldr	r1, [pc, #176]	; (c440 <iom_set_up+0xc4>)
    c38e:	9801      	ldr	r0, [sp, #4]
    c390:	f001 ff42 	bl	e218 <am_hal_iom_initialize>

    am_hal_iom_power_ctrl(g_IOMHandle, AM_HAL_SYSCTRL_WAKE, false);
    c394:	4b2a      	ldr	r3, [pc, #168]	; (c440 <iom_set_up+0xc4>)
    c396:	681b      	ldr	r3, [r3, #0]
    c398:	2200      	movs	r2, #0
    c39a:	2100      	movs	r1, #0
    c39c:	4618      	mov	r0, r3
    c39e:	f001 ffcf 	bl	e340 <am_hal_iom_power_ctrl>

    if ( bSpi )
    c3a2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c3a6:	2b00      	cmp	r3, #0
    c3a8:	d00a      	beq.n	c3c0 <iom_set_up+0x44>
    {
        //
        // Set the required configuration settings for the IOM.
        //
        am_hal_iom_configure(g_IOMHandle, &g_sIOMSpiConfig);
    c3aa:	4b25      	ldr	r3, [pc, #148]	; (c440 <iom_set_up+0xc4>)
    c3ac:	681b      	ldr	r3, [r3, #0]
    c3ae:	4925      	ldr	r1, [pc, #148]	; (c444 <iom_set_up+0xc8>)
    c3b0:	4618      	mov	r0, r3
    c3b2:	f002 f89d 	bl	e4f0 <am_hal_iom_configure>

        //
        // Configure the IOM pins.
        //
        am_bsp_iom_pins_enable(iomModule, AM_HAL_IOM_SPI_MODE);
    c3b6:	2100      	movs	r1, #0
    c3b8:	9801      	ldr	r0, [sp, #4]
    c3ba:	f001 f879 	bl	d4b0 <am_bsp_iom_pins_enable>
    c3be:	e009      	b.n	c3d4 <iom_set_up+0x58>
    else
    {
        //
        // Set the required configuration settings for the IOM.
        //
        am_hal_iom_configure(g_IOMHandle, &g_sIOMI2cConfig);
    c3c0:	4b1f      	ldr	r3, [pc, #124]	; (c440 <iom_set_up+0xc4>)
    c3c2:	681b      	ldr	r3, [r3, #0]
    c3c4:	4920      	ldr	r1, [pc, #128]	; (c448 <iom_set_up+0xcc>)
    c3c6:	4618      	mov	r0, r3
    c3c8:	f002 f892 	bl	e4f0 <am_hal_iom_configure>

        //
        // Configure the IOM pins.
        //
        am_bsp_iom_pins_enable(iomModule, AM_HAL_IOM_I2C_MODE);
    c3cc:	2101      	movs	r1, #1
    c3ce:	9801      	ldr	r0, [sp, #4]
    c3d0:	f001 f86e 	bl	d4b0 <am_bsp_iom_pins_enable>
    //am_hal_interrupt_enable(AM_HAL_INTERRUPT_IOMASTER0);

    //
    // Enable the IOM.
    //
    am_hal_iom_enable(g_IOMHandle);
    c3d4:	4b1a      	ldr	r3, [pc, #104]	; (c440 <iom_set_up+0xc4>)
    c3d6:	681b      	ldr	r3, [r3, #0]
    c3d8:	4618      	mov	r0, r3
    c3da:	f001 ff45 	bl	e268 <am_hal_iom_enable>
    am_hal_gpio_pinconfig(HANDSHAKE_PIN, g_AM_BSP_GPIO_HANDSHAKE);
    c3de:	4b1b      	ldr	r3, [pc, #108]	; (c44c <iom_set_up+0xd0>)
    c3e0:	6819      	ldr	r1, [r3, #0]
    c3e2:	200a      	movs	r0, #10
    c3e4:	f001 fc4c 	bl	dc80 <am_hal_gpio_pinconfig>

    AM_HAL_GPIO_MASKCREATE(GpioIntMask);
    c3e8:	f04f 0200 	mov.w	r2, #0
    c3ec:	f04f 0300 	mov.w	r3, #0
    c3f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    // Set up the host IO interrupt
    am_hal_gpio_interrupt_clear( AM_HAL_GPIO_MASKBIT(pGpioIntMask, HANDSHAKE_PIN));
    c3f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    c3f8:	f04f 0300 	mov.w	r3, #0
    c3fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    c400:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    c404:	f001 fdd6 	bl	dfb4 <am_hal_gpio_interrupt_clear>
    // Register handler for IOS => IOM interrupt
    am_hal_gpio_interrupt_register(HANDSHAKE_PIN, hostint_handler);
    c408:	4911      	ldr	r1, [pc, #68]	; (c450 <iom_set_up+0xd4>)
    c40a:	200a      	movs	r0, #10
    c40c:	f001 fe0c 	bl	e028 <am_hal_gpio_interrupt_register>
    am_hal_gpio_interrupt_enable(AM_HAL_GPIO_MASKBIT(pGpioIntMask, HANDSHAKE_PIN));
    c410:	f44f 6280 	mov.w	r2, #1024	; 0x400
    c414:	f04f 0300 	mov.w	r3, #0
    c418:	e9cd 2304 	strd	r2, r3, [sp, #16]
    c41c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    c420:	f001 fda8 	bl	df74 <am_hal_gpio_interrupt_enable>
    NVIC_EnableIRQ(GPIO_IRQn);
    c424:	200d      	movs	r0, #13
    c426:	f7ff febb 	bl	c1a0 <__NVIC_EnableIRQ>

    // Set up IOCTL interrupts
    // IOS ==> IOM
    iom_slave_write(bSpi, IOSOFFSET_WRITE_INTEN, &ioIntEnable, 1);
    c42a:	aa03      	add	r2, sp, #12
    c42c:	f89d 0003 	ldrb.w	r0, [sp, #3]
    c430:	2301      	movs	r3, #1
    c432:	21f8      	movs	r1, #248	; 0xf8
    c434:	f7ff ff6e 	bl	c314 <iom_slave_write>
}
    c438:	bf00      	nop
    c43a:	b007      	add	sp, #28
    c43c:	f85d fb04 	ldr.w	pc, [sp], #4
    c440:	10001464 	.word	0x10001464
    c444:	10001000 	.word	0x10001000
    c448:	10001014 	.word	0x10001014
    c44c:	0000f0f0 	.word	0x0000f0f0
    c450:	0000c26d 	.word	0x0000c26d

0000c454 <update_progress>:
//
// Print a progress message.
//
//*****************************************************************************
void update_progress(uint32_t ui32NumPackets)
{
    c454:	b500      	push	{lr}
    c456:	b083      	sub	sp, #12
    c458:	9001      	str	r0, [sp, #4]
    //
    // Print a dot every 10000 packets.
    //
    if ( (ui32NumPackets - g_ui32LastUpdate) > 1000 )
    c45a:	4b08      	ldr	r3, [pc, #32]	; (c47c <update_progress+0x28>)
    c45c:	681b      	ldr	r3, [r3, #0]
    c45e:	9a01      	ldr	r2, [sp, #4]
    c460:	1ad3      	subs	r3, r2, r3
    c462:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    c466:	d905      	bls.n	c474 <update_progress+0x20>
    {
        am_util_stdio_printf(".");
    c468:	4805      	ldr	r0, [pc, #20]	; (c480 <update_progress+0x2c>)
    c46a:	f000 ff81 	bl	d370 <am_util_stdio_printf>
        g_ui32LastUpdate = ui32NumPackets;
    c46e:	4a03      	ldr	r2, [pc, #12]	; (c47c <update_progress+0x28>)
    c470:	9b01      	ldr	r3, [sp, #4]
    c472:	6013      	str	r3, [r2, #0]
    }
}
    c474:	bf00      	nop
    c476:	b003      	add	sp, #12
    c478:	f85d fb04 	ldr.w	pc, [sp], #4
    c47c:	10001468 	.word	0x10001468
    c480:	0000f048 	.word	0x0000f048

0000c484 <main>:
//
// Main function.
//
//*****************************************************************************
int main(void)
{
    c484:	b500      	push	{lr}
    c486:	b089      	sub	sp, #36	; 0x24
    uint32_t iom = IOM_MODULE;
    c488:	2300      	movs	r3, #0
    c48a:	9306      	str	r3, [sp, #24]
    bool bSpi = USE_SPI;
    c48c:	2301      	movs	r3, #1
    c48e:	f88d 3017 	strb.w	r3, [sp, #23]
    bool bReadIosData = false;
    c492:	2300      	movs	r3, #0
    c494:	f88d 301f 	strb.w	r3, [sp, #31]
    bool bDone = false;
    c498:	2300      	movs	r3, #0
    c49a:	f88d 301e 	strb.w	r3, [sp, #30]
    uint32_t data;
    uint32_t maxSize = (bSpi) ? MAX_SPI_SIZE: MAX_I2C_SIZE;
    c49e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c4a2:	2b00      	cmp	r3, #0
    c4a4:	d002      	beq.n	c4ac <main+0x28>
    c4a6:	f240 33ff 	movw	r3, #1023	; 0x3ff
    c4aa:	e000      	b.n	c4ae <main+0x2a>
    c4ac:	23ff      	movs	r3, #255	; 0xff
    c4ae:	9304      	str	r3, [sp, #16]

    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c4b0:	2100      	movs	r1, #0
    c4b2:	2000      	movs	r0, #0
    c4b4:	f001 fada 	bl	da6c <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c4b8:	4854      	ldr	r0, [pc, #336]	; (c60c <main+0x188>)
    c4ba:	f001 f92f 	bl	d71c <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c4be:	f001 f951 	bl	d764 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    c4c2:	f000 ffb5 	bl	d430 <am_bsp_low_power_init>

    //
    // Enable the ITM print interface.
    //
    am_bsp_itm_printf_enable();
    c4c6:	f000 ffd3 	bl	d470 <am_bsp_itm_printf_enable>

    //
    // Clear the terminal and print the banner.
    //
    am_util_stdio_terminal_clear();
    c4ca:	f000 ff71 	bl	d3b0 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("IOS Test Host: Waiting for at least %d bytes from the slave.", MAX_SIZE);
    c4ce:	f242 7110 	movw	r1, #10000	; 0x2710
    c4d2:	484f      	ldr	r0, [pc, #316]	; (c610 <main+0x18c>)
    c4d4:	f000 ff4c 	bl	d370 <am_util_stdio_printf>


    //
    // Allow time for all printing to finish.
    //
    am_util_delay_ms(10);
    c4d8:	200a      	movs	r0, #10
    c4da:	f000 f8a5 	bl	c628 <am_util_delay_ms>

    //
    // Enable Interrupts.
    //
    am_hal_interrupt_master_enable();
    c4de:	f001 fe11 	bl	e104 <am_hal_interrupt_master_enable>
    //
#if defined(MIKROE_1032) || defined(MIKROE_2529)
    g_sIOMI2cConfig.ui32ClockFreq = AM_HAL_IOM_400KHZ;
#endif

    iom_set_up(iom, bSpi);
    c4e2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c4e6:	4619      	mov	r1, r3
    c4e8:	9806      	ldr	r0, [sp, #24]
    c4ea:	f7ff ff47 	bl	c37c <iom_set_up>

    // Make sure the print is complete
    am_util_delay_ms(100);
    c4ee:	2064      	movs	r0, #100	; 0x64
    c4f0:	f000 f89a 	bl	c628 <am_util_delay_ms>

    // Send the START
    data = AM_IOSTEST_CMD_START_DATA;
    c4f4:	2300      	movs	r3, #0
    c4f6:	9302      	str	r3, [sp, #8]
    iom_slave_write(bSpi, IOSOFFSET_WRITE_CMD, &data, 1);
    c4f8:	aa02      	add	r2, sp, #8
    c4fa:	f89d 0017 	ldrb.w	r0, [sp, #23]
    c4fe:	2301      	movs	r3, #1
    c500:	2180      	movs	r1, #128	; 0x80
    c502:	f7ff ff07 	bl	c314 <iom_slave_write>

    //
    // Loop forever.
    //
    while ( !bDone )
    c506:	e072      	b.n	c5ee <main+0x16a>
    {
        //
        // Disable interrupt while we decide whether we're going to sleep.
        //
        uint32_t ui32IntStatus = am_hal_interrupt_master_disable();
    c508:	f001 fe00 	bl	e10c <am_hal_interrupt_master_disable>
    c50c:	9003      	str	r0, [sp, #12]

        if ( bIosInt == true )
    c50e:	4b41      	ldr	r3, [pc, #260]	; (c614 <main+0x190>)
    c510:	781b      	ldrb	r3, [r3, #0]
    c512:	b2db      	uxtb	r3, r3
    c514:	2b00      	cmp	r3, #0
    c516:	d064      	beq.n	c5e2 <main+0x15e>
        {
            //
            // Enable interrupts
            //
            am_hal_interrupt_master_set(ui32IntStatus);
    c518:	9803      	ldr	r0, [sp, #12]
    c51a:	f001 fdfb 	bl	e114 <am_hal_interrupt_master_set>
            bIosInt = false;
    c51e:	4b3d      	ldr	r3, [pc, #244]	; (c614 <main+0x190>)
    c520:	2200      	movs	r2, #0
    c522:	701a      	strb	r2, [r3, #0]
            // Read & Clear the IOINT status
            iom_slave_read(bSpi, IOSOFFSET_READ_INTSTAT, &data, 1);
    c524:	aa02      	add	r2, sp, #8
    c526:	f89d 0017 	ldrb.w	r0, [sp, #23]
    c52a:	2301      	movs	r3, #1
    c52c:	2179      	movs	r1, #121	; 0x79
    c52e:	f7ff febd 	bl	c2ac <iom_slave_read>
            // We need to clear the bit by writing to IOS
            if ( data & AM_IOSTEST_IOSTOHOST_DATAAVAIL_INTMASK )
    c532:	9b02      	ldr	r3, [sp, #8]
    c534:	f003 0301 	and.w	r3, r3, #1
    c538:	2b00      	cmp	r3, #0
    c53a:	d00b      	beq.n	c554 <main+0xd0>
            {
                data = AM_IOSTEST_IOSTOHOST_DATAAVAIL_INTMASK;
    c53c:	2301      	movs	r3, #1
    c53e:	9302      	str	r3, [sp, #8]
                iom_slave_write(bSpi, IOSOFFSET_WRITE_INTCLR, &data, 1);
    c540:	aa02      	add	r2, sp, #8
    c542:	f89d 0017 	ldrb.w	r0, [sp, #23]
    c546:	2301      	movs	r3, #1
    c548:	21fa      	movs	r1, #250	; 0xfa
    c54a:	f7ff fee3 	bl	c314 <iom_slave_write>
                // Set bReadIosData
                bReadIosData = true;
    c54e:	2301      	movs	r3, #1
    c550:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            if ( bReadIosData )
    c554:	f89d 301f 	ldrb.w	r3, [sp, #31]
    c558:	2b00      	cmp	r3, #0
    c55a:	d048      	beq.n	c5ee <main+0x16a>
            {
                uint32_t iosSize = 0;
    c55c:	2300      	movs	r3, #0
    c55e:	9301      	str	r3, [sp, #4]

                bReadIosData = false;
    c560:	2300      	movs	r3, #0
    c562:	f88d 301f 	strb.w	r3, [sp, #31]

                // Read the Data Size
                iom_slave_read(bSpi, IOSOFFSET_READ_FIFOCTR, &iosSize, 2);
    c566:	aa01      	add	r2, sp, #4
    c568:	f89d 0017 	ldrb.w	r0, [sp, #23]
    c56c:	2302      	movs	r3, #2
    c56e:	217c      	movs	r1, #124	; 0x7c
    c570:	f7ff fe9c 	bl	c2ac <iom_slave_read>
                iosSize = (iosSize > maxSize)? maxSize: iosSize;
    c574:	9a01      	ldr	r2, [sp, #4]
    c576:	9b04      	ldr	r3, [sp, #16]
    c578:	4293      	cmp	r3, r2
    c57a:	bf28      	it	cs
    c57c:	4613      	movcs	r3, r2
    c57e:	9301      	str	r3, [sp, #4]
                // Initialize Rx Buffer for later comparison
                clear_rx_buf();
    c580:	f7ff fe28 	bl	c1d4 <clear_rx_buf>
                // Read the data
                iom_slave_read(bSpi, IOSOFFSET_READ_FIFO,
    c584:	9b01      	ldr	r3, [sp, #4]
    c586:	f89d 0017 	ldrb.w	r0, [sp, #23]
    c58a:	4a23      	ldr	r2, [pc, #140]	; (c618 <main+0x194>)
    c58c:	217f      	movs	r1, #127	; 0x7f
    c58e:	f7ff fe8d 	bl	c2ac <iom_slave_read>
                    (uint32_t *)g_pui8RcvBuf, iosSize);
                // Validate Content
                if ( !validate_rx_buf(iosSize) )
    c592:	9b01      	ldr	r3, [sp, #4]
    c594:	4618      	mov	r0, r3
    c596:	f7ff fe33 	bl	c200 <validate_rx_buf>
    c59a:	4603      	mov	r3, r0
    c59c:	2b00      	cmp	r3, #0
    c59e:	d106      	bne.n	c5ae <main+0x12a>
                {
                    am_util_stdio_printf("\nData Verification failed Accum:%lu rx=%d\n",
    c5a0:	4b1e      	ldr	r3, [pc, #120]	; (c61c <main+0x198>)
    c5a2:	681b      	ldr	r3, [r3, #0]
    c5a4:	9a01      	ldr	r2, [sp, #4]
    c5a6:	4619      	mov	r1, r3
    c5a8:	481d      	ldr	r0, [pc, #116]	; (c620 <main+0x19c>)
    c5aa:	f000 fee1 	bl	d370 <am_util_stdio_printf>
                        g_startIdx, iosSize);
                }
                // Send the ACK/STOP
                data = AM_IOSTEST_CMD_ACK_DATA;
    c5ae:	2302      	movs	r3, #2
    c5b0:	9302      	str	r3, [sp, #8]

                update_progress(g_startIdx);
    c5b2:	4b1a      	ldr	r3, [pc, #104]	; (c61c <main+0x198>)
    c5b4:	681b      	ldr	r3, [r3, #0]
    c5b6:	4618      	mov	r0, r3
    c5b8:	f7ff ff4c 	bl	c454 <update_progress>

                if ( g_startIdx >= MAX_SIZE )
    c5bc:	4b17      	ldr	r3, [pc, #92]	; (c61c <main+0x198>)
    c5be:	681b      	ldr	r3, [r3, #0]
    c5c0:	f242 720f 	movw	r2, #9999	; 0x270f
    c5c4:	4293      	cmp	r3, r2
    c5c6:	d904      	bls.n	c5d2 <main+0x14e>
                {
                    bDone = true;
    c5c8:	2301      	movs	r3, #1
    c5ca:	f88d 301e 	strb.w	r3, [sp, #30]
                    data = AM_IOSTEST_CMD_STOP_DATA;
    c5ce:	2301      	movs	r3, #1
    c5d0:	9302      	str	r3, [sp, #8]
                }
                iom_slave_write(bSpi, IOSOFFSET_WRITE_CMD, &data, 1);
    c5d2:	aa02      	add	r2, sp, #8
    c5d4:	f89d 0017 	ldrb.w	r0, [sp, #23]
    c5d8:	2301      	movs	r3, #1
    c5da:	2180      	movs	r1, #128	; 0x80
    c5dc:	f7ff fe9a 	bl	c314 <iom_slave_write>
    c5e0:	e005      	b.n	c5ee <main+0x16a>
            }
        }
        else
        {
            am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c5e2:	2001      	movs	r0, #1
    c5e4:	f002 fc1e 	bl	ee24 <am_hal_sysctrl_sleep>
            //
            // Enable interrupts
            //
            am_hal_interrupt_master_set(ui32IntStatus);
    c5e8:	9803      	ldr	r0, [sp, #12]
    c5ea:	f001 fd93 	bl	e114 <am_hal_interrupt_master_set>
    while ( !bDone )
    c5ee:	f89d 301e 	ldrb.w	r3, [sp, #30]
    c5f2:	f083 0301 	eor.w	r3, r3, #1
    c5f6:	b2db      	uxtb	r3, r3
    c5f8:	2b00      	cmp	r3, #0
    c5fa:	d185      	bne.n	c508 <main+0x84>
        }
    }
    am_util_stdio_printf("\nTest Done - Total Received = =%d\n", g_startIdx);
    c5fc:	4b07      	ldr	r3, [pc, #28]	; (c61c <main+0x198>)
    c5fe:	681b      	ldr	r3, [r3, #0]
    c600:	4619      	mov	r1, r3
    c602:	4808      	ldr	r0, [pc, #32]	; (c624 <main+0x1a0>)
    c604:	f000 feb4 	bl	d370 <am_util_stdio_printf>
    while (1);
    c608:	e7fe      	b.n	c608 <main+0x184>
    c60a:	bf00      	nop
    c60c:	0000f188 	.word	0x0000f188
    c610:	0000f04c 	.word	0x0000f04c
    c614:	10001460 	.word	0x10001460
    c618:	1000105c 	.word	0x1000105c
    c61c:	1000145c 	.word	0x1000145c
    c620:	0000f08c 	.word	0x0000f08c
    c624:	0000f0b8 	.word	0x0000f0b8

0000c628 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    c628:	b500      	push	{lr}
    c62a:	b089      	sub	sp, #36	; 0x24
    c62c:	9001      	str	r0, [sp, #4]
    am_hal_delay_us( ui32MilliSeconds * 1000);
#else // AM_PART_APOLLO4
    uint32_t ui32Loops, ui32HFRC;
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    c62e:	ab03      	add	r3, sp, #12
    c630:	4618      	mov	r0, r3
    c632:	f001 fab7 	bl	dba4 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
    c636:	9b03      	ldr	r3, [sp, #12]
    c638:	9307      	str	r3, [sp, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    c63a:	9b07      	ldr	r3, [sp, #28]
    c63c:	4a07      	ldr	r2, [pc, #28]	; (c65c <am_util_delay_ms+0x34>)
    c63e:	fba2 2303 	umull	r2, r3, r2, r3
    c642:	099a      	lsrs	r2, r3, #6
    c644:	9b01      	ldr	r3, [sp, #4]
    c646:	fb02 f303 	mul.w	r3, r2, r3
    c64a:	9306      	str	r3, [sp, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    c64c:	9806      	ldr	r0, [sp, #24]
    c64e:	f001 fac7 	bl	dbe0 <am_hal_flash_delay>
#endif // AM_PART_APOLLO4
}
    c652:	bf00      	nop
    c654:	b009      	add	sp, #36	; 0x24
    c656:	f85d fb04 	ldr.w	pc, [sp], #4
    c65a:	bf00      	nop
    c65c:	057619f1 	.word	0x057619f1

0000c660 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    c660:	b082      	sub	sp, #8
    c662:	9001      	str	r0, [sp, #4]
    g_pfnCharPrint = pfnCharPrint;
    c664:	4a02      	ldr	r2, [pc, #8]	; (c670 <am_util_stdio_printf_init+0x10>)
    c666:	9b01      	ldr	r3, [sp, #4]
    c668:	6013      	str	r3, [r2, #0]
}
    c66a:	bf00      	nop
    c66c:	b002      	add	sp, #8
    c66e:	4770      	bx	lr
    c670:	1000146c 	.word	0x1000146c

0000c674 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c674:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c678:	b098      	sub	sp, #96	; 0x60
    c67a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c67e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c682:	f04f 0000 	mov.w	r0, #0
    c686:	f04f 0100 	mov.w	r1, #0
    c68a:	0018      	movs	r0, r3
    c68c:	2100      	movs	r1, #0
    c68e:	ea50 0301 	orrs.w	r3, r0, r1
    c692:	f000 80b0 	beq.w	c7f6 <divu64_10+0x182>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c696:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c69a:	f04f 0400 	mov.w	r4, #0
    c69e:	f04f 0500 	mov.w	r5, #0
    c6a2:	0854      	lsrs	r4, r2, #1
    c6a4:	ea44 74c3 	orr.w	r4, r4, r3, lsl #31
    c6a8:	085d      	lsrs	r5, r3, #1
    c6aa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c6ae:	f04f 0000 	mov.w	r0, #0
    c6b2:	f04f 0100 	mov.w	r1, #0
    c6b6:	0890      	lsrs	r0, r2, #2
    c6b8:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
    c6bc:	0899      	lsrs	r1, r3, #2
    c6be:	eb14 0a00 	adds.w	sl, r4, r0
    c6c2:	eb45 0b01 	adc.w	fp, r5, r1
    c6c6:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
        q64 += (q64 >> 4);
    c6ca:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c6ce:	f04f 0000 	mov.w	r0, #0
    c6d2:	f04f 0100 	mov.w	r1, #0
    c6d6:	0910      	lsrs	r0, r2, #4
    c6d8:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
    c6dc:	0919      	lsrs	r1, r3, #4
    c6de:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c6e2:	1814      	adds	r4, r2, r0
    c6e4:	9402      	str	r4, [sp, #8]
    c6e6:	414b      	adcs	r3, r1
    c6e8:	9303      	str	r3, [sp, #12]
    c6ea:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    c6ee:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 8);
    c6f2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c6f6:	f04f 0000 	mov.w	r0, #0
    c6fa:	f04f 0100 	mov.w	r1, #0
    c6fe:	0a10      	lsrs	r0, r2, #8
    c700:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
    c704:	0a19      	lsrs	r1, r3, #8
    c706:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c70a:	1814      	adds	r4, r2, r0
    c70c:	9404      	str	r4, [sp, #16]
    c70e:	414b      	adcs	r3, r1
    c710:	9305      	str	r3, [sp, #20]
    c712:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    c716:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 16);
    c71a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c71e:	f04f 0000 	mov.w	r0, #0
    c722:	f04f 0100 	mov.w	r1, #0
    c726:	0c10      	lsrs	r0, r2, #16
    c728:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    c72c:	0c19      	lsrs	r1, r3, #16
    c72e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c732:	1814      	adds	r4, r2, r0
    c734:	9406      	str	r4, [sp, #24]
    c736:	414b      	adcs	r3, r1
    c738:	9307      	str	r3, [sp, #28]
    c73a:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
    c73e:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 32);
    c742:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c746:	f04f 0000 	mov.w	r0, #0
    c74a:	f04f 0100 	mov.w	r1, #0
    c74e:	0018      	movs	r0, r3
    c750:	2100      	movs	r1, #0
    c752:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c756:	1814      	adds	r4, r2, r0
    c758:	9408      	str	r4, [sp, #32]
    c75a:	414b      	adcs	r3, r1
    c75c:	9309      	str	r3, [sp, #36]	; 0x24
    c75e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
    c762:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 >>= 3;
    c766:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    c76a:	f04f 0200 	mov.w	r2, #0
    c76e:	f04f 0300 	mov.w	r3, #0
    c772:	08c2      	lsrs	r2, r0, #3
    c774:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    c778:	08cb      	lsrs	r3, r1, #3
    c77a:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
        r64 = ui64Val - q64*10;
    c77e:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
    c782:	4622      	mov	r2, r4
    c784:	462b      	mov	r3, r5
    c786:	f04f 0000 	mov.w	r0, #0
    c78a:	f04f 0100 	mov.w	r1, #0
    c78e:	0099      	lsls	r1, r3, #2
    c790:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
    c794:	0090      	lsls	r0, r2, #2
    c796:	4602      	mov	r2, r0
    c798:	460b      	mov	r3, r1
    c79a:	1916      	adds	r6, r2, r4
    c79c:	eb43 0705 	adc.w	r7, r3, r5
    c7a0:	19b3      	adds	r3, r6, r6
    c7a2:	930a      	str	r3, [sp, #40]	; 0x28
    c7a4:	eb47 0307 	adc.w	r3, r7, r7
    c7a8:	930b      	str	r3, [sp, #44]	; 0x2c
    c7aa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    c7ae:	4630      	mov	r0, r6
    c7b0:	4639      	mov	r1, r7
    c7b2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c7b6:	1a14      	subs	r4, r2, r0
    c7b8:	940c      	str	r4, [sp, #48]	; 0x30
    c7ba:	eb63 0301 	sbc.w	r3, r3, r1
    c7be:	930d      	str	r3, [sp, #52]	; 0x34
    c7c0:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    c7c4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
        return q64 + ((r64 + 6) >> 4);
    c7c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    c7cc:	f112 0806 	adds.w	r8, r2, #6
    c7d0:	f143 0900 	adc.w	r9, r3, #0
    c7d4:	f04f 0200 	mov.w	r2, #0
    c7d8:	f04f 0300 	mov.w	r3, #0
    c7dc:	ea4f 1218 	mov.w	r2, r8, lsr #4
    c7e0:	ea42 7209 	orr.w	r2, r2, r9, lsl #28
    c7e4:	ea4f 1319 	mov.w	r3, r9, lsr #4
    c7e8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    c7ec:	1814      	adds	r4, r2, r0
    c7ee:	9400      	str	r4, [sp, #0]
    c7f0:	414b      	adcs	r3, r1
    c7f2:	9301      	str	r3, [sp, #4]
    c7f4:	e02a      	b.n	c84c <divu64_10+0x1d8>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    c7f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c7f8:	9317      	str	r3, [sp, #92]	; 0x5c
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c7fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c7fc:	085a      	lsrs	r2, r3, #1
    c7fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c800:	089b      	lsrs	r3, r3, #2
    c802:	4413      	add	r3, r2
    c804:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 4);
    c806:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c808:	091b      	lsrs	r3, r3, #4
    c80a:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c80c:	4413      	add	r3, r2
    c80e:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 8);
    c810:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c812:	0a1b      	lsrs	r3, r3, #8
    c814:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c816:	4413      	add	r3, r2
    c818:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 16);
    c81a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c81c:	0c1b      	lsrs	r3, r3, #16
    c81e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c820:	4413      	add	r3, r2
    c822:	9316      	str	r3, [sp, #88]	; 0x58
        q32 >>= 3;
    c824:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c826:	08db      	lsrs	r3, r3, #3
    c828:	9316      	str	r3, [sp, #88]	; 0x58
        r32 = ui32Val - q32*10;
    c82a:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c82c:	4613      	mov	r3, r2
    c82e:	009b      	lsls	r3, r3, #2
    c830:	4413      	add	r3, r2
    c832:	005b      	lsls	r3, r3, #1
    c834:	461a      	mov	r2, r3
    c836:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c838:	1a9b      	subs	r3, r3, r2
    c83a:	9315      	str	r3, [sp, #84]	; 0x54
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c83c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c83e:	3306      	adds	r3, #6
    c840:	091a      	lsrs	r2, r3, #4
    c842:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c844:	4413      	add	r3, r2
    c846:	2200      	movs	r2, #0
    c848:	9300      	str	r3, [sp, #0]
    c84a:	9201      	str	r2, [sp, #4]
    }
}
    c84c:	e9dd 2300 	ldrd	r2, r3, [sp]
    c850:	4610      	mov	r0, r2
    c852:	4619      	mov	r1, r3
    c854:	b018      	add	sp, #96	; 0x60
    c856:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c85a:	4770      	bx	lr

0000c85c <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    c85c:	b500      	push	{lr}
    c85e:	b085      	sub	sp, #20
    c860:	e9cd 0100 	strd	r0, r1, [sp]
    int iNDigits = ui64Val ? 0 : 1;
    c864:	9a00      	ldr	r2, [sp, #0]
    c866:	9b01      	ldr	r3, [sp, #4]
    c868:	4313      	orrs	r3, r2
    c86a:	2b00      	cmp	r3, #0
    c86c:	bf0c      	ite	eq
    c86e:	2301      	moveq	r3, #1
    c870:	2300      	movne	r3, #0
    c872:	b2db      	uxtb	r3, r3
    c874:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    c876:	e008      	b.n	c88a <ndigits_in_u64+0x2e>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    c878:	e9dd 0100 	ldrd	r0, r1, [sp]
    c87c:	f7ff fefa 	bl	c674 <divu64_10>
    c880:	e9cd 0100 	strd	r0, r1, [sp]
        ++iNDigits;
    c884:	9b03      	ldr	r3, [sp, #12]
    c886:	3301      	adds	r3, #1
    c888:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    c88a:	e9dd 2300 	ldrd	r2, r3, [sp]
    c88e:	4313      	orrs	r3, r2
    c890:	d1f2      	bne.n	c878 <ndigits_in_u64+0x1c>
    }

    return iNDigits;
    c892:	9b03      	ldr	r3, [sp, #12]
}
    c894:	4618      	mov	r0, r3
    c896:	b005      	add	sp, #20
    c898:	f85d fb04 	ldr.w	pc, [sp], #4

0000c89c <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    c89c:	b530      	push	{r4, r5, lr}
    c89e:	b083      	sub	sp, #12
    c8a0:	e9cd 0100 	strd	r0, r1, [sp]
    if ( i64Val < 0 )
    c8a4:	e9dd 2300 	ldrd	r2, r3, [sp]
    c8a8:	2b00      	cmp	r3, #0
    c8aa:	da07      	bge.n	c8bc <ndigits_in_i64+0x20>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    c8ac:	e9dd 2300 	ldrd	r2, r3, [sp]
    c8b0:	2100      	movs	r1, #0
    c8b2:	4254      	negs	r4, r2
    c8b4:	eb61 0503 	sbc.w	r5, r1, r3
    c8b8:	e9cd 4500 	strd	r4, r5, [sp]
    }

    return ndigits_in_u64((uint64_t) i64Val);
    c8bc:	e9dd 2300 	ldrd	r2, r3, [sp]
    c8c0:	4610      	mov	r0, r2
    c8c2:	4619      	mov	r1, r3
    c8c4:	f7ff ffca 	bl	c85c <ndigits_in_u64>
    c8c8:	4603      	mov	r3, r0
}
    c8ca:	4618      	mov	r0, r3
    c8cc:	b003      	add	sp, #12
    c8ce:	bd30      	pop	{r4, r5, pc}

0000c8d0 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    c8d0:	b084      	sub	sp, #16
    c8d2:	e9cd 0100 	strd	r0, r1, [sp]
    int iDigits = ui64Val ? 0 : 1;
    c8d6:	9a00      	ldr	r2, [sp, #0]
    c8d8:	9b01      	ldr	r3, [sp, #4]
    c8da:	4313      	orrs	r3, r2
    c8dc:	2b00      	cmp	r3, #0
    c8de:	bf0c      	ite	eq
    c8e0:	2301      	moveq	r3, #1
    c8e2:	2300      	movne	r3, #0
    c8e4:	b2db      	uxtb	r3, r3
    c8e6:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    c8e8:	e00e      	b.n	c908 <ndigits_in_hex+0x38>
    {
        ui64Val >>= 4;
    c8ea:	e9dd 0100 	ldrd	r0, r1, [sp]
    c8ee:	f04f 0200 	mov.w	r2, #0
    c8f2:	f04f 0300 	mov.w	r3, #0
    c8f6:	0902      	lsrs	r2, r0, #4
    c8f8:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    c8fc:	090b      	lsrs	r3, r1, #4
    c8fe:	e9cd 2300 	strd	r2, r3, [sp]
        ++iDigits;
    c902:	9b03      	ldr	r3, [sp, #12]
    c904:	3301      	adds	r3, #1
    c906:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    c908:	e9dd 2300 	ldrd	r2, r3, [sp]
    c90c:	4313      	orrs	r3, r2
    c90e:	d1ec      	bne.n	c8ea <ndigits_in_hex+0x1a>
    }

    return iDigits;
    c910:	9b03      	ldr	r3, [sp, #12]
}
    c912:	4618      	mov	r0, r3
    c914:	b004      	add	sp, #16
    c916:	4770      	bx	lr

0000c918 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    c918:	b086      	sub	sp, #24
    c91a:	9001      	str	r0, [sp, #4]
    c91c:	9100      	str	r1, [sp, #0]
    bool bNeg = false;
    c91e:	2300      	movs	r3, #0
    c920:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    c924:	2300      	movs	r3, #0
    c926:	9304      	str	r3, [sp, #16]
    c928:	2300      	movs	r3, #0
    c92a:	9303      	str	r3, [sp, #12]

    if ( *pcStr == '-')
    c92c:	9b01      	ldr	r3, [sp, #4]
    c92e:	781b      	ldrb	r3, [r3, #0]
    c930:	2b2d      	cmp	r3, #45	; 0x2d
    c932:	d11c      	bne.n	c96e <decstr_to_int+0x56>
    {
        bNeg = true;
    c934:	2301      	movs	r3, #1
    c936:	f88d 3017 	strb.w	r3, [sp, #23]
        pcStr++;
    c93a:	9b01      	ldr	r3, [sp, #4]
    c93c:	3301      	adds	r3, #1
    c93e:	9301      	str	r3, [sp, #4]
        uCnt++;
    c940:	9b03      	ldr	r3, [sp, #12]
    c942:	3301      	adds	r3, #1
    c944:	9303      	str	r3, [sp, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c946:	e012      	b.n	c96e <decstr_to_int+0x56>
    {
        ++uCnt;
    c948:	9b03      	ldr	r3, [sp, #12]
    c94a:	3301      	adds	r3, #1
    c94c:	9303      	str	r3, [sp, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    c94e:	9a04      	ldr	r2, [sp, #16]
    c950:	4613      	mov	r3, r2
    c952:	009b      	lsls	r3, r3, #2
    c954:	4413      	add	r3, r2
    c956:	005b      	lsls	r3, r3, #1
    c958:	9304      	str	r3, [sp, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    c95a:	9b01      	ldr	r3, [sp, #4]
    c95c:	781b      	ldrb	r3, [r3, #0]
    c95e:	461a      	mov	r2, r3
    c960:	9b04      	ldr	r3, [sp, #16]
    c962:	4413      	add	r3, r2
    c964:	3b30      	subs	r3, #48	; 0x30
    c966:	9304      	str	r3, [sp, #16]
        pcStr++;
    c968:	9b01      	ldr	r3, [sp, #4]
    c96a:	3301      	adds	r3, #1
    c96c:	9301      	str	r3, [sp, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c96e:	9b01      	ldr	r3, [sp, #4]
    c970:	781b      	ldrb	r3, [r3, #0]
    c972:	2b2f      	cmp	r3, #47	; 0x2f
    c974:	d903      	bls.n	c97e <decstr_to_int+0x66>
    c976:	9b01      	ldr	r3, [sp, #4]
    c978:	781b      	ldrb	r3, [r3, #0]
    c97a:	2b39      	cmp	r3, #57	; 0x39
    c97c:	d9e4      	bls.n	c948 <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    c97e:	9b00      	ldr	r3, [sp, #0]
    c980:	2b00      	cmp	r3, #0
    c982:	d002      	beq.n	c98a <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    c984:	9b00      	ldr	r3, [sp, #0]
    c986:	9a03      	ldr	r2, [sp, #12]
    c988:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    c98a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c98e:	2b00      	cmp	r3, #0
    c990:	d002      	beq.n	c998 <decstr_to_int+0x80>
    c992:	9b04      	ldr	r3, [sp, #16]
    c994:	425b      	negs	r3, r3
    c996:	e000      	b.n	c99a <decstr_to_int+0x82>
    c998:	9b04      	ldr	r3, [sp, #16]
}
    c99a:	4618      	mov	r0, r3
    c99c:	b006      	add	sp, #24
    c99e:	4770      	bx	lr

0000c9a0 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c9a0:	b500      	push	{lr}
    c9a2:	b091      	sub	sp, #68	; 0x44
    c9a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
    c9a8:	9201      	str	r2, [sp, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    c9aa:	2300      	movs	r3, #0
    c9ac:	930f      	str	r3, [sp, #60]	; 0x3c
    c9ae:	2300      	movs	r3, #0
    c9b0:	930e      	str	r3, [sp, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    c9b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c9b6:	f7ff fe5d 	bl	c674 <divu64_10>
    c9ba:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    c9be:	9902      	ldr	r1, [sp, #8]
    c9c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c9c2:	4613      	mov	r3, r2
    c9c4:	009b      	lsls	r3, r3, #2
    c9c6:	4413      	add	r3, r2
    c9c8:	005b      	lsls	r3, r3, #1
    c9ca:	1acb      	subs	r3, r1, r3
    c9cc:	930b      	str	r3, [sp, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    c9ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c9d0:	b2da      	uxtb	r2, r3
    c9d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c9d4:	1c59      	adds	r1, r3, #1
    c9d6:	910f      	str	r1, [sp, #60]	; 0x3c
    c9d8:	3230      	adds	r2, #48	; 0x30
    c9da:	b2d2      	uxtb	r2, r2
    c9dc:	3340      	adds	r3, #64	; 0x40
    c9de:	446b      	add	r3, sp
    c9e0:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    c9e4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    c9e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    } while ( ui64Val );
    c9ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c9f0:	4313      	orrs	r3, r2
    c9f2:	d1de      	bne.n	c9b2 <uint64_to_str+0x12>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    c9f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c9f6:	930e      	str	r3, [sp, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c9f8:	9b01      	ldr	r3, [sp, #4]
    c9fa:	2b00      	cmp	r3, #0
    c9fc:	d010      	beq.n	ca20 <uint64_to_str+0x80>
    {
        while ( ix-- )
    c9fe:	e007      	b.n	ca10 <uint64_to_str+0x70>
        {
            *pcBuf++ = tbuf[ix];
    ca00:	9b01      	ldr	r3, [sp, #4]
    ca02:	1c5a      	adds	r2, r3, #1
    ca04:	9201      	str	r2, [sp, #4]
    ca06:	a904      	add	r1, sp, #16
    ca08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    ca0a:	440a      	add	r2, r1
    ca0c:	7812      	ldrb	r2, [r2, #0]
    ca0e:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    ca10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ca12:	1e5a      	subs	r2, r3, #1
    ca14:	920f      	str	r2, [sp, #60]	; 0x3c
    ca16:	2b00      	cmp	r3, #0
    ca18:	d1f2      	bne.n	ca00 <uint64_to_str+0x60>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    ca1a:	9b01      	ldr	r3, [sp, #4]
    ca1c:	2200      	movs	r2, #0
    ca1e:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    ca20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
}
    ca22:	4618      	mov	r0, r3
    ca24:	b011      	add	sp, #68	; 0x44
    ca26:	f85d fb04 	ldr.w	pc, [sp], #4

0000ca2a <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    ca2a:	b08c      	sub	sp, #48	; 0x30
    ca2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    ca30:	9201      	str	r2, [sp, #4]
    ca32:	f88d 3003 	strb.w	r3, [sp, #3]
    int iNumDig, ix = 0;
    ca36:	2300      	movs	r3, #0
    ca38:	930b      	str	r3, [sp, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    ca3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ca3e:	4313      	orrs	r3, r2
    ca40:	d135      	bne.n	caae <uint64_to_hexstr+0x84>
    {
        tbuf[ix++] = '0';   // Print a '0'
    ca42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca44:	1c5a      	adds	r2, r3, #1
    ca46:	920b      	str	r2, [sp, #44]	; 0x2c
    ca48:	3330      	adds	r3, #48	; 0x30
    ca4a:	446b      	add	r3, sp
    ca4c:	2230      	movs	r2, #48	; 0x30
    ca4e:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    ca52:	e02c      	b.n	caae <uint64_to_hexstr+0x84>
    {
        cCh = ui64Val & 0xf;
    ca54:	f89d 3008 	ldrb.w	r3, [sp, #8]
    ca58:	f003 030f 	and.w	r3, r3, #15
    ca5c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    ca60:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    ca64:	2b09      	cmp	r3, #9
    ca66:	d90b      	bls.n	ca80 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    ca68:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ca6c:	2b00      	cmp	r3, #0
    ca6e:	d001      	beq.n	ca74 <uint64_to_hexstr+0x4a>
    ca70:	2227      	movs	r2, #39	; 0x27
    ca72:	e000      	b.n	ca76 <uint64_to_hexstr+0x4c>
    ca74:	2207      	movs	r2, #7
    ca76:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    ca7a:	4413      	add	r3, r2
    ca7c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    ca80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca82:	1c5a      	adds	r2, r3, #1
    ca84:	920b      	str	r2, [sp, #44]	; 0x2c
    ca86:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    ca8a:	3230      	adds	r2, #48	; 0x30
    ca8c:	b2d2      	uxtb	r2, r2
    ca8e:	3330      	adds	r3, #48	; 0x30
    ca90:	446b      	add	r3, sp
    ca92:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    ca96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    ca9a:	f04f 0200 	mov.w	r2, #0
    ca9e:	f04f 0300 	mov.w	r3, #0
    caa2:	0902      	lsrs	r2, r0, #4
    caa4:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    caa8:	090b      	lsrs	r3, r1, #4
    caaa:	e9cd 2302 	strd	r2, r3, [sp, #8]
    while ( ui64Val )
    caae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cab2:	4313      	orrs	r3, r2
    cab4:	d1ce      	bne.n	ca54 <uint64_to_hexstr+0x2a>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    cab6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cab8:	9309      	str	r3, [sp, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    caba:	9b01      	ldr	r3, [sp, #4]
    cabc:	2b00      	cmp	r3, #0
    cabe:	d010      	beq.n	cae2 <uint64_to_hexstr+0xb8>
    {
        while (ix--)
    cac0:	e007      	b.n	cad2 <uint64_to_hexstr+0xa8>
        {
            *pcBuf++ = tbuf[ix];
    cac2:	9b01      	ldr	r3, [sp, #4]
    cac4:	1c5a      	adds	r2, r3, #1
    cac6:	9201      	str	r2, [sp, #4]
    cac8:	a904      	add	r1, sp, #16
    caca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cacc:	440a      	add	r2, r1
    cace:	7812      	ldrb	r2, [r2, #0]
    cad0:	701a      	strb	r2, [r3, #0]
        while (ix--)
    cad2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cad4:	1e5a      	subs	r2, r3, #1
    cad6:	920b      	str	r2, [sp, #44]	; 0x2c
    cad8:	2b00      	cmp	r3, #0
    cada:	d1f2      	bne.n	cac2 <uint64_to_hexstr+0x98>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    cadc:	9b01      	ldr	r3, [sp, #4]
    cade:	2200      	movs	r2, #0
    cae0:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    cae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    cae4:	4618      	mov	r0, r3
    cae6:	b00c      	add	sp, #48	; 0x30
    cae8:	4770      	bx	lr

0000caea <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    caea:	b084      	sub	sp, #16
    caec:	9001      	str	r0, [sp, #4]
    uint32_t ui32RetVal = 0;
    caee:	2300      	movs	r3, #0
    caf0:	9303      	str	r3, [sp, #12]
    if ( !pcBuf )
    caf2:	9b01      	ldr	r3, [sp, #4]
    caf4:	2b00      	cmp	r3, #0
    caf6:	d104      	bne.n	cb02 <simple_strlen+0x18>
    {
        return ui32RetVal;
    caf8:	9b03      	ldr	r3, [sp, #12]
    cafa:	e009      	b.n	cb10 <simple_strlen+0x26>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    cafc:	9b03      	ldr	r3, [sp, #12]
    cafe:	3301      	adds	r3, #1
    cb00:	9303      	str	r3, [sp, #12]
    while ( *pcBuf++ )
    cb02:	9b01      	ldr	r3, [sp, #4]
    cb04:	1c5a      	adds	r2, r3, #1
    cb06:	9201      	str	r2, [sp, #4]
    cb08:	781b      	ldrb	r3, [r3, #0]
    cb0a:	2b00      	cmp	r3, #0
    cb0c:	d1f6      	bne.n	cafc <simple_strlen+0x12>
    }
    return ui32RetVal;
    cb0e:	9b03      	ldr	r3, [sp, #12]
}
    cb10:	4618      	mov	r0, r3
    cb12:	b004      	add	sp, #16
    cb14:	4770      	bx	lr

0000cb16 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    cb16:	b086      	sub	sp, #24
    cb18:	9003      	str	r0, [sp, #12]
    cb1a:	460b      	mov	r3, r1
    cb1c:	9201      	str	r2, [sp, #4]
    cb1e:	f88d 300b 	strb.w	r3, [sp, #11]
    int32_t i32Cnt = 0;
    cb22:	2300      	movs	r3, #0
    cb24:	9305      	str	r3, [sp, #20]

    if ( i32NumChars <= 0 )
    cb26:	9b01      	ldr	r3, [sp, #4]
    cb28:	2b00      	cmp	r3, #0
    cb2a:	dc0d      	bgt.n	cb48 <padbuffer+0x32>
    {
        return i32Cnt;
    cb2c:	9b05      	ldr	r3, [sp, #20]
    cb2e:	e011      	b.n	cb54 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    cb30:	9b03      	ldr	r3, [sp, #12]
    cb32:	2b00      	cmp	r3, #0
    cb34:	d005      	beq.n	cb42 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    cb36:	9b03      	ldr	r3, [sp, #12]
    cb38:	1c5a      	adds	r2, r3, #1
    cb3a:	9203      	str	r2, [sp, #12]
    cb3c:	f89d 200b 	ldrb.w	r2, [sp, #11]
    cb40:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    cb42:	9b05      	ldr	r3, [sp, #20]
    cb44:	3301      	adds	r3, #1
    cb46:	9305      	str	r3, [sp, #20]
    while ( i32NumChars-- )
    cb48:	9b01      	ldr	r3, [sp, #4]
    cb4a:	1e5a      	subs	r2, r3, #1
    cb4c:	9201      	str	r2, [sp, #4]
    cb4e:	2b00      	cmp	r3, #0
    cb50:	d1ee      	bne.n	cb30 <padbuffer+0x1a>
    }

    return i32Cnt;
    cb52:	9b05      	ldr	r3, [sp, #20]
}
    cb54:	4618      	mov	r0, r3
    cb56:	b006      	add	sp, #24
    cb58:	4770      	bx	lr
	...

0000cb5c <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    cb5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    cb5e:	b08f      	sub	sp, #60	; 0x3c
    cb60:	ed8d 0a03 	vstr	s0, [sp, #12]
    cb64:	9002      	str	r0, [sp, #8]
    cb66:	9101      	str	r1, [sp, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    cb68:	9b02      	ldr	r3, [sp, #8]
    cb6a:	681b      	ldr	r3, [r3, #0]
    cb6c:	9309      	str	r3, [sp, #36]	; 0x24
    if (iBufSize < 4)
    cb6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cb70:	2b03      	cmp	r3, #3
    cb72:	dc02      	bgt.n	cb7a <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    cb74:	f06f 0302 	mvn.w	r3, #2
    cb78:	e0e9      	b.n	cd4e <ftoa+0x1f2>
    }

    if (fValue == 0.0f)
    cb7a:	eddd 7a03 	vldr	s15, [sp, #12]
    cb7e:	eef5 7a40 	vcmp.f32	s15, #0.0
    cb82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cb86:	d104      	bne.n	cb92 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    cb88:	9b02      	ldr	r3, [sp, #8]
    cb8a:	4a72      	ldr	r2, [pc, #456]	; (cd54 <ftoa+0x1f8>)
    cb8c:	601a      	str	r2, [r3, #0]
        return 3;
    cb8e:	2303      	movs	r3, #3
    cb90:	e0dd      	b.n	cd4e <ftoa+0x1f2>
    }

    pcBufInitial = pcBuf;
    cb92:	9b02      	ldr	r3, [sp, #8]
    cb94:	9308      	str	r3, [sp, #32]

    unFloatValue.F = fValue;
    cb96:	9b03      	ldr	r3, [sp, #12]
    cb98:	9304      	str	r3, [sp, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    cb9a:	9b04      	ldr	r3, [sp, #16]
    cb9c:	15db      	asrs	r3, r3, #23
    cb9e:	b2db      	uxtb	r3, r3
    cba0:	3b7f      	subs	r3, #127	; 0x7f
    cba2:	9307      	str	r3, [sp, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    cba4:	9b04      	ldr	r3, [sp, #16]
    cba6:	f3c3 0316 	ubfx	r3, r3, #0, #23
    cbaa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    cbae:	9306      	str	r3, [sp, #24]
    i32FracPart = 0;
    cbb0:	2300      	movs	r3, #0
    cbb2:	930c      	str	r3, [sp, #48]	; 0x30
    i32IntPart = 0;
    cbb4:	2300      	movs	r3, #0
    cbb6:	930d      	str	r3, [sp, #52]	; 0x34

    if (iExp2 >= 31)
    cbb8:	9b07      	ldr	r3, [sp, #28]
    cbba:	2b1e      	cmp	r3, #30
    cbbc:	dd02      	ble.n	cbc4 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    cbbe:	f06f 0301 	mvn.w	r3, #1
    cbc2:	e0c4      	b.n	cd4e <ftoa+0x1f2>
    }
    else if (iExp2 < -23)
    cbc4:	9b07      	ldr	r3, [sp, #28]
    cbc6:	f113 0f17 	cmn.w	r3, #23
    cbca:	da02      	bge.n	cbd2 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    cbcc:	f04f 33ff 	mov.w	r3, #4294967295
    cbd0:	e0bd      	b.n	cd4e <ftoa+0x1f2>
    }
    else if (iExp2 >= 23)
    cbd2:	9b07      	ldr	r3, [sp, #28]
    cbd4:	2b16      	cmp	r3, #22
    cbd6:	dd06      	ble.n	cbe6 <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    cbd8:	9b07      	ldr	r3, [sp, #28]
    cbda:	3b17      	subs	r3, #23
    cbdc:	9a06      	ldr	r2, [sp, #24]
    cbde:	fa02 f303 	lsl.w	r3, r2, r3
    cbe2:	930d      	str	r3, [sp, #52]	; 0x34
    cbe4:	e01a      	b.n	cc1c <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    cbe6:	9b07      	ldr	r3, [sp, #28]
    cbe8:	2b00      	cmp	r3, #0
    cbea:	db0f      	blt.n	cc0c <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    cbec:	9b07      	ldr	r3, [sp, #28]
    cbee:	f1c3 0317 	rsb	r3, r3, #23
    cbf2:	9a06      	ldr	r2, [sp, #24]
    cbf4:	fa42 f303 	asr.w	r3, r2, r3
    cbf8:	930d      	str	r3, [sp, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    cbfa:	9b07      	ldr	r3, [sp, #28]
    cbfc:	3301      	adds	r3, #1
    cbfe:	9a06      	ldr	r2, [sp, #24]
    cc00:	fa02 f303 	lsl.w	r3, r2, r3
    cc04:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cc08:	930c      	str	r3, [sp, #48]	; 0x30
    cc0a:	e007      	b.n	cc1c <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    cc0c:	9b06      	ldr	r3, [sp, #24]
    cc0e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    cc12:	9b07      	ldr	r3, [sp, #28]
    cc14:	43db      	mvns	r3, r3
    cc16:	fa42 f303 	asr.w	r3, r2, r3
    cc1a:	930c      	str	r3, [sp, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    cc1c:	9b04      	ldr	r3, [sp, #16]
    cc1e:	2b00      	cmp	r3, #0
    cc20:	da04      	bge.n	cc2c <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    cc22:	9b02      	ldr	r3, [sp, #8]
    cc24:	1c5a      	adds	r2, r3, #1
    cc26:	9202      	str	r2, [sp, #8]
    cc28:	222d      	movs	r2, #45	; 0x2d
    cc2a:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    cc2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cc2e:	2b00      	cmp	r3, #0
    cc30:	d105      	bne.n	cc3e <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    cc32:	9b02      	ldr	r3, [sp, #8]
    cc34:	1c5a      	adds	r2, r3, #1
    cc36:	9202      	str	r2, [sp, #8]
    cc38:	2230      	movs	r2, #48	; 0x30
    cc3a:	701a      	strb	r2, [r3, #0]
    cc3c:	e023      	b.n	cc86 <ftoa+0x12a>
    }
    else
    {
        if (i32IntPart > 0)
    cc3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cc40:	2b00      	cmp	r3, #0
    cc42:	dd09      	ble.n	cc58 <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
    cc44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cc46:	17da      	asrs	r2, r3, #31
    cc48:	461e      	mov	r6, r3
    cc4a:	4617      	mov	r7, r2
    cc4c:	9a02      	ldr	r2, [sp, #8]
    cc4e:	4630      	mov	r0, r6
    cc50:	4639      	mov	r1, r7
    cc52:	f7ff fea5 	bl	c9a0 <uint64_to_str>
    cc56:	e012      	b.n	cc7e <ftoa+0x122>
        }
        else
        {
            *pcBuf++ = '-';
    cc58:	9b02      	ldr	r3, [sp, #8]
    cc5a:	1c5a      	adds	r2, r3, #1
    cc5c:	9202      	str	r2, [sp, #8]
    cc5e:	222d      	movs	r2, #45	; 0x2d
    cc60:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    cc62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cc64:	425b      	negs	r3, r3
    cc66:	17da      	asrs	r2, r3, #31
    cc68:	461c      	mov	r4, r3
    cc6a:	4615      	mov	r5, r2
    cc6c:	9a02      	ldr	r2, [sp, #8]
    cc6e:	4620      	mov	r0, r4
    cc70:	4629      	mov	r1, r5
    cc72:	f7ff fe95 	bl	c9a0 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    cc76:	e002      	b.n	cc7e <ftoa+0x122>
        {
            pcBuf++;
    cc78:	9b02      	ldr	r3, [sp, #8]
    cc7a:	3301      	adds	r3, #1
    cc7c:	9302      	str	r3, [sp, #8]
        while (*pcBuf)    // Get to end of new string
    cc7e:	9b02      	ldr	r3, [sp, #8]
    cc80:	781b      	ldrb	r3, [r3, #0]
    cc82:	2b00      	cmp	r3, #0
    cc84:	d1f8      	bne.n	cc78 <ftoa+0x11c>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    cc86:	9b02      	ldr	r3, [sp, #8]
    cc88:	1c5a      	adds	r2, r3, #1
    cc8a:	9202      	str	r2, [sp, #8]
    cc8c:	222e      	movs	r2, #46	; 0x2e
    cc8e:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    cc90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cc92:	2b00      	cmp	r3, #0
    cc94:	d105      	bne.n	cca2 <ftoa+0x146>
    {
        *pcBuf++ = '0';
    cc96:	9b02      	ldr	r3, [sp, #8]
    cc98:	1c5a      	adds	r2, r3, #1
    cc9a:	9202      	str	r2, [sp, #8]
    cc9c:	2230      	movs	r2, #48	; 0x30
    cc9e:	701a      	strb	r2, [r3, #0]
    cca0:	e04f      	b.n	cd42 <ftoa+0x1e6>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    cca2:	9a02      	ldr	r2, [sp, #8]
    cca4:	9b08      	ldr	r3, [sp, #32]
    cca6:	1ad3      	subs	r3, r2, r3
    cca8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ccaa:	1ad3      	subs	r3, r2, r3
    ccac:	3b01      	subs	r3, #1
    ccae:	9305      	str	r3, [sp, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    ccb0:	9a05      	ldr	r2, [sp, #20]
    ccb2:	9b01      	ldr	r3, [sp, #4]
    ccb4:	4293      	cmp	r3, r2
    ccb6:	bfa8      	it	ge
    ccb8:	4613      	movge	r3, r2
    ccba:	9305      	str	r3, [sp, #20]

        for (jx = 0; jx < iMax; jx++)
    ccbc:	2300      	movs	r3, #0
    ccbe:	930a      	str	r3, [sp, #40]	; 0x28
    ccc0:	e015      	b.n	ccee <ftoa+0x192>
        {
            i32FracPart *= 10;
    ccc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ccc4:	4613      	mov	r3, r2
    ccc6:	009b      	lsls	r3, r3, #2
    ccc8:	4413      	add	r3, r2
    ccca:	005b      	lsls	r3, r3, #1
    cccc:	930c      	str	r3, [sp, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    ccce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ccd0:	161b      	asrs	r3, r3, #24
    ccd2:	b2da      	uxtb	r2, r3
    ccd4:	9b02      	ldr	r3, [sp, #8]
    ccd6:	1c59      	adds	r1, r3, #1
    ccd8:	9102      	str	r1, [sp, #8]
    ccda:	3230      	adds	r2, #48	; 0x30
    ccdc:	b2d2      	uxtb	r2, r2
    ccde:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    cce0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cce2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cce6:	930c      	str	r3, [sp, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    cce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ccea:	3301      	adds	r3, #1
    ccec:	930a      	str	r3, [sp, #40]	; 0x28
    ccee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ccf0:	9b05      	ldr	r3, [sp, #20]
    ccf2:	429a      	cmp	r2, r3
    ccf4:	dbe5      	blt.n	ccc2 <ftoa+0x166>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    ccf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ccf8:	4613      	mov	r3, r2
    ccfa:	009b      	lsls	r3, r3, #2
    ccfc:	4413      	add	r3, r2
    ccfe:	005b      	lsls	r3, r3, #1
    cd00:	161b      	asrs	r3, r3, #24
    cd02:	2b04      	cmp	r3, #4
    cd04:	dd1d      	ble.n	cd42 <ftoa+0x1e6>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    cd06:	9b02      	ldr	r3, [sp, #8]
    cd08:	3b01      	subs	r3, #1
    cd0a:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cd0c:	e015      	b.n	cd3a <ftoa+0x1de>
            {
                if ( *pcBuftmp == '.' )
    cd0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cd10:	781b      	ldrb	r3, [r3, #0]
    cd12:	2b2e      	cmp	r3, #46	; 0x2e
    cd14:	d00e      	beq.n	cd34 <ftoa+0x1d8>
                {
                }
                else if ( *pcBuftmp == '9' )
    cd16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cd18:	781b      	ldrb	r3, [r3, #0]
    cd1a:	2b39      	cmp	r3, #57	; 0x39
    cd1c:	d103      	bne.n	cd26 <ftoa+0x1ca>
                {
                    *pcBuftmp = '0';
    cd1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cd20:	2230      	movs	r2, #48	; 0x30
    cd22:	701a      	strb	r2, [r3, #0]
    cd24:	e006      	b.n	cd34 <ftoa+0x1d8>
                }
                else
                {
                    *pcBuftmp += 1;
    cd26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cd28:	781b      	ldrb	r3, [r3, #0]
    cd2a:	3301      	adds	r3, #1
    cd2c:	b2da      	uxtb	r2, r3
    cd2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cd30:	701a      	strb	r2, [r3, #0]
                    break;
    cd32:	e006      	b.n	cd42 <ftoa+0x1e6>
                }
                pcBuftmp--;
    cd34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cd36:	3b01      	subs	r3, #1
    cd38:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cd3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cd3c:	9b08      	ldr	r3, [sp, #32]
    cd3e:	429a      	cmp	r2, r3
    cd40:	d2e5      	bcs.n	cd0e <ftoa+0x1b2>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    cd42:	9b02      	ldr	r3, [sp, #8]
    cd44:	2200      	movs	r2, #0
    cd46:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    cd48:	9a02      	ldr	r2, [sp, #8]
    cd4a:	9b08      	ldr	r3, [sp, #32]
    cd4c:	1ad3      	subs	r3, r2, r3
} // ftoa()
    cd4e:	4618      	mov	r0, r3
    cd50:	b00f      	add	sp, #60	; 0x3c
    cd52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cd54:	00302e30 	.word	0x00302e30

0000cd58 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    cd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cd5c:	b097      	sub	sp, #92	; 0x5c
    cd5e:	9003      	str	r0, [sp, #12]
    cd60:	9102      	str	r1, [sp, #8]
    cd62:	9201      	str	r2, [sp, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    cd64:	2300      	movs	r3, #0
    cd66:	9311      	str	r3, [sp, #68]	; 0x44
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    cd68:	2300      	movs	r3, #0
    cd6a:	930b      	str	r3, [sp, #44]	; 0x2c

    while ( *pcFmt != 0x0 )
    cd6c:	e2e9      	b.n	d342 <am_util_stdio_vsprintf+0x5ea>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    cd6e:	2306      	movs	r3, #6
    cd70:	930e      	str	r3, [sp, #56]	; 0x38

        if ( *pcFmt != '%' )
    cd72:	9b02      	ldr	r3, [sp, #8]
    cd74:	781b      	ldrb	r3, [r3, #0]
    cd76:	2b25      	cmp	r3, #37	; 0x25
    cd78:	d01f      	beq.n	cdba <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    cd7a:	9b03      	ldr	r3, [sp, #12]
    cd7c:	2b00      	cmp	r3, #0
    cd7e:	d015      	beq.n	cdac <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    cd80:	9b02      	ldr	r3, [sp, #8]
    cd82:	781b      	ldrb	r3, [r3, #0]
    cd84:	2b0a      	cmp	r3, #10
    cd86:	d10b      	bne.n	cda0 <am_util_stdio_vsprintf+0x48>
    cd88:	4ba8      	ldr	r3, [pc, #672]	; (d02c <am_util_stdio_vsprintf+0x2d4>)
    cd8a:	781b      	ldrb	r3, [r3, #0]
    cd8c:	2b00      	cmp	r3, #0
    cd8e:	d007      	beq.n	cda0 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    cd90:	9b03      	ldr	r3, [sp, #12]
    cd92:	1c5a      	adds	r2, r3, #1
    cd94:	9203      	str	r2, [sp, #12]
    cd96:	220d      	movs	r2, #13
    cd98:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    cd9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cd9c:	3301      	adds	r3, #1
    cd9e:	9311      	str	r3, [sp, #68]	; 0x44
                }
                *pcBuf++ = *pcFmt;
    cda0:	9b03      	ldr	r3, [sp, #12]
    cda2:	1c5a      	adds	r2, r3, #1
    cda4:	9203      	str	r2, [sp, #12]
    cda6:	9a02      	ldr	r2, [sp, #8]
    cda8:	7812      	ldrb	r2, [r2, #0]
    cdaa:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    cdac:	9b02      	ldr	r3, [sp, #8]
    cdae:	3301      	adds	r3, #1
    cdb0:	9302      	str	r3, [sp, #8]
            ++ui32CharCnt;
    cdb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cdb4:	3301      	adds	r3, #1
    cdb6:	9311      	str	r3, [sp, #68]	; 0x44
            continue;
    cdb8:	e2c3      	b.n	d342 <am_util_stdio_vsprintf+0x5ea>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    cdba:	9b02      	ldr	r3, [sp, #8]
    cdbc:	3301      	adds	r3, #1
    cdbe:	9302      	str	r3, [sp, #8]
        bLower = bLongLong = false;
    cdc0:	2300      	movs	r3, #0
    cdc2:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    cdc6:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    cdca:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    cdce:	2320      	movs	r3, #32
    cdd0:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

        if ( *pcFmt == '0' )
    cdd4:	9b02      	ldr	r3, [sp, #8]
    cdd6:	781b      	ldrb	r3, [r3, #0]
    cdd8:	2b30      	cmp	r3, #48	; 0x30
    cdda:	d105      	bne.n	cde8 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    cddc:	2330      	movs	r3, #48	; 0x30
    cdde:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
            ++pcFmt;
    cde2:	9b02      	ldr	r3, [sp, #8]
    cde4:	3301      	adds	r3, #1
    cde6:	9302      	str	r3, [sp, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    cde8:	ab05      	add	r3, sp, #20
    cdea:	4619      	mov	r1, r3
    cdec:	9802      	ldr	r0, [sp, #8]
    cdee:	f7ff fd93 	bl	c918 <decstr_to_int>
    cdf2:	4603      	mov	r3, r0
    cdf4:	9310      	str	r3, [sp, #64]	; 0x40
        pcFmt += ui32NumChars;
    cdf6:	9b05      	ldr	r3, [sp, #20]
    cdf8:	9a02      	ldr	r2, [sp, #8]
    cdfa:	4413      	add	r3, r2
    cdfc:	9302      	str	r3, [sp, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    cdfe:	9b02      	ldr	r3, [sp, #8]
    ce00:	781b      	ldrb	r3, [r3, #0]
    ce02:	2b73      	cmp	r3, #115	; 0x73
    ce04:	d005      	beq.n	ce12 <am_util_stdio_vsprintf+0xba>
    ce06:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce08:	2b00      	cmp	r3, #0
    ce0a:	da02      	bge.n	ce12 <am_util_stdio_vsprintf+0xba>
        {
            iWidth = -iWidth;
    ce0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce0e:	425b      	negs	r3, r3
    ce10:	9310      	str	r3, [sp, #64]	; 0x40
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    ce12:	9b02      	ldr	r3, [sp, #8]
    ce14:	781b      	ldrb	r3, [r3, #0]
    ce16:	2b2e      	cmp	r3, #46	; 0x2e
    ce18:	d10d      	bne.n	ce36 <am_util_stdio_vsprintf+0xde>
        {
            ++pcFmt;
    ce1a:	9b02      	ldr	r3, [sp, #8]
    ce1c:	3301      	adds	r3, #1
    ce1e:	9302      	str	r3, [sp, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    ce20:	ab05      	add	r3, sp, #20
    ce22:	4619      	mov	r1, r3
    ce24:	9802      	ldr	r0, [sp, #8]
    ce26:	f7ff fd77 	bl	c918 <decstr_to_int>
    ce2a:	4603      	mov	r3, r0
    ce2c:	930e      	str	r3, [sp, #56]	; 0x38
            pcFmt += ui32NumChars;
    ce2e:	9b05      	ldr	r3, [sp, #20]
    ce30:	9a02      	ldr	r2, [sp, #8]
    ce32:	4413      	add	r3, r2
    ce34:	9302      	str	r3, [sp, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    ce36:	9b02      	ldr	r3, [sp, #8]
    ce38:	781b      	ldrb	r3, [r3, #0]
    ce3a:	2b6c      	cmp	r3, #108	; 0x6c
    ce3c:	d10c      	bne.n	ce58 <am_util_stdio_vsprintf+0x100>
        {
            pcFmt++;
    ce3e:	9b02      	ldr	r3, [sp, #8]
    ce40:	3301      	adds	r3, #1
    ce42:	9302      	str	r3, [sp, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    ce44:	9b02      	ldr	r3, [sp, #8]
    ce46:	781b      	ldrb	r3, [r3, #0]
    ce48:	2b6c      	cmp	r3, #108	; 0x6c
    ce4a:	d105      	bne.n	ce58 <am_util_stdio_vsprintf+0x100>
            {
                pcFmt++;
    ce4c:	9b02      	ldr	r3, [sp, #8]
    ce4e:	3301      	adds	r3, #1
    ce50:	9302      	str	r3, [sp, #8]
                bLongLong = true;
    ce52:	2301      	movs	r3, #1
    ce54:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
            }
        }

        switch ( *pcFmt )
    ce58:	9b02      	ldr	r3, [sp, #8]
    ce5a:	781b      	ldrb	r3, [r3, #0]
    ce5c:	3b46      	subs	r3, #70	; 0x46
    ce5e:	2b32      	cmp	r3, #50	; 0x32
    ce60:	f200 825c 	bhi.w	d31c <am_util_stdio_vsprintf+0x5c4>
    ce64:	a201      	add	r2, pc, #4	; (adr r2, ce6c <am_util_stdio_vsprintf+0x114>)
    ce66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ce6a:	bf00      	nop
    ce6c:	0000d2a3 	.word	0x0000d2a3
    ce70:	0000d31d 	.word	0x0000d31d
    ce74:	0000d31d 	.word	0x0000d31d
    ce78:	0000d31d 	.word	0x0000d31d
    ce7c:	0000d31d 	.word	0x0000d31d
    ce80:	0000d31d 	.word	0x0000d31d
    ce84:	0000d31d 	.word	0x0000d31d
    ce88:	0000d31d 	.word	0x0000d31d
    ce8c:	0000d31d 	.word	0x0000d31d
    ce90:	0000d31d 	.word	0x0000d31d
    ce94:	0000d31d 	.word	0x0000d31d
    ce98:	0000d31d 	.word	0x0000d31d
    ce9c:	0000d31d 	.word	0x0000d31d
    cea0:	0000d31d 	.word	0x0000d31d
    cea4:	0000d31d 	.word	0x0000d31d
    cea8:	0000d31d 	.word	0x0000d31d
    ceac:	0000d31d 	.word	0x0000d31d
    ceb0:	0000d31d 	.word	0x0000d31d
    ceb4:	0000d037 	.word	0x0000d037
    ceb8:	0000d31d 	.word	0x0000d31d
    cebc:	0000d31d 	.word	0x0000d31d
    cec0:	0000d31d 	.word	0x0000d31d
    cec4:	0000d31d 	.word	0x0000d31d
    cec8:	0000d31d 	.word	0x0000d31d
    cecc:	0000d31d 	.word	0x0000d31d
    ced0:	0000d31d 	.word	0x0000d31d
    ced4:	0000d31d 	.word	0x0000d31d
    ced8:	0000d31d 	.word	0x0000d31d
    cedc:	0000d31d 	.word	0x0000d31d
    cee0:	0000cf39 	.word	0x0000cf39
    cee4:	0000d167 	.word	0x0000d167
    cee8:	0000d31d 	.word	0x0000d31d
    ceec:	0000d2a3 	.word	0x0000d2a3
    cef0:	0000d31d 	.word	0x0000d31d
    cef4:	0000d31d 	.word	0x0000d31d
    cef8:	0000d167 	.word	0x0000d167
    cefc:	0000d31d 	.word	0x0000d31d
    cf00:	0000d31d 	.word	0x0000d31d
    cf04:	0000d31d 	.word	0x0000d31d
    cf08:	0000d31d 	.word	0x0000d31d
    cf0c:	0000d31d 	.word	0x0000d31d
    cf10:	0000d31d 	.word	0x0000d31d
    cf14:	0000d31d 	.word	0x0000d31d
    cf18:	0000d31d 	.word	0x0000d31d
    cf1c:	0000d31d 	.word	0x0000d31d
    cf20:	0000cf5f 	.word	0x0000cf5f
    cf24:	0000d31d 	.word	0x0000d31d
    cf28:	0000d0d1 	.word	0x0000d0d1
    cf2c:	0000d31d 	.word	0x0000d31d
    cf30:	0000d31d 	.word	0x0000d31d
    cf34:	0000d031 	.word	0x0000d031
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cf38:	9b01      	ldr	r3, [sp, #4]
    cf3a:	1d1a      	adds	r2, r3, #4
    cf3c:	9201      	str	r2, [sp, #4]
    cf3e:	681b      	ldr	r3, [r3, #0]
    cf40:	f88d 301f 	strb.w	r3, [sp, #31]

                if ( pcBuf )
    cf44:	9b03      	ldr	r3, [sp, #12]
    cf46:	2b00      	cmp	r3, #0
    cf48:	d005      	beq.n	cf56 <am_util_stdio_vsprintf+0x1fe>
                {
                    *pcBuf++ = ui8CharSpecifier;
    cf4a:	9b03      	ldr	r3, [sp, #12]
    cf4c:	1c5a      	adds	r2, r3, #1
    cf4e:	9203      	str	r2, [sp, #12]
    cf50:	f89d 201f 	ldrb.w	r2, [sp, #31]
    cf54:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    cf56:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cf58:	3301      	adds	r3, #1
    cf5a:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    cf5c:	e1ee      	b.n	d33c <am_util_stdio_vsprintf+0x5e4>

            case 's':
                pcStr = va_arg(pArgs, char *);
    cf5e:	9b01      	ldr	r3, [sp, #4]
    cf60:	1d1a      	adds	r2, r3, #4
    cf62:	9201      	str	r2, [sp, #4]
    cf64:	681b      	ldr	r3, [r3, #0]
    cf66:	9315      	str	r3, [sp, #84]	; 0x54
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    cf68:	9815      	ldr	r0, [sp, #84]	; 0x54
    cf6a:	f7ff fdbe 	bl	caea <simple_strlen>
    cf6e:	900b      	str	r0, [sp, #44]	; 0x2c
                if ( iWidth > 0 )
    cf70:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf72:	2b00      	cmp	r3, #0
    cf74:	dd2e      	ble.n	cfd4 <am_util_stdio_vsprintf+0x27c>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    cf76:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cf7a:	429a      	cmp	r2, r3
    cf7c:	d22a      	bcs.n	cfd4 <am_util_stdio_vsprintf+0x27c>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cf7e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cf80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cf82:	1ad3      	subs	r3, r2, r3
    cf84:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cf86:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cf8a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cf8c:	4619      	mov	r1, r3
    cf8e:	9803      	ldr	r0, [sp, #12]
    cf90:	f7ff fdc1 	bl	cb16 <padbuffer>
    cf94:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    cf96:	9b03      	ldr	r3, [sp, #12]
    cf98:	2b00      	cmp	r3, #0
    cf9a:	d001      	beq.n	cfa0 <am_util_stdio_vsprintf+0x248>
    cf9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf9e:	e000      	b.n	cfa2 <am_util_stdio_vsprintf+0x24a>
    cfa0:	2300      	movs	r3, #0
    cfa2:	9a03      	ldr	r2, [sp, #12]
    cfa4:	4413      	add	r3, r2
    cfa6:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    cfa8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfaa:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cfac:	4413      	add	r3, r2
    cfae:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    cfb0:	2300      	movs	r3, #0
    cfb2:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }

                while (*pcStr != 0x0)
    cfb4:	e00e      	b.n	cfd4 <am_util_stdio_vsprintf+0x27c>
                {
                    if ( pcBuf )
    cfb6:	9b03      	ldr	r3, [sp, #12]
    cfb8:	2b00      	cmp	r3, #0
    cfba:	d005      	beq.n	cfc8 <am_util_stdio_vsprintf+0x270>
                    {
                        *pcBuf++ = *pcStr;
    cfbc:	9b03      	ldr	r3, [sp, #12]
    cfbe:	1c5a      	adds	r2, r3, #1
    cfc0:	9203      	str	r2, [sp, #12]
    cfc2:	9a15      	ldr	r2, [sp, #84]	; 0x54
    cfc4:	7812      	ldrb	r2, [r2, #0]
    cfc6:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    cfc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cfca:	3301      	adds	r3, #1
    cfcc:	9315      	str	r3, [sp, #84]	; 0x54
                    ++ui32CharCnt;
    cfce:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cfd0:	3301      	adds	r3, #1
    cfd2:	9311      	str	r3, [sp, #68]	; 0x44
                while (*pcStr != 0x0)
    cfd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cfd6:	781b      	ldrb	r3, [r3, #0]
    cfd8:	2b00      	cmp	r3, #0
    cfda:	d1ec      	bne.n	cfb6 <am_util_stdio_vsprintf+0x25e>
                }

                if ( iWidth )
    cfdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfde:	2b00      	cmp	r3, #0
    cfe0:	f000 81a9 	beq.w	d336 <am_util_stdio_vsprintf+0x5de>
                {
                    iWidth = -iWidth;
    cfe4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfe6:	425b      	negs	r3, r3
    cfe8:	9310      	str	r3, [sp, #64]	; 0x40

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    cfea:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cfee:	429a      	cmp	r2, r3
    cff0:	f080 81a1 	bcs.w	d336 <am_util_stdio_vsprintf+0x5de>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cff4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cff6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cff8:	1ad3      	subs	r3, r2, r3
    cffa:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cffc:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d000:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d002:	4619      	mov	r1, r3
    d004:	9803      	ldr	r0, [sp, #12]
    d006:	f7ff fd86 	bl	cb16 <padbuffer>
    d00a:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    d00c:	9b03      	ldr	r3, [sp, #12]
    d00e:	2b00      	cmp	r3, #0
    d010:	d001      	beq.n	d016 <am_util_stdio_vsprintf+0x2be>
    d012:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d014:	e000      	b.n	d018 <am_util_stdio_vsprintf+0x2c0>
    d016:	2300      	movs	r3, #0
    d018:	9a03      	ldr	r2, [sp, #12]
    d01a:	4413      	add	r3, r2
    d01c:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    d01e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d020:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d022:	4413      	add	r3, r2
    d024:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    d026:	2300      	movs	r3, #0
    d028:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }
                break;
    d02a:	e184      	b.n	d336 <am_util_stdio_vsprintf+0x5de>
    d02c:	10001570 	.word	0x10001570

            case 'x':
                bLower = true;
    d030:	2301      	movs	r3, #1
    d032:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d036:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d03a:	2b00      	cmp	r3, #0
    d03c:	d009      	beq.n	d052 <am_util_stdio_vsprintf+0x2fa>
    d03e:	9b01      	ldr	r3, [sp, #4]
    d040:	3307      	adds	r3, #7
    d042:	f023 0307 	bic.w	r3, r3, #7
    d046:	f103 0208 	add.w	r2, r3, #8
    d04a:	9201      	str	r2, [sp, #4]
    d04c:	e9d3 4500 	ldrd	r4, r5, [r3]
    d050:	e006      	b.n	d060 <am_util_stdio_vsprintf+0x308>
                                      va_arg(pArgs, uint32_t);
    d052:	9b01      	ldr	r3, [sp, #4]
    d054:	1d1a      	adds	r2, r3, #4
    d056:	9201      	str	r2, [sp, #4]
    d058:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d05a:	2200      	movs	r2, #0
    d05c:	461c      	mov	r4, r3
    d05e:	4615      	mov	r5, r2
    d060:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48

                if ( iWidth )
    d064:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d066:	2b00      	cmp	r3, #0
    d068:	d01e      	beq.n	d0a8 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    d06a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d06e:	f7ff fc2f 	bl	c8d0 <ndigits_in_hex>
    d072:	4602      	mov	r2, r0
    d074:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d076:	1a9b      	subs	r3, r3, r2
    d078:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d07a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d07e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d080:	4619      	mov	r1, r3
    d082:	9803      	ldr	r0, [sp, #12]
    d084:	f7ff fd47 	bl	cb16 <padbuffer>
    d088:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d08a:	9b03      	ldr	r3, [sp, #12]
    d08c:	2b00      	cmp	r3, #0
    d08e:	d001      	beq.n	d094 <am_util_stdio_vsprintf+0x33c>
    d090:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d092:	e000      	b.n	d096 <am_util_stdio_vsprintf+0x33e>
    d094:	2300      	movs	r3, #0
    d096:	9a03      	ldr	r2, [sp, #12]
    d098:	4413      	add	r3, r2
    d09a:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d09c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d09e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d0a0:	4413      	add	r3, r2
    d0a2:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d0a4:	2300      	movs	r3, #0
    d0a6:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    d0a8:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    d0ac:	9a03      	ldr	r2, [sp, #12]
    d0ae:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d0b2:	f7ff fcba 	bl	ca2a <uint64_to_hexstr>
    d0b6:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d0b8:	9b03      	ldr	r3, [sp, #12]
    d0ba:	2b00      	cmp	r3, #0
    d0bc:	d003      	beq.n	d0c6 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    d0be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d0c0:	9a03      	ldr	r2, [sp, #12]
    d0c2:	4413      	add	r3, r2
    d0c4:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d0c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d0c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d0ca:	4413      	add	r3, r2
    d0cc:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d0ce:	e135      	b.n	d33c <am_util_stdio_vsprintf+0x5e4>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d0d0:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d0d4:	2b00      	cmp	r3, #0
    d0d6:	d009      	beq.n	d0ec <am_util_stdio_vsprintf+0x394>
    d0d8:	9b01      	ldr	r3, [sp, #4]
    d0da:	3307      	adds	r3, #7
    d0dc:	f023 0307 	bic.w	r3, r3, #7
    d0e0:	f103 0208 	add.w	r2, r3, #8
    d0e4:	9201      	str	r2, [sp, #4]
    d0e6:	e9d3 6700 	ldrd	r6, r7, [r3]
    d0ea:	e006      	b.n	d0fa <am_util_stdio_vsprintf+0x3a2>
                                      va_arg(pArgs, uint32_t);
    d0ec:	9b01      	ldr	r3, [sp, #4]
    d0ee:	1d1a      	adds	r2, r3, #4
    d0f0:	9201      	str	r2, [sp, #4]
    d0f2:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d0f4:	2200      	movs	r2, #0
    d0f6:	461e      	mov	r6, r3
    d0f8:	4617      	mov	r7, r2
    d0fa:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48

                if ( iWidth )
    d0fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d100:	2b00      	cmp	r3, #0
    d102:	d01e      	beq.n	d142 <am_util_stdio_vsprintf+0x3ea>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    d104:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d108:	f7ff fba8 	bl	c85c <ndigits_in_u64>
    d10c:	4602      	mov	r2, r0
    d10e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d110:	1a9b      	subs	r3, r3, r2
    d112:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d114:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d118:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d11a:	4619      	mov	r1, r3
    d11c:	9803      	ldr	r0, [sp, #12]
    d11e:	f7ff fcfa 	bl	cb16 <padbuffer>
    d122:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d124:	9b03      	ldr	r3, [sp, #12]
    d126:	2b00      	cmp	r3, #0
    d128:	d001      	beq.n	d12e <am_util_stdio_vsprintf+0x3d6>
    d12a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d12c:	e000      	b.n	d130 <am_util_stdio_vsprintf+0x3d8>
    d12e:	2300      	movs	r3, #0
    d130:	9a03      	ldr	r2, [sp, #12]
    d132:	4413      	add	r3, r2
    d134:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d136:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d138:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d13a:	4413      	add	r3, r2
    d13c:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d13e:	2300      	movs	r3, #0
    d140:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d142:	9a03      	ldr	r2, [sp, #12]
    d144:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d148:	f7ff fc2a 	bl	c9a0 <uint64_to_str>
    d14c:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d14e:	9b03      	ldr	r3, [sp, #12]
    d150:	2b00      	cmp	r3, #0
    d152:	d003      	beq.n	d15c <am_util_stdio_vsprintf+0x404>
                {
                    pcBuf += iVal;
    d154:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d156:	9a03      	ldr	r2, [sp, #12]
    d158:	4413      	add	r3, r2
    d15a:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d15c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d15e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d160:	4413      	add	r3, r2
    d162:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d164:	e0ea      	b.n	d33c <am_util_stdio_vsprintf+0x5e4>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d166:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d16a:	2b00      	cmp	r3, #0
    d16c:	d009      	beq.n	d182 <am_util_stdio_vsprintf+0x42a>
    d16e:	9b01      	ldr	r3, [sp, #4]
    d170:	3307      	adds	r3, #7
    d172:	f023 0307 	bic.w	r3, r3, #7
    d176:	f103 0208 	add.w	r2, r3, #8
    d17a:	9201      	str	r2, [sp, #4]
    d17c:	e9d3 8900 	ldrd	r8, r9, [r3]
    d180:	e006      	b.n	d190 <am_util_stdio_vsprintf+0x438>
                                     va_arg(pArgs, int32_t);
    d182:	9b01      	ldr	r3, [sp, #4]
    d184:	1d1a      	adds	r2, r3, #4
    d186:	9201      	str	r2, [sp, #4]
    d188:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d18a:	17da      	asrs	r2, r3, #31
    d18c:	4698      	mov	r8, r3
    d18e:	4691      	mov	r9, r2
    d190:	e9cd 8908 	strd	r8, r9, [sp, #32]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    d194:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d198:	2b00      	cmp	r3, #0
    d19a:	da0c      	bge.n	d1b6 <am_util_stdio_vsprintf+0x45e>
                {
                    ui64Val = -i64Val;          // Get absolute value
    d19c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d1a0:	2100      	movs	r1, #0
    d1a2:	f1d2 0a00 	rsbs	sl, r2, #0
    d1a6:	eb61 0b03 	sbc.w	fp, r1, r3
    d1aa:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
                    bNeg = true;
    d1ae:	2301      	movs	r3, #1
    d1b0:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    d1b4:	e006      	b.n	d1c4 <am_util_stdio_vsprintf+0x46c>
                }
                else
                {
                    ui64Val = i64Val;
    d1b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d1ba:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
                    bNeg = false;
    d1be:	2300      	movs	r3, #0
    d1c0:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                }

                if ( iWidth )
    d1c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d1c6:	2b00      	cmp	r3, #0
    d1c8:	d04a      	beq.n	d260 <am_util_stdio_vsprintf+0x508>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    d1ca:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    d1ce:	4610      	mov	r0, r2
    d1d0:	4619      	mov	r1, r3
    d1d2:	f7ff fb63 	bl	c89c <ndigits_in_i64>
    d1d6:	4602      	mov	r2, r0
    d1d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d1da:	1a9b      	subs	r3, r3, r2
    d1dc:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg )
    d1de:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d1e2:	2b00      	cmp	r3, #0
    d1e4:	d011      	beq.n	d20a <am_util_stdio_vsprintf+0x4b2>
                    {
                        --iWidth;
    d1e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d1e8:	3b01      	subs	r3, #1
    d1ea:	9310      	str	r3, [sp, #64]	; 0x40

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    d1ec:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d1f0:	2b30      	cmp	r3, #48	; 0x30
    d1f2:	d10a      	bne.n	d20a <am_util_stdio_vsprintf+0x4b2>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    d1f4:	9b03      	ldr	r3, [sp, #12]
    d1f6:	2b00      	cmp	r3, #0
    d1f8:	d004      	beq.n	d204 <am_util_stdio_vsprintf+0x4ac>
                            {
                                *pcBuf++ = '-';
    d1fa:	9b03      	ldr	r3, [sp, #12]
    d1fc:	1c5a      	adds	r2, r3, #1
    d1fe:	9203      	str	r2, [sp, #12]
    d200:	222d      	movs	r2, #45	; 0x2d
    d202:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    d204:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d206:	3301      	adds	r3, #1
    d208:	9311      	str	r3, [sp, #68]	; 0x44
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d20a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d20e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d210:	4619      	mov	r1, r3
    d212:	9803      	ldr	r0, [sp, #12]
    d214:	f7ff fc7f 	bl	cb16 <padbuffer>
    d218:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d21a:	9b03      	ldr	r3, [sp, #12]
    d21c:	2b00      	cmp	r3, #0
    d21e:	d001      	beq.n	d224 <am_util_stdio_vsprintf+0x4cc>
    d220:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d222:	e000      	b.n	d226 <am_util_stdio_vsprintf+0x4ce>
    d224:	2300      	movs	r3, #0
    d226:	9a03      	ldr	r2, [sp, #12]
    d228:	4413      	add	r3, r2
    d22a:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d22c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d22e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d230:	4413      	add	r3, r2
    d232:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d234:	2300      	movs	r3, #0
    d236:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d238:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d23c:	2b00      	cmp	r3, #0
    d23e:	d01e      	beq.n	d27e <am_util_stdio_vsprintf+0x526>
    d240:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d244:	2b20      	cmp	r3, #32
    d246:	d11a      	bne.n	d27e <am_util_stdio_vsprintf+0x526>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    d248:	9b03      	ldr	r3, [sp, #12]
    d24a:	2b00      	cmp	r3, #0
    d24c:	d004      	beq.n	d258 <am_util_stdio_vsprintf+0x500>
                        {
                            *pcBuf++ = '-';
    d24e:	9b03      	ldr	r3, [sp, #12]
    d250:	1c5a      	adds	r2, r3, #1
    d252:	9203      	str	r2, [sp, #12]
    d254:	222d      	movs	r2, #45	; 0x2d
    d256:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    d258:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d25a:	3301      	adds	r3, #1
    d25c:	9311      	str	r3, [sp, #68]	; 0x44
    d25e:	e00e      	b.n	d27e <am_util_stdio_vsprintf+0x526>
                    }
                }
                else
                {
                    if ( bNeg )
    d260:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d264:	2b00      	cmp	r3, #0
    d266:	d00a      	beq.n	d27e <am_util_stdio_vsprintf+0x526>
                    {
                        if ( pcBuf )
    d268:	9b03      	ldr	r3, [sp, #12]
    d26a:	2b00      	cmp	r3, #0
    d26c:	d004      	beq.n	d278 <am_util_stdio_vsprintf+0x520>
                        {
                            *pcBuf++ = '-';
    d26e:	9b03      	ldr	r3, [sp, #12]
    d270:	1c5a      	adds	r2, r3, #1
    d272:	9203      	str	r2, [sp, #12]
    d274:	222d      	movs	r2, #45	; 0x2d
    d276:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    d278:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d27a:	3301      	adds	r3, #1
    d27c:	9311      	str	r3, [sp, #68]	; 0x44
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d27e:	9a03      	ldr	r2, [sp, #12]
    d280:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d284:	f7ff fb8c 	bl	c9a0 <uint64_to_str>
    d288:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d28a:	9b03      	ldr	r3, [sp, #12]
    d28c:	2b00      	cmp	r3, #0
    d28e:	d003      	beq.n	d298 <am_util_stdio_vsprintf+0x540>
                {
                    pcBuf += iVal;
    d290:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d292:	9a03      	ldr	r2, [sp, #12]
    d294:	4413      	add	r3, r2
    d296:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d298:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d29a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d29c:	4413      	add	r3, r2
    d29e:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d2a0:	e04c      	b.n	d33c <am_util_stdio_vsprintf+0x5e4>


            case 'f':
            case 'F':
                if ( pcBuf )
    d2a2:	9b03      	ldr	r3, [sp, #12]
    d2a4:	2b00      	cmp	r3, #0
    d2a6:	d048      	beq.n	d33a <am_util_stdio_vsprintf+0x5e2>
                {
                    float fValue = va_arg(pArgs, double);
    d2a8:	9b01      	ldr	r3, [sp, #4]
    d2aa:	3307      	adds	r3, #7
    d2ac:	f023 0307 	bic.w	r3, r3, #7
    d2b0:	f103 0208 	add.w	r2, r3, #8
    d2b4:	9201      	str	r2, [sp, #4]
    d2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
    d2ba:	4610      	mov	r0, r2
    d2bc:	4619      	mov	r1, r3
    d2be:	f7fe ff1f 	bl	c100 <__aeabi_d2f>
    d2c2:	4603      	mov	r3, r0
    d2c4:	9306      	str	r3, [sp, #24]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    d2c6:	9b03      	ldr	r3, [sp, #12]
    d2c8:	2214      	movs	r2, #20
    d2ca:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    d2cc:	990e      	ldr	r1, [sp, #56]	; 0x38
    d2ce:	9803      	ldr	r0, [sp, #12]
    d2d0:	ed9d 0a06 	vldr	s0, [sp, #24]
    d2d4:	f7ff fc42 	bl	cb5c <ftoa>
    d2d8:	900f      	str	r0, [sp, #60]	; 0x3c
                    if ( iVal < 0 )
    d2da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d2dc:	2b00      	cmp	r3, #0
    d2de:	da14      	bge.n	d30a <am_util_stdio_vsprintf+0x5b2>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d2e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d2e2:	f1b3 3fff 	cmp.w	r3, #4294967295
    d2e6:	d102      	bne.n	d2ee <am_util_stdio_vsprintf+0x596>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d2e8:	4b1e      	ldr	r3, [pc, #120]	; (d364 <am_util_stdio_vsprintf+0x60c>)
    d2ea:	930c      	str	r3, [sp, #48]	; 0x30
    d2ec:	e008      	b.n	d300 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d2ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d2f0:	f113 0f02 	cmn.w	r3, #2
    d2f4:	d102      	bne.n	d2fc <am_util_stdio_vsprintf+0x5a4>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d2f6:	4b1c      	ldr	r3, [pc, #112]	; (d368 <am_util_stdio_vsprintf+0x610>)
    d2f8:	930c      	str	r3, [sp, #48]	; 0x30
    d2fa:	e001      	b.n	d300 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d2fc:	4b1b      	ldr	r3, [pc, #108]	; (d36c <am_util_stdio_vsprintf+0x614>)
    d2fe:	930c      	str	r3, [sp, #48]	; 0x30
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d300:	9b03      	ldr	r3, [sp, #12]
    d302:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d304:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    d306:	2303      	movs	r3, #3
    d308:	930f      	str	r3, [sp, #60]	; 0x3c
                    }
                    ui32CharCnt += iVal;
    d30a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d30c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d30e:	4413      	add	r3, r2
    d310:	9311      	str	r3, [sp, #68]	; 0x44
                    pcBuf += iVal;
    d312:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d314:	9a03      	ldr	r2, [sp, #12]
    d316:	4413      	add	r3, r2
    d318:	9303      	str	r3, [sp, #12]
                }
                break;
    d31a:	e00e      	b.n	d33a <am_util_stdio_vsprintf+0x5e2>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d31c:	9b03      	ldr	r3, [sp, #12]
    d31e:	2b00      	cmp	r3, #0
    d320:	d005      	beq.n	d32e <am_util_stdio_vsprintf+0x5d6>
                {
                    *pcBuf++ = *pcFmt;
    d322:	9b03      	ldr	r3, [sp, #12]
    d324:	1c5a      	adds	r2, r3, #1
    d326:	9203      	str	r2, [sp, #12]
    d328:	9a02      	ldr	r2, [sp, #8]
    d32a:	7812      	ldrb	r2, [r2, #0]
    d32c:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d32e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d330:	3301      	adds	r3, #1
    d332:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d334:	e002      	b.n	d33c <am_util_stdio_vsprintf+0x5e4>
                break;
    d336:	bf00      	nop
    d338:	e000      	b.n	d33c <am_util_stdio_vsprintf+0x5e4>
                break;
    d33a:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d33c:	9b02      	ldr	r3, [sp, #8]
    d33e:	3301      	adds	r3, #1
    d340:	9302      	str	r3, [sp, #8]
    while ( *pcFmt != 0x0 )
    d342:	9b02      	ldr	r3, [sp, #8]
    d344:	781b      	ldrb	r3, [r3, #0]
    d346:	2b00      	cmp	r3, #0
    d348:	f47f ad11 	bne.w	cd6e <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d34c:	9b03      	ldr	r3, [sp, #12]
    d34e:	2b00      	cmp	r3, #0
    d350:	d002      	beq.n	d358 <am_util_stdio_vsprintf+0x600>
    {
        *pcBuf = 0x0;
    d352:	9b03      	ldr	r3, [sp, #12]
    d354:	2200      	movs	r2, #0
    d356:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d358:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    d35a:	4618      	mov	r0, r3
    d35c:	b017      	add	sp, #92	; 0x5c
    d35e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d362:	bf00      	nop
    d364:	00302e30 	.word	0x00302e30
    d368:	00232e23 	.word	0x00232e23
    d36c:	003f2e3f 	.word	0x003f2e3f

0000d370 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d370:	b40f      	push	{r0, r1, r2, r3}
    d372:	b500      	push	{lr}
    d374:	b083      	sub	sp, #12
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d376:	4b0c      	ldr	r3, [pc, #48]	; (d3a8 <am_util_stdio_printf+0x38>)
    d378:	681b      	ldr	r3, [r3, #0]
    d37a:	2b00      	cmp	r3, #0
    d37c:	d101      	bne.n	d382 <am_util_stdio_printf+0x12>
    {
        return 0;
    d37e:	2300      	movs	r3, #0
    d380:	e00c      	b.n	d39c <am_util_stdio_printf+0x2c>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d382:	ab05      	add	r3, sp, #20
    d384:	9300      	str	r3, [sp, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d386:	9a00      	ldr	r2, [sp, #0]
    d388:	9904      	ldr	r1, [sp, #16]
    d38a:	4808      	ldr	r0, [pc, #32]	; (d3ac <am_util_stdio_printf+0x3c>)
    d38c:	f7ff fce4 	bl	cd58 <am_util_stdio_vsprintf>
    d390:	9001      	str	r0, [sp, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d392:	4b05      	ldr	r3, [pc, #20]	; (d3a8 <am_util_stdio_printf+0x38>)
    d394:	681b      	ldr	r3, [r3, #0]
    d396:	4805      	ldr	r0, [pc, #20]	; (d3ac <am_util_stdio_printf+0x3c>)
    d398:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d39a:	9b01      	ldr	r3, [sp, #4]
}
    d39c:	4618      	mov	r0, r3
    d39e:	b003      	add	sp, #12
    d3a0:	f85d eb04 	ldr.w	lr, [sp], #4
    d3a4:	b004      	add	sp, #16
    d3a6:	4770      	bx	lr
    d3a8:	1000146c 	.word	0x1000146c
    d3ac:	10001470 	.word	0x10001470

0000d3b0 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    d3b0:	b508      	push	{r3, lr}
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d3b2:	4802      	ldr	r0, [pc, #8]	; (d3bc <am_util_stdio_terminal_clear+0xc>)
    d3b4:	f7ff ffdc 	bl	d370 <am_util_stdio_printf>
}
    d3b8:	bf00      	nop
    d3ba:	bd08      	pop	{r3, pc}
    d3bc:	0000f0dc 	.word	0x0000f0dc

0000d3c0 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    d3c0:	4811      	ldr	r0, [pc, #68]	; (d408 <zero_loop+0x12>)
    d3c2:	4912      	ldr	r1, [pc, #72]	; (d40c <zero_loop+0x16>)
    d3c4:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    d3c6:	f8d1 d000 	ldr.w	sp, [r1]

#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    d3ca:	4811      	ldr	r0, [pc, #68]	; (d410 <zero_loop+0x1a>)
    d3cc:	6801      	ldr	r1, [r0, #0]
    d3ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d3d2:	6001      	str	r1, [r0, #0]
    d3d4:	f3bf 8f4f 	dsb	sy
    d3d8:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    d3dc:	480d      	ldr	r0, [pc, #52]	; (d414 <zero_loop+0x1e>)
    d3de:	490e      	ldr	r1, [pc, #56]	; (d418 <zero_loop+0x22>)
    d3e0:	4a0e      	ldr	r2, [pc, #56]	; (d41c <zero_loop+0x26>)

0000d3e2 <copy_loop>:
    d3e2:	f850 3b04 	ldr.w	r3, [r0], #4
    d3e6:	f841 3b04 	str.w	r3, [r1], #4
    d3ea:	4291      	cmp	r1, r2
    d3ec:	dbf9      	blt.n	d3e2 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    d3ee:	480c      	ldr	r0, [pc, #48]	; (d420 <zero_loop+0x2a>)
    d3f0:	490c      	ldr	r1, [pc, #48]	; (d424 <zero_loop+0x2e>)
    d3f2:	f04f 0200 	mov.w	r2, #0

0000d3f6 <zero_loop>:
    d3f6:	4288      	cmp	r0, r1
    d3f8:	bfb8      	it	lt
    d3fa:	f840 2b04 	strlt.w	r2, [r0], #4
    d3fe:	dbfa      	blt.n	d3f6 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    d400:	f7ff f840 	bl	c484 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    d404:	be00      	bkpt	0x0000
}
    d406:	bf00      	nop
    d408:	e000ed08 	.word	0xe000ed08
    d40c:	0000c000 	.word	0x0000c000
    d410:	e000ed88 	.word	0xe000ed88
    d414:	0000f4ec 	.word	0x0000f4ec
    d418:	10001000 	.word	0x10001000
    d41c:	1000105c 	.word	0x1000105c
    d420:	1000105c 	.word	0x1000105c
    d424:	10004c48 	.word	0x10004c48

0000d428 <NMI_Handler>:
NMI_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d428:	e7fe      	b.n	d428 <NMI_Handler>

0000d42a <BusFault_Handler>:
HardFault_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d42a:	e7fe      	b.n	d42a <BusFault_Handler>

0000d42c <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d42c:	e7fe      	b.n	d42c <DebugMon_Handler>
	...

0000d430 <am_bsp_low_power_init>:
    d430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d432:	f001 fc0f 	bl	ec54 <am_hal_pwrctrl_low_power_init>
    d436:	f001 fceb 	bl	ee10 <am_hal_rtc_osc_disable>
    d43a:	4b0b      	ldr	r3, [pc, #44]	; (d468 <am_bsp_low_power_init+0x38>)
    d43c:	4f0b      	ldr	r7, [pc, #44]	; (d46c <am_bsp_low_power_init+0x3c>)
    d43e:	681e      	ldr	r6, [r3, #0]
    d440:	2400      	movs	r4, #0
    d442:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    d446:	4631      	mov	r1, r6
    d448:	4628      	mov	r0, r5
    d44a:	f000 fc19 	bl	dc80 <am_hal_gpio_pinconfig>
    d44e:	2103      	movs	r1, #3
    d450:	4628      	mov	r0, r5
    d452:	f000 fd4b 	bl	deec <am_hal_gpio_state_write>
    d456:	3401      	adds	r4, #1
    d458:	2100      	movs	r1, #0
    d45a:	4628      	mov	r0, r5
    d45c:	f000 fd46 	bl	deec <am_hal_gpio_state_write>
    d460:	2c05      	cmp	r4, #5
    d462:	d1ee      	bne.n	d442 <am_bsp_low_power_init+0x12>
    d464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d466:	bf00      	nop
    d468:	0000f190 	.word	0x0000f190
    d46c:	10001028 	.word	0x10001028

0000d470 <am_bsp_itm_printf_enable>:
    d470:	b500      	push	{lr}
    d472:	4b0b      	ldr	r3, [pc, #44]	; (d4a0 <am_bsp_itm_printf_enable+0x30>)
    d474:	b087      	sub	sp, #28
    d476:	2201      	movs	r2, #1
    d478:	601a      	str	r2, [r3, #0]
    d47a:	f001 fb59 	bl	eb30 <am_hal_itm_enable>
    d47e:	4b09      	ldr	r3, [pc, #36]	; (d4a4 <am_bsp_itm_printf_enable+0x34>)
    d480:	9301      	str	r3, [sp, #4]
    d482:	a801      	add	r0, sp, #4
    d484:	f001 fd06 	bl	ee94 <am_hal_tpiu_enable>
    d488:	4b07      	ldr	r3, [pc, #28]	; (d4a8 <am_bsp_itm_printf_enable+0x38>)
    d48a:	2029      	movs	r0, #41	; 0x29
    d48c:	6819      	ldr	r1, [r3, #0]
    d48e:	f000 fbf7 	bl	dc80 <am_hal_gpio_pinconfig>
    d492:	4806      	ldr	r0, [pc, #24]	; (d4ac <am_bsp_itm_printf_enable+0x3c>)
    d494:	f7ff f8e4 	bl	c660 <am_util_stdio_printf_init>
    d498:	b007      	add	sp, #28
    d49a:	f85d fb04 	ldr.w	pc, [sp], #4
    d49e:	bf00      	nop
    d4a0:	10001574 	.word	0x10001574
    d4a4:	000f4240 	.word	0x000f4240
    d4a8:	0000f184 	.word	0x0000f184
    d4ac:	0000eb79 	.word	0x0000eb79

0000d4b0 <am_bsp_iom_pins_enable>:
    d4b0:	2805      	cmp	r0, #5
    d4b2:	f200 80ea 	bhi.w	d68a <am_bsp_iom_pins_enable+0x1da>
    d4b6:	ea41 0180 	orr.w	r1, r1, r0, lsl #2
    d4ba:	b508      	push	{r3, lr}
    d4bc:	2915      	cmp	r1, #21
    d4be:	d817      	bhi.n	d4f0 <am_bsp_iom_pins_enable+0x40>
    d4c0:	e8df f011 	tbh	[pc, r1, lsl #1]
    d4c4:	00390023 	.word	0x00390023
    d4c8:	00160016 	.word	0x00160016
    d4cc:	005b0045 	.word	0x005b0045
    d4d0:	00160016 	.word	0x00160016
    d4d4:	007d0067 	.word	0x007d0067
    d4d8:	00160016 	.word	0x00160016
    d4dc:	009f0089 	.word	0x009f0089
    d4e0:	00160016 	.word	0x00160016
    d4e4:	00c100ab 	.word	0x00c100ab
    d4e8:	00160016 	.word	0x00160016
    d4ec:	001700cd 	.word	0x001700cd
    d4f0:	bd08      	pop	{r3, pc}
    d4f2:	4b66      	ldr	r3, [pc, #408]	; (d68c <am_bsp_iom_pins_enable+0x1dc>)
    d4f4:	2030      	movs	r0, #48	; 0x30
    d4f6:	6819      	ldr	r1, [r3, #0]
    d4f8:	f000 fbc2 	bl	dc80 <am_hal_gpio_pinconfig>
    d4fc:	4b64      	ldr	r3, [pc, #400]	; (d690 <am_bsp_iom_pins_enable+0x1e0>)
    d4fe:	2031      	movs	r0, #49	; 0x31
    d500:	6819      	ldr	r1, [r3, #0]
    d502:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    d506:	f000 bbbb 	b.w	dc80 <am_hal_gpio_pinconfig>
    d50a:	4b62      	ldr	r3, [pc, #392]	; (d694 <am_bsp_iom_pins_enable+0x1e4>)
    d50c:	2005      	movs	r0, #5
    d50e:	6819      	ldr	r1, [r3, #0]
    d510:	f000 fbb6 	bl	dc80 <am_hal_gpio_pinconfig>
    d514:	4b60      	ldr	r3, [pc, #384]	; (d698 <am_bsp_iom_pins_enable+0x1e8>)
    d516:	2006      	movs	r0, #6
    d518:	6819      	ldr	r1, [r3, #0]
    d51a:	f000 fbb1 	bl	dc80 <am_hal_gpio_pinconfig>
    d51e:	4b5f      	ldr	r3, [pc, #380]	; (d69c <am_bsp_iom_pins_enable+0x1ec>)
    d520:	2007      	movs	r0, #7
    d522:	6819      	ldr	r1, [r3, #0]
    d524:	f000 fbac 	bl	dc80 <am_hal_gpio_pinconfig>
    d528:	4b5d      	ldr	r3, [pc, #372]	; (d6a0 <am_bsp_iom_pins_enable+0x1f0>)
    d52a:	200b      	movs	r0, #11
    d52c:	6819      	ldr	r1, [r3, #0]
    d52e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    d532:	f000 bba5 	b.w	dc80 <am_hal_gpio_pinconfig>
    d536:	4b5b      	ldr	r3, [pc, #364]	; (d6a4 <am_bsp_iom_pins_enable+0x1f4>)
    d538:	2005      	movs	r0, #5
    d53a:	6819      	ldr	r1, [r3, #0]
    d53c:	f000 fba0 	bl	dc80 <am_hal_gpio_pinconfig>
    d540:	4b59      	ldr	r3, [pc, #356]	; (d6a8 <am_bsp_iom_pins_enable+0x1f8>)
    d542:	2006      	movs	r0, #6
    d544:	6819      	ldr	r1, [r3, #0]
    d546:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    d54a:	f000 bb99 	b.w	dc80 <am_hal_gpio_pinconfig>
    d54e:	4b57      	ldr	r3, [pc, #348]	; (d6ac <am_bsp_iom_pins_enable+0x1fc>)
    d550:	2008      	movs	r0, #8
    d552:	6819      	ldr	r1, [r3, #0]
    d554:	f000 fb94 	bl	dc80 <am_hal_gpio_pinconfig>
    d558:	4b55      	ldr	r3, [pc, #340]	; (d6b0 <am_bsp_iom_pins_enable+0x200>)
    d55a:	2009      	movs	r0, #9
    d55c:	6819      	ldr	r1, [r3, #0]
    d55e:	f000 fb8f 	bl	dc80 <am_hal_gpio_pinconfig>
    d562:	4b54      	ldr	r3, [pc, #336]	; (d6b4 <am_bsp_iom_pins_enable+0x204>)
    d564:	200a      	movs	r0, #10
    d566:	6819      	ldr	r1, [r3, #0]
    d568:	f000 fb8a 	bl	dc80 <am_hal_gpio_pinconfig>
    d56c:	4b52      	ldr	r3, [pc, #328]	; (d6b8 <am_bsp_iom_pins_enable+0x208>)
    d56e:	200e      	movs	r0, #14
    d570:	6819      	ldr	r1, [r3, #0]
    d572:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    d576:	f000 bb83 	b.w	dc80 <am_hal_gpio_pinconfig>
    d57a:	4b50      	ldr	r3, [pc, #320]	; (d6bc <am_bsp_iom_pins_enable+0x20c>)
    d57c:	2008      	movs	r0, #8
    d57e:	6819      	ldr	r1, [r3, #0]
    d580:	f000 fb7e 	bl	dc80 <am_hal_gpio_pinconfig>
    d584:	4b4e      	ldr	r3, [pc, #312]	; (d6c0 <am_bsp_iom_pins_enable+0x210>)
    d586:	2009      	movs	r0, #9
    d588:	6819      	ldr	r1, [r3, #0]
    d58a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    d58e:	f000 bb77 	b.w	dc80 <am_hal_gpio_pinconfig>
    d592:	4b4c      	ldr	r3, [pc, #304]	; (d6c4 <am_bsp_iom_pins_enable+0x214>)
    d594:	201b      	movs	r0, #27
    d596:	6819      	ldr	r1, [r3, #0]
    d598:	f000 fb72 	bl	dc80 <am_hal_gpio_pinconfig>
    d59c:	4b4a      	ldr	r3, [pc, #296]	; (d6c8 <am_bsp_iom_pins_enable+0x218>)
    d59e:	2019      	movs	r0, #25
    d5a0:	6819      	ldr	r1, [r3, #0]
    d5a2:	f000 fb6d 	bl	dc80 <am_hal_gpio_pinconfig>
    d5a6:	4b49      	ldr	r3, [pc, #292]	; (d6cc <am_bsp_iom_pins_enable+0x21c>)
    d5a8:	201c      	movs	r0, #28
    d5aa:	6819      	ldr	r1, [r3, #0]
    d5ac:	f000 fb68 	bl	dc80 <am_hal_gpio_pinconfig>
    d5b0:	4b47      	ldr	r3, [pc, #284]	; (d6d0 <am_bsp_iom_pins_enable+0x220>)
    d5b2:	200f      	movs	r0, #15
    d5b4:	6819      	ldr	r1, [r3, #0]
    d5b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    d5ba:	f000 bb61 	b.w	dc80 <am_hal_gpio_pinconfig>
    d5be:	4b45      	ldr	r3, [pc, #276]	; (d6d4 <am_bsp_iom_pins_enable+0x224>)
    d5c0:	201b      	movs	r0, #27
    d5c2:	6819      	ldr	r1, [r3, #0]
    d5c4:	f000 fb5c 	bl	dc80 <am_hal_gpio_pinconfig>
    d5c8:	4b43      	ldr	r3, [pc, #268]	; (d6d8 <am_bsp_iom_pins_enable+0x228>)
    d5ca:	2019      	movs	r0, #25
    d5cc:	6819      	ldr	r1, [r3, #0]
    d5ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    d5d2:	f000 bb55 	b.w	dc80 <am_hal_gpio_pinconfig>
    d5d6:	4b41      	ldr	r3, [pc, #260]	; (d6dc <am_bsp_iom_pins_enable+0x22c>)
    d5d8:	202a      	movs	r0, #42	; 0x2a
    d5da:	6819      	ldr	r1, [r3, #0]
    d5dc:	f000 fb50 	bl	dc80 <am_hal_gpio_pinconfig>
    d5e0:	4b3f      	ldr	r3, [pc, #252]	; (d6e0 <am_bsp_iom_pins_enable+0x230>)
    d5e2:	202b      	movs	r0, #43	; 0x2b
    d5e4:	6819      	ldr	r1, [r3, #0]
    d5e6:	f000 fb4b 	bl	dc80 <am_hal_gpio_pinconfig>
    d5ea:	4b3e      	ldr	r3, [pc, #248]	; (d6e4 <am_bsp_iom_pins_enable+0x234>)
    d5ec:	2026      	movs	r0, #38	; 0x26
    d5ee:	6819      	ldr	r1, [r3, #0]
    d5f0:	f000 fb46 	bl	dc80 <am_hal_gpio_pinconfig>
    d5f4:	4b3c      	ldr	r3, [pc, #240]	; (d6e8 <am_bsp_iom_pins_enable+0x238>)
    d5f6:	200c      	movs	r0, #12
    d5f8:	6819      	ldr	r1, [r3, #0]
    d5fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    d5fe:	f000 bb3f 	b.w	dc80 <am_hal_gpio_pinconfig>
    d602:	4b3a      	ldr	r3, [pc, #232]	; (d6ec <am_bsp_iom_pins_enable+0x23c>)
    d604:	202a      	movs	r0, #42	; 0x2a
    d606:	6819      	ldr	r1, [r3, #0]
    d608:	f000 fb3a 	bl	dc80 <am_hal_gpio_pinconfig>
    d60c:	4b38      	ldr	r3, [pc, #224]	; (d6f0 <am_bsp_iom_pins_enable+0x240>)
    d60e:	202b      	movs	r0, #43	; 0x2b
    d610:	6819      	ldr	r1, [r3, #0]
    d612:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    d616:	f000 bb33 	b.w	dc80 <am_hal_gpio_pinconfig>
    d61a:	4b36      	ldr	r3, [pc, #216]	; (d6f4 <am_bsp_iom_pins_enable+0x244>)
    d61c:	2027      	movs	r0, #39	; 0x27
    d61e:	6819      	ldr	r1, [r3, #0]
    d620:	f000 fb2e 	bl	dc80 <am_hal_gpio_pinconfig>
    d624:	4b34      	ldr	r3, [pc, #208]	; (d6f8 <am_bsp_iom_pins_enable+0x248>)
    d626:	2028      	movs	r0, #40	; 0x28
    d628:	6819      	ldr	r1, [r3, #0]
    d62a:	f000 fb29 	bl	dc80 <am_hal_gpio_pinconfig>
    d62e:	4b33      	ldr	r3, [pc, #204]	; (d6fc <am_bsp_iom_pins_enable+0x24c>)
    d630:	202c      	movs	r0, #44	; 0x2c
    d632:	6819      	ldr	r1, [r3, #0]
    d634:	f000 fb24 	bl	dc80 <am_hal_gpio_pinconfig>
    d638:	4b31      	ldr	r3, [pc, #196]	; (d700 <am_bsp_iom_pins_enable+0x250>)
    d63a:	200d      	movs	r0, #13
    d63c:	6819      	ldr	r1, [r3, #0]
    d63e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    d642:	f000 bb1d 	b.w	dc80 <am_hal_gpio_pinconfig>
    d646:	4b2f      	ldr	r3, [pc, #188]	; (d704 <am_bsp_iom_pins_enable+0x254>)
    d648:	2027      	movs	r0, #39	; 0x27
    d64a:	6819      	ldr	r1, [r3, #0]
    d64c:	f000 fb18 	bl	dc80 <am_hal_gpio_pinconfig>
    d650:	4b2d      	ldr	r3, [pc, #180]	; (d708 <am_bsp_iom_pins_enable+0x258>)
    d652:	2028      	movs	r0, #40	; 0x28
    d654:	6819      	ldr	r1, [r3, #0]
    d656:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    d65a:	f000 bb11 	b.w	dc80 <am_hal_gpio_pinconfig>
    d65e:	4b2b      	ldr	r3, [pc, #172]	; (d70c <am_bsp_iom_pins_enable+0x25c>)
    d660:	2030      	movs	r0, #48	; 0x30
    d662:	6819      	ldr	r1, [r3, #0]
    d664:	f000 fb0c 	bl	dc80 <am_hal_gpio_pinconfig>
    d668:	4b29      	ldr	r3, [pc, #164]	; (d710 <am_bsp_iom_pins_enable+0x260>)
    d66a:	2031      	movs	r0, #49	; 0x31
    d66c:	6819      	ldr	r1, [r3, #0]
    d66e:	f000 fb07 	bl	dc80 <am_hal_gpio_pinconfig>
    d672:	4b28      	ldr	r3, [pc, #160]	; (d714 <am_bsp_iom_pins_enable+0x264>)
    d674:	202f      	movs	r0, #47	; 0x2f
    d676:	6819      	ldr	r1, [r3, #0]
    d678:	f000 fb02 	bl	dc80 <am_hal_gpio_pinconfig>
    d67c:	4b26      	ldr	r3, [pc, #152]	; (d718 <am_bsp_iom_pins_enable+0x268>)
    d67e:	2010      	movs	r0, #16
    d680:	6819      	ldr	r1, [r3, #0]
    d682:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    d686:	f000 bafb 	b.w	dc80 <am_hal_gpio_pinconfig>
    d68a:	4770      	bx	lr
    d68c:	0000f17c 	.word	0x0000f17c
    d690:	0000f180 	.word	0x0000f180
    d694:	0000f100 	.word	0x0000f100
    d698:	0000f0f8 	.word	0x0000f0f8
    d69c:	0000f0fc 	.word	0x0000f0fc
    d6a0:	0000f0f4 	.word	0x0000f0f4
    d6a4:	0000f104 	.word	0x0000f104
    d6a8:	0000f108 	.word	0x0000f108
    d6ac:	0000f118 	.word	0x0000f118
    d6b0:	0000f110 	.word	0x0000f110
    d6b4:	0000f114 	.word	0x0000f114
    d6b8:	0000f10c 	.word	0x0000f10c
    d6bc:	0000f11c 	.word	0x0000f11c
    d6c0:	0000f120 	.word	0x0000f120
    d6c4:	0000f130 	.word	0x0000f130
    d6c8:	0000f128 	.word	0x0000f128
    d6cc:	0000f12c 	.word	0x0000f12c
    d6d0:	0000f124 	.word	0x0000f124
    d6d4:	0000f134 	.word	0x0000f134
    d6d8:	0000f138 	.word	0x0000f138
    d6dc:	0000f148 	.word	0x0000f148
    d6e0:	0000f140 	.word	0x0000f140
    d6e4:	0000f144 	.word	0x0000f144
    d6e8:	0000f13c 	.word	0x0000f13c
    d6ec:	0000f14c 	.word	0x0000f14c
    d6f0:	0000f150 	.word	0x0000f150
    d6f4:	0000f160 	.word	0x0000f160
    d6f8:	0000f158 	.word	0x0000f158
    d6fc:	0000f15c 	.word	0x0000f15c
    d700:	0000f154 	.word	0x0000f154
    d704:	0000f164 	.word	0x0000f164
    d708:	0000f168 	.word	0x0000f168
    d70c:	0000f178 	.word	0x0000f178
    d710:	0000f170 	.word	0x0000f170
    d714:	0000f174 	.word	0x0000f174
    d718:	0000f16c 	.word	0x0000f16c

0000d71c <am_hal_cachectrl_config>:
    d71c:	b530      	push	{r4, r5, lr}
    d71e:	b083      	sub	sp, #12
    d720:	4604      	mov	r4, r0
    d722:	f000 fcf3 	bl	e10c <am_hal_interrupt_master_disable>
    d726:	4d0e      	ldr	r5, [pc, #56]	; (d760 <am_hal_cachectrl_config+0x44>)
    d728:	9001      	str	r0, [sp, #4]
    d72a:	682b      	ldr	r3, [r5, #0]
    d72c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    d730:	602b      	str	r3, [r5, #0]
    d732:	9801      	ldr	r0, [sp, #4]
    d734:	f000 fcee 	bl	e114 <am_hal_interrupt_master_set>
    d738:	7863      	ldrb	r3, [r4, #1]
    d73a:	7822      	ldrb	r2, [r4, #0]
    d73c:	78a1      	ldrb	r1, [r4, #2]
    d73e:	021b      	lsls	r3, r3, #8
    d740:	f403 7340 	and.w	r3, r3, #768	; 0x300
    d744:	0112      	lsls	r2, r2, #4
    d746:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    d74a:	b2d2      	uxtb	r2, r2
    d74c:	4313      	orrs	r3, r2
    d74e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d752:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d756:	2000      	movs	r0, #0
    d758:	602b      	str	r3, [r5, #0]
    d75a:	b003      	add	sp, #12
    d75c:	bd30      	pop	{r4, r5, pc}
    d75e:	bf00      	nop
    d760:	40018000 	.word	0x40018000

0000d764 <am_hal_cachectrl_enable>:
    d764:	4a03      	ldr	r2, [pc, #12]	; (d774 <am_hal_cachectrl_enable+0x10>)
    d766:	6813      	ldr	r3, [r2, #0]
    d768:	f043 0301 	orr.w	r3, r3, #1
    d76c:	2000      	movs	r0, #0
    d76e:	6013      	str	r3, [r2, #0]
    d770:	4770      	bx	lr
    d772:	bf00      	nop
    d774:	40018000 	.word	0x40018000

0000d778 <am_hal_cachectrl_control>:
    d778:	b510      	push	{r4, lr}
    d77a:	3801      	subs	r0, #1
    d77c:	b08e      	sub	sp, #56	; 0x38
    d77e:	2810      	cmp	r0, #16
    d780:	f200 815e 	bhi.w	da40 <am_hal_cachectrl_control+0x2c8>
    d784:	e8df f010 	tbh	[pc, r0, lsl #1]
    d788:	00360018 	.word	0x00360018
    d78c:	0040003d 	.word	0x0040003d
    d790:	00450043 	.word	0x00450043
    d794:	0011001a 	.word	0x0011001a
    d798:	00540047 	.word	0x00540047
    d79c:	009a0061 	.word	0x009a0061
    d7a0:	010c00d3 	.word	0x010c00d3
    d7a4:	013f0126 	.word	0x013f0126
    d7a8:	001d      	.short	0x001d
    d7aa:	f44f 7300 	mov.w	r3, #512	; 0x200
    d7ae:	4aac      	ldr	r2, [pc, #688]	; (da60 <am_hal_cachectrl_control+0x2e8>)
    d7b0:	2000      	movs	r0, #0
    d7b2:	6093      	str	r3, [r2, #8]
    d7b4:	b00e      	add	sp, #56	; 0x38
    d7b6:	bd10      	pop	{r4, pc}
    d7b8:	2301      	movs	r3, #1
    d7ba:	e7f8      	b.n	d7ae <am_hal_cachectrl_control+0x36>
    d7bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    d7c0:	e7f5      	b.n	d7ae <am_hal_cachectrl_control+0x36>
    d7c2:	2900      	cmp	r1, #0
    d7c4:	f000 813c 	beq.w	da40 <am_hal_cachectrl_control+0x2c8>
    d7c8:	684a      	ldr	r2, [r1, #4]
    d7ca:	48a6      	ldr	r0, [pc, #664]	; (da64 <am_hal_cachectrl_control+0x2ec>)
    d7cc:	4202      	tst	r2, r0
    d7ce:	f040 8137 	bne.w	da40 <am_hal_cachectrl_control+0x2c8>
    d7d2:	688b      	ldr	r3, [r1, #8]
    d7d4:	4018      	ands	r0, r3
    d7d6:	f040 8133 	bne.w	da40 <am_hal_cachectrl_control+0x2c8>
    d7da:	780c      	ldrb	r4, [r1, #0]
    d7dc:	2c00      	cmp	r4, #0
    d7de:	f040 8133 	bne.w	da48 <am_hal_cachectrl_control+0x2d0>
    d7e2:	4c9f      	ldr	r4, [pc, #636]	; (da60 <am_hal_cachectrl_control+0x2e8>)
    d7e4:	7849      	ldrb	r1, [r1, #1]
    d7e6:	6122      	str	r2, [r4, #16]
    d7e8:	6163      	str	r3, [r4, #20]
    d7ea:	6823      	ldr	r3, [r4, #0]
    d7ec:	f361 0382 	bfi	r3, r1, #2, #1
    d7f0:	6023      	str	r3, [r4, #0]
    d7f2:	e7df      	b.n	d7b4 <am_hal_cachectrl_control+0x3c>
    d7f4:	4b9a      	ldr	r3, [pc, #616]	; (da60 <am_hal_cachectrl_control+0x2e8>)
    d7f6:	681b      	ldr	r3, [r3, #0]
    d7f8:	01db      	lsls	r3, r3, #7
    d7fa:	f140 811f 	bpl.w	da3c <am_hal_cachectrl_control+0x2c4>
    d7fe:	2302      	movs	r3, #2
    d800:	e7d5      	b.n	d7ae <am_hal_cachectrl_control+0x36>
    d802:	f44f 6388 	mov.w	r3, #1088	; 0x440
    d806:	e7d2      	b.n	d7ae <am_hal_cachectrl_control+0x36>
    d808:	f44f 7308 	mov.w	r3, #544	; 0x220
    d80c:	e7cf      	b.n	d7ae <am_hal_cachectrl_control+0x36>
    d80e:	2340      	movs	r3, #64	; 0x40
    d810:	e7cd      	b.n	d7ae <am_hal_cachectrl_control+0x36>
    d812:	2320      	movs	r3, #32
    d814:	e7cb      	b.n	d7ae <am_hal_cachectrl_control+0x36>
    d816:	f000 fc79 	bl	e10c <am_hal_interrupt_master_disable>
    d81a:	4a91      	ldr	r2, [pc, #580]	; (da60 <am_hal_cachectrl_control+0x2e8>)
    d81c:	9000      	str	r0, [sp, #0]
    d81e:	6813      	ldr	r3, [r2, #0]
    d820:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    d824:	6013      	str	r3, [r2, #0]
    d826:	9800      	ldr	r0, [sp, #0]
    d828:	f000 fc74 	bl	e114 <am_hal_interrupt_master_set>
    d82c:	2000      	movs	r0, #0
    d82e:	e7c1      	b.n	d7b4 <am_hal_cachectrl_control+0x3c>
    d830:	f000 fc6c 	bl	e10c <am_hal_interrupt_master_disable>
    d834:	4a8a      	ldr	r2, [pc, #552]	; (da60 <am_hal_cachectrl_control+0x2e8>)
    d836:	9001      	str	r0, [sp, #4]
    d838:	6813      	ldr	r3, [r2, #0]
    d83a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    d83e:	6013      	str	r3, [r2, #0]
    d840:	9801      	ldr	r0, [sp, #4]
    d842:	f000 fc67 	bl	e114 <am_hal_interrupt_master_set>
    d846:	2000      	movs	r0, #0
    d848:	e7b4      	b.n	d7b4 <am_hal_cachectrl_control+0x3c>
    d84a:	f000 fc5f 	bl	e10c <am_hal_interrupt_master_disable>
    d84e:	4603      	mov	r3, r0
    d850:	4885      	ldr	r0, [pc, #532]	; (da68 <am_hal_cachectrl_control+0x2f0>)
    d852:	9302      	str	r3, [sp, #8]
    d854:	f000 fa0a 	bl	dc6c <am_hal_flash_load_ui32>
    d858:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d85c:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d860:	4881      	ldr	r0, [pc, #516]	; (da68 <am_hal_cachectrl_control+0x2f0>)
    d862:	f000 fa07 	bl	dc74 <am_hal_flash_store_ui32>
    d866:	9802      	ldr	r0, [sp, #8]
    d868:	f000 fc54 	bl	e114 <am_hal_interrupt_master_set>
    d86c:	f000 fc4e 	bl	e10c <am_hal_interrupt_master_disable>
    d870:	4603      	mov	r3, r0
    d872:	487d      	ldr	r0, [pc, #500]	; (da68 <am_hal_cachectrl_control+0x2f0>)
    d874:	9303      	str	r3, [sp, #12]
    d876:	f000 f9f9 	bl	dc6c <am_hal_flash_load_ui32>
    d87a:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d87e:	f440 61ee 	orr.w	r1, r0, #1904	; 0x770
    d882:	4879      	ldr	r0, [pc, #484]	; (da68 <am_hal_cachectrl_control+0x2f0>)
    d884:	f000 f9f6 	bl	dc74 <am_hal_flash_store_ui32>
    d888:	9803      	ldr	r0, [sp, #12]
    d88a:	f000 fc43 	bl	e114 <am_hal_interrupt_master_set>
    d88e:	f000 fc3d 	bl	e10c <am_hal_interrupt_master_disable>
    d892:	4603      	mov	r3, r0
    d894:	4874      	ldr	r0, [pc, #464]	; (da68 <am_hal_cachectrl_control+0x2f0>)
    d896:	9304      	str	r3, [sp, #16]
    d898:	f000 f9e8 	bl	dc6c <am_hal_flash_load_ui32>
    d89c:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d8a0:	f020 000f 	bic.w	r0, r0, #15
    d8a4:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d8a8:	f041 0103 	orr.w	r1, r1, #3
    d8ac:	486e      	ldr	r0, [pc, #440]	; (da68 <am_hal_cachectrl_control+0x2f0>)
    d8ae:	f000 f9e1 	bl	dc74 <am_hal_flash_store_ui32>
    d8b2:	9804      	ldr	r0, [sp, #16]
    d8b4:	f000 fc2e 	bl	e114 <am_hal_interrupt_master_set>
    d8b8:	2000      	movs	r0, #0
    d8ba:	e77b      	b.n	d7b4 <am_hal_cachectrl_control+0x3c>
    d8bc:	f000 fc26 	bl	e10c <am_hal_interrupt_master_disable>
    d8c0:	4603      	mov	r3, r0
    d8c2:	4869      	ldr	r0, [pc, #420]	; (da68 <am_hal_cachectrl_control+0x2f0>)
    d8c4:	9305      	str	r3, [sp, #20]
    d8c6:	f000 f9d1 	bl	dc6c <am_hal_flash_load_ui32>
    d8ca:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d8ce:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    d8d2:	4865      	ldr	r0, [pc, #404]	; (da68 <am_hal_cachectrl_control+0x2f0>)
    d8d4:	f000 f9ce 	bl	dc74 <am_hal_flash_store_ui32>
    d8d8:	9805      	ldr	r0, [sp, #20]
    d8da:	f000 fc1b 	bl	e114 <am_hal_interrupt_master_set>
    d8de:	f000 fc15 	bl	e10c <am_hal_interrupt_master_disable>
    d8e2:	4603      	mov	r3, r0
    d8e4:	4860      	ldr	r0, [pc, #384]	; (da68 <am_hal_cachectrl_control+0x2f0>)
    d8e6:	9306      	str	r3, [sp, #24]
    d8e8:	f000 f9c0 	bl	dc6c <am_hal_flash_load_ui32>
    d8ec:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d8f0:	f440 61ea 	orr.w	r1, r0, #1872	; 0x750
    d8f4:	485c      	ldr	r0, [pc, #368]	; (da68 <am_hal_cachectrl_control+0x2f0>)
    d8f6:	f000 f9bd 	bl	dc74 <am_hal_flash_store_ui32>
    d8fa:	9806      	ldr	r0, [sp, #24]
    d8fc:	f000 fc0a 	bl	e114 <am_hal_interrupt_master_set>
    d900:	f000 fc04 	bl	e10c <am_hal_interrupt_master_disable>
    d904:	4603      	mov	r3, r0
    d906:	4858      	ldr	r0, [pc, #352]	; (da68 <am_hal_cachectrl_control+0x2f0>)
    d908:	9307      	str	r3, [sp, #28]
    d90a:	f000 f9af 	bl	dc6c <am_hal_flash_load_ui32>
    d90e:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d912:	f020 000f 	bic.w	r0, r0, #15
    d916:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d91a:	f041 0101 	orr.w	r1, r1, #1
    d91e:	4852      	ldr	r0, [pc, #328]	; (da68 <am_hal_cachectrl_control+0x2f0>)
    d920:	f000 f9a8 	bl	dc74 <am_hal_flash_store_ui32>
    d924:	9807      	ldr	r0, [sp, #28]
    d926:	f000 fbf5 	bl	e114 <am_hal_interrupt_master_set>
    d92a:	2000      	movs	r0, #0
    d92c:	e742      	b.n	d7b4 <am_hal_cachectrl_control+0x3c>
    d92e:	f000 fbed 	bl	e10c <am_hal_interrupt_master_disable>
    d932:	4603      	mov	r3, r0
    d934:	484c      	ldr	r0, [pc, #304]	; (da68 <am_hal_cachectrl_control+0x2f0>)
    d936:	9308      	str	r3, [sp, #32]
    d938:	f000 f998 	bl	dc6c <am_hal_flash_load_ui32>
    d93c:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d940:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    d944:	4848      	ldr	r0, [pc, #288]	; (da68 <am_hal_cachectrl_control+0x2f0>)
    d946:	f000 f995 	bl	dc74 <am_hal_flash_store_ui32>
    d94a:	9808      	ldr	r0, [sp, #32]
    d94c:	f000 fbe2 	bl	e114 <am_hal_interrupt_master_set>
    d950:	f000 fbdc 	bl	e10c <am_hal_interrupt_master_disable>
    d954:	4603      	mov	r3, r0
    d956:	4844      	ldr	r0, [pc, #272]	; (da68 <am_hal_cachectrl_control+0x2f0>)
    d958:	9309      	str	r3, [sp, #36]	; 0x24
    d95a:	f000 f987 	bl	dc6c <am_hal_flash_load_ui32>
    d95e:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d962:	f440 61ec 	orr.w	r1, r0, #1888	; 0x760
    d966:	4840      	ldr	r0, [pc, #256]	; (da68 <am_hal_cachectrl_control+0x2f0>)
    d968:	f000 f984 	bl	dc74 <am_hal_flash_store_ui32>
    d96c:	9809      	ldr	r0, [sp, #36]	; 0x24
    d96e:	f000 fbd1 	bl	e114 <am_hal_interrupt_master_set>
    d972:	f000 fbcb 	bl	e10c <am_hal_interrupt_master_disable>
    d976:	4603      	mov	r3, r0
    d978:	483b      	ldr	r0, [pc, #236]	; (da68 <am_hal_cachectrl_control+0x2f0>)
    d97a:	930a      	str	r3, [sp, #40]	; 0x28
    d97c:	f000 f976 	bl	dc6c <am_hal_flash_load_ui32>
    d980:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d984:	f020 000f 	bic.w	r0, r0, #15
    d988:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d98c:	f041 0101 	orr.w	r1, r1, #1
    d990:	4835      	ldr	r0, [pc, #212]	; (da68 <am_hal_cachectrl_control+0x2f0>)
    d992:	f000 f96f 	bl	dc74 <am_hal_flash_store_ui32>
    d996:	980a      	ldr	r0, [sp, #40]	; 0x28
    d998:	f000 fbbc 	bl	e114 <am_hal_interrupt_master_set>
    d99c:	2000      	movs	r0, #0
    d99e:	e709      	b.n	d7b4 <am_hal_cachectrl_control+0x3c>
    d9a0:	2900      	cmp	r1, #0
    d9a2:	d04d      	beq.n	da40 <am_hal_cachectrl_control+0x2c8>
    d9a4:	680c      	ldr	r4, [r1, #0]
    d9a6:	2c03      	cmp	r4, #3
    d9a8:	d84c      	bhi.n	da44 <am_hal_cachectrl_control+0x2cc>
    d9aa:	f000 fbaf 	bl	e10c <am_hal_interrupt_master_disable>
    d9ae:	4603      	mov	r3, r0
    d9b0:	482d      	ldr	r0, [pc, #180]	; (da68 <am_hal_cachectrl_control+0x2f0>)
    d9b2:	930b      	str	r3, [sp, #44]	; 0x2c
    d9b4:	f000 f95a 	bl	dc6c <am_hal_flash_load_ui32>
    d9b8:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d9bc:	ea40 3104 	orr.w	r1, r0, r4, lsl #12
    d9c0:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d9c4:	4828      	ldr	r0, [pc, #160]	; (da68 <am_hal_cachectrl_control+0x2f0>)
    d9c6:	f000 f955 	bl	dc74 <am_hal_flash_store_ui32>
    d9ca:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d9cc:	f000 fba2 	bl	e114 <am_hal_interrupt_master_set>
    d9d0:	2000      	movs	r0, #0
    d9d2:	e6ef      	b.n	d7b4 <am_hal_cachectrl_control+0x3c>
    d9d4:	b3a1      	cbz	r1, da40 <am_hal_cachectrl_control+0x2c8>
    d9d6:	680c      	ldr	r4, [r1, #0]
    d9d8:	2c07      	cmp	r4, #7
    d9da:	d833      	bhi.n	da44 <am_hal_cachectrl_control+0x2cc>
    d9dc:	f000 fb96 	bl	e10c <am_hal_interrupt_master_disable>
    d9e0:	4603      	mov	r3, r0
    d9e2:	4821      	ldr	r0, [pc, #132]	; (da68 <am_hal_cachectrl_control+0x2f0>)
    d9e4:	930c      	str	r3, [sp, #48]	; 0x30
    d9e6:	f000 f941 	bl	dc6c <am_hal_flash_load_ui32>
    d9ea:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d9ee:	ea40 1104 	orr.w	r1, r0, r4, lsl #4
    d9f2:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d9f6:	481c      	ldr	r0, [pc, #112]	; (da68 <am_hal_cachectrl_control+0x2f0>)
    d9f8:	f000 f93c 	bl	dc74 <am_hal_flash_store_ui32>
    d9fc:	980c      	ldr	r0, [sp, #48]	; 0x30
    d9fe:	f000 fb89 	bl	e114 <am_hal_interrupt_master_set>
    da02:	2000      	movs	r0, #0
    da04:	e6d6      	b.n	d7b4 <am_hal_cachectrl_control+0x3c>
    da06:	b1d9      	cbz	r1, da40 <am_hal_cachectrl_control+0x2c8>
    da08:	680c      	ldr	r4, [r1, #0]
    da0a:	2c0f      	cmp	r4, #15
    da0c:	d81a      	bhi.n	da44 <am_hal_cachectrl_control+0x2cc>
    da0e:	f000 fb7d 	bl	e10c <am_hal_interrupt_master_disable>
    da12:	4603      	mov	r3, r0
    da14:	4814      	ldr	r0, [pc, #80]	; (da68 <am_hal_cachectrl_control+0x2f0>)
    da16:	930d      	str	r3, [sp, #52]	; 0x34
    da18:	f000 f928 	bl	dc6c <am_hal_flash_load_ui32>
    da1c:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    da20:	f020 000f 	bic.w	r0, r0, #15
    da24:	ea40 0104 	orr.w	r1, r0, r4
    da28:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    da2c:	480e      	ldr	r0, [pc, #56]	; (da68 <am_hal_cachectrl_control+0x2f0>)
    da2e:	f000 f921 	bl	dc74 <am_hal_flash_store_ui32>
    da32:	980d      	ldr	r0, [sp, #52]	; 0x34
    da34:	f000 fb6e 	bl	e114 <am_hal_interrupt_master_set>
    da38:	2000      	movs	r0, #0
    da3a:	e6bb      	b.n	d7b4 <am_hal_cachectrl_control+0x3c>
    da3c:	2007      	movs	r0, #7
    da3e:	e6b9      	b.n	d7b4 <am_hal_cachectrl_control+0x3c>
    da40:	2006      	movs	r0, #6
    da42:	e6b7      	b.n	d7b4 <am_hal_cachectrl_control+0x3c>
    da44:	2001      	movs	r0, #1
    da46:	e6b5      	b.n	d7b4 <am_hal_cachectrl_control+0x3c>
    da48:	2c01      	cmp	r4, #1
    da4a:	d1f9      	bne.n	da40 <am_hal_cachectrl_control+0x2c8>
    da4c:	4c04      	ldr	r4, [pc, #16]	; (da60 <am_hal_cachectrl_control+0x2e8>)
    da4e:	7849      	ldrb	r1, [r1, #1]
    da50:	61a2      	str	r2, [r4, #24]
    da52:	61e3      	str	r3, [r4, #28]
    da54:	6823      	ldr	r3, [r4, #0]
    da56:	f361 03c3 	bfi	r3, r1, #3, #1
    da5a:	6023      	str	r3, [r4, #0]
    da5c:	e6aa      	b.n	d7b4 <am_hal_cachectrl_control+0x3c>
    da5e:	bf00      	nop
    da60:	40018000 	.word	0x40018000
    da64:	f800000f 	.word	0xf800000f
    da68:	40018004 	.word	0x40018004

0000da6c <am_hal_clkgen_control>:
    da6c:	4b49      	ldr	r3, [pc, #292]	; (db94 <am_hal_clkgen_control+0x128>)
    da6e:	681a      	ldr	r2, [r3, #0]
    da70:	b912      	cbnz	r2, da78 <am_hal_clkgen_control+0xc>
    da72:	4a49      	ldr	r2, [pc, #292]	; (db98 <am_hal_clkgen_control+0x12c>)
    da74:	6812      	ldr	r2, [r2, #0]
    da76:	601a      	str	r2, [r3, #0]
    da78:	2809      	cmp	r0, #9
    da7a:	f200 8089 	bhi.w	db90 <am_hal_clkgen_control+0x124>
    da7e:	e8df f000 	tbb	[pc, r0]
    da82:	160d      	.short	0x160d
    da84:	423a261e 	.word	0x423a261e
    da88:	055c544c 	.word	0x055c544c
    da8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    da90:	2000      	movs	r0, #0
    da92:	6a1a      	ldr	r2, [r3, #32]
    da94:	f36f 0200 	bfc	r2, #0, #1
    da98:	621a      	str	r2, [r3, #32]
    da9a:	4770      	bx	lr
    da9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    daa0:	2200      	movs	r2, #0
    daa2:	2147      	movs	r1, #71	; 0x47
    daa4:	6159      	str	r1, [r3, #20]
    daa6:	4610      	mov	r0, r2
    daa8:	619a      	str	r2, [r3, #24]
    daaa:	615a      	str	r2, [r3, #20]
    daac:	4770      	bx	lr
    daae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dab2:	2000      	movs	r0, #0
    dab4:	899a      	ldrh	r2, [r3, #12]
    dab6:	f36f 0200 	bfc	r2, #0, #1
    daba:	819a      	strh	r2, [r3, #12]
    dabc:	4770      	bx	lr
    dabe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dac2:	2000      	movs	r0, #0
    dac4:	899a      	ldrh	r2, [r3, #12]
    dac6:	f36f 0241 	bfc	r2, #1, #1
    daca:	819a      	strh	r2, [r3, #12]
    dacc:	4770      	bx	lr
    dace:	4a33      	ldr	r2, [pc, #204]	; (db9c <am_hal_clkgen_control+0x130>)
    dad0:	68d3      	ldr	r3, [r2, #12]
    dad2:	b2db      	uxtb	r3, r3
    dad4:	2b21      	cmp	r3, #33	; 0x21
    dad6:	d106      	bne.n	dae6 <am_hal_clkgen_control+0x7a>
    dad8:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    dadc:	2101      	movs	r1, #1
    dade:	f361 2309 	bfi	r3, r1, #8, #2
    dae2:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    dae6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    daea:	2000      	movs	r0, #0
    daec:	8993      	ldrh	r3, [r2, #12]
    daee:	f043 0301 	orr.w	r3, r3, #1
    daf2:	8193      	strh	r3, [r2, #12]
    daf4:	4770      	bx	lr
    daf6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dafa:	2000      	movs	r0, #0
    dafc:	8993      	ldrh	r3, [r2, #12]
    dafe:	f043 0302 	orr.w	r3, r3, #2
    db02:	8193      	strh	r3, [r2, #12]
    db04:	4770      	bx	lr
    db06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    db0a:	2200      	movs	r2, #0
    db0c:	2047      	movs	r0, #71	; 0x47
    db0e:	2101      	movs	r1, #1
    db10:	6158      	str	r0, [r3, #20]
    db12:	6199      	str	r1, [r3, #24]
    db14:	4610      	mov	r0, r2
    db16:	615a      	str	r2, [r3, #20]
    db18:	4770      	bx	lr
    db1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    db1e:	2000      	movs	r0, #0
    db20:	899a      	ldrh	r2, [r3, #12]
    db22:	f36f 12c7 	bfc	r2, #7, #1
    db26:	819a      	strh	r2, [r3, #12]
    db28:	4770      	bx	lr
    db2a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    db2e:	2000      	movs	r0, #0
    db30:	8993      	ldrh	r3, [r2, #12]
    db32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    db36:	8193      	strh	r3, [r2, #12]
    db38:	4770      	bx	lr
    db3a:	4a18      	ldr	r2, [pc, #96]	; (db9c <am_hal_clkgen_control+0x130>)
    db3c:	68d3      	ldr	r3, [r2, #12]
    db3e:	b2db      	uxtb	r3, r3
    db40:	2b21      	cmp	r3, #33	; 0x21
    db42:	d00a      	beq.n	db5a <am_hal_clkgen_control+0xee>
    db44:	b139      	cbz	r1, db56 <am_hal_clkgen_control+0xea>
    db46:	680b      	ldr	r3, [r1, #0]
    db48:	f043 0301 	orr.w	r3, r3, #1
    db4c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    db50:	2000      	movs	r0, #0
    db52:	6213      	str	r3, [r2, #32]
    db54:	4770      	bx	lr
    db56:	4b12      	ldr	r3, [pc, #72]	; (dba0 <am_hal_clkgen_control+0x134>)
    db58:	e7f8      	b.n	db4c <am_hal_clkgen_control+0xe0>
    db5a:	b500      	push	{lr}
    db5c:	b083      	sub	sp, #12
    db5e:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    db62:	9101      	str	r1, [sp, #4]
    db64:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    db68:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    db6c:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    db70:	f000 f836 	bl	dbe0 <am_hal_flash_delay>
    db74:	9901      	ldr	r1, [sp, #4]
    db76:	b149      	cbz	r1, db8c <am_hal_clkgen_control+0x120>
    db78:	680b      	ldr	r3, [r1, #0]
    db7a:	f043 0301 	orr.w	r3, r3, #1
    db7e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    db82:	2000      	movs	r0, #0
    db84:	6213      	str	r3, [r2, #32]
    db86:	b003      	add	sp, #12
    db88:	f85d fb04 	ldr.w	pc, [sp], #4
    db8c:	4b04      	ldr	r3, [pc, #16]	; (dba0 <am_hal_clkgen_control+0x134>)
    db8e:	e7f6      	b.n	db7e <am_hal_clkgen_control+0x112>
    db90:	2006      	movs	r0, #6
    db92:	4770      	bx	lr
    db94:	10004ae0 	.word	0x10004ae0
    db98:	4ffff000 	.word	0x4ffff000
    db9c:	40020000 	.word	0x40020000
    dba0:	0025b801 	.word	0x0025b801

0000dba4 <am_hal_clkgen_status_get>:
    dba4:	b1b0      	cbz	r0, dbd4 <am_hal_clkgen_status_get+0x30>
    dba6:	b410      	push	{r4}
    dba8:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    dbac:	4603      	mov	r3, r0
    dbae:	698c      	ldr	r4, [r1, #24]
    dbb0:	4809      	ldr	r0, [pc, #36]	; (dbd8 <am_hal_clkgen_status_get+0x34>)
    dbb2:	4a0a      	ldr	r2, [pc, #40]	; (dbdc <am_hal_clkgen_status_get+0x38>)
    dbb4:	f014 0f01 	tst.w	r4, #1
    dbb8:	bf08      	it	eq
    dbba:	4602      	moveq	r2, r0
    dbbc:	601a      	str	r2, [r3, #0]
    dbbe:	69ca      	ldr	r2, [r1, #28]
    dbc0:	f85d 4b04 	ldr.w	r4, [sp], #4
    dbc4:	f002 0101 	and.w	r1, r2, #1
    dbc8:	f3c2 0240 	ubfx	r2, r2, #1, #1
    dbcc:	2000      	movs	r0, #0
    dbce:	6059      	str	r1, [r3, #4]
    dbd0:	721a      	strb	r2, [r3, #8]
    dbd2:	4770      	bx	lr
    dbd4:	2006      	movs	r0, #6
    dbd6:	4770      	bx	lr
    dbd8:	02dc6c00 	.word	0x02dc6c00
    dbdc:	016e3600 	.word	0x016e3600

0000dbe0 <am_hal_flash_delay>:
    dbe0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dbe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    dbe6:	075b      	lsls	r3, r3, #29
    dbe8:	bf46      	itte	mi
    dbea:	0040      	lslmi	r0, r0, #1
    dbec:	230e      	movmi	r3, #14
    dbee:	230b      	movpl	r3, #11
    dbf0:	4298      	cmp	r0, r3
    dbf2:	d902      	bls.n	dbfa <am_hal_flash_delay+0x1a>
    dbf4:	4a01      	ldr	r2, [pc, #4]	; (dbfc <am_hal_flash_delay+0x1c>)
    dbf6:	1ac0      	subs	r0, r0, r3
    dbf8:	4710      	bx	r2
    dbfa:	4770      	bx	lr
    dbfc:	0800009d 	.word	0x0800009d

0000dc00 <am_hal_flash_delay_status_check>:
    dc00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dc04:	f89d c020 	ldrb.w	ip, [sp, #32]
    dc08:	f8df 805c 	ldr.w	r8, [pc, #92]	; dc68 <am_hal_flash_delay_status_check+0x68>
    dc0c:	4604      	mov	r4, r0
    dc0e:	460d      	mov	r5, r1
    dc10:	4616      	mov	r6, r2
    dc12:	461f      	mov	r7, r3
    dc14:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    dc18:	f1bc 0f00 	cmp.w	ip, #0
    dc1c:	d00a      	beq.n	dc34 <am_hal_flash_delay_status_check+0x34>
    dc1e:	e01a      	b.n	dc56 <am_hal_flash_delay_status_check+0x56>
    dc20:	b1f4      	cbz	r4, dc60 <am_hal_flash_delay_status_check+0x60>
    dc22:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    dc26:	f013 0f04 	tst.w	r3, #4
    dc2a:	bf0c      	ite	eq
    dc2c:	2005      	moveq	r0, #5
    dc2e:	2012      	movne	r0, #18
    dc30:	3c01      	subs	r4, #1
    dc32:	47c0      	blx	r8
    dc34:	6828      	ldr	r0, [r5, #0]
    dc36:	4030      	ands	r0, r6
    dc38:	42b8      	cmp	r0, r7
    dc3a:	d0f1      	beq.n	dc20 <am_hal_flash_delay_status_check+0x20>
    dc3c:	2000      	movs	r0, #0
    dc3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dc42:	b16c      	cbz	r4, dc60 <am_hal_flash_delay_status_check+0x60>
    dc44:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    dc48:	f013 0f04 	tst.w	r3, #4
    dc4c:	bf0c      	ite	eq
    dc4e:	2005      	moveq	r0, #5
    dc50:	2012      	movne	r0, #18
    dc52:	3c01      	subs	r4, #1
    dc54:	47c0      	blx	r8
    dc56:	6828      	ldr	r0, [r5, #0]
    dc58:	4030      	ands	r0, r6
    dc5a:	42b8      	cmp	r0, r7
    dc5c:	d1f1      	bne.n	dc42 <am_hal_flash_delay_status_check+0x42>
    dc5e:	e7ed      	b.n	dc3c <am_hal_flash_delay_status_check+0x3c>
    dc60:	2004      	movs	r0, #4
    dc62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dc66:	bf00      	nop
    dc68:	0800009d 	.word	0x0800009d

0000dc6c <am_hal_flash_load_ui32>:
    dc6c:	4b00      	ldr	r3, [pc, #0]	; (dc70 <am_hal_flash_load_ui32+0x4>)
    dc6e:	4718      	bx	r3
    dc70:	08000075 	.word	0x08000075

0000dc74 <am_hal_flash_store_ui32>:
    dc74:	4b01      	ldr	r3, [pc, #4]	; (dc7c <am_hal_flash_store_ui32+0x8>)
    dc76:	f043 0301 	orr.w	r3, r3, #1
    dc7a:	4718      	bx	r3
    dc7c:	10001050 	.word	0x10001050

0000dc80 <am_hal_gpio_pinconfig>:
    dc80:	2831      	cmp	r0, #49	; 0x31
    dc82:	f200 80c3 	bhi.w	de0c <am_hal_gpio_pinconfig+0x18c>
    dc86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dc8a:	4604      	mov	r4, r0
    dc8c:	f011 07e0 	ands.w	r7, r1, #224	; 0xe0
    dc90:	f001 0007 	and.w	r0, r1, #7
    dc94:	b085      	sub	sp, #20
    dc96:	f3c1 03c1 	ubfx	r3, r1, #3, #2
    dc9a:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    dc9e:	d00f      	beq.n	dcc0 <am_hal_gpio_pinconfig+0x40>
    dca0:	f3c1 1642 	ubfx	r6, r1, #5, #3
    dca4:	1db5      	adds	r5, r6, #6
    dca6:	f005 0507 	and.w	r5, r5, #7
    dcaa:	2d03      	cmp	r5, #3
    dcac:	f042 0201 	orr.w	r2, r2, #1
    dcb0:	f240 80ae 	bls.w	de10 <am_hal_gpio_pinconfig+0x190>
    dcb4:	2fc0      	cmp	r7, #192	; 0xc0
    dcb6:	f000 80e1 	beq.w	de7c <am_hal_gpio_pinconfig+0x1fc>
    dcba:	2f20      	cmp	r7, #32
    dcbc:	f000 80e3 	beq.w	de86 <am_hal_gpio_pinconfig+0x206>
    dcc0:	b163      	cbz	r3, dcdc <am_hal_gpio_pinconfig+0x5c>
    dcc2:	2b01      	cmp	r3, #1
    dcc4:	f000 80d3 	beq.w	de6e <am_hal_gpio_pinconfig+0x1ee>
    dcc8:	2b02      	cmp	r3, #2
    dcca:	f040 80c9 	bne.w	de60 <am_hal_gpio_pinconfig+0x1e0>
    dcce:	4b79      	ldr	r3, [pc, #484]	; (deb4 <am_hal_gpio_pinconfig+0x234>)
    dcd0:	5d1b      	ldrb	r3, [r3, r4]
    dcd2:	075b      	lsls	r3, r3, #29
    dcd4:	f140 80c4 	bpl.w	de60 <am_hal_gpio_pinconfig+0x1e0>
    dcd8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    dcdc:	4b76      	ldr	r3, [pc, #472]	; (deb8 <am_hal_gpio_pinconfig+0x238>)
    dcde:	5d1b      	ldrb	r3, [r3, r4]
    dce0:	4103      	asrs	r3, r0
    dce2:	005b      	lsls	r3, r3, #1
    dce4:	f003 0302 	and.w	r3, r3, #2
    dce8:	4313      	orrs	r3, r2
    dcea:	4a74      	ldr	r2, [pc, #464]	; (debc <am_hal_gpio_pinconfig+0x23c>)
    dcec:	5d12      	ldrb	r2, [r2, r4]
    dcee:	4282      	cmp	r2, r0
    dcf0:	f000 8099 	beq.w	de26 <am_hal_gpio_pinconfig+0x1a6>
    dcf4:	f3c1 3000 	ubfx	r0, r1, #12, #1
    dcf8:	f3c1 2581 	ubfx	r5, r1, #10, #2
    dcfc:	f3c1 3280 	ubfx	r2, r1, #14, #1
    dd00:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    dd04:	0a88      	lsrs	r0, r1, #10
    dd06:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    dd0a:	f000 0008 	and.w	r0, r0, #8
    dd0e:	4302      	orrs	r2, r0
    dd10:	f3c1 2007 	ubfx	r0, r1, #8, #8
    dd14:	f000 050c 	and.w	r5, r0, #12
    dd18:	2d04      	cmp	r5, #4
    dd1a:	f000 80a5 	beq.w	de68 <am_hal_gpio_pinconfig+0x1e8>
    dd1e:	4d68      	ldr	r5, [pc, #416]	; (dec0 <am_hal_gpio_pinconfig+0x240>)
    dd20:	682d      	ldr	r5, [r5, #0]
    dd22:	eba1 0805 	sub.w	r8, r1, r5
    dd26:	fab8 f888 	clz	r8, r8
    dd2a:	ea4f 1858 	mov.w	r8, r8, lsr #5
    dd2e:	f010 0f60 	tst.w	r0, #96	; 0x60
    dd32:	bf04      	itt	eq
    dd34:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
    dd38:	f360 0200 	bfieq	r2, r0, #0, #1
    dd3c:	00a0      	lsls	r0, r4, #2
    dd3e:	f3c1 2101 	ubfx	r1, r1, #8, #2
    dd42:	2902      	cmp	r1, #2
    dd44:	d05c      	beq.n	de00 <am_hal_gpio_pinconfig+0x180>
    dd46:	2903      	cmp	r1, #3
    dd48:	d058      	beq.n	ddfc <am_hal_gpio_pinconfig+0x17c>
    dd4a:	2901      	cmp	r1, #1
    dd4c:	ea4f 01c4 	mov.w	r1, r4, lsl #3
    dd50:	bf08      	it	eq
    dd52:	f043 0304 	orreq.w	r3, r3, #4
    dd56:	f001 0118 	and.w	r1, r1, #24
    dd5a:	2700      	movs	r7, #0
    dd5c:	f000 001c 	and.w	r0, r0, #28
    dd60:	fa02 f600 	lsl.w	r6, r2, r0
    dd64:	220f      	movs	r2, #15
    dd66:	4082      	lsls	r2, r0
    dd68:	43d2      	mvns	r2, r2
    dd6a:	f04f 09ff 	mov.w	r9, #255	; 0xff
    dd6e:	fa03 f501 	lsl.w	r5, r3, r1
    dd72:	fa09 f901 	lsl.w	r9, r9, r1
    dd76:	9201      	str	r2, [sp, #4]
    dd78:	f000 f9c8 	bl	e10c <am_hal_interrupt_master_disable>
    dd7c:	f024 0a03 	bic.w	sl, r4, #3
    dd80:	ea4f 0b54 	mov.w	fp, r4, lsr #1
    dd84:	f10a 4c80 	add.w	ip, sl, #1073741824	; 0x40000000
    dd88:	4b4e      	ldr	r3, [pc, #312]	; (dec4 <am_hal_gpio_pinconfig+0x244>)
    dd8a:	494f      	ldr	r1, [pc, #316]	; (dec8 <am_hal_gpio_pinconfig+0x248>)
    dd8c:	9a01      	ldr	r2, [sp, #4]
    dd8e:	9003      	str	r0, [sp, #12]
    dd90:	ea6f 0909 	mvn.w	r9, r9
    dd94:	f02b 0b03 	bic.w	fp, fp, #3
    dd98:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
    dd9c:	f1b8 0f00 	cmp.w	r8, #0
    dda0:	d00b      	beq.n	ddba <am_hal_gpio_pinconfig+0x13a>
    dda2:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
    dda6:	f004 081f 	and.w	r8, r4, #31
    ddaa:	4848      	ldr	r0, [pc, #288]	; (decc <am_hal_gpio_pinconfig+0x24c>)
    ddac:	f00e 0e04 	and.w	lr, lr, #4
    ddb0:	2401      	movs	r4, #1
    ddb2:	fa04 f408 	lsl.w	r4, r4, r8
    ddb6:	f84e 4000 	str.w	r4, [lr, r0]
    ddba:	4845      	ldr	r0, [pc, #276]	; (ded0 <am_hal_gpio_pinconfig+0x250>)
    ddbc:	2473      	movs	r4, #115	; 0x73
    ddbe:	6604      	str	r4, [r0, #96]	; 0x60
    ddc0:	f8dc 4000 	ldr.w	r4, [ip]
    ddc4:	ea04 0409 	and.w	r4, r4, r9
    ddc8:	4325      	orrs	r5, r4
    ddca:	f8cc 5000 	str.w	r5, [ip]
    ddce:	f85b 4003 	ldr.w	r4, [fp, r3]
    ddd2:	4022      	ands	r2, r4
    ddd4:	4332      	orrs	r2, r6
    ddd6:	f84b 2003 	str.w	r2, [fp, r3]
    ddda:	f85a 3001 	ldr.w	r3, [sl, r1]
    ddde:	ea03 0909 	and.w	r9, r3, r9
    dde2:	2400      	movs	r4, #0
    dde4:	ea49 0707 	orr.w	r7, r9, r7
    dde8:	f84a 7001 	str.w	r7, [sl, r1]
    ddec:	6604      	str	r4, [r0, #96]	; 0x60
    ddee:	9803      	ldr	r0, [sp, #12]
    ddf0:	f000 f990 	bl	e114 <am_hal_interrupt_master_set>
    ddf4:	4620      	mov	r0, r4
    ddf6:	b005      	add	sp, #20
    ddf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ddfc:	f043 0304 	orr.w	r3, r3, #4
    de00:	00e1      	lsls	r1, r4, #3
    de02:	f001 0118 	and.w	r1, r1, #24
    de06:	2701      	movs	r7, #1
    de08:	408f      	lsls	r7, r1
    de0a:	e7a7      	b.n	dd5c <am_hal_gpio_pinconfig+0xdc>
    de0c:	2006      	movs	r0, #6
    de0e:	4770      	bx	lr
    de10:	4d28      	ldr	r5, [pc, #160]	; (deb4 <am_hal_gpio_pinconfig+0x234>)
    de12:	5d2d      	ldrb	r5, [r5, r4]
    de14:	3e02      	subs	r6, #2
    de16:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    de1a:	07ee      	lsls	r6, r5, #31
    de1c:	d536      	bpl.n	de8c <am_hal_gpio_pinconfig+0x20c>
    de1e:	2b00      	cmp	r3, #0
    de20:	f43f af5c 	beq.w	dcdc <am_hal_gpio_pinconfig+0x5c>
    de24:	e74d      	b.n	dcc2 <am_hal_gpio_pinconfig+0x42>
    de26:	f3c1 4202 	ubfx	r2, r1, #16, #3
    de2a:	2a07      	cmp	r2, #7
    de2c:	d030      	beq.n	de90 <am_hal_gpio_pinconfig+0x210>
    de2e:	4d29      	ldr	r5, [pc, #164]	; (ded4 <am_hal_gpio_pinconfig+0x254>)
    de30:	f3c1 40c1 	ubfx	r0, r1, #19, #2
    de34:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    de38:	f815 0024 	ldrb.w	r0, [r5, r4, lsl #2]
    de3c:	4290      	cmp	r0, r2
    de3e:	d029      	beq.n	de94 <am_hal_gpio_pinconfig+0x214>
    de40:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    de44:	00a0      	lsls	r0, r4, #2
    de46:	786e      	ldrb	r6, [r5, #1]
    de48:	4296      	cmp	r6, r2
    de4a:	d02d      	beq.n	dea8 <am_hal_gpio_pinconfig+0x228>
    de4c:	78ae      	ldrb	r6, [r5, #2]
    de4e:	4296      	cmp	r6, r2
    de50:	d02c      	beq.n	deac <am_hal_gpio_pinconfig+0x22c>
    de52:	78ed      	ldrb	r5, [r5, #3]
    de54:	4295      	cmp	r5, r2
    de56:	d02b      	beq.n	deb0 <am_hal_gpio_pinconfig+0x230>
    de58:	481f      	ldr	r0, [pc, #124]	; (ded8 <am_hal_gpio_pinconfig+0x258>)
    de5a:	b005      	add	sp, #20
    de5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de60:	481e      	ldr	r0, [pc, #120]	; (dedc <am_hal_gpio_pinconfig+0x25c>)
    de62:	b005      	add	sp, #20
    de64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de68:	f04f 0801 	mov.w	r8, #1
    de6c:	e75f      	b.n	dd2e <am_hal_gpio_pinconfig+0xae>
    de6e:	4b11      	ldr	r3, [pc, #68]	; (deb4 <am_hal_gpio_pinconfig+0x234>)
    de70:	5d1b      	ldrb	r3, [r3, r4]
    de72:	079d      	lsls	r5, r3, #30
    de74:	d5f4      	bpl.n	de60 <am_hal_gpio_pinconfig+0x1e0>
    de76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    de7a:	e72f      	b.n	dcdc <am_hal_gpio_pinconfig+0x5c>
    de7c:	2c14      	cmp	r4, #20
    de7e:	f43f af1f 	beq.w	dcc0 <am_hal_gpio_pinconfig+0x40>
    de82:	4817      	ldr	r0, [pc, #92]	; (dee0 <am_hal_gpio_pinconfig+0x260>)
    de84:	e7b7      	b.n	ddf6 <am_hal_gpio_pinconfig+0x176>
    de86:	2c14      	cmp	r4, #20
    de88:	f47f af1a 	bne.w	dcc0 <am_hal_gpio_pinconfig+0x40>
    de8c:	4815      	ldr	r0, [pc, #84]	; (dee4 <am_hal_gpio_pinconfig+0x264>)
    de8e:	e7b2      	b.n	ddf6 <am_hal_gpio_pinconfig+0x176>
    de90:	4815      	ldr	r0, [pc, #84]	; (dee8 <am_hal_gpio_pinconfig+0x268>)
    de92:	e7b0      	b.n	ddf6 <am_hal_gpio_pinconfig+0x176>
    de94:	2200      	movs	r2, #0
    de96:	00a0      	lsls	r0, r4, #2
    de98:	0052      	lsls	r2, r2, #1
    de9a:	f3c1 5540 	ubfx	r5, r1, #21, #1
    de9e:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
    dea2:	f04f 0800 	mov.w	r8, #0
    dea6:	e74a      	b.n	dd3e <am_hal_gpio_pinconfig+0xbe>
    dea8:	2201      	movs	r2, #1
    deaa:	e7f5      	b.n	de98 <am_hal_gpio_pinconfig+0x218>
    deac:	2202      	movs	r2, #2
    deae:	e7f3      	b.n	de98 <am_hal_gpio_pinconfig+0x218>
    deb0:	2203      	movs	r2, #3
    deb2:	e7f1      	b.n	de98 <am_hal_gpio_pinconfig+0x218>
    deb4:	0000f194 	.word	0x0000f194
    deb8:	0000f1c8 	.word	0x0000f1c8
    debc:	0000f2c4 	.word	0x0000f2c4
    dec0:	0000f18c 	.word	0x0000f18c
    dec4:	40010040 	.word	0x40010040
    dec8:	400100e0 	.word	0x400100e0
    decc:	400100b4 	.word	0x400100b4
    ded0:	40010000 	.word	0x40010000
    ded4:	0000f1fc 	.word	0x0000f1fc
    ded8:	08000104 	.word	0x08000104
    dedc:	08000102 	.word	0x08000102
    dee0:	08000101 	.word	0x08000101
    dee4:	08000100 	.word	0x08000100
    dee8:	08000103 	.word	0x08000103

0000deec <am_hal_gpio_state_write>:
    deec:	2831      	cmp	r0, #49	; 0x31
    deee:	d81a      	bhi.n	df26 <am_hal_gpio_state_write+0x3a>
    def0:	b570      	push	{r4, r5, r6, lr}
    def2:	2905      	cmp	r1, #5
    def4:	b082      	sub	sp, #8
    def6:	460d      	mov	r5, r1
    def8:	d812      	bhi.n	df20 <am_hal_gpio_state_write+0x34>
    defa:	f000 031f 	and.w	r3, r0, #31
    defe:	2201      	movs	r2, #1
    df00:	08c0      	lsrs	r0, r0, #3
    df02:	fa02 f603 	lsl.w	r6, r2, r3
    df06:	f000 0404 	and.w	r4, r0, #4
    df0a:	f000 f8ff 	bl	e10c <am_hal_interrupt_master_disable>
    df0e:	3d01      	subs	r5, #1
    df10:	9001      	str	r0, [sp, #4]
    df12:	2d04      	cmp	r5, #4
    df14:	d821      	bhi.n	df5a <am_hal_gpio_state_write+0x6e>
    df16:	e8df f005 	tbb	[pc, r5]
    df1a:	1512      	.short	0x1512
    df1c:	1d1a      	.short	0x1d1a
    df1e:	08          	.byte	0x08
    df1f:	00          	.byte	0x00
    df20:	2006      	movs	r0, #6
    df22:	b002      	add	sp, #8
    df24:	bd70      	pop	{r4, r5, r6, pc}
    df26:	2005      	movs	r0, #5
    df28:	4770      	bx	lr
    df2a:	4a0d      	ldr	r2, [pc, #52]	; (df60 <am_hal_gpio_state_write+0x74>)
    df2c:	58a3      	ldr	r3, [r4, r2]
    df2e:	4073      	eors	r3, r6
    df30:	50a3      	str	r3, [r4, r2]
    df32:	9801      	ldr	r0, [sp, #4]
    df34:	f000 f8ee 	bl	e114 <am_hal_interrupt_master_set>
    df38:	2000      	movs	r0, #0
    df3a:	b002      	add	sp, #8
    df3c:	bd70      	pop	{r4, r5, r6, pc}
    df3e:	4b09      	ldr	r3, [pc, #36]	; (df64 <am_hal_gpio_state_write+0x78>)
    df40:	50e6      	str	r6, [r4, r3]
    df42:	e7f6      	b.n	df32 <am_hal_gpio_state_write+0x46>
    df44:	4a08      	ldr	r2, [pc, #32]	; (df68 <am_hal_gpio_state_write+0x7c>)
    df46:	58a3      	ldr	r3, [r4, r2]
    df48:	4073      	eors	r3, r6
    df4a:	50a3      	str	r3, [r4, r2]
    df4c:	e7f1      	b.n	df32 <am_hal_gpio_state_write+0x46>
    df4e:	4b04      	ldr	r3, [pc, #16]	; (df60 <am_hal_gpio_state_write+0x74>)
    df50:	50e6      	str	r6, [r4, r3]
    df52:	e7ee      	b.n	df32 <am_hal_gpio_state_write+0x46>
    df54:	4b05      	ldr	r3, [pc, #20]	; (df6c <am_hal_gpio_state_write+0x80>)
    df56:	50e6      	str	r6, [r4, r3]
    df58:	e7eb      	b.n	df32 <am_hal_gpio_state_write+0x46>
    df5a:	4b05      	ldr	r3, [pc, #20]	; (df70 <am_hal_gpio_state_write+0x84>)
    df5c:	50e6      	str	r6, [r4, r3]
    df5e:	e7e8      	b.n	df32 <am_hal_gpio_state_write+0x46>
    df60:	400100b4 	.word	0x400100b4
    df64:	40010090 	.word	0x40010090
    df68:	40010088 	.word	0x40010088
    df6c:	400100a8 	.word	0x400100a8
    df70:	40010098 	.word	0x40010098

0000df74 <am_hal_gpio_interrupt_enable>:
    df74:	b570      	push	{r4, r5, r6, lr}
    df76:	0c8c      	lsrs	r4, r1, #18
    df78:	04a4      	lsls	r4, r4, #18
    df7a:	b082      	sub	sp, #8
    df7c:	b9ac      	cbnz	r4, dfaa <am_hal_gpio_interrupt_enable+0x36>
    df7e:	460d      	mov	r5, r1
    df80:	4606      	mov	r6, r0
    df82:	f000 f8c3 	bl	e10c <am_hal_interrupt_master_disable>
    df86:	4b0a      	ldr	r3, [pc, #40]	; (dfb0 <am_hal_gpio_interrupt_enable+0x3c>)
    df88:	9001      	str	r0, [sp, #4]
    df8a:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
    df8e:	4330      	orrs	r0, r6
    df90:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
    df94:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
    df98:	430d      	orrs	r5, r1
    df9a:	f8c3 5210 	str.w	r5, [r3, #528]	; 0x210
    df9e:	9801      	ldr	r0, [sp, #4]
    dfa0:	f000 f8b8 	bl	e114 <am_hal_interrupt_master_set>
    dfa4:	4620      	mov	r0, r4
    dfa6:	b002      	add	sp, #8
    dfa8:	bd70      	pop	{r4, r5, r6, pc}
    dfaa:	2005      	movs	r0, #5
    dfac:	b002      	add	sp, #8
    dfae:	bd70      	pop	{r4, r5, r6, pc}
    dfb0:	40010000 	.word	0x40010000

0000dfb4 <am_hal_gpio_interrupt_clear>:
    dfb4:	b570      	push	{r4, r5, r6, lr}
    dfb6:	0c8c      	lsrs	r4, r1, #18
    dfb8:	04a4      	lsls	r4, r4, #18
    dfba:	b082      	sub	sp, #8
    dfbc:	b97c      	cbnz	r4, dfde <am_hal_gpio_interrupt_clear+0x2a>
    dfbe:	460d      	mov	r5, r1
    dfc0:	4606      	mov	r6, r0
    dfc2:	f000 f8a3 	bl	e10c <am_hal_interrupt_master_disable>
    dfc6:	4b07      	ldr	r3, [pc, #28]	; (dfe4 <am_hal_gpio_interrupt_clear+0x30>)
    dfc8:	9001      	str	r0, [sp, #4]
    dfca:	f8c3 6208 	str.w	r6, [r3, #520]	; 0x208
    dfce:	f8c3 5218 	str.w	r5, [r3, #536]	; 0x218
    dfd2:	9801      	ldr	r0, [sp, #4]
    dfd4:	f000 f89e 	bl	e114 <am_hal_interrupt_master_set>
    dfd8:	4620      	mov	r0, r4
    dfda:	b002      	add	sp, #8
    dfdc:	bd70      	pop	{r4, r5, r6, pc}
    dfde:	2005      	movs	r0, #5
    dfe0:	b002      	add	sp, #8
    dfe2:	bd70      	pop	{r4, r5, r6, pc}
    dfe4:	40010000 	.word	0x40010000

0000dfe8 <am_hal_gpio_interrupt_status_get>:
    dfe8:	b1d1      	cbz	r1, e020 <am_hal_gpio_interrupt_status_get+0x38>
    dfea:	b530      	push	{r4, r5, lr}
    dfec:	b083      	sub	sp, #12
    dfee:	460c      	mov	r4, r1
    dff0:	4605      	mov	r5, r0
    dff2:	f000 f88b 	bl	e10c <am_hal_interrupt_master_disable>
    dff6:	4a0b      	ldr	r2, [pc, #44]	; (e024 <am_hal_gpio_interrupt_status_get+0x3c>)
    dff8:	9001      	str	r0, [sp, #4]
    dffa:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
    dffe:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
    e002:	b12d      	cbz	r5, e010 <am_hal_gpio_interrupt_status_get+0x28>
    e004:	f8d2 0210 	ldr.w	r0, [r2, #528]	; 0x210
    e008:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
    e00c:	4003      	ands	r3, r0
    e00e:	4011      	ands	r1, r2
    e010:	9801      	ldr	r0, [sp, #4]
    e012:	e9c4 1300 	strd	r1, r3, [r4]
    e016:	f000 f87d 	bl	e114 <am_hal_interrupt_master_set>
    e01a:	2000      	movs	r0, #0
    e01c:	b003      	add	sp, #12
    e01e:	bd30      	pop	{r4, r5, pc}
    e020:	2006      	movs	r0, #6
    e022:	4770      	bx	lr
    e024:	40010000 	.word	0x40010000

0000e028 <am_hal_gpio_interrupt_register>:
    e028:	2831      	cmp	r0, #49	; 0x31
    e02a:	4603      	mov	r3, r0
    e02c:	d805      	bhi.n	e03a <am_hal_gpio_interrupt_register+0x12>
    e02e:	b131      	cbz	r1, e03e <am_hal_gpio_interrupt_register+0x16>
    e030:	4a04      	ldr	r2, [pc, #16]	; (e044 <am_hal_gpio_interrupt_register+0x1c>)
    e032:	2000      	movs	r0, #0
    e034:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    e038:	4770      	bx	lr
    e03a:	2005      	movs	r0, #5
    e03c:	4770      	bx	lr
    e03e:	2006      	movs	r0, #6
    e040:	4770      	bx	lr
    e042:	bf00      	nop
    e044:	10001640 	.word	0x10001640

0000e048 <am_hal_gpio_interrupt_service>:
    e048:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e04c:	0c8b      	lsrs	r3, r1, #18
    e04e:	049b      	lsls	r3, r3, #18
    e050:	2b00      	cmp	r3, #0
    e052:	d14d      	bne.n	e0f0 <am_hal_gpio_interrupt_service+0xa8>
    e054:	ea50 0201 	orrs.w	r2, r0, r1
    e058:	460e      	mov	r6, r1
    e05a:	4607      	mov	r7, r0
    e05c:	d043      	beq.n	e0e6 <am_hal_gpio_interrupt_service+0x9e>
    e05e:	4d27      	ldr	r5, [pc, #156]	; (e0fc <am_hal_gpio_interrupt_service+0xb4>)
    e060:	f8df 909c 	ldr.w	r9, [pc, #156]	; e100 <am_hal_gpio_interrupt_service+0xb8>
    e064:	469b      	mov	fp, r3
    e066:	4698      	mov	r8, r3
    e068:	f1cb 0220 	rsb	r2, fp, #32
    e06c:	fa06 f202 	lsl.w	r2, r6, r2
    e070:	f1ab 0320 	sub.w	r3, fp, #32
    e074:	fa27 fa0b 	lsr.w	sl, r7, fp
    e078:	fa26 f303 	lsr.w	r3, r6, r3
    e07c:	ea4a 0a02 	orr.w	sl, sl, r2
    e080:	ea5a 0a03 	orrs.w	sl, sl, r3
    e084:	d01a      	beq.n	e0bc <am_hal_gpio_interrupt_service+0x74>
    e086:	2401      	movs	r4, #1
    e088:	f1ca 0300 	rsb	r3, sl, #0
    e08c:	ea03 030a 	and.w	r3, r3, sl
    e090:	fab3 f383 	clz	r3, r3
    e094:	f1c3 031f 	rsb	r3, r3, #31
    e098:	eb03 010b 	add.w	r1, r3, fp
    e09c:	fa04 f303 	lsl.w	r3, r4, r3
    e0a0:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    e0a4:	ea2a 0a03 	bic.w	sl, sl, r3
    e0a8:	b1ba      	cbz	r2, e0da <am_hal_gpio_interrupt_service+0x92>
    e0aa:	f012 0f01 	tst.w	r2, #1
    e0ae:	f042 0301 	orr.w	r3, r2, #1
    e0b2:	d00b      	beq.n	e0cc <am_hal_gpio_interrupt_service+0x84>
    e0b4:	4790      	blx	r2
    e0b6:	f1ba 0f00 	cmp.w	sl, #0
    e0ba:	d1e5      	bne.n	e088 <am_hal_gpio_interrupt_service+0x40>
    e0bc:	f10b 0b20 	add.w	fp, fp, #32
    e0c0:	f1bb 0f40 	cmp.w	fp, #64	; 0x40
    e0c4:	d1d0      	bne.n	e068 <am_hal_gpio_interrupt_service+0x20>
    e0c6:	4640      	mov	r0, r8
    e0c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e0cc:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
    e0d0:	4798      	blx	r3
    e0d2:	f1ba 0f00 	cmp.w	sl, #0
    e0d6:	d1d7      	bne.n	e088 <am_hal_gpio_interrupt_service+0x40>
    e0d8:	e7f0      	b.n	e0bc <am_hal_gpio_interrupt_service+0x74>
    e0da:	f04f 0807 	mov.w	r8, #7
    e0de:	f1ba 0f00 	cmp.w	sl, #0
    e0e2:	d1d1      	bne.n	e088 <am_hal_gpio_interrupt_service+0x40>
    e0e4:	e7ea      	b.n	e0bc <am_hal_gpio_interrupt_service+0x74>
    e0e6:	f04f 0801 	mov.w	r8, #1
    e0ea:	4640      	mov	r0, r8
    e0ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e0f0:	f04f 0805 	mov.w	r8, #5
    e0f4:	4640      	mov	r0, r8
    e0f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e0fa:	bf00      	nop
    e0fc:	10001640 	.word	0x10001640
    e100:	10001578 	.word	0x10001578

0000e104 <am_hal_interrupt_master_enable>:
    e104:	f3ef 8010 	mrs	r0, PRIMASK
    e108:	b662      	cpsie	i
    e10a:	4770      	bx	lr

0000e10c <am_hal_interrupt_master_disable>:
    e10c:	f3ef 8010 	mrs	r0, PRIMASK
    e110:	b672      	cpsid	i
    e112:	4770      	bx	lr

0000e114 <am_hal_interrupt_master_set>:
    e114:	f380 8810 	msr	PRIMASK, r0
    e118:	4770      	bx	lr
    e11a:	bf00      	nop

0000e11c <internal_iom_reset_on_error>:
    e11c:	b570      	push	{r4, r5, r6, lr}
    e11e:	6844      	ldr	r4, [r0, #4]
    e120:	f8d0 0864 	ldr.w	r0, [r0, #2148]	; 0x864
    e124:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
    e128:	3404      	adds	r4, #4
    e12a:	0324      	lsls	r4, r4, #12
    e12c:	2300      	movs	r3, #0
    e12e:	f8d4 5200 	ldr.w	r5, [r4, #512]	; 0x200
    e132:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    e136:	050b      	lsls	r3, r1, #20
    e138:	d52a      	bpl.n	e190 <internal_iom_reset_on_error+0x74>
    e13a:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
    e13e:	079e      	lsls	r6, r3, #30
    e140:	d457      	bmi.n	e1f2 <internal_iom_reset_on_error+0xd6>
    e142:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    e146:	079a      	lsls	r2, r3, #30
    e148:	d508      	bpl.n	e15c <internal_iom_reset_on_error+0x40>
    e14a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    e14e:	f3c3 4307 	ubfx	r3, r3, #16, #8
    e152:	2b03      	cmp	r3, #3
    e154:	d9f5      	bls.n	e142 <internal_iom_reset_on_error+0x26>
    e156:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e15a:	e7f6      	b.n	e14a <internal_iom_reset_on_error+0x2e>
    e15c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    e160:	f003 0306 	and.w	r3, r3, #6
    e164:	2b04      	cmp	r3, #4
    e166:	d1f9      	bne.n	e15c <internal_iom_reset_on_error+0x40>
    e168:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    e16c:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
    e170:	d00e      	beq.n	e190 <internal_iom_reset_on_error+0x74>
    e172:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    e176:	f3c3 4307 	ubfx	r3, r3, #16, #8
    e17a:	2b03      	cmp	r3, #3
    e17c:	d9f4      	bls.n	e168 <internal_iom_reset_on_error+0x4c>
    e17e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e182:	e7f6      	b.n	e172 <internal_iom_reset_on_error+0x56>
    e184:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    e188:	f003 0306 	and.w	r3, r3, #6
    e18c:	2b04      	cmp	r3, #4
    e18e:	d1f9      	bne.n	e184 <internal_iom_reset_on_error+0x68>
    e190:	06cb      	lsls	r3, r1, #27
    e192:	d406      	bmi.n	e1a2 <internal_iom_reset_on_error+0x86>
    e194:	f04f 33ff 	mov.w	r3, #4294967295
    e198:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    e19c:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    e1a0:	bd70      	pop	{r4, r5, r6, pc}
    e1a2:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    e1a6:	f003 0306 	and.w	r3, r3, #6
    e1aa:	2b04      	cmp	r3, #4
    e1ac:	d1f9      	bne.n	e1a2 <internal_iom_reset_on_error+0x86>
    e1ae:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
    e1b2:	f36f 1304 	bfc	r3, #4, #1
    e1b6:	f884 3214 	strb.w	r3, [r4, #532]	; 0x214
    e1ba:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
    e1be:	f36f 0341 	bfc	r3, #1, #1
    e1c2:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    e1c6:	0040      	lsls	r0, r0, #1
    e1c8:	f7ff fd0a 	bl	dbe0 <am_hal_flash_delay>
    e1cc:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
    e1d0:	f043 0302 	orr.w	r3, r3, #2
    e1d4:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    e1d8:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
    e1dc:	f043 0310 	orr.w	r3, r3, #16
    e1e0:	f884 3214 	strb.w	r3, [r4, #532]	; 0x214
    e1e4:	f04f 33ff 	mov.w	r3, #4294967295
    e1e8:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    e1ec:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    e1f0:	bd70      	pop	{r4, r5, r6, pc}
    e1f2:	f8d4 2288 	ldr.w	r2, [r4, #648]	; 0x288
    e1f6:	4e07      	ldr	r6, [pc, #28]	; (e214 <internal_iom_reset_on_error+0xf8>)
    e1f8:	2a00      	cmp	r2, #0
    e1fa:	d0c3      	beq.n	e184 <internal_iom_reset_on_error+0x68>
    e1fc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    e200:	f3c3 2307 	ubfx	r3, r3, #8, #8
    e204:	2b03      	cmp	r3, #3
    e206:	d9f9      	bls.n	e1fc <internal_iom_reset_on_error+0xe0>
    e208:	2a04      	cmp	r2, #4
    e20a:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
    e20e:	d9b9      	bls.n	e184 <internal_iom_reset_on_error+0x68>
    e210:	3a04      	subs	r2, #4
    e212:	e7f1      	b.n	e1f8 <internal_iom_reset_on_error+0xdc>
    e214:	deadbeef 	.word	0xdeadbeef

0000e218 <am_hal_iom_initialize>:
    e218:	2805      	cmp	r0, #5
    e21a:	d81a      	bhi.n	e252 <am_hal_iom_initialize+0x3a>
    e21c:	b1e9      	cbz	r1, e25a <am_hal_iom_initialize+0x42>
    e21e:	b530      	push	{r4, r5, lr}
    e220:	f640 0ca4 	movw	ip, #2212	; 0x8a4
    e224:	4d0e      	ldr	r5, [pc, #56]	; (e260 <am_hal_iom_initialize+0x48>)
    e226:	fb0c fc00 	mul.w	ip, ip, r0
    e22a:	eb05 040c 	add.w	r4, r5, ip
    e22e:	4602      	mov	r2, r0
    e230:	78e3      	ldrb	r3, [r4, #3]
    e232:	f013 0301 	ands.w	r3, r3, #1
    e236:	d10e      	bne.n	e256 <am_hal_iom_initialize+0x3e>
    e238:	4618      	mov	r0, r3
    e23a:	f855 300c 	ldr.w	r3, [r5, ip]
    e23e:	f003 4e7c 	and.w	lr, r3, #4227858432	; 0xfc000000
    e242:	4b08      	ldr	r3, [pc, #32]	; (e264 <am_hal_iom_initialize+0x4c>)
    e244:	ea4e 0303 	orr.w	r3, lr, r3
    e248:	f845 300c 	str.w	r3, [r5, ip]
    e24c:	6062      	str	r2, [r4, #4]
    e24e:	600c      	str	r4, [r1, #0]
    e250:	bd30      	pop	{r4, r5, pc}
    e252:	2005      	movs	r0, #5
    e254:	4770      	bx	lr
    e256:	2007      	movs	r0, #7
    e258:	bd30      	pop	{r4, r5, pc}
    e25a:	2006      	movs	r0, #6
    e25c:	4770      	bx	lr
    e25e:	bf00      	nop
    e260:	10001708 	.word	0x10001708
    e264:	01123456 	.word	0x01123456

0000e268 <am_hal_iom_enable>:
    e268:	2800      	cmp	r0, #0
    e26a:	d063      	beq.n	e334 <am_hal_iom_enable+0xcc>
    e26c:	b530      	push	{r4, r5, lr}
    e26e:	6803      	ldr	r3, [r0, #0]
    e270:	4a31      	ldr	r2, [pc, #196]	; (e338 <am_hal_iom_enable+0xd0>)
    e272:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e276:	4293      	cmp	r3, r2
    e278:	b085      	sub	sp, #20
    e27a:	4604      	mov	r4, r0
    e27c:	d150      	bne.n	e320 <am_hal_iom_enable+0xb8>
    e27e:	78c3      	ldrb	r3, [r0, #3]
    e280:	079b      	lsls	r3, r3, #30
    e282:	d450      	bmi.n	e326 <am_hal_iom_enable+0xbe>
    e284:	6840      	ldr	r0, [r0, #4]
    e286:	7a21      	ldrb	r1, [r4, #8]
    e288:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    e28c:	3304      	adds	r3, #4
    e28e:	031b      	lsls	r3, r3, #12
    e290:	3900      	subs	r1, #0
    e292:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
    e296:	bf18      	it	ne
    e298:	2101      	movne	r1, #1
    e29a:	f3c2 0242 	ubfx	r2, r2, #1, #3
    e29e:	4291      	cmp	r1, r2
    e2a0:	bf0c      	ite	eq
    e2a2:	2201      	moveq	r2, #1
    e2a4:	2210      	movne	r2, #16
    e2a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    e2aa:	68e2      	ldr	r2, [r4, #12]
    e2ac:	b38a      	cbz	r2, e312 <am_hal_iom_enable+0xaa>
    e2ae:	4923      	ldr	r1, [pc, #140]	; (e33c <am_hal_iom_enable+0xd4>)
    e2b0:	9202      	str	r2, [sp, #8]
    e2b2:	2200      	movs	r2, #0
    e2b4:	6262      	str	r2, [r4, #36]	; 0x24
    e2b6:	61e2      	str	r2, [r4, #28]
    e2b8:	f8c3 12a4 	str.w	r1, [r3, #676]	; 0x2a4
    e2bc:	6923      	ldr	r3, [r4, #16]
    e2be:	f8c4 2854 	str.w	r2, [r4, #2132]	; 0x854
    e2c2:	f884 283c 	strb.w	r2, [r4, #2108]	; 0x83c
    e2c6:	f8c4 2838 	str.w	r2, [r4, #2104]	; 0x838
    e2ca:	f8c4 2844 	str.w	r2, [r4, #2116]	; 0x844
    e2ce:	f8c4 2840 	str.w	r2, [r4, #2112]	; 0x840
    e2d2:	f8c4 2830 	str.w	r2, [r4, #2096]	; 0x830
    e2d6:	f8c4 2828 	str.w	r2, [r4, #2088]	; 0x828
    e2da:	6222      	str	r2, [r4, #32]
    e2dc:	f8c4 285c 	str.w	r2, [r4, #2140]	; 0x85c
    e2e0:	f44f 7580 	mov.w	r5, #256	; 0x100
    e2e4:	2201      	movs	r2, #1
    e2e6:	085b      	lsrs	r3, r3, #1
    e2e8:	f88d 200c 	strb.w	r2, [sp, #12]
    e2ec:	b2c0      	uxtb	r0, r0
    e2ee:	f604 0228 	addw	r2, r4, #2088	; 0x828
    e2f2:	f8a4 582c 	strh.w	r5, [r4, #2092]	; 0x82c
    e2f6:	a901      	add	r1, sp, #4
    e2f8:	9301      	str	r3, [sp, #4]
    e2fa:	f000 fe1b 	bl	ef34 <am_hal_cmdq_init>
    e2fe:	6863      	ldr	r3, [r4, #4]
    e300:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e304:	3304      	adds	r3, #4
    e306:	2202      	movs	r2, #2
    e308:	031b      	lsls	r3, r3, #12
    e30a:	b978      	cbnz	r0, e32c <am_hal_iom_enable+0xc4>
    e30c:	6225      	str	r5, [r4, #32]
    e30e:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    e312:	78e3      	ldrb	r3, [r4, #3]
    e314:	2000      	movs	r0, #0
    e316:	f043 0302 	orr.w	r3, r3, #2
    e31a:	70e3      	strb	r3, [r4, #3]
    e31c:	b005      	add	sp, #20
    e31e:	bd30      	pop	{r4, r5, pc}
    e320:	2002      	movs	r0, #2
    e322:	b005      	add	sp, #20
    e324:	bd30      	pop	{r4, r5, pc}
    e326:	2000      	movs	r0, #0
    e328:	b005      	add	sp, #20
    e32a:	bd30      	pop	{r4, r5, pc}
    e32c:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    e330:	b005      	add	sp, #20
    e332:	bd30      	pop	{r4, r5, pc}
    e334:	2002      	movs	r0, #2
    e336:	4770      	bx	lr
    e338:	01123456 	.word	0x01123456
    e33c:	00800040 	.word	0x00800040

0000e340 <am_hal_iom_power_ctrl>:
    e340:	b538      	push	{r3, r4, r5, lr}
    e342:	2800      	cmp	r0, #0
    e344:	d063      	beq.n	e40e <am_hal_iom_power_ctrl+0xce>
    e346:	6803      	ldr	r3, [r0, #0]
    e348:	4604      	mov	r4, r0
    e34a:	4868      	ldr	r0, [pc, #416]	; (e4ec <am_hal_iom_power_ctrl+0x1ac>)
    e34c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e350:	4283      	cmp	r3, r0
    e352:	d15c      	bne.n	e40e <am_hal_iom_power_ctrl+0xce>
    e354:	2900      	cmp	r1, #0
    e356:	d060      	beq.n	e41a <am_hal_iom_power_ctrl+0xda>
    e358:	3901      	subs	r1, #1
    e35a:	2901      	cmp	r1, #1
    e35c:	d85a      	bhi.n	e414 <am_hal_iom_power_ctrl+0xd4>
    e35e:	78e3      	ldrb	r3, [r4, #3]
    e360:	6860      	ldr	r0, [r4, #4]
    e362:	079b      	lsls	r3, r3, #30
    e364:	d50e      	bpl.n	e384 <am_hal_iom_power_ctrl+0x44>
    e366:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    e36a:	3304      	adds	r3, #4
    e36c:	031b      	lsls	r3, r3, #12
    e36e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
    e372:	f003 0306 	and.w	r3, r3, #6
    e376:	2b04      	cmp	r3, #4
    e378:	f040 80b4 	bne.w	e4e4 <am_hal_iom_power_ctrl+0x1a4>
    e37c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e37e:	2b00      	cmp	r3, #0
    e380:	f040 80b0 	bne.w	e4e4 <am_hal_iom_power_ctrl+0x1a4>
    e384:	b3d2      	cbz	r2, e3fc <am_hal_iom_power_ctrl+0xbc>
    e386:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    e38a:	3304      	adds	r3, #4
    e38c:	031b      	lsls	r3, r3, #12
    e38e:	2201      	movs	r2, #1
    e390:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    e394:	f8c4 186c 	str.w	r1, [r4, #2156]	; 0x86c
    e398:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
    e39c:	f8c4 1874 	str.w	r1, [r4, #2164]	; 0x874
    e3a0:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
    e3a4:	f8c4 1878 	str.w	r1, [r4, #2168]	; 0x878
    e3a8:	f8d3 1294 	ldr.w	r1, [r3, #660]	; 0x294
    e3ac:	f8c4 187c 	str.w	r1, [r4, #2172]	; 0x87c
    e3b0:	f8d3 1298 	ldr.w	r1, [r3, #664]	; 0x298
    e3b4:	f8c4 1880 	str.w	r1, [r4, #2176]	; 0x880
    e3b8:	f8d3 12a0 	ldr.w	r1, [r3, #672]	; 0x2a0
    e3bc:	f8c4 1884 	str.w	r1, [r4, #2180]	; 0x884
    e3c0:	f8d3 12a8 	ldr.w	r1, [r3, #680]	; 0x2a8
    e3c4:	f8c4 1888 	str.w	r1, [r4, #2184]	; 0x888
    e3c8:	f8d3 12ac 	ldr.w	r1, [r3, #684]	; 0x2ac
    e3cc:	f8c4 188c 	str.w	r1, [r4, #2188]	; 0x88c
    e3d0:	f8d3 12b0 	ldr.w	r1, [r3, #688]	; 0x2b0
    e3d4:	f8c4 1890 	str.w	r1, [r4, #2192]	; 0x890
    e3d8:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    e3dc:	f8c4 1894 	str.w	r1, [r4, #2196]	; 0x894
    e3e0:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    e3e4:	f8c4 1898 	str.w	r1, [r4, #2200]	; 0x898
    e3e8:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
    e3ec:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
    e3f0:	f8c4 3870 	str.w	r3, [r4, #2160]	; 0x870
    e3f4:	f8c4 189c 	str.w	r1, [r4, #2204]	; 0x89c
    e3f8:	f884 2868 	strb.w	r2, [r4, #2152]	; 0x868
    e3fc:	3002      	adds	r0, #2
    e3fe:	b2c0      	uxtb	r0, r0
    e400:	f000 fbfc 	bl	ebfc <am_hal_pwrctrl_periph_disable>
    e404:	2800      	cmp	r0, #0
    e406:	d15e      	bne.n	e4c6 <am_hal_iom_power_ctrl+0x186>
    e408:	2500      	movs	r5, #0
    e40a:	4628      	mov	r0, r5
    e40c:	bd38      	pop	{r3, r4, r5, pc}
    e40e:	2502      	movs	r5, #2
    e410:	4628      	mov	r0, r5
    e412:	bd38      	pop	{r3, r4, r5, pc}
    e414:	2506      	movs	r5, #6
    e416:	4628      	mov	r0, r5
    e418:	bd38      	pop	{r3, r4, r5, pc}
    e41a:	2a00      	cmp	r2, #0
    e41c:	d04c      	beq.n	e4b8 <am_hal_iom_power_ctrl+0x178>
    e41e:	f894 3868 	ldrb.w	r3, [r4, #2152]	; 0x868
    e422:	2b00      	cmp	r3, #0
    e424:	d060      	beq.n	e4e8 <am_hal_iom_power_ctrl+0x1a8>
    e426:	6860      	ldr	r0, [r4, #4]
    e428:	3002      	adds	r0, #2
    e42a:	b2c0      	uxtb	r0, r0
    e42c:	f000 fbbc 	bl	eba8 <am_hal_pwrctrl_periph_enable>
    e430:	4605      	mov	r5, r0
    e432:	2800      	cmp	r0, #0
    e434:	d147      	bne.n	e4c6 <am_hal_iom_power_ctrl+0x186>
    e436:	6863      	ldr	r3, [r4, #4]
    e438:	f8d4 186c 	ldr.w	r1, [r4, #2156]	; 0x86c
    e43c:	f8d4 287c 	ldr.w	r2, [r4, #2172]	; 0x87c
    e440:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e444:	3304      	adds	r3, #4
    e446:	031b      	lsls	r3, r3, #12
    e448:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    e44c:	f8d4 1874 	ldr.w	r1, [r4, #2164]	; 0x874
    e450:	f8c3 1210 	str.w	r1, [r3, #528]	; 0x210
    e454:	f8d4 1878 	ldr.w	r1, [r4, #2168]	; 0x878
    e458:	f8c3 1214 	str.w	r1, [r3, #532]	; 0x214
    e45c:	f8d4 1880 	ldr.w	r1, [r4, #2176]	; 0x880
    e460:	f8c3 1298 	str.w	r1, [r3, #664]	; 0x298
    e464:	f8d4 1888 	ldr.w	r1, [r4, #2184]	; 0x888
    e468:	f8c3 12a8 	str.w	r1, [r3, #680]	; 0x2a8
    e46c:	f8d4 188c 	ldr.w	r1, [r4, #2188]	; 0x88c
    e470:	f8c3 12ac 	str.w	r1, [r3, #684]	; 0x2ac
    e474:	f8d4 1890 	ldr.w	r1, [r4, #2192]	; 0x890
    e478:	f8c3 12b0 	str.w	r1, [r3, #688]	; 0x2b0
    e47c:	f8d4 1894 	ldr.w	r1, [r4, #2196]	; 0x894
    e480:	f8c3 1300 	str.w	r1, [r3, #768]	; 0x300
    e484:	f8d4 1898 	ldr.w	r1, [r4, #2200]	; 0x898
    e488:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
    e48c:	f8d4 189c 	ldr.w	r1, [r4, #2204]	; 0x89c
    e490:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    e494:	f8d4 1870 	ldr.w	r1, [r4, #2160]	; 0x870
    e498:	f8c3 1240 	str.w	r1, [r3, #576]	; 0x240
    e49c:	f894 1884 	ldrb.w	r1, [r4, #2180]	; 0x884
    e4a0:	f8c3 12a4 	str.w	r1, [r3, #676]	; 0x2a4
    e4a4:	f022 0101 	bic.w	r1, r2, #1
    e4a8:	07d2      	lsls	r2, r2, #31
    e4aa:	f8c3 1294 	str.w	r1, [r3, #660]	; 0x294
    e4ae:	d40c      	bmi.n	e4ca <am_hal_iom_power_ctrl+0x18a>
    e4b0:	2300      	movs	r3, #0
    e4b2:	f884 3868 	strb.w	r3, [r4, #2152]	; 0x868
    e4b6:	e7ab      	b.n	e410 <am_hal_iom_power_ctrl+0xd0>
    e4b8:	6860      	ldr	r0, [r4, #4]
    e4ba:	3002      	adds	r0, #2
    e4bc:	b2c0      	uxtb	r0, r0
    e4be:	f000 fb73 	bl	eba8 <am_hal_pwrctrl_periph_enable>
    e4c2:	2800      	cmp	r0, #0
    e4c4:	d0a0      	beq.n	e408 <am_hal_iom_power_ctrl+0xc8>
    e4c6:	2509      	movs	r5, #9
    e4c8:	e7a2      	b.n	e410 <am_hal_iom_power_ctrl+0xd0>
    e4ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
    e4cc:	b92a      	cbnz	r2, e4da <am_hal_iom_power_ctrl+0x19a>
    e4ce:	f8d3 2298 	ldr.w	r2, [r3, #664]	; 0x298
    e4d2:	f503 7326 	add.w	r3, r3, #664	; 0x298
    e4d6:	e9c2 3200 	strd	r3, r2, [r2]
    e4da:	f8d4 0828 	ldr.w	r0, [r4, #2088]	; 0x828
    e4de:	f000 fd81 	bl	efe4 <am_hal_cmdq_enable>
    e4e2:	e7e5      	b.n	e4b0 <am_hal_iom_power_ctrl+0x170>
    e4e4:	2503      	movs	r5, #3
    e4e6:	e793      	b.n	e410 <am_hal_iom_power_ctrl+0xd0>
    e4e8:	2507      	movs	r5, #7
    e4ea:	e791      	b.n	e410 <am_hal_iom_power_ctrl+0xd0>
    e4ec:	01123456 	.word	0x01123456

0000e4f0 <am_hal_iom_configure>:
    e4f0:	b380      	cbz	r0, e554 <am_hal_iom_configure+0x64>
    e4f2:	6803      	ldr	r3, [r0, #0]
    e4f4:	4a98      	ldr	r2, [pc, #608]	; (e758 <am_hal_iom_configure+0x268>)
    e4f6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e4fa:	4293      	cmp	r3, r2
    e4fc:	d12a      	bne.n	e554 <am_hal_iom_configure+0x64>
    e4fe:	2900      	cmp	r1, #0
    e500:	f000 80fb 	beq.w	e6fa <am_hal_iom_configure+0x20a>
    e504:	6843      	ldr	r3, [r0, #4]
    e506:	2b05      	cmp	r3, #5
    e508:	f200 80f7 	bhi.w	e6fa <am_hal_iom_configure+0x20a>
    e50c:	78c2      	ldrb	r2, [r0, #3]
    e50e:	0792      	lsls	r2, r2, #30
    e510:	f100 80f5 	bmi.w	e6fe <am_hal_iom_configure+0x20e>
    e514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e518:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e51c:	3304      	adds	r3, #4
    e51e:	780a      	ldrb	r2, [r1, #0]
    e520:	7202      	strb	r2, [r0, #8]
    e522:	031b      	lsls	r3, r3, #12
    e524:	f241 0410 	movw	r4, #4112	; 0x1010
    e528:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    e52c:	b1a2      	cbz	r2, e558 <am_hal_iom_configure+0x68>
    e52e:	2a01      	cmp	r2, #1
    e530:	f040 80e7 	bne.w	e702 <am_hal_iom_configure+0x212>
    e534:	684a      	ldr	r2, [r1, #4]
    e536:	4c89      	ldr	r4, [pc, #548]	; (e75c <am_hal_iom_configure+0x26c>)
    e538:	42a2      	cmp	r2, r4
    e53a:	f000 8106 	beq.w	e74a <am_hal_iom_configure+0x25a>
    e53e:	4c88      	ldr	r4, [pc, #544]	; (e760 <am_hal_iom_configure+0x270>)
    e540:	42a2      	cmp	r2, r4
    e542:	f000 80fc 	beq.w	e73e <am_hal_iom_configure+0x24e>
    e546:	4c87      	ldr	r4, [pc, #540]	; (e764 <am_hal_iom_configure+0x274>)
    e548:	42a2      	cmp	r2, r4
    e54a:	f000 80ec 	beq.w	e726 <am_hal_iom_configure+0x236>
    e54e:	2006      	movs	r0, #6
    e550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e554:	2002      	movs	r0, #2
    e556:	4770      	bx	lr
    e558:	7a0e      	ldrb	r6, [r1, #8]
    e55a:	2e03      	cmp	r6, #3
    e55c:	d8f7      	bhi.n	e54e <am_hal_iom_configure+0x5e>
    e55e:	684c      	ldr	r4, [r1, #4]
    e560:	4a81      	ldr	r2, [pc, #516]	; (e768 <am_hal_iom_configure+0x278>)
    e562:	4294      	cmp	r4, r2
    e564:	d8f3      	bhi.n	e54e <am_hal_iom_configure+0x5e>
    e566:	fbb2 f5f4 	udiv	r5, r2, r4
    e56a:	2c00      	cmp	r4, #0
    e56c:	f000 80d0 	beq.w	e710 <am_hal_iom_configure+0x220>
    e570:	fb04 2215 	mls	r2, r4, r5, r2
    e574:	2a00      	cmp	r2, #0
    e576:	bf0c      	ite	eq
    e578:	46ac      	moveq	ip, r5
    e57a:	f105 0c01 	addne.w	ip, r5, #1
    e57e:	f1cc 0200 	rsb	r2, ip, #0
    e582:	ea02 020c 	and.w	r2, r2, ip
    e586:	fab2 f282 	clz	r2, r2
    e58a:	f1c2 021f 	rsb	r2, r2, #31
    e58e:	2a06      	cmp	r2, #6
    e590:	bfa8      	it	ge
    e592:	2206      	movge	r2, #6
    e594:	f5b4 6f37 	cmp.w	r4, #2928	; 0xb70
    e598:	f240 80b5 	bls.w	e706 <am_hal_iom_configure+0x216>
    e59c:	f8df e1e4 	ldr.w	lr, [pc, #484]	; e784 <am_hal_iom_configure+0x294>
    e5a0:	f5a4 0774 	sub.w	r7, r4, #15990784	; 0xf40000
    e5a4:	f5a7 5710 	sub.w	r7, r7, #9216	; 0x2400
    e5a8:	4577      	cmp	r7, lr
    e5aa:	bf34      	ite	cc
    e5ac:	f04f 0902 	movcc.w	r9, #2
    e5b0:	f04f 0900 	movcs.w	r9, #0
    e5b4:	f109 0901 	add.w	r9, r9, #1
    e5b8:	bf34      	ite	cc
    e5ba:	f04f 0e01 	movcc.w	lr, #1
    e5be:	f04f 0e00 	movcs.w	lr, #0
    e5c2:	fa09 f802 	lsl.w	r8, r9, r2
    e5c6:	fbbc f7f8 	udiv	r7, ip, r8
    e5ca:	fb08 c817 	mls	r8, r8, r7, ip
    e5ce:	f1b8 0f00 	cmp.w	r8, #0
    e5d2:	bf18      	it	ne
    e5d4:	3701      	addne	r7, #1
    e5d6:	fab7 fa87 	clz	sl, r7
    e5da:	f1ca 081f 	rsb	r8, sl, #31
    e5de:	f1b8 0f07 	cmp.w	r8, #7
    e5e2:	f240 8097 	bls.w	e714 <am_hal_iom_configure+0x224>
    e5e6:	3a07      	subs	r2, #7
    e5e8:	4442      	add	r2, r8
    e5ea:	f102 0801 	add.w	r8, r2, #1
    e5ee:	f1b8 0f07 	cmp.w	r8, #7
    e5f2:	f200 808d 	bhi.w	e710 <am_hal_iom_configure+0x220>
    e5f6:	f1ca 0a18 	rsb	sl, sl, #24
    e5fa:	f04f 0b01 	mov.w	fp, #1
    e5fe:	fa0b fb0a 	lsl.w	fp, fp, sl
    e602:	f10b 3bff 	add.w	fp, fp, #4294967295
    e606:	fa27 fa0a 	lsr.w	sl, r7, sl
    e60a:	ea0b 0b07 	and.w	fp, fp, r7
    e60e:	f1bb 0f00 	cmp.w	fp, #0
    e612:	bf0c      	ite	eq
    e614:	4657      	moveq	r7, sl
    e616:	f10a 0701 	addne.w	r7, sl, #1
    e61a:	f8df a16c 	ldr.w	sl, [pc, #364]	; e788 <am_hal_iom_configure+0x298>
    e61e:	4554      	cmp	r4, sl
    e620:	d27b      	bcs.n	e71a <am_hal_iom_configure+0x22a>
    e622:	2401      	movs	r4, #1
    e624:	4094      	lsls	r4, r2
    e626:	45a4      	cmp	ip, r4
    e628:	d077      	beq.n	e71a <am_hal_iom_configure+0x22a>
    e62a:	f107 3cff 	add.w	ip, r7, #4294967295
    e62e:	463c      	mov	r4, r7
    e630:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
    e634:	ea4f 0b66 	mov.w	fp, r6, asr #1
    e638:	f1bb 0f01 	cmp.w	fp, #1
    e63c:	fa09 f202 	lsl.w	r2, r9, r2
    e640:	bf08      	it	eq
    e642:	3f02      	subeq	r7, #2
    e644:	fb04 f202 	mul.w	r2, r4, r2
    e648:	ea4f 24ce 	mov.w	r4, lr, lsl #11
    e64c:	bf14      	ite	ne
    e64e:	ea4f 075c 	movne.w	r7, ip, lsr #1
    e652:	087f      	lsreq	r7, r7, #1
    e654:	ea44 2408 	orr.w	r4, r4, r8, lsl #8
    e658:	ea44 040a 	orr.w	r4, r4, sl
    e65c:	043f      	lsls	r7, r7, #16
    e65e:	ea44 640c 	orr.w	r4, r4, ip, lsl #24
    e662:	f407 077f 	and.w	r7, r7, #16711680	; 0xff0000
    e666:	433c      	orrs	r4, r7
    e668:	4f3f      	ldr	r7, [pc, #252]	; (e768 <am_hal_iom_configure+0x278>)
    e66a:	f8df c120 	ldr.w	ip, [pc, #288]	; e78c <am_hal_iom_configure+0x29c>
    e66e:	fbb7 f9f2 	udiv	r9, r7, r2
    e672:	fb02 7e19 	mls	lr, r2, r9, r7
    e676:	0852      	lsrs	r2, r2, #1
    e678:	4572      	cmp	r2, lr
    e67a:	bf2c      	ite	cs
    e67c:	464f      	movcs	r7, r9
    e67e:	f109 0701 	addcc.w	r7, r9, #1
    e682:	f8df e10c 	ldr.w	lr, [pc, #268]	; e790 <am_hal_iom_configure+0x2a0>
    e686:	fbac c207 	umull	ip, r2, ip, r7
    e68a:	f8df c108 	ldr.w	ip, [pc, #264]	; e794 <am_hal_iom_configure+0x2a4>
    e68e:	0c12      	lsrs	r2, r2, #16
    e690:	4577      	cmp	r7, lr
    e692:	ea4f 2808 	mov.w	r8, r8, lsl #8
    e696:	fb0c 7c12 	mls	ip, ip, r2, r7
    e69a:	d906      	bls.n	e6aa <am_hal_iom_configure+0x1ba>
    e69c:	1e57      	subs	r7, r2, #1
    e69e:	403a      	ands	r2, r7
    e6a0:	ea52 020c 	orrs.w	r2, r2, ip
    e6a4:	d101      	bne.n	e6aa <am_hal_iom_configure+0x1ba>
    e6a6:	f448 6400 	orr.w	r4, r8, #2048	; 0x800
    e6aa:	f044 0401 	orr.w	r4, r4, #1
    e6ae:	f8c3 6300 	str.w	r6, [r3, #768]	; 0x300
    e6b2:	f8c3 4210 	str.w	r4, [r3, #528]	; 0x210
    e6b6:	e9d1 1303 	ldrd	r1, r3, [r1, #12]
    e6ba:	f1a3 0208 	sub.w	r2, r3, #8
    e6be:	60c1      	str	r1, [r0, #12]
    e6c0:	f246 015f 	movw	r1, #24671	; 0x605f
    e6c4:	ebb1 0f82 	cmp.w	r1, r2, lsl #2
    e6c8:	6103      	str	r3, [r0, #16]
    e6ca:	ea4f 0382 	mov.w	r3, r2, lsl #2
    e6ce:	bf28      	it	cs
    e6d0:	4a26      	ldrcs	r2, [pc, #152]	; (e76c <am_hal_iom_configure+0x27c>)
    e6d2:	f8c0 5864 	str.w	r5, [r0, #2148]	; 0x864
    e6d6:	bf26      	itte	cs
    e6d8:	fba2 2303 	umullcs	r2, r3, r2, r3
    e6dc:	099b      	lsrcs	r3, r3, #6
    e6de:	f44f 7380 	movcc.w	r3, #256	; 0x100
    e6e2:	f8c0 3858 	str.w	r3, [r0, #2136]	; 0x858
    e6e6:	2300      	movs	r3, #0
    e6e8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    e6ec:	f8c0 38a0 	str.w	r3, [r0, #2208]	; 0x8a0
    e6f0:	f8c0 4860 	str.w	r4, [r0, #2144]	; 0x860
    e6f4:	4618      	mov	r0, r3
    e6f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e6fa:	2006      	movs	r0, #6
    e6fc:	4770      	bx	lr
    e6fe:	2007      	movs	r0, #7
    e700:	4770      	bx	lr
    e702:	2005      	movs	r0, #5
    e704:	e724      	b.n	e550 <am_hal_iom_configure+0x60>
    e706:	f04f 0903 	mov.w	r9, #3
    e70a:	f04f 0e01 	mov.w	lr, #1
    e70e:	e758      	b.n	e5c2 <am_hal_iom_configure+0xd2>
    e710:	2401      	movs	r4, #1
    e712:	e7cc      	b.n	e6ae <am_hal_iom_configure+0x1be>
    e714:	f102 0801 	add.w	r8, r2, #1
    e718:	e77f      	b.n	e61a <am_hal_iom_configure+0x12a>
    e71a:	f107 3cff 	add.w	ip, r7, #4294967295
    e71e:	2401      	movs	r4, #1
    e720:	f04f 0a00 	mov.w	sl, #0
    e724:	e786      	b.n	e634 <am_hal_iom_configure+0x144>
    e726:	f104 44ee 	add.w	r4, r4, #1996488704	; 0x77000000
    e72a:	4a11      	ldr	r2, [pc, #68]	; (e770 <am_hal_iom_configure+0x280>)
    e72c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    e730:	f504 1466 	add.w	r4, r4, #3768320	; 0x398000
    e734:	f604 3461 	addw	r4, r4, #2913	; 0xb61
    e738:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
    e73c:	e7b9      	b.n	e6b2 <am_hal_iom_configure+0x1c2>
    e73e:	4a0d      	ldr	r2, [pc, #52]	; (e774 <am_hal_iom_configure+0x284>)
    e740:	4c0d      	ldr	r4, [pc, #52]	; (e778 <am_hal_iom_configure+0x288>)
    e742:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    e746:	2530      	movs	r5, #48	; 0x30
    e748:	e7b3      	b.n	e6b2 <am_hal_iom_configure+0x1c2>
    e74a:	4a0c      	ldr	r2, [pc, #48]	; (e77c <am_hal_iom_configure+0x28c>)
    e74c:	4c0c      	ldr	r4, [pc, #48]	; (e780 <am_hal_iom_configure+0x290>)
    e74e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    e752:	2578      	movs	r5, #120	; 0x78
    e754:	e7ad      	b.n	e6b2 <am_hal_iom_configure+0x1c2>
    e756:	bf00      	nop
    e758:	01123456 	.word	0x01123456
    e75c:	00061a80 	.word	0x00061a80
    e760:	000f4240 	.word	0x000f4240
    e764:	000186a0 	.word	0x000186a0
    e768:	02dc6c00 	.word	0x02dc6c00
    e76c:	aaaaaaab 	.word	0xaaaaaaab
    e770:	0003f070 	.word	0x0003f070
    e774:	00213040 	.word	0x00213040
    e778:	06031301 	.word	0x06031301
    e77c:	0003f270 	.word	0x0003f270
    e780:	1d0e1201 	.word	0x1d0e1201
    e784:	007a1200 	.word	0x007a1200
    e788:	00b71b00 	.word	0x00b71b00
    e78c:	431bde83 	.word	0x431bde83
    e790:	0003d08f 	.word	0x0003d08f
    e794:	0003d090 	.word	0x0003d090

0000e798 <am_hal_iom_blocking_transfer>:
    e798:	2800      	cmp	r0, #0
    e79a:	f000 8139 	beq.w	ea10 <am_hal_iom_blocking_transfer+0x278>
    e79e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e7a2:	6803      	ldr	r3, [r0, #0]
    e7a4:	4abd      	ldr	r2, [pc, #756]	; (ea9c <am_hal_iom_blocking_transfer+0x304>)
    e7a6:	ed2d 8b02 	vpush	{d8}
    e7aa:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e7ae:	4293      	cmp	r3, r2
    e7b0:	b085      	sub	sp, #20
    e7b2:	4606      	mov	r6, r0
    e7b4:	f040 810a 	bne.w	e9cc <am_hal_iom_blocking_transfer+0x234>
    e7b8:	460c      	mov	r4, r1
    e7ba:	2900      	cmp	r1, #0
    e7bc:	f000 8111 	beq.w	e9e2 <am_hal_iom_blocking_transfer+0x24a>
    e7c0:	f891 8010 	ldrb.w	r8, [r1, #16]
    e7c4:	f1b8 0f01 	cmp.w	r8, #1
    e7c8:	f200 8116 	bhi.w	e9f8 <am_hal_iom_blocking_transfer+0x260>
    e7cc:	f8d1 b00c 	ldr.w	fp, [r1, #12]
    e7d0:	f1bb 0f00 	cmp.w	fp, #0
    e7d4:	f000 810c 	beq.w	e9f0 <am_hal_iom_blocking_transfer+0x258>
    e7d8:	f8d4 9004 	ldr.w	r9, [r4, #4]
    e7dc:	f1b9 0f03 	cmp.w	r9, #3
    e7e0:	f200 80ff 	bhi.w	e9e2 <am_hal_iom_blocking_transfer+0x24a>
    e7e4:	f8d4 a008 	ldr.w	sl, [r4, #8]
    e7e8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
    e7ec:	f04f 33ff 	mov.w	r3, #4294967295
    e7f0:	4093      	lsls	r3, r2
    e7f2:	ea13 0f0a 	tst.w	r3, sl
    e7f6:	f040 80f4 	bne.w	e9e2 <am_hal_iom_blocking_transfer+0x24a>
    e7fa:	f1bb 0f00 	cmp.w	fp, #0
    e7fe:	f000 8102 	beq.w	ea06 <am_hal_iom_blocking_transfer+0x26e>
    e802:	f1b8 0f00 	cmp.w	r8, #0
    e806:	f000 8106 	beq.w	ea16 <am_hal_iom_blocking_transfer+0x27e>
    e80a:	69a3      	ldr	r3, [r4, #24]
    e80c:	2b00      	cmp	r3, #0
    e80e:	f000 80e8 	beq.w	e9e2 <am_hal_iom_blocking_transfer+0x24a>
    e812:	7a33      	ldrb	r3, [r6, #8]
    e814:	2b01      	cmp	r3, #1
    e816:	f000 80e0 	beq.w	e9da <am_hal_iom_blocking_transfer+0x242>
    e81a:	b93b      	cbnz	r3, e82c <am_hal_iom_blocking_transfer+0x94>
    e81c:	6823      	ldr	r3, [r4, #0]
    e81e:	2b03      	cmp	r3, #3
    e820:	f200 80df 	bhi.w	e9e2 <am_hal_iom_blocking_transfer+0x24a>
    e824:	f5bb 5f80 	cmp.w	fp, #4096	; 0x1000
    e828:	f080 80db 	bcs.w	e9e2 <am_hal_iom_blocking_transfer+0x24a>
    e82c:	f896 382c 	ldrb.w	r3, [r6, #2092]	; 0x82c
    e830:	2b02      	cmp	r3, #2
    e832:	f000 80e1 	beq.w	e9f8 <am_hal_iom_blocking_transfer+0x260>
    e836:	e9d4 3705 	ldrd	r3, r7, [r4, #20]
    e83a:	f1b8 0f00 	cmp.w	r8, #0
    e83e:	bf08      	it	eq
    e840:	461f      	moveq	r7, r3
    e842:	2301      	movs	r3, #1
    e844:	9300      	str	r3, [sp, #0]
    e846:	6875      	ldr	r5, [r6, #4]
    e848:	f894 c01c 	ldrb.w	ip, [r4, #28]
    e84c:	f8d6 0860 	ldr.w	r0, [r6, #2144]	; 0x860
    e850:	9502      	str	r5, [sp, #8]
    e852:	2300      	movs	r3, #0
    e854:	f04f 32ff 	mov.w	r2, #4294967295
    e858:	f106 0124 	add.w	r1, r6, #36	; 0x24
    e85c:	f8cd c00c 	str.w	ip, [sp, #12]
    e860:	f7ff f9ce 	bl	dc00 <am_hal_flash_delay_status_check>
    e864:	4603      	mov	r3, r0
    e866:	2800      	cmp	r0, #0
    e868:	f040 80b1 	bne.w	e9ce <am_hal_iom_blocking_transfer+0x236>
    e86c:	9d02      	ldr	r5, [sp, #8]
    e86e:	f505 25a0 	add.w	r5, r5, #327680	; 0x50000
    e872:	3504      	adds	r5, #4
    e874:	2301      	movs	r3, #1
    e876:	032d      	lsls	r5, r5, #12
    e878:	9300      	str	r3, [sp, #0]
    e87a:	f505 732d 	add.w	r3, r5, #692	; 0x2b4
    e87e:	4619      	mov	r1, r3
    e880:	ee08 3a10 	vmov	s16, r3
    e884:	f8d6 0860 	ldr.w	r0, [r6, #2144]	; 0x860
    e888:	2304      	movs	r3, #4
    e88a:	2206      	movs	r2, #6
    e88c:	f7ff f9b8 	bl	dc00 <am_hal_flash_delay_status_check>
    e890:	4603      	mov	r3, r0
    e892:	2800      	cmp	r0, #0
    e894:	f040 809b 	bne.w	e9ce <am_hal_iom_blocking_transfer+0x236>
    e898:	f8d5 2200 	ldr.w	r2, [r5, #512]	; 0x200
    e89c:	9202      	str	r2, [sp, #8]
    e89e:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    e8a2:	f8b5 2280 	ldrh.w	r2, [r5, #640]	; 0x280
    e8a6:	f360 0200 	bfi	r2, r0, #0, #1
    e8aa:	f8a5 2280 	strh.w	r2, [r5, #640]	; 0x280
    e8ae:	6822      	ldr	r2, [r4, #0]
    e8b0:	f04f 31ff 	mov.w	r1, #4294967295
    e8b4:	f8c5 1208 	str.w	r1, [r5, #520]	; 0x208
    e8b8:	f8c5 2404 	str.w	r2, [r5, #1028]	; 0x404
    e8bc:	7a31      	ldrb	r1, [r6, #8]
    e8be:	2900      	cmp	r1, #0
    e8c0:	f000 80ae 	beq.w	ea20 <am_hal_iom_blocking_transfer+0x288>
    e8c4:	f8c5 021c 	str.w	r0, [r5, #540]	; 0x21c
    e8c8:	4a75      	ldr	r2, [pc, #468]	; (eaa0 <am_hal_iom_blocking_transfer+0x308>)
    e8ca:	f1b8 0f01 	cmp.w	r8, #1
    e8ce:	ea02 2b0b 	and.w	fp, r2, fp, lsl #8
    e8d2:	ea4b 0303 	orr.w	r3, fp, r3
    e8d6:	f000 80e9 	beq.w	eaac <am_hal_iom_blocking_transfer+0x314>
    e8da:	f3ca 220f 	ubfx	r2, sl, #8, #16
    e8de:	68e4      	ldr	r4, [r4, #12]
    e8e0:	f8c5 2220 	str.w	r2, [r5, #544]	; 0x220
    e8e4:	f8d5 2100 	ldr.w	r2, [r5, #256]	; 0x100
    e8e8:	f3c2 2207 	ubfx	r2, r2, #8, #8
    e8ec:	2a03      	cmp	r2, #3
    e8ee:	46bb      	mov	fp, r7
    e8f0:	d917      	bls.n	e922 <am_hal_iom_blocking_transfer+0x18a>
    e8f2:	b1b4      	cbz	r4, e922 <am_hal_iom_blocking_transfer+0x18a>
    e8f4:	f85b 1b04 	ldr.w	r1, [fp], #4
    e8f8:	f8c5 110c 	str.w	r1, [r5, #268]	; 0x10c
    e8fc:	2c03      	cmp	r4, #3
    e8fe:	d90f      	bls.n	e920 <am_hal_iom_blocking_transfer+0x188>
    e900:	3a04      	subs	r2, #4
    e902:	f022 0203 	bic.w	r2, r2, #3
    e906:	3204      	adds	r2, #4
    e908:	4417      	add	r7, r2
    e90a:	455f      	cmp	r7, fp
    e90c:	f1a4 0404 	sub.w	r4, r4, #4
    e910:	d007      	beq.n	e922 <am_hal_iom_blocking_transfer+0x18a>
    e912:	b134      	cbz	r4, e922 <am_hal_iom_blocking_transfer+0x18a>
    e914:	f85b 2b04 	ldr.w	r2, [fp], #4
    e918:	f8c5 210c 	str.w	r2, [r5, #268]	; 0x10c
    e91c:	2c03      	cmp	r4, #3
    e91e:	d8f4      	bhi.n	e90a <am_hal_iom_blocking_transfer+0x172>
    e920:	4644      	mov	r4, r8
    e922:	ea4f 1949 	mov.w	r9, r9, lsl #5
    e926:	9a03      	ldr	r2, [sp, #12]
    e928:	ea49 6a0a 	orr.w	sl, r9, sl, lsl #24
    e92c:	ea4a 0303 	orr.w	r3, sl, r3
    e930:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
    e934:	f043 0301 	orr.w	r3, r3, #1
    e938:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
    e93c:	2c00      	cmp	r4, #0
    e93e:	f000 8095 	beq.w	ea6c <am_hal_iom_blocking_transfer+0x2d4>
    e942:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    e946:	f3c3 2307 	ubfx	r3, r3, #8, #8
    e94a:	2b03      	cmp	r3, #3
    e94c:	f200 8090 	bhi.w	ea70 <am_hal_iom_blocking_transfer+0x2d8>
    e950:	4f54      	ldr	r7, [pc, #336]	; (eaa4 <am_hal_iom_blocking_transfer+0x30c>)
    e952:	e00a      	b.n	e96a <am_hal_iom_blocking_transfer+0x1d2>
    e954:	3f01      	subs	r7, #1
    e956:	d00e      	beq.n	e976 <am_hal_iom_blocking_transfer+0x1de>
    e958:	f7ff f942 	bl	dbe0 <am_hal_flash_delay>
    e95c:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    e960:	f3c3 2307 	ubfx	r3, r3, #8, #8
    e964:	2b03      	cmp	r3, #3
    e966:	f200 8083 	bhi.w	ea70 <am_hal_iom_blocking_transfer+0x2d8>
    e96a:	f8d5 3204 	ldr.w	r3, [r5, #516]	; 0x204
    e96e:	07db      	lsls	r3, r3, #31
    e970:	f04f 0010 	mov.w	r0, #16
    e974:	d5ee      	bpl.n	e954 <am_hal_iom_blocking_transfer+0x1bc>
    e976:	2701      	movs	r7, #1
    e978:	2304      	movs	r3, #4
    e97a:	ee18 1a10 	vmov	r1, s16
    e97e:	484a      	ldr	r0, [pc, #296]	; (eaa8 <am_hal_iom_blocking_transfer+0x310>)
    e980:	9700      	str	r7, [sp, #0]
    e982:	2206      	movs	r2, #6
    e984:	f7ff f93c 	bl	dc00 <am_hal_flash_delay_status_check>
    e988:	4603      	mov	r3, r0
    e98a:	b980      	cbnz	r0, e9ae <am_hal_iom_blocking_transfer+0x216>
    e98c:	f8d5 3204 	ldr.w	r3, [r5, #516]	; 0x204
    e990:	f013 0f6c 	tst.w	r3, #108	; 0x6c
    e994:	f040 80bf 	bne.w	eb16 <am_hal_iom_blocking_transfer+0x37e>
    e998:	0599      	lsls	r1, r3, #22
    e99a:	f100 80bf 	bmi.w	eb1c <am_hal_iom_blocking_transfer+0x384>
    e99e:	06da      	lsls	r2, r3, #27
    e9a0:	f100 80be 	bmi.w	eb20 <am_hal_iom_blocking_transfer+0x388>
    e9a4:	f403 4390 	and.w	r3, r3, #18432	; 0x4800
    e9a8:	4323      	orrs	r3, r4
    e9aa:	d007      	beq.n	e9bc <am_hal_iom_blocking_transfer+0x224>
    e9ac:	463b      	mov	r3, r7
    e9ae:	f8d5 1204 	ldr.w	r1, [r5, #516]	; 0x204
    e9b2:	9303      	str	r3, [sp, #12]
    e9b4:	4630      	mov	r0, r6
    e9b6:	f7ff fbb1 	bl	e11c <internal_iom_reset_on_error>
    e9ba:	9b03      	ldr	r3, [sp, #12]
    e9bc:	f04f 32ff 	mov.w	r2, #4294967295
    e9c0:	f8c5 2208 	str.w	r2, [r5, #520]	; 0x208
    e9c4:	9a02      	ldr	r2, [sp, #8]
    e9c6:	f8c5 2200 	str.w	r2, [r5, #512]	; 0x200
    e9ca:	e000      	b.n	e9ce <am_hal_iom_blocking_transfer+0x236>
    e9cc:	2302      	movs	r3, #2
    e9ce:	4618      	mov	r0, r3
    e9d0:	b005      	add	sp, #20
    e9d2:	ecbd 8b02 	vpop	{d8}
    e9d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e9da:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    e9de:	f67f af25 	bls.w	e82c <am_hal_iom_blocking_transfer+0x94>
    e9e2:	2306      	movs	r3, #6
    e9e4:	4618      	mov	r0, r3
    e9e6:	b005      	add	sp, #20
    e9e8:	ecbd 8b02 	vpop	{d8}
    e9ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e9f0:	f881 b010 	strb.w	fp, [r1, #16]
    e9f4:	46d8      	mov	r8, fp
    e9f6:	e6ef      	b.n	e7d8 <am_hal_iom_blocking_transfer+0x40>
    e9f8:	2307      	movs	r3, #7
    e9fa:	4618      	mov	r0, r3
    e9fc:	b005      	add	sp, #20
    e9fe:	ecbd 8b02 	vpop	{d8}
    ea02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ea06:	7a33      	ldrb	r3, [r6, #8]
    ea08:	2b01      	cmp	r3, #1
    ea0a:	f47f af06 	bne.w	e81a <am_hal_iom_blocking_transfer+0x82>
    ea0e:	e70d      	b.n	e82c <am_hal_iom_blocking_transfer+0x94>
    ea10:	2302      	movs	r3, #2
    ea12:	4618      	mov	r0, r3
    ea14:	4770      	bx	lr
    ea16:	6963      	ldr	r3, [r4, #20]
    ea18:	2b00      	cmp	r3, #0
    ea1a:	f47f aefa 	bne.w	e812 <am_hal_iom_blocking_transfer+0x7a>
    ea1e:	e7e0      	b.n	e9e2 <am_hal_iom_blocking_transfer+0x24a>
    ea20:	18b1      	adds	r1, r6, r2
    ea22:	0513      	lsls	r3, r2, #20
    ea24:	f891 28a0 	ldrb.w	r2, [r1, #2208]	; 0x8a0
    ea28:	f8c5 221c 	str.w	r2, [r5, #540]	; 0x21c
    ea2c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    ea30:	e74a      	b.n	e8c8 <am_hal_iom_blocking_transfer+0x130>
    ea32:	2b03      	cmp	r3, #3
    ea34:	f8c8 1000 	str.w	r1, [r8]
    ea38:	f1a4 0404 	sub.w	r4, r4, #4
    ea3c:	f108 0804 	add.w	r8, r8, #4
    ea40:	d966      	bls.n	eb10 <am_hal_iom_blocking_transfer+0x378>
    ea42:	b19c      	cbz	r4, ea6c <am_hal_iom_blocking_transfer+0x2d4>
    ea44:	2c03      	cmp	r4, #3
    ea46:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
    ea4a:	f1a3 0304 	sub.w	r3, r3, #4
    ea4e:	d8f0      	bhi.n	ea32 <am_hal_iom_blocking_transfer+0x29a>
    ea50:	3c01      	subs	r4, #1
    ea52:	f888 1000 	strb.w	r1, [r8]
    ea56:	ea4f 2311 	mov.w	r3, r1, lsr #8
    ea5a:	d007      	beq.n	ea6c <am_hal_iom_blocking_transfer+0x2d4>
    ea5c:	2c01      	cmp	r4, #1
    ea5e:	f888 3001 	strb.w	r3, [r8, #1]
    ea62:	ea4f 4111 	mov.w	r1, r1, lsr #16
    ea66:	d001      	beq.n	ea6c <am_hal_iom_blocking_transfer+0x2d4>
    ea68:	f888 1002 	strb.w	r1, [r8, #2]
    ea6c:	2400      	movs	r4, #0
    ea6e:	e782      	b.n	e976 <am_hal_iom_blocking_transfer+0x1de>
    ea70:	f004 0003 	and.w	r0, r4, #3
    ea74:	465a      	mov	r2, fp
    ea76:	f852 1b04 	ldr.w	r1, [r2], #4
    ea7a:	f8c5 110c 	str.w	r1, [r5, #268]	; 0x10c
    ea7e:	42a0      	cmp	r0, r4
    ea80:	ebab 0102 	sub.w	r1, fp, r2
    ea84:	4419      	add	r1, r3
    ea86:	f1a4 0404 	sub.w	r4, r4, #4
    ea8a:	d004      	beq.n	ea96 <am_hal_iom_blocking_transfer+0x2fe>
    ea8c:	2903      	cmp	r1, #3
    ea8e:	d903      	bls.n	ea98 <am_hal_iom_blocking_transfer+0x300>
    ea90:	2c00      	cmp	r4, #0
    ea92:	d1f0      	bne.n	ea76 <am_hal_iom_blocking_transfer+0x2de>
    ea94:	e7ea      	b.n	ea6c <am_hal_iom_blocking_transfer+0x2d4>
    ea96:	4644      	mov	r4, r8
    ea98:	4693      	mov	fp, r2
    ea9a:	e74f      	b.n	e93c <am_hal_iom_blocking_transfer+0x1a4>
    ea9c:	01123456 	.word	0x01123456
    eaa0:	000fff00 	.word	0x000fff00
    eaa4:	0007a121 	.word	0x0007a121
    eaa8:	0007a120 	.word	0x0007a120
    eaac:	ea4f 1249 	mov.w	r2, r9, lsl #5
    eab0:	ea42 620a 	orr.w	r2, r2, sl, lsl #24
    eab4:	4313      	orrs	r3, r2
    eab6:	9a03      	ldr	r2, [sp, #12]
    eab8:	68e4      	ldr	r4, [r4, #12]
    eaba:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
    eabe:	f043 0302 	orr.w	r3, r3, #2
    eac2:	f3ca 220f 	ubfx	r2, sl, #8, #16
    eac6:	f8c5 2220 	str.w	r2, [r5, #544]	; 0x220
    eaca:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
    eace:	2c00      	cmp	r4, #0
    ead0:	d0cc      	beq.n	ea6c <am_hal_iom_blocking_transfer+0x2d4>
    ead2:	2200      	movs	r2, #0
    ead4:	46b8      	mov	r8, r7
    ead6:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    eada:	f3c3 4307 	ubfx	r3, r3, #16, #8
    eade:	2b03      	cmp	r3, #3
    eae0:	d8b0      	bhi.n	ea44 <am_hal_iom_blocking_transfer+0x2ac>
    eae2:	4f10      	ldr	r7, [pc, #64]	; (eb24 <am_hal_iom_blocking_transfer+0x38c>)
    eae4:	e002      	b.n	eaec <am_hal_iom_blocking_transfer+0x354>
    eae6:	3f01      	subs	r7, #1
    eae8:	f43f af45 	beq.w	e976 <am_hal_iom_blocking_transfer+0x1de>
    eaec:	2010      	movs	r0, #16
    eaee:	b112      	cbz	r2, eaf6 <am_hal_iom_blocking_transfer+0x35e>
    eaf0:	42a3      	cmp	r3, r4
    eaf2:	f4ff af40 	bcc.w	e976 <am_hal_iom_blocking_transfer+0x1de>
    eaf6:	f7ff f873 	bl	dbe0 <am_hal_flash_delay>
    eafa:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
    eafe:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    eb02:	f3c3 4307 	ubfx	r3, r3, #16, #8
    eb06:	2b03      	cmp	r3, #3
    eb08:	f002 0201 	and.w	r2, r2, #1
    eb0c:	d9eb      	bls.n	eae6 <am_hal_iom_blocking_transfer+0x34e>
    eb0e:	e799      	b.n	ea44 <am_hal_iom_blocking_transfer+0x2ac>
    eb10:	2c00      	cmp	r4, #0
    eb12:	d1e0      	bne.n	ead6 <am_hal_iom_blocking_transfer+0x33e>
    eb14:	e7aa      	b.n	ea6c <am_hal_iom_blocking_transfer+0x2d4>
    eb16:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    eb1a:	e748      	b.n	e9ae <am_hal_iom_blocking_transfer+0x216>
    eb1c:	4b02      	ldr	r3, [pc, #8]	; (eb28 <am_hal_iom_blocking_transfer+0x390>)
    eb1e:	e746      	b.n	e9ae <am_hal_iom_blocking_transfer+0x216>
    eb20:	4b02      	ldr	r3, [pc, #8]	; (eb2c <am_hal_iom_blocking_transfer+0x394>)
    eb22:	e744      	b.n	e9ae <am_hal_iom_blocking_transfer+0x216>
    eb24:	0007a120 	.word	0x0007a120
    eb28:	08000001 	.word	0x08000001
    eb2c:	08000002 	.word	0x08000002

0000eb30 <am_hal_itm_enable>:
    eb30:	4a0e      	ldr	r2, [pc, #56]	; (eb6c <am_hal_itm_enable+0x3c>)
    eb32:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    eb36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    eb3a:	b410      	push	{r4}
    eb3c:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    eb40:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    eb44:	01db      	lsls	r3, r3, #7
    eb46:	d5fb      	bpl.n	eb40 <am_hal_itm_enable+0x10>
    eb48:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    eb4c:	4c08      	ldr	r4, [pc, #32]	; (eb70 <am_hal_itm_enable+0x40>)
    eb4e:	4a09      	ldr	r2, [pc, #36]	; (eb74 <am_hal_itm_enable+0x44>)
    eb50:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    eb54:	200f      	movs	r0, #15
    eb56:	f04f 31ff 	mov.w	r1, #4294967295
    eb5a:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    eb5e:	f85d 4b04 	ldr.w	r4, [sp], #4
    eb62:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    eb66:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    eb6a:	4770      	bx	lr
    eb6c:	e000ed00 	.word	0xe000ed00
    eb70:	c5acce55 	.word	0xc5acce55
    eb74:	00150511 	.word	0x00150511

0000eb78 <am_hal_itm_print>:
    eb78:	7803      	ldrb	r3, [r0, #0]
    eb7a:	b1a3      	cbz	r3, eba6 <am_hal_itm_print+0x2e>
    eb7c:	4603      	mov	r3, r0
    eb7e:	f1c0 0c01 	rsb	ip, r0, #1
    eb82:	eb0c 0103 	add.w	r1, ip, r3
    eb86:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    eb8a:	2a00      	cmp	r2, #0
    eb8c:	d1f9      	bne.n	eb82 <am_hal_itm_print+0xa>
    eb8e:	4401      	add	r1, r0
    eb90:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    eb94:	f810 cb01 	ldrb.w	ip, [r0], #1
    eb98:	6813      	ldr	r3, [r2, #0]
    eb9a:	2b00      	cmp	r3, #0
    eb9c:	d0fc      	beq.n	eb98 <am_hal_itm_print+0x20>
    eb9e:	4288      	cmp	r0, r1
    eba0:	f882 c000 	strb.w	ip, [r2]
    eba4:	d1f6      	bne.n	eb94 <am_hal_itm_print+0x1c>
    eba6:	4770      	bx	lr

0000eba8 <am_hal_pwrctrl_periph_enable>:
    eba8:	b570      	push	{r4, r5, r6, lr}
    ebaa:	b082      	sub	sp, #8
    ebac:	4604      	mov	r4, r0
    ebae:	f7ff faad 	bl	e10c <am_hal_interrupt_master_disable>
    ebb2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    ebb6:	4e0f      	ldr	r6, [pc, #60]	; (ebf4 <am_hal_pwrctrl_periph_enable+0x4c>)
    ebb8:	4d0f      	ldr	r5, [pc, #60]	; (ebf8 <am_hal_pwrctrl_periph_enable+0x50>)
    ebba:	9001      	str	r0, [sp, #4]
    ebbc:	00a4      	lsls	r4, r4, #2
    ebbe:	68b3      	ldr	r3, [r6, #8]
    ebc0:	592a      	ldr	r2, [r5, r4]
    ebc2:	4313      	orrs	r3, r2
    ebc4:	60b3      	str	r3, [r6, #8]
    ebc6:	9801      	ldr	r0, [sp, #4]
    ebc8:	442c      	add	r4, r5
    ebca:	f7ff faa3 	bl	e114 <am_hal_interrupt_master_set>
    ebce:	20a0      	movs	r0, #160	; 0xa0
    ebd0:	f7ff f806 	bl	dbe0 <am_hal_flash_delay>
    ebd4:	69b3      	ldr	r3, [r6, #24]
    ebd6:	6864      	ldr	r4, [r4, #4]
    ebd8:	4223      	tst	r3, r4
    ebda:	d103      	bne.n	ebe4 <am_hal_pwrctrl_periph_enable+0x3c>
    ebdc:	20a0      	movs	r0, #160	; 0xa0
    ebde:	f7fe ffff 	bl	dbe0 <am_hal_flash_delay>
    ebe2:	69b3      	ldr	r3, [r6, #24]
    ebe4:	4b03      	ldr	r3, [pc, #12]	; (ebf4 <am_hal_pwrctrl_periph_enable+0x4c>)
    ebe6:	699b      	ldr	r3, [r3, #24]
    ebe8:	4223      	tst	r3, r4
    ebea:	bf0c      	ite	eq
    ebec:	2001      	moveq	r0, #1
    ebee:	2000      	movne	r0, #0
    ebf0:	b002      	add	sp, #8
    ebf2:	bd70      	pop	{r4, r5, r6, pc}
    ebf4:	40021000 	.word	0x40021000
    ebf8:	0000f2f8 	.word	0x0000f2f8

0000ebfc <am_hal_pwrctrl_periph_disable>:
    ebfc:	b570      	push	{r4, r5, r6, lr}
    ebfe:	b082      	sub	sp, #8
    ec00:	4604      	mov	r4, r0
    ec02:	f7ff fa83 	bl	e10c <am_hal_interrupt_master_disable>
    ec06:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    ec0a:	4e10      	ldr	r6, [pc, #64]	; (ec4c <am_hal_pwrctrl_periph_disable+0x50>)
    ec0c:	4d10      	ldr	r5, [pc, #64]	; (ec50 <am_hal_pwrctrl_periph_disable+0x54>)
    ec0e:	9001      	str	r0, [sp, #4]
    ec10:	00a4      	lsls	r4, r4, #2
    ec12:	68b3      	ldr	r3, [r6, #8]
    ec14:	592a      	ldr	r2, [r5, r4]
    ec16:	ea23 0302 	bic.w	r3, r3, r2
    ec1a:	60b3      	str	r3, [r6, #8]
    ec1c:	9801      	ldr	r0, [sp, #4]
    ec1e:	442c      	add	r4, r5
    ec20:	f7ff fa78 	bl	e114 <am_hal_interrupt_master_set>
    ec24:	20a0      	movs	r0, #160	; 0xa0
    ec26:	f7fe ffdb 	bl	dbe0 <am_hal_flash_delay>
    ec2a:	69b3      	ldr	r3, [r6, #24]
    ec2c:	6864      	ldr	r4, [r4, #4]
    ec2e:	4223      	tst	r3, r4
    ec30:	d003      	beq.n	ec3a <am_hal_pwrctrl_periph_disable+0x3e>
    ec32:	20a0      	movs	r0, #160	; 0xa0
    ec34:	f7fe ffd4 	bl	dbe0 <am_hal_flash_delay>
    ec38:	69b3      	ldr	r3, [r6, #24]
    ec3a:	4b04      	ldr	r3, [pc, #16]	; (ec4c <am_hal_pwrctrl_periph_disable+0x50>)
    ec3c:	699b      	ldr	r3, [r3, #24]
    ec3e:	4223      	tst	r3, r4
    ec40:	bf14      	ite	ne
    ec42:	2001      	movne	r0, #1
    ec44:	2000      	moveq	r0, #0
    ec46:	b002      	add	sp, #8
    ec48:	bd70      	pop	{r4, r5, r6, pc}
    ec4a:	bf00      	nop
    ec4c:	40021000 	.word	0x40021000
    ec50:	0000f2f8 	.word	0x0000f2f8

0000ec54 <am_hal_pwrctrl_low_power_init>:
    ec54:	b530      	push	{r4, r5, lr}
    ec56:	4b69      	ldr	r3, [pc, #420]	; (edfc <am_hal_pwrctrl_low_power_init+0x1a8>)
    ec58:	681a      	ldr	r2, [r3, #0]
    ec5a:	b085      	sub	sp, #20
    ec5c:	b912      	cbnz	r2, ec64 <am_hal_pwrctrl_low_power_init+0x10>
    ec5e:	4a68      	ldr	r2, [pc, #416]	; (ee00 <am_hal_pwrctrl_low_power_init+0x1ac>)
    ec60:	6812      	ldr	r2, [r2, #0]
    ec62:	601a      	str	r2, [r3, #0]
    ec64:	4b67      	ldr	r3, [pc, #412]	; (ee04 <am_hal_pwrctrl_low_power_init+0x1b0>)
    ec66:	68db      	ldr	r3, [r3, #12]
    ec68:	b2db      	uxtb	r3, r3
    ec6a:	2b12      	cmp	r3, #18
    ec6c:	d104      	bne.n	ec78 <am_hal_pwrctrl_low_power_init+0x24>
    ec6e:	4c66      	ldr	r4, [pc, #408]	; (ee08 <am_hal_pwrctrl_low_power_init+0x1b4>)
    ec70:	6863      	ldr	r3, [r4, #4]
    ec72:	07d8      	lsls	r0, r3, #31
    ec74:	f100 8088 	bmi.w	ed88 <am_hal_pwrctrl_low_power_init+0x134>
    ec78:	4b62      	ldr	r3, [pc, #392]	; (ee04 <am_hal_pwrctrl_low_power_init+0x1b0>)
    ec7a:	68da      	ldr	r2, [r3, #12]
    ec7c:	b2d2      	uxtb	r2, r2
    ec7e:	2a20      	cmp	r2, #32
    ec80:	d934      	bls.n	ecec <am_hal_pwrctrl_low_power_init+0x98>
    ec82:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
    ec86:	2002      	movs	r0, #2
    ec88:	f360 4213 	bfi	r2, r0, #16, #4
    ec8c:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    ec90:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
    ec94:	2203      	movs	r2, #3
    ec96:	f362 5117 	bfi	r1, r2, #20, #4
    ec9a:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
    ec9e:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    eca2:	2405      	movs	r4, #5
    eca4:	f364 0103 	bfi	r1, r4, #0, #4
    eca8:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    ecac:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    ecb0:	f360 1107 	bfi	r1, r0, #4, #4
    ecb4:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    ecb8:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    ecbc:	2406      	movs	r4, #6
    ecbe:	f364 210b 	bfi	r1, r4, #8, #4
    ecc2:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    ecc6:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    ecca:	2001      	movs	r0, #1
    eccc:	f360 310f 	bfi	r1, r0, #12, #4
    ecd0:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    ecd4:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    ecd8:	f362 61de 	bfi	r1, r2, #27, #4
    ecdc:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    ece0:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
    ece4:	f362 0103 	bfi	r1, r2, #0, #4
    ece8:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
    ecec:	4a45      	ldr	r2, [pc, #276]	; (ee04 <am_hal_pwrctrl_low_power_init+0x1b0>)
    ecee:	68d3      	ldr	r3, [r2, #12]
    ecf0:	b2db      	uxtb	r3, r3
    ecf2:	2b11      	cmp	r3, #17
    ecf4:	d905      	bls.n	ed02 <am_hal_pwrctrl_low_power_init+0xae>
    ecf6:	f8d2 335c 	ldr.w	r3, [r2, #860]	; 0x35c
    ecfa:	f36f 6318 	bfc	r3, #24, #1
    ecfe:	f8c2 335c 	str.w	r3, [r2, #860]	; 0x35c
    ed02:	2100      	movs	r1, #0
    ed04:	200c      	movs	r0, #12
    ed06:	f7fe fd37 	bl	d778 <am_hal_cachectrl_control>
    ed0a:	4b3f      	ldr	r3, [pc, #252]	; (ee08 <am_hal_pwrctrl_low_power_init+0x1b4>)
    ed0c:	699b      	ldr	r3, [r3, #24]
    ed0e:	f3c3 2500 	ubfx	r5, r3, #8, #1
    ed12:	05db      	lsls	r3, r3, #23
    ed14:	d420      	bmi.n	ed58 <am_hal_pwrctrl_low_power_init+0x104>
    ed16:	4c3b      	ldr	r4, [pc, #236]	; (ee04 <am_hal_pwrctrl_low_power_init+0x1b0>)
    ed18:	68e3      	ldr	r3, [r4, #12]
    ed1a:	b2db      	uxtb	r3, r3
    ed1c:	2b11      	cmp	r3, #17
    ed1e:	d84e      	bhi.n	edbe <am_hal_pwrctrl_low_power_init+0x16a>
    ed20:	4c38      	ldr	r4, [pc, #224]	; (ee04 <am_hal_pwrctrl_low_power_init+0x1b0>)
    ed22:	493a      	ldr	r1, [pc, #232]	; (ee0c <am_hal_pwrctrl_low_power_init+0x1b8>)
    ed24:	7e22      	ldrb	r2, [r4, #24]
    ed26:	2001      	movs	r0, #1
    ed28:	4302      	orrs	r2, r0
    ed2a:	2307      	movs	r3, #7
    ed2c:	7622      	strb	r2, [r4, #24]
    ed2e:	9000      	str	r0, [sp, #0]
    ed30:	461a      	mov	r2, r3
    ed32:	f242 7010 	movw	r0, #10000	; 0x2710
    ed36:	f7fe ff63 	bl	dc00 <am_hal_flash_delay_status_check>
    ed3a:	2800      	cmp	r0, #0
    ed3c:	d15a      	bne.n	edf4 <am_hal_pwrctrl_low_power_init+0x1a0>
    ed3e:	4b32      	ldr	r3, [pc, #200]	; (ee08 <am_hal_pwrctrl_low_power_init+0x1b4>)
    ed40:	681a      	ldr	r2, [r3, #0]
    ed42:	f042 0201 	orr.w	r2, r2, #1
    ed46:	601a      	str	r2, [r3, #0]
    ed48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    ed4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    ed4e:	625a      	str	r2, [r3, #36]	; 0x24
    ed50:	68e3      	ldr	r3, [r4, #12]
    ed52:	b2db      	uxtb	r3, r3
    ed54:	2b11      	cmp	r3, #17
    ed56:	d002      	beq.n	ed5e <am_hal_pwrctrl_low_power_init+0x10a>
    ed58:	2000      	movs	r0, #0
    ed5a:	b005      	add	sp, #20
    ed5c:	bd30      	pop	{r4, r5, pc}
    ed5e:	f8d4 335c 	ldr.w	r3, [r4, #860]	; 0x35c
    ed62:	f360 5356 	bfi	r3, r0, #21, #2
    ed66:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
    ed6a:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    ed6e:	220f      	movs	r2, #15
    ed70:	f362 138b 	bfi	r3, r2, #6, #6
    ed74:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    ed78:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    ed7c:	f362 0305 	bfi	r3, r2, #0, #6
    ed80:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    ed84:	b005      	add	sp, #20
    ed86:	bd30      	pop	{r4, r5, pc}
    ed88:	f7ff f9c0 	bl	e10c <am_hal_interrupt_master_disable>
    ed8c:	9002      	str	r0, [sp, #8]
    ed8e:	68a3      	ldr	r3, [r4, #8]
    ed90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    ed94:	60a3      	str	r3, [r4, #8]
    ed96:	9802      	ldr	r0, [sp, #8]
    ed98:	f7ff f9bc 	bl	e114 <am_hal_interrupt_master_set>
    ed9c:	20a0      	movs	r0, #160	; 0xa0
    ed9e:	f7fe ff1f 	bl	dbe0 <am_hal_flash_delay>
    eda2:	69a3      	ldr	r3, [r4, #24]
    eda4:	0619      	lsls	r1, r3, #24
    eda6:	d403      	bmi.n	edb0 <am_hal_pwrctrl_low_power_init+0x15c>
    eda8:	20a0      	movs	r0, #160	; 0xa0
    edaa:	f7fe ff19 	bl	dbe0 <am_hal_flash_delay>
    edae:	69a3      	ldr	r3, [r4, #24]
    edb0:	4b15      	ldr	r3, [pc, #84]	; (ee08 <am_hal_pwrctrl_low_power_init+0x1b4>)
    edb2:	699b      	ldr	r3, [r3, #24]
    edb4:	061a      	lsls	r2, r3, #24
    edb6:	f53f af5f 	bmi.w	ec78 <am_hal_pwrctrl_low_power_init+0x24>
    edba:	2001      	movs	r0, #1
    edbc:	e7cd      	b.n	ed5a <am_hal_pwrctrl_low_power_init+0x106>
    edbe:	f7ff f9a5 	bl	e10c <am_hal_interrupt_master_disable>
    edc2:	9003      	str	r0, [sp, #12]
    edc4:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    edc8:	2219      	movs	r2, #25
    edca:	f362 138b 	bfi	r3, r2, #6, #6
    edce:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    edd2:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
    edd6:	210c      	movs	r1, #12
    edd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    eddc:	f361 0205 	bfi	r2, r1, #0, #6
    ede0:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
    ede4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    ede6:	f365 5296 	bfi	r2, r5, #22, #1
    edea:	63da      	str	r2, [r3, #60]	; 0x3c
    edec:	9803      	ldr	r0, [sp, #12]
    edee:	f7ff f991 	bl	e114 <am_hal_interrupt_master_set>
    edf2:	e795      	b.n	ed20 <am_hal_pwrctrl_low_power_init+0xcc>
    edf4:	2004      	movs	r0, #4
    edf6:	b005      	add	sp, #20
    edf8:	bd30      	pop	{r4, r5, pc}
    edfa:	bf00      	nop
    edfc:	10004ae0 	.word	0x10004ae0
    ee00:	4ffff000 	.word	0x4ffff000
    ee04:	40020000 	.word	0x40020000
    ee08:	40021000 	.word	0x40021000
    ee0c:	40020018 	.word	0x40020018

0000ee10 <am_hal_rtc_osc_disable>:
    ee10:	4a03      	ldr	r2, [pc, #12]	; (ee20 <am_hal_rtc_osc_disable+0x10>)
    ee12:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    ee16:	f043 0310 	orr.w	r3, r3, #16
    ee1a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    ee1e:	4770      	bx	lr
    ee20:	40004200 	.word	0x40004200

0000ee24 <am_hal_sysctrl_sleep>:
    ee24:	b510      	push	{r4, lr}
    ee26:	b082      	sub	sp, #8
    ee28:	4604      	mov	r4, r0
    ee2a:	f7ff f96f 	bl	e10c <am_hal_interrupt_master_disable>
    ee2e:	9001      	str	r0, [sp, #4]
    ee30:	b124      	cbz	r4, ee3c <am_hal_sysctrl_sleep+0x18>
    ee32:	4b12      	ldr	r3, [pc, #72]	; (ee7c <am_hal_sysctrl_sleep+0x58>)
    ee34:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    ee38:	07db      	lsls	r3, r3, #31
    ee3a:	d513      	bpl.n	ee64 <am_hal_sysctrl_sleep+0x40>
    ee3c:	4a10      	ldr	r2, [pc, #64]	; (ee80 <am_hal_sysctrl_sleep+0x5c>)
    ee3e:	6913      	ldr	r3, [r2, #16]
    ee40:	f023 0304 	bic.w	r3, r3, #4
    ee44:	6113      	str	r3, [r2, #16]
    ee46:	f3bf 8f4f 	dsb	sy
    ee4a:	4a0e      	ldr	r2, [pc, #56]	; (ee84 <am_hal_sysctrl_sleep+0x60>)
    ee4c:	4b0e      	ldr	r3, [pc, #56]	; (ee88 <am_hal_sysctrl_sleep+0x64>)
    ee4e:	6812      	ldr	r2, [r2, #0]
    ee50:	601a      	str	r2, [r3, #0]
    ee52:	bf30      	wfi
    ee54:	f3bf 8f6f 	isb	sy
    ee58:	9801      	ldr	r0, [sp, #4]
    ee5a:	b002      	add	sp, #8
    ee5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee60:	f7ff b958 	b.w	e114 <am_hal_interrupt_master_set>
    ee64:	4b09      	ldr	r3, [pc, #36]	; (ee8c <am_hal_sysctrl_sleep+0x68>)
    ee66:	681a      	ldr	r2, [r3, #0]
    ee68:	b912      	cbnz	r2, ee70 <am_hal_sysctrl_sleep+0x4c>
    ee6a:	4a09      	ldr	r2, [pc, #36]	; (ee90 <am_hal_sysctrl_sleep+0x6c>)
    ee6c:	6812      	ldr	r2, [r2, #0]
    ee6e:	601a      	str	r2, [r3, #0]
    ee70:	4a03      	ldr	r2, [pc, #12]	; (ee80 <am_hal_sysctrl_sleep+0x5c>)
    ee72:	6913      	ldr	r3, [r2, #16]
    ee74:	f043 0304 	orr.w	r3, r3, #4
    ee78:	6113      	str	r3, [r2, #16]
    ee7a:	e7e4      	b.n	ee46 <am_hal_sysctrl_sleep+0x22>
    ee7c:	40020000 	.word	0x40020000
    ee80:	e000ed00 	.word	0xe000ed00
    ee84:	5fff0000 	.word	0x5fff0000
    ee88:	10004ae4 	.word	0x10004ae4
    ee8c:	10004ae0 	.word	0x10004ae0
    ee90:	4ffff000 	.word	0x4ffff000

0000ee94 <am_hal_tpiu_enable>:
    ee94:	b510      	push	{r4, lr}
    ee96:	4b23      	ldr	r3, [pc, #140]	; (ef24 <am_hal_tpiu_enable+0x90>)
    ee98:	6804      	ldr	r4, [r0, #0]
    ee9a:	2200      	movs	r2, #0
    ee9c:	b084      	sub	sp, #16
    ee9e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    eea2:	b334      	cbz	r4, eef2 <am_hal_tpiu_enable+0x5e>
    eea4:	4a20      	ldr	r2, [pc, #128]	; (ef28 <am_hal_tpiu_enable+0x94>)
    eea6:	4921      	ldr	r1, [pc, #132]	; (ef2c <am_hal_tpiu_enable+0x98>)
    eea8:	2001      	movs	r0, #1
    eeaa:	6058      	str	r0, [r3, #4]
    eeac:	f5a4 4361 	sub.w	r3, r4, #57600	; 0xe100
    eeb0:	a801      	add	r0, sp, #4
    eeb2:	428b      	cmp	r3, r1
    eeb4:	bf88      	it	hi
    eeb6:	4614      	movhi	r4, r2
    eeb8:	f7fe fe74 	bl	dba4 <am_hal_clkgen_status_get>
    eebc:	9b01      	ldr	r3, [sp, #4]
    eebe:	1c5a      	adds	r2, r3, #1
    eec0:	d02d      	beq.n	ef1e <am_hal_tpiu_enable+0x8a>
    eec2:	08db      	lsrs	r3, r3, #3
    eec4:	fbb3 f4f4 	udiv	r4, r3, r4
    eec8:	3c01      	subs	r4, #1
    eeca:	b2a4      	uxth	r4, r4
    eecc:	4b15      	ldr	r3, [pc, #84]	; (ef24 <am_hal_tpiu_enable+0x90>)
    eece:	4a18      	ldr	r2, [pc, #96]	; (ef30 <am_hal_tpiu_enable+0x9c>)
    eed0:	611c      	str	r4, [r3, #16]
    eed2:	2102      	movs	r1, #2
    eed4:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
    eed8:	2000      	movs	r0, #0
    eeda:	f240 2101 	movw	r1, #513	; 0x201
    eede:	f8c3 0f00 	str.w	r0, [r3, #3840]	; 0xf00
    eee2:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
    eee6:	f44f 7048 	mov.w	r0, #800	; 0x320
    eeea:	f7fe fe79 	bl	dbe0 <am_hal_flash_delay>
    eeee:	b004      	add	sp, #16
    eef0:	bd10      	pop	{r4, pc}
    eef2:	6902      	ldr	r2, [r0, #16]
    eef4:	611a      	str	r2, [r3, #16]
    eef6:	6882      	ldr	r2, [r0, #8]
    eef8:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    eefc:	68c1      	ldr	r1, [r0, #12]
    eefe:	2201      	movs	r2, #1
    ef00:	3901      	subs	r1, #1
    ef02:	408a      	lsls	r2, r1
    ef04:	605a      	str	r2, [r3, #4]
    ef06:	f8c3 4f00 	str.w	r4, [r3, #3840]	; 0xf00
    ef0a:	4a09      	ldr	r2, [pc, #36]	; (ef30 <am_hal_tpiu_enable+0x9c>)
    ef0c:	6843      	ldr	r3, [r0, #4]
    ef0e:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    ef12:	f44f 7048 	mov.w	r0, #800	; 0x320
    ef16:	f7fe fe63 	bl	dbe0 <am_hal_flash_delay>
    ef1a:	b004      	add	sp, #16
    ef1c:	bd10      	pop	{r4, pc}
    ef1e:	2405      	movs	r4, #5
    ef20:	e7d4      	b.n	eecc <am_hal_tpiu_enable+0x38>
    ef22:	bf00      	nop
    ef24:	e0040000 	.word	0xe0040000
    ef28:	000f4240 	.word	0x000f4240
    ef2c:	001da380 	.word	0x001da380
    ef30:	40020000 	.word	0x40020000

0000ef34 <am_hal_cmdq_init>:
    ef34:	2807      	cmp	r0, #7
    ef36:	d849      	bhi.n	efcc <am_hal_cmdq_init+0x98>
    ef38:	2900      	cmp	r1, #0
    ef3a:	d04b      	beq.n	efd4 <am_hal_cmdq_init+0xa0>
    ef3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ef3e:	684e      	ldr	r6, [r1, #4]
    ef40:	2e00      	cmp	r6, #0
    ef42:	d041      	beq.n	efc8 <am_hal_cmdq_init+0x94>
    ef44:	2a00      	cmp	r2, #0
    ef46:	d03f      	beq.n	efc8 <am_hal_cmdq_init+0x94>
    ef48:	680c      	ldr	r4, [r1, #0]
    ef4a:	2c01      	cmp	r4, #1
    ef4c:	d93c      	bls.n	efc8 <am_hal_cmdq_init+0x94>
    ef4e:	4f22      	ldr	r7, [pc, #136]	; (efd8 <am_hal_cmdq_init+0xa4>)
    ef50:	f04f 0e2c 	mov.w	lr, #44	; 0x2c
    ef54:	fb0e fe00 	mul.w	lr, lr, r0
    ef58:	eb07 030e 	add.w	r3, r7, lr
    ef5c:	78dd      	ldrb	r5, [r3, #3]
    ef5e:	f015 0501 	ands.w	r5, r5, #1
    ef62:	d135      	bne.n	efd0 <am_hal_cmdq_init+0x9c>
    ef64:	00e4      	lsls	r4, r4, #3
    ef66:	619c      	str	r4, [r3, #24]
    ef68:	4434      	add	r4, r6
    ef6a:	e9c3 6401 	strd	r6, r4, [r3, #4]
    ef6e:	e9c3 6604 	strd	r6, r6, [r3, #16]
    ef72:	60de      	str	r6, [r3, #12]
    ef74:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
    ef78:	4818      	ldr	r0, [pc, #96]	; (efdc <am_hal_cmdq_init+0xa8>)
    ef7a:	f857 400e 	ldr.w	r4, [r7, lr]
    ef7e:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
    ef82:	f8df c05c 	ldr.w	ip, [pc, #92]	; efe0 <am_hal_cmdq_init+0xac>
    ef86:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
    ef8a:	ea44 040c 	orr.w	r4, r4, ip
    ef8e:	f847 400e 	str.w	r4, [r7, lr]
    ef92:	6258      	str	r0, [r3, #36]	; 0x24
    ef94:	6880      	ldr	r0, [r0, #8]
    ef96:	e9c3 5507 	strd	r5, r5, [r3, #28]
    ef9a:	6005      	str	r5, [r0, #0]
    ef9c:	6a58      	ldr	r0, [r3, #36]	; 0x24
    ef9e:	68c0      	ldr	r0, [r0, #12]
    efa0:	6005      	str	r5, [r0, #0]
    efa2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    efa4:	4628      	mov	r0, r5
    efa6:	e9d4 5704 	ldrd	r5, r7, [r4, #16]
    efaa:	682c      	ldr	r4, [r5, #0]
    efac:	433c      	orrs	r4, r7
    efae:	602c      	str	r4, [r5, #0]
    efb0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    efb2:	6864      	ldr	r4, [r4, #4]
    efb4:	6026      	str	r6, [r4, #0]
    efb6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    efb8:	7a09      	ldrb	r1, [r1, #8]
    efba:	6824      	ldr	r4, [r4, #0]
    efbc:	0049      	lsls	r1, r1, #1
    efbe:	f001 0102 	and.w	r1, r1, #2
    efc2:	6021      	str	r1, [r4, #0]
    efc4:	6013      	str	r3, [r2, #0]
    efc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    efc8:	2006      	movs	r0, #6
    efca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    efcc:	2005      	movs	r0, #5
    efce:	4770      	bx	lr
    efd0:	2007      	movs	r0, #7
    efd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    efd4:	2006      	movs	r0, #6
    efd6:	4770      	bx	lr
    efd8:	10004ae8 	.word	0x10004ae8
    efdc:	0000f3ac 	.word	0x0000f3ac
    efe0:	01cdcdcd 	.word	0x01cdcdcd

0000efe4 <am_hal_cmdq_enable>:
    efe4:	4603      	mov	r3, r0
    efe6:	b1a0      	cbz	r0, f012 <am_hal_cmdq_enable+0x2e>
    efe8:	6802      	ldr	r2, [r0, #0]
    efea:	490c      	ldr	r1, [pc, #48]	; (f01c <am_hal_cmdq_enable+0x38>)
    efec:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    eff0:	428a      	cmp	r2, r1
    eff2:	d10e      	bne.n	f012 <am_hal_cmdq_enable+0x2e>
    eff4:	78c0      	ldrb	r0, [r0, #3]
    eff6:	f010 0002 	ands.w	r0, r0, #2
    effa:	d10c      	bne.n	f016 <am_hal_cmdq_enable+0x32>
    effc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    effe:	6811      	ldr	r1, [r2, #0]
    f000:	680a      	ldr	r2, [r1, #0]
    f002:	f042 0201 	orr.w	r2, r2, #1
    f006:	600a      	str	r2, [r1, #0]
    f008:	78da      	ldrb	r2, [r3, #3]
    f00a:	f042 0202 	orr.w	r2, r2, #2
    f00e:	70da      	strb	r2, [r3, #3]
    f010:	4770      	bx	lr
    f012:	2002      	movs	r0, #2
    f014:	4770      	bx	lr
    f016:	2000      	movs	r0, #0
    f018:	4770      	bx	lr
    f01a:	bf00      	nop
    f01c:	01cdcdcd 	.word	0x01cdcdcd
    f020:	6c696146 	.word	0x6c696146
    f024:	74206465 	.word	0x74206465
    f028:	6f63206f 	.word	0x6f63206f
    f02c:	7261706d 	.word	0x7261706d
    f030:	75622065 	.word	0x75622065
    f034:	72656666 	.word	0x72656666
    f038:	74612073 	.word	0x74612073
    f03c:	646e6920 	.word	0x646e6920
    f040:	25207865 	.word	0x25207865
    f044:	000a2064 	.word	0x000a2064
    f048:	0000002e 	.word	0x0000002e
    f04c:	20534f49 	.word	0x20534f49
    f050:	74736554 	.word	0x74736554
    f054:	736f4820 	.word	0x736f4820
    f058:	57203a74 	.word	0x57203a74
    f05c:	69746961 	.word	0x69746961
    f060:	6620676e 	.word	0x6620676e
    f064:	6120726f 	.word	0x6120726f
    f068:	656c2074 	.word	0x656c2074
    f06c:	20747361 	.word	0x20747361
    f070:	62206425 	.word	0x62206425
    f074:	73657479 	.word	0x73657479
    f078:	6f726620 	.word	0x6f726620
    f07c:	6874206d 	.word	0x6874206d
    f080:	6c732065 	.word	0x6c732065
    f084:	2e657661 	.word	0x2e657661
    f088:	00000000 	.word	0x00000000
    f08c:	7461440a 	.word	0x7461440a
    f090:	65562061 	.word	0x65562061
    f094:	69666972 	.word	0x69666972
    f098:	69746163 	.word	0x69746163
    f09c:	66206e6f 	.word	0x66206e6f
    f0a0:	656c6961 	.word	0x656c6961
    f0a4:	63412064 	.word	0x63412064
    f0a8:	3a6d7563 	.word	0x3a6d7563
    f0ac:	20756c25 	.word	0x20756c25
    f0b0:	253d7872 	.word	0x253d7872
    f0b4:	00000a64 	.word	0x00000a64
    f0b8:	7365540a 	.word	0x7365540a
    f0bc:	6f442074 	.word	0x6f442074
    f0c0:	2d20656e 	.word	0x2d20656e
    f0c4:	746f5420 	.word	0x746f5420
    f0c8:	52206c61 	.word	0x52206c61
    f0cc:	69656365 	.word	0x69656365
    f0d0:	20646576 	.word	0x20646576
    f0d4:	253d203d 	.word	0x253d203d
    f0d8:	00000a64 	.word	0x00000a64
    f0dc:	0a0a0a0a 	.word	0x0a0a0a0a
    f0e0:	0a0a0a0a 	.word	0x0a0a0a0a
    f0e4:	0a0a0a0a 	.word	0x0a0a0a0a
    f0e8:	0a0a0a0a 	.word	0x0a0a0a0a
    f0ec:	00000a0a 	.word	0x00000a0a

0000f0f0 <g_AM_BSP_GPIO_HANDSHAKE>:
    f0f0:	00001003                                ....

0000f0f4 <g_AM_BSP_GPIO_IOM0_CS>:
    f0f4:	00000701                                ....

0000f0f8 <g_AM_BSP_GPIO_IOM0_MISO>:
    f0f8:	00000001                                ....

0000f0fc <g_AM_BSP_GPIO_IOM0_MOSI>:
    f0fc:	00000301                                ....

0000f100 <g_AM_BSP_GPIO_IOM0_SCK>:
    f100:	00000301                                ....

0000f104 <g_AM_BSP_GPIO_IOM0_SCL>:
    f104:	00000b40                                @...

0000f108 <g_AM_BSP_GPIO_IOM0_SDA>:
    f108:	00000b40                                @...

0000f10c <g_AM_BSP_GPIO_IOM1_CS>:
    f10c:	00110701                                ....

0000f110 <g_AM_BSP_GPIO_IOM1_MISO>:
    f110:	00010001                                ....

0000f114 <g_AM_BSP_GPIO_IOM1_MOSI>:
    f114:	00010301                                ....

0000f118 <g_AM_BSP_GPIO_IOM1_SCK>:
    f118:	00010301                                ....

0000f11c <g_AM_BSP_GPIO_IOM1_SCL>:
    f11c:	00010b40                                @...

0000f120 <g_AM_BSP_GPIO_IOM1_SDA>:
    f120:	00010b40                                @...

0000f124 <g_AM_BSP_GPIO_IOM2_CS>:
    f124:	001a0701                                ....

0000f128 <g_AM_BSP_GPIO_IOM2_MISO>:
    f128:	00020005                                ....

0000f12c <g_AM_BSP_GPIO_IOM2_MOSI>:
    f12c:	00020305                                ....

0000f130 <g_AM_BSP_GPIO_IOM2_SCK>:
    f130:	00020305                                ....

0000f134 <g_AM_BSP_GPIO_IOM2_SCL>:
    f134:	00020b44                                D...

0000f138 <g_AM_BSP_GPIO_IOM2_SDA>:
    f138:	00020b44                                D...

0000f13c <g_AM_BSP_GPIO_IOM3_CS>:
    f13c:	00030701                                ....

0000f140 <g_AM_BSP_GPIO_IOM3_MISO>:
    f140:	00030005                                ....

0000f144 <g_AM_BSP_GPIO_IOM3_MOSI>:
    f144:	00030305                                ....

0000f148 <g_AM_BSP_GPIO_IOM3_SCK>:
    f148:	00030305                                ....

0000f14c <g_AM_BSP_GPIO_IOM3_SCL>:
    f14c:	00030b44                                D...

0000f150 <g_AM_BSP_GPIO_IOM3_SDA>:
    f150:	00030b44                                D...

0000f154 <g_AM_BSP_GPIO_IOM4_CS>:
    f154:	000c0701                                ....

0000f158 <g_AM_BSP_GPIO_IOM4_MISO>:
    f158:	00040005                                ....

0000f15c <g_AM_BSP_GPIO_IOM4_MOSI>:
    f15c:	00040305                                ....

0000f160 <g_AM_BSP_GPIO_IOM4_SCK>:
    f160:	00040305                                ....

0000f164 <g_AM_BSP_GPIO_IOM4_SCL>:
    f164:	00040b44                                D...

0000f168 <g_AM_BSP_GPIO_IOM4_SDA>:
    f168:	00040b44                                D...

0000f16c <g_AM_BSP_GPIO_IOM5_CS>:
    f16c:	00050701                                ....

0000f170 <g_AM_BSP_GPIO_IOM5_MISO>:
    f170:	00050005                                ....

0000f174 <g_AM_BSP_GPIO_IOM5_MOSI>:
    f174:	00050305                                ....

0000f178 <g_AM_BSP_GPIO_IOM5_SCK>:
    f178:	00050305                                ....

0000f17c <g_AM_BSP_GPIO_IOM5_SCL>:
    f17c:	00050b44                                D...

0000f180 <g_AM_BSP_GPIO_IOM5_SDA>:
    f180:	00050b44                                D...

0000f184 <g_AM_BSP_GPIO_ITM_SWO>:
    f184:	00000002                                ....

0000f188 <am_hal_cachectrl_defaults>:
    f188:	00000308                                ....

0000f18c <g_AM_HAL_GPIO_DISABLE>:
    f18c:	00000003                                ....

0000f190 <g_AM_HAL_GPIO_OUTPUT>:
    f190:	00000403                                ....

0000f194 <g_ui8Bit76Capabilities>:
    f194:	02800101 80010180 80800101 80808080     ................
    f1a4:	80808080 80808008 01800180 80808080     ................
    f1b4:	80808080 01800402 01010401 80808080     ................
    f1c4:	00000101                                ....

0000f1c8 <g_ui8Inpen>:
    f1c8:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
    f1d8:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
    f1e8:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
    f1f8:	00003130                                01..

0000f1fc <g_ui8NCEtable>:
    f1fc:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    f20c:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    f21c:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    f22c:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    f23c:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    f24c:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    f25c:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    f26c:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    f27c:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    f28c:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    f29c:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    f2ac:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    f2bc:	32221202 43231303                       .."2..#C

0000f2c4 <g_ui8nCEpins>:
    f2c4:	02070707 00080802 01020202 01010101     ................
    f2d4:	01010101 01010101 01010101 01010101     ................
    f2e4:	01010101 08010101 01010008 01010101     ................
    f2f4:	00000101                                ....

0000f2f8 <am_hal_pwrctrl_peripheral_control>:
	...
    f304:	00000001 00000004 00000004 00000002     ................
    f314:	00000008 00000008 00000004 00000008     ................
    f324:	00000008 00000008 00000008 00000008     ................
    f334:	00000010 00000010 00000010 00000020     ............ ...
    f344:	00000010 00000010 00000040 00000010     ........@.......
    f354:	00000010 00000080 00000004 00000004     ................
    f364:	00000100 00000004 00000004 00000200     ................
    f374:	00000020 00000020 00000400 00000004      ... ...........
    f384:	00000004 00000800 00000040 00000040     ........@...@...
    f394:	00001000 00000080 00000080 00002000     ............. ..
    f3a4:	00000100 00000100                       ........

0000f3ac <gAmHalCmdQReg>:
    f3ac:	50004294 50004298 500042ac 500042b0     .B.P.B.P.B.P.B.P
    f3bc:	500042a8 00008000 5000429c 00000001     .B.P.....B.P....
    f3cc:	00000004 00000002 50005294 50005298     .........R.P.R.P
    f3dc:	500052ac 500052b0 500052a8 00008000     .R.P.R.P.R.P....
    f3ec:	5000529c 00000001 00000004 00000002     .R.P............
    f3fc:	50006294 50006298 500062ac 500062b0     .b.P.b.P.b.P.b.P
    f40c:	500062a8 00008000 5000629c 00000001     .b.P.....b.P....
    f41c:	00000004 00000002 50007294 50007298     .........r.P.r.P
    f42c:	500072ac 500072b0 500072a8 00008000     .r.P.r.P.r.P....
    f43c:	5000729c 00000001 00000004 00000002     .r.P............
    f44c:	50008294 50008298 500082ac 500082b0     ...P...P...P...P
    f45c:	500082a8 00008000 5000829c 00000001     ...P.......P....
    f46c:	00000004 00000002 50009294 50009298     ...........P...P
    f47c:	500092ac 500092b0 500092a8 00008000     ...P...P...P....
    f48c:	5000929c 00000001 00000004 00000002     ...P............
    f49c:	500142a0 500142a8 500142c0 500142c4     .B.P.B.P.B.P.B.P
    f4ac:	500142b8 00004000 500142ac 00000001     .B.P.@...B.P....
    f4bc:	00000004 00000008 5000c248 5000c24c     ........H..PL..P
    f4cc:	5000c260 5000c264 5000c25c 00008000     `..Pd..P\..P....
    f4dc:	5000c250 00000001 00000004 00000002     P..P............
