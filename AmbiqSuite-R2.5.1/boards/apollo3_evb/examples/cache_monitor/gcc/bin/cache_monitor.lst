
bin/cache_monitor.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 b5 e4 00 00 a9 e4 00 00 b9 d1 00 00     ................
    c010:	ad e4 00 00 ad e4 00 00 ad e4 00 00 00 00 00 00     ................
	...
    c02c:	b1 e4 00 00 b1 e4 00 00 00 00 00 00 b1 e4 00 00     ................
    c03c:	b1 e4 00 00 b1 e4 00 00 b1 e4 00 00 b1 e4 00 00     ................
    c04c:	b1 e4 00 00 b1 e4 00 00 b1 e4 00 00 b1 e4 00 00     ................
    c05c:	b1 e4 00 00 b1 e4 00 00 b1 e4 00 00 b1 e4 00 00     ................
    c06c:	b1 e4 00 00 b1 e4 00 00 b1 e4 00 00 09 cc 00 00     ................
    c07c:	b1 e4 00 00 b1 e4 00 00 b1 e4 00 00 b1 e4 00 00     ................
    c08c:	b1 e4 00 00 b1 e4 00 00 b1 e4 00 00 b1 e4 00 00     ................
    c09c:	b1 e4 00 00 b1 e4 00 00 b1 e4 00 00 b1 e4 00 00     ................
    c0ac:	b1 e4 00 00 b1 e4 00 00 b1 e4 00 00 b1 e4 00 00     ................
    c0bc:	b1 e4 00 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <__aeabi_drsub>:
    c100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c104:	e002      	b.n	c10c <__adddf3>
    c106:	bf00      	nop

0000c108 <__aeabi_dsub>:
    c108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c10c <__adddf3>:
    c10c:	b530      	push	{r4, r5, lr}
    c10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c112:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c116:	ea94 0f05 	teq	r4, r5
    c11a:	bf08      	it	eq
    c11c:	ea90 0f02 	teqeq	r0, r2
    c120:	bf1f      	itttt	ne
    c122:	ea54 0c00 	orrsne.w	ip, r4, r0
    c126:	ea55 0c02 	orrsne.w	ip, r5, r2
    c12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c132:	f000 80e2 	beq.w	c2fa <__adddf3+0x1ee>
    c136:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c13e:	bfb8      	it	lt
    c140:	426d      	neglt	r5, r5
    c142:	dd0c      	ble.n	c15e <__adddf3+0x52>
    c144:	442c      	add	r4, r5
    c146:	ea80 0202 	eor.w	r2, r0, r2
    c14a:	ea81 0303 	eor.w	r3, r1, r3
    c14e:	ea82 0000 	eor.w	r0, r2, r0
    c152:	ea83 0101 	eor.w	r1, r3, r1
    c156:	ea80 0202 	eor.w	r2, r0, r2
    c15a:	ea81 0303 	eor.w	r3, r1, r3
    c15e:	2d36      	cmp	r5, #54	; 0x36
    c160:	bf88      	it	hi
    c162:	bd30      	pophi	{r4, r5, pc}
    c164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c168:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c174:	d002      	beq.n	c17c <__adddf3+0x70>
    c176:	4240      	negs	r0, r0
    c178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c180:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c188:	d002      	beq.n	c190 <__adddf3+0x84>
    c18a:	4252      	negs	r2, r2
    c18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c190:	ea94 0f05 	teq	r4, r5
    c194:	f000 80a7 	beq.w	c2e6 <__adddf3+0x1da>
    c198:	f1a4 0401 	sub.w	r4, r4, #1
    c19c:	f1d5 0e20 	rsbs	lr, r5, #32
    c1a0:	db0d      	blt.n	c1be <__adddf3+0xb2>
    c1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
    c1a6:	fa22 f205 	lsr.w	r2, r2, r5
    c1aa:	1880      	adds	r0, r0, r2
    c1ac:	f141 0100 	adc.w	r1, r1, #0
    c1b0:	fa03 f20e 	lsl.w	r2, r3, lr
    c1b4:	1880      	adds	r0, r0, r2
    c1b6:	fa43 f305 	asr.w	r3, r3, r5
    c1ba:	4159      	adcs	r1, r3
    c1bc:	e00e      	b.n	c1dc <__adddf3+0xd0>
    c1be:	f1a5 0520 	sub.w	r5, r5, #32
    c1c2:	f10e 0e20 	add.w	lr, lr, #32
    c1c6:	2a01      	cmp	r2, #1
    c1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
    c1cc:	bf28      	it	cs
    c1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
    c1d2:	fa43 f305 	asr.w	r3, r3, r5
    c1d6:	18c0      	adds	r0, r0, r3
    c1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c1e0:	d507      	bpl.n	c1f2 <__adddf3+0xe6>
    c1e2:	f04f 0e00 	mov.w	lr, #0
    c1e6:	f1dc 0c00 	rsbs	ip, ip, #0
    c1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
    c1ee:	eb6e 0101 	sbc.w	r1, lr, r1
    c1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c1f6:	d31b      	bcc.n	c230 <__adddf3+0x124>
    c1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c1fc:	d30c      	bcc.n	c218 <__adddf3+0x10c>
    c1fe:	0849      	lsrs	r1, r1, #1
    c200:	ea5f 0030 	movs.w	r0, r0, rrx
    c204:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c208:	f104 0401 	add.w	r4, r4, #1
    c20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c214:	f080 809a 	bcs.w	c34c <__adddf3+0x240>
    c218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c21c:	bf08      	it	eq
    c21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c222:	f150 0000 	adcs.w	r0, r0, #0
    c226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c22a:	ea41 0105 	orr.w	r1, r1, r5
    c22e:	bd30      	pop	{r4, r5, pc}
    c230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c234:	4140      	adcs	r0, r0
    c236:	eb41 0101 	adc.w	r1, r1, r1
    c23a:	3c01      	subs	r4, #1
    c23c:	bf28      	it	cs
    c23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    c242:	d2e9      	bcs.n	c218 <__adddf3+0x10c>
    c244:	f091 0f00 	teq	r1, #0
    c248:	bf04      	itt	eq
    c24a:	4601      	moveq	r1, r0
    c24c:	2000      	moveq	r0, #0
    c24e:	fab1 f381 	clz	r3, r1
    c252:	bf08      	it	eq
    c254:	3320      	addeq	r3, #32
    c256:	f1a3 030b 	sub.w	r3, r3, #11
    c25a:	f1b3 0220 	subs.w	r2, r3, #32
    c25e:	da0c      	bge.n	c27a <__adddf3+0x16e>
    c260:	320c      	adds	r2, #12
    c262:	dd08      	ble.n	c276 <__adddf3+0x16a>
    c264:	f102 0c14 	add.w	ip, r2, #20
    c268:	f1c2 020c 	rsb	r2, r2, #12
    c26c:	fa01 f00c 	lsl.w	r0, r1, ip
    c270:	fa21 f102 	lsr.w	r1, r1, r2
    c274:	e00c      	b.n	c290 <__adddf3+0x184>
    c276:	f102 0214 	add.w	r2, r2, #20
    c27a:	bfd8      	it	le
    c27c:	f1c2 0c20 	rsble	ip, r2, #32
    c280:	fa01 f102 	lsl.w	r1, r1, r2
    c284:	fa20 fc0c 	lsr.w	ip, r0, ip
    c288:	bfdc      	itt	le
    c28a:	ea41 010c 	orrle.w	r1, r1, ip
    c28e:	4090      	lslle	r0, r2
    c290:	1ae4      	subs	r4, r4, r3
    c292:	bfa2      	ittt	ge
    c294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c298:	4329      	orrge	r1, r5
    c29a:	bd30      	popge	{r4, r5, pc}
    c29c:	ea6f 0404 	mvn.w	r4, r4
    c2a0:	3c1f      	subs	r4, #31
    c2a2:	da1c      	bge.n	c2de <__adddf3+0x1d2>
    c2a4:	340c      	adds	r4, #12
    c2a6:	dc0e      	bgt.n	c2c6 <__adddf3+0x1ba>
    c2a8:	f104 0414 	add.w	r4, r4, #20
    c2ac:	f1c4 0220 	rsb	r2, r4, #32
    c2b0:	fa20 f004 	lsr.w	r0, r0, r4
    c2b4:	fa01 f302 	lsl.w	r3, r1, r2
    c2b8:	ea40 0003 	orr.w	r0, r0, r3
    c2bc:	fa21 f304 	lsr.w	r3, r1, r4
    c2c0:	ea45 0103 	orr.w	r1, r5, r3
    c2c4:	bd30      	pop	{r4, r5, pc}
    c2c6:	f1c4 040c 	rsb	r4, r4, #12
    c2ca:	f1c4 0220 	rsb	r2, r4, #32
    c2ce:	fa20 f002 	lsr.w	r0, r0, r2
    c2d2:	fa01 f304 	lsl.w	r3, r1, r4
    c2d6:	ea40 0003 	orr.w	r0, r0, r3
    c2da:	4629      	mov	r1, r5
    c2dc:	bd30      	pop	{r4, r5, pc}
    c2de:	fa21 f004 	lsr.w	r0, r1, r4
    c2e2:	4629      	mov	r1, r5
    c2e4:	bd30      	pop	{r4, r5, pc}
    c2e6:	f094 0f00 	teq	r4, #0
    c2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c2ee:	bf06      	itte	eq
    c2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c2f4:	3401      	addeq	r4, #1
    c2f6:	3d01      	subne	r5, #1
    c2f8:	e74e      	b.n	c198 <__adddf3+0x8c>
    c2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c2fe:	bf18      	it	ne
    c300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c304:	d029      	beq.n	c35a <__adddf3+0x24e>
    c306:	ea94 0f05 	teq	r4, r5
    c30a:	bf08      	it	eq
    c30c:	ea90 0f02 	teqeq	r0, r2
    c310:	d005      	beq.n	c31e <__adddf3+0x212>
    c312:	ea54 0c00 	orrs.w	ip, r4, r0
    c316:	bf04      	itt	eq
    c318:	4619      	moveq	r1, r3
    c31a:	4610      	moveq	r0, r2
    c31c:	bd30      	pop	{r4, r5, pc}
    c31e:	ea91 0f03 	teq	r1, r3
    c322:	bf1e      	ittt	ne
    c324:	2100      	movne	r1, #0
    c326:	2000      	movne	r0, #0
    c328:	bd30      	popne	{r4, r5, pc}
    c32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c32e:	d105      	bne.n	c33c <__adddf3+0x230>
    c330:	0040      	lsls	r0, r0, #1
    c332:	4149      	adcs	r1, r1
    c334:	bf28      	it	cs
    c336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c33a:	bd30      	pop	{r4, r5, pc}
    c33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c340:	bf3c      	itt	cc
    c342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c346:	bd30      	popcc	{r4, r5, pc}
    c348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c354:	f04f 0000 	mov.w	r0, #0
    c358:	bd30      	pop	{r4, r5, pc}
    c35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c35e:	bf1a      	itte	ne
    c360:	4619      	movne	r1, r3
    c362:	4610      	movne	r0, r2
    c364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c368:	bf1c      	itt	ne
    c36a:	460b      	movne	r3, r1
    c36c:	4602      	movne	r2, r0
    c36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c372:	bf06      	itte	eq
    c374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c378:	ea91 0f03 	teqeq	r1, r3
    c37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c380:	bd30      	pop	{r4, r5, pc}
    c382:	bf00      	nop

0000c384 <__aeabi_ui2d>:
    c384:	f090 0f00 	teq	r0, #0
    c388:	bf04      	itt	eq
    c38a:	2100      	moveq	r1, #0
    c38c:	4770      	bxeq	lr
    c38e:	b530      	push	{r4, r5, lr}
    c390:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c394:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c398:	f04f 0500 	mov.w	r5, #0
    c39c:	f04f 0100 	mov.w	r1, #0
    c3a0:	e750      	b.n	c244 <__adddf3+0x138>
    c3a2:	bf00      	nop

0000c3a4 <__aeabi_i2d>:
    c3a4:	f090 0f00 	teq	r0, #0
    c3a8:	bf04      	itt	eq
    c3aa:	2100      	moveq	r1, #0
    c3ac:	4770      	bxeq	lr
    c3ae:	b530      	push	{r4, r5, lr}
    c3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c3bc:	bf48      	it	mi
    c3be:	4240      	negmi	r0, r0
    c3c0:	f04f 0100 	mov.w	r1, #0
    c3c4:	e73e      	b.n	c244 <__adddf3+0x138>
    c3c6:	bf00      	nop

0000c3c8 <__aeabi_f2d>:
    c3c8:	0042      	lsls	r2, r0, #1
    c3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c3ce:	ea4f 0131 	mov.w	r1, r1, rrx
    c3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c3d6:	bf1f      	itttt	ne
    c3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c3e4:	4770      	bxne	lr
    c3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c3ea:	bf08      	it	eq
    c3ec:	4770      	bxeq	lr
    c3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c3f2:	bf04      	itt	eq
    c3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c3f8:	4770      	bxeq	lr
    c3fa:	b530      	push	{r4, r5, lr}
    c3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
    c400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c408:	e71c      	b.n	c244 <__adddf3+0x138>
    c40a:	bf00      	nop

0000c40c <__aeabi_ul2d>:
    c40c:	ea50 0201 	orrs.w	r2, r0, r1
    c410:	bf08      	it	eq
    c412:	4770      	bxeq	lr
    c414:	b530      	push	{r4, r5, lr}
    c416:	f04f 0500 	mov.w	r5, #0
    c41a:	e00a      	b.n	c432 <__aeabi_l2d+0x16>

0000c41c <__aeabi_l2d>:
    c41c:	ea50 0201 	orrs.w	r2, r0, r1
    c420:	bf08      	it	eq
    c422:	4770      	bxeq	lr
    c424:	b530      	push	{r4, r5, lr}
    c426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c42a:	d502      	bpl.n	c432 <__aeabi_l2d+0x16>
    c42c:	4240      	negs	r0, r0
    c42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c432:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c436:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c43e:	f43f aed8 	beq.w	c1f2 <__adddf3+0xe6>
    c442:	f04f 0203 	mov.w	r2, #3
    c446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c44a:	bf18      	it	ne
    c44c:	3203      	addne	r2, #3
    c44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c452:	bf18      	it	ne
    c454:	3203      	addne	r2, #3
    c456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c45a:	f1c2 0320 	rsb	r3, r2, #32
    c45e:	fa00 fc03 	lsl.w	ip, r0, r3
    c462:	fa20 f002 	lsr.w	r0, r0, r2
    c466:	fa01 fe03 	lsl.w	lr, r1, r3
    c46a:	ea40 000e 	orr.w	r0, r0, lr
    c46e:	fa21 f102 	lsr.w	r1, r1, r2
    c472:	4414      	add	r4, r2
    c474:	e6bd      	b.n	c1f2 <__adddf3+0xe6>
    c476:	bf00      	nop

0000c478 <__aeabi_dmul>:
    c478:	b570      	push	{r4, r5, r6, lr}
    c47a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c47e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c486:	bf1d      	ittte	ne
    c488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c48c:	ea94 0f0c 	teqne	r4, ip
    c490:	ea95 0f0c 	teqne	r5, ip
    c494:	f000 f8de 	bleq	c654 <__aeabi_dmul+0x1dc>
    c498:	442c      	add	r4, r5
    c49a:	ea81 0603 	eor.w	r6, r1, r3
    c49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    c4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    c4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    c4aa:	bf18      	it	ne
    c4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    c4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    c4b8:	d038      	beq.n	c52c <__aeabi_dmul+0xb4>
    c4ba:	fba0 ce02 	umull	ip, lr, r0, r2
    c4be:	f04f 0500 	mov.w	r5, #0
    c4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
    c4c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    c4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
    c4ce:	f04f 0600 	mov.w	r6, #0
    c4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
    c4d6:	f09c 0f00 	teq	ip, #0
    c4da:	bf18      	it	ne
    c4dc:	f04e 0e01 	orrne.w	lr, lr, #1
    c4e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    c4e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    c4e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    c4ec:	d204      	bcs.n	c4f8 <__aeabi_dmul+0x80>
    c4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    c4f2:	416d      	adcs	r5, r5
    c4f4:	eb46 0606 	adc.w	r6, r6, r6
    c4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    c4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    c500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    c504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    c508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    c50c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c510:	bf88      	it	hi
    c512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c516:	d81e      	bhi.n	c556 <__aeabi_dmul+0xde>
    c518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    c51c:	bf08      	it	eq
    c51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    c522:	f150 0000 	adcs.w	r0, r0, #0
    c526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c52a:	bd70      	pop	{r4, r5, r6, pc}
    c52c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    c530:	ea46 0101 	orr.w	r1, r6, r1
    c534:	ea40 0002 	orr.w	r0, r0, r2
    c538:	ea81 0103 	eor.w	r1, r1, r3
    c53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    c540:	bfc2      	ittt	gt
    c542:	ebd4 050c 	rsbsgt	r5, r4, ip
    c546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c54a:	bd70      	popgt	{r4, r5, r6, pc}
    c54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c550:	f04f 0e00 	mov.w	lr, #0
    c554:	3c01      	subs	r4, #1
    c556:	f300 80ab 	bgt.w	c6b0 <__aeabi_dmul+0x238>
    c55a:	f114 0f36 	cmn.w	r4, #54	; 0x36
    c55e:	bfde      	ittt	le
    c560:	2000      	movle	r0, #0
    c562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    c566:	bd70      	pople	{r4, r5, r6, pc}
    c568:	f1c4 0400 	rsb	r4, r4, #0
    c56c:	3c20      	subs	r4, #32
    c56e:	da35      	bge.n	c5dc <__aeabi_dmul+0x164>
    c570:	340c      	adds	r4, #12
    c572:	dc1b      	bgt.n	c5ac <__aeabi_dmul+0x134>
    c574:	f104 0414 	add.w	r4, r4, #20
    c578:	f1c4 0520 	rsb	r5, r4, #32
    c57c:	fa00 f305 	lsl.w	r3, r0, r5
    c580:	fa20 f004 	lsr.w	r0, r0, r4
    c584:	fa01 f205 	lsl.w	r2, r1, r5
    c588:	ea40 0002 	orr.w	r0, r0, r2
    c58c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    c590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c598:	fa21 f604 	lsr.w	r6, r1, r4
    c59c:	eb42 0106 	adc.w	r1, r2, r6
    c5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c5a4:	bf08      	it	eq
    c5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c5aa:	bd70      	pop	{r4, r5, r6, pc}
    c5ac:	f1c4 040c 	rsb	r4, r4, #12
    c5b0:	f1c4 0520 	rsb	r5, r4, #32
    c5b4:	fa00 f304 	lsl.w	r3, r0, r4
    c5b8:	fa20 f005 	lsr.w	r0, r0, r5
    c5bc:	fa01 f204 	lsl.w	r2, r1, r4
    c5c0:	ea40 0002 	orr.w	r0, r0, r2
    c5c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c5cc:	f141 0100 	adc.w	r1, r1, #0
    c5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c5d4:	bf08      	it	eq
    c5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c5da:	bd70      	pop	{r4, r5, r6, pc}
    c5dc:	f1c4 0520 	rsb	r5, r4, #32
    c5e0:	fa00 f205 	lsl.w	r2, r0, r5
    c5e4:	ea4e 0e02 	orr.w	lr, lr, r2
    c5e8:	fa20 f304 	lsr.w	r3, r0, r4
    c5ec:	fa01 f205 	lsl.w	r2, r1, r5
    c5f0:	ea43 0302 	orr.w	r3, r3, r2
    c5f4:	fa21 f004 	lsr.w	r0, r1, r4
    c5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c5fc:	fa21 f204 	lsr.w	r2, r1, r4
    c600:	ea20 0002 	bic.w	r0, r0, r2
    c604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    c608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c60c:	bf08      	it	eq
    c60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c612:	bd70      	pop	{r4, r5, r6, pc}
    c614:	f094 0f00 	teq	r4, #0
    c618:	d10f      	bne.n	c63a <__aeabi_dmul+0x1c2>
    c61a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    c61e:	0040      	lsls	r0, r0, #1
    c620:	eb41 0101 	adc.w	r1, r1, r1
    c624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c628:	bf08      	it	eq
    c62a:	3c01      	subeq	r4, #1
    c62c:	d0f7      	beq.n	c61e <__aeabi_dmul+0x1a6>
    c62e:	ea41 0106 	orr.w	r1, r1, r6
    c632:	f095 0f00 	teq	r5, #0
    c636:	bf18      	it	ne
    c638:	4770      	bxne	lr
    c63a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    c63e:	0052      	lsls	r2, r2, #1
    c640:	eb43 0303 	adc.w	r3, r3, r3
    c644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    c648:	bf08      	it	eq
    c64a:	3d01      	subeq	r5, #1
    c64c:	d0f7      	beq.n	c63e <__aeabi_dmul+0x1c6>
    c64e:	ea43 0306 	orr.w	r3, r3, r6
    c652:	4770      	bx	lr
    c654:	ea94 0f0c 	teq	r4, ip
    c658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c65c:	bf18      	it	ne
    c65e:	ea95 0f0c 	teqne	r5, ip
    c662:	d00c      	beq.n	c67e <__aeabi_dmul+0x206>
    c664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c668:	bf18      	it	ne
    c66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c66e:	d1d1      	bne.n	c614 <__aeabi_dmul+0x19c>
    c670:	ea81 0103 	eor.w	r1, r1, r3
    c674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c678:	f04f 0000 	mov.w	r0, #0
    c67c:	bd70      	pop	{r4, r5, r6, pc}
    c67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c682:	bf06      	itte	eq
    c684:	4610      	moveq	r0, r2
    c686:	4619      	moveq	r1, r3
    c688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c68c:	d019      	beq.n	c6c2 <__aeabi_dmul+0x24a>
    c68e:	ea94 0f0c 	teq	r4, ip
    c692:	d102      	bne.n	c69a <__aeabi_dmul+0x222>
    c694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    c698:	d113      	bne.n	c6c2 <__aeabi_dmul+0x24a>
    c69a:	ea95 0f0c 	teq	r5, ip
    c69e:	d105      	bne.n	c6ac <__aeabi_dmul+0x234>
    c6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    c6a4:	bf1c      	itt	ne
    c6a6:	4610      	movne	r0, r2
    c6a8:	4619      	movne	r1, r3
    c6aa:	d10a      	bne.n	c6c2 <__aeabi_dmul+0x24a>
    c6ac:	ea81 0103 	eor.w	r1, r1, r3
    c6b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c6b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c6bc:	f04f 0000 	mov.w	r0, #0
    c6c0:	bd70      	pop	{r4, r5, r6, pc}
    c6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c6c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    c6ca:	bd70      	pop	{r4, r5, r6, pc}

0000c6cc <__aeabi_ddiv>:
    c6cc:	b570      	push	{r4, r5, r6, lr}
    c6ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c6da:	bf1d      	ittte	ne
    c6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c6e0:	ea94 0f0c 	teqne	r4, ip
    c6e4:	ea95 0f0c 	teqne	r5, ip
    c6e8:	f000 f8a7 	bleq	c83a <__aeabi_ddiv+0x16e>
    c6ec:	eba4 0405 	sub.w	r4, r4, r5
    c6f0:	ea81 0e03 	eor.w	lr, r1, r3
    c6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    c6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c6fc:	f000 8088 	beq.w	c810 <__aeabi_ddiv+0x144>
    c700:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    c708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    c70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    c710:	ea4f 2202 	mov.w	r2, r2, lsl #8
    c714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    c718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    c71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
    c720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    c724:	429d      	cmp	r5, r3
    c726:	bf08      	it	eq
    c728:	4296      	cmpeq	r6, r2
    c72a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    c72e:	f504 7440 	add.w	r4, r4, #768	; 0x300
    c732:	d202      	bcs.n	c73a <__aeabi_ddiv+0x6e>
    c734:	085b      	lsrs	r3, r3, #1
    c736:	ea4f 0232 	mov.w	r2, r2, rrx
    c73a:	1ab6      	subs	r6, r6, r2
    c73c:	eb65 0503 	sbc.w	r5, r5, r3
    c740:	085b      	lsrs	r3, r3, #1
    c742:	ea4f 0232 	mov.w	r2, r2, rrx
    c746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    c74a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    c74e:	ebb6 0e02 	subs.w	lr, r6, r2
    c752:	eb75 0e03 	sbcs.w	lr, r5, r3
    c756:	bf22      	ittt	cs
    c758:	1ab6      	subcs	r6, r6, r2
    c75a:	4675      	movcs	r5, lr
    c75c:	ea40 000c 	orrcs.w	r0, r0, ip
    c760:	085b      	lsrs	r3, r3, #1
    c762:	ea4f 0232 	mov.w	r2, r2, rrx
    c766:	ebb6 0e02 	subs.w	lr, r6, r2
    c76a:	eb75 0e03 	sbcs.w	lr, r5, r3
    c76e:	bf22      	ittt	cs
    c770:	1ab6      	subcs	r6, r6, r2
    c772:	4675      	movcs	r5, lr
    c774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    c778:	085b      	lsrs	r3, r3, #1
    c77a:	ea4f 0232 	mov.w	r2, r2, rrx
    c77e:	ebb6 0e02 	subs.w	lr, r6, r2
    c782:	eb75 0e03 	sbcs.w	lr, r5, r3
    c786:	bf22      	ittt	cs
    c788:	1ab6      	subcs	r6, r6, r2
    c78a:	4675      	movcs	r5, lr
    c78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    c790:	085b      	lsrs	r3, r3, #1
    c792:	ea4f 0232 	mov.w	r2, r2, rrx
    c796:	ebb6 0e02 	subs.w	lr, r6, r2
    c79a:	eb75 0e03 	sbcs.w	lr, r5, r3
    c79e:	bf22      	ittt	cs
    c7a0:	1ab6      	subcs	r6, r6, r2
    c7a2:	4675      	movcs	r5, lr
    c7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    c7a8:	ea55 0e06 	orrs.w	lr, r5, r6
    c7ac:	d018      	beq.n	c7e0 <__aeabi_ddiv+0x114>
    c7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
    c7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    c7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
    c7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    c7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    c7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    c7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    c7ca:	d1c0      	bne.n	c74e <__aeabi_ddiv+0x82>
    c7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c7d0:	d10b      	bne.n	c7ea <__aeabi_ddiv+0x11e>
    c7d2:	ea41 0100 	orr.w	r1, r1, r0
    c7d6:	f04f 0000 	mov.w	r0, #0
    c7da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    c7de:	e7b6      	b.n	c74e <__aeabi_ddiv+0x82>
    c7e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c7e4:	bf04      	itt	eq
    c7e6:	4301      	orreq	r1, r0
    c7e8:	2000      	moveq	r0, #0
    c7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c7ee:	bf88      	it	hi
    c7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c7f4:	f63f aeaf 	bhi.w	c556 <__aeabi_dmul+0xde>
    c7f8:	ebb5 0c03 	subs.w	ip, r5, r3
    c7fc:	bf04      	itt	eq
    c7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
    c802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c806:	f150 0000 	adcs.w	r0, r0, #0
    c80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c80e:	bd70      	pop	{r4, r5, r6, pc}
    c810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    c814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    c818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    c81c:	bfc2      	ittt	gt
    c81e:	ebd4 050c 	rsbsgt	r5, r4, ip
    c822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c826:	bd70      	popgt	{r4, r5, r6, pc}
    c828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c82c:	f04f 0e00 	mov.w	lr, #0
    c830:	3c01      	subs	r4, #1
    c832:	e690      	b.n	c556 <__aeabi_dmul+0xde>
    c834:	ea45 0e06 	orr.w	lr, r5, r6
    c838:	e68d      	b.n	c556 <__aeabi_dmul+0xde>
    c83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c83e:	ea94 0f0c 	teq	r4, ip
    c842:	bf08      	it	eq
    c844:	ea95 0f0c 	teqeq	r5, ip
    c848:	f43f af3b 	beq.w	c6c2 <__aeabi_dmul+0x24a>
    c84c:	ea94 0f0c 	teq	r4, ip
    c850:	d10a      	bne.n	c868 <__aeabi_ddiv+0x19c>
    c852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c856:	f47f af34 	bne.w	c6c2 <__aeabi_dmul+0x24a>
    c85a:	ea95 0f0c 	teq	r5, ip
    c85e:	f47f af25 	bne.w	c6ac <__aeabi_dmul+0x234>
    c862:	4610      	mov	r0, r2
    c864:	4619      	mov	r1, r3
    c866:	e72c      	b.n	c6c2 <__aeabi_dmul+0x24a>
    c868:	ea95 0f0c 	teq	r5, ip
    c86c:	d106      	bne.n	c87c <__aeabi_ddiv+0x1b0>
    c86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    c872:	f43f aefd 	beq.w	c670 <__aeabi_dmul+0x1f8>
    c876:	4610      	mov	r0, r2
    c878:	4619      	mov	r1, r3
    c87a:	e722      	b.n	c6c2 <__aeabi_dmul+0x24a>
    c87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c880:	bf18      	it	ne
    c882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c886:	f47f aec5 	bne.w	c614 <__aeabi_dmul+0x19c>
    c88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    c88e:	f47f af0d 	bne.w	c6ac <__aeabi_dmul+0x234>
    c892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    c896:	f47f aeeb 	bne.w	c670 <__aeabi_dmul+0x1f8>
    c89a:	e712      	b.n	c6c2 <__aeabi_dmul+0x24a>

0000c89c <__aeabi_d2f>:
    c89c:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c8a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c8a4:	bf24      	itt	cs
    c8a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c8aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c8ae:	d90d      	bls.n	c8cc <__aeabi_d2f+0x30>
    c8b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c8b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c8b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c8bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c8c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c8c4:	bf08      	it	eq
    c8c6:	f020 0001 	biceq.w	r0, r0, #1
    c8ca:	4770      	bx	lr
    c8cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c8d0:	d121      	bne.n	c916 <__aeabi_d2f+0x7a>
    c8d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c8d6:	bfbc      	itt	lt
    c8d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c8dc:	4770      	bxlt	lr
    c8de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c8e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c8e6:	f1c2 0218 	rsb	r2, r2, #24
    c8ea:	f1c2 0c20 	rsb	ip, r2, #32
    c8ee:	fa10 f30c 	lsls.w	r3, r0, ip
    c8f2:	fa20 f002 	lsr.w	r0, r0, r2
    c8f6:	bf18      	it	ne
    c8f8:	f040 0001 	orrne.w	r0, r0, #1
    c8fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c900:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c904:	fa03 fc0c 	lsl.w	ip, r3, ip
    c908:	ea40 000c 	orr.w	r0, r0, ip
    c90c:	fa23 f302 	lsr.w	r3, r3, r2
    c910:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c914:	e7cc      	b.n	c8b0 <__aeabi_d2f+0x14>
    c916:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c91a:	d107      	bne.n	c92c <__aeabi_d2f+0x90>
    c91c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c920:	bf1e      	ittt	ne
    c922:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c926:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c92a:	4770      	bxne	lr
    c92c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c930:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c934:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c938:	4770      	bx	lr
    c93a:	bf00      	nop

0000c93c <memcpy>:
    c93c:	4684      	mov	ip, r0
    c93e:	ea41 0300 	orr.w	r3, r1, r0
    c942:	f013 0303 	ands.w	r3, r3, #3
    c946:	d16d      	bne.n	ca24 <memcpy+0xe8>
    c948:	3a40      	subs	r2, #64	; 0x40
    c94a:	d341      	bcc.n	c9d0 <memcpy+0x94>
    c94c:	f851 3b04 	ldr.w	r3, [r1], #4
    c950:	f840 3b04 	str.w	r3, [r0], #4
    c954:	f851 3b04 	ldr.w	r3, [r1], #4
    c958:	f840 3b04 	str.w	r3, [r0], #4
    c95c:	f851 3b04 	ldr.w	r3, [r1], #4
    c960:	f840 3b04 	str.w	r3, [r0], #4
    c964:	f851 3b04 	ldr.w	r3, [r1], #4
    c968:	f840 3b04 	str.w	r3, [r0], #4
    c96c:	f851 3b04 	ldr.w	r3, [r1], #4
    c970:	f840 3b04 	str.w	r3, [r0], #4
    c974:	f851 3b04 	ldr.w	r3, [r1], #4
    c978:	f840 3b04 	str.w	r3, [r0], #4
    c97c:	f851 3b04 	ldr.w	r3, [r1], #4
    c980:	f840 3b04 	str.w	r3, [r0], #4
    c984:	f851 3b04 	ldr.w	r3, [r1], #4
    c988:	f840 3b04 	str.w	r3, [r0], #4
    c98c:	f851 3b04 	ldr.w	r3, [r1], #4
    c990:	f840 3b04 	str.w	r3, [r0], #4
    c994:	f851 3b04 	ldr.w	r3, [r1], #4
    c998:	f840 3b04 	str.w	r3, [r0], #4
    c99c:	f851 3b04 	ldr.w	r3, [r1], #4
    c9a0:	f840 3b04 	str.w	r3, [r0], #4
    c9a4:	f851 3b04 	ldr.w	r3, [r1], #4
    c9a8:	f840 3b04 	str.w	r3, [r0], #4
    c9ac:	f851 3b04 	ldr.w	r3, [r1], #4
    c9b0:	f840 3b04 	str.w	r3, [r0], #4
    c9b4:	f851 3b04 	ldr.w	r3, [r1], #4
    c9b8:	f840 3b04 	str.w	r3, [r0], #4
    c9bc:	f851 3b04 	ldr.w	r3, [r1], #4
    c9c0:	f840 3b04 	str.w	r3, [r0], #4
    c9c4:	f851 3b04 	ldr.w	r3, [r1], #4
    c9c8:	f840 3b04 	str.w	r3, [r0], #4
    c9cc:	3a40      	subs	r2, #64	; 0x40
    c9ce:	d2bd      	bcs.n	c94c <memcpy+0x10>
    c9d0:	3230      	adds	r2, #48	; 0x30
    c9d2:	d311      	bcc.n	c9f8 <memcpy+0xbc>
    c9d4:	f851 3b04 	ldr.w	r3, [r1], #4
    c9d8:	f840 3b04 	str.w	r3, [r0], #4
    c9dc:	f851 3b04 	ldr.w	r3, [r1], #4
    c9e0:	f840 3b04 	str.w	r3, [r0], #4
    c9e4:	f851 3b04 	ldr.w	r3, [r1], #4
    c9e8:	f840 3b04 	str.w	r3, [r0], #4
    c9ec:	f851 3b04 	ldr.w	r3, [r1], #4
    c9f0:	f840 3b04 	str.w	r3, [r0], #4
    c9f4:	3a10      	subs	r2, #16
    c9f6:	d2ed      	bcs.n	c9d4 <memcpy+0x98>
    c9f8:	320c      	adds	r2, #12
    c9fa:	d305      	bcc.n	ca08 <memcpy+0xcc>
    c9fc:	f851 3b04 	ldr.w	r3, [r1], #4
    ca00:	f840 3b04 	str.w	r3, [r0], #4
    ca04:	3a04      	subs	r2, #4
    ca06:	d2f9      	bcs.n	c9fc <memcpy+0xc0>
    ca08:	3204      	adds	r2, #4
    ca0a:	d008      	beq.n	ca1e <memcpy+0xe2>
    ca0c:	07d2      	lsls	r2, r2, #31
    ca0e:	bf1c      	itt	ne
    ca10:	f811 3b01 	ldrbne.w	r3, [r1], #1
    ca14:	f800 3b01 	strbne.w	r3, [r0], #1
    ca18:	d301      	bcc.n	ca1e <memcpy+0xe2>
    ca1a:	880b      	ldrh	r3, [r1, #0]
    ca1c:	8003      	strh	r3, [r0, #0]
    ca1e:	4660      	mov	r0, ip
    ca20:	4770      	bx	lr
    ca22:	bf00      	nop
    ca24:	2a08      	cmp	r2, #8
    ca26:	d313      	bcc.n	ca50 <memcpy+0x114>
    ca28:	078b      	lsls	r3, r1, #30
    ca2a:	d08d      	beq.n	c948 <memcpy+0xc>
    ca2c:	f010 0303 	ands.w	r3, r0, #3
    ca30:	d08a      	beq.n	c948 <memcpy+0xc>
    ca32:	f1c3 0304 	rsb	r3, r3, #4
    ca36:	1ad2      	subs	r2, r2, r3
    ca38:	07db      	lsls	r3, r3, #31
    ca3a:	bf1c      	itt	ne
    ca3c:	f811 3b01 	ldrbne.w	r3, [r1], #1
    ca40:	f800 3b01 	strbne.w	r3, [r0], #1
    ca44:	d380      	bcc.n	c948 <memcpy+0xc>
    ca46:	f831 3b02 	ldrh.w	r3, [r1], #2
    ca4a:	f820 3b02 	strh.w	r3, [r0], #2
    ca4e:	e77b      	b.n	c948 <memcpy+0xc>
    ca50:	3a04      	subs	r2, #4
    ca52:	d3d9      	bcc.n	ca08 <memcpy+0xcc>
    ca54:	3a01      	subs	r2, #1
    ca56:	f811 3b01 	ldrb.w	r3, [r1], #1
    ca5a:	f800 3b01 	strb.w	r3, [r0], #1
    ca5e:	d2f9      	bcs.n	ca54 <memcpy+0x118>
    ca60:	780b      	ldrb	r3, [r1, #0]
    ca62:	7003      	strb	r3, [r0, #0]
    ca64:	784b      	ldrb	r3, [r1, #1]
    ca66:	7043      	strb	r3, [r0, #1]
    ca68:	788b      	ldrb	r3, [r1, #2]
    ca6a:	7083      	strb	r3, [r0, #2]
    ca6c:	4660      	mov	r0, ip
    ca6e:	4770      	bx	lr

0000ca70 <XIP_handler>:
    am_hal_ctimer_int_disable(AM_HAL_CTIMER_INT_TIMERA0);
}

static void
XIP_handler(void)
{
    ca70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    CACHECTRL->CACHECFG |= CACHECTRL_CACHECFG_ENABLE_MONITOR_Msk;
    ca74:	4c45      	ldr	r4, [pc, #276]	; (cb8c <XIP_handler+0x11c>)
    ret = test_function(g_prime_num[g_iteration], 0, 1);
    ca76:	4e46      	ldr	r6, [pc, #280]	; (cb90 <XIP_handler+0x120>)
    CACHECTRL->CACHECFG |= CACHECTRL_CACHECFG_ENABLE_MONITOR_Msk;
    ca78:	6823      	ldr	r3, [r4, #0]
    g_IMON[0] = CACHECTRL->IMON0;
    ca7a:	4d46      	ldr	r5, [pc, #280]	; (cb94 <XIP_handler+0x124>)
    CACHECTRL->CTRL = CACHECTRL_CTRL_RESET_STAT_Msk;
    ca7c:	2202      	movs	r2, #2
    CACHECTRL->CACHECFG |= CACHECTRL_CACHECFG_ENABLE_MONITOR_Msk;
    ca7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    ca82:	6023      	str	r3, [r4, #0]
    CACHECTRL->CTRL = CACHECTRL_CTRL_RESET_STAT_Msk;
    ca84:	60a2      	str	r2, [r4, #8]
    ret = test_function(g_prime_num[g_iteration], 0, 1);
    ca86:	6832      	ldr	r2, [r6, #0]
    ca88:	4b43      	ldr	r3, [pc, #268]	; (cb98 <XIP_handler+0x128>)
    ca8a:	2100      	movs	r1, #0
    ca8c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    ca90:	4b42      	ldr	r3, [pc, #264]	; (cb9c <XIP_handler+0x12c>)
    ca92:	2201      	movs	r2, #1
    ca94:	4798      	blx	r3
    CACHECTRL->CACHECFG &= ~CACHECTRL_CACHECFG_ENABLE_MONITOR_Msk;
    ca96:	6823      	ldr	r3, [r4, #0]
    ca98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    ca9c:	6023      	str	r3, [r4, #0]
    g_IMON[0] = CACHECTRL->IMON0;
    ca9e:	6d23      	ldr	r3, [r4, #80]	; 0x50
    caa0:	602b      	str	r3, [r5, #0]
    return (ret == g_exp_prime[g_iteration]);
    caa2:	f8d6 8000 	ldr.w	r8, [r6]
    caa6:	4b3e      	ldr	r3, [pc, #248]	; (cba0 <XIP_handler+0x130>)
    g_IMON[1] = CACHECTRL->IMON1;
    caa8:	6d67      	ldr	r7, [r4, #84]	; 0x54
    if (!run_mspi_xip())
    caaa:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
    g_IMON[1] = CACHECTRL->IMON1;
    caae:	606f      	str	r7, [r5, #4]
    g_IMON[2] = CACHECTRL->IMON2;
    cab0:	6da3      	ldr	r3, [r4, #88]	; 0x58
    g_IMON[3] = CACHECTRL->IMON3;
    cab2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    if (!run_mspi_xip())
    cab4:	4290      	cmp	r0, r2
    g_IMON[2] = CACHECTRL->IMON2;
    cab6:	e9c5 3102 	strd	r3, r1, [r5, #8]
    if (!run_mspi_xip())
    caba:	d003      	beq.n	cac4 <XIP_handler+0x54>
    {
        am_util_stdio_printf("Unable to run XIP successfully\n");
    cabc:	4839      	ldr	r0, [pc, #228]	; (cba4 <XIP_handler+0x134>)
    cabe:	f001 f94f 	bl	dd60 <am_util_stdio_printf>
        while(1);
    cac2:	e7fe      	b.n	cac2 <XIP_handler+0x52>
    }
    g_cache_miss = g_IMON[1] - g_IMON[2];
    g_hit_rate = (float)g_IMON[2] * 100.0 / (float)g_IMON[1];
    cac4:	ee07 3a90 	vmov	s15, r3
    g_cache_miss = g_IMON[1] - g_IMON[2];
    cac8:	4c37      	ldr	r4, [pc, #220]	; (cba8 <XIP_handler+0x138>)
    g_hit_rate = (float)g_IMON[2] * 100.0 / (float)g_IMON[1];
    caca:	f8df 9108 	ldr.w	r9, [pc, #264]	; cbd4 <XIP_handler+0x164>
    cace:	eef8 7a67 	vcvt.f32.u32	s15, s15
    g_cache_miss = g_IMON[1] - g_IMON[2];
    cad2:	1afa      	subs	r2, r7, r3
    g_hit_rate = (float)g_IMON[2] * 100.0 / (float)g_IMON[1];
    cad4:	ee17 0a90 	vmov	r0, s15
    g_cache_miss = g_IMON[1] - g_IMON[2];
    cad8:	6022      	str	r2, [r4, #0]
    g_hit_rate = (float)g_IMON[2] * 100.0 / (float)g_IMON[1];
    cada:	f7ff fc75 	bl	c3c8 <__aeabi_f2d>
    cade:	4b33      	ldr	r3, [pc, #204]	; (cbac <XIP_handler+0x13c>)
    cae0:	2200      	movs	r2, #0
    cae2:	f7ff fcc9 	bl	c478 <__aeabi_dmul>
    cae6:	ee07 7a90 	vmov	s15, r7
    caea:	eef8 7a67 	vcvt.f32.u32	s15, s15
    caee:	4682      	mov	sl, r0
    caf0:	ee17 0a90 	vmov	r0, s15
    caf4:	468b      	mov	fp, r1
    caf6:	f7ff fc67 	bl	c3c8 <__aeabi_f2d>
    cafa:	4602      	mov	r2, r0
    cafc:	460b      	mov	r3, r1
    cafe:	4650      	mov	r0, sl
    cb00:	4659      	mov	r1, fp
    cb02:	f7ff fde3 	bl	c6cc <__aeabi_ddiv>
    cb06:	f7ff fec9 	bl	c89c <__aeabi_d2f>
    am_util_stdio_printf("*****Iteration%d complete*****\n", g_iteration);
    cb0a:	4641      	mov	r1, r8
    g_hit_rate = (float)g_IMON[2] * 100.0 / (float)g_IMON[1];
    cb0c:	f8c9 0000 	str.w	r0, [r9]
    am_util_stdio_printf("*****Iteration%d complete*****\n", g_iteration);
    cb10:	4827      	ldr	r0, [pc, #156]	; (cbb0 <XIP_handler+0x140>)
    cb12:	f001 f925 	bl	dd60 <am_util_stdio_printf>
    am_util_stdio_printf("Total fetch number: %d\n", g_IMON[0]);
    cb16:	6829      	ldr	r1, [r5, #0]
    cb18:	4826      	ldr	r0, [pc, #152]	; (cbb4 <XIP_handler+0x144>)
    cb1a:	f001 f921 	bl	dd60 <am_util_stdio_printf>
    am_util_stdio_printf("Look up number: %d\n", g_DMON[1]);
    cb1e:	4b26      	ldr	r3, [pc, #152]	; (cbb8 <XIP_handler+0x148>)
    cb20:	4826      	ldr	r0, [pc, #152]	; (cbbc <XIP_handler+0x14c>)
    cb22:	6859      	ldr	r1, [r3, #4]
    cb24:	f001 f91c 	bl	dd60 <am_util_stdio_printf>
    am_util_stdio_printf("Cache miss number: %d\n", g_cache_miss);
    cb28:	6821      	ldr	r1, [r4, #0]
    cb2a:	4825      	ldr	r0, [pc, #148]	; (cbc0 <XIP_handler+0x150>)
    cb2c:	f001 f918 	bl	dd60 <am_util_stdio_printf>
    am_util_stdio_printf("Cache hit rate: %6.2f%%\n", g_hit_rate);
    cb30:	f8d9 0000 	ldr.w	r0, [r9]
    cb34:	f7ff fc48 	bl	c3c8 <__aeabi_f2d>
    cb38:	4602      	mov	r2, r0
    cb3a:	460b      	mov	r3, r1
    cb3c:	4821      	ldr	r0, [pc, #132]	; (cbc4 <XIP_handler+0x154>)
    cb3e:	f001 f90f 	bl	dd60 <am_util_stdio_printf>
    if ( ++g_iteration >= ITERATION_NUM )
    cb42:	6833      	ldr	r3, [r6, #0]
    cb44:	3301      	adds	r3, #1
    cb46:	2b09      	cmp	r3, #9
    cb48:	d802      	bhi.n	cb50 <XIP_handler+0xe0>
    cb4a:	6033      	str	r3, [r6, #0]
        stop_xip_timer();
        deinit_xip_timer();
        am_util_stdio_printf("XIP Cache Performance Demonstration End!\n");
        am_util_stdio_printf("Cache monitor example completes...\n");
    }
}
    cb4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        g_iteration = 0;
    cb50:	2000      	movs	r0, #0
    am_hal_ctimer_stop(0, AM_HAL_CTIMER_TIMERA);
    cb52:	f64f 71ff 	movw	r1, #65535	; 0xffff
        g_iteration = 0;
    cb56:	6030      	str	r0, [r6, #0]
    am_hal_ctimer_stop(0, AM_HAL_CTIMER_TIMERA);
    cb58:	f002 f96a 	bl	ee30 <am_hal_ctimer_stop>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cb5c:	4b1a      	ldr	r3, [pc, #104]	; (cbc8 <XIP_handler+0x158>)
    cb5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    cb62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    cb66:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    cb6a:	f3bf 8f6f 	isb	sy
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    cb6e:	2001      	movs	r0, #1
    cb70:	f002 fa0e 	bl	ef90 <am_hal_ctimer_int_clear>
    am_hal_ctimer_int_disable(AM_HAL_CTIMER_INT_TIMERA0);
    cb74:	2001      	movs	r0, #1
    cb76:	f002 f9f5 	bl	ef64 <am_hal_ctimer_int_disable>
        am_util_stdio_printf("XIP Cache Performance Demonstration End!\n");
    cb7a:	4814      	ldr	r0, [pc, #80]	; (cbcc <XIP_handler+0x15c>)
    cb7c:	f001 f8f0 	bl	dd60 <am_util_stdio_printf>
}
    cb80:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        am_util_stdio_printf("Cache monitor example completes...\n");
    cb84:	4812      	ldr	r0, [pc, #72]	; (cbd0 <XIP_handler+0x160>)
    cb86:	f001 b8eb 	b.w	dd60 <am_util_stdio_printf>
    cb8a:	bf00      	nop
    cb8c:	40018000 	.word	0x40018000
    cb90:	10005960 	.word	0x10005960
    cb94:	10005140 	.word	0x10005140
    cb98:	10001040 	.word	0x10001040
    cb9c:	04000001 	.word	0x04000001
    cba0:	10001018 	.word	0x10001018
    cba4:	00010ff0 	.word	0x00010ff0
    cba8:	10005958 	.word	0x10005958
    cbac:	40590000 	.word	0x40590000
    cbb0:	00011010 	.word	0x00011010
    cbb4:	00011030 	.word	0x00011030
    cbb8:	10005130 	.word	0x10005130
    cbbc:	00011048 	.word	0x00011048
    cbc0:	0001105c 	.word	0x0001105c
    cbc4:	00011074 	.word	0x00011074
    cbc8:	e000e100 	.word	0xe000e100
    cbcc:	00011090 	.word	0x00011090
    cbd0:	000110bc 	.word	0x000110bc
    cbd4:	1000595c 	.word	0x1000595c

0000cbd8 <mspi_psram_init>:
{
    cbd8:	b508      	push	{r3, lr}
    ui32Status = am_devices_mspi_psram_init(MSPI_TEST_MODULE, &MSPI_PSRAM_QuadCE0MSPIConfig, &g_MSPIDevHdl, &g_MSPIHdl);
    cbda:	4a07      	ldr	r2, [pc, #28]	; (cbf8 <mspi_psram_init+0x20>)
    cbdc:	4b07      	ldr	r3, [pc, #28]	; (cbfc <mspi_psram_init+0x24>)
    cbde:	4908      	ldr	r1, [pc, #32]	; (cc00 <mspi_psram_init+0x28>)
    cbe0:	2001      	movs	r0, #1
    cbe2:	f001 f91b 	bl	de1c <am_devices_mspi_psram_init>
    if (AM_DEVICES_MSPI_PSRAM_STATUS_SUCCESS != ui32Status)
    cbe6:	b900      	cbnz	r0, cbea <mspi_psram_init+0x12>
}
    cbe8:	bd08      	pop	{r3, pc}
        am_util_stdio_printf("Failed to configure the MSPI and PSRAM Device correctly!\n");
    cbea:	4806      	ldr	r0, [pc, #24]	; (cc04 <mspi_psram_init+0x2c>)
    cbec:	f001 f8b8 	bl	dd60 <am_util_stdio_printf>
        return -1;
    cbf0:	f04f 30ff 	mov.w	r0, #4294967295
}
    cbf4:	bd08      	pop	{r3, pc}
    cbf6:	bf00      	nop
    cbf8:	10005150 	.word	0x10005150
    cbfc:	10005154 	.word	0x10005154
    cc00:	10001000 	.word	0x10001000
    cc04:	000110e0 	.word	0x000110e0

0000cc08 <am_ctimer_isr>:
{
    cc08:	b510      	push	{r4, lr}
    ui32Status = am_hal_ctimer_int_status_get(false);
    cc0a:	2000      	movs	r0, #0
    cc0c:	f002 f9d2 	bl	efb4 <am_hal_ctimer_int_status_get>
    cc10:	4604      	mov	r4, r0
    am_hal_ctimer_int_clear(ui32Status);
    cc12:	f002 f9bd 	bl	ef90 <am_hal_ctimer_int_clear>
    am_hal_ctimer_int_service(ui32Status);
    cc16:	4620      	mov	r0, r4
}
    cc18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    am_hal_ctimer_int_service(ui32Status);
    cc1c:	f001 bfb8 	b.w	eb90 <am_hal_ctimer_int_service>

0000cc20 <start_xip_timer>:
{
    cc20:	b508      	push	{r3, lr}
    am_hal_ctimer_stop(0, AM_HAL_CTIMER_TIMERA);
    cc22:	f64f 71ff 	movw	r1, #65535	; 0xffff
    cc26:	2000      	movs	r0, #0
    cc28:	f002 f902 	bl	ee30 <am_hal_ctimer_stop>
}
    cc2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
    cc30:	f64f 71ff 	movw	r1, #65535	; 0xffff
    cc34:	2000      	movs	r0, #0
    cc36:	f002 b8cd 	b.w	edd4 <am_hal_ctimer_start>
    cc3a:	bf00      	nop

0000cc3c <init_xip_timer>:

void
init_xip_timer(void)
{
    cc3c:	b508      	push	{r3, lr}
    uint32_t ui32Period;

    //
    // Set up timer A0.
    //
    am_hal_ctimer_clear(0, AM_HAL_CTIMER_TIMERA);
    cc3e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    cc42:	2000      	movs	r0, #0
    cc44:	f002 f90a 	bl	ee5c <am_hal_ctimer_clear>
    am_hal_ctimer_config(0, &g_sTimer);
    cc48:	490d      	ldr	r1, [pc, #52]	; (cc80 <init_xip_timer+0x44>)
    cc4a:	2000      	movs	r0, #0
    cc4c:	f002 f884 	bl	ed58 <am_hal_ctimer_config>

    ui32Period = 12000 / XIP_REFRESH_RATE;
    am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, ui32Period,
    cc50:	f44f 7316 	mov.w	r3, #600	; 0x258
    cc54:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
    cc58:	f64f 71ff 	movw	r1, #65535	; 0xffff
    cc5c:	2000      	movs	r0, #0
    cc5e:	f002 f913 	bl	ee88 <am_hal_ctimer_period_set>
                             (ui32Period >> 1));

    //
    // Clear the timer Interrupt
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    cc62:	2001      	movs	r0, #1
    cc64:	f002 f994 	bl	ef90 <am_hal_ctimer_int_clear>

    //
    // Enable the timer Interrupt.
    //
    am_hal_ctimer_int_register(AM_HAL_CTIMER_INT_TIMERA0,
    cc68:	4906      	ldr	r1, [pc, #24]	; (cc84 <init_xip_timer+0x48>)
    cc6a:	2001      	movs	r0, #1
    cc6c:	f001 ffa8 	bl	ebc0 <am_hal_ctimer_int_register>
                               XIP_handler);
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
    cc70:	2001      	movs	r0, #1
    cc72:	f002 f963 	bl	ef3c <am_hal_ctimer_int_enable>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cc76:	4b04      	ldr	r3, [pc, #16]	; (cc88 <init_xip_timer+0x4c>)
    cc78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    cc7c:	601a      	str	r2, [r3, #0]

    //
    // Enable the timer interrupt in the NVIC.
    //
    NVIC_EnableIRQ(CTIMER_IRQn);
}
    cc7e:	bd08      	pop	{r3, pc}
    cc80:	10001068 	.word	0x10001068
    cc84:	0000ca71 	.word	0x0000ca71
    cc88:	e000e100 	.word	0xe000e100

0000cc8c <mspi_xip_init>:

int
mspi_xip_init()
{
    cc8c:	b530      	push	{r4, r5, lr}
    uint32_t ui32Status;
    //
    // Write the executable function into the target sector.
    //
    am_util_stdio_printf("Writing Executable function of %d Bytes to address %d\n", SZ_PRIME_MPI, PSRAM_XIP_BASE);
    ui32Status = am_devices_mspi_psram_write(g_MSPIDevHdl, (uint8_t *)Kc_PRIME_MPI, PSRAM_XIP_OFFSET, SZ_PRIME_MPI, true);
    cc8e:	4c18      	ldr	r4, [pc, #96]	; (ccf0 <mspi_xip_init+0x64>)
    am_util_stdio_printf("Writing Executable function of %d Bytes to address %d\n", SZ_PRIME_MPI, PSRAM_XIP_BASE);
    cc90:	4818      	ldr	r0, [pc, #96]	; (ccf4 <mspi_xip_init+0x68>)
{
    cc92:	b083      	sub	sp, #12
    am_util_stdio_printf("Writing Executable function of %d Bytes to address %d\n", SZ_PRIME_MPI, PSRAM_XIP_BASE);
    cc94:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    cc98:	2162      	movs	r1, #98	; 0x62
    ui32Status = am_devices_mspi_psram_write(g_MSPIDevHdl, (uint8_t *)Kc_PRIME_MPI, PSRAM_XIP_OFFSET, SZ_PRIME_MPI, true);
    cc9a:	2501      	movs	r5, #1
    am_util_stdio_printf("Writing Executable function of %d Bytes to address %d\n", SZ_PRIME_MPI, PSRAM_XIP_BASE);
    cc9c:	f001 f860 	bl	dd60 <am_util_stdio_printf>
    ui32Status = am_devices_mspi_psram_write(g_MSPIDevHdl, (uint8_t *)Kc_PRIME_MPI, PSRAM_XIP_OFFSET, SZ_PRIME_MPI, true);
    cca0:	4915      	ldr	r1, [pc, #84]	; (ccf8 <mspi_xip_init+0x6c>)
    cca2:	6820      	ldr	r0, [r4, #0]
    cca4:	9500      	str	r5, [sp, #0]
    cca6:	2362      	movs	r3, #98	; 0x62
    cca8:	2200      	movs	r2, #0
    ccaa:	f001 fb59 	bl	e360 <am_devices_mspi_psram_write>
    if (AM_DEVICES_MSPI_PSRAM_STATUS_SUCCESS != ui32Status)
    ccae:	b968      	cbnz	r0, cccc <mspi_xip_init+0x40>
        return -1;
    }
    //
    // Set up for XIP operation.
    //
    am_util_stdio_printf("Putting the MSPI and External PSRAM into XIP mode\n");
    ccb0:	4812      	ldr	r0, [pc, #72]	; (ccfc <mspi_xip_init+0x70>)
    ccb2:	f001 f855 	bl	dd60 <am_util_stdio_printf>
    ui32Status = am_devices_mspi_psram_enable_xip(g_MSPIDevHdl);
    ccb6:	6820      	ldr	r0, [r4, #0]
    ccb8:	f001 fbec 	bl	e494 <am_devices_mspi_psram_enable_xip>
    if (AM_DEVICES_MSPI_PSRAM_STATUS_SUCCESS != ui32Status)
    ccbc:	4601      	mov	r1, r0
    ccbe:	b958      	cbnz	r0, ccd8 <mspi_xip_init+0x4c>
    {
        am_util_stdio_printf("Failed to put the MSPI into XIP mode!\n");
        return -1;
    }
#ifndef XIP_UNCACHED
    ui32Status = am_hal_cachectrl_control(AM_HAL_CACHECTRL_CONTROL_FLASH_CACHE_INVALIDATE, 0);
    ccc0:	4628      	mov	r0, r5
    ccc2:	f001 fd31 	bl	e728 <am_hal_cachectrl_control>
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    ccc6:	b968      	cbnz	r0, cce4 <mspi_xip_init+0x58>
        am_util_stdio_printf("Failed to mark XIP region as non-cacheable\n");
        return -1;
    }
#endif
    return 0;
}
    ccc8:	b003      	add	sp, #12
    ccca:	bd30      	pop	{r4, r5, pc}
        am_util_stdio_printf("Failed to write executable function to Flash Device!\n");
    cccc:	480c      	ldr	r0, [pc, #48]	; (cd00 <mspi_xip_init+0x74>)
    ccce:	f001 f847 	bl	dd60 <am_util_stdio_printf>
        return -1;
    ccd2:	f04f 30ff 	mov.w	r0, #4294967295
    ccd6:	e7f7      	b.n	ccc8 <mspi_xip_init+0x3c>
        am_util_stdio_printf("Failed to put the MSPI into XIP mode!\n");
    ccd8:	480a      	ldr	r0, [pc, #40]	; (cd04 <mspi_xip_init+0x78>)
    ccda:	f001 f841 	bl	dd60 <am_util_stdio_printf>
        return -1;
    ccde:	f04f 30ff 	mov.w	r0, #4294967295
    cce2:	e7f1      	b.n	ccc8 <mspi_xip_init+0x3c>
        am_util_stdio_printf("Failed to invalidate Cache!\n");
    cce4:	4808      	ldr	r0, [pc, #32]	; (cd08 <mspi_xip_init+0x7c>)
    cce6:	f001 f83b 	bl	dd60 <am_util_stdio_printf>
        return -1;
    ccea:	f04f 30ff 	mov.w	r0, #4294967295
    ccee:	e7eb      	b.n	ccc8 <mspi_xip_init+0x3c>
    ccf0:	10005150 	.word	0x10005150
    ccf4:	0001111c 	.word	0x0001111c
    ccf8:	000114ac 	.word	0x000114ac
    ccfc:	0001118c 	.word	0x0001118c
    cd00:	00011154 	.word	0x00011154
    cd04:	000111c0 	.word	0x000111c0
    cd08:	000111e8 	.word	0x000111e8

0000cd0c <flush_mspi_psram_data>:
flush_mspi_psram_data(void)
{
    uint32_t      ui32Status;

    //DEBUG_PRINT("\nWriting a known pattern to psram!\n");
    for (uint32_t address = 0; address < g_data_size; address += TEMP_BUFFER_SIZE)
    cd0c:	4b44      	ldr	r3, [pc, #272]	; (ce20 <flush_mspi_psram_data+0x114>)
    cd0e:	681b      	ldr	r3, [r3, #0]
    cd10:	2b00      	cmp	r3, #0
    cd12:	f000 8083 	beq.w	ce1c <flush_mspi_psram_data+0x110>
{
    cd16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cd1a:	4d42      	ldr	r5, [pc, #264]	; (ce24 <flush_mspi_psram_data+0x118>)
    cd1c:	f8df a120 	ldr.w	sl, [pc, #288]	; ce40 <flush_mspi_psram_data+0x134>
    cd20:	f8df 9120 	ldr.w	r9, [pc, #288]	; ce44 <flush_mspi_psram_data+0x138>
    cd24:	4f40      	ldr	r7, [pc, #256]	; (ce28 <flush_mspi_psram_data+0x11c>)
        {
            g_TempBuf[0][i] = DATA_4P(g_ui32CurData);
        }

        AM_CRITICAL_BEGIN
        CACHECTRL->CACHECFG |= CACHECTRL_CACHECFG_ENABLE_MONITOR_Msk;
    cd26:	4e41      	ldr	r6, [pc, #260]	; (ce2c <flush_mspi_psram_data+0x120>)
{
    cd28:	b087      	sub	sp, #28
    for (uint32_t address = 0; address < g_data_size; address += TEMP_BUFFER_SIZE)
    cd2a:	f04f 0800 	mov.w	r8, #0
        AM_CRITICAL_END

        //
        // Write the buffer into the target address in PSRAM
        //
        ui32Status = am_devices_mspi_psram_write(g_MSPIDevHdl, (uint8_t *)g_TempBuf[0], address, TEMP_BUFFER_SIZE, true);
    cd2e:	f5a5 6b80 	sub.w	fp, r5, #1024	; 0x400
            g_TempBuf[0][i] = DATA_4P(g_ui32CurData);
    cd32:	f8da 1000 	ldr.w	r1, [sl]
    cd36:	4c3e      	ldr	r4, [pc, #248]	; (ce30 <flush_mspi_psram_data+0x124>)
    cd38:	040b      	lsls	r3, r1, #16
    cd3a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    cd3e:	430b      	orrs	r3, r1
    cd40:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    cd44:	e9c4 3300 	strd	r3, r3, [r4]
        for (i = 0; i < TEMP_BUFFER_SIZE / 4; i++)
    cd48:	3408      	adds	r4, #8
    cd4a:	42ac      	cmp	r4, r5
    cd4c:	d1fa      	bne.n	cd44 <flush_mspi_psram_data+0x38>
        AM_CRITICAL_BEGIN
    cd4e:	f002 fb1f 	bl	f390 <am_hal_interrupt_master_disable>
    cd52:	9004      	str	r0, [sp, #16]
        CACHECTRL->CACHECFG |= CACHECTRL_CACHECFG_ENABLE_MONITOR_Msk;
    cd54:	6833      	ldr	r3, [r6, #0]
    cd56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    cd5a:	6033      	str	r3, [r6, #0]
        CACHECTRL->CTRL = CACHECTRL_CTRL_RESET_STAT_Msk;
    cd5c:	2302      	movs	r3, #2
    cd5e:	60b3      	str	r3, [r6, #8]
        AM_CRITICAL_END
    cd60:	9804      	ldr	r0, [sp, #16]
    cd62:	f002 fb19 	bl	f398 <am_hal_interrupt_master_set>
        ui32Status = am_devices_mspi_psram_write(g_MSPIDevHdl, (uint8_t *)g_TempBuf[0], address, TEMP_BUFFER_SIZE, true);
    cd66:	2301      	movs	r3, #1
    cd68:	4642      	mov	r2, r8
    cd6a:	4659      	mov	r1, fp
    cd6c:	9300      	str	r3, [sp, #0]
    cd6e:	f8d9 0000 	ldr.w	r0, [r9]
    cd72:	f44f 6380 	mov.w	r3, #1024	; 0x400
    cd76:	f001 faf3 	bl	e360 <am_devices_mspi_psram_write>
    cd7a:	9003      	str	r0, [sp, #12]

        AM_CRITICAL_BEGIN
    cd7c:	f002 fb08 	bl	f390 <am_hal_interrupt_master_disable>
    cd80:	9005      	str	r0, [sp, #20]
        CACHECTRL->CACHECFG &= ~CACHECTRL_CACHECFG_ENABLE_MONITOR_Msk;
    cd82:	6831      	ldr	r1, [r6, #0]
    cd84:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
    cd88:	6031      	str	r1, [r6, #0]
        g_DMON[0] += CACHECTRL->DMON0;
    cd8a:	6c30      	ldr	r0, [r6, #64]	; 0x40
    cd8c:	6839      	ldr	r1, [r7, #0]
    cd8e:	4401      	add	r1, r0
    cd90:	6039      	str	r1, [r7, #0]
        g_DMON[1] += CACHECTRL->DMON1;
    cd92:	6c70      	ldr	r0, [r6, #68]	; 0x44
    cd94:	6879      	ldr	r1, [r7, #4]
    cd96:	4401      	add	r1, r0
    cd98:	6079      	str	r1, [r7, #4]
        g_DMON[2] += CACHECTRL->DMON2;
    cd9a:	6cb0      	ldr	r0, [r6, #72]	; 0x48
    cd9c:	68b9      	ldr	r1, [r7, #8]
    cd9e:	4401      	add	r1, r0
    cda0:	60b9      	str	r1, [r7, #8]
        g_DMON[3] += CACHECTRL->DMON3;
    cda2:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
    cda4:	68f9      	ldr	r1, [r7, #12]
    cda6:	4401      	add	r1, r0
        AM_CRITICAL_END
    cda8:	9805      	ldr	r0, [sp, #20]
        g_DMON[3] += CACHECTRL->DMON3;
    cdaa:	60f9      	str	r1, [r7, #12]
        AM_CRITICAL_END
    cdac:	f002 faf4 	bl	f398 <am_hal_interrupt_master_set>

        if (AM_DEVICES_MSPI_PSRAM_STATUS_SUCCESS != ui32Status)
    cdb0:	9b03      	ldr	r3, [sp, #12]
    cdb2:	bb6b      	cbnz	r3, ce10 <flush_mspi_psram_data+0x104>
            return -1;
        }
        //
        // Read the data back into the RX buffer.
        //
        ui32Status = am_devices_mspi_psram_read(g_MSPIDevHdl, (uint8_t *)g_TempBuf[1], address, TEMP_BUFFER_SIZE, true);
    cdb4:	2301      	movs	r3, #1
    cdb6:	9300      	str	r3, [sp, #0]
    cdb8:	f8d9 0000 	ldr.w	r0, [r9]
    cdbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    cdc0:	4642      	mov	r2, r8
    cdc2:	4621      	mov	r1, r4
    cdc4:	f001 fa34 	bl	e230 <am_devices_mspi_psram_read>
        if (AM_DEVICES_MSPI_PSRAM_STATUS_SUCCESS != ui32Status)
    cdc8:	b9e0      	cbnz	r0, ce04 <flush_mspi_psram_data+0xf8>
    cdca:	f5a4 6180 	sub.w	r1, r4, #1024	; 0x400
    cdce:	e001      	b.n	cdd4 <flush_mspi_psram_data+0xc8>
        }

        //
        // Compare the buffers
        //
        for (uint32_t i = 0; i < TEMP_BUFFER_SIZE / 4; i++)
    cdd0:	428c      	cmp	r4, r1
    cdd2:	d00f      	beq.n	cdf4 <flush_mspi_psram_data+0xe8>
    cdd4:	460b      	mov	r3, r1
        {
            if (g_TempBuf[1][i] != g_TempBuf[0][i])
    cdd6:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
    cdda:	681b      	ldr	r3, [r3, #0]
    cddc:	429a      	cmp	r2, r3
    cdde:	f101 0104 	add.w	r1, r1, #4
    cde2:	d0f5      	beq.n	cdd0 <flush_mspi_psram_data+0xc4>
            {
                am_util_stdio_printf("\nTX and RX buffers failed to compare!\n");
    cde4:	4813      	ldr	r0, [pc, #76]	; (ce34 <flush_mspi_psram_data+0x128>)
    cde6:	f000 ffbb 	bl	dd60 <am_util_stdio_printf>
                return -1;
    cdea:	f04f 30ff 	mov.w	r0, #4294967295
            }
        }
    }
    return 0;
}
    cdee:	b007      	add	sp, #28
    cdf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (uint32_t address = 0; address < g_data_size; address += TEMP_BUFFER_SIZE)
    cdf4:	4b0a      	ldr	r3, [pc, #40]	; (ce20 <flush_mspi_psram_data+0x114>)
    cdf6:	681b      	ldr	r3, [r3, #0]
    cdf8:	f508 6880 	add.w	r8, r8, #1024	; 0x400
    cdfc:	4543      	cmp	r3, r8
    cdfe:	d898      	bhi.n	cd32 <flush_mspi_psram_data+0x26>
    return 0;
    ce00:	2000      	movs	r0, #0
    ce02:	e7f4      	b.n	cdee <flush_mspi_psram_data+0xe2>
            am_util_stdio_printf("\nFailed to read buffer to PSRAM Device!\n");
    ce04:	480c      	ldr	r0, [pc, #48]	; (ce38 <flush_mspi_psram_data+0x12c>)
    ce06:	f000 ffab 	bl	dd60 <am_util_stdio_printf>
            return -1;
    ce0a:	f04f 30ff 	mov.w	r0, #4294967295
    ce0e:	e7ee      	b.n	cdee <flush_mspi_psram_data+0xe2>
            am_util_stdio_printf("\nFailed to write buffer to PSRAM Device!\n");
    ce10:	480a      	ldr	r0, [pc, #40]	; (ce3c <flush_mspi_psram_data+0x130>)
    ce12:	f000 ffa5 	bl	dd60 <am_util_stdio_printf>
            return -1;
    ce16:	f04f 30ff 	mov.w	r0, #4294967295
    ce1a:	e7e8      	b.n	cdee <flush_mspi_psram_data+0xe2>
    return 0;
    ce1c:	2000      	movs	r0, #0
}
    ce1e:	4770      	bx	lr
    ce20:	10001014 	.word	0x10001014
    ce24:	10005558 	.word	0x10005558
    ce28:	10005130 	.word	0x10005130
    ce2c:	40018000 	.word	0x40018000
    ce30:	10005158 	.word	0x10005158
    ce34:	00011260 	.word	0x00011260
    ce38:	00011234 	.word	0x00011234
    ce3c:	00011208 	.word	0x00011208
    ce40:	10001074 	.word	0x10001074
    ce44:	10005150 	.word	0x10005150

0000ce48 <main>:
// Main Function.
//
//*****************************************************************************
int
main(void)
{
    ce48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ce4c:	ed2d 8b02 	vpush	{d8}
    uint32_t ui32Result;

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    ce50:	2100      	movs	r1, #0
{
    ce52:	b083      	sub	sp, #12
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    ce54:	4608      	mov	r0, r1
    ce56:	f001 fde1 	bl	ea1c <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&cache_monitor_cachectrl);
    ce5a:	4897      	ldr	r0, [pc, #604]	; (d0b8 <main+0x270>)
    am_util_stdio_printf("App Compiler:    %s\n", COMPILER_VERSION);
    am_util_stdio_printf("HAL Compiler:    %s\n", g_ui8HALcompiler);
    am_util_stdio_printf("HAL SDK version: %d.%d.%d\n",
                         g_ui32HALversion.s.Major,
                         g_ui32HALversion.s.Minor,
                         g_ui32HALversion.s.Revision);
    ce5c:	4c97      	ldr	r4, [pc, #604]	; (d0bc <main+0x274>)
    am_hal_cachectrl_config(&cache_monitor_cachectrl);
    ce5e:	f001 fc35 	bl	e6cc <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    ce62:	f001 fc57 	bl	e714 <am_hal_cachectrl_enable>
    am_bsp_low_power_init();
    ce66:	f001 fb59 	bl	e51c <am_bsp_low_power_init>
    am_bsp_itm_printf_enable();
    ce6a:	f001 fb77 	bl	e55c <am_bsp_itm_printf_enable>
    am_util_stdio_terminal_clear();
    ce6e:	f000 ff91 	bl	dd94 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Ambiq Micro cache monitor example.\n\n");
    ce72:	4893      	ldr	r0, [pc, #588]	; (d0c0 <main+0x278>)
    ce74:	f000 ff74 	bl	dd60 <am_util_stdio_printf>
    am_util_stdio_printf("App Compiler:    %s\n", COMPILER_VERSION);
    ce78:	4992      	ldr	r1, [pc, #584]	; (d0c4 <main+0x27c>)
    ce7a:	4893      	ldr	r0, [pc, #588]	; (d0c8 <main+0x280>)
    ce7c:	f000 ff70 	bl	dd60 <am_util_stdio_printf>
    am_util_stdio_printf("HAL Compiler:    %s\n", g_ui8HALcompiler);
    ce80:	4992      	ldr	r1, [pc, #584]	; (d0cc <main+0x284>)
    ce82:	4893      	ldr	r0, [pc, #588]	; (d0d0 <main+0x288>)
    ce84:	f000 ff6c 	bl	dd60 <am_util_stdio_printf>
    am_util_stdio_printf("HAL SDK version: %d.%d.%d\n",
    ce88:	7863      	ldrb	r3, [r4, #1]
    ce8a:	78a2      	ldrb	r2, [r4, #2]
    ce8c:	78e1      	ldrb	r1, [r4, #3]
    ce8e:	4891      	ldr	r0, [pc, #580]	; (d0d4 <main+0x28c>)
    ce90:	f000 ff66 	bl	dd60 <am_util_stdio_printf>
    am_util_stdio_printf("HAL compiled with %s-style registers\n",
    ce94:	4a90      	ldr	r2, [pc, #576]	; (d0d8 <main+0x290>)
    ce96:	4b91      	ldr	r3, [pc, #580]	; (d0dc <main+0x294>)
    ce98:	f994 1000 	ldrsb.w	r1, [r4]
    ce9c:	4890      	ldr	r0, [pc, #576]	; (d0e0 <main+0x298>)
    ce9e:	ea12 0121 	ands.w	r1, r2, r1, asr #32
    cea2:	bf38      	it	cc
    cea4:	4619      	movcc	r1, r3
    cea6:	f000 ff5b 	bl	dd60 <am_util_stdio_printf>
                         g_ui32HALversion.s.bAMREGS ? "AM_REG" : "CMSIS");

    // Initialize the MSPI PSRAM
    iRet = mspi_psram_init();
    ceaa:	f7ff fe95 	bl	cbd8 <mspi_psram_init>
    if (iRet)
    ceae:	b118      	cbz	r0, ceb8 <main+0x70>
    {
        am_util_stdio_printf("Unable to initialize MSPI psram\n");
    ceb0:	488c      	ldr	r0, [pc, #560]	; (d0e4 <main+0x29c>)
    ceb2:	f000 ff55 	bl	dd60 <am_util_stdio_printf>
        while(1);
    ceb6:	e7fe      	b.n	ceb6 <main+0x6e>
    ceb8:	4b8b      	ldr	r3, [pc, #556]	; (d0e8 <main+0x2a0>)
    ceba:	2201      	movs	r2, #1
    cebc:	601a      	str	r2, [r3, #0]
    }
    NVIC_EnableIRQ(mspi_interrupts[MSPI_TEST_MODULE]);

    am_hal_interrupt_master_enable();
    cebe:	f002 fa63 	bl	f388 <am_hal_interrupt_master_enable>
    am_util_stdio_printf("DCACHE Performance Demonstration Start!\n");
    cec2:	488a      	ldr	r0, [pc, #552]	; (d0ec <main+0x2a4>)
    cec4:	4c8a      	ldr	r4, [pc, #552]	; (d0f0 <main+0x2a8>)
    cec6:	f8df b280 	ldr.w	fp, [pc, #640]	; d148 <main+0x300>
    ceca:	4e8a      	ldr	r6, [pc, #552]	; (d0f4 <main+0x2ac>)
    cecc:	f8df 827c 	ldr.w	r8, [pc, #636]	; d14c <main+0x304>
        {
            am_util_stdio_printf("Unable to flush MSPI psram\n");
            while(1);
        }
        g_cache_miss = g_DMON[1] - g_DMON[2];
        g_hit_rate = (float)g_DMON[2] / (float)g_DMON[1] * 100.0;
    ced0:	ed9f 8a89 	vldr	s16, [pc, #548]	; d0f8 <main+0x2b0>
    ced4:	4f89      	ldr	r7, [pc, #548]	; (d0fc <main+0x2b4>)
        am_util_stdio_printf("*****Iteration%d complete*****\n", g_iteration);
    ced6:	f8df 9250 	ldr.w	r9, [pc, #592]	; d128 <main+0x2e0>
        am_util_stdio_printf("Total fetch number: %d\n", g_DMON[0]);
    ceda:	f8df a250 	ldr.w	sl, [pc, #592]	; d12c <main+0x2e4>
    am_util_stdio_printf("DCACHE Performance Demonstration Start!\n");
    cede:	f000 ff3f 	bl	dd60 <am_util_stdio_printf>
    cee2:	e039      	b.n	cf58 <main+0x110>
        g_hit_rate = (float)g_DMON[2] / (float)g_DMON[1] * 100.0;
    cee4:	edd4 7a01 	vldr	s15, [r4, #4]
        am_util_stdio_printf("*****Iteration%d complete*****\n", g_iteration);
    cee8:	6831      	ldr	r1, [r6, #0]
        g_hit_rate = (float)g_DMON[2] / (float)g_DMON[1] * 100.0;
    ceea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    ceee:	edd4 7a02 	vldr	s15, [r4, #8]
    cef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
        g_cache_miss = g_DMON[1] - g_DMON[2];
    cef6:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
        g_hit_rate = (float)g_DMON[2] / (float)g_DMON[1] * 100.0;
    cefa:	eec6 7a87 	vdiv.f32	s15, s13, s14
        g_cache_miss = g_DMON[1] - g_DMON[2];
    cefe:	1a9b      	subs	r3, r3, r2
    cf00:	f8cb 3000 	str.w	r3, [fp]
        g_hit_rate = (float)g_DMON[2] / (float)g_DMON[1] * 100.0;
    cf04:	4b7e      	ldr	r3, [pc, #504]	; (d100 <main+0x2b8>)
    cf06:	ee67 7a88 	vmul.f32	s15, s15, s16
    cf0a:	edc3 7a00 	vstr	s15, [r3]
        am_util_stdio_printf("*****Iteration%d complete*****\n", g_iteration);
    cf0e:	f000 ff27 	bl	dd60 <am_util_stdio_printf>
        am_util_stdio_printf("Total fetch number: %d\n", g_DMON[0]);
    cf12:	6821      	ldr	r1, [r4, #0]
    cf14:	4650      	mov	r0, sl
    cf16:	f000 ff23 	bl	dd60 <am_util_stdio_printf>
        am_util_stdio_printf("Look up number: %d\n", g_DMON[1]);
    cf1a:	6861      	ldr	r1, [r4, #4]
    cf1c:	4879      	ldr	r0, [pc, #484]	; (d104 <main+0x2bc>)
    cf1e:	f000 ff1f 	bl	dd60 <am_util_stdio_printf>
        am_util_stdio_printf("Cache miss number: %d\n", g_cache_miss);
    cf22:	f8db 1000 	ldr.w	r1, [fp]
    cf26:	4878      	ldr	r0, [pc, #480]	; (d108 <main+0x2c0>)
    cf28:	f000 ff1a 	bl	dd60 <am_util_stdio_printf>
        am_util_stdio_printf("Cache hit rate: %6.2f%%\n", g_hit_rate);
    cf2c:	4b74      	ldr	r3, [pc, #464]	; (d100 <main+0x2b8>)
    cf2e:	6818      	ldr	r0, [r3, #0]
    cf30:	f7ff fa4a 	bl	c3c8 <__aeabi_f2d>
    cf34:	4602      	mov	r2, r0
    cf36:	460b      	mov	r3, r1
    cf38:	4874      	ldr	r0, [pc, #464]	; (d10c <main+0x2c4>)
    cf3a:	f000 ff11 	bl	dd60 <am_util_stdio_printf>
        if ( ++g_iteration >= ITERATION_NUM )
    cf3e:	6833      	ldr	r3, [r6, #0]
    cf40:	3301      	adds	r3, #1
    cf42:	2b09      	cmp	r3, #9
    cf44:	6033      	str	r3, [r6, #0]
    cf46:	d816      	bhi.n	cf76 <main+0x12e>
        {
            g_iteration = 0;
            break;
        }
        g_ui32CurData += DATA_STEP;
    cf48:	f8d8 2000 	ldr.w	r2, [r8]
        g_data_size *= SIZE_STEP;
    cf4c:	683b      	ldr	r3, [r7, #0]
        g_ui32CurData += DATA_STEP;
    cf4e:	3211      	adds	r2, #17
        g_data_size *= SIZE_STEP;
    cf50:	005b      	lsls	r3, r3, #1
        g_ui32CurData += DATA_STEP;
    cf52:	f8c8 2000 	str.w	r2, [r8]
        g_data_size *= SIZE_STEP;
    cf56:	603b      	str	r3, [r7, #0]
        memset(g_DMON, 0, sizeof(uint32_t) * 4);
    cf58:	2300      	movs	r3, #0
    cf5a:	e9c4 3300 	strd	r3, r3, [r4]
    cf5e:	e9c4 3302 	strd	r3, r3, [r4, #8]
        iRet = flush_mspi_psram_data();
    cf62:	f7ff fed3 	bl	cd0c <flush_mspi_psram_data>
    cf66:	4605      	mov	r5, r0
        am_util_stdio_printf("*****Iteration%d complete*****\n", g_iteration);
    cf68:	4648      	mov	r0, r9
        if (iRet)
    cf6a:	2d00      	cmp	r5, #0
    cf6c:	d0ba      	beq.n	cee4 <main+0x9c>
            am_util_stdio_printf("Unable to flush MSPI psram\n");
    cf6e:	4868      	ldr	r0, [pc, #416]	; (d110 <main+0x2c8>)
    cf70:	f000 fef6 	bl	dd60 <am_util_stdio_printf>
            while(1);
    cf74:	e7fe      	b.n	cf74 <main+0x12c>
    }
    am_util_stdio_printf("DCACHE Performance Demonstration End!\n");
    cf76:	4867      	ldr	r0, [pc, #412]	; (d114 <main+0x2cc>)
            g_iteration = 0;
    cf78:	6035      	str	r5, [r6, #0]
    am_util_stdio_printf("DCACHE Performance Demonstration End!\n");
    cf7a:	f000 fef1 	bl	dd60 <am_util_stdio_printf>

    am_util_stdio_printf("ICACHE Performance Demonstration Start!\n");
    cf7e:	4866      	ldr	r0, [pc, #408]	; (d118 <main+0x2d0>)
    cf80:	4d66      	ldr	r5, [pc, #408]	; (d11c <main+0x2d4>)
    while(1)
    {
        memset(g_IMON, 0, sizeof(uint32_t) * 4);

        AM_CRITICAL_BEGIN
        CACHECTRL->CACHECFG |= CACHECTRL_CACHECFG_ENABLE_MONITOR_Msk;
    cf82:	4f67      	ldr	r7, [pc, #412]	; (d120 <main+0x2d8>)
    am_util_stdio_printf("ICACHE Performance Demonstration Start!\n");
    cf84:	f000 feec 	bl	dd60 <am_util_stdio_printf>
    cf88:	e046      	b.n	d018 <main+0x1d0>
        {
            am_util_stdio_printf("ERROR: Invalid result. Expected %d, got %d.\n", g_prime_num[g_iteration], ui32Result);
            while(1);
        }
        g_cache_miss = g_IMON[1] - g_IMON[2];
        g_hit_rate = (float)g_IMON[2] * 100.0 / (float)g_IMON[1];
    cf8a:	edd5 7a02 	vldr	s15, [r5, #8]
        g_cache_miss = g_IMON[1] - g_IMON[2];
    cf8e:	e9d5 8301 	ldrd	r8, r3, [r5, #4]
        g_hit_rate = (float)g_IMON[2] * 100.0 / (float)g_IMON[1];
    cf92:	eef8 7a67 	vcvt.f32.u32	s15, s15
        g_cache_miss = g_IMON[1] - g_IMON[2];
    cf96:	eba8 0303 	sub.w	r3, r8, r3
        g_hit_rate = (float)g_IMON[2] * 100.0 / (float)g_IMON[1];
    cf9a:	ee17 0a90 	vmov	r0, s15
        g_cache_miss = g_IMON[1] - g_IMON[2];
    cf9e:	f8cb 3000 	str.w	r3, [fp]
        g_hit_rate = (float)g_IMON[2] * 100.0 / (float)g_IMON[1];
    cfa2:	f7ff fa11 	bl	c3c8 <__aeabi_f2d>
    cfa6:	4b5f      	ldr	r3, [pc, #380]	; (d124 <main+0x2dc>)
    cfa8:	2200      	movs	r2, #0
    cfaa:	f7ff fa65 	bl	c478 <__aeabi_dmul>
    cfae:	ee07 8a90 	vmov	s15, r8
    cfb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    cfb6:	4602      	mov	r2, r0
    cfb8:	460b      	mov	r3, r1
    cfba:	ee17 0a90 	vmov	r0, s15
    cfbe:	ec43 2b18 	vmov	d8, r2, r3
    cfc2:	f7ff fa01 	bl	c3c8 <__aeabi_f2d>
    cfc6:	4602      	mov	r2, r0
    cfc8:	460b      	mov	r3, r1
    cfca:	ec51 0b18 	vmov	r0, r1, d8
    cfce:	f7ff fb7d 	bl	c6cc <__aeabi_ddiv>
    cfd2:	f7ff fc63 	bl	c89c <__aeabi_d2f>
    cfd6:	4b4a      	ldr	r3, [pc, #296]	; (d100 <main+0x2b8>)
        am_util_stdio_printf("*****Iteration%d complete*****\n", g_iteration);
    cfd8:	4649      	mov	r1, r9
        g_hit_rate = (float)g_IMON[2] * 100.0 / (float)g_IMON[1];
    cfda:	6018      	str	r0, [r3, #0]
        am_util_stdio_printf("*****Iteration%d complete*****\n", g_iteration);
    cfdc:	4852      	ldr	r0, [pc, #328]	; (d128 <main+0x2e0>)
    cfde:	f000 febf 	bl	dd60 <am_util_stdio_printf>
        am_util_stdio_printf("Total fetch number: %d\n", g_IMON[0]);
    cfe2:	6829      	ldr	r1, [r5, #0]
    cfe4:	4851      	ldr	r0, [pc, #324]	; (d12c <main+0x2e4>)
    cfe6:	f000 febb 	bl	dd60 <am_util_stdio_printf>
        am_util_stdio_printf("Look up number: %d\n", g_DMON[1]);
    cfea:	6861      	ldr	r1, [r4, #4]
    cfec:	4845      	ldr	r0, [pc, #276]	; (d104 <main+0x2bc>)
    cfee:	f000 feb7 	bl	dd60 <am_util_stdio_printf>
        am_util_stdio_printf("Cache miss number: %d\n", g_cache_miss);
    cff2:	f8db 1000 	ldr.w	r1, [fp]
    cff6:	4844      	ldr	r0, [pc, #272]	; (d108 <main+0x2c0>)
    cff8:	f000 feb2 	bl	dd60 <am_util_stdio_printf>
        am_util_stdio_printf("Cache hit rate: %6.2f%%\n", g_hit_rate);
    cffc:	4b40      	ldr	r3, [pc, #256]	; (d100 <main+0x2b8>)
    cffe:	6818      	ldr	r0, [r3, #0]
    d000:	f7ff f9e2 	bl	c3c8 <__aeabi_f2d>
    d004:	4602      	mov	r2, r0
    d006:	460b      	mov	r3, r1
    d008:	4840      	ldr	r0, [pc, #256]	; (d10c <main+0x2c4>)
    d00a:	f000 fea9 	bl	dd60 <am_util_stdio_printf>
        if ( ++g_iteration >= ITERATION_NUM )
    d00e:	6833      	ldr	r3, [r6, #0]
    d010:	3301      	adds	r3, #1
    d012:	2b09      	cmp	r3, #9
    d014:	6033      	str	r3, [r6, #0]
    d016:	d83b      	bhi.n	d090 <main+0x248>
        memset(g_IMON, 0, sizeof(uint32_t) * 4);
    d018:	f04f 0a00 	mov.w	sl, #0
    d01c:	e9c5 aa00 	strd	sl, sl, [r5]
    d020:	e9c5 aa02 	strd	sl, sl, [r5, #8]
        AM_CRITICAL_BEGIN
    d024:	f002 f9b4 	bl	f390 <am_hal_interrupt_master_disable>
    d028:	9000      	str	r0, [sp, #0]
        CACHECTRL->CACHECFG |= CACHECTRL_CACHECFG_ENABLE_MONITOR_Msk;
    d02a:	683b      	ldr	r3, [r7, #0]
    d02c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    d030:	603b      	str	r3, [r7, #0]
        CACHECTRL->CTRL = CACHECTRL_CTRL_RESET_STAT_Msk;
    d032:	2302      	movs	r3, #2
    d034:	60bb      	str	r3, [r7, #8]
        AM_CRITICAL_END
    d036:	9800      	ldr	r0, [sp, #0]
    d038:	f002 f9ae 	bl	f398 <am_hal_interrupt_master_set>
        ui32Result = prime_number(g_prime_num[g_iteration], 0, 1);
    d03c:	6833      	ldr	r3, [r6, #0]
    d03e:	4a3c      	ldr	r2, [pc, #240]	; (d130 <main+0x2e8>)
    d040:	4651      	mov	r1, sl
    d042:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    d046:	2201      	movs	r2, #1
    d048:	f000 f882 	bl	d150 <prime_number>
    d04c:	4680      	mov	r8, r0
        AM_CRITICAL_BEGIN
    d04e:	f002 f99f 	bl	f390 <am_hal_interrupt_master_disable>
    d052:	9001      	str	r0, [sp, #4]
        CACHECTRL->CACHECFG &= ~CACHECTRL_CACHECFG_ENABLE_MONITOR_Msk;
    d054:	683b      	ldr	r3, [r7, #0]
    d056:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    d05a:	603b      	str	r3, [r7, #0]
        g_IMON[0] = CACHECTRL->IMON0;
    d05c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    d05e:	602b      	str	r3, [r5, #0]
        g_IMON[1] = CACHECTRL->IMON1;
    d060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    d062:	606b      	str	r3, [r5, #4]
        g_IMON[2] = CACHECTRL->IMON2;
    d064:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    d066:	60ab      	str	r3, [r5, #8]
        g_IMON[3] = CACHECTRL->IMON3;
    d068:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    d06a:	60eb      	str	r3, [r5, #12]
        AM_CRITICAL_END
    d06c:	9801      	ldr	r0, [sp, #4]
    d06e:	f002 f993 	bl	f398 <am_hal_interrupt_master_set>
        if ( ui32Result != g_exp_prime[g_iteration] )
    d072:	f8d6 9000 	ldr.w	r9, [r6]
    d076:	4b2f      	ldr	r3, [pc, #188]	; (d134 <main+0x2ec>)
    d078:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
    d07c:	4543      	cmp	r3, r8
    d07e:	d084      	beq.n	cf8a <main+0x142>
            am_util_stdio_printf("ERROR: Invalid result. Expected %d, got %d.\n", g_prime_num[g_iteration], ui32Result);
    d080:	4b2b      	ldr	r3, [pc, #172]	; (d130 <main+0x2e8>)
    d082:	482d      	ldr	r0, [pc, #180]	; (d138 <main+0x2f0>)
    d084:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
    d088:	4642      	mov	r2, r8
    d08a:	f000 fe69 	bl	dd60 <am_util_stdio_printf>
            while(1);
    d08e:	e7fe      	b.n	d08e <main+0x246>
        {
            g_iteration = 0;
            break;
        }
    }
    am_util_stdio_printf("ICACHE Performance Demonstration End!\n");
    d090:	482a      	ldr	r0, [pc, #168]	; (d13c <main+0x2f4>)
            g_iteration = 0;
    d092:	f8c6 a000 	str.w	sl, [r6]
    am_util_stdio_printf("ICACHE Performance Demonstration End!\n");
    d096:	f000 fe63 	bl	dd60 <am_util_stdio_printf>

    iRet = mspi_xip_init();
    d09a:	f7ff fdf7 	bl	cc8c <mspi_xip_init>
    if (iRet)
    d09e:	b118      	cbz	r0, d0a8 <main+0x260>
    {
        am_util_stdio_printf("Unable to init XIP\n");
    d0a0:	4827      	ldr	r0, [pc, #156]	; (d140 <main+0x2f8>)
    d0a2:	f000 fe5d 	bl	dd60 <am_util_stdio_printf>
        while(1);
    d0a6:	e7fe      	b.n	d0a6 <main+0x25e>
    }
    // Configure a Timer to trigger XIP
    init_xip_timer();
    d0a8:	f7ff fdc8 	bl	cc3c <init_xip_timer>
    start_xip_timer();
    d0ac:	f7ff fdb8 	bl	cc20 <start_xip_timer>
    am_util_stdio_printf("XIP Cache Performance Demonstration Start!\n");
    d0b0:	4824      	ldr	r0, [pc, #144]	; (d144 <main+0x2fc>)
    d0b2:	f000 fe55 	bl	dd60 <am_util_stdio_printf>
    while(1);
    d0b6:	e7fe      	b.n	d0b6 <main+0x26e>
    d0b8:	00011510 	.word	0x00011510
    d0bc:	00011660 	.word	0x00011660
    d0c0:	00011298 	.word	0x00011298
    d0c4:	000112c0 	.word	0x000112c0
    d0c8:	000112e0 	.word	0x000112e0
    d0cc:	00011664 	.word	0x00011664
    d0d0:	000112f8 	.word	0x000112f8
    d0d4:	00011310 	.word	0x00011310
    d0d8:	00011288 	.word	0x00011288
    d0dc:	00011290 	.word	0x00011290
    d0e0:	0001132c 	.word	0x0001132c
    d0e4:	00011354 	.word	0x00011354
    d0e8:	e000e100 	.word	0xe000e100
    d0ec:	00011378 	.word	0x00011378
    d0f0:	10005130 	.word	0x10005130
    d0f4:	10005960 	.word	0x10005960
    d0f8:	42c80000 	.word	0x42c80000
    d0fc:	10001014 	.word	0x10001014
    d100:	1000595c 	.word	0x1000595c
    d104:	00011048 	.word	0x00011048
    d108:	0001105c 	.word	0x0001105c
    d10c:	00011074 	.word	0x00011074
    d110:	000113a4 	.word	0x000113a4
    d114:	000113c0 	.word	0x000113c0
    d118:	000113e8 	.word	0x000113e8
    d11c:	10005140 	.word	0x10005140
    d120:	40018000 	.word	0x40018000
    d124:	40590000 	.word	0x40590000
    d128:	00011010 	.word	0x00011010
    d12c:	00011030 	.word	0x00011030
    d130:	10001040 	.word	0x10001040
    d134:	10001018 	.word	0x10001018
    d138:	00011414 	.word	0x00011414
    d13c:	00011444 	.word	0x00011444
    d140:	0001146c 	.word	0x0001146c
    d144:	00011480 	.word	0x00011480
    d148:	10005958 	.word	0x10005958
    d14c:	10001074 	.word	0x10001074

0000d150 <prime_number>:
  int prime;
  int total;

  total = 0;

  for ( i = 2 + id; i <= n; i = i + p )
    d150:	f101 0c02 	add.w	ip, r1, #2
    d154:	4584      	cmp	ip, r0
{
    d156:	b500      	push	{lr}
  total = 0;
    d158:	f04f 0e00 	mov.w	lr, #0
  for ( i = 2 + id; i <= n; i = i + p )
    d15c:	dc14      	bgt.n	d188 <prime_number+0x38>
  {
    prime = 1;
    for ( j = 2; j < i; j++ )
    d15e:	f1bc 0f02 	cmp.w	ip, #2
    d162:	dd0c      	ble.n	d17e <prime_number+0x2e>
    {
      if ( ( i % j ) == 0 )
    d164:	f01c 0f01 	tst.w	ip, #1
    d168:	d00b      	beq.n	d182 <prime_number+0x32>
    for ( j = 2; j < i; j++ )
    d16a:	2302      	movs	r3, #2
    d16c:	e004      	b.n	d178 <prime_number+0x28>
      if ( ( i % j ) == 0 )
    d16e:	fb9c f1f3 	sdiv	r1, ip, r3
    d172:	fb03 c111 	mls	r1, r3, r1, ip
    d176:	b121      	cbz	r1, d182 <prime_number+0x32>
    for ( j = 2; j < i; j++ )
    d178:	3301      	adds	r3, #1
    d17a:	4563      	cmp	r3, ip
    d17c:	d1f7      	bne.n	d16e <prime_number+0x1e>
      {
        prime = 0;
        break;
      }
    }
    total = total + prime;
    d17e:	f10e 0e01 	add.w	lr, lr, #1
  for ( i = 2 + id; i <= n; i = i + p )
    d182:	4494      	add	ip, r2
    d184:	4560      	cmp	r0, ip
    d186:	daea      	bge.n	d15e <prime_number+0xe>
  }
  return total;
}
    d188:	4670      	mov	r0, lr
    d18a:	f85d fb04 	ldr.w	pc, [sp], #4
    d18e:	bf00      	nop

0000d190 <am_util_delay_us>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_us(uint32_t ui32MicroSeconds)
{
    d190:	b510      	push	{r4, lr}
    d192:	b084      	sub	sp, #16
    d194:	4604      	mov	r4, r0
#else // AM_PART_APOLLO4
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    d196:	a801      	add	r0, sp, #4
    d198:	f001 fcdc 	bl	eb54 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MicroSeconds * (ui32HFRC / 3000000);
    d19c:	9b01      	ldr	r3, [sp, #4]
    d19e:	4805      	ldr	r0, [pc, #20]	; (d1b4 <am_util_delay_us+0x24>)
    d1a0:	fba0 2303 	umull	r2, r3, r0, r3
    d1a4:	0c9b      	lsrs	r3, r3, #18

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    d1a6:	fb04 f003 	mul.w	r0, r4, r3
    d1aa:	f001 ff23 	bl	eff4 <am_hal_flash_delay>
#endif // AM_PART_APOLLO4
}
    d1ae:	b004      	add	sp, #16
    d1b0:	bd10      	pop	{r4, pc}
    d1b2:	bf00      	nop
    d1b4:	165e9f81 	.word	0x165e9f81

0000d1b8 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    d1b8:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    d1ba:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    d1be:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    d1c0:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    d1c4:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    d1c8:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    d1cc:	f000 f806 	bl	d1dc <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    d1d0:	bd01      	pop	{r0, pc}
    d1d2:	bf00      	nop

0000d1d4 <getStackedReg>:
}

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    d1d4:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    d1d6:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    d1d8:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    d1da:	4770      	bx	lr

0000d1dc <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    d1dc:	b510      	push	{r4, lr}
    volatile am_fault_t sFaultData;
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_t  sHalFaultData = {0};
#else
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    d1de:	2300      	movs	r3, #0
{
    d1e0:	b092      	sub	sp, #72	; 0x48
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    d1e2:	e9cd 3300 	strd	r3, r3, [sp]
    d1e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
    d1ea:	e9cd 3304 	strd	r3, r3, [sp, #16]
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    d1ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    d1f2:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    d1f4:	f8d2 3d28 	ldr.w	r3, [r2, #3368]	; 0xd28
    d1f8:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    d1fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d1fc:	b2db      	uxtb	r3, r3
    d1fe:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    d202:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d204:	f3c3 2307 	ubfx	r3, r3, #8, #8
    d208:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    d20c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d20e:	0c1b      	lsrs	r3, r3, #16
    d210:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    d214:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
    d218:	930f      	str	r3, [sp, #60]	; 0x3c

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    d21a:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
    d21e:	079b      	lsls	r3, r3, #30
{
    d220:	4604      	mov	r4, r0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    d222:	d437      	bmi.n	d294 <am_util_faultisr_collect_data+0xb8>
    d224:	f04f 33ff 	mov.w	r3, #4294967295

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    d228:	4621      	mov	r1, r4
    d22a:	2000      	movs	r0, #0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    d22c:	930e      	str	r3, [sp, #56]	; 0x38
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    d22e:	f7ff ffd1 	bl	d1d4 <getStackedReg>
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    d232:	4621      	mov	r1, r4
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    d234:	4603      	mov	r3, r0
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    d236:	2001      	movs	r0, #1
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    d238:	9306      	str	r3, [sp, #24]
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    d23a:	f7ff ffcb 	bl	d1d4 <getStackedReg>
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    d23e:	4621      	mov	r1, r4
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    d240:	4603      	mov	r3, r0
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    d242:	2002      	movs	r0, #2
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    d244:	9307      	str	r3, [sp, #28]
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    d246:	f7ff ffc5 	bl	d1d4 <getStackedReg>
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    d24a:	4621      	mov	r1, r4
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    d24c:	4603      	mov	r3, r0
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    d24e:	2003      	movs	r0, #3
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    d250:	9308      	str	r3, [sp, #32]
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    d252:	f7ff ffbf 	bl	d1d4 <getStackedReg>
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    d256:	4621      	mov	r1, r4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    d258:	4603      	mov	r3, r0
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    d25a:	2004      	movs	r0, #4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    d25c:	9309      	str	r3, [sp, #36]	; 0x24
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    d25e:	f7ff ffb9 	bl	d1d4 <getStackedReg>
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    d262:	4621      	mov	r1, r4
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    d264:	4603      	mov	r3, r0
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    d266:	2005      	movs	r0, #5
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    d268:	930a      	str	r3, [sp, #40]	; 0x28
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    d26a:	f7ff ffb3 	bl	d1d4 <getStackedReg>
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    d26e:	4621      	mov	r1, r4
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    d270:	4603      	mov	r3, r0
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    d272:	2006      	movs	r0, #6
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    d274:	930b      	str	r3, [sp, #44]	; 0x2c
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    d276:	f7ff ffad 	bl	d1d4 <getStackedReg>
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    d27a:	4621      	mov	r1, r4
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    d27c:	4603      	mov	r3, r0
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    d27e:	2007      	movs	r0, #7
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    d280:	930c      	str	r3, [sp, #48]	; 0x30
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    d282:	f7ff ffa7 	bl	d1d4 <getStackedReg>
    //
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_get(&sHalFaultData);
#else
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    d286:	4669      	mov	r1, sp
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    d288:	4603      	mov	r3, r0
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    d28a:	2002      	movs	r0, #2
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    d28c:	930d      	str	r3, [sp, #52]	; 0x34
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    d28e:	f002 f985 	bl	f59c <am_hal_mcuctrl_info_get>
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    d292:	e7fe      	b.n	d292 <am_util_faultisr_collect_data+0xb6>
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    d294:	4601      	mov	r1, r0
    d296:	2006      	movs	r0, #6
    d298:	f7ff ff9c 	bl	d1d4 <getStackedReg>
    d29c:	4603      	mov	r3, r0
    d29e:	e7c3      	b.n	d228 <am_util_faultisr_collect_data+0x4c>

0000d2a0 <divu64_10>:
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    d2a0:	2900      	cmp	r1, #0
    d2a2:	d047      	beq.n	d334 <divu64_10+0x94>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    d2a4:	0843      	lsrs	r3, r0, #1
    d2a6:	0882      	lsrs	r2, r0, #2
    d2a8:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
    d2ac:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
    d2b0:	189b      	adds	r3, r3, r2
    d2b2:	ea4f 0291 	mov.w	r2, r1, lsr #2
    d2b6:	eb42 0251 	adc.w	r2, r2, r1, lsr #1
        q64 += (q64 >> 4);
    d2ba:	ea4f 1c13 	mov.w	ip, r3, lsr #4
    d2be:	ea4c 7c02 	orr.w	ip, ip, r2, lsl #28
    d2c2:	eb13 030c 	adds.w	r3, r3, ip
    d2c6:	eb42 1212 	adc.w	r2, r2, r2, lsr #4
        q64 += (q64 >> 8);
    d2ca:	ea4f 2c13 	mov.w	ip, r3, lsr #8
    d2ce:	ea4c 6c02 	orr.w	ip, ip, r2, lsl #24
    d2d2:	eb13 030c 	adds.w	r3, r3, ip
    d2d6:	eb42 2212 	adc.w	r2, r2, r2, lsr #8
        q64 += (q64 >> 16);
    d2da:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    d2de:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
    d2e2:	eb13 030c 	adds.w	r3, r3, ip
    d2e6:	eb42 4212 	adc.w	r2, r2, r2, lsr #16
        q64 += (q64 >> 32);
    d2ea:	189b      	adds	r3, r3, r2
    d2ec:	f142 0200 	adc.w	r2, r2, #0
        q64 >>= 3;
    d2f0:	08db      	lsrs	r3, r3, #3
    d2f2:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    d2f6:	08d2      	lsrs	r2, r2, #3
        r64 = ui64Val - q64*10;
        return q64 + ((r64 + 6) >> 4);
    d2f8:	3006      	adds	r0, #6
{
    d2fa:	b500      	push	{lr}
        r64 = ui64Val - q64*10;
    d2fc:	ea4f 0c83 	mov.w	ip, r3, lsl #2
    d300:	ea4f 0e82 	mov.w	lr, r2, lsl #2
        return q64 + ((r64 + 6) >> 4);
    d304:	f141 0100 	adc.w	r1, r1, #0
        r64 = ui64Val - q64*10;
    d308:	ea4e 7e93 	orr.w	lr, lr, r3, lsr #30
    d30c:	eb1c 0c03 	adds.w	ip, ip, r3
    d310:	eb42 0e0e 	adc.w	lr, r2, lr
    d314:	eb1c 0c0c 	adds.w	ip, ip, ip
    d318:	eb4e 0e0e 	adc.w	lr, lr, lr
        return q64 + ((r64 + 6) >> 4);
    d31c:	ebb0 000c 	subs.w	r0, r0, ip
    d320:	eb61 010e 	sbc.w	r1, r1, lr
    d324:	0900      	lsrs	r0, r0, #4
    d326:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
    d32a:	18c0      	adds	r0, r0, r3
    d32c:	eb42 1111 	adc.w	r1, r2, r1, lsr #4
        q32 += (q32 >> 16);
        q32 >>= 3;
        r32 = ui32Val - q32*10;
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    }
}
    d330:	f85d fb04 	ldr.w	pc, [sp], #4
        q32 = (ui32Val>>1) + (ui32Val>>2);
    d334:	0883      	lsrs	r3, r0, #2
    d336:	eb03 0350 	add.w	r3, r3, r0, lsr #1
        q32 += (q32 >> 4);
    d33a:	eb03 1313 	add.w	r3, r3, r3, lsr #4
        q32 += (q32 >> 8);
    d33e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
        q32 += (q32 >> 16);
    d342:	eb03 4313 	add.w	r3, r3, r3, lsr #16
        q32 >>= 3;
    d346:	08db      	lsrs	r3, r3, #3
        r32 = ui32Val - q32*10;
    d348:	eb03 0283 	add.w	r2, r3, r3, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    d34c:	3006      	adds	r0, #6
    d34e:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
    d352:	eb03 1010 	add.w	r0, r3, r0, lsr #4
}
    d356:	4770      	bx	lr

0000d358 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    d358:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d35c:	b089      	sub	sp, #36	; 0x24
    d35e:	ad01      	add	r5, sp, #4
        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);

        tbuf[ix++] = uMod + '0';
    d360:	46ae      	mov	lr, r5
    d362:	2401      	movs	r4, #1
    d364:	e042      	b.n	d3ec <uint64_to_str+0x94>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    d366:	19db      	adds	r3, r3, r7
    d368:	eb46 0651 	adc.w	r6, r6, r1, lsr #1
        q64 += (q64 >> 4);
    d36c:	091f      	lsrs	r7, r3, #4
    d36e:	ea47 7706 	orr.w	r7, r7, r6, lsl #28
    d372:	19db      	adds	r3, r3, r7
    d374:	eb46 1616 	adc.w	r6, r6, r6, lsr #4
        q64 += (q64 >> 8);
    d378:	0a1f      	lsrs	r7, r3, #8
    d37a:	ea47 6706 	orr.w	r7, r7, r6, lsl #24
    d37e:	19db      	adds	r3, r3, r7
    d380:	eb46 2616 	adc.w	r6, r6, r6, lsr #8
        q64 += (q64 >> 16);
    d384:	0c1f      	lsrs	r7, r3, #16
    d386:	ea47 4706 	orr.w	r7, r7, r6, lsl #16
    d38a:	19db      	adds	r3, r3, r7
    d38c:	eb46 4616 	adc.w	r6, r6, r6, lsr #16
        q64 += (q64 >> 32);
    d390:	199b      	adds	r3, r3, r6
    d392:	f146 0600 	adc.w	r6, r6, #0
        q64 >>= 3;
    d396:	08db      	lsrs	r3, r3, #3
    d398:	ea43 7346 	orr.w	r3, r3, r6, lsl #29
    d39c:	08f6      	lsrs	r6, r6, #3
        return q64 + ((r64 + 6) >> 4);
    d39e:	1d87      	adds	r7, r0, #6
        r64 = ui64Val - q64*10;
    d3a0:	ea4f 0c83 	mov.w	ip, r3, lsl #2
    d3a4:	ea4f 0886 	mov.w	r8, r6, lsl #2
        return q64 + ((r64 + 6) >> 4);
    d3a8:	f141 0100 	adc.w	r1, r1, #0
        r64 = ui64Val - q64*10;
    d3ac:	ea48 7893 	orr.w	r8, r8, r3, lsr #30
    d3b0:	eb1c 0c03 	adds.w	ip, ip, r3
    d3b4:	eb46 0808 	adc.w	r8, r6, r8
    d3b8:	eb1c 0c0c 	adds.w	ip, ip, ip
    d3bc:	eb48 0808 	adc.w	r8, r8, r8
        return q64 + ((r64 + 6) >> 4);
    d3c0:	ebb7 070c 	subs.w	r7, r7, ip
    d3c4:	eb61 0108 	sbc.w	r1, r1, r8
    d3c8:	093f      	lsrs	r7, r7, #4
    d3ca:	ea47 7701 	orr.w	r7, r7, r1, lsl #28
    d3ce:	18fb      	adds	r3, r7, r3
        uMod = ui64Val - (u64Tmp * 10);
    d3d0:	eb03 0783 	add.w	r7, r3, r3, lsl #2
    d3d4:	eba0 0047 	sub.w	r0, r0, r7, lsl #1
        tbuf[ix++] = uMod + '0';
    d3d8:	f100 0030 	add.w	r0, r0, #48	; 0x30
    d3dc:	f88e 0000 	strb.w	r0, [lr]
    d3e0:	eb46 1111 	adc.w	r1, r6, r1, lsr #4
    d3e4:	4618      	mov	r0, r3
    d3e6:	3401      	adds	r4, #1
    d3e8:	f10e 0e01 	add.w	lr, lr, #1
        q32 = (ui32Val>>1) + (ui32Val>>2);
    d3ec:	ea4f 0c90 	mov.w	ip, r0, lsr #2
    d3f0:	eb0c 0c50 	add.w	ip, ip, r0, lsr #1
        q32 += (q32 >> 4);
    d3f4:	eb0c 1c1c 	add.w	ip, ip, ip, lsr #4
        q32 += (q32 >> 8);
    d3f8:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
        q32 += (q32 >> 16);
    d3fc:	eb0c 4c1c 	add.w	ip, ip, ip, lsr #16
        q32 >>= 3;
    d400:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
        r32 = ui32Val - q32*10;
    d404:	eb0c 098c 	add.w	r9, ip, ip, lsl #2
        q64 = (ui64Val>>1) + (ui64Val>>2);
    d408:	0843      	lsrs	r3, r0, #1
    d40a:	0887      	lsrs	r7, r0, #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    d40c:	f100 0806 	add.w	r8, r0, #6
    d410:	eba8 0849 	sub.w	r8, r8, r9, lsl #1
        q64 = (ui64Val>>1) + (ui64Val>>2);
    d414:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
    d418:	ea47 7781 	orr.w	r7, r7, r1, lsl #30
    d41c:	088e      	lsrs	r6, r1, #2
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    d41e:	4681      	mov	r9, r0
    if ( ui64Val >> 32 )
    d420:	2900      	cmp	r1, #0
    d422:	d1a0      	bne.n	d366 <uint64_to_str+0xe>
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    d424:	eb0c 1018 	add.w	r0, ip, r8, lsr #4
        uMod = ui64Val - (u64Tmp * 10);
    d428:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    d42c:	eba9 0943 	sub.w	r9, r9, r3, lsl #1
        tbuf[ix++] = uMod + '0';
    d430:	f109 0930 	add.w	r9, r9, #48	; 0x30
    d434:	f88e 9000 	strb.w	r9, [lr]
        ui64Val = u64Tmp;
    } while ( ui64Val );
    d438:	2800      	cmp	r0, #0
    d43a:	d1d4      	bne.n	d3e6 <uint64_to_str+0x8e>
    iNumDig = ix;

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    d43c:	b14a      	cbz	r2, d452 <uint64_to_str+0xfa>
    {
        while ( ix-- )
    d43e:	192b      	adds	r3, r5, r4
    d440:	1e51      	subs	r1, r2, #1
        {
            *pcBuf++ = tbuf[ix];
    d442:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
    d446:	f801 0f01 	strb.w	r0, [r1, #1]!
        while ( ix-- )
    d44a:	429d      	cmp	r5, r3
    d44c:	d1f9      	bne.n	d442 <uint64_to_str+0xea>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    d44e:	2300      	movs	r3, #0
    d450:	5513      	strb	r3, [r2, r4]
    }

    return iNumDig;
}
    d452:	4620      	mov	r0, r4
    d454:	b009      	add	sp, #36	; 0x24
    d456:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d45a:	bf00      	nop

0000d45c <am_util_stdio_printf_init>:
    g_pfnCharPrint = pfnCharPrint;
    d45c:	4b01      	ldr	r3, [pc, #4]	; (d464 <am_util_stdio_printf_init+0x8>)
    d45e:	6018      	str	r0, [r3, #0]
}
    d460:	4770      	bx	lr
    d462:	bf00      	nop
    d464:	10005968 	.word	0x10005968

0000d468 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    d468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    d46c:	780b      	ldrb	r3, [r1, #0]
{
    d46e:	b089      	sub	sp, #36	; 0x24
    d470:	4605      	mov	r5, r0
    while ( *pcFmt != 0x0 )
    d472:	2b00      	cmp	r3, #0
    d474:	f000 8097 	beq.w	d5a6 <am_util_stdio_vsprintf+0x13e>
    d478:	4617      	mov	r7, r2
    uint32_t ui32NumChars, ui32CharCnt = 0;
    d47a:	2600      	movs	r6, #0
    d47c:	e00b      	b.n	d496 <am_util_stdio_vsprintf+0x2e>
        if ( *pcFmt != '%' )
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    d47e:	b125      	cbz	r5, d48a <am_util_stdio_vsprintf+0x22>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    d480:	2b0a      	cmp	r3, #10
    d482:	f000 8085 	beq.w	d590 <am_util_stdio_vsprintf+0x128>
                {
                    *pcBuf++ = '\r';
                    ++ui32CharCnt;
                }
                *pcBuf++ = *pcFmt;
    d486:	f805 3b01 	strb.w	r3, [r5], #1
            }

            ++pcFmt;
    d48a:	3101      	adds	r1, #1
            ++ui32CharCnt;
    d48c:	3601      	adds	r6, #1
    while ( *pcFmt != 0x0 )
    d48e:	780b      	ldrb	r3, [r1, #0]
    d490:	2b00      	cmp	r3, #0
    d492:	f000 8089 	beq.w	d5a8 <am_util_stdio_vsprintf+0x140>
        if ( *pcFmt != '%' )
    d496:	2b25      	cmp	r3, #37	; 0x25
    d498:	d1f1      	bne.n	d47e <am_util_stdio_vsprintf+0x16>
        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';

        if ( *pcFmt == '0' )
    d49a:	784b      	ldrb	r3, [r1, #1]
    d49c:	2b30      	cmp	r3, #48	; 0x30
    d49e:	f000 8098 	beq.w	d5d2 <am_util_stdio_vsprintf+0x16a>
        ++pcFmt;
    d4a2:	f101 0e01 	add.w	lr, r1, #1
        ui8PadChar = ' ';
    d4a6:	2220      	movs	r2, #32
    if ( *pcStr == '-')
    d4a8:	2b2d      	cmp	r3, #45	; 0x2d
    d4aa:	f000 8084 	beq.w	d5b6 <am_util_stdio_vsprintf+0x14e>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d4ae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    uint32_t ui32Val = 0, uCnt = 0;
    d4b2:	f04f 0c00 	mov.w	ip, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d4b6:	2909      	cmp	r1, #9
    d4b8:	4674      	mov	r4, lr
    bool bNeg = false;
    d4ba:	46e0      	mov	r8, ip
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d4bc:	f200 8087 	bhi.w	d5ce <am_util_stdio_vsprintf+0x166>
    d4c0:	f10c 0c01 	add.w	ip, ip, #1
    d4c4:	ebac 0c04 	sub.w	ip, ip, r4
    d4c8:	2100      	movs	r1, #0
        ui32Val *= 10;
    d4ca:	eb01 0181 	add.w	r1, r1, r1, lsl #2
        ui32Val += (*pcStr - '0');
    d4ce:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    d4d2:	eb04 090c 	add.w	r9, r4, ip
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d4d6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    d4da:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    d4de:	2809      	cmp	r0, #9
        ui32Val += (*pcStr - '0');
    d4e0:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d4e4:	d9f1      	bls.n	d4ca <am_util_stdio_vsprintf+0x62>
        pcFmt += ui32NumChars;

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    d4e6:	f81e 3009 	ldrb.w	r3, [lr, r9]
        pcFmt += ui32NumChars;
    d4ea:	eb0e 0409 	add.w	r4, lr, r9
    return bNeg ? -ui32Val : ui32Val;
    d4ee:	f1b8 0f00 	cmp.w	r8, #0
    d4f2:	d000      	beq.n	d4f6 <am_util_stdio_vsprintf+0x8e>
    d4f4:	4249      	negs	r1, r1
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    d4f6:	2b73      	cmp	r3, #115	; 0x73
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    d4f8:	4608      	mov	r0, r1
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    d4fa:	f000 8125 	beq.w	d748 <am_util_stdio_vsprintf+0x2e0>
    d4fe:	ea81 78e1 	eor.w	r8, r1, r1, asr #31
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    d502:	2b2e      	cmp	r3, #46	; 0x2e
    d504:	eba8 78e1 	sub.w	r8, r8, r1, asr #31
    d508:	f000 80f2 	beq.w	d6f0 <am_util_stdio_vsprintf+0x288>
        iPrecision = 6;             // printf() default precision for %f is 6
    d50c:	f04f 0906 	mov.w	r9, #6
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    d510:	2b6c      	cmp	r3, #108	; 0x6c
    d512:	d104      	bne.n	d51e <am_util_stdio_vsprintf+0xb6>
        {
            pcFmt++;
            if ( *pcFmt == 'l' )    // "ll" (long long)
    d514:	7863      	ldrb	r3, [r4, #1]
    d516:	2b6c      	cmp	r3, #108	; 0x6c
    d518:	f000 8163 	beq.w	d7e2 <am_util_stdio_vsprintf+0x37a>
            pcFmt++;
    d51c:	3401      	adds	r4, #1
                pcFmt++;
                bLongLong = true;
            }
        }

        switch ( *pcFmt )
    d51e:	f1a3 0046 	sub.w	r0, r3, #70	; 0x46
    d522:	2832      	cmp	r0, #50	; 0x32
    d524:	d85a      	bhi.n	d5dc <am_util_stdio_vsprintf+0x174>
    d526:	e8df f010 	tbh	[pc, r0, lsl #1]
    d52a:	005f      	.short	0x005f
    d52c:	00590059 	.word	0x00590059
    d530:	00590059 	.word	0x00590059
    d534:	00590059 	.word	0x00590059
    d538:	00590059 	.word	0x00590059
    d53c:	00590059 	.word	0x00590059
    d540:	00590059 	.word	0x00590059
    d544:	00590059 	.word	0x00590059
    d548:	00590059 	.word	0x00590059
    d54c:	01dc0059 	.word	0x01dc0059
    d550:	00590059 	.word	0x00590059
    d554:	00590059 	.word	0x00590059
    d558:	00590059 	.word	0x00590059
    d55c:	00590059 	.word	0x00590059
    d560:	00590059 	.word	0x00590059
    d564:	00b400c9 	.word	0x00b400c9
    d568:	005f0059 	.word	0x005f0059
    d56c:	00590059 	.word	0x00590059
    d570:	005900b4 	.word	0x005900b4
    d574:	00590059 	.word	0x00590059
    d578:	00590059 	.word	0x00590059
    d57c:	00590059 	.word	0x00590059
    d580:	00590059 	.word	0x00590059
    d584:	0059010e 	.word	0x0059010e
    d588:	005900d2 	.word	0x005900d2
    d58c:	02fb0059 	.word	0x02fb0059
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    d590:	4acc      	ldr	r2, [pc, #816]	; (d8c4 <am_util_stdio_vsprintf+0x45c>)
    d592:	7812      	ldrb	r2, [r2, #0]
    d594:	2a00      	cmp	r2, #0
    d596:	f43f af76 	beq.w	d486 <am_util_stdio_vsprintf+0x1e>
                    *pcBuf++ = '\r';
    d59a:	230d      	movs	r3, #13
    d59c:	f805 3b01 	strb.w	r3, [r5], #1
                    ++ui32CharCnt;
    d5a0:	3601      	adds	r6, #1
                *pcBuf++ = *pcFmt;
    d5a2:	780b      	ldrb	r3, [r1, #0]
    d5a4:	e76f      	b.n	d486 <am_util_stdio_vsprintf+0x1e>
    uint32_t ui32NumChars, ui32CharCnt = 0;
    d5a6:	461e      	mov	r6, r3
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d5a8:	b10d      	cbz	r5, d5ae <am_util_stdio_vsprintf+0x146>
    {
        *pcBuf = 0x0;
    d5aa:	2300      	movs	r3, #0
    d5ac:	702b      	strb	r3, [r5, #0]
    }

    return (ui32CharCnt);
}
    d5ae:	4630      	mov	r0, r6
    d5b0:	b009      	add	sp, #36	; 0x24
    d5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d5b6:	f89e 3001 	ldrb.w	r3, [lr, #1]
    d5ba:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
        uCnt++;
    d5be:	f04f 0c01 	mov.w	ip, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d5c2:	2909      	cmp	r1, #9
        pcStr++;
    d5c4:	eb0e 040c 	add.w	r4, lr, ip
        bNeg = true;
    d5c8:	46e0      	mov	r8, ip
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d5ca:	f67f af79 	bls.w	d4c0 <am_util_stdio_vsprintf+0x58>
    d5ce:	2100      	movs	r1, #0
    d5d0:	e78d      	b.n	d4ee <am_util_stdio_vsprintf+0x86>
            ui8PadChar = '0';
    d5d2:	461a      	mov	r2, r3
            ++pcFmt;
    d5d4:	f101 0e02 	add.w	lr, r1, #2
    if ( *pcStr == '-')
    d5d8:	788b      	ldrb	r3, [r1, #2]
    d5da:	e765      	b.n	d4a8 <am_util_stdio_vsprintf+0x40>
                if ( pcBuf )
    d5dc:	b10d      	cbz	r5, d5e2 <am_util_stdio_vsprintf+0x17a>
                    *pcBuf++ = *pcFmt;
    d5de:	f805 3b01 	strb.w	r3, [r5], #1
                ++ui32CharCnt;
    d5e2:	3601      	adds	r6, #1
        ++pcFmt;
    d5e4:	1c61      	adds	r1, r4, #1
    d5e6:	e752      	b.n	d48e <am_util_stdio_vsprintf+0x26>
                if ( pcBuf )
    d5e8:	2d00      	cmp	r5, #0
    d5ea:	d0fb      	beq.n	d5e4 <am_util_stdio_vsprintf+0x17c>
                    float fValue = va_arg(pArgs, double);
    d5ec:	3707      	adds	r7, #7
    d5ee:	f027 0707 	bic.w	r7, r7, #7
    d5f2:	e8f7 0102 	ldrd	r0, r1, [r7], #8
    d5f6:	f7ff f951 	bl	c89c <__aeabi_d2f>
    d5fa:	ee07 0a90 	vmov	s15, r0
    if (fValue == 0.0f)
    d5fe:	eef5 7a40 	vcmp.f32	s15, #0.0
                    *(uint32_t*)pcBuf = 20;
    d602:	2314      	movs	r3, #20
    if (fValue == 0.0f)
    d604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    *(uint32_t*)pcBuf = 20;
    d608:	602b      	str	r3, [r5, #0]
    if (fValue == 0.0f)
    d60a:	f000 835d 	beq.w	dcc8 <am_util_stdio_vsprintf+0x860>
    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    d60e:	f3c0 51c7 	ubfx	r1, r0, #23, #8
    d612:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
    unFloatValue.F = fValue;
    d616:	4603      	mov	r3, r0
    if (iExp2 >= 31)
    d618:	2a1e      	cmp	r2, #30
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    d61a:	f3c0 0016 	ubfx	r0, r0, #0, #23
    d61e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    if (iExp2 >= 31)
    d622:	f300 837c 	bgt.w	dd1e <am_util_stdio_vsprintf+0x8b6>
    else if (iExp2 < -23)
    d626:	f112 0f17 	cmn.w	r2, #23
    d62a:	f2c0 8374 	blt.w	dd16 <am_util_stdio_vsprintf+0x8ae>
    else if (iExp2 >= 23)
    d62e:	2a16      	cmp	r2, #22
    d630:	f340 8246 	ble.w	dac0 <am_util_stdio_vsprintf+0x658>
        i32IntPart = i32Significand << (iExp2 - 23);
    d634:	3996      	subs	r1, #150	; 0x96
    if (unFloatValue.I32 < 0)
    d636:	2b00      	cmp	r3, #0
        i32IntPart = i32Significand << (iExp2 - 23);
    d638:	fa00 f001 	lsl.w	r0, r0, r1
    if (unFloatValue.I32 < 0)
    d63c:	f2c0 8287 	blt.w	db4e <am_util_stdio_vsprintf+0x6e6>
    d640:	462b      	mov	r3, r5
    i32FracPart = 0;
    d642:	f04f 0800 	mov.w	r8, #0
    if (i32IntPart == 0)
    d646:	2800      	cmp	r0, #0
    d648:	f000 827c 	beq.w	db44 <am_util_stdio_vsprintf+0x6dc>
            *pcBuf++ = '-';
    d64c:	461a      	mov	r2, r3
    d64e:	bfde      	ittt	le
    d650:	232d      	movle	r3, #45	; 0x2d
    d652:	f802 3b01 	strble.w	r3, [r2], #1
            uint64_to_str(-i32IntPart, pcBuf);
    d656:	4240      	negle	r0, r0
    d658:	17c1      	asrs	r1, r0, #31
    d65a:	f7ff fe7d 	bl	d358 <uint64_to_str>
        while (*pcBuf)    // Get to end of new string
    d65e:	7813      	ldrb	r3, [r2, #0]
    d660:	b11b      	cbz	r3, d66a <am_util_stdio_vsprintf+0x202>
    d662:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    d666:	2b00      	cmp	r3, #0
    d668:	d1fb      	bne.n	d662 <am_util_stdio_vsprintf+0x1fa>
    *pcBuf++ = '.';
    d66a:	232e      	movs	r3, #46	; 0x2e
    d66c:	7013      	strb	r3, [r2, #0]
    if (i32FracPart == 0)
    d66e:	f1b8 0f00 	cmp.w	r8, #0
    d672:	f040 8291 	bne.w	db98 <am_util_stdio_vsprintf+0x730>
        *pcBuf++ = '0';
    d676:	1c90      	adds	r0, r2, #2
    d678:	2330      	movs	r3, #48	; 0x30
    d67a:	7053      	strb	r3, [r2, #1]
    return (pcBuf - pcBufInitial);
    d67c:	1b41      	subs	r1, r0, r5
    *pcBuf = 0x00;
    d67e:	2300      	movs	r3, #0
                    if ( iVal < 0 )
    d680:	4299      	cmp	r1, r3
    *pcBuf = 0x00;
    d682:	7003      	strb	r3, [r0, #0]
                    if ( iVal < 0 )
    d684:	f2c0 82c3 	blt.w	dc0e <am_util_stdio_vsprintf+0x7a6>
                    ui32CharCnt += iVal;
    d688:	460b      	mov	r3, r1
    d68a:	441e      	add	r6, r3
                    pcBuf += iVal;
    d68c:	441d      	add	r5, r3
        ++pcFmt;
    d68e:	1c61      	adds	r1, r4, #1
    d690:	e6fd      	b.n	d48e <am_util_stdio_vsprintf+0x26>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d692:	f857 9b04 	ldr.w	r9, [r7], #4
    d696:	ea4f 7ae9 	mov.w	sl, r9, asr #31
                if ( i64Val < 0 )
    d69a:	f1ba 0f00 	cmp.w	sl, #0
    d69e:	f2c0 8113 	blt.w	d8c8 <am_util_stdio_vsprintf+0x460>
                if ( iWidth )
    d6a2:	2900      	cmp	r1, #0
    d6a4:	f040 82bd 	bne.w	dc22 <am_util_stdio_vsprintf+0x7ba>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d6a8:	4648      	mov	r0, r9
    d6aa:	4651      	mov	r1, sl
    d6ac:	462a      	mov	r2, r5
    d6ae:	f7ff fe53 	bl	d358 <uint64_to_str>
                if ( pcBuf )
    d6b2:	b9d5      	cbnz	r5, d6ea <am_util_stdio_vsprintf+0x282>
                ui32CharCnt += iVal;
    d6b4:	2500      	movs	r5, #0
    d6b6:	4406      	add	r6, r0
        ++pcFmt;
    d6b8:	1c61      	adds	r1, r4, #1
    d6ba:	e6e8      	b.n	d48e <am_util_stdio_vsprintf+0x26>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    d6bc:	1d3b      	adds	r3, r7, #4
                if ( pcBuf )
    d6be:	b115      	cbz	r5, d6c6 <am_util_stdio_vsprintf+0x25e>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    d6c0:	683a      	ldr	r2, [r7, #0]
    d6c2:	f805 2b01 	strb.w	r2, [r5], #1
                ++ui32CharCnt;
    d6c6:	3601      	adds	r6, #1
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    d6c8:	461f      	mov	r7, r3
        ++pcFmt;
    d6ca:	1c61      	adds	r1, r4, #1
    d6cc:	e6df      	b.n	d48e <am_util_stdio_vsprintf+0x26>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d6ce:	f857 ab04 	ldr.w	sl, [r7], #4
    d6d2:	f04f 0900 	mov.w	r9, #0
                if ( iWidth )
    d6d6:	2900      	cmp	r1, #0
    d6d8:	f040 81b0 	bne.w	da3c <am_util_stdio_vsprintf+0x5d4>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d6dc:	4650      	mov	r0, sl
    d6de:	4649      	mov	r1, r9
    d6e0:	462a      	mov	r2, r5
    d6e2:	f7ff fe39 	bl	d358 <uint64_to_str>
                if ( pcBuf )
    d6e6:	2d00      	cmp	r5, #0
    d6e8:	d0e4      	beq.n	d6b4 <am_util_stdio_vsprintf+0x24c>
                    pcBuf += iVal;
    d6ea:	4405      	add	r5, r0
                ui32CharCnt += iVal;
    d6ec:	4406      	add	r6, r0
                break;
    d6ee:	e7e3      	b.n	d6b8 <am_util_stdio_vsprintf+0x250>
    if ( *pcStr == '-')
    d6f0:	7860      	ldrb	r0, [r4, #1]
    d6f2:	282d      	cmp	r0, #45	; 0x2d
            ++pcFmt;
    d6f4:	f104 0c01 	add.w	ip, r4, #1
    if ( *pcStr == '-')
    d6f8:	f000 8195 	beq.w	da26 <am_util_stdio_vsprintf+0x5be>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d6fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    d700:	2b09      	cmp	r3, #9
    d702:	f200 82ea 	bhi.w	dcda <am_util_stdio_vsprintf+0x872>
    uint32_t ui32Val = 0, uCnt = 0;
    d706:	2300      	movs	r3, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d708:	4664      	mov	r4, ip
    bool bNeg = false;
    d70a:	4699      	mov	r9, r3
    d70c:	3301      	adds	r3, #1
    d70e:	eba3 0e04 	sub.w	lr, r3, r4
    d712:	2300      	movs	r3, #0
        ui32Val *= 10;
    d714:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        ui32Val += (*pcStr - '0');
    d718:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d71c:	eb04 0a0e 	add.w	sl, r4, lr
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d720:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    d724:	f1a0 0b30 	sub.w	fp, r0, #48	; 0x30
    d728:	f1bb 0f09 	cmp.w	fp, #9
        ui32Val += (*pcStr - '0');
    d72c:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d730:	d9f0      	bls.n	d714 <am_util_stdio_vsprintf+0x2ac>
    return bNeg ? -ui32Val : ui32Val;
    d732:	f1b9 0f00 	cmp.w	r9, #0
    d736:	d000      	beq.n	d73a <am_util_stdio_vsprintf+0x2d2>
    d738:	425b      	negs	r3, r3
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    d73a:	4699      	mov	r9, r3
            pcFmt += ui32NumChars;
    d73c:	eb0c 040a 	add.w	r4, ip, sl
        if ( *pcFmt == 'l' )
    d740:	f81c 300a 	ldrb.w	r3, [ip, sl]
    d744:	e6e4      	b.n	d510 <am_util_stdio_vsprintf+0xa8>
        switch ( *pcFmt )
    d746:	4640      	mov	r0, r8
                pcStr = va_arg(pArgs, char *);
    d748:	46b9      	mov	r9, r7
    d74a:	f859 3b04 	ldr.w	r3, [r9], #4
    if ( !pcBuf )
    d74e:	2b00      	cmp	r3, #0
    d750:	f000 81c6 	beq.w	dae0 <am_util_stdio_vsprintf+0x678>
    while ( *pcBuf++ )
    d754:	469c      	mov	ip, r3
    d756:	f81c 1b01 	ldrb.w	r1, [ip], #1
    d75a:	2900      	cmp	r1, #0
    d75c:	f000 82c1 	beq.w	dce2 <am_util_stdio_vsprintf+0x87a>
    uint32_t ui32RetVal = 0;
    d760:	f04f 0e00 	mov.w	lr, #0
    while ( *pcBuf++ )
    d764:	f81c 7b01 	ldrb.w	r7, [ip], #1
        ui32RetVal++;
    d768:	f10e 0e01 	add.w	lr, lr, #1
    while ( *pcBuf++ )
    d76c:	2f00      	cmp	r7, #0
    d76e:	d1f9      	bne.n	d764 <am_util_stdio_vsprintf+0x2fc>
                if ( iWidth > 0 )
    d770:	2800      	cmp	r0, #0
    d772:	dd02      	ble.n	d77a <am_util_stdio_vsprintf+0x312>
                    if ( ui32strlen < iWidth )
    d774:	4570      	cmp	r0, lr
    d776:	f200 81d6 	bhi.w	db26 <am_util_stdio_vsprintf+0x6be>
    d77a:	f1c3 0801 	rsb	r8, r3, #1
                while (*pcStr != 0x0)
    d77e:	46b2      	mov	sl, r6
    d780:	462f      	mov	r7, r5
    d782:	eb08 0c06 	add.w	ip, r8, r6
    d786:	e000      	b.n	d78a <am_util_stdio_vsprintf+0x322>
                        *pcBuf++ = *pcStr;
    d788:	462f      	mov	r7, r5
    d78a:	eb0c 0603 	add.w	r6, ip, r3
                    if ( pcBuf )
    d78e:	2d00      	cmp	r5, #0
    d790:	f000 8131 	beq.w	d9f6 <am_util_stdio_vsprintf+0x58e>
                        *pcBuf++ = *pcStr;
    d794:	7039      	strb	r1, [r7, #0]
                while (*pcStr != 0x0)
    d796:	f813 1f01 	ldrb.w	r1, [r3, #1]!
                        *pcBuf++ = *pcStr;
    d79a:	3501      	adds	r5, #1
                while (*pcStr != 0x0)
    d79c:	2900      	cmp	r1, #0
    d79e:	d1f3      	bne.n	d788 <am_util_stdio_vsprintf+0x320>
                if ( iWidth )
    d7a0:	b1e0      	cbz	r0, d7dc <am_util_stdio_vsprintf+0x374>
                    iWidth = -iWidth;
    d7a2:	f1c0 0800 	rsb	r8, r0, #0
                    if ( ui32strlen < iWidth )
    d7a6:	45f0      	cmp	r8, lr
    d7a8:	d918      	bls.n	d7dc <am_util_stdio_vsprintf+0x374>
                        iWidth -= ui32strlen;
    d7aa:	eba8 030e 	sub.w	r3, r8, lr
    if ( i32NumChars <= 0 )
    d7ae:	2b00      	cmp	r3, #0
    d7b0:	f340 82b3 	ble.w	dd1a <am_util_stdio_vsprintf+0x8b2>
    while ( i32NumChars-- )
    d7b4:	3b01      	subs	r3, #1
    int32_t i32Cnt = 0;
    d7b6:	4694      	mov	ip, r2
    d7b8:	2000      	movs	r0, #0
    d7ba:	461a      	mov	r2, r3
    d7bc:	462b      	mov	r3, r5
            *pcBuf++ = cPadChar;
    d7be:	4619      	mov	r1, r3
        if ( pcBuf )
    d7c0:	2b00      	cmp	r3, #0
    d7c2:	f000 8129 	beq.w	da18 <am_util_stdio_vsprintf+0x5b0>
            *pcBuf++ = cPadChar;
    d7c6:	f801 cb01 	strb.w	ip, [r1], #1
    d7ca:	4617      	mov	r7, r2
    d7cc:	460b      	mov	r3, r1
        i32Cnt++;
    d7ce:	3001      	adds	r0, #1
    while ( i32NumChars-- )
    d7d0:	1e7a      	subs	r2, r7, #1
    d7d2:	2f00      	cmp	r7, #0
    d7d4:	d1f3      	bne.n	d7be <am_util_stdio_vsprintf+0x356>
                        ui32CharCnt += iWidth;
    d7d6:	4406      	add	r6, r0
                        pcBuf += pcBuf ? iWidth : 0;
    d7d8:	b105      	cbz	r5, d7dc <am_util_stdio_vsprintf+0x374>
    d7da:	4405      	add	r5, r0
                pcStr = va_arg(pArgs, char *);
    d7dc:	464f      	mov	r7, r9
        ++pcFmt;
    d7de:	1c61      	adds	r1, r4, #1
    d7e0:	e655      	b.n	d48e <am_util_stdio_vsprintf+0x26>
        switch ( *pcFmt )
    d7e2:	78a3      	ldrb	r3, [r4, #2]
    d7e4:	f1a3 0046 	sub.w	r0, r3, #70	; 0x46
                pcFmt++;
    d7e8:	3402      	adds	r4, #2
        switch ( *pcFmt )
    d7ea:	2832      	cmp	r0, #50	; 0x32
    d7ec:	f63f aef6 	bhi.w	d5dc <am_util_stdio_vsprintf+0x174>
    d7f0:	f20f 0c04 	addw	ip, pc, #4
    d7f4:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
    d7f8:	0000d5e9 	.word	0x0000d5e9
    d7fc:	0000d5dd 	.word	0x0000d5dd
    d800:	0000d5dd 	.word	0x0000d5dd
    d804:	0000d5dd 	.word	0x0000d5dd
    d808:	0000d5dd 	.word	0x0000d5dd
    d80c:	0000d5dd 	.word	0x0000d5dd
    d810:	0000d5dd 	.word	0x0000d5dd
    d814:	0000d5dd 	.word	0x0000d5dd
    d818:	0000d5dd 	.word	0x0000d5dd
    d81c:	0000d5dd 	.word	0x0000d5dd
    d820:	0000d5dd 	.word	0x0000d5dd
    d824:	0000d5dd 	.word	0x0000d5dd
    d828:	0000d5dd 	.word	0x0000d5dd
    d82c:	0000d5dd 	.word	0x0000d5dd
    d830:	0000d5dd 	.word	0x0000d5dd
    d834:	0000d5dd 	.word	0x0000d5dd
    d838:	0000d5dd 	.word	0x0000d5dd
    d83c:	0000d5dd 	.word	0x0000d5dd
    d840:	0000db71 	.word	0x0000db71
    d844:	0000d5dd 	.word	0x0000d5dd
    d848:	0000d5dd 	.word	0x0000d5dd
    d84c:	0000d5dd 	.word	0x0000d5dd
    d850:	0000d5dd 	.word	0x0000d5dd
    d854:	0000d5dd 	.word	0x0000d5dd
    d858:	0000d5dd 	.word	0x0000d5dd
    d85c:	0000d5dd 	.word	0x0000d5dd
    d860:	0000d5dd 	.word	0x0000d5dd
    d864:	0000d5dd 	.word	0x0000d5dd
    d868:	0000d5dd 	.word	0x0000d5dd
    d86c:	0000d6bd 	.word	0x0000d6bd
    d870:	0000d911 	.word	0x0000d911
    d874:	0000d5dd 	.word	0x0000d5dd
    d878:	0000d5e9 	.word	0x0000d5e9
    d87c:	0000d5dd 	.word	0x0000d5dd
    d880:	0000d5dd 	.word	0x0000d5dd
    d884:	0000d911 	.word	0x0000d911
    d888:	0000d5dd 	.word	0x0000d5dd
    d88c:	0000d5dd 	.word	0x0000d5dd
    d890:	0000d5dd 	.word	0x0000d5dd
    d894:	0000d5dd 	.word	0x0000d5dd
    d898:	0000d5dd 	.word	0x0000d5dd
    d89c:	0000d5dd 	.word	0x0000d5dd
    d8a0:	0000d5dd 	.word	0x0000d5dd
    d8a4:	0000d5dd 	.word	0x0000d5dd
    d8a8:	0000d5dd 	.word	0x0000d5dd
    d8ac:	0000d747 	.word	0x0000d747
    d8b0:	0000d5dd 	.word	0x0000d5dd
    d8b4:	0000d921 	.word	0x0000d921
    d8b8:	0000d5dd 	.word	0x0000d5dd
    d8bc:	0000d5dd 	.word	0x0000d5dd
    d8c0:	0000db85 	.word	0x0000db85
    d8c4:	10005964 	.word	0x10005964
                    ui64Val = -i64Val;          // Get absolute value
    d8c8:	f1d9 0900 	rsbs	r9, r9, #0
    d8cc:	eb6a 0a4a 	sbc.w	sl, sl, sl, lsl #1
                if ( iWidth )
    d8d0:	2900      	cmp	r1, #0
    d8d2:	f040 81fd 	bne.w	dcd0 <am_util_stdio_vsprintf+0x868>
                        if ( pcBuf )
    d8d6:	b115      	cbz	r5, d8de <am_util_stdio_vsprintf+0x476>
                            *pcBuf++ = '-';
    d8d8:	232d      	movs	r3, #45	; 0x2d
    d8da:	f805 3b01 	strb.w	r3, [r5], #1
                        ++ui32CharCnt;
    d8de:	3601      	adds	r6, #1
    d8e0:	e6e2      	b.n	d6a8 <am_util_stdio_vsprintf+0x240>
        bLower = bLongLong = false;
    d8e2:	f04f 0e00 	mov.w	lr, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d8e6:	f857 0b04 	ldr.w	r0, [r7], #4
    d8ea:	f04f 0c00 	mov.w	ip, #0
                if ( iWidth )
    d8ee:	b9f9      	cbnz	r1, d930 <am_util_stdio_vsprintf+0x4c8>
    if ( ui64Val == 0 )
    d8f0:	ea50 030c 	orrs.w	r3, r0, ip
    d8f4:	d14d      	bne.n	d992 <am_util_stdio_vsprintf+0x52a>
    if (pcBuf)
    d8f6:	2d00      	cmp	r5, #0
    d8f8:	d079      	beq.n	d9ee <am_util_stdio_vsprintf+0x586>
            *pcBuf++ = tbuf[ix];
    d8fa:	462b      	mov	r3, r5
    d8fc:	2230      	movs	r2, #48	; 0x30
    d8fe:	f803 2b01 	strb.w	r2, [r3], #1
    d902:	2201      	movs	r2, #1
    d904:	461d      	mov	r5, r3
        *pcBuf = 0;
    d906:	2100      	movs	r1, #0
    d908:	7019      	strb	r1, [r3, #0]
                ui32CharCnt += iVal;
    d90a:	4416      	add	r6, r2
        ++pcFmt;
    d90c:	1c61      	adds	r1, r4, #1
    d90e:	e5be      	b.n	d48e <am_util_stdio_vsprintf+0x26>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d910:	3707      	adds	r7, #7
    d912:	f027 0707 	bic.w	r7, r7, #7
    d916:	f8d7 a004 	ldr.w	sl, [r7, #4]
    d91a:	f857 9b08 	ldr.w	r9, [r7], #8
    d91e:	e6bc      	b.n	d69a <am_util_stdio_vsprintf+0x232>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d920:	3707      	adds	r7, #7
    d922:	f027 0707 	bic.w	r7, r7, #7
    d926:	f8d7 9004 	ldr.w	r9, [r7, #4]
    d92a:	f857 ab08 	ldr.w	sl, [r7], #8
    d92e:	e6d2      	b.n	d6d6 <am_util_stdio_vsprintf+0x26e>
    int iDigits = ui64Val ? 0 : 1;
    d930:	ea50 030c 	orrs.w	r3, r0, ip
    d934:	bf0c      	ite	eq
    d936:	2101      	moveq	r1, #1
    d938:	2100      	movne	r1, #0
    while ( ui64Val )
    d93a:	d00b      	beq.n	d954 <am_util_stdio_vsprintf+0x4ec>
    d93c:	4603      	mov	r3, r0
    d93e:	46e1      	mov	r9, ip
        ui64Val >>= 4;
    d940:	091b      	lsrs	r3, r3, #4
    d942:	ea43 7309 	orr.w	r3, r3, r9, lsl #28
    d946:	ea4f 1919 	mov.w	r9, r9, lsr #4
    while ( ui64Val )
    d94a:	ea53 0a09 	orrs.w	sl, r3, r9
        ++iDigits;
    d94e:	f101 0101 	add.w	r1, r1, #1
    while ( ui64Val )
    d952:	d1f5      	bne.n	d940 <am_util_stdio_vsprintf+0x4d8>
                    iWidth -= ndigits_in_hex(ui64Val);
    d954:	eba8 0301 	sub.w	r3, r8, r1
    if ( i32NumChars <= 0 )
    d958:	2b00      	cmp	r3, #0
    d95a:	f340 81b2 	ble.w	dcc2 <am_util_stdio_vsprintf+0x85a>
    while ( i32NumChars-- )
    d95e:	3b01      	subs	r3, #1
    int32_t i32Cnt = 0;
    d960:	4691      	mov	r9, r2
    d962:	4682      	mov	sl, r0
    d964:	f04f 0800 	mov.w	r8, #0
    d968:	462a      	mov	r2, r5
    d96a:	4618      	mov	r0, r3
            *pcBuf++ = cPadChar;
    d96c:	4611      	mov	r1, r2
        if ( pcBuf )
    d96e:	2a00      	cmp	r2, #0
    d970:	d04c      	beq.n	da0c <am_util_stdio_vsprintf+0x5a4>
            *pcBuf++ = cPadChar;
    d972:	f801 9b01 	strb.w	r9, [r1], #1
    d976:	4603      	mov	r3, r0
    d978:	460a      	mov	r2, r1
        i32Cnt++;
    d97a:	f108 0801 	add.w	r8, r8, #1
    while ( i32NumChars-- )
    d97e:	1e58      	subs	r0, r3, #1
    d980:	2b00      	cmp	r3, #0
    d982:	d1f3      	bne.n	d96c <am_util_stdio_vsprintf+0x504>
                    ui32CharCnt += iWidth;
    d984:	4650      	mov	r0, sl
    d986:	4446      	add	r6, r8
                    pcBuf += pcBuf ? iWidth : 0;
    d988:	b375      	cbz	r5, d9e8 <am_util_stdio_vsprintf+0x580>
    if ( ui64Val == 0 )
    d98a:	ea50 030c 	orrs.w	r3, r0, ip
                    pcBuf += pcBuf ? iWidth : 0;
    d98e:	4445      	add	r5, r8
    if ( ui64Val == 0 )
    d990:	d0b3      	beq.n	d8fa <am_util_stdio_vsprintf+0x492>
    d992:	f1be 0f00 	cmp.w	lr, #0
    d996:	f10d 080c 	add.w	r8, sp, #12
    d99a:	bf14      	ite	ne
    d99c:	f04f 0927 	movne.w	r9, #39	; 0x27
    d9a0:	f04f 0907 	moveq.w	r9, #7
    d9a4:	4641      	mov	r1, r8
    int iNumDig, ix = 0;
    d9a6:	2200      	movs	r2, #0
        cCh = ui64Val & 0xf;
    d9a8:	f000 030f 	and.w	r3, r0, #15
        if ( cCh > 9 )
    d9ac:	2b09      	cmp	r3, #9
            cCh += bLower ? 0x27 : 0x7;
    d9ae:	bf88      	it	hi
    d9b0:	444b      	addhi	r3, r9
        ui64Val >>= 4;
    d9b2:	ea4f 1e10 	mov.w	lr, r0, lsr #4
    d9b6:	ea4e 700c 	orr.w	r0, lr, ip, lsl #28
        tbuf[ix++] = cCh + '0';
    d9ba:	3330      	adds	r3, #48	; 0x30
        ui64Val >>= 4;
    d9bc:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
        tbuf[ix++] = cCh + '0';
    d9c0:	f801 3b01 	strb.w	r3, [r1], #1
    while ( ui64Val )
    d9c4:	ea50 030c 	orrs.w	r3, r0, ip
        tbuf[ix++] = cCh + '0';
    d9c8:	f102 0201 	add.w	r2, r2, #1
    while ( ui64Val )
    d9cc:	d1ec      	bne.n	d9a8 <am_util_stdio_vsprintf+0x540>
    if (pcBuf)
    d9ce:	b17d      	cbz	r5, d9f0 <am_util_stdio_vsprintf+0x588>
    d9d0:	eb08 0302 	add.w	r3, r8, r2
    d9d4:	1e69      	subs	r1, r5, #1
            *pcBuf++ = tbuf[ix];
    d9d6:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
    d9da:	f801 0f01 	strb.w	r0, [r1, #1]!
        while (ix--)
    d9de:	4543      	cmp	r3, r8
    d9e0:	d1f9      	bne.n	d9d6 <am_util_stdio_vsprintf+0x56e>
            *pcBuf++ = tbuf[ix];
    d9e2:	18ab      	adds	r3, r5, r2
                    pcBuf += iVal;
    d9e4:	461d      	mov	r5, r3
    d9e6:	e78e      	b.n	d906 <am_util_stdio_vsprintf+0x49e>
    if ( ui64Val == 0 )
    d9e8:	ea50 030c 	orrs.w	r3, r0, ip
    d9ec:	d1d1      	bne.n	d992 <am_util_stdio_vsprintf+0x52a>
    d9ee:	2201      	movs	r2, #1
                if ( pcBuf )
    d9f0:	2500      	movs	r5, #0
                ui32CharCnt += iVal;
    d9f2:	4416      	add	r6, r2
                break;
    d9f4:	e78a      	b.n	d90c <am_util_stdio_vsprintf+0x4a4>
    d9f6:	eb08 010a 	add.w	r1, r8, sl
                    ++ui32CharCnt;
    d9fa:	18ce      	adds	r6, r1, r3
                while (*pcStr != 0x0)
    d9fc:	f813 7f01 	ldrb.w	r7, [r3, #1]!
    da00:	2f00      	cmp	r7, #0
    da02:	d1fa      	bne.n	d9fa <am_util_stdio_vsprintf+0x592>
                if ( iWidth )
    da04:	2800      	cmp	r0, #0
    da06:	f43f aee9 	beq.w	d7dc <am_util_stdio_vsprintf+0x374>
    da0a:	e6ca      	b.n	d7a2 <am_util_stdio_vsprintf+0x33a>
    while ( i32NumChars-- )
    da0c:	1e43      	subs	r3, r0, #1
        i32Cnt++;
    da0e:	f108 0801 	add.w	r8, r8, #1
    while ( i32NumChars-- )
    da12:	2800      	cmp	r0, #0
    da14:	d1b1      	bne.n	d97a <am_util_stdio_vsprintf+0x512>
    da16:	e7b5      	b.n	d984 <am_util_stdio_vsprintf+0x51c>
    da18:	1e57      	subs	r7, r2, #1
        i32Cnt++;
    da1a:	3001      	adds	r0, #1
    while ( i32NumChars-- )
    da1c:	2a00      	cmp	r2, #0
    da1e:	f47f aed6 	bne.w	d7ce <am_util_stdio_vsprintf+0x366>
                        ui32CharCnt += iWidth;
    da22:	4406      	add	r6, r0
    da24:	e6d8      	b.n	d7d8 <am_util_stdio_vsprintf+0x370>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    da26:	78a0      	ldrb	r0, [r4, #2]
    da28:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    da2c:	2b09      	cmp	r3, #9
        pcStr++;
    da2e:	f104 0402 	add.w	r4, r4, #2
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    da32:	f200 8176 	bhi.w	dd22 <am_util_stdio_vsprintf+0x8ba>
        uCnt++;
    da36:	2301      	movs	r3, #1
        bNeg = true;
    da38:	4699      	mov	r9, r3
    da3a:	e667      	b.n	d70c <am_util_stdio_vsprintf+0x2a4>
    int iNDigits = ui64Val ? 0 : 1;
    da3c:	ea5a 0309 	orrs.w	r3, sl, r9
    da40:	bf0c      	ite	eq
    da42:	f04f 0b01 	moveq.w	fp, #1
    da46:	f04f 0b00 	movne.w	fp, #0
    while ( ui64Val )
    da4a:	d012      	beq.n	da72 <am_util_stdio_vsprintf+0x60a>
    da4c:	4649      	mov	r1, r9
    da4e:	9400      	str	r4, [sp, #0]
    da50:	4650      	mov	r0, sl
    da52:	465c      	mov	r4, fp
    da54:	46cb      	mov	fp, r9
    da56:	46a9      	mov	r9, r5
    da58:	4615      	mov	r5, r2
        ui64Val = divu64_10(ui64Val);
    da5a:	f7ff fc21 	bl	d2a0 <divu64_10>
    while ( ui64Val )
    da5e:	ea50 0301 	orrs.w	r3, r0, r1
        ++iNDigits;
    da62:	f104 0401 	add.w	r4, r4, #1
    while ( ui64Val )
    da66:	d1f8      	bne.n	da5a <am_util_stdio_vsprintf+0x5f2>
    da68:	462a      	mov	r2, r5
    da6a:	464d      	mov	r5, r9
    da6c:	46d9      	mov	r9, fp
    da6e:	46a3      	mov	fp, r4
    da70:	9c00      	ldr	r4, [sp, #0]
                    iWidth -= ndigits_in_u64(ui64Val);
    da72:	eba8 030b 	sub.w	r3, r8, fp
    if ( i32NumChars <= 0 )
    da76:	2b00      	cmp	r3, #0
    da78:	f340 8149 	ble.w	dd0e <am_util_stdio_vsprintf+0x8a6>
    while ( i32NumChars-- )
    da7c:	3b01      	subs	r3, #1
    int32_t i32Cnt = 0;
    da7e:	4694      	mov	ip, r2
    da80:	46a6      	mov	lr, r4
    da82:	2000      	movs	r0, #0
    da84:	462a      	mov	r2, r5
    da86:	461c      	mov	r4, r3
            *pcBuf++ = cPadChar;
    da88:	4611      	mov	r1, r2
        if ( pcBuf )
    da8a:	b1a2      	cbz	r2, dab6 <am_util_stdio_vsprintf+0x64e>
            *pcBuf++ = cPadChar;
    da8c:	f801 cb01 	strb.w	ip, [r1], #1
    da90:	4623      	mov	r3, r4
    da92:	460a      	mov	r2, r1
        i32Cnt++;
    da94:	3001      	adds	r0, #1
    while ( i32NumChars-- )
    da96:	1e5c      	subs	r4, r3, #1
    da98:	2b00      	cmp	r3, #0
    da9a:	d1f5      	bne.n	da88 <am_util_stdio_vsprintf+0x620>
                    ui32CharCnt += iWidth;
    da9c:	4674      	mov	r4, lr
    da9e:	4406      	add	r6, r0
                    pcBuf += pcBuf ? iWidth : 0;
    daa0:	2d00      	cmp	r5, #0
    daa2:	f000 8123 	beq.w	dcec <am_util_stdio_vsprintf+0x884>
    daa6:	4405      	add	r5, r0
                iVal = uint64_to_str(ui64Val, pcBuf);
    daa8:	462a      	mov	r2, r5
    daaa:	4650      	mov	r0, sl
    daac:	4649      	mov	r1, r9
    daae:	f7ff fc53 	bl	d358 <uint64_to_str>
                    pcBuf += iVal;
    dab2:	4405      	add	r5, r0
    dab4:	e61a      	b.n	d6ec <am_util_stdio_vsprintf+0x284>
    while ( i32NumChars-- )
    dab6:	1e63      	subs	r3, r4, #1
        i32Cnt++;
    dab8:	3001      	adds	r0, #1
    while ( i32NumChars-- )
    daba:	2c00      	cmp	r4, #0
    dabc:	d1ea      	bne.n	da94 <am_util_stdio_vsprintf+0x62c>
    dabe:	e7ed      	b.n	da9c <am_util_stdio_vsprintf+0x634>
    else if (iExp2 >= 0)
    dac0:	2a00      	cmp	r2, #0
    dac2:	db36      	blt.n	db32 <am_util_stdio_vsprintf+0x6ca>
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    dac4:	f1a1 087e 	sub.w	r8, r1, #126	; 0x7e
    dac8:	fa00 f808 	lsl.w	r8, r0, r8
        i32IntPart = i32Significand >> (23 - iExp2);
    dacc:	f1c2 0217 	rsb	r2, r2, #23
    if (unFloatValue.I32 < 0)
    dad0:	2b00      	cmp	r3, #0
        i32IntPart = i32Significand >> (23 - iExp2);
    dad2:	fa40 f002 	asr.w	r0, r0, r2
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    dad6:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    if (unFloatValue.I32 < 0)
    dada:	db3a      	blt.n	db52 <am_util_stdio_vsprintf+0x6ea>
    dadc:	462a      	mov	r2, r5
    dade:	e5bb      	b.n	d658 <am_util_stdio_vsprintf+0x1f0>
                if ( iWidth > 0 )
    dae0:	2800      	cmp	r0, #0
    dae2:	dd3b      	ble.n	db5c <am_util_stdio_vsprintf+0x6f4>
        return ui32RetVal;
    dae4:	469e      	mov	lr, r3
    int32_t i32Cnt = 0;
    dae6:	469c      	mov	ip, r3
    while ( i32NumChars-- )
    dae8:	f100 38ff 	add.w	r8, r0, #4294967295
    int32_t i32Cnt = 0;
    daec:	2100      	movs	r1, #0
    daee:	462b      	mov	r3, r5
            *pcBuf++ = cPadChar;
    daf0:	4618      	mov	r0, r3
        if ( pcBuf )
    daf2:	2b00      	cmp	r3, #0
    daf4:	d049      	beq.n	db8a <am_util_stdio_vsprintf+0x722>
            *pcBuf++ = cPadChar;
    daf6:	f800 2b01 	strb.w	r2, [r0], #1
    dafa:	4647      	mov	r7, r8
    dafc:	4603      	mov	r3, r0
        i32Cnt++;
    dafe:	3101      	adds	r1, #1
    while ( i32NumChars-- )
    db00:	f107 38ff 	add.w	r8, r7, #4294967295
    db04:	2f00      	cmp	r7, #0
    db06:	d1f3      	bne.n	daf0 <am_util_stdio_vsprintf+0x688>
                        ui32CharCnt += iWidth;
    db08:	4608      	mov	r0, r1
    db0a:	440e      	add	r6, r1
                while (*pcStr != 0x0)
    db0c:	f89c 1000 	ldrb.w	r1, [ip]
                        ui32CharCnt += iWidth;
    db10:	4663      	mov	r3, ip
                        pcBuf += pcBuf ? iWidth : 0;
    db12:	b105      	cbz	r5, db16 <am_util_stdio_vsprintf+0x6ae>
    db14:	4405      	add	r5, r0
                while (*pcStr != 0x0)
    db16:	2900      	cmp	r1, #0
    db18:	f43f ae60 	beq.w	d7dc <am_util_stdio_vsprintf+0x374>
                        iWidth = 0;
    db1c:	2000      	movs	r0, #0
    db1e:	e62c      	b.n	d77a <am_util_stdio_vsprintf+0x312>
        switch ( *pcFmt )
    db20:	f04f 0e01 	mov.w	lr, #1
    db24:	e6df      	b.n	d8e6 <am_util_stdio_vsprintf+0x47e>
                        iWidth -= ui32strlen;
    db26:	eba0 000e 	sub.w	r0, r0, lr
    if ( i32NumChars <= 0 )
    db2a:	2800      	cmp	r0, #0
    db2c:	dcdb      	bgt.n	dae6 <am_util_stdio_vsprintf+0x67e>
    db2e:	4638      	mov	r0, r7
    db30:	e7ef      	b.n	db12 <am_util_stdio_vsprintf+0x6aa>
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    db32:	43d2      	mvns	r2, r2
    if (unFloatValue.I32 < 0)
    db34:	2b00      	cmp	r3, #0
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    db36:	fa40 f802 	asr.w	r8, r0, r2
        *pcBuf++ = '-';
    db3a:	462b      	mov	r3, r5
    if (unFloatValue.I32 < 0)
    db3c:	da02      	bge.n	db44 <am_util_stdio_vsprintf+0x6dc>
        *pcBuf++ = '-';
    db3e:	222d      	movs	r2, #45	; 0x2d
    db40:	f803 2b01 	strb.w	r2, [r3], #1
        *pcBuf++ = '0';
    db44:	461a      	mov	r2, r3
    db46:	2330      	movs	r3, #48	; 0x30
    db48:	f802 3b01 	strb.w	r3, [r2], #1
    db4c:	e58d      	b.n	d66a <am_util_stdio_vsprintf+0x202>
    i32FracPart = 0;
    db4e:	f04f 0800 	mov.w	r8, #0
        *pcBuf++ = '-';
    db52:	462b      	mov	r3, r5
    db54:	222d      	movs	r2, #45	; 0x2d
    db56:	f803 2b01 	strb.w	r2, [r3], #1
    db5a:	e574      	b.n	d646 <am_util_stdio_vsprintf+0x1de>
    while ( *pcBuf++ )
    db5c:	7819      	ldrb	r1, [r3, #0]
                while (*pcStr != 0x0)
    db5e:	469e      	mov	lr, r3
    db60:	2900      	cmp	r1, #0
    db62:	f47f ae0a 	bne.w	d77a <am_util_stdio_vsprintf+0x312>
    db66:	468e      	mov	lr, r1
                if ( iWidth )
    db68:	2800      	cmp	r0, #0
    db6a:	f43f ae37 	beq.w	d7dc <am_util_stdio_vsprintf+0x374>
    db6e:	e618      	b.n	d7a2 <am_util_stdio_vsprintf+0x33a>
        bLower = bLongLong = false;
    db70:	f04f 0e00 	mov.w	lr, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    db74:	3707      	adds	r7, #7
    db76:	f027 0707 	bic.w	r7, r7, #7
    db7a:	f8d7 c004 	ldr.w	ip, [r7, #4]
    db7e:	f857 0b08 	ldr.w	r0, [r7], #8
    db82:	e6b4      	b.n	d8ee <am_util_stdio_vsprintf+0x486>
        switch ( *pcFmt )
    db84:	f04f 0e01 	mov.w	lr, #1
    db88:	e7f4      	b.n	db74 <am_util_stdio_vsprintf+0x70c>
    while ( i32NumChars-- )
    db8a:	f108 37ff 	add.w	r7, r8, #4294967295
        i32Cnt++;
    db8e:	3101      	adds	r1, #1
    while ( i32NumChars-- )
    db90:	f1b8 0f00 	cmp.w	r8, #0
    db94:	d1b3      	bne.n	dafe <am_util_stdio_vsprintf+0x696>
    db96:	e7b7      	b.n	db08 <am_util_stdio_vsprintf+0x6a0>
    *pcBuf++ = '.';
    db98:	f102 0c01 	add.w	ip, r2, #1
        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    db9c:	ebac 0105 	sub.w	r1, ip, r5
    dba0:	f1c1 0313 	rsb	r3, r1, #19
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    dba4:	454b      	cmp	r3, r9
    dba6:	bfa8      	it	ge
    dba8:	464b      	movge	r3, r9
        for (jx = 0; jx < iMax; jx++)
    dbaa:	2b00      	cmp	r3, #0
    dbac:	f340 80ca 	ble.w	dd44 <am_util_stdio_vsprintf+0x8dc>
    dbb0:	1c58      	adds	r0, r3, #1
    dbb2:	4410      	add	r0, r2
            i32FracPart *= 10;
    dbb4:	eb08 0888 	add.w	r8, r8, r8, lsl #2
            *pcBuf++ = (i32FracPart >> 24) + '0';
    dbb8:	ea4f 51e8 	mov.w	r1, r8, asr #23
    dbbc:	3130      	adds	r1, #48	; 0x30
    dbbe:	f80c 1b01 	strb.w	r1, [ip], #1
            i32FracPart *= 10;
    dbc2:	ea4f 0848 	mov.w	r8, r8, lsl #1
        for (jx = 0; jx < iMax; jx++)
    dbc6:	4560      	cmp	r0, ip
            i32FracPart &= 0x00FFFFFF;
    dbc8:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
        for (jx = 0; jx < iMax; jx++)
    dbcc:	d1f2      	bne.n	dbb4 <am_util_stdio_vsprintf+0x74c>
    dbce:	441a      	add	r2, r3
    return (pcBuf - pcBufInitial);
    dbd0:	1b41      	subs	r1, r0, r5
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    dbd2:	eb08 0888 	add.w	r8, r8, r8, lsl #2
    dbd6:	f348 53c7 	sbfx	r3, r8, #23, #8
    dbda:	2b04      	cmp	r3, #4
    dbdc:	f77f ad4f 	ble.w	d67e <am_util_stdio_vsprintf+0x216>
            while ( pcBuftmp >= pcBufInitial )
    dbe0:	4295      	cmp	r5, r2
    dbe2:	f63f ad4c 	bhi.w	d67e <am_util_stdio_vsprintf+0x216>
    dbe6:	4613      	mov	r3, r2
                    *pcBuftmp = '0';
    dbe8:	f04f 0e30 	mov.w	lr, #48	; 0x30
    dbec:	e004      	b.n	dbf8 <am_util_stdio_vsprintf+0x790>
    dbee:	f883 e001 	strb.w	lr, [r3, #1]
            while ( pcBuftmp >= pcBufInitial )
    dbf2:	429d      	cmp	r5, r3
    dbf4:	f63f ad43 	bhi.w	d67e <am_util_stdio_vsprintf+0x216>
                    *pcBuftmp = '0';
    dbf8:	469c      	mov	ip, r3
                if ( *pcBuftmp == '.' )
    dbfa:	f813 2901 	ldrb.w	r2, [r3], #-1
    dbfe:	2a2e      	cmp	r2, #46	; 0x2e
    dc00:	d0f7      	beq.n	dbf2 <am_util_stdio_vsprintf+0x78a>
                else if ( *pcBuftmp == '9' )
    dc02:	2a39      	cmp	r2, #57	; 0x39
    dc04:	d0f3      	beq.n	dbee <am_util_stdio_vsprintf+0x786>
                    *pcBuftmp += 1;
    dc06:	3201      	adds	r2, #1
    dc08:	f88c 2000 	strb.w	r2, [ip]
                    break;
    dc0c:	e537      	b.n	d67e <am_util_stdio_vsprintf+0x216>
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    dc0e:	1c4b      	adds	r3, r1, #1
    dc10:	f000 8081 	beq.w	dd16 <am_util_stdio_vsprintf+0x8ae>
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    dc14:	3102      	adds	r1, #2
    dc16:	f000 8082 	beq.w	dd1e <am_util_stdio_vsprintf+0x8b6>
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    dc1a:	4b4e      	ldr	r3, [pc, #312]	; (dd54 <am_util_stdio_vsprintf+0x8ec>)
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    dc1c:	602b      	str	r3, [r5, #0]
    dc1e:	2303      	movs	r3, #3
    dc20:	e533      	b.n	d68a <am_util_stdio_vsprintf+0x222>
    int iNDigits = ui64Val ? 0 : 1;
    dc22:	ea59 010a 	orrs.w	r1, r9, sl
    dc26:	bf0c      	ite	eq
    dc28:	f04f 0b01 	moveq.w	fp, #1
    dc2c:	f04f 0b00 	movne.w	fp, #0
    while ( ui64Val )
    dc30:	f000 808a 	beq.w	dd48 <am_util_stdio_vsprintf+0x8e0>
                    bNeg = false;
    dc34:	2300      	movs	r3, #0
    dc36:	9300      	str	r3, [sp, #0]
    dc38:	4648      	mov	r0, r9
    dc3a:	4651      	mov	r1, sl
    dc3c:	9401      	str	r4, [sp, #4]
    dc3e:	465c      	mov	r4, fp
    dc40:	46d3      	mov	fp, sl
    dc42:	46ca      	mov	sl, r9
    dc44:	46a9      	mov	r9, r5
    dc46:	4615      	mov	r5, r2
        ui64Val = divu64_10(ui64Val);
    dc48:	f7ff fb2a 	bl	d2a0 <divu64_10>
    while ( ui64Val )
    dc4c:	ea50 0301 	orrs.w	r3, r0, r1
        ++iNDigits;
    dc50:	f104 0401 	add.w	r4, r4, #1
    while ( ui64Val )
    dc54:	d1f8      	bne.n	dc48 <am_util_stdio_vsprintf+0x7e0>
                    if ( bNeg )
    dc56:	9900      	ldr	r1, [sp, #0]
                    iWidth -= ndigits_in_i64(ui64Val);
    dc58:	462a      	mov	r2, r5
    dc5a:	464d      	mov	r5, r9
    dc5c:	46d1      	mov	r9, sl
    dc5e:	46da      	mov	sl, fp
    dc60:	46a3      	mov	fp, r4
    dc62:	eba8 030b 	sub.w	r3, r8, fp
    dc66:	9c01      	ldr	r4, [sp, #4]
                    if ( bNeg )
    dc68:	b119      	cbz	r1, dc72 <am_util_stdio_vsprintf+0x80a>
                        if ( ui8PadChar == '0' )
    dc6a:	2a30      	cmp	r2, #48	; 0x30
                        --iWidth;
    dc6c:	f103 33ff 	add.w	r3, r3, #4294967295
                        if ( ui8PadChar == '0' )
    dc70:	d062      	beq.n	dd38 <am_util_stdio_vsprintf+0x8d0>
    if ( i32NumChars <= 0 )
    dc72:	2b00      	cmp	r3, #0
    dc74:	dd4d      	ble.n	dd12 <am_util_stdio_vsprintf+0x8aa>
    while ( i32NumChars-- )
    dc76:	3b01      	subs	r3, #1
    int32_t i32Cnt = 0;
    dc78:	4694      	mov	ip, r2
    dc7a:	46a6      	mov	lr, r4
    dc7c:	2000      	movs	r0, #0
    dc7e:	462a      	mov	r2, r5
    dc80:	461c      	mov	r4, r3
            *pcBuf++ = cPadChar;
    dc82:	4611      	mov	r1, r2
        if ( pcBuf )
    dc84:	b1c2      	cbz	r2, dcb8 <am_util_stdio_vsprintf+0x850>
            *pcBuf++ = cPadChar;
    dc86:	f801 cb01 	strb.w	ip, [r1], #1
    dc8a:	4623      	mov	r3, r4
    dc8c:	460a      	mov	r2, r1
        i32Cnt++;
    dc8e:	3001      	adds	r0, #1
    while ( i32NumChars-- )
    dc90:	1e5c      	subs	r4, r3, #1
    dc92:	2b00      	cmp	r3, #0
    dc94:	d1f5      	bne.n	dc82 <am_util_stdio_vsprintf+0x81a>
    dc96:	4674      	mov	r4, lr
    dc98:	4662      	mov	r2, ip
                    ui32CharCnt += iWidth;
    dc9a:	4406      	add	r6, r0
                    pcBuf += pcBuf ? iWidth : 0;
    dc9c:	b365      	cbz	r5, dcf8 <am_util_stdio_vsprintf+0x890>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    dc9e:	9b00      	ldr	r3, [sp, #0]
                    pcBuf += pcBuf ? iWidth : 0;
    dca0:	4405      	add	r5, r0
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    dca2:	b113      	cbz	r3, dcaa <am_util_stdio_vsprintf+0x842>
    dca4:	2a20      	cmp	r2, #32
    dca6:	f43f ae17 	beq.w	d8d8 <am_util_stdio_vsprintf+0x470>
                iVal = uint64_to_str(ui64Val, pcBuf);
    dcaa:	462a      	mov	r2, r5
    dcac:	4648      	mov	r0, r9
    dcae:	4651      	mov	r1, sl
    dcb0:	f7ff fb52 	bl	d358 <uint64_to_str>
                    pcBuf += iVal;
    dcb4:	4405      	add	r5, r0
    dcb6:	e519      	b.n	d6ec <am_util_stdio_vsprintf+0x284>
    while ( i32NumChars-- )
    dcb8:	1e63      	subs	r3, r4, #1
        i32Cnt++;
    dcba:	3001      	adds	r0, #1
    while ( i32NumChars-- )
    dcbc:	2c00      	cmp	r4, #0
    dcbe:	d1e6      	bne.n	dc8e <am_util_stdio_vsprintf+0x826>
    dcc0:	e7e9      	b.n	dc96 <am_util_stdio_vsprintf+0x82e>
    dcc2:	f04f 0800 	mov.w	r8, #0
    dcc6:	e65f      	b.n	d988 <am_util_stdio_vsprintf+0x520>
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    dcc8:	4b23      	ldr	r3, [pc, #140]	; (dd58 <am_util_stdio_vsprintf+0x8f0>)
    dcca:	602b      	str	r3, [r5, #0]
    dccc:	2303      	movs	r3, #3
    dcce:	e4dc      	b.n	d68a <am_util_stdio_vsprintf+0x222>
                    bNeg = true;
    dcd0:	2301      	movs	r3, #1
    dcd2:	9300      	str	r3, [sp, #0]
    int iNDigits = ui64Val ? 0 : 1;
    dcd4:	f04f 0b00 	mov.w	fp, #0
    dcd8:	e7ae      	b.n	dc38 <am_util_stdio_vsprintf+0x7d0>
    uint32_t ui32Val = 0, uCnt = 0;
    dcda:	f04f 0a00 	mov.w	sl, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    dcde:	4653      	mov	r3, sl
    dce0:	e52b      	b.n	d73a <am_util_stdio_vsprintf+0x2d2>
                if ( iWidth > 0 )
    dce2:	2800      	cmp	r0, #0
    dce4:	f77f af3f 	ble.w	db66 <am_util_stdio_vsprintf+0x6fe>
    uint32_t ui32RetVal = 0;
    dce8:	468e      	mov	lr, r1
    dcea:	e6fc      	b.n	dae6 <am_util_stdio_vsprintf+0x67e>
                iVal = uint64_to_str(ui64Val, pcBuf);
    dcec:	462a      	mov	r2, r5
    dcee:	4650      	mov	r0, sl
    dcf0:	4649      	mov	r1, r9
    dcf2:	f7ff fb31 	bl	d358 <uint64_to_str>
                if ( pcBuf )
    dcf6:	e4dd      	b.n	d6b4 <am_util_stdio_vsprintf+0x24c>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    dcf8:	9b00      	ldr	r3, [sp, #0]
    dcfa:	b1b3      	cbz	r3, dd2a <am_util_stdio_vsprintf+0x8c2>
    dcfc:	2a20      	cmp	r2, #32
    dcfe:	f43f adee 	beq.w	d8de <am_util_stdio_vsprintf+0x476>
                iVal = uint64_to_str(ui64Val, pcBuf);
    dd02:	462a      	mov	r2, r5
    dd04:	4648      	mov	r0, r9
    dd06:	4651      	mov	r1, sl
    dd08:	f7ff fb26 	bl	d358 <uint64_to_str>
                if ( pcBuf )
    dd0c:	e4d2      	b.n	d6b4 <am_util_stdio_vsprintf+0x24c>
    dd0e:	2000      	movs	r0, #0
    dd10:	e6c6      	b.n	daa0 <am_util_stdio_vsprintf+0x638>
    dd12:	2000      	movs	r0, #0
    dd14:	e7c2      	b.n	dc9c <am_util_stdio_vsprintf+0x834>
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    dd16:	4b10      	ldr	r3, [pc, #64]	; (dd58 <am_util_stdio_vsprintf+0x8f0>)
    dd18:	e780      	b.n	dc1c <am_util_stdio_vsprintf+0x7b4>
    dd1a:	2000      	movs	r0, #0
    dd1c:	e55c      	b.n	d7d8 <am_util_stdio_vsprintf+0x370>
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    dd1e:	4b0f      	ldr	r3, [pc, #60]	; (dd5c <am_util_stdio_vsprintf+0x8f4>)
    dd20:	e77c      	b.n	dc1c <am_util_stdio_vsprintf+0x7b4>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    dd22:	2300      	movs	r3, #0
        uCnt++;
    dd24:	f04f 0a01 	mov.w	sl, #1
    dd28:	e506      	b.n	d738 <am_util_stdio_vsprintf+0x2d0>
                iVal = uint64_to_str(ui64Val, pcBuf);
    dd2a:	4648      	mov	r0, r9
    dd2c:	4651      	mov	r1, sl
    dd2e:	462a      	mov	r2, r5
    dd30:	f7ff fb12 	bl	d358 <uint64_to_str>
                ui32CharCnt += iVal;
    dd34:	4406      	add	r6, r0
                break;
    dd36:	e4bf      	b.n	d6b8 <am_util_stdio_vsprintf+0x250>
                            if ( pcBuf )
    dd38:	b115      	cbz	r5, dd40 <am_util_stdio_vsprintf+0x8d8>
                                *pcBuf++ = '-';
    dd3a:	212d      	movs	r1, #45	; 0x2d
    dd3c:	f805 1b01 	strb.w	r1, [r5], #1
                            ++ui32CharCnt;
    dd40:	3601      	adds	r6, #1
    dd42:	e796      	b.n	dc72 <am_util_stdio_vsprintf+0x80a>
    *pcBuf++ = '.';
    dd44:	4660      	mov	r0, ip
    dd46:	e744      	b.n	dbd2 <am_util_stdio_vsprintf+0x76a>
                    iWidth -= ndigits_in_i64(ui64Val);
    dd48:	eba8 030b 	sub.w	r3, r8, fp
                    bNeg = false;
    dd4c:	468a      	mov	sl, r1
    dd4e:	9100      	str	r1, [sp, #0]
                    ui64Val = i64Val;
    dd50:	4689      	mov	r9, r1
    dd52:	e78e      	b.n	dc72 <am_util_stdio_vsprintf+0x80a>
    dd54:	003f2e3f 	.word	0x003f2e3f
    dd58:	00302e30 	.word	0x00302e30
    dd5c:	00232e23 	.word	0x00232e23

0000dd60 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    dd60:	b40f      	push	{r0, r1, r2, r3}
    dd62:	b530      	push	{r4, r5, lr}
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    dd64:	4d09      	ldr	r5, [pc, #36]	; (dd8c <am_util_stdio_printf+0x2c>)
    dd66:	682c      	ldr	r4, [r5, #0]
{
    dd68:	b083      	sub	sp, #12
    if (!g_pfnCharPrint)
    dd6a:	b14c      	cbz	r4, dd80 <am_util_stdio_printf+0x20>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    dd6c:	aa07      	add	r2, sp, #28
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    dd6e:	9906      	ldr	r1, [sp, #24]
    dd70:	4807      	ldr	r0, [pc, #28]	; (dd90 <am_util_stdio_printf+0x30>)
    va_start(pArgs, pcFmt);
    dd72:	9201      	str	r2, [sp, #4]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    dd74:	f7ff fb78 	bl	d468 <am_util_stdio_vsprintf>
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    dd78:	682b      	ldr	r3, [r5, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    dd7a:	4604      	mov	r4, r0
    g_pfnCharPrint(g_prfbuf);
    dd7c:	4804      	ldr	r0, [pc, #16]	; (dd90 <am_util_stdio_printf+0x30>)
    dd7e:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
}
    dd80:	4620      	mov	r0, r4
    dd82:	b003      	add	sp, #12
    dd84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    dd88:	b004      	add	sp, #16
    dd8a:	4770      	bx	lr
    dd8c:	10005968 	.word	0x10005968
    dd90:	1000596c 	.word	0x1000596c

0000dd94 <am_util_stdio_terminal_clear>:
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    dd94:	4801      	ldr	r0, [pc, #4]	; (dd9c <am_util_stdio_terminal_clear+0x8>)
    dd96:	f7ff bfe3 	b.w	dd60 <am_util_stdio_printf>
    dd9a:	bf00      	nop
    dd9c:	00011514 	.word	0x00011514

0000dda0 <pfnMSPI_PSRAM_Callback>:
#endif

void pfnMSPI_PSRAM_Callback(void *pCallbackCtxt, uint32_t status)
{
  // Set the DMA complete flag.
  *(volatile bool *)pCallbackCtxt = true;
    dda0:	2301      	movs	r3, #1
    dda2:	7003      	strb	r3, [r0, #0]
}
    dda4:	4770      	bx	lr
    dda6:	bf00      	nop

0000dda8 <am_devices_mspi_psram_aps6404l_reset>:
// Reset the external psram
//
//*****************************************************************************
static uint32_t
am_devices_mspi_psram_aps6404l_reset(void *pMspiHandle)
{
    dda8:	b570      	push	{r4, r5, r6, lr}
    ddaa:	b088      	sub	sp, #32
  Transaction.ui32NumBytes            = ui32NumBytes;
    ddac:	2300      	movs	r3, #0
    ddae:	9302      	str	r3, [sp, #8]
  Transaction.bSendAddr               = bSendAddr;
    ddb0:	f88d 300e 	strb.w	r3, [sp, #14]
  Transaction.ui32DeviceAddr          = ui32Addr;
    ddb4:	9304      	str	r3, [sp, #16]
  Transaction.bTurnaround             = false;
    ddb6:	f8ad 3018 	strh.w	r3, [sp, #24]
  Transaction.pui32Buffer             = pData;
    ddba:	ab01      	add	r3, sp, #4
  Transaction.bScrambling             = false;
    ddbc:	f44f 7680 	mov.w	r6, #256	; 0x100
  Transaction.bSendInstr              = true;
    ddc0:	2401      	movs	r4, #1
  Transaction.pui32Buffer             = pData;
    ddc2:	9307      	str	r3, [sp, #28]
  return am_hal_mspi_blocking_transfer(pMspiHandle,
    ddc4:	4a14      	ldr	r2, [pc, #80]	; (de18 <am_devices_mspi_psram_aps6404l_reset+0x70>)
  Transaction.bScrambling             = false;
    ddc6:	f8ad 600c 	strh.w	r6, [sp, #12]
  Transaction.ui16DeviceInstr         = ui8Instr;
    ddca:	2366      	movs	r3, #102	; 0x66
  return am_hal_mspi_blocking_transfer(pMspiHandle,
    ddcc:	a902      	add	r1, sp, #8
{
    ddce:	4605      	mov	r5, r0
  Transaction.bSendInstr              = true;
    ddd0:	f88d 4014 	strb.w	r4, [sp, #20]
  Transaction.ui16DeviceInstr         = ui8Instr;
    ddd4:	f8ad 3016 	strh.w	r3, [sp, #22]
  return am_hal_mspi_blocking_transfer(pMspiHandle,
    ddd8:	f002 fb3a 	bl	10450 <am_hal_mspi_blocking_transfer>
  uint32_t      ui32PIOBuffer;
  //
  // Send the command sequence to reset the device and return status.
  //
  if (AM_HAL_STATUS_SUCCESS != am_device_command_write(pMspiHandle, AM_DEVICES_MSPI_PSRAM_RESET_ENABLE, false, 0, &ui32PIOBuffer, 0))
    dddc:	b110      	cbz	r0, dde4 <am_devices_mspi_psram_aps6404l_reset+0x3c>
  {
    return AM_DEVICES_MSPI_PSRAM_STATUS_ERROR;
    ddde:	4620      	mov	r0, r4
  if (AM_HAL_STATUS_SUCCESS != am_device_command_write(pMspiHandle, AM_DEVICES_MSPI_PSRAM_RESET_MEMORY, false, 0, &ui32PIOBuffer, 0))
  {
    return AM_DEVICES_MSPI_PSRAM_STATUS_ERROR;
  }
  return AM_DEVICES_MSPI_PSRAM_STATUS_SUCCESS;
}
    dde0:	b008      	add	sp, #32
    dde2:	bd70      	pop	{r4, r5, r6, pc}
  Transaction.bSendAddr               = bSendAddr;
    dde4:	4603      	mov	r3, r0
  Transaction.ui16DeviceInstr         = ui8Instr;
    dde6:	2299      	movs	r2, #153	; 0x99
  Transaction.ui32NumBytes            = ui32NumBytes;
    dde8:	9302      	str	r3, [sp, #8]
  Transaction.bSendAddr               = bSendAddr;
    ddea:	f88d 300e 	strb.w	r3, [sp, #14]
  Transaction.ui32DeviceAddr          = ui32Addr;
    ddee:	9304      	str	r3, [sp, #16]
  Transaction.ui16DeviceInstr         = ui8Instr;
    ddf0:	f8ad 2016 	strh.w	r2, [sp, #22]
  Transaction.bTurnaround             = false;
    ddf4:	f8ad 3018 	strh.w	r3, [sp, #24]
  return am_hal_mspi_blocking_transfer(pMspiHandle,
    ddf8:	4a07      	ldr	r2, [pc, #28]	; (de18 <am_devices_mspi_psram_aps6404l_reset+0x70>)
  Transaction.bScrambling             = false;
    ddfa:	f8ad 600c 	strh.w	r6, [sp, #12]
  Transaction.pui32Buffer             = pData;
    ddfe:	ab01      	add	r3, sp, #4
  return am_hal_mspi_blocking_transfer(pMspiHandle,
    de00:	a902      	add	r1, sp, #8
    de02:	4628      	mov	r0, r5
  Transaction.bSendInstr              = true;
    de04:	f88d 4014 	strb.w	r4, [sp, #20]
  Transaction.pui32Buffer             = pData;
    de08:	9307      	str	r3, [sp, #28]
  return am_hal_mspi_blocking_transfer(pMspiHandle,
    de0a:	f002 fb21 	bl	10450 <am_hal_mspi_blocking_transfer>
  if (AM_HAL_STATUS_SUCCESS != am_device_command_write(pMspiHandle, AM_DEVICES_MSPI_PSRAM_RESET_MEMORY, false, 0, &ui32PIOBuffer, 0))
    de0e:	3800      	subs	r0, #0
    de10:	bf18      	it	ne
    de12:	2001      	movne	r0, #1
}
    de14:	b008      	add	sp, #32
    de16:	bd70      	pop	{r4, r5, r6, pc}
    de18:	000f4240 	.word	0x000f4240

0000de1c <am_devices_mspi_psram_init>:
    am_hal_mspi_dev_config_t    *psMSPISettings0;
    am_hal_mspi_dev_config_t    mspiDevCfg;
    void                        *pMspiHandle;
    uint32_t                    ui32Index = 0;

    if ((ui32Module > AM_REG_MSPI_NUM_MODULES) || (pDevCfg == NULL))
    de1c:	2801      	cmp	r0, #1
    de1e:	d817      	bhi.n	de50 <am_devices_mspi_psram_init+0x34>
{
    de20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    de24:	460c      	mov	r4, r1
    de26:	b093      	sub	sp, #76	; 0x4c
    if ((ui32Module > AM_REG_MSPI_NUM_MODULES) || (pDevCfg == NULL))
    de28:	b171      	cbz	r1, de48 <am_devices_mspi_psram_init+0x2c>
    //
#if defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B)
    am_hal_fault_capture_enable();
#else
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_control(AM_HAL_MCUCTRL_CONTROL_FAULT_CAPTURE_ENABLE, 0);
    de2a:	2100      	movs	r1, #0
#endif

    // Allocate a vacant device handle
    for ( ui32Index = 0; ui32Index < AM_DEVICES_MSPI_PSRAM_MAX_DEVICE_NUM; ui32Index++ )
    {
        if ( gAmPsram[ui32Index].bOccupied == false )
    de2c:	f8df 93f4 	ldr.w	r9, [pc, #1012]	; e224 <am_devices_mspi_psram_init+0x408>
    de30:	4605      	mov	r5, r0
    am_hal_mcuctrl_control(AM_HAL_MCUCTRL_CONTROL_FAULT_CAPTURE_ENABLE, 0);
    de32:	4608      	mov	r0, r1
    de34:	4690      	mov	r8, r2
    de36:	461e      	mov	r6, r3
    de38:	f001 faee 	bl	f418 <am_hal_mcuctrl_control>
        if ( gAmPsram[ui32Index].bOccupied == false )
    de3c:	f899 7010 	ldrb.w	r7, [r9, #16]
    de40:	b14f      	cbz	r7, de56 <am_devices_mspi_psram_init+0x3a>
    de42:	f899 3024 	ldrb.w	r3, [r9, #36]	; 0x24
    de46:	b12b      	cbz	r3, de54 <am_devices_mspi_psram_init+0x38>
    }

    if (AM_HAL_STATUS_SUCCESS != am_hal_mspi_device_configure(pMspiHandle, psMSPISettings1))
    {
        am_util_stdio_printf("Error - Failed to configure MSPI.\n");
        return AM_DEVICES_MSPI_PSRAM_STATUS_ERROR;
    de48:	2001      	movs	r0, #1

    //
    // Return the status.
    //
    return AM_DEVICES_MSPI_PSRAM_STATUS_SUCCESS;
}
    de4a:	b013      	add	sp, #76	; 0x4c
    de4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return AM_DEVICES_MSPI_PSRAM_STATUS_ERROR;
    de50:	2001      	movs	r0, #1
}
    de52:	4770      	bx	lr
    for ( ui32Index = 0; ui32Index < AM_DEVICES_MSPI_PSRAM_MAX_DEVICE_NUM; ui32Index++ )
    de54:	2701      	movs	r7, #1
    switch (pDevCfg->eDeviceConfig)
    de56:	f894 c000 	ldrb.w	ip, [r4]
    de5a:	f1bc 0f11 	cmp.w	ip, #17
    de5e:	d8f3      	bhi.n	de48 <am_devices_mspi_psram_init+0x2c>
    de60:	a301      	add	r3, pc, #4	; (adr r3, de68 <am_devices_mspi_psram_init+0x4c>)
    de62:	f853 f02c 	ldr.w	pc, [r3, ip, lsl #2]
    de66:	bf00      	nop
    de68:	0000df1d 	.word	0x0000df1d
    de6c:	0000df17 	.word	0x0000df17
    de70:	0000de49 	.word	0x0000de49
    de74:	0000de49 	.word	0x0000de49
    de78:	0000df11 	.word	0x0000df11
    de7c:	0000deb1 	.word	0x0000deb1
    de80:	0000de49 	.word	0x0000de49
    de84:	0000de49 	.word	0x0000de49
    de88:	0000de49 	.word	0x0000de49
    de8c:	0000de49 	.word	0x0000de49
    de90:	0000de49 	.word	0x0000de49
    de94:	0000de49 	.word	0x0000de49
    de98:	0000de49 	.word	0x0000de49
    de9c:	0000de49 	.word	0x0000de49
    dea0:	0000de49 	.word	0x0000de49
    dea4:	0000de49 	.word	0x0000de49
    dea8:	0000df11 	.word	0x0000df11
    deac:	0000deb1 	.word	0x0000deb1
            mspiDevCfg = QuadCE1MSPIConfig;
    deb0:	f8df b358 	ldr.w	fp, [pc, #856]	; e20c <am_devices_mspi_psram_init+0x3f0>
    deb4:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
    deb8:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
    debc:	46d6      	mov	lr, sl
    debe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    dec2:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
    dec6:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
    mspiDevCfg.ui32TCBSize = pDevCfg->ui32NBTxnBufLength;
    deca:	68a2      	ldr	r2, [r4, #8]
    mspiDevCfg.eClockFreq = pDevCfg->eClockFreq;
    decc:	7863      	ldrb	r3, [r4, #1]
    mspiDevCfg.ui32TCBSize = pDevCfg->ui32NBTxnBufLength;
    dece:	920e      	str	r2, [sp, #56]	; 0x38
    mspiDevCfg.pTCB = pDevCfg->pNBTxnBuf;
    ded0:	6862      	ldr	r2, [r4, #4]
    ded2:	920f      	str	r2, [sp, #60]	; 0x3c
    mspiDevCfg.scramblingStartAddr = pDevCfg->ui32ScramblingStartAddr;
    ded4:	6922      	ldr	r2, [r4, #16]
    ded6:	9211      	str	r2, [sp, #68]	; 0x44
        if (g_Mspi_SpeedMax[i].MHz == mspiDevCfg.eClockFreq)
    ded8:	2b01      	cmp	r3, #1
    mspiDevCfg.scramblingStartAddr = pDevCfg->ui32ScramblingStartAddr;
    deda:	68e2      	ldr	r2, [r4, #12]
    mspiDevCfg.eDeviceConfig = pDevCfg->eDeviceConfig;
    dedc:	f88d c031 	strb.w	ip, [sp, #49]	; 0x31
    mspiDevCfg.eClockFreq = pDevCfg->eClockFreq;
    dee0:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    mspiDevCfg.scramblingStartAddr = pDevCfg->ui32ScramblingStartAddr;
    dee4:	9210      	str	r2, [sp, #64]	; 0x40
        if (g_Mspi_SpeedMax[i].MHz == mspiDevCfg.eClockFreq)
    dee6:	d01c      	beq.n	df22 <am_devices_mspi_psram_init+0x106>
    dee8:	2b02      	cmp	r3, #2
    deea:	f000 8144 	beq.w	e176 <am_devices_mspi_psram_init+0x35a>
    deee:	2b03      	cmp	r3, #3
    def0:	f000 8148 	beq.w	e184 <am_devices_mspi_psram_init+0x368>
    def4:	2b04      	cmp	r3, #4
    def6:	f000 814c 	beq.w	e192 <am_devices_mspi_psram_init+0x376>
    defa:	2b06      	cmp	r3, #6
    defc:	f000 8155 	beq.w	e1aa <am_devices_mspi_psram_init+0x38e>
    gAmPsram[ui32Index].maxTransSize = 0;
    df00:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    df04:	eb09 0987 	add.w	r9, r9, r7, lsl #2
    df08:	2300      	movs	r3, #0
    df0a:	f8c9 300c 	str.w	r3, [r9, #12]
    df0e:	e79b      	b.n	de48 <am_devices_mspi_psram_init+0x2c>
            mspiDevCfg = QuadCE0MSPIConfig;
    df10:	f8df b2ec 	ldr.w	fp, [pc, #748]	; e200 <am_devices_mspi_psram_init+0x3e4>
    df14:	e7ce      	b.n	deb4 <am_devices_mspi_psram_init+0x98>
            mspiDevCfg = SerialCE1MSPIConfig;
    df16:	f8df b310 	ldr.w	fp, [pc, #784]	; e228 <am_devices_mspi_psram_init+0x40c>
    df1a:	e7cb      	b.n	deb4 <am_devices_mspi_psram_init+0x98>
            mspiDevCfg = SerialCE0MSPIConfig;
    df1c:	f8df b30c 	ldr.w	fp, [pc, #780]	; e22c <am_devices_mspi_psram_init+0x410>
    df20:	e7c8      	b.n	deb4 <am_devices_mspi_psram_init+0x98>
            gAmPsram[ui32Index].maxTransSize = g_Mspi_SpeedMax[i].MaxSize;
    df22:	eb07 0387 	add.w	r3, r7, r7, lsl #2
    df26:	eb09 0383 	add.w	r3, r9, r3, lsl #2
    df2a:	2280      	movs	r2, #128	; 0x80
    df2c:	60da      	str	r2, [r3, #12]
    switch (mspiDevCfg.eDeviceConfig)
    df2e:	f1bc 0f11 	cmp.w	ip, #17
    df32:	d889      	bhi.n	de48 <am_devices_mspi_psram_init+0x2c>
    df34:	a301      	add	r3, pc, #4	; (adr r3, df3c <am_devices_mspi_psram_init+0x120>)
    df36:	f853 f02c 	ldr.w	pc, [r3, ip, lsl #2]
    df3a:	bf00      	nop
    df3c:	0000df85 	.word	0x0000df85
    df40:	0000e111 	.word	0x0000e111
    df44:	0000de49 	.word	0x0000de49
    df48:	0000de49 	.word	0x0000de49
    df4c:	0000df85 	.word	0x0000df85
    df50:	0000e111 	.word	0x0000e111
    df54:	0000de49 	.word	0x0000de49
    df58:	0000de49 	.word	0x0000de49
    df5c:	0000de49 	.word	0x0000de49
    df60:	0000de49 	.word	0x0000de49
    df64:	0000de49 	.word	0x0000de49
    df68:	0000de49 	.word	0x0000de49
    df6c:	0000de49 	.word	0x0000de49
    df70:	0000de49 	.word	0x0000de49
    df74:	0000de49 	.word	0x0000de49
    df78:	0000de49 	.word	0x0000de49
    df7c:	0000df85 	.word	0x0000df85
    df80:	0000e111 	.word	0x0000e111
    df84:	4c9e      	ldr	r4, [pc, #632]	; (e200 <am_devices_mspi_psram_init+0x3e4>)
    df86:	f8df b2a4 	ldr.w	fp, [pc, #676]	; e22c <am_devices_mspi_psram_init+0x410>
    psMSPISettings0->eDeviceConfig = pDevCfg->eDeviceConfig;
    df8a:	f884 c005 	strb.w	ip, [r4, #5]
    if (AM_HAL_STATUS_SUCCESS != am_hal_mspi_initialize(ui32Module, &pMspiHandle))
    df8e:	a902      	add	r1, sp, #8
    df90:	4628      	mov	r0, r5
    df92:	f001 fdd7 	bl	fb44 <am_hal_mspi_initialize>
    df96:	4602      	mov	r2, r0
    df98:	2800      	cmp	r0, #0
    df9a:	f040 80bd 	bne.w	e118 <am_devices_mspi_psram_init+0x2fc>
    if (AM_HAL_STATUS_SUCCESS != am_hal_mspi_power_control(pMspiHandle, AM_HAL_SYSCTRL_WAKE, false))
    df9e:	9802      	ldr	r0, [sp, #8]
    dfa0:	4611      	mov	r1, r2
    dfa2:	f002 fbf9 	bl	10798 <am_hal_mspi_power_control>
    dfa6:	2800      	cmp	r0, #0
    dfa8:	f040 80bb 	bne.w	e122 <am_devices_mspi_psram_init+0x306>
    if (AM_HAL_STATUS_SUCCESS != am_hal_mspi_device_configure(pMspiHandle, psMSPISettings0))
    dfac:	9802      	ldr	r0, [sp, #8]
    dfae:	4621      	mov	r1, r4
    dfb0:	f001 fe1a 	bl	fbe8 <am_hal_mspi_device_configure>
    dfb4:	2800      	cmp	r0, #0
    dfb6:	f040 80b9 	bne.w	e12c <am_devices_mspi_psram_init+0x310>
    if (AM_HAL_STATUS_SUCCESS != am_hal_mspi_enable(pMspiHandle))
    dfba:	9802      	ldr	r0, [sp, #8]
    dfbc:	f001 fed4 	bl	fd68 <am_hal_mspi_enable>
    dfc0:	2800      	cmp	r0, #0
    dfc2:	f040 80ed 	bne.w	e1a0 <am_devices_mspi_psram_init+0x384>
    am_bsp_mspi_pins_enable(ui32Module, psMSPISettings0->eDeviceConfig);
    dfc6:	7961      	ldrb	r1, [r4, #5]
    dfc8:	4628      	mov	r0, r5
    dfca:	f000 fae7 	bl	e59c <am_bsp_mspi_pins_enable>
    am_util_delay_us(150);
    dfce:	2096      	movs	r0, #150	; 0x96
    dfd0:	f7ff f8de 	bl	d190 <am_util_delay_us>
    if (AM_HAL_STATUS_SUCCESS != am_devices_mspi_psram_aps6404l_reset(pMspiHandle))
    dfd4:	9802      	ldr	r0, [sp, #8]
    dfd6:	f7ff fee7 	bl	dda8 <am_devices_mspi_psram_aps6404l_reset>
    dfda:	2800      	cmp	r0, #0
    dfdc:	f47f af34 	bne.w	de48 <am_devices_mspi_psram_init+0x2c>
    switch (mspiDevCfg.eDeviceConfig)
    dfe0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    dfe4:	2b05      	cmp	r3, #5
    dfe6:	f200 80a6 	bhi.w	e136 <am_devices_mspi_psram_init+0x31a>
    dfea:	2b03      	cmp	r3, #3
    dfec:	f200 80a7 	bhi.w	e13e <am_devices_mspi_psram_init+0x322>
    dff0:	2b01      	cmp	r3, #1
    dff2:	f63f af29 	bhi.w	de48 <am_devices_mspi_psram_init+0x2c>
    ui32Status = am_hal_mspi_disable(pMspiHandle);
    dff6:	9802      	ldr	r0, [sp, #8]
    dff8:	f001 fdc2 	bl	fb80 <am_hal_mspi_disable>
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    dffc:	2800      	cmp	r0, #0
    dffe:	f47f af23 	bne.w	de48 <am_devices_mspi_psram_init+0x2c>
    if (AM_HAL_STATUS_SUCCESS != am_hal_mspi_device_configure(pMspiHandle, psMSPISettings1))
    e002:	9802      	ldr	r0, [sp, #8]
    e004:	4659      	mov	r1, fp
    e006:	f001 fdef 	bl	fbe8 <am_hal_mspi_device_configure>
    e00a:	2800      	cmp	r0, #0
    e00c:	f040 80d4 	bne.w	e1b8 <am_devices_mspi_psram_init+0x39c>
    if (AM_HAL_STATUS_SUCCESS != am_hal_mspi_enable(pMspiHandle))
    e010:	9802      	ldr	r0, [sp, #8]
    e012:	f001 fea9 	bl	fd68 <am_hal_mspi_enable>
    e016:	2800      	cmp	r0, #0
    e018:	f040 80c2 	bne.w	e1a0 <am_devices_mspi_psram_init+0x384>
    am_util_delay_us(150);
    e01c:	2096      	movs	r0, #150	; 0x96
    e01e:	f7ff f8b7 	bl	d190 <am_util_delay_us>
    if (AM_HAL_STATUS_SUCCESS != am_devices_mspi_psram_aps6404l_reset(pMspiHandle))
    e022:	9802      	ldr	r0, [sp, #8]
    e024:	f7ff fec0 	bl	dda8 <am_devices_mspi_psram_aps6404l_reset>
    e028:	2800      	cmp	r0, #0
    e02a:	f47f af0d 	bne.w	de48 <am_devices_mspi_psram_init+0x2c>
  uint32_t aui32Rawdata[2] = {0};
    e02e:	ab03      	add	r3, sp, #12
  Transaction.pui32Buffer             = pData;
    e030:	930a      	str	r3, [sp, #40]	; 0x28
  Transaction.ui32NumBytes            = ui32NumBytes;
    e032:	2305      	movs	r3, #5
    e034:	9305      	str	r3, [sp, #20]
  Transaction.bSendInstr              = true;
    e036:	2301      	movs	r3, #1
  return am_hal_mspi_blocking_transfer(pMspiHandle,
    e038:	4a72      	ldr	r2, [pc, #456]	; (e204 <am_devices_mspi_psram_init+0x3e8>)
  uint32_t aui32Rawdata[2] = {0};
    e03a:	9003      	str	r0, [sp, #12]
  Transaction.bScrambling             = false;
    e03c:	f8ad 0018 	strh.w	r0, [sp, #24]
  Transaction.bSendAddr               = bSendAddr;
    e040:	f88d 001a 	strb.w	r0, [sp, #26]
  Transaction.ui32DeviceAddr          = ui32Addr;
    e044:	9007      	str	r0, [sp, #28]
  Transaction.bTurnaround             = false;
    e046:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
  uint32_t aui32Rawdata[2] = {0};
    e04a:	9004      	str	r0, [sp, #16]
  return am_hal_mspi_blocking_transfer(pMspiHandle,
    e04c:	a905      	add	r1, sp, #20
  Transaction.bSendInstr              = true;
    e04e:	f88d 3020 	strb.w	r3, [sp, #32]
  return am_hal_mspi_blocking_transfer(pMspiHandle,
    e052:	9802      	ldr	r0, [sp, #8]
  Transaction.ui16DeviceInstr         = ui8Instr;
    e054:	239f      	movs	r3, #159	; 0x9f
    e056:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
  return am_hal_mspi_blocking_transfer(pMspiHandle,
    e05a:	f002 f9f9 	bl	10450 <am_hal_mspi_blocking_transfer>
  ui32DeviceID = ((aui32Rawdata[0] & 0xFF000000) >> 24) | ((aui32Rawdata[1] & 0xFF) << 8);
    e05e:	9b04      	ldr	r3, [sp, #16]
    e060:	021c      	lsls	r4, r3, #8
    e062:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e066:	b2a4      	uxth	r4, r4
    e068:	431c      	orrs	r4, r3
  return am_hal_mspi_blocking_transfer(pMspiHandle,
    e06a:	4683      	mov	fp, r0
  am_util_stdio_printf("PSRAM ID is 0x%x\n", ui32DeviceID);
    e06c:	4621      	mov	r1, r4
    e06e:	4866      	ldr	r0, [pc, #408]	; (e208 <am_devices_mspi_psram_init+0x3ec>)
    e070:	f7ff fe76 	bl	dd60 <am_util_stdio_printf>
  if ((AM_DEVICES_MSPI_PSRAM_KGD_PASS == ui32DeviceID) &&
    e074:	f645 530d 	movw	r3, #23821	; 0x5d0d
    e078:	429c      	cmp	r4, r3
    e07a:	f47f aee5 	bne.w	de48 <am_devices_mspi_psram_init+0x2c>
    e07e:	f1bb 0f00 	cmp.w	fp, #0
    e082:	f47f aee1 	bne.w	de48 <am_devices_mspi_psram_init+0x2c>
    switch (mspiDevCfg.eDeviceConfig)
    e086:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    e08a:	2b05      	cmp	r3, #5
    e08c:	f200 8098 	bhi.w	e1c0 <am_devices_mspi_psram_init+0x3a4>
    e090:	2b03      	cmp	r3, #3
    e092:	f200 8099 	bhi.w	e1c8 <am_devices_mspi_psram_init+0x3ac>
    e096:	2b01      	cmp	r3, #1
    e098:	f63f aed6 	bhi.w	de48 <am_devices_mspi_psram_init+0x2c>
    ui32Status = am_hal_mspi_disable(pMspiHandle);
    e09c:	9802      	ldr	r0, [sp, #8]
    e09e:	f001 fd6f 	bl	fb80 <am_hal_mspi_disable>
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    e0a2:	2800      	cmp	r0, #0
    e0a4:	f47f aed0 	bne.w	de48 <am_devices_mspi_psram_init+0x2c>
    ui32Status = am_hal_mspi_device_configure(pMspiHandle, &mspiDevCfg);
    e0a8:	9802      	ldr	r0, [sp, #8]
    e0aa:	4651      	mov	r1, sl
    e0ac:	f001 fd9c 	bl	fbe8 <am_hal_mspi_device_configure>
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    e0b0:	2800      	cmp	r0, #0
    e0b2:	f47f aec9 	bne.w	de48 <am_devices_mspi_psram_init+0x2c>
    ui32Status = am_hal_mspi_enable(pMspiHandle);
    e0b6:	9802      	ldr	r0, [sp, #8]
    e0b8:	f001 fe56 	bl	fd68 <am_hal_mspi_enable>
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    e0bc:	2800      	cmp	r0, #0
    e0be:	f47f aec3 	bne.w	de48 <am_devices_mspi_psram_init+0x2c>
    am_bsp_mspi_pins_enable(ui32Module, mspiDevCfg.eDeviceConfig);
    e0c2:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
    e0c6:	4628      	mov	r0, r5
    e0c8:	f000 fa68 	bl	e59c <am_bsp_mspi_pins_enable>
    ui32Status = am_hal_mspi_interrupt_clear(pMspiHandle, AM_HAL_MSPI_INT_CQUPD | AM_HAL_MSPI_INT_ERR );
    e0cc:	9802      	ldr	r0, [sp, #8]
    e0ce:	f44f 51d4 	mov.w	r1, #6784	; 0x1a80
    e0d2:	f002 fb4f 	bl	10774 <am_hal_mspi_interrupt_clear>
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    e0d6:	2800      	cmp	r0, #0
    e0d8:	f47f aeb6 	bne.w	de48 <am_devices_mspi_psram_init+0x2c>
    ui32Status = am_hal_mspi_interrupt_enable(pMspiHandle, AM_HAL_MSPI_INT_CQUPD | AM_HAL_MSPI_INT_ERR );
    e0dc:	9802      	ldr	r0, [sp, #8]
    e0de:	f44f 51d4 	mov.w	r1, #6784	; 0x1a80
    e0e2:	f002 fb31 	bl	10748 <am_hal_mspi_interrupt_enable>
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    e0e6:	2800      	cmp	r0, #0
    e0e8:	f47f aeae 	bne.w	de48 <am_devices_mspi_psram_init+0x2c>
    gAmPsram[ui32Index].bOccupied = true;
    e0ec:	2314      	movs	r3, #20
    e0ee:	fb03 f707 	mul.w	r7, r3, r7
    e0f2:	eb09 0307 	add.w	r3, r9, r7
    *ppMspiHandle = gAmPsram[ui32Index].pMspiHandle = pMspiHandle;
    e0f6:	9a02      	ldr	r2, [sp, #8]
    gAmPsram[ui32Index].bOccupied = true;
    e0f8:	2101      	movs	r1, #1
    e0fa:	7419      	strb	r1, [r3, #16]
    *ppHandle = (void *)&gAmPsram[ui32Index];
    e0fc:	f8c8 3000 	str.w	r3, [r8]
    *ppMspiHandle = gAmPsram[ui32Index].pMspiHandle = pMspiHandle;
    e100:	605a      	str	r2, [r3, #4]
    e102:	6032      	str	r2, [r6, #0]
    gAmPsram[ui32Index].eDeviceConfig = mspiDevCfg.eDeviceConfig;
    e104:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    gAmPsram[ui32Index].ui32Module = ui32Module;
    e108:	f849 5007 	str.w	r5, [r9, r7]
    gAmPsram[ui32Index].eDeviceConfig = mspiDevCfg.eDeviceConfig;
    e10c:	721a      	strb	r2, [r3, #8]
    return AM_DEVICES_MSPI_PSRAM_STATUS_SUCCESS;
    e10e:	e69c      	b.n	de4a <am_devices_mspi_psram_init+0x2e>
            psMSPISettings0 = &QuadCE1MSPIConfig;
    e110:	4c3e      	ldr	r4, [pc, #248]	; (e20c <am_devices_mspi_psram_init+0x3f0>)
            psMSPISettings1 = &SerialCE1MSPIConfig;
    e112:	f8df b114 	ldr.w	fp, [pc, #276]	; e228 <am_devices_mspi_psram_init+0x40c>
    e116:	e738      	b.n	df8a <am_devices_mspi_psram_init+0x16e>
        am_util_stdio_printf("Error - Failed to initialize MSPI.\n");
    e118:	483d      	ldr	r0, [pc, #244]	; (e210 <am_devices_mspi_psram_init+0x3f4>)
    e11a:	f7ff fe21 	bl	dd60 <am_util_stdio_printf>
        return AM_DEVICES_MSPI_PSRAM_STATUS_ERROR;
    e11e:	2001      	movs	r0, #1
    e120:	e693      	b.n	de4a <am_devices_mspi_psram_init+0x2e>
        am_util_stdio_printf("Error - Failed to power on MSPI.\n");
    e122:	483c      	ldr	r0, [pc, #240]	; (e214 <am_devices_mspi_psram_init+0x3f8>)
    e124:	f7ff fe1c 	bl	dd60 <am_util_stdio_printf>
        return AM_DEVICES_MSPI_PSRAM_STATUS_ERROR;
    e128:	2001      	movs	r0, #1
    e12a:	e68e      	b.n	de4a <am_devices_mspi_psram_init+0x2e>
        am_util_stdio_printf("Error - Failed to configure MSPI device.\n");
    e12c:	483a      	ldr	r0, [pc, #232]	; (e218 <am_devices_mspi_psram_init+0x3fc>)
    e12e:	f7ff fe17 	bl	dd60 <am_util_stdio_printf>
        return AM_DEVICES_MSPI_PSRAM_STATUS_ERROR;
    e132:	2001      	movs	r0, #1
    e134:	e689      	b.n	de4a <am_devices_mspi_psram_init+0x2e>
    switch (mspiDevCfg.eDeviceConfig)
    e136:	3b10      	subs	r3, #16
    e138:	2b01      	cmp	r3, #1
    e13a:	f63f ae85 	bhi.w	de48 <am_devices_mspi_psram_init+0x2c>
  Transaction.ui32NumBytes            = ui32NumBytes;
    e13e:	2300      	movs	r3, #0
    e140:	9305      	str	r3, [sp, #20]
  Transaction.bSendAddr               = bSendAddr;
    e142:	f88d 301a 	strb.w	r3, [sp, #26]
  Transaction.ui32DeviceAddr          = ui32Addr;
    e146:	9307      	str	r3, [sp, #28]
  Transaction.bTurnaround             = false;
    e148:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  Transaction.bScrambling             = false;
    e14c:	f44f 7380 	mov.w	r3, #256	; 0x100
    e150:	f8ad 3018 	strh.w	r3, [sp, #24]
  Transaction.bSendInstr              = true;
    e154:	2301      	movs	r3, #1
    e156:	f88d 3020 	strb.w	r3, [sp, #32]
  Transaction.ui16DeviceInstr         = ui8Instr;
    e15a:	23f5      	movs	r3, #245	; 0xf5
    e15c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
  return am_hal_mspi_blocking_transfer(pMspiHandle,
    e160:	4a28      	ldr	r2, [pc, #160]	; (e204 <am_devices_mspi_psram_init+0x3e8>)
    e162:	9802      	ldr	r0, [sp, #8]
  Transaction.pui32Buffer             = pData;
    e164:	ab01      	add	r3, sp, #4
  return am_hal_mspi_blocking_transfer(pMspiHandle,
    e166:	a905      	add	r1, sp, #20
  Transaction.pui32Buffer             = pData;
    e168:	930a      	str	r3, [sp, #40]	; 0x28
  return am_hal_mspi_blocking_transfer(pMspiHandle,
    e16a:	f002 f971 	bl	10450 <am_hal_mspi_blocking_transfer>
            if (AM_HAL_STATUS_SUCCESS != ui32Status)
    e16e:	2800      	cmp	r0, #0
    e170:	f43f af41 	beq.w	dff6 <am_devices_mspi_psram_init+0x1da>
    e174:	e668      	b.n	de48 <am_devices_mspi_psram_init+0x2c>
            gAmPsram[ui32Index].maxTransSize = g_Mspi_SpeedMax[i].MaxSize;
    e176:	eb07 0387 	add.w	r3, r7, r7, lsl #2
    e17a:	eb09 0383 	add.w	r3, r9, r3, lsl #2
    e17e:	2240      	movs	r2, #64	; 0x40
    e180:	60da      	str	r2, [r3, #12]
    if ( 0 == gAmPsram[ui32Index].maxTransSize ) // Return an error if Max Transaction size not found.
    e182:	e6d4      	b.n	df2e <am_devices_mspi_psram_init+0x112>
            gAmPsram[ui32Index].maxTransSize = g_Mspi_SpeedMax[i].MaxSize;
    e184:	eb07 0387 	add.w	r3, r7, r7, lsl #2
    e188:	eb09 0383 	add.w	r3, r9, r3, lsl #2
    e18c:	2220      	movs	r2, #32
    e18e:	60da      	str	r2, [r3, #12]
    if ( 0 == gAmPsram[ui32Index].maxTransSize ) // Return an error if Max Transaction size not found.
    e190:	e6cd      	b.n	df2e <am_devices_mspi_psram_init+0x112>
            gAmPsram[ui32Index].maxTransSize = g_Mspi_SpeedMax[i].MaxSize;
    e192:	eb07 0387 	add.w	r3, r7, r7, lsl #2
    e196:	eb09 0383 	add.w	r3, r9, r3, lsl #2
    e19a:	2210      	movs	r2, #16
    e19c:	60da      	str	r2, [r3, #12]
    if ( 0 == gAmPsram[ui32Index].maxTransSize ) // Return an error if Max Transaction size not found.
    e19e:	e6c6      	b.n	df2e <am_devices_mspi_psram_init+0x112>
        am_util_stdio_printf("Error - Failed to enable MSPI.\n");
    e1a0:	481e      	ldr	r0, [pc, #120]	; (e21c <am_devices_mspi_psram_init+0x400>)
    e1a2:	f7ff fddd 	bl	dd60 <am_util_stdio_printf>
        return AM_DEVICES_MSPI_PSRAM_STATUS_ERROR;
    e1a6:	2001      	movs	r0, #1
    e1a8:	e64f      	b.n	de4a <am_devices_mspi_psram_init+0x2e>
            gAmPsram[ui32Index].maxTransSize = g_Mspi_SpeedMax[i].MaxSize;
    e1aa:	eb07 0387 	add.w	r3, r7, r7, lsl #2
    e1ae:	eb09 0383 	add.w	r3, r9, r3, lsl #2
    e1b2:	2208      	movs	r2, #8
    e1b4:	60da      	str	r2, [r3, #12]
    if ( 0 == gAmPsram[ui32Index].maxTransSize ) // Return an error if Max Transaction size not found.
    e1b6:	e6ba      	b.n	df2e <am_devices_mspi_psram_init+0x112>
        am_util_stdio_printf("Error - Failed to configure MSPI.\n");
    e1b8:	4819      	ldr	r0, [pc, #100]	; (e220 <am_devices_mspi_psram_init+0x404>)
    e1ba:	f7ff fdd1 	bl	dd60 <am_util_stdio_printf>
    e1be:	e643      	b.n	de48 <am_devices_mspi_psram_init+0x2c>
    switch (mspiDevCfg.eDeviceConfig)
    e1c0:	3b10      	subs	r3, #16
    e1c2:	2b01      	cmp	r3, #1
    e1c4:	f63f ae40 	bhi.w	de48 <am_devices_mspi_psram_init+0x2c>
  Transaction.ui32NumBytes            = ui32NumBytes;
    e1c8:	2300      	movs	r3, #0
    e1ca:	9305      	str	r3, [sp, #20]
  Transaction.bSendAddr               = bSendAddr;
    e1cc:	f88d 301a 	strb.w	r3, [sp, #26]
  Transaction.ui32DeviceAddr          = ui32Addr;
    e1d0:	9307      	str	r3, [sp, #28]
  Transaction.bTurnaround             = false;
    e1d2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  Transaction.bScrambling             = false;
    e1d6:	f44f 7380 	mov.w	r3, #256	; 0x100
    e1da:	f8ad 3018 	strh.w	r3, [sp, #24]
  Transaction.bSendInstr              = true;
    e1de:	2301      	movs	r3, #1
    e1e0:	f88d 3020 	strb.w	r3, [sp, #32]
  Transaction.ui16DeviceInstr         = ui8Instr;
    e1e4:	2335      	movs	r3, #53	; 0x35
    e1e6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
  return am_hal_mspi_blocking_transfer(pMspiHandle,
    e1ea:	4a06      	ldr	r2, [pc, #24]	; (e204 <am_devices_mspi_psram_init+0x3e8>)
    e1ec:	9802      	ldr	r0, [sp, #8]
  Transaction.pui32Buffer             = pData;
    e1ee:	ab01      	add	r3, sp, #4
  return am_hal_mspi_blocking_transfer(pMspiHandle,
    e1f0:	a905      	add	r1, sp, #20
  Transaction.pui32Buffer             = pData;
    e1f2:	930a      	str	r3, [sp, #40]	; 0x28
  return am_hal_mspi_blocking_transfer(pMspiHandle,
    e1f4:	f002 f92c 	bl	10450 <am_hal_mspi_blocking_transfer>
            if (AM_HAL_STATUS_SUCCESS != ui32Status)
    e1f8:	2800      	cmp	r0, #0
    e1fa:	f43f af4f 	beq.w	e09c <am_devices_mspi_psram_init+0x280>
    e1fe:	e623      	b.n	de48 <am_devices_mspi_psram_init+0x2c>
    e200:	10001078 	.word	0x10001078
    e204:	000f4240 	.word	0x000f4240
    e208:	000115e0 	.word	0x000115e0
    e20c:	10001094 	.word	0x10001094
    e210:	00011528 	.word	0x00011528
    e214:	0001154c 	.word	0x0001154c
    e218:	00011570 	.word	0x00011570
    e21c:	0001159c 	.word	0x0001159c
    e220:	000115bc 	.word	0x000115bc
    e224:	10005a6c 	.word	0x10005a6c
    e228:	100010cc 	.word	0x100010cc
    e22c:	100010b0 	.word	0x100010b0

0000e230 <am_devices_mspi_psram_read>:
am_devices_mspi_psram_read(void *pHandle,
                           uint8_t *pui8RxBuffer,
                           uint32_t ui32ReadAddress,
                           uint32_t ui32NumBytes,
                           bool bWaitForCompletion)
{
    e230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e234:	b08b      	sub	sp, #44	; 0x2c
    e236:	4607      	mov	r7, r0
    e238:	f89d 9050 	ldrb.w	r9, [sp, #80]	; 0x50
    e23c:	460e      	mov	r6, r1
    e23e:	4615      	mov	r5, r2
    e240:	461c      	mov	r4, r3
  uint32_t                      ui32Status;
  am_devices_mspi_psram_t *pPsram = (am_devices_mspi_psram_t *)pHandle;

  if (bWaitForCompletion)
    e242:	f1b9 0f00 	cmp.w	r9, #0
    e246:	d03b      	beq.n	e2c0 <am_devices_mspi_psram_read+0x90>
  Transaction.ui8Priority = 1;
    e248:	2301      	movs	r3, #1
  {
    // Start the transaction.
    volatile bool bDMAComplete = false;
    e24a:	f04f 0a00 	mov.w	sl, #0
  Transaction.ui8Priority = 1;
    e24e:	f8ad 3011 	strh.w	r3, [sp, #17]
  Transaction.ui32PauseCondition = ui32PauseCondition;
    e252:	2200      	movs	r2, #0
    e254:	2300      	movs	r3, #0
    e256:	e9cd 2308 	strd	r2, r3, [sp, #32]
    volatile bool bDMAComplete = false;
    e25a:	f88d a00f 	strb.w	sl, [sp, #15]
  while (ui32NumBytes)
    e25e:	2c00      	cmp	r4, #0
    e260:	d063      	beq.n	e32a <am_devices_mspi_psram_read+0xfa>
      ui32Status = am_hal_mspi_nonblocking_transfer(pPsram->pMspiHandle, &Transaction, AM_HAL_MSPI_TRANS_DMA,
    e262:	f8df b0f8 	ldr.w	fp, [pc, #248]	; e35c <am_devices_mspi_psram_read+0x12c>
    e266:	f10d 0810 	add.w	r8, sp, #16
    e26a:	e012      	b.n	e292 <am_devices_mspi_psram_read+0x62>
    e26c:	6878      	ldr	r0, [r7, #4]
      Transaction.ui32StatusSetClr = ui32StatusSetClr;
    e26e:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
      ui32Status = am_hal_mspi_nonblocking_transfer(pPsram->pMspiHandle, &Transaction, AM_HAL_MSPI_TRANS_DMA,
    e272:	465b      	mov	r3, fp
    e274:	f10d 010f 	add.w	r1, sp, #15
    e278:	9100      	str	r1, [sp, #0]
    e27a:	2201      	movs	r2, #1
    e27c:	4641      	mov	r1, r8
    e27e:	f002 f9bd 	bl	105fc <am_hal_mspi_nonblocking_transfer>
    ui32Address += size;
    e282:	444d      	add	r5, r9
    pui8Buffer += size;
    e284:	444e      	add	r6, r9
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    e286:	2800      	cmp	r0, #0
    e288:	d14b      	bne.n	e322 <am_devices_mspi_psram_read+0xf2>
  while (ui32NumBytes)
    e28a:	ebb4 0409 	subs.w	r4, r4, r9
    Transaction.ui32PauseCondition = 0;
    e28e:	9008      	str	r0, [sp, #32]
  while (ui32NumBytes)
    e290:	d04b      	beq.n	e32a <am_devices_mspi_psram_read+0xfa>
    uint32_t limit = (maxSize > pPsram->maxTransSize) ? pPsram->maxTransSize : maxSize;
    e292:	68fa      	ldr	r2, [r7, #12]
    uint32_t maxSize = AM_DEVICES_MSPI_PSRAM_PAGE_SIZE - (ui32Address & (AM_DEVICES_MSPI_PSRAM_PAGE_SIZE - 1));
    e294:	f3c5 0309 	ubfx	r3, r5, #0, #10
    e298:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
    uint32_t limit = (maxSize > pPsram->maxTransSize) ? pPsram->maxTransSize : maxSize;
    e29c:	4293      	cmp	r3, r2
    e29e:	bf28      	it	cs
    e2a0:	4613      	movcs	r3, r2
    uint32_t size = (ui32NumBytes > limit) ? limit : ui32NumBytes;
    e2a2:	42a3      	cmp	r3, r4
    e2a4:	4699      	mov	r9, r3
    e2a6:	bf28      	it	cs
    e2a8:	46a1      	movcs	r9, r4
    if (bLast)
    e2aa:	42a3      	cmp	r3, r4
    Transaction.ui32SRAMAddress = (uint32_t)pui8Buffer;
    e2ac:	e9cd 5606 	strd	r5, r6, [sp, #24]
    Transaction.ui32TransferCount = size;
    e2b0:	f8cd 9014 	str.w	r9, [sp, #20]
      ui32Status = am_hal_mspi_nonblocking_transfer(pPsram->pMspiHandle, &Transaction, AM_HAL_MSPI_TRANS_DMA,
    e2b4:	f04f 0300 	mov.w	r3, #0
    if (bLast)
    e2b8:	d2d8      	bcs.n	e26c <am_devices_mspi_psram_read+0x3c>
      ui32Status = am_hal_mspi_nonblocking_transfer(pPsram->pMspiHandle, &Transaction, AM_HAL_MSPI_TRANS_DMA,
    e2ba:	6878      	ldr	r0, [r7, #4]
    e2bc:	4619      	mov	r1, r3
    e2be:	e7db      	b.n	e278 <am_devices_mspi_psram_read+0x48>
  Transaction.ui8Priority = 1;
    e2c0:	2301      	movs	r3, #1
    e2c2:	f8ad 3011 	strh.w	r3, [sp, #17]
  Transaction.ui32PauseCondition = ui32PauseCondition;
    e2c6:	2200      	movs	r2, #0
    e2c8:	2300      	movs	r3, #0
    e2ca:	e9cd 2308 	strd	r2, r3, [sp, #32]
  while (ui32NumBytes)
    e2ce:	2c00      	cmp	r4, #0
    e2d0:	d03d      	beq.n	e34e <am_devices_mspi_psram_read+0x11e>
    e2d2:	f10d 0810 	add.w	r8, sp, #16
    e2d6:	e003      	b.n	e2e0 <am_devices_mspi_psram_read+0xb0>
    e2d8:	ebb4 040a 	subs.w	r4, r4, sl
    Transaction.ui32PauseCondition = 0;
    e2dc:	9008      	str	r0, [sp, #32]
  while (ui32NumBytes)
    e2de:	d036      	beq.n	e34e <am_devices_mspi_psram_read+0x11e>
    uint32_t limit = (maxSize > pPsram->maxTransSize) ? pPsram->maxTransSize : maxSize;
    e2e0:	68fb      	ldr	r3, [r7, #12]
      ui32Status = am_hal_mspi_nonblocking_transfer(pPsram->pMspiHandle, &Transaction, AM_HAL_MSPI_TRANS_DMA,
    e2e2:	6878      	ldr	r0, [r7, #4]
    e2e4:	f8cd 9000 	str.w	r9, [sp]
    uint32_t maxSize = AM_DEVICES_MSPI_PSRAM_PAGE_SIZE - (ui32Address & (AM_DEVICES_MSPI_PSRAM_PAGE_SIZE - 1));
    e2e8:	f3c5 0c09 	ubfx	ip, r5, #0, #10
    e2ec:	f5cc 6c80 	rsb	ip, ip, #1024	; 0x400
    uint32_t limit = (maxSize > pPsram->maxTransSize) ? pPsram->maxTransSize : maxSize;
    e2f0:	459c      	cmp	ip, r3
    e2f2:	bf28      	it	cs
    e2f4:	469c      	movcs	ip, r3
    uint32_t size = (ui32NumBytes > limit) ? limit : ui32NumBytes;
    e2f6:	45a4      	cmp	ip, r4
    e2f8:	46e2      	mov	sl, ip
      ui32Status = am_hal_mspi_nonblocking_transfer(pPsram->pMspiHandle, &Transaction, AM_HAL_MSPI_TRANS_DMA,
    e2fa:	f04f 0300 	mov.w	r3, #0
    uint32_t size = (ui32NumBytes > limit) ? limit : ui32NumBytes;
    e2fe:	bf28      	it	cs
    e300:	46a2      	movcs	sl, r4
      ui32Status = am_hal_mspi_nonblocking_transfer(pPsram->pMspiHandle, &Transaction, AM_HAL_MSPI_TRANS_DMA,
    e302:	2201      	movs	r2, #1
    if (bLast)
    e304:	45a4      	cmp	ip, r4
      ui32Status = am_hal_mspi_nonblocking_transfer(pPsram->pMspiHandle, &Transaction, AM_HAL_MSPI_TRANS_DMA,
    e306:	4641      	mov	r1, r8
    Transaction.ui32SRAMAddress = (uint32_t)pui8Buffer;
    e308:	e9cd 5606 	strd	r5, r6, [sp, #24]
      Transaction.ui32StatusSetClr = ui32StatusSetClr;
    e30c:	bf28      	it	cs
    e30e:	f8cd 9024 	strcs.w	r9, [sp, #36]	; 0x24
    Transaction.ui32TransferCount = size;
    e312:	f8cd a014 	str.w	sl, [sp, #20]
    ui32Address += size;
    e316:	4455      	add	r5, sl
    pui8Buffer += size;
    e318:	4456      	add	r6, sl
      ui32Status = am_hal_mspi_nonblocking_transfer(pPsram->pMspiHandle, &Transaction, AM_HAL_MSPI_TRANS_DMA,
    e31a:	f002 f96f 	bl	105fc <am_hal_mspi_nonblocking_transfer>
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    e31e:	2800      	cmp	r0, #0
    e320:	d0da      	beq.n	e2d8 <am_devices_mspi_psram_read+0xa8>
                                            0,
                                            NULL,
                                            NULL);
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    {
      return AM_DEVICES_MSPI_PSRAM_STATUS_ERROR;
    e322:	2001      	movs	r0, #1
  }
  //
  // Return the status.
  //
  return AM_DEVICES_MSPI_PSRAM_STATUS_SUCCESS;
}
    e324:	b00b      	add	sp, #44	; 0x2c
    e326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (uint32_t i = 0; i < AM_DEVICES_MSPI_PSRAM_TIMEOUT; i++)
    e32a:	4c0b      	ldr	r4, [pc, #44]	; (e358 <am_devices_mspi_psram_read+0x128>)
    e32c:	e003      	b.n	e336 <am_devices_mspi_psram_read+0x106>
      am_hal_flash_delay( FLASH_CYCLES_US(1) );
    e32e:	f000 fe61 	bl	eff4 <am_hal_flash_delay>
    for (uint32_t i = 0; i < AM_DEVICES_MSPI_PSRAM_TIMEOUT; i++)
    e332:	3c01      	subs	r4, #1
    e334:	d004      	beq.n	e340 <am_devices_mspi_psram_read+0x110>
      if (bDMAComplete)
    e336:	f89d 300f 	ldrb.w	r3, [sp, #15]
      am_hal_flash_delay( FLASH_CYCLES_US(1) );
    e33a:	2010      	movs	r0, #16
      if (bDMAComplete)
    e33c:	2b00      	cmp	r3, #0
    e33e:	d0f6      	beq.n	e32e <am_devices_mspi_psram_read+0xfe>
    if (!bDMAComplete)
    e340:	f89d 000f 	ldrb.w	r0, [sp, #15]
      return AM_DEVICES_MSPI_PSRAM_STATUS_ERROR;
    e344:	f080 0001 	eor.w	r0, r0, #1
}
    e348:	b00b      	add	sp, #44	; 0x2c
    e34a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return AM_DEVICES_MSPI_PSRAM_STATUS_SUCCESS;
    e34e:	2000      	movs	r0, #0
}
    e350:	b00b      	add	sp, #44	; 0x2c
    e352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e356:	bf00      	nop
    e358:	000f4240 	.word	0x000f4240
    e35c:	0000dda1 	.word	0x0000dda1

0000e360 <am_devices_mspi_psram_write>:
am_devices_mspi_psram_write(void *pHandle,
                            uint8_t *pui8TxBuffer,
                            uint32_t ui32WriteAddress,
                            uint32_t ui32NumBytes,
                            bool bWaitForCompletion)
{
    e360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e364:	b08b      	sub	sp, #44	; 0x2c
    e366:	4607      	mov	r7, r0
    e368:	f89d 9050 	ldrb.w	r9, [sp, #80]	; 0x50
    e36c:	460e      	mov	r6, r1
    e36e:	4615      	mov	r5, r2
    e370:	461c      	mov	r4, r3
  uint32_t                      ui32Status;
  am_devices_mspi_psram_t *pPsram = (am_devices_mspi_psram_t *)pHandle;

  if (bWaitForCompletion)
    e372:	f1b9 0f00 	cmp.w	r9, #0
    e376:	d03c      	beq.n	e3f2 <am_devices_mspi_psram_write+0x92>
  Transaction.ui8Priority = 1;
    e378:	f240 1301 	movw	r3, #257	; 0x101
  {
    // Start the transaction.
    volatile bool bDMAComplete = false;
    e37c:	f04f 0a00 	mov.w	sl, #0
  Transaction.ui8Priority = 1;
    e380:	f8ad 3011 	strh.w	r3, [sp, #17]
  Transaction.ui32PauseCondition = ui32PauseCondition;
    e384:	2200      	movs	r2, #0
    e386:	2300      	movs	r3, #0
    e388:	e9cd 2308 	strd	r2, r3, [sp, #32]
    volatile bool bDMAComplete = false;
    e38c:	f88d a00f 	strb.w	sl, [sp, #15]
  while (ui32NumBytes)
    e390:	2c00      	cmp	r4, #0
    e392:	d064      	beq.n	e45e <am_devices_mspi_psram_write+0xfe>
      ui32Status = am_hal_mspi_nonblocking_transfer(pPsram->pMspiHandle, &Transaction, AM_HAL_MSPI_TRANS_DMA,
    e394:	f8df b0f8 	ldr.w	fp, [pc, #248]	; e490 <am_devices_mspi_psram_write+0x130>
    e398:	f10d 0810 	add.w	r8, sp, #16
    e39c:	e012      	b.n	e3c4 <am_devices_mspi_psram_write+0x64>
    e39e:	6878      	ldr	r0, [r7, #4]
      Transaction.ui32StatusSetClr = ui32StatusSetClr;
    e3a0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
      ui32Status = am_hal_mspi_nonblocking_transfer(pPsram->pMspiHandle, &Transaction, AM_HAL_MSPI_TRANS_DMA,
    e3a4:	465b      	mov	r3, fp
    e3a6:	f10d 010f 	add.w	r1, sp, #15
    e3aa:	9100      	str	r1, [sp, #0]
    e3ac:	2201      	movs	r2, #1
    e3ae:	4641      	mov	r1, r8
    e3b0:	f002 f924 	bl	105fc <am_hal_mspi_nonblocking_transfer>
    ui32Address += size;
    e3b4:	444d      	add	r5, r9
    pui8Buffer += size;
    e3b6:	444e      	add	r6, r9
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    e3b8:	2800      	cmp	r0, #0
    e3ba:	d14c      	bne.n	e456 <am_devices_mspi_psram_write+0xf6>
  while (ui32NumBytes)
    e3bc:	ebb4 0409 	subs.w	r4, r4, r9
    Transaction.ui32PauseCondition = 0;
    e3c0:	9008      	str	r0, [sp, #32]
  while (ui32NumBytes)
    e3c2:	d04c      	beq.n	e45e <am_devices_mspi_psram_write+0xfe>
    uint32_t limit = (maxSize > pPsram->maxTransSize) ? pPsram->maxTransSize : maxSize;
    e3c4:	68fa      	ldr	r2, [r7, #12]
    uint32_t maxSize = AM_DEVICES_MSPI_PSRAM_PAGE_SIZE - (ui32Address & (AM_DEVICES_MSPI_PSRAM_PAGE_SIZE - 1));
    e3c6:	f3c5 0309 	ubfx	r3, r5, #0, #10
    e3ca:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
    uint32_t limit = (maxSize > pPsram->maxTransSize) ? pPsram->maxTransSize : maxSize;
    e3ce:	4293      	cmp	r3, r2
    e3d0:	bf28      	it	cs
    e3d2:	4613      	movcs	r3, r2
    uint32_t size = (ui32NumBytes > limit) ? limit : ui32NumBytes;
    e3d4:	42a3      	cmp	r3, r4
    e3d6:	4699      	mov	r9, r3
    e3d8:	bf28      	it	cs
    e3da:	46a1      	movcs	r9, r4
    if (bLast)
    e3dc:	42a3      	cmp	r3, r4
    Transaction.ui32SRAMAddress = (uint32_t)pui8Buffer;
    e3de:	e9cd 5606 	strd	r5, r6, [sp, #24]
    Transaction.ui32TransferCount = size;
    e3e2:	f8cd 9014 	str.w	r9, [sp, #20]
      ui32Status = am_hal_mspi_nonblocking_transfer(pPsram->pMspiHandle, &Transaction, AM_HAL_MSPI_TRANS_DMA,
    e3e6:	f04f 0300 	mov.w	r3, #0
    if (bLast)
    e3ea:	d2d8      	bcs.n	e39e <am_devices_mspi_psram_write+0x3e>
      ui32Status = am_hal_mspi_nonblocking_transfer(pPsram->pMspiHandle, &Transaction, AM_HAL_MSPI_TRANS_DMA,
    e3ec:	6878      	ldr	r0, [r7, #4]
    e3ee:	4619      	mov	r1, r3
    e3f0:	e7db      	b.n	e3aa <am_devices_mspi_psram_write+0x4a>
  Transaction.ui8Priority = 1;
    e3f2:	f240 1301 	movw	r3, #257	; 0x101
    e3f6:	f8ad 3011 	strh.w	r3, [sp, #17]
  Transaction.ui32PauseCondition = ui32PauseCondition;
    e3fa:	2200      	movs	r2, #0
    e3fc:	2300      	movs	r3, #0
    e3fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
  while (ui32NumBytes)
    e402:	2c00      	cmp	r4, #0
    e404:	d03d      	beq.n	e482 <am_devices_mspi_psram_write+0x122>
    e406:	f10d 0810 	add.w	r8, sp, #16
    e40a:	e003      	b.n	e414 <am_devices_mspi_psram_write+0xb4>
    e40c:	ebb4 040a 	subs.w	r4, r4, sl
    Transaction.ui32PauseCondition = 0;
    e410:	9008      	str	r0, [sp, #32]
  while (ui32NumBytes)
    e412:	d036      	beq.n	e482 <am_devices_mspi_psram_write+0x122>
    uint32_t limit = (maxSize > pPsram->maxTransSize) ? pPsram->maxTransSize : maxSize;
    e414:	68fb      	ldr	r3, [r7, #12]
      ui32Status = am_hal_mspi_nonblocking_transfer(pPsram->pMspiHandle, &Transaction, AM_HAL_MSPI_TRANS_DMA,
    e416:	6878      	ldr	r0, [r7, #4]
    e418:	f8cd 9000 	str.w	r9, [sp]
    uint32_t maxSize = AM_DEVICES_MSPI_PSRAM_PAGE_SIZE - (ui32Address & (AM_DEVICES_MSPI_PSRAM_PAGE_SIZE - 1));
    e41c:	f3c5 0c09 	ubfx	ip, r5, #0, #10
    e420:	f5cc 6c80 	rsb	ip, ip, #1024	; 0x400
    uint32_t limit = (maxSize > pPsram->maxTransSize) ? pPsram->maxTransSize : maxSize;
    e424:	459c      	cmp	ip, r3
    e426:	bf28      	it	cs
    e428:	469c      	movcs	ip, r3
    uint32_t size = (ui32NumBytes > limit) ? limit : ui32NumBytes;
    e42a:	45a4      	cmp	ip, r4
    e42c:	46e2      	mov	sl, ip
      ui32Status = am_hal_mspi_nonblocking_transfer(pPsram->pMspiHandle, &Transaction, AM_HAL_MSPI_TRANS_DMA,
    e42e:	f04f 0300 	mov.w	r3, #0
    uint32_t size = (ui32NumBytes > limit) ? limit : ui32NumBytes;
    e432:	bf28      	it	cs
    e434:	46a2      	movcs	sl, r4
      ui32Status = am_hal_mspi_nonblocking_transfer(pPsram->pMspiHandle, &Transaction, AM_HAL_MSPI_TRANS_DMA,
    e436:	2201      	movs	r2, #1
    if (bLast)
    e438:	45a4      	cmp	ip, r4
      ui32Status = am_hal_mspi_nonblocking_transfer(pPsram->pMspiHandle, &Transaction, AM_HAL_MSPI_TRANS_DMA,
    e43a:	4641      	mov	r1, r8
    Transaction.ui32SRAMAddress = (uint32_t)pui8Buffer;
    e43c:	e9cd 5606 	strd	r5, r6, [sp, #24]
      Transaction.ui32StatusSetClr = ui32StatusSetClr;
    e440:	bf28      	it	cs
    e442:	f8cd 9024 	strcs.w	r9, [sp, #36]	; 0x24
    Transaction.ui32TransferCount = size;
    e446:	f8cd a014 	str.w	sl, [sp, #20]
    ui32Address += size;
    e44a:	4455      	add	r5, sl
    pui8Buffer += size;
    e44c:	4456      	add	r6, sl
      ui32Status = am_hal_mspi_nonblocking_transfer(pPsram->pMspiHandle, &Transaction, AM_HAL_MSPI_TRANS_DMA,
    e44e:	f002 f8d5 	bl	105fc <am_hal_mspi_nonblocking_transfer>
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    e452:	2800      	cmp	r0, #0
    e454:	d0da      	beq.n	e40c <am_devices_mspi_psram_write+0xac>
                                            0,
                                            NULL,
                                            NULL);
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    {
      return AM_DEVICES_MSPI_PSRAM_STATUS_ERROR;
    e456:	2001      	movs	r0, #1

  //
  // Return the status.
  //
  return AM_DEVICES_MSPI_PSRAM_STATUS_SUCCESS;
}
    e458:	b00b      	add	sp, #44	; 0x2c
    e45a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (uint32_t i = 0; i < AM_DEVICES_MSPI_PSRAM_TIMEOUT; i++)
    e45e:	4c0b      	ldr	r4, [pc, #44]	; (e48c <am_devices_mspi_psram_write+0x12c>)
    e460:	e003      	b.n	e46a <am_devices_mspi_psram_write+0x10a>
      am_hal_flash_delay( FLASH_CYCLES_US(1) );
    e462:	f000 fdc7 	bl	eff4 <am_hal_flash_delay>
    for (uint32_t i = 0; i < AM_DEVICES_MSPI_PSRAM_TIMEOUT; i++)
    e466:	3c01      	subs	r4, #1
    e468:	d004      	beq.n	e474 <am_devices_mspi_psram_write+0x114>
      if (bDMAComplete)
    e46a:	f89d 300f 	ldrb.w	r3, [sp, #15]
      am_hal_flash_delay( FLASH_CYCLES_US(1) );
    e46e:	2010      	movs	r0, #16
      if (bDMAComplete)
    e470:	2b00      	cmp	r3, #0
    e472:	d0f6      	beq.n	e462 <am_devices_mspi_psram_write+0x102>
    if (!bDMAComplete)
    e474:	f89d 000f 	ldrb.w	r0, [sp, #15]
      return AM_DEVICES_MSPI_PSRAM_STATUS_ERROR;
    e478:	f080 0001 	eor.w	r0, r0, #1
}
    e47c:	b00b      	add	sp, #44	; 0x2c
    e47e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return AM_DEVICES_MSPI_PSRAM_STATUS_SUCCESS;
    e482:	2000      	movs	r0, #0
}
    e484:	b00b      	add	sp, #44	; 0x2c
    e486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e48a:	bf00      	nop
    e48c:	000f4240 	.word	0x000f4240
    e490:	0000dda1 	.word	0x0000dda1

0000e494 <am_devices_mspi_psram_enable_xip>:
//! @return 32-bit status
//
//*****************************************************************************
uint32_t
am_devices_mspi_psram_enable_xip(void *pHandle)
{
    e494:	b508      	push	{r3, lr}
  // Enable XIP on the MSPI.
  //
#if defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B)
  ui32Status = am_hal_mspi_control(pPsram->pMspiHandle, AM_HAL_MSPI_REQ_XIP_EN, &gXipConfig[pPsram->ui32Module]);
#else
  ui32Status = am_hal_mspi_control(pPsram->pMspiHandle, AM_HAL_MSPI_REQ_XIP_EN, NULL);
    e496:	2200      	movs	r2, #0
    e498:	2107      	movs	r1, #7
    e49a:	6840      	ldr	r0, [r0, #4]
    e49c:	f001 fcb2 	bl	fe04 <am_hal_mspi_control>
  {
    return AM_DEVICES_MSPI_PSRAM_STATUS_ERROR;
  }

  return AM_DEVICES_MSPI_PSRAM_STATUS_SUCCESS;
}
    e4a0:	3800      	subs	r0, #0
    e4a2:	bf18      	it	ne
    e4a4:	2001      	movne	r0, #1
    e4a6:	bd08      	pop	{r3, pc}

0000e4a8 <NMI_Handler>:
NMI_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    e4a8:	e7fe      	b.n	e4a8 <NMI_Handler>
    e4aa:	bf00      	nop

0000e4ac <BusFault_Handler>:
HardFault_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    e4ac:	e7fe      	b.n	e4ac <BusFault_Handler>
    e4ae:	bf00      	nop

0000e4b0 <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    e4b0:	e7fe      	b.n	e4b0 <DebugMon_Handler>
    e4b2:	bf00      	nop

0000e4b4 <Reset_Handler>:
    __asm("    ldr    r0, =0xE000ED08\n"
    e4b4:	4811      	ldr	r0, [pc, #68]	; (e4fc <zero_loop+0x12>)
    e4b6:	4912      	ldr	r1, [pc, #72]	; (e500 <zero_loop+0x16>)
    e4b8:	6001      	str	r1, [r0, #0]
    __asm("    ldr    sp, [r1]");
    e4ba:	f8d1 d000 	ldr.w	sp, [r1]
    __asm("ldr  r0, =0xE000ED88\n"
    e4be:	4811      	ldr	r0, [pc, #68]	; (e504 <zero_loop+0x1a>)
    e4c0:	6801      	ldr	r1, [r0, #0]
    e4c2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    e4c6:	6001      	str	r1, [r0, #0]
    e4c8:	f3bf 8f4f 	dsb	sy
    e4cc:	f3bf 8f6f 	isb	sy
    __asm("    ldr     r0, =_init_data\n"
    e4d0:	480d      	ldr	r0, [pc, #52]	; (e508 <zero_loop+0x1e>)
    e4d2:	490e      	ldr	r1, [pc, #56]	; (e50c <zero_loop+0x22>)
    e4d4:	4a0e      	ldr	r2, [pc, #56]	; (e510 <zero_loop+0x26>)

0000e4d6 <copy_loop>:
    e4d6:	f850 3b04 	ldr.w	r3, [r0], #4
    e4da:	f841 3b04 	str.w	r3, [r1], #4
    e4de:	4291      	cmp	r1, r2
    e4e0:	dbf9      	blt.n	e4d6 <copy_loop>
    __asm("    ldr     r0, =_sbss\n"
    e4e2:	480c      	ldr	r0, [pc, #48]	; (e514 <zero_loop+0x2a>)
    e4e4:	490c      	ldr	r1, [pc, #48]	; (e518 <zero_loop+0x2e>)
    e4e6:	f04f 0200 	mov.w	r2, #0

0000e4ea <zero_loop>:
    e4ea:	4288      	cmp	r0, r1
    e4ec:	bfb8      	it	lt
    e4ee:	f840 2b04 	strlt.w	r2, [r0], #4
    e4f2:	dbfa      	blt.n	e4ea <zero_loop>
    main();
    e4f4:	f7fe fca8 	bl	ce48 <main>
    __asm("    bkpt     ");
    e4f8:	be00      	bkpt	0x0000
}
    e4fa:	0000      	.short	0x0000
    e4fc:	e000ed08 	.word	0xe000ed08
    e500:	0000c000 	.word	0x0000c000
    e504:	e000ed88 	.word	0xe000ed88
    e508:	00011a70 	.word	0x00011a70
    e50c:	10001000 	.word	0x10001000
    e510:	1000112c 	.word	0x1000112c
    e514:	10001130 	.word	0x10001130
    e518:	1000651c 	.word	0x1000651c

0000e51c <am_bsp_low_power_init>:
    e51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e51e:	f002 fa63 	bl	109e8 <am_hal_pwrctrl_low_power_init>
    e522:	f002 fb3f 	bl	10ba4 <am_hal_rtc_osc_disable>
    e526:	4b0b      	ldr	r3, [pc, #44]	; (e554 <am_bsp_low_power_init+0x38>)
    e528:	4f0b      	ldr	r7, [pc, #44]	; (e558 <am_bsp_low_power_init+0x3c>)
    e52a:	681e      	ldr	r6, [r3, #0]
    e52c:	2400      	movs	r4, #0
    e52e:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    e532:	4631      	mov	r1, r6
    e534:	4628      	mov	r0, r5
    e536:	f000 fdad 	bl	f094 <am_hal_gpio_pinconfig>
    e53a:	2103      	movs	r1, #3
    e53c:	4628      	mov	r0, r5
    e53e:	f000 fedf 	bl	f300 <am_hal_gpio_state_write>
    e542:	3401      	adds	r4, #1
    e544:	2100      	movs	r1, #0
    e546:	4628      	mov	r0, r5
    e548:	f000 feda 	bl	f300 <am_hal_gpio_state_write>
    e54c:	2c05      	cmp	r4, #5
    e54e:	d1ee      	bne.n	e52e <am_bsp_low_power_init+0x12>
    e550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e552:	bf00      	nop
    e554:	00011688 	.word	0x00011688
    e558:	100010e8 	.word	0x100010e8

0000e55c <am_bsp_itm_printf_enable>:
    e55c:	b500      	push	{lr}
    e55e:	4b0b      	ldr	r3, [pc, #44]	; (e58c <am_bsp_itm_printf_enable+0x30>)
    e560:	b087      	sub	sp, #28
    e562:	2201      	movs	r2, #1
    e564:	601a      	str	r2, [r3, #0]
    e566:	f000 ff1b 	bl	f3a0 <am_hal_itm_enable>
    e56a:	4b09      	ldr	r3, [pc, #36]	; (e590 <am_bsp_itm_printf_enable+0x34>)
    e56c:	9301      	str	r3, [sp, #4]
    e56e:	a801      	add	r0, sp, #4
    e570:	f002 fb22 	bl	10bb8 <am_hal_tpiu_enable>
    e574:	4b07      	ldr	r3, [pc, #28]	; (e594 <am_bsp_itm_printf_enable+0x38>)
    e576:	2029      	movs	r0, #41	; 0x29
    e578:	6819      	ldr	r1, [r3, #0]
    e57a:	f000 fd8b 	bl	f094 <am_hal_gpio_pinconfig>
    e57e:	4806      	ldr	r0, [pc, #24]	; (e598 <am_bsp_itm_printf_enable+0x3c>)
    e580:	f7fe ff6c 	bl	d45c <am_util_stdio_printf_init>
    e584:	b007      	add	sp, #28
    e586:	f85d fb04 	ldr.w	pc, [sp], #4
    e58a:	bf00      	nop
    e58c:	10005a94 	.word	0x10005a94
    e590:	000f4240 	.word	0x000f4240
    e594:	000115f4 	.word	0x000115f4
    e598:	0000f3e9 	.word	0x0000f3e9

0000e59c <am_bsp_mspi_pins_enable>:
    e59c:	b100      	cbz	r0, e5a0 <am_bsp_mspi_pins_enable+0x4>
    e59e:	4770      	bx	lr
    e5a0:	b508      	push	{r3, lr}
    e5a2:	2913      	cmp	r1, #19
    e5a4:	d80b      	bhi.n	e5be <am_bsp_mspi_pins_enable+0x22>
    e5a6:	e8df f001 	tbb	[pc, r1]
    e5aa:	0b21      	.short	0x0b21
    e5ac:	2e450b21 	.word	0x2e450b21
    e5b0:	5c5c6178 	.word	0x5c5c6178
    e5b4:	0b210b21 	.word	0x0b210b21
    e5b8:	2e452e45 	.word	0x2e452e45
    e5bc:	0b21      	.short	0x0b21
    e5be:	bd08      	pop	{r3, pc}
    e5c0:	4b37      	ldr	r3, [pc, #220]	; (e6a0 <am_bsp_mspi_pins_enable+0x104>)
    e5c2:	2029      	movs	r0, #41	; 0x29
    e5c4:	6819      	ldr	r1, [r3, #0]
    e5c6:	f000 fd65 	bl	f094 <am_hal_gpio_pinconfig>
    e5ca:	4b36      	ldr	r3, [pc, #216]	; (e6a4 <am_bsp_mspi_pins_enable+0x108>)
    e5cc:	2000      	movs	r0, #0
    e5ce:	6819      	ldr	r1, [r3, #0]
    e5d0:	f000 fd60 	bl	f094 <am_hal_gpio_pinconfig>
    e5d4:	4b34      	ldr	r3, [pc, #208]	; (e6a8 <am_bsp_mspi_pins_enable+0x10c>)
    e5d6:	2001      	movs	r0, #1
    e5d8:	6819      	ldr	r1, [r3, #0]
    e5da:	f000 fd5b 	bl	f094 <am_hal_gpio_pinconfig>
    e5de:	4b33      	ldr	r3, [pc, #204]	; (e6ac <am_bsp_mspi_pins_enable+0x110>)
    e5e0:	2018      	movs	r0, #24
    e5e2:	6819      	ldr	r1, [r3, #0]
    e5e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    e5e8:	f000 bd54 	b.w	f094 <am_hal_gpio_pinconfig>
    e5ec:	4b30      	ldr	r3, [pc, #192]	; (e6b0 <am_bsp_mspi_pins_enable+0x114>)
    e5ee:	2013      	movs	r0, #19
    e5f0:	6819      	ldr	r1, [r3, #0]
    e5f2:	f000 fd4f 	bl	f094 <am_hal_gpio_pinconfig>
    e5f6:	4b2f      	ldr	r3, [pc, #188]	; (e6b4 <am_bsp_mspi_pins_enable+0x118>)
    e5f8:	2016      	movs	r0, #22
    e5fa:	6819      	ldr	r1, [r3, #0]
    e5fc:	f000 fd4a 	bl	f094 <am_hal_gpio_pinconfig>
    e600:	4b2d      	ldr	r3, [pc, #180]	; (e6b8 <am_bsp_mspi_pins_enable+0x11c>)
    e602:	201a      	movs	r0, #26
    e604:	e7e8      	b.n	e5d8 <am_bsp_mspi_pins_enable+0x3c>
    e606:	4b26      	ldr	r3, [pc, #152]	; (e6a0 <am_bsp_mspi_pins_enable+0x104>)
    e608:	2029      	movs	r0, #41	; 0x29
    e60a:	6819      	ldr	r1, [r3, #0]
    e60c:	f000 fd42 	bl	f094 <am_hal_gpio_pinconfig>
    e610:	4b24      	ldr	r3, [pc, #144]	; (e6a4 <am_bsp_mspi_pins_enable+0x108>)
    e612:	2000      	movs	r0, #0
    e614:	6819      	ldr	r1, [r3, #0]
    e616:	f000 fd3d 	bl	f094 <am_hal_gpio_pinconfig>
    e61a:	4b23      	ldr	r3, [pc, #140]	; (e6a8 <am_bsp_mspi_pins_enable+0x10c>)
    e61c:	2001      	movs	r0, #1
    e61e:	6819      	ldr	r1, [r3, #0]
    e620:	f000 fd38 	bl	f094 <am_hal_gpio_pinconfig>
    e624:	4b25      	ldr	r3, [pc, #148]	; (e6bc <am_bsp_mspi_pins_enable+0x120>)
    e626:	2002      	movs	r0, #2
    e628:	6819      	ldr	r1, [r3, #0]
    e62a:	f000 fd33 	bl	f094 <am_hal_gpio_pinconfig>
    e62e:	4b24      	ldr	r3, [pc, #144]	; (e6c0 <am_bsp_mspi_pins_enable+0x124>)
    e630:	2003      	movs	r0, #3
    e632:	e7d1      	b.n	e5d8 <am_bsp_mspi_pins_enable+0x3c>
    e634:	4b1e      	ldr	r3, [pc, #120]	; (e6b0 <am_bsp_mspi_pins_enable+0x114>)
    e636:	2013      	movs	r0, #19
    e638:	6819      	ldr	r1, [r3, #0]
    e63a:	f000 fd2b 	bl	f094 <am_hal_gpio_pinconfig>
    e63e:	4b1d      	ldr	r3, [pc, #116]	; (e6b4 <am_bsp_mspi_pins_enable+0x118>)
    e640:	2016      	movs	r0, #22
    e642:	6819      	ldr	r1, [r3, #0]
    e644:	f000 fd26 	bl	f094 <am_hal_gpio_pinconfig>
    e648:	4b1b      	ldr	r3, [pc, #108]	; (e6b8 <am_bsp_mspi_pins_enable+0x11c>)
    e64a:	201a      	movs	r0, #26
    e64c:	6819      	ldr	r1, [r3, #0]
    e64e:	f000 fd21 	bl	f094 <am_hal_gpio_pinconfig>
    e652:	4b1c      	ldr	r3, [pc, #112]	; (e6c4 <am_bsp_mspi_pins_enable+0x128>)
    e654:	2004      	movs	r0, #4
    e656:	6819      	ldr	r1, [r3, #0]
    e658:	f000 fd1c 	bl	f094 <am_hal_gpio_pinconfig>
    e65c:	4b1a      	ldr	r3, [pc, #104]	; (e6c8 <am_bsp_mspi_pins_enable+0x12c>)
    e65e:	2017      	movs	r0, #23
    e660:	e7ba      	b.n	e5d8 <am_bsp_mspi_pins_enable+0x3c>
    e662:	4b13      	ldr	r3, [pc, #76]	; (e6b0 <am_bsp_mspi_pins_enable+0x114>)
    e664:	2013      	movs	r0, #19
    e666:	6819      	ldr	r1, [r3, #0]
    e668:	f000 fd14 	bl	f094 <am_hal_gpio_pinconfig>
    e66c:	4b0c      	ldr	r3, [pc, #48]	; (e6a0 <am_bsp_mspi_pins_enable+0x104>)
    e66e:	2029      	movs	r0, #41	; 0x29
    e670:	6819      	ldr	r1, [r3, #0]
    e672:	f000 fd0f 	bl	f094 <am_hal_gpio_pinconfig>
    e676:	4b0f      	ldr	r3, [pc, #60]	; (e6b4 <am_bsp_mspi_pins_enable+0x118>)
    e678:	2016      	movs	r0, #22
    e67a:	6819      	ldr	r1, [r3, #0]
    e67c:	f000 fd0a 	bl	f094 <am_hal_gpio_pinconfig>
    e680:	4b0d      	ldr	r3, [pc, #52]	; (e6b8 <am_bsp_mspi_pins_enable+0x11c>)
    e682:	201a      	movs	r0, #26
    e684:	6819      	ldr	r1, [r3, #0]
    e686:	f000 fd05 	bl	f094 <am_hal_gpio_pinconfig>
    e68a:	4b0e      	ldr	r3, [pc, #56]	; (e6c4 <am_bsp_mspi_pins_enable+0x128>)
    e68c:	2004      	movs	r0, #4
    e68e:	6819      	ldr	r1, [r3, #0]
    e690:	f000 fd00 	bl	f094 <am_hal_gpio_pinconfig>
    e694:	4b0c      	ldr	r3, [pc, #48]	; (e6c8 <am_bsp_mspi_pins_enable+0x12c>)
    e696:	2017      	movs	r0, #23
    e698:	e7b7      	b.n	e60a <am_bsp_mspi_pins_enable+0x6e>
    e69a:	4b05      	ldr	r3, [pc, #20]	; (e6b0 <am_bsp_mspi_pins_enable+0x114>)
    e69c:	2013      	movs	r0, #19
    e69e:	e7e7      	b.n	e670 <am_bsp_mspi_pins_enable+0xd4>
    e6a0:	000115fc 	.word	0x000115fc
    e6a4:	00011610 	.word	0x00011610
    e6a8:	00011614 	.word	0x00011614
    e6ac:	00011620 	.word	0x00011620
    e6b0:	000115f8 	.word	0x000115f8
    e6b4:	00011600 	.word	0x00011600
    e6b8:	00011604 	.word	0x00011604
    e6bc:	00011618 	.word	0x00011618
    e6c0:	0001161c 	.word	0x0001161c
    e6c4:	00011608 	.word	0x00011608
    e6c8:	0001160c 	.word	0x0001160c

0000e6cc <am_hal_cachectrl_config>:
    e6cc:	b530      	push	{r4, r5, lr}
    e6ce:	b083      	sub	sp, #12
    e6d0:	4604      	mov	r4, r0
    e6d2:	f000 fe5d 	bl	f390 <am_hal_interrupt_master_disable>
    e6d6:	4d0e      	ldr	r5, [pc, #56]	; (e710 <am_hal_cachectrl_config+0x44>)
    e6d8:	9001      	str	r0, [sp, #4]
    e6da:	682b      	ldr	r3, [r5, #0]
    e6dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    e6e0:	602b      	str	r3, [r5, #0]
    e6e2:	9801      	ldr	r0, [sp, #4]
    e6e4:	f000 fe58 	bl	f398 <am_hal_interrupt_master_set>
    e6e8:	7863      	ldrb	r3, [r4, #1]
    e6ea:	7822      	ldrb	r2, [r4, #0]
    e6ec:	78a1      	ldrb	r1, [r4, #2]
    e6ee:	021b      	lsls	r3, r3, #8
    e6f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
    e6f4:	0112      	lsls	r2, r2, #4
    e6f6:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    e6fa:	b2d2      	uxtb	r2, r2
    e6fc:	4313      	orrs	r3, r2
    e6fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    e702:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    e706:	2000      	movs	r0, #0
    e708:	602b      	str	r3, [r5, #0]
    e70a:	b003      	add	sp, #12
    e70c:	bd30      	pop	{r4, r5, pc}
    e70e:	bf00      	nop
    e710:	40018000 	.word	0x40018000

0000e714 <am_hal_cachectrl_enable>:
    e714:	4a03      	ldr	r2, [pc, #12]	; (e724 <am_hal_cachectrl_enable+0x10>)
    e716:	6813      	ldr	r3, [r2, #0]
    e718:	f043 0301 	orr.w	r3, r3, #1
    e71c:	2000      	movs	r0, #0
    e71e:	6013      	str	r3, [r2, #0]
    e720:	4770      	bx	lr
    e722:	bf00      	nop
    e724:	40018000 	.word	0x40018000

0000e728 <am_hal_cachectrl_control>:
    e728:	b510      	push	{r4, lr}
    e72a:	3801      	subs	r0, #1
    e72c:	b08e      	sub	sp, #56	; 0x38
    e72e:	2810      	cmp	r0, #16
    e730:	f200 815e 	bhi.w	e9f0 <am_hal_cachectrl_control+0x2c8>
    e734:	e8df f010 	tbh	[pc, r0, lsl #1]
    e738:	00360018 	.word	0x00360018
    e73c:	0040003d 	.word	0x0040003d
    e740:	00450043 	.word	0x00450043
    e744:	0011001a 	.word	0x0011001a
    e748:	00540047 	.word	0x00540047
    e74c:	009a0061 	.word	0x009a0061
    e750:	010c00d3 	.word	0x010c00d3
    e754:	013f0126 	.word	0x013f0126
    e758:	001d      	.short	0x001d
    e75a:	f44f 7300 	mov.w	r3, #512	; 0x200
    e75e:	4aac      	ldr	r2, [pc, #688]	; (ea10 <am_hal_cachectrl_control+0x2e8>)
    e760:	2000      	movs	r0, #0
    e762:	6093      	str	r3, [r2, #8]
    e764:	b00e      	add	sp, #56	; 0x38
    e766:	bd10      	pop	{r4, pc}
    e768:	2301      	movs	r3, #1
    e76a:	e7f8      	b.n	e75e <am_hal_cachectrl_control+0x36>
    e76c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    e770:	e7f5      	b.n	e75e <am_hal_cachectrl_control+0x36>
    e772:	2900      	cmp	r1, #0
    e774:	f000 813c 	beq.w	e9f0 <am_hal_cachectrl_control+0x2c8>
    e778:	684a      	ldr	r2, [r1, #4]
    e77a:	48a6      	ldr	r0, [pc, #664]	; (ea14 <am_hal_cachectrl_control+0x2ec>)
    e77c:	4202      	tst	r2, r0
    e77e:	f040 8137 	bne.w	e9f0 <am_hal_cachectrl_control+0x2c8>
    e782:	688b      	ldr	r3, [r1, #8]
    e784:	4018      	ands	r0, r3
    e786:	f040 8133 	bne.w	e9f0 <am_hal_cachectrl_control+0x2c8>
    e78a:	780c      	ldrb	r4, [r1, #0]
    e78c:	2c00      	cmp	r4, #0
    e78e:	f040 8133 	bne.w	e9f8 <am_hal_cachectrl_control+0x2d0>
    e792:	4c9f      	ldr	r4, [pc, #636]	; (ea10 <am_hal_cachectrl_control+0x2e8>)
    e794:	7849      	ldrb	r1, [r1, #1]
    e796:	6122      	str	r2, [r4, #16]
    e798:	6163      	str	r3, [r4, #20]
    e79a:	6823      	ldr	r3, [r4, #0]
    e79c:	f361 0382 	bfi	r3, r1, #2, #1
    e7a0:	6023      	str	r3, [r4, #0]
    e7a2:	e7df      	b.n	e764 <am_hal_cachectrl_control+0x3c>
    e7a4:	4b9a      	ldr	r3, [pc, #616]	; (ea10 <am_hal_cachectrl_control+0x2e8>)
    e7a6:	681b      	ldr	r3, [r3, #0]
    e7a8:	01db      	lsls	r3, r3, #7
    e7aa:	f140 811f 	bpl.w	e9ec <am_hal_cachectrl_control+0x2c4>
    e7ae:	2302      	movs	r3, #2
    e7b0:	e7d5      	b.n	e75e <am_hal_cachectrl_control+0x36>
    e7b2:	f44f 6388 	mov.w	r3, #1088	; 0x440
    e7b6:	e7d2      	b.n	e75e <am_hal_cachectrl_control+0x36>
    e7b8:	f44f 7308 	mov.w	r3, #544	; 0x220
    e7bc:	e7cf      	b.n	e75e <am_hal_cachectrl_control+0x36>
    e7be:	2340      	movs	r3, #64	; 0x40
    e7c0:	e7cd      	b.n	e75e <am_hal_cachectrl_control+0x36>
    e7c2:	2320      	movs	r3, #32
    e7c4:	e7cb      	b.n	e75e <am_hal_cachectrl_control+0x36>
    e7c6:	f000 fde3 	bl	f390 <am_hal_interrupt_master_disable>
    e7ca:	4a91      	ldr	r2, [pc, #580]	; (ea10 <am_hal_cachectrl_control+0x2e8>)
    e7cc:	9000      	str	r0, [sp, #0]
    e7ce:	6813      	ldr	r3, [r2, #0]
    e7d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    e7d4:	6013      	str	r3, [r2, #0]
    e7d6:	9800      	ldr	r0, [sp, #0]
    e7d8:	f000 fdde 	bl	f398 <am_hal_interrupt_master_set>
    e7dc:	2000      	movs	r0, #0
    e7de:	e7c1      	b.n	e764 <am_hal_cachectrl_control+0x3c>
    e7e0:	f000 fdd6 	bl	f390 <am_hal_interrupt_master_disable>
    e7e4:	4a8a      	ldr	r2, [pc, #552]	; (ea10 <am_hal_cachectrl_control+0x2e8>)
    e7e6:	9001      	str	r0, [sp, #4]
    e7e8:	6813      	ldr	r3, [r2, #0]
    e7ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    e7ee:	6013      	str	r3, [r2, #0]
    e7f0:	9801      	ldr	r0, [sp, #4]
    e7f2:	f000 fdd1 	bl	f398 <am_hal_interrupt_master_set>
    e7f6:	2000      	movs	r0, #0
    e7f8:	e7b4      	b.n	e764 <am_hal_cachectrl_control+0x3c>
    e7fa:	f000 fdc9 	bl	f390 <am_hal_interrupt_master_disable>
    e7fe:	4603      	mov	r3, r0
    e800:	4885      	ldr	r0, [pc, #532]	; (ea18 <am_hal_cachectrl_control+0x2f0>)
    e802:	9302      	str	r3, [sp, #8]
    e804:	f000 fc3c 	bl	f080 <am_hal_flash_load_ui32>
    e808:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    e80c:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    e810:	4881      	ldr	r0, [pc, #516]	; (ea18 <am_hal_cachectrl_control+0x2f0>)
    e812:	f000 fc39 	bl	f088 <am_hal_flash_store_ui32>
    e816:	9802      	ldr	r0, [sp, #8]
    e818:	f000 fdbe 	bl	f398 <am_hal_interrupt_master_set>
    e81c:	f000 fdb8 	bl	f390 <am_hal_interrupt_master_disable>
    e820:	4603      	mov	r3, r0
    e822:	487d      	ldr	r0, [pc, #500]	; (ea18 <am_hal_cachectrl_control+0x2f0>)
    e824:	9303      	str	r3, [sp, #12]
    e826:	f000 fc2b 	bl	f080 <am_hal_flash_load_ui32>
    e82a:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    e82e:	f440 61ee 	orr.w	r1, r0, #1904	; 0x770
    e832:	4879      	ldr	r0, [pc, #484]	; (ea18 <am_hal_cachectrl_control+0x2f0>)
    e834:	f000 fc28 	bl	f088 <am_hal_flash_store_ui32>
    e838:	9803      	ldr	r0, [sp, #12]
    e83a:	f000 fdad 	bl	f398 <am_hal_interrupt_master_set>
    e83e:	f000 fda7 	bl	f390 <am_hal_interrupt_master_disable>
    e842:	4603      	mov	r3, r0
    e844:	4874      	ldr	r0, [pc, #464]	; (ea18 <am_hal_cachectrl_control+0x2f0>)
    e846:	9304      	str	r3, [sp, #16]
    e848:	f000 fc1a 	bl	f080 <am_hal_flash_load_ui32>
    e84c:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    e850:	f020 000f 	bic.w	r0, r0, #15
    e854:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    e858:	f041 0103 	orr.w	r1, r1, #3
    e85c:	486e      	ldr	r0, [pc, #440]	; (ea18 <am_hal_cachectrl_control+0x2f0>)
    e85e:	f000 fc13 	bl	f088 <am_hal_flash_store_ui32>
    e862:	9804      	ldr	r0, [sp, #16]
    e864:	f000 fd98 	bl	f398 <am_hal_interrupt_master_set>
    e868:	2000      	movs	r0, #0
    e86a:	e77b      	b.n	e764 <am_hal_cachectrl_control+0x3c>
    e86c:	f000 fd90 	bl	f390 <am_hal_interrupt_master_disable>
    e870:	4603      	mov	r3, r0
    e872:	4869      	ldr	r0, [pc, #420]	; (ea18 <am_hal_cachectrl_control+0x2f0>)
    e874:	9305      	str	r3, [sp, #20]
    e876:	f000 fc03 	bl	f080 <am_hal_flash_load_ui32>
    e87a:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    e87e:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    e882:	4865      	ldr	r0, [pc, #404]	; (ea18 <am_hal_cachectrl_control+0x2f0>)
    e884:	f000 fc00 	bl	f088 <am_hal_flash_store_ui32>
    e888:	9805      	ldr	r0, [sp, #20]
    e88a:	f000 fd85 	bl	f398 <am_hal_interrupt_master_set>
    e88e:	f000 fd7f 	bl	f390 <am_hal_interrupt_master_disable>
    e892:	4603      	mov	r3, r0
    e894:	4860      	ldr	r0, [pc, #384]	; (ea18 <am_hal_cachectrl_control+0x2f0>)
    e896:	9306      	str	r3, [sp, #24]
    e898:	f000 fbf2 	bl	f080 <am_hal_flash_load_ui32>
    e89c:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    e8a0:	f440 61ea 	orr.w	r1, r0, #1872	; 0x750
    e8a4:	485c      	ldr	r0, [pc, #368]	; (ea18 <am_hal_cachectrl_control+0x2f0>)
    e8a6:	f000 fbef 	bl	f088 <am_hal_flash_store_ui32>
    e8aa:	9806      	ldr	r0, [sp, #24]
    e8ac:	f000 fd74 	bl	f398 <am_hal_interrupt_master_set>
    e8b0:	f000 fd6e 	bl	f390 <am_hal_interrupt_master_disable>
    e8b4:	4603      	mov	r3, r0
    e8b6:	4858      	ldr	r0, [pc, #352]	; (ea18 <am_hal_cachectrl_control+0x2f0>)
    e8b8:	9307      	str	r3, [sp, #28]
    e8ba:	f000 fbe1 	bl	f080 <am_hal_flash_load_ui32>
    e8be:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    e8c2:	f020 000f 	bic.w	r0, r0, #15
    e8c6:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    e8ca:	f041 0101 	orr.w	r1, r1, #1
    e8ce:	4852      	ldr	r0, [pc, #328]	; (ea18 <am_hal_cachectrl_control+0x2f0>)
    e8d0:	f000 fbda 	bl	f088 <am_hal_flash_store_ui32>
    e8d4:	9807      	ldr	r0, [sp, #28]
    e8d6:	f000 fd5f 	bl	f398 <am_hal_interrupt_master_set>
    e8da:	2000      	movs	r0, #0
    e8dc:	e742      	b.n	e764 <am_hal_cachectrl_control+0x3c>
    e8de:	f000 fd57 	bl	f390 <am_hal_interrupt_master_disable>
    e8e2:	4603      	mov	r3, r0
    e8e4:	484c      	ldr	r0, [pc, #304]	; (ea18 <am_hal_cachectrl_control+0x2f0>)
    e8e6:	9308      	str	r3, [sp, #32]
    e8e8:	f000 fbca 	bl	f080 <am_hal_flash_load_ui32>
    e8ec:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    e8f0:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    e8f4:	4848      	ldr	r0, [pc, #288]	; (ea18 <am_hal_cachectrl_control+0x2f0>)
    e8f6:	f000 fbc7 	bl	f088 <am_hal_flash_store_ui32>
    e8fa:	9808      	ldr	r0, [sp, #32]
    e8fc:	f000 fd4c 	bl	f398 <am_hal_interrupt_master_set>
    e900:	f000 fd46 	bl	f390 <am_hal_interrupt_master_disable>
    e904:	4603      	mov	r3, r0
    e906:	4844      	ldr	r0, [pc, #272]	; (ea18 <am_hal_cachectrl_control+0x2f0>)
    e908:	9309      	str	r3, [sp, #36]	; 0x24
    e90a:	f000 fbb9 	bl	f080 <am_hal_flash_load_ui32>
    e90e:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    e912:	f440 61ec 	orr.w	r1, r0, #1888	; 0x760
    e916:	4840      	ldr	r0, [pc, #256]	; (ea18 <am_hal_cachectrl_control+0x2f0>)
    e918:	f000 fbb6 	bl	f088 <am_hal_flash_store_ui32>
    e91c:	9809      	ldr	r0, [sp, #36]	; 0x24
    e91e:	f000 fd3b 	bl	f398 <am_hal_interrupt_master_set>
    e922:	f000 fd35 	bl	f390 <am_hal_interrupt_master_disable>
    e926:	4603      	mov	r3, r0
    e928:	483b      	ldr	r0, [pc, #236]	; (ea18 <am_hal_cachectrl_control+0x2f0>)
    e92a:	930a      	str	r3, [sp, #40]	; 0x28
    e92c:	f000 fba8 	bl	f080 <am_hal_flash_load_ui32>
    e930:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    e934:	f020 000f 	bic.w	r0, r0, #15
    e938:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    e93c:	f041 0101 	orr.w	r1, r1, #1
    e940:	4835      	ldr	r0, [pc, #212]	; (ea18 <am_hal_cachectrl_control+0x2f0>)
    e942:	f000 fba1 	bl	f088 <am_hal_flash_store_ui32>
    e946:	980a      	ldr	r0, [sp, #40]	; 0x28
    e948:	f000 fd26 	bl	f398 <am_hal_interrupt_master_set>
    e94c:	2000      	movs	r0, #0
    e94e:	e709      	b.n	e764 <am_hal_cachectrl_control+0x3c>
    e950:	2900      	cmp	r1, #0
    e952:	d04d      	beq.n	e9f0 <am_hal_cachectrl_control+0x2c8>
    e954:	680c      	ldr	r4, [r1, #0]
    e956:	2c03      	cmp	r4, #3
    e958:	d84c      	bhi.n	e9f4 <am_hal_cachectrl_control+0x2cc>
    e95a:	f000 fd19 	bl	f390 <am_hal_interrupt_master_disable>
    e95e:	4603      	mov	r3, r0
    e960:	482d      	ldr	r0, [pc, #180]	; (ea18 <am_hal_cachectrl_control+0x2f0>)
    e962:	930b      	str	r3, [sp, #44]	; 0x2c
    e964:	f000 fb8c 	bl	f080 <am_hal_flash_load_ui32>
    e968:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    e96c:	ea40 3104 	orr.w	r1, r0, r4, lsl #12
    e970:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    e974:	4828      	ldr	r0, [pc, #160]	; (ea18 <am_hal_cachectrl_control+0x2f0>)
    e976:	f000 fb87 	bl	f088 <am_hal_flash_store_ui32>
    e97a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    e97c:	f000 fd0c 	bl	f398 <am_hal_interrupt_master_set>
    e980:	2000      	movs	r0, #0
    e982:	e6ef      	b.n	e764 <am_hal_cachectrl_control+0x3c>
    e984:	b3a1      	cbz	r1, e9f0 <am_hal_cachectrl_control+0x2c8>
    e986:	680c      	ldr	r4, [r1, #0]
    e988:	2c07      	cmp	r4, #7
    e98a:	d833      	bhi.n	e9f4 <am_hal_cachectrl_control+0x2cc>
    e98c:	f000 fd00 	bl	f390 <am_hal_interrupt_master_disable>
    e990:	4603      	mov	r3, r0
    e992:	4821      	ldr	r0, [pc, #132]	; (ea18 <am_hal_cachectrl_control+0x2f0>)
    e994:	930c      	str	r3, [sp, #48]	; 0x30
    e996:	f000 fb73 	bl	f080 <am_hal_flash_load_ui32>
    e99a:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    e99e:	ea40 1104 	orr.w	r1, r0, r4, lsl #4
    e9a2:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    e9a6:	481c      	ldr	r0, [pc, #112]	; (ea18 <am_hal_cachectrl_control+0x2f0>)
    e9a8:	f000 fb6e 	bl	f088 <am_hal_flash_store_ui32>
    e9ac:	980c      	ldr	r0, [sp, #48]	; 0x30
    e9ae:	f000 fcf3 	bl	f398 <am_hal_interrupt_master_set>
    e9b2:	2000      	movs	r0, #0
    e9b4:	e6d6      	b.n	e764 <am_hal_cachectrl_control+0x3c>
    e9b6:	b1d9      	cbz	r1, e9f0 <am_hal_cachectrl_control+0x2c8>
    e9b8:	680c      	ldr	r4, [r1, #0]
    e9ba:	2c0f      	cmp	r4, #15
    e9bc:	d81a      	bhi.n	e9f4 <am_hal_cachectrl_control+0x2cc>
    e9be:	f000 fce7 	bl	f390 <am_hal_interrupt_master_disable>
    e9c2:	4603      	mov	r3, r0
    e9c4:	4814      	ldr	r0, [pc, #80]	; (ea18 <am_hal_cachectrl_control+0x2f0>)
    e9c6:	930d      	str	r3, [sp, #52]	; 0x34
    e9c8:	f000 fb5a 	bl	f080 <am_hal_flash_load_ui32>
    e9cc:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    e9d0:	f020 000f 	bic.w	r0, r0, #15
    e9d4:	ea40 0104 	orr.w	r1, r0, r4
    e9d8:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    e9dc:	480e      	ldr	r0, [pc, #56]	; (ea18 <am_hal_cachectrl_control+0x2f0>)
    e9de:	f000 fb53 	bl	f088 <am_hal_flash_store_ui32>
    e9e2:	980d      	ldr	r0, [sp, #52]	; 0x34
    e9e4:	f000 fcd8 	bl	f398 <am_hal_interrupt_master_set>
    e9e8:	2000      	movs	r0, #0
    e9ea:	e6bb      	b.n	e764 <am_hal_cachectrl_control+0x3c>
    e9ec:	2007      	movs	r0, #7
    e9ee:	e6b9      	b.n	e764 <am_hal_cachectrl_control+0x3c>
    e9f0:	2006      	movs	r0, #6
    e9f2:	e6b7      	b.n	e764 <am_hal_cachectrl_control+0x3c>
    e9f4:	2001      	movs	r0, #1
    e9f6:	e6b5      	b.n	e764 <am_hal_cachectrl_control+0x3c>
    e9f8:	2c01      	cmp	r4, #1
    e9fa:	d1f9      	bne.n	e9f0 <am_hal_cachectrl_control+0x2c8>
    e9fc:	4c04      	ldr	r4, [pc, #16]	; (ea10 <am_hal_cachectrl_control+0x2e8>)
    e9fe:	7849      	ldrb	r1, [r1, #1]
    ea00:	61a2      	str	r2, [r4, #24]
    ea02:	61e3      	str	r3, [r4, #28]
    ea04:	6823      	ldr	r3, [r4, #0]
    ea06:	f361 03c3 	bfi	r3, r1, #3, #1
    ea0a:	6023      	str	r3, [r4, #0]
    ea0c:	e6aa      	b.n	e764 <am_hal_cachectrl_control+0x3c>
    ea0e:	bf00      	nop
    ea10:	40018000 	.word	0x40018000
    ea14:	f800000f 	.word	0xf800000f
    ea18:	40018004 	.word	0x40018004

0000ea1c <am_hal_clkgen_control>:
    ea1c:	4b49      	ldr	r3, [pc, #292]	; (eb44 <am_hal_clkgen_control+0x128>)
    ea1e:	681a      	ldr	r2, [r3, #0]
    ea20:	b912      	cbnz	r2, ea28 <am_hal_clkgen_control+0xc>
    ea22:	4a49      	ldr	r2, [pc, #292]	; (eb48 <am_hal_clkgen_control+0x12c>)
    ea24:	6812      	ldr	r2, [r2, #0]
    ea26:	601a      	str	r2, [r3, #0]
    ea28:	2809      	cmp	r0, #9
    ea2a:	f200 8089 	bhi.w	eb40 <am_hal_clkgen_control+0x124>
    ea2e:	e8df f000 	tbb	[pc, r0]
    ea32:	160d      	.short	0x160d
    ea34:	423a261e 	.word	0x423a261e
    ea38:	055c544c 	.word	0x055c544c
    ea3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    ea40:	2000      	movs	r0, #0
    ea42:	6a1a      	ldr	r2, [r3, #32]
    ea44:	f36f 0200 	bfc	r2, #0, #1
    ea48:	621a      	str	r2, [r3, #32]
    ea4a:	4770      	bx	lr
    ea4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    ea50:	2200      	movs	r2, #0
    ea52:	2147      	movs	r1, #71	; 0x47
    ea54:	6159      	str	r1, [r3, #20]
    ea56:	4610      	mov	r0, r2
    ea58:	619a      	str	r2, [r3, #24]
    ea5a:	615a      	str	r2, [r3, #20]
    ea5c:	4770      	bx	lr
    ea5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    ea62:	2000      	movs	r0, #0
    ea64:	899a      	ldrh	r2, [r3, #12]
    ea66:	f36f 0200 	bfc	r2, #0, #1
    ea6a:	819a      	strh	r2, [r3, #12]
    ea6c:	4770      	bx	lr
    ea6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    ea72:	2000      	movs	r0, #0
    ea74:	899a      	ldrh	r2, [r3, #12]
    ea76:	f36f 0241 	bfc	r2, #1, #1
    ea7a:	819a      	strh	r2, [r3, #12]
    ea7c:	4770      	bx	lr
    ea7e:	4a33      	ldr	r2, [pc, #204]	; (eb4c <am_hal_clkgen_control+0x130>)
    ea80:	68d3      	ldr	r3, [r2, #12]
    ea82:	b2db      	uxtb	r3, r3
    ea84:	2b21      	cmp	r3, #33	; 0x21
    ea86:	d106      	bne.n	ea96 <am_hal_clkgen_control+0x7a>
    ea88:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    ea8c:	2101      	movs	r1, #1
    ea8e:	f361 2309 	bfi	r3, r1, #8, #2
    ea92:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    ea96:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    ea9a:	2000      	movs	r0, #0
    ea9c:	8993      	ldrh	r3, [r2, #12]
    ea9e:	f043 0301 	orr.w	r3, r3, #1
    eaa2:	8193      	strh	r3, [r2, #12]
    eaa4:	4770      	bx	lr
    eaa6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    eaaa:	2000      	movs	r0, #0
    eaac:	8993      	ldrh	r3, [r2, #12]
    eaae:	f043 0302 	orr.w	r3, r3, #2
    eab2:	8193      	strh	r3, [r2, #12]
    eab4:	4770      	bx	lr
    eab6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    eaba:	2200      	movs	r2, #0
    eabc:	2047      	movs	r0, #71	; 0x47
    eabe:	2101      	movs	r1, #1
    eac0:	6158      	str	r0, [r3, #20]
    eac2:	6199      	str	r1, [r3, #24]
    eac4:	4610      	mov	r0, r2
    eac6:	615a      	str	r2, [r3, #20]
    eac8:	4770      	bx	lr
    eaca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    eace:	2000      	movs	r0, #0
    ead0:	899a      	ldrh	r2, [r3, #12]
    ead2:	f36f 12c7 	bfc	r2, #7, #1
    ead6:	819a      	strh	r2, [r3, #12]
    ead8:	4770      	bx	lr
    eada:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    eade:	2000      	movs	r0, #0
    eae0:	8993      	ldrh	r3, [r2, #12]
    eae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    eae6:	8193      	strh	r3, [r2, #12]
    eae8:	4770      	bx	lr
    eaea:	4a18      	ldr	r2, [pc, #96]	; (eb4c <am_hal_clkgen_control+0x130>)
    eaec:	68d3      	ldr	r3, [r2, #12]
    eaee:	b2db      	uxtb	r3, r3
    eaf0:	2b21      	cmp	r3, #33	; 0x21
    eaf2:	d00a      	beq.n	eb0a <am_hal_clkgen_control+0xee>
    eaf4:	b139      	cbz	r1, eb06 <am_hal_clkgen_control+0xea>
    eaf6:	680b      	ldr	r3, [r1, #0]
    eaf8:	f043 0301 	orr.w	r3, r3, #1
    eafc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    eb00:	2000      	movs	r0, #0
    eb02:	6213      	str	r3, [r2, #32]
    eb04:	4770      	bx	lr
    eb06:	4b12      	ldr	r3, [pc, #72]	; (eb50 <am_hal_clkgen_control+0x134>)
    eb08:	e7f8      	b.n	eafc <am_hal_clkgen_control+0xe0>
    eb0a:	b500      	push	{lr}
    eb0c:	b083      	sub	sp, #12
    eb0e:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    eb12:	9101      	str	r1, [sp, #4]
    eb14:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    eb18:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    eb1c:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    eb20:	f000 fa68 	bl	eff4 <am_hal_flash_delay>
    eb24:	9901      	ldr	r1, [sp, #4]
    eb26:	b149      	cbz	r1, eb3c <am_hal_clkgen_control+0x120>
    eb28:	680b      	ldr	r3, [r1, #0]
    eb2a:	f043 0301 	orr.w	r3, r3, #1
    eb2e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    eb32:	2000      	movs	r0, #0
    eb34:	6213      	str	r3, [r2, #32]
    eb36:	b003      	add	sp, #12
    eb38:	f85d fb04 	ldr.w	pc, [sp], #4
    eb3c:	4b04      	ldr	r3, [pc, #16]	; (eb50 <am_hal_clkgen_control+0x134>)
    eb3e:	e7f6      	b.n	eb2e <am_hal_clkgen_control+0x112>
    eb40:	2006      	movs	r0, #6
    eb42:	4770      	bx	lr
    eb44:	100063b8 	.word	0x100063b8
    eb48:	4ffff000 	.word	0x4ffff000
    eb4c:	40020000 	.word	0x40020000
    eb50:	0025b801 	.word	0x0025b801

0000eb54 <am_hal_clkgen_status_get>:
    eb54:	b1b0      	cbz	r0, eb84 <am_hal_clkgen_status_get+0x30>
    eb56:	b410      	push	{r4}
    eb58:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    eb5c:	4603      	mov	r3, r0
    eb5e:	698c      	ldr	r4, [r1, #24]
    eb60:	4809      	ldr	r0, [pc, #36]	; (eb88 <am_hal_clkgen_status_get+0x34>)
    eb62:	4a0a      	ldr	r2, [pc, #40]	; (eb8c <am_hal_clkgen_status_get+0x38>)
    eb64:	f014 0f01 	tst.w	r4, #1
    eb68:	bf08      	it	eq
    eb6a:	4602      	moveq	r2, r0
    eb6c:	601a      	str	r2, [r3, #0]
    eb6e:	69ca      	ldr	r2, [r1, #28]
    eb70:	f85d 4b04 	ldr.w	r4, [sp], #4
    eb74:	f002 0101 	and.w	r1, r2, #1
    eb78:	f3c2 0240 	ubfx	r2, r2, #1, #1
    eb7c:	2000      	movs	r0, #0
    eb7e:	6059      	str	r1, [r3, #4]
    eb80:	721a      	strb	r2, [r3, #8]
    eb82:	4770      	bx	lr
    eb84:	2006      	movs	r0, #6
    eb86:	4770      	bx	lr
    eb88:	02dc6c00 	.word	0x02dc6c00
    eb8c:	016e3600 	.word	0x016e3600

0000eb90 <am_hal_ctimer_int_service>:
    eb90:	b198      	cbz	r0, ebba <am_hal_ctimer_int_service+0x2a>
    eb92:	b570      	push	{r4, r5, r6, lr}
    eb94:	4e09      	ldr	r6, [pc, #36]	; (ebbc <am_hal_ctimer_int_service+0x2c>)
    eb96:	4604      	mov	r4, r0
    eb98:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
    eb9c:	fab4 f384 	clz	r3, r4
    eba0:	f1c3 021f 	rsb	r2, r3, #31
    eba4:	fa25 f303 	lsr.w	r3, r5, r3
    eba8:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
    ebac:	ea24 0403 	bic.w	r4, r4, r3
    ebb0:	b102      	cbz	r2, ebb4 <am_hal_ctimer_int_service+0x24>
    ebb2:	4790      	blx	r2
    ebb4:	2c00      	cmp	r4, #0
    ebb6:	d1f1      	bne.n	eb9c <am_hal_ctimer_int_service+0xc>
    ebb8:	bd70      	pop	{r4, r5, r6, pc}
    ebba:	4770      	bx	lr
    ebbc:	10005a98 	.word	0x10005a98

0000ebc0 <am_hal_ctimer_int_register>:
    ebc0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    ebc4:	b510      	push	{r4, lr}
    ebc6:	460c      	mov	r4, r1
    ebc8:	f000 80bd 	beq.w	ed46 <am_hal_ctimer_int_register+0x186>
    ebcc:	d81c      	bhi.n	ec08 <am_hal_ctimer_int_register+0x48>
    ebce:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    ebd2:	f000 80ac 	beq.w	ed2e <am_hal_ctimer_int_register+0x16e>
    ebd6:	d83b      	bhi.n	ec50 <am_hal_ctimer_int_register+0x90>
    ebd8:	2820      	cmp	r0, #32
    ebda:	d82b      	bhi.n	ec34 <am_hal_ctimer_int_register+0x74>
    ebdc:	b380      	cbz	r0, ec40 <am_hal_ctimer_int_register+0x80>
    ebde:	3801      	subs	r0, #1
    ebe0:	281f      	cmp	r0, #31
    ebe2:	d82d      	bhi.n	ec40 <am_hal_ctimer_int_register+0x80>
    ebe4:	e8df f000 	tbb	[pc, r0]
    ebe8:	a72ca599 	.word	0xa72ca599
    ebec:	ad2c2c2c 	.word	0xad2c2c2c
    ebf0:	2c2c2c2c 	.word	0x2c2c2c2c
    ebf4:	ab2c2c2c 	.word	0xab2c2c2c
    ebf8:	2c2c2c2c 	.word	0x2c2c2c2c
    ebfc:	2c2c2c2c 	.word	0x2c2c2c2c
    ec00:	2c2c2c2c 	.word	0x2c2c2c2c
    ec04:	a92c2c2c 	.word	0xa92c2c2c
    ec08:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    ec0c:	f000 808d 	beq.w	ed2a <am_hal_ctimer_int_register+0x16a>
    ec10:	d955      	bls.n	ecbe <am_hal_ctimer_int_register+0xfe>
    ec12:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
    ec16:	f000 8086 	beq.w	ed26 <am_hal_ctimer_int_register+0x166>
    ec1a:	d942      	bls.n	eca2 <am_hal_ctimer_int_register+0xe2>
    ec1c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    ec20:	d071      	beq.n	ed06 <am_hal_ctimer_int_register+0x146>
    ec22:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    ec26:	bf08      	it	eq
    ec28:	231f      	moveq	r3, #31
    ec2a:	d126      	bne.n	ec7a <am_hal_ctimer_int_register+0xba>
    ec2c:	4a47      	ldr	r2, [pc, #284]	; (ed4c <am_hal_ctimer_int_register+0x18c>)
    ec2e:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
    ec32:	bd10      	pop	{r4, pc}
    ec34:	2840      	cmp	r0, #64	; 0x40
    ec36:	d062      	beq.n	ecfe <am_hal_ctimer_int_register+0x13e>
    ec38:	2880      	cmp	r0, #128	; 0x80
    ec3a:	bf08      	it	eq
    ec3c:	2307      	moveq	r3, #7
    ec3e:	d0f5      	beq.n	ec2c <am_hal_ctimer_int_register+0x6c>
    ec40:	4a43      	ldr	r2, [pc, #268]	; (ed50 <am_hal_ctimer_int_register+0x190>)
    ec42:	4844      	ldr	r0, [pc, #272]	; (ed54 <am_hal_ctimer_int_register+0x194>)
    ec44:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
    ec48:	f000 f9d2 	bl	eff0 <am_hal_debug_error>
    ec4c:	2300      	movs	r3, #0
    ec4e:	e7ed      	b.n	ec2c <am_hal_ctimer_int_register+0x6c>
    ec50:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    ec54:	d065      	beq.n	ed22 <am_hal_ctimer_int_register+0x162>
    ec56:	d916      	bls.n	ec86 <am_hal_ctimer_int_register+0xc6>
    ec58:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    ec5c:	d055      	beq.n	ed0a <am_hal_ctimer_int_register+0x14a>
    ec5e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    ec62:	bf08      	it	eq
    ec64:	230f      	moveq	r3, #15
    ec66:	d0e1      	beq.n	ec2c <am_hal_ctimer_int_register+0x6c>
    ec68:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    ec6c:	bf08      	it	eq
    ec6e:	230d      	moveq	r3, #13
    ec70:	d1e6      	bne.n	ec40 <am_hal_ctimer_int_register+0x80>
    ec72:	4a36      	ldr	r2, [pc, #216]	; (ed4c <am_hal_ctimer_int_register+0x18c>)
    ec74:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
    ec78:	bd10      	pop	{r4, pc}
    ec7a:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
    ec7e:	bf08      	it	eq
    ec80:	231d      	moveq	r3, #29
    ec82:	d0d3      	beq.n	ec2c <am_hal_ctimer_int_register+0x6c>
    ec84:	e7dc      	b.n	ec40 <am_hal_ctimer_int_register+0x80>
    ec86:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    ec8a:	d044      	beq.n	ed16 <am_hal_ctimer_int_register+0x156>
    ec8c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    ec90:	bf08      	it	eq
    ec92:	230b      	moveq	r3, #11
    ec94:	d0ca      	beq.n	ec2c <am_hal_ctimer_int_register+0x6c>
    ec96:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    ec9a:	bf08      	it	eq
    ec9c:	2309      	moveq	r3, #9
    ec9e:	d0c5      	beq.n	ec2c <am_hal_ctimer_int_register+0x6c>
    eca0:	e7ce      	b.n	ec40 <am_hal_ctimer_int_register+0x80>
    eca2:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
    eca6:	d034      	beq.n	ed12 <am_hal_ctimer_int_register+0x152>
    eca8:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    ecac:	bf08      	it	eq
    ecae:	231b      	moveq	r3, #27
    ecb0:	d0bc      	beq.n	ec2c <am_hal_ctimer_int_register+0x6c>
    ecb2:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
    ecb6:	bf08      	it	eq
    ecb8:	2319      	moveq	r3, #25
    ecba:	d0b7      	beq.n	ec2c <am_hal_ctimer_int_register+0x6c>
    ecbc:	e7c0      	b.n	ec40 <am_hal_ctimer_int_register+0x80>
    ecbe:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
    ecc2:	d02c      	beq.n	ed1e <am_hal_ctimer_int_register+0x15e>
    ecc4:	d90d      	bls.n	ece2 <am_hal_ctimer_int_register+0x122>
    ecc6:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    ecca:	d020      	beq.n	ed0e <am_hal_ctimer_int_register+0x14e>
    eccc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    ecd0:	bf08      	it	eq
    ecd2:	2317      	moveq	r3, #23
    ecd4:	d0aa      	beq.n	ec2c <am_hal_ctimer_int_register+0x6c>
    ecd6:	f5b0 1f00 	cmp.w	r0, #2097152	; 0x200000
    ecda:	bf08      	it	eq
    ecdc:	2315      	moveq	r3, #21
    ecde:	d0a5      	beq.n	ec2c <am_hal_ctimer_int_register+0x6c>
    ece0:	e7ae      	b.n	ec40 <am_hal_ctimer_int_register+0x80>
    ece2:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
    ece6:	d00c      	beq.n	ed02 <am_hal_ctimer_int_register+0x142>
    ece8:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
    ecec:	bf08      	it	eq
    ecee:	2313      	moveq	r3, #19
    ecf0:	d09c      	beq.n	ec2c <am_hal_ctimer_int_register+0x6c>
    ecf2:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
    ecf6:	bf08      	it	eq
    ecf8:	2311      	moveq	r3, #17
    ecfa:	d097      	beq.n	ec2c <am_hal_ctimer_int_register+0x6c>
    ecfc:	e7a0      	b.n	ec40 <am_hal_ctimer_int_register+0x80>
    ecfe:	2306      	movs	r3, #6
    ed00:	e794      	b.n	ec2c <am_hal_ctimer_int_register+0x6c>
    ed02:	2312      	movs	r3, #18
    ed04:	e792      	b.n	ec2c <am_hal_ctimer_int_register+0x6c>
    ed06:	231e      	movs	r3, #30
    ed08:	e790      	b.n	ec2c <am_hal_ctimer_int_register+0x6c>
    ed0a:	230e      	movs	r3, #14
    ed0c:	e78e      	b.n	ec2c <am_hal_ctimer_int_register+0x6c>
    ed0e:	2316      	movs	r3, #22
    ed10:	e78c      	b.n	ec2c <am_hal_ctimer_int_register+0x6c>
    ed12:	231a      	movs	r3, #26
    ed14:	e78a      	b.n	ec2c <am_hal_ctimer_int_register+0x6c>
    ed16:	230a      	movs	r3, #10
    ed18:	e788      	b.n	ec2c <am_hal_ctimer_int_register+0x6c>
    ed1a:	2300      	movs	r3, #0
    ed1c:	e786      	b.n	ec2c <am_hal_ctimer_int_register+0x6c>
    ed1e:	2314      	movs	r3, #20
    ed20:	e784      	b.n	ec2c <am_hal_ctimer_int_register+0x6c>
    ed22:	230c      	movs	r3, #12
    ed24:	e782      	b.n	ec2c <am_hal_ctimer_int_register+0x6c>
    ed26:	231c      	movs	r3, #28
    ed28:	e780      	b.n	ec2c <am_hal_ctimer_int_register+0x6c>
    ed2a:	2318      	movs	r3, #24
    ed2c:	e77e      	b.n	ec2c <am_hal_ctimer_int_register+0x6c>
    ed2e:	2308      	movs	r3, #8
    ed30:	e77c      	b.n	ec2c <am_hal_ctimer_int_register+0x6c>
    ed32:	2301      	movs	r3, #1
    ed34:	e77a      	b.n	ec2c <am_hal_ctimer_int_register+0x6c>
    ed36:	2302      	movs	r3, #2
    ed38:	e778      	b.n	ec2c <am_hal_ctimer_int_register+0x6c>
    ed3a:	2305      	movs	r3, #5
    ed3c:	e776      	b.n	ec2c <am_hal_ctimer_int_register+0x6c>
    ed3e:	2304      	movs	r3, #4
    ed40:	e774      	b.n	ec2c <am_hal_ctimer_int_register+0x6c>
    ed42:	2303      	movs	r3, #3
    ed44:	e772      	b.n	ec2c <am_hal_ctimer_int_register+0x6c>
    ed46:	2310      	movs	r3, #16
    ed48:	e770      	b.n	ec2c <am_hal_ctimer_int_register+0x6c>
    ed4a:	bf00      	nop
    ed4c:	10005a98 	.word	0x10005a98
    ed50:	00011624 	.word	0x00011624
    ed54:	0001164c 	.word	0x0001164c

0000ed58 <am_hal_ctimer_config>:
    ed58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ed5c:	b082      	sub	sp, #8
    ed5e:	460c      	mov	r4, r1
    ed60:	4606      	mov	r6, r0
    ed62:	f000 fb15 	bl	f390 <am_hal_interrupt_master_disable>
    ed66:	4f19      	ldr	r7, [pc, #100]	; (edcc <am_hal_ctimer_config+0x74>)
    ed68:	9001      	str	r0, [sp, #4]
    ed6a:	ea4f 1846 	mov.w	r8, r6, lsl #5
    ed6e:	f858 3007 	ldr.w	r3, [r8, r7]
    ed72:	f043 2308 	orr.w	r3, r3, #134219776	; 0x8000800
    ed76:	f848 3007 	str.w	r3, [r8, r7]
    ed7a:	9801      	ldr	r0, [sp, #4]
    ed7c:	f000 fb0c 	bl	f398 <am_hal_interrupt_master_set>
    ed80:	e9d4 5301 	ldrd	r5, r3, [r4, #4]
    ed84:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    ed88:	6823      	ldr	r3, [r4, #0]
    ed8a:	b10b      	cbz	r3, ed90 <am_hal_ctimer_config+0x38>
    ed8c:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    ed90:	f000 fafe 	bl	f390 <am_hal_interrupt_master_disable>
    ed94:	9000      	str	r0, [sp, #0]
    ed96:	f848 5007 	str.w	r5, [r8, r7]
    ed9a:	9800      	ldr	r0, [sp, #0]
    ed9c:	f000 fafc 	bl	f398 <am_hal_interrupt_master_set>
    eda0:	6863      	ldr	r3, [r4, #4]
    eda2:	b90b      	cbnz	r3, eda8 <am_hal_ctimer_config+0x50>
    eda4:	6822      	ldr	r2, [r4, #0]
    eda6:	b14a      	cbz	r2, edbc <am_hal_ctimer_config+0x64>
    eda8:	f3c3 0344 	ubfx	r3, r3, #1, #5
    edac:	2200      	movs	r2, #0
    edae:	4808      	ldr	r0, [pc, #32]	; (edd0 <am_hal_ctimer_config+0x78>)
    edb0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
    edb4:	54b3      	strb	r3, [r6, r2]
    edb6:	b002      	add	sp, #8
    edb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    edbc:	68a3      	ldr	r3, [r4, #8]
    edbe:	2b00      	cmp	r3, #0
    edc0:	d0f9      	beq.n	edb6 <am_hal_ctimer_config+0x5e>
    edc2:	f3c3 0344 	ubfx	r3, r3, #1, #5
    edc6:	2201      	movs	r2, #1
    edc8:	e7f1      	b.n	edae <am_hal_ctimer_config+0x56>
    edca:	bf00      	nop
    edcc:	4000800c 	.word	0x4000800c
    edd0:	10001110 	.word	0x10001110

0000edd4 <am_hal_ctimer_start>:
    edd4:	b530      	push	{r4, r5, lr}
    edd6:	b083      	sub	sp, #12
    edd8:	460c      	mov	r4, r1
    edda:	4605      	mov	r5, r0
    eddc:	f000 fad8 	bl	f390 <am_hal_interrupt_master_disable>
    ede0:	ea4f 1c45 	mov.w	ip, r5, lsl #5
    ede4:	4910      	ldr	r1, [pc, #64]	; (ee28 <am_hal_ctimer_start+0x54>)
    ede6:	9001      	str	r0, [sp, #4]
    ede8:	f85c 3001 	ldr.w	r3, [ip, r1]
    edec:	f004 2208 	and.w	r2, r4, #134219776	; 0x8000800
    edf0:	ea23 0202 	bic.w	r2, r3, r2
    edf4:	f004 1301 	and.w	r3, r4, #65537	; 0x10001
    edf8:	4313      	orrs	r3, r2
    edfa:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    edfe:	f84c 3001 	str.w	r3, [ip, r1]
    ee02:	bf0c      	ite	eq
    ee04:	f3c3 4444 	ubfxeq	r4, r3, #17, #5
    ee08:	f3c3 0444 	ubfxne	r4, r3, #1, #5
    ee0c:	4b07      	ldr	r3, [pc, #28]	; (ee2c <am_hal_ctimer_start+0x58>)
    ee0e:	9801      	ldr	r0, [sp, #4]
    ee10:	bf0c      	ite	eq
    ee12:	2201      	moveq	r2, #1
    ee14:	2200      	movne	r2, #0
    ee16:	eb03 0545 	add.w	r5, r3, r5, lsl #1
    ee1a:	54ac      	strb	r4, [r5, r2]
    ee1c:	b003      	add	sp, #12
    ee1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    ee22:	f000 bab9 	b.w	f398 <am_hal_interrupt_master_set>
    ee26:	bf00      	nop
    ee28:	4000800c 	.word	0x4000800c
    ee2c:	10001110 	.word	0x10001110

0000ee30 <am_hal_ctimer_stop>:
    ee30:	b530      	push	{r4, r5, lr}
    ee32:	b083      	sub	sp, #12
    ee34:	0145      	lsls	r5, r0, #5
    ee36:	460c      	mov	r4, r1
    ee38:	f000 faaa 	bl	f390 <am_hal_interrupt_master_disable>
    ee3c:	4b06      	ldr	r3, [pc, #24]	; (ee58 <am_hal_ctimer_stop+0x28>)
    ee3e:	9001      	str	r0, [sp, #4]
    ee40:	58e9      	ldr	r1, [r5, r3]
    ee42:	f004 1401 	and.w	r4, r4, #65537	; 0x10001
    ee46:	ea21 0404 	bic.w	r4, r1, r4
    ee4a:	50ec      	str	r4, [r5, r3]
    ee4c:	9801      	ldr	r0, [sp, #4]
    ee4e:	b003      	add	sp, #12
    ee50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    ee54:	f000 baa0 	b.w	f398 <am_hal_interrupt_master_set>
    ee58:	4000800c 	.word	0x4000800c

0000ee5c <am_hal_ctimer_clear>:
    ee5c:	b530      	push	{r4, r5, lr}
    ee5e:	b083      	sub	sp, #12
    ee60:	0145      	lsls	r5, r0, #5
    ee62:	460c      	mov	r4, r1
    ee64:	f000 fa94 	bl	f390 <am_hal_interrupt_master_disable>
    ee68:	4b06      	ldr	r3, [pc, #24]	; (ee84 <am_hal_ctimer_clear+0x28>)
    ee6a:	9001      	str	r0, [sp, #4]
    ee6c:	58e9      	ldr	r1, [r5, r3]
    ee6e:	f004 2408 	and.w	r4, r4, #134219776	; 0x8000800
    ee72:	430c      	orrs	r4, r1
    ee74:	50ec      	str	r4, [r5, r3]
    ee76:	9801      	ldr	r0, [sp, #4]
    ee78:	b003      	add	sp, #12
    ee7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    ee7e:	f000 ba8b 	b.w	f398 <am_hal_interrupt_master_set>
    ee82:	bf00      	nop
    ee84:	4000800c 	.word	0x4000800c

0000ee88 <am_hal_ctimer_period_set>:
    ee88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ee8c:	b082      	sub	sp, #8
    ee8e:	0145      	lsls	r5, r0, #5
    ee90:	460e      	mov	r6, r1
    ee92:	4614      	mov	r4, r2
    ee94:	461f      	mov	r7, r3
    ee96:	f000 fa7b 	bl	f390 <am_hal_interrupt_master_disable>
    ee9a:	f8df 809c 	ldr.w	r8, [pc, #156]	; ef38 <am_hal_ctimer_period_set+0xb0>
    ee9e:	9001      	str	r0, [sp, #4]
    eea0:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    eea4:	f855 2008 	ldr.w	r2, [r5, r8]
    eea8:	4821      	ldr	r0, [pc, #132]	; (ef30 <am_hal_ctimer_period_set+0xa8>)
    eeaa:	d02f      	beq.n	ef0c <am_hal_ctimer_period_set+0x84>
    eeac:	f402 72c0 	and.w	r2, r2, #384	; 0x180
    eeb0:	2a80      	cmp	r2, #128	; 0x80
    eeb2:	d019      	beq.n	eee8 <am_hal_ctimer_period_set+0x60>
    eeb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    eeb8:	2100      	movs	r1, #0
    eeba:	4296      	cmp	r6, r2
    eebc:	460b      	mov	r3, r1
    eebe:	d01c      	beq.n	eefa <am_hal_ctimer_period_set+0x72>
    eec0:	4a1c      	ldr	r2, [pc, #112]	; (ef34 <am_hal_ctimer_period_set+0xac>)
    eec2:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    eec6:	eb05 0702 	add.w	r7, r5, r2
    eeca:	d027      	beq.n	ef1c <am_hal_ctimer_period_set+0x94>
    eecc:	0c1b      	lsrs	r3, r3, #16
    eece:	041b      	lsls	r3, r3, #16
    eed0:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
    eed4:	b2a4      	uxth	r4, r4
    eed6:	4321      	orrs	r1, r4
    eed8:	5029      	str	r1, [r5, r0]
    eeda:	50ab      	str	r3, [r5, r2]
    eedc:	9801      	ldr	r0, [sp, #4]
    eede:	b002      	add	sp, #8
    eee0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    eee4:	f000 ba58 	b.w	f398 <am_hal_interrupt_master_set>
    eee8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    eeec:	4296      	cmp	r6, r2
    eeee:	ea4f 4104 	mov.w	r1, r4, lsl #16
    eef2:	4623      	mov	r3, r4
    eef4:	eba4 0407 	sub.w	r4, r4, r7
    eef8:	d1e2      	bne.n	eec0 <am_hal_ctimer_period_set+0x38>
    eefa:	b2a4      	uxth	r4, r4
    eefc:	4321      	orrs	r1, r4
    eefe:	5029      	str	r1, [r5, r0]
    ef00:	9801      	ldr	r0, [sp, #4]
    ef02:	b002      	add	sp, #8
    ef04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ef08:	f000 ba46 	b.w	f398 <am_hal_interrupt_master_set>
    ef0c:	0c12      	lsrs	r2, r2, #16
    ef0e:	f402 72c0 	and.w	r2, r2, #384	; 0x180
    ef12:	2a80      	cmp	r2, #128	; 0x80
    ef14:	d0e8      	beq.n	eee8 <am_hal_ctimer_period_set+0x60>
    ef16:	4f07      	ldr	r7, [pc, #28]	; (ef34 <am_hal_ctimer_period_set+0xac>)
    ef18:	2100      	movs	r1, #0
    ef1a:	442f      	add	r7, r5
    ef1c:	b2a4      	uxth	r4, r4
    ef1e:	4321      	orrs	r1, r4
    ef20:	6039      	str	r1, [r7, #0]
    ef22:	9801      	ldr	r0, [sp, #4]
    ef24:	b002      	add	sp, #8
    ef26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ef2a:	f000 ba35 	b.w	f398 <am_hal_interrupt_master_set>
    ef2e:	bf00      	nop
    ef30:	40008004 	.word	0x40008004
    ef34:	40008008 	.word	0x40008008
    ef38:	4000800c 	.word	0x4000800c

0000ef3c <am_hal_ctimer_int_enable>:
    ef3c:	b510      	push	{r4, lr}
    ef3e:	b082      	sub	sp, #8
    ef40:	4604      	mov	r4, r0
    ef42:	f000 fa25 	bl	f390 <am_hal_interrupt_master_disable>
    ef46:	4a06      	ldr	r2, [pc, #24]	; (ef60 <am_hal_ctimer_int_enable+0x24>)
    ef48:	9001      	str	r0, [sp, #4]
    ef4a:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    ef4e:	4323      	orrs	r3, r4
    ef50:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    ef54:	9801      	ldr	r0, [sp, #4]
    ef56:	b002      	add	sp, #8
    ef58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ef5c:	f000 ba1c 	b.w	f398 <am_hal_interrupt_master_set>
    ef60:	40008000 	.word	0x40008000

0000ef64 <am_hal_ctimer_int_disable>:
    ef64:	b510      	push	{r4, lr}
    ef66:	b082      	sub	sp, #8
    ef68:	4604      	mov	r4, r0
    ef6a:	f000 fa11 	bl	f390 <am_hal_interrupt_master_disable>
    ef6e:	4a07      	ldr	r2, [pc, #28]	; (ef8c <am_hal_ctimer_int_disable+0x28>)
    ef70:	9001      	str	r0, [sp, #4]
    ef72:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    ef76:	ea23 0304 	bic.w	r3, r3, r4
    ef7a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    ef7e:	9801      	ldr	r0, [sp, #4]
    ef80:	b002      	add	sp, #8
    ef82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ef86:	f000 ba07 	b.w	f398 <am_hal_interrupt_master_set>
    ef8a:	bf00      	nop
    ef8c:	40008000 	.word	0x40008000

0000ef90 <am_hal_ctimer_int_clear>:
    ef90:	b510      	push	{r4, lr}
    ef92:	b082      	sub	sp, #8
    ef94:	4604      	mov	r4, r0
    ef96:	f000 f9fb 	bl	f390 <am_hal_interrupt_master_disable>
    ef9a:	4b05      	ldr	r3, [pc, #20]	; (efb0 <am_hal_ctimer_int_clear+0x20>)
    ef9c:	9001      	str	r0, [sp, #4]
    ef9e:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
    efa2:	9801      	ldr	r0, [sp, #4]
    efa4:	b002      	add	sp, #8
    efa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    efaa:	f000 b9f5 	b.w	f398 <am_hal_interrupt_master_set>
    efae:	bf00      	nop
    efb0:	40008000 	.word	0x40008000

0000efb4 <am_hal_ctimer_int_status_get>:
    efb4:	b510      	push	{r4, lr}
    efb6:	b082      	sub	sp, #8
    efb8:	4604      	mov	r4, r0
    efba:	f000 f9e9 	bl	f390 <am_hal_interrupt_master_disable>
    efbe:	4b0b      	ldr	r3, [pc, #44]	; (efec <am_hal_ctimer_int_status_get+0x38>)
    efc0:	9001      	str	r0, [sp, #4]
    efc2:	b154      	cbz	r4, efda <am_hal_ctimer_int_status_get+0x26>
    efc4:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
    efc8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    efcc:	9801      	ldr	r0, [sp, #4]
    efce:	401c      	ands	r4, r3
    efd0:	f000 f9e2 	bl	f398 <am_hal_interrupt_master_set>
    efd4:	4620      	mov	r0, r4
    efd6:	b002      	add	sp, #8
    efd8:	bd10      	pop	{r4, pc}
    efda:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
    efde:	9801      	ldr	r0, [sp, #4]
    efe0:	f000 f9da 	bl	f398 <am_hal_interrupt_master_set>
    efe4:	4620      	mov	r0, r4
    efe6:	b002      	add	sp, #8
    efe8:	bd10      	pop	{r4, pc}
    efea:	bf00      	nop
    efec:	40008000 	.word	0x40008000

0000eff0 <am_hal_debug_error>:
    eff0:	e7fe      	b.n	eff0 <am_hal_debug_error>
    eff2:	bf00      	nop

0000eff4 <am_hal_flash_delay>:
    eff4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    eff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    effa:	075b      	lsls	r3, r3, #29
    effc:	bf46      	itte	mi
    effe:	0040      	lslmi	r0, r0, #1
    f000:	230e      	movmi	r3, #14
    f002:	230b      	movpl	r3, #11
    f004:	4298      	cmp	r0, r3
    f006:	d902      	bls.n	f00e <am_hal_flash_delay+0x1a>
    f008:	4a01      	ldr	r2, [pc, #4]	; (f010 <am_hal_flash_delay+0x1c>)
    f00a:	1ac0      	subs	r0, r0, r3
    f00c:	4710      	bx	r2
    f00e:	4770      	bx	lr
    f010:	0800009d 	.word	0x0800009d

0000f014 <am_hal_flash_delay_status_check>:
    f014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f018:	f89d c020 	ldrb.w	ip, [sp, #32]
    f01c:	f8df 805c 	ldr.w	r8, [pc, #92]	; f07c <am_hal_flash_delay_status_check+0x68>
    f020:	4604      	mov	r4, r0
    f022:	460d      	mov	r5, r1
    f024:	4616      	mov	r6, r2
    f026:	461f      	mov	r7, r3
    f028:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    f02c:	f1bc 0f00 	cmp.w	ip, #0
    f030:	d00a      	beq.n	f048 <am_hal_flash_delay_status_check+0x34>
    f032:	e01a      	b.n	f06a <am_hal_flash_delay_status_check+0x56>
    f034:	b1f4      	cbz	r4, f074 <am_hal_flash_delay_status_check+0x60>
    f036:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    f03a:	f013 0f04 	tst.w	r3, #4
    f03e:	bf0c      	ite	eq
    f040:	2005      	moveq	r0, #5
    f042:	2012      	movne	r0, #18
    f044:	3c01      	subs	r4, #1
    f046:	47c0      	blx	r8
    f048:	6828      	ldr	r0, [r5, #0]
    f04a:	4030      	ands	r0, r6
    f04c:	42b8      	cmp	r0, r7
    f04e:	d0f1      	beq.n	f034 <am_hal_flash_delay_status_check+0x20>
    f050:	2000      	movs	r0, #0
    f052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f056:	b16c      	cbz	r4, f074 <am_hal_flash_delay_status_check+0x60>
    f058:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    f05c:	f013 0f04 	tst.w	r3, #4
    f060:	bf0c      	ite	eq
    f062:	2005      	moveq	r0, #5
    f064:	2012      	movne	r0, #18
    f066:	3c01      	subs	r4, #1
    f068:	47c0      	blx	r8
    f06a:	6828      	ldr	r0, [r5, #0]
    f06c:	4030      	ands	r0, r6
    f06e:	42b8      	cmp	r0, r7
    f070:	d1f1      	bne.n	f056 <am_hal_flash_delay_status_check+0x42>
    f072:	e7ed      	b.n	f050 <am_hal_flash_delay_status_check+0x3c>
    f074:	2004      	movs	r0, #4
    f076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f07a:	bf00      	nop
    f07c:	0800009d 	.word	0x0800009d

0000f080 <am_hal_flash_load_ui32>:
    f080:	4b00      	ldr	r3, [pc, #0]	; (f084 <am_hal_flash_load_ui32+0x4>)
    f082:	4718      	bx	r3
    f084:	08000075 	.word	0x08000075

0000f088 <am_hal_flash_store_ui32>:
    f088:	4b01      	ldr	r3, [pc, #4]	; (f090 <am_hal_flash_store_ui32+0x8>)
    f08a:	f043 0301 	orr.w	r3, r3, #1
    f08e:	4718      	bx	r3
    f090:	10001120 	.word	0x10001120

0000f094 <am_hal_gpio_pinconfig>:
    f094:	2831      	cmp	r0, #49	; 0x31
    f096:	f200 80c3 	bhi.w	f220 <am_hal_gpio_pinconfig+0x18c>
    f09a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f09e:	4604      	mov	r4, r0
    f0a0:	f011 07e0 	ands.w	r7, r1, #224	; 0xe0
    f0a4:	f001 0007 	and.w	r0, r1, #7
    f0a8:	b085      	sub	sp, #20
    f0aa:	f3c1 03c1 	ubfx	r3, r1, #3, #2
    f0ae:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    f0b2:	d00f      	beq.n	f0d4 <am_hal_gpio_pinconfig+0x40>
    f0b4:	f3c1 1642 	ubfx	r6, r1, #5, #3
    f0b8:	1db5      	adds	r5, r6, #6
    f0ba:	f005 0507 	and.w	r5, r5, #7
    f0be:	2d03      	cmp	r5, #3
    f0c0:	f042 0201 	orr.w	r2, r2, #1
    f0c4:	f240 80ae 	bls.w	f224 <am_hal_gpio_pinconfig+0x190>
    f0c8:	2fc0      	cmp	r7, #192	; 0xc0
    f0ca:	f000 80e1 	beq.w	f290 <am_hal_gpio_pinconfig+0x1fc>
    f0ce:	2f20      	cmp	r7, #32
    f0d0:	f000 80e3 	beq.w	f29a <am_hal_gpio_pinconfig+0x206>
    f0d4:	b163      	cbz	r3, f0f0 <am_hal_gpio_pinconfig+0x5c>
    f0d6:	2b01      	cmp	r3, #1
    f0d8:	f000 80d3 	beq.w	f282 <am_hal_gpio_pinconfig+0x1ee>
    f0dc:	2b02      	cmp	r3, #2
    f0de:	f040 80c9 	bne.w	f274 <am_hal_gpio_pinconfig+0x1e0>
    f0e2:	4b79      	ldr	r3, [pc, #484]	; (f2c8 <am_hal_gpio_pinconfig+0x234>)
    f0e4:	5d1b      	ldrb	r3, [r3, r4]
    f0e6:	075b      	lsls	r3, r3, #29
    f0e8:	f140 80c4 	bpl.w	f274 <am_hal_gpio_pinconfig+0x1e0>
    f0ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    f0f0:	4b76      	ldr	r3, [pc, #472]	; (f2cc <am_hal_gpio_pinconfig+0x238>)
    f0f2:	5d1b      	ldrb	r3, [r3, r4]
    f0f4:	4103      	asrs	r3, r0
    f0f6:	005b      	lsls	r3, r3, #1
    f0f8:	f003 0302 	and.w	r3, r3, #2
    f0fc:	4313      	orrs	r3, r2
    f0fe:	4a74      	ldr	r2, [pc, #464]	; (f2d0 <am_hal_gpio_pinconfig+0x23c>)
    f100:	5d12      	ldrb	r2, [r2, r4]
    f102:	4282      	cmp	r2, r0
    f104:	f000 8099 	beq.w	f23a <am_hal_gpio_pinconfig+0x1a6>
    f108:	f3c1 3000 	ubfx	r0, r1, #12, #1
    f10c:	f3c1 2581 	ubfx	r5, r1, #10, #2
    f110:	f3c1 3280 	ubfx	r2, r1, #14, #1
    f114:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    f118:	0a88      	lsrs	r0, r1, #10
    f11a:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    f11e:	f000 0008 	and.w	r0, r0, #8
    f122:	4302      	orrs	r2, r0
    f124:	f3c1 2007 	ubfx	r0, r1, #8, #8
    f128:	f000 050c 	and.w	r5, r0, #12
    f12c:	2d04      	cmp	r5, #4
    f12e:	f000 80a5 	beq.w	f27c <am_hal_gpio_pinconfig+0x1e8>
    f132:	4d68      	ldr	r5, [pc, #416]	; (f2d4 <am_hal_gpio_pinconfig+0x240>)
    f134:	682d      	ldr	r5, [r5, #0]
    f136:	eba1 0805 	sub.w	r8, r1, r5
    f13a:	fab8 f888 	clz	r8, r8
    f13e:	ea4f 1858 	mov.w	r8, r8, lsr #5
    f142:	f010 0f60 	tst.w	r0, #96	; 0x60
    f146:	bf04      	itt	eq
    f148:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
    f14c:	f360 0200 	bfieq	r2, r0, #0, #1
    f150:	00a0      	lsls	r0, r4, #2
    f152:	f3c1 2101 	ubfx	r1, r1, #8, #2
    f156:	2902      	cmp	r1, #2
    f158:	d05c      	beq.n	f214 <am_hal_gpio_pinconfig+0x180>
    f15a:	2903      	cmp	r1, #3
    f15c:	d058      	beq.n	f210 <am_hal_gpio_pinconfig+0x17c>
    f15e:	2901      	cmp	r1, #1
    f160:	ea4f 01c4 	mov.w	r1, r4, lsl #3
    f164:	bf08      	it	eq
    f166:	f043 0304 	orreq.w	r3, r3, #4
    f16a:	f001 0118 	and.w	r1, r1, #24
    f16e:	2700      	movs	r7, #0
    f170:	f000 001c 	and.w	r0, r0, #28
    f174:	fa02 f600 	lsl.w	r6, r2, r0
    f178:	220f      	movs	r2, #15
    f17a:	4082      	lsls	r2, r0
    f17c:	43d2      	mvns	r2, r2
    f17e:	f04f 09ff 	mov.w	r9, #255	; 0xff
    f182:	fa03 f501 	lsl.w	r5, r3, r1
    f186:	fa09 f901 	lsl.w	r9, r9, r1
    f18a:	9201      	str	r2, [sp, #4]
    f18c:	f000 f900 	bl	f390 <am_hal_interrupt_master_disable>
    f190:	f024 0a03 	bic.w	sl, r4, #3
    f194:	ea4f 0b54 	mov.w	fp, r4, lsr #1
    f198:	f10a 4c80 	add.w	ip, sl, #1073741824	; 0x40000000
    f19c:	4b4e      	ldr	r3, [pc, #312]	; (f2d8 <am_hal_gpio_pinconfig+0x244>)
    f19e:	494f      	ldr	r1, [pc, #316]	; (f2dc <am_hal_gpio_pinconfig+0x248>)
    f1a0:	9a01      	ldr	r2, [sp, #4]
    f1a2:	9003      	str	r0, [sp, #12]
    f1a4:	ea6f 0909 	mvn.w	r9, r9
    f1a8:	f02b 0b03 	bic.w	fp, fp, #3
    f1ac:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
    f1b0:	f1b8 0f00 	cmp.w	r8, #0
    f1b4:	d00b      	beq.n	f1ce <am_hal_gpio_pinconfig+0x13a>
    f1b6:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
    f1ba:	f004 081f 	and.w	r8, r4, #31
    f1be:	4848      	ldr	r0, [pc, #288]	; (f2e0 <am_hal_gpio_pinconfig+0x24c>)
    f1c0:	f00e 0e04 	and.w	lr, lr, #4
    f1c4:	2401      	movs	r4, #1
    f1c6:	fa04 f408 	lsl.w	r4, r4, r8
    f1ca:	f84e 4000 	str.w	r4, [lr, r0]
    f1ce:	4845      	ldr	r0, [pc, #276]	; (f2e4 <am_hal_gpio_pinconfig+0x250>)
    f1d0:	2473      	movs	r4, #115	; 0x73
    f1d2:	6604      	str	r4, [r0, #96]	; 0x60
    f1d4:	f8dc 4000 	ldr.w	r4, [ip]
    f1d8:	ea04 0409 	and.w	r4, r4, r9
    f1dc:	4325      	orrs	r5, r4
    f1de:	f8cc 5000 	str.w	r5, [ip]
    f1e2:	f85b 4003 	ldr.w	r4, [fp, r3]
    f1e6:	4022      	ands	r2, r4
    f1e8:	4332      	orrs	r2, r6
    f1ea:	f84b 2003 	str.w	r2, [fp, r3]
    f1ee:	f85a 3001 	ldr.w	r3, [sl, r1]
    f1f2:	ea03 0909 	and.w	r9, r3, r9
    f1f6:	2400      	movs	r4, #0
    f1f8:	ea49 0707 	orr.w	r7, r9, r7
    f1fc:	f84a 7001 	str.w	r7, [sl, r1]
    f200:	6604      	str	r4, [r0, #96]	; 0x60
    f202:	9803      	ldr	r0, [sp, #12]
    f204:	f000 f8c8 	bl	f398 <am_hal_interrupt_master_set>
    f208:	4620      	mov	r0, r4
    f20a:	b005      	add	sp, #20
    f20c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f210:	f043 0304 	orr.w	r3, r3, #4
    f214:	00e1      	lsls	r1, r4, #3
    f216:	f001 0118 	and.w	r1, r1, #24
    f21a:	2701      	movs	r7, #1
    f21c:	408f      	lsls	r7, r1
    f21e:	e7a7      	b.n	f170 <am_hal_gpio_pinconfig+0xdc>
    f220:	2006      	movs	r0, #6
    f222:	4770      	bx	lr
    f224:	4d28      	ldr	r5, [pc, #160]	; (f2c8 <am_hal_gpio_pinconfig+0x234>)
    f226:	5d2d      	ldrb	r5, [r5, r4]
    f228:	3e02      	subs	r6, #2
    f22a:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    f22e:	07ee      	lsls	r6, r5, #31
    f230:	d536      	bpl.n	f2a0 <am_hal_gpio_pinconfig+0x20c>
    f232:	2b00      	cmp	r3, #0
    f234:	f43f af5c 	beq.w	f0f0 <am_hal_gpio_pinconfig+0x5c>
    f238:	e74d      	b.n	f0d6 <am_hal_gpio_pinconfig+0x42>
    f23a:	f3c1 4202 	ubfx	r2, r1, #16, #3
    f23e:	2a07      	cmp	r2, #7
    f240:	d030      	beq.n	f2a4 <am_hal_gpio_pinconfig+0x210>
    f242:	4d29      	ldr	r5, [pc, #164]	; (f2e8 <am_hal_gpio_pinconfig+0x254>)
    f244:	f3c1 40c1 	ubfx	r0, r1, #19, #2
    f248:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    f24c:	f815 0024 	ldrb.w	r0, [r5, r4, lsl #2]
    f250:	4290      	cmp	r0, r2
    f252:	d029      	beq.n	f2a8 <am_hal_gpio_pinconfig+0x214>
    f254:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    f258:	00a0      	lsls	r0, r4, #2
    f25a:	786e      	ldrb	r6, [r5, #1]
    f25c:	4296      	cmp	r6, r2
    f25e:	d02d      	beq.n	f2bc <am_hal_gpio_pinconfig+0x228>
    f260:	78ae      	ldrb	r6, [r5, #2]
    f262:	4296      	cmp	r6, r2
    f264:	d02c      	beq.n	f2c0 <am_hal_gpio_pinconfig+0x22c>
    f266:	78ed      	ldrb	r5, [r5, #3]
    f268:	4295      	cmp	r5, r2
    f26a:	d02b      	beq.n	f2c4 <am_hal_gpio_pinconfig+0x230>
    f26c:	481f      	ldr	r0, [pc, #124]	; (f2ec <am_hal_gpio_pinconfig+0x258>)
    f26e:	b005      	add	sp, #20
    f270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f274:	481e      	ldr	r0, [pc, #120]	; (f2f0 <am_hal_gpio_pinconfig+0x25c>)
    f276:	b005      	add	sp, #20
    f278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f27c:	f04f 0801 	mov.w	r8, #1
    f280:	e75f      	b.n	f142 <am_hal_gpio_pinconfig+0xae>
    f282:	4b11      	ldr	r3, [pc, #68]	; (f2c8 <am_hal_gpio_pinconfig+0x234>)
    f284:	5d1b      	ldrb	r3, [r3, r4]
    f286:	079d      	lsls	r5, r3, #30
    f288:	d5f4      	bpl.n	f274 <am_hal_gpio_pinconfig+0x1e0>
    f28a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    f28e:	e72f      	b.n	f0f0 <am_hal_gpio_pinconfig+0x5c>
    f290:	2c14      	cmp	r4, #20
    f292:	f43f af1f 	beq.w	f0d4 <am_hal_gpio_pinconfig+0x40>
    f296:	4817      	ldr	r0, [pc, #92]	; (f2f4 <am_hal_gpio_pinconfig+0x260>)
    f298:	e7b7      	b.n	f20a <am_hal_gpio_pinconfig+0x176>
    f29a:	2c14      	cmp	r4, #20
    f29c:	f47f af1a 	bne.w	f0d4 <am_hal_gpio_pinconfig+0x40>
    f2a0:	4815      	ldr	r0, [pc, #84]	; (f2f8 <am_hal_gpio_pinconfig+0x264>)
    f2a2:	e7b2      	b.n	f20a <am_hal_gpio_pinconfig+0x176>
    f2a4:	4815      	ldr	r0, [pc, #84]	; (f2fc <am_hal_gpio_pinconfig+0x268>)
    f2a6:	e7b0      	b.n	f20a <am_hal_gpio_pinconfig+0x176>
    f2a8:	2200      	movs	r2, #0
    f2aa:	00a0      	lsls	r0, r4, #2
    f2ac:	0052      	lsls	r2, r2, #1
    f2ae:	f3c1 5540 	ubfx	r5, r1, #21, #1
    f2b2:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
    f2b6:	f04f 0800 	mov.w	r8, #0
    f2ba:	e74a      	b.n	f152 <am_hal_gpio_pinconfig+0xbe>
    f2bc:	2201      	movs	r2, #1
    f2be:	e7f5      	b.n	f2ac <am_hal_gpio_pinconfig+0x218>
    f2c0:	2202      	movs	r2, #2
    f2c2:	e7f3      	b.n	f2ac <am_hal_gpio_pinconfig+0x218>
    f2c4:	2203      	movs	r2, #3
    f2c6:	e7f1      	b.n	f2ac <am_hal_gpio_pinconfig+0x218>
    f2c8:	0001168c 	.word	0x0001168c
    f2cc:	000116c0 	.word	0x000116c0
    f2d0:	000117bc 	.word	0x000117bc
    f2d4:	00011684 	.word	0x00011684
    f2d8:	40010040 	.word	0x40010040
    f2dc:	400100e0 	.word	0x400100e0
    f2e0:	400100b4 	.word	0x400100b4
    f2e4:	40010000 	.word	0x40010000
    f2e8:	000116f4 	.word	0x000116f4
    f2ec:	08000104 	.word	0x08000104
    f2f0:	08000102 	.word	0x08000102
    f2f4:	08000101 	.word	0x08000101
    f2f8:	08000100 	.word	0x08000100
    f2fc:	08000103 	.word	0x08000103

0000f300 <am_hal_gpio_state_write>:
    f300:	2831      	cmp	r0, #49	; 0x31
    f302:	d81a      	bhi.n	f33a <am_hal_gpio_state_write+0x3a>
    f304:	b570      	push	{r4, r5, r6, lr}
    f306:	2905      	cmp	r1, #5
    f308:	b082      	sub	sp, #8
    f30a:	460d      	mov	r5, r1
    f30c:	d812      	bhi.n	f334 <am_hal_gpio_state_write+0x34>
    f30e:	f000 031f 	and.w	r3, r0, #31
    f312:	2201      	movs	r2, #1
    f314:	08c0      	lsrs	r0, r0, #3
    f316:	fa02 f603 	lsl.w	r6, r2, r3
    f31a:	f000 0404 	and.w	r4, r0, #4
    f31e:	f000 f837 	bl	f390 <am_hal_interrupt_master_disable>
    f322:	3d01      	subs	r5, #1
    f324:	9001      	str	r0, [sp, #4]
    f326:	2d04      	cmp	r5, #4
    f328:	d821      	bhi.n	f36e <am_hal_gpio_state_write+0x6e>
    f32a:	e8df f005 	tbb	[pc, r5]
    f32e:	1512      	.short	0x1512
    f330:	1d1a      	.short	0x1d1a
    f332:	08          	.byte	0x08
    f333:	00          	.byte	0x00
    f334:	2006      	movs	r0, #6
    f336:	b002      	add	sp, #8
    f338:	bd70      	pop	{r4, r5, r6, pc}
    f33a:	2005      	movs	r0, #5
    f33c:	4770      	bx	lr
    f33e:	4a0d      	ldr	r2, [pc, #52]	; (f374 <am_hal_gpio_state_write+0x74>)
    f340:	58a3      	ldr	r3, [r4, r2]
    f342:	4073      	eors	r3, r6
    f344:	50a3      	str	r3, [r4, r2]
    f346:	9801      	ldr	r0, [sp, #4]
    f348:	f000 f826 	bl	f398 <am_hal_interrupt_master_set>
    f34c:	2000      	movs	r0, #0
    f34e:	b002      	add	sp, #8
    f350:	bd70      	pop	{r4, r5, r6, pc}
    f352:	4b09      	ldr	r3, [pc, #36]	; (f378 <am_hal_gpio_state_write+0x78>)
    f354:	50e6      	str	r6, [r4, r3]
    f356:	e7f6      	b.n	f346 <am_hal_gpio_state_write+0x46>
    f358:	4a08      	ldr	r2, [pc, #32]	; (f37c <am_hal_gpio_state_write+0x7c>)
    f35a:	58a3      	ldr	r3, [r4, r2]
    f35c:	4073      	eors	r3, r6
    f35e:	50a3      	str	r3, [r4, r2]
    f360:	e7f1      	b.n	f346 <am_hal_gpio_state_write+0x46>
    f362:	4b04      	ldr	r3, [pc, #16]	; (f374 <am_hal_gpio_state_write+0x74>)
    f364:	50e6      	str	r6, [r4, r3]
    f366:	e7ee      	b.n	f346 <am_hal_gpio_state_write+0x46>
    f368:	4b05      	ldr	r3, [pc, #20]	; (f380 <am_hal_gpio_state_write+0x80>)
    f36a:	50e6      	str	r6, [r4, r3]
    f36c:	e7eb      	b.n	f346 <am_hal_gpio_state_write+0x46>
    f36e:	4b05      	ldr	r3, [pc, #20]	; (f384 <am_hal_gpio_state_write+0x84>)
    f370:	50e6      	str	r6, [r4, r3]
    f372:	e7e8      	b.n	f346 <am_hal_gpio_state_write+0x46>
    f374:	400100b4 	.word	0x400100b4
    f378:	40010090 	.word	0x40010090
    f37c:	40010088 	.word	0x40010088
    f380:	400100a8 	.word	0x400100a8
    f384:	40010098 	.word	0x40010098

0000f388 <am_hal_interrupt_master_enable>:
    f388:	f3ef 8010 	mrs	r0, PRIMASK
    f38c:	b662      	cpsie	i
    f38e:	4770      	bx	lr

0000f390 <am_hal_interrupt_master_disable>:
    f390:	f3ef 8010 	mrs	r0, PRIMASK
    f394:	b672      	cpsid	i
    f396:	4770      	bx	lr

0000f398 <am_hal_interrupt_master_set>:
    f398:	f380 8810 	msr	PRIMASK, r0
    f39c:	4770      	bx	lr
    f39e:	bf00      	nop

0000f3a0 <am_hal_itm_enable>:
    f3a0:	4a0e      	ldr	r2, [pc, #56]	; (f3dc <am_hal_itm_enable+0x3c>)
    f3a2:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    f3a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    f3aa:	b410      	push	{r4}
    f3ac:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    f3b0:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    f3b4:	01db      	lsls	r3, r3, #7
    f3b6:	d5fb      	bpl.n	f3b0 <am_hal_itm_enable+0x10>
    f3b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    f3bc:	4c08      	ldr	r4, [pc, #32]	; (f3e0 <am_hal_itm_enable+0x40>)
    f3be:	4a09      	ldr	r2, [pc, #36]	; (f3e4 <am_hal_itm_enable+0x44>)
    f3c0:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    f3c4:	200f      	movs	r0, #15
    f3c6:	f04f 31ff 	mov.w	r1, #4294967295
    f3ca:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    f3ce:	f85d 4b04 	ldr.w	r4, [sp], #4
    f3d2:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    f3d6:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    f3da:	4770      	bx	lr
    f3dc:	e000ed00 	.word	0xe000ed00
    f3e0:	c5acce55 	.word	0xc5acce55
    f3e4:	00150511 	.word	0x00150511

0000f3e8 <am_hal_itm_print>:
    f3e8:	7803      	ldrb	r3, [r0, #0]
    f3ea:	b1a3      	cbz	r3, f416 <am_hal_itm_print+0x2e>
    f3ec:	4603      	mov	r3, r0
    f3ee:	f1c0 0c01 	rsb	ip, r0, #1
    f3f2:	eb0c 0103 	add.w	r1, ip, r3
    f3f6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    f3fa:	2a00      	cmp	r2, #0
    f3fc:	d1f9      	bne.n	f3f2 <am_hal_itm_print+0xa>
    f3fe:	4401      	add	r1, r0
    f400:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    f404:	f810 cb01 	ldrb.w	ip, [r0], #1
    f408:	6813      	ldr	r3, [r2, #0]
    f40a:	2b00      	cmp	r3, #0
    f40c:	d0fc      	beq.n	f408 <am_hal_itm_print+0x20>
    f40e:	4288      	cmp	r0, r1
    f410:	f882 c000 	strb.w	ip, [r2]
    f414:	d1f6      	bne.n	f404 <am_hal_itm_print+0x1c>
    f416:	4770      	bx	lr

0000f418 <am_hal_mcuctrl_control>:
    f418:	b570      	push	{r4, r5, r6, lr}
    f41a:	b082      	sub	sp, #8
    f41c:	2804      	cmp	r0, #4
    f41e:	f200 80b9 	bhi.w	f594 <am_hal_mcuctrl_control+0x17c>
    f422:	e8df f000 	tbb	[pc, r0]
    f426:	3a2f      	.short	0x3a2f
    f428:	5645      	.short	0x5645
    f42a:	03          	.byte	0x03
    f42b:	00          	.byte	0x00
    f42c:	680a      	ldr	r2, [r1, #0]
    f42e:	f032 1433 	bics.w	r4, r2, #3342387	; 0x330033
    f432:	f040 80af 	bne.w	f594 <am_hal_mcuctrl_control+0x17c>
    f436:	4b58      	ldr	r3, [pc, #352]	; (f598 <am_hal_mcuctrl_control+0x180>)
    f438:	f8d3 1284 	ldr.w	r1, [r3, #644]	; 0x284
    f43c:	00cb      	lsls	r3, r1, #3
    f43e:	0048      	lsls	r0, r1, #1
    f440:	f000 0004 	and.w	r0, r0, #4
    f444:	f003 0308 	and.w	r3, r3, #8
    f448:	4303      	orrs	r3, r0
    f44a:	00d0      	lsls	r0, r2, #3
    f44c:	f000 0008 	and.w	r0, r0, #8
    f450:	4303      	orrs	r3, r0
    f452:	0050      	lsls	r0, r2, #1
    f454:	f000 0004 	and.w	r0, r0, #4
    f458:	4303      	orrs	r3, r0
    f45a:	0bd0      	lsrs	r0, r2, #15
    f45c:	f000 0002 	and.w	r0, r0, #2
    f460:	4303      	orrs	r3, r0
    f462:	f3c2 4040 	ubfx	r0, r2, #17, #1
    f466:	4303      	orrs	r3, r0
    f468:	3b01      	subs	r3, #1
    f46a:	2b0e      	cmp	r3, #14
    f46c:	f200 808e 	bhi.w	f58c <am_hal_mcuctrl_control+0x174>
    f470:	e8df f003 	tbb	[pc, r3]
    f474:	75404083 	.word	0x75404083
    f478:	7740758c 	.word	0x7740758c
    f47c:	7f404077 	.word	0x7f404077
    f480:	7577      	.short	0x7577
    f482:	40          	.byte	0x40
    f483:	00          	.byte	0x00
    f484:	4a44      	ldr	r2, [pc, #272]	; (f598 <am_hal_mcuctrl_control+0x180>)
    f486:	f892 31d0 	ldrb.w	r3, [r2, #464]	; 0x1d0
    f48a:	f043 0301 	orr.w	r3, r3, #1
    f48e:	2400      	movs	r4, #0
    f490:	f882 31d0 	strb.w	r3, [r2, #464]	; 0x1d0
    f494:	4620      	mov	r0, r4
    f496:	b002      	add	sp, #8
    f498:	bd70      	pop	{r4, r5, r6, pc}
    f49a:	4a3f      	ldr	r2, [pc, #252]	; (f598 <am_hal_mcuctrl_control+0x180>)
    f49c:	f892 31d0 	ldrb.w	r3, [r2, #464]	; 0x1d0
    f4a0:	2400      	movs	r4, #0
    f4a2:	f36f 0300 	bfc	r3, #0, #1
    f4a6:	4620      	mov	r0, r4
    f4a8:	f882 31d0 	strb.w	r3, [r2, #464]	; 0x1d0
    f4ac:	b002      	add	sp, #8
    f4ae:	bd70      	pop	{r4, r5, r6, pc}
    f4b0:	4b39      	ldr	r3, [pc, #228]	; (f598 <am_hal_mcuctrl_control+0x180>)
    f4b2:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    f4b6:	f022 021f 	bic.w	r2, r2, #31
    f4ba:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    f4be:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    f4c2:	2400      	movs	r4, #0
    f4c4:	f042 0207 	orr.w	r2, r2, #7
    f4c8:	4620      	mov	r0, r4
    f4ca:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    f4ce:	b002      	add	sp, #8
    f4d0:	bd70      	pop	{r4, r5, r6, pc}
    f4d2:	4b31      	ldr	r3, [pc, #196]	; (f598 <am_hal_mcuctrl_control+0x180>)
    f4d4:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    f4d8:	f022 021f 	bic.w	r2, r2, #31
    f4dc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    f4e0:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    f4e4:	2400      	movs	r4, #0
    f4e6:	f042 0218 	orr.w	r2, r2, #24
    f4ea:	4620      	mov	r0, r4
    f4ec:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    f4f0:	b002      	add	sp, #8
    f4f2:	bd70      	pop	{r4, r5, r6, pc}
    f4f4:	2600      	movs	r6, #0
    f4f6:	f06f 0503 	mvn.w	r5, #3
    f4fa:	084b      	lsrs	r3, r1, #1
    f4fc:	08c9      	lsrs	r1, r1, #3
    f4fe:	f001 0104 	and.w	r1, r1, #4
    f502:	f003 0308 	and.w	r3, r3, #8
    f506:	430b      	orrs	r3, r1
    f508:	0851      	lsrs	r1, r2, #1
    f50a:	ea43 5352 	orr.w	r3, r3, r2, lsr #21
    f50e:	f001 0108 	and.w	r1, r1, #8
    f512:	430b      	orrs	r3, r1
    f514:	08d1      	lsrs	r1, r2, #3
    f516:	f001 0104 	and.w	r1, r1, #4
    f51a:	0cd2      	lsrs	r2, r2, #19
    f51c:	430b      	orrs	r3, r1
    f51e:	f002 0202 	and.w	r2, r2, #2
    f522:	431a      	orrs	r2, r3
    f524:	3a01      	subs	r2, #1
    f526:	2a0e      	cmp	r2, #14
    f528:	d80b      	bhi.n	f542 <am_hal_mcuctrl_control+0x12a>
    f52a:	e8df f002 	tbb	[pc, r2]
    f52e:	082c      	.short	0x082c
    f530:	180a1808 	.word	0x180a1808
    f534:	081e1e08 	.word	0x081e1e08
    f538:	181e2a08 	.word	0x181e2a08
    f53c:	08          	.byte	0x08
    f53d:	00          	.byte	0x00
    f53e:	f06f 0530 	mvn.w	r5, #48	; 0x30
    f542:	f7ff ff25 	bl	f390 <am_hal_interrupt_master_disable>
    f546:	4b14      	ldr	r3, [pc, #80]	; (f598 <am_hal_mcuctrl_control+0x180>)
    f548:	9001      	str	r0, [sp, #4]
    f54a:	f8d3 2284 	ldr.w	r2, [r3, #644]	; 0x284
    f54e:	4316      	orrs	r6, r2
    f550:	4035      	ands	r5, r6
    f552:	f8c3 5284 	str.w	r5, [r3, #644]	; 0x284
    f556:	9801      	ldr	r0, [sp, #4]
    f558:	f7ff ff1e 	bl	f398 <am_hal_interrupt_master_set>
    f55c:	e79a      	b.n	f494 <am_hal_mcuctrl_control+0x7c>
    f55e:	2407      	movs	r4, #7
    f560:	e798      	b.n	f494 <am_hal_mcuctrl_control+0x7c>
    f562:	f06f 0502 	mvn.w	r5, #2
    f566:	2601      	movs	r6, #1
    f568:	e7c7      	b.n	f4fa <am_hal_mcuctrl_control+0xe2>
    f56a:	f06f 0520 	mvn.w	r5, #32
    f56e:	2610      	movs	r6, #16
    f570:	e7e7      	b.n	f542 <am_hal_mcuctrl_control+0x12a>
    f572:	f04f 35ff 	mov.w	r5, #4294967295
    f576:	2603      	movs	r6, #3
    f578:	e7bf      	b.n	f4fa <am_hal_mcuctrl_control+0xe2>
    f57a:	2600      	movs	r6, #0
    f57c:	f06f 0502 	mvn.w	r5, #2
    f580:	e7bb      	b.n	f4fa <am_hal_mcuctrl_control+0xe2>
    f582:	2630      	movs	r6, #48	; 0x30
    f584:	e7dd      	b.n	f542 <am_hal_mcuctrl_control+0x12a>
    f586:	f06f 0520 	mvn.w	r5, #32
    f58a:	e7da      	b.n	f542 <am_hal_mcuctrl_control+0x12a>
    f58c:	2600      	movs	r6, #0
    f58e:	f04f 35ff 	mov.w	r5, #4294967295
    f592:	e7b2      	b.n	f4fa <am_hal_mcuctrl_control+0xe2>
    f594:	2406      	movs	r4, #6
    f596:	e77d      	b.n	f494 <am_hal_mcuctrl_control+0x7c>
    f598:	40020000 	.word	0x40020000

0000f59c <am_hal_mcuctrl_info_get>:
    f59c:	2900      	cmp	r1, #0
    f59e:	f000 808f 	beq.w	f6c0 <am_hal_mcuctrl_info_get+0x124>
    f5a2:	2801      	cmp	r0, #1
    f5a4:	b430      	push	{r4, r5}
    f5a6:	d006      	beq.n	f5b6 <am_hal_mcuctrl_info_get+0x1a>
    f5a8:	2802      	cmp	r0, #2
    f5aa:	d06d      	beq.n	f688 <am_hal_mcuctrl_info_get+0xec>
    f5ac:	2800      	cmp	r0, #0
    f5ae:	d055      	beq.n	f65c <am_hal_mcuctrl_info_get+0xc0>
    f5b0:	2006      	movs	r0, #6
    f5b2:	bc30      	pop	{r4, r5}
    f5b4:	4770      	bx	lr
    f5b6:	4a43      	ldr	r2, [pc, #268]	; (f6c4 <am_hal_mcuctrl_info_get+0x128>)
    f5b8:	4843      	ldr	r0, [pc, #268]	; (f6c8 <am_hal_mcuctrl_info_get+0x12c>)
    f5ba:	6813      	ldr	r3, [r2, #0]
    f5bc:	600b      	str	r3, [r1, #0]
    f5be:	6854      	ldr	r4, [r2, #4]
    f5c0:	604c      	str	r4, [r1, #4]
    f5c2:	6894      	ldr	r4, [r2, #8]
    f5c4:	608c      	str	r4, [r1, #8]
    f5c6:	68d4      	ldr	r4, [r2, #12]
    f5c8:	60cc      	str	r4, [r1, #12]
    f5ca:	f3c3 5503 	ubfx	r5, r3, #20, #4
    f5ce:	6914      	ldr	r4, [r2, #16]
    f5d0:	610c      	str	r4, [r1, #16]
    f5d2:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    f5d6:	4c3d      	ldr	r4, [pc, #244]	; (f6cc <am_hal_mcuctrl_info_get+0x130>)
    f5d8:	6950      	ldr	r0, [r2, #20]
    f5da:	6148      	str	r0, [r1, #20]
    f5dc:	f003 0201 	and.w	r2, r3, #1
    f5e0:	f3c3 4303 	ubfx	r3, r3, #16, #4
    f5e4:	e9c1 2506 	strd	r2, r5, [r1, #24]
    f5e8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    f5ec:	4a38      	ldr	r2, [pc, #224]	; (f6d0 <am_hal_mcuctrl_info_get+0x134>)
    f5ee:	620b      	str	r3, [r1, #32]
    f5f0:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    f5f4:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    f5f8:	b2db      	uxtb	r3, r3
    f5fa:	f000 000f 	and.w	r0, r0, #15
    f5fe:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    f602:	624b      	str	r3, [r1, #36]	; 0x24
    f604:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    f608:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
    f60c:	f3c3 1303 	ubfx	r3, r3, #4, #4
    f610:	f000 000f 	and.w	r0, r0, #15
    f614:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
    f618:	628b      	str	r3, [r1, #40]	; 0x28
    f61a:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    f61e:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
    f622:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    f626:	f3c0 1003 	ubfx	r0, r0, #4, #4
    f62a:	4303      	orrs	r3, r0
    f62c:	62cb      	str	r3, [r1, #44]	; 0x2c
    f62e:	f8d2 40fc 	ldr.w	r4, [r2, #252]	; 0xfc
    f632:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    f636:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    f63a:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    f63e:	b2db      	uxtb	r3, r3
    f640:	041b      	lsls	r3, r3, #16
    f642:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    f646:	fa5f fc82 	uxtb.w	ip, r2
    f64a:	ea43 030c 	orr.w	r3, r3, ip
    f64e:	b2c2      	uxtb	r2, r0
    f650:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    f654:	630b      	str	r3, [r1, #48]	; 0x30
    f656:	2000      	movs	r0, #0
    f658:	bc30      	pop	{r4, r5}
    f65a:	4770      	bx	lr
    f65c:	4a19      	ldr	r2, [pc, #100]	; (f6c4 <am_hal_mcuctrl_info_get+0x128>)
    f65e:	6993      	ldr	r3, [r2, #24]
    f660:	f3c3 1480 	ubfx	r4, r3, #6, #1
    f664:	700c      	strb	r4, [r1, #0]
    f666:	f8d2 41a0 	ldr.w	r4, [r2, #416]	; 0x1a0
    f66a:	f3c3 0380 	ubfx	r3, r3, #2, #1
    f66e:	704b      	strb	r3, [r1, #1]
    f670:	f3c4 6381 	ubfx	r3, r4, #26, #2
    f674:	710b      	strb	r3, [r1, #4]
    f676:	6953      	ldr	r3, [r2, #20]
    f678:	f3c3 0240 	ubfx	r2, r3, #1, #1
    f67c:	f003 0301 	and.w	r3, r3, #1
    f680:	bc30      	pop	{r4, r5}
    f682:	708a      	strb	r2, [r1, #2]
    f684:	70cb      	strb	r3, [r1, #3]
    f686:	4770      	bx	lr
    f688:	4a0e      	ldr	r2, [pc, #56]	; (f6c4 <am_hal_mcuctrl_info_get+0x128>)
    f68a:	6848      	ldr	r0, [r1, #4]
    f68c:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    f690:	f003 0401 	and.w	r4, r3, #1
    f694:	700c      	strb	r4, [r1, #0]
    f696:	f3c3 0440 	ubfx	r4, r3, #1, #1
    f69a:	720c      	strb	r4, [r1, #8]
    f69c:	f8d2 41c4 	ldr.w	r4, [r2, #452]	; 0x1c4
    f6a0:	60cc      	str	r4, [r1, #12]
    f6a2:	f8d2 41c0 	ldr.w	r4, [r2, #448]	; 0x1c0
    f6a6:	4320      	orrs	r0, r4
    f6a8:	f3c3 0380 	ubfx	r3, r3, #2, #1
    f6ac:	6048      	str	r0, [r1, #4]
    f6ae:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    f6b2:	740b      	strb	r3, [r1, #16]
    f6b4:	694b      	ldr	r3, [r1, #20]
    f6b6:	4313      	orrs	r3, r2
    f6b8:	2000      	movs	r0, #0
    f6ba:	bc30      	pop	{r4, r5}
    f6bc:	614b      	str	r3, [r1, #20]
    f6be:	4770      	bx	lr
    f6c0:	2006      	movs	r0, #6
    f6c2:	4770      	bx	lr
    f6c4:	40020000 	.word	0x40020000
    f6c8:	000117f0 	.word	0x000117f0
    f6cc:	00011830 	.word	0x00011830
    f6d0:	f0000f00 	.word	0xf0000f00

0000f6d4 <mspi_dummy_callback>:
    f6d4:	4770      	bx	lr
    f6d6:	bf00      	nop

0000f6d8 <mspi_seq_loopback>:
    f6d8:	f8d0 382c 	ldr.w	r3, [r0, #2092]	; 0x82c
    f6dc:	4a07      	ldr	r2, [pc, #28]	; (f6fc <mspi_seq_loopback+0x24>)
    f6de:	b410      	push	{r4}
    f6e0:	3301      	adds	r3, #1
    f6e2:	2400      	movs	r4, #0
    f6e4:	e9c0 4306 	strd	r4, r3, [r0, #24]
    f6e8:	2101      	movs	r1, #1
    f6ea:	2340      	movs	r3, #64	; 0x40
    f6ec:	f880 1830 	strb.w	r1, [r0, #2096]	; 0x830
    f6f0:	f85d 4b04 	ldr.w	r4, [sp], #4
    f6f4:	f8c2 32b4 	str.w	r3, [r2, #692]	; 0x2b4
    f6f8:	4770      	bx	lr
    f6fa:	bf00      	nop
    f6fc:	50014000 	.word	0x50014000

0000f700 <mspi_device_configure.constprop.0>:
    f700:	b410      	push	{r4}
    f702:	2813      	cmp	r0, #19
    f704:	f200 8123 	bhi.w	f94e <mspi_device_configure.constprop.0+0x24e>
    f708:	e8df f010 	tbh	[pc, r0, lsl #1]
    f70c:	007d0096 	.word	0x007d0096
    f710:	00670072 	.word	0x00670072
    f714:	0051005c 	.word	0x0051005c
    f718:	0033004e 	.word	0x0033004e
    f71c:	00140014 	.word	0x00140014
    f720:	011c0018 	.word	0x011c0018
    f724:	00fa010b 	.word	0x00fa010b
    f728:	00d800e9 	.word	0x00d800e9
    f72c:	00b400cd 	.word	0x00b400cd
    f730:	00ae00b1 	.word	0x00ae00b1
    f734:	2006      	movs	r0, #6
    f736:	f85d 4b04 	ldr.w	r4, [sp], #4
    f73a:	4770      	bx	lr
    f73c:	4b85      	ldr	r3, [pc, #532]	; (f954 <mspi_device_configure.constprop.0+0x254>)
    f73e:	6859      	ldr	r1, [r3, #4]
    f740:	2001      	movs	r0, #1
    f742:	f360 0103 	bfi	r1, r0, #0, #4
    f746:	6059      	str	r1, [r3, #4]
    f748:	6859      	ldr	r1, [r3, #4]
    f74a:	f36f 11c7 	bfc	r1, #7, #1
    f74e:	6059      	str	r1, [r3, #4]
    f750:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
    f754:	2200      	movs	r2, #0
    f756:	f240 1403 	movw	r4, #259	; 0x103
    f75a:	f360 210a 	bfi	r1, r0, #8, #3
    f75e:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
    f762:	4610      	mov	r0, r2
    f764:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    f768:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
    f76c:	f85d 4b04 	ldr.w	r4, [sp], #4
    f770:	4770      	bx	lr
    f772:	4b78      	ldr	r3, [pc, #480]	; (f954 <mspi_device_configure.constprop.0+0x254>)
    f774:	200e      	movs	r0, #14
    f776:	6859      	ldr	r1, [r3, #4]
    f778:	f360 0103 	bfi	r1, r0, #0, #4
    f77c:	6059      	str	r1, [r3, #4]
    f77e:	6859      	ldr	r1, [r3, #4]
    f780:	2200      	movs	r2, #0
    f782:	f240 14ff 	movw	r4, #511	; 0x1ff
    f786:	f36f 11c7 	bfc	r1, #7, #1
    f78a:	6059      	str	r1, [r3, #4]
    f78c:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
    f790:	f36f 210a 	bfc	r1, #8, #3
    f794:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
    f798:	4610      	mov	r0, r2
    f79a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    f79e:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
    f7a2:	f85d 4b04 	ldr.w	r4, [sp], #4
    f7a6:	4770      	bx	lr
    f7a8:	4b6a      	ldr	r3, [pc, #424]	; (f954 <mspi_device_configure.constprop.0+0x254>)
    f7aa:	200d      	movs	r0, #13
    f7ac:	e7e3      	b.n	f776 <mspi_device_configure.constprop.0+0x76>
    f7ae:	4b69      	ldr	r3, [pc, #420]	; (f954 <mspi_device_configure.constprop.0+0x254>)
    f7b0:	6859      	ldr	r1, [r3, #4]
    f7b2:	200a      	movs	r0, #10
    f7b4:	f360 0103 	bfi	r1, r0, #0, #4
    f7b8:	6059      	str	r1, [r3, #4]
    f7ba:	6859      	ldr	r1, [r3, #4]
    f7bc:	2200      	movs	r2, #0
    f7be:	f44f 74f8 	mov.w	r4, #496	; 0x1f0
    f7c2:	e7e0      	b.n	f786 <mspi_device_configure.constprop.0+0x86>
    f7c4:	4b63      	ldr	r3, [pc, #396]	; (f954 <mspi_device_configure.constprop.0+0x254>)
    f7c6:	6859      	ldr	r1, [r3, #4]
    f7c8:	2009      	movs	r0, #9
    f7ca:	f360 0103 	bfi	r1, r0, #0, #4
    f7ce:	6059      	str	r1, [r3, #4]
    f7d0:	6859      	ldr	r1, [r3, #4]
    f7d2:	2200      	movs	r2, #0
    f7d4:	f240 140f 	movw	r4, #271	; 0x10f
    f7d8:	e7d5      	b.n	f786 <mspi_device_configure.constprop.0+0x86>
    f7da:	4b5e      	ldr	r3, [pc, #376]	; (f954 <mspi_device_configure.constprop.0+0x254>)
    f7dc:	2006      	movs	r0, #6
    f7de:	6859      	ldr	r1, [r3, #4]
    f7e0:	f360 0103 	bfi	r1, r0, #0, #4
    f7e4:	6059      	str	r1, [r3, #4]
    f7e6:	6859      	ldr	r1, [r3, #4]
    f7e8:	2200      	movs	r2, #0
    f7ea:	f44f 7498 	mov.w	r4, #304	; 0x130
    f7ee:	e7ca      	b.n	f786 <mspi_device_configure.constprop.0+0x86>
    f7f0:	4b58      	ldr	r3, [pc, #352]	; (f954 <mspi_device_configure.constprop.0+0x254>)
    f7f2:	2005      	movs	r0, #5
    f7f4:	6859      	ldr	r1, [r3, #4]
    f7f6:	f360 0103 	bfi	r1, r0, #0, #4
    f7fa:	6059      	str	r1, [r3, #4]
    f7fc:	6859      	ldr	r1, [r3, #4]
    f7fe:	2200      	movs	r2, #0
    f800:	f240 1403 	movw	r4, #259	; 0x103
    f804:	e7bf      	b.n	f786 <mspi_device_configure.constprop.0+0x86>
    f806:	4b53      	ldr	r3, [pc, #332]	; (f954 <mspi_device_configure.constprop.0+0x254>)
    f808:	685a      	ldr	r2, [r3, #4]
    f80a:	2002      	movs	r0, #2
    f80c:	f360 0203 	bfi	r2, r0, #0, #4
    f810:	605a      	str	r2, [r3, #4]
    f812:	685a      	ldr	r2, [r3, #4]
    f814:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    f818:	605a      	str	r2, [r3, #4]
    f81a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    f81e:	2100      	movs	r1, #0
    f820:	f44f 7498 	mov.w	r4, #304	; 0x130
    f824:	f36f 220a 	bfc	r2, #8, #3
    f828:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    f82c:	4608      	mov	r0, r1
    f82e:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    f832:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
    f836:	e77e      	b.n	f736 <mspi_device_configure.constprop.0+0x36>
    f838:	4b46      	ldr	r3, [pc, #280]	; (f954 <mspi_device_configure.constprop.0+0x254>)
    f83a:	685a      	ldr	r2, [r3, #4]
    f83c:	2401      	movs	r4, #1
    f83e:	f364 0203 	bfi	r2, r4, #0, #4
    f842:	605a      	str	r2, [r3, #4]
    f844:	685a      	ldr	r2, [r3, #4]
    f846:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    f84a:	605a      	str	r2, [r3, #4]
    f84c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    f850:	f36f 220a 	bfc	r2, #8, #3
    f854:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    f858:	2100      	movs	r1, #0
    f85a:	f240 1203 	movw	r2, #259	; 0x103
    f85e:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    f862:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    f866:	e766      	b.n	f736 <mspi_device_configure.constprop.0+0x36>
    f868:	4b3a      	ldr	r3, [pc, #232]	; (f954 <mspi_device_configure.constprop.0+0x254>)
    f86a:	2002      	movs	r0, #2
    f86c:	e7b7      	b.n	f7de <mspi_device_configure.constprop.0+0xde>
    f86e:	4b39      	ldr	r3, [pc, #228]	; (f954 <mspi_device_configure.constprop.0+0x254>)
    f870:	2001      	movs	r0, #1
    f872:	e7bf      	b.n	f7f4 <mspi_device_configure.constprop.0+0xf4>
    f874:	4b37      	ldr	r3, [pc, #220]	; (f954 <mspi_device_configure.constprop.0+0x254>)
    f876:	685a      	ldr	r2, [r3, #4]
    f878:	2002      	movs	r0, #2
    f87a:	f360 0203 	bfi	r2, r0, #0, #4
    f87e:	605a      	str	r2, [r3, #4]
    f880:	685a      	ldr	r2, [r3, #4]
    f882:	2100      	movs	r1, #0
    f884:	f44f 74f8 	mov.w	r4, #496	; 0x1f0
    f888:	f36f 12c7 	bfc	r2, #7, #1
    f88c:	605a      	str	r2, [r3, #4]
    f88e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    f892:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
    f896:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    f89a:	4608      	mov	r0, r1
    f89c:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    f8a0:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
    f8a4:	e747      	b.n	f736 <mspi_device_configure.constprop.0+0x36>
    f8a6:	4b2b      	ldr	r3, [pc, #172]	; (f954 <mspi_device_configure.constprop.0+0x254>)
    f8a8:	685a      	ldr	r2, [r3, #4]
    f8aa:	2001      	movs	r0, #1
    f8ac:	f360 0203 	bfi	r2, r0, #0, #4
    f8b0:	605a      	str	r2, [r3, #4]
    f8b2:	685a      	ldr	r2, [r3, #4]
    f8b4:	2100      	movs	r1, #0
    f8b6:	f240 140f 	movw	r4, #271	; 0x10f
    f8ba:	e7e5      	b.n	f888 <mspi_device_configure.constprop.0+0x188>
    f8bc:	4b25      	ldr	r3, [pc, #148]	; (f954 <mspi_device_configure.constprop.0+0x254>)
    f8be:	685a      	ldr	r2, [r3, #4]
    f8c0:	2102      	movs	r1, #2
    f8c2:	f361 0203 	bfi	r2, r1, #0, #4
    f8c6:	605a      	str	r2, [r3, #4]
    f8c8:	6859      	ldr	r1, [r3, #4]
    f8ca:	f36f 11c7 	bfc	r1, #7, #1
    f8ce:	6059      	str	r1, [r3, #4]
    f8d0:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
    f8d4:	2005      	movs	r0, #5
    f8d6:	2200      	movs	r2, #0
    f8d8:	f44f 74f8 	mov.w	r4, #496	; 0x1f0
    f8dc:	e73d      	b.n	f75a <mspi_device_configure.constprop.0+0x5a>
    f8de:	4b1d      	ldr	r3, [pc, #116]	; (f954 <mspi_device_configure.constprop.0+0x254>)
    f8e0:	685a      	ldr	r2, [r3, #4]
    f8e2:	2101      	movs	r1, #1
    f8e4:	f361 0203 	bfi	r2, r1, #0, #4
    f8e8:	605a      	str	r2, [r3, #4]
    f8ea:	6859      	ldr	r1, [r3, #4]
    f8ec:	f36f 11c7 	bfc	r1, #7, #1
    f8f0:	6059      	str	r1, [r3, #4]
    f8f2:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
    f8f6:	2005      	movs	r0, #5
    f8f8:	2200      	movs	r2, #0
    f8fa:	f240 140f 	movw	r4, #271	; 0x10f
    f8fe:	e72c      	b.n	f75a <mspi_device_configure.constprop.0+0x5a>
    f900:	4b14      	ldr	r3, [pc, #80]	; (f954 <mspi_device_configure.constprop.0+0x254>)
    f902:	685a      	ldr	r2, [r3, #4]
    f904:	2102      	movs	r1, #2
    f906:	2003      	movs	r0, #3
    f908:	f361 0203 	bfi	r2, r1, #0, #4
    f90c:	605a      	str	r2, [r3, #4]
    f90e:	6859      	ldr	r1, [r3, #4]
    f910:	f36f 11c7 	bfc	r1, #7, #1
    f914:	6059      	str	r1, [r3, #4]
    f916:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
    f91a:	2200      	movs	r2, #0
    f91c:	f44f 7498 	mov.w	r4, #304	; 0x130
    f920:	e71b      	b.n	f75a <mspi_device_configure.constprop.0+0x5a>
    f922:	4b0c      	ldr	r3, [pc, #48]	; (f954 <mspi_device_configure.constprop.0+0x254>)
    f924:	685a      	ldr	r2, [r3, #4]
    f926:	2101      	movs	r1, #1
    f928:	f361 0203 	bfi	r2, r1, #0, #4
    f92c:	605a      	str	r2, [r3, #4]
    f92e:	6859      	ldr	r1, [r3, #4]
    f930:	f36f 11c7 	bfc	r1, #7, #1
    f934:	6059      	str	r1, [r3, #4]
    f936:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
    f93a:	2003      	movs	r0, #3
    f93c:	2200      	movs	r2, #0
    f93e:	f240 1403 	movw	r4, #259	; 0x103
    f942:	e70a      	b.n	f75a <mspi_device_configure.constprop.0+0x5a>
    f944:	4b03      	ldr	r3, [pc, #12]	; (f954 <mspi_device_configure.constprop.0+0x254>)
    f946:	2102      	movs	r1, #2
    f948:	685a      	ldr	r2, [r3, #4]
    f94a:	2001      	movs	r0, #1
    f94c:	e7dc      	b.n	f908 <mspi_device_configure.constprop.0+0x208>
    f94e:	2000      	movs	r0, #0
    f950:	e6f1      	b.n	f736 <mspi_device_configure.constprop.0+0x36>
    f952:	bf00      	nop
    f954:	50014000 	.word	0x50014000

0000f958 <sched_hiprio>:
    f958:	b570      	push	{r4, r5, r6, lr}
    f95a:	4606      	mov	r6, r0
    f95c:	b084      	sub	sp, #16
    f95e:	460c      	mov	r4, r1
    f960:	f7ff fd16 	bl	f390 <am_hal_interrupt_master_disable>
    f964:	f8d6 583c 	ldr.w	r5, [r6, #2108]	; 0x83c
    f968:	9003      	str	r0, [sp, #12]
    f96a:	442c      	add	r4, r5
    f96c:	9803      	ldr	r0, [sp, #12]
    f96e:	f8c6 483c 	str.w	r4, [r6, #2108]	; 0x83c
    f972:	f7ff fd11 	bl	f398 <am_hal_interrupt_master_set>
    f976:	b115      	cbz	r5, f97e <sched_hiprio+0x26>
    f978:	2000      	movs	r0, #0
    f97a:	b004      	add	sp, #16
    f97c:	bd70      	pop	{r4, r5, r6, pc}
    f97e:	4d2a      	ldr	r5, [pc, #168]	; (fa28 <sched_hiprio+0xd0>)
    f980:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    f984:	f8c5 32b4 	str.w	r3, [r5, #692]	; 0x2b4
    f988:	f8d5 32a0 	ldr.w	r3, [r5, #672]	; 0x2a0
    f98c:	07d8      	lsls	r0, r3, #31
    f98e:	d512      	bpl.n	f9b6 <sched_hiprio+0x5e>
    f990:	4c26      	ldr	r4, [pc, #152]	; (fa2c <sched_hiprio+0xd4>)
    f992:	f8d5 32ac 	ldr.w	r3, [r5, #684]	; 0x2ac
    f996:	0719      	lsls	r1, r3, #28
    f998:	f04f 0010 	mov.w	r0, #16
    f99c:	d503      	bpl.n	f9a6 <sched_hiprio+0x4e>
    f99e:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
    f9a2:	061a      	lsls	r2, r3, #24
    f9a4:	d407      	bmi.n	f9b6 <sched_hiprio+0x5e>
    f9a6:	3c01      	subs	r4, #1
    f9a8:	d03c      	beq.n	fa24 <sched_hiprio+0xcc>
    f9aa:	f7ff fb23 	bl	eff4 <am_hal_flash_delay>
    f9ae:	f8d5 32a0 	ldr.w	r3, [r5, #672]	; 0x2a0
    f9b2:	07db      	lsls	r3, r3, #31
    f9b4:	d4ed      	bmi.n	f992 <sched_hiprio+0x3a>
    f9b6:	2401      	movs	r4, #1
    f9b8:	491d      	ldr	r1, [pc, #116]	; (fa30 <sched_hiprio+0xd8>)
    f9ba:	481e      	ldr	r0, [pc, #120]	; (fa34 <sched_hiprio+0xdc>)
    f9bc:	9400      	str	r4, [sp, #0]
    f9be:	2300      	movs	r3, #0
    f9c0:	4622      	mov	r2, r4
    f9c2:	f7ff fb27 	bl	f014 <am_hal_flash_delay_status_check>
    f9c6:	2800      	cmp	r0, #0
    f9c8:	d1d7      	bne.n	f97a <sched_hiprio+0x22>
    f9ca:	4d17      	ldr	r5, [pc, #92]	; (fa28 <sched_hiprio+0xd0>)
    f9cc:	6230      	str	r0, [r6, #32]
    f9ce:	2341      	movs	r3, #65	; 0x41
    f9d0:	f8c5 3208 	str.w	r3, [r5, #520]	; 0x208
    f9d4:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
    f9d8:	f8d6 1850 	ldr.w	r1, [r6, #2128]	; 0x850
    f9dc:	f043 0341 	orr.w	r3, r3, #65	; 0x41
    f9e0:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
    f9e4:	f8d6 384c 	ldr.w	r3, [r6, #2124]	; 0x84c
    f9e8:	f8d6 2844 	ldr.w	r2, [r6, #2116]	; 0x844
    f9ec:	f886 4838 	strb.w	r4, [r6, #2104]	; 0x838
    f9f0:	4423      	add	r3, r4
    f9f2:	fbb3 f4f2 	udiv	r4, r3, r2
    f9f6:	fb02 3314 	mls	r3, r2, r4, r3
    f9fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    f9fe:	f8c5 0250 	str.w	r0, [r5, #592]	; 0x250
    fa02:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
    fa06:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    fa0a:	f8c5 3258 	str.w	r3, [r5, #600]	; 0x258
    fa0e:	6853      	ldr	r3, [r2, #4]
    fa10:	f8c5 325c 	str.w	r3, [r5, #604]	; 0x25c
    fa14:	6893      	ldr	r3, [r2, #8]
    fa16:	f8c5 3260 	str.w	r3, [r5, #608]	; 0x260
    fa1a:	68d3      	ldr	r3, [r2, #12]
    fa1c:	f8c5 3250 	str.w	r3, [r5, #592]	; 0x250
    fa20:	b004      	add	sp, #16
    fa22:	bd70      	pop	{r4, r5, r6, pc}
    fa24:	2004      	movs	r0, #4
    fa26:	e7a8      	b.n	f97a <sched_hiprio+0x22>
    fa28:	50014000 	.word	0x50014000
    fa2c:	000186a1 	.word	0x000186a1
    fa30:	50014254 	.word	0x50014254
    fa34:	000186a0 	.word	0x000186a0

0000fa38 <build_dma_cmdlist>:
    fa38:	b470      	push	{r4, r5, r6}
    fa3a:	2900      	cmp	r1, #0
    fa3c:	d03b      	beq.n	fab6 <build_dma_cmdlist+0x7e>
    fa3e:	2901      	cmp	r1, #1
    fa40:	d136      	bne.n	fab0 <build_dma_cmdlist+0x78>
    fa42:	6859      	ldr	r1, [r3, #4]
    fa44:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
    fa48:	d26c      	bcs.n	fb24 <build_dma_cmdlist+0xec>
    fa4a:	f8d0 6834 	ldr.w	r6, [r0, #2100]	; 0x834
    fa4e:	691d      	ldr	r5, [r3, #16]
    fa50:	b10e      	cbz	r6, fa56 <build_dma_cmdlist+0x1e>
    fa52:	2d00      	cmp	r5, #0
    fa54:	d169      	bne.n	fb2a <build_dma_cmdlist+0xf2>
    fa56:	68dc      	ldr	r4, [r3, #12]
    fa58:	6154      	str	r4, [r2, #20]
    fa5a:	689c      	ldr	r4, [r3, #8]
    fa5c:	6251      	str	r1, [r2, #36]	; 0x24
    fa5e:	4934      	ldr	r1, [pc, #208]	; (fb30 <build_dma_cmdlist+0xf8>)
    fa60:	6311      	str	r1, [r2, #48]	; 0x30
    fa62:	6291      	str	r1, [r2, #40]	; 0x28
    fa64:	3108      	adds	r1, #8
    fa66:	6111      	str	r1, [r2, #16]
    fa68:	3104      	adds	r1, #4
    fa6a:	6191      	str	r1, [r2, #24]
    fa6c:	3104      	adds	r1, #4
    fa6e:	6211      	str	r1, [r2, #32]
    fa70:	2100      	movs	r1, #0
    fa72:	61d4      	str	r4, [r2, #28]
    fa74:	6351      	str	r1, [r2, #52]	; 0x34
    fa76:	7859      	ldrb	r1, [r3, #1]
    fa78:	789c      	ldrb	r4, [r3, #2]
    fa7a:	00c9      	lsls	r1, r1, #3
    fa7c:	00a4      	lsls	r4, r4, #2
    fa7e:	f001 0118 	and.w	r1, r1, #24
    fa82:	f004 0404 	and.w	r4, r4, #4
    fa86:	4321      	orrs	r1, r4
    fa88:	f041 0103 	orr.w	r1, r1, #3
    fa8c:	62d1      	str	r1, [r2, #44]	; 0x2c
    fa8e:	2e01      	cmp	r6, #1
    fa90:	4928      	ldr	r1, [pc, #160]	; (fb34 <build_dma_cmdlist+0xfc>)
    fa92:	6091      	str	r1, [r2, #8]
    fa94:	6011      	str	r1, [r2, #0]
    fa96:	d03d      	beq.n	fb14 <build_dma_cmdlist+0xdc>
    fa98:	2e02      	cmp	r6, #2
    fa9a:	d138      	bne.n	fb0e <build_dma_cmdlist+0xd6>
    fa9c:	f44f 4580 	mov.w	r5, #16384	; 0x4000
    faa0:	6958      	ldr	r0, [r3, #20]
    faa2:	4b25      	ldr	r3, [pc, #148]	; (fb38 <build_dma_cmdlist+0x100>)
    faa4:	6055      	str	r5, [r2, #4]
    faa6:	e9c2 300e 	strd	r3, r0, [r2, #56]	; 0x38
    faaa:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    faae:	60d4      	str	r4, [r2, #12]
    fab0:	2000      	movs	r0, #0
    fab2:	bc70      	pop	{r4, r5, r6}
    fab4:	4770      	bx	lr
    fab6:	681c      	ldr	r4, [r3, #0]
    fab8:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    fabc:	d232      	bcs.n	fb24 <build_dma_cmdlist+0xec>
    fabe:	7a80      	ldrb	r0, [r0, #10]
    fac0:	791d      	ldrb	r5, [r3, #4]
    fac2:	0424      	lsls	r4, r4, #16
    fac4:	ea44 1480 	orr.w	r4, r4, r0, lsl #6
    fac8:	4608      	mov	r0, r1
    faca:	ea44 21c5 	orr.w	r1, r4, r5, lsl #11
    face:	7b1c      	ldrb	r4, [r3, #12]
    fad0:	ea41 2144 	orr.w	r1, r1, r4, lsl #9
    fad4:	799c      	ldrb	r4, [r3, #6]
    fad6:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    fada:	7c1c      	ldrb	r4, [r3, #16]
    fadc:	ea41 11c4 	orr.w	r1, r1, r4, lsl #7
    fae0:	7c5c      	ldrb	r4, [r3, #17]
    fae2:	ea41 01c4 	orr.w	r1, r1, r4, lsl #3
    fae6:	689c      	ldr	r4, [r3, #8]
    fae8:	6054      	str	r4, [r2, #4]
    faea:	4c14      	ldr	r4, [pc, #80]	; (fb3c <build_dma_cmdlist+0x104>)
    faec:	6094      	str	r4, [r2, #8]
    faee:	89dc      	ldrh	r4, [r3, #14]
    faf0:	60d4      	str	r4, [r2, #12]
    faf2:	4c13      	ldr	r4, [pc, #76]	; (fb40 <build_dma_cmdlist+0x108>)
    faf4:	6114      	str	r4, [r2, #16]
    faf6:	3408      	adds	r4, #8
    faf8:	6014      	str	r4, [r2, #0]
    fafa:	795b      	ldrb	r3, [r3, #5]
    fafc:	029b      	lsls	r3, r3, #10
    fafe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    fb02:	430b      	orrs	r3, r1
    fb04:	f043 0301 	orr.w	r3, r3, #1
    fb08:	bc70      	pop	{r4, r5, r6}
    fb0a:	6153      	str	r3, [r2, #20]
    fb0c:	4770      	bx	lr
    fb0e:	f445 4581 	orr.w	r5, r5, #16512	; 0x4080
    fb12:	e7c5      	b.n	faa0 <build_dma_cmdlist+0x68>
    fb14:	f445 4581 	orr.w	r5, r5, #16512	; 0x4080
    fb18:	2402      	movs	r4, #2
    fb1a:	f045 0520 	orr.w	r5, r5, #32
    fb1e:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
    fb22:	e7bd      	b.n	faa0 <build_dma_cmdlist+0x68>
    fb24:	2005      	movs	r0, #5
    fb26:	bc70      	pop	{r4, r5, r6}
    fb28:	4770      	bx	lr
    fb2a:	2007      	movs	r0, #7
    fb2c:	e7c1      	b.n	fab2 <build_dma_cmdlist+0x7a>
    fb2e:	bf00      	nop
    fb30:	50014250 	.word	0x50014250
    fb34:	500142b8 	.word	0x500142b8
    fb38:	500142b4 	.word	0x500142b4
    fb3c:	5001400c 	.word	0x5001400c
    fb40:	50014000 	.word	0x50014000

0000fb44 <am_hal_mspi_initialize>:
    fb44:	b990      	cbnz	r0, fb6c <am_hal_mspi_initialize+0x28>
    fb46:	b1a9      	cbz	r1, fb74 <am_hal_mspi_initialize+0x30>
    fb48:	4b0b      	ldr	r3, [pc, #44]	; (fb78 <am_hal_mspi_initialize+0x34>)
    fb4a:	78d8      	ldrb	r0, [r3, #3]
    fb4c:	f010 0001 	ands.w	r0, r0, #1
    fb50:	d10e      	bne.n	fb70 <am_hal_mspi_initialize+0x2c>
    fb52:	b410      	push	{r4}
    fb54:	681c      	ldr	r4, [r3, #0]
    fb56:	4a09      	ldr	r2, [pc, #36]	; (fb7c <am_hal_mspi_initialize+0x38>)
    fb58:	f004 4c7e 	and.w	ip, r4, #4261412864	; 0xfe000000
    fb5c:	ea4c 0202 	orr.w	r2, ip, r2
    fb60:	e9c3 2000 	strd	r2, r0, [r3]
    fb64:	f85d 4b04 	ldr.w	r4, [sp], #4
    fb68:	600b      	str	r3, [r1, #0]
    fb6a:	4770      	bx	lr
    fb6c:	2005      	movs	r0, #5
    fb6e:	4770      	bx	lr
    fb70:	2007      	movs	r0, #7
    fb72:	4770      	bx	lr
    fb74:	2006      	movs	r0, #6
    fb76:	4770      	bx	lr
    fb78:	10005b18 	.word	0x10005b18
    fb7c:	01bebebe 	.word	0x01bebebe

0000fb80 <am_hal_mspi_disable>:
    fb80:	b570      	push	{r4, r5, r6, lr}
    fb82:	b1a0      	cbz	r0, fbae <am_hal_mspi_disable+0x2e>
    fb84:	6803      	ldr	r3, [r0, #0]
    fb86:	4a16      	ldr	r2, [pc, #88]	; (fbe0 <am_hal_mspi_disable+0x60>)
    fb88:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fb8c:	4293      	cmp	r3, r2
    fb8e:	4604      	mov	r4, r0
    fb90:	d10d      	bne.n	fbae <am_hal_mspi_disable+0x2e>
    fb92:	78c5      	ldrb	r5, [r0, #3]
    fb94:	f015 0502 	ands.w	r5, r5, #2
    fb98:	d007      	beq.n	fbaa <am_hal_mspi_disable+0x2a>
    fb9a:	6943      	ldr	r3, [r0, #20]
    fb9c:	b1c3      	cbz	r3, fbd0 <am_hal_mspi_disable+0x50>
    fb9e:	f8d0 0824 	ldr.w	r0, [r0, #2084]	; 0x824
    fba2:	f001 f8cf 	bl	10d44 <am_hal_cmdq_disable>
    fba6:	4605      	mov	r5, r0
    fba8:	b120      	cbz	r0, fbb4 <am_hal_mspi_disable+0x34>
    fbaa:	4628      	mov	r0, r5
    fbac:	bd70      	pop	{r4, r5, r6, pc}
    fbae:	2502      	movs	r5, #2
    fbb0:	4628      	mov	r0, r5
    fbb2:	bd70      	pop	{r4, r5, r6, pc}
    fbb4:	6863      	ldr	r3, [r4, #4]
    fbb6:	4e0b      	ldr	r6, [pc, #44]	; (fbe4 <am_hal_mspi_disable+0x64>)
    fbb8:	f44f 620a 	mov.w	r2, #2208	; 0x8a0
    fbbc:	fb02 6603 	mla	r6, r2, r3, r6
    fbc0:	f8d6 0824 	ldr.w	r0, [r6, #2084]	; 0x824
    fbc4:	b120      	cbz	r0, fbd0 <am_hal_mspi_disable+0x50>
    fbc6:	2101      	movs	r1, #1
    fbc8:	f001 f97a 	bl	10ec0 <am_hal_cmdq_term>
    fbcc:	f8c6 5824 	str.w	r5, [r6, #2084]	; 0x824
    fbd0:	78e3      	ldrb	r3, [r4, #3]
    fbd2:	2500      	movs	r5, #0
    fbd4:	f36f 0341 	bfc	r3, #1, #1
    fbd8:	70e3      	strb	r3, [r4, #3]
    fbda:	4628      	mov	r0, r5
    fbdc:	bd70      	pop	{r4, r5, r6, pc}
    fbde:	bf00      	nop
    fbe0:	01bebebe 	.word	0x01bebebe
    fbe4:	10005b18 	.word	0x10005b18

0000fbe8 <am_hal_mspi_device_configure>:
    fbe8:	2800      	cmp	r0, #0
    fbea:	f000 80ae 	beq.w	fd4a <am_hal_mspi_device_configure+0x162>
    fbee:	b538      	push	{r3, r4, r5, lr}
    fbf0:	6803      	ldr	r3, [r0, #0]
    fbf2:	4a57      	ldr	r2, [pc, #348]	; (fd50 <am_hal_mspi_device_configure+0x168>)
    fbf4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fbf8:	4293      	cmp	r3, r2
    fbfa:	4605      	mov	r5, r0
    fbfc:	f040 809a 	bne.w	fd34 <am_hal_mspi_device_configure+0x14c>
    fc00:	78c3      	ldrb	r3, [r0, #3]
    fc02:	f013 0302 	ands.w	r3, r3, #2
    fc06:	f040 809e 	bne.w	fd46 <am_hal_mspi_device_configure+0x15e>
    fc0a:	7988      	ldrb	r0, [r1, #6]
    fc0c:	686a      	ldr	r2, [r5, #4]
    fc0e:	3801      	subs	r0, #1
    fc10:	b2c0      	uxtb	r0, r0
    fc12:	2802      	cmp	r0, #2
    fc14:	460c      	mov	r4, r1
    fc16:	bf96      	itet	ls
    fc18:	4b4e      	ldrls	r3, [pc, #312]	; (fd54 <am_hal_mspi_device_configure+0x16c>)
    fc1a:	4619      	movhi	r1, r3
    fc1c:	f853 1020 	ldrls.w	r1, [r3, r0, lsl #2]
    fc20:	7823      	ldrb	r3, [r4, #0]
    fc22:	7860      	ldrb	r0, [r4, #1]
    fc24:	021b      	lsls	r3, r3, #8
    fc26:	0100      	lsls	r0, r0, #4
    fc28:	f000 0030 	and.w	r0, r0, #48	; 0x30
    fc2c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    fc30:	4303      	orrs	r3, r0
    fc32:	78a0      	ldrb	r0, [r4, #2]
    fc34:	0180      	lsls	r0, r0, #6
    fc36:	f000 0040 	and.w	r0, r0, #64	; 0x40
    fc3a:	4303      	orrs	r3, r0
    fc3c:	430b      	orrs	r3, r1
    fc3e:	4946      	ldr	r1, [pc, #280]	; (fd58 <am_hal_mspi_device_configure+0x170>)
    fc40:	604b      	str	r3, [r1, #4]
    fc42:	f8d1 0100 	ldr.w	r0, [r1, #256]	; 0x100
    fc46:	79e3      	ldrb	r3, [r4, #7]
    fc48:	f363 200d 	bfi	r0, r3, #8, #6
    fc4c:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    fc50:	2b01      	cmp	r3, #1
    fc52:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
    fc56:	bf0c      	ite	eq
    fc58:	f043 0308 	orreq.w	r3, r3, #8
    fc5c:	f36f 03c3 	bfcne	r3, #3, #1
    fc60:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    fc64:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
    fc68:	f36f 0382 	bfc	r3, #2, #1
    fc6c:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    fc70:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
    fc74:	f043 0302 	orr.w	r3, r3, #2
    fc78:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    fc7c:	4936      	ldr	r1, [pc, #216]	; (fd58 <am_hal_mspi_device_configure+0x170>)
    fc7e:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
    fc82:	f043 0301 	orr.w	r3, r3, #1
    fc86:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    fc8a:	7a63      	ldrb	r3, [r4, #9]
    fc8c:	7a20      	ldrb	r0, [r4, #8]
    fc8e:	2b00      	cmp	r3, #0
    fc90:	bf0b      	itete	eq
    fc92:	2340      	moveq	r3, #64	; 0x40
    fc94:	23c0      	movne	r3, #192	; 0xc0
    fc96:	2100      	moveq	r1, #0
    fc98:	2180      	movne	r1, #128	; 0x80
    fc9a:	2800      	cmp	r0, #0
    fc9c:	bf18      	it	ne
    fc9e:	4619      	movne	r1, r3
    fca0:	7aa3      	ldrb	r3, [r4, #10]
    fca2:	b10b      	cbz	r3, fca8 <am_hal_mspi_device_configure+0xc0>
    fca4:	f041 0120 	orr.w	r1, r1, #32
    fca8:	7923      	ldrb	r3, [r4, #4]
    fcaa:	78e0      	ldrb	r0, [r4, #3]
    fcac:	041b      	lsls	r3, r3, #16
    fcae:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
    fcb2:	430b      	orrs	r3, r1
    fcb4:	7aa9      	ldrb	r1, [r5, #10]
    fcb6:	6920      	ldr	r0, [r4, #16]
    fcb8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    fcbc:	4926      	ldr	r1, [pc, #152]	; (fd58 <am_hal_mspi_device_configure+0x170>)
    fcbe:	f043 030c 	orr.w	r3, r3, #12
    fcc2:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
    fcc6:	4b25      	ldr	r3, [pc, #148]	; (fd5c <am_hal_mspi_device_configure+0x174>)
    fcc8:	f44f 6c0a 	mov.w	ip, #2208	; 0x8a0
    fccc:	fb0c 3202 	mla	r2, ip, r2, r3
    fcd0:	68e3      	ldr	r3, [r4, #12]
    fcd2:	6150      	str	r0, [r2, #20]
    fcd4:	6113      	str	r3, [r2, #16]
    fcd6:	b188      	cbz	r0, fcfc <am_hal_mspi_device_configure+0x114>
    fcd8:	2020      	movs	r0, #32
    fcda:	f8c1 0264 	str.w	r0, [r1, #612]	; 0x264
    fcde:	2008      	movs	r0, #8
    fce0:	3b08      	subs	r3, #8
    fce2:	f8c1 0278 	str.w	r0, [r1, #632]	; 0x278
    fce6:	f644 0047 	movw	r0, #18503	; 0x4847
    fcea:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
    fcee:	ea4f 0183 	mov.w	r1, r3, lsl #2
    fcf2:	d221      	bcs.n	fd38 <am_hal_mspi_device_configure+0x150>
    fcf4:	f44f 7380 	mov.w	r3, #256	; 0x100
    fcf8:	f8c2 3854 	str.w	r3, [r2, #2132]	; 0x854
    fcfc:	8b61      	ldrh	r1, [r4, #26]
    fcfe:	8ae2      	ldrh	r2, [r4, #22]
    fd00:	4b17      	ldr	r3, [pc, #92]	; (fd60 <am_hal_mspi_device_configure+0x178>)
    fd02:	f3c2 0209 	ubfx	r2, r2, #0, #10
    fd06:	ea03 4301 	and.w	r3, r3, r1, lsl #16
    fd0a:	4313      	orrs	r3, r2
    fd0c:	4a12      	ldr	r2, [pc, #72]	; (fd58 <am_hal_mspi_device_configure+0x170>)
    fd0e:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
    fd12:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
    fd16:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    fd1a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    fd1e:	7960      	ldrb	r0, [r4, #5]
    fd20:	f7ff fcee 	bl	f700 <mspi_device_configure.constprop.0>
    fd24:	2000      	movs	r0, #0
    fd26:	72a8      	strb	r0, [r5, #10]
    fd28:	79e2      	ldrb	r2, [r4, #7]
    fd2a:	726a      	strb	r2, [r5, #9]
    fd2c:	f242 7310 	movw	r3, #10000	; 0x2710
    fd30:	60eb      	str	r3, [r5, #12]
    fd32:	bd38      	pop	{r3, r4, r5, pc}
    fd34:	2002      	movs	r0, #2
    fd36:	bd38      	pop	{r3, r4, r5, pc}
    fd38:	4b0a      	ldr	r3, [pc, #40]	; (fd64 <am_hal_mspi_device_configure+0x17c>)
    fd3a:	fba3 3101 	umull	r3, r1, r3, r1
    fd3e:	0909      	lsrs	r1, r1, #4
    fd40:	f8c2 1854 	str.w	r1, [r2, #2132]	; 0x854
    fd44:	e7da      	b.n	fcfc <am_hal_mspi_device_configure+0x114>
    fd46:	2007      	movs	r0, #7
    fd48:	bd38      	pop	{r3, r4, r5, pc}
    fd4a:	2002      	movs	r0, #2
    fd4c:	4770      	bx	lr
    fd4e:	bf00      	nop
    fd50:	01bebebe 	.word	0x01bebebe
    fd54:	00011870 	.word	0x00011870
    fd58:	50014000 	.word	0x50014000
    fd5c:	10005b18 	.word	0x10005b18
    fd60:	03ff0000 	.word	0x03ff0000
    fd64:	38e38e39 	.word	0x38e38e39

0000fd68 <am_hal_mspi_enable>:
    fd68:	2800      	cmp	r0, #0
    fd6a:	d041      	beq.n	fdf0 <am_hal_mspi_enable+0x88>
    fd6c:	b530      	push	{r4, r5, lr}
    fd6e:	6803      	ldr	r3, [r0, #0]
    fd70:	4a20      	ldr	r2, [pc, #128]	; (fdf4 <am_hal_mspi_enable+0x8c>)
    fd72:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fd76:	4293      	cmp	r3, r2
    fd78:	b085      	sub	sp, #20
    fd7a:	4604      	mov	r4, r0
    fd7c:	d135      	bne.n	fdea <am_hal_mspi_enable+0x82>
    fd7e:	6943      	ldr	r3, [r0, #20]
    fd80:	b363      	cbz	r3, fddc <am_hal_mspi_enable+0x74>
    fd82:	6840      	ldr	r0, [r0, #4]
    fd84:	6921      	ldr	r1, [r4, #16]
    fd86:	9302      	str	r3, [sp, #8]
    fd88:	4a1b      	ldr	r2, [pc, #108]	; (fdf8 <am_hal_mspi_enable+0x90>)
    fd8a:	2301      	movs	r3, #1
    fd8c:	f88d 300c 	strb.w	r3, [sp, #12]
    fd90:	f44f 630a 	mov.w	r3, #2208	; 0x8a0
    fd94:	2500      	movs	r5, #0
    fd96:	fb03 2200 	mla	r2, r3, r0, r2
    fd9a:	0849      	lsrs	r1, r1, #1
    fd9c:	3006      	adds	r0, #6
    fd9e:	9101      	str	r1, [sp, #4]
    fda0:	f602 0224 	addw	r2, r2, #2084	; 0x824
    fda4:	a901      	add	r1, sp, #4
    fda6:	e9c4 5506 	strd	r5, r5, [r4, #24]
    fdaa:	b2c0      	uxtb	r0, r0
    fdac:	f000 ff54 	bl	10c58 <am_hal_cmdq_init>
    fdb0:	4a12      	ldr	r2, [pc, #72]	; (fdfc <am_hal_mspi_enable+0x94>)
    fdb2:	4913      	ldr	r1, [pc, #76]	; (fe00 <am_hal_mspi_enable+0x98>)
    fdb4:	f8c2 12b4 	str.w	r1, [r2, #692]	; 0x2b4
    fdb8:	f44f 7380 	mov.w	r3, #256	; 0x100
    fdbc:	f8c4 5850 	str.w	r5, [r4, #2128]	; 0x850
    fdc0:	f884 5838 	strb.w	r5, [r4, #2104]	; 0x838
    fdc4:	f8c4 5840 	str.w	r5, [r4, #2112]	; 0x840
    fdc8:	f8c4 5834 	str.w	r5, [r4, #2100]	; 0x834
    fdcc:	f8c4 583c 	str.w	r5, [r4, #2108]	; 0x83c
    fdd0:	f8c4 582c 	str.w	r5, [r4, #2092]	; 0x82c
    fdd4:	f8a4 3828 	strh.w	r3, [r4, #2088]	; 0x828
    fdd8:	f8c4 5858 	str.w	r5, [r4, #2136]	; 0x858
    fddc:	78e3      	ldrb	r3, [r4, #3]
    fdde:	2000      	movs	r0, #0
    fde0:	f043 0302 	orr.w	r3, r3, #2
    fde4:	70e3      	strb	r3, [r4, #3]
    fde6:	b005      	add	sp, #20
    fde8:	bd30      	pop	{r4, r5, pc}
    fdea:	2002      	movs	r0, #2
    fdec:	b005      	add	sp, #20
    fdee:	bd30      	pop	{r4, r5, pc}
    fdf0:	2002      	movs	r0, #2
    fdf2:	4770      	bx	lr
    fdf4:	01bebebe 	.word	0x01bebebe
    fdf8:	10005b18 	.word	0x10005b18
    fdfc:	50014000 	.word	0x50014000
    fe00:	00400080 	.word	0x00400080

0000fe04 <am_hal_mspi_control>:
    fe04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fe08:	b086      	sub	sp, #24
    fe0a:	b1f8      	cbz	r0, fe4c <am_hal_mspi_control+0x48>
    fe0c:	6803      	ldr	r3, [r0, #0]
    fe0e:	4616      	mov	r6, r2
    fe10:	4ab5      	ldr	r2, [pc, #724]	; (100e8 <am_hal_mspi_control+0x2e4>)
    fe12:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fe16:	4293      	cmp	r3, r2
    fe18:	4604      	mov	r4, r0
    fe1a:	d117      	bne.n	fe4c <am_hal_mspi_control+0x48>
    fe1c:	2912      	cmp	r1, #18
    fe1e:	d81a      	bhi.n	fe56 <am_hal_mspi_control+0x52>
    fe20:	2911      	cmp	r1, #17
    fe22:	d818      	bhi.n	fe56 <am_hal_mspi_control+0x52>
    fe24:	e8df f011 	tbh	[pc, r1, lsl #1]
    fe28:	00b700aa 	.word	0x00b700aa
    fe2c:	00d800c6 	.word	0x00d800c6
    fe30:	00ea00e1 	.word	0x00ea00e1
    fe34:	010000f7 	.word	0x010000f7
    fe38:	01120109 	.word	0x01120109
    fe3c:	01590133 	.word	0x01590133
    fe40:	01b8016e 	.word	0x01b8016e
    fe44:	022b024d 	.word	0x022b024d
    fe48:	001c0238 	.word	0x001c0238
    fe4c:	2502      	movs	r5, #2
    fe4e:	4628      	mov	r0, r5
    fe50:	b006      	add	sp, #24
    fe52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fe56:	2506      	movs	r5, #6
    fe58:	4628      	mov	r0, r5
    fe5a:	b006      	add	sp, #24
    fe5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fe60:	2e00      	cmp	r6, #0
    fe62:	d0f8      	beq.n	fe56 <am_hal_mspi_control+0x52>
    fe64:	f8d0 0824 	ldr.w	r0, [r0, #2084]	; 0x824
    fe68:	2800      	cmp	r0, #0
    fe6a:	f000 8246 	beq.w	102fa <am_hal_mspi_control+0x4f6>
    fe6e:	69e3      	ldr	r3, [r4, #28]
    fe70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    fe74:	f000 8243 	beq.w	102fe <am_hal_mspi_control+0x4fa>
    fe78:	68f1      	ldr	r1, [r6, #12]
    fe7a:	ab05      	add	r3, sp, #20
    fe7c:	3103      	adds	r1, #3
    fe7e:	aa04      	add	r2, sp, #16
    fe80:	f000 ff7c 	bl	10d7c <am_hal_cmdq_alloc_block>
    fe84:	2800      	cmp	r0, #0
    fe86:	f040 823a 	bne.w	102fe <am_hal_mspi_control+0x4fa>
    fe8a:	f8d4 2834 	ldr.w	r2, [r4, #2100]	; 0x834
    fe8e:	9d04      	ldr	r5, [sp, #16]
    fe90:	4b96      	ldr	r3, [pc, #600]	; (100ec <am_hal_mspi_control+0x2e8>)
    fe92:	602b      	str	r3, [r5, #0]
    fe94:	2a01      	cmp	r2, #1
    fe96:	6833      	ldr	r3, [r6, #0]
    fe98:	f000 8240 	beq.w	1031c <am_hal_mspi_control+0x518>
    fe9c:	2a02      	cmp	r2, #2
    fe9e:	f000 8232 	beq.w	10306 <am_hal_mspi_control+0x502>
    fea2:	f443 4381 	orr.w	r3, r3, #16512	; 0x4080
    fea6:	f8d6 c00c 	ldr.w	ip, [r6, #12]
    feaa:	606b      	str	r3, [r5, #4]
    feac:	f105 0708 	add.w	r7, r5, #8
    feb0:	9704      	str	r7, [sp, #16]
    feb2:	f1bc 0f00 	cmp.w	ip, #0
    feb6:	d018      	beq.n	feea <am_hal_mspi_control+0xe6>
    feb8:	68b2      	ldr	r2, [r6, #8]
    feba:	ea47 0302 	orr.w	r3, r7, r2
    febe:	0759      	lsls	r1, r3, #29
    fec0:	f040 8255 	bne.w	1036e <am_hal_mspi_control+0x56a>
    fec4:	f10c 33ff 	add.w	r3, ip, #4294967295
    fec8:	2b04      	cmp	r3, #4
    feca:	f240 8250 	bls.w	1036e <am_hal_mspi_control+0x56a>
    fece:	f10c 0301 	add.w	r3, ip, #1
    fed2:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    fed6:	3a08      	subs	r2, #8
    fed8:	463b      	mov	r3, r7
    feda:	e9f2 0102 	ldrd	r0, r1, [r2, #8]!
    fede:	e8e3 0102 	strd	r0, r1, [r3], #8
    fee2:	429d      	cmp	r5, r3
    fee4:	d1f9      	bne.n	feda <am_hal_mspi_control+0xd6>
    fee6:	eb07 07cc 	add.w	r7, r7, ip, lsl #3
    feea:	69b3      	ldr	r3, [r6, #24]
    feec:	b103      	cbz	r3, fef0 <am_hal_mspi_control+0xec>
    feee:	601f      	str	r7, [r3, #0]
    fef0:	4a7e      	ldr	r2, [pc, #504]	; (100ec <am_hal_mspi_control+0x2e8>)
    fef2:	f8d6 8010 	ldr.w	r8, [r6, #16]
    fef6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    fefa:	e9c7 2300 	strd	r2, r3, [r7]
    fefe:	f107 0308 	add.w	r3, r7, #8
    ff02:	9304      	str	r3, [sp, #16]
    ff04:	4b7a      	ldr	r3, [pc, #488]	; (100f0 <am_hal_mspi_control+0x2ec>)
    ff06:	60bb      	str	r3, [r7, #8]
    ff08:	6873      	ldr	r3, [r6, #4]
    ff0a:	60fb      	str	r3, [r7, #12]
    ff0c:	f1b8 0f00 	cmp.w	r8, #0
    ff10:	f000 820c 	beq.w	1032c <am_hal_mspi_control+0x528>
    ff14:	2501      	movs	r5, #1
    ff16:	f89d 3014 	ldrb.w	r3, [sp, #20]
    ff1a:	6972      	ldr	r2, [r6, #20]
    ff1c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    ff20:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
    ff24:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    ff28:	f7ff fa32 	bl	f390 <am_hal_interrupt_master_disable>
    ff2c:	4629      	mov	r1, r5
    ff2e:	4607      	mov	r7, r0
    ff30:	f8d4 0824 	ldr.w	r0, [r4, #2084]	; 0x824
    ff34:	f000 ffa2 	bl	10e7c <am_hal_cmdq_post_block>
    ff38:	4605      	mov	r5, r0
    ff3a:	2800      	cmp	r0, #0
    ff3c:	f040 81e6 	bne.w	1030c <am_hal_mspi_control+0x508>
    ff40:	f8d4 382c 	ldr.w	r3, [r4, #2092]	; 0x82c
    ff44:	6932      	ldr	r2, [r6, #16]
    ff46:	69e6      	ldr	r6, [r4, #28]
    ff48:	3301      	adds	r3, #1
    ff4a:	f8c4 382c 	str.w	r3, [r4, #2092]	; 0x82c
    ff4e:	1c73      	adds	r3, r6, #1
    ff50:	61e3      	str	r3, [r4, #28]
    ff52:	2a00      	cmp	r2, #0
    ff54:	f000 81fe 	beq.w	10354 <am_hal_mspi_control+0x550>
    ff58:	f884 0829 	strb.w	r0, [r4, #2089]	; 0x829
    ff5c:	f8c4 0858 	str.w	r0, [r4, #2136]	; 0x858
    ff60:	4638      	mov	r0, r7
    ff62:	f7ff fa19 	bl	f398 <am_hal_interrupt_master_set>
    ff66:	2e00      	cmp	r6, #0
    ff68:	f47f af71 	bne.w	fe4e <am_hal_mspi_control+0x4a>
    ff6c:	f8d4 0824 	ldr.w	r0, [r4, #2084]	; 0x824
    ff70:	f000 feca 	bl	10d08 <am_hal_cmdq_enable>
    ff74:	2800      	cmp	r0, #0
    ff76:	bf18      	it	ne
    ff78:	4605      	movne	r5, r0
    ff7a:	e768      	b.n	fe4e <am_hal_mspi_control+0x4a>
    ff7c:	2e00      	cmp	r6, #0
    ff7e:	f43f af6a 	beq.w	fe56 <am_hal_mspi_control+0x52>
    ff82:	4b5c      	ldr	r3, [pc, #368]	; (100f4 <am_hal_mspi_control+0x2f0>)
    ff84:	6831      	ldr	r1, [r6, #0]
    ff86:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    ff8a:	f361 0200 	bfi	r2, r1, #0, #1
    ff8e:	2500      	movs	r5, #0
    ff90:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    ff94:	e75b      	b.n	fe4e <am_hal_mspi_control+0x4a>
    ff96:	2e00      	cmp	r6, #0
    ff98:	f43f af5d 	beq.w	fe56 <am_hal_mspi_control+0x52>
    ff9c:	6833      	ldr	r3, [r6, #0]
    ff9e:	f003 35e0 	and.w	r5, r3, #3772834016	; 0xe0e0e0e0
    ffa2:	f025 4560 	bic.w	r5, r5, #3758096384	; 0xe0000000
    ffa6:	2d00      	cmp	r5, #0
    ffa8:	f47f af55 	bne.w	fe56 <am_hal_mspi_control+0x52>
    ffac:	4a51      	ldr	r2, [pc, #324]	; (100f4 <am_hal_mspi_control+0x2f0>)
    ffae:	f8c2 32b4 	str.w	r3, [r2, #692]	; 0x2b4
    ffb2:	e74c      	b.n	fe4e <am_hal_mspi_control+0x4a>
    ffb4:	2e00      	cmp	r6, #0
    ffb6:	f43f af4e 	beq.w	fe56 <am_hal_mspi_control+0x52>
    ffba:	6833      	ldr	r3, [r6, #0]
    ffbc:	2b05      	cmp	r3, #5
    ffbe:	d902      	bls.n	ffc6 <am_hal_mspi_control+0x1c2>
    ffc0:	2b07      	cmp	r3, #7
    ffc2:	f47f af48 	bne.w	fe56 <am_hal_mspi_control+0x52>
    ffc6:	4a4b      	ldr	r2, [pc, #300]	; (100f4 <am_hal_mspi_control+0x2f0>)
    ffc8:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
    ffcc:	f363 1106 	bfi	r1, r3, #4, #3
    ffd0:	2500      	movs	r5, #0
    ffd2:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    ffd6:	e73a      	b.n	fe4e <am_hal_mspi_control+0x4a>
    ffd8:	4b46      	ldr	r3, [pc, #280]	; (100f4 <am_hal_mspi_control+0x2f0>)
    ffda:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    ffde:	f36f 72df 	bfc	r2, #31, #1
    ffe2:	2500      	movs	r5, #0
    ffe4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    ffe8:	e731      	b.n	fe4e <am_hal_mspi_control+0x4a>
    ffea:	4a42      	ldr	r2, [pc, #264]	; (100f4 <am_hal_mspi_control+0x2f0>)
    ffec:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    fff0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    fff4:	2500      	movs	r5, #0
    fff6:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
    fffa:	e728      	b.n	fe4e <am_hal_mspi_control+0x4a>
    fffc:	2e00      	cmp	r6, #0
    fffe:	f43f af2a 	beq.w	fe56 <am_hal_mspi_control+0x52>
   10002:	4b3c      	ldr	r3, [pc, #240]	; (100f4 <am_hal_mspi_control+0x2f0>)
   10004:	6831      	ldr	r1, [r6, #0]
   10006:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
   1000a:	f361 0283 	bfi	r2, r1, #2, #2
   1000e:	2500      	movs	r5, #0
   10010:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
   10014:	e71b      	b.n	fe4e <am_hal_mspi_control+0x4a>
   10016:	4b37      	ldr	r3, [pc, #220]	; (100f4 <am_hal_mspi_control+0x2f0>)
   10018:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
   1001c:	f36f 0200 	bfc	r2, #0, #1
   10020:	2500      	movs	r5, #0
   10022:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
   10026:	e712      	b.n	fe4e <am_hal_mspi_control+0x4a>
   10028:	4a32      	ldr	r2, [pc, #200]	; (100f4 <am_hal_mspi_control+0x2f0>)
   1002a:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
   1002e:	f043 0301 	orr.w	r3, r3, #1
   10032:	2500      	movs	r5, #0
   10034:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
   10038:	e709      	b.n	fe4e <am_hal_mspi_control+0x4a>
   1003a:	2e00      	cmp	r6, #0
   1003c:	f43f af0b 	beq.w	fe56 <am_hal_mspi_control+0x52>
   10040:	7830      	ldrb	r0, [r6, #0]
   10042:	b006      	add	sp, #24
   10044:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   10048:	f7ff bb5a 	b.w	f700 <mspi_device_configure.constprop.0>
   1004c:	4b29      	ldr	r3, [pc, #164]	; (100f4 <am_hal_mspi_control+0x2f0>)
   1004e:	7832      	ldrb	r2, [r6, #0]
   10050:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
   10054:	f362 210d 	bfi	r1, r2, #8, #6
   10058:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1005c:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
   10060:	2a01      	cmp	r2, #1
   10062:	bf0c      	ite	eq
   10064:	f041 0108 	orreq.w	r1, r1, #8
   10068:	f36f 01c3 	bfcne	r1, #3, #1
   1006c:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   10070:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
   10074:	f36f 0182 	bfc	r1, #2, #1
   10078:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1007c:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
   10080:	f041 0102 	orr.w	r1, r1, #2
   10084:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   10088:	7242      	strb	r2, [r0, #9]
   1008a:	2500      	movs	r5, #0
   1008c:	e6df      	b.n	fe4e <am_hal_mspi_control+0x4a>
   1008e:	4d19      	ldr	r5, [pc, #100]	; (100f4 <am_hal_mspi_control+0x2f0>)
   10090:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   10094:	f8c5 32b4 	str.w	r3, [r5, #692]	; 0x2b4
   10098:	f8d5 32a0 	ldr.w	r3, [r5, #672]	; 0x2a0
   1009c:	07db      	lsls	r3, r3, #31
   1009e:	d513      	bpl.n	100c8 <am_hal_mspi_control+0x2c4>
   100a0:	4c15      	ldr	r4, [pc, #84]	; (100f8 <am_hal_mspi_control+0x2f4>)
   100a2:	f8d5 32ac 	ldr.w	r3, [r5, #684]	; 0x2ac
   100a6:	071f      	lsls	r7, r3, #28
   100a8:	f04f 0010 	mov.w	r0, #16
   100ac:	d503      	bpl.n	100b6 <am_hal_mspi_control+0x2b2>
   100ae:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
   100b2:	061e      	lsls	r6, r3, #24
   100b4:	d408      	bmi.n	100c8 <am_hal_mspi_control+0x2c4>
   100b6:	3c01      	subs	r4, #1
   100b8:	f000 8123 	beq.w	10302 <am_hal_mspi_control+0x4fe>
   100bc:	f7fe ff9a 	bl	eff4 <am_hal_flash_delay>
   100c0:	f8d5 32a0 	ldr.w	r3, [r5, #672]	; 0x2a0
   100c4:	07d8      	lsls	r0, r3, #31
   100c6:	d4ec      	bmi.n	100a2 <am_hal_mspi_control+0x29e>
   100c8:	2201      	movs	r2, #1
   100ca:	490c      	ldr	r1, [pc, #48]	; (100fc <am_hal_mspi_control+0x2f8>)
   100cc:	480c      	ldr	r0, [pc, #48]	; (10100 <am_hal_mspi_control+0x2fc>)
   100ce:	9200      	str	r2, [sp, #0]
   100d0:	2300      	movs	r3, #0
   100d2:	f7fe ff9f 	bl	f014 <am_hal_flash_delay_status_check>
   100d6:	4605      	mov	r5, r0
   100d8:	e6b9      	b.n	fe4e <am_hal_mspi_control+0x4a>
   100da:	4b06      	ldr	r3, [pc, #24]	; (100f4 <am_hal_mspi_control+0x2f0>)
   100dc:	2280      	movs	r2, #128	; 0x80
   100de:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
   100e2:	2500      	movs	r5, #0
   100e4:	e6b3      	b.n	fe4e <am_hal_mspi_control+0x4a>
   100e6:	bf00      	nop
   100e8:	01bebebe 	.word	0x01bebebe
   100ec:	500142b8 	.word	0x500142b8
   100f0:	500142b4 	.word	0x500142b4
   100f4:	50014000 	.word	0x50014000
   100f8:	000186a1 	.word	0x000186a1
   100fc:	50014254 	.word	0x50014254
   10100:	000186a0 	.word	0x000186a0
   10104:	2e00      	cmp	r6, #0
   10106:	f43f aea6 	beq.w	fe56 <am_hal_mspi_control+0x52>
   1010a:	6943      	ldr	r3, [r0, #20]
   1010c:	2b00      	cmp	r3, #0
   1010e:	f000 80f4 	beq.w	102fa <am_hal_mspi_control+0x4f6>
   10112:	7837      	ldrb	r7, [r6, #0]
   10114:	f890 3828 	ldrb.w	r3, [r0, #2088]	; 0x828
   10118:	42bb      	cmp	r3, r7
   1011a:	d0b6      	beq.n	1008a <am_hal_mspi_control+0x286>
   1011c:	2b00      	cmp	r3, #0
   1011e:	f000 80e8 	beq.w	102f2 <am_hal_mspi_control+0x4ee>
   10122:	2b02      	cmp	r3, #2
   10124:	d127      	bne.n	10176 <am_hal_mspi_control+0x372>
   10126:	4ebb      	ldr	r6, [pc, #748]	; (10414 <am_hal_mspi_control+0x610>)
   10128:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1012c:	f8c6 32b4 	str.w	r3, [r6, #692]	; 0x2b4
   10130:	f8d6 32a0 	ldr.w	r3, [r6, #672]	; 0x2a0
   10134:	07d9      	lsls	r1, r3, #31
   10136:	d513      	bpl.n	10160 <am_hal_mspi_control+0x35c>
   10138:	4db7      	ldr	r5, [pc, #732]	; (10418 <am_hal_mspi_control+0x614>)
   1013a:	f8d6 32ac 	ldr.w	r3, [r6, #684]	; 0x2ac
   1013e:	071a      	lsls	r2, r3, #28
   10140:	f04f 0010 	mov.w	r0, #16
   10144:	d503      	bpl.n	1014e <am_hal_mspi_control+0x34a>
   10146:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
   1014a:	061b      	lsls	r3, r3, #24
   1014c:	d408      	bmi.n	10160 <am_hal_mspi_control+0x35c>
   1014e:	3d01      	subs	r5, #1
   10150:	f000 80d7 	beq.w	10302 <am_hal_mspi_control+0x4fe>
   10154:	f7fe ff4e 	bl	eff4 <am_hal_flash_delay>
   10158:	f8d6 32a0 	ldr.w	r3, [r6, #672]	; 0x2a0
   1015c:	07d8      	lsls	r0, r3, #31
   1015e:	d4ec      	bmi.n	1013a <am_hal_mspi_control+0x336>
   10160:	2201      	movs	r2, #1
   10162:	49ae      	ldr	r1, [pc, #696]	; (1041c <am_hal_mspi_control+0x618>)
   10164:	48ae      	ldr	r0, [pc, #696]	; (10420 <am_hal_mspi_control+0x61c>)
   10166:	9200      	str	r2, [sp, #0]
   10168:	2300      	movs	r3, #0
   1016a:	f7fe ff53 	bl	f014 <am_hal_flash_delay_status_check>
   1016e:	4605      	mov	r5, r0
   10170:	2800      	cmp	r0, #0
   10172:	f47f ae6c 	bne.w	fe4e <am_hal_mspi_control+0x4a>
   10176:	f8d4 0824 	ldr.w	r0, [r4, #2084]	; 0x824
   1017a:	f000 fee5 	bl	10f48 <am_hal_cmdq_reset>
   1017e:	2500      	movs	r5, #0
   10180:	2301      	movs	r3, #1
   10182:	61a5      	str	r5, [r4, #24]
   10184:	f8c4 582c 	str.w	r5, [r4, #2092]	; 0x82c
   10188:	61e5      	str	r5, [r4, #28]
   1018a:	f884 7828 	strb.w	r7, [r4, #2088]	; 0x828
   1018e:	f884 3829 	strb.w	r3, [r4, #2089]	; 0x829
   10192:	f8c4 5858 	str.w	r5, [r4, #2136]	; 0x858
   10196:	e65a      	b.n	fe4e <am_hal_mspi_control+0x4a>
   10198:	2e00      	cmp	r6, #0
   1019a:	f43f ae5c 	beq.w	fe56 <am_hal_mspi_control+0x52>
   1019e:	6873      	ldr	r3, [r6, #4]
   101a0:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   101a4:	f47f ae57 	bne.w	fe56 <am_hal_mspi_control+0x52>
   101a8:	68b7      	ldr	r7, [r6, #8]
   101aa:	f007 37e0 	and.w	r7, r7, #3772834016	; 0xe0e0e0e0
   101ae:	f027 4760 	bic.w	r7, r7, #3758096384	; 0xe0000000
   101b2:	2f00      	cmp	r7, #0
   101b4:	f47f ae4f 	bne.w	fe56 <am_hal_mspi_control+0x52>
   101b8:	f890 3828 	ldrb.w	r3, [r0, #2088]	; 0x828
   101bc:	2b01      	cmp	r3, #1
   101be:	f040 809c 	bne.w	102fa <am_hal_mspi_control+0x4f6>
   101c2:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
   101c6:	b12b      	cbz	r3, 101d4 <am_hal_mspi_control+0x3d0>
   101c8:	4b92      	ldr	r3, [pc, #584]	; (10414 <am_hal_mspi_control+0x610>)
   101ca:	f8c0 7834 	str.w	r7, [r0, #2100]	; 0x834
   101ce:	2220      	movs	r2, #32
   101d0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
   101d4:	7833      	ldrb	r3, [r6, #0]
   101d6:	b123      	cbz	r3, 101e2 <am_hal_mspi_control+0x3de>
   101d8:	f894 3829 	ldrb.w	r3, [r4, #2089]	; 0x829
   101dc:	2b00      	cmp	r3, #0
   101de:	f000 80d5 	beq.w	1038c <am_hal_mspi_control+0x588>
   101e2:	f04f 0800 	mov.w	r8, #0
   101e6:	ab05      	add	r3, sp, #20
   101e8:	aa04      	add	r2, sp, #16
   101ea:	f8d4 0824 	ldr.w	r0, [r4, #2084]	; 0x824
   101ee:	2103      	movs	r1, #3
   101f0:	f000 fdc4 	bl	10d7c <am_hal_cmdq_alloc_block>
   101f4:	4605      	mov	r5, r0
   101f6:	2800      	cmp	r0, #0
   101f8:	f47f ae29 	bne.w	fe4e <am_hal_mspi_control+0x4a>
   101fc:	6872      	ldr	r2, [r6, #4]
   101fe:	9b04      	ldr	r3, [sp, #16]
   10200:	4988      	ldr	r1, [pc, #544]	; (10424 <am_hal_mspi_control+0x620>)
   10202:	4317      	orrs	r7, r2
   10204:	f8d4 2834 	ldr.w	r2, [r4, #2100]	; 0x834
   10208:	6099      	str	r1, [r3, #8]
   1020a:	6019      	str	r1, [r3, #0]
   1020c:	2a01      	cmp	r2, #1
   1020e:	f1a1 0104 	sub.w	r1, r1, #4
   10212:	6119      	str	r1, [r3, #16]
   10214:	f000 80ef 	beq.w	103f6 <am_hal_mspi_control+0x5f2>
   10218:	2a02      	cmp	r2, #2
   1021a:	f000 80a1 	beq.w	10360 <am_hal_mspi_control+0x55c>
   1021e:	f447 4781 	orr.w	r7, r7, #16512	; 0x4080
   10222:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   10226:	60da      	str	r2, [r3, #12]
   10228:	68b2      	ldr	r2, [r6, #8]
   1022a:	605f      	str	r7, [r3, #4]
   1022c:	ea42 0208 	orr.w	r2, r2, r8
   10230:	615a      	str	r2, [r3, #20]
   10232:	f7ff f8ad 	bl	f390 <am_hal_interrupt_master_disable>
   10236:	7831      	ldrb	r1, [r6, #0]
   10238:	4607      	mov	r7, r0
   1023a:	f8d4 0824 	ldr.w	r0, [r4, #2084]	; 0x824
   1023e:	2900      	cmp	r1, #0
   10240:	f000 8091 	beq.w	10366 <am_hal_mspi_control+0x562>
   10244:	2100      	movs	r1, #0
   10246:	f000 fead 	bl	10fa4 <am_hal_cmdq_post_loop_block>
   1024a:	4605      	mov	r5, r0
   1024c:	2d00      	cmp	r5, #0
   1024e:	d15d      	bne.n	1030c <am_hal_mspi_control+0x508>
   10250:	7833      	ldrb	r3, [r6, #0]
   10252:	69e6      	ldr	r6, [r4, #28]
   10254:	2b00      	cmp	r3, #0
   10256:	f106 0301 	add.w	r3, r6, #1
   1025a:	61e3      	str	r3, [r4, #28]
   1025c:	bf14      	ite	ne
   1025e:	2302      	movne	r3, #2
   10260:	2300      	moveq	r3, #0
   10262:	4638      	mov	r0, r7
   10264:	f884 3828 	strb.w	r3, [r4, #2088]	; 0x828
   10268:	f7ff f896 	bl	f398 <am_hal_interrupt_master_set>
   1026c:	2e00      	cmp	r6, #0
   1026e:	f47f adee 	bne.w	fe4e <am_hal_mspi_control+0x4a>
   10272:	f8d4 0824 	ldr.w	r0, [r4, #2084]	; 0x824
   10276:	f000 fd47 	bl	10d08 <am_hal_cmdq_enable>
   1027a:	4605      	mov	r5, r0
   1027c:	e5e7      	b.n	fe4e <am_hal_mspi_control+0x4a>
   1027e:	4965      	ldr	r1, [pc, #404]	; (10414 <am_hal_mspi_control+0x610>)
   10280:	2300      	movs	r3, #0
   10282:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   10286:	2201      	movs	r2, #1
   10288:	f8c1 02b4 	str.w	r0, [r1, #692]	; 0x2b4
   1028c:	461d      	mov	r5, r3
   1028e:	f8c4 2834 	str.w	r2, [r4, #2100]	; 0x834
   10292:	f8c4 3840 	str.w	r3, [r4, #2112]	; 0x840
   10296:	e5da      	b.n	fe4e <am_hal_mspi_control+0x4a>
   10298:	4b5e      	ldr	r3, [pc, #376]	; (10414 <am_hal_mspi_control+0x610>)
   1029a:	2220      	movs	r2, #32
   1029c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
   102a0:	f8d0 1840 	ldr.w	r1, [r0, #2112]	; 0x840
   102a4:	2300      	movs	r3, #0
   102a6:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
   102aa:	2900      	cmp	r1, #0
   102ac:	f43f aeed 	beq.w	1008a <am_hal_mspi_control+0x286>
   102b0:	f7ff fb52 	bl	f958 <sched_hiprio>
   102b4:	4605      	mov	r5, r0
   102b6:	2800      	cmp	r0, #0
   102b8:	f47f adc9 	bne.w	fe4e <am_hal_mspi_control+0x4a>
   102bc:	f8c4 0840 	str.w	r0, [r4, #2112]	; 0x840
   102c0:	e5c5      	b.n	fe4e <am_hal_mspi_control+0x4a>
   102c2:	2e00      	cmp	r6, #0
   102c4:	f43f adc7 	beq.w	fe56 <am_hal_mspi_control+0x52>
   102c8:	f8d0 5850 	ldr.w	r5, [r0, #2128]	; 0x850
   102cc:	b9ad      	cbnz	r5, 102fa <am_hal_mspi_control+0x4f6>
   102ce:	6873      	ldr	r3, [r6, #4]
   102d0:	4955      	ldr	r1, [pc, #340]	; (10428 <am_hal_mspi_control+0x624>)
   102d2:	6832      	ldr	r2, [r6, #0]
   102d4:	f8c0 2850 	str.w	r2, [r0, #2128]	; 0x850
   102d8:	fba1 1303 	umull	r1, r3, r1, r3
   102dc:	091b      	lsrs	r3, r3, #4
   102de:	2101      	movs	r1, #1
   102e0:	f8c0 584c 	str.w	r5, [r0, #2124]	; 0x84c
   102e4:	f8c0 583c 	str.w	r5, [r0, #2108]	; 0x83c
   102e8:	f8c0 1848 	str.w	r1, [r0, #2120]	; 0x848
   102ec:	f8c0 3844 	str.w	r3, [r0, #2116]	; 0x844
   102f0:	e5ad      	b.n	fe4e <am_hal_mspi_control+0x4a>
   102f2:	69c3      	ldr	r3, [r0, #28]
   102f4:	2b00      	cmp	r3, #0
   102f6:	f43f af3e 	beq.w	10176 <am_hal_mspi_control+0x372>
   102fa:	2507      	movs	r5, #7
   102fc:	e5a7      	b.n	fe4e <am_hal_mspi_control+0x4a>
   102fe:	2505      	movs	r5, #5
   10300:	e5a5      	b.n	fe4e <am_hal_mspi_control+0x4a>
   10302:	2504      	movs	r5, #4
   10304:	e5a3      	b.n	fe4e <am_hal_mspi_control+0x4a>
   10306:	f44f 4380 	mov.w	r3, #16384	; 0x4000
   1030a:	e5cc      	b.n	fea6 <am_hal_mspi_control+0xa2>
   1030c:	4638      	mov	r0, r7
   1030e:	f7ff f843 	bl	f398 <am_hal_interrupt_master_set>
   10312:	f8d4 0824 	ldr.w	r0, [r4, #2084]	; 0x824
   10316:	f000 fd99 	bl	10e4c <am_hal_cmdq_release_block>
   1031a:	e598      	b.n	fe4e <am_hal_mspi_control+0x4a>
   1031c:	f443 4381 	orr.w	r3, r3, #16512	; 0x4080
   10320:	2202      	movs	r2, #2
   10322:	f043 0320 	orr.w	r3, r3, #32
   10326:	f8c4 2834 	str.w	r2, [r4, #2100]	; 0x834
   1032a:	e5bc      	b.n	fea6 <am_hal_mspi_control+0xa2>
   1032c:	f8d4 3834 	ldr.w	r3, [r4, #2100]	; 0x834
   10330:	b973      	cbnz	r3, 10350 <am_hal_mspi_control+0x54c>
   10332:	f894 3828 	ldrb.w	r3, [r4, #2088]	; 0x828
   10336:	b95b      	cbnz	r3, 10350 <am_hal_mspi_control+0x54c>
   10338:	f8d4 3854 	ldr.w	r3, [r4, #2132]	; 0x854
   1033c:	f8d4 2858 	ldr.w	r2, [r4, #2136]	; 0x858
   10340:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
   10344:	4b39      	ldr	r3, [pc, #228]	; (1042c <am_hal_mspi_control+0x628>)
   10346:	bf32      	itee	cc
   10348:	2500      	movcc	r5, #0
   1034a:	2501      	movcs	r5, #1
   1034c:	4698      	movcs	r8, r3
   1034e:	e5e2      	b.n	ff16 <am_hal_mspi_control+0x112>
   10350:	4645      	mov	r5, r8
   10352:	e5e0      	b.n	ff16 <am_hal_mspi_control+0x112>
   10354:	f1b8 0f00 	cmp.w	r8, #0
   10358:	d055      	beq.n	10406 <am_hal_mspi_control+0x602>
   1035a:	f8c4 0858 	str.w	r0, [r4, #2136]	; 0x858
   1035e:	e5ff      	b.n	ff60 <am_hal_mspi_control+0x15c>
   10360:	f44f 4780 	mov.w	r7, #16384	; 0x4000
   10364:	e75d      	b.n	10222 <am_hal_mspi_control+0x41e>
   10366:	f000 fd89 	bl	10e7c <am_hal_cmdq_post_block>
   1036a:	4605      	mov	r5, r0
   1036c:	e76e      	b.n	1024c <am_hal_mspi_control+0x448>
   1036e:	350c      	adds	r5, #12
   10370:	f102 0e04 	add.w	lr, r2, #4
   10374:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
   10378:	f85e 3030 	ldr.w	r3, [lr, r0, lsl #3]
   1037c:	f847 1030 	str.w	r1, [r7, r0, lsl #3]
   10380:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
   10384:	3001      	adds	r0, #1
   10386:	4560      	cmp	r0, ip
   10388:	d1f4      	bne.n	10374 <am_hal_mspi_control+0x570>
   1038a:	e5ac      	b.n	fee6 <am_hal_mspi_control+0xe2>
   1038c:	ab05      	add	r3, sp, #20
   1038e:	aa04      	add	r2, sp, #16
   10390:	f8d4 0824 	ldr.w	r0, [r4, #2084]	; 0x824
   10394:	9303      	str	r3, [sp, #12]
   10396:	2101      	movs	r1, #1
   10398:	9202      	str	r2, [sp, #8]
   1039a:	f000 fcef 	bl	10d7c <am_hal_cmdq_alloc_block>
   1039e:	4605      	mov	r5, r0
   103a0:	2800      	cmp	r0, #0
   103a2:	f47f ad54 	bne.w	fe4e <am_hal_mspi_control+0x4a>
   103a6:	f89d 1014 	ldrb.w	r1, [sp, #20]
   103aa:	9804      	ldr	r0, [sp, #16]
   103ac:	4f20      	ldr	r7, [pc, #128]	; (10430 <am_hal_mspi_control+0x62c>)
   103ae:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   103b2:	624f      	str	r7, [r1, #36]	; 0x24
   103b4:	f8c1 4424 	str.w	r4, [r1, #1060]	; 0x424
   103b8:	491e      	ldr	r1, [pc, #120]	; (10434 <am_hal_mspi_control+0x630>)
   103ba:	6045      	str	r5, [r0, #4]
   103bc:	6001      	str	r1, [r0, #0]
   103be:	f7fe ffe7 	bl	f390 <am_hal_interrupt_master_disable>
   103c2:	2101      	movs	r1, #1
   103c4:	4607      	mov	r7, r0
   103c6:	f8d4 0824 	ldr.w	r0, [r4, #2084]	; 0x824
   103ca:	f000 fd57 	bl	10e7c <am_hal_cmdq_post_block>
   103ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   103d2:	4605      	mov	r5, r0
   103d4:	2800      	cmp	r0, #0
   103d6:	d199      	bne.n	1030c <am_hal_mspi_control+0x508>
   103d8:	69e5      	ldr	r5, [r4, #28]
   103da:	1c69      	adds	r1, r5, #1
   103dc:	4638      	mov	r0, r7
   103de:	61e1      	str	r1, [r4, #28]
   103e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
   103e4:	f7fe ffd8 	bl	f398 <am_hal_interrupt_master_set>
   103e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   103ec:	b325      	cbz	r5, 10438 <am_hal_mspi_control+0x634>
   103ee:	f44f 0880 	mov.w	r8, #4194304	; 0x400000
   103f2:	2740      	movs	r7, #64	; 0x40
   103f4:	e6f9      	b.n	101ea <am_hal_mspi_control+0x3e6>
   103f6:	f447 4781 	orr.w	r7, r7, #16512	; 0x4080
   103fa:	2202      	movs	r2, #2
   103fc:	f047 0720 	orr.w	r7, r7, #32
   10400:	f8c4 2834 	str.w	r2, [r4, #2100]	; 0x834
   10404:	e70d      	b.n	10222 <am_hal_mspi_control+0x41e>
   10406:	f8d4 3858 	ldr.w	r3, [r4, #2136]	; 0x858
   1040a:	3301      	adds	r3, #1
   1040c:	f8c4 3858 	str.w	r3, [r4, #2136]	; 0x858
   10410:	e5a6      	b.n	ff60 <am_hal_mspi_control+0x15c>
   10412:	bf00      	nop
   10414:	50014000 	.word	0x50014000
   10418:	000186a1 	.word	0x000186a1
   1041c:	50014254 	.word	0x50014254
   10420:	000186a0 	.word	0x000186a0
   10424:	500142b8 	.word	0x500142b8
   10428:	aaaaaaab 	.word	0xaaaaaaab
   1042c:	0000f6d5 	.word	0x0000f6d5
   10430:	0000f6d9 	.word	0x0000f6d9
   10434:	500142b4 	.word	0x500142b4
   10438:	f8d4 0824 	ldr.w	r0, [r4, #2084]	; 0x824
   1043c:	e9cd 2302 	strd	r2, r3, [sp, #8]
   10440:	f000 fc62 	bl	10d08 <am_hal_cmdq_enable>
   10444:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   10448:	4605      	mov	r5, r0
   1044a:	2800      	cmp	r0, #0
   1044c:	d0cf      	beq.n	103ee <am_hal_mspi_control+0x5ea>
   1044e:	e4fe      	b.n	fe4e <am_hal_mspi_control+0x4a>

00010450 <am_hal_mspi_blocking_transfer>:
   10450:	2800      	cmp	r0, #0
   10452:	f000 8091 	beq.w	10578 <am_hal_mspi_blocking_transfer+0x128>
   10456:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1045a:	6803      	ldr	r3, [r0, #0]
   1045c:	4614      	mov	r4, r2
   1045e:	4a63      	ldr	r2, [pc, #396]	; (105ec <am_hal_mspi_blocking_transfer+0x19c>)
   10460:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   10464:	4293      	cmp	r3, r2
   10466:	b087      	sub	sp, #28
   10468:	d15c      	bne.n	10524 <am_hal_mspi_blocking_transfer+0xd4>
   1046a:	78c3      	ldrb	r3, [r0, #3]
   1046c:	079b      	lsls	r3, r3, #30
   1046e:	d555      	bpl.n	1051c <am_hal_mspi_blocking_transfer+0xcc>
   10470:	69c3      	ldr	r3, [r0, #28]
   10472:	2b00      	cmp	r3, #0
   10474:	d152      	bne.n	1051c <am_hal_mspi_blocking_transfer+0xcc>
   10476:	f8d0 383c 	ldr.w	r3, [r0, #2108]	; 0x83c
   1047a:	2b00      	cmp	r3, #0
   1047c:	d14e      	bne.n	1051c <am_hal_mspi_blocking_transfer+0xcc>
   1047e:	f890 3828 	ldrb.w	r3, [r0, #2088]	; 0x828
   10482:	2b02      	cmp	r3, #2
   10484:	d04a      	beq.n	1051c <am_hal_mspi_blocking_transfer+0xcc>
   10486:	f8d1 8000 	ldr.w	r8, [r1]
   1048a:	790b      	ldrb	r3, [r1, #4]
   1048c:	794f      	ldrb	r7, [r1, #5]
   1048e:	7b0e      	ldrb	r6, [r1, #12]
   10490:	6845      	ldr	r5, [r0, #4]
   10492:	ea4f 4208 	mov.w	r2, r8, lsl #16
   10496:	ea42 22c3 	orr.w	r2, r2, r3, lsl #11
   1049a:	02bb      	lsls	r3, r7, #10
   1049c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   104a0:	4313      	orrs	r3, r2
   104a2:	b126      	cbz	r6, 104ae <am_hal_mspi_blocking_transfer+0x5e>
   104a4:	4a52      	ldr	r2, [pc, #328]	; (105f0 <am_hal_mspi_blocking_transfer+0x1a0>)
   104a6:	89ce      	ldrh	r6, [r1, #14]
   104a8:	60d6      	str	r6, [r2, #12]
   104aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   104ae:	798e      	ldrb	r6, [r1, #6]
   104b0:	b126      	cbz	r6, 104bc <am_hal_mspi_blocking_transfer+0x6c>
   104b2:	4e4f      	ldr	r6, [pc, #316]	; (105f0 <am_hal_mspi_blocking_transfer+0x1a0>)
   104b4:	688a      	ldr	r2, [r1, #8]
   104b6:	60b2      	str	r2, [r6, #8]
   104b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   104bc:	7c0e      	ldrb	r6, [r1, #16]
   104be:	b10e      	cbz	r6, 104c4 <am_hal_mspi_blocking_transfer+0x74>
   104c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   104c4:	7a86      	ldrb	r6, [r0, #10]
   104c6:	7c4a      	ldrb	r2, [r1, #17]
   104c8:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
   104cc:	b10a      	cbz	r2, 104d2 <am_hal_mspi_blocking_transfer+0x82>
   104ce:	f043 0308 	orr.w	r3, r3, #8
   104d2:	4e47      	ldr	r6, [pc, #284]	; (105f0 <am_hal_mspi_blocking_transfer+0x1a0>)
   104d4:	f043 0301 	orr.w	r3, r3, #1
   104d8:	f8d6 2200 	ldr.w	r2, [r6, #512]	; 0x200
   104dc:	9202      	str	r2, [sp, #8]
   104de:	f04f 0c00 	mov.w	ip, #0
   104e2:	f04f 3eff 	mov.w	lr, #4294967295
   104e6:	f8c6 c200 	str.w	ip, [r6, #512]	; 0x200
   104ea:	f8c6 e208 	str.w	lr, [r6, #520]	; 0x208
   104ee:	6033      	str	r3, [r6, #0]
   104f0:	b1e7      	cbz	r7, 1052c <am_hal_mspi_blocking_transfer+0xdc>
   104f2:	2f01      	cmp	r7, #1
   104f4:	d042      	beq.n	1057c <am_hal_mspi_blocking_transfer+0x12c>
   104f6:	4d3e      	ldr	r5, [pc, #248]	; (105f0 <am_hal_mspi_blocking_transfer+0x1a0>)
   104f8:	2302      	movs	r3, #2
   104fa:	2201      	movs	r2, #1
   104fc:	9200      	str	r2, [sp, #0]
   104fe:	4620      	mov	r0, r4
   10500:	461a      	mov	r2, r3
   10502:	4629      	mov	r1, r5
   10504:	f7fe fd86 	bl	f014 <am_hal_flash_delay_status_check>
   10508:	f04f 33ff 	mov.w	r3, #4294967295
   1050c:	f8c5 3208 	str.w	r3, [r5, #520]	; 0x208
   10510:	9b02      	ldr	r3, [sp, #8]
   10512:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
   10516:	b007      	add	sp, #28
   10518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1051c:	2007      	movs	r0, #7
   1051e:	b007      	add	sp, #28
   10520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10524:	2002      	movs	r0, #2
   10526:	b007      	add	sp, #28
   10528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1052c:	2d00      	cmp	r5, #0
   1052e:	d15b      	bne.n	105e8 <am_hal_mspi_blocking_transfer+0x198>
   10530:	694b      	ldr	r3, [r1, #20]
   10532:	f8d0 900c 	ldr.w	r9, [r0, #12]
   10536:	9303      	str	r3, [sp, #12]
   10538:	ea5f 0b98 	movs.w	fp, r8, lsr #2
   1053c:	d03d      	beq.n	105ba <am_hal_mspi_blocking_transfer+0x16a>
   1053e:	492d      	ldr	r1, [pc, #180]	; (105f4 <am_hal_mspi_blocking_transfer+0x1a4>)
   10540:	1f1f      	subs	r7, r3, #4
   10542:	46aa      	mov	sl, r5
   10544:	e005      	b.n	10552 <am_hal_mspi_blocking_transfer+0x102>
   10546:	6973      	ldr	r3, [r6, #20]
   10548:	f847 3f04 	str.w	r3, [r7, #4]!
   1054c:	45ab      	cmp	fp, r5
   1054e:	4929      	ldr	r1, [pc, #164]	; (105f4 <am_hal_mspi_blocking_transfer+0x1a4>)
   10550:	d033      	beq.n	105ba <am_hal_mspi_blocking_transfer+0x16a>
   10552:	f8cd a000 	str.w	sl, [sp]
   10556:	2300      	movs	r3, #0
   10558:	221f      	movs	r2, #31
   1055a:	4648      	mov	r0, r9
   1055c:	3501      	adds	r5, #1
   1055e:	f7fe fd59 	bl	f014 <am_hal_flash_delay_status_check>
   10562:	2800      	cmp	r0, #0
   10564:	d0ef      	beq.n	10546 <am_hal_mspi_blocking_transfer+0xf6>
   10566:	4b22      	ldr	r3, [pc, #136]	; (105f0 <am_hal_mspi_blocking_transfer+0x1a0>)
   10568:	f04f 32ff 	mov.w	r2, #4294967295
   1056c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
   10570:	9a02      	ldr	r2, [sp, #8]
   10572:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   10576:	e7d2      	b.n	1051e <am_hal_mspi_blocking_transfer+0xce>
   10578:	2002      	movs	r0, #2
   1057a:	4770      	bx	lr
   1057c:	2d00      	cmp	r5, #0
   1057e:	d133      	bne.n	105e8 <am_hal_mspi_blocking_transfer+0x198>
   10580:	f1b8 0f00 	cmp.w	r8, #0
   10584:	d0b7      	beq.n	104f6 <am_hal_mspi_blocking_transfer+0xa6>
   10586:	694f      	ldr	r7, [r1, #20]
   10588:	f8d0 900c 	ldr.w	r9, [r0, #12]
   1058c:	491a      	ldr	r1, [pc, #104]	; (105f8 <am_hal_mspi_blocking_transfer+0x1a8>)
   1058e:	46ab      	mov	fp, r5
   10590:	f1a7 0a04 	sub.w	sl, r7, #4
   10594:	4655      	mov	r5, sl
   10596:	3508      	adds	r5, #8
   10598:	f85a 3f04 	ldr.w	r3, [sl, #4]!
   1059c:	6133      	str	r3, [r6, #16]
   1059e:	221f      	movs	r2, #31
   105a0:	f8cd b000 	str.w	fp, [sp]
   105a4:	2310      	movs	r3, #16
   105a6:	4648      	mov	r0, r9
   105a8:	1bed      	subs	r5, r5, r7
   105aa:	f7fe fd33 	bl	f014 <am_hal_flash_delay_status_check>
   105ae:	45a8      	cmp	r8, r5
   105b0:	4911      	ldr	r1, [pc, #68]	; (105f8 <am_hal_mspi_blocking_transfer+0x1a8>)
   105b2:	d8ef      	bhi.n	10594 <am_hal_mspi_blocking_transfer+0x144>
   105b4:	2800      	cmp	r0, #0
   105b6:	d09e      	beq.n	104f6 <am_hal_mspi_blocking_transfer+0xa6>
   105b8:	e7d5      	b.n	10566 <am_hal_mspi_blocking_transfer+0x116>
   105ba:	f018 0803 	ands.w	r8, r8, #3
   105be:	d09a      	beq.n	104f6 <am_hal_mspi_blocking_transfer+0xa6>
   105c0:	2300      	movs	r3, #0
   105c2:	490c      	ldr	r1, [pc, #48]	; (105f4 <am_hal_mspi_blocking_transfer+0x1a4>)
   105c4:	9300      	str	r3, [sp, #0]
   105c6:	4648      	mov	r0, r9
   105c8:	221f      	movs	r2, #31
   105ca:	f7fe fd23 	bl	f014 <am_hal_flash_delay_status_check>
   105ce:	2800      	cmp	r0, #0
   105d0:	d1c9      	bne.n	10566 <am_hal_mspi_blocking_transfer+0x116>
   105d2:	9b03      	ldr	r3, [sp, #12]
   105d4:	eb03 008b 	add.w	r0, r3, fp, lsl #2
   105d8:	4b05      	ldr	r3, [pc, #20]	; (105f0 <am_hal_mspi_blocking_transfer+0x1a0>)
   105da:	4642      	mov	r2, r8
   105dc:	695b      	ldr	r3, [r3, #20]
   105de:	9305      	str	r3, [sp, #20]
   105e0:	a905      	add	r1, sp, #20
   105e2:	f7fc f9ab 	bl	c93c <memcpy>
   105e6:	e786      	b.n	104f6 <am_hal_mspi_blocking_transfer+0xa6>
   105e8:	2005      	movs	r0, #5
   105ea:	e7bc      	b.n	10566 <am_hal_mspi_blocking_transfer+0x116>
   105ec:	01bebebe 	.word	0x01bebebe
   105f0:	50014000 	.word	0x50014000
   105f4:	5001401c 	.word	0x5001401c
   105f8:	50014018 	.word	0x50014018

000105fc <am_hal_mspi_nonblocking_transfer>:
   105fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10600:	b082      	sub	sp, #8
   10602:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   10606:	2800      	cmp	r0, #0
   10608:	d030      	beq.n	1066c <am_hal_mspi_nonblocking_transfer+0x70>
   1060a:	4616      	mov	r6, r2
   1060c:	6802      	ldr	r2, [r0, #0]
   1060e:	461f      	mov	r7, r3
   10610:	4b4b      	ldr	r3, [pc, #300]	; (10740 <am_hal_mspi_nonblocking_transfer+0x144>)
   10612:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   10616:	429a      	cmp	r2, r3
   10618:	4604      	mov	r4, r0
   1061a:	d127      	bne.n	1066c <am_hal_mspi_nonblocking_transfer+0x70>
   1061c:	6943      	ldr	r3, [r0, #20]
   1061e:	b303      	cbz	r3, 10662 <am_hal_mspi_nonblocking_transfer+0x66>
   10620:	78c3      	ldrb	r3, [r0, #3]
   10622:	079b      	lsls	r3, r3, #30
   10624:	d51d      	bpl.n	10662 <am_hal_mspi_nonblocking_transfer+0x66>
   10626:	f890 3828 	ldrb.w	r3, [r0, #2088]	; 0x828
   1062a:	2b02      	cmp	r3, #2
   1062c:	d019      	beq.n	10662 <am_hal_mspi_nonblocking_transfer+0x66>
   1062e:	4688      	mov	r8, r1
   10630:	2f00      	cmp	r7, #0
   10632:	d05a      	beq.n	106ea <am_hal_mspi_nonblocking_transfer+0xee>
   10634:	46ba      	mov	sl, r7
   10636:	2e00      	cmp	r6, #0
   10638:	d06a      	beq.n	10710 <am_hal_mspi_nonblocking_transfer+0x114>
   1063a:	2e01      	cmp	r6, #1
   1063c:	bf0c      	ite	eq
   1063e:	2108      	moveq	r1, #8
   10640:	2100      	movne	r1, #0
   10642:	69e3      	ldr	r3, [r4, #28]
   10644:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   10648:	d06c      	beq.n	10724 <am_hal_mspi_nonblocking_transfer+0x128>
   1064a:	f8d4 0824 	ldr.w	r0, [r4, #2084]	; 0x824
   1064e:	ab01      	add	r3, sp, #4
   10650:	466a      	mov	r2, sp
   10652:	f000 fb93 	bl	10d7c <am_hal_cmdq_alloc_block>
   10656:	4605      	mov	r5, r0
   10658:	b168      	cbz	r0, 10676 <am_hal_mspi_nonblocking_transfer+0x7a>
   1065a:	4628      	mov	r0, r5
   1065c:	b002      	add	sp, #8
   1065e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10662:	2507      	movs	r5, #7
   10664:	4628      	mov	r0, r5
   10666:	b002      	add	sp, #8
   10668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1066c:	2502      	movs	r5, #2
   1066e:	4628      	mov	r0, r5
   10670:	b002      	add	sp, #8
   10672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10676:	9a00      	ldr	r2, [sp, #0]
   10678:	4643      	mov	r3, r8
   1067a:	4631      	mov	r1, r6
   1067c:	4620      	mov	r0, r4
   1067e:	f7ff f9db 	bl	fa38 <build_dma_cmdlist>
   10682:	4605      	mov	r5, r0
   10684:	2800      	cmp	r0, #0
   10686:	d148      	bne.n	1071a <am_hal_mspi_nonblocking_transfer+0x11e>
   10688:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1068c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   10690:	f8c3 a024 	str.w	sl, [r3, #36]	; 0x24
   10694:	f8c3 9424 	str.w	r9, [r3, #1060]	; 0x424
   10698:	f7fe fe7a 	bl	f390 <am_hal_interrupt_master_disable>
   1069c:	f1ba 0100 	subs.w	r1, sl, #0
   106a0:	bf18      	it	ne
   106a2:	2101      	movne	r1, #1
   106a4:	4606      	mov	r6, r0
   106a6:	f8d4 0824 	ldr.w	r0, [r4, #2084]	; 0x824
   106aa:	f000 fbe7 	bl	10e7c <am_hal_cmdq_post_block>
   106ae:	4605      	mov	r5, r0
   106b0:	bb80      	cbnz	r0, 10714 <am_hal_mspi_nonblocking_transfer+0x118>
   106b2:	f8d4 382c 	ldr.w	r3, [r4, #2092]	; 0x82c
   106b6:	f8d4 801c 	ldr.w	r8, [r4, #28]
   106ba:	3301      	adds	r3, #1
   106bc:	f8c4 382c 	str.w	r3, [r4, #2092]	; 0x82c
   106c0:	f108 0301 	add.w	r3, r8, #1
   106c4:	61e3      	str	r3, [r4, #28]
   106c6:	b37f      	cbz	r7, 10728 <am_hal_mspi_nonblocking_transfer+0x12c>
   106c8:	f884 0829 	strb.w	r0, [r4, #2089]	; 0x829
   106cc:	f8c4 0858 	str.w	r0, [r4, #2136]	; 0x858
   106d0:	4630      	mov	r0, r6
   106d2:	f7fe fe61 	bl	f398 <am_hal_interrupt_master_set>
   106d6:	f1b8 0f00 	cmp.w	r8, #0
   106da:	d1be      	bne.n	1065a <am_hal_mspi_nonblocking_transfer+0x5e>
   106dc:	f8d4 0824 	ldr.w	r0, [r4, #2084]	; 0x824
   106e0:	b002      	add	sp, #8
   106e2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   106e6:	f000 bb0f 	b.w	10d08 <am_hal_cmdq_enable>
   106ea:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
   106ee:	2a00      	cmp	r2, #0
   106f0:	d1a0      	bne.n	10634 <am_hal_mspi_nonblocking_transfer+0x38>
   106f2:	2b00      	cmp	r3, #0
   106f4:	d19e      	bne.n	10634 <am_hal_mspi_nonblocking_transfer+0x38>
   106f6:	f8d0 3858 	ldr.w	r3, [r0, #2136]	; 0x858
   106fa:	f8d0 2854 	ldr.w	r2, [r0, #2132]	; 0x854
   106fe:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
   10702:	4b10      	ldr	r3, [pc, #64]	; (10744 <am_hal_mspi_nonblocking_transfer+0x148>)
   10704:	bf34      	ite	cc
   10706:	f04f 0a00 	movcc.w	sl, #0
   1070a:	469a      	movcs	sl, r3
   1070c:	2e00      	cmp	r6, #0
   1070e:	d194      	bne.n	1063a <am_hal_mspi_nonblocking_transfer+0x3e>
   10710:	2103      	movs	r1, #3
   10712:	e796      	b.n	10642 <am_hal_mspi_nonblocking_transfer+0x46>
   10714:	4630      	mov	r0, r6
   10716:	f7fe fe3f 	bl	f398 <am_hal_interrupt_master_set>
   1071a:	f8d4 0824 	ldr.w	r0, [r4, #2084]	; 0x824
   1071e:	f000 fb95 	bl	10e4c <am_hal_cmdq_release_block>
   10722:	e79a      	b.n	1065a <am_hal_mspi_nonblocking_transfer+0x5e>
   10724:	2505      	movs	r5, #5
   10726:	e798      	b.n	1065a <am_hal_mspi_nonblocking_transfer+0x5e>
   10728:	f1ba 0f00 	cmp.w	sl, #0
   1072c:	d002      	beq.n	10734 <am_hal_mspi_nonblocking_transfer+0x138>
   1072e:	f8c4 0858 	str.w	r0, [r4, #2136]	; 0x858
   10732:	e7cd      	b.n	106d0 <am_hal_mspi_nonblocking_transfer+0xd4>
   10734:	f8d4 3858 	ldr.w	r3, [r4, #2136]	; 0x858
   10738:	3301      	adds	r3, #1
   1073a:	f8c4 3858 	str.w	r3, [r4, #2136]	; 0x858
   1073e:	e7c7      	b.n	106d0 <am_hal_mspi_nonblocking_transfer+0xd4>
   10740:	01bebebe 	.word	0x01bebebe
   10744:	0000f6d5 	.word	0x0000f6d5

00010748 <am_hal_mspi_interrupt_enable>:
   10748:	b168      	cbz	r0, 10766 <am_hal_mspi_interrupt_enable+0x1e>
   1074a:	6803      	ldr	r3, [r0, #0]
   1074c:	4a07      	ldr	r2, [pc, #28]	; (1076c <am_hal_mspi_interrupt_enable+0x24>)
   1074e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   10752:	4293      	cmp	r3, r2
   10754:	d107      	bne.n	10766 <am_hal_mspi_interrupt_enable+0x1e>
   10756:	4a06      	ldr	r2, [pc, #24]	; (10770 <am_hal_mspi_interrupt_enable+0x28>)
   10758:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1075c:	4319      	orrs	r1, r3
   1075e:	2000      	movs	r0, #0
   10760:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
   10764:	4770      	bx	lr
   10766:	2002      	movs	r0, #2
   10768:	4770      	bx	lr
   1076a:	bf00      	nop
   1076c:	01bebebe 	.word	0x01bebebe
   10770:	50014000 	.word	0x50014000

00010774 <am_hal_mspi_interrupt_clear>:
   10774:	b150      	cbz	r0, 1078c <am_hal_mspi_interrupt_clear+0x18>
   10776:	6803      	ldr	r3, [r0, #0]
   10778:	4a05      	ldr	r2, [pc, #20]	; (10790 <am_hal_mspi_interrupt_clear+0x1c>)
   1077a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1077e:	4293      	cmp	r3, r2
   10780:	d104      	bne.n	1078c <am_hal_mspi_interrupt_clear+0x18>
   10782:	4b04      	ldr	r3, [pc, #16]	; (10794 <am_hal_mspi_interrupt_clear+0x20>)
   10784:	2000      	movs	r0, #0
   10786:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
   1078a:	4770      	bx	lr
   1078c:	2002      	movs	r0, #2
   1078e:	4770      	bx	lr
   10790:	01bebebe 	.word	0x01bebebe
   10794:	50014000 	.word	0x50014000

00010798 <am_hal_mspi_power_control>:
   10798:	2800      	cmp	r0, #0
   1079a:	f000 80bd 	beq.w	10918 <am_hal_mspi_power_control+0x180>
   1079e:	b510      	push	{r4, lr}
   107a0:	6803      	ldr	r3, [r0, #0]
   107a2:	4604      	mov	r4, r0
   107a4:	4863      	ldr	r0, [pc, #396]	; (10934 <am_hal_mspi_power_control+0x19c>)
   107a6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   107aa:	4283      	cmp	r3, r0
   107ac:	b082      	sub	sp, #8
   107ae:	d162      	bne.n	10876 <am_hal_mspi_power_control+0xde>
   107b0:	2900      	cmp	r1, #0
   107b2:	d066      	beq.n	10882 <am_hal_mspi_power_control+0xea>
   107b4:	3901      	subs	r1, #1
   107b6:	2901      	cmp	r1, #1
   107b8:	d860      	bhi.n	1087c <am_hal_mspi_power_control+0xe4>
   107ba:	78e3      	ldrb	r3, [r4, #3]
   107bc:	0799      	lsls	r1, r3, #30
   107be:	d50a      	bpl.n	107d6 <am_hal_mspi_power_control+0x3e>
   107c0:	4b5d      	ldr	r3, [pc, #372]	; (10938 <am_hal_mspi_power_control+0x1a0>)
   107c2:	f8d3 3254 	ldr.w	r3, [r3, #596]	; 0x254
   107c6:	07db      	lsls	r3, r3, #31
   107c8:	f100 80af 	bmi.w	1092a <am_hal_mspi_power_control+0x192>
   107cc:	f8d4 3840 	ldr.w	r3, [r4, #2112]	; 0x840
   107d0:	2b00      	cmp	r3, #0
   107d2:	f040 80aa 	bne.w	1092a <am_hal_mspi_power_control+0x192>
   107d6:	2a00      	cmp	r2, #0
   107d8:	d03e      	beq.n	10858 <am_hal_mspi_power_control+0xc0>
   107da:	4b57      	ldr	r3, [pc, #348]	; (10938 <am_hal_mspi_power_control+0x1a0>)
   107dc:	6859      	ldr	r1, [r3, #4]
   107de:	f8c4 1864 	str.w	r1, [r4, #2148]	; 0x864
   107e2:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
   107e6:	f8c4 1868 	str.w	r1, [r4, #2152]	; 0x868
   107ea:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
   107ee:	f8c4 186c 	str.w	r1, [r4, #2156]	; 0x86c
   107f2:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
   107f6:	f8c4 1870 	str.w	r1, [r4, #2160]	; 0x870
   107fa:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
   107fe:	f8c4 1874 	str.w	r1, [r4, #2164]	; 0x874
   10802:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   10806:	f8c4 1878 	str.w	r1, [r4, #2168]	; 0x878
   1080a:	f8d3 12a8 	ldr.w	r1, [r3, #680]	; 0x2a8
   1080e:	f8c4 1880 	str.w	r1, [r4, #2176]	; 0x880
   10812:	f8d3 12b8 	ldr.w	r1, [r3, #696]	; 0x2b8
   10816:	f8c4 1884 	str.w	r1, [r4, #2180]	; 0x884
   1081a:	f8d3 12b0 	ldr.w	r1, [r3, #688]	; 0x2b0
   1081e:	f8c4 1888 	str.w	r1, [r4, #2184]	; 0x888
   10822:	f8d3 12c0 	ldr.w	r1, [r3, #704]	; 0x2c0
   10826:	f8c4 188c 	str.w	r1, [r4, #2188]	; 0x88c
   1082a:	f8d3 12c4 	ldr.w	r1, [r3, #708]	; 0x2c4
   1082e:	f8c4 1890 	str.w	r1, [r4, #2192]	; 0x890
   10832:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
   10836:	f8c4 1894 	str.w	r1, [r4, #2196]	; 0x894
   1083a:	f8d3 1264 	ldr.w	r1, [r3, #612]	; 0x264
   1083e:	f8c4 1898 	str.w	r1, [r4, #2200]	; 0x898
   10842:	f8d3 1278 	ldr.w	r1, [r3, #632]	; 0x278
   10846:	f8c4 189c 	str.w	r1, [r4, #2204]	; 0x89c
   1084a:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
   1084e:	f8c4 387c 	str.w	r3, [r4, #2172]	; 0x87c
   10852:	2201      	movs	r2, #1
   10854:	f884 2860 	strb.w	r2, [r4, #2144]	; 0x860
   10858:	4a37      	ldr	r2, [pc, #220]	; (10938 <am_hal_mspi_power_control+0x1a0>)
   1085a:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1085e:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
   10862:	f023 031f 	bic.w	r3, r3, #31
   10866:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
   1086a:	200c      	movs	r0, #12
   1086c:	f000 f890 	bl	10990 <am_hal_pwrctrl_periph_disable>
   10870:	2000      	movs	r0, #0
   10872:	b002      	add	sp, #8
   10874:	bd10      	pop	{r4, pc}
   10876:	2002      	movs	r0, #2
   10878:	b002      	add	sp, #8
   1087a:	bd10      	pop	{r4, pc}
   1087c:	2006      	movs	r0, #6
   1087e:	b002      	add	sp, #8
   10880:	bd10      	pop	{r4, pc}
   10882:	2a00      	cmp	r2, #0
   10884:	d04a      	beq.n	1091c <am_hal_mspi_power_control+0x184>
   10886:	f894 3860 	ldrb.w	r3, [r4, #2144]	; 0x860
   1088a:	2b00      	cmp	r3, #0
   1088c:	d04f      	beq.n	1092e <am_hal_mspi_power_control+0x196>
   1088e:	200c      	movs	r0, #12
   10890:	9101      	str	r1, [sp, #4]
   10892:	f000 f853 	bl	1093c <am_hal_pwrctrl_periph_enable>
   10896:	4b28      	ldr	r3, [pc, #160]	; (10938 <am_hal_mspi_power_control+0x1a0>)
   10898:	f8d4 2864 	ldr.w	r2, [r4, #2148]	; 0x864
   1089c:	605a      	str	r2, [r3, #4]
   1089e:	f8d4 2868 	ldr.w	r2, [r4, #2152]	; 0x868
   108a2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   108a6:	f8d4 286c 	ldr.w	r2, [r4, #2156]	; 0x86c
   108aa:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   108ae:	f8d4 2870 	ldr.w	r2, [r4, #2160]	; 0x870
   108b2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   108b6:	f8d4 2874 	ldr.w	r2, [r4, #2164]	; 0x874
   108ba:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
   108be:	f8d4 2878 	ldr.w	r2, [r4, #2168]	; 0x878
   108c2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   108c6:	f8d4 2880 	ldr.w	r2, [r4, #2176]	; 0x880
   108ca:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
   108ce:	f8d4 2884 	ldr.w	r2, [r4, #2180]	; 0x884
   108d2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
   108d6:	f8d4 288c 	ldr.w	r2, [r4, #2188]	; 0x88c
   108da:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
   108de:	f8d4 2890 	ldr.w	r2, [r4, #2192]	; 0x890
   108e2:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
   108e6:	f8d4 2894 	ldr.w	r2, [r4, #2196]	; 0x894
   108ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   108ee:	f8d4 2898 	ldr.w	r2, [r4, #2200]	; 0x898
   108f2:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
   108f6:	f8d4 289c 	ldr.w	r2, [r4, #2204]	; 0x89c
   108fa:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
   108fe:	f894 2888 	ldrb.w	r2, [r4, #2184]	; 0x888
   10902:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
   10906:	9901      	ldr	r1, [sp, #4]
   10908:	f8d4 287c 	ldr.w	r2, [r4, #2172]	; 0x87c
   1090c:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
   10910:	4608      	mov	r0, r1
   10912:	f884 1860 	strb.w	r1, [r4, #2144]	; 0x860
   10916:	e7af      	b.n	10878 <am_hal_mspi_power_control+0xe0>
   10918:	2002      	movs	r0, #2
   1091a:	4770      	bx	lr
   1091c:	200c      	movs	r0, #12
   1091e:	9201      	str	r2, [sp, #4]
   10920:	f000 f80c 	bl	1093c <am_hal_pwrctrl_periph_enable>
   10924:	9a01      	ldr	r2, [sp, #4]
   10926:	4610      	mov	r0, r2
   10928:	e7a6      	b.n	10878 <am_hal_mspi_power_control+0xe0>
   1092a:	2003      	movs	r0, #3
   1092c:	e7a4      	b.n	10878 <am_hal_mspi_power_control+0xe0>
   1092e:	2007      	movs	r0, #7
   10930:	e7a2      	b.n	10878 <am_hal_mspi_power_control+0xe0>
   10932:	bf00      	nop
   10934:	01bebebe 	.word	0x01bebebe
   10938:	50014000 	.word	0x50014000

0001093c <am_hal_pwrctrl_periph_enable>:
   1093c:	b570      	push	{r4, r5, r6, lr}
   1093e:	b082      	sub	sp, #8
   10940:	4604      	mov	r4, r0
   10942:	f7fe fd25 	bl	f390 <am_hal_interrupt_master_disable>
   10946:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1094a:	4e0f      	ldr	r6, [pc, #60]	; (10988 <am_hal_pwrctrl_periph_enable+0x4c>)
   1094c:	4d0f      	ldr	r5, [pc, #60]	; (1098c <am_hal_pwrctrl_periph_enable+0x50>)
   1094e:	9001      	str	r0, [sp, #4]
   10950:	00a4      	lsls	r4, r4, #2
   10952:	68b3      	ldr	r3, [r6, #8]
   10954:	592a      	ldr	r2, [r5, r4]
   10956:	4313      	orrs	r3, r2
   10958:	60b3      	str	r3, [r6, #8]
   1095a:	9801      	ldr	r0, [sp, #4]
   1095c:	442c      	add	r4, r5
   1095e:	f7fe fd1b 	bl	f398 <am_hal_interrupt_master_set>
   10962:	20a0      	movs	r0, #160	; 0xa0
   10964:	f7fe fb46 	bl	eff4 <am_hal_flash_delay>
   10968:	69b3      	ldr	r3, [r6, #24]
   1096a:	6864      	ldr	r4, [r4, #4]
   1096c:	4223      	tst	r3, r4
   1096e:	d103      	bne.n	10978 <am_hal_pwrctrl_periph_enable+0x3c>
   10970:	20a0      	movs	r0, #160	; 0xa0
   10972:	f7fe fb3f 	bl	eff4 <am_hal_flash_delay>
   10976:	69b3      	ldr	r3, [r6, #24]
   10978:	4b03      	ldr	r3, [pc, #12]	; (10988 <am_hal_pwrctrl_periph_enable+0x4c>)
   1097a:	699b      	ldr	r3, [r3, #24]
   1097c:	4223      	tst	r3, r4
   1097e:	bf0c      	ite	eq
   10980:	2001      	moveq	r0, #1
   10982:	2000      	movne	r0, #0
   10984:	b002      	add	sp, #8
   10986:	bd70      	pop	{r4, r5, r6, pc}
   10988:	40021000 	.word	0x40021000
   1098c:	0001187c 	.word	0x0001187c

00010990 <am_hal_pwrctrl_periph_disable>:
   10990:	b570      	push	{r4, r5, r6, lr}
   10992:	b082      	sub	sp, #8
   10994:	4604      	mov	r4, r0
   10996:	f7fe fcfb 	bl	f390 <am_hal_interrupt_master_disable>
   1099a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1099e:	4e10      	ldr	r6, [pc, #64]	; (109e0 <am_hal_pwrctrl_periph_disable+0x50>)
   109a0:	4d10      	ldr	r5, [pc, #64]	; (109e4 <am_hal_pwrctrl_periph_disable+0x54>)
   109a2:	9001      	str	r0, [sp, #4]
   109a4:	00a4      	lsls	r4, r4, #2
   109a6:	68b3      	ldr	r3, [r6, #8]
   109a8:	592a      	ldr	r2, [r5, r4]
   109aa:	ea23 0302 	bic.w	r3, r3, r2
   109ae:	60b3      	str	r3, [r6, #8]
   109b0:	9801      	ldr	r0, [sp, #4]
   109b2:	442c      	add	r4, r5
   109b4:	f7fe fcf0 	bl	f398 <am_hal_interrupt_master_set>
   109b8:	20a0      	movs	r0, #160	; 0xa0
   109ba:	f7fe fb1b 	bl	eff4 <am_hal_flash_delay>
   109be:	69b3      	ldr	r3, [r6, #24]
   109c0:	6864      	ldr	r4, [r4, #4]
   109c2:	4223      	tst	r3, r4
   109c4:	d003      	beq.n	109ce <am_hal_pwrctrl_periph_disable+0x3e>
   109c6:	20a0      	movs	r0, #160	; 0xa0
   109c8:	f7fe fb14 	bl	eff4 <am_hal_flash_delay>
   109cc:	69b3      	ldr	r3, [r6, #24]
   109ce:	4b04      	ldr	r3, [pc, #16]	; (109e0 <am_hal_pwrctrl_periph_disable+0x50>)
   109d0:	699b      	ldr	r3, [r3, #24]
   109d2:	4223      	tst	r3, r4
   109d4:	bf14      	ite	ne
   109d6:	2001      	movne	r0, #1
   109d8:	2000      	moveq	r0, #0
   109da:	b002      	add	sp, #8
   109dc:	bd70      	pop	{r4, r5, r6, pc}
   109de:	bf00      	nop
   109e0:	40021000 	.word	0x40021000
   109e4:	0001187c 	.word	0x0001187c

000109e8 <am_hal_pwrctrl_low_power_init>:
   109e8:	b530      	push	{r4, r5, lr}
   109ea:	4b69      	ldr	r3, [pc, #420]	; (10b90 <am_hal_pwrctrl_low_power_init+0x1a8>)
   109ec:	681a      	ldr	r2, [r3, #0]
   109ee:	b085      	sub	sp, #20
   109f0:	b912      	cbnz	r2, 109f8 <am_hal_pwrctrl_low_power_init+0x10>
   109f2:	4a68      	ldr	r2, [pc, #416]	; (10b94 <am_hal_pwrctrl_low_power_init+0x1ac>)
   109f4:	6812      	ldr	r2, [r2, #0]
   109f6:	601a      	str	r2, [r3, #0]
   109f8:	4b67      	ldr	r3, [pc, #412]	; (10b98 <am_hal_pwrctrl_low_power_init+0x1b0>)
   109fa:	68db      	ldr	r3, [r3, #12]
   109fc:	b2db      	uxtb	r3, r3
   109fe:	2b12      	cmp	r3, #18
   10a00:	d104      	bne.n	10a0c <am_hal_pwrctrl_low_power_init+0x24>
   10a02:	4c66      	ldr	r4, [pc, #408]	; (10b9c <am_hal_pwrctrl_low_power_init+0x1b4>)
   10a04:	6863      	ldr	r3, [r4, #4]
   10a06:	07d8      	lsls	r0, r3, #31
   10a08:	f100 8088 	bmi.w	10b1c <am_hal_pwrctrl_low_power_init+0x134>
   10a0c:	4b62      	ldr	r3, [pc, #392]	; (10b98 <am_hal_pwrctrl_low_power_init+0x1b0>)
   10a0e:	68da      	ldr	r2, [r3, #12]
   10a10:	b2d2      	uxtb	r2, r2
   10a12:	2a20      	cmp	r2, #32
   10a14:	d934      	bls.n	10a80 <am_hal_pwrctrl_low_power_init+0x98>
   10a16:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
   10a1a:	2002      	movs	r0, #2
   10a1c:	f360 4213 	bfi	r2, r0, #16, #4
   10a20:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
   10a24:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
   10a28:	2203      	movs	r2, #3
   10a2a:	f362 5117 	bfi	r1, r2, #20, #4
   10a2e:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
   10a32:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   10a36:	2405      	movs	r4, #5
   10a38:	f364 0103 	bfi	r1, r4, #0, #4
   10a3c:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   10a40:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   10a44:	f360 1107 	bfi	r1, r0, #4, #4
   10a48:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   10a4c:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   10a50:	2406      	movs	r4, #6
   10a52:	f364 210b 	bfi	r1, r4, #8, #4
   10a56:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   10a5a:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   10a5e:	2001      	movs	r0, #1
   10a60:	f360 310f 	bfi	r1, r0, #12, #4
   10a64:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   10a68:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   10a6c:	f362 61de 	bfi	r1, r2, #27, #4
   10a70:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   10a74:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
   10a78:	f362 0103 	bfi	r1, r2, #0, #4
   10a7c:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
   10a80:	4a45      	ldr	r2, [pc, #276]	; (10b98 <am_hal_pwrctrl_low_power_init+0x1b0>)
   10a82:	68d3      	ldr	r3, [r2, #12]
   10a84:	b2db      	uxtb	r3, r3
   10a86:	2b11      	cmp	r3, #17
   10a88:	d905      	bls.n	10a96 <am_hal_pwrctrl_low_power_init+0xae>
   10a8a:	f8d2 335c 	ldr.w	r3, [r2, #860]	; 0x35c
   10a8e:	f36f 6318 	bfc	r3, #24, #1
   10a92:	f8c2 335c 	str.w	r3, [r2, #860]	; 0x35c
   10a96:	2100      	movs	r1, #0
   10a98:	200c      	movs	r0, #12
   10a9a:	f7fd fe45 	bl	e728 <am_hal_cachectrl_control>
   10a9e:	4b3f      	ldr	r3, [pc, #252]	; (10b9c <am_hal_pwrctrl_low_power_init+0x1b4>)
   10aa0:	699b      	ldr	r3, [r3, #24]
   10aa2:	f3c3 2500 	ubfx	r5, r3, #8, #1
   10aa6:	05db      	lsls	r3, r3, #23
   10aa8:	d420      	bmi.n	10aec <am_hal_pwrctrl_low_power_init+0x104>
   10aaa:	4c3b      	ldr	r4, [pc, #236]	; (10b98 <am_hal_pwrctrl_low_power_init+0x1b0>)
   10aac:	68e3      	ldr	r3, [r4, #12]
   10aae:	b2db      	uxtb	r3, r3
   10ab0:	2b11      	cmp	r3, #17
   10ab2:	d84e      	bhi.n	10b52 <am_hal_pwrctrl_low_power_init+0x16a>
   10ab4:	4c38      	ldr	r4, [pc, #224]	; (10b98 <am_hal_pwrctrl_low_power_init+0x1b0>)
   10ab6:	493a      	ldr	r1, [pc, #232]	; (10ba0 <am_hal_pwrctrl_low_power_init+0x1b8>)
   10ab8:	7e22      	ldrb	r2, [r4, #24]
   10aba:	2001      	movs	r0, #1
   10abc:	4302      	orrs	r2, r0
   10abe:	2307      	movs	r3, #7
   10ac0:	7622      	strb	r2, [r4, #24]
   10ac2:	9000      	str	r0, [sp, #0]
   10ac4:	461a      	mov	r2, r3
   10ac6:	f242 7010 	movw	r0, #10000	; 0x2710
   10aca:	f7fe faa3 	bl	f014 <am_hal_flash_delay_status_check>
   10ace:	2800      	cmp	r0, #0
   10ad0:	d15a      	bne.n	10b88 <am_hal_pwrctrl_low_power_init+0x1a0>
   10ad2:	4b32      	ldr	r3, [pc, #200]	; (10b9c <am_hal_pwrctrl_low_power_init+0x1b4>)
   10ad4:	681a      	ldr	r2, [r3, #0]
   10ad6:	f042 0201 	orr.w	r2, r2, #1
   10ada:	601a      	str	r2, [r3, #0]
   10adc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   10ade:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10ae2:	625a      	str	r2, [r3, #36]	; 0x24
   10ae4:	68e3      	ldr	r3, [r4, #12]
   10ae6:	b2db      	uxtb	r3, r3
   10ae8:	2b11      	cmp	r3, #17
   10aea:	d002      	beq.n	10af2 <am_hal_pwrctrl_low_power_init+0x10a>
   10aec:	2000      	movs	r0, #0
   10aee:	b005      	add	sp, #20
   10af0:	bd30      	pop	{r4, r5, pc}
   10af2:	f8d4 335c 	ldr.w	r3, [r4, #860]	; 0x35c
   10af6:	f360 5356 	bfi	r3, r0, #21, #2
   10afa:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
   10afe:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
   10b02:	220f      	movs	r2, #15
   10b04:	f362 138b 	bfi	r3, r2, #6, #6
   10b08:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
   10b0c:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
   10b10:	f362 0305 	bfi	r3, r2, #0, #6
   10b14:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
   10b18:	b005      	add	sp, #20
   10b1a:	bd30      	pop	{r4, r5, pc}
   10b1c:	f7fe fc38 	bl	f390 <am_hal_interrupt_master_disable>
   10b20:	9002      	str	r0, [sp, #8]
   10b22:	68a3      	ldr	r3, [r4, #8]
   10b24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   10b28:	60a3      	str	r3, [r4, #8]
   10b2a:	9802      	ldr	r0, [sp, #8]
   10b2c:	f7fe fc34 	bl	f398 <am_hal_interrupt_master_set>
   10b30:	20a0      	movs	r0, #160	; 0xa0
   10b32:	f7fe fa5f 	bl	eff4 <am_hal_flash_delay>
   10b36:	69a3      	ldr	r3, [r4, #24]
   10b38:	0619      	lsls	r1, r3, #24
   10b3a:	d403      	bmi.n	10b44 <am_hal_pwrctrl_low_power_init+0x15c>
   10b3c:	20a0      	movs	r0, #160	; 0xa0
   10b3e:	f7fe fa59 	bl	eff4 <am_hal_flash_delay>
   10b42:	69a3      	ldr	r3, [r4, #24]
   10b44:	4b15      	ldr	r3, [pc, #84]	; (10b9c <am_hal_pwrctrl_low_power_init+0x1b4>)
   10b46:	699b      	ldr	r3, [r3, #24]
   10b48:	061a      	lsls	r2, r3, #24
   10b4a:	f53f af5f 	bmi.w	10a0c <am_hal_pwrctrl_low_power_init+0x24>
   10b4e:	2001      	movs	r0, #1
   10b50:	e7cd      	b.n	10aee <am_hal_pwrctrl_low_power_init+0x106>
   10b52:	f7fe fc1d 	bl	f390 <am_hal_interrupt_master_disable>
   10b56:	9003      	str	r0, [sp, #12]
   10b58:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
   10b5c:	2219      	movs	r2, #25
   10b5e:	f362 138b 	bfi	r3, r2, #6, #6
   10b62:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
   10b66:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
   10b6a:	210c      	movs	r1, #12
   10b6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   10b70:	f361 0205 	bfi	r2, r1, #0, #6
   10b74:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
   10b78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   10b7a:	f365 5296 	bfi	r2, r5, #22, #1
   10b7e:	63da      	str	r2, [r3, #60]	; 0x3c
   10b80:	9803      	ldr	r0, [sp, #12]
   10b82:	f7fe fc09 	bl	f398 <am_hal_interrupt_master_set>
   10b86:	e795      	b.n	10ab4 <am_hal_pwrctrl_low_power_init+0xcc>
   10b88:	2004      	movs	r0, #4
   10b8a:	b005      	add	sp, #20
   10b8c:	bd30      	pop	{r4, r5, pc}
   10b8e:	bf00      	nop
   10b90:	100063b8 	.word	0x100063b8
   10b94:	4ffff000 	.word	0x4ffff000
   10b98:	40020000 	.word	0x40020000
   10b9c:	40021000 	.word	0x40021000
   10ba0:	40020018 	.word	0x40020018

00010ba4 <am_hal_rtc_osc_disable>:
   10ba4:	4a03      	ldr	r2, [pc, #12]	; (10bb4 <am_hal_rtc_osc_disable+0x10>)
   10ba6:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
   10baa:	f043 0310 	orr.w	r3, r3, #16
   10bae:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
   10bb2:	4770      	bx	lr
   10bb4:	40004200 	.word	0x40004200

00010bb8 <am_hal_tpiu_enable>:
   10bb8:	b510      	push	{r4, lr}
   10bba:	4b23      	ldr	r3, [pc, #140]	; (10c48 <am_hal_tpiu_enable+0x90>)
   10bbc:	6804      	ldr	r4, [r0, #0]
   10bbe:	2200      	movs	r2, #0
   10bc0:	b084      	sub	sp, #16
   10bc2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   10bc6:	b334      	cbz	r4, 10c16 <am_hal_tpiu_enable+0x5e>
   10bc8:	4a20      	ldr	r2, [pc, #128]	; (10c4c <am_hal_tpiu_enable+0x94>)
   10bca:	4921      	ldr	r1, [pc, #132]	; (10c50 <am_hal_tpiu_enable+0x98>)
   10bcc:	2001      	movs	r0, #1
   10bce:	6058      	str	r0, [r3, #4]
   10bd0:	f5a4 4361 	sub.w	r3, r4, #57600	; 0xe100
   10bd4:	a801      	add	r0, sp, #4
   10bd6:	428b      	cmp	r3, r1
   10bd8:	bf88      	it	hi
   10bda:	4614      	movhi	r4, r2
   10bdc:	f7fd ffba 	bl	eb54 <am_hal_clkgen_status_get>
   10be0:	9b01      	ldr	r3, [sp, #4]
   10be2:	1c5a      	adds	r2, r3, #1
   10be4:	d02d      	beq.n	10c42 <am_hal_tpiu_enable+0x8a>
   10be6:	08db      	lsrs	r3, r3, #3
   10be8:	fbb3 f4f4 	udiv	r4, r3, r4
   10bec:	3c01      	subs	r4, #1
   10bee:	b2a4      	uxth	r4, r4
   10bf0:	4b15      	ldr	r3, [pc, #84]	; (10c48 <am_hal_tpiu_enable+0x90>)
   10bf2:	4a18      	ldr	r2, [pc, #96]	; (10c54 <am_hal_tpiu_enable+0x9c>)
   10bf4:	611c      	str	r4, [r3, #16]
   10bf6:	2102      	movs	r1, #2
   10bf8:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
   10bfc:	2000      	movs	r0, #0
   10bfe:	f240 2101 	movw	r1, #513	; 0x201
   10c02:	f8c3 0f00 	str.w	r0, [r3, #3840]	; 0xf00
   10c06:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
   10c0a:	f44f 7048 	mov.w	r0, #800	; 0x320
   10c0e:	f7fe f9f1 	bl	eff4 <am_hal_flash_delay>
   10c12:	b004      	add	sp, #16
   10c14:	bd10      	pop	{r4, pc}
   10c16:	6902      	ldr	r2, [r0, #16]
   10c18:	611a      	str	r2, [r3, #16]
   10c1a:	6882      	ldr	r2, [r0, #8]
   10c1c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
   10c20:	68c1      	ldr	r1, [r0, #12]
   10c22:	2201      	movs	r2, #1
   10c24:	3901      	subs	r1, #1
   10c26:	408a      	lsls	r2, r1
   10c28:	605a      	str	r2, [r3, #4]
   10c2a:	f8c3 4f00 	str.w	r4, [r3, #3840]	; 0xf00
   10c2e:	4a09      	ldr	r2, [pc, #36]	; (10c54 <am_hal_tpiu_enable+0x9c>)
   10c30:	6843      	ldr	r3, [r0, #4]
   10c32:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
   10c36:	f44f 7048 	mov.w	r0, #800	; 0x320
   10c3a:	f7fe f9db 	bl	eff4 <am_hal_flash_delay>
   10c3e:	b004      	add	sp, #16
   10c40:	bd10      	pop	{r4, pc}
   10c42:	2405      	movs	r4, #5
   10c44:	e7d4      	b.n	10bf0 <am_hal_tpiu_enable+0x38>
   10c46:	bf00      	nop
   10c48:	e0040000 	.word	0xe0040000
   10c4c:	000f4240 	.word	0x000f4240
   10c50:	001da380 	.word	0x001da380
   10c54:	40020000 	.word	0x40020000

00010c58 <am_hal_cmdq_init>:
   10c58:	2807      	cmp	r0, #7
   10c5a:	d849      	bhi.n	10cf0 <am_hal_cmdq_init+0x98>
   10c5c:	2900      	cmp	r1, #0
   10c5e:	d04b      	beq.n	10cf8 <am_hal_cmdq_init+0xa0>
   10c60:	b5f0      	push	{r4, r5, r6, r7, lr}
   10c62:	684e      	ldr	r6, [r1, #4]
   10c64:	2e00      	cmp	r6, #0
   10c66:	d041      	beq.n	10cec <am_hal_cmdq_init+0x94>
   10c68:	2a00      	cmp	r2, #0
   10c6a:	d03f      	beq.n	10cec <am_hal_cmdq_init+0x94>
   10c6c:	680c      	ldr	r4, [r1, #0]
   10c6e:	2c01      	cmp	r4, #1
   10c70:	d93c      	bls.n	10cec <am_hal_cmdq_init+0x94>
   10c72:	4f22      	ldr	r7, [pc, #136]	; (10cfc <am_hal_cmdq_init+0xa4>)
   10c74:	f04f 0e2c 	mov.w	lr, #44	; 0x2c
   10c78:	fb0e fe00 	mul.w	lr, lr, r0
   10c7c:	eb07 030e 	add.w	r3, r7, lr
   10c80:	78dd      	ldrb	r5, [r3, #3]
   10c82:	f015 0501 	ands.w	r5, r5, #1
   10c86:	d135      	bne.n	10cf4 <am_hal_cmdq_init+0x9c>
   10c88:	00e4      	lsls	r4, r4, #3
   10c8a:	619c      	str	r4, [r3, #24]
   10c8c:	4434      	add	r4, r6
   10c8e:	e9c3 6401 	strd	r6, r4, [r3, #4]
   10c92:	e9c3 6604 	strd	r6, r6, [r3, #16]
   10c96:	60de      	str	r6, [r3, #12]
   10c98:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
   10c9c:	4818      	ldr	r0, [pc, #96]	; (10d00 <am_hal_cmdq_init+0xa8>)
   10c9e:	f857 400e 	ldr.w	r4, [r7, lr]
   10ca2:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
   10ca6:	f8df c05c 	ldr.w	ip, [pc, #92]	; 10d04 <am_hal_cmdq_init+0xac>
   10caa:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
   10cae:	ea44 040c 	orr.w	r4, r4, ip
   10cb2:	f847 400e 	str.w	r4, [r7, lr]
   10cb6:	6258      	str	r0, [r3, #36]	; 0x24
   10cb8:	6880      	ldr	r0, [r0, #8]
   10cba:	e9c3 5507 	strd	r5, r5, [r3, #28]
   10cbe:	6005      	str	r5, [r0, #0]
   10cc0:	6a58      	ldr	r0, [r3, #36]	; 0x24
   10cc2:	68c0      	ldr	r0, [r0, #12]
   10cc4:	6005      	str	r5, [r0, #0]
   10cc6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   10cc8:	4628      	mov	r0, r5
   10cca:	e9d4 5704 	ldrd	r5, r7, [r4, #16]
   10cce:	682c      	ldr	r4, [r5, #0]
   10cd0:	433c      	orrs	r4, r7
   10cd2:	602c      	str	r4, [r5, #0]
   10cd4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   10cd6:	6864      	ldr	r4, [r4, #4]
   10cd8:	6026      	str	r6, [r4, #0]
   10cda:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   10cdc:	7a09      	ldrb	r1, [r1, #8]
   10cde:	6824      	ldr	r4, [r4, #0]
   10ce0:	0049      	lsls	r1, r1, #1
   10ce2:	f001 0102 	and.w	r1, r1, #2
   10ce6:	6021      	str	r1, [r4, #0]
   10ce8:	6013      	str	r3, [r2, #0]
   10cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10cec:	2006      	movs	r0, #6
   10cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10cf0:	2005      	movs	r0, #5
   10cf2:	4770      	bx	lr
   10cf4:	2007      	movs	r0, #7
   10cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10cf8:	2006      	movs	r0, #6
   10cfa:	4770      	bx	lr
   10cfc:	100063bc 	.word	0x100063bc
   10d00:	00011930 	.word	0x00011930
   10d04:	01cdcdcd 	.word	0x01cdcdcd

00010d08 <am_hal_cmdq_enable>:
   10d08:	4603      	mov	r3, r0
   10d0a:	b1a0      	cbz	r0, 10d36 <am_hal_cmdq_enable+0x2e>
   10d0c:	6802      	ldr	r2, [r0, #0]
   10d0e:	490c      	ldr	r1, [pc, #48]	; (10d40 <am_hal_cmdq_enable+0x38>)
   10d10:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   10d14:	428a      	cmp	r2, r1
   10d16:	d10e      	bne.n	10d36 <am_hal_cmdq_enable+0x2e>
   10d18:	78c0      	ldrb	r0, [r0, #3]
   10d1a:	f010 0002 	ands.w	r0, r0, #2
   10d1e:	d10c      	bne.n	10d3a <am_hal_cmdq_enable+0x32>
   10d20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   10d22:	6811      	ldr	r1, [r2, #0]
   10d24:	680a      	ldr	r2, [r1, #0]
   10d26:	f042 0201 	orr.w	r2, r2, #1
   10d2a:	600a      	str	r2, [r1, #0]
   10d2c:	78da      	ldrb	r2, [r3, #3]
   10d2e:	f042 0202 	orr.w	r2, r2, #2
   10d32:	70da      	strb	r2, [r3, #3]
   10d34:	4770      	bx	lr
   10d36:	2002      	movs	r0, #2
   10d38:	4770      	bx	lr
   10d3a:	2000      	movs	r0, #0
   10d3c:	4770      	bx	lr
   10d3e:	bf00      	nop
   10d40:	01cdcdcd 	.word	0x01cdcdcd

00010d44 <am_hal_cmdq_disable>:
   10d44:	4603      	mov	r3, r0
   10d46:	b1a8      	cbz	r0, 10d74 <am_hal_cmdq_disable+0x30>
   10d48:	6802      	ldr	r2, [r0, #0]
   10d4a:	490b      	ldr	r1, [pc, #44]	; (10d78 <am_hal_cmdq_disable+0x34>)
   10d4c:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   10d50:	428a      	cmp	r2, r1
   10d52:	d10f      	bne.n	10d74 <am_hal_cmdq_disable+0x30>
   10d54:	78c0      	ldrb	r0, [r0, #3]
   10d56:	f010 0002 	ands.w	r0, r0, #2
   10d5a:	d00c      	beq.n	10d76 <am_hal_cmdq_disable+0x32>
   10d5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   10d5e:	6811      	ldr	r1, [r2, #0]
   10d60:	680a      	ldr	r2, [r1, #0]
   10d62:	f022 0201 	bic.w	r2, r2, #1
   10d66:	600a      	str	r2, [r1, #0]
   10d68:	78da      	ldrb	r2, [r3, #3]
   10d6a:	f36f 0241 	bfc	r2, #1, #1
   10d6e:	2000      	movs	r0, #0
   10d70:	70da      	strb	r2, [r3, #3]
   10d72:	4770      	bx	lr
   10d74:	2002      	movs	r0, #2
   10d76:	4770      	bx	lr
   10d78:	01cdcdcd 	.word	0x01cdcdcd

00010d7c <am_hal_cmdq_alloc_block>:
   10d7c:	2800      	cmp	r0, #0
   10d7e:	d060      	beq.n	10e42 <am_hal_cmdq_alloc_block+0xc6>
   10d80:	b5f0      	push	{r4, r5, r6, r7, lr}
   10d82:	4604      	mov	r4, r0
   10d84:	6800      	ldr	r0, [r0, #0]
   10d86:	461d      	mov	r5, r3
   10d88:	4b2f      	ldr	r3, [pc, #188]	; (10e48 <am_hal_cmdq_alloc_block+0xcc>)
   10d8a:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
   10d8e:	4298      	cmp	r0, r3
   10d90:	b083      	sub	sp, #12
   10d92:	d146      	bne.n	10e22 <am_hal_cmdq_alloc_block+0xa6>
   10d94:	4616      	mov	r6, r2
   10d96:	2a00      	cmp	r2, #0
   10d98:	d049      	beq.n	10e2e <am_hal_cmdq_alloc_block+0xb2>
   10d9a:	2d00      	cmp	r5, #0
   10d9c:	d047      	beq.n	10e2e <am_hal_cmdq_alloc_block+0xb2>
   10d9e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   10da2:	429a      	cmp	r2, r3
   10da4:	d140      	bne.n	10e28 <am_hal_cmdq_alloc_block+0xac>
   10da6:	460f      	mov	r7, r1
   10da8:	f7fe faf2 	bl	f390 <am_hal_interrupt_master_disable>
   10dac:	9001      	str	r0, [sp, #4]
   10dae:	e9d4 2008 	ldrd	r2, r0, [r4, #32]
   10db2:	6883      	ldr	r3, [r0, #8]
   10db4:	6819      	ldr	r1, [r3, #0]
   10db6:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
   10dba:	b2c9      	uxtb	r1, r1
   10dbc:	430b      	orrs	r3, r1
   10dbe:	1ad2      	subs	r2, r2, r3
   10dc0:	2a00      	cmp	r2, #0
   10dc2:	bfb8      	it	lt
   10dc4:	f5a3 7380 	sublt.w	r3, r3, #256	; 0x100
   10dc8:	61e3      	str	r3, [r4, #28]
   10dca:	6843      	ldr	r3, [r0, #4]
   10dcc:	681b      	ldr	r3, [r3, #0]
   10dce:	60e3      	str	r3, [r4, #12]
   10dd0:	9801      	ldr	r0, [sp, #4]
   10dd2:	f7fe fae1 	bl	f398 <am_hal_interrupt_master_set>
   10dd6:	e9d4 2307 	ldrd	r2, r3, [r4, #28]
   10dda:	1ad2      	subs	r2, r2, r3
   10ddc:	f112 0ffe 	cmn.w	r2, #254	; 0xfe
   10de0:	d42d      	bmi.n	10e3e <am_hal_cmdq_alloc_block+0xc2>
   10de2:	e9d4 c103 	ldrd	ip, r1, [r4, #12]
   10de6:	4561      	cmp	r1, ip
   10de8:	d324      	bcc.n	10e34 <am_hal_cmdq_alloc_block+0xb8>
   10dea:	1cba      	adds	r2, r7, #2
   10dec:	68a0      	ldr	r0, [r4, #8]
   10dee:	eb01 0ec2 	add.w	lr, r1, r2, lsl #3
   10df2:	4586      	cmp	lr, r0
   10df4:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   10df8:	d909      	bls.n	10e0e <am_hal_cmdq_alloc_block+0x92>
   10dfa:	6860      	ldr	r0, [r4, #4]
   10dfc:	3a08      	subs	r2, #8
   10dfe:	4402      	add	r2, r0
   10e00:	4594      	cmp	ip, r2
   10e02:	d91c      	bls.n	10e3e <am_hal_cmdq_alloc_block+0xc2>
   10e04:	6a62      	ldr	r2, [r4, #36]	; 0x24
   10e06:	6852      	ldr	r2, [r2, #4]
   10e08:	e9c1 2000 	strd	r2, r0, [r1]
   10e0c:	4601      	mov	r1, r0
   10e0e:	6031      	str	r1, [r6, #0]
   10e10:	3301      	adds	r3, #1
   10e12:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
   10e16:	2000      	movs	r0, #0
   10e18:	6223      	str	r3, [r4, #32]
   10e1a:	602b      	str	r3, [r5, #0]
   10e1c:	6161      	str	r1, [r4, #20]
   10e1e:	b003      	add	sp, #12
   10e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10e22:	2002      	movs	r0, #2
   10e24:	b003      	add	sp, #12
   10e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10e28:	2007      	movs	r0, #7
   10e2a:	b003      	add	sp, #12
   10e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10e2e:	2006      	movs	r0, #6
   10e30:	b003      	add	sp, #12
   10e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10e34:	1c7a      	adds	r2, r7, #1
   10e36:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   10e3a:	4594      	cmp	ip, r2
   10e3c:	d8e7      	bhi.n	10e0e <am_hal_cmdq_alloc_block+0x92>
   10e3e:	2005      	movs	r0, #5
   10e40:	e7f0      	b.n	10e24 <am_hal_cmdq_alloc_block+0xa8>
   10e42:	2002      	movs	r0, #2
   10e44:	4770      	bx	lr
   10e46:	bf00      	nop
   10e48:	01cdcdcd 	.word	0x01cdcdcd

00010e4c <am_hal_cmdq_release_block>:
   10e4c:	b178      	cbz	r0, 10e6e <am_hal_cmdq_release_block+0x22>
   10e4e:	6803      	ldr	r3, [r0, #0]
   10e50:	4a09      	ldr	r2, [pc, #36]	; (10e78 <am_hal_cmdq_release_block+0x2c>)
   10e52:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   10e56:	4293      	cmp	r3, r2
   10e58:	d109      	bne.n	10e6e <am_hal_cmdq_release_block+0x22>
   10e5a:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   10e5e:	429a      	cmp	r2, r3
   10e60:	d007      	beq.n	10e72 <am_hal_cmdq_release_block+0x26>
   10e62:	6a03      	ldr	r3, [r0, #32]
   10e64:	6142      	str	r2, [r0, #20]
   10e66:	3b01      	subs	r3, #1
   10e68:	6203      	str	r3, [r0, #32]
   10e6a:	2000      	movs	r0, #0
   10e6c:	4770      	bx	lr
   10e6e:	2002      	movs	r0, #2
   10e70:	4770      	bx	lr
   10e72:	2007      	movs	r0, #7
   10e74:	4770      	bx	lr
   10e76:	bf00      	nop
   10e78:	01cdcdcd 	.word	0x01cdcdcd

00010e7c <am_hal_cmdq_post_block>:
   10e7c:	b1d0      	cbz	r0, 10eb4 <am_hal_cmdq_post_block+0x38>
   10e7e:	6803      	ldr	r3, [r0, #0]
   10e80:	4a0e      	ldr	r2, [pc, #56]	; (10ebc <am_hal_cmdq_post_block+0x40>)
   10e82:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   10e86:	4293      	cmp	r3, r2
   10e88:	d114      	bne.n	10eb4 <am_hal_cmdq_post_block+0x38>
   10e8a:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   10e8e:	429a      	cmp	r2, r3
   10e90:	d012      	beq.n	10eb8 <am_hal_cmdq_post_block+0x3c>
   10e92:	b410      	push	{r4}
   10e94:	6a44      	ldr	r4, [r0, #36]	; 0x24
   10e96:	e9d4 2402 	ldrd	r2, r4, [r4, #8]
   10e9a:	4311      	orrs	r1, r2
   10e9c:	6a02      	ldr	r2, [r0, #32]
   10e9e:	e9c3 1200 	strd	r1, r2, [r3]
   10ea2:	3308      	adds	r3, #8
   10ea4:	b2d2      	uxtb	r2, r2
   10ea6:	e9c0 3304 	strd	r3, r3, [r0, #16]
   10eaa:	2000      	movs	r0, #0
   10eac:	6022      	str	r2, [r4, #0]
   10eae:	f85d 4b04 	ldr.w	r4, [sp], #4
   10eb2:	4770      	bx	lr
   10eb4:	2002      	movs	r0, #2
   10eb6:	4770      	bx	lr
   10eb8:	2007      	movs	r0, #7
   10eba:	4770      	bx	lr
   10ebc:	01cdcdcd 	.word	0x01cdcdcd

00010ec0 <am_hal_cmdq_term>:
   10ec0:	2800      	cmp	r0, #0
   10ec2:	d03d      	beq.n	10f40 <am_hal_cmdq_term+0x80>
   10ec4:	b570      	push	{r4, r5, r6, lr}
   10ec6:	6803      	ldr	r3, [r0, #0]
   10ec8:	4a1e      	ldr	r2, [pc, #120]	; (10f44 <am_hal_cmdq_term+0x84>)
   10eca:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   10ece:	4293      	cmp	r3, r2
   10ed0:	b082      	sub	sp, #8
   10ed2:	4604      	mov	r4, r0
   10ed4:	d002      	beq.n	10edc <am_hal_cmdq_term+0x1c>
   10ed6:	2002      	movs	r0, #2
   10ed8:	b002      	add	sp, #8
   10eda:	bd70      	pop	{r4, r5, r6, pc}
   10edc:	460d      	mov	r5, r1
   10ede:	f7fe fa57 	bl	f390 <am_hal_interrupt_master_disable>
   10ee2:	6a66      	ldr	r6, [r4, #36]	; 0x24
   10ee4:	9001      	str	r0, [sp, #4]
   10ee6:	68b3      	ldr	r3, [r6, #8]
   10ee8:	6a22      	ldr	r2, [r4, #32]
   10eea:	6819      	ldr	r1, [r3, #0]
   10eec:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
   10ef0:	b2c9      	uxtb	r1, r1
   10ef2:	430b      	orrs	r3, r1
   10ef4:	1ad2      	subs	r2, r2, r3
   10ef6:	2a00      	cmp	r2, #0
   10ef8:	bfb8      	it	lt
   10efa:	f5a3 7380 	sublt.w	r3, r3, #256	; 0x100
   10efe:	61e3      	str	r3, [r4, #28]
   10f00:	6873      	ldr	r3, [r6, #4]
   10f02:	681b      	ldr	r3, [r3, #0]
   10f04:	60e3      	str	r3, [r4, #12]
   10f06:	9801      	ldr	r0, [sp, #4]
   10f08:	f7fe fa46 	bl	f398 <am_hal_interrupt_master_set>
   10f0c:	b91d      	cbnz	r5, 10f16 <am_hal_cmdq_term+0x56>
   10f0e:	e9d4 2307 	ldrd	r2, r3, [r4, #28]
   10f12:	429a      	cmp	r2, r3
   10f14:	d112      	bne.n	10f3c <am_hal_cmdq_term+0x7c>
   10f16:	6a62      	ldr	r2, [r4, #36]	; 0x24
   10f18:	78e3      	ldrb	r3, [r4, #3]
   10f1a:	6810      	ldr	r0, [r2, #0]
   10f1c:	6911      	ldr	r1, [r2, #16]
   10f1e:	f36f 0300 	bfc	r3, #0, #1
   10f22:	70e3      	strb	r3, [r4, #3]
   10f24:	6803      	ldr	r3, [r0, #0]
   10f26:	f023 0301 	bic.w	r3, r3, #1
   10f2a:	6003      	str	r3, [r0, #0]
   10f2c:	680b      	ldr	r3, [r1, #0]
   10f2e:	6952      	ldr	r2, [r2, #20]
   10f30:	2000      	movs	r0, #0
   10f32:	ea23 0302 	bic.w	r3, r3, r2
   10f36:	600b      	str	r3, [r1, #0]
   10f38:	b002      	add	sp, #8
   10f3a:	bd70      	pop	{r4, r5, r6, pc}
   10f3c:	2003      	movs	r0, #3
   10f3e:	e7cb      	b.n	10ed8 <am_hal_cmdq_term+0x18>
   10f40:	2002      	movs	r0, #2
   10f42:	4770      	bx	lr
   10f44:	01cdcdcd 	.word	0x01cdcdcd

00010f48 <am_hal_cmdq_reset>:
   10f48:	b328      	cbz	r0, 10f96 <am_hal_cmdq_reset+0x4e>
   10f4a:	6802      	ldr	r2, [r0, #0]
   10f4c:	4914      	ldr	r1, [pc, #80]	; (10fa0 <am_hal_cmdq_reset+0x58>)
   10f4e:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   10f52:	428a      	cmp	r2, r1
   10f54:	4603      	mov	r3, r0
   10f56:	d11e      	bne.n	10f96 <am_hal_cmdq_reset+0x4e>
   10f58:	78c2      	ldrb	r2, [r0, #3]
   10f5a:	f012 0202 	ands.w	r2, r2, #2
   10f5e:	d11c      	bne.n	10f9a <am_hal_cmdq_reset+0x52>
   10f60:	6a41      	ldr	r1, [r0, #36]	; 0x24
   10f62:	b430      	push	{r4, r5}
   10f64:	680c      	ldr	r4, [r1, #0]
   10f66:	6820      	ldr	r0, [r4, #0]
   10f68:	f020 0001 	bic.w	r0, r0, #1
   10f6c:	6020      	str	r0, [r4, #0]
   10f6e:	e9d1 5402 	ldrd	r5, r4, [r1, #8]
   10f72:	6858      	ldr	r0, [r3, #4]
   10f74:	6849      	ldr	r1, [r1, #4]
   10f76:	60d8      	str	r0, [r3, #12]
   10f78:	e9c3 0004 	strd	r0, r0, [r3, #16]
   10f7c:	e9c3 2207 	strd	r2, r2, [r3, #28]
   10f80:	602a      	str	r2, [r5, #0]
   10f82:	6022      	str	r2, [r4, #0]
   10f84:	6858      	ldr	r0, [r3, #4]
   10f86:	6008      	str	r0, [r1, #0]
   10f88:	78d9      	ldrb	r1, [r3, #3]
   10f8a:	f362 0141 	bfi	r1, r2, #1, #1
   10f8e:	4610      	mov	r0, r2
   10f90:	bc30      	pop	{r4, r5}
   10f92:	70d9      	strb	r1, [r3, #3]
   10f94:	4770      	bx	lr
   10f96:	2002      	movs	r0, #2
   10f98:	4770      	bx	lr
   10f9a:	2007      	movs	r0, #7
   10f9c:	4770      	bx	lr
   10f9e:	bf00      	nop
   10fa0:	01cdcdcd 	.word	0x01cdcdcd

00010fa4 <am_hal_cmdq_post_loop_block>:
   10fa4:	b1f0      	cbz	r0, 10fe4 <am_hal_cmdq_post_loop_block+0x40>
   10fa6:	6802      	ldr	r2, [r0, #0]
   10fa8:	4603      	mov	r3, r0
   10faa:	4810      	ldr	r0, [pc, #64]	; (10fec <am_hal_cmdq_post_loop_block+0x48>)
   10fac:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   10fb0:	4282      	cmp	r2, r0
   10fb2:	d117      	bne.n	10fe4 <am_hal_cmdq_post_loop_block+0x40>
   10fb4:	e9d3 0204 	ldrd	r0, r2, [r3, #16]
   10fb8:	4290      	cmp	r0, r2
   10fba:	d015      	beq.n	10fe8 <am_hal_cmdq_post_loop_block+0x44>
   10fbc:	b430      	push	{r4, r5}
   10fbe:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   10fc0:	6865      	ldr	r5, [r4, #4]
   10fc2:	68a0      	ldr	r0, [r4, #8]
   10fc4:	6010      	str	r0, [r2, #0]
   10fc6:	4329      	orrs	r1, r5
   10fc8:	68e4      	ldr	r4, [r4, #12]
   10fca:	6091      	str	r1, [r2, #8]
   10fcc:	2000      	movs	r0, #0
   10fce:	6859      	ldr	r1, [r3, #4]
   10fd0:	6050      	str	r0, [r2, #4]
   10fd2:	60d1      	str	r1, [r2, #12]
   10fd4:	3210      	adds	r2, #16
   10fd6:	e9c3 2204 	strd	r2, r2, [r3, #16]
   10fda:	f893 3020 	ldrb.w	r3, [r3, #32]
   10fde:	6023      	str	r3, [r4, #0]
   10fe0:	bc30      	pop	{r4, r5}
   10fe2:	4770      	bx	lr
   10fe4:	2002      	movs	r0, #2
   10fe6:	4770      	bx	lr
   10fe8:	2007      	movs	r0, #7
   10fea:	4770      	bx	lr
   10fec:	01cdcdcd 	.word	0x01cdcdcd
   10ff0:	62616e55 	.word	0x62616e55
   10ff4:	7420656c 	.word	0x7420656c
   10ff8:	7572206f 	.word	0x7572206f
   10ffc:	4958206e 	.word	0x4958206e
   11000:	75732050 	.word	0x75732050
   11004:	73656363 	.word	0x73656363
   11008:	6c756673 	.word	0x6c756673
   1100c:	000a796c 	.word	0x000a796c
   11010:	2a2a2a2a 	.word	0x2a2a2a2a
   11014:	6574492a 	.word	0x6574492a
   11018:	69746172 	.word	0x69746172
   1101c:	64256e6f 	.word	0x64256e6f
   11020:	6d6f6320 	.word	0x6d6f6320
   11024:	74656c70 	.word	0x74656c70
   11028:	2a2a2a65 	.word	0x2a2a2a65
   1102c:	000a2a2a 	.word	0x000a2a2a
   11030:	61746f54 	.word	0x61746f54
   11034:	6566206c 	.word	0x6566206c
   11038:	20686374 	.word	0x20686374
   1103c:	626d756e 	.word	0x626d756e
   11040:	203a7265 	.word	0x203a7265
   11044:	000a6425 	.word	0x000a6425
   11048:	6b6f6f4c 	.word	0x6b6f6f4c
   1104c:	20707520 	.word	0x20707520
   11050:	626d756e 	.word	0x626d756e
   11054:	203a7265 	.word	0x203a7265
   11058:	000a6425 	.word	0x000a6425
   1105c:	68636143 	.word	0x68636143
   11060:	696d2065 	.word	0x696d2065
   11064:	6e207373 	.word	0x6e207373
   11068:	65626d75 	.word	0x65626d75
   1106c:	25203a72 	.word	0x25203a72
   11070:	00000a64 	.word	0x00000a64
   11074:	68636143 	.word	0x68636143
   11078:	69682065 	.word	0x69682065
   1107c:	61722074 	.word	0x61722074
   11080:	203a6574 	.word	0x203a6574
   11084:	322e3625 	.word	0x322e3625
   11088:	0a252566 	.word	0x0a252566
   1108c:	00000000 	.word	0x00000000
   11090:	20504958 	.word	0x20504958
   11094:	68636143 	.word	0x68636143
   11098:	65502065 	.word	0x65502065
   1109c:	726f6672 	.word	0x726f6672
   110a0:	636e616d 	.word	0x636e616d
   110a4:	65442065 	.word	0x65442065
   110a8:	736e6f6d 	.word	0x736e6f6d
   110ac:	74617274 	.word	0x74617274
   110b0:	206e6f69 	.word	0x206e6f69
   110b4:	21646e45 	.word	0x21646e45
   110b8:	0000000a 	.word	0x0000000a
   110bc:	68636143 	.word	0x68636143
   110c0:	6f6d2065 	.word	0x6f6d2065
   110c4:	6f74696e 	.word	0x6f74696e
   110c8:	78652072 	.word	0x78652072
   110cc:	6c706d61 	.word	0x6c706d61
   110d0:	6f632065 	.word	0x6f632065
   110d4:	656c706d 	.word	0x656c706d
   110d8:	2e736574 	.word	0x2e736574
   110dc:	000a2e2e 	.word	0x000a2e2e
   110e0:	6c696146 	.word	0x6c696146
   110e4:	74206465 	.word	0x74206465
   110e8:	6f63206f 	.word	0x6f63206f
   110ec:	6769666e 	.word	0x6769666e
   110f0:	20657275 	.word	0x20657275
   110f4:	20656874 	.word	0x20656874
   110f8:	4950534d 	.word	0x4950534d
   110fc:	646e6120 	.word	0x646e6120
   11100:	52535020 	.word	0x52535020
   11104:	44204d41 	.word	0x44204d41
   11108:	63697665 	.word	0x63697665
   1110c:	6f632065 	.word	0x6f632065
   11110:	63657272 	.word	0x63657272
   11114:	21796c74 	.word	0x21796c74
   11118:	0000000a 	.word	0x0000000a
   1111c:	74697257 	.word	0x74697257
   11120:	20676e69 	.word	0x20676e69
   11124:	63657845 	.word	0x63657845
   11128:	62617475 	.word	0x62617475
   1112c:	6620656c 	.word	0x6620656c
   11130:	74636e75 	.word	0x74636e75
   11134:	206e6f69 	.word	0x206e6f69
   11138:	2520666f 	.word	0x2520666f
   1113c:	79422064 	.word	0x79422064
   11140:	20736574 	.word	0x20736574
   11144:	61206f74 	.word	0x61206f74
   11148:	65726464 	.word	0x65726464
   1114c:	25207373 	.word	0x25207373
   11150:	00000a64 	.word	0x00000a64
   11154:	6c696146 	.word	0x6c696146
   11158:	74206465 	.word	0x74206465
   1115c:	7277206f 	.word	0x7277206f
   11160:	20657469 	.word	0x20657469
   11164:	63657865 	.word	0x63657865
   11168:	62617475 	.word	0x62617475
   1116c:	6620656c 	.word	0x6620656c
   11170:	74636e75 	.word	0x74636e75
   11174:	206e6f69 	.word	0x206e6f69
   11178:	46206f74 	.word	0x46206f74
   1117c:	6873616c 	.word	0x6873616c
   11180:	76654420 	.word	0x76654420
   11184:	21656369 	.word	0x21656369
   11188:	0000000a 	.word	0x0000000a
   1118c:	74747550 	.word	0x74747550
   11190:	20676e69 	.word	0x20676e69
   11194:	20656874 	.word	0x20656874
   11198:	4950534d 	.word	0x4950534d
   1119c:	646e6120 	.word	0x646e6120
   111a0:	74784520 	.word	0x74784520
   111a4:	616e7265 	.word	0x616e7265
   111a8:	5350206c 	.word	0x5350206c
   111ac:	204d4152 	.word	0x204d4152
   111b0:	6f746e69 	.word	0x6f746e69
   111b4:	50495820 	.word	0x50495820
   111b8:	646f6d20 	.word	0x646f6d20
   111bc:	00000a65 	.word	0x00000a65
   111c0:	6c696146 	.word	0x6c696146
   111c4:	74206465 	.word	0x74206465
   111c8:	7570206f 	.word	0x7570206f
   111cc:	68742074 	.word	0x68742074
   111d0:	534d2065 	.word	0x534d2065
   111d4:	69204950 	.word	0x69204950
   111d8:	206f746e 	.word	0x206f746e
   111dc:	20504958 	.word	0x20504958
   111e0:	65646f6d 	.word	0x65646f6d
   111e4:	00000a21 	.word	0x00000a21
   111e8:	6c696146 	.word	0x6c696146
   111ec:	74206465 	.word	0x74206465
   111f0:	6e69206f 	.word	0x6e69206f
   111f4:	696c6176 	.word	0x696c6176
   111f8:	65746164 	.word	0x65746164
   111fc:	63614320 	.word	0x63614320
   11200:	0a216568 	.word	0x0a216568
   11204:	00000000 	.word	0x00000000
   11208:	6961460a 	.word	0x6961460a
   1120c:	2064656c 	.word	0x2064656c
   11210:	77206f74 	.word	0x77206f74
   11214:	65746972 	.word	0x65746972
   11218:	66756220 	.word	0x66756220
   1121c:	20726566 	.word	0x20726566
   11220:	50206f74 	.word	0x50206f74
   11224:	4d415253 	.word	0x4d415253
   11228:	76654420 	.word	0x76654420
   1122c:	21656369 	.word	0x21656369
   11230:	0000000a 	.word	0x0000000a
   11234:	6961460a 	.word	0x6961460a
   11238:	2064656c 	.word	0x2064656c
   1123c:	72206f74 	.word	0x72206f74
   11240:	20646165 	.word	0x20646165
   11244:	66667562 	.word	0x66667562
   11248:	74207265 	.word	0x74207265
   1124c:	5350206f 	.word	0x5350206f
   11250:	204d4152 	.word	0x204d4152
   11254:	69766544 	.word	0x69766544
   11258:	0a216563 	.word	0x0a216563
   1125c:	00000000 	.word	0x00000000
   11260:	2058540a 	.word	0x2058540a
   11264:	20646e61 	.word	0x20646e61
   11268:	62205852 	.word	0x62205852
   1126c:	65666675 	.word	0x65666675
   11270:	66207372 	.word	0x66207372
   11274:	656c6961 	.word	0x656c6961
   11278:	6f742064 	.word	0x6f742064
   1127c:	6d6f6320 	.word	0x6d6f6320
   11280:	65726170 	.word	0x65726170
   11284:	00000a21 	.word	0x00000a21
   11288:	525f4d41 	.word	0x525f4d41
   1128c:	00004745 	.word	0x00004745
   11290:	49534d43 	.word	0x49534d43
   11294:	00000053 	.word	0x00000053
   11298:	69626d41 	.word	0x69626d41
   1129c:	694d2071 	.word	0x694d2071
   112a0:	206f7263 	.word	0x206f7263
   112a4:	68636163 	.word	0x68636163
   112a8:	6f6d2065 	.word	0x6f6d2065
   112ac:	6f74696e 	.word	0x6f74696e
   112b0:	78652072 	.word	0x78652072
   112b4:	6c706d61 	.word	0x6c706d61
   112b8:	0a0a2e65 	.word	0x0a0a2e65
   112bc:	00000000 	.word	0x00000000
   112c0:	20434347 	.word	0x20434347
   112c4:	332e3031 	.word	0x332e3031
   112c8:	3220312e 	.word	0x3220312e
   112cc:	30313230 	.word	0x30313230
   112d0:	20343238 	.word	0x20343238
   112d4:	6c657228 	.word	0x6c657228
   112d8:	65736165 	.word	0x65736165
   112dc:	00000029 	.word	0x00000029
   112e0:	20707041 	.word	0x20707041
   112e4:	706d6f43 	.word	0x706d6f43
   112e8:	72656c69 	.word	0x72656c69
   112ec:	2020203a 	.word	0x2020203a
   112f0:	0a732520 	.word	0x0a732520
   112f4:	00000000 	.word	0x00000000
   112f8:	204c4148 	.word	0x204c4148
   112fc:	706d6f43 	.word	0x706d6f43
   11300:	72656c69 	.word	0x72656c69
   11304:	2020203a 	.word	0x2020203a
   11308:	0a732520 	.word	0x0a732520
   1130c:	00000000 	.word	0x00000000
   11310:	204c4148 	.word	0x204c4148
   11314:	204b4453 	.word	0x204b4453
   11318:	73726576 	.word	0x73726576
   1131c:	3a6e6f69 	.word	0x3a6e6f69
   11320:	2e642520 	.word	0x2e642520
   11324:	252e6425 	.word	0x252e6425
   11328:	00000a64 	.word	0x00000a64
   1132c:	204c4148 	.word	0x204c4148
   11330:	706d6f63 	.word	0x706d6f63
   11334:	64656c69 	.word	0x64656c69
   11338:	74697720 	.word	0x74697720
   1133c:	73252068 	.word	0x73252068
   11340:	7974732d 	.word	0x7974732d
   11344:	7220656c 	.word	0x7220656c
   11348:	73696765 	.word	0x73696765
   1134c:	73726574 	.word	0x73726574
   11350:	0000000a 	.word	0x0000000a
   11354:	62616e55 	.word	0x62616e55
   11358:	7420656c 	.word	0x7420656c
   1135c:	6e69206f 	.word	0x6e69206f
   11360:	61697469 	.word	0x61697469
   11364:	657a696c 	.word	0x657a696c
   11368:	50534d20 	.word	0x50534d20
   1136c:	73702049 	.word	0x73702049
   11370:	0a6d6172 	.word	0x0a6d6172
   11374:	00000000 	.word	0x00000000
   11378:	43414344 	.word	0x43414344
   1137c:	50204548 	.word	0x50204548
   11380:	6f667265 	.word	0x6f667265
   11384:	6e616d72 	.word	0x6e616d72
   11388:	44206563 	.word	0x44206563
   1138c:	6e6f6d65 	.word	0x6e6f6d65
   11390:	61727473 	.word	0x61727473
   11394:	6e6f6974 	.word	0x6e6f6974
   11398:	61745320 	.word	0x61745320
   1139c:	0a217472 	.word	0x0a217472
   113a0:	00000000 	.word	0x00000000
   113a4:	62616e55 	.word	0x62616e55
   113a8:	7420656c 	.word	0x7420656c
   113ac:	6c66206f 	.word	0x6c66206f
   113b0:	20687375 	.word	0x20687375
   113b4:	4950534d 	.word	0x4950534d
   113b8:	72737020 	.word	0x72737020
   113bc:	000a6d61 	.word	0x000a6d61
   113c0:	43414344 	.word	0x43414344
   113c4:	50204548 	.word	0x50204548
   113c8:	6f667265 	.word	0x6f667265
   113cc:	6e616d72 	.word	0x6e616d72
   113d0:	44206563 	.word	0x44206563
   113d4:	6e6f6d65 	.word	0x6e6f6d65
   113d8:	61727473 	.word	0x61727473
   113dc:	6e6f6974 	.word	0x6e6f6974
   113e0:	646e4520 	.word	0x646e4520
   113e4:	00000a21 	.word	0x00000a21
   113e8:	43414349 	.word	0x43414349
   113ec:	50204548 	.word	0x50204548
   113f0:	6f667265 	.word	0x6f667265
   113f4:	6e616d72 	.word	0x6e616d72
   113f8:	44206563 	.word	0x44206563
   113fc:	6e6f6d65 	.word	0x6e6f6d65
   11400:	61727473 	.word	0x61727473
   11404:	6e6f6974 	.word	0x6e6f6974
   11408:	61745320 	.word	0x61745320
   1140c:	0a217472 	.word	0x0a217472
   11410:	00000000 	.word	0x00000000
   11414:	4f525245 	.word	0x4f525245
   11418:	49203a52 	.word	0x49203a52
   1141c:	6c61766e 	.word	0x6c61766e
   11420:	72206469 	.word	0x72206469
   11424:	6c757365 	.word	0x6c757365
   11428:	45202e74 	.word	0x45202e74
   1142c:	63657078 	.word	0x63657078
   11430:	20646574 	.word	0x20646574
   11434:	202c6425 	.word	0x202c6425
   11438:	20746f67 	.word	0x20746f67
   1143c:	0a2e6425 	.word	0x0a2e6425
   11440:	00000000 	.word	0x00000000
   11444:	43414349 	.word	0x43414349
   11448:	50204548 	.word	0x50204548
   1144c:	6f667265 	.word	0x6f667265
   11450:	6e616d72 	.word	0x6e616d72
   11454:	44206563 	.word	0x44206563
   11458:	6e6f6d65 	.word	0x6e6f6d65
   1145c:	61727473 	.word	0x61727473
   11460:	6e6f6974 	.word	0x6e6f6974
   11464:	646e4520 	.word	0x646e4520
   11468:	00000a21 	.word	0x00000a21
   1146c:	62616e55 	.word	0x62616e55
   11470:	7420656c 	.word	0x7420656c
   11474:	6e69206f 	.word	0x6e69206f
   11478:	58207469 	.word	0x58207469
   1147c:	000a5049 	.word	0x000a5049
   11480:	20504958 	.word	0x20504958
   11484:	68636143 	.word	0x68636143
   11488:	65502065 	.word	0x65502065
   1148c:	726f6672 	.word	0x726f6672
   11490:	636e616d 	.word	0x636e616d
   11494:	65442065 	.word	0x65442065
   11498:	736e6f6d 	.word	0x736e6f6d
   1149c:	74617274 	.word	0x74617274
   114a0:	206e6f69 	.word	0x206e6f69
   114a4:	72617453 	.word	0x72617453
   114a8:	000a2174 	.word	0x000a2174

000114ac <Kc_PRIME_MPI>:
   114ac:	4604b470 1c892000 db28428c 26021c45     p..F. ...B(.E..&
   114bc:	da20428e f3f6fb91 1313fb06 1c76b1d3     .B ...........v.
   114cc:	da18428e f3f6fb91 1313fb06 1c76b193     .B............v.
   114dc:	da10428e f3f6fb91 1313fb06 1c76b153     .B..........S.v.
   114ec:	da08428e f3f6fb91 1313fb06 bf182b00     .B...........+..
   114fc:	d1dd1c76 18514605 4628428c bc70dad6     v....FQ..B(F..p.
   1150c:	00004770                                pG..

00011510 <cache_monitor_cachectrl>:
   11510:	00000308 0a0a0a0a 0a0a0a0a 0a0a0a0a     ................
   11520:	0a0a0a0a 00000a0a 6f727245 202d2072     ........Error - 
   11530:	6c696146 74206465 6e69206f 61697469     Failed to initia
   11540:	657a696c 50534d20 000a2e49 6f727245     lize MSPI...Erro
   11550:	202d2072 6c696146 74206465 6f70206f     r - Failed to po
   11560:	20726577 4d206e6f 2e495053 0000000a     wer on MSPI.....
   11570:	6f727245 202d2072 6c696146 74206465     Error - Failed t
   11580:	6f63206f 6769666e 20657275 4950534d     o configure MSPI
   11590:	76656420 2e656369 0000000a 6f727245      device.....Erro
   115a0:	202d2072 6c696146 74206465 6e65206f     r - Failed to en
   115b0:	656c6261 50534d20 000a2e49 6f727245     able MSPI...Erro
   115c0:	202d2072 6c696146 74206465 6f63206f     r - Failed to co
   115d0:	6769666e 20657275 4950534d 00000a2e     nfigure MSPI....
   115e0:	41525350 4449204d 20736920 78257830     PSRAM ID is 0x%x
   115f0:	0000000a                                ....

000115f4 <g_AM_BSP_GPIO_ITM_SWO>:
   115f4:	00000002                                ....

000115f8 <g_AM_BSP_GPIO_MSPI_CE0>:
   115f8:	00060701                                ....

000115fc <g_AM_BSP_GPIO_MSPI_CE1>:
   115fc:	000e0700                                ....

00011600 <g_AM_BSP_GPIO_MSPI_D0>:
   11600:	00060206                                ....

00011604 <g_AM_BSP_GPIO_MSPI_D1>:
   11604:	00060205                                ....

00011608 <g_AM_BSP_GPIO_MSPI_D2>:
   11608:	00060207                                ....

0001160c <g_AM_BSP_GPIO_MSPI_D3>:
   1160c:	00060206                                ....

00011610 <g_AM_BSP_GPIO_MSPI_D4>:
   11610:	00060205                                ....

00011614 <g_AM_BSP_GPIO_MSPI_D5>:
   11614:	00060205                                ....

00011618 <g_AM_BSP_GPIO_MSPI_D6>:
   11618:	00060205                                ....

0001161c <g_AM_BSP_GPIO_MSPI_D7>:
   1161c:	00060205                                ....

00011620 <g_AM_BSP_GPIO_MSPI_SCK>:
   11620:	00060302 6d695443 69207265 7265746e     ....CTimer inter
   11630:	74707572 6d756e20 20726562 2074756f     rupt number out 
   11640:	7220666f 65676e61 0000002e 75626564     of range....debu
   11650:	69665f67 616e656c 652e656d 00007478     g_filename.ext..

00011660 <g_ui32HALversion>:
   11660:	02050000                                ....

00011664 <g_ui8HALcompiler>:
   11664:	20434347 332e3031 3220312e 30313230     GCC 10.3.1 20210
   11674:	20343238 6c657228 65736165 00000029     824 (release)...

00011684 <g_AM_HAL_GPIO_DISABLE>:
   11684:	00000003                                ....

00011688 <g_AM_HAL_GPIO_OUTPUT>:
   11688:	00000403                                ....

0001168c <g_ui8Bit76Capabilities>:
   1168c:	02800101 80010180 80800101 80808080     ................
   1169c:	80808080 80808008 01800180 80808080     ................
   116ac:	80808080 01800402 01010401 80808080     ................
   116bc:	00000101                                ....

000116c0 <g_ui8Inpen>:
   116c0:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
   116d0:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
   116e0:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
   116f0:	00003130                                01..

000116f4 <g_ui8NCEtable>:
   116f4:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   11704:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   11714:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   11724:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   11734:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   11744:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   11754:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   11764:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   11774:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   11784:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   11794:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   117a4:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   117b4:	32221202 43231303                       .."2..#C

000117bc <g_ui8nCEpins>:
   117bc:	02070707 00080802 01020202 01010101     ................
   117cc:	01010101 01010101 01010101 01010101     ................
   117dc:	01010101 08010101 01010008 01010101     ................
   117ec:	00000101                                ....

000117f0 <g_am_hal_mcuctrl_flash_size>:
   117f0:	00004000 00008000 00010000 00020000     .@..............
   11800:	00040000 00080000 00100000 00200000     .............. .
   11810:	00180000 00000000 00000000 00000000     ................
	...

00011830 <g_am_hal_mcuctrl_sram_size>:
   11830:	00004000 00008000 00010000 00020000     .@..............
   11840:	00040000 00080000 00100000 00060000     ................
   11850:	000c0000 00000000 00000000 00000000     ................
	...

00011870 <CSWTCH.47>:
   11870:	00020000 00010000 00030000              ............

0001187c <am_hal_pwrctrl_peripheral_control>:
	...
   11888:	00000001 00000004 00000004 00000002     ................
   11898:	00000008 00000008 00000004 00000008     ................
   118a8:	00000008 00000008 00000008 00000008     ................
   118b8:	00000010 00000010 00000010 00000020     ............ ...
   118c8:	00000010 00000010 00000040 00000010     ........@.......
   118d8:	00000010 00000080 00000004 00000004     ................
   118e8:	00000100 00000004 00000004 00000200     ................
   118f8:	00000020 00000020 00000400 00000004      ... ...........
   11908:	00000004 00000800 00000040 00000040     ........@...@...
   11918:	00001000 00000080 00000080 00002000     ............. ..
   11928:	00000100 00000100                       ........

00011930 <gAmHalCmdQReg>:
   11930:	50004294 50004298 500042ac 500042b0     .B.P.B.P.B.P.B.P
   11940:	500042a8 00008000 5000429c 00000001     .B.P.....B.P....
   11950:	00000004 00000002 50005294 50005298     .........R.P.R.P
   11960:	500052ac 500052b0 500052a8 00008000     .R.P.R.P.R.P....
   11970:	5000529c 00000001 00000004 00000002     .R.P............
   11980:	50006294 50006298 500062ac 500062b0     .b.P.b.P.b.P.b.P
   11990:	500062a8 00008000 5000629c 00000001     .b.P.....b.P....
   119a0:	00000004 00000002 50007294 50007298     .........r.P.r.P
   119b0:	500072ac 500072b0 500072a8 00008000     .r.P.r.P.r.P....
   119c0:	5000729c 00000001 00000004 00000002     .r.P............
   119d0:	50008294 50008298 500082ac 500082b0     ...P...P...P...P
   119e0:	500082a8 00008000 5000829c 00000001     ...P.......P....
   119f0:	00000004 00000002 50009294 50009298     ...........P...P
   11a00:	500092ac 500092b0 500092a8 00008000     ...P...P...P....
   11a10:	5000929c 00000001 00000004 00000002     ...P............
   11a20:	500142a0 500142a8 500142c0 500142c4     .B.P.B.P.B.P.B.P
   11a30:	500142b8 00004000 500142ac 00000001     .B.P.@...B.P....
   11a40:	00000004 00000008 5000c248 5000c24c     ........H..PL..P
   11a50:	5000c260 5000c264 5000c25c 00008000     `..Pd..P\..P....
   11a60:	5000c250 00000001 00000004 00000002     P..P............
