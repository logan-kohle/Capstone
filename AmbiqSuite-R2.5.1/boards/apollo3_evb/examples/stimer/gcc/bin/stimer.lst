
bin/stimer.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 69 d3 00 00 d1 d3 00 00 e9 c2 00 00     ....i...........
    c010:	d3 d3 00 00 d3 d3 00 00 d3 d3 00 00 00 00 00 00     ................
	...
    c02c:	d5 d3 00 00 d5 d3 00 00 00 00 00 00 d5 d3 00 00     ................
    c03c:	d5 d3 00 00 d5 d3 00 00 d5 d3 00 00 d5 d3 00 00     ................
    c04c:	d5 d3 00 00 d5 d3 00 00 d5 d3 00 00 d5 d3 00 00     ................
    c05c:	d5 d3 00 00 d5 d3 00 00 d5 d3 00 00 d5 d3 00 00     ................
    c06c:	d5 d3 00 00 d5 d3 00 00 d5 d3 00 00 d5 d3 00 00     ................
    c07c:	d5 d3 00 00 d5 d3 00 00 d5 d3 00 00 d5 d3 00 00     ................
    c08c:	d5 d3 00 00 d5 d3 00 00 d5 d3 00 00 d5 d3 00 00     ................
    c09c:	01 c2 00 00 d5 d3 00 00 d5 d3 00 00 d5 d3 00 00     ................
    c0ac:	d5 d3 00 00 d5 d3 00 00 d5 d3 00 00 d5 d3 00 00     ................
    c0bc:	d5 d3 00 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    c1a0:	b082      	sub	sp, #8
    c1a2:	4603      	mov	r3, r0
    c1a4:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
    c1a8:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c1ac:	2b00      	cmp	r3, #0
    c1ae:	db0c      	blt.n	c1ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c1b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c1b4:	f003 021f 	and.w	r2, r3, #31
    c1b8:	4905      	ldr	r1, [pc, #20]	; (c1d0 <__NVIC_EnableIRQ+0x30>)
    c1ba:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c1be:	095b      	lsrs	r3, r3, #5
    c1c0:	2001      	movs	r0, #1
    c1c2:	fa00 f202 	lsl.w	r2, r0, r2
    c1c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
    c1ca:	bf00      	nop
    c1cc:	b002      	add	sp, #8
    c1ce:	4770      	bx	lr
    c1d0:	e000e100 	.word	0xe000e100

0000c1d4 <stimer_init>:
// Init function for Timer A0.
//
//*****************************************************************************
void
stimer_init(void)
{
    c1d4:	b508      	push	{r3, lr}
    //
    // Enable compare A interrupt in STIMER
    //
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_COMPAREA);
    c1d6:	2001      	movs	r0, #1
    c1d8:	f002 f882 	bl	e2e0 <am_hal_stimer_int_enable>

    //
    // Enable the timer interrupt in the NVIC.
    //
    NVIC_EnableIRQ(STIMER_CMPR0_IRQn);
    c1dc:	2017      	movs	r0, #23
    c1de:	f7ff ffdf 	bl	c1a0 <__NVIC_EnableIRQ>

    //
    // Configure the STIMER and run
    //
    am_hal_stimer_config(AM_HAL_STIMER_CFG_CLEAR | AM_HAL_STIMER_CFG_FREEZE);
    c1e2:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    c1e6:	f002 f815 	bl	e214 <am_hal_stimer_config>
    am_hal_stimer_compare_delta_set(0, WAKE_INTERVAL);
    c1ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    c1ee:	2000      	movs	r0, #0
    c1f0:	f002 f81a 	bl	e228 <am_hal_stimer_compare_delta_set>
    am_hal_stimer_config(AM_HAL_STIMER_XTAL_32KHZ |
    c1f4:	f240 1003 	movw	r0, #259	; 0x103
    c1f8:	f002 f80c 	bl	e214 <am_hal_stimer_config>
                         AM_HAL_STIMER_CFG_COMPARE_A_ENABLE);

}
    c1fc:	bf00      	nop
    c1fe:	bd08      	pop	{r3, pc}

0000c200 <am_stimer_cmpr0_isr>:
// Timer Interrupt Service Routine (ISR)
//
//*****************************************************************************
void
am_stimer_cmpr0_isr(void)
{
    c200:	b508      	push	{r3, lr}
    //
    // Check the timer interrupt status.
    //
    am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
    c202:	2001      	movs	r0, #1
    c204:	f002 f876 	bl	e2f4 <am_hal_stimer_int_clear>
    am_hal_stimer_compare_delta_set(0, WAKE_INTERVAL);
    c208:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    c20c:	2000      	movs	r0, #0
    c20e:	f002 f80b 	bl	e228 <am_hal_stimer_compare_delta_set>
#ifdef AM_BSP_NUM_LEDS
    //
    // Toggle the LED.
    //
#if AM_BSP_NUM_LEDS > 1
    am_devices_led_array_out(am_bsp_psLEDs, AM_BSP_NUM_LEDS, 1 << (g_ui32Count % AM_BSP_NUM_LEDS));
    c212:	4b0c      	ldr	r3, [pc, #48]	; (c244 <am_stimer_cmpr0_isr+0x44>)
    c214:	6819      	ldr	r1, [r3, #0]
    c216:	4b0c      	ldr	r3, [pc, #48]	; (c248 <am_stimer_cmpr0_isr+0x48>)
    c218:	fba3 2301 	umull	r2, r3, r3, r1
    c21c:	089a      	lsrs	r2, r3, #2
    c21e:	4613      	mov	r3, r2
    c220:	009b      	lsls	r3, r3, #2
    c222:	4413      	add	r3, r2
    c224:	1aca      	subs	r2, r1, r3
    c226:	2301      	movs	r3, #1
    c228:	4093      	lsls	r3, r2
    c22a:	461a      	mov	r2, r3
    c22c:	2105      	movs	r1, #5
    c22e:	4807      	ldr	r0, [pc, #28]	; (c24c <am_stimer_cmpr0_isr+0x4c>)
    c230:	f001 f873 	bl	d31a <am_devices_led_array_out>
#else
    am_devices_led_array_out(am_bsp_psLEDs, 1, g_ui32Count & 1);
#endif
    g_ui32Count++;
    c234:	4b03      	ldr	r3, [pc, #12]	; (c244 <am_stimer_cmpr0_isr+0x44>)
    c236:	681b      	ldr	r3, [r3, #0]
    c238:	3301      	adds	r3, #1
    c23a:	4a02      	ldr	r2, [pc, #8]	; (c244 <am_stimer_cmpr0_isr+0x44>)
    c23c:	6013      	str	r3, [r2, #0]
    if ( (g_ui32Count & 0x1F) == 0 )
    {
        am_util_stdio_printf("\n");
    }
#endif
}
    c23e:	bf00      	nop
    c240:	bd08      	pop	{r3, pc}
    c242:	bf00      	nop
    c244:	10001034 	.word	0x10001034
    c248:	cccccccd 	.word	0xcccccccd
    c24c:	10001000 	.word	0x10001000

0000c250 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
    c250:	b508      	push	{r3, lr}
    //
    // Set the clock frequency.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c252:	2100      	movs	r1, #0
    c254:	2000      	movs	r0, #0
    c256:	f001 fadd 	bl	d814 <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c25a:	4811      	ldr	r0, [pc, #68]	; (c2a0 <main+0x50>)
    c25c:	f001 f932 	bl	d4c4 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c260:	f001 f954 	bl	d50c <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    c264:	f001 f8b8 	bl	d3d8 <am_bsp_low_power_init>

#ifdef AM_BSP_NUM_LEDS
    //
    // Configure the pins for this board.
    //
    am_devices_led_array_init(am_bsp_psLEDs, AM_BSP_NUM_LEDS);
    c268:	2105      	movs	r1, #5
    c26a:	480e      	ldr	r0, [pc, #56]	; (c2a4 <main+0x54>)
    c26c:	f000 ffbe 	bl	d1ec <am_devices_led_array_init>
#endif

    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_bsp_itm_printf_enable();
    c270:	f001 f908 	bl	d484 <am_bsp_itm_printf_enable>

    //
    // Clear the terminal and print the banner.
    //
    am_util_stdio_terminal_clear();
    c274:	f000 ff66 	bl	d144 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("STimer Example\n");
    c278:	480b      	ldr	r0, [pc, #44]	; (c2a8 <main+0x58>)
    c27a:	f000 ff43 	bl	d104 <am_util_stdio_printf>
#ifdef AM_BSP_NUM_LEDS
    am_util_stdio_printf("The STimer will wake about every 1s to walk the LEDs on the EVB.\n");
    c27e:	480b      	ldr	r0, [pc, #44]	; (c2ac <main+0x5c>)
    c280:	f000 ff40 	bl	d104 <am_util_stdio_printf>
#else
    am_util_stdio_printf("The STimer will wake about every 1s to print to SWO.\n");
#endif
    am_util_delay_ms(10);
    c284:	200a      	movs	r0, #10
    c286:	f000 f813 	bl	c2b0 <am_util_delay_ms>

    //
    // STIMER init.
    //
    stimer_init();
    c28a:	f7ff ffa3 	bl	c1d4 <stimer_init>

    //
    // Enable the timer interrupt in the NVIC.
    //
    am_hal_interrupt_master_enable();
    c28e:	f001 fd45 	bl	dd1c <am_hal_interrupt_master_enable>

#ifdef AM_BSP_NUM_LEDS
    //
    // We are done printing. Disable debug printf messages on ITM.
    //
    am_bsp_debug_printf_disable();
    c292:	f001 f8c1 	bl	d418 <am_bsp_debug_printf_disable>
    while (1)
    {
        //
        // Go to Deep Sleep.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c296:	2001      	movs	r0, #1
    c298:	f002 f832 	bl	e300 <am_hal_sysctrl_sleep>
    c29c:	e7fb      	b.n	c296 <main+0x46>
    c29e:	bf00      	nop
    c2a0:	0000e5e4 	.word	0x0000e5e4
    c2a4:	10001000 	.word	0x10001000
    c2a8:	0000e578 	.word	0x0000e578
    c2ac:	0000e588 	.word	0x0000e588

0000c2b0 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    c2b0:	b500      	push	{lr}
    c2b2:	b089      	sub	sp, #36	; 0x24
    c2b4:	9001      	str	r0, [sp, #4]
    am_hal_delay_us( ui32MilliSeconds * 1000);
#else // AM_PART_APOLLO4
    uint32_t ui32Loops, ui32HFRC;
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    c2b6:	ab03      	add	r3, sp, #12
    c2b8:	4618      	mov	r0, r3
    c2ba:	f001 fb47 	bl	d94c <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
    c2be:	9b03      	ldr	r3, [sp, #12]
    c2c0:	9307      	str	r3, [sp, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    c2c2:	9b07      	ldr	r3, [sp, #28]
    c2c4:	4a07      	ldr	r2, [pc, #28]	; (c2e4 <am_util_delay_ms+0x34>)
    c2c6:	fba2 2303 	umull	r2, r3, r2, r3
    c2ca:	099a      	lsrs	r2, r3, #6
    c2cc:	9b01      	ldr	r3, [sp, #4]
    c2ce:	fb02 f303 	mul.w	r3, r2, r3
    c2d2:	9306      	str	r3, [sp, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    c2d4:	9806      	ldr	r0, [sp, #24]
    c2d6:	f001 fb57 	bl	d988 <am_hal_flash_delay>
#endif // AM_PART_APOLLO4
}
    c2da:	bf00      	nop
    c2dc:	b009      	add	sp, #36	; 0x24
    c2de:	f85d fb04 	ldr.w	pc, [sp], #4
    c2e2:	bf00      	nop
    c2e4:	057619f1 	.word	0x057619f1

0000c2e8 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    c2e8:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    c2ea:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    c2ee:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    c2f0:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    c2f4:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    c2f8:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c2fc:	f000 f80a 	bl	c314 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    c300:	bd01      	pop	{r0, pc}
}
    c302:	bf00      	nop
    c304:	4618      	mov	r0, r3

0000c306 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c306:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c308:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c30a:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c30c:	4770      	bx	lr
}
    c30e:	bf00      	nop
    c310:	4618      	mov	r0, r3
	...

0000c314 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c314:	b500      	push	{lr}
    c316:	b097      	sub	sp, #92	; 0x5c
    c318:	9001      	str	r0, [sp, #4]
    volatile am_fault_t sFaultData;
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_t  sHalFaultData = {0};
#else
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c31a:	ab03      	add	r3, sp, #12
    c31c:	2200      	movs	r2, #0
    c31e:	601a      	str	r2, [r3, #0]
    c320:	605a      	str	r2, [r3, #4]
    c322:	609a      	str	r2, [r3, #8]
    c324:	60da      	str	r2, [r3, #12]
    c326:	611a      	str	r2, [r3, #16]
    c328:	615a      	str	r2, [r3, #20]
#endif // if defined(AM_PART_APOLLO4)

    uint32_t u32Mask = 0;
    c32a:	2300      	movs	r3, #0
    c32c:	9315      	str	r3, [sp, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c32e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c330:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c332:	4b2e      	ldr	r3, [pc, #184]	; (c3ec <am_util_faultisr_collect_data+0xd8>)
    c334:	681b      	ldr	r3, [r3, #0]
    c336:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c338:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c33a:	b2db      	uxtb	r3, r3
    c33c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c340:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c342:	0a1b      	lsrs	r3, r3, #8
    c344:	b2db      	uxtb	r3, r3
    c346:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c34a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c34c:	0c1b      	lsrs	r3, r3, #16
    c34e:	b29b      	uxth	r3, r3
    c350:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c354:	4b26      	ldr	r3, [pc, #152]	; (c3f0 <am_util_faultisr_collect_data+0xdc>)
    c356:	681b      	ldr	r3, [r3, #0]
    c358:	9312      	str	r3, [sp, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c35a:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
    c35e:	b2db      	uxtb	r3, r3
    c360:	f003 0302 	and.w	r3, r3, #2
    c364:	2b00      	cmp	r3, #0
    c366:	d005      	beq.n	c374 <am_util_faultisr_collect_data+0x60>
    c368:	9901      	ldr	r1, [sp, #4]
    c36a:	2006      	movs	r0, #6
    c36c:	f7ff ffcb 	bl	c306 <getStackedReg>
    c370:	4603      	mov	r3, r0
    c372:	e001      	b.n	c378 <am_util_faultisr_collect_data+0x64>
    c374:	f04f 33ff 	mov.w	r3, #4294967295
    c378:	9311      	str	r3, [sp, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c37a:	9901      	ldr	r1, [sp, #4]
    c37c:	2000      	movs	r0, #0
    c37e:	f7ff ffc2 	bl	c306 <getStackedReg>
    c382:	4603      	mov	r3, r0
    c384:	9309      	str	r3, [sp, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c386:	9901      	ldr	r1, [sp, #4]
    c388:	2001      	movs	r0, #1
    c38a:	f7ff ffbc 	bl	c306 <getStackedReg>
    c38e:	4603      	mov	r3, r0
    c390:	930a      	str	r3, [sp, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c392:	9901      	ldr	r1, [sp, #4]
    c394:	2002      	movs	r0, #2
    c396:	f7ff ffb6 	bl	c306 <getStackedReg>
    c39a:	4603      	mov	r3, r0
    c39c:	930b      	str	r3, [sp, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c39e:	9901      	ldr	r1, [sp, #4]
    c3a0:	2003      	movs	r0, #3
    c3a2:	f7ff ffb0 	bl	c306 <getStackedReg>
    c3a6:	4603      	mov	r3, r0
    c3a8:	930c      	str	r3, [sp, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c3aa:	9901      	ldr	r1, [sp, #4]
    c3ac:	2004      	movs	r0, #4
    c3ae:	f7ff ffaa 	bl	c306 <getStackedReg>
    c3b2:	4603      	mov	r3, r0
    c3b4:	930d      	str	r3, [sp, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c3b6:	9901      	ldr	r1, [sp, #4]
    c3b8:	2005      	movs	r0, #5
    c3ba:	f7ff ffa4 	bl	c306 <getStackedReg>
    c3be:	4603      	mov	r3, r0
    c3c0:	930e      	str	r3, [sp, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c3c2:	9901      	ldr	r1, [sp, #4]
    c3c4:	2006      	movs	r0, #6
    c3c6:	f7ff ff9e 	bl	c306 <getStackedReg>
    c3ca:	4603      	mov	r3, r0
    c3cc:	930f      	str	r3, [sp, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c3ce:	9901      	ldr	r1, [sp, #4]
    c3d0:	2007      	movs	r0, #7
    c3d2:	f7ff ff98 	bl	c306 <getStackedReg>
    c3d6:	4603      	mov	r3, r0
    c3d8:	9310      	str	r3, [sp, #64]	; 0x40
    //
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_get(&sHalFaultData);
#else
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c3da:	ab03      	add	r3, sp, #12
    c3dc:	4619      	mov	r1, r3
    c3de:	2002      	movs	r0, #2
    c3e0:	f001 fd3e 	bl	de60 <am_hal_mcuctrl_info_get>
      am_util_stdio_printf("   SYS Fault Address: 0x%08X\n", sHalFaultData.ui32SYS);
    }

#endif

    u32Mask = 0;
    c3e4:	2300      	movs	r3, #0
    c3e6:	9315      	str	r3, [sp, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    c3e8:	e7fe      	b.n	c3e8 <am_util_faultisr_collect_data+0xd4>
    c3ea:	bf00      	nop
    c3ec:	e000ed28 	.word	0xe000ed28
    c3f0:	e000ed38 	.word	0xe000ed38

0000c3f4 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    c3f4:	b082      	sub	sp, #8
    c3f6:	9001      	str	r0, [sp, #4]
    g_pfnCharPrint = pfnCharPrint;
    c3f8:	4a02      	ldr	r2, [pc, #8]	; (c404 <am_util_stdio_printf_init+0x10>)
    c3fa:	9b01      	ldr	r3, [sp, #4]
    c3fc:	6013      	str	r3, [r2, #0]
}
    c3fe:	bf00      	nop
    c400:	b002      	add	sp, #8
    c402:	4770      	bx	lr
    c404:	10001038 	.word	0x10001038

0000c408 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c408:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c40c:	b098      	sub	sp, #96	; 0x60
    c40e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c412:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c416:	f04f 0000 	mov.w	r0, #0
    c41a:	f04f 0100 	mov.w	r1, #0
    c41e:	0018      	movs	r0, r3
    c420:	2100      	movs	r1, #0
    c422:	ea50 0301 	orrs.w	r3, r0, r1
    c426:	f000 80b0 	beq.w	c58a <divu64_10+0x182>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c42a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c42e:	f04f 0400 	mov.w	r4, #0
    c432:	f04f 0500 	mov.w	r5, #0
    c436:	0854      	lsrs	r4, r2, #1
    c438:	ea44 74c3 	orr.w	r4, r4, r3, lsl #31
    c43c:	085d      	lsrs	r5, r3, #1
    c43e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c442:	f04f 0000 	mov.w	r0, #0
    c446:	f04f 0100 	mov.w	r1, #0
    c44a:	0890      	lsrs	r0, r2, #2
    c44c:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
    c450:	0899      	lsrs	r1, r3, #2
    c452:	eb14 0a00 	adds.w	sl, r4, r0
    c456:	eb45 0b01 	adc.w	fp, r5, r1
    c45a:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
        q64 += (q64 >> 4);
    c45e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c462:	f04f 0000 	mov.w	r0, #0
    c466:	f04f 0100 	mov.w	r1, #0
    c46a:	0910      	lsrs	r0, r2, #4
    c46c:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
    c470:	0919      	lsrs	r1, r3, #4
    c472:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c476:	1814      	adds	r4, r2, r0
    c478:	9402      	str	r4, [sp, #8]
    c47a:	414b      	adcs	r3, r1
    c47c:	9303      	str	r3, [sp, #12]
    c47e:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    c482:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 8);
    c486:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c48a:	f04f 0000 	mov.w	r0, #0
    c48e:	f04f 0100 	mov.w	r1, #0
    c492:	0a10      	lsrs	r0, r2, #8
    c494:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
    c498:	0a19      	lsrs	r1, r3, #8
    c49a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c49e:	1814      	adds	r4, r2, r0
    c4a0:	9404      	str	r4, [sp, #16]
    c4a2:	414b      	adcs	r3, r1
    c4a4:	9305      	str	r3, [sp, #20]
    c4a6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    c4aa:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 16);
    c4ae:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c4b2:	f04f 0000 	mov.w	r0, #0
    c4b6:	f04f 0100 	mov.w	r1, #0
    c4ba:	0c10      	lsrs	r0, r2, #16
    c4bc:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    c4c0:	0c19      	lsrs	r1, r3, #16
    c4c2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c4c6:	1814      	adds	r4, r2, r0
    c4c8:	9406      	str	r4, [sp, #24]
    c4ca:	414b      	adcs	r3, r1
    c4cc:	9307      	str	r3, [sp, #28]
    c4ce:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
    c4d2:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 32);
    c4d6:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c4da:	f04f 0000 	mov.w	r0, #0
    c4de:	f04f 0100 	mov.w	r1, #0
    c4e2:	0018      	movs	r0, r3
    c4e4:	2100      	movs	r1, #0
    c4e6:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c4ea:	1814      	adds	r4, r2, r0
    c4ec:	9408      	str	r4, [sp, #32]
    c4ee:	414b      	adcs	r3, r1
    c4f0:	9309      	str	r3, [sp, #36]	; 0x24
    c4f2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
    c4f6:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 >>= 3;
    c4fa:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    c4fe:	f04f 0200 	mov.w	r2, #0
    c502:	f04f 0300 	mov.w	r3, #0
    c506:	08c2      	lsrs	r2, r0, #3
    c508:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    c50c:	08cb      	lsrs	r3, r1, #3
    c50e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
        r64 = ui64Val - q64*10;
    c512:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
    c516:	4622      	mov	r2, r4
    c518:	462b      	mov	r3, r5
    c51a:	f04f 0000 	mov.w	r0, #0
    c51e:	f04f 0100 	mov.w	r1, #0
    c522:	0099      	lsls	r1, r3, #2
    c524:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
    c528:	0090      	lsls	r0, r2, #2
    c52a:	4602      	mov	r2, r0
    c52c:	460b      	mov	r3, r1
    c52e:	1916      	adds	r6, r2, r4
    c530:	eb43 0705 	adc.w	r7, r3, r5
    c534:	19b3      	adds	r3, r6, r6
    c536:	930a      	str	r3, [sp, #40]	; 0x28
    c538:	eb47 0307 	adc.w	r3, r7, r7
    c53c:	930b      	str	r3, [sp, #44]	; 0x2c
    c53e:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    c542:	4630      	mov	r0, r6
    c544:	4639      	mov	r1, r7
    c546:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c54a:	1a14      	subs	r4, r2, r0
    c54c:	940c      	str	r4, [sp, #48]	; 0x30
    c54e:	eb63 0301 	sbc.w	r3, r3, r1
    c552:	930d      	str	r3, [sp, #52]	; 0x34
    c554:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    c558:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
        return q64 + ((r64 + 6) >> 4);
    c55c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    c560:	f112 0806 	adds.w	r8, r2, #6
    c564:	f143 0900 	adc.w	r9, r3, #0
    c568:	f04f 0200 	mov.w	r2, #0
    c56c:	f04f 0300 	mov.w	r3, #0
    c570:	ea4f 1218 	mov.w	r2, r8, lsr #4
    c574:	ea42 7209 	orr.w	r2, r2, r9, lsl #28
    c578:	ea4f 1319 	mov.w	r3, r9, lsr #4
    c57c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    c580:	1814      	adds	r4, r2, r0
    c582:	9400      	str	r4, [sp, #0]
    c584:	414b      	adcs	r3, r1
    c586:	9301      	str	r3, [sp, #4]
    c588:	e02a      	b.n	c5e0 <divu64_10+0x1d8>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    c58a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c58c:	9317      	str	r3, [sp, #92]	; 0x5c
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c58e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c590:	085a      	lsrs	r2, r3, #1
    c592:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c594:	089b      	lsrs	r3, r3, #2
    c596:	4413      	add	r3, r2
    c598:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 4);
    c59a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c59c:	091b      	lsrs	r3, r3, #4
    c59e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c5a0:	4413      	add	r3, r2
    c5a2:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 8);
    c5a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c5a6:	0a1b      	lsrs	r3, r3, #8
    c5a8:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c5aa:	4413      	add	r3, r2
    c5ac:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 16);
    c5ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c5b0:	0c1b      	lsrs	r3, r3, #16
    c5b2:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c5b4:	4413      	add	r3, r2
    c5b6:	9316      	str	r3, [sp, #88]	; 0x58
        q32 >>= 3;
    c5b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c5ba:	08db      	lsrs	r3, r3, #3
    c5bc:	9316      	str	r3, [sp, #88]	; 0x58
        r32 = ui32Val - q32*10;
    c5be:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c5c0:	4613      	mov	r3, r2
    c5c2:	009b      	lsls	r3, r3, #2
    c5c4:	4413      	add	r3, r2
    c5c6:	005b      	lsls	r3, r3, #1
    c5c8:	461a      	mov	r2, r3
    c5ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c5cc:	1a9b      	subs	r3, r3, r2
    c5ce:	9315      	str	r3, [sp, #84]	; 0x54
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c5d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c5d2:	3306      	adds	r3, #6
    c5d4:	091a      	lsrs	r2, r3, #4
    c5d6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c5d8:	4413      	add	r3, r2
    c5da:	2200      	movs	r2, #0
    c5dc:	9300      	str	r3, [sp, #0]
    c5de:	9201      	str	r2, [sp, #4]
    }
}
    c5e0:	e9dd 2300 	ldrd	r2, r3, [sp]
    c5e4:	4610      	mov	r0, r2
    c5e6:	4619      	mov	r1, r3
    c5e8:	b018      	add	sp, #96	; 0x60
    c5ea:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c5ee:	4770      	bx	lr

0000c5f0 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    c5f0:	b500      	push	{lr}
    c5f2:	b085      	sub	sp, #20
    c5f4:	e9cd 0100 	strd	r0, r1, [sp]
    int iNDigits = ui64Val ? 0 : 1;
    c5f8:	9a00      	ldr	r2, [sp, #0]
    c5fa:	9b01      	ldr	r3, [sp, #4]
    c5fc:	4313      	orrs	r3, r2
    c5fe:	2b00      	cmp	r3, #0
    c600:	bf0c      	ite	eq
    c602:	2301      	moveq	r3, #1
    c604:	2300      	movne	r3, #0
    c606:	b2db      	uxtb	r3, r3
    c608:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    c60a:	e008      	b.n	c61e <ndigits_in_u64+0x2e>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    c60c:	e9dd 0100 	ldrd	r0, r1, [sp]
    c610:	f7ff fefa 	bl	c408 <divu64_10>
    c614:	e9cd 0100 	strd	r0, r1, [sp]
        ++iNDigits;
    c618:	9b03      	ldr	r3, [sp, #12]
    c61a:	3301      	adds	r3, #1
    c61c:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    c61e:	e9dd 2300 	ldrd	r2, r3, [sp]
    c622:	4313      	orrs	r3, r2
    c624:	d1f2      	bne.n	c60c <ndigits_in_u64+0x1c>
    }

    return iNDigits;
    c626:	9b03      	ldr	r3, [sp, #12]
}
    c628:	4618      	mov	r0, r3
    c62a:	b005      	add	sp, #20
    c62c:	f85d fb04 	ldr.w	pc, [sp], #4

0000c630 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    c630:	b530      	push	{r4, r5, lr}
    c632:	b083      	sub	sp, #12
    c634:	e9cd 0100 	strd	r0, r1, [sp]
    if ( i64Val < 0 )
    c638:	e9dd 2300 	ldrd	r2, r3, [sp]
    c63c:	2b00      	cmp	r3, #0
    c63e:	da07      	bge.n	c650 <ndigits_in_i64+0x20>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    c640:	e9dd 2300 	ldrd	r2, r3, [sp]
    c644:	2100      	movs	r1, #0
    c646:	4254      	negs	r4, r2
    c648:	eb61 0503 	sbc.w	r5, r1, r3
    c64c:	e9cd 4500 	strd	r4, r5, [sp]
    }

    return ndigits_in_u64((uint64_t) i64Val);
    c650:	e9dd 2300 	ldrd	r2, r3, [sp]
    c654:	4610      	mov	r0, r2
    c656:	4619      	mov	r1, r3
    c658:	f7ff ffca 	bl	c5f0 <ndigits_in_u64>
    c65c:	4603      	mov	r3, r0
}
    c65e:	4618      	mov	r0, r3
    c660:	b003      	add	sp, #12
    c662:	bd30      	pop	{r4, r5, pc}

0000c664 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    c664:	b084      	sub	sp, #16
    c666:	e9cd 0100 	strd	r0, r1, [sp]
    int iDigits = ui64Val ? 0 : 1;
    c66a:	9a00      	ldr	r2, [sp, #0]
    c66c:	9b01      	ldr	r3, [sp, #4]
    c66e:	4313      	orrs	r3, r2
    c670:	2b00      	cmp	r3, #0
    c672:	bf0c      	ite	eq
    c674:	2301      	moveq	r3, #1
    c676:	2300      	movne	r3, #0
    c678:	b2db      	uxtb	r3, r3
    c67a:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    c67c:	e00e      	b.n	c69c <ndigits_in_hex+0x38>
    {
        ui64Val >>= 4;
    c67e:	e9dd 0100 	ldrd	r0, r1, [sp]
    c682:	f04f 0200 	mov.w	r2, #0
    c686:	f04f 0300 	mov.w	r3, #0
    c68a:	0902      	lsrs	r2, r0, #4
    c68c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    c690:	090b      	lsrs	r3, r1, #4
    c692:	e9cd 2300 	strd	r2, r3, [sp]
        ++iDigits;
    c696:	9b03      	ldr	r3, [sp, #12]
    c698:	3301      	adds	r3, #1
    c69a:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    c69c:	e9dd 2300 	ldrd	r2, r3, [sp]
    c6a0:	4313      	orrs	r3, r2
    c6a2:	d1ec      	bne.n	c67e <ndigits_in_hex+0x1a>
    }

    return iDigits;
    c6a4:	9b03      	ldr	r3, [sp, #12]
}
    c6a6:	4618      	mov	r0, r3
    c6a8:	b004      	add	sp, #16
    c6aa:	4770      	bx	lr

0000c6ac <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    c6ac:	b086      	sub	sp, #24
    c6ae:	9001      	str	r0, [sp, #4]
    c6b0:	9100      	str	r1, [sp, #0]
    bool bNeg = false;
    c6b2:	2300      	movs	r3, #0
    c6b4:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    c6b8:	2300      	movs	r3, #0
    c6ba:	9304      	str	r3, [sp, #16]
    c6bc:	2300      	movs	r3, #0
    c6be:	9303      	str	r3, [sp, #12]

    if ( *pcStr == '-')
    c6c0:	9b01      	ldr	r3, [sp, #4]
    c6c2:	781b      	ldrb	r3, [r3, #0]
    c6c4:	2b2d      	cmp	r3, #45	; 0x2d
    c6c6:	d11c      	bne.n	c702 <decstr_to_int+0x56>
    {
        bNeg = true;
    c6c8:	2301      	movs	r3, #1
    c6ca:	f88d 3017 	strb.w	r3, [sp, #23]
        pcStr++;
    c6ce:	9b01      	ldr	r3, [sp, #4]
    c6d0:	3301      	adds	r3, #1
    c6d2:	9301      	str	r3, [sp, #4]
        uCnt++;
    c6d4:	9b03      	ldr	r3, [sp, #12]
    c6d6:	3301      	adds	r3, #1
    c6d8:	9303      	str	r3, [sp, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c6da:	e012      	b.n	c702 <decstr_to_int+0x56>
    {
        ++uCnt;
    c6dc:	9b03      	ldr	r3, [sp, #12]
    c6de:	3301      	adds	r3, #1
    c6e0:	9303      	str	r3, [sp, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    c6e2:	9a04      	ldr	r2, [sp, #16]
    c6e4:	4613      	mov	r3, r2
    c6e6:	009b      	lsls	r3, r3, #2
    c6e8:	4413      	add	r3, r2
    c6ea:	005b      	lsls	r3, r3, #1
    c6ec:	9304      	str	r3, [sp, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    c6ee:	9b01      	ldr	r3, [sp, #4]
    c6f0:	781b      	ldrb	r3, [r3, #0]
    c6f2:	461a      	mov	r2, r3
    c6f4:	9b04      	ldr	r3, [sp, #16]
    c6f6:	4413      	add	r3, r2
    c6f8:	3b30      	subs	r3, #48	; 0x30
    c6fa:	9304      	str	r3, [sp, #16]
        pcStr++;
    c6fc:	9b01      	ldr	r3, [sp, #4]
    c6fe:	3301      	adds	r3, #1
    c700:	9301      	str	r3, [sp, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c702:	9b01      	ldr	r3, [sp, #4]
    c704:	781b      	ldrb	r3, [r3, #0]
    c706:	2b2f      	cmp	r3, #47	; 0x2f
    c708:	d903      	bls.n	c712 <decstr_to_int+0x66>
    c70a:	9b01      	ldr	r3, [sp, #4]
    c70c:	781b      	ldrb	r3, [r3, #0]
    c70e:	2b39      	cmp	r3, #57	; 0x39
    c710:	d9e4      	bls.n	c6dc <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    c712:	9b00      	ldr	r3, [sp, #0]
    c714:	2b00      	cmp	r3, #0
    c716:	d002      	beq.n	c71e <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    c718:	9b00      	ldr	r3, [sp, #0]
    c71a:	9a03      	ldr	r2, [sp, #12]
    c71c:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    c71e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c722:	2b00      	cmp	r3, #0
    c724:	d002      	beq.n	c72c <decstr_to_int+0x80>
    c726:	9b04      	ldr	r3, [sp, #16]
    c728:	425b      	negs	r3, r3
    c72a:	e000      	b.n	c72e <decstr_to_int+0x82>
    c72c:	9b04      	ldr	r3, [sp, #16]
}
    c72e:	4618      	mov	r0, r3
    c730:	b006      	add	sp, #24
    c732:	4770      	bx	lr

0000c734 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c734:	b500      	push	{lr}
    c736:	b091      	sub	sp, #68	; 0x44
    c738:	e9cd 0102 	strd	r0, r1, [sp, #8]
    c73c:	9201      	str	r2, [sp, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    c73e:	2300      	movs	r3, #0
    c740:	930f      	str	r3, [sp, #60]	; 0x3c
    c742:	2300      	movs	r3, #0
    c744:	930e      	str	r3, [sp, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    c746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c74a:	f7ff fe5d 	bl	c408 <divu64_10>
    c74e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    c752:	9902      	ldr	r1, [sp, #8]
    c754:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c756:	4613      	mov	r3, r2
    c758:	009b      	lsls	r3, r3, #2
    c75a:	4413      	add	r3, r2
    c75c:	005b      	lsls	r3, r3, #1
    c75e:	1acb      	subs	r3, r1, r3
    c760:	930b      	str	r3, [sp, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    c762:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c764:	b2da      	uxtb	r2, r3
    c766:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c768:	1c59      	adds	r1, r3, #1
    c76a:	910f      	str	r1, [sp, #60]	; 0x3c
    c76c:	3230      	adds	r2, #48	; 0x30
    c76e:	b2d2      	uxtb	r2, r2
    c770:	3340      	adds	r3, #64	; 0x40
    c772:	446b      	add	r3, sp
    c774:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    c778:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    c77c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    } while ( ui64Val );
    c780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c784:	4313      	orrs	r3, r2
    c786:	d1de      	bne.n	c746 <uint64_to_str+0x12>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    c788:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c78a:	930e      	str	r3, [sp, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c78c:	9b01      	ldr	r3, [sp, #4]
    c78e:	2b00      	cmp	r3, #0
    c790:	d010      	beq.n	c7b4 <uint64_to_str+0x80>
    {
        while ( ix-- )
    c792:	e007      	b.n	c7a4 <uint64_to_str+0x70>
        {
            *pcBuf++ = tbuf[ix];
    c794:	9b01      	ldr	r3, [sp, #4]
    c796:	1c5a      	adds	r2, r3, #1
    c798:	9201      	str	r2, [sp, #4]
    c79a:	a904      	add	r1, sp, #16
    c79c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    c79e:	440a      	add	r2, r1
    c7a0:	7812      	ldrb	r2, [r2, #0]
    c7a2:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    c7a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c7a6:	1e5a      	subs	r2, r3, #1
    c7a8:	920f      	str	r2, [sp, #60]	; 0x3c
    c7aa:	2b00      	cmp	r3, #0
    c7ac:	d1f2      	bne.n	c794 <uint64_to_str+0x60>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    c7ae:	9b01      	ldr	r3, [sp, #4]
    c7b0:	2200      	movs	r2, #0
    c7b2:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    c7b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
}
    c7b6:	4618      	mov	r0, r3
    c7b8:	b011      	add	sp, #68	; 0x44
    c7ba:	f85d fb04 	ldr.w	pc, [sp], #4

0000c7be <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    c7be:	b08c      	sub	sp, #48	; 0x30
    c7c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
    c7c4:	9201      	str	r2, [sp, #4]
    c7c6:	f88d 3003 	strb.w	r3, [sp, #3]
    int iNumDig, ix = 0;
    c7ca:	2300      	movs	r3, #0
    c7cc:	930b      	str	r3, [sp, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    c7ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c7d2:	4313      	orrs	r3, r2
    c7d4:	d135      	bne.n	c842 <uint64_to_hexstr+0x84>
    {
        tbuf[ix++] = '0';   // Print a '0'
    c7d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c7d8:	1c5a      	adds	r2, r3, #1
    c7da:	920b      	str	r2, [sp, #44]	; 0x2c
    c7dc:	3330      	adds	r3, #48	; 0x30
    c7de:	446b      	add	r3, sp
    c7e0:	2230      	movs	r2, #48	; 0x30
    c7e2:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    c7e6:	e02c      	b.n	c842 <uint64_to_hexstr+0x84>
    {
        cCh = ui64Val & 0xf;
    c7e8:	f89d 3008 	ldrb.w	r3, [sp, #8]
    c7ec:	f003 030f 	and.w	r3, r3, #15
    c7f0:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    c7f4:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    c7f8:	2b09      	cmp	r3, #9
    c7fa:	d90b      	bls.n	c814 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    c7fc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c800:	2b00      	cmp	r3, #0
    c802:	d001      	beq.n	c808 <uint64_to_hexstr+0x4a>
    c804:	2227      	movs	r2, #39	; 0x27
    c806:	e000      	b.n	c80a <uint64_to_hexstr+0x4c>
    c808:	2207      	movs	r2, #7
    c80a:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    c80e:	4413      	add	r3, r2
    c810:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    c814:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c816:	1c5a      	adds	r2, r3, #1
    c818:	920b      	str	r2, [sp, #44]	; 0x2c
    c81a:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    c81e:	3230      	adds	r2, #48	; 0x30
    c820:	b2d2      	uxtb	r2, r2
    c822:	3330      	adds	r3, #48	; 0x30
    c824:	446b      	add	r3, sp
    c826:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    c82a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c82e:	f04f 0200 	mov.w	r2, #0
    c832:	f04f 0300 	mov.w	r3, #0
    c836:	0902      	lsrs	r2, r0, #4
    c838:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    c83c:	090b      	lsrs	r3, r1, #4
    c83e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    while ( ui64Val )
    c842:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c846:	4313      	orrs	r3, r2
    c848:	d1ce      	bne.n	c7e8 <uint64_to_hexstr+0x2a>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    c84a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c84c:	9309      	str	r3, [sp, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    c84e:	9b01      	ldr	r3, [sp, #4]
    c850:	2b00      	cmp	r3, #0
    c852:	d010      	beq.n	c876 <uint64_to_hexstr+0xb8>
    {
        while (ix--)
    c854:	e007      	b.n	c866 <uint64_to_hexstr+0xa8>
        {
            *pcBuf++ = tbuf[ix];
    c856:	9b01      	ldr	r3, [sp, #4]
    c858:	1c5a      	adds	r2, r3, #1
    c85a:	9201      	str	r2, [sp, #4]
    c85c:	a904      	add	r1, sp, #16
    c85e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c860:	440a      	add	r2, r1
    c862:	7812      	ldrb	r2, [r2, #0]
    c864:	701a      	strb	r2, [r3, #0]
        while (ix--)
    c866:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c868:	1e5a      	subs	r2, r3, #1
    c86a:	920b      	str	r2, [sp, #44]	; 0x2c
    c86c:	2b00      	cmp	r3, #0
    c86e:	d1f2      	bne.n	c856 <uint64_to_hexstr+0x98>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    c870:	9b01      	ldr	r3, [sp, #4]
    c872:	2200      	movs	r2, #0
    c874:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    c876:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    c878:	4618      	mov	r0, r3
    c87a:	b00c      	add	sp, #48	; 0x30
    c87c:	4770      	bx	lr

0000c87e <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    c87e:	b084      	sub	sp, #16
    c880:	9001      	str	r0, [sp, #4]
    uint32_t ui32RetVal = 0;
    c882:	2300      	movs	r3, #0
    c884:	9303      	str	r3, [sp, #12]
    if ( !pcBuf )
    c886:	9b01      	ldr	r3, [sp, #4]
    c888:	2b00      	cmp	r3, #0
    c88a:	d104      	bne.n	c896 <simple_strlen+0x18>
    {
        return ui32RetVal;
    c88c:	9b03      	ldr	r3, [sp, #12]
    c88e:	e009      	b.n	c8a4 <simple_strlen+0x26>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    c890:	9b03      	ldr	r3, [sp, #12]
    c892:	3301      	adds	r3, #1
    c894:	9303      	str	r3, [sp, #12]
    while ( *pcBuf++ )
    c896:	9b01      	ldr	r3, [sp, #4]
    c898:	1c5a      	adds	r2, r3, #1
    c89a:	9201      	str	r2, [sp, #4]
    c89c:	781b      	ldrb	r3, [r3, #0]
    c89e:	2b00      	cmp	r3, #0
    c8a0:	d1f6      	bne.n	c890 <simple_strlen+0x12>
    }
    return ui32RetVal;
    c8a2:	9b03      	ldr	r3, [sp, #12]
}
    c8a4:	4618      	mov	r0, r3
    c8a6:	b004      	add	sp, #16
    c8a8:	4770      	bx	lr

0000c8aa <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    c8aa:	b086      	sub	sp, #24
    c8ac:	9003      	str	r0, [sp, #12]
    c8ae:	460b      	mov	r3, r1
    c8b0:	9201      	str	r2, [sp, #4]
    c8b2:	f88d 300b 	strb.w	r3, [sp, #11]
    int32_t i32Cnt = 0;
    c8b6:	2300      	movs	r3, #0
    c8b8:	9305      	str	r3, [sp, #20]

    if ( i32NumChars <= 0 )
    c8ba:	9b01      	ldr	r3, [sp, #4]
    c8bc:	2b00      	cmp	r3, #0
    c8be:	dc0d      	bgt.n	c8dc <padbuffer+0x32>
    {
        return i32Cnt;
    c8c0:	9b05      	ldr	r3, [sp, #20]
    c8c2:	e011      	b.n	c8e8 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    c8c4:	9b03      	ldr	r3, [sp, #12]
    c8c6:	2b00      	cmp	r3, #0
    c8c8:	d005      	beq.n	c8d6 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    c8ca:	9b03      	ldr	r3, [sp, #12]
    c8cc:	1c5a      	adds	r2, r3, #1
    c8ce:	9203      	str	r2, [sp, #12]
    c8d0:	f89d 200b 	ldrb.w	r2, [sp, #11]
    c8d4:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    c8d6:	9b05      	ldr	r3, [sp, #20]
    c8d8:	3301      	adds	r3, #1
    c8da:	9305      	str	r3, [sp, #20]
    while ( i32NumChars-- )
    c8dc:	9b01      	ldr	r3, [sp, #4]
    c8de:	1e5a      	subs	r2, r3, #1
    c8e0:	9201      	str	r2, [sp, #4]
    c8e2:	2b00      	cmp	r3, #0
    c8e4:	d1ee      	bne.n	c8c4 <padbuffer+0x1a>
    }

    return i32Cnt;
    c8e6:	9b05      	ldr	r3, [sp, #20]
}
    c8e8:	4618      	mov	r0, r3
    c8ea:	b006      	add	sp, #24
    c8ec:	4770      	bx	lr
	...

0000c8f0 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    c8f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c8f2:	b08f      	sub	sp, #60	; 0x3c
    c8f4:	ed8d 0a03 	vstr	s0, [sp, #12]
    c8f8:	9002      	str	r0, [sp, #8]
    c8fa:	9101      	str	r1, [sp, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    c8fc:	9b02      	ldr	r3, [sp, #8]
    c8fe:	681b      	ldr	r3, [r3, #0]
    c900:	9309      	str	r3, [sp, #36]	; 0x24
    if (iBufSize < 4)
    c902:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c904:	2b03      	cmp	r3, #3
    c906:	dc02      	bgt.n	c90e <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    c908:	f06f 0302 	mvn.w	r3, #2
    c90c:	e0e9      	b.n	cae2 <ftoa+0x1f2>
    }

    if (fValue == 0.0f)
    c90e:	eddd 7a03 	vldr	s15, [sp, #12]
    c912:	eef5 7a40 	vcmp.f32	s15, #0.0
    c916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c91a:	d104      	bne.n	c926 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    c91c:	9b02      	ldr	r3, [sp, #8]
    c91e:	4a72      	ldr	r2, [pc, #456]	; (cae8 <ftoa+0x1f8>)
    c920:	601a      	str	r2, [r3, #0]
        return 3;
    c922:	2303      	movs	r3, #3
    c924:	e0dd      	b.n	cae2 <ftoa+0x1f2>
    }

    pcBufInitial = pcBuf;
    c926:	9b02      	ldr	r3, [sp, #8]
    c928:	9308      	str	r3, [sp, #32]

    unFloatValue.F = fValue;
    c92a:	9b03      	ldr	r3, [sp, #12]
    c92c:	9304      	str	r3, [sp, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    c92e:	9b04      	ldr	r3, [sp, #16]
    c930:	15db      	asrs	r3, r3, #23
    c932:	b2db      	uxtb	r3, r3
    c934:	3b7f      	subs	r3, #127	; 0x7f
    c936:	9307      	str	r3, [sp, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    c938:	9b04      	ldr	r3, [sp, #16]
    c93a:	f3c3 0316 	ubfx	r3, r3, #0, #23
    c93e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    c942:	9306      	str	r3, [sp, #24]
    i32FracPart = 0;
    c944:	2300      	movs	r3, #0
    c946:	930c      	str	r3, [sp, #48]	; 0x30
    i32IntPart = 0;
    c948:	2300      	movs	r3, #0
    c94a:	930d      	str	r3, [sp, #52]	; 0x34

    if (iExp2 >= 31)
    c94c:	9b07      	ldr	r3, [sp, #28]
    c94e:	2b1e      	cmp	r3, #30
    c950:	dd02      	ble.n	c958 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    c952:	f06f 0301 	mvn.w	r3, #1
    c956:	e0c4      	b.n	cae2 <ftoa+0x1f2>
    }
    else if (iExp2 < -23)
    c958:	9b07      	ldr	r3, [sp, #28]
    c95a:	f113 0f17 	cmn.w	r3, #23
    c95e:	da02      	bge.n	c966 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    c960:	f04f 33ff 	mov.w	r3, #4294967295
    c964:	e0bd      	b.n	cae2 <ftoa+0x1f2>
    }
    else if (iExp2 >= 23)
    c966:	9b07      	ldr	r3, [sp, #28]
    c968:	2b16      	cmp	r3, #22
    c96a:	dd06      	ble.n	c97a <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    c96c:	9b07      	ldr	r3, [sp, #28]
    c96e:	3b17      	subs	r3, #23
    c970:	9a06      	ldr	r2, [sp, #24]
    c972:	fa02 f303 	lsl.w	r3, r2, r3
    c976:	930d      	str	r3, [sp, #52]	; 0x34
    c978:	e01a      	b.n	c9b0 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    c97a:	9b07      	ldr	r3, [sp, #28]
    c97c:	2b00      	cmp	r3, #0
    c97e:	db0f      	blt.n	c9a0 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    c980:	9b07      	ldr	r3, [sp, #28]
    c982:	f1c3 0317 	rsb	r3, r3, #23
    c986:	9a06      	ldr	r2, [sp, #24]
    c988:	fa42 f303 	asr.w	r3, r2, r3
    c98c:	930d      	str	r3, [sp, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    c98e:	9b07      	ldr	r3, [sp, #28]
    c990:	3301      	adds	r3, #1
    c992:	9a06      	ldr	r2, [sp, #24]
    c994:	fa02 f303 	lsl.w	r3, r2, r3
    c998:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c99c:	930c      	str	r3, [sp, #48]	; 0x30
    c99e:	e007      	b.n	c9b0 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    c9a0:	9b06      	ldr	r3, [sp, #24]
    c9a2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    c9a6:	9b07      	ldr	r3, [sp, #28]
    c9a8:	43db      	mvns	r3, r3
    c9aa:	fa42 f303 	asr.w	r3, r2, r3
    c9ae:	930c      	str	r3, [sp, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    c9b0:	9b04      	ldr	r3, [sp, #16]
    c9b2:	2b00      	cmp	r3, #0
    c9b4:	da04      	bge.n	c9c0 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    c9b6:	9b02      	ldr	r3, [sp, #8]
    c9b8:	1c5a      	adds	r2, r3, #1
    c9ba:	9202      	str	r2, [sp, #8]
    c9bc:	222d      	movs	r2, #45	; 0x2d
    c9be:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    c9c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c9c2:	2b00      	cmp	r3, #0
    c9c4:	d105      	bne.n	c9d2 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    c9c6:	9b02      	ldr	r3, [sp, #8]
    c9c8:	1c5a      	adds	r2, r3, #1
    c9ca:	9202      	str	r2, [sp, #8]
    c9cc:	2230      	movs	r2, #48	; 0x30
    c9ce:	701a      	strb	r2, [r3, #0]
    c9d0:	e023      	b.n	ca1a <ftoa+0x12a>
    }
    else
    {
        if (i32IntPart > 0)
    c9d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c9d4:	2b00      	cmp	r3, #0
    c9d6:	dd09      	ble.n	c9ec <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
    c9d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c9da:	17da      	asrs	r2, r3, #31
    c9dc:	461e      	mov	r6, r3
    c9de:	4617      	mov	r7, r2
    c9e0:	9a02      	ldr	r2, [sp, #8]
    c9e2:	4630      	mov	r0, r6
    c9e4:	4639      	mov	r1, r7
    c9e6:	f7ff fea5 	bl	c734 <uint64_to_str>
    c9ea:	e012      	b.n	ca12 <ftoa+0x122>
        }
        else
        {
            *pcBuf++ = '-';
    c9ec:	9b02      	ldr	r3, [sp, #8]
    c9ee:	1c5a      	adds	r2, r3, #1
    c9f0:	9202      	str	r2, [sp, #8]
    c9f2:	222d      	movs	r2, #45	; 0x2d
    c9f4:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    c9f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c9f8:	425b      	negs	r3, r3
    c9fa:	17da      	asrs	r2, r3, #31
    c9fc:	461c      	mov	r4, r3
    c9fe:	4615      	mov	r5, r2
    ca00:	9a02      	ldr	r2, [sp, #8]
    ca02:	4620      	mov	r0, r4
    ca04:	4629      	mov	r1, r5
    ca06:	f7ff fe95 	bl	c734 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    ca0a:	e002      	b.n	ca12 <ftoa+0x122>
        {
            pcBuf++;
    ca0c:	9b02      	ldr	r3, [sp, #8]
    ca0e:	3301      	adds	r3, #1
    ca10:	9302      	str	r3, [sp, #8]
        while (*pcBuf)    // Get to end of new string
    ca12:	9b02      	ldr	r3, [sp, #8]
    ca14:	781b      	ldrb	r3, [r3, #0]
    ca16:	2b00      	cmp	r3, #0
    ca18:	d1f8      	bne.n	ca0c <ftoa+0x11c>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    ca1a:	9b02      	ldr	r3, [sp, #8]
    ca1c:	1c5a      	adds	r2, r3, #1
    ca1e:	9202      	str	r2, [sp, #8]
    ca20:	222e      	movs	r2, #46	; 0x2e
    ca22:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    ca24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ca26:	2b00      	cmp	r3, #0
    ca28:	d105      	bne.n	ca36 <ftoa+0x146>
    {
        *pcBuf++ = '0';
    ca2a:	9b02      	ldr	r3, [sp, #8]
    ca2c:	1c5a      	adds	r2, r3, #1
    ca2e:	9202      	str	r2, [sp, #8]
    ca30:	2230      	movs	r2, #48	; 0x30
    ca32:	701a      	strb	r2, [r3, #0]
    ca34:	e04f      	b.n	cad6 <ftoa+0x1e6>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    ca36:	9a02      	ldr	r2, [sp, #8]
    ca38:	9b08      	ldr	r3, [sp, #32]
    ca3a:	1ad3      	subs	r3, r2, r3
    ca3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ca3e:	1ad3      	subs	r3, r2, r3
    ca40:	3b01      	subs	r3, #1
    ca42:	9305      	str	r3, [sp, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    ca44:	9a05      	ldr	r2, [sp, #20]
    ca46:	9b01      	ldr	r3, [sp, #4]
    ca48:	4293      	cmp	r3, r2
    ca4a:	bfa8      	it	ge
    ca4c:	4613      	movge	r3, r2
    ca4e:	9305      	str	r3, [sp, #20]

        for (jx = 0; jx < iMax; jx++)
    ca50:	2300      	movs	r3, #0
    ca52:	930a      	str	r3, [sp, #40]	; 0x28
    ca54:	e015      	b.n	ca82 <ftoa+0x192>
        {
            i32FracPart *= 10;
    ca56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ca58:	4613      	mov	r3, r2
    ca5a:	009b      	lsls	r3, r3, #2
    ca5c:	4413      	add	r3, r2
    ca5e:	005b      	lsls	r3, r3, #1
    ca60:	930c      	str	r3, [sp, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    ca62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ca64:	161b      	asrs	r3, r3, #24
    ca66:	b2da      	uxtb	r2, r3
    ca68:	9b02      	ldr	r3, [sp, #8]
    ca6a:	1c59      	adds	r1, r3, #1
    ca6c:	9102      	str	r1, [sp, #8]
    ca6e:	3230      	adds	r2, #48	; 0x30
    ca70:	b2d2      	uxtb	r2, r2
    ca72:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    ca74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ca76:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ca7a:	930c      	str	r3, [sp, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    ca7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ca7e:	3301      	adds	r3, #1
    ca80:	930a      	str	r3, [sp, #40]	; 0x28
    ca82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ca84:	9b05      	ldr	r3, [sp, #20]
    ca86:	429a      	cmp	r2, r3
    ca88:	dbe5      	blt.n	ca56 <ftoa+0x166>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    ca8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ca8c:	4613      	mov	r3, r2
    ca8e:	009b      	lsls	r3, r3, #2
    ca90:	4413      	add	r3, r2
    ca92:	005b      	lsls	r3, r3, #1
    ca94:	161b      	asrs	r3, r3, #24
    ca96:	2b04      	cmp	r3, #4
    ca98:	dd1d      	ble.n	cad6 <ftoa+0x1e6>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    ca9a:	9b02      	ldr	r3, [sp, #8]
    ca9c:	3b01      	subs	r3, #1
    ca9e:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    caa0:	e015      	b.n	cace <ftoa+0x1de>
            {
                if ( *pcBuftmp == '.' )
    caa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    caa4:	781b      	ldrb	r3, [r3, #0]
    caa6:	2b2e      	cmp	r3, #46	; 0x2e
    caa8:	d00e      	beq.n	cac8 <ftoa+0x1d8>
                {
                }
                else if ( *pcBuftmp == '9' )
    caaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    caac:	781b      	ldrb	r3, [r3, #0]
    caae:	2b39      	cmp	r3, #57	; 0x39
    cab0:	d103      	bne.n	caba <ftoa+0x1ca>
                {
                    *pcBuftmp = '0';
    cab2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cab4:	2230      	movs	r2, #48	; 0x30
    cab6:	701a      	strb	r2, [r3, #0]
    cab8:	e006      	b.n	cac8 <ftoa+0x1d8>
                }
                else
                {
                    *pcBuftmp += 1;
    caba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cabc:	781b      	ldrb	r3, [r3, #0]
    cabe:	3301      	adds	r3, #1
    cac0:	b2da      	uxtb	r2, r3
    cac2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cac4:	701a      	strb	r2, [r3, #0]
                    break;
    cac6:	e006      	b.n	cad6 <ftoa+0x1e6>
                }
                pcBuftmp--;
    cac8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    caca:	3b01      	subs	r3, #1
    cacc:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cace:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cad0:	9b08      	ldr	r3, [sp, #32]
    cad2:	429a      	cmp	r2, r3
    cad4:	d2e5      	bcs.n	caa2 <ftoa+0x1b2>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    cad6:	9b02      	ldr	r3, [sp, #8]
    cad8:	2200      	movs	r2, #0
    cada:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    cadc:	9a02      	ldr	r2, [sp, #8]
    cade:	9b08      	ldr	r3, [sp, #32]
    cae0:	1ad3      	subs	r3, r2, r3
} // ftoa()
    cae2:	4618      	mov	r0, r3
    cae4:	b00f      	add	sp, #60	; 0x3c
    cae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cae8:	00302e30 	.word	0x00302e30

0000caec <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    caec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    caf0:	b097      	sub	sp, #92	; 0x5c
    caf2:	9003      	str	r0, [sp, #12]
    caf4:	9102      	str	r1, [sp, #8]
    caf6:	9201      	str	r2, [sp, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    caf8:	2300      	movs	r3, #0
    cafa:	9311      	str	r3, [sp, #68]	; 0x44
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    cafc:	2300      	movs	r3, #0
    cafe:	930b      	str	r3, [sp, #44]	; 0x2c

    while ( *pcFmt != 0x0 )
    cb00:	e2e9      	b.n	d0d6 <am_util_stdio_vsprintf+0x5ea>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    cb02:	2306      	movs	r3, #6
    cb04:	930e      	str	r3, [sp, #56]	; 0x38

        if ( *pcFmt != '%' )
    cb06:	9b02      	ldr	r3, [sp, #8]
    cb08:	781b      	ldrb	r3, [r3, #0]
    cb0a:	2b25      	cmp	r3, #37	; 0x25
    cb0c:	d01f      	beq.n	cb4e <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    cb0e:	9b03      	ldr	r3, [sp, #12]
    cb10:	2b00      	cmp	r3, #0
    cb12:	d015      	beq.n	cb40 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    cb14:	9b02      	ldr	r3, [sp, #8]
    cb16:	781b      	ldrb	r3, [r3, #0]
    cb18:	2b0a      	cmp	r3, #10
    cb1a:	d10b      	bne.n	cb34 <am_util_stdio_vsprintf+0x48>
    cb1c:	4ba8      	ldr	r3, [pc, #672]	; (cdc0 <am_util_stdio_vsprintf+0x2d4>)
    cb1e:	781b      	ldrb	r3, [r3, #0]
    cb20:	2b00      	cmp	r3, #0
    cb22:	d007      	beq.n	cb34 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    cb24:	9b03      	ldr	r3, [sp, #12]
    cb26:	1c5a      	adds	r2, r3, #1
    cb28:	9203      	str	r2, [sp, #12]
    cb2a:	220d      	movs	r2, #13
    cb2c:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    cb2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cb30:	3301      	adds	r3, #1
    cb32:	9311      	str	r3, [sp, #68]	; 0x44
                }
                *pcBuf++ = *pcFmt;
    cb34:	9b03      	ldr	r3, [sp, #12]
    cb36:	1c5a      	adds	r2, r3, #1
    cb38:	9203      	str	r2, [sp, #12]
    cb3a:	9a02      	ldr	r2, [sp, #8]
    cb3c:	7812      	ldrb	r2, [r2, #0]
    cb3e:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    cb40:	9b02      	ldr	r3, [sp, #8]
    cb42:	3301      	adds	r3, #1
    cb44:	9302      	str	r3, [sp, #8]
            ++ui32CharCnt;
    cb46:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cb48:	3301      	adds	r3, #1
    cb4a:	9311      	str	r3, [sp, #68]	; 0x44
            continue;
    cb4c:	e2c3      	b.n	d0d6 <am_util_stdio_vsprintf+0x5ea>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    cb4e:	9b02      	ldr	r3, [sp, #8]
    cb50:	3301      	adds	r3, #1
    cb52:	9302      	str	r3, [sp, #8]
        bLower = bLongLong = false;
    cb54:	2300      	movs	r3, #0
    cb56:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    cb5a:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    cb5e:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    cb62:	2320      	movs	r3, #32
    cb64:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

        if ( *pcFmt == '0' )
    cb68:	9b02      	ldr	r3, [sp, #8]
    cb6a:	781b      	ldrb	r3, [r3, #0]
    cb6c:	2b30      	cmp	r3, #48	; 0x30
    cb6e:	d105      	bne.n	cb7c <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    cb70:	2330      	movs	r3, #48	; 0x30
    cb72:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
            ++pcFmt;
    cb76:	9b02      	ldr	r3, [sp, #8]
    cb78:	3301      	adds	r3, #1
    cb7a:	9302      	str	r3, [sp, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    cb7c:	ab05      	add	r3, sp, #20
    cb7e:	4619      	mov	r1, r3
    cb80:	9802      	ldr	r0, [sp, #8]
    cb82:	f7ff fd93 	bl	c6ac <decstr_to_int>
    cb86:	4603      	mov	r3, r0
    cb88:	9310      	str	r3, [sp, #64]	; 0x40
        pcFmt += ui32NumChars;
    cb8a:	9b05      	ldr	r3, [sp, #20]
    cb8c:	9a02      	ldr	r2, [sp, #8]
    cb8e:	4413      	add	r3, r2
    cb90:	9302      	str	r3, [sp, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    cb92:	9b02      	ldr	r3, [sp, #8]
    cb94:	781b      	ldrb	r3, [r3, #0]
    cb96:	2b73      	cmp	r3, #115	; 0x73
    cb98:	d005      	beq.n	cba6 <am_util_stdio_vsprintf+0xba>
    cb9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cb9c:	2b00      	cmp	r3, #0
    cb9e:	da02      	bge.n	cba6 <am_util_stdio_vsprintf+0xba>
        {
            iWidth = -iWidth;
    cba0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cba2:	425b      	negs	r3, r3
    cba4:	9310      	str	r3, [sp, #64]	; 0x40
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    cba6:	9b02      	ldr	r3, [sp, #8]
    cba8:	781b      	ldrb	r3, [r3, #0]
    cbaa:	2b2e      	cmp	r3, #46	; 0x2e
    cbac:	d10d      	bne.n	cbca <am_util_stdio_vsprintf+0xde>
        {
            ++pcFmt;
    cbae:	9b02      	ldr	r3, [sp, #8]
    cbb0:	3301      	adds	r3, #1
    cbb2:	9302      	str	r3, [sp, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    cbb4:	ab05      	add	r3, sp, #20
    cbb6:	4619      	mov	r1, r3
    cbb8:	9802      	ldr	r0, [sp, #8]
    cbba:	f7ff fd77 	bl	c6ac <decstr_to_int>
    cbbe:	4603      	mov	r3, r0
    cbc0:	930e      	str	r3, [sp, #56]	; 0x38
            pcFmt += ui32NumChars;
    cbc2:	9b05      	ldr	r3, [sp, #20]
    cbc4:	9a02      	ldr	r2, [sp, #8]
    cbc6:	4413      	add	r3, r2
    cbc8:	9302      	str	r3, [sp, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    cbca:	9b02      	ldr	r3, [sp, #8]
    cbcc:	781b      	ldrb	r3, [r3, #0]
    cbce:	2b6c      	cmp	r3, #108	; 0x6c
    cbd0:	d10c      	bne.n	cbec <am_util_stdio_vsprintf+0x100>
        {
            pcFmt++;
    cbd2:	9b02      	ldr	r3, [sp, #8]
    cbd4:	3301      	adds	r3, #1
    cbd6:	9302      	str	r3, [sp, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    cbd8:	9b02      	ldr	r3, [sp, #8]
    cbda:	781b      	ldrb	r3, [r3, #0]
    cbdc:	2b6c      	cmp	r3, #108	; 0x6c
    cbde:	d105      	bne.n	cbec <am_util_stdio_vsprintf+0x100>
            {
                pcFmt++;
    cbe0:	9b02      	ldr	r3, [sp, #8]
    cbe2:	3301      	adds	r3, #1
    cbe4:	9302      	str	r3, [sp, #8]
                bLongLong = true;
    cbe6:	2301      	movs	r3, #1
    cbe8:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
            }
        }

        switch ( *pcFmt )
    cbec:	9b02      	ldr	r3, [sp, #8]
    cbee:	781b      	ldrb	r3, [r3, #0]
    cbf0:	3b46      	subs	r3, #70	; 0x46
    cbf2:	2b32      	cmp	r3, #50	; 0x32
    cbf4:	f200 825c 	bhi.w	d0b0 <am_util_stdio_vsprintf+0x5c4>
    cbf8:	a201      	add	r2, pc, #4	; (adr r2, cc00 <am_util_stdio_vsprintf+0x114>)
    cbfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cbfe:	bf00      	nop
    cc00:	0000d037 	.word	0x0000d037
    cc04:	0000d0b1 	.word	0x0000d0b1
    cc08:	0000d0b1 	.word	0x0000d0b1
    cc0c:	0000d0b1 	.word	0x0000d0b1
    cc10:	0000d0b1 	.word	0x0000d0b1
    cc14:	0000d0b1 	.word	0x0000d0b1
    cc18:	0000d0b1 	.word	0x0000d0b1
    cc1c:	0000d0b1 	.word	0x0000d0b1
    cc20:	0000d0b1 	.word	0x0000d0b1
    cc24:	0000d0b1 	.word	0x0000d0b1
    cc28:	0000d0b1 	.word	0x0000d0b1
    cc2c:	0000d0b1 	.word	0x0000d0b1
    cc30:	0000d0b1 	.word	0x0000d0b1
    cc34:	0000d0b1 	.word	0x0000d0b1
    cc38:	0000d0b1 	.word	0x0000d0b1
    cc3c:	0000d0b1 	.word	0x0000d0b1
    cc40:	0000d0b1 	.word	0x0000d0b1
    cc44:	0000d0b1 	.word	0x0000d0b1
    cc48:	0000cdcb 	.word	0x0000cdcb
    cc4c:	0000d0b1 	.word	0x0000d0b1
    cc50:	0000d0b1 	.word	0x0000d0b1
    cc54:	0000d0b1 	.word	0x0000d0b1
    cc58:	0000d0b1 	.word	0x0000d0b1
    cc5c:	0000d0b1 	.word	0x0000d0b1
    cc60:	0000d0b1 	.word	0x0000d0b1
    cc64:	0000d0b1 	.word	0x0000d0b1
    cc68:	0000d0b1 	.word	0x0000d0b1
    cc6c:	0000d0b1 	.word	0x0000d0b1
    cc70:	0000d0b1 	.word	0x0000d0b1
    cc74:	0000cccd 	.word	0x0000cccd
    cc78:	0000cefb 	.word	0x0000cefb
    cc7c:	0000d0b1 	.word	0x0000d0b1
    cc80:	0000d037 	.word	0x0000d037
    cc84:	0000d0b1 	.word	0x0000d0b1
    cc88:	0000d0b1 	.word	0x0000d0b1
    cc8c:	0000cefb 	.word	0x0000cefb
    cc90:	0000d0b1 	.word	0x0000d0b1
    cc94:	0000d0b1 	.word	0x0000d0b1
    cc98:	0000d0b1 	.word	0x0000d0b1
    cc9c:	0000d0b1 	.word	0x0000d0b1
    cca0:	0000d0b1 	.word	0x0000d0b1
    cca4:	0000d0b1 	.word	0x0000d0b1
    cca8:	0000d0b1 	.word	0x0000d0b1
    ccac:	0000d0b1 	.word	0x0000d0b1
    ccb0:	0000d0b1 	.word	0x0000d0b1
    ccb4:	0000ccf3 	.word	0x0000ccf3
    ccb8:	0000d0b1 	.word	0x0000d0b1
    ccbc:	0000ce65 	.word	0x0000ce65
    ccc0:	0000d0b1 	.word	0x0000d0b1
    ccc4:	0000d0b1 	.word	0x0000d0b1
    ccc8:	0000cdc5 	.word	0x0000cdc5
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cccc:	9b01      	ldr	r3, [sp, #4]
    ccce:	1d1a      	adds	r2, r3, #4
    ccd0:	9201      	str	r2, [sp, #4]
    ccd2:	681b      	ldr	r3, [r3, #0]
    ccd4:	f88d 301f 	strb.w	r3, [sp, #31]

                if ( pcBuf )
    ccd8:	9b03      	ldr	r3, [sp, #12]
    ccda:	2b00      	cmp	r3, #0
    ccdc:	d005      	beq.n	ccea <am_util_stdio_vsprintf+0x1fe>
                {
                    *pcBuf++ = ui8CharSpecifier;
    ccde:	9b03      	ldr	r3, [sp, #12]
    cce0:	1c5a      	adds	r2, r3, #1
    cce2:	9203      	str	r2, [sp, #12]
    cce4:	f89d 201f 	ldrb.w	r2, [sp, #31]
    cce8:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    ccea:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ccec:	3301      	adds	r3, #1
    ccee:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    ccf0:	e1ee      	b.n	d0d0 <am_util_stdio_vsprintf+0x5e4>

            case 's':
                pcStr = va_arg(pArgs, char *);
    ccf2:	9b01      	ldr	r3, [sp, #4]
    ccf4:	1d1a      	adds	r2, r3, #4
    ccf6:	9201      	str	r2, [sp, #4]
    ccf8:	681b      	ldr	r3, [r3, #0]
    ccfa:	9315      	str	r3, [sp, #84]	; 0x54
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    ccfc:	9815      	ldr	r0, [sp, #84]	; 0x54
    ccfe:	f7ff fdbe 	bl	c87e <simple_strlen>
    cd02:	900b      	str	r0, [sp, #44]	; 0x2c
                if ( iWidth > 0 )
    cd04:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cd06:	2b00      	cmp	r3, #0
    cd08:	dd2e      	ble.n	cd68 <am_util_stdio_vsprintf+0x27c>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    cd0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cd0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cd0e:	429a      	cmp	r2, r3
    cd10:	d22a      	bcs.n	cd68 <am_util_stdio_vsprintf+0x27c>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cd12:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cd14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cd16:	1ad3      	subs	r3, r2, r3
    cd18:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cd1a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cd1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cd20:	4619      	mov	r1, r3
    cd22:	9803      	ldr	r0, [sp, #12]
    cd24:	f7ff fdc1 	bl	c8aa <padbuffer>
    cd28:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    cd2a:	9b03      	ldr	r3, [sp, #12]
    cd2c:	2b00      	cmp	r3, #0
    cd2e:	d001      	beq.n	cd34 <am_util_stdio_vsprintf+0x248>
    cd30:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cd32:	e000      	b.n	cd36 <am_util_stdio_vsprintf+0x24a>
    cd34:	2300      	movs	r3, #0
    cd36:	9a03      	ldr	r2, [sp, #12]
    cd38:	4413      	add	r3, r2
    cd3a:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    cd3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cd3e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cd40:	4413      	add	r3, r2
    cd42:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    cd44:	2300      	movs	r3, #0
    cd46:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }

                while (*pcStr != 0x0)
    cd48:	e00e      	b.n	cd68 <am_util_stdio_vsprintf+0x27c>
                {
                    if ( pcBuf )
    cd4a:	9b03      	ldr	r3, [sp, #12]
    cd4c:	2b00      	cmp	r3, #0
    cd4e:	d005      	beq.n	cd5c <am_util_stdio_vsprintf+0x270>
                    {
                        *pcBuf++ = *pcStr;
    cd50:	9b03      	ldr	r3, [sp, #12]
    cd52:	1c5a      	adds	r2, r3, #1
    cd54:	9203      	str	r2, [sp, #12]
    cd56:	9a15      	ldr	r2, [sp, #84]	; 0x54
    cd58:	7812      	ldrb	r2, [r2, #0]
    cd5a:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    cd5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cd5e:	3301      	adds	r3, #1
    cd60:	9315      	str	r3, [sp, #84]	; 0x54
                    ++ui32CharCnt;
    cd62:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cd64:	3301      	adds	r3, #1
    cd66:	9311      	str	r3, [sp, #68]	; 0x44
                while (*pcStr != 0x0)
    cd68:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cd6a:	781b      	ldrb	r3, [r3, #0]
    cd6c:	2b00      	cmp	r3, #0
    cd6e:	d1ec      	bne.n	cd4a <am_util_stdio_vsprintf+0x25e>
                }

                if ( iWidth )
    cd70:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cd72:	2b00      	cmp	r3, #0
    cd74:	f000 81a9 	beq.w	d0ca <am_util_stdio_vsprintf+0x5de>
                {
                    iWidth = -iWidth;
    cd78:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cd7a:	425b      	negs	r3, r3
    cd7c:	9310      	str	r3, [sp, #64]	; 0x40

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    cd7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cd80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cd82:	429a      	cmp	r2, r3
    cd84:	f080 81a1 	bcs.w	d0ca <am_util_stdio_vsprintf+0x5de>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cd88:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cd8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cd8c:	1ad3      	subs	r3, r2, r3
    cd8e:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cd90:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cd94:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cd96:	4619      	mov	r1, r3
    cd98:	9803      	ldr	r0, [sp, #12]
    cd9a:	f7ff fd86 	bl	c8aa <padbuffer>
    cd9e:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    cda0:	9b03      	ldr	r3, [sp, #12]
    cda2:	2b00      	cmp	r3, #0
    cda4:	d001      	beq.n	cdaa <am_util_stdio_vsprintf+0x2be>
    cda6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cda8:	e000      	b.n	cdac <am_util_stdio_vsprintf+0x2c0>
    cdaa:	2300      	movs	r3, #0
    cdac:	9a03      	ldr	r2, [sp, #12]
    cdae:	4413      	add	r3, r2
    cdb0:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    cdb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cdb4:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cdb6:	4413      	add	r3, r2
    cdb8:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    cdba:	2300      	movs	r3, #0
    cdbc:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }
                break;
    cdbe:	e184      	b.n	d0ca <am_util_stdio_vsprintf+0x5de>
    cdc0:	1000113c 	.word	0x1000113c

            case 'x':
                bLower = true;
    cdc4:	2301      	movs	r3, #1
    cdc6:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cdca:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    cdce:	2b00      	cmp	r3, #0
    cdd0:	d009      	beq.n	cde6 <am_util_stdio_vsprintf+0x2fa>
    cdd2:	9b01      	ldr	r3, [sp, #4]
    cdd4:	3307      	adds	r3, #7
    cdd6:	f023 0307 	bic.w	r3, r3, #7
    cdda:	f103 0208 	add.w	r2, r3, #8
    cdde:	9201      	str	r2, [sp, #4]
    cde0:	e9d3 4500 	ldrd	r4, r5, [r3]
    cde4:	e006      	b.n	cdf4 <am_util_stdio_vsprintf+0x308>
                                      va_arg(pArgs, uint32_t);
    cde6:	9b01      	ldr	r3, [sp, #4]
    cde8:	1d1a      	adds	r2, r3, #4
    cdea:	9201      	str	r2, [sp, #4]
    cdec:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cdee:	2200      	movs	r2, #0
    cdf0:	461c      	mov	r4, r3
    cdf2:	4615      	mov	r5, r2
    cdf4:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48

                if ( iWidth )
    cdf8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cdfa:	2b00      	cmp	r3, #0
    cdfc:	d01e      	beq.n	ce3c <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    cdfe:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    ce02:	f7ff fc2f 	bl	c664 <ndigits_in_hex>
    ce06:	4602      	mov	r2, r0
    ce08:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce0a:	1a9b      	subs	r3, r3, r2
    ce0c:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    ce0e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    ce12:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ce14:	4619      	mov	r1, r3
    ce16:	9803      	ldr	r0, [sp, #12]
    ce18:	f7ff fd47 	bl	c8aa <padbuffer>
    ce1c:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    ce1e:	9b03      	ldr	r3, [sp, #12]
    ce20:	2b00      	cmp	r3, #0
    ce22:	d001      	beq.n	ce28 <am_util_stdio_vsprintf+0x33c>
    ce24:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce26:	e000      	b.n	ce2a <am_util_stdio_vsprintf+0x33e>
    ce28:	2300      	movs	r3, #0
    ce2a:	9a03      	ldr	r2, [sp, #12]
    ce2c:	4413      	add	r3, r2
    ce2e:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    ce30:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce32:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ce34:	4413      	add	r3, r2
    ce36:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    ce38:	2300      	movs	r3, #0
    ce3a:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    ce3c:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    ce40:	9a03      	ldr	r2, [sp, #12]
    ce42:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    ce46:	f7ff fcba 	bl	c7be <uint64_to_hexstr>
    ce4a:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    ce4c:	9b03      	ldr	r3, [sp, #12]
    ce4e:	2b00      	cmp	r3, #0
    ce50:	d003      	beq.n	ce5a <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    ce52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ce54:	9a03      	ldr	r2, [sp, #12]
    ce56:	4413      	add	r3, r2
    ce58:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    ce5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ce5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ce5e:	4413      	add	r3, r2
    ce60:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    ce62:	e135      	b.n	d0d0 <am_util_stdio_vsprintf+0x5e4>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    ce64:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    ce68:	2b00      	cmp	r3, #0
    ce6a:	d009      	beq.n	ce80 <am_util_stdio_vsprintf+0x394>
    ce6c:	9b01      	ldr	r3, [sp, #4]
    ce6e:	3307      	adds	r3, #7
    ce70:	f023 0307 	bic.w	r3, r3, #7
    ce74:	f103 0208 	add.w	r2, r3, #8
    ce78:	9201      	str	r2, [sp, #4]
    ce7a:	e9d3 6700 	ldrd	r6, r7, [r3]
    ce7e:	e006      	b.n	ce8e <am_util_stdio_vsprintf+0x3a2>
                                      va_arg(pArgs, uint32_t);
    ce80:	9b01      	ldr	r3, [sp, #4]
    ce82:	1d1a      	adds	r2, r3, #4
    ce84:	9201      	str	r2, [sp, #4]
    ce86:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    ce88:	2200      	movs	r2, #0
    ce8a:	461e      	mov	r6, r3
    ce8c:	4617      	mov	r7, r2
    ce8e:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48

                if ( iWidth )
    ce92:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce94:	2b00      	cmp	r3, #0
    ce96:	d01e      	beq.n	ced6 <am_util_stdio_vsprintf+0x3ea>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    ce98:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    ce9c:	f7ff fba8 	bl	c5f0 <ndigits_in_u64>
    cea0:	4602      	mov	r2, r0
    cea2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cea4:	1a9b      	subs	r3, r3, r2
    cea6:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cea8:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    ceac:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ceae:	4619      	mov	r1, r3
    ceb0:	9803      	ldr	r0, [sp, #12]
    ceb2:	f7ff fcfa 	bl	c8aa <padbuffer>
    ceb6:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    ceb8:	9b03      	ldr	r3, [sp, #12]
    ceba:	2b00      	cmp	r3, #0
    cebc:	d001      	beq.n	cec2 <am_util_stdio_vsprintf+0x3d6>
    cebe:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cec0:	e000      	b.n	cec4 <am_util_stdio_vsprintf+0x3d8>
    cec2:	2300      	movs	r3, #0
    cec4:	9a03      	ldr	r2, [sp, #12]
    cec6:	4413      	add	r3, r2
    cec8:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    ceca:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cecc:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cece:	4413      	add	r3, r2
    ced0:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    ced2:	2300      	movs	r3, #0
    ced4:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    ced6:	9a03      	ldr	r2, [sp, #12]
    ced8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    cedc:	f7ff fc2a 	bl	c734 <uint64_to_str>
    cee0:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    cee2:	9b03      	ldr	r3, [sp, #12]
    cee4:	2b00      	cmp	r3, #0
    cee6:	d003      	beq.n	cef0 <am_util_stdio_vsprintf+0x404>
                {
                    pcBuf += iVal;
    cee8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ceea:	9a03      	ldr	r2, [sp, #12]
    ceec:	4413      	add	r3, r2
    ceee:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    cef0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cef2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cef4:	4413      	add	r3, r2
    cef6:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    cef8:	e0ea      	b.n	d0d0 <am_util_stdio_vsprintf+0x5e4>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cefa:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    cefe:	2b00      	cmp	r3, #0
    cf00:	d009      	beq.n	cf16 <am_util_stdio_vsprintf+0x42a>
    cf02:	9b01      	ldr	r3, [sp, #4]
    cf04:	3307      	adds	r3, #7
    cf06:	f023 0307 	bic.w	r3, r3, #7
    cf0a:	f103 0208 	add.w	r2, r3, #8
    cf0e:	9201      	str	r2, [sp, #4]
    cf10:	e9d3 8900 	ldrd	r8, r9, [r3]
    cf14:	e006      	b.n	cf24 <am_util_stdio_vsprintf+0x438>
                                     va_arg(pArgs, int32_t);
    cf16:	9b01      	ldr	r3, [sp, #4]
    cf18:	1d1a      	adds	r2, r3, #4
    cf1a:	9201      	str	r2, [sp, #4]
    cf1c:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cf1e:	17da      	asrs	r2, r3, #31
    cf20:	4698      	mov	r8, r3
    cf22:	4691      	mov	r9, r2
    cf24:	e9cd 8908 	strd	r8, r9, [sp, #32]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    cf28:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    cf2c:	2b00      	cmp	r3, #0
    cf2e:	da0c      	bge.n	cf4a <am_util_stdio_vsprintf+0x45e>
                {
                    ui64Val = -i64Val;          // Get absolute value
    cf30:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    cf34:	2100      	movs	r1, #0
    cf36:	f1d2 0a00 	rsbs	sl, r2, #0
    cf3a:	eb61 0b03 	sbc.w	fp, r1, r3
    cf3e:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
                    bNeg = true;
    cf42:	2301      	movs	r3, #1
    cf44:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    cf48:	e006      	b.n	cf58 <am_util_stdio_vsprintf+0x46c>
                }
                else
                {
                    ui64Val = i64Val;
    cf4a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    cf4e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
                    bNeg = false;
    cf52:	2300      	movs	r3, #0
    cf54:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                }

                if ( iWidth )
    cf58:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf5a:	2b00      	cmp	r3, #0
    cf5c:	d04a      	beq.n	cff4 <am_util_stdio_vsprintf+0x508>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    cf5e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cf62:	4610      	mov	r0, r2
    cf64:	4619      	mov	r1, r3
    cf66:	f7ff fb63 	bl	c630 <ndigits_in_i64>
    cf6a:	4602      	mov	r2, r0
    cf6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf6e:	1a9b      	subs	r3, r3, r2
    cf70:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg )
    cf72:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    cf76:	2b00      	cmp	r3, #0
    cf78:	d011      	beq.n	cf9e <am_util_stdio_vsprintf+0x4b2>
                    {
                        --iWidth;
    cf7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf7c:	3b01      	subs	r3, #1
    cf7e:	9310      	str	r3, [sp, #64]	; 0x40

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    cf80:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cf84:	2b30      	cmp	r3, #48	; 0x30
    cf86:	d10a      	bne.n	cf9e <am_util_stdio_vsprintf+0x4b2>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    cf88:	9b03      	ldr	r3, [sp, #12]
    cf8a:	2b00      	cmp	r3, #0
    cf8c:	d004      	beq.n	cf98 <am_util_stdio_vsprintf+0x4ac>
                            {
                                *pcBuf++ = '-';
    cf8e:	9b03      	ldr	r3, [sp, #12]
    cf90:	1c5a      	adds	r2, r3, #1
    cf92:	9203      	str	r2, [sp, #12]
    cf94:	222d      	movs	r2, #45	; 0x2d
    cf96:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    cf98:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cf9a:	3301      	adds	r3, #1
    cf9c:	9311      	str	r3, [sp, #68]	; 0x44
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cf9e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cfa2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cfa4:	4619      	mov	r1, r3
    cfa6:	9803      	ldr	r0, [sp, #12]
    cfa8:	f7ff fc7f 	bl	c8aa <padbuffer>
    cfac:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    cfae:	9b03      	ldr	r3, [sp, #12]
    cfb0:	2b00      	cmp	r3, #0
    cfb2:	d001      	beq.n	cfb8 <am_util_stdio_vsprintf+0x4cc>
    cfb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfb6:	e000      	b.n	cfba <am_util_stdio_vsprintf+0x4ce>
    cfb8:	2300      	movs	r3, #0
    cfba:	9a03      	ldr	r2, [sp, #12]
    cfbc:	4413      	add	r3, r2
    cfbe:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    cfc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfc2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cfc4:	4413      	add	r3, r2
    cfc6:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    cfc8:	2300      	movs	r3, #0
    cfca:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    cfcc:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    cfd0:	2b00      	cmp	r3, #0
    cfd2:	d01e      	beq.n	d012 <am_util_stdio_vsprintf+0x526>
    cfd4:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cfd8:	2b20      	cmp	r3, #32
    cfda:	d11a      	bne.n	d012 <am_util_stdio_vsprintf+0x526>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    cfdc:	9b03      	ldr	r3, [sp, #12]
    cfde:	2b00      	cmp	r3, #0
    cfe0:	d004      	beq.n	cfec <am_util_stdio_vsprintf+0x500>
                        {
                            *pcBuf++ = '-';
    cfe2:	9b03      	ldr	r3, [sp, #12]
    cfe4:	1c5a      	adds	r2, r3, #1
    cfe6:	9203      	str	r2, [sp, #12]
    cfe8:	222d      	movs	r2, #45	; 0x2d
    cfea:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    cfec:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cfee:	3301      	adds	r3, #1
    cff0:	9311      	str	r3, [sp, #68]	; 0x44
    cff2:	e00e      	b.n	d012 <am_util_stdio_vsprintf+0x526>
                    }
                }
                else
                {
                    if ( bNeg )
    cff4:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    cff8:	2b00      	cmp	r3, #0
    cffa:	d00a      	beq.n	d012 <am_util_stdio_vsprintf+0x526>
                    {
                        if ( pcBuf )
    cffc:	9b03      	ldr	r3, [sp, #12]
    cffe:	2b00      	cmp	r3, #0
    d000:	d004      	beq.n	d00c <am_util_stdio_vsprintf+0x520>
                        {
                            *pcBuf++ = '-';
    d002:	9b03      	ldr	r3, [sp, #12]
    d004:	1c5a      	adds	r2, r3, #1
    d006:	9203      	str	r2, [sp, #12]
    d008:	222d      	movs	r2, #45	; 0x2d
    d00a:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    d00c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d00e:	3301      	adds	r3, #1
    d010:	9311      	str	r3, [sp, #68]	; 0x44
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d012:	9a03      	ldr	r2, [sp, #12]
    d014:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d018:	f7ff fb8c 	bl	c734 <uint64_to_str>
    d01c:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d01e:	9b03      	ldr	r3, [sp, #12]
    d020:	2b00      	cmp	r3, #0
    d022:	d003      	beq.n	d02c <am_util_stdio_vsprintf+0x540>
                {
                    pcBuf += iVal;
    d024:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d026:	9a03      	ldr	r2, [sp, #12]
    d028:	4413      	add	r3, r2
    d02a:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d02c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d02e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d030:	4413      	add	r3, r2
    d032:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d034:	e04c      	b.n	d0d0 <am_util_stdio_vsprintf+0x5e4>


            case 'f':
            case 'F':
                if ( pcBuf )
    d036:	9b03      	ldr	r3, [sp, #12]
    d038:	2b00      	cmp	r3, #0
    d03a:	d048      	beq.n	d0ce <am_util_stdio_vsprintf+0x5e2>
                {
                    float fValue = va_arg(pArgs, double);
    d03c:	9b01      	ldr	r3, [sp, #4]
    d03e:	3307      	adds	r3, #7
    d040:	f023 0307 	bic.w	r3, r3, #7
    d044:	f103 0208 	add.w	r2, r3, #8
    d048:	9201      	str	r2, [sp, #4]
    d04a:	e9d3 2300 	ldrd	r2, r3, [r3]
    d04e:	4610      	mov	r0, r2
    d050:	4619      	mov	r1, r3
    d052:	f7ff f855 	bl	c100 <__aeabi_d2f>
    d056:	4603      	mov	r3, r0
    d058:	9306      	str	r3, [sp, #24]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    d05a:	9b03      	ldr	r3, [sp, #12]
    d05c:	2214      	movs	r2, #20
    d05e:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    d060:	990e      	ldr	r1, [sp, #56]	; 0x38
    d062:	9803      	ldr	r0, [sp, #12]
    d064:	ed9d 0a06 	vldr	s0, [sp, #24]
    d068:	f7ff fc42 	bl	c8f0 <ftoa>
    d06c:	900f      	str	r0, [sp, #60]	; 0x3c
                    if ( iVal < 0 )
    d06e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d070:	2b00      	cmp	r3, #0
    d072:	da14      	bge.n	d09e <am_util_stdio_vsprintf+0x5b2>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d074:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d076:	f1b3 3fff 	cmp.w	r3, #4294967295
    d07a:	d102      	bne.n	d082 <am_util_stdio_vsprintf+0x596>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d07c:	4b1e      	ldr	r3, [pc, #120]	; (d0f8 <am_util_stdio_vsprintf+0x60c>)
    d07e:	930c      	str	r3, [sp, #48]	; 0x30
    d080:	e008      	b.n	d094 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d082:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d084:	f113 0f02 	cmn.w	r3, #2
    d088:	d102      	bne.n	d090 <am_util_stdio_vsprintf+0x5a4>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d08a:	4b1c      	ldr	r3, [pc, #112]	; (d0fc <am_util_stdio_vsprintf+0x610>)
    d08c:	930c      	str	r3, [sp, #48]	; 0x30
    d08e:	e001      	b.n	d094 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d090:	4b1b      	ldr	r3, [pc, #108]	; (d100 <am_util_stdio_vsprintf+0x614>)
    d092:	930c      	str	r3, [sp, #48]	; 0x30
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d094:	9b03      	ldr	r3, [sp, #12]
    d096:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d098:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    d09a:	2303      	movs	r3, #3
    d09c:	930f      	str	r3, [sp, #60]	; 0x3c
                    }
                    ui32CharCnt += iVal;
    d09e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d0a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d0a2:	4413      	add	r3, r2
    d0a4:	9311      	str	r3, [sp, #68]	; 0x44
                    pcBuf += iVal;
    d0a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d0a8:	9a03      	ldr	r2, [sp, #12]
    d0aa:	4413      	add	r3, r2
    d0ac:	9303      	str	r3, [sp, #12]
                }
                break;
    d0ae:	e00e      	b.n	d0ce <am_util_stdio_vsprintf+0x5e2>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d0b0:	9b03      	ldr	r3, [sp, #12]
    d0b2:	2b00      	cmp	r3, #0
    d0b4:	d005      	beq.n	d0c2 <am_util_stdio_vsprintf+0x5d6>
                {
                    *pcBuf++ = *pcFmt;
    d0b6:	9b03      	ldr	r3, [sp, #12]
    d0b8:	1c5a      	adds	r2, r3, #1
    d0ba:	9203      	str	r2, [sp, #12]
    d0bc:	9a02      	ldr	r2, [sp, #8]
    d0be:	7812      	ldrb	r2, [r2, #0]
    d0c0:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d0c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d0c4:	3301      	adds	r3, #1
    d0c6:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d0c8:	e002      	b.n	d0d0 <am_util_stdio_vsprintf+0x5e4>
                break;
    d0ca:	bf00      	nop
    d0cc:	e000      	b.n	d0d0 <am_util_stdio_vsprintf+0x5e4>
                break;
    d0ce:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d0d0:	9b02      	ldr	r3, [sp, #8]
    d0d2:	3301      	adds	r3, #1
    d0d4:	9302      	str	r3, [sp, #8]
    while ( *pcFmt != 0x0 )
    d0d6:	9b02      	ldr	r3, [sp, #8]
    d0d8:	781b      	ldrb	r3, [r3, #0]
    d0da:	2b00      	cmp	r3, #0
    d0dc:	f47f ad11 	bne.w	cb02 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d0e0:	9b03      	ldr	r3, [sp, #12]
    d0e2:	2b00      	cmp	r3, #0
    d0e4:	d002      	beq.n	d0ec <am_util_stdio_vsprintf+0x600>
    {
        *pcBuf = 0x0;
    d0e6:	9b03      	ldr	r3, [sp, #12]
    d0e8:	2200      	movs	r2, #0
    d0ea:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d0ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    d0ee:	4618      	mov	r0, r3
    d0f0:	b017      	add	sp, #92	; 0x5c
    d0f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d0f6:	bf00      	nop
    d0f8:	00302e30 	.word	0x00302e30
    d0fc:	00232e23 	.word	0x00232e23
    d100:	003f2e3f 	.word	0x003f2e3f

0000d104 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d104:	b40f      	push	{r0, r1, r2, r3}
    d106:	b500      	push	{lr}
    d108:	b083      	sub	sp, #12
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d10a:	4b0c      	ldr	r3, [pc, #48]	; (d13c <am_util_stdio_printf+0x38>)
    d10c:	681b      	ldr	r3, [r3, #0]
    d10e:	2b00      	cmp	r3, #0
    d110:	d101      	bne.n	d116 <am_util_stdio_printf+0x12>
    {
        return 0;
    d112:	2300      	movs	r3, #0
    d114:	e00c      	b.n	d130 <am_util_stdio_printf+0x2c>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d116:	ab05      	add	r3, sp, #20
    d118:	9300      	str	r3, [sp, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d11a:	9a00      	ldr	r2, [sp, #0]
    d11c:	9904      	ldr	r1, [sp, #16]
    d11e:	4808      	ldr	r0, [pc, #32]	; (d140 <am_util_stdio_printf+0x3c>)
    d120:	f7ff fce4 	bl	caec <am_util_stdio_vsprintf>
    d124:	9001      	str	r0, [sp, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d126:	4b05      	ldr	r3, [pc, #20]	; (d13c <am_util_stdio_printf+0x38>)
    d128:	681b      	ldr	r3, [r3, #0]
    d12a:	4805      	ldr	r0, [pc, #20]	; (d140 <am_util_stdio_printf+0x3c>)
    d12c:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d12e:	9b01      	ldr	r3, [sp, #4]
}
    d130:	4618      	mov	r0, r3
    d132:	b003      	add	sp, #12
    d134:	f85d eb04 	ldr.w	lr, [sp], #4
    d138:	b004      	add	sp, #16
    d13a:	4770      	bx	lr
    d13c:	10001038 	.word	0x10001038
    d140:	1000103c 	.word	0x1000103c

0000d144 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    d144:	b508      	push	{r3, lr}
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d146:	4802      	ldr	r0, [pc, #8]	; (d150 <am_util_stdio_terminal_clear+0xc>)
    d148:	f7ff ffdc 	bl	d104 <am_util_stdio_printf>
}
    d14c:	bf00      	nop
    d14e:	bd08      	pop	{r3, pc}
    d150:	0000e5cc 	.word	0x0000e5cc

0000d154 <am_devices_led_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_init(am_devices_led_t *psLED)
{
    d154:	b500      	push	{lr}
    d156:	b083      	sub	sp, #12
    d158:	9001      	str	r0, [sp, #4]
    if ( (psLED == NULL)    ||
    d15a:	9b01      	ldr	r3, [sp, #4]
    d15c:	2b00      	cmp	r3, #0
    d15e:	d03d      	beq.n	d1dc <am_devices_led_init+0x88>
         (psLED->ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    d160:	9b01      	ldr	r3, [sp, #4]
    d162:	681b      	ldr	r3, [r3, #0]
    if ( (psLED == NULL)    ||
    d164:	2b31      	cmp	r3, #49	; 0x31
    d166:	d839      	bhi.n	d1dc <am_devices_led_init+0x88>
#else
#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
    d168:	9b01      	ldr	r3, [sp, #4]
    d16a:	685b      	ldr	r3, [r3, #4]
    d16c:	f003 0302 	and.w	r3, r3, #2
    d170:	2b00      	cmp	r3, #0
    d172:	d019      	beq.n	d1a8 <am_devices_led_init+0x54>
    {
        //
        // Configure the pin as a push-pull GPIO output.
        //
        am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_OUTPUT);
    d174:	9b01      	ldr	r3, [sp, #4]
    d176:	681b      	ldr	r3, [r3, #0]
    d178:	4a1a      	ldr	r2, [pc, #104]	; (d1e4 <am_devices_led_init+0x90>)
    d17a:	6811      	ldr	r1, [r2, #0]
    d17c:	4618      	mov	r0, r3
    d17e:	f000 fc53 	bl	da28 <am_hal_gpio_pinconfig>
        // state.  Note that for Apollo3 GPIOs in push-pull mode, the output
        // enable, normally a tri-state control, instead functions as an enable
        // for Fast GPIO. Its state does not matter on previous chips, so for
        // normal GPIO usage on Apollo3, it must be disabled.
        //
        am_hal_gpio_state_write(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    d182:	9b01      	ldr	r3, [sp, #4]
    d184:	681b      	ldr	r3, [r3, #0]
    d186:	2103      	movs	r1, #3
    d188:	4618      	mov	r0, r3
    d18a:	f000 fd83 	bl	dc94 <am_hal_gpio_state_write>
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    d18e:	9b01      	ldr	r3, [sp, #4]
    d190:	681a      	ldr	r2, [r3, #0]
                                psLED->ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    d192:	9b01      	ldr	r3, [sp, #4]
    d194:	685b      	ldr	r3, [r3, #4]
                                AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    d196:	b2db      	uxtb	r3, r3
    d198:	f003 0301 	and.w	r3, r3, #1
    d19c:	b2db      	uxtb	r3, r3
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    d19e:	4619      	mov	r1, r3
    d1a0:	4610      	mov	r0, r2
    d1a2:	f000 fd77 	bl	dc94 <am_hal_gpio_state_write>
    d1a6:	e01a      	b.n	d1de <am_devices_led_init+0x8a>
    else
    {
        //
        // Configure the pin as a tri-state GPIO.
        //
        am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_TRISTATE);
    d1a8:	9b01      	ldr	r3, [sp, #4]
    d1aa:	681b      	ldr	r3, [r3, #0]
    d1ac:	4a0e      	ldr	r2, [pc, #56]	; (d1e8 <am_devices_led_init+0x94>)
    d1ae:	6811      	ldr	r1, [r2, #0]
    d1b0:	4618      	mov	r0, r3
    d1b2:	f000 fc39 	bl	da28 <am_hal_gpio_pinconfig>

        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_state_write(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    d1b6:	9b01      	ldr	r3, [sp, #4]
    d1b8:	681b      	ldr	r3, [r3, #0]
    d1ba:	2103      	movs	r1, #3
    d1bc:	4618      	mov	r0, r3
    d1be:	f000 fd69 	bl	dc94 <am_hal_gpio_state_write>
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    d1c2:	9b01      	ldr	r3, [sp, #4]
    d1c4:	681a      	ldr	r2, [r3, #0]
                                psLED->ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    d1c6:	9b01      	ldr	r3, [sp, #4]
    d1c8:	685b      	ldr	r3, [r3, #4]
                                AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    d1ca:	b2db      	uxtb	r3, r3
    d1cc:	f003 0301 	and.w	r3, r3, #1
    d1d0:	b2db      	uxtb	r3, r3
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    d1d2:	4619      	mov	r1, r3
    d1d4:	4610      	mov	r0, r2
    d1d6:	f000 fd5d 	bl	dc94 <am_hal_gpio_state_write>
    d1da:	e000      	b.n	d1de <am_devices_led_init+0x8a>
        return;
    d1dc:	bf00      	nop
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
#endif // AM_APOLLO3_GPIO
#endif
}
    d1de:	b003      	add	sp, #12
    d1e0:	f85d fb04 	ldr.w	pc, [sp], #4
    d1e4:	0000e5ec 	.word	0x0000e5ec
    d1e8:	0000e5f0 	.word	0x0000e5f0

0000d1ec <am_devices_led_array_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_array_init(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
    d1ec:	b500      	push	{lr}
    d1ee:	b085      	sub	sp, #20
    d1f0:	9001      	str	r0, [sp, #4]
    d1f2:	9100      	str	r1, [sp, #0]
    uint32_t i;

    if ( (psLEDs == NULL)                       ||
    d1f4:	9b01      	ldr	r3, [sp, #4]
    d1f6:	2b00      	cmp	r3, #0
    d1f8:	d014      	beq.n	d224 <am_devices_led_array_init+0x38>
    d1fa:	9b00      	ldr	r3, [sp, #0]
    d1fc:	2b1f      	cmp	r3, #31
    d1fe:	d811      	bhi.n	d224 <am_devices_led_array_init+0x38>
    }

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
    d200:	2300      	movs	r3, #0
    d202:	9303      	str	r3, [sp, #12]
    d204:	e009      	b.n	d21a <am_devices_led_array_init+0x2e>
    {
        am_devices_led_init(psLEDs + i);
    d206:	9b03      	ldr	r3, [sp, #12]
    d208:	00db      	lsls	r3, r3, #3
    d20a:	9a01      	ldr	r2, [sp, #4]
    d20c:	4413      	add	r3, r2
    d20e:	4618      	mov	r0, r3
    d210:	f7ff ffa0 	bl	d154 <am_devices_led_init>
    for ( i = 0; i < ui32NumLEDs; i++ )
    d214:	9b03      	ldr	r3, [sp, #12]
    d216:	3301      	adds	r3, #1
    d218:	9303      	str	r3, [sp, #12]
    d21a:	9a03      	ldr	r2, [sp, #12]
    d21c:	9b00      	ldr	r3, [sp, #0]
    d21e:	429a      	cmp	r2, r3
    d220:	d3f1      	bcc.n	d206 <am_devices_led_array_init+0x1a>
    d222:	e000      	b.n	d226 <am_devices_led_array_init+0x3a>
        return;
    d224:	bf00      	nop
    }
}
    d226:	b005      	add	sp, #20
    d228:	f85d fb04 	ldr.w	pc, [sp], #4

0000d22c <am_devices_led_on>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_on(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    d22c:	b500      	push	{lr}
    d22e:	b083      	sub	sp, #12
    d230:	9001      	str	r0, [sp, #4]
    d232:	9100      	str	r1, [sp, #0]
    if ( (psLEDs == NULL)                       ||
    d234:	9b01      	ldr	r3, [sp, #4]
    d236:	2b00      	cmp	r3, #0
    d238:	d02e      	beq.n	d298 <am_devices_led_on+0x6c>
    d23a:	9b00      	ldr	r3, [sp, #0]
    d23c:	2b1e      	cmp	r3, #30
    d23e:	d82b      	bhi.n	d298 <am_devices_led_on+0x6c>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    d240:	9b00      	ldr	r3, [sp, #0]
    d242:	00db      	lsls	r3, r3, #3
    d244:	9a01      	ldr	r2, [sp, #4]
    d246:	4413      	add	r3, r2
    d248:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
    d24a:	2b31      	cmp	r3, #49	; 0x31
    d24c:	d824      	bhi.n	d298 <am_devices_led_on+0x6c>
#else
#if (1 == AM_APOLLO3_GPIO)
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    d24e:	9b00      	ldr	r3, [sp, #0]
    d250:	00db      	lsls	r3, r3, #3
    d252:	9a01      	ldr	r2, [sp, #4]
    d254:	4413      	add	r3, r2
    d256:	685b      	ldr	r3, [r3, #4]
    d258:	f003 0302 	and.w	r3, r3, #2
    d25c:	2b00      	cmp	r3, #0
    d25e:	d011      	beq.n	d284 <am_devices_led_on+0x58>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    d260:	9b00      	ldr	r3, [sp, #0]
    d262:	00db      	lsls	r3, r3, #3
    d264:	9a01      	ldr	r2, [sp, #4]
    d266:	4413      	add	r3, r2
    d268:	6818      	ldr	r0, [r3, #0]
                                psLEDs[ui32LEDNum].ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    d26a:	9b00      	ldr	r3, [sp, #0]
    d26c:	00db      	lsls	r3, r3, #3
    d26e:	9a01      	ldr	r2, [sp, #4]
    d270:	4413      	add	r3, r2
    d272:	685b      	ldr	r3, [r3, #4]
                                AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    d274:	b2db      	uxtb	r3, r3
    d276:	f003 0301 	and.w	r3, r3, #1
    d27a:	b2db      	uxtb	r3, r3
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    d27c:	4619      	mov	r1, r3
    d27e:	f000 fd09 	bl	dc94 <am_hal_gpio_state_write>
    d282:	e00a      	b.n	d29a <am_devices_led_on+0x6e>
    else
    {
        //
        // Turn on the output driver for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    d284:	9b00      	ldr	r3, [sp, #0]
    d286:	00db      	lsls	r3, r3, #3
    d288:	9a01      	ldr	r2, [sp, #4]
    d28a:	4413      	add	r3, r2
    d28c:	681b      	ldr	r3, [r3, #0]
    d28e:	2104      	movs	r1, #4
    d290:	4618      	mov	r0, r3
    d292:	f000 fcff 	bl	dc94 <am_hal_gpio_state_write>
    d296:	e000      	b.n	d29a <am_devices_led_on+0x6e>
        return;
    d298:	bf00      	nop
        //
        am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
#endif // AM_APOLLO3_GPIO
#endif
}
    d29a:	b003      	add	sp, #12
    d29c:	f85d fb04 	ldr.w	pc, [sp], #4

0000d2a0 <am_devices_led_off>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_off(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    d2a0:	b500      	push	{lr}
    d2a2:	b083      	sub	sp, #12
    d2a4:	9001      	str	r0, [sp, #4]
    d2a6:	9100      	str	r1, [sp, #0]
    if ( (psLEDs == NULL)                       ||
    d2a8:	9b01      	ldr	r3, [sp, #4]
    d2aa:	2b00      	cmp	r3, #0
    d2ac:	d031      	beq.n	d312 <am_devices_led_off+0x72>
    d2ae:	9b00      	ldr	r3, [sp, #0]
    d2b0:	2b1e      	cmp	r3, #30
    d2b2:	d82e      	bhi.n	d312 <am_devices_led_off+0x72>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    d2b4:	9b00      	ldr	r3, [sp, #0]
    d2b6:	00db      	lsls	r3, r3, #3
    d2b8:	9a01      	ldr	r2, [sp, #4]
    d2ba:	4413      	add	r3, r2
    d2bc:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
    d2be:	2b31      	cmp	r3, #49	; 0x31
    d2c0:	d827      	bhi.n	d312 <am_devices_led_off+0x72>
#else
#if (1 == AM_APOLLO3_GPIO)
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    d2c2:	9b00      	ldr	r3, [sp, #0]
    d2c4:	00db      	lsls	r3, r3, #3
    d2c6:	9a01      	ldr	r2, [sp, #4]
    d2c8:	4413      	add	r3, r2
    d2ca:	685b      	ldr	r3, [r3, #4]
    d2cc:	f003 0302 	and.w	r3, r3, #2
    d2d0:	2b00      	cmp	r3, #0
    d2d2:	d014      	beq.n	d2fe <am_devices_led_off+0x5e>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    d2d4:	9b00      	ldr	r3, [sp, #0]
    d2d6:	00db      	lsls	r3, r3, #3
    d2d8:	9a01      	ldr	r2, [sp, #4]
    d2da:	4413      	add	r3, r2
    d2dc:	6818      	ldr	r0, [r3, #0]
                                psLEDs[ui32LEDNum].ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    d2de:	9b00      	ldr	r3, [sp, #0]
    d2e0:	00db      	lsls	r3, r3, #3
    d2e2:	9a01      	ldr	r2, [sp, #4]
    d2e4:	4413      	add	r3, r2
    d2e6:	685b      	ldr	r3, [r3, #4]
    d2e8:	f003 0301 	and.w	r3, r3, #1
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    d2ec:	2b00      	cmp	r3, #0
    d2ee:	bf0c      	ite	eq
    d2f0:	2301      	moveq	r3, #1
    d2f2:	2300      	movne	r3, #0
    d2f4:	b2db      	uxtb	r3, r3
    d2f6:	4619      	mov	r1, r3
    d2f8:	f000 fccc 	bl	dc94 <am_hal_gpio_state_write>
    d2fc:	e00a      	b.n	d314 <am_devices_led_off+0x74>
    else
    {
        //
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    d2fe:	9b00      	ldr	r3, [sp, #0]
    d300:	00db      	lsls	r3, r3, #3
    d302:	9a01      	ldr	r2, [sp, #4]
    d304:	4413      	add	r3, r2
    d306:	681b      	ldr	r3, [r3, #0]
    d308:	2103      	movs	r1, #3
    d30a:	4618      	mov	r0, r3
    d30c:	f000 fcc2 	bl	dc94 <am_hal_gpio_state_write>
    d310:	e000      	b.n	d314 <am_devices_led_off+0x74>
        return;
    d312:	bf00      	nop
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
#endif // AM_APOLLO3_GPIO
#endif
}
    d314:	b003      	add	sp, #12
    d316:	f85d fb04 	ldr.w	pc, [sp], #4

0000d31a <am_devices_led_array_out>:
//
//*****************************************************************************
void
am_devices_led_array_out(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs,
                         uint32_t ui32Value)
{
    d31a:	b500      	push	{lr}
    d31c:	b087      	sub	sp, #28
    d31e:	9003      	str	r0, [sp, #12]
    d320:	9102      	str	r1, [sp, #8]
    d322:	9201      	str	r2, [sp, #4]
    uint32_t i;

    for ( i = 0; i < ui32NumLEDs; i++ )
    d324:	2300      	movs	r3, #0
    d326:	9305      	str	r3, [sp, #20]
    d328:	e014      	b.n	d354 <am_devices_led_array_out+0x3a>
    {
        if ( ui32Value & (1 << i) )
    d32a:	2201      	movs	r2, #1
    d32c:	9b05      	ldr	r3, [sp, #20]
    d32e:	fa02 f303 	lsl.w	r3, r2, r3
    d332:	461a      	mov	r2, r3
    d334:	9b01      	ldr	r3, [sp, #4]
    d336:	4013      	ands	r3, r2
    d338:	2b00      	cmp	r3, #0
    d33a:	d004      	beq.n	d346 <am_devices_led_array_out+0x2c>
        {
            am_devices_led_on(psLEDs, i);
    d33c:	9905      	ldr	r1, [sp, #20]
    d33e:	9803      	ldr	r0, [sp, #12]
    d340:	f7ff ff74 	bl	d22c <am_devices_led_on>
    d344:	e003      	b.n	d34e <am_devices_led_array_out+0x34>
        }
        else
        {
            am_devices_led_off(psLEDs, i);
    d346:	9905      	ldr	r1, [sp, #20]
    d348:	9803      	ldr	r0, [sp, #12]
    d34a:	f7ff ffa9 	bl	d2a0 <am_devices_led_off>
    for ( i = 0; i < ui32NumLEDs; i++ )
    d34e:	9b05      	ldr	r3, [sp, #20]
    d350:	3301      	adds	r3, #1
    d352:	9305      	str	r3, [sp, #20]
    d354:	9a05      	ldr	r2, [sp, #20]
    d356:	9b02      	ldr	r3, [sp, #8]
    d358:	429a      	cmp	r2, r3
    d35a:	d3e6      	bcc.n	d32a <am_devices_led_array_out+0x10>
        }
    }
}
    d35c:	bf00      	nop
    d35e:	bf00      	nop
    d360:	b007      	add	sp, #28
    d362:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000d368 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    d368:	4811      	ldr	r0, [pc, #68]	; (d3b0 <zero_loop+0x12>)
    d36a:	4912      	ldr	r1, [pc, #72]	; (d3b4 <zero_loop+0x16>)
    d36c:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    d36e:	f8d1 d000 	ldr.w	sp, [r1]

#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    d372:	4811      	ldr	r0, [pc, #68]	; (d3b8 <zero_loop+0x1a>)
    d374:	6801      	ldr	r1, [r0, #0]
    d376:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d37a:	6001      	str	r1, [r0, #0]
    d37c:	f3bf 8f4f 	dsb	sy
    d380:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    d384:	480d      	ldr	r0, [pc, #52]	; (d3bc <zero_loop+0x1e>)
    d386:	490e      	ldr	r1, [pc, #56]	; (d3c0 <zero_loop+0x22>)
    d388:	4a0e      	ldr	r2, [pc, #56]	; (d3c4 <zero_loop+0x26>)

0000d38a <copy_loop>:
    d38a:	f850 3b04 	ldr.w	r3, [r0], #4
    d38e:	f841 3b04 	str.w	r3, [r1], #4
    d392:	4291      	cmp	r1, r2
    d394:	dbf9      	blt.n	d38a <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    d396:	480c      	ldr	r0, [pc, #48]	; (d3c8 <zero_loop+0x2a>)
    d398:	490c      	ldr	r1, [pc, #48]	; (d3cc <zero_loop+0x2e>)
    d39a:	f04f 0200 	mov.w	r2, #0

0000d39e <zero_loop>:
    d39e:	4288      	cmp	r0, r1
    d3a0:	bfb8      	it	lt
    d3a2:	f840 2b04 	strlt.w	r2, [r0], #4
    d3a6:	dbfa      	blt.n	d39e <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    d3a8:	f7fe ff52 	bl	c250 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    d3ac:	be00      	bkpt	0x0000
}
    d3ae:	bf00      	nop
    d3b0:	e000ed08 	.word	0xe000ed08
    d3b4:	0000c000 	.word	0x0000c000
    d3b8:	e000ed88 	.word	0xe000ed88
    d3bc:	0000e88c 	.word	0x0000e88c
    d3c0:	10001000 	.word	0x10001000
    d3c4:	10001034 	.word	0x10001034
    d3c8:	10001034 	.word	0x10001034
    d3cc:	10001150 	.word	0x10001150

0000d3d0 <NMI_Handler>:
NMI_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d3d0:	e7fe      	b.n	d3d0 <NMI_Handler>

0000d3d2 <BusFault_Handler>:
HardFault_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d3d2:	e7fe      	b.n	d3d2 <BusFault_Handler>

0000d3d4 <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d3d4:	e7fe      	b.n	d3d4 <DebugMon_Handler>
	...

0000d3d8 <am_bsp_low_power_init>:
    d3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d3da:	f000 fe33 	bl	e044 <am_hal_pwrctrl_low_power_init>
    d3de:	f000 ff0f 	bl	e200 <am_hal_rtc_osc_disable>
    d3e2:	4b0b      	ldr	r3, [pc, #44]	; (d410 <am_bsp_low_power_init+0x38>)
    d3e4:	4f0b      	ldr	r7, [pc, #44]	; (d414 <am_bsp_low_power_init+0x3c>)
    d3e6:	681e      	ldr	r6, [r3, #0]
    d3e8:	2400      	movs	r4, #0
    d3ea:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    d3ee:	4631      	mov	r1, r6
    d3f0:	4628      	mov	r0, r5
    d3f2:	f000 fb19 	bl	da28 <am_hal_gpio_pinconfig>
    d3f6:	2103      	movs	r1, #3
    d3f8:	4628      	mov	r0, r5
    d3fa:	f000 fc4b 	bl	dc94 <am_hal_gpio_state_write>
    d3fe:	3401      	adds	r4, #1
    d400:	2100      	movs	r1, #0
    d402:	4628      	mov	r0, r5
    d404:	f000 fc46 	bl	dc94 <am_hal_gpio_state_write>
    d408:	2c05      	cmp	r4, #5
    d40a:	d1ee      	bne.n	d3ea <am_bsp_low_power_init+0x12>
    d40c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d40e:	bf00      	nop
    d410:	0000e5ec 	.word	0x0000e5ec
    d414:	10001000 	.word	0x10001000

0000d418 <am_bsp_debug_printf_disable>:
    d418:	b538      	push	{r3, r4, r5, lr}
    d41a:	4b17      	ldr	r3, [pc, #92]	; (d478 <am_bsp_debug_printf_disable+0x60>)
    d41c:	681c      	ldr	r4, [r3, #0]
    d41e:	2c01      	cmp	r4, #1
    d420:	d002      	beq.n	d428 <am_bsp_debug_printf_disable+0x10>
    d422:	2c02      	cmp	r4, #2
    d424:	d00c      	beq.n	d440 <am_bsp_debug_printf_disable+0x28>
    d426:	bd38      	pop	{r3, r4, r5, pc}
    d428:	f000 fca8 	bl	dd7c <am_hal_itm_disable>
    d42c:	2000      	movs	r0, #0
    d42e:	f7fe ffe1 	bl	c3f4 <am_util_stdio_printf_init>
    d432:	4b12      	ldr	r3, [pc, #72]	; (d47c <am_bsp_debug_printf_disable+0x64>)
    d434:	2029      	movs	r0, #41	; 0x29
    d436:	6819      	ldr	r1, [r3, #0]
    d438:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d43c:	f000 baf4 	b.w	da28 <am_hal_gpio_pinconfig>
    d440:	4d0f      	ldr	r5, [pc, #60]	; (d480 <am_bsp_debug_printf_disable+0x68>)
    d442:	6828      	ldr	r0, [r5, #0]
    d444:	f001 f870 	bl	e528 <am_hal_uart_tx_flush>
    d448:	2000      	movs	r0, #0
    d44a:	f7fe ffd3 	bl	c3f4 <am_util_stdio_printf_init>
    d44e:	4621      	mov	r1, r4
    d450:	2200      	movs	r2, #0
    d452:	6828      	ldr	r0, [r5, #0]
    d454:	f000 fff0 	bl	e438 <am_hal_uart_power_control>
    d458:	6828      	ldr	r0, [r5, #0]
    d45a:	f000 ffd9 	bl	e410 <am_hal_uart_deinitialize>
    d45e:	4b07      	ldr	r3, [pc, #28]	; (d47c <am_bsp_debug_printf_disable+0x64>)
    d460:	681c      	ldr	r4, [r3, #0]
    d462:	2016      	movs	r0, #22
    d464:	4621      	mov	r1, r4
    d466:	f000 fadf 	bl	da28 <am_hal_gpio_pinconfig>
    d46a:	4621      	mov	r1, r4
    d46c:	2017      	movs	r0, #23
    d46e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d472:	f000 bad9 	b.w	da28 <am_hal_gpio_pinconfig>
    d476:	bf00      	nop
    d478:	10001144 	.word	0x10001144
    d47c:	0000e5e8 	.word	0x0000e5e8
    d480:	10001140 	.word	0x10001140

0000d484 <am_bsp_itm_printf_enable>:
    d484:	b500      	push	{lr}
    d486:	4b0b      	ldr	r3, [pc, #44]	; (d4b4 <am_bsp_itm_printf_enable+0x30>)
    d488:	b087      	sub	sp, #28
    d48a:	2201      	movs	r2, #1
    d48c:	601a      	str	r2, [r3, #0]
    d48e:	f000 fc51 	bl	dd34 <am_hal_itm_enable>
    d492:	4b09      	ldr	r3, [pc, #36]	; (d4b8 <am_bsp_itm_printf_enable+0x34>)
    d494:	9301      	str	r3, [sp, #4]
    d496:	a801      	add	r0, sp, #4
    d498:	f000 ff6a 	bl	e370 <am_hal_tpiu_enable>
    d49c:	4b07      	ldr	r3, [pc, #28]	; (d4bc <am_bsp_itm_printf_enable+0x38>)
    d49e:	2029      	movs	r0, #41	; 0x29
    d4a0:	6819      	ldr	r1, [r3, #0]
    d4a2:	f000 fac1 	bl	da28 <am_hal_gpio_pinconfig>
    d4a6:	4806      	ldr	r0, [pc, #24]	; (d4c0 <am_bsp_itm_printf_enable+0x3c>)
    d4a8:	f7fe ffa4 	bl	c3f4 <am_util_stdio_printf_init>
    d4ac:	b007      	add	sp, #28
    d4ae:	f85d fb04 	ldr.w	pc, [sp], #4
    d4b2:	bf00      	nop
    d4b4:	10001144 	.word	0x10001144
    d4b8:	000f4240 	.word	0x000f4240
    d4bc:	0000e5e0 	.word	0x0000e5e0
    d4c0:	0000de31 	.word	0x0000de31

0000d4c4 <am_hal_cachectrl_config>:
    d4c4:	b530      	push	{r4, r5, lr}
    d4c6:	b083      	sub	sp, #12
    d4c8:	4604      	mov	r4, r0
    d4ca:	f000 fc2b 	bl	dd24 <am_hal_interrupt_master_disable>
    d4ce:	4d0e      	ldr	r5, [pc, #56]	; (d508 <am_hal_cachectrl_config+0x44>)
    d4d0:	9001      	str	r0, [sp, #4]
    d4d2:	682b      	ldr	r3, [r5, #0]
    d4d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    d4d8:	602b      	str	r3, [r5, #0]
    d4da:	9801      	ldr	r0, [sp, #4]
    d4dc:	f000 fc26 	bl	dd2c <am_hal_interrupt_master_set>
    d4e0:	7863      	ldrb	r3, [r4, #1]
    d4e2:	7822      	ldrb	r2, [r4, #0]
    d4e4:	78a1      	ldrb	r1, [r4, #2]
    d4e6:	021b      	lsls	r3, r3, #8
    d4e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
    d4ec:	0112      	lsls	r2, r2, #4
    d4ee:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    d4f2:	b2d2      	uxtb	r2, r2
    d4f4:	4313      	orrs	r3, r2
    d4f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d4fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d4fe:	2000      	movs	r0, #0
    d500:	602b      	str	r3, [r5, #0]
    d502:	b003      	add	sp, #12
    d504:	bd30      	pop	{r4, r5, pc}
    d506:	bf00      	nop
    d508:	40018000 	.word	0x40018000

0000d50c <am_hal_cachectrl_enable>:
    d50c:	4a03      	ldr	r2, [pc, #12]	; (d51c <am_hal_cachectrl_enable+0x10>)
    d50e:	6813      	ldr	r3, [r2, #0]
    d510:	f043 0301 	orr.w	r3, r3, #1
    d514:	2000      	movs	r0, #0
    d516:	6013      	str	r3, [r2, #0]
    d518:	4770      	bx	lr
    d51a:	bf00      	nop
    d51c:	40018000 	.word	0x40018000

0000d520 <am_hal_cachectrl_control>:
    d520:	b510      	push	{r4, lr}
    d522:	3801      	subs	r0, #1
    d524:	b08e      	sub	sp, #56	; 0x38
    d526:	2810      	cmp	r0, #16
    d528:	f200 815e 	bhi.w	d7e8 <am_hal_cachectrl_control+0x2c8>
    d52c:	e8df f010 	tbh	[pc, r0, lsl #1]
    d530:	00360018 	.word	0x00360018
    d534:	0040003d 	.word	0x0040003d
    d538:	00450043 	.word	0x00450043
    d53c:	0011001a 	.word	0x0011001a
    d540:	00540047 	.word	0x00540047
    d544:	009a0061 	.word	0x009a0061
    d548:	010c00d3 	.word	0x010c00d3
    d54c:	013f0126 	.word	0x013f0126
    d550:	001d      	.short	0x001d
    d552:	f44f 7300 	mov.w	r3, #512	; 0x200
    d556:	4aac      	ldr	r2, [pc, #688]	; (d808 <am_hal_cachectrl_control+0x2e8>)
    d558:	2000      	movs	r0, #0
    d55a:	6093      	str	r3, [r2, #8]
    d55c:	b00e      	add	sp, #56	; 0x38
    d55e:	bd10      	pop	{r4, pc}
    d560:	2301      	movs	r3, #1
    d562:	e7f8      	b.n	d556 <am_hal_cachectrl_control+0x36>
    d564:	f44f 6380 	mov.w	r3, #1024	; 0x400
    d568:	e7f5      	b.n	d556 <am_hal_cachectrl_control+0x36>
    d56a:	2900      	cmp	r1, #0
    d56c:	f000 813c 	beq.w	d7e8 <am_hal_cachectrl_control+0x2c8>
    d570:	684a      	ldr	r2, [r1, #4]
    d572:	48a6      	ldr	r0, [pc, #664]	; (d80c <am_hal_cachectrl_control+0x2ec>)
    d574:	4202      	tst	r2, r0
    d576:	f040 8137 	bne.w	d7e8 <am_hal_cachectrl_control+0x2c8>
    d57a:	688b      	ldr	r3, [r1, #8]
    d57c:	4018      	ands	r0, r3
    d57e:	f040 8133 	bne.w	d7e8 <am_hal_cachectrl_control+0x2c8>
    d582:	780c      	ldrb	r4, [r1, #0]
    d584:	2c00      	cmp	r4, #0
    d586:	f040 8133 	bne.w	d7f0 <am_hal_cachectrl_control+0x2d0>
    d58a:	4c9f      	ldr	r4, [pc, #636]	; (d808 <am_hal_cachectrl_control+0x2e8>)
    d58c:	7849      	ldrb	r1, [r1, #1]
    d58e:	6122      	str	r2, [r4, #16]
    d590:	6163      	str	r3, [r4, #20]
    d592:	6823      	ldr	r3, [r4, #0]
    d594:	f361 0382 	bfi	r3, r1, #2, #1
    d598:	6023      	str	r3, [r4, #0]
    d59a:	e7df      	b.n	d55c <am_hal_cachectrl_control+0x3c>
    d59c:	4b9a      	ldr	r3, [pc, #616]	; (d808 <am_hal_cachectrl_control+0x2e8>)
    d59e:	681b      	ldr	r3, [r3, #0]
    d5a0:	01db      	lsls	r3, r3, #7
    d5a2:	f140 811f 	bpl.w	d7e4 <am_hal_cachectrl_control+0x2c4>
    d5a6:	2302      	movs	r3, #2
    d5a8:	e7d5      	b.n	d556 <am_hal_cachectrl_control+0x36>
    d5aa:	f44f 6388 	mov.w	r3, #1088	; 0x440
    d5ae:	e7d2      	b.n	d556 <am_hal_cachectrl_control+0x36>
    d5b0:	f44f 7308 	mov.w	r3, #544	; 0x220
    d5b4:	e7cf      	b.n	d556 <am_hal_cachectrl_control+0x36>
    d5b6:	2340      	movs	r3, #64	; 0x40
    d5b8:	e7cd      	b.n	d556 <am_hal_cachectrl_control+0x36>
    d5ba:	2320      	movs	r3, #32
    d5bc:	e7cb      	b.n	d556 <am_hal_cachectrl_control+0x36>
    d5be:	f000 fbb1 	bl	dd24 <am_hal_interrupt_master_disable>
    d5c2:	4a91      	ldr	r2, [pc, #580]	; (d808 <am_hal_cachectrl_control+0x2e8>)
    d5c4:	9000      	str	r0, [sp, #0]
    d5c6:	6813      	ldr	r3, [r2, #0]
    d5c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    d5cc:	6013      	str	r3, [r2, #0]
    d5ce:	9800      	ldr	r0, [sp, #0]
    d5d0:	f000 fbac 	bl	dd2c <am_hal_interrupt_master_set>
    d5d4:	2000      	movs	r0, #0
    d5d6:	e7c1      	b.n	d55c <am_hal_cachectrl_control+0x3c>
    d5d8:	f000 fba4 	bl	dd24 <am_hal_interrupt_master_disable>
    d5dc:	4a8a      	ldr	r2, [pc, #552]	; (d808 <am_hal_cachectrl_control+0x2e8>)
    d5de:	9001      	str	r0, [sp, #4]
    d5e0:	6813      	ldr	r3, [r2, #0]
    d5e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    d5e6:	6013      	str	r3, [r2, #0]
    d5e8:	9801      	ldr	r0, [sp, #4]
    d5ea:	f000 fb9f 	bl	dd2c <am_hal_interrupt_master_set>
    d5ee:	2000      	movs	r0, #0
    d5f0:	e7b4      	b.n	d55c <am_hal_cachectrl_control+0x3c>
    d5f2:	f000 fb97 	bl	dd24 <am_hal_interrupt_master_disable>
    d5f6:	4603      	mov	r3, r0
    d5f8:	4885      	ldr	r0, [pc, #532]	; (d810 <am_hal_cachectrl_control+0x2f0>)
    d5fa:	9302      	str	r3, [sp, #8]
    d5fc:	f000 fa0a 	bl	da14 <am_hal_flash_load_ui32>
    d600:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d604:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d608:	4881      	ldr	r0, [pc, #516]	; (d810 <am_hal_cachectrl_control+0x2f0>)
    d60a:	f000 fa07 	bl	da1c <am_hal_flash_store_ui32>
    d60e:	9802      	ldr	r0, [sp, #8]
    d610:	f000 fb8c 	bl	dd2c <am_hal_interrupt_master_set>
    d614:	f000 fb86 	bl	dd24 <am_hal_interrupt_master_disable>
    d618:	4603      	mov	r3, r0
    d61a:	487d      	ldr	r0, [pc, #500]	; (d810 <am_hal_cachectrl_control+0x2f0>)
    d61c:	9303      	str	r3, [sp, #12]
    d61e:	f000 f9f9 	bl	da14 <am_hal_flash_load_ui32>
    d622:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d626:	f440 61ee 	orr.w	r1, r0, #1904	; 0x770
    d62a:	4879      	ldr	r0, [pc, #484]	; (d810 <am_hal_cachectrl_control+0x2f0>)
    d62c:	f000 f9f6 	bl	da1c <am_hal_flash_store_ui32>
    d630:	9803      	ldr	r0, [sp, #12]
    d632:	f000 fb7b 	bl	dd2c <am_hal_interrupt_master_set>
    d636:	f000 fb75 	bl	dd24 <am_hal_interrupt_master_disable>
    d63a:	4603      	mov	r3, r0
    d63c:	4874      	ldr	r0, [pc, #464]	; (d810 <am_hal_cachectrl_control+0x2f0>)
    d63e:	9304      	str	r3, [sp, #16]
    d640:	f000 f9e8 	bl	da14 <am_hal_flash_load_ui32>
    d644:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d648:	f020 000f 	bic.w	r0, r0, #15
    d64c:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d650:	f041 0103 	orr.w	r1, r1, #3
    d654:	486e      	ldr	r0, [pc, #440]	; (d810 <am_hal_cachectrl_control+0x2f0>)
    d656:	f000 f9e1 	bl	da1c <am_hal_flash_store_ui32>
    d65a:	9804      	ldr	r0, [sp, #16]
    d65c:	f000 fb66 	bl	dd2c <am_hal_interrupt_master_set>
    d660:	2000      	movs	r0, #0
    d662:	e77b      	b.n	d55c <am_hal_cachectrl_control+0x3c>
    d664:	f000 fb5e 	bl	dd24 <am_hal_interrupt_master_disable>
    d668:	4603      	mov	r3, r0
    d66a:	4869      	ldr	r0, [pc, #420]	; (d810 <am_hal_cachectrl_control+0x2f0>)
    d66c:	9305      	str	r3, [sp, #20]
    d66e:	f000 f9d1 	bl	da14 <am_hal_flash_load_ui32>
    d672:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d676:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    d67a:	4865      	ldr	r0, [pc, #404]	; (d810 <am_hal_cachectrl_control+0x2f0>)
    d67c:	f000 f9ce 	bl	da1c <am_hal_flash_store_ui32>
    d680:	9805      	ldr	r0, [sp, #20]
    d682:	f000 fb53 	bl	dd2c <am_hal_interrupt_master_set>
    d686:	f000 fb4d 	bl	dd24 <am_hal_interrupt_master_disable>
    d68a:	4603      	mov	r3, r0
    d68c:	4860      	ldr	r0, [pc, #384]	; (d810 <am_hal_cachectrl_control+0x2f0>)
    d68e:	9306      	str	r3, [sp, #24]
    d690:	f000 f9c0 	bl	da14 <am_hal_flash_load_ui32>
    d694:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d698:	f440 61ea 	orr.w	r1, r0, #1872	; 0x750
    d69c:	485c      	ldr	r0, [pc, #368]	; (d810 <am_hal_cachectrl_control+0x2f0>)
    d69e:	f000 f9bd 	bl	da1c <am_hal_flash_store_ui32>
    d6a2:	9806      	ldr	r0, [sp, #24]
    d6a4:	f000 fb42 	bl	dd2c <am_hal_interrupt_master_set>
    d6a8:	f000 fb3c 	bl	dd24 <am_hal_interrupt_master_disable>
    d6ac:	4603      	mov	r3, r0
    d6ae:	4858      	ldr	r0, [pc, #352]	; (d810 <am_hal_cachectrl_control+0x2f0>)
    d6b0:	9307      	str	r3, [sp, #28]
    d6b2:	f000 f9af 	bl	da14 <am_hal_flash_load_ui32>
    d6b6:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d6ba:	f020 000f 	bic.w	r0, r0, #15
    d6be:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d6c2:	f041 0101 	orr.w	r1, r1, #1
    d6c6:	4852      	ldr	r0, [pc, #328]	; (d810 <am_hal_cachectrl_control+0x2f0>)
    d6c8:	f000 f9a8 	bl	da1c <am_hal_flash_store_ui32>
    d6cc:	9807      	ldr	r0, [sp, #28]
    d6ce:	f000 fb2d 	bl	dd2c <am_hal_interrupt_master_set>
    d6d2:	2000      	movs	r0, #0
    d6d4:	e742      	b.n	d55c <am_hal_cachectrl_control+0x3c>
    d6d6:	f000 fb25 	bl	dd24 <am_hal_interrupt_master_disable>
    d6da:	4603      	mov	r3, r0
    d6dc:	484c      	ldr	r0, [pc, #304]	; (d810 <am_hal_cachectrl_control+0x2f0>)
    d6de:	9308      	str	r3, [sp, #32]
    d6e0:	f000 f998 	bl	da14 <am_hal_flash_load_ui32>
    d6e4:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d6e8:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    d6ec:	4848      	ldr	r0, [pc, #288]	; (d810 <am_hal_cachectrl_control+0x2f0>)
    d6ee:	f000 f995 	bl	da1c <am_hal_flash_store_ui32>
    d6f2:	9808      	ldr	r0, [sp, #32]
    d6f4:	f000 fb1a 	bl	dd2c <am_hal_interrupt_master_set>
    d6f8:	f000 fb14 	bl	dd24 <am_hal_interrupt_master_disable>
    d6fc:	4603      	mov	r3, r0
    d6fe:	4844      	ldr	r0, [pc, #272]	; (d810 <am_hal_cachectrl_control+0x2f0>)
    d700:	9309      	str	r3, [sp, #36]	; 0x24
    d702:	f000 f987 	bl	da14 <am_hal_flash_load_ui32>
    d706:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d70a:	f440 61ec 	orr.w	r1, r0, #1888	; 0x760
    d70e:	4840      	ldr	r0, [pc, #256]	; (d810 <am_hal_cachectrl_control+0x2f0>)
    d710:	f000 f984 	bl	da1c <am_hal_flash_store_ui32>
    d714:	9809      	ldr	r0, [sp, #36]	; 0x24
    d716:	f000 fb09 	bl	dd2c <am_hal_interrupt_master_set>
    d71a:	f000 fb03 	bl	dd24 <am_hal_interrupt_master_disable>
    d71e:	4603      	mov	r3, r0
    d720:	483b      	ldr	r0, [pc, #236]	; (d810 <am_hal_cachectrl_control+0x2f0>)
    d722:	930a      	str	r3, [sp, #40]	; 0x28
    d724:	f000 f976 	bl	da14 <am_hal_flash_load_ui32>
    d728:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d72c:	f020 000f 	bic.w	r0, r0, #15
    d730:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d734:	f041 0101 	orr.w	r1, r1, #1
    d738:	4835      	ldr	r0, [pc, #212]	; (d810 <am_hal_cachectrl_control+0x2f0>)
    d73a:	f000 f96f 	bl	da1c <am_hal_flash_store_ui32>
    d73e:	980a      	ldr	r0, [sp, #40]	; 0x28
    d740:	f000 faf4 	bl	dd2c <am_hal_interrupt_master_set>
    d744:	2000      	movs	r0, #0
    d746:	e709      	b.n	d55c <am_hal_cachectrl_control+0x3c>
    d748:	2900      	cmp	r1, #0
    d74a:	d04d      	beq.n	d7e8 <am_hal_cachectrl_control+0x2c8>
    d74c:	680c      	ldr	r4, [r1, #0]
    d74e:	2c03      	cmp	r4, #3
    d750:	d84c      	bhi.n	d7ec <am_hal_cachectrl_control+0x2cc>
    d752:	f000 fae7 	bl	dd24 <am_hal_interrupt_master_disable>
    d756:	4603      	mov	r3, r0
    d758:	482d      	ldr	r0, [pc, #180]	; (d810 <am_hal_cachectrl_control+0x2f0>)
    d75a:	930b      	str	r3, [sp, #44]	; 0x2c
    d75c:	f000 f95a 	bl	da14 <am_hal_flash_load_ui32>
    d760:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d764:	ea40 3104 	orr.w	r1, r0, r4, lsl #12
    d768:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d76c:	4828      	ldr	r0, [pc, #160]	; (d810 <am_hal_cachectrl_control+0x2f0>)
    d76e:	f000 f955 	bl	da1c <am_hal_flash_store_ui32>
    d772:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d774:	f000 fada 	bl	dd2c <am_hal_interrupt_master_set>
    d778:	2000      	movs	r0, #0
    d77a:	e6ef      	b.n	d55c <am_hal_cachectrl_control+0x3c>
    d77c:	b3a1      	cbz	r1, d7e8 <am_hal_cachectrl_control+0x2c8>
    d77e:	680c      	ldr	r4, [r1, #0]
    d780:	2c07      	cmp	r4, #7
    d782:	d833      	bhi.n	d7ec <am_hal_cachectrl_control+0x2cc>
    d784:	f000 face 	bl	dd24 <am_hal_interrupt_master_disable>
    d788:	4603      	mov	r3, r0
    d78a:	4821      	ldr	r0, [pc, #132]	; (d810 <am_hal_cachectrl_control+0x2f0>)
    d78c:	930c      	str	r3, [sp, #48]	; 0x30
    d78e:	f000 f941 	bl	da14 <am_hal_flash_load_ui32>
    d792:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d796:	ea40 1104 	orr.w	r1, r0, r4, lsl #4
    d79a:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d79e:	481c      	ldr	r0, [pc, #112]	; (d810 <am_hal_cachectrl_control+0x2f0>)
    d7a0:	f000 f93c 	bl	da1c <am_hal_flash_store_ui32>
    d7a4:	980c      	ldr	r0, [sp, #48]	; 0x30
    d7a6:	f000 fac1 	bl	dd2c <am_hal_interrupt_master_set>
    d7aa:	2000      	movs	r0, #0
    d7ac:	e6d6      	b.n	d55c <am_hal_cachectrl_control+0x3c>
    d7ae:	b1d9      	cbz	r1, d7e8 <am_hal_cachectrl_control+0x2c8>
    d7b0:	680c      	ldr	r4, [r1, #0]
    d7b2:	2c0f      	cmp	r4, #15
    d7b4:	d81a      	bhi.n	d7ec <am_hal_cachectrl_control+0x2cc>
    d7b6:	f000 fab5 	bl	dd24 <am_hal_interrupt_master_disable>
    d7ba:	4603      	mov	r3, r0
    d7bc:	4814      	ldr	r0, [pc, #80]	; (d810 <am_hal_cachectrl_control+0x2f0>)
    d7be:	930d      	str	r3, [sp, #52]	; 0x34
    d7c0:	f000 f928 	bl	da14 <am_hal_flash_load_ui32>
    d7c4:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d7c8:	f020 000f 	bic.w	r0, r0, #15
    d7cc:	ea40 0104 	orr.w	r1, r0, r4
    d7d0:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d7d4:	480e      	ldr	r0, [pc, #56]	; (d810 <am_hal_cachectrl_control+0x2f0>)
    d7d6:	f000 f921 	bl	da1c <am_hal_flash_store_ui32>
    d7da:	980d      	ldr	r0, [sp, #52]	; 0x34
    d7dc:	f000 faa6 	bl	dd2c <am_hal_interrupt_master_set>
    d7e0:	2000      	movs	r0, #0
    d7e2:	e6bb      	b.n	d55c <am_hal_cachectrl_control+0x3c>
    d7e4:	2007      	movs	r0, #7
    d7e6:	e6b9      	b.n	d55c <am_hal_cachectrl_control+0x3c>
    d7e8:	2006      	movs	r0, #6
    d7ea:	e6b7      	b.n	d55c <am_hal_cachectrl_control+0x3c>
    d7ec:	2001      	movs	r0, #1
    d7ee:	e6b5      	b.n	d55c <am_hal_cachectrl_control+0x3c>
    d7f0:	2c01      	cmp	r4, #1
    d7f2:	d1f9      	bne.n	d7e8 <am_hal_cachectrl_control+0x2c8>
    d7f4:	4c04      	ldr	r4, [pc, #16]	; (d808 <am_hal_cachectrl_control+0x2e8>)
    d7f6:	7849      	ldrb	r1, [r1, #1]
    d7f8:	61a2      	str	r2, [r4, #24]
    d7fa:	61e3      	str	r3, [r4, #28]
    d7fc:	6823      	ldr	r3, [r4, #0]
    d7fe:	f361 03c3 	bfi	r3, r1, #3, #1
    d802:	6023      	str	r3, [r4, #0]
    d804:	e6aa      	b.n	d55c <am_hal_cachectrl_control+0x3c>
    d806:	bf00      	nop
    d808:	40018000 	.word	0x40018000
    d80c:	f800000f 	.word	0xf800000f
    d810:	40018004 	.word	0x40018004

0000d814 <am_hal_clkgen_control>:
    d814:	4b49      	ldr	r3, [pc, #292]	; (d93c <am_hal_clkgen_control+0x128>)
    d816:	681a      	ldr	r2, [r3, #0]
    d818:	b912      	cbnz	r2, d820 <am_hal_clkgen_control+0xc>
    d81a:	4a49      	ldr	r2, [pc, #292]	; (d940 <am_hal_clkgen_control+0x12c>)
    d81c:	6812      	ldr	r2, [r2, #0]
    d81e:	601a      	str	r2, [r3, #0]
    d820:	2809      	cmp	r0, #9
    d822:	f200 8089 	bhi.w	d938 <am_hal_clkgen_control+0x124>
    d826:	e8df f000 	tbb	[pc, r0]
    d82a:	160d      	.short	0x160d
    d82c:	423a261e 	.word	0x423a261e
    d830:	055c544c 	.word	0x055c544c
    d834:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d838:	2000      	movs	r0, #0
    d83a:	6a1a      	ldr	r2, [r3, #32]
    d83c:	f36f 0200 	bfc	r2, #0, #1
    d840:	621a      	str	r2, [r3, #32]
    d842:	4770      	bx	lr
    d844:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d848:	2200      	movs	r2, #0
    d84a:	2147      	movs	r1, #71	; 0x47
    d84c:	6159      	str	r1, [r3, #20]
    d84e:	4610      	mov	r0, r2
    d850:	619a      	str	r2, [r3, #24]
    d852:	615a      	str	r2, [r3, #20]
    d854:	4770      	bx	lr
    d856:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d85a:	2000      	movs	r0, #0
    d85c:	899a      	ldrh	r2, [r3, #12]
    d85e:	f36f 0200 	bfc	r2, #0, #1
    d862:	819a      	strh	r2, [r3, #12]
    d864:	4770      	bx	lr
    d866:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d86a:	2000      	movs	r0, #0
    d86c:	899a      	ldrh	r2, [r3, #12]
    d86e:	f36f 0241 	bfc	r2, #1, #1
    d872:	819a      	strh	r2, [r3, #12]
    d874:	4770      	bx	lr
    d876:	4a33      	ldr	r2, [pc, #204]	; (d944 <am_hal_clkgen_control+0x130>)
    d878:	68d3      	ldr	r3, [r2, #12]
    d87a:	b2db      	uxtb	r3, r3
    d87c:	2b21      	cmp	r3, #33	; 0x21
    d87e:	d106      	bne.n	d88e <am_hal_clkgen_control+0x7a>
    d880:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    d884:	2101      	movs	r1, #1
    d886:	f361 2309 	bfi	r3, r1, #8, #2
    d88a:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    d88e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d892:	2000      	movs	r0, #0
    d894:	8993      	ldrh	r3, [r2, #12]
    d896:	f043 0301 	orr.w	r3, r3, #1
    d89a:	8193      	strh	r3, [r2, #12]
    d89c:	4770      	bx	lr
    d89e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d8a2:	2000      	movs	r0, #0
    d8a4:	8993      	ldrh	r3, [r2, #12]
    d8a6:	f043 0302 	orr.w	r3, r3, #2
    d8aa:	8193      	strh	r3, [r2, #12]
    d8ac:	4770      	bx	lr
    d8ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d8b2:	2200      	movs	r2, #0
    d8b4:	2047      	movs	r0, #71	; 0x47
    d8b6:	2101      	movs	r1, #1
    d8b8:	6158      	str	r0, [r3, #20]
    d8ba:	6199      	str	r1, [r3, #24]
    d8bc:	4610      	mov	r0, r2
    d8be:	615a      	str	r2, [r3, #20]
    d8c0:	4770      	bx	lr
    d8c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d8c6:	2000      	movs	r0, #0
    d8c8:	899a      	ldrh	r2, [r3, #12]
    d8ca:	f36f 12c7 	bfc	r2, #7, #1
    d8ce:	819a      	strh	r2, [r3, #12]
    d8d0:	4770      	bx	lr
    d8d2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d8d6:	2000      	movs	r0, #0
    d8d8:	8993      	ldrh	r3, [r2, #12]
    d8da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d8de:	8193      	strh	r3, [r2, #12]
    d8e0:	4770      	bx	lr
    d8e2:	4a18      	ldr	r2, [pc, #96]	; (d944 <am_hal_clkgen_control+0x130>)
    d8e4:	68d3      	ldr	r3, [r2, #12]
    d8e6:	b2db      	uxtb	r3, r3
    d8e8:	2b21      	cmp	r3, #33	; 0x21
    d8ea:	d00a      	beq.n	d902 <am_hal_clkgen_control+0xee>
    d8ec:	b139      	cbz	r1, d8fe <am_hal_clkgen_control+0xea>
    d8ee:	680b      	ldr	r3, [r1, #0]
    d8f0:	f043 0301 	orr.w	r3, r3, #1
    d8f4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d8f8:	2000      	movs	r0, #0
    d8fa:	6213      	str	r3, [r2, #32]
    d8fc:	4770      	bx	lr
    d8fe:	4b12      	ldr	r3, [pc, #72]	; (d948 <am_hal_clkgen_control+0x134>)
    d900:	e7f8      	b.n	d8f4 <am_hal_clkgen_control+0xe0>
    d902:	b500      	push	{lr}
    d904:	b083      	sub	sp, #12
    d906:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    d90a:	9101      	str	r1, [sp, #4]
    d90c:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    d910:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    d914:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    d918:	f000 f836 	bl	d988 <am_hal_flash_delay>
    d91c:	9901      	ldr	r1, [sp, #4]
    d91e:	b149      	cbz	r1, d934 <am_hal_clkgen_control+0x120>
    d920:	680b      	ldr	r3, [r1, #0]
    d922:	f043 0301 	orr.w	r3, r3, #1
    d926:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d92a:	2000      	movs	r0, #0
    d92c:	6213      	str	r3, [r2, #32]
    d92e:	b003      	add	sp, #12
    d930:	f85d fb04 	ldr.w	pc, [sp], #4
    d934:	4b04      	ldr	r3, [pc, #16]	; (d948 <am_hal_clkgen_control+0x134>)
    d936:	e7f6      	b.n	d926 <am_hal_clkgen_control+0x112>
    d938:	2006      	movs	r0, #6
    d93a:	4770      	bx	lr
    d93c:	10001148 	.word	0x10001148
    d940:	4ffff000 	.word	0x4ffff000
    d944:	40020000 	.word	0x40020000
    d948:	0025b801 	.word	0x0025b801

0000d94c <am_hal_clkgen_status_get>:
    d94c:	b1b0      	cbz	r0, d97c <am_hal_clkgen_status_get+0x30>
    d94e:	b410      	push	{r4}
    d950:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    d954:	4603      	mov	r3, r0
    d956:	698c      	ldr	r4, [r1, #24]
    d958:	4809      	ldr	r0, [pc, #36]	; (d980 <am_hal_clkgen_status_get+0x34>)
    d95a:	4a0a      	ldr	r2, [pc, #40]	; (d984 <am_hal_clkgen_status_get+0x38>)
    d95c:	f014 0f01 	tst.w	r4, #1
    d960:	bf08      	it	eq
    d962:	4602      	moveq	r2, r0
    d964:	601a      	str	r2, [r3, #0]
    d966:	69ca      	ldr	r2, [r1, #28]
    d968:	f85d 4b04 	ldr.w	r4, [sp], #4
    d96c:	f002 0101 	and.w	r1, r2, #1
    d970:	f3c2 0240 	ubfx	r2, r2, #1, #1
    d974:	2000      	movs	r0, #0
    d976:	6059      	str	r1, [r3, #4]
    d978:	721a      	strb	r2, [r3, #8]
    d97a:	4770      	bx	lr
    d97c:	2006      	movs	r0, #6
    d97e:	4770      	bx	lr
    d980:	02dc6c00 	.word	0x02dc6c00
    d984:	016e3600 	.word	0x016e3600

0000d988 <am_hal_flash_delay>:
    d988:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d98c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    d98e:	075b      	lsls	r3, r3, #29
    d990:	bf46      	itte	mi
    d992:	0040      	lslmi	r0, r0, #1
    d994:	230e      	movmi	r3, #14
    d996:	230b      	movpl	r3, #11
    d998:	4298      	cmp	r0, r3
    d99a:	d902      	bls.n	d9a2 <am_hal_flash_delay+0x1a>
    d99c:	4a01      	ldr	r2, [pc, #4]	; (d9a4 <am_hal_flash_delay+0x1c>)
    d99e:	1ac0      	subs	r0, r0, r3
    d9a0:	4710      	bx	r2
    d9a2:	4770      	bx	lr
    d9a4:	0800009d 	.word	0x0800009d

0000d9a8 <am_hal_flash_delay_status_check>:
    d9a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d9ac:	f89d c020 	ldrb.w	ip, [sp, #32]
    d9b0:	f8df 805c 	ldr.w	r8, [pc, #92]	; da10 <am_hal_flash_delay_status_check+0x68>
    d9b4:	4604      	mov	r4, r0
    d9b6:	460d      	mov	r5, r1
    d9b8:	4616      	mov	r6, r2
    d9ba:	461f      	mov	r7, r3
    d9bc:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    d9c0:	f1bc 0f00 	cmp.w	ip, #0
    d9c4:	d00a      	beq.n	d9dc <am_hal_flash_delay_status_check+0x34>
    d9c6:	e01a      	b.n	d9fe <am_hal_flash_delay_status_check+0x56>
    d9c8:	b1f4      	cbz	r4, da08 <am_hal_flash_delay_status_check+0x60>
    d9ca:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    d9ce:	f013 0f04 	tst.w	r3, #4
    d9d2:	bf0c      	ite	eq
    d9d4:	2005      	moveq	r0, #5
    d9d6:	2012      	movne	r0, #18
    d9d8:	3c01      	subs	r4, #1
    d9da:	47c0      	blx	r8
    d9dc:	6828      	ldr	r0, [r5, #0]
    d9de:	4030      	ands	r0, r6
    d9e0:	42b8      	cmp	r0, r7
    d9e2:	d0f1      	beq.n	d9c8 <am_hal_flash_delay_status_check+0x20>
    d9e4:	2000      	movs	r0, #0
    d9e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d9ea:	b16c      	cbz	r4, da08 <am_hal_flash_delay_status_check+0x60>
    d9ec:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    d9f0:	f013 0f04 	tst.w	r3, #4
    d9f4:	bf0c      	ite	eq
    d9f6:	2005      	moveq	r0, #5
    d9f8:	2012      	movne	r0, #18
    d9fa:	3c01      	subs	r4, #1
    d9fc:	47c0      	blx	r8
    d9fe:	6828      	ldr	r0, [r5, #0]
    da00:	4030      	ands	r0, r6
    da02:	42b8      	cmp	r0, r7
    da04:	d1f1      	bne.n	d9ea <am_hal_flash_delay_status_check+0x42>
    da06:	e7ed      	b.n	d9e4 <am_hal_flash_delay_status_check+0x3c>
    da08:	2004      	movs	r0, #4
    da0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    da0e:	bf00      	nop
    da10:	0800009d 	.word	0x0800009d

0000da14 <am_hal_flash_load_ui32>:
    da14:	4b00      	ldr	r3, [pc, #0]	; (da18 <am_hal_flash_load_ui32+0x4>)
    da16:	4718      	bx	r3
    da18:	08000075 	.word	0x08000075

0000da1c <am_hal_flash_store_ui32>:
    da1c:	4b01      	ldr	r3, [pc, #4]	; (da24 <am_hal_flash_store_ui32+0x8>)
    da1e:	f043 0301 	orr.w	r3, r3, #1
    da22:	4718      	bx	r3
    da24:	10001028 	.word	0x10001028

0000da28 <am_hal_gpio_pinconfig>:
    da28:	2831      	cmp	r0, #49	; 0x31
    da2a:	f200 80c3 	bhi.w	dbb4 <am_hal_gpio_pinconfig+0x18c>
    da2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    da32:	4604      	mov	r4, r0
    da34:	f011 07e0 	ands.w	r7, r1, #224	; 0xe0
    da38:	f001 0007 	and.w	r0, r1, #7
    da3c:	b085      	sub	sp, #20
    da3e:	f3c1 03c1 	ubfx	r3, r1, #3, #2
    da42:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    da46:	d00f      	beq.n	da68 <am_hal_gpio_pinconfig+0x40>
    da48:	f3c1 1642 	ubfx	r6, r1, #5, #3
    da4c:	1db5      	adds	r5, r6, #6
    da4e:	f005 0507 	and.w	r5, r5, #7
    da52:	2d03      	cmp	r5, #3
    da54:	f042 0201 	orr.w	r2, r2, #1
    da58:	f240 80ae 	bls.w	dbb8 <am_hal_gpio_pinconfig+0x190>
    da5c:	2fc0      	cmp	r7, #192	; 0xc0
    da5e:	f000 80e1 	beq.w	dc24 <am_hal_gpio_pinconfig+0x1fc>
    da62:	2f20      	cmp	r7, #32
    da64:	f000 80e3 	beq.w	dc2e <am_hal_gpio_pinconfig+0x206>
    da68:	b163      	cbz	r3, da84 <am_hal_gpio_pinconfig+0x5c>
    da6a:	2b01      	cmp	r3, #1
    da6c:	f000 80d3 	beq.w	dc16 <am_hal_gpio_pinconfig+0x1ee>
    da70:	2b02      	cmp	r3, #2
    da72:	f040 80c9 	bne.w	dc08 <am_hal_gpio_pinconfig+0x1e0>
    da76:	4b79      	ldr	r3, [pc, #484]	; (dc5c <am_hal_gpio_pinconfig+0x234>)
    da78:	5d1b      	ldrb	r3, [r3, r4]
    da7a:	075b      	lsls	r3, r3, #29
    da7c:	f140 80c4 	bpl.w	dc08 <am_hal_gpio_pinconfig+0x1e0>
    da80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    da84:	4b76      	ldr	r3, [pc, #472]	; (dc60 <am_hal_gpio_pinconfig+0x238>)
    da86:	5d1b      	ldrb	r3, [r3, r4]
    da88:	4103      	asrs	r3, r0
    da8a:	005b      	lsls	r3, r3, #1
    da8c:	f003 0302 	and.w	r3, r3, #2
    da90:	4313      	orrs	r3, r2
    da92:	4a74      	ldr	r2, [pc, #464]	; (dc64 <am_hal_gpio_pinconfig+0x23c>)
    da94:	5d12      	ldrb	r2, [r2, r4]
    da96:	4282      	cmp	r2, r0
    da98:	f000 8099 	beq.w	dbce <am_hal_gpio_pinconfig+0x1a6>
    da9c:	f3c1 3000 	ubfx	r0, r1, #12, #1
    daa0:	f3c1 2581 	ubfx	r5, r1, #10, #2
    daa4:	f3c1 3280 	ubfx	r2, r1, #14, #1
    daa8:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    daac:	0a88      	lsrs	r0, r1, #10
    daae:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    dab2:	f000 0008 	and.w	r0, r0, #8
    dab6:	4302      	orrs	r2, r0
    dab8:	f3c1 2007 	ubfx	r0, r1, #8, #8
    dabc:	f000 050c 	and.w	r5, r0, #12
    dac0:	2d04      	cmp	r5, #4
    dac2:	f000 80a5 	beq.w	dc10 <am_hal_gpio_pinconfig+0x1e8>
    dac6:	4d68      	ldr	r5, [pc, #416]	; (dc68 <am_hal_gpio_pinconfig+0x240>)
    dac8:	682d      	ldr	r5, [r5, #0]
    daca:	eba1 0805 	sub.w	r8, r1, r5
    dace:	fab8 f888 	clz	r8, r8
    dad2:	ea4f 1858 	mov.w	r8, r8, lsr #5
    dad6:	f010 0f60 	tst.w	r0, #96	; 0x60
    dada:	bf04      	itt	eq
    dadc:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
    dae0:	f360 0200 	bfieq	r2, r0, #0, #1
    dae4:	00a0      	lsls	r0, r4, #2
    dae6:	f3c1 2101 	ubfx	r1, r1, #8, #2
    daea:	2902      	cmp	r1, #2
    daec:	d05c      	beq.n	dba8 <am_hal_gpio_pinconfig+0x180>
    daee:	2903      	cmp	r1, #3
    daf0:	d058      	beq.n	dba4 <am_hal_gpio_pinconfig+0x17c>
    daf2:	2901      	cmp	r1, #1
    daf4:	ea4f 01c4 	mov.w	r1, r4, lsl #3
    daf8:	bf08      	it	eq
    dafa:	f043 0304 	orreq.w	r3, r3, #4
    dafe:	f001 0118 	and.w	r1, r1, #24
    db02:	2700      	movs	r7, #0
    db04:	f000 001c 	and.w	r0, r0, #28
    db08:	fa02 f600 	lsl.w	r6, r2, r0
    db0c:	220f      	movs	r2, #15
    db0e:	4082      	lsls	r2, r0
    db10:	43d2      	mvns	r2, r2
    db12:	f04f 09ff 	mov.w	r9, #255	; 0xff
    db16:	fa03 f501 	lsl.w	r5, r3, r1
    db1a:	fa09 f901 	lsl.w	r9, r9, r1
    db1e:	9201      	str	r2, [sp, #4]
    db20:	f000 f900 	bl	dd24 <am_hal_interrupt_master_disable>
    db24:	f024 0a03 	bic.w	sl, r4, #3
    db28:	ea4f 0b54 	mov.w	fp, r4, lsr #1
    db2c:	f10a 4c80 	add.w	ip, sl, #1073741824	; 0x40000000
    db30:	4b4e      	ldr	r3, [pc, #312]	; (dc6c <am_hal_gpio_pinconfig+0x244>)
    db32:	494f      	ldr	r1, [pc, #316]	; (dc70 <am_hal_gpio_pinconfig+0x248>)
    db34:	9a01      	ldr	r2, [sp, #4]
    db36:	9003      	str	r0, [sp, #12]
    db38:	ea6f 0909 	mvn.w	r9, r9
    db3c:	f02b 0b03 	bic.w	fp, fp, #3
    db40:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
    db44:	f1b8 0f00 	cmp.w	r8, #0
    db48:	d00b      	beq.n	db62 <am_hal_gpio_pinconfig+0x13a>
    db4a:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
    db4e:	f004 081f 	and.w	r8, r4, #31
    db52:	4848      	ldr	r0, [pc, #288]	; (dc74 <am_hal_gpio_pinconfig+0x24c>)
    db54:	f00e 0e04 	and.w	lr, lr, #4
    db58:	2401      	movs	r4, #1
    db5a:	fa04 f408 	lsl.w	r4, r4, r8
    db5e:	f84e 4000 	str.w	r4, [lr, r0]
    db62:	4845      	ldr	r0, [pc, #276]	; (dc78 <am_hal_gpio_pinconfig+0x250>)
    db64:	2473      	movs	r4, #115	; 0x73
    db66:	6604      	str	r4, [r0, #96]	; 0x60
    db68:	f8dc 4000 	ldr.w	r4, [ip]
    db6c:	ea04 0409 	and.w	r4, r4, r9
    db70:	4325      	orrs	r5, r4
    db72:	f8cc 5000 	str.w	r5, [ip]
    db76:	f85b 4003 	ldr.w	r4, [fp, r3]
    db7a:	4022      	ands	r2, r4
    db7c:	4332      	orrs	r2, r6
    db7e:	f84b 2003 	str.w	r2, [fp, r3]
    db82:	f85a 3001 	ldr.w	r3, [sl, r1]
    db86:	ea03 0909 	and.w	r9, r3, r9
    db8a:	2400      	movs	r4, #0
    db8c:	ea49 0707 	orr.w	r7, r9, r7
    db90:	f84a 7001 	str.w	r7, [sl, r1]
    db94:	6604      	str	r4, [r0, #96]	; 0x60
    db96:	9803      	ldr	r0, [sp, #12]
    db98:	f000 f8c8 	bl	dd2c <am_hal_interrupt_master_set>
    db9c:	4620      	mov	r0, r4
    db9e:	b005      	add	sp, #20
    dba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dba4:	f043 0304 	orr.w	r3, r3, #4
    dba8:	00e1      	lsls	r1, r4, #3
    dbaa:	f001 0118 	and.w	r1, r1, #24
    dbae:	2701      	movs	r7, #1
    dbb0:	408f      	lsls	r7, r1
    dbb2:	e7a7      	b.n	db04 <am_hal_gpio_pinconfig+0xdc>
    dbb4:	2006      	movs	r0, #6
    dbb6:	4770      	bx	lr
    dbb8:	4d28      	ldr	r5, [pc, #160]	; (dc5c <am_hal_gpio_pinconfig+0x234>)
    dbba:	5d2d      	ldrb	r5, [r5, r4]
    dbbc:	3e02      	subs	r6, #2
    dbbe:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    dbc2:	07ee      	lsls	r6, r5, #31
    dbc4:	d536      	bpl.n	dc34 <am_hal_gpio_pinconfig+0x20c>
    dbc6:	2b00      	cmp	r3, #0
    dbc8:	f43f af5c 	beq.w	da84 <am_hal_gpio_pinconfig+0x5c>
    dbcc:	e74d      	b.n	da6a <am_hal_gpio_pinconfig+0x42>
    dbce:	f3c1 4202 	ubfx	r2, r1, #16, #3
    dbd2:	2a07      	cmp	r2, #7
    dbd4:	d030      	beq.n	dc38 <am_hal_gpio_pinconfig+0x210>
    dbd6:	4d29      	ldr	r5, [pc, #164]	; (dc7c <am_hal_gpio_pinconfig+0x254>)
    dbd8:	f3c1 40c1 	ubfx	r0, r1, #19, #2
    dbdc:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    dbe0:	f815 0024 	ldrb.w	r0, [r5, r4, lsl #2]
    dbe4:	4290      	cmp	r0, r2
    dbe6:	d029      	beq.n	dc3c <am_hal_gpio_pinconfig+0x214>
    dbe8:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    dbec:	00a0      	lsls	r0, r4, #2
    dbee:	786e      	ldrb	r6, [r5, #1]
    dbf0:	4296      	cmp	r6, r2
    dbf2:	d02d      	beq.n	dc50 <am_hal_gpio_pinconfig+0x228>
    dbf4:	78ae      	ldrb	r6, [r5, #2]
    dbf6:	4296      	cmp	r6, r2
    dbf8:	d02c      	beq.n	dc54 <am_hal_gpio_pinconfig+0x22c>
    dbfa:	78ed      	ldrb	r5, [r5, #3]
    dbfc:	4295      	cmp	r5, r2
    dbfe:	d02b      	beq.n	dc58 <am_hal_gpio_pinconfig+0x230>
    dc00:	481f      	ldr	r0, [pc, #124]	; (dc80 <am_hal_gpio_pinconfig+0x258>)
    dc02:	b005      	add	sp, #20
    dc04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dc08:	481e      	ldr	r0, [pc, #120]	; (dc84 <am_hal_gpio_pinconfig+0x25c>)
    dc0a:	b005      	add	sp, #20
    dc0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dc10:	f04f 0801 	mov.w	r8, #1
    dc14:	e75f      	b.n	dad6 <am_hal_gpio_pinconfig+0xae>
    dc16:	4b11      	ldr	r3, [pc, #68]	; (dc5c <am_hal_gpio_pinconfig+0x234>)
    dc18:	5d1b      	ldrb	r3, [r3, r4]
    dc1a:	079d      	lsls	r5, r3, #30
    dc1c:	d5f4      	bpl.n	dc08 <am_hal_gpio_pinconfig+0x1e0>
    dc1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    dc22:	e72f      	b.n	da84 <am_hal_gpio_pinconfig+0x5c>
    dc24:	2c14      	cmp	r4, #20
    dc26:	f43f af1f 	beq.w	da68 <am_hal_gpio_pinconfig+0x40>
    dc2a:	4817      	ldr	r0, [pc, #92]	; (dc88 <am_hal_gpio_pinconfig+0x260>)
    dc2c:	e7b7      	b.n	db9e <am_hal_gpio_pinconfig+0x176>
    dc2e:	2c14      	cmp	r4, #20
    dc30:	f47f af1a 	bne.w	da68 <am_hal_gpio_pinconfig+0x40>
    dc34:	4815      	ldr	r0, [pc, #84]	; (dc8c <am_hal_gpio_pinconfig+0x264>)
    dc36:	e7b2      	b.n	db9e <am_hal_gpio_pinconfig+0x176>
    dc38:	4815      	ldr	r0, [pc, #84]	; (dc90 <am_hal_gpio_pinconfig+0x268>)
    dc3a:	e7b0      	b.n	db9e <am_hal_gpio_pinconfig+0x176>
    dc3c:	2200      	movs	r2, #0
    dc3e:	00a0      	lsls	r0, r4, #2
    dc40:	0052      	lsls	r2, r2, #1
    dc42:	f3c1 5540 	ubfx	r5, r1, #21, #1
    dc46:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
    dc4a:	f04f 0800 	mov.w	r8, #0
    dc4e:	e74a      	b.n	dae6 <am_hal_gpio_pinconfig+0xbe>
    dc50:	2201      	movs	r2, #1
    dc52:	e7f5      	b.n	dc40 <am_hal_gpio_pinconfig+0x218>
    dc54:	2202      	movs	r2, #2
    dc56:	e7f3      	b.n	dc40 <am_hal_gpio_pinconfig+0x218>
    dc58:	2203      	movs	r2, #3
    dc5a:	e7f1      	b.n	dc40 <am_hal_gpio_pinconfig+0x218>
    dc5c:	0000e5f4 	.word	0x0000e5f4
    dc60:	0000e628 	.word	0x0000e628
    dc64:	0000e724 	.word	0x0000e724
    dc68:	0000e5e8 	.word	0x0000e5e8
    dc6c:	40010040 	.word	0x40010040
    dc70:	400100e0 	.word	0x400100e0
    dc74:	400100b4 	.word	0x400100b4
    dc78:	40010000 	.word	0x40010000
    dc7c:	0000e65c 	.word	0x0000e65c
    dc80:	08000104 	.word	0x08000104
    dc84:	08000102 	.word	0x08000102
    dc88:	08000101 	.word	0x08000101
    dc8c:	08000100 	.word	0x08000100
    dc90:	08000103 	.word	0x08000103

0000dc94 <am_hal_gpio_state_write>:
    dc94:	2831      	cmp	r0, #49	; 0x31
    dc96:	d81a      	bhi.n	dcce <am_hal_gpio_state_write+0x3a>
    dc98:	b570      	push	{r4, r5, r6, lr}
    dc9a:	2905      	cmp	r1, #5
    dc9c:	b082      	sub	sp, #8
    dc9e:	460d      	mov	r5, r1
    dca0:	d812      	bhi.n	dcc8 <am_hal_gpio_state_write+0x34>
    dca2:	f000 031f 	and.w	r3, r0, #31
    dca6:	2201      	movs	r2, #1
    dca8:	08c0      	lsrs	r0, r0, #3
    dcaa:	fa02 f603 	lsl.w	r6, r2, r3
    dcae:	f000 0404 	and.w	r4, r0, #4
    dcb2:	f000 f837 	bl	dd24 <am_hal_interrupt_master_disable>
    dcb6:	3d01      	subs	r5, #1
    dcb8:	9001      	str	r0, [sp, #4]
    dcba:	2d04      	cmp	r5, #4
    dcbc:	d821      	bhi.n	dd02 <am_hal_gpio_state_write+0x6e>
    dcbe:	e8df f005 	tbb	[pc, r5]
    dcc2:	1512      	.short	0x1512
    dcc4:	1d1a      	.short	0x1d1a
    dcc6:	08          	.byte	0x08
    dcc7:	00          	.byte	0x00
    dcc8:	2006      	movs	r0, #6
    dcca:	b002      	add	sp, #8
    dccc:	bd70      	pop	{r4, r5, r6, pc}
    dcce:	2005      	movs	r0, #5
    dcd0:	4770      	bx	lr
    dcd2:	4a0d      	ldr	r2, [pc, #52]	; (dd08 <am_hal_gpio_state_write+0x74>)
    dcd4:	58a3      	ldr	r3, [r4, r2]
    dcd6:	4073      	eors	r3, r6
    dcd8:	50a3      	str	r3, [r4, r2]
    dcda:	9801      	ldr	r0, [sp, #4]
    dcdc:	f000 f826 	bl	dd2c <am_hal_interrupt_master_set>
    dce0:	2000      	movs	r0, #0
    dce2:	b002      	add	sp, #8
    dce4:	bd70      	pop	{r4, r5, r6, pc}
    dce6:	4b09      	ldr	r3, [pc, #36]	; (dd0c <am_hal_gpio_state_write+0x78>)
    dce8:	50e6      	str	r6, [r4, r3]
    dcea:	e7f6      	b.n	dcda <am_hal_gpio_state_write+0x46>
    dcec:	4a08      	ldr	r2, [pc, #32]	; (dd10 <am_hal_gpio_state_write+0x7c>)
    dcee:	58a3      	ldr	r3, [r4, r2]
    dcf0:	4073      	eors	r3, r6
    dcf2:	50a3      	str	r3, [r4, r2]
    dcf4:	e7f1      	b.n	dcda <am_hal_gpio_state_write+0x46>
    dcf6:	4b04      	ldr	r3, [pc, #16]	; (dd08 <am_hal_gpio_state_write+0x74>)
    dcf8:	50e6      	str	r6, [r4, r3]
    dcfa:	e7ee      	b.n	dcda <am_hal_gpio_state_write+0x46>
    dcfc:	4b05      	ldr	r3, [pc, #20]	; (dd14 <am_hal_gpio_state_write+0x80>)
    dcfe:	50e6      	str	r6, [r4, r3]
    dd00:	e7eb      	b.n	dcda <am_hal_gpio_state_write+0x46>
    dd02:	4b05      	ldr	r3, [pc, #20]	; (dd18 <am_hal_gpio_state_write+0x84>)
    dd04:	50e6      	str	r6, [r4, r3]
    dd06:	e7e8      	b.n	dcda <am_hal_gpio_state_write+0x46>
    dd08:	400100b4 	.word	0x400100b4
    dd0c:	40010090 	.word	0x40010090
    dd10:	40010088 	.word	0x40010088
    dd14:	400100a8 	.word	0x400100a8
    dd18:	40010098 	.word	0x40010098

0000dd1c <am_hal_interrupt_master_enable>:
    dd1c:	f3ef 8010 	mrs	r0, PRIMASK
    dd20:	b662      	cpsie	i
    dd22:	4770      	bx	lr

0000dd24 <am_hal_interrupt_master_disable>:
    dd24:	f3ef 8010 	mrs	r0, PRIMASK
    dd28:	b672      	cpsid	i
    dd2a:	4770      	bx	lr

0000dd2c <am_hal_interrupt_master_set>:
    dd2c:	f380 8810 	msr	PRIMASK, r0
    dd30:	4770      	bx	lr
    dd32:	bf00      	nop

0000dd34 <am_hal_itm_enable>:
    dd34:	4a0e      	ldr	r2, [pc, #56]	; (dd70 <am_hal_itm_enable+0x3c>)
    dd36:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    dd3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    dd3e:	b410      	push	{r4}
    dd40:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    dd44:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    dd48:	01db      	lsls	r3, r3, #7
    dd4a:	d5fb      	bpl.n	dd44 <am_hal_itm_enable+0x10>
    dd4c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    dd50:	4c08      	ldr	r4, [pc, #32]	; (dd74 <am_hal_itm_enable+0x40>)
    dd52:	4a09      	ldr	r2, [pc, #36]	; (dd78 <am_hal_itm_enable+0x44>)
    dd54:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    dd58:	200f      	movs	r0, #15
    dd5a:	f04f 31ff 	mov.w	r1, #4294967295
    dd5e:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    dd62:	f85d 4b04 	ldr.w	r4, [sp], #4
    dd66:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    dd6a:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    dd6e:	4770      	bx	lr
    dd70:	e000ed00 	.word	0xe000ed00
    dd74:	c5acce55 	.word	0xc5acce55
    dd78:	00150511 	.word	0x00150511

0000dd7c <am_hal_itm_disable>:
    dd7c:	4b27      	ldr	r3, [pc, #156]	; (de1c <am_hal_itm_disable+0xa0>)
    dd7e:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    dd82:	b510      	push	{r4, lr}
    dd84:	b9cb      	cbnz	r3, ddba <am_hal_itm_disable+0x3e>
    dd86:	4a26      	ldr	r2, [pc, #152]	; (de20 <am_hal_itm_disable+0xa4>)
    dd88:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    dd8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    dd90:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    dd94:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    dd98:	01d9      	lsls	r1, r3, #7
    dd9a:	d5fb      	bpl.n	dd94 <am_hal_itm_disable+0x18>
    dd9c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    dda0:	4c20      	ldr	r4, [pc, #128]	; (de24 <am_hal_itm_disable+0xa8>)
    dda2:	4a21      	ldr	r2, [pc, #132]	; (de28 <am_hal_itm_disable+0xac>)
    dda4:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    dda8:	200f      	movs	r0, #15
    ddaa:	f04f 31ff 	mov.w	r1, #4294967295
    ddae:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    ddb2:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    ddb6:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    ddba:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    ddbe:	f8d4 3e80 	ldr.w	r3, [r4, #3712]	; 0xe80
    ddc2:	021b      	lsls	r3, r3, #8
    ddc4:	d4fb      	bmi.n	ddbe <am_hal_itm_disable+0x42>
    ddc6:	f44f 7048 	mov.w	r0, #800	; 0x320
    ddca:	f7ff fddd 	bl	d988 <am_hal_flash_delay>
    ddce:	4b15      	ldr	r3, [pc, #84]	; (de24 <am_hal_itm_disable+0xa8>)
    ddd0:	4916      	ldr	r1, [pc, #88]	; (de2c <am_hal_itm_disable+0xb0>)
    ddd2:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
    ddd6:	2064      	movs	r0, #100	; 0x64
    ddd8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    dddc:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    dde0:	f023 0301 	bic.w	r3, r3, #1
    dde4:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
    dde8:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    ddec:	420b      	tst	r3, r1
    ddee:	d1fb      	bne.n	dde8 <am_hal_itm_disable+0x6c>
    ddf0:	3801      	subs	r0, #1
    ddf2:	d1f3      	bne.n	dddc <am_hal_itm_disable+0x60>
    ddf4:	4a0a      	ldr	r2, [pc, #40]	; (de20 <am_hal_itm_disable+0xa4>)
    ddf6:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    ddfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    ddfe:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    de02:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    de06:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    de0a:	d1fa      	bne.n	de02 <am_hal_itm_disable+0x86>
    de0c:	4a03      	ldr	r2, [pc, #12]	; (de1c <am_hal_itm_disable+0xa0>)
    de0e:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    de12:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
    de16:	2b00      	cmp	r3, #0
    de18:	d1fb      	bne.n	de12 <am_hal_itm_disable+0x96>
    de1a:	bd10      	pop	{r4, pc}
    de1c:	40020000 	.word	0x40020000
    de20:	e000ed00 	.word	0xe000ed00
    de24:	c5acce55 	.word	0xc5acce55
    de28:	00150511 	.word	0x00150511
    de2c:	00800001 	.word	0x00800001

0000de30 <am_hal_itm_print>:
    de30:	7803      	ldrb	r3, [r0, #0]
    de32:	b1a3      	cbz	r3, de5e <am_hal_itm_print+0x2e>
    de34:	4603      	mov	r3, r0
    de36:	f1c0 0c01 	rsb	ip, r0, #1
    de3a:	eb0c 0103 	add.w	r1, ip, r3
    de3e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    de42:	2a00      	cmp	r2, #0
    de44:	d1f9      	bne.n	de3a <am_hal_itm_print+0xa>
    de46:	4401      	add	r1, r0
    de48:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    de4c:	f810 cb01 	ldrb.w	ip, [r0], #1
    de50:	6813      	ldr	r3, [r2, #0]
    de52:	2b00      	cmp	r3, #0
    de54:	d0fc      	beq.n	de50 <am_hal_itm_print+0x20>
    de56:	4288      	cmp	r0, r1
    de58:	f882 c000 	strb.w	ip, [r2]
    de5c:	d1f6      	bne.n	de4c <am_hal_itm_print+0x1c>
    de5e:	4770      	bx	lr

0000de60 <am_hal_mcuctrl_info_get>:
    de60:	2900      	cmp	r1, #0
    de62:	f000 808f 	beq.w	df84 <am_hal_mcuctrl_info_get+0x124>
    de66:	2801      	cmp	r0, #1
    de68:	b430      	push	{r4, r5}
    de6a:	d006      	beq.n	de7a <am_hal_mcuctrl_info_get+0x1a>
    de6c:	2802      	cmp	r0, #2
    de6e:	d06d      	beq.n	df4c <am_hal_mcuctrl_info_get+0xec>
    de70:	2800      	cmp	r0, #0
    de72:	d055      	beq.n	df20 <am_hal_mcuctrl_info_get+0xc0>
    de74:	2006      	movs	r0, #6
    de76:	bc30      	pop	{r4, r5}
    de78:	4770      	bx	lr
    de7a:	4a43      	ldr	r2, [pc, #268]	; (df88 <am_hal_mcuctrl_info_get+0x128>)
    de7c:	4843      	ldr	r0, [pc, #268]	; (df8c <am_hal_mcuctrl_info_get+0x12c>)
    de7e:	6813      	ldr	r3, [r2, #0]
    de80:	600b      	str	r3, [r1, #0]
    de82:	6854      	ldr	r4, [r2, #4]
    de84:	604c      	str	r4, [r1, #4]
    de86:	6894      	ldr	r4, [r2, #8]
    de88:	608c      	str	r4, [r1, #8]
    de8a:	68d4      	ldr	r4, [r2, #12]
    de8c:	60cc      	str	r4, [r1, #12]
    de8e:	f3c3 5503 	ubfx	r5, r3, #20, #4
    de92:	6914      	ldr	r4, [r2, #16]
    de94:	610c      	str	r4, [r1, #16]
    de96:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    de9a:	4c3d      	ldr	r4, [pc, #244]	; (df90 <am_hal_mcuctrl_info_get+0x130>)
    de9c:	6950      	ldr	r0, [r2, #20]
    de9e:	6148      	str	r0, [r1, #20]
    dea0:	f003 0201 	and.w	r2, r3, #1
    dea4:	f3c3 4303 	ubfx	r3, r3, #16, #4
    dea8:	e9c1 2506 	strd	r2, r5, [r1, #24]
    deac:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    deb0:	4a38      	ldr	r2, [pc, #224]	; (df94 <am_hal_mcuctrl_info_get+0x134>)
    deb2:	620b      	str	r3, [r1, #32]
    deb4:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    deb8:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    debc:	b2db      	uxtb	r3, r3
    debe:	f000 000f 	and.w	r0, r0, #15
    dec2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    dec6:	624b      	str	r3, [r1, #36]	; 0x24
    dec8:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    decc:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
    ded0:	f3c3 1303 	ubfx	r3, r3, #4, #4
    ded4:	f000 000f 	and.w	r0, r0, #15
    ded8:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
    dedc:	628b      	str	r3, [r1, #40]	; 0x28
    dede:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    dee2:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
    dee6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    deea:	f3c0 1003 	ubfx	r0, r0, #4, #4
    deee:	4303      	orrs	r3, r0
    def0:	62cb      	str	r3, [r1, #44]	; 0x2c
    def2:	f8d2 40fc 	ldr.w	r4, [r2, #252]	; 0xfc
    def6:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    defa:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    defe:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    df02:	b2db      	uxtb	r3, r3
    df04:	041b      	lsls	r3, r3, #16
    df06:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    df0a:	fa5f fc82 	uxtb.w	ip, r2
    df0e:	ea43 030c 	orr.w	r3, r3, ip
    df12:	b2c2      	uxtb	r2, r0
    df14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    df18:	630b      	str	r3, [r1, #48]	; 0x30
    df1a:	2000      	movs	r0, #0
    df1c:	bc30      	pop	{r4, r5}
    df1e:	4770      	bx	lr
    df20:	4a19      	ldr	r2, [pc, #100]	; (df88 <am_hal_mcuctrl_info_get+0x128>)
    df22:	6993      	ldr	r3, [r2, #24]
    df24:	f3c3 1480 	ubfx	r4, r3, #6, #1
    df28:	700c      	strb	r4, [r1, #0]
    df2a:	f8d2 41a0 	ldr.w	r4, [r2, #416]	; 0x1a0
    df2e:	f3c3 0380 	ubfx	r3, r3, #2, #1
    df32:	704b      	strb	r3, [r1, #1]
    df34:	f3c4 6381 	ubfx	r3, r4, #26, #2
    df38:	710b      	strb	r3, [r1, #4]
    df3a:	6953      	ldr	r3, [r2, #20]
    df3c:	f3c3 0240 	ubfx	r2, r3, #1, #1
    df40:	f003 0301 	and.w	r3, r3, #1
    df44:	bc30      	pop	{r4, r5}
    df46:	708a      	strb	r2, [r1, #2]
    df48:	70cb      	strb	r3, [r1, #3]
    df4a:	4770      	bx	lr
    df4c:	4a0e      	ldr	r2, [pc, #56]	; (df88 <am_hal_mcuctrl_info_get+0x128>)
    df4e:	6848      	ldr	r0, [r1, #4]
    df50:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    df54:	f003 0401 	and.w	r4, r3, #1
    df58:	700c      	strb	r4, [r1, #0]
    df5a:	f3c3 0440 	ubfx	r4, r3, #1, #1
    df5e:	720c      	strb	r4, [r1, #8]
    df60:	f8d2 41c4 	ldr.w	r4, [r2, #452]	; 0x1c4
    df64:	60cc      	str	r4, [r1, #12]
    df66:	f8d2 41c0 	ldr.w	r4, [r2, #448]	; 0x1c0
    df6a:	4320      	orrs	r0, r4
    df6c:	f3c3 0380 	ubfx	r3, r3, #2, #1
    df70:	6048      	str	r0, [r1, #4]
    df72:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    df76:	740b      	strb	r3, [r1, #16]
    df78:	694b      	ldr	r3, [r1, #20]
    df7a:	4313      	orrs	r3, r2
    df7c:	2000      	movs	r0, #0
    df7e:	bc30      	pop	{r4, r5}
    df80:	614b      	str	r3, [r1, #20]
    df82:	4770      	bx	lr
    df84:	2006      	movs	r0, #6
    df86:	4770      	bx	lr
    df88:	40020000 	.word	0x40020000
    df8c:	0000e758 	.word	0x0000e758
    df90:	0000e798 	.word	0x0000e798
    df94:	f0000f00 	.word	0xf0000f00

0000df98 <am_hal_pwrctrl_periph_enable>:
    df98:	b570      	push	{r4, r5, r6, lr}
    df9a:	b082      	sub	sp, #8
    df9c:	4604      	mov	r4, r0
    df9e:	f7ff fec1 	bl	dd24 <am_hal_interrupt_master_disable>
    dfa2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    dfa6:	4e0f      	ldr	r6, [pc, #60]	; (dfe4 <am_hal_pwrctrl_periph_enable+0x4c>)
    dfa8:	4d0f      	ldr	r5, [pc, #60]	; (dfe8 <am_hal_pwrctrl_periph_enable+0x50>)
    dfaa:	9001      	str	r0, [sp, #4]
    dfac:	00a4      	lsls	r4, r4, #2
    dfae:	68b3      	ldr	r3, [r6, #8]
    dfb0:	592a      	ldr	r2, [r5, r4]
    dfb2:	4313      	orrs	r3, r2
    dfb4:	60b3      	str	r3, [r6, #8]
    dfb6:	9801      	ldr	r0, [sp, #4]
    dfb8:	442c      	add	r4, r5
    dfba:	f7ff feb7 	bl	dd2c <am_hal_interrupt_master_set>
    dfbe:	20a0      	movs	r0, #160	; 0xa0
    dfc0:	f7ff fce2 	bl	d988 <am_hal_flash_delay>
    dfc4:	69b3      	ldr	r3, [r6, #24]
    dfc6:	6864      	ldr	r4, [r4, #4]
    dfc8:	4223      	tst	r3, r4
    dfca:	d103      	bne.n	dfd4 <am_hal_pwrctrl_periph_enable+0x3c>
    dfcc:	20a0      	movs	r0, #160	; 0xa0
    dfce:	f7ff fcdb 	bl	d988 <am_hal_flash_delay>
    dfd2:	69b3      	ldr	r3, [r6, #24]
    dfd4:	4b03      	ldr	r3, [pc, #12]	; (dfe4 <am_hal_pwrctrl_periph_enable+0x4c>)
    dfd6:	699b      	ldr	r3, [r3, #24]
    dfd8:	4223      	tst	r3, r4
    dfda:	bf0c      	ite	eq
    dfdc:	2001      	moveq	r0, #1
    dfde:	2000      	movne	r0, #0
    dfe0:	b002      	add	sp, #8
    dfe2:	bd70      	pop	{r4, r5, r6, pc}
    dfe4:	40021000 	.word	0x40021000
    dfe8:	0000e7d8 	.word	0x0000e7d8

0000dfec <am_hal_pwrctrl_periph_disable>:
    dfec:	b570      	push	{r4, r5, r6, lr}
    dfee:	b082      	sub	sp, #8
    dff0:	4604      	mov	r4, r0
    dff2:	f7ff fe97 	bl	dd24 <am_hal_interrupt_master_disable>
    dff6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    dffa:	4e10      	ldr	r6, [pc, #64]	; (e03c <am_hal_pwrctrl_periph_disable+0x50>)
    dffc:	4d10      	ldr	r5, [pc, #64]	; (e040 <am_hal_pwrctrl_periph_disable+0x54>)
    dffe:	9001      	str	r0, [sp, #4]
    e000:	00a4      	lsls	r4, r4, #2
    e002:	68b3      	ldr	r3, [r6, #8]
    e004:	592a      	ldr	r2, [r5, r4]
    e006:	ea23 0302 	bic.w	r3, r3, r2
    e00a:	60b3      	str	r3, [r6, #8]
    e00c:	9801      	ldr	r0, [sp, #4]
    e00e:	442c      	add	r4, r5
    e010:	f7ff fe8c 	bl	dd2c <am_hal_interrupt_master_set>
    e014:	20a0      	movs	r0, #160	; 0xa0
    e016:	f7ff fcb7 	bl	d988 <am_hal_flash_delay>
    e01a:	69b3      	ldr	r3, [r6, #24]
    e01c:	6864      	ldr	r4, [r4, #4]
    e01e:	4223      	tst	r3, r4
    e020:	d003      	beq.n	e02a <am_hal_pwrctrl_periph_disable+0x3e>
    e022:	20a0      	movs	r0, #160	; 0xa0
    e024:	f7ff fcb0 	bl	d988 <am_hal_flash_delay>
    e028:	69b3      	ldr	r3, [r6, #24]
    e02a:	4b04      	ldr	r3, [pc, #16]	; (e03c <am_hal_pwrctrl_periph_disable+0x50>)
    e02c:	699b      	ldr	r3, [r3, #24]
    e02e:	4223      	tst	r3, r4
    e030:	bf14      	ite	ne
    e032:	2001      	movne	r0, #1
    e034:	2000      	moveq	r0, #0
    e036:	b002      	add	sp, #8
    e038:	bd70      	pop	{r4, r5, r6, pc}
    e03a:	bf00      	nop
    e03c:	40021000 	.word	0x40021000
    e040:	0000e7d8 	.word	0x0000e7d8

0000e044 <am_hal_pwrctrl_low_power_init>:
    e044:	b530      	push	{r4, r5, lr}
    e046:	4b69      	ldr	r3, [pc, #420]	; (e1ec <am_hal_pwrctrl_low_power_init+0x1a8>)
    e048:	681a      	ldr	r2, [r3, #0]
    e04a:	b085      	sub	sp, #20
    e04c:	b912      	cbnz	r2, e054 <am_hal_pwrctrl_low_power_init+0x10>
    e04e:	4a68      	ldr	r2, [pc, #416]	; (e1f0 <am_hal_pwrctrl_low_power_init+0x1ac>)
    e050:	6812      	ldr	r2, [r2, #0]
    e052:	601a      	str	r2, [r3, #0]
    e054:	4b67      	ldr	r3, [pc, #412]	; (e1f4 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e056:	68db      	ldr	r3, [r3, #12]
    e058:	b2db      	uxtb	r3, r3
    e05a:	2b12      	cmp	r3, #18
    e05c:	d104      	bne.n	e068 <am_hal_pwrctrl_low_power_init+0x24>
    e05e:	4c66      	ldr	r4, [pc, #408]	; (e1f8 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e060:	6863      	ldr	r3, [r4, #4]
    e062:	07d8      	lsls	r0, r3, #31
    e064:	f100 8088 	bmi.w	e178 <am_hal_pwrctrl_low_power_init+0x134>
    e068:	4b62      	ldr	r3, [pc, #392]	; (e1f4 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e06a:	68da      	ldr	r2, [r3, #12]
    e06c:	b2d2      	uxtb	r2, r2
    e06e:	2a20      	cmp	r2, #32
    e070:	d934      	bls.n	e0dc <am_hal_pwrctrl_low_power_init+0x98>
    e072:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
    e076:	2002      	movs	r0, #2
    e078:	f360 4213 	bfi	r2, r0, #16, #4
    e07c:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    e080:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
    e084:	2203      	movs	r2, #3
    e086:	f362 5117 	bfi	r1, r2, #20, #4
    e08a:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
    e08e:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e092:	2405      	movs	r4, #5
    e094:	f364 0103 	bfi	r1, r4, #0, #4
    e098:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e09c:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e0a0:	f360 1107 	bfi	r1, r0, #4, #4
    e0a4:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e0a8:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e0ac:	2406      	movs	r4, #6
    e0ae:	f364 210b 	bfi	r1, r4, #8, #4
    e0b2:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e0b6:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e0ba:	2001      	movs	r0, #1
    e0bc:	f360 310f 	bfi	r1, r0, #12, #4
    e0c0:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e0c4:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e0c8:	f362 61de 	bfi	r1, r2, #27, #4
    e0cc:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e0d0:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
    e0d4:	f362 0103 	bfi	r1, r2, #0, #4
    e0d8:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
    e0dc:	4a45      	ldr	r2, [pc, #276]	; (e1f4 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e0de:	68d3      	ldr	r3, [r2, #12]
    e0e0:	b2db      	uxtb	r3, r3
    e0e2:	2b11      	cmp	r3, #17
    e0e4:	d905      	bls.n	e0f2 <am_hal_pwrctrl_low_power_init+0xae>
    e0e6:	f8d2 335c 	ldr.w	r3, [r2, #860]	; 0x35c
    e0ea:	f36f 6318 	bfc	r3, #24, #1
    e0ee:	f8c2 335c 	str.w	r3, [r2, #860]	; 0x35c
    e0f2:	2100      	movs	r1, #0
    e0f4:	200c      	movs	r0, #12
    e0f6:	f7ff fa13 	bl	d520 <am_hal_cachectrl_control>
    e0fa:	4b3f      	ldr	r3, [pc, #252]	; (e1f8 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e0fc:	699b      	ldr	r3, [r3, #24]
    e0fe:	f3c3 2500 	ubfx	r5, r3, #8, #1
    e102:	05db      	lsls	r3, r3, #23
    e104:	d420      	bmi.n	e148 <am_hal_pwrctrl_low_power_init+0x104>
    e106:	4c3b      	ldr	r4, [pc, #236]	; (e1f4 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e108:	68e3      	ldr	r3, [r4, #12]
    e10a:	b2db      	uxtb	r3, r3
    e10c:	2b11      	cmp	r3, #17
    e10e:	d84e      	bhi.n	e1ae <am_hal_pwrctrl_low_power_init+0x16a>
    e110:	4c38      	ldr	r4, [pc, #224]	; (e1f4 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e112:	493a      	ldr	r1, [pc, #232]	; (e1fc <am_hal_pwrctrl_low_power_init+0x1b8>)
    e114:	7e22      	ldrb	r2, [r4, #24]
    e116:	2001      	movs	r0, #1
    e118:	4302      	orrs	r2, r0
    e11a:	2307      	movs	r3, #7
    e11c:	7622      	strb	r2, [r4, #24]
    e11e:	9000      	str	r0, [sp, #0]
    e120:	461a      	mov	r2, r3
    e122:	f242 7010 	movw	r0, #10000	; 0x2710
    e126:	f7ff fc3f 	bl	d9a8 <am_hal_flash_delay_status_check>
    e12a:	2800      	cmp	r0, #0
    e12c:	d15a      	bne.n	e1e4 <am_hal_pwrctrl_low_power_init+0x1a0>
    e12e:	4b32      	ldr	r3, [pc, #200]	; (e1f8 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e130:	681a      	ldr	r2, [r3, #0]
    e132:	f042 0201 	orr.w	r2, r2, #1
    e136:	601a      	str	r2, [r3, #0]
    e138:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    e13a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    e13e:	625a      	str	r2, [r3, #36]	; 0x24
    e140:	68e3      	ldr	r3, [r4, #12]
    e142:	b2db      	uxtb	r3, r3
    e144:	2b11      	cmp	r3, #17
    e146:	d002      	beq.n	e14e <am_hal_pwrctrl_low_power_init+0x10a>
    e148:	2000      	movs	r0, #0
    e14a:	b005      	add	sp, #20
    e14c:	bd30      	pop	{r4, r5, pc}
    e14e:	f8d4 335c 	ldr.w	r3, [r4, #860]	; 0x35c
    e152:	f360 5356 	bfi	r3, r0, #21, #2
    e156:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
    e15a:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e15e:	220f      	movs	r2, #15
    e160:	f362 138b 	bfi	r3, r2, #6, #6
    e164:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e168:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e16c:	f362 0305 	bfi	r3, r2, #0, #6
    e170:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e174:	b005      	add	sp, #20
    e176:	bd30      	pop	{r4, r5, pc}
    e178:	f7ff fdd4 	bl	dd24 <am_hal_interrupt_master_disable>
    e17c:	9002      	str	r0, [sp, #8]
    e17e:	68a3      	ldr	r3, [r4, #8]
    e180:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    e184:	60a3      	str	r3, [r4, #8]
    e186:	9802      	ldr	r0, [sp, #8]
    e188:	f7ff fdd0 	bl	dd2c <am_hal_interrupt_master_set>
    e18c:	20a0      	movs	r0, #160	; 0xa0
    e18e:	f7ff fbfb 	bl	d988 <am_hal_flash_delay>
    e192:	69a3      	ldr	r3, [r4, #24]
    e194:	0619      	lsls	r1, r3, #24
    e196:	d403      	bmi.n	e1a0 <am_hal_pwrctrl_low_power_init+0x15c>
    e198:	20a0      	movs	r0, #160	; 0xa0
    e19a:	f7ff fbf5 	bl	d988 <am_hal_flash_delay>
    e19e:	69a3      	ldr	r3, [r4, #24]
    e1a0:	4b15      	ldr	r3, [pc, #84]	; (e1f8 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e1a2:	699b      	ldr	r3, [r3, #24]
    e1a4:	061a      	lsls	r2, r3, #24
    e1a6:	f53f af5f 	bmi.w	e068 <am_hal_pwrctrl_low_power_init+0x24>
    e1aa:	2001      	movs	r0, #1
    e1ac:	e7cd      	b.n	e14a <am_hal_pwrctrl_low_power_init+0x106>
    e1ae:	f7ff fdb9 	bl	dd24 <am_hal_interrupt_master_disable>
    e1b2:	9003      	str	r0, [sp, #12]
    e1b4:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e1b8:	2219      	movs	r2, #25
    e1ba:	f362 138b 	bfi	r3, r2, #6, #6
    e1be:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e1c2:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
    e1c6:	210c      	movs	r1, #12
    e1c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e1cc:	f361 0205 	bfi	r2, r1, #0, #6
    e1d0:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
    e1d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    e1d6:	f365 5296 	bfi	r2, r5, #22, #1
    e1da:	63da      	str	r2, [r3, #60]	; 0x3c
    e1dc:	9803      	ldr	r0, [sp, #12]
    e1de:	f7ff fda5 	bl	dd2c <am_hal_interrupt_master_set>
    e1e2:	e795      	b.n	e110 <am_hal_pwrctrl_low_power_init+0xcc>
    e1e4:	2004      	movs	r0, #4
    e1e6:	b005      	add	sp, #20
    e1e8:	bd30      	pop	{r4, r5, pc}
    e1ea:	bf00      	nop
    e1ec:	10001148 	.word	0x10001148
    e1f0:	4ffff000 	.word	0x4ffff000
    e1f4:	40020000 	.word	0x40020000
    e1f8:	40021000 	.word	0x40021000
    e1fc:	40020018 	.word	0x40020018

0000e200 <am_hal_rtc_osc_disable>:
    e200:	4a03      	ldr	r2, [pc, #12]	; (e210 <am_hal_rtc_osc_disable+0x10>)
    e202:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    e206:	f043 0310 	orr.w	r3, r3, #16
    e20a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    e20e:	4770      	bx	lr
    e210:	40004200 	.word	0x40004200

0000e214 <am_hal_stimer_config>:
    e214:	4a03      	ldr	r2, [pc, #12]	; (e224 <am_hal_stimer_config+0x10>)
    e216:	4603      	mov	r3, r0
    e218:	f8d2 0140 	ldr.w	r0, [r2, #320]	; 0x140
    e21c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
    e220:	4770      	bx	lr
    e222:	bf00      	nop
    e224:	40008000 	.word	0x40008000

0000e228 <am_hal_stimer_compare_delta_set>:
    e228:	2807      	cmp	r0, #7
    e22a:	d900      	bls.n	e22e <am_hal_stimer_compare_delta_set+0x6>
    e22c:	4770      	bx	lr
    e22e:	b530      	push	{r4, r5, lr}
    e230:	b083      	sub	sp, #12
    e232:	460c      	mov	r4, r1
    e234:	4605      	mov	r5, r0
    e236:	f7ff fd75 	bl	dd24 <am_hal_interrupt_master_disable>
    e23a:	4a27      	ldr	r2, [pc, #156]	; (e2d8 <am_hal_stimer_compare_delta_set+0xb0>)
    e23c:	9001      	str	r0, [sp, #4]
    e23e:	4b27      	ldr	r3, [pc, #156]	; (e2dc <am_hal_stimer_compare_delta_set+0xb4>)
    e240:	f8d2 1140 	ldr.w	r1, [r2, #320]	; 0x140
    e244:	f8d2 0140 	ldr.w	r0, [r2, #320]	; 0x140
    e248:	f44f 7c80 	mov.w	ip, #256	; 0x100
    e24c:	442b      	add	r3, r5
    e24e:	fa0c f505 	lsl.w	r5, ip, r5
    e252:	009b      	lsls	r3, r3, #2
    e254:	ea20 0005 	bic.w	r0, r0, r5
    e258:	f8c2 0140 	str.w	r0, [r2, #320]	; 0x140
    e25c:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
    e260:	601c      	str	r4, [r3, #0]
    e262:	6818      	ldr	r0, [r3, #0]
    e264:	4422      	add	r2, r4
    e266:	eba0 0c02 	sub.w	ip, r0, r2
    e26a:	f1bc 0f00 	cmp.w	ip, #0
    e26e:	db03      	blt.n	e278 <am_hal_stimer_compare_delta_set+0x50>
    e270:	320a      	adds	r2, #10
    e272:	1a82      	subs	r2, r0, r2
    e274:	2a00      	cmp	r2, #0
    e276:	dd22      	ble.n	e2be <am_hal_stimer_compare_delta_set+0x96>
    e278:	4a17      	ldr	r2, [pc, #92]	; (e2d8 <am_hal_stimer_compare_delta_set+0xb0>)
    e27a:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
    e27e:	601c      	str	r4, [r3, #0]
    e280:	6818      	ldr	r0, [r3, #0]
    e282:	4422      	add	r2, r4
    e284:	eba0 0c02 	sub.w	ip, r0, r2
    e288:	f1bc 0f00 	cmp.w	ip, #0
    e28c:	db03      	blt.n	e296 <am_hal_stimer_compare_delta_set+0x6e>
    e28e:	320a      	adds	r2, #10
    e290:	1a82      	subs	r2, r0, r2
    e292:	2a00      	cmp	r2, #0
    e294:	dd13      	ble.n	e2be <am_hal_stimer_compare_delta_set+0x96>
    e296:	4a10      	ldr	r2, [pc, #64]	; (e2d8 <am_hal_stimer_compare_delta_set+0xb0>)
    e298:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
    e29c:	601c      	str	r4, [r3, #0]
    e29e:	6818      	ldr	r0, [r3, #0]
    e2a0:	4422      	add	r2, r4
    e2a2:	eba0 0c02 	sub.w	ip, r0, r2
    e2a6:	f1bc 0f00 	cmp.w	ip, #0
    e2aa:	db03      	blt.n	e2b4 <am_hal_stimer_compare_delta_set+0x8c>
    e2ac:	320a      	adds	r2, #10
    e2ae:	1a82      	subs	r2, r0, r2
    e2b0:	2a00      	cmp	r2, #0
    e2b2:	dd04      	ble.n	e2be <am_hal_stimer_compare_delta_set+0x96>
    e2b4:	4a08      	ldr	r2, [pc, #32]	; (e2d8 <am_hal_stimer_compare_delta_set+0xb0>)
    e2b6:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
    e2ba:	601c      	str	r4, [r3, #0]
    e2bc:	681b      	ldr	r3, [r3, #0]
    e2be:	4b06      	ldr	r3, [pc, #24]	; (e2d8 <am_hal_stimer_compare_delta_set+0xb0>)
    e2c0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    e2c4:	400d      	ands	r5, r1
    e2c6:	4315      	orrs	r5, r2
    e2c8:	f8c3 5140 	str.w	r5, [r3, #320]	; 0x140
    e2cc:	9801      	ldr	r0, [sp, #4]
    e2ce:	b003      	add	sp, #12
    e2d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    e2d4:	f7ff bd2a 	b.w	dd2c <am_hal_interrupt_master_set>
    e2d8:	40008000 	.word	0x40008000
    e2dc:	10002054 	.word	0x10002054

0000e2e0 <am_hal_stimer_int_enable>:
    e2e0:	4a03      	ldr	r2, [pc, #12]	; (e2f0 <am_hal_stimer_int_enable+0x10>)
    e2e2:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
    e2e6:	4318      	orrs	r0, r3
    e2e8:	f8c2 0300 	str.w	r0, [r2, #768]	; 0x300
    e2ec:	4770      	bx	lr
    e2ee:	bf00      	nop
    e2f0:	40008000 	.word	0x40008000

0000e2f4 <am_hal_stimer_int_clear>:
    e2f4:	4b01      	ldr	r3, [pc, #4]	; (e2fc <am_hal_stimer_int_clear+0x8>)
    e2f6:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    e2fa:	4770      	bx	lr
    e2fc:	40008000 	.word	0x40008000

0000e300 <am_hal_sysctrl_sleep>:
    e300:	b510      	push	{r4, lr}
    e302:	b082      	sub	sp, #8
    e304:	4604      	mov	r4, r0
    e306:	f7ff fd0d 	bl	dd24 <am_hal_interrupt_master_disable>
    e30a:	9001      	str	r0, [sp, #4]
    e30c:	b124      	cbz	r4, e318 <am_hal_sysctrl_sleep+0x18>
    e30e:	4b12      	ldr	r3, [pc, #72]	; (e358 <am_hal_sysctrl_sleep+0x58>)
    e310:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    e314:	07db      	lsls	r3, r3, #31
    e316:	d513      	bpl.n	e340 <am_hal_sysctrl_sleep+0x40>
    e318:	4a10      	ldr	r2, [pc, #64]	; (e35c <am_hal_sysctrl_sleep+0x5c>)
    e31a:	6913      	ldr	r3, [r2, #16]
    e31c:	f023 0304 	bic.w	r3, r3, #4
    e320:	6113      	str	r3, [r2, #16]
    e322:	f3bf 8f4f 	dsb	sy
    e326:	4a0e      	ldr	r2, [pc, #56]	; (e360 <am_hal_sysctrl_sleep+0x60>)
    e328:	4b0e      	ldr	r3, [pc, #56]	; (e364 <am_hal_sysctrl_sleep+0x64>)
    e32a:	6812      	ldr	r2, [r2, #0]
    e32c:	601a      	str	r2, [r3, #0]
    e32e:	bf30      	wfi
    e330:	f3bf 8f6f 	isb	sy
    e334:	9801      	ldr	r0, [sp, #4]
    e336:	b002      	add	sp, #8
    e338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e33c:	f7ff bcf6 	b.w	dd2c <am_hal_interrupt_master_set>
    e340:	4b09      	ldr	r3, [pc, #36]	; (e368 <am_hal_sysctrl_sleep+0x68>)
    e342:	681a      	ldr	r2, [r3, #0]
    e344:	b912      	cbnz	r2, e34c <am_hal_sysctrl_sleep+0x4c>
    e346:	4a09      	ldr	r2, [pc, #36]	; (e36c <am_hal_sysctrl_sleep+0x6c>)
    e348:	6812      	ldr	r2, [r2, #0]
    e34a:	601a      	str	r2, [r3, #0]
    e34c:	4a03      	ldr	r2, [pc, #12]	; (e35c <am_hal_sysctrl_sleep+0x5c>)
    e34e:	6913      	ldr	r3, [r2, #16]
    e350:	f043 0304 	orr.w	r3, r3, #4
    e354:	6113      	str	r3, [r2, #16]
    e356:	e7e4      	b.n	e322 <am_hal_sysctrl_sleep+0x22>
    e358:	40020000 	.word	0x40020000
    e35c:	e000ed00 	.word	0xe000ed00
    e360:	5fff0000 	.word	0x5fff0000
    e364:	1000114c 	.word	0x1000114c
    e368:	10001148 	.word	0x10001148
    e36c:	4ffff000 	.word	0x4ffff000

0000e370 <am_hal_tpiu_enable>:
    e370:	b510      	push	{r4, lr}
    e372:	4b23      	ldr	r3, [pc, #140]	; (e400 <am_hal_tpiu_enable+0x90>)
    e374:	6804      	ldr	r4, [r0, #0]
    e376:	2200      	movs	r2, #0
    e378:	b084      	sub	sp, #16
    e37a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    e37e:	b334      	cbz	r4, e3ce <am_hal_tpiu_enable+0x5e>
    e380:	4a20      	ldr	r2, [pc, #128]	; (e404 <am_hal_tpiu_enable+0x94>)
    e382:	4921      	ldr	r1, [pc, #132]	; (e408 <am_hal_tpiu_enable+0x98>)
    e384:	2001      	movs	r0, #1
    e386:	6058      	str	r0, [r3, #4]
    e388:	f5a4 4361 	sub.w	r3, r4, #57600	; 0xe100
    e38c:	a801      	add	r0, sp, #4
    e38e:	428b      	cmp	r3, r1
    e390:	bf88      	it	hi
    e392:	4614      	movhi	r4, r2
    e394:	f7ff fada 	bl	d94c <am_hal_clkgen_status_get>
    e398:	9b01      	ldr	r3, [sp, #4]
    e39a:	1c5a      	adds	r2, r3, #1
    e39c:	d02d      	beq.n	e3fa <am_hal_tpiu_enable+0x8a>
    e39e:	08db      	lsrs	r3, r3, #3
    e3a0:	fbb3 f4f4 	udiv	r4, r3, r4
    e3a4:	3c01      	subs	r4, #1
    e3a6:	b2a4      	uxth	r4, r4
    e3a8:	4b15      	ldr	r3, [pc, #84]	; (e400 <am_hal_tpiu_enable+0x90>)
    e3aa:	4a18      	ldr	r2, [pc, #96]	; (e40c <am_hal_tpiu_enable+0x9c>)
    e3ac:	611c      	str	r4, [r3, #16]
    e3ae:	2102      	movs	r1, #2
    e3b0:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
    e3b4:	2000      	movs	r0, #0
    e3b6:	f240 2101 	movw	r1, #513	; 0x201
    e3ba:	f8c3 0f00 	str.w	r0, [r3, #3840]	; 0xf00
    e3be:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
    e3c2:	f44f 7048 	mov.w	r0, #800	; 0x320
    e3c6:	f7ff fadf 	bl	d988 <am_hal_flash_delay>
    e3ca:	b004      	add	sp, #16
    e3cc:	bd10      	pop	{r4, pc}
    e3ce:	6902      	ldr	r2, [r0, #16]
    e3d0:	611a      	str	r2, [r3, #16]
    e3d2:	6882      	ldr	r2, [r0, #8]
    e3d4:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    e3d8:	68c1      	ldr	r1, [r0, #12]
    e3da:	2201      	movs	r2, #1
    e3dc:	3901      	subs	r1, #1
    e3de:	408a      	lsls	r2, r1
    e3e0:	605a      	str	r2, [r3, #4]
    e3e2:	f8c3 4f00 	str.w	r4, [r3, #3840]	; 0xf00
    e3e6:	4a09      	ldr	r2, [pc, #36]	; (e40c <am_hal_tpiu_enable+0x9c>)
    e3e8:	6843      	ldr	r3, [r0, #4]
    e3ea:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    e3ee:	f44f 7048 	mov.w	r0, #800	; 0x320
    e3f2:	f7ff fac9 	bl	d988 <am_hal_flash_delay>
    e3f6:	b004      	add	sp, #16
    e3f8:	bd10      	pop	{r4, pc}
    e3fa:	2405      	movs	r4, #5
    e3fc:	e7d4      	b.n	e3a8 <am_hal_tpiu_enable+0x38>
    e3fe:	bf00      	nop
    e400:	e0040000 	.word	0xe0040000
    e404:	000f4240 	.word	0x000f4240
    e408:	001da380 	.word	0x001da380
    e40c:	40020000 	.word	0x40020000

0000e410 <am_hal_uart_deinitialize>:
    e410:	b170      	cbz	r0, e430 <am_hal_uart_deinitialize+0x20>
    e412:	6803      	ldr	r3, [r0, #0]
    e414:	4a07      	ldr	r2, [pc, #28]	; (e434 <am_hal_uart_deinitialize+0x24>)
    e416:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e41a:	4293      	cmp	r3, r2
    e41c:	d108      	bne.n	e430 <am_hal_uart_deinitialize+0x20>
    e41e:	78c2      	ldrb	r2, [r0, #3]
    e420:	2300      	movs	r3, #0
    e422:	f36f 0200 	bfc	r2, #0, #1
    e426:	70c2      	strb	r2, [r0, #3]
    e428:	6243      	str	r3, [r0, #36]	; 0x24
    e42a:	7103      	strb	r3, [r0, #4]
    e42c:	4618      	mov	r0, r3
    e42e:	4770      	bx	lr
    e430:	2002      	movs	r0, #2
    e432:	4770      	bx	lr
    e434:	01ea9e06 	.word	0x01ea9e06

0000e438 <am_hal_uart_power_control>:
    e438:	b5f0      	push	{r4, r5, r6, r7, lr}
    e43a:	4604      	mov	r4, r0
    e43c:	6800      	ldr	r0, [r0, #0]
    e43e:	4b39      	ldr	r3, [pc, #228]	; (e524 <am_hal_uart_power_control+0xec>)
    e440:	f020 467e 	bic.w	r6, r0, #4261412864	; 0xfe000000
    e444:	429e      	cmp	r6, r3
    e446:	b085      	sub	sp, #20
    e448:	d13f      	bne.n	e4ca <am_hal_uart_power_control+0x92>
    e44a:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e44c:	f105 0008 	add.w	r0, r5, #8
    e450:	b2c7      	uxtb	r7, r0
    e452:	b189      	cbz	r1, e478 <am_hal_uart_power_control+0x40>
    e454:	3901      	subs	r1, #1
    e456:	2901      	cmp	r1, #1
    e458:	d834      	bhi.n	e4c4 <am_hal_uart_power_control+0x8c>
    e45a:	2a00      	cmp	r2, #0
    e45c:	d138      	bne.n	e4d0 <am_hal_uart_power_control+0x98>
    e45e:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e462:	351c      	adds	r5, #28
    e464:	032d      	lsls	r5, r5, #12
    e466:	f04f 33ff 	mov.w	r3, #4294967295
    e46a:	646b      	str	r3, [r5, #68]	; 0x44
    e46c:	4638      	mov	r0, r7
    e46e:	f7ff fdbd 	bl	dfec <am_hal_pwrctrl_periph_disable>
    e472:	2000      	movs	r0, #0
    e474:	b005      	add	sp, #20
    e476:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e478:	2a00      	cmp	r2, #0
    e47a:	d04a      	beq.n	e512 <am_hal_uart_power_control+0xda>
    e47c:	7923      	ldrb	r3, [r4, #4]
    e47e:	2b00      	cmp	r3, #0
    e480:	d04e      	beq.n	e520 <am_hal_uart_power_control+0xe8>
    e482:	4638      	mov	r0, r7
    e484:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e488:	9101      	str	r1, [sp, #4]
    e48a:	351c      	adds	r5, #28
    e48c:	f7ff fd84 	bl	df98 <am_hal_pwrctrl_periph_enable>
    e490:	f7ff fc48 	bl	dd24 <am_hal_interrupt_master_disable>
    e494:	032d      	lsls	r5, r5, #12
    e496:	68a3      	ldr	r3, [r4, #8]
    e498:	9002      	str	r0, [sp, #8]
    e49a:	622b      	str	r3, [r5, #32]
    e49c:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    e4a0:	626a      	str	r2, [r5, #36]	; 0x24
    e4a2:	62ab      	str	r3, [r5, #40]	; 0x28
    e4a4:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
    e4a8:	62ea      	str	r2, [r5, #44]	; 0x2c
    e4aa:	632b      	str	r3, [r5, #48]	; 0x30
    e4ac:	e9d4 2307 	ldrd	r2, r3, [r4, #28]
    e4b0:	9901      	ldr	r1, [sp, #4]
    e4b2:	636a      	str	r2, [r5, #52]	; 0x34
    e4b4:	63ab      	str	r3, [r5, #56]	; 0x38
    e4b6:	9802      	ldr	r0, [sp, #8]
    e4b8:	7121      	strb	r1, [r4, #4]
    e4ba:	f7ff fc37 	bl	dd2c <am_hal_interrupt_master_set>
    e4be:	9901      	ldr	r1, [sp, #4]
    e4c0:	4608      	mov	r0, r1
    e4c2:	e000      	b.n	e4c6 <am_hal_uart_power_control+0x8e>
    e4c4:	2006      	movs	r0, #6
    e4c6:	b005      	add	sp, #20
    e4c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e4ca:	2002      	movs	r0, #2
    e4cc:	b005      	add	sp, #20
    e4ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e4d0:	f7ff fc28 	bl	dd24 <am_hal_interrupt_master_disable>
    e4d4:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e4d8:	351c      	adds	r5, #28
    e4da:	032d      	lsls	r5, r5, #12
    e4dc:	9003      	str	r0, [sp, #12]
    e4de:	6a2b      	ldr	r3, [r5, #32]
    e4e0:	60a3      	str	r3, [r4, #8]
    e4e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e4e4:	60e3      	str	r3, [r4, #12]
    e4e6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e4e8:	6123      	str	r3, [r4, #16]
    e4ea:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    e4ec:	6163      	str	r3, [r4, #20]
    e4ee:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    e4f0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    e4f2:	61a3      	str	r3, [r4, #24]
    e4f4:	6bab      	ldr	r3, [r5, #56]	; 0x38
    e4f6:	61e2      	str	r2, [r4, #28]
    e4f8:	2201      	movs	r2, #1
    e4fa:	6223      	str	r3, [r4, #32]
    e4fc:	9803      	ldr	r0, [sp, #12]
    e4fe:	7122      	strb	r2, [r4, #4]
    e500:	f7ff fc14 	bl	dd2c <am_hal_interrupt_master_set>
    e504:	6823      	ldr	r3, [r4, #0]
    e506:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e50a:	42b3      	cmp	r3, r6
    e50c:	d1ae      	bne.n	e46c <am_hal_uart_power_control+0x34>
    e50e:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e510:	e7a5      	b.n	e45e <am_hal_uart_power_control+0x26>
    e512:	4638      	mov	r0, r7
    e514:	9201      	str	r2, [sp, #4]
    e516:	f7ff fd3f 	bl	df98 <am_hal_pwrctrl_periph_enable>
    e51a:	9a01      	ldr	r2, [sp, #4]
    e51c:	4610      	mov	r0, r2
    e51e:	e7d2      	b.n	e4c6 <am_hal_uart_power_control+0x8e>
    e520:	2007      	movs	r0, #7
    e522:	e7d0      	b.n	e4c6 <am_hal_uart_power_control+0x8e>
    e524:	01ea9e06 	.word	0x01ea9e06

0000e528 <am_hal_uart_tx_flush>:
    e528:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    e52c:	b570      	push	{r4, r5, r6, lr}
    e52e:	6a45      	ldr	r5, [r0, #36]	; 0x24
    e530:	4604      	mov	r4, r0
    e532:	b15b      	cbz	r3, e54c <am_hal_uart_tx_flush+0x24>
    e534:	6b43      	ldr	r3, [r0, #52]	; 0x34
    e536:	b14b      	cbz	r3, e54c <am_hal_uart_tx_flush+0x24>
    e538:	4e0e      	ldr	r6, [pc, #56]	; (e574 <am_hal_uart_tx_flush+0x4c>)
    e53a:	6e20      	ldr	r0, [r4, #96]	; 0x60
    e53c:	fbb6 f0f0 	udiv	r0, r6, r0
    e540:	0100      	lsls	r0, r0, #4
    e542:	f7ff fa21 	bl	d988 <am_hal_flash_delay>
    e546:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e548:	2b00      	cmp	r3, #0
    e54a:	d1f6      	bne.n	e53a <am_hal_uart_tx_flush+0x12>
    e54c:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e550:	351c      	adds	r5, #28
    e552:	032d      	lsls	r5, r5, #12
    e554:	69ab      	ldr	r3, [r5, #24]
    e556:	071a      	lsls	r2, r3, #28
    e558:	d509      	bpl.n	e56e <am_hal_uart_tx_flush+0x46>
    e55a:	4e06      	ldr	r6, [pc, #24]	; (e574 <am_hal_uart_tx_flush+0x4c>)
    e55c:	6e23      	ldr	r3, [r4, #96]	; 0x60
    e55e:	fbb6 f3f3 	udiv	r3, r6, r3
    e562:	0118      	lsls	r0, r3, #4
    e564:	f7ff fa10 	bl	d988 <am_hal_flash_delay>
    e568:	69ab      	ldr	r3, [r5, #24]
    e56a:	071b      	lsls	r3, r3, #28
    e56c:	d4f6      	bmi.n	e55c <am_hal_uart_tx_flush+0x34>
    e56e:	2000      	movs	r0, #0
    e570:	bd70      	pop	{r4, r5, r6, pc}
    e572:	bf00      	nop
    e574:	00b71b00 	.word	0x00b71b00
    e578:	6d695453 	.word	0x6d695453
    e57c:	45207265 	.word	0x45207265
    e580:	706d6178 	.word	0x706d6178
    e584:	000a656c 	.word	0x000a656c
    e588:	20656854 	.word	0x20656854
    e58c:	6d695453 	.word	0x6d695453
    e590:	77207265 	.word	0x77207265
    e594:	206c6c69 	.word	0x206c6c69
    e598:	656b6177 	.word	0x656b6177
    e59c:	6f626120 	.word	0x6f626120
    e5a0:	65207475 	.word	0x65207475
    e5a4:	79726576 	.word	0x79726576
    e5a8:	20733120 	.word	0x20733120
    e5ac:	77206f74 	.word	0x77206f74
    e5b0:	206b6c61 	.word	0x206b6c61
    e5b4:	20656874 	.word	0x20656874
    e5b8:	7344454c 	.word	0x7344454c
    e5bc:	206e6f20 	.word	0x206e6f20
    e5c0:	20656874 	.word	0x20656874
    e5c4:	2e425645 	.word	0x2e425645
    e5c8:	0000000a 	.word	0x0000000a
    e5cc:	0a0a0a0a 	.word	0x0a0a0a0a
    e5d0:	0a0a0a0a 	.word	0x0a0a0a0a
    e5d4:	0a0a0a0a 	.word	0x0a0a0a0a
    e5d8:	0a0a0a0a 	.word	0x0a0a0a0a
    e5dc:	00000a0a 	.word	0x00000a0a

0000e5e0 <g_AM_BSP_GPIO_ITM_SWO>:
    e5e0:	00000002                                ....

0000e5e4 <am_hal_cachectrl_defaults>:
    e5e4:	00000308                                ....

0000e5e8 <g_AM_HAL_GPIO_DISABLE>:
    e5e8:	00000003                                ....

0000e5ec <g_AM_HAL_GPIO_OUTPUT>:
    e5ec:	00000403                                ....

0000e5f0 <g_AM_HAL_GPIO_TRISTATE>:
    e5f0:	00000c03                                ....

0000e5f4 <g_ui8Bit76Capabilities>:
    e5f4:	02800101 80010180 80800101 80808080     ................
    e604:	80808080 80808008 01800180 80808080     ................
    e614:	80808080 01800402 01010401 80808080     ................
    e624:	00000101                                ....

0000e628 <g_ui8Inpen>:
    e628:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
    e638:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
    e648:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
    e658:	00003130                                01..

0000e65c <g_ui8NCEtable>:
    e65c:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    e66c:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    e67c:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    e68c:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    e69c:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    e6ac:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    e6bc:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    e6cc:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    e6dc:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    e6ec:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    e6fc:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    e70c:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    e71c:	32221202 43231303                       .."2..#C

0000e724 <g_ui8nCEpins>:
    e724:	02070707 00080802 01020202 01010101     ................
    e734:	01010101 01010101 01010101 01010101     ................
    e744:	01010101 08010101 01010008 01010101     ................
    e754:	00000101                                ....

0000e758 <g_am_hal_mcuctrl_flash_size>:
    e758:	00004000 00008000 00010000 00020000     .@..............
    e768:	00040000 00080000 00100000 00200000     .............. .
    e778:	00180000 00000000 00000000 00000000     ................
	...

0000e798 <g_am_hal_mcuctrl_sram_size>:
    e798:	00004000 00008000 00010000 00020000     .@..............
    e7a8:	00040000 00080000 00100000 00060000     ................
    e7b8:	000c0000 00000000 00000000 00000000     ................
	...

0000e7d8 <am_hal_pwrctrl_peripheral_control>:
	...
    e7e4:	00000001 00000004 00000004 00000002     ................
    e7f4:	00000008 00000008 00000004 00000008     ................
    e804:	00000008 00000008 00000008 00000008     ................
    e814:	00000010 00000010 00000010 00000020     ............ ...
    e824:	00000010 00000010 00000040 00000010     ........@.......
    e834:	00000010 00000080 00000004 00000004     ................
    e844:	00000100 00000004 00000004 00000200     ................
    e854:	00000020 00000020 00000400 00000004      ... ...........
    e864:	00000004 00000800 00000040 00000040     ........@...@...
    e874:	00001000 00000080 00000080 00002000     ............. ..
    e884:	00000100 00000100                       ........
