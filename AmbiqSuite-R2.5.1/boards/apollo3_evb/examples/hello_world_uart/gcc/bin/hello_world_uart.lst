
bin/hello_world_uart.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 b1 d5 00 00 19 d6 00 00 1d c5 00 00     ................
    c010:	1b d6 00 00 1b d6 00 00 1b d6 00 00 00 00 00 00     ................
	...
    c02c:	1d d6 00 00 1d d6 00 00 00 00 00 00 1d d6 00 00     ................
    c03c:	1d d6 00 00 1d d6 00 00 1d d6 00 00 1d d6 00 00     ................
    c04c:	1d d6 00 00 1d d6 00 00 1d d6 00 00 1d d6 00 00     ................
    c05c:	1d d6 00 00 1d d6 00 00 1d d6 00 00 1d d6 00 00     ................
    c06c:	1d d6 00 00 1d d6 00 00 1d d6 00 00 1d d6 00 00     ................
    c07c:	e5 c1 00 00 1d d6 00 00 1d d6 00 00 1d d6 00 00     ................
    c08c:	1d d6 00 00 1d d6 00 00 1d d6 00 00 1d d6 00 00     ................
    c09c:	1d d6 00 00 1d d6 00 00 1d d6 00 00 1d d6 00 00     ................
    c0ac:	1d d6 00 00 1d d6 00 00 1d d6 00 00 1d d6 00 00     ................
    c0bc:	1d d6 00 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    c1a0:	b082      	sub	sp, #8
    c1a2:	4603      	mov	r3, r0
    c1a4:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
    c1a8:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c1ac:	2b00      	cmp	r3, #0
    c1ae:	db0c      	blt.n	c1ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c1b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c1b4:	f003 021f 	and.w	r2, r3, #31
    c1b8:	4905      	ldr	r1, [pc, #20]	; (c1d0 <__NVIC_EnableIRQ+0x30>)
    c1ba:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c1be:	095b      	lsrs	r3, r3, #5
    c1c0:	2001      	movs	r0, #1
    c1c2:	fa00 f202 	lsl.w	r2, r0, r2
    c1c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
    c1ca:	bf00      	nop
    c1cc:	b002      	add	sp, #8
    c1ce:	4770      	bx	lr
    c1d0:	e000e100 	.word	0xe000e100

0000c1d4 <error_handler>:
// Catch HAL errors.
//
//*****************************************************************************
void
error_handler(uint32_t ui32ErrorStatus)
{
    c1d4:	b082      	sub	sp, #8
    c1d6:	9001      	str	r0, [sp, #4]
    ui32LastError = ui32ErrorStatus;
    c1d8:	4a01      	ldr	r2, [pc, #4]	; (c1e0 <error_handler+0xc>)
    c1da:	9b01      	ldr	r3, [sp, #4]
    c1dc:	6013      	str	r3, [r2, #0]

    while (1);
    c1de:	e7fe      	b.n	c1de <error_handler+0xa>
    c1e0:	1000103c 	.word	0x1000103c

0000c1e4 <am_uart_isr>:
// UART0 interrupt handler.
//
//*****************************************************************************
void
am_uart_isr(void)
{
    c1e4:	b500      	push	{lr}
    c1e6:	b083      	sub	sp, #12
    //
    // Service the FIFOs as necessary, and clear the interrupts.
    //
    uint32_t ui32Status, ui32Idle;
    am_hal_uart_interrupt_status_get(phUART, &ui32Status, true);
    c1e8:	4b0c      	ldr	r3, [pc, #48]	; (c21c <am_uart_isr+0x38>)
    c1ea:	681b      	ldr	r3, [r3, #0]
    c1ec:	a901      	add	r1, sp, #4
    c1ee:	2201      	movs	r2, #1
    c1f0:	4618      	mov	r0, r3
    c1f2:	f002 fd37 	bl	ec64 <am_hal_uart_interrupt_status_get>
    am_hal_uart_interrupt_clear(phUART, ui32Status);
    c1f6:	4b09      	ldr	r3, [pc, #36]	; (c21c <am_uart_isr+0x38>)
    c1f8:	681b      	ldr	r3, [r3, #0]
    c1fa:	9a01      	ldr	r2, [sp, #4]
    c1fc:	4611      	mov	r1, r2
    c1fe:	4618      	mov	r0, r3
    c200:	f002 fd1e 	bl	ec40 <am_hal_uart_interrupt_clear>
    am_hal_uart_interrupt_service(phUART, ui32Status, &ui32Idle);
    c204:	4b05      	ldr	r3, [pc, #20]	; (c21c <am_uart_isr+0x38>)
    c206:	681b      	ldr	r3, [r3, #0]
    c208:	9901      	ldr	r1, [sp, #4]
    c20a:	466a      	mov	r2, sp
    c20c:	4618      	mov	r0, r3
    c20e:	f002 fc7b 	bl	eb08 <am_hal_uart_interrupt_service>
}
    c212:	bf00      	nop
    c214:	b003      	add	sp, #12
    c216:	f85d fb04 	ldr.w	pc, [sp], #4
    c21a:	bf00      	nop
    c21c:	10001038 	.word	0x10001038

0000c220 <uart_print>:
// UART print string
//
//*****************************************************************************
void
uart_print(char *pcStr)
{
    c220:	b500      	push	{lr}
    c222:	b08b      	sub	sp, #44	; 0x2c
    c224:	9001      	str	r0, [sp, #4]
    uint32_t ui32StrLen = 0;
    c226:	2300      	movs	r3, #0
    c228:	9309      	str	r3, [sp, #36]	; 0x24
    uint32_t ui32BytesWritten = 0;
    c22a:	2300      	movs	r3, #0
    c22c:	9308      	str	r3, [sp, #32]

    //
    // Measure the length of the string.
    //
    while (pcStr[ui32StrLen] != 0)
    c22e:	e002      	b.n	c236 <uart_print+0x16>
    {
        ui32StrLen++;
    c230:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c232:	3301      	adds	r3, #1
    c234:	9309      	str	r3, [sp, #36]	; 0x24
    while (pcStr[ui32StrLen] != 0)
    c236:	9a01      	ldr	r2, [sp, #4]
    c238:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c23a:	4413      	add	r3, r2
    c23c:	781b      	ldrb	r3, [r3, #0]
    c23e:	2b00      	cmp	r3, #0
    c240:	d1f6      	bne.n	c230 <uart_print+0x10>
    }

    //
    // Print the string via the UART.
    //
    const am_hal_uart_transfer_t sUartWrite =
    c242:	2300      	movs	r3, #0
    c244:	9303      	str	r3, [sp, #12]
    c246:	9b01      	ldr	r3, [sp, #4]
    c248:	9304      	str	r3, [sp, #16]
    c24a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c24c:	9305      	str	r3, [sp, #20]
    c24e:	2300      	movs	r3, #0
    c250:	9306      	str	r3, [sp, #24]
    c252:	ab08      	add	r3, sp, #32
    c254:	9307      	str	r3, [sp, #28]
        .ui32NumBytes = ui32StrLen,
        .ui32TimeoutMs = 0,
        .pui32BytesTransferred = &ui32BytesWritten,
    };

    CHECK_ERRORS(am_hal_uart_transfer(phUART, &sUartWrite));
    c256:	4b0f      	ldr	r3, [pc, #60]	; (c294 <uart_print+0x74>)
    c258:	681b      	ldr	r3, [r3, #0]
    c25a:	aa03      	add	r2, sp, #12
    c25c:	4611      	mov	r1, r2
    c25e:	4618      	mov	r0, r3
    c260:	f002 fa2a 	bl	e6b8 <am_hal_uart_transfer>
    c264:	4603      	mov	r3, r0
    c266:	2b00      	cmp	r3, #0
    c268:	d00a      	beq.n	c280 <uart_print+0x60>
    c26a:	4b0a      	ldr	r3, [pc, #40]	; (c294 <uart_print+0x74>)
    c26c:	681b      	ldr	r3, [r3, #0]
    c26e:	aa03      	add	r2, sp, #12
    c270:	4611      	mov	r1, r2
    c272:	4618      	mov	r0, r3
    c274:	f002 fa20 	bl	e6b8 <am_hal_uart_transfer>
    c278:	4603      	mov	r3, r0
    c27a:	4618      	mov	r0, r3
    c27c:	f7ff ffaa 	bl	c1d4 <error_handler>

    if (ui32BytesWritten != ui32StrLen)
    c280:	9b08      	ldr	r3, [sp, #32]
    c282:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c284:	429a      	cmp	r2, r3
    c286:	d000      	beq.n	c28a <uart_print+0x6a>
    {
        //
        // Couldn't send the whole string!!
        //
        while(1);
    c288:	e7fe      	b.n	c288 <uart_print+0x68>
    }
}
    c28a:	bf00      	nop
    c28c:	b00b      	add	sp, #44	; 0x2c
    c28e:	f85d fb04 	ldr.w	pc, [sp], #4
    c292:	bf00      	nop
    c294:	10001038 	.word	0x10001038

0000c298 <main>:
// Main
//
//*****************************************************************************
int
main(void)
{
    c298:	b530      	push	{r4, r5, lr}
    c29a:	b0a5      	sub	sp, #148	; 0x94
    uint32_t ui32StrBuf;

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c29c:	2100      	movs	r1, #0
    c29e:	2000      	movs	r0, #0
    c2a0:	f001 fb86 	bl	d9b0 <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c2a4:	4881      	ldr	r0, [pc, #516]	; (c4ac <main+0x214>)
    c2a6:	f001 f9db 	bl	d660 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c2aa:	f001 f9fd 	bl	d6a8 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    c2ae:	f001 f9b7 	bl	d620 <am_bsp_low_power_init>

    //
    // Initialize the printf interface for UART output.
    //
    CHECK_ERRORS(am_hal_uart_initialize(0, &phUART));
    c2b2:	497f      	ldr	r1, [pc, #508]	; (c4b0 <main+0x218>)
    c2b4:	2000      	movs	r0, #0
    c2b6:	f002 f861 	bl	e37c <am_hal_uart_initialize>
    c2ba:	4603      	mov	r3, r0
    c2bc:	2b00      	cmp	r3, #0
    c2be:	d007      	beq.n	c2d0 <main+0x38>
    c2c0:	497b      	ldr	r1, [pc, #492]	; (c4b0 <main+0x218>)
    c2c2:	2000      	movs	r0, #0
    c2c4:	f002 f85a 	bl	e37c <am_hal_uart_initialize>
    c2c8:	4603      	mov	r3, r0
    c2ca:	4618      	mov	r0, r3
    c2cc:	f7ff ff82 	bl	c1d4 <error_handler>
    CHECK_ERRORS(am_hal_uart_power_control(phUART, AM_HAL_SYSCTRL_WAKE, false));
    c2d0:	4b77      	ldr	r3, [pc, #476]	; (c4b0 <main+0x218>)
    c2d2:	681b      	ldr	r3, [r3, #0]
    c2d4:	2200      	movs	r2, #0
    c2d6:	2100      	movs	r1, #0
    c2d8:	4618      	mov	r0, r3
    c2da:	f002 f877 	bl	e3cc <am_hal_uart_power_control>
    c2de:	4603      	mov	r3, r0
    c2e0:	2b00      	cmp	r3, #0
    c2e2:	d00a      	beq.n	c2fa <main+0x62>
    c2e4:	4b72      	ldr	r3, [pc, #456]	; (c4b0 <main+0x218>)
    c2e6:	681b      	ldr	r3, [r3, #0]
    c2e8:	2200      	movs	r2, #0
    c2ea:	2100      	movs	r1, #0
    c2ec:	4618      	mov	r0, r3
    c2ee:	f002 f86d 	bl	e3cc <am_hal_uart_power_control>
    c2f2:	4603      	mov	r3, r0
    c2f4:	4618      	mov	r0, r3
    c2f6:	f7ff ff6d 	bl	c1d4 <error_handler>
    CHECK_ERRORS(am_hal_uart_configure(phUART, &g_sUartConfig));
    c2fa:	4b6d      	ldr	r3, [pc, #436]	; (c4b0 <main+0x218>)
    c2fc:	681b      	ldr	r3, [r3, #0]
    c2fe:	496d      	ldr	r1, [pc, #436]	; (c4b4 <main+0x21c>)
    c300:	4618      	mov	r0, r3
    c302:	f002 f8db 	bl	e4bc <am_hal_uart_configure>
    c306:	4603      	mov	r3, r0
    c308:	2b00      	cmp	r3, #0
    c30a:	d009      	beq.n	c320 <main+0x88>
    c30c:	4b68      	ldr	r3, [pc, #416]	; (c4b0 <main+0x218>)
    c30e:	681b      	ldr	r3, [r3, #0]
    c310:	4968      	ldr	r1, [pc, #416]	; (c4b4 <main+0x21c>)
    c312:	4618      	mov	r0, r3
    c314:	f002 f8d2 	bl	e4bc <am_hal_uart_configure>
    c318:	4603      	mov	r3, r0
    c31a:	4618      	mov	r0, r3
    c31c:	f7ff ff5a 	bl	c1d4 <error_handler>

    //
    // Enable the UART pins.
    //
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_TX, g_AM_BSP_GPIO_COM_UART_TX);
    c320:	4b65      	ldr	r3, [pc, #404]	; (c4b8 <main+0x220>)
    c322:	6819      	ldr	r1, [r3, #0]
    c324:	2016      	movs	r0, #22
    c326:	f001 fc2f 	bl	db88 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_RX, g_AM_BSP_GPIO_COM_UART_RX);
    c32a:	4b64      	ldr	r3, [pc, #400]	; (c4bc <main+0x224>)
    c32c:	6819      	ldr	r1, [r3, #0]
    c32e:	2017      	movs	r0, #23
    c330:	f001 fc2a 	bl	db88 <am_hal_gpio_pinconfig>

    //
    // Enable interrupts.
    //
    NVIC_EnableIRQ((IRQn_Type)(UART0_IRQn + AM_BSP_UART_PRINT_INST));
    c334:	200f      	movs	r0, #15
    c336:	f7ff ff33 	bl	c1a0 <__NVIC_EnableIRQ>
    am_hal_interrupt_master_enable();
    c33a:	f001 fd9f 	bl	de7c <am_hal_interrupt_master_enable>

    //
    // Set the main print interface to use the UART print function we defined.
    //
    am_util_stdio_printf_init(uart_print);
    c33e:	4860      	ldr	r0, [pc, #384]	; (c4c0 <main+0x228>)
    c340:	f000 fa72 	bl	c828 <am_util_stdio_printf_init>

    //
    // Print the banner.
    //
    am_util_stdio_terminal_clear();
    c344:	f001 f92c 	bl	d5a0 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Hello World!\n\n");
    c348:	485e      	ldr	r0, [pc, #376]	; (c4c4 <main+0x22c>)
    c34a:	f001 f909 	bl	d560 <am_util_stdio_printf>

    //
    // Print the device info.
    //
    am_util_id_device(&sIdDevice);
    c34e:	ab12      	add	r3, sp, #72	; 0x48
    c350:	4618      	mov	r0, r3
    c352:	f000 f999 	bl	c688 <am_util_id_device>
    am_util_stdio_printf("Vendor Name: %s\n", sIdDevice.pui8VendorName);
    c356:	9b20      	ldr	r3, [sp, #128]	; 0x80
    c358:	4619      	mov	r1, r3
    c35a:	485b      	ldr	r0, [pc, #364]	; (c4c8 <main+0x230>)
    c35c:	f001 f900 	bl	d560 <am_util_stdio_printf>
    am_util_stdio_printf("Device type: %s\n", sIdDevice.pui8DeviceName);
    c360:	9b21      	ldr	r3, [sp, #132]	; 0x84
    c362:	4619      	mov	r1, r3
    c364:	4859      	ldr	r0, [pc, #356]	; (c4cc <main+0x234>)
    c366:	f001 f8fb 	bl	d560 <am_util_stdio_printf>

    am_util_stdio_printf("Qualified: %s\n",
                         sIdDevice.sMcuCtrlDevice.ui32Qualified ?
    c36a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    am_util_stdio_printf("Qualified: %s\n",
    c36c:	2b00      	cmp	r3, #0
    c36e:	d001      	beq.n	c374 <main+0xdc>
    c370:	4b57      	ldr	r3, [pc, #348]	; (c4d0 <main+0x238>)
    c372:	e000      	b.n	c376 <main+0xde>
    c374:	4b57      	ldr	r3, [pc, #348]	; (c4d4 <main+0x23c>)
    c376:	4619      	mov	r1, r3
    c378:	4857      	ldr	r0, [pc, #348]	; (c4d8 <main+0x240>)
    c37a:	f001 f8f1 	bl	d560 <am_util_stdio_printf>
                         "Yes" : "No");

    am_util_stdio_printf("Device Info:\n"
    c37e:	9912      	ldr	r1, [sp, #72]	; 0x48
    c380:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    c382:	9814      	ldr	r0, [sp, #80]	; 0x50
    c384:	9b15      	ldr	r3, [sp, #84]	; 0x54
                         "\tRevision:    0x%08X (Rev%c%c)\n",
                         sIdDevice.sMcuCtrlDevice.ui32ChipPN,
                         sIdDevice.sMcuCtrlDevice.ui32ChipID0,
                         sIdDevice.sMcuCtrlDevice.ui32ChipID1,
                         sIdDevice.sMcuCtrlDevice.ui32ChipRev,
                         sIdDevice.ui8ChipRevMaj, sIdDevice.ui8ChipRevMin );
    c386:	f89d 4088 	ldrb.w	r4, [sp, #136]	; 0x88
    c38a:	f89d 5089 	ldrb.w	r5, [sp, #137]	; 0x89
    am_util_stdio_printf("Device Info:\n"
    c38e:	9502      	str	r5, [sp, #8]
    c390:	9401      	str	r4, [sp, #4]
    c392:	9300      	str	r3, [sp, #0]
    c394:	4603      	mov	r3, r0
    c396:	4851      	ldr	r0, [pc, #324]	; (c4dc <main+0x244>)
    c398:	f001 f8e2 	bl	d560 <am_util_stdio_printf>

    //
    // If not a multiple of 1024 bytes, append a plus sign to the KB.
    //
    ui32StrBuf = ( sIdDevice.sMcuCtrlDevice.ui32FlashSize % 1024 ) ? '+' : 0;
    c39c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c39e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    c3a2:	2b00      	cmp	r3, #0
    c3a4:	d001      	beq.n	c3aa <main+0x112>
    c3a6:	232b      	movs	r3, #43	; 0x2b
    c3a8:	e000      	b.n	c3ac <main+0x114>
    c3aa:	2300      	movs	r3, #0
    c3ac:	9311      	str	r3, [sp, #68]	; 0x44
    am_util_stdio_printf("\tFlash size:  %7d (%d KB%s)\n",
    c3ae:	9919      	ldr	r1, [sp, #100]	; 0x64
                         sIdDevice.sMcuCtrlDevice.ui32FlashSize,
                         sIdDevice.sMcuCtrlDevice.ui32FlashSize / 1024,
    c3b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    am_util_stdio_printf("\tFlash size:  %7d (%d KB%s)\n",
    c3b2:	0a9a      	lsrs	r2, r3, #10
    c3b4:	ab11      	add	r3, sp, #68	; 0x44
    c3b6:	484a      	ldr	r0, [pc, #296]	; (c4e0 <main+0x248>)
    c3b8:	f001 f8d2 	bl	d560 <am_util_stdio_printf>
                         &ui32StrBuf);

    ui32StrBuf = ( sIdDevice.sMcuCtrlDevice.ui32SRAMSize % 1024 ) ? '+' : 0;
    c3bc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    c3be:	f3c3 0309 	ubfx	r3, r3, #0, #10
    c3c2:	2b00      	cmp	r3, #0
    c3c4:	d001      	beq.n	c3ca <main+0x132>
    c3c6:	232b      	movs	r3, #43	; 0x2b
    c3c8:	e000      	b.n	c3cc <main+0x134>
    c3ca:	2300      	movs	r3, #0
    c3cc:	9311      	str	r3, [sp, #68]	; 0x44
    am_util_stdio_printf("\tSRAM size:   %7d (%d KB%s)\n\n",
    c3ce:	991a      	ldr	r1, [sp, #104]	; 0x68
                         sIdDevice.sMcuCtrlDevice.ui32SRAMSize,
                         sIdDevice.sMcuCtrlDevice.ui32SRAMSize / 1024,
    c3d0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    am_util_stdio_printf("\tSRAM size:   %7d (%d KB%s)\n\n",
    c3d2:	0a9a      	lsrs	r2, r3, #10
    c3d4:	ab11      	add	r3, sp, #68	; 0x44
    c3d6:	4843      	ldr	r0, [pc, #268]	; (c4e4 <main+0x24c>)
    c3d8:	f001 f8c2 	bl	d560 <am_util_stdio_printf>
                         &ui32StrBuf);

    //
    // Print the compiler version.
    //
    am_hal_uart_tx_flush(phUART);
    c3dc:	4b34      	ldr	r3, [pc, #208]	; (c4b0 <main+0x218>)
    c3de:	681b      	ldr	r3, [r3, #0]
    c3e0:	4618      	mov	r0, r3
    c3e2:	f002 fb69 	bl	eab8 <am_hal_uart_tx_flush>
    am_util_stdio_printf("App Compiler:    %s\n", COMPILER_VERSION);
    c3e6:	4940      	ldr	r1, [pc, #256]	; (c4e8 <main+0x250>)
    c3e8:	4840      	ldr	r0, [pc, #256]	; (c4ec <main+0x254>)
    c3ea:	f001 f8b9 	bl	d560 <am_util_stdio_printf>
#if defined(AM_PART_APOLLO3) || defined(AM_PART_APOLLO3P)
    am_util_stdio_printf("HAL Compiler:    %s\n", g_ui8HALcompiler);
    c3ee:	4940      	ldr	r1, [pc, #256]	; (c4f0 <main+0x258>)
    c3f0:	4840      	ldr	r0, [pc, #256]	; (c4f4 <main+0x25c>)
    c3f2:	f001 f8b5 	bl	d560 <am_util_stdio_printf>
    am_util_stdio_printf("HAL SDK version: %d.%d.%d\n",
                         g_ui32HALversion.s.Major,
    c3f6:	4b40      	ldr	r3, [pc, #256]	; (c4f8 <main+0x260>)
    c3f8:	78db      	ldrb	r3, [r3, #3]
    am_util_stdio_printf("HAL SDK version: %d.%d.%d\n",
    c3fa:	4619      	mov	r1, r3
                         g_ui32HALversion.s.Minor,
    c3fc:	4b3e      	ldr	r3, [pc, #248]	; (c4f8 <main+0x260>)
    c3fe:	789b      	ldrb	r3, [r3, #2]
    am_util_stdio_printf("HAL SDK version: %d.%d.%d\n",
    c400:	461a      	mov	r2, r3
                         g_ui32HALversion.s.Revision);
    c402:	4b3d      	ldr	r3, [pc, #244]	; (c4f8 <main+0x260>)
    c404:	785b      	ldrb	r3, [r3, #1]
    am_util_stdio_printf("HAL SDK version: %d.%d.%d\n",
    c406:	483d      	ldr	r0, [pc, #244]	; (c4fc <main+0x264>)
    c408:	f001 f8aa 	bl	d560 <am_util_stdio_printf>
    am_util_stdio_printf("HAL compiled with %s-style registers\n",
                         g_ui32HALversion.s.bAMREGS ? "AM_REG" : "CMSIS");
    c40c:	4b3a      	ldr	r3, [pc, #232]	; (c4f8 <main+0x260>)
    c40e:	781b      	ldrb	r3, [r3, #0]
    c410:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    c414:	b2db      	uxtb	r3, r3
    am_util_stdio_printf("HAL compiled with %s-style registers\n",
    c416:	2b00      	cmp	r3, #0
    c418:	d001      	beq.n	c41e <main+0x186>
    c41a:	4b39      	ldr	r3, [pc, #228]	; (c500 <main+0x268>)
    c41c:	e000      	b.n	c420 <main+0x188>
    c41e:	4b39      	ldr	r3, [pc, #228]	; (c504 <main+0x26c>)
    c420:	4619      	mov	r1, r3
    c422:	4839      	ldr	r0, [pc, #228]	; (c508 <main+0x270>)
    c424:	f001 f89c 	bl	d560 <am_util_stdio_printf>

    am_hal_security_info_t secInfo;
    char sINFO[32];
    uint32_t ui32Status;
    ui32Status = am_hal_security_get_info(&secInfo);
    c428:	ab0d      	add	r3, sp, #52	; 0x34
    c42a:	4618      	mov	r0, r3
    c42c:	f001 ff0c 	bl	e248 <am_hal_security_get_info>
    c430:	9023      	str	r0, [sp, #140]	; 0x8c
    if (ui32Status == AM_HAL_STATUS_SUCCESS)
    c432:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    c434:	2b00      	cmp	r3, #0
    c436:	d116      	bne.n	c466 <main+0x1ce>
    {
        if ( secInfo.bInfo0Valid )
    c438:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    c43c:	2b00      	cmp	r3, #0
    c43e:	d006      	beq.n	c44e <main+0x1b6>
        {
            am_util_stdio_sprintf(sINFO, "INFO0 valid, ver 0x%X", secInfo.info0Version);
    c440:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c442:	ab05      	add	r3, sp, #20
    c444:	4931      	ldr	r1, [pc, #196]	; (c50c <main+0x274>)
    c446:	4618      	mov	r0, r3
    c448:	f001 f876 	bl	d538 <am_util_stdio_sprintf>
    c44c:	e004      	b.n	c458 <main+0x1c0>
        }
        else
        {
            am_util_stdio_sprintf(sINFO, "INFO0 invalid");
    c44e:	ab05      	add	r3, sp, #20
    c450:	492f      	ldr	r1, [pc, #188]	; (c510 <main+0x278>)
    c452:	4618      	mov	r0, r3
    c454:	f001 f870 	bl	d538 <am_util_stdio_sprintf>
        }

        am_util_stdio_printf("SBL ver: 0x%x - 0x%x, %s\n",
    c458:	990f      	ldr	r1, [sp, #60]	; 0x3c
    c45a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c45c:	ab05      	add	r3, sp, #20
    c45e:	482d      	ldr	r0, [pc, #180]	; (c514 <main+0x27c>)
    c460:	f001 f87e 	bl	d560 <am_util_stdio_printf>
    c464:	e003      	b.n	c46e <main+0x1d6>
            secInfo.sblVersion, secInfo.sblVersionAddInfo, sINFO);
    }
    else
    {
        am_util_stdio_printf("am_hal_security_get_info failed 0x%X\n", ui32Status);
    c466:	9923      	ldr	r1, [sp, #140]	; 0x8c
    c468:	482b      	ldr	r0, [pc, #172]	; (c518 <main+0x280>)
    c46a:	f001 f879 	bl	d560 <am_util_stdio_printf>

    //
    // We are done printing.
    // Disable the UART and interrupts
    //
    am_hal_uart_tx_flush(phUART);
    c46e:	4b10      	ldr	r3, [pc, #64]	; (c4b0 <main+0x218>)
    c470:	681b      	ldr	r3, [r3, #0]
    c472:	4618      	mov	r0, r3
    c474:	f002 fb20 	bl	eab8 <am_hal_uart_tx_flush>
    CHECK_ERRORS(am_hal_uart_power_control(phUART, AM_HAL_SYSCTRL_DEEPSLEEP, false));
    c478:	4b0d      	ldr	r3, [pc, #52]	; (c4b0 <main+0x218>)
    c47a:	681b      	ldr	r3, [r3, #0]
    c47c:	2200      	movs	r2, #0
    c47e:	2102      	movs	r1, #2
    c480:	4618      	mov	r0, r3
    c482:	f001 ffa3 	bl	e3cc <am_hal_uart_power_control>
    c486:	4603      	mov	r3, r0
    c488:	2b00      	cmp	r3, #0
    c48a:	d00a      	beq.n	c4a2 <main+0x20a>
    c48c:	4b08      	ldr	r3, [pc, #32]	; (c4b0 <main+0x218>)
    c48e:	681b      	ldr	r3, [r3, #0]
    c490:	2200      	movs	r2, #0
    c492:	2102      	movs	r1, #2
    c494:	4618      	mov	r0, r3
    c496:	f001 ff99 	bl	e3cc <am_hal_uart_power_control>
    c49a:	4603      	mov	r3, r0
    c49c:	4618      	mov	r0, r3
    c49e:	f7ff fe99 	bl	c1d4 <error_handler>
    while (1)
    {
        //
        // Go to Deep Sleep.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c4a2:	2001      	movs	r0, #1
    c4a4:	f001 ff32 	bl	e30c <am_hal_sysctrl_sleep>
    c4a8:	e7fb      	b.n	c4a2 <main+0x20a>
    c4aa:	bf00      	nop
    c4ac:	0000f058 	.word	0x0000f058
    c4b0:	10001038 	.word	0x10001038
    c4b4:	0000efcc 	.word	0x0000efcc
    c4b8:	0000f054 	.word	0x0000f054
    c4bc:	0000f050 	.word	0x0000f050
    c4c0:	0000c221 	.word	0x0000c221
    c4c4:	0000edac 	.word	0x0000edac
    c4c8:	0000edbc 	.word	0x0000edbc
    c4cc:	0000edd0 	.word	0x0000edd0
    c4d0:	0000ede4 	.word	0x0000ede4
    c4d4:	0000ede8 	.word	0x0000ede8
    c4d8:	0000edec 	.word	0x0000edec
    c4dc:	0000edfc 	.word	0x0000edfc
    c4e0:	0000ee68 	.word	0x0000ee68
    c4e4:	0000ee88 	.word	0x0000ee88
    c4e8:	0000eea8 	.word	0x0000eea8
    c4ec:	0000eec8 	.word	0x0000eec8
    c4f0:	0000f060 	.word	0x0000f060
    c4f4:	0000eee0 	.word	0x0000eee0
    c4f8:	0000f05c 	.word	0x0000f05c
    c4fc:	0000eef8 	.word	0x0000eef8
    c500:	0000ef14 	.word	0x0000ef14
    c504:	0000ef1c 	.word	0x0000ef1c
    c508:	0000ef24 	.word	0x0000ef24
    c50c:	0000ef4c 	.word	0x0000ef4c
    c510:	0000ef64 	.word	0x0000ef64
    c514:	0000ef74 	.word	0x0000ef74
    c518:	0000ef90 	.word	0x0000ef90

0000c51c <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    c51c:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    c51e:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    c522:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    c524:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    c528:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    c52c:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c530:	f000 f80a 	bl	c548 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    c534:	bd01      	pop	{r0, pc}
}
    c536:	bf00      	nop
    c538:	4618      	mov	r0, r3

0000c53a <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c53a:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c53c:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c53e:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c540:	4770      	bx	lr
}
    c542:	bf00      	nop
    c544:	4618      	mov	r0, r3
	...

0000c548 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c548:	b500      	push	{lr}
    c54a:	b097      	sub	sp, #92	; 0x5c
    c54c:	9001      	str	r0, [sp, #4]
    volatile am_fault_t sFaultData;
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_t  sHalFaultData = {0};
#else
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c54e:	ab03      	add	r3, sp, #12
    c550:	2200      	movs	r2, #0
    c552:	601a      	str	r2, [r3, #0]
    c554:	605a      	str	r2, [r3, #4]
    c556:	609a      	str	r2, [r3, #8]
    c558:	60da      	str	r2, [r3, #12]
    c55a:	611a      	str	r2, [r3, #16]
    c55c:	615a      	str	r2, [r3, #20]
#endif // if defined(AM_PART_APOLLO4)

    uint32_t u32Mask = 0;
    c55e:	2300      	movs	r3, #0
    c560:	9315      	str	r3, [sp, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c562:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c564:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c566:	4b2e      	ldr	r3, [pc, #184]	; (c620 <am_util_faultisr_collect_data+0xd8>)
    c568:	681b      	ldr	r3, [r3, #0]
    c56a:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c56c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c56e:	b2db      	uxtb	r3, r3
    c570:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c574:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c576:	0a1b      	lsrs	r3, r3, #8
    c578:	b2db      	uxtb	r3, r3
    c57a:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c57e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c580:	0c1b      	lsrs	r3, r3, #16
    c582:	b29b      	uxth	r3, r3
    c584:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c588:	4b26      	ldr	r3, [pc, #152]	; (c624 <am_util_faultisr_collect_data+0xdc>)
    c58a:	681b      	ldr	r3, [r3, #0]
    c58c:	9312      	str	r3, [sp, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c58e:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
    c592:	b2db      	uxtb	r3, r3
    c594:	f003 0302 	and.w	r3, r3, #2
    c598:	2b00      	cmp	r3, #0
    c59a:	d005      	beq.n	c5a8 <am_util_faultisr_collect_data+0x60>
    c59c:	9901      	ldr	r1, [sp, #4]
    c59e:	2006      	movs	r0, #6
    c5a0:	f7ff ffcb 	bl	c53a <getStackedReg>
    c5a4:	4603      	mov	r3, r0
    c5a6:	e001      	b.n	c5ac <am_util_faultisr_collect_data+0x64>
    c5a8:	f04f 33ff 	mov.w	r3, #4294967295
    c5ac:	9311      	str	r3, [sp, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c5ae:	9901      	ldr	r1, [sp, #4]
    c5b0:	2000      	movs	r0, #0
    c5b2:	f7ff ffc2 	bl	c53a <getStackedReg>
    c5b6:	4603      	mov	r3, r0
    c5b8:	9309      	str	r3, [sp, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c5ba:	9901      	ldr	r1, [sp, #4]
    c5bc:	2001      	movs	r0, #1
    c5be:	f7ff ffbc 	bl	c53a <getStackedReg>
    c5c2:	4603      	mov	r3, r0
    c5c4:	930a      	str	r3, [sp, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c5c6:	9901      	ldr	r1, [sp, #4]
    c5c8:	2002      	movs	r0, #2
    c5ca:	f7ff ffb6 	bl	c53a <getStackedReg>
    c5ce:	4603      	mov	r3, r0
    c5d0:	930b      	str	r3, [sp, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c5d2:	9901      	ldr	r1, [sp, #4]
    c5d4:	2003      	movs	r0, #3
    c5d6:	f7ff ffb0 	bl	c53a <getStackedReg>
    c5da:	4603      	mov	r3, r0
    c5dc:	930c      	str	r3, [sp, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c5de:	9901      	ldr	r1, [sp, #4]
    c5e0:	2004      	movs	r0, #4
    c5e2:	f7ff ffaa 	bl	c53a <getStackedReg>
    c5e6:	4603      	mov	r3, r0
    c5e8:	930d      	str	r3, [sp, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c5ea:	9901      	ldr	r1, [sp, #4]
    c5ec:	2005      	movs	r0, #5
    c5ee:	f7ff ffa4 	bl	c53a <getStackedReg>
    c5f2:	4603      	mov	r3, r0
    c5f4:	930e      	str	r3, [sp, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c5f6:	9901      	ldr	r1, [sp, #4]
    c5f8:	2006      	movs	r0, #6
    c5fa:	f7ff ff9e 	bl	c53a <getStackedReg>
    c5fe:	4603      	mov	r3, r0
    c600:	930f      	str	r3, [sp, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c602:	9901      	ldr	r1, [sp, #4]
    c604:	2007      	movs	r0, #7
    c606:	f7ff ff98 	bl	c53a <getStackedReg>
    c60a:	4603      	mov	r3, r0
    c60c:	9310      	str	r3, [sp, #64]	; 0x40
    //
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_get(&sHalFaultData);
#else
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c60e:	ab03      	add	r3, sp, #12
    c610:	4619      	mov	r1, r3
    c612:	2002      	movs	r0, #2
    c614:	f001 fc3e 	bl	de94 <am_hal_mcuctrl_info_get>
      am_util_stdio_printf("   SYS Fault Address: 0x%08X\n", sHalFaultData.ui32SYS);
    }

#endif

    u32Mask = 0;
    c618:	2300      	movs	r3, #0
    c61a:	9315      	str	r3, [sp, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    c61c:	e7fe      	b.n	c61c <am_util_faultisr_collect_data+0xd4>
    c61e:	bf00      	nop
    c620:	e000ed28 	.word	0xe000ed28
    c624:	e000ed38 	.word	0xe000ed38

0000c628 <revmaj_get>:
// Return the major version of the chip rev.
// Returns: 'A', 'B', 'C', ...
//*****************************************************************************
static uint32_t
revmaj_get(uint32_t ui32ChipRev)
{
    c628:	b084      	sub	sp, #16
    c62a:	9001      	str	r0, [sp, #4]
    uint32_t ui32ret;

#ifdef _FLD2VAL
    ui32ret = _FLD2VAL(MCUCTRL_CHIPREV_REVMAJ, ui32ChipRev);
    c62c:	9b01      	ldr	r3, [sp, #4]
    c62e:	091b      	lsrs	r3, r3, #4
    c630:	f003 030f 	and.w	r3, r3, #15
    c634:	9303      	str	r3, [sp, #12]

    //
    // Major revision is 1=A, 2=B, 3=C, ...
    // Convert to the expected return value.
    //
    return ui32ret + 'A' - 1;
    c636:	9b03      	ldr	r3, [sp, #12]
    c638:	3340      	adds	r3, #64	; 0x40

} // revmaj_get()
    c63a:	4618      	mov	r0, r3
    c63c:	b004      	add	sp, #16
    c63e:	4770      	bx	lr

0000c640 <chiprev_set>:
// Update the ID structure with the appropriate ChipRev letter.
// ui32minrevbase should be 0 for Apollo or Apollo2, 1 for Apollo3.
//*****************************************************************************
static void
chiprev_set(am_util_id_t *psIDDevice, uint32_t ui32minrevbase)
{
    c640:	b084      	sub	sp, #16
    c642:	9001      	str	r0, [sp, #4]
    c644:	9100      	str	r1, [sp, #0]
    uint32_t ui32maj, ui32min;

    ui32maj = ((psIDDevice->sMcuCtrlDevice.ui32ChipRev & 0xF0) >> 4);
    c646:	9b01      	ldr	r3, [sp, #4]
    c648:	68db      	ldr	r3, [r3, #12]
    c64a:	091b      	lsrs	r3, r3, #4
    c64c:	f003 030f 	and.w	r3, r3, #15
    c650:	9303      	str	r3, [sp, #12]
    psIDDevice->ui8ChipRevMaj  = (uint8_t)('A' - 1 + ui32maj);
    c652:	9b03      	ldr	r3, [sp, #12]
    c654:	b2db      	uxtb	r3, r3
    c656:	3340      	adds	r3, #64	; 0x40
    c658:	b2da      	uxtb	r2, r3
    c65a:	9b01      	ldr	r3, [sp, #4]
    c65c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    //
    // For Apollo and Apollo2:  rev0=0, rev1=1, ... (0-based)
    // For Apollo3:             rev0=1, rev1=2, ... (1-based)
    //
    ui32min = ((psIDDevice->sMcuCtrlDevice.ui32ChipRev & 0x0F) >> 0);
    c660:	9b01      	ldr	r3, [sp, #4]
    c662:	68db      	ldr	r3, [r3, #12]
    c664:	f003 030f 	and.w	r3, r3, #15
    c668:	9302      	str	r3, [sp, #8]
    psIDDevice->ui8ChipRevMin = (uint8_t)('0' + ui32min - ui32minrevbase);
    c66a:	9b02      	ldr	r3, [sp, #8]
    c66c:	b2da      	uxtb	r2, r3
    c66e:	9b00      	ldr	r3, [sp, #0]
    c670:	b2db      	uxtb	r3, r3
    c672:	1ad3      	subs	r3, r2, r3
    c674:	b2db      	uxtb	r3, r3
    c676:	3330      	adds	r3, #48	; 0x30
    c678:	b2da      	uxtb	r2, r3
    c67a:	9b01      	ldr	r3, [sp, #4]
    c67c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

} // chiprev_set()
    c680:	bf00      	nop
    c682:	b004      	add	sp, #16
    c684:	4770      	bx	lr
	...

0000c688 <am_util_id_device>:
//! device type.
//
//*****************************************************************************
uint32_t
am_util_id_device(am_util_id_t *psIDDevice)
{
    c688:	b500      	push	{lr}
    c68a:	b085      	sub	sp, #20
    c68c:	9001      	str	r0, [sp, #4]

    //
    // Go get all the device (hardware) info from the HAL
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_DEVICEID, &psIDDevice->sMcuCtrlDevice);
    c68e:	9b01      	ldr	r3, [sp, #4]
    c690:	4619      	mov	r1, r3
    c692:	2001      	movs	r0, #1
    c694:	f001 fbfe 	bl	de94 <am_hal_mcuctrl_info_get>
#endif // AM_APOLLO3_MCUCTRL

    //
    // Device identification
    //
    ui32PN = psIDDevice->sMcuCtrlDevice.ui32ChipPN  &
    c698:	9b01      	ldr	r3, [sp, #4]
    c69a:	681b      	ldr	r3, [r3, #0]
    c69c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
    c6a0:	9303      	str	r3, [sp, #12]
             AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_PN_M;
    ui32ChipRev = psIDDevice->sMcuCtrlDevice.ui32ChipRev;
    c6a2:	9b01      	ldr	r3, [sp, #4]
    c6a4:	68db      	ldr	r3, [r3, #12]
    c6a6:	9302      	str	r3, [sp, #8]

    if ( (psIDDevice->sMcuCtrlDevice.ui32JedecCID   == 0xB105100D)          &&
    c6a8:	9b01      	ldr	r3, [sp, #4]
    c6aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    c6ac:	4a54      	ldr	r2, [pc, #336]	; (c800 <am_util_id_device+0x178>)
    c6ae:	4293      	cmp	r3, r2
    c6b0:	d10e      	bne.n	c6d0 <am_util_id_device+0x48>
         (psIDDevice->sMcuCtrlDevice.ui32JedecJEPID == 0x0000009B)          &&
    c6b2:	9b01      	ldr	r3, [sp, #4]
    c6b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    if ( (psIDDevice->sMcuCtrlDevice.ui32JedecCID   == 0xB105100D)          &&
    c6b6:	2b9b      	cmp	r3, #155	; 0x9b
    c6b8:	d10a      	bne.n	c6d0 <am_util_id_device+0x48>
         ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0xF00) != 0xE00) )
    c6ba:	9b01      	ldr	r3, [sp, #4]
    c6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c6be:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
         (psIDDevice->sMcuCtrlDevice.ui32JedecJEPID == 0x0000009B)          &&
    c6c2:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
    c6c6:	d003      	beq.n	c6d0 <am_util_id_device+0x48>
    {
        //
        // It's Ambiq Micro, set up the VENDORID.
        //
        psIDDevice->pui8VendorName = g_ui8VendorNameAmbq;
    c6c8:	9b01      	ldr	r3, [sp, #4]
    c6ca:	4a4e      	ldr	r2, [pc, #312]	; (c804 <am_util_id_device+0x17c>)
    c6cc:	639a      	str	r2, [r3, #56]	; 0x38
    c6ce:	e002      	b.n	c6d6 <am_util_id_device+0x4e>
    else
    {
        //
        // For now, set it as unknown vendor, but we may change it later.
        //
        psIDDevice->pui8VendorName = g_ui8VendorNameUnknown;
    c6d0:	9b01      	ldr	r3, [sp, #4]
    c6d2:	4a4d      	ldr	r2, [pc, #308]	; (c808 <am_util_id_device+0x180>)
    c6d4:	639a      	str	r2, [r3, #56]	; 0x38
    }

    if ( psIDDevice->sMcuCtrlDevice.ui32VendorID ==
    c6d6:	9b01      	ldr	r3, [sp, #4]
    c6d8:	691b      	ldr	r3, [r3, #16]
    c6da:	4a4c      	ldr	r2, [pc, #304]	; (c80c <am_util_id_device+0x184>)
    c6dc:	4293      	cmp	r3, r2
    c6de:	d102      	bne.n	c6e6 <am_util_id_device+0x5e>
         (('A' << 24) | ('M' << 16) | ('B' << 8) | ('Q' << 0)) )
    {
        //
        // VENDORID is AMBQ, so set the string pointer.
        //
        psIDDevice->pui8VendorName = g_ui8VendorNameAmbq;
    c6e0:	9b01      	ldr	r3, [sp, #4]
    c6e2:	4a48      	ldr	r2, [pc, #288]	; (c804 <am_util_id_device+0x17c>)
    c6e4:	639a      	str	r2, [r3, #56]	; 0x38
    }

    if ( ( ui32PN == AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_APOLLO )             &&
    c6e6:	9b03      	ldr	r3, [sp, #12]
    c6e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    c6ec:	d113      	bne.n	c716 <am_util_id_device+0x8e>
         ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0x0F0) == 0x0E0) )
    c6ee:	9b01      	ldr	r3, [sp, #4]
    c6f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c6f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ( ( ui32PN == AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_APOLLO )             &&
    c6f6:	2be0      	cmp	r3, #224	; 0xe0
    c6f8:	d10d      	bne.n	c716 <am_util_id_device+0x8e>
    {
        psIDDevice->ui32Device = AM_UTIL_ID_APOLLO;
    c6fa:	9b01      	ldr	r3, [sp, #4]
    c6fc:	2201      	movs	r2, #1
    c6fe:	635a      	str	r2, [r3, #52]	; 0x34
        psIDDevice->pui8DeviceName = g_DeviceNameApollo;
    c700:	9b01      	ldr	r3, [sp, #4]
    c702:	4a43      	ldr	r2, [pc, #268]	; (c810 <am_util_id_device+0x188>)
    c704:	63da      	str	r2, [r3, #60]	; 0x3c
        chiprev_set(psIDDevice, 0);
    c706:	2100      	movs	r1, #0
    c708:	9801      	ldr	r0, [sp, #4]
    c70a:	f7ff ff99 	bl	c640 <chiprev_set>

        //
        // Force the vendor name for Apollo, which did not support VENDORID.
        //
        psIDDevice->pui8VendorName = g_ui8VendorNameAmbq;
    c70e:	9b01      	ldr	r3, [sp, #4]
    c710:	4a3c      	ldr	r2, [pc, #240]	; (c804 <am_util_id_device+0x17c>)
    c712:	639a      	str	r2, [r3, #56]	; 0x38
    c714:	e06e      	b.n	c7f4 <am_util_id_device+0x16c>
    }
    else if ( ( ui32PN == AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_APOLLO2 )       &&
    c716:	9b03      	ldr	r3, [sp, #12]
    c718:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
    c71c:	d110      	bne.n	c740 <am_util_id_device+0xb8>
              ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0x0F0) == 0x0D0) )
    c71e:	9b01      	ldr	r3, [sp, #4]
    c720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c722:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    else if ( ( ui32PN == AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_APOLLO2 )       &&
    c726:	2bd0      	cmp	r3, #208	; 0xd0
    c728:	d10a      	bne.n	c740 <am_util_id_device+0xb8>
    {
        psIDDevice->ui32Device = AM_UTIL_ID_APOLLO2;
    c72a:	9b01      	ldr	r3, [sp, #4]
    c72c:	2202      	movs	r2, #2
    c72e:	635a      	str	r2, [r3, #52]	; 0x34
        psIDDevice->pui8DeviceName = g_DeviceNameApollo2;
    c730:	9b01      	ldr	r3, [sp, #4]
    c732:	4a38      	ldr	r2, [pc, #224]	; (c814 <am_util_id_device+0x18c>)
    c734:	63da      	str	r2, [r3, #60]	; 0x3c
        chiprev_set(psIDDevice, 0);
    c736:	2100      	movs	r1, #0
    c738:	9801      	ldr	r0, [sp, #4]
    c73a:	f7ff ff81 	bl	c640 <chiprev_set>
    c73e:	e059      	b.n	c7f4 <am_util_id_device+0x16c>
    }
    else if ( ( ui32PN == AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_APOLLO3 )       &&
    c740:	9b03      	ldr	r3, [sp, #12]
    c742:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    c746:	d116      	bne.n	c776 <am_util_id_device+0xee>
              ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0x0F0) == 0x0C0)   &&
    c748:	9b01      	ldr	r3, [sp, #4]
    c74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c74c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    else if ( ( ui32PN == AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_APOLLO3 )       &&
    c750:	2bc0      	cmp	r3, #192	; 0xc0
    c752:	d110      	bne.n	c776 <am_util_id_device+0xee>
              ( revmaj_get(ui32ChipRev) <= 'B' ) )
    c754:	9802      	ldr	r0, [sp, #8]
    c756:	f7ff ff67 	bl	c628 <revmaj_get>
    c75a:	4603      	mov	r3, r0
              ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0x0F0) == 0x0C0)   &&
    c75c:	2b42      	cmp	r3, #66	; 0x42
    c75e:	d80a      	bhi.n	c776 <am_util_id_device+0xee>
    {
        psIDDevice->ui32Device = AM_UTIL_ID_APOLLO3;
    c760:	9b01      	ldr	r3, [sp, #4]
    c762:	2203      	movs	r2, #3
    c764:	635a      	str	r2, [r3, #52]	; 0x34
        psIDDevice->pui8DeviceName = g_DeviceNameApollo3;
    c766:	9b01      	ldr	r3, [sp, #4]
    c768:	4a2b      	ldr	r2, [pc, #172]	; (c818 <am_util_id_device+0x190>)
    c76a:	63da      	str	r2, [r3, #60]	; 0x3c
        chiprev_set(psIDDevice, 1);
    c76c:	2101      	movs	r1, #1
    c76e:	9801      	ldr	r0, [sp, #4]
    c770:	f7ff ff66 	bl	c640 <chiprev_set>
    c774:	e03e      	b.n	c7f4 <am_util_id_device+0x16c>
    }
    else if ( ( ui32PN == AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_APOLLO3P)       &&
    c776:	9b03      	ldr	r3, [sp, #12]
    c778:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
    c77c:	d117      	bne.n	c7ae <am_util_id_device+0x126>
              ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0x0F0) == 0x0C0)   &&
    c77e:	9b01      	ldr	r3, [sp, #4]
    c780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c782:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    else if ( ( ui32PN == AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_APOLLO3P)       &&
    c786:	2bc0      	cmp	r3, #192	; 0xc0
    c788:	d111      	bne.n	c7ae <am_util_id_device+0x126>
              ( revmaj_get(ui32ChipRev) == 'C' ) )
    c78a:	9802      	ldr	r0, [sp, #8]
    c78c:	f7ff ff4c 	bl	c628 <revmaj_get>
    c790:	4603      	mov	r3, r0
              ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0x0F0) == 0x0C0)   &&
    c792:	2b43      	cmp	r3, #67	; 0x43
    c794:	d10b      	bne.n	c7ae <am_util_id_device+0x126>
    {
        psIDDevice->ui32Device = AM_UTIL_ID_APOLLO3P;
    c796:	9b01      	ldr	r3, [sp, #4]
    c798:	f240 1203 	movw	r2, #259	; 0x103
    c79c:	635a      	str	r2, [r3, #52]	; 0x34
        psIDDevice->pui8DeviceName = g_DeviceNameApollo3p;
    c79e:	9b01      	ldr	r3, [sp, #4]
    c7a0:	4a1e      	ldr	r2, [pc, #120]	; (c81c <am_util_id_device+0x194>)
    c7a2:	63da      	str	r2, [r3, #60]	; 0x3c
        chiprev_set(psIDDevice, 1);
    c7a4:	2101      	movs	r1, #1
    c7a6:	9801      	ldr	r0, [sp, #4]
    c7a8:	f7ff ff4a 	bl	c640 <chiprev_set>
    c7ac:	e022      	b.n	c7f4 <am_util_id_device+0x16c>
    }
    else if ( ( ui32PN == AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_APOLLO4)        &&
    c7ae:	9b03      	ldr	r3, [sp, #12]
    c7b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
    c7b4:	d110      	bne.n	c7d8 <am_util_id_device+0x150>
              ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0x0F0) == 0x0B0) )
    c7b6:	9b01      	ldr	r3, [sp, #4]
    c7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c7ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    else if ( ( ui32PN == AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_APOLLO4)        &&
    c7be:	2bb0      	cmp	r3, #176	; 0xb0
    c7c0:	d10a      	bne.n	c7d8 <am_util_id_device+0x150>
    {
        psIDDevice->ui32Device = AM_UTIL_ID_APOLLO4;
    c7c2:	9b01      	ldr	r3, [sp, #4]
    c7c4:	2204      	movs	r2, #4
    c7c6:	635a      	str	r2, [r3, #52]	; 0x34
        psIDDevice->pui8DeviceName = g_DeviceNameApollo4;
    c7c8:	9b01      	ldr	r3, [sp, #4]
    c7ca:	4a15      	ldr	r2, [pc, #84]	; (c820 <am_util_id_device+0x198>)
    c7cc:	63da      	str	r2, [r3, #60]	; 0x3c
        chiprev_set(psIDDevice, 1);
    c7ce:	2101      	movs	r1, #1
    c7d0:	9801      	ldr	r0, [sp, #4]
    c7d2:	f7ff ff35 	bl	c640 <chiprev_set>
    c7d6:	e00d      	b.n	c7f4 <am_util_id_device+0x16c>
    }
    else
    {
        psIDDevice->ui32Device = AM_UTIL_ID_UNKNOWN;
    c7d8:	9b01      	ldr	r3, [sp, #4]
    c7da:	2200      	movs	r2, #0
    c7dc:	635a      	str	r2, [r3, #52]	; 0x34
        psIDDevice->pui8DeviceName = g_ui8DeviceNameUnknown;
    c7de:	9b01      	ldr	r3, [sp, #4]
    c7e0:	4a10      	ldr	r2, [pc, #64]	; (c824 <am_util_id_device+0x19c>)
    c7e2:	63da      	str	r2, [r3, #60]	; 0x3c
        psIDDevice->ui8ChipRevMaj = (uint8_t)'?';
    c7e4:	9b01      	ldr	r3, [sp, #4]
    c7e6:	223f      	movs	r2, #63	; 0x3f
    c7e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        psIDDevice->ui8ChipRevMin = (uint8_t)' ';
    c7ec:	9b01      	ldr	r3, [sp, #4]
    c7ee:	2220      	movs	r2, #32
    c7f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }

    return psIDDevice->ui32Device;
    c7f4:	9b01      	ldr	r3, [sp, #4]
    c7f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
    c7f8:	4618      	mov	r0, r3
    c7fa:	b005      	add	sp, #20
    c7fc:	f85d fb04 	ldr.w	pc, [sp], #4
    c800:	b105100d 	.word	0xb105100d
    c804:	0000f030 	.word	0x0000f030
    c808:	0000f038 	.word	0x0000f038
    c80c:	414d4251 	.word	0x414d4251
    c810:	0000eff4 	.word	0x0000eff4
    c814:	0000effc 	.word	0x0000effc
    c818:	0000f004 	.word	0x0000f004
    c81c:	0000f014 	.word	0x0000f014
    c820:	0000f028 	.word	0x0000f028
    c824:	0000f040 	.word	0x0000f040

0000c828 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    c828:	b082      	sub	sp, #8
    c82a:	9001      	str	r0, [sp, #4]
    g_pfnCharPrint = pfnCharPrint;
    c82c:	4a02      	ldr	r2, [pc, #8]	; (c838 <am_util_stdio_printf_init+0x10>)
    c82e:	9b01      	ldr	r3, [sp, #4]
    c830:	6013      	str	r3, [r2, #0]
}
    c832:	bf00      	nop
    c834:	b002      	add	sp, #8
    c836:	4770      	bx	lr
    c838:	10001144 	.word	0x10001144

0000c83c <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c83c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c840:	b098      	sub	sp, #96	; 0x60
    c842:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c846:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c84a:	f04f 0000 	mov.w	r0, #0
    c84e:	f04f 0100 	mov.w	r1, #0
    c852:	0018      	movs	r0, r3
    c854:	2100      	movs	r1, #0
    c856:	ea50 0301 	orrs.w	r3, r0, r1
    c85a:	f000 80b0 	beq.w	c9be <divu64_10+0x182>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c85e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c862:	f04f 0400 	mov.w	r4, #0
    c866:	f04f 0500 	mov.w	r5, #0
    c86a:	0854      	lsrs	r4, r2, #1
    c86c:	ea44 74c3 	orr.w	r4, r4, r3, lsl #31
    c870:	085d      	lsrs	r5, r3, #1
    c872:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c876:	f04f 0000 	mov.w	r0, #0
    c87a:	f04f 0100 	mov.w	r1, #0
    c87e:	0890      	lsrs	r0, r2, #2
    c880:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
    c884:	0899      	lsrs	r1, r3, #2
    c886:	eb14 0a00 	adds.w	sl, r4, r0
    c88a:	eb45 0b01 	adc.w	fp, r5, r1
    c88e:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
        q64 += (q64 >> 4);
    c892:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c896:	f04f 0000 	mov.w	r0, #0
    c89a:	f04f 0100 	mov.w	r1, #0
    c89e:	0910      	lsrs	r0, r2, #4
    c8a0:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
    c8a4:	0919      	lsrs	r1, r3, #4
    c8a6:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c8aa:	1814      	adds	r4, r2, r0
    c8ac:	9402      	str	r4, [sp, #8]
    c8ae:	414b      	adcs	r3, r1
    c8b0:	9303      	str	r3, [sp, #12]
    c8b2:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    c8b6:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 8);
    c8ba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c8be:	f04f 0000 	mov.w	r0, #0
    c8c2:	f04f 0100 	mov.w	r1, #0
    c8c6:	0a10      	lsrs	r0, r2, #8
    c8c8:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
    c8cc:	0a19      	lsrs	r1, r3, #8
    c8ce:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c8d2:	1814      	adds	r4, r2, r0
    c8d4:	9404      	str	r4, [sp, #16]
    c8d6:	414b      	adcs	r3, r1
    c8d8:	9305      	str	r3, [sp, #20]
    c8da:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    c8de:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 16);
    c8e2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c8e6:	f04f 0000 	mov.w	r0, #0
    c8ea:	f04f 0100 	mov.w	r1, #0
    c8ee:	0c10      	lsrs	r0, r2, #16
    c8f0:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    c8f4:	0c19      	lsrs	r1, r3, #16
    c8f6:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c8fa:	1814      	adds	r4, r2, r0
    c8fc:	9406      	str	r4, [sp, #24]
    c8fe:	414b      	adcs	r3, r1
    c900:	9307      	str	r3, [sp, #28]
    c902:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
    c906:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 32);
    c90a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c90e:	f04f 0000 	mov.w	r0, #0
    c912:	f04f 0100 	mov.w	r1, #0
    c916:	0018      	movs	r0, r3
    c918:	2100      	movs	r1, #0
    c91a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c91e:	1814      	adds	r4, r2, r0
    c920:	9408      	str	r4, [sp, #32]
    c922:	414b      	adcs	r3, r1
    c924:	9309      	str	r3, [sp, #36]	; 0x24
    c926:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
    c92a:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 >>= 3;
    c92e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    c932:	f04f 0200 	mov.w	r2, #0
    c936:	f04f 0300 	mov.w	r3, #0
    c93a:	08c2      	lsrs	r2, r0, #3
    c93c:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    c940:	08cb      	lsrs	r3, r1, #3
    c942:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
        r64 = ui64Val - q64*10;
    c946:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
    c94a:	4622      	mov	r2, r4
    c94c:	462b      	mov	r3, r5
    c94e:	f04f 0000 	mov.w	r0, #0
    c952:	f04f 0100 	mov.w	r1, #0
    c956:	0099      	lsls	r1, r3, #2
    c958:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
    c95c:	0090      	lsls	r0, r2, #2
    c95e:	4602      	mov	r2, r0
    c960:	460b      	mov	r3, r1
    c962:	1916      	adds	r6, r2, r4
    c964:	eb43 0705 	adc.w	r7, r3, r5
    c968:	19b3      	adds	r3, r6, r6
    c96a:	930a      	str	r3, [sp, #40]	; 0x28
    c96c:	eb47 0307 	adc.w	r3, r7, r7
    c970:	930b      	str	r3, [sp, #44]	; 0x2c
    c972:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    c976:	4630      	mov	r0, r6
    c978:	4639      	mov	r1, r7
    c97a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c97e:	1a14      	subs	r4, r2, r0
    c980:	940c      	str	r4, [sp, #48]	; 0x30
    c982:	eb63 0301 	sbc.w	r3, r3, r1
    c986:	930d      	str	r3, [sp, #52]	; 0x34
    c988:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    c98c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
        return q64 + ((r64 + 6) >> 4);
    c990:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    c994:	f112 0806 	adds.w	r8, r2, #6
    c998:	f143 0900 	adc.w	r9, r3, #0
    c99c:	f04f 0200 	mov.w	r2, #0
    c9a0:	f04f 0300 	mov.w	r3, #0
    c9a4:	ea4f 1218 	mov.w	r2, r8, lsr #4
    c9a8:	ea42 7209 	orr.w	r2, r2, r9, lsl #28
    c9ac:	ea4f 1319 	mov.w	r3, r9, lsr #4
    c9b0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    c9b4:	1814      	adds	r4, r2, r0
    c9b6:	9400      	str	r4, [sp, #0]
    c9b8:	414b      	adcs	r3, r1
    c9ba:	9301      	str	r3, [sp, #4]
    c9bc:	e02a      	b.n	ca14 <divu64_10+0x1d8>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    c9be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c9c0:	9317      	str	r3, [sp, #92]	; 0x5c
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c9c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c9c4:	085a      	lsrs	r2, r3, #1
    c9c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c9c8:	089b      	lsrs	r3, r3, #2
    c9ca:	4413      	add	r3, r2
    c9cc:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 4);
    c9ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c9d0:	091b      	lsrs	r3, r3, #4
    c9d2:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c9d4:	4413      	add	r3, r2
    c9d6:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 8);
    c9d8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c9da:	0a1b      	lsrs	r3, r3, #8
    c9dc:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c9de:	4413      	add	r3, r2
    c9e0:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 16);
    c9e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c9e4:	0c1b      	lsrs	r3, r3, #16
    c9e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c9e8:	4413      	add	r3, r2
    c9ea:	9316      	str	r3, [sp, #88]	; 0x58
        q32 >>= 3;
    c9ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c9ee:	08db      	lsrs	r3, r3, #3
    c9f0:	9316      	str	r3, [sp, #88]	; 0x58
        r32 = ui32Val - q32*10;
    c9f2:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c9f4:	4613      	mov	r3, r2
    c9f6:	009b      	lsls	r3, r3, #2
    c9f8:	4413      	add	r3, r2
    c9fa:	005b      	lsls	r3, r3, #1
    c9fc:	461a      	mov	r2, r3
    c9fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ca00:	1a9b      	subs	r3, r3, r2
    ca02:	9315      	str	r3, [sp, #84]	; 0x54
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    ca04:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ca06:	3306      	adds	r3, #6
    ca08:	091a      	lsrs	r2, r3, #4
    ca0a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    ca0c:	4413      	add	r3, r2
    ca0e:	2200      	movs	r2, #0
    ca10:	9300      	str	r3, [sp, #0]
    ca12:	9201      	str	r2, [sp, #4]
    }
}
    ca14:	e9dd 2300 	ldrd	r2, r3, [sp]
    ca18:	4610      	mov	r0, r2
    ca1a:	4619      	mov	r1, r3
    ca1c:	b018      	add	sp, #96	; 0x60
    ca1e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    ca22:	4770      	bx	lr

0000ca24 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    ca24:	b500      	push	{lr}
    ca26:	b085      	sub	sp, #20
    ca28:	e9cd 0100 	strd	r0, r1, [sp]
    int iNDigits = ui64Val ? 0 : 1;
    ca2c:	9a00      	ldr	r2, [sp, #0]
    ca2e:	9b01      	ldr	r3, [sp, #4]
    ca30:	4313      	orrs	r3, r2
    ca32:	2b00      	cmp	r3, #0
    ca34:	bf0c      	ite	eq
    ca36:	2301      	moveq	r3, #1
    ca38:	2300      	movne	r3, #0
    ca3a:	b2db      	uxtb	r3, r3
    ca3c:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    ca3e:	e008      	b.n	ca52 <ndigits_in_u64+0x2e>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    ca40:	e9dd 0100 	ldrd	r0, r1, [sp]
    ca44:	f7ff fefa 	bl	c83c <divu64_10>
    ca48:	e9cd 0100 	strd	r0, r1, [sp]
        ++iNDigits;
    ca4c:	9b03      	ldr	r3, [sp, #12]
    ca4e:	3301      	adds	r3, #1
    ca50:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    ca52:	e9dd 2300 	ldrd	r2, r3, [sp]
    ca56:	4313      	orrs	r3, r2
    ca58:	d1f2      	bne.n	ca40 <ndigits_in_u64+0x1c>
    }

    return iNDigits;
    ca5a:	9b03      	ldr	r3, [sp, #12]
}
    ca5c:	4618      	mov	r0, r3
    ca5e:	b005      	add	sp, #20
    ca60:	f85d fb04 	ldr.w	pc, [sp], #4

0000ca64 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    ca64:	b530      	push	{r4, r5, lr}
    ca66:	b083      	sub	sp, #12
    ca68:	e9cd 0100 	strd	r0, r1, [sp]
    if ( i64Val < 0 )
    ca6c:	e9dd 2300 	ldrd	r2, r3, [sp]
    ca70:	2b00      	cmp	r3, #0
    ca72:	da07      	bge.n	ca84 <ndigits_in_i64+0x20>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    ca74:	e9dd 2300 	ldrd	r2, r3, [sp]
    ca78:	2100      	movs	r1, #0
    ca7a:	4254      	negs	r4, r2
    ca7c:	eb61 0503 	sbc.w	r5, r1, r3
    ca80:	e9cd 4500 	strd	r4, r5, [sp]
    }

    return ndigits_in_u64((uint64_t) i64Val);
    ca84:	e9dd 2300 	ldrd	r2, r3, [sp]
    ca88:	4610      	mov	r0, r2
    ca8a:	4619      	mov	r1, r3
    ca8c:	f7ff ffca 	bl	ca24 <ndigits_in_u64>
    ca90:	4603      	mov	r3, r0
}
    ca92:	4618      	mov	r0, r3
    ca94:	b003      	add	sp, #12
    ca96:	bd30      	pop	{r4, r5, pc}

0000ca98 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    ca98:	b084      	sub	sp, #16
    ca9a:	e9cd 0100 	strd	r0, r1, [sp]
    int iDigits = ui64Val ? 0 : 1;
    ca9e:	9a00      	ldr	r2, [sp, #0]
    caa0:	9b01      	ldr	r3, [sp, #4]
    caa2:	4313      	orrs	r3, r2
    caa4:	2b00      	cmp	r3, #0
    caa6:	bf0c      	ite	eq
    caa8:	2301      	moveq	r3, #1
    caaa:	2300      	movne	r3, #0
    caac:	b2db      	uxtb	r3, r3
    caae:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    cab0:	e00e      	b.n	cad0 <ndigits_in_hex+0x38>
    {
        ui64Val >>= 4;
    cab2:	e9dd 0100 	ldrd	r0, r1, [sp]
    cab6:	f04f 0200 	mov.w	r2, #0
    caba:	f04f 0300 	mov.w	r3, #0
    cabe:	0902      	lsrs	r2, r0, #4
    cac0:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    cac4:	090b      	lsrs	r3, r1, #4
    cac6:	e9cd 2300 	strd	r2, r3, [sp]
        ++iDigits;
    caca:	9b03      	ldr	r3, [sp, #12]
    cacc:	3301      	adds	r3, #1
    cace:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    cad0:	e9dd 2300 	ldrd	r2, r3, [sp]
    cad4:	4313      	orrs	r3, r2
    cad6:	d1ec      	bne.n	cab2 <ndigits_in_hex+0x1a>
    }

    return iDigits;
    cad8:	9b03      	ldr	r3, [sp, #12]
}
    cada:	4618      	mov	r0, r3
    cadc:	b004      	add	sp, #16
    cade:	4770      	bx	lr

0000cae0 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    cae0:	b086      	sub	sp, #24
    cae2:	9001      	str	r0, [sp, #4]
    cae4:	9100      	str	r1, [sp, #0]
    bool bNeg = false;
    cae6:	2300      	movs	r3, #0
    cae8:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    caec:	2300      	movs	r3, #0
    caee:	9304      	str	r3, [sp, #16]
    caf0:	2300      	movs	r3, #0
    caf2:	9303      	str	r3, [sp, #12]

    if ( *pcStr == '-')
    caf4:	9b01      	ldr	r3, [sp, #4]
    caf6:	781b      	ldrb	r3, [r3, #0]
    caf8:	2b2d      	cmp	r3, #45	; 0x2d
    cafa:	d11c      	bne.n	cb36 <decstr_to_int+0x56>
    {
        bNeg = true;
    cafc:	2301      	movs	r3, #1
    cafe:	f88d 3017 	strb.w	r3, [sp, #23]
        pcStr++;
    cb02:	9b01      	ldr	r3, [sp, #4]
    cb04:	3301      	adds	r3, #1
    cb06:	9301      	str	r3, [sp, #4]
        uCnt++;
    cb08:	9b03      	ldr	r3, [sp, #12]
    cb0a:	3301      	adds	r3, #1
    cb0c:	9303      	str	r3, [sp, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cb0e:	e012      	b.n	cb36 <decstr_to_int+0x56>
    {
        ++uCnt;
    cb10:	9b03      	ldr	r3, [sp, #12]
    cb12:	3301      	adds	r3, #1
    cb14:	9303      	str	r3, [sp, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    cb16:	9a04      	ldr	r2, [sp, #16]
    cb18:	4613      	mov	r3, r2
    cb1a:	009b      	lsls	r3, r3, #2
    cb1c:	4413      	add	r3, r2
    cb1e:	005b      	lsls	r3, r3, #1
    cb20:	9304      	str	r3, [sp, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    cb22:	9b01      	ldr	r3, [sp, #4]
    cb24:	781b      	ldrb	r3, [r3, #0]
    cb26:	461a      	mov	r2, r3
    cb28:	9b04      	ldr	r3, [sp, #16]
    cb2a:	4413      	add	r3, r2
    cb2c:	3b30      	subs	r3, #48	; 0x30
    cb2e:	9304      	str	r3, [sp, #16]
        pcStr++;
    cb30:	9b01      	ldr	r3, [sp, #4]
    cb32:	3301      	adds	r3, #1
    cb34:	9301      	str	r3, [sp, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cb36:	9b01      	ldr	r3, [sp, #4]
    cb38:	781b      	ldrb	r3, [r3, #0]
    cb3a:	2b2f      	cmp	r3, #47	; 0x2f
    cb3c:	d903      	bls.n	cb46 <decstr_to_int+0x66>
    cb3e:	9b01      	ldr	r3, [sp, #4]
    cb40:	781b      	ldrb	r3, [r3, #0]
    cb42:	2b39      	cmp	r3, #57	; 0x39
    cb44:	d9e4      	bls.n	cb10 <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    cb46:	9b00      	ldr	r3, [sp, #0]
    cb48:	2b00      	cmp	r3, #0
    cb4a:	d002      	beq.n	cb52 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    cb4c:	9b00      	ldr	r3, [sp, #0]
    cb4e:	9a03      	ldr	r2, [sp, #12]
    cb50:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    cb52:	f89d 3017 	ldrb.w	r3, [sp, #23]
    cb56:	2b00      	cmp	r3, #0
    cb58:	d002      	beq.n	cb60 <decstr_to_int+0x80>
    cb5a:	9b04      	ldr	r3, [sp, #16]
    cb5c:	425b      	negs	r3, r3
    cb5e:	e000      	b.n	cb62 <decstr_to_int+0x82>
    cb60:	9b04      	ldr	r3, [sp, #16]
}
    cb62:	4618      	mov	r0, r3
    cb64:	b006      	add	sp, #24
    cb66:	4770      	bx	lr

0000cb68 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    cb68:	b500      	push	{lr}
    cb6a:	b091      	sub	sp, #68	; 0x44
    cb6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    cb70:	9201      	str	r2, [sp, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    cb72:	2300      	movs	r3, #0
    cb74:	930f      	str	r3, [sp, #60]	; 0x3c
    cb76:	2300      	movs	r3, #0
    cb78:	930e      	str	r3, [sp, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    cb7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    cb7e:	f7ff fe5d 	bl	c83c <divu64_10>
    cb82:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    cb86:	9902      	ldr	r1, [sp, #8]
    cb88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cb8a:	4613      	mov	r3, r2
    cb8c:	009b      	lsls	r3, r3, #2
    cb8e:	4413      	add	r3, r2
    cb90:	005b      	lsls	r3, r3, #1
    cb92:	1acb      	subs	r3, r1, r3
    cb94:	930b      	str	r3, [sp, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    cb96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb98:	b2da      	uxtb	r2, r3
    cb9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cb9c:	1c59      	adds	r1, r3, #1
    cb9e:	910f      	str	r1, [sp, #60]	; 0x3c
    cba0:	3230      	adds	r2, #48	; 0x30
    cba2:	b2d2      	uxtb	r2, r2
    cba4:	3340      	adds	r3, #64	; 0x40
    cba6:	446b      	add	r3, sp
    cba8:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    cbac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    cbb0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    } while ( ui64Val );
    cbb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cbb8:	4313      	orrs	r3, r2
    cbba:	d1de      	bne.n	cb7a <uint64_to_str+0x12>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    cbbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cbbe:	930e      	str	r3, [sp, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    cbc0:	9b01      	ldr	r3, [sp, #4]
    cbc2:	2b00      	cmp	r3, #0
    cbc4:	d010      	beq.n	cbe8 <uint64_to_str+0x80>
    {
        while ( ix-- )
    cbc6:	e007      	b.n	cbd8 <uint64_to_str+0x70>
        {
            *pcBuf++ = tbuf[ix];
    cbc8:	9b01      	ldr	r3, [sp, #4]
    cbca:	1c5a      	adds	r2, r3, #1
    cbcc:	9201      	str	r2, [sp, #4]
    cbce:	a904      	add	r1, sp, #16
    cbd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    cbd2:	440a      	add	r2, r1
    cbd4:	7812      	ldrb	r2, [r2, #0]
    cbd6:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    cbd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cbda:	1e5a      	subs	r2, r3, #1
    cbdc:	920f      	str	r2, [sp, #60]	; 0x3c
    cbde:	2b00      	cmp	r3, #0
    cbe0:	d1f2      	bne.n	cbc8 <uint64_to_str+0x60>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    cbe2:	9b01      	ldr	r3, [sp, #4]
    cbe4:	2200      	movs	r2, #0
    cbe6:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    cbe8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
}
    cbea:	4618      	mov	r0, r3
    cbec:	b011      	add	sp, #68	; 0x44
    cbee:	f85d fb04 	ldr.w	pc, [sp], #4

0000cbf2 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    cbf2:	b08c      	sub	sp, #48	; 0x30
    cbf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
    cbf8:	9201      	str	r2, [sp, #4]
    cbfa:	f88d 3003 	strb.w	r3, [sp, #3]
    int iNumDig, ix = 0;
    cbfe:	2300      	movs	r3, #0
    cc00:	930b      	str	r3, [sp, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    cc02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cc06:	4313      	orrs	r3, r2
    cc08:	d135      	bne.n	cc76 <uint64_to_hexstr+0x84>
    {
        tbuf[ix++] = '0';   // Print a '0'
    cc0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cc0c:	1c5a      	adds	r2, r3, #1
    cc0e:	920b      	str	r2, [sp, #44]	; 0x2c
    cc10:	3330      	adds	r3, #48	; 0x30
    cc12:	446b      	add	r3, sp
    cc14:	2230      	movs	r2, #48	; 0x30
    cc16:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    cc1a:	e02c      	b.n	cc76 <uint64_to_hexstr+0x84>
    {
        cCh = ui64Val & 0xf;
    cc1c:	f89d 3008 	ldrb.w	r3, [sp, #8]
    cc20:	f003 030f 	and.w	r3, r3, #15
    cc24:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    cc28:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    cc2c:	2b09      	cmp	r3, #9
    cc2e:	d90b      	bls.n	cc48 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    cc30:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cc34:	2b00      	cmp	r3, #0
    cc36:	d001      	beq.n	cc3c <uint64_to_hexstr+0x4a>
    cc38:	2227      	movs	r2, #39	; 0x27
    cc3a:	e000      	b.n	cc3e <uint64_to_hexstr+0x4c>
    cc3c:	2207      	movs	r2, #7
    cc3e:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    cc42:	4413      	add	r3, r2
    cc44:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    cc48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cc4a:	1c5a      	adds	r2, r3, #1
    cc4c:	920b      	str	r2, [sp, #44]	; 0x2c
    cc4e:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    cc52:	3230      	adds	r2, #48	; 0x30
    cc54:	b2d2      	uxtb	r2, r2
    cc56:	3330      	adds	r3, #48	; 0x30
    cc58:	446b      	add	r3, sp
    cc5a:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    cc5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    cc62:	f04f 0200 	mov.w	r2, #0
    cc66:	f04f 0300 	mov.w	r3, #0
    cc6a:	0902      	lsrs	r2, r0, #4
    cc6c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    cc70:	090b      	lsrs	r3, r1, #4
    cc72:	e9cd 2302 	strd	r2, r3, [sp, #8]
    while ( ui64Val )
    cc76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cc7a:	4313      	orrs	r3, r2
    cc7c:	d1ce      	bne.n	cc1c <uint64_to_hexstr+0x2a>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    cc7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cc80:	9309      	str	r3, [sp, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    cc82:	9b01      	ldr	r3, [sp, #4]
    cc84:	2b00      	cmp	r3, #0
    cc86:	d010      	beq.n	ccaa <uint64_to_hexstr+0xb8>
    {
        while (ix--)
    cc88:	e007      	b.n	cc9a <uint64_to_hexstr+0xa8>
        {
            *pcBuf++ = tbuf[ix];
    cc8a:	9b01      	ldr	r3, [sp, #4]
    cc8c:	1c5a      	adds	r2, r3, #1
    cc8e:	9201      	str	r2, [sp, #4]
    cc90:	a904      	add	r1, sp, #16
    cc92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cc94:	440a      	add	r2, r1
    cc96:	7812      	ldrb	r2, [r2, #0]
    cc98:	701a      	strb	r2, [r3, #0]
        while (ix--)
    cc9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cc9c:	1e5a      	subs	r2, r3, #1
    cc9e:	920b      	str	r2, [sp, #44]	; 0x2c
    cca0:	2b00      	cmp	r3, #0
    cca2:	d1f2      	bne.n	cc8a <uint64_to_hexstr+0x98>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    cca4:	9b01      	ldr	r3, [sp, #4]
    cca6:	2200      	movs	r2, #0
    cca8:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    ccaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    ccac:	4618      	mov	r0, r3
    ccae:	b00c      	add	sp, #48	; 0x30
    ccb0:	4770      	bx	lr

0000ccb2 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    ccb2:	b084      	sub	sp, #16
    ccb4:	9001      	str	r0, [sp, #4]
    uint32_t ui32RetVal = 0;
    ccb6:	2300      	movs	r3, #0
    ccb8:	9303      	str	r3, [sp, #12]
    if ( !pcBuf )
    ccba:	9b01      	ldr	r3, [sp, #4]
    ccbc:	2b00      	cmp	r3, #0
    ccbe:	d104      	bne.n	ccca <simple_strlen+0x18>
    {
        return ui32RetVal;
    ccc0:	9b03      	ldr	r3, [sp, #12]
    ccc2:	e009      	b.n	ccd8 <simple_strlen+0x26>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    ccc4:	9b03      	ldr	r3, [sp, #12]
    ccc6:	3301      	adds	r3, #1
    ccc8:	9303      	str	r3, [sp, #12]
    while ( *pcBuf++ )
    ccca:	9b01      	ldr	r3, [sp, #4]
    cccc:	1c5a      	adds	r2, r3, #1
    ccce:	9201      	str	r2, [sp, #4]
    ccd0:	781b      	ldrb	r3, [r3, #0]
    ccd2:	2b00      	cmp	r3, #0
    ccd4:	d1f6      	bne.n	ccc4 <simple_strlen+0x12>
    }
    return ui32RetVal;
    ccd6:	9b03      	ldr	r3, [sp, #12]
}
    ccd8:	4618      	mov	r0, r3
    ccda:	b004      	add	sp, #16
    ccdc:	4770      	bx	lr

0000ccde <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    ccde:	b086      	sub	sp, #24
    cce0:	9003      	str	r0, [sp, #12]
    cce2:	460b      	mov	r3, r1
    cce4:	9201      	str	r2, [sp, #4]
    cce6:	f88d 300b 	strb.w	r3, [sp, #11]
    int32_t i32Cnt = 0;
    ccea:	2300      	movs	r3, #0
    ccec:	9305      	str	r3, [sp, #20]

    if ( i32NumChars <= 0 )
    ccee:	9b01      	ldr	r3, [sp, #4]
    ccf0:	2b00      	cmp	r3, #0
    ccf2:	dc0d      	bgt.n	cd10 <padbuffer+0x32>
    {
        return i32Cnt;
    ccf4:	9b05      	ldr	r3, [sp, #20]
    ccf6:	e011      	b.n	cd1c <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    ccf8:	9b03      	ldr	r3, [sp, #12]
    ccfa:	2b00      	cmp	r3, #0
    ccfc:	d005      	beq.n	cd0a <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    ccfe:	9b03      	ldr	r3, [sp, #12]
    cd00:	1c5a      	adds	r2, r3, #1
    cd02:	9203      	str	r2, [sp, #12]
    cd04:	f89d 200b 	ldrb.w	r2, [sp, #11]
    cd08:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    cd0a:	9b05      	ldr	r3, [sp, #20]
    cd0c:	3301      	adds	r3, #1
    cd0e:	9305      	str	r3, [sp, #20]
    while ( i32NumChars-- )
    cd10:	9b01      	ldr	r3, [sp, #4]
    cd12:	1e5a      	subs	r2, r3, #1
    cd14:	9201      	str	r2, [sp, #4]
    cd16:	2b00      	cmp	r3, #0
    cd18:	d1ee      	bne.n	ccf8 <padbuffer+0x1a>
    }

    return i32Cnt;
    cd1a:	9b05      	ldr	r3, [sp, #20]
}
    cd1c:	4618      	mov	r0, r3
    cd1e:	b006      	add	sp, #24
    cd20:	4770      	bx	lr
	...

0000cd24 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    cd24:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd26:	b08f      	sub	sp, #60	; 0x3c
    cd28:	ed8d 0a03 	vstr	s0, [sp, #12]
    cd2c:	9002      	str	r0, [sp, #8]
    cd2e:	9101      	str	r1, [sp, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    cd30:	9b02      	ldr	r3, [sp, #8]
    cd32:	681b      	ldr	r3, [r3, #0]
    cd34:	9309      	str	r3, [sp, #36]	; 0x24
    if (iBufSize < 4)
    cd36:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cd38:	2b03      	cmp	r3, #3
    cd3a:	dc02      	bgt.n	cd42 <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    cd3c:	f06f 0302 	mvn.w	r3, #2
    cd40:	e0e9      	b.n	cf16 <ftoa+0x1f2>
    }

    if (fValue == 0.0f)
    cd42:	eddd 7a03 	vldr	s15, [sp, #12]
    cd46:	eef5 7a40 	vcmp.f32	s15, #0.0
    cd4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cd4e:	d104      	bne.n	cd5a <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    cd50:	9b02      	ldr	r3, [sp, #8]
    cd52:	4a72      	ldr	r2, [pc, #456]	; (cf1c <ftoa+0x1f8>)
    cd54:	601a      	str	r2, [r3, #0]
        return 3;
    cd56:	2303      	movs	r3, #3
    cd58:	e0dd      	b.n	cf16 <ftoa+0x1f2>
    }

    pcBufInitial = pcBuf;
    cd5a:	9b02      	ldr	r3, [sp, #8]
    cd5c:	9308      	str	r3, [sp, #32]

    unFloatValue.F = fValue;
    cd5e:	9b03      	ldr	r3, [sp, #12]
    cd60:	9304      	str	r3, [sp, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    cd62:	9b04      	ldr	r3, [sp, #16]
    cd64:	15db      	asrs	r3, r3, #23
    cd66:	b2db      	uxtb	r3, r3
    cd68:	3b7f      	subs	r3, #127	; 0x7f
    cd6a:	9307      	str	r3, [sp, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    cd6c:	9b04      	ldr	r3, [sp, #16]
    cd6e:	f3c3 0316 	ubfx	r3, r3, #0, #23
    cd72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    cd76:	9306      	str	r3, [sp, #24]
    i32FracPart = 0;
    cd78:	2300      	movs	r3, #0
    cd7a:	930c      	str	r3, [sp, #48]	; 0x30
    i32IntPart = 0;
    cd7c:	2300      	movs	r3, #0
    cd7e:	930d      	str	r3, [sp, #52]	; 0x34

    if (iExp2 >= 31)
    cd80:	9b07      	ldr	r3, [sp, #28]
    cd82:	2b1e      	cmp	r3, #30
    cd84:	dd02      	ble.n	cd8c <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    cd86:	f06f 0301 	mvn.w	r3, #1
    cd8a:	e0c4      	b.n	cf16 <ftoa+0x1f2>
    }
    else if (iExp2 < -23)
    cd8c:	9b07      	ldr	r3, [sp, #28]
    cd8e:	f113 0f17 	cmn.w	r3, #23
    cd92:	da02      	bge.n	cd9a <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    cd94:	f04f 33ff 	mov.w	r3, #4294967295
    cd98:	e0bd      	b.n	cf16 <ftoa+0x1f2>
    }
    else if (iExp2 >= 23)
    cd9a:	9b07      	ldr	r3, [sp, #28]
    cd9c:	2b16      	cmp	r3, #22
    cd9e:	dd06      	ble.n	cdae <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    cda0:	9b07      	ldr	r3, [sp, #28]
    cda2:	3b17      	subs	r3, #23
    cda4:	9a06      	ldr	r2, [sp, #24]
    cda6:	fa02 f303 	lsl.w	r3, r2, r3
    cdaa:	930d      	str	r3, [sp, #52]	; 0x34
    cdac:	e01a      	b.n	cde4 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    cdae:	9b07      	ldr	r3, [sp, #28]
    cdb0:	2b00      	cmp	r3, #0
    cdb2:	db0f      	blt.n	cdd4 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    cdb4:	9b07      	ldr	r3, [sp, #28]
    cdb6:	f1c3 0317 	rsb	r3, r3, #23
    cdba:	9a06      	ldr	r2, [sp, #24]
    cdbc:	fa42 f303 	asr.w	r3, r2, r3
    cdc0:	930d      	str	r3, [sp, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    cdc2:	9b07      	ldr	r3, [sp, #28]
    cdc4:	3301      	adds	r3, #1
    cdc6:	9a06      	ldr	r2, [sp, #24]
    cdc8:	fa02 f303 	lsl.w	r3, r2, r3
    cdcc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cdd0:	930c      	str	r3, [sp, #48]	; 0x30
    cdd2:	e007      	b.n	cde4 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    cdd4:	9b06      	ldr	r3, [sp, #24]
    cdd6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    cdda:	9b07      	ldr	r3, [sp, #28]
    cddc:	43db      	mvns	r3, r3
    cdde:	fa42 f303 	asr.w	r3, r2, r3
    cde2:	930c      	str	r3, [sp, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    cde4:	9b04      	ldr	r3, [sp, #16]
    cde6:	2b00      	cmp	r3, #0
    cde8:	da04      	bge.n	cdf4 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    cdea:	9b02      	ldr	r3, [sp, #8]
    cdec:	1c5a      	adds	r2, r3, #1
    cdee:	9202      	str	r2, [sp, #8]
    cdf0:	222d      	movs	r2, #45	; 0x2d
    cdf2:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    cdf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cdf6:	2b00      	cmp	r3, #0
    cdf8:	d105      	bne.n	ce06 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    cdfa:	9b02      	ldr	r3, [sp, #8]
    cdfc:	1c5a      	adds	r2, r3, #1
    cdfe:	9202      	str	r2, [sp, #8]
    ce00:	2230      	movs	r2, #48	; 0x30
    ce02:	701a      	strb	r2, [r3, #0]
    ce04:	e023      	b.n	ce4e <ftoa+0x12a>
    }
    else
    {
        if (i32IntPart > 0)
    ce06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ce08:	2b00      	cmp	r3, #0
    ce0a:	dd09      	ble.n	ce20 <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
    ce0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ce0e:	17da      	asrs	r2, r3, #31
    ce10:	461e      	mov	r6, r3
    ce12:	4617      	mov	r7, r2
    ce14:	9a02      	ldr	r2, [sp, #8]
    ce16:	4630      	mov	r0, r6
    ce18:	4639      	mov	r1, r7
    ce1a:	f7ff fea5 	bl	cb68 <uint64_to_str>
    ce1e:	e012      	b.n	ce46 <ftoa+0x122>
        }
        else
        {
            *pcBuf++ = '-';
    ce20:	9b02      	ldr	r3, [sp, #8]
    ce22:	1c5a      	adds	r2, r3, #1
    ce24:	9202      	str	r2, [sp, #8]
    ce26:	222d      	movs	r2, #45	; 0x2d
    ce28:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    ce2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ce2c:	425b      	negs	r3, r3
    ce2e:	17da      	asrs	r2, r3, #31
    ce30:	461c      	mov	r4, r3
    ce32:	4615      	mov	r5, r2
    ce34:	9a02      	ldr	r2, [sp, #8]
    ce36:	4620      	mov	r0, r4
    ce38:	4629      	mov	r1, r5
    ce3a:	f7ff fe95 	bl	cb68 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    ce3e:	e002      	b.n	ce46 <ftoa+0x122>
        {
            pcBuf++;
    ce40:	9b02      	ldr	r3, [sp, #8]
    ce42:	3301      	adds	r3, #1
    ce44:	9302      	str	r3, [sp, #8]
        while (*pcBuf)    // Get to end of new string
    ce46:	9b02      	ldr	r3, [sp, #8]
    ce48:	781b      	ldrb	r3, [r3, #0]
    ce4a:	2b00      	cmp	r3, #0
    ce4c:	d1f8      	bne.n	ce40 <ftoa+0x11c>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    ce4e:	9b02      	ldr	r3, [sp, #8]
    ce50:	1c5a      	adds	r2, r3, #1
    ce52:	9202      	str	r2, [sp, #8]
    ce54:	222e      	movs	r2, #46	; 0x2e
    ce56:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    ce58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ce5a:	2b00      	cmp	r3, #0
    ce5c:	d105      	bne.n	ce6a <ftoa+0x146>
    {
        *pcBuf++ = '0';
    ce5e:	9b02      	ldr	r3, [sp, #8]
    ce60:	1c5a      	adds	r2, r3, #1
    ce62:	9202      	str	r2, [sp, #8]
    ce64:	2230      	movs	r2, #48	; 0x30
    ce66:	701a      	strb	r2, [r3, #0]
    ce68:	e04f      	b.n	cf0a <ftoa+0x1e6>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    ce6a:	9a02      	ldr	r2, [sp, #8]
    ce6c:	9b08      	ldr	r3, [sp, #32]
    ce6e:	1ad3      	subs	r3, r2, r3
    ce70:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ce72:	1ad3      	subs	r3, r2, r3
    ce74:	3b01      	subs	r3, #1
    ce76:	9305      	str	r3, [sp, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    ce78:	9a05      	ldr	r2, [sp, #20]
    ce7a:	9b01      	ldr	r3, [sp, #4]
    ce7c:	4293      	cmp	r3, r2
    ce7e:	bfa8      	it	ge
    ce80:	4613      	movge	r3, r2
    ce82:	9305      	str	r3, [sp, #20]

        for (jx = 0; jx < iMax; jx++)
    ce84:	2300      	movs	r3, #0
    ce86:	930a      	str	r3, [sp, #40]	; 0x28
    ce88:	e015      	b.n	ceb6 <ftoa+0x192>
        {
            i32FracPart *= 10;
    ce8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ce8c:	4613      	mov	r3, r2
    ce8e:	009b      	lsls	r3, r3, #2
    ce90:	4413      	add	r3, r2
    ce92:	005b      	lsls	r3, r3, #1
    ce94:	930c      	str	r3, [sp, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    ce96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ce98:	161b      	asrs	r3, r3, #24
    ce9a:	b2da      	uxtb	r2, r3
    ce9c:	9b02      	ldr	r3, [sp, #8]
    ce9e:	1c59      	adds	r1, r3, #1
    cea0:	9102      	str	r1, [sp, #8]
    cea2:	3230      	adds	r2, #48	; 0x30
    cea4:	b2d2      	uxtb	r2, r2
    cea6:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    cea8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ceaa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ceae:	930c      	str	r3, [sp, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    ceb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ceb2:	3301      	adds	r3, #1
    ceb4:	930a      	str	r3, [sp, #40]	; 0x28
    ceb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ceb8:	9b05      	ldr	r3, [sp, #20]
    ceba:	429a      	cmp	r2, r3
    cebc:	dbe5      	blt.n	ce8a <ftoa+0x166>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    cebe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cec0:	4613      	mov	r3, r2
    cec2:	009b      	lsls	r3, r3, #2
    cec4:	4413      	add	r3, r2
    cec6:	005b      	lsls	r3, r3, #1
    cec8:	161b      	asrs	r3, r3, #24
    ceca:	2b04      	cmp	r3, #4
    cecc:	dd1d      	ble.n	cf0a <ftoa+0x1e6>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    cece:	9b02      	ldr	r3, [sp, #8]
    ced0:	3b01      	subs	r3, #1
    ced2:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    ced4:	e015      	b.n	cf02 <ftoa+0x1de>
            {
                if ( *pcBuftmp == '.' )
    ced6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ced8:	781b      	ldrb	r3, [r3, #0]
    ceda:	2b2e      	cmp	r3, #46	; 0x2e
    cedc:	d00e      	beq.n	cefc <ftoa+0x1d8>
                {
                }
                else if ( *pcBuftmp == '9' )
    cede:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cee0:	781b      	ldrb	r3, [r3, #0]
    cee2:	2b39      	cmp	r3, #57	; 0x39
    cee4:	d103      	bne.n	ceee <ftoa+0x1ca>
                {
                    *pcBuftmp = '0';
    cee6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cee8:	2230      	movs	r2, #48	; 0x30
    ceea:	701a      	strb	r2, [r3, #0]
    ceec:	e006      	b.n	cefc <ftoa+0x1d8>
                }
                else
                {
                    *pcBuftmp += 1;
    ceee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cef0:	781b      	ldrb	r3, [r3, #0]
    cef2:	3301      	adds	r3, #1
    cef4:	b2da      	uxtb	r2, r3
    cef6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cef8:	701a      	strb	r2, [r3, #0]
                    break;
    cefa:	e006      	b.n	cf0a <ftoa+0x1e6>
                }
                pcBuftmp--;
    cefc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cefe:	3b01      	subs	r3, #1
    cf00:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cf02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cf04:	9b08      	ldr	r3, [sp, #32]
    cf06:	429a      	cmp	r2, r3
    cf08:	d2e5      	bcs.n	ced6 <ftoa+0x1b2>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    cf0a:	9b02      	ldr	r3, [sp, #8]
    cf0c:	2200      	movs	r2, #0
    cf0e:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    cf10:	9a02      	ldr	r2, [sp, #8]
    cf12:	9b08      	ldr	r3, [sp, #32]
    cf14:	1ad3      	subs	r3, r2, r3
} // ftoa()
    cf16:	4618      	mov	r0, r3
    cf18:	b00f      	add	sp, #60	; 0x3c
    cf1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cf1c:	00302e30 	.word	0x00302e30

0000cf20 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    cf20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cf24:	b097      	sub	sp, #92	; 0x5c
    cf26:	9003      	str	r0, [sp, #12]
    cf28:	9102      	str	r1, [sp, #8]
    cf2a:	9201      	str	r2, [sp, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    cf2c:	2300      	movs	r3, #0
    cf2e:	9311      	str	r3, [sp, #68]	; 0x44
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    cf30:	2300      	movs	r3, #0
    cf32:	930b      	str	r3, [sp, #44]	; 0x2c

    while ( *pcFmt != 0x0 )
    cf34:	e2e9      	b.n	d50a <am_util_stdio_vsprintf+0x5ea>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    cf36:	2306      	movs	r3, #6
    cf38:	930e      	str	r3, [sp, #56]	; 0x38

        if ( *pcFmt != '%' )
    cf3a:	9b02      	ldr	r3, [sp, #8]
    cf3c:	781b      	ldrb	r3, [r3, #0]
    cf3e:	2b25      	cmp	r3, #37	; 0x25
    cf40:	d01f      	beq.n	cf82 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    cf42:	9b03      	ldr	r3, [sp, #12]
    cf44:	2b00      	cmp	r3, #0
    cf46:	d015      	beq.n	cf74 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    cf48:	9b02      	ldr	r3, [sp, #8]
    cf4a:	781b      	ldrb	r3, [r3, #0]
    cf4c:	2b0a      	cmp	r3, #10
    cf4e:	d10b      	bne.n	cf68 <am_util_stdio_vsprintf+0x48>
    cf50:	4ba8      	ldr	r3, [pc, #672]	; (d1f4 <am_util_stdio_vsprintf+0x2d4>)
    cf52:	781b      	ldrb	r3, [r3, #0]
    cf54:	2b00      	cmp	r3, #0
    cf56:	d007      	beq.n	cf68 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    cf58:	9b03      	ldr	r3, [sp, #12]
    cf5a:	1c5a      	adds	r2, r3, #1
    cf5c:	9203      	str	r2, [sp, #12]
    cf5e:	220d      	movs	r2, #13
    cf60:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    cf62:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cf64:	3301      	adds	r3, #1
    cf66:	9311      	str	r3, [sp, #68]	; 0x44
                }
                *pcBuf++ = *pcFmt;
    cf68:	9b03      	ldr	r3, [sp, #12]
    cf6a:	1c5a      	adds	r2, r3, #1
    cf6c:	9203      	str	r2, [sp, #12]
    cf6e:	9a02      	ldr	r2, [sp, #8]
    cf70:	7812      	ldrb	r2, [r2, #0]
    cf72:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    cf74:	9b02      	ldr	r3, [sp, #8]
    cf76:	3301      	adds	r3, #1
    cf78:	9302      	str	r3, [sp, #8]
            ++ui32CharCnt;
    cf7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cf7c:	3301      	adds	r3, #1
    cf7e:	9311      	str	r3, [sp, #68]	; 0x44
            continue;
    cf80:	e2c3      	b.n	d50a <am_util_stdio_vsprintf+0x5ea>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    cf82:	9b02      	ldr	r3, [sp, #8]
    cf84:	3301      	adds	r3, #1
    cf86:	9302      	str	r3, [sp, #8]
        bLower = bLongLong = false;
    cf88:	2300      	movs	r3, #0
    cf8a:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    cf8e:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    cf92:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    cf96:	2320      	movs	r3, #32
    cf98:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

        if ( *pcFmt == '0' )
    cf9c:	9b02      	ldr	r3, [sp, #8]
    cf9e:	781b      	ldrb	r3, [r3, #0]
    cfa0:	2b30      	cmp	r3, #48	; 0x30
    cfa2:	d105      	bne.n	cfb0 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    cfa4:	2330      	movs	r3, #48	; 0x30
    cfa6:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
            ++pcFmt;
    cfaa:	9b02      	ldr	r3, [sp, #8]
    cfac:	3301      	adds	r3, #1
    cfae:	9302      	str	r3, [sp, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    cfb0:	ab05      	add	r3, sp, #20
    cfb2:	4619      	mov	r1, r3
    cfb4:	9802      	ldr	r0, [sp, #8]
    cfb6:	f7ff fd93 	bl	cae0 <decstr_to_int>
    cfba:	4603      	mov	r3, r0
    cfbc:	9310      	str	r3, [sp, #64]	; 0x40
        pcFmt += ui32NumChars;
    cfbe:	9b05      	ldr	r3, [sp, #20]
    cfc0:	9a02      	ldr	r2, [sp, #8]
    cfc2:	4413      	add	r3, r2
    cfc4:	9302      	str	r3, [sp, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    cfc6:	9b02      	ldr	r3, [sp, #8]
    cfc8:	781b      	ldrb	r3, [r3, #0]
    cfca:	2b73      	cmp	r3, #115	; 0x73
    cfcc:	d005      	beq.n	cfda <am_util_stdio_vsprintf+0xba>
    cfce:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfd0:	2b00      	cmp	r3, #0
    cfd2:	da02      	bge.n	cfda <am_util_stdio_vsprintf+0xba>
        {
            iWidth = -iWidth;
    cfd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfd6:	425b      	negs	r3, r3
    cfd8:	9310      	str	r3, [sp, #64]	; 0x40
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    cfda:	9b02      	ldr	r3, [sp, #8]
    cfdc:	781b      	ldrb	r3, [r3, #0]
    cfde:	2b2e      	cmp	r3, #46	; 0x2e
    cfe0:	d10d      	bne.n	cffe <am_util_stdio_vsprintf+0xde>
        {
            ++pcFmt;
    cfe2:	9b02      	ldr	r3, [sp, #8]
    cfe4:	3301      	adds	r3, #1
    cfe6:	9302      	str	r3, [sp, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    cfe8:	ab05      	add	r3, sp, #20
    cfea:	4619      	mov	r1, r3
    cfec:	9802      	ldr	r0, [sp, #8]
    cfee:	f7ff fd77 	bl	cae0 <decstr_to_int>
    cff2:	4603      	mov	r3, r0
    cff4:	930e      	str	r3, [sp, #56]	; 0x38
            pcFmt += ui32NumChars;
    cff6:	9b05      	ldr	r3, [sp, #20]
    cff8:	9a02      	ldr	r2, [sp, #8]
    cffa:	4413      	add	r3, r2
    cffc:	9302      	str	r3, [sp, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    cffe:	9b02      	ldr	r3, [sp, #8]
    d000:	781b      	ldrb	r3, [r3, #0]
    d002:	2b6c      	cmp	r3, #108	; 0x6c
    d004:	d10c      	bne.n	d020 <am_util_stdio_vsprintf+0x100>
        {
            pcFmt++;
    d006:	9b02      	ldr	r3, [sp, #8]
    d008:	3301      	adds	r3, #1
    d00a:	9302      	str	r3, [sp, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    d00c:	9b02      	ldr	r3, [sp, #8]
    d00e:	781b      	ldrb	r3, [r3, #0]
    d010:	2b6c      	cmp	r3, #108	; 0x6c
    d012:	d105      	bne.n	d020 <am_util_stdio_vsprintf+0x100>
            {
                pcFmt++;
    d014:	9b02      	ldr	r3, [sp, #8]
    d016:	3301      	adds	r3, #1
    d018:	9302      	str	r3, [sp, #8]
                bLongLong = true;
    d01a:	2301      	movs	r3, #1
    d01c:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
            }
        }

        switch ( *pcFmt )
    d020:	9b02      	ldr	r3, [sp, #8]
    d022:	781b      	ldrb	r3, [r3, #0]
    d024:	3b46      	subs	r3, #70	; 0x46
    d026:	2b32      	cmp	r3, #50	; 0x32
    d028:	f200 825c 	bhi.w	d4e4 <am_util_stdio_vsprintf+0x5c4>
    d02c:	a201      	add	r2, pc, #4	; (adr r2, d034 <am_util_stdio_vsprintf+0x114>)
    d02e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d032:	bf00      	nop
    d034:	0000d46b 	.word	0x0000d46b
    d038:	0000d4e5 	.word	0x0000d4e5
    d03c:	0000d4e5 	.word	0x0000d4e5
    d040:	0000d4e5 	.word	0x0000d4e5
    d044:	0000d4e5 	.word	0x0000d4e5
    d048:	0000d4e5 	.word	0x0000d4e5
    d04c:	0000d4e5 	.word	0x0000d4e5
    d050:	0000d4e5 	.word	0x0000d4e5
    d054:	0000d4e5 	.word	0x0000d4e5
    d058:	0000d4e5 	.word	0x0000d4e5
    d05c:	0000d4e5 	.word	0x0000d4e5
    d060:	0000d4e5 	.word	0x0000d4e5
    d064:	0000d4e5 	.word	0x0000d4e5
    d068:	0000d4e5 	.word	0x0000d4e5
    d06c:	0000d4e5 	.word	0x0000d4e5
    d070:	0000d4e5 	.word	0x0000d4e5
    d074:	0000d4e5 	.word	0x0000d4e5
    d078:	0000d4e5 	.word	0x0000d4e5
    d07c:	0000d1ff 	.word	0x0000d1ff
    d080:	0000d4e5 	.word	0x0000d4e5
    d084:	0000d4e5 	.word	0x0000d4e5
    d088:	0000d4e5 	.word	0x0000d4e5
    d08c:	0000d4e5 	.word	0x0000d4e5
    d090:	0000d4e5 	.word	0x0000d4e5
    d094:	0000d4e5 	.word	0x0000d4e5
    d098:	0000d4e5 	.word	0x0000d4e5
    d09c:	0000d4e5 	.word	0x0000d4e5
    d0a0:	0000d4e5 	.word	0x0000d4e5
    d0a4:	0000d4e5 	.word	0x0000d4e5
    d0a8:	0000d101 	.word	0x0000d101
    d0ac:	0000d32f 	.word	0x0000d32f
    d0b0:	0000d4e5 	.word	0x0000d4e5
    d0b4:	0000d46b 	.word	0x0000d46b
    d0b8:	0000d4e5 	.word	0x0000d4e5
    d0bc:	0000d4e5 	.word	0x0000d4e5
    d0c0:	0000d32f 	.word	0x0000d32f
    d0c4:	0000d4e5 	.word	0x0000d4e5
    d0c8:	0000d4e5 	.word	0x0000d4e5
    d0cc:	0000d4e5 	.word	0x0000d4e5
    d0d0:	0000d4e5 	.word	0x0000d4e5
    d0d4:	0000d4e5 	.word	0x0000d4e5
    d0d8:	0000d4e5 	.word	0x0000d4e5
    d0dc:	0000d4e5 	.word	0x0000d4e5
    d0e0:	0000d4e5 	.word	0x0000d4e5
    d0e4:	0000d4e5 	.word	0x0000d4e5
    d0e8:	0000d127 	.word	0x0000d127
    d0ec:	0000d4e5 	.word	0x0000d4e5
    d0f0:	0000d299 	.word	0x0000d299
    d0f4:	0000d4e5 	.word	0x0000d4e5
    d0f8:	0000d4e5 	.word	0x0000d4e5
    d0fc:	0000d1f9 	.word	0x0000d1f9
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    d100:	9b01      	ldr	r3, [sp, #4]
    d102:	1d1a      	adds	r2, r3, #4
    d104:	9201      	str	r2, [sp, #4]
    d106:	681b      	ldr	r3, [r3, #0]
    d108:	f88d 301f 	strb.w	r3, [sp, #31]

                if ( pcBuf )
    d10c:	9b03      	ldr	r3, [sp, #12]
    d10e:	2b00      	cmp	r3, #0
    d110:	d005      	beq.n	d11e <am_util_stdio_vsprintf+0x1fe>
                {
                    *pcBuf++ = ui8CharSpecifier;
    d112:	9b03      	ldr	r3, [sp, #12]
    d114:	1c5a      	adds	r2, r3, #1
    d116:	9203      	str	r2, [sp, #12]
    d118:	f89d 201f 	ldrb.w	r2, [sp, #31]
    d11c:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d11e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d120:	3301      	adds	r3, #1
    d122:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d124:	e1ee      	b.n	d504 <am_util_stdio_vsprintf+0x5e4>

            case 's':
                pcStr = va_arg(pArgs, char *);
    d126:	9b01      	ldr	r3, [sp, #4]
    d128:	1d1a      	adds	r2, r3, #4
    d12a:	9201      	str	r2, [sp, #4]
    d12c:	681b      	ldr	r3, [r3, #0]
    d12e:	9315      	str	r3, [sp, #84]	; 0x54
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    d130:	9815      	ldr	r0, [sp, #84]	; 0x54
    d132:	f7ff fdbe 	bl	ccb2 <simple_strlen>
    d136:	900b      	str	r0, [sp, #44]	; 0x2c
                if ( iWidth > 0 )
    d138:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d13a:	2b00      	cmp	r3, #0
    d13c:	dd2e      	ble.n	d19c <am_util_stdio_vsprintf+0x27c>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    d13e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d140:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d142:	429a      	cmp	r2, r3
    d144:	d22a      	bcs.n	d19c <am_util_stdio_vsprintf+0x27c>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    d146:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d148:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d14a:	1ad3      	subs	r3, r2, r3
    d14c:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d14e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d152:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d154:	4619      	mov	r1, r3
    d156:	9803      	ldr	r0, [sp, #12]
    d158:	f7ff fdc1 	bl	ccde <padbuffer>
    d15c:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    d15e:	9b03      	ldr	r3, [sp, #12]
    d160:	2b00      	cmp	r3, #0
    d162:	d001      	beq.n	d168 <am_util_stdio_vsprintf+0x248>
    d164:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d166:	e000      	b.n	d16a <am_util_stdio_vsprintf+0x24a>
    d168:	2300      	movs	r3, #0
    d16a:	9a03      	ldr	r2, [sp, #12]
    d16c:	4413      	add	r3, r2
    d16e:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    d170:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d172:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d174:	4413      	add	r3, r2
    d176:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    d178:	2300      	movs	r3, #0
    d17a:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }

                while (*pcStr != 0x0)
    d17c:	e00e      	b.n	d19c <am_util_stdio_vsprintf+0x27c>
                {
                    if ( pcBuf )
    d17e:	9b03      	ldr	r3, [sp, #12]
    d180:	2b00      	cmp	r3, #0
    d182:	d005      	beq.n	d190 <am_util_stdio_vsprintf+0x270>
                    {
                        *pcBuf++ = *pcStr;
    d184:	9b03      	ldr	r3, [sp, #12]
    d186:	1c5a      	adds	r2, r3, #1
    d188:	9203      	str	r2, [sp, #12]
    d18a:	9a15      	ldr	r2, [sp, #84]	; 0x54
    d18c:	7812      	ldrb	r2, [r2, #0]
    d18e:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    d190:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d192:	3301      	adds	r3, #1
    d194:	9315      	str	r3, [sp, #84]	; 0x54
                    ++ui32CharCnt;
    d196:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d198:	3301      	adds	r3, #1
    d19a:	9311      	str	r3, [sp, #68]	; 0x44
                while (*pcStr != 0x0)
    d19c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d19e:	781b      	ldrb	r3, [r3, #0]
    d1a0:	2b00      	cmp	r3, #0
    d1a2:	d1ec      	bne.n	d17e <am_util_stdio_vsprintf+0x25e>
                }

                if ( iWidth )
    d1a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d1a6:	2b00      	cmp	r3, #0
    d1a8:	f000 81a9 	beq.w	d4fe <am_util_stdio_vsprintf+0x5de>
                {
                    iWidth = -iWidth;
    d1ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d1ae:	425b      	negs	r3, r3
    d1b0:	9310      	str	r3, [sp, #64]	; 0x40

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    d1b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d1b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d1b6:	429a      	cmp	r2, r3
    d1b8:	f080 81a1 	bcs.w	d4fe <am_util_stdio_vsprintf+0x5de>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    d1bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d1be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d1c0:	1ad3      	subs	r3, r2, r3
    d1c2:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d1c4:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d1c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d1ca:	4619      	mov	r1, r3
    d1cc:	9803      	ldr	r0, [sp, #12]
    d1ce:	f7ff fd86 	bl	ccde <padbuffer>
    d1d2:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    d1d4:	9b03      	ldr	r3, [sp, #12]
    d1d6:	2b00      	cmp	r3, #0
    d1d8:	d001      	beq.n	d1de <am_util_stdio_vsprintf+0x2be>
    d1da:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d1dc:	e000      	b.n	d1e0 <am_util_stdio_vsprintf+0x2c0>
    d1de:	2300      	movs	r3, #0
    d1e0:	9a03      	ldr	r2, [sp, #12]
    d1e2:	4413      	add	r3, r2
    d1e4:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    d1e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d1e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d1ea:	4413      	add	r3, r2
    d1ec:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    d1ee:	2300      	movs	r3, #0
    d1f0:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }
                break;
    d1f2:	e184      	b.n	d4fe <am_util_stdio_vsprintf+0x5de>
    d1f4:	10001248 	.word	0x10001248

            case 'x':
                bLower = true;
    d1f8:	2301      	movs	r3, #1
    d1fa:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d1fe:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d202:	2b00      	cmp	r3, #0
    d204:	d009      	beq.n	d21a <am_util_stdio_vsprintf+0x2fa>
    d206:	9b01      	ldr	r3, [sp, #4]
    d208:	3307      	adds	r3, #7
    d20a:	f023 0307 	bic.w	r3, r3, #7
    d20e:	f103 0208 	add.w	r2, r3, #8
    d212:	9201      	str	r2, [sp, #4]
    d214:	e9d3 4500 	ldrd	r4, r5, [r3]
    d218:	e006      	b.n	d228 <am_util_stdio_vsprintf+0x308>
                                      va_arg(pArgs, uint32_t);
    d21a:	9b01      	ldr	r3, [sp, #4]
    d21c:	1d1a      	adds	r2, r3, #4
    d21e:	9201      	str	r2, [sp, #4]
    d220:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d222:	2200      	movs	r2, #0
    d224:	461c      	mov	r4, r3
    d226:	4615      	mov	r5, r2
    d228:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48

                if ( iWidth )
    d22c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d22e:	2b00      	cmp	r3, #0
    d230:	d01e      	beq.n	d270 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    d232:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d236:	f7ff fc2f 	bl	ca98 <ndigits_in_hex>
    d23a:	4602      	mov	r2, r0
    d23c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d23e:	1a9b      	subs	r3, r3, r2
    d240:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d242:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d246:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d248:	4619      	mov	r1, r3
    d24a:	9803      	ldr	r0, [sp, #12]
    d24c:	f7ff fd47 	bl	ccde <padbuffer>
    d250:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d252:	9b03      	ldr	r3, [sp, #12]
    d254:	2b00      	cmp	r3, #0
    d256:	d001      	beq.n	d25c <am_util_stdio_vsprintf+0x33c>
    d258:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d25a:	e000      	b.n	d25e <am_util_stdio_vsprintf+0x33e>
    d25c:	2300      	movs	r3, #0
    d25e:	9a03      	ldr	r2, [sp, #12]
    d260:	4413      	add	r3, r2
    d262:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d264:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d266:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d268:	4413      	add	r3, r2
    d26a:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d26c:	2300      	movs	r3, #0
    d26e:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    d270:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    d274:	9a03      	ldr	r2, [sp, #12]
    d276:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d27a:	f7ff fcba 	bl	cbf2 <uint64_to_hexstr>
    d27e:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d280:	9b03      	ldr	r3, [sp, #12]
    d282:	2b00      	cmp	r3, #0
    d284:	d003      	beq.n	d28e <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    d286:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d288:	9a03      	ldr	r2, [sp, #12]
    d28a:	4413      	add	r3, r2
    d28c:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d28e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d290:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d292:	4413      	add	r3, r2
    d294:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d296:	e135      	b.n	d504 <am_util_stdio_vsprintf+0x5e4>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d298:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d29c:	2b00      	cmp	r3, #0
    d29e:	d009      	beq.n	d2b4 <am_util_stdio_vsprintf+0x394>
    d2a0:	9b01      	ldr	r3, [sp, #4]
    d2a2:	3307      	adds	r3, #7
    d2a4:	f023 0307 	bic.w	r3, r3, #7
    d2a8:	f103 0208 	add.w	r2, r3, #8
    d2ac:	9201      	str	r2, [sp, #4]
    d2ae:	e9d3 6700 	ldrd	r6, r7, [r3]
    d2b2:	e006      	b.n	d2c2 <am_util_stdio_vsprintf+0x3a2>
                                      va_arg(pArgs, uint32_t);
    d2b4:	9b01      	ldr	r3, [sp, #4]
    d2b6:	1d1a      	adds	r2, r3, #4
    d2b8:	9201      	str	r2, [sp, #4]
    d2ba:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d2bc:	2200      	movs	r2, #0
    d2be:	461e      	mov	r6, r3
    d2c0:	4617      	mov	r7, r2
    d2c2:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48

                if ( iWidth )
    d2c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d2c8:	2b00      	cmp	r3, #0
    d2ca:	d01e      	beq.n	d30a <am_util_stdio_vsprintf+0x3ea>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    d2cc:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d2d0:	f7ff fba8 	bl	ca24 <ndigits_in_u64>
    d2d4:	4602      	mov	r2, r0
    d2d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d2d8:	1a9b      	subs	r3, r3, r2
    d2da:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d2dc:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d2e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d2e2:	4619      	mov	r1, r3
    d2e4:	9803      	ldr	r0, [sp, #12]
    d2e6:	f7ff fcfa 	bl	ccde <padbuffer>
    d2ea:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d2ec:	9b03      	ldr	r3, [sp, #12]
    d2ee:	2b00      	cmp	r3, #0
    d2f0:	d001      	beq.n	d2f6 <am_util_stdio_vsprintf+0x3d6>
    d2f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d2f4:	e000      	b.n	d2f8 <am_util_stdio_vsprintf+0x3d8>
    d2f6:	2300      	movs	r3, #0
    d2f8:	9a03      	ldr	r2, [sp, #12]
    d2fa:	4413      	add	r3, r2
    d2fc:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d2fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d300:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d302:	4413      	add	r3, r2
    d304:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d306:	2300      	movs	r3, #0
    d308:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d30a:	9a03      	ldr	r2, [sp, #12]
    d30c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d310:	f7ff fc2a 	bl	cb68 <uint64_to_str>
    d314:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d316:	9b03      	ldr	r3, [sp, #12]
    d318:	2b00      	cmp	r3, #0
    d31a:	d003      	beq.n	d324 <am_util_stdio_vsprintf+0x404>
                {
                    pcBuf += iVal;
    d31c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d31e:	9a03      	ldr	r2, [sp, #12]
    d320:	4413      	add	r3, r2
    d322:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d324:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d326:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d328:	4413      	add	r3, r2
    d32a:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d32c:	e0ea      	b.n	d504 <am_util_stdio_vsprintf+0x5e4>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d32e:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d332:	2b00      	cmp	r3, #0
    d334:	d009      	beq.n	d34a <am_util_stdio_vsprintf+0x42a>
    d336:	9b01      	ldr	r3, [sp, #4]
    d338:	3307      	adds	r3, #7
    d33a:	f023 0307 	bic.w	r3, r3, #7
    d33e:	f103 0208 	add.w	r2, r3, #8
    d342:	9201      	str	r2, [sp, #4]
    d344:	e9d3 8900 	ldrd	r8, r9, [r3]
    d348:	e006      	b.n	d358 <am_util_stdio_vsprintf+0x438>
                                     va_arg(pArgs, int32_t);
    d34a:	9b01      	ldr	r3, [sp, #4]
    d34c:	1d1a      	adds	r2, r3, #4
    d34e:	9201      	str	r2, [sp, #4]
    d350:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d352:	17da      	asrs	r2, r3, #31
    d354:	4698      	mov	r8, r3
    d356:	4691      	mov	r9, r2
    d358:	e9cd 8908 	strd	r8, r9, [sp, #32]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    d35c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d360:	2b00      	cmp	r3, #0
    d362:	da0c      	bge.n	d37e <am_util_stdio_vsprintf+0x45e>
                {
                    ui64Val = -i64Val;          // Get absolute value
    d364:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d368:	2100      	movs	r1, #0
    d36a:	f1d2 0a00 	rsbs	sl, r2, #0
    d36e:	eb61 0b03 	sbc.w	fp, r1, r3
    d372:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
                    bNeg = true;
    d376:	2301      	movs	r3, #1
    d378:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    d37c:	e006      	b.n	d38c <am_util_stdio_vsprintf+0x46c>
                }
                else
                {
                    ui64Val = i64Val;
    d37e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d382:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
                    bNeg = false;
    d386:	2300      	movs	r3, #0
    d388:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                }

                if ( iWidth )
    d38c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d38e:	2b00      	cmp	r3, #0
    d390:	d04a      	beq.n	d428 <am_util_stdio_vsprintf+0x508>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    d392:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    d396:	4610      	mov	r0, r2
    d398:	4619      	mov	r1, r3
    d39a:	f7ff fb63 	bl	ca64 <ndigits_in_i64>
    d39e:	4602      	mov	r2, r0
    d3a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d3a2:	1a9b      	subs	r3, r3, r2
    d3a4:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg )
    d3a6:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d3aa:	2b00      	cmp	r3, #0
    d3ac:	d011      	beq.n	d3d2 <am_util_stdio_vsprintf+0x4b2>
                    {
                        --iWidth;
    d3ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d3b0:	3b01      	subs	r3, #1
    d3b2:	9310      	str	r3, [sp, #64]	; 0x40

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    d3b4:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d3b8:	2b30      	cmp	r3, #48	; 0x30
    d3ba:	d10a      	bne.n	d3d2 <am_util_stdio_vsprintf+0x4b2>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    d3bc:	9b03      	ldr	r3, [sp, #12]
    d3be:	2b00      	cmp	r3, #0
    d3c0:	d004      	beq.n	d3cc <am_util_stdio_vsprintf+0x4ac>
                            {
                                *pcBuf++ = '-';
    d3c2:	9b03      	ldr	r3, [sp, #12]
    d3c4:	1c5a      	adds	r2, r3, #1
    d3c6:	9203      	str	r2, [sp, #12]
    d3c8:	222d      	movs	r2, #45	; 0x2d
    d3ca:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    d3cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d3ce:	3301      	adds	r3, #1
    d3d0:	9311      	str	r3, [sp, #68]	; 0x44
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d3d2:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d3d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d3d8:	4619      	mov	r1, r3
    d3da:	9803      	ldr	r0, [sp, #12]
    d3dc:	f7ff fc7f 	bl	ccde <padbuffer>
    d3e0:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d3e2:	9b03      	ldr	r3, [sp, #12]
    d3e4:	2b00      	cmp	r3, #0
    d3e6:	d001      	beq.n	d3ec <am_util_stdio_vsprintf+0x4cc>
    d3e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d3ea:	e000      	b.n	d3ee <am_util_stdio_vsprintf+0x4ce>
    d3ec:	2300      	movs	r3, #0
    d3ee:	9a03      	ldr	r2, [sp, #12]
    d3f0:	4413      	add	r3, r2
    d3f2:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d3f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d3f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d3f8:	4413      	add	r3, r2
    d3fa:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d3fc:	2300      	movs	r3, #0
    d3fe:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d400:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d404:	2b00      	cmp	r3, #0
    d406:	d01e      	beq.n	d446 <am_util_stdio_vsprintf+0x526>
    d408:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d40c:	2b20      	cmp	r3, #32
    d40e:	d11a      	bne.n	d446 <am_util_stdio_vsprintf+0x526>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    d410:	9b03      	ldr	r3, [sp, #12]
    d412:	2b00      	cmp	r3, #0
    d414:	d004      	beq.n	d420 <am_util_stdio_vsprintf+0x500>
                        {
                            *pcBuf++ = '-';
    d416:	9b03      	ldr	r3, [sp, #12]
    d418:	1c5a      	adds	r2, r3, #1
    d41a:	9203      	str	r2, [sp, #12]
    d41c:	222d      	movs	r2, #45	; 0x2d
    d41e:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    d420:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d422:	3301      	adds	r3, #1
    d424:	9311      	str	r3, [sp, #68]	; 0x44
    d426:	e00e      	b.n	d446 <am_util_stdio_vsprintf+0x526>
                    }
                }
                else
                {
                    if ( bNeg )
    d428:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d42c:	2b00      	cmp	r3, #0
    d42e:	d00a      	beq.n	d446 <am_util_stdio_vsprintf+0x526>
                    {
                        if ( pcBuf )
    d430:	9b03      	ldr	r3, [sp, #12]
    d432:	2b00      	cmp	r3, #0
    d434:	d004      	beq.n	d440 <am_util_stdio_vsprintf+0x520>
                        {
                            *pcBuf++ = '-';
    d436:	9b03      	ldr	r3, [sp, #12]
    d438:	1c5a      	adds	r2, r3, #1
    d43a:	9203      	str	r2, [sp, #12]
    d43c:	222d      	movs	r2, #45	; 0x2d
    d43e:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    d440:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d442:	3301      	adds	r3, #1
    d444:	9311      	str	r3, [sp, #68]	; 0x44
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d446:	9a03      	ldr	r2, [sp, #12]
    d448:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d44c:	f7ff fb8c 	bl	cb68 <uint64_to_str>
    d450:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d452:	9b03      	ldr	r3, [sp, #12]
    d454:	2b00      	cmp	r3, #0
    d456:	d003      	beq.n	d460 <am_util_stdio_vsprintf+0x540>
                {
                    pcBuf += iVal;
    d458:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d45a:	9a03      	ldr	r2, [sp, #12]
    d45c:	4413      	add	r3, r2
    d45e:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d460:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d462:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d464:	4413      	add	r3, r2
    d466:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d468:	e04c      	b.n	d504 <am_util_stdio_vsprintf+0x5e4>


            case 'f':
            case 'F':
                if ( pcBuf )
    d46a:	9b03      	ldr	r3, [sp, #12]
    d46c:	2b00      	cmp	r3, #0
    d46e:	d048      	beq.n	d502 <am_util_stdio_vsprintf+0x5e2>
                {
                    float fValue = va_arg(pArgs, double);
    d470:	9b01      	ldr	r3, [sp, #4]
    d472:	3307      	adds	r3, #7
    d474:	f023 0307 	bic.w	r3, r3, #7
    d478:	f103 0208 	add.w	r2, r3, #8
    d47c:	9201      	str	r2, [sp, #4]
    d47e:	e9d3 2300 	ldrd	r2, r3, [r3]
    d482:	4610      	mov	r0, r2
    d484:	4619      	mov	r1, r3
    d486:	f7fe fe3b 	bl	c100 <__aeabi_d2f>
    d48a:	4603      	mov	r3, r0
    d48c:	9306      	str	r3, [sp, #24]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    d48e:	9b03      	ldr	r3, [sp, #12]
    d490:	2214      	movs	r2, #20
    d492:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    d494:	990e      	ldr	r1, [sp, #56]	; 0x38
    d496:	9803      	ldr	r0, [sp, #12]
    d498:	ed9d 0a06 	vldr	s0, [sp, #24]
    d49c:	f7ff fc42 	bl	cd24 <ftoa>
    d4a0:	900f      	str	r0, [sp, #60]	; 0x3c
                    if ( iVal < 0 )
    d4a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d4a4:	2b00      	cmp	r3, #0
    d4a6:	da14      	bge.n	d4d2 <am_util_stdio_vsprintf+0x5b2>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d4a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d4aa:	f1b3 3fff 	cmp.w	r3, #4294967295
    d4ae:	d102      	bne.n	d4b6 <am_util_stdio_vsprintf+0x596>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d4b0:	4b1e      	ldr	r3, [pc, #120]	; (d52c <am_util_stdio_vsprintf+0x60c>)
    d4b2:	930c      	str	r3, [sp, #48]	; 0x30
    d4b4:	e008      	b.n	d4c8 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d4b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d4b8:	f113 0f02 	cmn.w	r3, #2
    d4bc:	d102      	bne.n	d4c4 <am_util_stdio_vsprintf+0x5a4>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d4be:	4b1c      	ldr	r3, [pc, #112]	; (d530 <am_util_stdio_vsprintf+0x610>)
    d4c0:	930c      	str	r3, [sp, #48]	; 0x30
    d4c2:	e001      	b.n	d4c8 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d4c4:	4b1b      	ldr	r3, [pc, #108]	; (d534 <am_util_stdio_vsprintf+0x614>)
    d4c6:	930c      	str	r3, [sp, #48]	; 0x30
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d4c8:	9b03      	ldr	r3, [sp, #12]
    d4ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d4cc:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    d4ce:	2303      	movs	r3, #3
    d4d0:	930f      	str	r3, [sp, #60]	; 0x3c
                    }
                    ui32CharCnt += iVal;
    d4d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d4d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d4d6:	4413      	add	r3, r2
    d4d8:	9311      	str	r3, [sp, #68]	; 0x44
                    pcBuf += iVal;
    d4da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d4dc:	9a03      	ldr	r2, [sp, #12]
    d4de:	4413      	add	r3, r2
    d4e0:	9303      	str	r3, [sp, #12]
                }
                break;
    d4e2:	e00e      	b.n	d502 <am_util_stdio_vsprintf+0x5e2>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d4e4:	9b03      	ldr	r3, [sp, #12]
    d4e6:	2b00      	cmp	r3, #0
    d4e8:	d005      	beq.n	d4f6 <am_util_stdio_vsprintf+0x5d6>
                {
                    *pcBuf++ = *pcFmt;
    d4ea:	9b03      	ldr	r3, [sp, #12]
    d4ec:	1c5a      	adds	r2, r3, #1
    d4ee:	9203      	str	r2, [sp, #12]
    d4f0:	9a02      	ldr	r2, [sp, #8]
    d4f2:	7812      	ldrb	r2, [r2, #0]
    d4f4:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d4f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d4f8:	3301      	adds	r3, #1
    d4fa:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d4fc:	e002      	b.n	d504 <am_util_stdio_vsprintf+0x5e4>
                break;
    d4fe:	bf00      	nop
    d500:	e000      	b.n	d504 <am_util_stdio_vsprintf+0x5e4>
                break;
    d502:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d504:	9b02      	ldr	r3, [sp, #8]
    d506:	3301      	adds	r3, #1
    d508:	9302      	str	r3, [sp, #8]
    while ( *pcFmt != 0x0 )
    d50a:	9b02      	ldr	r3, [sp, #8]
    d50c:	781b      	ldrb	r3, [r3, #0]
    d50e:	2b00      	cmp	r3, #0
    d510:	f47f ad11 	bne.w	cf36 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d514:	9b03      	ldr	r3, [sp, #12]
    d516:	2b00      	cmp	r3, #0
    d518:	d002      	beq.n	d520 <am_util_stdio_vsprintf+0x600>
    {
        *pcBuf = 0x0;
    d51a:	9b03      	ldr	r3, [sp, #12]
    d51c:	2200      	movs	r2, #0
    d51e:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d520:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    d522:	4618      	mov	r0, r3
    d524:	b017      	add	sp, #92	; 0x5c
    d526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d52a:	bf00      	nop
    d52c:	00302e30 	.word	0x00302e30
    d530:	00232e23 	.word	0x00232e23
    d534:	003f2e3f 	.word	0x003f2e3f

0000d538 <am_util_stdio_sprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_sprintf(char *pcBuf, const char *pcFmt, ...)
{
    d538:	b40e      	push	{r1, r2, r3}
    d53a:	b500      	push	{lr}
    d53c:	b084      	sub	sp, #16
    d53e:	9001      	str	r0, [sp, #4]
    uint32_t ui32CharCnt;

    va_list pArgs;
    va_start(pArgs, pcFmt);
    d540:	ab06      	add	r3, sp, #24
    d542:	9302      	str	r3, [sp, #8]
    ui32CharCnt = am_util_stdio_vsprintf(pcBuf, pcFmt, pArgs);
    d544:	9a02      	ldr	r2, [sp, #8]
    d546:	9905      	ldr	r1, [sp, #20]
    d548:	9801      	ldr	r0, [sp, #4]
    d54a:	f7ff fce9 	bl	cf20 <am_util_stdio_vsprintf>
    d54e:	9003      	str	r0, [sp, #12]
    va_end(pArgs);

    return ui32CharCnt;
    d550:	9b03      	ldr	r3, [sp, #12]
}
    d552:	4618      	mov	r0, r3
    d554:	b004      	add	sp, #16
    d556:	f85d eb04 	ldr.w	lr, [sp], #4
    d55a:	b003      	add	sp, #12
    d55c:	4770      	bx	lr
	...

0000d560 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d560:	b40f      	push	{r0, r1, r2, r3}
    d562:	b500      	push	{lr}
    d564:	b083      	sub	sp, #12
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d566:	4b0c      	ldr	r3, [pc, #48]	; (d598 <am_util_stdio_printf+0x38>)
    d568:	681b      	ldr	r3, [r3, #0]
    d56a:	2b00      	cmp	r3, #0
    d56c:	d101      	bne.n	d572 <am_util_stdio_printf+0x12>
    {
        return 0;
    d56e:	2300      	movs	r3, #0
    d570:	e00c      	b.n	d58c <am_util_stdio_printf+0x2c>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d572:	ab05      	add	r3, sp, #20
    d574:	9300      	str	r3, [sp, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d576:	9a00      	ldr	r2, [sp, #0]
    d578:	9904      	ldr	r1, [sp, #16]
    d57a:	4808      	ldr	r0, [pc, #32]	; (d59c <am_util_stdio_printf+0x3c>)
    d57c:	f7ff fcd0 	bl	cf20 <am_util_stdio_vsprintf>
    d580:	9001      	str	r0, [sp, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d582:	4b05      	ldr	r3, [pc, #20]	; (d598 <am_util_stdio_printf+0x38>)
    d584:	681b      	ldr	r3, [r3, #0]
    d586:	4805      	ldr	r0, [pc, #20]	; (d59c <am_util_stdio_printf+0x3c>)
    d588:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d58a:	9b01      	ldr	r3, [sp, #4]
}
    d58c:	4618      	mov	r0, r3
    d58e:	b003      	add	sp, #12
    d590:	f85d eb04 	ldr.w	lr, [sp], #4
    d594:	b004      	add	sp, #16
    d596:	4770      	bx	lr
    d598:	10001144 	.word	0x10001144
    d59c:	10001148 	.word	0x10001148

0000d5a0 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    d5a0:	b508      	push	{r3, lr}
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d5a2:	4802      	ldr	r0, [pc, #8]	; (d5ac <am_util_stdio_terminal_clear+0xc>)
    d5a4:	f7ff ffdc 	bl	d560 <am_util_stdio_printf>
}
    d5a8:	bf00      	nop
    d5aa:	bd08      	pop	{r3, pc}
    d5ac:	0000efb8 	.word	0x0000efb8

0000d5b0 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    d5b0:	4811      	ldr	r0, [pc, #68]	; (d5f8 <zero_loop+0x12>)
    d5b2:	4912      	ldr	r1, [pc, #72]	; (d5fc <zero_loop+0x16>)
    d5b4:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    d5b6:	f8d1 d000 	ldr.w	sp, [r1]

#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    d5ba:	4811      	ldr	r0, [pc, #68]	; (d600 <zero_loop+0x1a>)
    d5bc:	6801      	ldr	r1, [r0, #0]
    d5be:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d5c2:	6001      	str	r1, [r0, #0]
    d5c4:	f3bf 8f4f 	dsb	sy
    d5c8:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    d5cc:	480d      	ldr	r0, [pc, #52]	; (d604 <zero_loop+0x1e>)
    d5ce:	490e      	ldr	r1, [pc, #56]	; (d608 <zero_loop+0x22>)
    d5d0:	4a0e      	ldr	r2, [pc, #56]	; (d60c <zero_loop+0x26>)

0000d5d2 <copy_loop>:
    d5d2:	f850 3b04 	ldr.w	r3, [r0], #4
    d5d6:	f841 3b04 	str.w	r3, [r1], #4
    d5da:	4291      	cmp	r1, r2
    d5dc:	dbf9      	blt.n	d5d2 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    d5de:	480c      	ldr	r0, [pc, #48]	; (d610 <zero_loop+0x2a>)
    d5e0:	490c      	ldr	r1, [pc, #48]	; (d614 <zero_loop+0x2e>)
    d5e2:	f04f 0200 	mov.w	r2, #0

0000d5e6 <zero_loop>:
    d5e6:	4288      	cmp	r0, r1
    d5e8:	bfb8      	it	lt
    d5ea:	f840 2b04 	strlt.w	r2, [r0], #4
    d5ee:	dbfa      	blt.n	d5e6 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    d5f0:	f7fe fe52 	bl	c298 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    d5f4:	be00      	bkpt	0x0000
}
    d5f6:	bf00      	nop
    d5f8:	e000ed08 	.word	0xe000ed08
    d5fc:	0000c000 	.word	0x0000c000
    d600:	e000ed88 	.word	0xe000ed88
    d604:	0000f330 	.word	0x0000f330
    d608:	10001000 	.word	0x10001000
    d60c:	10001038 	.word	0x10001038
    d610:	10001038 	.word	0x10001038
    d614:	10001320 	.word	0x10001320

0000d618 <NMI_Handler>:
NMI_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d618:	e7fe      	b.n	d618 <NMI_Handler>

0000d61a <BusFault_Handler>:
HardFault_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d61a:	e7fe      	b.n	d61a <BusFault_Handler>

0000d61c <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d61c:	e7fe      	b.n	d61c <DebugMon_Handler>
	...

0000d620 <am_bsp_low_power_init>:
    d620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d622:	f000 fd29 	bl	e078 <am_hal_pwrctrl_low_power_init>
    d626:	f000 fe05 	bl	e234 <am_hal_rtc_osc_disable>
    d62a:	4b0b      	ldr	r3, [pc, #44]	; (d658 <am_bsp_low_power_init+0x38>)
    d62c:	4f0b      	ldr	r7, [pc, #44]	; (d65c <am_bsp_low_power_init+0x3c>)
    d62e:	681e      	ldr	r6, [r3, #0]
    d630:	2400      	movs	r4, #0
    d632:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    d636:	4631      	mov	r1, r6
    d638:	4628      	mov	r0, r5
    d63a:	f000 faa5 	bl	db88 <am_hal_gpio_pinconfig>
    d63e:	2103      	movs	r1, #3
    d640:	4628      	mov	r0, r5
    d642:	f000 fbd7 	bl	ddf4 <am_hal_gpio_state_write>
    d646:	3401      	adds	r4, #1
    d648:	2100      	movs	r1, #0
    d64a:	4628      	mov	r0, r5
    d64c:	f000 fbd2 	bl	ddf4 <am_hal_gpio_state_write>
    d650:	2c05      	cmp	r4, #5
    d652:	d1ee      	bne.n	d632 <am_bsp_low_power_init+0x12>
    d654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d656:	bf00      	nop
    d658:	0000f084 	.word	0x0000f084
    d65c:	10001000 	.word	0x10001000

0000d660 <am_hal_cachectrl_config>:
    d660:	b530      	push	{r4, r5, lr}
    d662:	b083      	sub	sp, #12
    d664:	4604      	mov	r4, r0
    d666:	f000 fc0d 	bl	de84 <am_hal_interrupt_master_disable>
    d66a:	4d0e      	ldr	r5, [pc, #56]	; (d6a4 <am_hal_cachectrl_config+0x44>)
    d66c:	9001      	str	r0, [sp, #4]
    d66e:	682b      	ldr	r3, [r5, #0]
    d670:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    d674:	602b      	str	r3, [r5, #0]
    d676:	9801      	ldr	r0, [sp, #4]
    d678:	f000 fc08 	bl	de8c <am_hal_interrupt_master_set>
    d67c:	7863      	ldrb	r3, [r4, #1]
    d67e:	7822      	ldrb	r2, [r4, #0]
    d680:	78a1      	ldrb	r1, [r4, #2]
    d682:	021b      	lsls	r3, r3, #8
    d684:	f403 7340 	and.w	r3, r3, #768	; 0x300
    d688:	0112      	lsls	r2, r2, #4
    d68a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    d68e:	b2d2      	uxtb	r2, r2
    d690:	4313      	orrs	r3, r2
    d692:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d696:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d69a:	2000      	movs	r0, #0
    d69c:	602b      	str	r3, [r5, #0]
    d69e:	b003      	add	sp, #12
    d6a0:	bd30      	pop	{r4, r5, pc}
    d6a2:	bf00      	nop
    d6a4:	40018000 	.word	0x40018000

0000d6a8 <am_hal_cachectrl_enable>:
    d6a8:	4a03      	ldr	r2, [pc, #12]	; (d6b8 <am_hal_cachectrl_enable+0x10>)
    d6aa:	6813      	ldr	r3, [r2, #0]
    d6ac:	f043 0301 	orr.w	r3, r3, #1
    d6b0:	2000      	movs	r0, #0
    d6b2:	6013      	str	r3, [r2, #0]
    d6b4:	4770      	bx	lr
    d6b6:	bf00      	nop
    d6b8:	40018000 	.word	0x40018000

0000d6bc <am_hal_cachectrl_control>:
    d6bc:	b510      	push	{r4, lr}
    d6be:	3801      	subs	r0, #1
    d6c0:	b08e      	sub	sp, #56	; 0x38
    d6c2:	2810      	cmp	r0, #16
    d6c4:	f200 815e 	bhi.w	d984 <am_hal_cachectrl_control+0x2c8>
    d6c8:	e8df f010 	tbh	[pc, r0, lsl #1]
    d6cc:	00360018 	.word	0x00360018
    d6d0:	0040003d 	.word	0x0040003d
    d6d4:	00450043 	.word	0x00450043
    d6d8:	0011001a 	.word	0x0011001a
    d6dc:	00540047 	.word	0x00540047
    d6e0:	009a0061 	.word	0x009a0061
    d6e4:	010c00d3 	.word	0x010c00d3
    d6e8:	013f0126 	.word	0x013f0126
    d6ec:	001d      	.short	0x001d
    d6ee:	f44f 7300 	mov.w	r3, #512	; 0x200
    d6f2:	4aac      	ldr	r2, [pc, #688]	; (d9a4 <am_hal_cachectrl_control+0x2e8>)
    d6f4:	2000      	movs	r0, #0
    d6f6:	6093      	str	r3, [r2, #8]
    d6f8:	b00e      	add	sp, #56	; 0x38
    d6fa:	bd10      	pop	{r4, pc}
    d6fc:	2301      	movs	r3, #1
    d6fe:	e7f8      	b.n	d6f2 <am_hal_cachectrl_control+0x36>
    d700:	f44f 6380 	mov.w	r3, #1024	; 0x400
    d704:	e7f5      	b.n	d6f2 <am_hal_cachectrl_control+0x36>
    d706:	2900      	cmp	r1, #0
    d708:	f000 813c 	beq.w	d984 <am_hal_cachectrl_control+0x2c8>
    d70c:	684a      	ldr	r2, [r1, #4]
    d70e:	48a6      	ldr	r0, [pc, #664]	; (d9a8 <am_hal_cachectrl_control+0x2ec>)
    d710:	4202      	tst	r2, r0
    d712:	f040 8137 	bne.w	d984 <am_hal_cachectrl_control+0x2c8>
    d716:	688b      	ldr	r3, [r1, #8]
    d718:	4018      	ands	r0, r3
    d71a:	f040 8133 	bne.w	d984 <am_hal_cachectrl_control+0x2c8>
    d71e:	780c      	ldrb	r4, [r1, #0]
    d720:	2c00      	cmp	r4, #0
    d722:	f040 8133 	bne.w	d98c <am_hal_cachectrl_control+0x2d0>
    d726:	4c9f      	ldr	r4, [pc, #636]	; (d9a4 <am_hal_cachectrl_control+0x2e8>)
    d728:	7849      	ldrb	r1, [r1, #1]
    d72a:	6122      	str	r2, [r4, #16]
    d72c:	6163      	str	r3, [r4, #20]
    d72e:	6823      	ldr	r3, [r4, #0]
    d730:	f361 0382 	bfi	r3, r1, #2, #1
    d734:	6023      	str	r3, [r4, #0]
    d736:	e7df      	b.n	d6f8 <am_hal_cachectrl_control+0x3c>
    d738:	4b9a      	ldr	r3, [pc, #616]	; (d9a4 <am_hal_cachectrl_control+0x2e8>)
    d73a:	681b      	ldr	r3, [r3, #0]
    d73c:	01db      	lsls	r3, r3, #7
    d73e:	f140 811f 	bpl.w	d980 <am_hal_cachectrl_control+0x2c4>
    d742:	2302      	movs	r3, #2
    d744:	e7d5      	b.n	d6f2 <am_hal_cachectrl_control+0x36>
    d746:	f44f 6388 	mov.w	r3, #1088	; 0x440
    d74a:	e7d2      	b.n	d6f2 <am_hal_cachectrl_control+0x36>
    d74c:	f44f 7308 	mov.w	r3, #544	; 0x220
    d750:	e7cf      	b.n	d6f2 <am_hal_cachectrl_control+0x36>
    d752:	2340      	movs	r3, #64	; 0x40
    d754:	e7cd      	b.n	d6f2 <am_hal_cachectrl_control+0x36>
    d756:	2320      	movs	r3, #32
    d758:	e7cb      	b.n	d6f2 <am_hal_cachectrl_control+0x36>
    d75a:	f000 fb93 	bl	de84 <am_hal_interrupt_master_disable>
    d75e:	4a91      	ldr	r2, [pc, #580]	; (d9a4 <am_hal_cachectrl_control+0x2e8>)
    d760:	9000      	str	r0, [sp, #0]
    d762:	6813      	ldr	r3, [r2, #0]
    d764:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    d768:	6013      	str	r3, [r2, #0]
    d76a:	9800      	ldr	r0, [sp, #0]
    d76c:	f000 fb8e 	bl	de8c <am_hal_interrupt_master_set>
    d770:	2000      	movs	r0, #0
    d772:	e7c1      	b.n	d6f8 <am_hal_cachectrl_control+0x3c>
    d774:	f000 fb86 	bl	de84 <am_hal_interrupt_master_disable>
    d778:	4a8a      	ldr	r2, [pc, #552]	; (d9a4 <am_hal_cachectrl_control+0x2e8>)
    d77a:	9001      	str	r0, [sp, #4]
    d77c:	6813      	ldr	r3, [r2, #0]
    d77e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    d782:	6013      	str	r3, [r2, #0]
    d784:	9801      	ldr	r0, [sp, #4]
    d786:	f000 fb81 	bl	de8c <am_hal_interrupt_master_set>
    d78a:	2000      	movs	r0, #0
    d78c:	e7b4      	b.n	d6f8 <am_hal_cachectrl_control+0x3c>
    d78e:	f000 fb79 	bl	de84 <am_hal_interrupt_master_disable>
    d792:	4603      	mov	r3, r0
    d794:	4885      	ldr	r0, [pc, #532]	; (d9ac <am_hal_cachectrl_control+0x2f0>)
    d796:	9302      	str	r3, [sp, #8]
    d798:	f000 f9ec 	bl	db74 <am_hal_flash_load_ui32>
    d79c:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d7a0:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d7a4:	4881      	ldr	r0, [pc, #516]	; (d9ac <am_hal_cachectrl_control+0x2f0>)
    d7a6:	f000 f9e9 	bl	db7c <am_hal_flash_store_ui32>
    d7aa:	9802      	ldr	r0, [sp, #8]
    d7ac:	f000 fb6e 	bl	de8c <am_hal_interrupt_master_set>
    d7b0:	f000 fb68 	bl	de84 <am_hal_interrupt_master_disable>
    d7b4:	4603      	mov	r3, r0
    d7b6:	487d      	ldr	r0, [pc, #500]	; (d9ac <am_hal_cachectrl_control+0x2f0>)
    d7b8:	9303      	str	r3, [sp, #12]
    d7ba:	f000 f9db 	bl	db74 <am_hal_flash_load_ui32>
    d7be:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d7c2:	f440 61ee 	orr.w	r1, r0, #1904	; 0x770
    d7c6:	4879      	ldr	r0, [pc, #484]	; (d9ac <am_hal_cachectrl_control+0x2f0>)
    d7c8:	f000 f9d8 	bl	db7c <am_hal_flash_store_ui32>
    d7cc:	9803      	ldr	r0, [sp, #12]
    d7ce:	f000 fb5d 	bl	de8c <am_hal_interrupt_master_set>
    d7d2:	f000 fb57 	bl	de84 <am_hal_interrupt_master_disable>
    d7d6:	4603      	mov	r3, r0
    d7d8:	4874      	ldr	r0, [pc, #464]	; (d9ac <am_hal_cachectrl_control+0x2f0>)
    d7da:	9304      	str	r3, [sp, #16]
    d7dc:	f000 f9ca 	bl	db74 <am_hal_flash_load_ui32>
    d7e0:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d7e4:	f020 000f 	bic.w	r0, r0, #15
    d7e8:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d7ec:	f041 0103 	orr.w	r1, r1, #3
    d7f0:	486e      	ldr	r0, [pc, #440]	; (d9ac <am_hal_cachectrl_control+0x2f0>)
    d7f2:	f000 f9c3 	bl	db7c <am_hal_flash_store_ui32>
    d7f6:	9804      	ldr	r0, [sp, #16]
    d7f8:	f000 fb48 	bl	de8c <am_hal_interrupt_master_set>
    d7fc:	2000      	movs	r0, #0
    d7fe:	e77b      	b.n	d6f8 <am_hal_cachectrl_control+0x3c>
    d800:	f000 fb40 	bl	de84 <am_hal_interrupt_master_disable>
    d804:	4603      	mov	r3, r0
    d806:	4869      	ldr	r0, [pc, #420]	; (d9ac <am_hal_cachectrl_control+0x2f0>)
    d808:	9305      	str	r3, [sp, #20]
    d80a:	f000 f9b3 	bl	db74 <am_hal_flash_load_ui32>
    d80e:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d812:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    d816:	4865      	ldr	r0, [pc, #404]	; (d9ac <am_hal_cachectrl_control+0x2f0>)
    d818:	f000 f9b0 	bl	db7c <am_hal_flash_store_ui32>
    d81c:	9805      	ldr	r0, [sp, #20]
    d81e:	f000 fb35 	bl	de8c <am_hal_interrupt_master_set>
    d822:	f000 fb2f 	bl	de84 <am_hal_interrupt_master_disable>
    d826:	4603      	mov	r3, r0
    d828:	4860      	ldr	r0, [pc, #384]	; (d9ac <am_hal_cachectrl_control+0x2f0>)
    d82a:	9306      	str	r3, [sp, #24]
    d82c:	f000 f9a2 	bl	db74 <am_hal_flash_load_ui32>
    d830:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d834:	f440 61ea 	orr.w	r1, r0, #1872	; 0x750
    d838:	485c      	ldr	r0, [pc, #368]	; (d9ac <am_hal_cachectrl_control+0x2f0>)
    d83a:	f000 f99f 	bl	db7c <am_hal_flash_store_ui32>
    d83e:	9806      	ldr	r0, [sp, #24]
    d840:	f000 fb24 	bl	de8c <am_hal_interrupt_master_set>
    d844:	f000 fb1e 	bl	de84 <am_hal_interrupt_master_disable>
    d848:	4603      	mov	r3, r0
    d84a:	4858      	ldr	r0, [pc, #352]	; (d9ac <am_hal_cachectrl_control+0x2f0>)
    d84c:	9307      	str	r3, [sp, #28]
    d84e:	f000 f991 	bl	db74 <am_hal_flash_load_ui32>
    d852:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d856:	f020 000f 	bic.w	r0, r0, #15
    d85a:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d85e:	f041 0101 	orr.w	r1, r1, #1
    d862:	4852      	ldr	r0, [pc, #328]	; (d9ac <am_hal_cachectrl_control+0x2f0>)
    d864:	f000 f98a 	bl	db7c <am_hal_flash_store_ui32>
    d868:	9807      	ldr	r0, [sp, #28]
    d86a:	f000 fb0f 	bl	de8c <am_hal_interrupt_master_set>
    d86e:	2000      	movs	r0, #0
    d870:	e742      	b.n	d6f8 <am_hal_cachectrl_control+0x3c>
    d872:	f000 fb07 	bl	de84 <am_hal_interrupt_master_disable>
    d876:	4603      	mov	r3, r0
    d878:	484c      	ldr	r0, [pc, #304]	; (d9ac <am_hal_cachectrl_control+0x2f0>)
    d87a:	9308      	str	r3, [sp, #32]
    d87c:	f000 f97a 	bl	db74 <am_hal_flash_load_ui32>
    d880:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d884:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    d888:	4848      	ldr	r0, [pc, #288]	; (d9ac <am_hal_cachectrl_control+0x2f0>)
    d88a:	f000 f977 	bl	db7c <am_hal_flash_store_ui32>
    d88e:	9808      	ldr	r0, [sp, #32]
    d890:	f000 fafc 	bl	de8c <am_hal_interrupt_master_set>
    d894:	f000 faf6 	bl	de84 <am_hal_interrupt_master_disable>
    d898:	4603      	mov	r3, r0
    d89a:	4844      	ldr	r0, [pc, #272]	; (d9ac <am_hal_cachectrl_control+0x2f0>)
    d89c:	9309      	str	r3, [sp, #36]	; 0x24
    d89e:	f000 f969 	bl	db74 <am_hal_flash_load_ui32>
    d8a2:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d8a6:	f440 61ec 	orr.w	r1, r0, #1888	; 0x760
    d8aa:	4840      	ldr	r0, [pc, #256]	; (d9ac <am_hal_cachectrl_control+0x2f0>)
    d8ac:	f000 f966 	bl	db7c <am_hal_flash_store_ui32>
    d8b0:	9809      	ldr	r0, [sp, #36]	; 0x24
    d8b2:	f000 faeb 	bl	de8c <am_hal_interrupt_master_set>
    d8b6:	f000 fae5 	bl	de84 <am_hal_interrupt_master_disable>
    d8ba:	4603      	mov	r3, r0
    d8bc:	483b      	ldr	r0, [pc, #236]	; (d9ac <am_hal_cachectrl_control+0x2f0>)
    d8be:	930a      	str	r3, [sp, #40]	; 0x28
    d8c0:	f000 f958 	bl	db74 <am_hal_flash_load_ui32>
    d8c4:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d8c8:	f020 000f 	bic.w	r0, r0, #15
    d8cc:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d8d0:	f041 0101 	orr.w	r1, r1, #1
    d8d4:	4835      	ldr	r0, [pc, #212]	; (d9ac <am_hal_cachectrl_control+0x2f0>)
    d8d6:	f000 f951 	bl	db7c <am_hal_flash_store_ui32>
    d8da:	980a      	ldr	r0, [sp, #40]	; 0x28
    d8dc:	f000 fad6 	bl	de8c <am_hal_interrupt_master_set>
    d8e0:	2000      	movs	r0, #0
    d8e2:	e709      	b.n	d6f8 <am_hal_cachectrl_control+0x3c>
    d8e4:	2900      	cmp	r1, #0
    d8e6:	d04d      	beq.n	d984 <am_hal_cachectrl_control+0x2c8>
    d8e8:	680c      	ldr	r4, [r1, #0]
    d8ea:	2c03      	cmp	r4, #3
    d8ec:	d84c      	bhi.n	d988 <am_hal_cachectrl_control+0x2cc>
    d8ee:	f000 fac9 	bl	de84 <am_hal_interrupt_master_disable>
    d8f2:	4603      	mov	r3, r0
    d8f4:	482d      	ldr	r0, [pc, #180]	; (d9ac <am_hal_cachectrl_control+0x2f0>)
    d8f6:	930b      	str	r3, [sp, #44]	; 0x2c
    d8f8:	f000 f93c 	bl	db74 <am_hal_flash_load_ui32>
    d8fc:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d900:	ea40 3104 	orr.w	r1, r0, r4, lsl #12
    d904:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d908:	4828      	ldr	r0, [pc, #160]	; (d9ac <am_hal_cachectrl_control+0x2f0>)
    d90a:	f000 f937 	bl	db7c <am_hal_flash_store_ui32>
    d90e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d910:	f000 fabc 	bl	de8c <am_hal_interrupt_master_set>
    d914:	2000      	movs	r0, #0
    d916:	e6ef      	b.n	d6f8 <am_hal_cachectrl_control+0x3c>
    d918:	b3a1      	cbz	r1, d984 <am_hal_cachectrl_control+0x2c8>
    d91a:	680c      	ldr	r4, [r1, #0]
    d91c:	2c07      	cmp	r4, #7
    d91e:	d833      	bhi.n	d988 <am_hal_cachectrl_control+0x2cc>
    d920:	f000 fab0 	bl	de84 <am_hal_interrupt_master_disable>
    d924:	4603      	mov	r3, r0
    d926:	4821      	ldr	r0, [pc, #132]	; (d9ac <am_hal_cachectrl_control+0x2f0>)
    d928:	930c      	str	r3, [sp, #48]	; 0x30
    d92a:	f000 f923 	bl	db74 <am_hal_flash_load_ui32>
    d92e:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d932:	ea40 1104 	orr.w	r1, r0, r4, lsl #4
    d936:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d93a:	481c      	ldr	r0, [pc, #112]	; (d9ac <am_hal_cachectrl_control+0x2f0>)
    d93c:	f000 f91e 	bl	db7c <am_hal_flash_store_ui32>
    d940:	980c      	ldr	r0, [sp, #48]	; 0x30
    d942:	f000 faa3 	bl	de8c <am_hal_interrupt_master_set>
    d946:	2000      	movs	r0, #0
    d948:	e6d6      	b.n	d6f8 <am_hal_cachectrl_control+0x3c>
    d94a:	b1d9      	cbz	r1, d984 <am_hal_cachectrl_control+0x2c8>
    d94c:	680c      	ldr	r4, [r1, #0]
    d94e:	2c0f      	cmp	r4, #15
    d950:	d81a      	bhi.n	d988 <am_hal_cachectrl_control+0x2cc>
    d952:	f000 fa97 	bl	de84 <am_hal_interrupt_master_disable>
    d956:	4603      	mov	r3, r0
    d958:	4814      	ldr	r0, [pc, #80]	; (d9ac <am_hal_cachectrl_control+0x2f0>)
    d95a:	930d      	str	r3, [sp, #52]	; 0x34
    d95c:	f000 f90a 	bl	db74 <am_hal_flash_load_ui32>
    d960:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d964:	f020 000f 	bic.w	r0, r0, #15
    d968:	ea40 0104 	orr.w	r1, r0, r4
    d96c:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d970:	480e      	ldr	r0, [pc, #56]	; (d9ac <am_hal_cachectrl_control+0x2f0>)
    d972:	f000 f903 	bl	db7c <am_hal_flash_store_ui32>
    d976:	980d      	ldr	r0, [sp, #52]	; 0x34
    d978:	f000 fa88 	bl	de8c <am_hal_interrupt_master_set>
    d97c:	2000      	movs	r0, #0
    d97e:	e6bb      	b.n	d6f8 <am_hal_cachectrl_control+0x3c>
    d980:	2007      	movs	r0, #7
    d982:	e6b9      	b.n	d6f8 <am_hal_cachectrl_control+0x3c>
    d984:	2006      	movs	r0, #6
    d986:	e6b7      	b.n	d6f8 <am_hal_cachectrl_control+0x3c>
    d988:	2001      	movs	r0, #1
    d98a:	e6b5      	b.n	d6f8 <am_hal_cachectrl_control+0x3c>
    d98c:	2c01      	cmp	r4, #1
    d98e:	d1f9      	bne.n	d984 <am_hal_cachectrl_control+0x2c8>
    d990:	4c04      	ldr	r4, [pc, #16]	; (d9a4 <am_hal_cachectrl_control+0x2e8>)
    d992:	7849      	ldrb	r1, [r1, #1]
    d994:	61a2      	str	r2, [r4, #24]
    d996:	61e3      	str	r3, [r4, #28]
    d998:	6823      	ldr	r3, [r4, #0]
    d99a:	f361 03c3 	bfi	r3, r1, #3, #1
    d99e:	6023      	str	r3, [r4, #0]
    d9a0:	e6aa      	b.n	d6f8 <am_hal_cachectrl_control+0x3c>
    d9a2:	bf00      	nop
    d9a4:	40018000 	.word	0x40018000
    d9a8:	f800000f 	.word	0xf800000f
    d9ac:	40018004 	.word	0x40018004

0000d9b0 <am_hal_clkgen_control>:
    d9b0:	4b49      	ldr	r3, [pc, #292]	; (dad8 <am_hal_clkgen_control+0x128>)
    d9b2:	681a      	ldr	r2, [r3, #0]
    d9b4:	b912      	cbnz	r2, d9bc <am_hal_clkgen_control+0xc>
    d9b6:	4a49      	ldr	r2, [pc, #292]	; (dadc <am_hal_clkgen_control+0x12c>)
    d9b8:	6812      	ldr	r2, [r2, #0]
    d9ba:	601a      	str	r2, [r3, #0]
    d9bc:	2809      	cmp	r0, #9
    d9be:	f200 8089 	bhi.w	dad4 <am_hal_clkgen_control+0x124>
    d9c2:	e8df f000 	tbb	[pc, r0]
    d9c6:	160d      	.short	0x160d
    d9c8:	423a261e 	.word	0x423a261e
    d9cc:	055c544c 	.word	0x055c544c
    d9d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d9d4:	2000      	movs	r0, #0
    d9d6:	6a1a      	ldr	r2, [r3, #32]
    d9d8:	f36f 0200 	bfc	r2, #0, #1
    d9dc:	621a      	str	r2, [r3, #32]
    d9de:	4770      	bx	lr
    d9e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d9e4:	2200      	movs	r2, #0
    d9e6:	2147      	movs	r1, #71	; 0x47
    d9e8:	6159      	str	r1, [r3, #20]
    d9ea:	4610      	mov	r0, r2
    d9ec:	619a      	str	r2, [r3, #24]
    d9ee:	615a      	str	r2, [r3, #20]
    d9f0:	4770      	bx	lr
    d9f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d9f6:	2000      	movs	r0, #0
    d9f8:	899a      	ldrh	r2, [r3, #12]
    d9fa:	f36f 0200 	bfc	r2, #0, #1
    d9fe:	819a      	strh	r2, [r3, #12]
    da00:	4770      	bx	lr
    da02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    da06:	2000      	movs	r0, #0
    da08:	899a      	ldrh	r2, [r3, #12]
    da0a:	f36f 0241 	bfc	r2, #1, #1
    da0e:	819a      	strh	r2, [r3, #12]
    da10:	4770      	bx	lr
    da12:	4a33      	ldr	r2, [pc, #204]	; (dae0 <am_hal_clkgen_control+0x130>)
    da14:	68d3      	ldr	r3, [r2, #12]
    da16:	b2db      	uxtb	r3, r3
    da18:	2b21      	cmp	r3, #33	; 0x21
    da1a:	d106      	bne.n	da2a <am_hal_clkgen_control+0x7a>
    da1c:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    da20:	2101      	movs	r1, #1
    da22:	f361 2309 	bfi	r3, r1, #8, #2
    da26:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    da2a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    da2e:	2000      	movs	r0, #0
    da30:	8993      	ldrh	r3, [r2, #12]
    da32:	f043 0301 	orr.w	r3, r3, #1
    da36:	8193      	strh	r3, [r2, #12]
    da38:	4770      	bx	lr
    da3a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    da3e:	2000      	movs	r0, #0
    da40:	8993      	ldrh	r3, [r2, #12]
    da42:	f043 0302 	orr.w	r3, r3, #2
    da46:	8193      	strh	r3, [r2, #12]
    da48:	4770      	bx	lr
    da4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    da4e:	2200      	movs	r2, #0
    da50:	2047      	movs	r0, #71	; 0x47
    da52:	2101      	movs	r1, #1
    da54:	6158      	str	r0, [r3, #20]
    da56:	6199      	str	r1, [r3, #24]
    da58:	4610      	mov	r0, r2
    da5a:	615a      	str	r2, [r3, #20]
    da5c:	4770      	bx	lr
    da5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    da62:	2000      	movs	r0, #0
    da64:	899a      	ldrh	r2, [r3, #12]
    da66:	f36f 12c7 	bfc	r2, #7, #1
    da6a:	819a      	strh	r2, [r3, #12]
    da6c:	4770      	bx	lr
    da6e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    da72:	2000      	movs	r0, #0
    da74:	8993      	ldrh	r3, [r2, #12]
    da76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    da7a:	8193      	strh	r3, [r2, #12]
    da7c:	4770      	bx	lr
    da7e:	4a18      	ldr	r2, [pc, #96]	; (dae0 <am_hal_clkgen_control+0x130>)
    da80:	68d3      	ldr	r3, [r2, #12]
    da82:	b2db      	uxtb	r3, r3
    da84:	2b21      	cmp	r3, #33	; 0x21
    da86:	d00a      	beq.n	da9e <am_hal_clkgen_control+0xee>
    da88:	b139      	cbz	r1, da9a <am_hal_clkgen_control+0xea>
    da8a:	680b      	ldr	r3, [r1, #0]
    da8c:	f043 0301 	orr.w	r3, r3, #1
    da90:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    da94:	2000      	movs	r0, #0
    da96:	6213      	str	r3, [r2, #32]
    da98:	4770      	bx	lr
    da9a:	4b12      	ldr	r3, [pc, #72]	; (dae4 <am_hal_clkgen_control+0x134>)
    da9c:	e7f8      	b.n	da90 <am_hal_clkgen_control+0xe0>
    da9e:	b500      	push	{lr}
    daa0:	b083      	sub	sp, #12
    daa2:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    daa6:	9101      	str	r1, [sp, #4]
    daa8:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    daac:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    dab0:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    dab4:	f000 f818 	bl	dae8 <am_hal_flash_delay>
    dab8:	9901      	ldr	r1, [sp, #4]
    daba:	b149      	cbz	r1, dad0 <am_hal_clkgen_control+0x120>
    dabc:	680b      	ldr	r3, [r1, #0]
    dabe:	f043 0301 	orr.w	r3, r3, #1
    dac2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dac6:	2000      	movs	r0, #0
    dac8:	6213      	str	r3, [r2, #32]
    daca:	b003      	add	sp, #12
    dacc:	f85d fb04 	ldr.w	pc, [sp], #4
    dad0:	4b04      	ldr	r3, [pc, #16]	; (dae4 <am_hal_clkgen_control+0x134>)
    dad2:	e7f6      	b.n	dac2 <am_hal_clkgen_control+0x112>
    dad4:	2006      	movs	r0, #6
    dad6:	4770      	bx	lr
    dad8:	1000124c 	.word	0x1000124c
    dadc:	4ffff000 	.word	0x4ffff000
    dae0:	40020000 	.word	0x40020000
    dae4:	0025b801 	.word	0x0025b801

0000dae8 <am_hal_flash_delay>:
    dae8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    daec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    daee:	075b      	lsls	r3, r3, #29
    daf0:	bf46      	itte	mi
    daf2:	0040      	lslmi	r0, r0, #1
    daf4:	230e      	movmi	r3, #14
    daf6:	230b      	movpl	r3, #11
    daf8:	4298      	cmp	r0, r3
    dafa:	d902      	bls.n	db02 <am_hal_flash_delay+0x1a>
    dafc:	4a01      	ldr	r2, [pc, #4]	; (db04 <am_hal_flash_delay+0x1c>)
    dafe:	1ac0      	subs	r0, r0, r3
    db00:	4710      	bx	r2
    db02:	4770      	bx	lr
    db04:	0800009d 	.word	0x0800009d

0000db08 <am_hal_flash_delay_status_check>:
    db08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    db0c:	f89d c020 	ldrb.w	ip, [sp, #32]
    db10:	f8df 805c 	ldr.w	r8, [pc, #92]	; db70 <am_hal_flash_delay_status_check+0x68>
    db14:	4604      	mov	r4, r0
    db16:	460d      	mov	r5, r1
    db18:	4616      	mov	r6, r2
    db1a:	461f      	mov	r7, r3
    db1c:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    db20:	f1bc 0f00 	cmp.w	ip, #0
    db24:	d00a      	beq.n	db3c <am_hal_flash_delay_status_check+0x34>
    db26:	e01a      	b.n	db5e <am_hal_flash_delay_status_check+0x56>
    db28:	b1f4      	cbz	r4, db68 <am_hal_flash_delay_status_check+0x60>
    db2a:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    db2e:	f013 0f04 	tst.w	r3, #4
    db32:	bf0c      	ite	eq
    db34:	2005      	moveq	r0, #5
    db36:	2012      	movne	r0, #18
    db38:	3c01      	subs	r4, #1
    db3a:	47c0      	blx	r8
    db3c:	6828      	ldr	r0, [r5, #0]
    db3e:	4030      	ands	r0, r6
    db40:	42b8      	cmp	r0, r7
    db42:	d0f1      	beq.n	db28 <am_hal_flash_delay_status_check+0x20>
    db44:	2000      	movs	r0, #0
    db46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    db4a:	b16c      	cbz	r4, db68 <am_hal_flash_delay_status_check+0x60>
    db4c:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    db50:	f013 0f04 	tst.w	r3, #4
    db54:	bf0c      	ite	eq
    db56:	2005      	moveq	r0, #5
    db58:	2012      	movne	r0, #18
    db5a:	3c01      	subs	r4, #1
    db5c:	47c0      	blx	r8
    db5e:	6828      	ldr	r0, [r5, #0]
    db60:	4030      	ands	r0, r6
    db62:	42b8      	cmp	r0, r7
    db64:	d1f1      	bne.n	db4a <am_hal_flash_delay_status_check+0x42>
    db66:	e7ed      	b.n	db44 <am_hal_flash_delay_status_check+0x3c>
    db68:	2004      	movs	r0, #4
    db6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    db6e:	bf00      	nop
    db70:	0800009d 	.word	0x0800009d

0000db74 <am_hal_flash_load_ui32>:
    db74:	4b00      	ldr	r3, [pc, #0]	; (db78 <am_hal_flash_load_ui32+0x4>)
    db76:	4718      	bx	r3
    db78:	08000075 	.word	0x08000075

0000db7c <am_hal_flash_store_ui32>:
    db7c:	4b01      	ldr	r3, [pc, #4]	; (db84 <am_hal_flash_store_ui32+0x8>)
    db7e:	f043 0301 	orr.w	r3, r3, #1
    db82:	4718      	bx	r3
    db84:	10001028 	.word	0x10001028

0000db88 <am_hal_gpio_pinconfig>:
    db88:	2831      	cmp	r0, #49	; 0x31
    db8a:	f200 80c3 	bhi.w	dd14 <am_hal_gpio_pinconfig+0x18c>
    db8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    db92:	4604      	mov	r4, r0
    db94:	f011 07e0 	ands.w	r7, r1, #224	; 0xe0
    db98:	f001 0007 	and.w	r0, r1, #7
    db9c:	b085      	sub	sp, #20
    db9e:	f3c1 03c1 	ubfx	r3, r1, #3, #2
    dba2:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    dba6:	d00f      	beq.n	dbc8 <am_hal_gpio_pinconfig+0x40>
    dba8:	f3c1 1642 	ubfx	r6, r1, #5, #3
    dbac:	1db5      	adds	r5, r6, #6
    dbae:	f005 0507 	and.w	r5, r5, #7
    dbb2:	2d03      	cmp	r5, #3
    dbb4:	f042 0201 	orr.w	r2, r2, #1
    dbb8:	f240 80ae 	bls.w	dd18 <am_hal_gpio_pinconfig+0x190>
    dbbc:	2fc0      	cmp	r7, #192	; 0xc0
    dbbe:	f000 80e1 	beq.w	dd84 <am_hal_gpio_pinconfig+0x1fc>
    dbc2:	2f20      	cmp	r7, #32
    dbc4:	f000 80e3 	beq.w	dd8e <am_hal_gpio_pinconfig+0x206>
    dbc8:	b163      	cbz	r3, dbe4 <am_hal_gpio_pinconfig+0x5c>
    dbca:	2b01      	cmp	r3, #1
    dbcc:	f000 80d3 	beq.w	dd76 <am_hal_gpio_pinconfig+0x1ee>
    dbd0:	2b02      	cmp	r3, #2
    dbd2:	f040 80c9 	bne.w	dd68 <am_hal_gpio_pinconfig+0x1e0>
    dbd6:	4b79      	ldr	r3, [pc, #484]	; (ddbc <am_hal_gpio_pinconfig+0x234>)
    dbd8:	5d1b      	ldrb	r3, [r3, r4]
    dbda:	075b      	lsls	r3, r3, #29
    dbdc:	f140 80c4 	bpl.w	dd68 <am_hal_gpio_pinconfig+0x1e0>
    dbe0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    dbe4:	4b76      	ldr	r3, [pc, #472]	; (ddc0 <am_hal_gpio_pinconfig+0x238>)
    dbe6:	5d1b      	ldrb	r3, [r3, r4]
    dbe8:	4103      	asrs	r3, r0
    dbea:	005b      	lsls	r3, r3, #1
    dbec:	f003 0302 	and.w	r3, r3, #2
    dbf0:	4313      	orrs	r3, r2
    dbf2:	4a74      	ldr	r2, [pc, #464]	; (ddc4 <am_hal_gpio_pinconfig+0x23c>)
    dbf4:	5d12      	ldrb	r2, [r2, r4]
    dbf6:	4282      	cmp	r2, r0
    dbf8:	f000 8099 	beq.w	dd2e <am_hal_gpio_pinconfig+0x1a6>
    dbfc:	f3c1 3000 	ubfx	r0, r1, #12, #1
    dc00:	f3c1 2581 	ubfx	r5, r1, #10, #2
    dc04:	f3c1 3280 	ubfx	r2, r1, #14, #1
    dc08:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    dc0c:	0a88      	lsrs	r0, r1, #10
    dc0e:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    dc12:	f000 0008 	and.w	r0, r0, #8
    dc16:	4302      	orrs	r2, r0
    dc18:	f3c1 2007 	ubfx	r0, r1, #8, #8
    dc1c:	f000 050c 	and.w	r5, r0, #12
    dc20:	2d04      	cmp	r5, #4
    dc22:	f000 80a5 	beq.w	dd70 <am_hal_gpio_pinconfig+0x1e8>
    dc26:	4d68      	ldr	r5, [pc, #416]	; (ddc8 <am_hal_gpio_pinconfig+0x240>)
    dc28:	682d      	ldr	r5, [r5, #0]
    dc2a:	eba1 0805 	sub.w	r8, r1, r5
    dc2e:	fab8 f888 	clz	r8, r8
    dc32:	ea4f 1858 	mov.w	r8, r8, lsr #5
    dc36:	f010 0f60 	tst.w	r0, #96	; 0x60
    dc3a:	bf04      	itt	eq
    dc3c:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
    dc40:	f360 0200 	bfieq	r2, r0, #0, #1
    dc44:	00a0      	lsls	r0, r4, #2
    dc46:	f3c1 2101 	ubfx	r1, r1, #8, #2
    dc4a:	2902      	cmp	r1, #2
    dc4c:	d05c      	beq.n	dd08 <am_hal_gpio_pinconfig+0x180>
    dc4e:	2903      	cmp	r1, #3
    dc50:	d058      	beq.n	dd04 <am_hal_gpio_pinconfig+0x17c>
    dc52:	2901      	cmp	r1, #1
    dc54:	ea4f 01c4 	mov.w	r1, r4, lsl #3
    dc58:	bf08      	it	eq
    dc5a:	f043 0304 	orreq.w	r3, r3, #4
    dc5e:	f001 0118 	and.w	r1, r1, #24
    dc62:	2700      	movs	r7, #0
    dc64:	f000 001c 	and.w	r0, r0, #28
    dc68:	fa02 f600 	lsl.w	r6, r2, r0
    dc6c:	220f      	movs	r2, #15
    dc6e:	4082      	lsls	r2, r0
    dc70:	43d2      	mvns	r2, r2
    dc72:	f04f 09ff 	mov.w	r9, #255	; 0xff
    dc76:	fa03 f501 	lsl.w	r5, r3, r1
    dc7a:	fa09 f901 	lsl.w	r9, r9, r1
    dc7e:	9201      	str	r2, [sp, #4]
    dc80:	f000 f900 	bl	de84 <am_hal_interrupt_master_disable>
    dc84:	f024 0a03 	bic.w	sl, r4, #3
    dc88:	ea4f 0b54 	mov.w	fp, r4, lsr #1
    dc8c:	f10a 4c80 	add.w	ip, sl, #1073741824	; 0x40000000
    dc90:	4b4e      	ldr	r3, [pc, #312]	; (ddcc <am_hal_gpio_pinconfig+0x244>)
    dc92:	494f      	ldr	r1, [pc, #316]	; (ddd0 <am_hal_gpio_pinconfig+0x248>)
    dc94:	9a01      	ldr	r2, [sp, #4]
    dc96:	9003      	str	r0, [sp, #12]
    dc98:	ea6f 0909 	mvn.w	r9, r9
    dc9c:	f02b 0b03 	bic.w	fp, fp, #3
    dca0:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
    dca4:	f1b8 0f00 	cmp.w	r8, #0
    dca8:	d00b      	beq.n	dcc2 <am_hal_gpio_pinconfig+0x13a>
    dcaa:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
    dcae:	f004 081f 	and.w	r8, r4, #31
    dcb2:	4848      	ldr	r0, [pc, #288]	; (ddd4 <am_hal_gpio_pinconfig+0x24c>)
    dcb4:	f00e 0e04 	and.w	lr, lr, #4
    dcb8:	2401      	movs	r4, #1
    dcba:	fa04 f408 	lsl.w	r4, r4, r8
    dcbe:	f84e 4000 	str.w	r4, [lr, r0]
    dcc2:	4845      	ldr	r0, [pc, #276]	; (ddd8 <am_hal_gpio_pinconfig+0x250>)
    dcc4:	2473      	movs	r4, #115	; 0x73
    dcc6:	6604      	str	r4, [r0, #96]	; 0x60
    dcc8:	f8dc 4000 	ldr.w	r4, [ip]
    dccc:	ea04 0409 	and.w	r4, r4, r9
    dcd0:	4325      	orrs	r5, r4
    dcd2:	f8cc 5000 	str.w	r5, [ip]
    dcd6:	f85b 4003 	ldr.w	r4, [fp, r3]
    dcda:	4022      	ands	r2, r4
    dcdc:	4332      	orrs	r2, r6
    dcde:	f84b 2003 	str.w	r2, [fp, r3]
    dce2:	f85a 3001 	ldr.w	r3, [sl, r1]
    dce6:	ea03 0909 	and.w	r9, r3, r9
    dcea:	2400      	movs	r4, #0
    dcec:	ea49 0707 	orr.w	r7, r9, r7
    dcf0:	f84a 7001 	str.w	r7, [sl, r1]
    dcf4:	6604      	str	r4, [r0, #96]	; 0x60
    dcf6:	9803      	ldr	r0, [sp, #12]
    dcf8:	f000 f8c8 	bl	de8c <am_hal_interrupt_master_set>
    dcfc:	4620      	mov	r0, r4
    dcfe:	b005      	add	sp, #20
    dd00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd04:	f043 0304 	orr.w	r3, r3, #4
    dd08:	00e1      	lsls	r1, r4, #3
    dd0a:	f001 0118 	and.w	r1, r1, #24
    dd0e:	2701      	movs	r7, #1
    dd10:	408f      	lsls	r7, r1
    dd12:	e7a7      	b.n	dc64 <am_hal_gpio_pinconfig+0xdc>
    dd14:	2006      	movs	r0, #6
    dd16:	4770      	bx	lr
    dd18:	4d28      	ldr	r5, [pc, #160]	; (ddbc <am_hal_gpio_pinconfig+0x234>)
    dd1a:	5d2d      	ldrb	r5, [r5, r4]
    dd1c:	3e02      	subs	r6, #2
    dd1e:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    dd22:	07ee      	lsls	r6, r5, #31
    dd24:	d536      	bpl.n	dd94 <am_hal_gpio_pinconfig+0x20c>
    dd26:	2b00      	cmp	r3, #0
    dd28:	f43f af5c 	beq.w	dbe4 <am_hal_gpio_pinconfig+0x5c>
    dd2c:	e74d      	b.n	dbca <am_hal_gpio_pinconfig+0x42>
    dd2e:	f3c1 4202 	ubfx	r2, r1, #16, #3
    dd32:	2a07      	cmp	r2, #7
    dd34:	d030      	beq.n	dd98 <am_hal_gpio_pinconfig+0x210>
    dd36:	4d29      	ldr	r5, [pc, #164]	; (dddc <am_hal_gpio_pinconfig+0x254>)
    dd38:	f3c1 40c1 	ubfx	r0, r1, #19, #2
    dd3c:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    dd40:	f815 0024 	ldrb.w	r0, [r5, r4, lsl #2]
    dd44:	4290      	cmp	r0, r2
    dd46:	d029      	beq.n	dd9c <am_hal_gpio_pinconfig+0x214>
    dd48:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    dd4c:	00a0      	lsls	r0, r4, #2
    dd4e:	786e      	ldrb	r6, [r5, #1]
    dd50:	4296      	cmp	r6, r2
    dd52:	d02d      	beq.n	ddb0 <am_hal_gpio_pinconfig+0x228>
    dd54:	78ae      	ldrb	r6, [r5, #2]
    dd56:	4296      	cmp	r6, r2
    dd58:	d02c      	beq.n	ddb4 <am_hal_gpio_pinconfig+0x22c>
    dd5a:	78ed      	ldrb	r5, [r5, #3]
    dd5c:	4295      	cmp	r5, r2
    dd5e:	d02b      	beq.n	ddb8 <am_hal_gpio_pinconfig+0x230>
    dd60:	481f      	ldr	r0, [pc, #124]	; (dde0 <am_hal_gpio_pinconfig+0x258>)
    dd62:	b005      	add	sp, #20
    dd64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd68:	481e      	ldr	r0, [pc, #120]	; (dde4 <am_hal_gpio_pinconfig+0x25c>)
    dd6a:	b005      	add	sp, #20
    dd6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd70:	f04f 0801 	mov.w	r8, #1
    dd74:	e75f      	b.n	dc36 <am_hal_gpio_pinconfig+0xae>
    dd76:	4b11      	ldr	r3, [pc, #68]	; (ddbc <am_hal_gpio_pinconfig+0x234>)
    dd78:	5d1b      	ldrb	r3, [r3, r4]
    dd7a:	079d      	lsls	r5, r3, #30
    dd7c:	d5f4      	bpl.n	dd68 <am_hal_gpio_pinconfig+0x1e0>
    dd7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    dd82:	e72f      	b.n	dbe4 <am_hal_gpio_pinconfig+0x5c>
    dd84:	2c14      	cmp	r4, #20
    dd86:	f43f af1f 	beq.w	dbc8 <am_hal_gpio_pinconfig+0x40>
    dd8a:	4817      	ldr	r0, [pc, #92]	; (dde8 <am_hal_gpio_pinconfig+0x260>)
    dd8c:	e7b7      	b.n	dcfe <am_hal_gpio_pinconfig+0x176>
    dd8e:	2c14      	cmp	r4, #20
    dd90:	f47f af1a 	bne.w	dbc8 <am_hal_gpio_pinconfig+0x40>
    dd94:	4815      	ldr	r0, [pc, #84]	; (ddec <am_hal_gpio_pinconfig+0x264>)
    dd96:	e7b2      	b.n	dcfe <am_hal_gpio_pinconfig+0x176>
    dd98:	4815      	ldr	r0, [pc, #84]	; (ddf0 <am_hal_gpio_pinconfig+0x268>)
    dd9a:	e7b0      	b.n	dcfe <am_hal_gpio_pinconfig+0x176>
    dd9c:	2200      	movs	r2, #0
    dd9e:	00a0      	lsls	r0, r4, #2
    dda0:	0052      	lsls	r2, r2, #1
    dda2:	f3c1 5540 	ubfx	r5, r1, #21, #1
    dda6:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
    ddaa:	f04f 0800 	mov.w	r8, #0
    ddae:	e74a      	b.n	dc46 <am_hal_gpio_pinconfig+0xbe>
    ddb0:	2201      	movs	r2, #1
    ddb2:	e7f5      	b.n	dda0 <am_hal_gpio_pinconfig+0x218>
    ddb4:	2202      	movs	r2, #2
    ddb6:	e7f3      	b.n	dda0 <am_hal_gpio_pinconfig+0x218>
    ddb8:	2203      	movs	r2, #3
    ddba:	e7f1      	b.n	dda0 <am_hal_gpio_pinconfig+0x218>
    ddbc:	0000f088 	.word	0x0000f088
    ddc0:	0000f0bc 	.word	0x0000f0bc
    ddc4:	0000f1b8 	.word	0x0000f1b8
    ddc8:	0000f080 	.word	0x0000f080
    ddcc:	40010040 	.word	0x40010040
    ddd0:	400100e0 	.word	0x400100e0
    ddd4:	400100b4 	.word	0x400100b4
    ddd8:	40010000 	.word	0x40010000
    dddc:	0000f0f0 	.word	0x0000f0f0
    dde0:	08000104 	.word	0x08000104
    dde4:	08000102 	.word	0x08000102
    dde8:	08000101 	.word	0x08000101
    ddec:	08000100 	.word	0x08000100
    ddf0:	08000103 	.word	0x08000103

0000ddf4 <am_hal_gpio_state_write>:
    ddf4:	2831      	cmp	r0, #49	; 0x31
    ddf6:	d81a      	bhi.n	de2e <am_hal_gpio_state_write+0x3a>
    ddf8:	b570      	push	{r4, r5, r6, lr}
    ddfa:	2905      	cmp	r1, #5
    ddfc:	b082      	sub	sp, #8
    ddfe:	460d      	mov	r5, r1
    de00:	d812      	bhi.n	de28 <am_hal_gpio_state_write+0x34>
    de02:	f000 031f 	and.w	r3, r0, #31
    de06:	2201      	movs	r2, #1
    de08:	08c0      	lsrs	r0, r0, #3
    de0a:	fa02 f603 	lsl.w	r6, r2, r3
    de0e:	f000 0404 	and.w	r4, r0, #4
    de12:	f000 f837 	bl	de84 <am_hal_interrupt_master_disable>
    de16:	3d01      	subs	r5, #1
    de18:	9001      	str	r0, [sp, #4]
    de1a:	2d04      	cmp	r5, #4
    de1c:	d821      	bhi.n	de62 <am_hal_gpio_state_write+0x6e>
    de1e:	e8df f005 	tbb	[pc, r5]
    de22:	1512      	.short	0x1512
    de24:	1d1a      	.short	0x1d1a
    de26:	08          	.byte	0x08
    de27:	00          	.byte	0x00
    de28:	2006      	movs	r0, #6
    de2a:	b002      	add	sp, #8
    de2c:	bd70      	pop	{r4, r5, r6, pc}
    de2e:	2005      	movs	r0, #5
    de30:	4770      	bx	lr
    de32:	4a0d      	ldr	r2, [pc, #52]	; (de68 <am_hal_gpio_state_write+0x74>)
    de34:	58a3      	ldr	r3, [r4, r2]
    de36:	4073      	eors	r3, r6
    de38:	50a3      	str	r3, [r4, r2]
    de3a:	9801      	ldr	r0, [sp, #4]
    de3c:	f000 f826 	bl	de8c <am_hal_interrupt_master_set>
    de40:	2000      	movs	r0, #0
    de42:	b002      	add	sp, #8
    de44:	bd70      	pop	{r4, r5, r6, pc}
    de46:	4b09      	ldr	r3, [pc, #36]	; (de6c <am_hal_gpio_state_write+0x78>)
    de48:	50e6      	str	r6, [r4, r3]
    de4a:	e7f6      	b.n	de3a <am_hal_gpio_state_write+0x46>
    de4c:	4a08      	ldr	r2, [pc, #32]	; (de70 <am_hal_gpio_state_write+0x7c>)
    de4e:	58a3      	ldr	r3, [r4, r2]
    de50:	4073      	eors	r3, r6
    de52:	50a3      	str	r3, [r4, r2]
    de54:	e7f1      	b.n	de3a <am_hal_gpio_state_write+0x46>
    de56:	4b04      	ldr	r3, [pc, #16]	; (de68 <am_hal_gpio_state_write+0x74>)
    de58:	50e6      	str	r6, [r4, r3]
    de5a:	e7ee      	b.n	de3a <am_hal_gpio_state_write+0x46>
    de5c:	4b05      	ldr	r3, [pc, #20]	; (de74 <am_hal_gpio_state_write+0x80>)
    de5e:	50e6      	str	r6, [r4, r3]
    de60:	e7eb      	b.n	de3a <am_hal_gpio_state_write+0x46>
    de62:	4b05      	ldr	r3, [pc, #20]	; (de78 <am_hal_gpio_state_write+0x84>)
    de64:	50e6      	str	r6, [r4, r3]
    de66:	e7e8      	b.n	de3a <am_hal_gpio_state_write+0x46>
    de68:	400100b4 	.word	0x400100b4
    de6c:	40010090 	.word	0x40010090
    de70:	40010088 	.word	0x40010088
    de74:	400100a8 	.word	0x400100a8
    de78:	40010098 	.word	0x40010098

0000de7c <am_hal_interrupt_master_enable>:
    de7c:	f3ef 8010 	mrs	r0, PRIMASK
    de80:	b662      	cpsie	i
    de82:	4770      	bx	lr

0000de84 <am_hal_interrupt_master_disable>:
    de84:	f3ef 8010 	mrs	r0, PRIMASK
    de88:	b672      	cpsid	i
    de8a:	4770      	bx	lr

0000de8c <am_hal_interrupt_master_set>:
    de8c:	f380 8810 	msr	PRIMASK, r0
    de90:	4770      	bx	lr
    de92:	bf00      	nop

0000de94 <am_hal_mcuctrl_info_get>:
    de94:	2900      	cmp	r1, #0
    de96:	f000 808f 	beq.w	dfb8 <am_hal_mcuctrl_info_get+0x124>
    de9a:	2801      	cmp	r0, #1
    de9c:	b430      	push	{r4, r5}
    de9e:	d006      	beq.n	deae <am_hal_mcuctrl_info_get+0x1a>
    dea0:	2802      	cmp	r0, #2
    dea2:	d06d      	beq.n	df80 <am_hal_mcuctrl_info_get+0xec>
    dea4:	2800      	cmp	r0, #0
    dea6:	d055      	beq.n	df54 <am_hal_mcuctrl_info_get+0xc0>
    dea8:	2006      	movs	r0, #6
    deaa:	bc30      	pop	{r4, r5}
    deac:	4770      	bx	lr
    deae:	4a43      	ldr	r2, [pc, #268]	; (dfbc <am_hal_mcuctrl_info_get+0x128>)
    deb0:	4843      	ldr	r0, [pc, #268]	; (dfc0 <am_hal_mcuctrl_info_get+0x12c>)
    deb2:	6813      	ldr	r3, [r2, #0]
    deb4:	600b      	str	r3, [r1, #0]
    deb6:	6854      	ldr	r4, [r2, #4]
    deb8:	604c      	str	r4, [r1, #4]
    deba:	6894      	ldr	r4, [r2, #8]
    debc:	608c      	str	r4, [r1, #8]
    debe:	68d4      	ldr	r4, [r2, #12]
    dec0:	60cc      	str	r4, [r1, #12]
    dec2:	f3c3 5503 	ubfx	r5, r3, #20, #4
    dec6:	6914      	ldr	r4, [r2, #16]
    dec8:	610c      	str	r4, [r1, #16]
    deca:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    dece:	4c3d      	ldr	r4, [pc, #244]	; (dfc4 <am_hal_mcuctrl_info_get+0x130>)
    ded0:	6950      	ldr	r0, [r2, #20]
    ded2:	6148      	str	r0, [r1, #20]
    ded4:	f003 0201 	and.w	r2, r3, #1
    ded8:	f3c3 4303 	ubfx	r3, r3, #16, #4
    dedc:	e9c1 2506 	strd	r2, r5, [r1, #24]
    dee0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    dee4:	4a38      	ldr	r2, [pc, #224]	; (dfc8 <am_hal_mcuctrl_info_get+0x134>)
    dee6:	620b      	str	r3, [r1, #32]
    dee8:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    deec:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    def0:	b2db      	uxtb	r3, r3
    def2:	f000 000f 	and.w	r0, r0, #15
    def6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    defa:	624b      	str	r3, [r1, #36]	; 0x24
    defc:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    df00:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
    df04:	f3c3 1303 	ubfx	r3, r3, #4, #4
    df08:	f000 000f 	and.w	r0, r0, #15
    df0c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
    df10:	628b      	str	r3, [r1, #40]	; 0x28
    df12:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    df16:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
    df1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    df1e:	f3c0 1003 	ubfx	r0, r0, #4, #4
    df22:	4303      	orrs	r3, r0
    df24:	62cb      	str	r3, [r1, #44]	; 0x2c
    df26:	f8d2 40fc 	ldr.w	r4, [r2, #252]	; 0xfc
    df2a:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    df2e:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    df32:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    df36:	b2db      	uxtb	r3, r3
    df38:	041b      	lsls	r3, r3, #16
    df3a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    df3e:	fa5f fc82 	uxtb.w	ip, r2
    df42:	ea43 030c 	orr.w	r3, r3, ip
    df46:	b2c2      	uxtb	r2, r0
    df48:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    df4c:	630b      	str	r3, [r1, #48]	; 0x30
    df4e:	2000      	movs	r0, #0
    df50:	bc30      	pop	{r4, r5}
    df52:	4770      	bx	lr
    df54:	4a19      	ldr	r2, [pc, #100]	; (dfbc <am_hal_mcuctrl_info_get+0x128>)
    df56:	6993      	ldr	r3, [r2, #24]
    df58:	f3c3 1480 	ubfx	r4, r3, #6, #1
    df5c:	700c      	strb	r4, [r1, #0]
    df5e:	f8d2 41a0 	ldr.w	r4, [r2, #416]	; 0x1a0
    df62:	f3c3 0380 	ubfx	r3, r3, #2, #1
    df66:	704b      	strb	r3, [r1, #1]
    df68:	f3c4 6381 	ubfx	r3, r4, #26, #2
    df6c:	710b      	strb	r3, [r1, #4]
    df6e:	6953      	ldr	r3, [r2, #20]
    df70:	f3c3 0240 	ubfx	r2, r3, #1, #1
    df74:	f003 0301 	and.w	r3, r3, #1
    df78:	bc30      	pop	{r4, r5}
    df7a:	708a      	strb	r2, [r1, #2]
    df7c:	70cb      	strb	r3, [r1, #3]
    df7e:	4770      	bx	lr
    df80:	4a0e      	ldr	r2, [pc, #56]	; (dfbc <am_hal_mcuctrl_info_get+0x128>)
    df82:	6848      	ldr	r0, [r1, #4]
    df84:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    df88:	f003 0401 	and.w	r4, r3, #1
    df8c:	700c      	strb	r4, [r1, #0]
    df8e:	f3c3 0440 	ubfx	r4, r3, #1, #1
    df92:	720c      	strb	r4, [r1, #8]
    df94:	f8d2 41c4 	ldr.w	r4, [r2, #452]	; 0x1c4
    df98:	60cc      	str	r4, [r1, #12]
    df9a:	f8d2 41c0 	ldr.w	r4, [r2, #448]	; 0x1c0
    df9e:	4320      	orrs	r0, r4
    dfa0:	f3c3 0380 	ubfx	r3, r3, #2, #1
    dfa4:	6048      	str	r0, [r1, #4]
    dfa6:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    dfaa:	740b      	strb	r3, [r1, #16]
    dfac:	694b      	ldr	r3, [r1, #20]
    dfae:	4313      	orrs	r3, r2
    dfb0:	2000      	movs	r0, #0
    dfb2:	bc30      	pop	{r4, r5}
    dfb4:	614b      	str	r3, [r1, #20]
    dfb6:	4770      	bx	lr
    dfb8:	2006      	movs	r0, #6
    dfba:	4770      	bx	lr
    dfbc:	40020000 	.word	0x40020000
    dfc0:	0000f1ec 	.word	0x0000f1ec
    dfc4:	0000f22c 	.word	0x0000f22c
    dfc8:	f0000f00 	.word	0xf0000f00

0000dfcc <am_hal_pwrctrl_periph_enable>:
    dfcc:	b570      	push	{r4, r5, r6, lr}
    dfce:	b082      	sub	sp, #8
    dfd0:	4604      	mov	r4, r0
    dfd2:	f7ff ff57 	bl	de84 <am_hal_interrupt_master_disable>
    dfd6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    dfda:	4e0f      	ldr	r6, [pc, #60]	; (e018 <am_hal_pwrctrl_periph_enable+0x4c>)
    dfdc:	4d0f      	ldr	r5, [pc, #60]	; (e01c <am_hal_pwrctrl_periph_enable+0x50>)
    dfde:	9001      	str	r0, [sp, #4]
    dfe0:	00a4      	lsls	r4, r4, #2
    dfe2:	68b3      	ldr	r3, [r6, #8]
    dfe4:	592a      	ldr	r2, [r5, r4]
    dfe6:	4313      	orrs	r3, r2
    dfe8:	60b3      	str	r3, [r6, #8]
    dfea:	9801      	ldr	r0, [sp, #4]
    dfec:	442c      	add	r4, r5
    dfee:	f7ff ff4d 	bl	de8c <am_hal_interrupt_master_set>
    dff2:	20a0      	movs	r0, #160	; 0xa0
    dff4:	f7ff fd78 	bl	dae8 <am_hal_flash_delay>
    dff8:	69b3      	ldr	r3, [r6, #24]
    dffa:	6864      	ldr	r4, [r4, #4]
    dffc:	4223      	tst	r3, r4
    dffe:	d103      	bne.n	e008 <am_hal_pwrctrl_periph_enable+0x3c>
    e000:	20a0      	movs	r0, #160	; 0xa0
    e002:	f7ff fd71 	bl	dae8 <am_hal_flash_delay>
    e006:	69b3      	ldr	r3, [r6, #24]
    e008:	4b03      	ldr	r3, [pc, #12]	; (e018 <am_hal_pwrctrl_periph_enable+0x4c>)
    e00a:	699b      	ldr	r3, [r3, #24]
    e00c:	4223      	tst	r3, r4
    e00e:	bf0c      	ite	eq
    e010:	2001      	moveq	r0, #1
    e012:	2000      	movne	r0, #0
    e014:	b002      	add	sp, #8
    e016:	bd70      	pop	{r4, r5, r6, pc}
    e018:	40021000 	.word	0x40021000
    e01c:	0000f26c 	.word	0x0000f26c

0000e020 <am_hal_pwrctrl_periph_disable>:
    e020:	b570      	push	{r4, r5, r6, lr}
    e022:	b082      	sub	sp, #8
    e024:	4604      	mov	r4, r0
    e026:	f7ff ff2d 	bl	de84 <am_hal_interrupt_master_disable>
    e02a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e02e:	4e10      	ldr	r6, [pc, #64]	; (e070 <am_hal_pwrctrl_periph_disable+0x50>)
    e030:	4d10      	ldr	r5, [pc, #64]	; (e074 <am_hal_pwrctrl_periph_disable+0x54>)
    e032:	9001      	str	r0, [sp, #4]
    e034:	00a4      	lsls	r4, r4, #2
    e036:	68b3      	ldr	r3, [r6, #8]
    e038:	592a      	ldr	r2, [r5, r4]
    e03a:	ea23 0302 	bic.w	r3, r3, r2
    e03e:	60b3      	str	r3, [r6, #8]
    e040:	9801      	ldr	r0, [sp, #4]
    e042:	442c      	add	r4, r5
    e044:	f7ff ff22 	bl	de8c <am_hal_interrupt_master_set>
    e048:	20a0      	movs	r0, #160	; 0xa0
    e04a:	f7ff fd4d 	bl	dae8 <am_hal_flash_delay>
    e04e:	69b3      	ldr	r3, [r6, #24]
    e050:	6864      	ldr	r4, [r4, #4]
    e052:	4223      	tst	r3, r4
    e054:	d003      	beq.n	e05e <am_hal_pwrctrl_periph_disable+0x3e>
    e056:	20a0      	movs	r0, #160	; 0xa0
    e058:	f7ff fd46 	bl	dae8 <am_hal_flash_delay>
    e05c:	69b3      	ldr	r3, [r6, #24]
    e05e:	4b04      	ldr	r3, [pc, #16]	; (e070 <am_hal_pwrctrl_periph_disable+0x50>)
    e060:	699b      	ldr	r3, [r3, #24]
    e062:	4223      	tst	r3, r4
    e064:	bf14      	ite	ne
    e066:	2001      	movne	r0, #1
    e068:	2000      	moveq	r0, #0
    e06a:	b002      	add	sp, #8
    e06c:	bd70      	pop	{r4, r5, r6, pc}
    e06e:	bf00      	nop
    e070:	40021000 	.word	0x40021000
    e074:	0000f26c 	.word	0x0000f26c

0000e078 <am_hal_pwrctrl_low_power_init>:
    e078:	b530      	push	{r4, r5, lr}
    e07a:	4b69      	ldr	r3, [pc, #420]	; (e220 <am_hal_pwrctrl_low_power_init+0x1a8>)
    e07c:	681a      	ldr	r2, [r3, #0]
    e07e:	b085      	sub	sp, #20
    e080:	b912      	cbnz	r2, e088 <am_hal_pwrctrl_low_power_init+0x10>
    e082:	4a68      	ldr	r2, [pc, #416]	; (e224 <am_hal_pwrctrl_low_power_init+0x1ac>)
    e084:	6812      	ldr	r2, [r2, #0]
    e086:	601a      	str	r2, [r3, #0]
    e088:	4b67      	ldr	r3, [pc, #412]	; (e228 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e08a:	68db      	ldr	r3, [r3, #12]
    e08c:	b2db      	uxtb	r3, r3
    e08e:	2b12      	cmp	r3, #18
    e090:	d104      	bne.n	e09c <am_hal_pwrctrl_low_power_init+0x24>
    e092:	4c66      	ldr	r4, [pc, #408]	; (e22c <am_hal_pwrctrl_low_power_init+0x1b4>)
    e094:	6863      	ldr	r3, [r4, #4]
    e096:	07d8      	lsls	r0, r3, #31
    e098:	f100 8088 	bmi.w	e1ac <am_hal_pwrctrl_low_power_init+0x134>
    e09c:	4b62      	ldr	r3, [pc, #392]	; (e228 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e09e:	68da      	ldr	r2, [r3, #12]
    e0a0:	b2d2      	uxtb	r2, r2
    e0a2:	2a20      	cmp	r2, #32
    e0a4:	d934      	bls.n	e110 <am_hal_pwrctrl_low_power_init+0x98>
    e0a6:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
    e0aa:	2002      	movs	r0, #2
    e0ac:	f360 4213 	bfi	r2, r0, #16, #4
    e0b0:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    e0b4:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
    e0b8:	2203      	movs	r2, #3
    e0ba:	f362 5117 	bfi	r1, r2, #20, #4
    e0be:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
    e0c2:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e0c6:	2405      	movs	r4, #5
    e0c8:	f364 0103 	bfi	r1, r4, #0, #4
    e0cc:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e0d0:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e0d4:	f360 1107 	bfi	r1, r0, #4, #4
    e0d8:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e0dc:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e0e0:	2406      	movs	r4, #6
    e0e2:	f364 210b 	bfi	r1, r4, #8, #4
    e0e6:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e0ea:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e0ee:	2001      	movs	r0, #1
    e0f0:	f360 310f 	bfi	r1, r0, #12, #4
    e0f4:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e0f8:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e0fc:	f362 61de 	bfi	r1, r2, #27, #4
    e100:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e104:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
    e108:	f362 0103 	bfi	r1, r2, #0, #4
    e10c:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
    e110:	4a45      	ldr	r2, [pc, #276]	; (e228 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e112:	68d3      	ldr	r3, [r2, #12]
    e114:	b2db      	uxtb	r3, r3
    e116:	2b11      	cmp	r3, #17
    e118:	d905      	bls.n	e126 <am_hal_pwrctrl_low_power_init+0xae>
    e11a:	f8d2 335c 	ldr.w	r3, [r2, #860]	; 0x35c
    e11e:	f36f 6318 	bfc	r3, #24, #1
    e122:	f8c2 335c 	str.w	r3, [r2, #860]	; 0x35c
    e126:	2100      	movs	r1, #0
    e128:	200c      	movs	r0, #12
    e12a:	f7ff fac7 	bl	d6bc <am_hal_cachectrl_control>
    e12e:	4b3f      	ldr	r3, [pc, #252]	; (e22c <am_hal_pwrctrl_low_power_init+0x1b4>)
    e130:	699b      	ldr	r3, [r3, #24]
    e132:	f3c3 2500 	ubfx	r5, r3, #8, #1
    e136:	05db      	lsls	r3, r3, #23
    e138:	d420      	bmi.n	e17c <am_hal_pwrctrl_low_power_init+0x104>
    e13a:	4c3b      	ldr	r4, [pc, #236]	; (e228 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e13c:	68e3      	ldr	r3, [r4, #12]
    e13e:	b2db      	uxtb	r3, r3
    e140:	2b11      	cmp	r3, #17
    e142:	d84e      	bhi.n	e1e2 <am_hal_pwrctrl_low_power_init+0x16a>
    e144:	4c38      	ldr	r4, [pc, #224]	; (e228 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e146:	493a      	ldr	r1, [pc, #232]	; (e230 <am_hal_pwrctrl_low_power_init+0x1b8>)
    e148:	7e22      	ldrb	r2, [r4, #24]
    e14a:	2001      	movs	r0, #1
    e14c:	4302      	orrs	r2, r0
    e14e:	2307      	movs	r3, #7
    e150:	7622      	strb	r2, [r4, #24]
    e152:	9000      	str	r0, [sp, #0]
    e154:	461a      	mov	r2, r3
    e156:	f242 7010 	movw	r0, #10000	; 0x2710
    e15a:	f7ff fcd5 	bl	db08 <am_hal_flash_delay_status_check>
    e15e:	2800      	cmp	r0, #0
    e160:	d15a      	bne.n	e218 <am_hal_pwrctrl_low_power_init+0x1a0>
    e162:	4b32      	ldr	r3, [pc, #200]	; (e22c <am_hal_pwrctrl_low_power_init+0x1b4>)
    e164:	681a      	ldr	r2, [r3, #0]
    e166:	f042 0201 	orr.w	r2, r2, #1
    e16a:	601a      	str	r2, [r3, #0]
    e16c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    e16e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    e172:	625a      	str	r2, [r3, #36]	; 0x24
    e174:	68e3      	ldr	r3, [r4, #12]
    e176:	b2db      	uxtb	r3, r3
    e178:	2b11      	cmp	r3, #17
    e17a:	d002      	beq.n	e182 <am_hal_pwrctrl_low_power_init+0x10a>
    e17c:	2000      	movs	r0, #0
    e17e:	b005      	add	sp, #20
    e180:	bd30      	pop	{r4, r5, pc}
    e182:	f8d4 335c 	ldr.w	r3, [r4, #860]	; 0x35c
    e186:	f360 5356 	bfi	r3, r0, #21, #2
    e18a:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
    e18e:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e192:	220f      	movs	r2, #15
    e194:	f362 138b 	bfi	r3, r2, #6, #6
    e198:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e19c:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e1a0:	f362 0305 	bfi	r3, r2, #0, #6
    e1a4:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e1a8:	b005      	add	sp, #20
    e1aa:	bd30      	pop	{r4, r5, pc}
    e1ac:	f7ff fe6a 	bl	de84 <am_hal_interrupt_master_disable>
    e1b0:	9002      	str	r0, [sp, #8]
    e1b2:	68a3      	ldr	r3, [r4, #8]
    e1b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    e1b8:	60a3      	str	r3, [r4, #8]
    e1ba:	9802      	ldr	r0, [sp, #8]
    e1bc:	f7ff fe66 	bl	de8c <am_hal_interrupt_master_set>
    e1c0:	20a0      	movs	r0, #160	; 0xa0
    e1c2:	f7ff fc91 	bl	dae8 <am_hal_flash_delay>
    e1c6:	69a3      	ldr	r3, [r4, #24]
    e1c8:	0619      	lsls	r1, r3, #24
    e1ca:	d403      	bmi.n	e1d4 <am_hal_pwrctrl_low_power_init+0x15c>
    e1cc:	20a0      	movs	r0, #160	; 0xa0
    e1ce:	f7ff fc8b 	bl	dae8 <am_hal_flash_delay>
    e1d2:	69a3      	ldr	r3, [r4, #24]
    e1d4:	4b15      	ldr	r3, [pc, #84]	; (e22c <am_hal_pwrctrl_low_power_init+0x1b4>)
    e1d6:	699b      	ldr	r3, [r3, #24]
    e1d8:	061a      	lsls	r2, r3, #24
    e1da:	f53f af5f 	bmi.w	e09c <am_hal_pwrctrl_low_power_init+0x24>
    e1de:	2001      	movs	r0, #1
    e1e0:	e7cd      	b.n	e17e <am_hal_pwrctrl_low_power_init+0x106>
    e1e2:	f7ff fe4f 	bl	de84 <am_hal_interrupt_master_disable>
    e1e6:	9003      	str	r0, [sp, #12]
    e1e8:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e1ec:	2219      	movs	r2, #25
    e1ee:	f362 138b 	bfi	r3, r2, #6, #6
    e1f2:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e1f6:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
    e1fa:	210c      	movs	r1, #12
    e1fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e200:	f361 0205 	bfi	r2, r1, #0, #6
    e204:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
    e208:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    e20a:	f365 5296 	bfi	r2, r5, #22, #1
    e20e:	63da      	str	r2, [r3, #60]	; 0x3c
    e210:	9803      	ldr	r0, [sp, #12]
    e212:	f7ff fe3b 	bl	de8c <am_hal_interrupt_master_set>
    e216:	e795      	b.n	e144 <am_hal_pwrctrl_low_power_init+0xcc>
    e218:	2004      	movs	r0, #4
    e21a:	b005      	add	sp, #20
    e21c:	bd30      	pop	{r4, r5, pc}
    e21e:	bf00      	nop
    e220:	1000124c 	.word	0x1000124c
    e224:	4ffff000 	.word	0x4ffff000
    e228:	40020000 	.word	0x40020000
    e22c:	40021000 	.word	0x40021000
    e230:	40020018 	.word	0x40020018

0000e234 <am_hal_rtc_osc_disable>:
    e234:	4a03      	ldr	r2, [pc, #12]	; (e244 <am_hal_rtc_osc_disable+0x10>)
    e236:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    e23a:	f043 0310 	orr.w	r3, r3, #16
    e23e:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    e242:	4770      	bx	lr
    e244:	40004200 	.word	0x40004200

0000e248 <am_hal_security_get_info>:
    e248:	2800      	cmp	r0, #0
    e24a:	d039      	beq.n	e2c0 <am_hal_security_get_info+0x78>
    e24c:	b510      	push	{r4, lr}
    e24e:	4b25      	ldr	r3, [pc, #148]	; (e2e4 <am_hal_security_get_info+0x9c>)
    e250:	4a25      	ldr	r2, [pc, #148]	; (e2e8 <am_hal_security_get_info+0xa0>)
    e252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e254:	6043      	str	r3, [r0, #4]
    e256:	f8d2 31a4 	ldr.w	r3, [r2, #420]	; 0x1a4
    e25a:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e25e:	7003      	strb	r3, [r0, #0]
    e260:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
    e264:	f013 6f40 	tst.w	r3, #201326592	; 0xc000000
    e268:	b082      	sub	sp, #8
    e26a:	4604      	mov	r4, r0
    e26c:	d008      	beq.n	e280 <am_hal_security_get_info+0x38>
    e26e:	4b1f      	ldr	r3, [pc, #124]	; (e2ec <am_hal_security_get_info+0xa4>)
    e270:	4a1f      	ldr	r2, [pc, #124]	; (e2f0 <am_hal_security_get_info+0xa8>)
    e272:	681b      	ldr	r3, [r3, #0]
    e274:	6812      	ldr	r2, [r2, #0]
    e276:	681b      	ldr	r3, [r3, #0]
    e278:	6811      	ldr	r1, [r2, #0]
    e27a:	0e1a      	lsrs	r2, r3, #24
    e27c:	2aa3      	cmp	r2, #163	; 0xa3
    e27e:	d002      	beq.n	e286 <am_hal_security_get_info+0x3e>
    e280:	2001      	movs	r0, #1
    e282:	b002      	add	sp, #8
    e284:	bd10      	pop	{r4, pc}
    e286:	4a1b      	ldr	r2, [pc, #108]	; (e2f4 <am_hal_security_get_info+0xac>)
    e288:	4293      	cmp	r3, r2
    e28a:	d012      	beq.n	e2b2 <am_hal_security_get_info+0x6a>
    e28c:	4a1a      	ldr	r2, [pc, #104]	; (e2f8 <am_hal_security_get_info+0xb0>)
    e28e:	4293      	cmp	r3, r2
    e290:	d118      	bne.n	e2c4 <am_hal_security_get_info+0x7c>
    e292:	4b1a      	ldr	r3, [pc, #104]	; (e2fc <am_hal_security_get_info+0xb4>)
    e294:	4299      	cmp	r1, r3
    e296:	d020      	beq.n	e2da <am_hal_security_get_info+0x92>
    e298:	a801      	add	r0, sp, #4
    e29a:	f240 13d1 	movw	r3, #465	; 0x1d1
    e29e:	4798      	blx	r3
    e2a0:	2800      	cmp	r0, #0
    e2a2:	d1ee      	bne.n	e282 <am_hal_security_get_info+0x3a>
    e2a4:	9b01      	ldr	r3, [sp, #4]
    e2a6:	f3c3 020e 	ubfx	r2, r3, #0, #15
    e2aa:	0bdb      	lsrs	r3, r3, #15
    e2ac:	e9c4 2302 	strd	r2, r3, [r4, #8]
    e2b0:	e7e7      	b.n	e282 <am_hal_security_get_info+0x3a>
    e2b2:	4b13      	ldr	r3, [pc, #76]	; (e300 <am_hal_security_get_info+0xb8>)
    e2b4:	4299      	cmp	r1, r3
    e2b6:	d1ef      	bne.n	e298 <am_hal_security_get_info+0x50>
    e2b8:	2000      	movs	r0, #0
    e2ba:	e9c4 0002 	strd	r0, r0, [r4, #8]
    e2be:	e7e0      	b.n	e282 <am_hal_security_get_info+0x3a>
    e2c0:	2006      	movs	r0, #6
    e2c2:	4770      	bx	lr
    e2c4:	4a0f      	ldr	r2, [pc, #60]	; (e304 <am_hal_security_get_info+0xbc>)
    e2c6:	4293      	cmp	r3, r2
    e2c8:	d1e6      	bne.n	e298 <am_hal_security_get_info+0x50>
    e2ca:	4b0f      	ldr	r3, [pc, #60]	; (e308 <am_hal_security_get_info+0xc0>)
    e2cc:	4299      	cmp	r1, r3
    e2ce:	d1e3      	bne.n	e298 <am_hal_security_get_info+0x50>
    e2d0:	2000      	movs	r0, #0
    e2d2:	2302      	movs	r3, #2
    e2d4:	e9c4 3002 	strd	r3, r0, [r4, #8]
    e2d8:	e7d3      	b.n	e282 <am_hal_security_get_info+0x3a>
    e2da:	2000      	movs	r0, #0
    e2dc:	2301      	movs	r3, #1
    e2de:	e9c4 3002 	strd	r3, r0, [r4, #8]
    e2e2:	e7ce      	b.n	e282 <am_hal_security_get_info+0x3a>
    e2e4:	50020000 	.word	0x50020000
    e2e8:	40020000 	.word	0x40020000
    e2ec:	10001250 	.word	0x10001250
    e2f0:	10001034 	.word	0x10001034
    e2f4:	a3007860 	.word	0xa3007860
    e2f8:	a3007e14 	.word	0xa3007e14
    e2fc:	5ee4e461 	.word	0x5ee4e461
    e300:	2e2638fb 	.word	0x2e2638fb
    e304:	a3008290 	.word	0xa3008290
    e308:	b49cecd5 	.word	0xb49cecd5

0000e30c <am_hal_sysctrl_sleep>:
    e30c:	b510      	push	{r4, lr}
    e30e:	b082      	sub	sp, #8
    e310:	4604      	mov	r4, r0
    e312:	f7ff fdb7 	bl	de84 <am_hal_interrupt_master_disable>
    e316:	9001      	str	r0, [sp, #4]
    e318:	b124      	cbz	r4, e324 <am_hal_sysctrl_sleep+0x18>
    e31a:	4b12      	ldr	r3, [pc, #72]	; (e364 <am_hal_sysctrl_sleep+0x58>)
    e31c:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    e320:	07db      	lsls	r3, r3, #31
    e322:	d513      	bpl.n	e34c <am_hal_sysctrl_sleep+0x40>
    e324:	4a10      	ldr	r2, [pc, #64]	; (e368 <am_hal_sysctrl_sleep+0x5c>)
    e326:	6913      	ldr	r3, [r2, #16]
    e328:	f023 0304 	bic.w	r3, r3, #4
    e32c:	6113      	str	r3, [r2, #16]
    e32e:	f3bf 8f4f 	dsb	sy
    e332:	4a0e      	ldr	r2, [pc, #56]	; (e36c <am_hal_sysctrl_sleep+0x60>)
    e334:	4b0e      	ldr	r3, [pc, #56]	; (e370 <am_hal_sysctrl_sleep+0x64>)
    e336:	6812      	ldr	r2, [r2, #0]
    e338:	601a      	str	r2, [r3, #0]
    e33a:	bf30      	wfi
    e33c:	f3bf 8f6f 	isb	sy
    e340:	9801      	ldr	r0, [sp, #4]
    e342:	b002      	add	sp, #8
    e344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e348:	f7ff bda0 	b.w	de8c <am_hal_interrupt_master_set>
    e34c:	4b09      	ldr	r3, [pc, #36]	; (e374 <am_hal_sysctrl_sleep+0x68>)
    e34e:	681a      	ldr	r2, [r3, #0]
    e350:	b912      	cbnz	r2, e358 <am_hal_sysctrl_sleep+0x4c>
    e352:	4a09      	ldr	r2, [pc, #36]	; (e378 <am_hal_sysctrl_sleep+0x6c>)
    e354:	6812      	ldr	r2, [r2, #0]
    e356:	601a      	str	r2, [r3, #0]
    e358:	4a03      	ldr	r2, [pc, #12]	; (e368 <am_hal_sysctrl_sleep+0x5c>)
    e35a:	6913      	ldr	r3, [r2, #16]
    e35c:	f043 0304 	orr.w	r3, r3, #4
    e360:	6113      	str	r3, [r2, #16]
    e362:	e7e4      	b.n	e32e <am_hal_sysctrl_sleep+0x22>
    e364:	40020000 	.word	0x40020000
    e368:	e000ed00 	.word	0xe000ed00
    e36c:	5fff0000 	.word	0x5fff0000
    e370:	10001254 	.word	0x10001254
    e374:	1000124c 	.word	0x1000124c
    e378:	4ffff000 	.word	0x4ffff000

0000e37c <am_hal_uart_initialize>:
    e37c:	2801      	cmp	r0, #1
    e37e:	d81a      	bhi.n	e3b6 <am_hal_uart_initialize+0x3a>
    e380:	b1e9      	cbz	r1, e3be <am_hal_uart_initialize+0x42>
    e382:	b530      	push	{r4, r5, lr}
    e384:	2264      	movs	r2, #100	; 0x64
    e386:	4d0f      	ldr	r5, [pc, #60]	; (e3c4 <am_hal_uart_initialize+0x48>)
    e388:	fb00 f202 	mul.w	r2, r0, r2
    e38c:	18ac      	adds	r4, r5, r2
    e38e:	78e3      	ldrb	r3, [r4, #3]
    e390:	f3c3 0e00 	ubfx	lr, r3, #0, #1
    e394:	f013 0301 	ands.w	r3, r3, #1
    e398:	d10f      	bne.n	e3ba <am_hal_uart_initialize+0x3e>
    e39a:	6260      	str	r0, [r4, #36]	; 0x24
    e39c:	58a8      	ldr	r0, [r5, r2]
    e39e:	f000 4c7e 	and.w	ip, r0, #4261412864	; 0xfe000000
    e3a2:	4809      	ldr	r0, [pc, #36]	; (e3c8 <am_hal_uart_initialize+0x4c>)
    e3a4:	ea4c 0000 	orr.w	r0, ip, r0
    e3a8:	50a8      	str	r0, [r5, r2]
    e3aa:	f884 e004 	strb.w	lr, [r4, #4]
    e3ae:	6623      	str	r3, [r4, #96]	; 0x60
    e3b0:	4618      	mov	r0, r3
    e3b2:	600c      	str	r4, [r1, #0]
    e3b4:	bd30      	pop	{r4, r5, pc}
    e3b6:	2005      	movs	r0, #5
    e3b8:	4770      	bx	lr
    e3ba:	2007      	movs	r0, #7
    e3bc:	bd30      	pop	{r4, r5, pc}
    e3be:	2006      	movs	r0, #6
    e3c0:	4770      	bx	lr
    e3c2:	bf00      	nop
    e3c4:	10001258 	.word	0x10001258
    e3c8:	01ea9e06 	.word	0x01ea9e06

0000e3cc <am_hal_uart_power_control>:
    e3cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    e3ce:	4604      	mov	r4, r0
    e3d0:	6800      	ldr	r0, [r0, #0]
    e3d2:	4b39      	ldr	r3, [pc, #228]	; (e4b8 <am_hal_uart_power_control+0xec>)
    e3d4:	f020 467e 	bic.w	r6, r0, #4261412864	; 0xfe000000
    e3d8:	429e      	cmp	r6, r3
    e3da:	b085      	sub	sp, #20
    e3dc:	d13f      	bne.n	e45e <am_hal_uart_power_control+0x92>
    e3de:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e3e0:	f105 0008 	add.w	r0, r5, #8
    e3e4:	b2c7      	uxtb	r7, r0
    e3e6:	b189      	cbz	r1, e40c <am_hal_uart_power_control+0x40>
    e3e8:	3901      	subs	r1, #1
    e3ea:	2901      	cmp	r1, #1
    e3ec:	d834      	bhi.n	e458 <am_hal_uart_power_control+0x8c>
    e3ee:	2a00      	cmp	r2, #0
    e3f0:	d138      	bne.n	e464 <am_hal_uart_power_control+0x98>
    e3f2:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e3f6:	351c      	adds	r5, #28
    e3f8:	032d      	lsls	r5, r5, #12
    e3fa:	f04f 33ff 	mov.w	r3, #4294967295
    e3fe:	646b      	str	r3, [r5, #68]	; 0x44
    e400:	4638      	mov	r0, r7
    e402:	f7ff fe0d 	bl	e020 <am_hal_pwrctrl_periph_disable>
    e406:	2000      	movs	r0, #0
    e408:	b005      	add	sp, #20
    e40a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e40c:	2a00      	cmp	r2, #0
    e40e:	d04a      	beq.n	e4a6 <am_hal_uart_power_control+0xda>
    e410:	7923      	ldrb	r3, [r4, #4]
    e412:	2b00      	cmp	r3, #0
    e414:	d04e      	beq.n	e4b4 <am_hal_uart_power_control+0xe8>
    e416:	4638      	mov	r0, r7
    e418:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e41c:	9101      	str	r1, [sp, #4]
    e41e:	351c      	adds	r5, #28
    e420:	f7ff fdd4 	bl	dfcc <am_hal_pwrctrl_periph_enable>
    e424:	f7ff fd2e 	bl	de84 <am_hal_interrupt_master_disable>
    e428:	032d      	lsls	r5, r5, #12
    e42a:	68a3      	ldr	r3, [r4, #8]
    e42c:	9002      	str	r0, [sp, #8]
    e42e:	622b      	str	r3, [r5, #32]
    e430:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    e434:	626a      	str	r2, [r5, #36]	; 0x24
    e436:	62ab      	str	r3, [r5, #40]	; 0x28
    e438:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
    e43c:	62ea      	str	r2, [r5, #44]	; 0x2c
    e43e:	632b      	str	r3, [r5, #48]	; 0x30
    e440:	e9d4 2307 	ldrd	r2, r3, [r4, #28]
    e444:	9901      	ldr	r1, [sp, #4]
    e446:	636a      	str	r2, [r5, #52]	; 0x34
    e448:	63ab      	str	r3, [r5, #56]	; 0x38
    e44a:	9802      	ldr	r0, [sp, #8]
    e44c:	7121      	strb	r1, [r4, #4]
    e44e:	f7ff fd1d 	bl	de8c <am_hal_interrupt_master_set>
    e452:	9901      	ldr	r1, [sp, #4]
    e454:	4608      	mov	r0, r1
    e456:	e000      	b.n	e45a <am_hal_uart_power_control+0x8e>
    e458:	2006      	movs	r0, #6
    e45a:	b005      	add	sp, #20
    e45c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e45e:	2002      	movs	r0, #2
    e460:	b005      	add	sp, #20
    e462:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e464:	f7ff fd0e 	bl	de84 <am_hal_interrupt_master_disable>
    e468:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e46c:	351c      	adds	r5, #28
    e46e:	032d      	lsls	r5, r5, #12
    e470:	9003      	str	r0, [sp, #12]
    e472:	6a2b      	ldr	r3, [r5, #32]
    e474:	60a3      	str	r3, [r4, #8]
    e476:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e478:	60e3      	str	r3, [r4, #12]
    e47a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e47c:	6123      	str	r3, [r4, #16]
    e47e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    e480:	6163      	str	r3, [r4, #20]
    e482:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    e484:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    e486:	61a3      	str	r3, [r4, #24]
    e488:	6bab      	ldr	r3, [r5, #56]	; 0x38
    e48a:	61e2      	str	r2, [r4, #28]
    e48c:	2201      	movs	r2, #1
    e48e:	6223      	str	r3, [r4, #32]
    e490:	9803      	ldr	r0, [sp, #12]
    e492:	7122      	strb	r2, [r4, #4]
    e494:	f7ff fcfa 	bl	de8c <am_hal_interrupt_master_set>
    e498:	6823      	ldr	r3, [r4, #0]
    e49a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e49e:	42b3      	cmp	r3, r6
    e4a0:	d1ae      	bne.n	e400 <am_hal_uart_power_control+0x34>
    e4a2:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e4a4:	e7a5      	b.n	e3f2 <am_hal_uart_power_control+0x26>
    e4a6:	4638      	mov	r0, r7
    e4a8:	9201      	str	r2, [sp, #4]
    e4aa:	f7ff fd8f 	bl	dfcc <am_hal_pwrctrl_periph_enable>
    e4ae:	9a01      	ldr	r2, [sp, #4]
    e4b0:	4610      	mov	r0, r2
    e4b2:	e7d2      	b.n	e45a <am_hal_uart_power_control+0x8e>
    e4b4:	2007      	movs	r0, #7
    e4b6:	e7d0      	b.n	e45a <am_hal_uart_power_control+0x8e>
    e4b8:	01ea9e06 	.word	0x01ea9e06

0000e4bc <am_hal_uart_configure>:
    e4bc:	6803      	ldr	r3, [r0, #0]
    e4be:	4a78      	ldr	r2, [pc, #480]	; (e6a0 <am_hal_uart_configure+0x1e4>)
    e4c0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e4c4:	4293      	cmp	r3, r2
    e4c6:	d001      	beq.n	e4cc <am_hal_uart_configure+0x10>
    e4c8:	2002      	movs	r0, #2
    e4ca:	4770      	bx	lr
    e4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e4d0:	6a44      	ldr	r4, [r0, #36]	; 0x24
    e4d2:	f504 2480 	add.w	r4, r4, #262144	; 0x40000
    e4d6:	341c      	adds	r4, #28
    e4d8:	0324      	lsls	r4, r4, #12
    e4da:	2700      	movs	r7, #0
    e4dc:	b084      	sub	sp, #16
    e4de:	6327      	str	r7, [r4, #48]	; 0x30
    e4e0:	460e      	mov	r6, r1
    e4e2:	4605      	mov	r5, r0
    e4e4:	f7ff fcce 	bl	de84 <am_hal_interrupt_master_disable>
    e4e8:	9001      	str	r0, [sp, #4]
    e4ea:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e4ec:	f043 0308 	orr.w	r3, r3, #8
    e4f0:	8623      	strh	r3, [r4, #48]	; 0x30
    e4f2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e4f4:	2201      	movs	r2, #1
    e4f6:	f362 1306 	bfi	r3, r2, #4, #3
    e4fa:	8623      	strh	r3, [r4, #48]	; 0x30
    e4fc:	9801      	ldr	r0, [sp, #4]
    e4fe:	f7ff fcc5 	bl	de8c <am_hal_interrupt_master_set>
    e502:	f7ff fcbf 	bl	de84 <am_hal_interrupt_master_disable>
    e506:	9002      	str	r0, [sp, #8]
    e508:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e50a:	f367 0300 	bfi	r3, r7, #0, #1
    e50e:	8623      	strh	r3, [r4, #48]	; 0x30
    e510:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e512:	f367 2349 	bfi	r3, r7, #9, #1
    e516:	8623      	strh	r3, [r4, #48]	; 0x30
    e518:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e51a:	f367 2308 	bfi	r3, r7, #8, #1
    e51e:	8623      	strh	r3, [r4, #48]	; 0x30
    e520:	9802      	ldr	r0, [sp, #8]
    e522:	f7ff fcb3 	bl	de8c <am_hal_interrupt_master_set>
    e526:	4b5f      	ldr	r3, [pc, #380]	; (e6a4 <am_hal_uart_configure+0x1e8>)
    e528:	6832      	ldr	r2, [r6, #0]
    e52a:	68db      	ldr	r3, [r3, #12]
    e52c:	b2db      	uxtb	r3, r3
    e52e:	2b12      	cmp	r3, #18
    e530:	d076      	beq.n	e620 <am_hal_uart_configure+0x164>
    e532:	4b5c      	ldr	r3, [pc, #368]	; (e6a4 <am_hal_uart_configure+0x1e8>)
    e534:	68db      	ldr	r3, [r3, #12]
    e536:	b2db      	uxtb	r3, r3
    e538:	2b20      	cmp	r3, #32
    e53a:	d902      	bls.n	e542 <am_hal_uart_configure+0x86>
    e53c:	4b5a      	ldr	r3, [pc, #360]	; (e6a8 <am_hal_uart_configure+0x1ec>)
    e53e:	429a      	cmp	r2, r3
    e540:	d871      	bhi.n	e626 <am_hal_uart_configure+0x16a>
    e542:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e544:	f3c3 1302 	ubfx	r3, r3, #4, #3
    e548:	3b01      	subs	r3, #1
    e54a:	b2db      	uxtb	r3, r3
    e54c:	2b03      	cmp	r3, #3
    e54e:	d86c      	bhi.n	e62a <am_hal_uart_configure+0x16e>
    e550:	4956      	ldr	r1, [pc, #344]	; (e6ac <am_hal_uart_configure+0x1f0>)
    e552:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    e556:	0112      	lsls	r2, r2, #4
    e558:	4291      	cmp	r1, r2
    e55a:	ea4f 1381 	mov.w	r3, r1, lsl #6
    e55e:	fbb1 f0f2 	udiv	r0, r1, r2
    e562:	fbb3 f3f2 	udiv	r3, r3, r2
    e566:	eba3 1380 	sub.w	r3, r3, r0, lsl #6
    e56a:	d364      	bcc.n	e636 <am_hal_uart_configure+0x17a>
    e56c:	6260      	str	r0, [r4, #36]	; 0x24
    e56e:	6260      	str	r0, [r4, #36]	; 0x24
    e570:	62a3      	str	r3, [r4, #40]	; 0x28
    e572:	089b      	lsrs	r3, r3, #2
    e574:	eb03 1300 	add.w	r3, r3, r0, lsl #4
    e578:	fbb1 f3f3 	udiv	r3, r1, r3
    e57c:	662b      	str	r3, [r5, #96]	; 0x60
    e57e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e580:	f36f 338e 	bfc	r3, #14, #1
    e584:	8623      	strh	r3, [r4, #48]	; 0x30
    e586:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e588:	f36f 33cf 	bfc	r3, #15, #1
    e58c:	8623      	strh	r3, [r4, #48]	; 0x30
    e58e:	6933      	ldr	r3, [r6, #16]
    e590:	6b22      	ldr	r2, [r4, #48]	; 0x30
    e592:	6971      	ldr	r1, [r6, #20]
    e594:	431a      	orrs	r2, r3
    e596:	6873      	ldr	r3, [r6, #4]
    e598:	6322      	str	r2, [r4, #48]	; 0x30
    e59a:	68f2      	ldr	r2, [r6, #12]
    e59c:	6361      	str	r1, [r4, #52]	; 0x34
    e59e:	4313      	orrs	r3, r2
    e5a0:	68b2      	ldr	r2, [r6, #8]
    e5a2:	4313      	orrs	r3, r2
    e5a4:	f043 0310 	orr.w	r3, r3, #16
    e5a8:	62e3      	str	r3, [r4, #44]	; 0x2c
    e5aa:	f7ff fc6b 	bl	de84 <am_hal_interrupt_master_disable>
    e5ae:	9003      	str	r0, [sp, #12]
    e5b0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e5b2:	f043 0301 	orr.w	r3, r3, #1
    e5b6:	8623      	strh	r3, [r4, #48]	; 0x30
    e5b8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e5ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    e5be:	8623      	strh	r3, [r4, #48]	; 0x30
    e5c0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e5c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    e5c6:	8623      	strh	r3, [r4, #48]	; 0x30
    e5c8:	9803      	ldr	r0, [sp, #12]
    e5ca:	f7ff fc5f 	bl	de8c <am_hal_interrupt_master_set>
    e5ce:	682a      	ldr	r2, [r5, #0]
    e5d0:	4b33      	ldr	r3, [pc, #204]	; (e6a0 <am_hal_uart_configure+0x1e4>)
    e5d2:	f022 487e 	bic.w	r8, r2, #4261412864	; 0xfe000000
    e5d6:	4598      	cmp	r8, r3
    e5d8:	d11e      	bne.n	e618 <am_hal_uart_configure+0x15c>
    e5da:	69b1      	ldr	r1, [r6, #24]
    e5dc:	e9d6 4708 	ldrd	r4, r7, [r6, #32]
    e5e0:	b109      	cbz	r1, e5e6 <am_hal_uart_configure+0x12a>
    e5e2:	69f3      	ldr	r3, [r6, #28]
    e5e4:	bb5b      	cbnz	r3, e63e <am_hal_uart_configure+0x182>
    e5e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e5e8:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e5ec:	331c      	adds	r3, #28
    e5ee:	031b      	lsls	r3, r3, #12
    e5f0:	2200      	movs	r2, #0
    e5f2:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
    e5f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e5f8:	f022 0220 	bic.w	r2, r2, #32
    e5fc:	639a      	str	r2, [r3, #56]	; 0x38
    e5fe:	b10c      	cbz	r4, e604 <am_hal_uart_configure+0x148>
    e600:	2f00      	cmp	r7, #0
    e602:	d132      	bne.n	e66a <am_hal_uart_configure+0x1ae>
    e604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e606:	2000      	movs	r0, #0
    e608:	f022 0250 	bic.w	r2, r2, #80	; 0x50
    e60c:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
    e610:	639a      	str	r2, [r3, #56]	; 0x38
    e612:	b004      	add	sp, #16
    e614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e618:	2000      	movs	r0, #0
    e61a:	b004      	add	sp, #16
    e61c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e620:	f5b2 2f61 	cmp.w	r2, #921600	; 0xe1000
    e624:	d985      	bls.n	e532 <am_hal_uart_configure+0x76>
    e626:	4822      	ldr	r0, [pc, #136]	; (e6b0 <am_hal_uart_configure+0x1f4>)
    e628:	e7f3      	b.n	e612 <am_hal_uart_configure+0x156>
    e62a:	4822      	ldr	r0, [pc, #136]	; (e6b4 <am_hal_uart_configure+0x1f8>)
    e62c:	2300      	movs	r3, #0
    e62e:	662b      	str	r3, [r5, #96]	; 0x60
    e630:	b004      	add	sp, #16
    e632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e636:	2300      	movs	r3, #0
    e638:	481d      	ldr	r0, [pc, #116]	; (e6b0 <am_hal_uart_configure+0x1f4>)
    e63a:	662b      	str	r3, [r5, #96]	; 0x60
    e63c:	e7e9      	b.n	e612 <am_hal_uart_configure+0x156>
    e63e:	2201      	movs	r2, #1
    e640:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
    e644:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    e648:	f000 fb28 	bl	ec9c <am_hal_queue_init>
    e64c:	682b      	ldr	r3, [r5, #0]
    e64e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e652:	4543      	cmp	r3, r8
    e654:	d1e0      	bne.n	e618 <am_hal_uart_configure+0x15c>
    e656:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e658:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e65c:	331c      	adds	r3, #28
    e65e:	031b      	lsls	r3, r3, #12
    e660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e662:	f042 0220 	orr.w	r2, r2, #32
    e666:	639a      	str	r2, [r3, #56]	; 0x38
    e668:	e7c9      	b.n	e5fe <am_hal_uart_configure+0x142>
    e66a:	2201      	movs	r2, #1
    e66c:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
    e670:	463b      	mov	r3, r7
    e672:	4621      	mov	r1, r4
    e674:	f105 0048 	add.w	r0, r5, #72	; 0x48
    e678:	f000 fb10 	bl	ec9c <am_hal_queue_init>
    e67c:	682b      	ldr	r3, [r5, #0]
    e67e:	4a08      	ldr	r2, [pc, #32]	; (e6a0 <am_hal_uart_configure+0x1e4>)
    e680:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e684:	4293      	cmp	r3, r2
    e686:	d1c7      	bne.n	e618 <am_hal_uart_configure+0x15c>
    e688:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e68a:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e68e:	331c      	adds	r3, #28
    e690:	031b      	lsls	r3, r3, #12
    e692:	2000      	movs	r0, #0
    e694:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e696:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    e69a:	639a      	str	r2, [r3, #56]	; 0x38
    e69c:	e7b9      	b.n	e612 <am_hal_uart_configure+0x156>
    e69e:	bf00      	nop
    e6a0:	01ea9e06 	.word	0x01ea9e06
    e6a4:	40020000 	.word	0x40020000
    e6a8:	0016e360 	.word	0x0016e360
    e6ac:	0000f320 	.word	0x0000f320
    e6b0:	08000003 	.word	0x08000003
    e6b4:	08000002 	.word	0x08000002

0000e6b8 <am_hal_uart_transfer>:
    e6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e6bc:	ed2d 8b02 	vpush	{d8}
    e6c0:	680d      	ldr	r5, [r1, #0]
    e6c2:	b091      	sub	sp, #68	; 0x44
    e6c4:	4604      	mov	r4, r0
    e6c6:	b14d      	cbz	r5, e6dc <am_hal_uart_transfer+0x24>
    e6c8:	2d01      	cmp	r5, #1
    e6ca:	f000 808f 	beq.w	e7ec <am_hal_uart_transfer+0x134>
    e6ce:	2507      	movs	r5, #7
    e6d0:	4628      	mov	r0, r5
    e6d2:	b011      	add	sp, #68	; 0x44
    e6d4:	ecbd 8b02 	vpop	{d8}
    e6d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e6dc:	e9d1 b802 	ldrd	fp, r8, [r1, #8]
    e6e0:	684b      	ldr	r3, [r1, #4]
    e6e2:	690a      	ldr	r2, [r1, #16]
    e6e4:	9202      	str	r2, [sp, #8]
    e6e6:	4618      	mov	r0, r3
    e6e8:	f1b8 0f00 	cmp.w	r8, #0
    e6ec:	f000 8111 	beq.w	e912 <am_hal_uart_transfer+0x25a>
    e6f0:	f1bb 0f00 	cmp.w	fp, #0
    e6f4:	f000 8172 	beq.w	e9dc <am_hal_uart_transfer+0x324>
    e6f8:	2c00      	cmp	r4, #0
    e6fa:	f000 8165 	beq.w	e9c8 <am_hal_uart_transfer+0x310>
    e6fe:	46a9      	mov	r9, r5
    e700:	462f      	mov	r7, r5
    e702:	9501      	str	r5, [sp, #4]
    e704:	4625      	mov	r5, r4
    e706:	4619      	mov	r1, r3
    e708:	682a      	ldr	r2, [r5, #0]
    e70a:	461c      	mov	r4, r3
    e70c:	4bad      	ldr	r3, [pc, #692]	; (e9c4 <am_hal_uart_transfer+0x30c>)
    e70e:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e712:	429a      	cmp	r2, r3
    e714:	465e      	mov	r6, fp
    e716:	d12d      	bne.n	e774 <am_hal_uart_transfer+0xbc>
    e718:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    e71c:	bb7a      	cbnz	r2, e77e <am_hal_uart_transfer+0xc6>
    e71e:	1e48      	subs	r0, r1, #1
    e720:	6a69      	ldr	r1, [r5, #36]	; 0x24
    e722:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    e726:	311c      	adds	r1, #28
    e728:	0309      	lsls	r1, r1, #12
    e72a:	698b      	ldr	r3, [r1, #24]
    e72c:	069b      	lsls	r3, r3, #26
    e72e:	d405      	bmi.n	e73c <am_hal_uart_transfer+0x84>
    e730:	3201      	adds	r2, #1
    e732:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    e736:	600b      	str	r3, [r1, #0]
    e738:	4296      	cmp	r6, r2
    e73a:	d8f6      	bhi.n	e72a <am_hal_uart_transfer+0x72>
    e73c:	4417      	add	r7, r2
    e73e:	1ab6      	subs	r6, r6, r2
    e740:	b936      	cbnz	r6, e750 <am_hal_uart_transfer+0x98>
    e742:	9d01      	ldr	r5, [sp, #4]
    e744:	9b02      	ldr	r3, [sp, #8]
    e746:	2b00      	cmp	r3, #0
    e748:	f000 808c 	beq.w	e864 <am_hal_uart_transfer+0x1ac>
    e74c:	601f      	str	r7, [r3, #0]
    e74e:	e7bf      	b.n	e6d0 <am_hal_uart_transfer+0x18>
    e750:	2010      	movs	r0, #16
    e752:	f7ff f9c9 	bl	dae8 <am_hal_flash_delay>
    e756:	f1b8 3fff 	cmp.w	r8, #4294967295
    e75a:	bf18      	it	ne
    e75c:	f109 0901 	addne.w	r9, r9, #1
    e760:	45c8      	cmp	r8, r9
    e762:	d9ee      	bls.n	e742 <am_hal_uart_transfer+0x8a>
    e764:	682a      	ldr	r2, [r5, #0]
    e766:	4b97      	ldr	r3, [pc, #604]	; (e9c4 <am_hal_uart_transfer+0x30c>)
    e768:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e76c:	429a      	cmp	r2, r3
    e76e:	eb04 0107 	add.w	r1, r4, r7
    e772:	d0d1      	beq.n	e718 <am_hal_uart_transfer+0x60>
    e774:	9b02      	ldr	r3, [sp, #8]
    e776:	b103      	cbz	r3, e77a <am_hal_uart_transfer+0xc2>
    e778:	601f      	str	r7, [r3, #0]
    e77a:	2502      	movs	r5, #2
    e77c:	e7a8      	b.n	e6d0 <am_hal_uart_transfer+0x18>
    e77e:	e9d5 020d 	ldrd	r0, r2, [r5, #52]	; 0x34
    e782:	1a12      	subs	r2, r2, r0
    e784:	42b2      	cmp	r2, r6
    e786:	4613      	mov	r3, r2
    e788:	f105 0b2c 	add.w	fp, r5, #44	; 0x2c
    e78c:	bf28      	it	cs
    e78e:	4633      	movcs	r3, r6
    e790:	461a      	mov	r2, r3
    e792:	4658      	mov	r0, fp
    e794:	9303      	str	r3, [sp, #12]
    e796:	f000 fa8d 	bl	ecb4 <am_hal_queue_item_add>
    e79a:	f8d5 a024 	ldr.w	sl, [r5, #36]	; 0x24
    e79e:	f7ff fb71 	bl	de84 <am_hal_interrupt_master_disable>
    e7a2:	f50a 2a80 	add.w	sl, sl, #262144	; 0x40000
    e7a6:	f10a 0a1c 	add.w	sl, sl, #28
    e7aa:	9008      	str	r0, [sp, #32]
    e7ac:	ea4f 3a0a 	mov.w	sl, sl, lsl #12
    e7b0:	e00d      	b.n	e7ce <am_hal_uart_transfer+0x116>
    e7b2:	f000 fabd 	bl	ed30 <am_hal_queue_item_get>
    e7b6:	b190      	cbz	r0, e7de <am_hal_uart_transfer+0x126>
    e7b8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    e7ba:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e7be:	321c      	adds	r2, #28
    e7c0:	0312      	lsls	r2, r2, #12
    e7c2:	6993      	ldr	r3, [r2, #24]
    e7c4:	0699      	lsls	r1, r3, #26
    e7c6:	bf5c      	itt	pl
    e7c8:	f89d 301c 	ldrbpl.w	r3, [sp, #28]
    e7cc:	6013      	strpl	r3, [r2, #0]
    e7ce:	f8da 3018 	ldr.w	r3, [sl, #24]
    e7d2:	069b      	lsls	r3, r3, #26
    e7d4:	f04f 0201 	mov.w	r2, #1
    e7d8:	a907      	add	r1, sp, #28
    e7da:	4658      	mov	r0, fp
    e7dc:	d5e9      	bpl.n	e7b2 <am_hal_uart_transfer+0xfa>
    e7de:	9b03      	ldr	r3, [sp, #12]
    e7e0:	9808      	ldr	r0, [sp, #32]
    e7e2:	441f      	add	r7, r3
    e7e4:	1af6      	subs	r6, r6, r3
    e7e6:	f7ff fb51 	bl	de8c <am_hal_interrupt_master_set>
    e7ea:	e7a9      	b.n	e740 <am_hal_uart_transfer+0x88>
    e7ec:	68cd      	ldr	r5, [r1, #12]
    e7ee:	690b      	ldr	r3, [r1, #16]
    e7f0:	9301      	str	r3, [sp, #4]
    e7f2:	e9d1 b701 	ldrd	fp, r7, [r1, #4]
    e7f6:	2d00      	cmp	r5, #0
    e7f8:	f000 80b5 	beq.w	e966 <am_hal_uart_transfer+0x2ae>
    e7fc:	2f00      	cmp	r7, #0
    e7fe:	f000 811e 	beq.w	ea3e <am_hal_uart_transfer+0x386>
    e802:	2800      	cmp	r0, #0
    e804:	f000 80e7 	beq.w	e9d6 <am_hal_uart_transfer+0x31e>
    e808:	6822      	ldr	r2, [r4, #0]
    e80a:	f8df a1b8 	ldr.w	sl, [pc, #440]	; e9c4 <am_hal_uart_transfer+0x30c>
    e80e:	f100 0348 	add.w	r3, r0, #72	; 0x48
    e812:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e816:	ee08 3a10 	vmov	s16, r3
    e81a:	f04f 0900 	mov.w	r9, #0
    e81e:	462b      	mov	r3, r5
    e820:	4552      	cmp	r2, sl
    e822:	46c8      	mov	r8, r9
    e824:	465d      	mov	r5, fp
    e826:	461e      	mov	r6, r3
    e828:	d133      	bne.n	e892 <am_hal_uart_transfer+0x1da>
    e82a:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    e82e:	2a00      	cmp	r2, #0
    e830:	d137      	bne.n	e8a2 <am_hal_uart_transfer+0x1ea>
    e832:	6a61      	ldr	r1, [r4, #36]	; 0x24
    e834:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    e838:	311c      	adds	r1, #28
    e83a:	1e68      	subs	r0, r5, #1
    e83c:	0309      	lsls	r1, r1, #12
    e83e:	698b      	ldr	r3, [r1, #24]
    e840:	06dd      	lsls	r5, r3, #27
    e842:	d408      	bmi.n	e856 <am_hal_uart_transfer+0x19e>
    e844:	680b      	ldr	r3, [r1, #0]
    e846:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    e84a:	d15e      	bne.n	e90a <am_hal_uart_transfer+0x252>
    e84c:	3201      	adds	r2, #1
    e84e:	4297      	cmp	r7, r2
    e850:	f800 3f01 	strb.w	r3, [r0, #1]!
    e854:	d8f3      	bhi.n	e83e <am_hal_uart_transfer+0x186>
    e856:	4490      	add	r8, r2
    e858:	1abf      	subs	r7, r7, r2
    e85a:	b957      	cbnz	r7, e872 <am_hal_uart_transfer+0x1ba>
    e85c:	9b01      	ldr	r3, [sp, #4]
    e85e:	b10b      	cbz	r3, e864 <am_hal_uart_transfer+0x1ac>
    e860:	f8c3 8000 	str.w	r8, [r3]
    e864:	2500      	movs	r5, #0
    e866:	4628      	mov	r0, r5
    e868:	b011      	add	sp, #68	; 0x44
    e86a:	ecbd 8b02 	vpop	{d8}
    e86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e872:	2010      	movs	r0, #16
    e874:	f7ff f938 	bl	dae8 <am_hal_flash_delay>
    e878:	1c73      	adds	r3, r6, #1
    e87a:	bf18      	it	ne
    e87c:	f109 0901 	addne.w	r9, r9, #1
    e880:	454e      	cmp	r6, r9
    e882:	d9eb      	bls.n	e85c <am_hal_uart_transfer+0x1a4>
    e884:	6822      	ldr	r2, [r4, #0]
    e886:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e88a:	4552      	cmp	r2, sl
    e88c:	eb0b 0508 	add.w	r5, fp, r8
    e890:	d0cb      	beq.n	e82a <am_hal_uart_transfer+0x172>
    e892:	2502      	movs	r5, #2
    e894:	9b01      	ldr	r3, [sp, #4]
    e896:	2b00      	cmp	r3, #0
    e898:	f43f af1a 	beq.w	e6d0 <am_hal_uart_transfer+0x18>
    e89c:	f8c3 8000 	str.w	r8, [r3]
    e8a0:	e716      	b.n	e6d0 <am_hal_uart_transfer+0x18>
    e8a2:	f7ff faef 	bl	de84 <am_hal_interrupt_master_disable>
    e8a6:	9007      	str	r0, [sp, #28]
    e8a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    e8aa:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    e8ae:	301c      	adds	r0, #28
    e8b0:	0300      	lsls	r0, r0, #12
    e8b2:	f10d 0c20 	add.w	ip, sp, #32
    e8b6:	2200      	movs	r2, #0
    e8b8:	6983      	ldr	r3, [r0, #24]
    e8ba:	06db      	lsls	r3, r3, #27
    e8bc:	d409      	bmi.n	e8d2 <am_hal_uart_transfer+0x21a>
    e8be:	6803      	ldr	r3, [r0, #0]
    e8c0:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    e8c4:	f102 0201 	add.w	r2, r2, #1
    e8c8:	d119      	bne.n	e8fe <am_hal_uart_transfer+0x246>
    e8ca:	2a20      	cmp	r2, #32
    e8cc:	f80c 3b01 	strb.w	r3, [ip], #1
    e8d0:	d1f2      	bne.n	e8b8 <am_hal_uart_transfer+0x200>
    e8d2:	ee18 0a10 	vmov	r0, s16
    e8d6:	a908      	add	r1, sp, #32
    e8d8:	f000 f9ec 	bl	ecb4 <am_hal_queue_item_add>
    e8dc:	2800      	cmp	r0, #0
    e8de:	d075      	beq.n	e9cc <am_hal_uart_transfer+0x314>
    e8e0:	9807      	ldr	r0, [sp, #28]
    e8e2:	f7ff fad3 	bl	de8c <am_hal_interrupt_master_set>
    e8e6:	6d22      	ldr	r2, [r4, #80]	; 0x50
    e8e8:	42ba      	cmp	r2, r7
    e8ea:	bf28      	it	cs
    e8ec:	463a      	movcs	r2, r7
    e8ee:	ee18 0a10 	vmov	r0, s16
    e8f2:	4629      	mov	r1, r5
    e8f4:	4490      	add	r8, r2
    e8f6:	1abf      	subs	r7, r7, r2
    e8f8:	f000 fa1a 	bl	ed30 <am_hal_queue_item_get>
    e8fc:	e7ad      	b.n	e85a <am_hal_uart_transfer+0x1a2>
    e8fe:	9807      	ldr	r0, [sp, #28]
    e900:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    e904:	f7ff fac2 	bl	de8c <am_hal_interrupt_master_set>
    e908:	e7c4      	b.n	e894 <am_hal_uart_transfer+0x1dc>
    e90a:	4490      	add	r8, r2
    e90c:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    e910:	e7c0      	b.n	e894 <am_hal_uart_transfer+0x1dc>
    e912:	2c00      	cmp	r4, #0
    e914:	f43f af31 	beq.w	e77a <am_hal_uart_transfer+0xc2>
    e918:	6822      	ldr	r2, [r4, #0]
    e91a:	492a      	ldr	r1, [pc, #168]	; (e9c4 <am_hal_uart_transfer+0x30c>)
    e91c:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e920:	428a      	cmp	r2, r1
    e922:	f47f af2a 	bne.w	e77a <am_hal_uart_transfer+0xc2>
    e926:	9b02      	ldr	r3, [sp, #8]
    e928:	b10b      	cbz	r3, e92e <am_hal_uart_transfer+0x276>
    e92a:	f8c3 8000 	str.w	r8, [r3]
    e92e:	f1bb 0f00 	cmp.w	fp, #0
    e932:	d097      	beq.n	e864 <am_hal_uart_transfer+0x1ac>
    e934:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
    e938:	2d00      	cmp	r5, #0
    e93a:	d151      	bne.n	e9e0 <am_hal_uart_transfer+0x328>
    e93c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    e93e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    e942:	311c      	adds	r1, #28
    e944:	1e42      	subs	r2, r0, #1
    e946:	0309      	lsls	r1, r1, #12
    e948:	698b      	ldr	r3, [r1, #24]
    e94a:	0698      	lsls	r0, r3, #26
    e94c:	d405      	bmi.n	e95a <am_hal_uart_transfer+0x2a2>
    e94e:	3501      	adds	r5, #1
    e950:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    e954:	600b      	str	r3, [r1, #0]
    e956:	45ab      	cmp	fp, r5
    e958:	d1f6      	bne.n	e948 <am_hal_uart_transfer+0x290>
    e95a:	9b02      	ldr	r3, [sp, #8]
    e95c:	2b00      	cmp	r3, #0
    e95e:	d081      	beq.n	e864 <am_hal_uart_transfer+0x1ac>
    e960:	601d      	str	r5, [r3, #0]
    e962:	2500      	movs	r5, #0
    e964:	e6b4      	b.n	e6d0 <am_hal_uart_transfer+0x18>
    e966:	2800      	cmp	r0, #0
    e968:	f43f af07 	beq.w	e77a <am_hal_uart_transfer+0xc2>
    e96c:	6802      	ldr	r2, [r0, #0]
    e96e:	4915      	ldr	r1, [pc, #84]	; (e9c4 <am_hal_uart_transfer+0x30c>)
    e970:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e974:	428a      	cmp	r2, r1
    e976:	f47f af00 	bne.w	e77a <am_hal_uart_transfer+0xc2>
    e97a:	b103      	cbz	r3, e97e <am_hal_uart_transfer+0x2c6>
    e97c:	601d      	str	r5, [r3, #0]
    e97e:	2f00      	cmp	r7, #0
    e980:	f43f af70 	beq.w	e864 <am_hal_uart_transfer+0x1ac>
    e984:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    e988:	2a00      	cmp	r2, #0
    e98a:	d15a      	bne.n	ea42 <am_hal_uart_transfer+0x38a>
    e98c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    e98e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    e992:	311c      	adds	r1, #28
    e994:	f10b 33ff 	add.w	r3, fp, #4294967295
    e998:	0309      	lsls	r1, r1, #12
    e99a:	4614      	mov	r4, r2
    e99c:	698a      	ldr	r2, [r1, #24]
    e99e:	06d2      	lsls	r2, r2, #27
    e9a0:	d409      	bmi.n	e9b6 <am_hal_uart_transfer+0x2fe>
    e9a2:	680a      	ldr	r2, [r1, #0]
    e9a4:	f412 6070 	ands.w	r0, r2, #3840	; 0xf00
    e9a8:	d176      	bne.n	ea98 <am_hal_uart_transfer+0x3e0>
    e9aa:	3401      	adds	r4, #1
    e9ac:	42a7      	cmp	r7, r4
    e9ae:	f803 2f01 	strb.w	r2, [r3, #1]!
    e9b2:	d1f3      	bne.n	e99c <am_hal_uart_transfer+0x2e4>
    e9b4:	4605      	mov	r5, r0
    e9b6:	9b01      	ldr	r3, [sp, #4]
    e9b8:	2b00      	cmp	r3, #0
    e9ba:	f43f ae89 	beq.w	e6d0 <am_hal_uart_transfer+0x18>
    e9be:	601c      	str	r4, [r3, #0]
    e9c0:	e686      	b.n	e6d0 <am_hal_uart_transfer+0x18>
    e9c2:	bf00      	nop
    e9c4:	01ea9e06 	.word	0x01ea9e06
    e9c8:	4627      	mov	r7, r4
    e9ca:	e6d3      	b.n	e774 <am_hal_uart_transfer+0xbc>
    e9cc:	9807      	ldr	r0, [sp, #28]
    e9ce:	4d39      	ldr	r5, [pc, #228]	; (eab4 <am_hal_uart_transfer+0x3fc>)
    e9d0:	f7ff fa5c 	bl	de8c <am_hal_interrupt_master_set>
    e9d4:	e75e      	b.n	e894 <am_hal_uart_transfer+0x1dc>
    e9d6:	2502      	movs	r5, #2
    e9d8:	4680      	mov	r8, r0
    e9da:	e75b      	b.n	e894 <am_hal_uart_transfer+0x1dc>
    e9dc:	462f      	mov	r7, r5
    e9de:	e6b1      	b.n	e744 <am_hal_uart_transfer+0x8c>
    e9e0:	6b65      	ldr	r5, [r4, #52]	; 0x34
    e9e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e9e4:	1b52      	subs	r2, r2, r5
    e9e6:	455a      	cmp	r2, fp
    e9e8:	f104 072c 	add.w	r7, r4, #44	; 0x2c
    e9ec:	4601      	mov	r1, r0
    e9ee:	bf28      	it	cs
    e9f0:	465a      	movcs	r2, fp
    e9f2:	4638      	mov	r0, r7
    e9f4:	4615      	mov	r5, r2
    e9f6:	f000 f95d 	bl	ecb4 <am_hal_queue_item_add>
    e9fa:	6a66      	ldr	r6, [r4, #36]	; 0x24
    e9fc:	f7ff fa42 	bl	de84 <am_hal_interrupt_master_disable>
    ea00:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
    ea04:	361c      	adds	r6, #28
    ea06:	9005      	str	r0, [sp, #20]
    ea08:	0336      	lsls	r6, r6, #12
    ea0a:	e00f      	b.n	ea2c <am_hal_uart_transfer+0x374>
    ea0c:	a908      	add	r1, sp, #32
    ea0e:	4638      	mov	r0, r7
    ea10:	f000 f98e 	bl	ed30 <am_hal_queue_item_get>
    ea14:	b178      	cbz	r0, ea36 <am_hal_uart_transfer+0x37e>
    ea16:	6a62      	ldr	r2, [r4, #36]	; 0x24
    ea18:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    ea1c:	321c      	adds	r2, #28
    ea1e:	0312      	lsls	r2, r2, #12
    ea20:	6993      	ldr	r3, [r2, #24]
    ea22:	0699      	lsls	r1, r3, #26
    ea24:	bf5c      	itt	pl
    ea26:	f89d 3020 	ldrbpl.w	r3, [sp, #32]
    ea2a:	6013      	strpl	r3, [r2, #0]
    ea2c:	69b3      	ldr	r3, [r6, #24]
    ea2e:	069b      	lsls	r3, r3, #26
    ea30:	f04f 0201 	mov.w	r2, #1
    ea34:	d5ea      	bpl.n	ea0c <am_hal_uart_transfer+0x354>
    ea36:	9805      	ldr	r0, [sp, #20]
    ea38:	f7ff fa28 	bl	de8c <am_hal_interrupt_master_set>
    ea3c:	e78d      	b.n	e95a <am_hal_uart_transfer+0x2a2>
    ea3e:	46b8      	mov	r8, r7
    ea40:	e70c      	b.n	e85c <am_hal_uart_transfer+0x1a4>
    ea42:	f7ff fa1f 	bl	de84 <am_hal_interrupt_master_disable>
    ea46:	6a61      	ldr	r1, [r4, #36]	; 0x24
    ea48:	9006      	str	r0, [sp, #24]
    ea4a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    ea4e:	311c      	adds	r1, #28
    ea50:	0309      	lsls	r1, r1, #12
    ea52:	ae08      	add	r6, sp, #32
    ea54:	2200      	movs	r2, #0
    ea56:	698b      	ldr	r3, [r1, #24]
    ea58:	06d8      	lsls	r0, r3, #27
    ea5a:	d409      	bmi.n	ea70 <am_hal_uart_transfer+0x3b8>
    ea5c:	680b      	ldr	r3, [r1, #0]
    ea5e:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    ea62:	f102 0201 	add.w	r2, r2, #1
    ea66:	d11a      	bne.n	ea9e <am_hal_uart_transfer+0x3e6>
    ea68:	2a20      	cmp	r2, #32
    ea6a:	f806 3b01 	strb.w	r3, [r6], #1
    ea6e:	d1f2      	bne.n	ea56 <am_hal_uart_transfer+0x39e>
    ea70:	f104 0648 	add.w	r6, r4, #72	; 0x48
    ea74:	a908      	add	r1, sp, #32
    ea76:	4630      	mov	r0, r6
    ea78:	f000 f91c 	bl	ecb4 <am_hal_queue_item_add>
    ea7c:	b1a8      	cbz	r0, eaaa <am_hal_uart_transfer+0x3f2>
    ea7e:	9806      	ldr	r0, [sp, #24]
    ea80:	f7ff fa04 	bl	de8c <am_hal_interrupt_master_set>
    ea84:	6d24      	ldr	r4, [r4, #80]	; 0x50
    ea86:	42bc      	cmp	r4, r7
    ea88:	bf28      	it	cs
    ea8a:	463c      	movcs	r4, r7
    ea8c:	4659      	mov	r1, fp
    ea8e:	4630      	mov	r0, r6
    ea90:	4622      	mov	r2, r4
    ea92:	f000 f94d 	bl	ed30 <am_hal_queue_item_get>
    ea96:	e78e      	b.n	e9b6 <am_hal_uart_transfer+0x2fe>
    ea98:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    ea9c:	e78b      	b.n	e9b6 <am_hal_uart_transfer+0x2fe>
    ea9e:	9806      	ldr	r0, [sp, #24]
    eaa0:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    eaa4:	f7ff f9f2 	bl	de8c <am_hal_interrupt_master_set>
    eaa8:	e612      	b.n	e6d0 <am_hal_uart_transfer+0x18>
    eaaa:	9806      	ldr	r0, [sp, #24]
    eaac:	4d01      	ldr	r5, [pc, #4]	; (eab4 <am_hal_uart_transfer+0x3fc>)
    eaae:	f7ff f9ed 	bl	de8c <am_hal_interrupt_master_set>
    eab2:	e60d      	b.n	e6d0 <am_hal_uart_transfer+0x18>
    eab4:	08000001 	.word	0x08000001

0000eab8 <am_hal_uart_tx_flush>:
    eab8:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    eabc:	b570      	push	{r4, r5, r6, lr}
    eabe:	6a45      	ldr	r5, [r0, #36]	; 0x24
    eac0:	4604      	mov	r4, r0
    eac2:	b15b      	cbz	r3, eadc <am_hal_uart_tx_flush+0x24>
    eac4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    eac6:	b14b      	cbz	r3, eadc <am_hal_uart_tx_flush+0x24>
    eac8:	4e0e      	ldr	r6, [pc, #56]	; (eb04 <am_hal_uart_tx_flush+0x4c>)
    eaca:	6e20      	ldr	r0, [r4, #96]	; 0x60
    eacc:	fbb6 f0f0 	udiv	r0, r6, r0
    ead0:	0100      	lsls	r0, r0, #4
    ead2:	f7ff f809 	bl	dae8 <am_hal_flash_delay>
    ead6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    ead8:	2b00      	cmp	r3, #0
    eada:	d1f6      	bne.n	eaca <am_hal_uart_tx_flush+0x12>
    eadc:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    eae0:	351c      	adds	r5, #28
    eae2:	032d      	lsls	r5, r5, #12
    eae4:	69ab      	ldr	r3, [r5, #24]
    eae6:	071a      	lsls	r2, r3, #28
    eae8:	d509      	bpl.n	eafe <am_hal_uart_tx_flush+0x46>
    eaea:	4e06      	ldr	r6, [pc, #24]	; (eb04 <am_hal_uart_tx_flush+0x4c>)
    eaec:	6e23      	ldr	r3, [r4, #96]	; 0x60
    eaee:	fbb6 f3f3 	udiv	r3, r6, r3
    eaf2:	0118      	lsls	r0, r3, #4
    eaf4:	f7fe fff8 	bl	dae8 <am_hal_flash_delay>
    eaf8:	69ab      	ldr	r3, [r5, #24]
    eafa:	071b      	lsls	r3, r3, #28
    eafc:	d4f6      	bmi.n	eaec <am_hal_uart_tx_flush+0x34>
    eafe:	2000      	movs	r0, #0
    eb00:	bd70      	pop	{r4, r5, r6, pc}
    eb02:	bf00      	nop
    eb04:	00b71b00 	.word	0x00b71b00

0000eb08 <am_hal_uart_interrupt_service>:
    eb08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eb0c:	4680      	mov	r8, r0
    eb0e:	484a      	ldr	r0, [pc, #296]	; (ec38 <am_hal_uart_interrupt_service+0x130>)
    eb10:	f8d8 3000 	ldr.w	r3, [r8]
    eb14:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    eb18:	4283      	cmp	r3, r0
    eb1a:	b08a      	sub	sp, #40	; 0x28
    eb1c:	d126      	bne.n	eb6c <am_hal_uart_interrupt_service+0x64>
    eb1e:	f011 0f50 	tst.w	r1, #80	; 0x50
    eb22:	f8d8 5024 	ldr.w	r5, [r8, #36]	; 0x24
    eb26:	460e      	mov	r6, r1
    eb28:	4614      	mov	r4, r2
    eb2a:	d002      	beq.n	eb32 <am_hal_uart_interrupt_service+0x2a>
    eb2c:	f898 3044 	ldrb.w	r3, [r8, #68]	; 0x44
    eb30:	bb6b      	cbnz	r3, eb8e <am_hal_uart_interrupt_service+0x86>
    eb32:	06b6      	lsls	r6, r6, #26
    eb34:	d40a      	bmi.n	eb4c <am_hal_uart_interrupt_service+0x44>
    eb36:	b12c      	cbz	r4, eb44 <am_hal_uart_interrupt_service+0x3c>
    eb38:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
    eb3c:	b163      	cbz	r3, eb58 <am_hal_uart_interrupt_service+0x50>
    eb3e:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
    eb42:	b1bb      	cbz	r3, eb74 <am_hal_uart_interrupt_service+0x6c>
    eb44:	2000      	movs	r0, #0
    eb46:	b00a      	add	sp, #40	; 0x28
    eb48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eb4c:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
    eb50:	2b00      	cmp	r3, #0
    eb52:	d13e      	bne.n	ebd2 <am_hal_uart_interrupt_service+0xca>
    eb54:	2c00      	cmp	r4, #0
    eb56:	d0f5      	beq.n	eb44 <am_hal_uart_interrupt_service+0x3c>
    eb58:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    eb5c:	351c      	adds	r5, #28
    eb5e:	032d      	lsls	r5, r5, #12
    eb60:	69ab      	ldr	r3, [r5, #24]
    eb62:	071b      	lsls	r3, r3, #28
    eb64:	d40e      	bmi.n	eb84 <am_hal_uart_interrupt_service+0x7c>
    eb66:	2301      	movs	r3, #1
    eb68:	6023      	str	r3, [r4, #0]
    eb6a:	e7eb      	b.n	eb44 <am_hal_uart_interrupt_service+0x3c>
    eb6c:	2002      	movs	r0, #2
    eb6e:	b00a      	add	sp, #40	; 0x28
    eb70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eb74:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    eb78:	351c      	adds	r5, #28
    eb7a:	032d      	lsls	r5, r5, #12
    eb7c:	69ab      	ldr	r3, [r5, #24]
    eb7e:	071a      	lsls	r2, r3, #28
    eb80:	d4e0      	bmi.n	eb44 <am_hal_uart_interrupt_service+0x3c>
    eb82:	e7f0      	b.n	eb66 <am_hal_uart_interrupt_service+0x5e>
    eb84:	2000      	movs	r0, #0
    eb86:	6020      	str	r0, [r4, #0]
    eb88:	b00a      	add	sp, #40	; 0x28
    eb8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eb8e:	f7ff f979 	bl	de84 <am_hal_interrupt_master_disable>
    eb92:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
    eb96:	9001      	str	r0, [sp, #4]
    eb98:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    eb9c:	311c      	adds	r1, #28
    eb9e:	0309      	lsls	r1, r1, #12
    eba0:	a802      	add	r0, sp, #8
    eba2:	2200      	movs	r2, #0
    eba4:	698b      	ldr	r3, [r1, #24]
    eba6:	06df      	lsls	r7, r3, #27
    eba8:	d409      	bmi.n	ebbe <am_hal_uart_interrupt_service+0xb6>
    ebaa:	680b      	ldr	r3, [r1, #0]
    ebac:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    ebb0:	f102 0201 	add.w	r2, r2, #1
    ebb4:	d134      	bne.n	ec20 <am_hal_uart_interrupt_service+0x118>
    ebb6:	2a20      	cmp	r2, #32
    ebb8:	f800 3b01 	strb.w	r3, [r0], #1
    ebbc:	d1f2      	bne.n	eba4 <am_hal_uart_interrupt_service+0x9c>
    ebbe:	a902      	add	r1, sp, #8
    ebc0:	f108 0048 	add.w	r0, r8, #72	; 0x48
    ebc4:	f000 f876 	bl	ecb4 <am_hal_queue_item_add>
    ebc8:	b380      	cbz	r0, ec2c <am_hal_uart_interrupt_service+0x124>
    ebca:	9801      	ldr	r0, [sp, #4]
    ebcc:	f7ff f95e 	bl	de8c <am_hal_interrupt_master_set>
    ebd0:	e7af      	b.n	eb32 <am_hal_uart_interrupt_service+0x2a>
    ebd2:	f8d8 6024 	ldr.w	r6, [r8, #36]	; 0x24
    ebd6:	f7ff f955 	bl	de84 <am_hal_interrupt_master_disable>
    ebda:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
    ebde:	361c      	adds	r6, #28
    ebe0:	9002      	str	r0, [sp, #8]
    ebe2:	0336      	lsls	r6, r6, #12
    ebe4:	f108 072c 	add.w	r7, r8, #44	; 0x2c
    ebe8:	e011      	b.n	ec0e <am_hal_uart_interrupt_service+0x106>
    ebea:	f10d 0103 	add.w	r1, sp, #3
    ebee:	4638      	mov	r0, r7
    ebf0:	f000 f89e 	bl	ed30 <am_hal_queue_item_get>
    ebf4:	b180      	cbz	r0, ec18 <am_hal_uart_interrupt_service+0x110>
    ebf6:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
    ebfa:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    ebfe:	311c      	adds	r1, #28
    ec00:	0309      	lsls	r1, r1, #12
    ec02:	698b      	ldr	r3, [r1, #24]
    ec04:	0698      	lsls	r0, r3, #26
    ec06:	bf5c      	itt	pl
    ec08:	f89d 3003 	ldrbpl.w	r3, [sp, #3]
    ec0c:	600b      	strpl	r3, [r1, #0]
    ec0e:	69b3      	ldr	r3, [r6, #24]
    ec10:	0699      	lsls	r1, r3, #26
    ec12:	f04f 0201 	mov.w	r2, #1
    ec16:	d5e8      	bpl.n	ebea <am_hal_uart_interrupt_service+0xe2>
    ec18:	9802      	ldr	r0, [sp, #8]
    ec1a:	f7ff f937 	bl	de8c <am_hal_interrupt_master_set>
    ec1e:	e78a      	b.n	eb36 <am_hal_uart_interrupt_service+0x2e>
    ec20:	9801      	ldr	r0, [sp, #4]
    ec22:	f7ff f933 	bl	de8c <am_hal_interrupt_master_set>
    ec26:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    ec2a:	e78c      	b.n	eb46 <am_hal_uart_interrupt_service+0x3e>
    ec2c:	9801      	ldr	r0, [sp, #4]
    ec2e:	f7ff f92d 	bl	de8c <am_hal_interrupt_master_set>
    ec32:	4802      	ldr	r0, [pc, #8]	; (ec3c <am_hal_uart_interrupt_service+0x134>)
    ec34:	e787      	b.n	eb46 <am_hal_uart_interrupt_service+0x3e>
    ec36:	bf00      	nop
    ec38:	01ea9e06 	.word	0x01ea9e06
    ec3c:	08000001 	.word	0x08000001

0000ec40 <am_hal_uart_interrupt_clear>:
    ec40:	6803      	ldr	r3, [r0, #0]
    ec42:	4a07      	ldr	r2, [pc, #28]	; (ec60 <am_hal_uart_interrupt_clear+0x20>)
    ec44:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ec48:	4293      	cmp	r3, r2
    ec4a:	d107      	bne.n	ec5c <am_hal_uart_interrupt_clear+0x1c>
    ec4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    ec4e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    ec52:	331c      	adds	r3, #28
    ec54:	031b      	lsls	r3, r3, #12
    ec56:	2000      	movs	r0, #0
    ec58:	6459      	str	r1, [r3, #68]	; 0x44
    ec5a:	4770      	bx	lr
    ec5c:	2002      	movs	r0, #2
    ec5e:	4770      	bx	lr
    ec60:	01ea9e06 	.word	0x01ea9e06

0000ec64 <am_hal_uart_interrupt_status_get>:
    ec64:	6803      	ldr	r3, [r0, #0]
    ec66:	b410      	push	{r4}
    ec68:	4c0b      	ldr	r4, [pc, #44]	; (ec98 <am_hal_uart_interrupt_status_get+0x34>)
    ec6a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ec6e:	42a3      	cmp	r3, r4
    ec70:	d10d      	bne.n	ec8e <am_hal_uart_interrupt_status_get+0x2a>
    ec72:	6a43      	ldr	r3, [r0, #36]	; 0x24
    ec74:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    ec78:	331c      	adds	r3, #28
    ec7a:	031b      	lsls	r3, r3, #12
    ec7c:	b92a      	cbnz	r2, ec8a <am_hal_uart_interrupt_status_get+0x26>
    ec7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    ec80:	f85d 4b04 	ldr.w	r4, [sp], #4
    ec84:	600b      	str	r3, [r1, #0]
    ec86:	2000      	movs	r0, #0
    ec88:	4770      	bx	lr
    ec8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    ec8c:	e7f8      	b.n	ec80 <am_hal_uart_interrupt_status_get+0x1c>
    ec8e:	2002      	movs	r0, #2
    ec90:	f85d 4b04 	ldr.w	r4, [sp], #4
    ec94:	4770      	bx	lr
    ec96:	bf00      	nop
    ec98:	01ea9e06 	.word	0x01ea9e06

0000ec9c <am_hal_queue_init>:
    ec9c:	b410      	push	{r4}
    ec9e:	2400      	movs	r4, #0
    eca0:	e9c0 4400 	strd	r4, r4, [r0]
    eca4:	e9c0 4302 	strd	r4, r3, [r0, #8]
    eca8:	e9c0 2104 	strd	r2, r1, [r0, #16]
    ecac:	f85d 4b04 	ldr.w	r4, [sp], #4
    ecb0:	4770      	bx	lr
    ecb2:	bf00      	nop

0000ecb4 <am_hal_queue_item_add>:
    ecb4:	b570      	push	{r4, r5, r6, lr}
    ecb6:	6905      	ldr	r5, [r0, #16]
    ecb8:	b082      	sub	sp, #8
    ecba:	4604      	mov	r4, r0
    ecbc:	fb02 f505 	mul.w	r5, r2, r5
    ecc0:	460e      	mov	r6, r1
    ecc2:	f7ff f8df 	bl	de84 <am_hal_interrupt_master_disable>
    ecc6:	68e2      	ldr	r2, [r4, #12]
    ecc8:	9001      	str	r0, [sp, #4]
    ecca:	68a0      	ldr	r0, [r4, #8]
    eccc:	1a13      	subs	r3, r2, r0
    ecce:	42ab      	cmp	r3, r5
    ecd0:	d31c      	bcc.n	ed0c <am_hal_queue_item_add+0x58>
    ecd2:	b195      	cbz	r5, ecfa <am_hal_queue_item_add+0x46>
    ecd4:	6823      	ldr	r3, [r4, #0]
    ecd6:	b306      	cbz	r6, ed1a <am_hal_queue_item_add+0x66>
    ecd8:	1e71      	subs	r1, r6, #1
    ecda:	194e      	adds	r6, r1, r5
    ecdc:	6962      	ldr	r2, [r4, #20]
    ecde:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    ece2:	54d0      	strb	r0, [r2, r3]
    ece4:	6823      	ldr	r3, [r4, #0]
    ece6:	68e0      	ldr	r0, [r4, #12]
    ece8:	3301      	adds	r3, #1
    ecea:	428e      	cmp	r6, r1
    ecec:	fbb3 f2f0 	udiv	r2, r3, r0
    ecf0:	fb00 3312 	mls	r3, r0, r2, r3
    ecf4:	6023      	str	r3, [r4, #0]
    ecf6:	d1f1      	bne.n	ecdc <am_hal_queue_item_add+0x28>
    ecf8:	68a0      	ldr	r0, [r4, #8]
    ecfa:	4405      	add	r5, r0
    ecfc:	60a5      	str	r5, [r4, #8]
    ecfe:	9801      	ldr	r0, [sp, #4]
    ed00:	f7ff f8c4 	bl	de8c <am_hal_interrupt_master_set>
    ed04:	2401      	movs	r4, #1
    ed06:	4620      	mov	r0, r4
    ed08:	b002      	add	sp, #8
    ed0a:	bd70      	pop	{r4, r5, r6, pc}
    ed0c:	9801      	ldr	r0, [sp, #4]
    ed0e:	f7ff f8bd 	bl	de8c <am_hal_interrupt_master_set>
    ed12:	2400      	movs	r4, #0
    ed14:	4620      	mov	r0, r4
    ed16:	b002      	add	sp, #8
    ed18:	bd70      	pop	{r4, r5, r6, pc}
    ed1a:	4631      	mov	r1, r6
    ed1c:	3101      	adds	r1, #1
    ed1e:	3301      	adds	r3, #1
    ed20:	428d      	cmp	r5, r1
    ed22:	fbb3 f6f2 	udiv	r6, r3, r2
    ed26:	fb02 3316 	mls	r3, r2, r6, r3
    ed2a:	d1f7      	bne.n	ed1c <am_hal_queue_item_add+0x68>
    ed2c:	6023      	str	r3, [r4, #0]
    ed2e:	e7e4      	b.n	ecfa <am_hal_queue_item_add+0x46>

0000ed30 <am_hal_queue_item_get>:
    ed30:	b570      	push	{r4, r5, r6, lr}
    ed32:	6905      	ldr	r5, [r0, #16]
    ed34:	4604      	mov	r4, r0
    ed36:	b082      	sub	sp, #8
    ed38:	fb02 f505 	mul.w	r5, r2, r5
    ed3c:	460e      	mov	r6, r1
    ed3e:	f7ff f8a1 	bl	de84 <am_hal_interrupt_master_disable>
    ed42:	68a2      	ldr	r2, [r4, #8]
    ed44:	9001      	str	r0, [sp, #4]
    ed46:	42aa      	cmp	r2, r5
    ed48:	d31c      	bcc.n	ed84 <am_hal_queue_item_get+0x54>
    ed4a:	b195      	cbz	r5, ed72 <am_hal_queue_item_get+0x42>
    ed4c:	6863      	ldr	r3, [r4, #4]
    ed4e:	b306      	cbz	r6, ed92 <am_hal_queue_item_get+0x62>
    ed50:	1e71      	subs	r1, r6, #1
    ed52:	194e      	adds	r6, r1, r5
    ed54:	6962      	ldr	r2, [r4, #20]
    ed56:	5cd3      	ldrb	r3, [r2, r3]
    ed58:	f801 3f01 	strb.w	r3, [r1, #1]!
    ed5c:	6863      	ldr	r3, [r4, #4]
    ed5e:	68e0      	ldr	r0, [r4, #12]
    ed60:	3301      	adds	r3, #1
    ed62:	428e      	cmp	r6, r1
    ed64:	fbb3 f2f0 	udiv	r2, r3, r0
    ed68:	fb00 3312 	mls	r3, r0, r2, r3
    ed6c:	6063      	str	r3, [r4, #4]
    ed6e:	d1f1      	bne.n	ed54 <am_hal_queue_item_get+0x24>
    ed70:	68a2      	ldr	r2, [r4, #8]
    ed72:	9801      	ldr	r0, [sp, #4]
    ed74:	1b52      	subs	r2, r2, r5
    ed76:	60a2      	str	r2, [r4, #8]
    ed78:	f7ff f888 	bl	de8c <am_hal_interrupt_master_set>
    ed7c:	2401      	movs	r4, #1
    ed7e:	4620      	mov	r0, r4
    ed80:	b002      	add	sp, #8
    ed82:	bd70      	pop	{r4, r5, r6, pc}
    ed84:	9801      	ldr	r0, [sp, #4]
    ed86:	f7ff f881 	bl	de8c <am_hal_interrupt_master_set>
    ed8a:	2400      	movs	r4, #0
    ed8c:	4620      	mov	r0, r4
    ed8e:	b002      	add	sp, #8
    ed90:	bd70      	pop	{r4, r5, r6, pc}
    ed92:	68e0      	ldr	r0, [r4, #12]
    ed94:	4631      	mov	r1, r6
    ed96:	3101      	adds	r1, #1
    ed98:	3301      	adds	r3, #1
    ed9a:	42a9      	cmp	r1, r5
    ed9c:	fbb3 f6f0 	udiv	r6, r3, r0
    eda0:	fb00 3316 	mls	r3, r0, r6, r3
    eda4:	d1f7      	bne.n	ed96 <am_hal_queue_item_get+0x66>
    eda6:	6063      	str	r3, [r4, #4]
    eda8:	e7e3      	b.n	ed72 <am_hal_queue_item_get+0x42>
    edaa:	bf00      	nop
    edac:	6c6c6548 	.word	0x6c6c6548
    edb0:	6f57206f 	.word	0x6f57206f
    edb4:	21646c72 	.word	0x21646c72
    edb8:	00000a0a 	.word	0x00000a0a
    edbc:	646e6556 	.word	0x646e6556
    edc0:	4e20726f 	.word	0x4e20726f
    edc4:	3a656d61 	.word	0x3a656d61
    edc8:	0a732520 	.word	0x0a732520
    edcc:	00000000 	.word	0x00000000
    edd0:	69766544 	.word	0x69766544
    edd4:	74206563 	.word	0x74206563
    edd8:	3a657079 	.word	0x3a657079
    eddc:	0a732520 	.word	0x0a732520
    ede0:	00000000 	.word	0x00000000
    ede4:	00736559 	.word	0x00736559
    ede8:	00006f4e 	.word	0x00006f4e
    edec:	6c617551 	.word	0x6c617551
    edf0:	65696669 	.word	0x65696669
    edf4:	25203a64 	.word	0x25203a64
    edf8:	00000a73 	.word	0x00000a73
    edfc:	69766544 	.word	0x69766544
    ee00:	49206563 	.word	0x49206563
    ee04:	3a6f666e 	.word	0x3a6f666e
    ee08:	6150090a 	.word	0x6150090a
    ee0c:	6e207472 	.word	0x6e207472
    ee10:	65626d75 	.word	0x65626d75
    ee14:	30203a72 	.word	0x30203a72
    ee18:	38302578 	.word	0x38302578
    ee1c:	43090a58 	.word	0x43090a58
    ee20:	20706968 	.word	0x20706968
    ee24:	3a304449 	.word	0x3a304449
    ee28:	20202020 	.word	0x20202020
    ee2c:	30257830 	.word	0x30257830
    ee30:	090a5838 	.word	0x090a5838
    ee34:	70696843 	.word	0x70696843
    ee38:	31444920 	.word	0x31444920
    ee3c:	2020203a 	.word	0x2020203a
    ee40:	25783020 	.word	0x25783020
    ee44:	0a583830 	.word	0x0a583830
    ee48:	76655209 	.word	0x76655209
    ee4c:	6f697369 	.word	0x6f697369
    ee50:	20203a6e 	.word	0x20203a6e
    ee54:	78302020 	.word	0x78302020
    ee58:	58383025 	.word	0x58383025
    ee5c:	65522820 	.word	0x65522820
    ee60:	25632576 	.word	0x25632576
    ee64:	000a2963 	.word	0x000a2963
    ee68:	616c4609 	.word	0x616c4609
    ee6c:	73206873 	.word	0x73206873
    ee70:	3a657a69 	.word	0x3a657a69
    ee74:	37252020 	.word	0x37252020
    ee78:	25282064 	.word	0x25282064
    ee7c:	424b2064 	.word	0x424b2064
    ee80:	0a297325 	.word	0x0a297325
    ee84:	00000000 	.word	0x00000000
    ee88:	41525309 	.word	0x41525309
    ee8c:	6973204d 	.word	0x6973204d
    ee90:	203a657a 	.word	0x203a657a
    ee94:	37252020 	.word	0x37252020
    ee98:	25282064 	.word	0x25282064
    ee9c:	424b2064 	.word	0x424b2064
    eea0:	0a297325 	.word	0x0a297325
    eea4:	0000000a 	.word	0x0000000a
    eea8:	20434347 	.word	0x20434347
    eeac:	332e3031 	.word	0x332e3031
    eeb0:	3220312e 	.word	0x3220312e
    eeb4:	30313230 	.word	0x30313230
    eeb8:	20343238 	.word	0x20343238
    eebc:	6c657228 	.word	0x6c657228
    eec0:	65736165 	.word	0x65736165
    eec4:	00000029 	.word	0x00000029
    eec8:	20707041 	.word	0x20707041
    eecc:	706d6f43 	.word	0x706d6f43
    eed0:	72656c69 	.word	0x72656c69
    eed4:	2020203a 	.word	0x2020203a
    eed8:	0a732520 	.word	0x0a732520
    eedc:	00000000 	.word	0x00000000
    eee0:	204c4148 	.word	0x204c4148
    eee4:	706d6f43 	.word	0x706d6f43
    eee8:	72656c69 	.word	0x72656c69
    eeec:	2020203a 	.word	0x2020203a
    eef0:	0a732520 	.word	0x0a732520
    eef4:	00000000 	.word	0x00000000
    eef8:	204c4148 	.word	0x204c4148
    eefc:	204b4453 	.word	0x204b4453
    ef00:	73726576 	.word	0x73726576
    ef04:	3a6e6f69 	.word	0x3a6e6f69
    ef08:	2e642520 	.word	0x2e642520
    ef0c:	252e6425 	.word	0x252e6425
    ef10:	00000a64 	.word	0x00000a64
    ef14:	525f4d41 	.word	0x525f4d41
    ef18:	00004745 	.word	0x00004745
    ef1c:	49534d43 	.word	0x49534d43
    ef20:	00000053 	.word	0x00000053
    ef24:	204c4148 	.word	0x204c4148
    ef28:	706d6f63 	.word	0x706d6f63
    ef2c:	64656c69 	.word	0x64656c69
    ef30:	74697720 	.word	0x74697720
    ef34:	73252068 	.word	0x73252068
    ef38:	7974732d 	.word	0x7974732d
    ef3c:	7220656c 	.word	0x7220656c
    ef40:	73696765 	.word	0x73696765
    ef44:	73726574 	.word	0x73726574
    ef48:	0000000a 	.word	0x0000000a
    ef4c:	4f464e49 	.word	0x4f464e49
    ef50:	61762030 	.word	0x61762030
    ef54:	2c64696c 	.word	0x2c64696c
    ef58:	72657620 	.word	0x72657620
    ef5c:	25783020 	.word	0x25783020
    ef60:	00000058 	.word	0x00000058
    ef64:	4f464e49 	.word	0x4f464e49
    ef68:	6e692030 	.word	0x6e692030
    ef6c:	696c6176 	.word	0x696c6176
    ef70:	00000064 	.word	0x00000064
    ef74:	204c4253 	.word	0x204c4253
    ef78:	3a726576 	.word	0x3a726576
    ef7c:	25783020 	.word	0x25783020
    ef80:	202d2078 	.word	0x202d2078
    ef84:	78257830 	.word	0x78257830
    ef88:	7325202c 	.word	0x7325202c
    ef8c:	0000000a 	.word	0x0000000a
    ef90:	685f6d61 	.word	0x685f6d61
    ef94:	735f6c61 	.word	0x735f6c61
    ef98:	72756365 	.word	0x72756365
    ef9c:	5f797469 	.word	0x5f797469
    efa0:	5f746567 	.word	0x5f746567
    efa4:	6f666e69 	.word	0x6f666e69
    efa8:	69616620 	.word	0x69616620
    efac:	2064656c 	.word	0x2064656c
    efb0:	58257830 	.word	0x58257830
    efb4:	0000000a 	.word	0x0000000a
    efb8:	0a0a0a0a 	.word	0x0a0a0a0a
    efbc:	0a0a0a0a 	.word	0x0a0a0a0a
    efc0:	0a0a0a0a 	.word	0x0a0a0a0a
    efc4:	0a0a0a0a 	.word	0x0a0a0a0a
    efc8:	00000a0a 	.word	0x00000a0a

0000efcc <g_sUartConfig>:
    efcc:	0001c200 00000060 00000000 00000000     ....`...........
    efdc:	00000000 00000012 10001040 00000100     ........@.......
    efec:	10001140 00000002                       @.......

0000eff4 <g_DeviceNameApollo>:
    eff4:	6c6f7041 00006f6c                       Apollo..

0000effc <g_DeviceNameApollo2>:
    effc:	6c6f7041 00326f6c                       Apollo2.

0000f004 <g_DeviceNameApollo3>:
    f004:	6c6f7041 20336f6c 65756c42 00000000     Apollo3 Blue....

0000f014 <g_DeviceNameApollo3p>:
    f014:	6c6f7041 20336f6c 65756c42 756c5020     Apollo3 Blue Plu
    f024:	00000073                                s...

0000f028 <g_DeviceNameApollo4>:
    f028:	6c6f7041 00346f6c                       Apollo4.

0000f030 <g_ui8VendorNameAmbq>:
    f030:	51424d41 00000000                       AMBQ....

0000f038 <g_ui8VendorNameUnknown>:
    f038:	3f3f3f3f 00000000                       ????....

0000f040 <g_ui8DeviceNameUnknown>:
    f040:	6e6b6e55 206e776f 69766564 00006563     Unknown device..

0000f050 <g_AM_BSP_GPIO_COM_UART_RX>:
    f050:	00000000                                ....

0000f054 <g_AM_BSP_GPIO_COM_UART_TX>:
    f054:	00000000                                ....

0000f058 <am_hal_cachectrl_defaults>:
    f058:	00000308                                ....

0000f05c <g_ui32HALversion>:
    f05c:	02050000                                ....

0000f060 <g_ui8HALcompiler>:
    f060:	20434347 332e3031 3220312e 30313230     GCC 10.3.1 20210
    f070:	20343238 6c657228 65736165 00000029     824 (release)...

0000f080 <g_AM_HAL_GPIO_DISABLE>:
    f080:	00000003                                ....

0000f084 <g_AM_HAL_GPIO_OUTPUT>:
    f084:	00000403                                ....

0000f088 <g_ui8Bit76Capabilities>:
    f088:	02800101 80010180 80800101 80808080     ................
    f098:	80808080 80808008 01800180 80808080     ................
    f0a8:	80808080 01800402 01010401 80808080     ................
    f0b8:	00000101                                ....

0000f0bc <g_ui8Inpen>:
    f0bc:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
    f0cc:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
    f0dc:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
    f0ec:	00003130                                01..

0000f0f0 <g_ui8NCEtable>:
    f0f0:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    f100:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    f110:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    f120:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    f130:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    f140:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    f150:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    f160:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    f170:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    f180:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    f190:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    f1a0:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    f1b0:	32221202 43231303                       .."2..#C

0000f1b8 <g_ui8nCEpins>:
    f1b8:	02070707 00080802 01020202 01010101     ................
    f1c8:	01010101 01010101 01010101 01010101     ................
    f1d8:	01010101 08010101 01010008 01010101     ................
    f1e8:	00000101                                ....

0000f1ec <g_am_hal_mcuctrl_flash_size>:
    f1ec:	00004000 00008000 00010000 00020000     .@..............
    f1fc:	00040000 00080000 00100000 00200000     .............. .
    f20c:	00180000 00000000 00000000 00000000     ................
	...

0000f22c <g_am_hal_mcuctrl_sram_size>:
    f22c:	00004000 00008000 00010000 00020000     .@..............
    f23c:	00040000 00080000 00100000 00060000     ................
    f24c:	000c0000 00000000 00000000 00000000     ................
	...

0000f26c <am_hal_pwrctrl_peripheral_control>:
	...
    f278:	00000001 00000004 00000004 00000002     ................
    f288:	00000008 00000008 00000004 00000008     ................
    f298:	00000008 00000008 00000008 00000008     ................
    f2a8:	00000010 00000010 00000010 00000020     ............ ...
    f2b8:	00000010 00000010 00000040 00000010     ........@.......
    f2c8:	00000010 00000080 00000004 00000004     ................
    f2d8:	00000100 00000004 00000004 00000200     ................
    f2e8:	00000020 00000020 00000400 00000004      ... ...........
    f2f8:	00000004 00000800 00000040 00000040     ........@...@...
    f308:	00001000 00000080 00000080 00002000     ............. ..
    f318:	00000100 00000100                       ........

0000f320 <CSWTCH.20>:
    f320:	016e3600 00b71b00 005b8d80 002dc6c0     .6n.......[...-.
