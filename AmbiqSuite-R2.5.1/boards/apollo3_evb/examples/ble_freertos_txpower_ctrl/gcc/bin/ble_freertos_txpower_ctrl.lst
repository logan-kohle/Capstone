
bin/ble_freertos_txpower_ctrl.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 2b 00 10 4d ca 01 00 41 ca 01 00 49 bd 01 00     .+..M...A...I...
    c010:	45 ca 01 00 45 ca 01 00 45 ca 01 00 00 00 00 00     E...E...E.......
	...
    c02c:	51 01 01 00 49 ca 01 00 00 00 00 00 c1 01 01 00     Q...I...........
    c03c:	25 02 01 00 49 ca 01 00 49 ca 01 00 49 ca 01 00     %...I...I...I...
    c04c:	49 ca 01 00 49 ca 01 00 49 ca 01 00 49 ca 01 00     I...I...I...I...
    c05c:	49 ca 01 00 49 ca 01 00 49 ca 01 00 49 ca 01 00     I...I...I...I...
    c06c:	49 ca 01 00 8d 3b 01 00 49 ca 01 00 31 3c 01 00     I....;..I...1<..
    c07c:	81 3b 01 00 49 ca 01 00 49 ca 01 00 49 ca 01 00     .;..I...I...I...
    c08c:	49 ca 01 00 49 ca 01 00 49 ca 01 00 49 ca 01 00     I...I...I...I...
    c09c:	cd 03 01 00 ed 03 01 00 49 ca 01 00 49 ca 01 00     ........I...I...
    c0ac:	49 ca 01 00 49 ca 01 00 49 ca 01 00 49 ca 01 00     I...I...I...I...
    c0bc:	49 ca 01 00                                         I...

0000c0c0 <__Patchable>:
	...

0000c100 <memcpy>:
    c100:	4684      	mov	ip, r0
    c102:	ea41 0300 	orr.w	r3, r1, r0
    c106:	f013 0303 	ands.w	r3, r3, #3
    c10a:	d16d      	bne.n	c1e8 <memcpy+0xe8>
    c10c:	3a40      	subs	r2, #64	; 0x40
    c10e:	d341      	bcc.n	c194 <memcpy+0x94>
    c110:	f851 3b04 	ldr.w	r3, [r1], #4
    c114:	f840 3b04 	str.w	r3, [r0], #4
    c118:	f851 3b04 	ldr.w	r3, [r1], #4
    c11c:	f840 3b04 	str.w	r3, [r0], #4
    c120:	f851 3b04 	ldr.w	r3, [r1], #4
    c124:	f840 3b04 	str.w	r3, [r0], #4
    c128:	f851 3b04 	ldr.w	r3, [r1], #4
    c12c:	f840 3b04 	str.w	r3, [r0], #4
    c130:	f851 3b04 	ldr.w	r3, [r1], #4
    c134:	f840 3b04 	str.w	r3, [r0], #4
    c138:	f851 3b04 	ldr.w	r3, [r1], #4
    c13c:	f840 3b04 	str.w	r3, [r0], #4
    c140:	f851 3b04 	ldr.w	r3, [r1], #4
    c144:	f840 3b04 	str.w	r3, [r0], #4
    c148:	f851 3b04 	ldr.w	r3, [r1], #4
    c14c:	f840 3b04 	str.w	r3, [r0], #4
    c150:	f851 3b04 	ldr.w	r3, [r1], #4
    c154:	f840 3b04 	str.w	r3, [r0], #4
    c158:	f851 3b04 	ldr.w	r3, [r1], #4
    c15c:	f840 3b04 	str.w	r3, [r0], #4
    c160:	f851 3b04 	ldr.w	r3, [r1], #4
    c164:	f840 3b04 	str.w	r3, [r0], #4
    c168:	f851 3b04 	ldr.w	r3, [r1], #4
    c16c:	f840 3b04 	str.w	r3, [r0], #4
    c170:	f851 3b04 	ldr.w	r3, [r1], #4
    c174:	f840 3b04 	str.w	r3, [r0], #4
    c178:	f851 3b04 	ldr.w	r3, [r1], #4
    c17c:	f840 3b04 	str.w	r3, [r0], #4
    c180:	f851 3b04 	ldr.w	r3, [r1], #4
    c184:	f840 3b04 	str.w	r3, [r0], #4
    c188:	f851 3b04 	ldr.w	r3, [r1], #4
    c18c:	f840 3b04 	str.w	r3, [r0], #4
    c190:	3a40      	subs	r2, #64	; 0x40
    c192:	d2bd      	bcs.n	c110 <memcpy+0x10>
    c194:	3230      	adds	r2, #48	; 0x30
    c196:	d311      	bcc.n	c1bc <memcpy+0xbc>
    c198:	f851 3b04 	ldr.w	r3, [r1], #4
    c19c:	f840 3b04 	str.w	r3, [r0], #4
    c1a0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1a4:	f840 3b04 	str.w	r3, [r0], #4
    c1a8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1ac:	f840 3b04 	str.w	r3, [r0], #4
    c1b0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1b4:	f840 3b04 	str.w	r3, [r0], #4
    c1b8:	3a10      	subs	r2, #16
    c1ba:	d2ed      	bcs.n	c198 <memcpy+0x98>
    c1bc:	320c      	adds	r2, #12
    c1be:	d305      	bcc.n	c1cc <memcpy+0xcc>
    c1c0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1c4:	f840 3b04 	str.w	r3, [r0], #4
    c1c8:	3a04      	subs	r2, #4
    c1ca:	d2f9      	bcs.n	c1c0 <memcpy+0xc0>
    c1cc:	3204      	adds	r2, #4
    c1ce:	d008      	beq.n	c1e2 <memcpy+0xe2>
    c1d0:	07d2      	lsls	r2, r2, #31
    c1d2:	bf1c      	itt	ne
    c1d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c1d8:	f800 3b01 	strbne.w	r3, [r0], #1
    c1dc:	d301      	bcc.n	c1e2 <memcpy+0xe2>
    c1de:	880b      	ldrh	r3, [r1, #0]
    c1e0:	8003      	strh	r3, [r0, #0]
    c1e2:	4660      	mov	r0, ip
    c1e4:	4770      	bx	lr
    c1e6:	bf00      	nop
    c1e8:	2a08      	cmp	r2, #8
    c1ea:	d313      	bcc.n	c214 <memcpy+0x114>
    c1ec:	078b      	lsls	r3, r1, #30
    c1ee:	d08d      	beq.n	c10c <memcpy+0xc>
    c1f0:	f010 0303 	ands.w	r3, r0, #3
    c1f4:	d08a      	beq.n	c10c <memcpy+0xc>
    c1f6:	f1c3 0304 	rsb	r3, r3, #4
    c1fa:	1ad2      	subs	r2, r2, r3
    c1fc:	07db      	lsls	r3, r3, #31
    c1fe:	bf1c      	itt	ne
    c200:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c204:	f800 3b01 	strbne.w	r3, [r0], #1
    c208:	d380      	bcc.n	c10c <memcpy+0xc>
    c20a:	f831 3b02 	ldrh.w	r3, [r1], #2
    c20e:	f820 3b02 	strh.w	r3, [r0], #2
    c212:	e77b      	b.n	c10c <memcpy+0xc>
    c214:	3a04      	subs	r2, #4
    c216:	d3d9      	bcc.n	c1cc <memcpy+0xcc>
    c218:	3a01      	subs	r2, #1
    c21a:	f811 3b01 	ldrb.w	r3, [r1], #1
    c21e:	f800 3b01 	strb.w	r3, [r0], #1
    c222:	d2f9      	bcs.n	c218 <memcpy+0x118>
    c224:	780b      	ldrb	r3, [r1, #0]
    c226:	7003      	strb	r3, [r0, #0]
    c228:	784b      	ldrb	r3, [r1, #1]
    c22a:	7043      	strb	r3, [r0, #1]
    c22c:	788b      	ldrb	r3, [r1, #2]
    c22e:	7083      	strb	r3, [r0, #2]
    c230:	4660      	mov	r0, ip
    c232:	4770      	bx	lr

0000c234 <__aeabi_d2f>:
    c234:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c238:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c23c:	bf24      	itt	cs
    c23e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c242:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c246:	d90d      	bls.n	c264 <__aeabi_d2f+0x30>
    c248:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c24c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c250:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c254:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c258:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c25c:	bf08      	it	eq
    c25e:	f020 0001 	biceq.w	r0, r0, #1
    c262:	4770      	bx	lr
    c264:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c268:	d121      	bne.n	c2ae <__aeabi_d2f+0x7a>
    c26a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c26e:	bfbc      	itt	lt
    c270:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c274:	4770      	bxlt	lr
    c276:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c27a:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c27e:	f1c2 0218 	rsb	r2, r2, #24
    c282:	f1c2 0c20 	rsb	ip, r2, #32
    c286:	fa10 f30c 	lsls.w	r3, r0, ip
    c28a:	fa20 f002 	lsr.w	r0, r0, r2
    c28e:	bf18      	it	ne
    c290:	f040 0001 	orrne.w	r0, r0, #1
    c294:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c298:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c29c:	fa03 fc0c 	lsl.w	ip, r3, ip
    c2a0:	ea40 000c 	orr.w	r0, r0, ip
    c2a4:	fa23 f302 	lsr.w	r3, r3, r2
    c2a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c2ac:	e7cc      	b.n	c248 <__aeabi_d2f+0x14>
    c2ae:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c2b2:	d107      	bne.n	c2c4 <__aeabi_d2f+0x90>
    c2b4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c2b8:	bf1e      	ittt	ne
    c2ba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c2be:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c2c2:	4770      	bxne	lr
    c2c4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c2c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c2cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c2d0:	4770      	bx	lr
    c2d2:	bf00      	nop

0000c2d4 <HciDrvRadioBoot>:
// Boot the radio.
//
//*****************************************************************************
uint32_t
HciDrvRadioBoot(bool bColdBoot)
{
    c2d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t ui32NumXtalRetries = 0;


    g_ui32NumBytes     = 0;
    c2d8:	4968      	ldr	r1, [pc, #416]	; (c47c <HciDrvRadioBoot+0x1a8>)
    c2da:	4d69      	ldr	r5, [pc, #420]	; (c480 <HciDrvRadioBoot+0x1ac>)
    g_consumed_bytes   = 0;
    c2dc:	4a69      	ldr	r2, [pc, #420]	; (c484 <HciDrvRadioBoot+0x1b0>)
            //
            // If the radio is running, we can exit this loop.
            //
            break;
        }
        else if (ui32Status == AM_HAL_BLE_32K_CLOCK_UNSTABLE)
    c2de:	f8df 81d8 	ldr.w	r8, [pc, #472]	; c4b8 <HciDrvRadioBoot+0x1e4>
    g_ui32NumBytes     = 0;
    c2e2:	2300      	movs	r3, #0
    c2e4:	600b      	str	r3, [r1, #0]
{
    c2e6:	b090      	sub	sp, #64	; 0x40
        ERROR_CHECK(am_hal_ble_initialize(0, &BLE));
    c2e8:	4629      	mov	r1, r5
{
    c2ea:	4607      	mov	r7, r0
        ERROR_CHECK(am_hal_ble_initialize(0, &BLE));
    c2ec:	2000      	movs	r0, #0
    g_consumed_bytes   = 0;
    c2ee:	6013      	str	r3, [r2, #0]
        ERROR_CHECK(am_hal_ble_initialize(0, &BLE));
    c2f0:	f010 fed2 	bl	1d098 <am_hal_ble_initialize>
    while (ui32Status != AM_HAL_STATUS_SUCCESS)
    c2f4:	260b      	movs	r6, #11
        ERROR_CHECK(am_hal_ble_initialize(0, &BLE));
    c2f6:	4601      	mov	r1, r0
    c2f8:	2800      	cmp	r0, #0
    c2fa:	d13b      	bne.n	c374 <HciDrvRadioBoot+0xa0>
        ERROR_CHECK(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_ACTIVE));
    c2fc:	6828      	ldr	r0, [r5, #0]
    c2fe:	f010 ffad 	bl	1d25c <am_hal_ble_power_control>
    c302:	4604      	mov	r4, r0
    c304:	2800      	cmp	r0, #0
    c306:	d174      	bne.n	c3f2 <HciDrvRadioBoot+0x11e>
        am_hal_ble_config_t sBleConfig =
    c308:	4c5f      	ldr	r4, [pc, #380]	; (c488 <HciDrvRadioBoot+0x1b4>)
    c30a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    c30c:	f10d 0c0c 	add.w	ip, sp, #12
    c310:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    c314:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    c318:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        ERROR_CHECK(am_hal_ble_config(BLE, &sBleConfig));
    c31c:	6828      	ldr	r0, [r5, #0]
    c31e:	a903      	add	r1, sp, #12
    c320:	f010 ff10 	bl	1d144 <am_hal_ble_config>
    c324:	4604      	mov	r4, r0
    c326:	2800      	cmp	r0, #0
    c328:	d16d      	bne.n	c406 <HciDrvRadioBoot+0x132>
        if ( bColdBoot )
    c32a:	2f00      	cmp	r7, #0
    c32c:	d131      	bne.n	c392 <HciDrvRadioBoot+0xbe>
        ui32Status = am_hal_ble_boot(BLE);
    c32e:	6828      	ldr	r0, [r5, #0]
    c330:	f011 fe00 	bl	1df34 <am_hal_ble_boot>
        if (ui32Status == AM_HAL_STATUS_SUCCESS)
    c334:	4604      	mov	r4, r0
    c336:	2800      	cmp	r0, #0
    c338:	d030      	beq.n	c39c <HciDrvRadioBoot+0xc8>
        else if (ui32Status == AM_HAL_BLE_32K_CLOCK_UNSTABLE)
    c33a:	4544      	cmp	r4, r8
        {
            //
            // If the radio is running, but the clock looks bad, we can try to
            // restart.
            //
            ERROR_CHECK(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
    c33c:	6828      	ldr	r0, [r5, #0]
    c33e:	f04f 0101 	mov.w	r1, #1
        else if (ui32Status == AM_HAL_BLE_32K_CLOCK_UNSTABLE)
    c342:	d168      	bne.n	c416 <HciDrvRadioBoot+0x142>
            ERROR_CHECK(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
    c344:	f010 ff8a 	bl	1d25c <am_hal_ble_power_control>
    c348:	4604      	mov	r4, r0
    c34a:	2800      	cmp	r0, #0
    c34c:	d176      	bne.n	c43c <HciDrvRadioBoot+0x168>
            ERROR_CHECK(am_hal_ble_deinitialize(BLE));
    c34e:	6828      	ldr	r0, [r5, #0]
    c350:	f010 fed8 	bl	1d104 <am_hal_ble_deinitialize>
    c354:	4604      	mov	r4, r0
    c356:	2800      	cmp	r0, #0
    c358:	d178      	bne.n	c44c <HciDrvRadioBoot+0x178>

            //
            // We won't restart forever. After we hit the maximum number of
            // retries, we'll just return with failure.
            //
            if (ui32NumXtalRetries++ < HCI_DRV_MAX_XTAL_RETRIES)
    c35a:	3e01      	subs	r6, #1
    c35c:	d014      	beq.n	c388 <HciDrvRadioBoot+0xb4>
            {
                am_util_delay_ms(1000);
    c35e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    c362:	f00f fcc9 	bl	1bcf8 <am_util_delay_ms>
        ERROR_CHECK(am_hal_ble_initialize(0, &BLE));
    c366:	4629      	mov	r1, r5
    c368:	2000      	movs	r0, #0
    c36a:	f010 fe95 	bl	1d098 <am_hal_ble_initialize>
    c36e:	4601      	mov	r1, r0
    c370:	2800      	cmp	r0, #0
    c372:	d0c3      	beq.n	c2fc <HciDrvRadioBoot+0x28>
    c374:	4845      	ldr	r0, [pc, #276]	; (c48c <HciDrvRadioBoot+0x1b8>)
    c376:	9101      	str	r1, [sp, #4]
    c378:	f010 faba 	bl	1c8f0 <am_util_stdio_printf>
        if (g_hciDrvErrorHandler)
    c37c:	4b44      	ldr	r3, [pc, #272]	; (c490 <HciDrvRadioBoot+0x1bc>)
    c37e:	681b      	ldr	r3, [r3, #0]
    c380:	b113      	cbz	r3, c388 <HciDrvRadioBoot+0xb4>
            g_hciDrvErrorHandler(g_ui32FailingStatus);
    c382:	9901      	ldr	r1, [sp, #4]
    c384:	4608      	mov	r0, r1
    c386:	4798      	blx	r3
        ERROR_CHECK(am_hal_ble_initialize(0, &BLE));
    c388:	2401      	movs	r4, #1
        g_BLEMacAddress[4] = (sDevice.ui32ChipID0 >> 8) & 0xFF;
        g_BLEMacAddress[5] = (sDevice.ui32ChipID0 >> 16) & 0xFF;
    }

    return AM_HAL_STATUS_SUCCESS;
}
    c38a:	4620      	mov	r0, r4
    c38c:	b010      	add	sp, #64	; 0x40
    c38e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            am_util_delay_ms(1000);
    c392:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    c396:	f00f fcaf 	bl	1bcf8 <am_util_delay_ms>
    c39a:	e7c8      	b.n	c32e <HciDrvRadioBoot+0x5a>
    am_hal_ble_tx_power_set(BLE, 0x8);
    c39c:	6828      	ldr	r0, [r5, #0]
    c39e:	2108      	movs	r1, #8
    c3a0:	f011 fe48 	bl	1e034 <am_hal_ble_tx_power_set>
    am_hal_ble_int_clear(BLE, (AM_HAL_BLE_INT_CMDCMP |
    c3a4:	6828      	ldr	r0, [r5, #0]
    c3a6:	f240 2181 	movw	r1, #641	; 0x281
    c3aa:	f011 fb4f 	bl	1da4c <am_hal_ble_int_clear>
    am_hal_ble_int_enable(BLE, (AM_HAL_BLE_INT_CMDCMP |
    c3ae:	6828      	ldr	r0, [r5, #0]
    c3b0:	f240 2181 	movw	r1, #641	; 0x281
    c3b4:	f011 fb1c 	bl	1d9f0 <am_hal_ble_int_enable>
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c3b8:	4b36      	ldr	r3, [pc, #216]	; (c494 <HciDrvRadioBoot+0x1c0>)
    c3ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    c3be:	601a      	str	r2, [r3, #0]
    am_hal_queue_from_array(&g_sWriteQueue, g_psWriteBuffers);
    c3c0:	f44f 6302 	mov.w	r3, #2080	; 0x820
    c3c4:	4934      	ldr	r1, [pc, #208]	; (c498 <HciDrvRadioBoot+0x1c4>)
    c3c6:	4835      	ldr	r0, [pc, #212]	; (c49c <HciDrvRadioBoot+0x1c8>)
    c3c8:	f44f 7282 	mov.w	r2, #260	; 0x104
    c3cc:	f012 fd08 	bl	1ede0 <am_hal_queue_init>
    g_ui32InterruptsSeen = 0;
    c3d0:	4b33      	ldr	r3, [pc, #204]	; (c4a0 <HciDrvRadioBoot+0x1cc>)
    c3d2:	601c      	str	r4, [r3, #0]
    if (bColdBoot)
    c3d4:	2f00      	cmp	r7, #0
    c3d6:	d0d8      	beq.n	c38a <HciDrvRadioBoot+0xb6>
        am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_DEVICEID, &sDevice);
    c3d8:	a903      	add	r1, sp, #12
    c3da:	2001      	movs	r0, #1
    c3dc:	f012 fb30 	bl	1ea40 <am_hal_mcuctrl_info_get>
        g_BLEMacAddress[4] = (sDevice.ui32ChipID0 >> 8) & 0xFF;
    c3e0:	9b04      	ldr	r3, [sp, #16]
        memcpy(g_BLEMacAddress, &sDevice.ui32ChipID1, sizeof(sDevice.ui32ChipID1));
    c3e2:	4a30      	ldr	r2, [pc, #192]	; (c4a4 <HciDrvRadioBoot+0x1d0>)
    c3e4:	9805      	ldr	r0, [sp, #20]
    c3e6:	6010      	str	r0, [r2, #0]
        g_BLEMacAddress[4] = (sDevice.ui32ChipID0 >> 8) & 0xFF;
    c3e8:	0a19      	lsrs	r1, r3, #8
        g_BLEMacAddress[5] = (sDevice.ui32ChipID0 >> 16) & 0xFF;
    c3ea:	0c1b      	lsrs	r3, r3, #16
        g_BLEMacAddress[4] = (sDevice.ui32ChipID0 >> 8) & 0xFF;
    c3ec:	7111      	strb	r1, [r2, #4]
        g_BLEMacAddress[5] = (sDevice.ui32ChipID0 >> 16) & 0xFF;
    c3ee:	7153      	strb	r3, [r2, #5]
    c3f0:	e7cb      	b.n	c38a <HciDrvRadioBoot+0xb6>
        ERROR_CHECK(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_ACTIVE));
    c3f2:	482d      	ldr	r0, [pc, #180]	; (c4a8 <HciDrvRadioBoot+0x1d4>)
    c3f4:	f010 fa7c 	bl	1c8f0 <am_util_stdio_printf>
        if (g_hciDrvErrorHandler)
    c3f8:	4b25      	ldr	r3, [pc, #148]	; (c490 <HciDrvRadioBoot+0x1bc>)
    c3fa:	681b      	ldr	r3, [r3, #0]
    c3fc:	2b00      	cmp	r3, #0
    c3fe:	d0c3      	beq.n	c388 <HciDrvRadioBoot+0xb4>
            g_hciDrvErrorHandler(g_ui32FailingStatus);
    c400:	4620      	mov	r0, r4
    c402:	4798      	blx	r3
    c404:	e7c0      	b.n	c388 <HciDrvRadioBoot+0xb4>
        ERROR_CHECK(am_hal_ble_config(BLE, &sBleConfig));
    c406:	4829      	ldr	r0, [pc, #164]	; (c4ac <HciDrvRadioBoot+0x1d8>)
    c408:	f010 fa72 	bl	1c8f0 <am_util_stdio_printf>
        if (g_hciDrvErrorHandler)
    c40c:	4b20      	ldr	r3, [pc, #128]	; (c490 <HciDrvRadioBoot+0x1bc>)
    c40e:	681b      	ldr	r3, [r3, #0]
    c410:	2b00      	cmp	r3, #0
    c412:	d1f5      	bne.n	c400 <HciDrvRadioBoot+0x12c>
    c414:	e7b8      	b.n	c388 <HciDrvRadioBoot+0xb4>
            ERROR_CHECK(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
    c416:	f010 ff21 	bl	1d25c <am_hal_ble_power_control>
    c41a:	4606      	mov	r6, r0
    c41c:	bb18      	cbnz	r0, c466 <HciDrvRadioBoot+0x192>
            ERROR_CHECK(am_hal_ble_deinitialize(BLE));
    c41e:	6828      	ldr	r0, [r5, #0]
    c420:	f010 fe70 	bl	1d104 <am_hal_ble_deinitialize>
    c424:	4605      	mov	r5, r0
    c426:	b1c8      	cbz	r0, c45c <HciDrvRadioBoot+0x188>
    c428:	4821      	ldr	r0, [pc, #132]	; (c4b0 <HciDrvRadioBoot+0x1dc>)
    c42a:	f010 fa61 	bl	1c8f0 <am_util_stdio_printf>
        if (g_hciDrvErrorHandler)
    c42e:	4b18      	ldr	r3, [pc, #96]	; (c490 <HciDrvRadioBoot+0x1bc>)
    c430:	681b      	ldr	r3, [r3, #0]
    c432:	2b00      	cmp	r3, #0
    c434:	d0a8      	beq.n	c388 <HciDrvRadioBoot+0xb4>
            g_hciDrvErrorHandler(g_ui32FailingStatus);
    c436:	4628      	mov	r0, r5
    c438:	4798      	blx	r3
    c43a:	e7a5      	b.n	c388 <HciDrvRadioBoot+0xb4>
            ERROR_CHECK(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
    c43c:	481d      	ldr	r0, [pc, #116]	; (c4b4 <HciDrvRadioBoot+0x1e0>)
    c43e:	f010 fa57 	bl	1c8f0 <am_util_stdio_printf>
        if (g_hciDrvErrorHandler)
    c442:	4b13      	ldr	r3, [pc, #76]	; (c490 <HciDrvRadioBoot+0x1bc>)
    c444:	681b      	ldr	r3, [r3, #0]
    c446:	2b00      	cmp	r3, #0
    c448:	d1da      	bne.n	c400 <HciDrvRadioBoot+0x12c>
    c44a:	e79d      	b.n	c388 <HciDrvRadioBoot+0xb4>
            ERROR_CHECK(am_hal_ble_deinitialize(BLE));
    c44c:	4818      	ldr	r0, [pc, #96]	; (c4b0 <HciDrvRadioBoot+0x1dc>)
    c44e:	f010 fa4f 	bl	1c8f0 <am_util_stdio_printf>
        if (g_hciDrvErrorHandler)
    c452:	4b0f      	ldr	r3, [pc, #60]	; (c490 <HciDrvRadioBoot+0x1bc>)
    c454:	681b      	ldr	r3, [r3, #0]
    c456:	2b00      	cmp	r3, #0
    c458:	d1d2      	bne.n	c400 <HciDrvRadioBoot+0x12c>
    c45a:	e795      	b.n	c388 <HciDrvRadioBoot+0xb4>
    c45c:	4b0c      	ldr	r3, [pc, #48]	; (c490 <HciDrvRadioBoot+0x1bc>)
    c45e:	681b      	ldr	r3, [r3, #0]
    c460:	2b00      	cmp	r3, #0
    c462:	d1cd      	bne.n	c400 <HciDrvRadioBoot+0x12c>
    c464:	e790      	b.n	c388 <HciDrvRadioBoot+0xb4>
            ERROR_CHECK(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
    c466:	4813      	ldr	r0, [pc, #76]	; (c4b4 <HciDrvRadioBoot+0x1e0>)
    c468:	f010 fa42 	bl	1c8f0 <am_util_stdio_printf>
        if (g_hciDrvErrorHandler)
    c46c:	4b08      	ldr	r3, [pc, #32]	; (c490 <HciDrvRadioBoot+0x1bc>)
    c46e:	681b      	ldr	r3, [r3, #0]
    c470:	2b00      	cmp	r3, #0
    c472:	d089      	beq.n	c388 <HciDrvRadioBoot+0xb4>
            g_hciDrvErrorHandler(g_ui32FailingStatus);
    c474:	4630      	mov	r0, r6
    c476:	4798      	blx	r3
    c478:	e786      	b.n	c388 <HciDrvRadioBoot+0xb4>
    c47a:	bf00      	nop
    c47c:	10004758 	.word	0x10004758
    c480:	10003de8 	.word	0x10003de8
    c484:	10003e14 	.word	0x10003e14
    c488:	0001f274 	.word	0x0001f274
    c48c:	0001f294 	.word	0x0001f294
    c490:	10003e18 	.word	0x10003e18
    c494:	e000e100 	.word	0xe000e100
    c498:	10003e1c 	.word	0x10003e1c
    c49c:	1000473c 	.word	0x1000473c
    c4a0:	10004754 	.word	0x10004754
    c4a4:	10003dec 	.word	0x10003dec
    c4a8:	0001f2c0 	.word	0x0001f2c0
    c4ac:	0001f304 	.word	0x0001f304
    c4b0:	0001f37c 	.word	0x0001f37c
    c4b4:	0001f338 	.word	0x0001f338
    c4b8:	0800000b 	.word	0x0800000b

0000c4bc <HciDrvRadioShutdown>:
// Shut down the BLE core.
//
//*****************************************************************************
void
HciDrvRadioShutdown(void)
{
    c4bc:	b570      	push	{r4, r5, r6, lr}
    BLE_HEARTBEAT_STOP();
    c4be:	4814      	ldr	r0, [pc, #80]	; (c510 <HciDrvRadioShutdown+0x54>)
    c4c0:	f003 fd22 	bl	ff08 <WsfTimerStop>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c4c4:	4b13      	ldr	r3, [pc, #76]	; (c514 <HciDrvRadioShutdown+0x58>)
    c4c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    c4ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    c4ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c4d2:	f3bf 8f6f 	isb	sy

    NVIC_DisableIRQ(BLE_IRQn);

    am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF);
    c4d6:	4e10      	ldr	r6, [pc, #64]	; (c518 <HciDrvRadioShutdown+0x5c>)

    // wait for 1s at max
    WHILE_TIMEOUT_MS_BREAK(PWRCTRL->DEVPWREN_b.PWRBLEL, 1000, 0);
    c4d8:	4d10      	ldr	r5, [pc, #64]	; (c51c <HciDrvRadioShutdown+0x60>)
    am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF);
    c4da:	6830      	ldr	r0, [r6, #0]
    c4dc:	2101      	movs	r1, #1
    c4de:	f010 febd 	bl	1d25c <am_hal_ble_power_control>
    WHILE_TIMEOUT_MS_BREAK(PWRCTRL->DEVPWREN_b.PWRBLEL, 1000, 0);
    c4e2:	68ab      	ldr	r3, [r5, #8]
    c4e4:	049a      	lsls	r2, r3, #18
    c4e6:	d509      	bpl.n	c4fc <HciDrvRadioShutdown+0x40>
    c4e8:	4c0d      	ldr	r4, [pc, #52]	; (c520 <HciDrvRadioShutdown+0x64>)
    c4ea:	e001      	b.n	c4f0 <HciDrvRadioShutdown+0x34>
    c4ec:	3c01      	subs	r4, #1
    c4ee:	d005      	beq.n	c4fc <HciDrvRadioShutdown+0x40>
    c4f0:	2010      	movs	r0, #16
    c4f2:	f012 f88f 	bl	1e614 <am_hal_flash_delay>
    c4f6:	68ab      	ldr	r3, [r5, #8]
    c4f8:	049b      	lsls	r3, r3, #18
    c4fa:	d4f7      	bmi.n	c4ec <HciDrvRadioShutdown+0x30>

    am_hal_ble_deinitialize(BLE);
    c4fc:	6830      	ldr	r0, [r6, #0]
    c4fe:	f010 fe01 	bl	1d104 <am_hal_ble_deinitialize>

    g_ui32NumBytes   = 0;
    c502:	4908      	ldr	r1, [pc, #32]	; (c524 <HciDrvRadioShutdown+0x68>)
    g_consumed_bytes = 0;
    c504:	4a08      	ldr	r2, [pc, #32]	; (c528 <HciDrvRadioShutdown+0x6c>)
    g_ui32NumBytes   = 0;
    c506:	2300      	movs	r3, #0
    c508:	600b      	str	r3, [r1, #0]
    g_consumed_bytes = 0;
    c50a:	6013      	str	r3, [r2, #0]
}
    c50c:	bd70      	pop	{r4, r5, r6, pc}
    c50e:	bf00      	nop
    c510:	10003df4 	.word	0x10003df4
    c514:	e000e100 	.word	0xe000e100
    c518:	10003de8 	.word	0x10003de8
    c51c:	40021000 	.word	0x40021000
    c520:	000f4240 	.word	0x000f4240
    c524:	10004758 	.word	0x10004758
    c528:	10003e14 	.word	0x10003e14

0000c52c <hciDrvWrite>:
// Internally, the Cordio BLE stack will allocate memory for an HCI message,
//
//*****************************************************************************
uint16_t
hciDrvWrite(uint8_t type, uint16_t len, uint8_t *pData)
{
    c52c:	b538      	push	{r3, r4, r5, lr}


    //
    // Check to see if we still have buffer space.
    //
    if (am_hal_queue_full(&g_sWriteQueue))
    c52e:	4d2c      	ldr	r5, [pc, #176]	; (c5e0 <hciDrvWrite+0xb4>)
{
    c530:	460c      	mov	r4, r1
    if (am_hal_queue_full(&g_sWriteQueue))
    c532:	68ab      	ldr	r3, [r5, #8]
    c534:	68e9      	ldr	r1, [r5, #12]
    c536:	428b      	cmp	r3, r1
    c538:	d04a      	beq.n	c5d0 <hciDrvWrite+0xa4>
    {
        CRITICAL_PRINT("ERROR: Ran out of HCI transmit queue slots.\n");
        ERROR_RETURN(HCI_DRV_TRANSMIT_QUEUE_FULL, len);
    }

    if (len > (HCI_DRV_MAX_TX_PACKET-1))  // comparison compensates for the type byte at index 0.
    c53a:	2cff      	cmp	r4, #255	; 0xff
    c53c:	d837      	bhi.n	c5ae <hciDrvWrite+0x82>
    }

    //
    // Get a pointer to the next item in the queue.
    //
    psWriteBuffer = am_hal_queue_next_slot(&g_sWriteQueue);
    c53e:	696b      	ldr	r3, [r5, #20]
    c540:	682d      	ldr	r5, [r5, #0]

    //
    // Set all of the fields in the hci write structure.
    //
    psWriteBuffer->ui32Length = len + 1;
    c542:	1c61      	adds	r1, r4, #1
    c544:	b289      	uxth	r1, r1
    c546:	5159      	str	r1, [r3, r5]
    psWriteBuffer = am_hal_queue_next_slot(&g_sWriteQueue);
    c548:	442b      	add	r3, r5

    pui8Wptr = (uint8_t *) psWriteBuffer->pui32Data;

    *pui8Wptr++ = type;
    c54a:	1d5d      	adds	r5, r3, #5
    c54c:	7118      	strb	r0, [r3, #4]

    for (uint32_t i = 0; i < len; i++)
    c54e:	b314      	cbz	r4, c596 <hciDrvWrite+0x6a>
    c550:	1c51      	adds	r1, r2, #1
    c552:	1a69      	subs	r1, r5, r1
    c554:	2902      	cmp	r1, #2
    c556:	d932      	bls.n	c5be <hciDrvWrite+0x92>
    c558:	1e61      	subs	r1, r4, #1
    c55a:	2907      	cmp	r1, #7
    c55c:	d92f      	bls.n	c5be <hciDrvWrite+0x92>
    c55e:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    c562:	4613      	mov	r3, r2
    c564:	4629      	mov	r1, r5
    c566:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
    {
        pui8Wptr[i] = pData[i];
    c56a:	f853 0b04 	ldr.w	r0, [r3], #4
    c56e:	f841 0b04 	str.w	r0, [r1], #4
    for (uint32_t i = 0; i < len; i++)
    c572:	4563      	cmp	r3, ip
    c574:	d1f9      	bne.n	c56a <hciDrvWrite+0x3e>
    c576:	f024 0303 	bic.w	r3, r4, #3
    c57a:	429c      	cmp	r4, r3
    c57c:	d00b      	beq.n	c596 <hciDrvWrite+0x6a>
        pui8Wptr[i] = pData[i];
    c57e:	5cd1      	ldrb	r1, [r2, r3]
    c580:	54e9      	strb	r1, [r5, r3]
    for (uint32_t i = 0; i < len; i++)
    c582:	1c59      	adds	r1, r3, #1
    c584:	428c      	cmp	r4, r1
    c586:	d906      	bls.n	c596 <hciDrvWrite+0x6a>
    c588:	3302      	adds	r3, #2
        pui8Wptr[i] = pData[i];
    c58a:	5c50      	ldrb	r0, [r2, r1]
    c58c:	5468      	strb	r0, [r5, r1]
    for (uint32_t i = 0; i < len; i++)
    c58e:	429c      	cmp	r4, r3
    c590:	d901      	bls.n	c596 <hciDrvWrite+0x6a>
        pui8Wptr[i] = pData[i];
    c592:	5cd2      	ldrb	r2, [r2, r3]
    c594:	54ea      	strb	r2, [r5, r3]
    }

    //
    // Advance the queue.
    //
    am_hal_queue_item_add(&g_sWriteQueue, 0, 1);
    c596:	2100      	movs	r1, #0
    c598:	4811      	ldr	r0, [pc, #68]	; (c5e0 <hciDrvWrite+0xb4>)
    c59a:	2201      	movs	r2, #1
    c59c:	f012 fc2c 	bl	1edf8 <am_hal_queue_item_add>

#else
    //
    // Send an event to the BLE transfer handler function.
    //
    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
    c5a0:	4b10      	ldr	r3, [pc, #64]	; (c5e4 <hciDrvWrite+0xb8>)
    c5a2:	2101      	movs	r1, #1
    c5a4:	7818      	ldrb	r0, [r3, #0]
    c5a6:	f003 fa25 	bl	f9f4 <WsfSetEvent>
#endif
    return len;
}
    c5aa:	4620      	mov	r0, r4
    c5ac:	bd38      	pop	{r3, r4, r5, pc}
        if (g_hciDrvErrorHandler)
    c5ae:	4b0e      	ldr	r3, [pc, #56]	; (c5e8 <hciDrvWrite+0xbc>)
    c5b0:	681b      	ldr	r3, [r3, #0]
    c5b2:	2b00      	cmp	r3, #0
    c5b4:	d0f9      	beq.n	c5aa <hciDrvWrite+0x7e>
            g_hciDrvErrorHandler(g_ui32FailingStatus);
    c5b6:	480d      	ldr	r0, [pc, #52]	; (c5ec <hciDrvWrite+0xc0>)
    c5b8:	4798      	blx	r3
}
    c5ba:	4620      	mov	r0, r4
    c5bc:	bd38      	pop	{r3, r4, r5, pc}
    c5be:	3304      	adds	r3, #4
    c5c0:	1910      	adds	r0, r2, r4
        pui8Wptr[i] = pData[i];
    c5c2:	f812 1b01 	ldrb.w	r1, [r2], #1
    c5c6:	f803 1f01 	strb.w	r1, [r3, #1]!
    for (uint32_t i = 0; i < len; i++)
    c5ca:	4282      	cmp	r2, r0
    c5cc:	d1f9      	bne.n	c5c2 <hciDrvWrite+0x96>
    c5ce:	e7e2      	b.n	c596 <hciDrvWrite+0x6a>
        if (g_hciDrvErrorHandler)
    c5d0:	4b05      	ldr	r3, [pc, #20]	; (c5e8 <hciDrvWrite+0xbc>)
    c5d2:	681b      	ldr	r3, [r3, #0]
    c5d4:	2b00      	cmp	r3, #0
    c5d6:	d0e8      	beq.n	c5aa <hciDrvWrite+0x7e>
            g_hciDrvErrorHandler(g_ui32FailingStatus);
    c5d8:	f04f 6010 	mov.w	r0, #150994944	; 0x9000000
    c5dc:	4798      	blx	r3
    c5de:	e7e4      	b.n	c5aa <hciDrvWrite+0x7e>
    c5e0:	1000473c 	.word	0x1000473c
    c5e4:	10003df2 	.word	0x10003df2
    c5e8:	10003e18 	.word	0x10003e18
    c5ec:	09000001 	.word	0x09000001

0000c5f0 <HciDrvHandlerInit>:
void
HciDrvHandlerInit(wsfHandlerId_t handlerId)
{
    g_HciDrvHandleID = handlerId;

    g_HeartBeatTimer.handlerId = handlerId;
    c5f0:	4a06      	ldr	r2, [pc, #24]	; (c60c <HciDrvHandlerInit+0x1c>)
    g_HeartBeatTimer.msg.event = BLE_HEARTBEAT_EVENT;

    g_WakeTimer.handlerId = handlerId;
    c5f2:	4b07      	ldr	r3, [pc, #28]	; (c610 <HciDrvHandlerInit+0x20>)
    g_HeartBeatTimer.msg.event = BLE_HEARTBEAT_EVENT;
    c5f4:	2102      	movs	r1, #2
{
    c5f6:	b410      	push	{r4}
    g_HciDrvHandleID = handlerId;
    c5f8:	4c06      	ldr	r4, [pc, #24]	; (c614 <HciDrvHandlerInit+0x24>)
    g_HeartBeatTimer.handlerId = handlerId;
    c5fa:	7310      	strb	r0, [r2, #12]
    g_HeartBeatTimer.msg.event = BLE_HEARTBEAT_EVENT;
    c5fc:	7291      	strb	r1, [r2, #10]
    g_WakeTimer.msg.event = BLE_SET_WAKEUP;
    c5fe:	2203      	movs	r2, #3
    g_WakeTimer.handlerId = handlerId;
    c600:	7318      	strb	r0, [r3, #12]
    g_WakeTimer.msg.event = BLE_SET_WAKEUP;
    c602:	729a      	strb	r2, [r3, #10]
    g_HciDrvHandleID = handlerId;
    c604:	7020      	strb	r0, [r4, #0]
}
    c606:	f85d 4b04 	ldr.w	r4, [sp], #4
    c60a:	4770      	bx	lr
    c60c:	10003df4 	.word	0x10003df4
    c610:	10003e04 	.word	0x10003e04
    c614:	10003df2 	.word	0x10003df2

0000c618 <HciDrvIntService>:
//     HciDrvHandler(handlerId);
//
//*****************************************************************************
void
HciDrvIntService(void)
{
    c618:	b510      	push	{r4, lr}
#endif

    //
    // Read and clear the interrupt status.
    //
    uint32_t ui32Status = am_hal_ble_int_status(BLE, true);
    c61a:	4c0a      	ldr	r4, [pc, #40]	; (c644 <HciDrvIntService+0x2c>)
    c61c:	2101      	movs	r1, #1
    c61e:	6820      	ldr	r0, [r4, #0]
    c620:	f011 fa06 	bl	1da30 <am_hal_ble_int_status>
    c624:	4601      	mov	r1, r0
    am_hal_ble_int_clear(BLE, ui32Status);
    c626:	6820      	ldr	r0, [r4, #0]
    c628:	f011 fa10 	bl	1da4c <am_hal_ble_int_clear>
#else
    //
    // Advance an event counter to make sure we're keeping track of edges
    // correctly.
    //
    g_ui32InterruptsSeen++;
    c62c:	4a06      	ldr	r2, [pc, #24]	; (c648 <HciDrvIntService+0x30>)

    //
    // Send an event to get processed in the HCI handler.
    //
    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
    c62e:	4907      	ldr	r1, [pc, #28]	; (c64c <HciDrvIntService+0x34>)
    g_ui32InterruptsSeen++;
    c630:	6813      	ldr	r3, [r2, #0]
    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
    c632:	7808      	ldrb	r0, [r1, #0]
    g_ui32InterruptsSeen++;
    c634:	3301      	adds	r3, #1

#if AM_DEBUG_BLE_TIMING
    am_hal_gpio_state_write(11, AM_HAL_GPIO_OUTPUT_CLEAR);
#endif

}
    c636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
    c63a:	2101      	movs	r1, #1
    g_ui32InterruptsSeen++;
    c63c:	6013      	str	r3, [r2, #0]
    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
    c63e:	f003 b9d9 	b.w	f9f4 <WsfSetEvent>
    c642:	bf00      	nop
    c644:	10003de8 	.word	0x10003de8
    c648:	10004754 	.word	0x10004754
    c64c:	10003df2 	.word	0x10003df2

0000c650 <HciDrvHandler>:
// correct order.
//
//*****************************************************************************
void
HciDrvHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
    c650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // handle this command without issue. If it doesn't acknowledge the
    // command, we will eventually get an HCI command timeout error, which will
    // alert us to the fact that the BLE core has become unresponsive in
    // general.
    //
    if (pMsg->event == BLE_HEARTBEAT_EVENT)
    c654:	788b      	ldrb	r3, [r1, #2]
    c656:	2b02      	cmp	r3, #2
{
    c658:	b083      	sub	sp, #12
    if (pMsg->event == BLE_HEARTBEAT_EVENT)
    c65a:	f000 80c3 	beq.w	c7e4 <HciDrvHandler+0x194>

    //
    // Check to see if we read any bytes over the HCI interface that we haven't
    // already sent to the BLE stack.
    //
    if (g_ui32NumBytes > g_consumed_bytes)
    c65e:	4b98      	ldr	r3, [pc, #608]	; (c8c0 <HciDrvHandler+0x270>)
    c660:	4a98      	ldr	r2, [pc, #608]	; (c8c4 <HciDrvHandler+0x274>)
    c662:	681b      	ldr	r3, [r3, #0]
    c664:	6812      	ldr	r2, [r2, #0]
    c666:	4293      	cmp	r3, r2
    c668:	f200 809f 	bhi.w	c7aa <HciDrvHandler+0x15a>
    c66c:	2300      	movs	r3, #0
    while (ui32NumHciTransactions++ < HCI_DRV_MAX_HCI_TRANSACTIONS)
    {
        //
        // Figure out what kind of transfer the BLE core will accept.
        //
        if ( BLE_IRQ_CHECK() )
    c66e:	4c96      	ldr	r4, [pc, #600]	; (c8c8 <HciDrvHandler+0x278>)
                // from the queue and send it.
                //
                am_hal_debug_gpio_set(BLE_DEBUG_TRACE_07);
                hci_drv_write_t *psWriteBuffer = am_hal_queue_peek(&g_sWriteQueue);

                ui32ErrorStatus = am_hal_ble_blocking_hci_write(BLE,
    c670:	f8df 928c 	ldr.w	r9, [pc, #652]	; c900 <HciDrvHandler+0x2b0>
    c674:	9300      	str	r3, [sp, #0]
    c676:	2601      	movs	r6, #1
    c678:	461d      	mov	r5, r3
    c67a:	e00a      	b.n	c692 <HciDrvHandler+0x42>
                {
                    //
                    // If we fail too many times in a row, we should throw an
                    // error to avoid a lock-up.
                    //
                    ui32TxRetries++;
    c67c:	3501      	adds	r5, #1

                    if (ui32TxRetries > HCI_DRV_MAX_TX_RETRIES)
    c67e:	f242 7310 	movw	r3, #10000	; 0x2710
    c682:	429d      	cmp	r5, r3
    c684:	d87a      	bhi.n	c77c <HciDrvHandler+0x12c>
    c686:	46b2      	mov	sl, r6
    while (ui32NumHciTransactions++ < HCI_DRV_MAX_HCI_TRANSACTIONS)
    c688:	f5ba 7f7a 	cmp.w	sl, #1000	; 0x3e8
    c68c:	f106 0601 	add.w	r6, r6, #1
    c690:	d279      	bcs.n	c786 <HciDrvHandler+0x136>
        if ( BLE_IRQ_CHECK() )
    c692:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
    c696:	0619      	lsls	r1, r3, #24
    c698:	f100 8084 	bmi.w	c7a4 <HciDrvHandler+0x154>
    c69c:	4f8b      	ldr	r7, [pc, #556]	; (c8cc <HciDrvHandler+0x27c>)
                    BLE_HEARTBEAT_RESTART();
    c69e:	f8df 8234 	ldr.w	r8, [pc, #564]	; c8d4 <HciDrvHandler+0x284>
            if (am_hal_queue_empty(&g_sWriteQueue))
    c6a2:	68bb      	ldr	r3, [r7, #8]
                ui32ErrorStatus = am_hal_ble_blocking_hci_write(BLE,
    c6a4:	2100      	movs	r1, #0
            if (am_hal_queue_empty(&g_sWriteQueue))
    c6a6:	2b00      	cmp	r3, #0
    c6a8:	d06d      	beq.n	c786 <HciDrvHandler+0x136>
                hci_drv_write_t *psWriteBuffer = am_hal_queue_peek(&g_sWriteQueue);
    c6aa:	697a      	ldr	r2, [r7, #20]
    c6ac:	687b      	ldr	r3, [r7, #4]
                ui32ErrorStatus = am_hal_ble_blocking_hci_write(BLE,
    c6ae:	f8d9 0000 	ldr.w	r0, [r9]
                hci_drv_write_t *psWriteBuffer = am_hal_queue_peek(&g_sWriteQueue);
    c6b2:	eb02 0c03 	add.w	ip, r2, r3
                ui32ErrorStatus = am_hal_ble_blocking_hci_write(BLE,
    c6b6:	58d3      	ldr	r3, [r2, r3]
    c6b8:	f10c 0204 	add.w	r2, ip, #4
    c6bc:	f011 f916 	bl	1d8ec <am_hal_ble_blocking_hci_write>
    c6c0:	46cb      	mov	fp, r9
                if (ui32ErrorStatus == AM_HAL_STATUS_SUCCESS)
    c6c2:	4682      	mov	sl, r0
    c6c4:	2800      	cmp	r0, #0
    c6c6:	d1d9      	bne.n	c67c <HciDrvHandler+0x2c>
                    BLE_HEARTBEAT_RESTART();
    c6c8:	4640      	mov	r0, r8
    c6ca:	f003 fc1d 	bl	ff08 <WsfTimerStop>
    c6ce:	4640      	mov	r0, r8
    c6d0:	f242 7110 	movw	r1, #10000	; 0x2710
    c6d4:	f003 fbd4 	bl	fe80 <WsfTimerStartMs>
                    am_hal_queue_item_get(&g_sWriteQueue, 0, 1);
    c6d8:	2201      	movs	r2, #1
    c6da:	4651      	mov	r1, sl
    c6dc:	4638      	mov	r0, r7
    c6de:	f012 fbc9 	bl	1ee74 <am_hal_queue_item_get>
        if ( BLE_IRQ_CHECK() )
    c6e2:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
    c6e6:	0618      	lsls	r0, r3, #24
    while (ui32NumHciTransactions++ < HCI_DRV_MAX_HCI_TRANSACTIONS)
    c6e8:	f04f 0601 	mov.w	r6, #1
        if ( BLE_IRQ_CHECK() )
    c6ec:	f3c3 15c0 	ubfx	r5, r3, #7, #1
    c6f0:	d5d7      	bpl.n	c6a2 <HciDrvHandler+0x52>
                    ui32TxRetries = 0;
    c6f2:	4655      	mov	r5, sl
    while (ui32NumHciTransactions++ < HCI_DRV_MAX_HCI_TRANSACTIONS)
    c6f4:	46b2      	mov	sl, r6
            uint32_t ui32OldInterruptsSeen = g_ui32InterruptsSeen;
    c6f6:	4b76      	ldr	r3, [pc, #472]	; (c8d0 <HciDrvHandler+0x280>)
            BLE_HEARTBEAT_RESTART();
    c6f8:	4876      	ldr	r0, [pc, #472]	; (c8d4 <HciDrvHandler+0x284>)
            uint32_t ui32OldInterruptsSeen = g_ui32InterruptsSeen;
    c6fa:	f8d3 8000 	ldr.w	r8, [r3]
            BLE_HEARTBEAT_RESTART();
    c6fe:	f003 fc03 	bl	ff08 <WsfTimerStop>
    c702:	4874      	ldr	r0, [pc, #464]	; (c8d4 <HciDrvHandler+0x284>)
    c704:	f242 7110 	movw	r1, #10000	; 0x2710
    c708:	f003 fbba 	bl	fe80 <WsfTimerStartMs>
            ui32ErrorStatus = am_hal_ble_blocking_hci_read(BLE, (uint32_t*)g_pui32ReadBuffer, &g_ui32NumBytes);
    c70c:	4a6c      	ldr	r2, [pc, #432]	; (c8c0 <HciDrvHandler+0x270>)
    c70e:	4972      	ldr	r1, [pc, #456]	; (c8d8 <HciDrvHandler+0x288>)
    c710:	f8db 0000 	ldr.w	r0, [fp]
            g_ui32NumBytes = 0;
    c714:	4617      	mov	r7, r2
    c716:	2300      	movs	r3, #0
    c718:	6013      	str	r3, [r2, #0]
            ui32ErrorStatus = am_hal_ble_blocking_hci_read(BLE, (uint32_t*)g_pui32ReadBuffer, &g_ui32NumBytes);
    c71a:	f011 f911 	bl	1d940 <am_hal_ble_blocking_hci_read>
            if (g_ui32NumBytes > HCI_DRV_MAX_RX_PACKET)
    c71e:	683a      	ldr	r2, [r7, #0]
    c720:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
            ui32ErrorStatus = am_hal_ble_blocking_hci_read(BLE, (uint32_t*)g_pui32ReadBuffer, &g_ui32NumBytes);
    c724:	4603      	mov	r3, r0
            if (g_ui32NumBytes > HCI_DRV_MAX_RX_PACKET)
    c726:	d834      	bhi.n	c792 <HciDrvHandler+0x142>
            if ( ui32ErrorStatus == AM_HAL_STATUS_SUCCESS)
    c728:	2b00      	cmp	r3, #0
    c72a:	f040 80a3 	bne.w	c874 <HciDrvHandler+0x224>
    c72e:	f44f 6bfa 	mov.w	fp, #2000	; 0x7d0
    c732:	e008      	b.n	c746 <HciDrvHandler+0xf6>
                    if (BLE_IRQ_CHECK() == 0 || g_ui32InterruptsSeen != ui32OldInterruptsSeen)
    c734:	4b66      	ldr	r3, [pc, #408]	; (c8d0 <HciDrvHandler+0x280>)
    c736:	681b      	ldr	r3, [r3, #0]
    c738:	4543      	cmp	r3, r8
    c73a:	d10a      	bne.n	c752 <HciDrvHandler+0x102>
                    am_util_delay_us(1);
    c73c:	f00f faf0 	bl	1bd20 <am_util_delay_us>
                for (ui32IRQRetries = 0; ui32IRQRetries < HCI_DRV_MAX_IRQ_TIMEOUT; ui32IRQRetries++)
    c740:	f1bb 0b01 	subs.w	fp, fp, #1
    c744:	d005      	beq.n	c752 <HciDrvHandler+0x102>
                    if (BLE_IRQ_CHECK() == 0 || g_ui32InterruptsSeen != ui32OldInterruptsSeen)
    c746:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
    c74a:	061b      	lsls	r3, r3, #24
                    am_util_delay_us(1);
    c74c:	f04f 0001 	mov.w	r0, #1
                    if (BLE_IRQ_CHECK() == 0 || g_ui32InterruptsSeen != ui32OldInterruptsSeen)
    c750:	d4f0      	bmi.n	c734 <HciDrvHandler+0xe4>
                g_consumed_bytes = hciTrSerialRxIncoming(g_pui8ReadBuffer, g_ui32NumBytes);
    c752:	4b62      	ldr	r3, [pc, #392]	; (c8dc <HciDrvHandler+0x28c>)
    c754:	4f5a      	ldr	r7, [pc, #360]	; (c8c0 <HciDrvHandler+0x270>)
    c756:	6818      	ldr	r0, [r3, #0]
    c758:	8839      	ldrh	r1, [r7, #0]
    c75a:	f002 ff4b 	bl	f5f4 <hciTrSerialRxIncoming>
                if (g_consumed_bytes != g_ui32NumBytes)
    c75e:	683b      	ldr	r3, [r7, #0]
                g_consumed_bytes = hciTrSerialRxIncoming(g_pui8ReadBuffer, g_ui32NumBytes);
    c760:	4a58      	ldr	r2, [pc, #352]	; (c8c4 <HciDrvHandler+0x274>)
                if (g_consumed_bytes != g_ui32NumBytes)
    c762:	4298      	cmp	r0, r3
                g_consumed_bytes = hciTrSerialRxIncoming(g_pui8ReadBuffer, g_ui32NumBytes);
    c764:	6010      	str	r0, [r2, #0]
                if (g_consumed_bytes != g_ui32NumBytes)
    c766:	d109      	bne.n	c77c <HciDrvHandler+0x12c>
                read_hci_packet_count++;
    c768:	9a00      	ldr	r2, [sp, #0]
                g_ui32NumBytes   = 0;
    c76a:	4955      	ldr	r1, [pc, #340]	; (c8c0 <HciDrvHandler+0x270>)
    c76c:	2300      	movs	r3, #0
                read_hci_packet_count++;
    c76e:	3201      	adds	r2, #1
                g_ui32NumBytes   = 0;
    c770:	600b      	str	r3, [r1, #0]
                g_consumed_bytes = 0;
    c772:	4954      	ldr	r1, [pc, #336]	; (c8c4 <HciDrvHandler+0x274>)
                read_hci_packet_count++;
    c774:	9200      	str	r2, [sp, #0]
            if (read_hci_packet_count >= HCI_DRV_MAX_READ_PACKET)
    c776:	2a03      	cmp	r2, #3
                g_consumed_bytes = 0;
    c778:	600b      	str	r3, [r1, #0]
            if (read_hci_packet_count >= HCI_DRV_MAX_READ_PACKET)
    c77a:	d985      	bls.n	c688 <HciDrvHandler+0x38>
                    {
                        // we need to come back again later.
                        WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
    c77c:	4b58      	ldr	r3, [pc, #352]	; (c8e0 <HciDrvHandler+0x290>)
    c77e:	2101      	movs	r1, #1
    c780:	7818      	ldrb	r0, [r3, #0]
    c782:	f003 f937 	bl	f9f4 <WsfSetEvent>

            }
        }
    }

    if (ui32NumHciTransactions == HCI_DRV_MAX_HCI_TRANSACTIONS)
    c786:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
    c78a:	d035      	beq.n	c7f8 <HciDrvHandler+0x1a8>
        CRITICAL_PRINT("ERROR: Maximum number of successive HCI transactions exceeded.\n");
        ERROR_RECOVER(HCI_DRV_TOO_MANY_PACKETS);
    }

    am_hal_debug_gpio_clear(BLE_DEBUG_TRACE_01);
}
    c78c:	b003      	add	sp, #12
    c78e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (g_hciDrvErrorHandler)
    c792:	4a54      	ldr	r2, [pc, #336]	; (c8e4 <HciDrvHandler+0x294>)
    c794:	6812      	ldr	r2, [r2, #0]
    c796:	2a00      	cmp	r2, #0
    c798:	d0c6      	beq.n	c728 <HciDrvHandler+0xd8>
    c79a:	9001      	str	r0, [sp, #4]
            g_hciDrvErrorHandler(g_ui32FailingStatus);
    c79c:	4852      	ldr	r0, [pc, #328]	; (c8e8 <HciDrvHandler+0x298>)
    c79e:	4790      	blx	r2
    c7a0:	9b01      	ldr	r3, [sp, #4]
    c7a2:	e7c1      	b.n	c728 <HciDrvHandler+0xd8>
        if ( BLE_IRQ_CHECK() )
    c7a4:	46b2      	mov	sl, r6
    c7a6:	46cb      	mov	fp, r9
    c7a8:	e7a5      	b.n	c6f6 <HciDrvHandler+0xa6>
        g_consumed_bytes += hciTrSerialRxIncoming(g_pui8ReadBuffer + g_consumed_bytes,
    c7aa:	494c      	ldr	r1, [pc, #304]	; (c8dc <HciDrvHandler+0x28c>)
    c7ac:	6808      	ldr	r0, [r1, #0]
    c7ae:	1a9b      	subs	r3, r3, r2
    c7b0:	b299      	uxth	r1, r3
    c7b2:	4410      	add	r0, r2
    c7b4:	f002 ff1e 	bl	f5f4 <hciTrSerialRxIncoming>
    c7b8:	4942      	ldr	r1, [pc, #264]	; (c8c4 <HciDrvHandler+0x274>)
        if (g_consumed_bytes != g_ui32NumBytes)
    c7ba:	4b41      	ldr	r3, [pc, #260]	; (c8c0 <HciDrvHandler+0x270>)
        g_consumed_bytes += hciTrSerialRxIncoming(g_pui8ReadBuffer + g_consumed_bytes,
    c7bc:	680a      	ldr	r2, [r1, #0]
        if (g_consumed_bytes != g_ui32NumBytes)
    c7be:	681b      	ldr	r3, [r3, #0]
        g_consumed_bytes += hciTrSerialRxIncoming(g_pui8ReadBuffer + g_consumed_bytes,
    c7c0:	4410      	add	r0, r2
        if (g_consumed_bytes != g_ui32NumBytes)
    c7c2:	4298      	cmp	r0, r3
        g_consumed_bytes += hciTrSerialRxIncoming(g_pui8ReadBuffer + g_consumed_bytes,
    c7c4:	6008      	str	r0, [r1, #0]
        if (g_consumed_bytes != g_ui32NumBytes)
    c7c6:	d105      	bne.n	c7d4 <HciDrvHandler+0x184>
            g_ui32NumBytes   = 0;
    c7c8:	4a3d      	ldr	r2, [pc, #244]	; (c8c0 <HciDrvHandler+0x270>)
    c7ca:	2300      	movs	r3, #0
    c7cc:	6013      	str	r3, [r2, #0]
            g_consumed_bytes = 0;
    c7ce:	4a3d      	ldr	r2, [pc, #244]	; (c8c4 <HciDrvHandler+0x274>)
    c7d0:	6013      	str	r3, [r2, #0]
    while (ui32NumHciTransactions++ < HCI_DRV_MAX_HCI_TRANSACTIONS)
    c7d2:	e74b      	b.n	c66c <HciDrvHandler+0x1c>
            WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
    c7d4:	4b42      	ldr	r3, [pc, #264]	; (c8e0 <HciDrvHandler+0x290>)
    c7d6:	7818      	ldrb	r0, [r3, #0]
    c7d8:	2101      	movs	r1, #1
}
    c7da:	b003      	add	sp, #12
    c7dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
    c7e0:	f003 b908 	b.w	f9f4 <WsfSetEvent>
        HciReadLocalVerInfoCmd();
    c7e4:	f000 ff80 	bl	d6e8 <HciReadLocalVerInfoCmd>
        BLE_HEARTBEAT_START();
    c7e8:	483a      	ldr	r0, [pc, #232]	; (c8d4 <HciDrvHandler+0x284>)
    c7ea:	f242 7110 	movw	r1, #10000	; 0x2710
}
    c7ee:	b003      	add	sp, #12
    c7f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        BLE_HEARTBEAT_START();
    c7f4:	f003 bb44 	b.w	fe80 <WsfTimerStartMs>
        if (g_hciDrvErrorHandler)
    c7f8:	4b3a      	ldr	r3, [pc, #232]	; (c8e4 <HciDrvHandler+0x294>)
    c7fa:	681b      	ldr	r3, [r3, #0]
    c7fc:	b10b      	cbz	r3, c802 <HciDrvHandler+0x1b2>
            g_hciDrvErrorHandler(g_ui32FailingStatus);
    c7fe:	483b      	ldr	r0, [pc, #236]	; (c8ec <HciDrvHandler+0x29c>)
    c800:	4798      	blx	r3
    BLE_HEARTBEAT_STOP();
    c802:	4834      	ldr	r0, [pc, #208]	; (c8d4 <HciDrvHandler+0x284>)
    c804:	f003 fb80 	bl	ff08 <WsfTimerStop>
    c808:	4b39      	ldr	r3, [pc, #228]	; (c8f0 <HciDrvHandler+0x2a0>)
    c80a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    c80e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    c812:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c816:	f3bf 8f6f 	isb	sy
    am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF);
    c81a:	f8df b0e4 	ldr.w	fp, [pc, #228]	; c900 <HciDrvHandler+0x2b0>
    WHILE_TIMEOUT_MS_BREAK(PWRCTRL->DEVPWREN_b.PWRBLEL, 1000, 0);
    c81e:	4d35      	ldr	r5, [pc, #212]	; (c8f4 <HciDrvHandler+0x2a4>)
    am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF);
    c820:	f8db 0000 	ldr.w	r0, [fp]
    c824:	2101      	movs	r1, #1
    c826:	f010 fd19 	bl	1d25c <am_hal_ble_power_control>
    WHILE_TIMEOUT_MS_BREAK(PWRCTRL->DEVPWREN_b.PWRBLEL, 1000, 0);
    c82a:	68ab      	ldr	r3, [r5, #8]
    c82c:	049a      	lsls	r2, r3, #18
    c82e:	d509      	bpl.n	c844 <HciDrvHandler+0x1f4>
    c830:	4c31      	ldr	r4, [pc, #196]	; (c8f8 <HciDrvHandler+0x2a8>)
    c832:	e001      	b.n	c838 <HciDrvHandler+0x1e8>
    c834:	3c01      	subs	r4, #1
    c836:	d005      	beq.n	c844 <HciDrvHandler+0x1f4>
    c838:	2010      	movs	r0, #16
    c83a:	f011 feeb 	bl	1e614 <am_hal_flash_delay>
    c83e:	68ab      	ldr	r3, [r5, #8]
    c840:	049b      	lsls	r3, r3, #18
    c842:	d4f7      	bmi.n	c834 <HciDrvHandler+0x1e4>
    am_hal_ble_deinitialize(BLE);
    c844:	f8db 0000 	ldr.w	r0, [fp]
    c848:	f010 fc5c 	bl	1d104 <am_hal_ble_deinitialize>
    g_ui32NumBytes   = 0;
    c84c:	4b1c      	ldr	r3, [pc, #112]	; (c8c0 <HciDrvHandler+0x270>)
    c84e:	2000      	movs	r0, #0
    c850:	6018      	str	r0, [r3, #0]
    g_consumed_bytes = 0;
    c852:	4b1c      	ldr	r3, [pc, #112]	; (c8c4 <HciDrvHandler+0x274>)
    c854:	6018      	str	r0, [r3, #0]
        ERROR_RECOVER(HCI_DRV_TOO_MANY_PACKETS);
    c856:	f7ff fd3d 	bl	c2d4 <HciDrvRadioBoot>
//
//*****************************************************************************
void
HciDrvEmptyWriteQueue(void)
{
    am_hal_queue_from_array(&g_sWriteQueue, g_psWriteBuffers);
    c85a:	4928      	ldr	r1, [pc, #160]	; (c8fc <HciDrvHandler+0x2ac>)
    c85c:	481b      	ldr	r0, [pc, #108]	; (c8cc <HciDrvHandler+0x27c>)
    c85e:	f44f 6302 	mov.w	r3, #2080	; 0x820
    c862:	f44f 7282 	mov.w	r2, #260	; 0x104
    c866:	f012 fabb 	bl	1ede0 <am_hal_queue_init>
}
    c86a:	b003      	add	sp, #12
    c86c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        ERROR_RECOVER(HCI_DRV_TOO_MANY_PACKETS);
    c870:	f00d b8d8 	b.w	19a24 <DmDevReset>
        if (g_hciDrvErrorHandler)
    c874:	4a1b      	ldr	r2, [pc, #108]	; (c8e4 <HciDrvHandler+0x294>)
    c876:	6812      	ldr	r2, [r2, #0]
    c878:	b10a      	cbz	r2, c87e <HciDrvHandler+0x22e>
            g_hciDrvErrorHandler(g_ui32FailingStatus);
    c87a:	4618      	mov	r0, r3
    c87c:	4790      	blx	r2
    BLE_HEARTBEAT_STOP();
    c87e:	4815      	ldr	r0, [pc, #84]	; (c8d4 <HciDrvHandler+0x284>)
    c880:	f003 fb42 	bl	ff08 <WsfTimerStop>
    c884:	4b1a      	ldr	r3, [pc, #104]	; (c8f0 <HciDrvHandler+0x2a0>)
    c886:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    c88a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    c88e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c892:	f3bf 8f6f 	isb	sy
    WHILE_TIMEOUT_MS_BREAK(PWRCTRL->DEVPWREN_b.PWRBLEL, 1000, 0);
    c896:	4d17      	ldr	r5, [pc, #92]	; (c8f4 <HciDrvHandler+0x2a4>)
    am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF);
    c898:	f8db 0000 	ldr.w	r0, [fp]
    c89c:	2101      	movs	r1, #1
    c89e:	f010 fcdd 	bl	1d25c <am_hal_ble_power_control>
    WHILE_TIMEOUT_MS_BREAK(PWRCTRL->DEVPWREN_b.PWRBLEL, 1000, 0);
    c8a2:	68ab      	ldr	r3, [r5, #8]
    c8a4:	049f      	lsls	r7, r3, #18
    c8a6:	d5cd      	bpl.n	c844 <HciDrvHandler+0x1f4>
    c8a8:	4c13      	ldr	r4, [pc, #76]	; (c8f8 <HciDrvHandler+0x2a8>)
    c8aa:	e001      	b.n	c8b0 <HciDrvHandler+0x260>
    c8ac:	3c01      	subs	r4, #1
    c8ae:	d0c9      	beq.n	c844 <HciDrvHandler+0x1f4>
    c8b0:	2010      	movs	r0, #16
    c8b2:	f011 feaf 	bl	1e614 <am_hal_flash_delay>
    c8b6:	68ab      	ldr	r3, [r5, #8]
    c8b8:	049e      	lsls	r6, r3, #18
    c8ba:	d4f7      	bmi.n	c8ac <HciDrvHandler+0x25c>
    c8bc:	e7c2      	b.n	c844 <HciDrvHandler+0x1f4>
    c8be:	bf00      	nop
    c8c0:	10004758 	.word	0x10004758
    c8c4:	10003e14 	.word	0x10003e14
    c8c8:	5000c000 	.word	0x5000c000
    c8cc:	1000473c 	.word	0x1000473c
    c8d0:	10004754 	.word	0x10004754
    c8d4:	10003df4 	.word	0x10003df4
    c8d8:	1000463c 	.word	0x1000463c
    c8dc:	10002b00 	.word	0x10002b00
    c8e0:	10003df2 	.word	0x10003df2
    c8e4:	10003e18 	.word	0x10003e18
    c8e8:	09000002 	.word	0x09000002
    c8ec:	09000006 	.word	0x09000006
    c8f0:	e000e100 	.word	0xe000e100
    c8f4:	40021000 	.word	0x40021000
    c8f8:	000f4240 	.word	0x000f4240
    c8fc:	10003e1c 	.word	0x10003e1c
    c900:	10003de8 	.word	0x10003de8

0000c904 <HciVscSetRfPowerLevelEx>:
    if(txPowerlevel < TX_POWER_LEVEL_MAX_VAL)
    c904:	2802      	cmp	r0, #2
    c906:	d901      	bls.n	c90c <HciVscSetRfPowerLevelEx+0x8>
        return false;
    c908:	2000      	movs	r0, #0
}
    c90a:	4770      	bx	lr
{
    c90c:	b508      	push	{r3, lr}
        am_hal_ble_tx_power_set(BLE, (uint8_t)ui8TxPowerRegValues[txPowerlevel]);
    c90e:	4a04      	ldr	r2, [pc, #16]	; (c920 <HciVscSetRfPowerLevelEx+0x1c>)
    c910:	4b04      	ldr	r3, [pc, #16]	; (c924 <HciVscSetRfPowerLevelEx+0x20>)
    c912:	5c11      	ldrb	r1, [r2, r0]
    c914:	6818      	ldr	r0, [r3, #0]
    c916:	f011 fb8d 	bl	1e034 <am_hal_ble_tx_power_set>
        return true;
    c91a:	2001      	movs	r0, #1
}
    c91c:	bd08      	pop	{r3, pc}
    c91e:	bf00      	nop
    c920:	0001f3a8 	.word	0x0001f3a8
    c924:	10003de8 	.word	0x10003de8

0000c928 <HciVscUpdateBDAddress>:
    HciVendorSpecificCmd(0xFC32, 6, g_BLEMacAddress);
    c928:	4a02      	ldr	r2, [pc, #8]	; (c934 <HciVscUpdateBDAddress+0xc>)
    c92a:	2106      	movs	r1, #6
    c92c:	f64f 4032 	movw	r0, #64562	; 0xfc32
    c930:	f001 b9fa 	b.w	dd28 <HciVendorSpecificCmd>
    c934:	10003dec 	.word	0x10003dec

0000c938 <hciCoreResetStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreResetStart(void)
{
    c938:	b508      	push	{r3, lr}
  /* send an HCI Reset command to start the sequence */
  HciResetCmd();
    c93a:	f000 ff3b 	bl	d7b4 <HciResetCmd>

  // update Bluetooth Address to controller
  HciVscUpdateBDAddress();        

}
    c93e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HciVscUpdateBDAddress();        
    c942:	f7ff bff1 	b.w	c928 <HciVscUpdateBDAddress>
    c946:	bf00      	nop

0000c948 <hciCoreResetSequence>:
  uint16_t       opcode;
  wsfMsgHdr_t    hdr;
  static uint8_t randCnt;

  /* if event is a command complete event */
  if (*pMsg == HCI_CMD_CMPL_EVT)
    c948:	7803      	ldrb	r3, [r0, #0]
    c94a:	2b0e      	cmp	r3, #14
    c94c:	d000      	beq.n	c950 <hciCoreResetSequence+0x8>
    c94e:	4770      	bx	lr
  {
    /* parse parameters */
    pMsg += HCI_EVT_HDR_LEN;
    pMsg++;                   /* skip num packets */
    BSTREAM_TO_UINT16(opcode, pMsg);
    c950:	7902      	ldrb	r2, [r0, #4]
    c952:	78c1      	ldrb	r1, [r0, #3]
    c954:	eb01 2102 	add.w	r1, r1, r2, lsl #8
    pMsg++;                   /* skip status */

    /* decode opcode */
    switch (opcode)
    c958:	f242 034a 	movw	r3, #8266	; 0x204a
    BSTREAM_TO_UINT16(opcode, pMsg);
    c95c:	b289      	uxth	r1, r1
    switch (opcode)
    c95e:	4299      	cmp	r1, r3
    pMsg++;                   /* skip status */
    c960:	f100 0206 	add.w	r2, r0, #6
    switch (opcode)
    c964:	d8f3      	bhi.n	c94e <hciCoreResetSequence+0x6>
{
    c966:	b500      	push	{lr}
    switch (opcode)
    c968:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
{
    c96c:	b083      	sub	sp, #12
    switch (opcode)
    c96e:	d962      	bls.n	ca36 <hciCoreResetSequence+0xee>
    c970:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
    c974:	3b01      	subs	r3, #1
    c976:	2b49      	cmp	r3, #73	; 0x49
    c978:	d85a      	bhi.n	ca30 <hciCoreResetSequence+0xe8>
    c97a:	e8df f013 	tbh	[pc, r3, lsl #1]
    c97e:	0094      	.short	0x0094
    c980:	00db009a 	.word	0x00db009a
    c984:	00590059 	.word	0x00590059
    c988:	00590059 	.word	0x00590059
    c98c:	00590059 	.word	0x00590059
    c990:	00590059 	.word	0x00590059
    c994:	00590059 	.word	0x00590059
    c998:	00ed0059 	.word	0x00ed0059
    c99c:	00590059 	.word	0x00590059
    c9a0:	00590059 	.word	0x00590059
    c9a4:	00590059 	.word	0x00590059
    c9a8:	00590059 	.word	0x00590059
    c9ac:	0059004a 	.word	0x0059004a
    c9b0:	00590059 	.word	0x00590059
    c9b4:	005900f6 	.word	0x005900f6
    c9b8:	00590059 	.word	0x00590059
    c9bc:	00590059 	.word	0x00590059
    c9c0:	00590059 	.word	0x00590059
    c9c4:	005900c3 	.word	0x005900c3
    c9c8:	00590059 	.word	0x00590059
    c9cc:	00590059 	.word	0x00590059
    c9d0:	005900cb 	.word	0x005900cb
    c9d4:	00590059 	.word	0x00590059
    c9d8:	00b40059 	.word	0x00b40059
    c9dc:	00590059 	.word	0x00590059
    c9e0:	00590059 	.word	0x00590059
    c9e4:	00590059 	.word	0x00590059
    c9e8:	00590059 	.word	0x00590059
    c9ec:	00590059 	.word	0x00590059
    c9f0:	008a008a 	.word	0x008a008a
    c9f4:	00590059 	.word	0x00590059
    c9f8:	00590059 	.word	0x00590059
    c9fc:	00590059 	.word	0x00590059
    ca00:	00590059 	.word	0x00590059
    ca04:	00590059 	.word	0x00590059
    ca08:	00590059 	.word	0x00590059
    ca0c:	00590059 	.word	0x00590059
    ca10:	008a      	.short	0x008a
        }
        break;

      case HCI_OPCODE_LE_RAND:
        /* check if need to send second rand command */
        if (randCnt < (HCI_RESET_RAND_CNT-1))
    ca12:	4a66      	ldr	r2, [pc, #408]	; (cbac <hciCoreResetSequence+0x264>)
    ca14:	7813      	ldrb	r3, [r2, #0]
    ca16:	2b02      	cmp	r3, #2
    ca18:	f240 80bb 	bls.w	cb92 <hciCoreResetSequence+0x24a>
          HciLeRandCmd();
        }
        else
        {
          /* last command in sequence; set resetting state and call callback */
          hciCb.resetting = FALSE;
    ca1c:	4a64      	ldr	r2, [pc, #400]	; (cbb0 <hciCoreResetSequence+0x268>)
    ca1e:	2300      	movs	r3, #0
          hdr.param = 0;
          hdr.event = HCI_RESET_SEQ_CMPL_CBACK_EVT;
          (*hciCb.evtCback)((hciEvt_t *) &hdr);
    ca20:	6891      	ldr	r1, [r2, #8]
          hciCb.resetting = FALSE;
    ca22:	7653      	strb	r3, [r2, #25]
          hdr.param = 0;
    ca24:	f8ad 3004 	strh.w	r3, [sp, #4]
          hdr.event = HCI_RESET_SEQ_CMPL_CBACK_EVT;
    ca28:	f88d 3006 	strb.w	r3, [sp, #6]
          (*hciCb.evtCback)((hciEvt_t *) &hdr);
    ca2c:	a801      	add	r0, sp, #4
    ca2e:	4788      	blx	r1

      default:
        break;
    }
  }
}
    ca30:	b003      	add	sp, #12
    ca32:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (opcode)
    ca36:	f640 4363 	movw	r3, #3171	; 0xc63
    ca3a:	4299      	cmp	r1, r3
    ca3c:	f000 809f 	beq.w	cb7e <hciCoreResetSequence+0x236>
    ca40:	d910      	bls.n	ca64 <hciCoreResetSequence+0x11c>
    ca42:	f241 0301 	movw	r3, #4097	; 0x1001
    ca46:	4299      	cmp	r1, r3
    ca48:	d023      	beq.n	ca92 <hciCoreResetSequence+0x14a>
    ca4a:	f241 0309 	movw	r3, #4105	; 0x1009
    ca4e:	4299      	cmp	r1, r3
    ca50:	d1ee      	bne.n	ca30 <hciCoreResetSequence+0xe8>
        BdaCpy(hciCoreCb.bdAddr, pMsg);
    ca52:	4858      	ldr	r0, [pc, #352]	; (cbb4 <hciCoreResetSequence+0x26c>)
    ca54:	4611      	mov	r1, r2
    ca56:	f006 fca1 	bl	1339c <BdaCpy>
}
    ca5a:	b003      	add	sp, #12
    ca5c:	f85d eb04 	ldr.w	lr, [sp], #4
        HciLeReadBufSizeCmd();
    ca60:	f000 bbba 	b.w	d1d8 <HciLeReadBufSizeCmd>
    switch (opcode)
    ca64:	f640 4301 	movw	r3, #3073	; 0xc01
    ca68:	4299      	cmp	r1, r3
    ca6a:	d00c      	beq.n	ca86 <hciCoreResetSequence+0x13e>
    ca6c:	f640 4303 	movw	r3, #3075	; 0xc03
    ca70:	4299      	cmp	r1, r3
    ca72:	d1dd      	bne.n	ca30 <hciCoreResetSequence+0xe8>
        randCnt = 0;
    ca74:	4b4d      	ldr	r3, [pc, #308]	; (cbac <hciCoreResetSequence+0x264>)
        HciSetEventMaskCmd((uint8_t *) hciEventMask);
    ca76:	4850      	ldr	r0, [pc, #320]	; (cbb8 <hciCoreResetSequence+0x270>)
        randCnt = 0;
    ca78:	2200      	movs	r2, #0
    ca7a:	701a      	strb	r2, [r3, #0]
}
    ca7c:	b003      	add	sp, #12
    ca7e:	f85d eb04 	ldr.w	lr, [sp], #4
        HciSetEventMaskCmd((uint8_t *) hciEventMask);
    ca82:	f000 bedf 	b.w	d844 <HciSetEventMaskCmd>
        HciLeSetEventMaskCmd((uint8_t *) hciLeEventMask);
    ca86:	484d      	ldr	r0, [pc, #308]	; (cbbc <hciCoreResetSequence+0x274>)
}
    ca88:	b003      	add	sp, #12
    ca8a:	f85d eb04 	ldr.w	lr, [sp], #4
        HciLeSetEventMaskCmd((uint8_t *) hciLeEventMask);
    ca8e:	f000 bd33 	b.w	d4f8 <HciLeSetEventMaskCmd>
        if (hciCoreCb.extResetSeq)
    ca92:	4b4b      	ldr	r3, [pc, #300]	; (cbc0 <hciCoreResetSequence+0x278>)
    ca94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    ca98:	2b00      	cmp	r3, #0
    ca9a:	d0c9      	beq.n	ca30 <hciCoreResetSequence+0xe8>
          (*hciCoreCb.extResetSeq)(pMsg, opcode);
    ca9c:	4610      	mov	r0, r2
}
    ca9e:	b003      	add	sp, #12
    caa0:	f85d eb04 	ldr.w	lr, [sp], #4
          (*hciCoreCb.extResetSeq)(pMsg, opcode);
    caa4:	4718      	bx	r3
        HciSetEventMaskPage2Cmd((uint8_t *) hciEventMaskPage2);
    caa6:	4847      	ldr	r0, [pc, #284]	; (cbc4 <hciCoreResetSequence+0x27c>)
}
    caa8:	b003      	add	sp, #12
    caaa:	f85d eb04 	ldr.w	lr, [sp], #4
        HciSetEventMaskPage2Cmd((uint8_t *) hciEventMaskPage2);
    caae:	f000 bf01 	b.w	d8b4 <HciSetEventMaskPage2Cmd>
        BSTREAM_TO_UINT16(hciCoreCb.bufSize, pMsg);
    cab2:	79c1      	ldrb	r1, [r0, #7]
    cab4:	7982      	ldrb	r2, [r0, #6]
    cab6:	4b42      	ldr	r3, [pc, #264]	; (cbc0 <hciCoreResetSequence+0x278>)
    cab8:	eb02 2201 	add.w	r2, r2, r1, lsl #8
    cabc:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        BSTREAM_TO_UINT8(hciCoreCb.numBufs, pMsg);
    cac0:	7a02      	ldrb	r2, [r0, #8]
        if (!APOLLO3_GE_B0)
    cac2:	4941      	ldr	r1, [pc, #260]	; (cbc8 <hciCoreResetSequence+0x280>)
        BSTREAM_TO_UINT8(hciCoreCb.numBufs, pMsg);
    cac4:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
        if (!APOLLO3_GE_B0)
    cac8:	68c9      	ldr	r1, [r1, #12]
    caca:	b2c9      	uxtb	r1, r1
    cacc:	2920      	cmp	r1, #32
    cace:	d803      	bhi.n	cad8 <hciCoreResetSequence+0x190>
          hciCoreCb.numBufs--;
    cad0:	3a01      	subs	r2, #1
    cad2:	b2d2      	uxtb	r2, r2
    cad4:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
        hciCoreCb.availBufs = hciCoreCb.numBufs;
    cad8:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
}
    cadc:	b003      	add	sp, #12
    cade:	f85d eb04 	ldr.w	lr, [sp], #4
        HciLeReadSupStatesCmd();
    cae2:	f000 bbd9 	b.w	d298 <HciLeReadSupStatesCmd>
          BSTREAM_TO_UINT16(maxTxTime, pMsg);
    cae6:	7a42      	ldrb	r2, [r0, #9]
    cae8:	7a01      	ldrb	r1, [r0, #8]
          BSTREAM_TO_UINT16(maxTxOctets, pMsg);
    caea:	79c3      	ldrb	r3, [r0, #7]
    caec:	7980      	ldrb	r0, [r0, #6]
          BSTREAM_TO_UINT16(maxTxTime, pMsg);
    caee:	eb01 2102 	add.w	r1, r1, r2, lsl #8
          BSTREAM_TO_UINT16(maxTxOctets, pMsg);
    caf2:	eb00 2003 	add.w	r0, r0, r3, lsl #8
          HciLeWriteDefDataLen(maxTxOctets, maxTxTime);
    caf6:	b289      	uxth	r1, r1
    caf8:	b280      	uxth	r0, r0
}
    cafa:	b003      	add	sp, #12
    cafc:	f85d eb04 	ldr.w	lr, [sp], #4
          HciLeWriteDefDataLen(maxTxOctets, maxTxTime);
    cb00:	f000 ba0a 	b.w	cf18 <HciLeWriteDefDataLen>
        if (hciCoreCb.extResetSeq)
    cb04:	492e      	ldr	r1, [pc, #184]	; (cbc0 <hciCoreResetSequence+0x278>)
    cb06:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
    cb0a:	2b00      	cmp	r3, #0
    cb0c:	d049      	beq.n	cba2 <hciCoreResetSequence+0x25a>
          (*hciCoreCb.extResetSeq)(pMsg, opcode);
    cb0e:	f242 0124 	movw	r1, #8228	; 0x2024
    cb12:	e7c3      	b.n	ca9c <hciCoreResetSequence+0x154>
        BSTREAM_TO_UINT8(hciCoreCb.resListSize, pMsg);
    cb14:	4b2a      	ldr	r3, [pc, #168]	; (cbc0 <hciCoreResetSequence+0x278>)
    cb16:	7981      	ldrb	r1, [r0, #6]
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_DATA_LEN_EXT) &&
    cb18:	6fda      	ldr	r2, [r3, #124]	; 0x7c
        BSTREAM_TO_UINT8(hciCoreCb.resListSize, pMsg);
    cb1a:	f883 1081 	strb.w	r1, [r3, #129]	; 0x81
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_DATA_LEN_EXT) &&
    cb1e:	0693      	lsls	r3, r2, #26
    cb20:	d503      	bpl.n	cb2a <hciCoreResetSequence+0x1e2>
      (hciLeSupFeatCfg & HCI_LE_SUP_FEAT_DATA_LEN_EXT))
    cb22:	4b2a      	ldr	r3, [pc, #168]	; (cbcc <hciCoreResetSequence+0x284>)
    cb24:	681b      	ldr	r3, [r3, #0]
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_DATA_LEN_EXT) &&
    cb26:	069a      	lsls	r2, r3, #26
    cb28:	d42e      	bmi.n	cb88 <hciCoreResetSequence+0x240>
}
    cb2a:	b003      	add	sp, #12
    cb2c:	f85d eb04 	ldr.w	lr, [sp], #4
          HciLeRandCmd();
    cb30:	f000 bb22 	b.w	d178 <HciLeRandCmd>
        BSTREAM_TO_UINT16(hciCoreCb.leSupFeat, pMsg);
    cb34:	79c1      	ldrb	r1, [r0, #7]
    cb36:	7982      	ldrb	r2, [r0, #6]
    cb38:	4b21      	ldr	r3, [pc, #132]	; (cbc0 <hciCoreResetSequence+0x278>)
    cb3a:	eb02 2201 	add.w	r2, r2, r1, lsl #8
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_PRIVACY) &&
    cb3e:	0651      	lsls	r1, r2, #25
        BSTREAM_TO_UINT16(hciCoreCb.leSupFeat, pMsg);
    cb40:	67da      	str	r2, [r3, #124]	; 0x7c
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_PRIVACY) &&
    cb42:	d503      	bpl.n	cb4c <hciCoreResetSequence+0x204>
      (hciLeSupFeatCfg & HCI_LE_SUP_FEAT_PRIVACY))
    cb44:	4921      	ldr	r1, [pc, #132]	; (cbcc <hciCoreResetSequence+0x284>)
    cb46:	6809      	ldr	r1, [r1, #0]
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_PRIVACY) &&
    cb48:	0648      	lsls	r0, r1, #25
    cb4a:	d425      	bmi.n	cb98 <hciCoreResetSequence+0x250>
    hciCoreCb.resListSize = 0;
    cb4c:	2100      	movs	r1, #0
    cb4e:	f883 1081 	strb.w	r1, [r3, #129]	; 0x81
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_DATA_LEN_EXT) &&
    cb52:	0691      	lsls	r1, r2, #26
    cb54:	d5e9      	bpl.n	cb2a <hciCoreResetSequence+0x1e2>
    cb56:	e7e4      	b.n	cb22 <hciCoreResetSequence+0x1da>
        BSTREAM_TO_UINT8(hciCoreCb.whiteListSize, pMsg);
    cb58:	4b19      	ldr	r3, [pc, #100]	; (cbc0 <hciCoreResetSequence+0x278>)
    cb5a:	7982      	ldrb	r2, [r0, #6]
    cb5c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
}
    cb60:	b003      	add	sp, #12
    cb62:	f85d eb04 	ldr.w	lr, [sp], #4
        HciLeReadLocalSupFeatCmd();
    cb66:	f000 bb67 	b.w	d238 <HciLeReadLocalSupFeatCmd>
        memcpy(hciCoreCb.leStates, pMsg, HCI_LE_STATES_LEN);
    cb6a:	f8d0 0006 	ldr.w	r0, [r0, #6]
    cb6e:	6851      	ldr	r1, [r2, #4]
    cb70:	4b17      	ldr	r3, [pc, #92]	; (cbd0 <hciCoreResetSequence+0x288>)
    cb72:	c303      	stmia	r3!, {r0, r1}
}
    cb74:	b003      	add	sp, #12
    cb76:	f85d eb04 	ldr.w	lr, [sp], #4
        HciLeReadWhiteListSizeCmd();
    cb7a:	f000 bbbd 	b.w	d2f8 <HciLeReadWhiteListSizeCmd>
}
    cb7e:	b003      	add	sp, #12
    cb80:	f85d eb04 	ldr.w	lr, [sp], #4
        HciReadBdAddrCmd();
    cb84:	f000 bd80 	b.w	d688 <HciReadBdAddrCmd>
}
    cb88:	b003      	add	sp, #12
    cb8a:	f85d eb04 	ldr.w	lr, [sp], #4
    HciLeReadMaxDataLen();
    cb8e:	f000 b9fd 	b.w	cf8c <HciLeReadMaxDataLen>
          randCnt++;
    cb92:	3301      	adds	r3, #1
    cb94:	7013      	strb	r3, [r2, #0]
    cb96:	e7c8      	b.n	cb2a <hciCoreResetSequence+0x1e2>
}
    cb98:	b003      	add	sp, #12
    cb9a:	f85d eb04 	ldr.w	lr, [sp], #4
    HciLeReadResolvingListSize();
    cb9e:	f000 bfbb 	b.w	db18 <HciLeReadResolvingListSize>
          hciCoreCb.maxAdvDataLen = 0;
    cba2:	f8a1 3082 	strh.w	r3, [r1, #130]	; 0x82
          hciCoreCb.numSupAdvSets = 0;
    cba6:	f8a1 3084 	strh.w	r3, [r1, #132]	; 0x84
          HciLeRandCmd();
    cbaa:	e7be      	b.n	cb2a <hciCoreResetSequence+0x1e2>
    cbac:	1000475c 	.word	0x1000475c
    cbb0:	10004a9c 	.word	0x10004a9c
    cbb4:	100047d8 	.word	0x100047d8
    cbb8:	0001f3ac 	.word	0x0001f3ac
    cbbc:	0001f3bc 	.word	0x0001f3bc
    cbc0:	1000477c 	.word	0x1000477c
    cbc4:	0001f3b4 	.word	0x0001f3b4
    cbc8:	40020000 	.word	0x40020000
    cbcc:	10002b04 	.word	0x10002b04
    cbd0:	100047d0 	.word	0x100047d0

0000cbd4 <hciCoreVsCmdCmplRcvd>:
 */
/*************************************************************************************************/
uint8_t hciCoreVsCmdCmplRcvd(uint16_t opcode, uint8_t *pMsg, uint8_t len)
{
  return HCI_VENDOR_SPEC_CMD_CMPL_CBACK_EVT;
}
    cbd4:	2012      	movs	r0, #18
    cbd6:	4770      	bx	lr

0000cbd8 <HciVsInit>:
 */
/*************************************************************************************************/
void HciVsInit(uint8_t param)
{

}
    cbd8:	4770      	bx	lr
    cbda:	bf00      	nop

0000cbdc <hciCmdInit>:
  /* initialize numCmdPkts for special case of first command */
  hciCmdCb.numCmdPkts = 1;

  /* initialize timer */
  hciCmdCb.cmdTimer.msg.event = HCI_MSG_CMD_TIMEOUT;
  hciCmdCb.cmdTimer.handlerId = hciCb.handlerId;
    cbdc:	4805      	ldr	r0, [pc, #20]	; (cbf4 <hciCmdInit+0x18>)
  WSF_QUEUE_INIT(&hciCmdCb.cmdQueue);
    cbde:	4b06      	ldr	r3, [pc, #24]	; (cbf8 <hciCmdInit+0x1c>)
  hciCmdCb.cmdTimer.handlerId = hciCb.handlerId;
    cbe0:	7e00      	ldrb	r0, [r0, #24]
    cbe2:	7318      	strb	r0, [r3, #12]
  hciCmdCb.numCmdPkts = 1;
    cbe4:	2201      	movs	r2, #1
  WSF_QUEUE_INIT(&hciCmdCb.cmdQueue);
    cbe6:	2100      	movs	r1, #0
    cbe8:	e9c3 1104 	strd	r1, r1, [r3, #16]
  hciCmdCb.numCmdPkts = 1;
    cbec:	769a      	strb	r2, [r3, #26]
  hciCmdCb.cmdTimer.msg.event = HCI_MSG_CMD_TIMEOUT;
    cbee:	729a      	strb	r2, [r3, #10]
}
    cbf0:	4770      	bx	lr
    cbf2:	bf00      	nop
    cbf4:	10004a9c 	.word	0x10004a9c
    cbf8:	10004760 	.word	0x10004760

0000cbfc <hciCmdTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdTimeout(wsfMsgHdr_t *pMsg)
{
    cbfc:	b508      	push	{r3, lr}
  HCI_TRACE_INFO1("hciCmdTimeout, opcode=0x%x", hciCmdCb.cmdOpcode);
  // When it times out, pretty much we have to
  // reset/reboot controller and initialize HCI
  // layer and SPI transport layer again.

  HciDrvRadioShutdown();
    cbfe:	f7ff fc5d 	bl	c4bc <HciDrvRadioShutdown>
  HciDrvRadioBoot(0);
    cc02:	2000      	movs	r0, #0
    cc04:	f7ff fb66 	bl	c2d4 <HciDrvRadioBoot>
  DmDevReset();
}
    cc08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  DmDevReset();
    cc0c:	f00c bf0a 	b.w	19a24 <DmDevReset>

0000cc10 <hciCmdRecvCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdRecvCmpl(uint8_t numCmdPkts)
{
    cc10:	b530      	push	{r4, r5, lr}
  /* stop the command timeout timer */
  WsfTimerStop(&hciCmdCb.cmdTimer);
    cc12:	4c10      	ldr	r4, [pc, #64]	; (cc54 <hciCmdRecvCmpl+0x44>)
{
    cc14:	b083      	sub	sp, #12
  WsfTimerStop(&hciCmdCb.cmdTimer);
    cc16:	4620      	mov	r0, r4
    cc18:	f003 f976 	bl	ff08 <WsfTimerStop>
  /*
   * Set the number of commands that can be sent to the controller.  Setting this
   * to 1 rather than incrementing by numCmdPkts allows only one command at a time to
   * be sent to the controller and simplifies the code.
   */
  hciCmdCb.numCmdPkts = 1;
    cc1c:	2301      	movs	r3, #1
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    cc1e:	f10d 0107 	add.w	r1, sp, #7
    cc22:	f104 0010 	add.w	r0, r4, #16
  hciCmdCb.numCmdPkts = 1;
    cc26:	76a3      	strb	r3, [r4, #26]
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    cc28:	f002 feb2 	bl	f990 <WsfMsgDeq>
    cc2c:	b178      	cbz	r0, cc4e <hciCmdRecvCmpl+0x3e>
      hciCmdCb.numCmdPkts--;
    cc2e:	7ea3      	ldrb	r3, [r4, #26]
    cc30:	3b01      	subs	r3, #1
    cc32:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    cc34:	7842      	ldrb	r2, [r0, #1]
    cc36:	7803      	ldrb	r3, [r0, #0]
    cc38:	4605      	mov	r5, r0
    cc3a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    cc3e:	4620      	mov	r0, r4
    cc40:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    cc42:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    cc44:	f003 f8da 	bl	fdfc <WsfTimerStartSec>
      hciTrSendCmd(p);
    cc48:	4628      	mov	r0, r5
    cc4a:	f002 fcc1 	bl	f5d0 <hciTrSendCmd>

  /* send the next queued command */
  hciCmdSend(NULL);
}
    cc4e:	b003      	add	sp, #12
    cc50:	bd30      	pop	{r4, r5, pc}
    cc52:	bf00      	nop
    cc54:	10004760 	.word	0x10004760

0000cc58 <HciDisconnectCmd>:
 *
 *  \brief  HCI disconnect command.
 */
/*************************************************************************************************/
void HciDisconnectCmd(uint16_t handle, uint8_t reason)
{
    cc58:	b570      	push	{r4, r5, r6, lr}
    cc5a:	4604      	mov	r4, r0
    cc5c:	b082      	sub	sp, #8
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    cc5e:	2006      	movs	r0, #6
{
    cc60:	460e      	mov	r6, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    cc62:	f002 fe71 	bl	f948 <WsfMsgAlloc>
    cc66:	b190      	cbz	r0, cc8e <HciDisconnectCmd+0x36>
    UINT16_TO_BSTREAM(p, opcode);
    cc68:	2306      	movs	r3, #6
    cc6a:	7003      	strb	r3, [r0, #0]
    cc6c:	2304      	movs	r3, #4
    cc6e:	7043      	strb	r3, [r0, #1]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    cc70:	4d14      	ldr	r5, [pc, #80]	; (ccc4 <HciDisconnectCmd+0x6c>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_DISCONNECT, HCI_LEN_DISCONNECT)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
    cc72:	70c4      	strb	r4, [r0, #3]
    UINT8_TO_BSTREAM(p, len);
    cc74:	2303      	movs	r3, #3
    cc76:	7083      	strb	r3, [r0, #2]
    UINT16_TO_BSTREAM(p, handle);
    cc78:	0a23      	lsrs	r3, r4, #8
    cc7a:	7103      	strb	r3, [r0, #4]
    UINT8_TO_BSTREAM(p, reason);
    cc7c:	4602      	mov	r2, r0
    cc7e:	7146      	strb	r6, [r0, #5]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    cc80:	2100      	movs	r1, #0
    cc82:	f105 0010 	add.w	r0, r5, #16
    cc86:	f002 fe7d 	bl	f984 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
    cc8a:	7eab      	ldrb	r3, [r5, #26]
    cc8c:	b90b      	cbnz	r3, cc92 <HciDisconnectCmd+0x3a>
    hciCmdSend(pBuf);
  }
}
    cc8e:	b002      	add	sp, #8
    cc90:	bd70      	pop	{r4, r5, r6, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    cc92:	f10d 0107 	add.w	r1, sp, #7
    cc96:	f105 0010 	add.w	r0, r5, #16
    cc9a:	f002 fe79 	bl	f990 <WsfMsgDeq>
    cc9e:	4604      	mov	r4, r0
    cca0:	2800      	cmp	r0, #0
    cca2:	d0f4      	beq.n	cc8e <HciDisconnectCmd+0x36>
      hciCmdCb.numCmdPkts--;
    cca4:	7eab      	ldrb	r3, [r5, #26]
    cca6:	3b01      	subs	r3, #1
    cca8:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    ccaa:	7842      	ldrb	r2, [r0, #1]
    ccac:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    ccae:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    ccb0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    ccb4:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    ccb6:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    ccb8:	f003 f8a0 	bl	fdfc <WsfTimerStartSec>
      hciTrSendCmd(p);
    ccbc:	4620      	mov	r0, r4
    ccbe:	f002 fc87 	bl	f5d0 <hciTrSendCmd>
}
    ccc2:	e7e4      	b.n	cc8e <HciDisconnectCmd+0x36>
    ccc4:	10004760 	.word	0x10004760

0000ccc8 <HciLeConnUpdateCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeConnUpdateCmd(uint16_t handle, hciConnSpec_t *pConnSpec)
{
    ccc8:	b530      	push	{r4, r5, lr}
    ccca:	4605      	mov	r5, r0
    cccc:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    ccce:	2011      	movs	r0, #17
{
    ccd0:	460c      	mov	r4, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    ccd2:	f002 fe39 	bl	f948 <WsfMsgAlloc>
    ccd6:	b378      	cbz	r0, cd38 <HciLeConnUpdateCmd+0x70>
    UINT16_TO_BSTREAM(p, opcode);
    ccd8:	2113      	movs	r1, #19
    ccda:	2320      	movs	r3, #32
    ccdc:	7001      	strb	r1, [r0, #0]
    ccde:	7043      	strb	r3, [r0, #1]
    UINT8_TO_BSTREAM(p, len);
    cce0:	210e      	movs	r1, #14
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CONN_UPDATE, HCI_LEN_LE_CONN_UPDATE)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
    cce2:	0a2b      	lsrs	r3, r5, #8
    UINT8_TO_BSTREAM(p, len);
    cce4:	7081      	strb	r1, [r0, #2]
    UINT16_TO_BSTREAM(p, handle);
    cce6:	70c5      	strb	r5, [r0, #3]
    cce8:	7103      	strb	r3, [r0, #4]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMin);
    ccea:	8823      	ldrh	r3, [r4, #0]
    ccec:	7143      	strb	r3, [r0, #5]
    ccee:	8823      	ldrh	r3, [r4, #0]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    ccf0:	4d1f      	ldr	r5, [pc, #124]	; (cd70 <HciLeConnUpdateCmd+0xa8>)
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMin);
    ccf2:	0a1b      	lsrs	r3, r3, #8
    ccf4:	7183      	strb	r3, [r0, #6]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMax);
    ccf6:	8863      	ldrh	r3, [r4, #2]
    ccf8:	71c3      	strb	r3, [r0, #7]
    ccfa:	8863      	ldrh	r3, [r4, #2]
    ccfc:	0a1b      	lsrs	r3, r3, #8
    ccfe:	7203      	strb	r3, [r0, #8]
    UINT16_TO_BSTREAM(p, pConnSpec->connLatency);
    cd00:	88a3      	ldrh	r3, [r4, #4]
    cd02:	7243      	strb	r3, [r0, #9]
    cd04:	88a3      	ldrh	r3, [r4, #4]
    cd06:	0a1b      	lsrs	r3, r3, #8
    cd08:	7283      	strb	r3, [r0, #10]
    UINT16_TO_BSTREAM(p, pConnSpec->supTimeout);
    cd0a:	88e3      	ldrh	r3, [r4, #6]
    cd0c:	72c3      	strb	r3, [r0, #11]
    cd0e:	88e3      	ldrh	r3, [r4, #6]
    cd10:	0a1b      	lsrs	r3, r3, #8
    cd12:	7303      	strb	r3, [r0, #12]
    UINT16_TO_BSTREAM(p, pConnSpec->minCeLen);
    cd14:	8923      	ldrh	r3, [r4, #8]
    cd16:	7343      	strb	r3, [r0, #13]
    cd18:	8923      	ldrh	r3, [r4, #8]
    cd1a:	0a1b      	lsrs	r3, r3, #8
    cd1c:	7383      	strb	r3, [r0, #14]
    UINT16_TO_BSTREAM(p, pConnSpec->maxCeLen);
    cd1e:	8963      	ldrh	r3, [r4, #10]
    cd20:	73c3      	strb	r3, [r0, #15]
    cd22:	8963      	ldrh	r3, [r4, #10]
    cd24:	0a1b      	lsrs	r3, r3, #8
    cd26:	7403      	strb	r3, [r0, #16]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    cd28:	4602      	mov	r2, r0
    cd2a:	2100      	movs	r1, #0
    cd2c:	f105 0010 	add.w	r0, r5, #16
    cd30:	f002 fe28 	bl	f984 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
    cd34:	7eab      	ldrb	r3, [r5, #26]
    cd36:	b90b      	cbnz	r3, cd3c <HciLeConnUpdateCmd+0x74>
    hciCmdSend(pBuf);
  }
}
    cd38:	b003      	add	sp, #12
    cd3a:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    cd3c:	f10d 0107 	add.w	r1, sp, #7
    cd40:	f105 0010 	add.w	r0, r5, #16
    cd44:	f002 fe24 	bl	f990 <WsfMsgDeq>
    cd48:	4604      	mov	r4, r0
    cd4a:	2800      	cmp	r0, #0
    cd4c:	d0f4      	beq.n	cd38 <HciLeConnUpdateCmd+0x70>
      hciCmdCb.numCmdPkts--;
    cd4e:	7eab      	ldrb	r3, [r5, #26]
    cd50:	3b01      	subs	r3, #1
    cd52:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    cd54:	7842      	ldrb	r2, [r0, #1]
    cd56:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    cd58:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    cd5a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    cd5e:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    cd60:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    cd62:	f003 f84b 	bl	fdfc <WsfTimerStartSec>
      hciTrSendCmd(p);
    cd66:	4620      	mov	r0, r4
    cd68:	f002 fc32 	bl	f5d0 <hciTrSendCmd>
}
    cd6c:	e7e4      	b.n	cd38 <HciLeConnUpdateCmd+0x70>
    cd6e:	bf00      	nop
    cd70:	10004760 	.word	0x10004760

0000cd74 <HciLeRemoteConnParamReqReply>:
*  \return None.
*/
/*************************************************************************************************/
void HciLeRemoteConnParamReqReply(uint16_t handle, uint16_t intervalMin, uint16_t intervalMax, uint16_t latency,
                                  uint16_t timeout, uint16_t minCeLen, uint16_t maxCeLen)
{
    cd74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cd78:	b082      	sub	sp, #8
    cd7a:	4607      	mov	r7, r0
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    cd7c:	2011      	movs	r0, #17
{
    cd7e:	f8bd a028 	ldrh.w	sl, [sp, #40]	; 0x28
    cd82:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
    cd86:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
    cd8a:	460e      	mov	r6, r1
    cd8c:	4615      	mov	r5, r2
    cd8e:	461c      	mov	r4, r3
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    cd90:	f002 fdda 	bl	f948 <WsfMsgAlloc>
    cd94:	b360      	cbz	r0, cdf0 <HciLeRemoteConnParamReqReply+0x7c>
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
    UINT16_TO_BSTREAM(p, intervalMin);
    UINT16_TO_BSTREAM(p, intervalMax);
    UINT16_TO_BSTREAM(p, latency);
    UINT16_TO_BSTREAM(p, timeout);
    cd96:	ea4f 231a 	mov.w	r3, sl, lsr #8
    UINT16_TO_BSTREAM(p, latency);
    cd9a:	7244      	strb	r4, [r0, #9]
    UINT16_TO_BSTREAM(p, timeout);
    cd9c:	7303      	strb	r3, [r0, #12]
    cd9e:	4684      	mov	ip, r0
    UINT16_TO_BSTREAM(p, latency);
    cda0:	0a24      	lsrs	r4, r4, #8
    UINT16_TO_BSTREAM(p, minCeLen);
    UINT16_TO_BSTREAM(p, maxCeLen);
    cda2:	ea4f 2318 	mov.w	r3, r8, lsr #8
    UINT16_TO_BSTREAM(p, handle);
    cda6:	70c7      	strb	r7, [r0, #3]
    UINT16_TO_BSTREAM(p, intervalMin);
    cda8:	7146      	strb	r6, [r0, #5]
    UINT16_TO_BSTREAM(p, intervalMax);
    cdaa:	71c5      	strb	r5, [r0, #7]
    UINT16_TO_BSTREAM(p, latency);
    cdac:	7284      	strb	r4, [r0, #10]
    UINT16_TO_BSTREAM(p, maxCeLen);
    cdae:	7403      	strb	r3, [r0, #16]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    cdb0:	4c1d      	ldr	r4, [pc, #116]	; (ce28 <HciLeRemoteConnParamReqReply+0xb4>)
    UINT16_TO_BSTREAM(p, timeout);
    cdb2:	f880 a00b 	strb.w	sl, [r0, #11]
    UINT16_TO_BSTREAM(p, opcode);
    cdb6:	2320      	movs	r3, #32
    UINT16_TO_BSTREAM(p, minCeLen);
    cdb8:	ea4f 2219 	mov.w	r2, r9, lsr #8
    UINT16_TO_BSTREAM(p, handle);
    cdbc:	0a3f      	lsrs	r7, r7, #8
    UINT16_TO_BSTREAM(p, intervalMin);
    cdbe:	0a36      	lsrs	r6, r6, #8
    UINT16_TO_BSTREAM(p, intervalMax);
    cdc0:	0a2d      	lsrs	r5, r5, #8
    UINT16_TO_BSTREAM(p, minCeLen);
    cdc2:	7382      	strb	r2, [r0, #14]
    UINT16_TO_BSTREAM(p, handle);
    cdc4:	7107      	strb	r7, [r0, #4]
    UINT16_TO_BSTREAM(p, intervalMin);
    cdc6:	7186      	strb	r6, [r0, #6]
    UINT16_TO_BSTREAM(p, intervalMax);
    cdc8:	7205      	strb	r5, [r0, #8]
    UINT16_TO_BSTREAM(p, minCeLen);
    cdca:	f880 900d 	strb.w	r9, [r0, #13]
    UINT16_TO_BSTREAM(p, maxCeLen);
    cdce:	f880 800f 	strb.w	r8, [r0, #15]
    UINT16_TO_BSTREAM(p, opcode);
    cdd2:	f88c 3000 	strb.w	r3, [ip]
    cdd6:	f88c 3001 	strb.w	r3, [ip, #1]
    UINT8_TO_BSTREAM(p, len);
    cdda:	230e      	movs	r3, #14
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    cddc:	4602      	mov	r2, r0
    UINT8_TO_BSTREAM(p, len);
    cdde:	f88c 3002 	strb.w	r3, [ip, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    cde2:	2100      	movs	r1, #0
    cde4:	f104 0010 	add.w	r0, r4, #16
    cde8:	f002 fdcc 	bl	f984 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
    cdec:	7ea3      	ldrb	r3, [r4, #26]
    cdee:	b913      	cbnz	r3, cdf6 <HciLeRemoteConnParamReqReply+0x82>
    hciCmdSend(pBuf);
  }
}
    cdf0:	b002      	add	sp, #8
    cdf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    cdf6:	f10d 0107 	add.w	r1, sp, #7
    cdfa:	f104 0010 	add.w	r0, r4, #16
    cdfe:	f002 fdc7 	bl	f990 <WsfMsgDeq>
    ce02:	4605      	mov	r5, r0
    ce04:	2800      	cmp	r0, #0
    ce06:	d0f3      	beq.n	cdf0 <HciLeRemoteConnParamReqReply+0x7c>
      hciCmdCb.numCmdPkts--;
    ce08:	7ea3      	ldrb	r3, [r4, #26]
    ce0a:	3b01      	subs	r3, #1
    ce0c:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    ce0e:	7842      	ldrb	r2, [r0, #1]
    ce10:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    ce12:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    ce14:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    ce18:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    ce1a:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    ce1c:	f002 ffee 	bl	fdfc <WsfTimerStartSec>
      hciTrSendCmd(p);
    ce20:	4628      	mov	r0, r5
    ce22:	f002 fbd5 	bl	f5d0 <hciTrSendCmd>
}
    ce26:	e7e3      	b.n	cdf0 <HciLeRemoteConnParamReqReply+0x7c>
    ce28:	10004760 	.word	0x10004760

0000ce2c <HciLeRemoteConnParamReqNegReply>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeRemoteConnParamReqNegReply(uint16_t handle, uint8_t reason)
{
    ce2c:	b570      	push	{r4, r5, r6, lr}
    ce2e:	4604      	mov	r4, r0
    ce30:	b082      	sub	sp, #8
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    ce32:	2006      	movs	r0, #6
{
    ce34:	460e      	mov	r6, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    ce36:	f002 fd87 	bl	f948 <WsfMsgAlloc>
    ce3a:	b190      	cbz	r0, ce62 <HciLeRemoteConnParamReqNegReply+0x36>
    UINT16_TO_BSTREAM(p, opcode);
    ce3c:	2321      	movs	r3, #33	; 0x21
    ce3e:	7003      	strb	r3, [r0, #0]
    ce40:	2320      	movs	r3, #32
    ce42:	7043      	strb	r3, [r0, #1]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    ce44:	4d14      	ldr	r5, [pc, #80]	; (ce98 <HciLeRemoteConnParamReqNegReply+0x6c>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REM_CONN_PARAM_NEG_REP, HCI_LEN_LE_REM_CONN_PARAM_NEG_REP)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
    ce46:	70c4      	strb	r4, [r0, #3]
    UINT8_TO_BSTREAM(p, len);
    ce48:	2303      	movs	r3, #3
    ce4a:	7083      	strb	r3, [r0, #2]
    UINT16_TO_BSTREAM(p, handle);
    ce4c:	0a23      	lsrs	r3, r4, #8
    ce4e:	7103      	strb	r3, [r0, #4]
    UINT8_TO_BSTREAM(p, reason);
    ce50:	4602      	mov	r2, r0
    ce52:	7146      	strb	r6, [r0, #5]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    ce54:	2100      	movs	r1, #0
    ce56:	f105 0010 	add.w	r0, r5, #16
    ce5a:	f002 fd93 	bl	f984 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
    ce5e:	7eab      	ldrb	r3, [r5, #26]
    ce60:	b90b      	cbnz	r3, ce66 <HciLeRemoteConnParamReqNegReply+0x3a>
    hciCmdSend(pBuf);
  }
}
    ce62:	b002      	add	sp, #8
    ce64:	bd70      	pop	{r4, r5, r6, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    ce66:	f10d 0107 	add.w	r1, sp, #7
    ce6a:	f105 0010 	add.w	r0, r5, #16
    ce6e:	f002 fd8f 	bl	f990 <WsfMsgDeq>
    ce72:	4604      	mov	r4, r0
    ce74:	2800      	cmp	r0, #0
    ce76:	d0f4      	beq.n	ce62 <HciLeRemoteConnParamReqNegReply+0x36>
      hciCmdCb.numCmdPkts--;
    ce78:	7eab      	ldrb	r3, [r5, #26]
    ce7a:	3b01      	subs	r3, #1
    ce7c:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    ce7e:	7842      	ldrb	r2, [r0, #1]
    ce80:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    ce82:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    ce84:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    ce88:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    ce8a:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    ce8c:	f002 ffb6 	bl	fdfc <WsfTimerStartSec>
      hciTrSendCmd(p);
    ce90:	4620      	mov	r0, r4
    ce92:	f002 fb9d 	bl	f5d0 <hciTrSendCmd>
}
    ce96:	e7e4      	b.n	ce62 <HciLeRemoteConnParamReqNegReply+0x36>
    ce98:	10004760 	.word	0x10004760

0000ce9c <HciLeSetDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeSetDataLen(uint16_t handle, uint16_t txOctets, uint16_t txTime)
{
    ce9c:	b570      	push	{r4, r5, r6, lr}
    ce9e:	4605      	mov	r5, r0
    cea0:	b082      	sub	sp, #8
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    cea2:	2009      	movs	r0, #9
{
    cea4:	460e      	mov	r6, r1
    cea6:	4614      	mov	r4, r2
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    cea8:	f002 fd4e 	bl	f948 <WsfMsgAlloc>
    ceac:	b1b8      	cbz	r0, cede <HciLeSetDataLen+0x42>
    UINT16_TO_BSTREAM(p, opcode);
    ceae:	2322      	movs	r3, #34	; 0x22
    ceb0:	7003      	strb	r3, [r0, #0]
    ceb2:	2320      	movs	r3, #32
    ceb4:	7043      	strb	r3, [r0, #1]
    UINT8_TO_BSTREAM(p, len);
    ceb6:	2306      	movs	r3, #6
    ceb8:	7083      	strb	r3, [r0, #2]
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_DATA_LEN, HCI_LEN_LE_SET_DATA_LEN)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
    ceba:	70c5      	strb	r5, [r0, #3]
    cebc:	0a2b      	lsrs	r3, r5, #8
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    cebe:	4d15      	ldr	r5, [pc, #84]	; (cf14 <HciLeSetDataLen+0x78>)
    UINT16_TO_BSTREAM(p, handle);
    cec0:	7103      	strb	r3, [r0, #4]
    UINT16_TO_BSTREAM(p, txOctets);
    cec2:	0a32      	lsrs	r2, r6, #8
    UINT16_TO_BSTREAM(p, txTime);
    cec4:	0a23      	lsrs	r3, r4, #8
    UINT16_TO_BSTREAM(p, txOctets);
    cec6:	7182      	strb	r2, [r0, #6]
    UINT16_TO_BSTREAM(p, txTime);
    cec8:	7203      	strb	r3, [r0, #8]
    UINT16_TO_BSTREAM(p, txOctets);
    ceca:	7146      	strb	r6, [r0, #5]
    UINT16_TO_BSTREAM(p, txTime);
    cecc:	71c4      	strb	r4, [r0, #7]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    cece:	4602      	mov	r2, r0
    ced0:	2100      	movs	r1, #0
    ced2:	f105 0010 	add.w	r0, r5, #16
    ced6:	f002 fd55 	bl	f984 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
    ceda:	7eab      	ldrb	r3, [r5, #26]
    cedc:	b90b      	cbnz	r3, cee2 <HciLeSetDataLen+0x46>
    hciCmdSend(pBuf);
  }
}
    cede:	b002      	add	sp, #8
    cee0:	bd70      	pop	{r4, r5, r6, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    cee2:	f10d 0107 	add.w	r1, sp, #7
    cee6:	f105 0010 	add.w	r0, r5, #16
    ceea:	f002 fd51 	bl	f990 <WsfMsgDeq>
    ceee:	4604      	mov	r4, r0
    cef0:	2800      	cmp	r0, #0
    cef2:	d0f4      	beq.n	cede <HciLeSetDataLen+0x42>
      hciCmdCb.numCmdPkts--;
    cef4:	7eab      	ldrb	r3, [r5, #26]
    cef6:	3b01      	subs	r3, #1
    cef8:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    cefa:	7842      	ldrb	r2, [r0, #1]
    cefc:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    cefe:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    cf00:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    cf04:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    cf06:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    cf08:	f002 ff78 	bl	fdfc <WsfTimerStartSec>
      hciTrSendCmd(p);
    cf0c:	4620      	mov	r0, r4
    cf0e:	f002 fb5f 	bl	f5d0 <hciTrSendCmd>
}
    cf12:	e7e4      	b.n	cede <HciLeSetDataLen+0x42>
    cf14:	10004760 	.word	0x10004760

0000cf18 <HciLeWriteDefDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeWriteDefDataLen(uint16_t suggestedMaxTxOctets, uint16_t suggestedMaxTxTime)
{
    cf18:	b570      	push	{r4, r5, r6, lr}
    cf1a:	4605      	mov	r5, r0
    cf1c:	b082      	sub	sp, #8
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    cf1e:	2007      	movs	r0, #7
{
    cf20:	460c      	mov	r4, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    cf22:	f002 fd11 	bl	f948 <WsfMsgAlloc>
    cf26:	b1a0      	cbz	r0, cf52 <HciLeWriteDefDataLen+0x3a>
    UINT16_TO_BSTREAM(p, opcode);
    cf28:	2324      	movs	r3, #36	; 0x24
    cf2a:	7003      	strb	r3, [r0, #0]
    cf2c:	2320      	movs	r3, #32
    cf2e:	7043      	strb	r3, [r0, #1]
    UINT8_TO_BSTREAM(p, len);
    cf30:	2304      	movs	r3, #4
    cf32:	7083      	strb	r3, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    cf34:	4e14      	ldr	r6, [pc, #80]	; (cf88 <HciLeWriteDefDataLen+0x70>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_WRITE_DEF_DATA_LEN, HCI_LEN_LE_WRITE_DEF_DATA_LEN)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, suggestedMaxTxOctets);
    cf36:	70c5      	strb	r5, [r0, #3]
    cf38:	0a2b      	lsrs	r3, r5, #8
    cf3a:	7103      	strb	r3, [r0, #4]
    UINT16_TO_BSTREAM(p, suggestedMaxTxTime);
    cf3c:	0a23      	lsrs	r3, r4, #8
    cf3e:	7183      	strb	r3, [r0, #6]
    cf40:	4602      	mov	r2, r0
    cf42:	7144      	strb	r4, [r0, #5]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    cf44:	2100      	movs	r1, #0
    cf46:	f106 0010 	add.w	r0, r6, #16
    cf4a:	f002 fd1b 	bl	f984 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
    cf4e:	7eb3      	ldrb	r3, [r6, #26]
    cf50:	b90b      	cbnz	r3, cf56 <HciLeWriteDefDataLen+0x3e>
    hciCmdSend(pBuf);
  }
}
    cf52:	b002      	add	sp, #8
    cf54:	bd70      	pop	{r4, r5, r6, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    cf56:	f10d 0107 	add.w	r1, sp, #7
    cf5a:	f106 0010 	add.w	r0, r6, #16
    cf5e:	f002 fd17 	bl	f990 <WsfMsgDeq>
    cf62:	4604      	mov	r4, r0
    cf64:	2800      	cmp	r0, #0
    cf66:	d0f4      	beq.n	cf52 <HciLeWriteDefDataLen+0x3a>
      hciCmdCb.numCmdPkts--;
    cf68:	7eb3      	ldrb	r3, [r6, #26]
    cf6a:	3b01      	subs	r3, #1
    cf6c:	76b3      	strb	r3, [r6, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    cf6e:	7842      	ldrb	r2, [r0, #1]
    cf70:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    cf72:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    cf74:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    cf78:	4630      	mov	r0, r6
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    cf7a:	8333      	strh	r3, [r6, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    cf7c:	f002 ff3e 	bl	fdfc <WsfTimerStartSec>
      hciTrSendCmd(p);
    cf80:	4620      	mov	r0, r4
    cf82:	f002 fb25 	bl	f5d0 <hciTrSendCmd>
}
    cf86:	e7e4      	b.n	cf52 <HciLeWriteDefDataLen+0x3a>
    cf88:	10004760 	.word	0x10004760

0000cf8c <HciLeReadMaxDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeReadMaxDataLen(void)
{
    cf8c:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    cf8e:	2003      	movs	r0, #3
{
    cf90:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    cf92:	f002 fcd9 	bl	f948 <WsfMsgAlloc>
    cf96:	b160      	cbz	r0, cfb2 <HciLeReadMaxDataLen+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    cf98:	4c13      	ldr	r4, [pc, #76]	; (cfe8 <HciLeReadMaxDataLen+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
    cf9a:	f242 032f 	movw	r3, #8239	; 0x202f
    UINT8_TO_BSTREAM(p, len);
    cf9e:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
    cfa0:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
    cfa2:	4602      	mov	r2, r0
    cfa4:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    cfa6:	f104 0010 	add.w	r0, r4, #16
    cfaa:	f002 fceb 	bl	f984 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
    cfae:	7ea3      	ldrb	r3, [r4, #26]
    cfb0:	b90b      	cbnz	r3, cfb6 <HciLeReadMaxDataLen+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_MAX_DATA_LEN, HCI_LEN_LE_READ_MAX_DATA_LEN)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
    cfb2:	b003      	add	sp, #12
    cfb4:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    cfb6:	f10d 0107 	add.w	r1, sp, #7
    cfba:	f104 0010 	add.w	r0, r4, #16
    cfbe:	f002 fce7 	bl	f990 <WsfMsgDeq>
    cfc2:	4605      	mov	r5, r0
    cfc4:	2800      	cmp	r0, #0
    cfc6:	d0f4      	beq.n	cfb2 <HciLeReadMaxDataLen+0x26>
      hciCmdCb.numCmdPkts--;
    cfc8:	7ea3      	ldrb	r3, [r4, #26]
    cfca:	3b01      	subs	r3, #1
    cfcc:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    cfce:	7842      	ldrb	r2, [r0, #1]
    cfd0:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    cfd2:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    cfd4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    cfd8:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    cfda:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    cfdc:	f002 ff0e 	bl	fdfc <WsfTimerStartSec>
      hciTrSendCmd(p);
    cfe0:	4628      	mov	r0, r5
    cfe2:	f002 faf5 	bl	f5d0 <hciTrSendCmd>
}
    cfe6:	e7e4      	b.n	cfb2 <HciLeReadMaxDataLen+0x26>
    cfe8:	10004760 	.word	0x10004760

0000cfec <HciLeEncryptCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeEncryptCmd(uint8_t *pKey, uint8_t *pData)
{
    cfec:	b530      	push	{r4, r5, lr}
    cfee:	4605      	mov	r5, r0
    cff0:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    cff2:	2023      	movs	r0, #35	; 0x23
{
    cff4:	460c      	mov	r4, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    cff6:	f002 fca7 	bl	f948 <WsfMsgAlloc>
    cffa:	b328      	cbz	r0, d048 <HciLeEncryptCmd+0x5c>
    UINT16_TO_BSTREAM(p, opcode);
    cffc:	f242 0117 	movw	r1, #8215	; 0x2017
    UINT8_TO_BSTREAM(p, len);
    d000:	2320      	movs	r3, #32
    UINT16_TO_BSTREAM(p, opcode);
    d002:	8001      	strh	r1, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
    d004:	7083      	strb	r3, [r0, #2]
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ENCRYPT, HCI_LEN_LE_ENCRYPT)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    memcpy(p, pKey, HCI_KEY_LEN);
    d006:	4602      	mov	r2, r0
    d008:	6869      	ldr	r1, [r5, #4]
    d00a:	6828      	ldr	r0, [r5, #0]
    d00c:	68ab      	ldr	r3, [r5, #8]
    d00e:	68ed      	ldr	r5, [r5, #12]
    d010:	f8c2 500f 	str.w	r5, [r2, #15]
    d014:	f8c2 0003 	str.w	r0, [r2, #3]
    d018:	f8c2 1007 	str.w	r1, [r2, #7]
    d01c:	f8c2 300b 	str.w	r3, [r2, #11]
    p += HCI_KEY_LEN;
    memcpy(p, pData, HCI_ENCRYPT_DATA_LEN);
    d020:	6820      	ldr	r0, [r4, #0]
    d022:	6861      	ldr	r1, [r4, #4]
    d024:	68a3      	ldr	r3, [r4, #8]
    d026:	68e4      	ldr	r4, [r4, #12]
    d028:	f8c2 401f 	str.w	r4, [r2, #31]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d02c:	4c14      	ldr	r4, [pc, #80]	; (d080 <HciLeEncryptCmd+0x94>)
    memcpy(p, pData, HCI_ENCRYPT_DATA_LEN);
    d02e:	f8c2 0013 	str.w	r0, [r2, #19]
    d032:	f8c2 1017 	str.w	r1, [r2, #23]
    d036:	f8c2 301b 	str.w	r3, [r2, #27]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d03a:	2100      	movs	r1, #0
    d03c:	f104 0010 	add.w	r0, r4, #16
    d040:	f002 fca0 	bl	f984 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
    d044:	7ea3      	ldrb	r3, [r4, #26]
    d046:	b90b      	cbnz	r3, d04c <HciLeEncryptCmd+0x60>
    hciCmdSend(pBuf);
  }
}
    d048:	b003      	add	sp, #12
    d04a:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    d04c:	f10d 0107 	add.w	r1, sp, #7
    d050:	f104 0010 	add.w	r0, r4, #16
    d054:	f002 fc9c 	bl	f990 <WsfMsgDeq>
    d058:	4605      	mov	r5, r0
    d05a:	2800      	cmp	r0, #0
    d05c:	d0f4      	beq.n	d048 <HciLeEncryptCmd+0x5c>
      hciCmdCb.numCmdPkts--;
    d05e:	7ea3      	ldrb	r3, [r4, #26]
    d060:	3b01      	subs	r3, #1
    d062:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d064:	7842      	ldrb	r2, [r0, #1]
    d066:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d068:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d06a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d06e:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d070:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d072:	f002 fec3 	bl	fdfc <WsfTimerStartSec>
      hciTrSendCmd(p);
    d076:	4628      	mov	r0, r5
    d078:	f002 faaa 	bl	f5d0 <hciTrSendCmd>
}
    d07c:	e7e4      	b.n	d048 <HciLeEncryptCmd+0x5c>
    d07e:	bf00      	nop
    d080:	10004760 	.word	0x10004760

0000d084 <HciLeLtkReqNegReplCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeLtkReqNegReplCmd(uint16_t handle)
{
    d084:	b530      	push	{r4, r5, lr}
    d086:	4604      	mov	r4, r0
    d088:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    d08a:	2005      	movs	r0, #5
    d08c:	f002 fc5c 	bl	f948 <WsfMsgAlloc>
    d090:	b188      	cbz	r0, d0b6 <HciLeLtkReqNegReplCmd+0x32>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d092:	4d16      	ldr	r5, [pc, #88]	; (d0ec <HciLeLtkReqNegReplCmd+0x68>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_LTK_REQ_NEG_REPL, HCI_LEN_LE_LTK_REQ_NEG_REPL)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
    d094:	70c4      	strb	r4, [r0, #3]
    UINT16_TO_BSTREAM(p, opcode);
    d096:	211b      	movs	r1, #27
    d098:	2320      	movs	r3, #32
    d09a:	7001      	strb	r1, [r0, #0]
    d09c:	7043      	strb	r3, [r0, #1]
    UINT8_TO_BSTREAM(p, len);
    d09e:	2102      	movs	r1, #2
    UINT16_TO_BSTREAM(p, handle);
    d0a0:	0a23      	lsrs	r3, r4, #8
    UINT8_TO_BSTREAM(p, len);
    d0a2:	7081      	strb	r1, [r0, #2]
    UINT16_TO_BSTREAM(p, handle);
    d0a4:	7103      	strb	r3, [r0, #4]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d0a6:	4602      	mov	r2, r0
    d0a8:	2100      	movs	r1, #0
    d0aa:	f105 0010 	add.w	r0, r5, #16
    d0ae:	f002 fc69 	bl	f984 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
    d0b2:	7eab      	ldrb	r3, [r5, #26]
    d0b4:	b90b      	cbnz	r3, d0ba <HciLeLtkReqNegReplCmd+0x36>
    hciCmdSend(pBuf);
  }
}
    d0b6:	b003      	add	sp, #12
    d0b8:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    d0ba:	f10d 0107 	add.w	r1, sp, #7
    d0be:	f105 0010 	add.w	r0, r5, #16
    d0c2:	f002 fc65 	bl	f990 <WsfMsgDeq>
    d0c6:	4604      	mov	r4, r0
    d0c8:	2800      	cmp	r0, #0
    d0ca:	d0f4      	beq.n	d0b6 <HciLeLtkReqNegReplCmd+0x32>
      hciCmdCb.numCmdPkts--;
    d0cc:	7eab      	ldrb	r3, [r5, #26]
    d0ce:	3b01      	subs	r3, #1
    d0d0:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d0d2:	7842      	ldrb	r2, [r0, #1]
    d0d4:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d0d6:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d0d8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d0dc:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d0de:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d0e0:	f002 fe8c 	bl	fdfc <WsfTimerStartSec>
      hciTrSendCmd(p);
    d0e4:	4620      	mov	r0, r4
    d0e6:	f002 fa73 	bl	f5d0 <hciTrSendCmd>
}
    d0ea:	e7e4      	b.n	d0b6 <HciLeLtkReqNegReplCmd+0x32>
    d0ec:	10004760 	.word	0x10004760

0000d0f0 <HciLeLtkReqReplCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeLtkReqReplCmd(uint16_t handle, uint8_t *pKey)
{
    d0f0:	b530      	push	{r4, r5, lr}
    d0f2:	4605      	mov	r5, r0
    d0f4:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    d0f6:	2015      	movs	r0, #21
{
    d0f8:	460c      	mov	r4, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    d0fa:	f002 fc25 	bl	f948 <WsfMsgAlloc>
    d0fe:	b1e8      	cbz	r0, d13c <HciLeLtkReqReplCmd+0x4c>
    UINT16_TO_BSTREAM(p, opcode);
    d100:	211a      	movs	r1, #26
    d102:	2320      	movs	r3, #32
    d104:	7001      	strb	r1, [r0, #0]
    d106:	7043      	strb	r3, [r0, #1]
    UINT8_TO_BSTREAM(p, len);
    d108:	2112      	movs	r1, #18
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_LTK_REQ_REPL, HCI_LEN_LE_LTK_REQ_REPL)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
    d10a:	0a2b      	lsrs	r3, r5, #8
    UINT8_TO_BSTREAM(p, len);
    d10c:	7081      	strb	r1, [r0, #2]
    UINT16_TO_BSTREAM(p, handle);
    d10e:	70c5      	strb	r5, [r0, #3]
    d110:	7103      	strb	r3, [r0, #4]
    memcpy(p, pKey, HCI_KEY_LEN);
    d112:	4602      	mov	r2, r0
    d114:	6861      	ldr	r1, [r4, #4]
    d116:	6820      	ldr	r0, [r4, #0]
    d118:	68a3      	ldr	r3, [r4, #8]
    d11a:	68e4      	ldr	r4, [r4, #12]
    d11c:	f8c2 4011 	str.w	r4, [r2, #17]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d120:	4c14      	ldr	r4, [pc, #80]	; (d174 <HciLeLtkReqReplCmd+0x84>)
    memcpy(p, pKey, HCI_KEY_LEN);
    d122:	f8c2 0005 	str.w	r0, [r2, #5]
    d126:	f8c2 1009 	str.w	r1, [r2, #9]
    d12a:	f8c2 300d 	str.w	r3, [r2, #13]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d12e:	2100      	movs	r1, #0
    d130:	f104 0010 	add.w	r0, r4, #16
    d134:	f002 fc26 	bl	f984 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
    d138:	7ea3      	ldrb	r3, [r4, #26]
    d13a:	b90b      	cbnz	r3, d140 <HciLeLtkReqReplCmd+0x50>
    hciCmdSend(pBuf);
  }
}
    d13c:	b003      	add	sp, #12
    d13e:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    d140:	f10d 0107 	add.w	r1, sp, #7
    d144:	f104 0010 	add.w	r0, r4, #16
    d148:	f002 fc22 	bl	f990 <WsfMsgDeq>
    d14c:	4605      	mov	r5, r0
    d14e:	2800      	cmp	r0, #0
    d150:	d0f4      	beq.n	d13c <HciLeLtkReqReplCmd+0x4c>
      hciCmdCb.numCmdPkts--;
    d152:	7ea3      	ldrb	r3, [r4, #26]
    d154:	3b01      	subs	r3, #1
    d156:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d158:	7842      	ldrb	r2, [r0, #1]
    d15a:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d15c:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d15e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d162:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d164:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d166:	f002 fe49 	bl	fdfc <WsfTimerStartSec>
      hciTrSendCmd(p);
    d16a:	4628      	mov	r0, r5
    d16c:	f002 fa30 	bl	f5d0 <hciTrSendCmd>
}
    d170:	e7e4      	b.n	d13c <HciLeLtkReqReplCmd+0x4c>
    d172:	bf00      	nop
    d174:	10004760 	.word	0x10004760

0000d178 <HciLeRandCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeRandCmd(void)
{
    d178:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    d17a:	2003      	movs	r0, #3
{
    d17c:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    d17e:	f002 fbe3 	bl	f948 <WsfMsgAlloc>
    d182:	b160      	cbz	r0, d19e <HciLeRandCmd+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d184:	4c13      	ldr	r4, [pc, #76]	; (d1d4 <HciLeRandCmd+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
    d186:	f242 0318 	movw	r3, #8216	; 0x2018
    UINT8_TO_BSTREAM(p, len);
    d18a:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
    d18c:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
    d18e:	4602      	mov	r2, r0
    d190:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d192:	f104 0010 	add.w	r0, r4, #16
    d196:	f002 fbf5 	bl	f984 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
    d19a:	7ea3      	ldrb	r3, [r4, #26]
    d19c:	b90b      	cbnz	r3, d1a2 <HciLeRandCmd+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_RAND, HCI_LEN_LE_RAND)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
    d19e:	b003      	add	sp, #12
    d1a0:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    d1a2:	f10d 0107 	add.w	r1, sp, #7
    d1a6:	f104 0010 	add.w	r0, r4, #16
    d1aa:	f002 fbf1 	bl	f990 <WsfMsgDeq>
    d1ae:	4605      	mov	r5, r0
    d1b0:	2800      	cmp	r0, #0
    d1b2:	d0f4      	beq.n	d19e <HciLeRandCmd+0x26>
      hciCmdCb.numCmdPkts--;
    d1b4:	7ea3      	ldrb	r3, [r4, #26]
    d1b6:	3b01      	subs	r3, #1
    d1b8:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d1ba:	7842      	ldrb	r2, [r0, #1]
    d1bc:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d1be:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d1c0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d1c4:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d1c6:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d1c8:	f002 fe18 	bl	fdfc <WsfTimerStartSec>
      hciTrSendCmd(p);
    d1cc:	4628      	mov	r0, r5
    d1ce:	f002 f9ff 	bl	f5d0 <hciTrSendCmd>
}
    d1d2:	e7e4      	b.n	d19e <HciLeRandCmd+0x26>
    d1d4:	10004760 	.word	0x10004760

0000d1d8 <HciLeReadBufSizeCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadBufSizeCmd(void)
{
    d1d8:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    d1da:	2003      	movs	r0, #3
{
    d1dc:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    d1de:	f002 fbb3 	bl	f948 <WsfMsgAlloc>
    d1e2:	b160      	cbz	r0, d1fe <HciLeReadBufSizeCmd+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d1e4:	4c13      	ldr	r4, [pc, #76]	; (d234 <HciLeReadBufSizeCmd+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
    d1e6:	f242 0302 	movw	r3, #8194	; 0x2002
    UINT8_TO_BSTREAM(p, len);
    d1ea:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
    d1ec:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
    d1ee:	4602      	mov	r2, r0
    d1f0:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d1f2:	f104 0010 	add.w	r0, r4, #16
    d1f6:	f002 fbc5 	bl	f984 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
    d1fa:	7ea3      	ldrb	r3, [r4, #26]
    d1fc:	b90b      	cbnz	r3, d202 <HciLeReadBufSizeCmd+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_BUF_SIZE, HCI_LEN_LE_READ_BUF_SIZE)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
    d1fe:	b003      	add	sp, #12
    d200:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    d202:	f10d 0107 	add.w	r1, sp, #7
    d206:	f104 0010 	add.w	r0, r4, #16
    d20a:	f002 fbc1 	bl	f990 <WsfMsgDeq>
    d20e:	4605      	mov	r5, r0
    d210:	2800      	cmp	r0, #0
    d212:	d0f4      	beq.n	d1fe <HciLeReadBufSizeCmd+0x26>
      hciCmdCb.numCmdPkts--;
    d214:	7ea3      	ldrb	r3, [r4, #26]
    d216:	3b01      	subs	r3, #1
    d218:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d21a:	7842      	ldrb	r2, [r0, #1]
    d21c:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d21e:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d220:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d224:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d226:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d228:	f002 fde8 	bl	fdfc <WsfTimerStartSec>
      hciTrSendCmd(p);
    d22c:	4628      	mov	r0, r5
    d22e:	f002 f9cf 	bl	f5d0 <hciTrSendCmd>
}
    d232:	e7e4      	b.n	d1fe <HciLeReadBufSizeCmd+0x26>
    d234:	10004760 	.word	0x10004760

0000d238 <HciLeReadLocalSupFeatCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadLocalSupFeatCmd(void)
{
    d238:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    d23a:	2003      	movs	r0, #3
{
    d23c:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    d23e:	f002 fb83 	bl	f948 <WsfMsgAlloc>
    d242:	b160      	cbz	r0, d25e <HciLeReadLocalSupFeatCmd+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d244:	4c13      	ldr	r4, [pc, #76]	; (d294 <HciLeReadLocalSupFeatCmd+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
    d246:	f242 0303 	movw	r3, #8195	; 0x2003
    UINT8_TO_BSTREAM(p, len);
    d24a:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
    d24c:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
    d24e:	4602      	mov	r2, r0
    d250:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d252:	f104 0010 	add.w	r0, r4, #16
    d256:	f002 fb95 	bl	f984 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
    d25a:	7ea3      	ldrb	r3, [r4, #26]
    d25c:	b90b      	cbnz	r3, d262 <HciLeReadLocalSupFeatCmd+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_LOCAL_SUP_FEAT, HCI_LEN_LE_READ_LOCAL_SUP_FEAT)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
    d25e:	b003      	add	sp, #12
    d260:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    d262:	f10d 0107 	add.w	r1, sp, #7
    d266:	f104 0010 	add.w	r0, r4, #16
    d26a:	f002 fb91 	bl	f990 <WsfMsgDeq>
    d26e:	4605      	mov	r5, r0
    d270:	2800      	cmp	r0, #0
    d272:	d0f4      	beq.n	d25e <HciLeReadLocalSupFeatCmd+0x26>
      hciCmdCb.numCmdPkts--;
    d274:	7ea3      	ldrb	r3, [r4, #26]
    d276:	3b01      	subs	r3, #1
    d278:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d27a:	7842      	ldrb	r2, [r0, #1]
    d27c:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d27e:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d280:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d284:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d286:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d288:	f002 fdb8 	bl	fdfc <WsfTimerStartSec>
      hciTrSendCmd(p);
    d28c:	4628      	mov	r0, r5
    d28e:	f002 f99f 	bl	f5d0 <hciTrSendCmd>
}
    d292:	e7e4      	b.n	d25e <HciLeReadLocalSupFeatCmd+0x26>
    d294:	10004760 	.word	0x10004760

0000d298 <HciLeReadSupStatesCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadSupStatesCmd(void)
{
    d298:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    d29a:	2003      	movs	r0, #3
{
    d29c:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    d29e:	f002 fb53 	bl	f948 <WsfMsgAlloc>
    d2a2:	b160      	cbz	r0, d2be <HciLeReadSupStatesCmd+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d2a4:	4c13      	ldr	r4, [pc, #76]	; (d2f4 <HciLeReadSupStatesCmd+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
    d2a6:	f242 031c 	movw	r3, #8220	; 0x201c
    UINT8_TO_BSTREAM(p, len);
    d2aa:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
    d2ac:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
    d2ae:	4602      	mov	r2, r0
    d2b0:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d2b2:	f104 0010 	add.w	r0, r4, #16
    d2b6:	f002 fb65 	bl	f984 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
    d2ba:	7ea3      	ldrb	r3, [r4, #26]
    d2bc:	b90b      	cbnz	r3, d2c2 <HciLeReadSupStatesCmd+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_SUP_STATES, HCI_LEN_LE_READ_SUP_STATES)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
    d2be:	b003      	add	sp, #12
    d2c0:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    d2c2:	f10d 0107 	add.w	r1, sp, #7
    d2c6:	f104 0010 	add.w	r0, r4, #16
    d2ca:	f002 fb61 	bl	f990 <WsfMsgDeq>
    d2ce:	4605      	mov	r5, r0
    d2d0:	2800      	cmp	r0, #0
    d2d2:	d0f4      	beq.n	d2be <HciLeReadSupStatesCmd+0x26>
      hciCmdCb.numCmdPkts--;
    d2d4:	7ea3      	ldrb	r3, [r4, #26]
    d2d6:	3b01      	subs	r3, #1
    d2d8:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d2da:	7842      	ldrb	r2, [r0, #1]
    d2dc:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d2de:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d2e0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d2e4:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d2e6:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d2e8:	f002 fd88 	bl	fdfc <WsfTimerStartSec>
      hciTrSendCmd(p);
    d2ec:	4628      	mov	r0, r5
    d2ee:	f002 f96f 	bl	f5d0 <hciTrSendCmd>
}
    d2f2:	e7e4      	b.n	d2be <HciLeReadSupStatesCmd+0x26>
    d2f4:	10004760 	.word	0x10004760

0000d2f8 <HciLeReadWhiteListSizeCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadWhiteListSizeCmd(void)
{
    d2f8:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    d2fa:	2003      	movs	r0, #3
{
    d2fc:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    d2fe:	f002 fb23 	bl	f948 <WsfMsgAlloc>
    d302:	b160      	cbz	r0, d31e <HciLeReadWhiteListSizeCmd+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d304:	4c13      	ldr	r4, [pc, #76]	; (d354 <HciLeReadWhiteListSizeCmd+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
    d306:	f242 030f 	movw	r3, #8207	; 0x200f
    UINT8_TO_BSTREAM(p, len);
    d30a:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
    d30c:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
    d30e:	4602      	mov	r2, r0
    d310:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d312:	f104 0010 	add.w	r0, r4, #16
    d316:	f002 fb35 	bl	f984 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
    d31a:	7ea3      	ldrb	r3, [r4, #26]
    d31c:	b90b      	cbnz	r3, d322 <HciLeReadWhiteListSizeCmd+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_WHITE_LIST_SIZE, HCI_LEN_LE_READ_WHITE_LIST_SIZE)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
    d31e:	b003      	add	sp, #12
    d320:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    d322:	f10d 0107 	add.w	r1, sp, #7
    d326:	f104 0010 	add.w	r0, r4, #16
    d32a:	f002 fb31 	bl	f990 <WsfMsgDeq>
    d32e:	4605      	mov	r5, r0
    d330:	2800      	cmp	r0, #0
    d332:	d0f4      	beq.n	d31e <HciLeReadWhiteListSizeCmd+0x26>
      hciCmdCb.numCmdPkts--;
    d334:	7ea3      	ldrb	r3, [r4, #26]
    d336:	3b01      	subs	r3, #1
    d338:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d33a:	7842      	ldrb	r2, [r0, #1]
    d33c:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d33e:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d340:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d344:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d346:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d348:	f002 fd58 	bl	fdfc <WsfTimerStartSec>
      hciTrSendCmd(p);
    d34c:	4628      	mov	r0, r5
    d34e:	f002 f93f 	bl	f5d0 <hciTrSendCmd>
}
    d352:	e7e4      	b.n	d31e <HciLeReadWhiteListSizeCmd+0x26>
    d354:	10004760 	.word	0x10004760

0000d358 <HciLeSetAdvEnableCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAdvEnableCmd(uint8_t enable)
{
    d358:	b570      	push	{r4, r5, r6, lr}
    d35a:	4604      	mov	r4, r0
    d35c:	b082      	sub	sp, #8
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    d35e:	2004      	movs	r0, #4
    d360:	f002 faf2 	bl	f948 <WsfMsgAlloc>
    d364:	b178      	cbz	r0, d386 <HciLeSetAdvEnableCmd+0x2e>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d366:	4d15      	ldr	r5, [pc, #84]	; (d3bc <HciLeSetAdvEnableCmd+0x64>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_ENABLE, HCI_LEN_LE_SET_ADV_ENABLE)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT8_TO_BSTREAM(p, enable);
    d368:	70c4      	strb	r4, [r0, #3]
    UINT16_TO_BSTREAM(p, opcode);
    d36a:	2320      	movs	r3, #32
    d36c:	7043      	strb	r3, [r0, #1]
    d36e:	260a      	movs	r6, #10
    UINT8_TO_BSTREAM(p, len);
    d370:	2301      	movs	r3, #1
    d372:	7083      	strb	r3, [r0, #2]
    d374:	4602      	mov	r2, r0
    UINT16_TO_BSTREAM(p, opcode);
    d376:	7006      	strb	r6, [r0, #0]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d378:	2100      	movs	r1, #0
    d37a:	f105 0010 	add.w	r0, r5, #16
    d37e:	f002 fb01 	bl	f984 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
    d382:	7eab      	ldrb	r3, [r5, #26]
    d384:	b90b      	cbnz	r3, d38a <HciLeSetAdvEnableCmd+0x32>
    hciCmdSend(pBuf);
  }
}
    d386:	b002      	add	sp, #8
    d388:	bd70      	pop	{r4, r5, r6, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    d38a:	f10d 0107 	add.w	r1, sp, #7
    d38e:	f105 0010 	add.w	r0, r5, #16
    d392:	f002 fafd 	bl	f990 <WsfMsgDeq>
    d396:	4604      	mov	r4, r0
    d398:	2800      	cmp	r0, #0
    d39a:	d0f4      	beq.n	d386 <HciLeSetAdvEnableCmd+0x2e>
      hciCmdCb.numCmdPkts--;
    d39c:	7eab      	ldrb	r3, [r5, #26]
    d39e:	3b01      	subs	r3, #1
    d3a0:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d3a2:	7842      	ldrb	r2, [r0, #1]
    d3a4:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d3a6:	4631      	mov	r1, r6
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d3a8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d3ac:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d3ae:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d3b0:	f002 fd24 	bl	fdfc <WsfTimerStartSec>
      hciTrSendCmd(p);
    d3b4:	4620      	mov	r0, r4
    d3b6:	f002 f90b 	bl	f5d0 <hciTrSendCmd>
}
    d3ba:	e7e4      	b.n	d386 <HciLeSetAdvEnableCmd+0x2e>
    d3bc:	10004760 	.word	0x10004760

0000d3c0 <HciLeSetAdvDataCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAdvDataCmd(uint8_t len, uint8_t *pData)
{
    d3c0:	b570      	push	{r4, r5, r6, lr}
    d3c2:	4605      	mov	r5, r0
    d3c4:	b082      	sub	sp, #8
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    d3c6:	2023      	movs	r0, #35	; 0x23
{
    d3c8:	460e      	mov	r6, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    d3ca:	f002 fabd 	bl	f948 <WsfMsgAlloc>
    d3ce:	b1d8      	cbz	r0, d408 <HciLeSetAdvDataCmd+0x48>
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_DATA, HCI_LEN_LE_SET_ADV_DATA)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT8_TO_BSTREAM(p, len);
    d3d0:	1d03      	adds	r3, r0, #4
    UINT16_TO_BSTREAM(p, opcode);
    d3d2:	2220      	movs	r2, #32
    d3d4:	2108      	movs	r1, #8
    d3d6:	7001      	strb	r1, [r0, #0]
    d3d8:	7042      	strb	r2, [r0, #1]
    memcpy(p, pData, len);
    d3da:	4631      	mov	r1, r6
    UINT8_TO_BSTREAM(p, len);
    d3dc:	7082      	strb	r2, [r0, #2]
    UINT8_TO_BSTREAM(p, len);
    d3de:	4604      	mov	r4, r0
    memcpy(p, pData, len);
    d3e0:	462a      	mov	r2, r5
    UINT8_TO_BSTREAM(p, len);
    d3e2:	70c5      	strb	r5, [r0, #3]
    memcpy(p, pData, len);
    d3e4:	4618      	mov	r0, r3
    d3e6:	f7fe fe8b 	bl	c100 <memcpy>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d3ea:	4e15      	ldr	r6, [pc, #84]	; (d440 <HciLeSetAdvDataCmd+0x80>)
    p += len;
    memset(p, 0, (HCI_ADV_DATA_LEN - len));
    d3ec:	f1c5 021f 	rsb	r2, r5, #31
    d3f0:	2100      	movs	r1, #0
    d3f2:	4428      	add	r0, r5
    d3f4:	f00f fb90 	bl	1cb18 <memset>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d3f8:	4622      	mov	r2, r4
    d3fa:	2100      	movs	r1, #0
    d3fc:	f106 0010 	add.w	r0, r6, #16
    d400:	f002 fac0 	bl	f984 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
    d404:	7eb3      	ldrb	r3, [r6, #26]
    d406:	b90b      	cbnz	r3, d40c <HciLeSetAdvDataCmd+0x4c>
    hciCmdSend(pBuf);
  }
}
    d408:	b002      	add	sp, #8
    d40a:	bd70      	pop	{r4, r5, r6, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    d40c:	f10d 0107 	add.w	r1, sp, #7
    d410:	f106 0010 	add.w	r0, r6, #16
    d414:	f002 fabc 	bl	f990 <WsfMsgDeq>
    d418:	4604      	mov	r4, r0
    d41a:	2800      	cmp	r0, #0
    d41c:	d0f4      	beq.n	d408 <HciLeSetAdvDataCmd+0x48>
      hciCmdCb.numCmdPkts--;
    d41e:	7eb3      	ldrb	r3, [r6, #26]
    d420:	3b01      	subs	r3, #1
    d422:	76b3      	strb	r3, [r6, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d424:	7842      	ldrb	r2, [r0, #1]
    d426:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d428:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d42a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d42e:	4630      	mov	r0, r6
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d430:	8333      	strh	r3, [r6, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d432:	f002 fce3 	bl	fdfc <WsfTimerStartSec>
      hciTrSendCmd(p);
    d436:	4620      	mov	r0, r4
    d438:	f002 f8ca 	bl	f5d0 <hciTrSendCmd>
}
    d43c:	e7e4      	b.n	d408 <HciLeSetAdvDataCmd+0x48>
    d43e:	bf00      	nop
    d440:	10004760 	.word	0x10004760

0000d444 <HciLeSetAdvParamCmd>:
 */
/*************************************************************************************************/
void HciLeSetAdvParamCmd(uint16_t advIntervalMin, uint16_t advIntervalMax, uint8_t advType,
                         uint8_t ownAddrType, uint8_t peerAddrType, uint8_t *pPeerAddr,
                         uint8_t advChanMap, uint8_t advFiltPolicy)
{
    d444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d448:	b083      	sub	sp, #12
    d44a:	4680      	mov	r8, r0
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    d44c:	2012      	movs	r0, #18
{
    d44e:	f89d b030 	ldrb.w	fp, [sp, #48]	; 0x30
    d452:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
    d456:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
    d45a:	460d      	mov	r5, r1
    d45c:	4617      	mov	r7, r2
    d45e:	461e      	mov	r6, r3
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    d460:	f002 fa72 	bl	f948 <WsfMsgAlloc>
    d464:	2800      	cmp	r0, #0
    d466:	d03f      	beq.n	d4e8 <HciLeSetAdvParamCmd+0xa4>
    UINT16_TO_BSTREAM(p, opcode);
    d468:	4604      	mov	r4, r0
    d46a:	2306      	movs	r3, #6
  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_PARAM, HCI_LEN_LE_SET_ADV_PARAM)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, advIntervalMin);
    UINT16_TO_BSTREAM(p, advIntervalMax);
    UINT8_TO_BSTREAM(p, advType);
    d46c:	71c7      	strb	r7, [r0, #7]
    UINT8_TO_BSTREAM(p, ownAddrType);
    d46e:	7206      	strb	r6, [r0, #8]
    UINT8_TO_BSTREAM(p, peerAddrType);
    d470:	f880 b009 	strb.w	fp, [r0, #9]
    UINT16_TO_BSTREAM(p, advIntervalMin);
    d474:	f880 8003 	strb.w	r8, [r0, #3]
    UINT16_TO_BSTREAM(p, opcode);
    d478:	7023      	strb	r3, [r4, #0]
    d47a:	2320      	movs	r3, #32
    d47c:	7063      	strb	r3, [r4, #1]
    UINT8_TO_BSTREAM(p, len);
    d47e:	230f      	movs	r3, #15
    d480:	70a3      	strb	r3, [r4, #2]
    if (pPeerAddr != NULL)
    d482:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    UINT16_TO_BSTREAM(p, advIntervalMax);
    d484:	7165      	strb	r5, [r4, #5]
    UINT16_TO_BSTREAM(p, advIntervalMin);
    d486:	ea4f 2018 	mov.w	r0, r8, lsr #8
    UINT16_TO_BSTREAM(p, advIntervalMax);
    d48a:	0a2d      	lsrs	r5, r5, #8
    UINT16_TO_BSTREAM(p, advIntervalMin);
    d48c:	7120      	strb	r0, [r4, #4]
    UINT16_TO_BSTREAM(p, advIntervalMax);
    d48e:	71a5      	strb	r5, [r4, #6]
    UINT8_TO_BSTREAM(p, peerAddrType);
    d490:	f104 000a 	add.w	r0, r4, #10
    if (pPeerAddr != NULL)
    d494:	b35b      	cbz	r3, d4ee <HciLeSetAdvParamCmd+0xaa>
    {
      BDA_TO_BSTREAM(p, pPeerAddr);
    d496:	4619      	mov	r1, r3
    d498:	f005 ff80 	bl	1339c <BdaCpy>
    d49c:	f104 0010 	add.w	r0, r4, #16
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d4a0:	4d14      	ldr	r5, [pc, #80]	; (d4f4 <HciLeSetAdvParamCmd+0xb0>)
    }
    else
    {
      p = BdaClr(p);
    }
    UINT8_TO_BSTREAM(p, advChanMap);
    d4a2:	f880 a000 	strb.w	sl, [r0]
    UINT8_TO_BSTREAM(p, advFiltPolicy);
    d4a6:	f880 9001 	strb.w	r9, [r0, #1]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d4aa:	4622      	mov	r2, r4
    d4ac:	2100      	movs	r1, #0
    d4ae:	f105 0010 	add.w	r0, r5, #16
    d4b2:	f002 fa67 	bl	f984 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
    d4b6:	7eab      	ldrb	r3, [r5, #26]
    d4b8:	b1b3      	cbz	r3, d4e8 <HciLeSetAdvParamCmd+0xa4>
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    d4ba:	f10d 0107 	add.w	r1, sp, #7
    d4be:	f105 0010 	add.w	r0, r5, #16
    d4c2:	f002 fa65 	bl	f990 <WsfMsgDeq>
    d4c6:	4604      	mov	r4, r0
    d4c8:	b170      	cbz	r0, d4e8 <HciLeSetAdvParamCmd+0xa4>
      hciCmdCb.numCmdPkts--;
    d4ca:	7eab      	ldrb	r3, [r5, #26]
    d4cc:	3b01      	subs	r3, #1
    d4ce:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d4d0:	7842      	ldrb	r2, [r0, #1]
    d4d2:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d4d4:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d4d6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d4da:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d4dc:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d4de:	f002 fc8d 	bl	fdfc <WsfTimerStartSec>
      hciTrSendCmd(p);
    d4e2:	4620      	mov	r0, r4
    d4e4:	f002 f874 	bl	f5d0 <hciTrSendCmd>
    hciCmdSend(pBuf);
  }
}
    d4e8:	b003      	add	sp, #12
    d4ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p = BdaClr(p);
    d4ee:	f005 ff63 	bl	133b8 <BdaClr>
    d4f2:	e7d5      	b.n	d4a0 <HciLeSetAdvParamCmd+0x5c>
    d4f4:	10004760 	.word	0x10004760

0000d4f8 <HciLeSetEventMaskCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetEventMaskCmd(uint8_t *pLeEventMask)
{
    d4f8:	b530      	push	{r4, r5, lr}
    d4fa:	4604      	mov	r4, r0
    d4fc:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    d4fe:	200b      	movs	r0, #11
    d500:	f002 fa22 	bl	f948 <WsfMsgAlloc>
    d504:	b198      	cbz	r0, d52e <HciLeSetEventMaskCmd+0x36>
    UINT16_TO_BSTREAM(p, opcode);
    d506:	f242 0101 	movw	r1, #8193	; 0x2001
    UINT8_TO_BSTREAM(p, len);
    d50a:	2308      	movs	r3, #8
    UINT16_TO_BSTREAM(p, opcode);
    d50c:	8001      	strh	r1, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
    d50e:	7083      	strb	r3, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d510:	4d14      	ldr	r5, [pc, #80]	; (d564 <HciLeSetEventMaskCmd+0x6c>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_EVENT_MASK, HCI_LEN_LE_SET_EVENT_MASK)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    memcpy(p, pLeEventMask, HCI_LE_EVT_MASK_LEN);
    d512:	6823      	ldr	r3, [r4, #0]
    d514:	6861      	ldr	r1, [r4, #4]
    d516:	f8c0 1007 	str.w	r1, [r0, #7]
    d51a:	f8c0 3003 	str.w	r3, [r0, #3]
    d51e:	4602      	mov	r2, r0
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d520:	2100      	movs	r1, #0
    d522:	f105 0010 	add.w	r0, r5, #16
    d526:	f002 fa2d 	bl	f984 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
    d52a:	7eab      	ldrb	r3, [r5, #26]
    d52c:	b90b      	cbnz	r3, d532 <HciLeSetEventMaskCmd+0x3a>
    hciCmdSend(pBuf);
  }
}
    d52e:	b003      	add	sp, #12
    d530:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    d532:	f10d 0107 	add.w	r1, sp, #7
    d536:	f105 0010 	add.w	r0, r5, #16
    d53a:	f002 fa29 	bl	f990 <WsfMsgDeq>
    d53e:	4604      	mov	r4, r0
    d540:	2800      	cmp	r0, #0
    d542:	d0f4      	beq.n	d52e <HciLeSetEventMaskCmd+0x36>
      hciCmdCb.numCmdPkts--;
    d544:	7eab      	ldrb	r3, [r5, #26]
    d546:	3b01      	subs	r3, #1
    d548:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d54a:	7842      	ldrb	r2, [r0, #1]
    d54c:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d54e:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d550:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d554:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d556:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d558:	f002 fc50 	bl	fdfc <WsfTimerStartSec>
      hciTrSendCmd(p);
    d55c:	4620      	mov	r0, r4
    d55e:	f002 f837 	bl	f5d0 <hciTrSendCmd>
}
    d562:	e7e4      	b.n	d52e <HciLeSetEventMaskCmd+0x36>
    d564:	10004760 	.word	0x10004760

0000d568 <HciLeSetScanRespDataCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetScanRespDataCmd(uint8_t len, uint8_t *pData)
{
    d568:	b570      	push	{r4, r5, r6, lr}
    d56a:	4605      	mov	r5, r0
    d56c:	b082      	sub	sp, #8
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    d56e:	2023      	movs	r0, #35	; 0x23
{
    d570:	460e      	mov	r6, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    d572:	f002 f9e9 	bl	f948 <WsfMsgAlloc>
    d576:	b1d8      	cbz	r0, d5b0 <HciLeSetScanRespDataCmd+0x48>
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_SCAN_RESP_DATA, HCI_LEN_LE_SET_SCAN_RESP_DATA)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT8_TO_BSTREAM(p, len);
    d578:	1d03      	adds	r3, r0, #4
    UINT16_TO_BSTREAM(p, opcode);
    d57a:	2220      	movs	r2, #32
    d57c:	2109      	movs	r1, #9
    d57e:	7001      	strb	r1, [r0, #0]
    d580:	7042      	strb	r2, [r0, #1]
    memcpy(p, pData, len);
    d582:	4631      	mov	r1, r6
    UINT8_TO_BSTREAM(p, len);
    d584:	7082      	strb	r2, [r0, #2]
    UINT8_TO_BSTREAM(p, len);
    d586:	4604      	mov	r4, r0
    memcpy(p, pData, len);
    d588:	462a      	mov	r2, r5
    UINT8_TO_BSTREAM(p, len);
    d58a:	70c5      	strb	r5, [r0, #3]
    memcpy(p, pData, len);
    d58c:	4618      	mov	r0, r3
    d58e:	f7fe fdb7 	bl	c100 <memcpy>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d592:	4e15      	ldr	r6, [pc, #84]	; (d5e8 <HciLeSetScanRespDataCmd+0x80>)
    p += len;
    memset(p, 0, (HCI_SCAN_DATA_LEN - len));
    d594:	f1c5 021f 	rsb	r2, r5, #31
    d598:	2100      	movs	r1, #0
    d59a:	4428      	add	r0, r5
    d59c:	f00f fabc 	bl	1cb18 <memset>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d5a0:	4622      	mov	r2, r4
    d5a2:	2100      	movs	r1, #0
    d5a4:	f106 0010 	add.w	r0, r6, #16
    d5a8:	f002 f9ec 	bl	f984 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
    d5ac:	7eb3      	ldrb	r3, [r6, #26]
    d5ae:	b90b      	cbnz	r3, d5b4 <HciLeSetScanRespDataCmd+0x4c>
    hciCmdSend(pBuf);
  }
}
    d5b0:	b002      	add	sp, #8
    d5b2:	bd70      	pop	{r4, r5, r6, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    d5b4:	f10d 0107 	add.w	r1, sp, #7
    d5b8:	f106 0010 	add.w	r0, r6, #16
    d5bc:	f002 f9e8 	bl	f990 <WsfMsgDeq>
    d5c0:	4604      	mov	r4, r0
    d5c2:	2800      	cmp	r0, #0
    d5c4:	d0f4      	beq.n	d5b0 <HciLeSetScanRespDataCmd+0x48>
      hciCmdCb.numCmdPkts--;
    d5c6:	7eb3      	ldrb	r3, [r6, #26]
    d5c8:	3b01      	subs	r3, #1
    d5ca:	76b3      	strb	r3, [r6, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d5cc:	7842      	ldrb	r2, [r0, #1]
    d5ce:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d5d0:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d5d2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d5d6:	4630      	mov	r0, r6
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d5d8:	8333      	strh	r3, [r6, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d5da:	f002 fc0f 	bl	fdfc <WsfTimerStartSec>
      hciTrSendCmd(p);
    d5de:	4620      	mov	r0, r4
    d5e0:	f001 fff6 	bl	f5d0 <hciTrSendCmd>
}
    d5e4:	e7e4      	b.n	d5b0 <HciLeSetScanRespDataCmd+0x48>
    d5e6:	bf00      	nop
    d5e8:	10004760 	.word	0x10004760

0000d5ec <HciLeStartEncryptionCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeStartEncryptionCmd(uint16_t handle, uint8_t *pRand, uint16_t diversifier, uint8_t *pKey)
{
    d5ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    d5ee:	4604      	mov	r4, r0
    d5f0:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    d5f2:	201f      	movs	r0, #31
{
    d5f4:	460d      	mov	r5, r1
    d5f6:	4617      	mov	r7, r2
    d5f8:	461e      	mov	r6, r3
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    d5fa:	f002 f9a5 	bl	f948 <WsfMsgAlloc>
    d5fe:	b330      	cbz	r0, d64e <HciLeStartEncryptionCmd+0x62>
    UINT16_TO_BSTREAM(p, opcode);
    d600:	2319      	movs	r3, #25
    d602:	7003      	strb	r3, [r0, #0]
    d604:	2320      	movs	r3, #32
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_START_ENCRYPTION, HCI_LEN_LE_START_ENCRYPTION)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
    d606:	70c4      	strb	r4, [r0, #3]
    UINT16_TO_BSTREAM(p, opcode);
    d608:	7043      	strb	r3, [r0, #1]
    UINT16_TO_BSTREAM(p, handle);
    d60a:	0a24      	lsrs	r4, r4, #8
    UINT8_TO_BSTREAM(p, len);
    d60c:	231c      	movs	r3, #28
    UINT16_TO_BSTREAM(p, handle);
    d60e:	7104      	strb	r4, [r0, #4]
    UINT8_TO_BSTREAM(p, len);
    d610:	7083      	strb	r3, [r0, #2]
    memcpy(p, pRand, HCI_RAND_LEN);
    d612:	682b      	ldr	r3, [r5, #0]
    d614:	686a      	ldr	r2, [r5, #4]
    d616:	f8c0 3005 	str.w	r3, [r0, #5]
    p += HCI_RAND_LEN;
    UINT16_TO_BSTREAM(p, diversifier);
    d61a:	0a3b      	lsrs	r3, r7, #8
    memcpy(p, pRand, HCI_RAND_LEN);
    d61c:	f8c0 2009 	str.w	r2, [r0, #9]
    UINT16_TO_BSTREAM(p, diversifier);
    d620:	7347      	strb	r7, [r0, #13]
    d622:	7383      	strb	r3, [r0, #14]
    memcpy(p, pKey, HCI_KEY_LEN);
    d624:	68f4      	ldr	r4, [r6, #12]
    d626:	6831      	ldr	r1, [r6, #0]
    d628:	6872      	ldr	r2, [r6, #4]
    d62a:	68b3      	ldr	r3, [r6, #8]
    d62c:	f8c0 401b 	str.w	r4, [r0, #27]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d630:	4c14      	ldr	r4, [pc, #80]	; (d684 <HciLeStartEncryptionCmd+0x98>)
    memcpy(p, pKey, HCI_KEY_LEN);
    d632:	f8c0 100f 	str.w	r1, [r0, #15]
    d636:	f8c0 2013 	str.w	r2, [r0, #19]
    d63a:	f8c0 3017 	str.w	r3, [r0, #23]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d63e:	4602      	mov	r2, r0
    d640:	2100      	movs	r1, #0
    d642:	f104 0010 	add.w	r0, r4, #16
    d646:	f002 f99d 	bl	f984 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
    d64a:	7ea3      	ldrb	r3, [r4, #26]
    d64c:	b90b      	cbnz	r3, d652 <HciLeStartEncryptionCmd+0x66>
    hciCmdSend(pBuf);
  }
}
    d64e:	b003      	add	sp, #12
    d650:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    d652:	f10d 0107 	add.w	r1, sp, #7
    d656:	f104 0010 	add.w	r0, r4, #16
    d65a:	f002 f999 	bl	f990 <WsfMsgDeq>
    d65e:	4605      	mov	r5, r0
    d660:	2800      	cmp	r0, #0
    d662:	d0f4      	beq.n	d64e <HciLeStartEncryptionCmd+0x62>
      hciCmdCb.numCmdPkts--;
    d664:	7ea3      	ldrb	r3, [r4, #26]
    d666:	3b01      	subs	r3, #1
    d668:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d66a:	7842      	ldrb	r2, [r0, #1]
    d66c:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d66e:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d670:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d674:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d676:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d678:	f002 fbc0 	bl	fdfc <WsfTimerStartSec>
      hciTrSendCmd(p);
    d67c:	4628      	mov	r0, r5
    d67e:	f001 ffa7 	bl	f5d0 <hciTrSendCmd>
}
    d682:	e7e4      	b.n	d64e <HciLeStartEncryptionCmd+0x62>
    d684:	10004760 	.word	0x10004760

0000d688 <HciReadBdAddrCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadBdAddrCmd(void)
{
    d688:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    d68a:	2003      	movs	r0, #3
{
    d68c:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    d68e:	f002 f95b 	bl	f948 <WsfMsgAlloc>
    d692:	b160      	cbz	r0, d6ae <HciReadBdAddrCmd+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d694:	4c13      	ldr	r4, [pc, #76]	; (d6e4 <HciReadBdAddrCmd+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
    d696:	f241 0309 	movw	r3, #4105	; 0x1009
    UINT8_TO_BSTREAM(p, len);
    d69a:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
    d69c:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
    d69e:	4602      	mov	r2, r0
    d6a0:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d6a2:	f104 0010 	add.w	r0, r4, #16
    d6a6:	f002 f96d 	bl	f984 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
    d6aa:	7ea3      	ldrb	r3, [r4, #26]
    d6ac:	b90b      	cbnz	r3, d6b2 <HciReadBdAddrCmd+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_BD_ADDR, HCI_LEN_READ_BD_ADDR)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
    d6ae:	b003      	add	sp, #12
    d6b0:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    d6b2:	f10d 0107 	add.w	r1, sp, #7
    d6b6:	f104 0010 	add.w	r0, r4, #16
    d6ba:	f002 f969 	bl	f990 <WsfMsgDeq>
    d6be:	4605      	mov	r5, r0
    d6c0:	2800      	cmp	r0, #0
    d6c2:	d0f4      	beq.n	d6ae <HciReadBdAddrCmd+0x26>
      hciCmdCb.numCmdPkts--;
    d6c4:	7ea3      	ldrb	r3, [r4, #26]
    d6c6:	3b01      	subs	r3, #1
    d6c8:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d6ca:	7842      	ldrb	r2, [r0, #1]
    d6cc:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d6ce:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d6d0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d6d4:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d6d6:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d6d8:	f002 fb90 	bl	fdfc <WsfTimerStartSec>
      hciTrSendCmd(p);
    d6dc:	4628      	mov	r0, r5
    d6de:	f001 ff77 	bl	f5d0 <hciTrSendCmd>
}
    d6e2:	e7e4      	b.n	d6ae <HciReadBdAddrCmd+0x26>
    d6e4:	10004760 	.word	0x10004760

0000d6e8 <HciReadLocalVerInfoCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadLocalVerInfoCmd(void)
{
    d6e8:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    d6ea:	2003      	movs	r0, #3
{
    d6ec:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    d6ee:	f002 f92b 	bl	f948 <WsfMsgAlloc>
    d6f2:	b160      	cbz	r0, d70e <HciReadLocalVerInfoCmd+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d6f4:	4c13      	ldr	r4, [pc, #76]	; (d744 <HciReadLocalVerInfoCmd+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
    d6f6:	f241 0301 	movw	r3, #4097	; 0x1001
    UINT8_TO_BSTREAM(p, len);
    d6fa:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
    d6fc:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
    d6fe:	4602      	mov	r2, r0
    d700:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d702:	f104 0010 	add.w	r0, r4, #16
    d706:	f002 f93d 	bl	f984 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
    d70a:	7ea3      	ldrb	r3, [r4, #26]
    d70c:	b90b      	cbnz	r3, d712 <HciReadLocalVerInfoCmd+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_LOCAL_VER_INFO, HCI_LEN_READ_LOCAL_VER_INFO)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
    d70e:	b003      	add	sp, #12
    d710:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    d712:	f10d 0107 	add.w	r1, sp, #7
    d716:	f104 0010 	add.w	r0, r4, #16
    d71a:	f002 f939 	bl	f990 <WsfMsgDeq>
    d71e:	4605      	mov	r5, r0
    d720:	2800      	cmp	r0, #0
    d722:	d0f4      	beq.n	d70e <HciReadLocalVerInfoCmd+0x26>
      hciCmdCb.numCmdPkts--;
    d724:	7ea3      	ldrb	r3, [r4, #26]
    d726:	3b01      	subs	r3, #1
    d728:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d72a:	7842      	ldrb	r2, [r0, #1]
    d72c:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d72e:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d730:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d734:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d736:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d738:	f002 fb60 	bl	fdfc <WsfTimerStartSec>
      hciTrSendCmd(p);
    d73c:	4628      	mov	r0, r5
    d73e:	f001 ff47 	bl	f5d0 <hciTrSendCmd>
}
    d742:	e7e4      	b.n	d70e <HciReadLocalVerInfoCmd+0x26>
    d744:	10004760 	.word	0x10004760

0000d748 <HciReadRssiCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadRssiCmd(uint16_t handle)
{
    d748:	b530      	push	{r4, r5, lr}
    d74a:	4604      	mov	r4, r0
    d74c:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    d74e:	2005      	movs	r0, #5
    d750:	f002 f8fa 	bl	f948 <WsfMsgAlloc>
    d754:	b188      	cbz	r0, d77a <HciReadRssiCmd+0x32>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d756:	4d16      	ldr	r5, [pc, #88]	; (d7b0 <HciReadRssiCmd+0x68>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_RSSI, HCI_LEN_READ_RSSI)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
    d758:	70c4      	strb	r4, [r0, #3]
    UINT16_TO_BSTREAM(p, opcode);
    d75a:	2105      	movs	r1, #5
    d75c:	2314      	movs	r3, #20
    d75e:	7001      	strb	r1, [r0, #0]
    d760:	7043      	strb	r3, [r0, #1]
    UINT8_TO_BSTREAM(p, len);
    d762:	2102      	movs	r1, #2
    UINT16_TO_BSTREAM(p, handle);
    d764:	0a23      	lsrs	r3, r4, #8
    UINT8_TO_BSTREAM(p, len);
    d766:	7081      	strb	r1, [r0, #2]
    UINT16_TO_BSTREAM(p, handle);
    d768:	7103      	strb	r3, [r0, #4]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d76a:	4602      	mov	r2, r0
    d76c:	2100      	movs	r1, #0
    d76e:	f105 0010 	add.w	r0, r5, #16
    d772:	f002 f907 	bl	f984 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
    d776:	7eab      	ldrb	r3, [r5, #26]
    d778:	b90b      	cbnz	r3, d77e <HciReadRssiCmd+0x36>
    hciCmdSend(pBuf);
  }
}
    d77a:	b003      	add	sp, #12
    d77c:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    d77e:	f10d 0107 	add.w	r1, sp, #7
    d782:	f105 0010 	add.w	r0, r5, #16
    d786:	f002 f903 	bl	f990 <WsfMsgDeq>
    d78a:	4604      	mov	r4, r0
    d78c:	2800      	cmp	r0, #0
    d78e:	d0f4      	beq.n	d77a <HciReadRssiCmd+0x32>
      hciCmdCb.numCmdPkts--;
    d790:	7eab      	ldrb	r3, [r5, #26]
    d792:	3b01      	subs	r3, #1
    d794:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d796:	7842      	ldrb	r2, [r0, #1]
    d798:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d79a:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d79c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d7a0:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d7a2:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d7a4:	f002 fb2a 	bl	fdfc <WsfTimerStartSec>
      hciTrSendCmd(p);
    d7a8:	4620      	mov	r0, r4
    d7aa:	f001 ff11 	bl	f5d0 <hciTrSendCmd>
}
    d7ae:	e7e4      	b.n	d77a <HciReadRssiCmd+0x32>
    d7b0:	10004760 	.word	0x10004760

0000d7b4 <HciResetCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciResetCmd(void)
{
    d7b4:	b570      	push	{r4, r5, r6, lr}
  hciHwErrorEvt_t evt;

  // let security module to clean up pending request/command
  evt.hdr.event = HCI_HW_ERROR_CBACK_EVT;

  hciCb.secCback((hciEvt_t *)&evt);
    d7b6:	4b20      	ldr	r3, [pc, #128]	; (d838 <HciResetCmd+0x84>)
    d7b8:	4e20      	ldr	r6, [pc, #128]	; (d83c <HciResetCmd+0x88>)
    d7ba:	68db      	ldr	r3, [r3, #12]
{
    d7bc:	b084      	sub	sp, #16
  evt.hdr.event = HCI_HW_ERROR_CBACK_EVT;
    d7be:	2214      	movs	r2, #20
    d7c0:	f88d 200a 	strb.w	r2, [sp, #10]
  hciCb.secCback((hciEvt_t *)&evt);
    d7c4:	a802      	add	r0, sp, #8
    d7c6:	4798      	blx	r3

  // Free up any unsent HCI commandss
  while((pBuf = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    d7c8:	f106 0510 	add.w	r5, r6, #16
    d7cc:	e001      	b.n	d7d2 <HciResetCmd+0x1e>
  {
    WsfMsgFree(pBuf);
    d7ce:	f002 f8c3 	bl	f958 <WsfMsgFree>
  while((pBuf = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    d7d2:	f10d 0106 	add.w	r1, sp, #6
    d7d6:	4628      	mov	r0, r5
    d7d8:	f002 f8da 	bl	f990 <WsfMsgDeq>
    d7dc:	4604      	mov	r4, r0
    d7de:	2800      	cmp	r0, #0
    d7e0:	d1f5      	bne.n	d7ce <HciResetCmd+0x1a>
  }

  /* initialize numCmdPkts for special case of reset command */
  hciCmdCb.numCmdPkts = 1;
    d7e2:	2301      	movs	r3, #1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    d7e4:	2003      	movs	r0, #3
  hciCmdCb.numCmdPkts = 1;
    d7e6:	76b3      	strb	r3, [r6, #26]
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    d7e8:	f002 f8ae 	bl	f948 <WsfMsgAlloc>
    d7ec:	4602      	mov	r2, r0
    d7ee:	b148      	cbz	r0, d804 <HciResetCmd+0x50>
    UINT16_TO_BSTREAM(p, opcode);
    d7f0:	f640 4303 	movw	r3, #3075	; 0xc03
    d7f4:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
    d7f6:	7084      	strb	r4, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d7f8:	4621      	mov	r1, r4
    d7fa:	4811      	ldr	r0, [pc, #68]	; (d840 <HciResetCmd+0x8c>)
    d7fc:	f002 f8c2 	bl	f984 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
    d800:	7eb3      	ldrb	r3, [r6, #26]
    d802:	b90b      	cbnz	r3, d808 <HciResetCmd+0x54>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_RESET, HCI_LEN_RESET)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
    d804:	b004      	add	sp, #16
    d806:	bd70      	pop	{r4, r5, r6, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    d808:	480d      	ldr	r0, [pc, #52]	; (d840 <HciResetCmd+0x8c>)
    d80a:	f10d 0107 	add.w	r1, sp, #7
    d80e:	f002 f8bf 	bl	f990 <WsfMsgDeq>
    d812:	4604      	mov	r4, r0
    d814:	2800      	cmp	r0, #0
    d816:	d0f5      	beq.n	d804 <HciResetCmd+0x50>
      hciCmdCb.numCmdPkts--;
    d818:	7eb3      	ldrb	r3, [r6, #26]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d81a:	4808      	ldr	r0, [pc, #32]	; (d83c <HciResetCmd+0x88>)
      hciCmdCb.numCmdPkts--;
    d81c:	3b01      	subs	r3, #1
    d81e:	76b3      	strb	r3, [r6, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d820:	7862      	ldrb	r2, [r4, #1]
    d822:	7823      	ldrb	r3, [r4, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d824:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d826:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    d82a:	8333      	strh	r3, [r6, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d82c:	f002 fae6 	bl	fdfc <WsfTimerStartSec>
      hciTrSendCmd(p);
    d830:	4620      	mov	r0, r4
    d832:	f001 fecd 	bl	f5d0 <hciTrSendCmd>
}
    d836:	e7e5      	b.n	d804 <HciResetCmd+0x50>
    d838:	10004a9c 	.word	0x10004a9c
    d83c:	10004760 	.word	0x10004760
    d840:	10004770 	.word	0x10004770

0000d844 <HciSetEventMaskCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSetEventMaskCmd(uint8_t *pEventMask)
{
    d844:	b530      	push	{r4, r5, lr}
    d846:	4604      	mov	r4, r0
    d848:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    d84a:	200b      	movs	r0, #11
    d84c:	f002 f87c 	bl	f948 <WsfMsgAlloc>
    d850:	b198      	cbz	r0, d87a <HciSetEventMaskCmd+0x36>
    UINT16_TO_BSTREAM(p, opcode);
    d852:	f640 4101 	movw	r1, #3073	; 0xc01
    UINT8_TO_BSTREAM(p, len);
    d856:	2308      	movs	r3, #8
    UINT16_TO_BSTREAM(p, opcode);
    d858:	8001      	strh	r1, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
    d85a:	7083      	strb	r3, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d85c:	4d14      	ldr	r5, [pc, #80]	; (d8b0 <HciSetEventMaskCmd+0x6c>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_SET_EVENT_MASK, HCI_LEN_SET_EVENT_MASK)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    memcpy(p, pEventMask, HCI_EVT_MASK_LEN);
    d85e:	6823      	ldr	r3, [r4, #0]
    d860:	6861      	ldr	r1, [r4, #4]
    d862:	f8c0 1007 	str.w	r1, [r0, #7]
    d866:	f8c0 3003 	str.w	r3, [r0, #3]
    d86a:	4602      	mov	r2, r0
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d86c:	2100      	movs	r1, #0
    d86e:	f105 0010 	add.w	r0, r5, #16
    d872:	f002 f887 	bl	f984 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
    d876:	7eab      	ldrb	r3, [r5, #26]
    d878:	b90b      	cbnz	r3, d87e <HciSetEventMaskCmd+0x3a>
    hciCmdSend(pBuf);
  }
}
    d87a:	b003      	add	sp, #12
    d87c:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    d87e:	f10d 0107 	add.w	r1, sp, #7
    d882:	f105 0010 	add.w	r0, r5, #16
    d886:	f002 f883 	bl	f990 <WsfMsgDeq>
    d88a:	4604      	mov	r4, r0
    d88c:	2800      	cmp	r0, #0
    d88e:	d0f4      	beq.n	d87a <HciSetEventMaskCmd+0x36>
      hciCmdCb.numCmdPkts--;
    d890:	7eab      	ldrb	r3, [r5, #26]
    d892:	3b01      	subs	r3, #1
    d894:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d896:	7842      	ldrb	r2, [r0, #1]
    d898:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d89a:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d89c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d8a0:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d8a2:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d8a4:	f002 faaa 	bl	fdfc <WsfTimerStartSec>
      hciTrSendCmd(p);
    d8a8:	4620      	mov	r0, r4
    d8aa:	f001 fe91 	bl	f5d0 <hciTrSendCmd>
}
    d8ae:	e7e4      	b.n	d87a <HciSetEventMaskCmd+0x36>
    d8b0:	10004760 	.word	0x10004760

0000d8b4 <HciSetEventMaskPage2Cmd>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciSetEventMaskPage2Cmd(uint8_t *pEventMask)
{
    d8b4:	b530      	push	{r4, r5, lr}
    d8b6:	4604      	mov	r4, r0
    d8b8:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    d8ba:	200b      	movs	r0, #11
    d8bc:	f002 f844 	bl	f948 <WsfMsgAlloc>
    d8c0:	b198      	cbz	r0, d8ea <HciSetEventMaskPage2Cmd+0x36>
    UINT16_TO_BSTREAM(p, opcode);
    d8c2:	f640 4163 	movw	r1, #3171	; 0xc63
    UINT8_TO_BSTREAM(p, len);
    d8c6:	2308      	movs	r3, #8
    UINT16_TO_BSTREAM(p, opcode);
    d8c8:	8001      	strh	r1, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
    d8ca:	7083      	strb	r3, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d8cc:	4d14      	ldr	r5, [pc, #80]	; (d920 <HciSetEventMaskPage2Cmd+0x6c>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_SET_EVENT_MASK_PAGE2, HCI_LEN_SET_EVENT_MASK_PAGE2)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    memcpy(p, pEventMask, HCI_EVT_MASK_PAGE_2_LEN);
    d8ce:	6823      	ldr	r3, [r4, #0]
    d8d0:	6861      	ldr	r1, [r4, #4]
    d8d2:	f8c0 1007 	str.w	r1, [r0, #7]
    d8d6:	f8c0 3003 	str.w	r3, [r0, #3]
    d8da:	4602      	mov	r2, r0
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d8dc:	2100      	movs	r1, #0
    d8de:	f105 0010 	add.w	r0, r5, #16
    d8e2:	f002 f84f 	bl	f984 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
    d8e6:	7eab      	ldrb	r3, [r5, #26]
    d8e8:	b90b      	cbnz	r3, d8ee <HciSetEventMaskPage2Cmd+0x3a>
    hciCmdSend(pBuf);
  }
}
    d8ea:	b003      	add	sp, #12
    d8ec:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    d8ee:	f10d 0107 	add.w	r1, sp, #7
    d8f2:	f105 0010 	add.w	r0, r5, #16
    d8f6:	f002 f84b 	bl	f990 <WsfMsgDeq>
    d8fa:	4604      	mov	r4, r0
    d8fc:	2800      	cmp	r0, #0
    d8fe:	d0f4      	beq.n	d8ea <HciSetEventMaskPage2Cmd+0x36>
      hciCmdCb.numCmdPkts--;
    d900:	7eab      	ldrb	r3, [r5, #26]
    d902:	3b01      	subs	r3, #1
    d904:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d906:	7842      	ldrb	r2, [r0, #1]
    d908:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d90a:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d90c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d910:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d912:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d914:	f002 fa72 	bl	fdfc <WsfTimerStartSec>
      hciTrSendCmd(p);
    d918:	4620      	mov	r0, r4
    d91a:	f001 fe59 	bl	f5d0 <hciTrSendCmd>
}
    d91e:	e7e4      	b.n	d8ea <HciSetEventMaskPage2Cmd+0x36>
    d920:	10004760 	.word	0x10004760

0000d924 <HciWriteAuthPayloadTimeout>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciWriteAuthPayloadTimeout(uint16_t handle, uint16_t timeout)
{
    d924:	b570      	push	{r4, r5, r6, lr}
    d926:	4605      	mov	r5, r0
    d928:	b082      	sub	sp, #8
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    d92a:	2007      	movs	r0, #7
{
    d92c:	460c      	mov	r4, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    d92e:	f002 f80b 	bl	f948 <WsfMsgAlloc>
    d932:	b1a0      	cbz	r0, d95e <HciWriteAuthPayloadTimeout+0x3a>
    UINT16_TO_BSTREAM(p, opcode);
    d934:	237c      	movs	r3, #124	; 0x7c
    d936:	7003      	strb	r3, [r0, #0]
    d938:	230c      	movs	r3, #12
    d93a:	7043      	strb	r3, [r0, #1]
    UINT8_TO_BSTREAM(p, len);
    d93c:	2304      	movs	r3, #4
    d93e:	7083      	strb	r3, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d940:	4e14      	ldr	r6, [pc, #80]	; (d994 <HciWriteAuthPayloadTimeout+0x70>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_WRITE_AUTH_PAYLOAD_TO, HCI_LEN_WRITE_AUTH_PAYLOAD_TO)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
    d942:	70c5      	strb	r5, [r0, #3]
    d944:	0a2b      	lsrs	r3, r5, #8
    d946:	7103      	strb	r3, [r0, #4]
    UINT16_TO_BSTREAM(p, timeout);
    d948:	0a23      	lsrs	r3, r4, #8
    d94a:	7183      	strb	r3, [r0, #6]
    d94c:	4602      	mov	r2, r0
    d94e:	7144      	strb	r4, [r0, #5]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d950:	2100      	movs	r1, #0
    d952:	f106 0010 	add.w	r0, r6, #16
    d956:	f002 f815 	bl	f984 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
    d95a:	7eb3      	ldrb	r3, [r6, #26]
    d95c:	b90b      	cbnz	r3, d962 <HciWriteAuthPayloadTimeout+0x3e>
    hciCmdSend(pBuf);
  }
}
    d95e:	b002      	add	sp, #8
    d960:	bd70      	pop	{r4, r5, r6, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    d962:	f10d 0107 	add.w	r1, sp, #7
    d966:	f106 0010 	add.w	r0, r6, #16
    d96a:	f002 f811 	bl	f990 <WsfMsgDeq>
    d96e:	4604      	mov	r4, r0
    d970:	2800      	cmp	r0, #0
    d972:	d0f4      	beq.n	d95e <HciWriteAuthPayloadTimeout+0x3a>
      hciCmdCb.numCmdPkts--;
    d974:	7eb3      	ldrb	r3, [r6, #26]
    d976:	3b01      	subs	r3, #1
    d978:	76b3      	strb	r3, [r6, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d97a:	7842      	ldrb	r2, [r0, #1]
    d97c:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d97e:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d980:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d984:	4630      	mov	r0, r6
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    d986:	8333      	strh	r3, [r6, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    d988:	f002 fa38 	bl	fdfc <WsfTimerStartSec>
      hciTrSendCmd(p);
    d98c:	4620      	mov	r0, r4
    d98e:	f001 fe1f 	bl	f5d0 <hciTrSendCmd>
}
    d992:	e7e4      	b.n	d95e <HciWriteAuthPayloadTimeout+0x3a>
    d994:	10004760 	.word	0x10004760

0000d998 <HciLeAddDeviceToResolvingListCmd>:
 *  \return None.
 */
/*************************************************************************************************/
void HciLeAddDeviceToResolvingListCmd(uint8_t peerAddrType, const uint8_t *pPeerIdentityAddr,
                                      const uint8_t *pPeerIrk, const uint8_t *pLocalIrk)
{
    d998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d99c:	4680      	mov	r8, r0
    d99e:	b082      	sub	sp, #8
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    d9a0:	202a      	movs	r0, #42	; 0x2a
{
    d9a2:	460f      	mov	r7, r1
    d9a4:	4616      	mov	r6, r2
    d9a6:	461d      	mov	r5, r3
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    d9a8:	f001 ffce 	bl	f948 <WsfMsgAlloc>
    d9ac:	b360      	cbz	r0, da08 <HciLeAddDeviceToResolvingListCmd+0x70>
    UINT16_TO_BSTREAM(p, opcode);
    d9ae:	4604      	mov	r4, r0
    d9b0:	2327      	movs	r3, #39	; 0x27
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ADD_DEV_RES_LIST, HCI_LEN_LE_ADD_DEV_RES_LIST)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT8_TO_BSTREAM(p, peerAddrType);
    d9b2:	f880 8003 	strb.w	r8, [r0, #3]
    UINT16_TO_BSTREAM(p, opcode);
    d9b6:	7023      	strb	r3, [r4, #0]
    UINT8_TO_BSTREAM(p, len);
    d9b8:	70a3      	strb	r3, [r4, #2]
    UINT16_TO_BSTREAM(p, opcode);
    d9ba:	2320      	movs	r3, #32
    BDA_TO_BSTREAM(p, pPeerIdentityAddr);
    d9bc:	4639      	mov	r1, r7
    d9be:	3004      	adds	r0, #4
    UINT16_TO_BSTREAM(p, opcode);
    d9c0:	7063      	strb	r3, [r4, #1]
    BDA_TO_BSTREAM(p, pPeerIdentityAddr);
    d9c2:	f005 fceb 	bl	1339c <BdaCpy>
    memcpy(p, pPeerIrk, HCI_KEY_LEN);
    d9c6:	6831      	ldr	r1, [r6, #0]
    d9c8:	6872      	ldr	r2, [r6, #4]
    d9ca:	68b3      	ldr	r3, [r6, #8]
    d9cc:	68f0      	ldr	r0, [r6, #12]
    d9ce:	f8c4 0016 	str.w	r0, [r4, #22]
    d9d2:	f8c4 100a 	str.w	r1, [r4, #10]
    d9d6:	f8c4 200e 	str.w	r2, [r4, #14]
    d9da:	f8c4 3012 	str.w	r3, [r4, #18]
    p += HCI_KEY_LEN;
    memcpy(p, pLocalIrk, HCI_KEY_LEN);
    d9de:	6829      	ldr	r1, [r5, #0]
    d9e0:	686a      	ldr	r2, [r5, #4]
    d9e2:	68ab      	ldr	r3, [r5, #8]
    d9e4:	68e8      	ldr	r0, [r5, #12]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d9e6:	4d16      	ldr	r5, [pc, #88]	; (da40 <HciLeAddDeviceToResolvingListCmd+0xa8>)
    memcpy(p, pLocalIrk, HCI_KEY_LEN);
    d9e8:	f8c4 0026 	str.w	r0, [r4, #38]	; 0x26
    d9ec:	f8c4 101a 	str.w	r1, [r4, #26]
    d9f0:	f8c4 201e 	str.w	r2, [r4, #30]
    d9f4:	f8c4 3022 	str.w	r3, [r4, #34]	; 0x22
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    d9f8:	4622      	mov	r2, r4
    d9fa:	2100      	movs	r1, #0
    d9fc:	f105 0010 	add.w	r0, r5, #16
    da00:	f001 ffc0 	bl	f984 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
    da04:	7eab      	ldrb	r3, [r5, #26]
    da06:	b913      	cbnz	r3, da0e <HciLeAddDeviceToResolvingListCmd+0x76>
    hciCmdSend(pBuf);
  }
}
    da08:	b002      	add	sp, #8
    da0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    da0e:	f10d 0107 	add.w	r1, sp, #7
    da12:	f105 0010 	add.w	r0, r5, #16
    da16:	f001 ffbb 	bl	f990 <WsfMsgDeq>
    da1a:	4604      	mov	r4, r0
    da1c:	2800      	cmp	r0, #0
    da1e:	d0f3      	beq.n	da08 <HciLeAddDeviceToResolvingListCmd+0x70>
      hciCmdCb.numCmdPkts--;
    da20:	7eab      	ldrb	r3, [r5, #26]
    da22:	3b01      	subs	r3, #1
    da24:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    da26:	7842      	ldrb	r2, [r0, #1]
    da28:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    da2a:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    da2c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    da30:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    da32:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    da34:	f002 f9e2 	bl	fdfc <WsfTimerStartSec>
      hciTrSendCmd(p);
    da38:	4620      	mov	r0, r4
    da3a:	f001 fdc9 	bl	f5d0 <hciTrSendCmd>
}
    da3e:	e7e3      	b.n	da08 <HciLeAddDeviceToResolvingListCmd+0x70>
    da40:	10004760 	.word	0x10004760

0000da44 <HciLeRemoveDeviceFromResolvingList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeRemoveDeviceFromResolvingList(uint8_t peerAddrType, const uint8_t *pPeerIdentityAddr)
{
    da44:	b5f0      	push	{r4, r5, r6, r7, lr}
    da46:	4607      	mov	r7, r0
    da48:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    da4a:	200a      	movs	r0, #10
{
    da4c:	460d      	mov	r5, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    da4e:	f001 ff7b 	bl	f948 <WsfMsgAlloc>
    da52:	b1a0      	cbz	r0, da7e <HciLeRemoveDeviceFromResolvingList+0x3a>
    UINT16_TO_BSTREAM(p, opcode);
    da54:	2328      	movs	r3, #40	; 0x28
    da56:	7003      	strb	r3, [r0, #0]
    da58:	4604      	mov	r4, r0
    da5a:	2320      	movs	r3, #32
    da5c:	7043      	strb	r3, [r0, #1]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    da5e:	4e15      	ldr	r6, [pc, #84]	; (dab4 <HciLeRemoveDeviceFromResolvingList+0x70>)
    UINT8_TO_BSTREAM(p, len);
    da60:	2307      	movs	r3, #7
    da62:	7083      	strb	r3, [r0, #2]

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REMOVE_DEV_RES_LIST, HCI_LEN_LE_REMOVE_DEV_RES_LIST)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT8_TO_BSTREAM(p, peerAddrType);
    BDA_TO_BSTREAM(p, pPeerIdentityAddr);
    da64:	4629      	mov	r1, r5
    da66:	3004      	adds	r0, #4
    UINT8_TO_BSTREAM(p, peerAddrType);
    da68:	70e7      	strb	r7, [r4, #3]
    BDA_TO_BSTREAM(p, pPeerIdentityAddr);
    da6a:	f005 fc97 	bl	1339c <BdaCpy>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    da6e:	4622      	mov	r2, r4
    da70:	2100      	movs	r1, #0
    da72:	f106 0010 	add.w	r0, r6, #16
    da76:	f001 ff85 	bl	f984 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
    da7a:	7eb3      	ldrb	r3, [r6, #26]
    da7c:	b90b      	cbnz	r3, da82 <HciLeRemoveDeviceFromResolvingList+0x3e>
    hciCmdSend(pBuf);
  }
}
    da7e:	b003      	add	sp, #12
    da80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    da82:	f10d 0107 	add.w	r1, sp, #7
    da86:	f106 0010 	add.w	r0, r6, #16
    da8a:	f001 ff81 	bl	f990 <WsfMsgDeq>
    da8e:	4604      	mov	r4, r0
    da90:	2800      	cmp	r0, #0
    da92:	d0f4      	beq.n	da7e <HciLeRemoveDeviceFromResolvingList+0x3a>
      hciCmdCb.numCmdPkts--;
    da94:	7eb3      	ldrb	r3, [r6, #26]
    da96:	3b01      	subs	r3, #1
    da98:	76b3      	strb	r3, [r6, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    da9a:	7842      	ldrb	r2, [r0, #1]
    da9c:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    da9e:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    daa0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    daa4:	4630      	mov	r0, r6
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    daa6:	8333      	strh	r3, [r6, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    daa8:	f002 f9a8 	bl	fdfc <WsfTimerStartSec>
      hciTrSendCmd(p);
    daac:	4620      	mov	r0, r4
    daae:	f001 fd8f 	bl	f5d0 <hciTrSendCmd>
}
    dab2:	e7e4      	b.n	da7e <HciLeRemoveDeviceFromResolvingList+0x3a>
    dab4:	10004760 	.word	0x10004760

0000dab8 <HciLeClearResolvingList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeClearResolvingList(void)
{
    dab8:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    daba:	2003      	movs	r0, #3
{
    dabc:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    dabe:	f001 ff43 	bl	f948 <WsfMsgAlloc>
    dac2:	b160      	cbz	r0, dade <HciLeClearResolvingList+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    dac4:	4c13      	ldr	r4, [pc, #76]	; (db14 <HciLeClearResolvingList+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
    dac6:	f242 0329 	movw	r3, #8233	; 0x2029
    UINT8_TO_BSTREAM(p, len);
    daca:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
    dacc:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
    dace:	4602      	mov	r2, r0
    dad0:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    dad2:	f104 0010 	add.w	r0, r4, #16
    dad6:	f001 ff55 	bl	f984 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
    dada:	7ea3      	ldrb	r3, [r4, #26]
    dadc:	b90b      	cbnz	r3, dae2 <HciLeClearResolvingList+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CLEAR_RES_LIST, HCI_LEN_LE_CLEAR_RES_LIST)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
    dade:	b003      	add	sp, #12
    dae0:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    dae2:	f10d 0107 	add.w	r1, sp, #7
    dae6:	f104 0010 	add.w	r0, r4, #16
    daea:	f001 ff51 	bl	f990 <WsfMsgDeq>
    daee:	4605      	mov	r5, r0
    daf0:	2800      	cmp	r0, #0
    daf2:	d0f4      	beq.n	dade <HciLeClearResolvingList+0x26>
      hciCmdCb.numCmdPkts--;
    daf4:	7ea3      	ldrb	r3, [r4, #26]
    daf6:	3b01      	subs	r3, #1
    daf8:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    dafa:	7842      	ldrb	r2, [r0, #1]
    dafc:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    dafe:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    db00:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    db04:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    db06:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    db08:	f002 f978 	bl	fdfc <WsfTimerStartSec>
      hciTrSendCmd(p);
    db0c:	4628      	mov	r0, r5
    db0e:	f001 fd5f 	bl	f5d0 <hciTrSendCmd>
}
    db12:	e7e4      	b.n	dade <HciLeClearResolvingList+0x26>
    db14:	10004760 	.word	0x10004760

0000db18 <HciLeReadResolvingListSize>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadResolvingListSize(void)
{
    db18:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    db1a:	2003      	movs	r0, #3
{
    db1c:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    db1e:	f001 ff13 	bl	f948 <WsfMsgAlloc>
    db22:	b160      	cbz	r0, db3e <HciLeReadResolvingListSize+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    db24:	4c13      	ldr	r4, [pc, #76]	; (db74 <HciLeReadResolvingListSize+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
    db26:	f242 032a 	movw	r3, #8234	; 0x202a
    UINT8_TO_BSTREAM(p, len);
    db2a:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
    db2c:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
    db2e:	4602      	mov	r2, r0
    db30:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    db32:	f104 0010 	add.w	r0, r4, #16
    db36:	f001 ff25 	bl	f984 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
    db3a:	7ea3      	ldrb	r3, [r4, #26]
    db3c:	b90b      	cbnz	r3, db42 <HciLeReadResolvingListSize+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_RES_LIST_SIZE, HCI_LEN_LE_READ_RES_LIST_SIZE)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
    db3e:	b003      	add	sp, #12
    db40:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    db42:	f10d 0107 	add.w	r1, sp, #7
    db46:	f104 0010 	add.w	r0, r4, #16
    db4a:	f001 ff21 	bl	f990 <WsfMsgDeq>
    db4e:	4605      	mov	r5, r0
    db50:	2800      	cmp	r0, #0
    db52:	d0f4      	beq.n	db3e <HciLeReadResolvingListSize+0x26>
      hciCmdCb.numCmdPkts--;
    db54:	7ea3      	ldrb	r3, [r4, #26]
    db56:	3b01      	subs	r3, #1
    db58:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    db5a:	7842      	ldrb	r2, [r0, #1]
    db5c:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    db5e:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    db60:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    db64:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    db66:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    db68:	f002 f948 	bl	fdfc <WsfTimerStartSec>
      hciTrSendCmd(p);
    db6c:	4628      	mov	r0, r5
    db6e:	f001 fd2f 	bl	f5d0 <hciTrSendCmd>
}
    db72:	e7e4      	b.n	db3e <HciLeReadResolvingListSize+0x26>
    db74:	10004760 	.word	0x10004760

0000db78 <HciLeSetAddrResolutionEnable>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAddrResolutionEnable(uint8_t enable)
{
    db78:	b530      	push	{r4, r5, lr}
    db7a:	4604      	mov	r4, r0
    db7c:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    db7e:	2004      	movs	r0, #4
    db80:	f001 fee2 	bl	f948 <WsfMsgAlloc>
    db84:	b178      	cbz	r0, dba6 <HciLeSetAddrResolutionEnable+0x2e>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    db86:	4d15      	ldr	r5, [pc, #84]	; (dbdc <HciLeSetAddrResolutionEnable+0x64>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADDR_RES_ENABLE, HCI_LEN_LE_SET_ADDR_RES_ENABLE)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT8_TO_BSTREAM(p, enable);
    db88:	70c4      	strb	r4, [r0, #3]
    UINT16_TO_BSTREAM(p, opcode);
    db8a:	2320      	movs	r3, #32
    db8c:	7043      	strb	r3, [r0, #1]
    db8e:	212d      	movs	r1, #45	; 0x2d
    UINT8_TO_BSTREAM(p, len);
    db90:	2301      	movs	r3, #1
    UINT16_TO_BSTREAM(p, opcode);
    db92:	7001      	strb	r1, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
    db94:	7083      	strb	r3, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    db96:	4602      	mov	r2, r0
    db98:	2100      	movs	r1, #0
    db9a:	f105 0010 	add.w	r0, r5, #16
    db9e:	f001 fef1 	bl	f984 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
    dba2:	7eab      	ldrb	r3, [r5, #26]
    dba4:	b90b      	cbnz	r3, dbaa <HciLeSetAddrResolutionEnable+0x32>
    hciCmdSend(pBuf);
  }
}
    dba6:	b003      	add	sp, #12
    dba8:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    dbaa:	f10d 0107 	add.w	r1, sp, #7
    dbae:	f105 0010 	add.w	r0, r5, #16
    dbb2:	f001 feed 	bl	f990 <WsfMsgDeq>
    dbb6:	4604      	mov	r4, r0
    dbb8:	2800      	cmp	r0, #0
    dbba:	d0f4      	beq.n	dba6 <HciLeSetAddrResolutionEnable+0x2e>
      hciCmdCb.numCmdPkts--;
    dbbc:	7eab      	ldrb	r3, [r5, #26]
    dbbe:	3b01      	subs	r3, #1
    dbc0:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    dbc2:	7842      	ldrb	r2, [r0, #1]
    dbc4:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    dbc6:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    dbc8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    dbcc:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    dbce:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    dbd0:	f002 f914 	bl	fdfc <WsfTimerStartSec>
      hciTrSendCmd(p);
    dbd4:	4620      	mov	r0, r4
    dbd6:	f001 fcfb 	bl	f5d0 <hciTrSendCmd>
}
    dbda:	e7e4      	b.n	dba6 <HciLeSetAddrResolutionEnable+0x2e>
    dbdc:	10004760 	.word	0x10004760

0000dbe0 <HciLeSetPrivacyModeCmd>:
 *
 *  \return     None.
 */
/*************************************************************************************************/
void HciLeSetPrivacyModeCmd(uint8_t addrType, uint8_t *pAddr, uint8_t mode)
{
    dbe0:	b5f0      	push	{r4, r5, r6, r7, lr}
    dbe2:	4607      	mov	r7, r0
    dbe4:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    dbe6:	200b      	movs	r0, #11
{
    dbe8:	460d      	mov	r5, r1
    dbea:	4616      	mov	r6, r2
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    dbec:	f001 feac 	bl	f948 <WsfMsgAlloc>
    dbf0:	b1a8      	cbz	r0, dc1e <HciLeSetPrivacyModeCmd+0x3e>
    UINT16_TO_BSTREAM(p, opcode);
    dbf2:	234e      	movs	r3, #78	; 0x4e
    dbf4:	7003      	strb	r3, [r0, #0]
    dbf6:	4604      	mov	r4, r0
    dbf8:	2320      	movs	r3, #32
    dbfa:	7043      	strb	r3, [r0, #1]

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_PRIVACY_MODE, HCI_LEN_LE_SET_PRIVACY_MODE)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT8_TO_BSTREAM(p, addrType);
    BDA_TO_BSTREAM(p, pAddr);
    dbfc:	4629      	mov	r1, r5
    UINT8_TO_BSTREAM(p, len);
    dbfe:	2308      	movs	r3, #8
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    dc00:	4d14      	ldr	r5, [pc, #80]	; (dc54 <HciLeSetPrivacyModeCmd+0x74>)
    UINT8_TO_BSTREAM(p, len);
    dc02:	7083      	strb	r3, [r0, #2]
    BDA_TO_BSTREAM(p, pAddr);
    dc04:	3004      	adds	r0, #4
    UINT8_TO_BSTREAM(p, addrType);
    dc06:	70e7      	strb	r7, [r4, #3]
    BDA_TO_BSTREAM(p, pAddr);
    dc08:	f005 fbc8 	bl	1339c <BdaCpy>
    UINT8_TO_BSTREAM(p, mode);
    dc0c:	72a6      	strb	r6, [r4, #10]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    dc0e:	4622      	mov	r2, r4
    dc10:	2100      	movs	r1, #0
    dc12:	f105 0010 	add.w	r0, r5, #16
    dc16:	f001 feb5 	bl	f984 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
    dc1a:	7eab      	ldrb	r3, [r5, #26]
    dc1c:	b90b      	cbnz	r3, dc22 <HciLeSetPrivacyModeCmd+0x42>
    hciCmdSend(pBuf);
  }
}
    dc1e:	b003      	add	sp, #12
    dc20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    dc22:	f10d 0107 	add.w	r1, sp, #7
    dc26:	f105 0010 	add.w	r0, r5, #16
    dc2a:	f001 feb1 	bl	f990 <WsfMsgDeq>
    dc2e:	4604      	mov	r4, r0
    dc30:	2800      	cmp	r0, #0
    dc32:	d0f4      	beq.n	dc1e <HciLeSetPrivacyModeCmd+0x3e>
      hciCmdCb.numCmdPkts--;
    dc34:	7eab      	ldrb	r3, [r5, #26]
    dc36:	3b01      	subs	r3, #1
    dc38:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    dc3a:	7842      	ldrb	r2, [r0, #1]
    dc3c:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    dc3e:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    dc40:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    dc44:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    dc46:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    dc48:	f002 f8d8 	bl	fdfc <WsfTimerStartSec>
      hciTrSendCmd(p);
    dc4c:	4620      	mov	r0, r4
    dc4e:	f001 fcbf 	bl	f5d0 <hciTrSendCmd>
}
    dc52:	e7e4      	b.n	dc1e <HciLeSetPrivacyModeCmd+0x3e>
    dc54:	10004760 	.word	0x10004760

0000dc58 <HciLeTransmitterTestCmd>:
 *
 *  \return     None.
 */
/*************************************************************************************************/
void HciLeTransmitterTestCmd(uint8_t TX_Channel, uint8_t len_of_test_data, uint8_t packet_payload)
{
    dc58:	b5f0      	push	{r4, r5, r6, r7, lr}
    dc5a:	4607      	mov	r7, r0
    dc5c:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    dc5e:	2006      	movs	r0, #6
{
    dc60:	460e      	mov	r6, r1
    dc62:	4615      	mov	r5, r2
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    dc64:	f001 fe70 	bl	f948 <WsfMsgAlloc>
    dc68:	b188      	cbz	r0, dc8e <HciLeTransmitterTestCmd+0x36>
    UINT16_TO_BSTREAM(p, opcode);
    dc6a:	231e      	movs	r3, #30
    dc6c:	7003      	strb	r3, [r0, #0]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    dc6e:	4c15      	ldr	r4, [pc, #84]	; (dcc4 <HciLeTransmitterTestCmd+0x6c>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_TRANSMITTER_TEST, HCI_LEN_LE_TRANSMITTER_TEST)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT8_TO_BSTREAM(p, TX_Channel);
    dc70:	70c7      	strb	r7, [r0, #3]
    UINT16_TO_BSTREAM(p, opcode);
    dc72:	2320      	movs	r3, #32
    dc74:	7043      	strb	r3, [r0, #1]
    UINT8_TO_BSTREAM(p, len);
    dc76:	2303      	movs	r3, #3
    dc78:	7083      	strb	r3, [r0, #2]
    UINT8_TO_BSTREAM(p, len_of_test_data);
    dc7a:	4602      	mov	r2, r0
    dc7c:	7106      	strb	r6, [r0, #4]
    UINT8_TO_BSTREAM(p, packet_payload);
    dc7e:	7145      	strb	r5, [r0, #5]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    dc80:	2100      	movs	r1, #0
    dc82:	f104 0010 	add.w	r0, r4, #16
    dc86:	f001 fe7d 	bl	f984 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
    dc8a:	7ea3      	ldrb	r3, [r4, #26]
    dc8c:	b90b      	cbnz	r3, dc92 <HciLeTransmitterTestCmd+0x3a>
    hciCmdSend(pBuf);
  }
}
    dc8e:	b003      	add	sp, #12
    dc90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    dc92:	f10d 0107 	add.w	r1, sp, #7
    dc96:	f104 0010 	add.w	r0, r4, #16
    dc9a:	f001 fe79 	bl	f990 <WsfMsgDeq>
    dc9e:	4605      	mov	r5, r0
    dca0:	2800      	cmp	r0, #0
    dca2:	d0f4      	beq.n	dc8e <HciLeTransmitterTestCmd+0x36>
      hciCmdCb.numCmdPkts--;
    dca4:	7ea3      	ldrb	r3, [r4, #26]
    dca6:	3b01      	subs	r3, #1
    dca8:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    dcaa:	7842      	ldrb	r2, [r0, #1]
    dcac:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    dcae:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    dcb0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    dcb4:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    dcb6:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    dcb8:	f002 f8a0 	bl	fdfc <WsfTimerStartSec>
      hciTrSendCmd(p);
    dcbc:	4628      	mov	r0, r5
    dcbe:	f001 fc87 	bl	f5d0 <hciTrSendCmd>
}
    dcc2:	e7e4      	b.n	dc8e <HciLeTransmitterTestCmd+0x36>
    dcc4:	10004760 	.word	0x10004760

0000dcc8 <HciLeTestEndCmd>:
 *
 *  \return     None.
 */
/*************************************************************************************************/
void HciLeTestEndCmd(void)
{
    dcc8:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    dcca:	2003      	movs	r0, #3
{
    dccc:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    dcce:	f001 fe3b 	bl	f948 <WsfMsgAlloc>
    dcd2:	b160      	cbz	r0, dcee <HciLeTestEndCmd+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    dcd4:	4c13      	ldr	r4, [pc, #76]	; (dd24 <HciLeTestEndCmd+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
    dcd6:	f242 031f 	movw	r3, #8223	; 0x201f
    UINT8_TO_BSTREAM(p, len);
    dcda:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
    dcdc:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
    dcde:	4602      	mov	r2, r0
    dce0:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    dce2:	f104 0010 	add.w	r0, r4, #16
    dce6:	f001 fe4d 	bl	f984 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
    dcea:	7ea3      	ldrb	r3, [r4, #26]
    dcec:	b90b      	cbnz	r3, dcf2 <HciLeTestEndCmd+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_TEST_END, HCI_LEN_LE_TEST_END)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
    dcee:	b003      	add	sp, #12
    dcf0:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    dcf2:	f10d 0107 	add.w	r1, sp, #7
    dcf6:	f104 0010 	add.w	r0, r4, #16
    dcfa:	f001 fe49 	bl	f990 <WsfMsgDeq>
    dcfe:	4605      	mov	r5, r0
    dd00:	2800      	cmp	r0, #0
    dd02:	d0f4      	beq.n	dcee <HciLeTestEndCmd+0x26>
      hciCmdCb.numCmdPkts--;
    dd04:	7ea3      	ldrb	r3, [r4, #26]
    dd06:	3b01      	subs	r3, #1
    dd08:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    dd0a:	7842      	ldrb	r2, [r0, #1]
    dd0c:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    dd0e:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    dd10:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    dd14:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    dd16:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    dd18:	f002 f870 	bl	fdfc <WsfTimerStartSec>
      hciTrSendCmd(p);
    dd1c:	4628      	mov	r0, r5
    dd1e:	f001 fc57 	bl	f5d0 <hciTrSendCmd>
}
    dd22:	e7e4      	b.n	dcee <HciLeTestEndCmd+0x26>
    dd24:	10004760 	.word	0x10004760

0000dd28 <HciVendorSpecificCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciVendorSpecificCmd(uint16_t opcode, uint8_t len, uint8_t *pData)
{
    dd28:	b5f0      	push	{r4, r5, r6, r7, lr}
    dd2a:	4606      	mov	r6, r0
    dd2c:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    dd2e:	1cc8      	adds	r0, r1, #3
{
    dd30:	460d      	mov	r5, r1
    dd32:	4617      	mov	r7, r2
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    dd34:	f001 fe08 	bl	f948 <WsfMsgAlloc>
    dd38:	b190      	cbz	r0, dd60 <HciVendorSpecificCmd+0x38>
    UINT16_TO_BSTREAM(p, opcode);
    dd3a:	0a33      	lsrs	r3, r6, #8
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(opcode, len)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    memcpy(p, pData, len);
    dd3c:	462a      	mov	r2, r5
    UINT8_TO_BSTREAM(p, len);
    dd3e:	7085      	strb	r5, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    dd40:	4d15      	ldr	r5, [pc, #84]	; (dd98 <HciVendorSpecificCmd+0x70>)
    UINT16_TO_BSTREAM(p, opcode);
    dd42:	7043      	strb	r3, [r0, #1]
    dd44:	4604      	mov	r4, r0
    memcpy(p, pData, len);
    dd46:	4639      	mov	r1, r7
    UINT16_TO_BSTREAM(p, opcode);
    dd48:	7006      	strb	r6, [r0, #0]
    memcpy(p, pData, len);
    dd4a:	3003      	adds	r0, #3
    dd4c:	f7fe f9d8 	bl	c100 <memcpy>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    dd50:	4622      	mov	r2, r4
    dd52:	2100      	movs	r1, #0
    dd54:	f105 0010 	add.w	r0, r5, #16
    dd58:	f001 fe14 	bl	f984 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
    dd5c:	7eab      	ldrb	r3, [r5, #26]
    dd5e:	b90b      	cbnz	r3, dd64 <HciVendorSpecificCmd+0x3c>
    hciCmdSend(pBuf);
  }
}
    dd60:	b003      	add	sp, #12
    dd62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    dd64:	f10d 0107 	add.w	r1, sp, #7
    dd68:	f105 0010 	add.w	r0, r5, #16
    dd6c:	f001 fe10 	bl	f990 <WsfMsgDeq>
    dd70:	4604      	mov	r4, r0
    dd72:	2800      	cmp	r0, #0
    dd74:	d0f4      	beq.n	dd60 <HciVendorSpecificCmd+0x38>
      hciCmdCb.numCmdPkts--;
    dd76:	7eab      	ldrb	r3, [r5, #26]
    dd78:	3b01      	subs	r3, #1
    dd7a:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    dd7c:	7842      	ldrb	r2, [r0, #1]
    dd7e:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    dd80:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    dd82:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    dd86:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    dd88:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    dd8a:	f002 f837 	bl	fdfc <WsfTimerStartSec>
      hciTrSendCmd(p);
    dd8e:	4620      	mov	r0, r4
    dd90:	f001 fc1e 	bl	f5d0 <hciTrSendCmd>
}
    dd94:	e7e4      	b.n	dd60 <HciVendorSpecificCmd+0x38>
    dd96:	bf00      	nop
    dd98:	10004760 	.word	0x10004760

0000dd9c <hciCoreConnByHandle>:
  hciCoreConn_t   *pConn = hciCoreCb.conn;

  /* find available connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
  {
    if (pConn->handle == handle)
    dd9c:	4b09      	ldr	r3, [pc, #36]	; (ddc4 <hciCoreConnByHandle+0x28>)
    dd9e:	8a19      	ldrh	r1, [r3, #16]
    dda0:	4281      	cmp	r1, r0
    dda2:	d00a      	beq.n	ddba <hciCoreConnByHandle+0x1e>
    dda4:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
    dda6:	4281      	cmp	r1, r0
    dda8:	d009      	beq.n	ddbe <hciCoreConnByHandle+0x22>
    ddaa:	f8b3 1048 	ldrh.w	r1, [r3, #72]	; 0x48
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
    ddae:	3338      	adds	r3, #56	; 0x38
    ddb0:	4281      	cmp	r1, r0
    ddb2:	bf0c      	ite	eq
    ddb4:	4618      	moveq	r0, r3
    ddb6:	2000      	movne	r0, #0
    ddb8:	4770      	bx	lr
  hciCoreConn_t   *pConn = hciCoreCb.conn;
    ddba:	4618      	mov	r0, r3
    ddbc:	4770      	bx	lr
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
    ddbe:	f103 001c 	add.w	r0, r3, #28
      return pConn;
    }
  }

  return NULL;
}
    ddc2:	4770      	bx	lr
    ddc4:	1000477c 	.word	0x1000477c

0000ddc8 <hciCoreConnOpen>:
    if (pConn->handle == HCI_HANDLE_NONE)
    ddc8:	4b0b      	ldr	r3, [pc, #44]	; (ddf8 <hciCoreConnOpen+0x30>)
    ddca:	8a19      	ldrh	r1, [r3, #16]
    ddcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ddd0:	4291      	cmp	r1, r2
    ddd2:	d00a      	beq.n	ddea <hciCoreConnOpen+0x22>
    ddd4:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
    ddd6:	4291      	cmp	r1, r2
    ddd8:	d006      	beq.n	dde8 <hciCoreConnOpen+0x20>
    ddda:	f8b3 1048 	ldrh.w	r1, [r3, #72]	; 0x48
    ddde:	4291      	cmp	r1, r2
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
    dde0:	bf08      	it	eq
    dde2:	3338      	addeq	r3, #56	; 0x38
    if (pConn->handle == HCI_HANDLE_NONE)
    dde4:	d001      	beq.n	ddea <hciCoreConnOpen+0x22>
/*************************************************************************************************/
void hciCoreConnOpen(uint16_t handle)
{
  /* allocate connection structure */
  hciCoreConnAlloc(handle);
}
    dde6:	4770      	bx	lr
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
    dde8:	331c      	adds	r3, #28
      pConn->outBufs = 0;
    ddea:	2200      	movs	r2, #0
      pConn->handle = handle;
    ddec:	8218      	strh	r0, [r3, #16]
      pConn->outBufs = 0;
    ddee:	765a      	strb	r2, [r3, #25]
      pConn->flowDisabled = FALSE;
    ddf0:	f8a3 2017 	strh.w	r2, [r3, #23]
}
    ddf4:	4770      	bx	lr
    ddf6:	bf00      	nop
    ddf8:	1000477c 	.word	0x1000477c

0000ddfc <hciCoreTxAclStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxAclStart(hciCoreConn_t *pConn, uint16_t len, uint8_t *pData)
{
    ddfc:	b570      	push	{r4, r5, r6, lr}
    ddfe:	460e      	mov	r6, r1
    de00:	4604      	mov	r4, r0
    de02:	4615      	mov	r5, r2
  uint16_t hciLen;

  /* make sure not already fragmenting on this connection */
  WSF_ASSERT(pConn->fragmenting == FALSE);

  hciLen = HciGetBufSize();
    de04:	f000 fb4e 	bl	e4a4 <HciGetBufSize>

  HCI_TRACE_INFO1("hciCoreTxAclStart len=%u", len);

  /* if acl len > controller acl buf len */
  if (len > hciLen)
    de08:	42b0      	cmp	r0, r6
    de0a:	d24b      	bcs.n	dea4 <hciCoreTxAclStart+0xa8>
  {
    /* store remaining acl len = acl len - hci acl buf len */
    pConn->txAclRemLen = len - hciLen;

    /* store position for next fragment */
    pConn->pNextTxFrag = pData + hciLen;
    de0c:	182b      	adds	r3, r5, r0
    de0e:	6063      	str	r3, [r4, #4]
    pConn->txAclRemLen = len - hciLen;
    de10:	1a36      	subs	r6, r6, r0
    /* store information required for fragmentation */
    pConn->pTxAclPkt = pData;
    pConn->fragmenting = TRUE;

    /* set acl len in packet to hci acl buf len */
    UINT16_TO_BUF(&pData[2], hciLen);
    de12:	0a03      	lsrs	r3, r0, #8
    pConn->fragmenting = TRUE;
    de14:	2201      	movs	r2, #1
    pConn->txAclRemLen = len - hciLen;
    de16:	8266      	strh	r6, [r4, #18]
    pConn->pTxAclPkt = pData;
    de18:	6025      	str	r5, [r4, #0]
    pConn->fragmenting = TRUE;
    de1a:	75a2      	strb	r2, [r4, #22]
    UINT16_TO_BUF(&pData[2], hciLen);
    de1c:	70a8      	strb	r0, [r5, #2]
    de1e:	70eb      	strb	r3, [r5, #3]
  pConn->outBufs++;
    de20:	7e63      	ldrb	r3, [r4, #25]
  if (hciCoreCb.availBufs > 0)
    de22:	4e2f      	ldr	r6, [pc, #188]	; (dee0 <hciCoreTxAclStart+0xe4>)
  pConn->outBufs++;
    de24:	4413      	add	r3, r2
    de26:	7663      	strb	r3, [r4, #25]
  hciTrSendAclData(pConn, pData);
    de28:	4629      	mov	r1, r5
    de2a:	4620      	mov	r0, r4
    de2c:	f001 fbb8 	bl	f5a0 <hciTrSendAclData>
  if (hciCoreCb.availBufs > 0)
    de30:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76
    de34:	2b00      	cmp	r3, #0
    de36:	d040      	beq.n	deba <hciCoreTxAclStart+0xbe>
    hciCoreCb.availBufs--;
    de38:	3b01      	subs	r3, #1
    de3a:	b2db      	uxtb	r3, r3
    de3c:	f886 3076 	strb.w	r3, [r6, #118]	; 0x76

    /* send the packet */
    hciCoreSendAclData(pConn, pData);

    /* send additional fragments while there are HCI buffers available */
    while ((hciCoreCb.availBufs > 0) && hciCoreTxAclContinue(pConn));
    de40:	2b00      	cmp	r3, #0
    de42:	d03a      	beq.n	deba <hciCoreTxAclStart+0xbe>
  }

  if (pConn != NULL)
  {
    /* get next fragment length */
    aclLen = (pConn->txAclRemLen < HciGetBufSize()) ? pConn->txAclRemLen : HciGetBufSize();
    de44:	8a65      	ldrh	r5, [r4, #18]
    de46:	f000 fb2d 	bl	e4a4 <HciGetBufSize>
    de4a:	4285      	cmp	r5, r0
    de4c:	d23a      	bcs.n	dec4 <hciCoreTxAclStart+0xc8>
    de4e:	8a65      	ldrh	r5, [r4, #18]

    if (aclLen > 0)
    de50:	2d00      	cmp	r5, #0
    de52:	d032      	beq.n	deba <hciCoreTxAclStart+0xbe>
    {
      /* decrement remaining length */
      pConn->txAclRemLen -= aclLen;
    de54:	8a63      	ldrh	r3, [r4, #18]

      /* set handle in packet with continuation bit set */
      UINT16_TO_BUF(pConn->pNextTxFrag, (pConn->handle | HCI_PB_CONTINUE));
    de56:	6862      	ldr	r2, [r4, #4]
      pConn->txAclRemLen -= aclLen;
    de58:	1b5b      	subs	r3, r3, r5
    de5a:	8263      	strh	r3, [r4, #18]
      UINT16_TO_BUF(pConn->pNextTxFrag, (pConn->handle | HCI_PB_CONTINUE));
    de5c:	8a23      	ldrh	r3, [r4, #16]
    de5e:	7013      	strb	r3, [r2, #0]
    de60:	8a23      	ldrh	r3, [r4, #16]
    de62:	6862      	ldr	r2, [r4, #4]
    de64:	0a1b      	lsrs	r3, r3, #8
    de66:	f043 0310 	orr.w	r3, r3, #16
    de6a:	7053      	strb	r3, [r2, #1]

      /* set acl len in packet */
      UINT16_TO_BUF(&(pConn->pNextTxFrag[2]), aclLen);
    de6c:	6862      	ldr	r2, [r4, #4]
    de6e:	7095      	strb	r5, [r2, #2]
    de70:	6862      	ldr	r2, [r4, #4]
    de72:	0a2b      	lsrs	r3, r5, #8
    de74:	70d3      	strb	r3, [r2, #3]
  pConn->outBufs++;
    de76:	7e63      	ldrb	r3, [r4, #25]
  hciTrSendAclData(pConn, pData);
    de78:	6861      	ldr	r1, [r4, #4]
  pConn->outBufs++;
    de7a:	3301      	adds	r3, #1
    de7c:	7663      	strb	r3, [r4, #25]
  hciTrSendAclData(pConn, pData);
    de7e:	4620      	mov	r0, r4
    de80:	f001 fb8e 	bl	f5a0 <hciTrSendAclData>
  if (hciCoreCb.availBufs > 0)
    de84:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76
    de88:	b303      	cbz	r3, decc <hciCoreTxAclStart+0xd0>
    hciCoreCb.availBufs--;
    de8a:	3b01      	subs	r3, #1
    de8c:	b2db      	uxtb	r3, r3
    de8e:	f886 3076 	strb.w	r3, [r6, #118]	; 0x76

      /* send the packet */
      hciCoreSendAclData(pConn, pConn->pNextTxFrag);

      /* set up pointer to next fragment */
      if (pConn->txAclRemLen > 0)
    de92:	8a62      	ldrh	r2, [r4, #18]
    de94:	2a00      	cmp	r2, #0
    de96:	d0d3      	beq.n	de40 <hciCoreTxAclStart+0x44>
      {
        pConn->pNextTxFrag += aclLen;
    de98:	6863      	ldr	r3, [r4, #4]
    de9a:	442b      	add	r3, r5
    de9c:	6063      	str	r3, [r4, #4]
    while ((hciCoreCb.availBufs > 0) && hciCoreTxAclContinue(pConn));
    de9e:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76
    dea2:	e7cd      	b.n	de40 <hciCoreTxAclStart+0x44>
  pConn->outBufs++;
    dea4:	7e63      	ldrb	r3, [r4, #25]
    dea6:	3301      	adds	r3, #1
    dea8:	7663      	strb	r3, [r4, #25]
  hciTrSendAclData(pConn, pData);
    deaa:	4629      	mov	r1, r5
    deac:	4620      	mov	r0, r4
    deae:	f001 fb77 	bl	f5a0 <hciTrSendAclData>
  if (hciCoreCb.availBufs > 0)
    deb2:	4a0b      	ldr	r2, [pc, #44]	; (dee0 <hciCoreTxAclStart+0xe4>)
    deb4:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
    deb8:	b903      	cbnz	r3, debc <hciCoreTxAclStart+0xc0>
}
    deba:	bd70      	pop	{r4, r5, r6, pc}
    hciCoreCb.availBufs--;
    debc:	3b01      	subs	r3, #1
    debe:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
}
    dec2:	bd70      	pop	{r4, r5, r6, pc}
    aclLen = (pConn->txAclRemLen < HciGetBufSize()) ? pConn->txAclRemLen : HciGetBufSize();
    dec4:	f000 faee 	bl	e4a4 <HciGetBufSize>
    dec8:	4605      	mov	r5, r0
    deca:	e7c1      	b.n	de50 <hciCoreTxAclStart+0x54>
      if (pConn->txAclRemLen > 0)
    decc:	8a63      	ldrh	r3, [r4, #18]
    dece:	2b00      	cmp	r3, #0
    ded0:	d0f3      	beq.n	deba <hciCoreTxAclStart+0xbe>
        pConn->pNextTxFrag += aclLen;
    ded2:	6863      	ldr	r3, [r4, #4]
    ded4:	442b      	add	r3, r5
    ded6:	6063      	str	r3, [r4, #4]
    while ((hciCoreCb.availBufs > 0) && hciCoreTxAclContinue(pConn));
    ded8:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76
    dedc:	e7b0      	b.n	de40 <hciCoreTxAclStart+0x44>
    dede:	bf00      	nop
    dee0:	1000477c 	.word	0x1000477c

0000dee4 <hciCoreTxReady>:
{
    dee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    hciCoreCb.availBufs += bufs;
    dee8:	4c50      	ldr	r4, [pc, #320]	; (e02c <hciCoreTxReady+0x148>)
{
    deea:	b082      	sub	sp, #8
    hciCoreCb.availBufs += bufs;
    deec:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
  if (bufs > 0)
    def0:	b150      	cbz	r0, df08 <hciCoreTxReady+0x24>
    if (hciCoreCb.availBufs > hciCoreCb.numBufs)
    def2:	f894 2077 	ldrb.w	r2, [r4, #119]	; 0x77
    hciCoreCb.availBufs += bufs;
    def6:	4403      	add	r3, r0
    def8:	b2db      	uxtb	r3, r3
    if (hciCoreCb.availBufs > hciCoreCb.numBufs)
    defa:	4293      	cmp	r3, r2
    hciCoreCb.availBufs += bufs;
    defc:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
      hciCoreCb.availBufs = hciCoreCb.numBufs;
    df00:	bf84      	itt	hi
    df02:	f884 2076 	strbhi.w	r2, [r4, #118]	; 0x76
    df06:	4613      	movhi	r3, r2
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
    df08:	4e49      	ldr	r6, [pc, #292]	; (e030 <hciCoreTxReady+0x14c>)
    df0a:	f1a6 081c 	sub.w	r8, r6, #28
  hciCoreConn_t   *pConn = hciCoreCb.conn;
    df0e:	f1a6 0a38 	sub.w	sl, r6, #56	; 0x38
  while (hciCoreCb.availBufs > 0)
    df12:	2b00      	cmp	r3, #0
    df14:	d035      	beq.n	df82 <hciCoreTxReady+0x9e>
    if (pConn->handle != HCI_HANDLE_NONE && pConn->fragmenting)
    df16:	8a22      	ldrh	r2, [r4, #16]
    df18:	f64f 73ff 	movw	r3, #65535	; 0xffff
    df1c:	429a      	cmp	r2, r3
    df1e:	d001      	beq.n	df24 <hciCoreTxReady+0x40>
    df20:	7da3      	ldrb	r3, [r4, #22]
    df22:	bb8b      	cbnz	r3, df88 <hciCoreTxReady+0xa4>
    df24:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    df26:	f64f 73ff 	movw	r3, #65535	; 0xffff
    df2a:	429a      	cmp	r2, r3
    df2c:	d003      	beq.n	df36 <hciCoreTxReady+0x52>
    df2e:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    df32:	2b00      	cmp	r3, #0
    df34:	d169      	bne.n	e00a <hciCoreTxReady+0x126>
    df36:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
    df3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    df3e:	429a      	cmp	r2, r3
    df40:	d003      	beq.n	df4a <hciCoreTxReady+0x66>
    df42:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
    df46:	2b00      	cmp	r3, #0
    df48:	d161      	bne.n	e00e <hciCoreTxReady+0x12a>
      if ((pData = WsfMsgDeq(&hciCoreCb.aclQueue, &handlerId)) != NULL)
    df4a:	483a      	ldr	r0, [pc, #232]	; (e034 <hciCoreTxReady+0x150>)
    df4c:	f10d 0107 	add.w	r1, sp, #7
    df50:	f001 fd1e 	bl	f990 <WsfMsgDeq>
    df54:	4602      	mov	r2, r0
    df56:	b1a0      	cbz	r0, df82 <hciCoreTxReady+0x9e>
        BYTES_TO_UINT16(handle, pData);
    df58:	7841      	ldrb	r1, [r0, #1]
    df5a:	7803      	ldrb	r3, [r0, #0]
    df5c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    if (pConn->handle == handle)
    df60:	8a21      	ldrh	r1, [r4, #16]
        BYTES_TO_UINT16(handle, pData);
    df62:	b29b      	uxth	r3, r3
    if (pConn->handle == handle)
    df64:	4299      	cmp	r1, r3
    df66:	d054      	beq.n	e012 <hciCoreTxReady+0x12e>
    df68:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    df6a:	4299      	cmp	r1, r3
    df6c:	d05a      	beq.n	e024 <hciCoreTxReady+0x140>
    df6e:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
    df72:	4299      	cmp	r1, r3
    df74:	d058      	beq.n	e028 <hciCoreTxReady+0x144>
          WsfMsgFree(pData);
    df76:	f001 fcef 	bl	f958 <WsfMsgFree>
  while (hciCoreCb.availBufs > 0)
    df7a:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
    df7e:	2b00      	cmp	r3, #0
    df80:	d1c9      	bne.n	df16 <hciCoreTxReady+0x32>
}
    df82:	b002      	add	sp, #8
    df84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hciCoreConn_t   *pConn = hciCoreCb.conn;
    df88:	4655      	mov	r5, sl
    aclLen = (pConn->txAclRemLen < HciGetBufSize()) ? pConn->txAclRemLen : HciGetBufSize();
    df8a:	f8b5 9012 	ldrh.w	r9, [r5, #18]
    df8e:	f000 fa89 	bl	e4a4 <HciGetBufSize>
    df92:	4581      	cmp	r9, r0
    df94:	d22a      	bcs.n	dfec <hciCoreTxReady+0x108>
    df96:	8a6f      	ldrh	r7, [r5, #18]
    if (aclLen > 0)
    df98:	2f00      	cmp	r7, #0
    df9a:	d0d6      	beq.n	df4a <hciCoreTxReady+0x66>
      pConn->txAclRemLen -= aclLen;
    df9c:	8a6b      	ldrh	r3, [r5, #18]
      UINT16_TO_BUF(pConn->pNextTxFrag, (pConn->handle | HCI_PB_CONTINUE));
    df9e:	686a      	ldr	r2, [r5, #4]
    dfa0:	8a29      	ldrh	r1, [r5, #16]
      pConn->txAclRemLen -= aclLen;
    dfa2:	1bdb      	subs	r3, r3, r7
    dfa4:	826b      	strh	r3, [r5, #18]
      UINT16_TO_BUF(pConn->pNextTxFrag, (pConn->handle | HCI_PB_CONTINUE));
    dfa6:	7011      	strb	r1, [r2, #0]
    dfa8:	8a2b      	ldrh	r3, [r5, #16]
    dfaa:	686a      	ldr	r2, [r5, #4]
    dfac:	0a1b      	lsrs	r3, r3, #8
    dfae:	f043 0310 	orr.w	r3, r3, #16
    dfb2:	7053      	strb	r3, [r2, #1]
      UINT16_TO_BUF(&(pConn->pNextTxFrag[2]), aclLen);
    dfb4:	686b      	ldr	r3, [r5, #4]
    dfb6:	709f      	strb	r7, [r3, #2]
    dfb8:	686b      	ldr	r3, [r5, #4]
    dfba:	0a3a      	lsrs	r2, r7, #8
    dfbc:	70da      	strb	r2, [r3, #3]
  pConn->outBufs++;
    dfbe:	7e6b      	ldrb	r3, [r5, #25]
  hciTrSendAclData(pConn, pData);
    dfc0:	6869      	ldr	r1, [r5, #4]
  pConn->outBufs++;
    dfc2:	3301      	adds	r3, #1
    dfc4:	766b      	strb	r3, [r5, #25]
  hciTrSendAclData(pConn, pData);
    dfc6:	4628      	mov	r0, r5
    dfc8:	f001 faea 	bl	f5a0 <hciTrSendAclData>
  if (hciCoreCb.availBufs > 0)
    dfcc:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
    dfd0:	b193      	cbz	r3, dff8 <hciCoreTxReady+0x114>
    hciCoreCb.availBufs--;
    dfd2:	3b01      	subs	r3, #1
    dfd4:	b2db      	uxtb	r3, r3
    dfd6:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
      if (pConn->txAclRemLen > 0)
    dfda:	8a6a      	ldrh	r2, [r5, #18]
    dfdc:	2a00      	cmp	r2, #0
    dfde:	d098      	beq.n	df12 <hciCoreTxReady+0x2e>
        pConn->pNextTxFrag += aclLen;
    dfe0:	686b      	ldr	r3, [r5, #4]
    dfe2:	443b      	add	r3, r7
    dfe4:	606b      	str	r3, [r5, #4]
  while (hciCoreCb.availBufs > 0)
    dfe6:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
    dfea:	e792      	b.n	df12 <hciCoreTxReady+0x2e>
    aclLen = (pConn->txAclRemLen < HciGetBufSize()) ? pConn->txAclRemLen : HciGetBufSize();
    dfec:	f000 fa5a 	bl	e4a4 <HciGetBufSize>
    dff0:	4607      	mov	r7, r0
    if (aclLen > 0)
    dff2:	2f00      	cmp	r7, #0
    dff4:	d0a9      	beq.n	df4a <hciCoreTxReady+0x66>
    dff6:	e7d1      	b.n	df9c <hciCoreTxReady+0xb8>
      if (pConn->txAclRemLen > 0)
    dff8:	8a6b      	ldrh	r3, [r5, #18]
    dffa:	2b00      	cmp	r3, #0
    dffc:	d0c1      	beq.n	df82 <hciCoreTxReady+0x9e>
        pConn->pNextTxFrag += aclLen;
    dffe:	686b      	ldr	r3, [r5, #4]
    e000:	443b      	add	r3, r7
    e002:	606b      	str	r3, [r5, #4]
  while (hciCoreCb.availBufs > 0)
    e004:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
    e008:	e783      	b.n	df12 <hciCoreTxReady+0x2e>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
    e00a:	4645      	mov	r5, r8
    e00c:	e7bd      	b.n	df8a <hciCoreTxReady+0xa6>
    e00e:	4635      	mov	r5, r6
    e010:	e7bb      	b.n	df8a <hciCoreTxReady+0xa6>
  hciCoreConn_t   *pConn = hciCoreCb.conn;
    e012:	4650      	mov	r0, sl
        BYTES_TO_UINT16(len, &pData[2]);
    e014:	78d3      	ldrb	r3, [r2, #3]
    e016:	7891      	ldrb	r1, [r2, #2]
    e018:	eb01 2103 	add.w	r1, r1, r3, lsl #8
          hciCoreTxAclStart(pConn, len, pData);
    e01c:	b289      	uxth	r1, r1
    e01e:	f7ff feed 	bl	ddfc <hciCoreTxAclStart>
    e022:	e7aa      	b.n	df7a <hciCoreTxReady+0x96>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
    e024:	4640      	mov	r0, r8
    e026:	e7f5      	b.n	e014 <hciCoreTxReady+0x130>
    e028:	4630      	mov	r0, r6
    e02a:	e7f3      	b.n	e014 <hciCoreTxReady+0x130>
    e02c:	1000477c 	.word	0x1000477c
    e030:	100047b4 	.word	0x100047b4
    e034:	100047e0 	.word	0x100047e0

0000e038 <hciCoreConnClose>:
{
    e038:	b538      	push	{r3, r4, r5, lr}
    if (pConn->handle == handle)
    e03a:	4c12      	ldr	r4, [pc, #72]	; (e084 <hciCoreConnClose+0x4c>)
    e03c:	8a22      	ldrh	r2, [r4, #16]
    e03e:	4282      	cmp	r2, r0
    e040:	d00a      	beq.n	e058 <hciCoreConnClose+0x20>
    e042:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    e044:	4282      	cmp	r2, r0
    e046:	d006      	beq.n	e056 <hciCoreConnClose+0x1e>
    e048:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
    e04c:	4282      	cmp	r2, r0
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
    e04e:	bf08      	it	eq
    e050:	3438      	addeq	r4, #56	; 0x38
    if (pConn->handle == handle)
    e052:	d001      	beq.n	e058 <hciCoreConnClose+0x20>
}
    e054:	bd38      	pop	{r3, r4, r5, pc}
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
    e056:	341c      	adds	r4, #28
      if (pConn->pTxAclPkt != NULL)
    e058:	6820      	ldr	r0, [r4, #0]
    e05a:	b118      	cbz	r0, e064 <hciCoreConnClose+0x2c>
        WsfMsgFree(pConn->pTxAclPkt);
    e05c:	f001 fc7c 	bl	f958 <WsfMsgFree>
        pConn->pTxAclPkt = NULL;
    e060:	2300      	movs	r3, #0
    e062:	6023      	str	r3, [r4, #0]
      if (pConn->pRxAclPkt != NULL)
    e064:	68a0      	ldr	r0, [r4, #8]
      pConn->fragmenting = FALSE;
    e066:	2500      	movs	r5, #0
    e068:	75a5      	strb	r5, [r4, #22]
      if (pConn->pRxAclPkt != NULL)
    e06a:	b110      	cbz	r0, e072 <hciCoreConnClose+0x3a>
        WsfMsgFree(pConn->pRxAclPkt);
    e06c:	f001 fc74 	bl	f958 <WsfMsgFree>
        pConn->pRxAclPkt = NULL;
    e070:	60a5      	str	r5, [r4, #8]
      pConn->handle = HCI_HANDLE_NONE;
    e072:	f64f 73ff 	movw	r3, #65535	; 0xffff
      hciCoreTxReady(pConn->outBufs);
    e076:	7e60      	ldrb	r0, [r4, #25]
      pConn->handle = HCI_HANDLE_NONE;
    e078:	8223      	strh	r3, [r4, #16]
}
    e07a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      hciCoreTxReady(pConn->outBufs);
    e07e:	f7ff bf31 	b.w	dee4 <hciCoreTxReady>
    e082:	bf00      	nop
    e084:	1000477c 	.word	0x1000477c

0000e088 <hciCoreTxAclComplete>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxAclComplete(hciCoreConn_t *pConn, uint8_t *pData)
{
    e088:	b538      	push	{r3, r4, r5, lr}
  /* if fragmenting */
  if (pConn->fragmenting)
    e08a:	7d83      	ldrb	r3, [r0, #22]
    e08c:	b11b      	cbz	r3, e096 <hciCoreTxAclComplete+0xe>
  {
    /* check if all fragments sent */
    if (pConn->txAclRemLen == 0)
    e08e:	8a45      	ldrh	r5, [r0, #18]
    e090:	4604      	mov	r4, r0
    e092:	b13d      	cbz	r5, e0a4 <hciCoreTxAclComplete+0x1c>
  }
  else if (pData != NULL)
  {
    WsfMsgFree(pData);
  }
}
    e094:	bd38      	pop	{r3, r4, r5, pc}
  else if (pData != NULL)
    e096:	2900      	cmp	r1, #0
    e098:	d0fc      	beq.n	e094 <hciCoreTxAclComplete+0xc>
}
    e09a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    WsfMsgFree(pData);
    e09e:	4608      	mov	r0, r1
    e0a0:	f001 bc5a 	b.w	f958 <WsfMsgFree>
      WsfMsgFree(pConn->pTxAclPkt);
    e0a4:	6800      	ldr	r0, [r0, #0]
    e0a6:	f001 fc57 	bl	f958 <WsfMsgFree>
      pConn->fragmenting = FALSE;
    e0aa:	75a5      	strb	r5, [r4, #22]
      pConn->pTxAclPkt = NULL;
    e0ac:	6025      	str	r5, [r4, #0]
}
    e0ae:	bd38      	pop	{r3, r4, r5, pc}

0000e0b0 <hciCoreAclReassembly>:
 *
 *  \return pointer to ACL packet to send, or NULL if no packet to send.
 */
/*************************************************************************************************/
uint8_t *hciCoreAclReassembly(uint8_t *pData)
{
    e0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (pConn->handle == handle)
    e0b4:	4e4b      	ldr	r6, [pc, #300]	; (e1e4 <hciCoreAclReassembly+0x134>)
  uint16_t      aclLen;
  uint16_t      l2cLen;
  uint16_t      pbf;
  bool_t        freeData = TRUE;

  BYTES_TO_UINT16(handle, pData);
    e0b6:	7841      	ldrb	r1, [r0, #1]
    e0b8:	7804      	ldrb	r4, [r0, #0]
  pbf = handle & HCI_PB_FLAG_MASK;
  handle &= HCI_HANDLE_MASK;
  BYTES_TO_UINT16(aclLen, &pData[2]);
    e0ba:	78c3      	ldrb	r3, [r0, #3]
    e0bc:	7882      	ldrb	r2, [r0, #2]
  BYTES_TO_UINT16(handle, pData);
    e0be:	eb04 2401 	add.w	r4, r4, r1, lsl #8
    if (pConn->handle == handle)
    e0c2:	8a31      	ldrh	r1, [r6, #16]
  BYTES_TO_UINT16(aclLen, &pData[2]);
    e0c4:	eb02 2203 	add.w	r2, r2, r3, lsl #8
  pbf = handle & HCI_PB_FLAG_MASK;
    e0c8:	f404 5340 	and.w	r3, r4, #12288	; 0x3000
  handle &= HCI_HANDLE_MASK;
    e0cc:	f3c4 040b 	ubfx	r4, r4, #0, #12
    if (pConn->handle == handle)
    e0d0:	42a1      	cmp	r1, r4
{
    e0d2:	4605      	mov	r5, r0
  BYTES_TO_UINT16(aclLen, &pData[2]);
    e0d4:	b297      	uxth	r7, r2
    if (pConn->handle == handle)
    e0d6:	d00d      	beq.n	e0f4 <hciCoreAclReassembly+0x44>
    e0d8:	8db2      	ldrh	r2, [r6, #44]	; 0x2c
    e0da:	42a2      	cmp	r2, r4
    e0dc:	d049      	beq.n	e172 <hciCoreAclReassembly+0xc2>
    e0de:	f8b6 2048 	ldrh.w	r2, [r6, #72]	; 0x48
    e0e2:	42a2      	cmp	r2, r4
    e0e4:	d07a      	beq.n	e1dc <hciCoreAclReassembly+0x12c>
  uint8_t       *pDataRtn = NULL;
    e0e6:	2400      	movs	r4, #0
    HCI_TRACE_WARN1("pkt rcvd on unknown handle=0x%04x", (handle & HCI_HANDLE_MASK));
  }

  if (freeData)
  {
    WsfMsgFree(pData);
    e0e8:	4628      	mov	r0, r5
    e0ea:	f001 fc35 	bl	f958 <WsfMsgFree>
  }

  return pDataRtn;
}
    e0ee:	4620      	mov	r0, r4
    e0f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hciCoreConn_t   *pConn = hciCoreCb.conn;
    e0f4:	46b0      	mov	r8, r6
    if (pbf == HCI_PB_START_C2H)
    e0f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    e0fa:	d022      	beq.n	e142 <hciCoreAclReassembly+0x92>
    else if (pbf == HCI_PB_CONTINUE)
    e0fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    e100:	d1f1      	bne.n	e0e6 <hciCoreAclReassembly+0x36>
      if (pConn->pRxAclPkt != NULL)
    e102:	f8d8 3008 	ldr.w	r3, [r8, #8]
    e106:	2b00      	cmp	r3, #0
    e108:	d0ed      	beq.n	e0e6 <hciCoreAclReassembly+0x36>
        if (aclLen <= pConn->rxAclRemLen)
    e10a:	f8b8 3014 	ldrh.w	r3, [r8, #20]
    e10e:	42bb      	cmp	r3, r7
    e110:	d3e9      	bcc.n	e0e6 <hciCoreAclReassembly+0x36>
          memcpy(pConn->pNextRxFrag, &pData[HCI_ACL_HDR_LEN], aclLen);
    e112:	463a      	mov	r2, r7
    e114:	f8d8 000c 	ldr.w	r0, [r8, #12]
    e118:	1d29      	adds	r1, r5, #4
    e11a:	f7fd fff1 	bl	c100 <memcpy>
          pConn->rxAclRemLen -= aclLen;
    e11e:	f8b8 3014 	ldrh.w	r3, [r8, #20]
          pConn->pNextRxFrag += aclLen;
    e122:	f8d8 200c 	ldr.w	r2, [r8, #12]
          pConn->rxAclRemLen -= aclLen;
    e126:	1bdb      	subs	r3, r3, r7
          pConn->pNextRxFrag += aclLen;
    e128:	443a      	add	r2, r7
          pConn->rxAclRemLen -= aclLen;
    e12a:	b29b      	uxth	r3, r3
          pConn->pNextRxFrag += aclLen;
    e12c:	f8c8 200c 	str.w	r2, [r8, #12]
          pConn->rxAclRemLen -= aclLen;
    e130:	f8a8 3014 	strh.w	r3, [r8, #20]
          if (pConn->rxAclRemLen == 0)
    e134:	2b00      	cmp	r3, #0
    e136:	d1d6      	bne.n	e0e6 <hciCoreAclReassembly+0x36>
            pDataRtn = pConn->pRxAclPkt;
    e138:	f8d8 4008 	ldr.w	r4, [r8, #8]
            pConn->pRxAclPkt = NULL;
    e13c:	f8c8 3008 	str.w	r3, [r8, #8]
  if (freeData)
    e140:	e7d2      	b.n	e0e8 <hciCoreAclReassembly+0x38>
      if (pConn->pRxAclPkt != NULL)
    e142:	f8d8 0008 	ldr.w	r0, [r8, #8]
    e146:	b120      	cbz	r0, e152 <hciCoreAclReassembly+0xa2>
        WsfMsgFree(pConn->pRxAclPkt);
    e148:	f001 fc06 	bl	f958 <WsfMsgFree>
        pConn->pRxAclPkt = NULL;
    e14c:	2300      	movs	r3, #0
    e14e:	f8c8 3008 	str.w	r3, [r8, #8]
      if (aclLen >= L2C_HDR_LEN)
    e152:	2f03      	cmp	r7, #3
    e154:	d9c7      	bls.n	e0e6 <hciCoreAclReassembly+0x36>
        if ((l2cLen + L2C_HDR_LEN) > hciCoreCb.maxRxAclLen)
    e156:	f8b6 2070 	ldrh.w	r2, [r6, #112]	; 0x70
        BYTES_TO_UINT16(l2cLen, &pData[4]);
    e15a:	796b      	ldrb	r3, [r5, #5]
    e15c:	792e      	ldrb	r6, [r5, #4]
    e15e:	eb06 2603 	add.w	r6, r6, r3, lsl #8
    e162:	b2b6      	uxth	r6, r6
        if ((l2cLen + L2C_HDR_LEN) > hciCoreCb.maxRxAclLen)
    e164:	1cf3      	adds	r3, r6, #3
    e166:	4293      	cmp	r3, r2
    e168:	dabd      	bge.n	e0e6 <hciCoreAclReassembly+0x36>
        else if ((l2cLen + L2C_HDR_LEN) > aclLen)
    e16a:	42bb      	cmp	r3, r7
    e16c:	da04      	bge.n	e178 <hciCoreAclReassembly+0xc8>
    e16e:	462c      	mov	r4, r5
  return pDataRtn;
    e170:	e7bd      	b.n	e0ee <hciCoreAclReassembly+0x3e>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
    e172:	f106 081c 	add.w	r8, r6, #28
    e176:	e7be      	b.n	e0f6 <hciCoreAclReassembly+0x46>
          if ((pConn->pRxAclPkt = WsfMsgDataAlloc(l2cLen + L2C_HDR_LEN + HCI_ACL_HDR_LEN, 0)) != NULL)
    e178:	f106 0008 	add.w	r0, r6, #8
    e17c:	b280      	uxth	r0, r0
    e17e:	2100      	movs	r1, #0
    e180:	f001 fbd8 	bl	f934 <WsfMsgDataAlloc>
    e184:	f8c8 0008 	str.w	r0, [r8, #8]
    e188:	2800      	cmp	r0, #0
    e18a:	d0ac      	beq.n	e0e6 <hciCoreAclReassembly+0x36>
            UINT16_TO_BSTREAM(pConn->pNextRxFrag, handle);
    e18c:	1c43      	adds	r3, r0, #1
    e18e:	f8c8 300c 	str.w	r3, [r8, #12]
    e192:	7004      	strb	r4, [r0, #0]
    e194:	f8d8 300c 	ldr.w	r3, [r8, #12]
    e198:	0a24      	lsrs	r4, r4, #8
    e19a:	1c5a      	adds	r2, r3, #1
    e19c:	f8c8 200c 	str.w	r2, [r8, #12]
    e1a0:	701c      	strb	r4, [r3, #0]
            UINT16_TO_BSTREAM(pConn->pNextRxFrag, l2cLen + L2C_HDR_LEN);
    e1a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
    e1a6:	3604      	adds	r6, #4
    e1a8:	1c59      	adds	r1, r3, #1
    e1aa:	f8c8 100c 	str.w	r1, [r8, #12]
    e1ae:	701e      	strb	r6, [r3, #0]
    e1b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
    e1b4:	1230      	asrs	r0, r6, #8
    e1b6:	1c5c      	adds	r4, r3, #1
    e1b8:	f8c8 400c 	str.w	r4, [r8, #12]
    e1bc:	7018      	strb	r0, [r3, #0]
            memcpy(pConn->pNextRxFrag, &pData[4], aclLen);
    e1be:	f8d8 000c 	ldr.w	r0, [r8, #12]
    e1c2:	463a      	mov	r2, r7
    e1c4:	1d29      	adds	r1, r5, #4
    e1c6:	f7fd ff9b 	bl	c100 <memcpy>
            pConn->pNextRxFrag += aclLen;
    e1ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
            pConn->rxAclRemLen = l2cLen + L2C_HDR_LEN - aclLen;
    e1ce:	1bf6      	subs	r6, r6, r7
            pConn->pNextRxFrag += aclLen;
    e1d0:	443b      	add	r3, r7
    e1d2:	f8c8 300c 	str.w	r3, [r8, #12]
            pConn->rxAclRemLen = l2cLen + L2C_HDR_LEN - aclLen;
    e1d6:	f8a8 6014 	strh.w	r6, [r8, #20]
    e1da:	e784      	b.n	e0e6 <hciCoreAclReassembly+0x36>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
    e1dc:	f106 0838 	add.w	r8, r6, #56	; 0x38
    e1e0:	e789      	b.n	e0f6 <hciCoreAclReassembly+0x46>
    e1e2:	bf00      	nop
    e1e4:	1000477c 	.word	0x1000477c

0000e1e8 <HciCoreInit>:
  hciCoreCb.maxRxAclLen = HCI_MAX_RX_ACL_LEN;
  hciCoreCb.aclQueueHi = HCI_ACL_QUEUE_HI;
  hciCoreCb.aclQueueLo = HCI_ACL_QUEUE_LO;

  #if defined(AM_PART_APOLLO3) || defined(AM_PART_APOLLO3P)
    if (APOLLO3_GE_B0)
    e1e8:	4a10      	ldr	r2, [pc, #64]	; (e22c <HciCoreInit+0x44>)
  WSF_QUEUE_INIT(&hciCoreCb.aclQueue);
    e1ea:	4b11      	ldr	r3, [pc, #68]	; (e230 <HciCoreInit+0x48>)
    if (APOLLO3_GE_B0)
    e1ec:	68d2      	ldr	r2, [r2, #12]
    e1ee:	b2d2      	uxtb	r2, r2
    hciCoreCb.conn[i].handle = HCI_HANDLE_NONE;
    e1f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    if (APOLLO3_GE_B0)
    e1f4:	2a20      	cmp	r2, #32
    {
      // B0 has only less internal ACL buffers
      hciCoreCb.aclQueueHi--;
    e1f6:	bf88      	it	hi
    e1f8:	f44f 7201 	movhi.w	r2, #516	; 0x204
    hciCoreCb.conn[i].handle = HCI_HANDLE_NONE;
    e1fc:	8219      	strh	r1, [r3, #16]
    e1fe:	8599      	strh	r1, [r3, #44]	; 0x2c
    e200:	f8a3 1048 	strh.w	r1, [r3, #72]	; 0x48
  hciCoreCb.aclQueueHi = HCI_ACL_QUEUE_HI;
    e204:	f240 3105 	movw	r1, #773	; 0x305
  WSF_QUEUE_INIT(&hciCoreCb.aclQueue);
    e208:	f04f 0000 	mov.w	r0, #0
  hciCoreCb.maxRxAclLen = HCI_MAX_RX_ACL_LEN;
    e20c:	f04f 0c1b 	mov.w	ip, #27
  hciCoreCb.aclQueueHi = HCI_ACL_QUEUE_HI;
    e210:	f8a3 1074 	strh.w	r1, [r3, #116]	; 0x74
      hciCoreCb.aclQueueHi--;
    e214:	bf88      	it	hi
    e216:	f8a3 2074 	strhhi.w	r2, [r3, #116]	; 0x74
      hciCoreCb.aclQueueLo--;
    }
  #endif
  hciCoreCb.extResetSeq = NULL;
    e21a:	2200      	movs	r2, #0
  WSF_QUEUE_INIT(&hciCoreCb.aclQueue);
    e21c:	e9c3 0019 	strd	r0, r0, [r3, #100]	; 0x64
  hciCoreCb.maxRxAclLen = HCI_MAX_RX_ACL_LEN;
    e220:	f8a3 c070 	strh.w	ip, [r3, #112]	; 0x70
  hciCoreCb.extResetSeq = NULL;
    e224:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  hciCoreInit();
    e228:	f000 b8a4 	b.w	e374 <hciCoreInit>
    e22c:	40020000 	.word	0x40020000
    e230:	1000477c 	.word	0x1000477c

0000e234 <HciResetSequence>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciResetSequence(void)
{
    e234:	b5f0      	push	{r4, r5, r6, r7, lr}

  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;

  // free any pending incoming packets
  while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
    e236:	4d1e      	ldr	r5, [pc, #120]	; (e2b0 <HciResetSequence+0x7c>)
{
    e238:	b083      	sub	sp, #12
  while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
    e23a:	e001      	b.n	e240 <HciResetSequence+0xc>
  {
    /* Free buffer */
    WsfMsgFree(pBuf);
    e23c:	f001 fb8c 	bl	f958 <WsfMsgFree>
  while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
    e240:	f10d 0107 	add.w	r1, sp, #7
    e244:	4628      	mov	r0, r5
    e246:	f001 fba3 	bl	f990 <WsfMsgDeq>
    e24a:	4604      	mov	r4, r0
    e24c:	2800      	cmp	r0, #0
    e24e:	d1f5      	bne.n	e23c <HciResetSequence+0x8>
    e250:	4d18      	ldr	r5, [pc, #96]	; (e2b4 <HciResetSequence+0x80>)
      WsfMsgFree(pConn->pRxAclPkt);
      pConn->pRxAclPkt = NULL;
    }

    /* free structure */
    pConn->handle = HCI_HANDLE_NONE;
    e252:	f64f 77ff 	movw	r7, #65535	; 0xffff
    e256:	f105 0654 	add.w	r6, r5, #84	; 0x54
    if (pConn->pTxAclPkt != NULL)
    e25a:	f855 0c1c 	ldr.w	r0, [r5, #-28]
    e25e:	b118      	cbz	r0, e268 <HciResetSequence+0x34>
      WsfMsgFree(pConn->pTxAclPkt);
    e260:	f001 fb7a 	bl	f958 <WsfMsgFree>
      pConn->pTxAclPkt = NULL;
    e264:	f845 4c1c 	str.w	r4, [r5, #-28]
    if (pConn->pRxAclPkt != NULL)
    e268:	f855 0c14 	ldr.w	r0, [r5, #-20]
    pConn->fragmenting = FALSE;
    e26c:	f805 4c06 	strb.w	r4, [r5, #-6]
    if (pConn->pRxAclPkt != NULL)
    e270:	b198      	cbz	r0, e29a <HciResetSequence+0x66>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
    e272:	351c      	adds	r5, #28
      WsfMsgFree(pConn->pRxAclPkt);
    e274:	f001 fb70 	bl	f958 <WsfMsgFree>

    /* optional: iterate through tx ACL queue and free any buffers with this handle */

    /* outstanding buffers are now available; service TX data path */
    hciCoreTxReady(pConn->outBufs);
    e278:	f815 0c1f 	ldrb.w	r0, [r5, #-31]
      pConn->pRxAclPkt = NULL;
    e27c:	f845 4c30 	str.w	r4, [r5, #-48]
    pConn->handle = HCI_HANDLE_NONE;
    e280:	f825 7c28 	strh.w	r7, [r5, #-40]
    hciCoreTxReady(pConn->outBufs);
    e284:	f7ff fe2e 	bl	dee4 <hciCoreTxReady>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
    e288:	42ae      	cmp	r6, r5
    e28a:	d1e6      	bne.n	e25a <HciResetSequence+0x26>

  }

  /* set resetting state */
  hciCb.resetting = TRUE;
    e28c:	4b08      	ldr	r3, [pc, #32]	; (e2b0 <HciResetSequence+0x7c>)
    e28e:	2201      	movs	r2, #1
    e290:	765a      	strb	r2, [r3, #25]

  /* start the reset sequence */
  hciCoreResetStart();
    e292:	f7fe fb51 	bl	c938 <hciCoreResetStart>
}
    e296:	b003      	add	sp, #12
    e298:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hciCoreTxReady(pConn->outBufs);
    e29a:	f815 0c03 	ldrb.w	r0, [r5, #-3]
    pConn->handle = HCI_HANDLE_NONE;
    e29e:	f825 7c0c 	strh.w	r7, [r5, #-12]
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
    e2a2:	351c      	adds	r5, #28
    hciCoreTxReady(pConn->outBufs);
    e2a4:	f7ff fe1e 	bl	dee4 <hciCoreTxReady>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
    e2a8:	42b5      	cmp	r5, r6
    e2aa:	d1d6      	bne.n	e25a <HciResetSequence+0x26>
    e2ac:	e7ee      	b.n	e28c <HciResetSequence+0x58>
    e2ae:	bf00      	nop
    e2b0:	10004a9c 	.word	0x10004a9c
    e2b4:	10004798 	.word	0x10004798

0000e2b8 <HciSetMaxRxAclLen>:
 *  \return None.
 */
/*************************************************************************************************/
void HciSetMaxRxAclLen(uint16_t len)
{
  hciCoreCb.maxRxAclLen = len;
    e2b8:	4b01      	ldr	r3, [pc, #4]	; (e2c0 <HciSetMaxRxAclLen+0x8>)
    e2ba:	f8a3 0070 	strh.w	r0, [r3, #112]	; 0x70
}
    e2be:	4770      	bx	lr
    e2c0:	1000477c 	.word	0x1000477c

0000e2c4 <HciSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSendAclData(uint8_t *pData)
{
    e2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (pConn->handle == handle)
    e2c8:	4f27      	ldr	r7, [pc, #156]	; (e368 <HciSendAclData+0xa4>)
  uint16_t        handle;
  uint16_t        len;
  hciCoreConn_t   *pConn;

  /* parse handle and length */
  BYTES_TO_UINT16(handle, pData);
    e2ca:	7843      	ldrb	r3, [r0, #1]
    e2cc:	7805      	ldrb	r5, [r0, #0]
    e2ce:	eb05 2503 	add.w	r5, r5, r3, lsl #8
    if (pConn->handle == handle)
    e2d2:	8a3b      	ldrh	r3, [r7, #16]
  BYTES_TO_UINT16(handle, pData);
    e2d4:	b2ad      	uxth	r5, r5
    if (pConn->handle == handle)
    e2d6:	42ab      	cmp	r3, r5
{
    e2d8:	4680      	mov	r8, r0
    if (pConn->handle == handle)
    e2da:	d00a      	beq.n	e2f2 <HciSendAclData+0x2e>
    e2dc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
    e2de:	42ab      	cmp	r3, r5
    e2e0:	d03c      	beq.n	e35c <HciSendAclData+0x98>
    e2e2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
    e2e6:	42ab      	cmp	r3, r5
    e2e8:	d03b      	beq.n	e362 <HciSendAclData+0x9e>
    /* discard buffer */
    WsfMsgFree(pData);

    HCI_TRACE_WARN1("HciSendAclData discarding buffer, handle=%u", handle);
  }
}
    e2ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    WsfMsgFree(pData);
    e2ee:	f001 bb33 	b.w	f958 <WsfMsgFree>
  hciCoreConn_t   *pConn = hciCoreCb.conn;
    e2f2:	463e      	mov	r6, r7
  BYTES_TO_UINT16(len, &pData[2]);
    e2f4:	f898 3003 	ldrb.w	r3, [r8, #3]
    e2f8:	f898 4002 	ldrb.w	r4, [r8, #2]
    if (WsfQueueEmpty(&hciCoreCb.aclQueue) && hciCoreCb.availBufs > 0)
    e2fc:	481b      	ldr	r0, [pc, #108]	; (e36c <HciSendAclData+0xa8>)
  BYTES_TO_UINT16(len, &pData[2]);
    e2fe:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    e302:	b2a4      	uxth	r4, r4
    if (WsfQueueEmpty(&hciCoreCb.aclQueue) && hciCoreCb.availBufs > 0)
    e304:	f001 fd44 	bl	fd90 <WsfQueueEmpty>
    e308:	b110      	cbz	r0, e310 <HciSendAclData+0x4c>
    e30a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
    e30e:	b9fb      	cbnz	r3, e350 <HciSendAclData+0x8c>
      WsfMsgEnq(&hciCoreCb.aclQueue, 0, pData);
    e310:	4816      	ldr	r0, [pc, #88]	; (e36c <HciSendAclData+0xa8>)
    e312:	4642      	mov	r2, r8
    e314:	2100      	movs	r1, #0
    e316:	f001 fb35 	bl	f984 <WsfMsgEnq>
    pConn->queuedBufs += ((len - 1) / HciGetBufSize()) + 1;
    e31a:	f000 f8c3 	bl	e4a4 <HciGetBufSize>
    e31e:	7e32      	ldrb	r2, [r6, #24]
    e320:	3c01      	subs	r4, #1
    e322:	fb94 f4f0 	sdiv	r4, r4, r0
    e326:	1c63      	adds	r3, r4, #1
    e328:	4413      	add	r3, r2
    e32a:	b2db      	uxtb	r3, r3
    e32c:	7633      	strb	r3, [r6, #24]
    if (pConn->queuedBufs >= hciCoreCb.aclQueueHi && pConn->flowDisabled == FALSE)
    e32e:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
    e332:	429a      	cmp	r2, r3
    e334:	d901      	bls.n	e33a <HciSendAclData+0x76>
}
    e336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pConn->queuedBufs >= hciCoreCb.aclQueueHi && pConn->flowDisabled == FALSE)
    e33a:	7df3      	ldrb	r3, [r6, #23]
    e33c:	2b00      	cmp	r3, #0
    e33e:	d1fa      	bne.n	e336 <HciSendAclData+0x72>
      (*hciCb.flowCback)(handle, TRUE);
    e340:	4b0b      	ldr	r3, [pc, #44]	; (e370 <HciSendAclData+0xac>)
      pConn->flowDisabled = TRUE;
    e342:	2101      	movs	r1, #1
    e344:	75f1      	strb	r1, [r6, #23]
      (*hciCb.flowCback)(handle, TRUE);
    e346:	4628      	mov	r0, r5
    e348:	695b      	ldr	r3, [r3, #20]
}
    e34a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      (*hciCb.flowCback)(handle, TRUE);
    e34e:	4718      	bx	r3
      hciCoreTxAclStart(pConn, len, pData);
    e350:	4642      	mov	r2, r8
    e352:	4621      	mov	r1, r4
    e354:	4630      	mov	r0, r6
    e356:	f7ff fd51 	bl	ddfc <hciCoreTxAclStart>
    e35a:	e7de      	b.n	e31a <HciSendAclData+0x56>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
    e35c:	f107 061c 	add.w	r6, r7, #28
    e360:	e7c8      	b.n	e2f4 <HciSendAclData+0x30>
    e362:	f107 0638 	add.w	r6, r7, #56	; 0x38
    e366:	e7c5      	b.n	e2f4 <HciSendAclData+0x30>
    e368:	1000477c 	.word	0x1000477c
    e36c:	100047e0 	.word	0x100047e0
    e370:	10004a9c 	.word	0x10004a9c

0000e374 <hciCoreInit>:
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreInit(void)
{
  hciCmdInit();
    e374:	f7fe bc32 	b.w	cbdc <hciCmdInit>

0000e378 <hciCoreNumCmplPkts>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreNumCmplPkts(uint8_t *pMsg)
{
    e378:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t        handle;
  uint8_t         availBufs = 0;
  hciCoreConn_t   *pConn;

  /* parse number of handles */
  BSTREAM_TO_UINT8(numHandles, pMsg);
    e37c:	f890 a000 	ldrb.w	sl, [r0]

  /* for each handle in event */
  while (numHandles-- > 0)
    e380:	f1ba 0f00 	cmp.w	sl, #0
    e384:	d03b      	beq.n	e3fe <hciCoreNumCmplPkts+0x86>
    e386:	f10a 36ff 	add.w	r6, sl, #4294967295
    e38a:	b2f6      	uxtb	r6, r6
    e38c:	f100 0309 	add.w	r3, r0, #9
  uint8_t         availBufs = 0;
    e390:	f04f 0a00 	mov.w	sl, #0

      /* increment available buffer count */
      availBufs += (uint8_t) bufs;

      /* call flow control callback */
      if (pConn->flowDisabled && pConn->queuedBufs <= hciCoreCb.aclQueueLo)
    e394:	4f1c      	ldr	r7, [pc, #112]	; (e408 <hciCoreNumCmplPkts+0x90>)
      {
        pConn->flowDisabled = FALSE;
        (*hciCb.flowCback)(handle, FALSE);
    e396:	f8df 9074 	ldr.w	r9, [pc, #116]	; e40c <hciCoreNumCmplPkts+0x94>
    e39a:	1d44      	adds	r4, r0, #5
    e39c:	eb03 0686 	add.w	r6, r3, r6, lsl #2
        pConn->flowDisabled = FALSE;
    e3a0:	46d0      	mov	r8, sl
    BSTREAM_TO_UINT16(handle, pMsg);
    e3a2:	f814 3c03 	ldrb.w	r3, [r4, #-3]
    e3a6:	f814 5c04 	ldrb.w	r5, [r4, #-4]
    BSTREAM_TO_UINT16(bufs, pMsg);
    e3aa:	f814 bc02 	ldrb.w	fp, [r4, #-2]
    BSTREAM_TO_UINT16(handle, pMsg);
    e3ae:	eb05 2503 	add.w	r5, r5, r3, lsl #8
    e3b2:	b2ad      	uxth	r5, r5
    if ((pConn = hciCoreConnByHandle(handle)) != NULL)
    e3b4:	4628      	mov	r0, r5
    e3b6:	f7ff fcf1 	bl	dd9c <hciCoreConnByHandle>
  while (numHandles-- > 0)
    e3ba:	3404      	adds	r4, #4
      pConn->outBufs -= (uint8_t) bufs;
    e3bc:	465a      	mov	r2, fp
      availBufs += (uint8_t) bufs;
    e3be:	eb0b 0c0a 	add.w	ip, fp, sl
    if ((pConn = hciCoreConnByHandle(handle)) != NULL)
    e3c2:	4603      	mov	r3, r0
    e3c4:	b1c8      	cbz	r0, e3fa <hciCoreNumCmplPkts+0x82>
      pConn->queuedBufs -= (uint8_t) bufs;
    e3c6:	7e00      	ldrb	r0, [r0, #24]
      pConn->outBufs -= (uint8_t) bufs;
    e3c8:	7e59      	ldrb	r1, [r3, #25]
      if (pConn->flowDisabled && pConn->queuedBufs <= hciCoreCb.aclQueueLo)
    e3ca:	f893 e017 	ldrb.w	lr, [r3, #23]
      pConn->queuedBufs -= (uint8_t) bufs;
    e3ce:	1a80      	subs	r0, r0, r2
    e3d0:	b2c0      	uxtb	r0, r0
      pConn->outBufs -= (uint8_t) bufs;
    e3d2:	1a8a      	subs	r2, r1, r2
    e3d4:	765a      	strb	r2, [r3, #25]
      pConn->queuedBufs -= (uint8_t) bufs;
    e3d6:	7618      	strb	r0, [r3, #24]
      availBufs += (uint8_t) bufs;
    e3d8:	fa5f fa8c 	uxtb.w	sl, ip
      if (pConn->flowDisabled && pConn->queuedBufs <= hciCoreCb.aclQueueLo)
    e3dc:	f1be 0f00 	cmp.w	lr, #0
    e3e0:	d00b      	beq.n	e3fa <hciCoreNumCmplPkts+0x82>
    e3e2:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
    e3e6:	4282      	cmp	r2, r0
        (*hciCb.flowCback)(handle, FALSE);
    e3e8:	f04f 0100 	mov.w	r1, #0
    e3ec:	4628      	mov	r0, r5
      if (pConn->flowDisabled && pConn->queuedBufs <= hciCoreCb.aclQueueLo)
    e3ee:	d304      	bcc.n	e3fa <hciCoreNumCmplPkts+0x82>
        pConn->flowDisabled = FALSE;
    e3f0:	f883 8017 	strb.w	r8, [r3, #23]
        (*hciCb.flowCback)(handle, FALSE);
    e3f4:	f8d9 3014 	ldr.w	r3, [r9, #20]
    e3f8:	4798      	blx	r3
  while (numHandles-- > 0)
    e3fa:	42a6      	cmp	r6, r4
    e3fc:	d1d1      	bne.n	e3a2 <hciCoreNumCmplPkts+0x2a>
      }
    }
  }

  /* service TX data path */
  hciCoreTxReady(availBufs);
    e3fe:	4650      	mov	r0, sl
}
    e400:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hciCoreTxReady(availBufs);
    e404:	f7ff bd6e 	b.w	dee4 <hciCoreTxReady>
    e408:	1000477c 	.word	0x1000477c
    e40c:	10004a9c 	.word	0x10004a9c

0000e410 <hciCoreRecv>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreRecv(uint8_t msgType, uint8_t *pCoreRecvMsg)
{
    e410:	b510      	push	{r4, lr}
  {
    HCI_PDUMP_RX_ACL(*(pCoreRecvMsg + 2) + HCI_ACL_HDR_LEN, pCoreRecvMsg);
  }

  /* queue buffer */
  WsfMsgEnq(&hciCb.rxQueue, (wsfHandlerId_t) msgType, pCoreRecvMsg);
    e412:	4c06      	ldr	r4, [pc, #24]	; (e42c <hciCoreRecv+0x1c>)
{
    e414:	4603      	mov	r3, r0
    e416:	460a      	mov	r2, r1
  WsfMsgEnq(&hciCb.rxQueue, (wsfHandlerId_t) msgType, pCoreRecvMsg);
    e418:	4620      	mov	r0, r4
    e41a:	4619      	mov	r1, r3
    e41c:	f001 fab2 	bl	f984 <WsfMsgEnq>

  /* set event */
  WsfSetEvent(hciCb.handlerId, HCI_EVT_RX);
    e420:	7e20      	ldrb	r0, [r4, #24]
    e422:	2101      	movs	r1, #1
}
    e424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  WsfSetEvent(hciCb.handlerId, HCI_EVT_RX);
    e428:	f001 bae4 	b.w	f9f4 <WsfSetEvent>
    e42c:	10004a9c 	.word	0x10004a9c

0000e430 <HciCoreHandler>:
{
  uint8_t         *pBuf;
  wsfHandlerId_t  handlerId;
  
  /* Handle message */
  if (pMsg != NULL)
    e430:	b119      	cbz	r1, e43a <HciCoreHandler+0xa>
  {
    /* Handle HCI command timeout */
    if (pMsg->event == HCI_MSG_CMD_TIMEOUT)
    e432:	788b      	ldrb	r3, [r1, #2]
    e434:	2b01      	cmp	r3, #1
    e436:	d028      	beq.n	e48a <HciCoreHandler+0x5a>
    e438:	4770      	bx	lr
    {
      hciCmdTimeout(pMsg);
    }
  }
  /* Handle events */
  else if (event & HCI_EVT_RX)
    e43a:	07c3      	lsls	r3, r0, #31
    e43c:	d5fc      	bpl.n	e438 <HciCoreHandler+0x8>
{
    e43e:	b530      	push	{r4, r5, lr}
    e440:	4d15      	ldr	r5, [pc, #84]	; (e498 <HciCoreHandler+0x68>)
    e442:	b083      	sub	sp, #12
  {
    /* Process rx queue */
    while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
    e444:	f10d 0107 	add.w	r1, sp, #7
    e448:	4628      	mov	r0, r5
    e44a:	f001 faa1 	bl	f990 <WsfMsgDeq>
    e44e:	4604      	mov	r4, r0
    e450:	b188      	cbz	r0, e476 <HciCoreHandler+0x46>
    {
      /* Handle incoming HCI events */
      if (handlerId == HCI_EVT_TYPE)
    e452:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e456:	2b04      	cmp	r3, #4
    e458:	d00f      	beq.n	e47a <HciCoreHandler+0x4a>
      }
      /* Handle ACL data */
      else
      {
        /* Reassemble */
        if ((pBuf = hciCoreAclReassembly(pBuf)) != NULL)
    e45a:	f7ff fe29 	bl	e0b0 <hciCoreAclReassembly>
    e45e:	2800      	cmp	r0, #0
    e460:	d0f0      	beq.n	e444 <HciCoreHandler+0x14>
        {
          /* Call ACL callback; client will free buffer */
          hciCb.aclCback(pBuf);
    e462:	692b      	ldr	r3, [r5, #16]
    e464:	4798      	blx	r3
    while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
    e466:	f10d 0107 	add.w	r1, sp, #7
    e46a:	4628      	mov	r0, r5
    e46c:	f001 fa90 	bl	f990 <WsfMsgDeq>
    e470:	4604      	mov	r4, r0
    e472:	2800      	cmp	r0, #0
    e474:	d1ed      	bne.n	e452 <HciCoreHandler+0x22>
        }
      }
    }
  }
}
    e476:	b003      	add	sp, #12
    e478:	bd30      	pop	{r4, r5, pc}
        hciEvtProcessMsg(pBuf);
    e47a:	f000 fcc1 	bl	ee00 <hciEvtProcessMsg>
        if (hciCb.resetting)
    e47e:	7e6b      	ldrb	r3, [r5, #25]
    e480:	b933      	cbnz	r3, e490 <HciCoreHandler+0x60>
        WsfMsgFree(pBuf);
    e482:	4620      	mov	r0, r4
    e484:	f001 fa68 	bl	f958 <WsfMsgFree>
    e488:	e7dc      	b.n	e444 <HciCoreHandler+0x14>
      hciCmdTimeout(pMsg);
    e48a:	4608      	mov	r0, r1
    e48c:	f7fe bbb6 	b.w	cbfc <hciCmdTimeout>
          hciCoreResetSequence(pBuf);
    e490:	4620      	mov	r0, r4
    e492:	f7fe fa59 	bl	c948 <hciCoreResetSequence>
    e496:	e7f4      	b.n	e482 <HciCoreHandler+0x52>
    e498:	10004a9c 	.word	0x10004a9c

0000e49c <HciGetBdAddr>:
 */
/*************************************************************************************************/
uint8_t *HciGetBdAddr(void)
{
  return hciCoreCb.bdAddr;
}
    e49c:	4800      	ldr	r0, [pc, #0]	; (e4a0 <HciGetBdAddr+0x4>)
    e49e:	4770      	bx	lr
    e4a0:	100047d8 	.word	0x100047d8

0000e4a4 <HciGetBufSize>:
 *  \return ACL buffer size.
 */
/*************************************************************************************************/
uint16_t HciGetBufSize(void)
{
  return hciCoreCb.bufSize;
    e4a4:	4b01      	ldr	r3, [pc, #4]	; (e4ac <HciGetBufSize+0x8>)
}
    e4a6:	f8b3 0072 	ldrh.w	r0, [r3, #114]	; 0x72
    e4aa:	4770      	bx	lr
    e4ac:	1000477c 	.word	0x1000477c

0000e4b0 <HciGetLeSupFeat>:
/*************************************************************************************************/
uint32_t HciGetLeSupFeat(void)
{
  // disable LL connection parameter update feature for a better
  // interoperability with Android phones (especially older Android OS).
  return hciCoreCb.leSupFeat & ~HCI_LE_SUP_FEAT_CONN_PARAM_REQ_PROC;
    e4b0:	4b02      	ldr	r3, [pc, #8]	; (e4bc <HciGetLeSupFeat+0xc>)
    e4b2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
}
    e4b4:	f020 0002 	bic.w	r0, r0, #2
    e4b8:	4770      	bx	lr
    e4ba:	bf00      	nop
    e4bc:	1000477c 	.word	0x1000477c

0000e4c0 <HciGetMaxRxAclLen>:
 *  \return ACL packet length.
 */
/*************************************************************************************************/
uint16_t HciGetMaxRxAclLen(void)
{
  return hciCoreCb.maxRxAclLen;
    e4c0:	4b01      	ldr	r3, [pc, #4]	; (e4c8 <HciGetMaxRxAclLen+0x8>)
}
    e4c2:	f8b3 0070 	ldrh.w	r0, [r3, #112]	; 0x70
    e4c6:	4770      	bx	lr
    e4c8:	1000477c 	.word	0x1000477c

0000e4cc <hciEvtParseDisconnectCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseDisconnectCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->disconnectCmpl.status, p);
    e4cc:	780a      	ldrb	r2, [r1, #0]
    e4ce:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->disconnectCmpl.handle, p);
    e4d0:	f891 c002 	ldrb.w	ip, [r1, #2]
    e4d4:	784b      	ldrb	r3, [r1, #1]
    e4d6:	eb03 230c 	add.w	r3, r3, ip, lsl #8
    e4da:	b29b      	uxth	r3, r3
    e4dc:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT8(pMsg->disconnectCmpl.reason, p);
    e4de:	78c9      	ldrb	r1, [r1, #3]
    e4e0:	7201      	strb	r1, [r0, #8]

  pMsg->hdr.param = pMsg->disconnectCmpl.handle;
    e4e2:	8003      	strh	r3, [r0, #0]
  pMsg->hdr.status = pMsg->disconnectCmpl.status;
    e4e4:	70c2      	strb	r2, [r0, #3]
}
    e4e6:	4770      	bx	lr

0000e4e8 <hciEvtParseLeConnUpdateCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeConnUpdateCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leConnUpdateCmpl.status, p);
    e4e8:	f891 c000 	ldrb.w	ip, [r1]
    e4ec:	f880 c004 	strb.w	ip, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.handle, p);
    e4f0:	788a      	ldrb	r2, [r1, #2]
    e4f2:	784b      	ldrb	r3, [r1, #1]
    e4f4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    e4f8:	b29b      	uxth	r3, r3
    e4fa:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.connInterval, p);
    e4fc:	78ca      	ldrb	r2, [r1, #3]
{
    e4fe:	b500      	push	{lr}
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.connInterval, p);
    e500:	f891 e004 	ldrb.w	lr, [r1, #4]
    e504:	eb02 220e 	add.w	r2, r2, lr, lsl #8
    e508:	8102      	strh	r2, [r0, #8]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.connLatency, p);
    e50a:	f891 e006 	ldrb.w	lr, [r1, #6]
    e50e:	794a      	ldrb	r2, [r1, #5]
    e510:	eb02 220e 	add.w	r2, r2, lr, lsl #8
    e514:	8142      	strh	r2, [r0, #10]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.supTimeout, p);
    e516:	f891 e008 	ldrb.w	lr, [r1, #8]
    e51a:	79ca      	ldrb	r2, [r1, #7]

  pMsg->hdr.param = pMsg->leConnUpdateCmpl.handle;
    e51c:	8003      	strh	r3, [r0, #0]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.supTimeout, p);
    e51e:	eb02 230e 	add.w	r3, r2, lr, lsl #8
    e522:	8183      	strh	r3, [r0, #12]
  pMsg->hdr.status = pMsg->leConnUpdateCmpl.status;
    e524:	f880 c003 	strb.w	ip, [r0, #3]
}
    e528:	f85d fb04 	ldr.w	pc, [sp], #4

0000e52c <hciEvtParseLeCreateConnCancelCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeCreateConnCancelCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leCreateConnCancelCmdCmpl.status, p);
    e52c:	780a      	ldrb	r2, [r1, #0]

  pMsg->hdr.status = pMsg->leCreateConnCancelCmdCmpl.status;
    e52e:	f04f 0300 	mov.w	r3, #0
    e532:	f362 0307 	bfi	r3, r2, #0, #8
    e536:	f362 230f 	bfi	r3, r2, #8, #8
    e53a:	f8a0 3003 	strh.w	r3, [r0, #3]
}
    e53e:	4770      	bx	lr

0000e540 <hciEvtParseReadRssiCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadRssiCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->readRssiCmdCmpl.status, p);
    e540:	780a      	ldrb	r2, [r1, #0]
    e542:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->readRssiCmdCmpl.handle, p);
    e544:	f891 c002 	ldrb.w	ip, [r1, #2]
    e548:	784b      	ldrb	r3, [r1, #1]
    e54a:	eb03 230c 	add.w	r3, r3, ip, lsl #8
    e54e:	b29b      	uxth	r3, r3
    e550:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT8(pMsg->readRssiCmdCmpl.rssi, p);
    e552:	78c9      	ldrb	r1, [r1, #3]
    e554:	7201      	strb	r1, [r0, #8]

  pMsg->hdr.param = pMsg->readRssiCmdCmpl.handle;
    e556:	8003      	strh	r3, [r0, #0]
  pMsg->hdr.status = pMsg->readRssiCmdCmpl.status;
    e558:	70c2      	strb	r2, [r0, #3]
}
    e55a:	4770      	bx	lr

0000e55c <hciEvtParseReadTxPwrLvlCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadTxPwrLvlCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->readTxPwrLvlCmdCmpl.status, p);
    e55c:	780b      	ldrb	r3, [r1, #0]
    e55e:	7103      	strb	r3, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->readTxPwrLvlCmdCmpl.handle, p);
    e560:	784a      	ldrb	r2, [r1, #1]
    e562:	7142      	strb	r2, [r0, #5]
  BSTREAM_TO_INT8(pMsg->readTxPwrLvlCmdCmpl.pwrLvl, p);
    e564:	78c9      	ldrb	r1, [r1, #3]
    e566:	7181      	strb	r1, [r0, #6]

  pMsg->hdr.param = pMsg->readTxPwrLvlCmdCmpl.handle;
    e568:	8002      	strh	r2, [r0, #0]
  pMsg->hdr.status = pMsg->readTxPwrLvlCmdCmpl.status;
    e56a:	70c3      	strb	r3, [r0, #3]
}
    e56c:	4770      	bx	lr
    e56e:	bf00      	nop

0000e570 <hciEvtParseReadRemoteVerInfoCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadRemoteVerInfoCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->readRemoteVerInfoCmpl.status, p);
    e570:	f891 c000 	ldrb.w	ip, [r1]
    e574:	f880 c004 	strb.w	ip, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.handle, p);
    e578:	788a      	ldrb	r2, [r1, #2]
    e57a:	784b      	ldrb	r3, [r1, #1]
    e57c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    e580:	b29b      	uxth	r3, r3
    e582:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT8(pMsg->readRemoteVerInfoCmpl.version, p);
    e584:	78ca      	ldrb	r2, [r1, #3]
    e586:	7202      	strb	r2, [r0, #8]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.mfrName, p);
    e588:	790a      	ldrb	r2, [r1, #4]
{
    e58a:	b500      	push	{lr}
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.mfrName, p);
    e58c:	f891 e005 	ldrb.w	lr, [r1, #5]
    e590:	eb02 220e 	add.w	r2, r2, lr, lsl #8
    e594:	8142      	strh	r2, [r0, #10]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.subversion, p);
    e596:	f891 e007 	ldrb.w	lr, [r1, #7]
    e59a:	798a      	ldrb	r2, [r1, #6]

  pMsg->hdr.param = pMsg->readRemoteVerInfoCmpl.handle;
    e59c:	8003      	strh	r3, [r0, #0]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.subversion, p);
    e59e:	eb02 230e 	add.w	r3, r2, lr, lsl #8
    e5a2:	8183      	strh	r3, [r0, #12]
  pMsg->hdr.status = pMsg->readRemoteVerInfoCmpl.status;
    e5a4:	f880 c003 	strb.w	ip, [r0, #3]
}
    e5a8:	f85d fb04 	ldr.w	pc, [sp], #4

0000e5ac <hciEvtParseLeLtkReqReplCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReqReplCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leLtkReqReplCmdCmpl.status, p);
    e5ac:	780a      	ldrb	r2, [r1, #0]
    e5ae:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leLtkReqReplCmdCmpl.handle, p);
    e5b0:	f891 c002 	ldrb.w	ip, [r1, #2]
    e5b4:	784b      	ldrb	r3, [r1, #1]

  pMsg->hdr.param = pMsg->leLtkReqReplCmdCmpl.handle;
  pMsg->hdr.status = pMsg->leLtkReqReplCmdCmpl.status;
    e5b6:	70c2      	strb	r2, [r0, #3]
  BSTREAM_TO_UINT16(pMsg->leLtkReqReplCmdCmpl.handle, p);
    e5b8:	eb03 230c 	add.w	r3, r3, ip, lsl #8
    e5bc:	b29b      	uxth	r3, r3
    e5be:	80c3      	strh	r3, [r0, #6]
  pMsg->hdr.param = pMsg->leLtkReqReplCmdCmpl.handle;
    e5c0:	8003      	strh	r3, [r0, #0]
}
    e5c2:	4770      	bx	lr

0000e5c4 <hciEvtParseLeLtkReqNegReplCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReqNegReplCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leLtkReqNegReplCmdCmpl.status, p);
    e5c4:	780a      	ldrb	r2, [r1, #0]
    e5c6:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leLtkReqNegReplCmdCmpl.handle, p);
    e5c8:	f891 c002 	ldrb.w	ip, [r1, #2]
    e5cc:	784b      	ldrb	r3, [r1, #1]

  pMsg->hdr.param = pMsg->leLtkReqNegReplCmdCmpl.handle;
  pMsg->hdr.status = pMsg->leLtkReqNegReplCmdCmpl.status;
    e5ce:	70c2      	strb	r2, [r0, #3]
  BSTREAM_TO_UINT16(pMsg->leLtkReqNegReplCmdCmpl.handle, p);
    e5d0:	eb03 230c 	add.w	r3, r3, ip, lsl #8
    e5d4:	b29b      	uxth	r3, r3
    e5d6:	80c3      	strh	r3, [r0, #6]
  pMsg->hdr.param = pMsg->leLtkReqNegReplCmdCmpl.handle;
    e5d8:	8003      	strh	r3, [r0, #0]
}
    e5da:	4770      	bx	lr

0000e5dc <hciEvtParseEncKeyRefreshCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseEncKeyRefreshCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->encKeyRefreshCmpl.status, p);
    e5dc:	780a      	ldrb	r2, [r1, #0]
    e5de:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->encKeyRefreshCmpl.handle, p);
    e5e0:	f891 c002 	ldrb.w	ip, [r1, #2]
    e5e4:	784b      	ldrb	r3, [r1, #1]

  pMsg->hdr.param = pMsg->encKeyRefreshCmpl.handle;
  pMsg->hdr.status = pMsg->encKeyRefreshCmpl.status;
    e5e6:	70c2      	strb	r2, [r0, #3]
  BSTREAM_TO_UINT16(pMsg->encKeyRefreshCmpl.handle, p);
    e5e8:	eb03 230c 	add.w	r3, r3, ip, lsl #8
    e5ec:	b29b      	uxth	r3, r3
    e5ee:	80c3      	strh	r3, [r0, #6]
  pMsg->hdr.param = pMsg->encKeyRefreshCmpl.handle;
    e5f0:	8003      	strh	r3, [r0, #0]
}
    e5f2:	4770      	bx	lr

0000e5f4 <hciEvtParseEncChange>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseEncChange(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->encChange.status, p);
    e5f4:	780a      	ldrb	r2, [r1, #0]
    e5f6:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->encChange.handle, p);
    e5f8:	f891 c002 	ldrb.w	ip, [r1, #2]
    e5fc:	784b      	ldrb	r3, [r1, #1]
    e5fe:	eb03 230c 	add.w	r3, r3, ip, lsl #8
    e602:	b29b      	uxth	r3, r3
    e604:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT8(pMsg->encChange.enabled, p);
    e606:	78c9      	ldrb	r1, [r1, #3]
    e608:	7201      	strb	r1, [r0, #8]

  pMsg->hdr.param = pMsg->encChange.handle;
    e60a:	8003      	strh	r3, [r0, #0]
  pMsg->hdr.status = pMsg->encChange.status;
    e60c:	70c2      	strb	r2, [r0, #3]
}
    e60e:	4770      	bx	lr

0000e610 <hciEvtParseVendorSpecCmdStatus>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseVendorSpecCmdStatus(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT16(pMsg->vendorSpecCmdStatus.opcode, p);
    e610:	784a      	ldrb	r2, [r1, #1]
    e612:	780b      	ldrb	r3, [r1, #0]
    e614:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    e618:	8083      	strh	r3, [r0, #4]
}
    e61a:	4770      	bx	lr

0000e61c <hciEvtParseHwError>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseHwError(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->hwError.code, p);
    e61c:	780b      	ldrb	r3, [r1, #0]
    e61e:	7103      	strb	r3, [r0, #4]
}
    e620:	4770      	bx	lr
    e622:	bf00      	nop

0000e624 <hciEvtParseLeAddDevToResListCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeAddDevToResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leAddDevToResListCmdCmpl.status, p);
    e624:	780a      	ldrb	r2, [r1, #0]

  pMsg->hdr.status = pMsg->leAddDevToResListCmdCmpl.status;
    e626:	f04f 0300 	mov.w	r3, #0
    e62a:	f362 0307 	bfi	r3, r2, #0, #8
    e62e:	f362 230f 	bfi	r3, r2, #8, #8
    e632:	f8a0 3003 	strh.w	r3, [r0, #3]
}
    e636:	4770      	bx	lr

0000e638 <hciEvtParseLeRemDevFromResListCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeRemDevFromResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leRemDevFromResListCmdCmpl.status, p);
    e638:	780a      	ldrb	r2, [r1, #0]

  pMsg->hdr.status = pMsg->leRemDevFromResListCmdCmpl.status;
    e63a:	f04f 0300 	mov.w	r3, #0
    e63e:	f362 0307 	bfi	r3, r2, #0, #8
    e642:	f362 230f 	bfi	r3, r2, #8, #8
    e646:	f8a0 3003 	strh.w	r3, [r0, #3]
}
    e64a:	4770      	bx	lr

0000e64c <hciEvtParseLeClearResListCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeClearResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leClearResListCmdCmpl.status, p);
    e64c:	780a      	ldrb	r2, [r1, #0]

  pMsg->hdr.status = pMsg->leClearResListCmdCmpl.status;
    e64e:	f04f 0300 	mov.w	r3, #0
    e652:	f362 0307 	bfi	r3, r2, #0, #8
    e656:	f362 230f 	bfi	r3, r2, #8, #8
    e65a:	f8a0 3003 	strh.w	r3, [r0, #3]
}
    e65e:	4770      	bx	lr

0000e660 <hciEvtParseLeSetAddrResEnableCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeSetAddrResEnableCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leSetAddrResEnableCmdCmpl.status, p);
    e660:	780a      	ldrb	r2, [r1, #0]

  pMsg->hdr.status = pMsg->leSetAddrResEnableCmdCmpl.status;
    e662:	f04f 0300 	mov.w	r3, #0
    e666:	f362 0307 	bfi	r3, r2, #0, #8
    e66a:	f362 230f 	bfi	r3, r2, #8, #8
    e66e:	f8a0 3003 	strh.w	r3, [r0, #3]
}
    e672:	4770      	bx	lr

0000e674 <hciEvtParseRemConnParamRepCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamRepCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leRemConnParamRepCmdCmpl.status, p);
    e674:	780a      	ldrb	r2, [r1, #0]
    e676:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamRepCmdCmpl.handle, p);
    e678:	f891 c002 	ldrb.w	ip, [r1, #2]
    e67c:	784b      	ldrb	r3, [r1, #1]

  pMsg->hdr.status = pMsg->leRemConnParamRepCmdCmpl.status;
    e67e:	70c2      	strb	r2, [r0, #3]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamRepCmdCmpl.handle, p);
    e680:	eb03 230c 	add.w	r3, r3, ip, lsl #8
    e684:	b29b      	uxth	r3, r3
    e686:	80c3      	strh	r3, [r0, #6]
  pMsg->hdr.param = pMsg->leRemConnParamRepCmdCmpl.handle;
    e688:	8003      	strh	r3, [r0, #0]
}
    e68a:	4770      	bx	lr

0000e68c <hciEvtParseRemConnParamNegRepCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamNegRepCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leRemConnParamNegRepCmdCmpl.status, p);
    e68c:	780a      	ldrb	r2, [r1, #0]
    e68e:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamNegRepCmdCmpl.handle, p);
    e690:	f891 c002 	ldrb.w	ip, [r1, #2]
    e694:	784b      	ldrb	r3, [r1, #1]

  pMsg->hdr.status = pMsg->leRemConnParamNegRepCmdCmpl.status;
    e696:	70c2      	strb	r2, [r0, #3]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamNegRepCmdCmpl.handle, p);
    e698:	eb03 230c 	add.w	r3, r3, ip, lsl #8
    e69c:	b29b      	uxth	r3, r3
    e69e:	80c3      	strh	r3, [r0, #6]
  pMsg->hdr.param = pMsg->leRemConnParamNegRepCmdCmpl.handle;
    e6a0:	8003      	strh	r3, [r0, #0]
}
    e6a2:	4770      	bx	lr

0000e6a4 <hciEvtParseReadDefDataLenCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadDefDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leReadDefDataLenCmdCmpl.status, p);
    e6a4:	780a      	ldrb	r2, [r1, #0]
    e6a6:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leReadDefDataLenCmdCmpl.suggestedMaxTxOctets, p);
    e6a8:	f891 c002 	ldrb.w	ip, [r1, #2]
    e6ac:	784b      	ldrb	r3, [r1, #1]
    e6ae:	eb03 230c 	add.w	r3, r3, ip, lsl #8
    e6b2:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT16(pMsg->leReadDefDataLenCmdCmpl.suggestedMaxTxTime, p);
    e6b4:	f891 c004 	ldrb.w	ip, [r1, #4]
    e6b8:	78cb      	ldrb	r3, [r1, #3]

  pMsg->hdr.status = pMsg->leReadDefDataLenCmdCmpl.status;
    e6ba:	70c2      	strb	r2, [r0, #3]
  BSTREAM_TO_UINT16(pMsg->leReadDefDataLenCmdCmpl.suggestedMaxTxTime, p);
    e6bc:	eb03 230c 	add.w	r3, r3, ip, lsl #8
    e6c0:	8103      	strh	r3, [r0, #8]
}
    e6c2:	4770      	bx	lr

0000e6c4 <hciEvtParseWriteDefDataLenCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseWriteDefDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leWriteDefDataLenCmdCmpl.status, p);
    e6c4:	780a      	ldrb	r2, [r1, #0]

  pMsg->hdr.status = pMsg->leWriteDefDataLenCmdCmpl.status;
    e6c6:	f04f 0300 	mov.w	r3, #0
    e6ca:	f362 0307 	bfi	r3, r2, #0, #8
    e6ce:	f362 230f 	bfi	r3, r2, #8, #8
    e6d2:	f8a0 3003 	strh.w	r3, [r0, #3]
}
    e6d6:	4770      	bx	lr

0000e6d8 <hciEvtParseSetDataLenCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseSetDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leSetDataLenCmdCmpl.status, p);
    e6d8:	780a      	ldrb	r2, [r1, #0]
    e6da:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leSetDataLenCmdCmpl.handle, p);
    e6dc:	f891 c002 	ldrb.w	ip, [r1, #2]
    e6e0:	784b      	ldrb	r3, [r1, #1]

  pMsg->hdr.status = pMsg->leSetDataLenCmdCmpl.status;
    e6e2:	70c2      	strb	r2, [r0, #3]
  BSTREAM_TO_UINT16(pMsg->leSetDataLenCmdCmpl.handle, p);
    e6e4:	eb03 230c 	add.w	r3, r3, ip, lsl #8
    e6e8:	b29b      	uxth	r3, r3
    e6ea:	80c3      	strh	r3, [r0, #6]
  pMsg->hdr.param = pMsg->leSetDataLenCmdCmpl.handle;
    e6ec:	8003      	strh	r3, [r0, #0]
}
    e6ee:	4770      	bx	lr

0000e6f0 <hciEvtParseReadMaxDataLenCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadMaxDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leReadMaxDataLenCmdCmpl.status, p);
    e6f0:	780a      	ldrb	r2, [r1, #0]
    e6f2:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxTxOctets, p);
    e6f4:	f891 c002 	ldrb.w	ip, [r1, #2]
    e6f8:	784b      	ldrb	r3, [r1, #1]
    e6fa:	eb03 230c 	add.w	r3, r3, ip, lsl #8
    e6fe:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxTxTime, p);
    e700:	f891 c004 	ldrb.w	ip, [r1, #4]
    e704:	78cb      	ldrb	r3, [r1, #3]
    e706:	eb03 230c 	add.w	r3, r3, ip, lsl #8
    e70a:	8103      	strh	r3, [r0, #8]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxRxOctets, p);
    e70c:	f891 c006 	ldrb.w	ip, [r1, #6]
    e710:	794b      	ldrb	r3, [r1, #5]
    e712:	eb03 230c 	add.w	r3, r3, ip, lsl #8
    e716:	8143      	strh	r3, [r0, #10]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxRxTime, p);
    e718:	f891 c008 	ldrb.w	ip, [r1, #8]
    e71c:	79cb      	ldrb	r3, [r1, #7]

  pMsg->hdr.status = pMsg->leReadMaxDataLenCmdCmpl.status;
    e71e:	70c2      	strb	r2, [r0, #3]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxRxTime, p);
    e720:	eb03 230c 	add.w	r3, r3, ip, lsl #8
    e724:	8183      	strh	r3, [r0, #12]
}
    e726:	4770      	bx	lr

0000e728 <hciEvtParseRemConnParamReq>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamReq(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.handle, p);
    e728:	784a      	ldrb	r2, [r1, #1]
    e72a:	780b      	ldrb	r3, [r1, #0]
    e72c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    e730:	b29b      	uxth	r3, r3
    e732:	8083      	strh	r3, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.intervalMin, p);
    e734:	f891 c003 	ldrb.w	ip, [r1, #3]
    e738:	788a      	ldrb	r2, [r1, #2]
    e73a:	eb02 220c 	add.w	r2, r2, ip, lsl #8
    e73e:	80c2      	strh	r2, [r0, #6]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.intervalMax, p);
    e740:	f891 c005 	ldrb.w	ip, [r1, #5]
    e744:	790a      	ldrb	r2, [r1, #4]
    e746:	eb02 220c 	add.w	r2, r2, ip, lsl #8
    e74a:	8102      	strh	r2, [r0, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.latency, p);
    e74c:	f891 c007 	ldrb.w	ip, [r1, #7]
    e750:	798a      	ldrb	r2, [r1, #6]
    e752:	eb02 220c 	add.w	r2, r2, ip, lsl #8
    e756:	8142      	strh	r2, [r0, #10]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.timeout, p);
    e758:	f891 c009 	ldrb.w	ip, [r1, #9]
    e75c:	7a0a      	ldrb	r2, [r1, #8]

  pMsg->hdr.param = pMsg->leRemConnParamReq.handle;
    e75e:	8003      	strh	r3, [r0, #0]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.timeout, p);
    e760:	eb02 230c 	add.w	r3, r2, ip, lsl #8
    e764:	8183      	strh	r3, [r0, #12]
}
    e766:	4770      	bx	lr

0000e768 <hciEvtParseDataLenChange>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseDataLenChange(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.handle, p);
    e768:	784a      	ldrb	r2, [r1, #1]
    e76a:	780b      	ldrb	r3, [r1, #0]
    e76c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    e770:	b29b      	uxth	r3, r3
    e772:	8083      	strh	r3, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxTxOctets, p);
    e774:	f891 c003 	ldrb.w	ip, [r1, #3]
    e778:	788a      	ldrb	r2, [r1, #2]
    e77a:	eb02 220c 	add.w	r2, r2, ip, lsl #8
    e77e:	80c2      	strh	r2, [r0, #6]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxTxTime, p);
    e780:	f891 c005 	ldrb.w	ip, [r1, #5]
    e784:	790a      	ldrb	r2, [r1, #4]
    e786:	eb02 220c 	add.w	r2, r2, ip, lsl #8
    e78a:	8102      	strh	r2, [r0, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxRxOctets, p);
    e78c:	f891 c007 	ldrb.w	ip, [r1, #7]
    e790:	798a      	ldrb	r2, [r1, #6]
    e792:	eb02 220c 	add.w	r2, r2, ip, lsl #8
    e796:	8142      	strh	r2, [r0, #10]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxRxTime, p);
    e798:	f891 c009 	ldrb.w	ip, [r1, #9]
    e79c:	7a0a      	ldrb	r2, [r1, #8]

  pMsg->hdr.param = pMsg->leDataLenChange.handle;
    e79e:	8003      	strh	r3, [r0, #0]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxRxTime, p);
    e7a0:	eb02 230c 	add.w	r3, r2, ip, lsl #8
    e7a4:	8183      	strh	r3, [r0, #12]
}
    e7a6:	4770      	bx	lr

0000e7a8 <hciEvtParseWriteAuthTimeoutCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtParseWriteAuthTimeoutCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->writeAuthPayloadToCmdCmpl.status, p);
    e7a8:	780a      	ldrb	r2, [r1, #0]
    e7aa:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->writeAuthPayloadToCmdCmpl.handle, p);
    e7ac:	f891 c002 	ldrb.w	ip, [r1, #2]
    e7b0:	784b      	ldrb	r3, [r1, #1]

  pMsg->hdr.status = pMsg->writeAuthPayloadToCmdCmpl.status;
    e7b2:	70c2      	strb	r2, [r0, #3]
  BSTREAM_TO_UINT16(pMsg->writeAuthPayloadToCmdCmpl.handle, p);
    e7b4:	eb03 230c 	add.w	r3, r3, ip, lsl #8
    e7b8:	b29b      	uxth	r3, r3
    e7ba:	80c3      	strh	r3, [r0, #6]
  pMsg->hdr.param = pMsg->writeAuthPayloadToCmdCmpl.handle;
    e7bc:	8003      	strh	r3, [r0, #0]
}
    e7be:	4770      	bx	lr

0000e7c0 <hciEvtParseAuthTimeoutExpiredEvt>:
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtParseAuthTimeoutExpiredEvt(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT16(pMsg->authPayloadToExpired.handle, p);
    e7c0:	784a      	ldrb	r2, [r1, #1]
    e7c2:	780b      	ldrb	r3, [r1, #0]
    e7c4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    e7c8:	b29b      	uxth	r3, r3
    e7ca:	8083      	strh	r3, [r0, #4]

  pMsg->hdr.param = pMsg->authPayloadToExpired.handle;
    e7cc:	8003      	strh	r3, [r0, #0]
}
    e7ce:	4770      	bx	lr

0000e7d0 <hciEvtParseReadPhyCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadPhyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.status, p);
    e7d0:	780a      	ldrb	r2, [r1, #0]
    e7d2:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leReadPhyCmdCmpl.handle, p);
    e7d4:	f891 c002 	ldrb.w	ip, [r1, #2]
    e7d8:	784b      	ldrb	r3, [r1, #1]
    e7da:	eb03 230c 	add.w	r3, r3, ip, lsl #8
    e7de:	b29b      	uxth	r3, r3
    e7e0:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.txPhy, p);
    e7e2:	f891 c003 	ldrb.w	ip, [r1, #3]
    e7e6:	f880 c008 	strb.w	ip, [r0, #8]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.rxPhy, p);
    e7ea:	7909      	ldrb	r1, [r1, #4]
    e7ec:	7241      	strb	r1, [r0, #9]

  pMsg->hdr.status = pMsg->leReadPhyCmdCmpl.status;
    e7ee:	70c2      	strb	r2, [r0, #3]
  pMsg->hdr.param = pMsg->leReadPhyCmdCmpl.handle;
    e7f0:	8003      	strh	r3, [r0, #0]
}
    e7f2:	4770      	bx	lr

0000e7f4 <hciEvtParseSetDefPhyCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseSetDefPhyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leSetDefPhyCmdCmpl.status, p);
    e7f4:	780a      	ldrb	r2, [r1, #0]

  pMsg->hdr.status = pMsg->leSetDefPhyCmdCmpl.status;
    e7f6:	f04f 0300 	mov.w	r3, #0
    e7fa:	f362 0307 	bfi	r3, r2, #0, #8
    e7fe:	f362 230f 	bfi	r3, r2, #8, #8
    e802:	f8a0 3003 	strh.w	r3, [r0, #3]
}
    e806:	4770      	bx	lr

0000e808 <hciEvtParsePhyUpdateCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParsePhyUpdateCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.status, p);
    e808:	780a      	ldrb	r2, [r1, #0]
    e80a:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->lePhyUpdate.handle, p);
    e80c:	f891 c002 	ldrb.w	ip, [r1, #2]
    e810:	784b      	ldrb	r3, [r1, #1]
    e812:	eb03 230c 	add.w	r3, r3, ip, lsl #8
    e816:	b29b      	uxth	r3, r3
    e818:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.txPhy, p);
    e81a:	f891 c003 	ldrb.w	ip, [r1, #3]
    e81e:	f880 c008 	strb.w	ip, [r0, #8]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.rxPhy, p);
    e822:	7909      	ldrb	r1, [r1, #4]
    e824:	7241      	strb	r1, [r0, #9]

  pMsg->hdr.status = pMsg->lePhyUpdate.status;
    e826:	70c2      	strb	r2, [r0, #3]
  pMsg->hdr.param = pMsg->lePhyUpdate.handle;
    e828:	8003      	strh	r3, [r0, #0]
}
    e82a:	4770      	bx	lr

0000e82c <hciEvtParseLeScanTimeout>:
 */
/*************************************************************************************************/
static void hciEvtParseLeScanTimeout(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  /* empty */
}
    e82c:	4770      	bx	lr
    e82e:	bf00      	nop

0000e830 <hciEvtParseLeAdvSetTerm>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeAdvSetTerm(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.status, p);
    e830:	780a      	ldrb	r2, [r1, #0]
    e832:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.advHandle, p);
    e834:	784b      	ldrb	r3, [r1, #1]
    e836:	7143      	strb	r3, [r0, #5]
  BSTREAM_TO_UINT16(pMsg->leAdvSetTerm.handle, p);
    e838:	f891 c003 	ldrb.w	ip, [r1, #3]
    e83c:	788b      	ldrb	r3, [r1, #2]
    e83e:	eb03 230c 	add.w	r3, r3, ip, lsl #8
    e842:	b29b      	uxth	r3, r3
    e844:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.numComplEvts, p);
    e846:	7909      	ldrb	r1, [r1, #4]
    e848:	7201      	strb	r1, [r0, #8]

  pMsg->hdr.status = pMsg->leAdvSetTerm.status;
    e84a:	70c2      	strb	r2, [r0, #3]
  pMsg->hdr.param = pMsg->leAdvSetTerm.handle;
    e84c:	8003      	strh	r3, [r0, #0]
}
    e84e:	4770      	bx	lr

0000e850 <hciEvtParseLeCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->hdr.status, p);
    e850:	780b      	ldrb	r3, [r1, #0]
    e852:	70c3      	strb	r3, [r0, #3]
}
    e854:	4770      	bx	lr
    e856:	bf00      	nop

0000e858 <hciEvtParseLeSetConnCteRcvParm>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeSetConnCteRcvParm(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    BSTREAM_TO_UINT8(pMsg->leSetConnCteRxParamsCmdCmpl.status, p);
    e858:	780a      	ldrb	r2, [r1, #0]
    e85a:	7102      	strb	r2, [r0, #4]
    BSTREAM_TO_UINT16(pMsg->leSetConnCteRxParamsCmdCmpl.handle, p);
    e85c:	f891 c002 	ldrb.w	ip, [r1, #2]
    e860:	784b      	ldrb	r3, [r1, #1]
    
    pMsg->hdr.status = pMsg->leSetConnCteRxParamsCmdCmpl.status;
    e862:	70c2      	strb	r2, [r0, #3]
    BSTREAM_TO_UINT16(pMsg->leSetConnCteRxParamsCmdCmpl.handle, p);
    e864:	eb03 230c 	add.w	r3, r3, ip, lsl #8
    e868:	b29b      	uxth	r3, r3
    e86a:	80c3      	strh	r3, [r0, #6]
    pMsg->hdr.param = pMsg->leSetConnCteRxParamsCmdCmpl.handle;
    e86c:	8003      	strh	r3, [r0, #0]
}
    e86e:	4770      	bx	lr

0000e870 <hciEvtParseLeSetConnCteTxParm>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeSetConnCteTxParm(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    BSTREAM_TO_UINT8(pMsg->leSetConnCteTxParamsCmdCmpl.status, p);
    e870:	780a      	ldrb	r2, [r1, #0]
    e872:	7102      	strb	r2, [r0, #4]
    BSTREAM_TO_UINT16(pMsg->leSetConnCteTxParamsCmdCmpl.handle, p);
    e874:	f891 c002 	ldrb.w	ip, [r1, #2]
    e878:	784b      	ldrb	r3, [r1, #1]
    
    pMsg->hdr.status = pMsg->leSetConnCteTxParamsCmdCmpl.status;
    e87a:	70c2      	strb	r2, [r0, #3]
    BSTREAM_TO_UINT16(pMsg->leSetConnCteTxParamsCmdCmpl.handle, p);
    e87c:	eb03 230c 	add.w	r3, r3, ip, lsl #8
    e880:	b29b      	uxth	r3, r3
    e882:	80c3      	strh	r3, [r0, #6]
    pMsg->hdr.param = pMsg->leSetConnCteTxParamsCmdCmpl.handle;
    e884:	8003      	strh	r3, [r0, #0]
}
    e886:	4770      	bx	lr

0000e888 <hciEvtParseLeConnCteReqEn>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeConnCteReqEn(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    BSTREAM_TO_UINT8(pMsg->leConnCteReqEnableCmdCmpl.status, p);
    e888:	780a      	ldrb	r2, [r1, #0]
    e88a:	7102      	strb	r2, [r0, #4]
    BSTREAM_TO_UINT16(pMsg->leConnCteReqEnableCmdCmpl.handle, p);
    e88c:	f891 c002 	ldrb.w	ip, [r1, #2]
    e890:	784b      	ldrb	r3, [r1, #1]
    
    pMsg->hdr.status = pMsg->leConnCteReqEnableCmdCmpl.status;
    e892:	70c2      	strb	r2, [r0, #3]
    BSTREAM_TO_UINT16(pMsg->leConnCteReqEnableCmdCmpl.handle, p);
    e894:	eb03 230c 	add.w	r3, r3, ip, lsl #8
    e898:	b29b      	uxth	r3, r3
    e89a:	80c3      	strh	r3, [r0, #6]
    pMsg->hdr.param = pMsg->leConnCteReqEnableCmdCmpl.handle;
    e89c:	8003      	strh	r3, [r0, #0]
}
    e89e:	4770      	bx	lr

0000e8a0 <hciEvtParseLeConnCteRspEn>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeConnCteRspEn(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    BSTREAM_TO_UINT8(pMsg->leConnCteRspEnableCmdCmpl.status, p);
    e8a0:	780a      	ldrb	r2, [r1, #0]
    e8a2:	7102      	strb	r2, [r0, #4]
    BSTREAM_TO_UINT16(pMsg->leConnCteRspEnableCmdCmpl.handle, p);
    e8a4:	f891 c002 	ldrb.w	ip, [r1, #2]
    e8a8:	784b      	ldrb	r3, [r1, #1]
    
    pMsg->hdr.status = pMsg->leConnCteRspEnableCmdCmpl.status;
    e8aa:	70c2      	strb	r2, [r0, #3]
    BSTREAM_TO_UINT16(pMsg->leConnCteRspEnableCmdCmpl.handle, p);
    e8ac:	eb03 230c 	add.w	r3, r3, ip, lsl #8
    e8b0:	b29b      	uxth	r3, r3
    e8b2:	80c3      	strh	r3, [r0, #6]
    pMsg->hdr.param = pMsg->leConnCteRspEnableCmdCmpl.handle;
    e8b4:	8003      	strh	r3, [r0, #0]
}
    e8b6:	4770      	bx	lr

0000e8b8 <hciEvtParseLePerAdvSyncLost>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLePerAdvSyncLost(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncLost.syncHandle, p);
    e8b8:	784a      	ldrb	r2, [r1, #1]
    e8ba:	780b      	ldrb	r3, [r1, #0]
    e8bc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    e8c0:	8083      	strh	r3, [r0, #4]
}
    e8c2:	4770      	bx	lr

0000e8c4 <hciEvtParseLePerAdvSyncEst>:
{
    e8c4:	b538      	push	{r3, r4, r5, lr}
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.status, p);
    e8c6:	780b      	ldrb	r3, [r1, #0]
    e8c8:	7103      	strb	r3, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncEst.syncHandle, p);
    e8ca:	788a      	ldrb	r2, [r1, #2]
    e8cc:	784b      	ldrb	r3, [r1, #1]
{
    e8ce:	460d      	mov	r5, r1
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncEst.syncHandle, p);
    e8d0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    e8d4:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advSid, p);
    e8d6:	78eb      	ldrb	r3, [r5, #3]
    e8d8:	7203      	strb	r3, [r0, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advAddrType, p);
    e8da:	792b      	ldrb	r3, [r5, #4]
    e8dc:	7243      	strb	r3, [r0, #9]
{
    e8de:	4604      	mov	r4, r0
  BSTREAM_TO_BDA(pMsg->lePerAdvSyncEst.advAddr, p);
    e8e0:	3105      	adds	r1, #5
    e8e2:	300a      	adds	r0, #10
    e8e4:	f004 fd5a 	bl	1339c <BdaCpy>
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advPhy, p);
    e8e8:	7aeb      	ldrb	r3, [r5, #11]
    e8ea:	7423      	strb	r3, [r4, #16]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncEst.perAdvInterval, p);
    e8ec:	7b69      	ldrb	r1, [r5, #13]
    e8ee:	7b2b      	ldrb	r3, [r5, #12]
  pMsg->hdr.status = pMsg->lePerAdvSyncEst.status;
    e8f0:	7922      	ldrb	r2, [r4, #4]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncEst.perAdvInterval, p);
    e8f2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    e8f6:	8263      	strh	r3, [r4, #18]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.clockAccuracy, p);
    e8f8:	7bab      	ldrb	r3, [r5, #14]
    e8fa:	7523      	strb	r3, [r4, #20]
  pMsg->hdr.status = pMsg->lePerAdvSyncEst.status;
    e8fc:	70e2      	strb	r2, [r4, #3]
}
    e8fe:	bd38      	pop	{r3, r4, r5, pc}

0000e900 <hciEvtParseLeScanReqRcvd>:
  BSTREAM_TO_UINT8(pMsg->leScanReqRcvd.advHandle, p);
    e900:	780b      	ldrb	r3, [r1, #0]
    e902:	7103      	strb	r3, [r0, #4]
  BSTREAM_TO_UINT8(pMsg->leScanReqRcvd.scanAddrType, p);
    e904:	784b      	ldrb	r3, [r1, #1]
    e906:	7143      	strb	r3, [r0, #5]
  BSTREAM_TO_BDA(pMsg->leScanReqRcvd.scanAddr, p);
    e908:	3102      	adds	r1, #2
    e90a:	3006      	adds	r0, #6
    e90c:	f004 bd46 	b.w	1339c <BdaCpy>

0000e910 <hciEvtParseLeReadLocalResAddrCmdCmpl>:
{
    e910:	b510      	push	{r4, lr}
  BSTREAM_TO_UINT8(pMsg->leReadLocalResAddrCmdCmpl.status, p);
    e912:	f811 3b01 	ldrb.w	r3, [r1], #1
    e916:	7103      	strb	r3, [r0, #4]
{
    e918:	4604      	mov	r4, r0
  BSTREAM_TO_BDA(pMsg->leReadLocalResAddrCmdCmpl.localRpa, p);
    e91a:	3005      	adds	r0, #5
    e91c:	f004 fd3e 	bl	1339c <BdaCpy>
  pMsg->hdr.status = pMsg->leReadLocalResAddrCmdCmpl.status;
    e920:	7923      	ldrb	r3, [r4, #4]
    e922:	70e3      	strb	r3, [r4, #3]
}
    e924:	bd10      	pop	{r4, pc}
    e926:	bf00      	nop

0000e928 <hciEvtParseLeReadPeerResAddrCmdCmpl>:
{
    e928:	b510      	push	{r4, lr}
  BSTREAM_TO_UINT8(pMsg->leReadPeerResAddrCmdCmpl.status, p);
    e92a:	f811 3b01 	ldrb.w	r3, [r1], #1
    e92e:	7103      	strb	r3, [r0, #4]
{
    e930:	4604      	mov	r4, r0
  BSTREAM_TO_BDA(pMsg->leReadPeerResAddrCmdCmpl.peerRpa, p);
    e932:	3005      	adds	r0, #5
    e934:	f004 fd32 	bl	1339c <BdaCpy>
  pMsg->hdr.status = pMsg->leReadPeerResAddrCmdCmpl.status;
    e938:	7923      	ldrb	r3, [r4, #4]
    e93a:	70e3      	strb	r3, [r4, #3]
}
    e93c:	bd10      	pop	{r4, pc}
    e93e:	bf00      	nop

0000e940 <hciEvtParseLeEnhancedConnCmpl>:
{
    e940:	b538      	push	{r3, r4, r5, lr}
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.status, p);
    e942:	780b      	ldrb	r3, [r1, #0]
    e944:	7103      	strb	r3, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.handle, p);
    e946:	788a      	ldrb	r2, [r1, #2]
    e948:	784b      	ldrb	r3, [r1, #1]
{
    e94a:	460d      	mov	r5, r1
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.handle, p);
    e94c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    e950:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.role, p);
    e952:	78eb      	ldrb	r3, [r5, #3]
    e954:	7203      	strb	r3, [r0, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.addrType, p);
    e956:	792b      	ldrb	r3, [r5, #4]
    e958:	7243      	strb	r3, [r0, #9]
{
    e95a:	4604      	mov	r4, r0
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerAddr, p);
    e95c:	3105      	adds	r1, #5
    e95e:	300a      	adds	r0, #10
    e960:	f004 fd1c 	bl	1339c <BdaCpy>
  BSTREAM_TO_BDA(pMsg->leConnCmpl.localRpa, p);
    e964:	f105 010b 	add.w	r1, r5, #11
    e968:	f104 0017 	add.w	r0, r4, #23
    e96c:	f004 fd16 	bl	1339c <BdaCpy>
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerRpa, p);
    e970:	f105 0111 	add.w	r1, r5, #17
    e974:	f104 001d 	add.w	r0, r4, #29
    e978:	f004 fd10 	bl	1339c <BdaCpy>
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connInterval, p);
    e97c:	7e29      	ldrb	r1, [r5, #24]
    e97e:	7deb      	ldrb	r3, [r5, #23]
  pMsg->hdr.param = pMsg->leConnCmpl.handle;
    e980:	88e2      	ldrh	r2, [r4, #6]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connInterval, p);
    e982:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    e986:	8223      	strh	r3, [r4, #16]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connLatency, p);
    e988:	7ea9      	ldrb	r1, [r5, #26]
    e98a:	7e6b      	ldrb	r3, [r5, #25]
    e98c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    e990:	8263      	strh	r3, [r4, #18]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.supTimeout, p);
    e992:	7f29      	ldrb	r1, [r5, #28]
    e994:	7eeb      	ldrb	r3, [r5, #27]
    e996:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    e99a:	82a3      	strh	r3, [r4, #20]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.clockAccuracy, p);
    e99c:	7f69      	ldrb	r1, [r5, #29]
  pMsg->hdr.status = pMsg->leConnCmpl.status;
    e99e:	7923      	ldrb	r3, [r4, #4]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.clockAccuracy, p);
    e9a0:	75a1      	strb	r1, [r4, #22]
  pMsg->hdr.param = pMsg->leConnCmpl.handle;
    e9a2:	8022      	strh	r2, [r4, #0]
  pMsg->hdr.status = pMsg->leConnCmpl.status;
    e9a4:	70e3      	strb	r3, [r4, #3]
}
    e9a6:	bd38      	pop	{r3, r4, r5, pc}

0000e9a8 <hciEvtParseGenDhKeyCmdCmpl>:
{
    e9a8:	b510      	push	{r4, lr}
  BSTREAM_TO_UINT8(pMsg->leGenDHKey.status, p);
    e9aa:	460b      	mov	r3, r1
    e9ac:	f813 4b01 	ldrb.w	r4, [r3], #1
    e9b0:	7104      	strb	r4, [r0, #4]
  memcpy(pMsg->leGenDHKey.key, p, HCI_DH_KEY_LEN);
    e9b2:	f8d1 c001 	ldr.w	ip, [r1, #1]
    e9b6:	689a      	ldr	r2, [r3, #8]
    e9b8:	6859      	ldr	r1, [r3, #4]
    e9ba:	f8d3 e00c 	ldr.w	lr, [r3, #12]
    e9be:	f8c0 e011 	str.w	lr, [r0, #17]
    e9c2:	f8c0 c005 	str.w	ip, [r0, #5]
    e9c6:	f8c0 1009 	str.w	r1, [r0, #9]
    e9ca:	f8c0 200d 	str.w	r2, [r0, #13]
    e9ce:	f8d3 c010 	ldr.w	ip, [r3, #16]
    e9d2:	6959      	ldr	r1, [r3, #20]
    e9d4:	699a      	ldr	r2, [r3, #24]
    e9d6:	f8d3 e01c 	ldr.w	lr, [r3, #28]
    e9da:	f8c0 e021 	str.w	lr, [r0, #33]	; 0x21
    e9de:	f8c0 c015 	str.w	ip, [r0, #21]
    e9e2:	f8c0 1019 	str.w	r1, [r0, #25]
    e9e6:	f8c0 201d 	str.w	r2, [r0, #29]
  pMsg->hdr.status = pMsg->leGenDHKey.status;
    e9ea:	70c4      	strb	r4, [r0, #3]
}
    e9ec:	bd10      	pop	{r4, pc}
    e9ee:	bf00      	nop

0000e9f0 <hciEvtParseReadPubKeyCmdCmpl>:
{
    e9f0:	b570      	push	{r4, r5, r6, lr}
  BSTREAM_TO_UINT8(pMsg->leP256.status, p);
    e9f2:	460b      	mov	r3, r1
  memcpy(pMsg->leP256.key, p, HCI_P256_KEY_LEN);
    e9f4:	1d42      	adds	r2, r0, #5
  BSTREAM_TO_UINT8(pMsg->leP256.status, p);
    e9f6:	f813 cb01 	ldrb.w	ip, [r3], #1
    e9fa:	f880 c004 	strb.w	ip, [r0, #4]
  memcpy(pMsg->leP256.key, p, HCI_P256_KEY_LEN);
    e9fe:	3141      	adds	r1, #65	; 0x41
    ea00:	681d      	ldr	r5, [r3, #0]
    ea02:	685c      	ldr	r4, [r3, #4]
    ea04:	f8d3 e008 	ldr.w	lr, [r3, #8]
    ea08:	68de      	ldr	r6, [r3, #12]
    ea0a:	60d6      	str	r6, [r2, #12]
    ea0c:	3310      	adds	r3, #16
    ea0e:	428b      	cmp	r3, r1
    ea10:	6015      	str	r5, [r2, #0]
    ea12:	6054      	str	r4, [r2, #4]
    ea14:	f8c2 e008 	str.w	lr, [r2, #8]
    ea18:	f102 0210 	add.w	r2, r2, #16
    ea1c:	d1f0      	bne.n	ea00 <hciEvtParseReadPubKeyCmdCmpl+0x10>
  pMsg->hdr.status = pMsg->leP256.status;
    ea1e:	f880 c003 	strb.w	ip, [r0, #3]
}
    ea22:	bd70      	pop	{r4, r5, r6, pc}

0000ea24 <hciEvtParseLeRandCmdCmpl>:
  BSTREAM_TO_UINT8(pMsg->leRandCmdCmpl.status, p);
    ea24:	460b      	mov	r3, r1
    ea26:	f813 2b01 	ldrb.w	r2, [r3], #1
    ea2a:	7102      	strb	r2, [r0, #4]
  memcpy(pMsg->leRandCmdCmpl.randNum, p, HCI_RAND_LEN);
    ea2c:	f8d1 1001 	ldr.w	r1, [r1, #1]
    ea30:	685b      	ldr	r3, [r3, #4]
    ea32:	f8c0 3009 	str.w	r3, [r0, #9]
    ea36:	f8c0 1005 	str.w	r1, [r0, #5]
  pMsg->hdr.status = pMsg->leRandCmdCmpl.status;
    ea3a:	70c2      	strb	r2, [r0, #3]
}
    ea3c:	4770      	bx	lr
    ea3e:	bf00      	nop

0000ea40 <hciEvtParseLeEncryptCmdCmpl>:
{
    ea40:	b500      	push	{lr}
  BSTREAM_TO_UINT8(pMsg->leEncryptCmdCmpl.status, p);
    ea42:	460b      	mov	r3, r1
    ea44:	f813 2b01 	ldrb.w	r2, [r3], #1
    ea48:	7102      	strb	r2, [r0, #4]
  memcpy(pMsg->leEncryptCmdCmpl.data, p, HCI_ENCRYPT_DATA_LEN);
    ea4a:	f8d1 e001 	ldr.w	lr, [r1, #1]
    ea4e:	f8d3 c004 	ldr.w	ip, [r3, #4]
    ea52:	6899      	ldr	r1, [r3, #8]
    ea54:	68db      	ldr	r3, [r3, #12]
    ea56:	f8c0 3011 	str.w	r3, [r0, #17]
    ea5a:	f8c0 e005 	str.w	lr, [r0, #5]
    ea5e:	f8c0 c009 	str.w	ip, [r0, #9]
    ea62:	f8c0 100d 	str.w	r1, [r0, #13]
  pMsg->hdr.status = pMsg->leEncryptCmdCmpl.status;
    ea66:	70c2      	strb	r2, [r0, #3]
}
    ea68:	f85d fb04 	ldr.w	pc, [sp], #4

0000ea6c <hciEvtParseVendorSpec>:
  memcpy(pMsg->vendorSpec.param, p, len);
    ea6c:	3004      	adds	r0, #4
    ea6e:	f7fd bb47 	b.w	c100 <memcpy>
    ea72:	bf00      	nop

0000ea74 <hciEvtParseVendorSpecCmdCmpl>:
  BSTREAM_TO_UINT16(pMsg->vendorSpecCmdCmpl.opcode, p);
    ea74:	f811 cc01 	ldrb.w	ip, [r1, #-1]
    ea78:	f811 3c02 	ldrb.w	r3, [r1, #-2]
    ea7c:	eb03 230c 	add.w	r3, r3, ip, lsl #8
    ea80:	8083      	strh	r3, [r0, #4]
  BSTREAM_TO_UINT8(pMsg->hdr.status, p);
    ea82:	f811 3b01 	ldrb.w	r3, [r1], #1
    ea86:	70c3      	strb	r3, [r0, #3]
  memcpy(&pMsg->vendorSpecCmdCmpl.param[0], p, len - 4);
    ea88:	3a04      	subs	r2, #4
    ea8a:	3006      	adds	r0, #6
    ea8c:	f7fd bb38 	b.w	c100 <memcpy>

0000ea90 <hciEvtParseLeLtkReq>:
  BSTREAM_TO_UINT16(pMsg->leLtkReq.handle, p);
    ea90:	460a      	mov	r2, r1
    ea92:	f891 c001 	ldrb.w	ip, [r1, #1]
    ea96:	f812 3b02 	ldrb.w	r3, [r2], #2
    ea9a:	eb03 230c 	add.w	r3, r3, ip, lsl #8
    ea9e:	b29b      	uxth	r3, r3
    eaa0:	8083      	strh	r3, [r0, #4]
  memcpy(pMsg->leLtkReq.randNum, p, HCI_RAND_LEN);
    eaa2:	f8d1 c002 	ldr.w	ip, [r1, #2]
    eaa6:	6852      	ldr	r2, [r2, #4]
    eaa8:	f8c0 200a 	str.w	r2, [r0, #10]
    eaac:	f8c0 c006 	str.w	ip, [r0, #6]
  BSTREAM_TO_UINT16(pMsg->leLtkReq.encDiversifier, p);
    eab0:	f891 c00b 	ldrb.w	ip, [r1, #11]
    eab4:	7a8a      	ldrb	r2, [r1, #10]
  pMsg->hdr.param = pMsg->leLtkReq.handle;
    eab6:	8003      	strh	r3, [r0, #0]
  BSTREAM_TO_UINT16(pMsg->leLtkReq.encDiversifier, p);
    eab8:	eb02 230c 	add.w	r3, r2, ip, lsl #8
    eabc:	81c3      	strh	r3, [r0, #14]
}
    eabe:	4770      	bx	lr

0000eac0 <hciEvtParseReadLeRemoteFeatCmpl>:
  BSTREAM_TO_UINT8(pMsg->leReadRemoteFeatCmpl.status, p);
    eac0:	780a      	ldrb	r2, [r1, #0]
    eac2:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leReadRemoteFeatCmpl.handle, p);
    eac4:	f891 c002 	ldrb.w	ip, [r1, #2]
    eac8:	784b      	ldrb	r3, [r1, #1]
    eaca:	eb03 230c 	add.w	r3, r3, ip, lsl #8
    eace:	b29b      	uxth	r3, r3
    ead0:	80c3      	strh	r3, [r0, #6]
  memcpy(&pMsg->leReadRemoteFeatCmpl.features, p, HCI_FEAT_LEN);
    ead2:	f8d1 c003 	ldr.w	ip, [r1, #3]
    ead6:	f8d1 1007 	ldr.w	r1, [r1, #7]
    eada:	60c1      	str	r1, [r0, #12]
    eadc:	f8c0 c008 	str.w	ip, [r0, #8]
  pMsg->hdr.param = pMsg->leReadRemoteFeatCmpl.handle;
    eae0:	8003      	strh	r3, [r0, #0]
  pMsg->hdr.status = pMsg->leReadRemoteFeatCmpl.status;
    eae2:	70c2      	strb	r2, [r0, #3]
}
    eae4:	4770      	bx	lr
    eae6:	bf00      	nop

0000eae8 <hciEvtParseReadChanMapCmdCmpl>:
  BSTREAM_TO_UINT8(pMsg->readChanMapCmdCmpl.status, p);
    eae8:	780a      	ldrb	r2, [r1, #0]
    eaea:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->readChanMapCmdCmpl.handle, p);
    eaec:	f891 c002 	ldrb.w	ip, [r1, #2]
    eaf0:	784b      	ldrb	r3, [r1, #1]
    eaf2:	eb03 230c 	add.w	r3, r3, ip, lsl #8
    eaf6:	b29b      	uxth	r3, r3
    eaf8:	80c3      	strh	r3, [r0, #6]
  memcpy(pMsg->readChanMapCmdCmpl.chanMap, p, HCI_CHAN_MAP_LEN);
    eafa:	f8d1 c003 	ldr.w	ip, [r1, #3]
    eafe:	f8c0 c008 	str.w	ip, [r0, #8]
    eb02:	79c9      	ldrb	r1, [r1, #7]
    eb04:	7301      	strb	r1, [r0, #12]
  pMsg->hdr.param = pMsg->readChanMapCmdCmpl.handle;
    eb06:	8003      	strh	r3, [r0, #0]
  pMsg->hdr.status = pMsg->readChanMapCmdCmpl.status;
    eb08:	70c2      	strb	r2, [r0, #3]
}
    eb0a:	4770      	bx	lr

0000eb0c <hciEvtParseLeConnCmpl>:
{
    eb0c:	b538      	push	{r3, r4, r5, lr}
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.status, p);
    eb0e:	780b      	ldrb	r3, [r1, #0]
    eb10:	7103      	strb	r3, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.handle, p);
    eb12:	788a      	ldrb	r2, [r1, #2]
    eb14:	784b      	ldrb	r3, [r1, #1]
{
    eb16:	460d      	mov	r5, r1
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.handle, p);
    eb18:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    eb1c:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.role, p);
    eb1e:	78eb      	ldrb	r3, [r5, #3]
    eb20:	7203      	strb	r3, [r0, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.addrType, p);
    eb22:	792b      	ldrb	r3, [r5, #4]
    eb24:	7243      	strb	r3, [r0, #9]
{
    eb26:	4604      	mov	r4, r0
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerAddr, p);
    eb28:	3105      	adds	r1, #5
    eb2a:	300a      	adds	r0, #10
    eb2c:	f004 fc36 	bl	1339c <BdaCpy>
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connInterval, p);
    eb30:	7b2a      	ldrb	r2, [r5, #12]
    eb32:	7aeb      	ldrb	r3, [r5, #11]
    eb34:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    eb38:	8223      	strh	r3, [r4, #16]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connLatency, p);
    eb3a:	7baa      	ldrb	r2, [r5, #14]
    eb3c:	7b6b      	ldrb	r3, [r5, #13]
    eb3e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    eb42:	8263      	strh	r3, [r4, #18]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.supTimeout, p);
    eb44:	7c2a      	ldrb	r2, [r5, #16]
    eb46:	7beb      	ldrb	r3, [r5, #15]
    eb48:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    eb4c:	82a3      	strh	r3, [r4, #20]
  memset(pMsg->leConnCmpl.localRpa, 0, BDA_ADDR_LEN);
    eb4e:	2300      	movs	r3, #0
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.clockAccuracy, p);
    eb50:	7c68      	ldrb	r0, [r5, #17]
  pMsg->hdr.param = pMsg->leConnCmpl.handle;
    eb52:	88e2      	ldrh	r2, [r4, #6]
  memset(pMsg->leConnCmpl.localRpa, 0, BDA_ADDR_LEN);
    eb54:	f8c4 3017 	str.w	r3, [r4, #23]
    eb58:	f8a4 301b 	strh.w	r3, [r4, #27]
  memset(pMsg->leConnCmpl.peerRpa, 0, BDA_ADDR_LEN);
    eb5c:	f8c4 301d 	str.w	r3, [r4, #29]
    eb60:	f8a4 3021 	strh.w	r3, [r4, #33]	; 0x21
  pMsg->hdr.status = pMsg->leConnCmpl.status;
    eb64:	7923      	ldrb	r3, [r4, #4]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.clockAccuracy, p);
    eb66:	75a0      	strb	r0, [r4, #22]
  pMsg->hdr.param = pMsg->leConnCmpl.handle;
    eb68:	8022      	strh	r2, [r4, #0]
  pMsg->hdr.status = pMsg->leConnCmpl.status;
    eb6a:	70e3      	strb	r3, [r4, #3]
}
    eb6c:	bd38      	pop	{r3, r4, r5, pc}
    eb6e:	bf00      	nop

0000eb70 <hciEvtProcessCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessCmdCmpl(uint8_t *p, uint8_t len)
{
    eb70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    eb74:	4688      	mov	r8, r1
  hciEvt_t      *pMsg;
  uint8_t       cbackEvt = 0;
  hciEvtCback_t cback = hciCb.evtCback;

  BSTREAM_TO_UINT8(numPkts, p);
  BSTREAM_TO_UINT16(opcode, p);
    eb76:	7843      	ldrb	r3, [r0, #1]
    eb78:	7881      	ldrb	r1, [r0, #2]
  hciEvtCback_t cback = hciCb.evtCback;
    eb7a:	4a9e      	ldr	r2, [pc, #632]	; (edf4 <hciEvtProcessCmdCmpl+0x284>)
  BSTREAM_TO_UINT8(numPkts, p);
    eb7c:	7806      	ldrb	r6, [r0, #0]
  hciEvtCback_t cback = hciCb.evtCback;
    eb7e:	6897      	ldr	r7, [r2, #8]
  BSTREAM_TO_UINT16(opcode, p);
    eb80:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    eb84:	b29b      	uxth	r3, r3

  /* convert opcode to internal event code and perform special handling */
  switch (opcode)
    eb86:	f242 0157 	movw	r1, #8279	; 0x2057
    eb8a:	428b      	cmp	r3, r1
  BSTREAM_TO_UINT16(opcode, p);
    eb8c:	f100 0503 	add.w	r5, r0, #3
  switch (opcode)
    eb90:	f200 808d 	bhi.w	ecae <hciEvtProcessCmdCmpl+0x13e>
    eb94:	f242 0109 	movw	r1, #8201	; 0x2009
    eb98:	428b      	cmp	r3, r1
    eb9a:	d955      	bls.n	ec48 <hciEvtProcessCmdCmpl+0xd8>
    eb9c:	f5a3 5000 	sub.w	r0, r3, #8192	; 0x2000
    eba0:	380a      	subs	r0, #10
    eba2:	284d      	cmp	r0, #77	; 0x4d
    eba4:	f200 8083 	bhi.w	ecae <hciEvtProcessCmdCmpl+0x13e>
    eba8:	e8df f010 	tbh	[pc, r0, lsl #1]
    ebac:	00810114 	.word	0x00810114
    ebb0:	0081010f 	.word	0x0081010f
    ebb4:	0081011e 	.word	0x0081011e
    ebb8:	00810081 	.word	0x00810081
    ebbc:	00810081 	.word	0x00810081
    ebc0:	010a0081 	.word	0x010a0081
    ebc4:	01040081 	.word	0x01040081
    ebc8:	008100fe 	.word	0x008100fe
    ebcc:	00f400f9 	.word	0x00f400f9
    ebd0:	00810081 	.word	0x00810081
    ebd4:	00810081 	.word	0x00810081
    ebd8:	00ea00ef 	.word	0x00ea00ef
    ebdc:	00e000e5 	.word	0x00e000e5
    ebe0:	008100db 	.word	0x008100db
    ebe4:	00d60081 	.word	0x00d60081
    ebe8:	00cc00d1 	.word	0x00cc00d1
    ebec:	00c70081 	.word	0x00c70081
    ebf0:	00bd00c2 	.word	0x00bd00c2
    ebf4:	00b80081 	.word	0x00b80081
    ebf8:	00ae00b3 	.word	0x00ae00b3
    ebfc:	00810081 	.word	0x00810081
    ec00:	00810081 	.word	0x00810081
    ec04:	00810081 	.word	0x00810081
    ec08:	00a90081 	.word	0x00a90081
    ec0c:	00810081 	.word	0x00810081
    ec10:	00810081 	.word	0x00810081
    ec14:	00810081 	.word	0x00810081
    ec18:	008100a4 	.word	0x008100a4
    ec1c:	0081009f 	.word	0x0081009f
    ec20:	00810081 	.word	0x00810081
    ec24:	00810081 	.word	0x00810081
    ec28:	00810081 	.word	0x00810081
    ec2c:	00810081 	.word	0x00810081
    ec30:	00810081 	.word	0x00810081
    ec34:	00810081 	.word	0x00810081
    ec38:	00810081 	.word	0x00810081
    ec3c:	00810081 	.word	0x00810081
    ec40:	0095009a 	.word	0x0095009a
    ec44:	01190090 	.word	0x01190090
    ec48:	f640 427c 	movw	r2, #3196	; 0xc7c
    ec4c:	4293      	cmp	r3, r2
    ec4e:	d029      	beq.n	eca4 <hciEvtProcessCmdCmpl+0x134>
    ec50:	f241 4205 	movw	r2, #5125	; 0x1405
    ec54:	4293      	cmp	r3, r2
    ec56:	d11c      	bne.n	ec92 <hciEvtProcessCmdCmpl+0x122>
    ec58:	f04f 0a07 	mov.w	sl, #7
    ec5c:	200a      	movs	r0, #10
  case HCI_OPCODE_LE_READ_CHAN_MAP:
    cbackEvt = HCI_LE_READ_CHAN_MAP_CMD_CMPL_CBACK_EVT;
    break;

  case HCI_OPCODE_READ_RSSI:
    cbackEvt = HCI_READ_RSSI_CMD_CMPL_CBACK_EVT;
    ec5e:	46d1      	mov	r9, sl

  /* if callback is executed for this event */
  if (cbackEvt != 0)
  {
    /* allocate temp buffer */
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
    ec60:	f000 fe12 	bl	f888 <WsfBufAlloc>
    ec64:	4604      	mov	r4, r0
    ec66:	b178      	cbz	r0, ec88 <hciEvtProcessCmdCmpl+0x118>
      pMsg->hdr.param = 0;
      pMsg->hdr.event = cbackEvt;
      pMsg->hdr.status = 0;

      /* execute parsing function for the event */
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, p, len);
    ec68:	4b63      	ldr	r3, [pc, #396]	; (edf8 <hciEvtProcessCmdCmpl+0x288>)
      pMsg->hdr.event = cbackEvt;
    ec6a:	f880 9002 	strb.w	r9, [r0, #2]
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, p, len);
    ec6e:	4629      	mov	r1, r5
    ec70:	f853 502a 	ldr.w	r5, [r3, sl, lsl #2]
      pMsg->hdr.param = 0;
    ec74:	2300      	movs	r3, #0
    ec76:	8003      	strh	r3, [r0, #0]
      pMsg->hdr.status = 0;
    ec78:	70c3      	strb	r3, [r0, #3]
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, p, len);
    ec7a:	4642      	mov	r2, r8
    ec7c:	47a8      	blx	r5

      /* execute callback */
      (*cback)(pMsg);
    ec7e:	4620      	mov	r0, r4
    ec80:	47b8      	blx	r7

      /* free buffer */
      WsfBufFree(pMsg);
    ec82:	4620      	mov	r0, r4
    ec84:	f000 fe30 	bl	f8e8 <WsfBufFree>
    }
  }

  hciCmdRecvCmpl(numPkts);
    ec88:	4630      	mov	r0, r6
}
    ec8a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  hciCmdRecvCmpl(numPkts);
    ec8e:	f7fd bfbf 	b.w	cc10 <hciCmdRecvCmpl>
  switch (opcode)
    ec92:	f640 422d 	movw	r2, #3117	; 0xc2d
    ec96:	4293      	cmp	r3, r2
    ec98:	d1f6      	bne.n	ec88 <hciEvtProcessCmdCmpl+0x118>
    ec9a:	f04f 0a09 	mov.w	sl, #9
    ec9e:	2008      	movs	r0, #8
    cbackEvt = HCI_READ_TX_PWR_LVL_CMD_CMPL_CBACK_EVT;
    eca0:	46d1      	mov	r9, sl
    eca2:	e7dd      	b.n	ec60 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
    eca4:	f04f 0a27 	mov.w	sl, #39	; 0x27
    eca8:	2008      	movs	r0, #8
    cbackEvt = HCI_WRITE_AUTH_PAYLOAD_TO_CMD_CMPL_CBACK_EVT;
    ecaa:	46d1      	mov	r9, sl
    ecac:	e7d8      	b.n	ec60 <hciEvtProcessCmdCmpl+0xf0>
    if (HCI_OGF(opcode) == HCI_OGF_VENDOR_SPEC)
    ecae:	0a9a      	lsrs	r2, r3, #10
    ecb0:	2a3f      	cmp	r2, #63	; 0x3f
    ecb2:	d1e9      	bne.n	ec88 <hciEvtProcessCmdCmpl+0x118>
      cbackEvt = hciCoreVsCmdCmplRcvd(opcode, p, len);
    ecb4:	4618      	mov	r0, r3
    ecb6:	4642      	mov	r2, r8
    ecb8:	4629      	mov	r1, r5
    ecba:	f7fd ff8b 	bl	cbd4 <hciCoreVsCmdCmplRcvd>
  if (cbackEvt != 0)
    ecbe:	4681      	mov	r9, r0
    ecc0:	2800      	cmp	r0, #0
    ecc2:	d0e1      	beq.n	ec88 <hciEvtProcessCmdCmpl+0x118>
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
    ecc4:	4b4d      	ldr	r3, [pc, #308]	; (edfc <hciEvtProcessCmdCmpl+0x28c>)
    ecc6:	46ca      	mov	sl, r9
    ecc8:	5c18      	ldrb	r0, [r3, r0]
    ecca:	e7c9      	b.n	ec60 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
    eccc:	f04f 0a41 	mov.w	sl, #65	; 0x41
    ecd0:	2008      	movs	r0, #8
    cbackEvt = HCI_LE_CONN_CTE_REQ_ENABLE_CMD_CMPL_CBACK_EVT;
    ecd2:	46d1      	mov	r9, sl
    ecd4:	e7c4      	b.n	ec60 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
    ecd6:	f04f 0a40 	mov.w	sl, #64	; 0x40
    ecda:	2008      	movs	r0, #8
    cbackEvt = HCI_LE_SET_CONN_CTE_TX_PARAMS_CMD_CMPL_CBACK_EVT;
    ecdc:	46d1      	mov	r9, sl
    ecde:	e7bf      	b.n	ec60 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
    ece0:	f04f 0a3f 	mov.w	sl, #63	; 0x3f
    ece4:	2008      	movs	r0, #8
    cbackEvt = HCI_LE_SET_CONN_CTE_RX_PARAMS_CMD_CMPL_CBACK_EVT;
    ece6:	46d1      	mov	r9, sl
    ece8:	e7ba      	b.n	ec60 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
    ecea:	f04f 0a36 	mov.w	sl, #54	; 0x36
    ecee:	2004      	movs	r0, #4
    cbackEvt = HCI_LE_EXT_SCAN_ENABLE_CMD_CMPL_CBACK_EVT;
    ecf0:	46d1      	mov	r9, sl
    ecf2:	e7b5      	b.n	ec60 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
    ecf4:	f04f 0a38 	mov.w	sl, #56	; 0x38
    ecf8:	2004      	movs	r0, #4
    cbackEvt = HCI_LE_PER_ADV_ENABLE_CMD_CMPL_CBACK_EVT;
    ecfa:	46d1      	mov	r9, sl
    ecfc:	e7b0      	b.n	ec60 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
    ecfe:	f04f 0a37 	mov.w	sl, #55	; 0x37
    ed02:	2004      	movs	r0, #4
    cbackEvt = HCI_LE_EXT_ADV_ENABLE_CMD_CMPL_CBACK_EVT;
    ed04:	46d1      	mov	r9, sl
    ed06:	e7ab      	b.n	ec60 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
    ed08:	f04f 0a2a 	mov.w	sl, #42	; 0x2a
    ed0c:	2006      	movs	r0, #6
    cbackEvt = HCI_LE_SET_DEF_PHY_CMD_CMPL_CBACK_EVT;
    ed0e:	46d1      	mov	r9, sl
    ed10:	e7a6      	b.n	ec60 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
    ed12:	f04f 0a29 	mov.w	sl, #41	; 0x29
    ed16:	200a      	movs	r0, #10
    cbackEvt = HCI_LE_READ_PHY_CMD_CMPL_CBACK_EVT;
    ed18:	46d1      	mov	r9, sl
    ed1a:	e7a1      	b.n	ec60 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
    ed1c:	f04f 0a22 	mov.w	sl, #34	; 0x22
    ed20:	200e      	movs	r0, #14
    cbackEvt = HCI_LE_READ_MAX_DATA_LEN_CMD_CMPL_CBACK_EVT;
    ed22:	46d1      	mov	r9, sl
    ed24:	e79c      	b.n	ec60 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
    ed26:	f04f 0a1a 	mov.w	sl, #26
    ed2a:	2006      	movs	r0, #6
    cbackEvt = HCI_LE_SET_ADDR_RES_ENABLE_CMD_CMPL_CBACK_EVT;
    ed2c:	46d1      	mov	r9, sl
    ed2e:	e797      	b.n	ec60 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
    ed30:	f04f 0a19 	mov.w	sl, #25
    ed34:	200c      	movs	r0, #12
    cbackEvt = HCI_LE_READ_LOCAL_RES_ADDR_CMD_CMPL_CBACK_EVT;
    ed36:	46d1      	mov	r9, sl
    ed38:	e792      	b.n	ec60 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
    ed3a:	f04f 0a18 	mov.w	sl, #24
    ed3e:	200c      	movs	r0, #12
    cbackEvt = HCI_LE_READ_PEER_RES_ADDR_CMD_CMPL_CBACK_EVT;
    ed40:	46d1      	mov	r9, sl
    ed42:	e78d      	b.n	ec60 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
    ed44:	f04f 0a17 	mov.w	sl, #23
    ed48:	2006      	movs	r0, #6
    cbackEvt = HCI_LE_CLEAR_RES_LIST_CMD_CMPL_CBACK_EVT;
    ed4a:	46d1      	mov	r9, sl
    ed4c:	e788      	b.n	ec60 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
    ed4e:	f04f 0a16 	mov.w	sl, #22
    ed52:	2006      	movs	r0, #6
    cbackEvt = HCI_LE_REM_DEV_FROM_RES_LIST_CMD_CMPL_CBACK_EVT;
    ed54:	46d1      	mov	r9, sl
    ed56:	e783      	b.n	ec60 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
    ed58:	f04f 0a15 	mov.w	sl, #21
    ed5c:	2006      	movs	r0, #6
    cbackEvt = HCI_LE_ADD_DEV_TO_RES_LIST_CMD_CMPL_CBACK_EVT;
    ed5e:	46d1      	mov	r9, sl
    ed60:	e77e      	b.n	ec60 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
    ed62:	f04f 0a20 	mov.w	sl, #32
    ed66:	2006      	movs	r0, #6
    cbackEvt = HCI_LE_WRITE_DEF_DATA_LEN_CMD_CMPL_CBACK_EVT;
    ed68:	46d1      	mov	r9, sl
    ed6a:	e779      	b.n	ec60 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
    ed6c:	f04f 0a1f 	mov.w	sl, #31
    ed70:	200a      	movs	r0, #10
    cbackEvt = HCI_LE_READ_DEF_DATA_LEN_CMD_CMPL_CBACK_EVT;
    ed72:	46d1      	mov	r9, sl
    ed74:	e774      	b.n	ec60 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
    ed76:	f04f 0a21 	mov.w	sl, #33	; 0x21
    ed7a:	2008      	movs	r0, #8
    cbackEvt = HCI_LE_SET_DATA_LEN_CMD_CMPL_CBACK_EVT;
    ed7c:	46d1      	mov	r9, sl
    ed7e:	e76f      	b.n	ec60 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
    ed80:	f04f 0a1e 	mov.w	sl, #30
    ed84:	2008      	movs	r0, #8
    cbackEvt = HCI_LE_REM_CONN_PARAM_NEG_REP_CMD_CMPL_CBACK_EVT;
    ed86:	46d1      	mov	r9, sl
    ed88:	e76a      	b.n	ec60 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
    ed8a:	f04f 0a1d 	mov.w	sl, #29
    ed8e:	2008      	movs	r0, #8
    cbackEvt = HCI_LE_REM_CONN_PARAM_REP_CMD_CMPL_CBACK_EVT;
    ed90:	46d1      	mov	r9, sl
    ed92:	e765      	b.n	ec60 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
    ed94:	f04f 0a0d 	mov.w	sl, #13
    ed98:	2008      	movs	r0, #8
    cbackEvt = HCI_LE_LTK_REQ_NEG_REPL_CMD_CMPL_CBACK_EVT;
    ed9a:	46d1      	mov	r9, sl
    ed9c:	e760      	b.n	ec60 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
    ed9e:	f04f 0a0c 	mov.w	sl, #12
    eda2:	2008      	movs	r0, #8
    cbackEvt = HCI_LE_LTK_REQ_REPL_CMD_CMPL_CBACK_EVT;
    eda4:	46d1      	mov	r9, sl
    eda6:	e75b      	b.n	ec60 <hciEvtProcessCmdCmpl+0xf0>
    cback = hciCb.secCback;
    eda8:	f04f 0a1c 	mov.w	sl, #28
    edac:	68d7      	ldr	r7, [r2, #12]
    edae:	200e      	movs	r0, #14
    cbackEvt = HCI_LE_RAND_CMD_CMPL_CBACK_EVT;
    edb0:	46d1      	mov	r9, sl
    edb2:	e755      	b.n	ec60 <hciEvtProcessCmdCmpl+0xf0>
    cback = hciCb.secCback;
    edb4:	f04f 0a1b 	mov.w	sl, #27
    edb8:	68d7      	ldr	r7, [r2, #12]
    edba:	2016      	movs	r0, #22
    cbackEvt = HCI_LE_ENCRYPT_CMD_CMPL_CBACK_EVT;
    edbc:	46d1      	mov	r9, sl
    edbe:	e74f      	b.n	ec60 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
    edc0:	f04f 0a08 	mov.w	sl, #8
    edc4:	200e      	movs	r0, #14
    cbackEvt = HCI_LE_READ_CHAN_MAP_CMD_CMPL_CBACK_EVT;
    edc6:	46d1      	mov	r9, sl
    edc8:	e74a      	b.n	ec60 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
    edca:	f04f 0a34 	mov.w	sl, #52	; 0x34
    edce:	2004      	movs	r0, #4
    cbackEvt = HCI_LE_SCAN_ENABLE_CMD_CMPL_CBACK_EVT;
    edd0:	46d1      	mov	r9, sl
    edd2:	e745      	b.n	ec60 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
    edd4:	f04f 0a35 	mov.w	sl, #53	; 0x35
    edd8:	2004      	movs	r0, #4
    cbackEvt = HCI_LE_ADV_ENABLE_CMD_CMPL_CBACK_EVT;
    edda:	46d1      	mov	r9, sl
    eddc:	e740      	b.n	ec60 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
    edde:	f04f 0a42 	mov.w	sl, #66	; 0x42
    ede2:	2008      	movs	r0, #8
    cbackEvt = HCI_LE_CONN_CTE_RSP_ENABLE_CMD_CMPL_CBACK_EVT;
    ede4:	46d1      	mov	r9, sl
    ede6:	e73b      	b.n	ec60 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
    ede8:	f04f 0a05 	mov.w	sl, #5
    edec:	2006      	movs	r0, #6
    edee:	46d1      	mov	r9, sl
    edf0:	e736      	b.n	ec60 <hciEvtProcessCmdCmpl+0xf0>
    edf2:	bf00      	nop
    edf4:	10004a9c 	.word	0x10004a9c
    edf8:	0001f48c 	.word	0x0001f48c
    edfc:	0001f448 	.word	0x0001f448

0000ee00 <hciEvtProcessMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessMsg(uint8_t *pEvt)
{
    ee00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hciEvt_t  *pMsg;
  uint16_t  handle;
  hciEvtCback_t cback = hciCb.evtCback;

  /* parse HCI event header */
  BSTREAM_TO_UINT8(evt, pEvt);
    ee04:	4605      	mov	r5, r0
  hciEvtCback_t cback = hciCb.evtCback;
    ee06:	4e89      	ldr	r6, [pc, #548]	; (f02c <hciEvtProcessMsg+0x22c>)
  BSTREAM_TO_UINT8(evt, pEvt);
    ee08:	f815 3b02 	ldrb.w	r3, [r5], #2
  hciEvtCback_t cback = hciCb.evtCback;
    ee0c:	68b7      	ldr	r7, [r6, #8]
  BSTREAM_TO_UINT8(len, pEvt);
    ee0e:	f890 8001 	ldrb.w	r8, [r0, #1]

  /* convert hci event code to internal event code and perform special handling */
  switch (evt)
    ee12:	2b57      	cmp	r3, #87	; 0x57
    ee14:	d831      	bhi.n	ee7a <hciEvtProcessMsg+0x7a>
    ee16:	2b04      	cmp	r3, #4
    ee18:	d94d      	bls.n	eeb6 <hciEvtProcessMsg+0xb6>
    ee1a:	3b05      	subs	r3, #5
    ee1c:	4604      	mov	r4, r0
    ee1e:	2b52      	cmp	r3, #82	; 0x52
    ee20:	d849      	bhi.n	eeb6 <hciEvtProcessMsg+0xb6>
    ee22:	e8df f003 	tbb	[pc, r3]
    ee26:	4853      	.short	0x4853
    ee28:	48487048 	.word	0x48487048
    ee2c:	82487948 	.word	0x82487948
    ee30:	4848958c 	.word	0x4848958c
    ee34:	4848489e 	.word	0x4848489e
    ee38:	a6484848 	.word	0xa6484848
    ee3c:	48484848 	.word	0x48484848
    ee40:	48484848 	.word	0x48484848
    ee44:	48484848 	.word	0x48484848
    ee48:	48484848 	.word	0x48484848
    ee4c:	48484848 	.word	0x48484848
    ee50:	4848ab48 	.word	0x4848ab48
    ee54:	48484848 	.word	0x48484848
    ee58:	48484848 	.word	0x48484848
    ee5c:	b4484848 	.word	0xb4484848
    ee60:	48484848 	.word	0x48484848
    ee64:	48484848 	.word	0x48484848
    ee68:	48484848 	.word	0x48484848
    ee6c:	48484848 	.word	0x48484848
    ee70:	48484848 	.word	0x48484848
    ee74:	48484848 	.word	0x48484848
    ee78:	4a          	.byte	0x4a
    ee79:	00          	.byte	0x00
    ee7a:	2bff      	cmp	r3, #255	; 0xff
    ee7c:	d11b      	bne.n	eeb6 <hciEvtProcessMsg+0xb6>
      /* for nonstandard controllers that send a vendor-specific event instead
       * of a command complete event
       */
      hciCmdRecvCmpl(1);
#endif
      hciEvtStats.numVendorSpecEvt++;
    ee7e:	4a6c      	ldr	r2, [pc, #432]	; (f030 <hciEvtProcessMsg+0x230>)
    ee80:	4e6c      	ldr	r6, [pc, #432]	; (f034 <hciEvtProcessMsg+0x234>)
    ee82:	8a93      	ldrh	r3, [r2, #20]
    ee84:	3301      	adds	r3, #1
    ee86:	8293      	strh	r3, [r2, #20]
    ee88:	2006      	movs	r0, #6
      cbackEvt = HCI_VENDOR_SPEC_CBACK_EVT;
    ee8a:	f04f 0913 	mov.w	r9, #19

  /* if callback is executed for this event */
  if (cbackEvt != 0)
  {
    /* allocate temp buffer */
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
    ee8e:	f000 fcfb 	bl	f888 <WsfBufAlloc>
    ee92:	4604      	mov	r4, r0
    ee94:	b178      	cbz	r0, eeb6 <hciEvtProcessMsg+0xb6>
    {
      /* initialize message header */
      pMsg->hdr.param = 0;
    ee96:	2300      	movs	r3, #0
      pMsg->hdr.event = cbackEvt;
      pMsg->hdr.status = 0;

      /* execute parsing function for the event */
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, pEvt, len);
    ee98:	4642      	mov	r2, r8
      pMsg->hdr.param = 0;
    ee9a:	8023      	strh	r3, [r4, #0]
      pMsg->hdr.status = 0;
    ee9c:	70e3      	strb	r3, [r4, #3]
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, pEvt, len);
    ee9e:	4629      	mov	r1, r5
      pMsg->hdr.event = cbackEvt;
    eea0:	f884 9002 	strb.w	r9, [r4, #2]
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, pEvt, len);
    eea4:	47b0      	blx	r6

      /* execute callback */
      (*cback)(pMsg);
    eea6:	4620      	mov	r0, r4
    eea8:	47b8      	blx	r7

      /* free buffer */
      WsfBufFree(pMsg);
    eeaa:	4620      	mov	r0, r4
    eeac:	f000 fd1c 	bl	f8e8 <WsfBufFree>
    }

    /* execute core procedure for connection close after callback */
    if (cbackEvt == HCI_DISCONNECT_CMPL_CBACK_EVT)
    eeb0:	f1b9 0f03 	cmp.w	r9, #3
    eeb4:	d01e      	beq.n	eef4 <hciEvtProcessMsg+0xf4>
    {
      BYTES_TO_UINT16(handle, (pEvt + 1));
      hciCoreConnClose(handle);
    }
  }
}
    eeb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hciEvtStats.numAuthToEvt++;
    eeba:	4a5d      	ldr	r2, [pc, #372]	; (f030 <hciEvtProcessMsg+0x230>)
    eebc:	4e5e      	ldr	r6, [pc, #376]	; (f038 <hciEvtProcessMsg+0x238>)
    eebe:	8ad3      	ldrh	r3, [r2, #22]
    eec0:	3301      	adds	r3, #1
    eec2:	82d3      	strh	r3, [r2, #22]
    eec4:	2006      	movs	r0, #6
      cbackEvt = HCI_AUTH_PAYLOAD_TO_EXPIRED_CBACK_EVT;
    eec6:	f04f 0928 	mov.w	r9, #40	; 0x28
    eeca:	e7e0      	b.n	ee8e <hciEvtProcessMsg+0x8e>
      hciEvtStats.numDiscCmplEvt++;
    eecc:	4a58      	ldr	r2, [pc, #352]	; (f030 <hciEvtProcessMsg+0x230>)
    eece:	8813      	ldrh	r3, [r2, #0]
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
    eed0:	200a      	movs	r0, #10
      hciEvtStats.numDiscCmplEvt++;
    eed2:	3301      	adds	r3, #1
    eed4:	8013      	strh	r3, [r2, #0]
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
    eed6:	f000 fcd7 	bl	f888 <WsfBufAlloc>
    eeda:	4604      	mov	r4, r0
    eedc:	b150      	cbz	r0, eef4 <hciEvtProcessMsg+0xf4>
      pMsg->hdr.param = 0;
    eede:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    eee2:	6003      	str	r3, [r0, #0]
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, pEvt, len);
    eee4:	4642      	mov	r2, r8
    eee6:	4629      	mov	r1, r5
    eee8:	f7ff faf0 	bl	e4cc <hciEvtParseDisconnectCmpl>
      (*cback)(pMsg);
    eeec:	47b8      	blx	r7
      WsfBufFree(pMsg);
    eeee:	4620      	mov	r0, r4
    eef0:	f000 fcfa 	bl	f8e8 <WsfBufFree>
      BYTES_TO_UINT16(handle, (pEvt + 1));
    eef4:	78ab      	ldrb	r3, [r5, #2]
    eef6:	7868      	ldrb	r0, [r5, #1]
    eef8:	eb00 2003 	add.w	r0, r0, r3, lsl #8
      hciCoreConnClose(handle);
    eefc:	b280      	uxth	r0, r0
}
    eefe:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      hciCoreConnClose(handle);
    ef02:	f7ff b899 	b.w	e038 <hciCoreConnClose>
      hciEvtStats.numEncChangeEvt++;
    ef06:	4a4a      	ldr	r2, [pc, #296]	; (f030 <hciEvtProcessMsg+0x230>)
    ef08:	4e4c      	ldr	r6, [pc, #304]	; (f03c <hciEvtProcessMsg+0x23c>)
    ef0a:	8853      	ldrh	r3, [r2, #2]
    ef0c:	3301      	adds	r3, #1
    ef0e:	8053      	strh	r3, [r2, #2]
    ef10:	200a      	movs	r0, #10
      cbackEvt = HCI_ENC_CHANGE_CBACK_EVT;
    ef12:	f04f 090f 	mov.w	r9, #15
    ef16:	e7ba      	b.n	ee8e <hciEvtProcessMsg+0x8e>
      hciEvtStats.numReadRemoteVerInfoCmpEvt++;
    ef18:	4a45      	ldr	r2, [pc, #276]	; (f030 <hciEvtProcessMsg+0x230>)
    ef1a:	4e49      	ldr	r6, [pc, #292]	; (f040 <hciEvtProcessMsg+0x240>)
    ef1c:	8893      	ldrh	r3, [r2, #4]
    ef1e:	3301      	adds	r3, #1
    ef20:	8093      	strh	r3, [r2, #4]
    ef22:	200e      	movs	r0, #14
      cbackEvt = HCI_READ_REMOTE_VER_INFO_CMPL_CBACK_EVT;
    ef24:	f04f 090a 	mov.w	r9, #10
    ef28:	e7b1      	b.n	ee8e <hciEvtProcessMsg+0x8e>
      hciEvtStats.numCmdCmplEvt++;
    ef2a:	4a41      	ldr	r2, [pc, #260]	; (f030 <hciEvtProcessMsg+0x230>)
    ef2c:	88d3      	ldrh	r3, [r2, #6]
    ef2e:	3301      	adds	r3, #1
      hciEvtProcessCmdCmpl(pEvt, len);
    ef30:	4641      	mov	r1, r8
    ef32:	4628      	mov	r0, r5
      hciEvtStats.numCmdCmplEvt++;
    ef34:	80d3      	strh	r3, [r2, #6]
}
    ef36:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      hciEvtProcessCmdCmpl(pEvt, len);
    ef3a:	f7ff be19 	b.w	eb70 <hciEvtProcessCmdCmpl>
      hciEvtStats.numCmdStatusEvt++;
    ef3e:	4a3c      	ldr	r2, [pc, #240]	; (f030 <hciEvtProcessMsg+0x230>)
    ef40:	8913      	ldrh	r3, [r2, #8]
    ef42:	3301      	adds	r3, #1
    ef44:	8113      	strh	r3, [r2, #8]
  hciCmdRecvCmpl(numPkts);
    ef46:	78c0      	ldrb	r0, [r0, #3]
}
    ef48:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hciCmdRecvCmpl(numPkts);
    ef4c:	f7fd be60 	b.w	cc10 <hciCmdRecvCmpl>
      hciEvtStats.numHwErrorEvt++;
    ef50:	4a37      	ldr	r2, [pc, #220]	; (f030 <hciEvtProcessMsg+0x230>)
    ef52:	4e3c      	ldr	r6, [pc, #240]	; (f044 <hciEvtProcessMsg+0x244>)
    ef54:	8953      	ldrh	r3, [r2, #10]
    ef56:	3301      	adds	r3, #1
    ef58:	8153      	strh	r3, [r2, #10]
    ef5a:	2006      	movs	r0, #6
      cbackEvt = HCI_HW_ERROR_CBACK_EVT;
    ef5c:	f04f 0914 	mov.w	r9, #20
    ef60:	e795      	b.n	ee8e <hciEvtProcessMsg+0x8e>
      hciCoreNumCmplPkts(pEvt);
    ef62:	4628      	mov	r0, r5
    ef64:	f7ff fa08 	bl	e378 <hciCoreNumCmplPkts>
      hciEvtStats.numCmplPktsEvt++;
    ef68:	4a31      	ldr	r2, [pc, #196]	; (f030 <hciEvtProcessMsg+0x230>)
    ef6a:	8993      	ldrh	r3, [r2, #12]
    ef6c:	3301      	adds	r3, #1
    ef6e:	8193      	strh	r3, [r2, #12]
  if (cbackEvt != 0)
    ef70:	e7a1      	b.n	eeb6 <hciEvtProcessMsg+0xb6>
      hciEvtStats.numDataBufOverflowEvt++;
    ef72:	4a2f      	ldr	r2, [pc, #188]	; (f030 <hciEvtProcessMsg+0x230>)
    ef74:	89d3      	ldrh	r3, [r2, #14]
    ef76:	3301      	adds	r3, #1
    ef78:	81d3      	strh	r3, [r2, #14]
  if (cbackEvt != 0)
    ef7a:	e79c      	b.n	eeb6 <hciEvtProcessMsg+0xb6>
      hciEvtStats.numEncKeyRefreshCmplEvt++;
    ef7c:	4a2c      	ldr	r2, [pc, #176]	; (f030 <hciEvtProcessMsg+0x230>)
    ef7e:	4e32      	ldr	r6, [pc, #200]	; (f048 <hciEvtProcessMsg+0x248>)
    ef80:	8a13      	ldrh	r3, [r2, #16]
    ef82:	3301      	adds	r3, #1
    ef84:	8213      	strh	r3, [r2, #16]
    ef86:	2008      	movs	r0, #8
      cbackEvt = HCI_ENC_KEY_REFRESH_CMPL_CBACK_EVT;
    ef88:	f04f 090e 	mov.w	r9, #14
    ef8c:	e77f      	b.n	ee8e <hciEvtProcessMsg+0x8e>
      hciEvtStats.numLeMetaEvt++;
    ef8e:	4a28      	ldr	r2, [pc, #160]	; (f030 <hciEvtProcessMsg+0x230>)
      BSTREAM_TO_UINT8(subEvt, pEvt);
    ef90:	f890 9002 	ldrb.w	r9, [r0, #2]
      hciEvtStats.numLeMetaEvt++;
    ef94:	8a53      	ldrh	r3, [r2, #18]
      BSTREAM_TO_UINT8(subEvt, pEvt);
    ef96:	1cc5      	adds	r5, r0, #3
      hciEvtStats.numLeMetaEvt++;
    ef98:	3301      	adds	r3, #1
      APP_TRACE_INFO1("LE meta sub event = 0x%x", subEvt);
    ef9a:	482c      	ldr	r0, [pc, #176]	; (f04c <hciEvtProcessMsg+0x24c>)
      hciEvtStats.numLeMetaEvt++;
    ef9c:	8253      	strh	r3, [r2, #18]
      APP_TRACE_INFO1("LE meta sub event = 0x%x", subEvt);
    ef9e:	4649      	mov	r1, r9
    efa0:	f001 f852 	bl	10048 <WsfTrace>
      switch (subEvt)
    efa4:	f109 33ff 	add.w	r3, r9, #4294967295
    efa8:	2b16      	cmp	r3, #22
    efaa:	d884      	bhi.n	eeb6 <hciEvtProcessMsg+0xb6>
    efac:	a201      	add	r2, pc, #4	; (adr r2, efb4 <hciEvtProcessMsg+0x1b4>)
    efae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    efb2:	bf00      	nop
    efb4:	0000f0f5 	.word	0x0000f0f5
    efb8:	0000f05d 	.word	0x0000f05d
    efbc:	0000f52d 	.word	0x0000f52d
    efc0:	0000f023 	.word	0x0000f023
    efc4:	0000f01b 	.word	0x0000f01b
    efc8:	0000f011 	.word	0x0000f011
    efcc:	0000f4b1 	.word	0x0000f4b1
    efd0:	0000f4a5 	.word	0x0000f4a5
    efd4:	0000f49b 	.word	0x0000f49b
    efd8:	0000f48b 	.word	0x0000f48b
    efdc:	0000f4bb 	.word	0x0000f4bb
    efe0:	0000f2c9 	.word	0x0000f2c9
    efe4:	0000f117 	.word	0x0000f117
    efe8:	0000f10d 	.word	0x0000f10d
    efec:	0000f2f1 	.word	0x0000f2f1
    eff0:	0000f2e7 	.word	0x0000f2e7
    eff4:	0000f2dd 	.word	0x0000f2dd
    eff8:	0000f2d3 	.word	0x0000f2d3
    effc:	0000f3cf 	.word	0x0000f3cf
    f000:	0000eeb7 	.word	0x0000eeb7
    f004:	0000f34b 	.word	0x0000f34b
    f008:	0000f3fd 	.word	0x0000f3fd
    f00c:	0000f103 	.word	0x0000f103
    f010:	4e0f      	ldr	r6, [pc, #60]	; (f050 <hciEvtProcessMsg+0x250>)
    f012:	200e      	movs	r0, #14
          cbackEvt = HCI_LE_REM_CONN_PARAM_REQ_CBACK_EVT;
    f014:	f04f 0923 	mov.w	r9, #35	; 0x23
    f018:	e739      	b.n	ee8e <hciEvtProcessMsg+0x8e>
    f01a:	2010      	movs	r0, #16
    f01c:	4e0d      	ldr	r6, [pc, #52]	; (f054 <hciEvtProcessMsg+0x254>)
    f01e:	4681      	mov	r9, r0
    f020:	e735      	b.n	ee8e <hciEvtProcessMsg+0x8e>
    f022:	4e0d      	ldr	r6, [pc, #52]	; (f058 <hciEvtProcessMsg+0x258>)
    f024:	2010      	movs	r0, #16
          cbackEvt = HCI_LE_READ_REMOTE_FEAT_CMPL_CBACK_EVT;
    f026:	f04f 090b 	mov.w	r9, #11
    f02a:	e730      	b.n	ee8e <hciEvtProcessMsg+0x8e>
    f02c:	10004a9c 	.word	0x10004a9c
    f030:	10004810 	.word	0x10004810
    f034:	0000ea6d 	.word	0x0000ea6d
    f038:	0000e7c1 	.word	0x0000e7c1
    f03c:	0000e5f5 	.word	0x0000e5f5
    f040:	0000e571 	.word	0x0000e571
    f044:	0000e61d 	.word	0x0000e61d
    f048:	0000e5dd 	.word	0x0000e5dd
    f04c:	0001f3c4 	.word	0x0001f3c4
    f050:	0000e729 	.word	0x0000e729
    f054:	0000ea91 	.word	0x0000ea91
    f058:	0000eac1 	.word	0x0000eac1
  BSTREAM_TO_UINT8(i, p);
    f05c:	f894 8003 	ldrb.w	r8, [r4, #3]
  if (i > HCI_MAX_REPORTS)
    f060:	f1b8 0f0f 	cmp.w	r8, #15
    f064:	f63f af27 	bhi.w	eeb6 <hciEvtProcessMsg+0xb6>
  if ((pMsg = WsfBufAlloc(sizeof(hciLeAdvReportEvt_t) + HCI_ADV_DATA_LEN)) != NULL)
    f068:	203b      	movs	r0, #59	; 0x3b
    f06a:	f000 fc0d 	bl	f888 <WsfBufAlloc>
    f06e:	4605      	mov	r5, r0
    f070:	2800      	cmp	r0, #0
    f072:	f43f af20 	beq.w	eeb6 <hciEvtProcessMsg+0xb6>
    while (i-- > 0)
    f076:	f108 37ff 	add.w	r7, r8, #4294967295
    f07a:	b2ff      	uxtb	r7, r7
    f07c:	f1b8 0f00 	cmp.w	r8, #0
    f080:	f000 815e 	beq.w	f340 <hciEvtProcessMsg+0x540>
  BSTREAM_TO_UINT8(i, p);
    f084:	3404      	adds	r4, #4
      BSTREAM_TO_BDA(pMsg->addr, p);
    f086:	f100 0a0c 	add.w	sl, r0, #12
      pMsg->pData = (uint8_t *) (pMsg + 1);
    f08a:	f100 091c 	add.w	r9, r0, #28
      pMsg->directAddrType = 0;
    f08e:	f04f 0800 	mov.w	r8, #0
    f092:	e01c      	b.n	f0ce <hciEvtProcessMsg+0x2ce>
      memcpy(pMsg->pData, p, pMsg->len);
    f094:	4621      	mov	r1, r4
    f096:	465a      	mov	r2, fp
      pMsg->pData = (uint8_t *) (pMsg + 1);
    f098:	f8c5 9004 	str.w	r9, [r5, #4]
      memcpy(pMsg->pData, p, pMsg->len);
    f09c:	f7fd f830 	bl	c100 <memcpy>
      BSTREAM_TO_UINT8(pMsg->rssi, p);
    f0a0:	f814 100b 	ldrb.w	r1, [r4, fp]
    f0a4:	7269      	strb	r1, [r5, #9]
      pMsg->hdr.param = 0;
    f0a6:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
    f0aa:	602b      	str	r3, [r5, #0]
    while (i-- > 0)
    f0ac:	3f01      	subs	r7, #1
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
    f0ae:	68b3      	ldr	r3, [r6, #8]
      pMsg->directAddrType = 0;
    f0b0:	f885 8012 	strb.w	r8, [r5, #18]
      memset(pMsg->directAddr, 0, BDA_ADDR_LEN);
    f0b4:	f8c5 8013 	str.w	r8, [r5, #19]
    f0b8:	f8a5 8017 	strh.w	r8, [r5, #23]
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
    f0bc:	4628      	mov	r0, r5
    while (i-- > 0)
    f0be:	b2ff      	uxtb	r7, r7
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
    f0c0:	4798      	blx	r3
      p += pMsg->len;
    f0c2:	445c      	add	r4, fp
    while (i-- > 0)
    f0c4:	2fff      	cmp	r7, #255	; 0xff
      BSTREAM_TO_UINT8(pMsg->rssi, p);
    f0c6:	f104 0401 	add.w	r4, r4, #1
    while (i-- > 0)
    f0ca:	f000 8139 	beq.w	f340 <hciEvtProcessMsg+0x540>
      BSTREAM_TO_UINT8(pMsg->eventType, p);
    f0ce:	7823      	ldrb	r3, [r4, #0]
    f0d0:	72ab      	strb	r3, [r5, #10]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
    f0d2:	7863      	ldrb	r3, [r4, #1]
    f0d4:	72eb      	strb	r3, [r5, #11]
      BSTREAM_TO_BDA(pMsg->addr, p);
    f0d6:	1ca1      	adds	r1, r4, #2
    f0d8:	4650      	mov	r0, sl
    f0da:	f004 f95f 	bl	1339c <BdaCpy>
      BSTREAM_TO_UINT8(pMsg->len, p);
    f0de:	f894 b008 	ldrb.w	fp, [r4, #8]
    f0e2:	f885 b008 	strb.w	fp, [r5, #8]
      if (pMsg->len > HCI_ADV_DATA_LEN)
    f0e6:	f1bb 0f1f 	cmp.w	fp, #31
      memcpy(pMsg->pData, p, pMsg->len);
    f0ea:	4648      	mov	r0, r9
      BSTREAM_TO_UINT8(pMsg->len, p);
    f0ec:	f104 0409 	add.w	r4, r4, #9
      if (pMsg->len > HCI_ADV_DATA_LEN)
    f0f0:	d9d0      	bls.n	f094 <hciEvtProcessMsg+0x294>
    f0f2:	e125      	b.n	f340 <hciEvtProcessMsg+0x540>
          if (*pEvt == HCI_SUCCESS)
    f0f4:	78e3      	ldrb	r3, [r4, #3]
    f0f6:	2b00      	cmp	r3, #0
    f0f8:	f000 8238 	beq.w	f56c <hciEvtProcessMsg+0x76c>
    f0fc:	4eb6      	ldr	r6, [pc, #728]	; (f3d8 <hciEvtProcessMsg+0x5d8>)
    f0fe:	2024      	movs	r0, #36	; 0x24
    f100:	e6c5      	b.n	ee8e <hciEvtProcessMsg+0x8e>
}
    f102:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        APP_TRACE_INFO0("cte req failed....");
    f106:	48b5      	ldr	r0, [pc, #724]	; (f3dc <hciEvtProcessMsg+0x5dc>)
    f108:	f000 bf9e 	b.w	10048 <WsfTrace>
  if (cbackEvt != 0)
    f10c:	4eb4      	ldr	r6, [pc, #720]	; (f3e0 <hciEvtProcessMsg+0x5e0>)
    f10e:	2016      	movs	r0, #22
          cbackEvt = HCI_LE_PER_ADV_SYNC_EST_CBACK_EVT;
    f110:	f04f 0930 	mov.w	r9, #48	; 0x30
    f114:	e6bb      	b.n	ee8e <hciEvtProcessMsg+0x8e>
  i = *p;
    f116:	78e2      	ldrb	r2, [r4, #3]
  if (i > HCI_MAX_REPORTS)
    f118:	2a0f      	cmp	r2, #15
    f11a:	f63f aecc 	bhi.w	eeb6 <hciEvtProcessMsg+0xb6>
  ptr = p + 1;
    f11e:	1d25      	adds	r5, r4, #4
  while (i-- > 0)
    f120:	2a00      	cmp	r2, #0
    f122:	f000 822d 	beq.w	f580 <hciEvtProcessMsg+0x780>
    BSTREAM_TO_UINT8(dataLen, ptr);
    f126:	7ee0      	ldrb	r0, [r4, #27]
    f128:	f104 031c 	add.w	r3, r4, #28
  while (i-- > 0)
    f12c:	2a01      	cmp	r2, #1
    ptr += dataLen;
    f12e:	4403      	add	r3, r0
  while (i-- > 0)
    f130:	d078      	beq.n	f224 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
    f132:	7dd9      	ldrb	r1, [r3, #23]
    f134:	4288      	cmp	r0, r1
    f136:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
    f13a:	bf38      	it	cc
    f13c:	4608      	movcc	r0, r1
  while (i-- > 0)
    f13e:	2a02      	cmp	r2, #2
    ptr += dataLen;
    f140:	440b      	add	r3, r1
  while (i-- > 0)
    f142:	d06f      	beq.n	f224 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
    f144:	7dd9      	ldrb	r1, [r3, #23]
    f146:	4288      	cmp	r0, r1
    f148:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
    f14c:	bf38      	it	cc
    f14e:	4608      	movcc	r0, r1
  while (i-- > 0)
    f150:	2a03      	cmp	r2, #3
    ptr += dataLen;
    f152:	440b      	add	r3, r1
  while (i-- > 0)
    f154:	d066      	beq.n	f224 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
    f156:	7dd9      	ldrb	r1, [r3, #23]
    f158:	4288      	cmp	r0, r1
    f15a:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
    f15e:	bf38      	it	cc
    f160:	4608      	movcc	r0, r1
  while (i-- > 0)
    f162:	2a04      	cmp	r2, #4
    ptr += dataLen;
    f164:	440b      	add	r3, r1
  while (i-- > 0)
    f166:	d05d      	beq.n	f224 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
    f168:	7dd9      	ldrb	r1, [r3, #23]
    f16a:	4288      	cmp	r0, r1
    f16c:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
    f170:	bf38      	it	cc
    f172:	4608      	movcc	r0, r1
  while (i-- > 0)
    f174:	2a05      	cmp	r2, #5
    ptr += dataLen;
    f176:	440b      	add	r3, r1
  while (i-- > 0)
    f178:	d054      	beq.n	f224 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
    f17a:	7dd9      	ldrb	r1, [r3, #23]
    f17c:	4288      	cmp	r0, r1
    f17e:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
    f182:	bf38      	it	cc
    f184:	4608      	movcc	r0, r1
  while (i-- > 0)
    f186:	2a06      	cmp	r2, #6
    ptr += dataLen;
    f188:	440b      	add	r3, r1
  while (i-- > 0)
    f18a:	d04b      	beq.n	f224 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
    f18c:	7dd9      	ldrb	r1, [r3, #23]
    f18e:	4288      	cmp	r0, r1
    f190:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
    f194:	bf38      	it	cc
    f196:	4608      	movcc	r0, r1
  while (i-- > 0)
    f198:	2a07      	cmp	r2, #7
    ptr += dataLen;
    f19a:	440b      	add	r3, r1
  while (i-- > 0)
    f19c:	d042      	beq.n	f224 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
    f19e:	7dd9      	ldrb	r1, [r3, #23]
    f1a0:	4288      	cmp	r0, r1
    f1a2:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
    f1a6:	bf38      	it	cc
    f1a8:	4608      	movcc	r0, r1
  while (i-- > 0)
    f1aa:	2a08      	cmp	r2, #8
    ptr += dataLen;
    f1ac:	440b      	add	r3, r1
  while (i-- > 0)
    f1ae:	d039      	beq.n	f224 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
    f1b0:	7dd9      	ldrb	r1, [r3, #23]
    f1b2:	4288      	cmp	r0, r1
    f1b4:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
    f1b8:	bf38      	it	cc
    f1ba:	4608      	movcc	r0, r1
  while (i-- > 0)
    f1bc:	2a09      	cmp	r2, #9
    ptr += dataLen;
    f1be:	440b      	add	r3, r1
  while (i-- > 0)
    f1c0:	d030      	beq.n	f224 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
    f1c2:	7dd9      	ldrb	r1, [r3, #23]
    f1c4:	4288      	cmp	r0, r1
    f1c6:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
    f1ca:	bf38      	it	cc
    f1cc:	4608      	movcc	r0, r1
  while (i-- > 0)
    f1ce:	2a0a      	cmp	r2, #10
    ptr += dataLen;
    f1d0:	440b      	add	r3, r1
  while (i-- > 0)
    f1d2:	d027      	beq.n	f224 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
    f1d4:	7dd9      	ldrb	r1, [r3, #23]
    f1d6:	4288      	cmp	r0, r1
    f1d8:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
    f1dc:	bf38      	it	cc
    f1de:	4608      	movcc	r0, r1
  while (i-- > 0)
    f1e0:	2a0b      	cmp	r2, #11
    ptr += dataLen;
    f1e2:	440b      	add	r3, r1
  while (i-- > 0)
    f1e4:	d01e      	beq.n	f224 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
    f1e6:	7dd9      	ldrb	r1, [r3, #23]
    f1e8:	4288      	cmp	r0, r1
    f1ea:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
    f1ee:	bf38      	it	cc
    f1f0:	4608      	movcc	r0, r1
  while (i-- > 0)
    f1f2:	2a0c      	cmp	r2, #12
    ptr += dataLen;
    f1f4:	440b      	add	r3, r1
  while (i-- > 0)
    f1f6:	d015      	beq.n	f224 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
    f1f8:	7dd9      	ldrb	r1, [r3, #23]
    f1fa:	4288      	cmp	r0, r1
    f1fc:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
    f200:	bf38      	it	cc
    f202:	4608      	movcc	r0, r1
  while (i-- > 0)
    f204:	2a0d      	cmp	r2, #13
    ptr += dataLen;
    f206:	440b      	add	r3, r1
  while (i-- > 0)
    f208:	d00c      	beq.n	f224 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
    f20a:	7dd9      	ldrb	r1, [r3, #23]
    f20c:	4288      	cmp	r0, r1
    f20e:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
    f212:	bf38      	it	cc
    f214:	4608      	movcc	r0, r1
  while (i-- > 0)
    f216:	2a0e      	cmp	r2, #14
    ptr += dataLen;
    f218:	440b      	add	r3, r1
  while (i-- > 0)
    f21a:	d003      	beq.n	f224 <hciEvtProcessMsg+0x424>
    if (dataLen > maxLen)
    f21c:	7ddb      	ldrb	r3, [r3, #23]
    f21e:	4298      	cmp	r0, r3
    f220:	bf38      	it	cc
    f222:	4618      	movcc	r0, r3
  if ((pMsg = WsfBufAlloc(sizeof(hciLeExtAdvReportEvt_t) + maxLen)) != NULL)
    f224:	3024      	adds	r0, #36	; 0x24
    f226:	f000 fb2f 	bl	f888 <WsfBufAlloc>
    f22a:	4607      	mov	r7, r0
    f22c:	2800      	cmp	r0, #0
    f22e:	f43f ae42 	beq.w	eeb6 <hciEvtProcessMsg+0xb6>
    BSTREAM_TO_UINT8(i, p);
    f232:	78e3      	ldrb	r3, [r4, #3]
    while (i-- > 0)
    f234:	1e5c      	subs	r4, r3, #1
    f236:	b2e4      	uxtb	r4, r4
    f238:	2b00      	cmp	r3, #0
    f23a:	d040      	beq.n	f2be <hciEvtProcessMsg+0x4be>
      BSTREAM_TO_BDA(pMsg->addr, p);
    f23c:	f100 0a07 	add.w	sl, r0, #7
      BSTREAM_TO_BDA(pMsg->directAddr, p);
    f240:	f100 0915 	add.w	r9, r0, #21
      pMsg->pData = (uint8_t *)(pMsg + 1);
    f244:	f100 0824 	add.w	r8, r0, #36	; 0x24
      pMsg->hdr.param = 0;
    f248:	f44f 1b30 	mov.w	fp, #2883584	; 0x2c0000
    f24c:	e00c      	b.n	f268 <hciEvtProcessMsg+0x468>
      pMsg->pData = (uint8_t *)(pMsg + 1);
    f24e:	f8c7 8020 	str.w	r8, [r7, #32]
      memcpy(pMsg->pData, p, pMsg->len);
    f252:	f7fc ff55 	bl	c100 <memcpy>
    while (i-- > 0)
    f256:	3c01      	subs	r4, #1
      pMsg->hdr.param = 0;
    f258:	f8c7 b000 	str.w	fp, [r7]
      (*hciCb.evtCback)((hciEvt_t *)pMsg);
    f25c:	68b3      	ldr	r3, [r6, #8]
    f25e:	4638      	mov	r0, r7
    while (i-- > 0)
    f260:	b2e4      	uxtb	r4, r4
      (*hciCb.evtCback)((hciEvt_t *)pMsg);
    f262:	4798      	blx	r3
    while (i-- > 0)
    f264:	2cff      	cmp	r4, #255	; 0xff
    f266:	d02a      	beq.n	f2be <hciEvtProcessMsg+0x4be>
      BSTREAM_TO_UINT16(pMsg->eventType, p);
    f268:	786a      	ldrb	r2, [r5, #1]
    f26a:	782b      	ldrb	r3, [r5, #0]
    f26c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    f270:	80bb      	strh	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
    f272:	78ab      	ldrb	r3, [r5, #2]
    f274:	71bb      	strb	r3, [r7, #6]
      BSTREAM_TO_BDA(pMsg->addr, p);
    f276:	1ce9      	adds	r1, r5, #3
    f278:	4650      	mov	r0, sl
    f27a:	f004 f88f 	bl	1339c <BdaCpy>
      BSTREAM_TO_UINT8(pMsg->priPhy, p);
    f27e:	7a6b      	ldrb	r3, [r5, #9]
    f280:	737b      	strb	r3, [r7, #13]
      BSTREAM_TO_UINT8(pMsg->secPhy, p);
    f282:	7aab      	ldrb	r3, [r5, #10]
    f284:	73bb      	strb	r3, [r7, #14]
      BSTREAM_TO_UINT8(pMsg->advSid, p);
    f286:	7aeb      	ldrb	r3, [r5, #11]
    f288:	73fb      	strb	r3, [r7, #15]
      BSTREAM_TO_INT8(pMsg->txPower, p);
    f28a:	7b2b      	ldrb	r3, [r5, #12]
    f28c:	743b      	strb	r3, [r7, #16]
      BSTREAM_TO_INT8(pMsg->rssi, p);
    f28e:	7b6b      	ldrb	r3, [r5, #13]
    f290:	747b      	strb	r3, [r7, #17]
      BSTREAM_TO_UINT16(pMsg->perAdvInter, p);
    f292:	7bea      	ldrb	r2, [r5, #15]
    f294:	7bab      	ldrb	r3, [r5, #14]
    f296:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    f29a:	827b      	strh	r3, [r7, #18]
      BSTREAM_TO_UINT8(pMsg->directAddrType, p);
    f29c:	7c2b      	ldrb	r3, [r5, #16]
    f29e:	753b      	strb	r3, [r7, #20]
      BSTREAM_TO_BDA(pMsg->directAddr, p);
    f2a0:	f105 0111 	add.w	r1, r5, #17
    f2a4:	4648      	mov	r0, r9
    f2a6:	f004 f879 	bl	1339c <BdaCpy>
      BSTREAM_TO_UINT8(pMsg->len, p);
    f2aa:	7dea      	ldrb	r2, [r5, #23]
    f2ac:	b293      	uxth	r3, r2
    f2ae:	f105 0118 	add.w	r1, r5, #24
      if (pMsg->len > HCI_EXT_ADV_RPT_DATA_LEN)
    f2b2:	2be5      	cmp	r3, #229	; 0xe5
      memcpy(pMsg->pData, p, pMsg->len);
    f2b4:	4640      	mov	r0, r8
      p += pMsg->len;
    f2b6:	eb01 0502 	add.w	r5, r1, r2
      BSTREAM_TO_UINT8(pMsg->len, p);
    f2ba:	83bb      	strh	r3, [r7, #28]
      if (pMsg->len > HCI_EXT_ADV_RPT_DATA_LEN)
    f2bc:	d9c7      	bls.n	f24e <hciEvtProcessMsg+0x44e>
    WsfBufFree(pMsg);
    f2be:	4638      	mov	r0, r7
}
    f2c0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    WsfBufFree(pMsg);
    f2c4:	f000 bb10 	b.w	f8e8 <WsfBufFree>
  if (cbackEvt != 0)
    f2c8:	4e46      	ldr	r6, [pc, #280]	; (f3e4 <hciEvtProcessMsg+0x5e4>)
    f2ca:	200a      	movs	r0, #10
          cbackEvt = HCI_LE_PHY_UPDATE_CMPL_CBACK_EVT;
    f2cc:	f04f 092b 	mov.w	r9, #43	; 0x2b
    f2d0:	e5dd      	b.n	ee8e <hciEvtProcessMsg+0x8e>
  if (cbackEvt != 0)
    f2d2:	4e45      	ldr	r6, [pc, #276]	; (f3e8 <hciEvtProcessMsg+0x5e8>)
    f2d4:	200a      	movs	r0, #10
          cbackEvt = HCI_LE_ADV_SET_TERM_CBACK_EVT;
    f2d6:	f04f 092e 	mov.w	r9, #46	; 0x2e
    f2da:	e5d8      	b.n	ee8e <hciEvtProcessMsg+0x8e>
  if (cbackEvt != 0)
    f2dc:	4e43      	ldr	r6, [pc, #268]	; (f3ec <hciEvtProcessMsg+0x5ec>)
    f2de:	2004      	movs	r0, #4
          cbackEvt = HCI_LE_SCAN_TIMEOUT_CBACK_EVT;
    f2e0:	f04f 092d 	mov.w	r9, #45	; 0x2d
    f2e4:	e5d3      	b.n	ee8e <hciEvtProcessMsg+0x8e>
  if (cbackEvt != 0)
    f2e6:	4e42      	ldr	r6, [pc, #264]	; (f3f0 <hciEvtProcessMsg+0x5f0>)
    f2e8:	2006      	movs	r0, #6
          cbackEvt = HCI_LE_PER_ADV_SYNC_LOST_CBACK_EVT;
    f2ea:	f04f 0932 	mov.w	r9, #50	; 0x32
    f2ee:	e5ce      	b.n	ee8e <hciEvtProcessMsg+0x8e>
  dataLen = p[HCI_PER_ADV_RPT_DATA_LEN_OFFSET];
    f2f0:	7a60      	ldrb	r0, [r4, #9]
  if (dataLen > HCI_PER_ADV_RPT_DATA_LEN)
    f2f2:	28f7      	cmp	r0, #247	; 0xf7
    f2f4:	f63f addf 	bhi.w	eeb6 <hciEvtProcessMsg+0xb6>
  if ((pMsg = WsfBufAlloc(sizeof(hciLePerAdvReportEvt_t) + dataLen)) != NULL)
    f2f8:	3010      	adds	r0, #16
    f2fa:	f000 fac5 	bl	f888 <WsfBufAlloc>
    f2fe:	4605      	mov	r5, r0
    f300:	2800      	cmp	r0, #0
    f302:	f43f add8 	beq.w	eeb6 <hciEvtProcessMsg+0xb6>
    BSTREAM_TO_UINT16(pMsg->syncHandle, p);
    f306:	7922      	ldrb	r2, [r4, #4]
    f308:	78e3      	ldrb	r3, [r4, #3]
    f30a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    f30e:	8083      	strh	r3, [r0, #4]
    BSTREAM_TO_UINT8(pMsg->txPower, p);
    f310:	7963      	ldrb	r3, [r4, #5]
    f312:	7183      	strb	r3, [r0, #6]
    BSTREAM_TO_UINT8(pMsg->rssi, p);
    f314:	79a3      	ldrb	r3, [r4, #6]
    f316:	71c3      	strb	r3, [r0, #7]
    BSTREAM_TO_UINT8(pMsg->unused, p);
    f318:	79e3      	ldrb	r3, [r4, #7]
    f31a:	7203      	strb	r3, [r0, #8]
    BSTREAM_TO_UINT8(pMsg->status, p);
    f31c:	7a27      	ldrb	r7, [r4, #8]
    f31e:	7247      	strb	r7, [r0, #9]
    BSTREAM_TO_UINT8(pMsg->len, p);
    f320:	7a62      	ldrb	r2, [r4, #9]
    f322:	8142      	strh	r2, [r0, #10]
    pMsg->pData = (uint8_t *)(pMsg + 1);
    f324:	3010      	adds	r0, #16
    memcpy(pMsg->pData, p, pMsg->len);
    f326:	f104 010a 	add.w	r1, r4, #10
    pMsg->pData = (uint8_t *)(pMsg + 1);
    f32a:	60e8      	str	r0, [r5, #12]
    memcpy(pMsg->pData, p, pMsg->len);
    f32c:	f7fc fee8 	bl	c100 <memcpy>
    pMsg->hdr.event = HCI_LE_PER_ADV_REPORT_CBACK_EVT;
    f330:	2331      	movs	r3, #49	; 0x31
    f332:	70ab      	strb	r3, [r5, #2]
    pMsg->hdr.status = pMsg->status;
    f334:	70ef      	strb	r7, [r5, #3]
    pMsg->hdr.param = 0;
    f336:	2200      	movs	r2, #0
    (*hciCb.evtCback)((hciEvt_t *)pMsg);
    f338:	68b3      	ldr	r3, [r6, #8]
    pMsg->hdr.param = 0;
    f33a:	802a      	strh	r2, [r5, #0]
    (*hciCb.evtCback)((hciEvt_t *)pMsg);
    f33c:	4628      	mov	r0, r5
    f33e:	4798      	blx	r3
    WsfBufFree(pMsg);
    f340:	4628      	mov	r0, r5
}
    f342:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    WsfBufFree(pMsg);
    f346:	f000 bacf 	b.w	f8e8 <WsfBufFree>
    if ((pMsg = WsfBufAlloc(sizeof(hciLeConlessIQReportEvt_t) + HCI_IQ_RPT_SAMPLE_CNT_MAX*2)) != NULL)
    f34a:	20c0      	movs	r0, #192	; 0xc0
    f34c:	f000 fa9c 	bl	f888 <WsfBufAlloc>
    f350:	4605      	mov	r5, r0
    f352:	2800      	cmp	r0, #0
    f354:	f43f adaf 	beq.w	eeb6 <hciEvtProcessMsg+0xb6>
        APP_TRACE_INFO0("rcv Le Conntless IQ Report...");
    f358:	4826      	ldr	r0, [pc, #152]	; (f3f4 <hciEvtProcessMsg+0x5f4>)
    f35a:	f000 fe75 	bl	10048 <WsfTrace>
        BSTREAM_TO_UINT16(pMsg->synHdl, p);
    f35e:	7923      	ldrb	r3, [r4, #4]
    f360:	78e7      	ldrb	r7, [r4, #3]
    f362:	eb07 2703 	add.w	r7, r7, r3, lsl #8
    f366:	b2bf      	uxth	r7, r7
    f368:	80af      	strh	r7, [r5, #4]
        BSTREAM_TO_UINT8(pMsg->chIdx, p);
    f36a:	7963      	ldrb	r3, [r4, #5]
    f36c:	71ab      	strb	r3, [r5, #6]
        BSTREAM_TO_UINT16(pMsg->rssi, p); 
    f36e:	79e2      	ldrb	r2, [r4, #7]
    f370:	79a3      	ldrb	r3, [r4, #6]
    f372:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    f376:	812b      	strh	r3, [r5, #8]
        BSTREAM_TO_UINT8(pMsg->rssiAntennaId, p);
    f378:	7a23      	ldrb	r3, [r4, #8]
    f37a:	72ab      	strb	r3, [r5, #10]
        BSTREAM_TO_UINT8(pMsg->cteType, p);
    f37c:	7a63      	ldrb	r3, [r4, #9]
    f37e:	72eb      	strb	r3, [r5, #11]
        BSTREAM_TO_UINT8(pMsg->slotDurations, p);
    f380:	7aa3      	ldrb	r3, [r4, #10]
    f382:	732b      	strb	r3, [r5, #12]
        BSTREAM_TO_UINT8(pMsg->pktStatus, p);
    f384:	f894 900b 	ldrb.w	r9, [r4, #11]
    f388:	f885 900d 	strb.w	r9, [r5, #13]
        BSTREAM_TO_UINT16(pMsg->paEvtCnt, p);
    f38c:	7b62      	ldrb	r2, [r4, #13]
    f38e:	7b23      	ldrb	r3, [r4, #12]
    f390:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    f394:	81eb      	strh	r3, [r5, #14]
        BSTREAM_TO_UINT8(pMsg->sampleCnt, p);
    f396:	f894 800e 	ldrb.w	r8, [r4, #14]
    f39a:	f885 8010 	strb.w	r8, [r5, #16]
        pMsg->pISample = (int8_t *) (pMsg + 1);
    f39e:	f105 031c 	add.w	r3, r5, #28
        BSTREAM_TO_UINT8(pMsg->sampleCnt, p);
    f3a2:	340f      	adds	r4, #15
        pMsg->pISample = (int8_t *) (pMsg + 1);
    f3a4:	616b      	str	r3, [r5, #20]
        memcpy(pMsg->pISample, p, pMsg->sampleCnt);
    f3a6:	4642      	mov	r2, r8
    f3a8:	4621      	mov	r1, r4
    f3aa:	4618      	mov	r0, r3
    f3ac:	f7fc fea8 	bl	c100 <memcpy>
        pMsg->pQSample = (int8_t *) (pMsg + 1)+HCI_IQ_RPT_SAMPLE_CNT_MAX;
    f3b0:	f105 036e 	add.w	r3, r5, #110	; 0x6e
    f3b4:	61ab      	str	r3, [r5, #24]
        memcpy(pMsg->pISample, p, pMsg->sampleCnt);
    f3b6:	eb04 0108 	add.w	r1, r4, r8
    f3ba:	4642      	mov	r2, r8
    f3bc:	f7fc fea0 	bl	c100 <memcpy>
        pMsg->hdr.event = HCI_LE_CONNLESS_IQ_REPORT_CBACK_EVT;
    f3c0:	2347      	movs	r3, #71	; 0x47
        pMsg->hdr.status = pMsg->pktStatus;
    f3c2:	f885 9003 	strb.w	r9, [r5, #3]
        pMsg->hdr.event = HCI_LE_CONNLESS_IQ_REPORT_CBACK_EVT;
    f3c6:	70ab      	strb	r3, [r5, #2]
        (*hciCb.evtCback)((hciEvt_t *) pMsg);
    f3c8:	68b3      	ldr	r3, [r6, #8]
        pMsg->hdr.param = pMsg->synHdl;
    f3ca:	802f      	strh	r7, [r5, #0]
        (*hciCb.evtCback)((hciEvt_t *) pMsg);
    f3cc:	e7b6      	b.n	f33c <hciEvtProcessMsg+0x53c>
  if (cbackEvt != 0)
    f3ce:	4e0a      	ldr	r6, [pc, #40]	; (f3f8 <hciEvtProcessMsg+0x5f8>)
    f3d0:	200c      	movs	r0, #12
          cbackEvt = HCI_LE_SCAN_REQ_RCVD_CBACK_EVT;
    f3d2:	f04f 092f 	mov.w	r9, #47	; 0x2f
    f3d6:	e55a      	b.n	ee8e <hciEvtProcessMsg+0x8e>
    f3d8:	0000eb0d 	.word	0x0000eb0d
    f3dc:	0001f414 	.word	0x0001f414
    f3e0:	0000e8c5 	.word	0x0000e8c5
    f3e4:	0000e809 	.word	0x0000e809
    f3e8:	0000e831 	.word	0x0000e831
    f3ec:	0000e82d 	.word	0x0000e82d
    f3f0:	0000e8b9 	.word	0x0000e8b9
    f3f4:	0001f428 	.word	0x0001f428
    f3f8:	0000e901 	.word	0x0000e901
    APP_TRACE_INFO0("hciEvtProcessLeConnIQReport");
    f3fc:	4861      	ldr	r0, [pc, #388]	; (f584 <hciEvtProcessMsg+0x784>)
    f3fe:	f000 fe23 	bl	10048 <WsfTrace>
    if ((pMsg = WsfBufAlloc(sizeof(hciLeConnIQReportEvt_t) + HCI_IQ_RPT_SAMPLE_CNT_MAX*2)) != NULL)
    f402:	20c0      	movs	r0, #192	; 0xc0
    f404:	f000 fa40 	bl	f888 <WsfBufAlloc>
    f408:	4605      	mov	r5, r0
    f40a:	2800      	cmp	r0, #0
    f40c:	f43f ad53 	beq.w	eeb6 <hciEvtProcessMsg+0xb6>
        APP_TRACE_INFO0("rcv Le ConnIQ Report...");
    f410:	485d      	ldr	r0, [pc, #372]	; (f588 <hciEvtProcessMsg+0x788>)
    f412:	f000 fe19 	bl	10048 <WsfTrace>
        BSTREAM_TO_UINT16(pMsg->handle, p);
    f416:	7923      	ldrb	r3, [r4, #4]
    f418:	78e7      	ldrb	r7, [r4, #3]
    f41a:	eb07 2703 	add.w	r7, r7, r3, lsl #8
    f41e:	b2bf      	uxth	r7, r7
    f420:	80af      	strh	r7, [r5, #4]
        BSTREAM_TO_UINT8(pMsg->rxPhy, p);
    f422:	7963      	ldrb	r3, [r4, #5]
    f424:	71ab      	strb	r3, [r5, #6]
        BSTREAM_TO_UINT8(pMsg->dataChIdx, p);
    f426:	79a3      	ldrb	r3, [r4, #6]
    f428:	71eb      	strb	r3, [r5, #7]
        BSTREAM_TO_UINT16(pMsg->rssi, p); 
    f42a:	7a22      	ldrb	r2, [r4, #8]
    f42c:	79e3      	ldrb	r3, [r4, #7]
    f42e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    f432:	812b      	strh	r3, [r5, #8]
        BSTREAM_TO_UINT8(pMsg->rssiAntennaId, p);
    f434:	7a63      	ldrb	r3, [r4, #9]
    f436:	72ab      	strb	r3, [r5, #10]
        BSTREAM_TO_UINT8(pMsg->cteType, p);
    f438:	7aa3      	ldrb	r3, [r4, #10]
    f43a:	72eb      	strb	r3, [r5, #11]
        BSTREAM_TO_UINT8(pMsg->slotDurations, p);
    f43c:	7ae3      	ldrb	r3, [r4, #11]
    f43e:	732b      	strb	r3, [r5, #12]
        BSTREAM_TO_UINT8(pMsg->pktStatus, p);
    f440:	f894 900c 	ldrb.w	r9, [r4, #12]
    f444:	f885 900d 	strb.w	r9, [r5, #13]
        BSTREAM_TO_UINT16(pMsg->connEvtCnt, p);
    f448:	7ba2      	ldrb	r2, [r4, #14]
    f44a:	7b63      	ldrb	r3, [r4, #13]
    f44c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    f450:	81eb      	strh	r3, [r5, #14]
        BSTREAM_TO_UINT8(pMsg->sampleCnt, p);
    f452:	f894 800f 	ldrb.w	r8, [r4, #15]
    f456:	f885 8010 	strb.w	r8, [r5, #16]
        pMsg->pISample = (int8_t *) (pMsg + 1);
    f45a:	f105 031c 	add.w	r3, r5, #28
        BSTREAM_TO_UINT8(pMsg->sampleCnt, p);
    f45e:	3410      	adds	r4, #16
        pMsg->pISample = (int8_t *) (pMsg + 1);
    f460:	616b      	str	r3, [r5, #20]
        memcpy(pMsg->pISample, p, pMsg->sampleCnt);
    f462:	4642      	mov	r2, r8
    f464:	4621      	mov	r1, r4
    f466:	4618      	mov	r0, r3
    f468:	f7fc fe4a 	bl	c100 <memcpy>
        pMsg->pQSample = (int8_t *) (pMsg + 1)+HCI_IQ_RPT_SAMPLE_CNT_MAX;
    f46c:	f105 036e 	add.w	r3, r5, #110	; 0x6e
    f470:	61ab      	str	r3, [r5, #24]
        memcpy(pMsg->pISample, p, pMsg->sampleCnt);
    f472:	eb04 0108 	add.w	r1, r4, r8
    f476:	4642      	mov	r2, r8
    f478:	f7fc fe42 	bl	c100 <memcpy>
        pMsg->hdr.event = HCI_LE_CONN_IQ_REPORT_CBACK_EVT;
    f47c:	233d      	movs	r3, #61	; 0x3d
        pMsg->hdr.status = pMsg->pktStatus;
    f47e:	f885 9003 	strb.w	r9, [r5, #3]
        pMsg->hdr.event = HCI_LE_CONN_IQ_REPORT_CBACK_EVT;
    f482:	70ab      	strb	r3, [r5, #2]
        (*hciCb.evtCback)((hciEvt_t *) pMsg);
    f484:	68b3      	ldr	r3, [r6, #8]
        pMsg->hdr.param = pMsg->handle;
    f486:	802f      	strh	r7, [r5, #0]
        (*hciCb.evtCback)((hciEvt_t *) pMsg);
    f488:	e758      	b.n	f33c <hciEvtProcessMsg+0x53c>
          if (*pEvt == HCI_SUCCESS)
    f48a:	78e3      	ldrb	r3, [r4, #3]
    f48c:	2b00      	cmp	r3, #0
    f48e:	d061      	beq.n	f554 <hciEvtProcessMsg+0x754>
    f490:	4e3e      	ldr	r6, [pc, #248]	; (f58c <hciEvtProcessMsg+0x78c>)
    f492:	2024      	movs	r0, #36	; 0x24
          cbackEvt = HCI_LE_ENHANCED_CONN_CMPL_CBACK_EVT;
    f494:	f04f 0902 	mov.w	r9, #2
    f498:	e4f9      	b.n	ee8e <hciEvtProcessMsg+0x8e>
          cback = hciCb.secCback;
    f49a:	2026      	movs	r0, #38	; 0x26
    f49c:	68f7      	ldr	r7, [r6, #12]
    f49e:	4e3c      	ldr	r6, [pc, #240]	; (f590 <hciEvtProcessMsg+0x790>)
          cbackEvt = HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT;
    f4a0:	4681      	mov	r9, r0
    f4a2:	e4f4      	b.n	ee8e <hciEvtProcessMsg+0x8e>
          cback = hciCb.secCback;
    f4a4:	68f7      	ldr	r7, [r6, #12]
    f4a6:	4e3b      	ldr	r6, [pc, #236]	; (f594 <hciEvtProcessMsg+0x794>)
    f4a8:	2046      	movs	r0, #70	; 0x46
          cbackEvt = HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT;
    f4aa:	f04f 0925 	mov.w	r9, #37	; 0x25
    f4ae:	e4ee      	b.n	ee8e <hciEvtProcessMsg+0x8e>
  if (cbackEvt != 0)
    f4b0:	4e39      	ldr	r6, [pc, #228]	; (f598 <hciEvtProcessMsg+0x798>)
    f4b2:	200e      	movs	r0, #14
          cbackEvt = HCI_LE_DATA_LEN_CHANGE_CBACK_EVT;
    f4b4:	f04f 0924 	mov.w	r9, #36	; 0x24
    f4b8:	e4e9      	b.n	ee8e <hciEvtProcessMsg+0x8e>
  BSTREAM_TO_UINT8(i, p);
    f4ba:	78e7      	ldrb	r7, [r4, #3]
  if (i > HCI_MAX_REPORTS)
    f4bc:	2f0f      	cmp	r7, #15
    f4be:	f63f acfa 	bhi.w	eeb6 <hciEvtProcessMsg+0xb6>
  if ((pMsg = WsfBufAlloc(sizeof(hciLeAdvReportEvt_t))) != NULL)
    f4c2:	201c      	movs	r0, #28
    f4c4:	f000 f9e0 	bl	f888 <WsfBufAlloc>
    f4c8:	4605      	mov	r5, r0
    f4ca:	2800      	cmp	r0, #0
    f4cc:	f43f acf3 	beq.w	eeb6 <hciEvtProcessMsg+0xb6>
    while (i-- > 0)
    f4d0:	1e7b      	subs	r3, r7, #1
    f4d2:	b2db      	uxtb	r3, r3
    f4d4:	2f00      	cmp	r7, #0
    f4d6:	f43f af33 	beq.w	f340 <hciEvtProcessMsg+0x540>
    f4da:	f104 0816 	add.w	r8, r4, #22
      BSTREAM_TO_BDA(pMsg->addr, p);
    f4de:	f100 0a0c 	add.w	sl, r0, #12
    f4e2:	eb08 1803 	add.w	r8, r8, r3, lsl #4
    f4e6:	3406      	adds	r4, #6
      BSTREAM_TO_BDA(pMsg->directAddr, p);
    f4e8:	f100 0b13 	add.w	fp, r0, #19
      pMsg->hdr.param = 0;
    f4ec:	f44f 29c0 	mov.w	r9, #393216	; 0x60000
      pMsg->pData = NULL;
    f4f0:	2700      	movs	r7, #0
      BSTREAM_TO_UINT8(pMsg->eventType, p);
    f4f2:	f814 3c02 	ldrb.w	r3, [r4, #-2]
    f4f6:	72ab      	strb	r3, [r5, #10]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
    f4f8:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    f4fc:	72eb      	strb	r3, [r5, #11]
      BSTREAM_TO_BDA(pMsg->addr, p);
    f4fe:	4621      	mov	r1, r4
    f500:	4650      	mov	r0, sl
    f502:	f003 ff4b 	bl	1339c <BdaCpy>
      BSTREAM_TO_UINT8(pMsg->directAddrType, p);
    f506:	79a3      	ldrb	r3, [r4, #6]
    f508:	74ab      	strb	r3, [r5, #18]
      BSTREAM_TO_BDA(pMsg->directAddr, p);
    f50a:	1de1      	adds	r1, r4, #7
    f50c:	4658      	mov	r0, fp
    f50e:	f003 ff45 	bl	1339c <BdaCpy>
      BSTREAM_TO_UINT8(pMsg->rssi, p);
    f512:	7b63      	ldrb	r3, [r4, #13]
    f514:	726b      	strb	r3, [r5, #9]
      pMsg->hdr.param = 0;
    f516:	f8c5 9000 	str.w	r9, [r5]
      pMsg->len = 0;
    f51a:	722f      	strb	r7, [r5, #8]
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
    f51c:	68b3      	ldr	r3, [r6, #8]
      pMsg->pData = NULL;
    f51e:	606f      	str	r7, [r5, #4]
    while (i-- > 0)
    f520:	3410      	adds	r4, #16
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
    f522:	4628      	mov	r0, r5
    f524:	4798      	blx	r3
    while (i-- > 0)
    f526:	4544      	cmp	r4, r8
    f528:	d1e3      	bne.n	f4f2 <hciEvtProcessMsg+0x6f2>
    f52a:	e709      	b.n	f340 <hciEvtProcessMsg+0x540>
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
    f52c:	200e      	movs	r0, #14
    f52e:	f000 f9ab 	bl	f888 <WsfBufAlloc>
    f532:	4604      	mov	r4, r0
    f534:	2800      	cmp	r0, #0
    f536:	f43f acbe 	beq.w	eeb6 <hciEvtProcessMsg+0xb6>
      pMsg->hdr.param = 0;
    f53a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    f53e:	6003      	str	r3, [r0, #0]
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, pEvt, len);
    f540:	4642      	mov	r2, r8
    f542:	4629      	mov	r1, r5
    f544:	f7fe ffd0 	bl	e4e8 <hciEvtParseLeConnUpdateCmpl>
      (*cback)(pMsg);
    f548:	47b8      	blx	r7
      WsfBufFree(pMsg);
    f54a:	4620      	mov	r0, r4
}
    f54c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      WsfBufFree(pMsg);
    f550:	f000 b9ca 	b.w	f8e8 <WsfBufFree>
            BYTES_TO_UINT16(handle, (pEvt + 1));
    f554:	7963      	ldrb	r3, [r4, #5]
    f556:	7920      	ldrb	r0, [r4, #4]
            hciCoreConnOpen(handle);
    f558:	4e0c      	ldr	r6, [pc, #48]	; (f58c <hciEvtProcessMsg+0x78c>)
            BYTES_TO_UINT16(handle, (pEvt + 1));
    f55a:	eb00 2003 	add.w	r0, r0, r3, lsl #8
            hciCoreConnOpen(handle);
    f55e:	b280      	uxth	r0, r0
    f560:	f7fe fc32 	bl	ddc8 <hciCoreConnOpen>
          cbackEvt = HCI_LE_ENHANCED_CONN_CMPL_CBACK_EVT;
    f564:	f04f 0902 	mov.w	r9, #2
            hciCoreConnOpen(handle);
    f568:	2024      	movs	r0, #36	; 0x24
    f56a:	e490      	b.n	ee8e <hciEvtProcessMsg+0x8e>
            BYTES_TO_UINT16(handle, (pEvt + 1));
    f56c:	7963      	ldrb	r3, [r4, #5]
    f56e:	7920      	ldrb	r0, [r4, #4]
            hciCoreConnOpen(handle);
    f570:	4e0a      	ldr	r6, [pc, #40]	; (f59c <hciEvtProcessMsg+0x79c>)
            BYTES_TO_UINT16(handle, (pEvt + 1));
    f572:	eb00 2003 	add.w	r0, r0, r3, lsl #8
            hciCoreConnOpen(handle);
    f576:	b280      	uxth	r0, r0
    f578:	f7fe fc26 	bl	ddc8 <hciCoreConnOpen>
    f57c:	2024      	movs	r0, #36	; 0x24
    f57e:	e486      	b.n	ee8e <hciEvtProcessMsg+0x8e>
  maxLen = 0;
    f580:	4610      	mov	r0, r2
    f582:	e64f      	b.n	f224 <hciEvtProcessMsg+0x424>
    f584:	0001f3e0 	.word	0x0001f3e0
    f588:	0001f3fc 	.word	0x0001f3fc
    f58c:	0000e941 	.word	0x0000e941
    f590:	0000e9a9 	.word	0x0000e9a9
    f594:	0000e9f1 	.word	0x0000e9f1
    f598:	0000e769 	.word	0x0000e769
    f59c:	0000eb0d 	.word	0x0000eb0d

0000f5a0 <hciTrSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciTrSendAclData(void *pContext, uint8_t *pData)
{
    f5a0:	b570      	push	{r4, r5, r6, lr}
  uint16_t   len;

  /* get 16-bit length */
  BYTES_TO_UINT16(len, &pData[2]);
    f5a2:	788c      	ldrb	r4, [r1, #2]
{
    f5a4:	460d      	mov	r5, r1
  BYTES_TO_UINT16(len, &pData[2]);
    f5a6:	78c9      	ldrb	r1, [r1, #3]
  len += HCI_ACL_HDR_LEN;
    f5a8:	3404      	adds	r4, #4
    f5aa:	eb04 2401 	add.w	r4, r4, r1, lsl #8
    f5ae:	b2a4      	uxth	r4, r4

  /* dump event for protocol analysis */
  HCI_PDUMP_TX_ACL(len, pData);

  /* transmit ACL header and data */
  if (hciDrvWrite(HCI_ACL_TYPE, len, pData) == len)
    f5b0:	462a      	mov	r2, r5
    f5b2:	4621      	mov	r1, r4
{
    f5b4:	4606      	mov	r6, r0
  if (hciDrvWrite(HCI_ACL_TYPE, len, pData) == len)
    f5b6:	2002      	movs	r0, #2
    f5b8:	f7fc ffb8 	bl	c52c <hciDrvWrite>
    f5bc:	42a0      	cmp	r0, r4
    f5be:	d000      	beq.n	f5c2 <hciTrSendAclData+0x22>
  {
    /* free buffer */
    hciCoreTxAclComplete(pContext, pData);
  }
}
    f5c0:	bd70      	pop	{r4, r5, r6, pc}
    hciCoreTxAclComplete(pContext, pData);
    f5c2:	4629      	mov	r1, r5
    f5c4:	4630      	mov	r0, r6
}
    f5c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    hciCoreTxAclComplete(pContext, pData);
    f5ca:	f7fe bd5d 	b.w	e088 <hciCoreTxAclComplete>
    f5ce:	bf00      	nop

0000f5d0 <hciTrSendCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciTrSendCmd(uint8_t *pData)
{
    f5d0:	b538      	push	{r3, r4, r5, lr}
  uint16_t   len;  // in case like LE set periodic advertising data, the maximum HCI command parameter length is 255

  /* get length */
  len = pData[2] + HCI_CMD_HDR_LEN;
    f5d2:	7885      	ldrb	r5, [r0, #2]
    f5d4:	3503      	adds	r5, #3

  /* dump event for protocol analysis */
  HCI_PDUMP_CMD(len, pData);

  /* transmit ACL header and data */
  if (hciDrvWrite(HCI_CMD_TYPE, len, pData) == len)
    f5d6:	4602      	mov	r2, r0
{
    f5d8:	4604      	mov	r4, r0
  if (hciDrvWrite(HCI_CMD_TYPE, len, pData) == len)
    f5da:	4629      	mov	r1, r5
    f5dc:	2001      	movs	r0, #1
    f5de:	f7fc ffa5 	bl	c52c <hciDrvWrite>
    f5e2:	42a8      	cmp	r0, r5
    f5e4:	d000      	beq.n	f5e8 <hciTrSendCmd+0x18>
  {
    /* free buffer */
    WsfMsgFree(pData);
  }
}
    f5e6:	bd38      	pop	{r3, r4, r5, pc}
    WsfMsgFree(pData);
    f5e8:	4620      	mov	r0, r4
}
    f5ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    WsfMsgFree(pData);
    f5ee:	f000 b9b3 	b.w	f958 <WsfMsgFree>
    f5f2:	bf00      	nop

0000f5f4 <hciTrSerialRxIncoming>:
 *
 *  \return The number of bytes consumed.
 */
/*************************************************************************************************/
uint16_t hciTrSerialRxIncoming(uint8_t *pBuf, uint16_t len)
{
    f5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t   dataByte;
  uint16_t  consumed_bytes;

  consumed_bytes = 0;
  /* loop until all bytes of incoming buffer are handled */
  while (len)
    f5f8:	460c      	mov	r4, r1
{
    f5fa:	b083      	sub	sp, #12
  while (len)
    f5fc:	2900      	cmp	r1, #0
    f5fe:	f000 80b9 	beq.w	f774 <hciTrSerialRxIncoming+0x180>
    f602:	f890 c000 	ldrb.w	ip, [r0]
    f606:	4f5e      	ldr	r7, [pc, #376]	; (f780 <hciTrSerialRxIncoming+0x18c>)
    if (stateRx == HCI_RX_STATE_COMPLETE)
    {
      g_bHCIReceivingPacket = FALSE;

      /* deliver data */
      if (pPktRx != NULL)
    f608:	f8df a184 	ldr.w	sl, [pc, #388]	; f790 <hciTrSerialRxIncoming+0x19c>
      g_bHCIReceivingPacket = FALSE;
    f60c:	f8df 9184 	ldr.w	r9, [pc, #388]	; f794 <hciTrSerialRxIncoming+0x1a0>
    f610:	f8df 8184 	ldr.w	r8, [pc, #388]	; f798 <hciTrSerialRxIncoming+0x1a4>
    f614:	4606      	mov	r6, r0
  consumed_bytes = 0;
    f616:	2500      	movs	r5, #0
    if (stateRx == HCI_RX_STATE_IDLE)
    f618:	783b      	ldrb	r3, [r7, #0]
    f61a:	b993      	cbnz	r3, f642 <hciTrSerialRxIncoming+0x4e>
      stateRx  = HCI_RX_STATE_HEADER;
    f61c:	2201      	movs	r2, #1
      iRx      = 0;
    f61e:	4959      	ldr	r1, [pc, #356]	; (f784 <hciTrSerialRxIncoming+0x190>)
      pktIndRx = dataByte;
    f620:	f888 c000 	strb.w	ip, [r8]
      consumed_bytes++;
    f624:	4415      	add	r5, r2
      len--;
    f626:	3c01      	subs	r4, #1
      iRx      = 0;
    f628:	800b      	strh	r3, [r1, #0]
      stateRx  = HCI_RX_STATE_HEADER;
    f62a:	703a      	strb	r2, [r7, #0]
      g_bHCIReceivingPacket = TRUE;
    f62c:	f889 2000 	strb.w	r2, [r9]
      pBuf++;
    f630:	4416      	add	r6, r2
      consumed_bytes++;
    f632:	b2ad      	uxth	r5, r5
      len--;
    f634:	b2a4      	uxth	r4, r4
  while (len)
    f636:	b1cc      	cbz	r4, f66c <hciTrSerialRxIncoming+0x78>
    if (stateRx == HCI_RX_STATE_IDLE)
    f638:	783b      	ldrb	r3, [r7, #0]
    f63a:	f896 c000 	ldrb.w	ip, [r6]
    f63e:	2b00      	cmp	r3, #0
    f640:	d0ec      	beq.n	f61c <hciTrSerialRxIncoming+0x28>
    else if (stateRx == HCI_RX_STATE_HEADER)
    f642:	2b01      	cmp	r3, #1
    f644:	d016      	beq.n	f674 <hciTrSerialRxIncoming+0x80>
    else if (stateRx == HCI_RX_STATE_DATA)
    f646:	2b02      	cmp	r3, #2
    f648:	d054      	beq.n	f6f4 <hciTrSerialRxIncoming+0x100>
    if (stateRx == HCI_RX_STATE_COMPLETE)
    f64a:	2b03      	cmp	r3, #3
    f64c:	d1e4      	bne.n	f618 <hciTrSerialRxIncoming+0x24>
      if (pPktRx != NULL)
    f64e:	f8da 3000 	ldr.w	r3, [sl]
      g_bHCIReceivingPacket = FALSE;
    f652:	2200      	movs	r2, #0
    f654:	f889 2000 	strb.w	r2, [r9]
      if (pPktRx != NULL)
    f658:	b123      	cbz	r3, f664 <hciTrSerialRxIncoming+0x70>
      {
        //am_hal_gpio_out_bit_set(13);
        hciCoreRecv(pktIndRx, pPktRx);
    f65a:	f898 0000 	ldrb.w	r0, [r8]
    f65e:	4619      	mov	r1, r3
    f660:	f7fe fed6 	bl	e410 <hciCoreRecv>
        //am_hal_gpio_out_bit_clear(13);
      }

      /* reset state machine */
      stateRx = HCI_RX_STATE_IDLE;
    f664:	2300      	movs	r3, #0
    f666:	703b      	strb	r3, [r7, #0]
  while (len)
    f668:	2c00      	cmp	r4, #0
    f66a:	d1e5      	bne.n	f638 <hciTrSerialRxIncoming+0x44>
    }
  }
  return consumed_bytes;
}
    f66c:	4628      	mov	r0, r5
    f66e:	b003      	add	sp, #12
    f670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (pktIndRx == HCI_EVT_TYPE)
    f674:	f898 1000 	ldrb.w	r1, [r8]
    f678:	2904      	cmp	r1, #4
    f67a:	d050      	beq.n	f71e <hciTrSerialRxIncoming+0x12a>
      else if (pktIndRx == HCI_ACL_TYPE)
    f67c:	2902      	cmp	r1, #2
    f67e:	d1f5      	bne.n	f66c <hciTrSerialRxIncoming+0x78>
      if (iRx != hdrLen) {
    f680:	f8df b100 	ldr.w	fp, [pc, #256]	; f784 <hciTrSerialRxIncoming+0x190>
    f684:	f8bb 3000 	ldrh.w	r3, [fp]
    f688:	2b04      	cmp	r3, #4
    f68a:	d05d      	beq.n	f748 <hciTrSerialRxIncoming+0x154>
        hdrLen = HCI_ACL_HDR_LEN;
    f68c:	2204      	movs	r2, #4
      if (iRx != hdrLen) {
    f68e:	4610      	mov	r0, r2
        hdrRx[iRx++] = dataByte;
    f690:	f8df e0f4 	ldr.w	lr, [pc, #244]	; f788 <hciTrSerialRxIncoming+0x194>
    f694:	f80e c003 	strb.w	ip, [lr, r3]
    f698:	3301      	adds	r3, #1
    f69a:	b29b      	uxth	r3, r3
        consumed_bytes++;
    f69c:	3501      	adds	r5, #1
        len--;
    f69e:	3c01      	subs	r4, #1
      if (iRx == hdrLen)
    f6a0:	4283      	cmp	r3, r0
        pBuf++;
    f6a2:	f106 0601 	add.w	r6, r6, #1
        consumed_bytes++;
    f6a6:	b2ad      	uxth	r5, r5
        len--;
    f6a8:	b2a4      	uxth	r4, r4
        hdrRx[iRx++] = dataByte;
    f6aa:	f8ab 3000 	strh.w	r3, [fp]
      if (iRx == hdrLen)
    f6ae:	d1c2      	bne.n	f636 <hciTrSerialRxIncoming+0x42>
        if (pktIndRx == HCI_EVT_TYPE)
    f6b0:	2904      	cmp	r1, #4
    f6b2:	d061      	beq.n	f778 <hciTrSerialRxIncoming+0x184>
        else if (pktIndRx == HCI_ACL_TYPE)
    f6b4:	2902      	cmp	r1, #2
    f6b6:	d061      	beq.n	f77c <hciTrSerialRxIncoming+0x188>
      uint16_t dataLen = 0;
    f6b8:	2300      	movs	r3, #0
    f6ba:	9300      	str	r3, [sp, #0]
    f6bc:	9201      	str	r2, [sp, #4]
          pPktRx = (uint8_t*)WsfMsgAlloc(hdrLen + dataLen);
    f6be:	f000 f943 	bl	f948 <WsfMsgAlloc>
    f6c2:	9a01      	ldr	r2, [sp, #4]
    f6c4:	f8ca 0000 	str.w	r0, [sl]
    f6c8:	4603      	mov	r3, r0
        if (pPktRx != NULL)
    f6ca:	2b00      	cmp	r3, #0
    f6cc:	d0ce      	beq.n	f66c <hciTrSerialRxIncoming+0x78>
              *pDataRx++ = hdrRx[i];
    f6ce:	492e      	ldr	r1, [pc, #184]	; (f788 <hciTrSerialRxIncoming+0x194>)
    f6d0:	9201      	str	r2, [sp, #4]
    f6d2:	4618      	mov	r0, r3
    f6d4:	f7fc fd14 	bl	c100 <memcpy>
    f6d8:	9a01      	ldr	r2, [sp, #4]
    f6da:	492c      	ldr	r1, [pc, #176]	; (f78c <hciTrSerialRxIncoming+0x198>)
    f6dc:	4603      	mov	r3, r0
          iRx = dataLen;
    f6de:	9800      	ldr	r0, [sp, #0]
    f6e0:	f8ab 0000 	strh.w	r0, [fp]
              *pDataRx++ = hdrRx[i];
    f6e4:	441a      	add	r2, r3
    f6e6:	600a      	str	r2, [r1, #0]
          if (iRx == 0)
    f6e8:	bb10      	cbnz	r0, f730 <hciTrSerialRxIncoming+0x13c>
            stateRx = HCI_RX_STATE_COMPLETE;
    f6ea:	2203      	movs	r2, #3
      g_bHCIReceivingPacket = FALSE;
    f6ec:	f889 0000 	strb.w	r0, [r9]
            stateRx = HCI_RX_STATE_COMPLETE;
    f6f0:	703a      	strb	r2, [r7, #0]
      if (pPktRx != NULL)
    f6f2:	e7b2      	b.n	f65a <hciTrSerialRxIncoming+0x66>
      *pDataRx++ = dataByte;
    f6f4:	4925      	ldr	r1, [pc, #148]	; (f78c <hciTrSerialRxIncoming+0x198>)
      iRx--;
    f6f6:	4a23      	ldr	r2, [pc, #140]	; (f784 <hciTrSerialRxIncoming+0x190>)
      *pDataRx++ = dataByte;
    f6f8:	680b      	ldr	r3, [r1, #0]
    f6fa:	f883 c000 	strb.w	ip, [r3]
    f6fe:	3301      	adds	r3, #1
    f700:	600b      	str	r3, [r1, #0]
      iRx--;
    f702:	8813      	ldrh	r3, [r2, #0]
    f704:	3b01      	subs	r3, #1
    f706:	b29b      	uxth	r3, r3
      consumed_bytes++;
    f708:	3501      	adds	r5, #1
      len--;
    f70a:	3c01      	subs	r4, #1
      iRx--;
    f70c:	8013      	strh	r3, [r2, #0]
      pBuf++;
    f70e:	3601      	adds	r6, #1
      consumed_bytes++;
    f710:	b2ad      	uxth	r5, r5
      len--;
    f712:	b2a4      	uxth	r4, r4
      if (iRx == 0)
    f714:	2b00      	cmp	r3, #0
    f716:	d18e      	bne.n	f636 <hciTrSerialRxIncoming+0x42>
        stateRx = HCI_RX_STATE_COMPLETE;
    f718:	2303      	movs	r3, #3
    f71a:	703b      	strb	r3, [r7, #0]
    if (stateRx == HCI_RX_STATE_COMPLETE)
    f71c:	e797      	b.n	f64e <hciTrSerialRxIncoming+0x5a>
      if (iRx != hdrLen) {
    f71e:	f8df b064 	ldr.w	fp, [pc, #100]	; f784 <hciTrSerialRxIncoming+0x190>
    f722:	f8bb 3000 	ldrh.w	r3, [fp]
    f726:	2b02      	cmp	r3, #2
    f728:	d005      	beq.n	f736 <hciTrSerialRxIncoming+0x142>
        hdrLen = HCI_EVT_HDR_LEN;
    f72a:	2202      	movs	r2, #2
      if (iRx != hdrLen) {
    f72c:	4610      	mov	r0, r2
    f72e:	e7af      	b.n	f690 <hciTrSerialRxIncoming+0x9c>
            stateRx = HCI_RX_STATE_DATA;
    f730:	2302      	movs	r3, #2
    f732:	703b      	strb	r3, [r7, #0]
    f734:	e77f      	b.n	f636 <hciTrSerialRxIncoming+0x42>
    f736:	f8df e050 	ldr.w	lr, [pc, #80]	; f788 <hciTrSerialRxIncoming+0x194>
        hdrLen = HCI_EVT_HDR_LEN;
    f73a:	461a      	mov	r2, r3
          dataLen = hdrRx[1];
    f73c:	f89e 1001 	ldrb.w	r1, [lr, #1]
    f740:	9100      	str	r1, [sp, #0]
          pPktRx = (uint8_t*)WsfMsgAlloc(hdrLen + dataLen);
    f742:	440b      	add	r3, r1
    f744:	b298      	uxth	r0, r3
    f746:	e7b9      	b.n	f6bc <hciTrSerialRxIncoming+0xc8>
    f748:	f8df e03c 	ldr.w	lr, [pc, #60]	; f788 <hciTrSerialRxIncoming+0x194>
        hdrLen = HCI_ACL_HDR_LEN;
    f74c:	461a      	mov	r2, r3
          BYTES_TO_UINT16(dataLen, &hdrRx[2]);
    f74e:	f89e 0003 	ldrb.w	r0, [lr, #3]
    f752:	f89e 1002 	ldrb.w	r1, [lr, #2]
    f756:	9201      	str	r2, [sp, #4]
    f758:	eb01 2100 	add.w	r1, r1, r0, lsl #8
    f75c:	b28a      	uxth	r2, r1
          pPktRx = (uint8_t*)WsfMsgDataAlloc(hdrLen + dataLen, 0);
    f75e:	4413      	add	r3, r2
    f760:	b298      	uxth	r0, r3
    f762:	2100      	movs	r1, #0
          BYTES_TO_UINT16(dataLen, &hdrRx[2]);
    f764:	9200      	str	r2, [sp, #0]
          pPktRx = (uint8_t*)WsfMsgDataAlloc(hdrLen + dataLen, 0);
    f766:	f000 f8e5 	bl	f934 <WsfMsgDataAlloc>
    f76a:	9a01      	ldr	r2, [sp, #4]
    f76c:	f8ca 0000 	str.w	r0, [sl]
    f770:	4603      	mov	r3, r0
    f772:	e7aa      	b.n	f6ca <hciTrSerialRxIncoming+0xd6>
  consumed_bytes = 0;
    f774:	460d      	mov	r5, r1
    f776:	e779      	b.n	f66c <hciTrSerialRxIncoming+0x78>
    f778:	4603      	mov	r3, r0
    f77a:	e7df      	b.n	f73c <hciTrSerialRxIncoming+0x148>
    f77c:	4603      	mov	r3, r0
    f77e:	e7e6      	b.n	f74e <hciTrSerialRxIncoming+0x15a>
    f780:	1000483d 	.word	0x1000483d
    f784:	10004830 	.word	0x10004830
    f788:	1000482c 	.word	0x1000482c
    f78c:	10004834 	.word	0x10004834
    f790:	10004838 	.word	0x10004838
    f794:	10004828 	.word	0x10004828
    f798:	1000483c 	.word	0x1000483c

0000f79c <WsfAssert>:
 *  \param  pFile   Name of file originating assert.
 *  \param  line    Line number of assert statement.
 */
/*************************************************************************************************/
void WsfAssert(const char *pFile, uint16_t line)
{
    f79c:	b082      	sub	sp, #8
  volatile uint8_t escape=0;
    f79e:	2300      	movs	r3, #0
    f7a0:	f88d 3007 	strb.w	r3, [sp, #7]
  {
    /*
     *  However, you can exit with a debugger by setting variable 'escape'.
     *  Handy to see where the assert happened if you cannot view the call stack.
    */
    if (escape)
    f7a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f7a8:	2b00      	cmp	r3, #0
    f7aa:	d0fb      	beq.n	f7a4 <WsfAssert+0x8>
    {
      break;
    }
  }
}
    f7ac:	b002      	add	sp, #8
    f7ae:	4770      	bx	lr

0000f7b0 <WsfBufInit>:
 *
 *  \return Amount of pBufMem used or 0 for failures.
 */
/*************************************************************************************************/
uint16_t WsfBufInit(uint16_t bufMemLen, uint8_t *pBufMem, uint8_t numPools, wsfBufPoolDesc_t *pDesc)
{
    f7b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* create each pool; see loop exit condition below */
  while (TRUE)
  {
    /* verify we didn't overrun memory; if we did, abort */
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
    f7b4:	08c0      	lsrs	r0, r0, #3
  wsfBufMem = (wsfBufMem_t *) pBufMem;
    f7b6:	4c31      	ldr	r4, [pc, #196]	; (f87c <WsfBufInit+0xcc>)
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
    f7b8:	eb01 0cc0 	add.w	ip, r1, r0, lsl #3
  pStart = (wsfBufMem_t *) (pPool + numPools);
    f7bc:	eb02 0042 	add.w	r0, r2, r2, lsl #1
  wsfBufMem = (wsfBufMem_t *) pBufMem;
    f7c0:	6021      	str	r1, [r4, #0]
  pStart = (wsfBufMem_t *) (pPool + numPools);
    f7c2:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  wsfBufNumPools = numPools;
    f7c6:	4c2e      	ldr	r4, [pc, #184]	; (f880 <WsfBufInit+0xd0>)
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
    f7c8:	4560      	cmp	r0, ip
  wsfBufNumPools = numPools;
    f7ca:	7022      	strb	r2, [r4, #0]
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
    f7cc:	d849      	bhi.n	f862 <WsfBufInit+0xb2>
      WSF_ASSERT(FALSE);
      return 0;
    }

    /* exit loop after verification check */
    if (numPools-- == 0)
    f7ce:	1e57      	subs	r7, r2, #1
    f7d0:	b2ff      	uxtb	r7, r7
    f7d2:	b3ba      	cbz	r2, f844 <WsfBufInit+0x94>
    f7d4:	f103 0208 	add.w	r2, r3, #8
    f7d8:	eb02 0787 	add.w	r7, r2, r7, lsl #2
    f7dc:	1d1d      	adds	r5, r3, #4
    f7de:	f101 060c 	add.w	r6, r1, #12
    }

    /* adjust pool lengths for minimum size and alignment */
    if (pDesc->len < sizeof(wsfBufMem_t))
    {
      pPool->desc.len = sizeof(wsfBufMem_t);
    f7e2:	f04f 0908 	mov.w	r9, #8
    {
      WSF_ASSERT(FALSE);
      return 0;
    }
    /* last one in list points to NULL */
    pStart->pNext = NULL;
    f7e6:	f04f 0800 	mov.w	r8, #0
    if (pDesc->len < sizeof(wsfBufMem_t))
    f7ea:	f835 4c04 	ldrh.w	r4, [r5, #-4]
    f7ee:	2c07      	cmp	r4, #7
    f7f0:	d83a      	bhi.n	f868 <WsfBufInit+0xb8>
      pPool->desc.len = sizeof(wsfBufMem_t);
    f7f2:	f826 9c0c 	strh.w	r9, [r6, #-12]
    f7f6:	2401      	movs	r4, #1
    pPool->desc.num = pDesc->num;
    f7f8:	f815 3c02 	ldrb.w	r3, [r5, #-2]
    f7fc:	f806 3c0a 	strb.w	r3, [r6, #-10]
    for (i = pPool->desc.num; i > 1; i--)
    f800:	2b01      	cmp	r3, #1
    pPool->pFree = pStart;
    f802:	e946 0002 	strd	r0, r0, [r6, #-8]
    for (i = pPool->desc.num; i > 1; i--)
    f806:	d910      	bls.n	f82a <WsfBufInit+0x7a>
      if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
    f808:	4584      	cmp	ip, r0
    f80a:	d32a      	bcc.n	f862 <WsfBufInit+0xb2>
      pStart->pNext = pStart + len;
    f80c:	00e2      	lsls	r2, r4, #3
    f80e:	2c01      	cmp	r4, #1
    f810:	f1c2 0e00 	rsb	lr, r2, #0
    f814:	d002      	beq.n	f81c <WsfBufInit+0x6c>
    f816:	e01c      	b.n	f852 <WsfBufInit+0xa2>
      if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
    f818:	4560      	cmp	r0, ip
    f81a:	d822      	bhi.n	f862 <WsfBufInit+0xb2>
    for (i = pPool->desc.num; i > 1; i--)
    f81c:	3b01      	subs	r3, #1
      pStart->pNext = pStart + len;
    f81e:	4410      	add	r0, r2
    for (i = pPool->desc.num; i > 1; i--)
    f820:	b2db      	uxtb	r3, r3
    f822:	2b01      	cmp	r3, #1
      pStart->pNext = pStart + len;
    f824:	f840 000e 	str.w	r0, [r0, lr]
    for (i = pPool->desc.num; i > 1; i--)
    f828:	d1f6      	bne.n	f818 <WsfBufInit+0x68>
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
    f82a:	4584      	cmp	ip, r0
    f82c:	d319      	bcc.n	f862 <WsfBufInit+0xb2>
    pStart->pNext = NULL;
    f82e:	f8c0 8000 	str.w	r8, [r0]
    pStart += len;
    f832:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
    f836:	4560      	cmp	r0, ip
    f838:	d813      	bhi.n	f862 <WsfBufInit+0xb2>
    if (numPools-- == 0)
    f83a:	3504      	adds	r5, #4
    f83c:	42bd      	cmp	r5, r7
    f83e:	f106 060c 	add.w	r6, r6, #12
    f842:	d1d2      	bne.n	f7ea <WsfBufInit+0x3a>

    /* next pool */
    pPool++;
  }

  wsfBufMemLen = (uint8_t *) pStart - (uint8_t *) wsfBufMem;
    f844:	4b0f      	ldr	r3, [pc, #60]	; (f884 <WsfBufInit+0xd4>)
    f846:	1a40      	subs	r0, r0, r1
    f848:	b280      	uxth	r0, r0
    f84a:	8018      	strh	r0, [r3, #0]
  WSF_TRACE_INFO1("Created buffer pools; using %u bytes", wsfBufMemLen);

  return wsfBufMemLen;
    f84c:	e00a      	b.n	f864 <WsfBufInit+0xb4>
      if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
    f84e:	4560      	cmp	r0, ip
    f850:	d807      	bhi.n	f862 <WsfBufInit+0xb2>
    for (i = pPool->desc.num; i > 1; i--)
    f852:	3b01      	subs	r3, #1
      pStart->pNext = pStart + len;
    f854:	4410      	add	r0, r2
    for (i = pPool->desc.num; i > 1; i--)
    f856:	b2db      	uxtb	r3, r3
    f858:	2b01      	cmp	r3, #1
      pStart->pNext = pStart + len;
    f85a:	f840 000e 	str.w	r0, [r0, lr]
    for (i = pPool->desc.num; i > 1; i--)
    f85e:	d1f6      	bne.n	f84e <WsfBufInit+0x9e>
    f860:	e7e3      	b.n	f82a <WsfBufInit+0x7a>
      return 0;
    f862:	2000      	movs	r0, #0
}
    f864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if ((pDesc->len % sizeof(wsfBufMem_t)) != 0)
    f868:	0763      	lsls	r3, r4, #29
      pPool->desc.len = pDesc->len + sizeof(wsfBufMem_t) - (pDesc->len % sizeof(wsfBufMem_t));
    f86a:	bf1e      	ittt	ne
    f86c:	f024 0407 	bicne.w	r4, r4, #7
    f870:	3408      	addne	r4, #8
    f872:	b2a4      	uxthne	r4, r4
      pPool->desc.len = pDesc->len;
    f874:	f826 4c0c 	strh.w	r4, [r6, #-12]
    len = pPool->desc.len / sizeof(wsfBufMem_t);
    f878:	08e4      	lsrs	r4, r4, #3
    f87a:	e7bd      	b.n	f7f8 <WsfBufInit+0x48>
    f87c:	10004840 	.word	0x10004840
    f880:	10004846 	.word	0x10004846
    f884:	10004844 	.word	0x10004844

0000f888 <WsfBufAlloc>:
 *
 *  \return Pointer to allocated buffer or NULL if allocation fails.
 */
/*************************************************************************************************/
void *WsfBufAlloc(uint16_t len)
{
    f888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  WSF_ASSERT(len > 0);

  pPool = (wsfBufPool_t *) wsfBufMem;

  for (i = wsfBufNumPools; i > 0; i--, pPool++)
    f88a:	4a14      	ldr	r2, [pc, #80]	; (f8dc <WsfBufAlloc+0x54>)
  pPool = (wsfBufPool_t *) wsfBufMem;
    f88c:	4b14      	ldr	r3, [pc, #80]	; (f8e0 <WsfBufAlloc+0x58>)
  for (i = wsfBufNumPools; i > 0; i--, pPool++)
    f88e:	7815      	ldrb	r5, [r2, #0]
  pPool = (wsfBufPool_t *) wsfBufMem;
    f890:	681c      	ldr	r4, [r3, #0]
{
    f892:	4606      	mov	r6, r0
  for (i = wsfBufNumPools; i > 0; i--, pPool++)
    f894:	b19d      	cbz	r5, f8be <WsfBufAlloc+0x36>
    f896:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    f89a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    f89e:	e002      	b.n	f8a6 <WsfBufAlloc+0x1e>
    f8a0:	340c      	adds	r4, #12
    f8a2:	42ac      	cmp	r4, r5
    f8a4:	d00b      	beq.n	f8be <WsfBufAlloc+0x36>
  {
    /* if buffer is big enough */
    if (len <= pPool->desc.len)
    f8a6:	8823      	ldrh	r3, [r4, #0]
    f8a8:	42b3      	cmp	r3, r6
    f8aa:	d3f9      	bcc.n	f8a0 <WsfBufAlloc+0x18>
    {
      /* enter critical section */
      WSF_CS_ENTER(cs);
    f8ac:	f000 f87a 	bl	f9a4 <WsfCsEnter>

      /* if buffers available */
      if (pPool->pFree != NULL)
    f8b0:	68a7      	ldr	r7, [r4, #8]
    f8b2:	b95f      	cbnz	r7, f8cc <WsfBufAlloc+0x44>
  for (i = wsfBufNumPools; i > 0; i--, pPool++)
    f8b4:	340c      	adds	r4, #12

        return pBuf;
      }

      /* exit critical section */
      WSF_CS_EXIT(cs);
    f8b6:	f000 f87f 	bl	f9b8 <WsfCsExit>
  for (i = wsfBufNumPools; i > 0; i--, pPool++)
    f8ba:	42ac      	cmp	r4, r5
    f8bc:	d1f3      	bne.n	f8a6 <WsfBufAlloc+0x1e>
  else
  {
    WSF_TRACE_WARN2("WsfBufAlloc failed len:%u - task:%u", len, WSF_OS_GET_ACTIVE_HANDLER_ID());
  }
#else
  WSF_TRACE_WARN1("WsfBufAlloc failed len:%u", len);
    f8be:	4809      	ldr	r0, [pc, #36]	; (f8e4 <WsfBufAlloc+0x5c>)
    f8c0:	4631      	mov	r1, r6

#if WSF_BUF_ALLOC_FAIL_ASSERT == TRUE
  WSF_ASSERT(FALSE);
#endif

  return NULL;
    f8c2:	2700      	movs	r7, #0
  WSF_TRACE_WARN1("WsfBufAlloc failed len:%u", len);
    f8c4:	f000 fbc0 	bl	10048 <WsfTrace>
}
    f8c8:	4638      	mov	r0, r7
    f8ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pPool->pFree = pBuf->pNext;
    f8cc:	683a      	ldr	r2, [r7, #0]
    f8ce:	60a2      	str	r2, [r4, #8]
        pBuf->free = 0;
    f8d0:	2300      	movs	r3, #0
    f8d2:	607b      	str	r3, [r7, #4]
        WSF_CS_EXIT(cs);
    f8d4:	f000 f870 	bl	f9b8 <WsfCsExit>
}
    f8d8:	4638      	mov	r0, r7
    f8da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f8dc:	10004846 	.word	0x10004846
    f8e0:	10004840 	.word	0x10004840
    f8e4:	0001f598 	.word	0x0001f598

0000f8e8 <WsfBufFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfBufFree(void *pBuf)
{
    f8e8:	b538      	push	{r3, r4, r5, lr}
  WSF_ASSERT(p >= ((wsfBufPool_t *) wsfBufMem)->pStart);
  WSF_ASSERT(p < (wsfBufMem_t *)(((uint8_t *) wsfBufMem) + wsfBufMemLen));
#endif

  /* iterate over pools starting from last pool */
  pPool = (wsfBufPool_t *) wsfBufMem + (wsfBufNumPools - 1);
    f8ea:	4a0f      	ldr	r2, [pc, #60]	; (f928 <WsfBufFree+0x40>)
    f8ec:	4b0f      	ldr	r3, [pc, #60]	; (f92c <WsfBufFree+0x44>)
    f8ee:	6812      	ldr	r2, [r2, #0]
    f8f0:	781c      	ldrb	r4, [r3, #0]
    f8f2:	230c      	movs	r3, #12
    f8f4:	fb03 2404 	mla	r4, r3, r4, r2
    f8f8:	3c0c      	subs	r4, #12
  while (pPool >= (wsfBufPool_t *) wsfBufMem)
    f8fa:	42a2      	cmp	r2, r4
    f8fc:	d812      	bhi.n	f924 <WsfBufFree+0x3c>
    f8fe:	4605      	mov	r5, r0
    f900:	e002      	b.n	f908 <WsfBufFree+0x20>

      return;
    }

    /* next pool */
    pPool--;
    f902:	3c0c      	subs	r4, #12
  while (pPool >= (wsfBufPool_t *) wsfBufMem)
    f904:	42a2      	cmp	r2, r4
    f906:	d80d      	bhi.n	f924 <WsfBufFree+0x3c>
    if (p >= pPool->pStart)
    f908:	6863      	ldr	r3, [r4, #4]
    f90a:	42ab      	cmp	r3, r5
    f90c:	d8f9      	bhi.n	f902 <WsfBufFree+0x1a>
      WSF_CS_ENTER(cs);
    f90e:	f000 f849 	bl	f9a4 <WsfCsEnter>
      p->pNext = pPool->pFree;
    f912:	68a3      	ldr	r3, [r4, #8]
      p->free = WSF_BUF_FREE_NUM;
    f914:	4a06      	ldr	r2, [pc, #24]	; (f930 <WsfBufFree+0x48>)
      p->pNext = pPool->pFree;
    f916:	e9c5 3200 	strd	r3, r2, [r5]
      pPool->pFree = p;
    f91a:	60a5      	str	r5, [r4, #8]

  /* should never get here */
  WSF_ASSERT(FALSE);

  return;
}
    f91c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      WSF_CS_EXIT(cs);
    f920:	f000 b84a 	b.w	f9b8 <WsfCsExit>
}
    f924:	bd38      	pop	{r3, r4, r5, pc}
    f926:	bf00      	nop
    f928:	10004840 	.word	0x10004840
    f92c:	10004846 	.word	0x10004846
    f930:	faabd00d 	.word	0xfaabd00d

0000f934 <WsfMsgDataAlloc>:
/*************************************************************************************************/
void *WsfMsgAlloc(uint16_t len)
{
  wsfMsg_t  *pMsg;

  pMsg = WsfBufAlloc(len + sizeof(wsfMsg_t));
    f934:	3008      	adds	r0, #8
    f936:	4408      	add	r0, r1
{
    f938:	b508      	push	{r3, lr}
  pMsg = WsfBufAlloc(len + sizeof(wsfMsg_t));
    f93a:	b280      	uxth	r0, r0
    f93c:	f7ff ffa4 	bl	f888 <WsfBufAlloc>

  /* hide header */
  if (pMsg != NULL)
    f940:	b100      	cbz	r0, f944 <WsfMsgDataAlloc+0x10>
  {
    pMsg++;
    f942:	3008      	adds	r0, #8
}
    f944:	bd08      	pop	{r3, pc}
    f946:	bf00      	nop

0000f948 <WsfMsgAlloc>:
  pMsg = WsfBufAlloc(len + sizeof(wsfMsg_t));
    f948:	3008      	adds	r0, #8
{
    f94a:	b508      	push	{r3, lr}
  pMsg = WsfBufAlloc(len + sizeof(wsfMsg_t));
    f94c:	b280      	uxth	r0, r0
    f94e:	f7ff ff9b 	bl	f888 <WsfBufAlloc>
  if (pMsg != NULL)
    f952:	b100      	cbz	r0, f956 <WsfMsgAlloc+0xe>
    pMsg++;
    f954:	3008      	adds	r0, #8
  }

  return pMsg;
}
    f956:	bd08      	pop	{r3, pc}

0000f958 <WsfMsgFree>:
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgFree(void *pMsg)
{
  WsfBufFree(((wsfMsg_t *) pMsg) - 1);
    f958:	3808      	subs	r0, #8
    f95a:	f7ff bfc5 	b.w	f8e8 <WsfBufFree>
    f95e:	bf00      	nop

0000f960 <WsfMsgSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgSend(wsfHandlerId_t handlerId, void *pMsg)
{
    f960:	b538      	push	{r3, r4, r5, lr}
    f962:	460d      	mov	r5, r1
    f964:	4604      	mov	r4, r0
  WSF_TRACE_MSG1("WsfMsgSend handlerId:%u", handlerId);

  /* get queue for this handler and enqueue message */
  WsfMsgEnq(WsfTaskMsgQueue(handlerId), handlerId, pMsg);
    f966:	f000 f8e3 	bl	fb30 <WsfTaskMsgQueue>
  p = ((wsfMsg_t *) pMsg) - 1;

  /* set handler ID */
  p->handlerId = handlerId;

  WsfQueueEnq(pQueue, p);
    f96a:	f1a5 0108 	sub.w	r1, r5, #8
  p->handlerId = handlerId;
    f96e:	f805 4c04 	strb.w	r4, [r5, #-4]
  WsfQueueEnq(pQueue, p);
    f972:	f000 f989 	bl	fc88 <WsfQueueEnq>
  WsfTaskSetReady(handlerId, WSF_MSG_QUEUE_EVENT);
    f976:	4620      	mov	r0, r4
    f978:	2101      	movs	r1, #1
}
    f97a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WsfTaskSetReady(handlerId, WSF_MSG_QUEUE_EVENT);
    f97e:	f000 b88f 	b.w	faa0 <WsfTaskSetReady>
    f982:	bf00      	nop

0000f984 <WsfMsgEnq>:
  p->handlerId = handlerId;
    f984:	f802 1c04 	strb.w	r1, [r2, #-4]
  WsfQueueEnq(pQueue, p);
    f988:	f1a2 0108 	sub.w	r1, r2, #8
    f98c:	f000 b97c 	b.w	fc88 <WsfQueueEnq>

0000f990 <WsfMsgDeq>:
 *
 *  \return Pointer to message that has been dequeued or NULL if queue is empty.
 */
/*************************************************************************************************/
void *WsfMsgDeq(wsfQueue_t *pQueue, wsfHandlerId_t *pHandlerId)
{
    f990:	b510      	push	{r4, lr}
    f992:	460c      	mov	r4, r1
  wsfMsg_t *pMsg;

  if ((pMsg = WsfQueueDeq(pQueue)) != NULL)
    f994:	f000 f98e 	bl	fcb4 <WsfQueueDeq>
    f998:	b110      	cbz	r0, f9a0 <WsfMsgDeq+0x10>
  {
    *pHandlerId = pMsg->handlerId;
    f99a:	7903      	ldrb	r3, [r0, #4]
    f99c:	7023      	strb	r3, [r4, #0]

    /* hide header */
    pMsg++;
    f99e:	3008      	adds	r0, #8
  }

  return pMsg;
}
    f9a0:	bd10      	pop	{r4, pc}
    f9a2:	bf00      	nop

0000f9a4 <WsfCsEnter>:
    f9a4:	4a03      	ldr	r2, [pc, #12]	; (f9b4 <WsfCsEnter+0x10>)
    f9a6:	7813      	ldrb	r3, [r2, #0]
    f9a8:	b90b      	cbnz	r3, f9ae <WsfCsEnter+0xa>
    f9aa:	b672      	cpsid	i
    f9ac:	7813      	ldrb	r3, [r2, #0]
    f9ae:	3301      	adds	r3, #1
    f9b0:	7013      	strb	r3, [r2, #0]
    f9b2:	4770      	bx	lr
    f9b4:	10004847 	.word	0x10004847

0000f9b8 <WsfCsExit>:
    f9b8:	4a03      	ldr	r2, [pc, #12]	; (f9c8 <WsfCsExit+0x10>)
    f9ba:	7813      	ldrb	r3, [r2, #0]
    f9bc:	3b01      	subs	r3, #1
    f9be:	b2db      	uxtb	r3, r3
    f9c0:	7013      	strb	r3, [r2, #0]
    f9c2:	b903      	cbnz	r3, f9c6 <WsfCsExit+0xe>
    f9c4:	b662      	cpsie	i
    f9c6:	4770      	bx	lr
    f9c8:	10004847 	.word	0x10004847

0000f9cc <WsfTaskLock>:
 *  \return None.
 */
/*************************************************************************************************/
void WsfCsEnter(void)
{
  if (csNesting == 0)
    f9cc:	4a03      	ldr	r2, [pc, #12]	; (f9dc <WsfTaskLock+0x10>)
    f9ce:	7813      	ldrb	r3, [r2, #0]
    f9d0:	b90b      	cbnz	r3, f9d6 <WsfTaskLock+0xa>
  {
#ifdef __IAR_SYSTEMS_ICC__
    __disable_interrupt();
#endif
#ifdef __GNUC__
    __asm volatile ("cpsid i");
    f9d2:	b672      	cpsid	i
#ifdef __CC_ARM
  __disable_irq();
#endif

  }
  csNesting++;
    f9d4:	7813      	ldrb	r3, [r2, #0]
    f9d6:	3301      	adds	r3, #1
    f9d8:	7013      	strb	r3, [r2, #0]
 */
/*************************************************************************************************/
void WsfTaskLock(void)
{
  WsfCsEnter();
}
    f9da:	4770      	bx	lr
    f9dc:	10004847 	.word	0x10004847

0000f9e0 <WsfTaskUnlock>:
  csNesting--;
    f9e0:	4a03      	ldr	r2, [pc, #12]	; (f9f0 <WsfTaskUnlock+0x10>)
    f9e2:	7813      	ldrb	r3, [r2, #0]
    f9e4:	3b01      	subs	r3, #1
    f9e6:	b2db      	uxtb	r3, r3
    f9e8:	7013      	strb	r3, [r2, #0]
  if (csNesting == 0)
    f9ea:	b903      	cbnz	r3, f9ee <WsfTaskUnlock+0xe>
    __asm volatile ("cpsie i");
    f9ec:	b662      	cpsie	i
 */
/*************************************************************************************************/
void WsfTaskUnlock(void)
{
  WsfCsExit();
}
    f9ee:	4770      	bx	lr
    f9f0:	10004847 	.word	0x10004847

0000f9f4 <WsfSetEvent>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfSetEvent(wsfHandlerId_t handlerId, wsfEventMask_t event)
{
    f9f4:	b510      	push	{r4, lr}
  if (csNesting == 0)
    f9f6:	4b26      	ldr	r3, [pc, #152]	; (fa90 <WsfSetEvent+0x9c>)
    f9f8:	781a      	ldrb	r2, [r3, #0]
{
    f9fa:	b082      	sub	sp, #8
  if (csNesting == 0)
    f9fc:	bb4a      	cbnz	r2, fa52 <WsfSetEvent+0x5e>
    __asm volatile ("cpsid i");
    f9fe:	b672      	cpsid	i
  WSF_ASSERT(WSF_HANDLER_FROM_ID(handlerId) < WSF_MAX_HANDLERS);

  WSF_TRACE_INFO2("WsfSetEvent handlerId:%u event:%u", handlerId, event);

  WSF_CS_ENTER(cs);
  wsfOs.task.handlerEventMask[WSF_HANDLER_FROM_ID(handlerId)] |= event;
    fa00:	4a24      	ldr	r2, [pc, #144]	; (fa94 <WsfSetEvent+0xa0>)
  csNesting++;
    fa02:	781c      	ldrb	r4, [r3, #0]
  wsfOs.task.handlerEventMask[WSF_HANDLER_FROM_ID(handlerId)] |= event;
    fa04:	f000 000f 	and.w	r0, r0, #15
    fa08:	4410      	add	r0, r2
    fa0a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    fa0e:	4319      	orrs	r1, r3
  wsfOs.task.taskEventMask |= WSF_HANDLER_EVENT;
    fa10:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
  wsfOs.task.handlerEventMask[WSF_HANDLER_FROM_ID(handlerId)] |= event;
    fa14:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  wsfOs.task.taskEventMask |= WSF_HANDLER_EVENT;
    fa18:	f043 0304 	orr.w	r3, r3, #4
    fa1c:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
  if (csNesting == 0)
    fa20:	b904      	cbnz	r4, fa24 <WsfSetEvent+0x30>
    __asm volatile ("cpsie i");
    fa22:	b662      	cpsie	i
  if(xRadioTaskEventObject != NULL) 
    fa24:	4b1c      	ldr	r3, [pc, #112]	; (fa98 <WsfSetEvent+0xa4>)
    fa26:	681a      	ldr	r2, [r3, #0]
    fa28:	b18a      	cbz	r2, fa4e <WsfSetEvent+0x5a>
{
uint32_t ulCurrentInterrupt;
BaseType_t xReturn;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
    fa2a:	f3ef 8205 	mrs	r2, IPSR

	if( ulCurrentInterrupt == 0 )
    fa2e:	bb0a      	cbnz	r2, fa74 <WsfSetEvent+0x80>
          xResult = xEventGroupSetBits(xRadioTaskEventObject, 1);
    fa30:	6818      	ldr	r0, [r3, #0]
    fa32:	2101      	movs	r1, #1
    fa34:	f00a fb62 	bl	1a0fc <xEventGroupSetBits>
          if ( xResult != pdFAIL )
    fa38:	b148      	cbz	r0, fa4e <WsfSetEvent+0x5a>
              portYIELD();
    fa3a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    fa3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    fa42:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
    fa46:	f3bf 8f4f 	dsb	sy
    fa4a:	f3bf 8f6f 	isb	sy
  WSF_CS_EXIT(cs);

  /* set event in OS */

  WsfSetOsSpecificEvent();
}
    fa4e:	b002      	add	sp, #8
    fa50:	bd10      	pop	{r4, pc}
  wsfOs.task.handlerEventMask[WSF_HANDLER_FROM_ID(handlerId)] |= event;
    fa52:	4b10      	ldr	r3, [pc, #64]	; (fa94 <WsfSetEvent+0xa0>)
    fa54:	f000 000f 	and.w	r0, r0, #15
    fa58:	4418      	add	r0, r3
  wsfOs.task.taskEventMask |= WSF_HANDLER_EVENT;
    fa5a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
  wsfOs.task.handlerEventMask[WSF_HANDLER_FROM_ID(handlerId)] |= event;
    fa5e:	f890 c024 	ldrb.w	ip, [r0, #36]	; 0x24
  wsfOs.task.taskEventMask |= WSF_HANDLER_EVENT;
    fa62:	f042 0204 	orr.w	r2, r2, #4
  wsfOs.task.handlerEventMask[WSF_HANDLER_FROM_ID(handlerId)] |= event;
    fa66:	ea41 010c 	orr.w	r1, r1, ip
    fa6a:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  wsfOs.task.taskEventMask |= WSF_HANDLER_EVENT;
    fa6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (csNesting == 0)
    fa72:	e7d7      	b.n	fa24 <WsfSetEvent+0x30>
          xResult = xEventGroupSetBitsFromISR(xRadioTaskEventObject, 1,
    fa74:	6819      	ldr	r1, [r3, #0]
    fa76:	4809      	ldr	r0, [pc, #36]	; (fa9c <WsfSetEvent+0xa8>)
          xHigherPriorityTaskWoken = pdFALSE;
    fa78:	2400      	movs	r4, #0
          xResult = xEventGroupSetBitsFromISR(xRadioTaskEventObject, 1,
    fa7a:	ab01      	add	r3, sp, #4
    fa7c:	2201      	movs	r2, #1
          xHigherPriorityTaskWoken = pdFALSE;
    fa7e:	9401      	str	r4, [sp, #4]
          xResult = xEventGroupSetBitsFromISR(xRadioTaskEventObject, 1,
    fa80:	f00c f8a8 	bl	1bbd4 <xTimerPendFunctionCallFromISR>
          if ( xResult != pdFAIL )
    fa84:	2800      	cmp	r0, #0
    fa86:	d0e2      	beq.n	fa4e <WsfSetEvent+0x5a>
              portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    fa88:	9b01      	ldr	r3, [sp, #4]
    fa8a:	2b00      	cmp	r3, #0
    fa8c:	d0df      	beq.n	fa4e <WsfSetEvent+0x5a>
    fa8e:	e7d4      	b.n	fa3a <WsfSetEvent+0x46>
    fa90:	10004847 	.word	0x10004847
    fa94:	10004848 	.word	0x10004848
    fa98:	10004884 	.word	0x10004884
    fa9c:	0001a171 	.word	0x0001a171

0000faa0 <WsfTaskSetReady>:
  if (csNesting == 0)
    faa0:	4b1f      	ldr	r3, [pc, #124]	; (fb20 <WsfTaskSetReady+0x80>)
    faa2:	781a      	ldrb	r2, [r3, #0]
    faa4:	bb12      	cbnz	r2, faec <WsfTaskSetReady+0x4c>
    __asm volatile ("cpsid i");
    faa6:	b672      	cpsid	i
  (void)handlerId;

  WSF_CS_INIT(cs);

  WSF_CS_ENTER(cs);
  wsfOs.task.taskEventMask |= event;
    faa8:	4a1e      	ldr	r2, [pc, #120]	; (fb24 <WsfTaskSetReady+0x84>)
  csNesting++;
    faaa:	781b      	ldrb	r3, [r3, #0]
  wsfOs.task.taskEventMask |= event;
    faac:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
    fab0:	4301      	orrs	r1, r0
    fab2:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
  if (csNesting == 0)
    fab6:	b903      	cbnz	r3, faba <WsfTaskSetReady+0x1a>
    __asm volatile ("cpsie i");
    fab8:	b662      	cpsie	i
  if(xRadioTaskEventObject != NULL) 
    faba:	4b1b      	ldr	r3, [pc, #108]	; (fb28 <WsfTaskSetReady+0x88>)
    fabc:	681a      	ldr	r2, [r3, #0]
    fabe:	b1fa      	cbz	r2, fb00 <WsfTaskSetReady+0x60>
{
    fac0:	b510      	push	{r4, lr}
    fac2:	b082      	sub	sp, #8
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
    fac4:	f3ef 8205 	mrs	r2, IPSR
	if( ulCurrentInterrupt == 0 )
    fac8:	b9da      	cbnz	r2, fb02 <WsfTaskSetReady+0x62>
          xResult = xEventGroupSetBits(xRadioTaskEventObject, 1);
    faca:	6818      	ldr	r0, [r3, #0]
    facc:	2101      	movs	r1, #1
    face:	f00a fb15 	bl	1a0fc <xEventGroupSetBits>
          if ( xResult != pdFAIL )
    fad2:	b148      	cbz	r0, fae8 <WsfTaskSetReady+0x48>
              portYIELD();
    fad4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    fad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    fadc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
    fae0:	f3bf 8f4f 	dsb	sy
    fae4:	f3bf 8f6f 	isb	sy
  WSF_CS_EXIT(cs);

  /* set event in OS */

  WsfSetOsSpecificEvent();
}
    fae8:	b002      	add	sp, #8
    faea:	bd10      	pop	{r4, pc}
  wsfOs.task.taskEventMask |= event;
    faec:	4b0d      	ldr	r3, [pc, #52]	; (fb24 <WsfTaskSetReady+0x84>)
    faee:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
    faf2:	4311      	orrs	r1, r2
    faf4:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
  if(xRadioTaskEventObject != NULL) 
    faf8:	4b0b      	ldr	r3, [pc, #44]	; (fb28 <WsfTaskSetReady+0x88>)
    fafa:	681a      	ldr	r2, [r3, #0]
    fafc:	2a00      	cmp	r2, #0
    fafe:	d1df      	bne.n	fac0 <WsfTaskSetReady+0x20>
    fb00:	4770      	bx	lr
          xResult = xEventGroupSetBitsFromISR(xRadioTaskEventObject, 1,
    fb02:	6819      	ldr	r1, [r3, #0]
    fb04:	4809      	ldr	r0, [pc, #36]	; (fb2c <WsfTaskSetReady+0x8c>)
          xHigherPriorityTaskWoken = pdFALSE;
    fb06:	2400      	movs	r4, #0
          xResult = xEventGroupSetBitsFromISR(xRadioTaskEventObject, 1,
    fb08:	ab01      	add	r3, sp, #4
    fb0a:	2201      	movs	r2, #1
          xHigherPriorityTaskWoken = pdFALSE;
    fb0c:	9401      	str	r4, [sp, #4]
          xResult = xEventGroupSetBitsFromISR(xRadioTaskEventObject, 1,
    fb0e:	f00c f861 	bl	1bbd4 <xTimerPendFunctionCallFromISR>
          if ( xResult != pdFAIL )
    fb12:	2800      	cmp	r0, #0
    fb14:	d0e8      	beq.n	fae8 <WsfTaskSetReady+0x48>
              portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    fb16:	9b01      	ldr	r3, [sp, #4]
    fb18:	2b00      	cmp	r3, #0
    fb1a:	d0e5      	beq.n	fae8 <WsfTaskSetReady+0x48>
    fb1c:	e7da      	b.n	fad4 <WsfTaskSetReady+0x34>
    fb1e:	bf00      	nop
    fb20:	10004847 	.word	0x10004847
    fb24:	10004848 	.word	0x10004848
    fb28:	10004884 	.word	0x10004884
    fb2c:	0001a171 	.word	0x0001a171

0000fb30 <WsfTaskMsgQueue>:
{
  /* Unused parameter */
  (void)handlerId;

  return &(wsfOs.task.msgQueue);
}
    fb30:	4800      	ldr	r0, [pc, #0]	; (fb34 <WsfTaskMsgQueue+0x4>)
    fb32:	4770      	bx	lr
    fb34:	10004878 	.word	0x10004878

0000fb38 <WsfOsSetNextHandler>:
 *  \return WSF handler ID for this handler.
 */
/*************************************************************************************************/
wsfHandlerId_t WsfOsSetNextHandler(wsfEventHandler_t handler)
{
  wsfHandlerId_t handlerId = wsfOs.task.numHandler++;
    fb38:	4a04      	ldr	r2, [pc, #16]	; (fb4c <WsfOsSetNextHandler+0x14>)
    fb3a:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
    fb3e:	1c59      	adds	r1, r3, #1

  WSF_ASSERT(handlerId < WSF_MAX_HANDLERS);

  wsfOs.task.handler[handlerId] = handler;
    fb40:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  wsfHandlerId_t handlerId = wsfOs.task.numHandler++;
    fb44:	f882 1039 	strb.w	r1, [r2, #57]	; 0x39

  return handlerId;
}
    fb48:	4618      	mov	r0, r3
    fb4a:	4770      	bx	lr
    fb4c:	10004848 	.word	0x10004848

0000fb50 <WsfOsInit>:
*
*  \return None.
*/
/*************************************************************************************************/
void WsfOsInit(void)
{
    fb50:	b510      	push	{r4, lr}
  memset(&wsfOs, 0, sizeof(wsfOs));

  if( xRadioTaskEventObject == NULL)
    fb52:	4c06      	ldr	r4, [pc, #24]	; (fb6c <WsfOsInit+0x1c>)
  memset(&wsfOs, 0, sizeof(wsfOs));
    fb54:	4806      	ldr	r0, [pc, #24]	; (fb70 <WsfOsInit+0x20>)
    fb56:	223c      	movs	r2, #60	; 0x3c
    fb58:	2100      	movs	r1, #0
    fb5a:	f00c ffdd 	bl	1cb18 <memset>
  if( xRadioTaskEventObject == NULL)
    fb5e:	6823      	ldr	r3, [r4, #0]
    fb60:	b103      	cbz	r3, fb64 <WsfOsInit+0x14>
  {
    xRadioTaskEventObject = xEventGroupCreate();

    WSF_ASSERT(xRadioTaskEventObject != NULL);
  }
}
    fb62:	bd10      	pop	{r4, pc}
    xRadioTaskEventObject = xEventGroupCreate();
    fb64:	f00a fa56 	bl	1a014 <xEventGroupCreate>
    fb68:	6020      	str	r0, [r4, #0]
}
    fb6a:	bd10      	pop	{r4, pc}
    fb6c:	10004884 	.word	0x10004884
    fb70:	10004848 	.word	0x10004848

0000fb74 <wsfOsDispatcher>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void wsfOsDispatcher(void)
{
    fb74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fb78:	b084      	sub	sp, #16
    fb7a:	4d3f      	ldr	r5, [pc, #252]	; (fc78 <wsfOsDispatcher+0x104>)
  if (csNesting == 0)
    fb7c:	f8df 8104 	ldr.w	r8, [pc, #260]	; fc84 <wsfOsDispatcher+0x110>

  WSF_CS_INIT(cs);

  pTask = &wsfOs.task;

  WsfTimerUpdateTicks();
    fb80:	f000 f9fc 	bl	ff7c <WsfTimerUpdateTicks>
    WSF_CS_EXIT(cs);

    if (taskEventMask & WSF_MSG_QUEUE_EVENT)
    {
      /* handle msg queue */
      while ((pMsg = WsfMsgDeq(&pTask->msgQueue, &handlerId)) != NULL)
    fb84:	f105 0730 	add.w	r7, r5, #48	; 0x30
    pTask->taskEventMask = 0;
    fb88:	f04f 0900 	mov.w	r9, #0
    fb8c:	e00e      	b.n	fbac <wsfOsDispatcher+0x38>
    __asm volatile ("cpsid i");
    fb8e:	b672      	cpsid	i
  csNesting++;
    fb90:	f898 2000 	ldrb.w	r2, [r8]
    taskEventMask = pTask->taskEventMask;
    fb94:	f895 6038 	ldrb.w	r6, [r5, #56]	; 0x38
    pTask->taskEventMask = 0;
    fb98:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  if (csNesting == 0)
    fb9c:	b902      	cbnz	r2, fba0 <wsfOsDispatcher+0x2c>
    __asm volatile ("cpsie i");
    fb9e:	b662      	cpsie	i
    if (taskEventMask & WSF_MSG_QUEUE_EVENT)
    fba0:	07f1      	lsls	r1, r6, #31
    fba2:	d416      	bmi.n	fbd2 <wsfOsDispatcher+0x5e>
        (*pTask->handler[handlerId])(0, pMsg);
        WsfMsgFree(pMsg);
      }
    }

    if (taskEventMask & WSF_TIMER_EVENT)
    fba4:	07b2      	lsls	r2, r6, #30
    fba6:	d423      	bmi.n	fbf0 <wsfOsDispatcher+0x7c>
        WSF_ASSERT(pTimer->handlerId < WSF_MAX_HANDLERS);
        (*pTask->handler[pTimer->handlerId])(0, &pTimer->msg);
      }
    }

    if (taskEventMask & WSF_HANDLER_EVENT)
    fba8:	0773      	lsls	r3, r6, #29
    fbaa:	d42c      	bmi.n	fc06 <wsfOsDispatcher+0x92>
  while (pTask->taskEventMask)
    fbac:	f895 6038 	ldrb.w	r6, [r5, #56]	; 0x38
    fbb0:	2e00      	cmp	r6, #0
    fbb2:	d04c      	beq.n	fc4e <wsfOsDispatcher+0xda>
  if (csNesting == 0)
    fbb4:	f898 3000 	ldrb.w	r3, [r8]
    fbb8:	2b00      	cmp	r3, #0
    fbba:	d0e8      	beq.n	fb8e <wsfOsDispatcher+0x1a>
    pTask->taskEventMask = 0;
    fbbc:	f885 9038 	strb.w	r9, [r5, #56]	; 0x38
  if (csNesting == 0)
    fbc0:	e7ee      	b.n	fba0 <wsfOsDispatcher+0x2c>
        (*pTask->handler[handlerId])(0, pMsg);
    fbc2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    fbc6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    fbca:	4798      	blx	r3
        WsfMsgFree(pMsg);
    fbcc:	4620      	mov	r0, r4
    fbce:	f7ff fec3 	bl	f958 <WsfMsgFree>
      while ((pMsg = WsfMsgDeq(&pTask->msgQueue, &handlerId)) != NULL)
    fbd2:	f10d 010f 	add.w	r1, sp, #15
    fbd6:	4638      	mov	r0, r7
    fbd8:	f7ff feda 	bl	f990 <WsfMsgDeq>
    fbdc:	4604      	mov	r4, r0
        (*pTask->handler[handlerId])(0, pMsg);
    fbde:	4621      	mov	r1, r4
    fbe0:	2000      	movs	r0, #0
      while ((pMsg = WsfMsgDeq(&pTask->msgQueue, &handlerId)) != NULL)
    fbe2:	2c00      	cmp	r4, #0
    fbe4:	d1ed      	bne.n	fbc2 <wsfOsDispatcher+0x4e>
    fbe6:	e7dd      	b.n	fba4 <wsfOsDispatcher+0x30>
        (*pTask->handler[pTimer->handlerId])(0, &pTimer->msg);
    fbe8:	7b1b      	ldrb	r3, [r3, #12]
    fbea:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    fbee:	4798      	blx	r3
      while ((pTimer = WsfTimerServiceExpired(0)) != NULL)
    fbf0:	2000      	movs	r0, #0
    fbf2:	f000 f9ab 	bl	ff4c <WsfTimerServiceExpired>
    fbf6:	4603      	mov	r3, r0
        (*pTask->handler[pTimer->handlerId])(0, &pTimer->msg);
    fbf8:	f103 0108 	add.w	r1, r3, #8
    fbfc:	2000      	movs	r0, #0
      while ((pTimer = WsfTimerServiceExpired(0)) != NULL)
    fbfe:	2b00      	cmp	r3, #0
    fc00:	d1f2      	bne.n	fbe8 <wsfOsDispatcher+0x74>
    if (taskEventMask & WSF_HANDLER_EVENT)
    fc02:	0773      	lsls	r3, r6, #29
    fc04:	d5d2      	bpl.n	fbac <wsfOsDispatcher+0x38>
    fc06:	4c1d      	ldr	r4, [pc, #116]	; (fc7c <wsfOsDispatcher+0x108>)
      {
        if ((pTask->handlerEventMask[i] != 0) && (pTask->handler[i] != NULL))
        {
          WSF_CS_ENTER(cs);
          eventMask = pTask->handlerEventMask[i];
          pTask->handlerEventMask[i] = 0;
    fc08:	f04f 0900 	mov.w	r9, #0
    fc0c:	f1a4 0623 	sub.w	r6, r4, #35	; 0x23
    fc10:	f104 0a09 	add.w	sl, r4, #9
    fc14:	e00d      	b.n	fc32 <wsfOsDispatcher+0xbe>
    __asm volatile ("cpsid i");
    fc16:	b672      	cpsid	i
  csNesting++;
    fc18:	f898 2000 	ldrb.w	r2, [r8]
          eventMask = pTask->handlerEventMask[i];
    fc1c:	7820      	ldrb	r0, [r4, #0]
          pTask->handlerEventMask[i] = 0;
    fc1e:	7023      	strb	r3, [r4, #0]
  if (csNesting == 0)
    fc20:	b902      	cbnz	r2, fc24 <wsfOsDispatcher+0xb0>
    __asm volatile ("cpsie i");
    fc22:	b662      	cpsie	i
          WSF_CS_EXIT(cs);

          (*pTask->handler[i])(eventMask, NULL);
    fc24:	6833      	ldr	r3, [r6, #0]
    fc26:	2100      	movs	r1, #0
    fc28:	4798      	blx	r3
      for (i = 0; i < WSF_MAX_HANDLERS; i++)
    fc2a:	4554      	cmp	r4, sl
    fc2c:	f106 0604 	add.w	r6, r6, #4
    fc30:	d0aa      	beq.n	fb88 <wsfOsDispatcher+0x14>
        if ((pTask->handlerEventMask[i] != 0) && (pTask->handler[i] != NULL))
    fc32:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    fc36:	2800      	cmp	r0, #0
    fc38:	d0f7      	beq.n	fc2a <wsfOsDispatcher+0xb6>
    fc3a:	6833      	ldr	r3, [r6, #0]
    fc3c:	2b00      	cmp	r3, #0
    fc3e:	d0f4      	beq.n	fc2a <wsfOsDispatcher+0xb6>
  if (csNesting == 0)
    fc40:	f898 3000 	ldrb.w	r3, [r8]
    fc44:	2b00      	cmp	r3, #0
    fc46:	d0e6      	beq.n	fc16 <wsfOsDispatcher+0xa2>
          pTask->handlerEventMask[i] = 0;
    fc48:	f884 9000 	strb.w	r9, [r4]
  if (csNesting == 0)
    fc4c:	e7ea      	b.n	fc24 <wsfOsDispatcher+0xb0>
        }
      }
    }
  }

  WsfTimerUpdateTicks();
    fc4e:	f000 f995 	bl	ff7c <WsfTimerUpdateTicks>

  if (wsfOsReadyToSleep())
    fc52:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    fc56:	b113      	cbz	r3, fc5e <wsfOsDispatcher+0xea>
  {
    xEventGroupWaitBits(xRadioTaskEventObject, 1, pdTRUE,
                      pdFALSE, portMAX_DELAY);
  }

}
    fc58:	b004      	add	sp, #16
    fc5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    xEventGroupWaitBits(xRadioTaskEventObject, 1, pdTRUE,
    fc5e:	4808      	ldr	r0, [pc, #32]	; (fc80 <wsfOsDispatcher+0x10c>)
    fc60:	2201      	movs	r2, #1
    fc62:	f04f 31ff 	mov.w	r1, #4294967295
    fc66:	6800      	ldr	r0, [r0, #0]
    fc68:	9100      	str	r1, [sp, #0]
    fc6a:	4611      	mov	r1, r2
    fc6c:	f00a f9e0 	bl	1a030 <xEventGroupWaitBits>
}
    fc70:	b004      	add	sp, #16
    fc72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fc76:	bf00      	nop
    fc78:	10004848 	.word	0x10004848
    fc7c:	1000486b 	.word	0x1000486b
    fc80:	10004884 	.word	0x10004884
    fc84:	10004847 	.word	0x10004847

0000fc88 <WsfQueueEnq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueEnq(wsfQueue_t *pQueue, void *pElem)
{
    fc88:	b538      	push	{r3, r4, r5, lr}

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* initialize next pointer */
  WSF_QUEUE_NEXT(pElem) = NULL;
    fc8a:	2300      	movs	r3, #0
{
    fc8c:	4604      	mov	r4, r0
  WSF_QUEUE_NEXT(pElem) = NULL;
    fc8e:	600b      	str	r3, [r1, #0]
{
    fc90:	460d      	mov	r5, r1

  /* enter critical section */
  WSF_CS_ENTER(cs);
    fc92:	f7ff fe87 	bl	f9a4 <WsfCsEnter>

  /* if queue empty */
  if (pQueue->pHead == NULL)
    fc96:	6823      	ldr	r3, [r4, #0]
    fc98:	b133      	cbz	r3, fca8 <WsfQueueEnq+0x20>
    pQueue->pTail = pElem;
  }
  /* else enqueue element to the tail of queue */
  else
  {
    WSF_QUEUE_NEXT(pQueue->pTail) = pElem;
    fc9a:	6863      	ldr	r3, [r4, #4]
    fc9c:	601d      	str	r5, [r3, #0]
    pQueue->pTail = pElem;
    fc9e:	6065      	str	r5, [r4, #4]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
}
    fca0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WSF_CS_EXIT(cs);
    fca4:	f7ff be88 	b.w	f9b8 <WsfCsExit>
    pQueue->pTail = pElem;
    fca8:	e9c4 5500 	strd	r5, r5, [r4]
}
    fcac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WSF_CS_EXIT(cs);
    fcb0:	f7ff be82 	b.w	f9b8 <WsfCsExit>

0000fcb4 <WsfQueueDeq>:
 *
 *  \return Pointer to element that has been dequeued or NULL if queue is empty.
 */
/*************************************************************************************************/
void *WsfQueueDeq(wsfQueue_t *pQueue)
{
    fcb4:	b538      	push	{r3, r4, r5, lr}
    fcb6:	4604      	mov	r4, r0
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
    fcb8:	f7ff fe74 	bl	f9a4 <WsfCsEnter>

  pElem = pQueue->pHead;
    fcbc:	6825      	ldr	r5, [r4, #0]

  /* if queue is not empty */
  if (pElem != NULL)
    fcbe:	b115      	cbz	r5, fcc6 <WsfQueueDeq+0x12>
  {
    /* set head to next element in queue */
    pQueue->pHead = WSF_QUEUE_NEXT(pElem);
    fcc0:	682b      	ldr	r3, [r5, #0]
    fcc2:	6023      	str	r3, [r4, #0]

    /* check for empty queue */
    if (pQueue->pHead == NULL)
    fcc4:	b11b      	cbz	r3, fcce <WsfQueueDeq+0x1a>
      pQueue->pTail = NULL;
    }
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
    fcc6:	f7ff fe77 	bl	f9b8 <WsfCsExit>

  return pElem;
}
    fcca:	4628      	mov	r0, r5
    fccc:	bd38      	pop	{r3, r4, r5, pc}
      pQueue->pTail = NULL;
    fcce:	6063      	str	r3, [r4, #4]
  WSF_CS_EXIT(cs);
    fcd0:	f7ff fe72 	bl	f9b8 <WsfCsExit>
}
    fcd4:	4628      	mov	r0, r5
    fcd6:	bd38      	pop	{r3, r4, r5, pc}

0000fcd8 <WsfQueueInsert>:
 *                    Note:  set pPrev to NULL if pElem is first element in queue.
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueInsert(wsfQueue_t *pQueue, void *pElem, void *pPrev)
{
    fcd8:	b570      	push	{r4, r5, r6, lr}
    fcda:	4604      	mov	r4, r0
    fcdc:	460d      	mov	r5, r1
    fcde:	4616      	mov	r6, r2

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
    fce0:	f7ff fe60 	bl	f9a4 <WsfCsEnter>

  /* if queue empty or inserting at tail */
  if (pQueue->pHead == NULL || pPrev == pQueue->pTail)
    fce4:	6823      	ldr	r3, [r4, #0]
    fce6:	b153      	cbz	r3, fcfe <WsfQueueInsert+0x26>
    fce8:	6863      	ldr	r3, [r4, #4]
    fcea:	42b3      	cmp	r3, r6
    fcec:	d007      	beq.n	fcfe <WsfQueueInsert+0x26>
  {
    /* queue as normal */
    WsfQueueEnq(pQueue, pElem);
  }
  /* else if inserting at head */
  else if (pPrev == NULL)
    fcee:	b1ae      	cbz	r6, fd1c <WsfQueueInsert+0x44>
    WsfQueuePush(pQueue, pElem);
  }
  else
  {
    /* insert in middle of queue */
    WSF_QUEUE_NEXT(pElem) = WSF_QUEUE_NEXT(pPrev);
    fcf0:	6833      	ldr	r3, [r6, #0]
    fcf2:	602b      	str	r3, [r5, #0]
    WSF_QUEUE_NEXT(pPrev) = pElem;
    fcf4:	6035      	str	r5, [r6, #0]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
}
    fcf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  WSF_CS_EXIT(cs);
    fcfa:	f7ff be5d 	b.w	f9b8 <WsfCsExit>
  WSF_QUEUE_NEXT(pElem) = NULL;
    fcfe:	2300      	movs	r3, #0
    fd00:	602b      	str	r3, [r5, #0]
  WSF_CS_ENTER(cs);
    fd02:	f7ff fe4f 	bl	f9a4 <WsfCsEnter>
  if (pQueue->pHead == NULL)
    fd06:	6823      	ldr	r3, [r4, #0]
    fd08:	b17b      	cbz	r3, fd2a <WsfQueueInsert+0x52>
    WSF_QUEUE_NEXT(pQueue->pTail) = pElem;
    fd0a:	6863      	ldr	r3, [r4, #4]
    fd0c:	601d      	str	r5, [r3, #0]
    pQueue->pTail = pElem;
    fd0e:	6065      	str	r5, [r4, #4]
  WSF_CS_EXIT(cs);
    fd10:	f7ff fe52 	bl	f9b8 <WsfCsExit>
}
    fd14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  WSF_CS_EXIT(cs);
    fd18:	f7ff be4e 	b.w	f9b8 <WsfCsExit>
  WSF_CS_ENTER(cs);
    fd1c:	f7ff fe42 	bl	f9a4 <WsfCsEnter>
  WSF_QUEUE_NEXT(pElem) = pQueue->pHead;
    fd20:	6823      	ldr	r3, [r4, #0]
    fd22:	602b      	str	r3, [r5, #0]
  if (pQueue->pHead == NULL)
    fd24:	b123      	cbz	r3, fd30 <WsfQueueInsert+0x58>
  pQueue->pHead = pElem;
    fd26:	6025      	str	r5, [r4, #0]
    fd28:	e7f2      	b.n	fd10 <WsfQueueInsert+0x38>
    pQueue->pTail = pElem;
    fd2a:	e9c4 5500 	strd	r5, r5, [r4]
    fd2e:	e7ef      	b.n	fd10 <WsfQueueInsert+0x38>
    pQueue->pTail = pElem;
    fd30:	6065      	str	r5, [r4, #4]
    fd32:	e7f8      	b.n	fd26 <WsfQueueInsert+0x4e>

0000fd34 <WsfQueueRemove>:
 *                    Note:  set pPrev to NULL if pElem is first element in queue.
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueRemove(wsfQueue_t *pQueue, void *pElem, void *pPrev)
{
    fd34:	b570      	push	{r4, r5, r6, lr}
    fd36:	4605      	mov	r5, r0
    fd38:	460c      	mov	r4, r1
    fd3a:	4616      	mov	r6, r2
  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pQueue->pHead != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
    fd3c:	f7ff fe32 	bl	f9a4 <WsfCsEnter>

  /* if first element */
  if (pElem == pQueue->pHead)
    fd40:	682b      	ldr	r3, [r5, #0]
    fd42:	42a3      	cmp	r3, r4
    fd44:	d00a      	beq.n	fd5c <WsfQueueRemove+0x28>
  {
    /* remove from head of queue */
    pQueue->pHead = WSF_QUEUE_NEXT(pElem);
  }
  else if (pPrev)
    fd46:	b10e      	cbz	r6, fd4c <WsfQueueRemove+0x18>
  {
    /* remove from middle of queue, pPrev will never be null */
    WSF_QUEUE_NEXT(pPrev) = WSF_QUEUE_NEXT(pElem);
    fd48:	6823      	ldr	r3, [r4, #0]
    fd4a:	6033      	str	r3, [r6, #0]
  }

  /* if last element */
  if (pElem == pQueue->pTail)
    fd4c:	686b      	ldr	r3, [r5, #4]
    fd4e:	42a3      	cmp	r3, r4
  {
    /* update tail */
    pQueue->pTail = pPrev;
    fd50:	bf08      	it	eq
    fd52:	606e      	streq	r6, [r5, #4]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
}
    fd54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  WSF_CS_EXIT(cs);
    fd58:	f7ff be2e 	b.w	f9b8 <WsfCsExit>
    pQueue->pHead = WSF_QUEUE_NEXT(pElem);
    fd5c:	6823      	ldr	r3, [r4, #0]
    fd5e:	602b      	str	r3, [r5, #0]
    fd60:	e7f4      	b.n	fd4c <WsfQueueRemove+0x18>
    fd62:	bf00      	nop

0000fd64 <WsfQueueCount>:
 *
 *  \return Number of elements in queue.
 */
/*************************************************************************************************/
uint16_t WsfQueueCount(wsfQueue_t *pQueue)
{
    fd64:	b510      	push	{r4, lr}
    fd66:	4604      	mov	r4, r0
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
    fd68:	f7ff fe1c 	bl	f9a4 <WsfCsEnter>

  pElem = pQueue->pHead;
    fd6c:	6823      	ldr	r3, [r4, #0]

  /* iterate over queue */
  while (pElem != NULL)
    fd6e:	b14b      	cbz	r3, fd84 <WsfQueueCount+0x20>
  uint16_t        count = 0;
    fd70:	2400      	movs	r4, #0
  {
    count++;
    pElem = pElem->pNext;
    fd72:	681b      	ldr	r3, [r3, #0]
    count++;
    fd74:	3401      	adds	r4, #1
    fd76:	b2a4      	uxth	r4, r4
  while (pElem != NULL)
    fd78:	2b00      	cmp	r3, #0
    fd7a:	d1fa      	bne.n	fd72 <WsfQueueCount+0xe>
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
    fd7c:	f7ff fe1c 	bl	f9b8 <WsfCsExit>

  return count;
}
    fd80:	4620      	mov	r0, r4
    fd82:	bd10      	pop	{r4, pc}
  uint16_t        count = 0;
    fd84:	461c      	mov	r4, r3
  WSF_CS_EXIT(cs);
    fd86:	f7ff fe17 	bl	f9b8 <WsfCsExit>
}
    fd8a:	4620      	mov	r0, r4
    fd8c:	bd10      	pop	{r4, pc}
    fd8e:	bf00      	nop

0000fd90 <WsfQueueEmpty>:
 *
 *  \return TRUE if queue is empty, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t WsfQueueEmpty(wsfQueue_t *pQueue)
{
    fd90:	b510      	push	{r4, lr}
    fd92:	4604      	mov	r4, r0
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
    fd94:	f7ff fe06 	bl	f9a4 <WsfCsEnter>

  empty = (pQueue->pHead == NULL);
    fd98:	6824      	ldr	r4, [r4, #0]
    fd9a:	fab4 f484 	clz	r4, r4
    fd9e:	0964      	lsrs	r4, r4, #5

  /* exit critical section */
  WSF_CS_EXIT(cs);
    fda0:	f7ff fe0a 	bl	f9b8 <WsfCsExit>

  return empty;
}
    fda4:	4620      	mov	r0, r4
    fda6:	bd10      	pop	{r4, pc}

0000fda8 <WsfTimer_handler>:
  WsfTaskUnlock();
}

static void WsfTimer_handler(TimerHandle_t xTimer)
{
  WsfTaskSetReady(0, WSF_TIMER_EVENT);
    fda8:	2102      	movs	r1, #2
    fdaa:	2000      	movs	r0, #0
    fdac:	f7ff be78 	b.w	faa0 <WsfTaskSetReady>

0000fdb0 <WsfTimerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerInit(void)
{
    fdb0:	b510      	push	{r4, lr}
  WSF_QUEUE_INIT(&wsfTimerTimerQueue);

  if(xWsfTimer == NULL)
    fdb2:	4c0d      	ldr	r4, [pc, #52]	; (fde8 <WsfTimerInit+0x38>)
  WSF_QUEUE_INIT(&wsfTimerTimerQueue);
    fdb4:	4a0d      	ldr	r2, [pc, #52]	; (fdec <WsfTimerInit+0x3c>)
  if(xWsfTimer == NULL)
    fdb6:	6823      	ldr	r3, [r4, #0]
  WSF_QUEUE_INIT(&wsfTimerTimerQueue);
    fdb8:	2000      	movs	r0, #0
    fdba:	2100      	movs	r1, #0
    fdbc:	e9c2 0100 	strd	r0, r1, [r2]
{
    fdc0:	b082      	sub	sp, #8
  if(xWsfTimer == NULL)
    fdc2:	b10b      	cbz	r3, fdc8 <WsfTimerInit+0x18>
    xWsfTimer = xTimerCreate("WSF Timer", pdMS_TO_TICKS(WSF_MS_PER_TICK),
          pdFALSE, NULL, WsfTimer_handler);
    configASSERT(xWsfTimer);
    g_ui32LastTime = xTaskGetTickCount();
  }
}
    fdc4:	b002      	add	sp, #8
    fdc6:	bd10      	pop	{r4, pc}
    xWsfTimer = xTimerCreate("WSF Timer", pdMS_TO_TICKS(WSF_MS_PER_TICK),
    fdc8:	4a09      	ldr	r2, [pc, #36]	; (fdf0 <WsfTimerInit+0x40>)
    fdca:	9200      	str	r2, [sp, #0]
    fdcc:	4809      	ldr	r0, [pc, #36]	; (fdf4 <WsfTimerInit+0x44>)
    fdce:	461a      	mov	r2, r3
    fdd0:	210a      	movs	r1, #10
    fdd2:	f00b fe89 	bl	1bae8 <xTimerCreate>
    fdd6:	6020      	str	r0, [r4, #0]
    configASSERT(xWsfTimer);
    fdd8:	b120      	cbz	r0, fde4 <WsfTimerInit+0x34>
    g_ui32LastTime = xTaskGetTickCount();
    fdda:	f00b f965 	bl	1b0a8 <xTaskGetTickCount>
    fdde:	4b06      	ldr	r3, [pc, #24]	; (fdf8 <WsfTimerInit+0x48>)
    fde0:	6018      	str	r0, [r3, #0]
}
    fde2:	e7ef      	b.n	fdc4 <WsfTimerInit+0x14>
    configASSERT(xWsfTimer);
    fde4:	e7fe      	b.n	fde4 <WsfTimerInit+0x34>
    fde6:	bf00      	nop
    fde8:	10004898 	.word	0x10004898
    fdec:	10004890 	.word	0x10004890
    fdf0:	0000fda9 	.word	0x0000fda9
    fdf4:	0001f5b4 	.word	0x0001f5b4
    fdf8:	10004888 	.word	0x10004888

0000fdfc <WsfTimerStartSec>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStartSec(wsfTimer_t *pTimer, wsfTimerTicks_t sec)
{
    fdfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fdfe:	4606      	mov	r6, r0
  WSF_TRACE_INFO2("WsfTimerStartSec pTimer:0x%x ticks:%u", (uint32_t)pTimer, WSF_TIMER_SEC_TO_TICKS(sec));

  /* insert timer into queue */
  wsfTimerInsert(pTimer, WSF_TIMER_SEC_TO_TICKS(sec));
    fe00:	2564      	movs	r5, #100	; 0x64
    fe02:	fb01 f505 	mul.w	r5, r1, r5
  WsfTaskLock();
    fe06:	f7ff fde1 	bl	f9cc <WsfTaskLock>
  if (pTimer->isStarted)
    fe0a:	7b73      	ldrb	r3, [r6, #13]
    fe0c:	b9b3      	cbnz	r3, fe3c <WsfTimerStartSec+0x40>
  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
    fe0e:	4b1b      	ldr	r3, [pc, #108]	; (fe7c <WsfTimerStartSec+0x80>)
    fe10:	681b      	ldr	r3, [r3, #0]
  pTimer->ticks = ticks;
    fe12:	6075      	str	r5, [r6, #4]
  pTimer->isStarted = TRUE;
    fe14:	2201      	movs	r2, #1
    fe16:	7372      	strb	r2, [r6, #13]
  while (pElem != NULL)
    fe18:	b343      	cbz	r3, fe6c <WsfTimerStartSec+0x70>
    if (pElem == pTimer)
    fe1a:	2200      	movs	r2, #0
    fe1c:	e003      	b.n	fe26 <WsfTimerStartSec+0x2a>
    pElem = pElem->pNext;
    fe1e:	681c      	ldr	r4, [r3, #0]
  while (pElem != NULL)
    fe20:	461a      	mov	r2, r3
    fe22:	b11c      	cbz	r4, fe2c <WsfTimerStartSec+0x30>
    fe24:	4623      	mov	r3, r4
    if (pTimer->ticks < pElem->ticks)
    fe26:	685c      	ldr	r4, [r3, #4]
    fe28:	42a5      	cmp	r5, r4
    fe2a:	d2f8      	bcs.n	fe1e <WsfTimerStartSec+0x22>
  WsfQueueInsert(&wsfTimerTimerQueue, pTimer, pPrev);
    fe2c:	4631      	mov	r1, r6
    fe2e:	4813      	ldr	r0, [pc, #76]	; (fe7c <WsfTimerStartSec+0x80>)
    fe30:	f7ff ff52 	bl	fcd8 <WsfQueueInsert>
}
    fe34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  WsfTaskUnlock();
    fe38:	f7ff bdd2 	b.w	f9e0 <WsfTaskUnlock>
  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
    fe3c:	4f0f      	ldr	r7, [pc, #60]	; (fe7c <WsfTimerStartSec+0x80>)
    fe3e:	683b      	ldr	r3, [r7, #0]
  while (pElem != NULL)
    fe40:	b1b3      	cbz	r3, fe70 <WsfTimerStartSec+0x74>
    if (pElem == pTimer)
    fe42:	429e      	cmp	r6, r3
    fe44:	d00b      	beq.n	fe5e <WsfTimerStartSec+0x62>
    fe46:	461c      	mov	r4, r3
    fe48:	e001      	b.n	fe4e <WsfTimerStartSec+0x52>
    fe4a:	42a6      	cmp	r6, r4
    fe4c:	d008      	beq.n	fe60 <WsfTimerStartSec+0x64>
    pElem = pElem->pNext;
    fe4e:	4622      	mov	r2, r4
    fe50:	6824      	ldr	r4, [r4, #0]
  while (pElem != NULL)
    fe52:	2c00      	cmp	r4, #0
    fe54:	d1f9      	bne.n	fe4a <WsfTimerStartSec+0x4e>
  pTimer->isStarted = TRUE;
    fe56:	2201      	movs	r2, #1
    fe58:	7372      	strb	r2, [r6, #13]
  pTimer->ticks = ticks;
    fe5a:	6075      	str	r5, [r6, #4]
  while (pElem != NULL)
    fe5c:	e7dd      	b.n	fe1a <WsfTimerStartSec+0x1e>
  wsfTimer_t  *pPrev = NULL;
    fe5e:	2200      	movs	r2, #0
    WsfQueueRemove(&wsfTimerTimerQueue, pTimer, pPrev);
    fe60:	4806      	ldr	r0, [pc, #24]	; (fe7c <WsfTimerStartSec+0x80>)
    fe62:	4631      	mov	r1, r6
    fe64:	f7ff ff66 	bl	fd34 <WsfQueueRemove>
  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
    fe68:	683b      	ldr	r3, [r7, #0]
    fe6a:	e7d2      	b.n	fe12 <WsfTimerStartSec+0x16>
  wsfTimer_t  *pPrev = NULL;
    fe6c:	461a      	mov	r2, r3
    fe6e:	e7dd      	b.n	fe2c <WsfTimerStartSec+0x30>
  pTimer->isStarted = TRUE;
    fe70:	2201      	movs	r2, #1
    fe72:	7372      	strb	r2, [r6, #13]
  pTimer->ticks = ticks;
    fe74:	6075      	str	r5, [r6, #4]
  wsfTimer_t  *pPrev = NULL;
    fe76:	461a      	mov	r2, r3
    fe78:	e7d8      	b.n	fe2c <WsfTimerStartSec+0x30>
    fe7a:	bf00      	nop
    fe7c:	10004890 	.word	0x10004890

0000fe80 <WsfTimerStartMs>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStartMs(wsfTimer_t *pTimer, wsfTimerTicks_t ms)
{
    fe80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  WSF_TRACE_INFO2("WsfTimerStartMs pTimer:0x%x ticks:%u", (uint32_t)pTimer, WSF_TIMER_MS_TO_TICKS(ms));

  /* insert timer into queue */
  wsfTimerInsert(pTimer, WSF_TIMER_MS_TO_TICKS(ms));
    fe82:	4b1f      	ldr	r3, [pc, #124]	; (ff00 <WsfTimerStartMs+0x80>)
{
    fe84:	4606      	mov	r6, r0
  wsfTimerInsert(pTimer, WSF_TIMER_MS_TO_TICKS(ms));
    fe86:	fba3 3501 	umull	r3, r5, r3, r1
  WsfTaskLock();
    fe8a:	f7ff fd9f 	bl	f9cc <WsfTaskLock>
  if (pTimer->isStarted)
    fe8e:	7b73      	ldrb	r3, [r6, #13]
  wsfTimerInsert(pTimer, WSF_TIMER_MS_TO_TICKS(ms));
    fe90:	08ed      	lsrs	r5, r5, #3
  if (pTimer->isStarted)
    fe92:	b9b3      	cbnz	r3, fec2 <WsfTimerStartMs+0x42>
  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
    fe94:	4b1b      	ldr	r3, [pc, #108]	; (ff04 <WsfTimerStartMs+0x84>)
    fe96:	681b      	ldr	r3, [r3, #0]
  pTimer->ticks = ticks;
    fe98:	6075      	str	r5, [r6, #4]
  pTimer->isStarted = TRUE;
    fe9a:	2201      	movs	r2, #1
    fe9c:	7372      	strb	r2, [r6, #13]
  while (pElem != NULL)
    fe9e:	b343      	cbz	r3, fef2 <WsfTimerStartMs+0x72>
    if (pElem == pTimer)
    fea0:	2200      	movs	r2, #0
    fea2:	e003      	b.n	feac <WsfTimerStartMs+0x2c>
    pElem = pElem->pNext;
    fea4:	681c      	ldr	r4, [r3, #0]
  while (pElem != NULL)
    fea6:	461a      	mov	r2, r3
    fea8:	b11c      	cbz	r4, feb2 <WsfTimerStartMs+0x32>
    feaa:	4623      	mov	r3, r4
    if (pTimer->ticks < pElem->ticks)
    feac:	685c      	ldr	r4, [r3, #4]
    feae:	42a5      	cmp	r5, r4
    feb0:	d2f8      	bcs.n	fea4 <WsfTimerStartMs+0x24>
  WsfQueueInsert(&wsfTimerTimerQueue, pTimer, pPrev);
    feb2:	4631      	mov	r1, r6
    feb4:	4813      	ldr	r0, [pc, #76]	; (ff04 <WsfTimerStartMs+0x84>)
    feb6:	f7ff ff0f 	bl	fcd8 <WsfQueueInsert>
}
    feba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  WsfTaskUnlock();
    febe:	f7ff bd8f 	b.w	f9e0 <WsfTaskUnlock>
  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
    fec2:	4f10      	ldr	r7, [pc, #64]	; (ff04 <WsfTimerStartMs+0x84>)
    fec4:	683b      	ldr	r3, [r7, #0]
  while (pElem != NULL)
    fec6:	b1b3      	cbz	r3, fef6 <WsfTimerStartMs+0x76>
    if (pElem == pTimer)
    fec8:	429e      	cmp	r6, r3
    feca:	d00b      	beq.n	fee4 <WsfTimerStartMs+0x64>
    fecc:	461c      	mov	r4, r3
    fece:	e001      	b.n	fed4 <WsfTimerStartMs+0x54>
    fed0:	42a6      	cmp	r6, r4
    fed2:	d008      	beq.n	fee6 <WsfTimerStartMs+0x66>
    pElem = pElem->pNext;
    fed4:	4622      	mov	r2, r4
    fed6:	6824      	ldr	r4, [r4, #0]
  while (pElem != NULL)
    fed8:	2c00      	cmp	r4, #0
    feda:	d1f9      	bne.n	fed0 <WsfTimerStartMs+0x50>
  pTimer->isStarted = TRUE;
    fedc:	2201      	movs	r2, #1
    fede:	7372      	strb	r2, [r6, #13]
  pTimer->ticks = ticks;
    fee0:	6075      	str	r5, [r6, #4]
  while (pElem != NULL)
    fee2:	e7dd      	b.n	fea0 <WsfTimerStartMs+0x20>
  wsfTimer_t  *pPrev = NULL;
    fee4:	2200      	movs	r2, #0
    WsfQueueRemove(&wsfTimerTimerQueue, pTimer, pPrev);
    fee6:	4807      	ldr	r0, [pc, #28]	; (ff04 <WsfTimerStartMs+0x84>)
    fee8:	4631      	mov	r1, r6
    feea:	f7ff ff23 	bl	fd34 <WsfQueueRemove>
  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
    feee:	683b      	ldr	r3, [r7, #0]
    fef0:	e7d2      	b.n	fe98 <WsfTimerStartMs+0x18>
  wsfTimer_t  *pPrev = NULL;
    fef2:	461a      	mov	r2, r3
    fef4:	e7dd      	b.n	feb2 <WsfTimerStartMs+0x32>
  pTimer->isStarted = TRUE;
    fef6:	2201      	movs	r2, #1
    fef8:	7372      	strb	r2, [r6, #13]
  pTimer->ticks = ticks;
    fefa:	6075      	str	r5, [r6, #4]
  wsfTimer_t  *pPrev = NULL;
    fefc:	461a      	mov	r2, r3
    fefe:	e7d8      	b.n	feb2 <WsfTimerStartMs+0x32>
    ff00:	cccccccd 	.word	0xcccccccd
    ff04:	10004890 	.word	0x10004890

0000ff08 <WsfTimerStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStop(wsfTimer_t *pTimer)
{
    ff08:	b510      	push	{r4, lr}
    ff0a:	4604      	mov	r4, r0
  WSF_TRACE_INFO1("WsfTimerStop pTimer:0x%x", pTimer);

  /* task schedule lock */
  WsfTaskLock();
    ff0c:	f7ff fd5e 	bl	f9cc <WsfTaskLock>
  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
    ff10:	4b0d      	ldr	r3, [pc, #52]	; (ff48 <WsfTimerStop+0x40>)
    ff12:	681b      	ldr	r3, [r3, #0]
  while (pElem != NULL)
    ff14:	b143      	cbz	r3, ff28 <WsfTimerStop+0x20>
    if (pElem == pTimer)
    ff16:	429c      	cmp	r4, r3
    ff18:	d102      	bne.n	ff20 <WsfTimerStop+0x18>
    ff1a:	e009      	b.n	ff30 <WsfTimerStop+0x28>
    ff1c:	429c      	cmp	r4, r3
    ff1e:	d008      	beq.n	ff32 <WsfTimerStop+0x2a>
    pElem = pElem->pNext;
    ff20:	461a      	mov	r2, r3
    ff22:	681b      	ldr	r3, [r3, #0]
  while (pElem != NULL)
    ff24:	2b00      	cmp	r3, #0
    ff26:	d1f9      	bne.n	ff1c <WsfTimerStop+0x14>

  wsfTimerRemove(pTimer);

  /* task schedule unlock */
  WsfTaskUnlock();
}
    ff28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  WsfTaskUnlock();
    ff2c:	f7ff bd58 	b.w	f9e0 <WsfTaskUnlock>
  wsfTimer_t  *pPrev = NULL;
    ff30:	2200      	movs	r2, #0
    WsfQueueRemove(&wsfTimerTimerQueue, pTimer, pPrev);
    ff32:	4621      	mov	r1, r4
    ff34:	4804      	ldr	r0, [pc, #16]	; (ff48 <WsfTimerStop+0x40>)
    ff36:	f7ff fefd 	bl	fd34 <WsfQueueRemove>
    pTimer->isStarted = FALSE;
    ff3a:	2300      	movs	r3, #0
    ff3c:	7363      	strb	r3, [r4, #13]
}
    ff3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  WsfTaskUnlock();
    ff42:	f7ff bd4d 	b.w	f9e0 <WsfTaskUnlock>
    ff46:	bf00      	nop
    ff48:	10004890 	.word	0x10004890

0000ff4c <WsfTimerServiceExpired>:
 *
 *  \return Pointer to timer or NULL.
 */
/*************************************************************************************************/
wsfTimer_t *WsfTimerServiceExpired(wsfTaskId_t taskId)
{
    ff4c:	b538      	push	{r3, r4, r5, lr}

  /* Unused parameters */
  (void)taskId;

  /* task schedule lock */
  WsfTaskLock();
    ff4e:	f7ff fd3d 	bl	f9cc <WsfTaskLock>

  /* find expired timers in queue */
  if (((pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead) != NULL) &&
    ff52:	4809      	ldr	r0, [pc, #36]	; (ff78 <WsfTimerServiceExpired+0x2c>)
    ff54:	6804      	ldr	r4, [r0, #0]
    ff56:	b10c      	cbz	r4, ff5c <WsfTimerServiceExpired+0x10>
    ff58:	6865      	ldr	r5, [r4, #4]
    ff5a:	b125      	cbz	r5, ff66 <WsfTimerServiceExpired+0x1a>
  }

  /* task schedule unlock */
  WsfTaskUnlock();

  return NULL;
    ff5c:	2400      	movs	r4, #0
  WsfTaskUnlock();
    ff5e:	f7ff fd3f 	bl	f9e0 <WsfTaskUnlock>
}
    ff62:	4620      	mov	r0, r4
    ff64:	bd38      	pop	{r3, r4, r5, pc}
    WsfQueueRemove(&wsfTimerTimerQueue, pElem, pPrev);
    ff66:	462a      	mov	r2, r5
    ff68:	4621      	mov	r1, r4
    ff6a:	f7ff fee3 	bl	fd34 <WsfQueueRemove>
    pElem->isStarted = FALSE;
    ff6e:	7365      	strb	r5, [r4, #13]
    WsfTaskUnlock();
    ff70:	f7ff fd36 	bl	f9e0 <WsfTaskUnlock>
}
    ff74:	4620      	mov	r0, r4
    ff76:	bd38      	pop	{r3, r4, r5, pc}
    ff78:	10004890 	.word	0x10004890

0000ff7c <WsfTimerUpdateTicks>:
//
// Calculate the elapsed time, and update the WSF software timers.
//
//*****************************************************************************
void WsfTimerUpdateTicks(void)
{
    ff7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    //
    // Figure out how long it has been since the last time we've read the
    // continuous timer. We should be reading often enough that we'll never
    // have more than one overflow.
    //
    ui32ElapsedTime = ui32CurrentTime - g_ui32LastTime;
    ff80:	4f2c      	ldr	r7, [pc, #176]	; (10034 <WsfTimerUpdateTicks+0xb8>)
{
    ff82:	b083      	sub	sp, #12
    ui32CurrentTime = xTaskGetTickCount();
    ff84:	f00b f890 	bl	1b0a8 <xTaskGetTickCount>
    ui32ElapsedTime = ui32CurrentTime - g_ui32LastTime;
    ff88:	683b      	ldr	r3, [r7, #0]
    ff8a:	1ac3      	subs	r3, r0, r3

    //
    // Check to see if any WSF ticks need to happen.
    //
    if ( (ui32ElapsedTime / CLK_TICKS_PER_WSF_TICKS) > 0 )
    ff8c:	2b09      	cmp	r3, #9
    ff8e:	d821      	bhi.n	ffd4 <WsfTimerUpdateTicks+0x58>
  WsfTaskLock();
    ff90:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 10044 <WsfTimerUpdateTicks+0xc8>
    ff94:	f7ff fd1a 	bl	f9cc <WsfTaskLock>
  if (wsfTimerTimerQueue.pHead == NULL)
    ff98:	f8d8 3000 	ldr.w	r3, [r8]
    ff9c:	2b00      	cmp	r3, #0
    ff9e:	d039      	beq.n	10014 <WsfTimerUpdateTicks+0x98>
    ticks = ((wsfTimer_t *) wsfTimerTimerQueue.pHead)->ticks;
    ffa0:	685c      	ldr	r4, [r3, #4]
  WsfTaskUnlock();
    ffa2:	f7ff fd1d 	bl	f9e0 <WsfTaskUnlock>

    //
    // If there's a pending WSF timer event, set an interrupt to wake us up in
    // time to service it.
    //
    if ( xNextExpiration )
    ffa6:	b194      	cbz	r4, ffce <WsfTimerUpdateTicks+0x52>
    {
        configASSERT(pdPASS == xTimerChangePeriod( xWsfTimer,
    ffa8:	4b23      	ldr	r3, [pc, #140]	; (10038 <WsfTimerUpdateTicks+0xbc>)
    ffaa:	4924      	ldr	r1, [pc, #144]	; (1003c <WsfTimerUpdateTicks+0xc0>)
    ffac:	f242 7210 	movw	r2, #10000	; 0x2710
    ffb0:	fb04 f202 	mul.w	r2, r4, r2
    ffb4:	fba3 3202 	umull	r3, r2, r3, r2
    ffb8:	2364      	movs	r3, #100	; 0x64
    ffba:	6808      	ldr	r0, [r1, #0]
    ffbc:	9300      	str	r3, [sp, #0]
    ffbe:	0992      	lsrs	r2, r2, #6
    ffc0:	2300      	movs	r3, #0
    ffc2:	2104      	movs	r1, #4
    ffc4:	f00b fdd8 	bl	1bb78 <xTimerGenericCommand>
    ffc8:	2801      	cmp	r0, #1
    ffca:	d000      	beq.n	ffce <WsfTimerUpdateTicks+0x52>
    ffcc:	e7fe      	b.n	ffcc <WsfTimerUpdateTicks+0x50>
                pdMS_TO_TICKS(xNextExpiration*CLK_TICKS_PER_WSF_TICKS), 100)) ;
    }
}
    ffce:	b003      	add	sp, #12
    ffd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        WsfTimerUpdate(ui32ElapsedTime / CLK_TICKS_PER_WSF_TICKS);
    ffd4:	4d1a      	ldr	r5, [pc, #104]	; (10040 <WsfTimerUpdateTicks+0xc4>)
  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
    ffd6:	f8df 806c 	ldr.w	r8, [pc, #108]	; 10044 <WsfTimerUpdateTicks+0xc8>
        WsfTimerUpdate(ui32ElapsedTime / CLK_TICKS_PER_WSF_TICKS);
    ffda:	fba5 2303 	umull	r2, r3, r5, r3
    ffde:	4606      	mov	r6, r0
    ffe0:	08dd      	lsrs	r5, r3, #3
  WsfTaskLock();
    ffe2:	f7ff fcf3 	bl	f9cc <WsfTaskLock>
  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
    ffe6:	f8d8 4000 	ldr.w	r4, [r8]
  while (pElem != NULL)
    ffea:	b154      	cbz	r4, 10002 <WsfTimerUpdateTicks+0x86>
      pElem->ticks = 0;
    ffec:	f04f 0900 	mov.w	r9, #0
    if (pElem->ticks > ticks)
    fff0:	6863      	ldr	r3, [r4, #4]
    fff2:	429d      	cmp	r5, r3
      pElem->ticks -= ticks;
    fff4:	eba3 0205 	sub.w	r2, r3, r5
    if (pElem->ticks > ticks)
    fff8:	d211      	bcs.n	1001e <WsfTimerUpdateTicks+0xa2>
      pElem->ticks -= ticks;
    fffa:	6062      	str	r2, [r4, #4]
    pElem = pElem->pNext;
    fffc:	6824      	ldr	r4, [r4, #0]
  while (pElem != NULL)
    fffe:	2c00      	cmp	r4, #0
   10000:	d1f6      	bne.n	fff0 <WsfTimerUpdateTicks+0x74>
  WsfTaskUnlock();
   10002:	f7ff fced 	bl	f9e0 <WsfTaskUnlock>
        g_ui32LastTime = ui32CurrentTime;
   10006:	603e      	str	r6, [r7, #0]
  WsfTaskLock();
   10008:	f7ff fce0 	bl	f9cc <WsfTaskLock>
  if (wsfTimerTimerQueue.pHead == NULL)
   1000c:	f8d8 3000 	ldr.w	r3, [r8]
   10010:	2b00      	cmp	r3, #0
   10012:	d1c5      	bne.n	ffa0 <WsfTimerUpdateTicks+0x24>
}
   10014:	b003      	add	sp, #12
   10016:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  WsfTaskUnlock();
   1001a:	f7ff bce1 	b.w	f9e0 <WsfTaskUnlock>
      WsfTaskSetReady(pElem->handlerId, WSF_TIMER_EVENT);
   1001e:	7b20      	ldrb	r0, [r4, #12]
      pElem->ticks = 0;
   10020:	f8c4 9004 	str.w	r9, [r4, #4]
      WsfTaskSetReady(pElem->handlerId, WSF_TIMER_EVENT);
   10024:	2102      	movs	r1, #2
   10026:	f7ff fd3b 	bl	faa0 <WsfTaskSetReady>
    pElem = pElem->pNext;
   1002a:	6824      	ldr	r4, [r4, #0]
  while (pElem != NULL)
   1002c:	2c00      	cmp	r4, #0
   1002e:	d1df      	bne.n	fff0 <WsfTimerUpdateTicks+0x74>
   10030:	e7e7      	b.n	10002 <WsfTimerUpdateTicks+0x86>
   10032:	bf00      	nop
   10034:	10004888 	.word	0x10004888
   10038:	10624dd3 	.word	0x10624dd3
   1003c:	10004898 	.word	0x10004898
   10040:	cccccccd 	.word	0xcccccccd
   10044:	10004890 	.word	0x10004890

00010048 <WsfTrace>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTrace(const char *pStr, ...)
{
   10048:	b40f      	push	{r0, r1, r2, r3}
   1004a:	b500      	push	{lr}
   1004c:	b0c3      	sub	sp, #268	; 0x10c
   1004e:	aa44      	add	r2, sp, #272	; 0x110
  char pTraceMsg[AM_PRINTF_BUFSIZE];
  uint32_t ui32NumChars;
  va_list           args;

  va_start(args, pStr);
  am_util_stdio_vsprintf(pTraceMsg, pStr, args);
   10050:	a802      	add	r0, sp, #8
{
   10052:	f852 1b04 	ldr.w	r1, [r2], #4
  va_start(args, pStr);
   10056:	9201      	str	r2, [sp, #4]
  am_util_stdio_vsprintf(pTraceMsg, pStr, args);
   10058:	f00b ffce 	bl	1bff8 <am_util_stdio_vsprintf>
  //vprintf(pStr, args);
  va_end(args);
  ui32NumChars = am_util_debug_printf(pTraceMsg);
   1005c:	a802      	add	r0, sp, #8
   1005e:	f00c fc47 	bl	1c8f0 <am_util_stdio_printf>
  if (!(ui32NumChars < AM_PRINTF_BUFSIZE))
   10062:	28ff      	cmp	r0, #255	; 0xff
   10064:	d807      	bhi.n	10076 <WsfTrace+0x2e>
    WsfAssert(__FILE__, (uint16_t) __LINE__);
  am_util_debug_printf("\n");
   10066:	4806      	ldr	r0, [pc, #24]	; (10080 <WsfTrace+0x38>)
   10068:	f00c fc42 	bl	1c8f0 <am_util_stdio_printf>
}
   1006c:	b043      	add	sp, #268	; 0x10c
   1006e:	f85d eb04 	ldr.w	lr, [sp], #4
   10072:	b004      	add	sp, #16
   10074:	4770      	bx	lr
    WsfAssert(__FILE__, (uint16_t) __LINE__);
   10076:	4803      	ldr	r0, [pc, #12]	; (10084 <WsfTrace+0x3c>)
   10078:	2183      	movs	r1, #131	; 0x83
   1007a:	f7ff fb8f 	bl	f79c <WsfAssert>
   1007e:	e7f2      	b.n	10066 <WsfTrace+0x1e>
   10080:	0001f3a4 	.word	0x0001f3a4
   10084:	0001f5cc 	.word	0x0001f5cc

00010088 <AppDbInit>:
{
#ifdef AM_BLE_USE_NVM
    AppCopyRecListInNvm(pAppDbNewRec);
#endif
  return;
}
   10088:	4770      	bx	lr
   1008a:	bf00      	nop

0001008c <appUiTimerExpired>:
   1008c:	4770      	bx	lr
   1008e:	bf00      	nop

00010090 <appUiBtnPoll>:
 *  \return None.
 */
/*************************************************************************************************/
void appUiBtnPoll(void)
{
  if (appUiCbackTbl.btnPollCback)
   10090:	4b02      	ldr	r3, [pc, #8]	; (1009c <appUiBtnPoll+0xc>)
   10092:	689b      	ldr	r3, [r3, #8]
   10094:	b103      	cbz	r3, 10098 <appUiBtnPoll+0x8>
  {
    (*appUiCbackTbl.btnPollCback)();
   10096:	4718      	bx	r3
  }
}
   10098:	4770      	bx	lr
   1009a:	bf00      	nop
   1009c:	1000489c 	.word	0x1000489c

000100a0 <AppUiBtnPressed>:
 */
/*************************************************************************************************/
void AppUiBtnPressed(void)
{

}
   100a0:	4770      	bx	lr
   100a2:	bf00      	nop

000100a4 <AppUiBtnTest>:
 *  \return None.
 */
/*************************************************************************************************/
void AppUiBtnTest(uint8_t btn)
{
  if (appUiCbackTbl.btnCback)
   100a4:	4b02      	ldr	r3, [pc, #8]	; (100b0 <AppUiBtnTest+0xc>)
   100a6:	681b      	ldr	r3, [r3, #0]
   100a8:	b103      	cbz	r3, 100ac <AppUiBtnTest+0x8>
  {
    (*appUiCbackTbl.btnCback)(btn);
   100aa:	4718      	bx	r3
  }
}
   100ac:	4770      	bx	lr
   100ae:	bf00      	nop
   100b0:	1000489c 	.word	0x1000489c

000100b4 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   100b4:	4b0a      	ldr	r3, [pc, #40]	; (100e0 <prvTaskExitError+0x2c>)
   100b6:	681b      	ldr	r3, [r3, #0]
{
   100b8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
   100ba:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
   100bc:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
   100be:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
   100c0:	d000      	beq.n	100c4 <prvTaskExitError+0x10>
   100c2:	e7fe      	b.n	100c2 <prvTaskExitError+0xe>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
   100c4:	f04f 0380 	mov.w	r3, #128	; 0x80
   100c8:	f383 8811 	msr	BASEPRI, r3
   100cc:	f3bf 8f6f 	isb	sy
   100d0:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
   100d4:	9b01      	ldr	r3, [sp, #4]
   100d6:	2b00      	cmp	r3, #0
   100d8:	d0fc      	beq.n	100d4 <prvTaskExitError+0x20>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   100da:	b002      	add	sp, #8
   100dc:	4770      	bx	lr
   100de:	bf00      	nop
   100e0:	10002b08 	.word	0x10002b08

000100e4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
   100e4:	4808      	ldr	r0, [pc, #32]	; (10108 <prvPortStartFirstTask+0x24>)
   100e6:	6800      	ldr	r0, [r0, #0]
   100e8:	6800      	ldr	r0, [r0, #0]
   100ea:	f380 8808 	msr	MSP, r0
   100ee:	f04f 0000 	mov.w	r0, #0
   100f2:	f380 8814 	msr	CONTROL, r0
   100f6:	b662      	cpsie	i
   100f8:	b661      	cpsie	f
   100fa:	f3bf 8f4f 	dsb	sy
   100fe:	f3bf 8f6f 	isb	sy
   10102:	df00      	svc	0
   10104:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
   10106:	0000      	.short	0x0000
   10108:	e000ed08 	.word	0xe000ed08

0001010c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
   1010c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1011c <vPortEnableVFP+0x10>
   10110:	6801      	ldr	r1, [r0, #0]
   10112:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   10116:	6001      	str	r1, [r0, #0]
   10118:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
   1011a:	0000      	.short	0x0000
   1011c:	e000ed88 	.word	0xe000ed88

00010120 <pxPortInitialiseStack>:
{
   10120:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   10122:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   10126:	4c07      	ldr	r4, [pc, #28]	; (10144 <pxPortInitialiseStack+0x24>)
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   10128:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
   1012c:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
   10130:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   10134:	e940 4103 	strd	r4, r1, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
   10138:	e940 3209 	strd	r3, r2, [r0, #-36]	; 0x24
}
   1013c:	f85d 4b04 	ldr.w	r4, [sp], #4
   10140:	3844      	subs	r0, #68	; 0x44
   10142:	4770      	bx	lr
   10144:	000100b5 	.word	0x000100b5
	...

00010150 <SVC_Handler>:
	__asm volatile (
   10150:	4b07      	ldr	r3, [pc, #28]	; (10170 <pxCurrentTCBConst2>)
   10152:	6819      	ldr	r1, [r3, #0]
   10154:	6808      	ldr	r0, [r1, #0]
   10156:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1015a:	f380 8809 	msr	PSP, r0
   1015e:	f3bf 8f6f 	isb	sy
   10162:	f04f 0000 	mov.w	r0, #0
   10166:	f380 8811 	msr	BASEPRI, r0
   1016a:	4770      	bx	lr
   1016c:	f3af 8000 	nop.w

00010170 <pxCurrentTCBConst2>:
   10170:	10005a00 	.word	0x10005a00

00010174 <vPortEnterCritical>:
   10174:	f04f 0380 	mov.w	r3, #128	; 0x80
   10178:	f383 8811 	msr	BASEPRI, r3
   1017c:	f3bf 8f6f 	isb	sy
   10180:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
   10184:	4a07      	ldr	r2, [pc, #28]	; (101a4 <vPortEnterCritical+0x30>)
   10186:	6813      	ldr	r3, [r2, #0]
   10188:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
   1018a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
   1018c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
   1018e:	d000      	beq.n	10192 <vPortEnterCritical+0x1e>
}
   10190:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   10192:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   10196:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
   1019a:	b2db      	uxtb	r3, r3
   1019c:	2b00      	cmp	r3, #0
   1019e:	d0f7      	beq.n	10190 <vPortEnterCritical+0x1c>
   101a0:	e7fe      	b.n	101a0 <vPortEnterCritical+0x2c>
   101a2:	bf00      	nop
   101a4:	10002b08 	.word	0x10002b08

000101a8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
   101a8:	4a04      	ldr	r2, [pc, #16]	; (101bc <vPortExitCritical+0x14>)
   101aa:	6813      	ldr	r3, [r2, #0]
   101ac:	b12b      	cbz	r3, 101ba <vPortExitCritical+0x12>
	uxCriticalNesting--;
   101ae:	3b01      	subs	r3, #1
   101b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   101b2:	b90b      	cbnz	r3, 101b8 <vPortExitCritical+0x10>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
   101b4:	f383 8811 	msr	BASEPRI, r3
}
   101b8:	4770      	bx	lr
	configASSERT( uxCriticalNesting );
   101ba:	e7fe      	b.n	101ba <vPortExitCritical+0x12>
   101bc:	10002b08 	.word	0x10002b08

000101c0 <PendSV_Handler>:
	__asm volatile
   101c0:	f3ef 8009 	mrs	r0, PSP
   101c4:	f3bf 8f6f 	isb	sy
   101c8:	4b15      	ldr	r3, [pc, #84]	; (10220 <pxCurrentTCBConst>)
   101ca:	681a      	ldr	r2, [r3, #0]
   101cc:	f01e 0f10 	tst.w	lr, #16
   101d0:	bf08      	it	eq
   101d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
   101d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   101da:	6010      	str	r0, [r2, #0]
   101dc:	e92d 0009 	stmdb	sp!, {r0, r3}
   101e0:	f04f 0080 	mov.w	r0, #128	; 0x80
   101e4:	f380 8811 	msr	BASEPRI, r0
   101e8:	f3bf 8f4f 	dsb	sy
   101ec:	f3bf 8f6f 	isb	sy
   101f0:	f00b f908 	bl	1b404 <vTaskSwitchContext>
   101f4:	f04f 0000 	mov.w	r0, #0
   101f8:	f380 8811 	msr	BASEPRI, r0
   101fc:	bc09      	pop	{r0, r3}
   101fe:	6819      	ldr	r1, [r3, #0]
   10200:	6808      	ldr	r0, [r1, #0]
   10202:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10206:	f01e 0f10 	tst.w	lr, #16
   1020a:	bf08      	it	eq
   1020c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
   10210:	f380 8809 	msr	PSP, r0
   10214:	f3bf 8f6f 	isb	sy
   10218:	4770      	bx	lr
   1021a:	bf00      	nop
   1021c:	f3af 8000 	nop.w

00010220 <pxCurrentTCBConst>:
   10220:	10005a00 	.word	0x10005a00

00010224 <SysTick_Handler>:
{
   10224:	b508      	push	{r3, lr}
	__asm volatile
   10226:	f04f 0380 	mov.w	r3, #128	; 0x80
   1022a:	f383 8811 	msr	BASEPRI, r3
   1022e:	f3bf 8f6f 	isb	sy
   10232:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
   10236:	f00a ff4d 	bl	1b0d4 <xTaskIncrementTick>
   1023a:	b128      	cbz	r0, 10248 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   1023c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   10240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   10244:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
   10248:	2300      	movs	r3, #0
   1024a:	f383 8811 	msr	BASEPRI, r3
}
   1024e:	bd08      	pop	{r3, pc}

00010250 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
   10250:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
   10254:	2b0f      	cmp	r3, #15
   10256:	d906      	bls.n	10266 <vPortValidateInterruptPriority+0x16>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   10258:	4909      	ldr	r1, [pc, #36]	; (10280 <vPortValidateInterruptPriority+0x30>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   1025a:	4a0a      	ldr	r2, [pc, #40]	; (10284 <vPortValidateInterruptPriority+0x34>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   1025c:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   1025e:	7812      	ldrb	r2, [r2, #0]
   10260:	429a      	cmp	r2, r3
   10262:	d900      	bls.n	10266 <vPortValidateInterruptPriority+0x16>
   10264:	e7fe      	b.n	10264 <vPortValidateInterruptPriority+0x14>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
   10266:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1026a:	4a07      	ldr	r2, [pc, #28]	; (10288 <vPortValidateInterruptPriority+0x38>)
   1026c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
   10270:	6812      	ldr	r2, [r2, #0]
   10272:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   10276:	4293      	cmp	r3, r2
   10278:	d900      	bls.n	1027c <vPortValidateInterruptPriority+0x2c>
   1027a:	e7fe      	b.n	1027a <vPortValidateInterruptPriority+0x2a>
	}
   1027c:	4770      	bx	lr
   1027e:	bf00      	nop
   10280:	e000e3f0 	.word	0xe000e3f0
   10284:	100048b0 	.word	0x100048b0
   10288:	100048b4 	.word	0x100048b4

0001028c <vPortSuppressTicksAndSleep>:
 * resolution of the Tick timer.
 */
	static uint32_t xMaximumPossibleSuppressedTicks = 0;

void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
   1028c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint32_t New_Timer, Delta_Sleep;
	TickType_t xModifiableIdleTime;
    uint32_t elapsed_time;

	/* Make sure the SysTick reload value does not overflow the counter. */
	if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
   10290:	4b2c      	ldr	r3, [pc, #176]	; (10344 <vPortSuppressTicksAndSleep+0xb8>)


	/* Calculate the reload value required to wait xExpectedIdleTime
	tick periods.  -1 is used because this code will execute part way
	through one of the tick periods. */
	ulReloadValue =  ulTimerCountsForOneTick * ( xExpectedIdleTime - 1 );
   10292:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 1034c <vPortSuppressTicksAndSleep+0xc0>
	if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
   10296:	f8d3 a000 	ldr.w	sl, [r3]
	ulReloadValue =  ulTimerCountsForOneTick * ( xExpectedIdleTime - 1 );
   1029a:	f8d9 8000 	ldr.w	r8, [r9]
{
   1029e:	4605      	mov	r5, r0

	/* Enter a critical section but don't use the taskENTER_CRITICAL()
	method as that will mask interrupts that should exit sleep mode. */
	__asm volatile( "cpsid i" );
   102a0:	b672      	cpsid	i
	__asm volatile( "dsb" );
   102a2:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   102a6:	f3bf 8f6f 	isb	sy
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
    // Adjust for the time already elapsed
    uint32_t curTime = am_hal_stimer_counter_get();
   102aa:	f00e fe2b 	bl	1ef04 <am_hal_stimer_counter_get>
    gF_stimerGetHistory[gF_stimerGetHistoryCount][1] = curTime;
    gF_stimerGetHistory[gF_stimerGetHistoryCount][2] = AM_REGVAL(AM_REG_STIMER_COMPARE(0, 0));
    gF_stimerGetHistory[gF_stimerGetHistoryCount][3] = gF_stimerHistoryCount;
    gF_stimerGetHistoryCount++;
#endif
    elapsed_time = curTime - g_lastSTimerVal;
   102ae:	4f26      	ldr	r7, [pc, #152]	; (10348 <vPortSuppressTicksAndSleep+0xbc>)
    uint32_t curTime = am_hal_stimer_counter_get();
   102b0:	4604      	mov	r4, r0
    elapsed_time = curTime - g_lastSTimerVal;
   102b2:	683e      	ldr	r6, [r7, #0]


	/* If a context switch is pending or a task is waiting for the scheduler
	to be unsuspended then abandon the low power entry. */
    /* Abandon low power entry if the sleep time is too short */
	if( (eTaskConfirmSleepModeStatus() == eAbortSleep) || ((elapsed_time + ulTimerCountsForOneTick) > ulReloadValue) )
   102b4:	f00b fa4a 	bl	1b74c <eTaskConfirmSleepModeStatus>
   102b8:	b158      	cbz	r0, 102d2 <vPortSuppressTicksAndSleep+0x46>
   102ba:	4555      	cmp	r5, sl
   102bc:	f8d9 3000 	ldr.w	r3, [r9]
   102c0:	bf28      	it	cs
   102c2:	4655      	movcs	r5, sl
   102c4:	1b9b      	subs	r3, r3, r6
	ulReloadValue =  ulTimerCountsForOneTick * ( xExpectedIdleTime - 1 );
   102c6:	1e69      	subs	r1, r5, #1
	if( (eTaskConfirmSleepModeStatus() == eAbortSleep) || ((elapsed_time + ulTimerCountsForOneTick) > ulReloadValue) )
   102c8:	4423      	add	r3, r4
	ulReloadValue =  ulTimerCountsForOneTick * ( xExpectedIdleTime - 1 );
   102ca:	fb08 f801 	mul.w	r8, r8, r1
	if( (eTaskConfirmSleepModeStatus() == eAbortSleep) || ((elapsed_time + ulTimerCountsForOneTick) > ulReloadValue) )
   102ce:	4543      	cmp	r3, r8
   102d0:	d902      	bls.n	102d8 <vPortSuppressTicksAndSleep+0x4c>

        am_hal_ctimer_start(configCTIMER_NUM, AM_HAL_CTIMER_BOTH);
#endif
		/* Re-enable interrupts - see comments above the cpsid instruction()
		above. */
		__asm volatile( "cpsie i" );
   102d2:	b662      	cpsie	i

	}
}
   102d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ulReloadValue -= elapsed_time;
   102d8:	4446      	add	r6, r8
   102da:	1b34      	subs	r4, r6, r4
        am_hal_stimer_compare_delta_set(0, ulReloadValue);
   102dc:	4621      	mov	r1, r4
   102de:	2000      	movs	r0, #0
   102e0:	f00e fe20 	bl	1ef24 <am_hal_stimer_compare_delta_set>
        am_hal_stimer_compare_delta_set(1, ulReloadValue+1);
   102e4:	2001      	movs	r0, #1
   102e6:	1c61      	adds	r1, r4, #1
   102e8:	f00e fe1c 	bl	1ef24 <am_hal_stimer_compare_delta_set>
		configPRE_SLEEP_PROCESSING( xModifiableIdleTime );       // Turn OFF all Periphials in this function
   102ec:	4628      	mov	r0, r5
   102ee:	f003 fcab 	bl	13c48 <am_freertos_sleep>
		if( xModifiableIdleTime > 0 )
   102f2:	b120      	cbz	r0, 102fe <vPortSuppressTicksAndSleep+0x72>
			__asm volatile( "dsb" );
   102f4:	f3bf 8f4f 	dsb	sy
			__asm volatile( "wfi" );
   102f8:	bf30      	wfi
			__asm volatile( "isb" );
   102fa:	f3bf 8f6f 	isb	sy
		configPOST_SLEEP_PROCESSING( xExpectedIdleTime );       // Turn ON all Periphials in this function
   102fe:	4628      	mov	r0, r5
   10300:	f003 fca8 	bl	13c54 <am_freertos_wakeup>
        New_Timer = am_hal_stimer_counter_get();
   10304:	f00e fdfe 	bl	1ef04 <am_hal_stimer_counter_get>
        Delta_Sleep = (signed long) New_Timer - (signed long) g_lastSTimerVal;
   10308:	683b      	ldr	r3, [r7, #0]
        g_lastSTimerVal = New_Timer - Delta_Sleep%ulTimerCountsForOneTick;
   1030a:	f8d9 1000 	ldr.w	r1, [r9]
        Delta_Sleep = (signed long) New_Timer - (signed long) g_lastSTimerVal;
   1030e:	1ac3      	subs	r3, r0, r3
        g_lastSTimerVal = New_Timer - Delta_Sleep%ulTimerCountsForOneTick;
   10310:	fbb3 f2f1 	udiv	r2, r3, r1
   10314:	fb01 3312 	mls	r3, r1, r2, r3
   10318:	1ac3      	subs	r3, r0, r3
        vTaskStepTick( Delta_Sleep );
   1031a:	4610      	mov	r0, r2
        g_lastSTimerVal = New_Timer - Delta_Sleep%ulTimerCountsForOneTick;
   1031c:	603b      	str	r3, [r7, #0]
        vTaskStepTick( Delta_Sleep );
   1031e:	f00a fec9 	bl	1b0b4 <vTaskStepTick>
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA | AM_HAL_STIMER_INT_COMPAREB);
   10322:	2003      	movs	r0, #3
   10324:	f00e fe64 	bl	1eff0 <am_hal_stimer_int_clear>
        am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
   10328:	f8d9 1000 	ldr.w	r1, [r9]
   1032c:	2000      	movs	r0, #0
   1032e:	f00e fdf9 	bl	1ef24 <am_hal_stimer_compare_delta_set>
        am_hal_stimer_compare_delta_set(1, ulTimerCountsForOneTick+1);
   10332:	f8d9 1000 	ldr.w	r1, [r9]
   10336:	2001      	movs	r0, #1
   10338:	4401      	add	r1, r0
   1033a:	f00e fdf3 	bl	1ef24 <am_hal_stimer_compare_delta_set>
		__asm volatile( "cpsie i" );
   1033e:	b662      	cpsie	i
}
   10340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10344:	100048bc 	.word	0x100048bc
   10348:	100048ac 	.word	0x100048ac
   1034c:	100048b8 	.word	0x100048b8

00010350 <xPortStimerTickHandler>:
//
//
//*****************************************************************************
void
xPortStimerTickHandler(uint32_t delta)
{
   10350:	b570      	push	{r4, r5, r6, lr}

    curSTimer = am_hal_stimer_counter_get();
    //
    // Configure the STIMER->COMPARE_0
    //
    am_hal_stimer_compare_delta_set(0, (ulTimerCountsForOneTick-delta));
   10352:	4e1c      	ldr	r6, [pc, #112]	; (103c4 <xPortStimerTickHandler+0x74>)
{
   10354:	4604      	mov	r4, r0
    curSTimer = am_hal_stimer_counter_get();
   10356:	f00e fdd5 	bl	1ef04 <am_hal_stimer_counter_get>
    am_hal_stimer_compare_delta_set(0, (ulTimerCountsForOneTick-delta));
   1035a:	6831      	ldr	r1, [r6, #0]
    curSTimer = am_hal_stimer_counter_get();
   1035c:	4605      	mov	r5, r0
    am_hal_stimer_compare_delta_set(0, (ulTimerCountsForOneTick-delta));
   1035e:	1b09      	subs	r1, r1, r4
   10360:	2000      	movs	r0, #0
   10362:	f00e fddf 	bl	1ef24 <am_hal_stimer_compare_delta_set>
#ifdef AM_FREERTOS_STIMER_BACKUP
    am_hal_stimer_compare_delta_set(1, (ulTimerCountsForOneTick-delta+1));
   10366:	6831      	ldr	r1, [r6, #0]
   10368:	2001      	movs	r0, #1
   1036a:	4401      	add	r1, r0
   1036c:	1b09      	subs	r1, r1, r4
   1036e:	f00e fdd9 	bl	1ef24 <am_hal_stimer_compare_delta_set>
#endif

    timerCounts = curSTimer - g_lastSTimerVal;
   10372:	4915      	ldr	r1, [pc, #84]	; (103c8 <xPortStimerTickHandler+0x78>)
    numTicksElapsed = timerCounts/ulTimerCountsForOneTick;
   10374:	6832      	ldr	r2, [r6, #0]
    timerCounts = curSTimer - g_lastSTimerVal;
   10376:	680b      	ldr	r3, [r1, #0]
   10378:	1aeb      	subs	r3, r5, r3
    numTicksElapsed = timerCounts/ulTimerCountsForOneTick;
   1037a:	fbb3 f4f2 	udiv	r4, r3, r2
    remainder = timerCounts % ulTimerCountsForOneTick;
   1037e:	fb02 3014 	mls	r0, r2, r4, r3
    g_lastSTimerVal = curSTimer - remainder;
   10382:	1a2d      	subs	r5, r5, r0
   10384:	600d      	str	r5, [r1, #0]
	__asm volatile
   10386:	f3ef 8111 	mrs	r1, BASEPRI
   1038a:	f04f 0080 	mov.w	r0, #128	; 0x80
   1038e:	f380 8811 	msr	BASEPRI, r0
   10392:	f3bf 8f6f 	isb	sy
   10396:	f3bf 8f4f 	dsb	sy
        //
        // Increment RTOS tick
        // Allowing for need to increment the tick more than one... to avoid accumulation of
        // error in case of interrupt latencies
        //
        while (numTicksElapsed--)
   1039a:	429a      	cmp	r2, r3
   1039c:	d80e      	bhi.n	103bc <xPortStimerTickHandler+0x6c>
    BaseType_t ctxtSwitchReqd = pdFALSE;
   1039e:	2500      	movs	r5, #0
        {
            ctxtSwitchReqd = (( xTaskIncrementTick() != pdFALSE ) ? pdTRUE : ctxtSwitchReqd);
   103a0:	f00a fe98 	bl	1b0d4 <xTaskIncrementTick>
   103a4:	2800      	cmp	r0, #0
   103a6:	bf18      	it	ne
   103a8:	2501      	movne	r5, #1
        while (numTicksElapsed--)
   103aa:	3c01      	subs	r4, #1
   103ac:	d1f8      	bne.n	103a0 <xPortStimerTickHandler+0x50>
        }
        if ( ctxtSwitchReqd != pdFALSE )
   103ae:	b12d      	cbz	r5, 103bc <xPortStimerTickHandler+0x6c>
            //
            // A context switch is required.  Context switching is
            // performed in the PendSV interrupt. Pend the PendSV
            // interrupt.
            //
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   103b0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   103b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   103b8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
   103bc:	2300      	movs	r3, #0
   103be:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR(0);
}
   103c2:	bd70      	pop	{r4, r5, r6, pc}
   103c4:	100048b8 	.word	0x100048b8
   103c8:	100048ac 	.word	0x100048ac

000103cc <am_stimer_cmpr0_isr>:
// Interrupt handler for the STIMER module Compare 0.
//
//*****************************************************************************
void
am_stimer_cmpr0_isr(void)
{
   103cc:	b508      	push	{r3, lr}

    //
    // Check the timer interrupt status.
    //
    uint32_t ui32Status = am_hal_stimer_int_status_get(false);
   103ce:	2000      	movs	r0, #0
   103d0:	f00e fe14 	bl	1effc <am_hal_stimer_int_status_get>
    if (ui32Status & AM_HAL_STIMER_INT_COMPAREA)
   103d4:	07c3      	lsls	r3, r0, #31
   103d6:	d400      	bmi.n	103da <am_stimer_cmpr0_isr+0xe>
        //
        // Run handlers for the various possible timer events.
        //
        xPortStimerTickHandler(0);
    }
}
   103d8:	bd08      	pop	{r3, pc}
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
   103da:	2001      	movs	r0, #1
   103dc:	f00e fe08 	bl	1eff0 <am_hal_stimer_int_clear>
}
   103e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        xPortStimerTickHandler(0);
   103e4:	2000      	movs	r0, #0
   103e6:	f7ff bfb3 	b.w	10350 <xPortStimerTickHandler>
   103ea:	bf00      	nop

000103ec <am_stimer_cmpr1_isr>:
// Interrupt handler for the STIMER module Compare 0.
//
//*****************************************************************************
void
am_stimer_cmpr1_isr(void)
{
   103ec:	b508      	push	{r3, lr}

    //
    // Check the timer interrupt status.
    //
    uint32_t ui32Status = am_hal_stimer_int_status_get(false);
   103ee:	2000      	movs	r0, #0
   103f0:	f00e fe04 	bl	1effc <am_hal_stimer_int_status_get>
    if (ui32Status & AM_HAL_STIMER_INT_COMPAREB)
   103f4:	0783      	lsls	r3, r0, #30
   103f6:	d400      	bmi.n	103fa <am_stimer_cmpr1_isr+0xe>
        //
        // Run handlers for the various possible timer events.
        //
        xPortStimerTickHandler(1);
    }
}
   103f8:	bd08      	pop	{r3, pc}
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREB);
   103fa:	2002      	movs	r0, #2
   103fc:	f00e fdf8 	bl	1eff0 <am_hal_stimer_int_clear>
        gNumCmpB++;
   10400:	4a04      	ldr	r2, [pc, #16]	; (10414 <am_stimer_cmpr1_isr+0x28>)
   10402:	6813      	ldr	r3, [r2, #0]
        xPortStimerTickHandler(1);
   10404:	2001      	movs	r0, #1
        gNumCmpB++;
   10406:	4403      	add	r3, r0
   10408:	6013      	str	r3, [r2, #0]
}
   1040a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        xPortStimerTickHandler(1);
   1040e:	f7ff bf9f 	b.w	10350 <xPortStimerTickHandler>
   10412:	bf00      	nop
   10414:	100048a8 	.word	0x100048a8

00010418 <vPortSetupTimerInterrupt>:

#endif // AM_FREERTOS_USE_STIMER_FOR_TICK


void vPortSetupTimerInterrupt( void )
{
   10418:	b538      	push	{r3, r4, r5, lr}
    /* Calculate the constants required to configure the tick interrupt. */
    #if configUSE_TICKLESS_IDLE == 2
    {
        ulTimerCountsForOneTick = (configSTIMER_CLOCK_HZ /configTICK_RATE_HZ) ; //( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
#ifdef AM_FREERTOS_STIMER_BACKUP
        xMaximumPossibleSuppressedTicks = portMAX_32_BIT_NUMBER / ulTimerCountsForOneTick - 1;
   1041a:	4b18      	ldr	r3, [pc, #96]	; (1047c <vPortSetupTimerInterrupt+0x64>)
        ulTimerCountsForOneTick = (configSTIMER_CLOCK_HZ /configTICK_RATE_HZ) ; //( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
   1041c:	4d18      	ldr	r5, [pc, #96]	; (10480 <vPortSetupTimerInterrupt+0x68>)
        xMaximumPossibleSuppressedTicks = portMAX_32_BIT_NUMBER / ulTimerCountsForOneTick - 1;
   1041e:	4a19      	ldr	r2, [pc, #100]	; (10484 <vPortSetupTimerInterrupt+0x6c>)
   10420:	601a      	str	r2, [r3, #0]
        ulTimerCountsForOneTick = (configSTIMER_CLOCK_HZ /configTICK_RATE_HZ) ; //( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
   10422:	2120      	movs	r1, #32
    #endif /* configUSE_TICKLESS_IDLE */
    //
    //
    //
#ifdef AM_FREERTOS_STIMER_BACKUP
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_COMPAREA | AM_HAL_STIMER_INT_COMPAREB);
   10424:	2003      	movs	r0, #3
        ulTimerCountsForOneTick = (configSTIMER_CLOCK_HZ /configTICK_RATE_HZ) ; //( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
   10426:	6029      	str	r1, [r5, #0]
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_COMPAREA | AM_HAL_STIMER_INT_COMPAREB);
   10428:	f00e fdd8 	bl	1efdc <am_hal_stimer_int_enable>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1042c:	4b16      	ldr	r3, [pc, #88]	; (10488 <vPortSetupTimerInterrupt+0x70>)
   1042e:	22e0      	movs	r2, #224	; 0xe0
   10430:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10434:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   10438:	6019      	str	r1, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1043a:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1043e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   10442:	601a      	str	r2, [r3, #0]
#endif // AM_CMSIS_REGS
#endif
    //
    // Configure the STIMER
    //
    oldCfg = am_hal_stimer_config(AM_HAL_STIMER_CFG_FREEZE);
   10444:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   10448:	f00e fd52 	bl	1eef0 <am_hal_stimer_config>
   1044c:	4604      	mov	r4, r0
    g_lastSTimerVal = am_hal_stimer_counter_get();
   1044e:	f00e fd59 	bl	1ef04 <am_hal_stimer_counter_get>
   10452:	4b0e      	ldr	r3, [pc, #56]	; (1048c <vPortSetupTimerInterrupt+0x74>)
    am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
   10454:	6829      	ldr	r1, [r5, #0]
    g_lastSTimerVal = am_hal_stimer_counter_get();
   10456:	6018      	str	r0, [r3, #0]
    am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
   10458:	2000      	movs	r0, #0
   1045a:	f00e fd63 	bl	1ef24 <am_hal_stimer_compare_delta_set>
#ifdef AM_FREERTOS_STIMER_BACKUP
    am_hal_stimer_compare_delta_set(1, ulTimerCountsForOneTick+1);
   1045e:	6829      	ldr	r1, [r5, #0]
   10460:	2001      	movs	r0, #1
   10462:	4401      	add	r1, r0
   10464:	f00e fd5e 	bl	1ef24 <am_hal_stimer_compare_delta_set>
#if AM_CMSIS_REGS
    am_hal_stimer_config((oldCfg & ~(AM_HAL_STIMER_CFG_FREEZE | CTIMER_STCFG_CLKSEL_Msk)) | configSTIMER_CLOCK | AM_HAL_STIMER_CFG_COMPARE_A_ENABLE | AM_HAL_STIMER_CFG_COMPARE_B_ENABLE);
   10468:	4809      	ldr	r0, [pc, #36]	; (10490 <vPortSetupTimerInterrupt+0x78>)
   1046a:	4020      	ands	r0, r4
   1046c:	f440 7040 	orr.w	r0, r0, #768	; 0x300
    //
    am_hal_ctimer_start(configCTIMER_NUM, AM_HAL_CTIMER_BOTH);


#endif // AM_FREERTOS_USE_STIMER_FOR_TICK
}
   10470:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_stimer_config((oldCfg & ~(AM_HAL_STIMER_CFG_FREEZE | CTIMER_STCFG_CLKSEL_Msk)) | configSTIMER_CLOCK | AM_HAL_STIMER_CFG_COMPARE_A_ENABLE | AM_HAL_STIMER_CFG_COMPARE_B_ENABLE);
   10474:	f040 0003 	orr.w	r0, r0, #3
   10478:	f00e bd3a 	b.w	1eef0 <am_hal_stimer_config>
   1047c:	100048bc 	.word	0x100048bc
   10480:	100048b8 	.word	0x100048b8
   10484:	07fffffe 	.word	0x07fffffe
   10488:	e000e100 	.word	0xe000e100
   1048c:	100048ac 	.word	0x100048ac
   10490:	7ffffcf0 	.word	0x7ffffcf0

00010494 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
   10494:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   10498:	4a36      	ldr	r2, [pc, #216]	; (10574 <xPortStartScheduler+0xe0>)
   1049a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
   1049e:	4291      	cmp	r1, r2
   104a0:	d02b      	beq.n	104fa <xPortStartScheduler+0x66>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
   104a2:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
   104a6:	4b34      	ldr	r3, [pc, #208]	; (10578 <xPortStartScheduler+0xe4>)
   104a8:	429a      	cmp	r2, r3
   104aa:	d027      	beq.n	104fc <xPortStartScheduler+0x68>
{
   104ac:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   104ae:	4b33      	ldr	r3, [pc, #204]	; (1057c <xPortStartScheduler+0xe8>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   104b0:	4933      	ldr	r1, [pc, #204]	; (10580 <xPortStartScheduler+0xec>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   104b2:	781a      	ldrb	r2, [r3, #0]
{
   104b4:	b084      	sub	sp, #16
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   104b6:	b2d2      	uxtb	r2, r2
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
   104b8:	20ff      	movs	r0, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   104ba:	9202      	str	r2, [sp, #8]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
   104bc:	7018      	strb	r0, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
   104be:	781b      	ldrb	r3, [r3, #0]
   104c0:	b2db      	uxtb	r3, r3
   104c2:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   104c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   104ca:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   104ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   104d2:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   104d4:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   104d6:	d50f      	bpl.n	104f8 <xPortStartScheduler+0x64>
   104d8:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
   104da:	f89d 3007 	ldrb.w	r3, [sp, #7]
   104de:	005b      	lsls	r3, r3, #1
   104e0:	b2db      	uxtb	r3, r3
   104e2:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   104e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   104ea:	061b      	lsls	r3, r3, #24
   104ec:	4611      	mov	r1, r2
   104ee:	f102 32ff 	add.w	r2, r2, #4294967295
   104f2:	d4f2      	bmi.n	104da <xPortStartScheduler+0x46>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
   104f4:	2904      	cmp	r1, #4
   104f6:	d002      	beq.n	104fe <xPortStartScheduler+0x6a>
   104f8:	e7fe      	b.n	104f8 <xPortStartScheduler+0x64>
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
   104fa:	e7fe      	b.n	104fa <xPortStartScheduler+0x66>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
   104fc:	e7fe      	b.n	104fc <xPortStartScheduler+0x68>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   104fe:	9b02      	ldr	r3, [sp, #8]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   10500:	4920      	ldr	r1, [pc, #128]	; (10584 <xPortStartScheduler+0xf0>)
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   10502:	4a1e      	ldr	r2, [pc, #120]	; (1057c <xPortStartScheduler+0xe8>)
	uxCriticalNesting = 0;
   10504:	4d20      	ldr	r5, [pc, #128]	; (10588 <xPortStartScheduler+0xf4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   10506:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   1050a:	f44f 6080 	mov.w	r0, #1024	; 0x400
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   1050e:	b2db      	uxtb	r3, r3
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   10510:	6008      	str	r0, [r1, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   10512:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   10514:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
   10518:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
   1051c:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   10520:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
   10524:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
   10528:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	uxCriticalNesting = 0;
   1052c:	2600      	movs	r6, #0
	vPortSetupTimerInterrupt();
   1052e:	f7ff ff73 	bl	10418 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
   10532:	602e      	str	r6, [r5, #0]
	vPortEnableVFP();
   10534:	f7ff fdea 	bl	1010c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
   10538:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
   1053c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   10540:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
   10544:	f7ff fdce 	bl	100e4 <prvPortStartFirstTask>
	vTaskSwitchContext();
   10548:	f00a ff5c 	bl	1b404 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
   1054c:	682b      	ldr	r3, [r5, #0]
volatile uint32_t ulDummy = 0;
   1054e:	9603      	str	r6, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
   10550:	3301      	adds	r3, #1
   10552:	d000      	beq.n	10556 <xPortStartScheduler+0xc2>
   10554:	e7fe      	b.n	10554 <xPortStartScheduler+0xc0>
	__asm volatile
   10556:	f04f 0380 	mov.w	r3, #128	; 0x80
   1055a:	f383 8811 	msr	BASEPRI, r3
   1055e:	f3bf 8f6f 	isb	sy
   10562:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
   10566:	9b03      	ldr	r3, [sp, #12]
   10568:	2b00      	cmp	r3, #0
   1056a:	d0fc      	beq.n	10566 <xPortStartScheduler+0xd2>
}
   1056c:	2000      	movs	r0, #0
   1056e:	b004      	add	sp, #16
   10570:	bd70      	pop	{r4, r5, r6, pc}
   10572:	bf00      	nop
   10574:	410fc271 	.word	0x410fc271
   10578:	410fc270 	.word	0x410fc270
   1057c:	e000e400 	.word	0xe000e400
   10580:	100048b0 	.word	0x100048b0
   10584:	100048b4 	.word	0x100048b4
   10588:	10002b08 	.word	0x10002b08

0001058c <smprActSendSecurityReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActSendSecurityReq(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1058c:	b538      	push	{r3, r4, r5, lr}
   1058e:	4604      	mov	r4, r0
   10590:	460d      	mov	r5, r1
  uint8_t   *pPkt;
  uint8_t   *p;

  /* start smp response timer */
  smpStartRspTimer(pCcb);
   10592:	f000 fccf 	bl	10f34 <smpStartRspTimer>

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_SECURITY_REQ_LEN + L2C_PAYLOAD_START)) != NULL)
   10596:	200a      	movs	r0, #10
   10598:	f001 fe0e 	bl	121b8 <smpMsgAlloc>
   1059c:	b148      	cbz	r0, 105b2 <smprActSendSecurityReq+0x26>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, SMP_CMD_SECURITY_REQ);
   1059e:	230b      	movs	r3, #11
   105a0:	7203      	strb	r3, [r0, #8]
    UINT8_TO_BSTREAM(p, pMsg->dm.securityReq.auth);
   105a2:	792b      	ldrb	r3, [r5, #4]
   105a4:	7243      	strb	r3, [r0, #9]
   105a6:	4601      	mov	r1, r0

    /* send packet */
    smpSendPkt(pCcb, pPkt);
   105a8:	4620      	mov	r0, r4
  }
}
   105aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    smpSendPkt(pCcb, pPkt);
   105ae:	f001 bde3 	b.w	12178 <smpSendPkt>
}
   105b2:	bd38      	pop	{r3, r4, r5, pc}

000105b4 <smprActProcPairReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActProcPairReq(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   105b4:	b530      	push	{r4, r5, lr}
  dmSecPairIndEvt_t   pairInd;
  uint8_t             *p;

  /* allocate scratch buffer */
  if (pCcb->pScr == NULL)
   105b6:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
   105b8:	b083      	sub	sp, #12
   105ba:	4604      	mov	r4, r0
   105bc:	460d      	mov	r5, r1
  if (pCcb->pScr == NULL)
   105be:	b343      	cbz	r3, 10612 <smprActProcPairReq+0x5e>
    }
  }
  else
  {
    /* should not happen */
    SMP_TRACE_ERR0("pScr already allocated");
   105c0:	481c      	ldr	r0, [pc, #112]	; (10634 <smprActProcPairReq+0x80>)
   105c2:	f7ff fd41 	bl	10048 <WsfTrace>
  }

  /* set connection busy */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
   105c6:	2201      	movs	r2, #1
   105c8:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
   105cc:	4611      	mov	r1, r2
   105ce:	f009 f88d 	bl	196ec <DmConnSetIdle>

  p = pMsg->data.pPacket + L2C_PAYLOAD_START;
   105d2:	686b      	ldr	r3, [r5, #4]
  p++;    /* skip max key len */
  BSTREAM_TO_UINT8(pairInd.iKeyDist, p);
  BSTREAM_TO_UINT8(pairInd.rKeyDist, p);

  /* call app callback */
  pairInd.hdr.param = pCcb->connId;
   105d4:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  memcpy(pCcb->pairReq, p, SMP_PAIR_REQ_LEN);
   105d8:	6899      	ldr	r1, [r3, #8]
   105da:	6221      	str	r1, [r4, #32]
   105dc:	8999      	ldrh	r1, [r3, #12]
   105de:	7b98      	ldrb	r0, [r3, #14]
   105e0:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
   105e4:	84a1      	strh	r1, [r4, #36]	; 0x24
  BSTREAM_TO_UINT8(pairInd.auth, p);
   105e6:	7ad8      	ldrb	r0, [r3, #11]
  BSTREAM_TO_UINT8(pairInd.oob, p);
   105e8:	7a9d      	ldrb	r5, [r3, #10]
  BSTREAM_TO_UINT8(pairInd.iKeyDist, p);
   105ea:	7b5c      	ldrb	r4, [r3, #13]
  BSTREAM_TO_UINT8(pairInd.rKeyDist, p);
   105ec:	7b99      	ldrb	r1, [r3, #14]
  BSTREAM_TO_UINT8(pairInd.auth, p);
   105ee:	f88d 0004 	strb.w	r0, [sp, #4]
  pairInd.hdr.event = DM_SEC_PAIR_IND;
   105f2:	2331      	movs	r3, #49	; 0x31
  DmSmpCbackExec((dmEvt_t *) &pairInd);
   105f4:	4668      	mov	r0, sp
  BSTREAM_TO_UINT8(pairInd.oob, p);
   105f6:	f88d 5005 	strb.w	r5, [sp, #5]
  BSTREAM_TO_UINT8(pairInd.iKeyDist, p);
   105fa:	f88d 4006 	strb.w	r4, [sp, #6]
  BSTREAM_TO_UINT8(pairInd.rKeyDist, p);
   105fe:	f88d 1007 	strb.w	r1, [sp, #7]
  pairInd.hdr.param = pCcb->connId;
   10602:	f8ad 2000 	strh.w	r2, [sp]
  pairInd.hdr.event = DM_SEC_PAIR_IND;
   10606:	f88d 3002 	strb.w	r3, [sp, #2]
  DmSmpCbackExec((dmEvt_t *) &pairInd);
   1060a:	f009 fc93 	bl	19f34 <DmSmpCbackExec>
}
   1060e:	b003      	add	sp, #12
   10610:	bd30      	pop	{r4, r5, pc}
    if ((pCcb->pScr = WsfBufAlloc(sizeof(smpScratch_t))) == NULL)
   10612:	2040      	movs	r0, #64	; 0x40
   10614:	f7ff f938 	bl	f888 <WsfBufAlloc>
   10618:	6320      	str	r0, [r4, #48]	; 0x30
   1061a:	2800      	cmp	r0, #0
   1061c:	d1d3      	bne.n	105c6 <smprActProcPairReq+0x12>
      pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   1061e:	f640 0303 	movw	r3, #2051	; 0x803
      smpSmExecute(pCcb, pMsg);
   10622:	4629      	mov	r1, r5
   10624:	4620      	mov	r0, r4
      pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   10626:	806b      	strh	r3, [r5, #2]
}
   10628:	b003      	add	sp, #12
   1062a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      smpSmExecute(pCcb, pMsg);
   1062e:	f000 bfab 	b.w	11588 <smpSmExecute>
   10632:	bf00      	nop
   10634:	0001f614 	.word	0x0001f614

00010638 <smprActSendPairRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActSendPairRsp(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   10638:	b570      	push	{r4, r5, r6, lr}
  uint8_t   display;

  /* build packet to pairing response buffer in ccb */
  p = pCcb->pairRsp;
  UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_RSP);
  UINT8_TO_BSTREAM(p, pSmpCfg->ioCap);
   1063a:	4b26      	ldr	r3, [pc, #152]	; (106d4 <smprActSendPairRsp+0x9c>)
  UINT8_TO_BSTREAM(p, pSmpCfg->maxKeyLen);
  UINT8_TO_BSTREAM(p, pMsg->dm.pair.iKeyDist);
  UINT8_TO_BSTREAM(p, pMsg->dm.pair.rKeyDist);

  /* process pairing request and response data */
  if (smpCb.procPairing(pCcb, &oob, &display))
   1063c:	4e26      	ldr	r6, [pc, #152]	; (106d8 <smprActSendPairRsp+0xa0>)
  UINT8_TO_BSTREAM(p, pSmpCfg->ioCap);
   1063e:	681b      	ldr	r3, [r3, #0]
  UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_RSP);
   10640:	2202      	movs	r2, #2
   10642:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
  UINT8_TO_BSTREAM(p, pSmpCfg->ioCap);
   10646:	791a      	ldrb	r2, [r3, #4]
   10648:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
  UINT8_TO_BSTREAM(p, pMsg->dm.pair.oob);
   1064c:	790a      	ldrb	r2, [r1, #4]
   1064e:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
  UINT8_TO_BSTREAM(p, pMsg->dm.pair.auth);
   10652:	794a      	ldrb	r2, [r1, #5]
   10654:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
  UINT8_TO_BSTREAM(p, pSmpCfg->maxKeyLen);
   10658:	799b      	ldrb	r3, [r3, #6]
   1065a:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
  UINT8_TO_BSTREAM(p, pMsg->dm.pair.iKeyDist);
   1065e:	798b      	ldrb	r3, [r1, #6]
   10660:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  UINT8_TO_BSTREAM(p, pMsg->dm.pair.rKeyDist);
   10664:	79cb      	ldrb	r3, [r1, #7]
   10666:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
{
   1066a:	b082      	sub	sp, #8
   1066c:	460d      	mov	r5, r1
  if (smpCb.procPairing(pCcb, &oob, &display))
   1066e:	f8d6 30e4 	ldr.w	r3, [r6, #228]	; 0xe4
   10672:	f10d 0207 	add.w	r2, sp, #7
   10676:	f10d 0106 	add.w	r1, sp, #6
{
   1067a:	4604      	mov	r4, r0
  if (smpCb.procPairing(pCcb, &oob, &display))
   1067c:	4798      	blx	r3
   1067e:	b330      	cbz	r0, 106ce <smprActSendPairRsp+0x96>
  {
    /* set next expected packet */
    if ((pCcb->pairReq[SMP_AUTHREQ_POS] & pMsg->dm.pair.auth & SMP_AUTH_SC_FLAG) == SMP_AUTH_SC_FLAG)
   10680:	796a      	ldrb	r2, [r5, #5]
   10682:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   10686:	4013      	ands	r3, r2
    {
      pCcb->nextCmdCode = SMP_CMD_PUBLIC_KEY;
    }
    else
    {
      pCcb->nextCmdCode = SMP_CMD_PAIR_CNF;
   10688:	f013 0f08 	tst.w	r3, #8
   1068c:	bf14      	ite	ne
   1068e:	230c      	movne	r3, #12
   10690:	2303      	moveq	r3, #3
    }

    /* start smp response timer */
    smpStartRspTimer(pCcb);
   10692:	4620      	mov	r0, r4
   10694:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
   10698:	f000 fc4c 	bl	10f34 <smpStartRspTimer>

    /* send pairing response; allocate packet buffer */
    if ((pPkt = smpMsgAlloc(SMP_PAIR_RSP_LEN + L2C_PAYLOAD_START)) != NULL)
   1069c:	200f      	movs	r0, #15
   1069e:	f001 fd8b 	bl	121b8 <smpMsgAlloc>
   106a2:	4601      	mov	r1, r0
   106a4:	b158      	cbz	r0, 106be <smprActSendPairRsp+0x86>
    {
      /* build packet from pairing response buffer */
      memcpy(pPkt + L2C_PAYLOAD_START, pCcb->pairRsp, SMP_PAIR_RSP_LEN);
   106a6:	f8d4 3027 	ldr.w	r3, [r4, #39]	; 0x27
   106aa:	6083      	str	r3, [r0, #8]
   106ac:	f8b4 302b 	ldrh.w	r3, [r4, #43]	; 0x2b
   106b0:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   106b4:	7382      	strb	r2, [r0, #14]
   106b6:	8183      	strh	r3, [r0, #12]

      /* send packet */
      smpSendPkt(pCcb, pPkt);
   106b8:	4620      	mov	r0, r4
   106ba:	f001 fd5d 	bl	12178 <smpSendPkt>
    }

    /* request authentication data */
    smpCb.procAuthReq(pCcb, oob, display);
   106be:	f8d6 30e8 	ldr.w	r3, [r6, #232]	; 0xe8
   106c2:	f89d 2007 	ldrb.w	r2, [sp, #7]
   106c6:	f89d 1006 	ldrb.w	r1, [sp, #6]
   106ca:	4620      	mov	r0, r4
   106cc:	4798      	blx	r3
  }
}
   106ce:	b002      	add	sp, #8
   106d0:	bd70      	pop	{r4, r5, r6, pc}
   106d2:	bf00      	nop
   106d4:	10002b10 	.word	0x10002b10
   106d8:	10004918 	.word	0x10004918

000106dc <smprActProcPairCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActProcPairCnf(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   106dc:	b500      	push	{lr}
  uint8_t   *p;

  /* go to start of packet */
  p = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   106de:	684a      	ldr	r2, [r1, #4]

  /* store confirm value */
  memcpy(pCcb->pScr->buf.b3, p, SMP_CONFIRM_LEN);
   106e0:	6b03      	ldr	r3, [r0, #48]	; 0x30
   106e2:	f8d2 e009 	ldr.w	lr, [r2, #9]
   106e6:	f8d2 c00d 	ldr.w	ip, [r2, #13]
   106ea:	f8d2 1011 	ldr.w	r1, [r2, #17]
   106ee:	f8d2 2015 	ldr.w	r2, [r2, #21]
   106f2:	62da      	str	r2, [r3, #44]	; 0x2c
   106f4:	f8c3 e020 	str.w	lr, [r3, #32]

  /* discard any packets received erroneously at this point */
  pCcb->nextCmdCode = 0;
   106f8:	2200      	movs	r2, #0
  memcpy(pCcb->pScr->buf.b3, p, SMP_CONFIRM_LEN);
   106fa:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
   106fe:	6299      	str	r1, [r3, #40]	; 0x28
  pCcb->nextCmdCode = 0;
   10700:	f880 203f 	strb.w	r2, [r0, #63]	; 0x3f
}
   10704:	f85d fb04 	ldr.w	pc, [sp], #4

00010708 <smprActProcPairCnfCalc1>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActProcPairCnfCalc1(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   10708:	b510      	push	{r4, lr}
  p = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   1070a:	684a      	ldr	r2, [r1, #4]
  memcpy(pCcb->pScr->buf.b3, p, SMP_CONFIRM_LEN);
   1070c:	6b03      	ldr	r3, [r0, #48]	; 0x30
   1070e:	f8d2 1011 	ldr.w	r1, [r2, #17]
   10712:	f8d2 c009 	ldr.w	ip, [r2, #9]
{
   10716:	4604      	mov	r4, r0
  memcpy(pCcb->pScr->buf.b3, p, SMP_CONFIRM_LEN);
   10718:	f8d2 000d 	ldr.w	r0, [r2, #13]
   1071c:	f8d2 2015 	ldr.w	r2, [r2, #21]
   10720:	62da      	str	r2, [r3, #44]	; 0x2c
   10722:	6299      	str	r1, [r3, #40]	; 0x28
   10724:	f8c3 c020 	str.w	ip, [r3, #32]
   10728:	6258      	str	r0, [r3, #36]	; 0x24
  smprActProcPairCnf(pCcb, pMsg);

  /* get random number to scratchpad */
  SecRand(pCcb->pScr->buf.b4, SMP_RAND_LEN);
   1072a:	6b20      	ldr	r0, [r4, #48]	; 0x30
  pCcb->nextCmdCode = 0;
   1072c:	2300      	movs	r3, #0
  SecRand(pCcb->pScr->buf.b4, SMP_RAND_LEN);
   1072e:	2110      	movs	r1, #16
   10730:	3030      	adds	r0, #48	; 0x30
  pCcb->nextCmdCode = 0;
   10732:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  SecRand(pCcb->pScr->buf.b4, SMP_RAND_LEN);
   10736:	f005 fd47 	bl	161c8 <SecRand>

  /* execute calculation */
  smpCalcC1Part1(pCcb, pCcb->pScr->buf.b1, pCcb->pScr->buf.b4);
   1073a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1073c:	4620      	mov	r0, r4
   1073e:	f101 0230 	add.w	r2, r1, #48	; 0x30
}
   10742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  smpCalcC1Part1(pCcb, pCcb->pScr->buf.b1, pCcb->pScr->buf.b4);
   10746:	f001 bb2b 	b.w	11da0 <smpCalcC1Part1>
   1074a:	bf00      	nop

0001074c <smprActCnfVerify>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActCnfVerify(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1074c:	b570      	push	{r4, r5, r6, lr}
  /* compare calculated confirm value with value received earlier */
  if (memcmp(pMsg->aes.pCiphertext, pCcb->pScr->buf.b3, SMP_CONFIRM_LEN) != 0)
   1074e:	6b06      	ldr	r6, [r0, #48]	; 0x30
{
   10750:	460d      	mov	r5, r1
   10752:	4604      	mov	r4, r0
  if (memcmp(pMsg->aes.pCiphertext, pCcb->pScr->buf.b3, SMP_CONFIRM_LEN) != 0)
   10754:	2210      	movs	r2, #16
   10756:	6868      	ldr	r0, [r5, #4]
   10758:	f106 0120 	add.w	r1, r6, #32
   1075c:	f00c f9aa 	bl	1cab4 <memcmp>
   10760:	b948      	cbnz	r0, 10776 <smprActCnfVerify+0x2a>
    smpSmExecute(pCcb, pMsg);
    return;
  }

  /* do STK calculation: key, responder rand, initiator rand */
  smpCalcS1(pCcb, pCcb->pScr->buf.b1, pCcb->pScr->buf.b4, pCcb->pScr->buf.b2);
   10762:	f106 0310 	add.w	r3, r6, #16
   10766:	f106 0230 	add.w	r2, r6, #48	; 0x30
   1076a:	4631      	mov	r1, r6
   1076c:	4620      	mov	r0, r4
}
   1076e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  smpCalcS1(pCcb, pCcb->pScr->buf.b1, pCcb->pScr->buf.b4, pCcb->pScr->buf.b2);
   10772:	f001 bca7 	b.w	120c4 <smpCalcS1>
    pCcb->attempts++;
   10776:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    SmpDbPairingFailed(pCcb->connId);
   1077a:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    pCcb->attempts++;
   1077e:	3301      	adds	r3, #1
   10780:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    SmpDbPairingFailed(pCcb->connId);
   10784:	f001 f8ea 	bl	1195c <SmpDbPairingFailed>
    if (pCcb->attempts == pSmpCfg->maxAttempts)
   10788:	4a08      	ldr	r2, [pc, #32]	; (107ac <smprActCnfVerify+0x60>)
    pMsg->hdr.status = SMP_ERR_CONFIRM_VALUE;
   1078a:	2304      	movs	r3, #4
    if (pCcb->attempts == pSmpCfg->maxAttempts)
   1078c:	6812      	ldr	r2, [r2, #0]
    pMsg->hdr.status = SMP_ERR_CONFIRM_VALUE;
   1078e:	70eb      	strb	r3, [r5, #3]
    if (pCcb->attempts == pSmpCfg->maxAttempts)
   10790:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   10794:	79d2      	ldrb	r2, [r2, #7]
      pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   10796:	4293      	cmp	r3, r2
   10798:	bf0c      	ite	eq
   1079a:	230d      	moveq	r3, #13
   1079c:	2303      	movne	r3, #3
    smpSmExecute(pCcb, pMsg);
   1079e:	4629      	mov	r1, r5
   107a0:	70ab      	strb	r3, [r5, #2]
   107a2:	4620      	mov	r0, r4
}
   107a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    smpSmExecute(pCcb, pMsg);
   107a8:	f000 beee 	b.w	11588 <smpSmExecute>
   107ac:	10002b10 	.word	0x10002b10

000107b0 <smprActSendPairRandom>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActSendPairRandom(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   107b0:	b538      	push	{r3, r4, r5, lr}
  uint8_t   *pPkt;
  uint8_t   *p;
  uint8_t   encKeyLen;

  /* get max STK length */
  encKeyLen = (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
   107b2:	f890 502b 	ldrb.w	r5, [r0, #43]	; 0x2b
   107b6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
               pCcb->pairReq[SMP_MAXKEY_POS] : pCcb->pairRsp[SMP_MAXKEY_POS];

  /* store STK and adjust based on max key length */
  memcpy(pCcb->pScr->buf.b3, pMsg->aes.pCiphertext, encKeyLen);
   107ba:	6849      	ldr	r1, [r1, #4]
  encKeyLen = (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
   107bc:	429d      	cmp	r5, r3
{
   107be:	4604      	mov	r4, r0
  memcpy(pCcb->pScr->buf.b3, pMsg->aes.pCiphertext, encKeyLen);
   107c0:	6b00      	ldr	r0, [r0, #48]	; 0x30
  encKeyLen = (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
   107c2:	bf28      	it	cs
   107c4:	461d      	movcs	r5, r3
  memcpy(pCcb->pScr->buf.b3, pMsg->aes.pCiphertext, encKeyLen);
   107c6:	462a      	mov	r2, r5
   107c8:	3020      	adds	r0, #32
   107ca:	f7fb fc99 	bl	c100 <memcpy>
  memset((pCcb->pScr->buf.b3 + encKeyLen), 0, (SMP_KEY_LEN - encKeyLen));
   107ce:	6b20      	ldr	r0, [r4, #48]	; 0x30
   107d0:	3020      	adds	r0, #32
   107d2:	f1c5 0210 	rsb	r2, r5, #16
   107d6:	2100      	movs	r1, #0
   107d8:	4428      	add	r0, r5
   107da:	f00c f99d 	bl	1cb18 <memset>

  /* start smp response timer */
  smpStartRspTimer(pCcb);
   107de:	4620      	mov	r0, r4
   107e0:	f000 fba8 	bl	10f34 <smpStartRspTimer>

  /* allocate packet buffer and send pairing random packet */
  if ((pPkt = smpMsgAlloc(SMP_PAIR_RAND_LEN + L2C_PAYLOAD_START)) != NULL)
   107e4:	2019      	movs	r0, #25
   107e6:	f001 fce7 	bl	121b8 <smpMsgAlloc>
   107ea:	b1a0      	cbz	r0, 10816 <smprActSendPairRandom+0x66>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_RAND);
   107ec:	2304      	movs	r3, #4
   107ee:	7203      	strb	r3, [r0, #8]
    memcpy(p, pCcb->pScr->buf.b4, SMP_RAND_LEN);
   107f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   107f2:	4601      	mov	r1, r0
   107f4:	6b1d      	ldr	r5, [r3, #48]	; 0x30
   107f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38

    /* send packet */
    smpSendPkt(pCcb, pPkt);
   107f8:	4620      	mov	r0, r4
    memcpy(p, pCcb->pScr->buf.b4, SMP_RAND_LEN);
   107fa:	6b5c      	ldr	r4, [r3, #52]	; 0x34
   107fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   107fe:	f8c1 3015 	str.w	r3, [r1, #21]
   10802:	f8c1 5009 	str.w	r5, [r1, #9]
   10806:	f8c1 400d 	str.w	r4, [r1, #13]
   1080a:	f8c1 2011 	str.w	r2, [r1, #17]
  }
}
   1080e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    smpSendPkt(pCcb, pPkt);
   10812:	f001 bcb1 	b.w	12178 <smpSendPkt>
}
   10816:	bd38      	pop	{r3, r4, r5, pc}

00010818 <smprActSetupKeyDist>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActSetupKeyDist(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   10818:	b570      	push	{r4, r5, r6, lr}
  /* don't receive anything yet */
  pCcb->nextCmdCode = 0;
   1081a:	2300      	movs	r3, #0
{
   1081c:	4604      	mov	r4, r0
  pCcb->nextCmdCode = 0;
   1081e:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
{
   10822:	460d      	mov	r5, r1

  /* start smp response timer once for entire key distribution phase */
  smpStartRspTimer(pCcb);
   10824:	f000 fb86 	bl	10f34 <smpStartRspTimer>

  /* initialize parameters in key ind struct */
  pCcb->pScr->keyInd.hdr.param = pCcb->connId;
   10828:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1082a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
   1082e:	801a      	strh	r2, [r3, #0]
  pCcb->pScr->keyInd.secLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ?
   10830:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   10834:	f012 0f04 	tst.w	r2, #4
   10838:	bf14      	ite	ne
   1083a:	2202      	movne	r2, #2
   1083c:	2201      	moveq	r2, #1
   1083e:	77da      	strb	r2, [r3, #31]
                                DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
  pCcb->pScr->keyInd.encKeyLen =
    (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
     pCcb->pairReq[SMP_MAXKEY_POS] : pCcb->pairRsp[SMP_MAXKEY_POS];
   10840:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
   10844:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
   10848:	428a      	cmp	r2, r1
   1084a:	bf28      	it	cs
   1084c:	460a      	movcs	r2, r1
  pCcb->pScr->keyInd.encKeyLen =
   1084e:	f883 2020 	strb.w	r2, [r3, #32]

  /* get responder key distribution */
  keyDist = pCcb->pairReq[SMP_RKEYDIST_POS] & pCcb->pairRsp[SMP_RKEYDIST_POS];

  /* send next key; if done sending keys set up to receive keys */
  if ((pCcb->nextCmdCode == 0) && smpSendKey(pCcb, keyDist))
   10852:	f894 603f 	ldrb.w	r6, [r4, #63]	; 0x3f
   10856:	b106      	cbz	r6, 1085a <smprActSetupKeyDist+0x42>
}
   10858:	bd70      	pop	{r4, r5, r6, pc}
  keyDist = pCcb->pairReq[SMP_RKEYDIST_POS] & pCcb->pairRsp[SMP_RKEYDIST_POS];
   1085a:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
   1085e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
  if ((pCcb->nextCmdCode == 0) && smpSendKey(pCcb, keyDist))
   10862:	4620      	mov	r0, r4
   10864:	4019      	ands	r1, r3
   10866:	f000 fc83 	bl	11170 <smpSendKey>
   1086a:	2800      	cmp	r0, #0
   1086c:	d0f4      	beq.n	10858 <smprActSetupKeyDist+0x40>
  {
    pCcb->nextCmdCode = 0;

    /* get initiator key distribution */
    keyDist = pCcb->pairReq[SMP_IKEYDIST_POS] & pCcb->pairRsp[SMP_IKEYDIST_POS];
   1086e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   10872:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    pCcb->nextCmdCode = 0;
   10876:	f884 603f 	strb.w	r6, [r4, #63]	; 0x3f
    keyDist = pCcb->pairReq[SMP_IKEYDIST_POS] & pCcb->pairRsp[SMP_IKEYDIST_POS];
   1087a:	4013      	ands	r3, r2

    /* set up to receive first key distribution packet */
    if (keyDist & SMP_KEY_DIST_ENC)
   1087c:	07d8      	lsls	r0, r3, #31
   1087e:	d514      	bpl.n	108aa <smprActSetupKeyDist+0x92>
    {
      if (smpCb.lescSupported && pCcb->pScCcb->lescEnabled)
   10880:	4a10      	ldr	r2, [pc, #64]	; (108c4 <smprActSetupKeyDist+0xac>)
   10882:	f892 20ec 	ldrb.w	r2, [r2, #236]	; 0xec
   10886:	b162      	cbz	r2, 108a2 <smprActSetupKeyDist+0x8a>
   10888:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1088a:	7812      	ldrb	r2, [r2, #0]
   1088c:	b14a      	cbz	r2, 108a2 <smprActSetupKeyDist+0x8a>
      {
        if (keyDist & SMP_KEY_DIST_ID)
   1088e:	0799      	lsls	r1, r3, #30
   10890:	d413      	bmi.n	108ba <smprActSetupKeyDist+0xa2>
    }

    if (pCcb->nextCmdCode == 0)
    {
      /* no keys to receive; send ourselves pairing complete msg */
      pMsg->hdr.event = SMP_MSG_INT_PAIRING_CMPL;
   10892:	230e      	movs	r3, #14
   10894:	70ab      	strb	r3, [r5, #2]
      smpSmExecute(pCcb, pMsg);
   10896:	4629      	mov	r1, r5
   10898:	4620      	mov	r0, r4
}
   1089a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      smpSmExecute(pCcb, pMsg);
   1089e:	f000 be73 	b.w	11588 <smpSmExecute>
        pCcb->nextCmdCode = SMP_CMD_ENC_INFO;
   108a2:	2306      	movs	r3, #6
   108a4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
}
   108a8:	bd70      	pop	{r4, r5, r6, pc}
    else if (keyDist & SMP_KEY_DIST_ID)
   108aa:	079a      	lsls	r2, r3, #30
   108ac:	d405      	bmi.n	108ba <smprActSetupKeyDist+0xa2>
    else if (keyDist & SMP_KEY_DIST_SIGN)
   108ae:	075b      	lsls	r3, r3, #29
   108b0:	d5ef      	bpl.n	10892 <smprActSetupKeyDist+0x7a>
      pCcb->nextCmdCode = SMP_CMD_SIGN_INFO;
   108b2:	230a      	movs	r3, #10
   108b4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
}
   108b8:	bd70      	pop	{r4, r5, r6, pc}
          pCcb->nextCmdCode = SMP_CMD_ID_INFO;
   108ba:	2308      	movs	r3, #8
   108bc:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
}
   108c0:	bd70      	pop	{r4, r5, r6, pc}
   108c2:	bf00      	nop
   108c4:	10004918 	.word	0x10004918

000108c8 <smprActSendKey>:
{
   108c8:	b570      	push	{r4, r5, r6, lr}
  if ((pCcb->nextCmdCode == 0) && smpSendKey(pCcb, keyDist))
   108ca:	f890 503f 	ldrb.w	r5, [r0, #63]	; 0x3f
   108ce:	b105      	cbz	r5, 108d2 <smprActSendKey+0xa>
    }
  }
}
   108d0:	bd70      	pop	{r4, r5, r6, pc}
  keyDist = pCcb->pairReq[SMP_RKEYDIST_POS] & pCcb->pairRsp[SMP_RKEYDIST_POS];
   108d2:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   108d6:	460e      	mov	r6, r1
   108d8:	f890 1026 	ldrb.w	r1, [r0, #38]	; 0x26
  if ((pCcb->nextCmdCode == 0) && smpSendKey(pCcb, keyDist))
   108dc:	4019      	ands	r1, r3
   108de:	4604      	mov	r4, r0
   108e0:	f000 fc46 	bl	11170 <smpSendKey>
   108e4:	2800      	cmp	r0, #0
   108e6:	d0f3      	beq.n	108d0 <smprActSendKey+0x8>
    keyDist = pCcb->pairReq[SMP_IKEYDIST_POS] & pCcb->pairRsp[SMP_IKEYDIST_POS];
   108e8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   108ec:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    pCcb->nextCmdCode = 0;
   108f0:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
    keyDist = pCcb->pairReq[SMP_IKEYDIST_POS] & pCcb->pairRsp[SMP_IKEYDIST_POS];
   108f4:	4013      	ands	r3, r2
    if (keyDist & SMP_KEY_DIST_ENC)
   108f6:	07d8      	lsls	r0, r3, #31
   108f8:	d514      	bpl.n	10924 <smprActSendKey+0x5c>
      if (smpCb.lescSupported && pCcb->pScCcb->lescEnabled)
   108fa:	4a10      	ldr	r2, [pc, #64]	; (1093c <smprActSendKey+0x74>)
   108fc:	f892 20ec 	ldrb.w	r2, [r2, #236]	; 0xec
   10900:	b162      	cbz	r2, 1091c <smprActSendKey+0x54>
   10902:	6c62      	ldr	r2, [r4, #68]	; 0x44
   10904:	7812      	ldrb	r2, [r2, #0]
   10906:	b14a      	cbz	r2, 1091c <smprActSendKey+0x54>
        if (keyDist & SMP_KEY_DIST_ID)
   10908:	0799      	lsls	r1, r3, #30
   1090a:	d413      	bmi.n	10934 <smprActSendKey+0x6c>
      pMsg->hdr.event = SMP_MSG_INT_PAIRING_CMPL;
   1090c:	230e      	movs	r3, #14
   1090e:	70b3      	strb	r3, [r6, #2]
      smpSmExecute(pCcb, pMsg);
   10910:	4631      	mov	r1, r6
   10912:	4620      	mov	r0, r4
}
   10914:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      smpSmExecute(pCcb, pMsg);
   10918:	f000 be36 	b.w	11588 <smpSmExecute>
        pCcb->nextCmdCode = SMP_CMD_ENC_INFO;
   1091c:	2306      	movs	r3, #6
   1091e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
}
   10922:	bd70      	pop	{r4, r5, r6, pc}
    else if (keyDist & SMP_KEY_DIST_ID)
   10924:	079a      	lsls	r2, r3, #30
   10926:	d405      	bmi.n	10934 <smprActSendKey+0x6c>
    else if (keyDist & SMP_KEY_DIST_SIGN)
   10928:	075b      	lsls	r3, r3, #29
   1092a:	d5ef      	bpl.n	1090c <smprActSendKey+0x44>
      pCcb->nextCmdCode = SMP_CMD_SIGN_INFO;
   1092c:	230a      	movs	r3, #10
   1092e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
}
   10932:	bd70      	pop	{r4, r5, r6, pc}
          pCcb->nextCmdCode = SMP_CMD_ID_INFO;
   10934:	2308      	movs	r3, #8
   10936:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
}
   1093a:	bd70      	pop	{r4, r5, r6, pc}
   1093c:	10004918 	.word	0x10004918

00010940 <smprActRcvKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActRcvKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   10940:	b538      	push	{r3, r4, r5, lr}
  uint8_t   keyDist;

  /* get initiator key distribution */
  keyDist = pCcb->pairReq[SMP_IKEYDIST_POS] & pCcb->pairRsp[SMP_IKEYDIST_POS];
   10942:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
   10946:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
   1094a:	460d      	mov	r5, r1

  /* process received key */
  if (smpProcRcvKey(pCcb, &pCcb->pScr->keyInd, pMsg->data.pPacket, keyDist))
   1094c:	4013      	ands	r3, r2
   1094e:	684a      	ldr	r2, [r1, #4]
   10950:	6b01      	ldr	r1, [r0, #48]	; 0x30
{
   10952:	4604      	mov	r4, r0
  if (smpProcRcvKey(pCcb, &pCcb->pScr->keyInd, pMsg->data.pPacket, keyDist))
   10954:	f000 fcea 	bl	1132c <smpProcRcvKey>
   10958:	b900      	cbnz	r0, 1095c <smprActRcvKey+0x1c>
  {
    /* no more keys to receive; send ourselves pairing complete msg */
    pMsg->hdr.event = SMP_MSG_INT_PAIRING_CMPL;
    smpSmExecute(pCcb, pMsg);
  }
}
   1095a:	bd38      	pop	{r3, r4, r5, pc}
    pMsg->hdr.event = SMP_MSG_INT_PAIRING_CMPL;
   1095c:	230e      	movs	r3, #14
   1095e:	70ab      	strb	r3, [r5, #2]
    smpSmExecute(pCcb, pMsg);
   10960:	4629      	mov	r1, r5
   10962:	4620      	mov	r0, r4
}
   10964:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    smpSmExecute(pCcb, pMsg);
   10968:	f000 be0e 	b.w	11588 <smpSmExecute>

0001096c <smprScActStoreLescPin>:
 *  \return None.
 */
/*************************************************************************************************/
void smprScActStoreLescPin(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  if (pCcb->pScCcb->authType == SMP_AUTH_TYPE_PASSKEY)
   1096c:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1096e:	785a      	ldrb	r2, [r3, #1]
   10970:	2a03      	cmp	r2, #3
   10972:	d000      	beq.n	10976 <smprScActStoreLescPin+0xa>
   10974:	4770      	bx	lr
{
   10976:	b530      	push	{r4, r5, lr}
   10978:	4604      	mov	r4, r0
  {
    /* Store the pin */
    Calc128Cpy(pCcb->pScCcb->pScratch->Ra, (uint8_t *)calc128Zeros);
   1097a:	6958      	ldr	r0, [r3, #20]
{
   1097c:	b083      	sub	sp, #12
   1097e:	460d      	mov	r5, r1
    Calc128Cpy(pCcb->pScCcb->pScratch->Ra, (uint8_t *)calc128Zeros);
   10980:	3020      	adds	r0, #32
   10982:	490f      	ldr	r1, [pc, #60]	; (109c0 <smprScActStoreLescPin+0x54>)
   10984:	f002 fd2e 	bl	133e4 <Calc128Cpy>
    Calc128Cpy(pCcb->pScCcb->pScratch->Rb, (uint8_t *)calc128Zeros);
   10988:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1098a:	490d      	ldr	r1, [pc, #52]	; (109c0 <smprScActStoreLescPin+0x54>)
   1098c:	6958      	ldr	r0, [r3, #20]
   1098e:	3030      	adds	r0, #48	; 0x30
   10990:	f002 fd28 	bl	133e4 <Calc128Cpy>

    if (pMsg->dm.authRsp.authDataLen <= 3)
   10994:	7d2a      	ldrb	r2, [r5, #20]
   10996:	2a03      	cmp	r2, #3
   10998:	d901      	bls.n	1099e <smprScActStoreLescPin+0x32>
    {
      WStrReverseCpy(&pCcb->pScCcb->pScratch->Ra[13], pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
      WStrReverseCpy(&pCcb->pScCcb->pScratch->Rb[13], pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
    }
  }
}
   1099a:	b003      	add	sp, #12
   1099c:	bd30      	pop	{r4, r5, pc}
      WStrReverseCpy(&pCcb->pScCcb->pScratch->Ra[13], pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
   1099e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   109a0:	6958      	ldr	r0, [r3, #20]
   109a2:	1d29      	adds	r1, r5, #4
   109a4:	302d      	adds	r0, #45	; 0x2d
   109a6:	9101      	str	r1, [sp, #4]
   109a8:	f002 fd96 	bl	134d8 <WStrReverseCpy>
      WStrReverseCpy(&pCcb->pScCcb->pScratch->Rb[13], pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
   109ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
   109ae:	7d2a      	ldrb	r2, [r5, #20]
   109b0:	6958      	ldr	r0, [r3, #20]
   109b2:	9901      	ldr	r1, [sp, #4]
   109b4:	303d      	adds	r0, #61	; 0x3d
}
   109b6:	b003      	add	sp, #12
   109b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      WStrReverseCpy(&pCcb->pScCcb->pScratch->Rb[13], pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
   109bc:	f002 bd8c 	b.w	134d8 <WStrReverseCpy>
   109c0:	0001fe04 	.word	0x0001fe04

000109c4 <smprScActSendPubKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActSendPubKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   109c4:	b538      	push	{r3, r4, r5, lr}
   109c6:	4604      	mov	r4, r0
   109c8:	460d      	mov	r5, r1
  /* Execute Common Auth Select actions */
  smpScActAuthSelect(pCcb, pMsg);
   109ca:	f001 ff23 	bl	12814 <smpScActAuthSelect>

  /* Send our public key */
  smpScSendPubKey(pCcb, pMsg);
   109ce:	4629      	mov	r1, r5
   109d0:	4620      	mov	r0, r4
}
   109d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpScSendPubKey(pCcb, pMsg);
   109d6:	f002 bb2d 	b.w	13034 <smpScSendPubKey>
   109da:	bf00      	nop

000109dc <smprScActJwncSetup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActJwncSetup(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   109dc:	b538      	push	{r3, r4, r5, lr}
  /* Select Random Na (128-bits) */
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   109de:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   109e0:	4604      	mov	r4, r0
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   109e2:	6958      	ldr	r0, [r3, #20]
{
   109e4:	460d      	mov	r5, r1
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   109e6:	2110      	movs	r1, #16
   109e8:	4408      	add	r0, r1
   109ea:	f005 fbed 	bl	161c8 <SecRand>

  SMP_TRACE_128("Rand Nb", pCcb->pScCcb->pScratch->Nb_Eb);
   109ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
   109f0:	480d      	ldr	r0, [pc, #52]	; (10a28 <smprScActJwncSetup+0x4c>)
   109f2:	6959      	ldr	r1, [r3, #20]
   109f4:	2210      	movs	r2, #16
   109f6:	4411      	add	r1, r2
   109f8:	f002 fc2c 	bl	13254 <smpLogByteArray>

  /* Set Ra and Rb to zero */
  Calc128Cpy(pCcb->pScCcb->pScratch->Ra, (uint8_t*) calc128Zeros);
   109fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
   109fe:	490b      	ldr	r1, [pc, #44]	; (10a2c <smprScActJwncSetup+0x50>)
   10a00:	6958      	ldr	r0, [r3, #20]
   10a02:	3020      	adds	r0, #32
   10a04:	f002 fcee 	bl	133e4 <Calc128Cpy>
  Calc128Cpy(pCcb->pScCcb->pScratch->Rb, (uint8_t*) calc128Zeros);
   10a08:	6c63      	ldr	r3, [r4, #68]	; 0x44
   10a0a:	4908      	ldr	r1, [pc, #32]	; (10a2c <smprScActJwncSetup+0x50>)
   10a0c:	6958      	ldr	r0, [r3, #20]
   10a0e:	3030      	adds	r0, #48	; 0x30
   10a10:	f002 fce8 	bl	133e4 <Calc128Cpy>

  /* Next command is a Pair Rand from Initiator */
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;
   10a14:	2304      	movs	r3, #4
   10a16:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f

  /* Perform F4 Calculation of Cb */
  smpScActJwncCalcF4(pCcb, pMsg);
   10a1a:	4629      	mov	r1, r5
   10a1c:	4620      	mov	r0, r4
}
   10a1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpScActJwncCalcF4(pCcb, pMsg);
   10a22:	f001 bf51 	b.w	128c8 <smpScActJwncCalcF4>
   10a26:	bf00      	nop
   10a28:	0001f62c 	.word	0x0001f62c
   10a2c:	0001fe04 	.word	0x0001fe04

00010a30 <smprScActJwncSendCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActJwncSendCnf(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   10a30:	b538      	push	{r3, r4, r5, lr}
   10a32:	460c      	mov	r4, r1
   10a34:	4605      	mov	r5, r0
  SMP_TRACE_128("JWNC Confirm", pMsg->aes.pCiphertext);
   10a36:	6849      	ldr	r1, [r1, #4]
   10a38:	4805      	ldr	r0, [pc, #20]	; (10a50 <smprScActJwncSendCnf+0x20>)
   10a3a:	2210      	movs	r2, #16
   10a3c:	f002 fc0a 	bl	13254 <smpLogByteArray>

  smpScSendPairCnf(pCcb, pMsg, pMsg->aes.pCiphertext);
   10a40:	6862      	ldr	r2, [r4, #4]
   10a42:	4621      	mov	r1, r4
   10a44:	4628      	mov	r0, r5
}
   10a46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpScSendPairCnf(pCcb, pMsg, pMsg->aes.pCiphertext);
   10a4a:	f002 bb73 	b.w	13134 <smpScSendPairCnf>
   10a4e:	bf00      	nop
   10a50:	0001f634 	.word	0x0001f634

00010a54 <smprScActJwncCalcG2>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActJwncCalcG2(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   10a54:	b538      	push	{r3, r4, r5, lr}
  uint8_t *pNa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;

  /* Na from initiator is in Random Cmd from initiator */
  WStrReverseCpy(pCcb->pScCcb->pScratch->Na_Ea, pNa, SMP_RAND_LEN);
   10a56:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   10a58:	460d      	mov	r5, r1
  uint8_t *pNa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   10a5a:	6849      	ldr	r1, [r1, #4]
{
   10a5c:	4604      	mov	r4, r0
  WStrReverseCpy(pCcb->pScCcb->pScratch->Na_Ea, pNa, SMP_RAND_LEN);
   10a5e:	3109      	adds	r1, #9
   10a60:	6958      	ldr	r0, [r3, #20]
   10a62:	2210      	movs	r2, #16
   10a64:	f002 fd38 	bl	134d8 <WStrReverseCpy>

  /* Calculate Vb using G2 */
  smpScActJwncCalcG2(pCcb, pMsg);
   10a68:	4629      	mov	r1, r5
   10a6a:	4620      	mov	r0, r4
}
   10a6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpScActJwncCalcG2(pCcb, pMsg);
   10a70:	f001 bf78 	b.w	12964 <smpScActJwncCalcG2>

00010a74 <smprScActJwncDisplay>:
*
*  \return None.
*/
/*************************************************************************************************/
void smprScActJwncDisplay(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   10a74:	b538      	push	{r3, r4, r5, lr}
  /* Next command is a DH Key Check  */
  pCcb->nextCmdCode = SMP_CMD_DHKEY_CHECK;
   10a76:	220d      	movs	r2, #13

  /* Send Pair Rand Nb to the Initiator */
  smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
   10a78:	6c43      	ldr	r3, [r0, #68]	; 0x44
  pCcb->nextCmdCode = SMP_CMD_DHKEY_CHECK;
   10a7a:	f880 203f 	strb.w	r2, [r0, #63]	; 0x3f
  smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
   10a7e:	695a      	ldr	r2, [r3, #20]
{
   10a80:	4604      	mov	r4, r0
   10a82:	460d      	mov	r5, r1
  smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
   10a84:	3210      	adds	r2, #16
   10a86:	f002 fb2d 	bl	130e4 <smpScSendRand>

  /* Send Numeric Comparison to application, if applicable */
  smpScActJwncDisplay(pCcb, pMsg);
   10a8a:	4629      	mov	r1, r5
   10a8c:	4620      	mov	r0, r4
}
   10a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpScActJwncDisplay(pCcb, pMsg);
   10a92:	f001 bf99 	b.w	129c8 <smpScActJwncDisplay>
   10a96:	bf00      	nop

00010a98 <smprScActPkStoreCnf>:
void smprScActPkStoreCnf(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  uint8_t *pCa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;

  /* Store the Cai from the initiator */
  WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pCa, SMP_CONFIRM_LEN);
   10a98:	6c43      	ldr	r3, [r0, #68]	; 0x44
  uint8_t *pCa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   10a9a:	6849      	ldr	r1, [r1, #4]
  WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pCa, SMP_CONFIRM_LEN);
   10a9c:	6958      	ldr	r0, [r3, #20]
   10a9e:	2210      	movs	r2, #16
   10aa0:	3109      	adds	r1, #9
   10aa2:	3050      	adds	r0, #80	; 0x50
   10aa4:	f002 bd18 	b.w	134d8 <WStrReverseCpy>

00010aa8 <smprScActPkStoreCnfAndCalcCb>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActPkStoreCnfAndCalcCb(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   10aa8:	b570      	push	{r4, r5, r6, lr}
  WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pCa, SMP_CONFIRM_LEN);
   10aaa:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   10aac:	4604      	mov	r4, r0
   10aae:	460d      	mov	r5, r1
  WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pCa, SMP_CONFIRM_LEN);
   10ab0:	6958      	ldr	r0, [r3, #20]
  uint8_t *pCa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   10ab2:	6849      	ldr	r1, [r1, #4]
{
   10ab4:	b084      	sub	sp, #16
  WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pCa, SMP_CONFIRM_LEN);
   10ab6:	2210      	movs	r2, #16
   10ab8:	3109      	adds	r1, #9
   10aba:	3050      	adds	r0, #80	; 0x50
   10abc:	f002 fd0c 	bl	134d8 <WStrReverseCpy>
 */
/*************************************************************************************************/
void smprScActPkCalcCb(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  /* Get random Nbi */
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   10ac0:	6c63      	ldr	r3, [r4, #68]	; 0x44
   10ac2:	6958      	ldr	r0, [r3, #20]
   10ac4:	2110      	movs	r1, #16
   10ac6:	4408      	add	r0, r1
   10ac8:	f005 fb7e 	bl	161c8 <SecRand>

  SMP_TRACE_128("Rand Nb", pCcb->pScCcb->pScratch->Nb_Eb);
   10acc:	6c63      	ldr	r3, [r4, #68]	; 0x44
   10ace:	480f      	ldr	r0, [pc, #60]	; (10b0c <smprScActPkStoreCnfAndCalcCb+0x64>)
   10ad0:	6959      	ldr	r1, [r3, #20]
   10ad2:	2210      	movs	r2, #16
   10ad4:	4411      	add	r1, r2
   10ad6:	f002 fbbd 	bl	13254 <smpLogByteArray>
  /* Next command is the Pair Random */
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;

  /* Cb = f4(PKbx, PKax, Nbi, Rbi) where f4(U, V, x, Z) = AES-CMACx (U || V || Z) */
  SmpScCalcF4(pCcb, pMsg,
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   10ada:	6c63      	ldr	r3, [r4, #68]	; 0x44
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;
   10adc:	2204      	movs	r2, #4
   10ade:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   10ae2:	68da      	ldr	r2, [r3, #12]
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   10ae4:	689b      	ldr	r3, [r3, #8]
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   10ae6:	9203      	str	r2, [sp, #12]
  SmpScCalcF4(pCcb, pMsg,
   10ae8:	4620      	mov	r0, r4
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   10aea:	9302      	str	r3, [sp, #8]
  SmpScCalcF4(pCcb, pMsg,
   10aec:	f002 fb4a 	bl	13184 <smpGetPkBit>
   10af0:	4629      	mov	r1, r5
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Nb_Eb);
   10af2:	6c65      	ldr	r5, [r4, #68]	; 0x44
  SmpScCalcF4(pCcb, pMsg,
   10af4:	4606      	mov	r6, r0
   10af6:	4620      	mov	r0, r4
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Nb_Eb);
   10af8:	696c      	ldr	r4, [r5, #20]
  SmpScCalcF4(pCcb, pMsg,
   10afa:	9600      	str	r6, [sp, #0]
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Nb_Eb);
   10afc:	3410      	adds	r4, #16
  SmpScCalcF4(pCcb, pMsg,
   10afe:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   10b02:	9401      	str	r4, [sp, #4]
   10b04:	f002 fa10 	bl	12f28 <SmpScCalcF4>
}
   10b08:	b004      	add	sp, #16
   10b0a:	bd70      	pop	{r4, r5, r6, pc}
   10b0c:	0001f62c 	.word	0x0001f62c

00010b10 <smprScActPkStorePinAndCalcCb>:
{
   10b10:	b570      	push	{r4, r5, r6, lr}
  if (pCcb->pScCcb->authType == SMP_AUTH_TYPE_PASSKEY)
   10b12:	6c43      	ldr	r3, [r0, #68]	; 0x44
   10b14:	785a      	ldrb	r2, [r3, #1]
   10b16:	2a03      	cmp	r2, #3
{
   10b18:	b084      	sub	sp, #16
   10b1a:	4604      	mov	r4, r0
   10b1c:	460d      	mov	r5, r1
  if (pCcb->pScCcb->authType == SMP_AUTH_TYPE_PASSKEY)
   10b1e:	d024      	beq.n	10b6a <smprScActPkStorePinAndCalcCb+0x5a>
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   10b20:	6958      	ldr	r0, [r3, #20]
   10b22:	2110      	movs	r1, #16
   10b24:	4408      	add	r0, r1
   10b26:	f005 fb4f 	bl	161c8 <SecRand>
  SMP_TRACE_128("Rand Nb", pCcb->pScCcb->pScratch->Nb_Eb);
   10b2a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   10b2c:	481e      	ldr	r0, [pc, #120]	; (10ba8 <smprScActPkStorePinAndCalcCb+0x98>)
   10b2e:	6959      	ldr	r1, [r3, #20]
   10b30:	2210      	movs	r2, #16
   10b32:	4411      	add	r1, r2
   10b34:	f002 fb8e 	bl	13254 <smpLogByteArray>
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   10b38:	6c63      	ldr	r3, [r4, #68]	; 0x44
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;
   10b3a:	2204      	movs	r2, #4
   10b3c:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   10b40:	68da      	ldr	r2, [r3, #12]
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   10b42:	689b      	ldr	r3, [r3, #8]
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   10b44:	9203      	str	r2, [sp, #12]
  SmpScCalcF4(pCcb, pMsg,
   10b46:	4620      	mov	r0, r4
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   10b48:	9302      	str	r3, [sp, #8]
  SmpScCalcF4(pCcb, pMsg,
   10b4a:	f002 fb1b 	bl	13184 <smpGetPkBit>
   10b4e:	4629      	mov	r1, r5
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Nb_Eb);
   10b50:	6c65      	ldr	r5, [r4, #68]	; 0x44
  SmpScCalcF4(pCcb, pMsg,
   10b52:	4606      	mov	r6, r0
   10b54:	4620      	mov	r0, r4
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Nb_Eb);
   10b56:	696c      	ldr	r4, [r5, #20]
  SmpScCalcF4(pCcb, pMsg,
   10b58:	9600      	str	r6, [sp, #0]
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Nb_Eb);
   10b5a:	3410      	adds	r4, #16
  SmpScCalcF4(pCcb, pMsg,
   10b5c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   10b60:	9401      	str	r4, [sp, #4]
   10b62:	f002 f9e1 	bl	12f28 <SmpScCalcF4>
}
   10b66:	b004      	add	sp, #16
   10b68:	bd70      	pop	{r4, r5, r6, pc}
    Calc128Cpy(pCcb->pScCcb->pScratch->Ra, (uint8_t *)calc128Zeros);
   10b6a:	6958      	ldr	r0, [r3, #20]
   10b6c:	490f      	ldr	r1, [pc, #60]	; (10bac <smprScActPkStorePinAndCalcCb+0x9c>)
   10b6e:	3020      	adds	r0, #32
   10b70:	f002 fc38 	bl	133e4 <Calc128Cpy>
    Calc128Cpy(pCcb->pScCcb->pScratch->Rb, (uint8_t *)calc128Zeros);
   10b74:	6c63      	ldr	r3, [r4, #68]	; 0x44
   10b76:	490d      	ldr	r1, [pc, #52]	; (10bac <smprScActPkStorePinAndCalcCb+0x9c>)
   10b78:	6958      	ldr	r0, [r3, #20]
   10b7a:	3030      	adds	r0, #48	; 0x30
   10b7c:	f002 fc32 	bl	133e4 <Calc128Cpy>
    if (pMsg->dm.authRsp.authDataLen <= 3)
   10b80:	7d2a      	ldrb	r2, [r5, #20]
      WStrReverseCpy(&pCcb->pScCcb->pScratch->Ra[13], pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
   10b82:	6c63      	ldr	r3, [r4, #68]	; 0x44
    if (pMsg->dm.authRsp.authDataLen <= 3)
   10b84:	2a03      	cmp	r2, #3
   10b86:	d8cb      	bhi.n	10b20 <smprScActPkStorePinAndCalcCb+0x10>
      WStrReverseCpy(&pCcb->pScCcb->pScratch->Ra[13], pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
   10b88:	6958      	ldr	r0, [r3, #20]
   10b8a:	1d29      	adds	r1, r5, #4
   10b8c:	302d      	adds	r0, #45	; 0x2d
   10b8e:	9102      	str	r1, [sp, #8]
   10b90:	f002 fca2 	bl	134d8 <WStrReverseCpy>
      WStrReverseCpy(&pCcb->pScCcb->pScratch->Rb[13], pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
   10b94:	6c63      	ldr	r3, [r4, #68]	; 0x44
   10b96:	7d2a      	ldrb	r2, [r5, #20]
   10b98:	6958      	ldr	r0, [r3, #20]
   10b9a:	9902      	ldr	r1, [sp, #8]
   10b9c:	303d      	adds	r0, #61	; 0x3d
   10b9e:	f002 fc9b 	bl	134d8 <WStrReverseCpy>
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   10ba2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   10ba4:	e7bc      	b.n	10b20 <smprScActPkStorePinAndCalcCb+0x10>
   10ba6:	bf00      	nop
   10ba8:	0001f62c 	.word	0x0001f62c
   10bac:	0001fe04 	.word	0x0001fe04

00010bb0 <smprScActPkCalcCb>:
{
   10bb0:	b570      	push	{r4, r5, r6, lr}
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   10bb2:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   10bb4:	4604      	mov	r4, r0
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   10bb6:	6958      	ldr	r0, [r3, #20]
{
   10bb8:	460d      	mov	r5, r1
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   10bba:	2110      	movs	r1, #16
{
   10bbc:	b084      	sub	sp, #16
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   10bbe:	4408      	add	r0, r1
   10bc0:	f005 fb02 	bl	161c8 <SecRand>
  SMP_TRACE_128("Rand Nb", pCcb->pScCcb->pScratch->Nb_Eb);
   10bc4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   10bc6:	480f      	ldr	r0, [pc, #60]	; (10c04 <smprScActPkCalcCb+0x54>)
   10bc8:	6959      	ldr	r1, [r3, #20]
   10bca:	2210      	movs	r2, #16
   10bcc:	4411      	add	r1, r2
   10bce:	f002 fb41 	bl	13254 <smpLogByteArray>
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   10bd2:	6c63      	ldr	r3, [r4, #68]	; 0x44
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;
   10bd4:	2204      	movs	r2, #4
   10bd6:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   10bda:	68da      	ldr	r2, [r3, #12]
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   10bdc:	689b      	ldr	r3, [r3, #8]
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   10bde:	9203      	str	r2, [sp, #12]
  SmpScCalcF4(pCcb, pMsg,
   10be0:	4620      	mov	r0, r4
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   10be2:	9302      	str	r3, [sp, #8]
  SmpScCalcF4(pCcb, pMsg,
   10be4:	f002 face 	bl	13184 <smpGetPkBit>
   10be8:	4629      	mov	r1, r5
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Nb_Eb);
   10bea:	6c65      	ldr	r5, [r4, #68]	; 0x44
  SmpScCalcF4(pCcb, pMsg,
   10bec:	4606      	mov	r6, r0
   10bee:	4620      	mov	r0, r4
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Nb_Eb);
   10bf0:	696c      	ldr	r4, [r5, #20]
  SmpScCalcF4(pCcb, pMsg,
   10bf2:	9600      	str	r6, [sp, #0]
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Nb_Eb);
   10bf4:	3410      	adds	r4, #16
  SmpScCalcF4(pCcb, pMsg,
   10bf6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   10bfa:	9401      	str	r4, [sp, #4]
   10bfc:	f002 f994 	bl	12f28 <SmpScCalcF4>
}
   10c00:	b004      	add	sp, #16
   10c02:	bd70      	pop	{r4, r5, r6, pc}
   10c04:	0001f62c 	.word	0x0001f62c

00010c08 <smprScActPkSendCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActPkSendCnf(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   10c08:	b538      	push	{r3, r4, r5, lr}
   10c0a:	460c      	mov	r4, r1
   10c0c:	4605      	mov	r5, r0
  SMP_TRACE_128("Cbi", pMsg->aes.pCiphertext);
   10c0e:	6849      	ldr	r1, [r1, #4]
   10c10:	4805      	ldr	r0, [pc, #20]	; (10c28 <smprScActPkSendCnf+0x20>)
   10c12:	2210      	movs	r2, #16
   10c14:	f002 fb1e 	bl	13254 <smpLogByteArray>

  /* Send the Cbi to the peer */
  smpScSendPairCnf(pCcb, pMsg, pMsg->aes.pCiphertext);
   10c18:	6862      	ldr	r2, [r4, #4]
   10c1a:	4621      	mov	r1, r4
   10c1c:	4628      	mov	r0, r5
}
   10c1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpScSendPairCnf(pCcb, pMsg, pMsg->aes.pCiphertext);
   10c22:	f002 ba87 	b.w	13134 <smpScSendPairCnf>
   10c26:	bf00      	nop
   10c28:	0001f644 	.word	0x0001f644

00010c2c <smprScActPkCalcCa>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActPkCalcCa(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   10c2c:	b570      	push	{r4, r5, r6, lr}
  uint8_t *pNa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;

  /* Copy the Nai from the initiator */
  WStrReverseCpy(pCcb->pScCcb->pScratch->Na_Ea, pNa, SMP_RAND_LEN);
   10c2e:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   10c30:	460d      	mov	r5, r1
  uint8_t *pNa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   10c32:	6849      	ldr	r1, [r1, #4]
{
   10c34:	4604      	mov	r4, r0
   10c36:	b084      	sub	sp, #16
  WStrReverseCpy(pCcb->pScCcb->pScratch->Na_Ea, pNa, SMP_RAND_LEN);
   10c38:	6958      	ldr	r0, [r3, #20]
   10c3a:	3109      	adds	r1, #9
   10c3c:	2210      	movs	r2, #16
   10c3e:	f002 fc4b 	bl	134d8 <WStrReverseCpy>

  /* Cai = f4(PKax, PKbx, Nbi, Rbi) where f4(U, V, x, Z) = AES-CMACx (U || V || Z) */
  SmpScCalcF4(pCcb, pMsg,
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   10c42:	6c63      	ldr	r3, [r4, #68]	; 0x44
  SmpScCalcF4(pCcb, pMsg,
   10c44:	4620      	mov	r0, r4
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   10c46:	689a      	ldr	r2, [r3, #8]
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   10c48:	68db      	ldr	r3, [r3, #12]
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   10c4a:	9203      	str	r2, [sp, #12]
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   10c4c:	9302      	str	r3, [sp, #8]
  SmpScCalcF4(pCcb, pMsg,
   10c4e:	f002 fa99 	bl	13184 <smpGetPkBit>
   10c52:	4629      	mov	r1, r5
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Na_Ea);
   10c54:	6c65      	ldr	r5, [r4, #68]	; 0x44
  SmpScCalcF4(pCcb, pMsg,
   10c56:	4606      	mov	r6, r0
   10c58:	4620      	mov	r0, r4
   10c5a:	696c      	ldr	r4, [r5, #20]
   10c5c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   10c60:	e9cd 6400 	strd	r6, r4, [sp]
   10c64:	f002 f960 	bl	12f28 <SmpScCalcF4>
}
   10c68:	b004      	add	sp, #16
   10c6a:	bd70      	pop	{r4, r5, r6, pc}

00010c6c <smprScActPkSendRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActPkSendRand(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   10c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   10c6e:	4604      	mov	r4, r0
   10c70:	b083      	sub	sp, #12
  SMP_TRACE_128("Ca", pMsg->aes.pCiphertext);
   10c72:	481e      	ldr	r0, [pc, #120]	; (10cec <smprScActPkSendRand+0x80>)
{
   10c74:	460d      	mov	r5, r1
  SMP_TRACE_128("Ca", pMsg->aes.pCiphertext);
   10c76:	2210      	movs	r2, #16
   10c78:	6849      	ldr	r1, [r1, #4]
   10c7a:	f002 faeb 	bl	13254 <smpLogByteArray>
  SMP_TRACE_128("Ca Peer", pCcb->pScCcb->pScratch->PeerCa_Ea);
   10c7e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   10c80:	481b      	ldr	r0, [pc, #108]	; (10cf0 <smprScActPkSendRand+0x84>)
   10c82:	6959      	ldr	r1, [r3, #20]
   10c84:	2210      	movs	r2, #16
   10c86:	3150      	adds	r1, #80	; 0x50
   10c88:	f002 fae4 	bl	13254 <smpLogByteArray>

  /* Verify the Calculated Cai to previously received Cai */
  if (memcmp(pCcb->pScCcb->pScratch->PeerCa_Ea, pMsg->aes.pCiphertext, SMP_RAND_LEN))
   10c8c:	6c66      	ldr	r6, [r4, #68]	; 0x44
   10c8e:	6869      	ldr	r1, [r5, #4]
   10c90:	6977      	ldr	r7, [r6, #20]
   10c92:	2210      	movs	r2, #16
   10c94:	f107 0050 	add.w	r0, r7, #80	; 0x50
   10c98:	f00b ff0c 	bl	1cab4 <memcmp>
   10c9c:	b9f8      	cbnz	r0, 10cde <smprScActPkSendRand+0x72>
  else
  {
     wsfMsgHdr_t hdr;

    /* Increment the bit position */
    if (++pCcb->pScCcb->pkPos >= SMP_PK_BIT_COUNT)
   10c9e:	78f3      	ldrb	r3, [r6, #3]
   10ca0:	3301      	adds	r3, #1
   10ca2:	b2db      	uxtb	r3, r3
   10ca4:	2b13      	cmp	r3, #19
   10ca6:	70f3      	strb	r3, [r6, #3]
   10ca8:	d90c      	bls.n	10cc4 <smprScActPkSendRand+0x58>
    {
      hdr.event = SMP_MSG_INT_PK_CMPL;
   10caa:	231b      	movs	r3, #27
   10cac:	f88d 3006 	strb.w	r3, [sp, #6]
      /* Send the Nbi */
      smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
    }

    /* Post an event to move to the next passkey confirm or complete the process */
    hdr.param = pCcb->connId;
   10cb0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
   10cb4:	f8ad 3004 	strh.w	r3, [sp, #4]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   10cb8:	a901      	add	r1, sp, #4
   10cba:	4620      	mov	r0, r4
   10cbc:	f000 fc64 	bl	11588 <smpSmExecute>
  }
}
   10cc0:	b003      	add	sp, #12
   10cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pCcb->nextCmdCode = SMP_CMD_PAIR_CNF;
   10cc4:	2203      	movs	r2, #3
      hdr.event = SMP_MSG_INT_PK_NEXT;
   10cc6:	231a      	movs	r3, #26
      pCcb->nextCmdCode = SMP_CMD_PAIR_CNF;
   10cc8:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
      smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
   10ccc:	4629      	mov	r1, r5
   10cce:	f107 0210 	add.w	r2, r7, #16
   10cd2:	4620      	mov	r0, r4
      hdr.event = SMP_MSG_INT_PK_NEXT;
   10cd4:	f88d 3006 	strb.w	r3, [sp, #6]
      smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
   10cd8:	f002 fa04 	bl	130e4 <smpScSendRand>
   10cdc:	e7e8      	b.n	10cb0 <smprScActPkSendRand+0x44>
    smpScFailWithReattempt(pCcb);
   10cde:	4620      	mov	r0, r4
}
   10ce0:	b003      	add	sp, #12
   10ce2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    smpScFailWithReattempt(pCcb);
   10ce6:	f002 ba85 	b.w	131f4 <smpScFailWithReattempt>
   10cea:	bf00      	nop
   10cec:	0001f648 	.word	0x0001f648
   10cf0:	0001f64c 	.word	0x0001f64c

00010cf4 <smprScActOobSetup>:
 */
/*************************************************************************************************/
void smprScActOobSetup(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  /* The next command is the Pair Rand from the initiator */
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;
   10cf4:	2304      	movs	r3, #4
   10cf6:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
}
   10cfa:	4770      	bx	lr

00010cfc <smprScActOobCalcCa>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActOobCalcCa(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   10cfc:	b530      	push	{r4, r5, lr}
  uint8_t *pNa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;

  /* Copy the Na from the initiator */
  WStrReverseCpy(pCcb->pScCcb->pScratch->Na_Ea, pNa, SMP_CONFIRM_LEN);
   10cfe:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   10d00:	460d      	mov	r5, r1
  uint8_t *pNa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   10d02:	6849      	ldr	r1, [r1, #4]
{
   10d04:	4604      	mov	r4, r0
   10d06:	b087      	sub	sp, #28
  WStrReverseCpy(pCcb->pScCcb->pScratch->Na_Ea, pNa, SMP_CONFIRM_LEN);
   10d08:	6958      	ldr	r0, [r3, #20]
   10d0a:	2210      	movs	r2, #16
   10d0c:	3109      	adds	r1, #9
   10d0e:	f002 fbe3 	bl	134d8 <WStrReverseCpy>

  /* If the peer device's OOB data flag does not indicate remote OOB data has been received,
     clear Rb. */
  if (pCcb->pairReq[SMP_OOB_POS] != SMP_OOB_DATA_PRESENT)
   10d12:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   10d16:	2b01      	cmp	r3, #1
   10d18:	d005      	beq.n	10d26 <smprScActOobCalcCa+0x2a>
  {
    Calc128Cpy(pCcb->pScCcb->pScratch->Rb, (uint8_t*) calc128Zeros);
   10d1a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   10d1c:	4915      	ldr	r1, [pc, #84]	; (10d74 <smprScActOobCalcCa+0x78>)
   10d1e:	6958      	ldr	r0, [r3, #20]
   10d20:	3030      	adds	r0, #48	; 0x30
   10d22:	f002 fb5f 	bl	133e4 <Calc128Cpy>
  }

  /* If we indicated the presence of remote OOB data has been received, calculate Ca. */
  if (pCcb->pairRsp[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT)
   10d26:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   10d2a:	2b01      	cmp	r3, #1
  {
    /* Calculate Ca using Toolkit function F4 */
    SmpScCalcF4(pCcb, pMsg,
                pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   10d2c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  if (pCcb->pairRsp[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT)
   10d2e:	d013      	beq.n	10d58 <smprScActOobCalcCa+0x5c>
  else
  {
    /* Simulate the ca calculation is complete and clear ra */
    secCmacMsg_t msg;

    Calc128Cpy(pCcb->pScCcb->pScratch->Ra, (uint8_t*)calc128Zeros);
   10d30:	6958      	ldr	r0, [r3, #20]
   10d32:	4910      	ldr	r1, [pc, #64]	; (10d74 <smprScActOobCalcCa+0x78>)
   10d34:	3020      	adds	r0, #32
   10d36:	f002 fb55 	bl	133e4 <Calc128Cpy>

    msg.hdr.param = pCcb->connId;
   10d3a:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
   10d3e:	f8ad 500c 	strh.w	r5, [sp, #12]
    msg.hdr.event = SMP_MSG_WSF_CMAC_CMPL;
   10d42:	221c      	movs	r2, #28
    msg.pPlainText = NULL;
   10d44:	2300      	movs	r3, #0

    smpSmExecute(pCcb, (smpMsg_t *) &msg);
   10d46:	a903      	add	r1, sp, #12
   10d48:	4620      	mov	r0, r4
    msg.hdr.event = SMP_MSG_WSF_CMAC_CMPL;
   10d4a:	f88d 200e 	strb.w	r2, [sp, #14]
    msg.pPlainText = NULL;
   10d4e:	9305      	str	r3, [sp, #20]
    smpSmExecute(pCcb, (smpMsg_t *) &msg);
   10d50:	f000 fc1a 	bl	11588 <smpSmExecute>
  }
}
   10d54:	b007      	add	sp, #28
   10d56:	bd30      	pop	{r4, r5, pc}
                0, pCcb->pScCcb->pScratch->Ra);
   10d58:	695a      	ldr	r2, [r3, #20]
                pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   10d5a:	689b      	ldr	r3, [r3, #8]
                0, pCcb->pScCcb->pScratch->Ra);
   10d5c:	3220      	adds	r2, #32
    SmpScCalcF4(pCcb, pMsg,
   10d5e:	2000      	movs	r0, #0
   10d60:	e9cd 0200 	strd	r0, r2, [sp]
   10d64:	4629      	mov	r1, r5
   10d66:	461a      	mov	r2, r3
   10d68:	4620      	mov	r0, r4
   10d6a:	f002 f8dd 	bl	12f28 <SmpScCalcF4>
}
   10d6e:	b007      	add	sp, #28
   10d70:	bd30      	pop	{r4, r5, pc}
   10d72:	bf00      	nop
   10d74:	0001fe04 	.word	0x0001fe04

00010d78 <smprScActOobSendRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActOobSendRand(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   10d78:	b570      	push	{r4, r5, r6, lr}
  /* Only compare Ca if we indicated that we received OOB data. */
  if (pCcb->pairRsp[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT)
   10d7a:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   10d7e:	2b01      	cmp	r3, #1
{
   10d80:	4604      	mov	r4, r0
   10d82:	460d      	mov	r5, r1
  if (pCcb->pairRsp[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT)
   10d84:	d018      	beq.n	10db8 <smprScActOobSendRand+0x40>

  /* Next command is a DK Key Check from initiator */
  pCcb->nextCmdCode = SMP_CMD_DHKEY_CHECK;

  /* Get a random Nb */
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   10d86:	6c43      	ldr	r3, [r0, #68]	; 0x44
   10d88:	695e      	ldr	r6, [r3, #20]
  pCcb->nextCmdCode = SMP_CMD_DHKEY_CHECK;
   10d8a:	230d      	movs	r3, #13
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   10d8c:	2110      	movs	r1, #16
   10d8e:	1870      	adds	r0, r6, r1
  pCcb->nextCmdCode = SMP_CMD_DHKEY_CHECK;
   10d90:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   10d94:	f005 fa18 	bl	161c8 <SecRand>

  SMP_TRACE_128("Rand Nb", pCcb->pScCcb->pScratch->Nb_Eb);
   10d98:	6c63      	ldr	r3, [r4, #68]	; 0x44
   10d9a:	4811      	ldr	r0, [pc, #68]	; (10de0 <smprScActOobSendRand+0x68>)
   10d9c:	6959      	ldr	r1, [r3, #20]
   10d9e:	2210      	movs	r2, #16
   10da0:	4411      	add	r1, r2
   10da2:	f002 fa57 	bl	13254 <smpLogByteArray>

  /* Send the rand Nb to the initiator */
  smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
   10da6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   10da8:	695a      	ldr	r2, [r3, #20]
   10daa:	4629      	mov	r1, r5
   10dac:	4620      	mov	r0, r4
   10dae:	3210      	adds	r2, #16
}
   10db0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
   10db4:	f002 b996 	b.w	130e4 <smpScSendRand>
    SMP_TRACE_128("Ca", pMsg->aes.pCiphertext);
   10db8:	6849      	ldr	r1, [r1, #4]
   10dba:	480a      	ldr	r0, [pc, #40]	; (10de4 <smprScActOobSendRand+0x6c>)
   10dbc:	2210      	movs	r2, #16
   10dbe:	f002 fa49 	bl	13254 <smpLogByteArray>
    if (memcmp(pCcb->pScCcb->pScratch->PeerCa_Ea, pMsg->aes.pCiphertext, SMP_CONFIRM_LEN))
   10dc2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   10dc4:	6869      	ldr	r1, [r5, #4]
   10dc6:	695e      	ldr	r6, [r3, #20]
   10dc8:	2210      	movs	r2, #16
   10dca:	f106 0050 	add.w	r0, r6, #80	; 0x50
   10dce:	f00b fe71 	bl	1cab4 <memcmp>
   10dd2:	2800      	cmp	r0, #0
   10dd4:	d0d9      	beq.n	10d8a <smprScActOobSendRand+0x12>
      smpScFailWithReattempt(pCcb);
   10dd6:	4620      	mov	r0, r4
}
   10dd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      smpScFailWithReattempt(pCcb);
   10ddc:	f002 ba0a 	b.w	131f4 <smpScFailWithReattempt>
   10de0:	0001f62c 	.word	0x0001f62c
   10de4:	0001f648 	.word	0x0001f648

00010de8 <smprScActStoreDhCheck>:
void smprScActStoreDhCheck(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  uint8_t *pEa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;

  /* Signal that not further commands are expected until Key Distribution phase (if applicable) */
  pCcb->nextCmdCode = SMP_CMD_MAX;
   10de8:	220f      	movs	r2, #15

  /* The Ea from the peer is in the cmd message (copy as MSB First) */
  WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pEa, SMP_CONFIRM_LEN);
   10dea:	6c43      	ldr	r3, [r0, #68]	; 0x44
  uint8_t *pEa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   10dec:	6849      	ldr	r1, [r1, #4]
  pCcb->nextCmdCode = SMP_CMD_MAX;
   10dee:	f880 203f 	strb.w	r2, [r0, #63]	; 0x3f
  WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pEa, SMP_CONFIRM_LEN);
   10df2:	6958      	ldr	r0, [r3, #20]
   10df4:	2210      	movs	r2, #16
   10df6:	3109      	adds	r1, #9
   10df8:	3050      	adds	r0, #80	; 0x50
   10dfa:	f002 bb6d 	b.w	134d8 <WStrReverseCpy>
   10dfe:	bf00      	nop

00010e00 <smprScActWaitDhCheck>:
void smprScActWaitDhCheck(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  /* Next command is a DH Key Check */
  pCcb->nextCmdCode = SMP_CMD_DHKEY_CHECK;

  if (pCcb->pScCcb->authType == SMP_AUTH_TYPE_PASSKEY)
   10e00:	6c42      	ldr	r2, [r0, #68]	; 0x44
  pCcb->nextCmdCode = SMP_CMD_DHKEY_CHECK;
   10e02:	f04f 0c0d 	mov.w	ip, #13
   10e06:	f880 c03f 	strb.w	ip, [r0, #63]	; 0x3f
  if (pCcb->pScCcb->authType == SMP_AUTH_TYPE_PASSKEY)
   10e0a:	7853      	ldrb	r3, [r2, #1]
   10e0c:	2b03      	cmp	r3, #3
   10e0e:	d000      	beq.n	10e12 <smprScActWaitDhCheck+0x12>
  {
    /* Send the Pair Rand Nb */
    smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
  }
}
   10e10:	4770      	bx	lr
    smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
   10e12:	6952      	ldr	r2, [r2, #20]
   10e14:	3210      	adds	r2, #16
   10e16:	f002 b965 	b.w	130e4 <smpScSendRand>
   10e1a:	bf00      	nop

00010e1c <smprScActCalcDHKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActCalcDHKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   10e1c:	b538      	push	{r3, r4, r5, lr}
  if (pCcb->nextCmdCode == SMP_CMD_DHKEY_CHECK)
   10e1e:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
   10e22:	2b0d      	cmp	r3, #13
{
   10e24:	4604      	mov	r4, r0
   10e26:	460d      	mov	r5, r1
  if (pCcb->nextCmdCode == SMP_CMD_DHKEY_CHECK)
   10e28:	d005      	beq.n	10e36 <smprScActCalcDHKey+0x1a>
    /* The Ea from the peer is in the cmd message (copy as MSB First) */
    WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pEa, SMP_CONFIRM_LEN);
  }

  /* Complete the calculation */
  smpScActCalcSharedSecret(pCcb, pMsg);
   10e2a:	4629      	mov	r1, r5
   10e2c:	4620      	mov	r0, r4
}
   10e2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpScActCalcSharedSecret(pCcb, pMsg);
   10e32:	f001 be39 	b.w	12aa8 <smpScActCalcSharedSecret>
    WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pEa, SMP_CONFIRM_LEN);
   10e36:	6c43      	ldr	r3, [r0, #68]	; 0x44
    uint8_t *pEa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   10e38:	6849      	ldr	r1, [r1, #4]
    WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pEa, SMP_CONFIRM_LEN);
   10e3a:	6958      	ldr	r0, [r3, #20]
   10e3c:	3109      	adds	r1, #9
   10e3e:	3050      	adds	r0, #80	; 0x50
   10e40:	2210      	movs	r2, #16
   10e42:	f002 fb49 	bl	134d8 <WStrReverseCpy>
  smpScActCalcSharedSecret(pCcb, pMsg);
   10e46:	4629      	mov	r1, r5
   10e48:	4620      	mov	r0, r4
}
   10e4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpScActCalcSharedSecret(pCcb, pMsg);
   10e4e:	f001 be2b 	b.w	12aa8 <smpScActCalcSharedSecret>
   10e52:	bf00      	nop

00010e54 <smprScActDHKeyCheckSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActDHKeyCheckSend(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   10e54:	b570      	push	{r4, r5, r6, lr}
   10e56:	4604      	mov	r4, r0
   10e58:	b082      	sub	sp, #8
  SMP_TRACE_128("DHKey Eb", pMsg->aes.pCiphertext);
   10e5a:	2210      	movs	r2, #16
   10e5c:	4825      	ldr	r0, [pc, #148]	; (10ef4 <smprScActDHKeyCheckSend+0xa0>)
{
   10e5e:	460d      	mov	r5, r1
  SMP_TRACE_128("DHKey Eb", pMsg->aes.pCiphertext);
   10e60:	6849      	ldr	r1, [r1, #4]
   10e62:	f002 f9f7 	bl	13254 <smpLogByteArray>

  /* The Eb from the CMAC calculation */
  Calc128Cpy(pCcb->pScCcb->pScratch->Nb_Eb, pMsg->aes.pCiphertext);
   10e66:	6c63      	ldr	r3, [r4, #68]	; 0x44
   10e68:	6869      	ldr	r1, [r5, #4]
   10e6a:	6958      	ldr	r0, [r3, #20]
   10e6c:	3010      	adds	r0, #16
   10e6e:	f002 fab9 	bl	133e4 <Calc128Cpy>

  /* Verify the DH Key Check Ea with the value received from the initiator */
  if (memcmp(pCcb->pScCcb->pScratch->PeerCa_Ea, pCcb->pScCcb->pScratch->Na_Ea, SMP_RAND_LEN) == 0)
   10e72:	6c66      	ldr	r6, [r4, #68]	; 0x44
   10e74:	6971      	ldr	r1, [r6, #20]
   10e76:	2210      	movs	r2, #16
   10e78:	f101 0050 	add.w	r0, r1, #80	; 0x50
   10e7c:	f00b fe1a 	bl	1cab4 <memcmp>
   10e80:	b9c8      	cbnz	r0, 10eb6 <smprScActDHKeyCheckSend+0x62>
  {
    /* Adjust key based on max key length */
    uint8_t  encKeyLen = (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
                          pCcb->pairReq[SMP_MAXKEY_POS] : pCcb->pairRsp[SMP_MAXKEY_POS];

    memset((pCcb->pScCcb->pLtk->ltk_t + encKeyLen), 0, (SMP_KEY_LEN - encKeyLen));
   10e82:	69b3      	ldr	r3, [r6, #24]
    uint8_t  encKeyLen = (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
   10e84:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
    memset((pCcb->pScCcb->pLtk->ltk_t + encKeyLen), 0, (SMP_KEY_LEN - encKeyLen));
   10e88:	4601      	mov	r1, r0
   10e8a:	f103 0010 	add.w	r0, r3, #16
    uint8_t  encKeyLen = (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
   10e8e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   10e92:	429a      	cmp	r2, r3
   10e94:	bf28      	it	cs
   10e96:	461a      	movcs	r2, r3
    memset((pCcb->pScCcb->pLtk->ltk_t + encKeyLen), 0, (SMP_KEY_LEN - encKeyLen));
   10e98:	4410      	add	r0, r2
   10e9a:	f1c2 0210 	rsb	r2, r2, #16
   10e9e:	f00b fe3b 	bl	1cb18 <memset>

    /* Send the DH Key check Eb to the initiator */
    smpScSendDHKeyCheck(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
   10ea2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   10ea4:	695a      	ldr	r2, [r3, #20]
   10ea6:	4629      	mov	r1, r5
   10ea8:	4620      	mov	r0, r4
   10eaa:	3210      	adds	r2, #16
      hdr.event = SMP_MSG_DH_CHECK_FAILURE;
    }

    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
  }
}
   10eac:	b002      	add	sp, #8
   10eae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    smpScSendDHKeyCheck(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
   10eb2:	f002 b8ef 	b.w	13094 <smpScSendDHKeyCheck>
    pCcb->attempts++;
   10eb6:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    hdr.param = pCcb->connId;
   10eba:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
   10ebe:	f8ad 0004 	strh.w	r0, [sp, #4]
    pCcb->attempts++;
   10ec2:	3301      	adds	r3, #1
    hdr.status = SMP_ERR_DH_KEY_CHECK;
   10ec4:	220b      	movs	r2, #11
    pCcb->attempts++;
   10ec6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hdr.status = SMP_ERR_DH_KEY_CHECK;
   10eca:	f88d 2007 	strb.w	r2, [sp, #7]
    SmpDbPairingFailed(pCcb->connId);
   10ece:	f000 fd45 	bl	1195c <SmpDbPairingFailed>
    if (pCcb->attempts == pSmpCfg->maxAttempts)
   10ed2:	4a09      	ldr	r2, [pc, #36]	; (10ef8 <smprScActDHKeyCheckSend+0xa4>)
   10ed4:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   10ed8:	6812      	ldr	r2, [r2, #0]
   10eda:	79d2      	ldrb	r2, [r2, #7]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   10edc:	a901      	add	r1, sp, #4
      hdr.event = SMP_MSG_DH_CHECK_FAILURE;
   10ede:	4293      	cmp	r3, r2
   10ee0:	bf0c      	ite	eq
   10ee2:	230d      	moveq	r3, #13
   10ee4:	231d      	movne	r3, #29
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   10ee6:	4620      	mov	r0, r4
   10ee8:	f88d 3006 	strb.w	r3, [sp, #6]
   10eec:	f000 fb4c 	bl	11588 <smpSmExecute>
}
   10ef0:	b002      	add	sp, #8
   10ef2:	bd70      	pop	{r4, r5, r6, pc}
   10ef4:	0001f654 	.word	0x0001f654
   10ef8:	10002b10 	.word	0x10002b10

00010efc <SmprScInit>:
 */
/*************************************************************************************************/
void SmprScInit(void)
{
  /* set up callback interface */
  smpCb.pSlave = &smprScSmIf;
   10efc:	4b02      	ldr	r3, [pc, #8]	; (10f08 <SmprScInit+0xc>)
   10efe:	4a03      	ldr	r2, [pc, #12]	; (10f0c <SmprScInit+0x10>)
   10f00:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* General SMP LESC Initialization */
  SmpScInit();
   10f04:	f002 b868 	b.w	12fd8 <SmpScInit>
   10f08:	10004918 	.word	0x10004918
   10f0c:	0001f738 	.word	0x0001f738

00010f10 <SmprInit>:
 */
/*************************************************************************************************/
void SmprInit(void)
{
  /* set up state machine interface */
  smpCb.pSlave = &smprSmIf;
   10f10:	4b04      	ldr	r3, [pc, #16]	; (10f24 <SmprInit+0x14>)
  smpCb.procPairing = smpProcPairing;
   10f12:	4905      	ldr	r1, [pc, #20]	; (10f28 <SmprInit+0x18>)
  smpCb.procAuthReq = smpAuthReq;
   10f14:	4a05      	ldr	r2, [pc, #20]	; (10f2c <SmprInit+0x1c>)
  smpCb.pSlave = &smprSmIf;
   10f16:	4806      	ldr	r0, [pc, #24]	; (10f30 <SmprInit+0x20>)
   10f18:	f8c3 00d8 	str.w	r0, [r3, #216]	; 0xd8
  smpCb.procAuthReq = smpAuthReq;
   10f1c:	e9c3 1239 	strd	r1, r2, [r3, #228]	; 0xe4
}
   10f20:	4770      	bx	lr
   10f22:	bf00      	nop
   10f24:	10004918 	.word	0x10004918
   10f28:	000115fd 	.word	0x000115fd
   10f2c:	00011719 	.word	0x00011719
   10f30:	0001fa1c 	.word	0x0001fa1c

00010f34 <smpStartRspTimer>:
 */
/*************************************************************************************************/
void smpStartRspTimer(smpCcb_t *pCcb)
{
  /* start smp response timer */
  pCcb->rspTimer.msg.event = SMP_MSG_INT_RSP_TIMEOUT;
   10f34:	f24e 130f 	movw	r3, #57615	; 0xe10f
   10f38:	8143      	strh	r3, [r0, #10]
  pCcb->rspTimer.msg.status = SMP_ERR_TIMEOUT;
  WsfTimerStartSec(&pCcb->rspTimer, SMP_TIMEOUT);
   10f3a:	211e      	movs	r1, #30
   10f3c:	f7fe bf5e 	b.w	fdfc <WsfTimerStartSec>

00010f40 <smpActNone>:
 */
/*************************************************************************************************/
void smpActNone(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  return;
}
   10f40:	4770      	bx	lr
   10f42:	bf00      	nop

00010f44 <smpActCleanup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActCleanup(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   10f44:	b510      	push	{r4, lr}
   10f46:	4604      	mov	r4, r0
  if (pCcb->pScr != NULL)
   10f48:	6b00      	ldr	r0, [r0, #48]	; 0x30
   10f4a:	b118      	cbz	r0, 10f54 <smpActCleanup+0x10>
    WsfBufFree(pCcb->pScr);
   10f4c:	f7fe fccc 	bl	f8e8 <WsfBufFree>
    pCcb->pScr = NULL;
   10f50:	2300      	movs	r3, #0
   10f52:	6323      	str	r3, [r4, #48]	; 0x30
  WsfTimerStop(&pCcb->rspTimer);
   10f54:	4620      	mov	r0, r4
   10f56:	f7fe ffd7 	bl	ff08 <WsfTimerStop>
  WsfTimerStop(&pCcb->waitTimer);
   10f5a:	f104 0010 	add.w	r0, r4, #16
   10f5e:	f7fe ffd3 	bl	ff08 <WsfTimerStop>
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   10f62:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
  pCcb->secReq = FALSE;
   10f66:	2300      	movs	r3, #0
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   10f68:	429a      	cmp	r2, r3
   10f6a:	bf14      	ite	ne
   10f6c:	220b      	movne	r2, #11
   10f6e:	2201      	moveq	r2, #1
  pCcb->secReq = FALSE;
   10f70:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   10f74:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
  pCcb->lastSentKey = 0;
   10f78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  smpCleanup(pCcb);
}
   10f7c:	bd10      	pop	{r4, pc}
   10f7e:	bf00      	nop

00010f80 <smpSendPairingFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpSendPairingFailed(smpCcb_t *pCcb, uint8_t reason)
{
   10f80:	b538      	push	{r3, r4, r5, lr}
   10f82:	4604      	mov	r4, r0
  uint8_t *pPacket;
  uint8_t *p;

  if ((pPacket = smpMsgAlloc(L2C_PAYLOAD_START + SMP_PAIR_FAIL_LEN)) != NULL)
   10f84:	200a      	movs	r0, #10
{
   10f86:	460d      	mov	r5, r1
  if ((pPacket = smpMsgAlloc(L2C_PAYLOAD_START + SMP_PAIR_FAIL_LEN)) != NULL)
   10f88:	f001 f916 	bl	121b8 <smpMsgAlloc>
   10f8c:	b140      	cbz	r0, 10fa0 <smpSendPairingFailed+0x20>
  {
    p = pPacket + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_FAIL);
   10f8e:	2305      	movs	r3, #5
   10f90:	7203      	strb	r3, [r0, #8]
    UINT8_TO_BSTREAM(p, reason);
   10f92:	7245      	strb	r5, [r0, #9]
   10f94:	4601      	mov	r1, r0

    smpSendPkt(pCcb, pPacket);
   10f96:	4620      	mov	r0, r4
  }
}
   10f98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    smpSendPkt(pCcb, pPacket);
   10f9c:	f001 b8ec 	b.w	12178 <smpSendPkt>
}
   10fa0:	bd38      	pop	{r3, r4, r5, pc}
   10fa2:	bf00      	nop

00010fa4 <smpActPairingFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairingFailed(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   10fa4:	b538      	push	{r3, r4, r5, lr}
   10fa6:	4604      	mov	r4, r0
  if (pCcb->pScr != NULL)
   10fa8:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
   10faa:	460d      	mov	r5, r1
  if (pCcb->pScr != NULL)
   10fac:	b118      	cbz	r0, 10fb6 <smpActPairingFailed+0x12>
    WsfBufFree(pCcb->pScr);
   10fae:	f7fe fc9b 	bl	f8e8 <WsfBufFree>
    pCcb->pScr = NULL;
   10fb2:	2300      	movs	r3, #0
   10fb4:	6323      	str	r3, [r4, #48]	; 0x30
  WsfTimerStop(&pCcb->rspTimer);
   10fb6:	4620      	mov	r0, r4
   10fb8:	f7fe ffa6 	bl	ff08 <WsfTimerStop>
  WsfTimerStop(&pCcb->waitTimer);
   10fbc:	f104 0010 	add.w	r0, r4, #16
   10fc0:	f7fe ffa2 	bl	ff08 <WsfTimerStop>
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   10fc4:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
  /* clean up */
  smpCleanup(pCcb);

  /* set connection idle */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_IDLE);
   10fc8:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  pCcb->secReq = FALSE;
   10fcc:	2200      	movs	r2, #0
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   10fce:	4293      	cmp	r3, r2
   10fd0:	bf14      	ite	ne
   10fd2:	230b      	movne	r3, #11
   10fd4:	2301      	moveq	r3, #1
   10fd6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  pCcb->secReq = FALSE;
   10fda:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  pCcb->lastSentKey = 0;
   10fde:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_IDLE);
   10fe2:	2101      	movs	r1, #1
   10fe4:	f008 fb82 	bl	196ec <DmConnSetIdle>

  /* notify DM of pairing failure */
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
   10fe8:	232b      	movs	r3, #43	; 0x2b
   10fea:	70ab      	strb	r3, [r5, #2]
  DmSmpCbackExec((dmEvt_t *) pMsg);
   10fec:	4628      	mov	r0, r5
}
   10fee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  DmSmpCbackExec((dmEvt_t *) pMsg);
   10ff2:	f008 bf9f 	b.w	19f34 <DmSmpCbackExec>
   10ff6:	bf00      	nop

00010ff8 <smpActPairingCancel>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairingCancel(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   10ff8:	b570      	push	{r4, r5, r6, lr}
   10ffa:	4604      	mov	r4, r0
  if ((pPacket = smpMsgAlloc(L2C_PAYLOAD_START + SMP_PAIR_FAIL_LEN)) != NULL)
   10ffc:	200a      	movs	r0, #10
  /* send pairing failed packet */
  smpSendPairingFailed(pCcb, pMsg->hdr.status);
   10ffe:	78ce      	ldrb	r6, [r1, #3]
{
   11000:	460d      	mov	r5, r1
  if ((pPacket = smpMsgAlloc(L2C_PAYLOAD_START + SMP_PAIR_FAIL_LEN)) != NULL)
   11002:	f001 f8d9 	bl	121b8 <smpMsgAlloc>
   11006:	b130      	cbz	r0, 11016 <smpActPairingCancel+0x1e>
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_FAIL);
   11008:	2305      	movs	r3, #5
   1100a:	4601      	mov	r1, r0
   1100c:	7203      	strb	r3, [r0, #8]
    UINT8_TO_BSTREAM(p, reason);
   1100e:	7246      	strb	r6, [r0, #9]
    smpSendPkt(pCcb, pPacket);
   11010:	4620      	mov	r0, r4
   11012:	f001 f8b1 	bl	12178 <smpSendPkt>
  if (pCcb->pScr != NULL)
   11016:	6b20      	ldr	r0, [r4, #48]	; 0x30
   11018:	b118      	cbz	r0, 11022 <smpActPairingCancel+0x2a>
    WsfBufFree(pCcb->pScr);
   1101a:	f7fe fc65 	bl	f8e8 <WsfBufFree>
    pCcb->pScr = NULL;
   1101e:	2300      	movs	r3, #0
   11020:	6323      	str	r3, [r4, #48]	; 0x30
  WsfTimerStop(&pCcb->rspTimer);
   11022:	4620      	mov	r0, r4
   11024:	f7fe ff70 	bl	ff08 <WsfTimerStop>
  WsfTimerStop(&pCcb->waitTimer);
   11028:	f104 0010 	add.w	r0, r4, #16
   1102c:	f7fe ff6c 	bl	ff08 <WsfTimerStop>
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   11030:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_IDLE);
   11034:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  pCcb->secReq = FALSE;
   11038:	2200      	movs	r2, #0
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   1103a:	4293      	cmp	r3, r2
   1103c:	bf14      	ite	ne
   1103e:	230b      	movne	r3, #11
   11040:	2301      	moveq	r3, #1
   11042:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  pCcb->secReq = FALSE;
   11046:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  pCcb->lastSentKey = 0;
   1104a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_IDLE);
   1104e:	2101      	movs	r1, #1
   11050:	f008 fb4c 	bl	196ec <DmConnSetIdle>
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
   11054:	232b      	movs	r3, #43	; 0x2b
   11056:	70ab      	strb	r3, [r5, #2]
  DmSmpCbackExec((dmEvt_t *) pMsg);
   11058:	4628      	mov	r0, r5

  smpActPairingFailed(pCcb, pMsg);
}
   1105a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  DmSmpCbackExec((dmEvt_t *) pMsg);
   1105e:	f008 bf69 	b.w	19f34 <DmSmpCbackExec>
   11062:	bf00      	nop

00011064 <smpActStorePin>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActStorePin(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   11064:	b538      	push	{r3, r4, r5, lr}
   11066:	460c      	mov	r4, r1
  /* copy authentication data to scratchpad */
  memcpy(pCcb->pScr->buf.b1, pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
   11068:	7d0a      	ldrb	r2, [r1, #20]
{
   1106a:	4605      	mov	r5, r0
  memcpy(pCcb->pScr->buf.b1, pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
   1106c:	3104      	adds	r1, #4
   1106e:	6b00      	ldr	r0, [r0, #48]	; 0x30
   11070:	f7fb f846 	bl	c100 <memcpy>

  /* zero out unused pin data */
  if (pMsg->dm.authRsp.authDataLen == SMP_PIN_LEN)
   11074:	7d23      	ldrb	r3, [r4, #20]
   11076:	2b03      	cmp	r3, #3
   11078:	d000      	beq.n	1107c <smpActStorePin+0x18>
  {
    memset(&pCcb->pScr->buf.b1[SMP_PIN_LEN], 0, SMP_OOB_LEN - SMP_PIN_LEN);
  }
}
   1107a:	bd38      	pop	{r3, r4, r5, pc}
    memset(&pCcb->pScr->buf.b1[SMP_PIN_LEN], 0, SMP_OOB_LEN - SMP_PIN_LEN);
   1107c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   1107e:	2300      	movs	r3, #0
   11080:	f8c2 3003 	str.w	r3, [r2, #3]
   11084:	f8c2 3007 	str.w	r3, [r2, #7]
   11088:	f8c2 300b 	str.w	r3, [r2, #11]
   1108c:	73d3      	strb	r3, [r2, #15]
}
   1108e:	bd38      	pop	{r3, r4, r5, pc}

00011090 <smpActPairCnfCalc1>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairCnfCalc1(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   11090:	b538      	push	{r3, r4, r5, lr}
   11092:	460d      	mov	r5, r1
  memcpy(pCcb->pScr->buf.b1, pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
   11094:	7d0a      	ldrb	r2, [r1, #20]
{
   11096:	4604      	mov	r4, r0
  memcpy(pCcb->pScr->buf.b1, pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
   11098:	3104      	adds	r1, #4
   1109a:	6b00      	ldr	r0, [r0, #48]	; 0x30
   1109c:	f7fb f830 	bl	c100 <memcpy>
  if (pMsg->dm.authRsp.authDataLen == SMP_PIN_LEN)
   110a0:	7d2b      	ldrb	r3, [r5, #20]
   110a2:	2b03      	cmp	r3, #3
   110a4:	d00c      	beq.n	110c0 <smpActPairCnfCalc1+0x30>
  /* store authentication data */
  smpActStorePin(pCcb, pMsg);

  /* get random number to scratchpad */
  SecRand(pCcb->pScr->buf.b4, SMP_RAND_LEN);
   110a6:	6b20      	ldr	r0, [r4, #48]	; 0x30
   110a8:	2110      	movs	r1, #16
   110aa:	3030      	adds	r0, #48	; 0x30
   110ac:	f005 f88c 	bl	161c8 <SecRand>

  /* execute calculation */
  smpCalcC1Part1(pCcb, pCcb->pScr->buf.b1, pCcb->pScr->buf.b4);
   110b0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   110b2:	4620      	mov	r0, r4
   110b4:	f101 0230 	add.w	r2, r1, #48	; 0x30
}
   110b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpCalcC1Part1(pCcb, pCcb->pScr->buf.b1, pCcb->pScr->buf.b4);
   110bc:	f000 be70 	b.w	11da0 <smpCalcC1Part1>
    memset(&pCcb->pScr->buf.b1[SMP_PIN_LEN], 0, SMP_OOB_LEN - SMP_PIN_LEN);
   110c0:	6b22      	ldr	r2, [r4, #48]	; 0x30
   110c2:	2300      	movs	r3, #0
   110c4:	f8c2 3003 	str.w	r3, [r2, #3]
   110c8:	f8c2 3007 	str.w	r3, [r2, #7]
   110cc:	f8c2 300b 	str.w	r3, [r2, #11]
   110d0:	73d3      	strb	r3, [r2, #15]
   110d2:	e7e8      	b.n	110a6 <smpActPairCnfCalc1+0x16>

000110d4 <smpActPairCnfCalc2>:
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairCnfCalc2(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  smpCalcC1Part2(pCcb, pCcb->pScr->buf.b1, pMsg->aes.pCiphertext);
   110d4:	684a      	ldr	r2, [r1, #4]
   110d6:	6b01      	ldr	r1, [r0, #48]	; 0x30
   110d8:	f000 bf06 	b.w	11ee8 <smpCalcC1Part2>

000110dc <smpActSendPairCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActSendPairCnf(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   110dc:	b538      	push	{r3, r4, r5, lr}
  uint8_t   *pPkt;
  uint8_t   *p;

  /* set next expected packet */
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_PAIR_CNF : SMP_CMD_PAIR_RAND;
   110de:	f890 503a 	ldrb.w	r5, [r0, #58]	; 0x3a
   110e2:	2d00      	cmp	r5, #0
{
   110e4:	460b      	mov	r3, r1
  pCcb->rspTimer.msg.event = SMP_MSG_INT_RSP_TIMEOUT;
   110e6:	f24e 120f 	movw	r2, #57615	; 0xe10f
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_PAIR_CNF : SMP_CMD_PAIR_RAND;
   110ea:	bf14      	ite	ne
   110ec:	2103      	movne	r1, #3
   110ee:	2104      	moveq	r1, #4
   110f0:	f880 103f 	strb.w	r1, [r0, #63]	; 0x3f
  pCcb->rspTimer.msg.event = SMP_MSG_INT_RSP_TIMEOUT;
   110f4:	8142      	strh	r2, [r0, #10]
  WsfTimerStartSec(&pCcb->rspTimer, SMP_TIMEOUT);
   110f6:	211e      	movs	r1, #30
{
   110f8:	4604      	mov	r4, r0
   110fa:	461d      	mov	r5, r3
  WsfTimerStartSec(&pCcb->rspTimer, SMP_TIMEOUT);
   110fc:	f7fe fe7e 	bl	fdfc <WsfTimerStartSec>

  /* start smp response timer */
  smpStartRspTimer(pCcb);

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_PAIR_CNF_LEN + L2C_PAYLOAD_START)) != NULL)
   11100:	2019      	movs	r0, #25
   11102:	f001 f859 	bl	121b8 <smpMsgAlloc>
   11106:	b1a8      	cbz	r0, 11134 <smpActSendPairCnf+0x58>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_CNF);
   11108:	2203      	movs	r2, #3
   1110a:	7202      	strb	r2, [r0, #8]
    memcpy(p, pMsg->aes.pCiphertext, SMP_CONFIRM_LEN);
   1110c:	686a      	ldr	r2, [r5, #4]
   1110e:	4603      	mov	r3, r0
   11110:	6815      	ldr	r5, [r2, #0]
   11112:	6891      	ldr	r1, [r2, #8]

    /* send packet */
    smpSendPkt(pCcb, pPkt);
   11114:	4620      	mov	r0, r4
    memcpy(p, pMsg->aes.pCiphertext, SMP_CONFIRM_LEN);
   11116:	6854      	ldr	r4, [r2, #4]
   11118:	68d2      	ldr	r2, [r2, #12]
   1111a:	f8c3 2015 	str.w	r2, [r3, #21]
   1111e:	f8c3 1011 	str.w	r1, [r3, #17]
   11122:	f8c3 5009 	str.w	r5, [r3, #9]
   11126:	f8c3 400d 	str.w	r4, [r3, #13]
    smpSendPkt(pCcb, pPkt);
   1112a:	4619      	mov	r1, r3
  }
}
   1112c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    smpSendPkt(pCcb, pPkt);
   11130:	f001 b822 	b.w	12178 <smpSendPkt>
}
   11134:	bd38      	pop	{r3, r4, r5, pc}
   11136:	bf00      	nop

00011138 <smpActPairCnfVerCalc1>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairCnfVerCalc1(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   11138:	b530      	push	{r4, r5, lr}
  uint8_t   *p;

  /* go to start of received pairing random packet */
  p = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   1113a:	684a      	ldr	r2, [r1, #4]

  /* store random value */
  memcpy(pCcb->pScr->buf.b2, p, SMP_RAND_LEN);
   1113c:	6b01      	ldr	r1, [r0, #48]	; 0x30
   1113e:	f8d2 4009 	ldr.w	r4, [r2, #9]
   11142:	f8d2 e00d 	ldr.w	lr, [r2, #13]
   11146:	f8d2 5015 	ldr.w	r5, [r2, #21]
   1114a:	f8d2 c011 	ldr.w	ip, [r2, #17]
   1114e:	f8c1 c018 	str.w	ip, [r1, #24]
   11152:	61cd      	str	r5, [r1, #28]
   11154:	610c      	str	r4, [r1, #16]
   11156:	f8c1 e014 	str.w	lr, [r1, #20]

  /* execute calculation */
  smpCalcC1Part1(pCcb, pCcb->pScr->buf.b1, p);
}
   1115a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  smpCalcC1Part1(pCcb, pCcb->pScr->buf.b1, p);
   1115e:	6b01      	ldr	r1, [r0, #48]	; 0x30
   11160:	3209      	adds	r2, #9
   11162:	f000 be1d 	b.w	11da0 <smpCalcC1Part1>
   11166:	bf00      	nop

00011168 <smpActPairCnfVerCalc2>:
   11168:	684a      	ldr	r2, [r1, #4]
   1116a:	6b01      	ldr	r1, [r0, #48]	; 0x30
   1116c:	f000 bebc 	b.w	11ee8 <smpCalcC1Part2>

00011170 <smpSendKey>:
 *
 *  \return TRUE if done sending keys, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t smpSendKey(smpCcb_t *pCcb, uint8_t keyDist)
{
   11170:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t     *pPkt;
  uint8_t     *p;
  wsfMsgHdr_t *pHdr;

  if (smpCb.lescSupported && pCcb->pScCcb->lescEnabled && pCcb->lastSentKey == 0)
   11172:	4e6c      	ldr	r6, [pc, #432]	; (11324 <smpSendKey+0x1b4>)
   11174:	f896 30ec 	ldrb.w	r3, [r6, #236]	; 0xec
{
   11178:	b08b      	sub	sp, #44	; 0x2c
   1117a:	4605      	mov	r5, r0
   1117c:	460c      	mov	r4, r1
  if (smpCb.lescSupported && pCcb->pScCcb->lescEnabled && pCcb->lastSentKey == 0)
   1117e:	b11b      	cbz	r3, 11188 <smpSendKey+0x18>
   11180:	6c43      	ldr	r3, [r0, #68]	; 0x44
   11182:	781b      	ldrb	r3, [r3, #0]
   11184:	2b00      	cmp	r3, #0
   11186:	d156      	bne.n	11236 <smpSendKey+0xc6>

    pCcb->lastSentKey = SMP_CMD_MASTER_ID;
  }

  /* check if we're done sending keys */
  if ((keyDist == 0) ||
   11188:	2c00      	cmp	r4, #0
   1118a:	d050      	beq.n	1122e <smpSendKey+0xbe>
   1118c:	2c01      	cmp	r4, #1
      (keyDist == SMP_KEY_DIST_ENC && pCcb->lastSentKey == SMP_CMD_MASTER_ID) ||
   1118e:	f895 3043 	ldrb.w	r3, [r5, #67]	; 0x43
  if ((keyDist == 0) ||
   11192:	d048      	beq.n	11226 <smpSendKey+0xb6>
      (keyDist == SMP_KEY_DIST_ENC && pCcb->lastSentKey == SMP_CMD_MASTER_ID) ||
   11194:	2c03      	cmp	r4, #3
   11196:	d948      	bls.n	1122a <smpSendKey+0xba>
      (keyDist <= (SMP_KEY_DIST_ENC | SMP_KEY_DIST_ID) && pCcb->lastSentKey == SMP_CMD_ID_ADDR_INFO) ||
   11198:	2b0a      	cmp	r3, #10
   1119a:	d048      	beq.n	1122e <smpSendKey+0xbe>
  {
      return TRUE;
  }

  /* if flow disabled return */
  if (pCcb->flowDisabled)
   1119c:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   111a0:	2b00      	cmp	r3, #0
   111a2:	d173      	bne.n	1128c <smpSendKey+0x11c>
  {
    return FALSE;
  }

  /* allocate packet buffer for largest packet size */
  if ((pPkt = smpMsgAlloc(SMP_ENC_INFO_LEN + L2C_PAYLOAD_START)) != NULL)
   111a4:	2019      	movs	r0, #25
   111a6:	f001 f807 	bl	121b8 <smpMsgAlloc>
   111aa:	4607      	mov	r7, r0
   111ac:	2800      	cmp	r0, #0
   111ae:	d06d      	beq.n	1128c <smpSendKey+0x11c>
  {
    p = pPkt + L2C_PAYLOAD_START;

    /* determine next key to send */
    if (pCcb->lastSentKey == 0 && (keyDist & SMP_KEY_DIST_ENC))
   111b0:	f895 3043 	ldrb.w	r3, [r5, #67]	; 0x43
   111b4:	2b00      	cmp	r3, #0
   111b6:	d16d      	bne.n	11294 <smpSendKey+0x124>
   111b8:	07e1      	lsls	r1, r4, #31
   111ba:	f100 808f 	bmi.w	112dc <smpSendKey+0x16c>
      /* send second part of LTK */
      UINT8_TO_BSTREAM(p, SMP_CMD_MASTER_ID);
      UINT16_TO_BSTREAM(p, pCcb->pScr->keyInd.keyData.ltk.ediv);
      memcpy(p, pCcb->pScr->keyInd.keyData.ltk.rand, SMP_RAND8_LEN);
    }
    else if ((keyDist & SMP_KEY_DIST_ID) &&
   111be:	07a2      	lsls	r2, r4, #30
   111c0:	f100 8099 	bmi.w	112f6 <smpSendKey+0x186>
      UINT8_TO_BSTREAM(p, SMP_CMD_ID_ADDR_INFO);
      UINT8_TO_BSTREAM(p, DM_ADDR_PUBLIC);
      BDA_TO_BSTREAM(p, HciGetBdAddr());

    }
    else if ((keyDist & SMP_KEY_DIST_SIGN) &&
   111c4:	0762      	lsls	r2, r4, #29
   111c6:	f140 80a1 	bpl.w	1130c <smpSendKey+0x19c>
   111ca:	2b09      	cmp	r3, #9
   111cc:	f200 809e 	bhi.w	1130c <smpSendKey+0x19c>
   111d0:	f240 2281 	movw	r2, #641	; 0x281
   111d4:	fa22 f303 	lsr.w	r3, r2, r3
   111d8:	07d8      	lsls	r0, r3, #31
   111da:	f140 8097 	bpl.w	1130c <smpSendKey+0x19c>
             (pCcb->lastSentKey == 0 || pCcb->lastSentKey == SMP_CMD_ID_ADDR_INFO ||
              pCcb->lastSentKey == SMP_CMD_MASTER_ID))
    {
      /* send SRK */
      UINT8_TO_BSTREAM(p, SMP_CMD_SIGN_INFO);
   111de:	230a      	movs	r3, #10
   111e0:	723b      	strb	r3, [r7, #8]
      Calc128Cpy(p, DmSecGetLocalCsrk());
   111e2:	f008 fed1 	bl	19f88 <DmSecGetLocalCsrk>
   111e6:	4601      	mov	r1, r0
   111e8:	f107 0009 	add.w	r0, r7, #9
   111ec:	f002 f8fa 	bl	133e4 <Calc128Cpy>
      SMP_TRACE_WARN2("smpSendKey unexpected state keyDist:%d lastSentKey:%d", keyDist, pCcb->lastSentKey);
      return TRUE;
    }

    /* set last sent key to command code */
    pCcb->lastSentKey = pPkt[L2C_PAYLOAD_START];
   111f0:	7a3b      	ldrb	r3, [r7, #8]
   111f2:	f885 3043 	strb.w	r3, [r5, #67]	; 0x43

    /* send command packet */
    smpSendPkt(pCcb, pPkt);
   111f6:	4639      	mov	r1, r7
   111f8:	4628      	mov	r0, r5
   111fa:	f000 ffbd 	bl	12178 <smpSendPkt>

    /* if flow not disabled set up to send next key */
    if (!pCcb->flowDisabled)
   111fe:	f895 403c 	ldrb.w	r4, [r5, #60]	; 0x3c
   11202:	2c00      	cmp	r4, #0
   11204:	d142      	bne.n	1128c <smpSendKey+0x11c>
    {
      if ((pHdr = WsfMsgAlloc(sizeof(wsfMsgHdr_t))) != NULL)
   11206:	2004      	movs	r0, #4
   11208:	f7fe fb9e 	bl	f948 <WsfMsgAlloc>
   1120c:	4601      	mov	r1, r0
   1120e:	2800      	cmp	r0, #0
   11210:	d03c      	beq.n	1128c <smpSendKey+0x11c>
      {
        pHdr->event = SMP_MSG_INT_SEND_NEXT_KEY;
   11212:	230c      	movs	r3, #12
   11214:	7083      	strb	r3, [r0, #2]
        pHdr->param = pCcb->connId;
   11216:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
   1121a:	8003      	strh	r3, [r0, #0]
        WsfMsgSend(smpCb.handlerId, pHdr);
   1121c:	f896 00e0 	ldrb.w	r0, [r6, #224]	; 0xe0
   11220:	f7fe fb9e 	bl	f960 <WsfMsgSend>
   11224:	e004      	b.n	11230 <smpSendKey+0xc0>
      (keyDist == SMP_KEY_DIST_ENC && pCcb->lastSentKey == SMP_CMD_MASTER_ID) ||
   11226:	2b07      	cmp	r3, #7
   11228:	d002      	beq.n	11230 <smpSendKey+0xc0>
      (keyDist <= (SMP_KEY_DIST_ENC | SMP_KEY_DIST_ID) && pCcb->lastSentKey == SMP_CMD_ID_ADDR_INFO) ||
   1122a:	2b09      	cmp	r3, #9
   1122c:	d1b4      	bne.n	11198 <smpSendKey+0x28>
      return TRUE;
   1122e:	2401      	movs	r4, #1
      }
    }
  }

  return FALSE;
}
   11230:	4620      	mov	r0, r4
   11232:	b00b      	add	sp, #44	; 0x2c
   11234:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (smpCb.lescSupported && pCcb->pScCcb->lescEnabled && pCcb->lastSentKey == 0)
   11236:	f890 7043 	ldrb.w	r7, [r0, #67]	; 0x43
   1123a:	2f00      	cmp	r7, #0
   1123c:	d1a4      	bne.n	11188 <smpSendKey+0x18>
    if (DmConnRole(pCcb->connId) == DM_ROLE_MASTER)
   1123e:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
   11242:	f008 fa95 	bl	19770 <DmConnRole>
      keyInd.type = DM_KEY_LOCAL_LTK;
   11246:	2800      	cmp	r0, #0
   11248:	bf0c      	ite	eq
   1124a:	2302      	moveq	r3, #2
   1124c:	2301      	movne	r3, #1
   1124e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    keyInd.hdr.event = DM_SEC_KEY_IND;
   11252:	232f      	movs	r3, #47	; 0x2f
   11254:	f88d 3006 	strb.w	r3, [sp, #6]
    keyInd.secLevel = smpGetScSecLevel(pCcb);
   11258:	4628      	mov	r0, r5
    keyInd.hdr.param = pCcb->connId;
   1125a:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
   1125e:	f8ad 3004 	strh.w	r3, [sp, #4]
    keyInd.secLevel = smpGetScSecLevel(pCcb);
   11262:	f000 ffc5 	bl	121f0 <smpGetScSecLevel>
    memset(keyInd.keyData.ltk.rand, 0, SMP_RAND8_LEN);
   11266:	e9cd 7706 	strd	r7, r7, [sp, #24]
    Calc128Cpy(keyInd.keyData.ltk.key, pCcb->pScCcb->pLtk->ltk_t);
   1126a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    keyInd.secLevel = smpGetScSecLevel(pCcb);
   1126c:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    Calc128Cpy(keyInd.keyData.ltk.key, pCcb->pScCcb->pLtk->ltk_t);
   11270:	6999      	ldr	r1, [r3, #24]
    keyInd.keyData.ltk.ediv = 0;
   11272:	f8ad 7020 	strh.w	r7, [sp, #32]
    Calc128Cpy(keyInd.keyData.ltk.key, pCcb->pScCcb->pLtk->ltk_t);
   11276:	3110      	adds	r1, #16
   11278:	a802      	add	r0, sp, #8
   1127a:	f002 f8b3 	bl	133e4 <Calc128Cpy>
    DmSmpCbackExec((dmEvt_t *)&keyInd);
   1127e:	a801      	add	r0, sp, #4
   11280:	f008 fe58 	bl	19f34 <DmSmpCbackExec>
    pCcb->lastSentKey = SMP_CMD_MASTER_ID;
   11284:	2307      	movs	r3, #7
   11286:	f885 3043 	strb.w	r3, [r5, #67]	; 0x43
   1128a:	e77d      	b.n	11188 <smpSendKey+0x18>
    return FALSE;
   1128c:	2400      	movs	r4, #0
}
   1128e:	4620      	mov	r0, r4
   11290:	b00b      	add	sp, #44	; 0x2c
   11292:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (pCcb->lastSentKey == SMP_CMD_ENC_INFO)
   11294:	2b06      	cmp	r3, #6
   11296:	d010      	beq.n	112ba <smpSendKey+0x14a>
    else if ((keyDist & SMP_KEY_DIST_ID) &&
   11298:	07a1      	lsls	r1, r4, #30
   1129a:	d501      	bpl.n	112a0 <smpSendKey+0x130>
             (pCcb->lastSentKey == 0 || pCcb->lastSentKey == SMP_CMD_MASTER_ID))
   1129c:	2b07      	cmp	r3, #7
   1129e:	d02a      	beq.n	112f6 <smpSendKey+0x186>
    else if (pCcb->lastSentKey == SMP_CMD_ID_INFO)
   112a0:	2b08      	cmp	r3, #8
   112a2:	d18f      	bne.n	111c4 <smpSendKey+0x54>
      UINT8_TO_BSTREAM(p, SMP_CMD_ID_ADDR_INFO);
   112a4:	2309      	movs	r3, #9
   112a6:	813b      	strh	r3, [r7, #8]
      BDA_TO_BSTREAM(p, HciGetBdAddr());
   112a8:	f7fd f8f8 	bl	e49c <HciGetBdAddr>
   112ac:	4601      	mov	r1, r0
   112ae:	f107 000a 	add.w	r0, r7, #10
   112b2:	f002 f873 	bl	1339c <BdaCpy>
    pCcb->lastSentKey = pPkt[L2C_PAYLOAD_START];
   112b6:	7a3b      	ldrb	r3, [r7, #8]
   112b8:	e79b      	b.n	111f2 <smpSendKey+0x82>
      UINT8_TO_BSTREAM(p, SMP_CMD_MASTER_ID);
   112ba:	2307      	movs	r3, #7
   112bc:	7203      	strb	r3, [r0, #8]
      UINT16_TO_BSTREAM(p, pCcb->pScr->keyInd.keyData.ltk.ediv);
   112be:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   112c0:	8b92      	ldrh	r2, [r2, #28]
   112c2:	7242      	strb	r2, [r0, #9]
   112c4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   112c6:	8b92      	ldrh	r2, [r2, #28]
   112c8:	0a12      	lsrs	r2, r2, #8
   112ca:	7282      	strb	r2, [r0, #10]
      memcpy(p, pCcb->pScr->keyInd.keyData.ltk.rand, SMP_RAND8_LEN);
   112cc:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   112ce:	6951      	ldr	r1, [r2, #20]
   112d0:	6992      	ldr	r2, [r2, #24]
   112d2:	f8c0 200f 	str.w	r2, [r0, #15]
   112d6:	f8c0 100b 	str.w	r1, [r0, #11]
   112da:	e78a      	b.n	111f2 <smpSendKey+0x82>
      smpGenerateLtk(pCcb);
   112dc:	4628      	mov	r0, r5
   112de:	f000 ff1b 	bl	12118 <smpGenerateLtk>
      UINT8_TO_BSTREAM(p, SMP_CMD_ENC_INFO);
   112e2:	2306      	movs	r3, #6
   112e4:	723b      	strb	r3, [r7, #8]
      Calc128Cpy(p, pCcb->pScr->keyInd.keyData.ltk.key);
   112e6:	6b29      	ldr	r1, [r5, #48]	; 0x30
   112e8:	f107 0009 	add.w	r0, r7, #9
   112ec:	3104      	adds	r1, #4
   112ee:	f002 f879 	bl	133e4 <Calc128Cpy>
    pCcb->lastSentKey = pPkt[L2C_PAYLOAD_START];
   112f2:	7a3b      	ldrb	r3, [r7, #8]
      Calc128Cpy(p, pCcb->pScr->keyInd.keyData.ltk.key);
   112f4:	e77d      	b.n	111f2 <smpSendKey+0x82>
      UINT8_TO_BSTREAM(p, SMP_CMD_ID_INFO);
   112f6:	2308      	movs	r3, #8
   112f8:	723b      	strb	r3, [r7, #8]
      Calc128Cpy(p, DmSecGetLocalIrk());
   112fa:	f008 fe4b 	bl	19f94 <DmSecGetLocalIrk>
   112fe:	4601      	mov	r1, r0
   11300:	f107 0009 	add.w	r0, r7, #9
   11304:	f002 f86e 	bl	133e4 <Calc128Cpy>
    pCcb->lastSentKey = pPkt[L2C_PAYLOAD_START];
   11308:	7a3b      	ldrb	r3, [r7, #8]
      Calc128Cpy(p, DmSecGetLocalIrk());
   1130a:	e772      	b.n	111f2 <smpSendKey+0x82>
      WsfMsgFree(pPkt);
   1130c:	4638      	mov	r0, r7
   1130e:	f7fe fb23 	bl	f958 <WsfMsgFree>
      SMP_TRACE_WARN2("smpSendKey unexpected state keyDist:%d lastSentKey:%d", keyDist, pCcb->lastSentKey);
   11312:	4621      	mov	r1, r4
   11314:	f895 2043 	ldrb.w	r2, [r5, #67]	; 0x43
   11318:	4803      	ldr	r0, [pc, #12]	; (11328 <smpSendKey+0x1b8>)
   1131a:	f7fe fe95 	bl	10048 <WsfTrace>
      return TRUE;
   1131e:	2401      	movs	r4, #1
   11320:	e786      	b.n	11230 <smpSendKey+0xc0>
   11322:	bf00      	nop
   11324:	10004918 	.word	0x10004918
   11328:	0001fb40 	.word	0x0001fb40

0001132c <smpProcRcvKey>:
 *
 *  \return TRUE if done receiving keys, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t smpProcRcvKey(smpCcb_t *pCcb, dmSecKeyIndEvt_t *pKeyInd, uint8_t *pBuf, uint8_t keyDist)
{
   1132c:	b570      	push	{r4, r5, r6, lr}
  bool_t    done = FALSE;
  uint8_t   cmdCode;

  /* go to start of packet */
  pBuf += L2C_PAYLOAD_START;
  cmdCode = *pBuf++;
   1132e:	f892 c008 	ldrb.w	ip, [r2, #8]

  if (cmdCode == SMP_CMD_ENC_INFO)
   11332:	f1bc 0f06 	cmp.w	ip, #6
{
   11336:	460c      	mov	r4, r1
   11338:	4605      	mov	r5, r0
   1133a:	461e      	mov	r6, r3
  cmdCode = *pBuf++;
   1133c:	f102 0109 	add.w	r1, r2, #9
  if (cmdCode == SMP_CMD_ENC_INFO)
   11340:	d02b      	beq.n	1139a <smpProcRcvKey+0x6e>
  {
    /* parse encryption information packet */
    Calc128Cpy(pKeyInd->keyData.ltk.key, pBuf);
  }
  else if (cmdCode == SMP_CMD_MASTER_ID)
   11342:	f1bc 0f07 	cmp.w	ip, #7
   11346:	d047      	beq.n	113d8 <smpProcRcvKey+0xac>
    memcpy(pKeyInd->keyData.ltk.rand, pBuf, SMP_RAND8_LEN);
    pKeyInd->secLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ? DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
    pKeyInd->type = DM_KEY_PEER_LTK;
    keyIndReady = TRUE;
  }
  else if (cmdCode == SMP_CMD_ID_INFO)
   11348:	f1bc 0f08 	cmp.w	ip, #8
   1134c:	d025      	beq.n	1139a <smpProcRcvKey+0x6e>
  {
    /* parse identity information packet */
    Calc128Cpy(pKeyInd->keyData.irk.key, pBuf);
  }
  else if (cmdCode == SMP_CMD_ID_ADDR_INFO)
   1134e:	f1bc 0f09 	cmp.w	ip, #9
   11352:	d030      	beq.n	113b6 <smpProcRcvKey+0x8a>
    BSTREAM_TO_UINT8(pKeyInd->keyData.irk.addrType, pBuf);
    BSTREAM_TO_BDA(pKeyInd->keyData.irk.bdAddr, pBuf);
    pKeyInd->type = DM_KEY_IRK;
    keyIndReady = TRUE;
  }
  else if (cmdCode == SMP_CMD_SIGN_INFO)
   11354:	f1bc 0f0a 	cmp.w	ip, #10
   11358:	d055      	beq.n	11406 <smpProcRcvKey+0xda>
  bool_t    keyIndReady = FALSE;
   1135a:	2300      	movs	r3, #0
  }

  /* set up to receive next key */

  /* if just got first part of LTK or IRK */
  if (pCcb->nextCmdCode == SMP_CMD_ENC_INFO || pCcb->nextCmdCode == SMP_CMD_ID_INFO)
   1135c:	f895 203f 	ldrb.w	r2, [r5, #63]	; 0x3f
   11360:	2a06      	cmp	r2, #6
   11362:	d00d      	beq.n	11380 <smpProcRcvKey+0x54>
   11364:	2a08      	cmp	r2, #8
   11366:	d00b      	beq.n	11380 <smpProcRcvKey+0x54>
  {
    /* wait for second part of LTK or IRK info */
    pCcb->nextCmdCode++;
  }
  /* else if got LTK and need IRK */
  else if ((keyDist & SMP_KEY_DIST_ID) && (pCcb->nextCmdCode == SMP_CMD_MASTER_ID))
   11368:	07b1      	lsls	r1, r6, #30
   1136a:	d51b      	bpl.n	113a4 <smpProcRcvKey+0x78>
   1136c:	2a07      	cmp	r2, #7
   1136e:	d02e      	beq.n	113ce <smpProcRcvKey+0xa2>
  {
    /* wait for first part of IRK */
    pCcb->nextCmdCode = SMP_CMD_ID_INFO;
  }
  /* else if got LTK or IRK and need SRK */
  else if ((keyDist & SMP_KEY_DIST_SIGN) &&
   11370:	0771      	lsls	r1, r6, #29
   11372:	d501      	bpl.n	11378 <smpProcRcvKey+0x4c>
           (pCcb->nextCmdCode == SMP_CMD_MASTER_ID || pCcb->nextCmdCode == SMP_CMD_ID_ADDR_INFO))
   11374:	2a09      	cmp	r2, #9
   11376:	d019      	beq.n	113ac <smpProcRcvKey+0x80>
    pCcb->nextCmdCode = SMP_CMD_SIGN_INFO;
  }
  else
  {
    /* done receiving keys */
    done = TRUE;
   11378:	2501      	movs	r5, #1
  }

  /* call callback if key ready */
  if (keyIndReady)
   1137a:	b93b      	cbnz	r3, 1138c <smpProcRcvKey+0x60>
    pKeyInd->hdr.event = DM_SEC_KEY_IND;
    DmSmpCbackExec((dmEvt_t *) pKeyInd);
  }

  return done;
}
   1137c:	4628      	mov	r0, r5
   1137e:	bd70      	pop	{r4, r5, r6, pc}
    pCcb->nextCmdCode++;
   11380:	3201      	adds	r2, #1
   11382:	f885 203f 	strb.w	r2, [r5, #63]	; 0x3f
  bool_t    done = FALSE;
   11386:	2500      	movs	r5, #0
  if (keyIndReady)
   11388:	2b00      	cmp	r3, #0
   1138a:	d0f7      	beq.n	1137c <smpProcRcvKey+0x50>
    pKeyInd->hdr.event = DM_SEC_KEY_IND;
   1138c:	232f      	movs	r3, #47	; 0x2f
    DmSmpCbackExec((dmEvt_t *) pKeyInd);
   1138e:	4620      	mov	r0, r4
    pKeyInd->hdr.event = DM_SEC_KEY_IND;
   11390:	70a3      	strb	r3, [r4, #2]
    DmSmpCbackExec((dmEvt_t *) pKeyInd);
   11392:	f008 fdcf 	bl	19f34 <DmSmpCbackExec>
}
   11396:	4628      	mov	r0, r5
   11398:	bd70      	pop	{r4, r5, r6, pc}
    Calc128Cpy(pKeyInd->keyData.irk.key, pBuf);
   1139a:	1d20      	adds	r0, r4, #4
   1139c:	f002 f822 	bl	133e4 <Calc128Cpy>
  bool_t    keyIndReady = FALSE;
   113a0:	2300      	movs	r3, #0
   113a2:	e7db      	b.n	1135c <smpProcRcvKey+0x30>
  else if ((keyDist & SMP_KEY_DIST_SIGN) &&
   113a4:	0770      	lsls	r0, r6, #29
   113a6:	d5e7      	bpl.n	11378 <smpProcRcvKey+0x4c>
   113a8:	2a07      	cmp	r2, #7
   113aa:	d1e3      	bne.n	11374 <smpProcRcvKey+0x48>
    pCcb->nextCmdCode = SMP_CMD_SIGN_INFO;
   113ac:	220a      	movs	r2, #10
   113ae:	f885 203f 	strb.w	r2, [r5, #63]	; 0x3f
  bool_t    done = FALSE;
   113b2:	2500      	movs	r5, #0
    pCcb->nextCmdCode = SMP_CMD_SIGN_INFO;
   113b4:	e7e1      	b.n	1137a <smpProcRcvKey+0x4e>
    BSTREAM_TO_UINT8(pKeyInd->keyData.irk.addrType, pBuf);
   113b6:	7a53      	ldrb	r3, [r2, #9]
   113b8:	76a3      	strb	r3, [r4, #26]
    BSTREAM_TO_BDA(pKeyInd->keyData.irk.bdAddr, pBuf);
   113ba:	f102 010a 	add.w	r1, r2, #10
   113be:	f104 0014 	add.w	r0, r4, #20
   113c2:	f001 ffeb 	bl	1339c <BdaCpy>
    pKeyInd->type = DM_KEY_IRK;
   113c6:	2304      	movs	r3, #4
   113c8:	77a3      	strb	r3, [r4, #30]
    keyIndReady = TRUE;
   113ca:	2301      	movs	r3, #1
   113cc:	e7c6      	b.n	1135c <smpProcRcvKey+0x30>
    pCcb->nextCmdCode = SMP_CMD_ID_INFO;
   113ce:	2208      	movs	r2, #8
   113d0:	f885 203f 	strb.w	r2, [r5, #63]	; 0x3f
  bool_t    done = FALSE;
   113d4:	2500      	movs	r5, #0
    pCcb->nextCmdCode = SMP_CMD_ID_INFO;
   113d6:	e7d0      	b.n	1137a <smpProcRcvKey+0x4e>
    BSTREAM_TO_UINT16(pKeyInd->keyData.ltk.ediv, pBuf);
   113d8:	7a91      	ldrb	r1, [r2, #10]
   113da:	7a53      	ldrb	r3, [r2, #9]
   113dc:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   113e0:	83a3      	strh	r3, [r4, #28]
    memcpy(pKeyInd->keyData.ltk.rand, pBuf, SMP_RAND8_LEN);
   113e2:	f8d2 300b 	ldr.w	r3, [r2, #11]
   113e6:	f8d2 200f 	ldr.w	r2, [r2, #15]
   113ea:	61a2      	str	r2, [r4, #24]
   113ec:	6163      	str	r3, [r4, #20]
    pKeyInd->secLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ? DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
   113ee:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
    pKeyInd->type = DM_KEY_PEER_LTK;
   113f2:	2302      	movs	r3, #2
    pKeyInd->secLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ? DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
   113f4:	f012 0f04 	tst.w	r2, #4
   113f8:	bf14      	ite	ne
   113fa:	461a      	movne	r2, r3
   113fc:	2201      	moveq	r2, #1
    pKeyInd->type = DM_KEY_PEER_LTK;
   113fe:	77a3      	strb	r3, [r4, #30]
    pKeyInd->secLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ? DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
   11400:	77e2      	strb	r2, [r4, #31]
    keyIndReady = TRUE;
   11402:	2301      	movs	r3, #1
   11404:	e7aa      	b.n	1135c <smpProcRcvKey+0x30>
    Calc128Cpy(pKeyInd->keyData.csrk.key, pBuf);
   11406:	1d20      	adds	r0, r4, #4
   11408:	f001 ffec 	bl	133e4 <Calc128Cpy>
    pKeyInd->type = DM_KEY_CSRK;
   1140c:	2308      	movs	r3, #8
   1140e:	77a3      	strb	r3, [r4, #30]
    keyIndReady = TRUE;
   11410:	2301      	movs	r3, #1
   11412:	e7a3      	b.n	1135c <smpProcRcvKey+0x30>

00011414 <smpActMaxAttempts>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActMaxAttempts(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   11414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11416:	4604      	mov	r4, r0
  if ((pPacket = smpMsgAlloc(L2C_PAYLOAD_START + SMP_PAIR_FAIL_LEN)) != NULL)
   11418:	200a      	movs	r0, #10
  smpSendPairingFailed(pCcb, pMsg->hdr.status);
   1141a:	78ce      	ldrb	r6, [r1, #3]
{
   1141c:	460d      	mov	r5, r1
  if ((pPacket = smpMsgAlloc(L2C_PAYLOAD_START + SMP_PAIR_FAIL_LEN)) != NULL)
   1141e:	f000 fecb 	bl	121b8 <smpMsgAlloc>
   11422:	b130      	cbz	r0, 11432 <smpActMaxAttempts+0x1e>
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_FAIL);
   11424:	2305      	movs	r3, #5
   11426:	4601      	mov	r1, r0
   11428:	7203      	strb	r3, [r0, #8]
    UINT8_TO_BSTREAM(p, reason);
   1142a:	7246      	strb	r6, [r0, #9]
    smpSendPkt(pCcb, pPacket);
   1142c:	4620      	mov	r0, r4
   1142e:	f000 fea3 	bl	12178 <smpSendPkt>
  if (pCcb->pScr != NULL)
   11432:	6b20      	ldr	r0, [r4, #48]	; 0x30
   11434:	b118      	cbz	r0, 1143e <smpActMaxAttempts+0x2a>
    WsfBufFree(pCcb->pScr);
   11436:	f7fe fa57 	bl	f8e8 <WsfBufFree>
    pCcb->pScr = NULL;
   1143a:	2300      	movs	r3, #0
   1143c:	6323      	str	r3, [r4, #48]	; 0x30
  WsfTimerStop(&pCcb->rspTimer);
   1143e:	4620      	mov	r0, r4
  WsfTimerStop(&pCcb->waitTimer);
   11440:	f104 0710 	add.w	r7, r4, #16
  WsfTimerStop(&pCcb->rspTimer);
   11444:	f7fe fd60 	bl	ff08 <WsfTimerStop>
  WsfTimerStop(&pCcb->waitTimer);
   11448:	4638      	mov	r0, r7
   1144a:	f7fe fd5d 	bl	ff08 <WsfTimerStop>
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   1144e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_IDLE);
   11452:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  pCcb->secReq = FALSE;
   11456:	2600      	movs	r6, #0
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   11458:	42b3      	cmp	r3, r6
   1145a:	bf14      	ite	ne
   1145c:	230b      	movne	r3, #11
   1145e:	2301      	moveq	r3, #1
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_IDLE);
   11460:	4632      	mov	r2, r6
   11462:	2101      	movs	r1, #1
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   11464:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  pCcb->secReq = FALSE;
   11468:	f884 603b 	strb.w	r6, [r4, #59]	; 0x3b
  pCcb->lastSentKey = 0;
   1146c:	f884 6043 	strb.w	r6, [r4, #67]	; 0x43
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_IDLE);
   11470:	f008 f93c 	bl	196ec <DmConnSetIdle>
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
   11474:	232b      	movs	r3, #43	; 0x2b
   11476:	70ab      	strb	r3, [r5, #2]
  DmSmpCbackExec((dmEvt_t *) pMsg);
   11478:	4628      	mov	r0, r5
   1147a:	f008 fd5b 	bl	19f34 <DmSmpCbackExec>

  /* send paring failed packet; note this stops the timer so call this first */
  smpActPairingCancel(pCcb, pMsg);

  /* Check SMP device DB to determine time to wait before pairing can happen again */
  timeout = SmpDbMaxAttemptReached(pCcb->connId);
   1147e:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
   11482:	f000 fa33 	bl	118ec <SmpDbMaxAttemptReached>

  /* start wait interval timer */
  pCcb->waitTimer.msg.event = SMP_MSG_INT_WI_TIMEOUT;
   11486:	2310      	movs	r3, #16
  timeout = SmpDbMaxAttemptReached(pCcb->connId);
   11488:	4601      	mov	r1, r0
  pCcb->waitTimer.msg.event = SMP_MSG_INT_WI_TIMEOUT;
   1148a:	76a3      	strb	r3, [r4, #26]
  WsfTimerStartMs(&pCcb->waitTimer, timeout);
   1148c:	4638      	mov	r0, r7
   1148e:	f7fe fcf7 	bl	fe80 <WsfTimerStartMs>

  /* clear attempts count */
  pCcb->attempts = 0;
   11492:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
}
   11496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00011498 <smpActAttemptRcvd>:
 */
/*************************************************************************************************/
void smpActAttemptRcvd(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  /* set that attempt was received */
  pCcb->attempts = 1;
   11498:	2301      	movs	r3, #1
   1149a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
}
   1149e:	4770      	bx	lr

000114a0 <smpActNotifyDmAttemptsFailure>:
/*************************************************************************************************/
void smpActNotifyDmAttemptsFailure(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  /* notify DM of pairing failure */
  pMsg->hdr.status = SMP_ERR_ATTEMPTS;
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
   114a0:	f640 132b 	movw	r3, #2347	; 0x92b
{
   114a4:	4608      	mov	r0, r1
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
   114a6:	804b      	strh	r3, [r1, #2]
  DmSmpCbackExec((dmEvt_t *) pMsg);
   114a8:	f008 bd44 	b.w	19f34 <DmSmpCbackExec>

000114ac <smpActNotifyDmRspToFailure>:
/*************************************************************************************************/
void smpActNotifyDmRspToFailure(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  /* notify DM of pairing failure */
  pMsg->hdr.status = SMP_ERR_TIMEOUT;
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
   114ac:	f24e 132b 	movw	r3, #57643	; 0xe12b
{
   114b0:	4608      	mov	r0, r1
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
   114b2:	804b      	strh	r3, [r1, #2]
  DmSmpCbackExec((dmEvt_t *) pMsg);
   114b4:	f008 bd3e 	b.w	19f34 <DmSmpCbackExec>

000114b8 <smpActCheckAttempts>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActCheckAttempts(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   114b8:	b538      	push	{r3, r4, r5, lr}
  /* check if attempt was received */
  if (pCcb->attempts)
   114ba:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
   114be:	b903      	cbnz	r3, 114c2 <smpActCheckAttempts+0xa>
    /* notify DM of pairing failure */
    smpActNotifyDmAttemptsFailure(pCcb, pMsg);

    smpCleanup(pCcb);
  }
}
   114c0:	bd38      	pop	{r3, r4, r5, pc}
    pCcb->attempts = 0;
   114c2:	2300      	movs	r3, #0
   114c4:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    smpSendPairingFailed(pCcb, SMP_ERR_ATTEMPTS);
   114c8:	4604      	mov	r4, r0
  if ((pPacket = smpMsgAlloc(L2C_PAYLOAD_START + SMP_PAIR_FAIL_LEN)) != NULL)
   114ca:	200a      	movs	r0, #10
   114cc:	460d      	mov	r5, r1
   114ce:	f000 fe73 	bl	121b8 <smpMsgAlloc>
   114d2:	4601      	mov	r1, r0
   114d4:	b128      	cbz	r0, 114e2 <smpActCheckAttempts+0x2a>
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_FAIL);
   114d6:	f640 1305 	movw	r3, #2309	; 0x905
   114da:	8103      	strh	r3, [r0, #8]
    smpSendPkt(pCcb, pPacket);
   114dc:	4620      	mov	r0, r4
   114de:	f000 fe4b 	bl	12178 <smpSendPkt>
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
   114e2:	f640 132b 	movw	r3, #2347	; 0x92b
  DmSmpCbackExec((dmEvt_t *) pMsg);
   114e6:	4628      	mov	r0, r5
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
   114e8:	806b      	strh	r3, [r5, #2]
  DmSmpCbackExec((dmEvt_t *) pMsg);
   114ea:	f008 fd23 	bl	19f34 <DmSmpCbackExec>
  if (pCcb->pScr != NULL)
   114ee:	6b20      	ldr	r0, [r4, #48]	; 0x30
   114f0:	b118      	cbz	r0, 114fa <smpActCheckAttempts+0x42>
    WsfBufFree(pCcb->pScr);
   114f2:	f7fe f9f9 	bl	f8e8 <WsfBufFree>
    pCcb->pScr = NULL;
   114f6:	2300      	movs	r3, #0
   114f8:	6323      	str	r3, [r4, #48]	; 0x30
  WsfTimerStop(&pCcb->rspTimer);
   114fa:	4620      	mov	r0, r4
   114fc:	f7fe fd04 	bl	ff08 <WsfTimerStop>
  WsfTimerStop(&pCcb->waitTimer);
   11500:	f104 0010 	add.w	r0, r4, #16
   11504:	f7fe fd00 	bl	ff08 <WsfTimerStop>
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   11508:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
  pCcb->secReq = FALSE;
   1150c:	2300      	movs	r3, #0
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   1150e:	429a      	cmp	r2, r3
   11510:	bf14      	ite	ne
   11512:	220b      	movne	r2, #11
   11514:	2201      	moveq	r2, #1
  pCcb->secReq = FALSE;
   11516:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   1151a:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
  pCcb->lastSentKey = 0;
   1151e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
}
   11522:	bd38      	pop	{r3, r4, r5, pc}

00011524 <smpActPairingCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairingCmpl(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   11524:	b510      	push	{r4, lr}
   11526:	4604      	mov	r4, r0
  if (pCcb->pScr != NULL)
   11528:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
   1152a:	b082      	sub	sp, #8
  if (pCcb->pScr != NULL)
   1152c:	b118      	cbz	r0, 11536 <smpActPairingCmpl+0x12>
    WsfBufFree(pCcb->pScr);
   1152e:	f7fe f9db 	bl	f8e8 <WsfBufFree>
    pCcb->pScr = NULL;
   11532:	2300      	movs	r3, #0
   11534:	6323      	str	r3, [r4, #48]	; 0x30
  WsfTimerStop(&pCcb->rspTimer);
   11536:	4620      	mov	r0, r4
   11538:	f7fe fce6 	bl	ff08 <WsfTimerStop>
  WsfTimerStop(&pCcb->waitTimer);
   1153c:	f104 0010 	add.w	r0, r4, #16
   11540:	f7fe fce2 	bl	ff08 <WsfTimerStop>
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   11544:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
  dmSecPairCmplIndEvt_t pairCmpl;

  smpCleanup(pCcb);

  /* set connection idle */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_IDLE);
   11548:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  pCcb->secReq = FALSE;
   1154c:	2200      	movs	r2, #0
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   1154e:	4293      	cmp	r3, r2
   11550:	bf14      	ite	ne
   11552:	230b      	movne	r3, #11
   11554:	2301      	moveq	r3, #1
  pCcb->secReq = FALSE;
   11556:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   1155a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  pCcb->lastSentKey = 0;
   1155e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_IDLE);
   11562:	2101      	movs	r1, #1
   11564:	f008 f8c2 	bl	196ec <DmConnSetIdle>

  pairCmpl.auth = pCcb->auth;
   11568:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
  pairCmpl.hdr.param = pCcb->connId;
   1156c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  pairCmpl.auth = pCcb->auth;
   11570:	f88d 1004 	strb.w	r1, [sp, #4]
  pairCmpl.hdr.event = DM_SEC_PAIR_CMPL_IND;
   11574:	232a      	movs	r3, #42	; 0x2a
  DmSmpCbackExec((dmEvt_t *) &pairCmpl);
   11576:	4668      	mov	r0, sp
  pairCmpl.hdr.param = pCcb->connId;
   11578:	f8ad 2000 	strh.w	r2, [sp]
  pairCmpl.hdr.event = DM_SEC_PAIR_CMPL_IND;
   1157c:	f88d 3002 	strb.w	r3, [sp, #2]
  DmSmpCbackExec((dmEvt_t *) &pairCmpl);
   11580:	f008 fcd8 	bl	19f34 <DmSmpCbackExec>
}
   11584:	b002      	add	sp, #8
   11586:	bd10      	pop	{r4, pc}

00011588 <smpSmExecute>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpSmExecute(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   11588:	b570      	push	{r4, r5, r6, lr}
   1158a:	4604      	mov	r4, r0
#if SMP_EXTRA_TRACE == TRUE
  if (smpCb.lescSupported)
    SMP_TRACE_INFO2("SMP Exe: evt=%s st=%s", smpEventStr(pMsg->hdr.event), smpStateStr(pCcb->state));
  else
#endif
    SMP_TRACE_INFO2("smpSmExecute event=%d state=%d", pMsg->hdr.event, pCcb->state);
   1158c:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
   11590:	4818      	ldr	r0, [pc, #96]	; (115f4 <smpSmExecute+0x6c>)
{
   11592:	460d      	mov	r5, r1
    SMP_TRACE_INFO2("smpSmExecute event=%d state=%d", pMsg->hdr.event, pCcb->state);
   11594:	7889      	ldrb	r1, [r1, #2]
   11596:	f7fe fd57 	bl	10048 <WsfTrace>

  /* look up state table for state */
  pSmIf = DmConnRole(pCcb->connId) == DM_ROLE_SLAVE? smpCb.pSlave : smpCb.pMaster;
   1159a:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
   1159e:	f008 f8e7 	bl	19770 <DmConnRole>
   115a2:	4b15      	ldr	r3, [pc, #84]	; (115f8 <smpSmExecute+0x70>)
  pTblEntry = pSmIf->pStateTbl[pCcb->state];
   115a4:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  {
    /* look for event match and execute action */
    do
    {
      /* if match */
      if ((*pTblEntry)[SMP_SM_POS_EVENT] == pMsg->hdr.event)
   115a8:	f895 c002 	ldrb.w	ip, [r5, #2]
  pSmIf = DmConnRole(pCcb->connId) == DM_ROLE_SLAVE? smpCb.pSlave : smpCb.pMaster;
   115ac:	e9d3 1336 	ldrd	r1, r3, [r3, #216]	; 0xd8
   115b0:	2801      	cmp	r0, #1
   115b2:	bf18      	it	ne
   115b4:	4619      	movne	r1, r3
  pTblEntry = pSmIf->pStateTbl[pCcb->state];
   115b6:	680b      	ldr	r3, [r1, #0]
   115b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   115bc:	e002      	b.n	115c4 <smpSmExecute+0x3c>

      /* next entry */
      pTblEntry++;

      /* while not at end */
    } while ((*pTblEntry)[SMP_SM_POS_EVENT] != 0);
   115be:	f813 2f03 	ldrb.w	r2, [r3, #3]!
   115c2:	b172      	cbz	r2, 115e2 <smpSmExecute+0x5a>
      if ((*pTblEntry)[SMP_SM_POS_EVENT] == pMsg->hdr.event)
   115c4:	781a      	ldrb	r2, [r3, #0]
   115c6:	4562      	cmp	r2, ip
   115c8:	d1f9      	bne.n	115be <smpSmExecute+0x36>
        pCcb->state = (*pTblEntry)[SMP_SM_POS_NEXT_STATE];
   115ca:	785a      	ldrb	r2, [r3, #1]
   115cc:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        (*pSmIf->pActionTbl[(*pTblEntry)[SMP_SM_POS_ACTION]])(pCcb, pMsg);
   115d0:	789a      	ldrb	r2, [r3, #2]
   115d2:	684b      	ldr	r3, [r1, #4]
   115d4:	4620      	mov	r0, r4
   115d6:	4629      	mov	r1, r5
   115d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    {
      /* set it up */
      pTblEntry = pSmIf->pCommonTbl;
    }
  }
}
   115dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        (*pSmIf->pActionTbl[(*pTblEntry)[SMP_SM_POS_ACTION]])(pCcb, pMsg);
   115e0:	4718      	bx	r3
    if (pTblEntry == (pSmIf->pCommonTbl + SMP_STATE_TBL_COMMON_MAX - 1))
   115e2:	688a      	ldr	r2, [r1, #8]
   115e4:	f102 000c 	add.w	r0, r2, #12
   115e8:	4283      	cmp	r3, r0
   115ea:	d001      	beq.n	115f0 <smpSmExecute+0x68>
      pTblEntry = pSmIf->pCommonTbl;
   115ec:	4613      	mov	r3, r2
   115ee:	e7e9      	b.n	115c4 <smpSmExecute+0x3c>
}
   115f0:	bd70      	pop	{r4, r5, r6, pc}
   115f2:	bf00      	nop
   115f4:	0001fb78 	.word	0x0001fb78
   115f8:	10004918 	.word	0x10004918

000115fc <smpProcPairing>:
{
   115fc:	b500      	push	{lr}
  *pDisplay = FALSE;
   115fe:	2300      	movs	r3, #0
   11600:	7013      	strb	r3, [r2, #0]
  *pOob = FALSE;
   11602:	700b      	strb	r3, [r1, #0]
  if (pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT &&
   11604:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   11608:	2b01      	cmp	r3, #1
{
   1160a:	b083      	sub	sp, #12
  if (pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT &&
   1160c:	d064      	beq.n	116d8 <smpProcPairing+0xdc>
  else if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG) ||
   1160e:	f890 1023 	ldrb.w	r1, [r0, #35]	; 0x23
   11612:	074b      	lsls	r3, r1, #29
   11614:	d423      	bmi.n	1165e <smpProcPairing+0x62>
           (pCcb->pairRsp[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG))
   11616:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
  else if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG) ||
   1161a:	f013 0f04 	tst.w	r3, #4
   1161e:	d11e      	bne.n	1165e <smpProcPairing+0x62>
    pCcb->auth = pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS] & ~SMP_AUTH_MITM_FLAG;
   11620:	ea01 0c03 	and.w	ip, r1, r3
  if (justWorks && (pSmpCfg->auth & localAuth & SMP_AUTH_MITM_FLAG))
   11624:	4a3b      	ldr	r2, [pc, #236]	; (11714 <smpProcPairing+0x118>)
    pCcb->auth = pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS] & ~SMP_AUTH_MITM_FLAG;
   11626:	f02c 0c04 	bic.w	ip, ip, #4
   1162a:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
  if (justWorks && (pSmpCfg->auth & localAuth & SMP_AUTH_MITM_FLAG))
   1162e:	6812      	ldr	r2, [r2, #0]
  localAuth = (pCcb->initiator) ? pCcb->pairReq[SMP_AUTHREQ_POS] : pCcb->pairRsp[SMP_AUTHREQ_POS];
   11630:	f890 c03a 	ldrb.w	ip, [r0, #58]	; 0x3a
   11634:	f1bc 0f00 	cmp.w	ip, #0
   11638:	bf18      	it	ne
   1163a:	460b      	movne	r3, r1
  if (justWorks && (pSmpCfg->auth & localAuth & SMP_AUTH_MITM_FLAG))
   1163c:	7a11      	ldrb	r1, [r2, #8]
   1163e:	400b      	ands	r3, r1
   11640:	075b      	lsls	r3, r3, #29
   11642:	d455      	bmi.n	116f0 <smpProcPairing+0xf4>
  if (pCcb->pairReq[SMP_MAXKEY_POS] < pSmpCfg->minKeyLen ||
   11644:	7953      	ldrb	r3, [r2, #5]
   11646:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   1164a:	429a      	cmp	r2, r3
   1164c:	d332      	bcc.n	116b4 <smpProcPairing+0xb8>
   1164e:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
   11652:	429a      	cmp	r2, r3
   11654:	d32e      	bcc.n	116b4 <smpProcPairing+0xb8>
  return TRUE;
   11656:	2001      	movs	r0, #1
}
   11658:	b003      	add	sp, #12
   1165a:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((pCcb->pairReq[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* initiator has i/o and */
   1165e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
   11662:	2b03      	cmp	r3, #3
   11664:	d035      	beq.n	116d2 <smpProcPairing+0xd6>
        (pCcb->pairRsp[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* responder has i/o and */
   11666:	f890 c028 	ldrb.w	ip, [r0, #40]	; 0x28
    if ((pCcb->pairReq[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* initiator has i/o and */
   1166a:	f1bc 0f03 	cmp.w	ip, #3
   1166e:	d030      	beq.n	116d2 <smpProcPairing+0xd6>
        (pCcb->pairRsp[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* responder has i/o and */
   11670:	2b01      	cmp	r3, #1
   11672:	d937      	bls.n	116e4 <smpProcPairing+0xe8>
         (pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO) ||   /* initiator is display y/n  or */
   11674:	2b04      	cmp	r3, #4
   11676:	d045      	beq.n	11704 <smpProcPairing+0x108>
   11678:	2300      	movs	r3, #0
   1167a:	4619      	mov	r1, r3
      *pDisplay =
   1167c:	7011      	strb	r1, [r2, #0]
      if (!(pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY &&
   1167e:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
   11682:	2902      	cmp	r1, #2
   11684:	d039      	beq.n	116fa <smpProcPairing+0xfe>
        *pDisplay ^= !pCcb->initiator;
   11686:	f890 103a 	ldrb.w	r1, [r0, #58]	; 0x3a
   1168a:	2900      	cmp	r1, #0
   1168c:	bf08      	it	eq
   1168e:	f083 0301 	eoreq.w	r3, r3, #1
   11692:	7013      	strb	r3, [r2, #0]
    pCcb->auth = (pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS]) | SMP_AUTH_MITM_FLAG;
   11694:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
   11698:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
  if (justWorks && (pSmpCfg->auth & localAuth & SMP_AUTH_MITM_FLAG))
   1169c:	4a1d      	ldr	r2, [pc, #116]	; (11714 <smpProcPairing+0x118>)
    pCcb->auth = (pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS]) | SMP_AUTH_MITM_FLAG;
   1169e:	400b      	ands	r3, r1
  if (justWorks && (pSmpCfg->auth & localAuth & SMP_AUTH_MITM_FLAG))
   116a0:	6812      	ldr	r2, [r2, #0]
    pCcb->auth = (pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS]) | SMP_AUTH_MITM_FLAG;
   116a2:	f043 0304 	orr.w	r3, r3, #4
   116a6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (pCcb->pairReq[SMP_MAXKEY_POS] < pSmpCfg->minKeyLen ||
   116aa:	7953      	ldrb	r3, [r2, #5]
   116ac:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   116b0:	429a      	cmp	r2, r3
   116b2:	d2cc      	bcs.n	1164e <smpProcPairing+0x52>
    hdr.param = pCcb->connId;
   116b4:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   116b8:	f240 6303 	movw	r3, #1539	; 0x603
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   116bc:	a901      	add	r1, sp, #4
    hdr.param = pCcb->connId;
   116be:	f8ad 2004 	strh.w	r2, [sp, #4]
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   116c2:	f8ad 3006 	strh.w	r3, [sp, #6]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   116c6:	f7ff ff5f 	bl	11588 <smpSmExecute>
    return FALSE;
   116ca:	2000      	movs	r0, #0
}
   116cc:	b003      	add	sp, #12
   116ce:	f85d fb04 	ldr.w	pc, [sp], #4
           (pCcb->pairRsp[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG))
   116d2:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   116d6:	e7a3      	b.n	11620 <smpProcPairing+0x24>
  if (pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT &&
   116d8:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   116dc:	2b01      	cmp	r3, #1
   116de:	d196      	bne.n	1160e <smpProcPairing+0x12>
    *pOob = SMP_OOB_DATA_PRESENT;
   116e0:	700b      	strb	r3, [r1, #0]
  if (!justWorks)
   116e2:	e7d7      	b.n	11694 <smpProcPairing+0x98>
        !(((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||     /* both don't have display only */
   116e4:	f1bc 0f01 	cmp.w	ip, #1
   116e8:	d9f3      	bls.n	116d2 <smpProcPairing+0xd6>
   116ea:	2301      	movs	r3, #1
   116ec:	4619      	mov	r1, r3
   116ee:	e7c5      	b.n	1167c <smpProcPairing+0x80>
    hdr.param = pCcb->connId;
   116f0:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   116f4:	f240 3303 	movw	r3, #771	; 0x303
   116f8:	e7e0      	b.n	116bc <smpProcPairing+0xc0>
      if (!(pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY &&
   116fa:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
   116fe:	2902      	cmp	r1, #2
   11700:	d1c1      	bne.n	11686 <smpProcPairing+0x8a>
   11702:	e7c7      	b.n	11694 <smpProcPairing+0x98>
         ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_DISP) &&     /* initiator is key/display and */
   11704:	f1bc 0f02 	cmp.w	ip, #2
   11708:	d0ef      	beq.n	116ea <smpProcPairing+0xee>
          (pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY ||      /* responder is key only or key/display */
   1170a:	f1bc 0f04 	cmp.w	ip, #4
   1170e:	d1b3      	bne.n	11678 <smpProcPairing+0x7c>
   11710:	e7eb      	b.n	116ea <smpProcPairing+0xee>
   11712:	bf00      	nop
   11714:	10002b10 	.word	0x10002b10

00011718 <smpAuthReq>:
{
   11718:	b500      	push	{lr}
  if (pCcb->auth & SMP_AUTH_MITM_FLAG)
   1171a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    buf.authReq.hdr.param = pCcb->connId;
   1171e:	f890 c03d 	ldrb.w	ip, [r0, #61]	; 0x3d
  if (pCcb->auth & SMP_AUTH_MITM_FLAG)
   11722:	f013 0304 	ands.w	r3, r3, #4
{
   11726:	b087      	sub	sp, #28
  if (pCcb->auth & SMP_AUTH_MITM_FLAG)
   11728:	d00e      	beq.n	11748 <smpAuthReq+0x30>
    buf.authReq.hdr.event = DM_SEC_AUTH_REQ_IND;
   1172a:	232e      	movs	r3, #46	; 0x2e
    DmSmpCbackExec((dmEvt_t *) &buf.authReq);
   1172c:	4668      	mov	r0, sp
    buf.authReq.hdr.param = pCcb->connId;
   1172e:	f8ad c000 	strh.w	ip, [sp]
    buf.authReq.hdr.event = DM_SEC_AUTH_REQ_IND;
   11732:	f88d 3002 	strb.w	r3, [sp, #2]
    buf.authReq.oob = oob;
   11736:	f88d 1004 	strb.w	r1, [sp, #4]
    buf.authReq.display = display;
   1173a:	f88d 2005 	strb.w	r2, [sp, #5]
    DmSmpCbackExec((dmEvt_t *) &buf.authReq);
   1173e:	f008 fbf9 	bl	19f34 <DmSmpCbackExec>
}
   11742:	b007      	add	sp, #28
   11744:	f85d fb04 	ldr.w	pc, [sp], #4
    buf.authRsp.hdr.event = SMP_MSG_API_AUTH_RSP;
   11748:	2104      	movs	r1, #4
    buf.authRsp.authDataLen = SMP_PIN_LEN;
   1174a:	2203      	movs	r2, #3
    buf.authRsp.hdr.event = SMP_MSG_API_AUTH_RSP;
   1174c:	f88d 1002 	strb.w	r1, [sp, #2]
    smpSmExecute(pCcb, (smpMsg_t *) &buf.authRsp);
   11750:	4669      	mov	r1, sp
    buf.authRsp.hdr.param = pCcb->connId;
   11752:	f8ad c000 	strh.w	ip, [sp]
    buf.authRsp.authData[0] = 0;
   11756:	f8ad 3004 	strh.w	r3, [sp, #4]
    buf.authRsp.authData[2] = 0;
   1175a:	f88d 3006 	strb.w	r3, [sp, #6]
    buf.authRsp.authDataLen = SMP_PIN_LEN;
   1175e:	f88d 2014 	strb.w	r2, [sp, #20]
    smpSmExecute(pCcb, (smpMsg_t *) &buf.authRsp);
   11762:	f7ff ff11 	bl	11588 <smpSmExecute>
}
   11766:	b007      	add	sp, #28
   11768:	f85d fb04 	ldr.w	pc, [sp], #4

0001176c <smpDbGetRecord>:
 *
 *  \return Pointer to the record associated with the connection or the common record.
 */
/*************************************************************************************************/
static smpDbDevice_t *smpDbGetRecord(dmConnId_t connId)
{
   1176c:	b570      	push	{r4, r5, r6, lr}
   1176e:	4604      	mov	r4, r0
  smpDbDevice_t *pRec = &smpDbCb.db[SMP_DB_FIRST_REC];
  uint8_t addrType = DmHostAddrType(DmConnPeerAddrType(connId));
   11770:	f007 ff76 	bl	19660 <DmConnPeerAddrType>
   11774:	f008 f9d2 	bl	19b1c <DmHostAddrType>
   11778:	4605      	mov	r5, r0
  uint8_t *pAddr = DmConnPeerAddr(connId);
   1177a:	4620      	mov	r0, r4
   1177c:	f007 ff7a 	bl	19674 <DmConnPeerAddr>
  uint8_t i;

  SMP_TRACE_INFO2("smpDbGetRecord: connId: %d type: %d", connId, addrType);
   11780:	4621      	mov	r1, r4
  if (pRec->failCount > 0)
   11782:	4c28      	ldr	r4, [pc, #160]	; (11824 <smpDbGetRecord+0xb8>)
  SMP_TRACE_INFO2("smpDbGetRecord: connId: %d type: %d", connId, addrType);
   11784:	462a      	mov	r2, r5
  uint8_t *pAddr = DmConnPeerAddr(connId);
   11786:	4606      	mov	r6, r0
  SMP_TRACE_INFO2("smpDbGetRecord: connId: %d type: %d", connId, addrType);
   11788:	4827      	ldr	r0, [pc, #156]	; (11828 <smpDbGetRecord+0xbc>)
   1178a:	f7fe fc5d 	bl	10048 <WsfTrace>
  if (pRec->failCount > 0)
   1178e:	7fe3      	ldrb	r3, [r4, #31]
   11790:	b91b      	cbnz	r3, 1179a <smpDbGetRecord+0x2e>
  if (pRec->lockMs > 0)
   11792:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11794:	b90b      	cbnz	r3, 1179a <smpDbGetRecord+0x2e>
  if (pRec->attemptMult > 0)
   11796:	8c23      	ldrh	r3, [r4, #32]
   11798:	b113      	cbz	r3, 117a0 <smpDbGetRecord+0x34>

  for (i = SMP_DB_FIRST_REC; i < SMP_DB_MAX_DEVICES; i++, pRec++)
  {
    if (smpDbRecordInUse(pRec) && (pRec->addrType == addrType) && BdaCmp(pRec->peerAddr, pAddr))
   1179a:	7fa3      	ldrb	r3, [r4, #30]
   1179c:	42ab      	cmp	r3, r5
   1179e:	d031      	beq.n	11804 <smpDbGetRecord+0x98>
  if (pRec->failCount > 0)
   117a0:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
   117a4:	b91b      	cbnz	r3, 117ae <smpDbGetRecord+0x42>
  if (pRec->lockMs > 0)
   117a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   117a8:	b90b      	cbnz	r3, 117ae <smpDbGetRecord+0x42>
  if (pRec->attemptMult > 0)
   117aa:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   117ac:	b11b      	cbz	r3, 117b6 <smpDbGetRecord+0x4a>
    if (smpDbRecordInUse(pRec) && (pRec->addrType == addrType) && BdaCmp(pRec->peerAddr, pAddr))
   117ae:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   117b2:	42ab      	cmp	r3, r5
   117b4:	d02e      	beq.n	11814 <smpDbGetRecord+0xa8>
  SMP_TRACE_INFO0("smpDbAddDevice");
   117b6:	481d      	ldr	r0, [pc, #116]	; (1182c <smpDbGetRecord+0xc0>)
   117b8:	f7fe fc46 	bl	10048 <WsfTrace>
  if (pRec->failCount > 0)
   117bc:	7fe3      	ldrb	r3, [r4, #31]
   117be:	b993      	cbnz	r3, 117e6 <smpDbGetRecord+0x7a>
  if (pRec->lockMs > 0)
   117c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   117c2:	b983      	cbnz	r3, 117e6 <smpDbGetRecord+0x7a>
  if (pRec->attemptMult > 0)
   117c4:	8c23      	ldrh	r3, [r4, #32]
   117c6:	b973      	cbnz	r3, 117e6 <smpDbGetRecord+0x7a>
  smpDbDevice_t *pRec = &smpDbCb.db[SMP_DB_FIRST_REC];
   117c8:	4c19      	ldr	r4, [pc, #100]	; (11830 <smpDbGetRecord+0xc4>)
      memset(pRec, 0, sizeof(smpDbDevice_t));
   117ca:	2300      	movs	r3, #0
   117cc:	e9c4 3300 	strd	r3, r3, [r4]
      BdaCpy(pRec->peerAddr, pAddr);
   117d0:	4620      	mov	r0, r4
      memset(pRec, 0, sizeof(smpDbDevice_t));
   117d2:	e9c4 3302 	strd	r3, r3, [r4, #8]
   117d6:	e9c4 3304 	strd	r3, r3, [r4, #16]
      BdaCpy(pRec->peerAddr, pAddr);
   117da:	4631      	mov	r1, r6
      pRec->addrType = addrType;
   117dc:	71a5      	strb	r5, [r4, #6]
      BdaCpy(pRec->peerAddr, pAddr);
   117de:	f001 fddd 	bl	1339c <BdaCpy>
    /* Database is full, use the common record. */
    pRec = &smpDbCb.db[SMP_DB_COMMON_REC];
  }

  return pRec;
}
   117e2:	4620      	mov	r0, r4
   117e4:	bd70      	pop	{r4, r5, r6, pc}
  if (pRec->failCount > 0)
   117e6:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
   117ea:	b92b      	cbnz	r3, 117f8 <smpDbGetRecord+0x8c>
  if (pRec->lockMs > 0)
   117ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   117ee:	b91b      	cbnz	r3, 117f8 <smpDbGetRecord+0x8c>
  if (pRec->attemptMult > 0)
   117f0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   117f2:	b90b      	cbnz	r3, 117f8 <smpDbGetRecord+0x8c>
  for (i = SMP_DB_FIRST_REC; i < SMP_DB_MAX_DEVICES; i++, pRec++)
   117f4:	4c0f      	ldr	r4, [pc, #60]	; (11834 <smpDbGetRecord+0xc8>)
   117f6:	e7e8      	b.n	117ca <smpDbGetRecord+0x5e>
    SMP_TRACE_INFO0("smpDbGetRecord: common record");
   117f8:	480f      	ldr	r0, [pc, #60]	; (11838 <smpDbGetRecord+0xcc>)
    pRec = &smpDbCb.db[SMP_DB_COMMON_REC];
   117fa:	4c0a      	ldr	r4, [pc, #40]	; (11824 <smpDbGetRecord+0xb8>)
    SMP_TRACE_INFO0("smpDbGetRecord: common record");
   117fc:	f7fe fc24 	bl	10048 <WsfTrace>
}
   11800:	4620      	mov	r0, r4
   11802:	bd70      	pop	{r4, r5, r6, pc}
    if (smpDbRecordInUse(pRec) && (pRec->addrType == addrType) && BdaCmp(pRec->peerAddr, pAddr))
   11804:	480a      	ldr	r0, [pc, #40]	; (11830 <smpDbGetRecord+0xc4>)
   11806:	4631      	mov	r1, r6
   11808:	f001 fdce 	bl	133a8 <BdaCmp>
   1180c:	2800      	cmp	r0, #0
   1180e:	d0c7      	beq.n	117a0 <smpDbGetRecord+0x34>
  smpDbDevice_t *pRec = &smpDbCb.db[SMP_DB_FIRST_REC];
   11810:	4c07      	ldr	r4, [pc, #28]	; (11830 <smpDbGetRecord+0xc4>)
   11812:	e7f5      	b.n	11800 <smpDbGetRecord+0x94>
    if (smpDbRecordInUse(pRec) && (pRec->addrType == addrType) && BdaCmp(pRec->peerAddr, pAddr))
   11814:	4807      	ldr	r0, [pc, #28]	; (11834 <smpDbGetRecord+0xc8>)
   11816:	4631      	mov	r1, r6
   11818:	f001 fdc6 	bl	133a8 <BdaCmp>
   1181c:	2800      	cmp	r0, #0
   1181e:	d0ca      	beq.n	117b6 <smpDbGetRecord+0x4a>
  for (i = SMP_DB_FIRST_REC; i < SMP_DB_MAX_DEVICES; i++, pRec++)
   11820:	4c04      	ldr	r4, [pc, #16]	; (11834 <smpDbGetRecord+0xc8>)
   11822:	e7ed      	b.n	11800 <smpDbGetRecord+0x94>
   11824:	100048c0 	.word	0x100048c0
   11828:	0001fb98 	.word	0x0001fb98
   1182c:	0001fbbc 	.word	0x0001fbbc
   11830:	100048d8 	.word	0x100048d8
   11834:	100048f0 	.word	0x100048f0
   11838:	0001fbcc 	.word	0x0001fbcc

0001183c <SmpDbInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpDbInit(void)
{
   1183c:	b510      	push	{r4, lr}
  /* Stop active service timer. */
  if (smpDbCb.serviceTimer.isStarted == TRUE)
   1183e:	4c0c      	ldr	r4, [pc, #48]	; (11870 <SmpDbInit+0x34>)
   11840:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
   11844:	2b01      	cmp	r3, #1
   11846:	d00d      	beq.n	11864 <SmpDbInit+0x28>
  {
    WsfTimerStop(&smpDbCb.serviceTimer);
  }

  /* Reset control block. */
  memset(&smpDbCb, 0, sizeof(smpDbCb));
   11848:	2258      	movs	r2, #88	; 0x58
   1184a:	4809      	ldr	r0, [pc, #36]	; (11870 <SmpDbInit+0x34>)
   1184c:	2100      	movs	r1, #0
   1184e:	f00b f963 	bl	1cb18 <memset>

  /* Setup service timer. */
  smpDbCb.serviceTimer.handlerId = smpCb.handlerId;
   11852:	4a08      	ldr	r2, [pc, #32]	; (11874 <SmpDbInit+0x38>)
  smpDbCb.serviceTimer.msg.event = SMP_DB_SERVICE_IND;
   11854:	231f      	movs	r3, #31
  smpDbCb.serviceTimer.handlerId = smpCb.handlerId;
   11856:	f892 20e0 	ldrb.w	r2, [r2, #224]	; 0xe0
   1185a:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
  smpDbCb.serviceTimer.msg.event = SMP_DB_SERVICE_IND;
   1185e:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
}
   11862:	bd10      	pop	{r4, pc}
    WsfTimerStop(&smpDbCb.serviceTimer);
   11864:	f104 0048 	add.w	r0, r4, #72	; 0x48
   11868:	f7fe fb4e 	bl	ff08 <WsfTimerStop>
   1186c:	e7ec      	b.n	11848 <SmpDbInit+0xc>
   1186e:	bf00      	nop
   11870:	100048c0 	.word	0x100048c0
   11874:	10004918 	.word	0x10004918

00011878 <SmpDbGetPairingDisabledTime>:
 *
 *  \return Time pairing is disabled (msec), or zero if pairing isn't disabled.
 */
/*************************************************************************************************/
uint32_t SmpDbGetPairingDisabledTime(dmConnId_t connId)
{
   11878:	b510      	push	{r4, lr}
   1187a:	b082      	sub	sp, #8
   1187c:	9001      	str	r0, [sp, #4]
  smpDbDevice_t *pRec = smpDbGetRecord(connId);
   1187e:	f7ff ff75 	bl	1176c <smpDbGetRecord>
   11882:	4604      	mov	r4, r0

  SMP_TRACE_INFO3("SmpDbGetPairingDisabledTime: connId: %d period: %d attemptMult: %d",
   11884:	9901      	ldr	r1, [sp, #4]
   11886:	4804      	ldr	r0, [pc, #16]	; (11898 <SmpDbGetPairingDisabledTime+0x20>)
   11888:	8923      	ldrh	r3, [r4, #8]
   1188a:	68e2      	ldr	r2, [r4, #12]
   1188c:	f7fe fbdc 	bl	10048 <WsfTrace>
                  connId, pRec->lockMs, pRec->attemptMult);

  return pRec->lockMs;
}
   11890:	68e0      	ldr	r0, [r4, #12]
   11892:	b002      	add	sp, #8
   11894:	bd10      	pop	{r4, pc}
   11896:	bf00      	nop
   11898:	0001fbec 	.word	0x0001fbec

0001189c <SmpDbSetFailureCount>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpDbSetFailureCount(dmConnId_t connId, uint8_t count)
{
   1189c:	b530      	push	{r4, r5, lr}
   1189e:	b083      	sub	sp, #12
   118a0:	460c      	mov	r4, r1
   118a2:	9001      	str	r0, [sp, #4]
  smpDbDevice_t *pRec = smpDbGetRecord(connId);
   118a4:	f7ff ff62 	bl	1176c <smpDbGetRecord>
   118a8:	4605      	mov	r5, r0

  SMP_TRACE_INFO2("SmpDbSetFailureCount: connId: %d count: %d", connId, count);
   118aa:	9901      	ldr	r1, [sp, #4]
   118ac:	4805      	ldr	r0, [pc, #20]	; (118c4 <SmpDbSetFailureCount+0x28>)
   118ae:	4622      	mov	r2, r4
   118b0:	f7fe fbca 	bl	10048 <WsfTrace>

  pRec->failCount = count;
   118b4:	71ec      	strb	r4, [r5, #7]

  if (count != 0)
   118b6:	b11c      	cbz	r4, 118c0 <SmpDbSetFailureCount+0x24>
  {
    pRec->failCountToMs = pSmpCfg->maxAttemptTimeout;
   118b8:	4b03      	ldr	r3, [pc, #12]	; (118c8 <SmpDbSetFailureCount+0x2c>)
   118ba:	681b      	ldr	r3, [r3, #0]
   118bc:	68db      	ldr	r3, [r3, #12]
   118be:	616b      	str	r3, [r5, #20]
  }
}
   118c0:	b003      	add	sp, #12
   118c2:	bd30      	pop	{r4, r5, pc}
   118c4:	0001fc30 	.word	0x0001fc30
   118c8:	10002b10 	.word	0x10002b10

000118cc <SmpDbGetFailureCount>:
 *
 *  \return The failure count.
 */
/*************************************************************************************************/
uint8_t SmpDbGetFailureCount(dmConnId_t connId)
{
   118cc:	b510      	push	{r4, lr}
   118ce:	b082      	sub	sp, #8
   118d0:	9001      	str	r0, [sp, #4]
  smpDbDevice_t *pRec = smpDbGetRecord(connId);
   118d2:	f7ff ff4b 	bl	1176c <smpDbGetRecord>
   118d6:	4604      	mov	r4, r0

  SMP_TRACE_INFO2("SmpDbGetFailureCount: connId: %d count: %d", connId, pRec->failCount);
   118d8:	9901      	ldr	r1, [sp, #4]
   118da:	4803      	ldr	r0, [pc, #12]	; (118e8 <SmpDbGetFailureCount+0x1c>)
   118dc:	79e2      	ldrb	r2, [r4, #7]
   118de:	f7fe fbb3 	bl	10048 <WsfTrace>

  return pRec->failCount;
}
   118e2:	79e0      	ldrb	r0, [r4, #7]
   118e4:	b002      	add	sp, #8
   118e6:	bd10      	pop	{r4, pc}
   118e8:	0001fc5c 	.word	0x0001fc5c

000118ec <SmpDbMaxAttemptReached>:
 *
 *  \return Time until device can retry pairing.
 */
/*************************************************************************************************/
uint32_t SmpDbMaxAttemptReached(dmConnId_t connId)
{
   118ec:	b510      	push	{r4, lr}
   118ee:	b082      	sub	sp, #8
   118f0:	9001      	str	r0, [sp, #4]
  smpDbDevice_t *pRec = smpDbGetRecord(connId);
   118f2:	f7ff ff3b 	bl	1176c <smpDbGetRecord>
   118f6:	4604      	mov	r4, r0
  uint16_t multiplier;

  SMP_TRACE_INFO1("SmpDbMaxAttemptReached: connId: %d", connId);
   118f8:	9901      	ldr	r1, [sp, #4]
   118fa:	4815      	ldr	r0, [pc, #84]	; (11950 <SmpDbMaxAttemptReached+0x64>)
   118fc:	f7fe fba4 	bl	10048 <WsfTrace>

  if (pRec->attemptMult == 0)
   11900:	8923      	ldrh	r3, [r4, #8]
    /* Due to a disconnection, a record exists but the attempt multipier hasn't been set. */
    multiplier = 1;
  }
  else
  {
    multiplier = (pRec->attemptMult * pSmpCfg->attemptExp);
   11902:	4a14      	ldr	r2, [pc, #80]	; (11954 <SmpDbMaxAttemptReached+0x68>)
  if (pRec->attemptMult == 0)
   11904:	b9a3      	cbnz	r3, 11930 <SmpDbMaxAttemptReached+0x44>
    multiplier = (pRec->attemptMult * pSmpCfg->attemptExp);
   11906:	2301      	movs	r3, #1
   11908:	6812      	ldr	r2, [r2, #0]
    multiplier = 1;
   1190a:	4619      	mov	r1, r3
  }

  if ((pSmpCfg->attemptTimeout * multiplier) <= pSmpCfg->maxAttemptTimeout)
   1190c:	6810      	ldr	r0, [r2, #0]
   1190e:	fb00 f303 	mul.w	r3, r0, r3
   11912:	68d0      	ldr	r0, [r2, #12]
  {
    /* Exponential increase is greater than max timeout. */
    pRec->lockMs = pSmpCfg->maxAttemptTimeout;
  }

  pRec->expDecrementMs = pSmpCfg->attemptDecTimeout;
   11914:	6912      	ldr	r2, [r2, #16]
  if ((pSmpCfg->attemptTimeout * multiplier) <= pSmpCfg->maxAttemptTimeout)
   11916:	4283      	cmp	r3, r0
    pRec->attemptMult = multiplier;
   11918:	bf98      	it	ls
   1191a:	4618      	movls	r0, r3
  pRec->expDecrementMs = pSmpCfg->attemptDecTimeout;
   1191c:	e9c4 0203 	strd	r0, r2, [r4, #12]
  if (smpDbCb.serviceTimer.isStarted == FALSE)
   11920:	4b0d      	ldr	r3, [pc, #52]	; (11958 <SmpDbMaxAttemptReached+0x6c>)
    pRec->attemptMult = multiplier;
   11922:	bf98      	it	ls
   11924:	8121      	strhls	r1, [r4, #8]
  if (smpDbCb.serviceTimer.isStarted == FALSE)
   11926:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
   1192a:	b142      	cbz	r2, 1193e <SmpDbMaxAttemptReached+0x52>

  /* Ensure the service timer is running. */
  smpDbStartServiceTimer();

  return pRec->lockMs;
}
   1192c:	b002      	add	sp, #8
   1192e:	bd10      	pop	{r4, pc}
    multiplier = (pRec->attemptMult * pSmpCfg->attemptExp);
   11930:	6812      	ldr	r2, [r2, #0]
   11932:	8a91      	ldrh	r1, [r2, #20]
   11934:	fb11 f103 	smulbb	r1, r1, r3
   11938:	b289      	uxth	r1, r1
  if ((pSmpCfg->attemptTimeout * multiplier) <= pSmpCfg->maxAttemptTimeout)
   1193a:	460b      	mov	r3, r1
   1193c:	e7e6      	b.n	1190c <SmpDbMaxAttemptReached+0x20>
    WsfTimerStartMs(&smpDbCb.serviceTimer, SMP_DB_SRV_MS);
   1193e:	f103 0048 	add.w	r0, r3, #72	; 0x48
   11942:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   11946:	f7fe fa9b 	bl	fe80 <WsfTimerStartMs>
  return pRec->lockMs;
   1194a:	68e0      	ldr	r0, [r4, #12]
}
   1194c:	b002      	add	sp, #8
   1194e:	bd10      	pop	{r4, pc}
   11950:	0001fc88 	.word	0x0001fc88
   11954:	10002b10 	.word	0x10002b10
   11958:	100048c0 	.word	0x100048c0

0001195c <SmpDbPairingFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpDbPairingFailed(dmConnId_t connId)
{
   1195c:	b510      	push	{r4, lr}
   1195e:	b082      	sub	sp, #8
   11960:	9001      	str	r0, [sp, #4]
  smpDbDevice_t *pRec = smpDbGetRecord(connId);
   11962:	f7ff ff03 	bl	1176c <smpDbGetRecord>

  SMP_TRACE_INFO1("SmpDbPairingFailed: connId: %d", connId);
   11966:	9901      	ldr	r1, [sp, #4]
  smpDbDevice_t *pRec = smpDbGetRecord(connId);
   11968:	4604      	mov	r4, r0
  SMP_TRACE_INFO1("SmpDbPairingFailed: connId: %d", connId);
   1196a:	4804      	ldr	r0, [pc, #16]	; (1197c <SmpDbPairingFailed+0x20>)
   1196c:	f7fe fb6c 	bl	10048 <WsfTrace>

  /* Reset exponent decrement timer. */
  pRec->expDecrementMs = pSmpCfg->attemptDecTimeout;
   11970:	4b03      	ldr	r3, [pc, #12]	; (11980 <SmpDbPairingFailed+0x24>)
   11972:	681b      	ldr	r3, [r3, #0]
   11974:	691b      	ldr	r3, [r3, #16]
   11976:	6123      	str	r3, [r4, #16]
}
   11978:	b002      	add	sp, #8
   1197a:	bd10      	pop	{r4, pc}
   1197c:	0001fcac 	.word	0x0001fcac
   11980:	10002b10 	.word	0x10002b10

00011984 <SmpDbService>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpDbService(void)
{
   11984:	b538      	push	{r3, r4, r5, lr}
  if (pRec->failCount > 0)
   11986:	4c75      	ldr	r4, [pc, #468]	; (11b5c <SmpDbService+0x1d8>)
   11988:	79e0      	ldrb	r0, [r4, #7]
   1198a:	b9b8      	cbnz	r0, 119bc <SmpDbService+0x38>
   1198c:	68e3      	ldr	r3, [r4, #12]
  if (pRec->lockMs > 0)
   1198e:	b9b3      	cbnz	r3, 119be <SmpDbService+0x3a>
  if (pRec->attemptMult > 0)
   11990:	8922      	ldrh	r2, [r4, #8]
   11992:	b9a2      	cbnz	r2, 119be <SmpDbService+0x3a>
  if (pRec->failCount > 0)
   11994:	7fe0      	ldrb	r0, [r4, #31]
   11996:	2800      	cmp	r0, #0
   11998:	d14b      	bne.n	11a32 <SmpDbService+0xae>
   1199a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (pRec->lockMs > 0)
   1199c:	2b00      	cmp	r3, #0
   1199e:	d149      	bne.n	11a34 <SmpDbService+0xb0>
  if (pRec->attemptMult > 0)
   119a0:	8c22      	ldrh	r2, [r4, #32]
   119a2:	2a00      	cmp	r2, #0
   119a4:	d146      	bne.n	11a34 <SmpDbService+0xb0>
  if (pRec->failCount > 0)
   119a6:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
   119aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   119ac:	2800      	cmp	r0, #0
   119ae:	d17c      	bne.n	11aaa <SmpDbService+0x126>
  if (pRec->lockMs > 0)
   119b0:	2b00      	cmp	r3, #0
   119b2:	d17a      	bne.n	11aaa <SmpDbService+0x126>
  if (pRec->attemptMult > 0)
   119b4:	8f22      	ldrh	r2, [r4, #56]	; 0x38
   119b6:	2a00      	cmp	r2, #0
   119b8:	d177      	bne.n	11aaa <SmpDbService+0x126>
      {
        smpDbStartServiceTimer();
      }
    }
  }
}
   119ba:	bd38      	pop	{r3, r4, r5, pc}
   119bc:	68e3      	ldr	r3, [r4, #12]
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
   119be:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
      SMP_DB_DEC_TIMER(pRec->expDecrementMs);
   119c2:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
   119c6:	bf38      	it	cc
   119c8:	f44f 717a 	movcc.w	r1, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->lockMs);
   119cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   119d0:	bf38      	it	cc
   119d2:	f44f 737a 	movcc.w	r3, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
   119d6:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
   119da:	bf38      	it	cc
   119dc:	f44f 727a 	movcc.w	r2, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->expDecrementMs);
   119e0:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->lockMs);
   119e4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
   119e8:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->lockMs);
   119ec:	e9c4 3103 	strd	r3, r1, [r4, #12]
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
   119f0:	6162      	str	r2, [r4, #20]
      if (pRec->expDecrementMs == 0)
   119f2:	b961      	cbnz	r1, 11a0e <SmpDbService+0x8a>
        pRec->attemptMult /= pSmpCfg->attemptExp;
   119f4:	495a      	ldr	r1, [pc, #360]	; (11b60 <SmpDbService+0x1dc>)
   119f6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
   119fa:	680d      	ldr	r5, [r1, #0]
   119fc:	8aa9      	ldrh	r1, [r5, #20]
   119fe:	fbbc fef1 	udiv	lr, ip, r1
        if (pRec->attemptMult)
   11a02:	458c      	cmp	ip, r1
        pRec->attemptMult /= pSmpCfg->attemptExp;
   11a04:	f8a4 e008 	strh.w	lr, [r4, #8]
        if (pRec->attemptMult)
   11a08:	d301      	bcc.n	11a0e <SmpDbService+0x8a>
          pRec->expDecrementMs =  pSmpCfg->attemptDecTimeout;
   11a0a:	6929      	ldr	r1, [r5, #16]
   11a0c:	6121      	str	r1, [r4, #16]
      if (pRec->failCountToMs == 0)
   11a0e:	2a00      	cmp	r2, #0
   11a10:	f000 8088 	beq.w	11b24 <SmpDbService+0x1a0>
  if (pRec->failCount > 0)
   11a14:	2800      	cmp	r0, #0
   11a16:	f000 8086 	beq.w	11b26 <SmpDbService+0x1a2>
  if (smpDbCb.serviceTimer.isStarted == FALSE)
   11a1a:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
   11a1e:	2b00      	cmp	r3, #0
   11a20:	d1b8      	bne.n	11994 <SmpDbService+0x10>
    WsfTimerStartMs(&smpDbCb.serviceTimer, SMP_DB_SRV_MS);
   11a22:	4850      	ldr	r0, [pc, #320]	; (11b64 <SmpDbService+0x1e0>)
   11a24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   11a28:	f7fe fa2a 	bl	fe80 <WsfTimerStartMs>
  if (pRec->failCount > 0)
   11a2c:	7fe0      	ldrb	r0, [r4, #31]
   11a2e:	2800      	cmp	r0, #0
   11a30:	d0b3      	beq.n	1199a <SmpDbService+0x16>
   11a32:	6a63      	ldr	r3, [r4, #36]	; 0x24
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
   11a34:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
      SMP_DB_DEC_TIMER(pRec->expDecrementMs);
   11a38:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
   11a3c:	bf38      	it	cc
   11a3e:	f44f 717a 	movcc.w	r1, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->lockMs);
   11a42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   11a46:	bf38      	it	cc
   11a48:	f44f 737a 	movcc.w	r3, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
   11a4c:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
   11a50:	bf38      	it	cc
   11a52:	f44f 727a 	movcc.w	r2, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->expDecrementMs);
   11a56:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->lockMs);
   11a5a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
   11a5e:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->lockMs);
   11a62:	e9c4 3109 	strd	r3, r1, [r4, #36]	; 0x24
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
   11a66:	62e2      	str	r2, [r4, #44]	; 0x2c
      if (pRec->expDecrementMs == 0)
   11a68:	b951      	cbnz	r1, 11a80 <SmpDbService+0xfc>
        pRec->attemptMult /= pSmpCfg->attemptExp;
   11a6a:	493d      	ldr	r1, [pc, #244]	; (11b60 <SmpDbService+0x1dc>)
   11a6c:	f8b4 c020 	ldrh.w	ip, [r4, #32]
   11a70:	680d      	ldr	r5, [r1, #0]
   11a72:	8aa9      	ldrh	r1, [r5, #20]
   11a74:	fbbc fef1 	udiv	lr, ip, r1
        if (pRec->attemptMult)
   11a78:	458c      	cmp	ip, r1
        pRec->attemptMult /= pSmpCfg->attemptExp;
   11a7a:	f8a4 e020 	strh.w	lr, [r4, #32]
        if (pRec->attemptMult)
   11a7e:	d26a      	bcs.n	11b56 <SmpDbService+0x1d2>
      if (pRec->failCountToMs == 0)
   11a80:	2a00      	cmp	r2, #0
   11a82:	d158      	bne.n	11b36 <SmpDbService+0x1b2>
        pRec->failCount = 0;
   11a84:	77e2      	strb	r2, [r4, #31]
  if (pRec->lockMs > 0)
   11a86:	b913      	cbnz	r3, 11a8e <SmpDbService+0x10a>
  if (pRec->attemptMult > 0)
   11a88:	8c23      	ldrh	r3, [r4, #32]
   11a8a:	2b00      	cmp	r3, #0
   11a8c:	d08b      	beq.n	119a6 <SmpDbService+0x22>
  if (smpDbCb.serviceTimer.isStarted == FALSE)
   11a8e:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
   11a92:	2b00      	cmp	r3, #0
   11a94:	d187      	bne.n	119a6 <SmpDbService+0x22>
    WsfTimerStartMs(&smpDbCb.serviceTimer, SMP_DB_SRV_MS);
   11a96:	4833      	ldr	r0, [pc, #204]	; (11b64 <SmpDbService+0x1e0>)
   11a98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   11a9c:	f7fe f9f0 	bl	fe80 <WsfTimerStartMs>
  if (pRec->failCount > 0)
   11aa0:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
   11aa4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   11aa6:	2800      	cmp	r0, #0
   11aa8:	d082      	beq.n	119b0 <SmpDbService+0x2c>
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
   11aaa:	e9d4 1210 	ldrd	r1, r2, [r4, #64]	; 0x40
      SMP_DB_DEC_TIMER(pRec->expDecrementMs);
   11aae:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
   11ab2:	bf38      	it	cc
   11ab4:	f44f 717a 	movcc.w	r1, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->lockMs);
   11ab8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   11abc:	bf38      	it	cc
   11abe:	f44f 737a 	movcc.w	r3, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
   11ac2:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
   11ac6:	bf38      	it	cc
   11ac8:	f44f 727a 	movcc.w	r2, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->expDecrementMs);
   11acc:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->lockMs);
   11ad0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
   11ad4:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->lockMs);
   11ad8:	e9c4 310f 	strd	r3, r1, [r4, #60]	; 0x3c
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
   11adc:	6462      	str	r2, [r4, #68]	; 0x44
      if (pRec->expDecrementMs == 0)
   11ade:	b969      	cbnz	r1, 11afc <SmpDbService+0x178>
        pRec->attemptMult /= pSmpCfg->attemptExp;
   11ae0:	491f      	ldr	r1, [pc, #124]	; (11b60 <SmpDbService+0x1dc>)
   11ae2:	f8b4 c038 	ldrh.w	ip, [r4, #56]	; 0x38
   11ae6:	680d      	ldr	r5, [r1, #0]
   11ae8:	8aa9      	ldrh	r1, [r5, #20]
   11aea:	fbbc fef1 	udiv	lr, ip, r1
        if (pRec->attemptMult)
   11aee:	458c      	cmp	ip, r1
          pRec->expDecrementMs =  pSmpCfg->attemptDecTimeout;
   11af0:	bf28      	it	cs
   11af2:	6929      	ldrcs	r1, [r5, #16]
        pRec->attemptMult /= pSmpCfg->attemptExp;
   11af4:	f8a4 e038 	strh.w	lr, [r4, #56]	; 0x38
          pRec->expDecrementMs =  pSmpCfg->attemptDecTimeout;
   11af8:	bf28      	it	cs
   11afa:	6421      	strcs	r1, [r4, #64]	; 0x40
      if (pRec->failCountToMs == 0)
   11afc:	bb1a      	cbnz	r2, 11b46 <SmpDbService+0x1c2>
        pRec->failCount = 0;
   11afe:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
  if (pRec->lockMs > 0)
   11b02:	b91b      	cbnz	r3, 11b0c <SmpDbService+0x188>
  if (pRec->attemptMult > 0)
   11b04:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   11b06:	2b00      	cmp	r3, #0
   11b08:	f43f af57 	beq.w	119ba <SmpDbService+0x36>
  if (smpDbCb.serviceTimer.isStarted == FALSE)
   11b0c:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
   11b10:	2b00      	cmp	r3, #0
   11b12:	f47f af52 	bne.w	119ba <SmpDbService+0x36>
}
   11b16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    WsfTimerStartMs(&smpDbCb.serviceTimer, SMP_DB_SRV_MS);
   11b1a:	4812      	ldr	r0, [pc, #72]	; (11b64 <SmpDbService+0x1e0>)
   11b1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   11b20:	f7fe b9ae 	b.w	fe80 <WsfTimerStartMs>
        pRec->failCount = 0;
   11b24:	71e2      	strb	r2, [r4, #7]
  if (pRec->lockMs > 0)
   11b26:	2b00      	cmp	r3, #0
   11b28:	f47f af77 	bne.w	11a1a <SmpDbService+0x96>
  if (pRec->attemptMult > 0)
   11b2c:	8923      	ldrh	r3, [r4, #8]
   11b2e:	2b00      	cmp	r3, #0
   11b30:	f43f af30 	beq.w	11994 <SmpDbService+0x10>
   11b34:	e771      	b.n	11a1a <SmpDbService+0x96>
  if (pRec->failCount > 0)
   11b36:	2800      	cmp	r0, #0
   11b38:	d0a5      	beq.n	11a86 <SmpDbService+0x102>
  if (smpDbCb.serviceTimer.isStarted == FALSE)
   11b3a:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
   11b3e:	2b00      	cmp	r3, #0
   11b40:	f47f af31 	bne.w	119a6 <SmpDbService+0x22>
   11b44:	e7a7      	b.n	11a96 <SmpDbService+0x112>
  if (pRec->failCount > 0)
   11b46:	2800      	cmp	r0, #0
   11b48:	d0db      	beq.n	11b02 <SmpDbService+0x17e>
  if (smpDbCb.serviceTimer.isStarted == FALSE)
   11b4a:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
   11b4e:	2b00      	cmp	r3, #0
   11b50:	f47f af33 	bne.w	119ba <SmpDbService+0x36>
   11b54:	e7df      	b.n	11b16 <SmpDbService+0x192>
          pRec->expDecrementMs =  pSmpCfg->attemptDecTimeout;
   11b56:	6929      	ldr	r1, [r5, #16]
   11b58:	62a1      	str	r1, [r4, #40]	; 0x28
   11b5a:	e791      	b.n	11a80 <SmpDbService+0xfc>
   11b5c:	100048c0 	.word	0x100048c0
   11b60:	10002b10 	.word	0x10002b10
   11b64:	10004908 	.word	0x10004908

00011b68 <smpL2cDataCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void smpL2cDataCback(uint16_t handle, uint16_t len, uint8_t *pPacket)
{
   11b68:	b530      	push	{r4, r5, lr}
   11b6a:	b087      	sub	sp, #28
   11b6c:	460d      	mov	r5, r1
   11b6e:	4614      	mov	r4, r2
/*************************************************************************************************/
smpCcb_t *smpCcbByHandle(uint16_t handle)
{
  dmConnId_t  connId;

  if ((connId = DmConnIdByHandle(handle)) != DM_CONN_ID_NONE)
   11b70:	f007 fd4a 	bl	19608 <DmConnIdByHandle>
   11b74:	2800      	cmp	r0, #0
   11b76:	d039      	beq.n	11bec <smpL2cDataCback+0x84>
  cmdCode = *(pPacket + L2C_PAYLOAD_START);
   11b78:	f894 c008 	ldrb.w	ip, [r4, #8]
  if ((cmdCode >= SMP_CMD_PAIR_REQ && cmdCode < SMP_CMD_MAX) &&
   11b7c:	f10c 33ff 	add.w	r3, ip, #4294967295
   11b80:	2b0d      	cmp	r3, #13
  {
    return &smpCb.ccb[connId - 1];
   11b82:	f100 30ff 	add.w	r0, r0, #4294967295
  if ((cmdCode >= SMP_CMD_PAIR_REQ && cmdCode < SMP_CMD_MAX) &&
   11b86:	d804      	bhi.n	11b92 <smpL2cDataCback+0x2a>
      (len == smpPktLenTbl[cmdCode]) &&
   11b88:	4b1c      	ldr	r3, [pc, #112]	; (11bfc <smpL2cDataCback+0x94>)
  if ((cmdCode >= SMP_CMD_PAIR_REQ && cmdCode < SMP_CMD_MAX) &&
   11b8a:	f813 300c 	ldrb.w	r3, [r3, ip]
   11b8e:	42ab      	cmp	r3, r5
   11b90:	d00e      	beq.n	11bb0 <smpL2cDataCback+0x48>
      ((cmdCode == pCcb->nextCmdCode) || (cmdCode == SMP_CMD_PAIR_FAIL)))
   11b92:	4b1b      	ldr	r3, [pc, #108]	; (11c00 <smpL2cDataCback+0x98>)
   11b94:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   11b98:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   11b9c:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
    SMP_TRACE_WARN3("unexpected packet cmd:%d len:%d, expected:%d", cmdCode, len, pCcb->nextCmdCode);
   11ba0:	4818      	ldr	r0, [pc, #96]	; (11c04 <smpL2cDataCback+0x9c>)
   11ba2:	462a      	mov	r2, r5
   11ba4:	4661      	mov	r1, ip
}
   11ba6:	b007      	add	sp, #28
   11ba8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    SMP_TRACE_WARN3("unexpected packet cmd:%d len:%d, expected:%d", cmdCode, len, pCcb->nextCmdCode);
   11bac:	f7fe ba4c 	b.w	10048 <WsfTrace>
      ((cmdCode == pCcb->nextCmdCode) || (cmdCode == SMP_CMD_PAIR_FAIL)))
   11bb0:	4a13      	ldr	r2, [pc, #76]	; (11c00 <smpL2cDataCback+0x98>)
   11bb2:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
   11bb6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   11bba:	00c1      	lsls	r1, r0, #3
   11bbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
      (len == smpPktLenTbl[cmdCode]) &&
   11bc0:	4563      	cmp	r3, ip
   11bc2:	d015      	beq.n	11bf0 <smpL2cDataCback+0x88>
      ((cmdCode == pCcb->nextCmdCode) || (cmdCode == SMP_CMD_PAIR_FAIL)))
   11bc4:	f1bc 0f05 	cmp.w	ip, #5
   11bc8:	d1ea      	bne.n	11ba0 <smpL2cDataCback+0x38>
      msg.hdr.status = *(pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN);
   11bca:	7a63      	ldrb	r3, [r4, #9]
   11bcc:	f88d 3003 	strb.w	r3, [sp, #3]
      msg.hdr.event = SMP_MSG_CMD_PAIRING_FAILED;
   11bd0:	2507      	movs	r5, #7
    msg.hdr.param = pCcb->connId;
   11bd2:	4408      	add	r0, r1
   11bd4:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    smpSmExecute(pCcb, &msg);
   11bd8:	4669      	mov	r1, sp
    msg.hdr.param = pCcb->connId;
   11bda:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
   11bde:	f88d 5002 	strb.w	r5, [sp, #2]
   11be2:	f8ad 3000 	strh.w	r3, [sp]
    msg.data.pPacket = pPacket;
   11be6:	9401      	str	r4, [sp, #4]
    smpSmExecute(pCcb, &msg);
   11be8:	f7ff fcce 	bl	11588 <smpSmExecute>
}
   11bec:	b007      	add	sp, #28
   11bee:	bd30      	pop	{r4, r5, pc}
    if (cmdCode == SMP_CMD_PAIR_FAIL)
   11bf0:	2b05      	cmp	r3, #5
      msg.hdr.event = SMP_MSG_CMD_PKT;
   11bf2:	bf18      	it	ne
   11bf4:	2506      	movne	r5, #6
    if (cmdCode == SMP_CMD_PAIR_FAIL)
   11bf6:	d1ec      	bne.n	11bd2 <smpL2cDataCback+0x6a>
   11bf8:	e7e7      	b.n	11bca <smpL2cDataCback+0x62>
   11bfa:	bf00      	nop
   11bfc:	0001fd3c 	.word	0x0001fd3c
   11c00:	10004918 	.word	0x10004918
   11c04:	0001fccc 	.word	0x0001fccc

00011c08 <smpDmConnCback>:
{
   11c08:	b5f0      	push	{r4, r5, r6, r7, lr}
   11c0a:	4605      	mov	r5, r0
  pCcb = smpCcbByConnId((dmConnId_t) pDmEvt->hdr.param);
   11c0c:	7800      	ldrb	r0, [r0, #0]
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   11c0e:	78ab      	ldrb	r3, [r5, #2]
   11c10:	2b27      	cmp	r3, #39	; 0x27
{
   11c12:	b083      	sub	sp, #12
/*************************************************************************************************/
smpCcb_t *smpCcbByConnId(dmConnId_t connId)
{
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return &smpCb.ccb[connId - 1];
   11c14:	f100 34ff 	add.w	r4, r0, #4294967295
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   11c18:	d00b      	beq.n	11c32 <smpDmConnCback+0x2a>
  else if (pCcb->connId != DM_CONN_ID_NONE)
   11c1a:	4a40      	ldr	r2, [pc, #256]	; (11d1c <smpDmConnCback+0x114>)
   11c1c:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   11c20:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
   11c24:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
   11c28:	b10a      	cbz	r2, 11c2e <smpDmConnCback+0x26>
    if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
   11c2a:	2b28      	cmp	r3, #40	; 0x28
   11c2c:	d04c      	beq.n	11cc8 <smpDmConnCback+0xc0>
}
   11c2e:	b003      	add	sp, #12
   11c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (DmConnRole((dmConnId_t) pDmEvt->hdr.param) == DM_ROLE_MASTER)
   11c32:	f007 fd9d 	bl	19770 <DmConnRole>
   11c36:	4f39      	ldr	r7, [pc, #228]	; (11d1c <smpDmConnCback+0x114>)
    pCcb->handle = pDmEvt->connOpen.handle;
   11c38:	88eb      	ldrh	r3, [r5, #6]
   11c3a:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   11c3e:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
      pCcb->nextCmdCode = SMP_CMD_PAIR_REQ;
   11c42:	2800      	cmp	r0, #0
    pCcb->secReq = FALSE;
   11c44:	f04f 0600 	mov.w	r6, #0
    pCcb->connId = (dmConnId_t) pDmEvt->hdr.param;
   11c48:	7828      	ldrb	r0, [r5, #0]
    pCcb->handle = pDmEvt->connOpen.handle;
   11c4a:	8723      	strh	r3, [r4, #56]	; 0x38
      pCcb->nextCmdCode = SMP_CMD_PAIR_REQ;
   11c4c:	bf0b      	itete	eq
   11c4e:	220b      	moveq	r2, #11
   11c50:	2201      	movne	r2, #1
   11c52:	2301      	moveq	r3, #1
   11c54:	4633      	movne	r3, r6
   11c56:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
   11c5a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    pCcb->connId = (dmConnId_t) pDmEvt->hdr.param;
   11c5e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    pCcb->secReq = FALSE;
   11c62:	f884 603b 	strb.w	r6, [r4, #59]	; 0x3b
    pCcb->flowDisabled = FALSE;
   11c66:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
    pCcb->attempts = SmpDbGetFailureCount((dmConnId_t) pDmEvt->hdr.param);
   11c6a:	f7ff fe2f 	bl	118cc <SmpDbGetFailureCount>
    smpResumeAttemptsState((dmConnId_t) pDmEvt->hdr.param);
   11c6e:	782d      	ldrb	r5, [r5, #0]
    pCcb->attempts = SmpDbGetFailureCount((dmConnId_t) pDmEvt->hdr.param);
   11c70:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    pCcb->lastSentKey = 0;
   11c74:	f884 6043 	strb.w	r6, [r4, #67]	; 0x43
    pCcb->state = 0;
   11c78:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
  uint32_t timeMs = SmpDbGetPairingDisabledTime(connId);
   11c7c:	4628      	mov	r0, r5
   11c7e:	f7ff fdfb 	bl	11878 <SmpDbGetPairingDisabledTime>
  if (timeMs)
   11c82:	4604      	mov	r4, r0
   11c84:	2800      	cmp	r0, #0
   11c86:	d0d2      	beq.n	11c2e <smpDmConnCback+0x26>
    if (smpCb.lescSupported)
   11c88:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
  return &smpCb.ccb[connId - 1];
   11c8c:	1e6e      	subs	r6, r5, #1
      pCcb->state = DmConnRole(connId) == DM_ROLE_SLAVE? SMPR_SC_SM_ST_ATTEMPTS : SMPI_SC_SM_ST_ATTEMPTS;
   11c8e:	4628      	mov	r0, r5
    if (smpCb.lescSupported)
   11c90:	2b00      	cmp	r3, #0
   11c92:	d035      	beq.n	11d00 <smpDmConnCback+0xf8>
      pCcb->state = DmConnRole(connId) == DM_ROLE_SLAVE? SMPR_SC_SM_ST_ATTEMPTS : SMPI_SC_SM_ST_ATTEMPTS;
   11c94:	f007 fd6c 	bl	19770 <DmConnRole>
   11c98:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
   11c9c:	2801      	cmp	r0, #1
   11c9e:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   11ca2:	bf0c      	ite	eq
   11ca4:	2226      	moveq	r2, #38	; 0x26
   11ca6:	2224      	movne	r2, #36	; 0x24
   11ca8:	00f0      	lsls	r0, r6, #3
   11caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    pCcb->waitTimer.msg.event = SMP_MSG_INT_WI_TIMEOUT;
   11cae:	4430      	add	r0, r6
   11cb0:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
   11cb4:	2210      	movs	r2, #16
    WsfTimerStartMs(&pCcb->waitTimer, timeMs);
   11cb6:	4618      	mov	r0, r3
   11cb8:	4621      	mov	r1, r4
   11cba:	4410      	add	r0, r2
    pCcb->waitTimer.msg.event = SMP_MSG_INT_WI_TIMEOUT;
   11cbc:	769a      	strb	r2, [r3, #26]
}
   11cbe:	b003      	add	sp, #12
   11cc0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    WsfTimerStartMs(&pCcb->waitTimer, timeMs);
   11cc4:	f7fe b8dc 	b.w	fe80 <WsfTimerStartMs>
      SmpDbSetFailureCount((dmConnId_t) pDmEvt->hdr.param, pCcb->attempts);
   11cc8:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
   11ccc:	f7ff fde6 	bl	1189c <SmpDbSetFailureCount>
      hdr.status = pDmEvt->connClose.reason + DM_SEC_HCI_ERR_BASE;
   11cd0:	7a2b      	ldrb	r3, [r5, #8]
      hdr.param = pDmEvt->hdr.param;
   11cd2:	8828      	ldrh	r0, [r5, #0]
   11cd4:	f8ad 0004 	strh.w	r0, [sp, #4]
      hdr.status = pDmEvt->connClose.reason + DM_SEC_HCI_ERR_BASE;
   11cd8:	3320      	adds	r3, #32
      hdr.event = SMP_MSG_DM_CONN_CLOSE;
   11cda:	220a      	movs	r2, #10
      smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   11cdc:	4620      	mov	r0, r4
   11cde:	a901      	add	r1, sp, #4
      hdr.event = SMP_MSG_DM_CONN_CLOSE;
   11ce0:	f88d 2006 	strb.w	r2, [sp, #6]
      hdr.status = pDmEvt->connClose.reason + DM_SEC_HCI_ERR_BASE;
   11ce4:	f88d 3007 	strb.w	r3, [sp, #7]
      smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   11ce8:	f7ff fc4e 	bl	11588 <smpSmExecute>
      if (pCcb->pQueued != NULL)
   11cec:	6b60      	ldr	r0, [r4, #52]	; 0x34
      pCcb->connId = DM_CONN_ID_NONE;
   11cee:	2500      	movs	r5, #0
   11cf0:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      if (pCcb->pQueued != NULL)
   11cf4:	2800      	cmp	r0, #0
   11cf6:	d09a      	beq.n	11c2e <smpDmConnCback+0x26>
        WsfMsgFree(pCcb->pQueued);
   11cf8:	f7fd fe2e 	bl	f958 <WsfMsgFree>
        pCcb->pQueued = NULL;
   11cfc:	6365      	str	r5, [r4, #52]	; 0x34
}
   11cfe:	e796      	b.n	11c2e <smpDmConnCback+0x26>
      pCcb->state = DmConnRole(connId) == DM_ROLE_SLAVE? SMPR_SM_ST_ATTEMPTS : SMPI_SM_ST_ATTEMPTS;
   11d00:	f007 fd36 	bl	19770 <DmConnRole>
   11d04:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
   11d08:	2801      	cmp	r0, #1
   11d0a:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   11d0e:	bf0c      	ite	eq
   11d10:	220d      	moveq	r2, #13
   11d12:	220c      	movne	r2, #12
   11d14:	00f0      	lsls	r0, r6, #3
   11d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
   11d1a:	e7c8      	b.n	11cae <smpDmConnCback+0xa6>
   11d1c:	10004918 	.word	0x10004918

00011d20 <smpL2cCtrlCback>:
{
   11d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return &smpCb.ccb[connId - 1];
   11d24:	7804      	ldrb	r4, [r0, #0]
  if (pCcb->connId != DM_CONN_ID_NONE)
   11d26:	4f17      	ldr	r7, [pc, #92]	; (11d84 <smpL2cCtrlCback+0x64>)
  return &smpCb.ccb[connId - 1];
   11d28:	3c01      	subs	r4, #1
  if (pCcb->connId != DM_CONN_ID_NONE)
   11d2a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
   11d2e:	eb07 05c3 	add.w	r5, r7, r3, lsl #3
   11d32:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
   11d36:	b1db      	cbz	r3, 11d70 <smpL2cCtrlCback+0x50>
    pCcb->flowDisabled = (pMsg->event == L2C_CTRL_FLOW_DISABLE_IND);
   11d38:	7883      	ldrb	r3, [r0, #2]
   11d3a:	2b01      	cmp	r3, #1
   11d3c:	bf0c      	ite	eq
   11d3e:	2301      	moveq	r3, #1
   11d40:	2300      	movne	r3, #0
   11d42:	4606      	mov	r6, r0
   11d44:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if (!pCcb->flowDisabled)
   11d48:	d012      	beq.n	11d70 <smpL2cCtrlCback+0x50>
      if (pCcb->pQueued != NULL)
   11d4a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   11d4c:	ea4f 08c4 	mov.w	r8, r4, lsl #3
   11d50:	b143      	cbz	r3, 11d64 <smpL2cCtrlCback+0x44>
        pCcb->pQueued = NULL;
   11d52:	2200      	movs	r2, #0
   11d54:	636a      	str	r2, [r5, #52]	; 0x34
    pCcb->pQueued = pPkt;
  }
  /* else send it to L2CAP */
  else
  {
    L2cDataReq(L2C_CID_SMP, pCcb->handle, smpPktLenTbl[pPkt[L2C_PAYLOAD_START]], pPkt);
   11d56:	490c      	ldr	r1, [pc, #48]	; (11d88 <smpL2cCtrlCback+0x68>)
   11d58:	7a1a      	ldrb	r2, [r3, #8]
   11d5a:	2006      	movs	r0, #6
   11d5c:	5c8a      	ldrb	r2, [r1, r2]
   11d5e:	8f29      	ldrh	r1, [r5, #56]	; 0x38
   11d60:	f001 fcea 	bl	13738 <L2cDataReq>
 *  \return TRUE if in idle state, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t smpStateIdle(smpCcb_t *pCcb)
{
  return (pCcb->state == 0);
   11d64:	4444      	add	r4, r8
   11d66:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
      if (!smpStateIdle(pCcb))
   11d6a:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
   11d6e:	b90b      	cbnz	r3, 11d74 <smpL2cCtrlCback+0x54>
}
   11d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pMsg->event = SMP_MSG_INT_SEND_NEXT_KEY;
   11d74:	230c      	movs	r3, #12
   11d76:	70b3      	strb	r3, [r6, #2]
        smpSmExecute(pCcb, (smpMsg_t *) pMsg);
   11d78:	4631      	mov	r1, r6
   11d7a:	4628      	mov	r0, r5
}
   11d7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        smpSmExecute(pCcb, (smpMsg_t *) pMsg);
   11d80:	f7ff bc02 	b.w	11588 <smpSmExecute>
   11d84:	10004918 	.word	0x10004918
   11d88:	0001fd3c 	.word	0x0001fd3c

00011d8c <smpCcbByConnId>:
  return &smpCb.ccb[connId - 1];
   11d8c:	4b03      	ldr	r3, [pc, #12]	; (11d9c <smpCcbByConnId+0x10>)
   11d8e:	3801      	subs	r0, #1
   11d90:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
}
   11d94:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   11d98:	4770      	bx	lr
   11d9a:	bf00      	nop
   11d9c:	10004918 	.word	0x10004918

00011da0 <smpCalcC1Part1>:
{
   11da0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (pCcb->initiator)
   11da2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
   11da6:	4604      	mov	r4, r0
   11da8:	b089      	sub	sp, #36	; 0x24
    if (!BdaIsZeros(DmConnLocalRpa(pCcb->connId)))
   11daa:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
{
   11dae:	460e      	mov	r6, r1
   11db0:	4615      	mov	r5, r2
  if (pCcb->initiator)
   11db2:	b1a3      	cbz	r3, 11dde <smpCalcC1Part1+0x3e>
    if (!BdaIsZeros(DmConnLocalRpa(pCcb->connId)))
   11db4:	f007 fc86 	bl	196c4 <DmConnLocalRpa>
   11db8:	f001 fb04 	bl	133c4 <BdaIsZeros>
   11dbc:	2800      	cmp	r0, #0
   11dbe:	f040 808a 	bne.w	11ed6 <smpCalcC1Part1+0x136>
      iAddrType = DM_ADDR_RANDOM;
   11dc2:	2701      	movs	r7, #1
    if (!BdaIsZeros(DmConnPeerRpa(pCcb->connId)))
   11dc4:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
   11dc8:	f007 fc72 	bl	196b0 <DmConnPeerRpa>
   11dcc:	f001 fafa 	bl	133c4 <BdaIsZeros>
   11dd0:	b1a0      	cbz	r0, 11dfc <smpCalcC1Part1+0x5c>
      rAddrType = DmConnPeerAddrType(pCcb->connId);
   11dd2:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
   11dd6:	f007 fc43 	bl	19660 <DmConnPeerAddrType>
   11dda:	4686      	mov	lr, r0
   11ddc:	e010      	b.n	11e00 <smpCalcC1Part1+0x60>
    if (!BdaIsZeros(DmConnPeerRpa(pCcb->connId)))
   11dde:	f007 fc67 	bl	196b0 <DmConnPeerRpa>
   11de2:	f001 faef 	bl	133c4 <BdaIsZeros>
   11de6:	2800      	cmp	r0, #0
   11de8:	d162      	bne.n	11eb0 <smpCalcC1Part1+0x110>
    if (!BdaIsZeros(DmConnLocalRpa(pCcb->connId)))
   11dea:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
      iAddrType = DM_ADDR_RANDOM;
   11dee:	2701      	movs	r7, #1
    if (!BdaIsZeros(DmConnLocalRpa(pCcb->connId)))
   11df0:	f007 fc68 	bl	196c4 <DmConnLocalRpa>
   11df4:	f001 fae6 	bl	133c4 <BdaIsZeros>
   11df8:	2800      	cmp	r0, #0
   11dfa:	d166      	bne.n	11eca <smpCalcC1Part1+0x12a>
      rAddrType = DM_ADDR_RANDOM;
   11dfc:	f04f 0e01 	mov.w	lr, #1
  *p++ = iAddrType ^ *pRand++;
   11e00:	7829      	ldrb	r1, [r5, #0]
  *p++ = rAddrType ^ *pRand++;
   11e02:	786b      	ldrb	r3, [r5, #1]
    *p++ = pCcb->pairReq[i] ^ *pRand++;
   11e04:	f8d5 c002 	ldr.w	ip, [r5, #2]
   11e08:	6a22      	ldr	r2, [r4, #32]
  *p++ = iAddrType ^ *pRand++;
   11e0a:	404f      	eors	r7, r1
  *p++ = rAddrType ^ *pRand++;
   11e0c:	ea8e 0e03 	eor.w	lr, lr, r3
    *p++ = pCcb->pairReq[i] ^ *pRand++;
   11e10:	79a9      	ldrb	r1, [r5, #6]
   11e12:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  *p++ = iAddrType ^ *pRand++;
   11e16:	f88d 7010 	strb.w	r7, [sp, #16]
    *p++ = pCcb->pairReq[i] ^ *pRand++;
   11e1a:	ea8c 0c02 	eor.w	ip, ip, r2
   11e1e:	404b      	eors	r3, r1
   11e20:	79ea      	ldrb	r2, [r5, #7]
   11e22:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
   11e26:	f88d 3016 	strb.w	r3, [sp, #22]
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
   11e2a:	4630      	mov	r0, r6
    *p++ = pCcb->pairRsp[i] ^ *pRand++;
   11e2c:	f8d5 3009 	ldr.w	r3, [r5, #9]
   11e30:	f8d4 6027 	ldr.w	r6, [r4, #39]	; 0x27
    *p++ = pCcb->pairReq[i] ^ *pRand++;
   11e34:	7a2f      	ldrb	r7, [r5, #8]
  *p++ = rAddrType ^ *pRand++;
   11e36:	f88d e011 	strb.w	lr, [sp, #17]
    *p++ = pCcb->pairReq[i] ^ *pRand++;
   11e3a:	4051      	eors	r1, r2
   11e3c:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
    *p++ = pCcb->pairRsp[i] ^ *pRand++;
   11e40:	f894 e02b 	ldrb.w	lr, [r4, #43]	; 0x2b
    *p++ = pCcb->pairReq[i] ^ *pRand++;
   11e44:	f8cd c012 	str.w	ip, [sp, #18]
    *p++ = pCcb->pairRsp[i] ^ *pRand++;
   11e48:	4073      	eors	r3, r6
   11e4a:	7b6e      	ldrb	r6, [r5, #13]
   11e4c:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
   11e50:	f8cd 3019 	str.w	r3, [sp, #25]
    *p++ = pCcb->pairReq[i] ^ *pRand++;
   11e54:	407a      	eors	r2, r7
    *p++ = pCcb->pairRsp[i] ^ *pRand++;
   11e56:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    *p++ = pCcb->pairReq[i] ^ *pRand++;
   11e5a:	f88d 2018 	strb.w	r2, [sp, #24]
    *p++ = pCcb->pairRsp[i] ^ *pRand++;
   11e5e:	ea8e 0e06 	eor.w	lr, lr, r6
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
   11e62:	4a20      	ldr	r2, [pc, #128]	; (11ee4 <smpCalcC1Part1+0x144>)
    *p++ = pCcb->pairRsp[i] ^ *pRand++;
   11e64:	7bae      	ldrb	r6, [r5, #14]
   11e66:	7bed      	ldrb	r5, [r5, #15]
    *p++ = pCcb->pairReq[i] ^ *pRand++;
   11e68:	f88d 1017 	strb.w	r1, [sp, #23]
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
   11e6c:	210b      	movs	r1, #11
   11e6e:	f892 20e0 	ldrb.w	r2, [r2, #224]	; 0xe0
    *p++ = pCcb->pairRsp[i] ^ *pRand++;
   11e72:	f88d e01d 	strb.w	lr, [sp, #29]
   11e76:	ea8c 0c06 	eor.w	ip, ip, r6
   11e7a:	405d      	eors	r5, r3
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
   11e7c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
   11e80:	9100      	str	r1, [sp, #0]
   11e82:	a904      	add	r1, sp, #16
    *p++ = pCcb->pairRsp[i] ^ *pRand++;
   11e84:	f88d c01e 	strb.w	ip, [sp, #30]
   11e88:	f88d 501f 	strb.w	r5, [sp, #31]
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
   11e8c:	f003 ff38 	bl	15d00 <SecAes>
  if (pCcb->token == SEC_TOKEN_INVALID)
   11e90:	28ff      	cmp	r0, #255	; 0xff
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
   11e92:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  if (pCcb->token == SEC_TOKEN_INVALID)
   11e96:	d001      	beq.n	11e9c <smpCalcC1Part1+0xfc>
}
   11e98:	b009      	add	sp, #36	; 0x24
   11e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   11e9c:	f640 0303 	movw	r3, #2051	; 0x803
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   11ea0:	a903      	add	r1, sp, #12
   11ea2:	4620      	mov	r0, r4
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   11ea4:	f8ad 300e 	strh.w	r3, [sp, #14]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   11ea8:	f7ff fb6e 	bl	11588 <smpSmExecute>
}
   11eac:	b009      	add	sp, #36	; 0x24
   11eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
      iAddrType = DmConnPeerAddrType(pCcb->connId);
   11eb0:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
   11eb4:	f007 fbd4 	bl	19660 <DmConnPeerAddrType>
   11eb8:	4607      	mov	r7, r0
    if (!BdaIsZeros(DmConnLocalRpa(pCcb->connId)))
   11eba:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
   11ebe:	f007 fc01 	bl	196c4 <DmConnLocalRpa>
   11ec2:	f001 fa7f 	bl	133c4 <BdaIsZeros>
   11ec6:	2800      	cmp	r0, #0
   11ec8:	d098      	beq.n	11dfc <smpCalcC1Part1+0x5c>
      rAddrType = DmConnLocalAddrType(pCcb->connId);
   11eca:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
   11ece:	f007 fbdb 	bl	19688 <DmConnLocalAddrType>
   11ed2:	4686      	mov	lr, r0
   11ed4:	e794      	b.n	11e00 <smpCalcC1Part1+0x60>
      iAddrType = DmConnLocalAddrType(pCcb->connId);
   11ed6:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
   11eda:	f007 fbd5 	bl	19688 <DmConnLocalAddrType>
   11ede:	4607      	mov	r7, r0
   11ee0:	e770      	b.n	11dc4 <smpCalcC1Part1+0x24>
   11ee2:	bf00      	nop
   11ee4:	10004918 	.word	0x10004918

00011ee8 <smpCalcC1Part2>:
{
   11ee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (pCcb->initiator)
   11eec:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
   11ef0:	4607      	mov	r7, r0
   11ef2:	b089      	sub	sp, #36	; 0x24
    pIaddr = DmConnLocalRpa(pCcb->connId);
   11ef4:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
{
   11ef8:	4688      	mov	r8, r1
   11efa:	4614      	mov	r4, r2
  if (pCcb->initiator)
   11efc:	2b00      	cmp	r3, #0
   11efe:	d04c      	beq.n	11f9a <smpCalcC1Part2+0xb2>
    pIaddr = DmConnLocalRpa(pCcb->connId);
   11f00:	f007 fbe0 	bl	196c4 <DmConnLocalRpa>
   11f04:	4605      	mov	r5, r0
    if (BdaIsZeros(pIaddr))
   11f06:	f001 fa5d 	bl	133c4 <BdaIsZeros>
   11f0a:	2800      	cmp	r0, #0
   11f0c:	f040 80b2 	bne.w	12074 <smpCalcC1Part2+0x18c>
    pRaddr = DmConnPeerRpa(pCcb->connId);
   11f10:	f897 003d 	ldrb.w	r0, [r7, #61]	; 0x3d
   11f14:	f007 fbcc 	bl	196b0 <DmConnPeerRpa>
   11f18:	4606      	mov	r6, r0
    if (BdaIsZeros(pRaddr))
   11f1a:	f001 fa53 	bl	133c4 <BdaIsZeros>
   11f1e:	2800      	cmp	r0, #0
   11f20:	f040 80b7 	bne.w	12092 <smpCalcC1Part2+0x1aa>
  for (i = BDA_ADDR_LEN; i > 0; i--)
   11f24:	a904      	add	r1, sp, #16
   11f26:	1c73      	adds	r3, r6, #1
   11f28:	1acb      	subs	r3, r1, r3
   11f2a:	2b02      	cmp	r3, #2
   11f2c:	d94f      	bls.n	11fce <smpCalcC1Part2+0xe6>
    *p++ = *pRaddr++ ^ *pPart1++;
   11f2e:	6830      	ldr	r0, [r6, #0]
   11f30:	6823      	ldr	r3, [r4, #0]
   11f32:	7932      	ldrb	r2, [r6, #4]
   11f34:	4058      	eors	r0, r3
   11f36:	9004      	str	r0, [sp, #16]
   11f38:	7920      	ldrb	r0, [r4, #4]
   11f3a:	7973      	ldrb	r3, [r6, #5]
   11f3c:	4042      	eors	r2, r0
   11f3e:	7960      	ldrb	r0, [r4, #5]
   11f40:	f88d 2014 	strb.w	r2, [sp, #20]
   11f44:	4043      	eors	r3, r0
   11f46:	f88d 3015 	strb.w	r3, [sp, #21]
  for (i = BDA_ADDR_LEN; i > 0; i--)
   11f4a:	ab08      	add	r3, sp, #32
   11f4c:	1b5b      	subs	r3, r3, r5
   11f4e:	3b0b      	subs	r3, #11
   11f50:	2b02      	cmp	r3, #2
   11f52:	d965      	bls.n	12020 <smpCalcC1Part2+0x138>
    *p++ = *pIaddr++ ^ *pPart1++;
   11f54:	682b      	ldr	r3, [r5, #0]
   11f56:	f8d4 2006 	ldr.w	r2, [r4, #6]
   11f5a:	7aa0      	ldrb	r0, [r4, #10]
   11f5c:	405a      	eors	r2, r3
   11f5e:	f8cd 2016 	str.w	r2, [sp, #22]
   11f62:	792b      	ldrb	r3, [r5, #4]
   11f64:	7ae2      	ldrb	r2, [r4, #11]
   11f66:	4043      	eors	r3, r0
   11f68:	f88d 301a 	strb.w	r3, [sp, #26]
   11f6c:	796b      	ldrb	r3, [r5, #5]
   11f6e:	4053      	eors	r3, r2
   11f70:	f88d 301b 	strb.w	r3, [sp, #27]
  *p++ = *pPart1++;
   11f74:	68e3      	ldr	r3, [r4, #12]
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
   11f76:	4a52      	ldr	r2, [pc, #328]	; (120c0 <smpCalcC1Part2+0x1d8>)
  *p++ = *pPart1++;
   11f78:	9307      	str	r3, [sp, #28]
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
   11f7a:	230b      	movs	r3, #11
   11f7c:	f892 20e0 	ldrb.w	r2, [r2, #224]	; 0xe0
   11f80:	9300      	str	r3, [sp, #0]
   11f82:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
   11f86:	4640      	mov	r0, r8
   11f88:	f003 feba 	bl	15d00 <SecAes>
  if (pCcb->token == SEC_TOKEN_INVALID)
   11f8c:	28ff      	cmp	r0, #255	; 0xff
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
   11f8e:	f887 0041 	strb.w	r0, [r7, #65]	; 0x41
  if (pCcb->token == SEC_TOKEN_INVALID)
   11f92:	d064      	beq.n	1205e <smpCalcC1Part2+0x176>
}
   11f94:	b009      	add	sp, #36	; 0x24
   11f96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    pIaddr = DmConnPeerRpa(pCcb->connId);
   11f9a:	f007 fb89 	bl	196b0 <DmConnPeerRpa>
   11f9e:	4605      	mov	r5, r0
    if (BdaIsZeros(pIaddr))
   11fa0:	f001 fa10 	bl	133c4 <BdaIsZeros>
   11fa4:	2800      	cmp	r0, #0
   11fa6:	d17a      	bne.n	1209e <smpCalcC1Part2+0x1b6>
    pRaddr = DmConnLocalRpa(pCcb->connId);
   11fa8:	f897 003d 	ldrb.w	r0, [r7, #61]	; 0x3d
   11fac:	f007 fb8a 	bl	196c4 <DmConnLocalRpa>
   11fb0:	4606      	mov	r6, r0
    if (BdaIsZeros(pRaddr))
   11fb2:	f001 fa07 	bl	133c4 <BdaIsZeros>
   11fb6:	2800      	cmp	r0, #0
   11fb8:	d0b4      	beq.n	11f24 <smpCalcC1Part2+0x3c>
      pRaddr = DmConnLocalAddr(pCcb->connId);
   11fba:	f897 003d 	ldrb.w	r0, [r7, #61]	; 0x3d
   11fbe:	f007 fb6d 	bl	1969c <DmConnLocalAddr>
   11fc2:	4606      	mov	r6, r0
  for (i = BDA_ADDR_LEN; i > 0; i--)
   11fc4:	a904      	add	r1, sp, #16
   11fc6:	1c73      	adds	r3, r6, #1
   11fc8:	1acb      	subs	r3, r1, r3
   11fca:	2b02      	cmp	r3, #2
   11fcc:	d8af      	bhi.n	11f2e <smpCalcC1Part2+0x46>
    *p++ = *pRaddr++ ^ *pPart1++;
   11fce:	f896 9000 	ldrb.w	r9, [r6]
   11fd2:	f896 e001 	ldrb.w	lr, [r6, #1]
   11fd6:	f896 c002 	ldrb.w	ip, [r6, #2]
   11fda:	78f0      	ldrb	r0, [r6, #3]
   11fdc:	7932      	ldrb	r2, [r6, #4]
   11fde:	7973      	ldrb	r3, [r6, #5]
   11fe0:	7826      	ldrb	r6, [r4, #0]
   11fe2:	ea89 0606 	eor.w	r6, r9, r6
   11fe6:	f88d 6010 	strb.w	r6, [sp, #16]
   11fea:	7866      	ldrb	r6, [r4, #1]
   11fec:	ea8e 0606 	eor.w	r6, lr, r6
   11ff0:	f88d 6011 	strb.w	r6, [sp, #17]
   11ff4:	78a6      	ldrb	r6, [r4, #2]
   11ff6:	ea8c 0606 	eor.w	r6, ip, r6
   11ffa:	f88d 6012 	strb.w	r6, [sp, #18]
   11ffe:	78e6      	ldrb	r6, [r4, #3]
   12000:	4070      	eors	r0, r6
   12002:	f88d 0013 	strb.w	r0, [sp, #19]
   12006:	7920      	ldrb	r0, [r4, #4]
   12008:	4042      	eors	r2, r0
   1200a:	f88d 2014 	strb.w	r2, [sp, #20]
   1200e:	7962      	ldrb	r2, [r4, #5]
   12010:	4053      	eors	r3, r2
   12012:	f88d 3015 	strb.w	r3, [sp, #21]
  for (i = BDA_ADDR_LEN; i > 0; i--)
   12016:	ab08      	add	r3, sp, #32
   12018:	1b5b      	subs	r3, r3, r5
   1201a:	3b0b      	subs	r3, #11
   1201c:	2b02      	cmp	r3, #2
   1201e:	d899      	bhi.n	11f54 <smpCalcC1Part2+0x6c>
    *p++ = *pIaddr++ ^ *pPart1++;
   12020:	782b      	ldrb	r3, [r5, #0]
   12022:	79a2      	ldrb	r2, [r4, #6]
   12024:	4053      	eors	r3, r2
   12026:	f88d 3016 	strb.w	r3, [sp, #22]
   1202a:	786a      	ldrb	r2, [r5, #1]
   1202c:	79e3      	ldrb	r3, [r4, #7]
   1202e:	4053      	eors	r3, r2
   12030:	f88d 3017 	strb.w	r3, [sp, #23]
   12034:	78aa      	ldrb	r2, [r5, #2]
   12036:	7a23      	ldrb	r3, [r4, #8]
   12038:	4053      	eors	r3, r2
   1203a:	f88d 3018 	strb.w	r3, [sp, #24]
   1203e:	78eb      	ldrb	r3, [r5, #3]
   12040:	7a62      	ldrb	r2, [r4, #9]
   12042:	4053      	eors	r3, r2
   12044:	f88d 3019 	strb.w	r3, [sp, #25]
   12048:	792b      	ldrb	r3, [r5, #4]
   1204a:	7aa2      	ldrb	r2, [r4, #10]
   1204c:	4053      	eors	r3, r2
   1204e:	f88d 301a 	strb.w	r3, [sp, #26]
   12052:	796a      	ldrb	r2, [r5, #5]
   12054:	7ae3      	ldrb	r3, [r4, #11]
   12056:	4053      	eors	r3, r2
   12058:	f88d 301b 	strb.w	r3, [sp, #27]
  for (i = BDA_ADDR_LEN; i > 0; i--)
   1205c:	e78a      	b.n	11f74 <smpCalcC1Part2+0x8c>
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   1205e:	f640 0303 	movw	r3, #2051	; 0x803
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   12062:	a903      	add	r1, sp, #12
   12064:	4638      	mov	r0, r7
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   12066:	f8ad 300e 	strh.w	r3, [sp, #14]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1206a:	f7ff fa8d 	bl	11588 <smpSmExecute>
}
   1206e:	b009      	add	sp, #36	; 0x24
   12070:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      pIaddr = DmConnLocalAddr(pCcb->connId);
   12074:	f897 003d 	ldrb.w	r0, [r7, #61]	; 0x3d
   12078:	f007 fb10 	bl	1969c <DmConnLocalAddr>
   1207c:	4605      	mov	r5, r0
    pRaddr = DmConnPeerRpa(pCcb->connId);
   1207e:	f897 003d 	ldrb.w	r0, [r7, #61]	; 0x3d
   12082:	f007 fb15 	bl	196b0 <DmConnPeerRpa>
   12086:	4606      	mov	r6, r0
    if (BdaIsZeros(pRaddr))
   12088:	f001 f99c 	bl	133c4 <BdaIsZeros>
   1208c:	2800      	cmp	r0, #0
   1208e:	f43f af49 	beq.w	11f24 <smpCalcC1Part2+0x3c>
      pRaddr = DmConnPeerAddr(pCcb->connId);
   12092:	f897 003d 	ldrb.w	r0, [r7, #61]	; 0x3d
   12096:	f007 faed 	bl	19674 <DmConnPeerAddr>
   1209a:	4606      	mov	r6, r0
   1209c:	e742      	b.n	11f24 <smpCalcC1Part2+0x3c>
      pIaddr = DmConnPeerAddr(pCcb->connId);
   1209e:	f897 003d 	ldrb.w	r0, [r7, #61]	; 0x3d
   120a2:	f007 fae7 	bl	19674 <DmConnPeerAddr>
   120a6:	4605      	mov	r5, r0
    pRaddr = DmConnLocalRpa(pCcb->connId);
   120a8:	f897 003d 	ldrb.w	r0, [r7, #61]	; 0x3d
   120ac:	f007 fb0a 	bl	196c4 <DmConnLocalRpa>
   120b0:	4606      	mov	r6, r0
    if (BdaIsZeros(pRaddr))
   120b2:	f001 f987 	bl	133c4 <BdaIsZeros>
   120b6:	2800      	cmp	r0, #0
   120b8:	f43f af34 	beq.w	11f24 <smpCalcC1Part2+0x3c>
   120bc:	e77d      	b.n	11fba <smpCalcC1Part2+0xd2>
   120be:	bf00      	nop
   120c0:	10004918 	.word	0x10004918

000120c4 <smpCalcS1>:
{
   120c4:	b570      	push	{r4, r5, r6, lr}
   120c6:	b088      	sub	sp, #32
   120c8:	4616      	mov	r6, r2
   120ca:	4604      	mov	r4, r0
   120cc:	460d      	mov	r5, r1
  Calc128Cpy64(buf, pRand2);
   120ce:	a804      	add	r0, sp, #16
   120d0:	4619      	mov	r1, r3
   120d2:	f001 f993 	bl	133fc <Calc128Cpy64>
  Calc128Cpy64(&buf[SMP_RAND8_LEN], pRand1);
   120d6:	4631      	mov	r1, r6
   120d8:	a806      	add	r0, sp, #24
   120da:	f001 f98f 	bl	133fc <Calc128Cpy64>
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
   120de:	4a0d      	ldr	r2, [pc, #52]	; (12114 <smpCalcS1+0x50>)
   120e0:	230b      	movs	r3, #11
   120e2:	f892 20e0 	ldrb.w	r2, [r2, #224]	; 0xe0
   120e6:	9300      	str	r3, [sp, #0]
   120e8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
   120ec:	a904      	add	r1, sp, #16
   120ee:	4628      	mov	r0, r5
   120f0:	f003 fe06 	bl	15d00 <SecAes>
  if (pCcb->token == SEC_TOKEN_INVALID)
   120f4:	28ff      	cmp	r0, #255	; 0xff
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
   120f6:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  if (pCcb->token == SEC_TOKEN_INVALID)
   120fa:	d001      	beq.n	12100 <smpCalcS1+0x3c>
}
   120fc:	b008      	add	sp, #32
   120fe:	bd70      	pop	{r4, r5, r6, pc}
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   12100:	f640 0303 	movw	r3, #2051	; 0x803
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   12104:	a903      	add	r1, sp, #12
   12106:	4620      	mov	r0, r4
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   12108:	f8ad 300e 	strh.w	r3, [sp, #14]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1210c:	f7ff fa3c 	bl	11588 <smpSmExecute>
}
   12110:	b008      	add	sp, #32
   12112:	bd70      	pop	{r4, r5, r6, pc}
   12114:	10004918 	.word	0x10004918

00012118 <smpGenerateLtk>:
{
   12118:	b570      	push	{r4, r5, r6, lr}
  smpScratch_t *pScr = pCcb->pScr;
   1211a:	6b04      	ldr	r4, [r0, #48]	; 0x30
  p = pScr->keyInd.keyData.ltk.key;
   1211c:	1d26      	adds	r6, r4, #4
  SecRand(p, pScr->keyInd.encKeyLen);
   1211e:	f894 1020 	ldrb.w	r1, [r4, #32]
{
   12122:	4605      	mov	r5, r0
  SecRand(p, pScr->keyInd.encKeyLen);
   12124:	4630      	mov	r0, r6
   12126:	f004 f84f 	bl	161c8 <SecRand>
  p += pScr->keyInd.encKeyLen;
   1212a:	f894 0020 	ldrb.w	r0, [r4, #32]
  memset(p, 0, (SMP_KEY_LEN - pScr->keyInd.encKeyLen));
   1212e:	2100      	movs	r1, #0
   12130:	f1c0 0210 	rsb	r2, r0, #16
   12134:	4430      	add	r0, r6
   12136:	f00a fcef 	bl	1cb18 <memset>
  BYTES_TO_UINT16(pScr->keyInd.keyData.ltk.ediv, pScr->buf.b4);
   1213a:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
   1213e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
  memcpy(pScr->keyInd.keyData.ltk.rand, &pScr->buf.b4[2], SMP_RAND8_LEN);
   12142:	f8d4 1032 	ldr.w	r1, [r4, #50]	; 0x32
   12146:	6161      	str	r1, [r4, #20]
  BYTES_TO_UINT16(pScr->keyInd.keyData.ltk.ediv, pScr->buf.b4);
   12148:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  memcpy(pScr->keyInd.keyData.ltk.rand, &pScr->buf.b4[2], SMP_RAND8_LEN);
   1214c:	f8d4 1036 	ldr.w	r1, [r4, #54]	; 0x36
  BYTES_TO_UINT16(pScr->keyInd.keyData.ltk.ediv, pScr->buf.b4);
   12150:	83a3      	strh	r3, [r4, #28]
  pScr->keyInd.type = DM_KEY_LOCAL_LTK;
   12152:	2201      	movs	r2, #1
  memcpy(pScr->keyInd.keyData.ltk.rand, &pScr->buf.b4[2], SMP_RAND8_LEN);
   12154:	61a1      	str	r1, [r4, #24]
  pScr->keyInd.type = DM_KEY_LOCAL_LTK;
   12156:	77a2      	strb	r2, [r4, #30]
  pScr->keyInd.secLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ? DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
   12158:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
   1215c:	f012 0f04 	tst.w	r2, #4
  pScr->keyInd.hdr.event = DM_SEC_KEY_IND;
   12160:	f04f 032f 	mov.w	r3, #47	; 0x2f
  pScr->keyInd.secLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ? DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
   12164:	bf14      	ite	ne
   12166:	2202      	movne	r2, #2
   12168:	2201      	moveq	r2, #1
   1216a:	77e2      	strb	r2, [r4, #31]
  pScr->keyInd.hdr.event = DM_SEC_KEY_IND;
   1216c:	70a3      	strb	r3, [r4, #2]
  DmSmpCbackExec((dmEvt_t *) &pScr->keyInd);
   1216e:	4620      	mov	r0, r4
}
   12170:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  DmSmpCbackExec((dmEvt_t *) &pScr->keyInd);
   12174:	f007 bede 	b.w	19f34 <DmSmpCbackExec>

00012178 <smpSendPkt>:
{
   12178:	b570      	push	{r4, r5, r6, lr}
  if (pCcb->flowDisabled)
   1217a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
   1217e:	4604      	mov	r4, r0
   12180:	460d      	mov	r5, r1
  if (pCcb->flowDisabled)
   12182:	b153      	cbz	r3, 1219a <smpSendPkt+0x22>
    if (pCcb->pQueued != NULL)
   12184:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12186:	b133      	cbz	r3, 12196 <smpSendPkt+0x1e>
      SMP_TRACE_WARN1("smpSendPkt packet discarded cmd:%d", pCcb->pQueued[L2C_PAYLOAD_START]);
   12188:	4809      	ldr	r0, [pc, #36]	; (121b0 <smpSendPkt+0x38>)
   1218a:	7a19      	ldrb	r1, [r3, #8]
   1218c:	f7fd ff5c 	bl	10048 <WsfTrace>
      WsfMsgFree(pCcb->pQueued);
   12190:	6b60      	ldr	r0, [r4, #52]	; 0x34
   12192:	f7fd fbe1 	bl	f958 <WsfMsgFree>
    pCcb->pQueued = pPkt;
   12196:	6365      	str	r5, [r4, #52]	; 0x34
}
   12198:	bd70      	pop	{r4, r5, r6, pc}
    L2cDataReq(L2C_CID_SMP, pCcb->handle, smpPktLenTbl[pPkt[L2C_PAYLOAD_START]], pPkt);
   1219a:	7a0b      	ldrb	r3, [r1, #8]
   1219c:	4a05      	ldr	r2, [pc, #20]	; (121b4 <smpSendPkt+0x3c>)
   1219e:	8f01      	ldrh	r1, [r0, #56]	; 0x38
   121a0:	5cd2      	ldrb	r2, [r2, r3]
   121a2:	2006      	movs	r0, #6
   121a4:	462b      	mov	r3, r5
}
   121a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    L2cDataReq(L2C_CID_SMP, pCcb->handle, smpPktLenTbl[pPkt[L2C_PAYLOAD_START]], pPkt);
   121aa:	f001 bac5 	b.w	13738 <L2cDataReq>
   121ae:	bf00      	nop
   121b0:	0001fcfc 	.word	0x0001fcfc
   121b4:	0001fd3c 	.word	0x0001fd3c

000121b8 <smpMsgAlloc>:
 *  \return Pointer to data message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *smpMsgAlloc(uint16_t len)
{
  return WsfMsgDataAlloc(len, HCI_TX_DATA_TAILROOM);
   121b8:	2100      	movs	r1, #0
   121ba:	f7fd bbbb 	b.w	f934 <WsfMsgDataAlloc>
   121be:	bf00      	nop

000121c0 <SmpDmEncryptInd>:
  return &smpCb.ccb[connId - 1];
   121c0:	7803      	ldrb	r3, [r0, #0]
 */
/*************************************************************************************************/
void SmpDmEncryptInd(wsfMsgHdr_t *pMsg)
{
  /* set event to SMP event type */
  pMsg->event = (pMsg->status == HCI_SUCCESS) ?
   121c2:	78c1      	ldrb	r1, [r0, #3]

      /* get connection control block */
      pCcb = smpCcbByConnId((dmConnId_t) pMsg->param);

      /* verify connection is open */
      if (pCcb->connId != DM_CONN_ID_NONE)
   121c4:	4a09      	ldr	r2, [pc, #36]	; (121ec <SmpDmEncryptInd+0x2c>)
  return &smpCb.ccb[connId - 1];
   121c6:	3b01      	subs	r3, #1
  pMsg->event = (pMsg->status == HCI_SUCCESS) ?
   121c8:	2900      	cmp	r1, #0
      if (pCcb->connId != DM_CONN_ID_NONE)
   121ca:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
  pMsg->event = (pMsg->status == HCI_SUCCESS) ?
   121ce:	bf0c      	ite	eq
   121d0:	2108      	moveq	r1, #8
   121d2:	2109      	movne	r1, #9
      if (pCcb->connId != DM_CONN_ID_NONE)
   121d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  pMsg->event = (pMsg->status == HCI_SUCCESS) ?
   121d8:	7081      	strb	r1, [r0, #2]
      if (pCcb->connId != DM_CONN_ID_NONE)
   121da:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
   121de:	b11a      	cbz	r2, 121e8 <SmpDmEncryptInd+0x28>
            }
        }
        else
        {
          /* send to state machine */
          smpSmExecute(pCcb, (smpMsg_t *) pMsg);
   121e0:	4601      	mov	r1, r0
   121e2:	4618      	mov	r0, r3
   121e4:	f7ff b9d0 	b.w	11588 <smpSmExecute>
}
   121e8:	4770      	bx	lr
   121ea:	bf00      	nop
   121ec:	10004918 	.word	0x10004918

000121f0 <smpGetScSecLevel>:
  if (pCcb->auth & SMP_AUTH_MITM_FLAG)
   121f0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   121f4:	075b      	lsls	r3, r3, #29
   121f6:	d50b      	bpl.n	12210 <smpGetScSecLevel+0x20>
    if (WSF_MIN(pCcb->pairReq[SMP_MAXKEY_POS], pCcb->pairRsp[SMP_MAXKEY_POS]) == SMP_KEY_SIZE_MAX)
   121f8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   121fc:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
   12200:	4293      	cmp	r3, r2
   12202:	bf28      	it	cs
   12204:	4613      	movcs	r3, r2
      secLevel = DM_SEC_LEVEL_ENC_AUTH;
   12206:	2b10      	cmp	r3, #16
   12208:	bf0c      	ite	eq
   1220a:	2003      	moveq	r0, #3
   1220c:	2002      	movne	r0, #2
   1220e:	4770      	bx	lr
    secLevel = DM_SEC_LEVEL_ENC;
   12210:	2001      	movs	r0, #1
}
   12212:	4770      	bx	lr

00012214 <SmpDmGetStk>:
{
   12214:	b430      	push	{r4, r5}
  if (smpCb.lescSupported && pCcb->pScCcb->lescEnabled && (pCcb->pScCcb->pLtk != NULL))
   12216:	4b1f      	ldr	r3, [pc, #124]	; (12294 <SmpDmGetStk+0x80>)
   12218:	f893 20ec 	ldrb.w	r2, [r3, #236]	; 0xec
  return &smpCb.ccb[connId - 1];
   1221c:	3801      	subs	r0, #1
  if (smpCb.lescSupported && pCcb->pScCcb->lescEnabled && (pCcb->pScCcb->pLtk != NULL))
   1221e:	b98a      	cbnz	r2, 12244 <SmpDmGetStk+0x30>
   12220:	00c2      	lsls	r2, r0, #3
  else if (pCcb->pScr != NULL)
   12222:	4410      	add	r0, r2
   12224:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   12228:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1222a:	b148      	cbz	r0, 12240 <SmpDmGetStk+0x2c>
    *pSecLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ? DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
   1222c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   12230:	f012 0f04 	tst.w	r2, #4
   12234:	bf14      	ite	ne
   12236:	2202      	movne	r2, #2
   12238:	2201      	moveq	r2, #1
   1223a:	700a      	strb	r2, [r1, #0]
    return pCcb->pScr->buf.b3;
   1223c:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1223e:	3020      	adds	r0, #32
}
   12240:	bc30      	pop	{r4, r5}
   12242:	4770      	bx	lr
  if (smpCb.lescSupported && pCcb->pScCcb->lescEnabled && (pCcb->pScCcb->pLtk != NULL))
   12244:	eb00 0cc0 	add.w	ip, r0, r0, lsl #3
   12248:	eb03 0ccc 	add.w	ip, r3, ip, lsl #3
   1224c:	00c2      	lsls	r2, r0, #3
   1224e:	f8dc 4044 	ldr.w	r4, [ip, #68]	; 0x44
   12252:	7825      	ldrb	r5, [r4, #0]
   12254:	2d00      	cmp	r5, #0
   12256:	d0e4      	beq.n	12222 <SmpDmGetStk+0xe>
   12258:	69a4      	ldr	r4, [r4, #24]
   1225a:	2c00      	cmp	r4, #0
   1225c:	d0e1      	beq.n	12222 <SmpDmGetStk+0xe>
  if (pCcb->auth & SMP_AUTH_MITM_FLAG)
   1225e:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
   12262:	0764      	lsls	r4, r4, #29
   12264:	d513      	bpl.n	1228e <SmpDmGetStk+0x7a>
    if (WSF_MIN(pCcb->pairReq[SMP_MAXKEY_POS], pCcb->pairRsp[SMP_MAXKEY_POS]) == SMP_KEY_SIZE_MAX)
   12266:	f89c 4024 	ldrb.w	r4, [ip, #36]	; 0x24
   1226a:	f89c 502b 	ldrb.w	r5, [ip, #43]	; 0x2b
   1226e:	42ac      	cmp	r4, r5
   12270:	bf28      	it	cs
   12272:	462c      	movcs	r4, r5
      secLevel = DM_SEC_LEVEL_ENC_AUTH;
   12274:	2c10      	cmp	r4, #16
   12276:	bf0c      	ite	eq
   12278:	2403      	moveq	r4, #3
   1227a:	2402      	movne	r4, #2
    return pCcb->pScCcb->pLtk->ltk_t;
   1227c:	4410      	add	r0, r2
   1227e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    *pSecLevel = smpGetScSecLevel(pCcb);
   12282:	700c      	strb	r4, [r1, #0]
    return pCcb->pScCcb->pLtk->ltk_t;
   12284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   12286:	6998      	ldr	r0, [r3, #24]
}
   12288:	bc30      	pop	{r4, r5}
    return pCcb->pScCcb->pLtk->ltk_t;
   1228a:	3010      	adds	r0, #16
}
   1228c:	4770      	bx	lr
    secLevel = DM_SEC_LEVEL_ENC;
   1228e:	2401      	movs	r4, #1
   12290:	e7f4      	b.n	1227c <SmpDmGetStk+0x68>
   12292:	bf00      	nop
   12294:	10004918 	.word	0x10004918

00012298 <SmpHandlerInit>:
{
   12298:	b570      	push	{r4, r5, r6, lr}
  smpCb.handlerId = handlerId;
   1229a:	4c14      	ldr	r4, [pc, #80]	; (122ec <SmpHandlerInit+0x54>)
{
   1229c:	4605      	mov	r5, r0
  smpCb.handlerId = handlerId;
   1229e:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
  SmpDbInit();
   122a2:	f7ff facb 	bl	1183c <SmpDbInit>
    pCcb->rspTimer.msg.param = i + 1;  /* param stores the conn id */
   122a6:	2202      	movs	r2, #2
   122a8:	2601      	movs	r6, #1
   122aa:	2303      	movs	r3, #3
   122ac:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    pCcb->waitTimer.msg.param = i + 1;  /* param stores the conn id */
   122b0:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
  L2cRegister(L2C_CID_SMP, smpL2cDataCback, smpL2cCtrlCback);
   122b4:	490e      	ldr	r1, [pc, #56]	; (122f0 <SmpHandlerInit+0x58>)
   122b6:	4a0f      	ldr	r2, [pc, #60]	; (122f4 <SmpHandlerInit+0x5c>)
    pCcb->rspTimer.handlerId = handlerId;
   122b8:	7325      	strb	r5, [r4, #12]
  L2cRegister(L2C_CID_SMP, smpL2cDataCback, smpL2cCtrlCback);
   122ba:	2006      	movs	r0, #6
    pCcb->rspTimer.msg.param = i + 1;  /* param stores the conn id */
   122bc:	8126      	strh	r6, [r4, #8]
    pCcb->waitTimer.handlerId = handlerId;
   122be:	7725      	strb	r5, [r4, #28]
    pCcb->waitTimer.msg.param = i + 1;  /* param stores the conn id */
   122c0:	8326      	strh	r6, [r4, #24]
    pCcb->rspTimer.handlerId = handlerId;
   122c2:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
    pCcb->waitTimer.handlerId = handlerId;
   122c6:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
    pCcb->rspTimer.handlerId = handlerId;
   122ca:	f884 509c 	strb.w	r5, [r4, #156]	; 0x9c
    pCcb->rspTimer.msg.param = i + 1;  /* param stores the conn id */
   122ce:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    pCcb->waitTimer.handlerId = handlerId;
   122d2:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
    pCcb->waitTimer.msg.param = i + 1;  /* param stores the conn id */
   122d6:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
  L2cRegister(L2C_CID_SMP, smpL2cDataCback, smpL2cCtrlCback);
   122da:	f001 fa23 	bl	13724 <L2cRegister>
  DmConnRegister(DM_CLIENT_ID_SMP, smpDmConnCback);
   122de:	4630      	mov	r0, r6
   122e0:	4905      	ldr	r1, [pc, #20]	; (122f8 <SmpHandlerInit+0x60>)
}
   122e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  DmConnRegister(DM_CLIENT_ID_SMP, smpDmConnCback);
   122e6:	f007 b97f 	b.w	195e8 <DmConnRegister>
   122ea:	bf00      	nop
   122ec:	10004918 	.word	0x10004918
   122f0:	00011b69 	.word	0x00011b69
   122f4:	00011d21 	.word	0x00011d21
   122f8:	00011c09 	.word	0x00011c09

000122fc <SmpHandler>:
  if (pMsg != NULL)
   122fc:	2900      	cmp	r1, #0
   122fe:	d046      	beq.n	1238e <SmpHandler+0x92>
    if (pMsg->event == SMP_DB_SERVICE_IND)
   12300:	788b      	ldrb	r3, [r1, #2]
   12302:	2b1f      	cmp	r3, #31
   12304:	d041      	beq.n	1238a <SmpHandler+0x8e>
{
   12306:	b510      	push	{r4, lr}
      if (pMsg->event == SMP_MSG_WSF_CMAC_CMPL)
   12308:	2b1c      	cmp	r3, #28
{
   1230a:	b084      	sub	sp, #16
      if (pMsg->event == SMP_MSG_WSF_CMAC_CMPL)
   1230c:	d035      	beq.n	1237a <SmpHandler+0x7e>
  return &smpCb.ccb[connId - 1];
   1230e:	7808      	ldrb	r0, [r1, #0]
   12310:	4b1f      	ldr	r3, [pc, #124]	; (12390 <SmpHandler+0x94>)
   12312:	3801      	subs	r0, #1
   12314:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   12318:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
      if (pCcb->connId != DM_CONN_ID_NONE)
   1231c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
   12320:	b1cb      	cbz	r3, 12356 <SmpHandler+0x5a>
        if (pMsg->event == SMP_MSG_WSF_AES_CMPL && pCcb->token != pMsg->status)
   12322:	788b      	ldrb	r3, [r1, #2]
   12324:	2b0b      	cmp	r3, #11
   12326:	d123      	bne.n	12370 <SmpHandler+0x74>
   12328:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
   1232c:	78ca      	ldrb	r2, [r1, #3]
   1232e:	4293      	cmp	r3, r2
   12330:	d01e      	beq.n	12370 <SmpHandler+0x74>
            wsfHandlerId_t  handlerId = 0;
   12332:	2400      	movs	r4, #0
            SMP_TRACE_WARN2("AES token mismatch: %d %d", pCcb->token, pMsg->status);
   12334:	4817      	ldr	r0, [pc, #92]	; (12394 <SmpHandler+0x98>)
            wsfHandlerId_t  handlerId = 0;
   12336:	f88d 400f 	strb.w	r4, [sp, #15]
            SMP_TRACE_WARN2("AES token mismatch: %d %d", pCcb->token, pMsg->status);
   1233a:	4619      	mov	r1, r3
            while((pBuf=WsfMsgDeq(&secCb.aesEncQueue, &handlerId))!=NULL)
   1233c:	4c16      	ldr	r4, [pc, #88]	; (12398 <SmpHandler+0x9c>)
            SMP_TRACE_WARN2("AES token mismatch: %d %d", pCcb->token, pMsg->status);
   1233e:	f7fd fe83 	bl	10048 <WsfTrace>
            while((pBuf=WsfMsgDeq(&secCb.aesEncQueue, &handlerId))!=NULL)
   12342:	e001      	b.n	12348 <SmpHandler+0x4c>
                WsfMsgFree(pBuf);
   12344:	f7fd fb08 	bl	f958 <WsfMsgFree>
            while((pBuf=WsfMsgDeq(&secCb.aesEncQueue, &handlerId))!=NULL)
   12348:	f10d 010f 	add.w	r1, sp, #15
   1234c:	4620      	mov	r0, r4
   1234e:	f7fd fb1f 	bl	f990 <WsfMsgDeq>
   12352:	2800      	cmp	r0, #0
   12354:	d1f6      	bne.n	12344 <SmpHandler+0x48>
  /* Handle events */
  else if (event)
  {

  }
}
   12356:	b004      	add	sp, #16
   12358:	bd10      	pop	{r4, pc}
  return &smpCb.ccb[connId - 1];
   1235a:	780b      	ldrb	r3, [r1, #0]
      if (pCcb->connId != DM_CONN_ID_NONE)
   1235c:	480c      	ldr	r0, [pc, #48]	; (12390 <SmpHandler+0x94>)
  return &smpCb.ccb[connId - 1];
   1235e:	3b01      	subs	r3, #1
      if (pCcb->connId != DM_CONN_ID_NONE)
   12360:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   12364:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   12368:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
   1236c:	2b00      	cmp	r3, #0
   1236e:	d0f2      	beq.n	12356 <SmpHandler+0x5a>
}
   12370:	b004      	add	sp, #16
   12372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          smpSmExecute(pCcb, (smpMsg_t *) pMsg);
   12376:	f7ff b907 	b.w	11588 <smpSmExecute>
        if (pCmac->pPlainText)
   1237a:	6888      	ldr	r0, [r1, #8]
   1237c:	2800      	cmp	r0, #0
   1237e:	d0ec      	beq.n	1235a <SmpHandler+0x5e>
   12380:	9101      	str	r1, [sp, #4]
          WsfBufFree(pCmac->pPlainText);
   12382:	f7fd fab1 	bl	f8e8 <WsfBufFree>
   12386:	9901      	ldr	r1, [sp, #4]
   12388:	e7c1      	b.n	1230e <SmpHandler+0x12>
      SmpDbService();
   1238a:	f7ff bafb 	b.w	11984 <SmpDbService>
   1238e:	4770      	bx	lr
   12390:	10004918 	.word	0x10004918
   12394:	0001fd20 	.word	0x0001fd20
   12398:	10005678 	.word	0x10005678

0001239c <smpScCatInitiatorBdAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static uint8_t *smpScCatInitiatorBdAddr(smpCcb_t *pCcb, uint8_t *pBuf)
{
   1239c:	b570      	push	{r4, r5, r6, lr}
   1239e:	4606      	mov	r6, r0
  dmConnCcb_t *pDmCcb = dmConnCcbById(pCcb->connId);
   123a0:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
{
   123a4:	460c      	mov	r4, r1
  dmConnCcb_t *pDmCcb = dmConnCcbById(pCcb->connId);
   123a6:	f007 f8fb 	bl	195a0 <dmConnCcbById>

  if (pDmCcb)
   123aa:	b318      	cbz	r0, 123f4 <smpScCatInitiatorBdAddr+0x58>
  {
    if (pCcb->initiator)
   123ac:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
   123b0:	4605      	mov	r5, r0
   123b2:	b17b      	cbz	r3, 123d4 <smpScCatInitiatorBdAddr+0x38>
    {
      /* if local device's using RPA */
      if (!BdaIsZeros(pDmCcb->localRpa))
   123b4:	f100 061a 	add.w	r6, r0, #26
   123b8:	4630      	mov	r0, r6
   123ba:	f001 f803 	bl	133c4 <BdaIsZeros>
   123be:	b9d8      	cbnz	r0, 123f8 <smpScCatInitiatorBdAddr+0x5c>
    else
    {
      /* if peer device's using RPA */
      if (!BdaIsZeros(pDmCcb->peerRpa))
      {
        *pBuf++ = DM_ADDR_RANDOM;
   123c0:	2301      	movs	r3, #1
   123c2:	f804 3b01 	strb.w	r3, [r4], #1
        WStrReverseCpy(pBuf, pDmCcb->peerRpa, BDA_ADDR_LEN);
   123c6:	2206      	movs	r2, #6
   123c8:	4631      	mov	r1, r6
   123ca:	4620      	mov	r0, r4
   123cc:	f001 f884 	bl	134d8 <WStrReverseCpy>
        *pBuf++ = pDmCcb->peerAddrType;
        WStrReverseCpy(pBuf, pDmCcb->peerAddr, BDA_ADDR_LEN);
      }
    }

    pBuf += BDA_ADDR_LEN;
   123d0:	1da0      	adds	r0, r4, #6
  }

  return pBuf;
}
   123d2:	bd70      	pop	{r4, r5, r6, pc}
      if (!BdaIsZeros(pDmCcb->peerRpa))
   123d4:	f100 0620 	add.w	r6, r0, #32
   123d8:	4630      	mov	r0, r6
   123da:	f000 fff3 	bl	133c4 <BdaIsZeros>
   123de:	2800      	cmp	r0, #0
   123e0:	d0ee      	beq.n	123c0 <smpScCatInitiatorBdAddr+0x24>
        *pBuf++ = pDmCcb->peerAddrType;
   123e2:	7ceb      	ldrb	r3, [r5, #19]
   123e4:	f804 3b01 	strb.w	r3, [r4], #1
        WStrReverseCpy(pBuf, pDmCcb->peerAddr, BDA_ADDR_LEN);
   123e8:	2206      	movs	r2, #6
   123ea:	4629      	mov	r1, r5
   123ec:	4620      	mov	r0, r4
   123ee:	f001 f873 	bl	134d8 <WStrReverseCpy>
   123f2:	e7ed      	b.n	123d0 <smpScCatInitiatorBdAddr+0x34>
   123f4:	4620      	mov	r0, r4
}
   123f6:	bd70      	pop	{r4, r5, r6, pc}
        *pBuf++ = pDmCcb->localAddrType;
   123f8:	7d2b      	ldrb	r3, [r5, #20]
   123fa:	f804 3b01 	strb.w	r3, [r4], #1
        WStrReverseCpy(pBuf, pDmCcb->localAddr, BDA_ADDR_LEN);
   123fe:	2206      	movs	r2, #6
   12400:	18a9      	adds	r1, r5, r2
   12402:	4620      	mov	r0, r4
   12404:	f001 f868 	bl	134d8 <WStrReverseCpy>
   12408:	e7e2      	b.n	123d0 <smpScCatInitiatorBdAddr+0x34>
   1240a:	bf00      	nop

0001240c <smpScCatResponderBdAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static uint8_t *smpScCatResponderBdAddr(smpCcb_t *pCcb, uint8_t *pBuf)
{
   1240c:	b570      	push	{r4, r5, r6, lr}
   1240e:	4606      	mov	r6, r0
  dmConnCcb_t *pDmCcb = dmConnCcbById(pCcb->connId);
   12410:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
{
   12414:	460c      	mov	r4, r1
  dmConnCcb_t *pDmCcb = dmConnCcbById(pCcb->connId);
   12416:	f007 f8c3 	bl	195a0 <dmConnCcbById>

  if (pDmCcb)
   1241a:	b318      	cbz	r0, 12464 <smpScCatResponderBdAddr+0x58>
  {
    if (pCcb->initiator)
   1241c:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
   12420:	4605      	mov	r5, r0
   12422:	b17b      	cbz	r3, 12444 <smpScCatResponderBdAddr+0x38>
    {
      /* if peer device's using RPA */
      if (!BdaIsZeros(pDmCcb->peerRpa))
   12424:	f100 0620 	add.w	r6, r0, #32
   12428:	4630      	mov	r0, r6
   1242a:	f000 ffcb 	bl	133c4 <BdaIsZeros>
   1242e:	b9d8      	cbnz	r0, 12468 <smpScCatResponderBdAddr+0x5c>
    else
    {
      /* if local device's using RPA */
      if (!BdaIsZeros(pDmCcb->localRpa))
      {
        *pBuf++ = DM_ADDR_RANDOM;
   12430:	2301      	movs	r3, #1
   12432:	f804 3b01 	strb.w	r3, [r4], #1
        WStrReverseCpy(pBuf, pDmCcb->localRpa, BDA_ADDR_LEN);
   12436:	2206      	movs	r2, #6
   12438:	4631      	mov	r1, r6
   1243a:	4620      	mov	r0, r4
   1243c:	f001 f84c 	bl	134d8 <WStrReverseCpy>
        *pBuf++ = pDmCcb->localAddrType;
        WStrReverseCpy(pBuf, pDmCcb->localAddr, BDA_ADDR_LEN);
      }
    }

    pBuf += BDA_ADDR_LEN;
   12440:	1da0      	adds	r0, r4, #6
  }

  return pBuf;
}
   12442:	bd70      	pop	{r4, r5, r6, pc}
      if (!BdaIsZeros(pDmCcb->localRpa))
   12444:	f100 061a 	add.w	r6, r0, #26
   12448:	4630      	mov	r0, r6
   1244a:	f000 ffbb 	bl	133c4 <BdaIsZeros>
   1244e:	2800      	cmp	r0, #0
   12450:	d0ee      	beq.n	12430 <smpScCatResponderBdAddr+0x24>
        *pBuf++ = pDmCcb->localAddrType;
   12452:	7d2b      	ldrb	r3, [r5, #20]
   12454:	f804 3b01 	strb.w	r3, [r4], #1
        WStrReverseCpy(pBuf, pDmCcb->localAddr, BDA_ADDR_LEN);
   12458:	2206      	movs	r2, #6
   1245a:	18a9      	adds	r1, r5, r2
   1245c:	4620      	mov	r0, r4
   1245e:	f001 f83b 	bl	134d8 <WStrReverseCpy>
   12462:	e7ed      	b.n	12440 <smpScCatResponderBdAddr+0x34>
   12464:	4620      	mov	r0, r4
}
   12466:	bd70      	pop	{r4, r5, r6, pc}
        *pBuf++ = pDmCcb->peerAddrType;
   12468:	7ceb      	ldrb	r3, [r5, #19]
   1246a:	f804 3b01 	strb.w	r3, [r4], #1
        WStrReverseCpy(pBuf, pDmCcb->peerAddr, BDA_ADDR_LEN);
   1246e:	2206      	movs	r2, #6
   12470:	4629      	mov	r1, r5
   12472:	4620      	mov	r0, r4
   12474:	f001 f830 	bl	134d8 <WStrReverseCpy>
   12478:	e7e2      	b.n	12440 <smpScCatResponderBdAddr+0x34>
   1247a:	bf00      	nop

0001247c <smpScProcPairing>:
 *
 *  \return TRUE on success, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t smpScProcPairing(smpCcb_t *pCcb, uint8_t *pOob, uint8_t *pDisplay)
{
   1247c:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool_t          justWorks = TRUE;
  uint8_t         localAuth;
  wsfMsgHdr_t     hdr;

  *pDisplay = FALSE;
   1247e:	2300      	movs	r3, #0
   12480:	7013      	strb	r3, [r2, #0]
  *pOob = SMP_OOB_DATA_NONE;
   12482:	700b      	strb	r3, [r1, #0]

  /* check for LE Secure Connections */
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
   12484:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
{
   12488:	4604      	mov	r4, r0
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
   1248a:	f013 0008 	ands.w	r0, r3, #8
{
   1248e:	b085      	sub	sp, #20
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
   12490:	d076      	beq.n	12580 <smpScProcPairing+0x104>
   12492:	f894 502a 	ldrb.w	r5, [r4, #42]	; 0x2a
   12496:	072d      	lsls	r5, r5, #28
   12498:	d572      	bpl.n	12580 <smpScProcPairing+0x104>
      (pCcb->pairRsp[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG))
  {
    /* if one or both devices have OOB authentication data */
    if ((pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT) ||
   1249a:	f894 5022 	ldrb.w	r5, [r4, #34]	; 0x22
   1249e:	2d01      	cmp	r5, #1
   124a0:	f000 80ab 	beq.w	125fa <smpScProcPairing+0x17e>
   124a4:	f894 5029 	ldrb.w	r5, [r4, #41]	; 0x29
   124a8:	2d01      	cmp	r5, #1
   124aa:	f000 80a6 	beq.w	125fa <smpScProcPairing+0x17e>
      justWorks = FALSE;
    }
  }

  /* if OOB authentication data not present and either device has set MITM option */
  if ((*pOob == SMP_OOB_DATA_NONE)                           &&
   124ae:	075d      	lsls	r5, r3, #29
   124b0:	d56c      	bpl.n	1258c <smpScProcPairing+0x110>
      ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG) ||
       (pCcb->pairRsp[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG)))
  {
    /* check for compatible I/O settings */
    if ((pCcb->pairReq[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* initiator has i/o and */
   124b2:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
   124b6:	2d03      	cmp	r5, #3
   124b8:	d06c      	beq.n	12594 <smpScProcPairing+0x118>
        (pCcb->pairRsp[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* responder has i/o and */
   124ba:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
    if ((pCcb->pairReq[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* initiator has i/o and */
   124be:	2e03      	cmp	r6, #3
   124c0:	d068      	beq.n	12594 <smpScProcPairing+0x118>
        (pCcb->pairRsp[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* responder has i/o and */
   124c2:	2d01      	cmp	r5, #1
   124c4:	f240 80c7 	bls.w	12656 <smpScProcPairing+0x1da>
      justWorks = FALSE;

      /* check if pin should be displayed (as initiator) */
      *pDisplay =
        ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||     /* initiator is display only or */
         (pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO) ||   /* initiator is display y/n  or */
   124c8:	2d04      	cmp	r5, #4
   124ca:	f000 8128 	beq.w	1271e <smpScProcPairing+0x2a2>
   124ce:	2300      	movs	r3, #0
   124d0:	4618      	mov	r0, r3
      *pDisplay =
   124d2:	7010      	strb	r0, [r2, #0]
         ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_DISP) &&     /* initiator is key/display and */
          (pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY ||      /* responder is key only or key/display */
           pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_DISP)));

      /* invert display setting if we are not initiator and both are not key only */
      if (!(pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY &&
   124d4:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
   124d8:	2802      	cmp	r0, #2
   124da:	f000 811a 	beq.w	12712 <smpScProcPairing+0x296>
            pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_ONLY))
      {
        *pDisplay ^= !pCcb->initiator;
   124de:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   124e2:	2800      	cmp	r0, #0
   124e4:	bf08      	it	eq
   124e6:	f083 0301 	eoreq.w	r3, r3, #1
   124ea:	7013      	strb	r3, [r2, #0]
      }
    }
  }

  /* Check for Secure Connections */
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
   124ec:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
      justWorks = FALSE;
   124f0:	2500      	movs	r5, #0
   124f2:	f003 0008 	and.w	r0, r3, #8
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
   124f6:	2800      	cmp	r0, #0
   124f8:	d04f      	beq.n	1259a <smpScProcPairing+0x11e>
      (pCcb->pairRsp[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG))
   124fa:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
   124fe:	0706      	lsls	r6, r0, #28
   12500:	d54b      	bpl.n	1259a <smpScProcPairing+0x11e>
  {
    if (smpCb.lescSupported == FALSE)
   12502:	4e94      	ldr	r6, [pc, #592]	; (12754 <smpScProcPairing+0x2d8>)
   12504:	f896 60ec 	ldrb.w	r6, [r6, #236]	; 0xec
   12508:	2e00      	cmp	r6, #0
   1250a:	d07e      	beq.n	1260a <smpScProcPairing+0x18e>
      smpSmExecute(pCcb, (smpMsg_t *) &hdr);
      return FALSE;
    }
    else
    {
      pCcb->pScCcb->lescEnabled = TRUE;
   1250c:	6c66      	ldr	r6, [r4, #68]	; 0x44
   1250e:	f240 1c01 	movw	ip, #257	; 0x101
   12512:	f8a6 c000 	strh.w	ip, [r6]
      pCcb->pScCcb->authType = SMP_AUTH_TYPE_JUST_WORKS;
      pCcb->pScCcb->display = *pDisplay;
   12516:	7812      	ldrb	r2, [r2, #0]
   12518:	7132      	strb	r2, [r6, #4]

      if (*pOob)
   1251a:	780a      	ldrb	r2, [r1, #0]
   1251c:	2a00      	cmp	r2, #0
   1251e:	f000 8088 	beq.w	12632 <smpScProcPairing+0x1b6>
      {
        pCcb->pScCcb->authType = SMP_AUTH_TYPE_OOB;
   12522:	2302      	movs	r3, #2
   12524:	7073      	strb	r3, [r6, #1]
        }

      }
    }

    hdr.param = pCcb->connId;
   12526:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
   1252a:	f8ad 300c 	strh.w	r3, [sp, #12]

    /* Allocate a scratch pad for Peer Key and CMAC calculations */
    if (SmpScAllocScratchBuffers(pCcb))
   1252e:	4620      	mov	r0, r4
   12530:	f000 fc5e 	bl	12df0 <SmpScAllocScratchBuffers>
   12534:	2800      	cmp	r0, #0
   12536:	f040 8093 	bne.w	12660 <smpScProcPairing+0x1e4>
      hdr.event = SMP_MSG_INT_LESC;
    }
    else
    {
      hdr.status = SMP_ERR_UNSPECIFIED;
      hdr.event = SMP_MSG_API_CANCEL_REQ;
   1253a:	f640 0303 	movw	r3, #2051	; 0x803
   1253e:	f8ad 300e 	strh.w	r3, [sp, #14]
    }

    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   12542:	a903      	add	r1, sp, #12
   12544:	4620      	mov	r0, r4
   12546:	9101      	str	r1, [sp, #4]
   12548:	4e83      	ldr	r6, [pc, #524]	; (12758 <smpScProcPairing+0x2dc>)
   1254a:	f7ff f81d 	bl	11588 <smpSmExecute>
   1254e:	9901      	ldr	r1, [sp, #4]
    hdr.param = pCcb->connId;
    hdr.event = SMP_MSG_INT_LEGACY;
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
  }

  if (!justWorks)
   12550:	2d00      	cmp	r5, #0
   12552:	d139      	bne.n	125c8 <smpScProcPairing+0x14c>
  {
    /* set auth flags with mitm bit set */
    pCcb->auth = (pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS]) | SMP_AUTH_MITM_FLAG;
   12554:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   12558:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    pCcb->auth = pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS] & ~SMP_AUTH_MITM_FLAG;
  }

  /* if we ended up with 'just works' but the device configuration requires authentication */
  localAuth = (pCcb->initiator) ? pCcb->pairReq[SMP_AUTHREQ_POS] : pCcb->pairRsp[SMP_AUTHREQ_POS];
  if (justWorks && (pSmpCfg->auth & localAuth & SMP_AUTH_MITM_FLAG))
   1255c:	6832      	ldr	r2, [r6, #0]
    pCcb->auth = (pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS]) | SMP_AUTH_MITM_FLAG;
   1255e:	4003      	ands	r3, r0
   12560:	f043 0304 	orr.w	r3, r3, #4
   12564:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    return FALSE;
  }

  /* if max encryption key is less than our minimum */
  if (pCcb->pairReq[SMP_MAXKEY_POS] < pSmpCfg->minKeyLen ||
   12568:	7953      	ldrb	r3, [r2, #5]
   1256a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   1256e:	429a      	cmp	r2, r3
   12570:	d35a      	bcc.n	12628 <smpScProcPairing+0x1ac>
   12572:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
   12576:	429a      	cmp	r2, r3
   12578:	d356      	bcc.n	12628 <smpScProcPairing+0x1ac>
    hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    return FALSE;
  }

  return TRUE;
   1257a:	2001      	movs	r0, #1
}
   1257c:	b005      	add	sp, #20
   1257e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT) &&
   12580:	f894 5022 	ldrb.w	r5, [r4, #34]	; 0x22
   12584:	2d01      	cmp	r5, #1
   12586:	d08d      	beq.n	124a4 <smpScProcPairing+0x28>
  if ((*pOob == SMP_OOB_DATA_NONE)                           &&
   12588:	075d      	lsls	r5, r3, #29
   1258a:	d492      	bmi.n	124b2 <smpScProcPairing+0x36>
      ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG) ||
   1258c:	f894 502a 	ldrb.w	r5, [r4, #42]	; 0x2a
   12590:	076f      	lsls	r7, r5, #29
   12592:	d48e      	bmi.n	124b2 <smpScProcPairing+0x36>
   12594:	2501      	movs	r5, #1
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
   12596:	2800      	cmp	r0, #0
   12598:	d1af      	bne.n	124fa <smpScProcPairing+0x7e>
  else if ((pSmpCfg->auth & SMP_AUTH_SC_FLAG) != 0)
   1259a:	4e6f      	ldr	r6, [pc, #444]	; (12758 <smpScProcPairing+0x2dc>)
   1259c:	6833      	ldr	r3, [r6, #0]
   1259e:	7a1b      	ldrb	r3, [r3, #8]
   125a0:	f013 0308 	ands.w	r3, r3, #8
   125a4:	d131      	bne.n	1260a <smpScProcPairing+0x18e>
    pCcb->pScCcb->lescEnabled = FALSE;
   125a6:	6c62      	ldr	r2, [r4, #68]	; 0x44
   125a8:	7013      	strb	r3, [r2, #0]
    hdr.param = pCcb->connId;
   125aa:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
   125ae:	f8ad 300c 	strh.w	r3, [sp, #12]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   125b2:	a903      	add	r1, sp, #12
    hdr.event = SMP_MSG_INT_LEGACY;
   125b4:	2312      	movs	r3, #18
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   125b6:	4620      	mov	r0, r4
   125b8:	9101      	str	r1, [sp, #4]
    hdr.event = SMP_MSG_INT_LEGACY;
   125ba:	f88d 300e 	strb.w	r3, [sp, #14]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   125be:	f7fe ffe3 	bl	11588 <smpSmExecute>
   125c2:	9901      	ldr	r1, [sp, #4]
  if (!justWorks)
   125c4:	2d00      	cmp	r5, #0
   125c6:	d0c5      	beq.n	12554 <smpScProcPairing+0xd8>
    pCcb->auth = pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS] & ~SMP_AUTH_MITM_FLAG;
   125c8:	f894 5023 	ldrb.w	r5, [r4, #35]	; 0x23
   125cc:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  if (justWorks && (pSmpCfg->auth & localAuth & SMP_AUTH_MITM_FLAG))
   125d0:	6832      	ldr	r2, [r6, #0]
    pCcb->auth = pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS] & ~SMP_AUTH_MITM_FLAG;
   125d2:	ea05 0003 	and.w	r0, r5, r3
   125d6:	f020 0004 	bic.w	r0, r0, #4
   125da:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  localAuth = (pCcb->initiator) ? pCcb->pairReq[SMP_AUTHREQ_POS] : pCcb->pairRsp[SMP_AUTHREQ_POS];
   125de:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   125e2:	2800      	cmp	r0, #0
   125e4:	bf18      	it	ne
   125e6:	462b      	movne	r3, r5
  if (justWorks && (pSmpCfg->auth & localAuth & SMP_AUTH_MITM_FLAG))
   125e8:	7a10      	ldrb	r0, [r2, #8]
   125ea:	4003      	ands	r3, r0
   125ec:	075e      	lsls	r6, r3, #29
   125ee:	d5bb      	bpl.n	12568 <smpScProcPairing+0xec>
    hdr.param = pCcb->connId;
   125f0:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   125f4:	f240 3303 	movw	r3, #771	; 0x303
   125f8:	e00c      	b.n	12614 <smpScProcPairing+0x198>
      *pOob = SMP_OOB_DATA_PRESENT;
   125fa:	2301      	movs	r3, #1
   125fc:	700b      	strb	r3, [r1, #0]
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
   125fe:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   12602:	2500      	movs	r5, #0
   12604:	f003 0008 	and.w	r0, r3, #8
   12608:	e775      	b.n	124f6 <smpScProcPairing+0x7a>
      hdr.param = pCcb->connId;
   1260a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
      hdr.event = SMP_MSG_API_CANCEL_REQ;
   1260e:	f240 3303 	movw	r3, #771	; 0x303
      smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   12612:	a903      	add	r1, sp, #12
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   12614:	4620      	mov	r0, r4
    hdr.param = pCcb->connId;
   12616:	f8ad 200c 	strh.w	r2, [sp, #12]
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   1261a:	f8ad 300e 	strh.w	r3, [sp, #14]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1261e:	f7fe ffb3 	bl	11588 <smpSmExecute>
    return FALSE;
   12622:	2000      	movs	r0, #0
}
   12624:	b005      	add	sp, #20
   12626:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdr.param = pCcb->connId;
   12628:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   1262c:	f240 6303 	movw	r3, #1539	; 0x603
   12630:	e7f0      	b.n	12614 <smpScProcPairing+0x198>
      else if (justWorks == FALSE)
   12632:	2d00      	cmp	r5, #0
   12634:	d160      	bne.n	126f8 <smpScProcPairing+0x27c>
        pCcb->pScCcb->authType = SMP_AUTH_TYPE_PASSKEY;
   12636:	2203      	movs	r2, #3
   12638:	7072      	strb	r2, [r6, #1]
        if (((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_DISP) &&
   1263a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   1263e:	2a04      	cmp	r2, #4
   12640:	d07b      	beq.n	1273a <smpScProcPairing+0x2be>
              (pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_DISP))) ||
   12642:	2a01      	cmp	r2, #1
   12644:	f000 8082 	beq.w	1274c <smpScProcPairing+0x2d0>
        else if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_KP_FLAG) &&
   12648:	06db      	lsls	r3, r3, #27
   1264a:	d560      	bpl.n	1270e <smpScProcPairing+0x292>
   1264c:	06c7      	lsls	r7, r0, #27
   1264e:	d55e      	bpl.n	1270e <smpScProcPairing+0x292>
          pCcb->pScCcb->kpNotify = TRUE;
   12650:	2301      	movs	r3, #1
   12652:	70b3      	strb	r3, [r6, #2]
   12654:	e767      	b.n	12526 <smpScProcPairing+0xaa>
        !(((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||     /* both don't have display only */
   12656:	2e01      	cmp	r6, #1
   12658:	d99c      	bls.n	12594 <smpScProcPairing+0x118>
   1265a:	2301      	movs	r3, #1
   1265c:	4618      	mov	r0, r3
   1265e:	e738      	b.n	124d2 <smpScProcPairing+0x56>
      memcpy(pCcb->pScCcb->pLocalPublicKey->pubKeyX, DmSecGetEccKey()->pubKey_x, SMP_PUB_KEY_LEN);
   12660:	6c63      	ldr	r3, [r4, #68]	; 0x44
   12662:	68de      	ldr	r6, [r3, #12]
   12664:	f007 fcca 	bl	19ffc <DmSecGetEccKey>
   12668:	6801      	ldr	r1, [r0, #0]
   1266a:	6842      	ldr	r2, [r0, #4]
   1266c:	6883      	ldr	r3, [r0, #8]
   1266e:	f8d0 c00c 	ldr.w	ip, [r0, #12]
   12672:	f8c6 c00c 	str.w	ip, [r6, #12]
   12676:	6031      	str	r1, [r6, #0]
   12678:	6072      	str	r2, [r6, #4]
   1267a:	60b3      	str	r3, [r6, #8]
   1267c:	6901      	ldr	r1, [r0, #16]
   1267e:	6942      	ldr	r2, [r0, #20]
   12680:	6983      	ldr	r3, [r0, #24]
   12682:	f8d0 c01c 	ldr.w	ip, [r0, #28]
   12686:	f8c6 c01c 	str.w	ip, [r6, #28]
   1268a:	6131      	str	r1, [r6, #16]
   1268c:	6172      	str	r2, [r6, #20]
   1268e:	61b3      	str	r3, [r6, #24]
      memcpy(pCcb->pScCcb->pLocalPublicKey->pubKeyY, DmSecGetEccKey()->pubKey_y, SMP_PUB_KEY_LEN);
   12690:	6c63      	ldr	r3, [r4, #68]	; 0x44
   12692:	68df      	ldr	r7, [r3, #12]
   12694:	f007 fcb2 	bl	19ffc <DmSecGetEccKey>
   12698:	6a06      	ldr	r6, [r0, #32]
   1269a:	6a41      	ldr	r1, [r0, #36]	; 0x24
   1269c:	6a82      	ldr	r2, [r0, #40]	; 0x28
   1269e:	f8d0 c02c 	ldr.w	ip, [r0, #44]	; 0x2c
   126a2:	f8c7 c02c 	str.w	ip, [r7, #44]	; 0x2c
   126a6:	623e      	str	r6, [r7, #32]
   126a8:	6279      	str	r1, [r7, #36]	; 0x24
   126aa:	62ba      	str	r2, [r7, #40]	; 0x28
   126ac:	6b06      	ldr	r6, [r0, #48]	; 0x30
   126ae:	6b41      	ldr	r1, [r0, #52]	; 0x34
   126b0:	6b82      	ldr	r2, [r0, #56]	; 0x38
   126b2:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
   126b6:	f8c7 c03c 	str.w	ip, [r7, #60]	; 0x3c
   126ba:	6379      	str	r1, [r7, #52]	; 0x34
   126bc:	63ba      	str	r2, [r7, #56]	; 0x38
   126be:	633e      	str	r6, [r7, #48]	; 0x30
      memcpy(pCcb->pScCcb->pPrivateKey, DmSecGetEccKey()->privKey, SMP_PRIVATE_KEY_LEN);
   126c0:	6c63      	ldr	r3, [r4, #68]	; 0x44
   126c2:	691e      	ldr	r6, [r3, #16]
   126c4:	f007 fc9a 	bl	19ffc <DmSecGetEccKey>
   126c8:	6c01      	ldr	r1, [r0, #64]	; 0x40
   126ca:	6c42      	ldr	r2, [r0, #68]	; 0x44
   126cc:	6c83      	ldr	r3, [r0, #72]	; 0x48
   126ce:	f8d0 c04c 	ldr.w	ip, [r0, #76]	; 0x4c
   126d2:	f8c6 c00c 	str.w	ip, [r6, #12]
   126d6:	6031      	str	r1, [r6, #0]
   126d8:	6072      	str	r2, [r6, #4]
   126da:	60b3      	str	r3, [r6, #8]
   126dc:	6d42      	ldr	r2, [r0, #84]	; 0x54
   126de:	6d01      	ldr	r1, [r0, #80]	; 0x50
   126e0:	6d83      	ldr	r3, [r0, #88]	; 0x58
   126e2:	f8d0 c05c 	ldr.w	ip, [r0, #92]	; 0x5c
   126e6:	6172      	str	r2, [r6, #20]
      hdr.event = SMP_MSG_INT_LESC;
   126e8:	2211      	movs	r2, #17
      memcpy(pCcb->pScCcb->pPrivateKey, DmSecGetEccKey()->privKey, SMP_PRIVATE_KEY_LEN);
   126ea:	f8c6 c01c 	str.w	ip, [r6, #28]
   126ee:	6131      	str	r1, [r6, #16]
   126f0:	61b3      	str	r3, [r6, #24]
      hdr.event = SMP_MSG_INT_LESC;
   126f2:	f88d 200e 	strb.w	r2, [sp, #14]
   126f6:	e724      	b.n	12542 <smpScProcPairing+0xc6>
        if ((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_YES_NO) &&
   126f8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   126fc:	2b01      	cmp	r3, #1
   126fe:	d014      	beq.n	1272a <smpScProcPairing+0x2ae>
        else if((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_NO_IN_NO_OUT) ||
   12700:	2b03      	cmp	r3, #3
   12702:	d004      	beq.n	1270e <smpScProcPairing+0x292>
             ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO) ||
   12704:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
        else if((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_NO_IN_NO_OUT) ||
   12708:	2b03      	cmp	r3, #3
   1270a:	f47f af0c 	bne.w	12526 <smpScProcPairing+0xaa>
          justWorks = FALSE;
   1270e:	2500      	movs	r5, #0
   12710:	e709      	b.n	12526 <smpScProcPairing+0xaa>
      if (!(pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY &&
   12712:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
   12716:	2802      	cmp	r0, #2
   12718:	f47f aee1 	bne.w	124de <smpScProcPairing+0x62>
   1271c:	e6e6      	b.n	124ec <smpScProcPairing+0x70>
         ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_DISP) &&     /* initiator is key/display and */
   1271e:	2e02      	cmp	r6, #2
   12720:	d09b      	beq.n	1265a <smpScProcPairing+0x1de>
          (pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY ||      /* responder is key only or key/display */
   12722:	2e04      	cmp	r6, #4
   12724:	f47f aed3 	bne.w	124ce <smpScProcPairing+0x52>
   12728:	e797      	b.n	1265a <smpScProcPairing+0x1de>
            (pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO))
   1272a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
        if ((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_YES_NO) &&
   1272e:	2b01      	cmp	r3, #1
   12730:	d1ea      	bne.n	12708 <smpScProcPairing+0x28c>
          pCcb->pScCcb->authType = SMP_AUTH_TYPE_NUM_COMP;
   12732:	2304      	movs	r3, #4
   12734:	7073      	strb	r3, [r6, #1]
          justWorks = FALSE;
   12736:	4615      	mov	r5, r2
   12738:	e6f5      	b.n	12526 <smpScProcPairing+0xaa>
             ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO) ||
   1273a:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
        if (((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_DISP) &&
   1273e:	2a01      	cmp	r2, #1
   12740:	d001      	beq.n	12746 <smpScProcPairing+0x2ca>
            ((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_YES_NO) &&
   12742:	2a04      	cmp	r2, #4
   12744:	d180      	bne.n	12648 <smpScProcPairing+0x1cc>
          pCcb->pScCcb->authType = SMP_AUTH_TYPE_NUM_COMP;
   12746:	2304      	movs	r3, #4
   12748:	7073      	strb	r3, [r6, #1]
   1274a:	e6ec      	b.n	12526 <smpScProcPairing+0xaa>
            ((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_YES_NO) &&
   1274c:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   12750:	e7f7      	b.n	12742 <smpScProcPairing+0x2c6>
   12752:	bf00      	nop
   12754:	10004918 	.word	0x10004918
   12758:	10002b10 	.word	0x10002b10

0001275c <smpScAuthReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScAuthReq(smpCcb_t *pCcb, uint8_t oob, uint8_t display)
{
   1275c:	b510      	push	{r4, lr}
    smpDmAuthRsp_t        authRsp;
    dmSecAuthReqIndEvt_t  authReq;
  } buf;

  /* if authenticated pairing */
  if (((!pCcb->pScCcb->lescEnabled) && (pCcb->auth & SMP_AUTH_MITM_FLAG )) ||
   1275e:	6c43      	ldr	r3, [r0, #68]	; 0x44
   12760:	781c      	ldrb	r4, [r3, #0]
{
   12762:	b086      	sub	sp, #24
  if (((!pCcb->pScCcb->lescEnabled) && (pCcb->auth & SMP_AUTH_MITM_FLAG )) ||
   12764:	b9bc      	cbnz	r4, 12796 <smpScAuthReq+0x3a>
   12766:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   1276a:	075b      	lsls	r3, r3, #29
   1276c:	d416      	bmi.n	1279c <smpScAuthReq+0x40>
  }
  else
  {
    /* else use just works; send ourselves a auth rsp with all zero pin */
    buf.authRsp.hdr.param = pCcb->connId;
    buf.authRsp.hdr.event = SMP_MSG_API_AUTH_RSP;
   1276e:	2104      	movs	r1, #4
    buf.authRsp.authData[0] = 0;
   12770:	2300      	movs	r3, #0
    buf.authRsp.hdr.param = pCcb->connId;
   12772:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
    buf.authRsp.hdr.event = SMP_MSG_API_AUTH_RSP;
   12776:	f88d 1002 	strb.w	r1, [sp, #2]
    buf.authRsp.authData[1] = 0;
    buf.authRsp.authData[2] = 0;
    buf.authRsp.authDataLen = SMP_PIN_LEN;
   1277a:	2203      	movs	r2, #3
    smpSmExecute(pCcb, (smpMsg_t *) &buf.authRsp);
   1277c:	4669      	mov	r1, sp
    buf.authRsp.hdr.param = pCcb->connId;
   1277e:	f8ad 4000 	strh.w	r4, [sp]
    buf.authRsp.authData[0] = 0;
   12782:	f8ad 3004 	strh.w	r3, [sp, #4]
    buf.authRsp.authData[2] = 0;
   12786:	f88d 3006 	strb.w	r3, [sp, #6]
    buf.authRsp.authDataLen = SMP_PIN_LEN;
   1278a:	f88d 2014 	strb.w	r2, [sp, #20]
    smpSmExecute(pCcb, (smpMsg_t *) &buf.authRsp);
   1278e:	f7fe fefb 	bl	11588 <smpSmExecute>
  }
}
   12792:	b006      	add	sp, #24
   12794:	bd10      	pop	{r4, pc}
      ((pCcb->pScCcb->lescEnabled) && (pCcb->pScCcb->authType == SMP_AUTH_TYPE_OOB)))
   12796:	785b      	ldrb	r3, [r3, #1]
   12798:	2b02      	cmp	r3, #2
   1279a:	d1e8      	bne.n	1276e <smpScAuthReq+0x12>
    buf.authReq.hdr.param = pCcb->connId;
   1279c:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
   127a0:	f8ad 4000 	strh.w	r4, [sp]
    buf.authReq.hdr.event = DM_SEC_AUTH_REQ_IND;
   127a4:	232e      	movs	r3, #46	; 0x2e
    DmSmpCbackExec((dmEvt_t *) &buf.authReq);
   127a6:	4668      	mov	r0, sp
    buf.authReq.hdr.event = DM_SEC_AUTH_REQ_IND;
   127a8:	f88d 3002 	strb.w	r3, [sp, #2]
    buf.authReq.oob = oob;
   127ac:	f88d 1004 	strb.w	r1, [sp, #4]
    buf.authReq.display = display;
   127b0:	f88d 2005 	strb.w	r2, [sp, #5]
    DmSmpCbackExec((dmEvt_t *) &buf.authReq);
   127b4:	f007 fbbe 	bl	19f34 <DmSmpCbackExec>
}
   127b8:	b006      	add	sp, #24
   127ba:	bd10      	pop	{r4, pc}

000127bc <smpScActCleanup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActCleanup(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   127bc:	b510      	push	{r4, lr}
   127be:	4604      	mov	r4, r0
  smpActCleanup(pCcb, pMsg);
   127c0:	f7fe fbc0 	bl	10f44 <smpActCleanup>

  /* Free scratch buffers */
  SmpScFreeScratchBuffers(pCcb);
   127c4:	4620      	mov	r0, r4
}
   127c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SmpScFreeScratchBuffers(pCcb);
   127ca:	f000 bb51 	b.w	12e70 <SmpScFreeScratchBuffers>
   127ce:	bf00      	nop

000127d0 <smpScActPairingFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActPairingFailed(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   127d0:	b538      	push	{r3, r4, r5, lr}
   127d2:	4604      	mov	r4, r0
   127d4:	460d      	mov	r5, r1
  smpActCleanup(pCcb, pMsg);
   127d6:	f7fe fbb5 	bl	10f44 <smpActCleanup>
  SmpScFreeScratchBuffers(pCcb);
   127da:	4620      	mov	r0, r4
   127dc:	f000 fb48 	bl	12e70 <SmpScFreeScratchBuffers>
  /* Perform LESC Cleanup */
  smpScActCleanup(pCcb, pMsg);

  /* Process failure */
  smpActPairingFailed(pCcb, pMsg);
   127e0:	4629      	mov	r1, r5
   127e2:	4620      	mov	r0, r4
}
   127e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpActPairingFailed(pCcb, pMsg);
   127e8:	f7fe bbdc 	b.w	10fa4 <smpActPairingFailed>

000127ec <smpScActPairingCancel>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActPairingCancel(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   127ec:	b538      	push	{r3, r4, r5, lr}
   127ee:	4604      	mov	r4, r0
   127f0:	460d      	mov	r5, r1
  /* send pairing failed packet */
  smpSendPairingFailed(pCcb, pMsg->hdr.status);
   127f2:	78c9      	ldrb	r1, [r1, #3]
   127f4:	f7fe fbc4 	bl	10f80 <smpSendPairingFailed>
  smpActCleanup(pCcb, pMsg);
   127f8:	4629      	mov	r1, r5
   127fa:	4620      	mov	r0, r4
   127fc:	f7fe fba2 	bl	10f44 <smpActCleanup>
  SmpScFreeScratchBuffers(pCcb);
   12800:	4620      	mov	r0, r4
   12802:	f000 fb35 	bl	12e70 <SmpScFreeScratchBuffers>
  smpActPairingFailed(pCcb, pMsg);
   12806:	4629      	mov	r1, r5
   12808:	4620      	mov	r0, r4

  smpScActPairingFailed(pCcb, pMsg);
}
   1280a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpActPairingFailed(pCcb, pMsg);
   1280e:	f7fe bbc9 	b.w	10fa4 <smpActPairingFailed>
   12812:	bf00      	nop

00012814 <smpScActAuthSelect>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActAuthSelect(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   12814:	b530      	push	{r4, r5, lr}
  wsfMsgHdr_t hdr;
  uint8_t *pPacket = pMsg->data.pPacket + L2C_PAYLOAD_START;

  /* Process public key from peer (store in MSB first format) */
  WStrReverseCpy(pCcb->pScCcb->pPeerPublicKey->pubKeyX, &pPacket[SMP_PUB_KEY_X_POS], SMP_PUB_KEY_LEN);
   12816:	6c43      	ldr	r3, [r0, #68]	; 0x44
  uint8_t *pPacket = pMsg->data.pPacket + L2C_PAYLOAD_START;
   12818:	684d      	ldr	r5, [r1, #4]
{
   1281a:	4604      	mov	r4, r0
   1281c:	b083      	sub	sp, #12
  WStrReverseCpy(pCcb->pScCcb->pPeerPublicKey->pubKeyX, &pPacket[SMP_PUB_KEY_X_POS], SMP_PUB_KEY_LEN);
   1281e:	6898      	ldr	r0, [r3, #8]
   12820:	2220      	movs	r2, #32
   12822:	f105 0109 	add.w	r1, r5, #9
   12826:	f000 fe57 	bl	134d8 <WStrReverseCpy>
  WStrReverseCpy(pCcb->pScCcb->pPeerPublicKey->pubKeyY, &pPacket[SMP_PUB_KEY_Y_POS], SMP_PUB_KEY_LEN);
   1282a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1282c:	6898      	ldr	r0, [r3, #8]
   1282e:	2220      	movs	r2, #32
   12830:	4410      	add	r0, r2
   12832:	f105 0129 	add.w	r1, r5, #41	; 0x29
   12836:	f000 fe4f 	bl	134d8 <WStrReverseCpy>

  /* Message state machine indicating authorization mode (JW, OOB, or passkey) */
  hdr.param = pCcb->connId;
   1283a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d

  switch(pCcb->pScCcb->authType)
   1283e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  hdr.param = pCcb->connId;
   12840:	f8ad 2004 	strh.w	r2, [sp, #4]
  switch(pCcb->pScCcb->authType)
   12844:	785b      	ldrb	r3, [r3, #1]
   12846:	3b01      	subs	r3, #1
   12848:	2b03      	cmp	r3, #3
   1284a:	d81e      	bhi.n	1288a <smpScActAuthSelect+0x76>
   1284c:	e8df f003 	tbb	[pc, r3]
   12850:	020b1402 	.word	0x020b1402
  {
  case SMP_AUTH_TYPE_NUM_COMP:
  case SMP_AUTH_TYPE_JUST_WORKS:
    hdr.event = SMP_MSG_INT_JW_NC;
   12854:	2313      	movs	r3, #19
   12856:	f88d 3006 	strb.w	r3, [sp, #6]
    hdr.status = SMP_ERR_UNSPECIFIED;
    hdr.event = SMP_MSG_API_CANCEL_REQ;
    break;
  }

  smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1285a:	a901      	add	r1, sp, #4
   1285c:	4620      	mov	r0, r4
   1285e:	f7fe fe93 	bl	11588 <smpSmExecute>
}
   12862:	b003      	add	sp, #12
   12864:	bd30      	pop	{r4, r5, pc}
    hdr.event = SMP_MSG_INT_PASSKEY;
   12866:	2314      	movs	r3, #20
  smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   12868:	a901      	add	r1, sp, #4
   1286a:	4620      	mov	r0, r4
    hdr.event = SMP_MSG_INT_PASSKEY;
   1286c:	f88d 3006 	strb.w	r3, [sp, #6]
  smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   12870:	f7fe fe8a 	bl	11588 <smpSmExecute>
}
   12874:	b003      	add	sp, #12
   12876:	bd30      	pop	{r4, r5, pc}
    hdr.event = SMP_MSG_INT_OOB;
   12878:	2315      	movs	r3, #21
  smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1287a:	a901      	add	r1, sp, #4
   1287c:	4620      	mov	r0, r4
    hdr.event = SMP_MSG_INT_OOB;
   1287e:	f88d 3006 	strb.w	r3, [sp, #6]
  smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   12882:	f7fe fe81 	bl	11588 <smpSmExecute>
}
   12886:	b003      	add	sp, #12
   12888:	bd30      	pop	{r4, r5, pc}
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   1288a:	f640 0303 	movw	r3, #2051	; 0x803
   1288e:	f8ad 3006 	strh.w	r3, [sp, #6]
    break;
   12892:	e7e2      	b.n	1285a <smpScActAuthSelect+0x46>

00012894 <smpScActPkSetup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActPkSetup(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   12894:	b500      	push	{lr}
  {
    smpDmAuthRsp_t        authRsp;
    dmSecAuthReqIndEvt_t  authReq;
  } buf;

  pCcb->pScCcb->pkPos = 0;
   12896:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   12898:	b087      	sub	sp, #28
  pCcb->pScCcb->pkPos = 0;
   1289a:	2200      	movs	r2, #0

  /* Next command is the Pair Confirm */
  pCcb->nextCmdCode = SMP_CMD_PAIR_CNF;
   1289c:	2103      	movs	r1, #3
  pCcb->pScCcb->pkPos = 0;
   1289e:	70da      	strb	r2, [r3, #3]
  pCcb->nextCmdCode = SMP_CMD_PAIR_CNF;
   128a0:	f880 103f 	strb.w	r1, [r0, #63]	; 0x3f

  /* request pin or oob from user */
  buf.authReq.hdr.param = pCcb->connId;
  buf.authReq.hdr.event = DM_SEC_AUTH_REQ_IND;
  buf.authReq.oob = FALSE;
   128a4:	f88d 2004 	strb.w	r2, [sp, #4]
  buf.authReq.hdr.param = pCcb->connId;
   128a8:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
  buf.authReq.display = pCcb->pScCcb->display;
   128ac:	791b      	ldrb	r3, [r3, #4]
  buf.authReq.hdr.param = pCcb->connId;
   128ae:	f8ad 1000 	strh.w	r1, [sp]
  buf.authReq.hdr.event = DM_SEC_AUTH_REQ_IND;
   128b2:	222e      	movs	r2, #46	; 0x2e
  DmSmpCbackExec((dmEvt_t *)&buf.authReq);
   128b4:	4668      	mov	r0, sp
  buf.authReq.hdr.event = DM_SEC_AUTH_REQ_IND;
   128b6:	f88d 2002 	strb.w	r2, [sp, #2]
  buf.authReq.display = pCcb->pScCcb->display;
   128ba:	f88d 3005 	strb.w	r3, [sp, #5]
  DmSmpCbackExec((dmEvt_t *)&buf.authReq);
   128be:	f007 fb39 	bl	19f34 <DmSmpCbackExec>
}
   128c2:	b007      	add	sp, #28
   128c4:	f85d fb04 	ldr.w	pc, [sp], #4

000128c8 <smpScActJwncCalcF4>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActJwncCalcF4(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   128c8:	b570      	push	{r4, r5, r6, lr}
  /* Cb = f4(PKbx, PKax, Nb, 0x00) where f4(U, V, x, Z) = AES-CMACx (U || V || Z) */
  if (pCcb->initiator)
   128ca:	f890 603a 	ldrb.w	r6, [r0, #58]	; 0x3a
  {
    SMP_TRACE_256("F4 PKb", pCcb->pScCcb->pPeerPublicKey->pubKeyX);
   128ce:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   128d0:	b082      	sub	sp, #8
   128d2:	4604      	mov	r4, r0
   128d4:	460d      	mov	r5, r1
  if (pCcb->initiator)
   128d6:	b1fe      	cbz	r6, 12918 <smpScActJwncCalcF4+0x50>
    SMP_TRACE_256("F4 PKb", pCcb->pScCcb->pPeerPublicKey->pubKeyX);
   128d8:	6899      	ldr	r1, [r3, #8]
   128da:	481f      	ldr	r0, [pc, #124]	; (12958 <smpScActJwncCalcF4+0x90>)
   128dc:	2220      	movs	r2, #32
   128de:	f000 fcb9 	bl	13254 <smpLogByteArray>
    SMP_TRACE_256("F4 PKa", pCcb->pScCcb->pLocalPublicKey->pubKeyX);
   128e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   128e4:	481d      	ldr	r0, [pc, #116]	; (1295c <smpScActJwncCalcF4+0x94>)
   128e6:	68d9      	ldr	r1, [r3, #12]
   128e8:	2220      	movs	r2, #32
   128ea:	f000 fcb3 	bl	13254 <smpLogByteArray>
    SMP_TRACE_128("F4 Nb", pCcb->pScCcb->pScratch->Nb_Eb);
   128ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
   128f0:	481b      	ldr	r0, [pc, #108]	; (12960 <smpScActJwncCalcF4+0x98>)
   128f2:	6959      	ldr	r1, [r3, #20]
   128f4:	2210      	movs	r2, #16
   128f6:	4411      	add	r1, r2
   128f8:	f000 fcac 	bl	13254 <smpLogByteArray>

    SmpScCalcF4(pCcb, pMsg,
                pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   128fc:	6c60      	ldr	r0, [r4, #68]	; 0x44
    SmpScCalcF4(pCcb, pMsg,
   128fe:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
                pCcb->pScCcb->pLocalPublicKey->pubKeyX,
                0, pCcb->pScCcb->pScratch->Nb_Eb);
   12902:	6940      	ldr	r0, [r0, #20]
   12904:	3010      	adds	r0, #16
    SmpScCalcF4(pCcb, pMsg,
   12906:	9001      	str	r0, [sp, #4]
   12908:	2000      	movs	r0, #0
   1290a:	9000      	str	r0, [sp, #0]
   1290c:	4629      	mov	r1, r5
   1290e:	4620      	mov	r0, r4
   12910:	f000 fb0a 	bl	12f28 <SmpScCalcF4>
    SmpScCalcF4(pCcb, pMsg,
                pCcb->pScCcb->pLocalPublicKey->pubKeyX,
                pCcb->pScCcb->pPeerPublicKey->pubKeyX,
                0, pCcb->pScCcb->pScratch->Nb_Eb);
  }
}
   12914:	b002      	add	sp, #8
   12916:	bd70      	pop	{r4, r5, r6, pc}
    SMP_TRACE_256("F4 PKb",  pCcb->pScCcb->pLocalPublicKey->pubKeyX);
   12918:	68d9      	ldr	r1, [r3, #12]
   1291a:	480f      	ldr	r0, [pc, #60]	; (12958 <smpScActJwncCalcF4+0x90>)
   1291c:	2220      	movs	r2, #32
   1291e:	f000 fc99 	bl	13254 <smpLogByteArray>
    SMP_TRACE_256("F4 PKa", pCcb->pScCcb->pPeerPublicKey->pubKeyX);
   12922:	6c63      	ldr	r3, [r4, #68]	; 0x44
   12924:	480d      	ldr	r0, [pc, #52]	; (1295c <smpScActJwncCalcF4+0x94>)
   12926:	6899      	ldr	r1, [r3, #8]
   12928:	2220      	movs	r2, #32
   1292a:	f000 fc93 	bl	13254 <smpLogByteArray>
    SMP_TRACE_128("F4 Nb", pCcb->pScCcb->pScratch->Nb_Eb);
   1292e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   12930:	480b      	ldr	r0, [pc, #44]	; (12960 <smpScActJwncCalcF4+0x98>)
   12932:	6959      	ldr	r1, [r3, #20]
   12934:	2210      	movs	r2, #16
   12936:	4411      	add	r1, r2
   12938:	f000 fc8c 	bl	13254 <smpLogByteArray>
                pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   1293c:	6c62      	ldr	r2, [r4, #68]	; 0x44
    SmpScCalcF4(pCcb, pMsg,
   1293e:	4620      	mov	r0, r4
                0, pCcb->pScCcb->pScratch->Nb_Eb);
   12940:	6954      	ldr	r4, [r2, #20]
    SmpScCalcF4(pCcb, pMsg,
   12942:	6893      	ldr	r3, [r2, #8]
   12944:	68d2      	ldr	r2, [r2, #12]
   12946:	9600      	str	r6, [sp, #0]
                0, pCcb->pScCcb->pScratch->Nb_Eb);
   12948:	3410      	adds	r4, #16
    SmpScCalcF4(pCcb, pMsg,
   1294a:	4629      	mov	r1, r5
   1294c:	9401      	str	r4, [sp, #4]
   1294e:	f000 faeb 	bl	12f28 <SmpScCalcF4>
}
   12952:	b002      	add	sp, #8
   12954:	bd70      	pop	{r4, r5, r6, pc}
   12956:	bf00      	nop
   12958:	0001fd4c 	.word	0x0001fd4c
   1295c:	0001fd54 	.word	0x0001fd54
   12960:	0001fd5c 	.word	0x0001fd5c

00012964 <smpScActJwncCalcG2>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActJwncCalcG2(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   12964:	b570      	push	{r4, r5, r6, lr}
  uint8_t *pCmacText;

  /* g2(PKax, PKbx, Na, Nb) where g2(U, V, X, Z) = AES-CMACx (U || V || Z) mod 2^32 */
  if ((pCmacText = SmpScAlloc(SMP_G2_TEXT_LEN, pCcb, pMsg)) !=  NULL)
   12966:	460a      	mov	r2, r1
{
   12968:	b082      	sub	sp, #8
   1296a:	4604      	mov	r4, r0
   1296c:	460e      	mov	r6, r1
  if ((pCmacText = SmpScAlloc(SMP_G2_TEXT_LEN, pCcb, pMsg)) !=  NULL)
   1296e:	4601      	mov	r1, r0
   12970:	2050      	movs	r0, #80	; 0x50
   12972:	f000 fac7 	bl	12f04 <SmpScAlloc>
   12976:	b1d0      	cbz	r0, 129ae <smpScActJwncCalcG2+0x4a>
  {
    uint8_t *pCatBuf = pCmacText;

    /* Concatinate PKax, PKbx, Nb */
    if (pCcb->initiator)
   12978:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   1297c:	4605      	mov	r5, r0
   1297e:	b9c3      	cbnz	r3, 129b2 <smpScActJwncCalcG2+0x4e>
      pCatBuf = SmpScCat(pCatBuf, pCcb->pScCcb->pLocalPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
      pCatBuf = SmpScCat(pCatBuf, pCcb->pScCcb->pPeerPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
    }
    else
    {
      pCatBuf = SmpScCat(pCatBuf, pCcb->pScCcb->pPeerPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
   12980:	6c63      	ldr	r3, [r4, #68]	; 0x44
   12982:	2220      	movs	r2, #32
   12984:	6899      	ldr	r1, [r3, #8]
   12986:	f000 fb45 	bl	13014 <SmpScCat>
      pCatBuf = SmpScCat(pCatBuf, pCcb->pScCcb->pLocalPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
   1298a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1298c:	2220      	movs	r2, #32
   1298e:	68d9      	ldr	r1, [r3, #12]
   12990:	f000 fb40 	bl	13014 <SmpScCat>
    }

    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Nb_Eb);
   12994:	6c63      	ldr	r3, [r4, #68]	; 0x44
   12996:	6959      	ldr	r1, [r3, #20]
   12998:	3110      	adds	r1, #16
   1299a:	f000 fb43 	bl	13024 <SmpScCat128>

    /* Execute CMAC with Na as the key */
    SmpScCmac(pCcb->pScCcb->pScratch->Na_Ea, pCmacText, SMP_G2_TEXT_LEN, pCcb, pMsg);
   1299e:	6c62      	ldr	r2, [r4, #68]	; 0x44
   129a0:	4623      	mov	r3, r4
   129a2:	6950      	ldr	r0, [r2, #20]
   129a4:	9600      	str	r6, [sp, #0]
   129a6:	2250      	movs	r2, #80	; 0x50
   129a8:	4629      	mov	r1, r5
   129aa:	f000 fa89 	bl	12ec0 <SmpScCmac>
  }
}
   129ae:	b002      	add	sp, #8
   129b0:	bd70      	pop	{r4, r5, r6, pc}
      pCatBuf = SmpScCat(pCatBuf, pCcb->pScCcb->pLocalPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
   129b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   129b4:	2220      	movs	r2, #32
   129b6:	68d9      	ldr	r1, [r3, #12]
   129b8:	f000 fb2c 	bl	13014 <SmpScCat>
      pCatBuf = SmpScCat(pCatBuf, pCcb->pScCcb->pPeerPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
   129bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
   129be:	2220      	movs	r2, #32
   129c0:	6899      	ldr	r1, [r3, #8]
   129c2:	f000 fb27 	bl	13014 <SmpScCat>
   129c6:	e7e5      	b.n	12994 <smpScActJwncCalcG2+0x30>

000129c8 <smpScActJwncDisplay>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActJwncDisplay(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   129c8:	b530      	push	{r4, r5, lr}
  if (pCcb->pScCcb->authType == SMP_AUTH_TYPE_NUM_COMP)
   129ca:	6c43      	ldr	r3, [r0, #68]	; 0x44
   129cc:	785b      	ldrb	r3, [r3, #1]
   129ce:	2b04      	cmp	r3, #4
{
   129d0:	b087      	sub	sp, #28
   129d2:	4604      	mov	r4, r0
  if (pCcb->pScCcb->authType == SMP_AUTH_TYPE_NUM_COMP)
   129d4:	d00b      	beq.n	129ee <smpScActJwncDisplay+0x26>
  else
  {
    /* Just Works always reports success */
    wsfMsgHdr_t hdr;

    hdr.param = pCcb->connId;
   129d6:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
   129da:	f8ad 2004 	strh.w	r2, [sp, #4]
    hdr.event = SMP_MSG_API_USER_CONFIRM;
   129de:	2316      	movs	r3, #22
    hdr.status = HCI_SUCCESS;
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   129e0:	a901      	add	r1, sp, #4
    hdr.event = SMP_MSG_API_USER_CONFIRM;
   129e2:	f8ad 3006 	strh.w	r3, [sp, #6]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   129e6:	f7fe fdcf 	bl	11588 <smpSmExecute>
  }
}
   129ea:	b007      	add	sp, #28
   129ec:	bd30      	pop	{r4, r5, pc}
    SMP_TRACE_128("JWNC Display Cnf", pMsg->aes.pCiphertext);
   129ee:	460d      	mov	r5, r1
   129f0:	2210      	movs	r2, #16
   129f2:	6849      	ldr	r1, [r1, #4]
   129f4:	4809      	ldr	r0, [pc, #36]	; (12a1c <smpScActJwncDisplay+0x54>)
   129f6:	f000 fc2d 	bl	13254 <smpLogByteArray>
    Calc128Cpy(cnfEvt.confirm, pMsg->aes.pCiphertext);
   129fa:	6869      	ldr	r1, [r5, #4]
   129fc:	a802      	add	r0, sp, #8
   129fe:	f000 fcf1 	bl	133e4 <Calc128Cpy>
    cnfEvt.hdr.param = pCcb->connId;
   12a02:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
   12a06:	f8ad 2004 	strh.w	r2, [sp, #4]
    cnfEvt.hdr.event = DM_SEC_COMPARE_IND;
   12a0a:	2335      	movs	r3, #53	; 0x35
    DmSmpCbackExec((dmEvt_t *) &cnfEvt);
   12a0c:	a801      	add	r0, sp, #4
    cnfEvt.hdr.event = DM_SEC_COMPARE_IND;
   12a0e:	f8ad 3006 	strh.w	r3, [sp, #6]
    DmSmpCbackExec((dmEvt_t *) &cnfEvt);
   12a12:	f007 fa8f 	bl	19f34 <DmSmpCbackExec>
}
   12a16:	b007      	add	sp, #28
   12a18:	bd30      	pop	{r4, r5, pc}
   12a1a:	bf00      	nop
   12a1c:	0001fd64 	.word	0x0001fd64

00012a20 <smpScActPkKeypress>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActPkKeypress(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   12a20:	b510      	push	{r4, lr}
  uint8_t *pCmd = pMsg->data.pPacket + L2C_PAYLOAD_START;
   12a22:	684c      	ldr	r4, [r1, #4]
  uint8_t *pPacket = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;

  if (*pCmd == SMP_CMD_KEYPRESS)
   12a24:	f894 c008 	ldrb.w	ip, [r4, #8]
   12a28:	f1bc 0f0e 	cmp.w	ip, #14
{
   12a2c:	b082      	sub	sp, #8
  if (*pCmd == SMP_CMD_KEYPRESS)
   12a2e:	d004      	beq.n	12a3a <smpScActPkKeypress+0x1a>
    keypressEvt.hdr.event = DM_SEC_KEYPRESS_IND;
    keypressEvt.hdr.status = HCI_SUCCESS;

    DmSmpCbackExec((dmEvt_t *) &keypressEvt);
  }
  else if (*pCmd == SMP_CMD_PAIR_CNF)
   12a30:	f1bc 0f03 	cmp.w	ip, #3
   12a34:	d010      	beq.n	12a58 <smpScActPkKeypress+0x38>
  }
  else
  {
    /* Unexpected command */
  }
}
   12a36:	b002      	add	sp, #8
   12a38:	bd10      	pop	{r4, pc}
    keypressEvt.hdr.param = pCcb->connId;
   12a3a:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
    keypressEvt.notificationType = *pPacket;
   12a3e:	7a61      	ldrb	r1, [r4, #9]
   12a40:	f88d 1004 	strb.w	r1, [sp, #4]
    keypressEvt.hdr.event = DM_SEC_KEYPRESS_IND;
   12a44:	2336      	movs	r3, #54	; 0x36
    DmSmpCbackExec((dmEvt_t *) &keypressEvt);
   12a46:	4668      	mov	r0, sp
    keypressEvt.hdr.param = pCcb->connId;
   12a48:	f8ad 2000 	strh.w	r2, [sp]
    keypressEvt.hdr.event = DM_SEC_KEYPRESS_IND;
   12a4c:	f8ad 3002 	strh.w	r3, [sp, #2]
    DmSmpCbackExec((dmEvt_t *) &keypressEvt);
   12a50:	f007 fa70 	bl	19f34 <DmSmpCbackExec>
}
   12a54:	b002      	add	sp, #8
   12a56:	bd10      	pop	{r4, pc}
    pMsg->hdr.event = SMP_MSG_EARLY_CNF;
   12a58:	221e      	movs	r2, #30
   12a5a:	804a      	strh	r2, [r1, #2]
}
   12a5c:	b002      	add	sp, #8
   12a5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    smpSmExecute(pCcb, pMsg);
   12a62:	f7fe bd91 	b.w	11588 <smpSmExecute>
   12a66:	bf00      	nop

00012a68 <smpScActPkSendKeypress>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActPkSendKeypress(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   12a68:	b538      	push	{r3, r4, r5, lr}
  /* Send keypress notification to the peer */
  smpDmKeypress_t *pKeypress = (smpDmKeypress_t *) pMsg;
  uint8_t         *pPkt;
  uint8_t         *p;

  if (pCcb->pScCcb->kpNotify)
   12a6a:	6c43      	ldr	r3, [r0, #68]	; 0x44
   12a6c:	789b      	ldrb	r3, [r3, #2]
   12a6e:	b903      	cbnz	r3, 12a72 <smpScActPkSendKeypress+0xa>
      pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
      pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
      smpSmExecute(pCcb, pMsg);
    }
  }
}
   12a70:	bd38      	pop	{r3, r4, r5, pc}
    smpStartRspTimer(pCcb);
   12a72:	460d      	mov	r5, r1
   12a74:	4604      	mov	r4, r0
   12a76:	f7fe fa5d 	bl	10f34 <smpStartRspTimer>
    if ((pPkt = smpMsgAlloc(SMP_KEYPRESS_MSG_LEN + L2C_PAYLOAD_START)) != NULL)
   12a7a:	200a      	movs	r0, #10
   12a7c:	f7ff fb9c 	bl	121b8 <smpMsgAlloc>
   12a80:	4601      	mov	r1, r0
   12a82:	b140      	cbz	r0, 12a96 <smpScActPkSendKeypress+0x2e>
      UINT8_TO_BSTREAM(p, SMP_CMD_KEYPRESS);
   12a84:	230e      	movs	r3, #14
   12a86:	7203      	strb	r3, [r0, #8]
      *p = pKeypress->keypress;
   12a88:	792b      	ldrb	r3, [r5, #4]
   12a8a:	7243      	strb	r3, [r0, #9]
      smpSendPkt(pCcb, pPkt);
   12a8c:	4620      	mov	r0, r4
}
   12a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      smpSendPkt(pCcb, pPkt);
   12a92:	f7ff bb71 	b.w	12178 <smpSendPkt>
      pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   12a96:	f640 0303 	movw	r3, #2051	; 0x803
   12a9a:	806b      	strh	r3, [r5, #2]
      smpSmExecute(pCcb, pMsg);
   12a9c:	4629      	mov	r1, r5
   12a9e:	4620      	mov	r0, r4
}
   12aa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      smpSmExecute(pCcb, pMsg);
   12aa4:	f7fe bd70 	b.w	11588 <smpSmExecute>

00012aa8 <smpScActCalcSharedSecret>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActCalcSharedSecret(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   12aa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    }
  }
#endif

  /* Use local private key and peer public key to generate the shared secret */
  memcpy(key.privKey,  pCcb->pScCcb->pPrivateKey, SMP_PRIVATE_KEY_LEN);
   12aac:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
  memcpy(key.pubKey_x, pCcb->pScCcb->pPeerPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
  memcpy(key.pubKey_y, pCcb->pScCcb->pPeerPublicKey->pubKeyY, SMP_PUB_KEY_LEN);

  /* Generate the shared secret */
  if (SecEccGenSharedSecret(&key, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_ECC_CMPL) == FALSE)
   12ab0:	f8df 908c 	ldr.w	r9, [pc, #140]	; 12b40 <smpScActCalcSharedSecret+0x98>
  memcpy(key.privKey,  pCcb->pScCcb->pPrivateKey, SMP_PRIVATE_KEY_LEN);
   12ab4:	f8d8 5010 	ldr.w	r5, [r8, #16]
{
   12ab8:	b099      	sub	sp, #100	; 0x64
  memcpy(key.privKey,  pCcb->pScCcb->pPrivateKey, SMP_PRIVATE_KEY_LEN);
   12aba:	68aa      	ldr	r2, [r5, #8]
   12abc:	68eb      	ldr	r3, [r5, #12]
{
   12abe:	4606      	mov	r6, r0
   12ac0:	460f      	mov	r7, r1
  memcpy(key.privKey,  pCcb->pScCcb->pPrivateKey, SMP_PRIVATE_KEY_LEN);
   12ac2:	6828      	ldr	r0, [r5, #0]
   12ac4:	6869      	ldr	r1, [r5, #4]
   12ac6:	ac10      	add	r4, sp, #64	; 0x40
   12ac8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   12aca:	6928      	ldr	r0, [r5, #16]
   12acc:	6969      	ldr	r1, [r5, #20]
   12ace:	69aa      	ldr	r2, [r5, #24]
   12ad0:	69eb      	ldr	r3, [r5, #28]
   12ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  memcpy(key.pubKey_x, pCcb->pScCcb->pPeerPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
   12ad4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   12ad8:	6820      	ldr	r0, [r4, #0]
   12ada:	6861      	ldr	r1, [r4, #4]
   12adc:	68a2      	ldr	r2, [r4, #8]
   12ade:	68e3      	ldr	r3, [r4, #12]
   12ae0:	46ee      	mov	lr, sp
   12ae2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   12ae6:	6920      	ldr	r0, [r4, #16]
   12ae8:	6961      	ldr	r1, [r4, #20]
   12aea:	69a2      	ldr	r2, [r4, #24]
   12aec:	69e3      	ldr	r3, [r4, #28]
   12aee:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  memcpy(key.pubKey_y, pCcb->pScCcb->pPeerPublicKey->pubKeyY, SMP_PUB_KEY_LEN);
   12af2:	f8d8 4008 	ldr.w	r4, [r8, #8]
   12af6:	6a20      	ldr	r0, [r4, #32]
   12af8:	6a61      	ldr	r1, [r4, #36]	; 0x24
   12afa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   12afc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   12afe:	f10d 0c20 	add.w	ip, sp, #32
   12b02:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   12b06:	6b20      	ldr	r0, [r4, #48]	; 0x30
   12b08:	6b61      	ldr	r1, [r4, #52]	; 0x34
   12b0a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   12b0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   12b0e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
  if (SecEccGenSharedSecret(&key, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_ECC_CMPL) == FALSE)
   12b12:	f896 203d 	ldrb.w	r2, [r6, #61]	; 0x3d
   12b16:	f899 10e0 	ldrb.w	r1, [r9, #224]	; 0xe0
   12b1a:	2319      	movs	r3, #25
   12b1c:	4668      	mov	r0, sp
   12b1e:	f000 fc0b 	bl	13338 <SecEccGenSharedSecret>
   12b22:	b110      	cbz	r0, 12b2a <smpScActCalcSharedSecret+0x82>
  {
    pMsg->hdr.status = SMP_ERR_MEMORY;
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, pMsg);
  }
}
   12b24:	b019      	add	sp, #100	; 0x64
   12b26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   12b2a:	f24e 0303 	movw	r3, #57347	; 0xe003
   12b2e:	807b      	strh	r3, [r7, #2]
    smpSmExecute(pCcb, pMsg);
   12b30:	4639      	mov	r1, r7
   12b32:	4630      	mov	r0, r6
   12b34:	f7fe fd28 	bl	11588 <smpSmExecute>
}
   12b38:	b019      	add	sp, #100	; 0x64
   12b3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12b3e:	bf00      	nop
   12b40:	10004918 	.word	0x10004918

00012b44 <smpScActCalcF5TKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActCalcF5TKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   12b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  secEccMsg_t *pSecretMsg = (secEccMsg_t*) pMsg;
  uint8_t *pCmacText;

  if (pMsg->hdr.status == HCI_SUCCESS)
   12b48:	78cb      	ldrb	r3, [r1, #3]
{
   12b4a:	b086      	sub	sp, #24
   12b4c:	460c      	mov	r4, r1
   12b4e:	4605      	mov	r5, r0
  if (pMsg->hdr.status == HCI_SUCCESS)
   12b50:	bbd3      	cbnz	r3, 12bc8 <smpScActCalcF5TKey+0x84>
  {
    /* The shared secret is the DH Key */
    SMP_TRACE_256("DHKey (Shared Secret)", pSecretMsg->data.sharedSecret.secret);
   12b52:	1d0e      	adds	r6, r1, #4
   12b54:	4822      	ldr	r0, [pc, #136]	; (12be0 <smpScActCalcF5TKey+0x9c>)
   12b56:	2220      	movs	r2, #32
   12b58:	4631      	mov	r1, r6
   12b5a:	f000 fb7b 	bl	13254 <smpLogByteArray>

    if ((pCmacText = SmpScAlloc(SMP_F5_TKEY_TEXT_LEN, pCcb, pMsg)) !=  NULL)
   12b5e:	4622      	mov	r2, r4
   12b60:	4629      	mov	r1, r5
   12b62:	2020      	movs	r0, #32
   12b64:	f000 f9ce 	bl	12f04 <SmpScAlloc>
   12b68:	4684      	mov	ip, r0
   12b6a:	b350      	cbz	r0, 12bc2 <smpScActCalcF5TKey+0x7e>
    {
      const uint8_t salt[] = {0x6C, 0x88, 0x83, 0x91, 0xAA, 0xF5, 0xA5, 0x38,
   12b6c:	4b1d      	ldr	r3, [pc, #116]	; (12be4 <smpScActCalcF5TKey+0xa0>)
                              0x60, 0x37, 0x0B, 0xDB, 0x5A, 0x60, 0x83, 0xBE};

      /* T = AES-CMACsalt (DHKey) */
      memcpy(pCmacText, pSecretMsg->data.sharedSecret.secret, SMP_DHKEY_LEN);
   12b6e:	f8d4 9004 	ldr.w	r9, [r4, #4]
   12b72:	f8d4 8008 	ldr.w	r8, [r4, #8]
   12b76:	68e7      	ldr	r7, [r4, #12]
   12b78:	f8d4 a010 	ldr.w	sl, [r4, #16]
      const uint8_t salt[] = {0x6C, 0x88, 0x83, 0x91, 0xAA, 0xF5, 0xA5, 0x38,
   12b7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   12b7e:	f10d 0e08 	add.w	lr, sp, #8
   12b82:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
      memcpy(pCmacText, pSecretMsg->data.sharedSecret.secret, SMP_DHKEY_LEN);
   12b86:	f8cc 9000 	str.w	r9, [ip]
   12b8a:	f8cc 8004 	str.w	r8, [ip, #4]
   12b8e:	f8cc 7008 	str.w	r7, [ip, #8]
   12b92:	f8cc a00c 	str.w	sl, [ip, #12]
   12b96:	f8d4 9014 	ldr.w	r9, [r4, #20]
   12b9a:	f8d4 8018 	ldr.w	r8, [r4, #24]
   12b9e:	69e7      	ldr	r7, [r4, #28]
   12ba0:	f8d4 a020 	ldr.w	sl, [r4, #32]
   12ba4:	f8cc a01c 	str.w	sl, [ip, #28]
   12ba8:	f8cc 9010 	str.w	r9, [ip, #16]
   12bac:	f8cc 8014 	str.w	r8, [ip, #20]
   12bb0:	f8cc 7018 	str.w	r7, [ip, #24]

      /* Execute CMAC with salt as the key */
      SmpScCmac(salt, pCmacText, SMP_F5_TKEY_TEXT_LEN, pCcb, pMsg);
   12bb4:	462b      	mov	r3, r5
   12bb6:	4670      	mov	r0, lr
   12bb8:	2220      	movs	r2, #32
   12bba:	9400      	str	r4, [sp, #0]
   12bbc:	4661      	mov	r1, ip
   12bbe:	f000 f97f 	bl	12ec0 <SmpScCmac>
  else
  {
    SmpScGetCancelMsgWithReattempt(pCcb->connId, &pMsg->hdr, SMP_ERR_DH_KEY_CHECK);
    smpSmExecute(pCcb, pMsg);
  }
}
   12bc2:	b006      	add	sp, #24
   12bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    SmpScGetCancelMsgWithReattempt(pCcb->connId, &pMsg->hdr, SMP_ERR_DH_KEY_CHECK);
   12bc8:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
   12bcc:	220b      	movs	r2, #11
   12bce:	f000 faeb 	bl	131a8 <SmpScGetCancelMsgWithReattempt>
    smpSmExecute(pCcb, pMsg);
   12bd2:	4621      	mov	r1, r4
   12bd4:	4628      	mov	r0, r5
}
   12bd6:	b006      	add	sp, #24
   12bd8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    smpSmExecute(pCcb, pMsg);
   12bdc:	f7fe bcd4 	b.w	11588 <smpSmExecute>
   12be0:	0001fd78 	.word	0x0001fd78
   12be4:	0001fd90 	.word	0x0001fd90

00012be8 <smpScActCalcF5MacKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActCalcF5MacKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   12be8:	b570      	push	{r4, r5, r6, lr}
  secCmacMsg_t *pCmac = (secCmacMsg_t *) pMsg;
  uint8_t *pCmacText;

  /* Copy T from the previous step in the F5 Calculation */
  Calc128Cpy(pCcb->pScCcb->pLtk->ltk_t, pCmac->pCiphertext);
   12bea:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   12bec:	4604      	mov	r4, r0
  Calc128Cpy(pCcb->pScCcb->pLtk->ltk_t, pCmac->pCiphertext);
   12bee:	6998      	ldr	r0, [r3, #24]
{
   12bf0:	b082      	sub	sp, #8
   12bf2:	460d      	mov	r5, r1
  Calc128Cpy(pCcb->pScCcb->pLtk->ltk_t, pCmac->pCiphertext);
   12bf4:	3010      	adds	r0, #16
   12bf6:	6849      	ldr	r1, [r1, #4]
   12bf8:	f000 fbf4 	bl	133e4 <Calc128Cpy>

  SMP_TRACE_128("T", pCcb->pScCcb->pLtk->ltk_t);
   12bfc:	6c63      	ldr	r3, [r4, #68]	; 0x44
   12bfe:	4819      	ldr	r0, [pc, #100]	; (12c64 <smpScActCalcF5MacKey+0x7c>)
   12c00:	6999      	ldr	r1, [r3, #24]
   12c02:	2210      	movs	r2, #16
   12c04:	4411      	add	r1, r2
   12c06:	f000 fb25 	bl	13254 <smpLogByteArray>

  if ((pCmacText = SmpScAlloc(SMP_F5_TEXT_LEN, pCcb, pMsg)) !=  NULL)
   12c0a:	462a      	mov	r2, r5
   12c0c:	4621      	mov	r1, r4
   12c0e:	2035      	movs	r0, #53	; 0x35
   12c10:	f000 f978 	bl	12f04 <SmpScAlloc>
   12c14:	b318      	cbz	r0, 12c5e <smpScActCalcF5MacKey+0x76>
  {
    uint8_t *pCatBuf = pCmacText;

    /* mackey || ltk = f5(W, N1, N2, A1, A2) */
    /* mackey = AES-CMACT (Counter = 0 || keyID ||N1 || N2|| A1|| A2|| Length = 256) */
    *pCatBuf++ = 0;
   12c16:	2300      	movs	r3, #0
    pCatBuf = SmpScCat(pCatBuf, smpScF5Key, 4);
   12c18:	2204      	movs	r2, #4
   12c1a:	4606      	mov	r6, r0
   12c1c:	4912      	ldr	r1, [pc, #72]	; (12c68 <smpScActCalcF5MacKey+0x80>)
    *pCatBuf++ = 0;
   12c1e:	f800 3b01 	strb.w	r3, [r0], #1
    pCatBuf = SmpScCat(pCatBuf, smpScF5Key, 4);
   12c22:	f000 f9f7 	bl	13014 <SmpScCat>
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Na_Ea);
   12c26:	6c63      	ldr	r3, [r4, #68]	; 0x44
   12c28:	6959      	ldr	r1, [r3, #20]
   12c2a:	f000 f9fb 	bl	13024 <SmpScCat128>
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Nb_Eb);
   12c2e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   12c30:	6959      	ldr	r1, [r3, #20]
   12c32:	3110      	adds	r1, #16
   12c34:	f000 f9f6 	bl	13024 <SmpScCat128>
   12c38:	4601      	mov	r1, r0
    pCatBuf = smpScCatInitiatorBdAddr(pCcb, pCatBuf);
   12c3a:	4620      	mov	r0, r4
   12c3c:	f7ff fbae 	bl	1239c <smpScCatInitiatorBdAddr>
   12c40:	4601      	mov	r1, r0
    pCatBuf = smpScCatResponderBdAddr(pCcb, pCatBuf);
   12c42:	4620      	mov	r0, r4
   12c44:	f7ff fbe2 	bl	1240c <smpScCatResponderBdAddr>
    *pCatBuf++ = 1;
   12c48:	2301      	movs	r3, #1
   12c4a:	8003      	strh	r3, [r0, #0]
    *pCatBuf++ = 0;

    /* Execute CMAC with T as the key */
    SmpScCmac(pCcb->pScCcb->pLtk->ltk_t, pCmacText, SMP_F5_TEXT_LEN, pCcb, pMsg);
   12c4c:	6c62      	ldr	r2, [r4, #68]	; 0x44
   12c4e:	6990      	ldr	r0, [r2, #24]
   12c50:	9500      	str	r5, [sp, #0]
   12c52:	4623      	mov	r3, r4
   12c54:	2235      	movs	r2, #53	; 0x35
   12c56:	4631      	mov	r1, r6
   12c58:	3010      	adds	r0, #16
   12c5a:	f000 f931 	bl	12ec0 <SmpScCmac>
  }
}
   12c5e:	b002      	add	sp, #8
   12c60:	bd70      	pop	{r4, r5, r6, pc}
   12c62:	bf00      	nop
   12c64:	0001fda4 	.word	0x0001fda4
   12c68:	0001fdbc 	.word	0x0001fdbc

00012c6c <smpScActCalcF5Ltk>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActCalcF5Ltk(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   12c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   12c6e:	4604      	mov	r4, r0
   12c70:	b083      	sub	sp, #12
   12c72:	460e      	mov	r6, r1
  secCmacMsg_t *pCmac = (secCmacMsg_t *) pMsg;
  uint8_t *pCmacText;

  SMP_TRACE_128("MAC", pMsg->aes.pCiphertext);
   12c74:	2210      	movs	r2, #16
   12c76:	6849      	ldr	r1, [r1, #4]
   12c78:	4819      	ldr	r0, [pc, #100]	; (12ce0 <smpScActCalcF5Ltk+0x74>)
   12c7a:	f000 faeb 	bl	13254 <smpLogByteArray>

  /* Copy Mac Key from the previous step in the F5 Calculation */
  Calc128Cpy(pCcb->pScCcb->pLtk->mac, pCmac->pCiphertext);
   12c7e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   12c80:	6871      	ldr	r1, [r6, #4]
   12c82:	6998      	ldr	r0, [r3, #24]
   12c84:	f000 fbae 	bl	133e4 <Calc128Cpy>

  if ((pCmacText = SmpScAlloc(SMP_F5_TEXT_LEN, pCcb, pMsg)) !=  NULL)
   12c88:	4632      	mov	r2, r6
   12c8a:	4621      	mov	r1, r4
   12c8c:	2035      	movs	r0, #53	; 0x35
   12c8e:	f000 f939 	bl	12f04 <SmpScAlloc>
   12c92:	b310      	cbz	r0, 12cda <smpScActCalcF5Ltk+0x6e>
  {
    uint8_t *pCatBuf = pCmacText;

    /* mackey || ltk = f5(W, N1, N2, A1, A2) */
    /* ltk = AES-CMACT (Counter = 1 || keyID || N1 || N2|| A1|| A2 ||Length = 256) */
    *pCatBuf++ = 1;
   12c94:	2701      	movs	r7, #1
    pCatBuf = SmpScCat(pCatBuf, smpScF5Key, 4);
   12c96:	2204      	movs	r2, #4
   12c98:	4605      	mov	r5, r0
   12c9a:	4912      	ldr	r1, [pc, #72]	; (12ce4 <smpScActCalcF5Ltk+0x78>)
    *pCatBuf++ = 1;
   12c9c:	f800 7b01 	strb.w	r7, [r0], #1
    pCatBuf = SmpScCat(pCatBuf, smpScF5Key, 4);
   12ca0:	f000 f9b8 	bl	13014 <SmpScCat>
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Na_Ea);
   12ca4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   12ca6:	6959      	ldr	r1, [r3, #20]
   12ca8:	f000 f9bc 	bl	13024 <SmpScCat128>
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Nb_Eb);
   12cac:	6c63      	ldr	r3, [r4, #68]	; 0x44
   12cae:	6959      	ldr	r1, [r3, #20]
   12cb0:	3110      	adds	r1, #16
   12cb2:	f000 f9b7 	bl	13024 <SmpScCat128>
   12cb6:	4601      	mov	r1, r0
    pCatBuf = smpScCatInitiatorBdAddr(pCcb, pCatBuf);
   12cb8:	4620      	mov	r0, r4
   12cba:	f7ff fb6f 	bl	1239c <smpScCatInitiatorBdAddr>
   12cbe:	4601      	mov	r1, r0
    pCatBuf = smpScCatResponderBdAddr(pCcb, pCatBuf);
   12cc0:	4620      	mov	r0, r4
   12cc2:	f7ff fba3 	bl	1240c <smpScCatResponderBdAddr>
    *pCatBuf++ = 1;
   12cc6:	8007      	strh	r7, [r0, #0]
    *pCatBuf++ = 0;

    /* Execute CMAC with T as the key */
    SmpScCmac(pCcb->pScCcb->pLtk->ltk_t, pCmacText, SMP_F5_TEXT_LEN, pCcb, pMsg);
   12cc8:	6c62      	ldr	r2, [r4, #68]	; 0x44
   12cca:	6990      	ldr	r0, [r2, #24]
   12ccc:	9600      	str	r6, [sp, #0]
   12cce:	4629      	mov	r1, r5
   12cd0:	4623      	mov	r3, r4
   12cd2:	2235      	movs	r2, #53	; 0x35
   12cd4:	3010      	adds	r0, #16
   12cd6:	f000 f8f3 	bl	12ec0 <SmpScCmac>
  }
}
   12cda:	b003      	add	sp, #12
   12cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12cde:	bf00      	nop
   12ce0:	0001fda8 	.word	0x0001fda8
   12ce4:	0001fdbc 	.word	0x0001fdbc

00012ce8 <smpScActDHKeyCalcF6Ea>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActDHKeyCalcF6Ea(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   12ce8:	b570      	push	{r4, r5, r6, lr}
   12cea:	4604      	mov	r4, r0
   12cec:	b082      	sub	sp, #8
   12cee:	460d      	mov	r5, r1
  uint8_t *pCmacText;

  SMP_TRACE_128("LTK", pMsg->aes.pCiphertext);
   12cf0:	481d      	ldr	r0, [pc, #116]	; (12d68 <smpScActDHKeyCalcF6Ea+0x80>)
   12cf2:	6849      	ldr	r1, [r1, #4]
   12cf4:	2210      	movs	r2, #16
   12cf6:	f000 faad 	bl	13254 <smpLogByteArray>

  /* Copy LTK from the previous state (smpScActCalcF5Ltk) */
  WStrReverseCpy(pCcb->pScCcb->pLtk->ltk_t, pMsg->aes.pCiphertext, 16);
   12cfa:	6c63      	ldr	r3, [r4, #68]	; 0x44
   12cfc:	6869      	ldr	r1, [r5, #4]
   12cfe:	6998      	ldr	r0, [r3, #24]
   12d00:	2210      	movs	r2, #16
   12d02:	4410      	add	r0, r2
   12d04:	f000 fbe8 	bl	134d8 <WStrReverseCpy>

  if ((pCmacText = SmpScAlloc(SMP_F6_TEXT_LEN, pCcb, pMsg)) !=  NULL)
   12d08:	462a      	mov	r2, r5
   12d0a:	4621      	mov	r1, r4
   12d0c:	2041      	movs	r0, #65	; 0x41
   12d0e:	f000 f8f9 	bl	12f04 <SmpScAlloc>
   12d12:	b338      	cbz	r0, 12d64 <smpScActDHKeyCalcF6Ea+0x7c>
  {
    uint8_t *pCatBuf = pCmacText;

    /* f6(W, N1, N2, R, IOcap, A1, A2) = AES-CMACW (N1 || N2 || R || IOcap || A1 || A2) */
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Na_Ea);
   12d14:	6c63      	ldr	r3, [r4, #68]	; 0x44
   12d16:	6959      	ldr	r1, [r3, #20]
   12d18:	4606      	mov	r6, r0
   12d1a:	f000 f983 	bl	13024 <SmpScCat128>
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Nb_Eb);
   12d1e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   12d20:	6959      	ldr	r1, [r3, #20]
   12d22:	3110      	adds	r1, #16
   12d24:	f000 f97e 	bl	13024 <SmpScCat128>
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Rb);
   12d28:	6c63      	ldr	r3, [r4, #68]	; 0x44
   12d2a:	6959      	ldr	r1, [r3, #20]
   12d2c:	3130      	adds	r1, #48	; 0x30
   12d2e:	f000 f979 	bl	13024 <SmpScCat128>

    *pCatBuf++ = pCcb->pairReq[SMP_AUTHREQ_POS]; /* AuthReq */
   12d32:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   12d36:	7003      	strb	r3, [r0, #0]
    *pCatBuf++ = pCcb->pairReq[SMP_OOB_POS]; /* OOB Data Flag */
   12d38:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   12d3c:	7043      	strb	r3, [r0, #1]
    *pCatBuf++ = pCcb->pairReq[SMP_IO_POS]; /* IO Capability Parameter */
   12d3e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   12d42:	7083      	strb	r3, [r0, #2]

    pCatBuf = smpScCatInitiatorBdAddr(pCcb, pCatBuf);
   12d44:	1cc1      	adds	r1, r0, #3
   12d46:	4620      	mov	r0, r4
   12d48:	f7ff fb28 	bl	1239c <smpScCatInitiatorBdAddr>
   12d4c:	4601      	mov	r1, r0
    pCatBuf = smpScCatResponderBdAddr(pCcb, pCatBuf);
   12d4e:	4620      	mov	r0, r4
   12d50:	f7ff fb5c 	bl	1240c <smpScCatResponderBdAddr>

    /* Execute CMAC with MACKey as the key */
    SmpScCmac(pCcb->pScCcb->pLtk->mac, pCmacText, SMP_F6_TEXT_LEN, pCcb, pMsg);
   12d54:	6c62      	ldr	r2, [r4, #68]	; 0x44
   12d56:	4623      	mov	r3, r4
   12d58:	6990      	ldr	r0, [r2, #24]
   12d5a:	9500      	str	r5, [sp, #0]
   12d5c:	2241      	movs	r2, #65	; 0x41
   12d5e:	4631      	mov	r1, r6
   12d60:	f000 f8ae 	bl	12ec0 <SmpScCmac>
  }
}
   12d64:	b002      	add	sp, #8
   12d66:	bd70      	pop	{r4, r5, r6, pc}
   12d68:	0001fdac 	.word	0x0001fdac

00012d6c <smpScActDHKeyCalcF6Eb>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActDHKeyCalcF6Eb(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   12d6c:	b570      	push	{r4, r5, r6, lr}
  uint8_t *pCmacText;

  SMP_TRACE_128("DHKey Ea", pMsg->aes.pCiphertext);
   12d6e:	2210      	movs	r2, #16
{
   12d70:	b082      	sub	sp, #8
   12d72:	460e      	mov	r6, r1
   12d74:	4604      	mov	r4, r0
  SMP_TRACE_128("DHKey Ea", pMsg->aes.pCiphertext);
   12d76:	6849      	ldr	r1, [r1, #4]
   12d78:	481c      	ldr	r0, [pc, #112]	; (12dec <smpScActDHKeyCalcF6Eb+0x80>)
   12d7a:	f000 fa6b 	bl	13254 <smpLogByteArray>

  if ((pCmacText = SmpScAlloc(SMP_F6_TEXT_LEN, pCcb, pMsg)) !=  NULL)
   12d7e:	4632      	mov	r2, r6
   12d80:	4621      	mov	r1, r4
   12d82:	2041      	movs	r0, #65	; 0x41
   12d84:	f000 f8be 	bl	12f04 <SmpScAlloc>
   12d88:	b338      	cbz	r0, 12dda <smpScActDHKeyCalcF6Eb+0x6e>
  {
    uint8_t *pCatBuf = pCmacText;

    /* f6(W, N1, N2, R, IOcap, A1, A2) = AES-CMACW (N1 || N2 || R || IOcap || A1 || A2) */
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Nb_Eb);
   12d8a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   12d8c:	6959      	ldr	r1, [r3, #20]
   12d8e:	3110      	adds	r1, #16
   12d90:	4605      	mov	r5, r0
   12d92:	f000 f947 	bl	13024 <SmpScCat128>
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Na_Ea);
   12d96:	6c63      	ldr	r3, [r4, #68]	; 0x44
   12d98:	6959      	ldr	r1, [r3, #20]
   12d9a:	f000 f943 	bl	13024 <SmpScCat128>
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Ra);
   12d9e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   12da0:	6959      	ldr	r1, [r3, #20]
   12da2:	3120      	adds	r1, #32
   12da4:	f000 f93e 	bl	13024 <SmpScCat128>

    *pCatBuf++ = pCcb->pairRsp[SMP_AUTHREQ_POS]; /* AuthReq */
   12da8:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   12dac:	7003      	strb	r3, [r0, #0]
    *pCatBuf++ = pCcb->pairRsp[SMP_OOB_POS]; /* OOB Data Flag */
   12dae:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   12db2:	7043      	strb	r3, [r0, #1]
    *pCatBuf++ = pCcb->pairRsp[SMP_IO_POS]; /* IO Capability Parameter */
   12db4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   12db8:	7083      	strb	r3, [r0, #2]

    pCatBuf = smpScCatResponderBdAddr(pCcb, pCatBuf);
   12dba:	1cc1      	adds	r1, r0, #3
   12dbc:	4620      	mov	r0, r4
   12dbe:	f7ff fb25 	bl	1240c <smpScCatResponderBdAddr>
   12dc2:	4601      	mov	r1, r0
    pCatBuf = smpScCatInitiatorBdAddr(pCcb, pCatBuf);
   12dc4:	4620      	mov	r0, r4
   12dc6:	f7ff fae9 	bl	1239c <smpScCatInitiatorBdAddr>

    /* Execute CMAC with MACKey as the key */
    SmpScCmac(pCcb->pScCcb->pLtk->mac, pCmacText, SMP_F6_TEXT_LEN, pCcb, pMsg);
   12dca:	6c62      	ldr	r2, [r4, #68]	; 0x44
   12dcc:	4623      	mov	r3, r4
   12dce:	6990      	ldr	r0, [r2, #24]
   12dd0:	9600      	str	r6, [sp, #0]
   12dd2:	4629      	mov	r1, r5
   12dd4:	2241      	movs	r2, #65	; 0x41
   12dd6:	f000 f873 	bl	12ec0 <SmpScCmac>
  }

  /* Copy Ea from the previous state (smpScActDHKeyCalcF6Ea) */
  Calc128Cpy(pCcb->pScCcb->pScratch->Na_Ea, pMsg->aes.pCiphertext);
   12dda:	6c63      	ldr	r3, [r4, #68]	; 0x44
   12ddc:	6871      	ldr	r1, [r6, #4]
   12dde:	6958      	ldr	r0, [r3, #20]
}
   12de0:	b002      	add	sp, #8
   12de2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Calc128Cpy(pCcb->pScCcb->pScratch->Na_Ea, pMsg->aes.pCiphertext);
   12de6:	f000 bafd 	b.w	133e4 <Calc128Cpy>
   12dea:	bf00      	nop
   12dec:	0001fdb0 	.word	0x0001fdb0

00012df0 <SmpScAllocScratchBuffers>:
 *
 *  \return TRUE if success, else FALSE.
 */
/*************************************************************************************************/
bool_t SmpScAllocScratchBuffers(smpCcb_t *pCcb)
{
   12df0:	b538      	push	{r3, r4, r5, lr}
  if (pCcb->pScCcb->pScratch == NULL)
   12df2:	6c44      	ldr	r4, [r0, #68]	; 0x44
   12df4:	6963      	ldr	r3, [r4, #20]
{
   12df6:	4605      	mov	r5, r0
  if (pCcb->pScCcb->pScratch == NULL)
   12df8:	b1db      	cbz	r3, 12e32 <SmpScAllocScratchBuffers+0x42>
  {
    pCcb->pScCcb->pScratch = WsfBufAlloc(sizeof(smpScScratch_t));
  }

  if (pCcb->pScCcb->pPeerPublicKey == NULL)
   12dfa:	68a3      	ldr	r3, [r4, #8]
   12dfc:	b30b      	cbz	r3, 12e42 <SmpScAllocScratchBuffers+0x52>
  {
    pCcb->pScCcb->pPeerPublicKey = WsfBufAlloc(sizeof(smpScPubKey_t));
  }

  if (pCcb->pScCcb->pLtk == NULL)
   12dfe:	69a3      	ldr	r3, [r4, #24]
   12e00:	b33b      	cbz	r3, 12e52 <SmpScAllocScratchBuffers+0x62>
  {
    pCcb->pScCcb->pLtk = WsfBufAlloc(sizeof(smpScLtk_t));
  }

  if (pCcb->pScCcb->pLocalPublicKey == NULL)
   12e02:	68e3      	ldr	r3, [r4, #12]
   12e04:	2b00      	cmp	r3, #0
   12e06:	d02c      	beq.n	12e62 <SmpScAllocScratchBuffers+0x72>
  {
    pCcb->pScCcb->pLocalPublicKey = WsfBufAlloc(sizeof(smpScPubKey_t));
  }

  if (pCcb->pScCcb->pPrivateKey == NULL)
   12e08:	6923      	ldr	r3, [r4, #16]
   12e0a:	b163      	cbz	r3, 12e26 <SmpScAllocScratchBuffers+0x36>
  {
    pCcb->pScCcb->pPrivateKey = WsfBufAlloc(SMP_PRIVATE_KEY_LEN);
  }

  if (pCcb->pScCcb->pScratch && pCcb->pScCcb->pPeerPublicKey && pCcb->pScCcb->pLtk &&
   12e0c:	6960      	ldr	r0, [r4, #20]
   12e0e:	b148      	cbz	r0, 12e24 <SmpScAllocScratchBuffers+0x34>
   12e10:	68a0      	ldr	r0, [r4, #8]
   12e12:	b138      	cbz	r0, 12e24 <SmpScAllocScratchBuffers+0x34>
   12e14:	69a0      	ldr	r0, [r4, #24]
   12e16:	b128      	cbz	r0, 12e24 <SmpScAllocScratchBuffers+0x34>
   12e18:	68e0      	ldr	r0, [r4, #12]
   12e1a:	b118      	cbz	r0, 12e24 <SmpScAllocScratchBuffers+0x34>
      pCcb->pScCcb->pLocalPublicKey && pCcb->pScCcb->pPrivateKey)
   12e1c:	6920      	ldr	r0, [r4, #16]
  {
    return TRUE;
   12e1e:	3800      	subs	r0, #0
   12e20:	bf18      	it	ne
   12e22:	2001      	movne	r0, #1
  }

  return FALSE;
}
   12e24:	bd38      	pop	{r3, r4, r5, pc}
    pCcb->pScCcb->pPrivateKey = WsfBufAlloc(SMP_PRIVATE_KEY_LEN);
   12e26:	2020      	movs	r0, #32
   12e28:	f7fc fd2e 	bl	f888 <WsfBufAlloc>
   12e2c:	6120      	str	r0, [r4, #16]
  if (pCcb->pScCcb->pScratch && pCcb->pScCcb->pPeerPublicKey && pCcb->pScCcb->pLtk &&
   12e2e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
   12e30:	e7ec      	b.n	12e0c <SmpScAllocScratchBuffers+0x1c>
    pCcb->pScCcb->pScratch = WsfBufAlloc(sizeof(smpScScratch_t));
   12e32:	2060      	movs	r0, #96	; 0x60
   12e34:	f7fc fd28 	bl	f888 <WsfBufAlloc>
   12e38:	6160      	str	r0, [r4, #20]
  if (pCcb->pScCcb->pPeerPublicKey == NULL)
   12e3a:	6c6c      	ldr	r4, [r5, #68]	; 0x44
   12e3c:	68a3      	ldr	r3, [r4, #8]
   12e3e:	2b00      	cmp	r3, #0
   12e40:	d1dd      	bne.n	12dfe <SmpScAllocScratchBuffers+0xe>
    pCcb->pScCcb->pPeerPublicKey = WsfBufAlloc(sizeof(smpScPubKey_t));
   12e42:	2040      	movs	r0, #64	; 0x40
   12e44:	f7fc fd20 	bl	f888 <WsfBufAlloc>
   12e48:	60a0      	str	r0, [r4, #8]
  if (pCcb->pScCcb->pLtk == NULL)
   12e4a:	6c6c      	ldr	r4, [r5, #68]	; 0x44
   12e4c:	69a3      	ldr	r3, [r4, #24]
   12e4e:	2b00      	cmp	r3, #0
   12e50:	d1d7      	bne.n	12e02 <SmpScAllocScratchBuffers+0x12>
    pCcb->pScCcb->pLtk = WsfBufAlloc(sizeof(smpScLtk_t));
   12e52:	2020      	movs	r0, #32
   12e54:	f7fc fd18 	bl	f888 <WsfBufAlloc>
   12e58:	61a0      	str	r0, [r4, #24]
  if (pCcb->pScCcb->pLocalPublicKey == NULL)
   12e5a:	6c6c      	ldr	r4, [r5, #68]	; 0x44
   12e5c:	68e3      	ldr	r3, [r4, #12]
   12e5e:	2b00      	cmp	r3, #0
   12e60:	d1d2      	bne.n	12e08 <SmpScAllocScratchBuffers+0x18>
    pCcb->pScCcb->pLocalPublicKey = WsfBufAlloc(sizeof(smpScPubKey_t));
   12e62:	2040      	movs	r0, #64	; 0x40
   12e64:	f7fc fd10 	bl	f888 <WsfBufAlloc>
   12e68:	60e0      	str	r0, [r4, #12]
  if (pCcb->pScCcb->pPrivateKey == NULL)
   12e6a:	6c6c      	ldr	r4, [r5, #68]	; 0x44
   12e6c:	e7cc      	b.n	12e08 <SmpScAllocScratchBuffers+0x18>
   12e6e:	bf00      	nop

00012e70 <SmpScFreeScratchBuffers>:
 */
/*************************************************************************************************/
void SmpScFreeScratchBuffers(smpCcb_t *pCcb)
{
  /* free scratch buffer */
  if (pCcb->pScCcb->pScratch != NULL)
   12e70:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   12e72:	b510      	push	{r4, lr}
   12e74:	4604      	mov	r4, r0
  if (pCcb->pScCcb->pScratch != NULL)
   12e76:	6958      	ldr	r0, [r3, #20]
   12e78:	b120      	cbz	r0, 12e84 <SmpScFreeScratchBuffers+0x14>
  {
    WsfBufFree(pCcb->pScCcb->pScratch);
   12e7a:	f7fc fd35 	bl	f8e8 <WsfBufFree>
    pCcb->pScCcb->pScratch = NULL;
   12e7e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   12e80:	2200      	movs	r2, #0
   12e82:	615a      	str	r2, [r3, #20]
  }

  /* free scratch peer public key buffer */
  if (pCcb->pScCcb->pPeerPublicKey != NULL)
   12e84:	6898      	ldr	r0, [r3, #8]
   12e86:	b120      	cbz	r0, 12e92 <SmpScFreeScratchBuffers+0x22>
  {
    WsfBufFree(pCcb->pScCcb->pPeerPublicKey);
   12e88:	f7fc fd2e 	bl	f8e8 <WsfBufFree>
    pCcb->pScCcb->pPeerPublicKey = NULL;
   12e8c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   12e8e:	2200      	movs	r2, #0
   12e90:	609a      	str	r2, [r3, #8]
  }

  /* free scratch LTK buffer */
  if (pCcb->pScCcb->pLtk != NULL)
   12e92:	6998      	ldr	r0, [r3, #24]
   12e94:	b120      	cbz	r0, 12ea0 <SmpScFreeScratchBuffers+0x30>
  {
    WsfBufFree(pCcb->pScCcb->pLtk);
   12e96:	f7fc fd27 	bl	f8e8 <WsfBufFree>
    pCcb->pScCcb->pLtk = NULL;
   12e9a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   12e9c:	2200      	movs	r2, #0
   12e9e:	619a      	str	r2, [r3, #24]
  }

  /* free scratch local public key buffer */
  if (pCcb->pScCcb->pLocalPublicKey != NULL)
   12ea0:	68d8      	ldr	r0, [r3, #12]
   12ea2:	b120      	cbz	r0, 12eae <SmpScFreeScratchBuffers+0x3e>
  {
    WsfBufFree(pCcb->pScCcb->pLocalPublicKey);
   12ea4:	f7fc fd20 	bl	f8e8 <WsfBufFree>
    pCcb->pScCcb->pLocalPublicKey = NULL;
   12ea8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   12eaa:	2200      	movs	r2, #0
   12eac:	60da      	str	r2, [r3, #12]
  }

  /* free scratch private key buffer */
  if (pCcb->pScCcb->pPrivateKey != NULL)
   12eae:	6918      	ldr	r0, [r3, #16]
   12eb0:	b120      	cbz	r0, 12ebc <SmpScFreeScratchBuffers+0x4c>
  {
    WsfBufFree(pCcb->pScCcb->pPrivateKey);
   12eb2:	f7fc fd19 	bl	f8e8 <WsfBufFree>
    pCcb->pScCcb->pPrivateKey = NULL;
   12eb6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   12eb8:	2200      	movs	r2, #0
   12eba:	611a      	str	r2, [r3, #16]
  }
}
   12ebc:	bd10      	pop	{r4, pc}
   12ebe:	bf00      	nop

00012ec0 <SmpScCmac>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpScCmac(const uint8_t *pKey, uint8_t *pText, uint8_t textLen, smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   12ec0:	b570      	push	{r4, r5, r6, lr}
   12ec2:	461c      	mov	r4, r3
   12ec4:	b082      	sub	sp, #8
  if (SecCmac(pKey, pText, textLen, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_CMAC_CMPL) == FALSE)
   12ec6:	4b0e      	ldr	r3, [pc, #56]	; (12f00 <SmpScCmac+0x40>)
   12ec8:	f894 603d 	ldrb.w	r6, [r4, #61]	; 0x3d
   12ecc:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
   12ed0:	9600      	str	r6, [sp, #0]
   12ed2:	261c      	movs	r6, #28
   12ed4:	9601      	str	r6, [sp, #4]
{
   12ed6:	460d      	mov	r5, r1
   12ed8:	9e06      	ldr	r6, [sp, #24]
  if (SecCmac(pKey, pText, textLen, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_CMAC_CMPL) == FALSE)
   12eda:	f003 f8bb 	bl	16054 <SecCmac>
   12ede:	b108      	cbz	r0, 12ee4 <SmpScCmac+0x24>
    WsfBufFree(pText);
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, pMsg);
  }
}
   12ee0:	b002      	add	sp, #8
   12ee2:	bd70      	pop	{r4, r5, r6, pc}
    WsfBufFree(pText);
   12ee4:	4628      	mov	r0, r5
   12ee6:	f7fc fcff 	bl	f8e8 <WsfBufFree>
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   12eea:	f640 0303 	movw	r3, #2051	; 0x803
    smpSmExecute(pCcb, pMsg);
   12eee:	4631      	mov	r1, r6
   12ef0:	4620      	mov	r0, r4
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   12ef2:	8073      	strh	r3, [r6, #2]
}
   12ef4:	b002      	add	sp, #8
   12ef6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    smpSmExecute(pCcb, pMsg);
   12efa:	f7fe bb45 	b.w	11588 <smpSmExecute>
   12efe:	bf00      	nop
   12f00:	10004918 	.word	0x10004918

00012f04 <SmpScAlloc>:
 *
 *  \return Allocated buffer.
 */
/*************************************************************************************************/
uint8_t *SmpScAlloc(uint8_t size, smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   12f04:	b570      	push	{r4, r5, r6, lr}
   12f06:	460e      	mov	r6, r1
   12f08:	4615      	mov	r5, r2
  uint8_t *pBuf = WsfBufAlloc(size);
   12f0a:	f7fc fcbd 	bl	f888 <WsfBufAlloc>

  if (pBuf == NULL)
   12f0e:	4604      	mov	r4, r0
   12f10:	b108      	cbz	r0, 12f16 <SmpScAlloc+0x12>
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, pMsg);
  }

  return pBuf;
}
   12f12:	4620      	mov	r0, r4
   12f14:	bd70      	pop	{r4, r5, r6, pc}
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   12f16:	f640 0303 	movw	r3, #2051	; 0x803
    smpSmExecute(pCcb, pMsg);
   12f1a:	4630      	mov	r0, r6
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   12f1c:	806b      	strh	r3, [r5, #2]
    smpSmExecute(pCcb, pMsg);
   12f1e:	4629      	mov	r1, r5
   12f20:	f7fe fb32 	bl	11588 <smpSmExecute>
}
   12f24:	4620      	mov	r0, r4
   12f26:	bd70      	pop	{r4, r5, r6, pc}

00012f28 <SmpScCalcF4>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpScCalcF4(smpCcb_t *pCcb, smpMsg_t *pMsg, uint8_t *pU, uint8_t *pV, uint8_t z, uint8_t *pX)
{
   12f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12f2c:	b082      	sub	sp, #8
   12f2e:	4607      	mov	r7, r0
  uint8_t *pBuf = WsfBufAlloc(size);
   12f30:	2041      	movs	r0, #65	; 0x41
{
   12f32:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   12f36:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   12f3a:	4688      	mov	r8, r1
   12f3c:	4616      	mov	r6, r2
   12f3e:	461d      	mov	r5, r3
  uint8_t *pBuf = WsfBufAlloc(size);
   12f40:	f7fc fca2 	bl	f888 <WsfBufAlloc>
  if (pBuf == NULL)
   12f44:	b3d0      	cbz	r0, 12fbc <SmpScCalcF4+0x94>
  return pBuf;
   12f46:	4604      	mov	r4, r0
 *  \return Pointer to next byte after concatination.
 */
/*************************************************************************************************/
uint8_t *SmpScCat(uint8_t *pDst, const uint8_t *pSrc, uint8_t len)
{
  memcpy(pDst, pSrc, len);
   12f48:	6831      	ldr	r1, [r6, #0]
   12f4a:	6872      	ldr	r2, [r6, #4]
   12f4c:	68b3      	ldr	r3, [r6, #8]
   12f4e:	f8d6 c00c 	ldr.w	ip, [r6, #12]
   12f52:	f8c4 c00c 	str.w	ip, [r4, #12]
   12f56:	6021      	str	r1, [r4, #0]
   12f58:	6062      	str	r2, [r4, #4]
   12f5a:	60a3      	str	r3, [r4, #8]
   12f5c:	6931      	ldr	r1, [r6, #16]
   12f5e:	6972      	ldr	r2, [r6, #20]
   12f60:	69b3      	ldr	r3, [r6, #24]
   12f62:	f8d6 c01c 	ldr.w	ip, [r6, #28]
   12f66:	f8c4 c01c 	str.w	ip, [r4, #28]
   12f6a:	6121      	str	r1, [r4, #16]
   12f6c:	6162      	str	r2, [r4, #20]
   12f6e:	61a3      	str	r3, [r4, #24]
   12f70:	6829      	ldr	r1, [r5, #0]
   12f72:	686a      	ldr	r2, [r5, #4]
   12f74:	68ab      	ldr	r3, [r5, #8]
   12f76:	68ee      	ldr	r6, [r5, #12]
   12f78:	62e6      	str	r6, [r4, #44]	; 0x2c
   12f7a:	6221      	str	r1, [r4, #32]
   12f7c:	6262      	str	r2, [r4, #36]	; 0x24
   12f7e:	62a3      	str	r3, [r4, #40]	; 0x28
   12f80:	69ab      	ldr	r3, [r5, #24]
   12f82:	6929      	ldr	r1, [r5, #16]
   12f84:	696a      	ldr	r2, [r5, #20]
   12f86:	69ee      	ldr	r6, [r5, #28]
   12f88:	63a3      	str	r3, [r4, #56]	; 0x38
  if (SecCmac(pKey, pText, textLen, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_CMAC_CMPL) == FALSE)
   12f8a:	4b12      	ldr	r3, [pc, #72]	; (12fd4 <SmpScCalcF4+0xac>)
  memcpy(pDst, pSrc, len);
   12f8c:	6321      	str	r1, [r4, #48]	; 0x30
   12f8e:	6362      	str	r2, [r4, #52]	; 0x34
   12f90:	63e6      	str	r6, [r4, #60]	; 0x3c
    *pCatBuf = z;
   12f92:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
  if (SecCmac(pKey, pText, textLen, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_CMAC_CMPL) == FALSE)
   12f96:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
   12f9a:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
   12f9e:	9200      	str	r2, [sp, #0]
   12fa0:	221c      	movs	r2, #28
   12fa2:	9201      	str	r2, [sp, #4]
   12fa4:	4650      	mov	r0, sl
   12fa6:	2241      	movs	r2, #65	; 0x41
   12fa8:	4621      	mov	r1, r4
   12faa:	f003 f853 	bl	16054 <SecCmac>
   12fae:	b110      	cbz	r0, 12fb6 <SmpScCalcF4+0x8e>
}
   12fb0:	b002      	add	sp, #8
   12fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    WsfBufFree(pText);
   12fb6:	4620      	mov	r0, r4
   12fb8:	f7fc fc96 	bl	f8e8 <WsfBufFree>
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   12fbc:	f640 0303 	movw	r3, #2051	; 0x803
    smpSmExecute(pCcb, pMsg);
   12fc0:	4641      	mov	r1, r8
   12fc2:	4638      	mov	r0, r7
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   12fc4:	f8a8 3002 	strh.w	r3, [r8, #2]
}
   12fc8:	b002      	add	sp, #8
   12fca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    smpSmExecute(pCcb, pMsg);
   12fce:	f7fe badb 	b.w	11588 <smpSmExecute>
   12fd2:	bf00      	nop
   12fd4:	10004918 	.word	0x10004918

00012fd8 <SmpScInit>:
    smpCb.ccb[i].pScCcb = &SMP_ScCcb[i];
   12fd8:	4a0a      	ldr	r2, [pc, #40]	; (13004 <SmpScInit+0x2c>)
   12fda:	4b0b      	ldr	r3, [pc, #44]	; (13008 <SmpScInit+0x30>)
  smpCb.procAuthReq = smpScAuthReq;
   12fdc:	480b      	ldr	r0, [pc, #44]	; (1300c <SmpScInit+0x34>)
    smpCb.ccb[i].pScCcb = &SMP_ScCcb[i];
   12fde:	f102 011c 	add.w	r1, r2, #28
{
   12fe2:	b410      	push	{r4}
  smpCb.procPairing = smpScProcPairing;
   12fe4:	4c0a      	ldr	r4, [pc, #40]	; (13010 <SmpScInit+0x38>)
    smpCb.ccb[i].pScCcb = &SMP_ScCcb[i];
   12fe6:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  smpCb.lescSupported = TRUE;
   12fea:	2101      	movs	r1, #1
    smpCb.ccb[i].pScCcb = &SMP_ScCcb[i];
   12fec:	645a      	str	r2, [r3, #68]	; 0x44
  smpCb.lescSupported = TRUE;
   12fee:	f883 10ec 	strb.w	r1, [r3, #236]	; 0xec
    smpCb.ccb[i].pScCcb = &SMP_ScCcb[i];
   12ff2:	3238      	adds	r2, #56	; 0x38
  smpCb.procAuthReq = smpScAuthReq;
   12ff4:	e9c3 4039 	strd	r4, r0, [r3, #228]	; 0xe4
    smpCb.ccb[i].pScCcb = &SMP_ScCcb[i];
   12ff8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
}
   12ffc:	f85d 4b04 	ldr.w	r4, [sp], #4
   13000:	4770      	bx	lr
   13002:	bf00      	nop
   13004:	10004a08 	.word	0x10004a08
   13008:	10004918 	.word	0x10004918
   1300c:	0001275d 	.word	0x0001275d
   13010:	0001247d 	.word	0x0001247d

00013014 <SmpScCat>:
{
   13014:	b538      	push	{r3, r4, r5, lr}
   13016:	4605      	mov	r5, r0
   13018:	4614      	mov	r4, r2
  memcpy(pDst, pSrc, len);
   1301a:	f7f9 f871 	bl	c100 <memcpy>
  return pDst + len;
}
   1301e:	1928      	adds	r0, r5, r4
   13020:	bd38      	pop	{r3, r4, r5, pc}
   13022:	bf00      	nop

00013024 <SmpScCat128>:
 *
 *  \return Pointer to next byte after concatination.
 */
/*************************************************************************************************/
uint8_t *SmpScCat128(uint8_t *pDst, uint8_t *pSrc)
{
   13024:	b510      	push	{r4, lr}
   13026:	4604      	mov	r4, r0
  Calc128Cpy(pDst, pSrc);
   13028:	f000 f9dc 	bl	133e4 <Calc128Cpy>
  return pDst + 16;
}
   1302c:	f104 0010 	add.w	r0, r4, #16
   13030:	bd10      	pop	{r4, pc}
   13032:	bf00      	nop

00013034 <smpScSendPubKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScSendPubKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   13034:	b570      	push	{r4, r5, r6, lr}
  /* Transmit the public key */
  uint8_t   *pPkt;
  uint8_t   *p;

  /* set connection busy */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
   13036:	2201      	movs	r2, #1
{
   13038:	4604      	mov	r4, r0
   1303a:	460e      	mov	r6, r1
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
   1303c:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
   13040:	4611      	mov	r1, r2
   13042:	f006 fb53 	bl	196ec <DmConnSetIdle>

  /* start smp response timer */
  smpStartRspTimer(pCcb);
   13046:	4620      	mov	r0, r4
   13048:	f7fd ff74 	bl	10f34 <smpStartRspTimer>

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_PUB_KEY_MSG_LEN + L2C_PAYLOAD_START)) != NULL)
   1304c:	2049      	movs	r0, #73	; 0x49
   1304e:	f7ff f8b3 	bl	121b8 <smpMsgAlloc>
   13052:	b1b0      	cbz	r0, 13082 <smpScSendPubKey+0x4e>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, SMP_CMD_PUBLIC_KEY);
   13054:	230c      	movs	r3, #12
   13056:	7203      	strb	r3, [r0, #8]

    /* Store Public Key X data in LSB first format */
    WStrReverseCpy(p,  pCcb->pScCcb->pLocalPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
   13058:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1305a:	4605      	mov	r5, r0
   1305c:	68d9      	ldr	r1, [r3, #12]
   1305e:	2220      	movs	r2, #32
   13060:	3009      	adds	r0, #9
   13062:	f000 fa39 	bl	134d8 <WStrReverseCpy>

    /* Store Public Key Y data in LSB first format */
    WStrReverseCpy(p+SMP_PUB_KEY_LEN, pCcb->pScCcb->pLocalPublicKey->pubKeyY, SMP_PUB_KEY_LEN);
   13066:	6c63      	ldr	r3, [r4, #68]	; 0x44
   13068:	68d9      	ldr	r1, [r3, #12]
   1306a:	2220      	movs	r2, #32
   1306c:	f105 0029 	add.w	r0, r5, #41	; 0x29
   13070:	4411      	add	r1, r2
   13072:	f000 fa31 	bl	134d8 <WStrReverseCpy>

    /* send packet */
    smpSendPkt(pCcb, pPkt);
   13076:	4629      	mov	r1, r5
   13078:	4620      	mov	r0, r4
  {
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, pMsg);
  }
}
   1307a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    smpSendPkt(pCcb, pPkt);
   1307e:	f7ff b87b 	b.w	12178 <smpSendPkt>
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   13082:	f640 0303 	movw	r3, #2051	; 0x803
   13086:	8073      	strh	r3, [r6, #2]
    smpSmExecute(pCcb, pMsg);
   13088:	4631      	mov	r1, r6
   1308a:	4620      	mov	r0, r4
}
   1308c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    smpSmExecute(pCcb, pMsg);
   13090:	f7fe ba7a 	b.w	11588 <smpSmExecute>

00013094 <smpScSendDHKeyCheck>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScSendDHKeyCheck(smpCcb_t *pCcb, smpMsg_t *pMsg, uint8_t *pCheck)
{
   13094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13096:	4616      	mov	r6, r2
  uint8_t   *pPkt;
  uint8_t   *p;

  /* set connection busy */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
   13098:	2201      	movs	r2, #1
{
   1309a:	4605      	mov	r5, r0
   1309c:	460f      	mov	r7, r1
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
   1309e:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
   130a2:	4611      	mov	r1, r2
   130a4:	f006 fb22 	bl	196ec <DmConnSetIdle>

  /* start smp response timer */
  smpStartRspTimer(pCcb);
   130a8:	4628      	mov	r0, r5
   130aa:	f7fd ff43 	bl	10f34 <smpStartRspTimer>

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_DHKEY_CHECK_MSG_LEN + L2C_PAYLOAD_START)) != NULL)
   130ae:	2019      	movs	r0, #25
   130b0:	f7ff f882 	bl	121b8 <smpMsgAlloc>
   130b4:	b168      	cbz	r0, 130d2 <smpScSendDHKeyCheck+0x3e>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, SMP_CMD_DHKEY_CHECK);
   130b6:	230d      	movs	r3, #13
   130b8:	7203      	strb	r3, [r0, #8]

    /* DH Key Check data is result of last CMAC operation (LSB first) */
    WStrReverseCpy(p, pCheck, SMP_DHKEY_CHECK_LEN);
   130ba:	4604      	mov	r4, r0
   130bc:	4631      	mov	r1, r6
   130be:	3009      	adds	r0, #9
   130c0:	2210      	movs	r2, #16
   130c2:	f000 fa09 	bl	134d8 <WStrReverseCpy>

    /* send packet */
    smpSendPkt(pCcb, pPkt);
   130c6:	4621      	mov	r1, r4
   130c8:	4628      	mov	r0, r5
  {
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, pMsg);
  }
}
   130ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    smpSendPkt(pCcb, pPkt);
   130ce:	f7ff b853 	b.w	12178 <smpSendPkt>
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   130d2:	f640 0303 	movw	r3, #2051	; 0x803
   130d6:	807b      	strh	r3, [r7, #2]
    smpSmExecute(pCcb, pMsg);
   130d8:	4639      	mov	r1, r7
   130da:	4628      	mov	r0, r5
}
   130dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    smpSmExecute(pCcb, pMsg);
   130e0:	f7fe ba52 	b.w	11588 <smpSmExecute>

000130e4 <smpScSendRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScSendRand(smpCcb_t *pCcb, smpMsg_t *pMsg, uint8_t *pRand)
{
   130e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   130e6:	4616      	mov	r6, r2
  /* Transmit the Pair Rand */
  uint8_t   *pPkt;
  uint8_t   *p;

  /* set connection busy */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
   130e8:	2201      	movs	r2, #1
{
   130ea:	4605      	mov	r5, r0
   130ec:	460f      	mov	r7, r1
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
   130ee:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
   130f2:	4611      	mov	r1, r2
   130f4:	f006 fafa 	bl	196ec <DmConnSetIdle>

  /* start smp response timer */
  smpStartRspTimer(pCcb);
   130f8:	4628      	mov	r0, r5
   130fa:	f7fd ff1b 	bl	10f34 <smpStartRspTimer>

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_PAIR_RAND_LEN + L2C_PAYLOAD_START)) != NULL)
   130fe:	2019      	movs	r0, #25
   13100:	f7ff f85a 	bl	121b8 <smpMsgAlloc>
   13104:	b168      	cbz	r0, 13122 <smpScSendRand+0x3e>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_RAND);
   13106:	2304      	movs	r3, #4
   13108:	7203      	strb	r3, [r0, #8]

    /* Store Random data (LSB first) */
    WStrReverseCpy(p, pRand, SMP_RAND_LEN);
   1310a:	4604      	mov	r4, r0
   1310c:	4631      	mov	r1, r6
   1310e:	3009      	adds	r0, #9
   13110:	2210      	movs	r2, #16
   13112:	f000 f9e1 	bl	134d8 <WStrReverseCpy>

    /* send packet */
    smpSendPkt(pCcb, pPkt);
   13116:	4621      	mov	r1, r4
   13118:	4628      	mov	r0, r5
  {
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, pMsg);
  }
}
   1311a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    smpSendPkt(pCcb, pPkt);
   1311e:	f7ff b82b 	b.w	12178 <smpSendPkt>
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   13122:	f640 0303 	movw	r3, #2051	; 0x803
   13126:	807b      	strh	r3, [r7, #2]
    smpSmExecute(pCcb, pMsg);
   13128:	4639      	mov	r1, r7
   1312a:	4628      	mov	r0, r5
}
   1312c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    smpSmExecute(pCcb, pMsg);
   13130:	f7fe ba2a 	b.w	11588 <smpSmExecute>

00013134 <smpScSendPairCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScSendPairCnf(smpCcb_t *pCcb, smpMsg_t *pMsg, uint8_t *pCnf)
{
   13134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13136:	4616      	mov	r6, r2
  uint8_t   *pPkt;
  uint8_t   *p;

  /* set connection busy */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
   13138:	2201      	movs	r2, #1
{
   1313a:	4605      	mov	r5, r0
   1313c:	460f      	mov	r7, r1
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
   1313e:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
   13142:	4611      	mov	r1, r2
   13144:	f006 fad2 	bl	196ec <DmConnSetIdle>

  /* start smp response timer */
  smpStartRspTimer(pCcb);
   13148:	4628      	mov	r0, r5
   1314a:	f7fd fef3 	bl	10f34 <smpStartRspTimer>

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_PAIR_CNF_LEN + L2C_PAYLOAD_START)) != NULL)
   1314e:	2019      	movs	r0, #25
   13150:	f7ff f832 	bl	121b8 <smpMsgAlloc>
   13154:	b168      	cbz	r0, 13172 <smpScSendPairCnf+0x3e>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_CNF);
   13156:	2303      	movs	r3, #3
   13158:	7203      	strb	r3, [r0, #8]

    /* Store Confirm data (LSB first) */
    WStrReverseCpy(p, pCnf, SMP_CONFIRM_LEN);
   1315a:	4604      	mov	r4, r0
   1315c:	4631      	mov	r1, r6
   1315e:	3009      	adds	r0, #9
   13160:	2210      	movs	r2, #16
   13162:	f000 f9b9 	bl	134d8 <WStrReverseCpy>

    /* send packet */
    smpSendPkt(pCcb, pPkt);
   13166:	4621      	mov	r1, r4
   13168:	4628      	mov	r0, r5
  {
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, pMsg);
  }
}
   1316a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    smpSendPkt(pCcb, pPkt);
   1316e:	f7ff b803 	b.w	12178 <smpSendPkt>
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   13172:	f640 0303 	movw	r3, #2051	; 0x803
   13176:	807b      	strh	r3, [r7, #2]
    smpSmExecute(pCcb, pMsg);
   13178:	4639      	mov	r1, r7
   1317a:	4628      	mov	r0, r5
}
   1317c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    smpSmExecute(pCcb, pMsg);
   13180:	f7fe ba02 	b.w	11588 <smpSmExecute>

00013184 <smpGetPkBit>:
 *  \return None.
 */
/*************************************************************************************************/
uint8_t smpGetPkBit(smpCcb_t *pCcb)
{
  smpScCcb_t *pScCb = pCcb->pScCcb;
   13184:	6c43      	ldr	r3, [r0, #68]	; 0x44
  uint8_t indx = (SMP_RAND_LEN - 1) - pScCb->pkPos / 8;
   13186:	78d8      	ldrb	r0, [r3, #3]
  uint8_t bit = pScCb->pkPos % 8;

  if (pScCb->pScratch->Ra[indx] & 1<<bit)
   13188:	695a      	ldr	r2, [r3, #20]
  uint8_t indx = (SMP_RAND_LEN - 1) - pScCb->pkPos / 8;
   1318a:	08c3      	lsrs	r3, r0, #3
   1318c:	f1c3 030f 	rsb	r3, r3, #15
  if (pScCb->pScratch->Ra[indx] & 1<<bit)
   13190:	fa52 f383 	uxtab	r3, r2, r3
   13194:	f000 0207 	and.w	r2, r0, #7
   13198:	f893 0020 	ldrb.w	r0, [r3, #32]
   1319c:	4110      	asrs	r0, r2
   1319e:	f000 0001 	and.w	r0, r0, #1
    return 0x81;

  return 0x80;
}
   131a2:	f040 0080 	orr.w	r0, r0, #128	; 0x80
   131a6:	4770      	bx	lr

000131a8 <SmpScGetCancelMsgWithReattempt>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SmpScGetCancelMsgWithReattempt(dmConnId_t connId, wsfMsgHdr_t *pHdr, uint8_t status)
{
   131a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   131aa:	460d      	mov	r5, r1
   131ac:	4617      	mov	r7, r2
   131ae:	4606      	mov	r6, r0
  smpCcb_t *pCcb = smpCcbByConnId(connId);
   131b0:	f7fe fdec 	bl	11d8c <smpCcbByConnId>
   131b4:	4604      	mov	r4, r0

  SMP_TRACE_INFO1("SmpScGetCancelMsgWithReattempt: %d", pCcb->attempts);
   131b6:	f890 1042 	ldrb.w	r1, [r0, #66]	; 0x42
   131ba:	480c      	ldr	r0, [pc, #48]	; (131ec <SmpScGetCancelMsgWithReattempt+0x44>)
   131bc:	f7fc ff44 	bl	10048 <WsfTrace>

  /* update repeated attempts count */
  pCcb->attempts++;
   131c0:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   131c4:	3301      	adds	r3, #1
   131c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42

  pHdr->param = connId;
  pHdr->status = status;

  SmpDbPairingFailed(connId);
   131ca:	4630      	mov	r0, r6
  pHdr->param = connId;
   131cc:	802e      	strh	r6, [r5, #0]
  pHdr->status = status;
   131ce:	70ef      	strb	r7, [r5, #3]
  SmpDbPairingFailed(connId);
   131d0:	f7fe fbc4 	bl	1195c <SmpDbPairingFailed>

  if (pCcb->attempts == pSmpCfg->maxAttempts)
   131d4:	4a06      	ldr	r2, [pc, #24]	; (131f0 <SmpScGetCancelMsgWithReattempt+0x48>)
   131d6:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   131da:	6812      	ldr	r2, [r2, #0]
   131dc:	79d2      	ldrb	r2, [r2, #7]
    pHdr->event = SMP_MSG_INT_MAX_ATTEMPTS;
  }
  else
  {
    /* else just fail */
    pHdr->event = SMP_MSG_API_CANCEL_REQ;
   131de:	4293      	cmp	r3, r2
   131e0:	bf0c      	ite	eq
   131e2:	230d      	moveq	r3, #13
   131e4:	2303      	movne	r3, #3
   131e6:	70ab      	strb	r3, [r5, #2]
  }
}
   131e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   131ea:	bf00      	nop
   131ec:	0001fdc0 	.word	0x0001fdc0
   131f0:	10002b10 	.word	0x10002b10

000131f4 <smpScFailWithReattempt>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void smpScFailWithReattempt(smpCcb_t *pCcb)
{
   131f4:	b570      	push	{r4, r5, r6, lr}
  wsfMsgHdr_t hdr;

  SmpScGetCancelMsgWithReattempt(pCcb->connId, &hdr, SMP_ERR_CONFIRM_VALUE);
   131f6:	f890 603d 	ldrb.w	r6, [r0, #61]	; 0x3d
{
   131fa:	b082      	sub	sp, #8
   131fc:	4605      	mov	r5, r0
  smpCcb_t *pCcb = smpCcbByConnId(connId);
   131fe:	4630      	mov	r0, r6
   13200:	f7fe fdc4 	bl	11d8c <smpCcbByConnId>
   13204:	4604      	mov	r4, r0
  SMP_TRACE_INFO1("SmpScGetCancelMsgWithReattempt: %d", pCcb->attempts);
   13206:	4811      	ldr	r0, [pc, #68]	; (1324c <smpScFailWithReattempt+0x58>)
   13208:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
   1320c:	f7fc ff1c 	bl	10048 <WsfTrace>
  pCcb->attempts++;
   13210:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  pHdr->param = connId;
   13214:	f8ad 6004 	strh.w	r6, [sp, #4]
  pCcb->attempts++;
   13218:	3301      	adds	r3, #1
  SmpDbPairingFailed(connId);
   1321a:	4630      	mov	r0, r6
  pCcb->attempts++;
   1321c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  pHdr->status = status;
   13220:	2304      	movs	r3, #4
   13222:	f88d 3007 	strb.w	r3, [sp, #7]
  SmpDbPairingFailed(connId);
   13226:	f7fe fb99 	bl	1195c <SmpDbPairingFailed>
  if (pCcb->attempts == pSmpCfg->maxAttempts)
   1322a:	4a09      	ldr	r2, [pc, #36]	; (13250 <smpScFailWithReattempt+0x5c>)
   1322c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   13230:	6812      	ldr	r2, [r2, #0]
   13232:	79d2      	ldrb	r2, [r2, #7]

  smpSmExecute(pCcb, (smpMsg_t *)&hdr);
   13234:	a901      	add	r1, sp, #4
    pHdr->event = SMP_MSG_API_CANCEL_REQ;
   13236:	4293      	cmp	r3, r2
   13238:	bf0c      	ite	eq
   1323a:	230d      	moveq	r3, #13
   1323c:	2303      	movne	r3, #3
  smpSmExecute(pCcb, (smpMsg_t *)&hdr);
   1323e:	4628      	mov	r0, r5
   13240:	f88d 3006 	strb.w	r3, [sp, #6]
   13244:	f7fe f9a0 	bl	11588 <smpSmExecute>
}
   13248:	b002      	add	sp, #8
   1324a:	bd70      	pop	{r4, r5, r6, pc}
   1324c:	0001fdc0 	.word	0x0001fdc0
   13250:	10002b10 	.word	0x10002b10

00013254 <smpLogByteArray>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpLogByteArray(char *str, uint8_t *pArray, uint8_t len)
{
   13254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13258:	4614      	mov	r4, r2
   1325a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
   1325e:	460d      	mov	r5, r1
#if WSF_TOKEN_ENABLED == TRUE || WSF_TRACE_ENABLED == TRUE

  char buffer[512];
  int i, j=0, pos=0;

  SMP_TRACE_INFO0(str);
   13260:	f7fc fef2 	bl	10048 <WsfTrace>

  while (j < len)
   13264:	2c00      	cmp	r4, #0
   13266:	d05c      	beq.n	13322 <smpLogByteArray+0xce>
  int i, j=0, pos=0;
   13268:	2600      	movs	r6, #0
   1326a:	46a0      	mov	r8, r4
    for (i=0; i<count; i++, j++)
    {
      uint8_t quad;

      if (i && i % 4 == 0)
        buffer[pos++] = ' ';
   1326c:	2720      	movs	r7, #32
    buffer[pos++] = '[';
   1326e:	235b      	movs	r3, #91	; 0x5b
    if (len-j < count)
   13270:	f1b8 0f0f 	cmp.w	r8, #15
    buffer[pos++] = '[';
   13274:	f88d 3000 	strb.w	r3, [sp]
    if (len-j < count)
   13278:	dd47      	ble.n	1330a <smpLogByteArray+0xb6>
    int count = 16;
   1327a:	f04f 0810 	mov.w	r8, #16
      if (i && i % 4 == 0)
   1327e:	f106 3eff 	add.w	lr, r6, #4294967295
   13282:	44ae      	add	lr, r5
    for (i=0; i<count; i++, j++)
   13284:	2200      	movs	r2, #0
    buffer[pos++] = '[';
   13286:	f04f 0c01 	mov.w	ip, #1
   1328a:	e005      	b.n	13298 <smpLogByteArray+0x44>
      if (i && i % 4 == 0)
   1328c:	0793      	lsls	r3, r2, #30
        buffer[pos++] = ' ';
   1328e:	bf04      	itt	eq
   13290:	f80d 700c 	strbeq.w	r7, [sp, ip]
   13294:	f10c 0c01 	addeq.w	ip, ip, #1

      quad = (pArray[j] >> 4) & 0xf;
   13298:	f81e 3f01 	ldrb.w	r3, [lr, #1]!

      if (quad < 10)
   1329c:	2b9f      	cmp	r3, #159	; 0x9f
      quad = (pArray[j] >> 4) & 0xf;
   1329e:	ea4f 1013 	mov.w	r0, r3, lsr #4
        buffer[pos++] = '0' + quad;
      else
        buffer[pos++] = 'a' + quad - 10;

      quad = pArray[j] & 0xf;
   132a2:	f003 030f 	and.w	r3, r3, #15
        buffer[pos++] = '0' + quad;
   132a6:	f10c 0101 	add.w	r1, ip, #1
   132aa:	bf92      	itee	ls
   132ac:	3030      	addls	r0, #48	; 0x30
        buffer[pos++] = 'a' + quad - 10;
   132ae:	f10c 0101 	addhi.w	r1, ip, #1
   132b2:	3057      	addhi	r0, #87	; 0x57
    for (i=0; i<count; i++, j++)
   132b4:	3201      	adds	r2, #1

      if (quad < 10)
   132b6:	2b09      	cmp	r3, #9
        buffer[pos++] = '0' + quad;
   132b8:	bf94      	ite	ls
   132ba:	3330      	addls	r3, #48	; 0x30
      else
        buffer[pos++] = 'a' + quad - 10;
   132bc:	3357      	addhi	r3, #87	; 0x57
    for (i=0; i<count; i++, j++)
   132be:	4590      	cmp	r8, r2
   132c0:	f80d 000c 	strb.w	r0, [sp, ip]
      if (quad < 10)
   132c4:	f80d 3001 	strb.w	r3, [sp, r1]
        buffer[pos++] = '0' + quad;
   132c8:	f101 0c01 	add.w	ip, r1, #1
    for (i=0; i<count; i++, j++)
   132cc:	dcde      	bgt.n	1328c <smpLogByteArray+0x38>
   132ce:	f1b8 0f00 	cmp.w	r8, #0
    }

    buffer[pos++] = ']';
    buffer[pos++] = '\0';
   132d2:	eb0d 030c 	add.w	r3, sp, ip
    for (i=0; i<count; i++, j++)
   132d6:	f108 38ff 	add.w	r8, r8, #4294967295
    buffer[pos++] = ']';
   132da:	f04f 015d 	mov.w	r1, #93	; 0x5d
    for (i=0; i<count; i++, j++)
   132de:	bfd8      	it	le
   132e0:	f04f 0800 	movle.w	r8, #0
    buffer[pos++] = '\0';
   132e4:	2200      	movs	r2, #0
   132e6:	3601      	adds	r6, #1
    buffer[pos++] = ']';
   132e8:	f80d 100c 	strb.w	r1, [sp, ip]
    for (i=0; i<count; i++, j++)
   132ec:	4446      	add	r6, r8
    SMP_TRACE_INFO0(buffer);
   132ee:	4668      	mov	r0, sp
    buffer[pos++] = '\0';
   132f0:	705a      	strb	r2, [r3, #1]
    SMP_TRACE_INFO0(buffer);
   132f2:	f7fc fea9 	bl	10048 <WsfTrace>
  while (j < len)
   132f6:	42b4      	cmp	r4, r6
   132f8:	dd13      	ble.n	13322 <smpLogByteArray+0xce>
   132fa:	eba4 0806 	sub.w	r8, r4, r6
    buffer[pos++] = '[';
   132fe:	235b      	movs	r3, #91	; 0x5b
    if (len-j < count)
   13300:	f1b8 0f0f 	cmp.w	r8, #15
    buffer[pos++] = '[';
   13304:	f88d 3000 	strb.w	r3, [sp]
    if (len-j < count)
   13308:	dcb7      	bgt.n	1327a <smpLogByteArray+0x26>
    for (i=0; i<count; i++, j++)
   1330a:	b10e      	cbz	r6, 13310 <smpLogByteArray+0xbc>
   1330c:	46b0      	mov	r8, r6
   1330e:	e7b6      	b.n	1327e <smpLogByteArray+0x2a>
    buffer[pos++] = ']';
   13310:	235d      	movs	r3, #93	; 0x5d
    SMP_TRACE_INFO0(buffer);
   13312:	4668      	mov	r0, sp
    buffer[pos++] = ']';
   13314:	f88d 3001 	strb.w	r3, [sp, #1]
    buffer[pos++] = '\0';
   13318:	f88d 6002 	strb.w	r6, [sp, #2]
    SMP_TRACE_INFO0(buffer);
   1331c:	f7fc fe94 	bl	10048 <WsfTrace>
  while (j < len)
   13320:	e7a5      	b.n	1326e <smpLogByteArray+0x1a>
    buffer[pos++] = '\0';

    SMP_TRACE_INFO0(buffer);
  }
#endif
}
   13322:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   13326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1332a:	bf00      	nop

0001332c <secEccRng>:
 *
 *  \return TRUE if successful.
 */
/*************************************************************************************************/
static int secEccRng(uint8_t *p_dest, unsigned p_size)
{
   1332c:	b508      	push	{r3, lr}
  SecRand(p_dest, p_size);
   1332e:	b2c9      	uxtb	r1, r1
   13330:	f002 ff4a 	bl	161c8 <SecRand>
  return TRUE;
}
   13334:	2001      	movs	r0, #1
   13336:	bd08      	pop	{r3, pc}

00013338 <SecEccGenSharedSecret>:
 *
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecEccGenSharedSecret(secEccKey_t *pKey, wsfHandlerId_t handlerId, uint16_t param, uint8_t event)
{
   13338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1333c:	4605      	mov	r5, r0
  secEccMsg_t *pMsg = WsfMsgAlloc(sizeof(secEccMsg_t));
   1333e:	2064      	movs	r0, #100	; 0x64
{
   13340:	4688      	mov	r8, r1
   13342:	4617      	mov	r7, r2
   13344:	461e      	mov	r6, r3
  secEccMsg_t *pMsg = WsfMsgAlloc(sizeof(secEccMsg_t));
   13346:	f7fc faff 	bl	f948 <WsfMsgAlloc>

  if (pMsg)
   1334a:	4604      	mov	r4, r0
   1334c:	b908      	cbnz	r0, 13352 <SecEccGenSharedSecret+0x1a>

    return TRUE;
  }

  return FALSE;
}
   1334e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool_t keyValid = uECC_valid_public_key(pKey->pubKey_x);
   13352:	4628      	mov	r0, r5
   13354:	f002 fb94 	bl	15a80 <uECC_valid_public_key>
    if (keyValid)
   13358:	b2c0      	uxtb	r0, r0
   1335a:	b978      	cbnz	r0, 1337c <SecEccGenSharedSecret+0x44>
      memset(pMsg->data.sharedSecret.secret, 0xFF, SEC_ECC_KEY_LEN);
   1335c:	2220      	movs	r2, #32
   1335e:	21ff      	movs	r1, #255	; 0xff
   13360:	1d20      	adds	r0, r4, #4
   13362:	f009 fbd9 	bl	1cb18 <memset>
    pMsg->hdr.event = event;
   13366:	70a6      	strb	r6, [r4, #2]
    pMsg->hdr.param = param;
   13368:	8027      	strh	r7, [r4, #0]
    pMsg->hdr.status = keyValid ? HCI_SUCCESS : HCI_ERR_INVALID_PARAM;
   1336a:	2312      	movs	r3, #18
    WsfMsgSend(handlerId, pMsg);
   1336c:	4640      	mov	r0, r8
    pMsg->hdr.status = keyValid ? HCI_SUCCESS : HCI_ERR_INVALID_PARAM;
   1336e:	70e3      	strb	r3, [r4, #3]
    WsfMsgSend(handlerId, pMsg);
   13370:	4621      	mov	r1, r4
   13372:	f7fc faf5 	bl	f960 <WsfMsgSend>
    return TRUE;
   13376:	2001      	movs	r0, #1
}
   13378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      uECC_shared_secret(pKey->pubKey_x, pKey->privKey, pMsg->data.sharedSecret.secret);
   1337c:	1d22      	adds	r2, r4, #4
   1337e:	f105 0140 	add.w	r1, r5, #64	; 0x40
   13382:	4628      	mov	r0, r5
   13384:	f002 fa7c 	bl	15880 <uECC_shared_secret>
    pMsg->hdr.event = event;
   13388:	70a6      	strb	r6, [r4, #2]
    pMsg->hdr.param = param;
   1338a:	8027      	strh	r7, [r4, #0]
    pMsg->hdr.status = keyValid ? HCI_SUCCESS : HCI_ERR_INVALID_PARAM;
   1338c:	2300      	movs	r3, #0
   1338e:	e7ed      	b.n	1336c <SecEccGenSharedSecret+0x34>

00013390 <SecEccInit>:
 */
/*************************************************************************************************/
void SecEccInit()
{
  //srand((unsigned int)time(NULL));
  uECC_set_rng(secEccRng);
   13390:	4801      	ldr	r0, [pc, #4]	; (13398 <SecEccInit+0x8>)
   13392:	f002 ba6f 	b.w	15874 <uECC_set_rng>
   13396:	bf00      	nop
   13398:	0001332d 	.word	0x0001332d

0001339c <BdaCpy>:
 *  \return None.
 */
/*************************************************************************************************/
void BdaCpy(uint8_t *pDst, const uint8_t *pSrc)
{
  memcpy(pDst, pSrc, BDA_ADDR_LEN);
   1339c:	680b      	ldr	r3, [r1, #0]
   1339e:	6003      	str	r3, [r0, #0]
   133a0:	888b      	ldrh	r3, [r1, #4]
   133a2:	8083      	strh	r3, [r0, #4]
}
   133a4:	4770      	bx	lr
   133a6:	bf00      	nop

000133a8 <BdaCmp>:
 *
 *  \return TRUE if addresses match, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t BdaCmp(const uint8_t *pAddr1, const uint8_t *pAddr2)
{
   133a8:	b508      	push	{r3, lr}
  return (memcmp(pAddr1, pAddr2, BDA_ADDR_LEN) == 0);
   133aa:	2206      	movs	r2, #6
   133ac:	f009 fb82 	bl	1cab4 <memcmp>
}
   133b0:	fab0 f080 	clz	r0, r0
   133b4:	0940      	lsrs	r0, r0, #5
   133b6:	bd08      	pop	{r3, pc}

000133b8 <BdaClr>:
 *  \return pDst + BDA_ADDR_LEN
 */
/*************************************************************************************************/
uint8_t *BdaClr(uint8_t *pDst)
{
  memset(pDst, 0, BDA_ADDR_LEN);
   133b8:	2300      	movs	r3, #0
   133ba:	6003      	str	r3, [r0, #0]
   133bc:	8083      	strh	r3, [r0, #4]

  return (pDst + BDA_ADDR_LEN);
}
   133be:	3006      	adds	r0, #6
   133c0:	4770      	bx	lr
   133c2:	bf00      	nop

000133c4 <BdaIsZeros>:
*
*  \return TRUE if address is all zeros, FALSE otherwise.
*/
/*************************************************************************************************/
bool_t BdaIsZeros(const uint8_t *pAddr)
{
   133c4:	b500      	push	{lr}
   133c6:	b083      	sub	sp, #12
  uint8_t addrZeros[BDA_ADDR_LEN] = { 0 };
   133c8:	2300      	movs	r3, #0

  return (memcmp(pAddr, addrZeros, BDA_ADDR_LEN) == 0);
   133ca:	2206      	movs	r2, #6
   133cc:	4669      	mov	r1, sp
  uint8_t addrZeros[BDA_ADDR_LEN] = { 0 };
   133ce:	9300      	str	r3, [sp, #0]
   133d0:	f8ad 3004 	strh.w	r3, [sp, #4]
  return (memcmp(pAddr, addrZeros, BDA_ADDR_LEN) == 0);
   133d4:	f009 fb6e 	bl	1cab4 <memcmp>
}
   133d8:	fab0 f080 	clz	r0, r0
   133dc:	0940      	lsrs	r0, r0, #5
   133de:	b003      	add	sp, #12
   133e0:	f85d fb04 	ldr.w	pc, [sp], #4

000133e4 <Calc128Cpy>:
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Cpy(uint8_t *pDst, uint8_t *pSrc)
{
  memcpy(pDst, pSrc, CALC128_LEN);
   133e4:	f8d1 c000 	ldr.w	ip, [r1]
   133e8:	684a      	ldr	r2, [r1, #4]
   133ea:	688b      	ldr	r3, [r1, #8]
   133ec:	68c9      	ldr	r1, [r1, #12]
   133ee:	60c1      	str	r1, [r0, #12]
   133f0:	f8c0 c000 	str.w	ip, [r0]
   133f4:	6042      	str	r2, [r0, #4]
   133f6:	6083      	str	r3, [r0, #8]
}
   133f8:	4770      	bx	lr
   133fa:	bf00      	nop

000133fc <Calc128Cpy64>:
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Cpy64(uint8_t *pDst, uint8_t *pSrc)
{
  memcpy(pDst, pSrc, CALC128_LEN/2);
   133fc:	680b      	ldr	r3, [r1, #0]
   133fe:	684a      	ldr	r2, [r1, #4]
   13400:	6042      	str	r2, [r0, #4]
   13402:	6003      	str	r3, [r0, #0]
}
   13404:	4770      	bx	lr
   13406:	bf00      	nop

00013408 <Calc128Xor>:
/*************************************************************************************************/
void Calc128Xor(uint8_t *pDst, uint8_t *pSrc)
{
  uint8_t i;
  
  for (i = CALC128_LEN; i > 0; i--)
   13408:	1c4b      	adds	r3, r1, #1
   1340a:	1ac3      	subs	r3, r0, r3
   1340c:	2b02      	cmp	r3, #2
   1340e:	d914      	bls.n	1343a <Calc128Xor+0x32>
  {
    *pDst++ ^= *pSrc++;
   13410:	680b      	ldr	r3, [r1, #0]
   13412:	f8d0 c000 	ldr.w	ip, [r0]
   13416:	6842      	ldr	r2, [r0, #4]
   13418:	ea83 030c 	eor.w	r3, r3, ip
   1341c:	6003      	str	r3, [r0, #0]
   1341e:	684b      	ldr	r3, [r1, #4]
   13420:	f8d0 c008 	ldr.w	ip, [r0, #8]
   13424:	405a      	eors	r2, r3
   13426:	6042      	str	r2, [r0, #4]
   13428:	688b      	ldr	r3, [r1, #8]
   1342a:	68c2      	ldr	r2, [r0, #12]
   1342c:	ea83 030c 	eor.w	r3, r3, ip
   13430:	6083      	str	r3, [r0, #8]
   13432:	68cb      	ldr	r3, [r1, #12]
   13434:	4053      	eors	r3, r2
   13436:	60c3      	str	r3, [r0, #12]
  for (i = CALC128_LEN; i > 0; i--)
   13438:	4770      	bx	lr
    *pDst++ ^= *pSrc++;
   1343a:	f891 c000 	ldrb.w	ip, [r1]
   1343e:	7803      	ldrb	r3, [r0, #0]
   13440:	7842      	ldrb	r2, [r0, #1]
   13442:	ea83 030c 	eor.w	r3, r3, ip
   13446:	7003      	strb	r3, [r0, #0]
   13448:	784b      	ldrb	r3, [r1, #1]
   1344a:	f890 c002 	ldrb.w	ip, [r0, #2]
   1344e:	4053      	eors	r3, r2
   13450:	7043      	strb	r3, [r0, #1]
   13452:	788b      	ldrb	r3, [r1, #2]
   13454:	78c2      	ldrb	r2, [r0, #3]
   13456:	ea83 030c 	eor.w	r3, r3, ip
   1345a:	7083      	strb	r3, [r0, #2]
   1345c:	78cb      	ldrb	r3, [r1, #3]
   1345e:	f890 c004 	ldrb.w	ip, [r0, #4]
   13462:	4053      	eors	r3, r2
   13464:	70c3      	strb	r3, [r0, #3]
   13466:	790b      	ldrb	r3, [r1, #4]
   13468:	7942      	ldrb	r2, [r0, #5]
   1346a:	ea83 030c 	eor.w	r3, r3, ip
   1346e:	7103      	strb	r3, [r0, #4]
   13470:	794b      	ldrb	r3, [r1, #5]
   13472:	f890 c006 	ldrb.w	ip, [r0, #6]
   13476:	4053      	eors	r3, r2
   13478:	7143      	strb	r3, [r0, #5]
   1347a:	798b      	ldrb	r3, [r1, #6]
   1347c:	79c2      	ldrb	r2, [r0, #7]
   1347e:	ea83 030c 	eor.w	r3, r3, ip
   13482:	7183      	strb	r3, [r0, #6]
   13484:	79cb      	ldrb	r3, [r1, #7]
   13486:	f890 c008 	ldrb.w	ip, [r0, #8]
   1348a:	4053      	eors	r3, r2
   1348c:	71c3      	strb	r3, [r0, #7]
   1348e:	7a0b      	ldrb	r3, [r1, #8]
   13490:	7a42      	ldrb	r2, [r0, #9]
   13492:	ea83 030c 	eor.w	r3, r3, ip
   13496:	7203      	strb	r3, [r0, #8]
   13498:	7a4b      	ldrb	r3, [r1, #9]
   1349a:	4053      	eors	r3, r2
   1349c:	7243      	strb	r3, [r0, #9]
   1349e:	7a82      	ldrb	r2, [r0, #10]
   134a0:	7a8b      	ldrb	r3, [r1, #10]
   134a2:	4053      	eors	r3, r2
   134a4:	7283      	strb	r3, [r0, #10]
   134a6:	7acb      	ldrb	r3, [r1, #11]
   134a8:	f890 c00b 	ldrb.w	ip, [r0, #11]
   134ac:	7b02      	ldrb	r2, [r0, #12]
   134ae:	ea83 030c 	eor.w	r3, r3, ip
   134b2:	72c3      	strb	r3, [r0, #11]
   134b4:	7b0b      	ldrb	r3, [r1, #12]
   134b6:	f890 c00d 	ldrb.w	ip, [r0, #13]
   134ba:	4053      	eors	r3, r2
   134bc:	7303      	strb	r3, [r0, #12]
   134be:	7b4b      	ldrb	r3, [r1, #13]
   134c0:	7b82      	ldrb	r2, [r0, #14]
   134c2:	ea83 030c 	eor.w	r3, r3, ip
   134c6:	7343      	strb	r3, [r0, #13]
   134c8:	7b8b      	ldrb	r3, [r1, #14]
   134ca:	4053      	eors	r3, r2
   134cc:	7383      	strb	r3, [r0, #14]
   134ce:	7bcb      	ldrb	r3, [r1, #15]
   134d0:	7bc2      	ldrb	r2, [r0, #15]
   134d2:	4053      	eors	r3, r2
   134d4:	73c3      	strb	r3, [r0, #15]
  }
}
   134d6:	4770      	bx	lr

000134d8 <WStrReverseCpy>:
/*************************************************************************************************/
void WStrReverseCpy(uint8_t *pBuf1, const uint8_t *pBuf2, uint16_t len)
{
  int16_t i;

  for (i=0; i<len; i++)
   134d8:	b17a      	cbz	r2, 134fa <WStrReverseCpy+0x22>
   134da:	2300      	movs	r3, #0
{
   134dc:	b530      	push	{r4, r5, lr}
  for (i=0; i<len; i++)
   134de:	469c      	mov	ip, r3
  {
    pBuf1[len-1-i] = pBuf2[i];
   134e0:	1e55      	subs	r5, r2, #1
   134e2:	1c5c      	adds	r4, r3, #1
   134e4:	f811 e003 	ldrb.w	lr, [r1, r3]
   134e8:	eba5 0c0c 	sub.w	ip, r5, ip
   134ec:	b223      	sxth	r3, r4
  for (i=0; i<len; i++)
   134ee:	4293      	cmp	r3, r2
    pBuf1[len-1-i] = pBuf2[i];
   134f0:	f800 e00c 	strb.w	lr, [r0, ip]
  for (i=0; i<len; i++)
   134f4:	469c      	mov	ip, r3
   134f6:	dbf4      	blt.n	134e2 <WStrReverseCpy+0xa>
  }
}
   134f8:	bd30      	pop	{r4, r5, pc}
   134fa:	4770      	bx	lr

000134fc <WStrReverse>:
/*************************************************************************************************/
void WStrReverse(uint8_t *pBuf, uint8_t len)
{
  uint8_t i, temp;

  for (i=0; i<len/2; i++)
   134fc:	084b      	lsrs	r3, r1, #1
   134fe:	d00c      	beq.n	1351a <WStrReverse+0x1e>
   13500:	1e5a      	subs	r2, r3, #1
   13502:	4401      	add	r1, r0
   13504:	1e43      	subs	r3, r0, #1
   13506:	fa50 fc82 	uxtab	ip, r0, r2
  {
    temp = pBuf[len-i-1];
    pBuf[len-i-1] = pBuf[i];
   1350a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    temp = pBuf[len-i-1];
   1350e:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
    pBuf[len-i-1] = pBuf[i];
   13512:	7008      	strb	r0, [r1, #0]
  for (i=0; i<len/2; i++)
   13514:	4563      	cmp	r3, ip
    pBuf[i] = temp;
   13516:	701a      	strb	r2, [r3, #0]
  for (i=0; i<len/2; i++)
   13518:	d1f7      	bne.n	1350a <WStrReverse+0xe>
  }
}
   1351a:	4770      	bx	lr

0001351c <l2cDefaultCtrlCback>:
 */
/*************************************************************************************************/
static void l2cDefaultCtrlCback(wsfMsgHdr_t *pMsg)
{
  return;
}
   1351c:	4770      	bx	lr
   1351e:	bf00      	nop

00013520 <l2cHciFlowCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void l2cHciFlowCback(uint16_t handle, bool_t flowDisabled)
{
   13520:	b530      	push	{r4, r5, lr}
   13522:	b083      	sub	sp, #12
   13524:	460c      	mov	r4, r1
  wsfMsgHdr_t hdr;

  /* get conn ID for handle */
  if ((hdr.param = DmConnIdByHandle(handle)) != DM_CONN_ID_NONE)
   13526:	f006 f86f 	bl	19608 <DmConnIdByHandle>
   1352a:	b280      	uxth	r0, r0
   1352c:	f8ad 0004 	strh.w	r0, [sp, #4]
   13530:	b178      	cbz	r0, 13552 <l2cHciFlowCback+0x32>
  {
    /* execute higher layer flow control callbacks */
    hdr.event = flowDisabled;
    (*l2cCb.attCtrlCback)(&hdr);
   13532:	4d09      	ldr	r5, [pc, #36]	; (13558 <l2cHciFlowCback+0x38>)
    hdr.event = flowDisabled;
   13534:	f88d 4006 	strb.w	r4, [sp, #6]
    (*l2cCb.attCtrlCback)(&hdr);
   13538:	68eb      	ldr	r3, [r5, #12]
   1353a:	a801      	add	r0, sp, #4
   1353c:	4798      	blx	r3
    hdr.event = flowDisabled;
    (*l2cCb.smpCtrlCback)(&hdr);
   1353e:	692b      	ldr	r3, [r5, #16]
    hdr.event = flowDisabled;
   13540:	f88d 4006 	strb.w	r4, [sp, #6]
    (*l2cCb.smpCtrlCback)(&hdr);
   13544:	a801      	add	r0, sp, #4
   13546:	4798      	blx	r3

    /* execute connection oriented channel flow control callback */
    hdr.event = flowDisabled;
    (*l2cCb.l2cCocCtrlCback)(&hdr);
   13548:	696b      	ldr	r3, [r5, #20]
    hdr.event = flowDisabled;
   1354a:	f88d 4006 	strb.w	r4, [sp, #6]
    (*l2cCb.l2cCocCtrlCback)(&hdr);
   1354e:	a801      	add	r0, sp, #4
   13550:	4798      	blx	r3
  }
}
   13552:	b003      	add	sp, #12
   13554:	bd30      	pop	{r4, r5, pc}
   13556:	bf00      	nop
   13558:	10004a5c 	.word	0x10004a5c

0001355c <l2cRxSignalingPkt>:
{
   1355c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13560:	4606      	mov	r6, r0
   13562:	460d      	mov	r5, r1
   13564:	4614      	mov	r4, r2
  if ((connId = DmConnIdByHandle(handle)) == DM_CONN_ID_NONE)
   13566:	f006 f84f 	bl	19608 <DmConnIdByHandle>
   1356a:	b908      	cbnz	r0, 13570 <l2cRxSignalingPkt+0x14>
}
   1356c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  role = DmConnRole(connId);
   13570:	f006 f8fe 	bl	19770 <DmConnRole>
  if ((role == DM_ROLE_MASTER) && (l2cCb.masterRxSignalingPkt != NULL))
   13574:	4601      	mov	r1, r0
   13576:	b948      	cbnz	r0, 1358c <l2cRxSignalingPkt+0x30>
   13578:	4a0d      	ldr	r2, [pc, #52]	; (135b0 <l2cRxSignalingPkt+0x54>)
   1357a:	6997      	ldr	r7, [r2, #24]
   1357c:	b147      	cbz	r7, 13590 <l2cRxSignalingPkt+0x34>
    (*l2cCb.slaveRxSignalingPkt)(handle, len, pPacket);
   1357e:	4622      	mov	r2, r4
   13580:	4629      	mov	r1, r5
   13582:	4630      	mov	r0, r6
   13584:	463b      	mov	r3, r7
}
   13586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    (*l2cCb.slaveRxSignalingPkt)(handle, len, pPacket);
   1358a:	4718      	bx	r3
  else if ((role == DM_ROLE_SLAVE) && (l2cCb.slaveRxSignalingPkt != NULL))
   1358c:	2801      	cmp	r0, #1
   1358e:	d004      	beq.n	1359a <l2cRxSignalingPkt+0x3e>
}
   13590:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    L2C_TRACE_ERR1("Invalid role configuration: role=%d", role);
   13594:	4807      	ldr	r0, [pc, #28]	; (135b4 <l2cRxSignalingPkt+0x58>)
   13596:	f7fc bd57 	b.w	10048 <WsfTrace>
  else if ((role == DM_ROLE_SLAVE) && (l2cCb.slaveRxSignalingPkt != NULL))
   1359a:	4a05      	ldr	r2, [pc, #20]	; (135b0 <l2cRxSignalingPkt+0x54>)
   1359c:	69d7      	ldr	r7, [r2, #28]
   1359e:	2f00      	cmp	r7, #0
   135a0:	d0f6      	beq.n	13590 <l2cRxSignalingPkt+0x34>
    (*l2cCb.slaveRxSignalingPkt)(handle, len, pPacket);
   135a2:	4622      	mov	r2, r4
   135a4:	4629      	mov	r1, r5
   135a6:	4630      	mov	r0, r6
   135a8:	463b      	mov	r3, r7
}
   135aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    (*l2cCb.slaveRxSignalingPkt)(handle, len, pPacket);
   135ae:	4718      	bx	r3
   135b0:	10004a5c 	.word	0x10004a5c
   135b4:	0001fe14 	.word	0x0001fe14

000135b8 <l2cDefaultDataCidCback>:
  L2C_TRACE_WARN1("unknown cid=0x%04x", cid);
   135b8:	4801      	ldr	r0, [pc, #4]	; (135c0 <l2cDefaultDataCidCback+0x8>)
   135ba:	f7fc bd45 	b.w	10048 <WsfTrace>
   135be:	bf00      	nop
   135c0:	0001fe38 	.word	0x0001fe38

000135c4 <l2cDefaultDataCback>:
  L2C_TRACE_WARN0("rcvd data on uregistered cid");
   135c4:	4801      	ldr	r0, [pc, #4]	; (135cc <l2cDefaultDataCback+0x8>)
   135c6:	f7fc bd3f 	b.w	10048 <WsfTrace>
   135ca:	bf00      	nop
   135cc:	0001fe4c 	.word	0x0001fe4c

000135d0 <l2cHciAclCback>:
{
   135d0:	b538      	push	{r3, r4, r5, lr}
  BSTREAM_TO_UINT16(hciLen, p);
   135d2:	78c3      	ldrb	r3, [r0, #3]
   135d4:	7882      	ldrb	r2, [r0, #2]
   135d6:	eb02 2203 	add.w	r2, r2, r3, lsl #8
   135da:	b292      	uxth	r2, r2
  if (hciLen >= L2C_HDR_LEN)
   135dc:	2a03      	cmp	r2, #3
{
   135de:	4604      	mov	r4, r0
  if (hciLen >= L2C_HDR_LEN)
   135e0:	d808      	bhi.n	135f4 <l2cHciAclCback+0x24>
  if (hciLen == (l2cLen + L2C_HDR_LEN))
   135e2:	2100      	movs	r1, #0
    L2C_TRACE_WARN2("length mismatch: l2c=%u hci=%u", l2cLen, hciLen);
   135e4:	4826      	ldr	r0, [pc, #152]	; (13680 <l2cHciAclCback+0xb0>)
   135e6:	f7fc fd2f 	bl	10048 <WsfTrace>
  WsfMsgFree(pPacket);
   135ea:	4620      	mov	r0, r4
}
   135ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WsfMsgFree(pPacket);
   135f0:	f7fc b9b2 	b.w	f958 <WsfMsgFree>
    BSTREAM_TO_UINT16(l2cLen, p);
   135f4:	7941      	ldrb	r1, [r0, #5]
   135f6:	f890 c004 	ldrb.w	ip, [r0, #4]
   135fa:	eb0c 2c01 	add.w	ip, ip, r1, lsl #8
   135fe:	fa1f fc8c 	uxth.w	ip, ip
  if (hciLen == (l2cLen + L2C_HDR_LEN))
   13602:	f10c 0304 	add.w	r3, ip, #4
   13606:	429a      	cmp	r2, r3
   13608:	4661      	mov	r1, ip
   1360a:	d1eb      	bne.n	135e4 <l2cHciAclCback+0x14>
    BSTREAM_TO_UINT16(cid, p);
   1360c:	79c1      	ldrb	r1, [r0, #7]
   1360e:	7983      	ldrb	r3, [r0, #6]
  BSTREAM_TO_UINT16(handle, p);
   13610:	7842      	ldrb	r2, [r0, #1]
   13612:	7800      	ldrb	r0, [r0, #0]
    BSTREAM_TO_UINT16(cid, p);
   13614:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   13618:	b29b      	uxth	r3, r3
  BSTREAM_TO_UINT16(handle, p);
   1361a:	eb00 2002 	add.w	r0, r0, r2, lsl #8
    switch (cid)
   1361e:	2b05      	cmp	r3, #5
  handle &= HCI_HANDLE_MASK;
   13620:	f3c0 000b 	ubfx	r0, r0, #0, #12
    switch (cid)
   13624:	d022      	beq.n	1366c <l2cHciAclCback+0x9c>
   13626:	2b06      	cmp	r3, #6
   13628:	d016      	beq.n	13658 <l2cHciAclCback+0x88>
   1362a:	2b04      	cmp	r3, #4
   1362c:	d00a      	beq.n	13644 <l2cHciAclCback+0x74>
        (*l2cCb.l2cDataCidCback)(handle, cid, l2cLen, pPacket);
   1362e:	4915      	ldr	r1, [pc, #84]	; (13684 <l2cHciAclCback+0xb4>)
   13630:	4662      	mov	r2, ip
   13632:	6a0d      	ldr	r5, [r1, #32]
   13634:	4619      	mov	r1, r3
   13636:	4623      	mov	r3, r4
   13638:	47a8      	blx	r5
  WsfMsgFree(pPacket);
   1363a:	4620      	mov	r0, r4
}
   1363c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WsfMsgFree(pPacket);
   13640:	f7fc b98a 	b.w	f958 <WsfMsgFree>
        (*l2cCb.attDataCback)(handle, l2cLen, pPacket);
   13644:	4b0f      	ldr	r3, [pc, #60]	; (13684 <l2cHciAclCback+0xb4>)
   13646:	4622      	mov	r2, r4
   13648:	681b      	ldr	r3, [r3, #0]
   1364a:	4661      	mov	r1, ip
   1364c:	4798      	blx	r3
  WsfMsgFree(pPacket);
   1364e:	4620      	mov	r0, r4
}
   13650:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WsfMsgFree(pPacket);
   13654:	f7fc b980 	b.w	f958 <WsfMsgFree>
        (*l2cCb.smpDataCback)(handle, l2cLen, pPacket);
   13658:	4b0a      	ldr	r3, [pc, #40]	; (13684 <l2cHciAclCback+0xb4>)
   1365a:	4622      	mov	r2, r4
   1365c:	685b      	ldr	r3, [r3, #4]
   1365e:	4661      	mov	r1, ip
   13660:	4798      	blx	r3
  WsfMsgFree(pPacket);
   13662:	4620      	mov	r0, r4
}
   13664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WsfMsgFree(pPacket);
   13668:	f7fc b976 	b.w	f958 <WsfMsgFree>
        (*l2cCb.l2cSignalingCback)(handle, l2cLen, pPacket);
   1366c:	4b05      	ldr	r3, [pc, #20]	; (13684 <l2cHciAclCback+0xb4>)
   1366e:	4622      	mov	r2, r4
   13670:	689b      	ldr	r3, [r3, #8]
   13672:	4661      	mov	r1, ip
   13674:	4798      	blx	r3
  WsfMsgFree(pPacket);
   13676:	4620      	mov	r0, r4
}
   13678:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WsfMsgFree(pPacket);
   1367c:	f7fc b96c 	b.w	f958 <WsfMsgFree>
   13680:	0001fe6c 	.word	0x0001fe6c
   13684:	10004a5c 	.word	0x10004a5c

00013688 <l2cSendCmdReject>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void l2cSendCmdReject(uint16_t handle, uint8_t identifier, uint16_t reason)
{
   13688:	b570      	push	{r4, r5, r6, lr}
   1368a:	4605      	mov	r5, r0
   1368c:	460e      	mov	r6, r1
 *  \return Pointer to data message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *l2cMsgAlloc(uint16_t len)
{
  return WsfMsgDataAlloc(len, HCI_TX_DATA_TAILROOM);
   1368e:	200e      	movs	r0, #14
   13690:	2100      	movs	r1, #0
{
   13692:	4614      	mov	r4, r2
  return WsfMsgDataAlloc(len, HCI_TX_DATA_TAILROOM);
   13694:	f7fc f94e 	bl	f934 <WsfMsgDataAlloc>
  if ((pPacket = l2cMsgAlloc(L2C_SIG_PKT_BASE_LEN + L2C_SIG_CMD_REJ_LEN)) != NULL)
   13698:	b1c8      	cbz	r0, 136ce <l2cSendCmdReject+0x46>
void L2cDataReq(uint16_t cid, uint16_t handle, uint16_t len, uint8_t *pPacket)
{
  uint8_t *p = pPacket;

  /* Set HCI header */
  UINT16_TO_BSTREAM(p, handle);
   1369a:	0a29      	lsrs	r1, r5, #8
    UINT16_TO_BSTREAM(p, L2C_SIG_CMD_REJ_LEN);    /* parameter length */
   1369c:	2202      	movs	r2, #2
   1369e:	7282      	strb	r2, [r0, #10]
    UINT16_TO_BSTREAM(p, reason);                 /* reason */
   136a0:	7304      	strb	r4, [r0, #12]
    UINT16_TO_BSTREAM(p, L2C_SIG_CMD_REJ_LEN);    /* parameter length */
   136a2:	2200      	movs	r2, #0
    UINT16_TO_BSTREAM(p, reason);                 /* reason */
   136a4:	0a24      	lsrs	r4, r4, #8
  UINT16_TO_BSTREAM(p, handle);
   136a6:	7041      	strb	r1, [r0, #1]
  UINT16_TO_BSTREAM(p, (len + L2C_HDR_LEN));

  /* Set L2CAP header */
  UINT16_TO_BSTREAM(p, len);
   136a8:	2106      	movs	r1, #6
    UINT16_TO_BSTREAM(p, L2C_SIG_CMD_REJ_LEN);    /* parameter length */
   136aa:	72c2      	strb	r2, [r0, #11]
    UINT16_TO_BSTREAM(p, reason);                 /* reason */
   136ac:	7344      	strb	r4, [r0, #13]
  UINT16_TO_BSTREAM(p, (len + L2C_HDR_LEN));
   136ae:	70c2      	strb	r2, [r0, #3]
   136b0:	240a      	movs	r4, #10
  UINT16_TO_BSTREAM(p, len);
   136b2:	7101      	strb	r1, [r0, #4]
   136b4:	7142      	strb	r2, [r0, #5]
  UINT16_TO_BSTREAM(p, cid);
   136b6:	71c2      	strb	r2, [r0, #7]
   136b8:	2105      	movs	r1, #5
    UINT8_TO_BSTREAM(p, L2C_SIG_CMD_REJ);         /* command code */
   136ba:	2201      	movs	r2, #1
    UINT8_TO_BSTREAM(p, identifier);              /* identifier */
   136bc:	7246      	strb	r6, [r0, #9]
  UINT16_TO_BSTREAM(p, handle);
   136be:	7005      	strb	r5, [r0, #0]
  UINT16_TO_BSTREAM(p, (len + L2C_HDR_LEN));
   136c0:	7084      	strb	r4, [r0, #2]
  UINT16_TO_BSTREAM(p, cid);
   136c2:	7181      	strb	r1, [r0, #6]
    UINT8_TO_BSTREAM(p, L2C_SIG_CMD_REJ);         /* command code */
   136c4:	7202      	strb	r2, [r0, #8]
}
   136c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  /* Send to HCI */
  HciSendAclData(pPacket);
   136ca:	f7fa bdfb 	b.w	e2c4 <HciSendAclData>
}
   136ce:	bd70      	pop	{r4, r5, r6, pc}

000136d0 <l2cMsgAlloc>:
  return WsfMsgDataAlloc(len, HCI_TX_DATA_TAILROOM);
   136d0:	2100      	movs	r1, #0
   136d2:	f7fc b92f 	b.w	f934 <WsfMsgDataAlloc>
   136d6:	bf00      	nop

000136d8 <L2cInit>:
  l2cCb.attDataCback = l2cDefaultDataCback;
   136d8:	4b0b      	ldr	r3, [pc, #44]	; (13708 <L2cInit+0x30>)
   136da:	490c      	ldr	r1, [pc, #48]	; (1370c <L2cInit+0x34>)
  l2cCb.attCtrlCback = l2cDefaultCtrlCback;
   136dc:	4a0c      	ldr	r2, [pc, #48]	; (13710 <L2cInit+0x38>)
  l2cCb.l2cDataCidCback = l2cDefaultDataCidCback;
   136de:	480d      	ldr	r0, [pc, #52]	; (13714 <L2cInit+0x3c>)
  l2cCb.identifier = 1;
   136e0:	f04f 0c01 	mov.w	ip, #1
{
   136e4:	b410      	push	{r4}
  l2cCb.l2cSignalingCback = l2cRxSignalingPkt;
   136e6:	4c0c      	ldr	r4, [pc, #48]	; (13718 <L2cInit+0x40>)
  l2cCb.identifier = 1;
   136e8:	f883 c024 	strb.w	ip, [r3, #36]	; 0x24
  l2cCb.smpDataCback = l2cDefaultDataCback;
   136ec:	e9c3 1100 	strd	r1, r1, [r3]
  l2cCb.l2cSignalingCback = l2cRxSignalingPkt;
   136f0:	609c      	str	r4, [r3, #8]
  l2cCb.l2cDataCidCback = l2cDefaultDataCidCback;
   136f2:	6218      	str	r0, [r3, #32]
  HciAclRegister(l2cHciAclCback, l2cHciFlowCback);
   136f4:	4909      	ldr	r1, [pc, #36]	; (1371c <L2cInit+0x44>)
   136f6:	480a      	ldr	r0, [pc, #40]	; (13720 <L2cInit+0x48>)
}
   136f8:	f85d 4b04 	ldr.w	r4, [sp], #4
  l2cCb.l2cCocCtrlCback = l2cDefaultCtrlCback;
   136fc:	615a      	str	r2, [r3, #20]
  l2cCb.smpCtrlCback = l2cDefaultCtrlCback;
   136fe:	e9c3 2203 	strd	r2, r2, [r3, #12]
  HciAclRegister(l2cHciAclCback, l2cHciFlowCback);
   13702:	f000 b90d 	b.w	13920 <HciAclRegister>
   13706:	bf00      	nop
   13708:	10004a5c 	.word	0x10004a5c
   1370c:	000135c5 	.word	0x000135c5
   13710:	0001351d 	.word	0x0001351d
   13714:	000135b9 	.word	0x000135b9
   13718:	0001355d 	.word	0x0001355d
   1371c:	00013521 	.word	0x00013521
   13720:	000135d1 	.word	0x000135d1

00013724 <L2cRegister>:
    l2cCb.attDataCback = dataCback;
   13724:	4b03      	ldr	r3, [pc, #12]	; (13734 <L2cRegister+0x10>)
  if (cid == L2C_CID_ATT)
   13726:	2804      	cmp	r0, #4
    l2cCb.attDataCback = dataCback;
   13728:	bf07      	ittee	eq
   1372a:	6019      	streq	r1, [r3, #0]
    l2cCb.attCtrlCback = ctrlCback;
   1372c:	60da      	streq	r2, [r3, #12]
    l2cCb.smpDataCback = dataCback;
   1372e:	6059      	strne	r1, [r3, #4]
    l2cCb.smpCtrlCback = ctrlCback;
   13730:	611a      	strne	r2, [r3, #16]
}
   13732:	4770      	bx	lr
   13734:	10004a5c 	.word	0x10004a5c

00013738 <L2cDataReq>:
  UINT16_TO_BSTREAM(p, handle);
   13738:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1373c:	f883 c001 	strb.w	ip, [r3, #1]
  UINT16_TO_BSTREAM(p, (len + L2C_HDR_LEN));
   13740:	fa5f fc82 	uxtb.w	ip, r2
  UINT16_TO_BSTREAM(p, handle);
   13744:	7019      	strb	r1, [r3, #0]
  UINT16_TO_BSTREAM(p, (len + L2C_HDR_LEN));
   13746:	f10c 0104 	add.w	r1, ip, #4
   1374a:	7099      	strb	r1, [r3, #2]
   1374c:	1d11      	adds	r1, r2, #4
   1374e:	1209      	asrs	r1, r1, #8
  UINT16_TO_BSTREAM(p, len);
   13750:	0a12      	lsrs	r2, r2, #8
  UINT16_TO_BSTREAM(p, (len + L2C_HDR_LEN));
   13752:	70d9      	strb	r1, [r3, #3]
  UINT16_TO_BSTREAM(p, cid);
   13754:	0a01      	lsrs	r1, r0, #8
   13756:	7198      	strb	r0, [r3, #6]
  UINT16_TO_BSTREAM(p, len);
   13758:	f883 c004 	strb.w	ip, [r3, #4]
   1375c:	715a      	strb	r2, [r3, #5]
  UINT16_TO_BSTREAM(p, cid);
   1375e:	71d9      	strb	r1, [r3, #7]
  HciSendAclData(pPacket);
   13760:	4618      	mov	r0, r3
   13762:	f7fa bdaf 	b.w	e2c4 <HciSendAclData>
   13766:	bf00      	nop

00013768 <l2cSlaveRxSignalingPkt>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void l2cSlaveRxSignalingPkt(uint16_t handle, uint16_t l2cLen, uint8_t *pPacket)
{
   13768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t  result;

  /* parse code, len, and identifier */
  pPacket += L2C_PAYLOAD_START;
  BSTREAM_TO_UINT8(code, pPacket);
  BSTREAM_TO_UINT8(id, pPacket);
   1376a:	7a54      	ldrb	r4, [r2, #9]
  BSTREAM_TO_UINT16(len, pPacket);

  /* verify signal identifier is valid */
  if (id == L2C_SIGNAL_ID_INVALID)
   1376c:	b38c      	cbz	r4, 137d2 <l2cSlaveRxSignalingPkt+0x6a>
   1376e:	4605      	mov	r5, r0
  /* verify signal identifier is expected
   * verify signaling length vs. l2c length
   * verify this is a conn param update rsp or command reject
   * verify parameter length
   */
  if ((id == l2cSlaveCb.signId[handle])   &&
   13770:	482a      	ldr	r0, [pc, #168]	; (1381c <l2cSlaveRxSignalingPkt+0xb4>)
  BSTREAM_TO_UINT16(len, pPacket);
   13772:	f892 e00b 	ldrb.w	lr, [r2, #11]
   13776:	f892 c00a 	ldrb.w	ip, [r2, #10]
  BSTREAM_TO_UINT8(code, pPacket);
   1377a:	7a16      	ldrb	r6, [r2, #8]
   1377c:	460b      	mov	r3, r1
  if ((id == l2cSlaveCb.signId[handle])   &&
   1377e:	1941      	adds	r1, r0, r5
  BSTREAM_TO_UINT16(len, pPacket);
   13780:	eb0c 2c0e 	add.w	ip, ip, lr, lsl #8
  if ((id == l2cSlaveCb.signId[handle])   &&
   13784:	f891 e014 	ldrb.w	lr, [r1, #20]
   13788:	45a6      	cmp	lr, r4
  BSTREAM_TO_UINT16(len, pPacket);
   1378a:	fa1f fc8c 	uxth.w	ip, ip
  if ((id == l2cSlaveCb.signId[handle])   &&
   1378e:	d119      	bne.n	137c4 <l2cSlaveRxSignalingPkt+0x5c>
      (l2cLen == (len + L2C_SIG_HDR_LEN)) &&
   13790:	f10c 0e04 	add.w	lr, ip, #4
  if ((id == l2cSlaveCb.signId[handle])   &&
   13794:	4573      	cmp	r3, lr
   13796:	d115      	bne.n	137c4 <l2cSlaveRxSignalingPkt+0x5c>
      (l2cLen == (len + L2C_SIG_HDR_LEN)) &&
   13798:	2e13      	cmp	r6, #19
   1379a:	d01b      	beq.n	137d4 <l2cSlaveRxSignalingPkt+0x6c>
      (((code == L2C_SIG_CONN_UPDATE_RSP) && (len == L2C_SIG_CONN_UPDATE_RSP_LEN)) ||
   1379c:	2e01      	cmp	r6, #1
   1379e:	d11c      	bne.n	137da <l2cSlaveRxSignalingPkt+0x72>
  {
    /* get last sent code */
    uint8_t lastCode = l2cSlaveCb.lastCode[handle];

    /* clear pending signal id */
    l2cSlaveCb.signId[handle] = L2C_SIGNAL_ID_INVALID;
   137a0:	2300      	movs	r3, #0
   137a2:	750b      	strb	r3, [r1, #20]
    uint8_t lastCode = l2cSlaveCb.lastCode[handle];
   137a4:	7c4f      	ldrb	r7, [r1, #17]

    /* parse result parameter */
    BSTREAM_TO_UINT16(result, pPacket);
   137a6:	7b14      	ldrb	r4, [r2, #12]
   137a8:	7b51      	ldrb	r1, [r2, #13]
   137aa:	eb04 2401 	add.w	r4, r4, r1, lsl #8

    /* stop req timer */
    WsfTimerStop(&l2cSlaveCb.reqTimer);
   137ae:	f7fc fbab 	bl	ff08 <WsfTimerStop>

    if (lastCode == L2C_SIG_CONN_UPDATE_REQ)
   137b2:	2f12      	cmp	r7, #18
    BSTREAM_TO_UINT16(result, pPacket);
   137b4:	b2a4      	uxth	r4, r4
    if (lastCode == L2C_SIG_CONN_UPDATE_REQ)
   137b6:	d02f      	beq.n	13818 <l2cSlaveRxSignalingPkt+0xb0>
      DmL2cConnUpdateCnf(handle, result);
    }
    else
    {
      /* send to DM */
      DmL2cCmdRejInd(handle, result);
   137b8:	4621      	mov	r1, r4
   137ba:	4628      	mov	r0, r5
      l2cSendCmdReject(handle, id, L2C_REJ_NOT_UNDERSTOOD);
    }

    return;
  }
}
   137bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      DmL2cCmdRejInd(handle, result);
   137c0:	f006 b846 	b.w	19850 <DmL2cCmdRejInd>
    L2C_TRACE_WARN3("invalid msg code:%d len:%d l2cLen:%d", code, len, l2cLen);
   137c4:	4816      	ldr	r0, [pc, #88]	; (13820 <l2cSlaveRxSignalingPkt+0xb8>)
   137c6:	4662      	mov	r2, ip
   137c8:	4631      	mov	r1, r6
   137ca:	f7fc fc3d 	bl	10048 <WsfTrace>
    if (code != L2C_SIG_CMD_REJ)
   137ce:	2e01      	cmp	r6, #1
   137d0:	d109      	bne.n	137e6 <l2cSlaveRxSignalingPkt+0x7e>
}
   137d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (((code == L2C_SIG_CONN_UPDATE_RSP) && (len == L2C_SIG_CONN_UPDATE_RSP_LEN)) ||
   137d4:	f1bc 0f02 	cmp.w	ip, #2
   137d8:	d00c      	beq.n	137f4 <l2cSlaveRxSignalingPkt+0x8c>
    L2C_TRACE_WARN3("invalid msg code:%d len:%d l2cLen:%d", code, len, l2cLen);
   137da:	4811      	ldr	r0, [pc, #68]	; (13820 <l2cSlaveRxSignalingPkt+0xb8>)
   137dc:	4673      	mov	r3, lr
   137de:	4662      	mov	r2, ip
   137e0:	4631      	mov	r1, r6
   137e2:	f7fc fc31 	bl	10048 <WsfTrace>
      l2cSendCmdReject(handle, id, L2C_REJ_NOT_UNDERSTOOD);
   137e6:	4621      	mov	r1, r4
   137e8:	4628      	mov	r0, r5
   137ea:	2200      	movs	r2, #0
}
   137ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      l2cSendCmdReject(handle, id, L2C_REJ_NOT_UNDERSTOOD);
   137f0:	f7ff bf4a 	b.w	13688 <l2cSendCmdReject>
    l2cSlaveCb.signId[handle] = L2C_SIGNAL_ID_INVALID;
   137f4:	2300      	movs	r3, #0
   137f6:	750b      	strb	r3, [r1, #20]
    uint8_t lastCode = l2cSlaveCb.lastCode[handle];
   137f8:	7c4e      	ldrb	r6, [r1, #17]
    BSTREAM_TO_UINT16(result, pPacket);
   137fa:	7b14      	ldrb	r4, [r2, #12]
   137fc:	7b51      	ldrb	r1, [r2, #13]
   137fe:	eb04 2401 	add.w	r4, r4, r1, lsl #8
    WsfTimerStop(&l2cSlaveCb.reqTimer);
   13802:	f7fc fb81 	bl	ff08 <WsfTimerStop>
    if (lastCode == L2C_SIG_CONN_UPDATE_REQ)
   13806:	2e12      	cmp	r6, #18
    BSTREAM_TO_UINT16(result, pPacket);
   13808:	b2a4      	uxth	r4, r4
    if (lastCode == L2C_SIG_CONN_UPDATE_REQ)
   1380a:	d1d5      	bne.n	137b8 <l2cSlaveRxSignalingPkt+0x50>
      DmL2cConnUpdateCnf(handle, result);
   1380c:	4621      	mov	r1, r4
   1380e:	4628      	mov	r0, r5
}
   13810:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      DmL2cConnUpdateCnf(handle, result);
   13814:	f006 b80c 	b.w	19830 <DmL2cConnUpdateCnf>
        result = L2C_CONN_PARAM_REJECTED;
   13818:	4634      	mov	r4, r6
   1381a:	e7f7      	b.n	1380c <l2cSlaveRxSignalingPkt+0xa4>
   1381c:	10004a84 	.word	0x10004a84
   13820:	0001fe8c 	.word	0x0001fe8c

00013824 <L2cSlaveInit>:
{
  l2cCb.slaveRxSignalingPkt = l2cSlaveRxSignalingPkt;

  for (uint8_t i = 0; i < DM_CONN_MAX; i++)
  {
    l2cSlaveCb.signId[i] = L2C_SIGNAL_ID_INVALID;
   13824:	4b03      	ldr	r3, [pc, #12]	; (13834 <L2cSlaveInit+0x10>)
  l2cCb.slaveRxSignalingPkt = l2cSlaveRxSignalingPkt;
   13826:	4904      	ldr	r1, [pc, #16]	; (13838 <L2cSlaveInit+0x14>)
   13828:	4804      	ldr	r0, [pc, #16]	; (1383c <L2cSlaveInit+0x18>)
   1382a:	61c8      	str	r0, [r1, #28]
    l2cSlaveCb.signId[i] = L2C_SIGNAL_ID_INVALID;
   1382c:	2200      	movs	r2, #0
   1382e:	829a      	strh	r2, [r3, #20]
   13830:	759a      	strb	r2, [r3, #22]
  }
}
   13832:	4770      	bx	lr
   13834:	10004a84 	.word	0x10004a84
   13838:	10004a5c 	.word	0x10004a5c
   1383c:	00013769 	.word	0x00013769

00013840 <L2cDmConnUpdateReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void L2cDmConnUpdateReq(uint16_t handle, hciConnSpec_t *pConnSpec)
{
   13840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t *pPacket;
  uint8_t *p;

  /* record code */
  l2cSlaveCb.lastCode[handle] = L2C_SIG_CONN_UPDATE_REQ;
   13844:	4e20      	ldr	r6, [pc, #128]	; (138c8 <L2cDmConnUpdateReq+0x88>)
   13846:	1837      	adds	r7, r6, r0
   13848:	f04f 0812 	mov.w	r8, #18
{
   1384c:	4605      	mov	r5, r0
   1384e:	460c      	mov	r4, r1

  /* Start signaling request timer and store handle */
  WsfTimerStartSec(&l2cSlaveCb.reqTimer, L2C_SIG_REQ_TIMEOUT);
   13850:	4630      	mov	r0, r6
  l2cSlaveCb.lastCode[handle] = L2C_SIG_CONN_UPDATE_REQ;
   13852:	f887 8011 	strb.w	r8, [r7, #17]
  WsfTimerStartSec(&l2cSlaveCb.reqTimer, L2C_SIG_REQ_TIMEOUT);
   13856:	211e      	movs	r1, #30
   13858:	f7fc fad0 	bl	fdfc <WsfTimerStartSec>
  l2cSlaveCb.reqTimer.msg.param = handle;

  /* allocate msg buffer */
  if ((pPacket = l2cMsgAlloc(L2C_SIG_PKT_BASE_LEN + L2C_SIG_CONN_UPDATE_REQ_LEN)) != NULL)
   1385c:	2014      	movs	r0, #20
  l2cSlaveCb.reqTimer.msg.param = handle;
   1385e:	8135      	strh	r5, [r6, #8]
  if ((pPacket = l2cMsgAlloc(L2C_SIG_PKT_BASE_LEN + L2C_SIG_CONN_UPDATE_REQ_LEN)) != NULL)
   13860:	f7ff ff36 	bl	136d0 <l2cMsgAlloc>
   13864:	b368      	cbz	r0, 138c2 <L2cDmConnUpdateReq+0x82>
  {
    /* build message */
    p = pPacket + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, L2C_SIG_CONN_UPDATE_REQ);       /* command code */
    UINT8_TO_BSTREAM(p, l2cCb.identifier);              /* identifier */
   13866:	4919      	ldr	r1, [pc, #100]	; (138cc <L2cDmConnUpdateReq+0x8c>)
    UINT8_TO_BSTREAM(p, L2C_SIG_CONN_UPDATE_REQ);       /* command code */
   13868:	f880 8008 	strb.w	r8, [r0, #8]
    UINT8_TO_BSTREAM(p, l2cCb.identifier);              /* identifier */
   1386c:	f891 2024 	ldrb.w	r2, [r1, #36]	; 0x24
   13870:	7242      	strb	r2, [r0, #9]
    l2cSlaveCb.signId[handle] = l2cCb.identifier;
    l2cCb.identifier = L2C_NEXT_ID(l2cCb.identifier);
   13872:	2aff      	cmp	r2, #255	; 0xff
    l2cSlaveCb.signId[handle] = l2cCb.identifier;
   13874:	753a      	strb	r2, [r7, #20]
    l2cCb.identifier = L2C_NEXT_ID(l2cCb.identifier);
   13876:	bf1a      	itte	ne
   13878:	3201      	addne	r2, #1
   1387a:	b2d2      	uxtbne	r2, r2
   1387c:	2201      	moveq	r2, #1
   1387e:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
    UINT16_TO_BSTREAM(p, L2C_SIG_CONN_UPDATE_REQ_LEN);  /* parameter length */
   13882:	2108      	movs	r1, #8
   13884:	2200      	movs	r2, #0
   13886:	7281      	strb	r1, [r0, #10]
   13888:	72c2      	strb	r2, [r0, #11]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMin);   /* interval min */
   1388a:	8822      	ldrh	r2, [r4, #0]
   1388c:	7302      	strb	r2, [r0, #12]
   1388e:	8822      	ldrh	r2, [r4, #0]
   13890:	40ca      	lsrs	r2, r1
   13892:	7342      	strb	r2, [r0, #13]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMax);   /* interval max */
   13894:	8862      	ldrh	r2, [r4, #2]
   13896:	7382      	strb	r2, [r0, #14]
   13898:	8862      	ldrh	r2, [r4, #2]
   1389a:	0a12      	lsrs	r2, r2, #8
   1389c:	73c2      	strb	r2, [r0, #15]
    UINT16_TO_BSTREAM(p, pConnSpec->connLatency);       /* slave latency */
   1389e:	88a2      	ldrh	r2, [r4, #4]
   138a0:	7402      	strb	r2, [r0, #16]
   138a2:	88a2      	ldrh	r2, [r4, #4]
   138a4:	0a12      	lsrs	r2, r2, #8
   138a6:	7442      	strb	r2, [r0, #17]
    UINT16_TO_BSTREAM(p, pConnSpec->supTimeout);        /* timeout multiplier */
   138a8:	88e2      	ldrh	r2, [r4, #6]
   138aa:	7482      	strb	r2, [r0, #18]
   138ac:	4603      	mov	r3, r0
   138ae:	88e0      	ldrh	r0, [r4, #6]
   138b0:	0a00      	lsrs	r0, r0, #8
   138b2:	74d8      	strb	r0, [r3, #19]

    /* send packet */
    L2cDataReq(L2C_CID_LE_SIGNALING, handle, (L2C_SIG_HDR_LEN + L2C_SIG_CONN_UPDATE_REQ_LEN), pPacket);
   138b4:	4629      	mov	r1, r5
   138b6:	220c      	movs	r2, #12
  }
}
   138b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    L2cDataReq(L2C_CID_LE_SIGNALING, handle, (L2C_SIG_HDR_LEN + L2C_SIG_CONN_UPDATE_REQ_LEN), pPacket);
   138bc:	2005      	movs	r0, #5
   138be:	f7ff bf3b 	b.w	13738 <L2cDataReq>
}
   138c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   138c6:	bf00      	nop
   138c8:	10004a84 	.word	0x10004a84
   138cc:	10004a5c 	.word	0x10004a5c

000138d0 <L2cSlaveHandlerInit>:
 *  \return None.
 */
/*************************************************************************************************/
void L2cSlaveHandlerInit(wsfHandlerId_t handlerId)
{
  l2cSlaveCb.reqTimer.msg.event = L2C_MSG_REQ_TIMEOUT;
   138d0:	4b02      	ldr	r3, [pc, #8]	; (138dc <L2cSlaveHandlerInit+0xc>)
   138d2:	2201      	movs	r2, #1
   138d4:	729a      	strb	r2, [r3, #10]
  l2cSlaveCb.reqTimer.handlerId = handlerId;
   138d6:	7318      	strb	r0, [r3, #12]
  l2cSlaveCb.handlerId = handlerId;
   138d8:	7418      	strb	r0, [r3, #16]
}
   138da:	4770      	bx	lr
   138dc:	10004a84 	.word	0x10004a84

000138e0 <L2cSlaveHandler>:
 */
/*************************************************************************************************/
void L2cSlaveHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
  /* Handle message */
  if (pMsg != NULL)
   138e0:	b129      	cbz	r1, 138ee <L2cSlaveHandler+0xe>
{
   138e2:	b538      	push	{r3, r4, r5, lr}
  {
    WSF_ASSERT(pMsg->event > 0 && pMsg->event <= L2C_MSG_TYPE_MAX);

    /* handle slave signaling request timeout */
    if (pMsg->event == L2C_MSG_REQ_TIMEOUT)
   138e4:	788d      	ldrb	r5, [r1, #2]
   138e6:	2d01      	cmp	r5, #1
   138e8:	460c      	mov	r4, r1
   138ea:	d001      	beq.n	138f0 <L2cSlaveHandler+0x10>
  /* Handle events */
  else if (event)
  {

  }
}
   138ec:	bd38      	pop	{r3, r4, r5, pc}
   138ee:	4770      	bx	lr
  L2C_TRACE_WARN0("conn update req timeout");
   138f0:	4804      	ldr	r0, [pc, #16]	; (13904 <L2cSlaveHandler+0x24>)
   138f2:	f7fc fba9 	bl	10048 <WsfTrace>
  DmL2cConnUpdateCnf(pMsg->param, L2C_CONN_PARAM_REJECTED);
   138f6:	8820      	ldrh	r0, [r4, #0]
   138f8:	4629      	mov	r1, r5
}
   138fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  DmL2cConnUpdateCnf(pMsg->param, L2C_CONN_PARAM_REJECTED);
   138fe:	f005 bf97 	b.w	19830 <DmL2cConnUpdateCnf>
   13902:	bf00      	nop
   13904:	0001feb4 	.word	0x0001feb4

00013908 <HciEvtRegister>:
 *  \return None.
 */
/*************************************************************************************************/
void HciEvtRegister(hciEvtCback_t evtCback)
{
  hciCb.evtCback = evtCback;
   13908:	4b01      	ldr	r3, [pc, #4]	; (13910 <HciEvtRegister+0x8>)
   1390a:	6098      	str	r0, [r3, #8]
}
   1390c:	4770      	bx	lr
   1390e:	bf00      	nop
   13910:	10004a9c 	.word	0x10004a9c

00013914 <HciSecRegister>:
 *  \return None.
 */
/*************************************************************************************************/
void HciSecRegister(hciSecCback_t secCback)
{
  hciCb.secCback = secCback;
   13914:	4b01      	ldr	r3, [pc, #4]	; (1391c <HciSecRegister+0x8>)
   13916:	60d8      	str	r0, [r3, #12]
}
   13918:	4770      	bx	lr
   1391a:	bf00      	nop
   1391c:	10004a9c 	.word	0x10004a9c

00013920 <HciAclRegister>:
 *  \return None.
 */
/*************************************************************************************************/
void HciAclRegister(hciAclCback_t aclCback, hciFlowCback_t flowCback)
{
  hciCb.aclCback = aclCback;
   13920:	4b01      	ldr	r3, [pc, #4]	; (13928 <HciAclRegister+0x8>)
  hciCb.flowCback = flowCback;
   13922:	e9c3 0104 	strd	r0, r1, [r3, #16]
}
   13926:	4770      	bx	lr
   13928:	10004a9c 	.word	0x10004a9c

0001392c <HciHandlerInit>:
 */
/*************************************************************************************************/
void HciHandlerInit(wsfHandlerId_t handlerId)
{
  /* store handler ID */
  hciCb.handlerId = handlerId;
   1392c:	4b03      	ldr	r3, [pc, #12]	; (1393c <HciHandlerInit+0x10>)

  /* init rx queue */
  WSF_QUEUE_INIT(&hciCb.rxQueue);
   1392e:	2200      	movs	r2, #0
   13930:	e9c3 2200 	strd	r2, r2, [r3]
  hciCb.handlerId = handlerId;
   13934:	7618      	strb	r0, [r3, #24]

  /* perform other hci initialization */
  HciCoreInit();
   13936:	f7fa bc57 	b.w	e1e8 <HciCoreInit>
   1393a:	bf00      	nop
   1393c:	10004a9c 	.word	0x10004a9c

00013940 <HciHandler>:
 *  \return None.
 */
/*************************************************************************************************/
void HciHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
  HciCoreHandler(event, pMsg);
   13940:	f7fa bd76 	b.w	e430 <HciCoreHandler>

00013944 <main>:
main(void)
{
    //
    // Set the clock frequency
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
   13944:	2100      	movs	r1, #0
{
   13946:	b508      	push	{r3, lr}
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
   13948:	4608      	mov	r0, r1
   1394a:	f00a fd61 	bl	1e410 <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
   1394e:	480a      	ldr	r0, [pc, #40]	; (13978 <main+0x34>)
   13950:	f00a fbb6 	bl	1e0c0 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
   13954:	f00a fbd8 	bl	1e108 <am_hal_cachectrl_enable>
#ifndef NOFPU
    //
    // Enable the floating point module, and configure the core for lazy
    // stacking.
    //
    am_hal_sysctrl_fpu_enable();
   13958:	f00b fb94 	bl	1f084 <am_hal_sysctrl_fpu_enable>
    am_hal_sysctrl_fpu_stacking_enable(true);
   1395c:	2001      	movs	r0, #1
   1395e:	f00b fb99 	bl	1f094 <am_hal_sysctrl_fpu_stacking_enable>
#endif

    //
    // Configure the board for low power.
    //
    am_bsp_low_power_init();
   13962:	f00b fbb1 	bl	1f0c8 <am_bsp_low_power_init>
    am_bsp_itm_printf_enable();
   13966:	f00b fbcf 	bl	1f108 <am_bsp_itm_printf_enable>
#endif

    //
    // Initialize plotting interface.
    //
    am_util_debug_printf("FreeRTOS Tx power Control Example\n");
   1396a:	4804      	ldr	r0, [pc, #16]	; (1397c <main+0x38>)
   1396c:	f008 ffc0 	bl	1c8f0 <am_util_stdio_printf>

    //
    // Run the application.
    //
    run_tasks();
   13970:	f000 f976 	bl	13c60 <run_tasks>

    //
    // We shouldn't ever get here.
    //
    while (1)
   13974:	e7fe      	b.n	13974 <main+0x30>
   13976:	bf00      	nop
   13978:	000223b0 	.word	0x000223b0
   1397c:	0001fecc 	.word	0x0001fecc

00013980 <TxPowerCtrlDmCback>:
 */
/*************************************************************************************************/
static void TxPowerCtrlDmCback(dmEvt_t *pDmEvt)
{
  // do nothing
}
   13980:	4770      	bx	lr
   13982:	bf00      	nop

00013984 <button_handler>:
{
   13984:	b570      	push	{r4, r5, r6, lr}
    am_devices_button_array_tick(am_bsp_psButtons, AM_BSP_NUM_BUTTONS);
   13986:	4c28      	ldr	r4, [pc, #160]	; (13a28 <button_handler+0xa4>)
    WsfTimerStartMs(&ButtonTimer, 10);
   13988:	4828      	ldr	r0, [pc, #160]	; (13a2c <button_handler+0xa8>)
   1398a:	210a      	movs	r1, #10
   1398c:	f7fc fa78 	bl	fe80 <WsfTimerStartMs>
    am_devices_button_array_tick(am_bsp_psButtons, AM_BSP_NUM_BUTTONS);
   13990:	2103      	movs	r1, #3
   13992:	4620      	mov	r0, r4
   13994:	f009 f816 	bl	1c9c4 <am_devices_button_array_tick>
    if ( am_devices_button_released(am_bsp_psButtons[0]) )
   13998:	7b25      	ldrb	r5, [r4, #12]
   1399a:	b90d      	cbnz	r5, 139a0 <button_handler+0x1c>
   1399c:	7b63      	ldrb	r3, [r4, #13]
   1399e:	b993      	cbnz	r3, 139c6 <button_handler+0x42>
    if ( am_devices_button_released(am_bsp_psButtons[1]) )
   139a0:	7f25      	ldrb	r5, [r4, #28]
   139a2:	b90d      	cbnz	r5, 139a8 <button_handler+0x24>
   139a4:	7f63      	ldrb	r3, [r4, #29]
   139a6:	b903      	cbnz	r3, 139aa <button_handler+0x26>
}
   139a8:	bd70      	pop	{r4, r5, r6, pc}
        if ( dtm_in_progress )
   139aa:	4c21      	ldr	r4, [pc, #132]	; (13a30 <button_handler+0xac>)
        AppUiBtnTest(APP_UI_BTN_2_SHORT);
   139ac:	2007      	movs	r0, #7
   139ae:	f7fc fb79 	bl	100a4 <AppUiBtnTest>
        if ( dtm_in_progress )
   139b2:	6826      	ldr	r6, [r4, #0]
   139b4:	b1c6      	cbz	r6, 139e8 <button_handler+0x64>
            HciLeTestEndCmd();
   139b6:	f7fa f987 	bl	dcc8 <HciLeTestEndCmd>
            dtm_in_progress = false;
   139ba:	6025      	str	r5, [r4, #0]
            am_util_debug_printf("Transmitter test ended\n");
   139bc:	481d      	ldr	r0, [pc, #116]	; (13a34 <button_handler+0xb0>)
}
   139be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            am_util_debug_printf("Transmitter test ended\n");
   139c2:	f008 bf95 	b.w	1c8f0 <am_util_stdio_printf>
        HciVscSetRfPowerLevelEx(tx_power_level);
   139c6:	4e1c      	ldr	r6, [pc, #112]	; (13a38 <button_handler+0xb4>)
        AppUiBtnTest(APP_UI_BTN_1_SHORT);
   139c8:	2002      	movs	r0, #2
   139ca:	f7fc fb6b 	bl	100a4 <AppUiBtnTest>
        HciVscSetRfPowerLevelEx(tx_power_level);
   139ce:	7830      	ldrb	r0, [r6, #0]
   139d0:	f7f8 ff98 	bl	c904 <HciVscSetRfPowerLevelEx>
        switch ( tx_power_level )
   139d4:	7833      	ldrb	r3, [r6, #0]
   139d6:	2b01      	cmp	r3, #1
   139d8:	d014      	beq.n	13a04 <button_handler+0x80>
   139da:	2b02      	cmp	r3, #2
   139dc:	d018      	beq.n	13a10 <button_handler+0x8c>
   139de:	b1e3      	cbz	r3, 13a1a <button_handler+0x96>
                am_util_debug_printf("Invalid Tx power level\n");
   139e0:	4816      	ldr	r0, [pc, #88]	; (13a3c <button_handler+0xb8>)
   139e2:	f008 ff85 	bl	1c8f0 <am_util_stdio_printf>
                break;
   139e6:	e7db      	b.n	139a0 <button_handler+0x1c>
            HciResetCmd();
   139e8:	f7f9 fee4 	bl	d7b4 <HciResetCmd>
            HciLeTransmitterTestCmd(0, 255, 7);
   139ec:	4630      	mov	r0, r6
   139ee:	2207      	movs	r2, #7
   139f0:	21ff      	movs	r1, #255	; 0xff
   139f2:	f7fa f931 	bl	dc58 <HciLeTransmitterTestCmd>
            dtm_in_progress = true;
   139f6:	2301      	movs	r3, #1
   139f8:	6023      	str	r3, [r4, #0]
            am_util_debug_printf("Transmitter test started\n");
   139fa:	4811      	ldr	r0, [pc, #68]	; (13a40 <button_handler+0xbc>)
}
   139fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            am_util_debug_printf("Transmitter test started\n");
   13a00:	f008 bf76 	b.w	1c8f0 <am_util_stdio_printf>
                am_util_debug_printf("Current Tx Power is 0.0 dBm\n");
   13a04:	480f      	ldr	r0, [pc, #60]	; (13a44 <button_handler+0xc0>)
   13a06:	f008 ff73 	bl	1c8f0 <am_util_stdio_printf>
                tx_power_level = TX_POWER_LEVEL_PLUS_3P0_dBm;
   13a0a:	2302      	movs	r3, #2
   13a0c:	7033      	strb	r3, [r6, #0]
                break;
   13a0e:	e7c7      	b.n	139a0 <button_handler+0x1c>
                am_util_debug_printf("Current Tx Power is +3.0 dBm\n");
   13a10:	480d      	ldr	r0, [pc, #52]	; (13a48 <button_handler+0xc4>)
   13a12:	f008 ff6d 	bl	1c8f0 <am_util_stdio_printf>
                tx_power_level = TX_POWER_LEVEL_MINUS_10P0_dBm;
   13a16:	7035      	strb	r5, [r6, #0]
                break;
   13a18:	e7c2      	b.n	139a0 <button_handler+0x1c>
                am_util_debug_printf("Current Tx Power is -10.0 dBm\n");
   13a1a:	480c      	ldr	r0, [pc, #48]	; (13a4c <button_handler+0xc8>)
   13a1c:	f008 ff68 	bl	1c8f0 <am_util_stdio_printf>
                tx_power_level = TX_POWER_LEVEL_0P0_dBm;
   13a20:	2301      	movs	r3, #1
   13a22:	7033      	strb	r3, [r6, #0]
                break;
   13a24:	e7bc      	b.n	139a0 <button_handler+0x1c>
   13a26:	bf00      	nop
   13a28:	10003d8c 	.word	0x10003d8c
   13a2c:	10004abc 	.word	0x10004abc
   13a30:	10004acc 	.word	0x10004acc
   13a34:	0001ff68 	.word	0x0001ff68
   13a38:	10002b24 	.word	0x10002b24
   13a3c:	0001ff50 	.word	0x0001ff50
   13a40:	0001ff80 	.word	0x0001ff80
   13a44:	0001ff10 	.word	0x0001ff10
   13a48:	0001ff30 	.word	0x0001ff30
   13a4c:	0001fef0 	.word	0x0001fef0

00013a50 <setup_buttons>:
{
   13a50:	b508      	push	{r3, lr}
    am_devices_button_array_init(am_bsp_psButtons, AM_BSP_NUM_BUTTONS);
   13a52:	4806      	ldr	r0, [pc, #24]	; (13a6c <setup_buttons+0x1c>)
   13a54:	2103      	movs	r1, #3
   13a56:	f008 ff99 	bl	1c98c <am_devices_button_array_init>
    ButtonTimer.handlerId = ButtonHandlerId;
   13a5a:	4b05      	ldr	r3, [pc, #20]	; (13a70 <setup_buttons+0x20>)
   13a5c:	4805      	ldr	r0, [pc, #20]	; (13a74 <setup_buttons+0x24>)
   13a5e:	781b      	ldrb	r3, [r3, #0]
   13a60:	7303      	strb	r3, [r0, #12]
}
   13a62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    WsfTimerStartSec(&ButtonTimer, 2);
   13a66:	2102      	movs	r1, #2
   13a68:	f7fc b9c8 	b.w	fdfc <WsfTimerStartSec>
   13a6c:	10003d8c 	.word	0x10003d8c
   13a70:	10004ab8 	.word	0x10004ab8
   13a74:	10004abc 	.word	0x10004abc

00013a78 <exactle_stack_init>:
{
   13a78:	b510      	push	{r4, lr}
    WsfOsInit();
   13a7a:	f7fc f869 	bl	fb50 <WsfOsInit>
    WsfTimerInit();
   13a7e:	f7fc f997 	bl	fdb0 <WsfTimerInit>
    wsfBufMemLen = WsfBufInit(sizeof(g_pui32BufMem), (uint8_t *)g_pui32BufMem, WSF_BUF_POOLS,
   13a82:	4b33      	ldr	r3, [pc, #204]	; (13b50 <exactle_stack_init+0xd8>)
   13a84:	4933      	ldr	r1, [pc, #204]	; (13b54 <exactle_stack_init+0xdc>)
   13a86:	2204      	movs	r2, #4
   13a88:	f44f 6038 	mov.w	r0, #2944	; 0xb80
   13a8c:	f7fb fe90 	bl	f7b0 <WsfBufInit>
    if (wsfBufMemLen > sizeof(g_pui32BufMem))
   13a90:	f5b0 6f38 	cmp.w	r0, #2944	; 0xb80
   13a94:	d854      	bhi.n	13b40 <exactle_stack_init+0xc8>
    SecInit();
   13a96:	f002 fb85 	bl	161a4 <SecInit>
    SecAesInit();
   13a9a:	f002 f96b 	bl	15d74 <SecAesInit>
    SecCmacInit();
   13a9e:	f002 fb1b 	bl	160d8 <SecCmacInit>
    SecEccInit();
   13aa2:	f7ff fc75 	bl	13390 <SecEccInit>
    handlerId = WsfOsSetNextHandler(HciHandler);
   13aa6:	482c      	ldr	r0, [pc, #176]	; (13b58 <exactle_stack_init+0xe0>)
   13aa8:	f7fc f846 	bl	fb38 <WsfOsSetNextHandler>
    HciHandlerInit(handlerId);
   13aac:	f7ff ff3e 	bl	1392c <HciHandlerInit>
    handlerId = WsfOsSetNextHandler(DmHandler);
   13ab0:	482a      	ldr	r0, [pc, #168]	; (13b5c <exactle_stack_init+0xe4>)
   13ab2:	f7fc f841 	bl	fb38 <WsfOsSetNextHandler>
   13ab6:	4604      	mov	r4, r0
    DmDevVsInit(0);
   13ab8:	2000      	movs	r0, #0
   13aba:	f005 ffc5 	bl	19a48 <DmDevVsInit>
    DmAdvInit();
   13abe:	f005 f9db 	bl	18e78 <DmAdvInit>
    DmConnInit();
   13ac2:	f005 fd7b 	bl	195bc <DmConnInit>
    DmConnSlaveInit();
   13ac6:	f005 ff09 	bl	198dc <DmConnSlaveInit>
    DmSecInit();
   13aca:	f006 fa4d 	bl	19f68 <DmSecInit>
    DmSecLescInit();
   13ace:	f006 fa99 	bl	1a004 <DmSecLescInit>
    DmPrivInit();
   13ad2:	f006 f983 	bl	19ddc <DmPrivInit>
    DmHandlerInit(handlerId);
   13ad6:	4620      	mov	r0, r4
   13ad8:	f005 fff4 	bl	19ac4 <DmHandlerInit>
    handlerId = WsfOsSetNextHandler(L2cSlaveHandler);
   13adc:	4820      	ldr	r0, [pc, #128]	; (13b60 <exactle_stack_init+0xe8>)
   13ade:	f7fc f82b 	bl	fb38 <WsfOsSetNextHandler>
    L2cSlaveHandlerInit(handlerId);
   13ae2:	f7ff fef5 	bl	138d0 <L2cSlaveHandlerInit>
    L2cInit();
   13ae6:	f7ff fdf7 	bl	136d8 <L2cInit>
    L2cSlaveInit();
   13aea:	f7ff fe9b 	bl	13824 <L2cSlaveInit>
    handlerId = WsfOsSetNextHandler(AttHandler);
   13aee:	481d      	ldr	r0, [pc, #116]	; (13b64 <exactle_stack_init+0xec>)
   13af0:	f7fc f822 	bl	fb38 <WsfOsSetNextHandler>
    AttHandlerInit(handlerId);
   13af4:	f004 ff74 	bl	189e0 <AttHandlerInit>
    AttsInit();
   13af8:	f003 fd86 	bl	17608 <AttsInit>
    AttsIndInit();
   13afc:	f003 fba0 	bl	17240 <AttsIndInit>
    AttcInit();
   13b00:	f002 ff52 	bl	169a8 <AttcInit>
    handlerId = WsfOsSetNextHandler(SmpHandler);
   13b04:	4818      	ldr	r0, [pc, #96]	; (13b68 <exactle_stack_init+0xf0>)
   13b06:	f7fc f817 	bl	fb38 <WsfOsSetNextHandler>
    SmpHandlerInit(handlerId);
   13b0a:	f7fe fbc5 	bl	12298 <SmpHandlerInit>
    SmprInit();
   13b0e:	f7fd f9ff 	bl	10f10 <SmprInit>
    SmprScInit();
   13b12:	f7fd f9f3 	bl	10efc <SmprScInit>
    HciSetMaxRxAclLen(251);
   13b16:	20fb      	movs	r0, #251	; 0xfb
   13b18:	f7fa fbce 	bl	e2b8 <HciSetMaxRxAclLen>
    handlerId = WsfOsSetNextHandler(AppHandler);
   13b1c:	4813      	ldr	r0, [pc, #76]	; (13b6c <exactle_stack_init+0xf4>)
   13b1e:	f7fc f80b 	bl	fb38 <WsfOsSetNextHandler>
    AppHandlerInit(handlerId);
   13b22:	f008 feff 	bl	1c924 <AppHandlerInit>
    ButtonHandlerId = WsfOsSetNextHandler(button_handler);
   13b26:	4812      	ldr	r0, [pc, #72]	; (13b70 <exactle_stack_init+0xf8>)
   13b28:	f7fc f806 	bl	fb38 <WsfOsSetNextHandler>
   13b2c:	4b11      	ldr	r3, [pc, #68]	; (13b74 <exactle_stack_init+0xfc>)
   13b2e:	4602      	mov	r2, r0
    handlerId = WsfOsSetNextHandler(HciDrvHandler);
   13b30:	4811      	ldr	r0, [pc, #68]	; (13b78 <exactle_stack_init+0x100>)
    ButtonHandlerId = WsfOsSetNextHandler(button_handler);
   13b32:	701a      	strb	r2, [r3, #0]
    handlerId = WsfOsSetNextHandler(HciDrvHandler);
   13b34:	f7fc f800 	bl	fb38 <WsfOsSetNextHandler>
}
   13b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HciDrvHandlerInit(handlerId);
   13b3c:	f7f8 bd58 	b.w	c5f0 <HciDrvHandlerInit>
        am_util_debug_printf("Memory pool is too small by %d\r\n",
   13b40:	4601      	mov	r1, r0
   13b42:	f5a1 6138 	sub.w	r1, r1, #2944	; 0xb80
   13b46:	480d      	ldr	r0, [pc, #52]	; (13b7c <exactle_stack_init+0x104>)
   13b48:	f008 fed2 	bl	1c8f0 <am_util_stdio_printf>
   13b4c:	e7a3      	b.n	13a96 <exactle_stack_init+0x1e>
   13b4e:	bf00      	nop
   13b50:	10002b14 	.word	0x10002b14
   13b54:	10004ad0 	.word	0x10004ad0
   13b58:	00013941 	.word	0x00013941
   13b5c:	00019ae1 	.word	0x00019ae1
   13b60:	000138e1 	.word	0x000138e1
   13b64:	00018a19 	.word	0x00018a19
   13b68:	000122fd 	.word	0x000122fd
   13b6c:	0001c931 	.word	0x0001c931
   13b70:	00013985 	.word	0x00013985
   13b74:	10004ab8 	.word	0x10004ab8
   13b78:	0000c651 	.word	0x0000c651
   13b7c:	0001ff9c 	.word	0x0001ff9c

00013b80 <am_uart_isr>:
    ui32Status = UARTn(0)->MIS;
   13b80:	4b01      	ldr	r3, [pc, #4]	; (13b88 <am_uart_isr+0x8>)
   13b82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    UARTn(0)->IEC = ui32Status;
   13b84:	645a      	str	r2, [r3, #68]	; 0x44
}
   13b86:	4770      	bx	lr
   13b88:	4001c000 	.word	0x4001c000

00013b8c <am_ble_isr>:
    HciDrvIntService();
   13b8c:	f7f8 bd44 	b.w	c618 <HciDrvIntService>

00013b90 <RadioTaskSetup>:
// Perform initial setup for the radio task.
//
//*****************************************************************************
void
RadioTaskSetup(void)
{
   13b90:	b508      	push	{r3, lr}
    am_util_debug_printf("RadioTask: setup\r\n");
   13b92:	4804      	ldr	r0, [pc, #16]	; (13ba4 <RadioTaskSetup+0x14>)
   13b94:	f008 feac 	bl	1c8f0 <am_util_stdio_printf>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13b98:	4b03      	ldr	r3, [pc, #12]	; (13ba8 <RadioTaskSetup+0x18>)
   13b9a:	2280      	movs	r2, #128	; 0x80
   13b9c:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c


    NVIC_SetPriority(BLE_IRQn, NVIC_configMAX_SYSCALL_INTERRUPT_PRIORITY);


}
   13ba0:	bd08      	pop	{r3, pc}
   13ba2:	bf00      	nop
   13ba4:	0001ffc0 	.word	0x0001ffc0
   13ba8:	e000e100 	.word	0xe000e100

00013bac <RadioTask>:
// Short Description.
//
//*****************************************************************************
void
RadioTask(void *pvParameters)
{
   13bac:	b508      	push	{r3, lr}
#if WSF_TRACE_ENABLED == TRUE
    //
    // Enable ITM
    //
    am_util_debug_printf("Starting wicentric trace:\n\n");
   13bae:	480c      	ldr	r0, [pc, #48]	; (13be0 <RadioTask+0x34>)
   13bb0:	f008 fe9e 	bl	1c8f0 <am_util_stdio_printf>
#endif
    //
    // Boot the radio.
    //
    HciDrvRadioBoot(1);
   13bb4:	2001      	movs	r0, #1
   13bb6:	f7f8 fb8d 	bl	c2d4 <HciDrvRadioBoot>


    //
    // Initialize the main ExactLE stack.
    //
    exactle_stack_init();
   13bba:	f7ff ff5d 	bl	13a78 <exactle_stack_init>

    //
    // Prep the buttons for use
    //

    setup_buttons();
   13bbe:	f7ff ff47 	bl	13a50 <setup_buttons>

    //
    // Need to register DM callback for Vendor specific command's event
    //

    DmRegister(TxPowerCtrlDmCback);
   13bc2:	4808      	ldr	r0, [pc, #32]	; (13be4 <RadioTask+0x38>)
   13bc4:	f005 ff62 	bl	19a8c <DmRegister>

    am_util_debug_printf("Usage as below:\n");
   13bc8:	4807      	ldr	r0, [pc, #28]	; (13be8 <RadioTask+0x3c>)
   13bca:	f008 fe91 	bl	1c8f0 <am_util_stdio_printf>
    am_util_debug_printf("Short press Button 2 to enter/exit DTM tx test\n");
   13bce:	4807      	ldr	r0, [pc, #28]	; (13bec <RadioTask+0x40>)
   13bd0:	f008 fe8e 	bl	1c8f0 <am_util_stdio_printf>
    am_util_debug_printf("Short press Button 1 to change tx power level from high to low.\n");
   13bd4:	4806      	ldr	r0, [pc, #24]	; (13bf0 <RadioTask+0x44>)
   13bd6:	f008 fe8b 	bl	1c8f0 <am_util_stdio_printf>

        //
        // Calculate the elapsed time from our free-running timer, and update
        // the software timers in the WSF scheduler.
        //
        wsfOsDispatcher();
   13bda:	f7fb ffcb 	bl	fb74 <wsfOsDispatcher>
    while (1)
   13bde:	e7fc      	b.n	13bda <RadioTask+0x2e>
   13be0:	0001ffd4 	.word	0x0001ffd4
   13be4:	00013981 	.word	0x00013981
   13be8:	0001fff0 	.word	0x0001fff0
   13bec:	00020004 	.word	0x00020004
   13bf0:	00020034 	.word	0x00020034

00013bf4 <setup_task>:
// features.
//
//*****************************************************************************
void
setup_task(void *pvParameters)
{
   13bf4:	b500      	push	{lr}
    //
    // Print a debug message.
    //
    am_util_debug_printf("Running setup tasks...\r\n");
   13bf6:	480a      	ldr	r0, [pc, #40]	; (13c20 <setup_task+0x2c>)
{
   13bf8:	b083      	sub	sp, #12
    am_util_debug_printf("Running setup tasks...\r\n");
   13bfa:	f008 fe79 	bl	1c8f0 <am_util_stdio_printf>

    //
    // Run setup functions.
    //
    RadioTaskSetup();
   13bfe:	f7ff ffc7 	bl	13b90 <RadioTaskSetup>

    //
    // Create the functional tasks
    //
    xTaskCreate(RadioTask, "RadioTask", 512, 0, 3, &radio_task_handle);
   13c02:	4a08      	ldr	r2, [pc, #32]	; (13c24 <setup_task+0x30>)
   13c04:	4908      	ldr	r1, [pc, #32]	; (13c28 <setup_task+0x34>)
   13c06:	4809      	ldr	r0, [pc, #36]	; (13c2c <setup_task+0x38>)
   13c08:	2303      	movs	r3, #3
   13c0a:	e9cd 3200 	strd	r3, r2, [sp]
   13c0e:	2300      	movs	r3, #0
   13c10:	f44f 7200 	mov.w	r2, #512	; 0x200
   13c14:	f006 ffba 	bl	1ab8c <xTaskCreate>

    //
    // The setup operations are complete, so suspend the setup task now.
    //
    vTaskSuspend(NULL);
   13c18:	2000      	movs	r0, #0
   13c1a:	f007 f8e7 	bl	1adec <vTaskSuspend>

    while (1);
   13c1e:	e7fe      	b.n	13c1e <setup_task+0x2a>
   13c20:	00020078 	.word	0x00020078
   13c24:	10005650 	.word	0x10005650
   13c28:	00020094 	.word	0x00020094
   13c2c:	00013bad 	.word	0x00013bad

00013c30 <am_ctimer_isr>:
{
   13c30:	b510      	push	{r4, lr}
    ui32Status = am_hal_ctimer_int_status_get(false);
   13c32:	2000      	movs	r0, #0
   13c34:	f00a fcd0 	bl	1e5d8 <am_hal_ctimer_int_status_get>
   13c38:	4604      	mov	r4, r0
    am_hal_ctimer_int_clear(ui32Status);
   13c3a:	f00a fcbb 	bl	1e5b4 <am_hal_ctimer_int_clear>
    am_hal_ctimer_int_service(ui32Status);
   13c3e:	4620      	mov	r0, r4
}
   13c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    am_hal_ctimer_int_service(ui32Status);
   13c44:	f00a bc9e 	b.w	1e584 <am_hal_ctimer_int_service>

00013c48 <am_freertos_sleep>:
{
   13c48:	b508      	push	{r3, lr}
    am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
   13c4a:	2001      	movs	r0, #1
   13c4c:	f00b f9e2 	bl	1f014 <am_hal_sysctrl_sleep>
}
   13c50:	2000      	movs	r0, #0
   13c52:	bd08      	pop	{r3, pc}

00013c54 <am_freertos_wakeup>:
}
   13c54:	4770      	bx	lr
   13c56:	bf00      	nop

00013c58 <vApplicationMallocFailedHook>:
    while (1);
   13c58:	e7fe      	b.n	13c58 <vApplicationMallocFailedHook>
   13c5a:	bf00      	nop

00013c5c <vApplicationStackOverflowHook>:
        __asm("BKPT #0\n") ; // Break into the debugger
   13c5c:	be00      	bkpt	0x0000
    while (1)
   13c5e:	e7fd      	b.n	13c5c <vApplicationStackOverflowHook>

00013c60 <run_tasks>:
// Initializes all tasks
//
//*****************************************************************************
void
run_tasks(void)
{
   13c60:	b500      	push	{lr}
    //

    //
    // Create essential tasks.
    //
    xTaskCreate(setup_task, "Setup", 512, 0, 3, &xSetupTask);
   13c62:	4a08      	ldr	r2, [pc, #32]	; (13c84 <run_tasks+0x24>)
   13c64:	4908      	ldr	r1, [pc, #32]	; (13c88 <run_tasks+0x28>)
   13c66:	4809      	ldr	r0, [pc, #36]	; (13c8c <run_tasks+0x2c>)
{
   13c68:	b083      	sub	sp, #12
    xTaskCreate(setup_task, "Setup", 512, 0, 3, &xSetupTask);
   13c6a:	2303      	movs	r3, #3
   13c6c:	e9cd 3200 	strd	r3, r2, [sp]
   13c70:	2300      	movs	r3, #0
   13c72:	f44f 7200 	mov.w	r2, #512	; 0x200
   13c76:	f006 ff89 	bl	1ab8c <xTaskCreate>

    //
    // Start the scheduler.
    //
    vTaskStartScheduler();
}
   13c7a:	b003      	add	sp, #12
   13c7c:	f85d eb04 	ldr.w	lr, [sp], #4
    vTaskStartScheduler();
   13c80:	f007 b924 	b.w	1aecc <vTaskStartScheduler>
   13c84:	10005654 	.word	0x10005654
   13c88:	000200a0 	.word	0x000200a0
   13c8c:	00013bf5 	.word	0x00013bf5

00013c90 <default_RNG>:

#else /* Some other platform */

static int default_RNG(uint8_t *dest, unsigned size) {
    return 0;
}
   13c90:	2000      	movs	r0, #0
   13c92:	4770      	bx	lr

00013c94 <vli_add>:
static uint32_t vli_add(uint32_t *result, const uint32_t *left, const uint32_t *right) {
    uint32_t carry = 0;
    uint32_t left_word;
    uint32_t right_word;

    __asm__ volatile (
   13c94:	2300      	movs	r3, #0
static uint32_t vli_add(uint32_t *result, const uint32_t *left, const uint32_t *right) {
   13c96:	b500      	push	{lr}
    __asm__ volatile (
   13c98:	4684      	mov	ip, r0
   13c9a:	4618      	mov	r0, r3
   13c9c:	c908      	ldmia	r1!, {r3}
   13c9e:	f852 eb04 	ldr.w	lr, [r2], #4
   13ca2:	eb13 030e 	adds.w	r3, r3, lr
   13ca6:	f84c 3b04 	str.w	r3, [ip], #4
   13caa:	c908      	ldmia	r1!, {r3}
   13cac:	f852 eb04 	ldr.w	lr, [r2], #4
   13cb0:	eb53 030e 	adcs.w	r3, r3, lr
   13cb4:	f84c 3b04 	str.w	r3, [ip], #4
   13cb8:	c908      	ldmia	r1!, {r3}
   13cba:	f852 eb04 	ldr.w	lr, [r2], #4
   13cbe:	eb53 030e 	adcs.w	r3, r3, lr
   13cc2:	f84c 3b04 	str.w	r3, [ip], #4
   13cc6:	c908      	ldmia	r1!, {r3}
   13cc8:	f852 eb04 	ldr.w	lr, [r2], #4
   13ccc:	eb53 030e 	adcs.w	r3, r3, lr
   13cd0:	f84c 3b04 	str.w	r3, [ip], #4
   13cd4:	c908      	ldmia	r1!, {r3}
   13cd6:	f852 eb04 	ldr.w	lr, [r2], #4
   13cda:	eb53 030e 	adcs.w	r3, r3, lr
   13cde:	f84c 3b04 	str.w	r3, [ip], #4
   13ce2:	c908      	ldmia	r1!, {r3}
   13ce4:	f852 eb04 	ldr.w	lr, [r2], #4
   13ce8:	eb53 030e 	adcs.w	r3, r3, lr
   13cec:	f84c 3b04 	str.w	r3, [ip], #4
   13cf0:	c908      	ldmia	r1!, {r3}
   13cf2:	f852 eb04 	ldr.w	lr, [r2], #4
   13cf6:	eb53 030e 	adcs.w	r3, r3, lr
   13cfa:	f84c 3b04 	str.w	r3, [ip], #4
   13cfe:	c908      	ldmia	r1!, {r3}
   13d00:	f852 eb04 	ldr.w	lr, [r2], #4
   13d04:	eb53 030e 	adcs.w	r3, r3, lr
   13d08:	f84c 3b04 	str.w	r3, [ip], #4
   13d0c:	4140      	adcs	r0, r0
    #endif
        :
        : "cc", "memory"
    );
    return carry;
}
   13d0e:	f85d fb04 	ldr.w	pc, [sp], #4
   13d12:	bf00      	nop

00013d14 <vli_sub>:
#define asm_add 1

static uint32_t vli_sub(uint32_t *result, const uint32_t *left, const uint32_t *right) {
   13d14:	b500      	push	{lr}
    uint32_t carry = 0;
    uint32_t left_word;
    uint32_t right_word;

    __asm__ volatile (
   13d16:	2300      	movs	r3, #0
   13d18:	f851 cb04 	ldr.w	ip, [r1], #4
   13d1c:	f852 eb04 	ldr.w	lr, [r2], #4
   13d20:	ebbc 0c0e 	subs.w	ip, ip, lr
   13d24:	f840 cb04 	str.w	ip, [r0], #4
   13d28:	f851 cb04 	ldr.w	ip, [r1], #4
   13d2c:	f852 eb04 	ldr.w	lr, [r2], #4
   13d30:	eb7c 0c0e 	sbcs.w	ip, ip, lr
   13d34:	f840 cb04 	str.w	ip, [r0], #4
   13d38:	f851 cb04 	ldr.w	ip, [r1], #4
   13d3c:	f852 eb04 	ldr.w	lr, [r2], #4
   13d40:	eb7c 0c0e 	sbcs.w	ip, ip, lr
   13d44:	f840 cb04 	str.w	ip, [r0], #4
   13d48:	f851 cb04 	ldr.w	ip, [r1], #4
   13d4c:	f852 eb04 	ldr.w	lr, [r2], #4
   13d50:	eb7c 0c0e 	sbcs.w	ip, ip, lr
   13d54:	f840 cb04 	str.w	ip, [r0], #4
   13d58:	f851 cb04 	ldr.w	ip, [r1], #4
   13d5c:	f852 eb04 	ldr.w	lr, [r2], #4
   13d60:	eb7c 0c0e 	sbcs.w	ip, ip, lr
   13d64:	f840 cb04 	str.w	ip, [r0], #4
   13d68:	f851 cb04 	ldr.w	ip, [r1], #4
   13d6c:	f852 eb04 	ldr.w	lr, [r2], #4
   13d70:	eb7c 0c0e 	sbcs.w	ip, ip, lr
   13d74:	f840 cb04 	str.w	ip, [r0], #4
   13d78:	f851 cb04 	ldr.w	ip, [r1], #4
   13d7c:	f852 eb04 	ldr.w	lr, [r2], #4
   13d80:	eb7c 0c0e 	sbcs.w	ip, ip, lr
   13d84:	f840 cb04 	str.w	ip, [r0], #4
   13d88:	f851 cb04 	ldr.w	ip, [r1], #4
   13d8c:	f852 eb04 	ldr.w	lr, [r2], #4
   13d90:	eb7c 0c0e 	sbcs.w	ip, ip, lr
   13d94:	f840 cb04 	str.w	ip, [r0], #4
   13d98:	415b      	adcs	r3, r3
        :
        : "cc", "memory"
    );
    return !carry; // note that on ARM, carry flag set means "no borrow" when subtracting
                   // (for some reason...)
}
   13d9a:	fab3 f083 	clz	r0, r3
   13d9e:	0940      	lsrs	r0, r0, #5
   13da0:	f85d fb04 	ldr.w	pc, [sp], #4

00013da4 <vli_mult>:
}
#define asm_mult 1
#endif /* (uECC_WORDS == 7) */

#if (uECC_WORDS == 8)
static void vli_mult(uint32_t *result, const uint32_t *left, const uint32_t *right) {
   13da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    register uint32_t *r0 __asm__("r0") = result;
    register const uint32_t *r1 __asm__("r1") = left;
    register const uint32_t *r2 __asm__("r2") = right;

    __asm__ volatile (
   13da8:	f100 0018 	add.w	r0, r0, #24
   13dac:	f102 0218 	add.w	r2, r2, #24
   13db0:	c918      	ldmia	r1!, {r3, r4}
   13db2:	cac0      	ldmia	r2!, {r6, r7}
   13db4:	fba3 bc06 	umull	fp, ip, r3, r6
   13db8:	f840 bb04 	str.w	fp, [r0], #4
   13dbc:	f04f 0a00 	mov.w	sl, #0
   13dc0:	fba3 b907 	umull	fp, r9, r3, r7
   13dc4:	eb1c 0c0b 	adds.w	ip, ip, fp
   13dc8:	f149 0900 	adc.w	r9, r9, #0
   13dcc:	fba4 be06 	umull	fp, lr, r4, r6
   13dd0:	eb1c 0c0b 	adds.w	ip, ip, fp
   13dd4:	eb59 090e 	adcs.w	r9, r9, lr
   13dd8:	f14a 0a00 	adc.w	sl, sl, #0
   13ddc:	f840 cb04 	str.w	ip, [r0], #4
   13de0:	fba4 ce07 	umull	ip, lr, r4, r7
   13de4:	eb19 090c 	adds.w	r9, r9, ip
   13de8:	eb4a 0a0e 	adc.w	sl, sl, lr
   13dec:	e8a0 0600 	stmia.w	r0!, {r9, sl}
   13df0:	f1a0 001c 	sub.w	r0, r0, #28
   13df4:	f1a2 0214 	sub.w	r2, r2, #20
   13df8:	e8b2 01c0 	ldmia.w	r2!, {r6, r7, r8}
   13dfc:	c920      	ldmia	r1!, {r5}
   13dfe:	fba3 bc06 	umull	fp, ip, r3, r6
   13e02:	f840 bb04 	str.w	fp, [r0], #4
   13e06:	f04f 0a00 	mov.w	sl, #0
   13e0a:	fba3 b907 	umull	fp, r9, r3, r7
   13e0e:	eb1c 0c0b 	adds.w	ip, ip, fp
   13e12:	f149 0900 	adc.w	r9, r9, #0
   13e16:	fba4 be06 	umull	fp, lr, r4, r6
   13e1a:	eb1c 0c0b 	adds.w	ip, ip, fp
   13e1e:	eb59 090e 	adcs.w	r9, r9, lr
   13e22:	f14a 0a00 	adc.w	sl, sl, #0
   13e26:	f840 cb04 	str.w	ip, [r0], #4
   13e2a:	f04f 0b00 	mov.w	fp, #0
   13e2e:	fba3 ce08 	umull	ip, lr, r3, r8
   13e32:	eb19 090c 	adds.w	r9, r9, ip
   13e36:	eb5a 0a0e 	adcs.w	sl, sl, lr
   13e3a:	f14b 0b00 	adc.w	fp, fp, #0
   13e3e:	fba4 ce07 	umull	ip, lr, r4, r7
   13e42:	eb19 090c 	adds.w	r9, r9, ip
   13e46:	eb5a 0a0e 	adcs.w	sl, sl, lr
   13e4a:	f14b 0b00 	adc.w	fp, fp, #0
   13e4e:	fba5 ce06 	umull	ip, lr, r5, r6
   13e52:	eb19 090c 	adds.w	r9, r9, ip
   13e56:	eb5a 0a0e 	adcs.w	sl, sl, lr
   13e5a:	f14b 0b00 	adc.w	fp, fp, #0
   13e5e:	f840 9b04 	str.w	r9, [r0], #4
   13e62:	c908      	ldmia	r1!, {r3}
   13e64:	f04f 0c00 	mov.w	ip, #0
   13e68:	fba4 e908 	umull	lr, r9, r4, r8
   13e6c:	eb1a 0a0e 	adds.w	sl, sl, lr
   13e70:	eb5b 0b09 	adcs.w	fp, fp, r9
   13e74:	f14c 0c00 	adc.w	ip, ip, #0
   13e78:	fba5 e907 	umull	lr, r9, r5, r7
   13e7c:	eb1a 0a0e 	adds.w	sl, sl, lr
   13e80:	eb5b 0b09 	adcs.w	fp, fp, r9
   13e84:	f14c 0c00 	adc.w	ip, ip, #0
   13e88:	fba3 e906 	umull	lr, r9, r3, r6
   13e8c:	eb1a 0a0e 	adds.w	sl, sl, lr
   13e90:	eb5b 0b09 	adcs.w	fp, fp, r9
   13e94:	f14c 0c00 	adc.w	ip, ip, #0
   13e98:	f8d0 e000 	ldr.w	lr, [r0]
   13e9c:	eb1a 0a0e 	adds.w	sl, sl, lr
   13ea0:	f15b 0b00 	adcs.w	fp, fp, #0
   13ea4:	f14c 0c00 	adc.w	ip, ip, #0
   13ea8:	f840 ab04 	str.w	sl, [r0], #4
   13eac:	c910      	ldmia	r1!, {r4}
   13eae:	f04f 0e00 	mov.w	lr, #0
   13eb2:	fba5 9a08 	umull	r9, sl, r5, r8
   13eb6:	eb1b 0b09 	adds.w	fp, fp, r9
   13eba:	eb5c 0c0a 	adcs.w	ip, ip, sl
   13ebe:	f14e 0e00 	adc.w	lr, lr, #0
   13ec2:	fba3 9a07 	umull	r9, sl, r3, r7
   13ec6:	eb1b 0b09 	adds.w	fp, fp, r9
   13eca:	eb5c 0c0a 	adcs.w	ip, ip, sl
   13ece:	f14e 0e00 	adc.w	lr, lr, #0
   13ed2:	fba4 9a06 	umull	r9, sl, r4, r6
   13ed6:	eb1b 0b09 	adds.w	fp, fp, r9
   13eda:	eb5c 0c0a 	adcs.w	ip, ip, sl
   13ede:	f14e 0e00 	adc.w	lr, lr, #0
   13ee2:	f8d0 9000 	ldr.w	r9, [r0]
   13ee6:	eb1b 0b09 	adds.w	fp, fp, r9
   13eea:	f15c 0c00 	adcs.w	ip, ip, #0
   13eee:	f14e 0e00 	adc.w	lr, lr, #0
   13ef2:	f840 bb04 	str.w	fp, [r0], #4
   13ef6:	ca40      	ldmia	r2!, {r6}
   13ef8:	f04f 0900 	mov.w	r9, #0
   13efc:	fba5 ab06 	umull	sl, fp, r5, r6
   13f00:	eb1c 0c0a 	adds.w	ip, ip, sl
   13f04:	eb5e 0e0b 	adcs.w	lr, lr, fp
   13f08:	f149 0900 	adc.w	r9, r9, #0
   13f0c:	fba3 ab08 	umull	sl, fp, r3, r8
   13f10:	eb1c 0c0a 	adds.w	ip, ip, sl
   13f14:	eb5e 0e0b 	adcs.w	lr, lr, fp
   13f18:	f149 0900 	adc.w	r9, r9, #0
   13f1c:	fba4 ab07 	umull	sl, fp, r4, r7
   13f20:	eb1c 0c0a 	adds.w	ip, ip, sl
   13f24:	eb5e 0e0b 	adcs.w	lr, lr, fp
   13f28:	f149 0900 	adc.w	r9, r9, #0
   13f2c:	f8d0 a000 	ldr.w	sl, [r0]
   13f30:	eb1c 0c0a 	adds.w	ip, ip, sl
   13f34:	f15e 0e00 	adcs.w	lr, lr, #0
   13f38:	f149 0900 	adc.w	r9, r9, #0
   13f3c:	f840 cb04 	str.w	ip, [r0], #4
   13f40:	ca80      	ldmia	r2!, {r7}
   13f42:	f04f 0a00 	mov.w	sl, #0
   13f46:	fba5 bc07 	umull	fp, ip, r5, r7
   13f4a:	eb1e 0e0b 	adds.w	lr, lr, fp
   13f4e:	eb59 090c 	adcs.w	r9, r9, ip
   13f52:	f14a 0a00 	adc.w	sl, sl, #0
   13f56:	fba3 bc06 	umull	fp, ip, r3, r6
   13f5a:	eb1e 0e0b 	adds.w	lr, lr, fp
   13f5e:	eb59 090c 	adcs.w	r9, r9, ip
   13f62:	f14a 0a00 	adc.w	sl, sl, #0
   13f66:	fba4 bc08 	umull	fp, ip, r4, r8
   13f6a:	eb1e 0e0b 	adds.w	lr, lr, fp
   13f6e:	eb59 090c 	adcs.w	r9, r9, ip
   13f72:	f14a 0a00 	adc.w	sl, sl, #0
   13f76:	f8d0 b000 	ldr.w	fp, [r0]
   13f7a:	eb1e 0e0b 	adds.w	lr, lr, fp
   13f7e:	f159 0900 	adcs.w	r9, r9, #0
   13f82:	f14a 0a00 	adc.w	sl, sl, #0
   13f86:	f840 eb04 	str.w	lr, [r0], #4
   13f8a:	f04f 0b00 	mov.w	fp, #0
   13f8e:	fba3 ce07 	umull	ip, lr, r3, r7
   13f92:	eb19 090c 	adds.w	r9, r9, ip
   13f96:	eb5a 0a0e 	adcs.w	sl, sl, lr
   13f9a:	f14b 0b00 	adc.w	fp, fp, #0
   13f9e:	fba4 ce06 	umull	ip, lr, r4, r6
   13fa2:	eb19 090c 	adds.w	r9, r9, ip
   13fa6:	eb5a 0a0e 	adcs.w	sl, sl, lr
   13faa:	f14b 0b00 	adc.w	fp, fp, #0
   13fae:	f840 9b04 	str.w	r9, [r0], #4
   13fb2:	fba4 e907 	umull	lr, r9, r4, r7
   13fb6:	eb1a 0a0e 	adds.w	sl, sl, lr
   13fba:	eb4b 0b09 	adc.w	fp, fp, r9
   13fbe:	e8a0 0c00 	stmia.w	r0!, {sl, fp}
   13fc2:	f1a0 0034 	sub.w	r0, r0, #52	; 0x34
   13fc6:	f1a1 0114 	sub.w	r1, r1, #20
   13fca:	f1a2 0220 	sub.w	r2, r2, #32
   13fce:	c938      	ldmia	r1!, {r3, r4, r5}
   13fd0:	e8b2 01c0 	ldmia.w	r2!, {r6, r7, r8}
   13fd4:	fba3 bc06 	umull	fp, ip, r3, r6
   13fd8:	f840 bb04 	str.w	fp, [r0], #4
   13fdc:	f04f 0a00 	mov.w	sl, #0
   13fe0:	fba3 b907 	umull	fp, r9, r3, r7
   13fe4:	eb1c 0c0b 	adds.w	ip, ip, fp
   13fe8:	f149 0900 	adc.w	r9, r9, #0
   13fec:	fba4 be06 	umull	fp, lr, r4, r6
   13ff0:	eb1c 0c0b 	adds.w	ip, ip, fp
   13ff4:	eb59 090e 	adcs.w	r9, r9, lr
   13ff8:	f14a 0a00 	adc.w	sl, sl, #0
   13ffc:	f840 cb04 	str.w	ip, [r0], #4
   14000:	f04f 0b00 	mov.w	fp, #0
   14004:	fba3 ce08 	umull	ip, lr, r3, r8
   14008:	eb19 090c 	adds.w	r9, r9, ip
   1400c:	eb5a 0a0e 	adcs.w	sl, sl, lr
   14010:	f14b 0b00 	adc.w	fp, fp, #0
   14014:	fba4 ce07 	umull	ip, lr, r4, r7
   14018:	eb19 090c 	adds.w	r9, r9, ip
   1401c:	eb5a 0a0e 	adcs.w	sl, sl, lr
   14020:	f14b 0b00 	adc.w	fp, fp, #0
   14024:	fba5 ce06 	umull	ip, lr, r5, r6
   14028:	eb19 090c 	adds.w	r9, r9, ip
   1402c:	eb5a 0a0e 	adcs.w	sl, sl, lr
   14030:	f14b 0b00 	adc.w	fp, fp, #0
   14034:	f840 9b04 	str.w	r9, [r0], #4
   14038:	c908      	ldmia	r1!, {r3}
   1403a:	f04f 0c00 	mov.w	ip, #0
   1403e:	fba4 e908 	umull	lr, r9, r4, r8
   14042:	eb1a 0a0e 	adds.w	sl, sl, lr
   14046:	eb5b 0b09 	adcs.w	fp, fp, r9
   1404a:	f14c 0c00 	adc.w	ip, ip, #0
   1404e:	fba5 e907 	umull	lr, r9, r5, r7
   14052:	eb1a 0a0e 	adds.w	sl, sl, lr
   14056:	eb5b 0b09 	adcs.w	fp, fp, r9
   1405a:	f14c 0c00 	adc.w	ip, ip, #0
   1405e:	fba3 e906 	umull	lr, r9, r3, r6
   14062:	eb1a 0a0e 	adds.w	sl, sl, lr
   14066:	eb5b 0b09 	adcs.w	fp, fp, r9
   1406a:	f14c 0c00 	adc.w	ip, ip, #0
   1406e:	f8d0 e000 	ldr.w	lr, [r0]
   14072:	eb1a 0a0e 	adds.w	sl, sl, lr
   14076:	f15b 0b00 	adcs.w	fp, fp, #0
   1407a:	f14c 0c00 	adc.w	ip, ip, #0
   1407e:	f840 ab04 	str.w	sl, [r0], #4
   14082:	c910      	ldmia	r1!, {r4}
   14084:	f04f 0e00 	mov.w	lr, #0
   14088:	fba5 9a08 	umull	r9, sl, r5, r8
   1408c:	eb1b 0b09 	adds.w	fp, fp, r9
   14090:	eb5c 0c0a 	adcs.w	ip, ip, sl
   14094:	f14e 0e00 	adc.w	lr, lr, #0
   14098:	fba3 9a07 	umull	r9, sl, r3, r7
   1409c:	eb1b 0b09 	adds.w	fp, fp, r9
   140a0:	eb5c 0c0a 	adcs.w	ip, ip, sl
   140a4:	f14e 0e00 	adc.w	lr, lr, #0
   140a8:	fba4 9a06 	umull	r9, sl, r4, r6
   140ac:	eb1b 0b09 	adds.w	fp, fp, r9
   140b0:	eb5c 0c0a 	adcs.w	ip, ip, sl
   140b4:	f14e 0e00 	adc.w	lr, lr, #0
   140b8:	f8d0 9000 	ldr.w	r9, [r0]
   140bc:	eb1b 0b09 	adds.w	fp, fp, r9
   140c0:	f15c 0c00 	adcs.w	ip, ip, #0
   140c4:	f14e 0e00 	adc.w	lr, lr, #0
   140c8:	f840 bb04 	str.w	fp, [r0], #4
   140cc:	c920      	ldmia	r1!, {r5}
   140ce:	f04f 0900 	mov.w	r9, #0
   140d2:	fba3 ab08 	umull	sl, fp, r3, r8
   140d6:	eb1c 0c0a 	adds.w	ip, ip, sl
   140da:	eb5e 0e0b 	adcs.w	lr, lr, fp
   140de:	f149 0900 	adc.w	r9, r9, #0
   140e2:	fba4 ab07 	umull	sl, fp, r4, r7
   140e6:	eb1c 0c0a 	adds.w	ip, ip, sl
   140ea:	eb5e 0e0b 	adcs.w	lr, lr, fp
   140ee:	f149 0900 	adc.w	r9, r9, #0
   140f2:	fba5 ab06 	umull	sl, fp, r5, r6
   140f6:	eb1c 0c0a 	adds.w	ip, ip, sl
   140fa:	eb5e 0e0b 	adcs.w	lr, lr, fp
   140fe:	f149 0900 	adc.w	r9, r9, #0
   14102:	f8d0 a000 	ldr.w	sl, [r0]
   14106:	eb1c 0c0a 	adds.w	ip, ip, sl
   1410a:	f15e 0e00 	adcs.w	lr, lr, #0
   1410e:	f149 0900 	adc.w	r9, r9, #0
   14112:	f840 cb04 	str.w	ip, [r0], #4
   14116:	c908      	ldmia	r1!, {r3}
   14118:	f04f 0a00 	mov.w	sl, #0
   1411c:	fba4 bc08 	umull	fp, ip, r4, r8
   14120:	eb1e 0e0b 	adds.w	lr, lr, fp
   14124:	eb59 090c 	adcs.w	r9, r9, ip
   14128:	f14a 0a00 	adc.w	sl, sl, #0
   1412c:	fba5 bc07 	umull	fp, ip, r5, r7
   14130:	eb1e 0e0b 	adds.w	lr, lr, fp
   14134:	eb59 090c 	adcs.w	r9, r9, ip
   14138:	f14a 0a00 	adc.w	sl, sl, #0
   1413c:	fba3 bc06 	umull	fp, ip, r3, r6
   14140:	eb1e 0e0b 	adds.w	lr, lr, fp
   14144:	eb59 090c 	adcs.w	r9, r9, ip
   14148:	f14a 0a00 	adc.w	sl, sl, #0
   1414c:	f8d0 b000 	ldr.w	fp, [r0]
   14150:	eb1e 0e0b 	adds.w	lr, lr, fp
   14154:	f159 0900 	adcs.w	r9, r9, #0
   14158:	f14a 0a00 	adc.w	sl, sl, #0
   1415c:	f840 eb04 	str.w	lr, [r0], #4
   14160:	c910      	ldmia	r1!, {r4}
   14162:	f04f 0b00 	mov.w	fp, #0
   14166:	fba5 ce08 	umull	ip, lr, r5, r8
   1416a:	eb19 090c 	adds.w	r9, r9, ip
   1416e:	eb5a 0a0e 	adcs.w	sl, sl, lr
   14172:	f14b 0b00 	adc.w	fp, fp, #0
   14176:	fba3 ce07 	umull	ip, lr, r3, r7
   1417a:	eb19 090c 	adds.w	r9, r9, ip
   1417e:	eb5a 0a0e 	adcs.w	sl, sl, lr
   14182:	f14b 0b00 	adc.w	fp, fp, #0
   14186:	fba4 ce06 	umull	ip, lr, r4, r6
   1418a:	eb19 090c 	adds.w	r9, r9, ip
   1418e:	eb5a 0a0e 	adcs.w	sl, sl, lr
   14192:	f14b 0b00 	adc.w	fp, fp, #0
   14196:	f8d0 c000 	ldr.w	ip, [r0]
   1419a:	eb19 090c 	adds.w	r9, r9, ip
   1419e:	f15a 0a00 	adcs.w	sl, sl, #0
   141a2:	f14b 0b00 	adc.w	fp, fp, #0
   141a6:	f840 9b04 	str.w	r9, [r0], #4
   141aa:	ca40      	ldmia	r2!, {r6}
   141ac:	f04f 0c00 	mov.w	ip, #0
   141b0:	fba5 e906 	umull	lr, r9, r5, r6
   141b4:	eb1a 0a0e 	adds.w	sl, sl, lr
   141b8:	eb5b 0b09 	adcs.w	fp, fp, r9
   141bc:	f14c 0c00 	adc.w	ip, ip, #0
   141c0:	fba3 e908 	umull	lr, r9, r3, r8
   141c4:	eb1a 0a0e 	adds.w	sl, sl, lr
   141c8:	eb5b 0b09 	adcs.w	fp, fp, r9
   141cc:	f14c 0c00 	adc.w	ip, ip, #0
   141d0:	fba4 e907 	umull	lr, r9, r4, r7
   141d4:	eb1a 0a0e 	adds.w	sl, sl, lr
   141d8:	eb5b 0b09 	adcs.w	fp, fp, r9
   141dc:	f14c 0c00 	adc.w	ip, ip, #0
   141e0:	f8d0 e000 	ldr.w	lr, [r0]
   141e4:	eb1a 0a0e 	adds.w	sl, sl, lr
   141e8:	f15b 0b00 	adcs.w	fp, fp, #0
   141ec:	f14c 0c00 	adc.w	ip, ip, #0
   141f0:	f840 ab04 	str.w	sl, [r0], #4
   141f4:	ca80      	ldmia	r2!, {r7}
   141f6:	f04f 0e00 	mov.w	lr, #0
   141fa:	fba5 9a07 	umull	r9, sl, r5, r7
   141fe:	eb1b 0b09 	adds.w	fp, fp, r9
   14202:	eb5c 0c0a 	adcs.w	ip, ip, sl
   14206:	f14e 0e00 	adc.w	lr, lr, #0
   1420a:	fba3 9a06 	umull	r9, sl, r3, r6
   1420e:	eb1b 0b09 	adds.w	fp, fp, r9
   14212:	eb5c 0c0a 	adcs.w	ip, ip, sl
   14216:	f14e 0e00 	adc.w	lr, lr, #0
   1421a:	fba4 9a08 	umull	r9, sl, r4, r8
   1421e:	eb1b 0b09 	adds.w	fp, fp, r9
   14222:	eb5c 0c0a 	adcs.w	ip, ip, sl
   14226:	f14e 0e00 	adc.w	lr, lr, #0
   1422a:	f8d0 9000 	ldr.w	r9, [r0]
   1422e:	eb1b 0b09 	adds.w	fp, fp, r9
   14232:	f15c 0c00 	adcs.w	ip, ip, #0
   14236:	f14e 0e00 	adc.w	lr, lr, #0
   1423a:	f840 bb04 	str.w	fp, [r0], #4
   1423e:	f852 8b04 	ldr.w	r8, [r2], #4
   14242:	f04f 0900 	mov.w	r9, #0
   14246:	fba5 ab08 	umull	sl, fp, r5, r8
   1424a:	eb1c 0c0a 	adds.w	ip, ip, sl
   1424e:	eb5e 0e0b 	adcs.w	lr, lr, fp
   14252:	f149 0900 	adc.w	r9, r9, #0
   14256:	fba3 ab07 	umull	sl, fp, r3, r7
   1425a:	eb1c 0c0a 	adds.w	ip, ip, sl
   1425e:	eb5e 0e0b 	adcs.w	lr, lr, fp
   14262:	f149 0900 	adc.w	r9, r9, #0
   14266:	fba4 ab06 	umull	sl, fp, r4, r6
   1426a:	eb1c 0c0a 	adds.w	ip, ip, sl
   1426e:	eb5e 0e0b 	adcs.w	lr, lr, fp
   14272:	f149 0900 	adc.w	r9, r9, #0
   14276:	f8d0 a000 	ldr.w	sl, [r0]
   1427a:	eb1c 0c0a 	adds.w	ip, ip, sl
   1427e:	f15e 0e00 	adcs.w	lr, lr, #0
   14282:	f149 0900 	adc.w	r9, r9, #0
   14286:	f840 cb04 	str.w	ip, [r0], #4
   1428a:	ca40      	ldmia	r2!, {r6}
   1428c:	f04f 0a00 	mov.w	sl, #0
   14290:	fba5 bc06 	umull	fp, ip, r5, r6
   14294:	eb1e 0e0b 	adds.w	lr, lr, fp
   14298:	eb59 090c 	adcs.w	r9, r9, ip
   1429c:	f14a 0a00 	adc.w	sl, sl, #0
   142a0:	fba3 bc08 	umull	fp, ip, r3, r8
   142a4:	eb1e 0e0b 	adds.w	lr, lr, fp
   142a8:	eb59 090c 	adcs.w	r9, r9, ip
   142ac:	f14a 0a00 	adc.w	sl, sl, #0
   142b0:	fba4 bc07 	umull	fp, ip, r4, r7
   142b4:	eb1e 0e0b 	adds.w	lr, lr, fp
   142b8:	eb59 090c 	adcs.w	r9, r9, ip
   142bc:	f14a 0a00 	adc.w	sl, sl, #0
   142c0:	f8d0 b000 	ldr.w	fp, [r0]
   142c4:	eb1e 0e0b 	adds.w	lr, lr, fp
   142c8:	f159 0900 	adcs.w	r9, r9, #0
   142cc:	f14a 0a00 	adc.w	sl, sl, #0
   142d0:	f840 eb04 	str.w	lr, [r0], #4
   142d4:	ca80      	ldmia	r2!, {r7}
   142d6:	f04f 0b00 	mov.w	fp, #0
   142da:	fba5 ce07 	umull	ip, lr, r5, r7
   142de:	eb19 090c 	adds.w	r9, r9, ip
   142e2:	eb5a 0a0e 	adcs.w	sl, sl, lr
   142e6:	f14b 0b00 	adc.w	fp, fp, #0
   142ea:	fba3 ce06 	umull	ip, lr, r3, r6
   142ee:	eb19 090c 	adds.w	r9, r9, ip
   142f2:	eb5a 0a0e 	adcs.w	sl, sl, lr
   142f6:	f14b 0b00 	adc.w	fp, fp, #0
   142fa:	fba4 ce08 	umull	ip, lr, r4, r8
   142fe:	eb19 090c 	adds.w	r9, r9, ip
   14302:	eb5a 0a0e 	adcs.w	sl, sl, lr
   14306:	f14b 0b00 	adc.w	fp, fp, #0
   1430a:	f8d0 c000 	ldr.w	ip, [r0]
   1430e:	eb19 090c 	adds.w	r9, r9, ip
   14312:	f15a 0a00 	adcs.w	sl, sl, #0
   14316:	f14b 0b00 	adc.w	fp, fp, #0
   1431a:	f840 9b04 	str.w	r9, [r0], #4
   1431e:	f04f 0c00 	mov.w	ip, #0
   14322:	fba3 e907 	umull	lr, r9, r3, r7
   14326:	eb1a 0a0e 	adds.w	sl, sl, lr
   1432a:	eb5b 0b09 	adcs.w	fp, fp, r9
   1432e:	f14c 0c00 	adc.w	ip, ip, #0
   14332:	fba4 e906 	umull	lr, r9, r4, r6
   14336:	eb1a 0a0e 	adds.w	sl, sl, lr
   1433a:	eb5b 0b09 	adcs.w	fp, fp, r9
   1433e:	f14c 0c00 	adc.w	ip, ip, #0
   14342:	f840 ab04 	str.w	sl, [r0], #4
   14346:	fba4 9a07 	umull	r9, sl, r4, r7
   1434a:	eb1b 0b09 	adds.w	fp, fp, r9
   1434e:	eb4c 0c0a 	adc.w	ip, ip, sl
   14352:	e8a0 1800 	stmia.w	r0!, {fp, ip}
    #endif
        : "+r" (r0), "+r" (r1), "+r" (r2)
        :
        : "r3", "r4", "r5", "r6", "r7", "r8", "r9", "r10", "r11", "r12", "r14", "cc", "memory"
    );
}
   14356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1435a:	bf00      	nop

0001435c <vli_square>:
}
#define asm_square 1
#endif /* (uECC_WORDS == 7) */

#if (uECC_WORDS == 8)
static void vli_square(uint32_t *result, const uint32_t *left) {
   1435c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    register uint32_t *r0 __asm__("r0") = result;
    register const uint32_t *r1 __asm__("r1") = left;

    __asm__ volatile (
   14360:	c90c      	ldmia	r1!, {r2, r3}
   14362:	f101 0110 	add.w	r1, r1, #16
   14366:	c960      	ldmia	r1!, {r5, r6}
   14368:	f100 0018 	add.w	r0, r0, #24
   1436c:	fba2 8905 	umull	r8, r9, r2, r5
   14370:	f840 8b04 	str.w	r8, [r0], #4
   14374:	fba2 ca06 	umull	ip, sl, r2, r6
   14378:	eb19 090c 	adds.w	r9, r9, ip
   1437c:	f14a 0a00 	adc.w	sl, sl, #0
   14380:	f840 9b04 	str.w	r9, [r0], #4
   14384:	fba3 8906 	umull	r8, r9, r3, r6
   14388:	eb1a 0a08 	adds.w	sl, sl, r8
   1438c:	f149 0b00 	adc.w	fp, r9, #0
   14390:	e8a0 0c00 	stmia.w	r0!, {sl, fp}
   14394:	f1a0 0028 	sub.w	r0, r0, #40	; 0x28
   14398:	f1a1 0120 	sub.w	r1, r1, #32
   1439c:	c9fc      	ldmia	r1!, {r2, r3, r4, r5, r6, r7}
   1439e:	fba2 bc02 	umull	fp, ip, r2, r2
   143a2:	f840 bb04 	str.w	fp, [r0], #4
   143a6:	f04f 0900 	mov.w	r9, #0
   143aa:	fba2 ab03 	umull	sl, fp, r2, r3
   143ae:	eb1c 0c0a 	adds.w	ip, ip, sl
   143b2:	f15b 0800 	adcs.w	r8, fp, #0
   143b6:	f149 0900 	adc.w	r9, r9, #0
   143ba:	eb1c 0c0a 	adds.w	ip, ip, sl
   143be:	eb58 080b 	adcs.w	r8, r8, fp
   143c2:	f149 0900 	adc.w	r9, r9, #0
   143c6:	f840 cb04 	str.w	ip, [r0], #4
   143ca:	f04f 0a00 	mov.w	sl, #0
   143ce:	fba2 bc04 	umull	fp, ip, r2, r4
   143d2:	eb1b 0b0b 	adds.w	fp, fp, fp
   143d6:	eb5c 0c0c 	adcs.w	ip, ip, ip
   143da:	f14a 0a00 	adc.w	sl, sl, #0
   143de:	eb18 080b 	adds.w	r8, r8, fp
   143e2:	eb59 090c 	adcs.w	r9, r9, ip
   143e6:	f14a 0a00 	adc.w	sl, sl, #0
   143ea:	fba3 bc03 	umull	fp, ip, r3, r3
   143ee:	eb18 080b 	adds.w	r8, r8, fp
   143f2:	eb59 090c 	adcs.w	r9, r9, ip
   143f6:	f14a 0a00 	adc.w	sl, sl, #0
   143fa:	f840 8b04 	str.w	r8, [r0], #4
   143fe:	f04f 0c00 	mov.w	ip, #0
   14402:	fba2 8b05 	umull	r8, fp, r2, r5
   14406:	46de      	mov	lr, fp
   14408:	fbe3 8b04 	umlal	r8, fp, r3, r4
   1440c:	45de      	cmp	lr, fp
   1440e:	bf88      	it	hi
   14410:	f14c 0c00 	adchi.w	ip, ip, #0
   14414:	eb18 0808 	adds.w	r8, r8, r8
   14418:	eb5b 0b0b 	adcs.w	fp, fp, fp
   1441c:	eb4c 0c0c 	adc.w	ip, ip, ip
   14420:	eb18 0809 	adds.w	r8, r8, r9
   14424:	eb5b 0b0a 	adcs.w	fp, fp, sl
   14428:	f14c 0c00 	adc.w	ip, ip, #0
   1442c:	f840 8b04 	str.w	r8, [r0], #4
   14430:	f04f 0a00 	mov.w	sl, #0
   14434:	fba2 8906 	umull	r8, r9, r2, r6
   14438:	46ce      	mov	lr, r9
   1443a:	fbe3 8905 	umlal	r8, r9, r3, r5
   1443e:	45ce      	cmp	lr, r9
   14440:	bf88      	it	hi
   14442:	f14a 0a00 	adchi.w	sl, sl, #0
   14446:	eb18 0808 	adds.w	r8, r8, r8
   1444a:	eb59 0909 	adcs.w	r9, r9, r9
   1444e:	eb4a 0a0a 	adc.w	sl, sl, sl
   14452:	46ce      	mov	lr, r9
   14454:	fbe4 8904 	umlal	r8, r9, r4, r4
   14458:	45ce      	cmp	lr, r9
   1445a:	bf88      	it	hi
   1445c:	f14a 0a00 	adchi.w	sl, sl, #0
   14460:	eb18 080b 	adds.w	r8, r8, fp
   14464:	eb59 090c 	adcs.w	r9, r9, ip
   14468:	f14a 0a00 	adc.w	sl, sl, #0
   1446c:	f840 8b04 	str.w	r8, [r0], #4
   14470:	f04f 0c00 	mov.w	ip, #0
   14474:	fba2 8b07 	umull	r8, fp, r2, r7
   14478:	46de      	mov	lr, fp
   1447a:	fbe3 8b06 	umlal	r8, fp, r3, r6
   1447e:	45de      	cmp	lr, fp
   14480:	bf88      	it	hi
   14482:	f14c 0c00 	adchi.w	ip, ip, #0
   14486:	46de      	mov	lr, fp
   14488:	fbe4 8b05 	umlal	r8, fp, r4, r5
   1448c:	45de      	cmp	lr, fp
   1448e:	bf88      	it	hi
   14490:	f14c 0c00 	adchi.w	ip, ip, #0
   14494:	eb18 0808 	adds.w	r8, r8, r8
   14498:	eb5b 0b0b 	adcs.w	fp, fp, fp
   1449c:	eb4c 0c0c 	adc.w	ip, ip, ip
   144a0:	eb18 0809 	adds.w	r8, r8, r9
   144a4:	eb5b 0b0a 	adcs.w	fp, fp, sl
   144a8:	f14c 0c00 	adc.w	ip, ip, #0
   144ac:	f840 8b04 	str.w	r8, [r0], #4
   144b0:	c904      	ldmia	r1!, {r2}
   144b2:	f04f 0a00 	mov.w	sl, #0
   144b6:	fba3 8907 	umull	r8, r9, r3, r7
   144ba:	46ce      	mov	lr, r9
   144bc:	fbe4 8906 	umlal	r8, r9, r4, r6
   144c0:	45ce      	cmp	lr, r9
   144c2:	bf88      	it	hi
   144c4:	f14a 0a00 	adchi.w	sl, sl, #0
   144c8:	f8d0 e000 	ldr.w	lr, [r0]
   144cc:	eb18 080e 	adds.w	r8, r8, lr
   144d0:	f159 0900 	adcs.w	r9, r9, #0
   144d4:	f14a 0a00 	adc.w	sl, sl, #0
   144d8:	eb18 0808 	adds.w	r8, r8, r8
   144dc:	eb59 0909 	adcs.w	r9, r9, r9
   144e0:	eb4a 0a0a 	adc.w	sl, sl, sl
   144e4:	46ce      	mov	lr, r9
   144e6:	fbe5 8905 	umlal	r8, r9, r5, r5
   144ea:	45ce      	cmp	lr, r9
   144ec:	bf88      	it	hi
   144ee:	f14a 0a00 	adchi.w	sl, sl, #0
   144f2:	eb18 080b 	adds.w	r8, r8, fp
   144f6:	eb59 090c 	adcs.w	r9, r9, ip
   144fa:	f14a 0a00 	adc.w	sl, sl, #0
   144fe:	f840 8b04 	str.w	r8, [r0], #4
   14502:	f04f 0c00 	mov.w	ip, #0
   14506:	fba3 8b02 	umull	r8, fp, r3, r2
   1450a:	46de      	mov	lr, fp
   1450c:	fbe4 8b07 	umlal	r8, fp, r4, r7
   14510:	45de      	cmp	lr, fp
   14512:	bf88      	it	hi
   14514:	f14c 0c00 	adchi.w	ip, ip, #0
   14518:	46de      	mov	lr, fp
   1451a:	fbe5 8b06 	umlal	r8, fp, r5, r6
   1451e:	45de      	cmp	lr, fp
   14520:	bf88      	it	hi
   14522:	f14c 0c00 	adchi.w	ip, ip, #0
   14526:	f8d0 e000 	ldr.w	lr, [r0]
   1452a:	eb18 080e 	adds.w	r8, r8, lr
   1452e:	f15b 0b00 	adcs.w	fp, fp, #0
   14532:	f14c 0c00 	adc.w	ip, ip, #0
   14536:	eb18 0808 	adds.w	r8, r8, r8
   1453a:	eb5b 0b0b 	adcs.w	fp, fp, fp
   1453e:	eb4c 0c0c 	adc.w	ip, ip, ip
   14542:	eb18 0809 	adds.w	r8, r8, r9
   14546:	eb5b 0b0a 	adcs.w	fp, fp, sl
   1454a:	f14c 0c00 	adc.w	ip, ip, #0
   1454e:	f840 8b04 	str.w	r8, [r0], #4
   14552:	c908      	ldmia	r1!, {r3}
   14554:	f04f 0a00 	mov.w	sl, #0
   14558:	fba4 8902 	umull	r8, r9, r4, r2
   1455c:	46ce      	mov	lr, r9
   1455e:	fbe5 8907 	umlal	r8, r9, r5, r7
   14562:	45ce      	cmp	lr, r9
   14564:	bf88      	it	hi
   14566:	f14a 0a00 	adchi.w	sl, sl, #0
   1456a:	f8d0 e000 	ldr.w	lr, [r0]
   1456e:	eb18 080e 	adds.w	r8, r8, lr
   14572:	f159 0900 	adcs.w	r9, r9, #0
   14576:	f14a 0a00 	adc.w	sl, sl, #0
   1457a:	eb18 0808 	adds.w	r8, r8, r8
   1457e:	eb59 0909 	adcs.w	r9, r9, r9
   14582:	eb4a 0a0a 	adc.w	sl, sl, sl
   14586:	46ce      	mov	lr, r9
   14588:	fbe6 8906 	umlal	r8, r9, r6, r6
   1458c:	45ce      	cmp	lr, r9
   1458e:	bf88      	it	hi
   14590:	f14a 0a00 	adchi.w	sl, sl, #0
   14594:	eb18 080b 	adds.w	r8, r8, fp
   14598:	eb59 090c 	adcs.w	r9, r9, ip
   1459c:	f14a 0a00 	adc.w	sl, sl, #0
   145a0:	f840 8b04 	str.w	r8, [r0], #4
   145a4:	f04f 0c00 	mov.w	ip, #0
   145a8:	fba4 8b03 	umull	r8, fp, r4, r3
   145ac:	46de      	mov	lr, fp
   145ae:	fbe5 8b02 	umlal	r8, fp, r5, r2
   145b2:	45de      	cmp	lr, fp
   145b4:	bf88      	it	hi
   145b6:	f14c 0c00 	adchi.w	ip, ip, #0
   145ba:	46de      	mov	lr, fp
   145bc:	fbe6 8b07 	umlal	r8, fp, r6, r7
   145c0:	45de      	cmp	lr, fp
   145c2:	bf88      	it	hi
   145c4:	f14c 0c00 	adchi.w	ip, ip, #0
   145c8:	f8d0 e000 	ldr.w	lr, [r0]
   145cc:	eb18 080e 	adds.w	r8, r8, lr
   145d0:	f15b 0b00 	adcs.w	fp, fp, #0
   145d4:	f14c 0c00 	adc.w	ip, ip, #0
   145d8:	eb18 0808 	adds.w	r8, r8, r8
   145dc:	eb5b 0b0b 	adcs.w	fp, fp, fp
   145e0:	eb4c 0c0c 	adc.w	ip, ip, ip
   145e4:	eb18 0809 	adds.w	r8, r8, r9
   145e8:	eb5b 0b0a 	adcs.w	fp, fp, sl
   145ec:	f14c 0c00 	adc.w	ip, ip, #0
   145f0:	f840 8b04 	str.w	r8, [r0], #4
   145f4:	f04f 0a00 	mov.w	sl, #0
   145f8:	fba5 8903 	umull	r8, r9, r5, r3
   145fc:	46ce      	mov	lr, r9
   145fe:	fbe6 8902 	umlal	r8, r9, r6, r2
   14602:	45ce      	cmp	lr, r9
   14604:	bf88      	it	hi
   14606:	f14a 0a00 	adchi.w	sl, sl, #0
   1460a:	eb18 0808 	adds.w	r8, r8, r8
   1460e:	eb59 0909 	adcs.w	r9, r9, r9
   14612:	eb4a 0a0a 	adc.w	sl, sl, sl
   14616:	46ce      	mov	lr, r9
   14618:	fbe7 8907 	umlal	r8, r9, r7, r7
   1461c:	45ce      	cmp	lr, r9
   1461e:	bf88      	it	hi
   14620:	f14a 0a00 	adchi.w	sl, sl, #0
   14624:	eb18 080b 	adds.w	r8, r8, fp
   14628:	eb59 090c 	adcs.w	r9, r9, ip
   1462c:	f14a 0a00 	adc.w	sl, sl, #0
   14630:	f840 8b04 	str.w	r8, [r0], #4
   14634:	f04f 0c00 	mov.w	ip, #0
   14638:	fba6 8b03 	umull	r8, fp, r6, r3
   1463c:	46de      	mov	lr, fp
   1463e:	fbe7 8b02 	umlal	r8, fp, r7, r2
   14642:	45de      	cmp	lr, fp
   14644:	bf88      	it	hi
   14646:	f14c 0c00 	adchi.w	ip, ip, #0
   1464a:	eb18 0808 	adds.w	r8, r8, r8
   1464e:	eb5b 0b0b 	adcs.w	fp, fp, fp
   14652:	eb4c 0c0c 	adc.w	ip, ip, ip
   14656:	eb18 0809 	adds.w	r8, r8, r9
   1465a:	eb5b 0b0a 	adcs.w	fp, fp, sl
   1465e:	f14c 0c00 	adc.w	ip, ip, #0
   14662:	f840 8b04 	str.w	r8, [r0], #4
   14666:	f04f 0800 	mov.w	r8, #0
   1466a:	fba7 1a03 	umull	r1, sl, r7, r3
   1466e:	1849      	adds	r1, r1, r1
   14670:	eb5a 0a0a 	adcs.w	sl, sl, sl
   14674:	f148 0800 	adc.w	r8, r8, #0
   14678:	eb1b 0b01 	adds.w	fp, fp, r1
   1467c:	eb5c 0c0a 	adcs.w	ip, ip, sl
   14680:	f148 0800 	adc.w	r8, r8, #0
   14684:	fba2 1a02 	umull	r1, sl, r2, r2
   14688:	eb1b 0b01 	adds.w	fp, fp, r1
   1468c:	eb5c 0c0a 	adcs.w	ip, ip, sl
   14690:	f148 0800 	adc.w	r8, r8, #0
   14694:	f840 bb04 	str.w	fp, [r0], #4
   14698:	f04f 0b00 	mov.w	fp, #0
   1469c:	fba2 1a03 	umull	r1, sl, r2, r3
   146a0:	1849      	adds	r1, r1, r1
   146a2:	eb5a 0a0a 	adcs.w	sl, sl, sl
   146a6:	f14b 0b00 	adc.w	fp, fp, #0
   146aa:	eb1c 0c01 	adds.w	ip, ip, r1
   146ae:	eb58 080a 	adcs.w	r8, r8, sl
   146b2:	f14b 0b00 	adc.w	fp, fp, #0
   146b6:	f840 cb04 	str.w	ip, [r0], #4
   146ba:	fba3 1a03 	umull	r1, sl, r3, r3
   146be:	eb18 0801 	adds.w	r8, r8, r1
   146c2:	eb5b 0b0a 	adcs.w	fp, fp, sl
   146c6:	e8a0 0900 	stmia.w	r0!, {r8, fp}
    #endif
        : "+r" (r0), "+r" (r1)
        :
        : "r2", "r3", "r4", "r5", "r6", "r7", "r8", "r9", "r10", "r11", "r12", "r14", "cc", "memory"
    );
}
   146ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146ce:	bf00      	nop

000146d0 <vli_mmod_fast>:
            carry -= vli_sub(result, result, curve_p);
        }
    }
}
#elif uECC_WORD_SIZE == 4
static void vli_mmod_fast(uint32_t *RESTRICT result, uint32_t *RESTRICT product) {
   146d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   146d2:	b089      	sub	sp, #36	; 0x24
    /* t */
    vli_set(result, product);

    /* s1 */
    tmp[0] = tmp[1] = tmp[2] = 0;
    tmp[3] = product[11];
   146d4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   146d6:	9303      	str	r3, [sp, #12]
    tmp[4] = product[12];
   146d8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   146da:	9304      	str	r3, [sp, #16]
    tmp[5] = product[13];
   146dc:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   146de:	9305      	str	r3, [sp, #20]
    tmp[6] = product[14];
   146e0:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   146e2:	9306      	str	r3, [sp, #24]
        dest[i] = src[i];
   146e4:	468c      	mov	ip, r1
    tmp[7] = product[15];
   146e6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   146e8:	9307      	str	r3, [sp, #28]
static void vli_mmod_fast(uint32_t *RESTRICT result, uint32_t *RESTRICT product) {
   146ea:	460e      	mov	r6, r1
   146ec:	4604      	mov	r4, r0
        dest[i] = src[i];
   146ee:	4605      	mov	r5, r0
   146f0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   146f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   146f6:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
    tmp[0] = tmp[1] = tmp[2] = 0;
   146fa:	ed9f 7b65 	vldr	d7, [pc, #404]	; 14890 <vli_mmod_fast+0x1c0>
        dest[i] = src[i];
   146fe:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    tmp[0] = tmp[1] = tmp[2] = 0;
   14702:	2700      	movs	r7, #0
    carry = vli_add(tmp, tmp, tmp);
   14704:	466a      	mov	r2, sp
   14706:	4669      	mov	r1, sp
   14708:	4668      	mov	r0, sp
    tmp[0] = tmp[1] = tmp[2] = 0;
   1470a:	ed8d 7b00 	vstr	d7, [sp]
   1470e:	9702      	str	r7, [sp, #8]
    carry = vli_add(tmp, tmp, tmp);
   14710:	f7ff fac0 	bl	13c94 <vli_add>
    carry += vli_add(result, result, tmp);
   14714:	466a      	mov	r2, sp
    carry = vli_add(tmp, tmp, tmp);
   14716:	4605      	mov	r5, r0
    carry += vli_add(result, result, tmp);
   14718:	4621      	mov	r1, r4
   1471a:	4620      	mov	r0, r4
   1471c:	f7ff faba 	bl	13c94 <vli_add>

    /* s2 */
    tmp[3] = product[12];
   14720:	6b33      	ldr	r3, [r6, #48]	; 0x30
   14722:	9303      	str	r3, [sp, #12]
    tmp[4] = product[13];
   14724:	6b73      	ldr	r3, [r6, #52]	; 0x34
   14726:	9304      	str	r3, [sp, #16]
    tmp[5] = product[14];
   14728:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   1472a:	9305      	str	r3, [sp, #20]
    carry += vli_add(result, result, tmp);
   1472c:	4405      	add	r5, r0
    tmp[6] = product[15];
   1472e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   14730:	9306      	str	r3, [sp, #24]
    tmp[7] = 0;
    carry += vli_add(tmp, tmp, tmp);
   14732:	466a      	mov	r2, sp
   14734:	4669      	mov	r1, sp
   14736:	4668      	mov	r0, sp
    tmp[7] = 0;
   14738:	9707      	str	r7, [sp, #28]
    carry += vli_add(tmp, tmp, tmp);
   1473a:	f7ff faab 	bl	13c94 <vli_add>
    carry += vli_add(result, result, tmp);
   1473e:	466a      	mov	r2, sp
    carry += vli_add(tmp, tmp, tmp);
   14740:	4405      	add	r5, r0
    carry += vli_add(result, result, tmp);
   14742:	4621      	mov	r1, r4
   14744:	4620      	mov	r0, r4
   14746:	f7ff faa5 	bl	13c94 <vli_add>

    /* s3 */
    tmp[0] = product[8];
   1474a:	6a33      	ldr	r3, [r6, #32]
   1474c:	9300      	str	r3, [sp, #0]
    tmp[1] = product[9];
   1474e:	6a73      	ldr	r3, [r6, #36]	; 0x24
   14750:	9301      	str	r3, [sp, #4]
    tmp[2] = product[10];
   14752:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   14754:	9302      	str	r3, [sp, #8]
    tmp[3] = tmp[4] = tmp[5] = 0;
    tmp[6] = product[14];
   14756:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   14758:	9306      	str	r3, [sp, #24]
    carry += vli_add(result, result, tmp);
   1475a:	4405      	add	r5, r0
    tmp[7] = product[15];
   1475c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   1475e:	9307      	str	r3, [sp, #28]
    carry += vli_add(result, result, tmp);
   14760:	466a      	mov	r2, sp
   14762:	4621      	mov	r1, r4
   14764:	4620      	mov	r0, r4
    tmp[3] = tmp[4] = tmp[5] = 0;
   14766:	ed8d 7b04 	vstr	d7, [sp, #16]
   1476a:	9703      	str	r7, [sp, #12]
    carry += vli_add(result, result, tmp);
   1476c:	f7ff fa92 	bl	13c94 <vli_add>
   14770:	6b73      	ldr	r3, [r6, #52]	; 0x34

    /* s4 */
    tmp[0] = product[9];
   14772:	9303      	str	r3, [sp, #12]
   14774:	9306      	str	r3, [sp, #24]
   14776:	6a33      	ldr	r3, [r6, #32]
   14778:	9307      	str	r3, [sp, #28]
   1477a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1477c:	9301      	str	r3, [sp, #4]
   1477e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   14780:	9302      	str	r3, [sp, #8]
   14782:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   14784:	9304      	str	r3, [sp, #16]
   14786:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   14788:	9305      	str	r3, [sp, #20]
    carry += vli_add(result, result, tmp);
   1478a:	4405      	add	r5, r0
    tmp[0] = product[9];
   1478c:	6a73      	ldr	r3, [r6, #36]	; 0x24
   1478e:	9300      	str	r3, [sp, #0]
    tmp[3] = product[13];
    tmp[4] = product[14];
    tmp[5] = product[15];
    tmp[6] = product[13];
    tmp[7] = product[8];
    carry += vli_add(result, result, tmp);
   14790:	466a      	mov	r2, sp
   14792:	4621      	mov	r1, r4
   14794:	4620      	mov	r0, r4
   14796:	f7ff fa7d 	bl	13c94 <vli_add>

    /* d1 */
    tmp[0] = product[11];
   1479a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   1479c:	9300      	str	r3, [sp, #0]
    tmp[1] = product[12];
   1479e:	6b33      	ldr	r3, [r6, #48]	; 0x30
   147a0:	9301      	str	r3, [sp, #4]
    tmp[2] = product[13];
   147a2:	6b73      	ldr	r3, [r6, #52]	; 0x34
   147a4:	9302      	str	r3, [sp, #8]
    tmp[3] = tmp[4] = tmp[5] = 0;
    tmp[6] = product[8];
   147a6:	6a33      	ldr	r3, [r6, #32]
   147a8:	9306      	str	r3, [sp, #24]
    carry += vli_add(result, result, tmp);
   147aa:	4405      	add	r5, r0
    tmp[7] = product[10];
   147ac:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   147ae:	9307      	str	r3, [sp, #28]
    carry -= vli_sub(result, result, tmp);
   147b0:	466a      	mov	r2, sp
   147b2:	4621      	mov	r1, r4
   147b4:	4620      	mov	r0, r4
    tmp[3] = tmp[4] = tmp[5] = 0;
   147b6:	ed8d 7b04 	vstr	d7, [sp, #16]
   147ba:	9703      	str	r7, [sp, #12]
    carry -= vli_sub(result, result, tmp);
   147bc:	f7ff faaa 	bl	13d14 <vli_sub>

    /* d2 */
    tmp[0] = product[12];
   147c0:	6b33      	ldr	r3, [r6, #48]	; 0x30
   147c2:	9300      	str	r3, [sp, #0]
    tmp[1] = product[13];
   147c4:	6b73      	ldr	r3, [r6, #52]	; 0x34
   147c6:	9301      	str	r3, [sp, #4]
    tmp[2] = product[14];
   147c8:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   147ca:	9302      	str	r3, [sp, #8]
    tmp[3] = product[15];
   147cc:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   147ce:	9303      	str	r3, [sp, #12]
    tmp[4] = tmp[5] = 0;
    tmp[6] = product[9];
   147d0:	6a73      	ldr	r3, [r6, #36]	; 0x24
   147d2:	9306      	str	r3, [sp, #24]
    carry -= vli_sub(result, result, tmp);
   147d4:	1a2d      	subs	r5, r5, r0
    tmp[7] = product[11];
   147d6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   147d8:	9307      	str	r3, [sp, #28]
    carry -= vli_sub(result, result, tmp);
   147da:	466a      	mov	r2, sp
   147dc:	4621      	mov	r1, r4
   147de:	4620      	mov	r0, r4
    tmp[4] = tmp[5] = 0;
   147e0:	ed8d 7b04 	vstr	d7, [sp, #16]
    carry -= vli_sub(result, result, tmp);
   147e4:	f7ff fa96 	bl	13d14 <vli_sub>

    /* d3 */
    tmp[0] = product[13];
   147e8:	6b73      	ldr	r3, [r6, #52]	; 0x34
   147ea:	9300      	str	r3, [sp, #0]
    tmp[1] = product[14];
   147ec:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   147ee:	9301      	str	r3, [sp, #4]
    tmp[2] = product[15];
   147f0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   147f2:	9302      	str	r3, [sp, #8]
    tmp[3] = product[8];
   147f4:	6a33      	ldr	r3, [r6, #32]
   147f6:	9303      	str	r3, [sp, #12]
    tmp[4] = product[9];
   147f8:	6a73      	ldr	r3, [r6, #36]	; 0x24
   147fa:	9304      	str	r3, [sp, #16]
    tmp[5] = product[10];
   147fc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   147fe:	9305      	str	r3, [sp, #20]
    carry -= vli_sub(result, result, tmp);
   14800:	1a2d      	subs	r5, r5, r0
    tmp[6] = 0;
    tmp[7] = product[12];
   14802:	6b33      	ldr	r3, [r6, #48]	; 0x30
   14804:	9307      	str	r3, [sp, #28]
    carry -= vli_sub(result, result, tmp);
   14806:	466a      	mov	r2, sp
   14808:	4621      	mov	r1, r4
   1480a:	4620      	mov	r0, r4
    tmp[6] = 0;
   1480c:	9706      	str	r7, [sp, #24]
    carry -= vli_sub(result, result, tmp);
   1480e:	f7ff fa81 	bl	13d14 <vli_sub>
    tmp[2] = 0;
    tmp[3] = product[9];
    tmp[4] = product[10];
    tmp[5] = product[11];
    tmp[6] = 0;
    tmp[7] = product[13];
   14812:	6b73      	ldr	r3, [r6, #52]	; 0x34
   14814:	9307      	str	r3, [sp, #28]
    tmp[0] = product[14];
   14816:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   14818:	9300      	str	r3, [sp, #0]
    tmp[1] = product[15];
   1481a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   1481c:	9301      	str	r3, [sp, #4]
    tmp[3] = product[9];
   1481e:	6a73      	ldr	r3, [r6, #36]	; 0x24
   14820:	9303      	str	r3, [sp, #12]
    tmp[4] = product[10];
   14822:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   14824:	9304      	str	r3, [sp, #16]
    carry -= vli_sub(result, result, tmp);
   14826:	1a2d      	subs	r5, r5, r0
    tmp[5] = product[11];
   14828:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    tmp[2] = 0;
   1482a:	9702      	str	r7, [sp, #8]
    carry -= vli_sub(result, result, tmp);
   1482c:	466a      	mov	r2, sp
   1482e:	4621      	mov	r1, r4
   14830:	4620      	mov	r0, r4
    tmp[6] = 0;
   14832:	9706      	str	r7, [sp, #24]
    tmp[5] = product[11];
   14834:	9305      	str	r3, [sp, #20]
    carry -= vli_sub(result, result, tmp);
   14836:	f7ff fa6d 	bl	13d14 <vli_sub>

    if (carry < 0) {
   1483a:	1a2d      	subs	r5, r5, r0
        do {
            carry += vli_add(result, result, curve_p);
   1483c:	4e16      	ldr	r6, [pc, #88]	; (14898 <vli_mmod_fast+0x1c8>)
    if (carry < 0) {
   1483e:	d41d      	bmi.n	1487c <vli_mmod_fast+0x1ac>
        } while (carry < 0);
    } else {
        while (carry || vli_cmp(curve_p, result) != 1) {
   14840:	b9ad      	cbnz	r5, 1486e <vli_mmod_fast+0x19e>
        if (left[i] > right[i]) {
   14842:	69e3      	ldr	r3, [r4, #28]
   14844:	3301      	adds	r3, #1
   14846:	d120      	bne.n	1488a <vli_mmod_fast+0x1ba>
   14848:	69a3      	ldr	r3, [r4, #24]
   1484a:	b1f3      	cbz	r3, 1488a <vli_mmod_fast+0x1ba>
        } else if (left[i] < right[i]) {
   1484c:	2b01      	cmp	r3, #1
   1484e:	d10e      	bne.n	1486e <vli_mmod_fast+0x19e>
   14850:	6963      	ldr	r3, [r4, #20]
   14852:	b963      	cbnz	r3, 1486e <vli_mmod_fast+0x19e>
   14854:	6923      	ldr	r3, [r4, #16]
   14856:	b953      	cbnz	r3, 1486e <vli_mmod_fast+0x19e>
   14858:	68e3      	ldr	r3, [r4, #12]
   1485a:	b943      	cbnz	r3, 1486e <vli_mmod_fast+0x19e>
        if (left[i] > right[i]) {
   1485c:	68a3      	ldr	r3, [r4, #8]
   1485e:	3301      	adds	r3, #1
   14860:	d113      	bne.n	1488a <vli_mmod_fast+0x1ba>
   14862:	6863      	ldr	r3, [r4, #4]
   14864:	3301      	adds	r3, #1
   14866:	d110      	bne.n	1488a <vli_mmod_fast+0x1ba>
   14868:	6823      	ldr	r3, [r4, #0]
   1486a:	3301      	adds	r3, #1
   1486c:	d10d      	bne.n	1488a <vli_mmod_fast+0x1ba>
            carry -= vli_sub(result, result, curve_p);
   1486e:	4632      	mov	r2, r6
   14870:	4621      	mov	r1, r4
   14872:	4620      	mov	r0, r4
   14874:	f7ff fa4e 	bl	13d14 <vli_sub>
   14878:	1a2d      	subs	r5, r5, r0
   1487a:	e7e1      	b.n	14840 <vli_mmod_fast+0x170>
            carry += vli_add(result, result, curve_p);
   1487c:	4632      	mov	r2, r6
   1487e:	4621      	mov	r1, r4
   14880:	4620      	mov	r0, r4
   14882:	f7ff fa07 	bl	13c94 <vli_add>
        } while (carry < 0);
   14886:	182d      	adds	r5, r5, r0
   14888:	d4f8      	bmi.n	1487c <vli_mmod_fast+0x1ac>
        }
    }
}
   1488a:	b009      	add	sp, #36	; 0x24
   1488c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1488e:	bf00      	nop
	...
   14898:	000200e8 	.word	0x000200e8

0001489c <vli_modInv.part.0>:
#define EVEN(vli) (!(vli[0] & 1))
/* Computes result = (1 / input) % mod. All VLIs are the same size.
   See "From Euclid's GCD to Montgomery Multiplication to the Great Divide"
   https://labs.oracle.com/techrep/2001/smli_tr-2001-95.pdf */
#if !defined(asm_modInv) || !asm_modInv
static void vli_modInv(uECC_word_t *result, const uECC_word_t *input, const uECC_word_t *mod) {
   1489c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148a0:	ed2d 8b02 	vpush	{d8}
   148a4:	b0a5      	sub	sp, #148	; 0x94
        dest[i] = src[i];
   148a6:	460c      	mov	r4, r1
static void vli_modInv(uECC_word_t *result, const uECC_word_t *input, const uECC_word_t *mod) {
   148a8:	9003      	str	r0, [sp, #12]
        dest[i] = src[i];
   148aa:	4616      	mov	r6, r2
static void vli_modInv(uECC_word_t *result, const uECC_word_t *input, const uECC_word_t *mod) {
   148ac:	ee08 2a10 	vmov	s16, r2
        dest[i] = src[i];
   148b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   148b2:	af04      	add	r7, sp, #16
   148b4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   148b6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   148ba:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   148be:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   148c0:	ad0c      	add	r5, sp, #48	; 0x30
   148c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   148c4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
        vli[i] = 0;
   148c8:	f04f 0c00 	mov.w	ip, #0
        dest[i] = src[i];
   148cc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    }

    vli_set(a, input);
    vli_set(b, mod);
    vli_clear(u);
    u[0] = 1;
   148d0:	f04f 0e01 	mov.w	lr, #1
        vli[i] = 0;
   148d4:	4661      	mov	r1, ip
   148d6:	2220      	movs	r2, #32
   148d8:	a81c      	add	r0, sp, #112	; 0x70
    u[0] = 1;
   148da:	e9cd ec14 	strd	lr, ip, [sp, #80]	; 0x50
        vli[i] = 0;
   148de:	e9cd cc16 	strd	ip, ip, [sp, #88]	; 0x58
   148e2:	e9cd cc18 	strd	ip, ip, [sp, #96]	; 0x60
   148e6:	e9cd cc1a 	strd	ip, ip, [sp, #104]	; 0x68
   148ea:	f008 f915 	bl	1cb18 <memset>
        if (left[i] > right[i]) {
   148ee:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   148f2:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
    vli_clear(v);
    while ((cmpResult = vli_cmp(a, b)) != 0) {
        carry = 0;
        if (EVEN(a)) {
   148f6:	9c04      	ldr	r4, [sp, #16]
        if (left[i] > right[i]) {
   148f8:	45da      	cmp	sl, fp
   148fa:	d844      	bhi.n	14986 <vli_modInv.part.0+0xea>
        } else if (left[i] < right[i]) {
   148fc:	f0c0 80e6 	bcc.w	14acc <vli_modInv.part.0+0x230>
        if (left[i] > right[i]) {
   14900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14902:	9e12      	ldr	r6, [sp, #72]	; 0x48
   14904:	42b3      	cmp	r3, r6
   14906:	f200 8187 	bhi.w	14c18 <vli_modInv.part.0+0x37c>
        } else if (left[i] < right[i]) {
   1490a:	f0c0 81ef 	bcc.w	14cec <vli_modInv.part.0+0x450>
        if (left[i] > right[i]) {
   1490e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   14910:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
   14914:	4562      	cmp	r2, ip
   14916:	f200 81fa 	bhi.w	14d0e <vli_modInv.part.0+0x472>
        } else if (left[i] < right[i]) {
   1491a:	f0c0 8273 	bcc.w	14e04 <vli_modInv.part.0+0x568>
        if (left[i] > right[i]) {
   1491e:	9908      	ldr	r1, [sp, #32]
   14920:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   14924:	4571      	cmp	r1, lr
   14926:	f200 8276 	bhi.w	14e16 <vli_modInv.part.0+0x57a>
        } else if (left[i] < right[i]) {
   1492a:	f0c0 827d 	bcc.w	14e28 <vli_modInv.part.0+0x58c>
        if (left[i] > right[i]) {
   1492e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   14930:	9807      	ldr	r0, [sp, #28]
   14932:	9501      	str	r5, [sp, #4]
   14934:	42a8      	cmp	r0, r5
   14936:	f200 8280 	bhi.w	14e3a <vli_modInv.part.0+0x59e>
        } else if (left[i] < right[i]) {
   1493a:	f0c0 8287 	bcc.w	14e4c <vli_modInv.part.0+0x5b0>
        if (left[i] > right[i]) {
   1493e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   14940:	9d06      	ldr	r5, [sp, #24]
   14942:	9702      	str	r7, [sp, #8]
   14944:	42bd      	cmp	r5, r7
   14946:	f200 828b 	bhi.w	14e60 <vli_modInv.part.0+0x5c4>
        } else if (left[i] < right[i]) {
   1494a:	f0c0 8297 	bcc.w	14e7c <vli_modInv.part.0+0x5e0>
        if (left[i] > right[i]) {
   1494e:	9f05      	ldr	r7, [sp, #20]
   14950:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   14954:	454f      	cmp	r7, r9
   14956:	f200 829c 	bhi.w	14e92 <vli_modInv.part.0+0x5f6>
        } else if (left[i] < right[i]) {
   1495a:	f0c0 82a6 	bcc.w	14eaa <vli_modInv.part.0+0x60e>
        if (left[i] > right[i]) {
   1495e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   14962:	4544      	cmp	r4, r8
   14964:	f200 82ac 	bhi.w	14ec0 <vli_modInv.part.0+0x624>
        } else if (left[i] < right[i]) {
   14968:	f0c0 82b3 	bcc.w	14ed2 <vli_modInv.part.0+0x636>
        dest[i] = src[i];
   1496c:	ac14      	add	r4, sp, #80	; 0x50
   1496e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   14970:	9d03      	ldr	r5, [sp, #12]
   14972:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   14974:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   14978:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                v[uECC_WORDS - 1] |= HIGH_BIT_SET;
            }
        }
    }
    vli_set(result, u);
}
   1497c:	b025      	add	sp, #148	; 0x94
   1497e:	ecbd 8b02 	vpop	{d8}
   14982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (EVEN(a)) {
   14986:	07e5      	lsls	r5, r4, #31
   14988:	f140 81d7 	bpl.w	14d3a <vli_modInv.part.0+0x49e>
        } else if (EVEN(b)) {
   1498c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   14990:	f018 0f01 	tst.w	r8, #1
   14994:	f000 82a6 	beq.w	14ee4 <vli_modInv.part.0+0x648>
            vli_sub(a, a, b);
   14998:	a904      	add	r1, sp, #16
   1499a:	aa0c      	add	r2, sp, #48	; 0x30
   1499c:	4608      	mov	r0, r1
   1499e:	f7ff f9b9 	bl	13d14 <vli_sub>
        uECC_word_t temp = *vli;
   149a2:	e9dd 0509 	ldrd	r0, r5, [sp, #36]	; 0x24
   149a6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   149a8:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
        *vli = (temp >> 1) | carry;
   149ac:	0873      	lsrs	r3, r6, #1
   149ae:	086f      	lsrs	r7, r5, #1
   149b0:	ea47 77c6 	orr.w	r7, r7, r6, lsl #31
   149b4:	930b      	str	r3, [sp, #44]	; 0x2c
   149b6:	0846      	lsrs	r6, r0, #1
        uECC_word_t temp = *vli;
   149b8:	e9dd 3405 	ldrd	r3, r4, [sp, #20]
        *vli = (temp >> 1) | carry;
   149bc:	ea46 76c5 	orr.w	r6, r6, r5, lsl #31
   149c0:	084d      	lsrs	r5, r1, #1
   149c2:	ea45 75c0 	orr.w	r5, r5, r0, lsl #31
   149c6:	0850      	lsrs	r0, r2, #1
   149c8:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
   149cc:	0861      	lsrs	r1, r4, #1
   149ce:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
   149d2:	085a      	lsrs	r2, r3, #1
   149d4:	ea42 72c4 	orr.w	r2, r2, r4, lsl #31
   149d8:	9205      	str	r2, [sp, #20]
   149da:	9a04      	ldr	r2, [sp, #16]
   149dc:	970a      	str	r7, [sp, #40]	; 0x28
        carry = temp << (uECC_WORD_BITS - 1);
   149de:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
   149e0:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   149e4:	9304      	str	r3, [sp, #16]
        if (left[i] > right[i]) {
   149e6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   149e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
        *vli = (temp >> 1) | carry;
   149ea:	9609      	str	r6, [sp, #36]	; 0x24
        if (left[i] > right[i]) {
   149ec:	429a      	cmp	r2, r3
        *vli = (temp >> 1) | carry;
   149ee:	9508      	str	r5, [sp, #32]
   149f0:	9007      	str	r0, [sp, #28]
   149f2:	9106      	str	r1, [sp, #24]
        if (left[i] > right[i]) {
   149f4:	d82a      	bhi.n	14a4c <vli_modInv.part.0+0x1b0>
        } else if (left[i] < right[i]) {
   149f6:	f0c0 8183 	bcc.w	14d00 <vli_modInv.part.0+0x464>
        if (left[i] > right[i]) {
   149fa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   149fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
   149fe:	429a      	cmp	r2, r3
   14a00:	d824      	bhi.n	14a4c <vli_modInv.part.0+0x1b0>
        } else if (left[i] < right[i]) {
   14a02:	f0c0 817d 	bcc.w	14d00 <vli_modInv.part.0+0x464>
        if (left[i] > right[i]) {
   14a06:	9a19      	ldr	r2, [sp, #100]	; 0x64
   14a08:	9b21      	ldr	r3, [sp, #132]	; 0x84
   14a0a:	429a      	cmp	r2, r3
   14a0c:	d81e      	bhi.n	14a4c <vli_modInv.part.0+0x1b0>
        } else if (left[i] < right[i]) {
   14a0e:	f0c0 8177 	bcc.w	14d00 <vli_modInv.part.0+0x464>
        if (left[i] > right[i]) {
   14a12:	9a18      	ldr	r2, [sp, #96]	; 0x60
   14a14:	9b20      	ldr	r3, [sp, #128]	; 0x80
   14a16:	429a      	cmp	r2, r3
   14a18:	d818      	bhi.n	14a4c <vli_modInv.part.0+0x1b0>
        } else if (left[i] < right[i]) {
   14a1a:	f0c0 8171 	bcc.w	14d00 <vli_modInv.part.0+0x464>
        if (left[i] > right[i]) {
   14a1e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   14a20:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14a22:	429a      	cmp	r2, r3
   14a24:	d812      	bhi.n	14a4c <vli_modInv.part.0+0x1b0>
        } else if (left[i] < right[i]) {
   14a26:	f0c0 816b 	bcc.w	14d00 <vli_modInv.part.0+0x464>
        if (left[i] > right[i]) {
   14a2a:	9a16      	ldr	r2, [sp, #88]	; 0x58
   14a2c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   14a2e:	429a      	cmp	r2, r3
   14a30:	d80c      	bhi.n	14a4c <vli_modInv.part.0+0x1b0>
        } else if (left[i] < right[i]) {
   14a32:	f0c0 8165 	bcc.w	14d00 <vli_modInv.part.0+0x464>
        if (left[i] > right[i]) {
   14a36:	9a15      	ldr	r2, [sp, #84]	; 0x54
   14a38:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   14a3a:	429a      	cmp	r2, r3
   14a3c:	d806      	bhi.n	14a4c <vli_modInv.part.0+0x1b0>
        } else if (left[i] < right[i]) {
   14a3e:	f0c0 815f 	bcc.w	14d00 <vli_modInv.part.0+0x464>
   14a42:	9a14      	ldr	r2, [sp, #80]	; 0x50
   14a44:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   14a46:	429a      	cmp	r2, r3
   14a48:	f0c0 815a 	bcc.w	14d00 <vli_modInv.part.0+0x464>
            vli_sub(u, u, v);
   14a4c:	a914      	add	r1, sp, #80	; 0x50
   14a4e:	aa1c      	add	r2, sp, #112	; 0x70
   14a50:	4608      	mov	r0, r1
   14a52:	f7ff f95f 	bl	13d14 <vli_sub>
            if (!EVEN(u)) {
   14a56:	9b14      	ldr	r3, [sp, #80]	; 0x50
   14a58:	f013 0001 	ands.w	r0, r3, #1
   14a5c:	d12e      	bne.n	14abc <vli_modInv.part.0+0x220>
        uECC_word_t temp = *vli;
   14a5e:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
   14a62:	e9dd 5417 	ldrd	r5, r4, [sp, #92]	; 0x5c
        *vli = (temp >> 1) | carry;
   14a66:	085b      	lsrs	r3, r3, #1
   14a68:	ea43 73c7 	orr.w	r3, r3, r7, lsl #31
   14a6c:	087f      	lsrs	r7, r7, #1
        uECC_word_t temp = *vli;
   14a6e:	e9dd 1219 	ldrd	r1, r2, [sp, #100]	; 0x64
        *vli = (temp >> 1) | carry;
   14a72:	ea47 77c6 	orr.w	r7, r7, r6, lsl #31
   14a76:	0876      	lsrs	r6, r6, #1
   14a78:	ea46 76c5 	orr.w	r6, r6, r5, lsl #31
   14a7c:	086d      	lsrs	r5, r5, #1
   14a7e:	ea45 75c4 	orr.w	r5, r5, r4, lsl #31
   14a82:	0864      	lsrs	r4, r4, #1
   14a84:	ea44 74c1 	orr.w	r4, r4, r1, lsl #31
   14a88:	9314      	str	r3, [sp, #80]	; 0x50
   14a8a:	0849      	lsrs	r1, r1, #1
        uECC_word_t temp = *vli;
   14a8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
        *vli = (temp >> 1) | carry;
   14a8e:	9715      	str	r7, [sp, #84]	; 0x54
   14a90:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
   14a94:	0852      	lsrs	r2, r2, #1
   14a96:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
   14a9a:	085b      	lsrs	r3, r3, #1
   14a9c:	9616      	str	r6, [sp, #88]	; 0x58
   14a9e:	9517      	str	r5, [sp, #92]	; 0x5c
   14aa0:	9418      	str	r4, [sp, #96]	; 0x60
   14aa2:	9119      	str	r1, [sp, #100]	; 0x64
   14aa4:	921a      	str	r2, [sp, #104]	; 0x68
   14aa6:	931b      	str	r3, [sp, #108]	; 0x6c
            if (carry) {
   14aa8:	b110      	cbz	r0, 14ab0 <vli_modInv.part.0+0x214>
                u[uECC_WORDS - 1] |= HIGH_BIT_SET;
   14aaa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   14aae:	931b      	str	r3, [sp, #108]	; 0x6c
        if (left[i] > right[i]) {
   14ab0:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   14ab4:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
        if (EVEN(a)) {
   14ab8:	9c04      	ldr	r4, [sp, #16]
   14aba:	e71d      	b.n	148f8 <vli_modInv.part.0+0x5c>
                carry = vli_add(u, u, mod);
   14abc:	a914      	add	r1, sp, #80	; 0x50
   14abe:	ee18 2a10 	vmov	r2, s16
   14ac2:	4608      	mov	r0, r1
   14ac4:	f7ff f8e6 	bl	13c94 <vli_add>
        uECC_word_t temp = *vli;
   14ac8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   14aca:	e7c8      	b.n	14a5e <vli_modInv.part.0+0x1c2>
        if (EVEN(a)) {
   14acc:	07e3      	lsls	r3, r4, #31
   14ace:	f140 8134 	bpl.w	14d3a <vli_modInv.part.0+0x49e>
        } else if (EVEN(b)) {
   14ad2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   14ad6:	f018 0f01 	tst.w	r8, #1
   14ada:	f000 8203 	beq.w	14ee4 <vli_modInv.part.0+0x648>
            vli_sub(b, b, a);
   14ade:	a90c      	add	r1, sp, #48	; 0x30
   14ae0:	aa04      	add	r2, sp, #16
   14ae2:	4608      	mov	r0, r1
   14ae4:	f7ff f916 	bl	13d14 <vli_sub>
        uECC_word_t temp = *vli;
   14ae8:	e9dd 4511 	ldrd	r4, r5, [sp, #68]	; 0x44
   14aec:	e9dd 0e0f 	ldrd	r0, lr, [sp, #60]	; 0x3c
   14af0:	e9dd 370d 	ldrd	r3, r7, [sp, #52]	; 0x34
   14af4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
        *vli = (temp >> 1) | carry;
   14af6:	0869      	lsrs	r1, r5, #1
   14af8:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
   14afc:	0866      	lsrs	r6, r4, #1
   14afe:	ea46 76c5 	orr.w	r6, r6, r5, lsl #31
   14b02:	9112      	str	r1, [sp, #72]	; 0x48
   14b04:	ea4f 055e 	mov.w	r5, lr, lsr #1
   14b08:	0879      	lsrs	r1, r7, #1
   14b0a:	0852      	lsrs	r2, r2, #1
   14b0c:	ea45 75c4 	orr.w	r5, r5, r4, lsl #31
   14b10:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
   14b14:	0844      	lsrs	r4, r0, #1
   14b16:	980c      	ldr	r0, [sp, #48]	; 0x30
   14b18:	9213      	str	r2, [sp, #76]	; 0x4c
   14b1a:	085a      	lsrs	r2, r3, #1
        carry = temp << (uECC_WORD_BITS - 1);
   14b1c:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
   14b1e:	ea44 74ce 	orr.w	r4, r4, lr, lsl #31
   14b22:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
   14b26:	940f      	str	r4, [sp, #60]	; 0x3c
   14b28:	930c      	str	r3, [sp, #48]	; 0x30
        if (left[i] > right[i]) {
   14b2a:	9c23      	ldr	r4, [sp, #140]	; 0x8c
   14b2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
        *vli = (temp >> 1) | carry;
   14b2e:	9611      	str	r6, [sp, #68]	; 0x44
   14b30:	ea42 72c7 	orr.w	r2, r2, r7, lsl #31
        if (left[i] > right[i]) {
   14b34:	429c      	cmp	r4, r3
        *vli = (temp >> 1) | carry;
   14b36:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
   14b3a:	9510      	str	r5, [sp, #64]	; 0x40
        if (left[i] > right[i]) {
   14b3c:	d822      	bhi.n	14b84 <vli_modInv.part.0+0x2e8>
        } else if (left[i] < right[i]) {
   14b3e:	d364      	bcc.n	14c0a <vli_modInv.part.0+0x36e>
        if (left[i] > right[i]) {
   14b40:	9a22      	ldr	r2, [sp, #136]	; 0x88
   14b42:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   14b44:	429a      	cmp	r2, r3
   14b46:	d81d      	bhi.n	14b84 <vli_modInv.part.0+0x2e8>
        } else if (left[i] < right[i]) {
   14b48:	d35f      	bcc.n	14c0a <vli_modInv.part.0+0x36e>
        if (left[i] > right[i]) {
   14b4a:	9a21      	ldr	r2, [sp, #132]	; 0x84
   14b4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   14b4e:	429a      	cmp	r2, r3
   14b50:	d818      	bhi.n	14b84 <vli_modInv.part.0+0x2e8>
        } else if (left[i] < right[i]) {
   14b52:	d35a      	bcc.n	14c0a <vli_modInv.part.0+0x36e>
        if (left[i] > right[i]) {
   14b54:	9a20      	ldr	r2, [sp, #128]	; 0x80
   14b56:	9b18      	ldr	r3, [sp, #96]	; 0x60
   14b58:	429a      	cmp	r2, r3
   14b5a:	d813      	bhi.n	14b84 <vli_modInv.part.0+0x2e8>
        } else if (left[i] < right[i]) {
   14b5c:	d355      	bcc.n	14c0a <vli_modInv.part.0+0x36e>
        if (left[i] > right[i]) {
   14b5e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   14b60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   14b62:	429a      	cmp	r2, r3
   14b64:	d80e      	bhi.n	14b84 <vli_modInv.part.0+0x2e8>
        } else if (left[i] < right[i]) {
   14b66:	d350      	bcc.n	14c0a <vli_modInv.part.0+0x36e>
        if (left[i] > right[i]) {
   14b68:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   14b6a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   14b6c:	429a      	cmp	r2, r3
   14b6e:	d809      	bhi.n	14b84 <vli_modInv.part.0+0x2e8>
        } else if (left[i] < right[i]) {
   14b70:	d34b      	bcc.n	14c0a <vli_modInv.part.0+0x36e>
        if (left[i] > right[i]) {
   14b72:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   14b74:	9b15      	ldr	r3, [sp, #84]	; 0x54
   14b76:	429a      	cmp	r2, r3
   14b78:	d804      	bhi.n	14b84 <vli_modInv.part.0+0x2e8>
        } else if (left[i] < right[i]) {
   14b7a:	d346      	bcc.n	14c0a <vli_modInv.part.0+0x36e>
   14b7c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   14b7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   14b80:	429a      	cmp	r2, r3
   14b82:	d342      	bcc.n	14c0a <vli_modInv.part.0+0x36e>
            vli_sub(v, v, u);
   14b84:	a91c      	add	r1, sp, #112	; 0x70
   14b86:	aa14      	add	r2, sp, #80	; 0x50
   14b88:	4608      	mov	r0, r1
   14b8a:	f7ff f8c3 	bl	13d14 <vli_sub>
            if (!EVEN(v)) {
   14b8e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   14b90:	f013 0001 	ands.w	r0, r3, #1
   14b94:	d131      	bne.n	14bfa <vli_modInv.part.0+0x35e>
        uECC_word_t temp = *vli;
   14b96:	e9dd c71d 	ldrd	ip, r7, [sp, #116]	; 0x74
   14b9a:	e9dd 641f 	ldrd	r6, r4, [sp, #124]	; 0x7c
        *vli = (temp >> 1) | carry;
   14b9e:	085b      	lsrs	r3, r3, #1
   14ba0:	ea43 73cc 	orr.w	r3, r3, ip, lsl #31
   14ba4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
        uECC_word_t temp = *vli;
   14ba8:	e9dd 1221 	ldrd	r1, r2, [sp, #132]	; 0x84
        *vli = (temp >> 1) | carry;
   14bac:	931c      	str	r3, [sp, #112]	; 0x70
   14bae:	ea4c 73c7 	orr.w	r3, ip, r7, lsl #31
   14bb2:	087f      	lsrs	r7, r7, #1
   14bb4:	ea47 77c6 	orr.w	r7, r7, r6, lsl #31
   14bb8:	0876      	lsrs	r6, r6, #1
   14bba:	ea46 76c4 	orr.w	r6, r6, r4, lsl #31
   14bbe:	0864      	lsrs	r4, r4, #1
        uECC_word_t temp = *vli;
   14bc0:	9d23      	ldr	r5, [sp, #140]	; 0x8c
        *vli = (temp >> 1) | carry;
   14bc2:	931d      	str	r3, [sp, #116]	; 0x74
   14bc4:	ea44 74c1 	orr.w	r4, r4, r1, lsl #31
   14bc8:	0849      	lsrs	r1, r1, #1
   14bca:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
   14bce:	0852      	lsrs	r2, r2, #1
   14bd0:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
   14bd4:	086d      	lsrs	r5, r5, #1
   14bd6:	971e      	str	r7, [sp, #120]	; 0x78
   14bd8:	961f      	str	r6, [sp, #124]	; 0x7c
   14bda:	9420      	str	r4, [sp, #128]	; 0x80
   14bdc:	9121      	str	r1, [sp, #132]	; 0x84
   14bde:	9222      	str	r2, [sp, #136]	; 0x88
   14be0:	9523      	str	r5, [sp, #140]	; 0x8c
            if (carry) {
   14be2:	2800      	cmp	r0, #0
   14be4:	f43f af64 	beq.w	14ab0 <vli_modInv.part.0+0x214>
                v[uECC_WORDS - 1] |= HIGH_BIT_SET;
   14be8:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
        if (left[i] > right[i]) {
   14bec:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   14bf0:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
        if (EVEN(a)) {
   14bf4:	9c04      	ldr	r4, [sp, #16]
                v[uECC_WORDS - 1] |= HIGH_BIT_SET;
   14bf6:	9523      	str	r5, [sp, #140]	; 0x8c
   14bf8:	e67e      	b.n	148f8 <vli_modInv.part.0+0x5c>
                carry = vli_add(v, v, mod);
   14bfa:	a91c      	add	r1, sp, #112	; 0x70
   14bfc:	ee18 2a10 	vmov	r2, s16
   14c00:	4608      	mov	r0, r1
   14c02:	f7ff f847 	bl	13c94 <vli_add>
        uECC_word_t temp = *vli;
   14c06:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   14c08:	e7c5      	b.n	14b96 <vli_modInv.part.0+0x2fa>
                vli_add(v, v, mod);
   14c0a:	a91c      	add	r1, sp, #112	; 0x70
   14c0c:	ee18 2a10 	vmov	r2, s16
   14c10:	4608      	mov	r0, r1
   14c12:	f7ff f83f 	bl	13c94 <vli_add>
   14c16:	e7b5      	b.n	14b84 <vli_modInv.part.0+0x2e8>
        if (EVEN(a)) {
   14c18:	07e2      	lsls	r2, r4, #31
   14c1a:	f140 8166 	bpl.w	14eea <vli_modInv.part.0+0x64e>
        } else if (EVEN(b)) {
   14c1e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   14c22:	f018 0f01 	tst.w	r8, #1
   14c26:	f47f aeb7 	bne.w	14998 <vli_modInv.part.0+0xfc>
   14c2a:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
   14c2e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   14c32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14c34:	9301      	str	r3, [sp, #4]
   14c36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14c38:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   14c3c:	9302      	str	r3, [sp, #8]
   14c3e:	461a      	mov	r2, r3
        *vli = (temp >> 1) | carry;
   14c40:	ea4f 0858 	mov.w	r8, r8, lsr #1
   14c44:	ea48 73c9 	orr.w	r3, r8, r9, lsl #31
   14c48:	ea4f 0959 	mov.w	r9, r9, lsr #1
   14c4c:	930c      	str	r3, [sp, #48]	; 0x30
   14c4e:	ea49 73c2 	orr.w	r3, r9, r2, lsl #31
   14c52:	930d      	str	r3, [sp, #52]	; 0x34
   14c54:	0853      	lsrs	r3, r2, #1
   14c56:	9a01      	ldr	r2, [sp, #4]
   14c58:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   14c5c:	930e      	str	r3, [sp, #56]	; 0x38
   14c5e:	0853      	lsrs	r3, r2, #1
   14c60:	ea43 73ce 	orr.w	r3, r3, lr, lsl #31
   14c64:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
   14c68:	930f      	str	r3, [sp, #60]	; 0x3c
   14c6a:	ea4e 73cc 	orr.w	r3, lr, ip, lsl #31
   14c6e:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   14c72:	9310      	str	r3, [sp, #64]	; 0x40
   14c74:	ea4c 73c6 	orr.w	r3, ip, r6, lsl #31
   14c78:	9311      	str	r3, [sp, #68]	; 0x44
            if (!EVEN(v)) {
   14c7a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
        *vli = (temp >> 1) | carry;
   14c7c:	0876      	lsrs	r6, r6, #1
   14c7e:	ea46 76cb 	orr.w	r6, r6, fp, lsl #31
   14c82:	ea4f 025b 	mov.w	r2, fp, lsr #1
            if (!EVEN(v)) {
   14c86:	f013 0001 	ands.w	r0, r3, #1
        *vli = (temp >> 1) | carry;
   14c8a:	9612      	str	r6, [sp, #72]	; 0x48
   14c8c:	9213      	str	r2, [sp, #76]	; 0x4c
            if (!EVEN(v)) {
   14c8e:	d147      	bne.n	14d20 <vli_modInv.part.0+0x484>
   14c90:	4693      	mov	fp, r2
        uECC_word_t temp = *vli;
   14c92:	e9dd c71d 	ldrd	ip, r7, [sp, #116]	; 0x74
   14c96:	e9dd 651f 	ldrd	r6, r5, [sp, #124]	; 0x7c
        *vli = (temp >> 1) | carry;
   14c9a:	085b      	lsrs	r3, r3, #1
   14c9c:	ea43 73cc 	orr.w	r3, r3, ip, lsl #31
   14ca0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
        uECC_word_t temp = *vli;
   14ca4:	e9dd 1221 	ldrd	r1, r2, [sp, #132]	; 0x84
        *vli = (temp >> 1) | carry;
   14ca8:	931c      	str	r3, [sp, #112]	; 0x70
   14caa:	ea4c 73c7 	orr.w	r3, ip, r7, lsl #31
   14cae:	087f      	lsrs	r7, r7, #1
   14cb0:	ea47 77c6 	orr.w	r7, r7, r6, lsl #31
   14cb4:	0876      	lsrs	r6, r6, #1
   14cb6:	ea46 76c5 	orr.w	r6, r6, r5, lsl #31
   14cba:	086d      	lsrs	r5, r5, #1
   14cbc:	ea45 75c1 	orr.w	r5, r5, r1, lsl #31
   14cc0:	931d      	str	r3, [sp, #116]	; 0x74
   14cc2:	0849      	lsrs	r1, r1, #1
        uECC_word_t temp = *vli;
   14cc4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
        *vli = (temp >> 1) | carry;
   14cc6:	971e      	str	r7, [sp, #120]	; 0x78
   14cc8:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
   14ccc:	0852      	lsrs	r2, r2, #1
   14cce:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
   14cd2:	085b      	lsrs	r3, r3, #1
   14cd4:	961f      	str	r6, [sp, #124]	; 0x7c
   14cd6:	9520      	str	r5, [sp, #128]	; 0x80
   14cd8:	9121      	str	r1, [sp, #132]	; 0x84
   14cda:	9222      	str	r2, [sp, #136]	; 0x88
   14cdc:	9323      	str	r3, [sp, #140]	; 0x8c
            if (carry) {
   14cde:	2800      	cmp	r0, #0
   14ce0:	f43f ae0a 	beq.w	148f8 <vli_modInv.part.0+0x5c>
                v[uECC_WORDS - 1] |= HIGH_BIT_SET;
   14ce4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   14ce8:	9323      	str	r3, [sp, #140]	; 0x8c
   14cea:	e605      	b.n	148f8 <vli_modInv.part.0+0x5c>
        if (EVEN(a)) {
   14cec:	07e0      	lsls	r0, r4, #31
   14cee:	f140 80fc 	bpl.w	14eea <vli_modInv.part.0+0x64e>
        } else if (EVEN(b)) {
   14cf2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   14cf6:	f018 0f01 	tst.w	r8, #1
   14cfa:	f47f aef0 	bne.w	14ade <vli_modInv.part.0+0x242>
   14cfe:	e794      	b.n	14c2a <vli_modInv.part.0+0x38e>
                vli_add(u, u, mod);
   14d00:	a914      	add	r1, sp, #80	; 0x50
   14d02:	ee18 2a10 	vmov	r2, s16
   14d06:	4608      	mov	r0, r1
   14d08:	f7fe ffc4 	bl	13c94 <vli_add>
   14d0c:	e69e      	b.n	14a4c <vli_modInv.part.0+0x1b0>
        if (EVEN(a)) {
   14d0e:	07e1      	lsls	r1, r4, #31
   14d10:	d515      	bpl.n	14d3e <vli_modInv.part.0+0x4a2>
        } else if (EVEN(b)) {
   14d12:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   14d16:	f018 0f01 	tst.w	r8, #1
   14d1a:	f47f ae3d 	bne.w	14998 <vli_modInv.part.0+0xfc>
   14d1e:	e786      	b.n	14c2e <vli_modInv.part.0+0x392>
                carry = vli_add(v, v, mod);
   14d20:	a91c      	add	r1, sp, #112	; 0x70
   14d22:	ee18 2a10 	vmov	r2, s16
   14d26:	4608      	mov	r0, r1
   14d28:	f7fe ffb4 	bl	13c94 <vli_add>
        uECC_word_t temp = *vli;
   14d2c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
        if (left[i] > right[i]) {
   14d2e:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   14d32:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
        if (EVEN(a)) {
   14d36:	9c04      	ldr	r4, [sp, #16]
   14d38:	e7ab      	b.n	14c92 <vli_modInv.part.0+0x3f6>
   14d3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   14d3e:	9908      	ldr	r1, [sp, #32]
   14d40:	9807      	ldr	r0, [sp, #28]
   14d42:	9d06      	ldr	r5, [sp, #24]
   14d44:	9e05      	ldr	r6, [sp, #20]
   14d46:	4637      	mov	r7, r6
        *vli = (temp >> 1) | carry;
   14d48:	0864      	lsrs	r4, r4, #1
   14d4a:	ea44 74c7 	orr.w	r4, r4, r7, lsl #31
   14d4e:	087f      	lsrs	r7, r7, #1
   14d50:	ea47 77c5 	orr.w	r7, r7, r5, lsl #31
   14d54:	086d      	lsrs	r5, r5, #1
   14d56:	ea45 75c0 	orr.w	r5, r5, r0, lsl #31
   14d5a:	0840      	lsrs	r0, r0, #1
   14d5c:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
   14d60:	0849      	lsrs	r1, r1, #1
   14d62:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
   14d66:	0852      	lsrs	r2, r2, #1
   14d68:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
   14d6c:	085b      	lsrs	r3, r3, #1
   14d6e:	ea43 73ca 	orr.w	r3, r3, sl, lsl #31
   14d72:	930a      	str	r3, [sp, #40]	; 0x28
            if (!EVEN(u)) {
   14d74:	9b14      	ldr	r3, [sp, #80]	; 0x50
        *vli = (temp >> 1) | carry;
   14d76:	9007      	str	r0, [sp, #28]
   14d78:	9209      	str	r2, [sp, #36]	; 0x24
            if (!EVEN(u)) {
   14d7a:	f013 0001 	ands.w	r0, r3, #1
        *vli = (temp >> 1) | carry;
   14d7e:	ea4f 025a 	mov.w	r2, sl, lsr #1
   14d82:	9705      	str	r7, [sp, #20]
   14d84:	9506      	str	r5, [sp, #24]
   14d86:	9108      	str	r1, [sp, #32]
   14d88:	920b      	str	r2, [sp, #44]	; 0x2c
   14d8a:	9404      	str	r4, [sp, #16]
            if (!EVEN(u)) {
   14d8c:	d12d      	bne.n	14dea <vli_modInv.part.0+0x54e>
   14d8e:	4692      	mov	sl, r2
        uECC_word_t temp = *vli;
   14d90:	e9dd c715 	ldrd	ip, r7, [sp, #84]	; 0x54
   14d94:	e9dd 6517 	ldrd	r6, r5, [sp, #92]	; 0x5c
        *vli = (temp >> 1) | carry;
   14d98:	085b      	lsrs	r3, r3, #1
   14d9a:	ea43 73cc 	orr.w	r3, r3, ip, lsl #31
   14d9e:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
        uECC_word_t temp = *vli;
   14da2:	e9dd 1219 	ldrd	r1, r2, [sp, #100]	; 0x64
        *vli = (temp >> 1) | carry;
   14da6:	9314      	str	r3, [sp, #80]	; 0x50
   14da8:	ea4c 73c7 	orr.w	r3, ip, r7, lsl #31
   14dac:	087f      	lsrs	r7, r7, #1
   14dae:	ea47 77c6 	orr.w	r7, r7, r6, lsl #31
   14db2:	0876      	lsrs	r6, r6, #1
   14db4:	ea46 76c5 	orr.w	r6, r6, r5, lsl #31
   14db8:	086d      	lsrs	r5, r5, #1
   14dba:	ea45 75c1 	orr.w	r5, r5, r1, lsl #31
   14dbe:	9315      	str	r3, [sp, #84]	; 0x54
   14dc0:	0849      	lsrs	r1, r1, #1
        uECC_word_t temp = *vli;
   14dc2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
        *vli = (temp >> 1) | carry;
   14dc4:	9716      	str	r7, [sp, #88]	; 0x58
   14dc6:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
   14dca:	0852      	lsrs	r2, r2, #1
   14dcc:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
   14dd0:	085b      	lsrs	r3, r3, #1
   14dd2:	9617      	str	r6, [sp, #92]	; 0x5c
   14dd4:	9518      	str	r5, [sp, #96]	; 0x60
   14dd6:	9119      	str	r1, [sp, #100]	; 0x64
   14dd8:	921a      	str	r2, [sp, #104]	; 0x68
   14dda:	931b      	str	r3, [sp, #108]	; 0x6c
            if (carry) {
   14ddc:	2800      	cmp	r0, #0
   14dde:	f43f ad8b 	beq.w	148f8 <vli_modInv.part.0+0x5c>
                u[uECC_WORDS - 1] |= HIGH_BIT_SET;
   14de2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   14de6:	931b      	str	r3, [sp, #108]	; 0x6c
   14de8:	e586      	b.n	148f8 <vli_modInv.part.0+0x5c>
                carry = vli_add(u, u, mod);
   14dea:	a914      	add	r1, sp, #80	; 0x50
   14dec:	ee18 2a10 	vmov	r2, s16
   14df0:	4608      	mov	r0, r1
   14df2:	f7fe ff4f 	bl	13c94 <vli_add>
        uECC_word_t temp = *vli;
   14df6:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (left[i] > right[i]) {
   14df8:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   14dfc:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
        if (EVEN(a)) {
   14e00:	9c04      	ldr	r4, [sp, #16]
   14e02:	e7c5      	b.n	14d90 <vli_modInv.part.0+0x4f4>
   14e04:	07e1      	lsls	r1, r4, #31
   14e06:	d59a      	bpl.n	14d3e <vli_modInv.part.0+0x4a2>
        } else if (EVEN(b)) {
   14e08:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   14e0c:	f018 0f01 	tst.w	r8, #1
   14e10:	f47f ae65 	bne.w	14ade <vli_modInv.part.0+0x242>
   14e14:	e70b      	b.n	14c2e <vli_modInv.part.0+0x392>
        if (EVEN(a)) {
   14e16:	07e7      	lsls	r7, r4, #31
   14e18:	d592      	bpl.n	14d40 <vli_modInv.part.0+0x4a4>
        } else if (EVEN(b)) {
   14e1a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   14e1e:	f018 0f01 	tst.w	r8, #1
   14e22:	f47f adb9 	bne.w	14998 <vli_modInv.part.0+0xfc>
   14e26:	e704      	b.n	14c32 <vli_modInv.part.0+0x396>
        if (EVEN(a)) {
   14e28:	07e7      	lsls	r7, r4, #31
   14e2a:	d589      	bpl.n	14d40 <vli_modInv.part.0+0x4a4>
        } else if (EVEN(b)) {
   14e2c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   14e30:	f018 0f01 	tst.w	r8, #1
   14e34:	f47f ae53 	bne.w	14ade <vli_modInv.part.0+0x242>
   14e38:	e6fb      	b.n	14c32 <vli_modInv.part.0+0x396>
        if (EVEN(a)) {
   14e3a:	07e5      	lsls	r5, r4, #31
   14e3c:	d581      	bpl.n	14d42 <vli_modInv.part.0+0x4a6>
        } else if (EVEN(b)) {
   14e3e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   14e42:	f018 0f01 	tst.w	r8, #1
   14e46:	f47f ada7 	bne.w	14998 <vli_modInv.part.0+0xfc>
   14e4a:	e6f4      	b.n	14c36 <vli_modInv.part.0+0x39a>
        if (EVEN(a)) {
   14e4c:	07e5      	lsls	r5, r4, #31
   14e4e:	f57f af78 	bpl.w	14d42 <vli_modInv.part.0+0x4a6>
        } else if (EVEN(b)) {
   14e52:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   14e56:	f018 0f01 	tst.w	r8, #1
   14e5a:	f47f ae40 	bne.w	14ade <vli_modInv.part.0+0x242>
   14e5e:	e6ea      	b.n	14c36 <vli_modInv.part.0+0x39a>
        if (EVEN(a)) {
   14e60:	f014 0f01 	tst.w	r4, #1
   14e64:	f43f af6e 	beq.w	14d44 <vli_modInv.part.0+0x4a8>
        } else if (EVEN(b)) {
   14e68:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   14e6c:	f018 0f01 	tst.w	r8, #1
   14e70:	f47f ad92 	bne.w	14998 <vli_modInv.part.0+0xfc>
   14e74:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   14e78:	463a      	mov	r2, r7
   14e7a:	e6e1      	b.n	14c40 <vli_modInv.part.0+0x3a4>
        if (EVEN(a)) {
   14e7c:	f014 0f01 	tst.w	r4, #1
   14e80:	f43f af60 	beq.w	14d44 <vli_modInv.part.0+0x4a8>
        } else if (EVEN(b)) {
   14e84:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   14e88:	f018 0f01 	tst.w	r8, #1
   14e8c:	f47f ae27 	bne.w	14ade <vli_modInv.part.0+0x242>
   14e90:	e7f0      	b.n	14e74 <vli_modInv.part.0+0x5d8>
        if (EVEN(a)) {
   14e92:	f014 0f01 	tst.w	r4, #1
   14e96:	f43f af57 	beq.w	14d48 <vli_modInv.part.0+0x4ac>
        } else if (EVEN(b)) {
   14e9a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   14e9e:	f018 0f01 	tst.w	r8, #1
   14ea2:	f47f ad79 	bne.w	14998 <vli_modInv.part.0+0xfc>
   14ea6:	9a02      	ldr	r2, [sp, #8]
   14ea8:	e6ca      	b.n	14c40 <vli_modInv.part.0+0x3a4>
        if (EVEN(a)) {
   14eaa:	f014 0f01 	tst.w	r4, #1
   14eae:	f43f af4b 	beq.w	14d48 <vli_modInv.part.0+0x4ac>
        } else if (EVEN(b)) {
   14eb2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   14eb6:	f018 0f01 	tst.w	r8, #1
   14eba:	f47f ae10 	bne.w	14ade <vli_modInv.part.0+0x242>
   14ebe:	e7f2      	b.n	14ea6 <vli_modInv.part.0+0x60a>
        if (EVEN(a)) {
   14ec0:	f014 0f01 	tst.w	r4, #1
   14ec4:	f43f af40 	beq.w	14d48 <vli_modInv.part.0+0x4ac>
        } else if (EVEN(b)) {
   14ec8:	f018 0f01 	tst.w	r8, #1
   14ecc:	f47f ad64 	bne.w	14998 <vli_modInv.part.0+0xfc>
   14ed0:	e7e9      	b.n	14ea6 <vli_modInv.part.0+0x60a>
        if (EVEN(a)) {
   14ed2:	f014 0f01 	tst.w	r4, #1
   14ed6:	f43f af37 	beq.w	14d48 <vli_modInv.part.0+0x4ac>
        } else if (EVEN(b)) {
   14eda:	f018 0f01 	tst.w	r8, #1
   14ede:	f47f adfe 	bne.w	14ade <vli_modInv.part.0+0x242>
   14ee2:	e7e0      	b.n	14ea6 <vli_modInv.part.0+0x60a>
   14ee4:	e9dd c611 	ldrd	ip, r6, [sp, #68]	; 0x44
   14ee8:	e6a1      	b.n	14c2e <vli_modInv.part.0+0x392>
   14eea:	9a09      	ldr	r2, [sp, #36]	; 0x24
   14eec:	e727      	b.n	14d3e <vli_modInv.part.0+0x4a2>
   14eee:	bf00      	nop

00014ef0 <XYcZ_add>:
   or P => P', Q => P + Q
*/
static void XYcZ_add(uECC_word_t * RESTRICT X1,
                     uECC_word_t * RESTRICT Y1,
                     uECC_word_t * RESTRICT X2,
                     uECC_word_t * RESTRICT Y2) {
   14ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
   14ef2:	4614      	mov	r4, r2
   14ef4:	b099      	sub	sp, #100	; 0x64
   14ef6:	4606      	mov	r6, r0
   14ef8:	460f      	mov	r7, r1
    uECC_word_t l_borrow = vli_sub(result, left, right);
   14efa:	4602      	mov	r2, r0
   14efc:	4621      	mov	r1, r4
   14efe:	4668      	mov	r0, sp
                     uECC_word_t * RESTRICT Y2) {
   14f00:	461d      	mov	r5, r3
    uECC_word_t l_borrow = vli_sub(result, left, right);
   14f02:	f7fe ff07 	bl	13d14 <vli_sub>
    if (l_borrow) {
   14f06:	2800      	cmp	r0, #0
   14f08:	d165      	bne.n	14fd6 <XYcZ_add+0xe6>
    vli_square(product, left);
   14f0a:	4669      	mov	r1, sp
   14f0c:	a808      	add	r0, sp, #32
   14f0e:	f7ff fa25 	bl	1435c <vli_square>
    vli_mmod_fast(result, product);
   14f12:	a908      	add	r1, sp, #32
   14f14:	4668      	mov	r0, sp
   14f16:	f7ff fbdb 	bl	146d0 <vli_mmod_fast>
    vli_mult(product, left, right);
   14f1a:	466a      	mov	r2, sp
   14f1c:	4631      	mov	r1, r6
   14f1e:	a808      	add	r0, sp, #32
   14f20:	f7fe ff40 	bl	13da4 <vli_mult>
    vli_mmod_fast(result, product);
   14f24:	a908      	add	r1, sp, #32
   14f26:	4630      	mov	r0, r6
   14f28:	f7ff fbd2 	bl	146d0 <vli_mmod_fast>
    vli_mult(product, left, right);
   14f2c:	466a      	mov	r2, sp
   14f2e:	4621      	mov	r1, r4
   14f30:	a808      	add	r0, sp, #32
   14f32:	f7fe ff37 	bl	13da4 <vli_mult>
    vli_mmod_fast(result, product);
   14f36:	a908      	add	r1, sp, #32
   14f38:	4620      	mov	r0, r4
   14f3a:	f7ff fbc9 	bl	146d0 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   14f3e:	463a      	mov	r2, r7
   14f40:	4629      	mov	r1, r5
   14f42:	4628      	mov	r0, r5
   14f44:	f7fe fee6 	bl	13d14 <vli_sub>
    if (l_borrow) {
   14f48:	2800      	cmp	r0, #0
   14f4a:	d168      	bne.n	1501e <XYcZ_add+0x12e>
    vli_square(product, left);
   14f4c:	4629      	mov	r1, r5
   14f4e:	a808      	add	r0, sp, #32
   14f50:	f7ff fa04 	bl	1435c <vli_square>
    vli_mmod_fast(result, product);
   14f54:	a908      	add	r1, sp, #32
   14f56:	4668      	mov	r0, sp
   14f58:	f7ff fbba 	bl	146d0 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   14f5c:	4632      	mov	r2, r6
   14f5e:	4669      	mov	r1, sp
   14f60:	4668      	mov	r0, sp
   14f62:	f7fe fed7 	bl	13d14 <vli_sub>
    if (l_borrow) {
   14f66:	2800      	cmp	r0, #0
   14f68:	d153      	bne.n	15012 <XYcZ_add+0x122>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   14f6a:	4622      	mov	r2, r4
   14f6c:	4669      	mov	r1, sp
   14f6e:	4668      	mov	r0, sp
   14f70:	f7fe fed0 	bl	13d14 <vli_sub>
    if (l_borrow) {
   14f74:	2800      	cmp	r0, #0
   14f76:	d146      	bne.n	15006 <XYcZ_add+0x116>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   14f78:	4632      	mov	r2, r6
   14f7a:	4621      	mov	r1, r4
   14f7c:	4620      	mov	r0, r4
   14f7e:	f7fe fec9 	bl	13d14 <vli_sub>
    if (l_borrow) {
   14f82:	2800      	cmp	r0, #0
   14f84:	d139      	bne.n	14ffa <XYcZ_add+0x10a>
    vli_mult(product, left, right);
   14f86:	4622      	mov	r2, r4
   14f88:	4639      	mov	r1, r7
   14f8a:	a808      	add	r0, sp, #32
   14f8c:	f7fe ff0a 	bl	13da4 <vli_mult>
    vli_mmod_fast(result, product);
   14f90:	a908      	add	r1, sp, #32
   14f92:	4638      	mov	r0, r7
   14f94:	f7ff fb9c 	bl	146d0 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   14f98:	466a      	mov	r2, sp
   14f9a:	4631      	mov	r1, r6
   14f9c:	4620      	mov	r0, r4
   14f9e:	f7fe feb9 	bl	13d14 <vli_sub>
    if (l_borrow) {
   14fa2:	bb20      	cbnz	r0, 14fee <XYcZ_add+0xfe>
    vli_mult(product, left, right);
   14fa4:	4622      	mov	r2, r4
   14fa6:	4629      	mov	r1, r5
   14fa8:	a808      	add	r0, sp, #32
   14faa:	f7fe fefb 	bl	13da4 <vli_mult>
    vli_mmod_fast(result, product);
   14fae:	a908      	add	r1, sp, #32
   14fb0:	4628      	mov	r0, r5
   14fb2:	f7ff fb8d 	bl	146d0 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   14fb6:	463a      	mov	r2, r7
   14fb8:	4629      	mov	r1, r5
   14fba:	4628      	mov	r0, r5
   14fbc:	f7fe feaa 	bl	13d14 <vli_sub>
    if (l_borrow) {
   14fc0:	b978      	cbnz	r0, 14fe2 <XYcZ_add+0xf2>
        dest[i] = src[i];
   14fc2:	46ec      	mov	ip, sp
   14fc4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   14fc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   14fca:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   14fce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    vli_modSub_fast(X2, X1, t5);  /* t3 = B - x3 */
    vli_modMult_fast(Y2, Y2, X2); /* t4 = (y2 - y1)*(B - x3) */
    vli_modSub_fast(Y2, Y2, Y1);  /* t4 = y3 */

    vli_set(X2, t5);
}
   14fd2:	b019      	add	sp, #100	; 0x64
   14fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        vli_add(result, result, mod);
   14fd6:	4a15      	ldr	r2, [pc, #84]	; (1502c <XYcZ_add+0x13c>)
   14fd8:	4669      	mov	r1, sp
   14fda:	4668      	mov	r0, sp
   14fdc:	f7fe fe5a 	bl	13c94 <vli_add>
   14fe0:	e793      	b.n	14f0a <XYcZ_add+0x1a>
   14fe2:	4a12      	ldr	r2, [pc, #72]	; (1502c <XYcZ_add+0x13c>)
   14fe4:	4629      	mov	r1, r5
   14fe6:	4628      	mov	r0, r5
   14fe8:	f7fe fe54 	bl	13c94 <vli_add>
   14fec:	e7e9      	b.n	14fc2 <XYcZ_add+0xd2>
   14fee:	4a0f      	ldr	r2, [pc, #60]	; (1502c <XYcZ_add+0x13c>)
   14ff0:	4621      	mov	r1, r4
   14ff2:	4620      	mov	r0, r4
   14ff4:	f7fe fe4e 	bl	13c94 <vli_add>
   14ff8:	e7d4      	b.n	14fa4 <XYcZ_add+0xb4>
   14ffa:	4a0c      	ldr	r2, [pc, #48]	; (1502c <XYcZ_add+0x13c>)
   14ffc:	4621      	mov	r1, r4
   14ffe:	4620      	mov	r0, r4
   15000:	f7fe fe48 	bl	13c94 <vli_add>
   15004:	e7bf      	b.n	14f86 <XYcZ_add+0x96>
   15006:	4a09      	ldr	r2, [pc, #36]	; (1502c <XYcZ_add+0x13c>)
   15008:	4669      	mov	r1, sp
   1500a:	4668      	mov	r0, sp
   1500c:	f7fe fe42 	bl	13c94 <vli_add>
   15010:	e7b2      	b.n	14f78 <XYcZ_add+0x88>
   15012:	4a06      	ldr	r2, [pc, #24]	; (1502c <XYcZ_add+0x13c>)
   15014:	4669      	mov	r1, sp
   15016:	4668      	mov	r0, sp
   15018:	f7fe fe3c 	bl	13c94 <vli_add>
   1501c:	e7a5      	b.n	14f6a <XYcZ_add+0x7a>
   1501e:	4a03      	ldr	r2, [pc, #12]	; (1502c <XYcZ_add+0x13c>)
   15020:	4629      	mov	r1, r5
   15022:	4628      	mov	r0, r5
   15024:	f7fe fe36 	bl	13c94 <vli_add>
   15028:	e790      	b.n	14f4c <XYcZ_add+0x5c>
   1502a:	bf00      	nop
   1502c:	000200e8 	.word	0x000200e8

00015030 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
*/
static void XYcZ_addC(uECC_word_t * RESTRICT X1,
                      uECC_word_t * RESTRICT Y1,
                      uECC_word_t * RESTRICT X2,
                      uECC_word_t * RESTRICT Y2) {
   15030:	b5f0      	push	{r4, r5, r6, r7, lr}
   15032:	4614      	mov	r4, r2
   15034:	b0a9      	sub	sp, #164	; 0xa4
   15036:	4606      	mov	r6, r0
   15038:	460f      	mov	r7, r1
    uECC_word_t l_borrow = vli_sub(result, left, right);
   1503a:	4602      	mov	r2, r0
   1503c:	4621      	mov	r1, r4
   1503e:	4668      	mov	r0, sp
                      uECC_word_t * RESTRICT Y2) {
   15040:	461d      	mov	r5, r3
    uECC_word_t l_borrow = vli_sub(result, left, right);
   15042:	f7fe fe67 	bl	13d14 <vli_sub>
    if (l_borrow) {
   15046:	2800      	cmp	r0, #0
   15048:	f040 80cb 	bne.w	151e2 <XYcZ_addC+0x1b2>
    vli_square(product, left);
   1504c:	4669      	mov	r1, sp
   1504e:	a818      	add	r0, sp, #96	; 0x60
   15050:	f7ff f984 	bl	1435c <vli_square>
    vli_mmod_fast(result, product);
   15054:	a918      	add	r1, sp, #96	; 0x60
   15056:	4668      	mov	r0, sp
   15058:	f7ff fb3a 	bl	146d0 <vli_mmod_fast>
    vli_mult(product, left, right);
   1505c:	466a      	mov	r2, sp
   1505e:	4631      	mov	r1, r6
   15060:	a818      	add	r0, sp, #96	; 0x60
   15062:	f7fe fe9f 	bl	13da4 <vli_mult>
    vli_mmod_fast(result, product);
   15066:	a918      	add	r1, sp, #96	; 0x60
   15068:	4630      	mov	r0, r6
   1506a:	f7ff fb31 	bl	146d0 <vli_mmod_fast>
    vli_mult(product, left, right);
   1506e:	466a      	mov	r2, sp
   15070:	4621      	mov	r1, r4
   15072:	a818      	add	r0, sp, #96	; 0x60
   15074:	f7fe fe96 	bl	13da4 <vli_mult>
    vli_mmod_fast(result, product);
   15078:	a918      	add	r1, sp, #96	; 0x60
   1507a:	4620      	mov	r0, r4
   1507c:	f7ff fb28 	bl	146d0 <vli_mmod_fast>
    uECC_word_t carry = vli_add(result, left, right);
   15080:	463a      	mov	r2, r7
   15082:	4629      	mov	r1, r5
   15084:	4668      	mov	r0, sp
   15086:	f7fe fe05 	bl	13c94 <vli_add>
    if (carry || vli_cmp(result, mod) >= 0) {
   1508a:	b9a8      	cbnz	r0, 150b8 <XYcZ_addC+0x88>
        } else if (left[i] < right[i]) {
   1508c:	9b07      	ldr	r3, [sp, #28]
   1508e:	3301      	adds	r3, #1
   15090:	d117      	bne.n	150c2 <XYcZ_addC+0x92>
        if (left[i] > right[i]) {
   15092:	9b06      	ldr	r3, [sp, #24]
   15094:	2b01      	cmp	r3, #1
   15096:	d80f      	bhi.n	150b8 <XYcZ_addC+0x88>
        } else if (left[i] < right[i]) {
   15098:	b19b      	cbz	r3, 150c2 <XYcZ_addC+0x92>
        if (left[i] > right[i]) {
   1509a:	9b05      	ldr	r3, [sp, #20]
   1509c:	b963      	cbnz	r3, 150b8 <XYcZ_addC+0x88>
   1509e:	9b04      	ldr	r3, [sp, #16]
   150a0:	b953      	cbnz	r3, 150b8 <XYcZ_addC+0x88>
   150a2:	9b03      	ldr	r3, [sp, #12]
   150a4:	b943      	cbnz	r3, 150b8 <XYcZ_addC+0x88>
        } else if (left[i] < right[i]) {
   150a6:	9b02      	ldr	r3, [sp, #8]
   150a8:	3301      	adds	r3, #1
   150aa:	d10a      	bne.n	150c2 <XYcZ_addC+0x92>
   150ac:	9b01      	ldr	r3, [sp, #4]
   150ae:	3301      	adds	r3, #1
   150b0:	d107      	bne.n	150c2 <XYcZ_addC+0x92>
   150b2:	9b00      	ldr	r3, [sp, #0]
   150b4:	3301      	adds	r3, #1
   150b6:	d104      	bne.n	150c2 <XYcZ_addC+0x92>
        vli_sub(result, result, mod);
   150b8:	4a65      	ldr	r2, [pc, #404]	; (15250 <XYcZ_addC+0x220>)
   150ba:	4669      	mov	r1, sp
   150bc:	4668      	mov	r0, sp
   150be:	f7fe fe29 	bl	13d14 <vli_sub>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   150c2:	463a      	mov	r2, r7
   150c4:	4629      	mov	r1, r5
   150c6:	4628      	mov	r0, r5
   150c8:	f7fe fe24 	bl	13d14 <vli_sub>
    if (l_borrow) {
   150cc:	2800      	cmp	r0, #0
   150ce:	f040 8094 	bne.w	151fa <XYcZ_addC+0x1ca>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   150d2:	4632      	mov	r2, r6
   150d4:	4621      	mov	r1, r4
   150d6:	a808      	add	r0, sp, #32
   150d8:	f7fe fe1c 	bl	13d14 <vli_sub>
    if (l_borrow) {
   150dc:	2800      	cmp	r0, #0
   150de:	f040 8086 	bne.w	151ee <XYcZ_addC+0x1be>
    vli_mult(product, left, right);
   150e2:	aa08      	add	r2, sp, #32
   150e4:	4639      	mov	r1, r7
   150e6:	a818      	add	r0, sp, #96	; 0x60
   150e8:	f7fe fe5c 	bl	13da4 <vli_mult>
    vli_mmod_fast(result, product);
   150ec:	a918      	add	r1, sp, #96	; 0x60
   150ee:	4638      	mov	r0, r7
   150f0:	f7ff faee 	bl	146d0 <vli_mmod_fast>
    uECC_word_t carry = vli_add(result, left, right);
   150f4:	4622      	mov	r2, r4
   150f6:	4631      	mov	r1, r6
   150f8:	a808      	add	r0, sp, #32
   150fa:	f7fe fdcb 	bl	13c94 <vli_add>
    if (carry || vli_cmp(result, mod) >= 0) {
   150fe:	b9a8      	cbnz	r0, 1512c <XYcZ_addC+0xfc>
        } else if (left[i] < right[i]) {
   15100:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   15102:	3301      	adds	r3, #1
   15104:	d117      	bne.n	15136 <XYcZ_addC+0x106>
        if (left[i] > right[i]) {
   15106:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15108:	2b01      	cmp	r3, #1
   1510a:	d80f      	bhi.n	1512c <XYcZ_addC+0xfc>
        } else if (left[i] < right[i]) {
   1510c:	b19b      	cbz	r3, 15136 <XYcZ_addC+0x106>
        if (left[i] > right[i]) {
   1510e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15110:	b963      	cbnz	r3, 1512c <XYcZ_addC+0xfc>
   15112:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15114:	b953      	cbnz	r3, 1512c <XYcZ_addC+0xfc>
   15116:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15118:	b943      	cbnz	r3, 1512c <XYcZ_addC+0xfc>
        } else if (left[i] < right[i]) {
   1511a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1511c:	3301      	adds	r3, #1
   1511e:	d10a      	bne.n	15136 <XYcZ_addC+0x106>
   15120:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15122:	3301      	adds	r3, #1
   15124:	d107      	bne.n	15136 <XYcZ_addC+0x106>
   15126:	9b08      	ldr	r3, [sp, #32]
   15128:	3301      	adds	r3, #1
   1512a:	d104      	bne.n	15136 <XYcZ_addC+0x106>
        vli_sub(result, result, mod);
   1512c:	a908      	add	r1, sp, #32
   1512e:	4a48      	ldr	r2, [pc, #288]	; (15250 <XYcZ_addC+0x220>)
   15130:	4608      	mov	r0, r1
   15132:	f7fe fdef 	bl	13d14 <vli_sub>
    vli_square(product, left);
   15136:	4629      	mov	r1, r5
   15138:	a818      	add	r0, sp, #96	; 0x60
   1513a:	f7ff f90f 	bl	1435c <vli_square>
    vli_mmod_fast(result, product);
   1513e:	a918      	add	r1, sp, #96	; 0x60
   15140:	4620      	mov	r0, r4
   15142:	f7ff fac5 	bl	146d0 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   15146:	aa08      	add	r2, sp, #32
   15148:	4621      	mov	r1, r4
   1514a:	4620      	mov	r0, r4
   1514c:	f7fe fde2 	bl	13d14 <vli_sub>
    if (l_borrow) {
   15150:	2800      	cmp	r0, #0
   15152:	d176      	bne.n	15242 <XYcZ_addC+0x212>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   15154:	4622      	mov	r2, r4
   15156:	4631      	mov	r1, r6
   15158:	a810      	add	r0, sp, #64	; 0x40
   1515a:	f7fe fddb 	bl	13d14 <vli_sub>
    if (l_borrow) {
   1515e:	2800      	cmp	r0, #0
   15160:	d169      	bne.n	15236 <XYcZ_addC+0x206>
    vli_mult(product, left, right);
   15162:	aa10      	add	r2, sp, #64	; 0x40
   15164:	4629      	mov	r1, r5
   15166:	a818      	add	r0, sp, #96	; 0x60
   15168:	f7fe fe1c 	bl	13da4 <vli_mult>
    vli_mmod_fast(result, product);
   1516c:	a918      	add	r1, sp, #96	; 0x60
   1516e:	4628      	mov	r0, r5
   15170:	f7ff faae 	bl	146d0 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   15174:	463a      	mov	r2, r7
   15176:	4629      	mov	r1, r5
   15178:	4628      	mov	r0, r5
   1517a:	f7fe fdcb 	bl	13d14 <vli_sub>
    if (l_borrow) {
   1517e:	2800      	cmp	r0, #0
   15180:	d153      	bne.n	1522a <XYcZ_addC+0x1fa>
    vli_square(product, left);
   15182:	4669      	mov	r1, sp
   15184:	a818      	add	r0, sp, #96	; 0x60
   15186:	f7ff f8e9 	bl	1435c <vli_square>
    vli_mmod_fast(result, product);
   1518a:	a918      	add	r1, sp, #96	; 0x60
   1518c:	a810      	add	r0, sp, #64	; 0x40
   1518e:	f7ff fa9f 	bl	146d0 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   15192:	a910      	add	r1, sp, #64	; 0x40
   15194:	aa08      	add	r2, sp, #32
   15196:	4608      	mov	r0, r1
   15198:	f7fe fdbc 	bl	13d14 <vli_sub>
    if (l_borrow) {
   1519c:	2800      	cmp	r0, #0
   1519e:	d13e      	bne.n	1521e <XYcZ_addC+0x1ee>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   151a0:	4632      	mov	r2, r6
   151a2:	a910      	add	r1, sp, #64	; 0x40
   151a4:	a808      	add	r0, sp, #32
   151a6:	f7fe fdb5 	bl	13d14 <vli_sub>
    if (l_borrow) {
   151aa:	bb90      	cbnz	r0, 15212 <XYcZ_addC+0x1e2>
    vli_mult(product, left, right);
   151ac:	466a      	mov	r2, sp
   151ae:	a908      	add	r1, sp, #32
   151b0:	a818      	add	r0, sp, #96	; 0x60
   151b2:	f7fe fdf7 	bl	13da4 <vli_mult>
    vli_mmod_fast(result, product);
   151b6:	a918      	add	r1, sp, #96	; 0x60
   151b8:	a808      	add	r0, sp, #32
   151ba:	f7ff fa89 	bl	146d0 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   151be:	463a      	mov	r2, r7
   151c0:	a908      	add	r1, sp, #32
   151c2:	4638      	mov	r0, r7
   151c4:	f7fe fda6 	bl	13d14 <vli_sub>
    if (l_borrow) {
   151c8:	b9e8      	cbnz	r0, 15206 <XYcZ_addC+0x1d6>
        dest[i] = src[i];
   151ca:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
   151ce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   151d2:	4634      	mov	r4, r6
   151d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   151d6:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   151da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    vli_modSub_fast(t6, t7, X1);  /* t6 = x3' - B */
    vli_modMult_fast(t6, t6, t5); /* t6 = (y2 + y1)*(x3' - B) */
    vli_modSub_fast(Y1, t6, Y1);  /* t2 = (y2 + y1)*(x3' - B) - E = y3' */

    vli_set(X1, t7);
}
   151de:	b029      	add	sp, #164	; 0xa4
   151e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        vli_add(result, result, mod);
   151e2:	4a1b      	ldr	r2, [pc, #108]	; (15250 <XYcZ_addC+0x220>)
   151e4:	4669      	mov	r1, sp
   151e6:	4668      	mov	r0, sp
   151e8:	f7fe fd54 	bl	13c94 <vli_add>
   151ec:	e72e      	b.n	1504c <XYcZ_addC+0x1c>
   151ee:	a908      	add	r1, sp, #32
   151f0:	4a17      	ldr	r2, [pc, #92]	; (15250 <XYcZ_addC+0x220>)
   151f2:	4608      	mov	r0, r1
   151f4:	f7fe fd4e 	bl	13c94 <vli_add>
   151f8:	e773      	b.n	150e2 <XYcZ_addC+0xb2>
   151fa:	4a15      	ldr	r2, [pc, #84]	; (15250 <XYcZ_addC+0x220>)
   151fc:	4629      	mov	r1, r5
   151fe:	4628      	mov	r0, r5
   15200:	f7fe fd48 	bl	13c94 <vli_add>
   15204:	e765      	b.n	150d2 <XYcZ_addC+0xa2>
   15206:	4a12      	ldr	r2, [pc, #72]	; (15250 <XYcZ_addC+0x220>)
   15208:	4639      	mov	r1, r7
   1520a:	4638      	mov	r0, r7
   1520c:	f7fe fd42 	bl	13c94 <vli_add>
   15210:	e7db      	b.n	151ca <XYcZ_addC+0x19a>
   15212:	a908      	add	r1, sp, #32
   15214:	4a0e      	ldr	r2, [pc, #56]	; (15250 <XYcZ_addC+0x220>)
   15216:	4608      	mov	r0, r1
   15218:	f7fe fd3c 	bl	13c94 <vli_add>
   1521c:	e7c6      	b.n	151ac <XYcZ_addC+0x17c>
   1521e:	a910      	add	r1, sp, #64	; 0x40
   15220:	4a0b      	ldr	r2, [pc, #44]	; (15250 <XYcZ_addC+0x220>)
   15222:	4608      	mov	r0, r1
   15224:	f7fe fd36 	bl	13c94 <vli_add>
   15228:	e7ba      	b.n	151a0 <XYcZ_addC+0x170>
   1522a:	4a09      	ldr	r2, [pc, #36]	; (15250 <XYcZ_addC+0x220>)
   1522c:	4629      	mov	r1, r5
   1522e:	4628      	mov	r0, r5
   15230:	f7fe fd30 	bl	13c94 <vli_add>
   15234:	e7a5      	b.n	15182 <XYcZ_addC+0x152>
   15236:	a910      	add	r1, sp, #64	; 0x40
   15238:	4a05      	ldr	r2, [pc, #20]	; (15250 <XYcZ_addC+0x220>)
   1523a:	4608      	mov	r0, r1
   1523c:	f7fe fd2a 	bl	13c94 <vli_add>
   15240:	e78f      	b.n	15162 <XYcZ_addC+0x132>
   15242:	4a03      	ldr	r2, [pc, #12]	; (15250 <XYcZ_addC+0x220>)
   15244:	4621      	mov	r1, r4
   15246:	4620      	mov	r0, r4
   15248:	f7fe fd24 	bl	13c94 <vli_add>
   1524c:	e782      	b.n	15154 <XYcZ_addC+0x124>
   1524e:	bf00      	nop
   15250:	000200e8 	.word	0x000200e8

00015254 <EccPoint_double_jacobian.part.0>:
static void EccPoint_double_jacobian(uECC_word_t * RESTRICT X1,
   15254:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15258:	b0a1      	sub	sp, #132	; 0x84
   1525a:	4604      	mov	r4, r0
    vli_square(product, left);
   1525c:	a810      	add	r0, sp, #64	; 0x40
static void EccPoint_double_jacobian(uECC_word_t * RESTRICT X1,
   1525e:	4615      	mov	r5, r2
   15260:	460e      	mov	r6, r1
    vli_square(product, left);
   15262:	f7ff f87b 	bl	1435c <vli_square>
    vli_mmod_fast(result, product);
   15266:	a910      	add	r1, sp, #64	; 0x40
   15268:	4668      	mov	r0, sp
   1526a:	f7ff fa31 	bl	146d0 <vli_mmod_fast>
    vli_mult(product, left, right);
   1526e:	466a      	mov	r2, sp
   15270:	4621      	mov	r1, r4
   15272:	a810      	add	r0, sp, #64	; 0x40
   15274:	f7fe fd96 	bl	13da4 <vli_mult>
    vli_mmod_fast(result, product);
   15278:	a910      	add	r1, sp, #64	; 0x40
   1527a:	a808      	add	r0, sp, #32
   1527c:	f7ff fa28 	bl	146d0 <vli_mmod_fast>
    vli_square(product, left);
   15280:	4669      	mov	r1, sp
   15282:	a810      	add	r0, sp, #64	; 0x40
   15284:	f7ff f86a 	bl	1435c <vli_square>
    vli_mmod_fast(result, product);
   15288:	a910      	add	r1, sp, #64	; 0x40
   1528a:	4668      	mov	r0, sp
   1528c:	f7ff fa20 	bl	146d0 <vli_mmod_fast>
    vli_mult(product, left, right);
   15290:	462a      	mov	r2, r5
   15292:	4631      	mov	r1, r6
   15294:	a810      	add	r0, sp, #64	; 0x40
   15296:	f7fe fd85 	bl	13da4 <vli_mult>
    vli_mmod_fast(result, product);
   1529a:	a910      	add	r1, sp, #64	; 0x40
   1529c:	4630      	mov	r0, r6
   1529e:	f7ff fa17 	bl	146d0 <vli_mmod_fast>
    vli_square(product, left);
   152a2:	4629      	mov	r1, r5
   152a4:	a810      	add	r0, sp, #64	; 0x40
   152a6:	f7ff f859 	bl	1435c <vli_square>
    vli_mmod_fast(result, product);
   152aa:	a910      	add	r1, sp, #64	; 0x40
   152ac:	4628      	mov	r0, r5
   152ae:	f7ff fa0f 	bl	146d0 <vli_mmod_fast>
    uECC_word_t carry = vli_add(result, left, right);
   152b2:	462a      	mov	r2, r5
   152b4:	4621      	mov	r1, r4
   152b6:	4620      	mov	r0, r4
   152b8:	f7fe fcec 	bl	13c94 <vli_add>
    if (carry || vli_cmp(result, mod) >= 0) {
   152bc:	b9a8      	cbnz	r0, 152ea <EccPoint_double_jacobian.part.0+0x96>
        } else if (left[i] < right[i]) {
   152be:	69e3      	ldr	r3, [r4, #28]
   152c0:	3301      	adds	r3, #1
   152c2:	d117      	bne.n	152f4 <EccPoint_double_jacobian.part.0+0xa0>
        if (left[i] > right[i]) {
   152c4:	69a3      	ldr	r3, [r4, #24]
   152c6:	2b01      	cmp	r3, #1
   152c8:	d80f      	bhi.n	152ea <EccPoint_double_jacobian.part.0+0x96>
        } else if (left[i] < right[i]) {
   152ca:	b19b      	cbz	r3, 152f4 <EccPoint_double_jacobian.part.0+0xa0>
        if (left[i] > right[i]) {
   152cc:	6963      	ldr	r3, [r4, #20]
   152ce:	b963      	cbnz	r3, 152ea <EccPoint_double_jacobian.part.0+0x96>
   152d0:	6923      	ldr	r3, [r4, #16]
   152d2:	b953      	cbnz	r3, 152ea <EccPoint_double_jacobian.part.0+0x96>
   152d4:	68e3      	ldr	r3, [r4, #12]
   152d6:	b943      	cbnz	r3, 152ea <EccPoint_double_jacobian.part.0+0x96>
        } else if (left[i] < right[i]) {
   152d8:	68a3      	ldr	r3, [r4, #8]
   152da:	3301      	adds	r3, #1
   152dc:	d10a      	bne.n	152f4 <EccPoint_double_jacobian.part.0+0xa0>
   152de:	6863      	ldr	r3, [r4, #4]
   152e0:	3301      	adds	r3, #1
   152e2:	d107      	bne.n	152f4 <EccPoint_double_jacobian.part.0+0xa0>
   152e4:	6823      	ldr	r3, [r4, #0]
   152e6:	3301      	adds	r3, #1
   152e8:	d104      	bne.n	152f4 <EccPoint_double_jacobian.part.0+0xa0>
        vli_sub(result, result, mod);
   152ea:	4a9d      	ldr	r2, [pc, #628]	; (15560 <EccPoint_double_jacobian.part.0+0x30c>)
   152ec:	4621      	mov	r1, r4
   152ee:	4620      	mov	r0, r4
   152f0:	f7fe fd10 	bl	13d14 <vli_sub>
    uECC_word_t carry = vli_add(result, left, right);
   152f4:	462a      	mov	r2, r5
   152f6:	4629      	mov	r1, r5
   152f8:	4628      	mov	r0, r5
   152fa:	f7fe fccb 	bl	13c94 <vli_add>
    if (carry || vli_cmp(result, mod) >= 0) {
   152fe:	b9a8      	cbnz	r0, 1532c <EccPoint_double_jacobian.part.0+0xd8>
        } else if (left[i] < right[i]) {
   15300:	69eb      	ldr	r3, [r5, #28]
   15302:	3301      	adds	r3, #1
   15304:	d117      	bne.n	15336 <EccPoint_double_jacobian.part.0+0xe2>
        if (left[i] > right[i]) {
   15306:	69ab      	ldr	r3, [r5, #24]
   15308:	2b01      	cmp	r3, #1
   1530a:	d80f      	bhi.n	1532c <EccPoint_double_jacobian.part.0+0xd8>
        } else if (left[i] < right[i]) {
   1530c:	b19b      	cbz	r3, 15336 <EccPoint_double_jacobian.part.0+0xe2>
        if (left[i] > right[i]) {
   1530e:	696b      	ldr	r3, [r5, #20]
   15310:	b963      	cbnz	r3, 1532c <EccPoint_double_jacobian.part.0+0xd8>
   15312:	692b      	ldr	r3, [r5, #16]
   15314:	b953      	cbnz	r3, 1532c <EccPoint_double_jacobian.part.0+0xd8>
   15316:	68eb      	ldr	r3, [r5, #12]
   15318:	b943      	cbnz	r3, 1532c <EccPoint_double_jacobian.part.0+0xd8>
        } else if (left[i] < right[i]) {
   1531a:	68ab      	ldr	r3, [r5, #8]
   1531c:	3301      	adds	r3, #1
   1531e:	d10a      	bne.n	15336 <EccPoint_double_jacobian.part.0+0xe2>
   15320:	686b      	ldr	r3, [r5, #4]
   15322:	3301      	adds	r3, #1
   15324:	d107      	bne.n	15336 <EccPoint_double_jacobian.part.0+0xe2>
   15326:	682b      	ldr	r3, [r5, #0]
   15328:	3301      	adds	r3, #1
   1532a:	d104      	bne.n	15336 <EccPoint_double_jacobian.part.0+0xe2>
        vli_sub(result, result, mod);
   1532c:	4a8c      	ldr	r2, [pc, #560]	; (15560 <EccPoint_double_jacobian.part.0+0x30c>)
   1532e:	4629      	mov	r1, r5
   15330:	4628      	mov	r0, r5
   15332:	f7fe fcef 	bl	13d14 <vli_sub>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   15336:	462a      	mov	r2, r5
   15338:	4621      	mov	r1, r4
   1533a:	4628      	mov	r0, r5
   1533c:	f7fe fcea 	bl	13d14 <vli_sub>
    if (l_borrow) {
   15340:	2800      	cmp	r0, #0
   15342:	f040 80bd 	bne.w	154c0 <EccPoint_double_jacobian.part.0+0x26c>
    vli_mult(product, left, right);
   15346:	462a      	mov	r2, r5
   15348:	4621      	mov	r1, r4
   1534a:	a810      	add	r0, sp, #64	; 0x40
   1534c:	f7fe fd2a 	bl	13da4 <vli_mult>
    vli_mmod_fast(result, product);
   15350:	a910      	add	r1, sp, #64	; 0x40
   15352:	4620      	mov	r0, r4
   15354:	f7ff f9bc 	bl	146d0 <vli_mmod_fast>
    uECC_word_t carry = vli_add(result, left, right);
   15358:	4622      	mov	r2, r4
   1535a:	4621      	mov	r1, r4
   1535c:	4628      	mov	r0, r5
   1535e:	f7fe fc99 	bl	13c94 <vli_add>
    if (carry || vli_cmp(result, mod) >= 0) {
   15362:	b9a8      	cbnz	r0, 15390 <EccPoint_double_jacobian.part.0+0x13c>
        } else if (left[i] < right[i]) {
   15364:	69eb      	ldr	r3, [r5, #28]
   15366:	3301      	adds	r3, #1
   15368:	d117      	bne.n	1539a <EccPoint_double_jacobian.part.0+0x146>
        if (left[i] > right[i]) {
   1536a:	69ab      	ldr	r3, [r5, #24]
   1536c:	2b01      	cmp	r3, #1
   1536e:	d80f      	bhi.n	15390 <EccPoint_double_jacobian.part.0+0x13c>
        } else if (left[i] < right[i]) {
   15370:	b19b      	cbz	r3, 1539a <EccPoint_double_jacobian.part.0+0x146>
        if (left[i] > right[i]) {
   15372:	696b      	ldr	r3, [r5, #20]
   15374:	b963      	cbnz	r3, 15390 <EccPoint_double_jacobian.part.0+0x13c>
   15376:	692b      	ldr	r3, [r5, #16]
   15378:	b953      	cbnz	r3, 15390 <EccPoint_double_jacobian.part.0+0x13c>
   1537a:	68eb      	ldr	r3, [r5, #12]
   1537c:	b943      	cbnz	r3, 15390 <EccPoint_double_jacobian.part.0+0x13c>
        } else if (left[i] < right[i]) {
   1537e:	68ab      	ldr	r3, [r5, #8]
   15380:	3301      	adds	r3, #1
   15382:	d10a      	bne.n	1539a <EccPoint_double_jacobian.part.0+0x146>
   15384:	686b      	ldr	r3, [r5, #4]
   15386:	3301      	adds	r3, #1
   15388:	d107      	bne.n	1539a <EccPoint_double_jacobian.part.0+0x146>
   1538a:	682b      	ldr	r3, [r5, #0]
   1538c:	3301      	adds	r3, #1
   1538e:	d104      	bne.n	1539a <EccPoint_double_jacobian.part.0+0x146>
        vli_sub(result, result, mod);
   15390:	4a73      	ldr	r2, [pc, #460]	; (15560 <EccPoint_double_jacobian.part.0+0x30c>)
   15392:	4629      	mov	r1, r5
   15394:	4628      	mov	r0, r5
   15396:	f7fe fcbd 	bl	13d14 <vli_sub>
    uECC_word_t carry = vli_add(result, left, right);
   1539a:	462a      	mov	r2, r5
   1539c:	4621      	mov	r1, r4
   1539e:	4620      	mov	r0, r4
   153a0:	f7fe fc78 	bl	13c94 <vli_add>
    if (carry || vli_cmp(result, mod) >= 0) {
   153a4:	b9a8      	cbnz	r0, 153d2 <EccPoint_double_jacobian.part.0+0x17e>
        } else if (left[i] < right[i]) {
   153a6:	69e3      	ldr	r3, [r4, #28]
   153a8:	3301      	adds	r3, #1
   153aa:	d117      	bne.n	153dc <EccPoint_double_jacobian.part.0+0x188>
        if (left[i] > right[i]) {
   153ac:	69a3      	ldr	r3, [r4, #24]
   153ae:	2b01      	cmp	r3, #1
   153b0:	d80f      	bhi.n	153d2 <EccPoint_double_jacobian.part.0+0x17e>
        } else if (left[i] < right[i]) {
   153b2:	b19b      	cbz	r3, 153dc <EccPoint_double_jacobian.part.0+0x188>
        if (left[i] > right[i]) {
   153b4:	6963      	ldr	r3, [r4, #20]
   153b6:	b963      	cbnz	r3, 153d2 <EccPoint_double_jacobian.part.0+0x17e>
   153b8:	6923      	ldr	r3, [r4, #16]
   153ba:	b953      	cbnz	r3, 153d2 <EccPoint_double_jacobian.part.0+0x17e>
   153bc:	68e3      	ldr	r3, [r4, #12]
   153be:	b943      	cbnz	r3, 153d2 <EccPoint_double_jacobian.part.0+0x17e>
        } else if (left[i] < right[i]) {
   153c0:	68a3      	ldr	r3, [r4, #8]
   153c2:	3301      	adds	r3, #1
   153c4:	d10a      	bne.n	153dc <EccPoint_double_jacobian.part.0+0x188>
   153c6:	6863      	ldr	r3, [r4, #4]
   153c8:	3301      	adds	r3, #1
   153ca:	d107      	bne.n	153dc <EccPoint_double_jacobian.part.0+0x188>
   153cc:	6823      	ldr	r3, [r4, #0]
   153ce:	3301      	adds	r3, #1
   153d0:	d104      	bne.n	153dc <EccPoint_double_jacobian.part.0+0x188>
        vli_sub(result, result, mod);
   153d2:	4a63      	ldr	r2, [pc, #396]	; (15560 <EccPoint_double_jacobian.part.0+0x30c>)
   153d4:	4621      	mov	r1, r4
   153d6:	4620      	mov	r0, r4
   153d8:	f7fe fc9c 	bl	13d14 <vli_sub>
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   153dc:	6821      	ldr	r1, [r4, #0]
    if (vli_testBit(X1, 0)) {
   153de:	07cb      	lsls	r3, r1, #31
   153e0:	f100 808c 	bmi.w	154fc <EccPoint_double_jacobian.part.0+0x2a8>
        uECC_word_t temp = *vli;
   153e4:	e9d4 7905 	ldrd	r7, r9, [r4, #20]
   153e8:	e9d4 e803 	ldrd	lr, r8, [r4, #12]
   153ec:	69e2      	ldr	r2, [r4, #28]
        *vli = (temp >> 1) | carry;
   153ee:	ea4f 0059 	mov.w	r0, r9, lsr #1
        uECC_word_t temp = *vli;
   153f2:	e9d4 3c01 	ldrd	r3, ip, [r4, #4]
        *vli = (temp >> 1) | carry;
   153f6:	ea40 70c2 	orr.w	r0, r0, r2, lsl #31
   153fa:	0852      	lsrs	r2, r2, #1
   153fc:	61a0      	str	r0, [r4, #24]
   153fe:	61e2      	str	r2, [r4, #28]
   15400:	0878      	lsrs	r0, r7, #1
   15402:	ea4f 0258 	mov.w	r2, r8, lsr #1
   15406:	ea42 72c7 	orr.w	r2, r2, r7, lsl #31
   1540a:	ea40 70c9 	orr.w	r0, r0, r9, lsl #31
   1540e:	6160      	str	r0, [r4, #20]
   15410:	6122      	str	r2, [r4, #16]
   15412:	ea4f 075e 	mov.w	r7, lr, lsr #1
   15416:	085a      	lsrs	r2, r3, #1
   15418:	ea4f 005c 	mov.w	r0, ip, lsr #1
        carry = temp << (uECC_WORD_BITS - 1);
   1541c:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
   1541e:	ea47 77c8 	orr.w	r7, r7, r8, lsl #31
   15422:	ea40 70ce 	orr.w	r0, r0, lr, lsl #31
   15426:	ea42 72cc 	orr.w	r2, r2, ip, lsl #31
   1542a:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
   1542e:	60e7      	str	r7, [r4, #12]
   15430:	60a0      	str	r0, [r4, #8]
   15432:	6062      	str	r2, [r4, #4]
   15434:	6023      	str	r3, [r4, #0]
    vli_square(product, left);
   15436:	4621      	mov	r1, r4
   15438:	a810      	add	r0, sp, #64	; 0x40
   1543a:	f7fe ff8f 	bl	1435c <vli_square>
    vli_mmod_fast(result, product);
   1543e:	a910      	add	r1, sp, #64	; 0x40
   15440:	4628      	mov	r0, r5
   15442:	f7ff f945 	bl	146d0 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   15446:	aa08      	add	r2, sp, #32
   15448:	4629      	mov	r1, r5
   1544a:	4628      	mov	r0, r5
   1544c:	f7fe fc62 	bl	13d14 <vli_sub>
    if (l_borrow) {
   15450:	2800      	cmp	r0, #0
   15452:	d14d      	bne.n	154f0 <EccPoint_double_jacobian.part.0+0x29c>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   15454:	aa08      	add	r2, sp, #32
   15456:	4629      	mov	r1, r5
   15458:	4628      	mov	r0, r5
   1545a:	f7fe fc5b 	bl	13d14 <vli_sub>
    if (l_borrow) {
   1545e:	2800      	cmp	r0, #0
   15460:	d140      	bne.n	154e4 <EccPoint_double_jacobian.part.0+0x290>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   15462:	a908      	add	r1, sp, #32
   15464:	462a      	mov	r2, r5
   15466:	4608      	mov	r0, r1
   15468:	f7fe fc54 	bl	13d14 <vli_sub>
    if (l_borrow) {
   1546c:	bba0      	cbnz	r0, 154d8 <EccPoint_double_jacobian.part.0+0x284>
    vli_mult(product, left, right);
   1546e:	aa08      	add	r2, sp, #32
   15470:	4621      	mov	r1, r4
   15472:	a810      	add	r0, sp, #64	; 0x40
   15474:	f7fe fc96 	bl	13da4 <vli_mult>
    vli_mmod_fast(result, product);
   15478:	a910      	add	r1, sp, #64	; 0x40
   1547a:	4620      	mov	r0, r4
   1547c:	f7ff f928 	bl	146d0 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   15480:	466a      	mov	r2, sp
   15482:	4621      	mov	r1, r4
   15484:	4668      	mov	r0, sp
   15486:	f7fe fc45 	bl	13d14 <vli_sub>
    if (l_borrow) {
   1548a:	b9f8      	cbnz	r0, 154cc <EccPoint_double_jacobian.part.0+0x278>
        dest[i] = src[i];
   1548c:	462f      	mov	r7, r5
   1548e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   15490:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   15492:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   15496:	46b4      	mov	ip, r6
   15498:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1549c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   154a0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   154a2:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   154a6:	46ee      	mov	lr, sp
   154a8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   154ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   154b0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   154b2:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
   154b6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
   154ba:	b021      	add	sp, #132	; 0x84
   154bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        vli_add(result, result, mod);
   154c0:	4a27      	ldr	r2, [pc, #156]	; (15560 <EccPoint_double_jacobian.part.0+0x30c>)
   154c2:	4629      	mov	r1, r5
   154c4:	4628      	mov	r0, r5
   154c6:	f7fe fbe5 	bl	13c94 <vli_add>
   154ca:	e73c      	b.n	15346 <EccPoint_double_jacobian.part.0+0xf2>
   154cc:	4a24      	ldr	r2, [pc, #144]	; (15560 <EccPoint_double_jacobian.part.0+0x30c>)
   154ce:	4669      	mov	r1, sp
   154d0:	4668      	mov	r0, sp
   154d2:	f7fe fbdf 	bl	13c94 <vli_add>
   154d6:	e7d9      	b.n	1548c <EccPoint_double_jacobian.part.0+0x238>
   154d8:	a908      	add	r1, sp, #32
   154da:	4a21      	ldr	r2, [pc, #132]	; (15560 <EccPoint_double_jacobian.part.0+0x30c>)
   154dc:	4608      	mov	r0, r1
   154de:	f7fe fbd9 	bl	13c94 <vli_add>
   154e2:	e7c4      	b.n	1546e <EccPoint_double_jacobian.part.0+0x21a>
   154e4:	4a1e      	ldr	r2, [pc, #120]	; (15560 <EccPoint_double_jacobian.part.0+0x30c>)
   154e6:	4629      	mov	r1, r5
   154e8:	4628      	mov	r0, r5
   154ea:	f7fe fbd3 	bl	13c94 <vli_add>
   154ee:	e7b8      	b.n	15462 <EccPoint_double_jacobian.part.0+0x20e>
   154f0:	4a1b      	ldr	r2, [pc, #108]	; (15560 <EccPoint_double_jacobian.part.0+0x30c>)
   154f2:	4629      	mov	r1, r5
   154f4:	4628      	mov	r0, r5
   154f6:	f7fe fbcd 	bl	13c94 <vli_add>
   154fa:	e7ab      	b.n	15454 <EccPoint_double_jacobian.part.0+0x200>
        uECC_word_t l_carry = vli_add(X1, X1, curve_p);
   154fc:	4a18      	ldr	r2, [pc, #96]	; (15560 <EccPoint_double_jacobian.part.0+0x30c>)
   154fe:	4621      	mov	r1, r4
   15500:	4620      	mov	r0, r4
   15502:	f7fe fbc7 	bl	13c94 <vli_add>
        uECC_word_t temp = *vli;
   15506:	e9d4 2705 	ldrd	r2, r7, [r4, #20]
   1550a:	f8d4 901c 	ldr.w	r9, [r4, #28]
   1550e:	6863      	ldr	r3, [r4, #4]
        X1[uECC_WORDS - 1] |= l_carry << (uECC_WORD_BITS - 1);
   15510:	07c1      	lsls	r1, r0, #31
   15512:	ea41 0159 	orr.w	r1, r1, r9, lsr #1
        uECC_word_t temp = *vli;
   15516:	e9d4 0c02 	ldrd	r0, ip, [r4, #8]
        *vli = (temp >> 1) | carry;
   1551a:	ea4f 0857 	mov.w	r8, r7, lsr #1
        X1[uECC_WORDS - 1] |= l_carry << (uECC_WORD_BITS - 1);
   1551e:	61e1      	str	r1, [r4, #28]
        carry = temp << (uECC_WORD_BITS - 1);
   15520:	07ff      	lsls	r7, r7, #31
        uECC_word_t temp = *vli;
   15522:	6921      	ldr	r1, [r4, #16]
        *vli = (temp >> 1) | carry;
   15524:	ea47 0752 	orr.w	r7, r7, r2, lsr #1
        carry = temp << (uECC_WORD_BITS - 1);
   15528:	07d2      	lsls	r2, r2, #31
        *vli = (temp >> 1) | carry;
   1552a:	ea42 0251 	orr.w	r2, r2, r1, lsr #1
   1552e:	6122      	str	r2, [r4, #16]
   15530:	ea4f 025c 	mov.w	r2, ip, lsr #1
   15534:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
   15538:	60e2      	str	r2, [r4, #12]
   1553a:	0842      	lsrs	r2, r0, #1
   1553c:	ea42 72cc 	orr.w	r2, r2, ip, lsl #31
   15540:	60a2      	str	r2, [r4, #8]
   15542:	085a      	lsrs	r2, r3, #1
   15544:	ea42 70c0 	orr.w	r0, r2, r0, lsl #31
   15548:	6822      	ldr	r2, [r4, #0]
   1554a:	6167      	str	r7, [r4, #20]
        carry = temp << (uECC_WORD_BITS - 1);
   1554c:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
   1554e:	ea48 78c9 	orr.w	r8, r8, r9, lsl #31
   15552:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   15556:	f8c4 8018 	str.w	r8, [r4, #24]
   1555a:	6060      	str	r0, [r4, #4]
   1555c:	6023      	str	r3, [r4, #0]
        X1[uECC_WORDS - 1] |= l_carry << (uECC_WORD_BITS - 1);
   1555e:	e76a      	b.n	15436 <EccPoint_double_jacobian.part.0+0x1e2>
   15560:	000200e8 	.word	0x000200e8

00015564 <EccPoint_mult.constprop.0>:

static void EccPoint_mult(EccPoint * RESTRICT result,
   15564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15568:	b0c5      	sub	sp, #276	; 0x114
   1556a:	4690      	mov	r8, r2
        dest[i] = src[i];
   1556c:	468c      	mov	ip, r1
    uECC_word_t z[uECC_WORDS];
    bitcount_t i;
    uECC_word_t nb;

    vli_set(Rx[1], point->x);
    vli_set(Ry[1], point->y);
   1556e:	f101 0220 	add.w	r2, r1, #32
static void EccPoint_mult(EccPoint * RESTRICT result,
   15572:	9002      	str	r0, [sp, #8]
    vli_set(Ry[1], point->y);
   15574:	9201      	str	r2, [sp, #4]
        dest[i] = src[i];
   15576:	4616      	mov	r6, r2
static void EccPoint_mult(EccPoint * RESTRICT result,
   15578:	468a      	mov	sl, r1
    if (initial_Z) {
   1557a:	461c      	mov	r4, r3
        dest[i] = src[i];
   1557c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   15580:	af1c      	add	r7, sp, #112	; 0x70
   15582:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   15584:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   15588:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   1558c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1558e:	ad2c      	add	r5, sp, #176	; 0xb0
   15590:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   15592:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   15596:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    if (initial_Z) {
   1559a:	2c00      	cmp	r4, #0
   1559c:	f000 815c 	beq.w	15858 <EccPoint_mult.constprop.0+0x2f4>
        dest[i] = src[i];
   155a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   155a2:	ae04      	add	r6, sp, #16
   155a4:	4635      	mov	r5, r6
   155a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   155a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   155ac:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   155b0:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   155b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   155b8:	af14      	add	r7, sp, #80	; 0x50
   155ba:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   155bc:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   155c0:	ad2c      	add	r5, sp, #176	; 0xb0
   155c2:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   155c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   155c8:	ac24      	add	r4, sp, #144	; 0x90
   155ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   155cc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   155d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    vli_square(product, left);
   155d4:	4631      	mov	r1, r6
   155d6:	a834      	add	r0, sp, #208	; 0xd0
   155d8:	f7fe fec0 	bl	1435c <vli_square>
    vli_mmod_fast(result, product);
   155dc:	a934      	add	r1, sp, #208	; 0xd0
   155de:	a80c      	add	r0, sp, #48	; 0x30
   155e0:	f7ff f876 	bl	146d0 <vli_mmod_fast>
    vli_mult(product, left, right);
   155e4:	aa0c      	add	r2, sp, #48	; 0x30
   155e6:	a91c      	add	r1, sp, #112	; 0x70
   155e8:	a834      	add	r0, sp, #208	; 0xd0
   155ea:	f7fe fbdb 	bl	13da4 <vli_mult>
    vli_mmod_fast(result, product);
   155ee:	a934      	add	r1, sp, #208	; 0xd0
   155f0:	a81c      	add	r0, sp, #112	; 0x70
   155f2:	f7ff f86d 	bl	146d0 <vli_mmod_fast>
    vli_mult(product, left, right);
   155f6:	4632      	mov	r2, r6
   155f8:	a90c      	add	r1, sp, #48	; 0x30
   155fa:	a834      	add	r0, sp, #208	; 0xd0
   155fc:	f7fe fbd2 	bl	13da4 <vli_mult>
    vli_mmod_fast(result, product);
   15600:	a934      	add	r1, sp, #208	; 0xd0
   15602:	a80c      	add	r0, sp, #48	; 0x30
   15604:	f7ff f864 	bl	146d0 <vli_mmod_fast>
    vli_mult(product, left, right);
   15608:	aa0c      	add	r2, sp, #48	; 0x30
   1560a:	a92c      	add	r1, sp, #176	; 0xb0
   1560c:	a834      	add	r0, sp, #208	; 0xd0
   1560e:	f7fe fbc9 	bl	13da4 <vli_mult>
    vli_mmod_fast(result, product);
   15612:	a934      	add	r1, sp, #208	; 0xd0
   15614:	a82c      	add	r0, sp, #176	; 0xb0
   15616:	f7ff f85b 	bl	146d0 <vli_mmod_fast>
        if (vli[i]) {
   1561a:	6833      	ldr	r3, [r6, #0]
   1561c:	2b00      	cmp	r3, #0
   1561e:	f040 810f 	bne.w	15840 <EccPoint_mult.constprop.0+0x2dc>
   15622:	6873      	ldr	r3, [r6, #4]
   15624:	2b00      	cmp	r3, #0
   15626:	f040 810b 	bne.w	15840 <EccPoint_mult.constprop.0+0x2dc>
   1562a:	68b3      	ldr	r3, [r6, #8]
   1562c:	2b00      	cmp	r3, #0
   1562e:	f040 8107 	bne.w	15840 <EccPoint_mult.constprop.0+0x2dc>
   15632:	68f3      	ldr	r3, [r6, #12]
   15634:	2b00      	cmp	r3, #0
   15636:	f040 8103 	bne.w	15840 <EccPoint_mult.constprop.0+0x2dc>
   1563a:	6933      	ldr	r3, [r6, #16]
   1563c:	2b00      	cmp	r3, #0
   1563e:	f040 80ff 	bne.w	15840 <EccPoint_mult.constprop.0+0x2dc>
   15642:	6973      	ldr	r3, [r6, #20]
   15644:	2b00      	cmp	r3, #0
   15646:	f040 80fb 	bne.w	15840 <EccPoint_mult.constprop.0+0x2dc>
   1564a:	69b3      	ldr	r3, [r6, #24]
   1564c:	2b00      	cmp	r3, #0
   1564e:	f040 80f7 	bne.w	15840 <EccPoint_mult.constprop.0+0x2dc>
   15652:	69f3      	ldr	r3, [r6, #28]
   15654:	2b00      	cmp	r3, #0
   15656:	f040 80f3 	bne.w	15840 <EccPoint_mult.constprop.0+0x2dc>
    vli_square(product, left);
   1565a:	4631      	mov	r1, r6
   1565c:	a834      	add	r0, sp, #208	; 0xd0
   1565e:	f7fe fe7d 	bl	1435c <vli_square>
    vli_mmod_fast(result, product);
   15662:	a934      	add	r1, sp, #208	; 0xd0
   15664:	a80c      	add	r0, sp, #48	; 0x30
   15666:	f7ff f833 	bl	146d0 <vli_mmod_fast>
    vli_mult(product, left, right);
   1566a:	aa0c      	add	r2, sp, #48	; 0x30
   1566c:	a914      	add	r1, sp, #80	; 0x50
   1566e:	a834      	add	r0, sp, #208	; 0xd0
   15670:	f7fe fb98 	bl	13da4 <vli_mult>
    vli_mmod_fast(result, product);
   15674:	a934      	add	r1, sp, #208	; 0xd0
   15676:	a814      	add	r0, sp, #80	; 0x50
   15678:	f7ff f82a 	bl	146d0 <vli_mmod_fast>
    vli_mult(product, left, right);
   1567c:	4632      	mov	r2, r6
   1567e:	a90c      	add	r1, sp, #48	; 0x30
   15680:	a834      	add	r0, sp, #208	; 0xd0
   15682:	f7fe fb8f 	bl	13da4 <vli_mult>
    vli_mmod_fast(result, product);
   15686:	a934      	add	r1, sp, #208	; 0xd0
   15688:	a80c      	add	r0, sp, #48	; 0x30
   1568a:	f7ff f821 	bl	146d0 <vli_mmod_fast>
    vli_mult(product, left, right);
   1568e:	aa0c      	add	r2, sp, #48	; 0x30
   15690:	a924      	add	r1, sp, #144	; 0x90
   15692:	a834      	add	r0, sp, #208	; 0xd0
   15694:	f7fe fb86 	bl	13da4 <vli_mult>
    vli_mmod_fast(result, product);
   15698:	a934      	add	r1, sp, #208	; 0xd0
   1569a:	a824      	add	r0, sp, #144	; 0x90
   1569c:	f7ff f818 	bl	146d0 <vli_mmod_fast>

    XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initialZ);

    for (i = numBits - 2; i > 0; --i) {
   156a0:	25ff      	movs	r5, #255	; 0xff
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   156a2:	f04f 0901 	mov.w	r9, #1
   156a6:	9603      	str	r6, [sp, #12]
   156a8:	116b      	asrs	r3, r5, #5
   156aa:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
   156ae:	f005 031f 	and.w	r3, r5, #31
   156b2:	fa09 f303 	lsl.w	r3, r9, r3
        nb = !vli_testBit(scalar, i);
   156b6:	4213      	tst	r3, r2
   156b8:	bf0c      	ite	eq
   156ba:	2401      	moveq	r4, #1
   156bc:	2400      	movne	r4, #0
        XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb]);
   156be:	f1c4 0701 	rsb	r7, r4, #1
   156c2:	ab14      	add	r3, sp, #80	; 0x50
   156c4:	eb03 1647 	add.w	r6, r3, r7, lsl #5
   156c8:	ab24      	add	r3, sp, #144	; 0x90
   156ca:	eb03 1747 	add.w	r7, r3, r7, lsl #5
   156ce:	ab14      	add	r3, sp, #80	; 0x50
   156d0:	eb03 1b44 	add.w	fp, r3, r4, lsl #5
   156d4:	ab24      	add	r3, sp, #144	; 0x90
   156d6:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   156da:	4623      	mov	r3, r4
   156dc:	465a      	mov	r2, fp
   156de:	4639      	mov	r1, r7
   156e0:	4630      	mov	r0, r6
   156e2:	f7ff fca5 	bl	15030 <XYcZ_addC>
        XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb]);
   156e6:	463b      	mov	r3, r7
   156e8:	4632      	mov	r2, r6
   156ea:	4621      	mov	r1, r4
   156ec:	4658      	mov	r0, fp
   156ee:	f7ff fbff 	bl	14ef0 <XYcZ_add>
    for (i = numBits - 2; i > 0; --i) {
   156f2:	3d01      	subs	r5, #1
   156f4:	d1d8      	bne.n	156a8 <EccPoint_mult.constprop.0+0x144>
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   156f6:	f8d8 4000 	ldr.w	r4, [r8]
   156fa:	9e03      	ldr	r6, [sp, #12]
   156fc:	43e5      	mvns	r5, r4
    }

    nb = !vli_testBit(scalar, 0);
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb]);
   156fe:	ab14      	add	r3, sp, #80	; 0x50
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   15700:	f004 0401 	and.w	r4, r4, #1
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb]);
   15704:	eb03 1744 	add.w	r7, r3, r4, lsl #5
   15708:	ab24      	add	r3, sp, #144	; 0x90
   1570a:	f005 0501 	and.w	r5, r5, #1
   1570e:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   15712:	ab14      	add	r3, sp, #80	; 0x50
   15714:	eb03 1845 	add.w	r8, r3, r5, lsl #5
   15718:	ab24      	add	r3, sp, #144	; 0x90
   1571a:	eb03 1545 	add.w	r5, r3, r5, lsl #5
   1571e:	4642      	mov	r2, r8
   15720:	4621      	mov	r1, r4
   15722:	4638      	mov	r0, r7
   15724:	462b      	mov	r3, r5
   15726:	f7ff fc83 	bl	15030 <XYcZ_addC>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   1572a:	aa14      	add	r2, sp, #80	; 0x50
   1572c:	a91c      	add	r1, sp, #112	; 0x70
   1572e:	4630      	mov	r0, r6
   15730:	f7fe faf0 	bl	13d14 <vli_sub>
    if (l_borrow) {
   15734:	2800      	cmp	r0, #0
   15736:	f040 8089 	bne.w	1584c <EccPoint_mult.constprop.0+0x2e8>
    vli_mult(product, left, right);
   1573a:	4622      	mov	r2, r4
   1573c:	4631      	mov	r1, r6
   1573e:	a834      	add	r0, sp, #208	; 0xd0
   15740:	f7fe fb30 	bl	13da4 <vli_mult>
    vli_mmod_fast(result, product);
   15744:	a934      	add	r1, sp, #208	; 0xd0
   15746:	4630      	mov	r0, r6
   15748:	f7fe ffc2 	bl	146d0 <vli_mmod_fast>
    vli_mult(product, left, right);
   1574c:	4652      	mov	r2, sl
   1574e:	4631      	mov	r1, r6
   15750:	a834      	add	r0, sp, #208	; 0xd0
   15752:	f7fe fb27 	bl	13da4 <vli_mult>
    vli_mmod_fast(result, product);
   15756:	a934      	add	r1, sp, #208	; 0xd0
   15758:	4630      	mov	r0, r6
   1575a:	f7fe ffb9 	bl	146d0 <vli_mmod_fast>
        if (vli[i]) {
   1575e:	6833      	ldr	r3, [r6, #0]
   15760:	2b00      	cmp	r3, #0
   15762:	d167      	bne.n	15834 <EccPoint_mult.constprop.0+0x2d0>
   15764:	6873      	ldr	r3, [r6, #4]
   15766:	2b00      	cmp	r3, #0
   15768:	d164      	bne.n	15834 <EccPoint_mult.constprop.0+0x2d0>
   1576a:	68b3      	ldr	r3, [r6, #8]
   1576c:	2b00      	cmp	r3, #0
   1576e:	d161      	bne.n	15834 <EccPoint_mult.constprop.0+0x2d0>
   15770:	68f3      	ldr	r3, [r6, #12]
   15772:	2b00      	cmp	r3, #0
   15774:	d15e      	bne.n	15834 <EccPoint_mult.constprop.0+0x2d0>
   15776:	6933      	ldr	r3, [r6, #16]
   15778:	2b00      	cmp	r3, #0
   1577a:	d15b      	bne.n	15834 <EccPoint_mult.constprop.0+0x2d0>
   1577c:	6973      	ldr	r3, [r6, #20]
   1577e:	2b00      	cmp	r3, #0
   15780:	d158      	bne.n	15834 <EccPoint_mult.constprop.0+0x2d0>
   15782:	69b3      	ldr	r3, [r6, #24]
   15784:	2b00      	cmp	r3, #0
   15786:	d155      	bne.n	15834 <EccPoint_mult.constprop.0+0x2d0>
   15788:	69f1      	ldr	r1, [r6, #28]
   1578a:	2900      	cmp	r1, #0
   1578c:	d152      	bne.n	15834 <EccPoint_mult.constprop.0+0x2d0>
        vli[i] = 0;
   1578e:	2220      	movs	r2, #32
   15790:	4630      	mov	r0, r6
   15792:	f007 f9c1 	bl	1cb18 <memset>
    vli_mult(product, left, right);
   15796:	9a01      	ldr	r2, [sp, #4]
   15798:	4631      	mov	r1, r6
   1579a:	a834      	add	r0, sp, #208	; 0xd0
   1579c:	f7fe fb02 	bl	13da4 <vli_mult>
    vli_mmod_fast(result, product);
   157a0:	a934      	add	r1, sp, #208	; 0xd0
   157a2:	4630      	mov	r0, r6
   157a4:	f7fe ff94 	bl	146d0 <vli_mmod_fast>
    vli_mult(product, left, right);
   157a8:	463a      	mov	r2, r7
   157aa:	4631      	mov	r1, r6
   157ac:	a834      	add	r0, sp, #208	; 0xd0
   157ae:	f7fe faf9 	bl	13da4 <vli_mult>
    vli_mmod_fast(result, product);
   157b2:	a934      	add	r1, sp, #208	; 0xd0
   157b4:	4630      	mov	r0, r6
   157b6:	f7fe ff8b 	bl	146d0 <vli_mmod_fast>
    vli_modInv(z, z, curve_p);          /* 1 / (xP * Yb * (X1 - X0)) */
    vli_modMult_fast(z, z, point->y); /* yP / (xP * Yb * (X1 - X0)) */
    vli_modMult_fast(z, z, Rx[1 - nb]); /* Xb * yP / (xP * Yb * (X1 - X0)) */
    /* End 1/Z calculation */

    XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb]);
   157ba:	4623      	mov	r3, r4
   157bc:	463a      	mov	r2, r7
   157be:	4629      	mov	r1, r5
   157c0:	4640      	mov	r0, r8
   157c2:	f7ff fb95 	bl	14ef0 <XYcZ_add>
    vli_square(product, left);
   157c6:	4631      	mov	r1, r6
   157c8:	a834      	add	r0, sp, #208	; 0xd0
   157ca:	f7fe fdc7 	bl	1435c <vli_square>
    vli_mmod_fast(result, product);
   157ce:	a934      	add	r1, sp, #208	; 0xd0
   157d0:	a80c      	add	r0, sp, #48	; 0x30
   157d2:	f7fe ff7d 	bl	146d0 <vli_mmod_fast>
    vli_mult(product, left, right);
   157d6:	aa0c      	add	r2, sp, #48	; 0x30
   157d8:	a914      	add	r1, sp, #80	; 0x50
   157da:	a834      	add	r0, sp, #208	; 0xd0
   157dc:	f7fe fae2 	bl	13da4 <vli_mult>
    vli_mmod_fast(result, product);
   157e0:	a934      	add	r1, sp, #208	; 0xd0
   157e2:	a814      	add	r0, sp, #80	; 0x50
   157e4:	f7fe ff74 	bl	146d0 <vli_mmod_fast>
    vli_mult(product, left, right);
   157e8:	4632      	mov	r2, r6
   157ea:	a90c      	add	r1, sp, #48	; 0x30
   157ec:	a834      	add	r0, sp, #208	; 0xd0
   157ee:	f7fe fad9 	bl	13da4 <vli_mult>
    vli_mmod_fast(result, product);
   157f2:	a934      	add	r1, sp, #208	; 0xd0
   157f4:	a80c      	add	r0, sp, #48	; 0x30
   157f6:	f7fe ff6b 	bl	146d0 <vli_mmod_fast>
    vli_mult(product, left, right);
   157fa:	aa0c      	add	r2, sp, #48	; 0x30
   157fc:	a924      	add	r1, sp, #144	; 0x90
   157fe:	a834      	add	r0, sp, #208	; 0xd0
   15800:	f7fe fad0 	bl	13da4 <vli_mult>
        dest[i] = src[i];
   15804:	af14      	add	r7, sp, #80	; 0x50
    vli_mmod_fast(result, product);
   15806:	a934      	add	r1, sp, #208	; 0xd0
   15808:	a824      	add	r0, sp, #144	; 0x90
   1580a:	f7fe ff61 	bl	146d0 <vli_mmod_fast>
        dest[i] = src[i];
   1580e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   15810:	9c02      	ldr	r4, [sp, #8]
   15812:	f104 0520 	add.w	r5, r4, #32
   15816:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   15818:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   1581c:	ae24      	add	r6, sp, #144	; 0x90
   1581e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   15822:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   15824:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   15826:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   1582a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    apply_z(Rx[0], Ry[0], z);

    vli_set(result->x, Rx[0]);
    vli_set(result->y, Ry[0]);
}
   1582e:	b045      	add	sp, #276	; 0x114
   15830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15834:	4a0e      	ldr	r2, [pc, #56]	; (15870 <EccPoint_mult.constprop.0+0x30c>)
   15836:	4631      	mov	r1, r6
   15838:	4630      	mov	r0, r6
   1583a:	f7ff f82f 	bl	1489c <vli_modInv.part.0>
   1583e:	e7aa      	b.n	15796 <EccPoint_mult.constprop.0+0x232>
   15840:	a92c      	add	r1, sp, #176	; 0xb0
   15842:	4632      	mov	r2, r6
   15844:	a81c      	add	r0, sp, #112	; 0x70
   15846:	f7ff fd05 	bl	15254 <EccPoint_double_jacobian.part.0>
   1584a:	e706      	b.n	1565a <EccPoint_mult.constprop.0+0xf6>
        vli_add(result, result, mod);
   1584c:	4a08      	ldr	r2, [pc, #32]	; (15870 <EccPoint_mult.constprop.0+0x30c>)
   1584e:	4631      	mov	r1, r6
   15850:	4630      	mov	r0, r6
   15852:	f7fe fa1f 	bl	13c94 <vli_add>
   15856:	e770      	b.n	1573a <EccPoint_mult.constprop.0+0x1d6>
        vli[i] = 0;
   15858:	ae04      	add	r6, sp, #16
        z[0] = 1;
   1585a:	2301      	movs	r3, #1
        vli[i] = 0;
   1585c:	e9cd 4405 	strd	r4, r4, [sp, #20]
   15860:	e9cd 4407 	strd	r4, r4, [sp, #28]
   15864:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   15868:	940b      	str	r4, [sp, #44]	; 0x2c
        z[0] = 1;
   1586a:	6033      	str	r3, [r6, #0]
   1586c:	e6a0      	b.n	155b0 <EccPoint_mult.constprop.0+0x4c>
   1586e:	bf00      	nop
   15870:	000200e8 	.word	0x000200e8

00015874 <uECC_set_rng>:
    g_rng_function = rng_function;
   15874:	4b01      	ldr	r3, [pc, #4]	; (1587c <uECC_set_rng+0x8>)
   15876:	6018      	str	r0, [r3, #0]
}
   15878:	4770      	bx	lr
   1587a:	bf00      	nop
   1587c:	10002b28 	.word	0x10002b28

00015880 <uECC_shared_secret>:
    return 0;
}

int uECC_shared_secret(const uint8_t public_key[uECC_BYTES*2],
                       const uint8_t private_key[uECC_BYTES],
                       uint8_t secret[uECC_BYTES]) {
   15880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15884:	b0bc      	sub	sp, #240	; 0xf0
    uECC_word_t random[uECC_WORDS];
    uECC_word_t *initial_Z = 0;
    uECC_word_t tries;
#if (uECC_CURVE != uECC_secp160r1)
    uECC_word_t tmp[uECC_WORDS];
    uECC_word_t *p2[2] = {private, tmp};
   15886:	f10d 0810 	add.w	r8, sp, #16
   1588a:	f10d 0950 	add.w	r9, sp, #80	; 0x50
   1588e:	e9cd 8902 	strd	r8, r9, [sp, #8]
#endif

    // Try to get a random initial Z value to improve protection against side-channel
    // attacks. If the RNG fails every time (eg it was not defined), we continue so that
    // uECC_shared_secret() can still work without an RNG defined.
    for (tries = 0; tries < MAX_TRIES; ++tries) {
   15892:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 15a7c <uECC_shared_secret+0x1fc>
                       uint8_t secret[uECC_BYTES]) {
   15896:	4606      	mov	r6, r0
   15898:	460f      	mov	r7, r1
   1589a:	4615      	mov	r5, r2
    uECC_word_t *p2[2] = {private, tmp};
   1589c:	2440      	movs	r4, #64	; 0x40
   1589e:	e001      	b.n	158a4 <uECC_shared_secret+0x24>
    for (tries = 0; tries < MAX_TRIES; ++tries) {
   158a0:	3c01      	subs	r4, #1
   158a2:	d018      	beq.n	158d6 <uECC_shared_secret+0x56>
        if (g_rng_function((uint8_t *)random, sizeof(random)) && !vli_isZero(random)) {
   158a4:	f8da 3000 	ldr.w	r3, [sl]
   158a8:	2120      	movs	r1, #32
   158aa:	a80c      	add	r0, sp, #48	; 0x30
   158ac:	4798      	blx	r3
   158ae:	2800      	cmp	r0, #0
   158b0:	d0f6      	beq.n	158a0 <uECC_shared_secret+0x20>
        if (vli[i]) {
   158b2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
   158b6:	980c      	ldr	r0, [sp, #48]	; 0x30
   158b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
   158ba:	4303      	orrs	r3, r0
   158bc:	431a      	orrs	r2, r3
   158be:	9810      	ldr	r0, [sp, #64]	; 0x40
   158c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   158c2:	4311      	orrs	r1, r2
   158c4:	4308      	orrs	r0, r1
   158c6:	4318      	orrs	r0, r3
   158c8:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   158cc:	4310      	orrs	r0, r2
   158ce:	4303      	orrs	r3, r0
   158d0:	d0e6      	beq.n	158a0 <uECC_shared_secret+0x20>
            initial_Z = random;
   158d2:	ab0c      	add	r3, sp, #48	; 0x30
   158d4:	e000      	b.n	158d8 <uECC_shared_secret+0x58>
    uECC_word_t *initial_Z = 0;
   158d6:	4623      	mov	r3, r4
        native[i] = ((uint32_t)digit[0] << 24) | ((uint32_t)digit[1] << 16) |
   158d8:	69fa      	ldr	r2, [r7, #28]
   158da:	6879      	ldr	r1, [r7, #4]
   158dc:	9301      	str	r3, [sp, #4]
   158de:	ba12      	rev	r2, r2
   158e0:	9204      	str	r2, [sp, #16]
   158e2:	69ba      	ldr	r2, [r7, #24]
   158e4:	ba12      	rev	r2, r2
   158e6:	9205      	str	r2, [sp, #20]
   158e8:	697a      	ldr	r2, [r7, #20]
   158ea:	ba12      	rev	r2, r2
   158ec:	9206      	str	r2, [sp, #24]
   158ee:	693a      	ldr	r2, [r7, #16]
   158f0:	ba12      	rev	r2, r2
   158f2:	9207      	str	r2, [sp, #28]
   158f4:	68fa      	ldr	r2, [r7, #12]
   158f6:	ba12      	rev	r2, r2
   158f8:	9208      	str	r2, [sp, #32]
   158fa:	68ba      	ldr	r2, [r7, #8]
   158fc:	ba12      	rev	r2, r2
   158fe:	9209      	str	r2, [sp, #36]	; 0x24
   15900:	683a      	ldr	r2, [r7, #0]
   15902:	ba12      	rev	r2, r2
   15904:	920b      	str	r2, [sp, #44]	; 0x2c
   15906:	69f2      	ldr	r2, [r6, #28]
   15908:	ba12      	rev	r2, r2
   1590a:	921c      	str	r2, [sp, #112]	; 0x70
   1590c:	69b2      	ldr	r2, [r6, #24]
   1590e:	ba12      	rev	r2, r2
   15910:	921d      	str	r2, [sp, #116]	; 0x74
   15912:	6972      	ldr	r2, [r6, #20]
   15914:	ba12      	rev	r2, r2
   15916:	921e      	str	r2, [sp, #120]	; 0x78
   15918:	6932      	ldr	r2, [r6, #16]
   1591a:	ba12      	rev	r2, r2
   1591c:	921f      	str	r2, [sp, #124]	; 0x7c
   1591e:	68f2      	ldr	r2, [r6, #12]
   15920:	ba12      	rev	r2, r2
   15922:	9220      	str	r2, [sp, #128]	; 0x80
   15924:	68b2      	ldr	r2, [r6, #8]
   15926:	ba12      	rev	r2, r2
   15928:	9221      	str	r2, [sp, #132]	; 0x84
   1592a:	6872      	ldr	r2, [r6, #4]
   1592c:	ba12      	rev	r2, r2
   1592e:	9222      	str	r2, [sp, #136]	; 0x88
   15930:	6832      	ldr	r2, [r6, #0]
   15932:	ba09      	rev	r1, r1
   15934:	ba12      	rev	r2, r2
   15936:	910a      	str	r1, [sp, #40]	; 0x28
   15938:	9223      	str	r2, [sp, #140]	; 0x8c
   1593a:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
   1593c:	6a71      	ldr	r1, [r6, #36]	; 0x24
   1593e:	ba12      	rev	r2, r2
   15940:	9224      	str	r2, [sp, #144]	; 0x90
   15942:	6bb2      	ldr	r2, [r6, #56]	; 0x38
   15944:	ba12      	rev	r2, r2
   15946:	9225      	str	r2, [sp, #148]	; 0x94
   15948:	6b72      	ldr	r2, [r6, #52]	; 0x34
   1594a:	ba12      	rev	r2, r2
   1594c:	9226      	str	r2, [sp, #152]	; 0x98
   1594e:	6b32      	ldr	r2, [r6, #48]	; 0x30
   15950:	ba12      	rev	r2, r2
   15952:	9227      	str	r2, [sp, #156]	; 0x9c
   15954:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   15956:	ba12      	rev	r2, r2
   15958:	9228      	str	r2, [sp, #160]	; 0xa0
   1595a:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   1595c:	ba12      	rev	r2, r2
   1595e:	9229      	str	r2, [sp, #164]	; 0xa4
   15960:	6a32      	ldr	r2, [r6, #32]
   15962:	ba09      	rev	r1, r1
   15964:	ba12      	rev	r2, r2
   15966:	912a      	str	r1, [sp, #168]	; 0xa8
   15968:	922b      	str	r2, [sp, #172]	; 0xac
    // Don't regularize the bitcount for secp160r1.
    EccPoint_mult(&product, &public, private, initial_Z, vli_numBits(private, uECC_WORDS));
#else
    // Regularize the bitcount for the private key so that attackers cannot use a side channel
    // attack to learn the number of leading zeros.
    carry = vli_add(private, private, curve_n);
   1596a:	4641      	mov	r1, r8
   1596c:	4a42      	ldr	r2, [pc, #264]	; (15a78 <uECC_shared_secret+0x1f8>)
   1596e:	4640      	mov	r0, r8
   15970:	f7fe f990 	bl	13c94 <vli_add>
    vli_add(tmp, private, curve_n);
   15974:	4a40      	ldr	r2, [pc, #256]	; (15a78 <uECC_shared_secret+0x1f8>)
    carry = vli_add(private, private, curve_n);
   15976:	4604      	mov	r4, r0
    vli_add(tmp, private, curve_n);
   15978:	4641      	mov	r1, r8
   1597a:	4648      	mov	r0, r9
   1597c:	f7fe f98a 	bl	13c94 <vli_add>
    EccPoint_mult(&product, &public, p2[!carry], initial_Z, (uECC_BYTES * 8) + 1);
   15980:	fab4 f284 	clz	r2, r4
   15984:	ab3c      	add	r3, sp, #240	; 0xf0
   15986:	0952      	lsrs	r2, r2, #5
   15988:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1598c:	a91c      	add	r1, sp, #112	; 0x70
   1598e:	9b01      	ldr	r3, [sp, #4]
   15990:	f852 2ce8 	ldr.w	r2, [r2, #-232]
   15994:	a82c      	add	r0, sp, #176	; 0xb0
   15996:	f7ff fde5 	bl	15564 <EccPoint_mult.constprop.0>
        digit[0] = (uint8_t)(native[i] >> 24);
   1599a:	e9dd 322c 	ldrd	r3, r2, [sp, #176]	; 0xb0
   1599e:	0e18      	lsrs	r0, r3, #24
   159a0:	7728      	strb	r0, [r5, #28]
        digit[1] = (uint8_t)(native[i] >> 16);
   159a2:	0c18      	lsrs	r0, r3, #16
   159a4:	7768      	strb	r0, [r5, #29]
        digit[2] = (uint8_t)(native[i] >> 8);
   159a6:	0a18      	lsrs	r0, r3, #8
   159a8:	77a8      	strb	r0, [r5, #30]
        digit[0] = (uint8_t)(native[i] >> 24);
   159aa:	0e10      	lsrs	r0, r2, #24
   159ac:	992e      	ldr	r1, [sp, #184]	; 0xb8
   159ae:	7628      	strb	r0, [r5, #24]
        digit[1] = (uint8_t)(native[i] >> 16);
   159b0:	0c10      	lsrs	r0, r2, #16
   159b2:	7668      	strb	r0, [r5, #25]
        digit[2] = (uint8_t)(native[i] >> 8);
   159b4:	0a10      	lsrs	r0, r2, #8
   159b6:	76a8      	strb	r0, [r5, #26]
        digit[0] = (uint8_t)(native[i] >> 24);
   159b8:	0e08      	lsrs	r0, r1, #24
   159ba:	7528      	strb	r0, [r5, #20]
        digit[1] = (uint8_t)(native[i] >> 16);
   159bc:	0c08      	lsrs	r0, r1, #16
   159be:	7568      	strb	r0, [r5, #21]
        digit[2] = (uint8_t)(native[i] >> 8);
   159c0:	0a08      	lsrs	r0, r1, #8
   159c2:	75a8      	strb	r0, [r5, #22]
        digit[0] = (uint8_t)(native[i] >> 24);
   159c4:	982f      	ldr	r0, [sp, #188]	; 0xbc
   159c6:	9c30      	ldr	r4, [sp, #192]	; 0xc0
   159c8:	9e31      	ldr	r6, [sp, #196]	; 0xc4
   159ca:	f8dd c0c8 	ldr.w	ip, [sp, #200]	; 0xc8
        digit[3] = (uint8_t)(native[i]);
   159ce:	77eb      	strb	r3, [r5, #31]
        digit[0] = (uint8_t)(native[i] >> 24);
   159d0:	0e07      	lsrs	r7, r0, #24
   159d2:	742f      	strb	r7, [r5, #16]
        digit[1] = (uint8_t)(native[i] >> 16);
   159d4:	0c07      	lsrs	r7, r0, #16
   159d6:	746f      	strb	r7, [r5, #17]
        digit[2] = (uint8_t)(native[i] >> 8);
   159d8:	0a07      	lsrs	r7, r0, #8
   159da:	74af      	strb	r7, [r5, #18]
        digit[0] = (uint8_t)(native[i] >> 24);
   159dc:	0e27      	lsrs	r7, r4, #24
   159de:	732f      	strb	r7, [r5, #12]
        digit[1] = (uint8_t)(native[i] >> 16);
   159e0:	0c27      	lsrs	r7, r4, #16
   159e2:	736f      	strb	r7, [r5, #13]
        digit[2] = (uint8_t)(native[i] >> 8);
   159e4:	0a27      	lsrs	r7, r4, #8
   159e6:	73af      	strb	r7, [r5, #14]
        digit[0] = (uint8_t)(native[i] >> 24);
   159e8:	0e37      	lsrs	r7, r6, #24
   159ea:	722f      	strb	r7, [r5, #8]
        digit[1] = (uint8_t)(native[i] >> 16);
   159ec:	0c37      	lsrs	r7, r6, #16
   159ee:	726f      	strb	r7, [r5, #9]
        digit[2] = (uint8_t)(native[i] >> 8);
   159f0:	0a37      	lsrs	r7, r6, #8
   159f2:	72af      	strb	r7, [r5, #10]
        digit[0] = (uint8_t)(native[i] >> 24);
   159f4:	ea4f 671c 	mov.w	r7, ip, lsr #24
   159f8:	712f      	strb	r7, [r5, #4]
        digit[1] = (uint8_t)(native[i] >> 16);
   159fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
        digit[3] = (uint8_t)(native[i]);
   159fe:	76ea      	strb	r2, [r5, #27]
   15a00:	75e9      	strb	r1, [r5, #23]
   15a02:	74e8      	strb	r0, [r5, #19]
   15a04:	73ec      	strb	r4, [r5, #15]
   15a06:	72ee      	strb	r6, [r5, #11]
        digit[1] = (uint8_t)(native[i] >> 16);
   15a08:	716f      	strb	r7, [r5, #5]
        digit[0] = (uint8_t)(native[i] >> 24);
   15a0a:	9f33      	ldr	r7, [sp, #204]	; 0xcc
        digit[3] = (uint8_t)(native[i]);
   15a0c:	f885 c007 	strb.w	ip, [r5, #7]
        digit[2] = (uint8_t)(native[i] >> 8);
   15a10:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
   15a14:	f885 e006 	strb.w	lr, [r5, #6]
        digit[0] = (uint8_t)(native[i] >> 24);
   15a18:	ea4f 6e17 	mov.w	lr, r7, lsr #24
   15a1c:	f885 e000 	strb.w	lr, [r5]
        digit[1] = (uint8_t)(native[i] >> 16);
   15a20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   15a24:	f885 e001 	strb.w	lr, [r5, #1]
        digit[2] = (uint8_t)(native[i] >> 8);
   15a28:	ea4f 2e17 	mov.w	lr, r7, lsr #8
        digit[3] = (uint8_t)(native[i]);
   15a2c:	70ef      	strb	r7, [r5, #3]
        digit[2] = (uint8_t)(native[i] >> 8);
   15a2e:	f885 e002 	strb.w	lr, [r5, #2]
        if (vli[i]) {
   15a32:	b9eb      	cbnz	r3, 15a70 <uECC_shared_secret+0x1f0>
   15a34:	b9e2      	cbnz	r2, 15a70 <uECC_shared_secret+0x1f0>
   15a36:	b9d9      	cbnz	r1, 15a70 <uECC_shared_secret+0x1f0>
   15a38:	b9d0      	cbnz	r0, 15a70 <uECC_shared_secret+0x1f0>
   15a3a:	b9cc      	cbnz	r4, 15a70 <uECC_shared_secret+0x1f0>
   15a3c:	b9c6      	cbnz	r6, 15a70 <uECC_shared_secret+0x1f0>
   15a3e:	f1bc 0f00 	cmp.w	ip, #0
   15a42:	d115      	bne.n	15a70 <uECC_shared_secret+0x1f0>
   15a44:	b9a7      	cbnz	r7, 15a70 <uECC_shared_secret+0x1f0>
   15a46:	9b34      	ldr	r3, [sp, #208]	; 0xd0
   15a48:	b993      	cbnz	r3, 15a70 <uECC_shared_secret+0x1f0>
   15a4a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   15a4c:	b983      	cbnz	r3, 15a70 <uECC_shared_secret+0x1f0>
   15a4e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   15a50:	b973      	cbnz	r3, 15a70 <uECC_shared_secret+0x1f0>
   15a52:	9b37      	ldr	r3, [sp, #220]	; 0xdc
   15a54:	b963      	cbnz	r3, 15a70 <uECC_shared_secret+0x1f0>
   15a56:	9b38      	ldr	r3, [sp, #224]	; 0xe0
   15a58:	b953      	cbnz	r3, 15a70 <uECC_shared_secret+0x1f0>
   15a5a:	9b39      	ldr	r3, [sp, #228]	; 0xe4
   15a5c:	b943      	cbnz	r3, 15a70 <uECC_shared_secret+0x1f0>
   15a5e:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
   15a60:	b933      	cbnz	r3, 15a70 <uECC_shared_secret+0x1f0>
   15a62:	983b      	ldr	r0, [sp, #236]	; 0xec
   15a64:	3800      	subs	r0, #0
   15a66:	bf18      	it	ne
   15a68:	2001      	movne	r0, #1
#endif

    vli_nativeToBytes(secret, product.x);
    return !EccPoint_isZero(&product);
}
   15a6a:	b03c      	add	sp, #240	; 0xf0
   15a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15a70:	2001      	movs	r0, #1
   15a72:	b03c      	add	sp, #240	; 0xf0
   15a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15a78:	000200c8 	.word	0x000200c8
   15a7c:	10002b28 	.word	0x10002b28

00015a80 <uECC_valid_public_key>:

    vli_nativeToBytes(public_key, point.x);
    vli_nativeToBytes(public_key + uECC_BYTES, point.y);
}

int uECC_valid_public_key(const uint8_t public_key[uECC_BYTES*2]) {
   15a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a84:	6887      	ldr	r7, [r0, #8]
   15a86:	f8d0 8034 	ldr.w	r8, [r0, #52]	; 0x34
   15a8a:	69c1      	ldr	r1, [r0, #28]
   15a8c:	6984      	ldr	r4, [r0, #24]
   15a8e:	6945      	ldr	r5, [r0, #20]
   15a90:	6903      	ldr	r3, [r0, #16]
   15a92:	68c6      	ldr	r6, [r0, #12]
   15a94:	6842      	ldr	r2, [r0, #4]
   15a96:	f8d0 c000 	ldr.w	ip, [r0]
   15a9a:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
   15a9e:	f8d0 9038 	ldr.w	r9, [r0, #56]	; 0x38
   15aa2:	f8d0 a02c 	ldr.w	sl, [r0, #44]	; 0x2c
   15aa6:	f8d0 b028 	ldr.w	fp, [r0, #40]	; 0x28
   15aaa:	b0bd      	sub	sp, #244	; 0xf4
        native[i] = ((uint32_t)digit[0] << 24) | ((uint32_t)digit[1] << 16) |
   15aac:	ba3f      	rev	r7, r7
   15aae:	9701      	str	r7, [sp, #4]
   15ab0:	9721      	str	r7, [sp, #132]	; 0x84
   15ab2:	fa98 f788 	rev.w	r7, r8
   15ab6:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
   15aba:	9702      	str	r7, [sp, #8]
   15abc:	fa9a fa8a 	rev.w	sl, sl
   15ac0:	ba09      	rev	r1, r1
   15ac2:	ba24      	rev	r4, r4
   15ac4:	ba2d      	rev	r5, r5
   15ac6:	ba1b      	rev	r3, r3
   15ac8:	ba36      	rev	r6, r6
   15aca:	ba12      	rev	r2, r2
   15acc:	fa9c fc8c 	rev.w	ip, ip
   15ad0:	fa9e fe8e 	rev.w	lr, lr
   15ad4:	fa99 f989 	rev.w	r9, r9
   15ad8:	fa98 f888 	rev.w	r8, r8
   15adc:	fa9b fb8b 	rev.w	fp, fp
   15ae0:	e9cd 141c 	strd	r1, r4, [sp, #112]	; 0x70
   15ae4:	e9cd 531e 	strd	r5, r3, [sp, #120]	; 0x78
   15ae8:	9620      	str	r6, [sp, #128]	; 0x80
   15aea:	9222      	str	r2, [sp, #136]	; 0x88
   15aec:	f8cd c08c 	str.w	ip, [sp, #140]	; 0x8c
   15af0:	f8cd e090 	str.w	lr, [sp, #144]	; 0x90
   15af4:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   15af8:	9726      	str	r7, [sp, #152]	; 0x98
   15afa:	f8cd 809c 	str.w	r8, [sp, #156]	; 0x9c
   15afe:	f8cd a00c 	str.w	sl, [sp, #12]
   15b02:	f8cd a0a0 	str.w	sl, [sp, #160]	; 0xa0
   15b06:	f8cd b0a4 	str.w	fp, [sp, #164]	; 0xa4
   15b0a:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
   15b0e:	6a00      	ldr	r0, [r0, #32]
   15b10:	fa9a fa8a 	rev.w	sl, sl
   15b14:	ba00      	rev	r0, r0
   15b16:	e9cd a02a 	strd	sl, r0, [sp, #168]	; 0xa8
        if (vli[i]) {
   15b1a:	bb19      	cbnz	r1, 15b64 <uECC_valid_public_key+0xe4>
   15b1c:	bb14      	cbnz	r4, 15b64 <uECC_valid_public_key+0xe4>
   15b1e:	bb0d      	cbnz	r5, 15b64 <uECC_valid_public_key+0xe4>
   15b20:	bb03      	cbnz	r3, 15b64 <uECC_valid_public_key+0xe4>
   15b22:	b9fe      	cbnz	r6, 15b64 <uECC_valid_public_key+0xe4>
   15b24:	9f01      	ldr	r7, [sp, #4]
   15b26:	b9ef      	cbnz	r7, 15b64 <uECC_valid_public_key+0xe4>
   15b28:	2a00      	cmp	r2, #0
   15b2a:	f040 80c6 	bne.w	15cba <uECC_valid_public_key+0x23a>
   15b2e:	f1bc 0f00 	cmp.w	ip, #0
   15b32:	d12d      	bne.n	15b90 <uECC_valid_public_key+0x110>
   15b34:	f1be 0f00 	cmp.w	lr, #0
   15b38:	d12a      	bne.n	15b90 <uECC_valid_public_key+0x110>
   15b3a:	f1b9 0f00 	cmp.w	r9, #0
   15b3e:	d127      	bne.n	15b90 <uECC_valid_public_key+0x110>
   15b40:	9f02      	ldr	r7, [sp, #8]
   15b42:	bb2f      	cbnz	r7, 15b90 <uECC_valid_public_key+0x110>
   15b44:	f1b8 0f00 	cmp.w	r8, #0
   15b48:	d122      	bne.n	15b90 <uECC_valid_public_key+0x110>
   15b4a:	9f03      	ldr	r7, [sp, #12]
   15b4c:	bb07      	cbnz	r7, 15b90 <uECC_valid_public_key+0x110>
   15b4e:	f1bb 0f00 	cmp.w	fp, #0
   15b52:	d11d      	bne.n	15b90 <uECC_valid_public_key+0x110>
   15b54:	f1ba 0f00 	cmp.w	sl, #0
   15b58:	d137      	bne.n	15bca <uECC_valid_public_key+0x14a>
   15b5a:	2800      	cmp	r0, #0
   15b5c:	d137      	bne.n	15bce <uECC_valid_public_key+0x14e>
    vli_modSquare_fast(tmp1, public.y); /* tmp1 = y^2 */
    curve_x_side(tmp2, public.x); /* tmp2 = x^3 + ax + b */

    /* Make sure that y^2 == x^3 + ax + b */
    return (vli_cmp(tmp1, tmp2) == 0);
}
   15b5e:	b03d      	add	sp, #244	; 0xf4
   15b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (left[i] > right[i]) {
   15b64:	f1bc 3fff 	cmp.w	ip, #4294967295
   15b68:	d112      	bne.n	15b90 <uECC_valid_public_key+0x110>
   15b6a:	b18a      	cbz	r2, 15b90 <uECC_valid_public_key+0x110>
        } else if (left[i] < right[i]) {
   15b6c:	2a01      	cmp	r2, #1
   15b6e:	d828      	bhi.n	15bc2 <uECC_valid_public_key+0x142>
   15b70:	9a01      	ldr	r2, [sp, #4]
   15b72:	bb32      	cbnz	r2, 15bc2 <uECC_valid_public_key+0x142>
   15b74:	2e00      	cmp	r6, #0
   15b76:	f040 80af 	bne.w	15cd8 <uECC_valid_public_key+0x258>
   15b7a:	bb13      	cbnz	r3, 15bc2 <uECC_valid_public_key+0x142>
        if (left[i] > right[i]) {
   15b7c:	3501      	adds	r5, #1
   15b7e:	d107      	bne.n	15b90 <uECC_valid_public_key+0x110>
   15b80:	3401      	adds	r4, #1
   15b82:	d105      	bne.n	15b90 <uECC_valid_public_key+0x110>
   15b84:	3101      	adds	r1, #1
   15b86:	d103      	bne.n	15b90 <uECC_valid_public_key+0x110>
   15b88:	4618      	mov	r0, r3
}
   15b8a:	b03d      	add	sp, #244	; 0xf4
   15b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (left[i] > right[i]) {
   15b90:	3001      	adds	r0, #1
   15b92:	d11c      	bne.n	15bce <uECC_valid_public_key+0x14e>
   15b94:	f1ba 0f00 	cmp.w	sl, #0
   15b98:	d019      	beq.n	15bce <uECC_valid_public_key+0x14e>
        } else if (left[i] < right[i]) {
   15b9a:	f1ba 0f01 	cmp.w	sl, #1
   15b9e:	d110      	bne.n	15bc2 <uECC_valid_public_key+0x142>
   15ba0:	f1bb 0f00 	cmp.w	fp, #0
   15ba4:	d10d      	bne.n	15bc2 <uECC_valid_public_key+0x142>
   15ba6:	9b03      	ldr	r3, [sp, #12]
   15ba8:	b95b      	cbnz	r3, 15bc2 <uECC_valid_public_key+0x142>
   15baa:	f1b8 0f00 	cmp.w	r8, #0
   15bae:	d1eb      	bne.n	15b88 <uECC_valid_public_key+0x108>
        if (left[i] > right[i]) {
   15bb0:	9b02      	ldr	r3, [sp, #8]
   15bb2:	3301      	adds	r3, #1
   15bb4:	d10b      	bne.n	15bce <uECC_valid_public_key+0x14e>
   15bb6:	f1b9 3fff 	cmp.w	r9, #4294967295
   15bba:	d108      	bne.n	15bce <uECC_valid_public_key+0x14e>
   15bbc:	f1be 3fff 	cmp.w	lr, #4294967295
   15bc0:	d105      	bne.n	15bce <uECC_valid_public_key+0x14e>
        return 0;
   15bc2:	2000      	movs	r0, #0
}
   15bc4:	b03d      	add	sp, #244	; 0xf4
   15bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (left[i] > right[i]) {
   15bca:	3001      	adds	r0, #1
   15bcc:	d0e5      	beq.n	15b9a <uECC_valid_public_key+0x11a>
    vli_square(product, left);
   15bce:	a82c      	add	r0, sp, #176	; 0xb0
   15bd0:	a924      	add	r1, sp, #144	; 0x90
   15bd2:	f7fe fbc3 	bl	1435c <vli_square>
    vli_mmod_fast(result, product);
   15bd6:	a92c      	add	r1, sp, #176	; 0xb0
   15bd8:	a804      	add	r0, sp, #16
   15bda:	f7fe fd79 	bl	146d0 <vli_mmod_fast>
    uECC_word_t _3[uECC_WORDS] = {3}; /* -a = 3 */
   15bde:	2300      	movs	r3, #0
   15be0:	2203      	movs	r2, #3
    vli_square(product, left);
   15be2:	a91c      	add	r1, sp, #112	; 0x70
   15be4:	a82c      	add	r0, sp, #176	; 0xb0
    uECC_word_t _3[uECC_WORDS] = {3}; /* -a = 3 */
   15be6:	9214      	str	r2, [sp, #80]	; 0x50
   15be8:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
   15bec:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
   15bf0:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   15bf4:	931b      	str	r3, [sp, #108]	; 0x6c
    vli_square(product, left);
   15bf6:	f7fe fbb1 	bl	1435c <vli_square>
    vli_mmod_fast(result, product);
   15bfa:	a92c      	add	r1, sp, #176	; 0xb0
   15bfc:	a80c      	add	r0, sp, #48	; 0x30
   15bfe:	f7fe fd67 	bl	146d0 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   15c02:	a90c      	add	r1, sp, #48	; 0x30
   15c04:	aa14      	add	r2, sp, #80	; 0x50
   15c06:	4608      	mov	r0, r1
   15c08:	f7fe f884 	bl	13d14 <vli_sub>
    if (l_borrow) {
   15c0c:	2800      	cmp	r0, #0
   15c0e:	d15d      	bne.n	15ccc <uECC_valid_public_key+0x24c>
    vli_mult(product, left, right);
   15c10:	aa1c      	add	r2, sp, #112	; 0x70
   15c12:	a90c      	add	r1, sp, #48	; 0x30
   15c14:	a82c      	add	r0, sp, #176	; 0xb0
   15c16:	f7fe f8c5 	bl	13da4 <vli_mult>
    vli_mmod_fast(result, product);
   15c1a:	a92c      	add	r1, sp, #176	; 0xb0
   15c1c:	a80c      	add	r0, sp, #48	; 0x30
   15c1e:	f7fe fd57 	bl	146d0 <vli_mmod_fast>
    uECC_word_t carry = vli_add(result, left, right);
   15c22:	a90c      	add	r1, sp, #48	; 0x30
   15c24:	4a2d      	ldr	r2, [pc, #180]	; (15cdc <uECC_valid_public_key+0x25c>)
   15c26:	4608      	mov	r0, r1
   15c28:	f7fe f834 	bl	13c94 <vli_add>
    if (carry || vli_cmp(result, mod) >= 0) {
   15c2c:	b9a8      	cbnz	r0, 15c5a <uECC_valid_public_key+0x1da>
        } else if (left[i] < right[i]) {
   15c2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   15c30:	1c5a      	adds	r2, r3, #1
   15c32:	d118      	bne.n	15c66 <uECC_valid_public_key+0x1e6>
        if (left[i] > right[i]) {
   15c34:	9a12      	ldr	r2, [sp, #72]	; 0x48
   15c36:	2a01      	cmp	r2, #1
   15c38:	d80f      	bhi.n	15c5a <uECC_valid_public_key+0x1da>
        } else if (left[i] < right[i]) {
   15c3a:	b1a2      	cbz	r2, 15c66 <uECC_valid_public_key+0x1e6>
        if (left[i] > right[i]) {
   15c3c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   15c3e:	b962      	cbnz	r2, 15c5a <uECC_valid_public_key+0x1da>
   15c40:	9a10      	ldr	r2, [sp, #64]	; 0x40
   15c42:	b952      	cbnz	r2, 15c5a <uECC_valid_public_key+0x1da>
   15c44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   15c46:	b942      	cbnz	r2, 15c5a <uECC_valid_public_key+0x1da>
        } else if (left[i] < right[i]) {
   15c48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   15c4a:	3201      	adds	r2, #1
   15c4c:	d10b      	bne.n	15c66 <uECC_valid_public_key+0x1e6>
   15c4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   15c50:	3201      	adds	r2, #1
   15c52:	d108      	bne.n	15c66 <uECC_valid_public_key+0x1e6>
   15c54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15c56:	3201      	adds	r2, #1
   15c58:	d105      	bne.n	15c66 <uECC_valid_public_key+0x1e6>
        vli_sub(result, result, mod);
   15c5a:	a90c      	add	r1, sp, #48	; 0x30
   15c5c:	4a20      	ldr	r2, [pc, #128]	; (15ce0 <uECC_valid_public_key+0x260>)
   15c5e:	4608      	mov	r0, r1
   15c60:	f7fe f858 	bl	13d14 <vli_sub>
   15c64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
        if (left[i] > right[i]) {
   15c66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   15c68:	429a      	cmp	r2, r3
   15c6a:	d8aa      	bhi.n	15bc2 <uECC_valid_public_key+0x142>
        } else if (left[i] < right[i]) {
   15c6c:	d3a9      	bcc.n	15bc2 <uECC_valid_public_key+0x142>
        if (left[i] > right[i]) {
   15c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15c70:	9a12      	ldr	r2, [sp, #72]	; 0x48
   15c72:	429a      	cmp	r2, r3
   15c74:	d3a5      	bcc.n	15bc2 <uECC_valid_public_key+0x142>
        } else if (left[i] < right[i]) {
   15c76:	d8a4      	bhi.n	15bc2 <uECC_valid_public_key+0x142>
        if (left[i] > right[i]) {
   15c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15c7a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   15c7c:	429a      	cmp	r2, r3
   15c7e:	d3a0      	bcc.n	15bc2 <uECC_valid_public_key+0x142>
        } else if (left[i] < right[i]) {
   15c80:	d89f      	bhi.n	15bc2 <uECC_valid_public_key+0x142>
        if (left[i] > right[i]) {
   15c82:	9b08      	ldr	r3, [sp, #32]
   15c84:	9a10      	ldr	r2, [sp, #64]	; 0x40
   15c86:	429a      	cmp	r2, r3
   15c88:	d39b      	bcc.n	15bc2 <uECC_valid_public_key+0x142>
        } else if (left[i] < right[i]) {
   15c8a:	d89a      	bhi.n	15bc2 <uECC_valid_public_key+0x142>
        if (left[i] > right[i]) {
   15c8c:	9b07      	ldr	r3, [sp, #28]
   15c8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   15c90:	429a      	cmp	r2, r3
   15c92:	d396      	bcc.n	15bc2 <uECC_valid_public_key+0x142>
        } else if (left[i] < right[i]) {
   15c94:	d895      	bhi.n	15bc2 <uECC_valid_public_key+0x142>
        if (left[i] > right[i]) {
   15c96:	9b06      	ldr	r3, [sp, #24]
   15c98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   15c9a:	429a      	cmp	r2, r3
   15c9c:	d391      	bcc.n	15bc2 <uECC_valid_public_key+0x142>
        } else if (left[i] < right[i]) {
   15c9e:	d890      	bhi.n	15bc2 <uECC_valid_public_key+0x142>
        if (left[i] > right[i]) {
   15ca0:	9b05      	ldr	r3, [sp, #20]
   15ca2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   15ca4:	429a      	cmp	r2, r3
   15ca6:	d38c      	bcc.n	15bc2 <uECC_valid_public_key+0x142>
        } else if (left[i] < right[i]) {
   15ca8:	d88b      	bhi.n	15bc2 <uECC_valid_public_key+0x142>
        if (left[i] > right[i]) {
   15caa:	9a04      	ldr	r2, [sp, #16]
   15cac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15cae:	429a      	cmp	r2, r3
   15cb0:	d887      	bhi.n	15bc2 <uECC_valid_public_key+0x142>
        } else if (left[i] < right[i]) {
   15cb2:	bf2c      	ite	cs
   15cb4:	2001      	movcs	r0, #1
   15cb6:	2000      	movcc	r0, #0
   15cb8:	e751      	b.n	15b5e <uECC_valid_public_key+0xde>
        if (left[i] > right[i]) {
   15cba:	f1bc 3fff 	cmp.w	ip, #4294967295
   15cbe:	f47f af67 	bne.w	15b90 <uECC_valid_public_key+0x110>
        } else if (left[i] < right[i]) {
   15cc2:	2a01      	cmp	r2, #1
   15cc4:	f67f af64 	bls.w	15b90 <uECC_valid_public_key+0x110>
   15cc8:	4638      	mov	r0, r7
   15cca:	e748      	b.n	15b5e <uECC_valid_public_key+0xde>
        vli_add(result, result, mod);
   15ccc:	a90c      	add	r1, sp, #48	; 0x30
   15cce:	4a04      	ldr	r2, [pc, #16]	; (15ce0 <uECC_valid_public_key+0x260>)
   15cd0:	4608      	mov	r0, r1
   15cd2:	f7fd ffdf 	bl	13c94 <vli_add>
   15cd6:	e79b      	b.n	15c10 <uECC_valid_public_key+0x190>
   15cd8:	4610      	mov	r0, r2
   15cda:	e740      	b.n	15b5e <uECC_valid_public_key+0xde>
   15cdc:	000200a8 	.word	0x000200a8
   15ce0:	000200e8 	.word	0x000200e8

00015ce4 <SecAesHciCback>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecAesHciCback(secQueueBuf_t *pBuf, hciEvt_t *pEvent, wsfHandlerId_t handlerId)
{
   15ce4:	b538      	push	{r3, r4, r5, lr}
   15ce6:	4604      	mov	r4, r0
  secAes_t *pAes = (secAes_t *) &pBuf->msg;

  /* set encrypted data pointer and copy */
  pAes->pCiphertext = pBuf->ciphertext;
   15ce8:	3010      	adds	r0, #16
{
   15cea:	4615      	mov	r5, r2
  pAes->pCiphertext = pBuf->ciphertext;
   15cec:	6060      	str	r0, [r4, #4]
  Calc128Cpy(pAes->pCiphertext, pEvent->leEncryptCmdCmpl.data);
   15cee:	3105      	adds	r1, #5
   15cf0:	f7fd fb78 	bl	133e4 <Calc128Cpy>

  /* send message */
  WsfMsgSend(handlerId, pAes);
   15cf4:	4621      	mov	r1, r4
   15cf6:	4628      	mov	r0, r5
}
   15cf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WsfMsgSend(handlerId, pAes);
   15cfc:	f7f9 be30 	b.w	f960 <WsfMsgSend>

00015d00 <SecAes>:
{
   15d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15d04:	4606      	mov	r6, r0
  if ((pBuf = WsfMsgAlloc(sizeof(secQueueBuf_t))) != NULL)
   15d06:	2038      	movs	r0, #56	; 0x38
{
   15d08:	f89d 8020 	ldrb.w	r8, [sp, #32]
   15d0c:	460f      	mov	r7, r1
   15d0e:	4692      	mov	sl, r2
   15d10:	4699      	mov	r9, r3
  if ((pBuf = WsfMsgAlloc(sizeof(secQueueBuf_t))) != NULL)
   15d12:	f7f9 fe19 	bl	f948 <WsfMsgAlloc>
   15d16:	b328      	cbz	r0, 15d64 <SecAes+0x64>
  uint8_t token = secCb.token++;
   15d18:	4d14      	ldr	r5, [pc, #80]	; (15d6c <SecAes+0x6c>)
   15d1a:	f895 c038 	ldrb.w	ip, [r5, #56]	; 0x38
  if (token == SEC_TOKEN_INVALID)
   15d1e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   15d22:	4604      	mov	r4, r0
   15d24:	d018      	beq.n	15d58 <SecAes+0x58>
  uint8_t token = secCb.token++;
   15d26:	f10c 0301 	add.w	r3, ip, #1
   15d2a:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
    pBuf->type = SEC_TYPE_AES;
   15d2e:	2300      	movs	r3, #0
    pBuf->msg.hdr.status = getNextToken();
   15d30:	f884 c003 	strb.w	ip, [r4, #3]
    pBuf->type = SEC_TYPE_AES;
   15d34:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    WsfMsgEnq(&secCb.aesEncQueue, handlerId, pBuf);
   15d38:	4622      	mov	r2, r4
   15d3a:	4651      	mov	r1, sl
   15d3c:	480c      	ldr	r0, [pc, #48]	; (15d70 <SecAes+0x70>)
    pBuf->msg.hdr.param = param;
   15d3e:	f8a4 9000 	strh.w	r9, [r4]
    pBuf->msg.hdr.event = event;
   15d42:	f884 8002 	strb.w	r8, [r4, #2]
    WsfMsgEnq(&secCb.aesEncQueue, handlerId, pBuf);
   15d46:	f7f9 fe1d 	bl	f984 <WsfMsgEnq>
    HciLeEncryptCmd(pKey, pPlaintext);
   15d4a:	4630      	mov	r0, r6
   15d4c:	4639      	mov	r1, r7
   15d4e:	f7f7 f94d 	bl	cfec <HciLeEncryptCmd>
    return pBuf->msg.hdr.status;
   15d52:	78e0      	ldrb	r0, [r4, #3]
}
   15d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    token = secCb.token++;
   15d58:	2301      	movs	r3, #1
   15d5a:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
   15d5e:	f04f 0c00 	mov.w	ip, #0
   15d62:	e7e4      	b.n	15d2e <SecAes+0x2e>
  return SEC_TOKEN_INVALID;
   15d64:	20ff      	movs	r0, #255	; 0xff
}
   15d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15d6a:	bf00      	nop
   15d6c:	10005658 	.word	0x10005658
   15d70:	10005678 	.word	0x10005678

00015d74 <SecAesInit>:
 *  \return none.
 */
/*************************************************************************************************/
void SecAesInit()
{
  secCb.hciCbackTbl[SEC_TYPE_AES] = SecAesHciCback;
   15d74:	4b01      	ldr	r3, [pc, #4]	; (15d7c <SecAesInit+0x8>)
   15d76:	4a02      	ldr	r2, [pc, #8]	; (15d80 <SecAesInit+0xc>)
   15d78:	63da      	str	r2, [r3, #60]	; 0x3c
}
   15d7a:	4770      	bx	lr
   15d7c:	10005658 	.word	0x10005658
   15d80:	00015ce5 	.word	0x00015ce5

00015d84 <secCmacProcessBlock>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacProcessBlock(secQueueBuf_t *pBuf)
{
   15d84:	b5f0      	push	{r4, r5, r6, r7, lr}
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   15d86:	6b04      	ldr	r4, [r0, #48]	; 0x30
  uint8_t text[SEC_BLOCK_LEN];
  uint8_t *pMn = pCmac->pPlainText + pCmac->position;
   15d88:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
  int16_t remaining = (int16_t) pCmac->len - pCmac->position;
   15d8a:	8ce5      	ldrh	r5, [r4, #38]	; 0x26
  uint8_t *pMn = pCmac->pPlainText + pCmac->position;
   15d8c:	6821      	ldr	r1, [r4, #0]
  int16_t remaining = (int16_t) pCmac->len - pCmac->position;
   15d8e:	1aed      	subs	r5, r5, r3
   15d90:	b22d      	sxth	r5, r5
{
   15d92:	b085      	sub	sp, #20

  /* Check for Last Block */
  if (remaining <= SEC_BLOCK_LEN)
   15d94:	2d10      	cmp	r5, #16
{
   15d96:	4606      	mov	r6, r0
  uint8_t *pMn = pCmac->pPlainText + pCmac->position;
   15d98:	4419      	add	r1, r3
  {
    memcpy(text, pMn, remaining);
   15d9a:	466f      	mov	r7, sp
  if (remaining <= SEC_BLOCK_LEN)
   15d9c:	dc1a      	bgt.n	15dd4 <secCmacProcessBlock+0x50>
    memcpy(text, pMn, remaining);
   15d9e:	462a      	mov	r2, r5
   15da0:	4638      	mov	r0, r7
   15da2:	f7f6 f9ad 	bl	c100 <memcpy>

    /* Pad the message if necessary */
    if (remaining != SEC_BLOCK_LEN)
   15da6:	2d10      	cmp	r5, #16
   15da8:	d121      	bne.n	15dee <secCmacProcessBlock+0x6a>
      memset(text + remaining, 0, SEC_BLOCK_LEN - remaining);
      text[remaining] = 0x80;
    }

    /* XOr the subkey */
    Calc128Xor(text, pCmac->subkey);
   15daa:	f104 0114 	add.w	r1, r4, #20
   15dae:	4638      	mov	r0, r7
   15db0:	f7fd fb2a 	bl	13408 <Calc128Xor>
  {
    /* Copy the block to the buffer */
    Calc128Cpy(text, pMn);
  }

  if (pCmac->position != 0)
   15db4:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    pCmac->state = SEC_CMAC_STATE_COMPLETE;
   15db6:	2302      	movs	r3, #2
   15db8:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  if (pCmac->position != 0)
   15dbc:	b982      	cbnz	r2, 15de0 <secCmacProcessBlock+0x5c>
  {
    /* Except for first block, XOr the previous AES calculation */
    Calc128Xor(text, pBuf->ciphertext);
  }

  pCmac->position += SEC_BLOCK_LEN;
   15dbe:	3210      	adds	r2, #16
   15dc0:	84a2      	strh	r2, [r4, #36]	; 0x24

  SecLeEncryptCmd(pCmac->key, text, pBuf, pCmac->handlerId);
   15dc2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   15dc6:	4632      	mov	r2, r6
   15dc8:	4639      	mov	r1, r7
   15dca:	1d20      	adds	r0, r4, #4
   15dcc:	f000 fa3a 	bl	16244 <SecLeEncryptCmd>
}
   15dd0:	b005      	add	sp, #20
   15dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Calc128Cpy(text, pMn);
   15dd4:	4638      	mov	r0, r7
   15dd6:	f7fd fb05 	bl	133e4 <Calc128Cpy>
  if (pCmac->position != 0)
   15dda:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   15ddc:	2a00      	cmp	r2, #0
   15dde:	d0ee      	beq.n	15dbe <secCmacProcessBlock+0x3a>
    Calc128Xor(text, pBuf->ciphertext);
   15de0:	f106 0110 	add.w	r1, r6, #16
   15de4:	4638      	mov	r0, r7
   15de6:	f7fd fb0f 	bl	13408 <Calc128Xor>
  pCmac->position += SEC_BLOCK_LEN;
   15dea:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   15dec:	e7e7      	b.n	15dbe <secCmacProcessBlock+0x3a>
      memset(text + remaining, 0, SEC_BLOCK_LEN - remaining);
   15dee:	f1c5 0210 	rsb	r2, r5, #16
   15df2:	1978      	adds	r0, r7, r5
   15df4:	2100      	movs	r1, #0
   15df6:	f006 fe8f 	bl	1cb18 <memset>
      text[remaining] = 0x80;
   15dfa:	f105 0310 	add.w	r3, r5, #16
   15dfe:	eb0d 0503 	add.w	r5, sp, r3
   15e02:	2380      	movs	r3, #128	; 0x80
   15e04:	f805 3c10 	strb.w	r3, [r5, #-16]
   15e08:	e7cf      	b.n	15daa <secCmacProcessBlock+0x26>
   15e0a:	bf00      	nop

00015e0c <SecCmacHciCback>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecCmacHciCback(secQueueBuf_t *pBuf, hciEvt_t *pEvent, wsfHandlerId_t handlerId)
{
   15e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  secCmacSecCb_t *pCmac = (secCmacSecCb_t *) pBuf->pCb;
   15e10:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   15e12:	b089      	sub	sp, #36	; 0x24

  if (pCmac)
   15e14:	b17c      	cbz	r4, 15e36 <SecCmacHciCback+0x2a>
  {
    Calc128Cpy(pBuf->ciphertext, pEvent->leEncryptCmdCmpl.data);
   15e16:	f100 0610 	add.w	r6, r0, #16
   15e1a:	4605      	mov	r5, r0
   15e1c:	3105      	adds	r1, #5
   15e1e:	4630      	mov	r0, r6
   15e20:	f7fd fae0 	bl	133e4 <Calc128Cpy>

    switch (pCmac->state)
   15e24:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   15e28:	2b01      	cmp	r3, #1
   15e2a:	f000 8100 	beq.w	1602e <SecCmacHciCback+0x222>
   15e2e:	2b02      	cmp	r3, #2
   15e30:	f000 8103 	beq.w	1603a <SecCmacHciCback+0x22e>
   15e34:	b113      	cbz	r3, 15e3c <SecCmacHciCback+0x30>
    case SEC_CMAC_STATE_COMPLETE:
      secCmacComplete(pBuf);
      break;
    }
  }
}
   15e36:	b009      	add	sp, #36	; 0x24
   15e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   15e3c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
  Calc128Cpy(pCmac->subkey, pBuf->ciphertext);
   15e3e:	4631      	mov	r1, r6
   15e40:	f104 0014 	add.w	r0, r4, #20
   15e44:	f7fd face 	bl	133e4 <Calc128Cpy>
      overflow = pBuf[i+1] >> (8 - shift);
   15e48:	f894 b015 	ldrb.w	fp, [r4, #21]
   15e4c:	7fe2      	ldrb	r2, [r4, #31]
  uint8_t finalOverflow = pBuf[0] >> (8 - shift);
   15e4e:	7d23      	ldrb	r3, [r4, #20]
      overflow = pBuf[i+1] >> (8 - shift);
   15e50:	9206      	str	r2, [sp, #24]
   15e52:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
   15e56:	f894 a016 	ldrb.w	sl, [r4, #22]
   15e5a:	9202      	str	r2, [sp, #8]
   15e5c:	ea4f 12eb 	mov.w	r2, fp, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15e60:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   15e64:	f894 9017 	ldrb.w	r9, [r4, #23]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15e68:	9301      	str	r3, [sp, #4]
   15e6a:	b2d3      	uxtb	r3, r2
      overflow = pBuf[i+1] >> (8 - shift);
   15e6c:	ea4f 12ea 	mov.w	r2, sl, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15e70:	ea42 024b 	orr.w	r2, r2, fp, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   15e74:	f894 8018 	ldrb.w	r8, [r4, #24]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15e78:	7562      	strb	r2, [r4, #21]
      overflow = pBuf[i+1] >> (8 - shift);
   15e7a:	ea4f 12e9 	mov.w	r2, r9, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15e7e:	ea42 024a 	orr.w	r2, r2, sl, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   15e82:	7e67      	ldrb	r7, [r4, #25]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15e84:	75a2      	strb	r2, [r4, #22]
      overflow = pBuf[i+1] >> (8 - shift);
   15e86:	ea4f 12e8 	mov.w	r2, r8, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15e8a:	ea42 0249 	orr.w	r2, r2, r9, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   15e8e:	7ea6      	ldrb	r6, [r4, #26]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15e90:	75e2      	strb	r2, [r4, #23]
      overflow = pBuf[i+1] >> (8 - shift);
   15e92:	11fa      	asrs	r2, r7, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15e94:	ea42 0248 	orr.w	r2, r2, r8, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   15e98:	f894 e01b 	ldrb.w	lr, [r4, #27]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15e9c:	7622      	strb	r2, [r4, #24]
      overflow = pBuf[i+1] >> (8 - shift);
   15e9e:	11f2      	asrs	r2, r6, #7
   15ea0:	7f61      	ldrb	r1, [r4, #29]
   15ea2:	f894 c01c 	ldrb.w	ip, [r4, #28]
   15ea6:	9104      	str	r1, [sp, #16]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15ea8:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
   15eac:	7662      	strb	r2, [r4, #25]
      overflow = pBuf[i+1] >> (8 - shift);
   15eae:	ea4f 12ee 	mov.w	r2, lr, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15eb2:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   15eb6:	9e04      	ldr	r6, [sp, #16]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15eb8:	76a2      	strb	r2, [r4, #26]
      overflow = pBuf[i+1] >> (8 - shift);
   15eba:	ea4f 12ec 	mov.w	r2, ip, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15ebe:	ea42 0e4e 	orr.w	lr, r2, lr, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   15ec2:	11f2      	asrs	r2, r6, #7
   15ec4:	7fa0      	ldrb	r0, [r4, #30]
   15ec6:	f894 1020 	ldrb.w	r1, [r4, #32]
   15eca:	9005      	str	r0, [sp, #20]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15ecc:	ea42 0c4c 	orr.w	ip, r2, ip, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   15ed0:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
   15ed4:	9107      	str	r1, [sp, #28]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15ed6:	9303      	str	r3, [sp, #12]
      overflow = pBuf[i+1] >> (8 - shift);
   15ed8:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15edc:	7523      	strb	r3, [r4, #20]
   15ede:	f884 e01b 	strb.w	lr, [r4, #27]
   15ee2:	f884 c01c 	strb.w	ip, [r4, #28]
      overflow = pBuf[i+1] >> (8 - shift);
   15ee6:	9f05      	ldr	r7, [sp, #20]
   15ee8:	9b02      	ldr	r3, [sp, #8]
   15eea:	11fa      	asrs	r2, r7, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15eec:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   15ef0:	9e06      	ldr	r6, [sp, #24]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15ef2:	7762      	strb	r2, [r4, #29]
      overflow = pBuf[i+1] >> (8 - shift);
   15ef4:	11f2      	asrs	r2, r6, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15ef6:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   15efa:	9f07      	ldr	r7, [sp, #28]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15efc:	77a2      	strb	r2, [r4, #30]
      overflow = pBuf[i+1] >> (8 - shift);
   15efe:	11fa      	asrs	r2, r7, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15f00:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
   15f04:	77e2      	strb	r2, [r4, #31]
      overflow = pBuf[i+1] >> (8 - shift);
   15f06:	11c2      	asrs	r2, r0, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15f08:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
   15f0c:	f884 2020 	strb.w	r2, [r4, #32]
      overflow = pBuf[i+1] >> (8 - shift);
   15f10:	11ca      	asrs	r2, r1, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15f12:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   15f16:	11da      	asrs	r2, r3, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15f18:	ea42 0141 	orr.w	r1, r2, r1, lsl #1
  if (overflow)
   15f1c:	9a01      	ldr	r2, [sp, #4]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15f1e:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
   15f22:	005b      	lsls	r3, r3, #1
   15f24:	b2db      	uxtb	r3, r3
  if (overflow)
   15f26:	09d2      	lsrs	r2, r2, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15f28:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
    pCmac->subkey[SEC_BLOCK_LEN-1] ^= SEC_CMAC_RB;
   15f2c:	bf1c      	itt	ne
   15f2e:	f083 0387 	eorne.w	r3, r3, #135	; 0x87
   15f32:	f884 3023 	strbne.w	r3, [r4, #35]	; 0x23
  if (pCmac->len % SEC_BLOCK_LEN != 0)
   15f36:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15f38:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
  if (pCmac->len % SEC_BLOCK_LEN != 0)
   15f3c:	071b      	lsls	r3, r3, #28
   15f3e:	d073      	beq.n	16028 <SecCmacHciCback+0x21c>
      overflow = pBuf[i+1] >> (8 - shift);
   15f40:	f894 a016 	ldrb.w	sl, [r4, #22]
   15f44:	f894 b015 	ldrb.w	fp, [r4, #21]
   15f48:	7fa1      	ldrb	r1, [r4, #30]
   15f4a:	f894 9017 	ldrb.w	r9, [r4, #23]
   15f4e:	9102      	str	r1, [sp, #8]
   15f50:	ea4f 11ea 	mov.w	r1, sl, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15f54:	ea41 014b 	orr.w	r1, r1, fp, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   15f58:	f894 8018 	ldrb.w	r8, [r4, #24]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15f5c:	7561      	strb	r1, [r4, #21]
      overflow = pBuf[i+1] >> (8 - shift);
   15f5e:	ea4f 11e9 	mov.w	r1, r9, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15f62:	ea41 014a 	orr.w	r1, r1, sl, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   15f66:	f894 e019 	ldrb.w	lr, [r4, #25]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15f6a:	75a1      	strb	r1, [r4, #22]
      overflow = pBuf[i+1] >> (8 - shift);
   15f6c:	ea4f 11e8 	mov.w	r1, r8, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15f70:	ea41 0149 	orr.w	r1, r1, r9, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   15f74:	f894 c01a 	ldrb.w	ip, [r4, #26]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15f78:	75e1      	strb	r1, [r4, #23]
      overflow = pBuf[i+1] >> (8 - shift);
   15f7a:	ea4f 11ee 	mov.w	r1, lr, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15f7e:	ea41 0148 	orr.w	r1, r1, r8, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   15f82:	7ee7      	ldrb	r7, [r4, #27]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15f84:	9a03      	ldr	r2, [sp, #12]
   15f86:	7621      	strb	r1, [r4, #24]
      overflow = pBuf[i+1] >> (8 - shift);
   15f88:	ea4f 11ec 	mov.w	r1, ip, asr #7
   15f8c:	7f26      	ldrb	r6, [r4, #28]
   15f8e:	7fe0      	ldrb	r0, [r4, #31]
   15f90:	9004      	str	r0, [sp, #16]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15f92:	ea41 014e 	orr.w	r1, r1, lr, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   15f96:	ea4f 13eb 	mov.w	r3, fp, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15f9a:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
   15f9e:	7661      	strb	r1, [r4, #25]
      overflow = pBuf[i+1] >> (8 - shift);
   15fa0:	11f9      	asrs	r1, r7, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15fa2:	7523      	strb	r3, [r4, #20]
   15fa4:	ea41 0c4c 	orr.w	ip, r1, ip, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   15fa8:	7f63      	ldrb	r3, [r4, #29]
   15faa:	9301      	str	r3, [sp, #4]
   15fac:	11f1      	asrs	r1, r6, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15fae:	ea41 0747 	orr.w	r7, r1, r7, lsl #1
   15fb2:	76e7      	strb	r7, [r4, #27]
      overflow = pBuf[i+1] >> (8 - shift);
   15fb4:	9f01      	ldr	r7, [sp, #4]
   15fb6:	f894 3020 	ldrb.w	r3, [r4, #32]
   15fba:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   15fbe:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
   15fc2:	9305      	str	r3, [sp, #20]
   15fc4:	11f9      	asrs	r1, r7, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15fc6:	ea41 0646 	orr.w	r6, r1, r6, lsl #1
   15fca:	7726      	strb	r6, [r4, #28]
      overflow = pBuf[i+1] >> (8 - shift);
   15fcc:	9e02      	ldr	r6, [sp, #8]
   15fce:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15fd2:	f884 c01a 	strb.w	ip, [r4, #26]
      overflow = pBuf[i+1] >> (8 - shift);
   15fd6:	11f1      	asrs	r1, r6, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15fd8:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
   15fdc:	7761      	strb	r1, [r4, #29]
      overflow = pBuf[i+1] >> (8 - shift);
   15fde:	9f04      	ldr	r7, [sp, #16]
   15fe0:	11f9      	asrs	r1, r7, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15fe2:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   15fe6:	9e05      	ldr	r6, [sp, #20]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15fe8:	77a1      	strb	r1, [r4, #30]
      overflow = pBuf[i+1] >> (8 - shift);
   15fea:	11f1      	asrs	r1, r6, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   15fec:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
   15ff0:	77e1      	strb	r1, [r4, #31]
   15ff2:	0071      	lsls	r1, r6, #1
   15ff4:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
   15ff8:	0052      	lsls	r2, r2, #1
   15ffa:	ea42 12d0 	orr.w	r2, r2, r0, lsr #7
   15ffe:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
      overflow = pBuf[i+1] >> (8 - shift);
   16002:	11da      	asrs	r2, r3, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   16004:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
    if (overflow)
   16008:	9a03      	ldr	r2, [sp, #12]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1600a:	f884 1020 	strb.w	r1, [r4, #32]
   1600e:	005b      	lsls	r3, r3, #1
   16010:	b2db      	uxtb	r3, r3
    if (overflow)
   16012:	09d2      	lsrs	r2, r2, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   16014:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
      pCmac->subkey[SEC_BLOCK_LEN-1] ^= SEC_CMAC_RB;
   16018:	bf18      	it	ne
   1601a:	f083 0387 	eorne.w	r3, r3, #135	; 0x87
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1601e:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
      pCmac->subkey[SEC_BLOCK_LEN-1] ^= SEC_CMAC_RB;
   16022:	bf18      	it	ne
   16024:	f884 3023 	strbne.w	r3, [r4, #35]	; 0x23
  pCmac->state = SEC_CMAC_STATE_BLOCK;
   16028:	2301      	movs	r3, #1
   1602a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
      secCmacProcessBlock(pBuf);
   1602e:	4628      	mov	r0, r5
}
   16030:	b009      	add	sp, #36	; 0x24
   16032:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      secCmacProcessBlock(pBuf);
   16036:	f7ff bea5 	b.w	15d84 <secCmacProcessBlock>
  secCmacSecCb_t *pCmac = (secCmacSecCb_t *) pBuf->pCb;
   1603a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  pMsg->pCiphertext = pBuf->ciphertext;
   1603c:	606e      	str	r6, [r5, #4]
  pMsg->pPlainText = pCmac->pPlainText;
   1603e:	681a      	ldr	r2, [r3, #0]
   16040:	60aa      	str	r2, [r5, #8]
  WsfMsgSend(pCmac->handlerId, pMsg);
   16042:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
   16046:	4629      	mov	r1, r5
}
   16048:	b009      	add	sp, #36	; 0x24
   1604a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  WsfMsgSend(pCmac->handlerId, pMsg);
   1604e:	f7f9 bc87 	b.w	f960 <WsfMsgSend>
   16052:	bf00      	nop

00016054 <SecCmac>:
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecCmac(const uint8_t *pKey, uint8_t *pPlainText, uint16_t textLen, wsfHandlerId_t handlerId,
               uint16_t param, uint8_t event)
{
   16054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16058:	b084      	sub	sp, #16
   1605a:	4606      	mov	r6, r0
  secQueueBuf_t *pBuf;
  uint16_t bufSize = sizeof(secQueueBuf_t) + sizeof(secCmacSecCb_t);

  if ((pBuf = WsfMsgAlloc(bufSize)) != NULL)
   1605c:	2064      	movs	r0, #100	; 0x64
{
   1605e:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
   16062:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
   16066:	460d      	mov	r5, r1
   16068:	4690      	mov	r8, r2
   1606a:	461f      	mov	r7, r3
  if ((pBuf = WsfMsgAlloc(bufSize)) != NULL)
   1606c:	f7f9 fc6c 	bl	f948 <WsfMsgAlloc>
   16070:	4604      	mov	r4, r0
   16072:	b360      	cbz	r0, 160ce <SecCmac+0x7a>

    pCmacCb->pPlainText = pPlainText;

    pCmacCb->len = textLen;
    pCmacCb->position = 0;
    pCmacCb->handlerId = handlerId;
   16074:	f880 7060 	strb.w	r7, [r0, #96]	; 0x60
    pBuf->msg.hdr.status = secCb.token++;
   16078:	4a16      	ldr	r2, [pc, #88]	; (160d4 <SecCmac+0x80>)
    pCmacCb->len = textLen;
   1607a:	f8a0 805e 	strh.w	r8, [r0, #94]	; 0x5e
    pBuf->type = SEC_TYPE_CMAC;
   1607e:	2701      	movs	r7, #1
    secCmacSecCb_t *pCmacCb = (secCmacSecCb_t *) (pBuf + 1);
   16080:	f100 0338 	add.w	r3, r0, #56	; 0x38
    pBuf->type = SEC_TYPE_CMAC;
   16084:	f880 7034 	strb.w	r7, [r0, #52]	; 0x34
    pBuf->pCb = pCmacCb;
   16088:	6303      	str	r3, [r0, #48]	; 0x30
    pBuf->msg.hdr.status = secCb.token++;
   1608a:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
    pCmacCb->state = SEC_CMAC_STATE_SUBKEY;

    /* Copy key */
    Calc128Cpy(pCmacCb->key, (uint8_t *) pKey);
   1608e:	4631      	mov	r1, r6
    pCmacCb->position = 0;
   16090:	2600      	movs	r6, #0
   16092:	f8a0 605c 	strh.w	r6, [r0, #92]	; 0x5c
    pCmacCb->state = SEC_CMAC_STATE_SUBKEY;
   16096:	f880 6061 	strb.w	r6, [r0, #97]	; 0x61
    pBuf->msg.hdr.status = secCb.token++;
   1609a:	19d8      	adds	r0, r3, r7
   1609c:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
   160a0:	70e3      	strb	r3, [r4, #3]
    Calc128Cpy(pCmacCb->key, (uint8_t *) pKey);
   160a2:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    pBuf->msg.hdr.param = param;
   160a6:	f8a4 9000 	strh.w	r9, [r4]
    pBuf->msg.hdr.event = event;
   160aa:	f884 a002 	strb.w	sl, [r4, #2]
    pCmacCb->pPlainText = pPlainText;
   160ae:	63a5      	str	r5, [r4, #56]	; 0x38
    Calc128Cpy(pCmacCb->key, (uint8_t *) pKey);
   160b0:	f7fd f998 	bl	133e4 <Calc128Cpy>
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   160b4:	6b20      	ldr	r0, [r4, #48]	; 0x30
  SecLeEncryptCmd(pCmac->key, buf, pBuf, pCmac->handlerId);
   160b6:	4622      	mov	r2, r4
   160b8:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   160bc:	4669      	mov	r1, sp
   160be:	3004      	adds	r0, #4
  memset(buf, 0, SEC_BLOCK_LEN);
   160c0:	e9cd 6600 	strd	r6, r6, [sp]
   160c4:	e9cd 6602 	strd	r6, r6, [sp, #8]
  SecLeEncryptCmd(pCmac->key, buf, pBuf, pCmac->handlerId);
   160c8:	f000 f8bc 	bl	16244 <SecLeEncryptCmd>

    /* Start the CMAC process by calculating the subkey */
    secCmacGenSubkey1(pBuf);

    return TRUE;
   160cc:	4638      	mov	r0, r7
  }

  return FALSE;
}
   160ce:	b004      	add	sp, #16
   160d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   160d4:	10005658 	.word	0x10005658

000160d8 <SecCmacInit>:
 *  \return None.
 */
/*************************************************************************************************/
void SecCmacInit()
{
  secCb.hciCbackTbl[SEC_TYPE_CMAC] = SecCmacHciCback;
   160d8:	4b01      	ldr	r3, [pc, #4]	; (160e0 <SecCmacInit+0x8>)
   160da:	4a02      	ldr	r2, [pc, #8]	; (160e4 <SecCmacInit+0xc>)
   160dc:	641a      	str	r2, [r3, #64]	; 0x40
}
   160de:	4770      	bx	lr
   160e0:	10005658 	.word	0x10005658
   160e4:	00015e0d 	.word	0x00015e0d

000160e8 <secHciCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secHciCback(hciEvt_t *pEvent)
{
   160e8:	b530      	push	{r4, r5, lr}
  secQueueBuf_t *pBuf = NULL;
  wsfHandlerId_t handlerId = 0;

  /* Handle random number event. */
  switch (pEvent->hdr.event)
   160ea:	7883      	ldrb	r3, [r0, #2]
{
   160ec:	b083      	sub	sp, #12
  wsfHandlerId_t handlerId = 0;
   160ee:	2200      	movs	r2, #0
  switch (pEvent->hdr.event)
   160f0:	3b1b      	subs	r3, #27
{
   160f2:	4604      	mov	r4, r0
  wsfHandlerId_t handlerId = 0;
   160f4:	f88d 2007 	strb.w	r2, [sp, #7]
  switch (pEvent->hdr.event)
   160f8:	2b0b      	cmp	r3, #11
   160fa:	d819      	bhi.n	16130 <secHciCback+0x48>
   160fc:	e8df f003 	tbb	[pc, r3]
   16100:	18182136 	.word	0x18182136
   16104:	18181818 	.word	0x18181818
   16108:	061a1818 	.word	0x061a1818
  case HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT:
    pBuf = WsfMsgDeq(&secCb.pubKeyQueue, &handlerId);
    break;

  case HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT:
    pBuf = WsfMsgDeq(&secCb.dhKeyQueue, &handlerId);
   1610c:	4821      	ldr	r0, [pc, #132]	; (16194 <secHciCback+0xac>)
   1610e:	f10d 0107 	add.w	r1, sp, #7
   16112:	f7f9 fc3d 	bl	f990 <WsfMsgDeq>
   16116:	4605      	mov	r5, r0

  default:
    break;
  }

  if (pBuf)
   16118:	b155      	cbz	r5, 16130 <secHciCback+0x48>
  {
    WSF_ASSERT(secCb.hciCbackTbl[pBuf->type]);
    secCb.hciCbackTbl[pBuf->type](pBuf, pEvent, handlerId);
   1611a:	f895 1034 	ldrb.w	r1, [r5, #52]	; 0x34
   1611e:	4b1e      	ldr	r3, [pc, #120]	; (16198 <secHciCback+0xb0>)
   16120:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16124:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   16128:	4628      	mov	r0, r5
   1612a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1612c:	4621      	mov	r1, r4
   1612e:	4798      	blx	r3
  }
}
   16130:	b003      	add	sp, #12
   16132:	bd30      	pop	{r4, r5, pc}
    pBuf = WsfMsgDeq(&secCb.pubKeyQueue, &handlerId);
   16134:	4819      	ldr	r0, [pc, #100]	; (1619c <secHciCback+0xb4>)
   16136:	f10d 0107 	add.w	r1, sp, #7
   1613a:	f7f9 fc29 	bl	f990 <WsfMsgDeq>
   1613e:	4605      	mov	r5, r0
    break;
   16140:	e7ea      	b.n	16118 <secHciCback+0x30>
    memcpy(&secCb.rand[HCI_RAND_LEN * secCb.randTop], pEvent->leRandCmdCmpl.randNum, HCI_RAND_LEN);
   16142:	4a15      	ldr	r2, [pc, #84]	; (16198 <secHciCback+0xb0>)
   16144:	f8d0 0005 	ldr.w	r0, [r0, #5]
   16148:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
   1614c:	f8d4 1009 	ldr.w	r1, [r4, #9]
   16150:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   16154:	c303      	stmia	r3!, {r0, r1}
    secCb.randTop = (secCb.randTop >= SEC_HCI_RAND_MULT - 1) ? 0 : secCb.randTop + 1;
   16156:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
   1615a:	2b02      	cmp	r3, #2
   1615c:	bf9a      	itte	ls
   1615e:	3301      	addls	r3, #1
   16160:	b2db      	uxtbls	r3, r3
   16162:	2300      	movhi	r3, #0
   16164:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
}
   16168:	b003      	add	sp, #12
   1616a:	bd30      	pop	{r4, r5, pc}
    pBuf = WsfMsgDeq(&secCb.aesEncQueue, &handlerId);
   1616c:	f10d 0107 	add.w	r1, sp, #7
   16170:	480b      	ldr	r0, [pc, #44]	; (161a0 <secHciCback+0xb8>)
   16172:	f7f9 fc0d 	bl	f990 <WsfMsgDeq>
    if (pBuf->type == SEC_TYPE_CCM || pBuf->type == SEC_TYPE_CMAC || pBuf->type == SEC_TYPE_AES_REV)
   16176:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
   1617a:	1ecb      	subs	r3, r1, #3
   1617c:	2b01      	cmp	r3, #1
    pBuf = WsfMsgDeq(&secCb.aesEncQueue, &handlerId);
   1617e:	4605      	mov	r5, r0
    if (pBuf->type == SEC_TYPE_CCM || pBuf->type == SEC_TYPE_CMAC || pBuf->type == SEC_TYPE_AES_REV)
   16180:	d901      	bls.n	16186 <secHciCback+0x9e>
   16182:	2901      	cmp	r1, #1
   16184:	d1cb      	bne.n	1611e <secHciCback+0x36>
      WStrReverse(pEvent->leEncryptCmdCmpl.data, HCI_ENCRYPT_DATA_LEN);
   16186:	2110      	movs	r1, #16
   16188:	1d60      	adds	r0, r4, #5
   1618a:	f7fd f9b7 	bl	134fc <WStrReverse>
    secCb.hciCbackTbl[pBuf->type](pBuf, pEvent, handlerId);
   1618e:	f895 1034 	ldrb.w	r1, [r5, #52]	; 0x34
   16192:	e7c4      	b.n	1611e <secHciCback+0x36>
   16194:	10005688 	.word	0x10005688
   16198:	10005658 	.word	0x10005658
   1619c:	10005680 	.word	0x10005680
   161a0:	10005678 	.word	0x10005678

000161a4 <SecInit>:
 *  \return None.
 */
/*************************************************************************************************/
void SecInit(void)
{
  WSF_QUEUE_INIT(&secCb.aesEncQueue);
   161a4:	4b06      	ldr	r3, [pc, #24]	; (161c0 <SecInit+0x1c>)
  WSF_QUEUE_INIT(&secCb.dhKeyQueue);

  secCb.token = 0;

  /* Register callback with HCI */
  HciSecRegister(secHciCback);
   161a6:	4807      	ldr	r0, [pc, #28]	; (161c4 <SecInit+0x20>)
  WSF_QUEUE_INIT(&secCb.aesEncQueue);
   161a8:	2200      	movs	r2, #0
   161aa:	e9c3 2208 	strd	r2, r2, [r3, #32]
  WSF_QUEUE_INIT(&secCb.pubKeyQueue);
   161ae:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
  WSF_QUEUE_INIT(&secCb.dhKeyQueue);
   161b2:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
  secCb.token = 0;
   161b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  HciSecRegister(secHciCback);
   161ba:	f7fd bbab 	b.w	13914 <HciSecRegister>
   161be:	bf00      	nop
   161c0:	10005658 	.word	0x10005658
   161c4:	000160e9 	.word	0x000160e9

000161c8 <SecRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecRand(uint8_t *pRand, uint8_t randLen)
{
   161c8:	b570      	push	{r4, r5, r6, lr}
  int8_t count = (randLen + HCI_RAND_LEN - 1) / HCI_RAND_LEN;
  uint8_t index = secCb.randBtm * HCI_RAND_LEN;
   161ca:	4d1d      	ldr	r5, [pc, #116]	; (16240 <SecRand+0x78>)
  int8_t count = (randLen + HCI_RAND_LEN - 1) / HCI_RAND_LEN;
   161cc:	1dce      	adds	r6, r1, #7
  uint8_t index = secCb.randBtm * HCI_RAND_LEN;
   161ce:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
  int8_t count = (randLen + HCI_RAND_LEN - 1) / HCI_RAND_LEN;
   161d2:	10f6      	asrs	r6, r6, #3

  WSF_ASSERT(randLen <= SEC_RAND_DATA_LEN);

  /* Copy from circular buffer of random data. */
  while (randLen--)
   161d4:	b1d1      	cbz	r1, 1620c <SecRand+0x44>
   161d6:	00db      	lsls	r3, r3, #3
   161d8:	b2db      	uxtb	r3, r3
   161da:	4401      	add	r1, r0
   161dc:	e009      	b.n	161f2 <SecRand+0x2a>
   161de:	4291      	cmp	r1, r2
   161e0:	d014      	beq.n	1620c <SecRand+0x44>
  {
    *pRand++ = secCb.rand[index];
   161e2:	782b      	ldrb	r3, [r5, #0]
   161e4:	f800 3c01 	strb.w	r3, [r0, #-1]
    index = (index == SEC_RAND_DATA_LEN - 1) ? 0 : index + 1;
   161e8:	2300      	movs	r3, #0
   161ea:	3301      	adds	r3, #1
  while (randLen--)
   161ec:	4281      	cmp	r1, r0
    index = (index == SEC_RAND_DATA_LEN - 1) ? 0 : index + 1;
   161ee:	b2db      	uxtb	r3, r3
  while (randLen--)
   161f0:	d00c      	beq.n	1620c <SecRand+0x44>
    *pRand++ = secCb.rand[index];
   161f2:	4602      	mov	r2, r0
   161f4:	5cec      	ldrb	r4, [r5, r3]
   161f6:	f802 4b01 	strb.w	r4, [r2], #1
    index = (index == SEC_RAND_DATA_LEN - 1) ? 0 : index + 1;
   161fa:	2b1f      	cmp	r3, #31
    *pRand++ = secCb.rand[index];
   161fc:	f100 0002 	add.w	r0, r0, #2
    index = (index == SEC_RAND_DATA_LEN - 1) ? 0 : index + 1;
   16200:	d0ed      	beq.n	161de <SecRand+0x16>
   16202:	4610      	mov	r0, r2
   16204:	3301      	adds	r3, #1
  while (randLen--)
   16206:	4281      	cmp	r1, r0
    index = (index == SEC_RAND_DATA_LEN - 1) ? 0 : index + 1;
   16208:	b2db      	uxtb	r3, r3
  while (randLen--)
   1620a:	d1f2      	bne.n	161f2 <SecRand+0x2a>
  }

  while (count--)
   1620c:	b2f4      	uxtb	r4, r6
   1620e:	b17e      	cbz	r6, 16230 <SecRand+0x68>
  {
    /* Request more random data. */
    HciLeRandCmd();

    /* Update copy index. */
    secCb.randBtm = (secCb.randBtm >= SEC_HCI_RAND_MULT - 1) ? 0 : secCb.randBtm + 1;
   16210:	2600      	movs	r6, #0
    HciLeRandCmd();
   16212:	f7f6 ffb1 	bl	d178 <HciLeRandCmd>
    secCb.randBtm = (secCb.randBtm >= SEC_HCI_RAND_MULT - 1) ? 0 : secCb.randBtm + 1;
   16216:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
   1621a:	2b02      	cmp	r3, #2
  while (count--)
   1621c:	f104 32ff 	add.w	r2, r4, #4294967295
    secCb.randBtm = (secCb.randBtm >= SEC_HCI_RAND_MULT - 1) ? 0 : secCb.randBtm + 1;
   16220:	f103 0101 	add.w	r1, r3, #1
   16224:	d805      	bhi.n	16232 <SecRand+0x6a>
  while (count--)
   16226:	f012 04ff 	ands.w	r4, r2, #255	; 0xff
    secCb.randBtm = (secCb.randBtm >= SEC_HCI_RAND_MULT - 1) ? 0 : secCb.randBtm + 1;
   1622a:	f885 103a 	strb.w	r1, [r5, #58]	; 0x3a
  while (count--)
   1622e:	d1f0      	bne.n	16212 <SecRand+0x4a>
  }
}
   16230:	bd70      	pop	{r4, r5, r6, pc}
  while (count--)
   16232:	f012 04ff 	ands.w	r4, r2, #255	; 0xff
    secCb.randBtm = (secCb.randBtm >= SEC_HCI_RAND_MULT - 1) ? 0 : secCb.randBtm + 1;
   16236:	f885 603a 	strb.w	r6, [r5, #58]	; 0x3a
  while (count--)
   1623a:	d1ea      	bne.n	16212 <SecRand+0x4a>
}
   1623c:	bd70      	pop	{r4, r5, r6, pc}
   1623e:	bf00      	nop
   16240:	10005658 	.word	0x10005658

00016244 <SecLeEncryptCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecLeEncryptCmd(uint8_t *pKey, uint8_t *pText, void *pBuf, wsfHandlerId_t handlerId)
{
   16244:	b570      	push	{r4, r5, r6, lr}
   16246:	b088      	sub	sp, #32
   16248:	460e      	mov	r6, r1
   1624a:	4615      	mov	r5, r2
  uint8_t revKey[HCI_KEY_LEN];
  uint8_t revText[HCI_ENCRYPT_DATA_LEN];

  WStrReverseCpy(revKey, pKey, HCI_KEY_LEN);
   1624c:	4601      	mov	r1, r0
   1624e:	2210      	movs	r2, #16
   16250:	4668      	mov	r0, sp
{
   16252:	461c      	mov	r4, r3
  WStrReverseCpy(revKey, pKey, HCI_KEY_LEN);
   16254:	f7fd f940 	bl	134d8 <WStrReverseCpy>
  WStrReverseCpy(revText, pText, HCI_ENCRYPT_DATA_LEN);
   16258:	4631      	mov	r1, r6
   1625a:	a804      	add	r0, sp, #16
   1625c:	2210      	movs	r2, #16
   1625e:	f7fd f93b 	bl	134d8 <WStrReverseCpy>

  WsfMsgEnq(&secCb.aesEncQueue, handlerId, pBuf);
   16262:	462a      	mov	r2, r5
   16264:	4621      	mov	r1, r4
   16266:	4804      	ldr	r0, [pc, #16]	; (16278 <SecLeEncryptCmd+0x34>)
   16268:	f7f9 fb8c 	bl	f984 <WsfMsgEnq>
  HciLeEncryptCmd(revKey, revText);
   1626c:	a904      	add	r1, sp, #16
   1626e:	4668      	mov	r0, sp
   16270:	f7f6 febc 	bl	cfec <HciLeEncryptCmd>
}
   16274:	b008      	add	sp, #32
   16276:	bd70      	pop	{r4, r5, r6, pc}
   16278:	10005678 	.word	0x10005678

0001627c <attcSendSimpleReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attcSendSimpleReq(attcCcb_t *pCcb)
{
   1627c:	b570      	push	{r4, r5, r6, lr}

  /* clear stored packet pointer */
  pCcb->outReq.pPkt = NULL;

  /* start request timer (except for write command) */
  if (pCcb->outReq.hdr.event != ATTC_MSG_API_WRITE_CMD)
   1627e:	7c83      	ldrb	r3, [r0, #18]
  attcPktParam_t  *pPkt = pCcb->outReq.pPkt;
   16280:	6945      	ldr	r5, [r0, #20]
  pCcb->outReq.pPkt = NULL;
   16282:	2200      	movs	r2, #0
  if (pCcb->outReq.hdr.event != ATTC_MSG_API_WRITE_CMD)
   16284:	2b0a      	cmp	r3, #10
{
   16286:	4604      	mov	r4, r0
  pCcb->outReq.pPkt = NULL;
   16288:	6142      	str	r2, [r0, #20]
  if (pCcb->outReq.hdr.event != ATTC_MSG_API_WRITE_CMD)
   1628a:	d008      	beq.n	1629e <attcSendSimpleReq+0x22>
  {
    pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
    WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   1628c:	4b08      	ldr	r3, [pc, #32]	; (162b0 <attcSendSimpleReq+0x34>)
    pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
   1628e:	2210      	movs	r2, #16
    WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   16290:	681b      	ldr	r3, [r3, #0]
    pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
   16292:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
    WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   16296:	7999      	ldrb	r1, [r3, #6]
   16298:	3024      	adds	r0, #36	; 0x24
   1629a:	f7f9 fdaf 	bl	fdfc <WsfTimerStartSec>
  }

  /* send packet to L2CAP */
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   1629e:	6823      	ldr	r3, [r4, #0]
   162a0:	882a      	ldrh	r2, [r5, #0]
   162a2:	8b19      	ldrh	r1, [r3, #24]
   162a4:	2004      	movs	r0, #4
   162a6:	462b      	mov	r3, r5
}
   162a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   162ac:	f7fd ba44 	b.w	13738 <L2cDataReq>
   162b0:	10002b0c 	.word	0x10002b0c

000162b4 <attcDataCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attcDataCback(uint16_t handle, uint16_t len, uint8_t *pPacket)
{
   162b4:	b538      	push	{r3, r4, r5, lr}
   162b6:	460d      	mov	r5, r1
   162b8:	4614      	mov	r4, r2
/*************************************************************************************************/
attcCcb_t *attcCcbByHandle(uint16_t handle)
{
  dmConnId_t  connId;

  if ((connId = DmConnIdByHandle(handle)) != DM_CONN_ID_NONE)
   162ba:	f003 f9a5 	bl	19608 <DmConnIdByHandle>
   162be:	b190      	cbz	r0, 162e6 <attcDataCback+0x32>
  opcode = *(pPacket + L2C_PAYLOAD_START);
   162c0:	7a21      	ldrb	r1, [r4, #8]
  {
    return &attcCb.ccb[connId - 1];
   162c2:	4b0f      	ldr	r3, [pc, #60]	; (16300 <attcDataCback+0x4c>)
   162c4:	3801      	subs	r0, #1
   162c6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  if (opcode <= ATT_PDU_EXEC_WRITE_RSP)
   162ca:	2919      	cmp	r1, #25
    return &attcCb.ccb[connId - 1];
   162cc:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
  if (opcode <= ATT_PDU_EXEC_WRITE_RSP)
   162d0:	d90a      	bls.n	162e8 <attcDataCback+0x34>
  else if ((opcode == ATT_PDU_VALUE_NTF) || (opcode == ATT_PDU_VALUE_IND))
   162d2:	291b      	cmp	r1, #27
   162d4:	d001      	beq.n	162da <attcDataCback+0x26>
   162d6:	291d      	cmp	r1, #29
   162d8:	d10c      	bne.n	162f4 <attcDataCback+0x40>
    attcProcInd(pCcb, len, pPacket);
   162da:	4622      	mov	r2, r4
   162dc:	4629      	mov	r1, r5
}
   162de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    attcProcInd(pCcb, len, pPacket);
   162e2:	f000 bcb9 	b.w	16c58 <attcProcInd>
}
   162e6:	bd38      	pop	{r3, r4, r5, pc}
    attcProcRsp(pCcb, len, pPacket);
   162e8:	4622      	mov	r2, r4
   162ea:	4629      	mov	r1, r5
}
   162ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    attcProcRsp(pCcb, len, pPacket);
   162f0:	f000 bc54 	b.w	16b9c <attcProcRsp>
}
   162f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ATT_TRACE_WARN1("attc unknown opcode 0x%02x", opcode);
   162f8:	4802      	ldr	r0, [pc, #8]	; (16304 <attcDataCback+0x50>)
   162fa:	f7f9 bea5 	b.w	10048 <WsfTrace>
   162fe:	bf00      	nop
   16300:	100056a8 	.word	0x100056a8
   16304:	00020108 	.word	0x00020108

00016308 <attcCtrlCback>:
{
   16308:	b530      	push	{r4, r5, lr}
  if ((pCcb = attcCcbByConnId((dmConnId_t) pMsg->param)) != NULL)
   1630a:	7804      	ldrb	r4, [r0, #0]
{
   1630c:	b083      	sub	sp, #12
   1630e:	4605      	mov	r5, r0
  if (DmConnInUse(connId))
   16310:	4620      	mov	r0, r4
   16312:	f003 f99b 	bl	1964c <DmConnInUse>
   16316:	b1a0      	cbz	r0, 16342 <attcCtrlCback+0x3a>
    AttcIndConfirm((dmConnId_t) pMsg->param);
   16318:	7828      	ldrb	r0, [r5, #0]
   1631a:	f000 fd35 	bl	16d88 <AttcIndConfirm>
    return &attcCb.ccb[connId - 1];
   1631e:	3c01      	subs	r4, #1
    if (pCcb->pendWriteCmdHandle[i] != ATT_HANDLE_NONE)
   16320:	490b      	ldr	r1, [pc, #44]	; (16350 <attcCtrlCback+0x48>)
    attcWriteCmdCallback((dmConnId_t) pMsg->param, pCcb, ATT_SUCCESS);
   16322:	7828      	ldrb	r0, [r5, #0]
    if (pCcb->pendWriteCmdHandle[i] != ATT_HANDLE_NONE)
   16324:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   16328:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
   1632c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   1632e:	b132      	cbz	r2, 1633e <attcCtrlCback+0x36>
/*************************************************************************************************/
void attcExecCallback(dmConnId_t connId, uint8_t event, uint16_t handle, uint8_t status)
{
  if (event != ATT_METHOD_MTU)
  {
    attExecCallback(connId, event, handle, status, 0);
   16330:	2500      	movs	r5, #0
   16332:	9500      	str	r5, [sp, #0]
   16334:	462b      	mov	r3, r5
   16336:	210a      	movs	r1, #10
   16338:	f002 fb32 	bl	189a0 <attExecCallback>
      pCcb->pendWriteCmdHandle[i] = ATT_HANDLE_NONE;
   1633c:	86e5      	strh	r5, [r4, #54]	; 0x36
}
   1633e:	b003      	add	sp, #12
   16340:	bd30      	pop	{r4, r5, pc}
    ATT_TRACE_WARN1("attc ccb not in use: %d", connId);
   16342:	4804      	ldr	r0, [pc, #16]	; (16354 <attcCtrlCback+0x4c>)
   16344:	4621      	mov	r1, r4
}
   16346:	b003      	add	sp, #12
   16348:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    ATT_TRACE_WARN1("attc ccb not in use: %d", connId);
   1634c:	f7f9 be7c 	b.w	10048 <WsfTrace>
   16350:	100056a8 	.word	0x100056a8
   16354:	00020124 	.word	0x00020124

00016358 <attcSendWriteCmd>:
{
   16358:	b530      	push	{r4, r5, lr}
  if (pCcb->outReq.hdr.event != ATTC_MSG_API_WRITE_CMD)
   1635a:	7c83      	ldrb	r3, [r0, #18]
  attcPktParam_t  *pPkt = pCcb->outReq.pPkt;
   1635c:	6945      	ldr	r5, [r0, #20]
  pCcb->outReq.pPkt = NULL;
   1635e:	2200      	movs	r2, #0
  if (pCcb->outReq.hdr.event != ATTC_MSG_API_WRITE_CMD)
   16360:	2b0a      	cmp	r3, #10
{
   16362:	b083      	sub	sp, #12
   16364:	4604      	mov	r4, r0
  pCcb->outReq.pPkt = NULL;
   16366:	6142      	str	r2, [r0, #20]
  if (pCcb->outReq.hdr.event != ATTC_MSG_API_WRITE_CMD)
   16368:	d008      	beq.n	1637c <attcSendWriteCmd+0x24>
    WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   1636a:	4b13      	ldr	r3, [pc, #76]	; (163b8 <attcSendWriteCmd+0x60>)
    pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
   1636c:	2210      	movs	r2, #16
    WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   1636e:	681b      	ldr	r3, [r3, #0]
    pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
   16370:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
    WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   16374:	7999      	ldrb	r1, [r3, #6]
   16376:	3024      	adds	r0, #36	; 0x24
   16378:	f7f9 fd40 	bl	fdfc <WsfTimerStartSec>
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   1637c:	6823      	ldr	r3, [r4, #0]
   1637e:	882a      	ldrh	r2, [r5, #0]
   16380:	8b19      	ldrh	r1, [r3, #24]
   16382:	2004      	movs	r0, #4
   16384:	462b      	mov	r3, r5
   16386:	f7fd f9d7 	bl	13738 <L2cDataReq>
  if (!(pCcb->pMainCcb->control & ATT_CCB_STATUS_FLOW_DISABLED))
   1638a:	6822      	ldr	r2, [r4, #0]
   1638c:	7f53      	ldrb	r3, [r2, #29]
   1638e:	f013 0302 	ands.w	r3, r3, #2
   16392:	d007      	beq.n	163a4 <attcSendWriteCmd+0x4c>
    if (pCcb->pendWriteCmdHandle[i] == ATT_HANDLE_NONE)
   16394:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   16396:	b90b      	cbnz	r3, 1639c <attcSendWriteCmd+0x44>
      pCcb->pendWriteCmdHandle[i] = pCcb->outReq.handle;
   16398:	8b23      	ldrh	r3, [r4, #24]
   1639a:	86e3      	strh	r3, [r4, #54]	; 0x36
  pCcb->outReq.hdr.event = ATTC_MSG_API_NONE;
   1639c:	2300      	movs	r3, #0
   1639e:	74a3      	strb	r3, [r4, #18]
}
   163a0:	b003      	add	sp, #12
   163a2:	bd30      	pop	{r4, r5, pc}
    attExecCallback(connId, event, handle, status, 0);
   163a4:	7f10      	ldrb	r0, [r2, #28]
   163a6:	8b22      	ldrh	r2, [r4, #24]
   163a8:	9300      	str	r3, [sp, #0]
   163aa:	210a      	movs	r1, #10
   163ac:	f002 faf8 	bl	189a0 <attExecCallback>
  pCcb->outReq.hdr.event = ATTC_MSG_API_NONE;
   163b0:	2300      	movs	r3, #0
   163b2:	74a3      	strb	r3, [r4, #18]
}
   163b4:	b003      	add	sp, #12
   163b6:	bd30      	pop	{r4, r5, pc}
   163b8:	10002b0c 	.word	0x10002b0c

000163bc <attcSendMtuReq>:
{
   163bc:	b570      	push	{r4, r5, r6, lr}
  if (pCcb->pMainCcb->control & ATT_CCB_STATUS_MTU_SENT)
   163be:	6801      	ldr	r1, [r0, #0]
   163c0:	7f4b      	ldrb	r3, [r1, #29]
   163c2:	f013 0201 	ands.w	r2, r3, #1
{
   163c6:	4604      	mov	r4, r0
  if (pCcb->pMainCcb->control & ATT_CCB_STATUS_MTU_SENT)
   163c8:	d00c      	beq.n	163e4 <attcSendMtuReq+0x28>
  if (pMsg->pPkt != NULL)
   163ca:	6940      	ldr	r0, [r0, #20]
   163cc:	b118      	cbz	r0, 163d6 <attcSendMtuReq+0x1a>
    WsfMsgFree(pMsg->pPkt);
   163ce:	f7f9 fac3 	bl	f958 <WsfMsgFree>
    pMsg->pPkt = NULL;
   163d2:	2300      	movs	r3, #0
   163d4:	6163      	str	r3, [r4, #20]
    pCcb->outReq.hdr.event = ATTC_MSG_API_NONE;
   163d6:	2300      	movs	r3, #0
   163d8:	74a3      	strb	r3, [r4, #18]
}
   163da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ATT_TRACE_WARN0("MTU req discarded");
   163de:	480f      	ldr	r0, [pc, #60]	; (1641c <attcSendMtuReq+0x60>)
   163e0:	f7f9 be32 	b.w	10048 <WsfTrace>
    pCcb->pMainCcb->control |= ATT_CCB_STATUS_MTU_SENT;
   163e4:	f043 0301 	orr.w	r3, r3, #1
   163e8:	774b      	strb	r3, [r1, #29]
  if (pCcb->outReq.hdr.event != ATTC_MSG_API_WRITE_CMD)
   163ea:	7c83      	ldrb	r3, [r0, #18]
  attcPktParam_t  *pPkt = pCcb->outReq.pPkt;
   163ec:	6945      	ldr	r5, [r0, #20]
  pCcb->outReq.pPkt = NULL;
   163ee:	6142      	str	r2, [r0, #20]
  if (pCcb->outReq.hdr.event != ATTC_MSG_API_WRITE_CMD)
   163f0:	2b0a      	cmp	r3, #10
   163f2:	d107      	bne.n	16404 <attcSendMtuReq+0x48>
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   163f4:	882a      	ldrh	r2, [r5, #0]
   163f6:	8b09      	ldrh	r1, [r1, #24]
   163f8:	462b      	mov	r3, r5
   163fa:	2004      	movs	r0, #4
}
   163fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   16400:	f7fd b99a 	b.w	13738 <L2cDataReq>
    WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   16404:	4b06      	ldr	r3, [pc, #24]	; (16420 <attcSendMtuReq+0x64>)
    pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
   16406:	2210      	movs	r2, #16
    WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   16408:	681b      	ldr	r3, [r3, #0]
    pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
   1640a:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
    WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   1640e:	7999      	ldrb	r1, [r3, #6]
   16410:	3024      	adds	r0, #36	; 0x24
   16412:	f7f9 fcf3 	bl	fdfc <WsfTimerStartSec>
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   16416:	6821      	ldr	r1, [r4, #0]
   16418:	e7ec      	b.n	163f4 <attcSendMtuReq+0x38>
   1641a:	bf00      	nop
   1641c:	0002013c 	.word	0x0002013c
   16420:	10002b0c 	.word	0x10002b0c

00016424 <attcConnCback>:
{
   16424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   16428:	788b      	ldrb	r3, [r1, #2]
   1642a:	2b27      	cmp	r3, #39	; 0x27
{
   1642c:	b085      	sub	sp, #20
   1642e:	4606      	mov	r6, r0
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   16430:	d03e      	beq.n	164b0 <attcConnCback+0x8c>
  else if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
   16432:	2b28      	cmp	r3, #40	; 0x28
   16434:	d002      	beq.n	1643c <attcConnCback+0x18>
}
   16436:	b005      	add	sp, #20
   16438:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (pDmEvt->connClose.hdr.status == HCI_SUCCESS)
   1643c:	78cb      	ldrb	r3, [r1, #3]
   1643e:	2b00      	cmp	r3, #0
   16440:	d04d      	beq.n	164de <attcConnCback+0xba>
      status = pDmEvt->connClose.hdr.status + ATT_HCI_ERR_BASE;
   16442:	3320      	adds	r3, #32
   16444:	b2db      	uxtb	r3, r3
    pClient = &attcCb.ccb[pCcb->connId - 1];
   16446:	7f35      	ldrb	r5, [r6, #28]
    if (pClient->outReq.hdr.event != ATTC_MSG_API_NONE)
   16448:	4c51      	ldr	r4, [pc, #324]	; (16590 <attcConnCback+0x16c>)
    pClient = &attcCb.ccb[pCcb->connId - 1];
   1644a:	3d01      	subs	r5, #1
   1644c:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
    if (pClient->outReq.hdr.event != ATTC_MSG_API_NONE)
   16450:	eb04 09c2 	add.w	r9, r4, r2, lsl #3
   16454:	ea4f 08c2 	mov.w	r8, r2, lsl #3
   16458:	f899 2012 	ldrb.w	r2, [r9, #18]
   1645c:	00ef      	lsls	r7, r5, #3
   1645e:	2a00      	cmp	r2, #0
   16460:	d155      	bne.n	1650e <attcConnCback+0xea>
    if (pClient->onDeck.hdr.event != ATTC_MSG_API_NONE)
   16462:	eba7 0905 	sub.w	r9, r7, r5
   16466:	eb04 09c9 	add.w	r9, r4, r9, lsl #3
   1646a:	f899 1006 	ldrb.w	r1, [r9, #6]
   1646e:	2900      	cmp	r1, #0
   16470:	d139      	bne.n	164e6 <attcConnCback+0xc2>
    pClient->flowDisabled = FALSE;
   16472:	1b7a      	subs	r2, r7, r5
    if (attcCb.pSign != NULL)
   16474:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    pClient->flowDisabled = FALSE;
   16478:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
   1647c:	2000      	movs	r0, #0
   1647e:	8690      	strh	r0, [r2, #52]	; 0x34
    if (attcCb.pSign != NULL)
   16480:	b131      	cbz	r1, 16490 <attcConnCback+0x6c>
      (*attcCb.pSign->closeCback)(pClient, status);
   16482:	684a      	ldr	r2, [r1, #4]
   16484:	9303      	str	r3, [sp, #12]
   16486:	4619      	mov	r1, r3
   16488:	eb04 0008 	add.w	r0, r4, r8
   1648c:	4790      	blx	r2
   1648e:	9b03      	ldr	r3, [sp, #12]
    attcWriteCmdCallback(pCcb->connId, pClient, status);
   16490:	7f30      	ldrb	r0, [r6, #28]
    if (pCcb->pendWriteCmdHandle[i] != ATT_HANDLE_NONE)
   16492:	1b7d      	subs	r5, r7, r5
   16494:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   16498:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   1649a:	2a00      	cmp	r2, #0
   1649c:	d0cb      	beq.n	16436 <attcConnCback+0x12>
    attExecCallback(connId, event, handle, status, 0);
   1649e:	2500      	movs	r5, #0
   164a0:	9500      	str	r5, [sp, #0]
   164a2:	210a      	movs	r1, #10
   164a4:	f002 fa7c 	bl	189a0 <attExecCallback>
      pCcb->pendWriteCmdHandle[i] = ATT_HANDLE_NONE;
   164a8:	86e5      	strh	r5, [r4, #54]	; 0x36
}
   164aa:	b005      	add	sp, #20
   164ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (DmConnRole(pCcb->connId) == DM_ROLE_MASTER)
   164b0:	7f00      	ldrb	r0, [r0, #28]
   164b2:	f003 f95d 	bl	19770 <DmConnRole>
   164b6:	2800      	cmp	r0, #0
   164b8:	d1bd      	bne.n	16436 <attcConnCback+0x12>
      localMtu = WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN));
   164ba:	4c36      	ldr	r4, [pc, #216]	; (16594 <attcConnCback+0x170>)
   164bc:	6823      	ldr	r3, [r4, #0]
   164be:	889d      	ldrh	r5, [r3, #4]
   164c0:	f7f7 fffe 	bl	e4c0 <HciGetMaxRxAclLen>
   164c4:	3804      	subs	r0, #4
   164c6:	4285      	cmp	r5, r0
   164c8:	da5d      	bge.n	16586 <attcConnCback+0x162>
   164ca:	6823      	ldr	r3, [r4, #0]
   164cc:	8899      	ldrh	r1, [r3, #4]
      if (localMtu != ATT_DEFAULT_MTU)
   164ce:	2917      	cmp	r1, #23
   164d0:	d0b1      	beq.n	16436 <attcConnCback+0x12>
        AttcMtuReq(pCcb->connId, localMtu);
   164d2:	7f30      	ldrb	r0, [r6, #28]
}
   164d4:	b005      	add	sp, #20
   164d6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        AttcMtuReq(pCcb->connId, localMtu);
   164da:	f000 bc05 	b.w	16ce8 <AttcMtuReq>
      status = pDmEvt->connClose.reason + ATT_HCI_ERR_BASE;
   164de:	7a0b      	ldrb	r3, [r1, #8]
   164e0:	3320      	adds	r3, #32
   164e2:	b2db      	uxtb	r3, r3
   164e4:	e7af      	b.n	16446 <attcConnCback+0x22>
  if (pMsg->pPkt != NULL)
   164e6:	f8d9 0008 	ldr.w	r0, [r9, #8]
   164ea:	b140      	cbz	r0, 164fe <attcConnCback+0xda>
   164ec:	9303      	str	r3, [sp, #12]
    WsfMsgFree(pMsg->pPkt);
   164ee:	f7f9 fa33 	bl	f958 <WsfMsgFree>
    pMsg->pPkt = NULL;
   164f2:	2200      	movs	r2, #0
 */
/*************************************************************************************************/
void attcReqClear(attcCcb_t *pCcb, attcApiMsg_t *pMsg, uint8_t status)
{
  attcFreePkt(pMsg);
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   164f4:	f899 1006 	ldrb.w	r1, [r9, #6]
   164f8:	9b03      	ldr	r3, [sp, #12]
    pMsg->pPkt = NULL;
   164fa:	f8c9 2008 	str.w	r2, [r9, #8]
  if (event != ATT_METHOD_MTU)
   164fe:	2901      	cmp	r1, #1
   16500:	d130      	bne.n	16564 <attcConnCback+0x140>
  pMsg->hdr.event = ATTC_MSG_API_NONE;
   16502:	1b7a      	subs	r2, r7, r5
   16504:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
   16508:	2100      	movs	r1, #0
   1650a:	7191      	strb	r1, [r2, #6]
}
   1650c:	e7b1      	b.n	16472 <attcConnCback+0x4e>
      WsfTimerStop(&pClient->outReqTimer);
   1650e:	f108 0024 	add.w	r0, r8, #36	; 0x24
   16512:	4420      	add	r0, r4
   16514:	9303      	str	r3, [sp, #12]
   16516:	f7f9 fcf7 	bl	ff08 <WsfTimerStop>
  if (pMsg->pPkt != NULL)
   1651a:	f8d9 0014 	ldr.w	r0, [r9, #20]
   1651e:	9b03      	ldr	r3, [sp, #12]
   16520:	b128      	cbz	r0, 1652e <attcConnCback+0x10a>
    WsfMsgFree(pMsg->pPkt);
   16522:	f7f9 fa19 	bl	f958 <WsfMsgFree>
    pMsg->pPkt = NULL;
   16526:	2200      	movs	r2, #0
   16528:	9b03      	ldr	r3, [sp, #12]
   1652a:	f8c9 2014 	str.w	r2, [r9, #20]
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   1652e:	1b7a      	subs	r2, r7, r5
   16530:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
   16534:	00d2      	lsls	r2, r2, #3
   16536:	7c81      	ldrb	r1, [r0, #18]
  if (event != ATT_METHOD_MTU)
   16538:	2901      	cmp	r1, #1
   1653a:	d105      	bne.n	16548 <attcConnCback+0x124>
  pMsg->hdr.event = ATTC_MSG_API_NONE;
   1653c:	1b7a      	subs	r2, r7, r5
   1653e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
   16542:	2100      	movs	r1, #0
   16544:	7491      	strb	r1, [r2, #18]
}
   16546:	e78c      	b.n	16462 <attcConnCback+0x3e>
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   16548:	f854 c002 	ldr.w	ip, [r4, r2]
    attExecCallback(connId, event, handle, status, 0);
   1654c:	8b02      	ldrh	r2, [r0, #24]
   1654e:	f89c 001c 	ldrb.w	r0, [ip, #28]
   16552:	9303      	str	r3, [sp, #12]
   16554:	f04f 0c00 	mov.w	ip, #0
   16558:	f8cd c000 	str.w	ip, [sp]
   1655c:	f002 fa20 	bl	189a0 <attExecCallback>
   16560:	9b03      	ldr	r3, [sp, #12]
   16562:	e7eb      	b.n	1653c <attcConnCback+0x118>
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   16564:	1b7a      	subs	r2, r7, r5
   16566:	eb04 0cc2 	add.w	ip, r4, r2, lsl #3
   1656a:	f854 0032 	ldr.w	r0, [r4, r2, lsl #3]
    attExecCallback(connId, event, handle, status, 0);
   1656e:	f8bc 200c 	ldrh.w	r2, [ip, #12]
   16572:	7f00      	ldrb	r0, [r0, #28]
   16574:	9303      	str	r3, [sp, #12]
   16576:	f04f 0c00 	mov.w	ip, #0
   1657a:	f8cd c000 	str.w	ip, [sp]
   1657e:	f002 fa0f 	bl	189a0 <attExecCallback>
   16582:	9b03      	ldr	r3, [sp, #12]
   16584:	e7bd      	b.n	16502 <attcConnCback+0xde>
      localMtu = WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN));
   16586:	f7f7 ff9b 	bl	e4c0 <HciGetMaxRxAclLen>
   1658a:	3804      	subs	r0, #4
   1658c:	b281      	uxth	r1, r0
   1658e:	e79e      	b.n	164ce <attcConnCback+0xaa>
   16590:	100056a8 	.word	0x100056a8
   16594:	10002b0c 	.word	0x10002b0c

00016598 <attcSendPrepWriteReq>:
{
   16598:	b570      	push	{r4, r5, r6, lr}
  if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
   1659a:	7cc3      	ldrb	r3, [r0, #19]
   1659c:	2b01      	cmp	r3, #1
{
   1659e:	b082      	sub	sp, #8
   165a0:	4604      	mov	r4, r0
  if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
   165a2:	d020      	beq.n	165e6 <attcSendPrepWriteReq+0x4e>
    pCcb->outReq.pPkt = NULL;
   165a4:	2300      	movs	r3, #0
    dataLen = pCcb->outReqParams.w.len;
   165a6:	8b85      	ldrh	r5, [r0, #28]
    pPkt = pCcb->outReq.pPkt;
   165a8:	6946      	ldr	r6, [r0, #20]
    pCcb->outReq.pPkt = NULL;
   165aa:	6143      	str	r3, [r0, #20]
  UINT16_TO_BSTREAM(p, pCcb->outReqParams.w.offset);
   165ac:	8be3      	ldrh	r3, [r4, #30]
   165ae:	72f3      	strb	r3, [r6, #11]
   165b0:	8be3      	ldrh	r3, [r4, #30]
  WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   165b2:	4a29      	ldr	r2, [pc, #164]	; (16658 <attcSendPrepWriteReq+0xc0>)
  UINT16_TO_BSTREAM(p, pCcb->outReqParams.w.offset);
   165b4:	0a1b      	lsrs	r3, r3, #8
   165b6:	7333      	strb	r3, [r6, #12]
  pCcb->outReqParams.w.offset += dataLen;
   165b8:	8be3      	ldrh	r3, [r4, #30]
  WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   165ba:	6812      	ldr	r2, [r2, #0]
  pCcb->outReqParams.w.offset += dataLen;
   165bc:	442b      	add	r3, r5
   165be:	83e3      	strh	r3, [r4, #30]
  pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
   165c0:	2310      	movs	r3, #16
   165c2:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   165c6:	7991      	ldrb	r1, [r2, #6]
   165c8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   165cc:	f7f9 fc16 	bl	fdfc <WsfTimerStartSec>
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, dataLen + ATT_PREP_WRITE_REQ_LEN, (uint8_t *) pPkt);
   165d0:	6823      	ldr	r3, [r4, #0]
   165d2:	1d6a      	adds	r2, r5, #5
   165d4:	8b19      	ldrh	r1, [r3, #24]
   165d6:	b292      	uxth	r2, r2
   165d8:	4633      	mov	r3, r6
   165da:	2004      	movs	r0, #4
}
   165dc:	b002      	add	sp, #8
   165de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, dataLen + ATT_PREP_WRITE_REQ_LEN, (uint8_t *) pPkt);
   165e2:	f7fd b8a9 	b.w	13738 <L2cDataReq>
    if (pCcb->outReqParams.w.len < (pCcb->pMainCcb->mtu - ATT_PREP_WRITE_REQ_LEN))
   165e6:	6803      	ldr	r3, [r0, #0]
   165e8:	8b85      	ldrh	r5, [r0, #28]
   165ea:	8b5b      	ldrh	r3, [r3, #26]
   165ec:	3b05      	subs	r3, #5
   165ee:	429d      	cmp	r5, r3
      dataLen = pCcb->pMainCcb->mtu - ATT_PREP_WRITE_REQ_LEN;
   165f0:	bfa8      	it	ge
   165f2:	b29d      	uxthge	r5, r3
    if ((pPkt = attMsgAlloc(dataLen + ATT_PREP_WRITE_REQ_LEN + L2C_PAYLOAD_START)) != NULL)
   165f4:	f105 000d 	add.w	r0, r5, #13
   165f8:	b280      	uxth	r0, r0
   165fa:	f002 f9ed 	bl	189d8 <attMsgAlloc>
   165fe:	4606      	mov	r6, r0
   16600:	b1a8      	cbz	r0, 1662e <attcSendPrepWriteReq+0x96>
      memcpy(pPkt, pCcb->outReq.pPkt, ATT_PREP_WRITE_REQ_LEN + L2C_PAYLOAD_START);
   16602:	6963      	ldr	r3, [r4, #20]
   16604:	6819      	ldr	r1, [r3, #0]
   16606:	685a      	ldr	r2, [r3, #4]
   16608:	6898      	ldr	r0, [r3, #8]
   1660a:	60b0      	str	r0, [r6, #8]
   1660c:	6072      	str	r2, [r6, #4]
   1660e:	6031      	str	r1, [r6, #0]
   16610:	7b1b      	ldrb	r3, [r3, #12]
   16612:	7333      	strb	r3, [r6, #12]
      memcpy(((uint8_t *) pPkt + L2C_PAYLOAD_START + ATT_PREP_WRITE_REQ_LEN),
   16614:	462a      	mov	r2, r5
   16616:	6a21      	ldr	r1, [r4, #32]
   16618:	f106 000d 	add.w	r0, r6, #13
   1661c:	f7f5 fd70 	bl	c100 <memcpy>
      pCcb->outReqParams.w.pValue += dataLen;
   16620:	6a22      	ldr	r2, [r4, #32]
      pCcb->outReqParams.w.len -= dataLen;
   16622:	8ba3      	ldrh	r3, [r4, #28]
      pCcb->outReqParams.w.pValue += dataLen;
   16624:	442a      	add	r2, r5
      pCcb->outReqParams.w.len -= dataLen;
   16626:	1b5b      	subs	r3, r3, r5
      pCcb->outReqParams.w.pValue += dataLen;
   16628:	6222      	str	r2, [r4, #32]
      pCcb->outReqParams.w.len -= dataLen;
   1662a:	83a3      	strh	r3, [r4, #28]
   1662c:	e7be      	b.n	165ac <attcSendPrepWriteReq+0x14>
  if (pMsg->pPkt != NULL)
   1662e:	6960      	ldr	r0, [r4, #20]
   16630:	b110      	cbz	r0, 16638 <attcSendPrepWriteReq+0xa0>
    WsfMsgFree(pMsg->pPkt);
   16632:	f7f9 f991 	bl	f958 <WsfMsgFree>
    pMsg->pPkt = NULL;
   16636:	6166      	str	r6, [r4, #20]
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   16638:	7ca1      	ldrb	r1, [r4, #18]
  if (event != ATT_METHOD_MTU)
   1663a:	2901      	cmp	r1, #1
   1663c:	d103      	bne.n	16646 <attcSendPrepWriteReq+0xae>
  pMsg->hdr.event = ATTC_MSG_API_NONE;
   1663e:	2300      	movs	r3, #0
   16640:	74a3      	strb	r3, [r4, #18]
}
   16642:	b002      	add	sp, #8
   16644:	bd70      	pop	{r4, r5, r6, pc}
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   16646:	6822      	ldr	r2, [r4, #0]
    attExecCallback(connId, event, handle, status, 0);
   16648:	2300      	movs	r3, #0
   1664a:	7f10      	ldrb	r0, [r2, #28]
   1664c:	8b22      	ldrh	r2, [r4, #24]
   1664e:	9300      	str	r3, [sp, #0]
   16650:	2370      	movs	r3, #112	; 0x70
   16652:	f002 f9a5 	bl	189a0 <attExecCallback>
   16656:	e7f2      	b.n	1663e <attcSendPrepWriteReq+0xa6>
   16658:	10002b0c 	.word	0x10002b0c

0001665c <attcSendContinuingReq>:
{
   1665c:	b530      	push	{r4, r5, lr}
  if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
   1665e:	7cc3      	ldrb	r3, [r0, #19]
   16660:	2b01      	cmp	r3, #1
{
   16662:	b083      	sub	sp, #12
   16664:	4604      	mov	r4, r0
  if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
   16666:	d028      	beq.n	166ba <attcSendContinuingReq+0x5e>
    pCcb->outReq.pPkt = NULL;
   16668:	2300      	movs	r3, #0
    pPkt = pCcb->outReq.pPkt;
   1666a:	6945      	ldr	r5, [r0, #20]
    pCcb->outReq.pPkt = NULL;
   1666c:	6143      	str	r3, [r0, #20]
  if (pCcb->outReq.hdr.event == ATTC_MSG_API_READ_LONG)
   1666e:	7ca3      	ldrb	r3, [r4, #18]
   16670:	2b06      	cmp	r3, #6
    UINT16_TO_BSTREAM(p, pCcb->outReqParams.o.offset);
   16672:	8be3      	ldrh	r3, [r4, #30]
  if (pCcb->outReq.hdr.event == ATTC_MSG_API_READ_LONG)
   16674:	d01c      	beq.n	166b0 <attcSendContinuingReq+0x54>
    UINT16_TO_BSTREAM(p, pCcb->outReqParams.h.startHandle);
   16676:	726b      	strb	r3, [r5, #9]
   16678:	8be3      	ldrh	r3, [r4, #30]
   1667a:	0a1b      	lsrs	r3, r3, #8
   1667c:	72ab      	strb	r3, [r5, #10]
    UINT16_TO_BSTREAM(p, pCcb->outReqParams.h.endHandle);
   1667e:	8c23      	ldrh	r3, [r4, #32]
   16680:	72eb      	strb	r3, [r5, #11]
   16682:	8c23      	ldrh	r3, [r4, #32]
   16684:	0a1b      	lsrs	r3, r3, #8
   16686:	732b      	strb	r3, [r5, #12]
  WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   16688:	4b1d      	ldr	r3, [pc, #116]	; (16700 <attcSendContinuingReq+0xa4>)
  pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
   1668a:	2210      	movs	r2, #16
  WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   1668c:	681b      	ldr	r3, [r3, #0]
  pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
   1668e:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
  WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   16692:	7999      	ldrb	r1, [r3, #6]
   16694:	f104 0024 	add.w	r0, r4, #36	; 0x24
   16698:	f7f9 fbb0 	bl	fdfc <WsfTimerStartSec>
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   1669c:	6823      	ldr	r3, [r4, #0]
   1669e:	882a      	ldrh	r2, [r5, #0]
   166a0:	8b19      	ldrh	r1, [r3, #24]
   166a2:	2004      	movs	r0, #4
   166a4:	462b      	mov	r3, r5
}
   166a6:	b003      	add	sp, #12
   166a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   166ac:	f7fd b844 	b.w	13738 <L2cDataReq>
    UINT16_TO_BSTREAM(p, pCcb->outReqParams.o.offset);
   166b0:	72eb      	strb	r3, [r5, #11]
   166b2:	8be3      	ldrh	r3, [r4, #30]
   166b4:	0a1b      	lsrs	r3, r3, #8
   166b6:	732b      	strb	r3, [r5, #12]
   166b8:	e7e6      	b.n	16688 <attcSendContinuingReq+0x2c>
    if ((pPkt = attMsgAlloc(pCcb->outReq.pPkt->len + L2C_PAYLOAD_START)) != NULL)
   166ba:	6943      	ldr	r3, [r0, #20]
   166bc:	8818      	ldrh	r0, [r3, #0]
   166be:	3008      	adds	r0, #8
   166c0:	b280      	uxth	r0, r0
   166c2:	f002 f989 	bl	189d8 <attMsgAlloc>
   166c6:	4605      	mov	r5, r0
   166c8:	b128      	cbz	r0, 166d6 <attcSendContinuingReq+0x7a>
      memcpy(pPkt, pCcb->outReq.pPkt, pCcb->outReq.pPkt->len + L2C_PAYLOAD_START);
   166ca:	6961      	ldr	r1, [r4, #20]
   166cc:	880a      	ldrh	r2, [r1, #0]
   166ce:	3208      	adds	r2, #8
   166d0:	f7f5 fd16 	bl	c100 <memcpy>
   166d4:	e7cb      	b.n	1666e <attcSendContinuingReq+0x12>
  if (pMsg->pPkt != NULL)
   166d6:	6960      	ldr	r0, [r4, #20]
   166d8:	b110      	cbz	r0, 166e0 <attcSendContinuingReq+0x84>
    WsfMsgFree(pMsg->pPkt);
   166da:	f7f9 f93d 	bl	f958 <WsfMsgFree>
    pMsg->pPkt = NULL;
   166de:	6165      	str	r5, [r4, #20]
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   166e0:	7ca1      	ldrb	r1, [r4, #18]
  if (event != ATT_METHOD_MTU)
   166e2:	2901      	cmp	r1, #1
   166e4:	d007      	beq.n	166f6 <attcSendContinuingReq+0x9a>
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   166e6:	6822      	ldr	r2, [r4, #0]
    attExecCallback(connId, event, handle, status, 0);
   166e8:	2300      	movs	r3, #0
   166ea:	7f10      	ldrb	r0, [r2, #28]
   166ec:	8b22      	ldrh	r2, [r4, #24]
   166ee:	9300      	str	r3, [sp, #0]
   166f0:	2370      	movs	r3, #112	; 0x70
   166f2:	f002 f955 	bl	189a0 <attExecCallback>
  pMsg->hdr.event = ATTC_MSG_API_NONE;
   166f6:	2300      	movs	r3, #0
   166f8:	74a3      	strb	r3, [r4, #18]
}
   166fa:	b003      	add	sp, #12
   166fc:	bd30      	pop	{r4, r5, pc}
   166fe:	bf00      	nop
   16700:	10002b0c 	.word	0x10002b0c

00016704 <attcMsgCback>:
{
   16704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((pCcb = attcCcbByConnId((dmConnId_t) pMsg->hdr.param)) == NULL)
   16708:	7804      	ldrb	r4, [r0, #0]
{
   1670a:	b082      	sub	sp, #8
   1670c:	4606      	mov	r6, r0
  if (DmConnInUse(connId))
   1670e:	4620      	mov	r0, r4
   16710:	f002 ff9c 	bl	1964c <DmConnInUse>
   16714:	2800      	cmp	r0, #0
   16716:	d068      	beq.n	167ea <attcMsgCback+0xe6>
  if (pMsg->hdr.event <= ATTC_MSG_API_EXEC_WRITE)
   16718:	78b1      	ldrb	r1, [r6, #2]
    return &attcCb.ccb[connId - 1];
   1671a:	4f71      	ldr	r7, [pc, #452]	; (168e0 <attcMsgCback+0x1dc>)
   1671c:	3c01      	subs	r4, #1
   1671e:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
  if (pMsg->hdr.event <= ATTC_MSG_API_EXEC_WRITE)
   16722:	290c      	cmp	r1, #12
   16724:	ea4f 08c4 	mov.w	r8, r4, lsl #3
   16728:	ea4f 03c0 	mov.w	r3, r0, lsl #3
    return &attcCb.ccb[connId - 1];
   1672c:	eb07 05c0 	add.w	r5, r7, r0, lsl #3
  if (pMsg->hdr.event <= ATTC_MSG_API_EXEC_WRITE)
   16730:	d825      	bhi.n	1677e <attcMsgCback+0x7a>
    if ((pCcb->onDeck.hdr.event != ATTC_MSG_API_NONE) ||
   16732:	79aa      	ldrb	r2, [r5, #6]
   16734:	bb72      	cbnz	r2, 16794 <attcMsgCback+0x90>
        (pCcb->outReq.hdr.event > ATTC_MSG_API_MTU)   ||
   16736:	7caa      	ldrb	r2, [r5, #18]
    if ((pCcb->onDeck.hdr.event != ATTC_MSG_API_NONE) ||
   16738:	2a01      	cmp	r2, #1
   1673a:	d82b      	bhi.n	16794 <attcMsgCback+0x90>
        (pCcb->outReq.hdr.event > ATTC_MSG_API_MTU)   ||
   1673c:	290a      	cmp	r1, #10
   1673e:	d06f      	beq.n	16820 <attcMsgCback+0x11c>
    if (pCcb->outReq.hdr.event == ATTC_MSG_API_MTU || pCcb->flowDisabled)
   16740:	2a01      	cmp	r2, #1
   16742:	d077      	beq.n	16834 <attcMsgCback+0x130>
   16744:	eba8 0304 	sub.w	r3, r8, r4
   16748:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   1674c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
   16750:	2a00      	cmp	r2, #0
   16752:	d16f      	bne.n	16834 <attcMsgCback+0x130>
  (*attcSendReqTbl[pCcb->outReq.hdr.event])(pCcb);
   16754:	4a63      	ldr	r2, [pc, #396]	; (168e4 <attcMsgCback+0x1e0>)
   16756:	f852 7021 	ldr.w	r7, [r2, r1, lsl #2]
  pCcb->outReq = *pMsg;
   1675a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   1675e:	f103 0410 	add.w	r4, r3, #16
   16762:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pCcb->outReqParams = *(pMsg->pPkt);
   16766:	6872      	ldr	r2, [r6, #4]
   16768:	e892 0003 	ldmia.w	r2, {r0, r1}
   1676c:	331c      	adds	r3, #28
   1676e:	e883 0003 	stmia.w	r3, {r0, r1}
  (*attcSendReqTbl[pCcb->outReq.hdr.event])(pCcb);
   16772:	4628      	mov	r0, r5
   16774:	463b      	mov	r3, r7
}
   16776:	b002      	add	sp, #8
   16778:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  (*attcSendReqTbl[pCcb->outReq.hdr.event])(pCcb);
   1677c:	4718      	bx	r3
  else if (pMsg->hdr.event >= ATTC_MSG_API_SIGNED_WRITE_CMD &&
   1677e:	f1a1 020d 	sub.w	r2, r1, #13
   16782:	2a01      	cmp	r2, #1
   16784:	d941      	bls.n	1680a <attcMsgCback+0x106>
  else if (pMsg->hdr.event == ATTC_MSG_API_CANCEL)
   16786:	290f      	cmp	r1, #15
   16788:	d012      	beq.n	167b0 <attcMsgCback+0xac>
  else if (pMsg->hdr.event == ATTC_MSG_REQ_TIMEOUT)
   1678a:	2910      	cmp	r1, #16
   1678c:	d06a      	beq.n	16864 <attcMsgCback+0x160>
}
   1678e:	b002      	add	sp, #8
   16790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pMsg->pPkt != NULL)
   16794:	6870      	ldr	r0, [r6, #4]
   16796:	b120      	cbz	r0, 167a2 <attcMsgCback+0x9e>
    WsfMsgFree(pMsg->pPkt);
   16798:	f7f9 f8de 	bl	f958 <WsfMsgFree>
    pMsg->pPkt = NULL;
   1679c:	2300      	movs	r3, #0
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   1679e:	78b1      	ldrb	r1, [r6, #2]
    pMsg->pPkt = NULL;
   167a0:	6073      	str	r3, [r6, #4]
  if (event != ATT_METHOD_MTU)
   167a2:	2901      	cmp	r1, #1
   167a4:	d152      	bne.n	1684c <attcMsgCback+0x148>
  pMsg->hdr.event = ATTC_MSG_API_NONE;
   167a6:	2300      	movs	r3, #0
   167a8:	70b3      	strb	r3, [r6, #2]
}
   167aa:	b002      	add	sp, #8
   167ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pCcb->outReq.hdr.event != ATTC_MSG_API_NONE &&
   167b0:	7caa      	ldrb	r2, [r5, #18]
   167b2:	2a01      	cmp	r2, #1
   167b4:	d878      	bhi.n	168a8 <attcMsgCback+0x1a4>
    else if (pCcb->onDeck.hdr.event != ATTC_MSG_API_NONE)
   167b6:	79ab      	ldrb	r3, [r5, #6]
   167b8:	2b00      	cmp	r3, #0
   167ba:	d0e8      	beq.n	1678e <attcMsgCback+0x8a>
  if (pMsg->pPkt != NULL)
   167bc:	68a8      	ldr	r0, [r5, #8]
   167be:	b118      	cbz	r0, 167c8 <attcMsgCback+0xc4>
    WsfMsgFree(pMsg->pPkt);
   167c0:	f7f9 f8ca 	bl	f958 <WsfMsgFree>
    pMsg->pPkt = NULL;
   167c4:	2300      	movs	r3, #0
   167c6:	60ab      	str	r3, [r5, #8]
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   167c8:	79a9      	ldrb	r1, [r5, #6]
  if (event != ATT_METHOD_MTU)
   167ca:	2901      	cmp	r1, #1
   167cc:	d00a      	beq.n	167e4 <attcMsgCback+0xe0>
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   167ce:	eba8 0404 	sub.w	r4, r8, r4
    attExecCallback(connId, event, handle, status, 0);
   167d2:	2300      	movs	r3, #0
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   167d4:	f857 2034 	ldr.w	r2, [r7, r4, lsl #3]
    attExecCallback(connId, event, handle, status, 0);
   167d8:	7f10      	ldrb	r0, [r2, #28]
   167da:	9300      	str	r3, [sp, #0]
   167dc:	89aa      	ldrh	r2, [r5, #12]
   167de:	2374      	movs	r3, #116	; 0x74
   167e0:	f002 f8de 	bl	189a0 <attExecCallback>
  pMsg->hdr.event = ATTC_MSG_API_NONE;
   167e4:	2300      	movs	r3, #0
   167e6:	71ab      	strb	r3, [r5, #6]
}
   167e8:	e7d1      	b.n	1678e <attcMsgCback+0x8a>
    ATT_TRACE_WARN1("attc ccb not in use: %d", connId);
   167ea:	4605      	mov	r5, r0
   167ec:	4621      	mov	r1, r4
   167ee:	483e      	ldr	r0, [pc, #248]	; (168e8 <attcMsgCback+0x1e4>)
   167f0:	f7f9 fc2a 	bl	10048 <WsfTrace>
    if (pMsg->hdr.event >= ATTC_MSG_API_MTU &&
   167f4:	78b3      	ldrb	r3, [r6, #2]
   167f6:	3b01      	subs	r3, #1
   167f8:	2b0c      	cmp	r3, #12
   167fa:	d8c8      	bhi.n	1678e <attcMsgCback+0x8a>
  if (pMsg->pPkt != NULL)
   167fc:	6870      	ldr	r0, [r6, #4]
   167fe:	2800      	cmp	r0, #0
   16800:	d0c5      	beq.n	1678e <attcMsgCback+0x8a>
    WsfMsgFree(pMsg->pPkt);
   16802:	f7f9 f8a9 	bl	f958 <WsfMsgFree>
    pMsg->pPkt = NULL;
   16806:	6075      	str	r5, [r6, #4]
   16808:	e7c1      	b.n	1678e <attcMsgCback+0x8a>
    if (attcCb.pSign != NULL)
   1680a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
   1680e:	2b00      	cmp	r3, #0
   16810:	d0bd      	beq.n	1678e <attcMsgCback+0x8a>
      (*attcCb.pSign->msgCback)(pCcb, pMsg);
   16812:	681b      	ldr	r3, [r3, #0]
   16814:	4631      	mov	r1, r6
   16816:	4628      	mov	r0, r5
}
   16818:	b002      	add	sp, #8
   1681a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      (*attcCb.pSign->msgCback)(pCcb, pMsg);
   1681e:	4718      	bx	r3
    if (pCcb->pendWriteCmdHandle[i] != ATT_HANDLE_NONE)
   16820:	8ee8      	ldrh	r0, [r5, #54]	; 0x36
   16822:	2800      	cmp	r0, #0
   16824:	d08c      	beq.n	16740 <attcMsgCback+0x3c>
  if (pMsg->pPkt != NULL)
   16826:	6870      	ldr	r0, [r6, #4]
   16828:	2800      	cmp	r0, #0
   1682a:	d1b5      	bne.n	16798 <attcMsgCback+0x94>
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   1682c:	58fb      	ldr	r3, [r7, r3]
      if (pCcb->pendWriteCmdHandle[i] == pMsg->handle)
   1682e:	8932      	ldrh	r2, [r6, #8]
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   16830:	7f18      	ldrb	r0, [r3, #28]
  if (event != ATT_METHOD_MTU)
   16832:	e011      	b.n	16858 <attcMsgCback+0x154>
      pCcb->onDeck = *pMsg;
   16834:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   16838:	eba8 0404 	sub.w	r4, r8, r4
   1683c:	eb07 07c4 	add.w	r7, r7, r4, lsl #3
   16840:	3704      	adds	r7, #4
   16842:	e887 0007 	stmia.w	r7, {r0, r1, r2}
}
   16846:	b002      	add	sp, #8
   16848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   1684c:	eba8 0404 	sub.w	r4, r8, r4
   16850:	8932      	ldrh	r2, [r6, #8]
   16852:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
   16856:	7f18      	ldrb	r0, [r3, #28]
    attExecCallback(connId, event, handle, status, 0);
   16858:	2300      	movs	r3, #0
   1685a:	9300      	str	r3, [sp, #0]
   1685c:	2372      	movs	r3, #114	; 0x72
   1685e:	f002 f89f 	bl	189a0 <attExecCallback>
   16862:	e7a0      	b.n	167a6 <attcMsgCback+0xa2>
    if (pCcb->outReq.hdr.event != ATTC_MSG_API_NONE)
   16864:	7cab      	ldrb	r3, [r5, #18]
   16866:	2b00      	cmp	r3, #0
   16868:	d091      	beq.n	1678e <attcMsgCback+0x8a>
  if (pMsg->pPkt != NULL)
   1686a:	6968      	ldr	r0, [r5, #20]
   1686c:	b118      	cbz	r0, 16876 <attcMsgCback+0x172>
    WsfMsgFree(pMsg->pPkt);
   1686e:	f7f9 f873 	bl	f958 <WsfMsgFree>
    pMsg->pPkt = NULL;
   16872:	2300      	movs	r3, #0
   16874:	616b      	str	r3, [r5, #20]
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   16876:	7ca9      	ldrb	r1, [r5, #18]
  if (event != ATT_METHOD_MTU)
   16878:	2901      	cmp	r1, #1
   1687a:	d00a      	beq.n	16892 <attcMsgCback+0x18e>
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   1687c:	eba8 0304 	sub.w	r3, r8, r4
   16880:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
    attExecCallback(connId, event, handle, status, 0);
   16884:	7f18      	ldrb	r0, [r3, #28]
   16886:	2300      	movs	r3, #0
   16888:	9300      	str	r3, [sp, #0]
   1688a:	8b2a      	ldrh	r2, [r5, #24]
   1688c:	2371      	movs	r3, #113	; 0x71
   1688e:	f002 f887 	bl	189a0 <attExecCallback>
  pMsg->hdr.event = ATTC_MSG_API_NONE;
   16892:	2300      	movs	r3, #0
      pCcb->pMainCcb->control |= ATT_CCB_STATUS_TX_TIMEOUT;
   16894:	eba8 0404 	sub.w	r4, r8, r4
  pMsg->hdr.event = ATTC_MSG_API_NONE;
   16898:	74ab      	strb	r3, [r5, #18]
      pCcb->pMainCcb->control |= ATT_CCB_STATUS_TX_TIMEOUT;
   1689a:	f857 2034 	ldr.w	r2, [r7, r4, lsl #3]
   1689e:	7f53      	ldrb	r3, [r2, #29]
   168a0:	f043 0304 	orr.w	r3, r3, #4
   168a4:	7753      	strb	r3, [r2, #29]
   168a6:	e772      	b.n	1678e <attcMsgCback+0x8a>
      WsfTimerStop(&pCcb->outReqTimer);
   168a8:	f103 0024 	add.w	r0, r3, #36	; 0x24
   168ac:	4438      	add	r0, r7
   168ae:	f7f9 fb2b 	bl	ff08 <WsfTimerStop>
  if (pMsg->pPkt != NULL)
   168b2:	6968      	ldr	r0, [r5, #20]
   168b4:	b118      	cbz	r0, 168be <attcMsgCback+0x1ba>
    WsfMsgFree(pMsg->pPkt);
   168b6:	f7f9 f84f 	bl	f958 <WsfMsgFree>
    pMsg->pPkt = NULL;
   168ba:	2300      	movs	r3, #0
   168bc:	616b      	str	r3, [r5, #20]
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   168be:	7ca9      	ldrb	r1, [r5, #18]
  if (event != ATT_METHOD_MTU)
   168c0:	2901      	cmp	r1, #1
   168c2:	d00a      	beq.n	168da <attcMsgCback+0x1d6>
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   168c4:	eba8 0404 	sub.w	r4, r8, r4
    attExecCallback(connId, event, handle, status, 0);
   168c8:	2300      	movs	r3, #0
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   168ca:	f857 2034 	ldr.w	r2, [r7, r4, lsl #3]
    attExecCallback(connId, event, handle, status, 0);
   168ce:	7f10      	ldrb	r0, [r2, #28]
   168d0:	9300      	str	r3, [sp, #0]
   168d2:	8b2a      	ldrh	r2, [r5, #24]
   168d4:	2374      	movs	r3, #116	; 0x74
   168d6:	f002 f863 	bl	189a0 <attExecCallback>
  pMsg->hdr.event = ATTC_MSG_API_NONE;
   168da:	2300      	movs	r3, #0
   168dc:	74ab      	strb	r3, [r5, #18]
}
   168de:	e756      	b.n	1678e <attcMsgCback+0x8a>
   168e0:	100056a8 	.word	0x100056a8
   168e4:	00020160 	.word	0x00020160
   168e8:	00020124 	.word	0x00020124

000168ec <attcSendReq>:
  (*attcSendReqTbl[pCcb->outReq.hdr.event])(pCcb);
   168ec:	4b02      	ldr	r3, [pc, #8]	; (168f8 <attcSendReq+0xc>)
   168ee:	7c82      	ldrb	r2, [r0, #18]
   168f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   168f4:	4718      	bx	r3
   168f6:	bf00      	nop
   168f8:	00020160 	.word	0x00020160

000168fc <attcSetupReq>:
{
   168fc:	b510      	push	{r4, lr}
   168fe:	4603      	mov	r3, r0
  pCcb->outReq = *pMsg;
   16900:	f100 0e10 	add.w	lr, r0, #16
{
   16904:	468c      	mov	ip, r1
  pCcb->outReq = *pMsg;
   16906:	c907      	ldmia	r1, {r0, r1, r2}
   16908:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  pCcb->outReqParams = *(pMsg->pPkt);
   1690c:	f8dc 1004 	ldr.w	r1, [ip, #4]
  (*attcSendReqTbl[pCcb->outReq.hdr.event])(pCcb);
   16910:	4c06      	ldr	r4, [pc, #24]	; (1692c <attcSetupReq+0x30>)
  pCcb->outReqParams = *(pMsg->pPkt);
   16912:	c903      	ldmia	r1, {r0, r1}
   16914:	f103 021c 	add.w	r2, r3, #28
   16918:	e882 0003 	stmia.w	r2, {r0, r1}
  (*attcSendReqTbl[pCcb->outReq.hdr.event])(pCcb);
   1691c:	4618      	mov	r0, r3
   1691e:	7c9b      	ldrb	r3, [r3, #18]
   16920:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
}
   16924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (*attcSendReqTbl[pCcb->outReq.hdr.event])(pCcb);
   16928:	4718      	bx	r3
   1692a:	bf00      	nop
   1692c:	00020160 	.word	0x00020160

00016930 <attcCcbByConnId>:
{
   16930:	b538      	push	{r3, r4, r5, lr}
   16932:	4604      	mov	r4, r0
  if (DmConnInUse(connId))
   16934:	f002 fe8a 	bl	1964c <DmConnInUse>
   16938:	b130      	cbz	r0, 16948 <attcCcbByConnId+0x18>
    return &attcCb.ccb[connId - 1];
   1693a:	4d07      	ldr	r5, [pc, #28]	; (16958 <attcCcbByConnId+0x28>)
   1693c:	1e60      	subs	r0, r4, #1
   1693e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   16942:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
}
   16946:	bd38      	pop	{r3, r4, r5, pc}
   16948:	4605      	mov	r5, r0
    ATT_TRACE_WARN1("attc ccb not in use: %d", connId);
   1694a:	4621      	mov	r1, r4
   1694c:	4803      	ldr	r0, [pc, #12]	; (1695c <attcCcbByConnId+0x2c>)
   1694e:	f7f9 fb7b 	bl	10048 <WsfTrace>
    return NULL;
   16952:	4628      	mov	r0, r5
}
   16954:	bd38      	pop	{r3, r4, r5, pc}
   16956:	bf00      	nop
   16958:	100056a8 	.word	0x100056a8
   1695c:	00020124 	.word	0x00020124

00016960 <attcCcbByHandle>:
{
   16960:	b508      	push	{r3, lr}
  if ((connId = DmConnIdByHandle(handle)) != DM_CONN_ID_NONE)
   16962:	f002 fe51 	bl	19608 <DmConnIdByHandle>
   16966:	b128      	cbz	r0, 16974 <attcCcbByHandle+0x14>
    return &attcCb.ccb[connId - 1];
   16968:	4b03      	ldr	r3, [pc, #12]	; (16978 <attcCcbByHandle+0x18>)
   1696a:	3801      	subs	r0, #1
   1696c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   16970:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
}
   16974:	bd08      	pop	{r3, pc}
   16976:	bf00      	nop
   16978:	100056a8 	.word	0x100056a8

0001697c <attcFreePkt>:
{
   1697c:	b510      	push	{r4, lr}
   1697e:	4604      	mov	r4, r0
  if (pMsg->pPkt != NULL)
   16980:	6840      	ldr	r0, [r0, #4]
   16982:	b118      	cbz	r0, 1698c <attcFreePkt+0x10>
    WsfMsgFree(pMsg->pPkt);
   16984:	f7f8 ffe8 	bl	f958 <WsfMsgFree>
    pMsg->pPkt = NULL;
   16988:	2300      	movs	r3, #0
   1698a:	6063      	str	r3, [r4, #4]
}
   1698c:	bd10      	pop	{r4, pc}
   1698e:	bf00      	nop

00016990 <attcExecCallback>:
  if (event != ATT_METHOD_MTU)
   16990:	2901      	cmp	r1, #1
   16992:	d100      	bne.n	16996 <attcExecCallback+0x6>
   16994:	4770      	bx	lr
{
   16996:	b510      	push	{r4, lr}
   16998:	b082      	sub	sp, #8
    attExecCallback(connId, event, handle, status, 0);
   1699a:	2400      	movs	r4, #0
   1699c:	9400      	str	r4, [sp, #0]
   1699e:	f001 ffff 	bl	189a0 <attExecCallback>
}
   169a2:	b002      	add	sp, #8
   169a4:	bd10      	pop	{r4, pc}
   169a6:	bf00      	nop

000169a8 <AttcInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttcInit(void)
{
   169a8:	b410      	push	{r4}
  uint8_t     i;
  attcCcb_t   *pCcb;

  /* Initialize control block */
  attcCb.pSign = NULL;
   169aa:	4b12      	ldr	r3, [pc, #72]	; (169f4 <AttcInit+0x4c>)
  {
    /* set pointer to main CCB */
    pCcb->pMainCcb = &attCb.ccb[i];

    /* initialize timer */
    pCcb->outReqTimer.handlerId = attCb.handlerId;
   169ac:	4a12      	ldr	r2, [pc, #72]	; (169f8 <AttcInit+0x50>)
    pCcb->pMainCcb = &attCb.ccb[i];
   169ae:	601a      	str	r2, [r3, #0]
  attcCb.pSign = NULL;
   169b0:	2400      	movs	r4, #0
   169b2:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
    pCcb->pMainCcb = &attCb.ccb[i];
   169b6:	f102 0424 	add.w	r4, r2, #36	; 0x24
    pCcb->outReqTimer.handlerId = attCb.handlerId;
   169ba:	f892 107c 	ldrb.w	r1, [r2, #124]	; 0x7c
    pCcb->pMainCcb = &attCb.ccb[i];
   169be:	639c      	str	r4, [r3, #56]	; 0x38
  attcCb.autoCnf = TRUE;
   169c0:	2001      	movs	r0, #1
    pCcb->outReqTimer.msg.param = i + 1;  /* param stores the conn id */
   169c2:	2402      	movs	r4, #2
  attcCb.autoCnf = TRUE;
   169c4:	f883 00ac 	strb.w	r0, [r3, #172]	; 0xac
    pCcb->outReqTimer.handlerId = attCb.handlerId;
   169c8:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
    pCcb->outReqTimer.msg.param = i + 1;  /* param stores the conn id */
   169cc:	8598      	strh	r0, [r3, #44]	; 0x2c
    pCcb->outReqTimer.handlerId = attCb.handlerId;
   169ce:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
  }

  /* set up callback interface */
  attCb.pClient = &attcFcnIf;
   169d2:	480a      	ldr	r0, [pc, #40]	; (169fc <AttcInit+0x54>)
    pCcb->outReqTimer.msg.param = i + 1;  /* param stores the conn id */
   169d4:	f8a3 4064 	strh.w	r4, [r3, #100]	; 0x64
   169d8:	f04f 0c03 	mov.w	ip, #3
    pCcb->pMainCcb = &attCb.ccb[i];
   169dc:	f102 0448 	add.w	r4, r2, #72	; 0x48
    pCcb->outReqTimer.handlerId = attCb.handlerId;
   169e0:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
    pCcb->pMainCcb = &attCb.ccb[i];
   169e4:	671c      	str	r4, [r3, #112]	; 0x70
    pCcb->outReqTimer.msg.param = i + 1;  /* param stores the conn id */
   169e6:	f8a3 c09c 	strh.w	ip, [r3, #156]	; 0x9c
}
   169ea:	f85d 4b04 	ldr.w	r4, [sp], #4
  attCb.pClient = &attcFcnIf;
   169ee:	66d0      	str	r0, [r2, #108]	; 0x6c
}
   169f0:	4770      	bx	lr
   169f2:	bf00      	nop
   169f4:	100056a8 	.word	0x100056a8
   169f8:	100057d4 	.word	0x100057d4
   169fc:	00020150 	.word	0x00020150

00016a00 <attcProcErrRsp>:
  uint8_t *p;

  p =  pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;

  /* set callback event from stored method */
  pEvt->hdr.event = pCcb->outReq.hdr.event;
   16a00:	7c81      	ldrb	r1, [r0, #18]
   16a02:	7099      	strb	r1, [r3, #2]

  /* ignore request opcode in the error response */
  p++;

  /* if request was a read or write with a specific handle */
  if (pEvt->hdr.event == ATTC_READ_RSP || pEvt->hdr.event == ATTC_READ_LONG_RSP ||
   16a04:	1f48      	subs	r0, r1, #5
   16a06:	2801      	cmp	r0, #1
   16a08:	d90a      	bls.n	16a20 <attcProcErrRsp+0x20>
   16a0a:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
   16a0e:	2909      	cmp	r1, #9
   16a10:	d006      	beq.n	16a20 <attcProcErrRsp+0x20>
    p += 2;
  }
  else
  {
    /* set handle from packet */
    BSTREAM_TO_UINT16(pEvt->handle, p);
   16a12:	7ad0      	ldrb	r0, [r2, #11]
   16a14:	7a91      	ldrb	r1, [r2, #10]
   16a16:	eb01 2100 	add.w	r1, r1, r0, lsl #8
   16a1a:	320c      	adds	r2, #12
   16a1c:	8159      	strh	r1, [r3, #10]
   16a1e:	e000      	b.n	16a22 <attcProcErrRsp+0x22>
    p += 2;
   16a20:	320c      	adds	r2, #12
  }

  /* set status from error code in packet, but verify it's not 'success' */
  BSTREAM_TO_UINT8(pEvt->hdr.status, p);
   16a22:	7812      	ldrb	r2, [r2, #0]
  if (pEvt->hdr.status == ATT_SUCCESS)
   16a24:	b902      	cbnz	r2, 16a28 <attcProcErrRsp+0x28>
  {
    pEvt->hdr.status = ATT_ERR_UNDEFINED;
   16a26:	2275      	movs	r2, #117	; 0x75
   16a28:	70da      	strb	r2, [r3, #3]
  }

  /* no parameters so clear length */
  pEvt->valueLen = 0;
   16a2a:	2200      	movs	r2, #0
   16a2c:	811a      	strh	r2, [r3, #8]
}
   16a2e:	4770      	bx	lr

00016a30 <attcProcFindOrReadRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcProcFindOrReadRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
   16a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  p = pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;
  pEnd = pPacket + L2C_PAYLOAD_START + len;

  /* parameter length depends on packet type */
  if (pCcb->outReq.hdr.event == ATTC_MSG_API_FIND_INFO)
   16a34:	7c87      	ldrb	r7, [r0, #18]
  pEnd = pPacket + L2C_PAYLOAD_START + len;
   16a36:	3108      	adds	r1, #8
  if (pCcb->outReq.hdr.event == ATTC_MSG_API_FIND_INFO)
   16a38:	2f02      	cmp	r7, #2
  pEnd = pPacket + L2C_PAYLOAD_START + len;
   16a3a:	eb02 0c01 	add.w	ip, r2, r1
  if (pCcb->outReq.hdr.event == ATTC_MSG_API_FIND_INFO)
   16a3e:	d065      	beq.n	16b0c <attcProcFindOrReadRsp+0xdc>
    else
    {
      paramLen = ATT_128_UUID_LEN;
    }
  }
  else if (pCcb->outReq.hdr.event == ATTC_MSG_API_READ_BY_TYPE)
   16a40:	2f04      	cmp	r7, #4
   16a42:	d03d      	beq.n	16ac0 <attcProcFindOrReadRsp+0x90>
    paramLen = *p++ - sizeof(uint16_t);
  }
  else
  {
    /* length in read by group type response is two handles plus parameter length */
    paramLen = *p++ - (2 * sizeof(uint16_t));
   16a44:	f892 e009 	ldrb.w	lr, [r2, #9]
  }

  /* get and verify all handles */
  nextHandle = pCcb->outReqParams.h.startHandle;
   16a48:	8bc4      	ldrh	r4, [r0, #30]
    paramLen = *p++ - (2 * sizeof(uint16_t));
   16a4a:	f1ae 0e04 	sub.w	lr, lr, #4
   16a4e:	2f08      	cmp	r7, #8
   16a50:	f102 010a 	add.w	r1, r2, #10
   16a54:	fa5f fe8e 	uxtb.w	lr, lr
  while (p < pEnd)
   16a58:	d16b      	bne.n	16b32 <attcProcFindOrReadRsp+0x102>
   16a5a:	f10e 0e04 	add.w	lr, lr, #4
        break;
      }
    }

    /* set next expected handle, with special case for max handle */
    if (handle == ATT_HANDLE_MAX)
   16a5e:	f64f 76ff 	movw	r6, #65535	; 0xffff
   16a62:	e024      	b.n	16aae <attcProcFindOrReadRsp+0x7e>
    BSTREAM_TO_UINT16(handle, p);
   16a64:	784d      	ldrb	r5, [r1, #1]
   16a66:	780a      	ldrb	r2, [r1, #0]
   16a68:	eb02 2205 	add.w	r2, r2, r5, lsl #8
   16a6c:	b292      	uxth	r2, r2
    if (handle == 0 || nextHandle == 0 || handle < nextHandle ||
   16a6e:	2a00      	cmp	r2, #0
   16a70:	d048      	beq.n	16b04 <attcProcFindOrReadRsp+0xd4>
   16a72:	2c00      	cmp	r4, #0
   16a74:	d046      	beq.n	16b04 <attcProcFindOrReadRsp+0xd4>
   16a76:	4294      	cmp	r4, r2
   16a78:	d844      	bhi.n	16b04 <attcProcFindOrReadRsp+0xd4>
        handle > pCcb->outReqParams.h.endHandle)
   16a7a:	8c07      	ldrh	r7, [r0, #32]
    if (handle == 0 || nextHandle == 0 || handle < nextHandle ||
   16a7c:	4297      	cmp	r7, r2
   16a7e:	d341      	bcc.n	16b04 <attcProcFindOrReadRsp+0xd4>
      BSTREAM_TO_UINT16(handle, p);
   16a80:	f891 8003 	ldrb.w	r8, [r1, #3]
   16a84:	788d      	ldrb	r5, [r1, #2]
   16a86:	eb05 2508 	add.w	r5, r5, r8, lsl #8
   16a8a:	b2ad      	uxth	r5, r5
      if (handle == 0 || handle < prevHandle || handle < nextHandle ||
   16a8c:	2d00      	cmp	r5, #0
   16a8e:	d039      	beq.n	16b04 <attcProcFindOrReadRsp+0xd4>
   16a90:	42aa      	cmp	r2, r5
   16a92:	d837      	bhi.n	16b04 <attcProcFindOrReadRsp+0xd4>
   16a94:	42ac      	cmp	r4, r5
   16a96:	d835      	bhi.n	16b04 <attcProcFindOrReadRsp+0xd4>
   16a98:	42af      	cmp	r7, r5
   16a9a:	d333      	bcc.n	16b04 <attcProcFindOrReadRsp+0xd4>
    if (handle == ATT_HANDLE_MAX)
   16a9c:	42b5      	cmp	r5, r6
    {
      nextHandle = 0;
    }
    else
    {
      nextHandle = handle + 1;
   16a9e:	bf18      	it	ne
   16aa0:	1c6c      	addne	r4, r5, #1
   16aa2:	4471      	add	r1, lr
   16aa4:	bf14      	ite	ne
   16aa6:	b2a4      	uxthne	r4, r4
      nextHandle = 0;
   16aa8:	2400      	moveq	r4, #0

    /* skip over parameter */
    p += paramLen;

    /* check for truncated response */
    if (p > pEnd)
   16aaa:	458c      	cmp	ip, r1
   16aac:	d32a      	bcc.n	16b04 <attcProcFindOrReadRsp+0xd4>
  while (p < pEnd)
   16aae:	4561      	cmp	r1, ip
   16ab0:	d3d8      	bcc.n	16a64 <attcProcFindOrReadRsp+0x34>
      break;
    }
  }

  /* if response was correct */
  if (pEvt->hdr.status == ATT_SUCCESS)
   16ab2:	78db      	ldrb	r3, [r3, #3]
   16ab4:	b913      	cbnz	r3, 16abc <attcProcFindOrReadRsp+0x8c>
  {
    /* if continuing */
    if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
   16ab6:	7cc3      	ldrb	r3, [r0, #19]
   16ab8:	2b01      	cmp	r3, #1
   16aba:	d02e      	beq.n	16b1a <attcProcFindOrReadRsp+0xea>
        pCcb->outReqParams.h.startHandle = nextHandle;
        pCcb->outReq.handle = nextHandle;
      }
    }
  }
}
   16abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    paramLen = *p++ - sizeof(uint16_t);
   16ac0:	7a57      	ldrb	r7, [r2, #9]
   16ac2:	3f02      	subs	r7, #2
   16ac4:	f102 010a 	add.w	r1, r2, #10
   16ac8:	b2ff      	uxtb	r7, r7
  nextHandle = pCcb->outReqParams.h.startHandle;
   16aca:	8bc4      	ldrh	r4, [r0, #30]
  while (p < pEnd)
   16acc:	3702      	adds	r7, #2
    if (handle == ATT_HANDLE_MAX)
   16ace:	f64f 76ff 	movw	r6, #65535	; 0xffff
   16ad2:	e014      	b.n	16afe <attcProcFindOrReadRsp+0xce>
    BSTREAM_TO_UINT16(handle, p);
   16ad4:	784d      	ldrb	r5, [r1, #1]
   16ad6:	780a      	ldrb	r2, [r1, #0]
   16ad8:	eb02 2205 	add.w	r2, r2, r5, lsl #8
   16adc:	b292      	uxth	r2, r2
      nextHandle = handle + 1;
   16ade:	1c55      	adds	r5, r2, #1
    if (handle == 0 || nextHandle == 0 || handle < nextHandle ||
   16ae0:	b182      	cbz	r2, 16b04 <attcProcFindOrReadRsp+0xd4>
   16ae2:	b17c      	cbz	r4, 16b04 <attcProcFindOrReadRsp+0xd4>
   16ae4:	42a2      	cmp	r2, r4
   16ae6:	d30d      	bcc.n	16b04 <attcProcFindOrReadRsp+0xd4>
   16ae8:	f8b0 e020 	ldrh.w	lr, [r0, #32]
   16aec:	4596      	cmp	lr, r2
      nextHandle = handle + 1;
   16aee:	b2ac      	uxth	r4, r5
    if (handle == 0 || nextHandle == 0 || handle < nextHandle ||
   16af0:	d308      	bcc.n	16b04 <attcProcFindOrReadRsp+0xd4>
    if (handle == ATT_HANDLE_MAX)
   16af2:	42b2      	cmp	r2, r6
   16af4:	4439      	add	r1, r7
      nextHandle = 0;
   16af6:	bf08      	it	eq
   16af8:	2400      	moveq	r4, #0
    if (p > pEnd)
   16afa:	4561      	cmp	r1, ip
   16afc:	d802      	bhi.n	16b04 <attcProcFindOrReadRsp+0xd4>
  while (p < pEnd)
   16afe:	458c      	cmp	ip, r1
   16b00:	d8e8      	bhi.n	16ad4 <attcProcFindOrReadRsp+0xa4>
   16b02:	e7d6      	b.n	16ab2 <attcProcFindOrReadRsp+0x82>
      pEvt->hdr.status = ATT_ERR_INVALID_RSP;
   16b04:	2273      	movs	r2, #115	; 0x73
   16b06:	70da      	strb	r2, [r3, #3]
}
   16b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (*p++ == ATT_FIND_HANDLE_16_UUID)
   16b0c:	7a51      	ldrb	r1, [r2, #9]
      paramLen = ATT_128_UUID_LEN;
   16b0e:	2901      	cmp	r1, #1
   16b10:	bf18      	it	ne
   16b12:	2710      	movne	r7, #16
    if (*p++ == ATT_FIND_HANDLE_16_UUID)
   16b14:	f102 010a 	add.w	r1, r2, #10
   16b18:	e7d7      	b.n	16aca <attcProcFindOrReadRsp+0x9a>
      if (nextHandle == 0 || nextHandle == (pCcb->outReqParams.h.endHandle + 1))
   16b1a:	b134      	cbz	r4, 16b2a <attcProcFindOrReadRsp+0xfa>
   16b1c:	8c03      	ldrh	r3, [r0, #32]
   16b1e:	3301      	adds	r3, #1
   16b20:	429c      	cmp	r4, r3
   16b22:	d002      	beq.n	16b2a <attcProcFindOrReadRsp+0xfa>
        pCcb->outReqParams.h.startHandle = nextHandle;
   16b24:	83c4      	strh	r4, [r0, #30]
        pCcb->outReq.handle = nextHandle;
   16b26:	8304      	strh	r4, [r0, #24]
}
   16b28:	e7c8      	b.n	16abc <attcProcFindOrReadRsp+0x8c>
        pCcb->outReq.hdr.status = ATTC_NOT_CONTINUING;
   16b2a:	2300      	movs	r3, #0
   16b2c:	74c3      	strb	r3, [r0, #19]
}
   16b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    paramLen = *p++ - (2 * sizeof(uint16_t));
   16b32:	4677      	mov	r7, lr
   16b34:	e7ca      	b.n	16acc <attcProcFindOrReadRsp+0x9c>
   16b36:	bf00      	nop

00016b38 <attcProcReadRsp>:
 */
/*************************************************************************************************/
void attcProcReadRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
  /* nothing to process */
}
   16b38:	4770      	bx	lr
   16b3a:	bf00      	nop

00016b3c <attcProcWriteRsp>:
 */
/*************************************************************************************************/
void attcProcWriteRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
  /* no parameters so clear length */
  pEvt->valueLen = 0;
   16b3c:	2200      	movs	r2, #0
   16b3e:	811a      	strh	r2, [r3, #8]
}
   16b40:	4770      	bx	lr
   16b42:	bf00      	nop

00016b44 <attcProcMtuRsp>:
{
   16b44:	b570      	push	{r4, r5, r6, lr}
  BYTES_TO_UINT16(mtu, pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN);
   16b46:	7a93      	ldrb	r3, [r2, #10]
   16b48:	7a51      	ldrb	r1, [r2, #9]
  attSetMtu(pCcb->pMainCcb, mtu, WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN)));
   16b4a:	4c13      	ldr	r4, [pc, #76]	; (16b98 <attcProcMtuRsp+0x54>)
   16b4c:	6805      	ldr	r5, [r0, #0]
  BYTES_TO_UINT16(mtu, pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN);
   16b4e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
   16b52:	b289      	uxth	r1, r1
  if (mtu < ATT_DEFAULT_MTU)
   16b54:	2917      	cmp	r1, #23
{
   16b56:	b082      	sub	sp, #8
  attSetMtu(pCcb->pMainCcb, mtu, WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN)));
   16b58:	6823      	ldr	r3, [r4, #0]
   16b5a:	bf38      	it	cc
   16b5c:	2117      	movcc	r1, #23
   16b5e:	889e      	ldrh	r6, [r3, #4]
   16b60:	9101      	str	r1, [sp, #4]
   16b62:	f7f7 fcad 	bl	e4c0 <HciGetMaxRxAclLen>
   16b66:	3804      	subs	r0, #4
   16b68:	4286      	cmp	r6, r0
   16b6a:	9901      	ldr	r1, [sp, #4]
   16b6c:	da07      	bge.n	16b7e <attcProcMtuRsp+0x3a>
   16b6e:	6823      	ldr	r3, [r4, #0]
   16b70:	889a      	ldrh	r2, [r3, #4]
   16b72:	4628      	mov	r0, r5
}
   16b74:	b002      	add	sp, #8
   16b76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  attSetMtu(pCcb->pMainCcb, mtu, WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN)));
   16b7a:	f001 beef 	b.w	1895c <attSetMtu>
   16b7e:	9101      	str	r1, [sp, #4]
   16b80:	f7f7 fc9e 	bl	e4c0 <HciGetMaxRxAclLen>
   16b84:	9901      	ldr	r1, [sp, #4]
   16b86:	3804      	subs	r0, #4
   16b88:	b282      	uxth	r2, r0
   16b8a:	4628      	mov	r0, r5
}
   16b8c:	b002      	add	sp, #8
   16b8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  attSetMtu(pCcb->pMainCcb, mtu, WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN)));
   16b92:	f001 bee3 	b.w	1895c <attSetMtu>
   16b96:	bf00      	nop
   16b98:	10002b0c 	.word	0x10002b0c

00016b9c <attcProcRsp>:
void attcProcRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
  attEvt_t    evt;

  /* if no request in progress ignore response */
  if (pCcb->outReq.hdr.event == ATTC_MSG_API_NONE)
   16b9c:	7c83      	ldrb	r3, [r0, #18]
   16b9e:	2b00      	cmp	r3, #0
   16ba0:	d04b      	beq.n	16c3a <attcProcRsp+0x9e>
{
   16ba2:	b5f0      	push	{r4, r5, r6, r7, lr}
   16ba4:	4615      	mov	r5, r2
  {
    return;
  }

  /* get method */
  evt.hdr.event = ATT_OPCODE_2_METHOD(*(pPacket + L2C_PAYLOAD_START));
   16ba6:	7a12      	ldrb	r2, [r2, #8]
{
   16ba8:	b085      	sub	sp, #20
   16baa:	460e      	mov	r6, r1
  evt.hdr.event = ATT_OPCODE_2_METHOD(*(pPacket + L2C_PAYLOAD_START));
   16bac:	0851      	lsrs	r1, r2, #1

  /* if response method is not error and does not match stored method ignore response */
  if ((evt.hdr.event != ATT_METHOD_ERR) && (evt.hdr.event != pCcb->outReq.hdr.event))
   16bae:	0852      	lsrs	r2, r2, #1
   16bb0:	4604      	mov	r4, r0
  evt.hdr.event = ATT_OPCODE_2_METHOD(*(pPacket + L2C_PAYLOAD_START));
   16bb2:	f88d 1002 	strb.w	r1, [sp, #2]
  if ((evt.hdr.event != ATT_METHOD_ERR) && (evt.hdr.event != pCcb->outReq.hdr.event))
   16bb6:	d001      	beq.n	16bbc <attcProcRsp+0x20>
   16bb8:	428b      	cmp	r3, r1
   16bba:	d135      	bne.n	16c28 <attcProcRsp+0x8c>
  {
    return;
  }

  /* stop request timer */
  WsfTimerStop(&pCcb->outReqTimer);
   16bbc:	f104 0024 	add.w	r0, r4, #36	; 0x24
   16bc0:	f7f9 f9a2 	bl	ff08 <WsfTimerStop>

  /* initialize event structure then process response */
  evt.pValue = pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;
  evt.valueLen = len - ATT_HDR_LEN;
  evt.handle = pCcb->outReq.handle;
   16bc4:	8b23      	ldrh	r3, [r4, #24]
   16bc6:	f8ad 300a 	strh.w	r3, [sp, #10]
  evt.pValue = pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;
   16bca:	f105 0309 	add.w	r3, r5, #9
  evt.hdr.status = ATT_SUCCESS;
  (*attcProcRspTbl[evt.hdr.event])(pCcb, len, pPacket, &evt);
   16bce:	f89d 1002 	ldrb.w	r1, [sp, #2]
   16bd2:	4a1f      	ldr	r2, [pc, #124]	; (16c50 <attcProcRsp+0xb4>)
  evt.pValue = pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;
   16bd4:	9301      	str	r3, [sp, #4]
  evt.valueLen = len - ATT_HDR_LEN;
   16bd6:	1e73      	subs	r3, r6, #1
   16bd8:	f8ad 3008 	strh.w	r3, [sp, #8]
  evt.hdr.status = ATT_SUCCESS;
   16bdc:	2300      	movs	r3, #0
  (*attcProcRspTbl[evt.hdr.event])(pCcb, len, pPacket, &evt);
   16bde:	f852 7021 	ldr.w	r7, [r2, r1, lsl #2]
  evt.hdr.status = ATT_SUCCESS;
   16be2:	f88d 3003 	strb.w	r3, [sp, #3]
  (*attcProcRspTbl[evt.hdr.event])(pCcb, len, pPacket, &evt);
   16be6:	462a      	mov	r2, r5
   16be8:	466b      	mov	r3, sp
   16bea:	4631      	mov	r1, r6
   16bec:	4620      	mov	r0, r4
   16bee:	47b8      	blx	r7

  /* if not continuing or status is not success */
  if ((pCcb->outReq.hdr.status == ATTC_NOT_CONTINUING) || (evt.hdr.status != ATT_SUCCESS))
   16bf0:	7ce3      	ldrb	r3, [r4, #19]
   16bf2:	b1db      	cbz	r3, 16c2c <attcProcRsp+0x90>
   16bf4:	f89d 3003 	ldrb.w	r3, [sp, #3]
   16bf8:	b9c3      	cbnz	r3, 16c2c <attcProcRsp+0x90>
    pCcb->outReq.hdr.event = ATTC_MSG_API_NONE;
    attcFreePkt(&pCcb->outReq);
  }

  /* call callback (if not mtu rsp) */
  if ((evt.hdr.event != ATT_METHOD_MTU) && attCb.cback)
   16bfa:	f89d 3002 	ldrb.w	r3, [sp, #2]
   16bfe:	2b01      	cmp	r3, #1
   16c00:	d00a      	beq.n	16c18 <attcProcRsp+0x7c>
   16c02:	4b14      	ldr	r3, [pc, #80]	; (16c54 <attcProcRsp+0xb8>)
   16c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   16c06:	b13b      	cbz	r3, 16c18 <attcProcRsp+0x7c>
  {
    /* set additional parameters and call callback */
    evt.continuing = pCcb->outReq.hdr.status;   /* continuing flag */
   16c08:	7ce1      	ldrb	r1, [r4, #19]
    evt.hdr.param = pCcb->outReq.hdr.param;     /* connId */
   16c0a:	8a22      	ldrh	r2, [r4, #16]
    evt.continuing = pCcb->outReq.hdr.status;   /* continuing flag */
   16c0c:	f88d 100c 	strb.w	r1, [sp, #12]
    evt.hdr.param = pCcb->outReq.hdr.param;     /* connId */
   16c10:	f8ad 2000 	strh.w	r2, [sp]
    (*attCb.cback)(&evt);
   16c14:	4668      	mov	r0, sp
   16c16:	4798      	blx	r3
  }

  /* if no flow control */
  if (!pCcb->flowDisabled)
   16c18:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   16c1c:	b923      	cbnz	r3, 16c28 <attcProcRsp+0x8c>
  {
    /* if out req ready */
    if (pCcb->outReq.pPkt != NULL)
   16c1e:	6965      	ldr	r5, [r4, #20]
   16c20:	b165      	cbz	r5, 16c3c <attcProcRsp+0xa0>
    {
      /* build and send request */
      attcSendReq(pCcb);
   16c22:	4620      	mov	r0, r4
   16c24:	f7ff fe62 	bl	168ec <attcSendReq>

      /* clear on deck */
      pCcb->onDeck.hdr.event = ATTC_MSG_API_NONE;
    }
  }
}
   16c28:	b005      	add	sp, #20
   16c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pCcb->outReq.hdr.event = ATTC_MSG_API_NONE;
   16c2c:	2300      	movs	r3, #0
   16c2e:	74a3      	strb	r3, [r4, #18]
    attcFreePkt(&pCcb->outReq);
   16c30:	f104 0010 	add.w	r0, r4, #16
   16c34:	f7ff fea2 	bl	1697c <attcFreePkt>
   16c38:	e7df      	b.n	16bfa <attcProcRsp+0x5e>
   16c3a:	4770      	bx	lr
    else if (pCcb->onDeck.hdr.event != ATTC_MSG_API_NONE)
   16c3c:	79a3      	ldrb	r3, [r4, #6]
   16c3e:	2b00      	cmp	r3, #0
   16c40:	d0f2      	beq.n	16c28 <attcProcRsp+0x8c>
      attcSetupReq(pCcb, &pCcb->onDeck);
   16c42:	1d21      	adds	r1, r4, #4
   16c44:	4620      	mov	r0, r4
   16c46:	f7ff fe59 	bl	168fc <attcSetupReq>
      pCcb->onDeck.hdr.event = ATTC_MSG_API_NONE;
   16c4a:	71a5      	strb	r5, [r4, #6]
   16c4c:	e7ec      	b.n	16c28 <attcProcRsp+0x8c>
   16c4e:	bf00      	nop
   16c50:	00020194 	.word	0x00020194
   16c54:	100057d4 	.word	0x100057d4

00016c58 <attcProcInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcProcInd(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   16c58:	b510      	push	{r4, lr}
   16c5a:	4604      	mov	r4, r0
  uint8_t     *pPkt;

  p = pPacket + L2C_PAYLOAD_START;

  /* parse packet and set callback event struct */
  evt.hdr.event = ATT_OPCODE_2_METHOD(*p++);
   16c5c:	7a10      	ldrb	r0, [r2, #8]
  BSTREAM_TO_UINT16(evt.handle, p);
   16c5e:	f892 c00a 	ldrb.w	ip, [r2, #10]
   16c62:	7a53      	ldrb	r3, [r2, #9]
{
   16c64:	b084      	sub	sp, #16
  evt.hdr.event = ATT_OPCODE_2_METHOD(*p++);
   16c66:	1040      	asrs	r0, r0, #1
   16c68:	f88d 0002 	strb.w	r0, [sp, #2]
  evt.pValue = p;
  evt.valueLen = len - ATT_HDR_LEN - sizeof(uint16_t);
  evt.hdr.param = pCcb->pMainCcb->connId;
   16c6c:	6820      	ldr	r0, [r4, #0]
  BSTREAM_TO_UINT16(evt.handle, p);
   16c6e:	320b      	adds	r2, #11
   16c70:	eb03 230c 	add.w	r3, r3, ip, lsl #8
  evt.hdr.param = pCcb->pMainCcb->connId;
   16c74:	7f00      	ldrb	r0, [r0, #28]
  evt.pValue = p;
   16c76:	9201      	str	r2, [sp, #4]
  BSTREAM_TO_UINT16(evt.handle, p);
   16c78:	b29b      	uxth	r3, r3
  evt.hdr.status = ATT_SUCCESS;
   16c7a:	2200      	movs	r2, #0
  evt.valueLen = len - ATT_HDR_LEN - sizeof(uint16_t);
   16c7c:	3903      	subs	r1, #3
  BSTREAM_TO_UINT16(evt.handle, p);
   16c7e:	f8ad 300a 	strh.w	r3, [sp, #10]
  evt.valueLen = len - ATT_HDR_LEN - sizeof(uint16_t);
   16c82:	f8ad 1008 	strh.w	r1, [sp, #8]
  evt.hdr.param = pCcb->pMainCcb->connId;
   16c86:	f8ad 0000 	strh.w	r0, [sp]
  evt.hdr.status = ATT_SUCCESS;
   16c8a:	f88d 2003 	strb.w	r2, [sp, #3]
  evt.continuing = FALSE;
   16c8e:	f88d 200c 	strb.w	r2, [sp, #12]

  /* verify handle and call callback */
  if ((evt.handle != 0) && attCb.cback)
   16c92:	b123      	cbz	r3, 16c9e <attcProcInd+0x46>
   16c94:	4b12      	ldr	r3, [pc, #72]	; (16ce0 <attcProcInd+0x88>)
   16c96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   16c98:	b10b      	cbz	r3, 16c9e <attcProcInd+0x46>
  {
    (*attCb.cback)(&evt);
   16c9a:	4668      	mov	r0, sp
   16c9c:	4798      	blx	r3
  }

  /* if indication send confirm */
  if (attcCb.autoCnf && (evt.hdr.event == ATT_METHOD_VALUE_IND))
   16c9e:	4b11      	ldr	r3, [pc, #68]	; (16ce4 <attcProcInd+0x8c>)
   16ca0:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
   16ca4:	b11b      	cbz	r3, 16cae <attcProcInd+0x56>
   16ca6:	f89d 3002 	ldrb.w	r3, [sp, #2]
   16caa:	2b0e      	cmp	r3, #14
   16cac:	d004      	beq.n	16cb8 <attcProcInd+0x60>

    return;
  }

  /* mark confirm as pending; will be sent when flow enabled or application sends it. */
  pCcb->cnfPending = TRUE;
   16cae:	2301      	movs	r3, #1
   16cb0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
   16cb4:	b004      	add	sp, #16
   16cb6:	bd10      	pop	{r4, pc}
    if (!pCcb->flowDisabled)
   16cb8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   16cbc:	2b00      	cmp	r3, #0
   16cbe:	d1f9      	bne.n	16cb4 <attcProcInd+0x5c>
      if ((pPkt = attMsgAlloc(ATT_VALUE_CNF_LEN + L2C_PAYLOAD_START)) != NULL)
   16cc0:	2009      	movs	r0, #9
   16cc2:	f001 fe89 	bl	189d8 <attMsgAlloc>
   16cc6:	2800      	cmp	r0, #0
   16cc8:	d0f4      	beq.n	16cb4 <attcProcInd+0x5c>
        *(pPkt + L2C_PAYLOAD_START) = ATT_PDU_VALUE_CNF;
   16cca:	231e      	movs	r3, #30
   16ccc:	7203      	strb	r3, [r0, #8]
        L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, ATT_VALUE_CNF_LEN, pPkt);
   16cce:	6822      	ldr	r2, [r4, #0]
   16cd0:	4603      	mov	r3, r0
   16cd2:	8b11      	ldrh	r1, [r2, #24]
   16cd4:	2004      	movs	r0, #4
   16cd6:	2201      	movs	r2, #1
   16cd8:	f7fc fd2e 	bl	13738 <L2cDataReq>
    return;
   16cdc:	e7ea      	b.n	16cb4 <attcProcInd+0x5c>
   16cde:	bf00      	nop
   16ce0:	100057d4 	.word	0x100057d4
   16ce4:	100056a8 	.word	0x100056a8

00016ce8 <AttcMtuReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttcMtuReq(dmConnId_t connId, uint16_t mtu)
{
   16ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16cea:	4606      	mov	r6, r0
  attcPktParam_t  *pPkt;
  uint8_t         *p;

  /* allocate packet and parameter buffer */
  if ((pPkt = attMsgAlloc(ATT_MTU_REQ_BUF_LEN)) != NULL)
   16cec:	200b      	movs	r0, #11
{
   16cee:	460d      	mov	r5, r1
  if ((pPkt = attMsgAlloc(ATT_MTU_REQ_BUF_LEN)) != NULL)
   16cf0:	f001 fe72 	bl	189d8 <attMsgAlloc>
   16cf4:	b318      	cbz	r0, 16d3e <AttcMtuReq+0x56>
    /* set length */
    pPkt->len = ATT_MTU_REQ_LEN;

    /* build packet */
    p = (uint8_t *) pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, ATT_PDU_MTU_REQ);
   16cf6:	2302      	movs	r3, #2
   16cf8:	7203      	strb	r3, [r0, #8]
    pPkt->len = ATT_MTU_REQ_LEN;
   16cfa:	2203      	movs	r2, #3
    UINT16_TO_BSTREAM(p, mtu);
   16cfc:	0a2b      	lsrs	r3, r5, #8
    pPkt->len = ATT_MTU_REQ_LEN;
   16cfe:	8002      	strh	r2, [r0, #0]
    UINT16_TO_BSTREAM(p, mtu);
   16d00:	7245      	strb	r5, [r0, #9]
   16d02:	7283      	strb	r3, [r0, #10]

    /* send message */
    attcSendMsg(connId, 0, ATTC_MSG_API_MTU, pPkt, FALSE);
   16d04:	4604      	mov	r4, r0
  WsfTaskLock();
   16d06:	f7f8 fe61 	bl	f9cc <WsfTaskLock>
  if ((pCcb = attcCcbByConnId(connId)) != NULL)
   16d0a:	4630      	mov	r0, r6
   16d0c:	f7ff fe10 	bl	16930 <attcCcbByConnId>
   16d10:	b1b0      	cbz	r0, 16d40 <AttcMtuReq+0x58>
    mtu = pCcb->pMainCcb->mtu;
   16d12:	6803      	ldr	r3, [r0, #0]
   16d14:	8b5f      	ldrh	r7, [r3, #26]
    transTimedOut = !!(pCcb->pMainCcb->control & ATT_CCB_STATUS_TX_TIMEOUT);
   16d16:	7f5d      	ldrb	r5, [r3, #29]
  WsfTaskUnlock();
   16d18:	f7f8 fe62 	bl	f9e0 <WsfTaskUnlock>
  if (mtu > 0)
   16d1c:	b157      	cbz	r7, 16d34 <AttcMtuReq+0x4c>
    if (!transTimedOut)
   16d1e:	f015 0504 	ands.w	r5, r5, #4
   16d22:	d114      	bne.n	16d4e <AttcMtuReq+0x66>
      if (dataLen <= mtu)
   16d24:	8823      	ldrh	r3, [r4, #0]
   16d26:	42bb      	cmp	r3, r7
   16d28:	d818      	bhi.n	16d5c <AttcMtuReq+0x74>
        if ((pMsg = WsfMsgAlloc(sizeof(attcApiMsg_t))) != NULL)
   16d2a:	200c      	movs	r0, #12
   16d2c:	f7f8 fe0c 	bl	f948 <WsfMsgAlloc>
   16d30:	4601      	mov	r1, r0
   16d32:	b9d0      	cbnz	r0, 16d6a <AttcMtuReq+0x82>
    WsfMsgFree(pPkt);
   16d34:	4620      	mov	r0, r4
  }
}
   16d36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    WsfMsgFree(pPkt);
   16d3a:	f7f8 be0d 	b.w	f958 <WsfMsgFree>
}
   16d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  WsfTaskUnlock();
   16d40:	f7f8 fe4e 	bl	f9e0 <WsfTaskUnlock>
    WsfMsgFree(pPkt);
   16d44:	4620      	mov	r0, r4
}
   16d46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    WsfMsgFree(pPkt);
   16d4a:	f7f8 be05 	b.w	f958 <WsfMsgFree>
      attcExecCallback(connId, msgId, handle, ATT_ERR_TIMEOUT);
   16d4e:	2371      	movs	r3, #113	; 0x71
   16d50:	2200      	movs	r2, #0
   16d52:	2101      	movs	r1, #1
   16d54:	4630      	mov	r0, r6
   16d56:	f7ff fe1b 	bl	16990 <attcExecCallback>
   16d5a:	e7eb      	b.n	16d34 <AttcMtuReq+0x4c>
        attcExecCallback(connId, msgId, handle, ATT_ERR_MTU_EXCEEDED);
   16d5c:	2377      	movs	r3, #119	; 0x77
   16d5e:	462a      	mov	r2, r5
   16d60:	2101      	movs	r1, #1
   16d62:	4630      	mov	r0, r6
   16d64:	f7ff fe14 	bl	16990 <attcExecCallback>
   16d68:	e7e4      	b.n	16d34 <AttcMtuReq+0x4c>
          WsfMsgSend(attCb.handlerId, pMsg);
   16d6a:	4b06      	ldr	r3, [pc, #24]	; (16d84 <AttcMtuReq+0x9c>)
          pMsg->hdr.param = connId;
   16d6c:	8006      	strh	r6, [r0, #0]
          pMsg->hdr.event = msgId;
   16d6e:	2201      	movs	r2, #1
   16d70:	8042      	strh	r2, [r0, #2]
          pMsg->pPkt = pPkt;
   16d72:	6044      	str	r4, [r0, #4]
          pMsg->handle = handle;
   16d74:	8105      	strh	r5, [r0, #8]
          WsfMsgSend(attCb.handlerId, pMsg);
   16d76:	f893 007c 	ldrb.w	r0, [r3, #124]	; 0x7c
}
   16d7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
          WsfMsgSend(attCb.handlerId, pMsg);
   16d7e:	f7f8 bdef 	b.w	f960 <WsfMsgSend>
   16d82:	bf00      	nop
   16d84:	100057d4 	.word	0x100057d4

00016d88 <AttcIndConfirm>:
void AttcIndConfirm(dmConnId_t connId)
{
  attcCcb_t   *pCcb;
  uint8_t     *pPkt;

  pCcb = attcCcbByHandle(connId - 1);
   16d88:	3801      	subs	r0, #1
{
   16d8a:	b570      	push	{r4, r5, r6, lr}
  pCcb = attcCcbByHandle(connId - 1);
   16d8c:	b280      	uxth	r0, r0
   16d8e:	f7ff fde7 	bl	16960 <attcCcbByHandle>

  /* If confirmation is pending */
  if (pCcb && pCcb->cnfPending && !pCcb->flowDisabled)
   16d92:	b130      	cbz	r0, 16da2 <AttcIndConfirm+0x1a>
   16d94:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   16d98:	4604      	mov	r4, r0
   16d9a:	b113      	cbz	r3, 16da2 <AttcIndConfirm+0x1a>
   16d9c:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
   16da0:	b105      	cbz	r5, 16da4 <AttcIndConfirm+0x1c>

      *(pPkt + L2C_PAYLOAD_START) = ATT_PDU_VALUE_CNF;
      L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, ATT_VALUE_CNF_LEN, pPkt);
    }
  }
}
   16da2:	bd70      	pop	{r4, r5, r6, pc}
    if ((pPkt = attMsgAlloc(ATT_VALUE_CNF_LEN + L2C_PAYLOAD_START)) != NULL)
   16da4:	2009      	movs	r0, #9
   16da6:	f001 fe17 	bl	189d8 <attMsgAlloc>
   16daa:	2800      	cmp	r0, #0
   16dac:	d0f9      	beq.n	16da2 <AttcIndConfirm+0x1a>
      *(pPkt + L2C_PAYLOAD_START) = ATT_PDU_VALUE_CNF;
   16dae:	231e      	movs	r3, #30
      pCcb->cnfPending = FALSE;
   16db0:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
      *(pPkt + L2C_PAYLOAD_START) = ATT_PDU_VALUE_CNF;
   16db4:	7203      	strb	r3, [r0, #8]
      L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, ATT_VALUE_CNF_LEN, pPkt);
   16db6:	6822      	ldr	r2, [r4, #0]
   16db8:	4603      	mov	r3, r0
   16dba:	8b11      	ldrh	r1, [r2, #24]
}
   16dbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, ATT_VALUE_CNF_LEN, pPkt);
   16dc0:	2201      	movs	r2, #1
   16dc2:	2004      	movs	r0, #4
   16dc4:	f7fc bcb8 	b.w	13738 <L2cDataReq>

00016dc8 <attcProcFindByTypeRsp>:
  uint16_t  startHandle;
  uint16_t  endHandle;
  uint16_t  nextHandle;

  p = pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;
  pEnd = pPacket + L2C_PAYLOAD_START + len;
   16dc8:	3108      	adds	r1, #8
{
   16dca:	b5f0      	push	{r4, r5, r6, r7, lr}
  p = pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;
   16dcc:	f102 0c09 	add.w	ip, r2, #9

  /* get and verify all handles */
  nextHandle = pCcb->outReqParams.h.startHandle;
   16dd0:	8bc4      	ldrh	r4, [r0, #30]
  pEnd = pPacket + L2C_PAYLOAD_START + len;
   16dd2:	eb02 0e01 	add.w	lr, r2, r1
      pEvt->hdr.status = ATT_ERR_INVALID_RSP;
      break;
    }

    /* set next expected handle, with special case for max handle */
    if (endHandle == ATT_HANDLE_MAX)
   16dd6:	f64f 77ff 	movw	r7, #65535	; 0xffff
  while (p < pEnd)
   16dda:	e01f      	b.n	16e1c <attcProcFindByTypeRsp+0x54>
    BSTREAM_TO_UINT16(startHandle, p);
   16ddc:	f89c 6001 	ldrb.w	r6, [ip, #1]
   16de0:	f89c 2000 	ldrb.w	r2, [ip]
    BSTREAM_TO_UINT16(endHandle, p);
   16de4:	f89c 5003 	ldrb.w	r5, [ip, #3]
   16de8:	f89c 1002 	ldrb.w	r1, [ip, #2]
    BSTREAM_TO_UINT16(startHandle, p);
   16dec:	eb02 2206 	add.w	r2, r2, r6, lsl #8
    BSTREAM_TO_UINT16(endHandle, p);
   16df0:	eb01 2105 	add.w	r1, r1, r5, lsl #8
   16df4:	b289      	uxth	r1, r1
    BSTREAM_TO_UINT16(startHandle, p);
   16df6:	b292      	uxth	r2, r2
    if ((startHandle > endHandle) || (startHandle < nextHandle) ||
   16df8:	428a      	cmp	r2, r1
   16dfa:	f10c 0c04 	add.w	ip, ip, #4
    {
      nextHandle = 0;
    }
    else
    {
      nextHandle = endHandle + 1;
   16dfe:	f101 0601 	add.w	r6, r1, #1
    if ((startHandle > endHandle) || (startHandle < nextHandle) ||
   16e02:	d813      	bhi.n	16e2c <attcProcFindByTypeRsp+0x64>
   16e04:	4294      	cmp	r4, r2
   16e06:	d811      	bhi.n	16e2c <attcProcFindByTypeRsp+0x64>
   16e08:	8c05      	ldrh	r5, [r0, #32]
   16e0a:	4295      	cmp	r5, r2
   16e0c:	d30e      	bcc.n	16e2c <attcProcFindByTypeRsp+0x64>
        (startHandle > pCcb->outReqParams.h.endHandle) || (nextHandle == 0))
   16e0e:	b16c      	cbz	r4, 16e2c <attcProcFindByTypeRsp+0x64>
    if (endHandle == ATT_HANDLE_MAX)
   16e10:	42b9      	cmp	r1, r7
      nextHandle = endHandle + 1;
   16e12:	bf14      	ite	ne
   16e14:	b2b4      	uxthne	r4, r6
      nextHandle = 0;
   16e16:	2400      	moveq	r4, #0
    }

    /* check for truncated response */
    if (p > pEnd)
   16e18:	45e6      	cmp	lr, ip
   16e1a:	d307      	bcc.n	16e2c <attcProcFindByTypeRsp+0x64>
  while (p < pEnd)
   16e1c:	45f4      	cmp	ip, lr
   16e1e:	d3dd      	bcc.n	16ddc <attcProcFindByTypeRsp+0x14>
      break;
    }
  }

  /* if response was correct */
  if (pEvt->hdr.status == ATT_SUCCESS)
   16e20:	78db      	ldrb	r3, [r3, #3]
   16e22:	b913      	cbnz	r3, 16e2a <attcProcFindByTypeRsp+0x62>
  {
    /* if continuing */
    if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
   16e24:	7cc3      	ldrb	r3, [r0, #19]
   16e26:	2b01      	cmp	r3, #1
   16e28:	d003      	beq.n	16e32 <attcProcFindByTypeRsp+0x6a>
        pCcb->outReqParams.h.startHandle = nextHandle;
        pCcb->outReq.handle = nextHandle;
      }
    }
  }
}
   16e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pEvt->hdr.status = ATT_ERR_INVALID_RSP;
   16e2c:	2273      	movs	r2, #115	; 0x73
   16e2e:	70da      	strb	r2, [r3, #3]
}
   16e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (nextHandle == 0 || nextHandle > pCcb->outReqParams.h.endHandle)
   16e32:	b114      	cbz	r4, 16e3a <attcProcFindByTypeRsp+0x72>
   16e34:	8c03      	ldrh	r3, [r0, #32]
   16e36:	42a3      	cmp	r3, r4
   16e38:	d202      	bcs.n	16e40 <attcProcFindByTypeRsp+0x78>
        pCcb->outReq.hdr.status = ATTC_NOT_CONTINUING;
   16e3a:	2300      	movs	r3, #0
   16e3c:	74c3      	strb	r3, [r0, #19]
}
   16e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pCcb->outReqParams.h.startHandle = nextHandle;
   16e40:	83c4      	strh	r4, [r0, #30]
        pCcb->outReq.handle = nextHandle;
   16e42:	8304      	strh	r4, [r0, #24]
}
   16e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16e46:	bf00      	nop

00016e48 <attcProcReadLongRsp>:
 */
/*************************************************************************************************/
void attcProcReadLongRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
  /* if continuing */
  if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
   16e48:	7cc2      	ldrb	r2, [r0, #19]
   16e4a:	2a01      	cmp	r2, #1
   16e4c:	d000      	beq.n	16e50 <attcProcReadLongRsp+0x8>
    else
    {
      pCcb->outReqParams.o.offset += pEvt->valueLen;
    }
  }
}
   16e4e:	4770      	bx	lr
    if (len < pCcb->pMainCcb->mtu)
   16e50:	6802      	ldr	r2, [r0, #0]
   16e52:	8b52      	ldrh	r2, [r2, #26]
   16e54:	428a      	cmp	r2, r1
   16e56:	d902      	bls.n	16e5e <attcProcReadLongRsp+0x16>
      pCcb->outReq.hdr.status = ATTC_NOT_CONTINUING;
   16e58:	2300      	movs	r3, #0
   16e5a:	74c3      	strb	r3, [r0, #19]
   16e5c:	4770      	bx	lr
      pCcb->outReqParams.o.offset += pEvt->valueLen;
   16e5e:	8bc2      	ldrh	r2, [r0, #30]
   16e60:	891b      	ldrh	r3, [r3, #8]
   16e62:	4413      	add	r3, r2
   16e64:	83c3      	strh	r3, [r0, #30]
}
   16e66:	4770      	bx	lr

00016e68 <attcProcPrepWriteRsp>:
 */
/*************************************************************************************************/
void attcProcPrepWriteRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
  /* if continuing */
  if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
   16e68:	7cc2      	ldrb	r2, [r0, #19]
   16e6a:	2a01      	cmp	r2, #1
   16e6c:	d006      	beq.n	16e7c <attcProcPrepWriteRsp+0x14>
      pCcb->outReq.hdr.status = ATTC_NOT_CONTINUING;
    }
  }

  /* adjust attribute value and its length (adjusted by ATT header length already) */
  pEvt->pValue += (ATT_PREP_WRITE_RSP_LEN - ATT_HDR_LEN);
   16e6e:	6859      	ldr	r1, [r3, #4]
  pEvt->valueLen -= (ATT_PREP_WRITE_RSP_LEN - ATT_HDR_LEN);
   16e70:	891a      	ldrh	r2, [r3, #8]
  pEvt->pValue += (ATT_PREP_WRITE_RSP_LEN - ATT_HDR_LEN);
   16e72:	3104      	adds	r1, #4
  pEvt->valueLen -= (ATT_PREP_WRITE_RSP_LEN - ATT_HDR_LEN);
   16e74:	3a04      	subs	r2, #4
  pEvt->pValue += (ATT_PREP_WRITE_RSP_LEN - ATT_HDR_LEN);
   16e76:	6059      	str	r1, [r3, #4]
  pEvt->valueLen -= (ATT_PREP_WRITE_RSP_LEN - ATT_HDR_LEN);
   16e78:	811a      	strh	r2, [r3, #8]
}
   16e7a:	4770      	bx	lr
    if (pCcb->outReqParams.w.len == 0)
   16e7c:	8b82      	ldrh	r2, [r0, #28]
   16e7e:	2a00      	cmp	r2, #0
   16e80:	d1f5      	bne.n	16e6e <attcProcPrepWriteRsp+0x6>
      pCcb->outReq.hdr.status = ATTC_NOT_CONTINUING;
   16e82:	74c2      	strb	r2, [r0, #19]
   16e84:	e7f3      	b.n	16e6e <attcProcPrepWriteRsp+0x6>
   16e86:	bf00      	nop

00016e88 <attsCsfSetHashUpdateStatus>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsCsfSetHashUpdateStatus(bool_t isUpdating)
{
   16e88:	b510      	push	{r4, lr}
  if (attsCsfCb.isHashUpdating == isUpdating)
   16e8a:	4c10      	ldr	r4, [pc, #64]	; (16ecc <attsCsfSetHashUpdateStatus+0x44>)
   16e8c:	7b23      	ldrb	r3, [r4, #12]
   16e8e:	4283      	cmp	r3, r0
   16e90:	d01a      	beq.n	16ec8 <attsCsfSetHashUpdateStatus+0x40>
    return;
  }
  else
  {
    /* Update state. */
    attsCsfCb.isHashUpdating = isUpdating;
   16e92:	7320      	strb	r0, [r4, #12]
  }

  /* Update complete.
   * Check if clients were pending on the hash value and fulfill their requests.
   */
  if (isUpdating == FALSE)
   16e94:	b930      	cbnz	r0, 16ea4 <attsCsfSetHashUpdateStatus+0x1c>
  {
    ATT_TRACE_INFO0("Database hash calculation complete");
   16e96:	480e      	ldr	r0, [pc, #56]	; (16ed0 <attsCsfSetHashUpdateStatus+0x48>)
   16e98:	f7f9 f8d6 	bl	10048 <WsfTrace>
      {
        attsCsfCb.attsCsfTable[i].changeAwareState = ATTS_CLIENT_CHANGE_PENDING_AWARE;
      }
    }
  }
}
   16e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    attsCheckPendDbHashReadRsp();
   16ea0:	f000 bb3a 	b.w	17518 <attsCheckPendDbHashReadRsp>
    ATT_TRACE_INFO0("Calculating database hash");
   16ea4:	480b      	ldr	r0, [pc, #44]	; (16ed4 <attsCsfSetHashUpdateStatus+0x4c>)
   16ea6:	f7f9 f8cf 	bl	10048 <WsfTrace>
      if (attsCsfCb.attsCsfTable[i].changeAwareState == ATTS_CLIENT_CHANGE_AWARE_DB_READ_PENDING)
   16eaa:	7863      	ldrb	r3, [r4, #1]
   16eac:	2b02      	cmp	r3, #2
        attsCsfCb.attsCsfTable[i].changeAwareState = ATTS_CLIENT_CHANGE_PENDING_AWARE;
   16eae:	bf04      	itt	eq
   16eb0:	2301      	moveq	r3, #1
   16eb2:	7063      	strbeq	r3, [r4, #1]
      if (attsCsfCb.attsCsfTable[i].changeAwareState == ATTS_CLIENT_CHANGE_AWARE_DB_READ_PENDING)
   16eb4:	78e3      	ldrb	r3, [r4, #3]
   16eb6:	2b02      	cmp	r3, #2
        attsCsfCb.attsCsfTable[i].changeAwareState = ATTS_CLIENT_CHANGE_PENDING_AWARE;
   16eb8:	bf04      	itt	eq
   16eba:	2301      	moveq	r3, #1
   16ebc:	70e3      	strbeq	r3, [r4, #3]
      if (attsCsfCb.attsCsfTable[i].changeAwareState == ATTS_CLIENT_CHANGE_AWARE_DB_READ_PENDING)
   16ebe:	7963      	ldrb	r3, [r4, #5]
   16ec0:	2b02      	cmp	r3, #2
        attsCsfCb.attsCsfTable[i].changeAwareState = ATTS_CLIENT_CHANGE_PENDING_AWARE;
   16ec2:	bf04      	itt	eq
   16ec4:	2301      	moveq	r3, #1
   16ec6:	7163      	strbeq	r3, [r4, #5]
}
   16ec8:	bd10      	pop	{r4, pc}
   16eca:	bf00      	nop
   16ecc:	10005758 	.word	0x10005758
   16ed0:	000201c8 	.word	0x000201c8
   16ed4:	000201ec 	.word	0x000201ec

00016ed8 <attsCsfGetHashUpdateStatus>:
*  \return \ref TRUE if update in progress, \ref FALSE otherwise.
*/
/*************************************************************************************************/
uint8_t attsCsfGetHashUpdateStatus(void)
{
  return attsCsfCb.isHashUpdating;
   16ed8:	4b01      	ldr	r3, [pc, #4]	; (16ee0 <attsCsfGetHashUpdateStatus+0x8>)
}
   16eda:	7b18      	ldrb	r0, [r3, #12]
   16edc:	4770      	bx	lr
   16ede:	bf00      	nop
   16ee0:	10005758 	.word	0x10005758

00016ee4 <attsCsfActClientState>:
{
  uint8_t err = ATT_SUCCESS;
  attsCsfRec_t *pRec;

  /* PDU which do not operate on att handles are handled agnostically of the client's state. */
  if (opcode == ATT_PDU_MTU_REQ || opcode == ATT_PDU_VALUE_CNF)
   16ee4:	2902      	cmp	r1, #2
   16ee6:	d04a      	beq.n	16f7e <attsCsfActClientState+0x9a>
   16ee8:	291e      	cmp	r1, #30
{
   16eea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16eee:	460c      	mov	r4, r1
  if (opcode == ATT_PDU_MTU_REQ || opcode == ATT_PDU_VALUE_CNF)
   16ef0:	d00e      	beq.n	16f10 <attsCsfActClientState+0x2c>
  }

  pRec = &attsCsfCb.attsCsfTable[handle];

  /* If the client is change-unaware */
  if (pRec->changeAwareState == ATTS_CLIENT_CHANGE_UNAWARE)
   16ef2:	4f2e      	ldr	r7, [pc, #184]	; (16fac <attsCsfActClientState+0xc8>)
   16ef4:	eb07 0840 	add.w	r8, r7, r0, lsl #1
   16ef8:	4605      	mov	r5, r0
   16efa:	f898 3001 	ldrb.w	r3, [r8, #1]
   16efe:	2b03      	cmp	r3, #3
   16f00:	4616      	mov	r6, r2
   16f02:	ea4f 0940 	mov.w	r9, r0, lsl #1
   16f06:	d006      	beq.n	16f16 <attsCsfActClientState+0x32>
    {
      /* return a database out of sync error */
      err = ATT_ERR_DATABASE_OUT_OF_SYNC;
    }
  }
  else if (pRec->changeAwareState == ATTS_CLIENT_CHANGE_PENDING_AWARE)
   16f08:	2b01      	cmp	r3, #1
   16f0a:	d03a      	beq.n	16f82 <attsCsfActClientState+0x9e>
      err = ATT_ERR_DATABASE_OUT_OF_SYNC;
    }
  }

  /* If this is Read by Type request */
  if (opcode == ATT_PDU_READ_TYPE_REQ)
   16f0c:	2c08      	cmp	r4, #8
   16f0e:	d016      	beq.n	16f3e <attsCsfActClientState+0x5a>
    BYTES_TO_UINT16(uuid, (pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN + 4));

    /* If this is a Read By Type Request of the Database Hash characteristic value */
    if (uuid == ATT_UUID_DATABASE_HASH)
    {
      err = ATT_SUCCESS;
   16f10:	2000      	movs	r0, #0
  {
    ATT_TRACE_INFO2("ConnId %d out of sync, PDU with opcode 0x%02x ignored!", handle + 1, opcode);
  }

  return err;
}
   16f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((opcode & ATT_PDU_MASK_COMMAND) == 0)
   16f16:	064a      	lsls	r2, r1, #25
   16f18:	d525      	bpl.n	16f66 <attsCsfActClientState+0x82>
  if (opcode == ATT_PDU_READ_TYPE_REQ)
   16f1a:	2c08      	cmp	r4, #8
   16f1c:	d108      	bne.n	16f30 <attsCsfActClientState+0x4c>
    BYTES_TO_UINT16(uuid, (pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN + 4));
   16f1e:	7bb2      	ldrb	r2, [r6, #14]
   16f20:	7b73      	ldrb	r3, [r6, #13]
   16f22:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    if (uuid == ATT_UUID_DATABASE_HASH)
   16f26:	b29b      	uxth	r3, r3
   16f28:	f642 322a 	movw	r2, #11050	; 0x2b2a
   16f2c:	4293      	cmp	r3, r2
   16f2e:	d00f      	beq.n	16f50 <attsCsfActClientState+0x6c>
    ATT_TRACE_INFO2("ConnId %d out of sync, PDU with opcode 0x%02x ignored!", handle + 1, opcode);
   16f30:	481f      	ldr	r0, [pc, #124]	; (16fb0 <attsCsfActClientState+0xcc>)
   16f32:	4622      	mov	r2, r4
   16f34:	1c69      	adds	r1, r5, #1
   16f36:	f7f9 f887 	bl	10048 <WsfTrace>
   16f3a:	2012      	movs	r0, #18
   16f3c:	e7e9      	b.n	16f12 <attsCsfActClientState+0x2e>
    BYTES_TO_UINT16(uuid, (pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN + 4));
   16f3e:	7bb2      	ldrb	r2, [r6, #14]
   16f40:	7b73      	ldrb	r3, [r6, #13]
   16f42:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    if (uuid == ATT_UUID_DATABASE_HASH)
   16f46:	b29b      	uxth	r3, r3
   16f48:	f642 322a 	movw	r2, #11050	; 0x2b2a
   16f4c:	4293      	cmp	r3, r2
   16f4e:	d1df      	bne.n	16f10 <attsCsfActClientState+0x2c>
      if (attsCsfCb.isHashUpdating)
   16f50:	7b3b      	ldrb	r3, [r7, #12]
   16f52:	2b00      	cmp	r3, #0
   16f54:	d0dc      	beq.n	16f10 <attsCsfActClientState+0x2c>
        pRec->changeAwareState = ATTS_CLIENT_CHANGE_AWARE_DB_READ_PENDING;
   16f56:	444f      	add	r7, r9
   16f58:	2202      	movs	r2, #2
        ATT_TRACE_INFO2("ConnId %d change aware state is %d", handle + 1,
   16f5a:	4816      	ldr	r0, [pc, #88]	; (16fb4 <attsCsfActClientState+0xd0>)
        pRec->changeAwareState = ATTS_CLIENT_CHANGE_AWARE_DB_READ_PENDING;
   16f5c:	707a      	strb	r2, [r7, #1]
        ATT_TRACE_INFO2("ConnId %d change aware state is %d", handle + 1,
   16f5e:	1c69      	adds	r1, r5, #1
   16f60:	f7f9 f872 	bl	10048 <WsfTrace>
   16f64:	e7d4      	b.n	16f10 <attsCsfActClientState+0x2c>
      pRec->changeAwareState = ATTS_CLIENT_CHANGE_PENDING_AWARE;
   16f66:	2201      	movs	r2, #1
      ATT_TRACE_INFO2("ConnId %d change aware state is %d", handle + 1,
   16f68:	4812      	ldr	r0, [pc, #72]	; (16fb4 <attsCsfActClientState+0xd0>)
      pRec->changeAwareState = ATTS_CLIENT_CHANGE_PENDING_AWARE;
   16f6a:	f888 2001 	strb.w	r2, [r8, #1]
      ATT_TRACE_INFO2("ConnId %d change aware state is %d", handle + 1,
   16f6e:	18a9      	adds	r1, r5, r2
   16f70:	f7f9 f86a 	bl	10048 <WsfTrace>
    if ((opcode & ATT_PDU_MASK_COMMAND) ||
   16f74:	f817 3015 	ldrb.w	r3, [r7, r5, lsl #1]
   16f78:	07db      	lsls	r3, r3, #31
   16f7a:	d4ce      	bmi.n	16f1a <attsCsfActClientState+0x36>
   16f7c:	e7c6      	b.n	16f0c <attsCsfActClientState+0x28>
    return err;
   16f7e:	2000      	movs	r0, #0
}
   16f80:	4770      	bx	lr
    if ((opcode & ATT_PDU_MASK_COMMAND) == 0)
   16f82:	f011 0240 	ands.w	r2, r1, #64	; 0x40
   16f86:	d1c8      	bne.n	16f1a <attsCsfActClientState+0x36>
      ATT_TRACE_INFO2("ConnId %d change aware state is %d", handle + 1, ATTS_CLIENT_CHANGE_AWARE);
   16f88:	f100 0a01 	add.w	sl, r0, #1
      pRec->changeAwareState = ATTS_CLIENT_CHANGE_AWARE;
   16f8c:	f888 2001 	strb.w	r2, [r8, #1]
      ATT_TRACE_INFO2("ConnId %d change aware state is %d", handle + 1, ATTS_CLIENT_CHANGE_AWARE);
   16f90:	4808      	ldr	r0, [pc, #32]	; (16fb4 <attsCsfActClientState+0xd0>)
   16f92:	4651      	mov	r1, sl
   16f94:	f7f9 f858 	bl	10048 <WsfTrace>
      if (attsCsfCb.writeCback != NULL)
   16f98:	68bb      	ldr	r3, [r7, #8]
   16f9a:	2b00      	cmp	r3, #0
   16f9c:	d0b6      	beq.n	16f0c <attsCsfActClientState+0x28>
        attsCsfCb.writeCback(handle + 1, pRec->changeAwareState, &pRec->csf);
   16f9e:	f898 1001 	ldrb.w	r1, [r8, #1]
   16fa2:	fa5f f08a 	uxtb.w	r0, sl
   16fa6:	4642      	mov	r2, r8
   16fa8:	4798      	blx	r3
   16faa:	e7af      	b.n	16f0c <attsCsfActClientState+0x28>
   16fac:	10005758 	.word	0x10005758
   16fb0:	0002022c 	.word	0x0002022c
   16fb4:	00020208 	.word	0x00020208

00016fb8 <attsIndMsgCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsIndMsgCback(attsApiMsg_t *pMsg)
{
   16fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  attsIndCcb_t   *pCcb;

  /* get CCB and verify connection still in use */
  if ((pCcb = attsIndCcbByConnId((dmConnId_t) pMsg->hdr.param)) == NULL)
   16fbc:	7804      	ldrb	r4, [r0, #0]
{
   16fbe:	b082      	sub	sp, #8
   16fc0:	4605      	mov	r5, r0
  if (DmConnInUse(connId))
   16fc2:	4620      	mov	r0, r4
   16fc4:	f002 fb42 	bl	1964c <DmConnInUse>
   16fc8:	2800      	cmp	r0, #0
   16fca:	d03b      	beq.n	17044 <attsIndMsgCback+0x8c>
    /* ignore if connection not in use */
    return;
  }

  /* if an API message to send packet */
  if (pMsg->hdr.event == ATTS_MSG_API_VALUE_IND_NTF)
   16fcc:	78ab      	ldrb	r3, [r5, #2]
   16fce:	2b21      	cmp	r3, #33	; 0x21
    return &attsIndCb.ccb[connId - 1];
   16fd0:	f104 34ff 	add.w	r4, r4, #4294967295
  if (pMsg->hdr.event == ATTS_MSG_API_VALUE_IND_NTF)
   16fd4:	d004      	beq.n	16fe0 <attsIndMsgCback+0x28>
    {
      attsSetupMsg(pCcb, (dmConnId_t) pMsg->hdr.param, pMsg->pPkt);
    }
  }
  /* else if indication timeout */
  else if (pMsg->hdr.event == ATTS_MSG_IND_TIMEOUT)
   16fd6:	2b22      	cmp	r3, #34	; 0x22
   16fd8:	d01c      	beq.n	17014 <attsIndMsgCback+0x5c>
      attsExecCallback((dmConnId_t) pMsg->hdr.param, pCcb->pendIndHandle, ATT_ERR_TIMEOUT);
      pCcb->pendIndHandle = ATT_HANDLE_NONE;
      pCcb->pMainCcb->control |= ATT_CCB_STATUS_TX_TIMEOUT;
    }
  }
}
   16fda:	b002      	add	sp, #8
   16fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (attsPendIndNtfHandle(pCcb, pMsg->pPkt))
   16fe0:	686b      	ldr	r3, [r5, #4]
  if (opcode == ATT_PDU_VALUE_IND)
   16fe2:	7a1a      	ldrb	r2, [r3, #8]
   16fe4:	2a1d      	cmp	r2, #29
   16fe6:	d049      	beq.n	1707c <attsIndMsgCback+0xc4>
    if (pCcb->pendNtfHandle[i] != ATT_HANDLE_NONE)
   16fe8:	4939      	ldr	r1, [pc, #228]	; (170d0 <attsIndMsgCback+0x118>)
   16fea:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   16fee:	eb01 0484 	add.w	r4, r1, r4, lsl #2
   16ff2:	8b22      	ldrh	r2, [r4, #24]
   16ff4:	2a00      	cmp	r2, #0
   16ff6:	d02f      	beq.n	17058 <attsIndMsgCback+0xa0>
  handle = pPkt->handle;
   16ff8:	885a      	ldrh	r2, [r3, #2]
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
   16ffa:	7828      	ldrb	r0, [r5, #0]
   16ffc:	2300      	movs	r3, #0
   16ffe:	9300      	str	r3, [sp, #0]
   17000:	210f      	movs	r1, #15
   17002:	2372      	movs	r3, #114	; 0x72
   17004:	f001 fccc 	bl	189a0 <attExecCallback>
      WsfMsgFree(pMsg->pPkt);
   17008:	6868      	ldr	r0, [r5, #4]
}
   1700a:	b002      	add	sp, #8
   1700c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      WsfMsgFree(pMsg->pPkt);
   17010:	f7f8 bca2 	b.w	f958 <WsfMsgFree>
    if (pCcb->outIndHandle != ATT_HANDLE_NONE)
   17014:	4b2e      	ldr	r3, [pc, #184]	; (170d0 <attsIndMsgCback+0x118>)
   17016:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1701a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   1701e:	8aa3      	ldrh	r3, [r4, #20]
   17020:	2b00      	cmp	r3, #0
   17022:	d0da      	beq.n	16fda <attsIndMsgCback+0x22>
      pCcb->outIndHandle = ATT_HANDLE_NONE;
   17024:	2600      	movs	r6, #0
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
   17026:	8ae2      	ldrh	r2, [r4, #22]
   17028:	7828      	ldrb	r0, [r5, #0]
   1702a:	9600      	str	r6, [sp, #0]
   1702c:	2371      	movs	r3, #113	; 0x71
      pCcb->outIndHandle = ATT_HANDLE_NONE;
   1702e:	82a6      	strh	r6, [r4, #20]
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
   17030:	210f      	movs	r1, #15
   17032:	f001 fcb5 	bl	189a0 <attExecCallback>
      pCcb->pMainCcb->control |= ATT_CCB_STATUS_TX_TIMEOUT;
   17036:	6922      	ldr	r2, [r4, #16]
      pCcb->pendIndHandle = ATT_HANDLE_NONE;
   17038:	82e6      	strh	r6, [r4, #22]
      pCcb->pMainCcb->control |= ATT_CCB_STATUS_TX_TIMEOUT;
   1703a:	7f53      	ldrb	r3, [r2, #29]
   1703c:	f043 0304 	orr.w	r3, r3, #4
   17040:	7753      	strb	r3, [r2, #29]
   17042:	e7ca      	b.n	16fda <attsIndMsgCback+0x22>
    ATT_TRACE_WARN1("atts ccb not in use: %d", connId);
   17044:	4823      	ldr	r0, [pc, #140]	; (170d4 <attsIndMsgCback+0x11c>)
   17046:	4621      	mov	r1, r4
   17048:	f7f8 fffe 	bl	10048 <WsfTrace>
    if (pMsg->hdr.event == ATTS_MSG_API_VALUE_IND_NTF)
   1704c:	78ab      	ldrb	r3, [r5, #2]
   1704e:	2b21      	cmp	r3, #33	; 0x21
   17050:	d0da      	beq.n	17008 <attsIndMsgCback+0x50>
}
   17052:	b002      	add	sp, #8
   17054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   17058:	6922      	ldr	r2, [r4, #16]
      attsSetupMsg(pCcb, (dmConnId_t) pMsg->hdr.param, pMsg->pPkt);
   1705a:	882e      	ldrh	r6, [r5, #0]
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   1705c:	8b11      	ldrh	r1, [r2, #24]
   1705e:	881a      	ldrh	r2, [r3, #0]
  handle = pPkt->handle;
   17060:	885d      	ldrh	r5, [r3, #2]
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   17062:	2004      	movs	r0, #4
   17064:	f7fc fb68 	bl	13738 <L2cDataReq>
  else if (!(pCcb->pMainCcb->control & ATT_CCB_STATUS_FLOW_DISABLED))
   17068:	6923      	ldr	r3, [r4, #16]
   1706a:	7f5b      	ldrb	r3, [r3, #29]
   1706c:	f013 0302 	ands.w	r3, r3, #2
   17070:	d026      	beq.n	170c0 <attsIndMsgCback+0x108>
    if (pCcb->pendNtfHandle[i] == ATT_HANDLE_NONE)
   17072:	8b23      	ldrh	r3, [r4, #24]
   17074:	2b00      	cmp	r3, #0
   17076:	d1b0      	bne.n	16fda <attsIndMsgCback+0x22>
      pCcb->pendNtfHandle[i] = handle;
   17078:	8325      	strh	r5, [r4, #24]
      break;
   1707a:	e7ae      	b.n	16fda <attsIndMsgCback+0x22>
    return (pCcb->pendIndHandle == ATT_HANDLE_NONE) ? FALSE : TRUE;
   1707c:	4f14      	ldr	r7, [pc, #80]	; (170d0 <attsIndMsgCback+0x118>)
   1707e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   17082:	ea4f 0884 	mov.w	r8, r4, lsl #2
   17086:	eb07 0484 	add.w	r4, r7, r4, lsl #2
    if (attsPendIndNtfHandle(pCcb, pMsg->pPkt))
   1708a:	8ae6      	ldrh	r6, [r4, #22]
   1708c:	2e00      	cmp	r6, #0
   1708e:	d1b3      	bne.n	16ff8 <attsIndMsgCback+0x40>
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   17090:	6922      	ldr	r2, [r4, #16]
  handle = pPkt->handle;
   17092:	885d      	ldrh	r5, [r3, #2]
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   17094:	8b11      	ldrh	r1, [r2, #24]
   17096:	881a      	ldrh	r2, [r3, #0]
   17098:	2004      	movs	r0, #4
   1709a:	f7fc fb4d 	bl	13738 <L2cDataReq>
    WsfTimerStartSec(&pCcb->outIndTimer, pAttCfg->transTimeout);
   1709e:	4b0e      	ldr	r3, [pc, #56]	; (170d8 <attsIndMsgCback+0x120>)
    pCcb->outIndHandle = pCcb->pendIndHandle = handle;
   170a0:	4447      	add	r7, r8
   170a2:	f365 060f 	bfi	r6, r5, #0, #16
    WsfTimerStartSec(&pCcb->outIndTimer, pAttCfg->transTimeout);
   170a6:	681b      	ldr	r3, [r3, #0]
    pCcb->outIndHandle = pCcb->pendIndHandle = handle;
   170a8:	f365 461f 	bfi	r6, r5, #16, #16
    pCcb->outIndTimer.msg.event = ATTS_MSG_IND_TIMEOUT;
   170ac:	2222      	movs	r2, #34	; 0x22
    pCcb->outIndHandle = pCcb->pendIndHandle = handle;
   170ae:	617e      	str	r6, [r7, #20]
    pCcb->outIndTimer.msg.event = ATTS_MSG_IND_TIMEOUT;
   170b0:	72a2      	strb	r2, [r4, #10]
    WsfTimerStartSec(&pCcb->outIndTimer, pAttCfg->transTimeout);
   170b2:	7999      	ldrb	r1, [r3, #6]
   170b4:	4620      	mov	r0, r4
}
   170b6:	b002      	add	sp, #8
   170b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    WsfTimerStartSec(&pCcb->outIndTimer, pAttCfg->transTimeout);
   170bc:	f7f8 be9e 	b.w	fdfc <WsfTimerStartSec>
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
   170c0:	9300      	str	r3, [sp, #0]
   170c2:	462a      	mov	r2, r5
   170c4:	210f      	movs	r1, #15
   170c6:	b2f0      	uxtb	r0, r6
   170c8:	f001 fc6a 	bl	189a0 <attExecCallback>
}
   170cc:	e785      	b.n	16fda <attsIndMsgCback+0x22>
   170ce:	bf00      	nop
   170d0:	10005768 	.word	0x10005768
   170d4:	00020264 	.word	0x00020264
   170d8:	10002b0c 	.word	0x10002b0c

000170dc <attsIndConnCback>:
  else if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
   170dc:	788b      	ldrb	r3, [r1, #2]
   170de:	2b28      	cmp	r3, #40	; 0x28
   170e0:	d000      	beq.n	170e4 <attsIndConnCback+0x8>
   170e2:	4770      	bx	lr
{
   170e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (pDmEvt->connClose.hdr.status == HCI_SUCCESS)
   170e8:	78cb      	ldrb	r3, [r1, #3]
{
   170ea:	b084      	sub	sp, #16
   170ec:	4604      	mov	r4, r0
    if (pDmEvt->connClose.hdr.status == HCI_SUCCESS)
   170ee:	b1fb      	cbz	r3, 17130 <attsIndConnCback+0x54>
      status = pDmEvt->connClose.hdr.status + ATT_HCI_ERR_BASE;
   170f0:	3320      	adds	r3, #32
   170f2:	b2db      	uxtb	r3, r3
    pIndCcb = &attsIndCb.ccb[pCcb->connId - 1];
   170f4:	7f20      	ldrb	r0, [r4, #28]
    if (pIndCcb->outIndHandle != ATT_HANDLE_NONE)
   170f6:	4d1c      	ldr	r5, [pc, #112]	; (17168 <attsIndConnCback+0x8c>)
    pIndCcb = &attsIndCb.ccb[pCcb->connId - 1];
   170f8:	1e46      	subs	r6, r0, #1
    if (pIndCcb->outIndHandle != ATT_HANDLE_NONE)
   170fa:	ebc6 08c6 	rsb	r8, r6, r6, lsl #3
   170fe:	eb05 0888 	add.w	r8, r5, r8, lsl #2
   17102:	00f7      	lsls	r7, r6, #3
   17104:	f8b8 2014 	ldrh.w	r2, [r8, #20]
   17108:	bb22      	cbnz	r2, 17154 <attsIndConnCback+0x78>
  if (pCcb->pendIndHandle != ATT_HANDLE_NONE)
   1710a:	1bbc      	subs	r4, r7, r6
   1710c:	eb05 0484 	add.w	r4, r5, r4, lsl #2
   17110:	8ae2      	ldrh	r2, [r4, #22]
   17112:	b98a      	cbnz	r2, 17138 <attsIndConnCback+0x5c>
    if (pCcb->pendNtfHandle[i] != ATT_HANDLE_NONE)
   17114:	1bbe      	subs	r6, r7, r6
   17116:	eb05 0586 	add.w	r5, r5, r6, lsl #2
   1711a:	8b2a      	ldrh	r2, [r5, #24]
   1711c:	b12a      	cbz	r2, 1712a <attsIndConnCback+0x4e>
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
   1711e:	2400      	movs	r4, #0
   17120:	9400      	str	r4, [sp, #0]
   17122:	210f      	movs	r1, #15
   17124:	f001 fc3c 	bl	189a0 <attExecCallback>
      pCcb->pendNtfHandle[i] = ATT_HANDLE_NONE;
   17128:	832c      	strh	r4, [r5, #24]
}
   1712a:	b004      	add	sp, #16
   1712c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      status = pDmEvt->connClose.reason + ATT_HCI_ERR_BASE;
   17130:	7a0b      	ldrb	r3, [r1, #8]
   17132:	3320      	adds	r3, #32
   17134:	b2db      	uxtb	r3, r3
   17136:	e7dd      	b.n	170f4 <attsIndConnCback+0x18>
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
   17138:	f04f 0800 	mov.w	r8, #0
   1713c:	f8cd 8000 	str.w	r8, [sp]
   17140:	210f      	movs	r1, #15
   17142:	9303      	str	r3, [sp, #12]
   17144:	9002      	str	r0, [sp, #8]
   17146:	f001 fc2b 	bl	189a0 <attExecCallback>
    pCcb->pendIndHandle = ATT_HANDLE_NONE;
   1714a:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
   1714e:	f8a4 8016 	strh.w	r8, [r4, #22]
   17152:	e7df      	b.n	17114 <attsIndConnCback+0x38>
      WsfTimerStop(&pIndCcb->outIndTimer);
   17154:	4640      	mov	r0, r8
   17156:	9302      	str	r3, [sp, #8]
   17158:	f7f8 fed6 	bl	ff08 <WsfTimerStop>
      pIndCcb->outIndHandle = ATT_HANDLE_NONE;
   1715c:	2200      	movs	r2, #0
   1715e:	f8a8 2014 	strh.w	r2, [r8, #20]
    attsIndNtfCallback(pCcb->connId, pIndCcb, status);
   17162:	7f20      	ldrb	r0, [r4, #28]
   17164:	9b02      	ldr	r3, [sp, #8]
   17166:	e7d0      	b.n	1710a <attsIndConnCback+0x2e>
   17168:	10005768 	.word	0x10005768

0001716c <attsIndCtrlCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsIndCtrlCback(wsfMsgHdr_t *pMsg)
{
   1716c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  attsIndCcb_t   *pCcb;

  /* note this function is currently only called when flow is enabled */

  /* get CCB */
  if ((pCcb = attsIndCcbByConnId((dmConnId_t) pMsg->param)) != NULL)
   17170:	7804      	ldrb	r4, [r0, #0]
{
   17172:	b084      	sub	sp, #16
   17174:	4606      	mov	r6, r0
  if (DmConnInUse(connId))
   17176:	4620      	mov	r0, r4
   17178:	f002 fa68 	bl	1964c <DmConnInUse>
   1717c:	b328      	cbz	r0, 171ca <attsIndCtrlCback+0x5e>
    return &attsIndCb.ccb[connId - 1];
   1717e:	3c01      	subs	r4, #1
  if (pCcb->pendIndHandle != ATT_HANDLE_NONE)
   17180:	4d15      	ldr	r5, [pc, #84]	; (171d8 <attsIndCtrlCback+0x6c>)
  {
    /* call pending indication and notification callback */
    attsIndNtfCallback((dmConnId_t) pMsg->param, pCcb, ATT_SUCCESS);
   17182:	7830      	ldrb	r0, [r6, #0]
  if (pCcb->pendIndHandle != ATT_HANDLE_NONE)
   17184:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   17188:	eb05 0787 	add.w	r7, r5, r7, lsl #2
   1718c:	00e6      	lsls	r6, r4, #3
   1718e:	8afa      	ldrh	r2, [r7, #22]
   17190:	b972      	cbnz	r2, 171b0 <attsIndCtrlCback+0x44>
    if (pCcb->pendNtfHandle[i] != ATT_HANDLE_NONE)
   17192:	1b34      	subs	r4, r6, r4
   17194:	eb05 0584 	add.w	r5, r5, r4, lsl #2
   17198:	8b2a      	ldrh	r2, [r5, #24]
   1719a:	b132      	cbz	r2, 171aa <attsIndCtrlCback+0x3e>
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
   1719c:	2400      	movs	r4, #0
   1719e:	9400      	str	r4, [sp, #0]
   171a0:	4623      	mov	r3, r4
   171a2:	210f      	movs	r1, #15
   171a4:	f001 fbfc 	bl	189a0 <attExecCallback>
      pCcb->pendNtfHandle[i] = ATT_HANDLE_NONE;
   171a8:	832c      	strh	r4, [r5, #24]
  }
}
   171aa:	b004      	add	sp, #16
   171ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
   171b0:	f04f 0800 	mov.w	r8, #0
   171b4:	f8cd 8000 	str.w	r8, [sp]
   171b8:	4643      	mov	r3, r8
   171ba:	210f      	movs	r1, #15
   171bc:	9003      	str	r0, [sp, #12]
   171be:	f001 fbef 	bl	189a0 <attExecCallback>
    pCcb->pendIndHandle = ATT_HANDLE_NONE;
   171c2:	9803      	ldr	r0, [sp, #12]
   171c4:	f8a7 8016 	strh.w	r8, [r7, #22]
   171c8:	e7e3      	b.n	17192 <attsIndCtrlCback+0x26>
    ATT_TRACE_WARN1("atts ccb not in use: %d", connId);
   171ca:	4804      	ldr	r0, [pc, #16]	; (171dc <attsIndCtrlCback+0x70>)
   171cc:	4621      	mov	r1, r4
}
   171ce:	b004      	add	sp, #16
   171d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ATT_TRACE_WARN1("atts ccb not in use: %d", connId);
   171d4:	f7f8 bf38 	b.w	10048 <WsfTrace>
   171d8:	10005768 	.word	0x10005768
   171dc:	00020264 	.word	0x00020264

000171e0 <attsProcValueCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcValueCnf(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   171e0:	b570      	push	{r4, r5, r6, lr}
  attsIndCcb_t    *pIndCcb;

  /* get server indication CCB */
  if ((pIndCcb = attsIndCcbByConnId(pCcb->connId)) == NULL)
   171e2:	7f04      	ldrb	r4, [r0, #28]
{
   171e4:	b082      	sub	sp, #8
   171e6:	4605      	mov	r5, r0
  if (DmConnInUse(connId))
   171e8:	4620      	mov	r0, r4
   171ea:	f002 fa2f 	bl	1964c <DmConnInUse>
   171ee:	b1d8      	cbz	r0, 17228 <attsProcValueCnf+0x48>
  {
    return;
  }

  /* if an outstanding indication */
  if (pIndCcb->outIndHandle != ATT_HANDLE_NONE)
   171f0:	4911      	ldr	r1, [pc, #68]	; (17238 <attsProcValueCnf+0x58>)
    return &attsIndCb.ccb[connId - 1];
   171f2:	3c01      	subs	r4, #1
  if (pIndCcb->outIndHandle != ATT_HANDLE_NONE)
   171f4:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   171f8:	eb01 0484 	add.w	r4, r1, r4, lsl #2
   171fc:	8aa3      	ldrh	r3, [r4, #20]
   171fe:	b90b      	cbnz	r3, 17204 <attsProcValueCnf+0x24>
    {
      attsExecCallback(pCcb->connId, pIndCcb->pendIndHandle, ATT_SUCCESS);
      pIndCcb->pendIndHandle = ATT_HANDLE_NONE;
    }
  }
}
   17200:	b002      	add	sp, #8
   17202:	bd70      	pop	{r4, r5, r6, pc}
    pIndCcb->outIndHandle = ATT_HANDLE_NONE;
   17204:	2300      	movs	r3, #0
   17206:	82a3      	strh	r3, [r4, #20]
    WsfTimerStop(&pIndCcb->outIndTimer);
   17208:	4620      	mov	r0, r4
   1720a:	f7f8 fe7d 	bl	ff08 <WsfTimerStop>
    if (!(pCcb->control & ATT_CCB_STATUS_FLOW_DISABLED))
   1720e:	7f6b      	ldrb	r3, [r5, #29]
   17210:	f013 0602 	ands.w	r6, r3, #2
   17214:	d1f4      	bne.n	17200 <attsProcValueCnf+0x20>
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
   17216:	8ae2      	ldrh	r2, [r4, #22]
   17218:	7f28      	ldrb	r0, [r5, #28]
   1721a:	9600      	str	r6, [sp, #0]
   1721c:	4633      	mov	r3, r6
   1721e:	210f      	movs	r1, #15
   17220:	f001 fbbe 	bl	189a0 <attExecCallback>
      pIndCcb->pendIndHandle = ATT_HANDLE_NONE;
   17224:	82e6      	strh	r6, [r4, #22]
   17226:	e7eb      	b.n	17200 <attsProcValueCnf+0x20>
    ATT_TRACE_WARN1("atts ccb not in use: %d", connId);
   17228:	4804      	ldr	r0, [pc, #16]	; (1723c <attsProcValueCnf+0x5c>)
   1722a:	4621      	mov	r1, r4
}
   1722c:	b002      	add	sp, #8
   1722e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ATT_TRACE_WARN1("atts ccb not in use: %d", connId);
   17232:	f7f8 bf09 	b.w	10048 <WsfTrace>
   17236:	bf00      	nop
   17238:	10005768 	.word	0x10005768
   1723c:	00020264 	.word	0x00020264

00017240 <AttsIndInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsIndInit(void)
{
   17240:	b410      	push	{r4}

  /* Initialize control block CCBs */
  for (i = 0, pCcb = attsIndCb.ccb; i < DM_CONN_MAX; i++, pCcb++)
  {
    /* set pointer to main CCB */
    pCcb->pMainCcb = &attCb.ccb[i];
   17242:	4b0e      	ldr	r3, [pc, #56]	; (1727c <AttsIndInit+0x3c>)

    /* initialize timer */
    pCcb->outIndTimer.handlerId = attCb.handlerId;
   17244:	4a0e      	ldr	r2, [pc, #56]	; (17280 <AttsIndInit+0x40>)
    pCcb->outIndTimer.msg.param = i + 1;  /* param stores the conn id */
  }

  /* set up callback interface */
  attsCb.pInd = &attsIndFcnIf;
   17246:	480f      	ldr	r0, [pc, #60]	; (17284 <AttsIndInit+0x44>)
    pCcb->outIndTimer.handlerId = attCb.handlerId;
   17248:	f892 107c 	ldrb.w	r1, [r2, #124]	; 0x7c
    pCcb->pMainCcb = &attCb.ccb[i];
   1724c:	611a      	str	r2, [r3, #16]
    pCcb->outIndTimer.msg.param = i + 1;  /* param stores the conn id */
   1724e:	2401      	movs	r4, #1
   17250:	811c      	strh	r4, [r3, #8]
    pCcb->pMainCcb = &attCb.ccb[i];
   17252:	f102 0424 	add.w	r4, r2, #36	; 0x24
   17256:	62dc      	str	r4, [r3, #44]	; 0x2c
    pCcb->outIndTimer.msg.param = i + 1;  /* param stores the conn id */
   17258:	2402      	movs	r4, #2
    pCcb->outIndTimer.handlerId = attCb.handlerId;
   1725a:	7319      	strb	r1, [r3, #12]
    pCcb->pMainCcb = &attCb.ccb[i];
   1725c:	3248      	adds	r2, #72	; 0x48
    pCcb->outIndTimer.handlerId = attCb.handlerId;
   1725e:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
    pCcb->outIndTimer.msg.param = i + 1;  /* param stores the conn id */
   17262:	849c      	strh	r4, [r3, #36]	; 0x24
   17264:	f04f 0c03 	mov.w	ip, #3
  attsCb.pInd = &attsIndFcnIf;
   17268:	4c07      	ldr	r4, [pc, #28]	; (17288 <AttsIndInit+0x48>)
    pCcb->outIndTimer.handlerId = attCb.handlerId;
   1726a:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
  attsCb.pInd = &attsIndFcnIf;
   1726e:	6084      	str	r4, [r0, #8]
    pCcb->outIndTimer.msg.param = i + 1;  /* param stores the conn id */
   17270:	f8a3 c040 	strh.w	ip, [r3, #64]	; 0x40
}
   17274:	f85d 4b04 	ldr.w	r4, [sp], #4
    pCcb->pMainCcb = &attCb.ccb[i];
   17278:	649a      	str	r2, [r3, #72]	; 0x48
}
   1727a:	4770      	bx	lr
   1727c:	10005768 	.word	0x10005768
   17280:	100057d4 	.word	0x100057d4
   17284:	100057bc 	.word	0x100057bc
   17288:	0002027c 	.word	0x0002027c

0001728c <attsL2cCtrlCback>:
 */
/*************************************************************************************************/
static void attsL2cCtrlCback(wsfMsgHdr_t *pMsg)
{
  /* pass event to indication interface */
  (*attsCb.pInd->ctrlCback)(pMsg);
   1728c:	4b01      	ldr	r3, [pc, #4]	; (17294 <attsL2cCtrlCback+0x8>)
   1728e:	689b      	ldr	r3, [r3, #8]
   17290:	685b      	ldr	r3, [r3, #4]
   17292:	4718      	bx	r3
   17294:	100057bc 	.word	0x100057bc

00017298 <attsConnCback>:
  if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
   17298:	788b      	ldrb	r3, [r1, #2]
   1729a:	2b28      	cmp	r3, #40	; 0x28
{
   1729c:	b570      	push	{r4, r5, r6, lr}
   1729e:	460d      	mov	r5, r1
   172a0:	4604      	mov	r4, r0
  if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
   172a2:	d009      	beq.n	172b8 <attsConnCback+0x20>
  (*attsCb.pInd->connCback)(pCcb, pDmEvt);
   172a4:	4b0c      	ldr	r3, [pc, #48]	; (172d8 <attsConnCback+0x40>)
   172a6:	689b      	ldr	r3, [r3, #8]
   172a8:	4629      	mov	r1, r5
   172aa:	4620      	mov	r0, r4
   172ac:	68db      	ldr	r3, [r3, #12]
}
   172ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  (*attsCb.pInd->connCback)(pCcb, pDmEvt);
   172b2:	4718      	bx	r3
{
  void *pBuf;

  while ((pBuf = WsfQueueDeq(&pCcb->prepWriteQueue)) != NULL)
  {
    WsfBufFree(pBuf);
   172b4:	f7f8 fb18 	bl	f8e8 <WsfBufFree>
  while ((pBuf = WsfQueueDeq(&pCcb->prepWriteQueue)) != NULL)
   172b8:	4620      	mov	r0, r4
   172ba:	f7f8 fcfb 	bl	fcb4 <WsfQueueDeq>
   172be:	2800      	cmp	r0, #0
   172c0:	d1f8      	bne.n	172b4 <attsConnCback+0x1c>
    if (DmConnCheckIdle(pCcb->connId) & DM_IDLE_ATTS_DISC)
   172c2:	7f20      	ldrb	r0, [r4, #28]
   172c4:	f002 fa40 	bl	19748 <DmConnCheckIdle>
   172c8:	0743      	lsls	r3, r0, #29
   172ca:	d5eb      	bpl.n	172a4 <attsConnCback+0xc>
      WsfTimerStop(&pCcb->idleTimer);
   172cc:	f104 0008 	add.w	r0, r4, #8
   172d0:	f7f8 fe1a 	bl	ff08 <WsfTimerStop>
   172d4:	e7e6      	b.n	172a4 <attsConnCback+0xc>
   172d6:	bf00      	nop
   172d8:	100057bc 	.word	0x100057bc

000172dc <attsDataCback>:
{
   172dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   172e0:	4680      	mov	r8, r0
   172e2:	4689      	mov	r9, r1
   172e4:	4614      	mov	r4, r2
  if ((pCcb = attCcbByHandle(handle)) == NULL)
   172e6:	f001 fb19 	bl	1891c <attCcbByHandle>
   172ea:	b180      	cbz	r0, 1730e <attsDataCback+0x32>
  opcode = *(pPacket + L2C_PAYLOAD_START);
   172ec:	7a27      	ldrb	r7, [r4, #8]
  if ((opcode <= ATT_PDU_WRITE_REQ) ||
   172ee:	2f12      	cmp	r7, #18
   172f0:	4605      	mov	r5, r0
   172f2:	d90e      	bls.n	17312 <attsDataCback+0x36>
   172f4:	f1a7 0316 	sub.w	r3, r7, #22
   172f8:	2b08      	cmp	r3, #8
   172fa:	d90a      	bls.n	17312 <attsDataCback+0x36>
  else if (opcode == ATT_PDU_WRITE_CMD)
   172fc:	2f52      	cmp	r7, #82	; 0x52
   172fe:	d048      	beq.n	17392 <attsDataCback+0xb6>
  else if (opcode == ATT_PDU_SIGNED_WRITE_CMD)
   17300:	2fd2      	cmp	r7, #210	; 0xd2
   17302:	d04f      	beq.n	173a4 <attsDataCback+0xc8>
  if (pCcb->control & ATT_CCB_STATUS_RSP_PENDING)
   17304:	f890 a01d 	ldrb.w	sl, [r0, #29]
   17308:	f01a 0a08 	ands.w	sl, sl, #8
   1730c:	d009      	beq.n	17322 <attsDataCback+0x46>
}
   1730e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (pCcb->control & ATT_CCB_STATUS_RSP_PENDING)
   17312:	7f6b      	ldrb	r3, [r5, #29]
   17314:	0718      	lsls	r0, r3, #28
    method = ATT_OPCODE_2_METHOD(opcode);
   17316:	ea4f 0a67 	mov.w	sl, r7, asr #1
  if (pCcb->control & ATT_CCB_STATUS_RSP_PENDING)
   1731a:	d502      	bpl.n	17322 <attsDataCback+0x46>
    if (method != ATT_METHOD_VALUE_CNF)
   1731c:	f1ba 0f0f 	cmp.w	sl, #15
   17320:	d1f5      	bne.n	1730e <attsDataCback+0x32>
  err = attsCsfActClientState(handle, opcode, pPacket);
   17322:	4622      	mov	r2, r4
   17324:	4639      	mov	r1, r7
   17326:	4640      	mov	r0, r8
   17328:	f7ff fddc 	bl	16ee4 <attsCsfActClientState>
  if (err)
   1732c:	4606      	mov	r6, r0
   1732e:	b1f0      	cbz	r0, 1736e <attsDataCback+0x92>
    BYTES_TO_UINT16(attHandle, pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN);
   17330:	7aa2      	ldrb	r2, [r4, #10]
   17332:	7a63      	ldrb	r3, [r4, #9]
   17334:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   17338:	b29c      	uxth	r4, r3
  if (err && (opcode != ATT_PDU_MTU_REQ) && (opcode != ATT_PDU_VALUE_CNF) &&
   1733a:	2f02      	cmp	r7, #2
   1733c:	d0e7      	beq.n	1730e <attsDataCback+0x32>
   1733e:	2f1e      	cmp	r7, #30
   17340:	d0e5      	beq.n	1730e <attsDataCback+0x32>
   17342:	067b      	lsls	r3, r7, #25
   17344:	d4e3      	bmi.n	1730e <attsDataCback+0x32>
  if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_ERR_RSP_LEN)) != NULL)
   17346:	200d      	movs	r0, #13
   17348:	f001 fb46 	bl	189d8 <attMsgAlloc>
   1734c:	4603      	mov	r3, r0
   1734e:	2800      	cmp	r0, #0
   17350:	d0dd      	beq.n	1730e <attsDataCback+0x32>
    UINT16_TO_BSTREAM(p, attHandle);
   17352:	7284      	strb	r4, [r0, #10]
   17354:	0a22      	lsrs	r2, r4, #8
    UINT8_TO_BSTREAM(p, ATT_PDU_ERR_RSP);
   17356:	2401      	movs	r4, #1
    UINT16_TO_BSTREAM(p, attHandle);
   17358:	72c2      	strb	r2, [r0, #11]
    UINT8_TO_BSTREAM(p, opcode);
   1735a:	7247      	strb	r7, [r0, #9]
    UINT8_TO_BSTREAM(p, reason);
   1735c:	7306      	strb	r6, [r0, #12]
    UINT8_TO_BSTREAM(p, ATT_PDU_ERR_RSP);
   1735e:	721c      	strb	r4, [r3, #8]
    L2cDataReq(L2C_CID_ATT, handle, ATT_ERR_RSP_LEN, pBuf);
   17360:	4641      	mov	r1, r8
   17362:	2205      	movs	r2, #5
}
   17364:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    L2cDataReq(L2C_CID_ATT, handle, ATT_ERR_RSP_LEN, pBuf);
   17368:	2004      	movs	r0, #4
   1736a:	f7fc b9e5 	b.w	13738 <L2cDataReq>
    procFcn = attsProcFcnTbl[method];
   1736e:	4b10      	ldr	r3, [pc, #64]	; (173b0 <attsDataCback+0xd4>)
   17370:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
    if (procFcn != NULL)
   17374:	b153      	cbz	r3, 1738c <attsDataCback+0xb0>
      if (len >= attsMinPduLen[method])
   17376:	4a0f      	ldr	r2, [pc, #60]	; (173b4 <attsDataCback+0xd8>)
   17378:	f812 200a 	ldrb.w	r2, [r2, sl]
   1737c:	454a      	cmp	r2, r9
   1737e:	d80e      	bhi.n	1739e <attsDataCback+0xc2>
        (*procFcn)(pCcb, len, pPacket);
   17380:	4622      	mov	r2, r4
   17382:	4649      	mov	r1, r9
   17384:	4628      	mov	r0, r5
}
   17386:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        (*procFcn)(pCcb, len, pPacket);
   1738a:	4718      	bx	r3
    attHandle = ATT_HANDLE_NONE;
   1738c:	4604      	mov	r4, r0
      err = ATT_ERR_NOT_SUP;
   1738e:	2606      	movs	r6, #6
   17390:	e7d3      	b.n	1733a <attsDataCback+0x5e>
  if (pCcb->control & ATT_CCB_STATUS_RSP_PENDING)
   17392:	7f43      	ldrb	r3, [r0, #29]
   17394:	0719      	lsls	r1, r3, #28
   17396:	d4ba      	bmi.n	1730e <attsDataCback+0x32>
   17398:	f04f 0a0a 	mov.w	sl, #10
   1739c:	e7c1      	b.n	17322 <attsDataCback+0x46>
    attHandle = ATT_HANDLE_NONE;
   1739e:	4634      	mov	r4, r6
        err = ATT_ERR_INVALID_PDU;
   173a0:	2604      	movs	r6, #4
   173a2:	e7ca      	b.n	1733a <attsDataCback+0x5e>
  if (pCcb->control & ATT_CCB_STATUS_RSP_PENDING)
   173a4:	7f43      	ldrb	r3, [r0, #29]
   173a6:	071a      	lsls	r2, r3, #28
   173a8:	d4b1      	bmi.n	1730e <attsDataCback+0x32>
   173aa:	f04f 0a10 	mov.w	sl, #16
   173ae:	e7b8      	b.n	17322 <attsDataCback+0x46>
   173b0:	10002b2c 	.word	0x10002b2c
   173b4:	0002029c 	.word	0x0002029c

000173b8 <attsErrRsp>:
{
   173b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   173bc:	4607      	mov	r7, r0
  if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_ERR_RSP_LEN)) != NULL)
   173be:	200d      	movs	r0, #13
{
   173c0:	460e      	mov	r6, r1
   173c2:	4614      	mov	r4, r2
   173c4:	461d      	mov	r5, r3
  if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_ERR_RSP_LEN)) != NULL)
   173c6:	f001 fb07 	bl	189d8 <attMsgAlloc>
   173ca:	b180      	cbz	r0, 173ee <attsErrRsp+0x36>
   173cc:	4684      	mov	ip, r0
    UINT16_TO_BSTREAM(p, attHandle);
   173ce:	7284      	strb	r4, [r0, #10]
   173d0:	0a23      	lsrs	r3, r4, #8
    UINT8_TO_BSTREAM(p, ATT_PDU_ERR_RSP);
   173d2:	2401      	movs	r4, #1
    UINT16_TO_BSTREAM(p, attHandle);
   173d4:	72c3      	strb	r3, [r0, #11]
    UINT8_TO_BSTREAM(p, opcode);
   173d6:	7246      	strb	r6, [r0, #9]
    UINT8_TO_BSTREAM(p, reason);
   173d8:	7305      	strb	r5, [r0, #12]
    UINT8_TO_BSTREAM(p, ATT_PDU_ERR_RSP);
   173da:	f88c 4008 	strb.w	r4, [ip, #8]
    L2cDataReq(L2C_CID_ATT, handle, ATT_ERR_RSP_LEN, pBuf);
   173de:	4603      	mov	r3, r0
   173e0:	4639      	mov	r1, r7
   173e2:	2205      	movs	r2, #5
}
   173e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    L2cDataReq(L2C_CID_ATT, handle, ATT_ERR_RSP_LEN, pBuf);
   173e8:	2004      	movs	r0, #4
   173ea:	f7fc b9a5 	b.w	13738 <L2cDataReq>
}
   173ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   173f2:	bf00      	nop

000173f4 <attsClearPrepWrites>:
{
   173f4:	b510      	push	{r4, lr}
   173f6:	4604      	mov	r4, r0
  while ((pBuf = WsfQueueDeq(&pCcb->prepWriteQueue)) != NULL)
   173f8:	e001      	b.n	173fe <attsClearPrepWrites+0xa>
    WsfBufFree(pBuf);
   173fa:	f7f8 fa75 	bl	f8e8 <WsfBufFree>
  while ((pBuf = WsfQueueDeq(&pCcb->prepWriteQueue)) != NULL)
   173fe:	4620      	mov	r0, r4
   17400:	f7f8 fc58 	bl	fcb4 <WsfQueueDeq>
   17404:	2800      	cmp	r0, #0
   17406:	d1f8      	bne.n	173fa <attsClearPrepWrites+0x6>
  }
}
   17408:	bd10      	pop	{r4, pc}
   1740a:	bf00      	nop

0001740c <attsDiscBusy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsDiscBusy(attCcb_t *pCcb)
{
   1740c:	b538      	push	{r3, r4, r5, lr}
  if (pAttCfg->discIdleTimeout > 0)
   1740e:	4d0d      	ldr	r5, [pc, #52]	; (17444 <attsDiscBusy+0x38>)
   17410:	682b      	ldr	r3, [r5, #0]
   17412:	681b      	ldr	r3, [r3, #0]
   17414:	b903      	cbnz	r3, 17418 <attsDiscBusy+0xc>
    pCcb->idleTimer.handlerId = attCb.handlerId;
    pCcb->idleTimer.msg.event = ATTS_MSG_IDLE_TIMEOUT;
    pCcb->idleTimer.msg.param = pCcb->connId;
    WsfTimerStartSec(&pCcb->idleTimer, pAttCfg->discIdleTimeout);
  }
}
   17416:	bd38      	pop	{r3, r4, r5, pc}
    DmConnSetIdle(pCcb->connId, DM_IDLE_ATTS_DISC, DM_CONN_BUSY);
   17418:	4604      	mov	r4, r0
   1741a:	2104      	movs	r1, #4
   1741c:	7f00      	ldrb	r0, [r0, #28]
   1741e:	2201      	movs	r2, #1
   17420:	f002 f964 	bl	196ec <DmConnSetIdle>
    pCcb->idleTimer.handlerId = attCb.handlerId;
   17424:	4b08      	ldr	r3, [pc, #32]	; (17448 <attsDiscBusy+0x3c>)
    WsfTimerStartSec(&pCcb->idleTimer, pAttCfg->discIdleTimeout);
   17426:	682a      	ldr	r2, [r5, #0]
    pCcb->idleTimer.handlerId = attCb.handlerId;
   17428:	f893 007c 	ldrb.w	r0, [r3, #124]	; 0x7c
   1742c:	7520      	strb	r0, [r4, #20]
    pCcb->idleTimer.msg.event = ATTS_MSG_IDLE_TIMEOUT;
   1742e:	2120      	movs	r1, #32
    pCcb->idleTimer.msg.param = pCcb->connId;
   17430:	7f23      	ldrb	r3, [r4, #28]
    pCcb->idleTimer.msg.event = ATTS_MSG_IDLE_TIMEOUT;
   17432:	74a1      	strb	r1, [r4, #18]
    WsfTimerStartSec(&pCcb->idleTimer, pAttCfg->discIdleTimeout);
   17434:	6811      	ldr	r1, [r2, #0]
    pCcb->idleTimer.msg.param = pCcb->connId;
   17436:	8223      	strh	r3, [r4, #16]
    WsfTimerStartSec(&pCcb->idleTimer, pAttCfg->discIdleTimeout);
   17438:	f104 0008 	add.w	r0, r4, #8
}
   1743c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    WsfTimerStartSec(&pCcb->idleTimer, pAttCfg->discIdleTimeout);
   17440:	f7f8 bcdc 	b.w	fdfc <WsfTimerStartSec>
   17444:	10002b0c 	.word	0x10002b0c
   17448:	100057d4 	.word	0x100057d4

0001744c <attsProcessDatabaseHashUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcessDatabaseHashUpdate(secCmacMsg_t *pMsg)
{
   1744c:	b530      	push	{r4, r5, lr}
   1744e:	4604      	mov	r4, r0
   17450:	b08b      	sub	sp, #44	; 0x2c
  evt.handle = ATT_HANDLE_NONE;
  evt.continuing = FALSE;
  evt.mtu = 0;

  /* free plain text buffer */
  if (pMsg->pPlainText != NULL)
   17452:	6880      	ldr	r0, [r0, #8]
  evt.continuing = FALSE;
   17454:	2500      	movs	r5, #0
  evt.hdr.param = DM_CONN_ID_NONE;
   17456:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
  evt.valueLen = ATT_DATABASE_HASH_LEN;
   1745a:	2310      	movs	r3, #16
  evt.hdr.param = DM_CONN_ID_NONE;
   1745c:	9206      	str	r2, [sp, #24]
  evt.valueLen = ATT_DATABASE_HASH_LEN;
   1745e:	9308      	str	r3, [sp, #32]
  evt.continuing = FALSE;
   17460:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
  evt.mtu = 0;
   17464:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
  if (pMsg->pPlainText != NULL)
   17468:	b110      	cbz	r0, 17470 <attsProcessDatabaseHashUpdate+0x24>
  {
    WsfBufFree(pMsg->pPlainText);
   1746a:	f7f8 fa3d 	bl	f8e8 <WsfBufFree>
    pMsg->pPlainText = NULL;
   1746e:	60a5      	str	r5, [r4, #8]

  /* copy in little endian */
  evt.pValue = pMsg->pCiphertext;

  /* find GATT database handle */
  dbhCharHandle = attsFindUuidInRange(ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
   17470:	a904      	add	r1, sp, #16
   17472:	aa03      	add	r2, sp, #12
  evt.pValue = pMsg->pCiphertext;
   17474:	6864      	ldr	r4, [r4, #4]
  dbhCharHandle = attsFindUuidInRange(ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
   17476:	4b19      	ldr	r3, [pc, #100]	; (174dc <attsProcessDatabaseHashUpdate+0x90>)
  evt.pValue = pMsg->pCiphertext;
   17478:	9407      	str	r4, [sp, #28]
  dbhCharHandle = attsFindUuidInRange(ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
   1747a:	e9cd 2100 	strd	r2, r1, [sp]
   1747e:	2001      	movs	r0, #1
   17480:	2202      	movs	r2, #2
   17482:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17486:	f000 facd 	bl	17a24 <attsFindUuidInRange>
                                      (uint8_t *) attGattDbhChUuid, &pAttr, &pGroup);

  if (dbhCharHandle != ATT_HANDLE_NONE)
   1748a:	4604      	mov	r4, r0
   1748c:	b940      	cbnz	r0, 174a0 <attsProcessDatabaseHashUpdate+0x54>
    /* Set hash in service. */
    AttsSetAttr(dbhCharHandle, SEC_CMAC_HASH_LEN, evt.pValue);
  }

  /* set hash update complete */
  attsCsfSetHashUpdateStatus(FALSE);
   1748e:	2000      	movs	r0, #0
   17490:	f7ff fcfa 	bl	16e88 <attsCsfSetHashUpdateStatus>

  attCb.cback(&evt);
   17494:	4b12      	ldr	r3, [pc, #72]	; (174e0 <attsProcessDatabaseHashUpdate+0x94>)
   17496:	a806      	add	r0, sp, #24
   17498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   1749a:	4798      	blx	r3
}
   1749c:	b00b      	add	sp, #44	; 0x2c
   1749e:	bd30      	pop	{r4, r5, pc}
    AttsSetAttr(dbhCharHandle, SEC_CMAC_HASH_LEN, evt.pValue);
   174a0:	9d07      	ldr	r5, [sp, #28]
{
  attsAttr_t  *pAttr;
  attsGroup_t *pGroup;
  uint8_t     err = ATT_SUCCESS;

  WsfTaskLock();
   174a2:	f7f8 fa93 	bl	f9cc <WsfTaskLock>

  /* find attribute */
  if ((pAttr = attsFindByHandle(handle, &pGroup)) != NULL)
   174a6:	a905      	add	r1, sp, #20
   174a8:	4620      	mov	r0, r4
   174aa:	f000 f8fd 	bl	176a8 <attsFindByHandle>
   174ae:	b110      	cbz	r0, 174b6 <attsProcessDatabaseHashUpdate+0x6a>
  {
    /* verify write length */
    if (valueLen > pAttr->maxLen)
   174b0:	8983      	ldrh	r3, [r0, #12]
   174b2:	2b0f      	cmp	r3, #15
   174b4:	d802      	bhi.n	174bc <attsProcessDatabaseHashUpdate+0x70>
  else
  {
    err = ATT_ERR_NOT_FOUND;
  }

  WsfTaskUnlock();
   174b6:	f7f8 fa93 	bl	f9e0 <WsfTaskUnlock>

  return err;
   174ba:	e7e8      	b.n	1748e <attsProcessDatabaseHashUpdate+0x42>
      memcpy(pAttr->pValue, pValue, valueLen);
   174bc:	6843      	ldr	r3, [r0, #4]
   174be:	682c      	ldr	r4, [r5, #0]
   174c0:	6869      	ldr	r1, [r5, #4]
   174c2:	68aa      	ldr	r2, [r5, #8]
   174c4:	68ed      	ldr	r5, [r5, #12]
   174c6:	60dd      	str	r5, [r3, #12]
   174c8:	601c      	str	r4, [r3, #0]
   174ca:	6059      	str	r1, [r3, #4]
   174cc:	609a      	str	r2, [r3, #8]
      if ((pAttr->settings & ATTS_SET_VARIABLE_LEN) != 0)
   174ce:	7b83      	ldrb	r3, [r0, #14]
   174d0:	071b      	lsls	r3, r3, #28
   174d2:	d5f0      	bpl.n	174b6 <attsProcessDatabaseHashUpdate+0x6a>
        *(pAttr->pLen) = valueLen;
   174d4:	6883      	ldr	r3, [r0, #8]
   174d6:	2210      	movs	r2, #16
   174d8:	801a      	strh	r2, [r3, #0]
   174da:	e7ec      	b.n	174b6 <attsProcessDatabaseHashUpdate+0x6a>
   174dc:	000202c0 	.word	0x000202c0
   174e0:	100057d4 	.word	0x100057d4

000174e4 <attsMsgCback>:
  if (pMsg->event == ATTS_MSG_IDLE_TIMEOUT)
   174e4:	7882      	ldrb	r2, [r0, #2]
   174e6:	2a20      	cmp	r2, #32
   174e8:	d00a      	beq.n	17500 <attsMsgCback+0x1c>
  else if (pMsg->event <= ATTS_MSG_IND_TIMEOUT)
   174ea:	2a22      	cmp	r2, #34	; 0x22
   174ec:	d904      	bls.n	174f8 <attsMsgCback+0x14>
  else if (pMsg->event == ATTS_MSG_SIGN_CMAC_CMPL)
   174ee:	2a23      	cmp	r2, #35	; 0x23
   174f0:	d00b      	beq.n	1750a <attsMsgCback+0x26>
  else if (pMsg->event == ATTS_MSG_DBH_CMAC_CMPL)
   174f2:	2a24      	cmp	r2, #36	; 0x24
   174f4:	d00c      	beq.n	17510 <attsMsgCback+0x2c>
}
   174f6:	4770      	bx	lr
    (*attsCb.pInd->msgCback)(pMsg);
   174f8:	4b06      	ldr	r3, [pc, #24]	; (17514 <attsMsgCback+0x30>)
   174fa:	689b      	ldr	r3, [r3, #8]
   174fc:	689b      	ldr	r3, [r3, #8]
   174fe:	4718      	bx	r3
    DmConnSetIdle((dmConnId_t) pMsg->param, DM_IDLE_ATTS_DISC, DM_CONN_IDLE);
   17500:	7800      	ldrb	r0, [r0, #0]
   17502:	2200      	movs	r2, #0
   17504:	2104      	movs	r1, #4
   17506:	f002 b8f1 	b.w	196ec <DmConnSetIdle>
    (*attsCb.signMsgCback)(pMsg);
   1750a:	4b02      	ldr	r3, [pc, #8]	; (17514 <attsMsgCback+0x30>)
   1750c:	68db      	ldr	r3, [r3, #12]
   1750e:	4718      	bx	r3
    attsProcessDatabaseHashUpdate((secCmacMsg_t *) pMsg);
   17510:	f7ff bf9c 	b.w	1744c <attsProcessDatabaseHashUpdate>
   17514:	100057bc 	.word	0x100057bc

00017518 <attsCheckPendDbHashReadRsp>:
{
   17518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1751c:	4c39      	ldr	r4, [pc, #228]	; (17604 <attsCheckPendDbHashReadRsp+0xec>)
   1751e:	b084      	sub	sp, #16
      pCcb->pPendDbHashRsp = NULL;
   17520:	f04f 0900 	mov.w	r9, #0
   17524:	f104 086c 	add.w	r8, r4, #108	; 0x6c
    UINT8_TO_BSTREAM(p, ATT_PDU_ERR_RSP);
   17528:	f04f 0a01 	mov.w	sl, #1
    if (pCcb->pPendDbHashRsp)
   1752c:	6a23      	ldr	r3, [r4, #32]
   1752e:	2b00      	cmp	r3, #0
   17530:	d032      	beq.n	17598 <attsCheckPendDbHashReadRsp+0x80>
      if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   17532:	8b60      	ldrh	r0, [r4, #26]
   17534:	3008      	adds	r0, #8
   17536:	b280      	uxth	r0, r0
   17538:	f001 fa4e 	bl	189d8 <attMsgAlloc>
        UINT8_TO_BSTREAM(p, ATT_PDU_READ_TYPE_RSP);
   1753c:	2209      	movs	r2, #9
        UINT8_TO_BSTREAM(p, ATT_DATABASE_HASH_LEN + sizeof(uint16_t));
   1753e:	2312      	movs	r3, #18
        if ((pAttr = attsFindByHandle(pCcb->pPendDbHashRsp->handle, &pGroup)) != NULL)
   17540:	a903      	add	r1, sp, #12
      if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   17542:	4605      	mov	r5, r0
        UINT16_TO_BSTREAM(p, pCcb->pPendDbHashRsp->handle);
   17544:	f100 070c 	add.w	r7, r0, #12
      if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   17548:	b360      	cbz	r0, 175a4 <attsCheckPendDbHashReadRsp+0x8c>
        UINT8_TO_BSTREAM(p, ATT_PDU_READ_TYPE_RSP);
   1754a:	7202      	strb	r2, [r0, #8]
        UINT8_TO_BSTREAM(p, ATT_DATABASE_HASH_LEN + sizeof(uint16_t));
   1754c:	7243      	strb	r3, [r0, #9]
        UINT16_TO_BSTREAM(p, pCcb->pPendDbHashRsp->handle);
   1754e:	6a23      	ldr	r3, [r4, #32]
   17550:	885b      	ldrh	r3, [r3, #2]
   17552:	7283      	strb	r3, [r0, #10]
   17554:	6a23      	ldr	r3, [r4, #32]
   17556:	885b      	ldrh	r3, [r3, #2]
   17558:	0a1b      	lsrs	r3, r3, #8
   1755a:	72c3      	strb	r3, [r0, #11]
        if ((pAttr = attsFindByHandle(pCcb->pPendDbHashRsp->handle, &pGroup)) != NULL)
   1755c:	6a23      	ldr	r3, [r4, #32]
   1755e:	8858      	ldrh	r0, [r3, #2]
   17560:	f000 f8a2 	bl	176a8 <attsFindByHandle>
   17564:	4606      	mov	r6, r0
          memcpy(p, pAttr->pValue, *pAttr->pLen);
   17566:	4638      	mov	r0, r7
        if ((pAttr = attsFindByHandle(pCcb->pPendDbHashRsp->handle, &pGroup)) != NULL)
   17568:	2e00      	cmp	r6, #0
   1756a:	d037      	beq.n	175dc <attsCheckPendDbHashReadRsp+0xc4>
          memcpy(p, pAttr->pValue, *pAttr->pLen);
   1756c:	68b3      	ldr	r3, [r6, #8]
   1756e:	6871      	ldr	r1, [r6, #4]
   17570:	881a      	ldrh	r2, [r3, #0]
   17572:	f7f4 fdc5 	bl	c100 <memcpy>
          p += *pAttr->pLen;
   17576:	68b3      	ldr	r3, [r6, #8]
          L2cDataReq(L2C_CID_ATT, pCcb->handle, p - (pBuf + L2C_PAYLOAD_START), pBuf);
   17578:	8b21      	ldrh	r1, [r4, #24]
          p += *pAttr->pLen;
   1757a:	881a      	ldrh	r2, [r3, #0]
   1757c:	4417      	add	r7, r2
        p = pBuf + L2C_PAYLOAD_START;
   1757e:	f105 0208 	add.w	r2, r5, #8
          L2cDataReq(L2C_CID_ATT, pCcb->handle, p - (pBuf + L2C_PAYLOAD_START), pBuf);
   17582:	1aba      	subs	r2, r7, r2
   17584:	462b      	mov	r3, r5
   17586:	b292      	uxth	r2, r2
   17588:	2004      	movs	r0, #4
   1758a:	f7fc f8d5 	bl	13738 <L2cDataReq>
      WsfBufFree(pCcb->pPendDbHashRsp);
   1758e:	6a20      	ldr	r0, [r4, #32]
   17590:	f7f8 f9aa 	bl	f8e8 <WsfBufFree>
      pCcb->pPendDbHashRsp = NULL;
   17594:	f8c4 9020 	str.w	r9, [r4, #32]
  for (uint8_t i = 0; i < DM_CONN_MAX; i++)
   17598:	3424      	adds	r4, #36	; 0x24
   1759a:	4544      	cmp	r4, r8
   1759c:	d1c6      	bne.n	1752c <attsCheckPendDbHashReadRsp+0x14>
}
   1759e:	b004      	add	sp, #16
   175a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        attsErrRsp(pCcb->connId, ATT_PDU_READ_TYPE_REQ, pCcb->pPendDbHashRsp->startHandle, ATT_ERR_RESOURCES);
   175a4:	6a23      	ldr	r3, [r4, #32]
   175a6:	7f21      	ldrb	r1, [r4, #28]
   175a8:	881d      	ldrh	r5, [r3, #0]
   175aa:	9101      	str	r1, [sp, #4]
  if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_ERR_RSP_LEN)) != NULL)
   175ac:	200d      	movs	r0, #13
   175ae:	f001 fa13 	bl	189d8 <attMsgAlloc>
    UINT8_TO_BSTREAM(p, opcode);
   175b2:	f04f 0c08 	mov.w	ip, #8
  if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_ERR_RSP_LEN)) != NULL)
   175b6:	4603      	mov	r3, r0
    L2cDataReq(L2C_CID_ATT, handle, ATT_ERR_RSP_LEN, pBuf);
   175b8:	9901      	ldr	r1, [sp, #4]
    UINT16_TO_BSTREAM(p, attHandle);
   175ba:	fa25 f70c 	lsr.w	r7, r5, ip
    UINT8_TO_BSTREAM(p, reason);
   175be:	2611      	movs	r6, #17
    L2cDataReq(L2C_CID_ATT, handle, ATT_ERR_RSP_LEN, pBuf);
   175c0:	2205      	movs	r2, #5
   175c2:	2004      	movs	r0, #4
  if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_ERR_RSP_LEN)) != NULL)
   175c4:	2b00      	cmp	r3, #0
   175c6:	d0e2      	beq.n	1758e <attsCheckPendDbHashReadRsp+0x76>
    UINT8_TO_BSTREAM(p, opcode);
   175c8:	f883 c009 	strb.w	ip, [r3, #9]
    UINT16_TO_BSTREAM(p, attHandle);
   175cc:	729d      	strb	r5, [r3, #10]
   175ce:	72df      	strb	r7, [r3, #11]
    UINT8_TO_BSTREAM(p, reason);
   175d0:	731e      	strb	r6, [r3, #12]
    UINT8_TO_BSTREAM(p, ATT_PDU_ERR_RSP);
   175d2:	f883 a008 	strb.w	sl, [r3, #8]
    L2cDataReq(L2C_CID_ATT, handle, ATT_ERR_RSP_LEN, pBuf);
   175d6:	f7fc f8af 	bl	13738 <L2cDataReq>
   175da:	e7d8      	b.n	1758e <attsCheckPendDbHashReadRsp+0x76>
          attsErrRsp(pCcb->connId, ATT_PDU_READ_TYPE_REQ, pCcb->pPendDbHashRsp->startHandle, ATT_ERR_NOT_FOUND);
   175dc:	6a23      	ldr	r3, [r4, #32]
   175de:	7f21      	ldrb	r1, [r4, #28]
   175e0:	881d      	ldrh	r5, [r3, #0]
   175e2:	9101      	str	r1, [sp, #4]
  if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_ERR_RSP_LEN)) != NULL)
   175e4:	200d      	movs	r0, #13
   175e6:	f001 f9f7 	bl	189d8 <attMsgAlloc>
    UINT8_TO_BSTREAM(p, opcode);
   175ea:	f04f 0c08 	mov.w	ip, #8
  if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_ERR_RSP_LEN)) != NULL)
   175ee:	4603      	mov	r3, r0
    L2cDataReq(L2C_CID_ATT, handle, ATT_ERR_RSP_LEN, pBuf);
   175f0:	9901      	ldr	r1, [sp, #4]
    UINT16_TO_BSTREAM(p, attHandle);
   175f2:	fa25 f70c 	lsr.w	r7, r5, ip
    UINT8_TO_BSTREAM(p, reason);
   175f6:	260a      	movs	r6, #10
    L2cDataReq(L2C_CID_ATT, handle, ATT_ERR_RSP_LEN, pBuf);
   175f8:	2205      	movs	r2, #5
   175fa:	2004      	movs	r0, #4
  if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_ERR_RSP_LEN)) != NULL)
   175fc:	2b00      	cmp	r3, #0
   175fe:	d1e3      	bne.n	175c8 <attsCheckPendDbHashReadRsp+0xb0>
   17600:	e7c5      	b.n	1758e <attsCheckPendDbHashReadRsp+0x76>
   17602:	bf00      	nop
   17604:	100057d4 	.word	0x100057d4

00017608 <AttsInit>:
  WSF_QUEUE_INIT(&attsCb.groupQueue);
   17608:	4b07      	ldr	r3, [pc, #28]	; (17628 <AttsInit+0x20>)
  attCb.pServer = &attsFcnIf;
   1760a:	4908      	ldr	r1, [pc, #32]	; (1762c <AttsInit+0x24>)
  attsCb.signMsgCback = (attMsgHandler_t) attEmptyHandler;
   1760c:	4808      	ldr	r0, [pc, #32]	; (17630 <AttsInit+0x28>)
  WSF_QUEUE_INIT(&attsCb.groupQueue);
   1760e:	2200      	movs	r2, #0
{
   17610:	b410      	push	{r4}
  attsCb.pInd = &attFcnDefault;
   17612:	4c08      	ldr	r4, [pc, #32]	; (17634 <AttsInit+0x2c>)
   17614:	609c      	str	r4, [r3, #8]
  WSF_QUEUE_INIT(&attsCb.groupQueue);
   17616:	e9c3 2200 	strd	r2, r2, [r3]
  attCb.pServer = &attsFcnIf;
   1761a:	4a07      	ldr	r2, [pc, #28]	; (17638 <AttsInit+0x30>)
}
   1761c:	f85d 4b04 	ldr.w	r4, [sp], #4
  attsCb.signMsgCback = (attMsgHandler_t) attEmptyHandler;
   17620:	60d8      	str	r0, [r3, #12]
  attCb.pServer = &attsFcnIf;
   17622:	670a      	str	r2, [r1, #112]	; 0x70
}
   17624:	4770      	bx	lr
   17626:	bf00      	nop
   17628:	100057bc 	.word	0x100057bc
   1762c:	100057d4 	.word	0x100057d4
   17630:	00018839 	.word	0x00018839
   17634:	000202b0 	.word	0x000202b0
   17638:	0002028c 	.word	0x0002028c

0001763c <attsUuidCmp>:
 *
 *  \return TRUE of UUIDs match, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t attsUuidCmp(attsAttr_t *pAttr, uint8_t uuidLen, uint8_t *pUuid)
{
   1763c:	b508      	push	{r3, lr}
  /* if both uuids are the same length */
  if ((((pAttr->settings & ATTS_SET_UUID_128) == 0) && (uuidLen == ATT_16_UUID_LEN)) ||
   1763e:	f890 c00e 	ldrb.w	ip, [r0, #14]
   17642:	f01c 0f01 	tst.w	ip, #1
{
   17646:	4613      	mov	r3, r2
  if ((((pAttr->settings & ATTS_SET_UUID_128) == 0) && (uuidLen == ATT_16_UUID_LEN)) ||
   17648:	d007      	beq.n	1765a <attsUuidCmp+0x1e>
      (((pAttr->settings & ATTS_SET_UUID_128) != 0) &&  (uuidLen == ATT_128_UUID_LEN)))
   1764a:	2910      	cmp	r1, #16
   1764c:	d00f      	beq.n	1766e <attsUuidCmp+0x32>
  {
    return attUuidCmp16to128(pAttr->pUuid, pUuid);
  }
  else
  {
    return attUuidCmp16to128(pUuid, pAttr->pUuid);
   1764e:	6801      	ldr	r1, [r0, #0]
   17650:	4618      	mov	r0, r3
  }
}
   17652:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return attUuidCmp16to128(pUuid, pAttr->pUuid);
   17656:	f001 b96f 	b.w	18938 <attUuidCmp16to128>
  if ((((pAttr->settings & ATTS_SET_UUID_128) == 0) && (uuidLen == ATT_16_UUID_LEN)) ||
   1765a:	2902      	cmp	r1, #2
   1765c:	d007      	beq.n	1766e <attsUuidCmp+0x32>
  else if (((pAttr->settings & ATTS_SET_UUID_128) == 0) && (uuidLen == ATT_128_UUID_LEN))
   1765e:	2910      	cmp	r1, #16
   17660:	d1f5      	bne.n	1764e <attsUuidCmp+0x12>
}
   17662:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return attUuidCmp16to128(pAttr->pUuid, pUuid);
   17666:	6800      	ldr	r0, [r0, #0]
   17668:	4611      	mov	r1, r2
   1766a:	f001 b965 	b.w	18938 <attUuidCmp16to128>
    return (memcmp(pAttr->pUuid, pUuid, uuidLen) == 0);
   1766e:	460a      	mov	r2, r1
   17670:	6800      	ldr	r0, [r0, #0]
   17672:	4619      	mov	r1, r3
   17674:	f005 fa1e 	bl	1cab4 <memcmp>
   17678:	fab0 f080 	clz	r0, r0
   1767c:	0940      	lsrs	r0, r0, #5
}
   1767e:	bd08      	pop	{r3, pc}

00017680 <attsUuid16Cmp>:
 *  \return TRUE of UUIDs match, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t attsUuid16Cmp(uint8_t *pUuid16, uint8_t uuidLen, uint8_t *pUuid)
{
  if (uuidLen == ATT_16_UUID_LEN)
   17680:	2902      	cmp	r1, #2
{
   17682:	4603      	mov	r3, r0
  if (uuidLen == ATT_16_UUID_LEN)
   17684:	d105      	bne.n	17692 <attsUuid16Cmp+0x12>
  {
    return ((pUuid16[0] == pUuid[0]) && (pUuid16[1] == pUuid[1]));
   17686:	7800      	ldrb	r0, [r0, #0]
   17688:	7811      	ldrb	r1, [r2, #0]
   1768a:	4288      	cmp	r0, r1
   1768c:	d004      	beq.n	17698 <attsUuid16Cmp+0x18>
   1768e:	2000      	movs	r0, #0
  }
  else
  {
    return attUuidCmp16to128(pUuid16, pUuid);
  }
}
   17690:	4770      	bx	lr
    return attUuidCmp16to128(pUuid16, pUuid);
   17692:	4611      	mov	r1, r2
   17694:	f001 b950 	b.w	18938 <attUuidCmp16to128>
    return ((pUuid16[0] == pUuid[0]) && (pUuid16[1] == pUuid[1]));
   17698:	7858      	ldrb	r0, [r3, #1]
   1769a:	7853      	ldrb	r3, [r2, #1]
   1769c:	1ac0      	subs	r0, r0, r3
   1769e:	fab0 f080 	clz	r0, r0
   176a2:	0940      	lsrs	r0, r0, #5
   176a4:	4770      	bx	lr
   176a6:	bf00      	nop

000176a8 <attsFindByHandle>:
attsAttr_t *attsFindByHandle(uint16_t handle, attsGroup_t **pAttrGroup)
{
  attsGroup_t   *pGroup;

  /* iterate over attribute group list */
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   176a8:	4b0a      	ldr	r3, [pc, #40]	; (176d4 <attsFindByHandle+0x2c>)
   176aa:	681b      	ldr	r3, [r3, #0]
   176ac:	b183      	cbz	r3, 176d0 <attsFindByHandle+0x28>
  {
    /*  if start handle within handle range of group */
    if ((handle >= pGroup->startHandle) && (handle <= pGroup->endHandle))
   176ae:	8a1a      	ldrh	r2, [r3, #16]
   176b0:	4282      	cmp	r2, r0
   176b2:	d8fa      	bhi.n	176aa <attsFindByHandle+0x2>
   176b4:	f8b3 c012 	ldrh.w	ip, [r3, #18]
   176b8:	4584      	cmp	ip, r0
   176ba:	d3f6      	bcc.n	176aa <attsFindByHandle+0x2>
{
   176bc:	b410      	push	{r4}
    {
      /* index by handle into attribute array to return attribute */
      *pAttrGroup = pGroup;
      return &pGroup->pAttr[handle - pGroup->startHandle];
   176be:	685c      	ldr	r4, [r3, #4]
      *pAttrGroup = pGroup;
   176c0:	600b      	str	r3, [r1, #0]
      return &pGroup->pAttr[handle - pGroup->startHandle];
   176c2:	1a80      	subs	r0, r0, r2
   176c4:	eb04 1300 	add.w	r3, r4, r0, lsl #4
    }
  }

  /* handle not found */
  return NULL;
}
   176c8:	4618      	mov	r0, r3
   176ca:	f85d 4b04 	ldr.w	r4, [sp], #4
   176ce:	4770      	bx	lr
   176d0:	4618      	mov	r0, r3
   176d2:	4770      	bx	lr
   176d4:	100057bc 	.word	0x100057bc

000176d8 <attsPermissions>:
uint8_t attsPermissions(dmConnId_t connId, uint8_t permit, uint16_t handle, uint8_t permissions)
{
  uint8_t secLevel;

  /* verify read or write permissions */
  if (!(permissions & permit))
   176d8:	420b      	tst	r3, r1
{
   176da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   176de:	460d      	mov	r5, r1
  if (!(permissions & permit))
   176e0:	d01f      	beq.n	17722 <attsPermissions+0x4a>
  {
    return (permit == ATTS_PERMIT_READ) ? ATT_ERR_READ : ATT_ERR_WRITE;
  }

  /* convert write permissions to read permissions for easier masking */
  if (permit == ATTS_PERMIT_WRITE)
   176e2:	2910      	cmp	r1, #16
   176e4:	461c      	mov	r4, r3
  {
    permissions >>= 4;
   176e6:	bf08      	it	eq
   176e8:	091c      	lsreq	r4, r3, #4
  }

  /* if no security requirements return quickly */
  if ((permissions & (ATTS_PERMIT_READ_AUTH | ATTS_PERMIT_READ_AUTHORIZ | ATTS_PERMIT_READ_ENC)) == 0)
   176ea:	f014 0f0e 	tst.w	r4, #14
   176ee:	4607      	mov	r7, r0
   176f0:	4616      	mov	r6, r2
   176f2:	d102      	bne.n	176fa <attsPermissions+0x22>
  {
    return ATT_SUCCESS;
   176f4:	2000      	movs	r0, #0
  }
  else
  {
    return ATT_SUCCESS;
  }
}
   176f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  secLevel = DmConnSecLevel(connId);
   176fa:	f001 ffed 	bl	196d8 <DmConnSecLevel>
  if ((permissions & ATTS_PERMIT_READ_ENC) && (secLevel == DM_SEC_LEVEL_NONE))
   176fe:	0722      	lsls	r2, r4, #28
   17700:	d500      	bpl.n	17704 <attsPermissions+0x2c>
   17702:	b1b0      	cbz	r0, 17732 <attsPermissions+0x5a>
  if (((permissions & (ATTS_PERMIT_READ_AUTH | ATTS_PERMIT_READ_ENC)) ==
   17704:	f004 030a 	and.w	r3, r4, #10
   17708:	2b0a      	cmp	r3, #10
   1770a:	d010      	beq.n	1772e <attsPermissions+0x56>
  if (permissions & ATTS_PERMIT_READ_AUTHORIZ)
   1770c:	0763      	lsls	r3, r4, #29
   1770e:	d5f1      	bpl.n	176f4 <attsPermissions+0x1c>
    if (attsCb.authorCback == NULL)
   17710:	4b0a      	ldr	r3, [pc, #40]	; (1773c <attsPermissions+0x64>)
   17712:	691b      	ldr	r3, [r3, #16]
   17714:	b17b      	cbz	r3, 17736 <attsPermissions+0x5e>
      return (*attsCb.authorCback)(connId, permit, handle);
   17716:	4632      	mov	r2, r6
   17718:	4629      	mov	r1, r5
   1771a:	4638      	mov	r0, r7
}
   1771c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      return (*attsCb.authorCback)(connId, permit, handle);
   17720:	4718      	bx	r3
    return (permit == ATTS_PERMIT_READ) ? ATT_ERR_READ : ATT_ERR_WRITE;
   17722:	2901      	cmp	r1, #1
   17724:	bf0c      	ite	eq
   17726:	2002      	moveq	r0, #2
   17728:	2003      	movne	r0, #3
}
   1772a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       (ATTS_PERMIT_READ_AUTH | ATTS_PERMIT_READ_ENC)) && (secLevel < DM_SEC_LEVEL_ENC_AUTH))
   1772e:	2801      	cmp	r0, #1
   17730:	d8ec      	bhi.n	1770c <attsPermissions+0x34>
    return ATT_ERR_AUTH;
   17732:	2005      	movs	r0, #5
   17734:	e7df      	b.n	176f6 <attsPermissions+0x1e>
      return ATT_ERR_AUTHOR;
   17736:	2008      	movs	r0, #8
   17738:	e7dd      	b.n	176f6 <attsPermissions+0x1e>
   1773a:	bf00      	nop
   1773c:	100057bc 	.word	0x100057bc

00017740 <attsProcMtuReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcMtuReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   17740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t   *pRsp;

  p = pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;

  /* parse mtu */
  BYTES_TO_UINT16(mtu, p);
   17742:	7a93      	ldrb	r3, [r2, #10]
   17744:	7a54      	ldrb	r4, [r2, #9]
  {
    mtu = ATT_DEFAULT_MTU;
  }

  /* get desired MTU */
  localMtu = WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN));
   17746:	4e15      	ldr	r6, [pc, #84]	; (1779c <attsProcMtuReq+0x5c>)
  BYTES_TO_UINT16(mtu, p);
   17748:	eb04 2403 	add.w	r4, r4, r3, lsl #8
   1774c:	b2a4      	uxth	r4, r4
  localMtu = WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN));
   1774e:	6833      	ldr	r3, [r6, #0]
   17750:	2c17      	cmp	r4, #23
   17752:	889f      	ldrh	r7, [r3, #4]
   17754:	bf38      	it	cc
   17756:	2417      	movcc	r4, #23
{
   17758:	4605      	mov	r5, r0
  localMtu = WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN));
   1775a:	f7f6 feb1 	bl	e4c0 <HciGetMaxRxAclLen>
   1775e:	3804      	subs	r0, #4
   17760:	4287      	cmp	r7, r0
   17762:	da16      	bge.n	17792 <attsProcMtuReq+0x52>
   17764:	6833      	ldr	r3, [r6, #0]
   17766:	889e      	ldrh	r6, [r3, #4]

  /* send response */
  if ((pRsp = attMsgAlloc(L2C_PAYLOAD_START + ATT_MTU_RSP_LEN)) != NULL)
   17768:	200b      	movs	r0, #11
   1776a:	f001 f935 	bl	189d8 <attMsgAlloc>
   1776e:	4603      	mov	r3, r0
   17770:	b140      	cbz	r0, 17784 <attsProcMtuReq+0x44>
  {
    p = pRsp + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, ATT_PDU_MTU_RSP);
    UINT16_TO_BSTREAM(p, localMtu);
   17772:	0a31      	lsrs	r1, r6, #8
    UINT8_TO_BSTREAM(p, ATT_PDU_MTU_RSP);
   17774:	2203      	movs	r2, #3
   17776:	7202      	strb	r2, [r0, #8]
    UINT16_TO_BSTREAM(p, localMtu);
   17778:	7246      	strb	r6, [r0, #9]
   1777a:	7281      	strb	r1, [r0, #10]

    L2cDataReq(L2C_CID_ATT, pCcb->handle, ATT_MTU_RSP_LEN, pRsp);
   1777c:	8b29      	ldrh	r1, [r5, #24]
   1777e:	2004      	movs	r0, #4
   17780:	f7fb ffda 	bl	13738 <L2cDataReq>
  }

  /* set mtu for the connection */
  attSetMtu(pCcb, mtu, localMtu);
   17784:	4632      	mov	r2, r6
   17786:	4621      	mov	r1, r4
   17788:	4628      	mov	r0, r5
}
   1778a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  attSetMtu(pCcb, mtu, localMtu);
   1778e:	f001 b8e5 	b.w	1895c <attSetMtu>
  localMtu = WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN));
   17792:	f7f6 fe95 	bl	e4c0 <HciGetMaxRxAclLen>
   17796:	3804      	subs	r0, #4
   17798:	b286      	uxth	r6, r0
   1779a:	e7e5      	b.n	17768 <attsProcMtuReq+0x28>
   1779c:	10002b0c 	.word	0x10002b0c

000177a0 <attsProcFindInfoReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcFindInfoReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   177a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint16_t    handle;
  uint8_t     err = ATT_SUCCESS;

  /* parse handles */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
  BSTREAM_TO_UINT16(startHandle, pPacket);
   177a4:	7a93      	ldrb	r3, [r2, #10]
   177a6:	7a56      	ldrb	r6, [r2, #9]
   177a8:	eb06 2603 	add.w	r6, r6, r3, lsl #8
   177ac:	b2b6      	uxth	r6, r6
{
   177ae:	4607      	mov	r7, r0
  BSTREAM_TO_UINT16(endHandle, pPacket);

  /* verify handles */
  if ((startHandle == 0) || (startHandle > endHandle))
   177b0:	b136      	cbz	r6, 177c0 <attsProcFindInfoReq+0x20>
  BSTREAM_TO_UINT16(endHandle, pPacket);
   177b2:	7b13      	ldrb	r3, [r2, #12]
   177b4:	7ad5      	ldrb	r5, [r2, #11]
   177b6:	eb05 2503 	add.w	r5, r5, r3, lsl #8
   177ba:	b2ad      	uxth	r5, r5
  if ((startHandle == 0) || (startHandle > endHandle))
   177bc:	42ae      	cmp	r6, r5
   177be:	d90a      	bls.n	177d6 <attsProcFindInfoReq+0x36>
      err = ATT_ERR_RESOURCES;
    }
  }

  /* set channel as busy for service discovery */
  attsDiscBusy(pCcb);
   177c0:	4638      	mov	r0, r7
   177c2:	f7ff fe23 	bl	1740c <attsDiscBusy>
    err = ATT_ERR_HANDLE;
   177c6:	2301      	movs	r3, #1
  {
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
  }
  else
  {
    attsErrRsp(pCcb->handle, ATT_PDU_FIND_INFO_REQ, startHandle, err);
   177c8:	8b38      	ldrh	r0, [r7, #24]
   177ca:	4632      	mov	r2, r6
   177cc:	2104      	movs	r1, #4
  }
}
   177ce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    attsErrRsp(pCcb->handle, ATT_PDU_FIND_INFO_REQ, startHandle, err);
   177d2:	f7ff bdf1 	b.w	173b8 <attsErrRsp>
    if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   177d6:	8b40      	ldrh	r0, [r0, #26]
   177d8:	3008      	adds	r0, #8
   177da:	b280      	uxth	r0, r0
   177dc:	f001 f8fc 	bl	189d8 <attMsgAlloc>
   177e0:	4680      	mov	r8, r0
   177e2:	2800      	cmp	r0, #0
   177e4:	d05a      	beq.n	1789c <attsProcFindInfoReq+0xfc>
      UINT8_TO_BSTREAM(p, ATT_PDU_FIND_INFO_RSP);
   177e6:	f240 1305 	movw	r3, #261	; 0x105
   177ea:	8103      	strh	r3, [r0, #8]
      while ((handle = attsFindInRange(handle, endHandle, &pAttr)) != ATT_HANDLE_NONE)
   177ec:	f100 030e 	add.w	r3, r0, #14
   177f0:	4842      	ldr	r0, [pc, #264]	; (178fc <attsProcFindInfoReq+0x15c>)
   177f2:	4634      	mov	r4, r6
        if (handle == ATT_HANDLE_MAX)
   177f4:	f64f 7eff 	movw	lr, #65535	; 0xffff
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   177f8:	6801      	ldr	r1, [r0, #0]
   177fa:	f1a3 0904 	sub.w	r9, r3, #4
   177fe:	b161      	cbz	r1, 1781a <attsProcFindInfoReq+0x7a>
    if ((startHandle < pGroup->startHandle) && (endHandle >= pGroup->startHandle))
   17800:	f8b1 c010 	ldrh.w	ip, [r1, #16]
   17804:	45a4      	cmp	ip, r4
   17806:	d902      	bls.n	1780e <attsProcFindInfoReq+0x6e>
   17808:	4565      	cmp	r5, ip
   1780a:	d303      	bcc.n	17814 <attsProcFindInfoReq+0x74>
   1780c:	4664      	mov	r4, ip
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   1780e:	8a4a      	ldrh	r2, [r1, #18]
   17810:	42a2      	cmp	r2, r4
   17812:	d215      	bcs.n	17840 <attsProcFindInfoReq+0xa0>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   17814:	6809      	ldr	r1, [r1, #0]
   17816:	2900      	cmp	r1, #0
   17818:	d1f2      	bne.n	17800 <attsProcFindInfoReq+0x60>
      if (p == (pBuf + L2C_PAYLOAD_START + 2))
   1781a:	f108 020a 	add.w	r2, r8, #10
   1781e:	4591      	cmp	r9, r2
   17820:	d063      	beq.n	178ea <attsProcFindInfoReq+0x14a>
  attsDiscBusy(pCcb);
   17822:	4638      	mov	r0, r7
   17824:	f7ff fdf2 	bl	1740c <attsDiscBusy>
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
   17828:	f108 0208 	add.w	r2, r8, #8
   1782c:	eba9 0202 	sub.w	r2, r9, r2
   17830:	8b39      	ldrh	r1, [r7, #24]
   17832:	4643      	mov	r3, r8
   17834:	b292      	uxth	r2, r2
}
   17836:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
   1783a:	2004      	movs	r0, #4
   1783c:	f7fb bf7c 	b.w	13738 <L2cDataReq>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   17840:	6849      	ldr	r1, [r1, #4]
   17842:	eba4 0c0c 	sub.w	ip, r4, ip
   17846:	ea4f 1a0c 	mov.w	sl, ip, lsl #4
   1784a:	eb01 1c0c 	add.w	ip, r1, ip, lsl #4
      while ((handle = attsFindInRange(handle, endHandle, &pAttr)) != ATT_HANDLE_NONE)
   1784e:	2c00      	cmp	r4, #0
   17850:	d0e3      	beq.n	1781a <attsProcFindInfoReq+0x7a>
        if (pAttr->settings & ATTS_SET_UUID_128)
   17852:	f89c 200e 	ldrb.w	r2, [ip, #14]
   17856:	07d2      	lsls	r2, r2, #31
   17858:	d429      	bmi.n	178ae <attsProcFindInfoReq+0x10e>
              (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
   1785a:	8b7a      	ldrh	r2, [r7, #26]
   1785c:	3208      	adds	r2, #8
   1785e:	4442      	add	r2, r8
          if ((p + ATT_16_UUID_LEN + sizeof(uint16_t)) <=
   17860:	4293      	cmp	r3, r2
   17862:	469c      	mov	ip, r3
   17864:	d8d9      	bhi.n	1781a <attsProcFindInfoReq+0x7a>
            UINT16_TO_BSTREAM(p, handle);
   17866:	0a22      	lsrs	r2, r4, #8
   17868:	f803 4c04 	strb.w	r4, [r3, #-4]
   1786c:	f803 2c03 	strb.w	r2, [r3, #-3]
            UINT8_TO_BSTREAM(p, pAttr->pUuid[0]);
   17870:	f851 200a 	ldr.w	r2, [r1, sl]
   17874:	7812      	ldrb	r2, [r2, #0]
   17876:	f803 2c02 	strb.w	r2, [r3, #-2]
            UINT8_TO_BSTREAM(p, pAttr->pUuid[1]);
   1787a:	f851 200a 	ldr.w	r2, [r1, sl]
        if (handle == ATT_HANDLE_MAX)
   1787e:	4574      	cmp	r4, lr
            UINT8_TO_BSTREAM(p, pAttr->pUuid[1]);
   17880:	7852      	ldrb	r2, [r2, #1]
   17882:	f803 2c01 	strb.w	r2, [r3, #-1]
        if (handle == ATT_HANDLE_MAX)
   17886:	d00e      	beq.n	178a6 <attsProcFindInfoReq+0x106>
        if (++handle > endHandle)
   17888:	3401      	adds	r4, #1
   1788a:	b2a4      	uxth	r4, r4
   1788c:	42a5      	cmp	r5, r4
   1788e:	f103 0304 	add.w	r3, r3, #4
   17892:	d2b1      	bcs.n	177f8 <attsProcFindInfoReq+0x58>
      if (p == (pBuf + L2C_PAYLOAD_START + 2))
   17894:	f108 020a 	add.w	r2, r8, #10
   17898:	46e1      	mov	r9, ip
   1789a:	e7c0      	b.n	1781e <attsProcFindInfoReq+0x7e>
  attsDiscBusy(pCcb);
   1789c:	4638      	mov	r0, r7
   1789e:	f7ff fdb5 	bl	1740c <attsDiscBusy>
      err = ATT_ERR_RESOURCES;
   178a2:	2311      	movs	r3, #17
   178a4:	e790      	b.n	177c8 <attsProcFindInfoReq+0x28>
      if (p == (pBuf + L2C_PAYLOAD_START + 2))
   178a6:	f108 020a 	add.w	r2, r8, #10
   178aa:	4699      	mov	r9, r3
   178ac:	e7b7      	b.n	1781e <attsProcFindInfoReq+0x7e>
          if (p == (pBuf + L2C_PAYLOAD_START + 2))
   178ae:	f108 030a 	add.w	r3, r8, #10
   178b2:	4599      	cmp	r9, r3
   178b4:	d1b5      	bne.n	17822 <attsProcFindInfoReq+0x82>
            UINT16_TO_BSTREAM(p, handle);
   178b6:	f889 4000 	strb.w	r4, [r9]
            UINT8_TO_BSTREAM(p, ATT_FIND_HANDLE_128_UUID);
   178ba:	2302      	movs	r3, #2
            UINT16_TO_BSTREAM(p, handle);
   178bc:	0a24      	lsrs	r4, r4, #8
   178be:	f889 4001 	strb.w	r4, [r9, #1]
            UINT8_TO_BSTREAM(p, ATT_FIND_HANDLE_128_UUID);
   178c2:	f809 3c01 	strb.w	r3, [r9, #-1]
            memcpy(p, pAttr->pUuid, ATT_128_UUID_LEN);
   178c6:	f8dc 3000 	ldr.w	r3, [ip]
   178ca:	681c      	ldr	r4, [r3, #0]
   178cc:	6858      	ldr	r0, [r3, #4]
   178ce:	6899      	ldr	r1, [r3, #8]
   178d0:	68db      	ldr	r3, [r3, #12]
   178d2:	f8c8 3018 	str.w	r3, [r8, #24]
            p += ATT_128_UUID_LEN;
   178d6:	464a      	mov	r2, r9
            memcpy(p, pAttr->pUuid, ATT_128_UUID_LEN);
   178d8:	f8c8 400c 	str.w	r4, [r8, #12]
   178dc:	f8c8 0010 	str.w	r0, [r8, #16]
   178e0:	f8c8 1014 	str.w	r1, [r8, #20]
            p += ATT_128_UUID_LEN;
   178e4:	f108 091c 	add.w	r9, r8, #28
   178e8:	e799      	b.n	1781e <attsProcFindInfoReq+0x7e>
        WsfMsgFree(pBuf);
   178ea:	4640      	mov	r0, r8
   178ec:	f7f8 f834 	bl	f958 <WsfMsgFree>
  attsDiscBusy(pCcb);
   178f0:	4638      	mov	r0, r7
   178f2:	f7ff fd8b 	bl	1740c <attsDiscBusy>
        err = ATT_ERR_NOT_FOUND;
   178f6:	230a      	movs	r3, #10
   178f8:	e766      	b.n	177c8 <attsProcFindInfoReq+0x28>
   178fa:	bf00      	nop
   178fc:	100057bc 	.word	0x100057bc

00017900 <attsProcReadReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcReadReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   17900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   17904:	4f46      	ldr	r7, [pc, #280]	; (17a20 <attsProcReadReq+0x120>)
  uint16_t    readLen;
  uint8_t     err = ATT_SUCCESS;

  /* parse handle */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
  BSTREAM_TO_UINT16(handle, pPacket);
   17906:	7a93      	ldrb	r3, [r2, #10]
   17908:	7a55      	ldrb	r5, [r2, #9]
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   1790a:	683c      	ldr	r4, [r7, #0]
  BSTREAM_TO_UINT16(handle, pPacket);
   1790c:	eb05 2503 	add.w	r5, r5, r3, lsl #8
{
   17910:	b082      	sub	sp, #8
   17912:	4680      	mov	r8, r0
  BSTREAM_TO_UINT16(handle, pPacket);
   17914:	b2ad      	uxth	r5, r5
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   17916:	b144      	cbz	r4, 1792a <attsProcReadReq+0x2a>
    if ((handle >= pGroup->startHandle) && (handle <= pGroup->endHandle))
   17918:	8a23      	ldrh	r3, [r4, #16]
   1791a:	429d      	cmp	r5, r3
   1791c:	d302      	bcc.n	17924 <attsProcReadReq+0x24>
   1791e:	8a62      	ldrh	r2, [r4, #18]
   17920:	42aa      	cmp	r2, r5
   17922:	d20c      	bcs.n	1793e <attsProcReadReq+0x3e>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   17924:	6824      	ldr	r4, [r4, #0]
   17926:	2c00      	cmp	r4, #0
   17928:	d1f6      	bne.n	17918 <attsProcReadReq+0x18>
    }
  }
  /* else invalid handle */
  else
  {
    err = ATT_ERR_HANDLE;
   1792a:	2301      	movs	r3, #1
  }

  if (err)
  {
    attsErrRsp(pCcb->handle, ATT_PDU_READ_REQ, handle, err);
   1792c:	f8b8 0018 	ldrh.w	r0, [r8, #24]
   17930:	462a      	mov	r2, r5
   17932:	210a      	movs	r1, #10
  }
}
   17934:	b002      	add	sp, #8
   17936:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    attsErrRsp(pCcb->handle, ATT_PDU_READ_REQ, handle, err);
   1793a:	f7ff bd3d 	b.w	173b8 <attsErrRsp>
      return &pGroup->pAttr[handle - pGroup->startHandle];
   1793e:	6866      	ldr	r6, [r4, #4]
   17940:	1aeb      	subs	r3, r5, r3
  if ((pAttr = attsFindByHandle(handle, &pGroup)) != NULL)
   17942:	eb16 1603 	adds.w	r6, r6, r3, lsl #4
   17946:	d0f0      	beq.n	1792a <attsProcReadReq+0x2a>
    if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   17948:	f896 900f 	ldrb.w	r9, [r6, #15]
  if (!(permissions & permit))
   1794c:	f019 0f01 	tst.w	r9, #1
   17950:	d04e      	beq.n	179f0 <attsProcReadReq+0xf0>
  if ((permissions & (ATTS_PERMIT_READ_AUTH | ATTS_PERMIT_READ_AUTHORIZ | ATTS_PERMIT_READ_ENC)) == 0)
   17952:	f019 0f0e 	tst.w	r9, #14
   17956:	d01a      	beq.n	1798e <attsProcReadReq+0x8e>
    if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   17958:	f898 a01c 	ldrb.w	sl, [r8, #28]
  secLevel = DmConnSecLevel(connId);
   1795c:	4650      	mov	r0, sl
   1795e:	f001 febb 	bl	196d8 <DmConnSecLevel>
  if ((permissions & ATTS_PERMIT_READ_ENC) && (secLevel == DM_SEC_LEVEL_NONE))
   17962:	f019 0f08 	tst.w	r9, #8
   17966:	d001      	beq.n	1796c <attsProcReadReq+0x6c>
   17968:	2800      	cmp	r0, #0
   1796a:	d052      	beq.n	17a12 <attsProcReadReq+0x112>
  if (((permissions & (ATTS_PERMIT_READ_AUTH | ATTS_PERMIT_READ_ENC)) ==
   1796c:	f009 030a 	and.w	r3, r9, #10
   17970:	2b0a      	cmp	r3, #10
   17972:	d04c      	beq.n	17a0e <attsProcReadReq+0x10e>
  if (permissions & ATTS_PERMIT_READ_AUTHORIZ)
   17974:	f019 0f04 	tst.w	r9, #4
   17978:	d009      	beq.n	1798e <attsProcReadReq+0x8e>
    if (attsCb.authorCback == NULL)
   1797a:	693b      	ldr	r3, [r7, #16]
   1797c:	2b00      	cmp	r3, #0
   1797e:	d04d      	beq.n	17a1c <attsProcReadReq+0x11c>
      return (*attsCb.authorCback)(connId, permit, handle);
   17980:	4650      	mov	r0, sl
   17982:	462a      	mov	r2, r5
   17984:	2101      	movs	r1, #1
   17986:	4798      	blx	r3
    if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   17988:	4603      	mov	r3, r0
   1798a:	2800      	cmp	r0, #0
   1798c:	d1ce      	bne.n	1792c <attsProcReadReq+0x2c>
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   1798e:	7bb3      	ldrb	r3, [r6, #14]
   17990:	075a      	lsls	r2, r3, #29
   17992:	d52f      	bpl.n	179f4 <attsProcReadReq+0xf4>
          (pGroup->readCback != NULL))
   17994:	68a4      	ldr	r4, [r4, #8]
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   17996:	b36c      	cbz	r4, 179f4 <attsProcReadReq+0xf4>
        err = (*pGroup->readCback)(pCcb->connId, handle, ATT_PDU_READ_REQ, 0, pAttr);
   17998:	9600      	str	r6, [sp, #0]
   1799a:	2300      	movs	r3, #0
   1799c:	f898 001c 	ldrb.w	r0, [r8, #28]
   179a0:	220a      	movs	r2, #10
   179a2:	4629      	mov	r1, r5
   179a4:	47a0      	blx	r4
   179a6:	4603      	mov	r3, r0
      if (err == ATT_SUCCESS)
   179a8:	2b00      	cmp	r3, #0
   179aa:	d1bf      	bne.n	1792c <attsProcReadReq+0x2c>
        readLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_RSP_LEN)) ?
   179ac:	68b2      	ldr	r2, [r6, #8]
   179ae:	f8b8 301a 	ldrh.w	r3, [r8, #26]
   179b2:	8812      	ldrh	r2, [r2, #0]
   179b4:	1e5c      	subs	r4, r3, #1
                   *pAttr->pLen : (pCcb->mtu - ATT_READ_RSP_LEN);
   179b6:	4294      	cmp	r4, r2
   179b8:	bfa8      	it	ge
   179ba:	4614      	movge	r4, r2
        readLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_RSP_LEN)) ?
   179bc:	b2a7      	uxth	r7, r4
        if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_READ_RSP_LEN + readLen)) != NULL)
   179be:	f107 0009 	add.w	r0, r7, #9
   179c2:	b280      	uxth	r0, r0
   179c4:	f001 f808 	bl	189d8 <attMsgAlloc>
   179c8:	4605      	mov	r5, r0
   179ca:	b320      	cbz	r0, 17a16 <attsProcReadReq+0x116>
          UINT8_TO_BSTREAM(p, ATT_PDU_READ_RSP);
   179cc:	230b      	movs	r3, #11
   179ce:	7203      	strb	r3, [r0, #8]
          memcpy(p, pAttr->pValue, readLen);
   179d0:	6871      	ldr	r1, [r6, #4]
   179d2:	b2a2      	uxth	r2, r4
   179d4:	3009      	adds	r0, #9
   179d6:	f7f4 fb93 	bl	c100 <memcpy>
          L2cDataReq(L2C_CID_ATT, pCcb->handle, (ATT_READ_RSP_LEN + readLen), pBuf);
   179da:	1c7a      	adds	r2, r7, #1
   179dc:	f8b8 1018 	ldrh.w	r1, [r8, #24]
   179e0:	462b      	mov	r3, r5
   179e2:	b292      	uxth	r2, r2
   179e4:	2004      	movs	r0, #4
}
   179e6:	b002      	add	sp, #8
   179e8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
          L2cDataReq(L2C_CID_ATT, pCcb->handle, (ATT_READ_RSP_LEN + readLen), pBuf);
   179ec:	f7fb bea4 	b.w	13738 <L2cDataReq>
    return (permit == ATTS_PERMIT_READ) ? ATT_ERR_READ : ATT_ERR_WRITE;
   179f0:	2302      	movs	r3, #2
   179f2:	e79b      	b.n	1792c <attsProcReadReq+0x2c>
      else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   179f4:	069b      	lsls	r3, r3, #26
   179f6:	d5d9      	bpl.n	179ac <attsProcReadReq+0xac>
   179f8:	697c      	ldr	r4, [r7, #20]
   179fa:	2c00      	cmp	r4, #0
   179fc:	d0d6      	beq.n	179ac <attsProcReadReq+0xac>
        err = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_READ, handle, pAttr->pValue);
   179fe:	6873      	ldr	r3, [r6, #4]
   17a00:	f898 001c 	ldrb.w	r0, [r8, #28]
   17a04:	462a      	mov	r2, r5
   17a06:	2105      	movs	r1, #5
   17a08:	47a0      	blx	r4
   17a0a:	4603      	mov	r3, r0
   17a0c:	e7cc      	b.n	179a8 <attsProcReadReq+0xa8>
       (ATTS_PERMIT_READ_AUTH | ATTS_PERMIT_READ_ENC)) && (secLevel < DM_SEC_LEVEL_ENC_AUTH))
   17a0e:	2801      	cmp	r0, #1
   17a10:	d8b0      	bhi.n	17974 <attsProcReadReq+0x74>
    return ATT_ERR_AUTH;
   17a12:	2305      	movs	r3, #5
   17a14:	e78a      	b.n	1792c <attsProcReadReq+0x2c>
}
   17a16:	b002      	add	sp, #8
   17a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return ATT_ERR_AUTHOR;
   17a1c:	2308      	movs	r3, #8
   17a1e:	e785      	b.n	1792c <attsProcReadReq+0x2c>
   17a20:	100057bc 	.word	0x100057bc

00017a24 <attsFindUuidInRange>:
 *  \return Attribute handle or ATT_HANDLE_NONE if not found.
 */
/*************************************************************************************************/
uint16_t attsFindUuidInRange(uint16_t startHandle, uint16_t endHandle, uint8_t uuidLen,
                             uint8_t *pUuid, attsAttr_t **pAttr, attsGroup_t **pAttrGroup)
{
   17a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17a28:	469a      	mov	sl, r3
  attsGroup_t *pGroup;

  /* iterate over attribute group list */
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   17a2a:	4b1e      	ldr	r3, [pc, #120]	; (17aa4 <attsFindUuidInRange+0x80>)
{
   17a2c:	9e08      	ldr	r6, [sp, #32]
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   17a2e:	681d      	ldr	r5, [r3, #0]
   17a30:	2d00      	cmp	r5, #0
   17a32:	d033      	beq.n	17a9c <attsFindUuidInRange+0x78>
   17a34:	4604      	mov	r4, r0
   17a36:	460f      	mov	r7, r1
   17a38:	4690      	mov	r8, r2
          *pAttrGroup = pGroup;
          return startHandle;
        }

        /* special case of max handle value */
        if (startHandle == ATT_HANDLE_MAX)
   17a3a:	f64f 79ff 	movw	r9, #65535	; 0xffff
   17a3e:	e004      	b.n	17a4a <attsFindUuidInRange+0x26>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   17a40:	8a6b      	ldrh	r3, [r5, #18]
   17a42:	42a3      	cmp	r3, r4
   17a44:	d224      	bcs.n	17a90 <attsFindUuidInRange+0x6c>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   17a46:	682d      	ldr	r5, [r5, #0]
   17a48:	b345      	cbz	r5, 17a9c <attsFindUuidInRange+0x78>
    if ((startHandle < pGroup->startHandle) && (endHandle >= pGroup->startHandle))
   17a4a:	8a28      	ldrh	r0, [r5, #16]
   17a4c:	42a0      	cmp	r0, r4
   17a4e:	d9f7      	bls.n	17a40 <attsFindUuidInRange+0x1c>
   17a50:	42b8      	cmp	r0, r7
   17a52:	d8f8      	bhi.n	17a46 <attsFindUuidInRange+0x22>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   17a54:	8a6b      	ldrh	r3, [r5, #18]
   17a56:	4283      	cmp	r3, r0
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   17a58:	4604      	mov	r4, r0
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   17a5a:	d3f4      	bcc.n	17a46 <attsFindUuidInRange+0x22>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   17a5c:	6868      	ldr	r0, [r5, #4]
   17a5e:	6030      	str	r0, [r6, #0]
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   17a60:	e00a      	b.n	17a78 <attsFindUuidInRange+0x54>
        if (startHandle == ATT_HANDLE_MAX)
   17a62:	454c      	cmp	r4, r9
   17a64:	d0ef      	beq.n	17a46 <attsFindUuidInRange+0x22>
        {
          break;
        }

        startHandle++;
        (*pAttr)++;
   17a66:	6830      	ldr	r0, [r6, #0]
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   17a68:	8a6a      	ldrh	r2, [r5, #18]
        startHandle++;
   17a6a:	b29c      	uxth	r4, r3
        (*pAttr)++;
   17a6c:	3010      	adds	r0, #16
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   17a6e:	42a2      	cmp	r2, r4
        (*pAttr)++;
   17a70:	6030      	str	r0, [r6, #0]
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   17a72:	d3e8      	bcc.n	17a46 <attsFindUuidInRange+0x22>
   17a74:	42a7      	cmp	r7, r4
   17a76:	d3e6      	bcc.n	17a46 <attsFindUuidInRange+0x22>
        if (attsUuidCmp(*pAttr, uuidLen, pUuid))
   17a78:	4652      	mov	r2, sl
   17a7a:	4641      	mov	r1, r8
   17a7c:	f7ff fdde 	bl	1763c <attsUuidCmp>
        startHandle++;
   17a80:	1c63      	adds	r3, r4, #1
        if (attsUuidCmp(*pAttr, uuidLen, pUuid))
   17a82:	2800      	cmp	r0, #0
   17a84:	d0ed      	beq.n	17a62 <attsFindUuidInRange+0x3e>
          *pAttrGroup = pGroup;
   17a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
          return startHandle;
   17a88:	4620      	mov	r0, r4
          *pAttrGroup = pGroup;
   17a8a:	601d      	str	r5, [r3, #0]
    }
  }

  /* no match found */
  return ATT_HANDLE_NONE;
}
   17a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   17a90:	1a23      	subs	r3, r4, r0
   17a92:	6868      	ldr	r0, [r5, #4]
   17a94:	eb00 1003 	add.w	r0, r0, r3, lsl #4
   17a98:	6030      	str	r0, [r6, #0]
   17a9a:	e7eb      	b.n	17a74 <attsFindUuidInRange+0x50>
  return ATT_HANDLE_NONE;
   17a9c:	2000      	movs	r0, #0
}
   17a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17aa2:	bf00      	nop
   17aa4:	100057bc 	.word	0x100057bc

00017aa8 <attsFindServiceGroupEnd>:
 *
 *  \return Service group end handle.
 */
/*************************************************************************************************/
uint16_t attsFindServiceGroupEnd(uint16_t startHandle)
{
   17aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint16_t      prevHandle;
  uint8_t       primSvcUuid[ATT_16_UUID_LEN] = {UINT16_TO_BYTES(ATT_UUID_PRIMARY_SERVICE)};
  uint8_t       secSvcUuid[ATT_16_UUID_LEN] = {UINT16_TO_BYTES(ATT_UUID_SECONDARY_SERVICE)};

  /* special case for max handle */
  if (startHandle == ATT_HANDLE_MAX)
   17aac:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   17ab0:	b082      	sub	sp, #8
  uint8_t       primSvcUuid[ATT_16_UUID_LEN] = {UINT16_TO_BYTES(ATT_UUID_PRIMARY_SERVICE)};
   17ab2:	f44f 5120 	mov.w	r1, #10240	; 0x2800
  uint8_t       secSvcUuid[ATT_16_UUID_LEN] = {UINT16_TO_BYTES(ATT_UUID_SECONDARY_SERVICE)};
   17ab6:	f642 0201 	movw	r2, #10241	; 0x2801
  if (startHandle == ATT_HANDLE_MAX)
   17aba:	4298      	cmp	r0, r3
  uint8_t       primSvcUuid[ATT_16_UUID_LEN] = {UINT16_TO_BYTES(ATT_UUID_PRIMARY_SERVICE)};
   17abc:	f8ad 1000 	strh.w	r1, [sp]
  uint8_t       secSvcUuid[ATT_16_UUID_LEN] = {UINT16_TO_BYTES(ATT_UUID_SECONDARY_SERVICE)};
   17ac0:	f8ad 2004 	strh.w	r2, [sp, #4]
  if (startHandle == ATT_HANDLE_MAX)
   17ac4:	d010      	beq.n	17ae8 <attsFindServiceGroupEnd+0x40>

  prevHandle = startHandle;
  startHandle++;

  /* iterate over attribute group list */
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   17ac6:	4b1d      	ldr	r3, [pc, #116]	; (17b3c <attsFindServiceGroupEnd+0x94>)
   17ac8:	681e      	ldr	r6, [r3, #0]
  startHandle++;
   17aca:	1c44      	adds	r4, r0, #1
   17acc:	4607      	mov	r7, r0
   17ace:	b2a4      	uxth	r4, r4
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   17ad0:	b156      	cbz	r6, 17ae8 <attsFindServiceGroupEnd+0x40>
  {
    /* if start handle is less than group start handle */
    if (startHandle < pGroup->startHandle)
   17ad2:	8a35      	ldrh	r5, [r6, #16]
      /* set start handle to first handle in group */
      startHandle = pGroup->startHandle;
    }

    /*  if start handle within handle range of group */
    if (startHandle <= pGroup->endHandle)
   17ad4:	8a73      	ldrh	r3, [r6, #18]
   17ad6:	42ac      	cmp	r4, r5
   17ad8:	bf38      	it	cc
   17ada:	462c      	movcc	r4, r5
   17adc:	b2a4      	uxth	r4, r4
   17ade:	42a3      	cmp	r3, r4
   17ae0:	d208      	bcs.n	17af4 <attsFindServiceGroupEnd+0x4c>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   17ae2:	6836      	ldr	r6, [r6, #0]
   17ae4:	2e00      	cmp	r6, #0
   17ae6:	d1f4      	bne.n	17ad2 <attsFindServiceGroupEnd+0x2a>
    return ATT_HANDLE_MAX;
   17ae8:	f64f 77ff 	movw	r7, #65535	; 0xffff
    }
  }

  /* next service not found; return 0xFFFF as the last handle in the database */
  return ATT_HANDLE_MAX;
}
   17aec:	4638      	mov	r0, r7
   17aee:	b002      	add	sp, #8
   17af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   17af4:	6873      	ldr	r3, [r6, #4]
   17af6:	1b65      	subs	r5, r4, r5
   17af8:	eb03 1505 	add.w	r5, r3, r5, lsl #4
        if (startHandle == ATT_HANDLE_MAX)
   17afc:	f64f 78ff 	movw	r8, #65535	; 0xffff
   17b00:	e00c      	b.n	17b1c <attsFindServiceGroupEnd+0x74>
            attsUuidCmp(pAttr, ATT_16_UUID_LEN, secSvcUuid))
   17b02:	f7ff fd9b 	bl	1763c <attsUuidCmp>
        startHandle++;
   17b06:	1c63      	adds	r3, r4, #1
   17b08:	b29b      	uxth	r3, r3
        if (attsUuidCmp(pAttr, ATT_16_UUID_LEN, primSvcUuid) ||
   17b0a:	2800      	cmp	r0, #0
   17b0c:	d1ee      	bne.n	17aec <attsFindServiceGroupEnd+0x44>
        if (startHandle == ATT_HANDLE_MAX)
   17b0e:	4544      	cmp	r4, r8
   17b10:	4627      	mov	r7, r4
   17b12:	d0e9      	beq.n	17ae8 <attsFindServiceGroupEnd+0x40>
      while (startHandle <= pGroup->endHandle)
   17b14:	8a72      	ldrh	r2, [r6, #18]
   17b16:	429a      	cmp	r2, r3
   17b18:	461c      	mov	r4, r3
   17b1a:	d3e2      	bcc.n	17ae2 <attsFindServiceGroupEnd+0x3a>
        if (attsUuidCmp(pAttr, ATT_16_UUID_LEN, primSvcUuid) ||
   17b1c:	466a      	mov	r2, sp
   17b1e:	2102      	movs	r1, #2
   17b20:	4628      	mov	r0, r5
   17b22:	f7ff fd8b 	bl	1763c <attsUuidCmp>
   17b26:	4603      	mov	r3, r0
            attsUuidCmp(pAttr, ATT_16_UUID_LEN, secSvcUuid))
   17b28:	aa01      	add	r2, sp, #4
   17b2a:	4628      	mov	r0, r5
   17b2c:	2102      	movs	r1, #2
        pAttr++;
   17b2e:	3510      	adds	r5, #16
        if (attsUuidCmp(pAttr, ATT_16_UUID_LEN, primSvcUuid) ||
   17b30:	2b00      	cmp	r3, #0
   17b32:	d0e6      	beq.n	17b02 <attsFindServiceGroupEnd+0x5a>
}
   17b34:	4638      	mov	r0, r7
   17b36:	b002      	add	sp, #8
   17b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17b3c:	100057bc 	.word	0x100057bc

00017b40 <attsProcReadBlobReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcReadBlobReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   17b40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint16_t    readLen;
  uint8_t     err = ATT_SUCCESS;

  /* parse handle and offset */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
  BSTREAM_TO_UINT16(handle, pPacket);
   17b44:	7a93      	ldrb	r3, [r2, #10]
   17b46:	7a54      	ldrb	r4, [r2, #9]
  BSTREAM_TO_UINT16(offset, pPacket);
   17b48:	7ad7      	ldrb	r7, [r2, #11]
   17b4a:	f892 800c 	ldrb.w	r8, [r2, #12]
  BSTREAM_TO_UINT16(handle, pPacket);
   17b4e:	eb04 2403 	add.w	r4, r4, r3, lsl #8
{
   17b52:	b085      	sub	sp, #20
  BSTREAM_TO_UINT16(handle, pPacket);
   17b54:	b2a4      	uxth	r4, r4
{
   17b56:	4606      	mov	r6, r0

  /* find attribute */
  if ((pAttr = attsFindByHandle(handle, &pGroup)) != NULL)
   17b58:	a903      	add	r1, sp, #12
   17b5a:	4620      	mov	r0, r4
   17b5c:	f7ff fda4 	bl	176a8 <attsFindByHandle>
   17b60:	2800      	cmp	r0, #0
   17b62:	d04c      	beq.n	17bfe <attsProcReadBlobReq+0xbe>
  {
    /* verify permissions */
    if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   17b64:	7bc3      	ldrb	r3, [r0, #15]
   17b66:	4605      	mov	r5, r0
   17b68:	4622      	mov	r2, r4
   17b6a:	7f30      	ldrb	r0, [r6, #28]
   17b6c:	2101      	movs	r1, #1
   17b6e:	f7ff fdb3 	bl	176d8 <attsPermissions>
   17b72:	4603      	mov	r3, r0
   17b74:	b138      	cbz	r0, 17b86 <attsProcReadBlobReq+0x46>
    err = ATT_ERR_HANDLE;
  }

  if (err)
  {
    attsErrRsp(pCcb->handle, ATT_PDU_READ_BLOB_REQ, handle, err);
   17b76:	8b30      	ldrh	r0, [r6, #24]
   17b78:	4622      	mov	r2, r4
   17b7a:	210c      	movs	r1, #12
   17b7c:	f7ff fc1c 	bl	173b8 <attsErrRsp>
  }
}
   17b80:	b005      	add	sp, #20
   17b82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (offset > *pAttr->pLen)
   17b86:	68ab      	ldr	r3, [r5, #8]
  BSTREAM_TO_UINT16(offset, pPacket);
   17b88:	eb07 2708 	add.w	r7, r7, r8, lsl #8
    else if (offset > *pAttr->pLen)
   17b8c:	881b      	ldrh	r3, [r3, #0]
  BSTREAM_TO_UINT16(offset, pPacket);
   17b8e:	b2bf      	uxth	r7, r7
    else if (offset > *pAttr->pLen)
   17b90:	42bb      	cmp	r3, r7
   17b92:	d336      	bcc.n	17c02 <attsProcReadBlobReq+0xc2>
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   17b94:	7baa      	ldrb	r2, [r5, #14]
   17b96:	0751      	lsls	r1, r2, #29
   17b98:	d535      	bpl.n	17c06 <attsProcReadBlobReq+0xc6>
          (pGroup->readCback != NULL))
   17b9a:	9903      	ldr	r1, [sp, #12]
   17b9c:	f8d1 8008 	ldr.w	r8, [r1, #8]
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   17ba0:	f1b8 0f00 	cmp.w	r8, #0
   17ba4:	d02f      	beq.n	17c06 <attsProcReadBlobReq+0xc6>
        err = (*pGroup->readCback)(pCcb->connId, handle, ATT_PDU_READ_BLOB_REQ, offset, pAttr);
   17ba6:	9500      	str	r5, [sp, #0]
   17ba8:	463b      	mov	r3, r7
   17baa:	7f30      	ldrb	r0, [r6, #28]
   17bac:	220c      	movs	r2, #12
   17bae:	4621      	mov	r1, r4
   17bb0:	47c0      	blx	r8
   17bb2:	4603      	mov	r3, r0
      if (err == ATT_SUCCESS)
   17bb4:	2b00      	cmp	r3, #0
   17bb6:	d1de      	bne.n	17b76 <attsProcReadBlobReq+0x36>
        readLen = ((*pAttr->pLen - offset) < (pCcb->mtu - ATT_READ_BLOB_RSP_LEN)) ?
   17bb8:	68ab      	ldr	r3, [r5, #8]
   17bba:	881b      	ldrh	r3, [r3, #0]
   17bbc:	8b74      	ldrh	r4, [r6, #26]
   17bbe:	1bda      	subs	r2, r3, r7
   17bc0:	3c01      	subs	r4, #1
                   (*pAttr->pLen - offset) : (pCcb->mtu - ATT_READ_BLOB_RSP_LEN);
   17bc2:	4294      	cmp	r4, r2
   17bc4:	bfa8      	it	ge
   17bc6:	4614      	movge	r4, r2
        readLen = ((*pAttr->pLen - offset) < (pCcb->mtu - ATT_READ_BLOB_RSP_LEN)) ?
   17bc8:	fa1f f984 	uxth.w	r9, r4
        if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_READ_BLOB_RSP_LEN + readLen)) != NULL)
   17bcc:	f109 0009 	add.w	r0, r9, #9
   17bd0:	b280      	uxth	r0, r0
   17bd2:	f000 ff01 	bl	189d8 <attMsgAlloc>
   17bd6:	4680      	mov	r8, r0
   17bd8:	2800      	cmp	r0, #0
   17bda:	d0d1      	beq.n	17b80 <attsProcReadBlobReq+0x40>
          UINT8_TO_BSTREAM(p, ATT_PDU_READ_BLOB_RSP);
   17bdc:	230d      	movs	r3, #13
   17bde:	7203      	strb	r3, [r0, #8]
          memcpy(p, (pAttr->pValue + offset), readLen);
   17be0:	6869      	ldr	r1, [r5, #4]
   17be2:	464a      	mov	r2, r9
   17be4:	4439      	add	r1, r7
   17be6:	3009      	adds	r0, #9
   17be8:	f7f4 fa8a 	bl	c100 <memcpy>
          L2cDataReq(L2C_CID_ATT, pCcb->handle, (ATT_READ_BLOB_RSP_LEN + readLen), pBuf);
   17bec:	f109 0201 	add.w	r2, r9, #1
   17bf0:	8b31      	ldrh	r1, [r6, #24]
   17bf2:	4643      	mov	r3, r8
   17bf4:	b292      	uxth	r2, r2
   17bf6:	2004      	movs	r0, #4
   17bf8:	f7fb fd9e 	bl	13738 <L2cDataReq>
  if (err)
   17bfc:	e7c0      	b.n	17b80 <attsProcReadBlobReq+0x40>
    err = ATT_ERR_HANDLE;
   17bfe:	2301      	movs	r3, #1
   17c00:	e7b9      	b.n	17b76 <attsProcReadBlobReq+0x36>
      err = ATT_ERR_OFFSET;
   17c02:	2307      	movs	r3, #7
   17c04:	e7b7      	b.n	17b76 <attsProcReadBlobReq+0x36>
      else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   17c06:	0692      	lsls	r2, r2, #26
   17c08:	d5d8      	bpl.n	17bbc <attsProcReadBlobReq+0x7c>
   17c0a:	4a07      	ldr	r2, [pc, #28]	; (17c28 <attsProcReadBlobReq+0xe8>)
   17c0c:	f8d2 8014 	ldr.w	r8, [r2, #20]
   17c10:	f1b8 0f00 	cmp.w	r8, #0
   17c14:	d0d2      	beq.n	17bbc <attsProcReadBlobReq+0x7c>
        err = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_READ, handle, pAttr->pValue);
   17c16:	686b      	ldr	r3, [r5, #4]
   17c18:	7f30      	ldrb	r0, [r6, #28]
   17c1a:	4622      	mov	r2, r4
   17c1c:	2105      	movs	r1, #5
   17c1e:	47c0      	blx	r8
   17c20:	4603      	mov	r3, r0
      if (err == ATT_SUCCESS)
   17c22:	2b00      	cmp	r3, #0
   17c24:	d1a7      	bne.n	17b76 <attsProcReadBlobReq+0x36>
   17c26:	e7c7      	b.n	17bb8 <attsProcReadBlobReq+0x78>
   17c28:	100057bc 	.word	0x100057bc

00017c2c <attsProcFindTypeReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcFindTypeReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   17c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c30:	ed2d 8b02 	vpush	{d8}
  uint16_t    nextHandle;
  uint8_t     err = ATT_SUCCESS;

  /* parse handles and uuid; pPacket then points to the value in the request */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
  BSTREAM_TO_UINT16(startHandle, pPacket);
   17c34:	7a93      	ldrb	r3, [r2, #10]
   17c36:	f892 9009 	ldrb.w	r9, [r2, #9]
{
   17c3a:	b087      	sub	sp, #28
  BSTREAM_TO_UINT16(startHandle, pPacket);
   17c3c:	eb09 2903 	add.w	r9, r9, r3, lsl #8
   17c40:	fa1f f389 	uxth.w	r3, r9
   17c44:	9301      	str	r3, [sp, #4]
{
   17c46:	4683      	mov	fp, r0

  /* set len to the value length */
  len -= ATT_FIND_TYPE_REQ_LEN;

  /* verify handles */
  if ((startHandle == 0) || (startHandle > endHandle))
   17c48:	b143      	cbz	r3, 17c5c <attsProcFindTypeReq+0x30>
  BSTREAM_TO_UINT16(endHandle, pPacket);
   17c4a:	7b13      	ldrb	r3, [r2, #12]
   17c4c:	7ad6      	ldrb	r6, [r2, #11]
   17c4e:	eb06 2603 	add.w	r6, r6, r3, lsl #8
  if ((startHandle == 0) || (startHandle > endHandle))
   17c52:	9b01      	ldr	r3, [sp, #4]
  BSTREAM_TO_UINT16(endHandle, pPacket);
   17c54:	b2b6      	uxth	r6, r6
  if ((startHandle == 0) || (startHandle > endHandle))
   17c56:	42b3      	cmp	r3, r6
   17c58:	4692      	mov	sl, r2
   17c5a:	d90e      	bls.n	17c7a <attsProcFindTypeReq+0x4e>
      err = ATT_ERR_RESOURCES;
    }
  }

  /* set channel as busy for service discovery */
  attsDiscBusy(pCcb);
   17c5c:	4658      	mov	r0, fp
   17c5e:	f7ff fbd5 	bl	1740c <attsDiscBusy>
    err = ATT_ERR_HANDLE;
   17c62:	2301      	movs	r3, #1
  {
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
  }
  else
  {
    attsErrRsp(pCcb->handle, ATT_PDU_FIND_TYPE_REQ, startHandle, err);
   17c64:	f8bb 0018 	ldrh.w	r0, [fp, #24]
   17c68:	9a01      	ldr	r2, [sp, #4]
   17c6a:	2106      	movs	r1, #6
  }
}
   17c6c:	b007      	add	sp, #28
   17c6e:	ecbd 8b02 	vpop	{d8}
   17c72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    attsErrRsp(pCcb->handle, ATT_PDU_FIND_TYPE_REQ, startHandle, err);
   17c76:	f7ff bb9f 	b.w	173b8 <attsErrRsp>
    if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   17c7a:	8b40      	ldrh	r0, [r0, #26]
   17c7c:	3008      	adds	r0, #8
   17c7e:	b280      	uxth	r0, r0
   17c80:	460c      	mov	r4, r1
   17c82:	f000 fea9 	bl	189d8 <attMsgAlloc>
   17c86:	9002      	str	r0, [sp, #8]
   17c88:	2800      	cmp	r0, #0
   17c8a:	f000 8091 	beq.w	17db0 <attsProcFindTypeReq+0x184>
  len -= ATT_FIND_TYPE_REQ_LEN;
   17c8e:	1fe1      	subs	r1, r4, #7
   17c90:	b28b      	uxth	r3, r1
   17c92:	9303      	str	r3, [sp, #12]
      UINT8_TO_BSTREAM(p, ATT_PDU_FIND_TYPE_RSP);
   17c94:	2307      	movs	r3, #7
   17c96:	7203      	strb	r3, [r0, #8]
  pPacket += ATT_16_UUID_LEN;
   17c98:	f10a 030f 	add.w	r3, sl, #15
      UINT8_TO_BSTREAM(p, ATT_PDU_FIND_TYPE_RSP);
   17c9c:	f100 0109 	add.w	r1, r0, #9
  pPacket += ATT_16_UUID_LEN;
   17ca0:	ee08 3a10 	vmov	s16, r3
      while ((handle = attsFindUuidInRange(handle, endHandle, ATT_16_UUID_LEN,
   17ca4:	9c01      	ldr	r4, [sp, #4]
   17ca6:	f8cd a010 	str.w	sl, [sp, #16]
  BSTREAM_TO_UINT16(endHandle, pPacket);
   17caa:	f10a 070d 	add.w	r7, sl, #13
      UINT8_TO_BSTREAM(p, ATT_PDU_FIND_TYPE_RSP);
   17cae:	9105      	str	r1, [sp, #20]
        if (startHandle == ATT_HANDLE_MAX)
   17cb0:	f64f 78ff 	movw	r8, #65535	; 0xffff
   17cb4:	468a      	mov	sl, r1
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   17cb6:	4b46      	ldr	r3, [pc, #280]	; (17dd0 <attsProcFindTypeReq+0x1a4>)
   17cb8:	681d      	ldr	r5, [r3, #0]
   17cba:	b92d      	cbnz	r5, 17cc8 <attsProcFindTypeReq+0x9c>
   17cbc:	e03a      	b.n	17d34 <attsProcFindTypeReq+0x108>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   17cbe:	8a6b      	ldrh	r3, [r5, #18]
   17cc0:	42a3      	cmp	r3, r4
   17cc2:	d231      	bcs.n	17d28 <attsProcFindTypeReq+0xfc>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   17cc4:	682d      	ldr	r5, [r5, #0]
   17cc6:	b3ad      	cbz	r5, 17d34 <attsProcFindTypeReq+0x108>
    if ((startHandle < pGroup->startHandle) && (endHandle >= pGroup->startHandle))
   17cc8:	f8b5 9010 	ldrh.w	r9, [r5, #16]
   17ccc:	454c      	cmp	r4, r9
   17cce:	d2f6      	bcs.n	17cbe <attsProcFindTypeReq+0x92>
   17cd0:	454e      	cmp	r6, r9
   17cd2:	d3f7      	bcc.n	17cc4 <attsProcFindTypeReq+0x98>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   17cd4:	8a6b      	ldrh	r3, [r5, #18]
   17cd6:	454b      	cmp	r3, r9
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   17cd8:	464c      	mov	r4, r9
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   17cda:	d3f3      	bcc.n	17cc4 <attsProcFindTypeReq+0x98>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   17cdc:	f8d5 9004 	ldr.w	r9, [r5, #4]
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   17ce0:	e009      	b.n	17cf6 <attsProcFindTypeReq+0xca>
        if (startHandle == ATT_HANDLE_MAX)
   17ce2:	4544      	cmp	r4, r8
        (*pAttr)++;
   17ce4:	f109 0910 	add.w	r9, r9, #16
        if (startHandle == ATT_HANDLE_MAX)
   17ce8:	d0ec      	beq.n	17cc4 <attsProcFindTypeReq+0x98>
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   17cea:	8a6a      	ldrh	r2, [r5, #18]
        startHandle++;
   17cec:	b29c      	uxth	r4, r3
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   17cee:	42a2      	cmp	r2, r4
   17cf0:	d3e8      	bcc.n	17cc4 <attsProcFindTypeReq+0x98>
   17cf2:	42a6      	cmp	r6, r4
   17cf4:	d3e6      	bcc.n	17cc4 <attsProcFindTypeReq+0x98>
        if (attsUuidCmp(*pAttr, uuidLen, pUuid))
   17cf6:	4648      	mov	r0, r9
   17cf8:	463a      	mov	r2, r7
   17cfa:	2102      	movs	r1, #2
   17cfc:	f7ff fc9e 	bl	1763c <attsUuidCmp>
        startHandle++;
   17d00:	1c63      	adds	r3, r4, #1
        if (attsUuidCmp(*pAttr, uuidLen, pUuid))
   17d02:	2800      	cmp	r0, #0
   17d04:	d0ed      	beq.n	17ce2 <attsProcFindTypeReq+0xb6>
      while ((handle = attsFindUuidInRange(handle, endHandle, ATT_16_UUID_LEN,
   17d06:	b1ac      	cbz	r4, 17d34 <attsProcFindTypeReq+0x108>
        if ((pAttr->permissions & ATTS_PERMIT_READ) &&
   17d08:	f899 200f 	ldrb.w	r2, [r9, #15]
   17d0c:	07d3      	lsls	r3, r2, #31
   17d0e:	d506      	bpl.n	17d1e <attsProcFindTypeReq+0xf2>
   17d10:	9b03      	ldr	r3, [sp, #12]
   17d12:	b373      	cbz	r3, 17d72 <attsProcFindTypeReq+0x146>
             ((len == *pAttr->pLen) && (memcmp(pPacket, pAttr->pValue, len) == 0))))
   17d14:	f8d9 2008 	ldr.w	r2, [r9, #8]
            ((len == 0) ||
   17d18:	8812      	ldrh	r2, [r2, #0]
   17d1a:	429a      	cmp	r2, r3
   17d1c:	d020      	beq.n	17d60 <attsProcFindTypeReq+0x134>
        if ((nextHandle >= endHandle) || (nextHandle == ATT_HANDLE_MAX))
   17d1e:	42b4      	cmp	r4, r6
   17d20:	d208      	bcs.n	17d34 <attsProcFindTypeReq+0x108>
        handle = nextHandle + 1;
   17d22:	3401      	adds	r4, #1
   17d24:	b2a4      	uxth	r4, r4
   17d26:	e7c6      	b.n	17cb6 <attsProcFindTypeReq+0x8a>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   17d28:	686b      	ldr	r3, [r5, #4]
   17d2a:	eba4 0909 	sub.w	r9, r4, r9
   17d2e:	eb03 1909 	add.w	r9, r3, r9, lsl #4
   17d32:	e7de      	b.n	17cf2 <attsProcFindTypeReq+0xc6>
      if (p == (pBuf + L2C_PAYLOAD_START + 1))
   17d34:	9b05      	ldr	r3, [sp, #20]
   17d36:	459a      	cmp	sl, r3
   17d38:	4654      	mov	r4, sl
   17d3a:	d041      	beq.n	17dc0 <attsProcFindTypeReq+0x194>
  attsDiscBusy(pCcb);
   17d3c:	4658      	mov	r0, fp
   17d3e:	f7ff fb65 	bl	1740c <attsDiscBusy>
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
   17d42:	9b02      	ldr	r3, [sp, #8]
   17d44:	f8bb 1018 	ldrh.w	r1, [fp, #24]
   17d48:	f103 0208 	add.w	r2, r3, #8
   17d4c:	1aa2      	subs	r2, r4, r2
   17d4e:	b292      	uxth	r2, r2
   17d50:	2004      	movs	r0, #4
}
   17d52:	b007      	add	sp, #28
   17d54:	ecbd 8b02 	vpop	{d8}
   17d58:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
   17d5c:	f7fb bcec 	b.w	13738 <L2cDataReq>
             ((len == *pAttr->pLen) && (memcmp(pPacket, pAttr->pValue, len) == 0))))
   17d60:	f8d9 1004 	ldr.w	r1, [r9, #4]
   17d64:	ee18 0a10 	vmov	r0, s16
   17d68:	461a      	mov	r2, r3
   17d6a:	f004 fea3 	bl	1cab4 <memcmp>
   17d6e:	2800      	cmp	r0, #0
   17d70:	d1d5      	bne.n	17d1e <attsProcFindTypeReq+0xf2>
          if (pUuid[0] == UINT16_TO_BYTE0(ATT_UUID_PRIMARY_SERVICE) &&
   17d72:	9a04      	ldr	r2, [sp, #16]
   17d74:	7b53      	ldrb	r3, [r2, #13]
   17d76:	b9cb      	cbnz	r3, 17dac <attsProcFindTypeReq+0x180>
   17d78:	7b93      	ldrb	r3, [r2, #14]
   17d7a:	2b28      	cmp	r3, #40	; 0x28
            nextHandle = attsFindServiceGroupEnd(handle);
   17d7c:	4620      	mov	r0, r4
          if (pUuid[0] == UINT16_TO_BYTE0(ATT_UUID_PRIMARY_SERVICE) &&
   17d7e:	d01c      	beq.n	17dba <attsProcFindTypeReq+0x18e>
          if ((p + (sizeof(uint16_t) * 2)) <= (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
   17d80:	f8bb 301a 	ldrh.w	r3, [fp, #26]
   17d84:	9a02      	ldr	r2, [sp, #8]
   17d86:	3308      	adds	r3, #8
   17d88:	4413      	add	r3, r2
   17d8a:	f10a 0204 	add.w	r2, sl, #4
   17d8e:	429a      	cmp	r2, r3
   17d90:	d8d0      	bhi.n	17d34 <attsProcFindTypeReq+0x108>
            UINT16_TO_BSTREAM(p, handle);
   17d92:	f88a 4000 	strb.w	r4, [sl]
            UINT16_TO_BSTREAM(p, nextHandle);
   17d96:	0a03      	lsrs	r3, r0, #8
            UINT16_TO_BSTREAM(p, handle);
   17d98:	0a24      	lsrs	r4, r4, #8
   17d9a:	f88a 4001 	strb.w	r4, [sl, #1]
            UINT16_TO_BSTREAM(p, nextHandle);
   17d9e:	f88a 0002 	strb.w	r0, [sl, #2]
   17da2:	f88a 3003 	strb.w	r3, [sl, #3]
          if ((p + (sizeof(uint16_t) * 2)) <= (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
   17da6:	4604      	mov	r4, r0
            UINT16_TO_BSTREAM(p, nextHandle);
   17da8:	4692      	mov	sl, r2
          if ((p + (sizeof(uint16_t) * 2)) <= (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
   17daa:	e7b8      	b.n	17d1e <attsProcFindTypeReq+0xf2>
   17dac:	4620      	mov	r0, r4
   17dae:	e7e7      	b.n	17d80 <attsProcFindTypeReq+0x154>
  attsDiscBusy(pCcb);
   17db0:	4658      	mov	r0, fp
   17db2:	f7ff fb2b 	bl	1740c <attsDiscBusy>
      err = ATT_ERR_RESOURCES;
   17db6:	2311      	movs	r3, #17
   17db8:	e754      	b.n	17c64 <attsProcFindTypeReq+0x38>
            nextHandle = attsFindServiceGroupEnd(handle);
   17dba:	f7ff fe75 	bl	17aa8 <attsFindServiceGroupEnd>
   17dbe:	e7df      	b.n	17d80 <attsProcFindTypeReq+0x154>
        WsfMsgFree(pBuf);
   17dc0:	9802      	ldr	r0, [sp, #8]
   17dc2:	f7f7 fdc9 	bl	f958 <WsfMsgFree>
  attsDiscBusy(pCcb);
   17dc6:	4658      	mov	r0, fp
   17dc8:	f7ff fb20 	bl	1740c <attsDiscBusy>
        err = ATT_ERR_NOT_FOUND;
   17dcc:	230a      	movs	r3, #10
   17dce:	e749      	b.n	17c64 <attsProcFindTypeReq+0x38>
   17dd0:	100057bc 	.word	0x100057bc

00017dd4 <attsProcReadTypeReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcReadTypeReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   17dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
  BSTREAM_TO_UINT16(startHandle, pPacket);
  BSTREAM_TO_UINT16(endHandle, pPacket);

  /* get and verify uuid length */
  uuidLen = len - ATT_READ_TYPE_REQ_LEN;
   17dd8:	3905      	subs	r1, #5
  BSTREAM_TO_UINT16(startHandle, pPacket);
   17dda:	7a93      	ldrb	r3, [r2, #10]
   17ddc:	7a54      	ldrb	r4, [r2, #9]
  uuidLen = len - ATT_READ_TYPE_REQ_LEN;
   17dde:	b2cd      	uxtb	r5, r1
  BSTREAM_TO_UINT16(startHandle, pPacket);
   17de0:	eb04 2403 	add.w	r4, r4, r3, lsl #8
  if (!((uuidLen == ATT_16_UUID_LEN) || (uuidLen == ATT_128_UUID_LEN)))
   17de4:	2d02      	cmp	r5, #2
{
   17de6:	b087      	sub	sp, #28
   17de8:	4617      	mov	r7, r2
   17dea:	4683      	mov	fp, r0
  BSTREAM_TO_UINT16(startHandle, pPacket);
   17dec:	b2a4      	uxth	r4, r4
  if (!((uuidLen == ATT_16_UUID_LEN) || (uuidLen == ATT_128_UUID_LEN)))
   17dee:	d00b      	beq.n	17e08 <attsProcReadTypeReq+0x34>
   17df0:	2d10      	cmp	r5, #16
   17df2:	d009      	beq.n	17e08 <attsProcReadTypeReq+0x34>
  {
    err = ATT_ERR_INVALID_PDU;
   17df4:	2304      	movs	r3, #4
  {
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
  }
  else
  {
    attsErrRsp(pCcb->handle, ATT_PDU_READ_TYPE_REQ, startHandle, err);
   17df6:	f8bb 0018 	ldrh.w	r0, [fp, #24]
   17dfa:	4622      	mov	r2, r4
   17dfc:	2108      	movs	r1, #8
  }
}
   17dfe:	b007      	add	sp, #28
   17e00:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    attsErrRsp(pCcb->handle, ATT_PDU_READ_TYPE_REQ, startHandle, err);
   17e04:	f7ff bad8 	b.w	173b8 <attsErrRsp>
  else if ((startHandle == 0) || (startHandle > endHandle))
   17e08:	b90c      	cbnz	r4, 17e0e <attsProcReadTypeReq+0x3a>
    err = ATT_ERR_HANDLE;
   17e0a:	2301      	movs	r3, #1
   17e0c:	e7f3      	b.n	17df6 <attsProcReadTypeReq+0x22>
  BSTREAM_TO_UINT16(endHandle, pPacket);
   17e0e:	7b3b      	ldrb	r3, [r7, #12]
   17e10:	f897 800b 	ldrb.w	r8, [r7, #11]
   17e14:	eb08 2803 	add.w	r8, r8, r3, lsl #8
   17e18:	fa1f f888 	uxth.w	r8, r8
  else if ((startHandle == 0) || (startHandle > endHandle))
   17e1c:	4544      	cmp	r4, r8
   17e1e:	d8f4      	bhi.n	17e0a <attsProcReadTypeReq+0x36>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   17e20:	4baf      	ldr	r3, [pc, #700]	; (180e0 <attsProcReadTypeReq+0x30c>)
   17e22:	681e      	ldr	r6, [r3, #0]
  BSTREAM_TO_UINT16(endHandle, pPacket);
   17e24:	f107 0a0d 	add.w	sl, r7, #13
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   17e28:	b946      	cbnz	r6, 17e3c <attsProcReadTypeReq+0x68>
   17e2a:	e109      	b.n	18040 <attsProcReadTypeReq+0x26c>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   17e2c:	8a73      	ldrh	r3, [r6, #18]
   17e2e:	42a3      	cmp	r3, r4
   17e30:	f080 80fd 	bcs.w	1802e <attsProcReadTypeReq+0x25a>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   17e34:	6836      	ldr	r6, [r6, #0]
   17e36:	2e00      	cmp	r6, #0
   17e38:	f000 8102 	beq.w	18040 <attsProcReadTypeReq+0x26c>
    if ((startHandle < pGroup->startHandle) && (endHandle >= pGroup->startHandle))
   17e3c:	f8b6 9010 	ldrh.w	r9, [r6, #16]
   17e40:	454c      	cmp	r4, r9
   17e42:	d2f3      	bcs.n	17e2c <attsProcReadTypeReq+0x58>
   17e44:	45c8      	cmp	r8, r9
   17e46:	d3f5      	bcc.n	17e34 <attsProcReadTypeReq+0x60>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   17e48:	8a73      	ldrh	r3, [r6, #18]
   17e4a:	454b      	cmp	r3, r9
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   17e4c:	464c      	mov	r4, r9
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   17e4e:	d3f1      	bcc.n	17e34 <attsProcReadTypeReq+0x60>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   17e50:	f8d6 9004 	ldr.w	r9, [r6, #4]
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   17e54:	e00b      	b.n	17e6e <attsProcReadTypeReq+0x9a>
        if (startHandle == ATT_HANDLE_MAX)
   17e56:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17e5a:	4294      	cmp	r4, r2
        (*pAttr)++;
   17e5c:	f109 0910 	add.w	r9, r9, #16
        if (startHandle == ATT_HANDLE_MAX)
   17e60:	d0e8      	beq.n	17e34 <attsProcReadTypeReq+0x60>
        startHandle++;
   17e62:	b29c      	uxth	r4, r3
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   17e64:	8a73      	ldrh	r3, [r6, #18]
   17e66:	42a3      	cmp	r3, r4
   17e68:	d3e4      	bcc.n	17e34 <attsProcReadTypeReq+0x60>
   17e6a:	45a0      	cmp	r8, r4
   17e6c:	d3e2      	bcc.n	17e34 <attsProcReadTypeReq+0x60>
        if (attsUuidCmp(*pAttr, uuidLen, pUuid))
   17e6e:	4648      	mov	r0, r9
   17e70:	4652      	mov	r2, sl
   17e72:	4629      	mov	r1, r5
   17e74:	f7ff fbe2 	bl	1763c <attsUuidCmp>
        startHandle++;
   17e78:	1c63      	adds	r3, r4, #1
        if (attsUuidCmp(*pAttr, uuidLen, pUuid))
   17e7a:	2800      	cmp	r0, #0
   17e7c:	d0eb      	beq.n	17e56 <attsProcReadTypeReq+0x82>
    if (handle == ATT_HANDLE_NONE)
   17e7e:	2c00      	cmp	r4, #0
   17e80:	f000 80de 	beq.w	18040 <attsProcReadTypeReq+0x26c>
    else if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   17e84:	f899 300f 	ldrb.w	r3, [r9, #15]
   17e88:	f89b 001c 	ldrb.w	r0, [fp, #28]
   17e8c:	4622      	mov	r2, r4
   17e8e:	2101      	movs	r1, #1
   17e90:	f7ff fc22 	bl	176d8 <attsPermissions>
   17e94:	4603      	mov	r3, r0
   17e96:	2800      	cmp	r0, #0
   17e98:	d1ad      	bne.n	17df6 <attsProcReadTypeReq+0x22>
    else if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   17e9a:	f899 200e 	ldrb.w	r2, [r9, #14]
   17e9e:	0750      	lsls	r0, r2, #29
   17ea0:	f140 80e8 	bpl.w	18074 <attsProcReadTypeReq+0x2a0>
             (pGroup->readCback != NULL))
   17ea4:	68b6      	ldr	r6, [r6, #8]
    else if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   17ea6:	2e00      	cmp	r6, #0
   17ea8:	f000 80e4 	beq.w	18074 <attsProcReadTypeReq+0x2a0>
      err = (*pGroup->readCback)(pCcb->connId, handle, ATT_PDU_READ_TYPE_REQ, 0, pAttr);
   17eac:	f8cd 9000 	str.w	r9, [sp]
   17eb0:	f89b 001c 	ldrb.w	r0, [fp, #28]
   17eb4:	2208      	movs	r2, #8
   17eb6:	4621      	mov	r1, r4
   17eb8:	47b0      	blx	r6
   17eba:	4603      	mov	r3, r0
    if (err == ATT_SUCCESS)
   17ebc:	2b00      	cmp	r3, #0
   17ebe:	d19a      	bne.n	17df6 <attsProcReadTypeReq+0x22>
      if ((memcmp(pPacket, attGattDbhChUuid, ATT_16_UUID_LEN) == 0) && attsCsfGetHashUpdateStatus())
   17ec0:	4b88      	ldr	r3, [pc, #544]	; (180e4 <attsProcReadTypeReq+0x310>)
   17ec2:	7b79      	ldrb	r1, [r7, #13]
   17ec4:	781a      	ldrb	r2, [r3, #0]
   17ec6:	4291      	cmp	r1, r2
   17ec8:	f000 80e7 	beq.w	1809a <attsProcReadTypeReq+0x2c6>
      if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   17ecc:	f8bb 001a 	ldrh.w	r0, [fp, #26]
   17ed0:	3008      	adds	r0, #8
   17ed2:	b280      	uxth	r0, r0
   17ed4:	f000 fd80 	bl	189d8 <attMsgAlloc>
   17ed8:	4606      	mov	r6, r0
   17eda:	2800      	cmp	r0, #0
   17edc:	f000 80db 	beq.w	18096 <attsProcReadTypeReq+0x2c2>
        UINT8_TO_BSTREAM(p, ATT_PDU_READ_TYPE_RSP);
   17ee0:	2309      	movs	r3, #9
   17ee2:	7203      	strb	r3, [r0, #8]
        attLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_TYPE_RSP_LEN - sizeof(uint16_t))) ?
   17ee4:	f8d9 3008 	ldr.w	r3, [r9, #8]
   17ee8:	881a      	ldrh	r2, [r3, #0]
   17eea:	f8bb 301a 	ldrh.w	r3, [fp, #26]
        UINT16_TO_BSTREAM(p, handle);
   17eee:	7284      	strb	r4, [r0, #10]
        attLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_TYPE_RSP_LEN - sizeof(uint16_t))) ?
   17ef0:	3b04      	subs	r3, #4
                  *pAttr->pLen : (pCcb->mtu - ATT_READ_TYPE_RSP_LEN - sizeof(uint16_t));
   17ef2:	4293      	cmp	r3, r2
   17ef4:	bf28      	it	cs
   17ef6:	4613      	movcs	r3, r2
        attLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_TYPE_RSP_LEN - sizeof(uint16_t))) ?
   17ef8:	b2da      	uxtb	r2, r3
        UINT8_TO_BSTREAM(p, attLen + sizeof(uint16_t));
   17efa:	1c97      	adds	r7, r2, #2
        UINT16_TO_BSTREAM(p, handle);
   17efc:	0a23      	lsrs	r3, r4, #8
        UINT8_TO_BSTREAM(p, attLen + sizeof(uint16_t));
   17efe:	7247      	strb	r7, [r0, #9]
        UINT16_TO_BSTREAM(p, handle);
   17f00:	72c3      	strb	r3, [r0, #11]
   17f02:	f100 030c 	add.w	r3, r0, #12
        memcpy(p, pAttr->pValue, attLen);
   17f06:	f8d9 1004 	ldr.w	r1, [r9, #4]
        UINT8_TO_BSTREAM(p, attLen + sizeof(uint16_t));
   17f0a:	9705      	str	r7, [sp, #20]
        memcpy(p, pAttr->pValue, attLen);
   17f0c:	4618      	mov	r0, r3
   17f0e:	4691      	mov	r9, r2
   17f10:	f7f4 f8f6 	bl	c100 <memcpy>
        handle++;
   17f14:	3401      	adds	r4, #1
   17f16:	e9cd b603 	strd	fp, r6, [sp, #12]
   17f1a:	b2a4      	uxth	r4, r4
        while ((handle = attsFindUuidInRange(handle, endHandle, uuidLen,
   17f1c:	19c7      	adds	r7, r0, r7
   17f1e:	46cb      	mov	fp, r9
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   17f20:	4b6f      	ldr	r3, [pc, #444]	; (180e0 <attsProcReadTypeReq+0x30c>)
   17f22:	f8d3 9000 	ldr.w	r9, [r3]
   17f26:	1ebb      	subs	r3, r7, #2
   17f28:	9302      	str	r3, [sp, #8]
   17f2a:	f1b9 0f00 	cmp.w	r9, #0
   17f2e:	f000 808f 	beq.w	18050 <attsProcReadTypeReq+0x27c>
   17f32:	464b      	mov	r3, r9
   17f34:	46a9      	mov	r9, r5
   17f36:	461d      	mov	r5, r3
   17f38:	e007      	b.n	17f4a <attsProcReadTypeReq+0x176>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   17f3a:	8a6b      	ldrh	r3, [r5, #18]
   17f3c:	42a3      	cmp	r3, r4
   17f3e:	f080 8082 	bcs.w	18046 <attsProcReadTypeReq+0x272>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   17f42:	682d      	ldr	r5, [r5, #0]
   17f44:	2d00      	cmp	r5, #0
   17f46:	f000 8083 	beq.w	18050 <attsProcReadTypeReq+0x27c>
    if ((startHandle < pGroup->startHandle) && (endHandle >= pGroup->startHandle))
   17f4a:	8a2e      	ldrh	r6, [r5, #16]
   17f4c:	42b4      	cmp	r4, r6
   17f4e:	d2f4      	bcs.n	17f3a <attsProcReadTypeReq+0x166>
   17f50:	45b0      	cmp	r8, r6
   17f52:	d3f6      	bcc.n	17f42 <attsProcReadTypeReq+0x16e>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   17f54:	8a6b      	ldrh	r3, [r5, #18]
   17f56:	42b3      	cmp	r3, r6
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   17f58:	4634      	mov	r4, r6
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   17f5a:	d3f2      	bcc.n	17f42 <attsProcReadTypeReq+0x16e>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   17f5c:	686e      	ldr	r6, [r5, #4]
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   17f5e:	e00d      	b.n	17f7c <attsProcReadTypeReq+0x1a8>
        if (startHandle == ATT_HANDLE_MAX)
   17f60:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17f64:	429c      	cmp	r4, r3
        (*pAttr)++;
   17f66:	f106 0610 	add.w	r6, r6, #16
        startHandle++;
   17f6a:	f104 0301 	add.w	r3, r4, #1
        if (startHandle == ATT_HANDLE_MAX)
   17f6e:	d0e8      	beq.n	17f42 <attsProcReadTypeReq+0x16e>
        startHandle++;
   17f70:	b29c      	uxth	r4, r3
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   17f72:	8a6b      	ldrh	r3, [r5, #18]
   17f74:	42a3      	cmp	r3, r4
   17f76:	d3e4      	bcc.n	17f42 <attsProcReadTypeReq+0x16e>
   17f78:	45a0      	cmp	r8, r4
   17f7a:	d3e2      	bcc.n	17f42 <attsProcReadTypeReq+0x16e>
        if (attsUuidCmp(*pAttr, uuidLen, pUuid))
   17f7c:	4630      	mov	r0, r6
   17f7e:	4652      	mov	r2, sl
   17f80:	4649      	mov	r1, r9
   17f82:	f7ff fb5b 	bl	1763c <attsUuidCmp>
   17f86:	2800      	cmp	r0, #0
   17f88:	d0ea      	beq.n	17f60 <attsProcReadTypeReq+0x18c>
        while ((handle = attsFindUuidInRange(handle, endHandle, uuidLen,
   17f8a:	462b      	mov	r3, r5
   17f8c:	464d      	mov	r5, r9
   17f8e:	4699      	mov	r9, r3
   17f90:	2c00      	cmp	r4, #0
   17f92:	d05d      	beq.n	18050 <attsProcReadTypeReq+0x27c>
          if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   17f94:	7bb3      	ldrb	r3, [r6, #14]
   17f96:	075a      	lsls	r2, r3, #29
   17f98:	d55d      	bpl.n	18056 <attsProcReadTypeReq+0x282>
              (pGroup->readCback != NULL))
   17f9a:	f8d9 9008 	ldr.w	r9, [r9, #8]
          if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   17f9e:	f1b9 0f00 	cmp.w	r9, #0
   17fa2:	d058      	beq.n	18056 <attsProcReadTypeReq+0x282>
            cbackErr = (*pGroup->readCback)(pCcb->connId, handle, ATT_PDU_READ_TYPE_REQ, 0, pAttr);
   17fa4:	9b03      	ldr	r3, [sp, #12]
   17fa6:	9600      	str	r6, [sp, #0]
   17fa8:	7f18      	ldrb	r0, [r3, #28]
   17faa:	2208      	movs	r2, #8
   17fac:	2300      	movs	r3, #0
   17fae:	4621      	mov	r1, r4
   17fb0:	47c8      	blx	r9
          if ((cbackErr == ATT_SUCCESS) &&
   17fb2:	2800      	cmp	r0, #0
   17fb4:	d14c      	bne.n	18050 <attsProcReadTypeReq+0x27c>
              (*pAttr->pLen == attLen) &&
   17fb6:	68b3      	ldr	r3, [r6, #8]
          if ((cbackErr == ATT_SUCCESS) &&
   17fb8:	881b      	ldrh	r3, [r3, #0]
   17fba:	455b      	cmp	r3, fp
   17fbc:	d148      	bne.n	18050 <attsProcReadTypeReq+0x27c>
              (attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   17fbe:	9a03      	ldr	r2, [sp, #12]
   17fc0:	7bf3      	ldrb	r3, [r6, #15]
   17fc2:	7f10      	ldrb	r0, [r2, #28]
   17fc4:	2101      	movs	r1, #1
   17fc6:	4622      	mov	r2, r4
   17fc8:	f7ff fb86 	bl	176d8 <attsPermissions>
              (*pAttr->pLen == attLen) &&
   17fcc:	2800      	cmp	r0, #0
   17fce:	d13f      	bne.n	18050 <attsProcReadTypeReq+0x27c>
            if ((p + attLen + sizeof(uint16_t)) <= (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
   17fd0:	9a03      	ldr	r2, [sp, #12]
   17fd2:	8b53      	ldrh	r3, [r2, #26]
   17fd4:	9a04      	ldr	r2, [sp, #16]
   17fd6:	3308      	adds	r3, #8
   17fd8:	4413      	add	r3, r2
   17fda:	eb0b 0907 	add.w	r9, fp, r7
   17fde:	4599      	cmp	r9, r3
   17fe0:	d875      	bhi.n	180ce <attsProcReadTypeReq+0x2fa>
              UINT16_TO_BSTREAM(p, handle);
   17fe2:	0a23      	lsrs	r3, r4, #8
   17fe4:	f807 3c01 	strb.w	r3, [r7, #-1]
   17fe8:	f807 4c02 	strb.w	r4, [r7, #-2]
              memcpy(p, pAttr->pValue, attLen);
   17fec:	6871      	ldr	r1, [r6, #4]
   17fee:	465a      	mov	r2, fp
   17ff0:	4638      	mov	r0, r7
   17ff2:	f7f4 f885 	bl	c100 <memcpy>
          if (handle == ATT_HANDLE_MAX)
   17ff6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17ffa:	429c      	cmp	r4, r3
   17ffc:	d005      	beq.n	1800a <attsProcReadTypeReq+0x236>
          if (++handle > endHandle)
   17ffe:	3401      	adds	r4, #1
   18000:	9b05      	ldr	r3, [sp, #20]
   18002:	b2a4      	uxth	r4, r4
   18004:	45a0      	cmp	r8, r4
   18006:	441f      	add	r7, r3
   18008:	d28a      	bcs.n	17f20 <attsProcReadTypeReq+0x14c>
   1800a:	e9dd b603 	ldrd	fp, r6, [sp, #12]
   1800e:	f8cd 9008 	str.w	r9, [sp, #8]
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
   18012:	9b02      	ldr	r3, [sp, #8]
   18014:	f8bb 1018 	ldrh.w	r1, [fp, #24]
   18018:	f106 0208 	add.w	r2, r6, #8
   1801c:	1a9a      	subs	r2, r3, r2
   1801e:	b292      	uxth	r2, r2
   18020:	4633      	mov	r3, r6
   18022:	2004      	movs	r0, #4
}
   18024:	b007      	add	sp, #28
   18026:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
   1802a:	f7fb bb85 	b.w	13738 <L2cDataReq>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   1802e:	6873      	ldr	r3, [r6, #4]
   18030:	eba4 0909 	sub.w	r9, r4, r9
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   18034:	4544      	cmp	r4, r8
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   18036:	eb03 1909 	add.w	r9, r3, r9, lsl #4
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   1803a:	f67f af18 	bls.w	17e6e <attsProcReadTypeReq+0x9a>
   1803e:	e6f9      	b.n	17e34 <attsProcReadTypeReq+0x60>
      err = ATT_ERR_NOT_FOUND;
   18040:	230a      	movs	r3, #10
    startHandle = handle;
   18042:	2400      	movs	r4, #0
   18044:	e6d7      	b.n	17df6 <attsProcReadTypeReq+0x22>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   18046:	686b      	ldr	r3, [r5, #4]
   18048:	1ba6      	subs	r6, r4, r6
   1804a:	eb03 1606 	add.w	r6, r3, r6, lsl #4
   1804e:	e793      	b.n	17f78 <attsProcReadTypeReq+0x1a4>
   18050:	e9dd b603 	ldrd	fp, r6, [sp, #12]
   18054:	e7dd      	b.n	18012 <attsProcReadTypeReq+0x23e>
          else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   18056:	069b      	lsls	r3, r3, #26
   18058:	d5ad      	bpl.n	17fb6 <attsProcReadTypeReq+0x1e2>
   1805a:	4b21      	ldr	r3, [pc, #132]	; (180e0 <attsProcReadTypeReq+0x30c>)
   1805c:	f8d3 9014 	ldr.w	r9, [r3, #20]
   18060:	f1b9 0f00 	cmp.w	r9, #0
   18064:	d0a7      	beq.n	17fb6 <attsProcReadTypeReq+0x1e2>
            cbackErr = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_READ, handle, pAttr->pValue);
   18066:	9a03      	ldr	r2, [sp, #12]
   18068:	6873      	ldr	r3, [r6, #4]
   1806a:	7f10      	ldrb	r0, [r2, #28]
   1806c:	2105      	movs	r1, #5
   1806e:	4622      	mov	r2, r4
   18070:	47c8      	blx	r9
   18072:	e79e      	b.n	17fb2 <attsProcReadTypeReq+0x1de>
    else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   18074:	0691      	lsls	r1, r2, #26
   18076:	f57f af23 	bpl.w	17ec0 <attsProcReadTypeReq+0xec>
   1807a:	4b19      	ldr	r3, [pc, #100]	; (180e0 <attsProcReadTypeReq+0x30c>)
   1807c:	695e      	ldr	r6, [r3, #20]
   1807e:	2e00      	cmp	r6, #0
   18080:	f43f af1e 	beq.w	17ec0 <attsProcReadTypeReq+0xec>
      err = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_READ, handle, pAttr->pValue);
   18084:	f8d9 3004 	ldr.w	r3, [r9, #4]
   18088:	f89b 001c 	ldrb.w	r0, [fp, #28]
   1808c:	4622      	mov	r2, r4
   1808e:	2105      	movs	r1, #5
   18090:	47b0      	blx	r6
   18092:	4603      	mov	r3, r0
   18094:	e712      	b.n	17ebc <attsProcReadTypeReq+0xe8>
        err = ATT_ERR_RESOURCES;
   18096:	2311      	movs	r3, #17
   18098:	e6ad      	b.n	17df6 <attsProcReadTypeReq+0x22>
      if ((memcmp(pPacket, attGattDbhChUuid, ATT_16_UUID_LEN) == 0) && attsCsfGetHashUpdateStatus())
   1809a:	785b      	ldrb	r3, [r3, #1]
   1809c:	f89a 2001 	ldrb.w	r2, [sl, #1]
   180a0:	429a      	cmp	r2, r3
   180a2:	f47f af13 	bne.w	17ecc <attsProcReadTypeReq+0xf8>
   180a6:	f7fe ff17 	bl	16ed8 <attsCsfGetHashUpdateStatus>
   180aa:	2800      	cmp	r0, #0
   180ac:	f43f af0e 	beq.w	17ecc <attsProcReadTypeReq+0xf8>
        pCcb->pPendDbHashRsp = WsfBufAlloc(sizeof(attPendDbHashRsp_t));
   180b0:	2004      	movs	r0, #4
   180b2:	f7f7 fbe9 	bl	f888 <WsfBufAlloc>
   180b6:	f8cb 0020 	str.w	r0, [fp, #32]
        if (pCcb->pPendDbHashRsp)
   180ba:	b160      	cbz	r0, 180d6 <attsProcReadTypeReq+0x302>
          pCcb->pPendDbHashRsp->startHandle = startHandle;
   180bc:	2300      	movs	r3, #0
   180be:	f364 030f 	bfi	r3, r4, #0, #16
   180c2:	f364 431f 	bfi	r3, r4, #16, #16
   180c6:	6003      	str	r3, [r0, #0]
}
   180c8:	b007      	add	sp, #28
   180ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   180ce:	f8dd b00c 	ldr.w	fp, [sp, #12]
   180d2:	4616      	mov	r6, r2
   180d4:	e79d      	b.n	18012 <attsProcReadTypeReq+0x23e>
          attsErrRsp(pCcb->handle, ATT_PDU_READ_TYPE_REQ, startHandle, ATT_ERR_RESOURCES);
   180d6:	f8bb 0018 	ldrh.w	r0, [fp, #24]
   180da:	2311      	movs	r3, #17
   180dc:	e68d      	b.n	17dfa <attsProcReadTypeReq+0x26>
   180de:	bf00      	nop
   180e0:	100057bc 	.word	0x100057bc
   180e4:	000202c0 	.word	0x000202c0

000180e8 <attsProcReadMultReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcReadMultReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   180e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   180ec:	4607      	mov	r7, r0

  /* points to first handle */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;

  /* allocate max size buffer for response */
  if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   180ee:	8b40      	ldrh	r0, [r0, #26]
   180f0:	3008      	adds	r0, #8
{
   180f2:	b087      	sub	sp, #28
  if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   180f4:	b280      	uxth	r0, r0
{
   180f6:	460c      	mov	r4, r1
   180f8:	4616      	mov	r6, r2
  if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   180fa:	f000 fc6d 	bl	189d8 <attMsgAlloc>
   180fe:	4682      	mov	sl, r0
   18100:	2800      	cmp	r0, #0
   18102:	d07d      	beq.n	18200 <attsProcReadMultReq+0x118>
  {
    p = pBuf + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, ATT_PDU_READ_MULT_RSP);
   18104:	220f      	movs	r2, #15
  pEnd = pPacket + L2C_PAYLOAD_START + len;
   18106:	f104 0108 	add.w	r1, r4, #8
   1810a:	1873      	adds	r3, r6, r1
    UINT8_TO_BSTREAM(p, ATT_PDU_READ_MULT_RSP);
   1810c:	7202      	strb	r2, [r0, #8]
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
   1810e:	f106 0209 	add.w	r2, r6, #9

    /* while there are handles remaining and there is space in response buffer */
    while (pPacket < pEnd)
   18112:	4293      	cmp	r3, r2
    UINT8_TO_BSTREAM(p, ATT_PDU_READ_MULT_RSP);
   18114:	f100 0809 	add.w	r8, r0, #9
    while (pPacket < pEnd)
   18118:	d965      	bls.n	181e6 <attsProcReadMultReq+0xfe>
   1811a:	eba3 0906 	sub.w	r9, r3, r6
   1811e:	f1a9 090a 	sub.w	r9, r9, #10
   18122:	f106 030d 	add.w	r3, r6, #13
   18126:	f029 0901 	bic.w	r9, r9, #1
   1812a:	4499      	add	r9, r3
   1812c:	360b      	adds	r6, #11
   1812e:	e014      	b.n	1815a <attsProcReadMultReq+0x72>
        break;
      }

      /* call read callback if desired */
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
          (pGroup->readCback != NULL))
   18130:	9a05      	ldr	r2, [sp, #20]
   18132:	f8d2 b008 	ldr.w	fp, [r2, #8]
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   18136:	f1bb 0f00 	cmp.w	fp, #0
   1813a:	d026      	beq.n	1818a <attsProcReadMultReq+0xa2>
      {
        err = (*pGroup->readCback)(pCcb->connId, handle, ATT_PDU_READ_MULT_REQ, 0, pAttr);
   1813c:	9500      	str	r5, [sp, #0]
   1813e:	4603      	mov	r3, r0
   18140:	220e      	movs	r2, #14
   18142:	7f38      	ldrb	r0, [r7, #28]
   18144:	4621      	mov	r1, r4
   18146:	47d8      	blx	fp
        if (err != ATT_SUCCESS)
   18148:	bb70      	cbnz	r0, 181a8 <attsProcReadMultReq+0xc0>
        {
          break;
        }
      }

      if (p < (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
   1814a:	8b7a      	ldrh	r2, [r7, #26]
   1814c:	3208      	adds	r2, #8
   1814e:	4452      	add	r2, sl
   18150:	4542      	cmp	r2, r8
   18152:	d837      	bhi.n	181c4 <attsProcReadMultReq+0xdc>
    while (pPacket < pEnd)
   18154:	3602      	adds	r6, #2
   18156:	45b1      	cmp	r9, r6
   18158:	d045      	beq.n	181e6 <attsProcReadMultReq+0xfe>
      BSTREAM_TO_UINT16(handle, pPacket);
   1815a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   1815e:	f816 4c02 	ldrb.w	r4, [r6, #-2]
   18162:	eb04 2403 	add.w	r4, r4, r3, lsl #8
   18166:	b2a4      	uxth	r4, r4
      if ((pAttr = attsFindByHandle(handle, &pGroup)) == NULL)
   18168:	a905      	add	r1, sp, #20
   1816a:	4620      	mov	r0, r4
   1816c:	f7ff fa9c 	bl	176a8 <attsFindByHandle>
   18170:	4605      	mov	r5, r0
   18172:	2800      	cmp	r0, #0
   18174:	d047      	beq.n	18206 <attsProcReadMultReq+0x11e>
      if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   18176:	7bc3      	ldrb	r3, [r0, #15]
   18178:	7f38      	ldrb	r0, [r7, #28]
   1817a:	4622      	mov	r2, r4
   1817c:	2101      	movs	r1, #1
   1817e:	f7ff faab 	bl	176d8 <attsPermissions>
   18182:	b988      	cbnz	r0, 181a8 <attsProcReadMultReq+0xc0>
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   18184:	7bab      	ldrb	r3, [r5, #14]
   18186:	075a      	lsls	r2, r3, #29
   18188:	d4d2      	bmi.n	18130 <attsProcReadMultReq+0x48>
      else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   1818a:	069b      	lsls	r3, r3, #26
   1818c:	d5dd      	bpl.n	1814a <attsProcReadMultReq+0x62>
   1818e:	4b1f      	ldr	r3, [pc, #124]	; (1820c <attsProcReadMultReq+0x124>)
   18190:	f8d3 b014 	ldr.w	fp, [r3, #20]
   18194:	f1bb 0f00 	cmp.w	fp, #0
   18198:	d0d7      	beq.n	1814a <attsProcReadMultReq+0x62>
        err = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_READ, handle, pAttr->pValue);
   1819a:	686b      	ldr	r3, [r5, #4]
   1819c:	7f38      	ldrb	r0, [r7, #28]
   1819e:	4622      	mov	r2, r4
   181a0:	2105      	movs	r1, #5
   181a2:	47d8      	blx	fp
        if (err != ATT_SUCCESS)
   181a4:	2800      	cmp	r0, #0
   181a6:	d0d0      	beq.n	1814a <attsProcReadMultReq+0x62>
   181a8:	4603      	mov	r3, r0
  else
  {
    /* discard response buffer */
    if (pBuf != NULL)
    {
      WsfMsgFree(pBuf);
   181aa:	4650      	mov	r0, sl
   181ac:	9303      	str	r3, [sp, #12]
   181ae:	f7f7 fbd3 	bl	f958 <WsfMsgFree>
   181b2:	9b03      	ldr	r3, [sp, #12]
    }

    attsErrRsp(pCcb->handle, ATT_PDU_READ_MULT_REQ, handle, err);
   181b4:	8b38      	ldrh	r0, [r7, #24]
   181b6:	4622      	mov	r2, r4
   181b8:	210e      	movs	r1, #14
   181ba:	f7ff f8fd 	bl	173b8 <attsErrRsp>
  }
}
   181be:	b007      	add	sp, #28
   181c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        readLen = (*pAttr->pLen < readLen) ? *pAttr->pLen : readLen;
   181c4:	68ab      	ldr	r3, [r5, #8]
        memcpy(p, pAttr->pValue, readLen);
   181c6:	6869      	ldr	r1, [r5, #4]
        readLen = (*pAttr->pLen < readLen) ? *pAttr->pLen : readLen;
   181c8:	881c      	ldrh	r4, [r3, #0]
        readLen = (pBuf + pCcb->mtu + L2C_PAYLOAD_START) - p;
   181ca:	eba2 0208 	sub.w	r2, r2, r8
   181ce:	b292      	uxth	r2, r2
        memcpy(p, pAttr->pValue, readLen);
   181d0:	4294      	cmp	r4, r2
   181d2:	bf28      	it	cs
   181d4:	4614      	movcs	r4, r2
   181d6:	4640      	mov	r0, r8
   181d8:	4622      	mov	r2, r4
    while (pPacket < pEnd)
   181da:	3602      	adds	r6, #2
        memcpy(p, pAttr->pValue, readLen);
   181dc:	f7f3 ff90 	bl	c100 <memcpy>
    while (pPacket < pEnd)
   181e0:	45b1      	cmp	r9, r6
        p += readLen;
   181e2:	44a0      	add	r8, r4
    while (pPacket < pEnd)
   181e4:	d1b9      	bne.n	1815a <attsProcReadMultReq+0x72>
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
   181e6:	f10a 0208 	add.w	r2, sl, #8
   181ea:	eba8 0202 	sub.w	r2, r8, r2
   181ee:	8b39      	ldrh	r1, [r7, #24]
   181f0:	4653      	mov	r3, sl
   181f2:	b292      	uxth	r2, r2
   181f4:	2004      	movs	r0, #4
   181f6:	f7fb fa9f 	bl	13738 <L2cDataReq>
}
   181fa:	b007      	add	sp, #28
   181fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = ATT_ERR_RESOURCES;
   18200:	2311      	movs	r3, #17
  uint16_t    handle = ATT_HANDLE_NONE;
   18202:	4604      	mov	r4, r0
   18204:	e7d6      	b.n	181b4 <attsProcReadMultReq+0xcc>
        err = ATT_ERR_HANDLE;
   18206:	2301      	movs	r3, #1
   18208:	e7cf      	b.n	181aa <attsProcReadMultReq+0xc2>
   1820a:	bf00      	nop
   1820c:	100057bc 	.word	0x100057bc

00018210 <attsProcReadGroupTypeReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcReadGroupTypeReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   18210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18214:	b089      	sub	sp, #36	; 0x24
  uint16_t    endHandle;
  uint16_t    handle;
  uint8_t     uuidLen;
  uint8_t     attLen;
  uint8_t     err = ATT_SUCCESS;
  uint8_t     primSvcUuid[ATT_16_UUID_LEN] = {UINT16_TO_BYTES(ATT_UUID_PRIMARY_SERVICE)};
   18216:	f44f 5320 	mov.w	r3, #10240	; 0x2800

  /* parse handles; pPacket then points to the uuid */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
  BSTREAM_TO_UINT16(startHandle, pPacket);
   1821a:	f892 8009 	ldrb.w	r8, [r2, #9]
  uint8_t     primSvcUuid[ATT_16_UUID_LEN] = {UINT16_TO_BYTES(ATT_UUID_PRIMARY_SERVICE)};
   1821e:	f8ad 301c 	strh.w	r3, [sp, #28]
  BSTREAM_TO_UINT16(endHandle, pPacket);

  /* get and verify uuid length */
  uuidLen = len - ATT_READ_GROUP_TYPE_REQ_LEN;
   18222:	3905      	subs	r1, #5
  BSTREAM_TO_UINT16(startHandle, pPacket);
   18224:	7a93      	ldrb	r3, [r2, #10]
  uuidLen = len - ATT_READ_GROUP_TYPE_REQ_LEN;
   18226:	b2cc      	uxtb	r4, r1
  BSTREAM_TO_UINT16(startHandle, pPacket);
   18228:	eb08 2803 	add.w	r8, r8, r3, lsl #8
  if (!((uuidLen == ATT_16_UUID_LEN) || (uuidLen == ATT_128_UUID_LEN)))
   1822c:	2c02      	cmp	r4, #2
{
   1822e:	4606      	mov	r6, r0
  BSTREAM_TO_UINT16(startHandle, pPacket);
   18230:	fa1f f888 	uxth.w	r8, r8
  if (!((uuidLen == ATT_16_UUID_LEN) || (uuidLen == ATT_128_UUID_LEN)))
   18234:	d00c      	beq.n	18250 <attsProcReadGroupTypeReq+0x40>
   18236:	2c10      	cmp	r4, #16
   18238:	d00a      	beq.n	18250 <attsProcReadGroupTypeReq+0x40>
      }
    }
  }

  /* set channel as busy for service discovery */
  attsDiscBusy(pCcb);
   1823a:	f7ff f8e7 	bl	1740c <attsDiscBusy>
    err = ATT_ERR_INVALID_PDU;
   1823e:	2304      	movs	r3, #4
  {
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
  }
  else
  {
    attsErrRsp(pCcb->handle, ATT_PDU_READ_GROUP_TYPE_REQ, startHandle, err);
   18240:	8b30      	ldrh	r0, [r6, #24]
   18242:	4642      	mov	r2, r8
   18244:	2110      	movs	r1, #16
   18246:	f7ff f8b7 	bl	173b8 <attsErrRsp>
  }
}
   1824a:	b009      	add	sp, #36	; 0x24
   1824c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if ((startHandle == 0) || (startHandle > endHandle))
   18250:	f1b8 0f00 	cmp.w	r8, #0
   18254:	d104      	bne.n	18260 <attsProcReadGroupTypeReq+0x50>
  attsDiscBusy(pCcb);
   18256:	4630      	mov	r0, r6
   18258:	f7ff f8d8 	bl	1740c <attsDiscBusy>
    err = ATT_ERR_HANDLE;
   1825c:	2301      	movs	r3, #1
   1825e:	e7ef      	b.n	18240 <attsProcReadGroupTypeReq+0x30>
  BSTREAM_TO_UINT16(endHandle, pPacket);
   18260:	7b13      	ldrb	r3, [r2, #12]
   18262:	7ad7      	ldrb	r7, [r2, #11]
   18264:	eb07 2703 	add.w	r7, r7, r3, lsl #8
   18268:	b2bf      	uxth	r7, r7
  else if ((startHandle == 0) || (startHandle > endHandle))
   1826a:	45b8      	cmp	r8, r7
   1826c:	d8f3      	bhi.n	18256 <attsProcReadGroupTypeReq+0x46>
  BSTREAM_TO_UINT16(endHandle, pPacket);
   1826e:	f102 050d 	add.w	r5, r2, #13
  else if (!attsUuid16Cmp(primSvcUuid, uuidLen, pPacket))
   18272:	462a      	mov	r2, r5
   18274:	4621      	mov	r1, r4
   18276:	a807      	add	r0, sp, #28
   18278:	f7ff fa02 	bl	17680 <attsUuid16Cmp>
   1827c:	b920      	cbnz	r0, 18288 <attsProcReadGroupTypeReq+0x78>
  attsDiscBusy(pCcb);
   1827e:	4630      	mov	r0, r6
   18280:	f7ff f8c4 	bl	1740c <attsDiscBusy>
    err = ATT_ERR_GROUP_TYPE;
   18284:	2310      	movs	r3, #16
   18286:	e7db      	b.n	18240 <attsProcReadGroupTypeReq+0x30>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   18288:	4b8d      	ldr	r3, [pc, #564]	; (184c0 <attsProcReadGroupTypeReq+0x2b0>)
   1828a:	f8d3 a000 	ldr.w	sl, [r3]
   1828e:	f1ba 0f00 	cmp.w	sl, #0
   18292:	d046      	beq.n	18322 <attsProcReadGroupTypeReq+0x112>
        if (startHandle == ATT_HANDLE_MAX)
   18294:	4653      	mov	r3, sl
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   18296:	46c1      	mov	r9, r8
        if (startHandle == ATT_HANDLE_MAX)
   18298:	46a2      	mov	sl, r4
   1829a:	461c      	mov	r4, r3
   1829c:	e005      	b.n	182aa <attsProcReadGroupTypeReq+0x9a>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   1829e:	8a63      	ldrh	r3, [r4, #18]
   182a0:	454b      	cmp	r3, r9
   182a2:	d238      	bcs.n	18316 <attsProcReadGroupTypeReq+0x106>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   182a4:	6824      	ldr	r4, [r4, #0]
   182a6:	2c00      	cmp	r4, #0
   182a8:	d03b      	beq.n	18322 <attsProcReadGroupTypeReq+0x112>
    if ((startHandle < pGroup->startHandle) && (endHandle >= pGroup->startHandle))
   182aa:	f8b4 b010 	ldrh.w	fp, [r4, #16]
   182ae:	45cb      	cmp	fp, r9
   182b0:	d9f5      	bls.n	1829e <attsProcReadGroupTypeReq+0x8e>
   182b2:	455f      	cmp	r7, fp
   182b4:	d3f6      	bcc.n	182a4 <attsProcReadGroupTypeReq+0x94>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   182b6:	8a63      	ldrh	r3, [r4, #18]
   182b8:	455b      	cmp	r3, fp
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   182ba:	46d9      	mov	r9, fp
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   182bc:	d3f2      	bcc.n	182a4 <attsProcReadGroupTypeReq+0x94>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   182be:	f8d4 b004 	ldr.w	fp, [r4, #4]
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   182c2:	e00e      	b.n	182e2 <attsProcReadGroupTypeReq+0xd2>
        if (startHandle == ATT_HANDLE_MAX)
   182c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   182c8:	4599      	cmp	r9, r3
        (*pAttr)++;
   182ca:	f10b 0b10 	add.w	fp, fp, #16
        startHandle++;
   182ce:	f109 0301 	add.w	r3, r9, #1
        if (startHandle == ATT_HANDLE_MAX)
   182d2:	d0e7      	beq.n	182a4 <attsProcReadGroupTypeReq+0x94>
        startHandle++;
   182d4:	fa1f f983 	uxth.w	r9, r3
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   182d8:	8a63      	ldrh	r3, [r4, #18]
   182da:	454b      	cmp	r3, r9
   182dc:	d3e2      	bcc.n	182a4 <attsProcReadGroupTypeReq+0x94>
   182de:	454f      	cmp	r7, r9
   182e0:	d3e0      	bcc.n	182a4 <attsProcReadGroupTypeReq+0x94>
        if (attsUuidCmp(*pAttr, uuidLen, pUuid))
   182e2:	4658      	mov	r0, fp
   182e4:	462a      	mov	r2, r5
   182e6:	4651      	mov	r1, sl
   182e8:	f7ff f9a8 	bl	1763c <attsUuidCmp>
   182ec:	2800      	cmp	r0, #0
   182ee:	d0e9      	beq.n	182c4 <attsProcReadGroupTypeReq+0xb4>
    if (handle == ATT_HANDLE_NONE)
   182f0:	4654      	mov	r4, sl
   182f2:	f1b9 0f00 	cmp.w	r9, #0
   182f6:	d014      	beq.n	18322 <attsProcReadGroupTypeReq+0x112>
    else if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   182f8:	f89b 300f 	ldrb.w	r3, [fp, #15]
   182fc:	7f30      	ldrb	r0, [r6, #28]
   182fe:	464a      	mov	r2, r9
   18300:	2101      	movs	r1, #1
   18302:	f7ff f9e9 	bl	176d8 <attsPermissions>
   18306:	b188      	cbz	r0, 1832c <attsProcReadGroupTypeReq+0x11c>
   18308:	9001      	str	r0, [sp, #4]
  attsDiscBusy(pCcb);
   1830a:	4630      	mov	r0, r6
   1830c:	f7ff f87e 	bl	1740c <attsDiscBusy>
   18310:	46c8      	mov	r8, r9
   18312:	9b01      	ldr	r3, [sp, #4]
   18314:	e794      	b.n	18240 <attsProcReadGroupTypeReq+0x30>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   18316:	6863      	ldr	r3, [r4, #4]
   18318:	eba9 0b0b 	sub.w	fp, r9, fp
   1831c:	eb03 1b0b 	add.w	fp, r3, fp, lsl #4
   18320:	e7dd      	b.n	182de <attsProcReadGroupTypeReq+0xce>
  attsDiscBusy(pCcb);
   18322:	4630      	mov	r0, r6
   18324:	f7ff f872 	bl	1740c <attsDiscBusy>
      err = ATT_ERR_NOT_FOUND;
   18328:	230a      	movs	r3, #10
   1832a:	e789      	b.n	18240 <attsProcReadGroupTypeReq+0x30>
      if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   1832c:	8b70      	ldrh	r0, [r6, #26]
   1832e:	3008      	adds	r0, #8
   18330:	b280      	uxth	r0, r0
   18332:	f000 fb51 	bl	189d8 <attMsgAlloc>
   18336:	4682      	mov	sl, r0
   18338:	2800      	cmp	r0, #0
   1833a:	f000 80bc 	beq.w	184b6 <attsProcReadGroupTypeReq+0x2a6>
        UINT8_TO_BSTREAM(p, ATT_PDU_READ_GROUP_TYPE_RSP);
   1833e:	2311      	movs	r3, #17
   18340:	7203      	strb	r3, [r0, #8]
        attLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_GROUP_TYPE_RSP_LEN - (2 * sizeof(uint16_t)))) ?
   18342:	f8db 3008 	ldr.w	r3, [fp, #8]
   18346:	881a      	ldrh	r2, [r3, #0]
   18348:	8b73      	ldrh	r3, [r6, #26]
        UINT16_TO_BSTREAM(p, handle);
   1834a:	f880 900a 	strb.w	r9, [r0, #10]
        attLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_GROUP_TYPE_RSP_LEN - (2 * sizeof(uint16_t)))) ?
   1834e:	3b06      	subs	r3, #6
                  *pAttr->pLen : (pCcb->mtu - ATT_READ_GROUP_TYPE_RSP_LEN - (2 * sizeof(uint16_t)));
   18350:	4293      	cmp	r3, r2
   18352:	bf28      	it	cs
   18354:	4613      	movcs	r3, r2
        attLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_GROUP_TYPE_RSP_LEN - (2 * sizeof(uint16_t)))) ?
   18356:	b2db      	uxtb	r3, r3
        UINT8_TO_BSTREAM(p, attLen + (2 * sizeof(uint16_t)));
   18358:	1d1a      	adds	r2, r3, #4
   1835a:	9301      	str	r3, [sp, #4]
        UINT16_TO_BSTREAM(p, handle);
   1835c:	ea4f 2319 	mov.w	r3, r9, lsr #8
        UINT8_TO_BSTREAM(p, attLen + (2 * sizeof(uint16_t)));
   18360:	7242      	strb	r2, [r0, #9]
        UINT16_TO_BSTREAM(p, handle);
   18362:	72c3      	strb	r3, [r0, #11]
        handle = attsFindServiceGroupEnd(handle);
   18364:	4648      	mov	r0, r9
        UINT8_TO_BSTREAM(p, attLen + (2 * sizeof(uint16_t)));
   18366:	9205      	str	r2, [sp, #20]
        handle = attsFindServiceGroupEnd(handle);
   18368:	f7ff fb9e 	bl	17aa8 <attsFindServiceGroupEnd>
        UINT16_TO_BSTREAM(p, handle);
   1836c:	0a03      	lsrs	r3, r0, #8
   1836e:	f88a 000c 	strb.w	r0, [sl, #12]
   18372:	f88a 300d 	strb.w	r3, [sl, #13]
        memcpy(p, pAttr->pValue, attLen);
   18376:	f8db 1004 	ldr.w	r1, [fp, #4]
   1837a:	f8dd b004 	ldr.w	fp, [sp, #4]
        UINT16_TO_BSTREAM(p, handle);
   1837e:	f10a 080e 	add.w	r8, sl, #14
        handle = attsFindServiceGroupEnd(handle);
   18382:	4681      	mov	r9, r0
        memcpy(p, pAttr->pValue, attLen);
   18384:	465a      	mov	r2, fp
   18386:	4640      	mov	r0, r8
   18388:	f7f3 feba 	bl	c100 <memcpy>
          if (handle == ATT_HANDLE_MAX)
   1838c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18390:	4591      	cmp	r9, r2
        p += attLen;
   18392:	44d8      	add	r8, fp
          if (handle == ATT_HANDLE_MAX)
   18394:	d075      	beq.n	18482 <attsProcReadGroupTypeReq+0x272>
          if (++handle > endHandle)
   18396:	f109 0901 	add.w	r9, r9, #1
   1839a:	fa1f f989 	uxth.w	r9, r9
   1839e:	454f      	cmp	r7, r9
   183a0:	d36f      	bcc.n	18482 <attsProcReadGroupTypeReq+0x272>
   183a2:	f108 0204 	add.w	r2, r8, #4
   183a6:	464b      	mov	r3, r9
   183a8:	f8cd a004 	str.w	sl, [sp, #4]
   183ac:	46a1      	mov	r9, r4
   183ae:	46b8      	mov	r8, r7
   183b0:	4692      	mov	sl, r2
   183b2:	9602      	str	r6, [sp, #8]
   183b4:	461c      	mov	r4, r3
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   183b6:	4b42      	ldr	r3, [pc, #264]	; (184c0 <attsProcReadGroupTypeReq+0x2b0>)
   183b8:	681e      	ldr	r6, [r3, #0]
   183ba:	f1aa 0304 	sub.w	r3, sl, #4
   183be:	9303      	str	r3, [sp, #12]
   183c0:	b936      	cbnz	r6, 183d0 <attsProcReadGroupTypeReq+0x1c0>
   183c2:	e073      	b.n	184ac <attsProcReadGroupTypeReq+0x29c>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   183c4:	8a72      	ldrh	r2, [r6, #18]
   183c6:	42a2      	cmp	r2, r4
   183c8:	d26b      	bcs.n	184a2 <attsProcReadGroupTypeReq+0x292>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   183ca:	6836      	ldr	r6, [r6, #0]
   183cc:	2e00      	cmp	r6, #0
   183ce:	d06d      	beq.n	184ac <attsProcReadGroupTypeReq+0x29c>
    if ((startHandle < pGroup->startHandle) && (endHandle >= pGroup->startHandle))
   183d0:	8a33      	ldrh	r3, [r6, #16]
   183d2:	42a3      	cmp	r3, r4
   183d4:	d9f6      	bls.n	183c4 <attsProcReadGroupTypeReq+0x1b4>
   183d6:	4598      	cmp	r8, r3
   183d8:	d3f7      	bcc.n	183ca <attsProcReadGroupTypeReq+0x1ba>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   183da:	8a72      	ldrh	r2, [r6, #18]
   183dc:	429a      	cmp	r2, r3
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   183de:	461c      	mov	r4, r3
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   183e0:	d3f3      	bcc.n	183ca <attsProcReadGroupTypeReq+0x1ba>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   183e2:	6877      	ldr	r7, [r6, #4]
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   183e4:	e00d      	b.n	18402 <attsProcReadGroupTypeReq+0x1f2>
        if (startHandle == ATT_HANDLE_MAX)
   183e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   183ea:	429c      	cmp	r4, r3
        (*pAttr)++;
   183ec:	f107 0710 	add.w	r7, r7, #16
        startHandle++;
   183f0:	f104 0301 	add.w	r3, r4, #1
        if (startHandle == ATT_HANDLE_MAX)
   183f4:	d0e9      	beq.n	183ca <attsProcReadGroupTypeReq+0x1ba>
        startHandle++;
   183f6:	b29c      	uxth	r4, r3
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   183f8:	8a73      	ldrh	r3, [r6, #18]
   183fa:	42a3      	cmp	r3, r4
   183fc:	d3e5      	bcc.n	183ca <attsProcReadGroupTypeReq+0x1ba>
   183fe:	45a0      	cmp	r8, r4
   18400:	d3e3      	bcc.n	183ca <attsProcReadGroupTypeReq+0x1ba>
        if (attsUuidCmp(*pAttr, uuidLen, pUuid))
   18402:	4638      	mov	r0, r7
   18404:	462a      	mov	r2, r5
   18406:	4649      	mov	r1, r9
   18408:	f7ff f918 	bl	1763c <attsUuidCmp>
   1840c:	2800      	cmp	r0, #0
   1840e:	d0ea      	beq.n	183e6 <attsProcReadGroupTypeReq+0x1d6>
          if ((handle = attsFindUuidInRange(handle, endHandle, uuidLen,
   18410:	2c00      	cmp	r4, #0
   18412:	d04b      	beq.n	184ac <attsProcReadGroupTypeReq+0x29c>
          if ((*pAttr->pLen == attLen) &&
   18414:	68bb      	ldr	r3, [r7, #8]
   18416:	881b      	ldrh	r3, [r3, #0]
   18418:	455b      	cmp	r3, fp
   1841a:	d147      	bne.n	184ac <attsProcReadGroupTypeReq+0x29c>
              (attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   1841c:	9e02      	ldr	r6, [sp, #8]
   1841e:	7bfb      	ldrb	r3, [r7, #15]
   18420:	7f30      	ldrb	r0, [r6, #28]
   18422:	4622      	mov	r2, r4
   18424:	2101      	movs	r1, #1
   18426:	f7ff f957 	bl	176d8 <attsPermissions>
          if ((*pAttr->pLen == attLen) &&
   1842a:	2800      	cmp	r0, #0
   1842c:	d13e      	bne.n	184ac <attsProcReadGroupTypeReq+0x29c>
                (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
   1842e:	8b72      	ldrh	r2, [r6, #26]
   18430:	9b01      	ldr	r3, [sp, #4]
   18432:	3208      	adds	r2, #8
   18434:	441a      	add	r2, r3
   18436:	eb0b 030a 	add.w	r3, fp, sl
            if ((p + attLen + (2 * sizeof(uint16_t))) <=
   1843a:	4293      	cmp	r3, r2
   1843c:	9304      	str	r3, [sp, #16]
   1843e:	d835      	bhi.n	184ac <attsProcReadGroupTypeReq+0x29c>
              UINT16_TO_BSTREAM(p, handle);
   18440:	0a22      	lsrs	r2, r4, #8
   18442:	f80a 4c04 	strb.w	r4, [sl, #-4]
   18446:	f80a 2c03 	strb.w	r2, [sl, #-3]
              handle = attsFindServiceGroupEnd(handle);
   1844a:	4620      	mov	r0, r4
   1844c:	f7ff fb2c 	bl	17aa8 <attsFindServiceGroupEnd>
              UINT16_TO_BSTREAM(p, handle);
   18450:	0a02      	lsrs	r2, r0, #8
   18452:	f80a 0c02 	strb.w	r0, [sl, #-2]
   18456:	f80a 2c01 	strb.w	r2, [sl, #-1]
              handle = attsFindServiceGroupEnd(handle);
   1845a:	4604      	mov	r4, r0
              memcpy(p, pAttr->pValue, attLen);
   1845c:	6879      	ldr	r1, [r7, #4]
   1845e:	465a      	mov	r2, fp
   18460:	4650      	mov	r0, sl
   18462:	f7f3 fe4d 	bl	c100 <memcpy>
          if (handle == ATT_HANDLE_MAX)
   18466:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1846a:	429c      	cmp	r4, r3
   1846c:	9b04      	ldr	r3, [sp, #16]
   1846e:	d005      	beq.n	1847c <attsProcReadGroupTypeReq+0x26c>
          if (++handle > endHandle)
   18470:	3401      	adds	r4, #1
   18472:	9a05      	ldr	r2, [sp, #20]
   18474:	b2a4      	uxth	r4, r4
   18476:	45a0      	cmp	r8, r4
   18478:	4492      	add	sl, r2
   1847a:	d29c      	bcs.n	183b6 <attsProcReadGroupTypeReq+0x1a6>
   1847c:	e9dd a601 	ldrd	sl, r6, [sp, #4]
   18480:	4698      	mov	r8, r3
  attsDiscBusy(pCcb);
   18482:	4630      	mov	r0, r6
   18484:	f7fe ffc2 	bl	1740c <attsDiscBusy>
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
   18488:	f10a 0208 	add.w	r2, sl, #8
   1848c:	eba8 0202 	sub.w	r2, r8, r2
   18490:	8b31      	ldrh	r1, [r6, #24]
   18492:	4653      	mov	r3, sl
   18494:	b292      	uxth	r2, r2
   18496:	2004      	movs	r0, #4
   18498:	f7fb f94e 	bl	13738 <L2cDataReq>
}
   1849c:	b009      	add	sp, #36	; 0x24
   1849e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   184a2:	6872      	ldr	r2, [r6, #4]
   184a4:	1ae3      	subs	r3, r4, r3
   184a6:	eb02 1703 	add.w	r7, r2, r3, lsl #4
   184aa:	e7a8      	b.n	183fe <attsProcReadGroupTypeReq+0x1ee>
   184ac:	e9dd 6802 	ldrd	r6, r8, [sp, #8]
   184b0:	f8dd a004 	ldr.w	sl, [sp, #4]
   184b4:	e7e5      	b.n	18482 <attsProcReadGroupTypeReq+0x272>
  attsDiscBusy(pCcb);
   184b6:	4630      	mov	r0, r6
   184b8:	f7fe ffa8 	bl	1740c <attsDiscBusy>
        err = ATT_ERR_RESOURCES;
   184bc:	2311      	movs	r3, #17
   184be:	e6bf      	b.n	18240 <attsProcReadGroupTypeReq+0x30>
   184c0:	100057bc 	.word	0x100057bc

000184c4 <attsProcWrite>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcWrite(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   184c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint8_t     err = ATT_SUCCESS;

  /* parse opcode handle, calculate write length */
  pPacket += L2C_PAYLOAD_START;
  BSTREAM_TO_UINT8(opcode, pPacket);
  BSTREAM_TO_UINT16(handle, pPacket);
   184c8:	7a93      	ldrb	r3, [r2, #10]
   184ca:	7a54      	ldrb	r4, [r2, #9]
  BSTREAM_TO_UINT8(opcode, pPacket);
   184cc:	f892 9008 	ldrb.w	r9, [r2, #8]
  BSTREAM_TO_UINT16(handle, pPacket);
   184d0:	eb04 2403 	add.w	r4, r4, r3, lsl #8
{
   184d4:	b087      	sub	sp, #28
  BSTREAM_TO_UINT16(handle, pPacket);
   184d6:	b2a4      	uxth	r4, r4
{
   184d8:	460d      	mov	r5, r1
   184da:	4606      	mov	r6, r0
  writeLen = len - ATT_WRITE_REQ_LEN;

  /* find attribute */
  if ((pAttr = attsFindByHandle(handle, &pGroup)) != NULL)
   184dc:	a905      	add	r1, sp, #20
   184de:	4620      	mov	r0, r4
{
   184e0:	4617      	mov	r7, r2
  if ((pAttr = attsFindByHandle(handle, &pGroup)) != NULL)
   184e2:	f7ff f8e1 	bl	176a8 <attsFindByHandle>
   184e6:	b350      	cbz	r0, 1853e <attsProcWrite+0x7a>
  {
    /* verify permissions */
    if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_WRITE,
   184e8:	7bc3      	ldrb	r3, [r0, #15]
   184ea:	4680      	mov	r8, r0
   184ec:	4622      	mov	r2, r4
   184ee:	7f30      	ldrb	r0, [r6, #28]
   184f0:	2110      	movs	r1, #16
   184f2:	f7ff f8f1 	bl	176d8 <attsPermissions>
   184f6:	4603      	mov	r3, r0
   184f8:	b158      	cbz	r0, 18512 <attsProcWrite+0x4e>
  {
    err = ATT_ERR_HANDLE;
  }

  /* send error response for write req only */
  if (err && (opcode == ATT_PDU_WRITE_REQ))
   184fa:	f1b9 0f12 	cmp.w	r9, #18
   184fe:	d121      	bne.n	18544 <attsProcWrite+0x80>
  {
    if (err == ATT_RSP_PENDING)
   18500:	2b79      	cmp	r3, #121	; 0x79
   18502:	d114      	bne.n	1852e <attsProcWrite+0x6a>
    {
      /* set response pending */
      pCcb->control |= ATT_CCB_STATUS_RSP_PENDING;
   18504:	7f73      	ldrb	r3, [r6, #29]
   18506:	f043 0308 	orr.w	r3, r3, #8
   1850a:	7773      	strb	r3, [r6, #29]
    else
    {
      attsErrRsp(pCcb->handle, ATT_PDU_WRITE_REQ, handle, err);
    }
  }
}
   1850c:	b007      	add	sp, #28
   1850e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (((pAttr->settings & ATTS_SET_VARIABLE_LEN) == 0) &&
   18512:	f898 300e 	ldrb.w	r3, [r8, #14]
   18516:	f8b8 200c 	ldrh.w	r2, [r8, #12]
  writeLen = len - ATT_WRITE_REQ_LEN;
   1851a:	3d03      	subs	r5, #3
    else if (((pAttr->settings & ATTS_SET_VARIABLE_LEN) == 0) &&
   1851c:	0719      	lsls	r1, r3, #28
  writeLen = len - ATT_WRITE_REQ_LEN;
   1851e:	b2ad      	uxth	r5, r5
    else if (((pAttr->settings & ATTS_SET_VARIABLE_LEN) == 0) &&
   18520:	d413      	bmi.n	1854a <attsProcWrite+0x86>
   18522:	42aa      	cmp	r2, r5
   18524:	d013      	beq.n	1854e <attsProcWrite+0x8a>
  if (err && (opcode == ATT_PDU_WRITE_REQ))
   18526:	f1b9 0f12 	cmp.w	r9, #18
   1852a:	d10b      	bne.n	18544 <attsProcWrite+0x80>
      err = ATT_ERR_LENGTH;
   1852c:	230d      	movs	r3, #13
      attsErrRsp(pCcb->handle, ATT_PDU_WRITE_REQ, handle, err);
   1852e:	8b30      	ldrh	r0, [r6, #24]
   18530:	4622      	mov	r2, r4
   18532:	2112      	movs	r1, #18
   18534:	f7fe ff40 	bl	173b8 <attsErrRsp>
}
   18538:	b007      	add	sp, #28
   1853a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (err && (opcode == ATT_PDU_WRITE_REQ))
   1853e:	f1b9 0f12 	cmp.w	r9, #18
   18542:	d033      	beq.n	185ac <attsProcWrite+0xe8>
}
   18544:	b007      	add	sp, #28
   18546:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (((pAttr->settings & ATTS_SET_VARIABLE_LEN) != 0) &&
   1854a:	42aa      	cmp	r2, r5
   1854c:	d3eb      	bcc.n	18526 <attsProcWrite+0x62>
      if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   1854e:	0798      	lsls	r0, r3, #30
  BSTREAM_TO_UINT16(handle, pPacket);
   18550:	f107 010b 	add.w	r1, r7, #11
      if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   18554:	d51e      	bpl.n	18594 <attsProcWrite+0xd0>
          (pGroup->writeCback != NULL))
   18556:	9a05      	ldr	r2, [sp, #20]
   18558:	68d7      	ldr	r7, [r2, #12]
      if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   1855a:	b1df      	cbz	r7, 18594 <attsProcWrite+0xd0>
        err = (*pGroup->writeCback)(pCcb->connId, handle, opcode, 0, writeLen,
   1855c:	e9cd 1801 	strd	r1, r8, [sp, #4]
   18560:	9500      	str	r5, [sp, #0]
   18562:	2300      	movs	r3, #0
   18564:	7f30      	ldrb	r0, [r6, #28]
   18566:	464a      	mov	r2, r9
   18568:	4621      	mov	r1, r4
   1856a:	47b8      	blx	r7
   1856c:	4603      	mov	r3, r0
      if (err == ATT_SUCCESS && opcode == ATT_PDU_WRITE_REQ)
   1856e:	2b00      	cmp	r3, #0
   18570:	d1c3      	bne.n	184fa <attsProcWrite+0x36>
   18572:	f1b9 0f12 	cmp.w	r9, #18
   18576:	d1e5      	bne.n	18544 <attsProcWrite+0x80>
        if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_WRITE_RSP_LEN)) != NULL)
   18578:	2009      	movs	r0, #9
   1857a:	f000 fa2d 	bl	189d8 <attMsgAlloc>
   1857e:	2800      	cmp	r0, #0
   18580:	d0e0      	beq.n	18544 <attsProcWrite+0x80>
          UINT8_TO_BSTREAM(p, ATT_PDU_WRITE_RSP);
   18582:	2313      	movs	r3, #19
   18584:	7203      	strb	r3, [r0, #8]
          L2cDataReq(L2C_CID_ATT, pCcb->handle, ATT_WRITE_RSP_LEN, pBuf);
   18586:	8b31      	ldrh	r1, [r6, #24]
   18588:	4603      	mov	r3, r0
   1858a:	2201      	movs	r2, #1
   1858c:	2004      	movs	r0, #4
   1858e:	f7fb f8d3 	bl	13738 <L2cDataReq>
  if (err && (opcode == ATT_PDU_WRITE_REQ))
   18592:	e7d7      	b.n	18544 <attsProcWrite+0x80>
      else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   18594:	069a      	lsls	r2, r3, #26
   18596:	d510      	bpl.n	185ba <attsProcWrite+0xf6>
   18598:	4b0e      	ldr	r3, [pc, #56]	; (185d4 <attsProcWrite+0x110>)
   1859a:	695f      	ldr	r7, [r3, #20]
   1859c:	b16f      	cbz	r7, 185ba <attsProcWrite+0xf6>
        err = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_WRITE, handle, pPacket);
   1859e:	460b      	mov	r3, r1
   185a0:	7f30      	ldrb	r0, [r6, #28]
   185a2:	4622      	mov	r2, r4
   185a4:	2109      	movs	r1, #9
   185a6:	47b8      	blx	r7
   185a8:	4603      	mov	r3, r0
   185aa:	e7e0      	b.n	1856e <attsProcWrite+0xaa>
      attsErrRsp(pCcb->handle, ATT_PDU_WRITE_REQ, handle, err);
   185ac:	8b30      	ldrh	r0, [r6, #24]
    err = ATT_ERR_HANDLE;
   185ae:	2301      	movs	r3, #1
      attsErrRsp(pCcb->handle, ATT_PDU_WRITE_REQ, handle, err);
   185b0:	4622      	mov	r2, r4
   185b2:	2112      	movs	r1, #18
   185b4:	f7fe ff00 	bl	173b8 <attsErrRsp>
   185b8:	e7be      	b.n	18538 <attsProcWrite+0x74>
        memcpy(pAttr->pValue, pPacket, writeLen);
   185ba:	f8d8 0004 	ldr.w	r0, [r8, #4]
   185be:	462a      	mov	r2, r5
   185c0:	f7f3 fd9e 	bl	c100 <memcpy>
        if ((pAttr->settings & ATTS_SET_VARIABLE_LEN) != 0)
   185c4:	f898 300e 	ldrb.w	r3, [r8, #14]
   185c8:	071b      	lsls	r3, r3, #28
   185ca:	d5d2      	bpl.n	18572 <attsProcWrite+0xae>
          *(pAttr->pLen) = writeLen;
   185cc:	f8d8 3008 	ldr.w	r3, [r8, #8]
   185d0:	801d      	strh	r5, [r3, #0]
      if (err == ATT_SUCCESS && opcode == ATT_PDU_WRITE_REQ)
   185d2:	e7ce      	b.n	18572 <attsProcWrite+0xae>
   185d4:	100057bc 	.word	0x100057bc

000185d8 <attsProcPrepWriteReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcPrepWriteReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   185d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t        writeLen;
  uint8_t         err = ATT_SUCCESS;

  /* parse handle and offset, calculate write length */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
  BSTREAM_TO_UINT16(handle, pPacket);
   185dc:	7a93      	ldrb	r3, [r2, #10]
   185de:	7a54      	ldrb	r4, [r2, #9]
  BSTREAM_TO_UINT16(offset, pPacket);
   185e0:	f892 800b 	ldrb.w	r8, [r2, #11]
   185e4:	f892 900c 	ldrb.w	r9, [r2, #12]
  BSTREAM_TO_UINT16(handle, pPacket);
   185e8:	eb04 2403 	add.w	r4, r4, r3, lsl #8
{
   185ec:	b089      	sub	sp, #36	; 0x24
  BSTREAM_TO_UINT16(handle, pPacket);
   185ee:	b2a4      	uxth	r4, r4
{
   185f0:	4606      	mov	r6, r0
   185f2:	460f      	mov	r7, r1
  writeLen = len - ATT_PREP_WRITE_REQ_LEN;    /* length of value being written */

  /* find attribute */
  if ((pAttr = attsFindByHandle(handle, &pGroup)) == NULL)
   185f4:	4620      	mov	r0, r4
   185f6:	a907      	add	r1, sp, #28
{
   185f8:	4693      	mov	fp, r2
  if ((pAttr = attsFindByHandle(handle, &pGroup)) == NULL)
   185fa:	f7ff f855 	bl	176a8 <attsFindByHandle>
   185fe:	b338      	cbz	r0, 18650 <attsProcPrepWriteReq+0x78>
  {
    /* attribute not found */
    err = ATT_ERR_HANDLE;
  }
  /* verify permissions */
  else if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_WRITE,
   18600:	7bc3      	ldrb	r3, [r0, #15]
   18602:	4605      	mov	r5, r0
   18604:	4622      	mov	r2, r4
   18606:	7f30      	ldrb	r0, [r6, #28]
   18608:	2110      	movs	r1, #16
   1860a:	f7ff f865 	bl	176d8 <attsPermissions>
   1860e:	4603      	mov	r3, r0
   18610:	b138      	cbz	r0, 18622 <attsProcPrepWriteReq+0x4a>
    }
  }

  if (err)
  {
    attsErrRsp(pCcb->handle, ATT_PDU_PREP_WRITE_REQ, handle, err);
   18612:	8b30      	ldrh	r0, [r6, #24]
   18614:	4622      	mov	r2, r4
   18616:	2116      	movs	r1, #22
   18618:	f7fe fece 	bl	173b8 <attsErrRsp>
  }
}
   1861c:	b009      	add	sp, #36	; 0x24
   1861e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  BSTREAM_TO_UINT16(offset, pPacket);
   18622:	eb08 2809 	add.w	r8, r8, r9, lsl #8
   18626:	fa1f f888 	uxth.w	r8, r8
  else if ((offset != 0) && ((pAttr->settings & ATTS_SET_ALLOW_OFFSET) == 0))
   1862a:	7bab      	ldrb	r3, [r5, #14]
   1862c:	f1b8 0f00 	cmp.w	r8, #0
   18630:	d003      	beq.n	1863a <attsProcPrepWriteReq+0x62>
   18632:	06d9      	lsls	r1, r3, #27
   18634:	d401      	bmi.n	1863a <attsProcPrepWriteReq+0x62>
    err = ATT_ERR_NOT_LONG;
   18636:	230b      	movs	r3, #11
   18638:	e7eb      	b.n	18612 <attsProcPrepWriteReq+0x3a>
  writeLen = len - ATT_PREP_WRITE_REQ_LEN;    /* length of value being written */
   1863a:	f1a7 0905 	sub.w	r9, r7, #5
  else if (((pAttr->settings & ATTS_SET_VARIABLE_LEN) == 0) &&
   1863e:	071a      	lsls	r2, r3, #28
  writeLen = len - ATT_PREP_WRITE_REQ_LEN;    /* length of value being written */
   18640:	fa1f f989 	uxth.w	r9, r9
  else if (((pAttr->settings & ATTS_SET_VARIABLE_LEN) == 0) &&
   18644:	d406      	bmi.n	18654 <attsProcPrepWriteReq+0x7c>
   18646:	89ab      	ldrh	r3, [r5, #12]
   18648:	454b      	cmp	r3, r9
   1864a:	d003      	beq.n	18654 <attsProcPrepWriteReq+0x7c>
    err = ATT_ERR_LENGTH;
   1864c:	230d      	movs	r3, #13
   1864e:	e7e0      	b.n	18612 <attsProcPrepWriteReq+0x3a>
    err = ATT_ERR_HANDLE;
   18650:	2301      	movs	r3, #1
   18652:	e7de      	b.n	18612 <attsProcPrepWriteReq+0x3a>
  else if (WsfQueueCount(&pCcb->prepWriteQueue) >= pAttCfg->numPrepWrites)
   18654:	4630      	mov	r0, r6
   18656:	f7f7 fb85 	bl	fd64 <WsfQueueCount>
   1865a:	4b2a      	ldr	r3, [pc, #168]	; (18704 <attsProcPrepWriteReq+0x12c>)
   1865c:	681b      	ldr	r3, [r3, #0]
   1865e:	79db      	ldrb	r3, [r3, #7]
   18660:	4283      	cmp	r3, r0
   18662:	d801      	bhi.n	18668 <attsProcPrepWriteReq+0x90>
    err = ATT_ERR_QUEUE_FULL;
   18664:	2309      	movs	r3, #9
   18666:	e7d4      	b.n	18612 <attsProcPrepWriteReq+0x3a>
  else if ((pPrep = WsfBufAlloc(sizeof(attsPrepWrite_t) - 1 + writeLen)) == NULL)
   18668:	1db8      	adds	r0, r7, #6
   1866a:	b280      	uxth	r0, r0
   1866c:	f7f7 f90c 	bl	f888 <WsfBufAlloc>
   18670:	4682      	mov	sl, r0
   18672:	2800      	cmp	r0, #0
   18674:	d044      	beq.n	18700 <attsProcPrepWriteReq+0x128>
  else if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   18676:	7bab      	ldrb	r3, [r5, #14]
   18678:	079b      	lsls	r3, r3, #30
  BSTREAM_TO_UINT16(offset, pPacket);
   1867a:	f10b 0b0d 	add.w	fp, fp, #13
  else if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   1867e:	d510      	bpl.n	186a2 <attsProcPrepWriteReq+0xca>
          (pGroup->writeCback != NULL))
   18680:	9b07      	ldr	r3, [sp, #28]
   18682:	68db      	ldr	r3, [r3, #12]
  else if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   18684:	9305      	str	r3, [sp, #20]
   18686:	b163      	cbz	r3, 186a2 <attsProcPrepWriteReq+0xca>
    err = (*pGroup->writeCback)(pCcb->connId, handle, ATT_PDU_PREP_WRITE_REQ, 0, writeLen,
   18688:	e9cd b501 	strd	fp, r5, [sp, #4]
   1868c:	f8cd 9000 	str.w	r9, [sp]
   18690:	2300      	movs	r3, #0
   18692:	7f30      	ldrb	r0, [r6, #28]
   18694:	9d05      	ldr	r5, [sp, #20]
   18696:	2216      	movs	r2, #22
   18698:	4621      	mov	r1, r4
   1869a:	47a8      	blx	r5
  if (err == ATT_SUCCESS)
   1869c:	4603      	mov	r3, r0
   1869e:	2800      	cmp	r0, #0
   186a0:	d1b7      	bne.n	18612 <attsProcPrepWriteReq+0x3a>
    memcpy(pPrep->packet, pPacket, writeLen);
   186a2:	464a      	mov	r2, r9
   186a4:	4659      	mov	r1, fp
    pPrep->writeLen = writeLen;
   186a6:	f8aa 9004 	strh.w	r9, [sl, #4]
    pPrep->handle = handle;
   186aa:	f8aa 4006 	strh.w	r4, [sl, #6]
    pPrep->offset = offset;
   186ae:	f8aa 8008 	strh.w	r8, [sl, #8]
    memcpy(pPrep->packet, pPacket, writeLen);
   186b2:	f10a 000a 	add.w	r0, sl, #10
   186b6:	f7f3 fd23 	bl	c100 <memcpy>
    WsfQueueEnq(&pCcb->prepWriteQueue, pPrep);
   186ba:	4651      	mov	r1, sl
   186bc:	4630      	mov	r0, r6
   186be:	f7f7 fae3 	bl	fc88 <WsfQueueEnq>
    if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_PREP_WRITE_RSP_LEN + writeLen)) != NULL)
   186c2:	f107 0008 	add.w	r0, r7, #8
   186c6:	b280      	uxth	r0, r0
   186c8:	f000 f986 	bl	189d8 <attMsgAlloc>
   186cc:	4605      	mov	r5, r0
   186ce:	2800      	cmp	r0, #0
   186d0:	d0a4      	beq.n	1861c <attsProcPrepWriteReq+0x44>
      UINT16_TO_BSTREAM(p, handle);
   186d2:	7244      	strb	r4, [r0, #9]
      UINT16_TO_BSTREAM(p, offset);
   186d4:	f880 800b 	strb.w	r8, [r0, #11]
      UINT8_TO_BSTREAM(p, ATT_PDU_PREP_WRITE_RSP);
   186d8:	2317      	movs	r3, #23
      UINT16_TO_BSTREAM(p, handle);
   186da:	0a24      	lsrs	r4, r4, #8
      UINT16_TO_BSTREAM(p, offset);
   186dc:	ea4f 2818 	mov.w	r8, r8, lsr #8
      memcpy(p, pPacket, writeLen);
   186e0:	4659      	mov	r1, fp
      UINT16_TO_BSTREAM(p, handle);
   186e2:	7284      	strb	r4, [r0, #10]
      UINT16_TO_BSTREAM(p, offset);
   186e4:	f880 800c 	strb.w	r8, [r0, #12]
      memcpy(p, pPacket, writeLen);
   186e8:	464a      	mov	r2, r9
      UINT8_TO_BSTREAM(p, ATT_PDU_PREP_WRITE_RSP);
   186ea:	7203      	strb	r3, [r0, #8]
      memcpy(p, pPacket, writeLen);
   186ec:	300d      	adds	r0, #13
   186ee:	f7f3 fd07 	bl	c100 <memcpy>
      L2cDataReq(L2C_CID_ATT, pCcb->handle, (ATT_PREP_WRITE_RSP_LEN + writeLen), pBuf);
   186f2:	8b31      	ldrh	r1, [r6, #24]
   186f4:	462b      	mov	r3, r5
   186f6:	463a      	mov	r2, r7
   186f8:	2004      	movs	r0, #4
   186fa:	f7fb f81d 	bl	13738 <L2cDataReq>
  if (err)
   186fe:	e78d      	b.n	1861c <attsProcPrepWriteReq+0x44>
    err = ATT_ERR_RESOURCES;
   18700:	2311      	movs	r3, #17
   18702:	e786      	b.n	18612 <attsProcPrepWriteReq+0x3a>
   18704:	10002b0c 	.word	0x10002b0c

00018708 <attsProcExecWriteReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcExecWriteReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   18708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t         err = ATT_SUCCESS;

  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;

  /* if cancelling all prepared writes */
  if (*pPacket == ATT_EXEC_WRITE_CANCEL)
   1870c:	7a53      	ldrb	r3, [r2, #9]
{
   1870e:	b086      	sub	sp, #24
   18710:	4606      	mov	r6, r0
  if (*pPacket == ATT_EXEC_WRITE_CANCEL)
   18712:	2b00      	cmp	r3, #0
   18714:	d04d      	beq.n	187b2 <attsProcExecWriteReq+0xaa>
  {
    /* free all queued buffers */
    attsClearPrepWrites(pCcb);
  }
  /* else writing all prepared writes */
  else if (*pPacket == ATT_EXEC_WRITE_ALL)
   18716:	2b01      	cmp	r3, #1
   18718:	d141      	bne.n	1879e <attsProcExecWriteReq+0x96>
  {
    /* iterate over prepare write queue and verify offset and length */
    for (pPrep = pCcb->prepWriteQueue.pHead; pPrep != NULL; pPrep = pPrep->pNext)
   1871a:	6804      	ldr	r4, [r0, #0]
   1871c:	b17c      	cbz	r4, 1873e <attsProcExecWriteReq+0x36>
    {
      /* find attribute */
      if ((pAttr = attsFindByHandle(pPrep->handle, &pGroup)) != NULL)
   1871e:	88e0      	ldrh	r0, [r4, #6]
   18720:	a904      	add	r1, sp, #16
   18722:	f7fe ffc1 	bl	176a8 <attsFindByHandle>
   18726:	b138      	cbz	r0, 18738 <attsProcExecWriteReq+0x30>
      {
        /* verify offset */
        if (pPrep->offset > pAttr->maxLen)
   18728:	8921      	ldrh	r1, [r4, #8]
   1872a:	8982      	ldrh	r2, [r0, #12]
   1872c:	4291      	cmp	r1, r2
   1872e:	d87a      	bhi.n	18826 <attsProcExecWriteReq+0x11e>
        {
          err = ATT_ERR_OFFSET;
        }
        /* verify write length with offset */
        else if ((pPrep->writeLen + pPrep->offset) > pAttr->maxLen)
   18730:	88a3      	ldrh	r3, [r4, #4]
   18732:	440b      	add	r3, r1
   18734:	4293      	cmp	r3, r2
   18736:	dc7b      	bgt.n	18830 <attsProcExecWriteReq+0x128>
    for (pPrep = pCcb->prepWriteQueue.pHead; pPrep != NULL; pPrep = pPrep->pNext)
   18738:	6824      	ldr	r4, [r4, #0]
   1873a:	2c00      	cmp	r4, #0
   1873c:	d1ef      	bne.n	1871e <attsProcExecWriteReq+0x16>

    /* if length and offset checks ok then write all buffers in queue */
    if (err == ATT_SUCCESS)
    {
      /* for each buffer */
      while ((pPrep = WsfQueueDeq(&pCcb->prepWriteQueue)) != NULL)
   1873e:	4630      	mov	r0, r6
   18740:	f7f7 fab8 	bl	fcb4 <WsfQueueDeq>
  else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   18744:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 18834 <attsProcExecWriteReq+0x12c>
      while ((pPrep = WsfQueueDeq(&pCcb->prepWriteQueue)) != NULL)
   18748:	2700      	movs	r7, #0
   1874a:	4604      	mov	r4, r0
   1874c:	b328      	cbz	r0, 1879a <attsProcExecWriteReq+0x92>
  if ((pAttr = attsFindByHandle(pPrep->handle, &pGroup)) == NULL)
   1874e:	88e0      	ldrh	r0, [r4, #6]
   18750:	a905      	add	r1, sp, #20
   18752:	f7fe ffa9 	bl	176a8 <attsFindByHandle>
   18756:	4605      	mov	r5, r0
   18758:	2800      	cmp	r0, #0
   1875a:	d04d      	beq.n	187f8 <attsProcExecWriteReq+0xf0>
  else if (!(pAttr->permissions & ATTS_PERMIT_WRITE))
   1875c:	7bc3      	ldrb	r3, [r0, #15]
   1875e:	06d8      	lsls	r0, r3, #27
   18760:	d545      	bpl.n	187ee <attsProcExecWriteReq+0xe6>
  else if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   18762:	7bab      	ldrb	r3, [r5, #14]
   18764:	0799      	lsls	r1, r3, #30
  p = pPrep->packet;
   18766:	f104 020a 	add.w	r2, r4, #10
  else if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   1876a:	d534      	bpl.n	187d6 <attsProcExecWriteReq+0xce>
           (pGroup->writeCback != NULL))
   1876c:	9905      	ldr	r1, [sp, #20]
   1876e:	68cf      	ldr	r7, [r1, #12]
  else if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   18770:	b38f      	cbz	r7, 187d6 <attsProcExecWriteReq+0xce>
    err = (*pGroup->writeCback)(pCcb->connId, pPrep->handle, ATT_PDU_EXEC_WRITE_REQ,
   18772:	8923      	ldrh	r3, [r4, #8]
   18774:	88e1      	ldrh	r1, [r4, #6]
   18776:	e9cd 2501 	strd	r2, r5, [sp, #4]
   1877a:	88a2      	ldrh	r2, [r4, #4]
   1877c:	9200      	str	r2, [sp, #0]
   1877e:	7f30      	ldrb	r0, [r6, #28]
   18780:	2218      	movs	r2, #24
   18782:	47b8      	blx	r7
   18784:	4607      	mov	r7, r0
      {
        /* write buffer */
        if ((err = attsExecPrepWrite(pCcb, pPrep)) != ATT_SUCCESS)
   18786:	bb9f      	cbnz	r7, 187f0 <attsProcExecWriteReq+0xe8>
          /* write failed; discard remaining prepared writes */
          attsClearPrepWrites(pCcb);
        }

        /* free buffer */
        WsfBufFree(pPrep);
   18788:	4620      	mov	r0, r4
   1878a:	f7f7 f8ad 	bl	f8e8 <WsfBufFree>
      while ((pPrep = WsfQueueDeq(&pCcb->prepWriteQueue)) != NULL)
   1878e:	4630      	mov	r0, r6
   18790:	f7f7 fa90 	bl	fcb4 <WsfQueueDeq>
   18794:	4604      	mov	r4, r0
   18796:	2800      	cmp	r0, #0
   18798:	d1d9      	bne.n	1874e <attsProcExecWriteReq+0x46>
  {
    err = ATT_ERR_INVALID_PDU;
  }

  /* send response or error response */
  if (err)
   1879a:	b167      	cbz	r7, 187b6 <attsProcExecWriteReq+0xae>
   1879c:	e000      	b.n	187a0 <attsProcExecWriteReq+0x98>
    err = ATT_ERR_INVALID_PDU;
   1879e:	2704      	movs	r7, #4
  {
    attsErrRsp(pCcb->handle, ATT_PDU_EXEC_WRITE_REQ, 0, err);
   187a0:	8b30      	ldrh	r0, [r6, #24]
   187a2:	463b      	mov	r3, r7
   187a4:	2200      	movs	r2, #0
   187a6:	2118      	movs	r1, #24
   187a8:	f7fe fe06 	bl	173b8 <attsErrRsp>
      UINT8_TO_BSTREAM(p, ATT_PDU_EXEC_WRITE_RSP);

      L2cDataReq(L2C_CID_ATT, pCcb->handle, ATT_EXEC_WRITE_RSP_LEN, pBuf);
    }
  }
}
   187ac:	b006      	add	sp, #24
   187ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    attsClearPrepWrites(pCcb);
   187b2:	f7fe fe1f 	bl	173f4 <attsClearPrepWrites>
    if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_EXEC_WRITE_RSP_LEN)) != NULL)
   187b6:	2009      	movs	r0, #9
   187b8:	f000 f90e 	bl	189d8 <attMsgAlloc>
   187bc:	2800      	cmp	r0, #0
   187be:	d0f5      	beq.n	187ac <attsProcExecWriteReq+0xa4>
      UINT8_TO_BSTREAM(p, ATT_PDU_EXEC_WRITE_RSP);
   187c0:	2319      	movs	r3, #25
   187c2:	7203      	strb	r3, [r0, #8]
      L2cDataReq(L2C_CID_ATT, pCcb->handle, ATT_EXEC_WRITE_RSP_LEN, pBuf);
   187c4:	8b31      	ldrh	r1, [r6, #24]
   187c6:	4603      	mov	r3, r0
   187c8:	2201      	movs	r2, #1
   187ca:	2004      	movs	r0, #4
   187cc:	f7fa ffb4 	bl	13738 <L2cDataReq>
}
   187d0:	b006      	add	sp, #24
   187d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   187d6:	069b      	lsls	r3, r3, #26
   187d8:	d513      	bpl.n	18802 <attsProcExecWriteReq+0xfa>
   187da:	f8d8 7014 	ldr.w	r7, [r8, #20]
   187de:	b187      	cbz	r7, 18802 <attsProcExecWriteReq+0xfa>
    err = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_WRITE, pPrep->handle, p);
   187e0:	4613      	mov	r3, r2
   187e2:	7f30      	ldrb	r0, [r6, #28]
   187e4:	88e2      	ldrh	r2, [r4, #6]
   187e6:	2109      	movs	r1, #9
   187e8:	47b8      	blx	r7
   187ea:	4607      	mov	r7, r0
   187ec:	e7cb      	b.n	18786 <attsProcExecWriteReq+0x7e>
    err = ATT_ERR_WRITE;
   187ee:	2703      	movs	r7, #3
          attsClearPrepWrites(pCcb);
   187f0:	4630      	mov	r0, r6
   187f2:	f7fe fdff 	bl	173f4 <attsClearPrepWrites>
   187f6:	e7c7      	b.n	18788 <attsProcExecWriteReq+0x80>
   187f8:	4630      	mov	r0, r6
    err = ATT_ERR_UNLIKELY;
   187fa:	270e      	movs	r7, #14
          attsClearPrepWrites(pCcb);
   187fc:	f7fe fdfa 	bl	173f4 <attsClearPrepWrites>
   18800:	e7c2      	b.n	18788 <attsProcExecWriteReq+0x80>
    memcpy((pAttr->pValue + pPrep->offset), p, pPrep->writeLen);
   18802:	8923      	ldrh	r3, [r4, #8]
   18804:	6868      	ldr	r0, [r5, #4]
   18806:	4611      	mov	r1, r2
   18808:	4418      	add	r0, r3
   1880a:	88a2      	ldrh	r2, [r4, #4]
   1880c:	f7f3 fc78 	bl	c100 <memcpy>
    if ((pAttr->settings & ATTS_SET_VARIABLE_LEN) != 0)
   18810:	7baf      	ldrb	r7, [r5, #14]
   18812:	f017 0708 	ands.w	r7, r7, #8
   18816:	d0b7      	beq.n	18788 <attsProcExecWriteReq+0x80>
      *(pAttr->pLen) = pPrep->writeLen + pPrep->offset;
   18818:	88a3      	ldrh	r3, [r4, #4]
   1881a:	8921      	ldrh	r1, [r4, #8]
   1881c:	68aa      	ldr	r2, [r5, #8]
   1881e:	440b      	add	r3, r1
   18820:	8013      	strh	r3, [r2, #0]
  uint8_t     err = ATT_SUCCESS;
   18822:	2700      	movs	r7, #0
   18824:	e7b0      	b.n	18788 <attsProcExecWriteReq+0x80>
          err = ATT_ERR_OFFSET;
   18826:	2707      	movs	r7, #7
          attsClearPrepWrites(pCcb);
   18828:	4630      	mov	r0, r6
   1882a:	f7fe fde3 	bl	173f4 <attsClearPrepWrites>
  if (err)
   1882e:	e7b7      	b.n	187a0 <attsProcExecWriteReq+0x98>
          err = ATT_ERR_LENGTH;
   18830:	270d      	movs	r7, #13
   18832:	e7f9      	b.n	18828 <attsProcExecWriteReq+0x120>
   18834:	100057bc 	.word	0x100057bc

00018838 <attEmptyHandler>:
 */
/*************************************************************************************************/
void attEmptyHandler(wsfMsgHdr_t *pMsg)
{
  return;
}
   18838:	4770      	bx	lr
   1883a:	bf00      	nop

0001883c <attEmptyConnCback>:
 */
/*************************************************************************************************/
void attEmptyConnCback(attCcb_t *pCcb, dmEvt_t *pDmEvt)
{
  return;
}
   1883c:	4770      	bx	lr
   1883e:	bf00      	nop

00018840 <attEmptyDataCback>:
 */
/*************************************************************************************************/
void attEmptyDataCback(uint16_t handle, uint16_t len, uint8_t *pPacket)
{
  return;
}
   18840:	4770      	bx	lr
   18842:	bf00      	nop

00018844 <attDmConnCback>:
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   18844:	7883      	ldrb	r3, [r0, #2]
  pCcb = attCcbByConnId((dmConnId_t) pDmEvt->hdr.param);
   18846:	7802      	ldrb	r2, [r0, #0]
{
   18848:	b570      	push	{r4, r5, r6, lr}
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   1884a:	2b27      	cmp	r3, #39	; 0x27
{
   1884c:	4604      	mov	r4, r0
/*************************************************************************************************/
attCcb_t *attCcbByConnId(dmConnId_t connId)
{
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return &attCb.ccb[connId - 1];
   1884e:	f102 30ff 	add.w	r0, r2, #4294967295
    pCcb->handle = pDmEvt->connOpen.handle;
   18852:	4e18      	ldr	r6, [pc, #96]	; (188b4 <attDmConnCback+0x70>)
   18854:	ea4f 05c0 	mov.w	r5, r0, lsl #3
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   18858:	d10b      	bne.n	18872 <attDmConnCback+0x2e>
    pCcb->handle = pDmEvt->connOpen.handle;
   1885a:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
   1885e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   18862:	88e1      	ldrh	r1, [r4, #6]
    pCcb->connId = (dmConnId_t) pDmEvt->hdr.param;
   18864:	771a      	strb	r2, [r3, #28]
    pCcb->control = 0;
   18866:	2200      	movs	r2, #0
   18868:	775a      	strb	r2, [r3, #29]
    pCcb->pPendDbHashRsp = NULL;
   1886a:	621a      	str	r2, [r3, #32]
    pCcb->mtu = ATT_DEFAULT_MTU;
   1886c:	2217      	movs	r2, #23
    pCcb->handle = pDmEvt->connOpen.handle;
   1886e:	8319      	strh	r1, [r3, #24]
    pCcb->mtu = ATT_DEFAULT_MTU;
   18870:	835a      	strh	r2, [r3, #26]
  if (pCcb->connId != DM_CONN_ID_NONE)
   18872:	4405      	add	r5, r0
   18874:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   18878:	7f2b      	ldrb	r3, [r5, #28]
   1887a:	b163      	cbz	r3, 18896 <attDmConnCback+0x52>
    (*attCb.pServer->connCback)(pCcb, pDmEvt);
   1887c:	6f33      	ldr	r3, [r6, #112]	; 0x70
   1887e:	4621      	mov	r1, r4
   18880:	68db      	ldr	r3, [r3, #12]
   18882:	4628      	mov	r0, r5
   18884:	4798      	blx	r3
    (*attCb.pClient->connCback)(pCcb, pDmEvt);
   18886:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
   18888:	4621      	mov	r1, r4
   1888a:	68db      	ldr	r3, [r3, #12]
   1888c:	4628      	mov	r0, r5
   1888e:	4798      	blx	r3
    if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
   18890:	78a3      	ldrb	r3, [r4, #2]
   18892:	2b28      	cmp	r3, #40	; 0x28
   18894:	d006      	beq.n	188a4 <attDmConnCback+0x60>
  if (attCb.connCback != NULL)
   18896:	6fb3      	ldr	r3, [r6, #120]	; 0x78
   18898:	b11b      	cbz	r3, 188a2 <attDmConnCback+0x5e>
    (*attCb.connCback)(pDmEvt);
   1889a:	4620      	mov	r0, r4
}
   1889c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    (*attCb.connCback)(pDmEvt);
   188a0:	4718      	bx	r3
}
   188a2:	bd70      	pop	{r4, r5, r6, pc}
      if (pCcb->pPendDbHashRsp)
   188a4:	6a28      	ldr	r0, [r5, #32]
      pCcb->connId = DM_CONN_ID_NONE;
   188a6:	2300      	movs	r3, #0
   188a8:	772b      	strb	r3, [r5, #28]
      if (pCcb->pPendDbHashRsp)
   188aa:	2800      	cmp	r0, #0
   188ac:	d0f3      	beq.n	18896 <attDmConnCback+0x52>
        WsfBufFree(pCcb->pPendDbHashRsp);
   188ae:	f7f7 f81b 	bl	f8e8 <WsfBufFree>
   188b2:	e7f0      	b.n	18896 <attDmConnCback+0x52>
   188b4:	100057d4 	.word	0x100057d4

000188b8 <attL2cDataCback>:
  if ((pduType & ATT_PDU_MASK_SERVER) != 0)
   188b8:	7a13      	ldrb	r3, [r2, #8]
   188ba:	f013 0f01 	tst.w	r3, #1
    (*attCb.pClient->dataCback)(handle, len, pPacket);
   188be:	4b04      	ldr	r3, [pc, #16]	; (188d0 <attL2cDataCback+0x18>)
  if ((pduType & ATT_PDU_MASK_SERVER) != 0)
   188c0:	d002      	beq.n	188c8 <attL2cDataCback+0x10>
    (*attCb.pClient->dataCback)(handle, len, pPacket);
   188c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   188c4:	681b      	ldr	r3, [r3, #0]
   188c6:	4718      	bx	r3
    (*attCb.pServer->dataCback)(handle, len, pPacket);
   188c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   188ca:	681b      	ldr	r3, [r3, #0]
   188cc:	4718      	bx	r3
   188ce:	bf00      	nop
   188d0:	100057d4 	.word	0x100057d4

000188d4 <attL2cCtrlCback>:
{
   188d4:	b570      	push	{r4, r5, r6, lr}
  return &attCb.ccb[connId - 1];
   188d6:	7804      	ldrb	r4, [r0, #0]
  if (pCcb->connId != DM_CONN_ID_NONE)
   188d8:	4e0f      	ldr	r6, [pc, #60]	; (18918 <attL2cCtrlCback+0x44>)
  return &attCb.ccb[connId - 1];
   188da:	3c01      	subs	r4, #1
  if (pCcb->connId != DM_CONN_ID_NONE)
   188dc:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   188e0:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   188e4:	7f23      	ldrb	r3, [r4, #28]
   188e6:	b1b3      	cbz	r3, 18916 <attL2cCtrlCback+0x42>
    if (pMsg->event == L2C_CTRL_FLOW_DISABLE_IND)
   188e8:	7883      	ldrb	r3, [r0, #2]
   188ea:	2b01      	cmp	r3, #1
   188ec:	4605      	mov	r5, r0
      pCcb->control |= ATT_CCB_STATUS_FLOW_DISABLED;
   188ee:	7f63      	ldrb	r3, [r4, #29]
    if (pMsg->event == L2C_CTRL_FLOW_DISABLE_IND)
   188f0:	d00e      	beq.n	18910 <attL2cCtrlCback+0x3c>
      pCcb->control &= ~ATT_CCB_STATUS_FLOW_DISABLED;
   188f2:	f023 0302 	bic.w	r3, r3, #2
   188f6:	7763      	strb	r3, [r4, #29]
      (*attCb.pServer->ctrlCback)(pMsg);
   188f8:	6f33      	ldr	r3, [r6, #112]	; 0x70
   188fa:	685b      	ldr	r3, [r3, #4]
   188fc:	4798      	blx	r3
      if (!(pCcb->control & ATT_CCB_STATUS_FLOW_DISABLED))
   188fe:	7f63      	ldrb	r3, [r4, #29]
   18900:	079b      	lsls	r3, r3, #30
   18902:	d408      	bmi.n	18916 <attL2cCtrlCback+0x42>
        (*attCb.pClient->ctrlCback)(pMsg);
   18904:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
   18906:	4628      	mov	r0, r5
   18908:	685b      	ldr	r3, [r3, #4]
}
   1890a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        (*attCb.pClient->ctrlCback)(pMsg);
   1890e:	4718      	bx	r3
      pCcb->control |= ATT_CCB_STATUS_FLOW_DISABLED;
   18910:	f043 0302 	orr.w	r3, r3, #2
   18914:	7763      	strb	r3, [r4, #29]
}
   18916:	bd70      	pop	{r4, r5, r6, pc}
   18918:	100057d4 	.word	0x100057d4

0001891c <attCcbByHandle>:
{
   1891c:	b508      	push	{r3, lr}
  if ((connId = DmConnIdByHandle(handle)) != DM_CONN_ID_NONE)
   1891e:	f000 fe73 	bl	19608 <DmConnIdByHandle>
   18922:	b128      	cbz	r0, 18930 <attCcbByHandle+0x14>
    return &attCb.ccb[connId - 1];
   18924:	4b03      	ldr	r3, [pc, #12]	; (18934 <attCcbByHandle+0x18>)
   18926:	3801      	subs	r0, #1
   18928:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   1892c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
   18930:	bd08      	pop	{r3, pc}
   18932:	bf00      	nop
   18934:	100057d4 	.word	0x100057d4

00018938 <attUuidCmp16to128>:
 *
 *  \return TRUE of UUIDs match, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t attUuidCmp16to128(const uint8_t *pUuid16, const uint8_t *pUuid128)
{
   18938:	b508      	push	{r3, lr}
  attBaseUuid[ATT_BASE_UUID_POS_0] = pUuid16[0];
   1893a:	4b07      	ldr	r3, [pc, #28]	; (18958 <attUuidCmp16to128+0x20>)
   1893c:	7802      	ldrb	r2, [r0, #0]
   1893e:	731a      	strb	r2, [r3, #12]
  attBaseUuid[ATT_BASE_UUID_POS_1] = pUuid16[1];
   18940:	f890 c001 	ldrb.w	ip, [r0, #1]
   18944:	f883 c00d 	strb.w	ip, [r3, #13]

  return (memcmp(attBaseUuid, pUuid128, ATT_128_UUID_LEN) == 0);
   18948:	2210      	movs	r2, #16
   1894a:	4618      	mov	r0, r3
   1894c:	f004 f8b2 	bl	1cab4 <memcmp>
}
   18950:	fab0 f080 	clz	r0, r0
   18954:	0940      	lsrs	r0, r0, #5
   18956:	bd08      	pop	{r3, pc}
   18958:	10002b70 	.word	0x10002b70

0001895c <attSetMtu>:
void attSetMtu(attCcb_t *pCcb, uint16_t peerMtu, uint16_t localMtu)
{
  uint16_t  mtu;

  /* set negotiated mtu for the connection to the lesser of ours and theirs */
  mtu = WSF_MIN(peerMtu, localMtu);
   1895c:	428a      	cmp	r2, r1

  /* if current mtu is not the same as the negotiated value */
  if (pCcb->mtu != mtu)
   1895e:	8b43      	ldrh	r3, [r0, #26]
  mtu = WSF_MIN(peerMtu, localMtu);
   18960:	bf28      	it	cs
   18962:	460a      	movcs	r2, r1
  if (pCcb->mtu != mtu)
   18964:	4293      	cmp	r3, r2
   18966:	d017      	beq.n	18998 <attSetMtu+0x3c>
 *  \return None.
 */
/*************************************************************************************************/
void attExecCallback(dmConnId_t connId, uint8_t event, uint16_t handle, uint8_t status, uint16_t mtu)
{
  if (attCb.cback)
   18968:	4b0c      	ldr	r3, [pc, #48]	; (1899c <attSetMtu+0x40>)
    pCcb->mtu = mtu;
   1896a:	8342      	strh	r2, [r0, #26]
  if (attCb.cback)
   1896c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   1896e:	b19b      	cbz	r3, 18998 <attSetMtu+0x3c>
{
   18970:	b500      	push	{lr}
   18972:	b085      	sub	sp, #20
  {
    attEvt_t evt;

    evt.hdr.param = connId;
   18974:	f890 c01c 	ldrb.w	ip, [r0, #28]
   18978:	f8ad c000 	strh.w	ip, [sp]
    evt.hdr.event = event;
    evt.hdr.status = status;
    evt.valueLen = 0;
   1897c:	2100      	movs	r1, #0
    evt.hdr.event = event;
   1897e:	2012      	movs	r0, #18
   18980:	f8ad 0002 	strh.w	r0, [sp, #2]
    evt.valueLen = 0;
   18984:	9102      	str	r1, [sp, #8]
    evt.handle = handle;
    evt.continuing = 0;
   18986:	f88d 100c 	strb.w	r1, [sp, #12]
    evt.mtu = mtu;
   1898a:	f8ad 200e 	strh.w	r2, [sp, #14]

    (*attCb.cback)(&evt);
   1898e:	4668      	mov	r0, sp
   18990:	4798      	blx	r3
}
   18992:	b005      	add	sp, #20
   18994:	f85d fb04 	ldr.w	pc, [sp], #4
   18998:	4770      	bx	lr
   1899a:	bf00      	nop
   1899c:	100057d4 	.word	0x100057d4

000189a0 <attExecCallback>:
{
   189a0:	b510      	push	{r4, lr}
  if (attCb.cback)
   189a2:	4c0c      	ldr	r4, [pc, #48]	; (189d4 <attExecCallback+0x34>)
{
   189a4:	b084      	sub	sp, #16
  if (attCb.cback)
   189a6:	6f64      	ldr	r4, [r4, #116]	; 0x74
{
   189a8:	f8bd c018 	ldrh.w	ip, [sp, #24]
  if (attCb.cback)
   189ac:	b184      	cbz	r4, 189d0 <attExecCallback+0x30>
    evt.hdr.event = event;
   189ae:	f88d 1002 	strb.w	r1, [sp, #2]
    evt.valueLen = 0;
   189b2:	2100      	movs	r1, #0
    evt.hdr.param = connId;
   189b4:	f8ad 0000 	strh.w	r0, [sp]
    evt.hdr.status = status;
   189b8:	f88d 3003 	strb.w	r3, [sp, #3]
    evt.valueLen = 0;
   189bc:	f8ad 1008 	strh.w	r1, [sp, #8]
    evt.handle = handle;
   189c0:	f8ad 200a 	strh.w	r2, [sp, #10]
    evt.continuing = 0;
   189c4:	f88d 100c 	strb.w	r1, [sp, #12]
    evt.mtu = mtu;
   189c8:	f8ad c00e 	strh.w	ip, [sp, #14]
    (*attCb.cback)(&evt);
   189cc:	4668      	mov	r0, sp
   189ce:	47a0      	blx	r4
  }
}
   189d0:	b004      	add	sp, #16
   189d2:	bd10      	pop	{r4, pc}
   189d4:	100057d4 	.word	0x100057d4

000189d8 <attMsgAlloc>:
 *  \return Pointer to data message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *attMsgAlloc(uint16_t len)
{
  return WsfMsgDataAlloc(len, HCI_TX_DATA_TAILROOM);
   189d8:	2100      	movs	r1, #0
   189da:	f7f6 bfab 	b.w	f934 <WsfMsgDataAlloc>
   189de:	bf00      	nop

000189e0 <AttHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttHandlerInit(wsfHandlerId_t handlerId)
{
   189e0:	b510      	push	{r4, lr}
  /* store handler ID */
  attCb.handlerId = handlerId;
   189e2:	4b08      	ldr	r3, [pc, #32]	; (18a04 <AttHandlerInit+0x24>)

  /* initialize control block */
  attCb.pClient = &attFcnDefault;
   189e4:	4c08      	ldr	r4, [pc, #32]	; (18a08 <AttHandlerInit+0x28>)
  attCb.pServer = &attFcnDefault;

  /* Register with L2C */
  L2cRegister(L2C_CID_ATT,  attL2cDataCback, attL2cCtrlCback);
   189e6:	4909      	ldr	r1, [pc, #36]	; (18a0c <AttHandlerInit+0x2c>)
  attCb.handlerId = handlerId;
   189e8:	f883 007c 	strb.w	r0, [r3, #124]	; 0x7c
  L2cRegister(L2C_CID_ATT,  attL2cDataCback, attL2cCtrlCback);
   189ec:	4a08      	ldr	r2, [pc, #32]	; (18a10 <AttHandlerInit+0x30>)
   189ee:	2004      	movs	r0, #4
  attCb.pServer = &attFcnDefault;
   189f0:	e9c3 441b 	strd	r4, r4, [r3, #108]	; 0x6c
  L2cRegister(L2C_CID_ATT,  attL2cDataCback, attL2cCtrlCback);
   189f4:	f7fa fe96 	bl	13724 <L2cRegister>

  /* Register with DM */
  DmConnRegister(DM_CLIENT_ID_ATT, attDmConnCback);

}
   189f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  DmConnRegister(DM_CLIENT_ID_ATT, attDmConnCback);
   189fc:	4905      	ldr	r1, [pc, #20]	; (18a14 <AttHandlerInit+0x34>)
   189fe:	2000      	movs	r0, #0
   18a00:	f000 bdf2 	b.w	195e8 <DmConnRegister>
   18a04:	100057d4 	.word	0x100057d4
   18a08:	000202b0 	.word	0x000202b0
   18a0c:	000188b9 	.word	0x000188b9
   18a10:	000188d5 	.word	0x000188d5
   18a14:	00018845 	.word	0x00018845

00018a18 <AttHandler>:
 */
/*************************************************************************************************/
void AttHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
  /* Handle message */
  if (pMsg != NULL)
   18a18:	4608      	mov	r0, r1
   18a1a:	b149      	cbz	r1, 18a30 <AttHandler+0x18>
  {
    if (pMsg->event >= ATTS_MSG_START)
   18a1c:	788b      	ldrb	r3, [r1, #2]
   18a1e:	2b1f      	cmp	r3, #31
    {
      /* pass event to server */
      (*attCb.pServer->msgCback)(pMsg);
   18a20:	4b04      	ldr	r3, [pc, #16]	; (18a34 <AttHandler+0x1c>)
    if (pMsg->event >= ATTS_MSG_START)
   18a22:	d902      	bls.n	18a2a <AttHandler+0x12>
      (*attCb.pServer->msgCback)(pMsg);
   18a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   18a26:	689b      	ldr	r3, [r3, #8]
   18a28:	4718      	bx	r3
    }
    else
    {
      /* pass event to client */
      (*attCb.pClient->msgCback)(pMsg);
   18a2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   18a2c:	689b      	ldr	r3, [r3, #8]
   18a2e:	4718      	bx	r3
  /* Handle events */
  else if (event)
  {

  }
}
   18a30:	4770      	bx	lr
   18a32:	bf00      	nop
   18a34:	100057d4 	.word	0x100057d4

00018a38 <dmAdvInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvInit(void)
{
   18a38:	b410      	push	{r4}
  dmAdvCb.intervalMin[advHandle] = DM_GAP_ADV_SLOW_INT_MIN;
   18a3a:	4b09      	ldr	r3, [pc, #36]	; (18a60 <dmAdvInit+0x28>)
  dmCb.advFiltPolicy[advHandle] = HCI_ADV_FILT_NONE;
   18a3c:	4a09      	ldr	r2, [pc, #36]	; (18a64 <dmAdvInit+0x2c>)
  dmAdvCb.intervalMin[advHandle] = DM_GAP_ADV_SLOW_INT_MIN;
   18a3e:	4c0a      	ldr	r4, [pc, #40]	; (18a68 <dmAdvInit+0x30>)
   18a40:	480a      	ldr	r0, [pc, #40]	; (18a6c <dmAdvInit+0x34>)
  dmCb.advFiltPolicy[advHandle] = HCI_ADV_FILT_NONE;
   18a42:	2100      	movs	r1, #0
  dmAdvCb.intervalMin[advHandle] = DM_GAP_ADV_SLOW_INT_MIN;
   18a44:	e9c3 4004 	strd	r4, r0, [r3, #16]
  dmAdvCb.advType[advHandle] = DM_ADV_NONE;
   18a48:	4c09      	ldr	r4, [pc, #36]	; (18a70 <dmAdvInit+0x38>)
  for (i = 0; i < DM_NUM_ADV_SETS; i++)
  {
    dmAdvCbInit(i);
  }

  dmAdvCb.advTimer.handlerId = dmCb.handlerId;
   18a4a:	7b10      	ldrb	r0, [r2, #12]
  dmAdvCb.advType[advHandle] = DM_ADV_NONE;
   18a4c:	619c      	str	r4, [r3, #24]
  dmCb.advFiltPolicy[advHandle] = HCI_ADV_FILT_NONE;
   18a4e:	f8a2 1011 	strh.w	r1, [r2, #17]
  dmAdvCb.advState[advHandle] = DM_ADV_STATE_IDLE;
   18a52:	f8a3 101d 	strh.w	r1, [r3, #29]
  dmAdvCb.advTimer.handlerId = dmCb.handlerId;
   18a56:	7318      	strb	r0, [r3, #12]
  dmCb.advAddrType = DM_ADDR_PUBLIC;
   18a58:	7391      	strb	r1, [r2, #14]
}
   18a5a:	f85d 4b04 	ldr.w	r4, [sp], #4
   18a5e:	4770      	bx	lr
   18a60:	10005854 	.word	0x10005854
   18a64:	10005960 	.word	0x10005960
   18a68:	06400640 	.word	0x06400640
   18a6c:	07800780 	.word	0x07800780
   18a70:	0707ffff 	.word	0x0707ffff

00018a74 <dmAdvGenConnCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvGenConnCmpl(uint8_t advHandle, uint8_t status)
{
   18a74:	b530      	push	{r4, r5, lr}
   18a76:	b08b      	sub	sp, #44	; 0x2c
   18a78:	460d      	mov	r5, r1
   18a7a:	4604      	mov	r4, r0
  hciLeConnCmplEvt_t  leConnCmpl;

  /* generate enhanced connection complete event */
  memset(&leConnCmpl, 0, sizeof(leConnCmpl));
   18a7c:	2224      	movs	r2, #36	; 0x24
   18a7e:	2100      	movs	r1, #0
   18a80:	a801      	add	r0, sp, #4
   18a82:	f004 f849 	bl	1cb18 <memset>

  leConnCmpl.hdr.event = HCI_LE_ENHANCED_CONN_CMPL_CBACK_EVT;
  leConnCmpl.hdr.status = leConnCmpl.status = status;
  leConnCmpl.role = DM_ROLE_SLAVE;
  leConnCmpl.addrType = dmAdvCb.peerAddrType[advHandle];
   18a86:	4b0e      	ldr	r3, [pc, #56]	; (18ac0 <dmAdvGenConnCmpl+0x4c>)
  leConnCmpl.hdr.status = leConnCmpl.status = status;
   18a88:	f88d 5008 	strb.w	r5, [sp, #8]
  leConnCmpl.hdr.event = HCI_LE_ENHANCED_CONN_CMPL_CBACK_EVT;
   18a8c:	2202      	movs	r2, #2
   18a8e:	f88d 2006 	strb.w	r2, [sp, #6]
  leConnCmpl.role = DM_ROLE_SLAVE;
   18a92:	2201      	movs	r2, #1
   18a94:	f88d 200c 	strb.w	r2, [sp, #12]
  BdaCpy(leConnCmpl.peerAddr, dmAdvCb.peerAddr[advHandle]);
   18a98:	2106      	movs	r1, #6
  leConnCmpl.addrType = dmAdvCb.peerAddrType[advHandle];
   18a9a:	191a      	adds	r2, r3, r4
  BdaCpy(leConnCmpl.peerAddr, dmAdvCb.peerAddr[advHandle]);
   18a9c:	fb01 3104 	mla	r1, r1, r4, r3
   18aa0:	3125      	adds	r1, #37	; 0x25
  leConnCmpl.addrType = dmAdvCb.peerAddrType[advHandle];
   18aa2:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
   18aa6:	f88d 300d 	strb.w	r3, [sp, #13]
  BdaCpy(leConnCmpl.peerAddr, dmAdvCb.peerAddr[advHandle]);
   18aaa:	f10d 000e 	add.w	r0, sp, #14
  leConnCmpl.hdr.status = leConnCmpl.status = status;
   18aae:	f88d 5007 	strb.w	r5, [sp, #7]
  BdaCpy(leConnCmpl.peerAddr, dmAdvCb.peerAddr[advHandle]);
   18ab2:	f7fa fc73 	bl	1339c <BdaCpy>

  /* pass connection complete event to DM connection management module */
  dmDevPassHciEvtToConn((hciEvt_t *) &leConnCmpl);
   18ab6:	a801      	add	r0, sp, #4
   18ab8:	f000 ffe2 	bl	19a80 <dmDevPassHciEvtToConn>
}
   18abc:	b00b      	add	sp, #44	; 0x2c
   18abe:	bd30      	pop	{r4, r5, pc}
   18ac0:	10005854 	.word	0x10005854

00018ac4 <dmAdvActRemoveSet>:
 */
/*************************************************************************************************/
void dmAdvActRemoveSet(dmAdvMsg_t *pMsg)
{
  /* empty */
}
   18ac4:	4770      	bx	lr
   18ac6:	bf00      	nop

00018ac8 <dmAdvMsgHandler>:
 */
/*************************************************************************************************/
void dmAdvMsgHandler(wsfMsgHdr_t *pMsg)
{
  /* execute action function */
  (*dmAdvAct[DM_MSG_MASK(pMsg->event)])((dmAdvMsg_t *)pMsg);
   18ac8:	7883      	ldrb	r3, [r0, #2]
   18aca:	4a03      	ldr	r2, [pc, #12]	; (18ad8 <dmAdvMsgHandler+0x10>)
   18acc:	f003 030f 	and.w	r3, r3, #15
   18ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   18ad4:	4718      	bx	r3
   18ad6:	bf00      	nop
   18ad8:	00020470 	.word	0x00020470

00018adc <dmAdvReset>:
{
   18adc:	b500      	push	{lr}
  if ((dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_STOPPING)     ||
   18ade:	4a0f      	ldr	r2, [pc, #60]	; (18b1c <dmAdvReset+0x40>)
   18ae0:	7f53      	ldrb	r3, [r2, #29]
   18ae2:	2b05      	cmp	r3, #5
{
   18ae4:	b083      	sub	sp, #12
  if ((dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_STOPPING)     ||
   18ae6:	d009      	beq.n	18afc <dmAdvReset+0x20>
   18ae8:	2b01      	cmp	r3, #1
   18aea:	d004      	beq.n	18af6 <dmAdvReset+0x1a>
  dmAdvInit();
   18aec:	f7ff ffa4 	bl	18a38 <dmAdvInit>
}
   18af0:	b003      	add	sp, #12
   18af2:	f85d fb04 	ldr.w	pc, [sp], #4
      ((dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_ADVERTISING) &&
   18af6:	7e13      	ldrb	r3, [r2, #24]
   18af8:	2b01      	cmp	r3, #1
   18afa:	d0f7      	beq.n	18aec <dmAdvReset+0x10>
    WsfTimerStop(&dmAdvCb.advTimer);
   18afc:	4807      	ldr	r0, [pc, #28]	; (18b1c <dmAdvReset+0x40>)
   18afe:	f7f7 fa03 	bl	ff08 <WsfTimerStop>
    (*dmCb.cback)((dmEvt_t *) &advStop);
   18b02:	4b07      	ldr	r3, [pc, #28]	; (18b20 <dmAdvReset+0x44>)
    advStop.event = DM_ADV_STOP_IND;
   18b04:	2222      	movs	r2, #34	; 0x22
    (*dmCb.cback)((dmEvt_t *) &advStop);
   18b06:	689b      	ldr	r3, [r3, #8]
    advStop.event = DM_ADV_STOP_IND;
   18b08:	f8ad 2006 	strh.w	r2, [sp, #6]
    (*dmCb.cback)((dmEvt_t *) &advStop);
   18b0c:	a801      	add	r0, sp, #4
   18b0e:	4798      	blx	r3
  dmAdvInit();
   18b10:	f7ff ff92 	bl	18a38 <dmAdvInit>
}
   18b14:	b003      	add	sp, #12
   18b16:	f85d fb04 	ldr.w	pc, [sp], #4
   18b1a:	bf00      	nop
   18b1c:	10005854 	.word	0x10005854
   18b20:	10005960 	.word	0x10005960

00018b24 <dmAdvActConfig>:
{
   18b24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DM_TRACE_INFO1("dmAdvActConfig: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   18b28:	4c18      	ldr	r4, [pc, #96]	; (18b8c <dmAdvActConfig+0x68>)
{
   18b2a:	b087      	sub	sp, #28
  DM_TRACE_INFO1("dmAdvActConfig: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   18b2c:	7f61      	ldrb	r1, [r4, #29]
{
   18b2e:	4605      	mov	r5, r0
  DM_TRACE_INFO1("dmAdvActConfig: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   18b30:	4817      	ldr	r0, [pc, #92]	; (18b90 <dmAdvActConfig+0x6c>)
   18b32:	f7f7 fa89 	bl	10048 <WsfTrace>
  if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_IDLE)
   18b36:	7f63      	ldrb	r3, [r4, #29]
   18b38:	b9fb      	cbnz	r3, 18b7a <dmAdvActConfig+0x56>
    if ((dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] == DM_ADV_CONN_DIRECT) ||
   18b3a:	7e23      	ldrb	r3, [r4, #24]
   18b3c:	2b01      	cmp	r3, #1
   18b3e:	d01f      	beq.n	18b80 <dmAdvActConfig+0x5c>
   18b40:	2b04      	cmp	r3, #4
   18b42:	d01d      	beq.n	18b80 <dmAdvActConfig+0x5c>
  HciLeSetAdvParamCmd(dmAdvCb.intervalMin[DM_ADV_HANDLE_DEFAULT], /* advIntervalMin */
   18b44:	4f13      	ldr	r7, [pc, #76]	; (18b94 <dmAdvActConfig+0x70>)
   18b46:	8aa1      	ldrh	r1, [r4, #20]
   18b48:	7bb8      	ldrb	r0, [r7, #14]
    dmAdvConfig(pMsg->apiConfig.advType, pMsg->apiConfig.peerAddrType, pMsg->apiConfig.peerAddr);
   18b4a:	796e      	ldrb	r6, [r5, #5]
   18b4c:	f895 9006 	ldrb.w	r9, [r5, #6]
  HciLeSetAdvParamCmd(dmAdvCb.intervalMin[DM_ADV_HANDLE_DEFAULT], /* advIntervalMin */
   18b50:	f8b4 8010 	ldrh.w	r8, [r4, #16]
   18b54:	9105      	str	r1, [sp, #20]
   18b56:	f000 ffd5 	bl	19b04 <DmLlAddrType>
   18b5a:	7c7a      	ldrb	r2, [r7, #17]
   18b5c:	9203      	str	r2, [sp, #12]
    dmAdvConfig(pMsg->apiConfig.advType, pMsg->apiConfig.peerAddrType, pMsg->apiConfig.peerAddr);
   18b5e:	3507      	adds	r5, #7
  HciLeSetAdvParamCmd(dmAdvCb.intervalMin[DM_ADV_HANDLE_DEFAULT], /* advIntervalMin */
   18b60:	7ea2      	ldrb	r2, [r4, #26]
   18b62:	9202      	str	r2, [sp, #8]
   18b64:	4603      	mov	r3, r0
   18b66:	9905      	ldr	r1, [sp, #20]
   18b68:	f8cd 9000 	str.w	r9, [sp]
   18b6c:	9501      	str	r5, [sp, #4]
   18b6e:	4632      	mov	r2, r6
   18b70:	4640      	mov	r0, r8
   18b72:	f7f4 fc67 	bl	d444 <HciLeSetAdvParamCmd>
  dmLegAdvCb.advType = advType;
   18b76:	4b08      	ldr	r3, [pc, #32]	; (18b98 <dmAdvActConfig+0x74>)
   18b78:	701e      	strb	r6, [r3, #0]
}
   18b7a:	b007      	add	sp, #28
   18b7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      DM_TRACE_WARN0("DmAdvConfig during directed advertising!");
   18b80:	4806      	ldr	r0, [pc, #24]	; (18b9c <dmAdvActConfig+0x78>)
}
   18b82:	b007      	add	sp, #28
   18b84:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      DM_TRACE_WARN0("DmAdvConfig during directed advertising!");
   18b88:	f7f7 ba5e 	b.w	10048 <WsfTrace>
   18b8c:	10005854 	.word	0x10005854
   18b90:	000202c4 	.word	0x000202c4
   18b94:	10005960 	.word	0x10005960
   18b98:	10005888 	.word	0x10005888
   18b9c:	000202e0 	.word	0x000202e0

00018ba0 <dmAdvActSetData>:
{
   18ba0:	b538      	push	{r3, r4, r5, lr}
  DM_TRACE_INFO1("dmAdvActSetData: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   18ba2:	4d0b      	ldr	r5, [pc, #44]	; (18bd0 <dmAdvActSetData+0x30>)
{
   18ba4:	4604      	mov	r4, r0
  DM_TRACE_INFO1("dmAdvActSetData: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   18ba6:	7f69      	ldrb	r1, [r5, #29]
   18ba8:	480a      	ldr	r0, [pc, #40]	; (18bd4 <dmAdvActSetData+0x34>)
   18baa:	f7f7 fa4d 	bl	10048 <WsfTrace>
  if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_IDLE)
   18bae:	7f6b      	ldrb	r3, [r5, #29]
   18bb0:	b943      	cbnz	r3, 18bc4 <dmAdvActSetData+0x24>
    if (pMsg->apiSetData.location == DM_DATA_LOC_ADV)
   18bb2:	79a3      	ldrb	r3, [r4, #6]
      HciLeSetAdvDataCmd(pMsg->apiSetData.len, pMsg->apiSetData.pData);
   18bb4:	79e0      	ldrb	r0, [r4, #7]
   18bb6:	f104 0108 	add.w	r1, r4, #8
    if (pMsg->apiSetData.location == DM_DATA_LOC_ADV)
   18bba:	b923      	cbnz	r3, 18bc6 <dmAdvActSetData+0x26>
}
   18bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      HciLeSetAdvDataCmd(pMsg->apiSetData.len, pMsg->apiSetData.pData);
   18bc0:	f7f4 bbfe 	b.w	d3c0 <HciLeSetAdvDataCmd>
}
   18bc4:	bd38      	pop	{r3, r4, r5, pc}
   18bc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      HciLeSetScanRespDataCmd(pMsg->apiSetData.len, pMsg->apiSetData.pData);
   18bca:	f7f4 bccd 	b.w	d568 <HciLeSetScanRespDataCmd>
   18bce:	bf00      	nop
   18bd0:	10005854 	.word	0x10005854
   18bd4:	0002030c 	.word	0x0002030c

00018bd8 <dmAdvActStart>:
{
   18bd8:	b538      	push	{r3, r4, r5, lr}
  DM_TRACE_INFO1("dmAdvActStart: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   18bda:	4c0e      	ldr	r4, [pc, #56]	; (18c14 <dmAdvActStart+0x3c>)
{
   18bdc:	4605      	mov	r5, r0
  DM_TRACE_INFO1("dmAdvActStart: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   18bde:	7f61      	ldrb	r1, [r4, #29]
   18be0:	480d      	ldr	r0, [pc, #52]	; (18c18 <dmAdvActStart+0x40>)
   18be2:	f7f7 fa31 	bl	10048 <WsfTrace>
   if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_IDLE)
   18be6:	7f63      	ldrb	r3, [r4, #29]
   18be8:	b96b      	cbnz	r3, 18c06 <dmAdvActStart+0x2e>
    if ((dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] == DM_ADV_CONN_DIRECT) ||
   18bea:	7e23      	ldrb	r3, [r4, #24]
   18bec:	2b01      	cmp	r3, #1
   18bee:	d00b      	beq.n	18c08 <dmAdvActStart+0x30>
   18bf0:	2b04      	cmp	r3, #4
   18bf2:	d009      	beq.n	18c08 <dmAdvActStart+0x30>
    dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_STARTING;
   18bf4:	2303      	movs	r3, #3
   18bf6:	7763      	strb	r3, [r4, #29]
    dmAdvCb.advDuration[DM_ADV_HANDLE_DEFAULT] = pMsg->apiStart.duration[DM_ADV_HANDLE_DEFAULT];
   18bf8:	892b      	ldrh	r3, [r5, #8]
   18bfa:	8423      	strh	r3, [r4, #32]
    HciLeSetAdvEnableCmd(TRUE);
   18bfc:	2001      	movs	r0, #1
}
   18bfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HciLeSetAdvEnableCmd(TRUE);
   18c02:	f7f4 bba9 	b.w	d358 <HciLeSetAdvEnableCmd>
}
   18c06:	bd38      	pop	{r3, r4, r5, pc}
   18c08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      DM_TRACE_WARN0("dmAdvActStart during directed advertising!");
   18c0c:	4803      	ldr	r0, [pc, #12]	; (18c1c <dmAdvActStart+0x44>)
   18c0e:	f7f7 ba1b 	b.w	10048 <WsfTrace>
   18c12:	bf00      	nop
   18c14:	10005854 	.word	0x10005854
   18c18:	00020328 	.word	0x00020328
   18c1c:	00020344 	.word	0x00020344

00018c20 <dmAdvActStop>:
{
   18c20:	b510      	push	{r4, lr}
  DM_TRACE_INFO1("dmAdvActStop: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   18c22:	4c0d      	ldr	r4, [pc, #52]	; (18c58 <dmAdvActStop+0x38>)
   18c24:	480d      	ldr	r0, [pc, #52]	; (18c5c <dmAdvActStop+0x3c>)
   18c26:	7f61      	ldrb	r1, [r4, #29]
   18c28:	f7f7 fa0e 	bl	10048 <WsfTrace>
  if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_ADVERTISING)
   18c2c:	7f63      	ldrb	r3, [r4, #29]
   18c2e:	2b01      	cmp	r3, #1
   18c30:	d000      	beq.n	18c34 <dmAdvActStop+0x14>
}
   18c32:	bd10      	pop	{r4, pc}
    if ((dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] == DM_ADV_CONN_DIRECT) ||
   18c34:	7e23      	ldrb	r3, [r4, #24]
   18c36:	2b01      	cmp	r3, #1
   18c38:	d008      	beq.n	18c4c <dmAdvActStop+0x2c>
   18c3a:	2b04      	cmp	r3, #4
   18c3c:	d006      	beq.n	18c4c <dmAdvActStop+0x2c>
    dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_STOPPING;
   18c3e:	2305      	movs	r3, #5
   18c40:	7763      	strb	r3, [r4, #29]
    HciLeSetAdvEnableCmd(FALSE);
   18c42:	2000      	movs	r0, #0
}
   18c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HciLeSetAdvEnableCmd(FALSE);
   18c48:	f7f4 bb86 	b.w	d358 <HciLeSetAdvEnableCmd>
}
   18c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      DM_TRACE_WARN0("DmAdvStop during directed advertising!");
   18c50:	4803      	ldr	r0, [pc, #12]	; (18c60 <dmAdvActStop+0x40>)
   18c52:	f7f7 b9f9 	b.w	10048 <WsfTrace>
   18c56:	bf00      	nop
   18c58:	10005854 	.word	0x10005854
   18c5c:	00020370 	.word	0x00020370
   18c60:	00020388 	.word	0x00020388

00018c64 <dmAdvHciHandler>:
  if (pEvent->hdr.event == HCI_LE_ADV_ENABLE_CMD_CMPL_CBACK_EVT)
   18c64:	7883      	ldrb	r3, [r0, #2]
   18c66:	2b35      	cmp	r3, #53	; 0x35
   18c68:	d000      	beq.n	18c6c <dmAdvHciHandler+0x8>
   18c6a:	4770      	bx	lr
{
   18c6c:	b570      	push	{r4, r5, r6, lr}
    DM_TRACE_INFO1("HCI_LE_ADV_ENABLE_CMD_CMPL_CBACK_EVT: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   18c6e:	4d38      	ldr	r5, [pc, #224]	; (18d50 <dmAdvHciHandler+0xec>)
   18c70:	4604      	mov	r4, r0
   18c72:	7f69      	ldrb	r1, [r5, #29]
   18c74:	4837      	ldr	r0, [pc, #220]	; (18d54 <dmAdvHciHandler+0xf0>)
   18c76:	f7f7 f9e7 	bl	10048 <WsfTrace>
    switch (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT])
   18c7a:	7f69      	ldrb	r1, [r5, #29]
   18c7c:	2903      	cmp	r1, #3
   18c7e:	d910      	bls.n	18ca2 <dmAdvHciHandler+0x3e>
   18c80:	1f0b      	subs	r3, r1, #4
   18c82:	2b01      	cmp	r3, #1
   18c84:	d80c      	bhi.n	18ca0 <dmAdvHciHandler+0x3c>
      if (pEvent->hdr.status == HCI_SUCCESS)
   18c86:	78e6      	ldrb	r6, [r4, #3]
   18c88:	bb06      	cbnz	r6, 18ccc <dmAdvHciHandler+0x68>
        if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_STOPPING)
   18c8a:	2905      	cmp	r1, #5
   18c8c:	d039      	beq.n	18d02 <dmAdvHciHandler+0x9e>
        dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_ADV_STOP_IND, 0, 0);
   18c8e:	4633      	mov	r3, r6
   18c90:	4632      	mov	r2, r6
   18c92:	2122      	movs	r1, #34	; 0x22
   18c94:	2015      	movs	r0, #21
   18c96:	f000 fe91 	bl	199bc <dmDevPassEvtToDevPriv>
        dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = DM_ADV_NONE;
   18c9a:	23ff      	movs	r3, #255	; 0xff
   18c9c:	762b      	strb	r3, [r5, #24]
        dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_IDLE;
   18c9e:	776e      	strb	r6, [r5, #29]
}
   18ca0:	bd70      	pop	{r4, r5, r6, pc}
    switch (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT])
   18ca2:	2901      	cmp	r1, #1
   18ca4:	d9fc      	bls.n	18ca0 <dmAdvHciHandler+0x3c>
      if (pEvent->hdr.status == HCI_SUCCESS)
   18ca6:	78e3      	ldrb	r3, [r4, #3]
   18ca8:	b96b      	cbnz	r3, 18cc6 <dmAdvHciHandler+0x62>
        if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_STARTING)
   18caa:	2903      	cmp	r1, #3
   18cac:	d011      	beq.n	18cd2 <dmAdvHciHandler+0x6e>
   18cae:	4e2a      	ldr	r6, [pc, #168]	; (18d58 <dmAdvHciHandler+0xf4>)
        dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_START, DM_ADV_START_IND, 0, 0);
   18cb0:	2300      	movs	r3, #0
   18cb2:	461a      	mov	r2, r3
   18cb4:	2121      	movs	r1, #33	; 0x21
   18cb6:	2014      	movs	r0, #20
   18cb8:	f000 fe80 	bl	199bc <dmDevPassEvtToDevPriv>
        dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = dmLegAdvCb.advType;
   18cbc:	7832      	ldrb	r2, [r6, #0]
   18cbe:	762a      	strb	r2, [r5, #24]
        dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_ADVERTISING;
   18cc0:	2301      	movs	r3, #1
   18cc2:	776b      	strb	r3, [r5, #29]
}
   18cc4:	bd70      	pop	{r4, r5, r6, pc}
        dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_IDLE;
   18cc6:	2300      	movs	r3, #0
   18cc8:	776b      	strb	r3, [r5, #29]
}
   18cca:	bd70      	pop	{r4, r5, r6, pc}
        dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_ADVERTISING;
   18ccc:	2301      	movs	r3, #1
   18cce:	776b      	strb	r3, [r5, #29]
}
   18cd0:	bd70      	pop	{r4, r5, r6, pc}
          if (dmAdvCb.advDuration[DM_ADV_HANDLE_DEFAULT] > 0)
   18cd2:	8c29      	ldrh	r1, [r5, #32]
   18cd4:	bbb1      	cbnz	r1, 18d44 <dmAdvHciHandler+0xe0>
          if (dmLegAdvCb.advType != DM_ADV_CONN_DIRECT_LO_DUTY)
   18cd6:	4e20      	ldr	r6, [pc, #128]	; (18d58 <dmAdvHciHandler+0xf4>)
   18cd8:	7833      	ldrb	r3, [r6, #0]
   18cda:	2b04      	cmp	r3, #4
   18cdc:	d0e8      	beq.n	18cb0 <dmAdvHciHandler+0x4c>
        dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_START, DM_ADV_START_IND, 0, 0);
   18cde:	2300      	movs	r3, #0
   18ce0:	461a      	mov	r2, r3
   18ce2:	2121      	movs	r1, #33	; 0x21
   18ce4:	2014      	movs	r0, #20
   18ce6:	f000 fe69 	bl	199bc <dmDevPassEvtToDevPriv>
        dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = dmLegAdvCb.advType;
   18cea:	7832      	ldrb	r2, [r6, #0]
   18cec:	762a      	strb	r2, [r5, #24]
        dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_ADVERTISING;
   18cee:	2301      	movs	r3, #1
   18cf0:	776b      	strb	r3, [r5, #29]
            cbackEvent = DM_ADV_START_IND;
   18cf2:	2221      	movs	r2, #33	; 0x21
      (*dmCb.cback)((dmEvt_t *) pEvent);
   18cf4:	4b19      	ldr	r3, [pc, #100]	; (18d5c <dmAdvHciHandler+0xf8>)
      pEvent->hdr.event = cbackEvent;
   18cf6:	70a2      	strb	r2, [r4, #2]
      (*dmCb.cback)((dmEvt_t *) pEvent);
   18cf8:	4620      	mov	r0, r4
   18cfa:	689b      	ldr	r3, [r3, #8]
}
   18cfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      (*dmCb.cback)((dmEvt_t *) pEvent);
   18d00:	4718      	bx	r3
          WsfTimerStop(&dmAdvCb.advTimer);
   18d02:	4628      	mov	r0, r5
   18d04:	f7f7 f900 	bl	ff08 <WsfTimerStop>
          if (dmLegAdvCb.advType == DM_ADV_CONN_DIRECT_LO_DUTY)
   18d08:	4b13      	ldr	r3, [pc, #76]	; (18d58 <dmAdvHciHandler+0xf4>)
   18d0a:	781b      	ldrb	r3, [r3, #0]
   18d0c:	2b04      	cmp	r3, #4
   18d0e:	d00a      	beq.n	18d26 <dmAdvHciHandler+0xc2>
        dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_ADV_STOP_IND, 0, 0);
   18d10:	4633      	mov	r3, r6
   18d12:	4632      	mov	r2, r6
   18d14:	2122      	movs	r1, #34	; 0x22
   18d16:	2015      	movs	r0, #21
   18d18:	f000 fe50 	bl	199bc <dmDevPassEvtToDevPriv>
        dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = DM_ADV_NONE;
   18d1c:	23ff      	movs	r3, #255	; 0xff
   18d1e:	762b      	strb	r3, [r5, #24]
        dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_IDLE;
   18d20:	776e      	strb	r6, [r5, #29]
            cbackEvent = DM_ADV_STOP_IND;
   18d22:	2222      	movs	r2, #34	; 0x22
   18d24:	e7e6      	b.n	18cf4 <dmAdvHciHandler+0x90>
        dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_ADV_STOP_IND, 0, 0);
   18d26:	4633      	mov	r3, r6
   18d28:	2122      	movs	r1, #34	; 0x22
   18d2a:	2015      	movs	r0, #21
   18d2c:	4632      	mov	r2, r6
   18d2e:	f000 fe45 	bl	199bc <dmDevPassEvtToDevPriv>
        dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = DM_ADV_NONE;
   18d32:	23ff      	movs	r3, #255	; 0xff
      dmAdvGenConnCmpl(DM_ADV_HANDLE_DEFAULT, HCI_ERR_ADV_TIMEOUT);
   18d34:	4630      	mov	r0, r6
        dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = DM_ADV_NONE;
   18d36:	762b      	strb	r3, [r5, #24]
        dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_IDLE;
   18d38:	776e      	strb	r6, [r5, #29]
      dmAdvGenConnCmpl(DM_ADV_HANDLE_DEFAULT, HCI_ERR_ADV_TIMEOUT);
   18d3a:	213c      	movs	r1, #60	; 0x3c
}
   18d3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      dmAdvGenConnCmpl(DM_ADV_HANDLE_DEFAULT, HCI_ERR_ADV_TIMEOUT);
   18d40:	f7ff be98 	b.w	18a74 <dmAdvGenConnCmpl>
            dmAdvCb.advTimer.msg.event = DM_ADV_MSG_TIMEOUT;
   18d44:	2307      	movs	r3, #7
            WsfTimerStartMs(&dmAdvCb.advTimer, dmAdvCb.advDuration[DM_ADV_HANDLE_DEFAULT]);
   18d46:	4628      	mov	r0, r5
            dmAdvCb.advTimer.msg.event = DM_ADV_MSG_TIMEOUT;
   18d48:	72ab      	strb	r3, [r5, #10]
            WsfTimerStartMs(&dmAdvCb.advTimer, dmAdvCb.advDuration[DM_ADV_HANDLE_DEFAULT]);
   18d4a:	f7f7 f899 	bl	fe80 <WsfTimerStartMs>
   18d4e:	e7c2      	b.n	18cd6 <dmAdvHciHandler+0x72>
   18d50:	10005854 	.word	0x10005854
   18d54:	000203b0 	.word	0x000203b0
   18d58:	10005888 	.word	0x10005888
   18d5c:	10005960 	.word	0x10005960

00018d60 <dmAdvActClearSets>:
   18d60:	4770      	bx	lr
   18d62:	bf00      	nop

00018d64 <dmAdvActSetRandAddr>:
   18d64:	4770      	bx	lr
   18d66:	bf00      	nop

00018d68 <dmAdvActTimeout>:
{
   18d68:	b508      	push	{r3, lr}
  DM_TRACE_INFO0("dmAdvActTimeout!");
   18d6a:	4807      	ldr	r0, [pc, #28]	; (18d88 <dmAdvActTimeout+0x20>)
   18d6c:	f7f7 f96c 	bl	10048 <WsfTrace>
  if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_ADVERTISING)
   18d70:	4b06      	ldr	r3, [pc, #24]	; (18d8c <dmAdvActTimeout+0x24>)
   18d72:	7f5a      	ldrb	r2, [r3, #29]
   18d74:	2a01      	cmp	r2, #1
   18d76:	d000      	beq.n	18d7a <dmAdvActTimeout+0x12>
}
   18d78:	bd08      	pop	{r3, pc}
    dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_STOPPING;
   18d7a:	2205      	movs	r2, #5
   18d7c:	775a      	strb	r2, [r3, #29]
}
   18d7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HciLeSetAdvEnableCmd(FALSE);
   18d82:	2000      	movs	r0, #0
   18d84:	f7f4 bae8 	b.w	d358 <HciLeSetAdvEnableCmd>
   18d88:	000203e0 	.word	0x000203e0
   18d8c:	10005854 	.word	0x10005854

00018d90 <dmAdvStartDirected>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvStartDirected(uint8_t advType, uint16_t duration, uint8_t addrType, uint8_t *pAddr)
{
   18d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  DM_TRACE_INFO1("dmAdvStartDirected: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   18d94:	4c0f      	ldr	r4, [pc, #60]	; (18dd4 <dmAdvStartDirected+0x44>)
{
   18d96:	4607      	mov	r7, r0
   18d98:	4688      	mov	r8, r1
  DM_TRACE_INFO1("dmAdvStartDirected: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   18d9a:	480f      	ldr	r0, [pc, #60]	; (18dd8 <dmAdvStartDirected+0x48>)
   18d9c:	7f61      	ldrb	r1, [r4, #29]
{
   18d9e:	461e      	mov	r6, r3
   18da0:	4615      	mov	r5, r2
  DM_TRACE_INFO1("dmAdvStartDirected: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   18da2:	f7f7 f951 	bl	10048 <WsfTrace>

  /* if not advertising */
  if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_IDLE)
   18da6:	7f63      	ldrb	r3, [r4, #29]
   18da8:	b10b      	cbz	r3, 18dae <dmAdvStartDirected+0x1e>

    dmAdvCb.advDuration[DM_ADV_HANDLE_DEFAULT] = duration;
    BdaCpy(dmAdvCb.peerAddr[DM_ADV_HANDLE_DEFAULT], pAddr);
    dmAdvCb.peerAddrType[DM_ADV_HANDLE_DEFAULT] = addrType;
  }
}
   18daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HciLeSetAdvEnableCmd(TRUE);
   18dae:	2001      	movs	r0, #1
   18db0:	f7f4 fad2 	bl	d358 <HciLeSetAdvEnableCmd>
    dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = (advType == DM_ADV_CONN_DIRECT) ? \
   18db4:	2f01      	cmp	r7, #1
   18db6:	bf0c      	ite	eq
   18db8:	2302      	moveq	r3, #2
   18dba:	2303      	movne	r3, #3
    BdaCpy(dmAdvCb.peerAddr[DM_ADV_HANDLE_DEFAULT], pAddr);
   18dbc:	4631      	mov	r1, r6
   18dbe:	f104 0025 	add.w	r0, r4, #37	; 0x25
    dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = (advType == DM_ADV_CONN_DIRECT) ? \
   18dc2:	7763      	strb	r3, [r4, #29]
    dmAdvCb.advDuration[DM_ADV_HANDLE_DEFAULT] = duration;
   18dc4:	f8a4 8020 	strh.w	r8, [r4, #32]
    BdaCpy(dmAdvCb.peerAddr[DM_ADV_HANDLE_DEFAULT], pAddr);
   18dc8:	f7fa fae8 	bl	1339c <BdaCpy>
    dmAdvCb.peerAddrType[DM_ADV_HANDLE_DEFAULT] = addrType;
   18dcc:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
}
   18dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18dd4:	10005854 	.word	0x10005854
   18dd8:	000203f4 	.word	0x000203f4

00018ddc <dmAdvStopDirected>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvStopDirected(void)
{
   18ddc:	b510      	push	{r4, lr}
  DM_TRACE_INFO1("dmAdvStopDirected: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   18dde:	4c0b      	ldr	r4, [pc, #44]	; (18e0c <dmAdvStopDirected+0x30>)
   18de0:	480b      	ldr	r0, [pc, #44]	; (18e10 <dmAdvStopDirected+0x34>)
   18de2:	7f61      	ldrb	r1, [r4, #29]
   18de4:	f7f7 f930 	bl	10048 <WsfTrace>

  /* if advertising or starting advertising */
  if ((dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_ADVERTISING) ||
   18de8:	7f63      	ldrb	r3, [r4, #29]
   18dea:	3b01      	subs	r3, #1
   18dec:	2b02      	cmp	r3, #2
   18dee:	d900      	bls.n	18df2 <dmAdvStopDirected+0x16>
    /* disable advertising */
    dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = (dmLegAdvCb.advType == DM_ADV_CONN_DIRECT) ? \
                                              DM_ADV_STATE_STOPPING_DIRECTED : DM_ADV_STATE_STOPPING;
    HciLeSetAdvEnableCmd(FALSE);
  }
}
   18df0:	bd10      	pop	{r4, pc}
    dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = (dmLegAdvCb.advType == DM_ADV_CONN_DIRECT) ? \
   18df2:	4b08      	ldr	r3, [pc, #32]	; (18e14 <dmAdvStopDirected+0x38>)
   18df4:	781b      	ldrb	r3, [r3, #0]
   18df6:	2b01      	cmp	r3, #1
   18df8:	bf0c      	ite	eq
   18dfa:	2304      	moveq	r3, #4
   18dfc:	2305      	movne	r3, #5
   18dfe:	7763      	strb	r3, [r4, #29]
    HciLeSetAdvEnableCmd(FALSE);
   18e00:	2000      	movs	r0, #0
}
   18e02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HciLeSetAdvEnableCmd(FALSE);
   18e06:	f7f4 baa7 	b.w	d358 <HciLeSetAdvEnableCmd>
   18e0a:	bf00      	nop
   18e0c:	10005854 	.word	0x10005854
   18e10:	00020414 	.word	0x00020414
   18e14:	10005888 	.word	0x10005888

00018e18 <dmAdvConnected>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvConnected(void)
{
   18e18:	b510      	push	{r4, lr}
  DM_TRACE_INFO1("dmAdvConnected: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   18e1a:	4c09      	ldr	r4, [pc, #36]	; (18e40 <dmAdvConnected+0x28>)
   18e1c:	4809      	ldr	r0, [pc, #36]	; (18e44 <dmAdvConnected+0x2c>)
   18e1e:	7f61      	ldrb	r1, [r4, #29]
   18e20:	f7f7 f912 	bl	10048 <WsfTrace>

  WsfTimerStop(&dmAdvCb.advTimer);
   18e24:	4620      	mov	r0, r4
   18e26:	f7f7 f86f 	bl	ff08 <WsfTimerStop>

  /* pass advertising stop event to dev priv */
  dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_ADV_STOP_IND, 0, 0);
   18e2a:	2300      	movs	r3, #0
   18e2c:	461a      	mov	r2, r3
   18e2e:	2122      	movs	r1, #34	; 0x22
   18e30:	2015      	movs	r0, #21
   18e32:	f000 fdc3 	bl	199bc <dmDevPassEvtToDevPriv>

  dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = DM_ADV_NONE;
   18e36:	22ff      	movs	r2, #255	; 0xff
  dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_IDLE;
   18e38:	2300      	movs	r3, #0
  dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = DM_ADV_NONE;
   18e3a:	7622      	strb	r2, [r4, #24]
  dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_IDLE;
   18e3c:	7763      	strb	r3, [r4, #29]
}
   18e3e:	bd10      	pop	{r4, pc}
   18e40:	10005854 	.word	0x10005854
   18e44:	00020434 	.word	0x00020434

00018e48 <dmAdvConnectFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvConnectFailed(void)
{
   18e48:	b510      	push	{r4, lr}
  DM_TRACE_INFO1("dmAdvConnectFailed: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   18e4a:	4c09      	ldr	r4, [pc, #36]	; (18e70 <dmAdvConnectFailed+0x28>)
   18e4c:	4809      	ldr	r0, [pc, #36]	; (18e74 <dmAdvConnectFailed+0x2c>)
   18e4e:	7f61      	ldrb	r1, [r4, #29]
   18e50:	f7f7 f8fa 	bl	10048 <WsfTrace>

  WsfTimerStop(&dmAdvCb.advTimer);
   18e54:	4620      	mov	r0, r4
   18e56:	f7f7 f857 	bl	ff08 <WsfTimerStop>

  /* pass advertising stop event to dev priv */
  dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_ADV_STOP_IND, 0, 0);
   18e5a:	2300      	movs	r3, #0
   18e5c:	461a      	mov	r2, r3
   18e5e:	2122      	movs	r1, #34	; 0x22
   18e60:	2015      	movs	r0, #21
   18e62:	f000 fdab 	bl	199bc <dmDevPassEvtToDevPriv>

  dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = DM_ADV_NONE;
   18e66:	22ff      	movs	r2, #255	; 0xff
  dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_IDLE;
   18e68:	2300      	movs	r3, #0
  dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = DM_ADV_NONE;
   18e6a:	7622      	strb	r2, [r4, #24]
  dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_IDLE;
   18e6c:	7763      	strb	r3, [r4, #29]
}
   18e6e:	bd10      	pop	{r4, pc}
   18e70:	10005854 	.word	0x10005854
   18e74:	00020450 	.word	0x00020450

00018e78 <DmAdvInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmAdvInit(void)
{
   18e78:	b508      	push	{r3, lr}
  WsfTaskLock();
   18e7a:	f7f6 fda7 	bl	f9cc <WsfTaskLock>

  /* set function interface table */
  dmFcnIfTbl[DM_ID_ADV] = (dmFcnIf_t *) &dmAdvFcnIf;
   18e7e:	4b07      	ldr	r3, [pc, #28]	; (18e9c <DmAdvInit+0x24>)
   18e80:	4a07      	ldr	r2, [pc, #28]	; (18ea0 <DmAdvInit+0x28>)
   18e82:	601a      	str	r2, [r3, #0]

  /* initialize legacy adv module */
  dmAdvInit();
   18e84:	f7ff fdd8 	bl	18a38 <dmAdvInit>

  /* clear set advertising set random address callback */
  dmDevCb.advSetRandAddrCback = NULL;
   18e88:	4b06      	ldr	r3, [pc, #24]	; (18ea4 <DmAdvInit+0x2c>)
   18e8a:	2000      	movs	r0, #0
   18e8c:	6018      	str	r0, [r3, #0]

  /* initialize HCI VS module */
  HciVsInit(0);
   18e8e:	f7f3 fea3 	bl	cbd8 <HciVsInit>

  WsfTaskUnlock();
}
   18e92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  WsfTaskUnlock();
   18e96:	f7f6 bda3 	b.w	f9e0 <WsfTaskUnlock>
   18e9a:	bf00      	nop
   18e9c:	10002b80 	.word	0x10002b80
   18ea0:	00020490 	.word	0x00020490
   18ea4:	1000595c 	.word	0x1000595c

00018ea8 <dmConnSmActNone>:
 */
/*************************************************************************************************/
void dmConnSmActNone(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
  return;
}
   18ea8:	4770      	bx	lr
   18eaa:	bf00      	nop

00018eac <dmConnSmActHciUpdated>:
/*************************************************************************************************/
void dmConnSmActHciUpdated(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
  /* call callback */
  pMsg->hdr.event = DM_CONN_UPDATE_IND;
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) pMsg);
   18eac:	4b03      	ldr	r3, [pc, #12]	; (18ebc <dmConnSmActHciUpdated+0x10>)
  pMsg->hdr.event = DM_CONN_UPDATE_IND;
   18eae:	2229      	movs	r2, #41	; 0x29
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) pMsg);
   18eb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
  pMsg->hdr.event = DM_CONN_UPDATE_IND;
   18eb4:	708a      	strb	r2, [r1, #2]
{
   18eb6:	4608      	mov	r0, r1
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) pMsg);
   18eb8:	4718      	bx	r3
   18eba:	bf00      	nop
   18ebc:	1000588c 	.word	0x1000588c

00018ec0 <dmConnSmActClose>:
  HciDisconnectCmd(pCcb->handle, pMsg->apiClose.reason);
   18ec0:	8980      	ldrh	r0, [r0, #12]
   18ec2:	7909      	ldrb	r1, [r1, #4]
   18ec4:	f7f3 bec8 	b.w	cc58 <HciDisconnectCmd>

00018ec8 <dmConnSmActConnFailed>:
{
   18ec8:	b570      	push	{r4, r5, r6, lr}
   18eca:	4604      	mov	r4, r0
   18ecc:	460d      	mov	r5, r1
  DM_TRACE_FREE1("dmConnCcbDealloc %d", pCcb->connId);
   18ece:	4817      	ldr	r0, [pc, #92]	; (18f2c <dmConnSmActConnFailed+0x64>)
   18ed0:	7c21      	ldrb	r1, [r4, #16]
   18ed2:	f7f7 f8b9 	bl	10048 <WsfTrace>
  if (pCcb->role == DM_ROLE_MASTER)
   18ed6:	7e63      	ldrb	r3, [r4, #25]
  pCcb->inUse = FALSE;
   18ed8:	2200      	movs	r2, #0
   18eda:	75a2      	strb	r2, [r4, #22]
  if (pCcb->role == DM_ROLE_MASTER)
   18edc:	b17b      	cbz	r3, 18efe <dmConnSmActConnFailed+0x36>
  pMsg->hdr.event = DM_CONN_CLOSE_IND;
   18ede:	4c14      	ldr	r4, [pc, #80]	; (18f30 <dmConnSmActConnFailed+0x68>)
  pMsg->hciLeConnCmpl.handle = pMsg->hciLeConnCmpl.role = 0;
   18ee0:	2300      	movs	r3, #0
  pMsg->hdr.event = DM_CONN_CLOSE_IND;
   18ee2:	2228      	movs	r2, #40	; 0x28
   18ee4:	70aa      	strb	r2, [r5, #2]
  pMsg->hciLeConnCmpl.handle = pMsg->hciLeConnCmpl.role = 0;
   18ee6:	722b      	strb	r3, [r5, #8]
   18ee8:	80eb      	strh	r3, [r5, #6]
  for (i = 0; i < DM_CLIENT_ID_MAX; i++)
   18eea:	f104 0614 	add.w	r6, r4, #20
    if (dmConnCb.connCback[i] != NULL)
   18eee:	f854 3b04 	ldr.w	r3, [r4], #4
      (*dmConnCb.connCback[i])((dmEvt_t *) pMsg);
   18ef2:	4628      	mov	r0, r5
    if (dmConnCb.connCback[i] != NULL)
   18ef4:	b103      	cbz	r3, 18ef8 <dmConnSmActConnFailed+0x30>
      (*dmConnCb.connCback[i])((dmEvt_t *) pMsg);
   18ef6:	4798      	blx	r3
  for (i = 0; i < DM_CLIENT_ID_MAX; i++)
   18ef8:	42a6      	cmp	r6, r4
   18efa:	d1f8      	bne.n	18eee <dmConnSmActConnFailed+0x26>
}
   18efc:	bd70      	pop	{r4, r5, r6, pc}
    dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_CTRL, DM_DEV_PRIV_MSG_CONN_INIT_STOP, 0, 0);
   18efe:	461a      	mov	r2, r3
   18f00:	2101      	movs	r1, #1
   18f02:	2016      	movs	r0, #22
   18f04:	f000 fd5a 	bl	199bc <dmDevPassEvtToDevPriv>
    if (pCcb->inUse)
   18f08:	4b0a      	ldr	r3, [pc, #40]	; (18f34 <dmConnSmActConnFailed+0x6c>)
   18f0a:	7d9a      	ldrb	r2, [r3, #22]
   18f0c:	2a00      	cmp	r2, #0
   18f0e:	d1e6      	bne.n	18ede <dmConnSmActConnFailed+0x16>
   18f10:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
   18f14:	2a00      	cmp	r2, #0
   18f16:	d1e2      	bne.n	18ede <dmConnSmActConnFailed+0x16>
   18f18:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
   18f1c:	2b00      	cmp	r3, #0
   18f1e:	d1de      	bne.n	18ede <dmConnSmActConnFailed+0x16>
      dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_CONN_CLOSE_IND, 0 , 0);
   18f20:	461a      	mov	r2, r3
   18f22:	2128      	movs	r1, #40	; 0x28
   18f24:	2015      	movs	r0, #21
   18f26:	f000 fd49 	bl	199bc <dmDevPassEvtToDevPriv>
   18f2a:	e7d8      	b.n	18ede <dmConnSmActConnFailed+0x16>
   18f2c:	0002049c 	.word	0x0002049c
   18f30:	1000591c 	.word	0x1000591c
   18f34:	1000588c 	.word	0x1000588c

00018f38 <dmConnSmActConnOpened>:
{
   18f38:	b570      	push	{r4, r5, r6, lr}
   18f3a:	460d      	mov	r5, r1
   18f3c:	4604      	mov	r4, r0
  BdaCpy(pCcb->peerAddr, pMsg->hciLeConnCmpl.peerAddr);
   18f3e:	310a      	adds	r1, #10
   18f40:	f7fa fa2c 	bl	1339c <BdaCpy>
  pCcb->handle = pMsg->hciLeConnCmpl.handle;
   18f44:	88eb      	ldrh	r3, [r5, #6]
  pCcb->peerAddrType = DmHostAddrType(pMsg->hciLeConnCmpl.addrType);
   18f46:	7a68      	ldrb	r0, [r5, #9]
  pCcb->handle = pMsg->hciLeConnCmpl.handle;
   18f48:	81a3      	strh	r3, [r4, #12]
  pCcb->peerAddrType = DmHostAddrType(pMsg->hciLeConnCmpl.addrType);
   18f4a:	f000 fde7 	bl	19b1c <DmHostAddrType>
   18f4e:	74e0      	strb	r0, [r4, #19]
  pCcb->role = pMsg->hciLeConnCmpl.role;
   18f50:	7a2b      	ldrb	r3, [r5, #8]
   18f52:	7663      	strb	r3, [r4, #25]
  if (pCcb->role == DM_ROLE_MASTER)
   18f54:	bb7b      	cbnz	r3, 18fb6 <dmConnSmActConnOpened+0x7e>
    pCcb->localAddrType = dmCb.connAddrType;
   18f56:	4b29      	ldr	r3, [pc, #164]	; (18ffc <dmConnSmActConnOpened+0xc4>)
   18f58:	7b5b      	ldrb	r3, [r3, #13]
   18f5a:	7523      	strb	r3, [r4, #20]
  if (pCcb->localAddrType == DM_ADDR_PUBLIC)
   18f5c:	bb33      	cbnz	r3, 18fac <dmConnSmActConnOpened+0x74>
    BdaCpy(pCcb->localAddr, HciGetBdAddr());
   18f5e:	f7f5 fa9d 	bl	e49c <HciGetBdAddr>
   18f62:	4601      	mov	r1, r0
   18f64:	1da0      	adds	r0, r4, #6
   18f66:	f7fa fa19 	bl	1339c <BdaCpy>
  BdaCpy(pCcb->localRpa, pMsg->hciLeConnCmpl.localRpa);
   18f6a:	f105 0117 	add.w	r1, r5, #23
   18f6e:	f104 001a 	add.w	r0, r4, #26
   18f72:	f7fa fa13 	bl	1339c <BdaCpy>
  BdaCpy(pCcb->peerRpa, pMsg->hciLeConnCmpl.peerRpa);
   18f76:	f105 011d 	add.w	r1, r5, #29
   18f7a:	f104 0020 	add.w	r0, r4, #32
   18f7e:	f7fa fa0d 	bl	1339c <BdaCpy>
  if (pCcb->role == DM_ROLE_MASTER)
   18f82:	7e63      	ldrb	r3, [r4, #25]
  pCcb->idleMask = 0;
   18f84:	2200      	movs	r2, #0
   18f86:	81e2      	strh	r2, [r4, #14]
  if (pCcb->role == DM_ROLE_MASTER)
   18f88:	b1c3      	cbz	r3, 18fbc <dmConnSmActConnOpened+0x84>
  dmDevPassEvtToConnCte(DM_CONN_OPEN_IND, pCcb->connId);
   18f8a:	7c21      	ldrb	r1, [r4, #16]
   18f8c:	4c1c      	ldr	r4, [pc, #112]	; (19000 <dmConnSmActConnOpened+0xc8>)
   18f8e:	2027      	movs	r0, #39	; 0x27
   18f90:	f000 fd34 	bl	199fc <dmDevPassEvtToConnCte>
  pMsg->hdr.event = DM_CONN_OPEN_IND;
   18f94:	2327      	movs	r3, #39	; 0x27
   18f96:	70ab      	strb	r3, [r5, #2]
  for (i = 0; i < DM_CLIENT_ID_MAX; i++)
   18f98:	f104 0614 	add.w	r6, r4, #20
    if (dmConnCb.connCback[i] != NULL)
   18f9c:	f854 3b04 	ldr.w	r3, [r4], #4
      (*dmConnCb.connCback[i])((dmEvt_t *) pMsg);
   18fa0:	4628      	mov	r0, r5
    if (dmConnCb.connCback[i] != NULL)
   18fa2:	b103      	cbz	r3, 18fa6 <dmConnSmActConnOpened+0x6e>
      (*dmConnCb.connCback[i])((dmEvt_t *) pMsg);
   18fa4:	4798      	blx	r3
  for (i = 0; i < DM_CLIENT_ID_MAX; i++)
   18fa6:	42a6      	cmp	r6, r4
   18fa8:	d1f8      	bne.n	18f9c <dmConnSmActConnOpened+0x64>
}
   18faa:	bd70      	pop	{r4, r5, r6, pc}
    BdaCpy(pCcb->localAddr, dmCb.localAddr);
   18fac:	4913      	ldr	r1, [pc, #76]	; (18ffc <dmConnSmActConnOpened+0xc4>)
   18fae:	1da0      	adds	r0, r4, #6
   18fb0:	f7fa f9f4 	bl	1339c <BdaCpy>
   18fb4:	e7d9      	b.n	18f6a <dmConnSmActConnOpened+0x32>
    pCcb->localAddrType = dmCb.advAddrType;
   18fb6:	4b11      	ldr	r3, [pc, #68]	; (18ffc <dmConnSmActConnOpened+0xc4>)
   18fb8:	7b9b      	ldrb	r3, [r3, #14]
   18fba:	e7ce      	b.n	18f5a <dmConnSmActConnOpened+0x22>
    dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_CTRL, DM_DEV_PRIV_MSG_CONN_INIT_STOP, 0 , 0);
   18fbc:	461a      	mov	r2, r3
   18fbe:	2101      	movs	r1, #1
   18fc0:	2016      	movs	r0, #22
   18fc2:	f000 fcfb 	bl	199bc <dmDevPassEvtToDevPriv>
    if (pCcb->inUse)
   18fc6:	4b0f      	ldr	r3, [pc, #60]	; (19004 <dmConnSmActConnOpened+0xcc>)
   18fc8:	7d9a      	ldrb	r2, [r3, #22]
   18fca:	b172      	cbz	r2, 18fea <dmConnSmActConnOpened+0xb2>
   18fcc:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
   18fd0:	2a00      	cmp	r2, #0
   18fd2:	d1da      	bne.n	18f8a <dmConnSmActConnOpened+0x52>
   18fd4:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
   18fd8:	2b00      	cmp	r3, #0
   18fda:	d1d6      	bne.n	18f8a <dmConnSmActConnOpened+0x52>
      dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_START, DM_CONN_OPEN_IND, 0, 0);
   18fdc:	2300      	movs	r3, #0
   18fde:	461a      	mov	r2, r3
   18fe0:	2127      	movs	r1, #39	; 0x27
   18fe2:	2014      	movs	r0, #20
   18fe4:	f000 fcea 	bl	199bc <dmDevPassEvtToDevPriv>
   18fe8:	e7cf      	b.n	18f8a <dmConnSmActConnOpened+0x52>
    if (pCcb->inUse)
   18fea:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
   18fee:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
   18ff2:	2a00      	cmp	r2, #0
   18ff4:	d1f0      	bne.n	18fd8 <dmConnSmActConnOpened+0xa0>
   18ff6:	2b00      	cmp	r3, #0
   18ff8:	d1f0      	bne.n	18fdc <dmConnSmActConnOpened+0xa4>
   18ffa:	e7c6      	b.n	18f8a <dmConnSmActConnOpened+0x52>
   18ffc:	10005960 	.word	0x10005960
   19000:	1000591c 	.word	0x1000591c
   19004:	1000588c 	.word	0x1000588c

00019008 <dmConnSmActConnClosed>:
{
   19008:	b570      	push	{r4, r5, r6, lr}
   1900a:	4604      	mov	r4, r0
   1900c:	460d      	mov	r5, r1
  dmDevPassEvtToConnCte(DM_CONN_CLOSE_IND, pCcb->connId);
   1900e:	2028      	movs	r0, #40	; 0x28
   19010:	7c21      	ldrb	r1, [r4, #16]
   19012:	f000 fcf3 	bl	199fc <dmDevPassEvtToConnCte>
  DM_TRACE_FREE1("dmConnCcbDealloc %d", pCcb->connId);
   19016:	7c21      	ldrb	r1, [r4, #16]
   19018:	4812      	ldr	r0, [pc, #72]	; (19064 <dmConnSmActConnClosed+0x5c>)
   1901a:	f7f7 f815 	bl	10048 <WsfTrace>
  if ((pCcb->role == DM_ROLE_MASTER) && (dmConnNum() == 0))
   1901e:	7e63      	ldrb	r3, [r4, #25]
  pCcb->inUse = FALSE;
   19020:	2200      	movs	r2, #0
   19022:	75a2      	strb	r2, [r4, #22]
  if ((pCcb->role == DM_ROLE_MASTER) && (dmConnNum() == 0))
   19024:	b913      	cbnz	r3, 1902c <dmConnSmActConnClosed+0x24>
    if (pCcb->inUse)
   19026:	4b10      	ldr	r3, [pc, #64]	; (19068 <dmConnSmActConnClosed+0x60>)
   19028:	7d9a      	ldrb	r2, [r3, #22]
   1902a:	b162      	cbz	r2, 19046 <dmConnSmActConnClosed+0x3e>
  pMsg->hdr.event = DM_CONN_CLOSE_IND;
   1902c:	4c0f      	ldr	r4, [pc, #60]	; (1906c <dmConnSmActConnClosed+0x64>)
   1902e:	2328      	movs	r3, #40	; 0x28
   19030:	70ab      	strb	r3, [r5, #2]
  for (i = 0; i < DM_CLIENT_ID_MAX; i++)
   19032:	f104 0614 	add.w	r6, r4, #20
    if (dmConnCb.connCback[i] != NULL)
   19036:	f854 3b04 	ldr.w	r3, [r4], #4
      (*dmConnCb.connCback[i])((dmEvt_t *) pMsg);
   1903a:	4628      	mov	r0, r5
    if (dmConnCb.connCback[i] != NULL)
   1903c:	b103      	cbz	r3, 19040 <dmConnSmActConnClosed+0x38>
      (*dmConnCb.connCback[i])((dmEvt_t *) pMsg);
   1903e:	4798      	blx	r3
  for (i = 0; i < DM_CLIENT_ID_MAX; i++)
   19040:	42b4      	cmp	r4, r6
   19042:	d1f8      	bne.n	19036 <dmConnSmActConnClosed+0x2e>
}
   19044:	bd70      	pop	{r4, r5, r6, pc}
    if (pCcb->inUse)
   19046:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
   1904a:	2a00      	cmp	r2, #0
   1904c:	d1ee      	bne.n	1902c <dmConnSmActConnClosed+0x24>
   1904e:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
   19052:	2b00      	cmp	r3, #0
   19054:	d1ea      	bne.n	1902c <dmConnSmActConnClosed+0x24>
    dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_CONN_CLOSE_IND, 0, 0);
   19056:	461a      	mov	r2, r3
   19058:	2128      	movs	r1, #40	; 0x28
   1905a:	2015      	movs	r0, #21
   1905c:	f000 fcae 	bl	199bc <dmDevPassEvtToDevPriv>
   19060:	e7e4      	b.n	1902c <dmConnSmActConnClosed+0x24>
   19062:	bf00      	nop
   19064:	0002049c 	.word	0x0002049c
   19068:	1000588c 	.word	0x1000588c
   1906c:	1000591c 	.word	0x1000591c

00019070 <dmConnMsgHandler>:
void dmConnMsgHandler(wsfMsgHdr_t *pMsg)
{
  dmConnCcb_t *pCcb;

  /* look up ccb from conn id */
  if ((pCcb = dmConnCcbById((dmConnId_t) pMsg->param)) != NULL)
   19070:	8803      	ldrh	r3, [r0, #0]
{
   19072:	b410      	push	{r4}
  connId--;
   19074:	3b01      	subs	r3, #1
  if (dmConnCb.ccb[connId].inUse)
   19076:	4c0a      	ldr	r4, [pc, #40]	; (190a0 <dmConnMsgHandler+0x30>)
  connId--;
   19078:	b2db      	uxtb	r3, r3
  if (dmConnCb.ccb[connId].inUse)
   1907a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1907e:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   19082:	7d92      	ldrb	r2, [r2, #22]
   19084:	b142      	cbz	r2, 19098 <dmConnMsgHandler+0x28>
    return &dmConnCb.ccb[connId];
   19086:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1908a:	4601      	mov	r1, r0
  {
    /* execute state machine */
    dmConnSmExecute(pCcb, (dmConnMsg_t *) pMsg);
   1908c:	eb04 1003 	add.w	r0, r4, r3, lsl #4
  }
}
   19090:	f85d 4b04 	ldr.w	r4, [sp], #4
    dmConnSmExecute(pCcb, (dmConnMsg_t *) pMsg);
   19094:	f000 bc2a 	b.w	198ec <dmConnSmExecute>
}
   19098:	f85d 4b04 	ldr.w	r4, [sp], #4
   1909c:	4770      	bx	lr
   1909e:	bf00      	nop
   190a0:	1000588c 	.word	0x1000588c

000190a4 <dmConn2MsgHandler>:
void dmConn2MsgHandler(wsfMsgHdr_t *pMsg)
{
  dmConnCcb_t *pCcb;

  /* look up ccb from conn id */
  if ((pCcb = dmConnCcbById((dmConnId_t) pMsg->param)) != NULL)
   190a4:	8803      	ldrh	r3, [r0, #0]
{
   190a6:	b530      	push	{r4, r5, lr}
  connId--;
   190a8:	3b01      	subs	r3, #1
  if (dmConnCb.ccb[connId].inUse)
   190aa:	4c26      	ldr	r4, [pc, #152]	; (19144 <dmConn2MsgHandler+0xa0>)
   190ac:	b2db      	uxtb	r3, r3
   190ae:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   190b2:	eb04 1202 	add.w	r2, r4, r2, lsl #4
{
   190b6:	b085      	sub	sp, #20
  if (dmConnCb.ccb[connId].inUse)
   190b8:	7d92      	ldrb	r2, [r2, #22]
   190ba:	b1ca      	cbz	r2, 190f0 <dmConn2MsgHandler+0x4c>
   190bc:	4601      	mov	r1, r0
   190be:	0058      	lsls	r0, r3, #1
  {
    dmConn2Msg_t *pConn2Msg = (dmConn2Msg_t *) pMsg;

    /* handle incoming message */
    switch (pMsg->event)
   190c0:	788a      	ldrb	r2, [r1, #2]
   190c2:	3a41      	subs	r2, #65	; 0x41
   190c4:	2a04      	cmp	r2, #4
   190c6:	d813      	bhi.n	190f0 <dmConn2MsgHandler+0x4c>
   190c8:	e8df f002 	tbb	[pc, r2]
   190cc:	3127031e 	.word	0x3127031e
   190d0:	14          	.byte	0x14
   190d1:	00          	.byte	0x00

      case DM_CONN_MSG_API_REM_CONN_PARAM_REQ_REPLY:
        {
          hciConnSpec_t *pConnSpec = &pConn2Msg->apiRemConnParamReqReply.connSpec;

          HciLeRemoteConnParamReqReply(pCcb->handle, pConnSpec->connIntervalMin,
   190d2:	4403      	add	r3, r0
   190d4:	898a      	ldrh	r2, [r1, #12]
   190d6:	89cd      	ldrh	r5, [r1, #14]
   190d8:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   190dc:	894c      	ldrh	r4, [r1, #10]
   190de:	8998      	ldrh	r0, [r3, #12]
   190e0:	e9cd 2501 	strd	r2, r5, [sp, #4]
   190e4:	890b      	ldrh	r3, [r1, #8]
   190e6:	88ca      	ldrh	r2, [r1, #6]
   190e8:	8889      	ldrh	r1, [r1, #4]
   190ea:	9400      	str	r4, [sp, #0]
   190ec:	f7f3 fe42 	bl	cd74 <HciLeRemoteConnParamReqReply>
      default:
        /* should never get here */
        break;
    }
  }
}
   190f0:	b005      	add	sp, #20
   190f2:	bd30      	pop	{r4, r5, pc}
        HciWriteAuthPayloadTimeout(pCcb->handle, pConn2Msg->apiWriteAuthPayloadTo.timeout);
   190f4:	4418      	add	r0, r3
   190f6:	eb04 1300 	add.w	r3, r4, r0, lsl #4
   190fa:	8889      	ldrh	r1, [r1, #4]
   190fc:	8998      	ldrh	r0, [r3, #12]
}
   190fe:	b005      	add	sp, #20
   19100:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        HciWriteAuthPayloadTimeout(pCcb->handle, pConn2Msg->apiWriteAuthPayloadTo.timeout);
   19104:	f7f4 bc0e 	b.w	d924 <HciWriteAuthPayloadTimeout>
        HciReadRssiCmd(pCcb->handle);
   19108:	4403      	add	r3, r0
   1910a:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   1910e:	8998      	ldrh	r0, [r3, #12]
}
   19110:	b005      	add	sp, #20
   19112:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        HciReadRssiCmd(pCcb->handle);
   19116:	f7f4 bb17 	b.w	d748 <HciReadRssiCmd>
        HciLeRemoteConnParamReqNegReply(pCcb->handle, pConn2Msg->apiRemConnParamReqNegReply.reason);
   1911a:	4403      	add	r3, r0
   1911c:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   19120:	7909      	ldrb	r1, [r1, #4]
   19122:	8998      	ldrh	r0, [r3, #12]
}
   19124:	b005      	add	sp, #20
   19126:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        HciLeRemoteConnParamReqNegReply(pCcb->handle, pConn2Msg->apiRemConnParamReqNegReply.reason);
   1912a:	f7f3 be7f 	b.w	ce2c <HciLeRemoteConnParamReqNegReply>
          HciLeSetDataLen(pCcb->handle, pDataLen->txOctets, pDataLen->txTime);
   1912e:	4403      	add	r3, r0
   19130:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   19134:	88ca      	ldrh	r2, [r1, #6]
   19136:	8998      	ldrh	r0, [r3, #12]
   19138:	8889      	ldrh	r1, [r1, #4]
}
   1913a:	b005      	add	sp, #20
   1913c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
          HciLeSetDataLen(pCcb->handle, pDataLen->txOctets, pDataLen->txTime);
   19140:	f7f3 beac 	b.w	ce9c <HciLeSetDataLen>
   19144:	1000588c 	.word	0x1000588c

00019148 <dmConn2HciHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConn2HciHandler(hciEvt_t *pEvent)
{
   19148:	b510      	push	{r4, lr}
    if (pCcb->inUse && (pCcb->handle == handle))
   1914a:	4c66      	ldr	r4, [pc, #408]	; (192e4 <dmConn2HciHandler+0x19c>)
  dmConnCcb_t *pCcb;

  /* look up ccb from conn handle */
  if ((pCcb = dmConnCcbByHandle(pEvent->hdr.param)) != NULL)
   1914c:	8801      	ldrh	r1, [r0, #0]
    if (pCcb->inUse && (pCcb->handle == handle))
   1914e:	7da2      	ldrb	r2, [r4, #22]
{
   19150:	b084      	sub	sp, #16
   19152:	4603      	mov	r3, r0
    if (pCcb->inUse && (pCcb->handle == handle))
   19154:	b112      	cbz	r2, 1915c <dmConn2HciHandler+0x14>
   19156:	89a0      	ldrh	r0, [r4, #12]
   19158:	4281      	cmp	r1, r0
   1915a:	d014      	beq.n	19186 <dmConn2HciHandler+0x3e>
   1915c:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
   19160:	b11a      	cbz	r2, 1916a <dmConn2HciHandler+0x22>
   19162:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
   19164:	4281      	cmp	r1, r0
   19166:	f000 80b9 	beq.w	192dc <dmConn2HciHandler+0x194>
   1916a:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
   1916e:	b122      	cbz	r2, 1917a <dmConn2HciHandler+0x32>
   19170:	f8b4 006c 	ldrh.w	r0, [r4, #108]	; 0x6c
   19174:	4281      	cmp	r1, r0
   19176:	f000 80b3 	beq.w	192e0 <dmConn2HciHandler+0x198>
  DM_TRACE_WARN1("dmConnCcbByHandle not found 0x%04x", handle);
   1917a:	485b      	ldr	r0, [pc, #364]	; (192e8 <dmConn2HciHandler+0x1a0>)
      default:
        /* should never get here */
        break;
    }
  }
}
   1917c:	b004      	add	sp, #16
   1917e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  DM_TRACE_WARN1("dmConnCcbByHandle not found 0x%04x", handle);
   19182:	f7f6 bf61 	b.w	10048 <WsfTrace>
  dmConnCcb_t   *pCcb = dmConnCb.ccb;
   19186:	4621      	mov	r1, r4
    switch (pEvent->hdr.event)
   19188:	789a      	ldrb	r2, [r3, #2]
   1918a:	3a07      	subs	r2, #7
   1918c:	2a21      	cmp	r2, #33	; 0x21
   1918e:	d82b      	bhi.n	191e8 <dmConn2HciHandler+0xa0>
   19190:	e8df f002 	tbb	[pc, r2]
   19194:	752a2a8e 	.word	0x752a2a8e
   19198:	2a2a2a51 	.word	0x2a2a2a51
   1919c:	2a2a2a2a 	.word	0x2a2a2a2a
   191a0:	2a2a2a2a 	.word	0x2a2a2a2a
   191a4:	2a2a2a2a 	.word	0x2a2a2a2a
   191a8:	2a2a2a2a 	.word	0x2a2a2a2a
   191ac:	2a2a2a2a 	.word	0x2a2a2a2a
   191b0:	2a2a114c 	.word	0x2a2a114c
   191b4:	2c3a      	.short	0x2c3a
{
  hciLeDataLenChangeEvt_t evt;

  /* call callback */
  evt.hdr.event = DM_CONN_DATA_LEN_CHANGE_IND;
  evt.hdr.param = pCcb->connId;
   191b6:	7c09      	ldrb	r1, [r1, #16]
  evt.hdr.status = HCI_SUCCESS;
  evt.handle = pCcb->handle;
  evt.maxTxOctets = pEvent->leDataLenChange.maxTxOctets;
   191b8:	f8b3 c006 	ldrh.w	ip, [r3, #6]
  evt.hdr.event = DM_CONN_DATA_LEN_CHANGE_IND;
   191bc:	2241      	movs	r2, #65	; 0x41
   191be:	f8ad 2002 	strh.w	r2, [sp, #2]
  evt.hdr.param = pCcb->connId;
   191c2:	f8ad 1000 	strh.w	r1, [sp]
  evt.handle = pCcb->handle;
   191c6:	f8ad 0004 	strh.w	r0, [sp, #4]
  evt.maxTxTime = pEvent->leDataLenChange.maxTxTime;
   191ca:	8918      	ldrh	r0, [r3, #8]
  evt.maxRxOctets = pEvent->leDataLenChange.maxRxOctets;
   191cc:	8959      	ldrh	r1, [r3, #10]
  evt.maxRxTime = pEvent->leDataLenChange.maxRxTime;
   191ce:	899b      	ldrh	r3, [r3, #12]

  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   191d0:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
  evt.maxTxTime = pEvent->leDataLenChange.maxTxTime;
   191d4:	f8ad 0008 	strh.w	r0, [sp, #8]
  evt.maxTxOctets = pEvent->leDataLenChange.maxTxOctets;
   191d8:	f8ad c006 	strh.w	ip, [sp, #6]
  evt.maxRxOctets = pEvent->leDataLenChange.maxRxOctets;
   191dc:	f8ad 100a 	strh.w	r1, [sp, #10]
  evt.maxRxTime = pEvent->leDataLenChange.maxRxTime;
   191e0:	f8ad 300c 	strh.w	r3, [sp, #12]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   191e4:	4668      	mov	r0, sp
   191e6:	4790      	blx	r2
}
   191e8:	b004      	add	sp, #16
   191ea:	bd10      	pop	{r4, pc}
{
  hciAuthPayloadToExpiredEvt_t evt;

  /* call callback */
  evt.hdr.event = DM_CONN_AUTH_TO_EXPIRED_IND;
  evt.hdr.param = pCcb->connId;
   191ec:	7c08      	ldrb	r0, [r1, #16]
  evt.hdr.status = HCI_SUCCESS;
  evt.handle = pEvent->authPayloadToExpired.handle;
   191ee:	889a      	ldrh	r2, [r3, #4]
  evt.hdr.param = pCcb->connId;
   191f0:	f8ad 0000 	strh.w	r0, [sp]
  evt.hdr.event = DM_CONN_AUTH_TO_EXPIRED_IND;
   191f4:	2143      	movs	r1, #67	; 0x43

  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   191f6:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  evt.hdr.event = DM_CONN_AUTH_TO_EXPIRED_IND;
   191fa:	f8ad 1002 	strh.w	r1, [sp, #2]
  evt.handle = pEvent->authPayloadToExpired.handle;
   191fe:	f8ad 2004 	strh.w	r2, [sp, #4]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   19202:	4668      	mov	r0, sp
   19204:	4798      	blx	r3
}
   19206:	e7ef      	b.n	191e8 <dmConn2HciHandler+0xa0>
  evt.hdr.param = pCcb->connId;
   19208:	f891 c010 	ldrb.w	ip, [r1, #16]
  evt.status = pEvent->writeAuthPayloadToCmdCmpl.status;
   1920c:	791a      	ldrb	r2, [r3, #4]
  evt.handle = pEvent->writeAuthPayloadToCmdCmpl.handle;
   1920e:	88d9      	ldrh	r1, [r3, #6]
  evt.hdr.param = pCcb->connId;
   19210:	f8ad c000 	strh.w	ip, [sp]
  evt.hdr.event = DM_CONN_WRITE_AUTH_TO_IND;
   19214:	2042      	movs	r0, #66	; 0x42
   19216:	f8ad 0002 	strh.w	r0, [sp, #2]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   1921a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  evt.handle = pEvent->writeAuthPayloadToCmdCmpl.handle;
   1921e:	f8ad 1006 	strh.w	r1, [sp, #6]
  evt.status = pEvent->writeAuthPayloadToCmdCmpl.status;
   19222:	f88d 2004 	strb.w	r2, [sp, #4]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   19226:	4668      	mov	r0, sp
   19228:	4798      	blx	r3
}
   1922a:	e7dd      	b.n	191e8 <dmConn2HciHandler+0xa0>
  evt.hdr.param = pCcb->connId;
   1922c:	7c09      	ldrb	r1, [r1, #16]
  evt.intervalMin = pEvent->leRemConnParamReq.intervalMin;
   1922e:	f8b3 c006 	ldrh.w	ip, [r3, #6]
  evt.hdr.event = DM_REM_CONN_PARAM_REQ_IND;
   19232:	2240      	movs	r2, #64	; 0x40
   19234:	e7c3      	b.n	191be <dmConn2HciHandler+0x76>
static void dmConn2ActReadRemoteFeaturesCmpl(dmConnCcb_t *pCcb, hciEvt_t *pEvent)
{
  hciLeReadRemoteFeatCmplEvt_t evt;

  /* Save the features */
  BYTES_TO_UINT32(pCcb->features, pEvent->leReadRemoteFeatCmpl.features);
   19236:	7a9a      	ldrb	r2, [r3, #10]
   19238:	7a58      	ldrb	r0, [r3, #9]
   1923a:	0412      	lsls	r2, r2, #16
   1923c:	eb02 2200 	add.w	r2, r2, r0, lsl #8
   19240:	7a18      	ldrb	r0, [r3, #8]
   19242:	4402      	add	r2, r0
   19244:	7ad8      	ldrb	r0, [r3, #11]
   19246:	eb02 6200 	add.w	r2, r2, r0, lsl #24
  pCcb->featuresPresent = TRUE;
   1924a:	2001      	movs	r0, #1
   1924c:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
  BYTES_TO_UINT32(pCcb->features, pEvent->leReadRemoteFeatCmpl.features);
   19250:	628a      	str	r2, [r1, #40]	; 0x28

  /* call callback */
  evt.hdr.event = DM_REMOTE_FEATURES_IND;
  evt.hdr.param = pCcb->connId;
   19252:	7c0a      	ldrb	r2, [r1, #16]
  evt.hdr.status = HCI_SUCCESS;

  evt.status = pEvent->leReadRemoteFeatCmpl.status;
   19254:	f893 c004 	ldrb.w	ip, [r3, #4]
  evt.handle = pEvent->leReadRemoteFeatCmpl.handle;
  memcpy(evt.features, pEvent->leReadRemoteFeatCmpl.features, sizeof(evt.features));
   19258:	6898      	ldr	r0, [r3, #8]
   1925a:	68d9      	ldr	r1, [r3, #12]
  evt.hdr.param = pCcb->connId;
   1925c:	f8ad 2000 	strh.w	r2, [sp]
  evt.handle = pEvent->leReadRemoteFeatCmpl.handle;
   19260:	88da      	ldrh	r2, [r3, #6]
   19262:	f8ad 2006 	strh.w	r2, [sp, #6]
  evt.hdr.event = DM_REMOTE_FEATURES_IND;
   19266:	2357      	movs	r3, #87	; 0x57
   19268:	f8ad 3002 	strh.w	r3, [sp, #2]
  memcpy(evt.features, pEvent->leReadRemoteFeatCmpl.features, sizeof(evt.features));
   1926c:	ab02      	add	r3, sp, #8
  evt.status = pEvent->leReadRemoteFeatCmpl.status;
   1926e:	f88d c004 	strb.w	ip, [sp, #4]

  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   19272:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
  memcpy(evt.features, pEvent->leReadRemoteFeatCmpl.features, sizeof(evt.features));
   19276:	c303      	stmia	r3!, {r0, r1}
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   19278:	4668      	mov	r0, sp
   1927a:	4790      	blx	r2
}
   1927c:	e7b4      	b.n	191e8 <dmConn2HciHandler+0xa0>
{
  hciReadRemoteVerInfoCmplEvt_t evt;

  /* call callback */
  evt.hdr.event = DM_READ_REMOTE_VER_INFO_IND;
  evt.hdr.param = pCcb->connId;
   1927e:	f891 c010 	ldrb.w	ip, [r1, #16]
  evt.hdr.status = HCI_SUCCESS;

  evt.status = pEvent->readRemoteVerInfoCmpl.status;
   19282:	7919      	ldrb	r1, [r3, #4]
  evt.handle = pEvent->readRemoteVerInfoCmpl.handle;
   19284:	88d8      	ldrh	r0, [r3, #6]
  evt.status = pEvent->readRemoteVerInfoCmpl.status;
   19286:	f88d 1004 	strb.w	r1, [sp, #4]
  evt.hdr.event = DM_READ_REMOTE_VER_INFO_IND;
   1928a:	2258      	movs	r2, #88	; 0x58
  evt.version = pEvent->readRemoteVerInfoCmpl.version;
   1928c:	7a19      	ldrb	r1, [r3, #8]
  evt.mfrName = pEvent->readRemoteVerInfoCmpl.mfrName;
   1928e:	f8d3 300a 	ldr.w	r3, [r3, #10]
  evt.hdr.event = DM_READ_REMOTE_VER_INFO_IND;
   19292:	f8ad 2002 	strh.w	r2, [sp, #2]
  evt.handle = pEvent->readRemoteVerInfoCmpl.handle;
   19296:	f8ad 0006 	strh.w	r0, [sp, #6]
  evt.subversion = pEvent->readRemoteVerInfoCmpl.subversion;

  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   1929a:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
  evt.hdr.param = pCcb->connId;
   1929e:	f8ad c000 	strh.w	ip, [sp]
  evt.version = pEvent->readRemoteVerInfoCmpl.version;
   192a2:	f88d 1008 	strb.w	r1, [sp, #8]
  evt.mfrName = pEvent->readRemoteVerInfoCmpl.mfrName;
   192a6:	f8cd 300a 	str.w	r3, [sp, #10]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   192aa:	4668      	mov	r0, sp
   192ac:	4790      	blx	r2
}
   192ae:	e79b      	b.n	191e8 <dmConn2HciHandler+0xa0>
  evt.hdr.event = DM_CONN_READ_RSSI_IND;
   192b0:	2239      	movs	r2, #57	; 0x39
  evt.hdr.param = pCcb->connId;
   192b2:	f891 c010 	ldrb.w	ip, [r1, #16]
  evt.hdr.event = DM_CONN_READ_RSSI_IND;
   192b6:	f88d 2002 	strb.w	r2, [sp, #2]
  evt.status = evt.hdr.status = (uint8_t) pEvent->readRssiCmdCmpl.status;
   192ba:	791a      	ldrb	r2, [r3, #4]
  evt.rssi = pEvent->readRssiCmdCmpl.rssi;
   192bc:	7a1b      	ldrb	r3, [r3, #8]
  evt.handle = pCcb->handle;
   192be:	f8ad 0006 	strh.w	r0, [sp, #6]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   192c2:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
  evt.hdr.param = pCcb->connId;
   192c6:	f8ad c000 	strh.w	ip, [sp]
  evt.status = evt.hdr.status = (uint8_t) pEvent->readRssiCmdCmpl.status;
   192ca:	f88d 2003 	strb.w	r2, [sp, #3]
   192ce:	f88d 2004 	strb.w	r2, [sp, #4]
  evt.rssi = pEvent->readRssiCmdCmpl.rssi;
   192d2:	f88d 3008 	strb.w	r3, [sp, #8]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   192d6:	4668      	mov	r0, sp
   192d8:	4788      	blx	r1
}
   192da:	e785      	b.n	191e8 <dmConn2HciHandler+0xa0>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   192dc:	4903      	ldr	r1, [pc, #12]	; (192ec <dmConn2HciHandler+0x1a4>)
   192de:	e753      	b.n	19188 <dmConn2HciHandler+0x40>
   192e0:	4903      	ldr	r1, [pc, #12]	; (192f0 <dmConn2HciHandler+0x1a8>)
   192e2:	e751      	b.n	19188 <dmConn2HciHandler+0x40>
   192e4:	1000588c 	.word	0x1000588c
   192e8:	000204b0 	.word	0x000204b0
   192ec:	100058bc 	.word	0x100058bc
   192f0:	100058ec 	.word	0x100058ec

000192f4 <dmConnHciHandler>:
{
   192f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((pEvent->hdr.event == HCI_LE_CONN_CMPL_CBACK_EVT) ||
   192f6:	7883      	ldrb	r3, [r0, #2]
    if (pCcb->inUse && BdaCmp(pCcb->peerAddr, pAddr))
   192f8:	4d63      	ldr	r5, [pc, #396]	; (19488 <dmConnHciHandler+0x194>)
  if ((pEvent->hdr.event == HCI_LE_CONN_CMPL_CBACK_EVT) ||
   192fa:	1e5a      	subs	r2, r3, #1
   192fc:	2a01      	cmp	r2, #1
{
   192fe:	4604      	mov	r4, r0
  if ((pEvent->hdr.event == HCI_LE_CONN_CMPL_CBACK_EVT) ||
   19300:	d919      	bls.n	19336 <dmConnHciHandler+0x42>
    if (pCcb->inUse && (pCcb->handle == handle))
   19302:	7daa      	ldrb	r2, [r5, #22]
    pCcb = dmConnCcbByHandle(pEvent->hdr.param);
   19304:	8801      	ldrh	r1, [r0, #0]
    if (pCcb->inUse && (pCcb->handle == handle))
   19306:	b112      	cbz	r2, 1930e <dmConnHciHandler+0x1a>
   19308:	89aa      	ldrh	r2, [r5, #12]
   1930a:	428a      	cmp	r2, r1
   1930c:	d077      	beq.n	193fe <dmConnHciHandler+0x10a>
   1930e:	f895 2046 	ldrb.w	r2, [r5, #70]	; 0x46
   19312:	b112      	cbz	r2, 1931a <dmConnHciHandler+0x26>
   19314:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
   19316:	428a      	cmp	r2, r1
   19318:	d070      	beq.n	193fc <dmConnHciHandler+0x108>
   1931a:	f895 2076 	ldrb.w	r2, [r5, #118]	; 0x76
   1931e:	b11a      	cbz	r2, 19328 <dmConnHciHandler+0x34>
   19320:	f8b5 206c 	ldrh.w	r2, [r5, #108]	; 0x6c
   19324:	428a      	cmp	r2, r1
   19326:	d06d      	beq.n	19404 <dmConnHciHandler+0x110>
  DM_TRACE_WARN1("dmConnCcbByHandle not found 0x%04x", handle);
   19328:	4858      	ldr	r0, [pc, #352]	; (1948c <dmConnHciHandler+0x198>)
   1932a:	f7f6 fe8d 	bl	10048 <WsfTrace>
    pEvent->hdr.event = DM_CONN_HCI_EVT_2_MSG(pEvent->hdr.event);
   1932e:	78a3      	ldrb	r3, [r4, #2]
   19330:	3336      	adds	r3, #54	; 0x36
   19332:	70a3      	strb	r3, [r4, #2]
}
   19334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pCcb->inUse && BdaCmp(pCcb->peerAddr, pAddr))
   19336:	7dab      	ldrb	r3, [r5, #22]
    if ((pCcb = dmConnCcbByBdAddr(pEvent->leConnCmpl.peerAddr)) == NULL)
   19338:	f100 060a 	add.w	r6, r0, #10
    if (pCcb->inUse && BdaCmp(pCcb->peerAddr, pAddr))
   1933c:	2b00      	cmp	r3, #0
   1933e:	d143      	bne.n	193c8 <dmConnHciHandler+0xd4>
   19340:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
   19344:	2b00      	cmp	r3, #0
   19346:	d149      	bne.n	193dc <dmConnHciHandler+0xe8>
   19348:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
   1934c:	2b00      	cmp	r3, #0
   1934e:	d14d      	bne.n	193ec <dmConnHciHandler+0xf8>
  DM_TRACE_INFO0("dmConnIdByBdAddr not found");
   19350:	484f      	ldr	r0, [pc, #316]	; (19490 <dmConnHciHandler+0x19c>)
   19352:	f7f6 fe79 	bl	10048 <WsfTrace>
    if (pCcb->inUse &&
   19356:	7dab      	ldrb	r3, [r5, #22]
   19358:	b9d3      	cbnz	r3, 19390 <dmConnHciHandler+0x9c>
   1935a:	f895 1046 	ldrb.w	r1, [r5, #70]	; 0x46
   1935e:	b129      	cbz	r1, 1936c <dmConnHciHandler+0x78>
        ((pCcb->state == DM_CONN_SM_ST_ACCEPTING) ||
   19360:	f895 2045 	ldrb.w	r2, [r5, #69]	; 0x45
    if (pCcb->inUse &&
   19364:	2a02      	cmp	r2, #2
   19366:	d06d      	beq.n	19444 <dmConnHciHandler+0x150>
        ((pCcb->state == DM_CONN_SM_ST_ACCEPTING) ||
   19368:	2a04      	cmp	r2, #4
   1936a:	d066      	beq.n	1943a <dmConnHciHandler+0x146>
    if (pCcb->inUse &&
   1936c:	f895 2076 	ldrb.w	r2, [r5, #118]	; 0x76
   19370:	b12a      	cbz	r2, 1937e <dmConnHciHandler+0x8a>
        ((pCcb->state == DM_CONN_SM_ST_ACCEPTING) ||
   19372:	f895 0075 	ldrb.w	r0, [r5, #117]	; 0x75
    if (pCcb->inUse &&
   19376:	2802      	cmp	r0, #2
   19378:	d05d      	beq.n	19436 <dmConnHciHandler+0x142>
        ((pCcb->state == DM_CONN_SM_ST_ACCEPTING) ||
   1937a:	2804      	cmp	r0, #4
   1937c:	d055      	beq.n	1942a <dmConnHciHandler+0x136>
        if ((pEvent->hdr.status == HCI_SUCCESS) && (pEvent->leConnCmpl.role == HCI_ROLE_SLAVE))
   1937e:	78e0      	ldrb	r0, [r4, #3]
   19380:	2800      	cmp	r0, #0
   19382:	d14c      	bne.n	1941e <dmConnHciHandler+0x12a>
   19384:	7a27      	ldrb	r7, [r4, #8]
   19386:	2f01      	cmp	r7, #1
   19388:	d03e      	beq.n	19408 <dmConnHciHandler+0x114>
      pEvent->hdr.event =  DM_CONN_MSG_HCI_LE_CONN_CMPL;
   1938a:	2338      	movs	r3, #56	; 0x38
   1938c:	70a3      	strb	r3, [r4, #2]
}
   1938e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ((pCcb->state == DM_CONN_SM_ST_ACCEPTING) ||
   19390:	7d6a      	ldrb	r2, [r5, #21]
    if (pCcb->inUse &&
   19392:	2a02      	cmp	r2, #2
   19394:	d006      	beq.n	193a4 <dmConnHciHandler+0xb0>
        ((pCcb->state == DM_CONN_SM_ST_ACCEPTING) ||
   19396:	2a04      	cmp	r2, #4
   19398:	d1df      	bne.n	1935a <dmConnHciHandler+0x66>
         ((pCcb->state == DM_CONN_SM_ST_DISCONNECTING) && (pCcb->handle == DM_CONN_HCI_HANDLE_NONE))))
   1939a:	89a9      	ldrh	r1, [r5, #12]
   1939c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   193a0:	4291      	cmp	r1, r2
   193a2:	d1da      	bne.n	1935a <dmConnHciHandler+0x66>
  dmConnCcb_t   *pCcb = dmConnCb.ccb;
   193a4:	4d38      	ldr	r5, [pc, #224]	; (19488 <dmConnHciHandler+0x194>)
      DM_TRACE_INFO1("dmConnCmplStates %d", pCcb->connId);
   193a6:	7c29      	ldrb	r1, [r5, #16]
   193a8:	483a      	ldr	r0, [pc, #232]	; (19494 <dmConnHciHandler+0x1a0>)
   193aa:	f7f6 fe4d 	bl	10048 <WsfTrace>
    if (pEvent->hdr.status == HCI_SUCCESS)
   193ae:	78e3      	ldrb	r3, [r4, #3]
   193b0:	2b00      	cmp	r3, #0
   193b2:	d137      	bne.n	19424 <dmConnHciHandler+0x130>
      pEvent->hdr.event =  DM_CONN_MSG_HCI_LE_CONN_CMPL;
   193b4:	2338      	movs	r3, #56	; 0x38
   193b6:	70a3      	strb	r3, [r4, #2]
    pEvent->hdr.param = pCcb->connId;
   193b8:	7c2b      	ldrb	r3, [r5, #16]
   193ba:	8023      	strh	r3, [r4, #0]
    dmConnSmExecute(pCcb, (dmConnMsg_t *) pEvent);
   193bc:	4621      	mov	r1, r4
   193be:	4628      	mov	r0, r5
}
   193c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    dmConnSmExecute(pCcb, (dmConnMsg_t *) pEvent);
   193c4:	f000 ba92 	b.w	198ec <dmConnSmExecute>
    if (pCcb->inUse && BdaCmp(pCcb->peerAddr, pAddr))
   193c8:	4631      	mov	r1, r6
   193ca:	4628      	mov	r0, r5
   193cc:	f7f9 ffec 	bl	133a8 <BdaCmp>
   193d0:	2800      	cmp	r0, #0
   193d2:	d1ec      	bne.n	193ae <dmConnHciHandler+0xba>
   193d4:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
   193d8:	2b00      	cmp	r3, #0
   193da:	d0b5      	beq.n	19348 <dmConnHciHandler+0x54>
   193dc:	482e      	ldr	r0, [pc, #184]	; (19498 <dmConnHciHandler+0x1a4>)
   193de:	4631      	mov	r1, r6
   193e0:	f7f9 ffe2 	bl	133a8 <BdaCmp>
   193e4:	2800      	cmp	r0, #0
   193e6:	d0af      	beq.n	19348 <dmConnHciHandler+0x54>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   193e8:	4d2b      	ldr	r5, [pc, #172]	; (19498 <dmConnHciHandler+0x1a4>)
   193ea:	e7e0      	b.n	193ae <dmConnHciHandler+0xba>
    if (pCcb->inUse && BdaCmp(pCcb->peerAddr, pAddr))
   193ec:	482b      	ldr	r0, [pc, #172]	; (1949c <dmConnHciHandler+0x1a8>)
   193ee:	4631      	mov	r1, r6
   193f0:	f7f9 ffda 	bl	133a8 <BdaCmp>
   193f4:	2800      	cmp	r0, #0
   193f6:	d0ab      	beq.n	19350 <dmConnHciHandler+0x5c>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   193f8:	4d28      	ldr	r5, [pc, #160]	; (1949c <dmConnHciHandler+0x1a8>)
   193fa:	e7d8      	b.n	193ae <dmConnHciHandler+0xba>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   193fc:	4d26      	ldr	r5, [pc, #152]	; (19498 <dmConnHciHandler+0x1a4>)
    pEvent->hdr.event = DM_CONN_HCI_EVT_2_MSG(pEvent->hdr.event);
   193fe:	3336      	adds	r3, #54	; 0x36
   19400:	70a3      	strb	r3, [r4, #2]
   19402:	e7d9      	b.n	193b8 <dmConnHciHandler+0xc4>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   19404:	4d25      	ldr	r5, [pc, #148]	; (1949c <dmConnHciHandler+0x1a8>)
   19406:	e7fa      	b.n	193fe <dmConnHciHandler+0x10a>
    if (pCcb->inUse == FALSE)
   19408:	2b00      	cmp	r3, #0
   1940a:	d037      	beq.n	1947c <dmConnHciHandler+0x188>
   1940c:	b1e1      	cbz	r1, 19448 <dmConnHciHandler+0x154>
   1940e:	2a00      	cmp	r2, #0
   19410:	d037      	beq.n	19482 <dmConnHciHandler+0x18e>
  DM_TRACE_ERR0("dmConnCcbAlloc failed");
   19412:	4823      	ldr	r0, [pc, #140]	; (194a0 <dmConnHciHandler+0x1ac>)
   19414:	f7f6 fe18 	bl	10048 <WsfTrace>
    if (pEvent->hdr.status == HCI_SUCCESS)
   19418:	78e3      	ldrb	r3, [r4, #3]
   1941a:	2b00      	cmp	r3, #0
   1941c:	d0b5      	beq.n	1938a <dmConnHciHandler+0x96>
      pEvent->hdr.event = DM_CONN_MSG_HCI_LE_CONN_CMPL_FAIL;
   1941e:	2337      	movs	r3, #55	; 0x37
   19420:	70a3      	strb	r3, [r4, #2]
}
   19422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pEvent->hdr.event = DM_CONN_MSG_HCI_LE_CONN_CMPL_FAIL;
   19424:	2337      	movs	r3, #55	; 0x37
   19426:	70a3      	strb	r3, [r4, #2]
   19428:	e7c6      	b.n	193b8 <dmConnHciHandler+0xc4>
         ((pCcb->state == DM_CONN_SM_ST_DISCONNECTING) && (pCcb->handle == DM_CONN_HCI_HANDLE_NONE))))
   1942a:	f8b5 506c 	ldrh.w	r5, [r5, #108]	; 0x6c
   1942e:	f64f 70ff 	movw	r0, #65535	; 0xffff
   19432:	4285      	cmp	r5, r0
   19434:	d1a3      	bne.n	1937e <dmConnHciHandler+0x8a>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   19436:	4d19      	ldr	r5, [pc, #100]	; (1949c <dmConnHciHandler+0x1a8>)
   19438:	e7b5      	b.n	193a6 <dmConnHciHandler+0xb2>
         ((pCcb->state == DM_CONN_SM_ST_DISCONNECTING) && (pCcb->handle == DM_CONN_HCI_HANDLE_NONE))))
   1943a:	8fa8      	ldrh	r0, [r5, #60]	; 0x3c
   1943c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   19440:	4290      	cmp	r0, r2
   19442:	d193      	bne.n	1936c <dmConnHciHandler+0x78>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   19444:	4d14      	ldr	r5, [pc, #80]	; (19498 <dmConnHciHandler+0x1a4>)
   19446:	e7ae      	b.n	193a6 <dmConnHciHandler+0xb2>
  for (i = 0; i < DM_CONN_MAX; i++, pCcb++)
   19448:	4d13      	ldr	r5, [pc, #76]	; (19498 <dmConnHciHandler+0x1a4>)
      memset(pCcb, 0, sizeof(dmConnCcb_t));
   1944a:	2230      	movs	r2, #48	; 0x30
   1944c:	4628      	mov	r0, r5
   1944e:	2100      	movs	r1, #0
   19450:	f003 fb62 	bl	1cb18 <memset>
      BdaCpy(pCcb->peerAddr, pAddr);
   19454:	4631      	mov	r1, r6
   19456:	4628      	mov	r0, r5
   19458:	f7f9 ffa0 	bl	1339c <BdaCpy>
      pCcb->updating = FALSE;
   1945c:	2300      	movs	r3, #0
      pCcb->connId = i + 1;
   1945e:	1c79      	adds	r1, r7, #1
   19460:	b2c9      	uxtb	r1, r1
      pCcb->handle = DM_CONN_HCI_HANDLE_NONE;
   19462:	f64f 72ff 	movw	r2, #65535	; 0xffff
      pCcb->updating = FALSE;
   19466:	746b      	strb	r3, [r5, #17]
      pCcb->featuresPresent = FALSE;
   19468:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
      pCcb->inUse = TRUE;
   1946c:	2301      	movs	r3, #1
      DM_TRACE_ALLOC1("dmConnCcbAlloc %d", pCcb->connId);
   1946e:	480d      	ldr	r0, [pc, #52]	; (194a4 <dmConnHciHandler+0x1b0>)
      pCcb->handle = DM_CONN_HCI_HANDLE_NONE;
   19470:	81aa      	strh	r2, [r5, #12]
      pCcb->connId = i + 1;
   19472:	7429      	strb	r1, [r5, #16]
      pCcb->inUse = TRUE;
   19474:	75ab      	strb	r3, [r5, #22]
      DM_TRACE_ALLOC1("dmConnCcbAlloc %d", pCcb->connId);
   19476:	f7f6 fde7 	bl	10048 <WsfTrace>
      return pCcb;
   1947a:	e798      	b.n	193ae <dmConnHciHandler+0xba>
  dmConnCcb_t   *pCcb = dmConnCb.ccb;
   1947c:	4d02      	ldr	r5, [pc, #8]	; (19488 <dmConnHciHandler+0x194>)
  for (i = 0; i < DM_CONN_MAX; i++, pCcb++)
   1947e:	461f      	mov	r7, r3
   19480:	e7e3      	b.n	1944a <dmConnHciHandler+0x156>
   19482:	4d06      	ldr	r5, [pc, #24]	; (1949c <dmConnHciHandler+0x1a8>)
   19484:	2702      	movs	r7, #2
   19486:	e7e0      	b.n	1944a <dmConnHciHandler+0x156>
   19488:	1000588c 	.word	0x1000588c
   1948c:	000204b0 	.word	0x000204b0
   19490:	000204d4 	.word	0x000204d4
   19494:	000204f0 	.word	0x000204f0
   19498:	100058bc 	.word	0x100058bc
   1949c:	100058ec 	.word	0x100058ec
   194a0:	00020518 	.word	0x00020518
   194a4:	00020504 	.word	0x00020504

000194a8 <dmConnReset>:
{
   194a8:	b530      	push	{r4, r5, lr}
    if (pCcb->inUse)
   194aa:	4d25      	ldr	r5, [pc, #148]	; (19540 <dmConnReset+0x98>)
{
   194ac:	b085      	sub	sp, #20
    if (pCcb->inUse)
   194ae:	7dab      	ldrb	r3, [r5, #22]
  disconnectCmpl.hdr.status = disconnectCmpl.status = HCI_SUCCESS;
   194b0:	2000      	movs	r0, #0
  disconnectCmpl.hdr.event = HCI_DISCONNECT_CMPL_CBACK_EVT;
   194b2:	2103      	movs	r1, #3
  disconnectCmpl.reason = HCI_ERR_LOCAL_TERMINATED;
   194b4:	2216      	movs	r2, #22
  disconnectCmpl.hdr.status = disconnectCmpl.status = HCI_SUCCESS;
   194b6:	f88d 0008 	strb.w	r0, [sp, #8]
  disconnectCmpl.hdr.event = HCI_DISCONNECT_CMPL_CBACK_EVT;
   194ba:	f8ad 1006 	strh.w	r1, [sp, #6]
  disconnectCmpl.reason = HCI_ERR_LOCAL_TERMINATED;
   194be:	f88d 200c 	strb.w	r2, [sp, #12]
    if (pCcb->inUse)
   194c2:	b9d3      	cbnz	r3, 194fa <dmConnReset+0x52>
   194c4:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
   194c8:	bb1b      	cbnz	r3, 19512 <dmConnReset+0x6a>
   194ca:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
   194ce:	bb63      	cbnz	r3, 1952a <dmConnReset+0x82>
    dmConnCb.connSpec[i] = dmConnSpecDefaults;
   194d0:	4c1c      	ldr	r4, [pc, #112]	; (19544 <dmConnReset+0x9c>)
   194d2:	4b1d      	ldr	r3, [pc, #116]	; (19548 <dmConnReset+0xa0>)
   194d4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   194d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    dmConnCb.scanInterval[i] = DM_GAP_SCAN_FAST_INT_MIN;
   194dc:	f04f 1230 	mov.w	r2, #3145776	; 0x300030
    dmConnCb.scanWindow[i] = DM_GAP_SCAN_FAST_WINDOW;
   194e0:	e9c5 222f 	strd	r2, r2, [r5, #188]	; 0xbc
    dmConnCb.connSpec[i] = dmConnSpecDefaults;
   194e4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   194e8:	330c      	adds	r3, #12
  dmCb.initFiltPolicy = HCI_FILT_NONE;
   194ea:	4c18      	ldr	r4, [pc, #96]	; (1954c <dmConnReset+0xa4>)
    dmConnCb.connSpec[i] = dmConnSpecDefaults;
   194ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  dmCb.initFiltPolicy = HCI_FILT_NONE;
   194f0:	2300      	movs	r3, #0
   194f2:	7523      	strb	r3, [r4, #20]
  dmCb.connAddrType = DM_ADDR_PUBLIC;
   194f4:	7363      	strb	r3, [r4, #13]
}
   194f6:	b005      	add	sp, #20
   194f8:	bd30      	pop	{r4, r5, pc}
      disconnectCmpl.hdr.param = disconnectCmpl.handle = pCcb->handle;
   194fa:	89ab      	ldrh	r3, [r5, #12]
   194fc:	f8ad 300a 	strh.w	r3, [sp, #10]
      dmConnHciHandler((hciEvt_t *) &disconnectCmpl);
   19500:	a801      	add	r0, sp, #4
      disconnectCmpl.hdr.param = disconnectCmpl.handle = pCcb->handle;
   19502:	f8ad 3004 	strh.w	r3, [sp, #4]
      dmConnHciHandler((hciEvt_t *) &disconnectCmpl);
   19506:	f7ff fef5 	bl	192f4 <dmConnHciHandler>
    if (pCcb->inUse)
   1950a:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
   1950e:	2b00      	cmp	r3, #0
   19510:	d0db      	beq.n	194ca <dmConnReset+0x22>
      disconnectCmpl.hdr.param = disconnectCmpl.handle = pCcb->handle;
   19512:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
   19514:	f8ad 300a 	strh.w	r3, [sp, #10]
      dmConnHciHandler((hciEvt_t *) &disconnectCmpl);
   19518:	a801      	add	r0, sp, #4
      disconnectCmpl.hdr.param = disconnectCmpl.handle = pCcb->handle;
   1951a:	f8ad 3004 	strh.w	r3, [sp, #4]
      dmConnHciHandler((hciEvt_t *) &disconnectCmpl);
   1951e:	f7ff fee9 	bl	192f4 <dmConnHciHandler>
    if (pCcb->inUse)
   19522:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
   19526:	2b00      	cmp	r3, #0
   19528:	d0d2      	beq.n	194d0 <dmConnReset+0x28>
      disconnectCmpl.hdr.param = disconnectCmpl.handle = pCcb->handle;
   1952a:	f8b5 306c 	ldrh.w	r3, [r5, #108]	; 0x6c
   1952e:	f8ad 300a 	strh.w	r3, [sp, #10]
      dmConnHciHandler((hciEvt_t *) &disconnectCmpl);
   19532:	a801      	add	r0, sp, #4
      disconnectCmpl.hdr.param = disconnectCmpl.handle = pCcb->handle;
   19534:	f8ad 3004 	strh.w	r3, [sp, #4]
      dmConnHciHandler((hciEvt_t *) &disconnectCmpl);
   19538:	f7ff fedc 	bl	192f4 <dmConnHciHandler>
   1953c:	e7c8      	b.n	194d0 <dmConnReset+0x28>
   1953e:	bf00      	nop
   19540:	1000588c 	.word	0x1000588c
   19544:	0002057c 	.word	0x0002057c
   19548:	10005930 	.word	0x10005930
   1954c:	10005960 	.word	0x10005960

00019550 <dmConnCcbByHandle>:
{
   19550:	b508      	push	{r3, lr}
    if (pCcb->inUse && (pCcb->handle == handle))
   19552:	4b0f      	ldr	r3, [pc, #60]	; (19590 <dmConnCcbByHandle+0x40>)
   19554:	7d9a      	ldrb	r2, [r3, #22]
{
   19556:	4601      	mov	r1, r0
    if (pCcb->inUse && (pCcb->handle == handle))
   19558:	b112      	cbz	r2, 19560 <dmConnCcbByHandle+0x10>
   1955a:	899a      	ldrh	r2, [r3, #12]
   1955c:	4282      	cmp	r2, r0
   1955e:	d011      	beq.n	19584 <dmConnCcbByHandle+0x34>
   19560:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
   19564:	b112      	cbz	r2, 1956c <dmConnCcbByHandle+0x1c>
   19566:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
   19568:	428a      	cmp	r2, r1
   1956a:	d00d      	beq.n	19588 <dmConnCcbByHandle+0x38>
   1956c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
   19570:	b11a      	cbz	r2, 1957a <dmConnCcbByHandle+0x2a>
   19572:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
   19576:	428b      	cmp	r3, r1
   19578:	d008      	beq.n	1958c <dmConnCcbByHandle+0x3c>
  DM_TRACE_WARN1("dmConnCcbByHandle not found 0x%04x", handle);
   1957a:	4806      	ldr	r0, [pc, #24]	; (19594 <dmConnCcbByHandle+0x44>)
   1957c:	f7f6 fd64 	bl	10048 <WsfTrace>
  return NULL;
   19580:	2000      	movs	r0, #0
}
   19582:	bd08      	pop	{r3, pc}
  dmConnCcb_t   *pCcb = dmConnCb.ccb;
   19584:	4618      	mov	r0, r3
}
   19586:	bd08      	pop	{r3, pc}
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   19588:	4803      	ldr	r0, [pc, #12]	; (19598 <dmConnCcbByHandle+0x48>)
}
   1958a:	bd08      	pop	{r3, pc}
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   1958c:	4803      	ldr	r0, [pc, #12]	; (1959c <dmConnCcbByHandle+0x4c>)
}
   1958e:	bd08      	pop	{r3, pc}
   19590:	1000588c 	.word	0x1000588c
   19594:	000204b0 	.word	0x000204b0
   19598:	100058bc 	.word	0x100058bc
   1959c:	100058ec 	.word	0x100058ec

000195a0 <dmConnCcbById>:
  connId--;
   195a0:	3801      	subs	r0, #1
   195a2:	b2c3      	uxtb	r3, r0
  if (dmConnCb.ccb[connId].inUse)
   195a4:	4904      	ldr	r1, [pc, #16]	; (195b8 <dmConnCcbById+0x18>)
   195a6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   195aa:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   195ae:	7d90      	ldrb	r0, [r2, #22]
   195b0:	b100      	cbz	r0, 195b4 <dmConnCcbById+0x14>
    return &dmConnCb.ccb[connId];
   195b2:	4610      	mov	r0, r2
}
   195b4:	4770      	bx	lr
   195b6:	bf00      	nop
   195b8:	1000588c 	.word	0x1000588c

000195bc <DmConnInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmConnInit(void)
{
   195bc:	b410      	push	{r4}
  dmFcnIfTbl[DM_ID_CONN] = (dmFcnIf_t *) &dmConnFcnIf;
   195be:	4b05      	ldr	r3, [pc, #20]	; (195d4 <DmConnInit+0x18>)
   195c0:	4c05      	ldr	r4, [pc, #20]	; (195d8 <DmConnInit+0x1c>)
  dmFcnIfTbl[DM_ID_CONN_2] = (dmFcnIf_t *) &dmConn2FcnIf;
  dmConnActSet[DM_CONN_ACT_SET_MAIN] = (dmConnAct_t *) dmConnActSetMain;
   195c2:	4a06      	ldr	r2, [pc, #24]	; (195dc <DmConnInit+0x20>)
  dmFcnIfTbl[DM_ID_CONN_2] = (dmFcnIf_t *) &dmConn2FcnIf;
   195c4:	4806      	ldr	r0, [pc, #24]	; (195e0 <DmConnInit+0x24>)
  dmConnActSet[DM_CONN_ACT_SET_MAIN] = (dmConnAct_t *) dmConnActSetMain;
   195c6:	4907      	ldr	r1, [pc, #28]	; (195e4 <DmConnInit+0x28>)
   195c8:	6011      	str	r1, [r2, #0]
  dmFcnIfTbl[DM_ID_CONN_2] = (dmFcnIf_t *) &dmConn2FcnIf;
   195ca:	e9c3 4003 	strd	r4, r0, [r3, #12]
}
   195ce:	f85d 4b04 	ldr.w	r4, [sp], #4
   195d2:	4770      	bx	lr
   195d4:	10002b80 	.word	0x10002b80
   195d8:	00020570 	.word	0x00020570
   195dc:	10005950 	.word	0x10005950
   195e0:	0002054c 	.word	0x0002054c
   195e4:	00020558 	.word	0x00020558

000195e8 <DmConnRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmConnRegister(uint8_t clientId, dmCback_t cback)
{
   195e8:	b538      	push	{r3, r4, r5, lr}
   195ea:	4604      	mov	r4, r0
   195ec:	460d      	mov	r5, r1
  WSF_ASSERT(clientId < DM_CLIENT_ID_MAX);

  /* store callback */
  WsfTaskLock();
  dmConnCb.connCback[clientId] = cback;
   195ee:	3424      	adds	r4, #36	; 0x24
  WsfTaskLock();
   195f0:	f7f6 f9ec 	bl	f9cc <WsfTaskLock>
  dmConnCb.connCback[clientId] = cback;
   195f4:	4b03      	ldr	r3, [pc, #12]	; (19604 <DmConnRegister+0x1c>)
   195f6:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
  WsfTaskUnlock();
}
   195fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WsfTaskUnlock();
   195fe:	f7f6 b9ef 	b.w	f9e0 <WsfTaskUnlock>
   19602:	bf00      	nop
   19604:	1000588c 	.word	0x1000588c

00019608 <DmConnIdByHandle>:
  dmConnCcb_t   *pCcb = dmConnCb.ccb;
  uint8_t       i;

  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
  {
    if (pCcb->inUse && (pCcb->handle == handle))
   19608:	4b0d      	ldr	r3, [pc, #52]	; (19640 <DmConnIdByHandle+0x38>)
   1960a:	7d9a      	ldrb	r2, [r3, #22]
   1960c:	b112      	cbz	r2, 19614 <DmConnIdByHandle+0xc>
   1960e:	899a      	ldrh	r2, [r3, #12]
   19610:	4282      	cmp	r2, r0
   19612:	d011      	beq.n	19638 <DmConnIdByHandle+0x30>
   19614:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
   19618:	b112      	cbz	r2, 19620 <DmConnIdByHandle+0x18>
   1961a:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
   1961c:	4282      	cmp	r2, r0
   1961e:	d00a      	beq.n	19636 <DmConnIdByHandle+0x2e>
   19620:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
   19624:	b12a      	cbz	r2, 19632 <DmConnIdByHandle+0x2a>
   19626:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
   1962a:	4283      	cmp	r3, r0
    }
  }

  // DM_TRACE_WARN1("DmConnIdByHandle not found 0x%04x", handle);

  return DM_CONN_ID_NONE;
   1962c:	bf18      	it	ne
   1962e:	2200      	movne	r2, #0
    if (pCcb->inUse && (pCcb->handle == handle))
   19630:	d004      	beq.n	1963c <DmConnIdByHandle+0x34>
}
   19632:	4610      	mov	r0, r2
   19634:	4770      	bx	lr
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   19636:	4b03      	ldr	r3, [pc, #12]	; (19644 <DmConnIdByHandle+0x3c>)
      return pCcb->connId;
   19638:	7c1a      	ldrb	r2, [r3, #16]
   1963a:	e7fa      	b.n	19632 <DmConnIdByHandle+0x2a>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   1963c:	4b02      	ldr	r3, [pc, #8]	; (19648 <DmConnIdByHandle+0x40>)
   1963e:	e7fb      	b.n	19638 <DmConnIdByHandle+0x30>
   19640:	1000588c 	.word	0x1000588c
   19644:	100058bc 	.word	0x100058bc
   19648:	100058ec 	.word	0x100058ec

0001964c <DmConnInUse>:
/*************************************************************************************************/
bool_t DmConnInUse(dmConnId_t connId)
{
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId-1].inUse;
   1964c:	4b03      	ldr	r3, [pc, #12]	; (1965c <DmConnInUse+0x10>)
   1964e:	3801      	subs	r0, #1
   19650:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   19654:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
   19658:	7d80      	ldrb	r0, [r0, #22]
   1965a:	4770      	bx	lr
   1965c:	1000588c 	.word	0x1000588c

00019660 <DmConnPeerAddrType>:
/*************************************************************************************************/
uint8_t DmConnPeerAddrType(dmConnId_t connId)
{
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId-1].peerAddrType;
   19660:	4b03      	ldr	r3, [pc, #12]	; (19670 <DmConnPeerAddrType+0x10>)
   19662:	3801      	subs	r0, #1
   19664:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   19668:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
   1966c:	7cc0      	ldrb	r0, [r0, #19]
   1966e:	4770      	bx	lr
   19670:	1000588c 	.word	0x1000588c

00019674 <DmConnPeerAddr>:
/*************************************************************************************************/
uint8_t *DmConnPeerAddr(dmConnId_t connId)
{
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId-1].peerAddr;
   19674:	4b03      	ldr	r3, [pc, #12]	; (19684 <DmConnPeerAddr+0x10>)
   19676:	3801      	subs	r0, #1
   19678:	eb00 0040 	add.w	r0, r0, r0, lsl #1
}
   1967c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   19680:	4770      	bx	lr
   19682:	bf00      	nop
   19684:	1000588c 	.word	0x1000588c

00019688 <DmConnLocalAddrType>:
/*************************************************************************************************/
uint8_t DmConnLocalAddrType(dmConnId_t connId)
{
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId-1].localAddrType;
   19688:	4b03      	ldr	r3, [pc, #12]	; (19698 <DmConnLocalAddrType+0x10>)
   1968a:	3801      	subs	r0, #1
   1968c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   19690:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
   19694:	7d00      	ldrb	r0, [r0, #20]
   19696:	4770      	bx	lr
   19698:	1000588c 	.word	0x1000588c

0001969c <DmConnLocalAddr>:
/*************************************************************************************************/
uint8_t *DmConnLocalAddr(dmConnId_t connId)
{
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId-1].localAddr;
   1969c:	4b03      	ldr	r3, [pc, #12]	; (196ac <DmConnLocalAddr+0x10>)
   1969e:	3801      	subs	r0, #1
   196a0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   196a4:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
   196a8:	3006      	adds	r0, #6
   196aa:	4770      	bx	lr
   196ac:	1000588c 	.word	0x1000588c

000196b0 <DmConnPeerRpa>:
/*************************************************************************************************/
uint8_t *DmConnPeerRpa(dmConnId_t connId)
{
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId - 1].peerRpa;
   196b0:	4b03      	ldr	r3, [pc, #12]	; (196c0 <DmConnPeerRpa+0x10>)
   196b2:	3801      	subs	r0, #1
   196b4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   196b8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
   196bc:	3020      	adds	r0, #32
   196be:	4770      	bx	lr
   196c0:	1000588c 	.word	0x1000588c

000196c4 <DmConnLocalRpa>:
/*************************************************************************************************/
uint8_t *DmConnLocalRpa(dmConnId_t connId)
{
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId - 1].localRpa;
   196c4:	4b03      	ldr	r3, [pc, #12]	; (196d4 <DmConnLocalRpa+0x10>)
   196c6:	3801      	subs	r0, #1
   196c8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   196cc:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
   196d0:	301a      	adds	r0, #26
   196d2:	4770      	bx	lr
   196d4:	1000588c 	.word	0x1000588c

000196d8 <DmConnSecLevel>:
/*************************************************************************************************/
uint8_t DmConnSecLevel(dmConnId_t connId)
{
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId-1].secLevel;
   196d8:	4b03      	ldr	r3, [pc, #12]	; (196e8 <DmConnSecLevel+0x10>)
   196da:	3801      	subs	r0, #1
   196dc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   196e0:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
   196e4:	7dc0      	ldrb	r0, [r0, #23]
   196e6:	4770      	bx	lr
   196e8:	1000588c 	.word	0x1000588c

000196ec <DmConnSetIdle>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmConnSetIdle(dmConnId_t connId, uint16_t idleMask, uint8_t idle)
{
   196ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return dmConnCb.ccb[connId-1].inUse;
   196f0:	1e46      	subs	r6, r0, #1
   196f2:	4d13      	ldr	r5, [pc, #76]	; (19740 <DmConnSetIdle+0x54>)
{
   196f4:	4691      	mov	r9, r2
   196f6:	4604      	mov	r4, r0
   196f8:	4688      	mov	r8, r1
  WsfTaskLock();
   196fa:	f7f6 f967 	bl	f9cc <WsfTaskLock>
  return dmConnCb.ccb[connId-1].inUse;
   196fe:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   19702:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   19706:	0077      	lsls	r7, r6, #1

  if (DmConnInUse(connId))
   19708:	7d9a      	ldrb	r2, [r3, #22]
   1970a:	b13a      	cbz	r2, 1971c <DmConnSetIdle+0x30>
  {
    if (idle == DM_CONN_IDLE)
    {
      /* clear bit if idle */
      dmConnCb.ccb[connId-1].idleMask &= ~idleMask;
   1970c:	89d9      	ldrh	r1, [r3, #14]
    if (idle == DM_CONN_IDLE)
   1970e:	f1b9 0f00 	cmp.w	r9, #0
   19712:	d10f      	bne.n	19734 <DmConnSetIdle+0x48>
      dmConnCb.ccb[connId-1].idleMask &= ~idleMask;
   19714:	ea21 0808 	bic.w	r8, r1, r8
   19718:	f8a3 800e 	strh.w	r8, [r3, #14]
    }
  }

  WsfTaskUnlock();

  DM_TRACE_INFO2("connId=%d idleMask=0x%04x", connId, dmConnCb.ccb[connId-1].idleMask);
   1971c:	443e      	add	r6, r7
   1971e:	eb05 1506 	add.w	r5, r5, r6, lsl #4
  WsfTaskUnlock();
   19722:	f7f6 f95d 	bl	f9e0 <WsfTaskUnlock>
  DM_TRACE_INFO2("connId=%d idleMask=0x%04x", connId, dmConnCb.ccb[connId-1].idleMask);
   19726:	89ea      	ldrh	r2, [r5, #14]
   19728:	4806      	ldr	r0, [pc, #24]	; (19744 <DmConnSetIdle+0x58>)
   1972a:	4621      	mov	r1, r4
}
   1972c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  DM_TRACE_INFO2("connId=%d idleMask=0x%04x", connId, dmConnCb.ccb[connId-1].idleMask);
   19730:	f7f6 bc8a 	b.w	10048 <WsfTrace>
      dmConnCb.ccb[connId-1].idleMask |= idleMask;
   19734:	ea48 0801 	orr.w	r8, r8, r1
   19738:	f8a3 800e 	strh.w	r8, [r3, #14]
   1973c:	e7ee      	b.n	1971c <DmConnSetIdle+0x30>
   1973e:	bf00      	nop
   19740:	1000588c 	.word	0x1000588c
   19744:	00020530 	.word	0x00020530

00019748 <DmConnCheckIdle>:
 *
 *  \return Zero if connection is idle, nonzero if busy.
 */
/*************************************************************************************************/
uint16_t DmConnCheckIdle(dmConnId_t connId)
{
   19748:	b510      	push	{r4, lr}
   1974a:	4604      	mov	r4, r0
   1974c:	b082      	sub	sp, #8
  uint16_t idleMask;

  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  WsfTaskLock();
   1974e:	f7f6 f93d 	bl	f9cc <WsfTaskLock>
  idleMask = dmConnCb.ccb[connId-1].idleMask;
   19752:	4b06      	ldr	r3, [pc, #24]	; (1976c <DmConnCheckIdle+0x24>)
   19754:	1e60      	subs	r0, r4, #1
   19756:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1975a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   1975e:	89c0      	ldrh	r0, [r0, #14]
   19760:	9001      	str	r0, [sp, #4]
  WsfTaskUnlock();
   19762:	f7f6 f93d 	bl	f9e0 <WsfTaskUnlock>

  return idleMask;
}
   19766:	9801      	ldr	r0, [sp, #4]
   19768:	b002      	add	sp, #8
   1976a:	bd10      	pop	{r4, pc}
   1976c:	1000588c 	.word	0x1000588c

00019770 <DmConnRole>:
/*************************************************************************************************/
uint8_t DmConnRole(dmConnId_t connId)
{
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId-1].role;
   19770:	4b03      	ldr	r3, [pc, #12]	; (19780 <DmConnRole+0x10>)
   19772:	3801      	subs	r0, #1
   19774:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   19778:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
   1977c:	7e40      	ldrb	r0, [r0, #25]
   1977e:	4770      	bx	lr
   19780:	1000588c 	.word	0x1000588c

00019784 <dmConnSmActUpdateSlave>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActUpdateSlave(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   19784:	b530      	push	{r4, r5, lr}
  if ((pCcb->features & HCI_LE_SUP_FEAT_CONN_PARAM_REQ_PROC) &&
   19786:	6a83      	ldr	r3, [r0, #40]	; 0x28
   19788:	079a      	lsls	r2, r3, #30
{
   1978a:	b085      	sub	sp, #20
   1978c:	4604      	mov	r4, r0
   1978e:	460d      	mov	r5, r1
  if ((pCcb->features & HCI_LE_SUP_FEAT_CONN_PARAM_REQ_PROC) &&
   19790:	d415      	bmi.n	197be <dmConnSmActUpdateSlave+0x3a>
      (HciGetLeSupFeat() & HCI_LE_SUP_FEAT_CONN_PARAM_REQ_PROC))
  {
    HciLeConnUpdateCmd(pCcb->handle, &pMsg->apiUpdate.connSpec);
  }
  /* else if L2CAP connection update not already in progress */
  else if (!pCcb->updating)
   19792:	7c63      	ldrb	r3, [r4, #17]
   19794:	b1f3      	cbz	r3, 197d4 <dmConnSmActUpdateSlave+0x50>
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   19796:	4b14      	ldr	r3, [pc, #80]	; (197e8 <dmConnSmActUpdateSlave+0x64>)
  evt.hdr.param = pCcb->connId;
   19798:	7c25      	ldrb	r5, [r4, #16]
  evt.handle = pCcb->handle;
   1979a:	89a2      	ldrh	r2, [r4, #12]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   1979c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
  evt.hdr.param = pCcb->connId;
   197a0:	f8ad 5000 	strh.w	r5, [sp]
  evt.status = evt.hdr.status = status;
   197a4:	210c      	movs	r1, #12
  evt.hdr.event = DM_CONN_UPDATE_IND;
   197a6:	f640 4029 	movw	r0, #3113	; 0xc29
   197aa:	f8ad 0002 	strh.w	r0, [sp, #2]
  evt.status = evt.hdr.status = status;
   197ae:	f88d 1004 	strb.w	r1, [sp, #4]
  evt.handle = pCcb->handle;
   197b2:	f8ad 2006 	strh.w	r2, [sp, #6]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   197b6:	4668      	mov	r0, sp
   197b8:	4798      	blx	r3
  else
  {
    /* call callback */
    dmConnUpdateCback(pCcb, (uint8_t) HCI_ERR_CMD_DISALLOWED);
  }
}
   197ba:	b005      	add	sp, #20
   197bc:	bd30      	pop	{r4, r5, pc}
      (HciGetLeSupFeat() & HCI_LE_SUP_FEAT_CONN_PARAM_REQ_PROC))
   197be:	f7f4 fe77 	bl	e4b0 <HciGetLeSupFeat>
  if ((pCcb->features & HCI_LE_SUP_FEAT_CONN_PARAM_REQ_PROC) &&
   197c2:	0783      	lsls	r3, r0, #30
   197c4:	d5e5      	bpl.n	19792 <dmConnSmActUpdateSlave+0xe>
    HciLeConnUpdateCmd(pCcb->handle, &pMsg->apiUpdate.connSpec);
   197c6:	89a0      	ldrh	r0, [r4, #12]
   197c8:	1d29      	adds	r1, r5, #4
}
   197ca:	b005      	add	sp, #20
   197cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HciLeConnUpdateCmd(pCcb->handle, &pMsg->apiUpdate.connSpec);
   197d0:	f7f3 ba7a 	b.w	ccc8 <HciLeConnUpdateCmd>
    L2cDmConnUpdateReq(pCcb->handle, &pMsg->apiUpdate.connSpec);
   197d4:	89a0      	ldrh	r0, [r4, #12]
    pCcb->updating = TRUE;
   197d6:	2301      	movs	r3, #1
    L2cDmConnUpdateReq(pCcb->handle, &pMsg->apiUpdate.connSpec);
   197d8:	1d29      	adds	r1, r5, #4
    pCcb->updating = TRUE;
   197da:	7463      	strb	r3, [r4, #17]
}
   197dc:	b005      	add	sp, #20
   197de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    L2cDmConnUpdateReq(pCcb->handle, &pMsg->apiUpdate.connSpec);
   197e2:	f7fa b82d 	b.w	13840 <L2cDmConnUpdateReq>
   197e6:	bf00      	nop
   197e8:	1000588c 	.word	0x1000588c

000197ec <dmConnSmActL2cUpdateCnf>:
 */
/*************************************************************************************************/
void dmConnSmActL2cUpdateCnf(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
  /* if connection update in progress */
  if (pCcb->updating)
   197ec:	7c43      	ldrb	r3, [r0, #17]
   197ee:	b1e3      	cbz	r3, 1982a <dmConnSmActL2cUpdateCnf+0x3e>
  {
    pCcb->updating = FALSE;
   197f0:	2300      	movs	r3, #0
   197f2:	7443      	strb	r3, [r0, #17]

    /* if reason indicates failure */
    if (pMsg->l2cUpdateCnf.result != L2C_CONN_PARAM_ACCEPTED)
   197f4:	888b      	ldrh	r3, [r1, #4]
   197f6:	b1c3      	cbz	r3, 1982a <dmConnSmActL2cUpdateCnf+0x3e>
{
   197f8:	b500      	push	{lr}
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   197fa:	4a0c      	ldr	r2, [pc, #48]	; (1982c <dmConnSmActL2cUpdateCnf+0x40>)
  evt.hdr.param = pCcb->connId;
   197fc:	f890 c010 	ldrb.w	ip, [r0, #16]
  evt.handle = pCcb->handle;
   19800:	8981      	ldrh	r1, [r0, #12]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   19802:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
{
   19806:	b085      	sub	sp, #20
    {
      /* call callback */
      dmConnUpdateCback(pCcb, (uint8_t) pMsg->l2cUpdateCnf.result);
   19808:	b2db      	uxtb	r3, r3
  evt.hdr.event = DM_CONN_UPDATE_IND;
   1980a:	2029      	movs	r0, #41	; 0x29
   1980c:	f88d 0002 	strb.w	r0, [sp, #2]
  evt.hdr.param = pCcb->connId;
   19810:	f8ad c000 	strh.w	ip, [sp]
  evt.status = evt.hdr.status = status;
   19814:	f88d 3003 	strb.w	r3, [sp, #3]
   19818:	f88d 3004 	strb.w	r3, [sp, #4]
  evt.handle = pCcb->handle;
   1981c:	f8ad 1006 	strh.w	r1, [sp, #6]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   19820:	4668      	mov	r0, sp
   19822:	4790      	blx	r2
    }
  }
}
   19824:	b005      	add	sp, #20
   19826:	f85d fb04 	ldr.w	pc, [sp], #4
   1982a:	4770      	bx	lr
   1982c:	1000588c 	.word	0x1000588c

00019830 <DmL2cConnUpdateCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmL2cConnUpdateCnf(uint16_t handle, uint16_t result)
{
   19830:	b510      	push	{r4, lr}
   19832:	b082      	sub	sp, #8
   19834:	460c      	mov	r4, r1
  dmConnL2cUpdateCnf_t  updateCnf;
  dmConnCcb_t           *pCcb;

  if ((pCcb = dmConnCcbByHandle(handle)) != NULL)
   19836:	f7ff fe8b 	bl	19550 <dmConnCcbByHandle>
   1983a:	b138      	cbz	r0, 1984c <DmL2cConnUpdateCnf+0x1c>
  {
    updateCnf.hdr.event = DM_CONN_MSG_L2C_UPDATE_CNF;
   1983c:	2336      	movs	r3, #54	; 0x36
    updateCnf.result = result;

    dmConnSmExecute(pCcb, (dmConnMsg_t *) &updateCnf);
   1983e:	4669      	mov	r1, sp
    updateCnf.hdr.event = DM_CONN_MSG_L2C_UPDATE_CNF;
   19840:	f88d 3002 	strb.w	r3, [sp, #2]
    updateCnf.result = result;
   19844:	f8ad 4004 	strh.w	r4, [sp, #4]
    dmConnSmExecute(pCcb, (dmConnMsg_t *) &updateCnf);
   19848:	f000 f850 	bl	198ec <dmConnSmExecute>
  }
}
   1984c:	b002      	add	sp, #8
   1984e:	bd10      	pop	{r4, pc}

00019850 <DmL2cCmdRejInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmL2cCmdRejInd(uint16_t handle, uint16_t result)
{
   19850:	b500      	push	{lr}
  /* call callback */
  evt.hdr.event = DM_L2C_CMD_REJ_IND;
  evt.hdr.status = HCI_SUCCESS;
  evt.reason = result;
  evt.handle = handle;
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *)&evt);
   19852:	4b08      	ldr	r3, [pc, #32]	; (19874 <DmL2cCmdRejInd+0x24>)
{
   19854:	b083      	sub	sp, #12
  evt.hdr.event = DM_L2C_CMD_REJ_IND;
   19856:	2264      	movs	r2, #100	; 0x64
  evt.handle = handle;
   19858:	f8ad 0006 	strh.w	r0, [sp, #6]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *)&evt);
   1985c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
  evt.hdr.event = DM_L2C_CMD_REJ_IND;
   19860:	f8ad 2002 	strh.w	r2, [sp, #2]
  evt.reason = result;
   19864:	f8ad 1004 	strh.w	r1, [sp, #4]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *)&evt);
   19868:	4668      	mov	r0, sp
   1986a:	4798      	blx	r3
}
   1986c:	b003      	add	sp, #12
   1986e:	f85d fb04 	ldr.w	pc, [sp], #4
   19872:	bf00      	nop
   19874:	1000588c 	.word	0x1000588c

00019878 <dmConnSmActAccept>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActAccept(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   19878:	4608      	mov	r0, r1
  dmAdvStartDirected(pMsg->apiOpen.advType, pMsg->apiOpen.duration, pMsg->apiOpen.addrType,
   1987a:	7c4a      	ldrb	r2, [r1, #17]
   1987c:	7980      	ldrb	r0, [r0, #6]
   1987e:	f101 030b 	add.w	r3, r1, #11
   19882:	8909      	ldrh	r1, [r1, #8]
   19884:	f7ff ba84 	b.w	18d90 <dmAdvStartDirected>

00019888 <dmConnSmActCancelAccept>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActCancelAccept(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   19888:	b500      	push	{lr}
   1988a:	b083      	sub	sp, #12
   1988c:	e9cd 1000 	strd	r1, r0, [sp]
  dmAdvStopDirected();
   19890:	f7ff faa4 	bl	18ddc <dmAdvStopDirected>

  dmConnSmActConnFailed(pCcb, pMsg);
   19894:	e9dd 1000 	ldrd	r1, r0, [sp]
}
   19898:	b003      	add	sp, #12
   1989a:	f85d eb04 	ldr.w	lr, [sp], #4
  dmConnSmActConnFailed(pCcb, pMsg);
   1989e:	f7ff bb13 	b.w	18ec8 <dmConnSmActConnFailed>
   198a2:	bf00      	nop

000198a4 <dmConnSmActConnAccepted>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActConnAccepted(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   198a4:	b500      	push	{lr}
   198a6:	b083      	sub	sp, #12
   198a8:	e9cd 1000 	strd	r1, r0, [sp]
  dmAdvConnected();
   198ac:	f7ff fab4 	bl	18e18 <dmAdvConnected>

  dmConnSmActConnOpened(pCcb, pMsg);
   198b0:	e9dd 1000 	ldrd	r1, r0, [sp]
}
   198b4:	b003      	add	sp, #12
   198b6:	f85d eb04 	ldr.w	lr, [sp], #4
  dmConnSmActConnOpened(pCcb, pMsg);
   198ba:	f7ff bb3d 	b.w	18f38 <dmConnSmActConnOpened>
   198be:	bf00      	nop

000198c0 <dmConnSmActAcceptFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActAcceptFailed(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   198c0:	b500      	push	{lr}
   198c2:	b083      	sub	sp, #12
   198c4:	e9cd 1000 	strd	r1, r0, [sp]
  dmAdvConnectFailed();
   198c8:	f7ff fabe 	bl	18e48 <dmAdvConnectFailed>

  dmConnSmActConnFailed(pCcb, pMsg);
   198cc:	e9dd 1000 	ldrd	r1, r0, [sp]
}
   198d0:	b003      	add	sp, #12
   198d2:	f85d eb04 	ldr.w	lr, [sp], #4
  dmConnSmActConnFailed(pCcb, pMsg);
   198d6:	f7ff baf7 	b.w	18ec8 <dmConnSmActConnFailed>
   198da:	bf00      	nop

000198dc <DmConnSlaveInit>:
 *  \return None.
 */
/*************************************************************************************************/
void DmConnSlaveInit(void)
{
  dmConnActSet[DM_CONN_ACT_SET_SLAVE] = (dmConnAct_t *) dmConnActSetSlave;
   198dc:	4b01      	ldr	r3, [pc, #4]	; (198e4 <DmConnSlaveInit+0x8>)
   198de:	4a02      	ldr	r2, [pc, #8]	; (198e8 <DmConnSlaveInit+0xc>)
   198e0:	609a      	str	r2, [r3, #8]
}
   198e2:	4770      	bx	lr
   198e4:	10005950 	.word	0x10005950
   198e8:	00020588 	.word	0x00020588

000198ec <dmConnSmExecute>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmExecute(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   198ec:	b570      	push	{r4, r5, r6, lr}
   198ee:	4604      	mov	r4, r0
  dmConnAct_t       *actSet;
  uint8_t           action;
  uint8_t           event;

  DM_TRACE_INFO2("dmConnSmExecute event=%d state=%d", pMsg->hdr.event, pCcb->state);
   198f0:	7d42      	ldrb	r2, [r0, #21]
   198f2:	4814      	ldr	r0, [pc, #80]	; (19944 <dmConnSmExecute+0x58>)
{
   198f4:	460d      	mov	r5, r1
  DM_TRACE_INFO2("dmConnSmExecute event=%d state=%d", pMsg->hdr.event, pCcb->state);
   198f6:	7889      	ldrb	r1, [r1, #2]
   198f8:	f7f6 fba6 	bl	10048 <WsfTrace>

  /* get the event */
  event = DM_MSG_MASK(pMsg->hdr.event);

  /* get action */
  action = dmConnStateTbl[pCcb->state][event][DM_CONN_ACTION];
   198fc:	7d63      	ldrb	r3, [r4, #21]
  event = DM_MSG_MASK(pMsg->hdr.event);
   198fe:	78aa      	ldrb	r2, [r5, #2]
  action = dmConnStateTbl[pCcb->state][event][DM_CONN_ACTION];
   19900:	4911      	ldr	r1, [pc, #68]	; (19948 <dmConnSmExecute+0x5c>)
   19902:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   19906:	f002 020f 	and.w	r2, r2, #15
   1990a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   1990e:	4413      	add	r3, r2
   19910:	eb01 0243 	add.w	r2, r1, r3, lsl #1

  /* set next state */
  pCcb->state = dmConnStateTbl[pCcb->state][event][DM_CONN_NEXT_STATE];
   19914:	f811 1013 	ldrb.w	r1, [r1, r3, lsl #1]
  action = dmConnStateTbl[pCcb->state][event][DM_CONN_ACTION];
   19918:	7853      	ldrb	r3, [r2, #1]
  pCcb->state = dmConnStateTbl[pCcb->state][event][DM_CONN_NEXT_STATE];
   1991a:	7561      	strb	r1, [r4, #21]

  /* look up action set */
  actSet = dmConnActSet[DM_CONN_ACT_SET_ID(action)];
   1991c:	4a0b      	ldr	r2, [pc, #44]	; (1994c <dmConnSmExecute+0x60>)
   1991e:	0919      	lsrs	r1, r3, #4
   19920:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]

  /* if action set present */
  if (actSet != NULL)
   19924:	b142      	cbz	r2, 19938 <dmConnSmExecute+0x4c>
  {
    /* execute action function in action set */
    (*actSet[DM_CONN_ACT_ID(action)])(pCcb, pMsg);
   19926:	f003 030f 	and.w	r3, r3, #15
   1992a:	4629      	mov	r1, r5
   1992c:	4620      	mov	r0, r4
   1992e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  else
  {
     /* no action */
     dmConnSmActNone(pCcb, pMsg);
  }
}
   19932:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    (*actSet[DM_CONN_ACT_ID(action)])(pCcb, pMsg);
   19936:	4718      	bx	r3
     dmConnSmActNone(pCcb, pMsg);
   19938:	4629      	mov	r1, r5
   1993a:	4620      	mov	r0, r4
}
   1993c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     dmConnSmActNone(pCcb, pMsg);
   19940:	f7ff bab2 	b.w	18ea8 <dmConnSmActNone>
   19944:	000205a0 	.word	0x000205a0
   19948:	000205c4 	.word	0x000205c4
   1994c:	10005950 	.word	0x10005950

00019950 <dmDevHciHandler>:
 *  \return None.
 */
/*************************************************************************************************/
void dmDevHciHandler(hciEvt_t *pEvent)
{
  switch (pEvent->hdr.event)
   19950:	7883      	ldrb	r3, [r0, #2]
   19952:	2b13      	cmp	r3, #19
   19954:	d80a      	bhi.n	1996c <dmDevHciHandler+0x1c>
   19956:	2b11      	cmp	r3, #17
   19958:	d811      	bhi.n	1997e <dmDevHciHandler+0x2e>
   1995a:	b973      	cbnz	r3, 1997a <dmDevHciHandler+0x2a>
  dmCb.resetting = FALSE;
   1995c:	490a      	ldr	r1, [pc, #40]	; (19988 <dmDevHciHandler+0x38>)
  pEvent->hdr.event = DM_RESET_CMPL_IND;
   1995e:	f04f 0c20 	mov.w	ip, #32
  dmCb.resetting = FALSE;
   19962:	740b      	strb	r3, [r1, #16]
  (*dmCb.cback)((dmEvt_t *) pEvent);
   19964:	688b      	ldr	r3, [r1, #8]
  pEvent->hdr.event = DM_RESET_CMPL_IND;
   19966:	f880 c002 	strb.w	ip, [r0, #2]
  (*dmCb.cback)((dmEvt_t *) pEvent);
   1996a:	4718      	bx	r3
  switch (pEvent->hdr.event)
   1996c:	2b14      	cmp	r3, #20
   1996e:	d105      	bne.n	1997c <dmDevHciHandler+0x2c>
  (*dmCb.cback)((dmEvt_t *) pEvent);
   19970:	4b05      	ldr	r3, [pc, #20]	; (19988 <dmDevHciHandler+0x38>)
  pEvent->hdr.event = DM_HW_ERROR_IND;
   19972:	2166      	movs	r1, #102	; 0x66
  (*dmCb.cback)((dmEvt_t *) pEvent);
   19974:	689b      	ldr	r3, [r3, #8]
  pEvent->hdr.event = DM_HW_ERROR_IND;
   19976:	7081      	strb	r1, [r0, #2]
  (*dmCb.cback)((dmEvt_t *) pEvent);
   19978:	4718      	bx	r3
   1997a:	4770      	bx	lr
   1997c:	4770      	bx	lr
  (*dmCb.cback)((dmEvt_t *) pEvent);
   1997e:	4b02      	ldr	r3, [pc, #8]	; (19988 <dmDevHciHandler+0x38>)
  pEvent->hdr.event = DM_VENDOR_SPEC_IND;
   19980:	2167      	movs	r1, #103	; 0x67
  (*dmCb.cback)((dmEvt_t *) pEvent);
   19982:	689b      	ldr	r3, [r3, #8]
  pEvent->hdr.event = DM_VENDOR_SPEC_IND;
   19984:	7081      	strb	r1, [r0, #2]
  (*dmCb.cback)((dmEvt_t *) pEvent);
   19986:	4718      	bx	r3
   19988:	10005960 	.word	0x10005960

0001998c <dmDevMsgHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmDevMsgHandler(wsfMsgHdr_t *pMsg)
{
   1998c:	b538      	push	{r3, r4, r5, lr}
  if (!dmCb.resetting)
   1998e:	4b09      	ldr	r3, [pc, #36]	; (199b4 <dmDevMsgHandler+0x28>)
   19990:	7c1a      	ldrb	r2, [r3, #16]
   19992:	b972      	cbnz	r2, 199b2 <dmDevMsgHandler+0x26>
    dmCb.resetting = TRUE;
   19994:	4c08      	ldr	r4, [pc, #32]	; (199b8 <dmDevMsgHandler+0x2c>)
   19996:	2201      	movs	r2, #1
   19998:	741a      	strb	r2, [r3, #16]
    for (i = 0; i < DM_NUM_IDS; i++)
   1999a:	f104 0538 	add.w	r5, r4, #56	; 0x38
      (*(dmFcnIfTbl[i]->reset))();
   1999e:	f854 3f04 	ldr.w	r3, [r4, #4]!
   199a2:	681b      	ldr	r3, [r3, #0]
   199a4:	4798      	blx	r3
    for (i = 0; i < DM_NUM_IDS; i++)
   199a6:	42ac      	cmp	r4, r5
   199a8:	d1f9      	bne.n	1999e <dmDevMsgHandler+0x12>
  /* execute action function */
  (*dmDevAct[DM_MSG_MASK(pMsg->event)])(pMsg);
}
   199aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HciResetSequence();
   199ae:	f7f4 bc41 	b.w	e234 <HciResetSequence>
}
   199b2:	bd38      	pop	{r3, r4, r5, pc}
   199b4:	10005960 	.word	0x10005960
   199b8:	10002b7c 	.word	0x10002b7c

000199bc <dmDevPassEvtToDevPriv>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmDevPassEvtToDevPriv(uint8_t event, uint8_t param, uint8_t advHandle, bool_t connectable)
{
   199bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   199be:	4606      	mov	r6, r0
   199c0:	b083      	sub	sp, #12
   199c2:	460d      	mov	r5, r1
   199c4:	4614      	mov	r4, r2
   199c6:	461f      	mov	r7, r3
  dmDevPrivMsg_t evt;

  DM_TRACE_INFO3("dmDevPassEvtToDevPriv: event: %d, param: %d, advHandle: %d", event, param, advHandle);
   199c8:	480a      	ldr	r0, [pc, #40]	; (199f4 <dmDevPassEvtToDevPriv+0x38>)
   199ca:	4613      	mov	r3, r2
   199cc:	460a      	mov	r2, r1
   199ce:	4631      	mov	r1, r6
   199d0:	f7f6 fb3a 	bl	10048 <WsfTrace>
  evt.hdr.param = param;
  evt.privCtrl.advHandle = advHandle;
  evt.privCtrl.connectable = connectable;

  /* pass event to device privacy */
  (*(dmFcnIfTbl[DM_ID_DEV_PRIV]->msgHandler))((wsfMsgHdr_t *) &evt);
   199d4:	4b08      	ldr	r3, [pc, #32]	; (199f8 <dmDevPassEvtToDevPriv+0x3c>)
  evt.hdr.event = event;
   199d6:	f88d 6002 	strb.w	r6, [sp, #2]
  (*(dmFcnIfTbl[DM_ID_DEV_PRIV]->msgHandler))((wsfMsgHdr_t *) &evt);
   199da:	685b      	ldr	r3, [r3, #4]
  evt.hdr.param = param;
   199dc:	f8ad 5000 	strh.w	r5, [sp]
  (*(dmFcnIfTbl[DM_ID_DEV_PRIV]->msgHandler))((wsfMsgHdr_t *) &evt);
   199e0:	689b      	ldr	r3, [r3, #8]
  evt.privCtrl.advHandle = advHandle;
   199e2:	f88d 4004 	strb.w	r4, [sp, #4]
  evt.privCtrl.connectable = connectable;
   199e6:	f88d 7005 	strb.w	r7, [sp, #5]
  (*(dmFcnIfTbl[DM_ID_DEV_PRIV]->msgHandler))((wsfMsgHdr_t *) &evt);
   199ea:	4668      	mov	r0, sp
   199ec:	4798      	blx	r3
}
   199ee:	b003      	add	sp, #12
   199f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   199f2:	bf00      	nop
   199f4:	00020648 	.word	0x00020648
   199f8:	10002b80 	.word	0x10002b80

000199fc <dmDevPassEvtToConnCte>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmDevPassEvtToConnCte(uint8_t state, dmConnId_t connId)
{
   199fc:	b500      	push	{lr}
  evt.event = DM_CONN_CTE_MSG_STATE;
  evt.status = state;
  evt.param = connId;

  /* pass event to Connection CTE */
  (*(dmFcnIfTbl[DM_ID_CONN_CTE]->msgHandler))(&evt);
   199fe:	4b08      	ldr	r3, [pc, #32]	; (19a20 <dmDevPassEvtToConnCte+0x24>)
{
   19a00:	b083      	sub	sp, #12
  (*(dmFcnIfTbl[DM_ID_CONN_CTE]->msgHandler))(&evt);
   19a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  evt.status = state;
   19a04:	f88d 0007 	strb.w	r0, [sp, #7]
  evt.event = DM_CONN_CTE_MSG_STATE;
   19a08:	22d7      	movs	r2, #215	; 0xd7
  (*(dmFcnIfTbl[DM_ID_CONN_CTE]->msgHandler))(&evt);
   19a0a:	689b      	ldr	r3, [r3, #8]
  evt.event = DM_CONN_CTE_MSG_STATE;
   19a0c:	f88d 2006 	strb.w	r2, [sp, #6]
  evt.param = connId;
   19a10:	f8ad 1004 	strh.w	r1, [sp, #4]
  (*(dmFcnIfTbl[DM_ID_CONN_CTE]->msgHandler))(&evt);
   19a14:	a801      	add	r0, sp, #4
   19a16:	4798      	blx	r3
}
   19a18:	b003      	add	sp, #12
   19a1a:	f85d fb04 	ldr.w	pc, [sp], #4
   19a1e:	bf00      	nop
   19a20:	10002b80 	.word	0x10002b80

00019a24 <DmDevReset>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmDevReset(void)
{
   19a24:	b508      	push	{r3, lr}
  wsfMsgHdr_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(wsfMsgHdr_t))) != NULL)
   19a26:	2004      	movs	r0, #4
   19a28:	f7f5 ff8e 	bl	f948 <WsfMsgAlloc>
   19a2c:	b140      	cbz	r0, 19a40 <DmDevReset+0x1c>
  {
    pMsg->event = DM_DEV_MSG_API_RESET;

    WsfMsgSend(dmCb.handlerId, pMsg);
   19a2e:	4b05      	ldr	r3, [pc, #20]	; (19a44 <DmDevReset+0x20>)
    pMsg->event = DM_DEV_MSG_API_RESET;
   19a30:	2270      	movs	r2, #112	; 0x70
   19a32:	7082      	strb	r2, [r0, #2]
    WsfMsgSend(dmCb.handlerId, pMsg);
   19a34:	4601      	mov	r1, r0
   19a36:	7b18      	ldrb	r0, [r3, #12]
  }
}
   19a38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
   19a3c:	f7f5 bf90 	b.w	f960 <WsfMsgSend>
}
   19a40:	bd08      	pop	{r3, pc}
   19a42:	bf00      	nop
   19a44:	10005960 	.word	0x10005960

00019a48 <DmDevVsInit>:
 *  \return None.
 */
/*************************************************************************************************/
void DmDevVsInit(uint8_t param)
{
  HciVsInit(param);
   19a48:	f7f3 b8c6 	b.w	cbd8 <HciVsInit>

00019a4c <dmHciEvtCback>:
static void dmHciEvtCback(hciEvt_t *pEvent)
{
  WSF_ASSERT(pEvent->hdr.event <= HCI_LE_CONNLESS_IQ_REPORT_CBACK_EVT);

  /* if DM not resetting or resetting but incoming event is HCI reset sequence complete event */
  if (!dmCb.resetting || (pEvent->hdr.event == HCI_RESET_SEQ_CMPL_CBACK_EVT))
   19a4c:	4b07      	ldr	r3, [pc, #28]	; (19a6c <dmHciEvtCback+0x20>)
   19a4e:	7c1b      	ldrb	r3, [r3, #16]
   19a50:	b93b      	cbnz	r3, 19a62 <dmHciEvtCback+0x16>
   19a52:	7883      	ldrb	r3, [r0, #2]
  {
    /* route event to DM component handling function */
    (*(dmFcnIfTbl[dmHciToIdTbl[pEvent->hdr.event]]->hciHandler))(pEvent);
   19a54:	4906      	ldr	r1, [pc, #24]	; (19a70 <dmHciEvtCback+0x24>)
   19a56:	4a07      	ldr	r2, [pc, #28]	; (19a74 <dmHciEvtCback+0x28>)
   19a58:	5ccb      	ldrb	r3, [r1, r3]
   19a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   19a5e:	685b      	ldr	r3, [r3, #4]
   19a60:	4718      	bx	r3
  if (!dmCb.resetting || (pEvent->hdr.event == HCI_RESET_SEQ_CMPL_CBACK_EVT))
   19a62:	7883      	ldrb	r3, [r0, #2]
   19a64:	2b00      	cmp	r3, #0
   19a66:	d0f5      	beq.n	19a54 <dmHciEvtCback+0x8>
  }
}
   19a68:	4770      	bx	lr
   19a6a:	bf00      	nop
   19a6c:	10005960 	.word	0x10005960
   19a70:	0002069c 	.word	0x0002069c
   19a74:	10002b80 	.word	0x10002b80

00019a78 <dmEmptyReset>:
 */
/*************************************************************************************************/
void dmEmptyReset(void)
{
  /* empty */
}
   19a78:	4770      	bx	lr
   19a7a:	bf00      	nop

00019a7c <dmEmptyHandler>:
 */
/*************************************************************************************************/
void dmEmptyHandler(wsfMsgHdr_t *pMsg)
{
  return;
}
   19a7c:	4770      	bx	lr
   19a7e:	bf00      	nop

00019a80 <dmDevPassHciEvtToConn>:
 */
/*************************************************************************************************/
void dmDevPassHciEvtToConn(hciEvt_t *pEvent)
{
  /* pass event to DM connection management module */
  (*(dmFcnIfTbl[DM_ID_CONN]->hciHandler))(pEvent);
   19a80:	4b01      	ldr	r3, [pc, #4]	; (19a88 <dmDevPassHciEvtToConn+0x8>)
   19a82:	68db      	ldr	r3, [r3, #12]
   19a84:	685b      	ldr	r3, [r3, #4]
   19a86:	4718      	bx	r3
   19a88:	10002b80 	.word	0x10002b80

00019a8c <DmRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmRegister(dmCback_t cback)
{
   19a8c:	b510      	push	{r4, lr}
  dmCb.cback = cback;

  /* if LESC is enabled */
  if (dmFcnIfTbl[DM_ID_LESC] != &dmFcnDefault)
   19a8e:	4a09      	ldr	r2, [pc, #36]	; (19ab4 <DmRegister+0x28>)
   19a90:	4b09      	ldr	r3, [pc, #36]	; (19ab8 <DmRegister+0x2c>)
   19a92:	6a12      	ldr	r2, [r2, #32]
  dmCb.cback = cback;
   19a94:	4c09      	ldr	r4, [pc, #36]	; (19abc <DmRegister+0x30>)
  if (dmFcnIfTbl[DM_ID_LESC] != &dmFcnDefault)
   19a96:	429a      	cmp	r2, r3
{
   19a98:	b09a      	sub	sp, #104	; 0x68
  dmCb.cback = cback;
   19a9a:	60a0      	str	r0, [r4, #8]
  if (dmFcnIfTbl[DM_ID_LESC] != &dmFcnDefault)
   19a9c:	d008      	beq.n	19ab0 <DmRegister+0x24>
  {
    /* if largest LESC key length is larger than maximum RX PDU length */
    if (SMP_PUB_KEY_MSG_LEN > (HciGetMaxRxAclLen() - L2C_HDR_LEN))
   19a9e:	f7f4 fd0f 	bl	e4c0 <HciGetMaxRxAclLen>
   19aa2:	2844      	cmp	r0, #68	; 0x44
   19aa4:	d804      	bhi.n	19ab0 <DmRegister+0x24>
    {
      dmEvt_t evt;

      evt.hdr.param = 0;
   19aa6:	4a06      	ldr	r2, [pc, #24]	; (19ac0 <DmRegister+0x34>)
      evt.hdr.event = DM_ERROR_IND;
      evt.hdr.status = DM_ERR_SMP_RX_PDU_LEN_EXCEEDED;

      (*dmCb.cback)(&evt);
   19aa8:	68a3      	ldr	r3, [r4, #8]
      evt.hdr.param = 0;
   19aaa:	9201      	str	r2, [sp, #4]
      (*dmCb.cback)(&evt);
   19aac:	a801      	add	r0, sp, #4
   19aae:	4798      	blx	r3
    }
  }
}
   19ab0:	b01a      	add	sp, #104	; 0x68
   19ab2:	bd10      	pop	{r4, pc}
   19ab4:	10002b80 	.word	0x10002b80
   19ab8:	00020690 	.word	0x00020690
   19abc:	10005960 	.word	0x10005960
   19ac0:	01650000 	.word	0x01650000

00019ac4 <DmHandlerInit>:
 */
/*************************************************************************************************/
void DmHandlerInit(wsfHandlerId_t handlerId)
{
  /* store handler ID */
  dmCb.handlerId = handlerId;
   19ac4:	4b04      	ldr	r3, [pc, #16]	; (19ad8 <DmHandlerInit+0x14>)
{
   19ac6:	4601      	mov	r1, r0

  dmCb.llPrivEnabled = FALSE;
   19ac8:	2200      	movs	r2, #0
  dmCb.resetting = FALSE;

  /* register with the HCI event interface */
  HciEvtRegister(dmHciEvtCback);
   19aca:	4804      	ldr	r0, [pc, #16]	; (19adc <DmHandlerInit+0x18>)
  dmCb.handlerId = handlerId;
   19acc:	7319      	strb	r1, [r3, #12]
  dmCb.llPrivEnabled = FALSE;
   19ace:	759a      	strb	r2, [r3, #22]
  dmCb.resetting = FALSE;
   19ad0:	741a      	strb	r2, [r3, #16]
  HciEvtRegister(dmHciEvtCback);
   19ad2:	f7f9 bf19 	b.w	13908 <HciEvtRegister>
   19ad6:	bf00      	nop
   19ad8:	10005960 	.word	0x10005960
   19adc:	00019a4d 	.word	0x00019a4d

00019ae0 <DmHandler>:
 */
/*************************************************************************************************/
void DmHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
  /* Handle message */
  if (pMsg != NULL)
   19ae0:	b151      	cbz	r1, 19af8 <DmHandler+0x18>
  {
    WSF_ASSERT(DM_ID_FROM_MSG(pMsg->event) < DM_NUM_IDS);

    /* if DM not resetting */
    if (!dmCb.resetting)
   19ae2:	4b06      	ldr	r3, [pc, #24]	; (19afc <DmHandler+0x1c>)
   19ae4:	7c1b      	ldrb	r3, [r3, #16]
   19ae6:	b93b      	cbnz	r3, 19af8 <DmHandler+0x18>
    {
      /* route message to DM component handling function */
      (*(dmFcnIfTbl[DM_ID_FROM_MSG(pMsg->event)]->msgHandler))(pMsg);
   19ae8:	788b      	ldrb	r3, [r1, #2]
   19aea:	4a05      	ldr	r2, [pc, #20]	; (19b00 <DmHandler+0x20>)
   19aec:	091b      	lsrs	r3, r3, #4
   19aee:	4608      	mov	r0, r1
   19af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   19af4:	689b      	ldr	r3, [r3, #8]
   19af6:	4718      	bx	r3
  /* Handle events */
  else if (event)
  {

  }
}
   19af8:	4770      	bx	lr
   19afa:	bf00      	nop
   19afc:	10005960 	.word	0x10005960
   19b00:	10002b80 	.word	0x10002b80

00019b04 <DmLlAddrType>:
uint8_t DmLlAddrType(uint8_t addrType)
{
  uint8_t llAddrType = addrType;

  /* if LL Privacy is enabled */
  if (dmCb.llPrivEnabled)
   19b04:	4b04      	ldr	r3, [pc, #16]	; (19b18 <DmLlAddrType+0x14>)
   19b06:	7d9b      	ldrb	r3, [r3, #22]
   19b08:	b12b      	cbz	r3, 19b16 <DmLlAddrType+0x12>
  {
    if (addrType == DM_ADDR_PUBLIC)
   19b0a:	b118      	cbz	r0, 19b14 <DmLlAddrType+0x10>
    {
      llAddrType = DM_ADDR_PUBLIC_IDENTITY;
    }
    else if (addrType == DM_ADDR_RANDOM)
    {
      llAddrType = DM_ADDR_RANDOM_IDENTITY;
   19b0c:	2801      	cmp	r0, #1
   19b0e:	bf08      	it	eq
   19b10:	2003      	moveq	r0, #3
   19b12:	4770      	bx	lr
      llAddrType = DM_ADDR_PUBLIC_IDENTITY;
   19b14:	2002      	movs	r0, #2
    }
  }

  return llAddrType;
}
   19b16:	4770      	bx	lr
   19b18:	10005960 	.word	0x10005960

00019b1c <DmHostAddrType>:
uint8_t DmHostAddrType(uint8_t addrType)
{
  uint8_t hostAddrType = addrType;

  /* if LL Privacy is enabled */
  if (dmCb.llPrivEnabled)
   19b1c:	4b05      	ldr	r3, [pc, #20]	; (19b34 <DmHostAddrType+0x18>)
   19b1e:	7d9b      	ldrb	r3, [r3, #22]
   19b20:	b133      	cbz	r3, 19b30 <DmHostAddrType+0x14>
  {
    if (addrType == DM_ADDR_PUBLIC_IDENTITY)
   19b22:	2802      	cmp	r0, #2
   19b24:	d003      	beq.n	19b2e <DmHostAddrType+0x12>
    {
      hostAddrType = DM_ADDR_PUBLIC;
    }
    else if (addrType == DM_ADDR_RANDOM_IDENTITY)
    {
      hostAddrType = DM_ADDR_RANDOM;
   19b26:	2803      	cmp	r0, #3
   19b28:	bf08      	it	eq
   19b2a:	2001      	moveq	r0, #1
   19b2c:	4770      	bx	lr
      hostAddrType = DM_ADDR_PUBLIC;
   19b2e:	2000      	movs	r0, #0
    }
  }

  return hostAddrType;
}
   19b30:	4770      	bx	lr
   19b32:	bf00      	nop
   19b34:	10005960 	.word	0x10005960

00019b38 <dmPrivMsgHandler>:
 */
/*************************************************************************************************/
void dmPrivMsgHandler(wsfMsgHdr_t *pMsg)
{
  /* execute action function */
  (*dmPrivAct[DM_MSG_MASK(pMsg->event)])((dmPrivMsg_t *) pMsg);
   19b38:	7883      	ldrb	r3, [r0, #2]
   19b3a:	4a03      	ldr	r2, [pc, #12]	; (19b48 <dmPrivMsgHandler+0x10>)
   19b3c:	f003 030f 	and.w	r3, r3, #15
   19b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   19b44:	4718      	bx	r3
   19b46:	bf00      	nop
   19b48:	000206e4 	.word	0x000206e4

00019b4c <dmPrivReset>:
 */
/*************************************************************************************************/
void dmPrivReset(void)
{
  /* initialize control block */
  dmPrivCb.inProgress = 0;
   19b4c:	4902      	ldr	r1, [pc, #8]	; (19b58 <dmPrivReset+0xc>)
  dmCb.llPrivEnabled = FALSE;
   19b4e:	4a03      	ldr	r2, [pc, #12]	; (19b5c <dmPrivReset+0x10>)
  dmPrivCb.inProgress = 0;
   19b50:	2300      	movs	r3, #0
   19b52:	70cb      	strb	r3, [r1, #3]
  dmCb.llPrivEnabled = FALSE;
   19b54:	7593      	strb	r3, [r2, #22]
}
   19b56:	4770      	bx	lr
   19b58:	10005978 	.word	0x10005978
   19b5c:	10005960 	.word	0x10005960

00019b60 <dmPrivActGenAddrAesCmpl>:
  memcpy(pAddrEvt->addr, pMsg->aes.pCiphertext, DM_PRIV_HASH_LEN);
   19b60:	6842      	ldr	r2, [r0, #4]
   19b62:	8811      	ldrh	r1, [r2, #0]
   19b64:	7892      	ldrb	r2, [r2, #2]
   19b66:	7182      	strb	r2, [r0, #6]
  memcpy(pAddrEvt->addr + DM_PRIV_HASH_LEN, dmPrivCb.genAddrBuf, DM_PRIV_PRAND_LEN);
   19b68:	4a08      	ldr	r2, [pc, #32]	; (19b8c <dmPrivActGenAddrAesCmpl+0x2c>)
  memcpy(pAddrEvt->addr, pMsg->aes.pCiphertext, DM_PRIV_HASH_LEN);
   19b6a:	8081      	strh	r1, [r0, #4]
  memcpy(pAddrEvt->addr + DM_PRIV_HASH_LEN, dmPrivCb.genAddrBuf, DM_PRIV_PRAND_LEN);
   19b6c:	7b11      	ldrb	r1, [r2, #12]
   19b6e:	f8b2 c00a 	ldrh.w	ip, [r2, #10]
   19b72:	7241      	strb	r1, [r0, #9]
  dmPrivCb.inProgress &= ~DM_PRIV_INPROGRESS_GEN_ADDR;
   19b74:	78d1      	ldrb	r1, [r2, #3]
  memcpy(pAddrEvt->addr + DM_PRIV_HASH_LEN, dmPrivCb.genAddrBuf, DM_PRIV_PRAND_LEN);
   19b76:	f8a0 c007 	strh.w	ip, [r0, #7]
  dmPrivCb.inProgress &= ~DM_PRIV_INPROGRESS_GEN_ADDR;
   19b7a:	f021 0102 	bic.w	r1, r1, #2
   19b7e:	70d1      	strb	r1, [r2, #3]
  (*dmCb.cback)((dmEvt_t *) pAddrEvt);
   19b80:	4a03      	ldr	r2, [pc, #12]	; (19b90 <dmPrivActGenAddrAesCmpl+0x30>)
  pAddrEvt->hdr.event = DM_PRIV_GENERATE_ADDR_IND;
   19b82:	2138      	movs	r1, #56	; 0x38
   19b84:	8041      	strh	r1, [r0, #2]
  (*dmCb.cback)((dmEvt_t *) pAddrEvt);
   19b86:	6893      	ldr	r3, [r2, #8]
   19b88:	4718      	bx	r3
   19b8a:	bf00      	nop
   19b8c:	10005978 	.word	0x10005978
   19b90:	10005960 	.word	0x10005960

00019b94 <dmPrivActResAddrAesCmpl>:
{
   19b94:	b410      	push	{r4}
  if (memcmp(dmPrivCb.hash, pMsg->aes.pCiphertext, DM_PRIV_HASH_LEN) == 0)
   19b96:	4b0f      	ldr	r3, [pc, #60]	; (19bd4 <dmPrivActResAddrAesCmpl+0x40>)
   19b98:	6842      	ldr	r2, [r0, #4]
   19b9a:	781c      	ldrb	r4, [r3, #0]
   19b9c:	7811      	ldrb	r1, [r2, #0]
   19b9e:	428c      	cmp	r4, r1
   19ba0:	d00c      	beq.n	19bbc <dmPrivActResAddrAesCmpl+0x28>
    pMsg->hdr.status = HCI_ERR_AUTH_FAILURE;
   19ba2:	2205      	movs	r2, #5
   19ba4:	70c2      	strb	r2, [r0, #3]
  dmPrivCb.inProgress &= ~DM_PRIV_INPROGRESS_RES_ADDR;
   19ba6:	78da      	ldrb	r2, [r3, #3]
  (*dmCb.cback)((dmEvt_t *) pMsg);
   19ba8:	4c0b      	ldr	r4, [pc, #44]	; (19bd8 <dmPrivActResAddrAesCmpl+0x44>)
  dmPrivCb.inProgress &= ~DM_PRIV_INPROGRESS_RES_ADDR;
   19baa:	f022 0201 	bic.w	r2, r2, #1
   19bae:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.event = DM_PRIV_RESOLVED_ADDR_IND;
   19bb0:	2137      	movs	r1, #55	; 0x37
  (*dmCb.cback)((dmEvt_t *) pMsg);
   19bb2:	68a3      	ldr	r3, [r4, #8]
}
   19bb4:	f85d 4b04 	ldr.w	r4, [sp], #4
  pMsg->hdr.event = DM_PRIV_RESOLVED_ADDR_IND;
   19bb8:	7081      	strb	r1, [r0, #2]
  (*dmCb.cback)((dmEvt_t *) pMsg);
   19bba:	4718      	bx	r3
  if (memcmp(dmPrivCb.hash, pMsg->aes.pCiphertext, DM_PRIV_HASH_LEN) == 0)
   19bbc:	7851      	ldrb	r1, [r2, #1]
   19bbe:	785c      	ldrb	r4, [r3, #1]
   19bc0:	428c      	cmp	r4, r1
   19bc2:	f102 0201 	add.w	r2, r2, #1
   19bc6:	d1ec      	bne.n	19ba2 <dmPrivActResAddrAesCmpl+0xe>
   19bc8:	7899      	ldrb	r1, [r3, #2]
   19bca:	7852      	ldrb	r2, [r2, #1]
   19bcc:	4291      	cmp	r1, r2
   19bce:	d1e8      	bne.n	19ba2 <dmPrivActResAddrAesCmpl+0xe>
    pMsg->hdr.status = HCI_SUCCESS;
   19bd0:	2200      	movs	r2, #0
   19bd2:	e7e7      	b.n	19ba4 <dmPrivActResAddrAesCmpl+0x10>
   19bd4:	10005978 	.word	0x10005978
   19bd8:	10005960 	.word	0x10005960

00019bdc <dmPrivActAddDevToResList>:
  dmPrivCb.enableLlPriv = pDev->enableLlPriv;
   19bdc:	4a07      	ldr	r2, [pc, #28]	; (19bfc <dmPrivActAddDevToResList+0x20>)
{
   19bde:	4601      	mov	r1, r0
  dmPrivCb.addDevToResListParam = pMsg->hdr.param;
   19be0:	4603      	mov	r3, r0
  dmPrivCb.enableLlPriv = pDev->enableLlPriv;
   19be2:	f890 002b 	ldrb.w	r0, [r0, #43]	; 0x2b
   19be6:	7210      	strb	r0, [r2, #8]
  dmPrivCb.addDevToResListParam = pMsg->hdr.param;
   19be8:	f833 0b1b 	ldrh.w	r0, [r3], #27
   19bec:	8090      	strh	r0, [r2, #4]
  HciLeAddDeviceToResolvingListCmd(pDev->addrType, pDev->peerAddr, pDev->peerIrk, pDev->localIrk);
   19bee:	7908      	ldrb	r0, [r1, #4]
   19bf0:	f101 020b 	add.w	r2, r1, #11
   19bf4:	3105      	adds	r1, #5
   19bf6:	f7f3 becf 	b.w	d998 <HciLeAddDeviceToResolvingListCmd>
   19bfa:	bf00      	nop
   19bfc:	10005978 	.word	0x10005978

00019c00 <dmPrivActRemDevFromResList>:
  dmPrivCb.remDevFromResListParam = pMsg->hdr.param;
   19c00:	4601      	mov	r1, r0
   19c02:	4b03      	ldr	r3, [pc, #12]	; (19c10 <dmPrivActRemDevFromResList+0x10>)
   19c04:	f831 2b05 	ldrh.w	r2, [r1], #5
   19c08:	80da      	strh	r2, [r3, #6]
  HciLeRemoveDeviceFromResolvingList(pDev->addrType, pDev->peerAddr);
   19c0a:	7900      	ldrb	r0, [r0, #4]
   19c0c:	f7f3 bf1a 	b.w	da44 <HciLeRemoveDeviceFromResolvingList>
   19c10:	10005978 	.word	0x10005978

00019c14 <dmPrivActClearResList>:
  HciLeClearResolvingList();
   19c14:	f7f3 bf50 	b.w	dab8 <HciLeClearResolvingList>

00019c18 <dmPrivActSetAddrResEnable>:
  dmPrivCb.addrResEnable = enable;
   19c18:	4b02      	ldr	r3, [pc, #8]	; (19c24 <dmPrivActSetAddrResEnable+0xc>)
  dmPrivSetAddrResEnable(pAddrRes->enable);
   19c1a:	7900      	ldrb	r0, [r0, #4]
  dmPrivCb.addrResEnable = enable;
   19c1c:	7258      	strb	r0, [r3, #9]
  HciLeSetAddrResolutionEnable(enable);
   19c1e:	f7f3 bfab 	b.w	db78 <HciLeSetAddrResolutionEnable>
   19c22:	bf00      	nop
   19c24:	10005978 	.word	0x10005978

00019c28 <dmPrivActSetPrivacyMode>:
  HciLeSetPrivacyModeCmd(pPrivacyMode->addrType, pPrivacyMode->peerAddr, pPrivacyMode->mode);
   19c28:	7ac2      	ldrb	r2, [r0, #11]
   19c2a:	1d41      	adds	r1, r0, #5
   19c2c:	7900      	ldrb	r0, [r0, #4]
   19c2e:	f7f3 bfd7 	b.w	dbe0 <HciLeSetPrivacyModeCmd>
   19c32:	bf00      	nop

00019c34 <dmPrivHciHandler>:
  switch (pEvent->hdr.event)
   19c34:	7883      	ldrb	r3, [r0, #2]
   19c36:	3b15      	subs	r3, #21
{
   19c38:	b570      	push	{r4, r5, r6, lr}
   19c3a:	4604      	mov	r4, r0
  switch (pEvent->hdr.event)
   19c3c:	2b05      	cmp	r3, #5
   19c3e:	d858      	bhi.n	19cf2 <dmPrivHciHandler+0xbe>
   19c40:	e8df f003 	tbb	[pc, r3]
   19c44:	392b200e 	.word	0x392b200e
   19c48:	0341      	.short	0x0341
      if (pEvent->hdr.status == HCI_SUCCESS)
   19c4a:	78c3      	ldrb	r3, [r0, #3]
      pEvent->hdr.event = DM_PRIV_SET_ADDR_RES_ENABLE_IND;
   19c4c:	223f      	movs	r2, #63	; 0x3f
   19c4e:	7082      	strb	r2, [r0, #2]
      if (pEvent->hdr.status == HCI_SUCCESS)
   19c50:	2b00      	cmp	r3, #0
   19c52:	d040      	beq.n	19cd6 <dmPrivHciHandler+0xa2>
   19c54:	4d27      	ldr	r5, [pc, #156]	; (19cf4 <dmPrivHciHandler+0xc0>)
  (*dmCb.cback)((dmEvt_t *)pEvent);
   19c56:	68ab      	ldr	r3, [r5, #8]
   19c58:	4620      	mov	r0, r4
}
   19c5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  (*dmCb.cback)((dmEvt_t *)pEvent);
   19c5e:	4718      	bx	r3
      pEvent->hdr.param = dmPrivCb.addDevToResListParam;
   19c60:	4b25      	ldr	r3, [pc, #148]	; (19cf8 <dmPrivHciHandler+0xc4>)
      if ((pEvent->hdr.status == HCI_SUCCESS) && dmPrivCb.enableLlPriv && !dmCb.llPrivEnabled)
   19c62:	4d24      	ldr	r5, [pc, #144]	; (19cf4 <dmPrivHciHandler+0xc0>)
      pEvent->hdr.param = dmPrivCb.addDevToResListParam;
   19c64:	889a      	ldrh	r2, [r3, #4]
   19c66:	8002      	strh	r2, [r0, #0]
      pEvent->hdr.event = DM_PRIV_ADD_DEV_TO_RES_LIST_IND;
   19c68:	213a      	movs	r1, #58	; 0x3a
   19c6a:	7081      	strb	r1, [r0, #2]
      if ((pEvent->hdr.status == HCI_SUCCESS) && dmPrivCb.enableLlPriv && !dmCb.llPrivEnabled)
   19c6c:	7a1a      	ldrb	r2, [r3, #8]
   19c6e:	2a00      	cmp	r2, #0
   19c70:	d0f1      	beq.n	19c56 <dmPrivHciHandler+0x22>
   19c72:	78c1      	ldrb	r1, [r0, #3]
   19c74:	7daa      	ldrb	r2, [r5, #22]
   19c76:	430a      	orrs	r2, r1
   19c78:	d1ed      	bne.n	19c56 <dmPrivHciHandler+0x22>
  dmPrivCb.addrResEnable = enable;
   19c7a:	2001      	movs	r0, #1
   19c7c:	7258      	strb	r0, [r3, #9]
  HciLeSetAddrResolutionEnable(enable);
   19c7e:	f7f3 ff7b 	bl	db78 <HciLeSetAddrResolutionEnable>
}
   19c82:	e7e8      	b.n	19c56 <dmPrivHciHandler+0x22>
      pEvent->hdr.param = dmPrivCb.remDevFromResListParam;
   19c84:	4b1c      	ldr	r3, [pc, #112]	; (19cf8 <dmPrivHciHandler+0xc4>)
   19c86:	4d1b      	ldr	r5, [pc, #108]	; (19cf4 <dmPrivHciHandler+0xc0>)
   19c88:	88db      	ldrh	r3, [r3, #6]
   19c8a:	8003      	strh	r3, [r0, #0]
      pEvent->hdr.event = DM_PRIV_REM_DEV_FROM_RES_LIST_IND;
   19c8c:	223b      	movs	r2, #59	; 0x3b
  (*dmCb.cback)((dmEvt_t *)pEvent);
   19c8e:	68ab      	ldr	r3, [r5, #8]
      pEvent->hdr.event = DM_PRIV_REM_DEV_FROM_RES_LIST_IND;
   19c90:	7082      	strb	r2, [r0, #2]
  (*dmCb.cback)((dmEvt_t *)pEvent);
   19c92:	4620      	mov	r0, r4
}
   19c94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  (*dmCb.cback)((dmEvt_t *)pEvent);
   19c98:	4718      	bx	r3
      if ((pEvent->hdr.status == HCI_SUCCESS) && dmCb.llPrivEnabled)
   19c9a:	78c0      	ldrb	r0, [r0, #3]
   19c9c:	4d15      	ldr	r5, [pc, #84]	; (19cf4 <dmPrivHciHandler+0xc0>)
      pEvent->hdr.event = DM_PRIV_CLEAR_RES_LIST_IND;
   19c9e:	233c      	movs	r3, #60	; 0x3c
   19ca0:	70a3      	strb	r3, [r4, #2]
      if ((pEvent->hdr.status == HCI_SUCCESS) && dmCb.llPrivEnabled)
   19ca2:	2800      	cmp	r0, #0
   19ca4:	d1d7      	bne.n	19c56 <dmPrivHciHandler+0x22>
   19ca6:	7dab      	ldrb	r3, [r5, #22]
   19ca8:	2b00      	cmp	r3, #0
   19caa:	d0d4      	beq.n	19c56 <dmPrivHciHandler+0x22>
  dmPrivCb.addrResEnable = enable;
   19cac:	4b12      	ldr	r3, [pc, #72]	; (19cf8 <dmPrivHciHandler+0xc4>)
   19cae:	7258      	strb	r0, [r3, #9]
  HciLeSetAddrResolutionEnable(enable);
   19cb0:	f7f3 ff62 	bl	db78 <HciLeSetAddrResolutionEnable>
}
   19cb4:	e7cf      	b.n	19c56 <dmPrivHciHandler+0x22>
      pEvent->hdr.event = DM_PRIV_READ_PEER_RES_ADDR_IND;
   19cb6:	4d0f      	ldr	r5, [pc, #60]	; (19cf4 <dmPrivHciHandler+0xc0>)
   19cb8:	233d      	movs	r3, #61	; 0x3d
   19cba:	7083      	strb	r3, [r0, #2]
  (*dmCb.cback)((dmEvt_t *)pEvent);
   19cbc:	68ab      	ldr	r3, [r5, #8]
   19cbe:	4620      	mov	r0, r4
}
   19cc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  (*dmCb.cback)((dmEvt_t *)pEvent);
   19cc4:	4718      	bx	r3
      pEvent->hdr.event = DM_PRIV_READ_LOCAL_RES_ADDR_IND;
   19cc6:	4d0b      	ldr	r5, [pc, #44]	; (19cf4 <dmPrivHciHandler+0xc0>)
   19cc8:	233e      	movs	r3, #62	; 0x3e
   19cca:	7083      	strb	r3, [r0, #2]
  (*dmCb.cback)((dmEvt_t *)pEvent);
   19ccc:	68ab      	ldr	r3, [r5, #8]
   19cce:	4620      	mov	r0, r4
}
   19cd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  (*dmCb.cback)((dmEvt_t *)pEvent);
   19cd4:	4718      	bx	r3
        dmCb.llPrivEnabled = dmPrivCb.addrResEnable;
   19cd6:	4a08      	ldr	r2, [pc, #32]	; (19cf8 <dmPrivHciHandler+0xc4>)
   19cd8:	4d06      	ldr	r5, [pc, #24]	; (19cf4 <dmPrivHciHandler+0xc0>)
   19cda:	7a51      	ldrb	r1, [r2, #9]
   19cdc:	75a9      	strb	r1, [r5, #22]
        dmDevPassEvtToDevPriv(dmCb.llPrivEnabled ? DM_DEV_PRIV_MSG_RPA_STOP : DM_DEV_PRIV_MSG_RPA_START,
   19cde:	2900      	cmp	r1, #0
   19ce0:	461a      	mov	r2, r3
   19ce2:	bf15      	itete	ne
   19ce4:	2101      	movne	r1, #1
   19ce6:	2100      	moveq	r1, #0
   19ce8:	2015      	movne	r0, #21
   19cea:	2014      	moveq	r0, #20
   19cec:	f7ff fe66 	bl	199bc <dmDevPassEvtToDevPriv>
   19cf0:	e7b1      	b.n	19c56 <dmPrivHciHandler+0x22>
}
   19cf2:	bd70      	pop	{r4, r5, r6, pc}
   19cf4:	10005960 	.word	0x10005960
   19cf8:	10005978 	.word	0x10005978

00019cfc <dmPrivActResolveAddr>:
{
   19cfc:	b510      	push	{r4, lr}
  if ((dmPrivCb.inProgress & DM_PRIV_INPROGRESS_RES_ADDR) == 0)
   19cfe:	4c18      	ldr	r4, [pc, #96]	; (19d60 <dmPrivActResolveAddr+0x64>)
   19d00:	78e3      	ldrb	r3, [r4, #3]
   19d02:	f013 0c01 	ands.w	ip, r3, #1
{
   19d06:	b086      	sub	sp, #24
   19d08:	4601      	mov	r1, r0
  if ((dmPrivCb.inProgress & DM_PRIV_INPROGRESS_RES_ADDR) == 0)
   19d0a:	d008      	beq.n	19d1e <dmPrivActResolveAddr+0x22>
    (*dmCb.cback)((dmEvt_t *) pMsg);
   19d0c:	4b15      	ldr	r3, [pc, #84]	; (19d64 <dmPrivActResolveAddr+0x68>)
   19d0e:	689b      	ldr	r3, [r3, #8]
    pMsg->hdr.event = DM_PRIV_RESOLVED_ADDR_IND;
   19d10:	f240 7237 	movw	r2, #1847	; 0x737
   19d14:	8042      	strh	r2, [r0, #2]
}
   19d16:	b006      	add	sp, #24
   19d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    (*dmCb.cback)((dmEvt_t *) pMsg);
   19d1c:	4718      	bx	r3
    dmPrivCb.inProgress |= DM_PRIV_INPROGRESS_RES_ADDR;
   19d1e:	f043 0301 	orr.w	r3, r3, #1
   19d22:	70e3      	strb	r3, [r4, #3]
    SecAes(pMsg->apiResolveAddr.irk, buf, dmCb.handlerId,
   19d24:	4b0f      	ldr	r3, [pc, #60]	; (19d64 <dmPrivActResolveAddr+0x68>)
    memcpy(dmPrivCb.hash, pMsg->apiResolveAddr.addr, DM_PRIV_HASH_LEN);
   19d26:	8a82      	ldrh	r2, [r0, #20]
   19d28:	8022      	strh	r2, [r4, #0]
    SecAes(pMsg->apiResolveAddr.irk, buf, dmCb.handlerId,
   19d2a:	7b1a      	ldrb	r2, [r3, #12]
    memcpy(dmPrivCb.hash, pMsg->apiResolveAddr.addr, DM_PRIV_HASH_LEN);
   19d2c:	7d83      	ldrb	r3, [r0, #22]
   19d2e:	70a3      	strb	r3, [r4, #2]
    SecAes(pMsg->apiResolveAddr.irk, buf, dmCb.handlerId,
   19d30:	2461      	movs	r4, #97	; 0x61
   19d32:	f830 3b04 	ldrh.w	r3, [r0], #4
   19d36:	9400      	str	r4, [sp, #0]
    memcpy(buf, &pMsg->apiResolveAddr.addr[3], DM_PRIV_PRAND_LEN);
   19d38:	f8b1 4017 	ldrh.w	r4, [r1, #23]
   19d3c:	7e49      	ldrb	r1, [r1, #25]
   19d3e:	f88d 100a 	strb.w	r1, [sp, #10]
    SecAes(pMsg->apiResolveAddr.irk, buf, dmCb.handlerId,
   19d42:	a902      	add	r1, sp, #8
    memset(buf + DM_PRIV_PRAND_LEN, 0, (DM_PRIV_PLAINTEXT_LEN - DM_PRIV_PRAND_LEN));
   19d44:	f8cd c00b 	str.w	ip, [sp, #11]
   19d48:	f8cd c00f 	str.w	ip, [sp, #15]
   19d4c:	f8cd c013 	str.w	ip, [sp, #19]
   19d50:	f88d c017 	strb.w	ip, [sp, #23]
    memcpy(buf, &pMsg->apiResolveAddr.addr[3], DM_PRIV_PRAND_LEN);
   19d54:	f8ad 4008 	strh.w	r4, [sp, #8]
    SecAes(pMsg->apiResolveAddr.irk, buf, dmCb.handlerId,
   19d58:	f7fb ffd2 	bl	15d00 <SecAes>
}
   19d5c:	b006      	add	sp, #24
   19d5e:	bd10      	pop	{r4, pc}
   19d60:	10005978 	.word	0x10005978
   19d64:	10005960 	.word	0x10005960

00019d68 <dmPrivActGenAddr>:
{
   19d68:	b570      	push	{r4, r5, r6, lr}
  if ((dmPrivCb.inProgress & DM_PRIV_INPROGRESS_GEN_ADDR) == 0)
   19d6a:	4c1a      	ldr	r4, [pc, #104]	; (19dd4 <dmPrivActGenAddr+0x6c>)
   19d6c:	78e3      	ldrb	r3, [r4, #3]
   19d6e:	f013 0602 	ands.w	r6, r3, #2
{
   19d72:	b082      	sub	sp, #8
   19d74:	4605      	mov	r5, r0
  if ((dmPrivCb.inProgress & DM_PRIV_INPROGRESS_GEN_ADDR) == 0)
   19d76:	d008      	beq.n	19d8a <dmPrivActGenAddr+0x22>
    (*dmCb.cback)((dmEvt_t *) pMsg);
   19d78:	4b17      	ldr	r3, [pc, #92]	; (19dd8 <dmPrivActGenAddr+0x70>)
   19d7a:	689b      	ldr	r3, [r3, #8]
    pMsg->hdr.event = DM_PRIV_GENERATE_ADDR_IND;
   19d7c:	f44f 62e7 	mov.w	r2, #1848	; 0x738
   19d80:	8042      	strh	r2, [r0, #2]
}
   19d82:	b002      	add	sp, #8
   19d84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    (*dmCb.cback)((dmEvt_t *) pMsg);
   19d88:	4718      	bx	r3
    SecRand(dmPrivCb.genAddrBuf, DM_PRIV_PRAND_LEN);
   19d8a:	f104 000a 	add.w	r0, r4, #10
   19d8e:	2103      	movs	r1, #3
   19d90:	f7fc fa1a 	bl	161c8 <SecRand>
    dmPrivCb.genAddrBuf[2] = (dmPrivCb.genAddrBuf[2] & 0x3F) | DM_RAND_ADDR_RESOLV;
   19d94:	7b23      	ldrb	r3, [r4, #12]
    dmPrivCb.inProgress |= DM_PRIV_INPROGRESS_GEN_ADDR;
   19d96:	78e2      	ldrb	r2, [r4, #3]
    memset(dmPrivCb.genAddrBuf + DM_PRIV_PRAND_LEN, 0, (DM_PRIV_PLAINTEXT_LEN - DM_PRIV_PRAND_LEN));
   19d98:	f8c4 600d 	str.w	r6, [r4, #13]
    dmPrivCb.inProgress |= DM_PRIV_INPROGRESS_GEN_ADDR;
   19d9c:	f042 0202 	orr.w	r2, r2, #2
    dmPrivCb.genAddrBuf[2] = (dmPrivCb.genAddrBuf[2] & 0x3F) | DM_RAND_ADDR_RESOLV;
   19da0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    dmPrivCb.inProgress |= DM_PRIV_INPROGRESS_GEN_ADDR;
   19da4:	70e2      	strb	r2, [r4, #3]
    SecAes(pMsg->apiGenerateAddr.irk, dmPrivCb.genAddrBuf, dmCb.handlerId,
   19da6:	4628      	mov	r0, r5
    dmPrivCb.genAddrBuf[2] = (dmPrivCb.genAddrBuf[2] & 0x3F) | DM_RAND_ADDR_RESOLV;
   19da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    SecAes(pMsg->apiGenerateAddr.irk, dmPrivCb.genAddrBuf, dmCb.handlerId,
   19dac:	4a0a      	ldr	r2, [pc, #40]	; (19dd8 <dmPrivActGenAddr+0x70>)
    memset(dmPrivCb.genAddrBuf + DM_PRIV_PRAND_LEN, 0, (DM_PRIV_PLAINTEXT_LEN - DM_PRIV_PRAND_LEN));
   19dae:	f8c4 6011 	str.w	r6, [r4, #17]
   19db2:	f8c4 6015 	str.w	r6, [r4, #21]
   19db6:	7666      	strb	r6, [r4, #25]
    dmPrivCb.genAddrBuf[2] = (dmPrivCb.genAddrBuf[2] & 0x3F) | DM_RAND_ADDR_RESOLV;
   19db8:	7323      	strb	r3, [r4, #12]
    memset(dmPrivCb.genAddrBuf + DM_PRIV_PRAND_LEN, 0, (DM_PRIV_PLAINTEXT_LEN - DM_PRIV_PRAND_LEN));
   19dba:	f104 010d 	add.w	r1, r4, #13
    SecAes(pMsg->apiGenerateAddr.irk, dmPrivCb.genAddrBuf, dmCb.handlerId,
   19dbe:	2468      	movs	r4, #104	; 0x68
   19dc0:	f830 3b04 	ldrh.w	r3, [r0], #4
   19dc4:	7b12      	ldrb	r2, [r2, #12]
   19dc6:	9400      	str	r4, [sp, #0]
   19dc8:	3903      	subs	r1, #3
   19dca:	f7fb ff99 	bl	15d00 <SecAes>
}
   19dce:	b002      	add	sp, #8
   19dd0:	bd70      	pop	{r4, r5, r6, pc}
   19dd2:	bf00      	nop
   19dd4:	10005978 	.word	0x10005978
   19dd8:	10005960 	.word	0x10005960

00019ddc <DmPrivInit>:
 *  \return None.
 */
/*************************************************************************************************/
void DmPrivInit(void)
{
  dmFcnIfTbl[DM_ID_PRIV] = (dmFcnIf_t *) &dmPrivFcnIf;
   19ddc:	4b01      	ldr	r3, [pc, #4]	; (19de4 <DmPrivInit+0x8>)
   19dde:	4a02      	ldr	r2, [pc, #8]	; (19de8 <DmPrivInit+0xc>)
   19de0:	619a      	str	r2, [r3, #24]
}
   19de2:	4770      	bx	lr
   19de4:	10002b80 	.word	0x10002b80
   19de8:	00020708 	.word	0x00020708

00019dec <dmSecMsgHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmSecMsgHandler(dmSecMsg_t *pMsg)
{
   19dec:	b570      	push	{r4, r5, r6, lr}
   19dee:	4604      	mov	r4, r0
  dmConnCcb_t *pCcb;

  /* look up ccb */
  if ((pCcb = dmConnCcbById((dmConnId_t) pMsg->hdr.param)) != NULL)
   19df0:	7800      	ldrb	r0, [r0, #0]
   19df2:	f7ff fbd5 	bl	195a0 <dmConnCcbById>
   19df6:	b128      	cbz	r0, 19e04 <dmSecMsgHandler+0x18>
  {
    /* process API encrypt req */
    switch (pMsg->hdr.event)
   19df8:	78a3      	ldrb	r3, [r4, #2]
   19dfa:	2b50      	cmp	r3, #80	; 0x50
   19dfc:	4605      	mov	r5, r0
   19dfe:	d00c      	beq.n	19e1a <dmSecMsgHandler+0x2e>
   19e00:	2b51      	cmp	r3, #81	; 0x51
   19e02:	d000      	beq.n	19e06 <dmSecMsgHandler+0x1a>

    default:
      break;
    }
  }
}
   19e04:	bd70      	pop	{r4, r5, r6, pc}
      if (pMsg->ltkRsp.keyFound)
   19e06:	7d22      	ldrb	r2, [r4, #20]
   19e08:	b1ca      	cbz	r2, 19e3e <dmSecMsgHandler+0x52>
        pCcb->tmpSecLevel = pMsg->ltkRsp.secLevel;
   19e0a:	7d63      	ldrb	r3, [r4, #21]
        HciLeLtkReqReplCmd(pCcb->handle, pMsg->ltkRsp.key);
   19e0c:	8980      	ldrh	r0, [r0, #12]
        pCcb->tmpSecLevel = pMsg->ltkRsp.secLevel;
   19e0e:	762b      	strb	r3, [r5, #24]
        HciLeLtkReqReplCmd(pCcb->handle, pMsg->ltkRsp.key);
   19e10:	1d21      	adds	r1, r4, #4
}
   19e12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        HciLeLtkReqReplCmd(pCcb->handle, pMsg->ltkRsp.key);
   19e16:	f7f3 b96b 	b.w	d0f0 <HciLeLtkReqReplCmd>
      DmConnSetIdle(pCcb->connId, DM_IDLE_DM_ENC, DM_CONN_BUSY);
   19e1a:	7c00      	ldrb	r0, [r0, #16]
   19e1c:	2201      	movs	r2, #1
   19e1e:	2102      	movs	r1, #2
   19e20:	f7ff fc64 	bl	196ec <DmConnSetIdle>
      pCcb->tmpSecLevel = pMsg->encryptReq.secLevel;
   19e24:	7fa2      	ldrb	r2, [r4, #30]
   19e26:	762a      	strb	r2, [r5, #24]
      pCcb->usingLtk = TRUE;
   19e28:	2301      	movs	r3, #1
   19e2a:	74ab      	strb	r3, [r5, #18]
      HciLeStartEncryptionCmd(pCcb->handle, pMsg->encryptReq.ltk.rand,
   19e2c:	8ba2      	ldrh	r2, [r4, #28]
   19e2e:	89a8      	ldrh	r0, [r5, #12]
   19e30:	1d23      	adds	r3, r4, #4
   19e32:	f104 0114 	add.w	r1, r4, #20
}
   19e36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HciLeStartEncryptionCmd(pCcb->handle, pMsg->encryptReq.ltk.rand,
   19e3a:	f7f3 bbd7 	b.w	d5ec <HciLeStartEncryptionCmd>
        DmConnSetIdle(pCcb->connId, DM_IDLE_DM_ENC, DM_CONN_IDLE);
   19e3e:	7c00      	ldrb	r0, [r0, #16]
   19e40:	2102      	movs	r1, #2
   19e42:	f7ff fc53 	bl	196ec <DmConnSetIdle>
        HciLeLtkReqNegReplCmd(pCcb->handle);
   19e46:	89a8      	ldrh	r0, [r5, #12]
}
   19e48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        HciLeLtkReqNegReplCmd(pCcb->handle);
   19e4c:	f7f3 b91a 	b.w	d084 <HciLeLtkReqNegReplCmd>

00019e50 <dmSecReset>:
 */
/*************************************************************************************************/
void dmSecReset(void)
{
  /* initialize smp database */
  SmpDbInit();
   19e50:	f7f7 bcf4 	b.w	1183c <SmpDbInit>

00019e54 <dmSecHciHandler>:
{
   19e54:	b570      	push	{r4, r5, r6, lr}
   19e56:	4604      	mov	r4, r0
   19e58:	b084      	sub	sp, #16
  if ((pCcb = dmConnCcbByHandle(pEvent->hdr.param)) != NULL)
   19e5a:	8800      	ldrh	r0, [r0, #0]
   19e5c:	f7ff fb78 	bl	19550 <dmConnCcbByHandle>
   19e60:	b130      	cbz	r0, 19e70 <dmSecHciHandler+0x1c>
    if (pEvent->hdr.event == HCI_LE_LTK_REQ_CBACK_EVT)
   19e62:	78a3      	ldrb	r3, [r4, #2]
   19e64:	2b10      	cmp	r3, #16
   19e66:	4605      	mov	r5, r0
   19e68:	d004      	beq.n	19e74 <dmSecHciHandler+0x20>
    else if (pEvent->hdr.event == HCI_ENC_KEY_REFRESH_CMPL_CBACK_EVT ||
   19e6a:	3b0e      	subs	r3, #14
   19e6c:	2b01      	cmp	r3, #1
   19e6e:	d922      	bls.n	19eb6 <dmSecHciHandler+0x62>
}
   19e70:	b004      	add	sp, #16
   19e72:	bd70      	pop	{r4, r5, r6, pc}
      if ((pEvent->leLtkReq.encDiversifier == 0) &&
   19e74:	89e3      	ldrh	r3, [r4, #14]
   19e76:	b96b      	cbnz	r3, 19e94 <dmSecHciHandler+0x40>
          (memcmp(pEvent->leLtkReq.randNum, calc128Zeros, HCI_RAND_LEN) == 0))
   19e78:	492b      	ldr	r1, [pc, #172]	; (19f28 <dmSecHciHandler+0xd4>)
   19e7a:	2208      	movs	r2, #8
   19e7c:	1da0      	adds	r0, r4, #6
   19e7e:	f002 fe19 	bl	1cab4 <memcmp>
      if ((pEvent->leLtkReq.encDiversifier == 0) &&
   19e82:	4606      	mov	r6, r0
   19e84:	b930      	cbnz	r0, 19e94 <dmSecHciHandler+0x40>
        if ((pKey = SmpDmGetStk(pCcb->connId, &secLevel)) != NULL)
   19e86:	a902      	add	r1, sp, #8
   19e88:	7c28      	ldrb	r0, [r5, #16]
   19e8a:	f7f8 f9c3 	bl	12214 <SmpDmGetStk>
   19e8e:	4601      	mov	r1, r0
   19e90:	2800      	cmp	r0, #0
   19e92:	d141      	bne.n	19f18 <dmSecHciHandler+0xc4>
      DmConnSetIdle(pCcb->connId, DM_IDLE_DM_ENC, DM_CONN_BUSY);
   19e94:	7c28      	ldrb	r0, [r5, #16]
   19e96:	2201      	movs	r2, #1
   19e98:	2102      	movs	r1, #2
   19e9a:	f7ff fc27 	bl	196ec <DmConnSetIdle>
      pCcb->usingLtk = TRUE;
   19e9e:	2201      	movs	r2, #1
      (*dmCb.cback)((dmEvt_t *) pEvent);
   19ea0:	4b22      	ldr	r3, [pc, #136]	; (19f2c <dmSecHciHandler+0xd8>)
      pCcb->usingLtk = TRUE;
   19ea2:	74aa      	strb	r2, [r5, #18]
      pEvent->hdr.param = pCcb->connId;
   19ea4:	7c29      	ldrb	r1, [r5, #16]
      (*dmCb.cback)((dmEvt_t *) pEvent);
   19ea6:	689b      	ldr	r3, [r3, #8]
      pEvent->hdr.param = pCcb->connId;
   19ea8:	8021      	strh	r1, [r4, #0]
      pEvent->hdr.event = DM_SEC_LTK_REQ_IND;
   19eaa:	2230      	movs	r2, #48	; 0x30
   19eac:	70a2      	strb	r2, [r4, #2]
      (*dmCb.cback)((dmEvt_t *) pEvent);
   19eae:	4620      	mov	r0, r4
   19eb0:	4798      	blx	r3
}
   19eb2:	b004      	add	sp, #16
   19eb4:	bd70      	pop	{r4, r5, r6, pc}
      DmConnSetIdle(pCcb->connId, DM_IDLE_DM_ENC, DM_CONN_IDLE);
   19eb6:	2200      	movs	r2, #0
   19eb8:	7c00      	ldrb	r0, [r0, #16]
   19eba:	2102      	movs	r1, #2
   19ebc:	f7ff fc16 	bl	196ec <DmConnSetIdle>
      encryptInd.hdr.status = pEvent->hdr.status;
   19ec0:	78e3      	ldrb	r3, [r4, #3]
      encryptInd.hdr.param = pCcb->connId;
   19ec2:	7c2a      	ldrb	r2, [r5, #16]
   19ec4:	f8ad 2008 	strh.w	r2, [sp, #8]
      encryptInd.hdr.status = pEvent->hdr.status;
   19ec8:	f88d 300b 	strb.w	r3, [sp, #11]
      if (encryptInd.hdr.status == HCI_SUCCESS)
   19ecc:	b193      	cbz	r3, 19ef4 <dmSecHciHandler+0xa0>
   19ece:	232d      	movs	r3, #45	; 0x2d
   19ed0:	f88d 300a 	strb.w	r3, [sp, #10]
  if (pDmEvt->hdr.event == DM_SEC_PAIR_CMPL_IND ||
   19ed4:	a802      	add	r0, sp, #8
  (*dmCb.cback)(pDmEvt);
   19ed6:	4b15      	ldr	r3, [pc, #84]	; (19f2c <dmSecHciHandler+0xd8>)
   19ed8:	9001      	str	r0, [sp, #4]
   19eda:	689b      	ldr	r3, [r3, #8]
   19edc:	4798      	blx	r3
      encryptInd.hdr.param = pCcb->connId;
   19ede:	7c2a      	ldrb	r2, [r5, #16]
      encryptInd.hdr.status = pEvent->hdr.status;
   19ee0:	78e3      	ldrb	r3, [r4, #3]
      SmpDmEncryptInd((wsfMsgHdr_t *) &encryptInd);
   19ee2:	9801      	ldr	r0, [sp, #4]
      encryptInd.hdr.param = pCcb->connId;
   19ee4:	f8ad 2008 	strh.w	r2, [sp, #8]
      encryptInd.hdr.status = pEvent->hdr.status;
   19ee8:	f88d 300b 	strb.w	r3, [sp, #11]
      SmpDmEncryptInd((wsfMsgHdr_t *) &encryptInd);
   19eec:	f7f8 f968 	bl	121c0 <SmpDmEncryptInd>
}
   19ef0:	b004      	add	sp, #16
   19ef2:	bd70      	pop	{r4, r5, r6, pc}
        pCcb->secLevel = pCcb->tmpSecLevel;
   19ef4:	7e2a      	ldrb	r2, [r5, #24]
    if (dmConnCb.connCback[DM_CLIENT_ID_ATT] != NULL)
   19ef6:	4b0e      	ldr	r3, [pc, #56]	; (19f30 <dmSecHciHandler+0xdc>)
        pCcb->secLevel = pCcb->tmpSecLevel;
   19ef8:	75ea      	strb	r2, [r5, #23]
    if (dmConnCb.connCback[DM_CLIENT_ID_ATT] != NULL)
   19efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
        encryptInd.usingLtk = pCcb->usingLtk;
   19efe:	7ca9      	ldrb	r1, [r5, #18]
   19f00:	f88d 100c 	strb.w	r1, [sp, #12]
   19f04:	222c      	movs	r2, #44	; 0x2c
   19f06:	f88d 200a 	strb.w	r2, [sp, #10]
      (*dmConnCb.connCback[DM_CLIENT_ID_ATT])(pDmEvt);
   19f0a:	a802      	add	r0, sp, #8
    if (dmConnCb.connCback[DM_CLIENT_ID_ATT] != NULL)
   19f0c:	2b00      	cmp	r3, #0
   19f0e:	d0e2      	beq.n	19ed6 <dmSecHciHandler+0x82>
      (*dmConnCb.connCback[DM_CLIENT_ID_ATT])(pDmEvt);
   19f10:	9001      	str	r0, [sp, #4]
   19f12:	4798      	blx	r3
   19f14:	9801      	ldr	r0, [sp, #4]
   19f16:	e7de      	b.n	19ed6 <dmSecHciHandler+0x82>
          pCcb->tmpSecLevel = secLevel;
   19f18:	f89d 3008 	ldrb.w	r3, [sp, #8]
   19f1c:	762b      	strb	r3, [r5, #24]
          pCcb->usingLtk = FALSE;
   19f1e:	74ae      	strb	r6, [r5, #18]
          HciLeLtkReqReplCmd(pEvent->hdr.param, pKey);
   19f20:	8820      	ldrh	r0, [r4, #0]
   19f22:	f7f3 f8e5 	bl	d0f0 <HciLeLtkReqReplCmd>
          return;
   19f26:	e7a3      	b.n	19e70 <dmSecHciHandler+0x1c>
   19f28:	0001fe04 	.word	0x0001fe04
   19f2c:	10005960 	.word	0x10005960
   19f30:	1000588c 	.word	0x1000588c

00019f34 <DmSmpCbackExec>:
  if (pDmEvt->hdr.event == DM_SEC_PAIR_CMPL_IND ||
   19f34:	7883      	ldrb	r3, [r0, #2]
   19f36:	2b2a      	cmp	r3, #42	; 0x2a
{
   19f38:	b510      	push	{r4, lr}
   19f3a:	4604      	mov	r4, r0
  if (pDmEvt->hdr.event == DM_SEC_PAIR_CMPL_IND ||
   19f3c:	d007      	beq.n	19f4e <DmSmpCbackExec+0x1a>
   19f3e:	2b2c      	cmp	r3, #44	; 0x2c
   19f40:	d005      	beq.n	19f4e <DmSmpCbackExec+0x1a>
  (*dmCb.cback)(pDmEvt);
   19f42:	4b07      	ldr	r3, [pc, #28]	; (19f60 <DmSmpCbackExec+0x2c>)
   19f44:	4620      	mov	r0, r4
   19f46:	689b      	ldr	r3, [r3, #8]
}
   19f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (*dmCb.cback)(pDmEvt);
   19f4c:	4718      	bx	r3
    if (dmConnCb.connCback[DM_CLIENT_ID_ATT] != NULL)
   19f4e:	4b05      	ldr	r3, [pc, #20]	; (19f64 <DmSmpCbackExec+0x30>)
   19f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   19f54:	2b00      	cmp	r3, #0
   19f56:	d0f4      	beq.n	19f42 <DmSmpCbackExec+0xe>
      (*dmConnCb.connCback[DM_CLIENT_ID_ATT])(pDmEvt);
   19f58:	4620      	mov	r0, r4
   19f5a:	4798      	blx	r3
   19f5c:	e7f1      	b.n	19f42 <DmSmpCbackExec+0xe>
   19f5e:	bf00      	nop
   19f60:	10005960 	.word	0x10005960
   19f64:	1000588c 	.word	0x1000588c

00019f68 <DmSecInit>:
  dmSecCb.pCsrk = dmSecCb.pIrk = (uint8_t *) calc128Zeros;
   19f68:	4b03      	ldr	r3, [pc, #12]	; (19f78 <DmSecInit+0x10>)
  dmFcnIfTbl[DM_ID_SEC] = (dmFcnIf_t *) &dmSecFcnIf;
   19f6a:	4904      	ldr	r1, [pc, #16]	; (19f7c <DmSecInit+0x14>)
  dmSecCb.pCsrk = dmSecCb.pIrk = (uint8_t *) calc128Zeros;
   19f6c:	4a04      	ldr	r2, [pc, #16]	; (19f80 <DmSecInit+0x18>)
  dmFcnIfTbl[DM_ID_SEC] = (dmFcnIf_t *) &dmSecFcnIf;
   19f6e:	4805      	ldr	r0, [pc, #20]	; (19f84 <DmSecInit+0x1c>)
   19f70:	6148      	str	r0, [r1, #20]
  dmSecCb.pCsrk = dmSecCb.pIrk = (uint8_t *) calc128Zeros;
   19f72:	e9c3 2200 	strd	r2, r2, [r3]
}
   19f76:	4770      	bx	lr
   19f78:	10005994 	.word	0x10005994
   19f7c:	10002b80 	.word	0x10002b80
   19f80:	0001fe04 	.word	0x0001fe04
   19f84:	00020714 	.word	0x00020714

00019f88 <DmSecGetLocalCsrk>:
  return dmSecCb.pCsrk;
   19f88:	4b01      	ldr	r3, [pc, #4]	; (19f90 <DmSecGetLocalCsrk+0x8>)
}
   19f8a:	6858      	ldr	r0, [r3, #4]
   19f8c:	4770      	bx	lr
   19f8e:	bf00      	nop
   19f90:	10005994 	.word	0x10005994

00019f94 <DmSecGetLocalIrk>:
  return dmSecCb.pIrk;
   19f94:	4b01      	ldr	r3, [pc, #4]	; (19f9c <DmSecGetLocalIrk+0x8>)
}
   19f96:	6818      	ldr	r0, [r3, #0]
   19f98:	4770      	bx	lr
   19f9a:	bf00      	nop
   19f9c:	10005994 	.word	0x10005994

00019fa0 <dmSecLescMsgHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmSecLescMsgHandler(dmSecMsg_t *pMsg)
{
   19fa0:	b530      	push	{r4, r5, lr}
  if (pMsg->hdr.event == DM_SEC_MSG_ECC_KEY_CNF)
   19fa2:	7883      	ldrb	r3, [r0, #2]
   19fa4:	2b81      	cmp	r3, #129	; 0x81
{
   19fa6:	b08b      	sub	sp, #44	; 0x2c
   19fa8:	4604      	mov	r4, r0
  if (pMsg->hdr.event == DM_SEC_MSG_ECC_KEY_CNF)
   19faa:	d003      	beq.n	19fb4 <dmSecLescMsgHandler+0x14>
  {
    pMsg->hdr.event = DM_SEC_ECC_KEY_IND;
    (*dmCb.cback)((dmEvt_t *) pMsg);
  }
  else if (pMsg->hdr.event == DM_SEC_MSG_CALC_OOB_CNF)
   19fac:	2b80      	cmp	r3, #128	; 0x80
   19fae:	d009      	beq.n	19fc4 <dmSecLescMsgHandler+0x24>

    WsfBufFree(dmSecOobRand);

    (*dmCb.cback)((dmEvt_t *) &oobEvt);
  }
}
   19fb0:	b00b      	add	sp, #44	; 0x2c
   19fb2:	bd30      	pop	{r4, r5, pc}
    (*dmCb.cback)((dmEvt_t *) pMsg);
   19fb4:	4b0f      	ldr	r3, [pc, #60]	; (19ff4 <dmSecLescMsgHandler+0x54>)
   19fb6:	689b      	ldr	r3, [r3, #8]
    pMsg->hdr.event = DM_SEC_ECC_KEY_IND;
   19fb8:	2234      	movs	r2, #52	; 0x34
   19fba:	7082      	strb	r2, [r0, #2]
}
   19fbc:	b00b      	add	sp, #44	; 0x2c
   19fbe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    (*dmCb.cback)((dmEvt_t *) pMsg);
   19fc2:	4718      	bx	r3
    Calc128Cpy(oobEvt.random, dmSecOobRand);
   19fc4:	4d0c      	ldr	r5, [pc, #48]	; (19ff8 <dmSecLescMsgHandler+0x58>)
    WsfBufFree(pCmacMsg->pPlainText);
   19fc6:	6880      	ldr	r0, [r0, #8]
   19fc8:	f7f5 fc8e 	bl	f8e8 <WsfBufFree>
    oobEvt.hdr.event = DM_SEC_CALC_OOB_IND;
   19fcc:	2333      	movs	r3, #51	; 0x33
    Calc128Cpy(oobEvt.confirm, ((secAes_t *) pMsg)->pCiphertext);
   19fce:	6861      	ldr	r1, [r4, #4]
    oobEvt.hdr.event = DM_SEC_CALC_OOB_IND;
   19fd0:	f8ad 3006 	strh.w	r3, [sp, #6]
    Calc128Cpy(oobEvt.confirm, ((secAes_t *) pMsg)->pCiphertext);
   19fd4:	a802      	add	r0, sp, #8
   19fd6:	f7f9 fa05 	bl	133e4 <Calc128Cpy>
    Calc128Cpy(oobEvt.random, dmSecOobRand);
   19fda:	6829      	ldr	r1, [r5, #0]
   19fdc:	a806      	add	r0, sp, #24
   19fde:	f7f9 fa01 	bl	133e4 <Calc128Cpy>
    WsfBufFree(dmSecOobRand);
   19fe2:	6828      	ldr	r0, [r5, #0]
   19fe4:	f7f5 fc80 	bl	f8e8 <WsfBufFree>
    (*dmCb.cback)((dmEvt_t *) &oobEvt);
   19fe8:	4b02      	ldr	r3, [pc, #8]	; (19ff4 <dmSecLescMsgHandler+0x54>)
   19fea:	a801      	add	r0, sp, #4
   19fec:	689b      	ldr	r3, [r3, #8]
   19fee:	4798      	blx	r3
}
   19ff0:	b00b      	add	sp, #44	; 0x2c
   19ff2:	bd30      	pop	{r4, r5, pc}
   19ff4:	10005960 	.word	0x10005960
   19ff8:	1000599c 	.word	0x1000599c

00019ffc <DmSecGetEccKey>:
 */
/*************************************************************************************************/
secEccKey_t *DmSecGetEccKey(void)
{
  return &localEccKey;
}
   19ffc:	4800      	ldr	r0, [pc, #0]	; (1a000 <DmSecGetEccKey+0x4>)
   19ffe:	4770      	bx	lr
   1a000:	100059a0 	.word	0x100059a0

0001a004 <DmSecLescInit>:
 *  \return None.
 */
/*************************************************************************************************/
void DmSecLescInit(void)
{
  dmFcnIfTbl[DM_ID_LESC] = (dmFcnIf_t *) &dmSecLescFcnIf;
   1a004:	4b01      	ldr	r3, [pc, #4]	; (1a00c <DmSecLescInit+0x8>)
   1a006:	4a02      	ldr	r2, [pc, #8]	; (1a010 <DmSecLescInit+0xc>)
   1a008:	621a      	str	r2, [r3, #32]
}
   1a00a:	4770      	bx	lr
   1a00c:	10002b80 	.word	0x10002b80
   1a010:	00020720 	.word	0x00020720

0001a014 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
   1a014:	b510      	push	{r4, lr}
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
   1a016:	2018      	movs	r0, #24
   1a018:	f001 fdf0 	bl	1bbfc <pvPortMalloc>

		if( pxEventBits != NULL )
   1a01c:	4604      	mov	r4, r0
   1a01e:	b120      	cbz	r0, 1a02a <xEventGroupCreate+0x16>
		{
			pxEventBits->uxEventBits = 0;
   1a020:	2300      	movs	r3, #0
   1a022:	f840 3b04 	str.w	r3, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
   1a026:	f000 f8db 	bl	1a1e0 <vListInitialise>
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
	}
   1a02a:	4620      	mov	r0, r4
   1a02c:	bd10      	pop	{r4, pc}
   1a02e:	bf00      	nop

0001a030 <xEventGroupWaitBits>:
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
   1a030:	b130      	cbz	r0, 1a040 <xEventGroupWaitBits+0x10>
{
   1a032:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
   1a036:	f011 487f 	ands.w	r8, r1, #4278190080	; 0xff000000
   1a03a:	460c      	mov	r4, r1
   1a03c:	d001      	beq.n	1a042 <xEventGroupWaitBits+0x12>
   1a03e:	e7fe      	b.n	1a03e <xEventGroupWaitBits+0xe>
	configASSERT( xEventGroup );
   1a040:	e7fe      	b.n	1a040 <xEventGroupWaitBits+0x10>
	configASSERT( uxBitsToWaitFor != 0 );
   1a042:	b901      	cbnz	r1, 1a046 <xEventGroupWaitBits+0x16>
   1a044:	e7fe      	b.n	1a044 <xEventGroupWaitBits+0x14>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1a046:	4617      	mov	r7, r2
   1a048:	461e      	mov	r6, r3
   1a04a:	4605      	mov	r5, r0
   1a04c:	f001 fb9a 	bl	1b784 <xTaskGetSchedulerState>
   1a050:	b908      	cbnz	r0, 1a056 <xEventGroupWaitBits+0x26>
   1a052:	9b08      	ldr	r3, [sp, #32]
   1a054:	bb8b      	cbnz	r3, 1a0ba <xEventGroupWaitBits+0x8a>
	}
	#endif

	vTaskSuspendAll();
   1a056:	f001 f81f 	bl	1b098 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
   1a05a:	f8d5 9000 	ldr.w	r9, [r5]

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
   1a05e:	b36e      	cbz	r6, 1a0bc <xEventGroupWaitBits+0x8c>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
   1a060:	ea34 0309 	bics.w	r3, r4, r9
   1a064:	d02d      	beq.n	1a0c2 <xEventGroupWaitBits+0x92>
		else if( xTicksToWait == ( TickType_t ) 0 )
   1a066:	9b08      	ldr	r3, [sp, #32]
   1a068:	b393      	cbz	r3, 1a0d0 <xEventGroupWaitBits+0xa0>
			if( xClearOnExit != pdFALSE )
   1a06a:	2f00      	cmp	r7, #0
   1a06c:	bf16      	itet	ne
   1a06e:	f04f 7880 	movne.w	r8, #16777216	; 0x1000000
   1a072:	f04f 6180 	moveq.w	r1, #67108864	; 0x4000000
   1a076:	f04f 61a0 	movne.w	r1, #83886080	; 0x5000000
			if( xWaitForAllBits != pdFALSE )
   1a07a:	2e00      	cmp	r6, #0
   1a07c:	bf08      	it	eq
   1a07e:	4641      	moveq	r1, r8
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
   1a080:	4321      	orrs	r1, r4
   1a082:	461a      	mov	r2, r3
   1a084:	1d28      	adds	r0, r5, #4
   1a086:	f001 fa07 	bl	1b498 <vTaskPlaceOnUnorderedEventList>
	xAlreadyYielded = xTaskResumeAll();
   1a08a:	f001 f94d 	bl	1b328 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
   1a08e:	b948      	cbnz	r0, 1a0a4 <xEventGroupWaitBits+0x74>
			portYIELD_WITHIN_API();
   1a090:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1a094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1a098:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
   1a09c:	f3bf 8f4f 	dsb	sy
   1a0a0:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
   1a0a4:	f001 fb7e 	bl	1b7a4 <uxTaskResetEventItemValue>
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
   1a0a8:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
		uxReturn = uxTaskResetEventItemValue();
   1a0ac:	4681      	mov	r9, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
   1a0ae:	d012      	beq.n	1a0d6 <xEventGroupWaitBits+0xa6>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
   1a0b0:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
}
   1a0b4:	4648      	mov	r0, r9
   1a0b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1a0ba:	e7fe      	b.n	1a0ba <xEventGroupWaitBits+0x8a>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
   1a0bc:	ea14 0f09 	tst.w	r4, r9
   1a0c0:	d0d1      	beq.n	1a066 <xEventGroupWaitBits+0x36>
			if( xClearOnExit != pdFALSE )
   1a0c2:	b12f      	cbz	r7, 1a0d0 <xEventGroupWaitBits+0xa0>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
   1a0c4:	ea29 0404 	bic.w	r4, r9, r4
   1a0c8:	602c      	str	r4, [r5, #0]
	xAlreadyYielded = xTaskResumeAll();
   1a0ca:	f001 f92d 	bl	1b328 <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
   1a0ce:	e7f1      	b.n	1a0b4 <xEventGroupWaitBits+0x84>
	xAlreadyYielded = xTaskResumeAll();
   1a0d0:	f001 f92a 	bl	1b328 <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
   1a0d4:	e7ee      	b.n	1a0b4 <xEventGroupWaitBits+0x84>
			taskENTER_CRITICAL();
   1a0d6:	f7f6 f84d 	bl	10174 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
   1a0da:	f8d5 9000 	ldr.w	r9, [r5]
	if( xWaitForAllBits == pdFALSE )
   1a0de:	b94e      	cbnz	r6, 1a0f4 <xEventGroupWaitBits+0xc4>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
   1a0e0:	ea14 0f09 	tst.w	r4, r9
   1a0e4:	d003      	beq.n	1a0ee <xEventGroupWaitBits+0xbe>
					if( xClearOnExit != pdFALSE )
   1a0e6:	b117      	cbz	r7, 1a0ee <xEventGroupWaitBits+0xbe>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
   1a0e8:	ea29 0404 	bic.w	r4, r9, r4
   1a0ec:	602c      	str	r4, [r5, #0]
			taskEXIT_CRITICAL();
   1a0ee:	f7f6 f85b 	bl	101a8 <vPortExitCritical>
   1a0f2:	e7dd      	b.n	1a0b0 <xEventGroupWaitBits+0x80>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
   1a0f4:	ea34 0309 	bics.w	r3, r4, r9
   1a0f8:	d1f9      	bne.n	1a0ee <xEventGroupWaitBits+0xbe>
   1a0fa:	e7f4      	b.n	1a0e6 <xEventGroupWaitBits+0xb6>

0001a0fc <xEventGroupSetBits>:
	configASSERT( xEventGroup );
   1a0fc:	b130      	cbz	r0, 1a10c <xEventGroupSetBits+0x10>
{
   1a0fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
   1a102:	f011 467f 	ands.w	r6, r1, #4278190080	; 0xff000000
   1a106:	4688      	mov	r8, r1
   1a108:	d001      	beq.n	1a10e <xEventGroupSetBits+0x12>
   1a10a:	e7fe      	b.n	1a10a <xEventGroupSetBits+0xe>
	configASSERT( xEventGroup );
   1a10c:	e7fe      	b.n	1a10c <xEventGroupSetBits+0x10>
   1a10e:	4605      	mov	r5, r0
	vTaskSuspendAll();
   1a110:	f000 ffc2 	bl	1b098 <vTaskSuspendAll>
		pxEventBits->uxEventBits |= uxBitsToSet;
   1a114:	682b      	ldr	r3, [r5, #0]
		pxListItem = listGET_HEAD_ENTRY( pxList );
   1a116:	692c      	ldr	r4, [r5, #16]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1a118:	f105 070c 	add.w	r7, r5, #12
		pxEventBits->uxEventBits |= uxBitsToSet;
   1a11c:	ea48 0303 	orr.w	r3, r8, r3
		while( pxListItem != pxListEnd )
   1a120:	42a7      	cmp	r7, r4
		pxEventBits->uxEventBits |= uxBitsToSet;
   1a122:	602b      	str	r3, [r5, #0]
		while( pxListItem != pxListEnd )
   1a124:	d10c      	bne.n	1a140 <xEventGroupSetBits+0x44>
   1a126:	e01c      	b.n	1a162 <xEventGroupSetBits+0x66>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
   1a128:	ea13 0f0c 	tst.w	r3, ip
   1a12c:	d006      	beq.n	1a13c <xEventGroupSetBits+0x40>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
   1a12e:	01d3      	lsls	r3, r2, #7
					uxBitsToClear |= uxBitsWaitedFor;
   1a130:	bf48      	it	mi
   1a132:	ea46 060c 	orrmi.w	r6, r6, ip
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
   1a136:	f001 fa8b 	bl	1b650 <vTaskRemoveFromUnorderedEventList>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
   1a13a:	682b      	ldr	r3, [r5, #0]
		while( pxListItem != pxListEnd )
   1a13c:	42a7      	cmp	r7, r4
   1a13e:	d00e      	beq.n	1a15e <xEventGroupSetBits+0x62>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
   1a140:	4620      	mov	r0, r4
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
   1a142:	f043 7100 	orr.w	r1, r3, #33554432	; 0x2000000
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
   1a146:	6802      	ldr	r2, [r0, #0]
			pxNext = listGET_NEXT( pxListItem );
   1a148:	6864      	ldr	r4, [r4, #4]
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
   1a14a:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
   1a14e:	f022 4c7f 	bic.w	ip, r2, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
   1a152:	d0e9      	beq.n	1a128 <xEventGroupSetBits+0x2c>
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
   1a154:	ea3c 0e03 	bics.w	lr, ip, r3
   1a158:	d0e9      	beq.n	1a12e <xEventGroupSetBits+0x32>
		while( pxListItem != pxListEnd )
   1a15a:	42a7      	cmp	r7, r4
   1a15c:	d1f0      	bne.n	1a140 <xEventGroupSetBits+0x44>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
   1a15e:	ea23 0306 	bic.w	r3, r3, r6
   1a162:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
   1a164:	f001 f8e0 	bl	1b328 <xTaskResumeAll>
}
   1a168:	6828      	ldr	r0, [r5, #0]
   1a16a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a16e:	bf00      	nop

0001a170 <vEventGroupSetBitsCallback>:
	configASSERT( xEventGroup );
   1a170:	b130      	cbz	r0, 1a180 <vEventGroupSetBitsCallback+0x10>
{
   1a172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
   1a176:	f011 467f 	ands.w	r6, r1, #4278190080	; 0xff000000
   1a17a:	4688      	mov	r8, r1
   1a17c:	d001      	beq.n	1a182 <vEventGroupSetBitsCallback+0x12>
   1a17e:	e7fe      	b.n	1a17e <vEventGroupSetBitsCallback+0xe>
	configASSERT( xEventGroup );
   1a180:	e7fe      	b.n	1a180 <vEventGroupSetBitsCallback+0x10>
   1a182:	4605      	mov	r5, r0
	vTaskSuspendAll();
   1a184:	f000 ff88 	bl	1b098 <vTaskSuspendAll>
		pxEventBits->uxEventBits |= uxBitsToSet;
   1a188:	682b      	ldr	r3, [r5, #0]
		pxListItem = listGET_HEAD_ENTRY( pxList );
   1a18a:	692c      	ldr	r4, [r5, #16]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1a18c:	f105 070c 	add.w	r7, r5, #12
		pxEventBits->uxEventBits |= uxBitsToSet;
   1a190:	ea48 0303 	orr.w	r3, r8, r3
		while( pxListItem != pxListEnd )
   1a194:	42a7      	cmp	r7, r4
		pxEventBits->uxEventBits |= uxBitsToSet;
   1a196:	602b      	str	r3, [r5, #0]
		while( pxListItem != pxListEnd )
   1a198:	d10c      	bne.n	1a1b4 <vEventGroupSetBitsCallback+0x44>
   1a19a:	e01c      	b.n	1a1d6 <vEventGroupSetBitsCallback+0x66>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
   1a19c:	ea1c 0f03 	tst.w	ip, r3
   1a1a0:	d006      	beq.n	1a1b0 <vEventGroupSetBitsCallback+0x40>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
   1a1a2:	01d3      	lsls	r3, r2, #7
					uxBitsToClear |= uxBitsWaitedFor;
   1a1a4:	bf48      	it	mi
   1a1a6:	ea46 060c 	orrmi.w	r6, r6, ip
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
   1a1aa:	f001 fa51 	bl	1b650 <vTaskRemoveFromUnorderedEventList>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
   1a1ae:	682b      	ldr	r3, [r5, #0]
		while( pxListItem != pxListEnd )
   1a1b0:	42a7      	cmp	r7, r4
   1a1b2:	d00e      	beq.n	1a1d2 <vEventGroupSetBitsCallback+0x62>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
   1a1b4:	4620      	mov	r0, r4
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
   1a1b6:	f043 7100 	orr.w	r1, r3, #33554432	; 0x2000000
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
   1a1ba:	6802      	ldr	r2, [r0, #0]
			pxNext = listGET_NEXT( pxListItem );
   1a1bc:	6864      	ldr	r4, [r4, #4]
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
   1a1be:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
   1a1c2:	f022 4c7f 	bic.w	ip, r2, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
   1a1c6:	d0e9      	beq.n	1a19c <vEventGroupSetBitsCallback+0x2c>
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
   1a1c8:	ea3c 0e03 	bics.w	lr, ip, r3
   1a1cc:	d0e9      	beq.n	1a1a2 <vEventGroupSetBitsCallback+0x32>
		while( pxListItem != pxListEnd )
   1a1ce:	42a7      	cmp	r7, r4
   1a1d0:	d1f0      	bne.n	1a1b4 <vEventGroupSetBitsCallback+0x44>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
   1a1d2:	ea23 0306 	bic.w	r3, r3, r6
   1a1d6:	602b      	str	r3, [r5, #0]
}
   1a1d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	( void ) xTaskResumeAll();
   1a1dc:	f001 b8a4 	b.w	1b328 <xTaskResumeAll>

0001a1e0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1a1e0:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1a1e4:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   1a1e8:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1a1ea:	e9c0 3101 	strd	r3, r1, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1a1ee:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   1a1f2:	6002      	str	r2, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   1a1f4:	4770      	bx	lr
   1a1f6:	bf00      	nop

0001a1f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
   1a1f8:	2300      	movs	r3, #0
   1a1fa:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   1a1fc:	4770      	bx	lr
   1a1fe:	bf00      	nop

0001a200 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
   1a200:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   1a202:	689a      	ldr	r2, [r3, #8]
   1a204:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
   1a206:	6802      	ldr	r2, [r0, #0]
{
   1a208:	b410      	push	{r4}
	pxIndex->pxPrevious->pxNext = pxNewListItem;
   1a20a:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
   1a20c:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
   1a20e:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
   1a210:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
   1a212:	6099      	str	r1, [r3, #8]
}
   1a214:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
   1a218:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
   1a21a:	6002      	str	r2, [r0, #0]
}
   1a21c:	4770      	bx	lr
   1a21e:	bf00      	nop

0001a220 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1a220:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   1a222:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   1a224:	1c6b      	adds	r3, r5, #1
   1a226:	d010      	beq.n	1a24a <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
   1a228:	f100 0308 	add.w	r3, r0, #8
   1a22c:	461c      	mov	r4, r3
   1a22e:	685b      	ldr	r3, [r3, #4]
   1a230:	681a      	ldr	r2, [r3, #0]
   1a232:	42aa      	cmp	r2, r5
   1a234:	d9fa      	bls.n	1a22c <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
   1a236:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
   1a238:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
   1a23a:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1a23c:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   1a23e:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
   1a240:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
   1a242:	6108      	str	r0, [r1, #16]
}
   1a244:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
   1a246:	6002      	str	r2, [r0, #0]
}
   1a248:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
   1a24a:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
   1a24c:	6863      	ldr	r3, [r4, #4]
   1a24e:	e7f2      	b.n	1a236 <vListInsert+0x16>

0001a250 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
   1a250:	6903      	ldr	r3, [r0, #16]
{
   1a252:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1a254:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   1a258:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1a25a:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
   1a25c:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   1a25e:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   1a260:	bf08      	it	eq
   1a262:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
   1a264:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
   1a266:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxContainer = NULL;
   1a26a:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
   1a26c:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
   1a26e:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
   1a270:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
   1a272:	6818      	ldr	r0, [r3, #0]
}
   1a274:	4770      	bx	lr
   1a276:	bf00      	nop

0001a278 <xQueueGenericCreate>:
	{
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1a278:	b358      	cbz	r0, 1a2d2 <xQueueGenericCreate+0x5a>
	{
   1a27a:	b570      	push	{r4, r5, r6, lr}
   1a27c:	460e      	mov	r6, r1
   1a27e:	4605      	mov	r5, r0

		if( uxItemSize == ( UBaseType_t ) 0 )
   1a280:	bb41      	cbnz	r1, 1a2d4 <xQueueGenericCreate+0x5c>
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
   1a282:	2048      	movs	r0, #72	; 0x48
   1a284:	f001 fcba 	bl	1bbfc <pvPortMalloc>

		if( pxNewQueue != NULL )
   1a288:	4604      	mov	r4, r0
   1a28a:	b370      	cbz	r0, 1a2ea <xQueueGenericCreate+0x72>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1a28c:	6024      	str	r4, [r4, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
	pxNewQueue->uxItemSize = uxItemSize;
   1a28e:	e9c4 560f 	strd	r5, r6, [r4, #60]	; 0x3c
	taskENTER_CRITICAL();
   1a292:	f7f5 ff6f 	bl	10174 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   1a296:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
   1a29a:	6821      	ldr	r1, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1a29c:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   1a29e:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   1a2a2:	1ad3      	subs	r3, r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   1a2a4:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   1a2a6:	440b      	add	r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   1a2a8:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1a2aa:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
   1a2ac:	22ff      	movs	r2, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1a2ae:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   1a2b0:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1a2b2:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1a2b6:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
   1a2ba:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1a2be:	f7ff ff8f 	bl	1a1e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1a2c2:	f104 0024 	add.w	r0, r4, #36	; 0x24
   1a2c6:	f7ff ff8b 	bl	1a1e0 <vListInitialise>
	taskEXIT_CRITICAL();
   1a2ca:	f7f5 ff6d 	bl	101a8 <vPortExitCritical>
	}
   1a2ce:	4620      	mov	r0, r4
   1a2d0:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1a2d2:	e7fe      	b.n	1a2d2 <xQueueGenericCreate+0x5a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1a2d4:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
   1a2d8:	3048      	adds	r0, #72	; 0x48
   1a2da:	f001 fc8f 	bl	1bbfc <pvPortMalloc>
		if( pxNewQueue != NULL )
   1a2de:	4604      	mov	r4, r0
   1a2e0:	b118      	cbz	r0, 1a2ea <xQueueGenericCreate+0x72>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   1a2e2:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1a2e6:	6003      	str	r3, [r0, #0]
   1a2e8:	e7d1      	b.n	1a28e <xQueueGenericCreate+0x16>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
   1a2ea:	2400      	movs	r4, #0
	}
   1a2ec:	4620      	mov	r0, r4
   1a2ee:	bd70      	pop	{r4, r5, r6, pc}

0001a2f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1a2f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a2f4:	b085      	sub	sp, #20
   1a2f6:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;

	configASSERT( pxQueue );
   1a2f8:	b158      	cbz	r0, 1a312 <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1a2fa:	4688      	mov	r8, r1
   1a2fc:	461f      	mov	r7, r3
   1a2fe:	4604      	mov	r4, r0
   1a300:	2900      	cmp	r1, #0
   1a302:	f000 808d 	beq.w	1a420 <xQueueGenericSend+0x130>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1a306:	2f02      	cmp	r7, #2
   1a308:	d104      	bne.n	1a314 <xQueueGenericSend+0x24>
   1a30a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1a30c:	2b01      	cmp	r3, #1
   1a30e:	d001      	beq.n	1a314 <xQueueGenericSend+0x24>
   1a310:	e7fe      	b.n	1a310 <xQueueGenericSend+0x20>
	configASSERT( pxQueue );
   1a312:	e7fe      	b.n	1a312 <xQueueGenericSend+0x22>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1a314:	f001 fa36 	bl	1b784 <xTaskGetSchedulerState>
   1a318:	4605      	mov	r5, r0
   1a31a:	2800      	cmp	r0, #0
   1a31c:	f040 8086 	bne.w	1a42c <xQueueGenericSend+0x13c>
   1a320:	9b01      	ldr	r3, [sp, #4]
   1a322:	2b00      	cmp	r3, #0
   1a324:	f040 8081 	bne.w	1a42a <xQueueGenericSend+0x13a>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1a328:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskENTER_CRITICAL();
   1a32c:	f7f5 ff22 	bl	10174 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1a330:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   1a332:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1a334:	429a      	cmp	r2, r3
   1a336:	f0c0 80ec 	bcc.w	1a512 <xQueueGenericSend+0x222>
   1a33a:	2f02      	cmp	r7, #2
   1a33c:	f000 80d1 	beq.w	1a4e2 <xQueueGenericSend+0x1f2>
				if( xTicksToWait == ( TickType_t ) 0 )
   1a340:	9801      	ldr	r0, [sp, #4]
   1a342:	2800      	cmp	r0, #0
   1a344:	f000 80f4 	beq.w	1a530 <xQueueGenericSend+0x240>
				else if( xEntryTimeSet == pdFALSE )
   1a348:	2d00      	cmp	r5, #0
   1a34a:	f000 80c6 	beq.w	1a4da <xQueueGenericSend+0x1ea>
		taskEXIT_CRITICAL();
   1a34e:	f7f5 ff2b 	bl	101a8 <vPortExitCritical>
		vTaskSuspendAll();
   1a352:	f000 fea1 	bl	1b098 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   1a356:	f7f5 ff0d 	bl	10174 <vPortEnterCritical>
   1a35a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   1a35e:	2bff      	cmp	r3, #255	; 0xff
   1a360:	bf04      	itt	eq
   1a362:	2300      	moveq	r3, #0
   1a364:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
   1a368:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   1a36c:	2bff      	cmp	r3, #255	; 0xff
   1a36e:	bf04      	itt	eq
   1a370:	2300      	moveq	r3, #0
   1a372:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
   1a376:	f7f5 ff17 	bl	101a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1a37a:	a901      	add	r1, sp, #4
   1a37c:	a802      	add	r0, sp, #8
   1a37e:	f001 f9a7 	bl	1b6d0 <xTaskCheckForTimeOut>
   1a382:	2800      	cmp	r0, #0
   1a384:	f040 80d9 	bne.w	1a53a <xQueueGenericSend+0x24a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1a388:	f7f5 fef4 	bl	10174 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1a38c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   1a38e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1a390:	429a      	cmp	r2, r3
   1a392:	d04d      	beq.n	1a430 <xQueueGenericSend+0x140>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
   1a394:	f7f5 ff08 	bl	101a8 <vPortExitCritical>
	taskENTER_CRITICAL();
   1a398:	f7f5 feec 	bl	10174 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
   1a39c:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
   1a3a0:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1a3a2:	2d00      	cmp	r5, #0
   1a3a4:	dc04      	bgt.n	1a3b0 <xQueueGenericSend+0xc0>
   1a3a6:	e011      	b.n	1a3cc <xQueueGenericSend+0xdc>
			--cTxLock;
   1a3a8:	1e6a      	subs	r2, r5, #1
   1a3aa:	b2d3      	uxtb	r3, r2
   1a3ac:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1a3ae:	b16b      	cbz	r3, 1a3cc <xQueueGenericSend+0xdc>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1a3b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1a3b2:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1a3b4:	b153      	cbz	r3, 1a3cc <xQueueGenericSend+0xdc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1a3b6:	f001 f8f7 	bl	1b5a8 <xTaskRemoveFromEventList>
   1a3ba:	2800      	cmp	r0, #0
   1a3bc:	d0f4      	beq.n	1a3a8 <xQueueGenericSend+0xb8>
						vTaskMissedYield();
   1a3be:	f001 f9bf 	bl	1b740 <vTaskMissedYield>
			--cTxLock;
   1a3c2:	1e6a      	subs	r2, r5, #1
   1a3c4:	b2d3      	uxtb	r3, r2
   1a3c6:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1a3c8:	2b00      	cmp	r3, #0
   1a3ca:	d1f1      	bne.n	1a3b0 <xQueueGenericSend+0xc0>
		pxQueue->cTxLock = queueUNLOCKED;
   1a3cc:	23ff      	movs	r3, #255	; 0xff
   1a3ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
   1a3d2:	f7f5 fee9 	bl	101a8 <vPortExitCritical>
	taskENTER_CRITICAL();
   1a3d6:	f7f5 fecd 	bl	10174 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
   1a3da:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   1a3de:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1a3e0:	2d00      	cmp	r5, #0
   1a3e2:	dd14      	ble.n	1a40e <xQueueGenericSend+0x11e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1a3e4:	f104 0910 	add.w	r9, r4, #16
   1a3e8:	e003      	b.n	1a3f2 <xQueueGenericSend+0x102>
				--cRxLock;
   1a3ea:	1e6a      	subs	r2, r5, #1
   1a3ec:	b2d3      	uxtb	r3, r2
   1a3ee:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1a3f0:	b16b      	cbz	r3, 1a40e <xQueueGenericSend+0x11e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1a3f2:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1a3f4:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1a3f6:	b153      	cbz	r3, 1a40e <xQueueGenericSend+0x11e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1a3f8:	f001 f8d6 	bl	1b5a8 <xTaskRemoveFromEventList>
   1a3fc:	2800      	cmp	r0, #0
   1a3fe:	d0f4      	beq.n	1a3ea <xQueueGenericSend+0xfa>
					vTaskMissedYield();
   1a400:	f001 f99e 	bl	1b740 <vTaskMissedYield>
				--cRxLock;
   1a404:	1e6a      	subs	r2, r5, #1
   1a406:	b2d3      	uxtb	r3, r2
   1a408:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1a40a:	2b00      	cmp	r3, #0
   1a40c:	d1f1      	bne.n	1a3f2 <xQueueGenericSend+0x102>
		pxQueue->cRxLock = queueUNLOCKED;
   1a40e:	23ff      	movs	r3, #255	; 0xff
   1a410:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
   1a414:	f7f5 fec8 	bl	101a8 <vPortExitCritical>
				( void ) xTaskResumeAll();
   1a418:	f000 ff86 	bl	1b328 <xTaskResumeAll>
   1a41c:	2501      	movs	r5, #1
   1a41e:	e785      	b.n	1a32c <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1a420:	6c03      	ldr	r3, [r0, #64]	; 0x40
   1a422:	2b00      	cmp	r3, #0
   1a424:	f43f af6f 	beq.w	1a306 <xQueueGenericSend+0x16>
   1a428:	e7fe      	b.n	1a428 <xQueueGenericSend+0x138>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1a42a:	e7fe      	b.n	1a42a <xQueueGenericSend+0x13a>
   1a42c:	2500      	movs	r5, #0
   1a42e:	e77b      	b.n	1a328 <xQueueGenericSend+0x38>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1a430:	f104 0910 	add.w	r9, r4, #16
	taskEXIT_CRITICAL();
   1a434:	f7f5 feb8 	bl	101a8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1a438:	9901      	ldr	r1, [sp, #4]
   1a43a:	4648      	mov	r0, r9
   1a43c:	f000 fff0 	bl	1b420 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
   1a440:	f7f5 fe98 	bl	10174 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
   1a444:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   1a448:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1a44a:	2d00      	cmp	r5, #0
   1a44c:	dc04      	bgt.n	1a458 <xQueueGenericSend+0x168>
   1a44e:	e011      	b.n	1a474 <xQueueGenericSend+0x184>
			--cTxLock;
   1a450:	1e6b      	subs	r3, r5, #1
   1a452:	b2da      	uxtb	r2, r3
   1a454:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1a456:	b16a      	cbz	r2, 1a474 <xQueueGenericSend+0x184>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1a458:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1a45a:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1a45c:	b153      	cbz	r3, 1a474 <xQueueGenericSend+0x184>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1a45e:	f001 f8a3 	bl	1b5a8 <xTaskRemoveFromEventList>
   1a462:	2800      	cmp	r0, #0
   1a464:	d0f4      	beq.n	1a450 <xQueueGenericSend+0x160>
						vTaskMissedYield();
   1a466:	f001 f96b 	bl	1b740 <vTaskMissedYield>
			--cTxLock;
   1a46a:	1e6b      	subs	r3, r5, #1
   1a46c:	b2da      	uxtb	r2, r3
   1a46e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1a470:	2a00      	cmp	r2, #0
   1a472:	d1f1      	bne.n	1a458 <xQueueGenericSend+0x168>
		pxQueue->cTxLock = queueUNLOCKED;
   1a474:	23ff      	movs	r3, #255	; 0xff
   1a476:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
   1a47a:	f7f5 fe95 	bl	101a8 <vPortExitCritical>
	taskENTER_CRITICAL();
   1a47e:	f7f5 fe79 	bl	10174 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
   1a482:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   1a486:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1a488:	2d00      	cmp	r5, #0
   1a48a:	dc04      	bgt.n	1a496 <xQueueGenericSend+0x1a6>
   1a48c:	e011      	b.n	1a4b2 <xQueueGenericSend+0x1c2>
				--cRxLock;
   1a48e:	1e6b      	subs	r3, r5, #1
   1a490:	b2da      	uxtb	r2, r3
   1a492:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1a494:	b16a      	cbz	r2, 1a4b2 <xQueueGenericSend+0x1c2>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1a496:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1a498:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1a49a:	b153      	cbz	r3, 1a4b2 <xQueueGenericSend+0x1c2>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1a49c:	f001 f884 	bl	1b5a8 <xTaskRemoveFromEventList>
   1a4a0:	2800      	cmp	r0, #0
   1a4a2:	d0f4      	beq.n	1a48e <xQueueGenericSend+0x19e>
					vTaskMissedYield();
   1a4a4:	f001 f94c 	bl	1b740 <vTaskMissedYield>
				--cRxLock;
   1a4a8:	1e6b      	subs	r3, r5, #1
   1a4aa:	b2da      	uxtb	r2, r3
   1a4ac:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1a4ae:	2a00      	cmp	r2, #0
   1a4b0:	d1f1      	bne.n	1a496 <xQueueGenericSend+0x1a6>
		pxQueue->cRxLock = queueUNLOCKED;
   1a4b2:	23ff      	movs	r3, #255	; 0xff
   1a4b4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
   1a4b8:	f7f5 fe76 	bl	101a8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
   1a4bc:	f000 ff34 	bl	1b328 <xTaskResumeAll>
   1a4c0:	2800      	cmp	r0, #0
   1a4c2:	d1ab      	bne.n	1a41c <xQueueGenericSend+0x12c>
					portYIELD_WITHIN_API();
   1a4c4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1a4c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1a4cc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
   1a4d0:	f3bf 8f4f 	dsb	sy
   1a4d4:	f3bf 8f6f 	isb	sy
   1a4d8:	e7a0      	b.n	1a41c <xQueueGenericSend+0x12c>
					vTaskInternalSetTimeOutState( &xTimeOut );
   1a4da:	a802      	add	r0, sp, #8
   1a4dc:	f001 f8ec 	bl	1b6b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   1a4e0:	e735      	b.n	1a34e <xQueueGenericSend+0x5e>
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1a4e2:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1a4e4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1a4e6:	b1c2      	cbz	r2, 1a51a <xQueueGenericSend+0x22a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
   1a4e8:	4641      	mov	r1, r8
   1a4ea:	68e0      	ldr	r0, [r4, #12]
   1a4ec:	f7f1 fe08 	bl	c100 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   1a4f0:	6c22      	ldr	r2, [r4, #64]	; 0x40
   1a4f2:	68e3      	ldr	r3, [r4, #12]
   1a4f4:	4251      	negs	r1, r2
   1a4f6:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1a4f8:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   1a4fa:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1a4fc:	4293      	cmp	r3, r2
   1a4fe:	d204      	bcs.n	1a50a <xQueueGenericSend+0x21a>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
   1a500:	68a3      	ldr	r3, [r4, #8]
   1a502:	440b      	add	r3, r1
   1a504:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
   1a506:	2f02      	cmp	r7, #2
   1a508:	d107      	bne.n	1a51a <xQueueGenericSend+0x22a>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1a50a:	2d01      	cmp	r5, #1
   1a50c:	bf38      	it	cc
   1a50e:	2501      	movcc	r5, #1
   1a510:	e004      	b.n	1a51c <xQueueGenericSend+0x22c>
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1a512:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1a514:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1a516:	2a00      	cmp	r2, #0
   1a518:	d15e      	bne.n	1a5d8 <xQueueGenericSend+0x2e8>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1a51a:	3501      	adds	r5, #1
   1a51c:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1a51e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a520:	2b00      	cmp	r3, #0
   1a522:	d148      	bne.n	1a5b6 <xQueueGenericSend+0x2c6>
				taskEXIT_CRITICAL();
   1a524:	f7f5 fe40 	bl	101a8 <vPortExitCritical>
				return pdPASS;
   1a528:	2001      	movs	r0, #1
}
   1a52a:	b005      	add	sp, #20
   1a52c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1a530:	9000      	str	r0, [sp, #0]
					taskEXIT_CRITICAL();
   1a532:	f7f5 fe39 	bl	101a8 <vPortExitCritical>
					return errQUEUE_FULL;
   1a536:	9800      	ldr	r0, [sp, #0]
   1a538:	e7f7      	b.n	1a52a <xQueueGenericSend+0x23a>
	taskENTER_CRITICAL();
   1a53a:	f7f5 fe1b 	bl	10174 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
   1a53e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   1a542:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1a544:	2d00      	cmp	r5, #0
   1a546:	dd10      	ble.n	1a56a <xQueueGenericSend+0x27a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1a548:	f104 0624 	add.w	r6, r4, #36	; 0x24
   1a54c:	e003      	b.n	1a556 <xQueueGenericSend+0x266>
			--cTxLock;
   1a54e:	1e6b      	subs	r3, r5, #1
   1a550:	b2da      	uxtb	r2, r3
   1a552:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1a554:	b14a      	cbz	r2, 1a56a <xQueueGenericSend+0x27a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1a556:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1a558:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1a55a:	b133      	cbz	r3, 1a56a <xQueueGenericSend+0x27a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1a55c:	f001 f824 	bl	1b5a8 <xTaskRemoveFromEventList>
   1a560:	2800      	cmp	r0, #0
   1a562:	d0f4      	beq.n	1a54e <xQueueGenericSend+0x25e>
						vTaskMissedYield();
   1a564:	f001 f8ec 	bl	1b740 <vTaskMissedYield>
   1a568:	e7f1      	b.n	1a54e <xQueueGenericSend+0x25e>
		pxQueue->cTxLock = queueUNLOCKED;
   1a56a:	23ff      	movs	r3, #255	; 0xff
   1a56c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
   1a570:	f7f5 fe1a 	bl	101a8 <vPortExitCritical>
	taskENTER_CRITICAL();
   1a574:	f7f5 fdfe 	bl	10174 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
   1a578:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   1a57c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1a57e:	2d00      	cmp	r5, #0
   1a580:	dd10      	ble.n	1a5a4 <xQueueGenericSend+0x2b4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1a582:	f104 0610 	add.w	r6, r4, #16
   1a586:	e003      	b.n	1a590 <xQueueGenericSend+0x2a0>
				--cRxLock;
   1a588:	1e6b      	subs	r3, r5, #1
   1a58a:	b2da      	uxtb	r2, r3
   1a58c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1a58e:	b14a      	cbz	r2, 1a5a4 <xQueueGenericSend+0x2b4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1a590:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1a592:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1a594:	b133      	cbz	r3, 1a5a4 <xQueueGenericSend+0x2b4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1a596:	f001 f807 	bl	1b5a8 <xTaskRemoveFromEventList>
   1a59a:	2800      	cmp	r0, #0
   1a59c:	d0f4      	beq.n	1a588 <xQueueGenericSend+0x298>
					vTaskMissedYield();
   1a59e:	f001 f8cf 	bl	1b740 <vTaskMissedYield>
   1a5a2:	e7f1      	b.n	1a588 <xQueueGenericSend+0x298>
		pxQueue->cRxLock = queueUNLOCKED;
   1a5a4:	23ff      	movs	r3, #255	; 0xff
   1a5a6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
   1a5aa:	f7f5 fdfd 	bl	101a8 <vPortExitCritical>
			( void ) xTaskResumeAll();
   1a5ae:	f000 febb 	bl	1b328 <xTaskResumeAll>
			return errQUEUE_FULL;
   1a5b2:	2000      	movs	r0, #0
   1a5b4:	e7b9      	b.n	1a52a <xQueueGenericSend+0x23a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1a5b6:	f104 0024 	add.w	r0, r4, #36	; 0x24
   1a5ba:	f000 fff5 	bl	1b5a8 <xTaskRemoveFromEventList>
   1a5be:	2800      	cmp	r0, #0
   1a5c0:	d0b0      	beq.n	1a524 <xQueueGenericSend+0x234>
							queueYIELD_IF_USING_PREEMPTION();
   1a5c2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1a5c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1a5ca:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
   1a5ce:	f3bf 8f4f 	dsb	sy
   1a5d2:	f3bf 8f6f 	isb	sy
   1a5d6:	e7a5      	b.n	1a524 <xQueueGenericSend+0x234>
	else if( xPosition == queueSEND_TO_BACK )
   1a5d8:	b977      	cbnz	r7, 1a5f8 <xQueueGenericSend+0x308>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
   1a5da:	4641      	mov	r1, r8
   1a5dc:	6860      	ldr	r0, [r4, #4]
   1a5de:	f7f1 fd8f 	bl	c100 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   1a5e2:	6863      	ldr	r3, [r4, #4]
   1a5e4:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1a5e6:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   1a5e8:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1a5ea:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   1a5ec:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1a5ee:	d394      	bcc.n	1a51a <xQueueGenericSend+0x22a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1a5f0:	6823      	ldr	r3, [r4, #0]
   1a5f2:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1a5f4:	3501      	adds	r5, #1
   1a5f6:	e791      	b.n	1a51c <xQueueGenericSend+0x22c>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
   1a5f8:	4641      	mov	r1, r8
   1a5fa:	68e0      	ldr	r0, [r4, #12]
   1a5fc:	f7f1 fd80 	bl	c100 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   1a600:	6c22      	ldr	r2, [r4, #64]	; 0x40
   1a602:	68e3      	ldr	r3, [r4, #12]
   1a604:	4251      	negs	r1, r2
   1a606:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1a608:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   1a60a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1a60c:	4293      	cmp	r3, r2
   1a60e:	f4bf af7a 	bcs.w	1a506 <xQueueGenericSend+0x216>
   1a612:	e775      	b.n	1a500 <xQueueGenericSend+0x210>

0001a614 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
   1a614:	b160      	cbz	r0, 1a630 <xQueueGenericSendFromISR+0x1c>
{
   1a616:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a61a:	460e      	mov	r6, r1
   1a61c:	4617      	mov	r7, r2
   1a61e:	461d      	mov	r5, r3
   1a620:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1a622:	b1e9      	cbz	r1, 1a660 <xQueueGenericSendFromISR+0x4c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1a624:	2d02      	cmp	r5, #2
   1a626:	d104      	bne.n	1a632 <xQueueGenericSendFromISR+0x1e>
   1a628:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1a62a:	2b01      	cmp	r3, #1
   1a62c:	d001      	beq.n	1a632 <xQueueGenericSendFromISR+0x1e>
   1a62e:	e7fe      	b.n	1a62e <xQueueGenericSendFromISR+0x1a>
	configASSERT( pxQueue );
   1a630:	e7fe      	b.n	1a630 <xQueueGenericSendFromISR+0x1c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   1a632:	f7f5 fe0d 	bl	10250 <vPortValidateInterruptPriority>
	__asm volatile
   1a636:	f3ef 8a11 	mrs	sl, BASEPRI
   1a63a:	f04f 0380 	mov.w	r3, #128	; 0x80
   1a63e:	f383 8811 	msr	BASEPRI, r3
   1a642:	f3bf 8f6f 	isb	sy
   1a646:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1a64a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   1a64c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1a64e:	429a      	cmp	r2, r3
   1a650:	d339      	bcc.n	1a6c6 <xQueueGenericSendFromISR+0xb2>
   1a652:	2d02      	cmp	r5, #2
   1a654:	d008      	beq.n	1a668 <xQueueGenericSendFromISR+0x54>
			xReturn = errQUEUE_FULL;
   1a656:	2000      	movs	r0, #0
	__asm volatile
   1a658:	f38a 8811 	msr	BASEPRI, sl
}
   1a65c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1a660:	6c03      	ldr	r3, [r0, #64]	; 0x40
   1a662:	2b00      	cmp	r3, #0
   1a664:	d0de      	beq.n	1a624 <xQueueGenericSendFromISR+0x10>
   1a666:	e7fe      	b.n	1a666 <xQueueGenericSendFromISR+0x52>
			const int8_t cTxLock = pxQueue->cTxLock;
   1a668:	f894 8045 	ldrb.w	r8, [r4, #69]	; 0x45
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1a66c:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1a66e:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
   1a672:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1a676:	b1b2      	cbz	r2, 1a6a6 <xQueueGenericSendFromISR+0x92>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
   1a678:	4631      	mov	r1, r6
   1a67a:	68e0      	ldr	r0, [r4, #12]
   1a67c:	f7f1 fd40 	bl	c100 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   1a680:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1a682:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1a684:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   1a686:	1ad2      	subs	r2, r2, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1a688:	428a      	cmp	r2, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   1a68a:	60e2      	str	r2, [r4, #12]
   1a68c:	f1c3 0300 	rsb	r3, r3, #0
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1a690:	d204      	bcs.n	1a69c <xQueueGenericSendFromISR+0x88>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
   1a692:	68a2      	ldr	r2, [r4, #8]
   1a694:	4413      	add	r3, r2
   1a696:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
   1a698:	2d02      	cmp	r5, #2
   1a69a:	d104      	bne.n	1a6a6 <xQueueGenericSendFromISR+0x92>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1a69c:	464b      	mov	r3, r9
   1a69e:	2b01      	cmp	r3, #1
   1a6a0:	bf38      	it	cc
   1a6a2:	2301      	movcc	r3, #1
   1a6a4:	e001      	b.n	1a6aa <xQueueGenericSendFromISR+0x96>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1a6a6:	f109 0301 	add.w	r3, r9, #1
			if( cTxLock == queueUNLOCKED )
   1a6aa:	f1b8 3fff 	cmp.w	r8, #4294967295
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1a6ae:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
   1a6b0:	d023      	beq.n	1a6fa <xQueueGenericSendFromISR+0xe6>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1a6b2:	f108 0301 	add.w	r3, r8, #1
   1a6b6:	b25b      	sxtb	r3, r3
   1a6b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
   1a6bc:	2001      	movs	r0, #1
   1a6be:	f38a 8811 	msr	BASEPRI, sl
}
   1a6c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
   1a6c6:	f894 8045 	ldrb.w	r8, [r4, #69]	; 0x45
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1a6ca:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1a6cc:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
   1a6d0:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1a6d4:	2a00      	cmp	r2, #0
   1a6d6:	d0e6      	beq.n	1a6a6 <xQueueGenericSendFromISR+0x92>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
   1a6d8:	4631      	mov	r1, r6
	else if( xPosition == queueSEND_TO_BACK )
   1a6da:	b9e5      	cbnz	r5, 1a716 <xQueueGenericSendFromISR+0x102>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
   1a6dc:	6860      	ldr	r0, [r4, #4]
   1a6de:	f7f1 fd0f 	bl	c100 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   1a6e2:	6863      	ldr	r3, [r4, #4]
   1a6e4:	6c22      	ldr	r2, [r4, #64]	; 0x40
   1a6e6:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1a6e8:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   1a6ea:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1a6ec:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1a6ee:	bf24      	itt	cs
   1a6f0:	6822      	ldrcs	r2, [r4, #0]
   1a6f2:	6062      	strcs	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1a6f4:	f109 0301 	add.w	r3, r9, #1
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1a6f8:	e7d7      	b.n	1a6aa <xQueueGenericSendFromISR+0x96>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1a6fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a6fc:	2b00      	cmp	r3, #0
   1a6fe:	d0dd      	beq.n	1a6bc <xQueueGenericSendFromISR+0xa8>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1a700:	f104 0024 	add.w	r0, r4, #36	; 0x24
   1a704:	f000 ff50 	bl	1b5a8 <xTaskRemoveFromEventList>
   1a708:	2800      	cmp	r0, #0
   1a70a:	d0d7      	beq.n	1a6bc <xQueueGenericSendFromISR+0xa8>
							if( pxHigherPriorityTaskWoken != NULL )
   1a70c:	2f00      	cmp	r7, #0
   1a70e:	d0d5      	beq.n	1a6bc <xQueueGenericSendFromISR+0xa8>
								*pxHigherPriorityTaskWoken = pdTRUE;
   1a710:	2001      	movs	r0, #1
   1a712:	6038      	str	r0, [r7, #0]
   1a714:	e7a0      	b.n	1a658 <xQueueGenericSendFromISR+0x44>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
   1a716:	68e0      	ldr	r0, [r4, #12]
   1a718:	f7f1 fcf2 	bl	c100 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   1a71c:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1a71e:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1a720:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   1a722:	1ad2      	subs	r2, r2, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1a724:	428a      	cmp	r2, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   1a726:	60e2      	str	r2, [r4, #12]
   1a728:	f1c3 0300 	rsb	r3, r3, #0
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1a72c:	d2b4      	bcs.n	1a698 <xQueueGenericSendFromISR+0x84>
   1a72e:	e7b0      	b.n	1a692 <xQueueGenericSendFromISR+0x7e>

0001a730 <xQueueReceive>:
{
   1a730:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a734:	b085      	sub	sp, #20
   1a736:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
   1a738:	2800      	cmp	r0, #0
   1a73a:	f000 8099 	beq.w	1a870 <xQueueReceive+0x140>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1a73e:	460f      	mov	r7, r1
   1a740:	4604      	mov	r4, r0
   1a742:	2900      	cmp	r1, #0
   1a744:	f000 8095 	beq.w	1a872 <xQueueReceive+0x142>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1a748:	f001 f81c 	bl	1b784 <xTaskGetSchedulerState>
   1a74c:	2800      	cmp	r0, #0
   1a74e:	f000 8095 	beq.w	1a87c <xQueueReceive+0x14c>
		taskENTER_CRITICAL();
   1a752:	f7f5 fd0f 	bl	10174 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1a756:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1a758:	2d00      	cmp	r5, #0
   1a75a:	d172      	bne.n	1a842 <xQueueReceive+0x112>
				if( xTicksToWait == ( TickType_t ) 0 )
   1a75c:	9b01      	ldr	r3, [sp, #4]
   1a75e:	2b00      	cmp	r3, #0
   1a760:	f000 80e2 	beq.w	1a928 <xQueueReceive+0x1f8>
					vTaskInternalSetTimeOutState( &xTimeOut );
   1a764:	a802      	add	r0, sp, #8
   1a766:	f000 ffa7 	bl	1b6b8 <vTaskInternalSetTimeOutState>
		prvLockQueue( pxQueue );
   1a76a:	46a8      	mov	r8, r5
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1a76c:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskEXIT_CRITICAL();
   1a770:	f7f5 fd1a 	bl	101a8 <vPortExitCritical>
		vTaskSuspendAll();
   1a774:	f000 fc90 	bl	1b098 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   1a778:	f7f5 fcfc 	bl	10174 <vPortEnterCritical>
   1a77c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   1a780:	2bff      	cmp	r3, #255	; 0xff
   1a782:	bf08      	it	eq
   1a784:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
   1a788:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   1a78c:	2bff      	cmp	r3, #255	; 0xff
   1a78e:	bf08      	it	eq
   1a790:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
   1a794:	f7f5 fd08 	bl	101a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1a798:	a901      	add	r1, sp, #4
   1a79a:	a802      	add	r0, sp, #8
   1a79c:	f000 ff98 	bl	1b6d0 <xTaskCheckForTimeOut>
   1a7a0:	2800      	cmp	r0, #0
   1a7a2:	d170      	bne.n	1a886 <xQueueReceive+0x156>
	taskENTER_CRITICAL();
   1a7a4:	f7f5 fce6 	bl	10174 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1a7a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1a7aa:	2b00      	cmp	r3, #0
   1a7ac:	f000 80c2 	beq.w	1a934 <xQueueReceive+0x204>
	taskEXIT_CRITICAL();
   1a7b0:	f7f5 fcfa 	bl	101a8 <vPortExitCritical>
	taskENTER_CRITICAL();
   1a7b4:	f7f5 fcde 	bl	10174 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
   1a7b8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   1a7bc:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1a7be:	2d00      	cmp	r5, #0
   1a7c0:	dc04      	bgt.n	1a7cc <xQueueReceive+0x9c>
   1a7c2:	e011      	b.n	1a7e8 <xQueueReceive+0xb8>
			--cTxLock;
   1a7c4:	1e6b      	subs	r3, r5, #1
   1a7c6:	b2da      	uxtb	r2, r3
   1a7c8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1a7ca:	b16a      	cbz	r2, 1a7e8 <xQueueReceive+0xb8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1a7cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1a7ce:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1a7d0:	b153      	cbz	r3, 1a7e8 <xQueueReceive+0xb8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1a7d2:	f000 fee9 	bl	1b5a8 <xTaskRemoveFromEventList>
   1a7d6:	2800      	cmp	r0, #0
   1a7d8:	d0f4      	beq.n	1a7c4 <xQueueReceive+0x94>
						vTaskMissedYield();
   1a7da:	f000 ffb1 	bl	1b740 <vTaskMissedYield>
			--cTxLock;
   1a7de:	1e6b      	subs	r3, r5, #1
   1a7e0:	b2da      	uxtb	r2, r3
   1a7e2:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1a7e4:	2a00      	cmp	r2, #0
   1a7e6:	d1f1      	bne.n	1a7cc <xQueueReceive+0x9c>
		pxQueue->cTxLock = queueUNLOCKED;
   1a7e8:	23ff      	movs	r3, #255	; 0xff
   1a7ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
   1a7ee:	f7f5 fcdb 	bl	101a8 <vPortExitCritical>
	taskENTER_CRITICAL();
   1a7f2:	f7f5 fcbf 	bl	10174 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
   1a7f6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   1a7fa:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1a7fc:	2d00      	cmp	r5, #0
   1a7fe:	dd14      	ble.n	1a82a <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1a800:	f104 0910 	add.w	r9, r4, #16
   1a804:	e003      	b.n	1a80e <xQueueReceive+0xde>
				--cRxLock;
   1a806:	1e6b      	subs	r3, r5, #1
   1a808:	b2da      	uxtb	r2, r3
   1a80a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1a80c:	b16a      	cbz	r2, 1a82a <xQueueReceive+0xfa>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1a80e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1a810:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1a812:	b153      	cbz	r3, 1a82a <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1a814:	f000 fec8 	bl	1b5a8 <xTaskRemoveFromEventList>
   1a818:	2800      	cmp	r0, #0
   1a81a:	d0f4      	beq.n	1a806 <xQueueReceive+0xd6>
					vTaskMissedYield();
   1a81c:	f000 ff90 	bl	1b740 <vTaskMissedYield>
				--cRxLock;
   1a820:	1e6b      	subs	r3, r5, #1
   1a822:	b2da      	uxtb	r2, r3
   1a824:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1a826:	2a00      	cmp	r2, #0
   1a828:	d1f1      	bne.n	1a80e <xQueueReceive+0xde>
		pxQueue->cRxLock = queueUNLOCKED;
   1a82a:	23ff      	movs	r3, #255	; 0xff
   1a82c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
   1a830:	f7f5 fcba 	bl	101a8 <vPortExitCritical>
				( void ) xTaskResumeAll();
   1a834:	f000 fd78 	bl	1b328 <xTaskResumeAll>
		taskENTER_CRITICAL();
   1a838:	f7f5 fc9c 	bl	10174 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1a83c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1a83e:	2d00      	cmp	r5, #0
   1a840:	d06e      	beq.n	1a920 <xQueueReceive+0x1f0>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1a842:	6c22      	ldr	r2, [r4, #64]	; 0x40
   1a844:	b152      	cbz	r2, 1a85c <xQueueReceive+0x12c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   1a846:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1a848:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   1a84a:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1a84c:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   1a84e:	60e1      	str	r1, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
   1a850:	bf24      	itt	cs
   1a852:	6821      	ldrcs	r1, [r4, #0]
   1a854:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
   1a856:	4638      	mov	r0, r7
   1a858:	f7f1 fc52 	bl	c100 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1a85c:	3d01      	subs	r5, #1
   1a85e:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1a860:	6923      	ldr	r3, [r4, #16]
   1a862:	2b00      	cmp	r3, #0
   1a864:	f040 80bb 	bne.w	1a9de <xQueueReceive+0x2ae>
				taskEXIT_CRITICAL();
   1a868:	f7f5 fc9e 	bl	101a8 <vPortExitCritical>
				return pdPASS;
   1a86c:	2001      	movs	r0, #1
   1a86e:	e05e      	b.n	1a92e <xQueueReceive+0x1fe>
	configASSERT( ( pxQueue ) );
   1a870:	e7fe      	b.n	1a870 <xQueueReceive+0x140>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1a872:	6c03      	ldr	r3, [r0, #64]	; 0x40
   1a874:	2b00      	cmp	r3, #0
   1a876:	f43f af67 	beq.w	1a748 <xQueueReceive+0x18>
   1a87a:	e7fe      	b.n	1a87a <xQueueReceive+0x14a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1a87c:	9b01      	ldr	r3, [sp, #4]
   1a87e:	2b00      	cmp	r3, #0
   1a880:	f43f af67 	beq.w	1a752 <xQueueReceive+0x22>
   1a884:	e7fe      	b.n	1a884 <xQueueReceive+0x154>
	taskENTER_CRITICAL();
   1a886:	f7f5 fc75 	bl	10174 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
   1a88a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   1a88e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1a890:	2d00      	cmp	r5, #0
   1a892:	dc04      	bgt.n	1a89e <xQueueReceive+0x16e>
   1a894:	e011      	b.n	1a8ba <xQueueReceive+0x18a>
			--cTxLock;
   1a896:	1e6b      	subs	r3, r5, #1
   1a898:	b2da      	uxtb	r2, r3
   1a89a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1a89c:	b16a      	cbz	r2, 1a8ba <xQueueReceive+0x18a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1a89e:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1a8a0:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1a8a2:	b153      	cbz	r3, 1a8ba <xQueueReceive+0x18a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1a8a4:	f000 fe80 	bl	1b5a8 <xTaskRemoveFromEventList>
   1a8a8:	2800      	cmp	r0, #0
   1a8aa:	d0f4      	beq.n	1a896 <xQueueReceive+0x166>
						vTaskMissedYield();
   1a8ac:	f000 ff48 	bl	1b740 <vTaskMissedYield>
			--cTxLock;
   1a8b0:	1e6b      	subs	r3, r5, #1
   1a8b2:	b2da      	uxtb	r2, r3
   1a8b4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1a8b6:	2a00      	cmp	r2, #0
   1a8b8:	d1f1      	bne.n	1a89e <xQueueReceive+0x16e>
		pxQueue->cTxLock = queueUNLOCKED;
   1a8ba:	23ff      	movs	r3, #255	; 0xff
   1a8bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
   1a8c0:	f7f5 fc72 	bl	101a8 <vPortExitCritical>
	taskENTER_CRITICAL();
   1a8c4:	f7f5 fc56 	bl	10174 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
   1a8c8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   1a8cc:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1a8ce:	2d00      	cmp	r5, #0
   1a8d0:	dd14      	ble.n	1a8fc <xQueueReceive+0x1cc>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1a8d2:	f104 0910 	add.w	r9, r4, #16
   1a8d6:	e003      	b.n	1a8e0 <xQueueReceive+0x1b0>
				--cRxLock;
   1a8d8:	1e6b      	subs	r3, r5, #1
   1a8da:	b2da      	uxtb	r2, r3
   1a8dc:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1a8de:	b16a      	cbz	r2, 1a8fc <xQueueReceive+0x1cc>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1a8e0:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1a8e2:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1a8e4:	b153      	cbz	r3, 1a8fc <xQueueReceive+0x1cc>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1a8e6:	f000 fe5f 	bl	1b5a8 <xTaskRemoveFromEventList>
   1a8ea:	2800      	cmp	r0, #0
   1a8ec:	d0f4      	beq.n	1a8d8 <xQueueReceive+0x1a8>
					vTaskMissedYield();
   1a8ee:	f000 ff27 	bl	1b740 <vTaskMissedYield>
				--cRxLock;
   1a8f2:	1e6b      	subs	r3, r5, #1
   1a8f4:	b2da      	uxtb	r2, r3
   1a8f6:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1a8f8:	2a00      	cmp	r2, #0
   1a8fa:	d1f1      	bne.n	1a8e0 <xQueueReceive+0x1b0>
		pxQueue->cRxLock = queueUNLOCKED;
   1a8fc:	23ff      	movs	r3, #255	; 0xff
   1a8fe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
   1a902:	f7f5 fc51 	bl	101a8 <vPortExitCritical>
			( void ) xTaskResumeAll();
   1a906:	f000 fd0f 	bl	1b328 <xTaskResumeAll>
	taskENTER_CRITICAL();
   1a90a:	f7f5 fc33 	bl	10174 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1a90e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1a910:	b153      	cbz	r3, 1a928 <xQueueReceive+0x1f8>
	taskEXIT_CRITICAL();
   1a912:	f7f5 fc49 	bl	101a8 <vPortExitCritical>
		taskENTER_CRITICAL();
   1a916:	f7f5 fc2d 	bl	10174 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1a91a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1a91c:	2d00      	cmp	r5, #0
   1a91e:	d190      	bne.n	1a842 <xQueueReceive+0x112>
				if( xTicksToWait == ( TickType_t ) 0 )
   1a920:	9b01      	ldr	r3, [sp, #4]
   1a922:	2b00      	cmp	r3, #0
   1a924:	f47f af24 	bne.w	1a770 <xQueueReceive+0x40>
					taskEXIT_CRITICAL();
   1a928:	f7f5 fc3e 	bl	101a8 <vPortExitCritical>
					return errQUEUE_EMPTY;
   1a92c:	2000      	movs	r0, #0
}
   1a92e:	b005      	add	sp, #20
   1a930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
   1a934:	f7f5 fc38 	bl	101a8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1a938:	9901      	ldr	r1, [sp, #4]
   1a93a:	4630      	mov	r0, r6
   1a93c:	f000 fd70 	bl	1b420 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
   1a940:	f7f5 fc18 	bl	10174 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
   1a944:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   1a948:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1a94a:	2d00      	cmp	r5, #0
   1a94c:	dc04      	bgt.n	1a958 <xQueueReceive+0x228>
   1a94e:	e011      	b.n	1a974 <xQueueReceive+0x244>
			--cTxLock;
   1a950:	1e6b      	subs	r3, r5, #1
   1a952:	b2da      	uxtb	r2, r3
   1a954:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1a956:	b16a      	cbz	r2, 1a974 <xQueueReceive+0x244>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1a958:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1a95a:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1a95c:	b153      	cbz	r3, 1a974 <xQueueReceive+0x244>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1a95e:	f000 fe23 	bl	1b5a8 <xTaskRemoveFromEventList>
   1a962:	2800      	cmp	r0, #0
   1a964:	d0f4      	beq.n	1a950 <xQueueReceive+0x220>
						vTaskMissedYield();
   1a966:	f000 feeb 	bl	1b740 <vTaskMissedYield>
			--cTxLock;
   1a96a:	1e6b      	subs	r3, r5, #1
   1a96c:	b2da      	uxtb	r2, r3
   1a96e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1a970:	2a00      	cmp	r2, #0
   1a972:	d1f1      	bne.n	1a958 <xQueueReceive+0x228>
		pxQueue->cTxLock = queueUNLOCKED;
   1a974:	23ff      	movs	r3, #255	; 0xff
   1a976:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
   1a97a:	f7f5 fc15 	bl	101a8 <vPortExitCritical>
	taskENTER_CRITICAL();
   1a97e:	f7f5 fbf9 	bl	10174 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
   1a982:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   1a986:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1a988:	2d00      	cmp	r5, #0
   1a98a:	dd14      	ble.n	1a9b6 <xQueueReceive+0x286>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1a98c:	f104 0910 	add.w	r9, r4, #16
   1a990:	e003      	b.n	1a99a <xQueueReceive+0x26a>
				--cRxLock;
   1a992:	1e6b      	subs	r3, r5, #1
   1a994:	b2da      	uxtb	r2, r3
   1a996:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1a998:	b16a      	cbz	r2, 1a9b6 <xQueueReceive+0x286>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1a99a:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1a99c:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1a99e:	b153      	cbz	r3, 1a9b6 <xQueueReceive+0x286>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1a9a0:	f000 fe02 	bl	1b5a8 <xTaskRemoveFromEventList>
   1a9a4:	2800      	cmp	r0, #0
   1a9a6:	d0f4      	beq.n	1a992 <xQueueReceive+0x262>
					vTaskMissedYield();
   1a9a8:	f000 feca 	bl	1b740 <vTaskMissedYield>
				--cRxLock;
   1a9ac:	1e6b      	subs	r3, r5, #1
   1a9ae:	b2da      	uxtb	r2, r3
   1a9b0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1a9b2:	2a00      	cmp	r2, #0
   1a9b4:	d1f1      	bne.n	1a99a <xQueueReceive+0x26a>
		pxQueue->cRxLock = queueUNLOCKED;
   1a9b6:	23ff      	movs	r3, #255	; 0xff
   1a9b8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
   1a9bc:	f7f5 fbf4 	bl	101a8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
   1a9c0:	f000 fcb2 	bl	1b328 <xTaskResumeAll>
   1a9c4:	2800      	cmp	r0, #0
   1a9c6:	d1a6      	bne.n	1a916 <xQueueReceive+0x1e6>
					portYIELD_WITHIN_API();
   1a9c8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1a9cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1a9d0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
   1a9d4:	f3bf 8f4f 	dsb	sy
   1a9d8:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
   1a9dc:	e79b      	b.n	1a916 <xQueueReceive+0x1e6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1a9de:	f104 0010 	add.w	r0, r4, #16
   1a9e2:	f000 fde1 	bl	1b5a8 <xTaskRemoveFromEventList>
   1a9e6:	2800      	cmp	r0, #0
   1a9e8:	f43f af3e 	beq.w	1a868 <xQueueReceive+0x138>
						queueYIELD_IF_USING_PREEMPTION();
   1a9ec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1a9f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1a9f4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
   1a9f8:	f3bf 8f4f 	dsb	sy
   1a9fc:	f3bf 8f6f 	isb	sy
   1aa00:	e732      	b.n	1a868 <xQueueReceive+0x138>
   1aa02:	bf00      	nop

0001aa04 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1aa04:	b570      	push	{r4, r5, r6, lr}
   1aa06:	4605      	mov	r5, r0
   1aa08:	460e      	mov	r6, r1
   1aa0a:	4614      	mov	r4, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1aa0c:	f7f5 fbb2 	bl	10174 <vPortEnterCritical>
   1aa10:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
   1aa14:	2bff      	cmp	r3, #255	; 0xff
   1aa16:	bf04      	itt	eq
   1aa18:	2300      	moveq	r3, #0
   1aa1a:	f885 3044 	strbeq.w	r3, [r5, #68]	; 0x44
   1aa1e:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
   1aa22:	2bff      	cmp	r3, #255	; 0xff
   1aa24:	bf04      	itt	eq
   1aa26:	2300      	moveq	r3, #0
   1aa28:	f885 3045 	strbeq.w	r3, [r5, #69]	; 0x45
   1aa2c:	f7f5 fbbc 	bl	101a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1aa30:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1aa32:	2b00      	cmp	r3, #0
   1aa34:	d043      	beq.n	1aabe <vQueueWaitForMessageRestricted+0xba>
	taskENTER_CRITICAL();
   1aa36:	f7f5 fb9d 	bl	10174 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
   1aa3a:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
   1aa3e:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1aa40:	2c00      	cmp	r4, #0
   1aa42:	dd14      	ble.n	1aa6e <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1aa44:	f105 0624 	add.w	r6, r5, #36	; 0x24
   1aa48:	e003      	b.n	1aa52 <vQueueWaitForMessageRestricted+0x4e>
			--cTxLock;
   1aa4a:	1e63      	subs	r3, r4, #1
   1aa4c:	b2da      	uxtb	r2, r3
   1aa4e:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1aa50:	b16a      	cbz	r2, 1aa6e <vQueueWaitForMessageRestricted+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1aa52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1aa54:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1aa56:	b153      	cbz	r3, 1aa6e <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1aa58:	f000 fda6 	bl	1b5a8 <xTaskRemoveFromEventList>
   1aa5c:	2800      	cmp	r0, #0
   1aa5e:	d0f4      	beq.n	1aa4a <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
   1aa60:	f000 fe6e 	bl	1b740 <vTaskMissedYield>
			--cTxLock;
   1aa64:	1e63      	subs	r3, r4, #1
   1aa66:	b2da      	uxtb	r2, r3
   1aa68:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1aa6a:	2a00      	cmp	r2, #0
   1aa6c:	d1f1      	bne.n	1aa52 <vQueueWaitForMessageRestricted+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
   1aa6e:	23ff      	movs	r3, #255	; 0xff
   1aa70:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
   1aa74:	f7f5 fb98 	bl	101a8 <vPortExitCritical>
	taskENTER_CRITICAL();
   1aa78:	f7f5 fb7c 	bl	10174 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
   1aa7c:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
   1aa80:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1aa82:	2c00      	cmp	r4, #0
   1aa84:	dd14      	ble.n	1aab0 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1aa86:	f105 0610 	add.w	r6, r5, #16
   1aa8a:	e003      	b.n	1aa94 <vQueueWaitForMessageRestricted+0x90>
				--cRxLock;
   1aa8c:	1e63      	subs	r3, r4, #1
   1aa8e:	b2da      	uxtb	r2, r3
   1aa90:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1aa92:	b16a      	cbz	r2, 1aab0 <vQueueWaitForMessageRestricted+0xac>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1aa94:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1aa96:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1aa98:	b153      	cbz	r3, 1aab0 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1aa9a:	f000 fd85 	bl	1b5a8 <xTaskRemoveFromEventList>
   1aa9e:	2800      	cmp	r0, #0
   1aaa0:	d0f4      	beq.n	1aa8c <vQueueWaitForMessageRestricted+0x88>
					vTaskMissedYield();
   1aaa2:	f000 fe4d 	bl	1b740 <vTaskMissedYield>
				--cRxLock;
   1aaa6:	1e63      	subs	r3, r4, #1
   1aaa8:	b2da      	uxtb	r2, r3
   1aaaa:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1aaac:	2a00      	cmp	r2, #0
   1aaae:	d1f1      	bne.n	1aa94 <vQueueWaitForMessageRestricted+0x90>
		pxQueue->cRxLock = queueUNLOCKED;
   1aab0:	23ff      	movs	r3, #255	; 0xff
   1aab2:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
   1aab6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
   1aaba:	f7f5 bb75 	b.w	101a8 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1aabe:	4622      	mov	r2, r4
   1aac0:	4631      	mov	r1, r6
   1aac2:	f105 0024 	add.w	r0, r5, #36	; 0x24
   1aac6:	f000 fd2d 	bl	1b524 <vTaskPlaceOnEventListRestricted>
   1aaca:	e7b4      	b.n	1aa36 <vQueueWaitForMessageRestricted+0x32>

0001aacc <vTaskSwitchContext.part.0>:
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
   1aacc:	4b2b      	ldr	r3, [pc, #172]	; (1ab7c <vTaskSwitchContext.part.0+0xb0>)
void vTaskSwitchContext( void )
   1aace:	b570      	push	{r4, r5, r6, lr}
		xYieldPending = pdFALSE;
   1aad0:	2200      	movs	r2, #0
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
   1aad2:	4c2b      	ldr	r4, [pc, #172]	; (1ab80 <vTaskSwitchContext.part.0+0xb4>)
		xYieldPending = pdFALSE;
   1aad4:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   1aad6:	6823      	ldr	r3, [r4, #0]
   1aad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1aada:	681a      	ldr	r2, [r3, #0]
   1aadc:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
   1aae0:	d103      	bne.n	1aaea <vTaskSwitchContext.part.0+0x1e>
   1aae2:	685a      	ldr	r2, [r3, #4]
   1aae4:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
   1aae8:	d03f      	beq.n	1ab6a <vTaskSwitchContext.part.0+0x9e>
   1aaea:	6820      	ldr	r0, [r4, #0]
   1aaec:	6821      	ldr	r1, [r4, #0]
   1aaee:	3134      	adds	r1, #52	; 0x34
   1aaf0:	f7f9 f8b4 	bl	13c5c <vApplicationStackOverflowHook>
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1aaf4:	4d23      	ldr	r5, [pc, #140]	; (1ab84 <vTaskSwitchContext.part.0+0xb8>)
   1aaf6:	4a24      	ldr	r2, [pc, #144]	; (1ab88 <vTaskSwitchContext.part.0+0xbc>)
   1aaf8:	682b      	ldr	r3, [r5, #0]
   1aafa:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   1aafe:	0080      	lsls	r0, r0, #2
   1ab00:	0099      	lsls	r1, r3, #2
   1ab02:	5810      	ldr	r0, [r2, r0]
   1ab04:	bb08      	cbnz	r0, 1ab4a <vTaskSwitchContext.part.0+0x7e>
   1ab06:	b1f3      	cbz	r3, 1ab46 <vTaskSwitchContext.part.0+0x7a>
   1ab08:	1e58      	subs	r0, r3, #1
   1ab0a:	eb00 0180 	add.w	r1, r0, r0, lsl #2
   1ab0e:	0089      	lsls	r1, r1, #2
   1ab10:	5856      	ldr	r6, [r2, r1]
   1ab12:	0081      	lsls	r1, r0, #2
   1ab14:	b9c6      	cbnz	r6, 1ab48 <vTaskSwitchContext.part.0+0x7c>
   1ab16:	b1b0      	cbz	r0, 1ab46 <vTaskSwitchContext.part.0+0x7a>
   1ab18:	1e98      	subs	r0, r3, #2
   1ab1a:	eb00 0180 	add.w	r1, r0, r0, lsl #2
   1ab1e:	0089      	lsls	r1, r1, #2
   1ab20:	5856      	ldr	r6, [r2, r1]
   1ab22:	0081      	lsls	r1, r0, #2
   1ab24:	b986      	cbnz	r6, 1ab48 <vTaskSwitchContext.part.0+0x7c>
   1ab26:	b170      	cbz	r0, 1ab46 <vTaskSwitchContext.part.0+0x7a>
   1ab28:	1ed8      	subs	r0, r3, #3
   1ab2a:	eb00 0180 	add.w	r1, r0, r0, lsl #2
   1ab2e:	0089      	lsls	r1, r1, #2
   1ab30:	5856      	ldr	r6, [r2, r1]
   1ab32:	0081      	lsls	r1, r0, #2
   1ab34:	b946      	cbnz	r6, 1ab48 <vTaskSwitchContext.part.0+0x7c>
   1ab36:	b130      	cbz	r0, 1ab46 <vTaskSwitchContext.part.0+0x7a>
   1ab38:	3b04      	subs	r3, #4
   1ab3a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   1ab3e:	0080      	lsls	r0, r0, #2
   1ab40:	0099      	lsls	r1, r3, #2
   1ab42:	5810      	ldr	r0, [r2, r0]
   1ab44:	b908      	cbnz	r0, 1ab4a <vTaskSwitchContext.part.0+0x7e>
   1ab46:	e7fe      	b.n	1ab46 <vTaskSwitchContext.part.0+0x7a>
   1ab48:	4603      	mov	r3, r0
   1ab4a:	4419      	add	r1, r3
   1ab4c:	eb02 0081 	add.w	r0, r2, r1, lsl #2
   1ab50:	4602      	mov	r2, r0
   1ab52:	6841      	ldr	r1, [r0, #4]
   1ab54:	6849      	ldr	r1, [r1, #4]
   1ab56:	6041      	str	r1, [r0, #4]
   1ab58:	3208      	adds	r2, #8
   1ab5a:	4291      	cmp	r1, r2
   1ab5c:	bf04      	itt	eq
   1ab5e:	6849      	ldreq	r1, [r1, #4]
   1ab60:	6041      	streq	r1, [r0, #4]
   1ab62:	68ca      	ldr	r2, [r1, #12]
   1ab64:	6022      	str	r2, [r4, #0]
   1ab66:	602b      	str	r3, [r5, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1ab68:	bd70      	pop	{r4, r5, r6, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
   1ab6a:	689a      	ldr	r2, [r3, #8]
   1ab6c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
   1ab70:	d1bb      	bne.n	1aaea <vTaskSwitchContext.part.0+0x1e>
   1ab72:	68db      	ldr	r3, [r3, #12]
   1ab74:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
   1ab78:	d1b7      	bne.n	1aaea <vTaskSwitchContext.part.0+0x1e>
   1ab7a:	e7bb      	b.n	1aaf4 <vTaskSwitchContext.part.0+0x28>
   1ab7c:	10005ad4 	.word	0x10005ad4
   1ab80:	10005a00 	.word	0x10005a00
   1ab84:	10005a6c 	.word	0x10005a6c
   1ab88:	10005a0c 	.word	0x10005a0c

0001ab8c <xTaskCreate>:
	{
   1ab8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
   1ab90:	ea4f 0882 	mov.w	r8, r2, lsl #2
	{
   1ab94:	4607      	mov	r7, r0
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
   1ab96:	4640      	mov	r0, r8
	{
   1ab98:	460c      	mov	r4, r1
   1ab9a:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
   1ab9c:	f001 f82e 	bl	1bbfc <pvPortMalloc>
			if( pxStack != NULL )
   1aba0:	2800      	cmp	r0, #0
   1aba2:	f000 80c3 	beq.w	1ad2c <xTaskCreate+0x1a0>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
   1aba6:	4606      	mov	r6, r0
   1aba8:	204c      	movs	r0, #76	; 0x4c
   1abaa:	f001 f827 	bl	1bbfc <pvPortMalloc>
				if( pxNewTCB != NULL )
   1abae:	4605      	mov	r5, r0
   1abb0:	2800      	cmp	r0, #0
   1abb2:	f000 80c0 	beq.w	1ad36 <xTaskCreate+0x1aa>
					pxNewTCB->pxStack = pxStack;
   1abb6:	6306      	str	r6, [r0, #48]	; 0x30
	configASSERT( pcName );
   1abb8:	2c00      	cmp	r4, #0
   1abba:	f000 80bb 	beq.w	1ad34 <xTaskCreate+0x1a8>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1abbe:	4642      	mov	r2, r8
   1abc0:	4630      	mov	r0, r6
   1abc2:	21a5      	movs	r1, #165	; 0xa5
   1abc4:	f001 ffa8 	bl	1cb18 <memset>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1abc8:	7823      	ldrb	r3, [r4, #0]
   1abca:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
   1abce:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   1abd0:	f1a8 0204 	sub.w	r2, r8, #4
   1abd4:	4413      	add	r3, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
   1abd6:	f023 0a07 	bic.w	sl, r3, #7
		if( pcName[ x ] == ( char ) 0x00 )
   1abda:	7823      	ldrb	r3, [r4, #0]
   1abdc:	2b00      	cmp	r3, #0
   1abde:	d04d      	beq.n	1ac7c <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1abe0:	7863      	ldrb	r3, [r4, #1]
   1abe2:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
		if( pcName[ x ] == ( char ) 0x00 )
   1abe6:	7863      	ldrb	r3, [r4, #1]
   1abe8:	2b00      	cmp	r3, #0
   1abea:	d047      	beq.n	1ac7c <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1abec:	78a3      	ldrb	r3, [r4, #2]
   1abee:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
		if( pcName[ x ] == ( char ) 0x00 )
   1abf2:	78a3      	ldrb	r3, [r4, #2]
   1abf4:	2b00      	cmp	r3, #0
   1abf6:	d041      	beq.n	1ac7c <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1abf8:	78e3      	ldrb	r3, [r4, #3]
   1abfa:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
		if( pcName[ x ] == ( char ) 0x00 )
   1abfe:	78e3      	ldrb	r3, [r4, #3]
   1ac00:	2b00      	cmp	r3, #0
   1ac02:	d03b      	beq.n	1ac7c <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1ac04:	7923      	ldrb	r3, [r4, #4]
   1ac06:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
		if( pcName[ x ] == ( char ) 0x00 )
   1ac0a:	7923      	ldrb	r3, [r4, #4]
   1ac0c:	2b00      	cmp	r3, #0
   1ac0e:	d035      	beq.n	1ac7c <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1ac10:	7963      	ldrb	r3, [r4, #5]
   1ac12:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
		if( pcName[ x ] == ( char ) 0x00 )
   1ac16:	7963      	ldrb	r3, [r4, #5]
   1ac18:	2b00      	cmp	r3, #0
   1ac1a:	d02f      	beq.n	1ac7c <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1ac1c:	79a3      	ldrb	r3, [r4, #6]
   1ac1e:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
		if( pcName[ x ] == ( char ) 0x00 )
   1ac22:	79a3      	ldrb	r3, [r4, #6]
   1ac24:	b353      	cbz	r3, 1ac7c <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1ac26:	79e3      	ldrb	r3, [r4, #7]
   1ac28:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
		if( pcName[ x ] == ( char ) 0x00 )
   1ac2c:	79e3      	ldrb	r3, [r4, #7]
   1ac2e:	b32b      	cbz	r3, 1ac7c <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1ac30:	7a23      	ldrb	r3, [r4, #8]
   1ac32:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
		if( pcName[ x ] == ( char ) 0x00 )
   1ac36:	7a23      	ldrb	r3, [r4, #8]
   1ac38:	b303      	cbz	r3, 1ac7c <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1ac3a:	7a63      	ldrb	r3, [r4, #9]
   1ac3c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
		if( pcName[ x ] == ( char ) 0x00 )
   1ac40:	7a63      	ldrb	r3, [r4, #9]
   1ac42:	b1db      	cbz	r3, 1ac7c <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1ac44:	7aa3      	ldrb	r3, [r4, #10]
   1ac46:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
		if( pcName[ x ] == ( char ) 0x00 )
   1ac4a:	7aa3      	ldrb	r3, [r4, #10]
   1ac4c:	b1b3      	cbz	r3, 1ac7c <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1ac4e:	7ae3      	ldrb	r3, [r4, #11]
   1ac50:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
		if( pcName[ x ] == ( char ) 0x00 )
   1ac54:	7ae3      	ldrb	r3, [r4, #11]
   1ac56:	b18b      	cbz	r3, 1ac7c <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1ac58:	7b23      	ldrb	r3, [r4, #12]
   1ac5a:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
		if( pcName[ x ] == ( char ) 0x00 )
   1ac5e:	7b23      	ldrb	r3, [r4, #12]
   1ac60:	b163      	cbz	r3, 1ac7c <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1ac62:	7b63      	ldrb	r3, [r4, #13]
   1ac64:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
		if( pcName[ x ] == ( char ) 0x00 )
   1ac68:	7b63      	ldrb	r3, [r4, #13]
   1ac6a:	b13b      	cbz	r3, 1ac7c <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1ac6c:	7ba3      	ldrb	r3, [r4, #14]
   1ac6e:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
		if( pcName[ x ] == ( char ) 0x00 )
   1ac72:	7ba3      	ldrb	r3, [r4, #14]
   1ac74:	b113      	cbz	r3, 1ac7c <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1ac76:	7be3      	ldrb	r3, [r4, #15]
   1ac78:	f885 3043 	strb.w	r3, [r5, #67]	; 0x43
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1ac7c:	9c08      	ldr	r4, [sp, #32]
   1ac7e:	2c03      	cmp	r4, #3
   1ac80:	bf28      	it	cs
   1ac82:	2403      	movcs	r4, #3
   1ac84:	f04f 0800 	mov.w	r8, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1ac88:	1d2e      	adds	r6, r5, #4
	pxNewTCB->uxPriority = uxPriority;
   1ac8a:	62ec      	str	r4, [r5, #44]	; 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1ac8c:	4630      	mov	r0, r6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1ac8e:	f885 8043 	strb.w	r8, [r5, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1ac92:	f7ff fab1 	bl	1a1f8 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1ac96:	f1c4 0404 	rsb	r4, r4, #4
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1ac9a:	f105 0018 	add.w	r0, r5, #24
   1ac9e:	f7ff faab 	bl	1a1f8 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
   1aca2:	f8c5 8044 	str.w	r8, [r5, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1aca6:	61ac      	str	r4, [r5, #24]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1aca8:	f885 8048 	strb.w	r8, [r5, #72]	; 0x48
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1acac:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1acae:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1acb0:	464a      	mov	r2, r9
   1acb2:	4639      	mov	r1, r7
   1acb4:	4650      	mov	r0, sl
   1acb6:	f7f5 fa33 	bl	10120 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
   1acba:	9b09      	ldr	r3, [sp, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1acbc:	6028      	str	r0, [r5, #0]
	if( pxCreatedTask != NULL )
   1acbe:	b103      	cbz	r3, 1acc2 <xTaskCreate+0x136>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1acc0:	601d      	str	r5, [r3, #0]
	taskENTER_CRITICAL();
   1acc2:	f7f5 fa57 	bl	10174 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
   1acc6:	4a3a      	ldr	r2, [pc, #232]	; (1adb0 <xTaskCreate+0x224>)
		if( pxCurrentTCB == NULL )
   1acc8:	4c3a      	ldr	r4, [pc, #232]	; (1adb4 <xTaskCreate+0x228>)
		uxCurrentNumberOfTasks++;
   1acca:	6813      	ldr	r3, [r2, #0]
   1accc:	3301      	adds	r3, #1
   1acce:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
   1acd0:	6823      	ldr	r3, [r4, #0]
   1acd2:	2b00      	cmp	r3, #0
   1acd4:	d03f      	beq.n	1ad56 <xTaskCreate+0x1ca>
			if( xSchedulerRunning == pdFALSE )
   1acd6:	4f38      	ldr	r7, [pc, #224]	; (1adb8 <xTaskCreate+0x22c>)
   1acd8:	683b      	ldr	r3, [r7, #0]
   1acda:	2b00      	cmp	r3, #0
   1acdc:	d034      	beq.n	1ad48 <xTaskCreate+0x1bc>
		prvAddTaskToReadyList( pxNewTCB );
   1acde:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
		uxTaskNumber++;
   1ace0:	4a36      	ldr	r2, [pc, #216]	; (1adbc <xTaskCreate+0x230>)
		prvAddTaskToReadyList( pxNewTCB );
   1ace2:	4937      	ldr	r1, [pc, #220]	; (1adc0 <xTaskCreate+0x234>)
		uxTaskNumber++;
   1ace4:	6813      	ldr	r3, [r2, #0]
   1ace6:	3301      	adds	r3, #1
   1ace8:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
   1acea:	680b      	ldr	r3, [r1, #0]
   1acec:	4283      	cmp	r3, r0
   1acee:	4b35      	ldr	r3, [pc, #212]	; (1adc4 <xTaskCreate+0x238>)
   1acf0:	bf38      	it	cc
   1acf2:	6008      	strcc	r0, [r1, #0]
   1acf4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1acf8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1acfc:	4631      	mov	r1, r6
   1acfe:	f7ff fa7f 	bl	1a200 <vListInsertEnd>
	taskEXIT_CRITICAL();
   1ad02:	f7f5 fa51 	bl	101a8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
   1ad06:	683b      	ldr	r3, [r7, #0]
   1ad08:	b1db      	cbz	r3, 1ad42 <xTaskCreate+0x1b6>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1ad0a:	6822      	ldr	r2, [r4, #0]
   1ad0c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1ad0e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   1ad10:	429a      	cmp	r2, r3
   1ad12:	d216      	bcs.n	1ad42 <xTaskCreate+0x1b6>
			taskYIELD_IF_USING_PREEMPTION();
   1ad14:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1ad18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1ad1c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
   1ad20:	f3bf 8f4f 	dsb	sy
   1ad24:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
   1ad28:	2001      	movs	r0, #1
   1ad2a:	e001      	b.n	1ad30 <xTaskCreate+0x1a4>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1ad2c:	f04f 30ff 	mov.w	r0, #4294967295
	}
   1ad30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	configASSERT( pcName );
   1ad34:	e7fe      	b.n	1ad34 <xTaskCreate+0x1a8>
					vPortFree( pxStack );
   1ad36:	4630      	mov	r0, r6
   1ad38:	f000 ffbe 	bl	1bcb8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1ad3c:	f04f 30ff 	mov.w	r0, #4294967295
   1ad40:	e7f6      	b.n	1ad30 <xTaskCreate+0x1a4>
			xReturn = pdPASS;
   1ad42:	2001      	movs	r0, #1
	}
   1ad44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1ad48:	6823      	ldr	r3, [r4, #0]
   1ad4a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   1ad4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ad4e:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
   1ad50:	bf98      	it	ls
   1ad52:	6025      	strls	r5, [r4, #0]
   1ad54:	e7c4      	b.n	1ace0 <xTaskCreate+0x154>
			pxCurrentTCB = pxNewTCB;
   1ad56:	6025      	str	r5, [r4, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1ad58:	6813      	ldr	r3, [r2, #0]
   1ad5a:	2b01      	cmp	r3, #1
   1ad5c:	d002      	beq.n	1ad64 <xTaskCreate+0x1d8>
		prvAddTaskToReadyList( pxNewTCB );
   1ad5e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   1ad60:	4f15      	ldr	r7, [pc, #84]	; (1adb8 <xTaskCreate+0x22c>)
   1ad62:	e7bd      	b.n	1ace0 <xTaskCreate+0x154>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1ad64:	4817      	ldr	r0, [pc, #92]	; (1adc4 <xTaskCreate+0x238>)
	}

	vListInitialise( &xDelayedTaskList1 );
   1ad66:	f8df 907c 	ldr.w	r9, [pc, #124]	; 1ade4 <xTaskCreate+0x258>
	vListInitialise( &xDelayedTaskList2 );
   1ad6a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 1ade8 <xTaskCreate+0x25c>
   1ad6e:	4f12      	ldr	r7, [pc, #72]	; (1adb8 <xTaskCreate+0x22c>)
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1ad70:	f7ff fa36 	bl	1a1e0 <vListInitialise>
   1ad74:	4814      	ldr	r0, [pc, #80]	; (1adc8 <xTaskCreate+0x23c>)
   1ad76:	f7ff fa33 	bl	1a1e0 <vListInitialise>
   1ad7a:	4814      	ldr	r0, [pc, #80]	; (1adcc <xTaskCreate+0x240>)
   1ad7c:	f7ff fa30 	bl	1a1e0 <vListInitialise>
   1ad80:	4813      	ldr	r0, [pc, #76]	; (1add0 <xTaskCreate+0x244>)
   1ad82:	f7ff fa2d 	bl	1a1e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
   1ad86:	4648      	mov	r0, r9
   1ad88:	f7ff fa2a 	bl	1a1e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
   1ad8c:	4640      	mov	r0, r8
   1ad8e:	f7ff fa27 	bl	1a1e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
   1ad92:	4810      	ldr	r0, [pc, #64]	; (1add4 <xTaskCreate+0x248>)
   1ad94:	f7ff fa24 	bl	1a1e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   1ad98:	480f      	ldr	r0, [pc, #60]	; (1add8 <xTaskCreate+0x24c>)
   1ad9a:	f7ff fa21 	bl	1a1e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1ad9e:	4b0f      	ldr	r3, [pc, #60]	; (1addc <xTaskCreate+0x250>)
		prvAddTaskToReadyList( pxNewTCB );
   1ada0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
   1ada2:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1ada6:	4b0e      	ldr	r3, [pc, #56]	; (1ade0 <xTaskCreate+0x254>)
   1ada8:	f8c3 8000 	str.w	r8, [r3]
}
   1adac:	e798      	b.n	1ace0 <xTaskCreate+0x154>
   1adae:	bf00      	nop
   1adb0:	10005a5c 	.word	0x10005a5c
   1adb4:	10005a00 	.word	0x10005a00
   1adb8:	10005ab8 	.word	0x10005ab8
   1adbc:	10005a68 	.word	0x10005a68
   1adc0:	10005a6c 	.word	0x10005a6c
   1adc4:	10005a0c 	.word	0x10005a0c
   1adc8:	10005a20 	.word	0x10005a20
   1adcc:	10005a34 	.word	0x10005a34
   1add0:	10005a48 	.word	0x10005a48
   1add4:	10005aa4 	.word	0x10005aa4
   1add8:	10005abc 	.word	0x10005abc
   1addc:	10005a04 	.word	0x10005a04
   1ade0:	10005a08 	.word	0x10005a08
   1ade4:	10005a70 	.word	0x10005a70
   1ade8:	10005a84 	.word	0x10005a84

0001adec <vTaskSuspend>:
	{
   1adec:	b570      	push	{r4, r5, r6, lr}
   1adee:	4604      	mov	r4, r0
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1adf0:	4e2e      	ldr	r6, [pc, #184]	; (1aeac <vTaskSuspend+0xc0>)
		taskENTER_CRITICAL();
   1adf2:	f7f5 f9bf 	bl	10174 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1adf6:	2c00      	cmp	r4, #0
   1adf8:	d03d      	beq.n	1ae76 <vTaskSuspend+0x8a>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1adfa:	1d25      	adds	r5, r4, #4
   1adfc:	4628      	mov	r0, r5
   1adfe:	f7ff fa27 	bl	1a250 <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1ae02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1ae04:	b11b      	cbz	r3, 1ae0e <vTaskSuspend+0x22>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1ae06:	f104 0018 	add.w	r0, r4, #24
   1ae0a:	f7ff fa21 	bl	1a250 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1ae0e:	4629      	mov	r1, r5
   1ae10:	4827      	ldr	r0, [pc, #156]	; (1aeb0 <vTaskSuspend+0xc4>)
		if( xSchedulerRunning != pdFALSE )
   1ae12:	4d28      	ldr	r5, [pc, #160]	; (1aeb4 <vTaskSuspend+0xc8>)
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1ae14:	f7ff f9f4 	bl	1a200 <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1ae18:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   1ae1c:	2b01      	cmp	r3, #1
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1ae1e:	bf04      	itt	eq
   1ae20:	2300      	moveq	r3, #0
   1ae22:	f884 3048 	strbeq.w	r3, [r4, #72]	; 0x48
		taskEXIT_CRITICAL();
   1ae26:	f7f5 f9bf 	bl	101a8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
   1ae2a:	682b      	ldr	r3, [r5, #0]
   1ae2c:	b9a3      	cbnz	r3, 1ae58 <vTaskSuspend+0x6c>
		if( pxTCB == pxCurrentTCB )
   1ae2e:	6833      	ldr	r3, [r6, #0]
   1ae30:	42a3      	cmp	r3, r4
   1ae32:	d000      	beq.n	1ae36 <vTaskSuspend+0x4a>
	}
   1ae34:	bd70      	pop	{r4, r5, r6, pc}
			if( xSchedulerRunning != pdFALSE )
   1ae36:	682b      	ldr	r3, [r5, #0]
   1ae38:	b323      	cbz	r3, 1ae84 <vTaskSuspend+0x98>
				configASSERT( uxSchedulerSuspended == 0 );
   1ae3a:	4b1f      	ldr	r3, [pc, #124]	; (1aeb8 <vTaskSuspend+0xcc>)
   1ae3c:	681b      	ldr	r3, [r3, #0]
   1ae3e:	2b00      	cmp	r3, #0
   1ae40:	d12d      	bne.n	1ae9e <vTaskSuspend+0xb2>
				portYIELD_WITHIN_API();
   1ae42:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1ae46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1ae4a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
   1ae4e:	f3bf 8f4f 	dsb	sy
   1ae52:	f3bf 8f6f 	isb	sy
	}
   1ae56:	bd70      	pop	{r4, r5, r6, pc}
			taskENTER_CRITICAL();
   1ae58:	f7f5 f98c 	bl	10174 <vPortEnterCritical>

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1ae5c:	4b17      	ldr	r3, [pc, #92]	; (1aebc <vTaskSuspend+0xd0>)
   1ae5e:	681a      	ldr	r2, [r3, #0]
   1ae60:	6812      	ldr	r2, [r2, #0]
   1ae62:	b152      	cbz	r2, 1ae7a <vTaskSuspend+0x8e>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1ae64:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1ae66:	4b16      	ldr	r3, [pc, #88]	; (1aec0 <vTaskSuspend+0xd4>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1ae68:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1ae6a:	68d2      	ldr	r2, [r2, #12]
   1ae6c:	6852      	ldr	r2, [r2, #4]
   1ae6e:	601a      	str	r2, [r3, #0]
			taskEXIT_CRITICAL();
   1ae70:	f7f5 f99a 	bl	101a8 <vPortExitCritical>
   1ae74:	e7db      	b.n	1ae2e <vTaskSuspend+0x42>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1ae76:	6834      	ldr	r4, [r6, #0]
   1ae78:	e7bf      	b.n	1adfa <vTaskSuspend+0xe>
		xNextTaskUnblockTime = portMAX_DELAY;
   1ae7a:	4b11      	ldr	r3, [pc, #68]	; (1aec0 <vTaskSuspend+0xd4>)
   1ae7c:	f04f 32ff 	mov.w	r2, #4294967295
   1ae80:	601a      	str	r2, [r3, #0]
   1ae82:	e7f5      	b.n	1ae70 <vTaskSuspend+0x84>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
   1ae84:	490a      	ldr	r1, [pc, #40]	; (1aeb0 <vTaskSuspend+0xc4>)
   1ae86:	4a0f      	ldr	r2, [pc, #60]	; (1aec4 <vTaskSuspend+0xd8>)
   1ae88:	6809      	ldr	r1, [r1, #0]
   1ae8a:	6812      	ldr	r2, [r2, #0]
   1ae8c:	4291      	cmp	r1, r2
   1ae8e:	d007      	beq.n	1aea0 <vTaskSuspend+0xb4>
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1ae90:	4b09      	ldr	r3, [pc, #36]	; (1aeb8 <vTaskSuspend+0xcc>)
   1ae92:	681b      	ldr	r3, [r3, #0]
   1ae94:	b133      	cbz	r3, 1aea4 <vTaskSuspend+0xb8>
		xYieldPending = pdTRUE;
   1ae96:	4b0c      	ldr	r3, [pc, #48]	; (1aec8 <vTaskSuspend+0xdc>)
   1ae98:	2201      	movs	r2, #1
   1ae9a:	601a      	str	r2, [r3, #0]
	}
   1ae9c:	bd70      	pop	{r4, r5, r6, pc}
				configASSERT( uxSchedulerSuspended == 0 );
   1ae9e:	e7fe      	b.n	1ae9e <vTaskSuspend+0xb2>
					pxCurrentTCB = NULL;
   1aea0:	6033      	str	r3, [r6, #0]
	}
   1aea2:	bd70      	pop	{r4, r5, r6, pc}
   1aea4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1aea8:	f7ff be10 	b.w	1aacc <vTaskSwitchContext.part.0>
   1aeac:	10005a00 	.word	0x10005a00
   1aeb0:	10005abc 	.word	0x10005abc
   1aeb4:	10005ab8 	.word	0x10005ab8
   1aeb8:	10005a64 	.word	0x10005a64
   1aebc:	10005a04 	.word	0x10005a04
   1aec0:	10005a9c 	.word	0x10005a9c
   1aec4:	10005a5c 	.word	0x10005a5c
   1aec8:	10005ad4 	.word	0x10005ad4

0001aecc <vTaskStartScheduler>:
{
   1aecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
   1aed0:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1aed4:	f000 fe92 	bl	1bbfc <pvPortMalloc>
			if( pxStack != NULL )
   1aed8:	2800      	cmp	r0, #0
   1aeda:	d06d      	beq.n	1afb8 <vTaskStartScheduler+0xec>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
   1aedc:	4605      	mov	r5, r0
   1aede:	204c      	movs	r0, #76	; 0x4c
   1aee0:	f000 fe8c 	bl	1bbfc <pvPortMalloc>
				if( pxNewTCB != NULL )
   1aee4:	4604      	mov	r4, r0
   1aee6:	2800      	cmp	r0, #0
   1aee8:	d063      	beq.n	1afb2 <vTaskStartScheduler+0xe6>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1aeea:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1aeee:	21a5      	movs	r1, #165	; 0xa5
					pxNewTCB->pxStack = pxStack;
   1aef0:	6305      	str	r5, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1aef2:	4628      	mov	r0, r5
   1aef4:	f001 fe10 	bl	1cb18 <memset>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1aef8:	2500      	movs	r5, #0
   1aefa:	4b53      	ldr	r3, [pc, #332]	; (1b048 <vTaskStartScheduler+0x17c>)
   1aefc:	6363      	str	r3, [r4, #52]	; 0x34
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1aefe:	1d27      	adds	r7, r4, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
   1af00:	6b26      	ldr	r6, [r4, #48]	; 0x30
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1af02:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1af06:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1af08:	f884 5043 	strb.w	r5, [r4, #67]	; 0x43
	pxNewTCB->uxPriority = uxPriority;
   1af0c:	62e5      	str	r5, [r4, #44]	; 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1af0e:	f7ff f973 	bl	1a1f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1af12:	f104 0018 	add.w	r0, r4, #24
   1af16:	f7ff f96f 	bl	1a1f8 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1af1a:	2304      	movs	r3, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
   1af1c:	f506 707f 	add.w	r0, r6, #1020	; 0x3fc
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1af20:	462a      	mov	r2, r5
		pxNewTCB->ulNotifiedValue = 0;
   1af22:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1af24:	4949      	ldr	r1, [pc, #292]	; (1b04c <vTaskStartScheduler+0x180>)
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1af26:	61a3      	str	r3, [r4, #24]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1af28:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1af2c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1af2e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1af30:	f020 0007 	bic.w	r0, r0, #7
   1af34:	f7f5 f8f4 	bl	10120 <pxPortInitialiseStack>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1af38:	4b45      	ldr	r3, [pc, #276]	; (1b050 <vTaskStartScheduler+0x184>)
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1af3a:	6020      	str	r0, [r4, #0]
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1af3c:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
   1af3e:	f7f5 f919 	bl	10174 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
   1af42:	4a44      	ldr	r2, [pc, #272]	; (1b054 <vTaskStartScheduler+0x188>)
		if( pxCurrentTCB == NULL )
   1af44:	4d44      	ldr	r5, [pc, #272]	; (1b058 <vTaskStartScheduler+0x18c>)
		uxCurrentNumberOfTasks++;
   1af46:	6813      	ldr	r3, [r2, #0]
   1af48:	3301      	adds	r3, #1
   1af4a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
   1af4c:	682b      	ldr	r3, [r5, #0]
   1af4e:	2b00      	cmp	r3, #0
   1af50:	d04e      	beq.n	1aff0 <vTaskStartScheduler+0x124>
			if( xSchedulerRunning == pdFALSE )
   1af52:	4e42      	ldr	r6, [pc, #264]	; (1b05c <vTaskStartScheduler+0x190>)
   1af54:	6833      	ldr	r3, [r6, #0]
   1af56:	b383      	cbz	r3, 1afba <vTaskStartScheduler+0xee>
		prvAddTaskToReadyList( pxNewTCB );
   1af58:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
		uxTaskNumber++;
   1af5a:	4a41      	ldr	r2, [pc, #260]	; (1b060 <vTaskStartScheduler+0x194>)
		prvAddTaskToReadyList( pxNewTCB );
   1af5c:	4941      	ldr	r1, [pc, #260]	; (1b064 <vTaskStartScheduler+0x198>)
		uxTaskNumber++;
   1af5e:	6813      	ldr	r3, [r2, #0]
   1af60:	3301      	adds	r3, #1
   1af62:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
   1af64:	680b      	ldr	r3, [r1, #0]
   1af66:	4298      	cmp	r0, r3
   1af68:	d900      	bls.n	1af6c <vTaskStartScheduler+0xa0>
   1af6a:	6008      	str	r0, [r1, #0]
   1af6c:	4b3e      	ldr	r3, [pc, #248]	; (1b068 <vTaskStartScheduler+0x19c>)
   1af6e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1af72:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1af76:	4639      	mov	r1, r7
   1af78:	f7ff f942 	bl	1a200 <vListInsertEnd>
	taskEXIT_CRITICAL();
   1af7c:	f7f5 f914 	bl	101a8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
   1af80:	6833      	ldr	r3, [r6, #0]
   1af82:	b173      	cbz	r3, 1afa2 <vTaskStartScheduler+0xd6>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1af84:	682a      	ldr	r2, [r5, #0]
   1af86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1af88:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   1af8a:	429a      	cmp	r2, r3
   1af8c:	d209      	bcs.n	1afa2 <vTaskStartScheduler+0xd6>
			taskYIELD_IF_USING_PREEMPTION();
   1af8e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1af92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1af96:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
   1af9a:	f3bf 8f4f 	dsb	sy
   1af9e:	f3bf 8f6f 	isb	sy
			xReturn = xTimerCreateTimerTask();
   1afa2:	f000 fd63 	bl	1ba6c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
   1afa6:	2801      	cmp	r0, #1
   1afa8:	d00e      	beq.n	1afc8 <vTaskStartScheduler+0xfc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1afaa:	3001      	adds	r0, #1
   1afac:	d004      	beq.n	1afb8 <vTaskStartScheduler+0xec>
}
   1afae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
   1afb2:	4628      	mov	r0, r5
   1afb4:	f000 fe80 	bl	1bcb8 <vPortFree>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1afb8:	e7fe      	b.n	1afb8 <vTaskStartScheduler+0xec>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1afba:	682b      	ldr	r3, [r5, #0]
   1afbc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1afbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1afc0:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
   1afc2:	bf98      	it	ls
   1afc4:	602c      	strls	r4, [r5, #0]
   1afc6:	e7c8      	b.n	1af5a <vTaskStartScheduler+0x8e>
	__asm volatile
   1afc8:	f04f 0380 	mov.w	r3, #128	; 0x80
   1afcc:	f383 8811 	msr	BASEPRI, r3
   1afd0:	f3bf 8f6f 	isb	sy
   1afd4:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
   1afd8:	4a24      	ldr	r2, [pc, #144]	; (1b06c <vTaskStartScheduler+0x1a0>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
   1afda:	4b25      	ldr	r3, [pc, #148]	; (1b070 <vTaskStartScheduler+0x1a4>)
		xNextTaskUnblockTime = portMAX_DELAY;
   1afdc:	f04f 31ff 	mov.w	r1, #4294967295
   1afe0:	6011      	str	r1, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
   1afe2:	2200      	movs	r2, #0
		xSchedulerRunning = pdTRUE;
   1afe4:	6030      	str	r0, [r6, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
   1afe6:	601a      	str	r2, [r3, #0]
}
   1afe8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		if( xPortStartScheduler() != pdFALSE )
   1afec:	f7f5 ba52 	b.w	10494 <xPortStartScheduler>
			pxCurrentTCB = pxNewTCB;
   1aff0:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1aff2:	6813      	ldr	r3, [r2, #0]
   1aff4:	2b01      	cmp	r3, #1
   1aff6:	d002      	beq.n	1affe <vTaskStartScheduler+0x132>
		prvAddTaskToReadyList( pxNewTCB );
   1aff8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1affa:	4e18      	ldr	r6, [pc, #96]	; (1b05c <vTaskStartScheduler+0x190>)
   1affc:	e7ad      	b.n	1af5a <vTaskStartScheduler+0x8e>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1affe:	481a      	ldr	r0, [pc, #104]	; (1b068 <vTaskStartScheduler+0x19c>)
	vListInitialise( &xDelayedTaskList1 );
   1b000:	f8df 808c 	ldr.w	r8, [pc, #140]	; 1b090 <vTaskStartScheduler+0x1c4>
	vListInitialise( &xDelayedTaskList2 );
   1b004:	f8df 908c 	ldr.w	r9, [pc, #140]	; 1b094 <vTaskStartScheduler+0x1c8>
   1b008:	4e14      	ldr	r6, [pc, #80]	; (1b05c <vTaskStartScheduler+0x190>)
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1b00a:	f7ff f8e9 	bl	1a1e0 <vListInitialise>
   1b00e:	4819      	ldr	r0, [pc, #100]	; (1b074 <vTaskStartScheduler+0x1a8>)
   1b010:	f7ff f8e6 	bl	1a1e0 <vListInitialise>
   1b014:	4818      	ldr	r0, [pc, #96]	; (1b078 <vTaskStartScheduler+0x1ac>)
   1b016:	f7ff f8e3 	bl	1a1e0 <vListInitialise>
   1b01a:	4818      	ldr	r0, [pc, #96]	; (1b07c <vTaskStartScheduler+0x1b0>)
   1b01c:	f7ff f8e0 	bl	1a1e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
   1b020:	4640      	mov	r0, r8
   1b022:	f7ff f8dd 	bl	1a1e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
   1b026:	4648      	mov	r0, r9
   1b028:	f7ff f8da 	bl	1a1e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
   1b02c:	4814      	ldr	r0, [pc, #80]	; (1b080 <vTaskStartScheduler+0x1b4>)
   1b02e:	f7ff f8d7 	bl	1a1e0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
   1b032:	4814      	ldr	r0, [pc, #80]	; (1b084 <vTaskStartScheduler+0x1b8>)
   1b034:	f7ff f8d4 	bl	1a1e0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
   1b038:	4a13      	ldr	r2, [pc, #76]	; (1b088 <vTaskStartScheduler+0x1bc>)
		prvAddTaskToReadyList( pxNewTCB );
   1b03a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
   1b03c:	f8c2 8000 	str.w	r8, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1b040:	4a12      	ldr	r2, [pc, #72]	; (1b08c <vTaskStartScheduler+0x1c0>)
   1b042:	f8c2 9000 	str.w	r9, [r2]
}
   1b046:	e788      	b.n	1af5a <vTaskStartScheduler+0x8e>
   1b048:	454c4449 	.word	0x454c4449
   1b04c:	0001b339 	.word	0x0001b339
   1b050:	10005a98 	.word	0x10005a98
   1b054:	10005a5c 	.word	0x10005a5c
   1b058:	10005a00 	.word	0x10005a00
   1b05c:	10005ab8 	.word	0x10005ab8
   1b060:	10005a68 	.word	0x10005a68
   1b064:	10005a6c 	.word	0x10005a6c
   1b068:	10005a0c 	.word	0x10005a0c
   1b06c:	10005a9c 	.word	0x10005a9c
   1b070:	10005ad0 	.word	0x10005ad0
   1b074:	10005a20 	.word	0x10005a20
   1b078:	10005a34 	.word	0x10005a34
   1b07c:	10005a48 	.word	0x10005a48
   1b080:	10005aa4 	.word	0x10005aa4
   1b084:	10005abc 	.word	0x10005abc
   1b088:	10005a04 	.word	0x10005a04
   1b08c:	10005a08 	.word	0x10005a08
   1b090:	10005a70 	.word	0x10005a70
   1b094:	10005a84 	.word	0x10005a84

0001b098 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
   1b098:	4a02      	ldr	r2, [pc, #8]	; (1b0a4 <vTaskSuspendAll+0xc>)
   1b09a:	6813      	ldr	r3, [r2, #0]
   1b09c:	3301      	adds	r3, #1
   1b09e:	6013      	str	r3, [r2, #0]
}
   1b0a0:	4770      	bx	lr
   1b0a2:	bf00      	nop
   1b0a4:	10005a64 	.word	0x10005a64

0001b0a8 <xTaskGetTickCount>:
		xTicks = xTickCount;
   1b0a8:	4b01      	ldr	r3, [pc, #4]	; (1b0b0 <xTaskGetTickCount+0x8>)
   1b0aa:	6818      	ldr	r0, [r3, #0]
}
   1b0ac:	4770      	bx	lr
   1b0ae:	bf00      	nop
   1b0b0:	10005ad0 	.word	0x10005ad0

0001b0b4 <vTaskStepTick>:
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
   1b0b4:	4a05      	ldr	r2, [pc, #20]	; (1b0cc <vTaskStepTick+0x18>)
   1b0b6:	4906      	ldr	r1, [pc, #24]	; (1b0d0 <vTaskStepTick+0x1c>)
   1b0b8:	6813      	ldr	r3, [r2, #0]
   1b0ba:	6809      	ldr	r1, [r1, #0]
   1b0bc:	4403      	add	r3, r0
   1b0be:	428b      	cmp	r3, r1
   1b0c0:	d803      	bhi.n	1b0ca <vTaskStepTick+0x16>
		xTickCount += xTicksToJump;
   1b0c2:	6813      	ldr	r3, [r2, #0]
   1b0c4:	4418      	add	r0, r3
   1b0c6:	6010      	str	r0, [r2, #0]
	}
   1b0c8:	4770      	bx	lr
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
   1b0ca:	e7fe      	b.n	1b0ca <vTaskStepTick+0x16>
   1b0cc:	10005ad0 	.word	0x10005ad0
   1b0d0:	10005a9c 	.word	0x10005a9c

0001b0d4 <xTaskIncrementTick>:
{
   1b0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1b0d8:	4b40      	ldr	r3, [pc, #256]	; (1b1dc <xTaskIncrementTick+0x108>)
   1b0da:	681b      	ldr	r3, [r3, #0]
{
   1b0dc:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1b0de:	2b00      	cmp	r3, #0
   1b0e0:	d146      	bne.n	1b170 <xTaskIncrementTick+0x9c>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   1b0e2:	4b3f      	ldr	r3, [pc, #252]	; (1b1e0 <xTaskIncrementTick+0x10c>)
   1b0e4:	681e      	ldr	r6, [r3, #0]
   1b0e6:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
   1b0e8:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1b0ea:	2e00      	cmp	r6, #0
   1b0ec:	d04e      	beq.n	1b18c <xTaskIncrementTick+0xb8>
   1b0ee:	f8df b108 	ldr.w	fp, [pc, #264]	; 1b1f8 <xTaskIncrementTick+0x124>
		if( xConstTickCount >= xNextTaskUnblockTime )
   1b0f2:	f8db 3000 	ldr.w	r3, [fp]
   1b0f6:	42b3      	cmp	r3, r6
   1b0f8:	d860      	bhi.n	1b1bc <xTaskIncrementTick+0xe8>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1b0fa:	4f3a      	ldr	r7, [pc, #232]	; (1b1e4 <xTaskIncrementTick+0x110>)
   1b0fc:	683b      	ldr	r3, [r7, #0]
   1b0fe:	681d      	ldr	r5, [r3, #0]
   1b100:	2d00      	cmp	r5, #0
   1b102:	d05d      	beq.n	1b1c0 <xTaskIncrementTick+0xec>
					prvAddTaskToReadyList( pxTCB );
   1b104:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1b1fc <xTaskIncrementTick+0x128>
   1b108:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 1b200 <xTaskIncrementTick+0x12c>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1b10c:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 1b204 <xTaskIncrementTick+0x130>
BaseType_t xSwitchRequired = pdFALSE;
   1b110:	2500      	movs	r5, #0
   1b112:	e022      	b.n	1b15a <xTaskIncrementTick+0x86>
   1b114:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1b116:	f7ff f89b 	bl	1a250 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1b11a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1b11c:	9901      	ldr	r1, [sp, #4]
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1b11e:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1b122:	b113      	cbz	r3, 1b12a <xTaskIncrementTick+0x56>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1b124:	f7ff f894 	bl	1a250 <uxListRemove>
   1b128:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
   1b12a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1b12c:	f8d8 3000 	ldr.w	r3, [r8]
   1b130:	4298      	cmp	r0, r3
   1b132:	bf88      	it	hi
   1b134:	f8c8 0000 	strhi.w	r0, [r8]
   1b138:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1b13c:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
   1b140:	f7ff f85e 	bl	1a200 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1b144:	f8d9 3000 	ldr.w	r3, [r9]
   1b148:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1b14a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
   1b14c:	429a      	cmp	r2, r3
   1b14e:	bf28      	it	cs
   1b150:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1b152:	683b      	ldr	r3, [r7, #0]
   1b154:	681b      	ldr	r3, [r3, #0]
   1b156:	2b00      	cmp	r3, #0
   1b158:	d032      	beq.n	1b1c0 <xTaskIncrementTick+0xec>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1b15a:	683b      	ldr	r3, [r7, #0]
   1b15c:	68db      	ldr	r3, [r3, #12]
   1b15e:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1b160:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1b162:	1d21      	adds	r1, r4, #4
					if( xConstTickCount < xItemValue )
   1b164:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1b166:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
   1b168:	d2d4      	bcs.n	1b114 <xTaskIncrementTick+0x40>
						xNextTaskUnblockTime = xItemValue;
   1b16a:	f8cb 3000 	str.w	r3, [fp]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
   1b16e:	e004      	b.n	1b17a <xTaskIncrementTick+0xa6>
		++uxPendedTicks;
   1b170:	4a1d      	ldr	r2, [pc, #116]	; (1b1e8 <xTaskIncrementTick+0x114>)
   1b172:	6813      	ldr	r3, [r2, #0]
   1b174:	3301      	adds	r3, #1
BaseType_t xSwitchRequired = pdFALSE;
   1b176:	2500      	movs	r5, #0
		++uxPendedTicks;
   1b178:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
   1b17a:	4b1c      	ldr	r3, [pc, #112]	; (1b1ec <xTaskIncrementTick+0x118>)
   1b17c:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
   1b17e:	2b00      	cmp	r3, #0
}
   1b180:	bf0c      	ite	eq
   1b182:	4628      	moveq	r0, r5
   1b184:	2001      	movne	r0, #1
   1b186:	b003      	add	sp, #12
   1b188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
   1b18c:	4b15      	ldr	r3, [pc, #84]	; (1b1e4 <xTaskIncrementTick+0x110>)
   1b18e:	681a      	ldr	r2, [r3, #0]
   1b190:	6812      	ldr	r2, [r2, #0]
   1b192:	b992      	cbnz	r2, 1b1ba <xTaskIncrementTick+0xe6>
   1b194:	4a16      	ldr	r2, [pc, #88]	; (1b1f0 <xTaskIncrementTick+0x11c>)
   1b196:	6818      	ldr	r0, [r3, #0]
   1b198:	6811      	ldr	r1, [r2, #0]
   1b19a:	6019      	str	r1, [r3, #0]
   1b19c:	4915      	ldr	r1, [pc, #84]	; (1b1f4 <xTaskIncrementTick+0x120>)
   1b19e:	6010      	str	r0, [r2, #0]
   1b1a0:	680a      	ldr	r2, [r1, #0]
   1b1a2:	3201      	adds	r2, #1
   1b1a4:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1b1a6:	681a      	ldr	r2, [r3, #0]
   1b1a8:	6812      	ldr	r2, [r2, #0]
   1b1aa:	b972      	cbnz	r2, 1b1ca <xTaskIncrementTick+0xf6>
		xNextTaskUnblockTime = portMAX_DELAY;
   1b1ac:	f8df b048 	ldr.w	fp, [pc, #72]	; 1b1f8 <xTaskIncrementTick+0x124>
   1b1b0:	f04f 33ff 	mov.w	r3, #4294967295
   1b1b4:	f8cb 3000 	str.w	r3, [fp]
   1b1b8:	e79b      	b.n	1b0f2 <xTaskIncrementTick+0x1e>
			taskSWITCH_DELAYED_LISTS();
   1b1ba:	e7fe      	b.n	1b1ba <xTaskIncrementTick+0xe6>
BaseType_t xSwitchRequired = pdFALSE;
   1b1bc:	2500      	movs	r5, #0
   1b1be:	e7dc      	b.n	1b17a <xTaskIncrementTick+0xa6>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1b1c0:	f04f 33ff 	mov.w	r3, #4294967295
   1b1c4:	f8cb 3000 	str.w	r3, [fp]
					break;
   1b1c8:	e7d7      	b.n	1b17a <xTaskIncrementTick+0xa6>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1b1ca:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1b1cc:	f8df b028 	ldr.w	fp, [pc, #40]	; 1b1f8 <xTaskIncrementTick+0x124>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1b1d0:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1b1d2:	68db      	ldr	r3, [r3, #12]
   1b1d4:	685b      	ldr	r3, [r3, #4]
   1b1d6:	f8cb 3000 	str.w	r3, [fp]
	}
}
   1b1da:	e78a      	b.n	1b0f2 <xTaskIncrementTick+0x1e>
   1b1dc:	10005a64 	.word	0x10005a64
   1b1e0:	10005ad0 	.word	0x10005ad0
   1b1e4:	10005a04 	.word	0x10005a04
   1b1e8:	10005a60 	.word	0x10005a60
   1b1ec:	10005ad4 	.word	0x10005ad4
   1b1f0:	10005a08 	.word	0x10005a08
   1b1f4:	10005aa0 	.word	0x10005aa0
   1b1f8:	10005a9c 	.word	0x10005a9c
   1b1fc:	10005a6c 	.word	0x10005a6c
   1b200:	10005a0c 	.word	0x10005a0c
   1b204:	10005a00 	.word	0x10005a00

0001b208 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
   1b208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b20c:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
   1b20e:	f7f4 ffb1 	bl	10174 <vPortEnterCritical>
		--uxSchedulerSuspended;
   1b212:	4b3b      	ldr	r3, [pc, #236]	; (1b300 <xTaskResumeAll.part.0+0xf8>)
   1b214:	681a      	ldr	r2, [r3, #0]
   1b216:	3a01      	subs	r2, #1
   1b218:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1b21a:	681b      	ldr	r3, [r3, #0]
   1b21c:	2b00      	cmp	r3, #0
   1b21e:	d156      	bne.n	1b2ce <xTaskResumeAll.part.0+0xc6>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1b220:	4b38      	ldr	r3, [pc, #224]	; (1b304 <xTaskResumeAll.part.0+0xfc>)
   1b222:	681b      	ldr	r3, [r3, #0]
   1b224:	2b00      	cmp	r3, #0
   1b226:	d052      	beq.n	1b2ce <xTaskResumeAll.part.0+0xc6>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1b228:	4d37      	ldr	r5, [pc, #220]	; (1b308 <xTaskResumeAll.part.0+0x100>)
   1b22a:	682b      	ldr	r3, [r5, #0]
   1b22c:	2b00      	cmp	r3, #0
   1b22e:	d063      	beq.n	1b2f8 <xTaskResumeAll.part.0+0xf0>
   1b230:	4e36      	ldr	r6, [pc, #216]	; (1b30c <xTaskResumeAll.part.0+0x104>)
   1b232:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 1b320 <xTaskResumeAll.part.0+0x118>
   1b236:	4f36      	ldr	r7, [pc, #216]	; (1b310 <xTaskResumeAll.part.0+0x108>)
   1b238:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 1b324 <xTaskResumeAll.part.0+0x11c>
						xYieldPending = pdTRUE;
   1b23c:	f04f 0a01 	mov.w	sl, #1
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1b240:	68eb      	ldr	r3, [r5, #12]
   1b242:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1b244:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1b248:	f104 0018 	add.w	r0, r4, #24
   1b24c:	f7ff f800 	bl	1a250 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1b250:	4658      	mov	r0, fp
   1b252:	f7fe fffd 	bl	1a250 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
   1b256:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1b258:	6832      	ldr	r2, [r6, #0]
   1b25a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   1b25e:	4293      	cmp	r3, r2
   1b260:	4659      	mov	r1, fp
   1b262:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   1b266:	bf88      	it	hi
   1b268:	6033      	strhi	r3, [r6, #0]
   1b26a:	f7fe ffc9 	bl	1a200 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1b26e:	683b      	ldr	r3, [r7, #0]
   1b270:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1b272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b274:	429a      	cmp	r2, r3
   1b276:	d332      	bcc.n	1b2de <xTaskResumeAll.part.0+0xd6>
						xYieldPending = pdTRUE;
   1b278:	f8c9 a000 	str.w	sl, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1b27c:	682b      	ldr	r3, [r5, #0]
   1b27e:	2b00      	cmp	r3, #0
   1b280:	d1de      	bne.n	1b240 <xTaskResumeAll.part.0+0x38>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1b282:	4b24      	ldr	r3, [pc, #144]	; (1b314 <xTaskResumeAll.part.0+0x10c>)
   1b284:	681a      	ldr	r2, [r3, #0]
   1b286:	6812      	ldr	r2, [r2, #0]
   1b288:	2a00      	cmp	r2, #0
   1b28a:	d030      	beq.n	1b2ee <xTaskResumeAll.part.0+0xe6>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1b28c:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1b28e:	4b22      	ldr	r3, [pc, #136]	; (1b318 <xTaskResumeAll.part.0+0x110>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1b290:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1b292:	68d2      	ldr	r2, [r2, #12]
   1b294:	6852      	ldr	r2, [r2, #4]
   1b296:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1b298:	4e20      	ldr	r6, [pc, #128]	; (1b31c <xTaskResumeAll.part.0+0x114>)
   1b29a:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1b29c:	b144      	cbz	r4, 1b2b0 <xTaskResumeAll.part.0+0xa8>
								xYieldPending = pdTRUE;
   1b29e:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
   1b2a0:	f7ff ff18 	bl	1b0d4 <xTaskIncrementTick>
   1b2a4:	b108      	cbz	r0, 1b2aa <xTaskResumeAll.part.0+0xa2>
								xYieldPending = pdTRUE;
   1b2a6:	f8c9 5000 	str.w	r5, [r9]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   1b2aa:	3c01      	subs	r4, #1
   1b2ac:	d1f8      	bne.n	1b2a0 <xTaskResumeAll.part.0+0x98>
						uxPendedTicks = 0;
   1b2ae:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
   1b2b0:	f8d9 3000 	ldr.w	r3, [r9]
   1b2b4:	b15b      	cbz	r3, 1b2ce <xTaskResumeAll.part.0+0xc6>
					taskYIELD_IF_USING_PREEMPTION();
   1b2b6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1b2ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1b2be:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
   1b2c2:	f3bf 8f4f 	dsb	sy
   1b2c6:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
   1b2ca:	2001      	movs	r0, #1
   1b2cc:	e000      	b.n	1b2d0 <xTaskResumeAll.part.0+0xc8>
BaseType_t xAlreadyYielded = pdFALSE;
   1b2ce:	2000      	movs	r0, #0
   1b2d0:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
   1b2d2:	f7f4 ff69 	bl	101a8 <vPortExitCritical>
}
   1b2d6:	9801      	ldr	r0, [sp, #4]
   1b2d8:	b003      	add	sp, #12
   1b2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1b2de:	682b      	ldr	r3, [r5, #0]
   1b2e0:	2b00      	cmp	r3, #0
   1b2e2:	d1ad      	bne.n	1b240 <xTaskResumeAll.part.0+0x38>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1b2e4:	4b0b      	ldr	r3, [pc, #44]	; (1b314 <xTaskResumeAll.part.0+0x10c>)
   1b2e6:	681a      	ldr	r2, [r3, #0]
   1b2e8:	6812      	ldr	r2, [r2, #0]
   1b2ea:	2a00      	cmp	r2, #0
   1b2ec:	d1ce      	bne.n	1b28c <xTaskResumeAll.part.0+0x84>
		xNextTaskUnblockTime = portMAX_DELAY;
   1b2ee:	4b0a      	ldr	r3, [pc, #40]	; (1b318 <xTaskResumeAll.part.0+0x110>)
   1b2f0:	f04f 32ff 	mov.w	r2, #4294967295
   1b2f4:	601a      	str	r2, [r3, #0]
   1b2f6:	e7cf      	b.n	1b298 <xTaskResumeAll.part.0+0x90>
   1b2f8:	f8df 9028 	ldr.w	r9, [pc, #40]	; 1b324 <xTaskResumeAll.part.0+0x11c>
   1b2fc:	e7cc      	b.n	1b298 <xTaskResumeAll.part.0+0x90>
   1b2fe:	bf00      	nop
   1b300:	10005a64 	.word	0x10005a64
   1b304:	10005a5c 	.word	0x10005a5c
   1b308:	10005aa4 	.word	0x10005aa4
   1b30c:	10005a6c 	.word	0x10005a6c
   1b310:	10005a00 	.word	0x10005a00
   1b314:	10005a04 	.word	0x10005a04
   1b318:	10005a9c 	.word	0x10005a9c
   1b31c:	10005a60 	.word	0x10005a60
   1b320:	10005a0c 	.word	0x10005a0c
   1b324:	10005ad4 	.word	0x10005ad4

0001b328 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
   1b328:	4b02      	ldr	r3, [pc, #8]	; (1b334 <xTaskResumeAll+0xc>)
   1b32a:	681b      	ldr	r3, [r3, #0]
   1b32c:	b903      	cbnz	r3, 1b330 <xTaskResumeAll+0x8>
   1b32e:	e7fe      	b.n	1b32e <xTaskResumeAll+0x6>
   1b330:	f7ff bf6a 	b.w	1b208 <xTaskResumeAll.part.0>
   1b334:	10005a64 	.word	0x10005a64

0001b338 <prvIdleTask>:
{
   1b338:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b33c:	4c2b      	ldr	r4, [pc, #172]	; (1b3ec <prvIdleTask+0xb4>)
   1b33e:	4e2c      	ldr	r6, [pc, #176]	; (1b3f0 <prvIdleTask+0xb8>)
   1b340:	4d2c      	ldr	r5, [pc, #176]	; (1b3f4 <prvIdleTask+0xbc>)
   1b342:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 1b3f8 <prvIdleTask+0xc0>
   1b346:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 1b3fc <prvIdleTask+0xc4>
   1b34a:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 1b400 <prvIdleTask+0xc8>
				taskYIELD();
   1b34e:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
   1b352:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1b356:	6823      	ldr	r3, [r4, #0]
   1b358:	2b01      	cmp	r3, #1
   1b35a:	d905      	bls.n	1b368 <prvIdleTask+0x30>
				taskYIELD();
   1b35c:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
   1b360:	f3bf 8f4f 	dsb	sy
   1b364:	f3bf 8f6f 	isb	sy
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
   1b368:	6833      	ldr	r3, [r6, #0]
   1b36a:	bb13      	cbnz	r3, 1b3b2 <prvIdleTask+0x7a>
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
   1b36c:	682b      	ldr	r3, [r5, #0]
   1b36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b370:	2b00      	cmp	r3, #0
   1b372:	d1f0      	bne.n	1b356 <prvIdleTask+0x1e>
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
   1b374:	6823      	ldr	r3, [r4, #0]
   1b376:	2b01      	cmp	r3, #1
   1b378:	d8ed      	bhi.n	1b356 <prvIdleTask+0x1e>
			xReturn = xNextTaskUnblockTime - xTickCount;
   1b37a:	f8db 3000 	ldr.w	r3, [fp]
   1b37e:	f8da 2000 	ldr.w	r2, [sl]
   1b382:	1a9b      	subs	r3, r3, r2
			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
   1b384:	2b01      	cmp	r3, #1
   1b386:	d9e6      	bls.n	1b356 <prvIdleTask+0x1e>
	++uxSchedulerSuspended;
   1b388:	f8d9 3000 	ldr.w	r3, [r9]
   1b38c:	3301      	adds	r3, #1
   1b38e:	f8c9 3000 	str.w	r3, [r9]
					configASSERT( xNextTaskUnblockTime >= xTickCount );
   1b392:	f8db 2000 	ldr.w	r2, [fp]
   1b396:	f8da 3000 	ldr.w	r3, [sl]
   1b39a:	429a      	cmp	r2, r3
   1b39c:	d308      	bcc.n	1b3b0 <prvIdleTask+0x78>
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
   1b39e:	6833      	ldr	r3, [r6, #0]
   1b3a0:	b16b      	cbz	r3, 1b3be <prvIdleTask+0x86>
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
   1b3a2:	682b      	ldr	r3, [r5, #0]
   1b3a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b3a6:	b1f3      	cbz	r3, 1b3e6 <prvIdleTask+0xae>
	configASSERT( uxSchedulerSuspended );
   1b3a8:	f8d9 3000 	ldr.w	r3, [r9]
   1b3ac:	b9c3      	cbnz	r3, 1b3e0 <prvIdleTask+0xa8>
   1b3ae:	e7fe      	b.n	1b3ae <prvIdleTask+0x76>
					configASSERT( xNextTaskUnblockTime >= xTickCount );
   1b3b0:	e7fe      	b.n	1b3b0 <prvIdleTask+0x78>
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
   1b3b2:	682b      	ldr	r3, [r5, #0]
   1b3b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b3b6:	2b00      	cmp	r3, #0
   1b3b8:	d1cd      	bne.n	1b356 <prvIdleTask+0x1e>
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
   1b3ba:	6823      	ldr	r3, [r4, #0]
   1b3bc:	e7cb      	b.n	1b356 <prvIdleTask+0x1e>
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
   1b3be:	682b      	ldr	r3, [r5, #0]
   1b3c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b3c2:	2b00      	cmp	r3, #0
   1b3c4:	d1f0      	bne.n	1b3a8 <prvIdleTask+0x70>
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
   1b3c6:	6823      	ldr	r3, [r4, #0]
   1b3c8:	2b01      	cmp	r3, #1
   1b3ca:	d8ed      	bhi.n	1b3a8 <prvIdleTask+0x70>
			xReturn = xNextTaskUnblockTime - xTickCount;
   1b3cc:	f8db 0000 	ldr.w	r0, [fp]
   1b3d0:	f8da 3000 	ldr.w	r3, [sl]
   1b3d4:	1ac0      	subs	r0, r0, r3
					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
   1b3d6:	2801      	cmp	r0, #1
   1b3d8:	d9e6      	bls.n	1b3a8 <prvIdleTask+0x70>
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
   1b3da:	f7f4 ff57 	bl	1028c <vPortSuppressTicksAndSleep>
						traceLOW_POWER_IDLE_END();
   1b3de:	e7e3      	b.n	1b3a8 <prvIdleTask+0x70>
   1b3e0:	f7ff ff12 	bl	1b208 <xTaskResumeAll.part.0>
   1b3e4:	e7b7      	b.n	1b356 <prvIdleTask+0x1e>
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
   1b3e6:	6823      	ldr	r3, [r4, #0]
   1b3e8:	e7de      	b.n	1b3a8 <prvIdleTask+0x70>
   1b3ea:	bf00      	nop
   1b3ec:	10005a0c 	.word	0x10005a0c
   1b3f0:	10005a6c 	.word	0x10005a6c
   1b3f4:	10005a00 	.word	0x10005a00
   1b3f8:	10005a9c 	.word	0x10005a9c
   1b3fc:	10005ad0 	.word	0x10005ad0
   1b400:	10005a64 	.word	0x10005a64

0001b404 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1b404:	4b04      	ldr	r3, [pc, #16]	; (1b418 <vTaskSwitchContext+0x14>)
   1b406:	681b      	ldr	r3, [r3, #0]
   1b408:	b11b      	cbz	r3, 1b412 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
   1b40a:	4b04      	ldr	r3, [pc, #16]	; (1b41c <vTaskSwitchContext+0x18>)
   1b40c:	2201      	movs	r2, #1
   1b40e:	601a      	str	r2, [r3, #0]
}
   1b410:	4770      	bx	lr
   1b412:	f7ff bb5b 	b.w	1aacc <vTaskSwitchContext.part.0>
   1b416:	bf00      	nop
   1b418:	10005a64 	.word	0x10005a64
   1b41c:	10005ad4 	.word	0x10005ad4

0001b420 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
   1b420:	b1d0      	cbz	r0, 1b458 <vTaskPlaceOnEventList+0x38>
{
   1b422:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1b424:	4d16      	ldr	r5, [pc, #88]	; (1b480 <vTaskPlaceOnEventList+0x60>)
   1b426:	460c      	mov	r4, r1
   1b428:	6829      	ldr	r1, [r5, #0]
   1b42a:	3118      	adds	r1, #24
   1b42c:	f7fe fef8 	bl	1a220 <vListInsert>


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   1b430:	4b14      	ldr	r3, [pc, #80]	; (1b484 <vTaskPlaceOnEventList+0x64>)
   1b432:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1b434:	6828      	ldr	r0, [r5, #0]
   1b436:	3004      	adds	r0, #4
   1b438:	f7fe ff0a 	bl	1a250 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1b43c:	1c63      	adds	r3, r4, #1
   1b43e:	d00c      	beq.n	1b45a <vTaskPlaceOnEventList+0x3a>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1b440:	682b      	ldr	r3, [r5, #0]
   1b442:	19a4      	adds	r4, r4, r6
   1b444:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
   1b446:	d30f      	bcc.n	1b468 <vTaskPlaceOnEventList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1b448:	4b0f      	ldr	r3, [pc, #60]	; (1b488 <vTaskPlaceOnEventList+0x68>)
   1b44a:	6818      	ldr	r0, [r3, #0]
   1b44c:	6829      	ldr	r1, [r5, #0]
}
   1b44e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1b452:	3104      	adds	r1, #4
   1b454:	f7fe bee4 	b.w	1a220 <vListInsert>
	configASSERT( pxEventList );
   1b458:	e7fe      	b.n	1b458 <vTaskPlaceOnEventList+0x38>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1b45a:	6829      	ldr	r1, [r5, #0]
   1b45c:	480b      	ldr	r0, [pc, #44]	; (1b48c <vTaskPlaceOnEventList+0x6c>)
}
   1b45e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1b462:	3104      	adds	r1, #4
   1b464:	f7fe becc 	b.w	1a200 <vListInsertEnd>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1b468:	4b09      	ldr	r3, [pc, #36]	; (1b490 <vTaskPlaceOnEventList+0x70>)
   1b46a:	6818      	ldr	r0, [r3, #0]
   1b46c:	6829      	ldr	r1, [r5, #0]
   1b46e:	3104      	adds	r1, #4
   1b470:	f7fe fed6 	bl	1a220 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
   1b474:	4b07      	ldr	r3, [pc, #28]	; (1b494 <vTaskPlaceOnEventList+0x74>)
   1b476:	681a      	ldr	r2, [r3, #0]
   1b478:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
   1b47a:	bf38      	it	cc
   1b47c:	601c      	strcc	r4, [r3, #0]
}
   1b47e:	bd70      	pop	{r4, r5, r6, pc}
   1b480:	10005a00 	.word	0x10005a00
   1b484:	10005ad0 	.word	0x10005ad0
   1b488:	10005a08 	.word	0x10005a08
   1b48c:	10005abc 	.word	0x10005abc
   1b490:	10005a04 	.word	0x10005a04
   1b494:	10005a9c 	.word	0x10005a9c

0001b498 <vTaskPlaceOnUnorderedEventList>:
	configASSERT( pxEventList );
   1b498:	b118      	cbz	r0, 1b4a2 <vTaskPlaceOnUnorderedEventList+0xa>
	configASSERT( uxSchedulerSuspended != 0 );
   1b49a:	4b1b      	ldr	r3, [pc, #108]	; (1b508 <vTaskPlaceOnUnorderedEventList+0x70>)
   1b49c:	681b      	ldr	r3, [r3, #0]
   1b49e:	b90b      	cbnz	r3, 1b4a4 <vTaskPlaceOnUnorderedEventList+0xc>
   1b4a0:	e7fe      	b.n	1b4a0 <vTaskPlaceOnUnorderedEventList+0x8>
	configASSERT( pxEventList );
   1b4a2:	e7fe      	b.n	1b4a2 <vTaskPlaceOnUnorderedEventList+0xa>
{
   1b4a4:	b570      	push	{r4, r5, r6, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
   1b4a6:	4d19      	ldr	r5, [pc, #100]	; (1b50c <vTaskPlaceOnUnorderedEventList+0x74>)
   1b4a8:	682b      	ldr	r3, [r5, #0]
   1b4aa:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
   1b4ae:	6199      	str	r1, [r3, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1b4b0:	6829      	ldr	r1, [r5, #0]
   1b4b2:	3118      	adds	r1, #24
   1b4b4:	4614      	mov	r4, r2
   1b4b6:	f7fe fea3 	bl	1a200 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
   1b4ba:	4b15      	ldr	r3, [pc, #84]	; (1b510 <vTaskPlaceOnUnorderedEventList+0x78>)
   1b4bc:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1b4be:	6828      	ldr	r0, [r5, #0]
   1b4c0:	3004      	adds	r0, #4
   1b4c2:	f7fe fec5 	bl	1a250 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1b4c6:	1c63      	adds	r3, r4, #1
   1b4c8:	d00b      	beq.n	1b4e2 <vTaskPlaceOnUnorderedEventList+0x4a>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1b4ca:	682b      	ldr	r3, [r5, #0]
   1b4cc:	19a4      	adds	r4, r4, r6
   1b4ce:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   1b4d0:	d30e      	bcc.n	1b4f0 <vTaskPlaceOnUnorderedEventList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1b4d2:	4b10      	ldr	r3, [pc, #64]	; (1b514 <vTaskPlaceOnUnorderedEventList+0x7c>)
   1b4d4:	6818      	ldr	r0, [r3, #0]
   1b4d6:	6829      	ldr	r1, [r5, #0]
}
   1b4d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1b4dc:	3104      	adds	r1, #4
   1b4de:	f7fe be9f 	b.w	1a220 <vListInsert>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1b4e2:	6829      	ldr	r1, [r5, #0]
   1b4e4:	480c      	ldr	r0, [pc, #48]	; (1b518 <vTaskPlaceOnUnorderedEventList+0x80>)
}
   1b4e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1b4ea:	3104      	adds	r1, #4
   1b4ec:	f7fe be88 	b.w	1a200 <vListInsertEnd>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1b4f0:	4b0a      	ldr	r3, [pc, #40]	; (1b51c <vTaskPlaceOnUnorderedEventList+0x84>)
   1b4f2:	6818      	ldr	r0, [r3, #0]
   1b4f4:	6829      	ldr	r1, [r5, #0]
   1b4f6:	3104      	adds	r1, #4
   1b4f8:	f7fe fe92 	bl	1a220 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
   1b4fc:	4b08      	ldr	r3, [pc, #32]	; (1b520 <vTaskPlaceOnUnorderedEventList+0x88>)
   1b4fe:	681a      	ldr	r2, [r3, #0]
   1b500:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
   1b502:	bf38      	it	cc
   1b504:	601c      	strcc	r4, [r3, #0]
}
   1b506:	bd70      	pop	{r4, r5, r6, pc}
   1b508:	10005a64 	.word	0x10005a64
   1b50c:	10005a00 	.word	0x10005a00
   1b510:	10005ad0 	.word	0x10005ad0
   1b514:	10005a08 	.word	0x10005a08
   1b518:	10005abc 	.word	0x10005abc
   1b51c:	10005a04 	.word	0x10005a04
   1b520:	10005a9c 	.word	0x10005a9c

0001b524 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
   1b524:	b1d0      	cbz	r0, 1b55c <vTaskPlaceOnEventListRestricted+0x38>
	{
   1b526:	b570      	push	{r4, r5, r6, lr}
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1b528:	4e19      	ldr	r6, [pc, #100]	; (1b590 <vTaskPlaceOnEventListRestricted+0x6c>)
   1b52a:	460c      	mov	r4, r1
   1b52c:	6831      	ldr	r1, [r6, #0]
   1b52e:	4615      	mov	r5, r2
   1b530:	3118      	adds	r1, #24
   1b532:	f7fe fe65 	bl	1a200 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
   1b536:	4b17      	ldr	r3, [pc, #92]	; (1b594 <vTaskPlaceOnEventListRestricted+0x70>)
		if( xWaitIndefinitely != pdFALSE )
   1b538:	b98d      	cbnz	r5, 1b55e <vTaskPlaceOnEventListRestricted+0x3a>
const TickType_t xConstTickCount = xTickCount;
   1b53a:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1b53c:	6830      	ldr	r0, [r6, #0]
   1b53e:	3004      	adds	r0, #4
   1b540:	f7fe fe86 	bl	1a250 <uxListRemove>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1b544:	6833      	ldr	r3, [r6, #0]
   1b546:	1964      	adds	r4, r4, r5
   1b548:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   1b54a:	d314      	bcc.n	1b576 <vTaskPlaceOnEventListRestricted+0x52>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1b54c:	4b12      	ldr	r3, [pc, #72]	; (1b598 <vTaskPlaceOnEventListRestricted+0x74>)
   1b54e:	6818      	ldr	r0, [r3, #0]
   1b550:	6831      	ldr	r1, [r6, #0]
	}
   1b552:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1b556:	3104      	adds	r1, #4
   1b558:	f7fe be62 	b.w	1a220 <vListInsert>
		configASSERT( pxEventList );
   1b55c:	e7fe      	b.n	1b55c <vTaskPlaceOnEventListRestricted+0x38>
const TickType_t xConstTickCount = xTickCount;
   1b55e:	681b      	ldr	r3, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1b560:	6830      	ldr	r0, [r6, #0]
   1b562:	3004      	adds	r0, #4
   1b564:	f7fe fe74 	bl	1a250 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1b568:	6831      	ldr	r1, [r6, #0]
   1b56a:	480c      	ldr	r0, [pc, #48]	; (1b59c <vTaskPlaceOnEventListRestricted+0x78>)
	}
   1b56c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1b570:	3104      	adds	r1, #4
   1b572:	f7fe be45 	b.w	1a200 <vListInsertEnd>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1b576:	4b0a      	ldr	r3, [pc, #40]	; (1b5a0 <vTaskPlaceOnEventListRestricted+0x7c>)
   1b578:	6818      	ldr	r0, [r3, #0]
   1b57a:	6831      	ldr	r1, [r6, #0]
   1b57c:	3104      	adds	r1, #4
   1b57e:	f7fe fe4f 	bl	1a220 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
   1b582:	4b08      	ldr	r3, [pc, #32]	; (1b5a4 <vTaskPlaceOnEventListRestricted+0x80>)
   1b584:	681a      	ldr	r2, [r3, #0]
   1b586:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
   1b588:	bf38      	it	cc
   1b58a:	601c      	strcc	r4, [r3, #0]
	}
   1b58c:	bd70      	pop	{r4, r5, r6, pc}
   1b58e:	bf00      	nop
   1b590:	10005a00 	.word	0x10005a00
   1b594:	10005ad0 	.word	0x10005ad0
   1b598:	10005a08 	.word	0x10005a08
   1b59c:	10005abc 	.word	0x10005abc
   1b5a0:	10005a04 	.word	0x10005a04
   1b5a4:	10005a9c 	.word	0x10005a9c

0001b5a8 <xTaskRemoveFromEventList>:
{
   1b5a8:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1b5aa:	68c3      	ldr	r3, [r0, #12]
   1b5ac:	68dc      	ldr	r4, [r3, #12]
{
   1b5ae:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
   1b5b0:	b304      	cbz	r4, 1b5f4 <xTaskRemoveFromEventList+0x4c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   1b5b2:	f104 0518 	add.w	r5, r4, #24
   1b5b6:	4628      	mov	r0, r5
   1b5b8:	f7fe fe4a 	bl	1a250 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1b5bc:	4b1c      	ldr	r3, [pc, #112]	; (1b630 <xTaskRemoveFromEventList+0x88>)
   1b5be:	681b      	ldr	r3, [r3, #0]
   1b5c0:	b1cb      	cbz	r3, 1b5f6 <xTaskRemoveFromEventList+0x4e>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1b5c2:	481c      	ldr	r0, [pc, #112]	; (1b634 <xTaskRemoveFromEventList+0x8c>)
   1b5c4:	4629      	mov	r1, r5
   1b5c6:	f7fe fe1b 	bl	1a200 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1b5ca:	4b1b      	ldr	r3, [pc, #108]	; (1b638 <xTaskRemoveFromEventList+0x90>)
   1b5cc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1b5ce:	681b      	ldr	r3, [r3, #0]
   1b5d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b5d2:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
   1b5d4:	bf82      	ittt	hi
   1b5d6:	4b19      	ldrhi	r3, [pc, #100]	; (1b63c <xTaskRemoveFromEventList+0x94>)
   1b5d8:	2001      	movhi	r0, #1
   1b5da:	6018      	strhi	r0, [r3, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1b5dc:	4b18      	ldr	r3, [pc, #96]	; (1b640 <xTaskRemoveFromEventList+0x98>)
   1b5de:	681a      	ldr	r2, [r3, #0]
   1b5e0:	6812      	ldr	r2, [r2, #0]
		xReturn = pdFALSE;
   1b5e2:	bf98      	it	ls
   1b5e4:	2000      	movls	r0, #0
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1b5e6:	b9d2      	cbnz	r2, 1b61e <xTaskRemoveFromEventList+0x76>
		xNextTaskUnblockTime = portMAX_DELAY;
   1b5e8:	4b16      	ldr	r3, [pc, #88]	; (1b644 <xTaskRemoveFromEventList+0x9c>)
   1b5ea:	f04f 32ff 	mov.w	r2, #4294967295
   1b5ee:	601a      	str	r2, [r3, #0]
}
   1b5f0:	b003      	add	sp, #12
   1b5f2:	bd30      	pop	{r4, r5, pc}
	configASSERT( pxUnblockedTCB );
   1b5f4:	e7fe      	b.n	1b5f4 <xTaskRemoveFromEventList+0x4c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1b5f6:	1d21      	adds	r1, r4, #4
   1b5f8:	4608      	mov	r0, r1
   1b5fa:	9101      	str	r1, [sp, #4]
   1b5fc:	f7fe fe28 	bl	1a250 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
   1b600:	4a11      	ldr	r2, [pc, #68]	; (1b648 <xTaskRemoveFromEventList+0xa0>)
   1b602:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1b604:	6810      	ldr	r0, [r2, #0]
   1b606:	9901      	ldr	r1, [sp, #4]
   1b608:	4283      	cmp	r3, r0
   1b60a:	4810      	ldr	r0, [pc, #64]	; (1b64c <xTaskRemoveFromEventList+0xa4>)
   1b60c:	bf88      	it	hi
   1b60e:	6013      	strhi	r3, [r2, #0]
   1b610:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1b614:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1b618:	f7fe fdf2 	bl	1a200 <vListInsertEnd>
   1b61c:	e7d5      	b.n	1b5ca <xTaskRemoveFromEventList+0x22>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1b61e:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1b620:	4b08      	ldr	r3, [pc, #32]	; (1b644 <xTaskRemoveFromEventList+0x9c>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1b622:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1b624:	68d2      	ldr	r2, [r2, #12]
   1b626:	6852      	ldr	r2, [r2, #4]
   1b628:	601a      	str	r2, [r3, #0]
}
   1b62a:	b003      	add	sp, #12
   1b62c:	bd30      	pop	{r4, r5, pc}
   1b62e:	bf00      	nop
   1b630:	10005a64 	.word	0x10005a64
   1b634:	10005aa4 	.word	0x10005aa4
   1b638:	10005a00 	.word	0x10005a00
   1b63c:	10005ad4 	.word	0x10005ad4
   1b640:	10005a04 	.word	0x10005a04
   1b644:	10005a9c 	.word	0x10005a9c
   1b648:	10005a6c 	.word	0x10005a6c
   1b64c:	10005a0c 	.word	0x10005a0c

0001b650 <vTaskRemoveFromUnorderedEventList>:
{
   1b650:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
   1b652:	4b14      	ldr	r3, [pc, #80]	; (1b6a4 <vTaskRemoveFromUnorderedEventList+0x54>)
   1b654:	681a      	ldr	r2, [r3, #0]
   1b656:	b312      	cbz	r2, 1b69e <vTaskRemoveFromUnorderedEventList+0x4e>
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1b658:	68c4      	ldr	r4, [r0, #12]
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
   1b65a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
   1b65e:	6001      	str	r1, [r0, #0]
	configASSERT( pxUnblockedTCB );
   1b660:	b1f4      	cbz	r4, 1b6a0 <vTaskRemoveFromUnorderedEventList+0x50>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1b662:	1d25      	adds	r5, r4, #4
	( void ) uxListRemove( pxEventListItem );
   1b664:	f7fe fdf4 	bl	1a250 <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1b668:	4628      	mov	r0, r5
   1b66a:	f7fe fdf1 	bl	1a250 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
   1b66e:	4a0e      	ldr	r2, [pc, #56]	; (1b6a8 <vTaskRemoveFromUnorderedEventList+0x58>)
   1b670:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1b672:	6811      	ldr	r1, [r2, #0]
   1b674:	480d      	ldr	r0, [pc, #52]	; (1b6ac <vTaskRemoveFromUnorderedEventList+0x5c>)
   1b676:	428b      	cmp	r3, r1
   1b678:	bf88      	it	hi
   1b67a:	6013      	strhi	r3, [r2, #0]
   1b67c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1b680:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1b684:	4629      	mov	r1, r5
   1b686:	f7fe fdbb 	bl	1a200 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1b68a:	4b09      	ldr	r3, [pc, #36]	; (1b6b0 <vTaskRemoveFromUnorderedEventList+0x60>)
   1b68c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1b68e:	681b      	ldr	r3, [r3, #0]
   1b690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b692:	429a      	cmp	r2, r3
   1b694:	d902      	bls.n	1b69c <vTaskRemoveFromUnorderedEventList+0x4c>
		xYieldPending = pdTRUE;
   1b696:	4b07      	ldr	r3, [pc, #28]	; (1b6b4 <vTaskRemoveFromUnorderedEventList+0x64>)
   1b698:	2201      	movs	r2, #1
   1b69a:	601a      	str	r2, [r3, #0]
}
   1b69c:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( uxSchedulerSuspended != pdFALSE );
   1b69e:	e7fe      	b.n	1b69e <vTaskRemoveFromUnorderedEventList+0x4e>
	configASSERT( pxUnblockedTCB );
   1b6a0:	e7fe      	b.n	1b6a0 <vTaskRemoveFromUnorderedEventList+0x50>
   1b6a2:	bf00      	nop
   1b6a4:	10005a64 	.word	0x10005a64
   1b6a8:	10005a6c 	.word	0x10005a6c
   1b6ac:	10005a0c 	.word	0x10005a0c
   1b6b0:	10005a00 	.word	0x10005a00
   1b6b4:	10005ad4 	.word	0x10005ad4

0001b6b8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1b6b8:	4a03      	ldr	r2, [pc, #12]	; (1b6c8 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
   1b6ba:	4b04      	ldr	r3, [pc, #16]	; (1b6cc <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1b6bc:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1b6be:	681b      	ldr	r3, [r3, #0]
   1b6c0:	e9c0 2300 	strd	r2, r3, [r0]
}
   1b6c4:	4770      	bx	lr
   1b6c6:	bf00      	nop
   1b6c8:	10005aa0 	.word	0x10005aa0
   1b6cc:	10005ad0 	.word	0x10005ad0

0001b6d0 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
   1b6d0:	b1e8      	cbz	r0, 1b70e <xTaskCheckForTimeOut+0x3e>
{
   1b6d2:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b6d4:	460d      	mov	r5, r1
   1b6d6:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
   1b6d8:	b1c1      	cbz	r1, 1b70c <xTaskCheckForTimeOut+0x3c>
   1b6da:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
   1b6dc:	f7f4 fd4a 	bl	10174 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
   1b6e0:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
   1b6e2:	4a15      	ldr	r2, [pc, #84]	; (1b738 <xTaskCheckForTimeOut+0x68>)
			if( *pxTicksToWait == portMAX_DELAY )
   1b6e4:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
   1b6e6:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
   1b6e8:	d020      	beq.n	1b72c <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1b6ea:	f8df c050 	ldr.w	ip, [pc, #80]	; 1b73c <xTaskCheckForTimeOut+0x6c>
   1b6ee:	e9d4 6000 	ldrd	r6, r0, [r4]
   1b6f2:	f8dc 7000 	ldr.w	r7, [ip]
   1b6f6:	42be      	cmp	r6, r7
   1b6f8:	d00a      	beq.n	1b710 <xTaskCheckForTimeOut+0x40>
   1b6fa:	4288      	cmp	r0, r1
   1b6fc:	d808      	bhi.n	1b710 <xTaskCheckForTimeOut+0x40>
			xReturn = pdTRUE;
   1b6fe:	2001      	movs	r0, #1
   1b700:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
   1b702:	f7f4 fd51 	bl	101a8 <vPortExitCritical>
}
   1b706:	9801      	ldr	r0, [sp, #4]
   1b708:	b003      	add	sp, #12
   1b70a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxTicksToWait );
   1b70c:	e7fe      	b.n	1b70c <xTaskCheckForTimeOut+0x3c>
	configASSERT( pxTimeOut );
   1b70e:	e7fe      	b.n	1b70e <xTaskCheckForTimeOut+0x3e>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1b710:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1b714:	4573      	cmp	r3, lr
   1b716:	d90b      	bls.n	1b730 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= xElapsedTime;
   1b718:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1b71a:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1b71e:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
   1b720:	4403      	add	r3, r0
   1b722:	602b      	str	r3, [r5, #0]
			xReturn = pdFALSE;
   1b724:	2000      	movs	r0, #0
	pxTimeOut->xTimeOnEntering = xTickCount;
   1b726:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
   1b72a:	e7e9      	b.n	1b700 <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
   1b72c:	2000      	movs	r0, #0
   1b72e:	e7e7      	b.n	1b700 <xTaskCheckForTimeOut+0x30>
			*pxTicksToWait = 0;
   1b730:	2300      	movs	r3, #0
   1b732:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
   1b734:	2001      	movs	r0, #1
   1b736:	e7e3      	b.n	1b700 <xTaskCheckForTimeOut+0x30>
   1b738:	10005ad0 	.word	0x10005ad0
   1b73c:	10005aa0 	.word	0x10005aa0

0001b740 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
   1b740:	4b01      	ldr	r3, [pc, #4]	; (1b748 <vTaskMissedYield+0x8>)
   1b742:	2201      	movs	r2, #1
   1b744:	601a      	str	r2, [r3, #0]
}
   1b746:	4770      	bx	lr
   1b748:	10005ad4 	.word	0x10005ad4

0001b74c <eTaskConfirmSleepModeStatus>:
		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
   1b74c:	4b09      	ldr	r3, [pc, #36]	; (1b774 <eTaskConfirmSleepModeStatus+0x28>)
   1b74e:	6818      	ldr	r0, [r3, #0]
   1b750:	b918      	cbnz	r0, 1b75a <eTaskConfirmSleepModeStatus+0xe>
		else if( xYieldPending != pdFALSE )
   1b752:	4b09      	ldr	r3, [pc, #36]	; (1b778 <eTaskConfirmSleepModeStatus+0x2c>)
   1b754:	681b      	ldr	r3, [r3, #0]
   1b756:	b113      	cbz	r3, 1b75e <eTaskConfirmSleepModeStatus+0x12>
	}
   1b758:	4770      	bx	lr
			eReturn = eAbortSleep;
   1b75a:	2000      	movs	r0, #0
	}
   1b75c:	4770      	bx	lr
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
   1b75e:	4a07      	ldr	r2, [pc, #28]	; (1b77c <eTaskConfirmSleepModeStatus+0x30>)
   1b760:	4b07      	ldr	r3, [pc, #28]	; (1b780 <eTaskConfirmSleepModeStatus+0x34>)
   1b762:	6810      	ldr	r0, [r2, #0]
   1b764:	681b      	ldr	r3, [r3, #0]
   1b766:	3b01      	subs	r3, #1
				eReturn = eNoTasksWaitingTimeout;
   1b768:	4298      	cmp	r0, r3
   1b76a:	bf14      	ite	ne
   1b76c:	2001      	movne	r0, #1
   1b76e:	2002      	moveq	r0, #2
   1b770:	4770      	bx	lr
   1b772:	bf00      	nop
   1b774:	10005aa4 	.word	0x10005aa4
   1b778:	10005ad4 	.word	0x10005ad4
   1b77c:	10005abc 	.word	0x10005abc
   1b780:	10005a5c 	.word	0x10005a5c

0001b784 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
   1b784:	4b05      	ldr	r3, [pc, #20]	; (1b79c <xTaskGetSchedulerState+0x18>)
   1b786:	681b      	ldr	r3, [r3, #0]
   1b788:	b133      	cbz	r3, 1b798 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1b78a:	4b05      	ldr	r3, [pc, #20]	; (1b7a0 <xTaskGetSchedulerState+0x1c>)
   1b78c:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
   1b78e:	2b00      	cmp	r3, #0
   1b790:	bf0c      	ite	eq
   1b792:	2002      	moveq	r0, #2
   1b794:	2000      	movne	r0, #0
   1b796:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
   1b798:	2001      	movs	r0, #1
	}
   1b79a:	4770      	bx	lr
   1b79c:	10005ab8 	.word	0x10005ab8
   1b7a0:	10005a64 	.word	0x10005a64

0001b7a4 <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
   1b7a4:	4a04      	ldr	r2, [pc, #16]	; (1b7b8 <uxTaskResetEventItemValue+0x14>)
   1b7a6:	6811      	ldr	r1, [r2, #0]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1b7a8:	6813      	ldr	r3, [r2, #0]
   1b7aa:	6812      	ldr	r2, [r2, #0]
   1b7ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
   1b7ae:	6988      	ldr	r0, [r1, #24]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1b7b0:	f1c3 0304 	rsb	r3, r3, #4
   1b7b4:	6193      	str	r3, [r2, #24]
}
   1b7b6:	4770      	bx	lr
   1b7b8:	10005a00 	.word	0x10005a00

0001b7bc <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   1b7bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b7c0:	4e1d      	ldr	r6, [pc, #116]	; (1b838 <prvSwitchTimerLists+0x7c>)
	if( xTimerQueue != NULL )
   1b7c2:	f8df 907c 	ldr.w	r9, [pc, #124]	; 1b840 <prvSwitchTimerLists+0x84>
{
   1b7c6:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
   1b7c8:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1b7cc:	e00c      	b.n	1b7e8 <prvSwitchTimerLists+0x2c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1b7ce:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1b7d0:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1b7d2:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1b7d4:	1d25      	adds	r5, r4, #4
   1b7d6:	4628      	mov	r0, r5
   1b7d8:	f7fe fd3a 	bl	1a250 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1b7dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b7de:	4620      	mov	r0, r4
   1b7e0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1b7e2:	69e3      	ldr	r3, [r4, #28]
   1b7e4:	2b01      	cmp	r3, #1
   1b7e6:	d00a      	beq.n	1b7fe <prvSwitchTimerLists+0x42>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1b7e8:	6833      	ldr	r3, [r6, #0]
   1b7ea:	681a      	ldr	r2, [r3, #0]
   1b7ec:	2a00      	cmp	r2, #0
   1b7ee:	d1ee      	bne.n	1b7ce <prvSwitchTimerLists+0x12>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   1b7f0:	4a12      	ldr	r2, [pc, #72]	; (1b83c <prvSwitchTimerLists+0x80>)
   1b7f2:	6811      	ldr	r1, [r2, #0]
   1b7f4:	6031      	str	r1, [r6, #0]
	pxOverflowTimerList = pxTemp;
   1b7f6:	6013      	str	r3, [r2, #0]
}
   1b7f8:	b005      	add	sp, #20
   1b7fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1b7fe:	69a3      	ldr	r3, [r4, #24]
   1b800:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
   1b802:	429f      	cmp	r7, r3
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1b804:	4629      	mov	r1, r5
			if( xReloadTime > xNextExpireTime )
   1b806:	d205      	bcs.n	1b814 <prvSwitchTimerLists+0x58>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1b808:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1b80a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1b80c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1b80e:	f7fe fd07 	bl	1a220 <vListInsert>
   1b812:	e7e9      	b.n	1b7e8 <prvSwitchTimerLists+0x2c>
	if( xTimerQueue != NULL )
   1b814:	f8d9 3000 	ldr.w	r3, [r9]
   1b818:	b16b      	cbz	r3, 1b836 <prvSwitchTimerLists+0x7a>
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1b81a:	e9cd 8700 	strd	r8, r7, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
   1b81e:	9402      	str	r4, [sp, #8]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1b820:	f7ff ffb0 	bl	1b784 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1b824:	2300      	movs	r3, #0
   1b826:	f8d9 0000 	ldr.w	r0, [r9]
   1b82a:	461a      	mov	r2, r3
   1b82c:	4669      	mov	r1, sp
   1b82e:	f7fe fd5f 	bl	1a2f0 <xQueueGenericSend>
				configASSERT( xResult );
   1b832:	2800      	cmp	r0, #0
   1b834:	d1d8      	bne.n	1b7e8 <prvSwitchTimerLists+0x2c>
   1b836:	e7fe      	b.n	1b836 <prvSwitchTimerLists+0x7a>
   1b838:	10005ad8 	.word	0x10005ad8
   1b83c:	10005adc 	.word	0x10005adc
   1b840:	10005b0c 	.word	0x10005b0c

0001b844 <prvTimerTask>:
{
   1b844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b848:	4e84      	ldr	r6, [pc, #528]	; (1ba5c <prvTimerTask+0x218>)
   1b84a:	4d85      	ldr	r5, [pc, #532]	; (1ba60 <prvTimerTask+0x21c>)
   1b84c:	4c85      	ldr	r4, [pc, #532]	; (1ba64 <prvTimerTask+0x220>)
   1b84e:	b08b      	sub	sp, #44	; 0x2c
					portYIELD_WITHIN_API();
   1b850:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   1b854:	6833      	ldr	r3, [r6, #0]
   1b856:	f8d3 a000 	ldr.w	sl, [r3]
   1b85a:	f1ba 0f00 	cmp.w	sl, #0
   1b85e:	f000 8098 	beq.w	1b992 <prvTimerTask+0x14e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1b862:	68db      	ldr	r3, [r3, #12]
   1b864:	f8d3 a000 	ldr.w	sl, [r3]
	vTaskSuspendAll();
   1b868:	f7ff fc16 	bl	1b098 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
   1b86c:	f7ff fc1c 	bl	1b0a8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
   1b870:	682a      	ldr	r2, [r5, #0]
   1b872:	4282      	cmp	r2, r0
	xTimeNow = xTaskGetTickCount();
   1b874:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
   1b876:	f200 809d 	bhi.w	1b9b4 <prvTimerTask+0x170>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1b87a:	4582      	cmp	sl, r0
	xLastTime = xTimeNow;
   1b87c:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1b87e:	f240 80ac 	bls.w	1b9da <prvTimerTask+0x196>
   1b882:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1b884:	6820      	ldr	r0, [r4, #0]
   1b886:	ebaa 0108 	sub.w	r1, sl, r8
   1b88a:	f7ff f8bb 	bl	1aa04 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
   1b88e:	f7ff fd4b 	bl	1b328 <xTaskResumeAll>
   1b892:	b938      	cbnz	r0, 1b8a4 <prvTimerTask+0x60>
					portYIELD_WITHIN_API();
   1b894:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b898:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
   1b89c:	f3bf 8f4f 	dsb	sy
   1b8a0:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1b8a4:	6820      	ldr	r0, [r4, #0]
   1b8a6:	2200      	movs	r2, #0
   1b8a8:	a902      	add	r1, sp, #8
   1b8aa:	f7fe ff41 	bl	1a730 <xQueueReceive>
   1b8ae:	2800      	cmp	r0, #0
   1b8b0:	d0d0      	beq.n	1b854 <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
   1b8b2:	9b02      	ldr	r3, [sp, #8]
   1b8b4:	2b00      	cmp	r3, #0
   1b8b6:	db64      	blt.n	1b982 <prvTimerTask+0x13e>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1b8b8:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   1b8ba:	697b      	ldr	r3, [r7, #20]
   1b8bc:	b113      	cbz	r3, 1b8c4 <prvTimerTask+0x80>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1b8be:	1d38      	adds	r0, r7, #4
   1b8c0:	f7fe fcc6 	bl	1a250 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
   1b8c4:	f7ff fbf0 	bl	1b0a8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
   1b8c8:	682b      	ldr	r3, [r5, #0]
   1b8ca:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
   1b8cc:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
   1b8ce:	d378      	bcc.n	1b9c2 <prvTimerTask+0x17e>
			switch( xMessage.xMessageID )
   1b8d0:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
   1b8d2:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
   1b8d6:	2b09      	cmp	r3, #9
   1b8d8:	d8e4      	bhi.n	1b8a4 <prvTimerTask+0x60>
   1b8da:	a201      	add	r2, pc, #4	; (adr r2, 1b8e0 <prvTimerTask+0x9c>)
   1b8dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1b8e0:	0001b909 	.word	0x0001b909
   1b8e4:	0001b909 	.word	0x0001b909
   1b8e8:	0001b909 	.word	0x0001b909
   1b8ec:	0001b8a5 	.word	0x0001b8a5
   1b8f0:	0001b95d 	.word	0x0001b95d
   1b8f4:	0001b97b 	.word	0x0001b97b
   1b8f8:	0001b909 	.word	0x0001b909
   1b8fc:	0001b909 	.word	0x0001b909
   1b900:	0001b8a5 	.word	0x0001b8a5
   1b904:	0001b95d 	.word	0x0001b95d
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   1b908:	9b03      	ldr	r3, [sp, #12]
   1b90a:	69ba      	ldr	r2, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1b90c:	613f      	str	r7, [r7, #16]
   1b90e:	1899      	adds	r1, r3, r2
   1b910:	bf2c      	ite	cs
   1b912:	2001      	movcs	r0, #1
   1b914:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
   1b916:	4541      	cmp	r1, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1b918:	6079      	str	r1, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
   1b91a:	d855      	bhi.n	1b9c8 <prvTimerTask+0x184>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1b91c:	eba8 0303 	sub.w	r3, r8, r3
   1b920:	429a      	cmp	r2, r3
   1b922:	d823      	bhi.n	1b96c <prvTimerTask+0x128>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1b924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b926:	4638      	mov	r0, r7
   1b928:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1b92a:	69fb      	ldr	r3, [r7, #28]
   1b92c:	2b01      	cmp	r3, #1
   1b92e:	d1b9      	bne.n	1b8a4 <prvTimerTask+0x60>
	if( xTimerQueue != NULL )
   1b930:	6823      	ldr	r3, [r4, #0]
   1b932:	2b00      	cmp	r3, #0
   1b934:	f000 808c 	beq.w	1ba50 <prvTimerTask+0x20c>
		xMessage.xMessageID = xCommandID;
   1b938:	2300      	movs	r3, #0
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1b93a:	69ba      	ldr	r2, [r7, #24]
		xMessage.xMessageID = xCommandID;
   1b93c:	9306      	str	r3, [sp, #24]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1b93e:	9b03      	ldr	r3, [sp, #12]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
   1b940:	9708      	str	r7, [sp, #32]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1b942:	4413      	add	r3, r2
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1b944:	9307      	str	r3, [sp, #28]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1b946:	f7ff ff1d 	bl	1b784 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1b94a:	2300      	movs	r3, #0
   1b94c:	6820      	ldr	r0, [r4, #0]
   1b94e:	461a      	mov	r2, r3
   1b950:	a906      	add	r1, sp, #24
   1b952:	f7fe fccd 	bl	1a2f0 <xQueueGenericSend>
							configASSERT( xResult );
   1b956:	2800      	cmp	r0, #0
   1b958:	d1a4      	bne.n	1b8a4 <prvTimerTask+0x60>
   1b95a:	e7fe      	b.n	1b95a <prvTimerTask+0x116>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   1b95c:	9b03      	ldr	r3, [sp, #12]
   1b95e:	61bb      	str	r3, [r7, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1b960:	b153      	cbz	r3, 1b978 <prvTimerTask+0x134>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   1b962:	4443      	add	r3, r8
	if( xNextExpiryTime <= xTimeNow )
   1b964:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1b966:	607b      	str	r3, [r7, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1b968:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
   1b96a:	d831      	bhi.n	1b9d0 <prvTimerTask+0x18c>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1b96c:	4b3e      	ldr	r3, [pc, #248]	; (1ba68 <prvTimerTask+0x224>)
   1b96e:	1d39      	adds	r1, r7, #4
   1b970:	6818      	ldr	r0, [r3, #0]
   1b972:	f7fe fc55 	bl	1a220 <vListInsert>
	return xProcessTimerNow;
   1b976:	e795      	b.n	1b8a4 <prvTimerTask+0x60>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1b978:	e7fe      	b.n	1b978 <prvTimerTask+0x134>
						vPortFree( pxTimer );
   1b97a:	4638      	mov	r0, r7
   1b97c:	f000 f99c 	bl	1bcb8 <vPortFree>
					break;
   1b980:	e790      	b.n	1b8a4 <prvTimerTask+0x60>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
   1b982:	9b03      	ldr	r3, [sp, #12]
   1b984:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1b988:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   1b98a:	9b02      	ldr	r3, [sp, #8]
   1b98c:	2b00      	cmp	r3, #0
   1b98e:	db89      	blt.n	1b8a4 <prvTimerTask+0x60>
   1b990:	e792      	b.n	1b8b8 <prvTimerTask+0x74>
	vTaskSuspendAll();
   1b992:	f7ff fb81 	bl	1b098 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
   1b996:	f7ff fb87 	bl	1b0a8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
   1b99a:	682a      	ldr	r2, [r5, #0]
   1b99c:	4282      	cmp	r2, r0
	xTimeNow = xTaskGetTickCount();
   1b99e:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
   1b9a0:	d808      	bhi.n	1b9b4 <prvTimerTask+0x170>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1b9a2:	4b31      	ldr	r3, [pc, #196]	; (1ba68 <prvTimerTask+0x224>)
	xLastTime = xTimeNow;
   1b9a4:	f8c5 8000 	str.w	r8, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1b9a8:	681a      	ldr	r2, [r3, #0]
   1b9aa:	6812      	ldr	r2, [r2, #0]
   1b9ac:	fab2 f282 	clz	r2, r2
   1b9b0:	0952      	lsrs	r2, r2, #5
   1b9b2:	e767      	b.n	1b884 <prvTimerTask+0x40>
		prvSwitchTimerLists();
   1b9b4:	f7ff ff02 	bl	1b7bc <prvSwitchTimerLists>
	xLastTime = xTimeNow;
   1b9b8:	f8c5 8000 	str.w	r8, [r5]
			( void ) xTaskResumeAll();
   1b9bc:	f7ff fcb4 	bl	1b328 <xTaskResumeAll>
   1b9c0:	e770      	b.n	1b8a4 <prvTimerTask+0x60>
		prvSwitchTimerLists();
   1b9c2:	f7ff fefb 	bl	1b7bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
   1b9c6:	e783      	b.n	1b8d0 <prvTimerTask+0x8c>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   1b9c8:	4543      	cmp	r3, r8
   1b9ca:	d901      	bls.n	1b9d0 <prvTimerTask+0x18c>
   1b9cc:	2800      	cmp	r0, #0
   1b9ce:	d0a9      	beq.n	1b924 <prvTimerTask+0xe0>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1b9d0:	6830      	ldr	r0, [r6, #0]
   1b9d2:	1d39      	adds	r1, r7, #4
   1b9d4:	f7fe fc24 	bl	1a220 <vListInsert>
   1b9d8:	e764      	b.n	1b8a4 <prvTimerTask+0x60>
				( void ) xTaskResumeAll();
   1b9da:	f7ff fca5 	bl	1b328 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1b9de:	6832      	ldr	r2, [r6, #0]
   1b9e0:	68d2      	ldr	r2, [r2, #12]
   1b9e2:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1b9e6:	f10b 0104 	add.w	r1, fp, #4
   1b9ea:	4608      	mov	r0, r1
   1b9ec:	9101      	str	r1, [sp, #4]
   1b9ee:	f7fe fc2f 	bl	1a250 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1b9f2:	f8db 001c 	ldr.w	r0, [fp, #28]
   1b9f6:	9901      	ldr	r1, [sp, #4]
   1b9f8:	2801      	cmp	r0, #1
   1b9fa:	d004      	beq.n	1ba06 <prvTimerTask+0x1c2>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1b9fc:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   1ba00:	4658      	mov	r0, fp
   1ba02:	4798      	blx	r3
}
   1ba04:	e74e      	b.n	1b8a4 <prvTimerTask+0x60>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1ba06:	f8db 0018 	ldr.w	r0, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1ba0a:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1ba0e:	eb0a 0300 	add.w	r3, sl, r0
	if( xNextExpiryTime <= xTimeNow )
   1ba12:	4598      	cmp	r8, r3
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1ba14:	f8cb 3004 	str.w	r3, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
   1ba18:	d203      	bcs.n	1ba22 <prvTimerTask+0x1de>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1ba1a:	6830      	ldr	r0, [r6, #0]
   1ba1c:	f7fe fc00 	bl	1a220 <vListInsert>
	return xProcessTimerNow;
   1ba20:	e7ec      	b.n	1b9fc <prvTimerTask+0x1b8>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1ba22:	eba8 030a 	sub.w	r3, r8, sl
   1ba26:	4298      	cmp	r0, r3
   1ba28:	d813      	bhi.n	1ba52 <prvTimerTask+0x20e>
	if( xTimerQueue != NULL )
   1ba2a:	6823      	ldr	r3, [r4, #0]
   1ba2c:	b17b      	cbz	r3, 1ba4e <prvTimerTask+0x20a>
		xMessage.xMessageID = xCommandID;
   1ba2e:	2300      	movs	r3, #0
   1ba30:	9306      	str	r3, [sp, #24]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1ba32:	f8cd a01c 	str.w	sl, [sp, #28]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
   1ba36:	f8cd b020 	str.w	fp, [sp, #32]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1ba3a:	f7ff fea3 	bl	1b784 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1ba3e:	2300      	movs	r3, #0
   1ba40:	6820      	ldr	r0, [r4, #0]
   1ba42:	461a      	mov	r2, r3
   1ba44:	a906      	add	r1, sp, #24
   1ba46:	f7fe fc53 	bl	1a2f0 <xQueueGenericSend>
			configASSERT( xResult );
   1ba4a:	2800      	cmp	r0, #0
   1ba4c:	d1d6      	bne.n	1b9fc <prvTimerTask+0x1b8>
   1ba4e:	e7fe      	b.n	1ba4e <prvTimerTask+0x20a>
							configASSERT( xResult );
   1ba50:	e783      	b.n	1b95a <prvTimerTask+0x116>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1ba52:	4b05      	ldr	r3, [pc, #20]	; (1ba68 <prvTimerTask+0x224>)
   1ba54:	6818      	ldr	r0, [r3, #0]
   1ba56:	f7fe fbe3 	bl	1a220 <vListInsert>
	return xProcessTimerNow;
   1ba5a:	e7cf      	b.n	1b9fc <prvTimerTask+0x1b8>
   1ba5c:	10005ad8 	.word	0x10005ad8
   1ba60:	10005b08 	.word	0x10005b08
   1ba64:	10005b0c 	.word	0x10005b0c
   1ba68:	10005adc 	.word	0x10005adc

0001ba6c <xTimerCreateTimerTask>:
{
   1ba6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
   1ba6e:	4c16      	ldr	r4, [pc, #88]	; (1bac8 <xTimerCreateTimerTask+0x5c>)
{
   1ba70:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
   1ba72:	f7f4 fb7f 	bl	10174 <vPortEnterCritical>
		if( xTimerQueue == NULL )
   1ba76:	6825      	ldr	r5, [r4, #0]
   1ba78:	b195      	cbz	r5, 1baa0 <xTimerCreateTimerTask+0x34>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1ba7a:	f7f4 fb95 	bl	101a8 <vPortExitCritical>
	if( xTimerQueue != NULL )
   1ba7e:	6823      	ldr	r3, [r4, #0]
   1ba80:	b15b      	cbz	r3, 1ba9a <xTimerCreateTimerTask+0x2e>
			xReturn = xTaskCreate(	prvTimerTask,
   1ba82:	4a12      	ldr	r2, [pc, #72]	; (1bacc <xTimerCreateTimerTask+0x60>)
   1ba84:	4912      	ldr	r1, [pc, #72]	; (1bad0 <xTimerCreateTimerTask+0x64>)
   1ba86:	4813      	ldr	r0, [pc, #76]	; (1bad4 <xTimerCreateTimerTask+0x68>)
   1ba88:	2303      	movs	r3, #3
   1ba8a:	e9cd 3200 	strd	r3, r2, [sp]
   1ba8e:	2300      	movs	r3, #0
   1ba90:	f44f 7280 	mov.w	r2, #256	; 0x100
   1ba94:	f7ff f87a 	bl	1ab8c <xTaskCreate>
	configASSERT( xReturn );
   1ba98:	b900      	cbnz	r0, 1ba9c <xTimerCreateTimerTask+0x30>
   1ba9a:	e7fe      	b.n	1ba9a <xTimerCreateTimerTask+0x2e>
}
   1ba9c:	b003      	add	sp, #12
   1ba9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			vListInitialise( &xActiveTimerList1 );
   1baa0:	4f0d      	ldr	r7, [pc, #52]	; (1bad8 <xTimerCreateTimerTask+0x6c>)
			vListInitialise( &xActiveTimerList2 );
   1baa2:	4e0e      	ldr	r6, [pc, #56]	; (1badc <xTimerCreateTimerTask+0x70>)
			vListInitialise( &xActiveTimerList1 );
   1baa4:	4638      	mov	r0, r7
   1baa6:	f7fe fb9b 	bl	1a1e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
   1baaa:	4630      	mov	r0, r6
   1baac:	f7fe fb98 	bl	1a1e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
   1bab0:	4b0b      	ldr	r3, [pc, #44]	; (1bae0 <xTimerCreateTimerTask+0x74>)
   1bab2:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1bab4:	4b0b      	ldr	r3, [pc, #44]	; (1bae4 <xTimerCreateTimerTask+0x78>)
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1bab6:	462a      	mov	r2, r5
   1bab8:	2110      	movs	r1, #16
   1baba:	2005      	movs	r0, #5
			pxOverflowTimerList = &xActiveTimerList2;
   1babc:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1babe:	f7fe fbdb 	bl	1a278 <xQueueGenericCreate>
   1bac2:	6020      	str	r0, [r4, #0]
   1bac4:	e7d9      	b.n	1ba7a <xTimerCreateTimerTask+0xe>
   1bac6:	bf00      	nop
   1bac8:	10005b0c 	.word	0x10005b0c
   1bacc:	10005b10 	.word	0x10005b10
   1bad0:	0002072c 	.word	0x0002072c
   1bad4:	0001b845 	.word	0x0001b845
   1bad8:	10005ae0 	.word	0x10005ae0
   1badc:	10005af4 	.word	0x10005af4
   1bae0:	10005ad8 	.word	0x10005ad8
   1bae4:	10005adc 	.word	0x10005adc

0001bae8 <xTimerCreate>:
	{
   1bae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1baec:	4680      	mov	r8, r0
   1baee:	b083      	sub	sp, #12
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
   1baf0:	2028      	movs	r0, #40	; 0x28
	{
   1baf2:	460d      	mov	r5, r1
   1baf4:	4617      	mov	r7, r2
   1baf6:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
   1baf8:	f000 f880 	bl	1bbfc <pvPortMalloc>
		if( pxNewTimer != NULL )
   1bafc:	4604      	mov	r4, r0
   1bafe:	b198      	cbz	r0, 1bb28 <xTimerCreate+0x40>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
   1bb00:	b1b5      	cbz	r5, 1bb30 <xTimerCreate+0x48>
		if( xTimerQueue == NULL )
   1bb02:	f8df a068 	ldr.w	sl, [pc, #104]	; 1bb6c <xTimerCreate+0x84>
	taskENTER_CRITICAL();
   1bb06:	f7f4 fb35 	bl	10174 <vPortEnterCritical>
		if( xTimerQueue == NULL )
   1bb0a:	f8da 2000 	ldr.w	r2, [sl]
   1bb0e:	b182      	cbz	r2, 1bb32 <xTimerCreate+0x4a>
	taskEXIT_CRITICAL();
   1bb10:	f7f4 fb4a 	bl	101a8 <vPortExitCritical>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
   1bb14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		pxNewTimer->pcTimerName = pcTimerName;
   1bb16:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->uxAutoReload = uxAutoReload;
   1bb1a:	e9c4 5706 	strd	r5, r7, [r4, #24]
		pxNewTimer->pvTimerID = pvTimerID;
   1bb1e:	6226      	str	r6, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
   1bb20:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
   1bb22:	1d20      	adds	r0, r4, #4
   1bb24:	f7fe fb68 	bl	1a1f8 <vListInitialiseItem>
	}
   1bb28:	4620      	mov	r0, r4
   1bb2a:	b003      	add	sp, #12
   1bb2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
   1bb30:	e7fe      	b.n	1bb30 <xTimerCreate+0x48>
			vListInitialise( &xActiveTimerList1 );
   1bb32:	f8df b03c 	ldr.w	fp, [pc, #60]	; 1bb70 <xTimerCreate+0x88>
			vListInitialise( &xActiveTimerList2 );
   1bb36:	f8df 903c 	ldr.w	r9, [pc, #60]	; 1bb74 <xTimerCreate+0x8c>
   1bb3a:	9201      	str	r2, [sp, #4]
			vListInitialise( &xActiveTimerList1 );
   1bb3c:	4658      	mov	r0, fp
   1bb3e:	f7fe fb4f 	bl	1a1e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
   1bb42:	4648      	mov	r0, r9
   1bb44:	f7fe fb4c 	bl	1a1e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
   1bb48:	4806      	ldr	r0, [pc, #24]	; (1bb64 <xTimerCreate+0x7c>)
			pxOverflowTimerList = &xActiveTimerList2;
   1bb4a:	4907      	ldr	r1, [pc, #28]	; (1bb68 <xTimerCreate+0x80>)
			pxCurrentTimerList = &xActiveTimerList1;
   1bb4c:	f8c0 b000 	str.w	fp, [r0]
			pxOverflowTimerList = &xActiveTimerList2;
   1bb50:	f8c1 9000 	str.w	r9, [r1]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1bb54:	9a01      	ldr	r2, [sp, #4]
   1bb56:	2110      	movs	r1, #16
   1bb58:	2005      	movs	r0, #5
   1bb5a:	f7fe fb8d 	bl	1a278 <xQueueGenericCreate>
   1bb5e:	f8ca 0000 	str.w	r0, [sl]
   1bb62:	e7d5      	b.n	1bb10 <xTimerCreate+0x28>
   1bb64:	10005ad8 	.word	0x10005ad8
   1bb68:	10005adc 	.word	0x10005adc
   1bb6c:	10005b0c 	.word	0x10005b0c
   1bb70:	10005ae0 	.word	0x10005ae0
   1bb74:	10005af4 	.word	0x10005af4

0001bb78 <xTimerGenericCommand>:
	configASSERT( xTimer );
   1bb78:	b1a8      	cbz	r0, 1bba6 <xTimerGenericCommand+0x2e>
{
   1bb7a:	b530      	push	{r4, r5, lr}
	if( xTimerQueue != NULL )
   1bb7c:	4d14      	ldr	r5, [pc, #80]	; (1bbd0 <xTimerGenericCommand+0x58>)
   1bb7e:	682c      	ldr	r4, [r5, #0]
{
   1bb80:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
   1bb82:	b18c      	cbz	r4, 1bba8 <xTimerGenericCommand+0x30>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1bb84:	2905      	cmp	r1, #5
		xMessage.xMessageID = xCommandID;
   1bb86:	e9cd 1200 	strd	r1, r2, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
   1bb8a:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1bb8c:	dc0f      	bgt.n	1bbae <xTimerGenericCommand+0x36>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1bb8e:	f7ff fdf9 	bl	1b784 <xTaskGetSchedulerState>
   1bb92:	2802      	cmp	r0, #2
   1bb94:	d014      	beq.n	1bbc0 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1bb96:	2300      	movs	r3, #0
   1bb98:	6828      	ldr	r0, [r5, #0]
   1bb9a:	461a      	mov	r2, r3
   1bb9c:	4669      	mov	r1, sp
   1bb9e:	f7fe fba7 	bl	1a2f0 <xQueueGenericSend>
}
   1bba2:	b005      	add	sp, #20
   1bba4:	bd30      	pop	{r4, r5, pc}
	configASSERT( xTimer );
   1bba6:	e7fe      	b.n	1bba6 <xTimerGenericCommand+0x2e>
BaseType_t xReturn = pdFAIL;
   1bba8:	4620      	mov	r0, r4
}
   1bbaa:	b005      	add	sp, #20
   1bbac:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1bbae:	469c      	mov	ip, r3
   1bbb0:	4662      	mov	r2, ip
   1bbb2:	2300      	movs	r3, #0
   1bbb4:	4669      	mov	r1, sp
   1bbb6:	4620      	mov	r0, r4
   1bbb8:	f7fe fd2c 	bl	1a614 <xQueueGenericSendFromISR>
}
   1bbbc:	b005      	add	sp, #20
   1bbbe:	bd30      	pop	{r4, r5, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1bbc0:	6828      	ldr	r0, [r5, #0]
   1bbc2:	9a08      	ldr	r2, [sp, #32]
   1bbc4:	2300      	movs	r3, #0
   1bbc6:	4669      	mov	r1, sp
   1bbc8:	f7fe fb92 	bl	1a2f0 <xQueueGenericSend>
   1bbcc:	e7ed      	b.n	1bbaa <xTimerGenericCommand+0x32>
   1bbce:	bf00      	nop
   1bbd0:	10005b0c 	.word	0x10005b0c

0001bbd4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
   1bbd4:	b530      	push	{r4, r5, lr}
   1bbd6:	4614      	mov	r4, r2
   1bbd8:	b085      	sub	sp, #20
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1bbda:	461a      	mov	r2, r3
   1bbdc:	4b06      	ldr	r3, [pc, #24]	; (1bbf8 <xTimerPendFunctionCallFromISR+0x24>)
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
   1bbde:	9001      	str	r0, [sp, #4]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
   1bbe0:	9102      	str	r1, [sp, #8]
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1bbe2:	6818      	ldr	r0, [r3, #0]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
   1bbe4:	9403      	str	r4, [sp, #12]
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
   1bbe6:	f06f 0501 	mvn.w	r5, #1
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1bbea:	2300      	movs	r3, #0
   1bbec:	4669      	mov	r1, sp
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
   1bbee:	9500      	str	r5, [sp, #0]
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1bbf0:	f7fe fd10 	bl	1a614 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
   1bbf4:	b005      	add	sp, #20
   1bbf6:	bd30      	pop	{r4, r5, pc}
   1bbf8:	10005b0c 	.word	0x10005b0c

0001bbfc <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   1bbfc:	b570      	push	{r4, r5, r6, lr}
   1bbfe:	4605      	mov	r5, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
   1bc00:	f7ff fa4a 	bl	1b098 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
   1bc04:	4927      	ldr	r1, [pc, #156]	; (1bca4 <pvPortMalloc+0xa8>)
   1bc06:	680a      	ldr	r2, [r1, #0]
   1bc08:	b972      	cbnz	r2, 1bc28 <pvPortMalloc+0x2c>
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   1bc0a:	4b27      	ldr	r3, [pc, #156]	; (1bca8 <pvPortMalloc+0xac>)

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
   1bc0c:	4827      	ldr	r0, [pc, #156]	; (1bcac <pvPortMalloc+0xb0>)
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   1bc0e:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
   1bc12:	e9c0 3200 	strd	r3, r2, [r0]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
   1bc16:	4826      	ldr	r0, [pc, #152]	; (1bcb0 <pvPortMalloc+0xb4>)

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
   1bc18:	6018      	str	r0, [r3, #0]
	xEnd.pxNextFreeBlock = NULL;
   1bc1a:	6002      	str	r2, [r0, #0]
			xHeapHasBeenInitialised = pdTRUE;
   1bc1c:	2201      	movs	r2, #1
   1bc1e:	600a      	str	r2, [r1, #0]
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
   1bc20:	f643 72f8 	movw	r2, #16376	; 0x3ff8
   1bc24:	6042      	str	r2, [r0, #4]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
   1bc26:	605a      	str	r2, [r3, #4]
		if( xWantedSize > 0 )
   1bc28:	b935      	cbnz	r5, 1bc38 <pvPortMalloc+0x3c>
			vApplicationMallocFailedHook();
   1bc2a:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
   1bc2c:	f7ff fb7c 	bl	1b328 <xTaskResumeAll>
			vApplicationMallocFailedHook();
   1bc30:	f7f8 f812 	bl	13c58 <vApplicationMallocFailedHook>
}
   1bc34:	4628      	mov	r0, r5
   1bc36:	bd70      	pop	{r4, r5, r6, pc}
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
   1bc38:	076b      	lsls	r3, r5, #29
			xWantedSize += heapSTRUCT_SIZE;
   1bc3a:	f105 0408 	add.w	r4, r5, #8
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   1bc3e:	bf1c      	itt	ne
   1bc40:	f024 0407 	bicne.w	r4, r4, #7
   1bc44:	3408      	addne	r4, #8
		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
   1bc46:	1e62      	subs	r2, r4, #1
   1bc48:	f643 73f6 	movw	r3, #16374	; 0x3ff6
   1bc4c:	429a      	cmp	r2, r3
   1bc4e:	d8ec      	bhi.n	1bc2a <pvPortMalloc+0x2e>
			pxBlock = xStart.pxNextFreeBlock;
   1bc50:	4816      	ldr	r0, [pc, #88]	; (1bcac <pvPortMalloc+0xb0>)
   1bc52:	6803      	ldr	r3, [r0, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   1bc54:	e003      	b.n	1bc5e <pvPortMalloc+0x62>
   1bc56:	681a      	ldr	r2, [r3, #0]
   1bc58:	b122      	cbz	r2, 1bc64 <pvPortMalloc+0x68>
   1bc5a:	4618      	mov	r0, r3
   1bc5c:	4613      	mov	r3, r2
   1bc5e:	6859      	ldr	r1, [r3, #4]
   1bc60:	42a1      	cmp	r1, r4
   1bc62:	d3f8      	bcc.n	1bc56 <pvPortMalloc+0x5a>
			if( pxBlock != &xEnd )
   1bc64:	4a12      	ldr	r2, [pc, #72]	; (1bcb0 <pvPortMalloc+0xb4>)
   1bc66:	4293      	cmp	r3, r2
   1bc68:	d0df      	beq.n	1bc2a <pvPortMalloc+0x2e>
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   1bc6a:	461d      	mov	r5, r3
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   1bc6c:	1b0a      	subs	r2, r1, r4
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   1bc6e:	f855 6b08 	ldr.w	r6, [r5], #8
   1bc72:	6006      	str	r6, [r0, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   1bc74:	2a10      	cmp	r2, #16
   1bc76:	d90c      	bls.n	1bc92 <pvPortMalloc+0x96>
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
   1bc78:	191e      	adds	r6, r3, r4
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   1bc7a:	6072      	str	r2, [r6, #4]
					pxBlock->xBlockSize = xWantedSize;
   1bc7c:	605c      	str	r4, [r3, #4]
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   1bc7e:	6871      	ldr	r1, [r6, #4]
   1bc80:	4b0a      	ldr	r3, [pc, #40]	; (1bcac <pvPortMalloc+0xb0>)
   1bc82:	4618      	mov	r0, r3
   1bc84:	681b      	ldr	r3, [r3, #0]
   1bc86:	685a      	ldr	r2, [r3, #4]
   1bc88:	428a      	cmp	r2, r1
   1bc8a:	d3fa      	bcc.n	1bc82 <pvPortMalloc+0x86>
   1bc8c:	6033      	str	r3, [r6, #0]
   1bc8e:	4621      	mov	r1, r4
   1bc90:	6006      	str	r6, [r0, #0]
				xFreeBytesRemaining -= pxBlock->xBlockSize;
   1bc92:	4a08      	ldr	r2, [pc, #32]	; (1bcb4 <pvPortMalloc+0xb8>)
   1bc94:	6813      	ldr	r3, [r2, #0]
   1bc96:	1a5b      	subs	r3, r3, r1
   1bc98:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
   1bc9a:	f7ff fb45 	bl	1b328 <xTaskResumeAll>
}
   1bc9e:	4628      	mov	r0, r5
   1bca0:	bd70      	pop	{r4, r5, r6, pc}
   1bca2:	bf00      	nop
   1bca4:	10009b1c 	.word	0x10009b1c
   1bca8:	10005b1c 	.word	0x10005b1c
   1bcac:	10009b20 	.word	0x10009b20
   1bcb0:	10009b14 	.word	0x10009b14
   1bcb4:	10002bb8 	.word	0x10002bb8

0001bcb8 <vPortFree>:
	if( pv != NULL )
   1bcb8:	b1c0      	cbz	r0, 1bcec <vPortFree+0x34>
{
   1bcba:	b538      	push	{r3, r4, r5, lr}
   1bcbc:	4604      	mov	r4, r0
		vTaskSuspendAll();
   1bcbe:	f7ff f9eb 	bl	1b098 <vTaskSuspendAll>
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
   1bcc2:	f854 1c04 	ldr.w	r1, [r4, #-4]
   1bcc6:	4b0a      	ldr	r3, [pc, #40]	; (1bcf0 <vPortFree+0x38>)
		puc -= heapSTRUCT_SIZE;
   1bcc8:	f1a4 0508 	sub.w	r5, r4, #8
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
   1bccc:	4618      	mov	r0, r3
   1bcce:	681b      	ldr	r3, [r3, #0]
   1bcd0:	685a      	ldr	r2, [r3, #4]
   1bcd2:	428a      	cmp	r2, r1
   1bcd4:	d3fa      	bcc.n	1bccc <vPortFree+0x14>
			xFreeBytesRemaining += pxLink->xBlockSize;
   1bcd6:	4a07      	ldr	r2, [pc, #28]	; (1bcf4 <vPortFree+0x3c>)
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
   1bcd8:	f844 3c08 	str.w	r3, [r4, #-8]
			xFreeBytesRemaining += pxLink->xBlockSize;
   1bcdc:	6813      	ldr	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
   1bcde:	6005      	str	r5, [r0, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
   1bce0:	440b      	add	r3, r1
   1bce2:	6013      	str	r3, [r2, #0]
}
   1bce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		( void ) xTaskResumeAll();
   1bce8:	f7ff bb1e 	b.w	1b328 <xTaskResumeAll>
   1bcec:	4770      	bx	lr
   1bcee:	bf00      	nop
   1bcf0:	10009b20 	.word	0x10009b20
   1bcf4:	10002bb8 	.word	0x10002bb8

0001bcf8 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
   1bcf8:	b510      	push	{r4, lr}
   1bcfa:	b084      	sub	sp, #16
   1bcfc:	4604      	mov	r4, r0
    am_hal_delay_us( ui32MilliSeconds * 1000);
#else // AM_PART_APOLLO4
    uint32_t ui32Loops, ui32HFRC;
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
   1bcfe:	a801      	add	r0, sp, #4
   1bd00:	f002 fc22 	bl	1e548 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
   1bd04:	9b01      	ldr	r3, [sp, #4]
   1bd06:	4805      	ldr	r0, [pc, #20]	; (1bd1c <am_util_delay_ms+0x24>)
   1bd08:	fba0 2303 	umull	r2, r3, r0, r3
   1bd0c:	099b      	lsrs	r3, r3, #6

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
   1bd0e:	fb04 f003 	mul.w	r0, r4, r3
   1bd12:	f002 fc7f 	bl	1e614 <am_hal_flash_delay>
#endif // AM_PART_APOLLO4
}
   1bd16:	b004      	add	sp, #16
   1bd18:	bd10      	pop	{r4, pc}
   1bd1a:	bf00      	nop
   1bd1c:	057619f1 	.word	0x057619f1

0001bd20 <am_util_delay_us>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_us(uint32_t ui32MicroSeconds)
{
   1bd20:	b510      	push	{r4, lr}
   1bd22:	b084      	sub	sp, #16
   1bd24:	4604      	mov	r4, r0
#else // AM_PART_APOLLO4
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
   1bd26:	a801      	add	r0, sp, #4
   1bd28:	f002 fc0e 	bl	1e548 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MicroSeconds * (ui32HFRC / 3000000);
   1bd2c:	9b01      	ldr	r3, [sp, #4]
   1bd2e:	4805      	ldr	r0, [pc, #20]	; (1bd44 <am_util_delay_us+0x24>)
   1bd30:	fba0 2303 	umull	r2, r3, r0, r3
   1bd34:	0c9b      	lsrs	r3, r3, #18

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
   1bd36:	fb04 f003 	mul.w	r0, r4, r3
   1bd3a:	f002 fc6b 	bl	1e614 <am_hal_flash_delay>
#endif // AM_PART_APOLLO4
}
   1bd3e:	b004      	add	sp, #16
   1bd40:	bd10      	pop	{r4, pc}
   1bd42:	bf00      	nop
   1bd44:	165e9f81 	.word	0x165e9f81

0001bd48 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
   1bd48:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
   1bd4a:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
   1bd4e:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
   1bd50:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
   1bd54:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
   1bd58:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
   1bd5c:	f000 f806 	bl	1bd6c <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
   1bd60:	bd01      	pop	{r0, pc}
   1bd62:	bf00      	nop

0001bd64 <getStackedReg>:
}

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
   1bd64:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
   1bd66:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
   1bd68:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
   1bd6a:	4770      	bx	lr

0001bd6c <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
   1bd6c:	b510      	push	{r4, lr}
    volatile am_fault_t sFaultData;
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_t  sHalFaultData = {0};
#else
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
   1bd6e:	2300      	movs	r3, #0
{
   1bd70:	b092      	sub	sp, #72	; 0x48
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
   1bd72:	e9cd 3300 	strd	r3, r3, [sp]
   1bd76:	e9cd 3302 	strd	r3, r3, [sp, #8]
   1bd7a:	e9cd 3304 	strd	r3, r3, [sp, #16]
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
   1bd7e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
   1bd82:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
   1bd84:	f8d2 3d28 	ldr.w	r3, [r2, #3368]	; 0xd28
   1bd88:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
   1bd8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1bd8c:	b2db      	uxtb	r3, r3
   1bd8e:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
   1bd92:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1bd94:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1bd98:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
   1bd9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1bd9e:	0c1b      	lsrs	r3, r3, #16
   1bda0:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
   1bda4:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
   1bda8:	930f      	str	r3, [sp, #60]	; 0x3c

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
   1bdaa:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
   1bdae:	079b      	lsls	r3, r3, #30
{
   1bdb0:	4604      	mov	r4, r0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
   1bdb2:	d437      	bmi.n	1be24 <am_util_faultisr_collect_data+0xb8>
   1bdb4:	f04f 33ff 	mov.w	r3, #4294967295

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
   1bdb8:	4621      	mov	r1, r4
   1bdba:	2000      	movs	r0, #0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
   1bdbc:	930e      	str	r3, [sp, #56]	; 0x38
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
   1bdbe:	f7ff ffd1 	bl	1bd64 <getStackedReg>
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
   1bdc2:	4621      	mov	r1, r4
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
   1bdc4:	4603      	mov	r3, r0
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
   1bdc6:	2001      	movs	r0, #1
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
   1bdc8:	9306      	str	r3, [sp, #24]
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
   1bdca:	f7ff ffcb 	bl	1bd64 <getStackedReg>
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
   1bdce:	4621      	mov	r1, r4
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
   1bdd0:	4603      	mov	r3, r0
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
   1bdd2:	2002      	movs	r0, #2
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
   1bdd4:	9307      	str	r3, [sp, #28]
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
   1bdd6:	f7ff ffc5 	bl	1bd64 <getStackedReg>
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
   1bdda:	4621      	mov	r1, r4
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
   1bddc:	4603      	mov	r3, r0
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
   1bdde:	2003      	movs	r0, #3
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
   1bde0:	9308      	str	r3, [sp, #32]
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
   1bde2:	f7ff ffbf 	bl	1bd64 <getStackedReg>
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
   1bde6:	4621      	mov	r1, r4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
   1bde8:	4603      	mov	r3, r0
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
   1bdea:	2004      	movs	r0, #4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
   1bdec:	9309      	str	r3, [sp, #36]	; 0x24
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
   1bdee:	f7ff ffb9 	bl	1bd64 <getStackedReg>
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
   1bdf2:	4621      	mov	r1, r4
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
   1bdf4:	4603      	mov	r3, r0
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
   1bdf6:	2005      	movs	r0, #5
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
   1bdf8:	930a      	str	r3, [sp, #40]	; 0x28
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
   1bdfa:	f7ff ffb3 	bl	1bd64 <getStackedReg>
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
   1bdfe:	4621      	mov	r1, r4
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
   1be00:	4603      	mov	r3, r0
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
   1be02:	2006      	movs	r0, #6
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
   1be04:	930b      	str	r3, [sp, #44]	; 0x2c
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
   1be06:	f7ff ffad 	bl	1bd64 <getStackedReg>
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
   1be0a:	4621      	mov	r1, r4
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
   1be0c:	4603      	mov	r3, r0
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
   1be0e:	2007      	movs	r0, #7
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
   1be10:	930c      	str	r3, [sp, #48]	; 0x30
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
   1be12:	f7ff ffa7 	bl	1bd64 <getStackedReg>
    //
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_get(&sHalFaultData);
#else
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
   1be16:	4669      	mov	r1, sp
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
   1be18:	4603      	mov	r3, r0
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
   1be1a:	2002      	movs	r0, #2
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
   1be1c:	930d      	str	r3, [sp, #52]	; 0x34
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
   1be1e:	f002 fe0f 	bl	1ea40 <am_hal_mcuctrl_info_get>
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
   1be22:	e7fe      	b.n	1be22 <am_util_faultisr_collect_data+0xb6>
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
   1be24:	4601      	mov	r1, r0
   1be26:	2006      	movs	r0, #6
   1be28:	f7ff ff9c 	bl	1bd64 <getStackedReg>
   1be2c:	4603      	mov	r3, r0
   1be2e:	e7c3      	b.n	1bdb8 <am_util_faultisr_collect_data+0x4c>

0001be30 <divu64_10>:
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
   1be30:	2900      	cmp	r1, #0
   1be32:	d047      	beq.n	1bec4 <divu64_10+0x94>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
   1be34:	0843      	lsrs	r3, r0, #1
   1be36:	0882      	lsrs	r2, r0, #2
   1be38:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
   1be3c:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
   1be40:	189b      	adds	r3, r3, r2
   1be42:	ea4f 0291 	mov.w	r2, r1, lsr #2
   1be46:	eb42 0251 	adc.w	r2, r2, r1, lsr #1
        q64 += (q64 >> 4);
   1be4a:	ea4f 1c13 	mov.w	ip, r3, lsr #4
   1be4e:	ea4c 7c02 	orr.w	ip, ip, r2, lsl #28
   1be52:	eb13 030c 	adds.w	r3, r3, ip
   1be56:	eb42 1212 	adc.w	r2, r2, r2, lsr #4
        q64 += (q64 >> 8);
   1be5a:	ea4f 2c13 	mov.w	ip, r3, lsr #8
   1be5e:	ea4c 6c02 	orr.w	ip, ip, r2, lsl #24
   1be62:	eb13 030c 	adds.w	r3, r3, ip
   1be66:	eb42 2212 	adc.w	r2, r2, r2, lsr #8
        q64 += (q64 >> 16);
   1be6a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   1be6e:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
   1be72:	eb13 030c 	adds.w	r3, r3, ip
   1be76:	eb42 4212 	adc.w	r2, r2, r2, lsr #16
        q64 += (q64 >> 32);
   1be7a:	189b      	adds	r3, r3, r2
   1be7c:	f142 0200 	adc.w	r2, r2, #0
        q64 >>= 3;
   1be80:	08db      	lsrs	r3, r3, #3
   1be82:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   1be86:	08d2      	lsrs	r2, r2, #3
        r64 = ui64Val - q64*10;
        return q64 + ((r64 + 6) >> 4);
   1be88:	3006      	adds	r0, #6
{
   1be8a:	b500      	push	{lr}
        r64 = ui64Val - q64*10;
   1be8c:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   1be90:	ea4f 0e82 	mov.w	lr, r2, lsl #2
        return q64 + ((r64 + 6) >> 4);
   1be94:	f141 0100 	adc.w	r1, r1, #0
        r64 = ui64Val - q64*10;
   1be98:	ea4e 7e93 	orr.w	lr, lr, r3, lsr #30
   1be9c:	eb1c 0c03 	adds.w	ip, ip, r3
   1bea0:	eb42 0e0e 	adc.w	lr, r2, lr
   1bea4:	eb1c 0c0c 	adds.w	ip, ip, ip
   1bea8:	eb4e 0e0e 	adc.w	lr, lr, lr
        return q64 + ((r64 + 6) >> 4);
   1beac:	ebb0 000c 	subs.w	r0, r0, ip
   1beb0:	eb61 010e 	sbc.w	r1, r1, lr
   1beb4:	0900      	lsrs	r0, r0, #4
   1beb6:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
   1beba:	18c0      	adds	r0, r0, r3
   1bebc:	eb42 1111 	adc.w	r1, r2, r1, lsr #4
        q32 += (q32 >> 16);
        q32 >>= 3;
        r32 = ui32Val - q32*10;
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    }
}
   1bec0:	f85d fb04 	ldr.w	pc, [sp], #4
        q32 = (ui32Val>>1) + (ui32Val>>2);
   1bec4:	0883      	lsrs	r3, r0, #2
   1bec6:	eb03 0350 	add.w	r3, r3, r0, lsr #1
        q32 += (q32 >> 4);
   1beca:	eb03 1313 	add.w	r3, r3, r3, lsr #4
        q32 += (q32 >> 8);
   1bece:	eb03 2313 	add.w	r3, r3, r3, lsr #8
        q32 += (q32 >> 16);
   1bed2:	eb03 4313 	add.w	r3, r3, r3, lsr #16
        q32 >>= 3;
   1bed6:	08db      	lsrs	r3, r3, #3
        r32 = ui32Val - q32*10;
   1bed8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
   1bedc:	3006      	adds	r0, #6
   1bede:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
   1bee2:	eb03 1010 	add.w	r0, r3, r0, lsr #4
}
   1bee6:	4770      	bx	lr

0001bee8 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
   1bee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1beec:	b089      	sub	sp, #36	; 0x24
   1beee:	ad01      	add	r5, sp, #4
        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);

        tbuf[ix++] = uMod + '0';
   1bef0:	46ae      	mov	lr, r5
   1bef2:	2401      	movs	r4, #1
   1bef4:	e042      	b.n	1bf7c <uint64_to_str+0x94>
        q64 = (ui64Val>>1) + (ui64Val>>2);
   1bef6:	19db      	adds	r3, r3, r7
   1bef8:	eb46 0651 	adc.w	r6, r6, r1, lsr #1
        q64 += (q64 >> 4);
   1befc:	091f      	lsrs	r7, r3, #4
   1befe:	ea47 7706 	orr.w	r7, r7, r6, lsl #28
   1bf02:	19db      	adds	r3, r3, r7
   1bf04:	eb46 1616 	adc.w	r6, r6, r6, lsr #4
        q64 += (q64 >> 8);
   1bf08:	0a1f      	lsrs	r7, r3, #8
   1bf0a:	ea47 6706 	orr.w	r7, r7, r6, lsl #24
   1bf0e:	19db      	adds	r3, r3, r7
   1bf10:	eb46 2616 	adc.w	r6, r6, r6, lsr #8
        q64 += (q64 >> 16);
   1bf14:	0c1f      	lsrs	r7, r3, #16
   1bf16:	ea47 4706 	orr.w	r7, r7, r6, lsl #16
   1bf1a:	19db      	adds	r3, r3, r7
   1bf1c:	eb46 4616 	adc.w	r6, r6, r6, lsr #16
        q64 += (q64 >> 32);
   1bf20:	199b      	adds	r3, r3, r6
   1bf22:	f146 0600 	adc.w	r6, r6, #0
        q64 >>= 3;
   1bf26:	08db      	lsrs	r3, r3, #3
   1bf28:	ea43 7346 	orr.w	r3, r3, r6, lsl #29
   1bf2c:	08f6      	lsrs	r6, r6, #3
        return q64 + ((r64 + 6) >> 4);
   1bf2e:	1d87      	adds	r7, r0, #6
        r64 = ui64Val - q64*10;
   1bf30:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   1bf34:	ea4f 0886 	mov.w	r8, r6, lsl #2
        return q64 + ((r64 + 6) >> 4);
   1bf38:	f141 0100 	adc.w	r1, r1, #0
        r64 = ui64Val - q64*10;
   1bf3c:	ea48 7893 	orr.w	r8, r8, r3, lsr #30
   1bf40:	eb1c 0c03 	adds.w	ip, ip, r3
   1bf44:	eb46 0808 	adc.w	r8, r6, r8
   1bf48:	eb1c 0c0c 	adds.w	ip, ip, ip
   1bf4c:	eb48 0808 	adc.w	r8, r8, r8
        return q64 + ((r64 + 6) >> 4);
   1bf50:	ebb7 070c 	subs.w	r7, r7, ip
   1bf54:	eb61 0108 	sbc.w	r1, r1, r8
   1bf58:	093f      	lsrs	r7, r7, #4
   1bf5a:	ea47 7701 	orr.w	r7, r7, r1, lsl #28
   1bf5e:	18fb      	adds	r3, r7, r3
        uMod = ui64Val - (u64Tmp * 10);
   1bf60:	eb03 0783 	add.w	r7, r3, r3, lsl #2
   1bf64:	eba0 0047 	sub.w	r0, r0, r7, lsl #1
        tbuf[ix++] = uMod + '0';
   1bf68:	f100 0030 	add.w	r0, r0, #48	; 0x30
   1bf6c:	f88e 0000 	strb.w	r0, [lr]
   1bf70:	eb46 1111 	adc.w	r1, r6, r1, lsr #4
   1bf74:	4618      	mov	r0, r3
   1bf76:	3401      	adds	r4, #1
   1bf78:	f10e 0e01 	add.w	lr, lr, #1
        q32 = (ui32Val>>1) + (ui32Val>>2);
   1bf7c:	ea4f 0c90 	mov.w	ip, r0, lsr #2
   1bf80:	eb0c 0c50 	add.w	ip, ip, r0, lsr #1
        q32 += (q32 >> 4);
   1bf84:	eb0c 1c1c 	add.w	ip, ip, ip, lsr #4
        q32 += (q32 >> 8);
   1bf88:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
        q32 += (q32 >> 16);
   1bf8c:	eb0c 4c1c 	add.w	ip, ip, ip, lsr #16
        q32 >>= 3;
   1bf90:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
        r32 = ui32Val - q32*10;
   1bf94:	eb0c 098c 	add.w	r9, ip, ip, lsl #2
        q64 = (ui64Val>>1) + (ui64Val>>2);
   1bf98:	0843      	lsrs	r3, r0, #1
   1bf9a:	0887      	lsrs	r7, r0, #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
   1bf9c:	f100 0806 	add.w	r8, r0, #6
   1bfa0:	eba8 0849 	sub.w	r8, r8, r9, lsl #1
        q64 = (ui64Val>>1) + (ui64Val>>2);
   1bfa4:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
   1bfa8:	ea47 7781 	orr.w	r7, r7, r1, lsl #30
   1bfac:	088e      	lsrs	r6, r1, #2
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
   1bfae:	4681      	mov	r9, r0
    if ( ui64Val >> 32 )
   1bfb0:	2900      	cmp	r1, #0
   1bfb2:	d1a0      	bne.n	1bef6 <uint64_to_str+0xe>
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
   1bfb4:	eb0c 1018 	add.w	r0, ip, r8, lsr #4
        uMod = ui64Val - (u64Tmp * 10);
   1bfb8:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1bfbc:	eba9 0943 	sub.w	r9, r9, r3, lsl #1
        tbuf[ix++] = uMod + '0';
   1bfc0:	f109 0930 	add.w	r9, r9, #48	; 0x30
   1bfc4:	f88e 9000 	strb.w	r9, [lr]
        ui64Val = u64Tmp;
    } while ( ui64Val );
   1bfc8:	2800      	cmp	r0, #0
   1bfca:	d1d4      	bne.n	1bf76 <uint64_to_str+0x8e>
    iNumDig = ix;

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
   1bfcc:	b14a      	cbz	r2, 1bfe2 <uint64_to_str+0xfa>
    {
        while ( ix-- )
   1bfce:	192b      	adds	r3, r5, r4
   1bfd0:	1e51      	subs	r1, r2, #1
        {
            *pcBuf++ = tbuf[ix];
   1bfd2:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   1bfd6:	f801 0f01 	strb.w	r0, [r1, #1]!
        while ( ix-- )
   1bfda:	429d      	cmp	r5, r3
   1bfdc:	d1f9      	bne.n	1bfd2 <uint64_to_str+0xea>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
   1bfde:	2300      	movs	r3, #0
   1bfe0:	5513      	strb	r3, [r2, r4]
    }

    return iNumDig;
}
   1bfe2:	4620      	mov	r0, r4
   1bfe4:	b009      	add	sp, #36	; 0x24
   1bfe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1bfea:	bf00      	nop

0001bfec <am_util_stdio_printf_init>:
    g_pfnCharPrint = pfnCharPrint;
   1bfec:	4b01      	ldr	r3, [pc, #4]	; (1bff4 <am_util_stdio_printf_init+0x8>)
   1bfee:	6018      	str	r0, [r3, #0]
}
   1bff0:	4770      	bx	lr
   1bff2:	bf00      	nop
   1bff4:	10009b2c 	.word	0x10009b2c

0001bff8 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
   1bff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
   1bffc:	780b      	ldrb	r3, [r1, #0]
{
   1bffe:	b089      	sub	sp, #36	; 0x24
   1c000:	4605      	mov	r5, r0
    while ( *pcFmt != 0x0 )
   1c002:	2b00      	cmp	r3, #0
   1c004:	f000 8097 	beq.w	1c136 <am_util_stdio_vsprintf+0x13e>
   1c008:	4617      	mov	r7, r2
    uint32_t ui32NumChars, ui32CharCnt = 0;
   1c00a:	2600      	movs	r6, #0
   1c00c:	e00b      	b.n	1c026 <am_util_stdio_vsprintf+0x2e>
        if ( *pcFmt != '%' )
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
   1c00e:	b125      	cbz	r5, 1c01a <am_util_stdio_vsprintf+0x22>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
   1c010:	2b0a      	cmp	r3, #10
   1c012:	f000 8085 	beq.w	1c120 <am_util_stdio_vsprintf+0x128>
                {
                    *pcBuf++ = '\r';
                    ++ui32CharCnt;
                }
                *pcBuf++ = *pcFmt;
   1c016:	f805 3b01 	strb.w	r3, [r5], #1
            }

            ++pcFmt;
   1c01a:	3101      	adds	r1, #1
            ++ui32CharCnt;
   1c01c:	3601      	adds	r6, #1
    while ( *pcFmt != 0x0 )
   1c01e:	780b      	ldrb	r3, [r1, #0]
   1c020:	2b00      	cmp	r3, #0
   1c022:	f000 8089 	beq.w	1c138 <am_util_stdio_vsprintf+0x140>
        if ( *pcFmt != '%' )
   1c026:	2b25      	cmp	r3, #37	; 0x25
   1c028:	d1f1      	bne.n	1c00e <am_util_stdio_vsprintf+0x16>
        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';

        if ( *pcFmt == '0' )
   1c02a:	784b      	ldrb	r3, [r1, #1]
   1c02c:	2b30      	cmp	r3, #48	; 0x30
   1c02e:	f000 8098 	beq.w	1c162 <am_util_stdio_vsprintf+0x16a>
        ++pcFmt;
   1c032:	f101 0e01 	add.w	lr, r1, #1
        ui8PadChar = ' ';
   1c036:	2220      	movs	r2, #32
    if ( *pcStr == '-')
   1c038:	2b2d      	cmp	r3, #45	; 0x2d
   1c03a:	f000 8084 	beq.w	1c146 <am_util_stdio_vsprintf+0x14e>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1c03e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    uint32_t ui32Val = 0, uCnt = 0;
   1c042:	f04f 0c00 	mov.w	ip, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1c046:	2909      	cmp	r1, #9
   1c048:	4674      	mov	r4, lr
    bool bNeg = false;
   1c04a:	46e0      	mov	r8, ip
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1c04c:	f200 8087 	bhi.w	1c15e <am_util_stdio_vsprintf+0x166>
   1c050:	f10c 0c01 	add.w	ip, ip, #1
   1c054:	ebac 0c04 	sub.w	ip, ip, r4
   1c058:	2100      	movs	r1, #0
        ui32Val *= 10;
   1c05a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
        ui32Val += (*pcStr - '0');
   1c05e:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   1c062:	eb04 090c 	add.w	r9, r4, ip
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1c066:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1c06a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1c06e:	2809      	cmp	r0, #9
        ui32Val += (*pcStr - '0');
   1c070:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1c074:	d9f1      	bls.n	1c05a <am_util_stdio_vsprintf+0x62>
        pcFmt += ui32NumChars;

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
   1c076:	f81e 3009 	ldrb.w	r3, [lr, r9]
        pcFmt += ui32NumChars;
   1c07a:	eb0e 0409 	add.w	r4, lr, r9
    return bNeg ? -ui32Val : ui32Val;
   1c07e:	f1b8 0f00 	cmp.w	r8, #0
   1c082:	d000      	beq.n	1c086 <am_util_stdio_vsprintf+0x8e>
   1c084:	4249      	negs	r1, r1
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
   1c086:	2b73      	cmp	r3, #115	; 0x73
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
   1c088:	4608      	mov	r0, r1
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
   1c08a:	f000 8125 	beq.w	1c2d8 <am_util_stdio_vsprintf+0x2e0>
   1c08e:	ea81 78e1 	eor.w	r8, r1, r1, asr #31
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
   1c092:	2b2e      	cmp	r3, #46	; 0x2e
   1c094:	eba8 78e1 	sub.w	r8, r8, r1, asr #31
   1c098:	f000 80f2 	beq.w	1c280 <am_util_stdio_vsprintf+0x288>
        iPrecision = 6;             // printf() default precision for %f is 6
   1c09c:	f04f 0906 	mov.w	r9, #6
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
   1c0a0:	2b6c      	cmp	r3, #108	; 0x6c
   1c0a2:	d104      	bne.n	1c0ae <am_util_stdio_vsprintf+0xb6>
        {
            pcFmt++;
            if ( *pcFmt == 'l' )    // "ll" (long long)
   1c0a4:	7863      	ldrb	r3, [r4, #1]
   1c0a6:	2b6c      	cmp	r3, #108	; 0x6c
   1c0a8:	f000 8163 	beq.w	1c372 <am_util_stdio_vsprintf+0x37a>
            pcFmt++;
   1c0ac:	3401      	adds	r4, #1
                pcFmt++;
                bLongLong = true;
            }
        }

        switch ( *pcFmt )
   1c0ae:	f1a3 0046 	sub.w	r0, r3, #70	; 0x46
   1c0b2:	2832      	cmp	r0, #50	; 0x32
   1c0b4:	d85a      	bhi.n	1c16c <am_util_stdio_vsprintf+0x174>
   1c0b6:	e8df f010 	tbh	[pc, r0, lsl #1]
   1c0ba:	005f      	.short	0x005f
   1c0bc:	00590059 	.word	0x00590059
   1c0c0:	00590059 	.word	0x00590059
   1c0c4:	00590059 	.word	0x00590059
   1c0c8:	00590059 	.word	0x00590059
   1c0cc:	00590059 	.word	0x00590059
   1c0d0:	00590059 	.word	0x00590059
   1c0d4:	00590059 	.word	0x00590059
   1c0d8:	00590059 	.word	0x00590059
   1c0dc:	01dc0059 	.word	0x01dc0059
   1c0e0:	00590059 	.word	0x00590059
   1c0e4:	00590059 	.word	0x00590059
   1c0e8:	00590059 	.word	0x00590059
   1c0ec:	00590059 	.word	0x00590059
   1c0f0:	00590059 	.word	0x00590059
   1c0f4:	00b400c9 	.word	0x00b400c9
   1c0f8:	005f0059 	.word	0x005f0059
   1c0fc:	00590059 	.word	0x00590059
   1c100:	005900b4 	.word	0x005900b4
   1c104:	00590059 	.word	0x00590059
   1c108:	00590059 	.word	0x00590059
   1c10c:	00590059 	.word	0x00590059
   1c110:	00590059 	.word	0x00590059
   1c114:	0059010e 	.word	0x0059010e
   1c118:	005900d2 	.word	0x005900d2
   1c11c:	02fb0059 	.word	0x02fb0059
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
   1c120:	4acc      	ldr	r2, [pc, #816]	; (1c454 <am_util_stdio_vsprintf+0x45c>)
   1c122:	7812      	ldrb	r2, [r2, #0]
   1c124:	2a00      	cmp	r2, #0
   1c126:	f43f af76 	beq.w	1c016 <am_util_stdio_vsprintf+0x1e>
                    *pcBuf++ = '\r';
   1c12a:	230d      	movs	r3, #13
   1c12c:	f805 3b01 	strb.w	r3, [r5], #1
                    ++ui32CharCnt;
   1c130:	3601      	adds	r6, #1
                *pcBuf++ = *pcFmt;
   1c132:	780b      	ldrb	r3, [r1, #0]
   1c134:	e76f      	b.n	1c016 <am_util_stdio_vsprintf+0x1e>
    uint32_t ui32NumChars, ui32CharCnt = 0;
   1c136:	461e      	mov	r6, r3
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
   1c138:	b10d      	cbz	r5, 1c13e <am_util_stdio_vsprintf+0x146>
    {
        *pcBuf = 0x0;
   1c13a:	2300      	movs	r3, #0
   1c13c:	702b      	strb	r3, [r5, #0]
    }

    return (ui32CharCnt);
}
   1c13e:	4630      	mov	r0, r6
   1c140:	b009      	add	sp, #36	; 0x24
   1c142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1c146:	f89e 3001 	ldrb.w	r3, [lr, #1]
   1c14a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
        uCnt++;
   1c14e:	f04f 0c01 	mov.w	ip, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1c152:	2909      	cmp	r1, #9
        pcStr++;
   1c154:	eb0e 040c 	add.w	r4, lr, ip
        bNeg = true;
   1c158:	46e0      	mov	r8, ip
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1c15a:	f67f af79 	bls.w	1c050 <am_util_stdio_vsprintf+0x58>
   1c15e:	2100      	movs	r1, #0
   1c160:	e78d      	b.n	1c07e <am_util_stdio_vsprintf+0x86>
            ui8PadChar = '0';
   1c162:	461a      	mov	r2, r3
            ++pcFmt;
   1c164:	f101 0e02 	add.w	lr, r1, #2
    if ( *pcStr == '-')
   1c168:	788b      	ldrb	r3, [r1, #2]
   1c16a:	e765      	b.n	1c038 <am_util_stdio_vsprintf+0x40>
                if ( pcBuf )
   1c16c:	b10d      	cbz	r5, 1c172 <am_util_stdio_vsprintf+0x17a>
                    *pcBuf++ = *pcFmt;
   1c16e:	f805 3b01 	strb.w	r3, [r5], #1
                ++ui32CharCnt;
   1c172:	3601      	adds	r6, #1
        ++pcFmt;
   1c174:	1c61      	adds	r1, r4, #1
   1c176:	e752      	b.n	1c01e <am_util_stdio_vsprintf+0x26>
                if ( pcBuf )
   1c178:	2d00      	cmp	r5, #0
   1c17a:	d0fb      	beq.n	1c174 <am_util_stdio_vsprintf+0x17c>
                    float fValue = va_arg(pArgs, double);
   1c17c:	3707      	adds	r7, #7
   1c17e:	f027 0707 	bic.w	r7, r7, #7
   1c182:	e8f7 0102 	ldrd	r0, r1, [r7], #8
   1c186:	f7f0 f855 	bl	c234 <__aeabi_d2f>
   1c18a:	ee07 0a90 	vmov	s15, r0
    if (fValue == 0.0f)
   1c18e:	eef5 7a40 	vcmp.f32	s15, #0.0
                    *(uint32_t*)pcBuf = 20;
   1c192:	2314      	movs	r3, #20
    if (fValue == 0.0f)
   1c194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    *(uint32_t*)pcBuf = 20;
   1c198:	602b      	str	r3, [r5, #0]
    if (fValue == 0.0f)
   1c19a:	f000 835d 	beq.w	1c858 <am_util_stdio_vsprintf+0x860>
    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
   1c19e:	f3c0 51c7 	ubfx	r1, r0, #23, #8
   1c1a2:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
    unFloatValue.F = fValue;
   1c1a6:	4603      	mov	r3, r0
    if (iExp2 >= 31)
   1c1a8:	2a1e      	cmp	r2, #30
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
   1c1aa:	f3c0 0016 	ubfx	r0, r0, #0, #23
   1c1ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    if (iExp2 >= 31)
   1c1b2:	f300 837c 	bgt.w	1c8ae <am_util_stdio_vsprintf+0x8b6>
    else if (iExp2 < -23)
   1c1b6:	f112 0f17 	cmn.w	r2, #23
   1c1ba:	f2c0 8374 	blt.w	1c8a6 <am_util_stdio_vsprintf+0x8ae>
    else if (iExp2 >= 23)
   1c1be:	2a16      	cmp	r2, #22
   1c1c0:	f340 8246 	ble.w	1c650 <am_util_stdio_vsprintf+0x658>
        i32IntPart = i32Significand << (iExp2 - 23);
   1c1c4:	3996      	subs	r1, #150	; 0x96
    if (unFloatValue.I32 < 0)
   1c1c6:	2b00      	cmp	r3, #0
        i32IntPart = i32Significand << (iExp2 - 23);
   1c1c8:	fa00 f001 	lsl.w	r0, r0, r1
    if (unFloatValue.I32 < 0)
   1c1cc:	f2c0 8287 	blt.w	1c6de <am_util_stdio_vsprintf+0x6e6>
   1c1d0:	462b      	mov	r3, r5
    i32FracPart = 0;
   1c1d2:	f04f 0800 	mov.w	r8, #0
    if (i32IntPart == 0)
   1c1d6:	2800      	cmp	r0, #0
   1c1d8:	f000 827c 	beq.w	1c6d4 <am_util_stdio_vsprintf+0x6dc>
            *pcBuf++ = '-';
   1c1dc:	461a      	mov	r2, r3
   1c1de:	bfde      	ittt	le
   1c1e0:	232d      	movle	r3, #45	; 0x2d
   1c1e2:	f802 3b01 	strble.w	r3, [r2], #1
            uint64_to_str(-i32IntPart, pcBuf);
   1c1e6:	4240      	negle	r0, r0
   1c1e8:	17c1      	asrs	r1, r0, #31
   1c1ea:	f7ff fe7d 	bl	1bee8 <uint64_to_str>
        while (*pcBuf)    // Get to end of new string
   1c1ee:	7813      	ldrb	r3, [r2, #0]
   1c1f0:	b11b      	cbz	r3, 1c1fa <am_util_stdio_vsprintf+0x202>
   1c1f2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   1c1f6:	2b00      	cmp	r3, #0
   1c1f8:	d1fb      	bne.n	1c1f2 <am_util_stdio_vsprintf+0x1fa>
    *pcBuf++ = '.';
   1c1fa:	232e      	movs	r3, #46	; 0x2e
   1c1fc:	7013      	strb	r3, [r2, #0]
    if (i32FracPart == 0)
   1c1fe:	f1b8 0f00 	cmp.w	r8, #0
   1c202:	f040 8291 	bne.w	1c728 <am_util_stdio_vsprintf+0x730>
        *pcBuf++ = '0';
   1c206:	1c90      	adds	r0, r2, #2
   1c208:	2330      	movs	r3, #48	; 0x30
   1c20a:	7053      	strb	r3, [r2, #1]
    return (pcBuf - pcBufInitial);
   1c20c:	1b41      	subs	r1, r0, r5
    *pcBuf = 0x00;
   1c20e:	2300      	movs	r3, #0
                    if ( iVal < 0 )
   1c210:	4299      	cmp	r1, r3
    *pcBuf = 0x00;
   1c212:	7003      	strb	r3, [r0, #0]
                    if ( iVal < 0 )
   1c214:	f2c0 82c3 	blt.w	1c79e <am_util_stdio_vsprintf+0x7a6>
                    ui32CharCnt += iVal;
   1c218:	460b      	mov	r3, r1
   1c21a:	441e      	add	r6, r3
                    pcBuf += iVal;
   1c21c:	441d      	add	r5, r3
        ++pcFmt;
   1c21e:	1c61      	adds	r1, r4, #1
   1c220:	e6fd      	b.n	1c01e <am_util_stdio_vsprintf+0x26>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
   1c222:	f857 9b04 	ldr.w	r9, [r7], #4
   1c226:	ea4f 7ae9 	mov.w	sl, r9, asr #31
                if ( i64Val < 0 )
   1c22a:	f1ba 0f00 	cmp.w	sl, #0
   1c22e:	f2c0 8113 	blt.w	1c458 <am_util_stdio_vsprintf+0x460>
                if ( iWidth )
   1c232:	2900      	cmp	r1, #0
   1c234:	f040 82bd 	bne.w	1c7b2 <am_util_stdio_vsprintf+0x7ba>
                iVal = uint64_to_str(ui64Val, pcBuf);
   1c238:	4648      	mov	r0, r9
   1c23a:	4651      	mov	r1, sl
   1c23c:	462a      	mov	r2, r5
   1c23e:	f7ff fe53 	bl	1bee8 <uint64_to_str>
                if ( pcBuf )
   1c242:	b9d5      	cbnz	r5, 1c27a <am_util_stdio_vsprintf+0x282>
                ui32CharCnt += iVal;
   1c244:	2500      	movs	r5, #0
   1c246:	4406      	add	r6, r0
        ++pcFmt;
   1c248:	1c61      	adds	r1, r4, #1
   1c24a:	e6e8      	b.n	1c01e <am_util_stdio_vsprintf+0x26>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
   1c24c:	1d3b      	adds	r3, r7, #4
                if ( pcBuf )
   1c24e:	b115      	cbz	r5, 1c256 <am_util_stdio_vsprintf+0x25e>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
   1c250:	683a      	ldr	r2, [r7, #0]
   1c252:	f805 2b01 	strb.w	r2, [r5], #1
                ++ui32CharCnt;
   1c256:	3601      	adds	r6, #1
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
   1c258:	461f      	mov	r7, r3
        ++pcFmt;
   1c25a:	1c61      	adds	r1, r4, #1
   1c25c:	e6df      	b.n	1c01e <am_util_stdio_vsprintf+0x26>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   1c25e:	f857 ab04 	ldr.w	sl, [r7], #4
   1c262:	f04f 0900 	mov.w	r9, #0
                if ( iWidth )
   1c266:	2900      	cmp	r1, #0
   1c268:	f040 81b0 	bne.w	1c5cc <am_util_stdio_vsprintf+0x5d4>
                iVal = uint64_to_str(ui64Val, pcBuf);
   1c26c:	4650      	mov	r0, sl
   1c26e:	4649      	mov	r1, r9
   1c270:	462a      	mov	r2, r5
   1c272:	f7ff fe39 	bl	1bee8 <uint64_to_str>
                if ( pcBuf )
   1c276:	2d00      	cmp	r5, #0
   1c278:	d0e4      	beq.n	1c244 <am_util_stdio_vsprintf+0x24c>
                    pcBuf += iVal;
   1c27a:	4405      	add	r5, r0
                ui32CharCnt += iVal;
   1c27c:	4406      	add	r6, r0
                break;
   1c27e:	e7e3      	b.n	1c248 <am_util_stdio_vsprintf+0x250>
    if ( *pcStr == '-')
   1c280:	7860      	ldrb	r0, [r4, #1]
   1c282:	282d      	cmp	r0, #45	; 0x2d
            ++pcFmt;
   1c284:	f104 0c01 	add.w	ip, r4, #1
    if ( *pcStr == '-')
   1c288:	f000 8195 	beq.w	1c5b6 <am_util_stdio_vsprintf+0x5be>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1c28c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1c290:	2b09      	cmp	r3, #9
   1c292:	f200 82ea 	bhi.w	1c86a <am_util_stdio_vsprintf+0x872>
    uint32_t ui32Val = 0, uCnt = 0;
   1c296:	2300      	movs	r3, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1c298:	4664      	mov	r4, ip
    bool bNeg = false;
   1c29a:	4699      	mov	r9, r3
   1c29c:	3301      	adds	r3, #1
   1c29e:	eba3 0e04 	sub.w	lr, r3, r4
   1c2a2:	2300      	movs	r3, #0
        ui32Val *= 10;
   1c2a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        ui32Val += (*pcStr - '0');
   1c2a8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   1c2ac:	eb04 0a0e 	add.w	sl, r4, lr
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1c2b0:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   1c2b4:	f1a0 0b30 	sub.w	fp, r0, #48	; 0x30
   1c2b8:	f1bb 0f09 	cmp.w	fp, #9
        ui32Val += (*pcStr - '0');
   1c2bc:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1c2c0:	d9f0      	bls.n	1c2a4 <am_util_stdio_vsprintf+0x2ac>
    return bNeg ? -ui32Val : ui32Val;
   1c2c2:	f1b9 0f00 	cmp.w	r9, #0
   1c2c6:	d000      	beq.n	1c2ca <am_util_stdio_vsprintf+0x2d2>
   1c2c8:	425b      	negs	r3, r3
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
   1c2ca:	4699      	mov	r9, r3
            pcFmt += ui32NumChars;
   1c2cc:	eb0c 040a 	add.w	r4, ip, sl
        if ( *pcFmt == 'l' )
   1c2d0:	f81c 300a 	ldrb.w	r3, [ip, sl]
   1c2d4:	e6e4      	b.n	1c0a0 <am_util_stdio_vsprintf+0xa8>
        switch ( *pcFmt )
   1c2d6:	4640      	mov	r0, r8
                pcStr = va_arg(pArgs, char *);
   1c2d8:	46b9      	mov	r9, r7
   1c2da:	f859 3b04 	ldr.w	r3, [r9], #4
    if ( !pcBuf )
   1c2de:	2b00      	cmp	r3, #0
   1c2e0:	f000 81c6 	beq.w	1c670 <am_util_stdio_vsprintf+0x678>
    while ( *pcBuf++ )
   1c2e4:	469c      	mov	ip, r3
   1c2e6:	f81c 1b01 	ldrb.w	r1, [ip], #1
   1c2ea:	2900      	cmp	r1, #0
   1c2ec:	f000 82c1 	beq.w	1c872 <am_util_stdio_vsprintf+0x87a>
    uint32_t ui32RetVal = 0;
   1c2f0:	f04f 0e00 	mov.w	lr, #0
    while ( *pcBuf++ )
   1c2f4:	f81c 7b01 	ldrb.w	r7, [ip], #1
        ui32RetVal++;
   1c2f8:	f10e 0e01 	add.w	lr, lr, #1
    while ( *pcBuf++ )
   1c2fc:	2f00      	cmp	r7, #0
   1c2fe:	d1f9      	bne.n	1c2f4 <am_util_stdio_vsprintf+0x2fc>
                if ( iWidth > 0 )
   1c300:	2800      	cmp	r0, #0
   1c302:	dd02      	ble.n	1c30a <am_util_stdio_vsprintf+0x312>
                    if ( ui32strlen < iWidth )
   1c304:	4570      	cmp	r0, lr
   1c306:	f200 81d6 	bhi.w	1c6b6 <am_util_stdio_vsprintf+0x6be>
   1c30a:	f1c3 0801 	rsb	r8, r3, #1
                while (*pcStr != 0x0)
   1c30e:	46b2      	mov	sl, r6
   1c310:	462f      	mov	r7, r5
   1c312:	eb08 0c06 	add.w	ip, r8, r6
   1c316:	e000      	b.n	1c31a <am_util_stdio_vsprintf+0x322>
                        *pcBuf++ = *pcStr;
   1c318:	462f      	mov	r7, r5
   1c31a:	eb0c 0603 	add.w	r6, ip, r3
                    if ( pcBuf )
   1c31e:	2d00      	cmp	r5, #0
   1c320:	f000 8131 	beq.w	1c586 <am_util_stdio_vsprintf+0x58e>
                        *pcBuf++ = *pcStr;
   1c324:	7039      	strb	r1, [r7, #0]
                while (*pcStr != 0x0)
   1c326:	f813 1f01 	ldrb.w	r1, [r3, #1]!
                        *pcBuf++ = *pcStr;
   1c32a:	3501      	adds	r5, #1
                while (*pcStr != 0x0)
   1c32c:	2900      	cmp	r1, #0
   1c32e:	d1f3      	bne.n	1c318 <am_util_stdio_vsprintf+0x320>
                if ( iWidth )
   1c330:	b1e0      	cbz	r0, 1c36c <am_util_stdio_vsprintf+0x374>
                    iWidth = -iWidth;
   1c332:	f1c0 0800 	rsb	r8, r0, #0
                    if ( ui32strlen < iWidth )
   1c336:	45f0      	cmp	r8, lr
   1c338:	d918      	bls.n	1c36c <am_util_stdio_vsprintf+0x374>
                        iWidth -= ui32strlen;
   1c33a:	eba8 030e 	sub.w	r3, r8, lr
    if ( i32NumChars <= 0 )
   1c33e:	2b00      	cmp	r3, #0
   1c340:	f340 82b3 	ble.w	1c8aa <am_util_stdio_vsprintf+0x8b2>
    while ( i32NumChars-- )
   1c344:	3b01      	subs	r3, #1
    int32_t i32Cnt = 0;
   1c346:	4694      	mov	ip, r2
   1c348:	2000      	movs	r0, #0
   1c34a:	461a      	mov	r2, r3
   1c34c:	462b      	mov	r3, r5
            *pcBuf++ = cPadChar;
   1c34e:	4619      	mov	r1, r3
        if ( pcBuf )
   1c350:	2b00      	cmp	r3, #0
   1c352:	f000 8129 	beq.w	1c5a8 <am_util_stdio_vsprintf+0x5b0>
            *pcBuf++ = cPadChar;
   1c356:	f801 cb01 	strb.w	ip, [r1], #1
   1c35a:	4617      	mov	r7, r2
   1c35c:	460b      	mov	r3, r1
        i32Cnt++;
   1c35e:	3001      	adds	r0, #1
    while ( i32NumChars-- )
   1c360:	1e7a      	subs	r2, r7, #1
   1c362:	2f00      	cmp	r7, #0
   1c364:	d1f3      	bne.n	1c34e <am_util_stdio_vsprintf+0x356>
                        ui32CharCnt += iWidth;
   1c366:	4406      	add	r6, r0
                        pcBuf += pcBuf ? iWidth : 0;
   1c368:	b105      	cbz	r5, 1c36c <am_util_stdio_vsprintf+0x374>
   1c36a:	4405      	add	r5, r0
                pcStr = va_arg(pArgs, char *);
   1c36c:	464f      	mov	r7, r9
        ++pcFmt;
   1c36e:	1c61      	adds	r1, r4, #1
   1c370:	e655      	b.n	1c01e <am_util_stdio_vsprintf+0x26>
        switch ( *pcFmt )
   1c372:	78a3      	ldrb	r3, [r4, #2]
   1c374:	f1a3 0046 	sub.w	r0, r3, #70	; 0x46
                pcFmt++;
   1c378:	3402      	adds	r4, #2
        switch ( *pcFmt )
   1c37a:	2832      	cmp	r0, #50	; 0x32
   1c37c:	f63f aef6 	bhi.w	1c16c <am_util_stdio_vsprintf+0x174>
   1c380:	f20f 0c04 	addw	ip, pc, #4
   1c384:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
   1c388:	0001c179 	.word	0x0001c179
   1c38c:	0001c16d 	.word	0x0001c16d
   1c390:	0001c16d 	.word	0x0001c16d
   1c394:	0001c16d 	.word	0x0001c16d
   1c398:	0001c16d 	.word	0x0001c16d
   1c39c:	0001c16d 	.word	0x0001c16d
   1c3a0:	0001c16d 	.word	0x0001c16d
   1c3a4:	0001c16d 	.word	0x0001c16d
   1c3a8:	0001c16d 	.word	0x0001c16d
   1c3ac:	0001c16d 	.word	0x0001c16d
   1c3b0:	0001c16d 	.word	0x0001c16d
   1c3b4:	0001c16d 	.word	0x0001c16d
   1c3b8:	0001c16d 	.word	0x0001c16d
   1c3bc:	0001c16d 	.word	0x0001c16d
   1c3c0:	0001c16d 	.word	0x0001c16d
   1c3c4:	0001c16d 	.word	0x0001c16d
   1c3c8:	0001c16d 	.word	0x0001c16d
   1c3cc:	0001c16d 	.word	0x0001c16d
   1c3d0:	0001c701 	.word	0x0001c701
   1c3d4:	0001c16d 	.word	0x0001c16d
   1c3d8:	0001c16d 	.word	0x0001c16d
   1c3dc:	0001c16d 	.word	0x0001c16d
   1c3e0:	0001c16d 	.word	0x0001c16d
   1c3e4:	0001c16d 	.word	0x0001c16d
   1c3e8:	0001c16d 	.word	0x0001c16d
   1c3ec:	0001c16d 	.word	0x0001c16d
   1c3f0:	0001c16d 	.word	0x0001c16d
   1c3f4:	0001c16d 	.word	0x0001c16d
   1c3f8:	0001c16d 	.word	0x0001c16d
   1c3fc:	0001c24d 	.word	0x0001c24d
   1c400:	0001c4a1 	.word	0x0001c4a1
   1c404:	0001c16d 	.word	0x0001c16d
   1c408:	0001c179 	.word	0x0001c179
   1c40c:	0001c16d 	.word	0x0001c16d
   1c410:	0001c16d 	.word	0x0001c16d
   1c414:	0001c4a1 	.word	0x0001c4a1
   1c418:	0001c16d 	.word	0x0001c16d
   1c41c:	0001c16d 	.word	0x0001c16d
   1c420:	0001c16d 	.word	0x0001c16d
   1c424:	0001c16d 	.word	0x0001c16d
   1c428:	0001c16d 	.word	0x0001c16d
   1c42c:	0001c16d 	.word	0x0001c16d
   1c430:	0001c16d 	.word	0x0001c16d
   1c434:	0001c16d 	.word	0x0001c16d
   1c438:	0001c16d 	.word	0x0001c16d
   1c43c:	0001c2d7 	.word	0x0001c2d7
   1c440:	0001c16d 	.word	0x0001c16d
   1c444:	0001c4b1 	.word	0x0001c4b1
   1c448:	0001c16d 	.word	0x0001c16d
   1c44c:	0001c16d 	.word	0x0001c16d
   1c450:	0001c715 	.word	0x0001c715
   1c454:	10009b28 	.word	0x10009b28
                    ui64Val = -i64Val;          // Get absolute value
   1c458:	f1d9 0900 	rsbs	r9, r9, #0
   1c45c:	eb6a 0a4a 	sbc.w	sl, sl, sl, lsl #1
                if ( iWidth )
   1c460:	2900      	cmp	r1, #0
   1c462:	f040 81fd 	bne.w	1c860 <am_util_stdio_vsprintf+0x868>
                        if ( pcBuf )
   1c466:	b115      	cbz	r5, 1c46e <am_util_stdio_vsprintf+0x476>
                            *pcBuf++ = '-';
   1c468:	232d      	movs	r3, #45	; 0x2d
   1c46a:	f805 3b01 	strb.w	r3, [r5], #1
                        ++ui32CharCnt;
   1c46e:	3601      	adds	r6, #1
   1c470:	e6e2      	b.n	1c238 <am_util_stdio_vsprintf+0x240>
        bLower = bLongLong = false;
   1c472:	f04f 0e00 	mov.w	lr, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   1c476:	f857 0b04 	ldr.w	r0, [r7], #4
   1c47a:	f04f 0c00 	mov.w	ip, #0
                if ( iWidth )
   1c47e:	b9f9      	cbnz	r1, 1c4c0 <am_util_stdio_vsprintf+0x4c8>
    if ( ui64Val == 0 )
   1c480:	ea50 030c 	orrs.w	r3, r0, ip
   1c484:	d14d      	bne.n	1c522 <am_util_stdio_vsprintf+0x52a>
    if (pcBuf)
   1c486:	2d00      	cmp	r5, #0
   1c488:	d079      	beq.n	1c57e <am_util_stdio_vsprintf+0x586>
            *pcBuf++ = tbuf[ix];
   1c48a:	462b      	mov	r3, r5
   1c48c:	2230      	movs	r2, #48	; 0x30
   1c48e:	f803 2b01 	strb.w	r2, [r3], #1
   1c492:	2201      	movs	r2, #1
   1c494:	461d      	mov	r5, r3
        *pcBuf = 0;
   1c496:	2100      	movs	r1, #0
   1c498:	7019      	strb	r1, [r3, #0]
                ui32CharCnt += iVal;
   1c49a:	4416      	add	r6, r2
        ++pcFmt;
   1c49c:	1c61      	adds	r1, r4, #1
   1c49e:	e5be      	b.n	1c01e <am_util_stdio_vsprintf+0x26>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
   1c4a0:	3707      	adds	r7, #7
   1c4a2:	f027 0707 	bic.w	r7, r7, #7
   1c4a6:	f8d7 a004 	ldr.w	sl, [r7, #4]
   1c4aa:	f857 9b08 	ldr.w	r9, [r7], #8
   1c4ae:	e6bc      	b.n	1c22a <am_util_stdio_vsprintf+0x232>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   1c4b0:	3707      	adds	r7, #7
   1c4b2:	f027 0707 	bic.w	r7, r7, #7
   1c4b6:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1c4ba:	f857 ab08 	ldr.w	sl, [r7], #8
   1c4be:	e6d2      	b.n	1c266 <am_util_stdio_vsprintf+0x26e>
    int iDigits = ui64Val ? 0 : 1;
   1c4c0:	ea50 030c 	orrs.w	r3, r0, ip
   1c4c4:	bf0c      	ite	eq
   1c4c6:	2101      	moveq	r1, #1
   1c4c8:	2100      	movne	r1, #0
    while ( ui64Val )
   1c4ca:	d00b      	beq.n	1c4e4 <am_util_stdio_vsprintf+0x4ec>
   1c4cc:	4603      	mov	r3, r0
   1c4ce:	46e1      	mov	r9, ip
        ui64Val >>= 4;
   1c4d0:	091b      	lsrs	r3, r3, #4
   1c4d2:	ea43 7309 	orr.w	r3, r3, r9, lsl #28
   1c4d6:	ea4f 1919 	mov.w	r9, r9, lsr #4
    while ( ui64Val )
   1c4da:	ea53 0a09 	orrs.w	sl, r3, r9
        ++iDigits;
   1c4de:	f101 0101 	add.w	r1, r1, #1
    while ( ui64Val )
   1c4e2:	d1f5      	bne.n	1c4d0 <am_util_stdio_vsprintf+0x4d8>
                    iWidth -= ndigits_in_hex(ui64Val);
   1c4e4:	eba8 0301 	sub.w	r3, r8, r1
    if ( i32NumChars <= 0 )
   1c4e8:	2b00      	cmp	r3, #0
   1c4ea:	f340 81b2 	ble.w	1c852 <am_util_stdio_vsprintf+0x85a>
    while ( i32NumChars-- )
   1c4ee:	3b01      	subs	r3, #1
    int32_t i32Cnt = 0;
   1c4f0:	4691      	mov	r9, r2
   1c4f2:	4682      	mov	sl, r0
   1c4f4:	f04f 0800 	mov.w	r8, #0
   1c4f8:	462a      	mov	r2, r5
   1c4fa:	4618      	mov	r0, r3
            *pcBuf++ = cPadChar;
   1c4fc:	4611      	mov	r1, r2
        if ( pcBuf )
   1c4fe:	2a00      	cmp	r2, #0
   1c500:	d04c      	beq.n	1c59c <am_util_stdio_vsprintf+0x5a4>
            *pcBuf++ = cPadChar;
   1c502:	f801 9b01 	strb.w	r9, [r1], #1
   1c506:	4603      	mov	r3, r0
   1c508:	460a      	mov	r2, r1
        i32Cnt++;
   1c50a:	f108 0801 	add.w	r8, r8, #1
    while ( i32NumChars-- )
   1c50e:	1e58      	subs	r0, r3, #1
   1c510:	2b00      	cmp	r3, #0
   1c512:	d1f3      	bne.n	1c4fc <am_util_stdio_vsprintf+0x504>
                    ui32CharCnt += iWidth;
   1c514:	4650      	mov	r0, sl
   1c516:	4446      	add	r6, r8
                    pcBuf += pcBuf ? iWidth : 0;
   1c518:	b375      	cbz	r5, 1c578 <am_util_stdio_vsprintf+0x580>
    if ( ui64Val == 0 )
   1c51a:	ea50 030c 	orrs.w	r3, r0, ip
                    pcBuf += pcBuf ? iWidth : 0;
   1c51e:	4445      	add	r5, r8
    if ( ui64Val == 0 )
   1c520:	d0b3      	beq.n	1c48a <am_util_stdio_vsprintf+0x492>
   1c522:	f1be 0f00 	cmp.w	lr, #0
   1c526:	f10d 080c 	add.w	r8, sp, #12
   1c52a:	bf14      	ite	ne
   1c52c:	f04f 0927 	movne.w	r9, #39	; 0x27
   1c530:	f04f 0907 	moveq.w	r9, #7
   1c534:	4641      	mov	r1, r8
    int iNumDig, ix = 0;
   1c536:	2200      	movs	r2, #0
        cCh = ui64Val & 0xf;
   1c538:	f000 030f 	and.w	r3, r0, #15
        if ( cCh > 9 )
   1c53c:	2b09      	cmp	r3, #9
            cCh += bLower ? 0x27 : 0x7;
   1c53e:	bf88      	it	hi
   1c540:	444b      	addhi	r3, r9
        ui64Val >>= 4;
   1c542:	ea4f 1e10 	mov.w	lr, r0, lsr #4
   1c546:	ea4e 700c 	orr.w	r0, lr, ip, lsl #28
        tbuf[ix++] = cCh + '0';
   1c54a:	3330      	adds	r3, #48	; 0x30
        ui64Val >>= 4;
   1c54c:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
        tbuf[ix++] = cCh + '0';
   1c550:	f801 3b01 	strb.w	r3, [r1], #1
    while ( ui64Val )
   1c554:	ea50 030c 	orrs.w	r3, r0, ip
        tbuf[ix++] = cCh + '0';
   1c558:	f102 0201 	add.w	r2, r2, #1
    while ( ui64Val )
   1c55c:	d1ec      	bne.n	1c538 <am_util_stdio_vsprintf+0x540>
    if (pcBuf)
   1c55e:	b17d      	cbz	r5, 1c580 <am_util_stdio_vsprintf+0x588>
   1c560:	eb08 0302 	add.w	r3, r8, r2
   1c564:	1e69      	subs	r1, r5, #1
            *pcBuf++ = tbuf[ix];
   1c566:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   1c56a:	f801 0f01 	strb.w	r0, [r1, #1]!
        while (ix--)
   1c56e:	4543      	cmp	r3, r8
   1c570:	d1f9      	bne.n	1c566 <am_util_stdio_vsprintf+0x56e>
            *pcBuf++ = tbuf[ix];
   1c572:	18ab      	adds	r3, r5, r2
                    pcBuf += iVal;
   1c574:	461d      	mov	r5, r3
   1c576:	e78e      	b.n	1c496 <am_util_stdio_vsprintf+0x49e>
    if ( ui64Val == 0 )
   1c578:	ea50 030c 	orrs.w	r3, r0, ip
   1c57c:	d1d1      	bne.n	1c522 <am_util_stdio_vsprintf+0x52a>
   1c57e:	2201      	movs	r2, #1
                if ( pcBuf )
   1c580:	2500      	movs	r5, #0
                ui32CharCnt += iVal;
   1c582:	4416      	add	r6, r2
                break;
   1c584:	e78a      	b.n	1c49c <am_util_stdio_vsprintf+0x4a4>
   1c586:	eb08 010a 	add.w	r1, r8, sl
                    ++ui32CharCnt;
   1c58a:	18ce      	adds	r6, r1, r3
                while (*pcStr != 0x0)
   1c58c:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   1c590:	2f00      	cmp	r7, #0
   1c592:	d1fa      	bne.n	1c58a <am_util_stdio_vsprintf+0x592>
                if ( iWidth )
   1c594:	2800      	cmp	r0, #0
   1c596:	f43f aee9 	beq.w	1c36c <am_util_stdio_vsprintf+0x374>
   1c59a:	e6ca      	b.n	1c332 <am_util_stdio_vsprintf+0x33a>
    while ( i32NumChars-- )
   1c59c:	1e43      	subs	r3, r0, #1
        i32Cnt++;
   1c59e:	f108 0801 	add.w	r8, r8, #1
    while ( i32NumChars-- )
   1c5a2:	2800      	cmp	r0, #0
   1c5a4:	d1b1      	bne.n	1c50a <am_util_stdio_vsprintf+0x512>
   1c5a6:	e7b5      	b.n	1c514 <am_util_stdio_vsprintf+0x51c>
   1c5a8:	1e57      	subs	r7, r2, #1
        i32Cnt++;
   1c5aa:	3001      	adds	r0, #1
    while ( i32NumChars-- )
   1c5ac:	2a00      	cmp	r2, #0
   1c5ae:	f47f aed6 	bne.w	1c35e <am_util_stdio_vsprintf+0x366>
                        ui32CharCnt += iWidth;
   1c5b2:	4406      	add	r6, r0
   1c5b4:	e6d8      	b.n	1c368 <am_util_stdio_vsprintf+0x370>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1c5b6:	78a0      	ldrb	r0, [r4, #2]
   1c5b8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1c5bc:	2b09      	cmp	r3, #9
        pcStr++;
   1c5be:	f104 0402 	add.w	r4, r4, #2
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1c5c2:	f200 8176 	bhi.w	1c8b2 <am_util_stdio_vsprintf+0x8ba>
        uCnt++;
   1c5c6:	2301      	movs	r3, #1
        bNeg = true;
   1c5c8:	4699      	mov	r9, r3
   1c5ca:	e667      	b.n	1c29c <am_util_stdio_vsprintf+0x2a4>
    int iNDigits = ui64Val ? 0 : 1;
   1c5cc:	ea5a 0309 	orrs.w	r3, sl, r9
   1c5d0:	bf0c      	ite	eq
   1c5d2:	f04f 0b01 	moveq.w	fp, #1
   1c5d6:	f04f 0b00 	movne.w	fp, #0
    while ( ui64Val )
   1c5da:	d012      	beq.n	1c602 <am_util_stdio_vsprintf+0x60a>
   1c5dc:	4649      	mov	r1, r9
   1c5de:	9400      	str	r4, [sp, #0]
   1c5e0:	4650      	mov	r0, sl
   1c5e2:	465c      	mov	r4, fp
   1c5e4:	46cb      	mov	fp, r9
   1c5e6:	46a9      	mov	r9, r5
   1c5e8:	4615      	mov	r5, r2
        ui64Val = divu64_10(ui64Val);
   1c5ea:	f7ff fc21 	bl	1be30 <divu64_10>
    while ( ui64Val )
   1c5ee:	ea50 0301 	orrs.w	r3, r0, r1
        ++iNDigits;
   1c5f2:	f104 0401 	add.w	r4, r4, #1
    while ( ui64Val )
   1c5f6:	d1f8      	bne.n	1c5ea <am_util_stdio_vsprintf+0x5f2>
   1c5f8:	462a      	mov	r2, r5
   1c5fa:	464d      	mov	r5, r9
   1c5fc:	46d9      	mov	r9, fp
   1c5fe:	46a3      	mov	fp, r4
   1c600:	9c00      	ldr	r4, [sp, #0]
                    iWidth -= ndigits_in_u64(ui64Val);
   1c602:	eba8 030b 	sub.w	r3, r8, fp
    if ( i32NumChars <= 0 )
   1c606:	2b00      	cmp	r3, #0
   1c608:	f340 8149 	ble.w	1c89e <am_util_stdio_vsprintf+0x8a6>
    while ( i32NumChars-- )
   1c60c:	3b01      	subs	r3, #1
    int32_t i32Cnt = 0;
   1c60e:	4694      	mov	ip, r2
   1c610:	46a6      	mov	lr, r4
   1c612:	2000      	movs	r0, #0
   1c614:	462a      	mov	r2, r5
   1c616:	461c      	mov	r4, r3
            *pcBuf++ = cPadChar;
   1c618:	4611      	mov	r1, r2
        if ( pcBuf )
   1c61a:	b1a2      	cbz	r2, 1c646 <am_util_stdio_vsprintf+0x64e>
            *pcBuf++ = cPadChar;
   1c61c:	f801 cb01 	strb.w	ip, [r1], #1
   1c620:	4623      	mov	r3, r4
   1c622:	460a      	mov	r2, r1
        i32Cnt++;
   1c624:	3001      	adds	r0, #1
    while ( i32NumChars-- )
   1c626:	1e5c      	subs	r4, r3, #1
   1c628:	2b00      	cmp	r3, #0
   1c62a:	d1f5      	bne.n	1c618 <am_util_stdio_vsprintf+0x620>
                    ui32CharCnt += iWidth;
   1c62c:	4674      	mov	r4, lr
   1c62e:	4406      	add	r6, r0
                    pcBuf += pcBuf ? iWidth : 0;
   1c630:	2d00      	cmp	r5, #0
   1c632:	f000 8123 	beq.w	1c87c <am_util_stdio_vsprintf+0x884>
   1c636:	4405      	add	r5, r0
                iVal = uint64_to_str(ui64Val, pcBuf);
   1c638:	462a      	mov	r2, r5
   1c63a:	4650      	mov	r0, sl
   1c63c:	4649      	mov	r1, r9
   1c63e:	f7ff fc53 	bl	1bee8 <uint64_to_str>
                    pcBuf += iVal;
   1c642:	4405      	add	r5, r0
   1c644:	e61a      	b.n	1c27c <am_util_stdio_vsprintf+0x284>
    while ( i32NumChars-- )
   1c646:	1e63      	subs	r3, r4, #1
        i32Cnt++;
   1c648:	3001      	adds	r0, #1
    while ( i32NumChars-- )
   1c64a:	2c00      	cmp	r4, #0
   1c64c:	d1ea      	bne.n	1c624 <am_util_stdio_vsprintf+0x62c>
   1c64e:	e7ed      	b.n	1c62c <am_util_stdio_vsprintf+0x634>
    else if (iExp2 >= 0)
   1c650:	2a00      	cmp	r2, #0
   1c652:	db36      	blt.n	1c6c2 <am_util_stdio_vsprintf+0x6ca>
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
   1c654:	f1a1 087e 	sub.w	r8, r1, #126	; 0x7e
   1c658:	fa00 f808 	lsl.w	r8, r0, r8
        i32IntPart = i32Significand >> (23 - iExp2);
   1c65c:	f1c2 0217 	rsb	r2, r2, #23
    if (unFloatValue.I32 < 0)
   1c660:	2b00      	cmp	r3, #0
        i32IntPart = i32Significand >> (23 - iExp2);
   1c662:	fa40 f002 	asr.w	r0, r0, r2
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
   1c666:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    if (unFloatValue.I32 < 0)
   1c66a:	db3a      	blt.n	1c6e2 <am_util_stdio_vsprintf+0x6ea>
   1c66c:	462a      	mov	r2, r5
   1c66e:	e5bb      	b.n	1c1e8 <am_util_stdio_vsprintf+0x1f0>
                if ( iWidth > 0 )
   1c670:	2800      	cmp	r0, #0
   1c672:	dd3b      	ble.n	1c6ec <am_util_stdio_vsprintf+0x6f4>
        return ui32RetVal;
   1c674:	469e      	mov	lr, r3
    int32_t i32Cnt = 0;
   1c676:	469c      	mov	ip, r3
    while ( i32NumChars-- )
   1c678:	f100 38ff 	add.w	r8, r0, #4294967295
    int32_t i32Cnt = 0;
   1c67c:	2100      	movs	r1, #0
   1c67e:	462b      	mov	r3, r5
            *pcBuf++ = cPadChar;
   1c680:	4618      	mov	r0, r3
        if ( pcBuf )
   1c682:	2b00      	cmp	r3, #0
   1c684:	d049      	beq.n	1c71a <am_util_stdio_vsprintf+0x722>
            *pcBuf++ = cPadChar;
   1c686:	f800 2b01 	strb.w	r2, [r0], #1
   1c68a:	4647      	mov	r7, r8
   1c68c:	4603      	mov	r3, r0
        i32Cnt++;
   1c68e:	3101      	adds	r1, #1
    while ( i32NumChars-- )
   1c690:	f107 38ff 	add.w	r8, r7, #4294967295
   1c694:	2f00      	cmp	r7, #0
   1c696:	d1f3      	bne.n	1c680 <am_util_stdio_vsprintf+0x688>
                        ui32CharCnt += iWidth;
   1c698:	4608      	mov	r0, r1
   1c69a:	440e      	add	r6, r1
                while (*pcStr != 0x0)
   1c69c:	f89c 1000 	ldrb.w	r1, [ip]
                        ui32CharCnt += iWidth;
   1c6a0:	4663      	mov	r3, ip
                        pcBuf += pcBuf ? iWidth : 0;
   1c6a2:	b105      	cbz	r5, 1c6a6 <am_util_stdio_vsprintf+0x6ae>
   1c6a4:	4405      	add	r5, r0
                while (*pcStr != 0x0)
   1c6a6:	2900      	cmp	r1, #0
   1c6a8:	f43f ae60 	beq.w	1c36c <am_util_stdio_vsprintf+0x374>
                        iWidth = 0;
   1c6ac:	2000      	movs	r0, #0
   1c6ae:	e62c      	b.n	1c30a <am_util_stdio_vsprintf+0x312>
        switch ( *pcFmt )
   1c6b0:	f04f 0e01 	mov.w	lr, #1
   1c6b4:	e6df      	b.n	1c476 <am_util_stdio_vsprintf+0x47e>
                        iWidth -= ui32strlen;
   1c6b6:	eba0 000e 	sub.w	r0, r0, lr
    if ( i32NumChars <= 0 )
   1c6ba:	2800      	cmp	r0, #0
   1c6bc:	dcdb      	bgt.n	1c676 <am_util_stdio_vsprintf+0x67e>
   1c6be:	4638      	mov	r0, r7
   1c6c0:	e7ef      	b.n	1c6a2 <am_util_stdio_vsprintf+0x6aa>
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
   1c6c2:	43d2      	mvns	r2, r2
    if (unFloatValue.I32 < 0)
   1c6c4:	2b00      	cmp	r3, #0
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
   1c6c6:	fa40 f802 	asr.w	r8, r0, r2
        *pcBuf++ = '-';
   1c6ca:	462b      	mov	r3, r5
    if (unFloatValue.I32 < 0)
   1c6cc:	da02      	bge.n	1c6d4 <am_util_stdio_vsprintf+0x6dc>
        *pcBuf++ = '-';
   1c6ce:	222d      	movs	r2, #45	; 0x2d
   1c6d0:	f803 2b01 	strb.w	r2, [r3], #1
        *pcBuf++ = '0';
   1c6d4:	461a      	mov	r2, r3
   1c6d6:	2330      	movs	r3, #48	; 0x30
   1c6d8:	f802 3b01 	strb.w	r3, [r2], #1
   1c6dc:	e58d      	b.n	1c1fa <am_util_stdio_vsprintf+0x202>
    i32FracPart = 0;
   1c6de:	f04f 0800 	mov.w	r8, #0
        *pcBuf++ = '-';
   1c6e2:	462b      	mov	r3, r5
   1c6e4:	222d      	movs	r2, #45	; 0x2d
   1c6e6:	f803 2b01 	strb.w	r2, [r3], #1
   1c6ea:	e574      	b.n	1c1d6 <am_util_stdio_vsprintf+0x1de>
    while ( *pcBuf++ )
   1c6ec:	7819      	ldrb	r1, [r3, #0]
                while (*pcStr != 0x0)
   1c6ee:	469e      	mov	lr, r3
   1c6f0:	2900      	cmp	r1, #0
   1c6f2:	f47f ae0a 	bne.w	1c30a <am_util_stdio_vsprintf+0x312>
   1c6f6:	468e      	mov	lr, r1
                if ( iWidth )
   1c6f8:	2800      	cmp	r0, #0
   1c6fa:	f43f ae37 	beq.w	1c36c <am_util_stdio_vsprintf+0x374>
   1c6fe:	e618      	b.n	1c332 <am_util_stdio_vsprintf+0x33a>
        bLower = bLongLong = false;
   1c700:	f04f 0e00 	mov.w	lr, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   1c704:	3707      	adds	r7, #7
   1c706:	f027 0707 	bic.w	r7, r7, #7
   1c70a:	f8d7 c004 	ldr.w	ip, [r7, #4]
   1c70e:	f857 0b08 	ldr.w	r0, [r7], #8
   1c712:	e6b4      	b.n	1c47e <am_util_stdio_vsprintf+0x486>
        switch ( *pcFmt )
   1c714:	f04f 0e01 	mov.w	lr, #1
   1c718:	e7f4      	b.n	1c704 <am_util_stdio_vsprintf+0x70c>
    while ( i32NumChars-- )
   1c71a:	f108 37ff 	add.w	r7, r8, #4294967295
        i32Cnt++;
   1c71e:	3101      	adds	r1, #1
    while ( i32NumChars-- )
   1c720:	f1b8 0f00 	cmp.w	r8, #0
   1c724:	d1b3      	bne.n	1c68e <am_util_stdio_vsprintf+0x696>
   1c726:	e7b7      	b.n	1c698 <am_util_stdio_vsprintf+0x6a0>
    *pcBuf++ = '.';
   1c728:	f102 0c01 	add.w	ip, r2, #1
        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
   1c72c:	ebac 0105 	sub.w	r1, ip, r5
   1c730:	f1c1 0313 	rsb	r3, r1, #19
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
   1c734:	454b      	cmp	r3, r9
   1c736:	bfa8      	it	ge
   1c738:	464b      	movge	r3, r9
        for (jx = 0; jx < iMax; jx++)
   1c73a:	2b00      	cmp	r3, #0
   1c73c:	f340 80ca 	ble.w	1c8d4 <am_util_stdio_vsprintf+0x8dc>
   1c740:	1c58      	adds	r0, r3, #1
   1c742:	4410      	add	r0, r2
            i32FracPart *= 10;
   1c744:	eb08 0888 	add.w	r8, r8, r8, lsl #2
            *pcBuf++ = (i32FracPart >> 24) + '0';
   1c748:	ea4f 51e8 	mov.w	r1, r8, asr #23
   1c74c:	3130      	adds	r1, #48	; 0x30
   1c74e:	f80c 1b01 	strb.w	r1, [ip], #1
            i32FracPart *= 10;
   1c752:	ea4f 0848 	mov.w	r8, r8, lsl #1
        for (jx = 0; jx < iMax; jx++)
   1c756:	4560      	cmp	r0, ip
            i32FracPart &= 0x00FFFFFF;
   1c758:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
        for (jx = 0; jx < iMax; jx++)
   1c75c:	d1f2      	bne.n	1c744 <am_util_stdio_vsprintf+0x74c>
   1c75e:	441a      	add	r2, r3
    return (pcBuf - pcBufInitial);
   1c760:	1b41      	subs	r1, r0, r5
        if ( ((i32FracPart * 10) >> 24) >= 5 )
   1c762:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   1c766:	f348 53c7 	sbfx	r3, r8, #23, #8
   1c76a:	2b04      	cmp	r3, #4
   1c76c:	f77f ad4f 	ble.w	1c20e <am_util_stdio_vsprintf+0x216>
            while ( pcBuftmp >= pcBufInitial )
   1c770:	4295      	cmp	r5, r2
   1c772:	f63f ad4c 	bhi.w	1c20e <am_util_stdio_vsprintf+0x216>
   1c776:	4613      	mov	r3, r2
                    *pcBuftmp = '0';
   1c778:	f04f 0e30 	mov.w	lr, #48	; 0x30
   1c77c:	e004      	b.n	1c788 <am_util_stdio_vsprintf+0x790>
   1c77e:	f883 e001 	strb.w	lr, [r3, #1]
            while ( pcBuftmp >= pcBufInitial )
   1c782:	429d      	cmp	r5, r3
   1c784:	f63f ad43 	bhi.w	1c20e <am_util_stdio_vsprintf+0x216>
                    *pcBuftmp = '0';
   1c788:	469c      	mov	ip, r3
                if ( *pcBuftmp == '.' )
   1c78a:	f813 2901 	ldrb.w	r2, [r3], #-1
   1c78e:	2a2e      	cmp	r2, #46	; 0x2e
   1c790:	d0f7      	beq.n	1c782 <am_util_stdio_vsprintf+0x78a>
                else if ( *pcBuftmp == '9' )
   1c792:	2a39      	cmp	r2, #57	; 0x39
   1c794:	d0f3      	beq.n	1c77e <am_util_stdio_vsprintf+0x786>
                    *pcBuftmp += 1;
   1c796:	3201      	adds	r2, #1
   1c798:	f88c 2000 	strb.w	r2, [ip]
                    break;
   1c79c:	e537      	b.n	1c20e <am_util_stdio_vsprintf+0x216>
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
   1c79e:	1c4b      	adds	r3, r1, #1
   1c7a0:	f000 8081 	beq.w	1c8a6 <am_util_stdio_vsprintf+0x8ae>
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
   1c7a4:	3102      	adds	r1, #2
   1c7a6:	f000 8082 	beq.w	1c8ae <am_util_stdio_vsprintf+0x8b6>
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
   1c7aa:	4b4e      	ldr	r3, [pc, #312]	; (1c8e4 <am_util_stdio_vsprintf+0x8ec>)
                        *(uint32_t*)pcBuf = u32PrntErrVal;
   1c7ac:	602b      	str	r3, [r5, #0]
   1c7ae:	2303      	movs	r3, #3
   1c7b0:	e533      	b.n	1c21a <am_util_stdio_vsprintf+0x222>
    int iNDigits = ui64Val ? 0 : 1;
   1c7b2:	ea59 010a 	orrs.w	r1, r9, sl
   1c7b6:	bf0c      	ite	eq
   1c7b8:	f04f 0b01 	moveq.w	fp, #1
   1c7bc:	f04f 0b00 	movne.w	fp, #0
    while ( ui64Val )
   1c7c0:	f000 808a 	beq.w	1c8d8 <am_util_stdio_vsprintf+0x8e0>
                    bNeg = false;
   1c7c4:	2300      	movs	r3, #0
   1c7c6:	9300      	str	r3, [sp, #0]
   1c7c8:	4648      	mov	r0, r9
   1c7ca:	4651      	mov	r1, sl
   1c7cc:	9401      	str	r4, [sp, #4]
   1c7ce:	465c      	mov	r4, fp
   1c7d0:	46d3      	mov	fp, sl
   1c7d2:	46ca      	mov	sl, r9
   1c7d4:	46a9      	mov	r9, r5
   1c7d6:	4615      	mov	r5, r2
        ui64Val = divu64_10(ui64Val);
   1c7d8:	f7ff fb2a 	bl	1be30 <divu64_10>
    while ( ui64Val )
   1c7dc:	ea50 0301 	orrs.w	r3, r0, r1
        ++iNDigits;
   1c7e0:	f104 0401 	add.w	r4, r4, #1
    while ( ui64Val )
   1c7e4:	d1f8      	bne.n	1c7d8 <am_util_stdio_vsprintf+0x7e0>
                    if ( bNeg )
   1c7e6:	9900      	ldr	r1, [sp, #0]
                    iWidth -= ndigits_in_i64(ui64Val);
   1c7e8:	462a      	mov	r2, r5
   1c7ea:	464d      	mov	r5, r9
   1c7ec:	46d1      	mov	r9, sl
   1c7ee:	46da      	mov	sl, fp
   1c7f0:	46a3      	mov	fp, r4
   1c7f2:	eba8 030b 	sub.w	r3, r8, fp
   1c7f6:	9c01      	ldr	r4, [sp, #4]
                    if ( bNeg )
   1c7f8:	b119      	cbz	r1, 1c802 <am_util_stdio_vsprintf+0x80a>
                        if ( ui8PadChar == '0' )
   1c7fa:	2a30      	cmp	r2, #48	; 0x30
                        --iWidth;
   1c7fc:	f103 33ff 	add.w	r3, r3, #4294967295
                        if ( ui8PadChar == '0' )
   1c800:	d062      	beq.n	1c8c8 <am_util_stdio_vsprintf+0x8d0>
    if ( i32NumChars <= 0 )
   1c802:	2b00      	cmp	r3, #0
   1c804:	dd4d      	ble.n	1c8a2 <am_util_stdio_vsprintf+0x8aa>
    while ( i32NumChars-- )
   1c806:	3b01      	subs	r3, #1
    int32_t i32Cnt = 0;
   1c808:	4694      	mov	ip, r2
   1c80a:	46a6      	mov	lr, r4
   1c80c:	2000      	movs	r0, #0
   1c80e:	462a      	mov	r2, r5
   1c810:	461c      	mov	r4, r3
            *pcBuf++ = cPadChar;
   1c812:	4611      	mov	r1, r2
        if ( pcBuf )
   1c814:	b1c2      	cbz	r2, 1c848 <am_util_stdio_vsprintf+0x850>
            *pcBuf++ = cPadChar;
   1c816:	f801 cb01 	strb.w	ip, [r1], #1
   1c81a:	4623      	mov	r3, r4
   1c81c:	460a      	mov	r2, r1
        i32Cnt++;
   1c81e:	3001      	adds	r0, #1
    while ( i32NumChars-- )
   1c820:	1e5c      	subs	r4, r3, #1
   1c822:	2b00      	cmp	r3, #0
   1c824:	d1f5      	bne.n	1c812 <am_util_stdio_vsprintf+0x81a>
   1c826:	4674      	mov	r4, lr
   1c828:	4662      	mov	r2, ip
                    ui32CharCnt += iWidth;
   1c82a:	4406      	add	r6, r0
                    pcBuf += pcBuf ? iWidth : 0;
   1c82c:	b365      	cbz	r5, 1c888 <am_util_stdio_vsprintf+0x890>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
   1c82e:	9b00      	ldr	r3, [sp, #0]
                    pcBuf += pcBuf ? iWidth : 0;
   1c830:	4405      	add	r5, r0
                    if ( bNeg  &&  (ui8PadChar == ' ') )
   1c832:	b113      	cbz	r3, 1c83a <am_util_stdio_vsprintf+0x842>
   1c834:	2a20      	cmp	r2, #32
   1c836:	f43f ae17 	beq.w	1c468 <am_util_stdio_vsprintf+0x470>
                iVal = uint64_to_str(ui64Val, pcBuf);
   1c83a:	462a      	mov	r2, r5
   1c83c:	4648      	mov	r0, r9
   1c83e:	4651      	mov	r1, sl
   1c840:	f7ff fb52 	bl	1bee8 <uint64_to_str>
                    pcBuf += iVal;
   1c844:	4405      	add	r5, r0
   1c846:	e519      	b.n	1c27c <am_util_stdio_vsprintf+0x284>
    while ( i32NumChars-- )
   1c848:	1e63      	subs	r3, r4, #1
        i32Cnt++;
   1c84a:	3001      	adds	r0, #1
    while ( i32NumChars-- )
   1c84c:	2c00      	cmp	r4, #0
   1c84e:	d1e6      	bne.n	1c81e <am_util_stdio_vsprintf+0x826>
   1c850:	e7e9      	b.n	1c826 <am_util_stdio_vsprintf+0x82e>
   1c852:	f04f 0800 	mov.w	r8, #0
   1c856:	e65f      	b.n	1c518 <am_util_stdio_vsprintf+0x520>
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
   1c858:	4b23      	ldr	r3, [pc, #140]	; (1c8e8 <am_util_stdio_vsprintf+0x8f0>)
   1c85a:	602b      	str	r3, [r5, #0]
   1c85c:	2303      	movs	r3, #3
   1c85e:	e4dc      	b.n	1c21a <am_util_stdio_vsprintf+0x222>
                    bNeg = true;
   1c860:	2301      	movs	r3, #1
   1c862:	9300      	str	r3, [sp, #0]
    int iNDigits = ui64Val ? 0 : 1;
   1c864:	f04f 0b00 	mov.w	fp, #0
   1c868:	e7ae      	b.n	1c7c8 <am_util_stdio_vsprintf+0x7d0>
    uint32_t ui32Val = 0, uCnt = 0;
   1c86a:	f04f 0a00 	mov.w	sl, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1c86e:	4653      	mov	r3, sl
   1c870:	e52b      	b.n	1c2ca <am_util_stdio_vsprintf+0x2d2>
                if ( iWidth > 0 )
   1c872:	2800      	cmp	r0, #0
   1c874:	f77f af3f 	ble.w	1c6f6 <am_util_stdio_vsprintf+0x6fe>
    uint32_t ui32RetVal = 0;
   1c878:	468e      	mov	lr, r1
   1c87a:	e6fc      	b.n	1c676 <am_util_stdio_vsprintf+0x67e>
                iVal = uint64_to_str(ui64Val, pcBuf);
   1c87c:	462a      	mov	r2, r5
   1c87e:	4650      	mov	r0, sl
   1c880:	4649      	mov	r1, r9
   1c882:	f7ff fb31 	bl	1bee8 <uint64_to_str>
                if ( pcBuf )
   1c886:	e4dd      	b.n	1c244 <am_util_stdio_vsprintf+0x24c>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
   1c888:	9b00      	ldr	r3, [sp, #0]
   1c88a:	b1b3      	cbz	r3, 1c8ba <am_util_stdio_vsprintf+0x8c2>
   1c88c:	2a20      	cmp	r2, #32
   1c88e:	f43f adee 	beq.w	1c46e <am_util_stdio_vsprintf+0x476>
                iVal = uint64_to_str(ui64Val, pcBuf);
   1c892:	462a      	mov	r2, r5
   1c894:	4648      	mov	r0, r9
   1c896:	4651      	mov	r1, sl
   1c898:	f7ff fb26 	bl	1bee8 <uint64_to_str>
                if ( pcBuf )
   1c89c:	e4d2      	b.n	1c244 <am_util_stdio_vsprintf+0x24c>
   1c89e:	2000      	movs	r0, #0
   1c8a0:	e6c6      	b.n	1c630 <am_util_stdio_vsprintf+0x638>
   1c8a2:	2000      	movs	r0, #0
   1c8a4:	e7c2      	b.n	1c82c <am_util_stdio_vsprintf+0x834>
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
   1c8a6:	4b10      	ldr	r3, [pc, #64]	; (1c8e8 <am_util_stdio_vsprintf+0x8f0>)
   1c8a8:	e780      	b.n	1c7ac <am_util_stdio_vsprintf+0x7b4>
   1c8aa:	2000      	movs	r0, #0
   1c8ac:	e55c      	b.n	1c368 <am_util_stdio_vsprintf+0x370>
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
   1c8ae:	4b0f      	ldr	r3, [pc, #60]	; (1c8ec <am_util_stdio_vsprintf+0x8f4>)
   1c8b0:	e77c      	b.n	1c7ac <am_util_stdio_vsprintf+0x7b4>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1c8b2:	2300      	movs	r3, #0
        uCnt++;
   1c8b4:	f04f 0a01 	mov.w	sl, #1
   1c8b8:	e506      	b.n	1c2c8 <am_util_stdio_vsprintf+0x2d0>
                iVal = uint64_to_str(ui64Val, pcBuf);
   1c8ba:	4648      	mov	r0, r9
   1c8bc:	4651      	mov	r1, sl
   1c8be:	462a      	mov	r2, r5
   1c8c0:	f7ff fb12 	bl	1bee8 <uint64_to_str>
                ui32CharCnt += iVal;
   1c8c4:	4406      	add	r6, r0
                break;
   1c8c6:	e4bf      	b.n	1c248 <am_util_stdio_vsprintf+0x250>
                            if ( pcBuf )
   1c8c8:	b115      	cbz	r5, 1c8d0 <am_util_stdio_vsprintf+0x8d8>
                                *pcBuf++ = '-';
   1c8ca:	212d      	movs	r1, #45	; 0x2d
   1c8cc:	f805 1b01 	strb.w	r1, [r5], #1
                            ++ui32CharCnt;
   1c8d0:	3601      	adds	r6, #1
   1c8d2:	e796      	b.n	1c802 <am_util_stdio_vsprintf+0x80a>
    *pcBuf++ = '.';
   1c8d4:	4660      	mov	r0, ip
   1c8d6:	e744      	b.n	1c762 <am_util_stdio_vsprintf+0x76a>
                    iWidth -= ndigits_in_i64(ui64Val);
   1c8d8:	eba8 030b 	sub.w	r3, r8, fp
                    bNeg = false;
   1c8dc:	468a      	mov	sl, r1
   1c8de:	9100      	str	r1, [sp, #0]
                    ui64Val = i64Val;
   1c8e0:	4689      	mov	r9, r1
   1c8e2:	e78e      	b.n	1c802 <am_util_stdio_vsprintf+0x80a>
   1c8e4:	003f2e3f 	.word	0x003f2e3f
   1c8e8:	00302e30 	.word	0x00302e30
   1c8ec:	00232e23 	.word	0x00232e23

0001c8f0 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
   1c8f0:	b40f      	push	{r0, r1, r2, r3}
   1c8f2:	b530      	push	{r4, r5, lr}
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
   1c8f4:	4d09      	ldr	r5, [pc, #36]	; (1c91c <am_util_stdio_printf+0x2c>)
   1c8f6:	682c      	ldr	r4, [r5, #0]
{
   1c8f8:	b083      	sub	sp, #12
    if (!g_pfnCharPrint)
   1c8fa:	b14c      	cbz	r4, 1c910 <am_util_stdio_printf+0x20>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
   1c8fc:	aa07      	add	r2, sp, #28
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
   1c8fe:	9906      	ldr	r1, [sp, #24]
   1c900:	4807      	ldr	r0, [pc, #28]	; (1c920 <am_util_stdio_printf+0x30>)
    va_start(pArgs, pcFmt);
   1c902:	9201      	str	r2, [sp, #4]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
   1c904:	f7ff fb78 	bl	1bff8 <am_util_stdio_vsprintf>
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
   1c908:	682b      	ldr	r3, [r5, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
   1c90a:	4604      	mov	r4, r0
    g_pfnCharPrint(g_prfbuf);
   1c90c:	4804      	ldr	r0, [pc, #16]	; (1c920 <am_util_stdio_printf+0x30>)
   1c90e:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
}
   1c910:	4620      	mov	r0, r4
   1c912:	b003      	add	sp, #12
   1c914:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1c918:	b004      	add	sp, #16
   1c91a:	4770      	bx	lr
   1c91c:	10009b2c 	.word	0x10009b2c
   1c920:	10009b30 	.word	0x10009b30

0001c924 <AppHandlerInit>:
 *  \return None.
 */
/*************************************************************************************************/
void AppHandlerInit(wsfHandlerId_t handlerId)
{
  appHandlerId = handlerId;
   1c924:	4b01      	ldr	r3, [pc, #4]	; (1c92c <AppHandlerInit+0x8>)
   1c926:	7018      	strb	r0, [r3, #0]

  AppDbInit();
   1c928:	f7f3 bbae 	b.w	10088 <AppDbInit>
   1c92c:	10009c38 	.word	0x10009c38

0001c930 <AppHandler>:
 *  \return None.
 */
/*************************************************************************************************/
void AppHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
  if (pMsg != NULL)
   1c930:	b1b1      	cbz	r1, 1c960 <AppHandler+0x30>
{
   1c932:	b510      	push	{r4, lr}
   1c934:	460c      	mov	r4, r1
  {
    APP_TRACE_INFO1("App got evt %d", pMsg->event);
   1c936:	4813      	ldr	r0, [pc, #76]	; (1c984 <AppHandler+0x54>)
   1c938:	7889      	ldrb	r1, [r1, #2]
   1c93a:	f7f3 fb85 	bl	10048 <WsfTrace>

    if (pMsg->event >= APP_MASTER_MSG_START)
   1c93e:	78a3      	ldrb	r3, [r4, #2]
   1c940:	2b1f      	cmp	r3, #31
   1c942:	d905      	bls.n	1c950 <AppHandler+0x20>
    {
      /* pass event to master handler */
      (*appCb.masterCback)(pMsg);
   1c944:	4b10      	ldr	r3, [pc, #64]	; (1c988 <AppHandler+0x58>)
   1c946:	4620      	mov	r0, r4
   1c948:	685b      	ldr	r3, [r3, #4]
    if (event & APP_BTN_DOWN_EVT)
    {
      AppUiBtnPressed();
    }
  }
}
   1c94a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (*appCb.masterCback)(pMsg);
   1c94e:	4718      	bx	r3
    else if (pMsg->event >= APP_SLAVE_MSG_START)
   1c950:	2b0f      	cmp	r3, #15
   1c952:	d908      	bls.n	1c966 <AppHandler+0x36>
      (*appCb.slaveCback)(pMsg);
   1c954:	4b0c      	ldr	r3, [pc, #48]	; (1c988 <AppHandler+0x58>)
   1c956:	4620      	mov	r0, r4
   1c958:	681b      	ldr	r3, [r3, #0]
}
   1c95a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (*appCb.slaveCback)(pMsg);
   1c95e:	4718      	bx	r3
    if (event & APP_BTN_DOWN_EVT)
   1c960:	06c3      	lsls	r3, r0, #27
   1c962:	d404      	bmi.n	1c96e <AppHandler+0x3e>
   1c964:	4770      	bx	lr
  switch(pMsg->event)
   1c966:	b14b      	cbz	r3, 1c97c <AppHandler+0x4c>
   1c968:	2b01      	cmp	r3, #1
   1c96a:	d002      	beq.n	1c972 <AppHandler+0x42>
}
   1c96c:	bd10      	pop	{r4, pc}
      AppUiBtnPressed();
   1c96e:	f7f3 bb97 	b.w	100a0 <AppUiBtnPressed>
      appUiTimerExpired(pMsg);
   1c972:	4620      	mov	r0, r4
}
   1c974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      appUiTimerExpired(pMsg);
   1c978:	f7f3 bb88 	b.w	1008c <appUiTimerExpired>
}
   1c97c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      appUiBtnPoll();
   1c980:	f7f3 bb86 	b.w	10090 <appUiBtnPoll>
   1c984:	00020734 	.word	0x00020734
   1c988:	10009c30 	.word	0x10009c30

0001c98c <am_devices_button_array_init>:
    uint32_t i;

    //
    // Loop through the list of buttons, configuring each one individually.
    //
    for ( i = 0; i < ui32NumButtons; i++ )
   1c98c:	b1b1      	cbz	r1, 1c9bc <am_devices_button_array_init+0x30>
   1c98e:	4b0c      	ldr	r3, [pc, #48]	; (1c9c0 <am_devices_button_array_init+0x34>)
{
   1c990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for ( i = 0; i < ui32NumButtons; i++ )
   1c994:	2500      	movs	r5, #0
    am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_DISABLE);
   1c996:	f8d3 8000 	ldr.w	r8, [r3]
   1c99a:	460f      	mov	r7, r1
   1c99c:	4604      	mov	r4, r0
    psButton->ui32Count = 0;
   1c99e:	462e      	mov	r6, r5
    am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_DISABLE);
   1c9a0:	6820      	ldr	r0, [r4, #0]
   1c9a2:	4641      	mov	r1, r8
    for ( i = 0; i < ui32NumButtons; i++ )
   1c9a4:	3410      	adds	r4, #16
   1c9a6:	3501      	adds	r5, #1
    am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_DISABLE);
   1c9a8:	f001 fe92 	bl	1e6d0 <am_hal_gpio_pinconfig>
    for ( i = 0; i < ui32NumButtons; i++ )
   1c9ac:	42af      	cmp	r7, r5
    psButton->ui32Count = 0;
   1c9ae:	f844 6c08 	str.w	r6, [r4, #-8]
    psButton->bPressed = false;
   1c9b2:	f824 6c04 	strh.w	r6, [r4, #-4]
    for ( i = 0; i < ui32NumButtons; i++ )
   1c9b6:	d1f3      	bne.n	1c9a0 <am_devices_button_array_init+0x14>
    {
        am_devices_button_init(psButtons + i);
    }
}
   1c9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c9bc:	4770      	bx	lr
   1c9be:	bf00      	nop
   1c9c0:	000223b4 	.word	0x000223b4

0001c9c4 <am_devices_button_array_tick>:
    uint32_t i;

    //
    // Run the "tick" function for each button in the list.
    //
    for ( i = 0; i < ui32NumButtons; i++ )
   1c9c4:	2900      	cmp	r1, #0
   1c9c6:	d036      	beq.n	1ca36 <am_devices_button_array_tick+0x72>
{
   1c9c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c9cc:	4b1a      	ldr	r3, [pc, #104]	; (1ca38 <am_devices_button_array_tick+0x74>)
   1c9ce:	4f1b      	ldr	r7, [pc, #108]	; (1ca3c <am_devices_button_array_tick+0x78>)
    am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_INPUT);
   1c9d0:	f8d3 8000 	ldr.w	r8, [r3]
    for ( i = 0; i < ui32NumButtons; i++ )
   1c9d4:	2500      	movs	r5, #0
{
   1c9d6:	b083      	sub	sp, #12
   1c9d8:	460e      	mov	r6, r1
   1c9da:	4604      	mov	r4, r0
    am_hal_gpio_state_read(psButton->ui32GPIONumber, AM_HAL_GPIO_INPUT_READ, &ui32PinState);
   1c9dc:	46a9      	mov	r9, r5
   1c9de:	e012      	b.n	1ca06 <am_devices_button_array_tick+0x42>
        psButton->ui32Count++;
   1c9e0:	68a2      	ldr	r2, [r4, #8]
        psButton->bChanged = true;
   1c9e2:	2101      	movs	r1, #1
        psButton->ui32Count++;
   1c9e4:	440a      	add	r2, r1
    if ( psButton->ui32Count >= AM_DEVICES_BUTTON_DEBOUNCE_DELAY )
   1c9e6:	2a03      	cmp	r2, #3
   1c9e8:	60a2      	str	r2, [r4, #8]
        psButton->bPressed = bRawButtonPressed;
   1c9ea:	bf86      	itte	hi
   1c9ec:	7323      	strbhi	r3, [r4, #12]
        psButton->ui32Count = 0;
   1c9ee:	f8c4 9008 	strhi.w	r9, [r4, #8]
        psButton->bChanged = false;
   1c9f2:	2100      	movls	r1, #0
   1c9f4:	7361      	strb	r1, [r4, #13]
    for ( i = 0; i < ui32NumButtons; i++ )
   1c9f6:	3501      	adds	r5, #1
    am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_DISABLE);
   1c9f8:	6839      	ldr	r1, [r7, #0]
   1c9fa:	f854 0b10 	ldr.w	r0, [r4], #16
   1c9fe:	f001 fe67 	bl	1e6d0 <am_hal_gpio_pinconfig>
    for ( i = 0; i < ui32NumButtons; i++ )
   1ca02:	42ae      	cmp	r6, r5
   1ca04:	d014      	beq.n	1ca30 <am_devices_button_array_tick+0x6c>
    am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_INPUT);
   1ca06:	4641      	mov	r1, r8
   1ca08:	6820      	ldr	r0, [r4, #0]
   1ca0a:	f001 fe61 	bl	1e6d0 <am_hal_gpio_pinconfig>
    am_hal_gpio_state_read(psButton->ui32GPIONumber, AM_HAL_GPIO_INPUT_READ, &ui32PinState);
   1ca0e:	aa01      	add	r2, sp, #4
   1ca10:	2100      	movs	r1, #0
   1ca12:	6820      	ldr	r0, [r4, #0]
   1ca14:	f001 ff92 	bl	1e93c <am_hal_gpio_state_read>
    bRawButtonPressed = (ui32PinState != psButton->ui32Polarity);
   1ca18:	6863      	ldr	r3, [r4, #4]
   1ca1a:	9901      	ldr	r1, [sp, #4]
    if ( bRawButtonPressed != psButton->bPressed )
   1ca1c:	7b22      	ldrb	r2, [r4, #12]
    bRawButtonPressed = (ui32PinState != psButton->ui32Polarity);
   1ca1e:	1a5b      	subs	r3, r3, r1
   1ca20:	bf18      	it	ne
   1ca22:	2301      	movne	r3, #1
    if ( bRawButtonPressed != psButton->bPressed )
   1ca24:	429a      	cmp	r2, r3
   1ca26:	d1db      	bne.n	1c9e0 <am_devices_button_array_tick+0x1c>
   1ca28:	f8c4 9008 	str.w	r9, [r4, #8]
        psButton->bChanged = false;
   1ca2c:	2100      	movs	r1, #0
   1ca2e:	e7e1      	b.n	1c9f4 <am_devices_button_array_tick+0x30>
    {
        am_devices_button_tick(psButtons + i);
    }
}
   1ca30:	b003      	add	sp, #12
   1ca32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ca36:	4770      	bx	lr
   1ca38:	000223b8 	.word	0x000223b8
   1ca3c:	000223b4 	.word	0x000223b4

0001ca40 <NMI_Handler>:
NMI_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
   1ca40:	e7fe      	b.n	1ca40 <NMI_Handler>
   1ca42:	bf00      	nop

0001ca44 <BusFault_Handler>:
HardFault_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
   1ca44:	e7fe      	b.n	1ca44 <BusFault_Handler>
   1ca46:	bf00      	nop

0001ca48 <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
   1ca48:	e7fe      	b.n	1ca48 <DebugMon_Handler>
   1ca4a:	bf00      	nop

0001ca4c <Reset_Handler>:
    __asm("    ldr    r0, =0xE000ED08\n"
   1ca4c:	4811      	ldr	r0, [pc, #68]	; (1ca94 <zero_loop+0x12>)
   1ca4e:	4912      	ldr	r1, [pc, #72]	; (1ca98 <zero_loop+0x16>)
   1ca50:	6001      	str	r1, [r0, #0]
    __asm("    ldr    sp, [r1]");
   1ca52:	f8d1 d000 	ldr.w	sp, [r1]
    __asm("ldr  r0, =0xE000ED88\n"
   1ca56:	4811      	ldr	r0, [pc, #68]	; (1ca9c <zero_loop+0x1a>)
   1ca58:	6801      	ldr	r1, [r0, #0]
   1ca5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1ca5e:	6001      	str	r1, [r0, #0]
   1ca60:	f3bf 8f4f 	dsb	sy
   1ca64:	f3bf 8f6f 	isb	sy
    __asm("    ldr     r0, =_init_data\n"
   1ca68:	480d      	ldr	r0, [pc, #52]	; (1caa0 <zero_loop+0x1e>)
   1ca6a:	490e      	ldr	r1, [pc, #56]	; (1caa4 <zero_loop+0x22>)
   1ca6c:	4a0e      	ldr	r2, [pc, #56]	; (1caa8 <zero_loop+0x26>)

0001ca6e <copy_loop>:
   1ca6e:	f850 3b04 	ldr.w	r3, [r0], #4
   1ca72:	f841 3b04 	str.w	r3, [r1], #4
   1ca76:	4291      	cmp	r1, r2
   1ca78:	dbf9      	blt.n	1ca6e <copy_loop>
    __asm("    ldr     r0, =_sbss\n"
   1ca7a:	480c      	ldr	r0, [pc, #48]	; (1caac <zero_loop+0x2a>)
   1ca7c:	490c      	ldr	r1, [pc, #48]	; (1cab0 <zero_loop+0x2e>)
   1ca7e:	f04f 0200 	mov.w	r2, #0

0001ca82 <zero_loop>:
   1ca82:	4288      	cmp	r0, r1
   1ca84:	bfb8      	it	lt
   1ca86:	f840 2b04 	strlt.w	r2, [r0], #4
   1ca8a:	dbfa      	blt.n	1ca82 <zero_loop>
    main();
   1ca8c:	f7f6 ff5a 	bl	13944 <main>
    __asm("    bkpt     ");
   1ca90:	be00      	bkpt	0x0000
}
   1ca92:	0000      	.short	0x0000
   1ca94:	e000ed08 	.word	0xe000ed08
   1ca98:	0000c000 	.word	0x0000c000
   1ca9c:	e000ed88 	.word	0xe000ed88
   1caa0:	0002265c 	.word	0x0002265c
   1caa4:	10002b00 	.word	0x10002b00
   1caa8:	10003de4 	.word	0x10003de4
   1caac:	10003de8 	.word	0x10003de8
   1cab0:	10009d94 	.word	0x10009d94

0001cab4 <memcmp>:
   1cab4:	2a03      	cmp	r2, #3
   1cab6:	b570      	push	{r4, r5, r6, lr}
   1cab8:	d915      	bls.n	1cae6 <memcmp+0x32>
   1caba:	ea40 0c01 	orr.w	ip, r0, r1
   1cabe:	f01c 0f03 	tst.w	ip, #3
   1cac2:	4604      	mov	r4, r0
   1cac4:	460b      	mov	r3, r1
   1cac6:	d121      	bne.n	1cb0c <memcmp+0x58>
   1cac8:	4619      	mov	r1, r3
   1caca:	4620      	mov	r0, r4
   1cacc:	680e      	ldr	r6, [r1, #0]
   1cace:	6805      	ldr	r5, [r0, #0]
   1cad0:	42b5      	cmp	r5, r6
   1cad2:	f104 0404 	add.w	r4, r4, #4
   1cad6:	f103 0304 	add.w	r3, r3, #4
   1cada:	d117      	bne.n	1cb0c <memcmp+0x58>
   1cadc:	3a04      	subs	r2, #4
   1cade:	2a03      	cmp	r2, #3
   1cae0:	4620      	mov	r0, r4
   1cae2:	4619      	mov	r1, r3
   1cae4:	d8f0      	bhi.n	1cac8 <memcmp+0x14>
   1cae6:	1e54      	subs	r4, r2, #1
   1cae8:	b1a2      	cbz	r2, 1cb14 <memcmp+0x60>
   1caea:	f100 3cff 	add.w	ip, r0, #4294967295
   1caee:	3901      	subs	r1, #1
   1caf0:	e001      	b.n	1caf6 <memcmp+0x42>
   1caf2:	18c3      	adds	r3, r0, r3
   1caf4:	d00c      	beq.n	1cb10 <memcmp+0x5c>
   1caf6:	f81c ef01 	ldrb.w	lr, [ip, #1]!
   1cafa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1cafe:	4596      	cmp	lr, r2
   1cb00:	eba4 030c 	sub.w	r3, r4, ip
   1cb04:	d0f5      	beq.n	1caf2 <memcmp+0x3e>
   1cb06:	ebae 0002 	sub.w	r0, lr, r2
   1cb0a:	bd70      	pop	{r4, r5, r6, pc}
   1cb0c:	1e54      	subs	r4, r2, #1
   1cb0e:	e7ec      	b.n	1caea <memcmp+0x36>
   1cb10:	4618      	mov	r0, r3
   1cb12:	bd70      	pop	{r4, r5, r6, pc}
   1cb14:	4610      	mov	r0, r2
   1cb16:	bd70      	pop	{r4, r5, r6, pc}

0001cb18 <memset>:
   1cb18:	0783      	lsls	r3, r0, #30
   1cb1a:	b530      	push	{r4, r5, lr}
   1cb1c:	d048      	beq.n	1cbb0 <memset+0x98>
   1cb1e:	1e54      	subs	r4, r2, #1
   1cb20:	2a00      	cmp	r2, #0
   1cb22:	d03f      	beq.n	1cba4 <memset+0x8c>
   1cb24:	b2ca      	uxtb	r2, r1
   1cb26:	4603      	mov	r3, r0
   1cb28:	e001      	b.n	1cb2e <memset+0x16>
   1cb2a:	3c01      	subs	r4, #1
   1cb2c:	d33a      	bcc.n	1cba4 <memset+0x8c>
   1cb2e:	f803 2b01 	strb.w	r2, [r3], #1
   1cb32:	079d      	lsls	r5, r3, #30
   1cb34:	d1f9      	bne.n	1cb2a <memset+0x12>
   1cb36:	2c03      	cmp	r4, #3
   1cb38:	d92d      	bls.n	1cb96 <memset+0x7e>
   1cb3a:	b2cd      	uxtb	r5, r1
   1cb3c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1cb40:	2c0f      	cmp	r4, #15
   1cb42:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1cb46:	d936      	bls.n	1cbb6 <memset+0x9e>
   1cb48:	f1a4 0210 	sub.w	r2, r4, #16
   1cb4c:	f022 0c0f 	bic.w	ip, r2, #15
   1cb50:	f103 0e20 	add.w	lr, r3, #32
   1cb54:	44e6      	add	lr, ip
   1cb56:	ea4f 1c12 	mov.w	ip, r2, lsr #4
   1cb5a:	f103 0210 	add.w	r2, r3, #16
   1cb5e:	e942 5504 	strd	r5, r5, [r2, #-16]
   1cb62:	e942 5502 	strd	r5, r5, [r2, #-8]
   1cb66:	3210      	adds	r2, #16
   1cb68:	4572      	cmp	r2, lr
   1cb6a:	d1f8      	bne.n	1cb5e <memset+0x46>
   1cb6c:	f10c 0201 	add.w	r2, ip, #1
   1cb70:	f014 0f0c 	tst.w	r4, #12
   1cb74:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   1cb78:	f004 0c0f 	and.w	ip, r4, #15
   1cb7c:	d013      	beq.n	1cba6 <memset+0x8e>
   1cb7e:	f1ac 0304 	sub.w	r3, ip, #4
   1cb82:	f023 0303 	bic.w	r3, r3, #3
   1cb86:	3304      	adds	r3, #4
   1cb88:	4413      	add	r3, r2
   1cb8a:	f842 5b04 	str.w	r5, [r2], #4
   1cb8e:	4293      	cmp	r3, r2
   1cb90:	d1fb      	bne.n	1cb8a <memset+0x72>
   1cb92:	f00c 0403 	and.w	r4, ip, #3
   1cb96:	b12c      	cbz	r4, 1cba4 <memset+0x8c>
   1cb98:	b2ca      	uxtb	r2, r1
   1cb9a:	441c      	add	r4, r3
   1cb9c:	f803 2b01 	strb.w	r2, [r3], #1
   1cba0:	429c      	cmp	r4, r3
   1cba2:	d1fb      	bne.n	1cb9c <memset+0x84>
   1cba4:	bd30      	pop	{r4, r5, pc}
   1cba6:	4664      	mov	r4, ip
   1cba8:	4613      	mov	r3, r2
   1cbaa:	2c00      	cmp	r4, #0
   1cbac:	d1f4      	bne.n	1cb98 <memset+0x80>
   1cbae:	e7f9      	b.n	1cba4 <memset+0x8c>
   1cbb0:	4603      	mov	r3, r0
   1cbb2:	4614      	mov	r4, r2
   1cbb4:	e7bf      	b.n	1cb36 <memset+0x1e>
   1cbb6:	461a      	mov	r2, r3
   1cbb8:	46a4      	mov	ip, r4
   1cbba:	e7e0      	b.n	1cb7e <memset+0x66>

0001cbbc <am_hal_ble_blocking_transfer.part.0>:
   1cbbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cbc0:	4dbc      	ldr	r5, [pc, #752]	; (1ceb4 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
   1cbc2:	f8d5 8220 	ldr.w	r8, [r5, #544]	; 0x220
   1cbc6:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   1cbca:	f36f 13c7 	bfc	r3, #7, #1
   1cbce:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   1cbd2:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   1cbd6:	f36f 2308 	bfc	r3, #8, #1
   1cbda:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   1cbde:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   1cbe2:	f36f 0300 	bfc	r3, #0, #1
   1cbe6:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   1cbea:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   1cbee:	f36f 0341 	bfc	r3, #1, #1
   1cbf2:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   1cbf6:	f8d5 3228 	ldr.w	r3, [r5, #552]	; 0x228
   1cbfa:	f043 0301 	orr.w	r3, r3, #1
   1cbfe:	f8c5 3228 	str.w	r3, [r5, #552]	; 0x228
   1cc02:	f8d5 3228 	ldr.w	r3, [r5, #552]	; 0x228
   1cc06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1cc0a:	f8c5 3228 	str.w	r3, [r5, #552]	; 0x228
   1cc0e:	7a8b      	ldrb	r3, [r1, #10]
   1cc10:	2b01      	cmp	r3, #1
   1cc12:	b085      	sub	sp, #20
   1cc14:	460e      	mov	r6, r1
   1cc16:	4604      	mov	r4, r0
   1cc18:	d03c      	beq.n	1cc94 <am_hal_ble_blocking_transfer.part.0+0xd8>
   1cc1a:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   1cc1e:	061a      	lsls	r2, r3, #24
   1cc20:	d532      	bpl.n	1cc88 <am_hal_ble_blocking_transfer.part.0+0xcc>
   1cc22:	f001 ff05 	bl	1ea30 <am_hal_interrupt_master_disable>
   1cc26:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   1cc2a:	9003      	str	r0, [sp, #12]
   1cc2c:	9803      	ldr	r0, [sp, #12]
   1cc2e:	2b00      	cmp	r3, #0
   1cc30:	d151      	bne.n	1ccd6 <am_hal_ble_blocking_transfer.part.0+0x11a>
   1cc32:	2301      	movs	r3, #1
   1cc34:	6463      	str	r3, [r4, #68]	; 0x44
   1cc36:	f001 feff 	bl	1ea38 <am_hal_interrupt_master_set>
   1cc3a:	7b33      	ldrb	r3, [r6, #12]
   1cc3c:	b113      	cbz	r3, 1cc44 <am_hal_ble_blocking_transfer.part.0+0x88>
   1cc3e:	2301      	movs	r3, #1
   1cc40:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
   1cc44:	6833      	ldr	r3, [r6, #0]
   1cc46:	6872      	ldr	r2, [r6, #4]
   1cc48:	68b1      	ldr	r1, [r6, #8]
   1cc4a:	68f0      	ldr	r0, [r6, #12]
   1cc4c:	61a0      	str	r0, [r4, #24]
   1cc4e:	60e3      	str	r3, [r4, #12]
   1cc50:	6122      	str	r2, [r4, #16]
   1cc52:	6161      	str	r1, [r4, #20]
   1cc54:	6933      	ldr	r3, [r6, #16]
   1cc56:	6972      	ldr	r2, [r6, #20]
   1cc58:	6222      	str	r2, [r4, #32]
   1cc5a:	61e3      	str	r3, [r4, #28]
   1cc5c:	f001 fee8 	bl	1ea30 <am_hal_interrupt_master_disable>
   1cc60:	6823      	ldr	r3, [r4, #0]
   1cc62:	4a95      	ldr	r2, [pc, #596]	; (1ceb8 <am_hal_ble_blocking_transfer.part.0+0x2fc>)
   1cc64:	9001      	str	r0, [sp, #4]
   1cc66:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1cc6a:	4293      	cmp	r3, r2
   1cc6c:	f104 070c 	add.w	r7, r4, #12
   1cc70:	f040 8156 	bne.w	1cf20 <am_hal_ble_blocking_transfer.part.0+0x364>
   1cc74:	79f2      	ldrb	r2, [r6, #7]
   1cc76:	2a03      	cmp	r2, #3
   1cc78:	f200 8152 	bhi.w	1cf20 <am_hal_ble_blocking_transfer.part.0+0x364>
   1cc7c:	e8df f012 	tbh	[pc, r2, lsl #1]
   1cc80:	01040071 	.word	0x01040071
   1cc84:	010900ff 	.word	0x010900ff
   1cc88:	488c      	ldr	r0, [pc, #560]	; (1cebc <am_hal_ble_blocking_transfer.part.0+0x300>)
   1cc8a:	f8c5 8220 	str.w	r8, [r5, #544]	; 0x220
   1cc8e:	b005      	add	sp, #20
   1cc90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cc94:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
   1cc98:	b333      	cbz	r3, 1cce8 <am_hal_ble_blocking_transfer.part.0+0x12c>
   1cc9a:	f890 5040 	ldrb.w	r5, [r0, #64]	; 0x40
   1cc9e:	2d00      	cmp	r5, #0
   1cca0:	f000 81c4 	beq.w	1d02c <am_hal_ble_blocking_transfer.part.0+0x470>
   1cca4:	2300      	movs	r3, #0
   1cca6:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
   1ccaa:	4f82      	ldr	r7, [pc, #520]	; (1ceb4 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
   1ccac:	f240 152d 	movw	r5, #301	; 0x12d
   1ccb0:	f04f 0900 	mov.w	r9, #0
   1ccb4:	e008      	b.n	1ccc8 <am_hal_ble_blocking_transfer.part.0+0x10c>
   1ccb6:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   1ccba:	071b      	lsls	r3, r3, #28
   1ccbc:	d518      	bpl.n	1ccf0 <am_hal_ble_blocking_transfer.part.0+0x134>
   1ccbe:	20a0      	movs	r0, #160	; 0xa0
   1ccc0:	f001 fca8 	bl	1e614 <am_hal_flash_delay>
   1ccc4:	3d01      	subs	r5, #1
   1ccc6:	d013      	beq.n	1ccf0 <am_hal_ble_blocking_transfer.part.0+0x134>
   1ccc8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   1cccc:	2b00      	cmp	r3, #0
   1ccce:	d0f2      	beq.n	1ccb6 <am_hal_ble_blocking_transfer.part.0+0xfa>
   1ccd0:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
   1ccd4:	e7f3      	b.n	1ccbe <am_hal_ble_blocking_transfer.part.0+0x102>
   1ccd6:	f001 feaf 	bl	1ea38 <am_hal_interrupt_master_set>
   1ccda:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   1ccde:	f8c5 8220 	str.w	r8, [r5, #544]	; 0x220
   1cce2:	b005      	add	sp, #20
   1cce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cce8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   1ccec:	2b00      	cmp	r3, #0
   1ccee:	d1dc      	bne.n	1ccaa <am_hal_ble_blocking_transfer.part.0+0xee>
   1ccf0:	4d70      	ldr	r5, [pc, #448]	; (1ceb4 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
   1ccf2:	f8d5 3410 	ldr.w	r3, [r5, #1040]	; 0x410
   1ccf6:	f043 0302 	orr.w	r3, r3, #2
   1ccfa:	f8c5 3410 	str.w	r3, [r5, #1040]	; 0x410
   1ccfe:	2050      	movs	r0, #80	; 0x50
   1cd00:	f001 fc88 	bl	1e614 <am_hal_flash_delay>
   1cd04:	6823      	ldr	r3, [r4, #0]
   1cd06:	4a6c      	ldr	r2, [pc, #432]	; (1ceb8 <am_hal_ble_blocking_transfer.part.0+0x2fc>)
   1cd08:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1cd0c:	4293      	cmp	r3, r2
   1cd0e:	d105      	bne.n	1cd1c <am_hal_ble_blocking_transfer.part.0+0x160>
   1cd10:	f8b5 3304 	ldrh.w	r3, [r5, #772]	; 0x304
   1cd14:	f043 030c 	orr.w	r3, r3, #12
   1cd18:	f8a5 3304 	strh.w	r3, [r5, #772]	; 0x304
   1cd1c:	2500      	movs	r5, #0
   1cd1e:	4f65      	ldr	r7, [pc, #404]	; (1ceb4 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
   1cd20:	46a9      	mov	r9, r5
   1cd22:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   1cd26:	2b00      	cmp	r3, #0
   1cd28:	f040 80ba 	bne.w	1cea0 <am_hal_ble_blocking_transfer.part.0+0x2e4>
   1cd2c:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   1cd30:	0718      	lsls	r0, r3, #28
   1cd32:	f140 80c7 	bpl.w	1cec4 <am_hal_ble_blocking_transfer.part.0+0x308>
   1cd36:	f001 fe7b 	bl	1ea30 <am_hal_interrupt_master_disable>
   1cd3a:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
   1cd3e:	9002      	str	r0, [sp, #8]
   1cd40:	9802      	ldr	r0, [sp, #8]
   1cd42:	f1ba 0f00 	cmp.w	sl, #0
   1cd46:	f040 80ae 	bne.w	1cea6 <am_hal_ble_blocking_transfer.part.0+0x2ea>
   1cd4a:	2301      	movs	r3, #1
   1cd4c:	6463      	str	r3, [r4, #68]	; 0x44
   1cd4e:	f001 fe73 	bl	1ea38 <am_hal_interrupt_master_set>
   1cd52:	4b58      	ldr	r3, [pc, #352]	; (1ceb4 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
   1cd54:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   1cd58:	f36a 0241 	bfi	r2, sl, #1, #1
   1cd5c:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   1cd60:	e76b      	b.n	1cc3a <am_hal_ble_blocking_transfer.part.0+0x7e>
   1cd62:	2500      	movs	r5, #0
   1cd64:	46a9      	mov	r9, r5
   1cd66:	f896 e00a 	ldrb.w	lr, [r6, #10]
   1cd6a:	f896 c00c 	ldrb.w	ip, [r6, #12]
   1cd6e:	8930      	ldrh	r0, [r6, #8]
   1cd70:	4b53      	ldr	r3, [pc, #332]	; (1cec0 <am_hal_ble_blocking_transfer.part.0+0x304>)
   1cd72:	0151      	lsls	r1, r2, #5
   1cd74:	ea03 2a00 	and.w	sl, r3, r0, lsl #8
   1cd78:	f001 0b60 	and.w	fp, r1, #96	; 0x60
   1cd7c:	ea4e 13cc 	orr.w	r3, lr, ip, lsl #7
   1cd80:	ea43 030b 	orr.w	r3, r3, fp
   1cd84:	ea43 030a 	orr.w	r3, r3, sl
   1cd88:	ea43 0309 	orr.w	r3, r3, r9
   1cd8c:	f8df 9124 	ldr.w	r9, [pc, #292]	; 1ceb4 <am_hal_ble_blocking_transfer.part.0+0x2f8>
   1cd90:	f1be 0f01 	cmp.w	lr, #1
   1cd94:	f8c9 5214 	str.w	r5, [r9, #532]	; 0x214
   1cd98:	f8c9 320c 	str.w	r3, [r9, #524]	; 0x20c
   1cd9c:	f000 8131 	beq.w	1d002 <am_hal_ble_blocking_transfer.part.0+0x446>
   1cda0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1cda2:	f8b4 c014 	ldrh.w	ip, [r4, #20]
   1cda6:	f8df e110 	ldr.w	lr, [pc, #272]	; 1ceb8 <am_hal_ble_blocking_transfer.part.0+0x2fc>
   1cdaa:	4a42      	ldr	r2, [pc, #264]	; (1ceb4 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
   1cdac:	2500      	movs	r5, #0
   1cdae:	459c      	cmp	ip, r3
   1cdb0:	d924      	bls.n	1cdfc <am_hal_ble_blocking_transfer.part.0+0x240>
   1cdb2:	6821      	ldr	r1, [r4, #0]
   1cdb4:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
   1cdb8:	4571      	cmp	r1, lr
   1cdba:	d1fd      	bne.n	1cdb8 <am_hal_ble_blocking_transfer.part.0+0x1fc>
   1cdbc:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
   1cdc0:	f3c1 4107 	ubfx	r1, r1, #16, #8
   1cdc4:	2903      	cmp	r1, #3
   1cdc6:	d9f2      	bls.n	1cdae <am_hal_ble_blocking_transfer.part.0+0x1f2>
   1cdc8:	4561      	cmp	r1, ip
   1cdca:	f080 80a3 	bcs.w	1cf14 <am_hal_ble_blocking_transfer.part.0+0x358>
   1cdce:	68e0      	ldr	r0, [r4, #12]
   1cdd0:	f021 0103 	bic.w	r1, r1, #3
   1cdd4:	f023 0303 	bic.w	r3, r3, #3
   1cdd8:	eb00 0903 	add.w	r9, r0, r3
   1cddc:	464b      	mov	r3, r9
   1cdde:	f8d2 0108 	ldr.w	r0, [r2, #264]	; 0x108
   1cde2:	f843 0b04 	str.w	r0, [r3], #4
   1cde6:	eba3 0009 	sub.w	r0, r3, r9
   1cdea:	4288      	cmp	r0, r1
   1cdec:	f8c2 5108 	str.w	r5, [r2, #264]	; 0x108
   1cdf0:	d3f5      	bcc.n	1cdde <am_hal_ble_blocking_transfer.part.0+0x222>
   1cdf2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1cdf4:	440b      	add	r3, r1
   1cdf6:	459c      	cmp	ip, r3
   1cdf8:	63e3      	str	r3, [r4, #60]	; 0x3c
   1cdfa:	d8da      	bhi.n	1cdb2 <am_hal_ble_blocking_transfer.part.0+0x1f6>
   1cdfc:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 1ceb4 <am_hal_ble_blocking_transfer.part.0+0x2f8>
   1ce00:	9801      	ldr	r0, [sp, #4]
   1ce02:	f001 fe19 	bl	1ea38 <am_hal_interrupt_master_set>
   1ce06:	f8d9 3224 	ldr.w	r3, [r9, #548]	; 0x224
   1ce0a:	07da      	lsls	r2, r3, #31
   1ce0c:	bf58      	it	pl
   1ce0e:	f242 7510 	movwpl	r5, #10000	; 0x2710
   1ce12:	d503      	bpl.n	1ce1c <am_hal_ble_blocking_transfer.part.0+0x260>
   1ce14:	e009      	b.n	1ce2a <am_hal_ble_blocking_transfer.part.0+0x26e>
   1ce16:	3d01      	subs	r5, #1
   1ce18:	f000 80fc 	beq.w	1d014 <am_hal_ble_blocking_transfer.part.0+0x458>
   1ce1c:	2010      	movs	r0, #16
   1ce1e:	f001 fbf9 	bl	1e614 <am_hal_flash_delay>
   1ce22:	f8d9 3224 	ldr.w	r3, [r9, #548]	; 0x224
   1ce26:	07db      	lsls	r3, r3, #31
   1ce28:	d5f5      	bpl.n	1ce16 <am_hal_ble_blocking_transfer.part.0+0x25a>
   1ce2a:	4a22      	ldr	r2, [pc, #136]	; (1ceb4 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
   1ce2c:	f8d2 1228 	ldr.w	r1, [r2, #552]	; 0x228
   1ce30:	f041 0101 	orr.w	r1, r1, #1
   1ce34:	f8c2 1228 	str.w	r1, [r2, #552]	; 0x228
   1ce38:	f8d2 1228 	ldr.w	r1, [r2, #552]	; 0x228
   1ce3c:	2300      	movs	r3, #0
   1ce3e:	f041 0102 	orr.w	r1, r1, #2
   1ce42:	f8c2 1228 	str.w	r1, [r2, #552]	; 0x228
   1ce46:	60e3      	str	r3, [r4, #12]
   1ce48:	607b      	str	r3, [r7, #4]
   1ce4a:	60bb      	str	r3, [r7, #8]
   1ce4c:	60fb      	str	r3, [r7, #12]
   1ce4e:	613b      	str	r3, [r7, #16]
   1ce50:	617b      	str	r3, [r7, #20]
   1ce52:	63e3      	str	r3, [r4, #60]	; 0x3c
   1ce54:	7ab1      	ldrb	r1, [r6, #10]
   1ce56:	2901      	cmp	r1, #1
   1ce58:	f000 80c2 	beq.w	1cfe0 <am_hal_ble_blocking_transfer.part.0+0x424>
   1ce5c:	2902      	cmp	r1, #2
   1ce5e:	d104      	bne.n	1ce6a <am_hal_ble_blocking_transfer.part.0+0x2ae>
   1ce60:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   1ce64:	b10a      	cbz	r2, 1ce6a <am_hal_ble_blocking_transfer.part.0+0x2ae>
   1ce66:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1ce6a:	2300      	movs	r3, #0
   1ce6c:	4a11      	ldr	r2, [pc, #68]	; (1ceb4 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
   1ce6e:	4618      	mov	r0, r3
   1ce70:	f8c2 8220 	str.w	r8, [r2, #544]	; 0x220
   1ce74:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
   1ce78:	b005      	add	sp, #20
   1ce7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce7e:	7973      	ldrb	r3, [r6, #5]
   1ce80:	7935      	ldrb	r5, [r6, #4]
   1ce82:	ea4f 6903 	mov.w	r9, r3, lsl #24
   1ce86:	e76e      	b.n	1cd66 <am_hal_ble_blocking_transfer.part.0+0x1aa>
   1ce88:	7933      	ldrb	r3, [r6, #4]
   1ce8a:	2500      	movs	r5, #0
   1ce8c:	ea4f 6903 	mov.w	r9, r3, lsl #24
   1ce90:	e769      	b.n	1cd66 <am_hal_ble_blocking_transfer.part.0+0x1aa>
   1ce92:	88b5      	ldrh	r5, [r6, #4]
   1ce94:	79b3      	ldrb	r3, [r6, #6]
   1ce96:	ba6d      	rev16	r5, r5
   1ce98:	b2ad      	uxth	r5, r5
   1ce9a:	ea4f 6903 	mov.w	r9, r3, lsl #24
   1ce9e:	e762      	b.n	1cd66 <am_hal_ble_blocking_transfer.part.0+0x1aa>
   1cea0:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
   1cea4:	e747      	b.n	1cd36 <am_hal_ble_blocking_transfer.part.0+0x17a>
   1cea6:	f001 fdc7 	bl	1ea38 <am_hal_interrupt_master_set>
   1ceaa:	20a0      	movs	r0, #160	; 0xa0
   1ceac:	3501      	adds	r5, #1
   1ceae:	f001 fbb1 	bl	1e614 <am_hal_flash_delay>
   1ceb2:	e736      	b.n	1cd22 <am_hal_ble_blocking_transfer.part.0+0x166>
   1ceb4:	5000c000 	.word	0x5000c000
   1ceb8:	01775230 	.word	0x01775230
   1cebc:	08000001 	.word	0x08000001
   1cec0:	000fff00 	.word	0x000fff00
   1cec4:	f5b5 7f96 	cmp.w	r5, #300	; 0x12c
   1cec8:	d203      	bcs.n	1ced2 <am_hal_ble_blocking_transfer.part.0+0x316>
   1ceca:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   1cece:	0619      	lsls	r1, r3, #24
   1ced0:	d5eb      	bpl.n	1ceaa <am_hal_ble_blocking_transfer.part.0+0x2ee>
   1ced2:	6823      	ldr	r3, [r4, #0]
   1ced4:	4a6a      	ldr	r2, [pc, #424]	; (1d080 <am_hal_ble_blocking_transfer.part.0+0x4c4>)
   1ced6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1ceda:	4293      	cmp	r3, r2
   1cedc:	4b69      	ldr	r3, [pc, #420]	; (1d084 <am_hal_ble_blocking_transfer.part.0+0x4c8>)
   1cede:	f040 809b 	bne.w	1d018 <am_hal_ble_blocking_transfer.part.0+0x45c>
   1cee2:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   1cee6:	4868      	ldr	r0, [pc, #416]	; (1d088 <am_hal_ble_blocking_transfer.part.0+0x4cc>)
   1cee8:	2102      	movs	r1, #2
   1ceea:	f361 0283 	bfi	r2, r1, #2, #2
   1ceee:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   1cef2:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   1cef6:	f36f 0241 	bfc	r2, #1, #1
   1cefa:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   1cefe:	f8c3 8220 	str.w	r8, [r3, #544]	; 0x220
   1cf02:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   1cf06:	f361 0283 	bfi	r2, r1, #2, #2
   1cf0a:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   1cf0e:	b005      	add	sp, #20
   1cf10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cf14:	ebac 0103 	sub.w	r1, ip, r3
   1cf18:	68e0      	ldr	r0, [r4, #12]
   1cf1a:	f023 0303 	bic.w	r3, r3, #3
   1cf1e:	e75b      	b.n	1cdd8 <am_hal_ble_blocking_transfer.part.0+0x21c>
   1cf20:	7ab3      	ldrb	r3, [r6, #10]
   1cf22:	2b01      	cmp	r3, #1
   1cf24:	f47f af3c 	bne.w	1cda0 <am_hal_ble_blocking_transfer.part.0+0x1e4>
   1cf28:	f8b4 9014 	ldrh.w	r9, [r4, #20]
   1cf2c:	68e5      	ldr	r5, [r4, #12]
   1cf2e:	f8df b154 	ldr.w	fp, [pc, #340]	; 1d084 <am_hal_ble_blocking_transfer.part.0+0x4c8>
   1cf32:	f1b9 0f00 	cmp.w	r9, #0
   1cf36:	d019      	beq.n	1cf6c <am_hal_ble_blocking_transfer.part.0+0x3b0>
   1cf38:	f8db 3100 	ldr.w	r3, [fp, #256]	; 0x100
   1cf3c:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1cf40:	2b03      	cmp	r3, #3
   1cf42:	d835      	bhi.n	1cfb0 <am_hal_ble_blocking_transfer.part.0+0x3f4>
   1cf44:	f8df a14c 	ldr.w	sl, [pc, #332]	; 1d094 <am_hal_ble_blocking_transfer.part.0+0x4d8>
   1cf48:	e00a      	b.n	1cf60 <am_hal_ble_blocking_transfer.part.0+0x3a4>
   1cf4a:	f1ba 0a01 	subs.w	sl, sl, #1
   1cf4e:	d00d      	beq.n	1cf6c <am_hal_ble_blocking_transfer.part.0+0x3b0>
   1cf50:	f001 fb60 	bl	1e614 <am_hal_flash_delay>
   1cf54:	f8db 3100 	ldr.w	r3, [fp, #256]	; 0x100
   1cf58:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1cf5c:	2b03      	cmp	r3, #3
   1cf5e:	d827      	bhi.n	1cfb0 <am_hal_ble_blocking_transfer.part.0+0x3f4>
   1cf60:	f8db 3224 	ldr.w	r3, [fp, #548]	; 0x224
   1cf64:	07db      	lsls	r3, r3, #31
   1cf66:	f04f 0010 	mov.w	r0, #16
   1cf6a:	d5ee      	bpl.n	1cf4a <am_hal_ble_blocking_transfer.part.0+0x38e>
   1cf6c:	f8df 9114 	ldr.w	r9, [pc, #276]	; 1d084 <am_hal_ble_blocking_transfer.part.0+0x4c8>
   1cf70:	f8d9 3224 	ldr.w	r3, [r9, #548]	; 0x224
   1cf74:	07d8      	lsls	r0, r3, #31
   1cf76:	bf58      	it	pl
   1cf78:	f44f 65fa 	movpl.w	r5, #2000	; 0x7d0
   1cf7c:	d408      	bmi.n	1cf90 <am_hal_ble_blocking_transfer.part.0+0x3d4>
   1cf7e:	2010      	movs	r0, #16
   1cf80:	f001 fb48 	bl	1e614 <am_hal_flash_delay>
   1cf84:	f8d9 3224 	ldr.w	r3, [r9, #548]	; 0x224
   1cf88:	07d9      	lsls	r1, r3, #31
   1cf8a:	d401      	bmi.n	1cf90 <am_hal_ble_blocking_transfer.part.0+0x3d4>
   1cf8c:	3d01      	subs	r5, #1
   1cf8e:	d1f6      	bne.n	1cf7e <am_hal_ble_blocking_transfer.part.0+0x3c2>
   1cf90:	6823      	ldr	r3, [r4, #0]
   1cf92:	4a3b      	ldr	r2, [pc, #236]	; (1d080 <am_hal_ble_blocking_transfer.part.0+0x4c4>)
   1cf94:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1cf98:	4293      	cmp	r3, r2
   1cf9a:	f47f af2f 	bne.w	1cdfc <am_hal_ble_blocking_transfer.part.0+0x240>
   1cf9e:	4b39      	ldr	r3, [pc, #228]	; (1d084 <am_hal_ble_blocking_transfer.part.0+0x4c8>)
   1cfa0:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   1cfa4:	2102      	movs	r1, #2
   1cfa6:	f361 0283 	bfi	r2, r1, #2, #2
   1cfaa:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   1cfae:	e725      	b.n	1cdfc <am_hal_ble_blocking_transfer.part.0+0x240>
   1cfb0:	f009 0003 	and.w	r0, r9, #3
   1cfb4:	462a      	mov	r2, r5
   1cfb6:	f852 1b04 	ldr.w	r1, [r2], #4
   1cfba:	f8cb 110c 	str.w	r1, [fp, #268]	; 0x10c
   1cfbe:	4581      	cmp	r9, r0
   1cfc0:	eba5 0102 	sub.w	r1, r5, r2
   1cfc4:	4419      	add	r1, r3
   1cfc6:	f1a9 0904 	sub.w	r9, r9, #4
   1cfca:	d005      	beq.n	1cfd8 <am_hal_ble_blocking_transfer.part.0+0x41c>
   1cfcc:	2903      	cmp	r1, #3
   1cfce:	d905      	bls.n	1cfdc <am_hal_ble_blocking_transfer.part.0+0x420>
   1cfd0:	f1b9 0f00 	cmp.w	r9, #0
   1cfd4:	d1ef      	bne.n	1cfb6 <am_hal_ble_blocking_transfer.part.0+0x3fa>
   1cfd6:	e7c9      	b.n	1cf6c <am_hal_ble_blocking_transfer.part.0+0x3b0>
   1cfd8:	f04f 0900 	mov.w	r9, #0
   1cfdc:	4615      	mov	r5, r2
   1cfde:	e7a8      	b.n	1cf32 <am_hal_ble_blocking_transfer.part.0+0x376>
   1cfe0:	6823      	ldr	r3, [r4, #0]
   1cfe2:	4927      	ldr	r1, [pc, #156]	; (1d080 <am_hal_ble_blocking_transfer.part.0+0x4c4>)
   1cfe4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1cfe8:	428b      	cmp	r3, r1
   1cfea:	d106      	bne.n	1cffa <am_hal_ble_blocking_transfer.part.0+0x43e>
   1cfec:	f8b2 3304 	ldrh.w	r3, [r2, #772]	; 0x304
   1cff0:	2102      	movs	r1, #2
   1cff2:	f361 0383 	bfi	r3, r1, #2, #2
   1cff6:	f8a2 3304 	strh.w	r3, [r2, #772]	; 0x304
   1cffa:	2301      	movs	r3, #1
   1cffc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1d000:	e733      	b.n	1ce6a <am_hal_ble_blocking_transfer.part.0+0x2ae>
   1d002:	f8b4 9014 	ldrh.w	r9, [r4, #20]
   1d006:	68e5      	ldr	r5, [r4, #12]
   1d008:	2a03      	cmp	r2, #3
   1d00a:	d890      	bhi.n	1cf2e <am_hal_ble_blocking_transfer.part.0+0x372>
   1d00c:	e8df f002 	tbb	[pc, r2]
   1d010:	2a303417 	.word	0x2a303417
   1d014:	481d      	ldr	r0, [pc, #116]	; (1d08c <am_hal_ble_blocking_transfer.part.0+0x4d0>)
   1d016:	e63a      	b.n	1cc8e <am_hal_ble_blocking_transfer.part.0+0xd2>
   1d018:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   1d01c:	481a      	ldr	r0, [pc, #104]	; (1d088 <am_hal_ble_blocking_transfer.part.0+0x4cc>)
   1d01e:	f36f 0241 	bfc	r2, #1, #1
   1d022:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   1d026:	f8c3 8220 	str.w	r8, [r3, #544]	; 0x220
   1d02a:	e630      	b.n	1cc8e <am_hal_ble_blocking_transfer.part.0+0xd2>
   1d02c:	f64b 3080 	movw	r0, #48000	; 0xbb80
   1d030:	f001 faf0 	bl	1e614 <am_hal_flash_delay>
   1d034:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   1d038:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
   1d03c:	e656      	b.n	1ccec <am_hal_ble_blocking_transfer.part.0+0x130>
   1d03e:	2200      	movs	r2, #0
   1d040:	4613      	mov	r3, r2
   1d042:	f001 0160 	and.w	r1, r1, #96	; 0x60
   1d046:	ea43 13cc 	orr.w	r3, r3, ip, lsl #7
   1d04a:	430b      	orrs	r3, r1
   1d04c:	4910      	ldr	r1, [pc, #64]	; (1d090 <am_hal_ble_blocking_transfer.part.0+0x4d4>)
   1d04e:	ea01 2000 	and.w	r0, r1, r0, lsl #8
   1d052:	4303      	orrs	r3, r0
   1d054:	490b      	ldr	r1, [pc, #44]	; (1d084 <am_hal_ble_blocking_transfer.part.0+0x4c8>)
   1d056:	f043 0301 	orr.w	r3, r3, #1
   1d05a:	f8c1 2214 	str.w	r2, [r1, #532]	; 0x214
   1d05e:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
   1d062:	e764      	b.n	1cf2e <am_hal_ble_blocking_transfer.part.0+0x372>
   1d064:	88b2      	ldrh	r2, [r6, #4]
   1d066:	79b3      	ldrb	r3, [r6, #6]
   1d068:	ba52      	rev16	r2, r2
   1d06a:	b292      	uxth	r2, r2
   1d06c:	061b      	lsls	r3, r3, #24
   1d06e:	e7e8      	b.n	1d042 <am_hal_ble_blocking_transfer.part.0+0x486>
   1d070:	7973      	ldrb	r3, [r6, #5]
   1d072:	7932      	ldrb	r2, [r6, #4]
   1d074:	061b      	lsls	r3, r3, #24
   1d076:	e7e4      	b.n	1d042 <am_hal_ble_blocking_transfer.part.0+0x486>
   1d078:	7933      	ldrb	r3, [r6, #4]
   1d07a:	2200      	movs	r2, #0
   1d07c:	061b      	lsls	r3, r3, #24
   1d07e:	e7e0      	b.n	1d042 <am_hal_ble_blocking_transfer.part.0+0x486>
   1d080:	01775230 	.word	0x01775230
   1d084:	5000c000 	.word	0x5000c000
   1d088:	08000002 	.word	0x08000002
   1d08c:	08000009 	.word	0x08000009
   1d090:	000fff00 	.word	0x000fff00
   1d094:	0007a121 	.word	0x0007a121

0001d098 <am_hal_ble_initialize>:
   1d098:	bb58      	cbnz	r0, 1d0f2 <am_hal_ble_initialize+0x5a>
   1d09a:	b361      	cbz	r1, 1d0f6 <am_hal_ble_initialize+0x5e>
   1d09c:	4b17      	ldr	r3, [pc, #92]	; (1d0fc <am_hal_ble_initialize+0x64>)
   1d09e:	78d8      	ldrb	r0, [r3, #3]
   1d0a0:	b410      	push	{r4}
   1d0a2:	f3c0 0400 	ubfx	r4, r0, #0, #1
   1d0a6:	f010 0001 	ands.w	r0, r0, #1
   1d0aa:	d11e      	bne.n	1d0ea <am_hal_ble_initialize+0x52>
   1d0ac:	681a      	ldr	r2, [r3, #0]
   1d0ae:	f883 4047 	strb.w	r4, [r3, #71]	; 0x47
   1d0b2:	e9c3 0004 	strd	r0, r0, [r3, #16]
   1d0b6:	e9c3 0006 	strd	r0, r0, [r3, #24]
   1d0ba:	e9c3 000a 	strd	r0, r0, [r3, #40]	; 0x28
   1d0be:	e9c3 000c 	strd	r0, r0, [r3, #48]	; 0x30
   1d0c2:	721c      	strb	r4, [r3, #8]
   1d0c4:	4c0e      	ldr	r4, [pc, #56]	; (1d100 <am_hal_ble_initialize+0x68>)
   1d0c6:	60d8      	str	r0, [r3, #12]
   1d0c8:	f002 427e 	and.w	r2, r2, #4261412864	; 0xfe000000
   1d0cc:	6258      	str	r0, [r3, #36]	; 0x24
   1d0ce:	6218      	str	r0, [r3, #32]
   1d0d0:	4314      	orrs	r4, r2
   1d0d2:	6398      	str	r0, [r3, #56]	; 0x38
   1d0d4:	601c      	str	r4, [r3, #0]
   1d0d6:	63d8      	str	r0, [r3, #60]	; 0x3c
   1d0d8:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
   1d0dc:	f8c3 0043 	str.w	r0, [r3, #67]	; 0x43
   1d0e0:	6058      	str	r0, [r3, #4]
   1d0e2:	f85d 4b04 	ldr.w	r4, [sp], #4
   1d0e6:	600b      	str	r3, [r1, #0]
   1d0e8:	4770      	bx	lr
   1d0ea:	2007      	movs	r0, #7
   1d0ec:	f85d 4b04 	ldr.w	r4, [sp], #4
   1d0f0:	4770      	bx	lr
   1d0f2:	2005      	movs	r0, #5
   1d0f4:	4770      	bx	lr
   1d0f6:	2006      	movs	r0, #6
   1d0f8:	4770      	bx	lr
   1d0fa:	bf00      	nop
   1d0fc:	10009cc0 	.word	0x10009cc0
   1d100:	01775230 	.word	0x01775230

0001d104 <am_hal_ble_deinitialize>:
   1d104:	b128      	cbz	r0, 1d112 <am_hal_ble_deinitialize+0xe>
   1d106:	6803      	ldr	r3, [r0, #0]
   1d108:	4a0d      	ldr	r2, [pc, #52]	; (1d140 <am_hal_ble_deinitialize+0x3c>)
   1d10a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1d10e:	4293      	cmp	r3, r2
   1d110:	d001      	beq.n	1d116 <am_hal_ble_deinitialize+0x12>
   1d112:	2002      	movs	r0, #2
   1d114:	4770      	bx	lr
   1d116:	6802      	ldr	r2, [r0, #0]
   1d118:	2300      	movs	r3, #0
   1d11a:	f002 427e 	and.w	r2, r2, #4261412864	; 0xfe000000
   1d11e:	e9c0 2300 	strd	r2, r3, [r0]
   1d122:	60c3      	str	r3, [r0, #12]
   1d124:	6103      	str	r3, [r0, #16]
   1d126:	6143      	str	r3, [r0, #20]
   1d128:	6183      	str	r3, [r0, #24]
   1d12a:	61c3      	str	r3, [r0, #28]
   1d12c:	6203      	str	r3, [r0, #32]
   1d12e:	63c3      	str	r3, [r0, #60]	; 0x3c
   1d130:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
   1d134:	f8c0 3043 	str.w	r3, [r0, #67]	; 0x43
   1d138:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
   1d13c:	4618      	mov	r0, r3
   1d13e:	4770      	bx	lr
   1d140:	01775230 	.word	0x01775230

0001d144 <am_hal_ble_config>:
   1d144:	2800      	cmp	r0, #0
   1d146:	d04e      	beq.n	1d1e6 <am_hal_ble_config+0xa2>
   1d148:	6803      	ldr	r3, [r0, #0]
   1d14a:	4a3e      	ldr	r2, [pc, #248]	; (1d244 <am_hal_ble_config+0x100>)
   1d14c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1d150:	4293      	cmp	r3, r2
   1d152:	d148      	bne.n	1d1e6 <am_hal_ble_config+0xa2>
   1d154:	b470      	push	{r4, r5, r6}
   1d156:	4b3c      	ldr	r3, [pc, #240]	; (1d248 <am_hal_ble_config+0x104>)
   1d158:	6844      	ldr	r4, [r0, #4]
   1d15a:	2203      	movs	r2, #3
   1d15c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   1d160:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   1d164:	f36f 4251 	bfc	r2, #17, #1
   1d168:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   1d16c:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   1d170:	f36f 4210 	bfc	r2, #16, #1
   1d174:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   1d178:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   1d17c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   1d180:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   1d184:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
   1d188:	6888      	ldr	r0, [r1, #8]
   1d18a:	f360 220d 	bfi	r2, r0, #8, #6
   1d18e:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
   1d192:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
   1d196:	6848      	ldr	r0, [r1, #4]
   1d198:	f360 0205 	bfi	r2, r0, #0, #6
   1d19c:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
   1d1a0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1d1a4:	f042 0201 	orr.w	r2, r2, #1
   1d1a8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1d1ac:	680b      	ldr	r3, [r1, #0]
   1d1ae:	68c8      	ldr	r0, [r1, #12]
   1d1b0:	4a25      	ldr	r2, [pc, #148]	; (1d248 <am_hal_ble_config+0x104>)
   1d1b2:	021b      	lsls	r3, r3, #8
   1d1b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   1d1b8:	2802      	cmp	r0, #2
   1d1ba:	bf08      	it	eq
   1d1bc:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
   1d1c0:	f043 0301 	orr.w	r3, r3, #1
   1d1c4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
   1d1c8:	4b20      	ldr	r3, [pc, #128]	; (1d24c <am_hal_ble_config+0x108>)
   1d1ca:	68db      	ldr	r3, [r3, #12]
   1d1cc:	b2db      	uxtb	r3, r3
   1d1ce:	2b12      	cmp	r3, #18
   1d1d0:	d00b      	beq.n	1d1ea <am_hal_ble_config+0xa6>
   1d1d2:	4b1f      	ldr	r3, [pc, #124]	; (1d250 <am_hal_ble_config+0x10c>)
   1d1d4:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   1d1d8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   1d1dc:	7e8b      	ldrb	r3, [r1, #26]
   1d1de:	7223      	strb	r3, [r4, #8]
   1d1e0:	2000      	movs	r0, #0
   1d1e2:	bc70      	pop	{r4, r5, r6}
   1d1e4:	4770      	bx	lr
   1d1e6:	2002      	movs	r0, #2
   1d1e8:	4770      	bx	lr
   1d1ea:	4e1a      	ldr	r6, [pc, #104]	; (1d254 <am_hal_ble_config+0x110>)
   1d1ec:	68f2      	ldr	r2, [r6, #12]
   1d1ee:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
   1d1f2:	690b      	ldr	r3, [r1, #16]
   1d1f4:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
   1d1f8:	690b      	ldr	r3, [r1, #16]
   1d1fa:	0a1b      	lsrs	r3, r3, #8
   1d1fc:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
   1d200:	694b      	ldr	r3, [r1, #20]
   1d202:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
   1d206:	694b      	ldr	r3, [r1, #20]
   1d208:	0a1b      	lsrs	r3, r3, #8
   1d20a:	f882 3027 	strb.w	r3, [r2, #39]	; 0x27
   1d20e:	7e4b      	ldrb	r3, [r1, #25]
   1d210:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
   1d214:	7e0b      	ldrb	r3, [r1, #24]
   1d216:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
   1d21a:	6873      	ldr	r3, [r6, #4]
   1d21c:	b183      	cbz	r3, 1d240 <am_hal_ble_config+0xfc>
   1d21e:	3b01      	subs	r3, #1
   1d220:	4d0d      	ldr	r5, [pc, #52]	; (1d258 <am_hal_ble_config+0x114>)
   1d222:	eb02 0c03 	add.w	ip, r2, r3
   1d226:	3a01      	subs	r2, #1
   1d228:	2300      	movs	r3, #0
   1d22a:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   1d22e:	ea80 2013 	eor.w	r0, r0, r3, lsr #8
   1d232:	4562      	cmp	r2, ip
   1d234:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
   1d238:	ea80 2303 	eor.w	r3, r0, r3, lsl #8
   1d23c:	b29b      	uxth	r3, r3
   1d23e:	d1f4      	bne.n	1d22a <am_hal_ble_config+0xe6>
   1d240:	60b3      	str	r3, [r6, #8]
   1d242:	e7c6      	b.n	1d1d2 <am_hal_ble_config+0x8e>
   1d244:	01775230 	.word	0x01775230
   1d248:	5000c000 	.word	0x5000c000
   1d24c:	40020000 	.word	0x40020000
   1d250:	10009cc0 	.word	0x10009cc0
   1d254:	10002c8c 	.word	0x10002c8c
   1d258:	00020744 	.word	0x00020744

0001d25c <am_hal_ble_power_control>:
   1d25c:	b538      	push	{r3, r4, r5, lr}
   1d25e:	2800      	cmp	r0, #0
   1d260:	f000 8086 	beq.w	1d370 <am_hal_ble_power_control+0x114>
   1d264:	6803      	ldr	r3, [r0, #0]
   1d266:	4a50      	ldr	r2, [pc, #320]	; (1d3a8 <am_hal_ble_power_control+0x14c>)
   1d268:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1d26c:	4293      	cmp	r3, r2
   1d26e:	d17f      	bne.n	1d370 <am_hal_ble_power_control+0x114>
   1d270:	2900      	cmp	r1, #0
   1d272:	d154      	bne.n	1d31e <am_hal_ble_power_control+0xc2>
   1d274:	4b4d      	ldr	r3, [pc, #308]	; (1d3ac <am_hal_ble_power_control+0x150>)
   1d276:	699b      	ldr	r3, [r3, #24]
   1d278:	05db      	lsls	r3, r3, #23
   1d27a:	d44d      	bmi.n	1d318 <am_hal_ble_power_control+0xbc>
   1d27c:	4d4c      	ldr	r5, [pc, #304]	; (1d3b0 <am_hal_ble_power_control+0x154>)
   1d27e:	69ab      	ldr	r3, [r5, #24]
   1d280:	f043 0301 	orr.w	r3, r3, #1
   1d284:	61ab      	str	r3, [r5, #24]
   1d286:	69ab      	ldr	r3, [r5, #24]
   1d288:	f003 0307 	and.w	r3, r3, #7
   1d28c:	2b07      	cmp	r3, #7
   1d28e:	d00c      	beq.n	1d2aa <am_hal_ble_power_control+0x4e>
   1d290:	4c48      	ldr	r4, [pc, #288]	; (1d3b4 <am_hal_ble_power_control+0x158>)
   1d292:	e002      	b.n	1d29a <am_hal_ble_power_control+0x3e>
   1d294:	3c01      	subs	r4, #1
   1d296:	f000 8083 	beq.w	1d3a0 <am_hal_ble_power_control+0x144>
   1d29a:	2010      	movs	r0, #16
   1d29c:	f001 f9ba 	bl	1e614 <am_hal_flash_delay>
   1d2a0:	69ab      	ldr	r3, [r5, #24]
   1d2a2:	f003 0307 	and.w	r3, r3, #7
   1d2a6:	2b07      	cmp	r3, #7
   1d2a8:	d1f4      	bne.n	1d294 <am_hal_ble_power_control+0x38>
   1d2aa:	200e      	movs	r0, #14
   1d2ac:	f001 fc64 	bl	1eb78 <am_hal_pwrctrl_periph_enable>
   1d2b0:	2800      	cmp	r0, #0
   1d2b2:	d173      	bne.n	1d39c <am_hal_ble_power_control+0x140>
   1d2b4:	4b40      	ldr	r3, [pc, #256]	; (1d3b8 <am_hal_ble_power_control+0x15c>)
   1d2b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1d2ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   1d2be:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
   1d2c2:	4a3b      	ldr	r2, [pc, #236]	; (1d3b0 <am_hal_ble_power_control+0x154>)
   1d2c4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   1d2c8:	f360 01df 	bfi	r1, r0, #3, #29
   1d2cc:	f8c3 1410 	str.w	r1, [r3, #1040]	; 0x410
   1d2d0:	68d3      	ldr	r3, [r2, #12]
   1d2d2:	b2db      	uxtb	r3, r3
   1d2d4:	2b11      	cmp	r3, #17
   1d2d6:	d85a      	bhi.n	1d38e <am_hal_ble_power_control+0x132>
   1d2d8:	2304      	movs	r3, #4
   1d2da:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
   1d2de:	4d36      	ldr	r5, [pc, #216]	; (1d3b8 <am_hal_ble_power_control+0x15c>)
   1d2e0:	4836      	ldr	r0, [pc, #216]	; (1d3bc <am_hal_ble_power_control+0x160>)
   1d2e2:	f001 f997 	bl	1e614 <am_hal_flash_delay>
   1d2e6:	f8b5 3304 	ldrh.w	r3, [r5, #772]	; 0x304
   1d2ea:	f043 0301 	orr.w	r3, r3, #1
   1d2ee:	f8a5 3304 	strh.w	r3, [r5, #772]	; 0x304
   1d2f2:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   1d2f6:	f3c3 2302 	ubfx	r3, r3, #8, #3
   1d2fa:	2b03      	cmp	r3, #3
   1d2fc:	d00c      	beq.n	1d318 <am_hal_ble_power_control+0xbc>
   1d2fe:	4c30      	ldr	r4, [pc, #192]	; (1d3c0 <am_hal_ble_power_control+0x164>)
   1d300:	e001      	b.n	1d306 <am_hal_ble_power_control+0xaa>
   1d302:	3c01      	subs	r4, #1
   1d304:	d04e      	beq.n	1d3a4 <am_hal_ble_power_control+0x148>
   1d306:	2010      	movs	r0, #16
   1d308:	f001 f984 	bl	1e614 <am_hal_flash_delay>
   1d30c:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   1d310:	f3c3 2302 	ubfx	r3, r3, #8, #3
   1d314:	2b03      	cmp	r3, #3
   1d316:	d1f4      	bne.n	1d302 <am_hal_ble_power_control+0xa6>
   1d318:	2400      	movs	r4, #0
   1d31a:	4620      	mov	r0, r4
   1d31c:	bd38      	pop	{r3, r4, r5, pc}
   1d31e:	2901      	cmp	r1, #1
   1d320:	d129      	bne.n	1d376 <am_hal_ble_power_control+0x11a>
   1d322:	4b25      	ldr	r3, [pc, #148]	; (1d3b8 <am_hal_ble_power_control+0x15c>)
   1d324:	4a22      	ldr	r2, [pc, #136]	; (1d3b0 <am_hal_ble_power_control+0x154>)
   1d326:	2100      	movs	r1, #0
   1d328:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
   1d32c:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
   1d330:	f361 00df 	bfi	r0, r1, #3, #29
   1d334:	f8c3 0410 	str.w	r0, [r3, #1040]	; 0x410
   1d338:	68d3      	ldr	r3, [r2, #12]
   1d33a:	b2db      	uxtb	r3, r3
   1d33c:	2b11      	cmp	r3, #17
   1d33e:	d91d      	bls.n	1d37c <am_hal_ble_power_control+0x120>
   1d340:	f892 3198 	ldrb.w	r3, [r2, #408]	; 0x198
   1d344:	f361 1345 	bfi	r3, r1, #5, #1
   1d348:	f882 3198 	strb.w	r3, [r2, #408]	; 0x198
   1d34c:	4b1a      	ldr	r3, [pc, #104]	; (1d3b8 <am_hal_ble_power_control+0x15c>)
   1d34e:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   1d352:	f36f 0200 	bfc	r2, #0, #1
   1d356:	200e      	movs	r0, #14
   1d358:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   1d35c:	f001 fc36 	bl	1ebcc <am_hal_pwrctrl_periph_disable>
   1d360:	4604      	mov	r4, r0
   1d362:	b990      	cbnz	r0, 1d38a <am_hal_ble_power_control+0x12e>
   1d364:	f44f 60c8 	mov.w	r0, #1600	; 0x640
   1d368:	f001 f954 	bl	1e614 <am_hal_flash_delay>
   1d36c:	4620      	mov	r0, r4
   1d36e:	bd38      	pop	{r3, r4, r5, pc}
   1d370:	2402      	movs	r4, #2
   1d372:	4620      	mov	r0, r4
   1d374:	bd38      	pop	{r3, r4, r5, pc}
   1d376:	2407      	movs	r4, #7
   1d378:	4620      	mov	r0, r4
   1d37a:	bd38      	pop	{r3, r4, r5, pc}
   1d37c:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
   1d380:	f023 0304 	bic.w	r3, r3, #4
   1d384:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
   1d388:	e7e0      	b.n	1d34c <am_hal_ble_power_control+0xf0>
   1d38a:	4c0e      	ldr	r4, [pc, #56]	; (1d3c4 <am_hal_ble_power_control+0x168>)
   1d38c:	e7c5      	b.n	1d31a <am_hal_ble_power_control+0xbe>
   1d38e:	f892 3198 	ldrb.w	r3, [r2, #408]	; 0x198
   1d392:	f043 0320 	orr.w	r3, r3, #32
   1d396:	f882 3198 	strb.w	r3, [r2, #408]	; 0x198
   1d39a:	e7a0      	b.n	1d2de <am_hal_ble_power_control+0x82>
   1d39c:	4c0a      	ldr	r4, [pc, #40]	; (1d3c8 <am_hal_ble_power_control+0x16c>)
   1d39e:	e7bc      	b.n	1d31a <am_hal_ble_power_control+0xbe>
   1d3a0:	4c0a      	ldr	r4, [pc, #40]	; (1d3cc <am_hal_ble_power_control+0x170>)
   1d3a2:	e7ba      	b.n	1d31a <am_hal_ble_power_control+0xbe>
   1d3a4:	4c0a      	ldr	r4, [pc, #40]	; (1d3d0 <am_hal_ble_power_control+0x174>)
   1d3a6:	e7b8      	b.n	1d31a <am_hal_ble_power_control+0xbe>
   1d3a8:	01775230 	.word	0x01775230
   1d3ac:	40021000 	.word	0x40021000
   1d3b0:	40020000 	.word	0x40020000
   1d3b4:	000186a0 	.word	0x000186a0
   1d3b8:	5000c000 	.word	0x5000c000
   1d3bc:	00013880 	.word	0x00013880
   1d3c0:	000f4240 	.word	0x000f4240
   1d3c4:	08000006 	.word	0x08000006
   1d3c8:	08000007 	.word	0x08000007
   1d3cc:	08000005 	.word	0x08000005
   1d3d0:	08000008 	.word	0x08000008

0001d3d4 <am_hal_ble_patch_apply>:
   1d3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d3d8:	b093      	sub	sp, #76	; 0x4c
   1d3da:	2800      	cmp	r0, #0
   1d3dc:	d05c      	beq.n	1d498 <am_hal_ble_patch_apply+0xc4>
   1d3de:	6803      	ldr	r3, [r0, #0]
   1d3e0:	4ab7      	ldr	r2, [pc, #732]	; (1d6c0 <am_hal_ble_patch_apply+0x2ec>)
   1d3e2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1d3e6:	4293      	cmp	r3, r2
   1d3e8:	4605      	mov	r5, r0
   1d3ea:	d155      	bne.n	1d498 <am_hal_ble_patch_apply+0xc4>
   1d3ec:	4688      	mov	r8, r1
   1d3ee:	6809      	ldr	r1, [r1, #0]
   1d3f0:	f8b8 2004 	ldrh.w	r2, [r8, #4]
   1d3f4:	f88d 1009 	strb.w	r1, [sp, #9]
   1d3f8:	2001      	movs	r0, #1
   1d3fa:	f240 21f1 	movw	r1, #753	; 0x2f1
   1d3fe:	f8df a2d4 	ldr.w	sl, [pc, #724]	; 1d6d4 <am_hal_ble_patch_apply+0x300>
   1d402:	f88d 0008 	strb.w	r0, [sp, #8]
   1d406:	f8ad 100a 	strh.w	r1, [sp, #10]
   1d40a:	f8ad 200c 	strh.w	r2, [sp, #12]
   1d40e:	f241 3788 	movw	r7, #5000	; 0x1388
   1d412:	2400      	movs	r4, #0
   1d414:	4699      	mov	r9, r3
   1d416:	aa02      	add	r2, sp, #8
   1d418:	454b      	cmp	r3, r9
   1d41a:	e9cd 240c 	strd	r2, r4, [sp, #48]	; 0x30
   1d41e:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
   1d422:	a90c      	add	r1, sp, #48	; 0x30
   1d424:	4628      	mov	r0, r5
   1d426:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
   1d42a:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
   1d42e:	d014      	beq.n	1d45a <am_hal_ble_patch_apply+0x86>
   1d430:	4ba4      	ldr	r3, [pc, #656]	; (1d6c4 <am_hal_ble_patch_apply+0x2f0>)
   1d432:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   1d436:	061b      	lsls	r3, r3, #24
   1d438:	d41a      	bmi.n	1d470 <am_hal_ble_patch_apply+0x9c>
   1d43a:	4ea3      	ldr	r6, [pc, #652]	; (1d6c8 <am_hal_ble_patch_apply+0x2f4>)
   1d43c:	4ca1      	ldr	r4, [pc, #644]	; (1d6c4 <am_hal_ble_patch_apply+0x2f0>)
   1d43e:	2010      	movs	r0, #16
   1d440:	f001 f8e8 	bl	1e614 <am_hal_flash_delay>
   1d444:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   1d448:	061f      	lsls	r7, r3, #24
   1d44a:	d411      	bmi.n	1d470 <am_hal_ble_patch_apply+0x9c>
   1d44c:	3e01      	subs	r6, #1
   1d44e:	d1f6      	bne.n	1d43e <am_hal_ble_patch_apply+0x6a>
   1d450:	4e9e      	ldr	r6, [pc, #632]	; (1d6cc <am_hal_ble_patch_apply+0x2f8>)
   1d452:	4630      	mov	r0, r6
   1d454:	b013      	add	sp, #76	; 0x4c
   1d456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d45a:	f7ff fbaf 	bl	1cbbc <am_hal_ble_blocking_transfer.part.0>
   1d45e:	4606      	mov	r6, r0
   1d460:	2800      	cmp	r0, #0
   1d462:	d0e5      	beq.n	1d430 <am_hal_ble_patch_apply+0x5c>
   1d464:	3f01      	subs	r7, #1
   1d466:	d0f4      	beq.n	1d452 <am_hal_ble_patch_apply+0x7e>
   1d468:	682b      	ldr	r3, [r5, #0]
   1d46a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1d46e:	e7d2      	b.n	1d416 <am_hal_ble_patch_apply+0x42>
   1d470:	2300      	movs	r3, #0
   1d472:	e9cd 3307 	strd	r3, r3, [sp, #28]
   1d476:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   1d47a:	930b      	str	r3, [sp, #44]	; 0x2c
   1d47c:	2302      	movs	r3, #2
   1d47e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   1d482:	2305      	movs	r3, #5
   1d484:	f8ad 3020 	strh.w	r3, [sp, #32]
   1d488:	682b      	ldr	r3, [r5, #0]
   1d48a:	f023 4b7e 	bic.w	fp, r3, #4261412864	; 0xfe000000
   1d48e:	4b8c      	ldr	r3, [pc, #560]	; (1d6c0 <am_hal_ble_patch_apply+0x2ec>)
   1d490:	aa02      	add	r2, sp, #8
   1d492:	459b      	cmp	fp, r3
   1d494:	9206      	str	r2, [sp, #24]
   1d496:	d004      	beq.n	1d4a2 <am_hal_ble_patch_apply+0xce>
   1d498:	2602      	movs	r6, #2
   1d49a:	4630      	mov	r0, r6
   1d49c:	b013      	add	sp, #76	; 0x4c
   1d49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d4a2:	a906      	add	r1, sp, #24
   1d4a4:	4628      	mov	r0, r5
   1d4a6:	f7ff fb89 	bl	1cbbc <am_hal_ble_blocking_transfer.part.0>
   1d4aa:	4606      	mov	r6, r0
   1d4ac:	2800      	cmp	r0, #0
   1d4ae:	d1d0      	bne.n	1d452 <am_hal_ble_patch_apply+0x7e>
   1d4b0:	f89d 1008 	ldrb.w	r1, [sp, #8]
   1d4b4:	f8d8 3000 	ldr.w	r3, [r8]
   1d4b8:	2904      	cmp	r1, #4
   1d4ba:	b2da      	uxtb	r2, r3
   1d4bc:	f040 80fb 	bne.w	1d6b6 <am_hal_ble_patch_apply+0x2e2>
   1d4c0:	f89d 1009 	ldrb.w	r1, [sp, #9]
   1d4c4:	4291      	cmp	r1, r2
   1d4c6:	f040 80f6 	bne.w	1d6b6 <am_hal_ble_patch_apply+0x2e2>
   1d4ca:	f89d 100a 	ldrb.w	r1, [sp, #10]
   1d4ce:	29f1      	cmp	r1, #241	; 0xf1
   1d4d0:	f040 80f1 	bne.w	1d6b6 <am_hal_ble_patch_apply+0x2e2>
   1d4d4:	f89d 100b 	ldrb.w	r1, [sp, #11]
   1d4d8:	2901      	cmp	r1, #1
   1d4da:	f040 80ec 	bne.w	1d6b6 <am_hal_ble_patch_apply+0x2e2>
   1d4de:	f89d 100c 	ldrb.w	r1, [sp, #12]
   1d4e2:	2900      	cmp	r1, #0
   1d4e4:	f040 80e7 	bne.w	1d6b6 <am_hal_ble_patch_apply+0x2e2>
   1d4e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1d4ec:	9101      	str	r1, [sp, #4]
   1d4ee:	2900      	cmp	r1, #0
   1d4f0:	d07d      	beq.n	1d5ee <am_hal_ble_patch_apply+0x21a>
   1d4f2:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 1d6d8 <am_hal_ble_patch_apply+0x304>
   1d4f6:	4f73      	ldr	r7, [pc, #460]	; (1d6c4 <am_hal_ble_patch_apply+0x2f0>)
   1d4f8:	f88a 3001 	strb.w	r3, [sl, #1]
   1d4fc:	9b01      	ldr	r3, [sp, #4]
   1d4fe:	f8d8 100c 	ldr.w	r1, [r8, #12]
   1d502:	4873      	ldr	r0, [pc, #460]	; (1d6d0 <am_hal_ble_patch_apply+0x2fc>)
   1d504:	f8cd a018 	str.w	sl, [sp, #24]
   1d508:	2b80      	cmp	r3, #128	; 0x80
   1d50a:	bf28      	it	cs
   1d50c:	2380      	movcs	r3, #128	; 0x80
   1d50e:	4699      	mov	r9, r3
   1d510:	f88a 3003 	strb.w	r3, [sl, #3]
   1d514:	f026 0303 	bic.w	r3, r6, #3
   1d518:	4419      	add	r1, r3
   1d51a:	2300      	movs	r3, #0
   1d51c:	e9cd 3307 	strd	r3, r3, [sp, #28]
   1d520:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   1d524:	930b      	str	r3, [sp, #44]	; 0x2c
   1d526:	2301      	movs	r3, #1
   1d528:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   1d52c:	f88a 3000 	strb.w	r3, [sl]
   1d530:	f109 0304 	add.w	r3, r9, #4
   1d534:	f8ad 3020 	strh.w	r3, [sp, #32]
   1d538:	23f2      	movs	r3, #242	; 0xf2
   1d53a:	f88a 3002 	strb.w	r3, [sl, #2]
   1d53e:	464a      	mov	r2, r9
   1d540:	f7ee fdde 	bl	c100 <memcpy>
   1d544:	682b      	ldr	r3, [r5, #0]
   1d546:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1d54a:	455b      	cmp	r3, fp
   1d54c:	d1a4      	bne.n	1d498 <am_hal_ble_patch_apply+0xc4>
   1d54e:	a906      	add	r1, sp, #24
   1d550:	4628      	mov	r0, r5
   1d552:	f7ff fb33 	bl	1cbbc <am_hal_ble_blocking_transfer.part.0>
   1d556:	2800      	cmp	r0, #0
   1d558:	f040 80cc 	bne.w	1d6f4 <am_hal_ble_patch_apply+0x320>
   1d55c:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   1d560:	061c      	lsls	r4, r3, #24
   1d562:	d40b      	bmi.n	1d57c <am_hal_ble_patch_apply+0x1a8>
   1d564:	4c58      	ldr	r4, [pc, #352]	; (1d6c8 <am_hal_ble_patch_apply+0x2f4>)
   1d566:	e002      	b.n	1d56e <am_hal_ble_patch_apply+0x19a>
   1d568:	3c01      	subs	r4, #1
   1d56a:	f43f af71 	beq.w	1d450 <am_hal_ble_patch_apply+0x7c>
   1d56e:	2010      	movs	r0, #16
   1d570:	f001 f850 	bl	1e614 <am_hal_flash_delay>
   1d574:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   1d578:	0618      	lsls	r0, r3, #24
   1d57a:	d5f5      	bpl.n	1d568 <am_hal_ble_patch_apply+0x194>
   1d57c:	ab02      	add	r3, sp, #8
   1d57e:	9306      	str	r3, [sp, #24]
   1d580:	682b      	ldr	r3, [r5, #0]
   1d582:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
   1d586:	2300      	movs	r3, #0
   1d588:	e9cd 3307 	strd	r3, r3, [sp, #28]
   1d58c:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   1d590:	930b      	str	r3, [sp, #44]	; 0x2c
   1d592:	2302      	movs	r3, #2
   1d594:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   1d598:	455a      	cmp	r2, fp
   1d59a:	f04f 0305 	mov.w	r3, #5
   1d59e:	f8ad 3020 	strh.w	r3, [sp, #32]
   1d5a2:	f47f af79 	bne.w	1d498 <am_hal_ble_patch_apply+0xc4>
   1d5a6:	a906      	add	r1, sp, #24
   1d5a8:	4628      	mov	r0, r5
   1d5aa:	f7ff fb07 	bl	1cbbc <am_hal_ble_blocking_transfer.part.0>
   1d5ae:	2800      	cmp	r0, #0
   1d5b0:	f040 80a0 	bne.w	1d6f4 <am_hal_ble_patch_apply+0x320>
   1d5b4:	f89d 1008 	ldrb.w	r1, [sp, #8]
   1d5b8:	f8d8 3000 	ldr.w	r3, [r8]
   1d5bc:	2904      	cmp	r1, #4
   1d5be:	b2da      	uxtb	r2, r3
   1d5c0:	d179      	bne.n	1d6b6 <am_hal_ble_patch_apply+0x2e2>
   1d5c2:	f89d 1009 	ldrb.w	r1, [sp, #9]
   1d5c6:	4291      	cmp	r1, r2
   1d5c8:	d175      	bne.n	1d6b6 <am_hal_ble_patch_apply+0x2e2>
   1d5ca:	f89d 100a 	ldrb.w	r1, [sp, #10]
   1d5ce:	29f2      	cmp	r1, #242	; 0xf2
   1d5d0:	d171      	bne.n	1d6b6 <am_hal_ble_patch_apply+0x2e2>
   1d5d2:	f89d 100b 	ldrb.w	r1, [sp, #11]
   1d5d6:	2901      	cmp	r1, #1
   1d5d8:	d16d      	bne.n	1d6b6 <am_hal_ble_patch_apply+0x2e2>
   1d5da:	f89d 100c 	ldrb.w	r1, [sp, #12]
   1d5de:	2900      	cmp	r1, #0
   1d5e0:	d169      	bne.n	1d6b6 <am_hal_ble_patch_apply+0x2e2>
   1d5e2:	9901      	ldr	r1, [sp, #4]
   1d5e4:	ebb1 0109 	subs.w	r1, r1, r9
   1d5e8:	444e      	add	r6, r9
   1d5ea:	9101      	str	r1, [sp, #4]
   1d5ec:	d184      	bne.n	1d4f8 <am_hal_ble_patch_apply+0x124>
   1d5ee:	f88d 2009 	strb.w	r2, [sp, #9]
   1d5f2:	2200      	movs	r2, #0
   1d5f4:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
   1d5f8:	920d      	str	r2, [sp, #52]	; 0x34
   1d5fa:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
   1d5fe:	f8b8 2008 	ldrh.w	r2, [r8, #8]
   1d602:	f8ad 200c 	strh.w	r2, [sp, #12]
   1d606:	ab02      	add	r3, sp, #8
   1d608:	4a32      	ldr	r2, [pc, #200]	; (1d6d4 <am_hal_ble_patch_apply+0x300>)
   1d60a:	930c      	str	r3, [sp, #48]	; 0x30
   1d60c:	920e      	str	r2, [sp, #56]	; 0x38
   1d60e:	682b      	ldr	r3, [r5, #0]
   1d610:	492b      	ldr	r1, [pc, #172]	; (1d6c0 <am_hal_ble_patch_apply+0x2ec>)
   1d612:	2201      	movs	r2, #1
   1d614:	f88d 2008 	strb.w	r2, [sp, #8]
   1d618:	f240 22f3 	movw	r2, #755	; 0x2f3
   1d61c:	f8ad 200a 	strh.w	r2, [sp, #10]
   1d620:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
   1d624:	428a      	cmp	r2, r1
   1d626:	d059      	beq.n	1d6dc <am_hal_ble_patch_apply+0x308>
   1d628:	4a26      	ldr	r2, [pc, #152]	; (1d6c4 <am_hal_ble_patch_apply+0x2f0>)
   1d62a:	f8d2 230c 	ldr.w	r2, [r2, #780]	; 0x30c
   1d62e:	0611      	lsls	r1, r2, #24
   1d630:	d40d      	bmi.n	1d64e <am_hal_ble_patch_apply+0x27a>
   1d632:	4c25      	ldr	r4, [pc, #148]	; (1d6c8 <am_hal_ble_patch_apply+0x2f4>)
   1d634:	4e23      	ldr	r6, [pc, #140]	; (1d6c4 <am_hal_ble_patch_apply+0x2f0>)
   1d636:	e002      	b.n	1d63e <am_hal_ble_patch_apply+0x26a>
   1d638:	3c01      	subs	r4, #1
   1d63a:	f43f af09 	beq.w	1d450 <am_hal_ble_patch_apply+0x7c>
   1d63e:	2010      	movs	r0, #16
   1d640:	f000 ffe8 	bl	1e614 <am_hal_flash_delay>
   1d644:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   1d648:	061b      	lsls	r3, r3, #24
   1d64a:	d5f5      	bpl.n	1d638 <am_hal_ble_patch_apply+0x264>
   1d64c:	682b      	ldr	r3, [r5, #0]
   1d64e:	491c      	ldr	r1, [pc, #112]	; (1d6c0 <am_hal_ble_patch_apply+0x2ec>)
   1d650:	aa02      	add	r2, sp, #8
   1d652:	9206      	str	r2, [sp, #24]
   1d654:	2200      	movs	r2, #0
   1d656:	e9cd 2207 	strd	r2, r2, [sp, #28]
   1d65a:	e9cd 2209 	strd	r2, r2, [sp, #36]	; 0x24
   1d65e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1d662:	920b      	str	r2, [sp, #44]	; 0x2c
   1d664:	2202      	movs	r2, #2
   1d666:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   1d66a:	428b      	cmp	r3, r1
   1d66c:	f04f 0205 	mov.w	r2, #5
   1d670:	f8ad 2020 	strh.w	r2, [sp, #32]
   1d674:	f47f af10 	bne.w	1d498 <am_hal_ble_patch_apply+0xc4>
   1d678:	a906      	add	r1, sp, #24
   1d67a:	4628      	mov	r0, r5
   1d67c:	f7ff fa9e 	bl	1cbbc <am_hal_ble_blocking_transfer.part.0>
   1d680:	4606      	mov	r6, r0
   1d682:	2800      	cmp	r0, #0
   1d684:	f47f aee5 	bne.w	1d452 <am_hal_ble_patch_apply+0x7e>
   1d688:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1d68c:	f898 3000 	ldrb.w	r3, [r8]
   1d690:	2a04      	cmp	r2, #4
   1d692:	d110      	bne.n	1d6b6 <am_hal_ble_patch_apply+0x2e2>
   1d694:	f89d 2009 	ldrb.w	r2, [sp, #9]
   1d698:	429a      	cmp	r2, r3
   1d69a:	d10c      	bne.n	1d6b6 <am_hal_ble_patch_apply+0x2e2>
   1d69c:	f89d 300a 	ldrb.w	r3, [sp, #10]
   1d6a0:	2bf3      	cmp	r3, #243	; 0xf3
   1d6a2:	d108      	bne.n	1d6b6 <am_hal_ble_patch_apply+0x2e2>
   1d6a4:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1d6a8:	2b01      	cmp	r3, #1
   1d6aa:	d104      	bne.n	1d6b6 <am_hal_ble_patch_apply+0x2e2>
   1d6ac:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1d6b0:	2b00      	cmp	r3, #0
   1d6b2:	f43f aece 	beq.w	1d452 <am_hal_ble_patch_apply+0x7e>
   1d6b6:	2601      	movs	r6, #1
   1d6b8:	4630      	mov	r0, r6
   1d6ba:	b013      	add	sp, #76	; 0x4c
   1d6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d6c0:	01775230 	.word	0x01775230
   1d6c4:	5000c000 	.word	0x5000c000
   1d6c8:	000f4240 	.word	0x000f4240
   1d6cc:	08000004 	.word	0x08000004
   1d6d0:	10009c40 	.word	0x10009c40
   1d6d4:	00010006 	.word	0x00010006
   1d6d8:	10009c3c 	.word	0x10009c3c
   1d6dc:	a90c      	add	r1, sp, #48	; 0x30
   1d6de:	4628      	mov	r0, r5
   1d6e0:	f7ff fa6c 	bl	1cbbc <am_hal_ble_blocking_transfer.part.0>
   1d6e4:	2800      	cmp	r0, #0
   1d6e6:	d1e6      	bne.n	1d6b6 <am_hal_ble_patch_apply+0x2e2>
   1d6e8:	4b03      	ldr	r3, [pc, #12]	; (1d6f8 <am_hal_ble_patch_apply+0x324>)
   1d6ea:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   1d6ee:	061a      	lsls	r2, r3, #24
   1d6f0:	d59f      	bpl.n	1d632 <am_hal_ble_patch_apply+0x25e>
   1d6f2:	e7ab      	b.n	1d64c <am_hal_ble_patch_apply+0x278>
   1d6f4:	4606      	mov	r6, r0
   1d6f6:	e6ac      	b.n	1d452 <am_hal_ble_patch_apply+0x7e>
   1d6f8:	5000c000 	.word	0x5000c000

0001d6fc <am_hal_ble_patch_copy_end_apply>:
   1d6fc:	2800      	cmp	r0, #0
   1d6fe:	d076      	beq.n	1d7ee <am_hal_ble_patch_copy_end_apply+0xf2>
   1d700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d704:	6803      	ldr	r3, [r0, #0]
   1d706:	4a3c      	ldr	r2, [pc, #240]	; (1d7f8 <am_hal_ble_patch_copy_end_apply+0xfc>)
   1d708:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1d70c:	4293      	cmp	r3, r2
   1d70e:	b08b      	sub	sp, #44	; 0x2c
   1d710:	4606      	mov	r6, r0
   1d712:	d168      	bne.n	1d7e6 <am_hal_ble_patch_copy_end_apply+0xea>
   1d714:	4a39      	ldr	r2, [pc, #228]	; (1d7fc <am_hal_ble_patch_copy_end_apply+0x100>)
   1d716:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 1d80c <am_hal_ble_patch_copy_end_apply+0x110>
   1d71a:	9200      	str	r2, [sp, #0]
   1d71c:	2400      	movs	r4, #0
   1d71e:	f8ad 4004 	strh.w	r4, [sp, #4]
   1d722:	f241 3588 	movw	r5, #5000	; 0x1388
   1d726:	4698      	mov	r8, r3
   1d728:	af04      	add	r7, sp, #16
   1d72a:	4543      	cmp	r3, r8
   1d72c:	e9cd 4905 	strd	r4, r9, [sp, #20]
   1d730:	e9cd 4408 	strd	r4, r4, [sp, #32]
   1d734:	4639      	mov	r1, r7
   1d736:	4630      	mov	r0, r6
   1d738:	f8cd d010 	str.w	sp, [sp, #16]
   1d73c:	f88d 401c 	strb.w	r4, [sp, #28]
   1d740:	d013      	beq.n	1d76a <am_hal_ble_patch_copy_end_apply+0x6e>
   1d742:	4b2f      	ldr	r3, [pc, #188]	; (1d800 <am_hal_ble_patch_copy_end_apply+0x104>)
   1d744:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   1d748:	061a      	lsls	r2, r3, #24
   1d74a:	d419      	bmi.n	1d780 <am_hal_ble_patch_copy_end_apply+0x84>
   1d74c:	4d2d      	ldr	r5, [pc, #180]	; (1d804 <am_hal_ble_patch_copy_end_apply+0x108>)
   1d74e:	4c2c      	ldr	r4, [pc, #176]	; (1d800 <am_hal_ble_patch_copy_end_apply+0x104>)
   1d750:	2010      	movs	r0, #16
   1d752:	f000 ff5f 	bl	1e614 <am_hal_flash_delay>
   1d756:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   1d75a:	061b      	lsls	r3, r3, #24
   1d75c:	d40f      	bmi.n	1d77e <am_hal_ble_patch_copy_end_apply+0x82>
   1d75e:	3d01      	subs	r5, #1
   1d760:	d1f6      	bne.n	1d750 <am_hal_ble_patch_copy_end_apply+0x54>
   1d762:	4829      	ldr	r0, [pc, #164]	; (1d808 <am_hal_ble_patch_copy_end_apply+0x10c>)
   1d764:	b00b      	add	sp, #44	; 0x2c
   1d766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d76a:	f7ff fa27 	bl	1cbbc <am_hal_ble_blocking_transfer.part.0>
   1d76e:	2800      	cmp	r0, #0
   1d770:	d0e7      	beq.n	1d742 <am_hal_ble_patch_copy_end_apply+0x46>
   1d772:	3d01      	subs	r5, #1
   1d774:	d0f6      	beq.n	1d764 <am_hal_ble_patch_copy_end_apply+0x68>
   1d776:	6833      	ldr	r3, [r6, #0]
   1d778:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1d77c:	e7d4      	b.n	1d728 <am_hal_ble_patch_copy_end_apply+0x2c>
   1d77e:	af04      	add	r7, sp, #16
   1d780:	6832      	ldr	r2, [r6, #0]
   1d782:	491d      	ldr	r1, [pc, #116]	; (1d7f8 <am_hal_ble_patch_copy_end_apply+0xfc>)
   1d784:	f8cd d010 	str.w	sp, [sp, #16]
   1d788:	2300      	movs	r3, #0
   1d78a:	e9cd 3305 	strd	r3, r3, [sp, #20]
   1d78e:	e9cd 3307 	strd	r3, r3, [sp, #28]
   1d792:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   1d796:	9309      	str	r3, [sp, #36]	; 0x24
   1d798:	2302      	movs	r3, #2
   1d79a:	f88d 301a 	strb.w	r3, [sp, #26]
   1d79e:	428a      	cmp	r2, r1
   1d7a0:	f04f 0305 	mov.w	r3, #5
   1d7a4:	f8ad 3018 	strh.w	r3, [sp, #24]
   1d7a8:	d11d      	bne.n	1d7e6 <am_hal_ble_patch_copy_end_apply+0xea>
   1d7aa:	4639      	mov	r1, r7
   1d7ac:	4630      	mov	r0, r6
   1d7ae:	f7ff fa05 	bl	1cbbc <am_hal_ble_blocking_transfer.part.0>
   1d7b2:	2800      	cmp	r0, #0
   1d7b4:	d1d6      	bne.n	1d764 <am_hal_ble_patch_copy_end_apply+0x68>
   1d7b6:	f89d 3000 	ldrb.w	r3, [sp]
   1d7ba:	2b04      	cmp	r3, #4
   1d7bc:	d119      	bne.n	1d7f2 <am_hal_ble_patch_copy_end_apply+0xf6>
   1d7be:	f89d 3001 	ldrb.w	r3, [sp, #1]
   1d7c2:	2bee      	cmp	r3, #238	; 0xee
   1d7c4:	d115      	bne.n	1d7f2 <am_hal_ble_patch_copy_end_apply+0xf6>
   1d7c6:	f89d 3002 	ldrb.w	r3, [sp, #2]
   1d7ca:	2bf1      	cmp	r3, #241	; 0xf1
   1d7cc:	d111      	bne.n	1d7f2 <am_hal_ble_patch_copy_end_apply+0xf6>
   1d7ce:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1d7d2:	2b01      	cmp	r3, #1
   1d7d4:	d10d      	bne.n	1d7f2 <am_hal_ble_patch_copy_end_apply+0xf6>
   1d7d6:	f89d 0004 	ldrb.w	r0, [sp, #4]
   1d7da:	3800      	subs	r0, #0
   1d7dc:	bf18      	it	ne
   1d7de:	2001      	movne	r0, #1
   1d7e0:	b00b      	add	sp, #44	; 0x2c
   1d7e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d7e6:	2002      	movs	r0, #2
   1d7e8:	b00b      	add	sp, #44	; 0x2c
   1d7ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d7ee:	2002      	movs	r0, #2
   1d7f0:	4770      	bx	lr
   1d7f2:	2001      	movs	r0, #1
   1d7f4:	e7b6      	b.n	1d764 <am_hal_ble_patch_copy_end_apply+0x68>
   1d7f6:	bf00      	nop
   1d7f8:	01775230 	.word	0x01775230
   1d7fc:	02f1ee01 	.word	0x02f1ee01
   1d800:	5000c000 	.word	0x5000c000
   1d804:	000f4240 	.word	0x000f4240
   1d808:	08000004 	.word	0x08000004
   1d80c:	00010006 	.word	0x00010006

0001d810 <am_hal_ble_default_patch_apply>:
   1d810:	4a1c      	ldr	r2, [pc, #112]	; (1d884 <am_hal_ble_default_patch_apply+0x74>)
   1d812:	68d3      	ldr	r3, [r2, #12]
   1d814:	b2db      	uxtb	r3, r3
   1d816:	2b11      	cmp	r3, #17
   1d818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d81c:	4605      	mov	r5, r0
   1d81e:	d02c      	beq.n	1d87a <am_hal_ble_default_patch_apply+0x6a>
   1d820:	68d3      	ldr	r3, [r2, #12]
   1d822:	b2db      	uxtb	r3, r3
   1d824:	2b12      	cmp	r3, #18
   1d826:	d028      	beq.n	1d87a <am_hal_ble_default_patch_apply+0x6a>
   1d828:	4a17      	ldr	r2, [pc, #92]	; (1d888 <am_hal_ble_default_patch_apply+0x78>)
   1d82a:	4b18      	ldr	r3, [pc, #96]	; (1d88c <am_hal_ble_default_patch_apply+0x7c>)
   1d82c:	6816      	ldr	r6, [r2, #0]
   1d82e:	681b      	ldr	r3, [r3, #0]
   1d830:	b306      	cbz	r6, 1d874 <am_hal_ble_default_patch_apply+0x64>
   1d832:	4c17      	ldr	r4, [pc, #92]	; (1d890 <am_hal_ble_default_patch_apply+0x80>)
   1d834:	f1a3 0804 	sub.w	r8, r3, #4
   1d838:	2700      	movs	r7, #0
   1d83a:	f858 1f04 	ldr.w	r1, [r8, #4]!
   1d83e:	684b      	ldr	r3, [r1, #4]
   1d840:	68ca      	ldr	r2, [r1, #12]
   1d842:	b17b      	cbz	r3, 1d864 <am_hal_ble_default_patch_apply+0x54>
   1d844:	3b01      	subs	r3, #1
   1d846:	eb02 0c03 	add.w	ip, r2, r3
   1d84a:	1e50      	subs	r0, r2, #1
   1d84c:	2300      	movs	r3, #0
   1d84e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   1d852:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
   1d856:	4584      	cmp	ip, r0
   1d858:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
   1d85c:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
   1d860:	b29b      	uxth	r3, r3
   1d862:	d1f4      	bne.n	1d84e <am_hal_ble_default_patch_apply+0x3e>
   1d864:	608b      	str	r3, [r1, #8]
   1d866:	4628      	mov	r0, r5
   1d868:	f7ff fdb4 	bl	1d3d4 <am_hal_ble_patch_apply>
   1d86c:	b918      	cbnz	r0, 1d876 <am_hal_ble_default_patch_apply+0x66>
   1d86e:	3701      	adds	r7, #1
   1d870:	42be      	cmp	r6, r7
   1d872:	d1e2      	bne.n	1d83a <am_hal_ble_default_patch_apply+0x2a>
   1d874:	2000      	movs	r0, #0
   1d876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d87a:	4a06      	ldr	r2, [pc, #24]	; (1d894 <am_hal_ble_default_patch_apply+0x84>)
   1d87c:	4b06      	ldr	r3, [pc, #24]	; (1d898 <am_hal_ble_default_patch_apply+0x88>)
   1d87e:	6816      	ldr	r6, [r2, #0]
   1d880:	681b      	ldr	r3, [r3, #0]
   1d882:	e7d5      	b.n	1d830 <am_hal_ble_default_patch_apply+0x20>
   1d884:	40020000 	.word	0x40020000
   1d888:	000223ac 	.word	0x000223ac
   1d88c:	10003d7c 	.word	0x10003d7c
   1d890:	00020744 	.word	0x00020744
   1d894:	00021f90 	.word	0x00021f90
   1d898:	10002dd4 	.word	0x10002dd4

0001d89c <am_hal_ble_default_trim_set_ramcode>:
   1d89c:	4b0f      	ldr	r3, [pc, #60]	; (1d8dc <am_hal_ble_default_trim_set_ramcode+0x40>)
   1d89e:	68db      	ldr	r3, [r3, #12]
   1d8a0:	b2db      	uxtb	r3, r3
   1d8a2:	2b21      	cmp	r3, #33	; 0x21
   1d8a4:	bf0c      	ite	eq
   1d8a6:	4b0e      	ldreq	r3, [pc, #56]	; (1d8e0 <am_hal_ble_default_trim_set_ramcode+0x44>)
   1d8a8:	4b0e      	ldrne	r3, [pc, #56]	; (1d8e4 <am_hal_ble_default_trim_set_ramcode+0x48>)
   1d8aa:	68da      	ldr	r2, [r3, #12]
   1d8ac:	4b0e      	ldr	r3, [pc, #56]	; (1d8e8 <am_hal_ble_default_trim_set_ramcode+0x4c>)
   1d8ae:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
   1d8b2:	ba19      	rev	r1, r3
   1d8b4:	3301      	adds	r3, #1
   1d8b6:	4b0c      	ldr	r3, [pc, #48]	; (1d8e8 <am_hal_ble_default_trim_set_ramcode+0x4c>)
   1d8b8:	bf18      	it	ne
   1d8ba:	6091      	strne	r1, [r2, #8]
   1d8bc:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   1d8c0:	1c59      	adds	r1, r3, #1
   1d8c2:	d009      	beq.n	1d8d8 <am_hal_ble_default_trim_set_ramcode+0x3c>
   1d8c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d8c8:	ba19      	rev	r1, r3
   1d8ca:	3301      	adds	r3, #1
   1d8cc:	d004      	beq.n	1d8d8 <am_hal_ble_default_trim_set_ramcode+0x3c>
   1d8ce:	68d3      	ldr	r3, [r2, #12]
   1d8d0:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
   1d8d4:	430b      	orrs	r3, r1
   1d8d6:	60d3      	str	r3, [r2, #12]
   1d8d8:	2000      	movs	r0, #0
   1d8da:	4770      	bx	lr
   1d8dc:	40020000 	.word	0x40020000
   1d8e0:	10002ec0 	.word	0x10002ec0
   1d8e4:	10002cac 	.word	0x10002cac
   1d8e8:	50023000 	.word	0x50023000

0001d8ec <am_hal_ble_blocking_hci_write>:
   1d8ec:	b530      	push	{r4, r5, lr}
   1d8ee:	b087      	sub	sp, #28
   1d8f0:	2400      	movs	r4, #0
   1d8f2:	e9cd 4404 	strd	r4, r4, [sp, #16]
   1d8f6:	b29b      	uxth	r3, r3
   1d8f8:	f88d 4005 	strb.w	r4, [sp, #5]
   1d8fc:	f8ad 4006 	strh.w	r4, [sp, #6]
   1d900:	f88d 400c 	strb.w	r4, [sp, #12]
   1d904:	2401      	movs	r4, #1
   1d906:	9200      	str	r2, [sp, #0]
   1d908:	f88d 1004 	strb.w	r1, [sp, #4]
   1d90c:	f8ad 3008 	strh.w	r3, [sp, #8]
   1d910:	f8ad 400a 	strh.w	r4, [sp, #10]
   1d914:	b128      	cbz	r0, 1d922 <am_hal_ble_blocking_hci_write+0x36>
   1d916:	6802      	ldr	r2, [r0, #0]
   1d918:	4d08      	ldr	r5, [pc, #32]	; (1d93c <am_hal_ble_blocking_hci_write+0x50>)
   1d91a:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   1d91e:	42aa      	cmp	r2, r5
   1d920:	d002      	beq.n	1d928 <am_hal_ble_blocking_hci_write+0x3c>
   1d922:	2000      	movs	r0, #0
   1d924:	b007      	add	sp, #28
   1d926:	bd30      	pop	{r4, r5, pc}
   1d928:	b109      	cbz	r1, 1d92e <am_hal_ble_blocking_hci_write+0x42>
   1d92a:	f88d 4007 	strb.w	r4, [sp, #7]
   1d92e:	2b00      	cmp	r3, #0
   1d930:	d0f7      	beq.n	1d922 <am_hal_ble_blocking_hci_write+0x36>
   1d932:	4669      	mov	r1, sp
   1d934:	f7ff f942 	bl	1cbbc <am_hal_ble_blocking_transfer.part.0>
   1d938:	b007      	add	sp, #28
   1d93a:	bd30      	pop	{r4, r5, pc}
   1d93c:	01775230 	.word	0x01775230

0001d940 <am_hal_ble_blocking_hci_read>:
   1d940:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d942:	b089      	sub	sp, #36	; 0x24
   1d944:	ab01      	add	r3, sp, #4
   1d946:	9302      	str	r3, [sp, #8]
   1d948:	4b26      	ldr	r3, [pc, #152]	; (1d9e4 <am_hal_ble_blocking_hci_read+0xa4>)
   1d94a:	681b      	ldr	r3, [r3, #0]
   1d94c:	f8ad 300c 	strh.w	r3, [sp, #12]
   1d950:	0c1b      	lsrs	r3, r3, #16
   1d952:	f88d 300e 	strb.w	r3, [sp, #14]
   1d956:	2300      	movs	r3, #0
   1d958:	e9cd 3306 	strd	r3, r3, [sp, #24]
   1d95c:	f88d 300f 	strb.w	r3, [sp, #15]
   1d960:	f88d 3014 	strb.w	r3, [sp, #20]
   1d964:	f04f 1302 	mov.w	r3, #131074	; 0x20002
   1d968:	9304      	str	r3, [sp, #16]
   1d96a:	b130      	cbz	r0, 1d97a <am_hal_ble_blocking_hci_read+0x3a>
   1d96c:	6805      	ldr	r5, [r0, #0]
   1d96e:	4b1e      	ldr	r3, [pc, #120]	; (1d9e8 <am_hal_ble_blocking_hci_read+0xa8>)
   1d970:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
   1d974:	429d      	cmp	r5, r3
   1d976:	4604      	mov	r4, r0
   1d978:	d002      	beq.n	1d980 <am_hal_ble_blocking_hci_read+0x40>
   1d97a:	2000      	movs	r0, #0
   1d97c:	b009      	add	sp, #36	; 0x24
   1d97e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d980:	4b1a      	ldr	r3, [pc, #104]	; (1d9ec <am_hal_ble_blocking_hci_read+0xac>)
   1d982:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   1d986:	460e      	mov	r6, r1
   1d988:	f3c3 11c0 	ubfx	r1, r3, #7, #1
   1d98c:	061b      	lsls	r3, r3, #24
   1d98e:	4617      	mov	r7, r2
   1d990:	d403      	bmi.n	1d99a <am_hal_ble_blocking_hci_read+0x5a>
   1d992:	2f00      	cmp	r7, #0
   1d994:	d0f1      	beq.n	1d97a <am_hal_ble_blocking_hci_read+0x3a>
   1d996:	6039      	str	r1, [r7, #0]
   1d998:	e7ef      	b.n	1d97a <am_hal_ble_blocking_hci_read+0x3a>
   1d99a:	a902      	add	r1, sp, #8
   1d99c:	f7ff f90e 	bl	1cbbc <am_hal_ble_blocking_transfer.part.0>
   1d9a0:	2800      	cmp	r0, #0
   1d9a2:	d1eb      	bne.n	1d97c <am_hal_ble_blocking_hci_read+0x3c>
   1d9a4:	f89d 1005 	ldrb.w	r1, [sp, #5]
   1d9a8:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1d9ac:	9602      	str	r6, [sp, #8]
   1d9ae:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   1d9b2:	b29b      	uxth	r3, r3
   1d9b4:	f8ad 3010 	strh.w	r3, [sp, #16]
   1d9b8:	3b01      	subs	r3, #1
   1d9ba:	2bff      	cmp	r3, #255	; 0xff
   1d9bc:	d80f      	bhi.n	1d9de <am_hal_ble_blocking_hci_read+0x9e>
   1d9be:	6823      	ldr	r3, [r4, #0]
   1d9c0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1d9c4:	42ab      	cmp	r3, r5
   1d9c6:	d108      	bne.n	1d9da <am_hal_ble_blocking_hci_read+0x9a>
   1d9c8:	a902      	add	r1, sp, #8
   1d9ca:	4620      	mov	r0, r4
   1d9cc:	f7ff f8f6 	bl	1cbbc <am_hal_ble_blocking_transfer.part.0>
   1d9d0:	2800      	cmp	r0, #0
   1d9d2:	d1d3      	bne.n	1d97c <am_hal_ble_blocking_hci_read+0x3c>
   1d9d4:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1d9d8:	e7db      	b.n	1d992 <am_hal_ble_blocking_hci_read+0x52>
   1d9da:	2002      	movs	r0, #2
   1d9dc:	e7ce      	b.n	1d97c <am_hal_ble_blocking_hci_read+0x3c>
   1d9de:	2005      	movs	r0, #5
   1d9e0:	e7cc      	b.n	1d97c <am_hal_ble_blocking_hci_read+0x3c>
   1d9e2:	bf00      	nop
   1d9e4:	0001f290 	.word	0x0001f290
   1d9e8:	01775230 	.word	0x01775230
   1d9ec:	5000c000 	.word	0x5000c000

0001d9f0 <am_hal_ble_int_enable>:
   1d9f0:	b128      	cbz	r0, 1d9fe <am_hal_ble_int_enable+0xe>
   1d9f2:	6803      	ldr	r3, [r0, #0]
   1d9f4:	4a0c      	ldr	r2, [pc, #48]	; (1da28 <am_hal_ble_int_enable+0x38>)
   1d9f6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1d9fa:	4293      	cmp	r3, r2
   1d9fc:	d001      	beq.n	1da02 <am_hal_ble_int_enable+0x12>
   1d9fe:	2002      	movs	r0, #2
   1da00:	4770      	bx	lr
   1da02:	b510      	push	{r4, lr}
   1da04:	b082      	sub	sp, #8
   1da06:	460c      	mov	r4, r1
   1da08:	f001 f812 	bl	1ea30 <am_hal_interrupt_master_disable>
   1da0c:	4b07      	ldr	r3, [pc, #28]	; (1da2c <am_hal_ble_int_enable+0x3c>)
   1da0e:	9001      	str	r0, [sp, #4]
   1da10:	f8d3 1220 	ldr.w	r1, [r3, #544]	; 0x220
   1da14:	4321      	orrs	r1, r4
   1da16:	f8c3 1220 	str.w	r1, [r3, #544]	; 0x220
   1da1a:	9801      	ldr	r0, [sp, #4]
   1da1c:	f001 f80c 	bl	1ea38 <am_hal_interrupt_master_set>
   1da20:	2000      	movs	r0, #0
   1da22:	b002      	add	sp, #8
   1da24:	bd10      	pop	{r4, pc}
   1da26:	bf00      	nop
   1da28:	01775230 	.word	0x01775230
   1da2c:	5000c000 	.word	0x5000c000

0001da30 <am_hal_ble_int_status>:
   1da30:	4b05      	ldr	r3, [pc, #20]	; (1da48 <am_hal_ble_int_status+0x18>)
   1da32:	b129      	cbz	r1, 1da40 <am_hal_ble_int_status+0x10>
   1da34:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
   1da38:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
   1da3c:	4010      	ands	r0, r2
   1da3e:	4770      	bx	lr
   1da40:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
   1da44:	4770      	bx	lr
   1da46:	bf00      	nop
   1da48:	5000c000 	.word	0x5000c000

0001da4c <am_hal_ble_int_clear>:
   1da4c:	b150      	cbz	r0, 1da64 <am_hal_ble_int_clear+0x18>
   1da4e:	6803      	ldr	r3, [r0, #0]
   1da50:	4a05      	ldr	r2, [pc, #20]	; (1da68 <am_hal_ble_int_clear+0x1c>)
   1da52:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1da56:	4293      	cmp	r3, r2
   1da58:	d104      	bne.n	1da64 <am_hal_ble_int_clear+0x18>
   1da5a:	4b04      	ldr	r3, [pc, #16]	; (1da6c <am_hal_ble_int_clear+0x20>)
   1da5c:	2000      	movs	r0, #0
   1da5e:	f8c3 1228 	str.w	r1, [r3, #552]	; 0x228
   1da62:	4770      	bx	lr
   1da64:	2002      	movs	r0, #2
   1da66:	4770      	bx	lr
   1da68:	01775230 	.word	0x01775230
   1da6c:	5000c000 	.word	0x5000c000

0001da70 <am_hal_ble_plf_reg_read>:
   1da70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1da74:	b092      	sub	sp, #72	; 0x48
   1da76:	0a0c      	lsrs	r4, r1, #8
   1da78:	f88d 1004 	strb.w	r1, [sp, #4]
   1da7c:	0c0b      	lsrs	r3, r1, #16
   1da7e:	0e09      	lsrs	r1, r1, #24
   1da80:	f88d 3006 	strb.w	r3, [sp, #6]
   1da84:	f88d 1007 	strb.w	r1, [sp, #7]
   1da88:	f88d 4005 	strb.w	r4, [sp, #5]
   1da8c:	9c01      	ldr	r4, [sp, #4]
   1da8e:	4d2c      	ldr	r5, [pc, #176]	; (1db40 <am_hal_ble_plf_reg_read+0xd0>)
   1da90:	492c      	ldr	r1, [pc, #176]	; (1db44 <am_hal_ble_plf_reg_read+0xd4>)
   1da92:	e9cd 5402 	strd	r5, r4, [sp, #8]
   1da96:	ed9f 7b28 	vldr	d7, [pc, #160]	; 1db38 <am_hal_ble_plf_reg_read+0xc8>
   1da9a:	4617      	mov	r7, r2
   1da9c:	4a2a      	ldr	r2, [pc, #168]	; (1db48 <am_hal_ble_plf_reg_read+0xd8>)
   1da9e:	f8d1 8220 	ldr.w	r8, [r1, #544]	; 0x220
   1daa2:	2300      	movs	r3, #0
   1daa4:	ac02      	add	r4, sp, #8
   1daa6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
   1daaa:	930c      	str	r3, [sp, #48]	; 0x30
   1daac:	4606      	mov	r6, r0
   1daae:	f8c1 3220 	str.w	r3, [r1, #544]	; 0x220
   1dab2:	e9cd 3205 	strd	r3, r2, [sp, #20]
   1dab6:	e9cd 3308 	strd	r3, r3, [sp, #32]
   1daba:	9404      	str	r4, [sp, #16]
   1dabc:	f88d 301c 	strb.w	r3, [sp, #28]
   1dac0:	b128      	cbz	r0, 1dace <am_hal_ble_plf_reg_read+0x5e>
   1dac2:	6803      	ldr	r3, [r0, #0]
   1dac4:	4a21      	ldr	r2, [pc, #132]	; (1db4c <am_hal_ble_plf_reg_read+0xdc>)
   1dac6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1daca:	4293      	cmp	r3, r2
   1dacc:	d029      	beq.n	1db22 <am_hal_ble_plf_reg_read+0xb2>
   1dace:	4d1d      	ldr	r5, [pc, #116]	; (1db44 <am_hal_ble_plf_reg_read+0xd4>)
   1dad0:	f8d5 3410 	ldr.w	r3, [r5, #1040]	; 0x410
   1dad4:	f043 0302 	orr.w	r3, r3, #2
   1dad8:	f8c5 3410 	str.w	r3, [r5, #1040]	; 0x410
   1dadc:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   1dae0:	061a      	lsls	r2, r3, #24
   1dae2:	d40a      	bmi.n	1dafa <am_hal_ble_plf_reg_read+0x8a>
   1dae4:	4c1a      	ldr	r4, [pc, #104]	; (1db50 <am_hal_ble_plf_reg_read+0xe0>)
   1dae6:	e001      	b.n	1daec <am_hal_ble_plf_reg_read+0x7c>
   1dae8:	3c01      	subs	r4, #1
   1daea:	d01e      	beq.n	1db2a <am_hal_ble_plf_reg_read+0xba>
   1daec:	2010      	movs	r0, #16
   1daee:	f000 fd91 	bl	1e614 <am_hal_flash_delay>
   1daf2:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   1daf6:	061b      	lsls	r3, r3, #24
   1daf8:	d5f6      	bpl.n	1dae8 <am_hal_ble_plf_reg_read+0x78>
   1dafa:	a90a      	add	r1, sp, #40	; 0x28
   1dafc:	2200      	movs	r2, #0
   1dafe:	4630      	mov	r0, r6
   1db00:	f7ff ff1e 	bl	1d940 <am_hal_ble_blocking_hci_read>
   1db04:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   1db08:	990c      	ldr	r1, [sp, #48]	; 0x30
   1db0a:	4a0e      	ldr	r2, [pc, #56]	; (1db44 <am_hal_ble_plf_reg_read+0xd4>)
   1db0c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1db10:	2000      	movs	r0, #0
   1db12:	603b      	str	r3, [r7, #0]
   1db14:	f8c2 8228 	str.w	r8, [r2, #552]	; 0x228
   1db18:	f8c2 8220 	str.w	r8, [r2, #544]	; 0x220
   1db1c:	b012      	add	sp, #72	; 0x48
   1db1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1db22:	a904      	add	r1, sp, #16
   1db24:	f7ff f84a 	bl	1cbbc <am_hal_ble_blocking_transfer.part.0>
   1db28:	e7d1      	b.n	1dace <am_hal_ble_plf_reg_read+0x5e>
   1db2a:	480a      	ldr	r0, [pc, #40]	; (1db54 <am_hal_ble_plf_reg_read+0xe4>)
   1db2c:	b012      	add	sp, #72	; 0x48
   1db2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1db32:	bf00      	nop
   1db34:	f3af 8000 	nop.w
	...
   1db40:	04fd0201 	.word	0x04fd0201
   1db44:	5000c000 	.word	0x5000c000
   1db48:	00010008 	.word	0x00010008
   1db4c:	01775230 	.word	0x01775230
   1db50:	0007a120 	.word	0x0007a120
   1db54:	08000004 	.word	0x08000004

0001db58 <am_hal_ble_plf_reg_write>:
   1db58:	b5f0      	push	{r4, r5, r6, r7, lr}
   1db5a:	b08d      	sub	sp, #52	; 0x34
   1db5c:	0a0c      	lsrs	r4, r1, #8
   1db5e:	0c0b      	lsrs	r3, r1, #16
   1db60:	f88d 1004 	strb.w	r1, [sp, #4]
   1db64:	f88d 4005 	strb.w	r4, [sp, #5]
   1db68:	f88d 3006 	strb.w	r3, [sp, #6]
   1db6c:	f88d 2008 	strb.w	r2, [sp, #8]
   1db70:	0a14      	lsrs	r4, r2, #8
   1db72:	0c13      	lsrs	r3, r2, #16
   1db74:	0e09      	lsrs	r1, r1, #24
   1db76:	0e12      	lsrs	r2, r2, #24
   1db78:	f88d 4009 	strb.w	r4, [sp, #9]
   1db7c:	f88d 300a 	strb.w	r3, [sp, #10]
   1db80:	f88d 200b 	strb.w	r2, [sp, #11]
   1db84:	f88d 1007 	strb.w	r1, [sp, #7]
   1db88:	ab01      	add	r3, sp, #4
   1db8a:	4606      	mov	r6, r0
   1db8c:	e893 0003 	ldmia.w	r3, {r0, r1}
   1db90:	ab04      	add	r3, sp, #16
   1db92:	e883 0003 	stmia.w	r3, {r0, r1}
   1db96:	4a22      	ldr	r2, [pc, #136]	; (1dc20 <am_hal_ble_plf_reg_write+0xc8>)
   1db98:	4c22      	ldr	r4, [pc, #136]	; (1dc24 <am_hal_ble_plf_reg_write+0xcc>)
   1db9a:	9403      	str	r4, [sp, #12]
   1db9c:	2300      	movs	r3, #0
   1db9e:	4922      	ldr	r1, [pc, #136]	; (1dc28 <am_hal_ble_plf_reg_write+0xd0>)
   1dba0:	f8d2 7220 	ldr.w	r7, [r2, #544]	; 0x220
   1dba4:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
   1dba8:	a803      	add	r0, sp, #12
   1dbaa:	e9cd 0306 	strd	r0, r3, [sp, #24]
   1dbae:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   1dbb2:	9108      	str	r1, [sp, #32]
   1dbb4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1dbb8:	b12e      	cbz	r6, 1dbc6 <am_hal_ble_plf_reg_write+0x6e>
   1dbba:	6833      	ldr	r3, [r6, #0]
   1dbbc:	4a1b      	ldr	r2, [pc, #108]	; (1dc2c <am_hal_ble_plf_reg_write+0xd4>)
   1dbbe:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1dbc2:	4293      	cmp	r3, r2
   1dbc4:	d024      	beq.n	1dc10 <am_hal_ble_plf_reg_write+0xb8>
   1dbc6:	4d16      	ldr	r5, [pc, #88]	; (1dc20 <am_hal_ble_plf_reg_write+0xc8>)
   1dbc8:	f8d5 3410 	ldr.w	r3, [r5, #1040]	; 0x410
   1dbcc:	f043 0302 	orr.w	r3, r3, #2
   1dbd0:	f8c5 3410 	str.w	r3, [r5, #1040]	; 0x410
   1dbd4:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   1dbd8:	061a      	lsls	r2, r3, #24
   1dbda:	bf58      	it	pl
   1dbdc:	f24c 3450 	movwpl	r4, #50000	; 0xc350
   1dbe0:	d502      	bpl.n	1dbe8 <am_hal_ble_plf_reg_write+0x90>
   1dbe2:	e008      	b.n	1dbf6 <am_hal_ble_plf_reg_write+0x9e>
   1dbe4:	3c01      	subs	r4, #1
   1dbe6:	d018      	beq.n	1dc1a <am_hal_ble_plf_reg_write+0xc2>
   1dbe8:	2010      	movs	r0, #16
   1dbea:	f000 fd13 	bl	1e614 <am_hal_flash_delay>
   1dbee:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   1dbf2:	061b      	lsls	r3, r3, #24
   1dbf4:	d5f6      	bpl.n	1dbe4 <am_hal_ble_plf_reg_write+0x8c>
   1dbf6:	2200      	movs	r2, #0
   1dbf8:	a906      	add	r1, sp, #24
   1dbfa:	4630      	mov	r0, r6
   1dbfc:	f7ff fea0 	bl	1d940 <am_hal_ble_blocking_hci_read>
   1dc00:	4b07      	ldr	r3, [pc, #28]	; (1dc20 <am_hal_ble_plf_reg_write+0xc8>)
   1dc02:	2000      	movs	r0, #0
   1dc04:	f8c3 7228 	str.w	r7, [r3, #552]	; 0x228
   1dc08:	f8c3 7220 	str.w	r7, [r3, #544]	; 0x220
   1dc0c:	b00d      	add	sp, #52	; 0x34
   1dc0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dc10:	a906      	add	r1, sp, #24
   1dc12:	4630      	mov	r0, r6
   1dc14:	f7fe ffd2 	bl	1cbbc <am_hal_ble_blocking_transfer.part.0>
   1dc18:	e7d5      	b.n	1dbc6 <am_hal_ble_plf_reg_write+0x6e>
   1dc1a:	4805      	ldr	r0, [pc, #20]	; (1dc30 <am_hal_ble_plf_reg_write+0xd8>)
   1dc1c:	b00d      	add	sp, #52	; 0x34
   1dc1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dc20:	5000c000 	.word	0x5000c000
   1dc24:	08fd0301 	.word	0x08fd0301
   1dc28:	0001000c 	.word	0x0001000c
   1dc2c:	01775230 	.word	0x01775230
   1dc30:	08000004 	.word	0x08000004

0001dc34 <am_hal_ble_transmitter_modex_set>:
   1dc34:	b530      	push	{r4, r5, lr}
   1dc36:	b085      	sub	sp, #20
   1dc38:	4604      	mov	r4, r0
   1dc3a:	2300      	movs	r3, #0
   1dc3c:	466a      	mov	r2, sp
   1dc3e:	460d      	mov	r5, r1
   1dc40:	4927      	ldr	r1, [pc, #156]	; (1dce0 <am_hal_ble_transmitter_modex_set+0xac>)
   1dc42:	9303      	str	r3, [sp, #12]
   1dc44:	f7ff ff14 	bl	1da70 <am_hal_ble_plf_reg_read>
   1dc48:	4925      	ldr	r1, [pc, #148]	; (1dce0 <am_hal_ble_transmitter_modex_set+0xac>)
   1dc4a:	f04f 32ff 	mov.w	r2, #4294967295
   1dc4e:	4620      	mov	r0, r4
   1dc50:	f7ff ff82 	bl	1db58 <am_hal_ble_plf_reg_write>
   1dc54:	aa03      	add	r2, sp, #12
   1dc56:	4923      	ldr	r1, [pc, #140]	; (1dce4 <am_hal_ble_transmitter_modex_set+0xb0>)
   1dc58:	4620      	mov	r0, r4
   1dc5a:	f7ff ff09 	bl	1da70 <am_hal_ble_plf_reg_read>
   1dc5e:	9b03      	ldr	r3, [sp, #12]
   1dc60:	aa02      	add	r2, sp, #8
   1dc62:	f043 0308 	orr.w	r3, r3, #8
   1dc66:	f04f 41a4 	mov.w	r1, #1375731712	; 0x52000000
   1dc6a:	4620      	mov	r0, r4
   1dc6c:	9303      	str	r3, [sp, #12]
   1dc6e:	f7ff feff 	bl	1da70 <am_hal_ble_plf_reg_read>
   1dc72:	9a02      	ldr	r2, [sp, #8]
   1dc74:	f04f 41a4 	mov.w	r1, #1375731712	; 0x52000000
   1dc78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   1dc7c:	4620      	mov	r0, r4
   1dc7e:	9202      	str	r2, [sp, #8]
   1dc80:	f7ff ff6a 	bl	1db58 <am_hal_ble_plf_reg_write>
   1dc84:	aa01      	add	r2, sp, #4
   1dc86:	4918      	ldr	r1, [pc, #96]	; (1dce8 <am_hal_ble_transmitter_modex_set+0xb4>)
   1dc88:	4620      	mov	r0, r4
   1dc8a:	f7ff fef1 	bl	1da70 <am_hal_ble_plf_reg_read>
   1dc8e:	9a01      	ldr	r2, [sp, #4]
   1dc90:	4915      	ldr	r1, [pc, #84]	; (1dce8 <am_hal_ble_transmitter_modex_set+0xb4>)
   1dc92:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   1dc96:	f042 0208 	orr.w	r2, r2, #8
   1dc9a:	4620      	mov	r0, r4
   1dc9c:	f7ff ff5c 	bl	1db58 <am_hal_ble_plf_reg_write>
   1dca0:	006a      	lsls	r2, r5, #1
   1dca2:	4912      	ldr	r1, [pc, #72]	; (1dcec <am_hal_ble_transmitter_modex_set+0xb8>)
   1dca4:	f042 0201 	orr.w	r2, r2, #1
   1dca8:	4620      	mov	r0, r4
   1dcaa:	f7ff ff55 	bl	1db58 <am_hal_ble_plf_reg_write>
   1dcae:	490d      	ldr	r1, [pc, #52]	; (1dce4 <am_hal_ble_transmitter_modex_set+0xb0>)
   1dcb0:	9a03      	ldr	r2, [sp, #12]
   1dcb2:	4620      	mov	r0, r4
   1dcb4:	f7ff ff50 	bl	1db58 <am_hal_ble_plf_reg_write>
   1dcb8:	4b0d      	ldr	r3, [pc, #52]	; (1dcf0 <am_hal_ble_transmitter_modex_set+0xbc>)
   1dcba:	68db      	ldr	r3, [r3, #12]
   1dcbc:	b2db      	uxtb	r3, r3
   1dcbe:	2b21      	cmp	r3, #33	; 0x21
   1dcc0:	bf0c      	ite	eq
   1dcc2:	490c      	ldreq	r1, [pc, #48]	; (1dcf4 <am_hal_ble_transmitter_modex_set+0xc0>)
   1dcc4:	490c      	ldrne	r1, [pc, #48]	; (1dcf8 <am_hal_ble_transmitter_modex_set+0xc4>)
   1dcc6:	462a      	mov	r2, r5
   1dcc8:	4620      	mov	r0, r4
   1dcca:	f7ff ff45 	bl	1db58 <am_hal_ble_plf_reg_write>
   1dcce:	9a00      	ldr	r2, [sp, #0]
   1dcd0:	4903      	ldr	r1, [pc, #12]	; (1dce0 <am_hal_ble_transmitter_modex_set+0xac>)
   1dcd2:	4620      	mov	r0, r4
   1dcd4:	f7ff ff40 	bl	1db58 <am_hal_ble_plf_reg_write>
   1dcd8:	2000      	movs	r0, #0
   1dcda:	b005      	add	sp, #20
   1dcdc:	bd30      	pop	{r4, r5, pc}
   1dcde:	bf00      	nop
   1dce0:	43000004 	.word	0x43000004
   1dce4:	52000008 	.word	0x52000008
   1dce8:	45800070 	.word	0x45800070
   1dcec:	52000014 	.word	0x52000014
   1dcf0:	40020000 	.word	0x40020000
   1dcf4:	20006874 	.word	0x20006874
   1dcf8:	20006070 	.word	0x20006070

0001dcfc <am_hal_ble_patch_complete.part.0>:
   1dcfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dd00:	b08c      	sub	sp, #48	; 0x30
   1dd02:	2300      	movs	r3, #0
   1dd04:	2201      	movs	r2, #1
   1dd06:	e9cd 3307 	strd	r3, r3, [sp, #28]
   1dd0a:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   1dd0e:	930b      	str	r3, [sp, #44]	; 0x2c
   1dd10:	f8ad 3004 	strh.w	r3, [sp, #4]
   1dd14:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   1dd18:	4b7e      	ldr	r3, [pc, #504]	; (1df14 <am_hal_ble_patch_complete.part.0+0x218>)
   1dd1a:	f8cd d018 	str.w	sp, [sp, #24]
   1dd1e:	2206      	movs	r2, #6
   1dd20:	f8ad 2020 	strh.w	r2, [sp, #32]
   1dd24:	9300      	str	r3, [sp, #0]
   1dd26:	4604      	mov	r4, r0
   1dd28:	2800      	cmp	r0, #0
   1dd2a:	f000 80ec 	beq.w	1df06 <am_hal_ble_patch_complete.part.0+0x20a>
   1dd2e:	4e7a      	ldr	r6, [pc, #488]	; (1df18 <am_hal_ble_patch_complete.part.0+0x21c>)
   1dd30:	f241 3588 	movw	r5, #5000	; 0x1388
   1dd34:	6823      	ldr	r3, [r4, #0]
   1dd36:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1dd3a:	42b3      	cmp	r3, r6
   1dd3c:	a906      	add	r1, sp, #24
   1dd3e:	4620      	mov	r0, r4
   1dd40:	d107      	bne.n	1dd52 <am_hal_ble_patch_complete.part.0+0x56>
   1dd42:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   1dd46:	b123      	cbz	r3, 1dd52 <am_hal_ble_patch_complete.part.0+0x56>
   1dd48:	f7fe ff38 	bl	1cbbc <am_hal_ble_blocking_transfer.part.0>
   1dd4c:	b108      	cbz	r0, 1dd52 <am_hal_ble_patch_complete.part.0+0x56>
   1dd4e:	3d01      	subs	r5, #1
   1dd50:	d1f0      	bne.n	1dd34 <am_hal_ble_patch_complete.part.0+0x38>
   1dd52:	4b72      	ldr	r3, [pc, #456]	; (1df1c <am_hal_ble_patch_complete.part.0+0x220>)
   1dd54:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   1dd58:	061b      	lsls	r3, r3, #24
   1dd5a:	d458      	bmi.n	1de0e <am_hal_ble_patch_complete.part.0+0x112>
   1dd5c:	4d70      	ldr	r5, [pc, #448]	; (1df20 <am_hal_ble_patch_complete.part.0+0x224>)
   1dd5e:	4e6f      	ldr	r6, [pc, #444]	; (1df1c <am_hal_ble_patch_complete.part.0+0x220>)
   1dd60:	2010      	movs	r0, #16
   1dd62:	f000 fc57 	bl	1e614 <am_hal_flash_delay>
   1dd66:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   1dd6a:	061f      	lsls	r7, r3, #24
   1dd6c:	d406      	bmi.n	1dd7c <am_hal_ble_patch_complete.part.0+0x80>
   1dd6e:	3d01      	subs	r5, #1
   1dd70:	d1f6      	bne.n	1dd60 <am_hal_ble_patch_complete.part.0+0x64>
   1dd72:	4d6c      	ldr	r5, [pc, #432]	; (1df24 <am_hal_ble_patch_complete.part.0+0x228>)
   1dd74:	4628      	mov	r0, r5
   1dd76:	b00c      	add	sp, #48	; 0x30
   1dd78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1dd7c:	2302      	movs	r3, #2
   1dd7e:	f10d 080c 	add.w	r8, sp, #12
   1dd82:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   1dd86:	f8cd 8018 	str.w	r8, [sp, #24]
   1dd8a:	f8ad 3020 	strh.w	r3, [sp, #32]
   1dd8e:	2c00      	cmp	r4, #0
   1dd90:	d038      	beq.n	1de04 <am_hal_ble_patch_complete.part.0+0x108>
   1dd92:	6826      	ldr	r6, [r4, #0]
   1dd94:	4b60      	ldr	r3, [pc, #384]	; (1df18 <am_hal_ble_patch_complete.part.0+0x21c>)
   1dd96:	f026 467e 	bic.w	r6, r6, #4261412864	; 0xfe000000
   1dd9a:	429e      	cmp	r6, r3
   1dd9c:	d132      	bne.n	1de04 <am_hal_ble_patch_complete.part.0+0x108>
   1dd9e:	a906      	add	r1, sp, #24
   1dda0:	4620      	mov	r0, r4
   1dda2:	f7fe ff0b 	bl	1cbbc <am_hal_ble_blocking_transfer.part.0>
   1dda6:	4605      	mov	r5, r0
   1dda8:	bb68      	cbnz	r0, 1de06 <am_hal_ble_patch_complete.part.0+0x10a>
   1ddaa:	f89d 200d 	ldrb.w	r2, [sp, #13]
   1ddae:	2aee      	cmp	r2, #238	; 0xee
   1ddb0:	d037      	beq.n	1de22 <am_hal_ble_patch_complete.part.0+0x126>
   1ddb2:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1ddb6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   1ddba:	6822      	ldr	r2, [r4, #0]
   1ddbc:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   1ddc0:	b29b      	uxth	r3, r3
   1ddc2:	42b2      	cmp	r2, r6
   1ddc4:	f8ad 3020 	strh.w	r3, [sp, #32]
   1ddc8:	d11c      	bne.n	1de04 <am_hal_ble_patch_complete.part.0+0x108>
   1ddca:	b133      	cbz	r3, 1ddda <am_hal_ble_patch_complete.part.0+0xde>
   1ddcc:	a906      	add	r1, sp, #24
   1ddce:	4620      	mov	r0, r4
   1ddd0:	f7fe fef4 	bl	1cbbc <am_hal_ble_blocking_transfer.part.0>
   1ddd4:	2800      	cmp	r0, #0
   1ddd6:	f040 8094 	bne.w	1df02 <am_hal_ble_patch_complete.part.0+0x206>
   1ddda:	2301      	movs	r3, #1
   1dddc:	4628      	mov	r0, r5
   1ddde:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
   1dde2:	b00c      	add	sp, #48	; 0x30
   1dde4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1dde8:	6826      	ldr	r6, [r4, #0]
   1ddea:	4b4b      	ldr	r3, [pc, #300]	; (1df18 <am_hal_ble_patch_complete.part.0+0x21c>)
   1ddec:	f8cd 8018 	str.w	r8, [sp, #24]
   1ddf0:	f026 467e 	bic.w	r6, r6, #4261412864	; 0xfe000000
   1ddf4:	2702      	movs	r7, #2
   1ddf6:	2209      	movs	r2, #9
   1ddf8:	429e      	cmp	r6, r3
   1ddfa:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
   1ddfe:	f8ad 2020 	strh.w	r2, [sp, #32]
   1de02:	d054      	beq.n	1deae <am_hal_ble_patch_complete.part.0+0x1b2>
   1de04:	2502      	movs	r5, #2
   1de06:	4628      	mov	r0, r5
   1de08:	b00c      	add	sp, #48	; 0x30
   1de0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1de0e:	2302      	movs	r3, #2
   1de10:	f10d 080c 	add.w	r8, sp, #12
   1de14:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   1de18:	f8cd 8018 	str.w	r8, [sp, #24]
   1de1c:	f8ad 3020 	strh.w	r3, [sp, #32]
   1de20:	e7b7      	b.n	1dd92 <am_hal_ble_patch_complete.part.0+0x96>
   1de22:	6827      	ldr	r7, [r4, #0]
   1de24:	f027 477e 	bic.w	r7, r7, #4261412864	; 0xfe000000
   1de28:	2303      	movs	r3, #3
   1de2a:	42b7      	cmp	r7, r6
   1de2c:	f8ad 3020 	strh.w	r3, [sp, #32]
   1de30:	d1e8      	bne.n	1de04 <am_hal_ble_patch_complete.part.0+0x108>
   1de32:	a906      	add	r1, sp, #24
   1de34:	4620      	mov	r0, r4
   1de36:	f7fe fec1 	bl	1cbbc <am_hal_ble_blocking_transfer.part.0>
   1de3a:	4605      	mov	r5, r0
   1de3c:	2800      	cmp	r0, #0
   1de3e:	d1e2      	bne.n	1de06 <am_hal_ble_patch_complete.part.0+0x10a>
   1de40:	2301      	movs	r3, #1
   1de42:	e9cd 0007 	strd	r0, r0, [sp, #28]
   1de46:	f88d 3004 	strb.w	r3, [sp, #4]
   1de4a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   1de4e:	f103 73fe 	add.w	r3, r3, #33292288	; 0x1fc0000
   1de52:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
   1de56:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
   1de5a:	9300      	str	r3, [sp, #0]
   1de5c:	2305      	movs	r3, #5
   1de5e:	f8cd d018 	str.w	sp, [sp, #24]
   1de62:	900b      	str	r0, [sp, #44]	; 0x2c
   1de64:	f241 3688 	movw	r6, #5000	; 0x1388
   1de68:	f8ad 3020 	strh.w	r3, [sp, #32]
   1de6c:	6823      	ldr	r3, [r4, #0]
   1de6e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1de72:	42bb      	cmp	r3, r7
   1de74:	a906      	add	r1, sp, #24
   1de76:	4620      	mov	r0, r4
   1de78:	d1c4      	bne.n	1de04 <am_hal_ble_patch_complete.part.0+0x108>
   1de7a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   1de7e:	b133      	cbz	r3, 1de8e <am_hal_ble_patch_complete.part.0+0x192>
   1de80:	f7fe fe9c 	bl	1cbbc <am_hal_ble_blocking_transfer.part.0>
   1de84:	4605      	mov	r5, r0
   1de86:	b110      	cbz	r0, 1de8e <am_hal_ble_patch_complete.part.0+0x192>
   1de88:	3e01      	subs	r6, #1
   1de8a:	d1ef      	bne.n	1de6c <am_hal_ble_patch_complete.part.0+0x170>
   1de8c:	e7bb      	b.n	1de06 <am_hal_ble_patch_complete.part.0+0x10a>
   1de8e:	4e23      	ldr	r6, [pc, #140]	; (1df1c <am_hal_ble_patch_complete.part.0+0x220>)
   1de90:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   1de94:	0618      	lsls	r0, r3, #24
   1de96:	d4a7      	bmi.n	1dde8 <am_hal_ble_patch_complete.part.0+0xec>
   1de98:	4d21      	ldr	r5, [pc, #132]	; (1df20 <am_hal_ble_patch_complete.part.0+0x224>)
   1de9a:	2010      	movs	r0, #16
   1de9c:	f000 fbba 	bl	1e614 <am_hal_flash_delay>
   1dea0:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   1dea4:	0619      	lsls	r1, r3, #24
   1dea6:	d49f      	bmi.n	1dde8 <am_hal_ble_patch_complete.part.0+0xec>
   1dea8:	3d01      	subs	r5, #1
   1deaa:	d1f6      	bne.n	1de9a <am_hal_ble_patch_complete.part.0+0x19e>
   1deac:	e761      	b.n	1dd72 <am_hal_ble_patch_complete.part.0+0x76>
   1deae:	a906      	add	r1, sp, #24
   1deb0:	4620      	mov	r0, r4
   1deb2:	f7fe fe83 	bl	1cbbc <am_hal_ble_blocking_transfer.part.0>
   1deb6:	4605      	mov	r5, r0
   1deb8:	2800      	cmp	r0, #0
   1deba:	d1a4      	bne.n	1de06 <am_hal_ble_patch_complete.part.0+0x10a>
   1debc:	6823      	ldr	r3, [r4, #0]
   1debe:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1dec2:	42b3      	cmp	r3, r6
   1dec4:	d106      	bne.n	1ded4 <am_hal_ble_patch_complete.part.0+0x1d8>
   1dec6:	4b15      	ldr	r3, [pc, #84]	; (1df1c <am_hal_ble_patch_complete.part.0+0x220>)
   1dec8:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   1decc:	f367 0283 	bfi	r2, r7, #2, #2
   1ded0:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   1ded4:	2301      	movs	r3, #1
   1ded6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
   1deda:	4813      	ldr	r0, [pc, #76]	; (1df28 <am_hal_ble_patch_complete.part.0+0x22c>)
   1dedc:	f000 fb9a 	bl	1e614 <am_hal_flash_delay>
   1dee0:	4b12      	ldr	r3, [pc, #72]	; (1df2c <am_hal_ble_patch_complete.part.0+0x230>)
   1dee2:	4a13      	ldr	r2, [pc, #76]	; (1df30 <am_hal_ble_patch_complete.part.0+0x234>)
   1dee4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
   1dee8:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
   1deec:	4291      	cmp	r1, r2
   1deee:	d18a      	bne.n	1de06 <am_hal_ble_patch_complete.part.0+0x10a>
   1def0:	b2d9      	uxtb	r1, r3
   1def2:	f1a1 0320 	sub.w	r3, r1, #32
   1def6:	2b30      	cmp	r3, #48	; 0x30
   1def8:	d885      	bhi.n	1de06 <am_hal_ble_patch_complete.part.0+0x10a>
   1defa:	4620      	mov	r0, r4
   1defc:	f7ff fe9a 	bl	1dc34 <am_hal_ble_transmitter_modex_set>
   1df00:	e781      	b.n	1de06 <am_hal_ble_patch_complete.part.0+0x10a>
   1df02:	4605      	mov	r5, r0
   1df04:	e77f      	b.n	1de06 <am_hal_ble_patch_complete.part.0+0x10a>
   1df06:	4b05      	ldr	r3, [pc, #20]	; (1df1c <am_hal_ble_patch_complete.part.0+0x220>)
   1df08:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   1df0c:	061a      	lsls	r2, r3, #24
   1df0e:	f57f af25 	bpl.w	1dd5c <am_hal_ble_patch_complete.part.0+0x60>
   1df12:	e777      	b.n	1de04 <am_hal_ble_patch_complete.part.0+0x108>
   1df14:	02f1ee01 	.word	0x02f1ee01
   1df18:	01775230 	.word	0x01775230
   1df1c:	5000c000 	.word	0x5000c000
   1df20:	000186a0 	.word	0x000186a0
   1df24:	08000004 	.word	0x08000004
   1df28:	007a1200 	.word	0x007a1200
   1df2c:	50023000 	.word	0x50023000
   1df30:	18240600 	.word	0x18240600

0001df34 <am_hal_ble_boot>:
   1df34:	2800      	cmp	r0, #0
   1df36:	d06c      	beq.n	1e012 <am_hal_ble_boot+0xde>
   1df38:	b530      	push	{r4, r5, lr}
   1df3a:	6803      	ldr	r3, [r0, #0]
   1df3c:	4a36      	ldr	r2, [pc, #216]	; (1e018 <am_hal_ble_boot+0xe4>)
   1df3e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1df42:	4293      	cmp	r3, r2
   1df44:	b083      	sub	sp, #12
   1df46:	4604      	mov	r4, r0
   1df48:	d137      	bne.n	1dfba <am_hal_ble_boot+0x86>
   1df4a:	7a03      	ldrb	r3, [r0, #8]
   1df4c:	b1f3      	cbz	r3, 1df8c <am_hal_ble_boot+0x58>
   1df4e:	4a33      	ldr	r2, [pc, #204]	; (1e01c <am_hal_ble_boot+0xe8>)
   1df50:	68d3      	ldr	r3, [r2, #12]
   1df52:	b2db      	uxtb	r3, r3
   1df54:	2b11      	cmp	r3, #17
   1df56:	d039      	beq.n	1dfcc <am_hal_ble_boot+0x98>
   1df58:	68d3      	ldr	r3, [r2, #12]
   1df5a:	b2db      	uxtb	r3, r3
   1df5c:	2b12      	cmp	r3, #18
   1df5e:	d035      	beq.n	1dfcc <am_hal_ble_boot+0x98>
   1df60:	4620      	mov	r0, r4
   1df62:	f7ff fc9b 	bl	1d89c <am_hal_ble_default_trim_set_ramcode>
   1df66:	b108      	cbz	r0, 1df6c <am_hal_ble_boot+0x38>
   1df68:	b003      	add	sp, #12
   1df6a:	bd30      	pop	{r4, r5, pc}
   1df6c:	4620      	mov	r0, r4
   1df6e:	f7ff fc4f 	bl	1d810 <am_hal_ble_default_patch_apply>
   1df72:	2800      	cmp	r0, #0
   1df74:	d1f8      	bne.n	1df68 <am_hal_ble_boot+0x34>
   1df76:	6823      	ldr	r3, [r4, #0]
   1df78:	4a27      	ldr	r2, [pc, #156]	; (1e018 <am_hal_ble_boot+0xe4>)
   1df7a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1df7e:	4293      	cmp	r3, r2
   1df80:	d11b      	bne.n	1dfba <am_hal_ble_boot+0x86>
   1df82:	4620      	mov	r0, r4
   1df84:	f7ff feba 	bl	1dcfc <am_hal_ble_patch_complete.part.0>
   1df88:	2800      	cmp	r0, #0
   1df8a:	d1ed      	bne.n	1df68 <am_hal_ble_boot+0x34>
   1df8c:	4b23      	ldr	r3, [pc, #140]	; (1e01c <am_hal_ble_boot+0xe8>)
   1df8e:	f04f 32ff 	mov.w	r2, #4294967295
   1df92:	9201      	str	r2, [sp, #4]
   1df94:	68db      	ldr	r3, [r3, #12]
   1df96:	b2db      	uxtb	r3, r3
   1df98:	2b21      	cmp	r3, #33	; 0x21
   1df9a:	d011      	beq.n	1dfc0 <am_hal_ble_boot+0x8c>
   1df9c:	4920      	ldr	r1, [pc, #128]	; (1e020 <am_hal_ble_boot+0xec>)
   1df9e:	aa01      	add	r2, sp, #4
   1dfa0:	4620      	mov	r0, r4
   1dfa2:	f7ff fd65 	bl	1da70 <am_hal_ble_plf_reg_read>
   1dfa6:	9b01      	ldr	r3, [sp, #4]
   1dfa8:	481e      	ldr	r0, [pc, #120]	; (1e024 <am_hal_ble_boot+0xf0>)
   1dfaa:	f5a3 43f6 	sub.w	r3, r3, #31488	; 0x7b00
   1dfae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   1dfb2:	bf98      	it	ls
   1dfb4:	2000      	movls	r0, #0
   1dfb6:	b003      	add	sp, #12
   1dfb8:	bd30      	pop	{r4, r5, pc}
   1dfba:	2002      	movs	r0, #2
   1dfbc:	b003      	add	sp, #12
   1dfbe:	bd30      	pop	{r4, r5, pc}
   1dfc0:	4919      	ldr	r1, [pc, #100]	; (1e028 <am_hal_ble_boot+0xf4>)
   1dfc2:	aa01      	add	r2, sp, #4
   1dfc4:	4620      	mov	r0, r4
   1dfc6:	f7ff fd53 	bl	1da70 <am_hal_ble_plf_reg_read>
   1dfca:	e7ec      	b.n	1dfa6 <am_hal_ble_boot+0x72>
   1dfcc:	4b17      	ldr	r3, [pc, #92]	; (1e02c <am_hal_ble_boot+0xf8>)
   1dfce:	681b      	ldr	r3, [r3, #0]
   1dfd0:	6819      	ldr	r1, [r3, #0]
   1dfd2:	684b      	ldr	r3, [r1, #4]
   1dfd4:	68ca      	ldr	r2, [r1, #12]
   1dfd6:	b183      	cbz	r3, 1dffa <am_hal_ble_boot+0xc6>
   1dfd8:	3b01      	subs	r3, #1
   1dfda:	4d15      	ldr	r5, [pc, #84]	; (1e030 <am_hal_ble_boot+0xfc>)
   1dfdc:	eb02 0c03 	add.w	ip, r2, r3
   1dfe0:	1e50      	subs	r0, r2, #1
   1dfe2:	2300      	movs	r3, #0
   1dfe4:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   1dfe8:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
   1dfec:	4560      	cmp	r0, ip
   1dfee:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
   1dff2:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
   1dff6:	b29b      	uxth	r3, r3
   1dff8:	d1f4      	bne.n	1dfe4 <am_hal_ble_boot+0xb0>
   1dffa:	608b      	str	r3, [r1, #8]
   1dffc:	4620      	mov	r0, r4
   1dffe:	f7ff f9e9 	bl	1d3d4 <am_hal_ble_patch_apply>
   1e002:	2800      	cmp	r0, #0
   1e004:	d1b0      	bne.n	1df68 <am_hal_ble_boot+0x34>
   1e006:	4620      	mov	r0, r4
   1e008:	f7ff fb78 	bl	1d6fc <am_hal_ble_patch_copy_end_apply>
   1e00c:	2800      	cmp	r0, #0
   1e00e:	d0a7      	beq.n	1df60 <am_hal_ble_boot+0x2c>
   1e010:	e7aa      	b.n	1df68 <am_hal_ble_boot+0x34>
   1e012:	2002      	movs	r0, #2
   1e014:	4770      	bx	lr
   1e016:	bf00      	nop
   1e018:	01775230 	.word	0x01775230
   1e01c:	40020000 	.word	0x40020000
   1e020:	20006054 	.word	0x20006054
   1e024:	0800000b 	.word	0x0800000b
   1e028:	20006858 	.word	0x20006858
   1e02c:	10002dc4 	.word	0x10002dc4
   1e030:	00020744 	.word	0x00020744

0001e034 <am_hal_ble_tx_power_set>:
   1e034:	b530      	push	{r4, r5, lr}
   1e036:	b083      	sub	sp, #12
   1e038:	4604      	mov	r4, r0
   1e03a:	2300      	movs	r3, #0
   1e03c:	460d      	mov	r5, r1
   1e03e:	466a      	mov	r2, sp
   1e040:	491a      	ldr	r1, [pc, #104]	; (1e0ac <am_hal_ble_tx_power_set+0x78>)
   1e042:	9301      	str	r3, [sp, #4]
   1e044:	f7ff fd14 	bl	1da70 <am_hal_ble_plf_reg_read>
   1e048:	4918      	ldr	r1, [pc, #96]	; (1e0ac <am_hal_ble_tx_power_set+0x78>)
   1e04a:	f04f 32ff 	mov.w	r2, #4294967295
   1e04e:	4620      	mov	r0, r4
   1e050:	f7ff fd82 	bl	1db58 <am_hal_ble_plf_reg_write>
   1e054:	042a      	lsls	r2, r5, #16
   1e056:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   1e05a:	4915      	ldr	r1, [pc, #84]	; (1e0b0 <am_hal_ble_tx_power_set+0x7c>)
   1e05c:	f042 0208 	orr.w	r2, r2, #8
   1e060:	4620      	mov	r0, r4
   1e062:	f7ff fd79 	bl	1db58 <am_hal_ble_plf_reg_write>
   1e066:	4911      	ldr	r1, [pc, #68]	; (1e0ac <am_hal_ble_tx_power_set+0x78>)
   1e068:	9a00      	ldr	r2, [sp, #0]
   1e06a:	4620      	mov	r0, r4
   1e06c:	f7ff fd74 	bl	1db58 <am_hal_ble_plf_reg_write>
   1e070:	4b10      	ldr	r3, [pc, #64]	; (1e0b4 <am_hal_ble_tx_power_set+0x80>)
   1e072:	68db      	ldr	r3, [r3, #12]
   1e074:	b2db      	uxtb	r3, r3
   1e076:	2b21      	cmp	r3, #33	; 0x21
   1e078:	bf0c      	ite	eq
   1e07a:	490f      	ldreq	r1, [pc, #60]	; (1e0b8 <am_hal_ble_tx_power_set+0x84>)
   1e07c:	490f      	ldrne	r1, [pc, #60]	; (1e0bc <am_hal_ble_tx_power_set+0x88>)
   1e07e:	aa01      	add	r2, sp, #4
   1e080:	4620      	mov	r0, r4
   1e082:	f7ff fcf5 	bl	1da70 <am_hal_ble_plf_reg_read>
   1e086:	9b01      	ldr	r3, [sp, #4]
   1e088:	490a      	ldr	r1, [pc, #40]	; (1e0b4 <am_hal_ble_tx_power_set+0x80>)
   1e08a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1e08e:	ea43 0205 	orr.w	r2, r3, r5
   1e092:	9201      	str	r2, [sp, #4]
   1e094:	68cb      	ldr	r3, [r1, #12]
   1e096:	b2db      	uxtb	r3, r3
   1e098:	2b21      	cmp	r3, #33	; 0x21
   1e09a:	bf0c      	ite	eq
   1e09c:	4906      	ldreq	r1, [pc, #24]	; (1e0b8 <am_hal_ble_tx_power_set+0x84>)
   1e09e:	4907      	ldrne	r1, [pc, #28]	; (1e0bc <am_hal_ble_tx_power_set+0x88>)
   1e0a0:	4620      	mov	r0, r4
   1e0a2:	f7ff fd59 	bl	1db58 <am_hal_ble_plf_reg_write>
   1e0a6:	2000      	movs	r0, #0
   1e0a8:	b003      	add	sp, #12
   1e0aa:	bd30      	pop	{r4, r5, pc}
   1e0ac:	43000004 	.word	0x43000004
   1e0b0:	52400018 	.word	0x52400018
   1e0b4:	40020000 	.word	0x40020000
   1e0b8:	20006838 	.word	0x20006838
   1e0bc:	20006038 	.word	0x20006038

0001e0c0 <am_hal_cachectrl_config>:
   1e0c0:	b530      	push	{r4, r5, lr}
   1e0c2:	b083      	sub	sp, #12
   1e0c4:	4604      	mov	r4, r0
   1e0c6:	f000 fcb3 	bl	1ea30 <am_hal_interrupt_master_disable>
   1e0ca:	4d0e      	ldr	r5, [pc, #56]	; (1e104 <am_hal_cachectrl_config+0x44>)
   1e0cc:	9001      	str	r0, [sp, #4]
   1e0ce:	682b      	ldr	r3, [r5, #0]
   1e0d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   1e0d4:	602b      	str	r3, [r5, #0]
   1e0d6:	9801      	ldr	r0, [sp, #4]
   1e0d8:	f000 fcae 	bl	1ea38 <am_hal_interrupt_master_set>
   1e0dc:	7863      	ldrb	r3, [r4, #1]
   1e0de:	7822      	ldrb	r2, [r4, #0]
   1e0e0:	78a1      	ldrb	r1, [r4, #2]
   1e0e2:	021b      	lsls	r3, r3, #8
   1e0e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
   1e0e8:	0112      	lsls	r2, r2, #4
   1e0ea:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
   1e0ee:	b2d2      	uxtb	r2, r2
   1e0f0:	4313      	orrs	r3, r2
   1e0f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1e0f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1e0fa:	2000      	movs	r0, #0
   1e0fc:	602b      	str	r3, [r5, #0]
   1e0fe:	b003      	add	sp, #12
   1e100:	bd30      	pop	{r4, r5, pc}
   1e102:	bf00      	nop
   1e104:	40018000 	.word	0x40018000

0001e108 <am_hal_cachectrl_enable>:
   1e108:	4a03      	ldr	r2, [pc, #12]	; (1e118 <am_hal_cachectrl_enable+0x10>)
   1e10a:	6813      	ldr	r3, [r2, #0]
   1e10c:	f043 0301 	orr.w	r3, r3, #1
   1e110:	2000      	movs	r0, #0
   1e112:	6013      	str	r3, [r2, #0]
   1e114:	4770      	bx	lr
   1e116:	bf00      	nop
   1e118:	40018000 	.word	0x40018000

0001e11c <am_hal_cachectrl_control>:
   1e11c:	b510      	push	{r4, lr}
   1e11e:	3801      	subs	r0, #1
   1e120:	b08e      	sub	sp, #56	; 0x38
   1e122:	2810      	cmp	r0, #16
   1e124:	f200 815e 	bhi.w	1e3e4 <am_hal_cachectrl_control+0x2c8>
   1e128:	e8df f010 	tbh	[pc, r0, lsl #1]
   1e12c:	00360018 	.word	0x00360018
   1e130:	0040003d 	.word	0x0040003d
   1e134:	00450043 	.word	0x00450043
   1e138:	0011001a 	.word	0x0011001a
   1e13c:	00540047 	.word	0x00540047
   1e140:	009a0061 	.word	0x009a0061
   1e144:	010c00d3 	.word	0x010c00d3
   1e148:	013f0126 	.word	0x013f0126
   1e14c:	001d      	.short	0x001d
   1e14e:	f44f 7300 	mov.w	r3, #512	; 0x200
   1e152:	4aac      	ldr	r2, [pc, #688]	; (1e404 <am_hal_cachectrl_control+0x2e8>)
   1e154:	2000      	movs	r0, #0
   1e156:	6093      	str	r3, [r2, #8]
   1e158:	b00e      	add	sp, #56	; 0x38
   1e15a:	bd10      	pop	{r4, pc}
   1e15c:	2301      	movs	r3, #1
   1e15e:	e7f8      	b.n	1e152 <am_hal_cachectrl_control+0x36>
   1e160:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1e164:	e7f5      	b.n	1e152 <am_hal_cachectrl_control+0x36>
   1e166:	2900      	cmp	r1, #0
   1e168:	f000 813c 	beq.w	1e3e4 <am_hal_cachectrl_control+0x2c8>
   1e16c:	684a      	ldr	r2, [r1, #4]
   1e16e:	48a6      	ldr	r0, [pc, #664]	; (1e408 <am_hal_cachectrl_control+0x2ec>)
   1e170:	4202      	tst	r2, r0
   1e172:	f040 8137 	bne.w	1e3e4 <am_hal_cachectrl_control+0x2c8>
   1e176:	688b      	ldr	r3, [r1, #8]
   1e178:	4018      	ands	r0, r3
   1e17a:	f040 8133 	bne.w	1e3e4 <am_hal_cachectrl_control+0x2c8>
   1e17e:	780c      	ldrb	r4, [r1, #0]
   1e180:	2c00      	cmp	r4, #0
   1e182:	f040 8133 	bne.w	1e3ec <am_hal_cachectrl_control+0x2d0>
   1e186:	4c9f      	ldr	r4, [pc, #636]	; (1e404 <am_hal_cachectrl_control+0x2e8>)
   1e188:	7849      	ldrb	r1, [r1, #1]
   1e18a:	6122      	str	r2, [r4, #16]
   1e18c:	6163      	str	r3, [r4, #20]
   1e18e:	6823      	ldr	r3, [r4, #0]
   1e190:	f361 0382 	bfi	r3, r1, #2, #1
   1e194:	6023      	str	r3, [r4, #0]
   1e196:	e7df      	b.n	1e158 <am_hal_cachectrl_control+0x3c>
   1e198:	4b9a      	ldr	r3, [pc, #616]	; (1e404 <am_hal_cachectrl_control+0x2e8>)
   1e19a:	681b      	ldr	r3, [r3, #0]
   1e19c:	01db      	lsls	r3, r3, #7
   1e19e:	f140 811f 	bpl.w	1e3e0 <am_hal_cachectrl_control+0x2c4>
   1e1a2:	2302      	movs	r3, #2
   1e1a4:	e7d5      	b.n	1e152 <am_hal_cachectrl_control+0x36>
   1e1a6:	f44f 6388 	mov.w	r3, #1088	; 0x440
   1e1aa:	e7d2      	b.n	1e152 <am_hal_cachectrl_control+0x36>
   1e1ac:	f44f 7308 	mov.w	r3, #544	; 0x220
   1e1b0:	e7cf      	b.n	1e152 <am_hal_cachectrl_control+0x36>
   1e1b2:	2340      	movs	r3, #64	; 0x40
   1e1b4:	e7cd      	b.n	1e152 <am_hal_cachectrl_control+0x36>
   1e1b6:	2320      	movs	r3, #32
   1e1b8:	e7cb      	b.n	1e152 <am_hal_cachectrl_control+0x36>
   1e1ba:	f000 fc39 	bl	1ea30 <am_hal_interrupt_master_disable>
   1e1be:	4a91      	ldr	r2, [pc, #580]	; (1e404 <am_hal_cachectrl_control+0x2e8>)
   1e1c0:	9000      	str	r0, [sp, #0]
   1e1c2:	6813      	ldr	r3, [r2, #0]
   1e1c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1e1c8:	6013      	str	r3, [r2, #0]
   1e1ca:	9800      	ldr	r0, [sp, #0]
   1e1cc:	f000 fc34 	bl	1ea38 <am_hal_interrupt_master_set>
   1e1d0:	2000      	movs	r0, #0
   1e1d2:	e7c1      	b.n	1e158 <am_hal_cachectrl_control+0x3c>
   1e1d4:	f000 fc2c 	bl	1ea30 <am_hal_interrupt_master_disable>
   1e1d8:	4a8a      	ldr	r2, [pc, #552]	; (1e404 <am_hal_cachectrl_control+0x2e8>)
   1e1da:	9001      	str	r0, [sp, #4]
   1e1dc:	6813      	ldr	r3, [r2, #0]
   1e1de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1e1e2:	6013      	str	r3, [r2, #0]
   1e1e4:	9801      	ldr	r0, [sp, #4]
   1e1e6:	f000 fc27 	bl	1ea38 <am_hal_interrupt_master_set>
   1e1ea:	2000      	movs	r0, #0
   1e1ec:	e7b4      	b.n	1e158 <am_hal_cachectrl_control+0x3c>
   1e1ee:	f000 fc1f 	bl	1ea30 <am_hal_interrupt_master_disable>
   1e1f2:	4603      	mov	r3, r0
   1e1f4:	4885      	ldr	r0, [pc, #532]	; (1e40c <am_hal_cachectrl_control+0x2f0>)
   1e1f6:	9302      	str	r3, [sp, #8]
   1e1f8:	f000 fa52 	bl	1e6a0 <am_hal_flash_load_ui32>
   1e1fc:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
   1e200:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
   1e204:	4881      	ldr	r0, [pc, #516]	; (1e40c <am_hal_cachectrl_control+0x2f0>)
   1e206:	f000 fa4f 	bl	1e6a8 <am_hal_flash_store_ui32>
   1e20a:	9802      	ldr	r0, [sp, #8]
   1e20c:	f000 fc14 	bl	1ea38 <am_hal_interrupt_master_set>
   1e210:	f000 fc0e 	bl	1ea30 <am_hal_interrupt_master_disable>
   1e214:	4603      	mov	r3, r0
   1e216:	487d      	ldr	r0, [pc, #500]	; (1e40c <am_hal_cachectrl_control+0x2f0>)
   1e218:	9303      	str	r3, [sp, #12]
   1e21a:	f000 fa41 	bl	1e6a0 <am_hal_flash_load_ui32>
   1e21e:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
   1e222:	f440 61ee 	orr.w	r1, r0, #1904	; 0x770
   1e226:	4879      	ldr	r0, [pc, #484]	; (1e40c <am_hal_cachectrl_control+0x2f0>)
   1e228:	f000 fa3e 	bl	1e6a8 <am_hal_flash_store_ui32>
   1e22c:	9803      	ldr	r0, [sp, #12]
   1e22e:	f000 fc03 	bl	1ea38 <am_hal_interrupt_master_set>
   1e232:	f000 fbfd 	bl	1ea30 <am_hal_interrupt_master_disable>
   1e236:	4603      	mov	r3, r0
   1e238:	4874      	ldr	r0, [pc, #464]	; (1e40c <am_hal_cachectrl_control+0x2f0>)
   1e23a:	9304      	str	r3, [sp, #16]
   1e23c:	f000 fa30 	bl	1e6a0 <am_hal_flash_load_ui32>
   1e240:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
   1e244:	f020 000f 	bic.w	r0, r0, #15
   1e248:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
   1e24c:	f041 0103 	orr.w	r1, r1, #3
   1e250:	486e      	ldr	r0, [pc, #440]	; (1e40c <am_hal_cachectrl_control+0x2f0>)
   1e252:	f000 fa29 	bl	1e6a8 <am_hal_flash_store_ui32>
   1e256:	9804      	ldr	r0, [sp, #16]
   1e258:	f000 fbee 	bl	1ea38 <am_hal_interrupt_master_set>
   1e25c:	2000      	movs	r0, #0
   1e25e:	e77b      	b.n	1e158 <am_hal_cachectrl_control+0x3c>
   1e260:	f000 fbe6 	bl	1ea30 <am_hal_interrupt_master_disable>
   1e264:	4603      	mov	r3, r0
   1e266:	4869      	ldr	r0, [pc, #420]	; (1e40c <am_hal_cachectrl_control+0x2f0>)
   1e268:	9305      	str	r3, [sp, #20]
   1e26a:	f000 fa19 	bl	1e6a0 <am_hal_flash_load_ui32>
   1e26e:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
   1e272:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
   1e276:	4865      	ldr	r0, [pc, #404]	; (1e40c <am_hal_cachectrl_control+0x2f0>)
   1e278:	f000 fa16 	bl	1e6a8 <am_hal_flash_store_ui32>
   1e27c:	9805      	ldr	r0, [sp, #20]
   1e27e:	f000 fbdb 	bl	1ea38 <am_hal_interrupt_master_set>
   1e282:	f000 fbd5 	bl	1ea30 <am_hal_interrupt_master_disable>
   1e286:	4603      	mov	r3, r0
   1e288:	4860      	ldr	r0, [pc, #384]	; (1e40c <am_hal_cachectrl_control+0x2f0>)
   1e28a:	9306      	str	r3, [sp, #24]
   1e28c:	f000 fa08 	bl	1e6a0 <am_hal_flash_load_ui32>
   1e290:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
   1e294:	f440 61ea 	orr.w	r1, r0, #1872	; 0x750
   1e298:	485c      	ldr	r0, [pc, #368]	; (1e40c <am_hal_cachectrl_control+0x2f0>)
   1e29a:	f000 fa05 	bl	1e6a8 <am_hal_flash_store_ui32>
   1e29e:	9806      	ldr	r0, [sp, #24]
   1e2a0:	f000 fbca 	bl	1ea38 <am_hal_interrupt_master_set>
   1e2a4:	f000 fbc4 	bl	1ea30 <am_hal_interrupt_master_disable>
   1e2a8:	4603      	mov	r3, r0
   1e2aa:	4858      	ldr	r0, [pc, #352]	; (1e40c <am_hal_cachectrl_control+0x2f0>)
   1e2ac:	9307      	str	r3, [sp, #28]
   1e2ae:	f000 f9f7 	bl	1e6a0 <am_hal_flash_load_ui32>
   1e2b2:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
   1e2b6:	f020 000f 	bic.w	r0, r0, #15
   1e2ba:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
   1e2be:	f041 0101 	orr.w	r1, r1, #1
   1e2c2:	4852      	ldr	r0, [pc, #328]	; (1e40c <am_hal_cachectrl_control+0x2f0>)
   1e2c4:	f000 f9f0 	bl	1e6a8 <am_hal_flash_store_ui32>
   1e2c8:	9807      	ldr	r0, [sp, #28]
   1e2ca:	f000 fbb5 	bl	1ea38 <am_hal_interrupt_master_set>
   1e2ce:	2000      	movs	r0, #0
   1e2d0:	e742      	b.n	1e158 <am_hal_cachectrl_control+0x3c>
   1e2d2:	f000 fbad 	bl	1ea30 <am_hal_interrupt_master_disable>
   1e2d6:	4603      	mov	r3, r0
   1e2d8:	484c      	ldr	r0, [pc, #304]	; (1e40c <am_hal_cachectrl_control+0x2f0>)
   1e2da:	9308      	str	r3, [sp, #32]
   1e2dc:	f000 f9e0 	bl	1e6a0 <am_hal_flash_load_ui32>
   1e2e0:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
   1e2e4:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
   1e2e8:	4848      	ldr	r0, [pc, #288]	; (1e40c <am_hal_cachectrl_control+0x2f0>)
   1e2ea:	f000 f9dd 	bl	1e6a8 <am_hal_flash_store_ui32>
   1e2ee:	9808      	ldr	r0, [sp, #32]
   1e2f0:	f000 fba2 	bl	1ea38 <am_hal_interrupt_master_set>
   1e2f4:	f000 fb9c 	bl	1ea30 <am_hal_interrupt_master_disable>
   1e2f8:	4603      	mov	r3, r0
   1e2fa:	4844      	ldr	r0, [pc, #272]	; (1e40c <am_hal_cachectrl_control+0x2f0>)
   1e2fc:	9309      	str	r3, [sp, #36]	; 0x24
   1e2fe:	f000 f9cf 	bl	1e6a0 <am_hal_flash_load_ui32>
   1e302:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
   1e306:	f440 61ec 	orr.w	r1, r0, #1888	; 0x760
   1e30a:	4840      	ldr	r0, [pc, #256]	; (1e40c <am_hal_cachectrl_control+0x2f0>)
   1e30c:	f000 f9cc 	bl	1e6a8 <am_hal_flash_store_ui32>
   1e310:	9809      	ldr	r0, [sp, #36]	; 0x24
   1e312:	f000 fb91 	bl	1ea38 <am_hal_interrupt_master_set>
   1e316:	f000 fb8b 	bl	1ea30 <am_hal_interrupt_master_disable>
   1e31a:	4603      	mov	r3, r0
   1e31c:	483b      	ldr	r0, [pc, #236]	; (1e40c <am_hal_cachectrl_control+0x2f0>)
   1e31e:	930a      	str	r3, [sp, #40]	; 0x28
   1e320:	f000 f9be 	bl	1e6a0 <am_hal_flash_load_ui32>
   1e324:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
   1e328:	f020 000f 	bic.w	r0, r0, #15
   1e32c:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
   1e330:	f041 0101 	orr.w	r1, r1, #1
   1e334:	4835      	ldr	r0, [pc, #212]	; (1e40c <am_hal_cachectrl_control+0x2f0>)
   1e336:	f000 f9b7 	bl	1e6a8 <am_hal_flash_store_ui32>
   1e33a:	980a      	ldr	r0, [sp, #40]	; 0x28
   1e33c:	f000 fb7c 	bl	1ea38 <am_hal_interrupt_master_set>
   1e340:	2000      	movs	r0, #0
   1e342:	e709      	b.n	1e158 <am_hal_cachectrl_control+0x3c>
   1e344:	2900      	cmp	r1, #0
   1e346:	d04d      	beq.n	1e3e4 <am_hal_cachectrl_control+0x2c8>
   1e348:	680c      	ldr	r4, [r1, #0]
   1e34a:	2c03      	cmp	r4, #3
   1e34c:	d84c      	bhi.n	1e3e8 <am_hal_cachectrl_control+0x2cc>
   1e34e:	f000 fb6f 	bl	1ea30 <am_hal_interrupt_master_disable>
   1e352:	4603      	mov	r3, r0
   1e354:	482d      	ldr	r0, [pc, #180]	; (1e40c <am_hal_cachectrl_control+0x2f0>)
   1e356:	930b      	str	r3, [sp, #44]	; 0x2c
   1e358:	f000 f9a2 	bl	1e6a0 <am_hal_flash_load_ui32>
   1e35c:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
   1e360:	ea40 3104 	orr.w	r1, r0, r4, lsl #12
   1e364:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   1e368:	4828      	ldr	r0, [pc, #160]	; (1e40c <am_hal_cachectrl_control+0x2f0>)
   1e36a:	f000 f99d 	bl	1e6a8 <am_hal_flash_store_ui32>
   1e36e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1e370:	f000 fb62 	bl	1ea38 <am_hal_interrupt_master_set>
   1e374:	2000      	movs	r0, #0
   1e376:	e6ef      	b.n	1e158 <am_hal_cachectrl_control+0x3c>
   1e378:	b3a1      	cbz	r1, 1e3e4 <am_hal_cachectrl_control+0x2c8>
   1e37a:	680c      	ldr	r4, [r1, #0]
   1e37c:	2c07      	cmp	r4, #7
   1e37e:	d833      	bhi.n	1e3e8 <am_hal_cachectrl_control+0x2cc>
   1e380:	f000 fb56 	bl	1ea30 <am_hal_interrupt_master_disable>
   1e384:	4603      	mov	r3, r0
   1e386:	4821      	ldr	r0, [pc, #132]	; (1e40c <am_hal_cachectrl_control+0x2f0>)
   1e388:	930c      	str	r3, [sp, #48]	; 0x30
   1e38a:	f000 f989 	bl	1e6a0 <am_hal_flash_load_ui32>
   1e38e:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
   1e392:	ea40 1104 	orr.w	r1, r0, r4, lsl #4
   1e396:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   1e39a:	481c      	ldr	r0, [pc, #112]	; (1e40c <am_hal_cachectrl_control+0x2f0>)
   1e39c:	f000 f984 	bl	1e6a8 <am_hal_flash_store_ui32>
   1e3a0:	980c      	ldr	r0, [sp, #48]	; 0x30
   1e3a2:	f000 fb49 	bl	1ea38 <am_hal_interrupt_master_set>
   1e3a6:	2000      	movs	r0, #0
   1e3a8:	e6d6      	b.n	1e158 <am_hal_cachectrl_control+0x3c>
   1e3aa:	b1d9      	cbz	r1, 1e3e4 <am_hal_cachectrl_control+0x2c8>
   1e3ac:	680c      	ldr	r4, [r1, #0]
   1e3ae:	2c0f      	cmp	r4, #15
   1e3b0:	d81a      	bhi.n	1e3e8 <am_hal_cachectrl_control+0x2cc>
   1e3b2:	f000 fb3d 	bl	1ea30 <am_hal_interrupt_master_disable>
   1e3b6:	4603      	mov	r3, r0
   1e3b8:	4814      	ldr	r0, [pc, #80]	; (1e40c <am_hal_cachectrl_control+0x2f0>)
   1e3ba:	930d      	str	r3, [sp, #52]	; 0x34
   1e3bc:	f000 f970 	bl	1e6a0 <am_hal_flash_load_ui32>
   1e3c0:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
   1e3c4:	f020 000f 	bic.w	r0, r0, #15
   1e3c8:	ea40 0104 	orr.w	r1, r0, r4
   1e3cc:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   1e3d0:	480e      	ldr	r0, [pc, #56]	; (1e40c <am_hal_cachectrl_control+0x2f0>)
   1e3d2:	f000 f969 	bl	1e6a8 <am_hal_flash_store_ui32>
   1e3d6:	980d      	ldr	r0, [sp, #52]	; 0x34
   1e3d8:	f000 fb2e 	bl	1ea38 <am_hal_interrupt_master_set>
   1e3dc:	2000      	movs	r0, #0
   1e3de:	e6bb      	b.n	1e158 <am_hal_cachectrl_control+0x3c>
   1e3e0:	2007      	movs	r0, #7
   1e3e2:	e6b9      	b.n	1e158 <am_hal_cachectrl_control+0x3c>
   1e3e4:	2006      	movs	r0, #6
   1e3e6:	e6b7      	b.n	1e158 <am_hal_cachectrl_control+0x3c>
   1e3e8:	2001      	movs	r0, #1
   1e3ea:	e6b5      	b.n	1e158 <am_hal_cachectrl_control+0x3c>
   1e3ec:	2c01      	cmp	r4, #1
   1e3ee:	d1f9      	bne.n	1e3e4 <am_hal_cachectrl_control+0x2c8>
   1e3f0:	4c04      	ldr	r4, [pc, #16]	; (1e404 <am_hal_cachectrl_control+0x2e8>)
   1e3f2:	7849      	ldrb	r1, [r1, #1]
   1e3f4:	61a2      	str	r2, [r4, #24]
   1e3f6:	61e3      	str	r3, [r4, #28]
   1e3f8:	6823      	ldr	r3, [r4, #0]
   1e3fa:	f361 03c3 	bfi	r3, r1, #3, #1
   1e3fe:	6023      	str	r3, [r4, #0]
   1e400:	e6aa      	b.n	1e158 <am_hal_cachectrl_control+0x3c>
   1e402:	bf00      	nop
   1e404:	40018000 	.word	0x40018000
   1e408:	f800000f 	.word	0xf800000f
   1e40c:	40018004 	.word	0x40018004

0001e410 <am_hal_clkgen_control>:
   1e410:	4b49      	ldr	r3, [pc, #292]	; (1e538 <am_hal_clkgen_control+0x128>)
   1e412:	681a      	ldr	r2, [r3, #0]
   1e414:	b912      	cbnz	r2, 1e41c <am_hal_clkgen_control+0xc>
   1e416:	4a49      	ldr	r2, [pc, #292]	; (1e53c <am_hal_clkgen_control+0x12c>)
   1e418:	6812      	ldr	r2, [r2, #0]
   1e41a:	601a      	str	r2, [r3, #0]
   1e41c:	2809      	cmp	r0, #9
   1e41e:	f200 8089 	bhi.w	1e534 <am_hal_clkgen_control+0x124>
   1e422:	e8df f000 	tbb	[pc, r0]
   1e426:	160d      	.short	0x160d
   1e428:	423a261e 	.word	0x423a261e
   1e42c:	055c544c 	.word	0x055c544c
   1e430:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1e434:	2000      	movs	r0, #0
   1e436:	6a1a      	ldr	r2, [r3, #32]
   1e438:	f36f 0200 	bfc	r2, #0, #1
   1e43c:	621a      	str	r2, [r3, #32]
   1e43e:	4770      	bx	lr
   1e440:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1e444:	2200      	movs	r2, #0
   1e446:	2147      	movs	r1, #71	; 0x47
   1e448:	6159      	str	r1, [r3, #20]
   1e44a:	4610      	mov	r0, r2
   1e44c:	619a      	str	r2, [r3, #24]
   1e44e:	615a      	str	r2, [r3, #20]
   1e450:	4770      	bx	lr
   1e452:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1e456:	2000      	movs	r0, #0
   1e458:	899a      	ldrh	r2, [r3, #12]
   1e45a:	f36f 0200 	bfc	r2, #0, #1
   1e45e:	819a      	strh	r2, [r3, #12]
   1e460:	4770      	bx	lr
   1e462:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1e466:	2000      	movs	r0, #0
   1e468:	899a      	ldrh	r2, [r3, #12]
   1e46a:	f36f 0241 	bfc	r2, #1, #1
   1e46e:	819a      	strh	r2, [r3, #12]
   1e470:	4770      	bx	lr
   1e472:	4a33      	ldr	r2, [pc, #204]	; (1e540 <am_hal_clkgen_control+0x130>)
   1e474:	68d3      	ldr	r3, [r2, #12]
   1e476:	b2db      	uxtb	r3, r3
   1e478:	2b21      	cmp	r3, #33	; 0x21
   1e47a:	d106      	bne.n	1e48a <am_hal_clkgen_control+0x7a>
   1e47c:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
   1e480:	2101      	movs	r1, #1
   1e482:	f361 2309 	bfi	r3, r1, #8, #2
   1e486:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
   1e48a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   1e48e:	2000      	movs	r0, #0
   1e490:	8993      	ldrh	r3, [r2, #12]
   1e492:	f043 0301 	orr.w	r3, r3, #1
   1e496:	8193      	strh	r3, [r2, #12]
   1e498:	4770      	bx	lr
   1e49a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   1e49e:	2000      	movs	r0, #0
   1e4a0:	8993      	ldrh	r3, [r2, #12]
   1e4a2:	f043 0302 	orr.w	r3, r3, #2
   1e4a6:	8193      	strh	r3, [r2, #12]
   1e4a8:	4770      	bx	lr
   1e4aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1e4ae:	2200      	movs	r2, #0
   1e4b0:	2047      	movs	r0, #71	; 0x47
   1e4b2:	2101      	movs	r1, #1
   1e4b4:	6158      	str	r0, [r3, #20]
   1e4b6:	6199      	str	r1, [r3, #24]
   1e4b8:	4610      	mov	r0, r2
   1e4ba:	615a      	str	r2, [r3, #20]
   1e4bc:	4770      	bx	lr
   1e4be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1e4c2:	2000      	movs	r0, #0
   1e4c4:	899a      	ldrh	r2, [r3, #12]
   1e4c6:	f36f 12c7 	bfc	r2, #7, #1
   1e4ca:	819a      	strh	r2, [r3, #12]
   1e4cc:	4770      	bx	lr
   1e4ce:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   1e4d2:	2000      	movs	r0, #0
   1e4d4:	8993      	ldrh	r3, [r2, #12]
   1e4d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1e4da:	8193      	strh	r3, [r2, #12]
   1e4dc:	4770      	bx	lr
   1e4de:	4a18      	ldr	r2, [pc, #96]	; (1e540 <am_hal_clkgen_control+0x130>)
   1e4e0:	68d3      	ldr	r3, [r2, #12]
   1e4e2:	b2db      	uxtb	r3, r3
   1e4e4:	2b21      	cmp	r3, #33	; 0x21
   1e4e6:	d00a      	beq.n	1e4fe <am_hal_clkgen_control+0xee>
   1e4e8:	b139      	cbz	r1, 1e4fa <am_hal_clkgen_control+0xea>
   1e4ea:	680b      	ldr	r3, [r1, #0]
   1e4ec:	f043 0301 	orr.w	r3, r3, #1
   1e4f0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   1e4f4:	2000      	movs	r0, #0
   1e4f6:	6213      	str	r3, [r2, #32]
   1e4f8:	4770      	bx	lr
   1e4fa:	4b12      	ldr	r3, [pc, #72]	; (1e544 <am_hal_clkgen_control+0x134>)
   1e4fc:	e7f8      	b.n	1e4f0 <am_hal_clkgen_control+0xe0>
   1e4fe:	b500      	push	{lr}
   1e500:	b083      	sub	sp, #12
   1e502:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
   1e506:	9101      	str	r1, [sp, #4]
   1e508:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
   1e50c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   1e510:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
   1e514:	f000 f87e 	bl	1e614 <am_hal_flash_delay>
   1e518:	9901      	ldr	r1, [sp, #4]
   1e51a:	b149      	cbz	r1, 1e530 <am_hal_clkgen_control+0x120>
   1e51c:	680b      	ldr	r3, [r1, #0]
   1e51e:	f043 0301 	orr.w	r3, r3, #1
   1e522:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   1e526:	2000      	movs	r0, #0
   1e528:	6213      	str	r3, [r2, #32]
   1e52a:	b003      	add	sp, #12
   1e52c:	f85d fb04 	ldr.w	pc, [sp], #4
   1e530:	4b04      	ldr	r3, [pc, #16]	; (1e544 <am_hal_clkgen_control+0x134>)
   1e532:	e7f6      	b.n	1e522 <am_hal_clkgen_control+0x112>
   1e534:	2006      	movs	r0, #6
   1e536:	4770      	bx	lr
   1e538:	10009d88 	.word	0x10009d88
   1e53c:	4ffff000 	.word	0x4ffff000
   1e540:	40020000 	.word	0x40020000
   1e544:	0025b801 	.word	0x0025b801

0001e548 <am_hal_clkgen_status_get>:
   1e548:	b1b0      	cbz	r0, 1e578 <am_hal_clkgen_status_get+0x30>
   1e54a:	b410      	push	{r4}
   1e54c:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
   1e550:	4603      	mov	r3, r0
   1e552:	698c      	ldr	r4, [r1, #24]
   1e554:	4809      	ldr	r0, [pc, #36]	; (1e57c <am_hal_clkgen_status_get+0x34>)
   1e556:	4a0a      	ldr	r2, [pc, #40]	; (1e580 <am_hal_clkgen_status_get+0x38>)
   1e558:	f014 0f01 	tst.w	r4, #1
   1e55c:	bf08      	it	eq
   1e55e:	4602      	moveq	r2, r0
   1e560:	601a      	str	r2, [r3, #0]
   1e562:	69ca      	ldr	r2, [r1, #28]
   1e564:	f85d 4b04 	ldr.w	r4, [sp], #4
   1e568:	f002 0101 	and.w	r1, r2, #1
   1e56c:	f3c2 0240 	ubfx	r2, r2, #1, #1
   1e570:	2000      	movs	r0, #0
   1e572:	6059      	str	r1, [r3, #4]
   1e574:	721a      	strb	r2, [r3, #8]
   1e576:	4770      	bx	lr
   1e578:	2006      	movs	r0, #6
   1e57a:	4770      	bx	lr
   1e57c:	02dc6c00 	.word	0x02dc6c00
   1e580:	016e3600 	.word	0x016e3600

0001e584 <am_hal_ctimer_int_service>:
   1e584:	b198      	cbz	r0, 1e5ae <am_hal_ctimer_int_service+0x2a>
   1e586:	b570      	push	{r4, r5, r6, lr}
   1e588:	4e09      	ldr	r6, [pc, #36]	; (1e5b0 <am_hal_ctimer_int_service+0x2c>)
   1e58a:	4604      	mov	r4, r0
   1e58c:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   1e590:	fab4 f384 	clz	r3, r4
   1e594:	f1c3 021f 	rsb	r2, r3, #31
   1e598:	fa25 f303 	lsr.w	r3, r5, r3
   1e59c:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
   1e5a0:	ea24 0403 	bic.w	r4, r4, r3
   1e5a4:	b102      	cbz	r2, 1e5a8 <am_hal_ctimer_int_service+0x24>
   1e5a6:	4790      	blx	r2
   1e5a8:	2c00      	cmp	r4, #0
   1e5aa:	d1f1      	bne.n	1e590 <am_hal_ctimer_int_service+0xc>
   1e5ac:	bd70      	pop	{r4, r5, r6, pc}
   1e5ae:	4770      	bx	lr
   1e5b0:	10009d08 	.word	0x10009d08

0001e5b4 <am_hal_ctimer_int_clear>:
   1e5b4:	b510      	push	{r4, lr}
   1e5b6:	b082      	sub	sp, #8
   1e5b8:	4604      	mov	r4, r0
   1e5ba:	f000 fa39 	bl	1ea30 <am_hal_interrupt_master_disable>
   1e5be:	4b05      	ldr	r3, [pc, #20]	; (1e5d4 <am_hal_ctimer_int_clear+0x20>)
   1e5c0:	9001      	str	r0, [sp, #4]
   1e5c2:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
   1e5c6:	9801      	ldr	r0, [sp, #4]
   1e5c8:	b002      	add	sp, #8
   1e5ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e5ce:	f000 ba33 	b.w	1ea38 <am_hal_interrupt_master_set>
   1e5d2:	bf00      	nop
   1e5d4:	40008000 	.word	0x40008000

0001e5d8 <am_hal_ctimer_int_status_get>:
   1e5d8:	b510      	push	{r4, lr}
   1e5da:	b082      	sub	sp, #8
   1e5dc:	4604      	mov	r4, r0
   1e5de:	f000 fa27 	bl	1ea30 <am_hal_interrupt_master_disable>
   1e5e2:	4b0b      	ldr	r3, [pc, #44]	; (1e610 <am_hal_ctimer_int_status_get+0x38>)
   1e5e4:	9001      	str	r0, [sp, #4]
   1e5e6:	b154      	cbz	r4, 1e5fe <am_hal_ctimer_int_status_get+0x26>
   1e5e8:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
   1e5ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   1e5f0:	9801      	ldr	r0, [sp, #4]
   1e5f2:	401c      	ands	r4, r3
   1e5f4:	f000 fa20 	bl	1ea38 <am_hal_interrupt_master_set>
   1e5f8:	4620      	mov	r0, r4
   1e5fa:	b002      	add	sp, #8
   1e5fc:	bd10      	pop	{r4, pc}
   1e5fe:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
   1e602:	9801      	ldr	r0, [sp, #4]
   1e604:	f000 fa18 	bl	1ea38 <am_hal_interrupt_master_set>
   1e608:	4620      	mov	r0, r4
   1e60a:	b002      	add	sp, #8
   1e60c:	bd10      	pop	{r4, pc}
   1e60e:	bf00      	nop
   1e610:	40008000 	.word	0x40008000

0001e614 <am_hal_flash_delay>:
   1e614:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1e618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1e61a:	075b      	lsls	r3, r3, #29
   1e61c:	bf46      	itte	mi
   1e61e:	0040      	lslmi	r0, r0, #1
   1e620:	230e      	movmi	r3, #14
   1e622:	230b      	movpl	r3, #11
   1e624:	4298      	cmp	r0, r3
   1e626:	d902      	bls.n	1e62e <am_hal_flash_delay+0x1a>
   1e628:	4a01      	ldr	r2, [pc, #4]	; (1e630 <am_hal_flash_delay+0x1c>)
   1e62a:	1ac0      	subs	r0, r0, r3
   1e62c:	4710      	bx	r2
   1e62e:	4770      	bx	lr
   1e630:	0800009d 	.word	0x0800009d

0001e634 <am_hal_flash_delay_status_check>:
   1e634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e638:	f89d c020 	ldrb.w	ip, [sp, #32]
   1e63c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1e69c <am_hal_flash_delay_status_check+0x68>
   1e640:	4604      	mov	r4, r0
   1e642:	460d      	mov	r5, r1
   1e644:	4616      	mov	r6, r2
   1e646:	461f      	mov	r7, r3
   1e648:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
   1e64c:	f1bc 0f00 	cmp.w	ip, #0
   1e650:	d00a      	beq.n	1e668 <am_hal_flash_delay_status_check+0x34>
   1e652:	e01a      	b.n	1e68a <am_hal_flash_delay_status_check+0x56>
   1e654:	b1f4      	cbz	r4, 1e694 <am_hal_flash_delay_status_check+0x60>
   1e656:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
   1e65a:	f013 0f04 	tst.w	r3, #4
   1e65e:	bf0c      	ite	eq
   1e660:	2005      	moveq	r0, #5
   1e662:	2012      	movne	r0, #18
   1e664:	3c01      	subs	r4, #1
   1e666:	47c0      	blx	r8
   1e668:	6828      	ldr	r0, [r5, #0]
   1e66a:	4030      	ands	r0, r6
   1e66c:	42b8      	cmp	r0, r7
   1e66e:	d0f1      	beq.n	1e654 <am_hal_flash_delay_status_check+0x20>
   1e670:	2000      	movs	r0, #0
   1e672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e676:	b16c      	cbz	r4, 1e694 <am_hal_flash_delay_status_check+0x60>
   1e678:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
   1e67c:	f013 0f04 	tst.w	r3, #4
   1e680:	bf0c      	ite	eq
   1e682:	2005      	moveq	r0, #5
   1e684:	2012      	movne	r0, #18
   1e686:	3c01      	subs	r4, #1
   1e688:	47c0      	blx	r8
   1e68a:	6828      	ldr	r0, [r5, #0]
   1e68c:	4030      	ands	r0, r6
   1e68e:	42b8      	cmp	r0, r7
   1e690:	d1f1      	bne.n	1e676 <am_hal_flash_delay_status_check+0x42>
   1e692:	e7ed      	b.n	1e670 <am_hal_flash_delay_status_check+0x3c>
   1e694:	2004      	movs	r0, #4
   1e696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e69a:	bf00      	nop
   1e69c:	0800009d 	.word	0x0800009d

0001e6a0 <am_hal_flash_load_ui32>:
   1e6a0:	4b00      	ldr	r3, [pc, #0]	; (1e6a4 <am_hal_flash_load_ui32+0x4>)
   1e6a2:	4718      	bx	r3
   1e6a4:	08000075 	.word	0x08000075

0001e6a8 <am_hal_flash_store_ui32>:
   1e6a8:	4b01      	ldr	r3, [pc, #4]	; (1e6b0 <am_hal_flash_store_ui32+0x8>)
   1e6aa:	f043 0301 	orr.w	r3, r3, #1
   1e6ae:	4718      	bx	r3
   1e6b0:	10003d80 	.word	0x10003d80

0001e6b4 <am_hal_triple_read>:
   1e6b4:	b412      	push	{r1, r4}
   1e6b6:	f3ef 8410 	mrs	r4, PRIMASK
   1e6ba:	b672      	cpsid	i
   1e6bc:	6801      	ldr	r1, [r0, #0]
   1e6be:	6802      	ldr	r2, [r0, #0]
   1e6c0:	6803      	ldr	r3, [r0, #0]
   1e6c2:	f384 8810 	msr	PRIMASK, r4
   1e6c6:	bc11      	pop	{r0, r4}
   1e6c8:	6001      	str	r1, [r0, #0]
   1e6ca:	6042      	str	r2, [r0, #4]
   1e6cc:	6083      	str	r3, [r0, #8]
   1e6ce:	4770      	bx	lr

0001e6d0 <am_hal_gpio_pinconfig>:
   1e6d0:	2831      	cmp	r0, #49	; 0x31
   1e6d2:	f200 80c3 	bhi.w	1e85c <am_hal_gpio_pinconfig+0x18c>
   1e6d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e6da:	4604      	mov	r4, r0
   1e6dc:	f011 07e0 	ands.w	r7, r1, #224	; 0xe0
   1e6e0:	f001 0007 	and.w	r0, r1, #7
   1e6e4:	b085      	sub	sp, #20
   1e6e6:	f3c1 03c1 	ubfx	r3, r1, #3, #2
   1e6ea:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   1e6ee:	d00f      	beq.n	1e710 <am_hal_gpio_pinconfig+0x40>
   1e6f0:	f3c1 1642 	ubfx	r6, r1, #5, #3
   1e6f4:	1db5      	adds	r5, r6, #6
   1e6f6:	f005 0507 	and.w	r5, r5, #7
   1e6fa:	2d03      	cmp	r5, #3
   1e6fc:	f042 0201 	orr.w	r2, r2, #1
   1e700:	f240 80ae 	bls.w	1e860 <am_hal_gpio_pinconfig+0x190>
   1e704:	2fc0      	cmp	r7, #192	; 0xc0
   1e706:	f000 80e1 	beq.w	1e8cc <am_hal_gpio_pinconfig+0x1fc>
   1e70a:	2f20      	cmp	r7, #32
   1e70c:	f000 80e3 	beq.w	1e8d6 <am_hal_gpio_pinconfig+0x206>
   1e710:	b163      	cbz	r3, 1e72c <am_hal_gpio_pinconfig+0x5c>
   1e712:	2b01      	cmp	r3, #1
   1e714:	f000 80d3 	beq.w	1e8be <am_hal_gpio_pinconfig+0x1ee>
   1e718:	2b02      	cmp	r3, #2
   1e71a:	f040 80c9 	bne.w	1e8b0 <am_hal_gpio_pinconfig+0x1e0>
   1e71e:	4b79      	ldr	r3, [pc, #484]	; (1e904 <am_hal_gpio_pinconfig+0x234>)
   1e720:	5d1b      	ldrb	r3, [r3, r4]
   1e722:	075b      	lsls	r3, r3, #29
   1e724:	f140 80c4 	bpl.w	1e8b0 <am_hal_gpio_pinconfig+0x1e0>
   1e728:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1e72c:	4b76      	ldr	r3, [pc, #472]	; (1e908 <am_hal_gpio_pinconfig+0x238>)
   1e72e:	5d1b      	ldrb	r3, [r3, r4]
   1e730:	4103      	asrs	r3, r0
   1e732:	005b      	lsls	r3, r3, #1
   1e734:	f003 0302 	and.w	r3, r3, #2
   1e738:	4313      	orrs	r3, r2
   1e73a:	4a74      	ldr	r2, [pc, #464]	; (1e90c <am_hal_gpio_pinconfig+0x23c>)
   1e73c:	5d12      	ldrb	r2, [r2, r4]
   1e73e:	4282      	cmp	r2, r0
   1e740:	f000 8099 	beq.w	1e876 <am_hal_gpio_pinconfig+0x1a6>
   1e744:	f3c1 3000 	ubfx	r0, r1, #12, #1
   1e748:	f3c1 2581 	ubfx	r5, r1, #10, #2
   1e74c:	f3c1 3280 	ubfx	r2, r1, #14, #1
   1e750:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
   1e754:	0a88      	lsrs	r0, r1, #10
   1e756:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
   1e75a:	f000 0008 	and.w	r0, r0, #8
   1e75e:	4302      	orrs	r2, r0
   1e760:	f3c1 2007 	ubfx	r0, r1, #8, #8
   1e764:	f000 050c 	and.w	r5, r0, #12
   1e768:	2d04      	cmp	r5, #4
   1e76a:	f000 80a5 	beq.w	1e8b8 <am_hal_gpio_pinconfig+0x1e8>
   1e76e:	4d68      	ldr	r5, [pc, #416]	; (1e910 <am_hal_gpio_pinconfig+0x240>)
   1e770:	682d      	ldr	r5, [r5, #0]
   1e772:	eba1 0805 	sub.w	r8, r1, r5
   1e776:	fab8 f888 	clz	r8, r8
   1e77a:	ea4f 1858 	mov.w	r8, r8, lsr #5
   1e77e:	f010 0f60 	tst.w	r0, #96	; 0x60
   1e782:	bf04      	itt	eq
   1e784:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
   1e788:	f360 0200 	bfieq	r2, r0, #0, #1
   1e78c:	00a0      	lsls	r0, r4, #2
   1e78e:	f3c1 2101 	ubfx	r1, r1, #8, #2
   1e792:	2902      	cmp	r1, #2
   1e794:	d05c      	beq.n	1e850 <am_hal_gpio_pinconfig+0x180>
   1e796:	2903      	cmp	r1, #3
   1e798:	d058      	beq.n	1e84c <am_hal_gpio_pinconfig+0x17c>
   1e79a:	2901      	cmp	r1, #1
   1e79c:	ea4f 01c4 	mov.w	r1, r4, lsl #3
   1e7a0:	bf08      	it	eq
   1e7a2:	f043 0304 	orreq.w	r3, r3, #4
   1e7a6:	f001 0118 	and.w	r1, r1, #24
   1e7aa:	2700      	movs	r7, #0
   1e7ac:	f000 001c 	and.w	r0, r0, #28
   1e7b0:	fa02 f600 	lsl.w	r6, r2, r0
   1e7b4:	220f      	movs	r2, #15
   1e7b6:	4082      	lsls	r2, r0
   1e7b8:	43d2      	mvns	r2, r2
   1e7ba:	f04f 09ff 	mov.w	r9, #255	; 0xff
   1e7be:	fa03 f501 	lsl.w	r5, r3, r1
   1e7c2:	fa09 f901 	lsl.w	r9, r9, r1
   1e7c6:	9201      	str	r2, [sp, #4]
   1e7c8:	f000 f932 	bl	1ea30 <am_hal_interrupt_master_disable>
   1e7cc:	f024 0a03 	bic.w	sl, r4, #3
   1e7d0:	ea4f 0b54 	mov.w	fp, r4, lsr #1
   1e7d4:	f10a 4c80 	add.w	ip, sl, #1073741824	; 0x40000000
   1e7d8:	4b4e      	ldr	r3, [pc, #312]	; (1e914 <am_hal_gpio_pinconfig+0x244>)
   1e7da:	494f      	ldr	r1, [pc, #316]	; (1e918 <am_hal_gpio_pinconfig+0x248>)
   1e7dc:	9a01      	ldr	r2, [sp, #4]
   1e7de:	9003      	str	r0, [sp, #12]
   1e7e0:	ea6f 0909 	mvn.w	r9, r9
   1e7e4:	f02b 0b03 	bic.w	fp, fp, #3
   1e7e8:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
   1e7ec:	f1b8 0f00 	cmp.w	r8, #0
   1e7f0:	d00b      	beq.n	1e80a <am_hal_gpio_pinconfig+0x13a>
   1e7f2:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
   1e7f6:	f004 081f 	and.w	r8, r4, #31
   1e7fa:	4848      	ldr	r0, [pc, #288]	; (1e91c <am_hal_gpio_pinconfig+0x24c>)
   1e7fc:	f00e 0e04 	and.w	lr, lr, #4
   1e800:	2401      	movs	r4, #1
   1e802:	fa04 f408 	lsl.w	r4, r4, r8
   1e806:	f84e 4000 	str.w	r4, [lr, r0]
   1e80a:	4845      	ldr	r0, [pc, #276]	; (1e920 <am_hal_gpio_pinconfig+0x250>)
   1e80c:	2473      	movs	r4, #115	; 0x73
   1e80e:	6604      	str	r4, [r0, #96]	; 0x60
   1e810:	f8dc 4000 	ldr.w	r4, [ip]
   1e814:	ea04 0409 	and.w	r4, r4, r9
   1e818:	4325      	orrs	r5, r4
   1e81a:	f8cc 5000 	str.w	r5, [ip]
   1e81e:	f85b 4003 	ldr.w	r4, [fp, r3]
   1e822:	4022      	ands	r2, r4
   1e824:	4332      	orrs	r2, r6
   1e826:	f84b 2003 	str.w	r2, [fp, r3]
   1e82a:	f85a 3001 	ldr.w	r3, [sl, r1]
   1e82e:	ea03 0909 	and.w	r9, r3, r9
   1e832:	2400      	movs	r4, #0
   1e834:	ea49 0707 	orr.w	r7, r9, r7
   1e838:	f84a 7001 	str.w	r7, [sl, r1]
   1e83c:	6604      	str	r4, [r0, #96]	; 0x60
   1e83e:	9803      	ldr	r0, [sp, #12]
   1e840:	f000 f8fa 	bl	1ea38 <am_hal_interrupt_master_set>
   1e844:	4620      	mov	r0, r4
   1e846:	b005      	add	sp, #20
   1e848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e84c:	f043 0304 	orr.w	r3, r3, #4
   1e850:	00e1      	lsls	r1, r4, #3
   1e852:	f001 0118 	and.w	r1, r1, #24
   1e856:	2701      	movs	r7, #1
   1e858:	408f      	lsls	r7, r1
   1e85a:	e7a7      	b.n	1e7ac <am_hal_gpio_pinconfig+0xdc>
   1e85c:	2006      	movs	r0, #6
   1e85e:	4770      	bx	lr
   1e860:	4d28      	ldr	r5, [pc, #160]	; (1e904 <am_hal_gpio_pinconfig+0x234>)
   1e862:	5d2d      	ldrb	r5, [r5, r4]
   1e864:	3e02      	subs	r6, #2
   1e866:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
   1e86a:	07ee      	lsls	r6, r5, #31
   1e86c:	d536      	bpl.n	1e8dc <am_hal_gpio_pinconfig+0x20c>
   1e86e:	2b00      	cmp	r3, #0
   1e870:	f43f af5c 	beq.w	1e72c <am_hal_gpio_pinconfig+0x5c>
   1e874:	e74d      	b.n	1e712 <am_hal_gpio_pinconfig+0x42>
   1e876:	f3c1 4202 	ubfx	r2, r1, #16, #3
   1e87a:	2a07      	cmp	r2, #7
   1e87c:	d030      	beq.n	1e8e0 <am_hal_gpio_pinconfig+0x210>
   1e87e:	4d29      	ldr	r5, [pc, #164]	; (1e924 <am_hal_gpio_pinconfig+0x254>)
   1e880:	f3c1 40c1 	ubfx	r0, r1, #19, #2
   1e884:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   1e888:	f815 0024 	ldrb.w	r0, [r5, r4, lsl #2]
   1e88c:	4290      	cmp	r0, r2
   1e88e:	d029      	beq.n	1e8e4 <am_hal_gpio_pinconfig+0x214>
   1e890:	eb05 0584 	add.w	r5, r5, r4, lsl #2
   1e894:	00a0      	lsls	r0, r4, #2
   1e896:	786e      	ldrb	r6, [r5, #1]
   1e898:	4296      	cmp	r6, r2
   1e89a:	d02d      	beq.n	1e8f8 <am_hal_gpio_pinconfig+0x228>
   1e89c:	78ae      	ldrb	r6, [r5, #2]
   1e89e:	4296      	cmp	r6, r2
   1e8a0:	d02c      	beq.n	1e8fc <am_hal_gpio_pinconfig+0x22c>
   1e8a2:	78ed      	ldrb	r5, [r5, #3]
   1e8a4:	4295      	cmp	r5, r2
   1e8a6:	d02b      	beq.n	1e900 <am_hal_gpio_pinconfig+0x230>
   1e8a8:	481f      	ldr	r0, [pc, #124]	; (1e928 <am_hal_gpio_pinconfig+0x258>)
   1e8aa:	b005      	add	sp, #20
   1e8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e8b0:	481e      	ldr	r0, [pc, #120]	; (1e92c <am_hal_gpio_pinconfig+0x25c>)
   1e8b2:	b005      	add	sp, #20
   1e8b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e8b8:	f04f 0801 	mov.w	r8, #1
   1e8bc:	e75f      	b.n	1e77e <am_hal_gpio_pinconfig+0xae>
   1e8be:	4b11      	ldr	r3, [pc, #68]	; (1e904 <am_hal_gpio_pinconfig+0x234>)
   1e8c0:	5d1b      	ldrb	r3, [r3, r4]
   1e8c2:	079d      	lsls	r5, r3, #30
   1e8c4:	d5f4      	bpl.n	1e8b0 <am_hal_gpio_pinconfig+0x1e0>
   1e8c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1e8ca:	e72f      	b.n	1e72c <am_hal_gpio_pinconfig+0x5c>
   1e8cc:	2c14      	cmp	r4, #20
   1e8ce:	f43f af1f 	beq.w	1e710 <am_hal_gpio_pinconfig+0x40>
   1e8d2:	4817      	ldr	r0, [pc, #92]	; (1e930 <am_hal_gpio_pinconfig+0x260>)
   1e8d4:	e7b7      	b.n	1e846 <am_hal_gpio_pinconfig+0x176>
   1e8d6:	2c14      	cmp	r4, #20
   1e8d8:	f47f af1a 	bne.w	1e710 <am_hal_gpio_pinconfig+0x40>
   1e8dc:	4815      	ldr	r0, [pc, #84]	; (1e934 <am_hal_gpio_pinconfig+0x264>)
   1e8de:	e7b2      	b.n	1e846 <am_hal_gpio_pinconfig+0x176>
   1e8e0:	4815      	ldr	r0, [pc, #84]	; (1e938 <am_hal_gpio_pinconfig+0x268>)
   1e8e2:	e7b0      	b.n	1e846 <am_hal_gpio_pinconfig+0x176>
   1e8e4:	2200      	movs	r2, #0
   1e8e6:	00a0      	lsls	r0, r4, #2
   1e8e8:	0052      	lsls	r2, r2, #1
   1e8ea:	f3c1 5540 	ubfx	r5, r1, #21, #1
   1e8ee:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
   1e8f2:	f04f 0800 	mov.w	r8, #0
   1e8f6:	e74a      	b.n	1e78e <am_hal_gpio_pinconfig+0xbe>
   1e8f8:	2201      	movs	r2, #1
   1e8fa:	e7f5      	b.n	1e8e8 <am_hal_gpio_pinconfig+0x218>
   1e8fc:	2202      	movs	r2, #2
   1e8fe:	e7f3      	b.n	1e8e8 <am_hal_gpio_pinconfig+0x218>
   1e900:	2203      	movs	r2, #3
   1e902:	e7f1      	b.n	1e8e8 <am_hal_gpio_pinconfig+0x218>
   1e904:	000223c0 	.word	0x000223c0
   1e908:	000223f4 	.word	0x000223f4
   1e90c:	000224f0 	.word	0x000224f0
   1e910:	000223b4 	.word	0x000223b4
   1e914:	40010040 	.word	0x40010040
   1e918:	400100e0 	.word	0x400100e0
   1e91c:	400100b4 	.word	0x400100b4
   1e920:	40010000 	.word	0x40010000
   1e924:	00022428 	.word	0x00022428
   1e928:	08000104 	.word	0x08000104
   1e92c:	08000102 	.word	0x08000102
   1e930:	08000101 	.word	0x08000101
   1e934:	08000100 	.word	0x08000100
   1e938:	08000103 	.word	0x08000103

0001e93c <am_hal_gpio_state_read>:
   1e93c:	b15a      	cbz	r2, 1e956 <am_hal_gpio_state_read+0x1a>
   1e93e:	2831      	cmp	r0, #49	; 0x31
   1e940:	d81d      	bhi.n	1e97e <am_hal_gpio_state_read+0x42>
   1e942:	08c3      	lsrs	r3, r0, #3
   1e944:	2901      	cmp	r1, #1
   1e946:	f003 0304 	and.w	r3, r3, #4
   1e94a:	f000 001f 	and.w	r0, r0, #31
   1e94e:	d01b      	beq.n	1e988 <am_hal_gpio_state_read+0x4c>
   1e950:	2902      	cmp	r1, #2
   1e952:	d00b      	beq.n	1e96c <am_hal_gpio_state_read+0x30>
   1e954:	b109      	cbz	r1, 1e95a <am_hal_gpio_state_read+0x1e>
   1e956:	2006      	movs	r0, #6
   1e958:	4770      	bx	lr
   1e95a:	4910      	ldr	r1, [pc, #64]	; (1e99c <am_hal_gpio_state_read+0x60>)
   1e95c:	585b      	ldr	r3, [r3, r1]
   1e95e:	fa23 f000 	lsr.w	r0, r3, r0
   1e962:	f000 0001 	and.w	r0, r0, #1
   1e966:	6010      	str	r0, [r2, #0]
   1e968:	2000      	movs	r0, #0
   1e96a:	4770      	bx	lr
   1e96c:	490c      	ldr	r1, [pc, #48]	; (1e9a0 <am_hal_gpio_state_read+0x64>)
   1e96e:	585b      	ldr	r3, [r3, r1]
   1e970:	fa23 f000 	lsr.w	r0, r3, r0
   1e974:	f000 0001 	and.w	r0, r0, #1
   1e978:	6010      	str	r0, [r2, #0]
   1e97a:	2000      	movs	r0, #0
   1e97c:	4770      	bx	lr
   1e97e:	f04f 33ff 	mov.w	r3, #4294967295
   1e982:	6013      	str	r3, [r2, #0]
   1e984:	2005      	movs	r0, #5
   1e986:	4770      	bx	lr
   1e988:	4906      	ldr	r1, [pc, #24]	; (1e9a4 <am_hal_gpio_state_read+0x68>)
   1e98a:	585b      	ldr	r3, [r3, r1]
   1e98c:	fa23 f000 	lsr.w	r0, r3, r0
   1e990:	f000 0001 	and.w	r0, r0, #1
   1e994:	6010      	str	r0, [r2, #0]
   1e996:	2000      	movs	r0, #0
   1e998:	4770      	bx	lr
   1e99a:	bf00      	nop
   1e99c:	40010080 	.word	0x40010080
   1e9a0:	400100a0 	.word	0x400100a0
   1e9a4:	40010088 	.word	0x40010088

0001e9a8 <am_hal_gpio_state_write>:
   1e9a8:	2831      	cmp	r0, #49	; 0x31
   1e9aa:	d81a      	bhi.n	1e9e2 <am_hal_gpio_state_write+0x3a>
   1e9ac:	b570      	push	{r4, r5, r6, lr}
   1e9ae:	2905      	cmp	r1, #5
   1e9b0:	b082      	sub	sp, #8
   1e9b2:	460d      	mov	r5, r1
   1e9b4:	d812      	bhi.n	1e9dc <am_hal_gpio_state_write+0x34>
   1e9b6:	f000 031f 	and.w	r3, r0, #31
   1e9ba:	2201      	movs	r2, #1
   1e9bc:	08c0      	lsrs	r0, r0, #3
   1e9be:	fa02 f603 	lsl.w	r6, r2, r3
   1e9c2:	f000 0404 	and.w	r4, r0, #4
   1e9c6:	f000 f833 	bl	1ea30 <am_hal_interrupt_master_disable>
   1e9ca:	3d01      	subs	r5, #1
   1e9cc:	9001      	str	r0, [sp, #4]
   1e9ce:	2d04      	cmp	r5, #4
   1e9d0:	d821      	bhi.n	1ea16 <am_hal_gpio_state_write+0x6e>
   1e9d2:	e8df f005 	tbb	[pc, r5]
   1e9d6:	1512      	.short	0x1512
   1e9d8:	1d1a      	.short	0x1d1a
   1e9da:	08          	.byte	0x08
   1e9db:	00          	.byte	0x00
   1e9dc:	2006      	movs	r0, #6
   1e9de:	b002      	add	sp, #8
   1e9e0:	bd70      	pop	{r4, r5, r6, pc}
   1e9e2:	2005      	movs	r0, #5
   1e9e4:	4770      	bx	lr
   1e9e6:	4a0d      	ldr	r2, [pc, #52]	; (1ea1c <am_hal_gpio_state_write+0x74>)
   1e9e8:	58a3      	ldr	r3, [r4, r2]
   1e9ea:	4073      	eors	r3, r6
   1e9ec:	50a3      	str	r3, [r4, r2]
   1e9ee:	9801      	ldr	r0, [sp, #4]
   1e9f0:	f000 f822 	bl	1ea38 <am_hal_interrupt_master_set>
   1e9f4:	2000      	movs	r0, #0
   1e9f6:	b002      	add	sp, #8
   1e9f8:	bd70      	pop	{r4, r5, r6, pc}
   1e9fa:	4b09      	ldr	r3, [pc, #36]	; (1ea20 <am_hal_gpio_state_write+0x78>)
   1e9fc:	50e6      	str	r6, [r4, r3]
   1e9fe:	e7f6      	b.n	1e9ee <am_hal_gpio_state_write+0x46>
   1ea00:	4a08      	ldr	r2, [pc, #32]	; (1ea24 <am_hal_gpio_state_write+0x7c>)
   1ea02:	58a3      	ldr	r3, [r4, r2]
   1ea04:	4073      	eors	r3, r6
   1ea06:	50a3      	str	r3, [r4, r2]
   1ea08:	e7f1      	b.n	1e9ee <am_hal_gpio_state_write+0x46>
   1ea0a:	4b04      	ldr	r3, [pc, #16]	; (1ea1c <am_hal_gpio_state_write+0x74>)
   1ea0c:	50e6      	str	r6, [r4, r3]
   1ea0e:	e7ee      	b.n	1e9ee <am_hal_gpio_state_write+0x46>
   1ea10:	4b05      	ldr	r3, [pc, #20]	; (1ea28 <am_hal_gpio_state_write+0x80>)
   1ea12:	50e6      	str	r6, [r4, r3]
   1ea14:	e7eb      	b.n	1e9ee <am_hal_gpio_state_write+0x46>
   1ea16:	4b05      	ldr	r3, [pc, #20]	; (1ea2c <am_hal_gpio_state_write+0x84>)
   1ea18:	50e6      	str	r6, [r4, r3]
   1ea1a:	e7e8      	b.n	1e9ee <am_hal_gpio_state_write+0x46>
   1ea1c:	400100b4 	.word	0x400100b4
   1ea20:	40010090 	.word	0x40010090
   1ea24:	40010088 	.word	0x40010088
   1ea28:	400100a8 	.word	0x400100a8
   1ea2c:	40010098 	.word	0x40010098

0001ea30 <am_hal_interrupt_master_disable>:
   1ea30:	f3ef 8010 	mrs	r0, PRIMASK
   1ea34:	b672      	cpsid	i
   1ea36:	4770      	bx	lr

0001ea38 <am_hal_interrupt_master_set>:
   1ea38:	f380 8810 	msr	PRIMASK, r0
   1ea3c:	4770      	bx	lr
   1ea3e:	bf00      	nop

0001ea40 <am_hal_mcuctrl_info_get>:
   1ea40:	2900      	cmp	r1, #0
   1ea42:	f000 808f 	beq.w	1eb64 <am_hal_mcuctrl_info_get+0x124>
   1ea46:	2801      	cmp	r0, #1
   1ea48:	b430      	push	{r4, r5}
   1ea4a:	d006      	beq.n	1ea5a <am_hal_mcuctrl_info_get+0x1a>
   1ea4c:	2802      	cmp	r0, #2
   1ea4e:	d06d      	beq.n	1eb2c <am_hal_mcuctrl_info_get+0xec>
   1ea50:	2800      	cmp	r0, #0
   1ea52:	d055      	beq.n	1eb00 <am_hal_mcuctrl_info_get+0xc0>
   1ea54:	2006      	movs	r0, #6
   1ea56:	bc30      	pop	{r4, r5}
   1ea58:	4770      	bx	lr
   1ea5a:	4a43      	ldr	r2, [pc, #268]	; (1eb68 <am_hal_mcuctrl_info_get+0x128>)
   1ea5c:	4843      	ldr	r0, [pc, #268]	; (1eb6c <am_hal_mcuctrl_info_get+0x12c>)
   1ea5e:	6813      	ldr	r3, [r2, #0]
   1ea60:	600b      	str	r3, [r1, #0]
   1ea62:	6854      	ldr	r4, [r2, #4]
   1ea64:	604c      	str	r4, [r1, #4]
   1ea66:	6894      	ldr	r4, [r2, #8]
   1ea68:	608c      	str	r4, [r1, #8]
   1ea6a:	68d4      	ldr	r4, [r2, #12]
   1ea6c:	60cc      	str	r4, [r1, #12]
   1ea6e:	f3c3 5503 	ubfx	r5, r3, #20, #4
   1ea72:	6914      	ldr	r4, [r2, #16]
   1ea74:	610c      	str	r4, [r1, #16]
   1ea76:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
   1ea7a:	4c3d      	ldr	r4, [pc, #244]	; (1eb70 <am_hal_mcuctrl_info_get+0x130>)
   1ea7c:	6950      	ldr	r0, [r2, #20]
   1ea7e:	6148      	str	r0, [r1, #20]
   1ea80:	f003 0201 	and.w	r2, r3, #1
   1ea84:	f3c3 4303 	ubfx	r3, r3, #16, #4
   1ea88:	e9c1 2506 	strd	r2, r5, [r1, #24]
   1ea8c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
   1ea90:	4a38      	ldr	r2, [pc, #224]	; (1eb74 <am_hal_mcuctrl_info_get+0x134>)
   1ea92:	620b      	str	r3, [r1, #32]
   1ea94:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   1ea98:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
   1ea9c:	b2db      	uxtb	r3, r3
   1ea9e:	f000 000f 	and.w	r0, r0, #15
   1eaa2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1eaa6:	624b      	str	r3, [r1, #36]	; 0x24
   1eaa8:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
   1eaac:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
   1eab0:	f3c3 1303 	ubfx	r3, r3, #4, #4
   1eab4:	f000 000f 	and.w	r0, r0, #15
   1eab8:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
   1eabc:	628b      	str	r3, [r1, #40]	; 0x28
   1eabe:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
   1eac2:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
   1eac6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   1eaca:	f3c0 1003 	ubfx	r0, r0, #4, #4
   1eace:	4303      	orrs	r3, r0
   1ead0:	62cb      	str	r3, [r1, #44]	; 0x2c
   1ead2:	f8d2 40fc 	ldr.w	r4, [r2, #252]	; 0xfc
   1ead6:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
   1eada:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
   1eade:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
   1eae2:	b2db      	uxtb	r3, r3
   1eae4:	041b      	lsls	r3, r3, #16
   1eae6:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   1eaea:	fa5f fc82 	uxtb.w	ip, r2
   1eaee:	ea43 030c 	orr.w	r3, r3, ip
   1eaf2:	b2c2      	uxtb	r2, r0
   1eaf4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1eaf8:	630b      	str	r3, [r1, #48]	; 0x30
   1eafa:	2000      	movs	r0, #0
   1eafc:	bc30      	pop	{r4, r5}
   1eafe:	4770      	bx	lr
   1eb00:	4a19      	ldr	r2, [pc, #100]	; (1eb68 <am_hal_mcuctrl_info_get+0x128>)
   1eb02:	6993      	ldr	r3, [r2, #24]
   1eb04:	f3c3 1480 	ubfx	r4, r3, #6, #1
   1eb08:	700c      	strb	r4, [r1, #0]
   1eb0a:	f8d2 41a0 	ldr.w	r4, [r2, #416]	; 0x1a0
   1eb0e:	f3c3 0380 	ubfx	r3, r3, #2, #1
   1eb12:	704b      	strb	r3, [r1, #1]
   1eb14:	f3c4 6381 	ubfx	r3, r4, #26, #2
   1eb18:	710b      	strb	r3, [r1, #4]
   1eb1a:	6953      	ldr	r3, [r2, #20]
   1eb1c:	f3c3 0240 	ubfx	r2, r3, #1, #1
   1eb20:	f003 0301 	and.w	r3, r3, #1
   1eb24:	bc30      	pop	{r4, r5}
   1eb26:	708a      	strb	r2, [r1, #2]
   1eb28:	70cb      	strb	r3, [r1, #3]
   1eb2a:	4770      	bx	lr
   1eb2c:	4a0e      	ldr	r2, [pc, #56]	; (1eb68 <am_hal_mcuctrl_info_get+0x128>)
   1eb2e:	6848      	ldr	r0, [r1, #4]
   1eb30:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
   1eb34:	f003 0401 	and.w	r4, r3, #1
   1eb38:	700c      	strb	r4, [r1, #0]
   1eb3a:	f3c3 0440 	ubfx	r4, r3, #1, #1
   1eb3e:	720c      	strb	r4, [r1, #8]
   1eb40:	f8d2 41c4 	ldr.w	r4, [r2, #452]	; 0x1c4
   1eb44:	60cc      	str	r4, [r1, #12]
   1eb46:	f8d2 41c0 	ldr.w	r4, [r2, #448]	; 0x1c0
   1eb4a:	4320      	orrs	r0, r4
   1eb4c:	f3c3 0380 	ubfx	r3, r3, #2, #1
   1eb50:	6048      	str	r0, [r1, #4]
   1eb52:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
   1eb56:	740b      	strb	r3, [r1, #16]
   1eb58:	694b      	ldr	r3, [r1, #20]
   1eb5a:	4313      	orrs	r3, r2
   1eb5c:	2000      	movs	r0, #0
   1eb5e:	bc30      	pop	{r4, r5}
   1eb60:	614b      	str	r3, [r1, #20]
   1eb62:	4770      	bx	lr
   1eb64:	2006      	movs	r0, #6
   1eb66:	4770      	bx	lr
   1eb68:	40020000 	.word	0x40020000
   1eb6c:	00022524 	.word	0x00022524
   1eb70:	00022564 	.word	0x00022564
   1eb74:	f0000f00 	.word	0xf0000f00

0001eb78 <am_hal_pwrctrl_periph_enable>:
   1eb78:	b570      	push	{r4, r5, r6, lr}
   1eb7a:	b082      	sub	sp, #8
   1eb7c:	4604      	mov	r4, r0
   1eb7e:	f7ff ff57 	bl	1ea30 <am_hal_interrupt_master_disable>
   1eb82:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1eb86:	4e0f      	ldr	r6, [pc, #60]	; (1ebc4 <am_hal_pwrctrl_periph_enable+0x4c>)
   1eb88:	4d0f      	ldr	r5, [pc, #60]	; (1ebc8 <am_hal_pwrctrl_periph_enable+0x50>)
   1eb8a:	9001      	str	r0, [sp, #4]
   1eb8c:	00a4      	lsls	r4, r4, #2
   1eb8e:	68b3      	ldr	r3, [r6, #8]
   1eb90:	592a      	ldr	r2, [r5, r4]
   1eb92:	4313      	orrs	r3, r2
   1eb94:	60b3      	str	r3, [r6, #8]
   1eb96:	9801      	ldr	r0, [sp, #4]
   1eb98:	442c      	add	r4, r5
   1eb9a:	f7ff ff4d 	bl	1ea38 <am_hal_interrupt_master_set>
   1eb9e:	20a0      	movs	r0, #160	; 0xa0
   1eba0:	f7ff fd38 	bl	1e614 <am_hal_flash_delay>
   1eba4:	69b3      	ldr	r3, [r6, #24]
   1eba6:	6864      	ldr	r4, [r4, #4]
   1eba8:	4223      	tst	r3, r4
   1ebaa:	d103      	bne.n	1ebb4 <am_hal_pwrctrl_periph_enable+0x3c>
   1ebac:	20a0      	movs	r0, #160	; 0xa0
   1ebae:	f7ff fd31 	bl	1e614 <am_hal_flash_delay>
   1ebb2:	69b3      	ldr	r3, [r6, #24]
   1ebb4:	4b03      	ldr	r3, [pc, #12]	; (1ebc4 <am_hal_pwrctrl_periph_enable+0x4c>)
   1ebb6:	699b      	ldr	r3, [r3, #24]
   1ebb8:	4223      	tst	r3, r4
   1ebba:	bf0c      	ite	eq
   1ebbc:	2001      	moveq	r0, #1
   1ebbe:	2000      	movne	r0, #0
   1ebc0:	b002      	add	sp, #8
   1ebc2:	bd70      	pop	{r4, r5, r6, pc}
   1ebc4:	40021000 	.word	0x40021000
   1ebc8:	000225a4 	.word	0x000225a4

0001ebcc <am_hal_pwrctrl_periph_disable>:
   1ebcc:	b570      	push	{r4, r5, r6, lr}
   1ebce:	b082      	sub	sp, #8
   1ebd0:	4604      	mov	r4, r0
   1ebd2:	f7ff ff2d 	bl	1ea30 <am_hal_interrupt_master_disable>
   1ebd6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1ebda:	4e10      	ldr	r6, [pc, #64]	; (1ec1c <am_hal_pwrctrl_periph_disable+0x50>)
   1ebdc:	4d10      	ldr	r5, [pc, #64]	; (1ec20 <am_hal_pwrctrl_periph_disable+0x54>)
   1ebde:	9001      	str	r0, [sp, #4]
   1ebe0:	00a4      	lsls	r4, r4, #2
   1ebe2:	68b3      	ldr	r3, [r6, #8]
   1ebe4:	592a      	ldr	r2, [r5, r4]
   1ebe6:	ea23 0302 	bic.w	r3, r3, r2
   1ebea:	60b3      	str	r3, [r6, #8]
   1ebec:	9801      	ldr	r0, [sp, #4]
   1ebee:	442c      	add	r4, r5
   1ebf0:	f7ff ff22 	bl	1ea38 <am_hal_interrupt_master_set>
   1ebf4:	20a0      	movs	r0, #160	; 0xa0
   1ebf6:	f7ff fd0d 	bl	1e614 <am_hal_flash_delay>
   1ebfa:	69b3      	ldr	r3, [r6, #24]
   1ebfc:	6864      	ldr	r4, [r4, #4]
   1ebfe:	4223      	tst	r3, r4
   1ec00:	d003      	beq.n	1ec0a <am_hal_pwrctrl_periph_disable+0x3e>
   1ec02:	20a0      	movs	r0, #160	; 0xa0
   1ec04:	f7ff fd06 	bl	1e614 <am_hal_flash_delay>
   1ec08:	69b3      	ldr	r3, [r6, #24]
   1ec0a:	4b04      	ldr	r3, [pc, #16]	; (1ec1c <am_hal_pwrctrl_periph_disable+0x50>)
   1ec0c:	699b      	ldr	r3, [r3, #24]
   1ec0e:	4223      	tst	r3, r4
   1ec10:	bf14      	ite	ne
   1ec12:	2001      	movne	r0, #1
   1ec14:	2000      	moveq	r0, #0
   1ec16:	b002      	add	sp, #8
   1ec18:	bd70      	pop	{r4, r5, r6, pc}
   1ec1a:	bf00      	nop
   1ec1c:	40021000 	.word	0x40021000
   1ec20:	000225a4 	.word	0x000225a4

0001ec24 <am_hal_pwrctrl_low_power_init>:
   1ec24:	b530      	push	{r4, r5, lr}
   1ec26:	4b69      	ldr	r3, [pc, #420]	; (1edcc <am_hal_pwrctrl_low_power_init+0x1a8>)
   1ec28:	681a      	ldr	r2, [r3, #0]
   1ec2a:	b085      	sub	sp, #20
   1ec2c:	b912      	cbnz	r2, 1ec34 <am_hal_pwrctrl_low_power_init+0x10>
   1ec2e:	4a68      	ldr	r2, [pc, #416]	; (1edd0 <am_hal_pwrctrl_low_power_init+0x1ac>)
   1ec30:	6812      	ldr	r2, [r2, #0]
   1ec32:	601a      	str	r2, [r3, #0]
   1ec34:	4b67      	ldr	r3, [pc, #412]	; (1edd4 <am_hal_pwrctrl_low_power_init+0x1b0>)
   1ec36:	68db      	ldr	r3, [r3, #12]
   1ec38:	b2db      	uxtb	r3, r3
   1ec3a:	2b12      	cmp	r3, #18
   1ec3c:	d104      	bne.n	1ec48 <am_hal_pwrctrl_low_power_init+0x24>
   1ec3e:	4c66      	ldr	r4, [pc, #408]	; (1edd8 <am_hal_pwrctrl_low_power_init+0x1b4>)
   1ec40:	6863      	ldr	r3, [r4, #4]
   1ec42:	07d8      	lsls	r0, r3, #31
   1ec44:	f100 8088 	bmi.w	1ed58 <am_hal_pwrctrl_low_power_init+0x134>
   1ec48:	4b62      	ldr	r3, [pc, #392]	; (1edd4 <am_hal_pwrctrl_low_power_init+0x1b0>)
   1ec4a:	68da      	ldr	r2, [r3, #12]
   1ec4c:	b2d2      	uxtb	r2, r2
   1ec4e:	2a20      	cmp	r2, #32
   1ec50:	d934      	bls.n	1ecbc <am_hal_pwrctrl_low_power_init+0x98>
   1ec52:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
   1ec56:	2002      	movs	r0, #2
   1ec58:	f360 4213 	bfi	r2, r0, #16, #4
   1ec5c:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
   1ec60:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
   1ec64:	2203      	movs	r2, #3
   1ec66:	f362 5117 	bfi	r1, r2, #20, #4
   1ec6a:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
   1ec6e:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   1ec72:	2405      	movs	r4, #5
   1ec74:	f364 0103 	bfi	r1, r4, #0, #4
   1ec78:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   1ec7c:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   1ec80:	f360 1107 	bfi	r1, r0, #4, #4
   1ec84:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   1ec88:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   1ec8c:	2406      	movs	r4, #6
   1ec8e:	f364 210b 	bfi	r1, r4, #8, #4
   1ec92:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   1ec96:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   1ec9a:	2001      	movs	r0, #1
   1ec9c:	f360 310f 	bfi	r1, r0, #12, #4
   1eca0:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   1eca4:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   1eca8:	f362 61de 	bfi	r1, r2, #27, #4
   1ecac:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   1ecb0:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
   1ecb4:	f362 0103 	bfi	r1, r2, #0, #4
   1ecb8:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
   1ecbc:	4a45      	ldr	r2, [pc, #276]	; (1edd4 <am_hal_pwrctrl_low_power_init+0x1b0>)
   1ecbe:	68d3      	ldr	r3, [r2, #12]
   1ecc0:	b2db      	uxtb	r3, r3
   1ecc2:	2b11      	cmp	r3, #17
   1ecc4:	d905      	bls.n	1ecd2 <am_hal_pwrctrl_low_power_init+0xae>
   1ecc6:	f8d2 335c 	ldr.w	r3, [r2, #860]	; 0x35c
   1ecca:	f36f 6318 	bfc	r3, #24, #1
   1ecce:	f8c2 335c 	str.w	r3, [r2, #860]	; 0x35c
   1ecd2:	2100      	movs	r1, #0
   1ecd4:	200c      	movs	r0, #12
   1ecd6:	f7ff fa21 	bl	1e11c <am_hal_cachectrl_control>
   1ecda:	4b3f      	ldr	r3, [pc, #252]	; (1edd8 <am_hal_pwrctrl_low_power_init+0x1b4>)
   1ecdc:	699b      	ldr	r3, [r3, #24]
   1ecde:	f3c3 2500 	ubfx	r5, r3, #8, #1
   1ece2:	05db      	lsls	r3, r3, #23
   1ece4:	d420      	bmi.n	1ed28 <am_hal_pwrctrl_low_power_init+0x104>
   1ece6:	4c3b      	ldr	r4, [pc, #236]	; (1edd4 <am_hal_pwrctrl_low_power_init+0x1b0>)
   1ece8:	68e3      	ldr	r3, [r4, #12]
   1ecea:	b2db      	uxtb	r3, r3
   1ecec:	2b11      	cmp	r3, #17
   1ecee:	d84e      	bhi.n	1ed8e <am_hal_pwrctrl_low_power_init+0x16a>
   1ecf0:	4c38      	ldr	r4, [pc, #224]	; (1edd4 <am_hal_pwrctrl_low_power_init+0x1b0>)
   1ecf2:	493a      	ldr	r1, [pc, #232]	; (1eddc <am_hal_pwrctrl_low_power_init+0x1b8>)
   1ecf4:	7e22      	ldrb	r2, [r4, #24]
   1ecf6:	2001      	movs	r0, #1
   1ecf8:	4302      	orrs	r2, r0
   1ecfa:	2307      	movs	r3, #7
   1ecfc:	7622      	strb	r2, [r4, #24]
   1ecfe:	9000      	str	r0, [sp, #0]
   1ed00:	461a      	mov	r2, r3
   1ed02:	f242 7010 	movw	r0, #10000	; 0x2710
   1ed06:	f7ff fc95 	bl	1e634 <am_hal_flash_delay_status_check>
   1ed0a:	2800      	cmp	r0, #0
   1ed0c:	d15a      	bne.n	1edc4 <am_hal_pwrctrl_low_power_init+0x1a0>
   1ed0e:	4b32      	ldr	r3, [pc, #200]	; (1edd8 <am_hal_pwrctrl_low_power_init+0x1b4>)
   1ed10:	681a      	ldr	r2, [r3, #0]
   1ed12:	f042 0201 	orr.w	r2, r2, #1
   1ed16:	601a      	str	r2, [r3, #0]
   1ed18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1ed1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1ed1e:	625a      	str	r2, [r3, #36]	; 0x24
   1ed20:	68e3      	ldr	r3, [r4, #12]
   1ed22:	b2db      	uxtb	r3, r3
   1ed24:	2b11      	cmp	r3, #17
   1ed26:	d002      	beq.n	1ed2e <am_hal_pwrctrl_low_power_init+0x10a>
   1ed28:	2000      	movs	r0, #0
   1ed2a:	b005      	add	sp, #20
   1ed2c:	bd30      	pop	{r4, r5, pc}
   1ed2e:	f8d4 335c 	ldr.w	r3, [r4, #860]	; 0x35c
   1ed32:	f360 5356 	bfi	r3, r0, #21, #2
   1ed36:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
   1ed3a:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
   1ed3e:	220f      	movs	r2, #15
   1ed40:	f362 138b 	bfi	r3, r2, #6, #6
   1ed44:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
   1ed48:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
   1ed4c:	f362 0305 	bfi	r3, r2, #0, #6
   1ed50:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
   1ed54:	b005      	add	sp, #20
   1ed56:	bd30      	pop	{r4, r5, pc}
   1ed58:	f7ff fe6a 	bl	1ea30 <am_hal_interrupt_master_disable>
   1ed5c:	9002      	str	r0, [sp, #8]
   1ed5e:	68a3      	ldr	r3, [r4, #8]
   1ed60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   1ed64:	60a3      	str	r3, [r4, #8]
   1ed66:	9802      	ldr	r0, [sp, #8]
   1ed68:	f7ff fe66 	bl	1ea38 <am_hal_interrupt_master_set>
   1ed6c:	20a0      	movs	r0, #160	; 0xa0
   1ed6e:	f7ff fc51 	bl	1e614 <am_hal_flash_delay>
   1ed72:	69a3      	ldr	r3, [r4, #24]
   1ed74:	0619      	lsls	r1, r3, #24
   1ed76:	d403      	bmi.n	1ed80 <am_hal_pwrctrl_low_power_init+0x15c>
   1ed78:	20a0      	movs	r0, #160	; 0xa0
   1ed7a:	f7ff fc4b 	bl	1e614 <am_hal_flash_delay>
   1ed7e:	69a3      	ldr	r3, [r4, #24]
   1ed80:	4b15      	ldr	r3, [pc, #84]	; (1edd8 <am_hal_pwrctrl_low_power_init+0x1b4>)
   1ed82:	699b      	ldr	r3, [r3, #24]
   1ed84:	061a      	lsls	r2, r3, #24
   1ed86:	f53f af5f 	bmi.w	1ec48 <am_hal_pwrctrl_low_power_init+0x24>
   1ed8a:	2001      	movs	r0, #1
   1ed8c:	e7cd      	b.n	1ed2a <am_hal_pwrctrl_low_power_init+0x106>
   1ed8e:	f7ff fe4f 	bl	1ea30 <am_hal_interrupt_master_disable>
   1ed92:	9003      	str	r0, [sp, #12]
   1ed94:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
   1ed98:	2219      	movs	r2, #25
   1ed9a:	f362 138b 	bfi	r3, r2, #6, #6
   1ed9e:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
   1eda2:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
   1eda6:	210c      	movs	r1, #12
   1eda8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1edac:	f361 0205 	bfi	r2, r1, #0, #6
   1edb0:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
   1edb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1edb6:	f365 5296 	bfi	r2, r5, #22, #1
   1edba:	63da      	str	r2, [r3, #60]	; 0x3c
   1edbc:	9803      	ldr	r0, [sp, #12]
   1edbe:	f7ff fe3b 	bl	1ea38 <am_hal_interrupt_master_set>
   1edc2:	e795      	b.n	1ecf0 <am_hal_pwrctrl_low_power_init+0xcc>
   1edc4:	2004      	movs	r0, #4
   1edc6:	b005      	add	sp, #20
   1edc8:	bd30      	pop	{r4, r5, pc}
   1edca:	bf00      	nop
   1edcc:	10009d88 	.word	0x10009d88
   1edd0:	4ffff000 	.word	0x4ffff000
   1edd4:	40020000 	.word	0x40020000
   1edd8:	40021000 	.word	0x40021000
   1eddc:	40020018 	.word	0x40020018

0001ede0 <am_hal_queue_init>:
   1ede0:	b410      	push	{r4}
   1ede2:	2400      	movs	r4, #0
   1ede4:	e9c0 4400 	strd	r4, r4, [r0]
   1ede8:	e9c0 4302 	strd	r4, r3, [r0, #8]
   1edec:	e9c0 2104 	strd	r2, r1, [r0, #16]
   1edf0:	f85d 4b04 	ldr.w	r4, [sp], #4
   1edf4:	4770      	bx	lr
   1edf6:	bf00      	nop

0001edf8 <am_hal_queue_item_add>:
   1edf8:	b570      	push	{r4, r5, r6, lr}
   1edfa:	6905      	ldr	r5, [r0, #16]
   1edfc:	b082      	sub	sp, #8
   1edfe:	4604      	mov	r4, r0
   1ee00:	fb02 f505 	mul.w	r5, r2, r5
   1ee04:	460e      	mov	r6, r1
   1ee06:	f7ff fe13 	bl	1ea30 <am_hal_interrupt_master_disable>
   1ee0a:	68e2      	ldr	r2, [r4, #12]
   1ee0c:	9001      	str	r0, [sp, #4]
   1ee0e:	68a0      	ldr	r0, [r4, #8]
   1ee10:	1a13      	subs	r3, r2, r0
   1ee12:	42ab      	cmp	r3, r5
   1ee14:	d31c      	bcc.n	1ee50 <am_hal_queue_item_add+0x58>
   1ee16:	b195      	cbz	r5, 1ee3e <am_hal_queue_item_add+0x46>
   1ee18:	6823      	ldr	r3, [r4, #0]
   1ee1a:	b306      	cbz	r6, 1ee5e <am_hal_queue_item_add+0x66>
   1ee1c:	1e71      	subs	r1, r6, #1
   1ee1e:	194e      	adds	r6, r1, r5
   1ee20:	6962      	ldr	r2, [r4, #20]
   1ee22:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1ee26:	54d0      	strb	r0, [r2, r3]
   1ee28:	6823      	ldr	r3, [r4, #0]
   1ee2a:	68e0      	ldr	r0, [r4, #12]
   1ee2c:	3301      	adds	r3, #1
   1ee2e:	428e      	cmp	r6, r1
   1ee30:	fbb3 f2f0 	udiv	r2, r3, r0
   1ee34:	fb00 3312 	mls	r3, r0, r2, r3
   1ee38:	6023      	str	r3, [r4, #0]
   1ee3a:	d1f1      	bne.n	1ee20 <am_hal_queue_item_add+0x28>
   1ee3c:	68a0      	ldr	r0, [r4, #8]
   1ee3e:	4405      	add	r5, r0
   1ee40:	60a5      	str	r5, [r4, #8]
   1ee42:	9801      	ldr	r0, [sp, #4]
   1ee44:	f7ff fdf8 	bl	1ea38 <am_hal_interrupt_master_set>
   1ee48:	2401      	movs	r4, #1
   1ee4a:	4620      	mov	r0, r4
   1ee4c:	b002      	add	sp, #8
   1ee4e:	bd70      	pop	{r4, r5, r6, pc}
   1ee50:	9801      	ldr	r0, [sp, #4]
   1ee52:	f7ff fdf1 	bl	1ea38 <am_hal_interrupt_master_set>
   1ee56:	2400      	movs	r4, #0
   1ee58:	4620      	mov	r0, r4
   1ee5a:	b002      	add	sp, #8
   1ee5c:	bd70      	pop	{r4, r5, r6, pc}
   1ee5e:	4631      	mov	r1, r6
   1ee60:	3101      	adds	r1, #1
   1ee62:	3301      	adds	r3, #1
   1ee64:	428d      	cmp	r5, r1
   1ee66:	fbb3 f6f2 	udiv	r6, r3, r2
   1ee6a:	fb02 3316 	mls	r3, r2, r6, r3
   1ee6e:	d1f7      	bne.n	1ee60 <am_hal_queue_item_add+0x68>
   1ee70:	6023      	str	r3, [r4, #0]
   1ee72:	e7e4      	b.n	1ee3e <am_hal_queue_item_add+0x46>

0001ee74 <am_hal_queue_item_get>:
   1ee74:	b570      	push	{r4, r5, r6, lr}
   1ee76:	6905      	ldr	r5, [r0, #16]
   1ee78:	4604      	mov	r4, r0
   1ee7a:	b082      	sub	sp, #8
   1ee7c:	fb02 f505 	mul.w	r5, r2, r5
   1ee80:	460e      	mov	r6, r1
   1ee82:	f7ff fdd5 	bl	1ea30 <am_hal_interrupt_master_disable>
   1ee86:	68a2      	ldr	r2, [r4, #8]
   1ee88:	9001      	str	r0, [sp, #4]
   1ee8a:	42aa      	cmp	r2, r5
   1ee8c:	d31c      	bcc.n	1eec8 <am_hal_queue_item_get+0x54>
   1ee8e:	b195      	cbz	r5, 1eeb6 <am_hal_queue_item_get+0x42>
   1ee90:	6863      	ldr	r3, [r4, #4]
   1ee92:	b306      	cbz	r6, 1eed6 <am_hal_queue_item_get+0x62>
   1ee94:	1e71      	subs	r1, r6, #1
   1ee96:	194e      	adds	r6, r1, r5
   1ee98:	6962      	ldr	r2, [r4, #20]
   1ee9a:	5cd3      	ldrb	r3, [r2, r3]
   1ee9c:	f801 3f01 	strb.w	r3, [r1, #1]!
   1eea0:	6863      	ldr	r3, [r4, #4]
   1eea2:	68e0      	ldr	r0, [r4, #12]
   1eea4:	3301      	adds	r3, #1
   1eea6:	428e      	cmp	r6, r1
   1eea8:	fbb3 f2f0 	udiv	r2, r3, r0
   1eeac:	fb00 3312 	mls	r3, r0, r2, r3
   1eeb0:	6063      	str	r3, [r4, #4]
   1eeb2:	d1f1      	bne.n	1ee98 <am_hal_queue_item_get+0x24>
   1eeb4:	68a2      	ldr	r2, [r4, #8]
   1eeb6:	9801      	ldr	r0, [sp, #4]
   1eeb8:	1b52      	subs	r2, r2, r5
   1eeba:	60a2      	str	r2, [r4, #8]
   1eebc:	f7ff fdbc 	bl	1ea38 <am_hal_interrupt_master_set>
   1eec0:	2401      	movs	r4, #1
   1eec2:	4620      	mov	r0, r4
   1eec4:	b002      	add	sp, #8
   1eec6:	bd70      	pop	{r4, r5, r6, pc}
   1eec8:	9801      	ldr	r0, [sp, #4]
   1eeca:	f7ff fdb5 	bl	1ea38 <am_hal_interrupt_master_set>
   1eece:	2400      	movs	r4, #0
   1eed0:	4620      	mov	r0, r4
   1eed2:	b002      	add	sp, #8
   1eed4:	bd70      	pop	{r4, r5, r6, pc}
   1eed6:	68e0      	ldr	r0, [r4, #12]
   1eed8:	4631      	mov	r1, r6
   1eeda:	3101      	adds	r1, #1
   1eedc:	3301      	adds	r3, #1
   1eede:	42a9      	cmp	r1, r5
   1eee0:	fbb3 f6f0 	udiv	r6, r3, r0
   1eee4:	fb00 3316 	mls	r3, r0, r6, r3
   1eee8:	d1f7      	bne.n	1eeda <am_hal_queue_item_get+0x66>
   1eeea:	6063      	str	r3, [r4, #4]
   1eeec:	e7e3      	b.n	1eeb6 <am_hal_queue_item_get+0x42>
   1eeee:	bf00      	nop

0001eef0 <am_hal_stimer_config>:
   1eef0:	4a03      	ldr	r2, [pc, #12]	; (1ef00 <am_hal_stimer_config+0x10>)
   1eef2:	4603      	mov	r3, r0
   1eef4:	f8d2 0140 	ldr.w	r0, [r2, #320]	; 0x140
   1eef8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
   1eefc:	4770      	bx	lr
   1eefe:	bf00      	nop
   1ef00:	40008000 	.word	0x40008000

0001ef04 <am_hal_stimer_counter_get>:
   1ef04:	b500      	push	{lr}
   1ef06:	b085      	sub	sp, #20
   1ef08:	4805      	ldr	r0, [pc, #20]	; (1ef20 <am_hal_stimer_counter_get+0x1c>)
   1ef0a:	a901      	add	r1, sp, #4
   1ef0c:	f7ff fbd2 	bl	1e6b4 <am_hal_triple_read>
   1ef10:	e9dd 3001 	ldrd	r3, r0, [sp, #4]
   1ef14:	4283      	cmp	r3, r0
   1ef16:	bf18      	it	ne
   1ef18:	9803      	ldrne	r0, [sp, #12]
   1ef1a:	b005      	add	sp, #20
   1ef1c:	f85d fb04 	ldr.w	pc, [sp], #4
   1ef20:	40008144 	.word	0x40008144

0001ef24 <am_hal_stimer_compare_delta_set>:
   1ef24:	2807      	cmp	r0, #7
   1ef26:	d900      	bls.n	1ef2a <am_hal_stimer_compare_delta_set+0x6>
   1ef28:	4770      	bx	lr
   1ef2a:	b530      	push	{r4, r5, lr}
   1ef2c:	b083      	sub	sp, #12
   1ef2e:	460c      	mov	r4, r1
   1ef30:	4605      	mov	r5, r0
   1ef32:	f7ff fd7d 	bl	1ea30 <am_hal_interrupt_master_disable>
   1ef36:	4a27      	ldr	r2, [pc, #156]	; (1efd4 <am_hal_stimer_compare_delta_set+0xb0>)
   1ef38:	9001      	str	r0, [sp, #4]
   1ef3a:	4b27      	ldr	r3, [pc, #156]	; (1efd8 <am_hal_stimer_compare_delta_set+0xb4>)
   1ef3c:	f8d2 1140 	ldr.w	r1, [r2, #320]	; 0x140
   1ef40:	f8d2 0140 	ldr.w	r0, [r2, #320]	; 0x140
   1ef44:	f44f 7c80 	mov.w	ip, #256	; 0x100
   1ef48:	442b      	add	r3, r5
   1ef4a:	fa0c f505 	lsl.w	r5, ip, r5
   1ef4e:	009b      	lsls	r3, r3, #2
   1ef50:	ea20 0005 	bic.w	r0, r0, r5
   1ef54:	f8c2 0140 	str.w	r0, [r2, #320]	; 0x140
   1ef58:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
   1ef5c:	601c      	str	r4, [r3, #0]
   1ef5e:	6818      	ldr	r0, [r3, #0]
   1ef60:	4422      	add	r2, r4
   1ef62:	eba0 0c02 	sub.w	ip, r0, r2
   1ef66:	f1bc 0f00 	cmp.w	ip, #0
   1ef6a:	db03      	blt.n	1ef74 <am_hal_stimer_compare_delta_set+0x50>
   1ef6c:	320a      	adds	r2, #10
   1ef6e:	1a82      	subs	r2, r0, r2
   1ef70:	2a00      	cmp	r2, #0
   1ef72:	dd22      	ble.n	1efba <am_hal_stimer_compare_delta_set+0x96>
   1ef74:	4a17      	ldr	r2, [pc, #92]	; (1efd4 <am_hal_stimer_compare_delta_set+0xb0>)
   1ef76:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
   1ef7a:	601c      	str	r4, [r3, #0]
   1ef7c:	6818      	ldr	r0, [r3, #0]
   1ef7e:	4422      	add	r2, r4
   1ef80:	eba0 0c02 	sub.w	ip, r0, r2
   1ef84:	f1bc 0f00 	cmp.w	ip, #0
   1ef88:	db03      	blt.n	1ef92 <am_hal_stimer_compare_delta_set+0x6e>
   1ef8a:	320a      	adds	r2, #10
   1ef8c:	1a82      	subs	r2, r0, r2
   1ef8e:	2a00      	cmp	r2, #0
   1ef90:	dd13      	ble.n	1efba <am_hal_stimer_compare_delta_set+0x96>
   1ef92:	4a10      	ldr	r2, [pc, #64]	; (1efd4 <am_hal_stimer_compare_delta_set+0xb0>)
   1ef94:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
   1ef98:	601c      	str	r4, [r3, #0]
   1ef9a:	6818      	ldr	r0, [r3, #0]
   1ef9c:	4422      	add	r2, r4
   1ef9e:	eba0 0c02 	sub.w	ip, r0, r2
   1efa2:	f1bc 0f00 	cmp.w	ip, #0
   1efa6:	db03      	blt.n	1efb0 <am_hal_stimer_compare_delta_set+0x8c>
   1efa8:	320a      	adds	r2, #10
   1efaa:	1a82      	subs	r2, r0, r2
   1efac:	2a00      	cmp	r2, #0
   1efae:	dd04      	ble.n	1efba <am_hal_stimer_compare_delta_set+0x96>
   1efb0:	4a08      	ldr	r2, [pc, #32]	; (1efd4 <am_hal_stimer_compare_delta_set+0xb0>)
   1efb2:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
   1efb6:	601c      	str	r4, [r3, #0]
   1efb8:	681b      	ldr	r3, [r3, #0]
   1efba:	4b06      	ldr	r3, [pc, #24]	; (1efd4 <am_hal_stimer_compare_delta_set+0xb0>)
   1efbc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   1efc0:	400d      	ands	r5, r1
   1efc2:	4315      	orrs	r5, r2
   1efc4:	f8c3 5140 	str.w	r5, [r3, #320]	; 0x140
   1efc8:	9801      	ldr	r0, [sp, #4]
   1efca:	b003      	add	sp, #12
   1efcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1efd0:	f7ff bd32 	b.w	1ea38 <am_hal_interrupt_master_set>
   1efd4:	40008000 	.word	0x40008000
   1efd8:	10002054 	.word	0x10002054

0001efdc <am_hal_stimer_int_enable>:
   1efdc:	4a03      	ldr	r2, [pc, #12]	; (1efec <am_hal_stimer_int_enable+0x10>)
   1efde:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
   1efe2:	4318      	orrs	r0, r3
   1efe4:	f8c2 0300 	str.w	r0, [r2, #768]	; 0x300
   1efe8:	4770      	bx	lr
   1efea:	bf00      	nop
   1efec:	40008000 	.word	0x40008000

0001eff0 <am_hal_stimer_int_clear>:
   1eff0:	4b01      	ldr	r3, [pc, #4]	; (1eff8 <am_hal_stimer_int_clear+0x8>)
   1eff2:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   1eff6:	4770      	bx	lr
   1eff8:	40008000 	.word	0x40008000

0001effc <am_hal_stimer_int_status_get>:
   1effc:	4a04      	ldr	r2, [pc, #16]	; (1f010 <am_hal_stimer_int_status_get+0x14>)
   1effe:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
   1f002:	b110      	cbz	r0, 1f00a <am_hal_stimer_int_status_get+0xe>
   1f004:	f8d2 2300 	ldr.w	r2, [r2, #768]	; 0x300
   1f008:	4013      	ands	r3, r2
   1f00a:	4618      	mov	r0, r3
   1f00c:	4770      	bx	lr
   1f00e:	bf00      	nop
   1f010:	40008000 	.word	0x40008000

0001f014 <am_hal_sysctrl_sleep>:
   1f014:	b510      	push	{r4, lr}
   1f016:	b082      	sub	sp, #8
   1f018:	4604      	mov	r4, r0
   1f01a:	f7ff fd09 	bl	1ea30 <am_hal_interrupt_master_disable>
   1f01e:	9001      	str	r0, [sp, #4]
   1f020:	b124      	cbz	r4, 1f02c <am_hal_sysctrl_sleep+0x18>
   1f022:	4b12      	ldr	r3, [pc, #72]	; (1f06c <am_hal_sysctrl_sleep+0x58>)
   1f024:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
   1f028:	07db      	lsls	r3, r3, #31
   1f02a:	d513      	bpl.n	1f054 <am_hal_sysctrl_sleep+0x40>
   1f02c:	4a10      	ldr	r2, [pc, #64]	; (1f070 <am_hal_sysctrl_sleep+0x5c>)
   1f02e:	6913      	ldr	r3, [r2, #16]
   1f030:	f023 0304 	bic.w	r3, r3, #4
   1f034:	6113      	str	r3, [r2, #16]
   1f036:	f3bf 8f4f 	dsb	sy
   1f03a:	4a0e      	ldr	r2, [pc, #56]	; (1f074 <am_hal_sysctrl_sleep+0x60>)
   1f03c:	4b0e      	ldr	r3, [pc, #56]	; (1f078 <am_hal_sysctrl_sleep+0x64>)
   1f03e:	6812      	ldr	r2, [r2, #0]
   1f040:	601a      	str	r2, [r3, #0]
   1f042:	bf30      	wfi
   1f044:	f3bf 8f6f 	isb	sy
   1f048:	9801      	ldr	r0, [sp, #4]
   1f04a:	b002      	add	sp, #8
   1f04c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f050:	f7ff bcf2 	b.w	1ea38 <am_hal_interrupt_master_set>
   1f054:	4b09      	ldr	r3, [pc, #36]	; (1f07c <am_hal_sysctrl_sleep+0x68>)
   1f056:	681a      	ldr	r2, [r3, #0]
   1f058:	b912      	cbnz	r2, 1f060 <am_hal_sysctrl_sleep+0x4c>
   1f05a:	4a09      	ldr	r2, [pc, #36]	; (1f080 <am_hal_sysctrl_sleep+0x6c>)
   1f05c:	6812      	ldr	r2, [r2, #0]
   1f05e:	601a      	str	r2, [r3, #0]
   1f060:	4a03      	ldr	r2, [pc, #12]	; (1f070 <am_hal_sysctrl_sleep+0x5c>)
   1f062:	6913      	ldr	r3, [r2, #16]
   1f064:	f043 0304 	orr.w	r3, r3, #4
   1f068:	6113      	str	r3, [r2, #16]
   1f06a:	e7e4      	b.n	1f036 <am_hal_sysctrl_sleep+0x22>
   1f06c:	40020000 	.word	0x40020000
   1f070:	e000ed00 	.word	0xe000ed00
   1f074:	5fff0000 	.word	0x5fff0000
   1f078:	10009d8c 	.word	0x10009d8c
   1f07c:	10009d88 	.word	0x10009d88
   1f080:	4ffff000 	.word	0x4ffff000

0001f084 <am_hal_sysctrl_fpu_enable>:
   1f084:	4b02      	ldr	r3, [pc, #8]	; (1f090 <am_hal_sysctrl_fpu_enable+0xc>)
   1f086:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   1f08a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   1f08e:	4770      	bx	lr
   1f090:	e000ed00 	.word	0xe000ed00

0001f094 <am_hal_sysctrl_fpu_stacking_enable>:
   1f094:	b510      	push	{r4, lr}
   1f096:	b082      	sub	sp, #8
   1f098:	4604      	mov	r4, r0
   1f09a:	f7ff fcc9 	bl	1ea30 <am_hal_interrupt_master_disable>
   1f09e:	4909      	ldr	r1, [pc, #36]	; (1f0c4 <am_hal_sysctrl_fpu_stacking_enable+0x30>)
   1f0a0:	9001      	str	r0, [sp, #4]
   1f0a2:	6b4a      	ldr	r2, [r1, #52]	; 0x34
   1f0a4:	2c00      	cmp	r4, #0
   1f0a6:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
   1f0aa:	bf14      	ite	ne
   1f0ac:	f04f 4340 	movne.w	r3, #3221225472	; 0xc0000000
   1f0b0:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
   1f0b4:	4313      	orrs	r3, r2
   1f0b6:	634b      	str	r3, [r1, #52]	; 0x34
   1f0b8:	9801      	ldr	r0, [sp, #4]
   1f0ba:	b002      	add	sp, #8
   1f0bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f0c0:	f7ff bcba 	b.w	1ea38 <am_hal_interrupt_master_set>
   1f0c4:	e000ef00 	.word	0xe000ef00

0001f0c8 <am_bsp_low_power_init>:
   1f0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f0ca:	f7ff fdab 	bl	1ec24 <am_hal_pwrctrl_low_power_init>
   1f0ce:	f000 f877 	bl	1f1c0 <am_hal_rtc_osc_disable>
   1f0d2:	4b0b      	ldr	r3, [pc, #44]	; (1f100 <am_bsp_low_power_init+0x38>)
   1f0d4:	4f0b      	ldr	r7, [pc, #44]	; (1f104 <am_bsp_low_power_init+0x3c>)
   1f0d6:	681e      	ldr	r6, [r3, #0]
   1f0d8:	2400      	movs	r4, #0
   1f0da:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
   1f0de:	4631      	mov	r1, r6
   1f0e0:	4628      	mov	r0, r5
   1f0e2:	f7ff faf5 	bl	1e6d0 <am_hal_gpio_pinconfig>
   1f0e6:	2103      	movs	r1, #3
   1f0e8:	4628      	mov	r0, r5
   1f0ea:	f7ff fc5d 	bl	1e9a8 <am_hal_gpio_state_write>
   1f0ee:	3401      	adds	r4, #1
   1f0f0:	2100      	movs	r1, #0
   1f0f2:	4628      	mov	r0, r5
   1f0f4:	f7ff fc58 	bl	1e9a8 <am_hal_gpio_state_write>
   1f0f8:	2c05      	cmp	r4, #5
   1f0fa:	d1ee      	bne.n	1f0da <am_bsp_low_power_init+0x12>
   1f0fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f0fe:	bf00      	nop
   1f100:	000223bc 	.word	0x000223bc
   1f104:	10003dbc 	.word	0x10003dbc

0001f108 <am_bsp_itm_printf_enable>:
   1f108:	b500      	push	{lr}
   1f10a:	4b0b      	ldr	r3, [pc, #44]	; (1f138 <am_bsp_itm_printf_enable+0x30>)
   1f10c:	b087      	sub	sp, #28
   1f10e:	2201      	movs	r2, #1
   1f110:	601a      	str	r2, [r3, #0]
   1f112:	f000 f819 	bl	1f148 <am_hal_itm_enable>
   1f116:	4b09      	ldr	r3, [pc, #36]	; (1f13c <am_bsp_itm_printf_enable+0x34>)
   1f118:	9301      	str	r3, [sp, #4]
   1f11a:	a801      	add	r0, sp, #4
   1f11c:	f000 f85a 	bl	1f1d4 <am_hal_tpiu_enable>
   1f120:	4b07      	ldr	r3, [pc, #28]	; (1f140 <am_bsp_itm_printf_enable+0x38>)
   1f122:	2029      	movs	r0, #41	; 0x29
   1f124:	6819      	ldr	r1, [r3, #0]
   1f126:	f7ff fad3 	bl	1e6d0 <am_hal_gpio_pinconfig>
   1f12a:	4806      	ldr	r0, [pc, #24]	; (1f144 <am_bsp_itm_printf_enable+0x3c>)
   1f12c:	f7fc ff5e 	bl	1bfec <am_util_stdio_printf_init>
   1f130:	b007      	add	sp, #28
   1f132:	f85d fb04 	ldr.w	pc, [sp], #4
   1f136:	bf00      	nop
   1f138:	10009d90 	.word	0x10009d90
   1f13c:	000f4240 	.word	0x000f4240
   1f140:	00022658 	.word	0x00022658
   1f144:	0001f191 	.word	0x0001f191

0001f148 <am_hal_itm_enable>:
   1f148:	4a0e      	ldr	r2, [pc, #56]	; (1f184 <am_hal_itm_enable+0x3c>)
   1f14a:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   1f14e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1f152:	b410      	push	{r4}
   1f154:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
   1f158:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   1f15c:	01db      	lsls	r3, r3, #7
   1f15e:	d5fb      	bpl.n	1f158 <am_hal_itm_enable+0x10>
   1f160:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
   1f164:	4c08      	ldr	r4, [pc, #32]	; (1f188 <am_hal_itm_enable+0x40>)
   1f166:	4a09      	ldr	r2, [pc, #36]	; (1f18c <am_hal_itm_enable+0x44>)
   1f168:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
   1f16c:	200f      	movs	r0, #15
   1f16e:	f04f 31ff 	mov.w	r1, #4294967295
   1f172:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
   1f176:	f85d 4b04 	ldr.w	r4, [sp], #4
   1f17a:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
   1f17e:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
   1f182:	4770      	bx	lr
   1f184:	e000ed00 	.word	0xe000ed00
   1f188:	c5acce55 	.word	0xc5acce55
   1f18c:	00150511 	.word	0x00150511

0001f190 <am_hal_itm_print>:
   1f190:	7803      	ldrb	r3, [r0, #0]
   1f192:	b1a3      	cbz	r3, 1f1be <am_hal_itm_print+0x2e>
   1f194:	4603      	mov	r3, r0
   1f196:	f1c0 0c01 	rsb	ip, r0, #1
   1f19a:	eb0c 0103 	add.w	r1, ip, r3
   1f19e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1f1a2:	2a00      	cmp	r2, #0
   1f1a4:	d1f9      	bne.n	1f19a <am_hal_itm_print+0xa>
   1f1a6:	4401      	add	r1, r0
   1f1a8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   1f1ac:	f810 cb01 	ldrb.w	ip, [r0], #1
   1f1b0:	6813      	ldr	r3, [r2, #0]
   1f1b2:	2b00      	cmp	r3, #0
   1f1b4:	d0fc      	beq.n	1f1b0 <am_hal_itm_print+0x20>
   1f1b6:	4288      	cmp	r0, r1
   1f1b8:	f882 c000 	strb.w	ip, [r2]
   1f1bc:	d1f6      	bne.n	1f1ac <am_hal_itm_print+0x1c>
   1f1be:	4770      	bx	lr

0001f1c0 <am_hal_rtc_osc_disable>:
   1f1c0:	4a03      	ldr	r2, [pc, #12]	; (1f1d0 <am_hal_rtc_osc_disable+0x10>)
   1f1c2:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
   1f1c6:	f043 0310 	orr.w	r3, r3, #16
   1f1ca:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
   1f1ce:	4770      	bx	lr
   1f1d0:	40004200 	.word	0x40004200

0001f1d4 <am_hal_tpiu_enable>:
   1f1d4:	b510      	push	{r4, lr}
   1f1d6:	4b23      	ldr	r3, [pc, #140]	; (1f264 <am_hal_tpiu_enable+0x90>)
   1f1d8:	6804      	ldr	r4, [r0, #0]
   1f1da:	2200      	movs	r2, #0
   1f1dc:	b084      	sub	sp, #16
   1f1de:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   1f1e2:	b334      	cbz	r4, 1f232 <am_hal_tpiu_enable+0x5e>
   1f1e4:	4a20      	ldr	r2, [pc, #128]	; (1f268 <am_hal_tpiu_enable+0x94>)
   1f1e6:	4921      	ldr	r1, [pc, #132]	; (1f26c <am_hal_tpiu_enable+0x98>)
   1f1e8:	2001      	movs	r0, #1
   1f1ea:	6058      	str	r0, [r3, #4]
   1f1ec:	f5a4 4361 	sub.w	r3, r4, #57600	; 0xe100
   1f1f0:	a801      	add	r0, sp, #4
   1f1f2:	428b      	cmp	r3, r1
   1f1f4:	bf88      	it	hi
   1f1f6:	4614      	movhi	r4, r2
   1f1f8:	f7ff f9a6 	bl	1e548 <am_hal_clkgen_status_get>
   1f1fc:	9b01      	ldr	r3, [sp, #4]
   1f1fe:	1c5a      	adds	r2, r3, #1
   1f200:	d02d      	beq.n	1f25e <am_hal_tpiu_enable+0x8a>
   1f202:	08db      	lsrs	r3, r3, #3
   1f204:	fbb3 f4f4 	udiv	r4, r3, r4
   1f208:	3c01      	subs	r4, #1
   1f20a:	b2a4      	uxth	r4, r4
   1f20c:	4b15      	ldr	r3, [pc, #84]	; (1f264 <am_hal_tpiu_enable+0x90>)
   1f20e:	4a18      	ldr	r2, [pc, #96]	; (1f270 <am_hal_tpiu_enable+0x9c>)
   1f210:	611c      	str	r4, [r3, #16]
   1f212:	2102      	movs	r1, #2
   1f214:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
   1f218:	2000      	movs	r0, #0
   1f21a:	f240 2101 	movw	r1, #513	; 0x201
   1f21e:	f8c3 0f00 	str.w	r0, [r3, #3840]	; 0xf00
   1f222:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
   1f226:	f44f 7048 	mov.w	r0, #800	; 0x320
   1f22a:	f7ff f9f3 	bl	1e614 <am_hal_flash_delay>
   1f22e:	b004      	add	sp, #16
   1f230:	bd10      	pop	{r4, pc}
   1f232:	6902      	ldr	r2, [r0, #16]
   1f234:	611a      	str	r2, [r3, #16]
   1f236:	6882      	ldr	r2, [r0, #8]
   1f238:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
   1f23c:	68c1      	ldr	r1, [r0, #12]
   1f23e:	2201      	movs	r2, #1
   1f240:	3901      	subs	r1, #1
   1f242:	408a      	lsls	r2, r1
   1f244:	605a      	str	r2, [r3, #4]
   1f246:	f8c3 4f00 	str.w	r4, [r3, #3840]	; 0xf00
   1f24a:	4a09      	ldr	r2, [pc, #36]	; (1f270 <am_hal_tpiu_enable+0x9c>)
   1f24c:	6843      	ldr	r3, [r0, #4]
   1f24e:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
   1f252:	f44f 7048 	mov.w	r0, #800	; 0x320
   1f256:	f7ff f9dd 	bl	1e614 <am_hal_flash_delay>
   1f25a:	b004      	add	sp, #16
   1f25c:	bd10      	pop	{r4, pc}
   1f25e:	2405      	movs	r4, #5
   1f260:	e7d4      	b.n	1f20c <am_hal_tpiu_enable+0x38>
   1f262:	bf00      	nop
   1f264:	e0040000 	.word	0xe0040000
   1f268:	000f4240 	.word	0x000f4240
   1f26c:	001da380 	.word	0x001da380
   1f270:	40020000 	.word	0x40020000
   1f274:	00000004 	.word	0x00000004
   1f278:	00000020 	.word	0x00000020
   1f27c:	00000020 	.word	0x00000020
   1f280:	00000002 	.word	0x00000002
   1f284:	00000000 	.word	0x00000000
   1f288:	00000032 	.word	0x00000032
   1f28c:	00010101 	.word	0x00010101
   1f290:	00000000 	.word	0x00000000
   1f294:	4f525245 	.word	0x4f525245
   1f298:	48435f52 	.word	0x48435f52
   1f29c:	204b4345 	.word	0x204b4345
   1f2a0:	685f6d61 	.word	0x685f6d61
   1f2a4:	625f6c61 	.word	0x625f6c61
   1f2a8:	695f656c 	.word	0x695f656c
   1f2ac:	6974696e 	.word	0x6974696e
   1f2b0:	7a696c61 	.word	0x7a696c61
   1f2b4:	2c302865 	.word	0x2c302865
   1f2b8:	4c422620 	.word	0x4c422620
   1f2bc:	000a2945 	.word	0x000a2945
   1f2c0:	4f525245 	.word	0x4f525245
   1f2c4:	48435f52 	.word	0x48435f52
   1f2c8:	204b4345 	.word	0x204b4345
   1f2cc:	685f6d61 	.word	0x685f6d61
   1f2d0:	625f6c61 	.word	0x625f6c61
   1f2d4:	705f656c 	.word	0x705f656c
   1f2d8:	7265776f 	.word	0x7265776f
   1f2dc:	6e6f635f 	.word	0x6e6f635f
   1f2e0:	6c6f7274 	.word	0x6c6f7274
   1f2e4:	454c4228 	.word	0x454c4228
   1f2e8:	4d41202c 	.word	0x4d41202c
   1f2ec:	4c41485f 	.word	0x4c41485f
   1f2f0:	454c425f 	.word	0x454c425f
   1f2f4:	574f505f 	.word	0x574f505f
   1f2f8:	415f5245 	.word	0x415f5245
   1f2fc:	56495443 	.word	0x56495443
   1f300:	000a2945 	.word	0x000a2945
   1f304:	4f525245 	.word	0x4f525245
   1f308:	48435f52 	.word	0x48435f52
   1f30c:	204b4345 	.word	0x204b4345
   1f310:	685f6d61 	.word	0x685f6d61
   1f314:	625f6c61 	.word	0x625f6c61
   1f318:	635f656c 	.word	0x635f656c
   1f31c:	69666e6f 	.word	0x69666e6f
   1f320:	4c422867 	.word	0x4c422867
   1f324:	26202c45 	.word	0x26202c45
   1f328:	656c4273 	.word	0x656c4273
   1f32c:	666e6f43 	.word	0x666e6f43
   1f330:	0a296769 	.word	0x0a296769
   1f334:	00000000 	.word	0x00000000
   1f338:	4f525245 	.word	0x4f525245
   1f33c:	48435f52 	.word	0x48435f52
   1f340:	204b4345 	.word	0x204b4345
   1f344:	685f6d61 	.word	0x685f6d61
   1f348:	625f6c61 	.word	0x625f6c61
   1f34c:	705f656c 	.word	0x705f656c
   1f350:	7265776f 	.word	0x7265776f
   1f354:	6e6f635f 	.word	0x6e6f635f
   1f358:	6c6f7274 	.word	0x6c6f7274
   1f35c:	454c4228 	.word	0x454c4228
   1f360:	4d41202c 	.word	0x4d41202c
   1f364:	4c41485f 	.word	0x4c41485f
   1f368:	454c425f 	.word	0x454c425f
   1f36c:	574f505f 	.word	0x574f505f
   1f370:	4f5f5245 	.word	0x4f5f5245
   1f374:	0a294646 	.word	0x0a294646
   1f378:	00000000 	.word	0x00000000
   1f37c:	4f525245 	.word	0x4f525245
   1f380:	48435f52 	.word	0x48435f52
   1f384:	204b4345 	.word	0x204b4345
   1f388:	685f6d61 	.word	0x685f6d61
   1f38c:	625f6c61 	.word	0x625f6c61
   1f390:	645f656c 	.word	0x645f656c
   1f394:	696e6965 	.word	0x696e6965
   1f398:	6c616974 	.word	0x6c616974
   1f39c:	28657a69 	.word	0x28657a69
   1f3a0:	29454c42 	.word	0x29454c42
   1f3a4:	0000000a 	.word	0x0000000a

0001f3a8 <ui8TxPowerRegValues>:
   1f3a8:	000f0804                                ....

0001f3ac <hciEventMask>:
   1f3ac:	02008890 20008000                       ....... 

0001f3b4 <hciEventMaskPage2>:
   1f3b4:	00800000 00000000                       ........

0001f3bc <hciLeEventMask>:
   1f3bc:	007fffff 00000000 6d20454c 20617465     ........LE meta 
   1f3cc:	20627573 6e657665 203d2074 78257830     sub event = 0x%x
   1f3dc:	00000000 45696368 72507476 7365636f     ....hciEvtProces
   1f3ec:	43654c73 496e6e6f 70655251 0074726f     sLeConnIQReport.
   1f3fc:	20766372 4320654c 496e6e6f 65522051     rcv Le ConnIQ Re
   1f40c:	74726f70 002e2e2e 20657463 20716572     port....cte req 
   1f41c:	6c696166 2e2e6465 00002e2e 20766372     failed......rcv 
   1f42c:	4320654c 746e6e6f 7373656c 20514920     Le Conntless IQ 
   1f43c:	6f706552 2e2e7472 0000002e              Report......

0001f448 <hciEvtCbackLen>:
   1f448:	0a242404 0a1c060e 100e080e 0a080808     .$$.............
   1f458:	06080610 06060606 16060c0c 0a08080e     ................
   1f468:	0e0e0806 0826460e 0a060a06 0c0a0424     .....F&.....$...
   1f478:	04061016 04040404 04040404 08041c04     ................
   1f488:	00080808                                ....

0001f48c <hciEvtParseFcnTbl>:
   1f48c:	00000000 0000eb0d 0000e941 0000e4cd     ........A.......
   1f49c:	0000e4e9 0000e52d 00000000 0000e541     ....-.......A...
   1f4ac:	0000eae9 0000e55d 0000e571 0000eac1     ....]...q.......
   1f4bc:	0000e5ad 0000e5c5 0000e5dd 0000e5f5     ................
   1f4cc:	0000ea91 0000e611 0000ea75 0000ea6d     ........u...m...
   1f4dc:	0000e61d 0000e625 0000e639 0000e64d     ....%...9...M...
   1f4ec:	0000e929 0000e911 0000e661 0000ea41     ).......a...A...
   1f4fc:	0000ea25 0000e675 0000e68d 0000e6a5     %...u...........
   1f50c:	0000e6c5 0000e6d9 0000e6f1 0000e729     ............)...
   1f51c:	0000e769 0000e9f1 0000e9a9 0000e7a9     i...............
   1f52c:	0000e7c1 0000e7d1 0000e7f5 0000e809     ................
   1f53c:	00000000 0000e82d 0000e831 0000e901     ....-...1.......
   1f54c:	0000e8c5 00000000 0000e8b9 00000000     ................
   1f55c:	0000e851 0000e851 0000e851 0000e851     Q...Q...Q...Q...
   1f56c:	0000e851 00000000 00000000 00000000     Q...............
	...
   1f588:	0000e859 0000e871 0000e889 0000e8a1     Y...q...........
   1f598:	42667357 6c416675 20636f6c 6c696166     WsfBufAlloc fail
   1f5a8:	6c206465 253a6e65 00000075 20465357     ed len:%u...WSF 
   1f5b8:	656d6954 00000072 58323025 00000020     Timer...%02X ...
   1f5c8:	00000a0a 2e2f2e2e 2e2e2f2e 2f2e2e2f     ....../../../../
   1f5d8:	742f2e2e 64726968 7261705f 632f7974     ../third_party/c
   1f5e8:	6964726f 73772f6f 6f732f66 65637275     ordio/wsf/source
   1f5f8:	6f702f73 662f7472 72656572 2f736f74     s/port/freertos/
   1f608:	5f667377 63617274 00632e65 72635370     wsf_trace.c.pScr
   1f618:	726c6120 79646165 6c6c6120 7461636f      already allocat
   1f628:	00006465 646e6152 00624e20 434e574a     ed..Rand Nb.JWNC
   1f638:	6e6f4320 6d726966 00000000 00696243      Confirm....Cbi.
   1f648:	00006143 50206143 00726565 654b4844     Ca..Ca Peer.DHKe
   1f658:	62452079 00000000                       y Eb....

0001f660 <smprScActionTbl>:
   1f660:	00010f41 000127bd 000127d1 000127ed     A....'...'...'..
   1f670:	000109c5 00011065 0001096d 00011091     ....e...m.......
   1f680:	000110d5 000110dd 00011139 00011169     ........9...i...
   1f690:	00011415 00011525 000114b9 000114a1     ....%...........
   1f6a0:	000114ad 00011499 0001058d 000105b5     ................
   1f6b0:	00010639 000106dd 000109dd 00010a31     9...........1...
   1f6c0:	00010a55 00010a75 00012895 00012a21     U...u....(..!*..
   1f6d0:	00012a69 00010a99 00010aa9 00010b11     i*..............
   1f6e0:	00010bb1 00010c09 00010c2d 00010c6d     ........-...m...
   1f6f0:	00010cf5 00010cfd 00010d79 00010de9     ........y.......
   1f700:	00010e01 00010e1d 00012b45 00012be9     ........E+...+..
   1f710:	00012c6d 00012ce9 00012d6d 00010e55     m,...,..m-..U...
   1f720:	00010709 0001074d 000107b1 00010819     ....M...........
   1f730:	00010941 000108c9                       A.......

0001f738 <smprScSmIf>:
   1f738:	0001f744 0001f660 0001f84c              D...`...L...

0001f744 <smprScStateTbl>:
   1f744:	0001f880 0001f7e4 0001f7fc 0001f8e0     ................
   1f754:	0001f940 0001f8d8 0001f81c 0001f8a0     @...............
   1f764:	0001f8a8 0001f898 0001f8b0 0001f8bc     ................
   1f774:	0001f8fc 0001f90c 0001f938 0001f914     ........8.......
   1f784:	0001f924 0001f91c 0001f92c 0001f8ec     $.......,.......
   1f794:	0001f8f4 0001f968 0001f828 0001f840     ....h...(...@...
   1f7a4:	0001f838 0001f830 0001f85c 0001f864     8...0...\...d...
   1f7b4:	0001f99c 0001f9a8 0001f974 0001f97c     ........t...|...
   1f7c4:	0001f994 0001f984 0001f98c 0001f95c     ............\...
   1f7d4:	0001f86c 0001f8c8 0001f804 0001f948     l...........H...

0001f7e4 <smprScStateTblApiPairReq>:
   1f7e4:	0601000a 00071302 01000302 09010008     ................
   1f7f4:	00000100 00000000                       ........

0001f7fc <smprScStateTblApiPairRsp>:
   1f7fc:	00140302 00000000                       ........

0001f804 <smprScStateTblAttempts>:
   1f804:	0f0e0010 26060227 0f000511 0301000a     ....'..&........
   1f814:	26070100 00000000                       ...&....

0001f81c <smprScStateTblAuthSelect>:
   1f81c:	14160713 14151a0c 00000024              ........$...

0001f828 <smprScStateTblCalcDHKey>:
   1f828:	002a1719 00000000                       ..*.....

0001f830 <smprScStateTblCalcF5LTK>:
   1f830:	002d1a1c 00000000                       ..-.....

0001f838 <smprScStateTblCalcF5MacKey>:
   1f838:	002c191c 00000000                       ..,.....

0001f840 <smprScStateTblCalcF5TKey>:
   1f840:	0d2b181c 00000c26 00000000              ..+.&.......

0001f84c <smprScStateTblCommon>:
   1f84c:	0702000a 00030200 02270f03 00000000     ..........'.....

0001f85c <smprScStateTblDhCalcF6Ea>:
   1f85c:	002e1b1c 00000000                       ........

0001f864 <smprScStateTblDhCalcF6Eb>:
   1f864:	002f241c 00000000                       .$/.....

0001f86c <smprScStateTblEncrypt>:
   1f86c:	09332508 24030200 03001d00 000c260d     .%3....$.....&..
   1f87c:	00000000                                ....

0001f880 <smprScStateTblIdle>:
   1f880:	0a120105 02060100 00000713 0f010003     ................
	...

0001f898 <smprScStateTblJwNcCalcG2>:
   1f898:	00190a1c 00000000                       ........

0001f8a0 <smprScStateTblJwNcSetup>:
   1f8a0:	0017081c 00000000                       ........

0001f8a8 <smprScStateTblJwNcWaitRand>:
   1f8a8:	00180906 00000000                       ........

0001f8b0 <smprScStateTblJwNcWaitUser>:
   1f8b0:	06281516 260d270b 0000000c              ..(..'.&....

0001f8bc <smprScStateTblJwNcWaitUserDhCheckRcvd>:
   1f8bc:	0d291616 00000c26 00000000              ..).&.......

0001f8c8 <smprScStateTblKeyDist>:
   1f8c8:	0c342506 000e3525 0025030d 00000000     .%4.%5....%.....

0001f8d8 <smprScStateTblLescPin>:
   1f8d8:	00060404 00000000                       ........

0001f8e0 <smprScStateTblModeSelect>:
   1f8e0:	12000511 0000001c 00000000              ............

0001f8ec <smprScStateTblOobSendRand>:
   1f8ec:	0026151c 00000000                       ..&.....

0001f8f4 <smprScStateTblOobWaitRand>:
   1f8f4:	00251306 00000000                       ..%.....

0001f8fc <smprScStateTblPassKeyKeypress>:
   1f8fc:	1e1b0c06 0c171d0d 060e041c 00000000     ................

0001f90c <smprScStateTblPassWaitAuthRsp>:
   1f90c:	001f0f04 00000000                       ........

0001f914 <smprScStateTblPasskeyCalc>:
   1f914:	0021101c 00000000                       ..!.....

0001f91c <smprScStateTblPasskeyCheck>:
   1f91c:	0023121c 00000000                       ..#.....

0001f924 <smprScStateTblPasskeyRand>:
   1f924:	00221106 00000000                       ..".....

0001f92c <smprScStateTblPasskeyRepeat>:
   1f92c:	1b000e1a 260d2815 0000000c              .....(.&....

0001f938 <smprScStateTblPasskeyWaitCnf>:
   1f938:	001e0f06 00000000                       ........

0001f940 <smprScStateTblPubKey>:
   1f940:	00040606 00000000                       ........

0001f948 <smprScStateTblRspTo>:
   1f948:	0701000a 27030027 00270f00 00102705     ....'..'..'..'..
   1f958:	00000000                                ....

0001f95c <smprScStateTblStkCalc>:
   1f95c:	0d32240b 00000c26 00000000              .$2.&.......

0001f968 <smprScStateTblWaitDhCheck>:
   1f968:	0d291606 00000c26 00000000              ..).&.......

0001f974 <smprStateTblCnfCalc1>:
   1f974:	00081f0b 00000000                       ........

0001f97c <smprStateTblCnfCalc2>:
   1f97c:	0009200b 00000000                       . ......

0001f984 <smprStateTblCnfVerCalc1>:
   1f984:	000b220b 00000000                       ."......

0001f98c <smprStateTblCnfVerCalc2>:
   1f98c:	0031230b 00000000                       .#1.....

0001f994 <smprStateTblPairRand>:
   1f994:	000a2106 00000000                       .!......

0001f99c <smprStateTblPinPair1>:
   1f99c:	06051d04 0000151d 00000000              ............

0001f9a8 <smprStateTblPinPair2>:
   1f9a8:	06071e04 0000301e 00000000              .....0......

0001f9b4 <smprActionTbl>:
   1f9b4:	00010f41 00010f45 00010fa5 00010ff9     A...E...........
   1f9c4:	00011065 00011091 000110d5 000110dd     e...............
   1f9d4:	00011139 00011169 00011415 00011499     9...i...........
   1f9e4:	000114b9 000114a1 000114ad 00011525     ............%...
   1f9f4:	0001058d 000105b5 00010639 000106dd     ........9.......
   1fa04:	00010709 0001074d 000107b1 00010819     ....M...........
   1fa14:	000108c9 00010941                       ....A...

0001fa1c <smprSmIf>:
   1fa1c:	0001fa28 0001f9b4 0001fabc              (...........

0001fa28 <smprStateTbl>:
   1fa28:	0001fad8 0001fa64 0001fa7c 0001fb08     ....d...|.......
   1fa38:	0001fb14 0001fa9c 0001faa4 0001fb00     ................
   1fa48:	0001faac 0001fab4 0001fb34 0001facc     ........4.......
   1fa58:	0001faf0 0001fa84 0001fb20              ........ ...

0001fa64 <smprStateTblApiPairReq>:
   1fa64:	0601000a 00071102 01000302 09010008     ................
   1fa74:	00000100 00000000                       ........

0001fa7c <smprStateTblApiPairRsp>:
   1fa7c:	00120302 00000000                       ........

0001fa84 <smprStateTblAttempts>:
   1fa84:	0f0c0010 0d06020e 0d00050b 0301000a     ................
   1fa94:	0d070100 00000000                       ........

0001fa9c <smprStateTblCnfCalc1>:
   1fa9c:	0006060b 00000000                       ........

0001faa4 <smprStateTblCnfCalc2>:
   1faa4:	0007070b 00000000                       ........

0001faac <smprStateTblCnfVerCalc1>:
   1faac:	0009090b 00000000                       ........

0001fab4 <smprStateTblCnfVerCalc2>:
   1fab4:	00150a0b 00000000                       ........

0001fabc <smprStateTblCommon>:
   1fabc:	0702000a 00030200 020e0f03 00000000     ................

0001facc <smprStateTblEncrypt>:
   1facc:	09170c08 0b030200 00000000              ............

0001fad8 <smprStateTblIdle>:
   1fad8:	0a100105 02060100 00000711 0f010003     ................
	...

0001faf0 <smprStateTblKeyDist>:
   1faf0:	06180c0c 000e190c 000c030f 00000000     ................

0001fb00 <smprStateTblPairRand>:
   1fb00:	00080806 00000000                       ........

0001fb08 <smprStateTblPinPair1>:
   1fb08:	06040404 00001304 00000000              ............

0001fb14 <smprStateTblPinPair2>:
   1fb14:	06050504 00001405 00000000              ............

0001fb20 <smprStateTblRspTo>:
   1fb20:	0701000a 0e03000e 000e0f00 000e0e05     ................
   1fb30:	00000000                                ....

0001fb34 <smprStateTblStkCalc>:
   1fb34:	0d160b0b 00000a0d 00000000 53706d73     ............smpS
   1fb44:	4b646e65 75207965 7078656e 65746365     endKey unexpecte
   1fb54:	74732064 20657461 4479656b 3a747369     d state keyDist:
   1fb64:	6c206425 53747361 4b746e65 253a7965     %d lastSentKey:%
   1fb74:	00000064 53706d73 6578456d 65747563     d...smpSmExecute
   1fb84:	65766520 253d746e 74732064 3d657461      event=%d state=
   1fb94:	00006425 44706d73 74654762 6f636552     %d..smpDbGetReco
   1fba4:	203a6472 6e6e6f63 203a6449 74206425     rd: connId: %d t
   1fbb4:	3a657079 00642520 44706d73 64644162     ype: %d.smpDbAdd
   1fbc4:	69766544 00006563 44706d73 74654762     Device..smpDbGet
   1fbd4:	6f636552 203a6472 6d6d6f63 72206e6f     Record: common r
   1fbe4:	726f6365 00000064 44706d53 74654762     ecord...SmpDbGet
   1fbf4:	72696150 44676e69 62617369 5464656c     PairingDisabledT
   1fc04:	3a656d69 6e6f6320 3a64496e 20642520     ime: connId: %d 
   1fc14:	69726570 203a646f 61206425 6d657474     period: %d attem
   1fc24:	754d7470 203a746c 00006425 44706d53     ptMult: %d..SmpD
   1fc34:	74655362 6c696146 43657275 746e756f     bSetFailureCount
   1fc44:	6f63203a 64496e6e 6425203a 756f6320     : connId: %d cou
   1fc54:	203a746e 00006425 44706d53 74654762     nt: %d..SmpDbGet
   1fc64:	6c696146 43657275 746e756f 6f63203a     FailureCount: co
   1fc74:	64496e6e 6425203a 756f6320 203a746e     nnId: %d count: 
   1fc84:	00006425 44706d53 78614d62 65747441     %d..SmpDbMaxAtte
   1fc94:	5274706d 68636165 203a6465 6e6e6f63     mptReached: conn
   1fca4:	203a6449 00006425 44706d53 69615062     Id: %d..SmpDbPai
   1fcb4:	676e6972 6c696146 203a6465 6e6e6f63     ringFailed: conn
   1fcc4:	203a6449 00006425 78656e75 74636570     Id: %d..unexpect
   1fcd4:	70206465 656b6361 6d632074 64253a64     ed packet cmd:%d
   1fce4:	6e656c20 2c64253a 70786520 65746365      len:%d, expecte
   1fcf4:	64253a64 00000000 53706d73 50646e65     d:%d....smpSendP
   1fd04:	7020746b 656b6361 69642074 72616373     kt packet discar
   1fd14:	20646564 3a646d63 00006425 20534541     ded cmd:%d..AES 
   1fd24:	656b6f74 696d206e 74616d73 203a6863     token mismatch: 
   1fd34:	25206425 00000064                       %d %d...

0001fd3c <smpPktLenTbl>:
   1fd3c:	11070700 0b110211 02110811 00021141     ............A...
   1fd4c:	50203446 0000624b 50203446 0000614b     F4 PKb..F4 PKa..
   1fd5c:	4e203446 00000062 434e574a 73694420     F4 Nb...JWNC Dis
   1fd6c:	79616c70 666e4320 00000000 654b4844     play Cnf....DHKe
   1fd7c:	53282079 65726168 65532064 74657263     y (Shared Secret
   1fd8c:	00000029 9183886c 38a5f5aa db0b3760     )...l......8`7..
   1fd9c:	be83605a 00000000 00000054 0043414d     Z`......T...MAC.
   1fdac:	004b544c 654b4844 61452079 00000000     LTK.DHKey Ea....

0001fdbc <smpScF5Key>:
   1fdbc:	656c7462 53706d53 74654763 636e6143     btleSmpScGetCanc
   1fdcc:	734d6c65 74695767 61655268 6d657474     elMsgWithReattem
   1fddc:	203a7470 00006425                       pt: %d..

0001fde4 <attCfg>:
   1fde4:	0000000f 041e01e0                       ........

0001fdec <smpCfg>:
   1fdec:	000001f4 01100703 00000000 0000fa00     ................
   1fdfc:	0000fa00 00000002                       ........

0001fe04 <calc128Zeros>:
	...
   1fe14:	61766e49 2064696c 656c6f72 6e6f6320     Invalid role con
   1fe24:	75676966 69746172 203a6e6f 656c6f72     figuration: role
   1fe34:	0064253d 6e6b6e75 206e776f 3d646963     =%d.unknown cid=
   1fe44:	30257830 00007834 64766372 74616420     0x%04x..rcvd dat
   1fe54:	6e6f2061 65727520 74736967 64657265     a on uregistered
   1fe64:	64696320 00000000 676e656c 6d206874      cid....length m
   1fe74:	616d7369 3a686374 63326c20 2075253d     ismatch: l2c=%u 
   1fe84:	3d696368 00007525 61766e69 2064696c     hci=%u..invalid 
   1fe94:	2067736d 65646f63 2064253a 3a6e656c     msg code:%d len:
   1fea4:	6c206425 654c6332 64253a6e 00000000     %d l2cLen:%d....
   1feb4:	6e6e6f63 64707520 20657461 20716572     conn update req 
   1fec4:	656d6974 0074756f 65657246 534f5452     timeout.FreeRTOS
   1fed4:	20785420 65776f70 6f432072 6f72746e      Tx power Contro
   1fee4:	7845206c 6c706d61 00000a65 72727543     l Example...Curr
   1fef4:	20746e65 50207854 7265776f 20736920     ent Tx Power is 
   1ff04:	2e30312d 42642030 00000a6d 72727543     -10.0 dBm...Curr
   1ff14:	20746e65 50207854 7265776f 20736920     ent Tx Power is 
   1ff24:	20302e30 0a6d4264 00000000 72727543     0.0 dBm.....Curr
   1ff34:	20746e65 50207854 7265776f 20736920     ent Tx Power is 
   1ff44:	302e332b 6d426420 0000000a 61766e49     +3.0 dBm....Inva
   1ff54:	2064696c 70207854 7265776f 76656c20     lid Tx power lev
   1ff64:	000a6c65 6e617254 74696d73 20726574     el..Transmitter 
   1ff74:	74736574 646e6520 000a6465 6e617254     test ended..Tran
   1ff84:	74696d73 20726574 74736574 61747320     smitter test sta
   1ff94:	64657472 0000000a 6f6d654d 70207972     rted....Memory p
   1ffa4:	206c6f6f 74207369 73206f6f 6c6c616d     ool is too small
   1ffb4:	20796220 0a0d6425 00000000 69646152      by %d......Radi
   1ffc4:	7361546f 73203a6b 70757465 00000a0d     oTask: setup....
   1ffd4:	72617453 676e6974 63697720 72746e65     Starting wicentr
   1ffe4:	74206369 65636172 000a0a3a 67617355     ic trace:...Usag
   1fff4:	73612065 6c656220 0a3a776f 00000000     e as below:.....
   20004:	726f6853 72702074 20737365 74747542     Short press Butt
   20014:	32206e6f 206f7420 65746e65 78652f72     on 2 to enter/ex
   20024:	44207469 74204d54 65742078 000a7473     it DTM tx test..
   20034:	726f6853 72702074 20737365 74747542     Short press Butt
   20044:	31206e6f 206f7420 6e616863 74206567     on 1 to change t
   20054:	6f702078 20726577 6576656c 7266206c     x power level fr
   20064:	68206d6f 20686769 6c206f74 0a2e776f     om high to low..
   20074:	00000000 6e6e7552 20676e69 75746573     ....Running setu
   20084:	61742070 2e736b73 0a0d2e2e 00000000     p tasks.........
   20094:	69646152 7361546f 0000006b 75746553     RadioTask...Setu
   200a4:	00000070                                p...

000200a8 <curve_b>:
   200a8:	27d2604b 3bce3c3e cc53b0f6 651d06b0     K`.'><.;..S....e
   200b8:	769886bc b3ebbd55 aa3a93e7 5ac635d8     ...vU.....:..5.Z

000200c8 <curve_n>:
   200c8:	fc632551 f3b9cac2 a7179e84 bce6faad     Q%c.............
   200d8:	ffffffff ffffffff 00000000 ffffffff     ................

000200e8 <curve_p>:
   200e8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   20100:	00000001 ffffffff 63747461 6b6e7520     ........attc unk
   20110:	6e776f6e 63706f20 2065646f 30257830     nown opcode 0x%0
   20120:	00007832 63747461 62636320 746f6e20     2x..attc ccb not
   20130:	206e6920 3a657375 00642520 2055544d      in use: %d.MTU 
   20140:	20716572 63736964 65647261 00000064     req discarded...

00020150 <attcFcnIf>:
   20150:	000162b5 00016309 00016705 00016425     .b...c...g..%d..

00020160 <attcSendReqTbl>:
   20160:	00000000 000163bd 0001665d 0001665d     .....c..]f..]f..
   20170:	0001665d 0001627d 0001665d 0001627d     ]f..}b..]f..}b..
   20180:	0001665d 0001627d 00016359 00016599     ]f..}b..Yc...e..
   20190:	0001627d                                }b..

00020194 <attcProcRspTbl>:
   20194:	00016a01 00016b45 00016a31 00016dc9     .j..Ek..1j...m..
   201a4:	00016a31 00016b39 00016e49 00016b39     1j..9k..In..9k..
   201b4:	00016a31 00016b3d 00000000 00016e69     1j..=k......in..
   201c4:	00016b3d 61746144 65736162 73616820     =k..Database has
   201d4:	61632068 6c75636c 6f697461 6f63206e     h calculation co
   201e4:	656c706d 00006574 636c6143 74616c75     mplete..Calculat
   201f4:	20676e69 61746164 65736162 73616820     ing database has
   20204:	00000068 6e6e6f43 25206449 68632064     h...ConnId %d ch
   20214:	65676e61 61776120 73206572 65746174     ange aware state
   20224:	20736920 00006425 6e6e6f43 25206449      is %d..ConnId %
   20234:	756f2064 666f2074 6e797320 50202c63     d out of sync, P
   20244:	77205544 20687469 6f63706f 30206564     DU with opcode 0
   20254:	32302578 67692078 65726f6e 00002164     x%02x ignored!..
   20264:	73747461 62636320 746f6e20 206e6920     atts ccb not in 
   20274:	3a657375 00642520                       use: %d.

0002027c <attsIndFcnIf>:
   2027c:	00018841 0001716d 00016fb9 000170dd     A...mq...o...p..

0002028c <attsFcnIf>:
   2028c:	000172dd 0001728d 000174e5 00017299     .r...r...t...r..

0002029c <attsMinPduLen>:
   2029c:	07050300 05050305 05030305 01000002     ................
   202ac:	0000000f                                ....

000202b0 <attFcnDefault>:
   202b0:	00018841 00018839 00018839 0001883d     A...9...9...=...

000202c0 <attGattDbhChUuid>:
   202c0:	00002b2a 64416d64 74634176 666e6f43     *+..dmAdvActConf
   202d0:	203a6769 74617473 25203a65 00000064     ig: state: %d...
   202e0:	64416d44 6e6f4376 20676966 69727564     DmAdvConfig duri
   202f0:	6420676e 63657269 20646574 65766461     ng directed adve
   20300:	73697472 21676e69 00000000 64416d64     rtising!....dmAd
   20310:	74634176 44746553 3a617461 61747320     vActSetData: sta
   20320:	203a6574 00006425 64416d64 74634176     te: %d..dmAdvAct
   20330:	72617453 73203a74 65746174 6425203a     Start: state: %d
   20340:	00000000 64416d64 74634176 72617453     ....dmAdvActStar
   20350:	75642074 676e6972 72696420 65746365     t during directe
   20360:	64612064 74726576 6e697369 00002167     d advertising!..
   20370:	64416d64 74634176 706f7453 7473203a     dmAdvActStop: st
   20380:	3a657461 00642520 64416d44 6f745376     ate: %d.DmAdvSto
   20390:	75642070 676e6972 72696420 65746365     p during directe
   203a0:	64612064 74726576 6e697369 00002167     d advertising!..
   203b0:	5f494348 415f454c 455f5644 4c42414e     HCI_LE_ADV_ENABL
   203c0:	4d435f45 4d435f44 435f4c50 4b434142     E_CMD_CMPL_CBACK
   203d0:	5456455f 7473203a 3a657461 00642520     _EVT: state: %d.
   203e0:	64416d64 74634176 656d6954 2174756f     dmAdvActTimeout!
   203f0:	00000000 64416d64 61745376 69447472     ....dmAdvStartDi
   20400:	74636572 203a6465 74617473 25203a65     rected: state: %
   20410:	00000064 64416d64 6f745376 72694470     d...dmAdvStopDir
   20420:	65746365 73203a64 65746174 6425203a     ected: state: %d
   20430:	00000000 64416d64 6e6f4376 7463656e     ....dmAdvConnect
   20440:	203a6465 74617473 25203a65 00000064     ed: state: %d...
   20450:	64416d64 6e6f4376 7463656e 6c696146     dmAdvConnectFail
   20460:	203a6465 74617473 25203a65 00000064     ed: state: %d...

00020470 <dmAdvAct>:
   20470:	00018b25 00018ba1 00018bd9 00018c21     %...........!...
   20480:	00018ac5 00018d61 00018d65 00018d69     ....a...e...i...

00020490 <dmAdvFcnIf>:
   20490:	00018add 00018c65 00018ac9 6f436d64     ....e.......dmCo
   204a0:	63436e6e 61654462 636f6c6c 00642520     nnCcbDealloc %d.
   204b0:	6f436d64 63436e6e 48794262 6c646e61     dmConnCcbByHandl
   204c0:	6f6e2065 6f662074 20646e75 30257830     e not found 0x%0
   204d0:	00007834 6f436d64 64496e6e 64427942     4x..dmConnIdByBd
   204e0:	72646441 746f6e20 756f6620 0000646e     Addr not found..
   204f0:	6f436d64 6d436e6e 74536c70 73657461     dmConnCmplStates
   20500:	00642520 6f436d64 63436e6e 6c6c4162      %d.dmConnCcbAll
   20510:	2520636f 00000064 6f436d64 63436e6e     oc %d...dmConnCc
   20520:	6c6c4162 6620636f 656c6961 00000064     bAlloc failed...
   20530:	6e6e6f63 253d6449 64692064 614d656c     connId=%d idleMa
   20540:	303d6b73 34302578 00000078              sk=0x%04x...

0002054c <dmConn2FcnIf>:
   2054c:	00019a79 00019149 000190a5              y...I.......

00020558 <dmConnActSetMain>:
   20558:	00018ea9 00018ec1 00018f39 00018ec9     ........9.......
   20568:	00019009 00018ead                       ........

00020570 <dmConnFcnIf>:
   20570:	000194a9 000192f5 00019071              ........q...

0002057c <dmConnSpecDefaults>:
   2057c:	00280018 07d00000 00000000              ..(.........

00020588 <dmConnActSetSlave>:
   20588:	00019879 00019889 00019785 000198a5     y...............
   20598:	000198c1 000197ed 6f436d64 6d536e6e     ........dmConnSm
   205a8:	63657845 20657475 6e657665 64253d74     Execute event=%d
   205b8:	61747320 253d6574 00000064               state=%d...

000205c4 <dmConnStateTbl>:
   205c4:	00001001 00002002 00000000 00000000     ..... ..........
   205d4:	00002303 00000000 00010000 00011104     .#..............
   205e4:	00010001 00010001 02030300 00010300     ................
   205f4:	00010001 21000002 00020002 00020002     .......!........
   20604:	24000002 24002303 00020002 00030002     ...$.#.$........
   20614:	00030104 22031203 25031303 00030003     ......."...%....
   20624:	05030400 05030003 00040004 00040004     ................
   20634:	00040004 04000004 04000104 00040004     ................
   20644:	00000004 65446d64 73615076 74764573     ....dmDevPassEvt
   20654:	65446f54 69725076 65203a76 746e6576     ToDevPriv: event
   20664:	6425203a 6170202c 3a6d6172 2c642520     : %d, param: %d,
   20674:	76646120 646e6148 203a656c 00006425      advHandle: %d..

00020684 <dmDevFcnIf>:
   20684:	00019a79 00019951 0001998d              y...Q.......

00020690 <dmFcnDefault>:
   20690:	00019a79 00019a7d 00019a7d              y...}...}...

0002069c <dmHciToIdTbl>:
   2069c:	03030307 04020303 04040404 05050505     ................
   206ac:	07070705 06060607 05060606 07040405     ................
   206bc:	04070407 04050504 09090904 00000202     ................
   206cc:	070b0b0b 00020002 0c0b010a 0d0d0d0c     ................
   206dc:	0d0d0d0d 0d100f0f                       ........

000206e4 <dmPrivAct>:
   206e4:	00019cfd 00019b95 00019bdd 00019c01     ................
   206f4:	00019c15 00019c19 00019c29 00019d69     ........)...i...
   20704:	00019b61                                a...

00020708 <dmPrivFcnIf>:
   20708:	00019b4d 00019c35 00019b39              M...5...9...

00020714 <dmSecFcnIf>:
   20714:	00019e51 00019e55 00019ded              Q...U.......

00020720 <dmSecLescFcnIf>:
   20720:	00019a79 00019a7d 00019fa1 20726d54     y...}.......Tmr 
   20730:	00637653 20707041 20746f67 20747665     Svc.App got evt 
   20740:	00006425                                %d..

00020744 <ccitt_table>:
   20744:	80050000 000a800f 001e801b 80110014     ................
   20754:	00368033 8039003c 802d0028 00228027     3.6.<.9.(.-.'.".
   20764:	00668063 8069006c 807d0078 00728077     c.f.l.i.x.}.w.r.
   20774:	80550050 005a805f 004e804b 80410044     P.U._.Z.K.N.D.A.
   20784:	00c680c3 80c900cc 80dd00d8 00d280d7     ................
   20794:	80f500f0 00fa80ff 00ee80eb 80e100e4     ................
   207a4:	80a500a0 00aa80af 00be80bb 80b100b4     ................
   207b4:	00968093 8099009c 808d0088 00828087     ................
   207c4:	01868183 8189018c 819d0198 01928197     ................
   207d4:	81b501b0 01ba81bf 01ae81ab 81a101a4     ................
   207e4:	81e501e0 01ea81ef 01fe81fb 81f101f4     ................
   207f4:	01d681d3 81d901dc 81cd01c8 01c281c7     ................
   20804:	81450140 014a814f 015e815b 81510154     @.E.O.J.[.^.T.Q.
   20814:	01768173 8179017c 816d0168 01628167     s.v.|.y.h.m.g.b.
   20824:	01268123 8129012c 813d0138 01328137     #.&.,.).8.=.7.2.
   20834:	81150110 011a811f 010e810b 81010104     ................
   20844:	03068303 8309030c 831d0318 03128317     ................
   20854:	83350330 033a833f 032e832b 83210324     0.5.?.:.+...$.!.
   20864:	83650360 036a836f 037e837b 83710374     `.e.o.j.{.~.t.q.
   20874:	03568353 8359035c 834d0348 03428347     S.V.\.Y.H.M.G.B.
   20884:	83c503c0 03ca83cf 03de83db 83d103d4     ................
   20894:	03f683f3 83f903fc 83ed03e8 03e283e7     ................
   208a4:	03a683a3 83a903ac 83bd03b8 03b283b7     ................
   208b4:	83950390 039a839f 038e838b 83810384     ................
   208c4:	82850280 028a828f 029e829b 82910294     ................
   208d4:	02b682b3 82b902bc 82ad02a8 02a282a7     ................
   208e4:	02e682e3 82e902ec 82fd02f8 02f282f7     ................
   208f4:	82d502d0 02da82df 02ce82cb 82c102c4     ................
   20904:	02468243 8249024c 825d0258 02528257     C.F.L.I.X.].W.R.
   20914:	82750270 027a827f 026e826b 82610264     p.u...z.k.n.d.a.
   20924:	82250220 022a822f 023e823b 82310234      .%./.*.;.>.4.1.
   20934:	02168213 8219021c 820d0208 02028207     ................

00020944 <am_ble_buffer_patch_data>:
   20944:	0d382200 0000ffff 00093532 00093965     ."8.....25..e9..
   20954:	0009452b 000948a9 000953f7 00095c1a     +E...H...S...\..
   20964:	0009641c 00096afd 0009751a 00097bde     .d...j...u...{..
   20974:	0009854b 00098bb3 0009951f 00099c4f     K...........O...
   20984:	0009a2f5 0009ad1e 00000000 00000000     ................
	...
   209c0:	47004800 20004841 bf00bf00 b005bf00     .H.GAH. ........
   209d0:	0000bdf0 20006790 00002710 20001000     .....g. .'..... 
   209e0:	00001388 20001018 000003ff b0ffb5ff     ....... ........
   209f0:	4607b082 4616460c 48302500 99846006     ...F.F.F.%0H.`..
   20a00:	28eed004 2003d002 bd707360 28f17c60     ...(... `sp.`|.(
   20a10:	28f2d006 28f3d004 2002d002 bd707360     ...(...(... `sp.
   20a20:	73602000 0000bd70 20001018 2000100a     . `sp...... ... 
   20a30:	47004800 20004d81 28008870 2014d116     .H.G.M. p..(... 
   20a40:	200b2101 fcc6f7ed 0000bd10 47004800     .!. .........H.G
   20a50:	20004e15 d0022800 28017808 7808d01a     .N. .(...x.(...x
   20a60:	d0172802 d00e2800 d00c2801 fed9f7f0     .(...(...(......
   20a70:	d0082800 f816f000 f7ef2032 f7f0f851     .(......2 ..Q...
   20a80:	e000e180 e000e100 68014802 43912228     .........H.h(".C
   20a90:	47706001 52c00000 47004800 20004881     .`pG...R.H.G.H. 
   20aa0:	47706001 52c00000 68014802 43912250     .`pG...R.H.hP".C
   20ab0:	47706001 52c00000 47004800 200048a1     .`pG...R.H.G.H. 
   20ac0:	508040c0 460bb510 24024611 4350220c     .@.P...F.F.$."PC
   20ad0:	18804a06 d0062800 2a006842 4618d003     .J...(..Bh.*...F
   20ae0:	fb10f000 46204604 0000bd10 00015698     .....F F.....V..
   20af0:	47084900 20004e99 fd5cf7f3 5b00207c     .I.G.N. ..\.| .[
   20b00:	1940f80b 2900b2c1 3440d003 f7f98fa0     ..@....)..@4....
   20b10:	bd70fd73 e7e12101 47084900 20005081     s.p..!...I.G.P. 
   20b20:	8810f380 f7f34628 2100f94d 8810f381     ....(F..M..!....
   20b30:	d00f2800 460a8881 2a463a0a 1c64d20c     .(.....F.:F*..d.
   20b40:	03d20bd2 84c2430a f3802000 47708810     .....C... ....pG
   20b50:	00000466 50804440 47084900 200050ed     f...@D.P.I.G.P. 
   20b60:	8f809011 9812900e 900d3008 30309812     .........0....00
   20b70:	9812900c 900b3044 900a2000 980c2501     ....D0... ...%..
   20b80:	f8a4f007 d02d2800 bf00bf00 bf00bf00     .....(-.........
   20b90:	bf00bf00 bf00bf00 bf00bf00 9a0ce091     ................
   20ba0:	232220ff 300a4611 fb9ef7fd 88617007     . "#.F.0.....pa.
   20bb0:	88a181c1 88e18201 892180c1 7aa18101     ..........!....z
   20bc0:	e02301c0 9802e077 01401a08 42900940     ..#.w.....@.@..B
   20bd0:	9802d91c 01401a40 42400940 9802e016     ....@.@.@.@B....
   20be0:	bf00bf00 bf00bf00 bf00bf00 bf00bf00     ................
   20bf0:	2000bf00 9802e00a 01401a38 42900940     ... ....8.@.@..B
   20c00:	607565c1 84b88960 20019a04 88607550     .eu``...... Pu`.
   20c10:	9a0485f8 75107860 47004800 200048e1     ....`x.u.H.G.H. 
   20c20:	0000bf00 8d3a8960 b2801e40 d1034282     ....`.:.@....B..
   20c30:	43012008 71819803 bdf0b007 20006160     . .C...q....`a. 
	...
   20c50:	00000021 00000000 00000001 00000000     !...............
   20c60:	ffffffff 000003ff 1f3c00ff 00000000     ..........<.....
   20c70:	00002001 00007d89 00002002 000076fd     . ...}... ...v..
   20c80:	8c001810 9b080bc0 42181e5b 9808d105     ........[..B....
   20c90:	47004800 200048c1 0000bf00 18d24b80     .H.G.H. .....K..
   20ca0:	20018450 8810f380 280068b8 2000d016     P.. .....h.(... 
   20cb0:	d0192800 28006b38 2000d012 d0132800     .(..8k.(... .(..
   20cc0:	1900fc9f 68594b06 088a1809 1b090094     .....KYh........
   20cd0:	01416059 18801a08 0000bd10 2000602c     Y`A.........,`. 
   20ce0:	200067b8 47084900 20005579 6a80217d     .g. .I.GyU. }!.j
   20cf0:	42880209 1a40d302 e0002201 2a001a08     ...B..@..".....*
   20d00:	1a081929 f7ee4621 b288feb1 3028bd70     )...!F......p.(0
   20d10:	7e003060 b4104770 32404602 24068cd3     `0.~pG...F@2...$
   20d20:	8d144363 b29b18e3 30608493 46187541     cC........`0Au.F
   20d30:	4770bc10 30603028 28007d40 20002000     ..pG(0`0@}.(. . 
   20d40:	07007940 2004d502 e0347060 f0056928     @y..... `p4.(i..
   20d50:	2800fb51 2002d002 e02c7060 f0039803     Q..(... `p,.....
   20d60:	2804fe4d 4668d107 20027901 d0054388     M..(..hF.y. .C..
   20d70:	28002000 2000d004 e01c7060 e7f82001     . .(... `p... ..
   20d80:	20006758 50800040 200067b8 04000000     Xg. @..P.g. ....
   20d90:	200067c8 47084900 200055cd 207d6a81     .g. .I.G.U. .j} 
   20da0:	42810200 1a08d302 e0002201 2a001a40     ...B....."..@..*
   20db0:	4360d004 fca4f7eb e0031a20 f7eb4360     ..`C.... ...`C..
   20dc0:	2400b5f8 7800481c d12d2800 68704e1b     ...$.H.x.(-..Nph
   20dd0:	28004d1b 4f1bda09 200b2101 210147b8     .M.(...O.!. .G.!
   20de0:	47a8200b 28006870 2100dbf6 47a8200b     . .Gph.(...!. .G
   20df0:	200a4e15 270547b0 69f8073f 0d2d0505     .N. .G.'?..i..-.
   20e00:	d1042d00 68c04811 0e800580 2c64d00c     .-...H.h......d,
   20e10:	2014d20a 69f847b0 0d000500 d90442a8     ... .G.i.....B..
   20e20:	1c644605 d3f42c64 4903bdf8 70082001     .Fd.d,.....I. .p
   20e30:	70084907 0000bdf8 20001001 45800080     .I.p....... ...E
   20e40:	00002455 00002391 00003ba1 52c00000     U$...#...;.....R
   20e50:	20001000 4818b510 29406801 2140d201     ... ...H.h@)..@!
   20e60:	7a806001 d00107c0 bd102000 47804813     .`.z..... ...H.G
   20e70:	07002005 491269c0 d0040500 28017808     . ...i.I.....x.(
   20e80:	2802d014 7808d012 d0082800 d0062801     ...(...x.(...(..
   20e90:	d0042802 4780480b 2032490b 490b4788     .(...H.G.I2 .G.I
   20ea0:	47882004 4780480a bd102000 20044909     . .G.H.G. ...I. 
   20eb0:	20014788 0000bd10 200067b8 00009305     .G. .....g. ....
   20ec0:	20001018 00014b25 00003ba1 00014441     ... %K...;..AD..
   20ed0:	00014aaf 00014489 b08db5f0 496c4604     .J...D.......FlI
   20ee0:	4788a804 5b00207c 25009003 90022000     ...G| .[...%. ..
   20ef0:	f3802001 6c608810 f3812100 46268810     . ....`l.!....&F
   20f00:	28003660 4621d06b 910c3144 910b3928     `6.(k.!FD1..(9..
   20f10:	910a3164 00ca8881 1851495e 0bc98cc9     d1......^IQ.....
   20f20:	d05c2900 f3812101 68008810 495a9001     .)\..!.....h..ZI
   20f30:	4788980c 69e04607 d0032800 28002000     ...G.F.i.(... .(
   20f40:	e008d002 e7fa2001 980b4953 28004788     ..... ..SI...G.(
   20f50:	4952d001 20004788 8810f380 494d88b8     ..RI.G. ......MI
   20f60:	184000c0 0bd28cc2 84c203d2 280788b8     ..@............(
   20f70:	7e30d21e 76301e40 f3802001 6b208810     ..0~@.0v. .... k
   20f80:	d0132800 28002000 980ad005 798021fb     .(... .(.....!.y
   20f90:	990a4008 49417188 47884638 f3802000     .@...qAI8F.G. ..
   20fa0:	4a3f8810 98037b39 e0154790 e7ea2001     ..?J9{...G... ..
   20fb0:	d90f2809 184000c0 0a008d00 49399000     .(....@.......9I
   20fc0:	47884638 d0072800 28009800 1c6dd004     8F.G.(.....(..m.
   20fd0:	e001b2ed b2ed1c6d 28009801 9803d19a     ....m......(....
   20fe0:	d00e2807 d00c2d00 f3802001 7e308810     .(...-... ....0~
   20ff0:	76301b40 f3802000 4a2b8810 98034629     @.0v. ....+J)F..
   21000:	20014790 8810f380 4f234828 47b89009     .G. ....(H#O...G
   21010:	20004604 8810f380 d0360020 88e04e1f     .F. .... .6..N..
   21020:	42889903 2807d112 7aa1d007 4f209100     ...B...(...z.. O
   21030:	7b227ae3 47b88921 4b1ee005 89207921     .z"{!..G...K!y .
   21040:	4798462a 46209002 e00347b0 46214a1a     *F.G.. F.G...J!F
   21050:	4790a804 f3802001 490f8810 47889809     ...G. .....I...G
   21060:	00204604 9804d10c d0032800 28002000     .F ......(... .(
   21070:	e005d002 e7fa2001 a9044a10 47909809     ..... ...J.....G
   21080:	f3802000 2c008810 9802d1c9 bdf0b00d     . .....,........
   21090:	000038b5 50804440 00003945 000093a5     .8..@D.PE9......
   210a0:	0000b809 0000565d 0000b705 200061b8     ....]V.......a. 
   210b0:	0000b729 00012235 00003967 0000390f     )...5"..g9...9..
   210c0:	2400b5f1 4e164d15 f3802001 98008810     ...$.M.N. ......
   210d0:	210047a8 8810f381 d0172800 460a8881     .G.!.....(.....F
   210e0:	2a463a0a 00c9d214 8d091989 21010a0f     .:F*...........!
   210f0:	8810f381 4788490b d0032800 d0012f00     .....I.G.(.../..
   21100:	b2e41c64 f3802000 e7dd8810 bdf84620     d.... ...... F..
   21110:	29491fc9 4904d3d8 e7d54788 00003945     ..I)...I.G..E9..
   21120:	50804440 0000565d 000093a5 b092b5f1     @D.P]V..........
   21130:	30409812 8f809011 9812900e 900d3008     ..@0.........0..
   21140:	30309812 9812900c 900b3044 900a2000     ..00....D0... ..
   21150:	980c2501 2c006804 2000d003 d0022800     .%...h.,... .(..
   21160:	2001e093 980ee7fa 48f900c1 90101808     ... .......H....
   21170:	0bc08cc0 d06e2800 49f6980e 900f0080     .....(n....I....
   21180:	30a05808 20017946 d5190771 d0172c00     .X.0Fy. q....,..
   21190:	06b04ff1 7b20d507 078047b8 2000d401     .O.... {.G..... 
   211a0:	2001e006 7b20e004 07c047b8 2001d003     ... .. {.G..... 
   211b0:	d0022800 2000e004 6824e7fa d1e82c00     .(..... ..$h.,..
   211c0:	d0622800 22004be5 980c4621 68a64798     .(b..K."!F...G.h
   211d0:	a9094ae3 47904630 d1562800 4fdc88a0     .J..0F.G.(V....O
   211e0:	19c000c0 49df8d40 20001841 7912aa08     ....@..IA.. ...y
   211f0:	dd062a00 540a5c32 aa081c40 42907912     .*..2\.T@....y.B
   21200:	49d9dbf8 478868a0 980f49d2 30a05808     ...I.h.G.I...X.0
   21210:	07c07940 a908d003 1d007908 a8089009     @y.......y......
   21220:	98107901 02098d02 430ab2d2 21038502     .y.........C...!
   21230:	8d029810 430a438a 98118502 21008f80     .....C.C.......!
   21240:	19c000c0 980b84c1 28006800 2000d004     .........h.(... 
   21250:	d0032800 e018e010 e7f92001 88a1980b     .(....... ......
   21260:	00ca6840 888049c1 00c01851 8cc219c0     @h...I..Q.......
   21270:	03d20bd2 84c2430a 46214abd 4790980b     .....C...J!F...G
   21280:	30609812 1c497e01 98117601 28078f80     ..`0.~I..v.....(
   21290:	990ed208 49af008a 31a05889 07497949     .......I.X.1IyI.
   212a0:	2500d500 6809990d d01f2900 462a2100     ...%...h.)...!*F
   212b0:	d077438a d2762807 48ae49af 90094788     .Cw..(v..I.H.G..
   212c0:	90082000 8f809811 48a20081 30a05840     . .........H@X.0
   212d0:	07c07940 90070fc0 6806980d d0092e00     @y.........h....
   212e0:	6830990d 28006008 e003d002 e7de2101     ..0h.`.(.....!..
   212f0:	6048990d d07d2e00 90062000 90039812     ..H`..}.. ......
   21300:	9004a806 9b099f07 25089705 20005f75     ...........%u_. 
   21310:	90019002 90002001 8e429811 b2d44684     ..... ....B..F..
   21320:	46292001 b2893109 2f009f05 1d09d001     . )F.1...../....
   21330:	00c9b289 b2893108 8e3f4667 d205428f     .....1..gF?..B..
   21340:	05793f50 42a20e0c b2d4d200 dd0142a5     P?y....B.....B..
   21350:	00640864 1a6f4621 42971c62 1909db05     d.d.!Fo.b..B....
   21360:	b2c01c40 42971a6f 4298daf9 2500d901     @...o..B...B...%
   21370:	9904e034 4f817008 487e4981 46014788     4....p.O.I~H.G.F
   21380:	28009800 2000d012 7ab09000 0f800780     ...(... ...z....
   21390:	d0092801 72882002 88c268f0 88809202     .(... .r.h......
   213a0:	e0099001 e058e062 e7f42001 72882001     ....b.X.. ... .r
   213b0:	19009802 9002b280 dd0142a5 e00072cc     .........B...r..
   213c0:	980172cd 980280c8 1b288108 2d00b205     .r........(....-
   213d0:	2201dc22 98039b05 250147b8 d0202d00     "..".....G.%.- .
   213e0:	7e004668 18099908 9108b2c9 1a089909     hF.~............
   213f0:	e000b280 9009e035 69c09812 d01a2800     ....5......i.(..
   21400:	6a009812 98126006 20006206 98086030     ...j.`...b. 0`..
   21410:	d913280a e0242500 9b052200 47b89803     .(...%$..".....G
   21420:	980de7aa 28006800 990dd101 6030604e     .....h.(....N`0`
   21430:	6006980d 9812e015 e7e461c6 6806980d     ...`.....a.....h
   21440:	d0062e00 6830990d 28006008 990dd101     ......0h.`.(....
   21450:	2e006048 e74fd000 4a4ae003 980b990d     H`....O...JJ....
   21460:	2d004790 4948d002 4788980d 6800980b     .G.-..HI...G...h
   21470:	d0032800 28002000 e04bd002 e7fa2001     .(... .(..K.. ..
   21480:	8f809811 d2452807 30809812 280478c0     .....(E....0.x.(
   21490:	493bd140 47884837 d03b2800 21008882     @.;I7H.G.(;....!
   214a0:	00d24b2b 855118d2 00c98881 8d8a18c9     +K....Q.........
   214b0:	0c640454 858c2200 00c98881 8d0c18c9     T.d.."..........
   214c0:	850cb2e4 24018881 18c900c9 08ad8d0d     .......$........
   214d0:	432500ad 8881850d 18c900c9 0be48ccc     ..%C............
   214e0:	84cc03e4 8884990b 00e56849 88894c1f     ........Ih...L..
   214f0:	00c9192c 8ccb18c9 03db0bdb 84cb4323     ,...........#C..
   21500:	6809990b d00d2900 6849990b 990b6008     ...h.)....Ih.`..
   21510:	60026048 6800980b d0062800 29002100     H`.`...h.(...!.)
   21520:	e03cd005 6008990b 2101e7f1 2800e7f7     ..<....`...!...(
   21530:	4a07d00a 00c98881 8cc91889 29000bc9     ...J...........)
   21540:	6800d024 d1f52800 d0262800 0000e027     $..h.(...(&.'...
   21550:	50804440 20006160 0000af81 00003817     @D.P`a. .....8..
   21560:	00010341 50804000 000093a5 00000466     A....@.P....f...
   21570:	00003967 200061e4 000039bb 00010011     g9...a. .9......
   21580:	00003945 0000390f 000038b5 00ca8881     E9...9...8......
   21590:	18514907 910ab289 2000e7d6 990a900a     .IQ........ ....
   215a0:	225a980e 4a034350 84811880 bdf0b013     ..Z"PC.J........
   215b0:	00000466 50804080 2300b410 46022114     f....@.P...#.!.F
   215c0:	4911434a 6809247d 42a10224 1b09d902     JC.I}$.h$..B....
   215d0:	e0002301 43481a61 18410081 0c0c0a88     .#..a.HC..A.....
   215e0:	0c4c1900 0d4c1900 0e4c1900 0fc91900     ..L...L...L.....
   215f0:	08c01840 d0012b00 e0011810 1e401a10     @....+........@.
   21600:	bc101e40 00004770 20006054 2300b4f0     @...pG..T`. ...#
   21610:	6be54c18 227d4918 02126809 d3024291     .L.k.I}".h...B..
   21620:	23011a8a 1a52e000 43564606 435113f2     ...#..R..FVC..QC
   21630:	261e1a71 104f434e 118f19f6 124919f6     q..&NCO.......I.
   21640:	13ce1871 d0012b00 e0001a80 19421810     q....+........B.
   21650:	008d0891 2b001b52 0143d004 18401a18     ....R..+..C...@.
   21660:	e0031b80 1a180143 19801840 bcf063e2     ....C...@....c..
   21670:	00004770 20006780 20006054              pG...g. T`. 

0002167c <am_ble_performance_copy_patch_data>:
   2167c:	006e1100 00000400 00000000 01c50101     ..n.............
   2168c:	00000039 00000000 00000000 00000000     9...............
   2169c:	00000000 ffffffff 2000b570 8849490c     ........p.. .II.
   216ac:	188b4a0c 490c881a 24001c9b 022d2513     .J.....I...$.%-.
   216bc:	1c40540c dbfb42a8 2a002000 5c1cdd04     .T@..B... .*...\
   216cc:	1c40540c dbfa4290 47804804 bd702000     .T@..B...H.G. p.
   216dc:	20004800 20004802 20003500 000133af     .H. .H. .5. .3..
   216ec:	b51f08a0 98002400 d243281d 44790001     .....$...(C...yD
   216fc:	18497909 130e448f 40251a40 40404040     .yI..D..@.%@@@@@
   2170c:	40404040 402a4040 2d404040 35403240     @@@@@@*@@@@-@2@5
   2171c:	00404038 b2c09801 fa07f000 9802e02c     8@@.........,...
   2172c:	9801b2c1 f000b2c0 e025f8b8 b2839806     ..........%.....
   2173c:	b2829803 b2c19802 b2c09801 f971f000     ..............q.
   2174c:	9801e01a f000b2c0 e015f90a f829f000     ..............).
   2175c:	9801e012 f000b280 e00df962 fb3bf000     ........b.....;.
   2176c:	f000e00a e007fb94 b2c09801 fac7f000     ................
   2177c:	e0014604 43e42400 b0044620 b403bd10     .F...$.C F......
   2178c:	90014801 2739bd01 b4030000 90014801     .H....9'.....H..
   2179c:	2895bd01 b4030000 90014801 0101bd01     ...(.....H......
   217ac:	b4f00000 22432000 68510612 340124ff     ..... C"..Qh.$.4
   217bc:	60514321 03236851 60514319 05db23a3     !CQ`Qh#..CQ`.#..
   217cc:	08496819 60190049 6909492a 4d29b2ce     .hI.I..`*I.i..)M
   217dc:	88294f2a d30142b9 e00d2004 42b94f28     *O)..B... ..(O.B
   217ec:	2003d301 4f26e008 d30142b9 e0032002     ... ..&O.B... ..
   217fc:	42b94f25 2001d300 18394f24 7e093120     %O.B... $O9. 1.~
   2180c:	da0942b1 dd012800 b2401e40 7a091839     .B...(..@.@.9..z
   2181c:	19c00040 e00b8b00 da042804 42b15c39     @........(..9\.B
   2182c:	1c40db01 1839b240 00407a09 8b0019c0     ..@.@.9..z@.....
   2183c:	62314e17 08496819 60190049 6b314e15     .N1b.hI.I..`.N1k
   2184c:	4327460f 62986337 633143a1 68518028     .F'C7c.b.C1c(.Qh
   2185c:	438103b0 78004810 0fc007c0 43190503     ...C.H.x.......C
   2186c:	68516051 43a10200 60514301 4770bcf0     Q`Qh...C.CQ`..pG
   2187c:	00800000 604e4580 3ff62000 38f60000     .....EN`. .?...8
   2188c:	2df60000 09f60000 67fc0000 04802000     ...-.......g. ..
   2189c:	004050c0 603a4580 b5f02000 2243b082     .P@..E:`. ....C"
   218ac:	68530612 04642401 60534323 0fd207ca     ..Sh.$d.#CS`....
   218bc:	078a4696 074a0fd3 070a0fd4 92010fd2     .F....J.........
   218cc:	0fd206ca 068a9200 46940fd2 0fd5064a     ...........FJ...
   218dc:	4a1f09ce 27036811 43b9057f 4f1d6912     ...J.h.'...C.i.O
   218ec:	2800403a 2801d006 2701d009 280205bf     :@.(...(...'...(
   218fc:	4339d003 d0062800 4339e01b 2701e7fa     ..9C.(....9C...'
   2190c:	4339057f 0330e7f6 016a4310 46624310     ..9C..0..Cj..CbF
   2191c:	431002d2 01d29a00 9a014310 43100192     ...C.....C.....C
   2192c:	431002a2 4310025a 02124672 4a084310     ...CZ..CrF...C.J
   2193c:	48076110 20436001 68410600 04522201     .a.H.`C ..Ah."R.
   2194c:	4a054391 07d27812 43110b92 b0026041     .C.J.x.....CA`..
   2195c:	0000bdf0 e00343c0 603affff b5f82000     .....C....:`. ..
   2196c:	20432400 68410600 03bf2701 60414339     .$C ..Ah.'..9CA`
   2197c:	00ba6841 60414311 68054821 430d1c51     Ah...CA`!H.hQ..C
   2198c:	4e1f6005 47b020c8 6888491f 60884338     .`.N. .G.I.h8C.`
   2199c:	68f0460e 0fc70400 2001491a 46204788     .F.h.....I. .G F
   219ac:	1c64491a d8014288 d0f22f00 40054818     .Id..B.../...H.@
   219bc:	60054813 03402001 68f160b0 40014815     .H.`. @..`.h.H.@
   219cc:	4a146870 43084010 68306070 0289213f     ph.J.@.Cp`0h?!..
   219dc:	60304388 06092143 2001684a 43820380     .C0`C!..Jh. ...C
   219ec:	7800480e 0fc007c0 431a0383 684a604a     .H.x.......CJ`Jh
   219fc:	041b2301 0400439a 604a4302 0000bdf8     .#...C...CJ`....
   21a0c:	3ba15240 00000000 271051c0 fffe0000     @R.;.....Q.'....
   21a1c:	3f3ffffe c0c00000 603affff 47702000     ..??......:`. pG
   21a2c:	b5f00000 2508b083 2000493c 20437008     .......%<I. .pC 
   21a3c:	68410600 431102aa 27296041 067f4938     ..Ah...CA`)'8I..
   21a4c:	684160f9 43914b37 07db781b 43190c9b     .`Ah7K.C.x.....C
   21a5c:	24256041 684101a4 60414311 10526841     A`%$..Ah.CA`AhR.
   21a6c:	60414311 210368f8 43880649 43060356     .CA`.h.!I..CV..C
   21a7c:	43060390 200168b8 fe81f7ff 20104621     ...C.h. ....!F. 
   21a8c:	fe83f7ff 43060328 2d002400 60fed90c     ....(..C.$.-...`
   21a9c:	20644925 68f84788 0a004669 55081c80     %Id .G.hiF.....U
   21aac:	b2e41c64 d3f242ac 79d0466a 18407991     d....B..jF.y.y@.
   21abc:	79127951 18401889 78d1466a 78901841     Qy.y..@.jF.xA..x
   21acc:	78501809 78101809 46291808 fe63f7ff     ..Px...x..)F..c.
   21adc:	b2c04912 68397008 02922201 60394311     .I...p9h."...C9`
   21aec:	1c400040 20006178 fe49f7ff 06092143     @.@.xa. ..I.C!..
   21afc:	2001684a 43820300 7800480a 0fc007c0     Jh. ...C.H.x....
   21b0c:	431a0303 684a604a 035b2301 0340439a     ...CJ`Jh.#[..C@.
   21b1c:	604a4302 bdf0b003 60700000 34cc2000     .CJ`......p`. .4
   21b2c:	603a0263 3ba12000 b4700000 06092143     c.:`. .;..p.C!..
   21b3c:	24016848 432004a4 20c46048 05d22287     Hh.$.. CH`. ."..
   21b4c:	485c6010 68486150 43a04a5c 07d27812     .`\HPaHh\J.C.x..
   21b5c:	04930fd2 60484318 4b58208b 634305c0     .....CH`. XK..Cc
   21b6c:	25014b58 250660dd 250560cd 688563c5     XK.%.`.%.`.%.c.h
   21b7c:	3df0086d 68c56085 355d086d 690560c5     m..=.`.hm.]5.`.i
   21b8c:	6105086d 086d6945 69856145 6185086d     m..aEim.Ea.im..a
   21b9c:	086d69c5 6a0561c5 6205086d 086d6a45     .im..a.jm..bEjm.
   21bac:	6a856245 6285086d 086d6ac5 250162c5     Eb.jm..b.jm..b.%
   21bbc:	625d611d 4b43639d 4d43601d 6a1d615d     .a]b.cCK.`CM]a.j
   21bcc:	621d086d 25016ac3 62c3432b 10a36848     m..b.j.%+C.bHh..
   21bdc:	60484318 109b6848 60484318 4b3b483d     .CH`Hh...CH`=H;K
   21bec:	68836143 05ad253f 6083432b 60c32300     Ca.h?%..+C.`.#.`
   21bfc:	61834b39 682b4d39 43b3261e 6a83602b     9K.a9M+h.&.C+`.j
   21c0c:	43ab03f5 6283191b 10a36848 04134398     ...C...bHh...C..
   21c1c:	60484318 11236848 03934398 60484318     .CH`Hh#..C...CH`
   21c2c:	11636848 60484318 06402029 09246a04     Hhc..CH`) @..j$.
   21c3c:	34080124 68486204 03534398 60484318     $..4.bHh.CS..CH`
   21c4c:	23016848 4318051b 24286048 05c020a3     Hh.#...CH`($. ..
   21c5c:	4d226004 6285882d 05126848 43104398     .`"M-..bHh...C.C
   21c6c:	481f6048 700121e6 4a1d7204 8310481e     H`.H.!.p.r.J.H..
   21c7c:	23e0481e 4c1a7603 706222d4 7262223c     .H.#.v.L."bp<"br
   21c8c:	83624a1b 22c87641 4d1570a2 72ac2446     .Jb.Av.".p.MF$.r
   21c9c:	83ac4c18 46297681 215070ca 72d1462a     .L...v)F.pP!*F.r
   21cac:	83d14915 215a76c3 49137311 77038411     .I...vZ!.s.I...w
   21cbc:	4770bc70 7fff0000 603a0000 02492000     p.pG......:`. I.
   21ccc:	00400000 00804580 021e4580 00030000     ..@..E...E......
   21cdc:	0000003c 00085240 0000000f 604e51c0     <...@R.......QN`
   21cec:	67fc2000 07f62000 681c0000 09f62000     . .g. .....h. ..
   21cfc:	2df60000 38f60000 3ff60000 b5f80000     ...-...8...?....
   21d0c:	6800482d d1542800 06122243 21016850     -H.h.(T.C"..Ph.!
   21d1c:	430803c9 4f286050 2501683c 06002003     ...CP`(O<h.%. ..
   21d2c:	60384320 49252600 4788201e 20014924      C8`.&%I. .G$I. 
   21d3c:	68784788 0fc007c0 4a214631 42911c76     .Gxh....1F!Jv..B
   21d4c:	2800d801 481cd0f2 481e6881 20006001     ...(...H.h.H.`. 
   21d5c:	2d002600 4b1cd011 25004632 41aa1acb     .&.-...K2F.%...A
   21d6c:	1c40da14 4f184605 4633434d 1b7d2200     ..@..F.OMC3F."}.
   21d7c:	1b4d419a dbf44193 4b14e008 d2054299     .AM..A.....K.B..
   21d8c:	46021c40 1a9a434a d8f9428a 06092101     @..FJC...B...!..
   21d9c:	0049438c 4908430c 2243600c 68510612     .CI..C.I.`C"..Qh
   21dac:	03db2301 4b0a4399 07db781b 43190c1b     .#...C.K.x.....C
   21dbc:	bdf86051 605c0000 00002000 3ba14440     Q`....\`. ..@D.;
   21dcc:	27100000 60600000 20002000 d000bebc     ...'..``. . ....
   21ddc:	603a1312 b5702000 47804823 06242443     ..:`. p.#H.GC$$.
   21dec:	68602101 43080489 481f6060 481f4780     .!`h...C``.H.G.H
   21dfc:	28aa7800 68a0d106 d1030780 4788491d     .x.(...h.....I.G
   21e0c:	6008491d 05c020a1 21026b02 430a438a     .I.`. ...k.!.C.C
   21e1c:	21016302 438a6b02 6302430a 26046b01     .c.!.k.C.C.c.k.&
   21e2c:	433143b1 4c146301 4d146860 d5040080     .C1C.c.L`h.M....
   21e3c:	47a82001 00806860 4c11d4fa 6060200f     . .G`h.....L. ``
   21e4c:	47a82001 60602007 47a82004 60602006     . .G. ``. .G. ``
   21e5c:	480c218b 600805c9 6901480c 61014331     .!.H...`.H.i1C.a
   21e6c:	bd70bf30 37350000 9c390000 602c0000     0.p...57..9...,`
   21e7c:	39d12000 60540000 00802000 3ba14580     . .9..T`. ...E.;
   21e8c:	00400000 03264580 ed000000 b570e000     ..@..E&.......p.
   21e9c:	200f4d2f 248b6068 682005e4 02492101     /M. h`.$.. h.!I.
   21eac:	60204388 4780482b f3802001 48298810     .C `+H.G. ....)H
   21ebc:	49296840 d4060080 22086820 60204310     @h)I.... h.".C `
   21ecc:	47882001 2001e001 48244788 48244780     . .G... .G$H.G$H
   21edc:	78004925 200d4788 48236068 20434780     %I.x.G. h`#H.GC 
   21eec:	68410600 035b2301 60414319 4a1f2129     ..Ah.#[..CA`)!.J
   21efc:	60ca0649 09126a0a 32080112 680a620a     I..`.j.....2.b.h
   21f0c:	432210dc 4a1a600a 00527812 614a1c52     .."C.`.J.xR.R.Ja
   21f1c:	49186842 7809439a 0fc907c9 431a034b     Bh.I.C.x....K..C
   21f2c:	68436042 431302a2 24286043 05db23a3     B`Ch...CC`($.#..
   21f3c:	4c11601c 629c8824 05096843 430b4393     .`.L$..bCh...C.C
   21f4c:	20006043 8810f380 4780480d 0040bd70     C`. .....H.Gp.@.
   21f5c:	3b854580 00800001 44894580 346d0001     .E.;.....E.D..m4
   21f6c:	60400001 3ba12000 4d990000 34cc0001     ..@`. .;...M...4
   21f7c:	60700463 603a2000 604e2000 34ad2000     c.p`. :`. N`. .4
   21f8c:	00000001                                ....

00021f90 <am_hal_ble_num_default_patches>:
   21f90:	00000003                                ....

00021f94 <am_ble_buffer_patch_data_b0>:
   21f94:	04182200 000003ff 00077584 00077d73     .".......u..s}..
   21fa4:	00078575 00078b17 000795a9 00079b18     u...............
   21fb4:	0007a32d 0007acc5 0007b2f4 0007b9ff     -...............
	...
   21ff4:	f7ec2021 2800fcf9 2000d00a 46039000     ! .....(... ...F
   22004:	46014602 20216824 47a03435 bd38bf00     .F.F$h! 54.G..8.
   22014:	fefbf7ef 2800490f 7808d002 d0122801     .....I.(...x.(..
   22024:	28027808 2800d00f 2801d006 f000d004     .x.(...(...(....
   22034:	20006e0c 04000000 20006e1c 47084900     .n. .....n. .I.G
   22044:	20003e01 7cca4e23 6ac96875 d01d2a00     .>. #N.|uh.j.*..
   22054:	0212227d d3024291 20011a8a 1a52e000     }"...B..... ..R.
   22064:	d0052800 43504620 fa02f7ea e0041a20     .(.. FPC.... ...
   22074:	f9def7ea 02011900 186900c2 18891812     ..........i.....
   22084:	02530a4a 60711ac9 4348211e bd701880     J.S...q`.!HC..p.
   22094:	2000682c 20006e0c 47084900 20003e31     ,h. .n. .I.G1>. 
   220a4:	6ac07cc1 d0152900 0209217d d3024288     .|.j.)..}!...B..
   220b4:	2004d502 e0347060 f0066928 2800f8b5     ... `p4.(i.....(
   220c4:	2002d002 e02c7060 f0049803 2804fa1f     ... `p,........(
   220d4:	4668d107 20027901 d0054388 28002000     ..hF.y. .C... .(
   220e4:	bf00d004 e01c2000 e7f82001 900088f0     ..... ... ......
   220f4:	00000021 00000000 00000001 00000000     !...............
   22104:	ffffffff 000003ff 1f3c00ff 00000000     ..........<.....
   22114:	00002001 0000848d 00002002 00007dcd     . ....... ...}..
   22124:	00002003 00007ed1 00002005 000084fd     . ...~... ......
   22134:	30286928 8d013040 1a409800 b280492a     (i(0@0....@.*I..
   22144:	bf00bf00 22054628 30631c71 fdacf7f3     ....(F."q.c0....
   22154:	99006928 fbdff001 70602001 2003e001     (i....... `p... 
   22164:	2f007060 7860d139 d2362806 44790001     `p./9.`x.(6...yD
   22174:	bf00bf00 22568931 46315351 fe3ef001     ....1.V"QS1F..>.
   22184:	70602001 2003e001 2f007060 7860d167     . `p... `p./g.`x
   22194:	d2642806 44790001 18497909 185f448f     .(d...yD.yI..D_.
   221a4:	1207020c 98052128 fc54f7ff 213de057     ....(!....T.W.=!
   221b4:	20006878 20006dac 50800040 00002017     xh. .m. @..P. ..
   221c4:	00000801 5080407e 200068d8 47084900     ....~@.P.h. .I.G
   221d4:	20003e91 78c34311 021b7882 0412431a     .>. .C.x.x...C..
   221e4:	4c1a430a 79426062 02127901 79c34311     .C.Lb`By.y...C.y
   221f4:	d01b2e13 550e21a1 46692202 724e720a     .....!.U."iF.rNr
   22204:	4308210f 46019001 f7fe4638 4669f909     .!.C...F8F....iF
   22214:	b2e87a0a f7ffa902 3440ff55 8aa220ff     .z......U.@4. ..
   22224:	30034639 bf00bf00 bdf0b003 21a12216     9F.0.........".!
   22234:	00808820 30405838 07c07f00 2500d005      ...8X@0.......%
   22244:	8820e02f fd22f008 4668e02b 20017a01     /. ...".+.hF.z. 
   22254:	d0034388 28002000 e001d108 e7fa2001     .C... .(..... ..
   22264:	43882004 2000d004 d0032800 e018253a     . .C... .(..:%..
   22274:	6b114a08 4b086b52 d9014298 47702000     .J.kRk.K.B... pG
   22284:	43424341 0c900989 49041808 d9f64288     ACBC.......I.B..
   22294:	47702000 20007ec0 001e8480 03938700     . pG.~. ........
   222a4:	4913b410 4a136b89 d9024290 2000bc10     ...I.k.J.B..... 
   222b4:	4a114770 6813247d 02242214 42a34342     pG.J}$.h."$.BC.B
   222c4:	4341d903 18100c08 4341e002 1a100c08     ..AC......AC....
   222d4:	4288490a 2000d902 4770bc10 d0002800     .I.B... ..pG.(..
   222e4:	42a31e40 2800d2f8 bc10d0f6 47701e40     @..B...(....@.pG
   222f4:	20007ec0 000186a0 20006858 00030d40     .~. ....Xh. @...
   22304:	f3efb4f0 b2cc8110 f3812101 78428810     .........!....Bx
   22314:	02127801 78c34311 021b7882 0412431a     .x...C.x.x...C..
   22324:	4d1d430a 7942606a 02127901 79c34311     .C.Mj`By.y...C.y
   22334:	021b7982 0412431a 60aa430a 7a017a42     .y...C...C.`Bz.z
   22344:	43110212 7a827ac3 431a021b 430a0412     ...C.z.z...C...C
   22354:	7b4260ea 02127b01 7bc34311 021b7b82     .`B{.{...C.{.{..
   22364:	0412431a 612a430a 23103010 21004a0b     .C...C*a.0.#.J.!
   22374:	54565c46 b2891c49 d3f94299 6168206e     F\VTI....B..n ha
   22384:	60282001 21014806 f3847401 bcf08810     . (`.H.!.t......
   22394:	20104904 00004708 508000c0 5080406e     .I. .G.....Pn@.P
   223a4:	200068d8 000159a1                       .h. .Y..

000223ac <am_hal_ble_num_default_patches_b0>:
   223ac:	00000003                                ....

000223b0 <am_hal_cachectrl_defaults>:
   223b0:	00000308                                ....

000223b4 <g_AM_HAL_GPIO_DISABLE>:
   223b4:	00000003                                ....

000223b8 <g_AM_HAL_GPIO_INPUT>:
   223b8:	00001003                                ....

000223bc <g_AM_HAL_GPIO_OUTPUT>:
   223bc:	00000403                                ....

000223c0 <g_ui8Bit76Capabilities>:
   223c0:	02800101 80010180 80800101 80808080     ................
   223d0:	80808080 80808008 01800180 80808080     ................
   223e0:	80808080 01800402 01010401 80808080     ................
   223f0:	00000101                                ....

000223f4 <g_ui8Inpen>:
   223f4:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
   22404:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
   22414:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
   22424:	00003130                                01..

00022428 <g_ui8NCEtable>:
   22428:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   22438:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   22448:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   22458:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   22468:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   22478:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   22488:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   22498:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   224a8:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   224b8:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   224c8:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   224d8:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   224e8:	32221202 43231303                       .."2..#C

000224f0 <g_ui8nCEpins>:
   224f0:	02070707 00080802 01020202 01010101     ................
   22500:	01010101 01010101 01010101 01010101     ................
   22510:	01010101 08010101 01010008 01010101     ................
   22520:	00000101                                ....

00022524 <g_am_hal_mcuctrl_flash_size>:
   22524:	00004000 00008000 00010000 00020000     .@..............
   22534:	00040000 00080000 00100000 00200000     .............. .
   22544:	00180000 00000000 00000000 00000000     ................
	...

00022564 <g_am_hal_mcuctrl_sram_size>:
   22564:	00004000 00008000 00010000 00020000     .@..............
   22574:	00040000 00080000 00100000 00060000     ................
   22584:	000c0000 00000000 00000000 00000000     ................
	...

000225a4 <am_hal_pwrctrl_peripheral_control>:
	...
   225b0:	00000001 00000004 00000004 00000002     ................
   225c0:	00000008 00000008 00000004 00000008     ................
   225d0:	00000008 00000008 00000008 00000008     ................
   225e0:	00000010 00000010 00000010 00000020     ............ ...
   225f0:	00000010 00000010 00000040 00000010     ........@.......
   22600:	00000010 00000080 00000004 00000004     ................
   22610:	00000100 00000004 00000004 00000200     ................
   22620:	00000020 00000020 00000400 00000004      ... ...........
   22630:	00000004 00000800 00000040 00000040     ........@...@...
   22640:	00001000 00000080 00000080 00002000     ............. ..
   22650:	00000100 00000100                       ........

00022658 <g_AM_BSP_GPIO_ITM_SWO>:
   22658:	00000002                                ....
