
bin/hello_fault.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 11 d3 00 00 79 d3 00 00 61 c2 00 00     ........y...a...
    c010:	7b d3 00 00 7b d3 00 00 7b d3 00 00 00 00 00 00     {...{...{.......
	...
    c02c:	7d d3 00 00 7d d3 00 00 00 00 00 00 7d d3 00 00     }...}.......}...
    c03c:	7d d3 00 00 7d d3 00 00 7d d3 00 00 7d d3 00 00     }...}...}...}...
    c04c:	7d d3 00 00 7d d3 00 00 7d d3 00 00 7d d3 00 00     }...}...}...}...
    c05c:	7d d3 00 00 7d d3 00 00 7d d3 00 00 7d d3 00 00     }...}...}...}...
    c06c:	7d d3 00 00 7d d3 00 00 7d d3 00 00 7d d3 00 00     }...}...}...}...
    c07c:	7d d3 00 00 7d d3 00 00 7d d3 00 00 7d d3 00 00     }...}...}...}...
    c08c:	7d d3 00 00 7d d3 00 00 7d d3 00 00 7d d3 00 00     }...}...}...}...
    c09c:	7d d3 00 00 7d d3 00 00 7d d3 00 00 7d d3 00 00     }...}...}...}...
    c0ac:	7d d3 00 00 7d d3 00 00 7d d3 00 00 7d d3 00 00     }...}...}...}...
    c0bc:	7d d3 00 00                                         }...

0000c0c0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <force_fault>:
//! @return None.
//
//*****************************************************************************
void
force_fault(void)
{
    c1a0:	b082      	sub	sp, #8
    uint32_t *pCauseFault;
    volatile uint32_t uVal;

    pCauseFault = (uint32_t*)ILLEGAL_SRAM_ADDR;
    c1a2:	4b05      	ldr	r3, [pc, #20]	; (c1b8 <force_fault+0x18>)
    c1a4:	9301      	str	r3, [sp, #4]
    uVal = *pCauseFault;
    c1a6:	9b01      	ldr	r3, [sp, #4]
    c1a8:	681b      	ldr	r3, [r3, #0]
    c1aa:	9300      	str	r3, [sp, #0]

    //
    // Use the variable uVal in order to avoid a warning from some compilers.
    // However, the fault will prevent us from getting here.
    //
    pCauseFault = (uint32_t*)uVal;
    c1ac:	9b00      	ldr	r3, [sp, #0]
    c1ae:	9301      	str	r3, [sp, #4]
}
    c1b0:	bf00      	nop
    c1b2:	b002      	add	sp, #8
    c1b4:	4770      	bx	lr
    c1b6:	bf00      	nop
    c1b8:	10100000 	.word	0x10100000

0000c1bc <main>:
// Main
//
//*****************************************************************************
int
main(void)
{
    c1bc:	b508      	push	{r3, lr}
    //
    // Set the clock frequency.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c1be:	2100      	movs	r1, #0
    c1c0:	2000      	movs	r0, #0
    c1c2:	f001 fafb 	bl	d7bc <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c1c6:	4813      	ldr	r0, [pc, #76]	; (c214 <main+0x58>)
    c1c8:	f001 f950 	bl	d46c <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c1cc:	f001 f972 	bl	d4b4 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    c1d0:	f001 f8d6 	bl	d380 <am_bsp_low_power_init>

    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_bsp_itm_printf_enable();
    c1d4:	f001 f92a 	bl	d42c <am_bsp_itm_printf_enable>

    //
    // Print the banner.
    //
    am_util_stdio_terminal_clear();
    c1d8:	f001 f892 	bl	d300 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Hello Fault.\n\n");
    c1dc:	480e      	ldr	r0, [pc, #56]	; (c218 <main+0x5c>)
    c1de:	f001 f86f 	bl	d2c0 <am_util_stdio_printf>

    //
    // Print a message about the forthcoming hard fault.
    //
    am_util_stdio_printf(""
    c1e2:	480e      	ldr	r0, [pc, #56]	; (c21c <main+0x60>)
    c1e4:	f001 f86c 	bl	d2c0 <am_util_stdio_printf>
        "An illegal memory access will occur next, which will execute the\n"
        "extended fault handler to assist in decoding the fault.\n");
    am_util_stdio_printf("\n"
    c1e8:	480d      	ldr	r0, [pc, #52]	; (c220 <main+0x64>)
    c1ea:	f001 f869 	bl	d2c0 <am_util_stdio_printf>
        "In order to print out the fault information for this example\n"
        "a macro, AM_UTIL_FAULTISR_PRINT, has been defined in the build\n"
        "environment.  Otherwise the fault data can only be examined\n"
        "directly in the ISR from a debugger.\n"
        "\n");
    am_util_stdio_printf(""
    c1ee:	480d      	ldr	r0, [pc, #52]	; (c224 <main+0x68>)
    c1f0:	f001 f866 	bl	d2c0 <am_util_stdio_printf>
        "\n");

    //
    // Give the above print statements time to complete.
    //
    am_util_delay_ms(10);
    c1f4:	200a      	movs	r0, #10
    c1f6:	f000 f817 	bl	c228 <am_util_delay_ms>

    //
    // Enable the Apollo3 Fault detection.
    //
    am_hal_mcuctrl_control(AM_HAL_MCUCTRL_CONTROL_FAULT_CAPTURE_ENABLE, 0);
    c1fa:	2100      	movs	r1, #0
    c1fc:	2000      	movs	r0, #0
    c1fe:	f001 fdff 	bl	de00 <am_hal_mcuctrl_control>
    //
    // Force an invalid memory address fault.
    // This function will not return, so anything after it
    //  will not be executed.
    //
    force_fault();
    c202:	f7ff ffcd 	bl	c1a0 <force_fault>

    //
    //
    // We are done printing. Disable debug printf messages on ITM.
    //
    am_bsp_debug_printf_disable();
    c206:	f001 f8db 	bl	d3c0 <am_bsp_debug_printf_disable>
    while (1)
    {
        //
        // Go to Deep Sleep.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c20a:	2001      	movs	r0, #1
    c20c:	f002 f894 	bl	e338 <am_hal_sysctrl_sleep>
    c210:	e7fb      	b.n	c20a <main+0x4e>
    c212:	bf00      	nop
    c214:	0000ea58 	.word	0x0000ea58
    c218:	0000e5b0 	.word	0x0000e5b0
    c21c:	0000e5c0 	.word	0x0000e5c0
    c220:	0000e63c 	.word	0x0000e63c
    c224:	0000e71c 	.word	0x0000e71c

0000c228 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    c228:	b500      	push	{lr}
    c22a:	b089      	sub	sp, #36	; 0x24
    c22c:	9001      	str	r0, [sp, #4]
    am_hal_delay_us( ui32MilliSeconds * 1000);
#else // AM_PART_APOLLO4
    uint32_t ui32Loops, ui32HFRC;
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    c22e:	ab03      	add	r3, sp, #12
    c230:	4618      	mov	r0, r3
    c232:	f001 fb5f 	bl	d8f4 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
    c236:	9b03      	ldr	r3, [sp, #12]
    c238:	9307      	str	r3, [sp, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    c23a:	9b07      	ldr	r3, [sp, #28]
    c23c:	4a07      	ldr	r2, [pc, #28]	; (c25c <am_util_delay_ms+0x34>)
    c23e:	fba2 2303 	umull	r2, r3, r2, r3
    c242:	099a      	lsrs	r2, r3, #6
    c244:	9b01      	ldr	r3, [sp, #4]
    c246:	fb02 f303 	mul.w	r3, r2, r3
    c24a:	9306      	str	r3, [sp, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    c24c:	9806      	ldr	r0, [sp, #24]
    c24e:	f001 fb6f 	bl	d930 <am_hal_flash_delay>
#endif // AM_PART_APOLLO4
}
    c252:	bf00      	nop
    c254:	b009      	add	sp, #36	; 0x24
    c256:	f85d fb04 	ldr.w	pc, [sp], #4
    c25a:	bf00      	nop
    c25c:	057619f1 	.word	0x057619f1

0000c260 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    c260:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    c262:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    c266:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    c268:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    c26c:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    c270:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c274:	f000 f80a 	bl	c28c <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    c278:	bd01      	pop	{r0, pc}
}
    c27a:	bf00      	nop
    c27c:	4618      	mov	r0, r3

0000c27e <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c27e:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c280:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c282:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c284:	4770      	bx	lr
}
    c286:	bf00      	nop
    c288:	4618      	mov	r0, r3
	...

0000c28c <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c28c:	b500      	push	{lr}
    c28e:	b097      	sub	sp, #92	; 0x5c
    c290:	9001      	str	r0, [sp, #4]
    volatile am_fault_t sFaultData;
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_t  sHalFaultData = {0};
#else
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c292:	ab03      	add	r3, sp, #12
    c294:	2200      	movs	r2, #0
    c296:	601a      	str	r2, [r3, #0]
    c298:	605a      	str	r2, [r3, #4]
    c29a:	609a      	str	r2, [r3, #8]
    c29c:	60da      	str	r2, [r3, #12]
    c29e:	611a      	str	r2, [r3, #16]
    c2a0:	615a      	str	r2, [r3, #20]
#endif // if defined(AM_PART_APOLLO4)

    uint32_t u32Mask = 0;
    c2a2:	2300      	movs	r3, #0
    c2a4:	9315      	str	r3, [sp, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c2a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c2a8:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c2aa:	4ba4      	ldr	r3, [pc, #656]	; (c53c <am_util_faultisr_collect_data+0x2b0>)
    c2ac:	681b      	ldr	r3, [r3, #0]
    c2ae:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c2b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c2b2:	b2db      	uxtb	r3, r3
    c2b4:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c2b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c2ba:	0a1b      	lsrs	r3, r3, #8
    c2bc:	b2db      	uxtb	r3, r3
    c2be:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c2c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c2c4:	0c1b      	lsrs	r3, r3, #16
    c2c6:	b29b      	uxth	r3, r3
    c2c8:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c2cc:	4b9c      	ldr	r3, [pc, #624]	; (c540 <am_util_faultisr_collect_data+0x2b4>)
    c2ce:	681b      	ldr	r3, [r3, #0]
    c2d0:	9312      	str	r3, [sp, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c2d2:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
    c2d6:	b2db      	uxtb	r3, r3
    c2d8:	f003 0302 	and.w	r3, r3, #2
    c2dc:	2b00      	cmp	r3, #0
    c2de:	d005      	beq.n	c2ec <am_util_faultisr_collect_data+0x60>
    c2e0:	9901      	ldr	r1, [sp, #4]
    c2e2:	2006      	movs	r0, #6
    c2e4:	f7ff ffcb 	bl	c27e <getStackedReg>
    c2e8:	4603      	mov	r3, r0
    c2ea:	e001      	b.n	c2f0 <am_util_faultisr_collect_data+0x64>
    c2ec:	f04f 33ff 	mov.w	r3, #4294967295
    c2f0:	9311      	str	r3, [sp, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c2f2:	9901      	ldr	r1, [sp, #4]
    c2f4:	2000      	movs	r0, #0
    c2f6:	f7ff ffc2 	bl	c27e <getStackedReg>
    c2fa:	4603      	mov	r3, r0
    c2fc:	9309      	str	r3, [sp, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c2fe:	9901      	ldr	r1, [sp, #4]
    c300:	2001      	movs	r0, #1
    c302:	f7ff ffbc 	bl	c27e <getStackedReg>
    c306:	4603      	mov	r3, r0
    c308:	930a      	str	r3, [sp, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c30a:	9901      	ldr	r1, [sp, #4]
    c30c:	2002      	movs	r0, #2
    c30e:	f7ff ffb6 	bl	c27e <getStackedReg>
    c312:	4603      	mov	r3, r0
    c314:	930b      	str	r3, [sp, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c316:	9901      	ldr	r1, [sp, #4]
    c318:	2003      	movs	r0, #3
    c31a:	f7ff ffb0 	bl	c27e <getStackedReg>
    c31e:	4603      	mov	r3, r0
    c320:	930c      	str	r3, [sp, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c322:	9901      	ldr	r1, [sp, #4]
    c324:	2004      	movs	r0, #4
    c326:	f7ff ffaa 	bl	c27e <getStackedReg>
    c32a:	4603      	mov	r3, r0
    c32c:	930d      	str	r3, [sp, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c32e:	9901      	ldr	r1, [sp, #4]
    c330:	2005      	movs	r0, #5
    c332:	f7ff ffa4 	bl	c27e <getStackedReg>
    c336:	4603      	mov	r3, r0
    c338:	930e      	str	r3, [sp, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c33a:	9901      	ldr	r1, [sp, #4]
    c33c:	2006      	movs	r0, #6
    c33e:	f7ff ff9e 	bl	c27e <getStackedReg>
    c342:	4603      	mov	r3, r0
    c344:	930f      	str	r3, [sp, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c346:	9901      	ldr	r1, [sp, #4]
    c348:	2007      	movs	r0, #7
    c34a:	f7ff ff98 	bl	c27e <getStackedReg>
    c34e:	4603      	mov	r3, r0
    c350:	9310      	str	r3, [sp, #64]	; 0x40
    //
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_get(&sHalFaultData);
#else
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c352:	ab03      	add	r3, sp, #12
    c354:	4619      	mov	r1, r3
    c356:	2002      	movs	r0, #2
    c358:	f001 fe14 	bl	df84 <am_hal_mcuctrl_info_get>
#ifdef AM_UTIL_FAULTISR_PRINT
    //
    // If printf has previously been initialized in the application, we should
    // be able to print out the fault information.
    //
    am_util_stdio_printf("Hard Fault stacked data:\n");
    c35c:	4879      	ldr	r0, [pc, #484]	; (c544 <am_util_faultisr_collect_data+0x2b8>)
    c35e:	f000 ffaf 	bl	d2c0 <am_util_stdio_printf>
    am_util_stdio_printf("    R0  = 0x%08X\n", sFaultData.u32R0);
    c362:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c364:	4619      	mov	r1, r3
    c366:	4878      	ldr	r0, [pc, #480]	; (c548 <am_util_faultisr_collect_data+0x2bc>)
    c368:	f000 ffaa 	bl	d2c0 <am_util_stdio_printf>
    am_util_stdio_printf("    R1  = 0x%08X\n", sFaultData.u32R1);
    c36c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c36e:	4619      	mov	r1, r3
    c370:	4876      	ldr	r0, [pc, #472]	; (c54c <am_util_faultisr_collect_data+0x2c0>)
    c372:	f000 ffa5 	bl	d2c0 <am_util_stdio_printf>
    am_util_stdio_printf("    R2  = 0x%08X\n", sFaultData.u32R2);
    c376:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c378:	4619      	mov	r1, r3
    c37a:	4875      	ldr	r0, [pc, #468]	; (c550 <am_util_faultisr_collect_data+0x2c4>)
    c37c:	f000 ffa0 	bl	d2c0 <am_util_stdio_printf>
    am_util_stdio_printf("    R3  = 0x%08X\n", sFaultData.u32R3);
    c380:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c382:	4619      	mov	r1, r3
    c384:	4873      	ldr	r0, [pc, #460]	; (c554 <am_util_faultisr_collect_data+0x2c8>)
    c386:	f000 ff9b 	bl	d2c0 <am_util_stdio_printf>
    am_util_stdio_printf("    R12 = 0x%08X\n", sFaultData.u32R12);
    c38a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c38c:	4619      	mov	r1, r3
    c38e:	4872      	ldr	r0, [pc, #456]	; (c558 <am_util_faultisr_collect_data+0x2cc>)
    c390:	f000 ff96 	bl	d2c0 <am_util_stdio_printf>
    am_util_stdio_printf("    LR  = 0x%08X\n", sFaultData.u32LR);
    c394:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c396:	4619      	mov	r1, r3
    c398:	4870      	ldr	r0, [pc, #448]	; (c55c <am_util_faultisr_collect_data+0x2d0>)
    c39a:	f000 ff91 	bl	d2c0 <am_util_stdio_printf>
    am_util_stdio_printf("    PC  = 0x%08X\n", sFaultData.u32PC);
    c39e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c3a0:	4619      	mov	r1, r3
    c3a2:	486f      	ldr	r0, [pc, #444]	; (c560 <am_util_faultisr_collect_data+0x2d4>)
    c3a4:	f000 ff8c 	bl	d2c0 <am_util_stdio_printf>
    am_util_stdio_printf("    PSR = 0x%08X\n", sFaultData.u32PSR);
    c3a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c3aa:	4619      	mov	r1, r3
    c3ac:	486d      	ldr	r0, [pc, #436]	; (c564 <am_util_faultisr_collect_data+0x2d8>)
    c3ae:	f000 ff87 	bl	d2c0 <am_util_stdio_printf>
    am_util_stdio_printf("Other Hard Fault data:\n");
    c3b2:	486d      	ldr	r0, [pc, #436]	; (c568 <am_util_faultisr_collect_data+0x2dc>)
    c3b4:	f000 ff84 	bl	d2c0 <am_util_stdio_printf>
    am_util_stdio_printf("    Fault address = 0x%08X\n", sFaultData.u32FaultAddr);
    c3b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c3ba:	4619      	mov	r1, r3
    c3bc:	486b      	ldr	r0, [pc, #428]	; (c56c <am_util_faultisr_collect_data+0x2e0>)
    c3be:	f000 ff7f 	bl	d2c0 <am_util_stdio_printf>
    am_util_stdio_printf("    BFAR (Bus Fault Addr Reg) = 0x%08X\n", sFaultData.u32BFAR);
    c3c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c3c4:	4619      	mov	r1, r3
    c3c6:	486a      	ldr	r0, [pc, #424]	; (c570 <am_util_faultisr_collect_data+0x2e4>)
    c3c8:	f000 ff7a 	bl	d2c0 <am_util_stdio_printf>
    am_util_stdio_printf("    MMSR (Mem Mgmt Fault Status Reg) = 0x%02X\n", sFaultData.u8MMSR);
    c3cc:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
    c3d0:	b2db      	uxtb	r3, r3
    c3d2:	4619      	mov	r1, r3
    c3d4:	4867      	ldr	r0, [pc, #412]	; (c574 <am_util_faultisr_collect_data+0x2e8>)
    c3d6:	f000 ff73 	bl	d2c0 <am_util_stdio_printf>
    am_util_stdio_printf("    BFSR (Bus Fault Status Reg) = 0x%02X\n", sFaultData.u8BFSR);
    c3da:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
    c3de:	b2db      	uxtb	r3, r3
    c3e0:	4619      	mov	r1, r3
    c3e2:	4865      	ldr	r0, [pc, #404]	; (c578 <am_util_faultisr_collect_data+0x2ec>)
    c3e4:	f000 ff6c 	bl	d2c0 <am_util_stdio_printf>
    am_util_stdio_printf("    UFSR (Usage Fault Status Reg) = 0x%04X\n", sFaultData.u16UFSR);
    c3e8:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
    c3ec:	b29b      	uxth	r3, r3
    c3ee:	4619      	mov	r1, r3
    c3f0:	4862      	ldr	r0, [pc, #392]	; (c57c <am_util_faultisr_collect_data+0x2f0>)
    c3f2:	f000 ff65 	bl	d2c0 <am_util_stdio_printf>

    //
    // Print out any bits set in the BFSR.
    //
    u32Mask = 0x80;
    c3f6:	2380      	movs	r3, #128	; 0x80
    c3f8:	9315      	str	r3, [sp, #84]	; 0x54
    while (u32Mask)
    c3fa:	e07a      	b.n	c4f2 <am_util_faultisr_collect_data+0x266>
    {
        switch (sFaultData.u8BFSR & u32Mask)
    c3fc:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
    c400:	b2db      	uxtb	r3, r3
    c402:	461a      	mov	r2, r3
    c404:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c406:	4013      	ands	r3, r2
    c408:	2b80      	cmp	r3, #128	; 0x80
    c40a:	d04e      	beq.n	c4aa <am_util_faultisr_collect_data+0x21e>
    c40c:	2b80      	cmp	r3, #128	; 0x80
    c40e:	d86c      	bhi.n	c4ea <am_util_faultisr_collect_data+0x25e>
    c410:	2b20      	cmp	r3, #32
    c412:	d847      	bhi.n	c4a4 <am_util_faultisr_collect_data+0x218>
    c414:	2b00      	cmp	r3, #0
    c416:	d068      	beq.n	c4ea <am_util_faultisr_collect_data+0x25e>
    c418:	3b01      	subs	r3, #1
    c41a:	2b1f      	cmp	r3, #31
    c41c:	d865      	bhi.n	c4ea <am_util_faultisr_collect_data+0x25e>
    c41e:	a201      	add	r2, pc, #4	; (adr r2, c424 <am_util_faultisr_collect_data+0x198>)
    c420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c424:	0000c4e3 	.word	0x0000c4e3
    c428:	0000c4db 	.word	0x0000c4db
    c42c:	0000c4eb 	.word	0x0000c4eb
    c430:	0000c4d3 	.word	0x0000c4d3
    c434:	0000c4eb 	.word	0x0000c4eb
    c438:	0000c4eb 	.word	0x0000c4eb
    c43c:	0000c4eb 	.word	0x0000c4eb
    c440:	0000c4cb 	.word	0x0000c4cb
    c444:	0000c4eb 	.word	0x0000c4eb
    c448:	0000c4eb 	.word	0x0000c4eb
    c44c:	0000c4eb 	.word	0x0000c4eb
    c450:	0000c4eb 	.word	0x0000c4eb
    c454:	0000c4eb 	.word	0x0000c4eb
    c458:	0000c4eb 	.word	0x0000c4eb
    c45c:	0000c4eb 	.word	0x0000c4eb
    c460:	0000c4c3 	.word	0x0000c4c3
    c464:	0000c4eb 	.word	0x0000c4eb
    c468:	0000c4eb 	.word	0x0000c4eb
    c46c:	0000c4eb 	.word	0x0000c4eb
    c470:	0000c4eb 	.word	0x0000c4eb
    c474:	0000c4eb 	.word	0x0000c4eb
    c478:	0000c4eb 	.word	0x0000c4eb
    c47c:	0000c4eb 	.word	0x0000c4eb
    c480:	0000c4eb 	.word	0x0000c4eb
    c484:	0000c4eb 	.word	0x0000c4eb
    c488:	0000c4eb 	.word	0x0000c4eb
    c48c:	0000c4eb 	.word	0x0000c4eb
    c490:	0000c4eb 	.word	0x0000c4eb
    c494:	0000c4eb 	.word	0x0000c4eb
    c498:	0000c4eb 	.word	0x0000c4eb
    c49c:	0000c4eb 	.word	0x0000c4eb
    c4a0:	0000c4bb 	.word	0x0000c4bb
    c4a4:	2b40      	cmp	r3, #64	; 0x40
    c4a6:	d004      	beq.n	c4b2 <am_util_faultisr_collect_data+0x226>
                break;
            case 0x01:
                am_util_stdio_printf("        BFSR bit0: IBUSERR\n");
                break;
            default:
                break;
    c4a8:	e01f      	b.n	c4ea <am_util_faultisr_collect_data+0x25e>
                am_util_stdio_printf("        BFSR bit7: BFARVALID\n");
    c4aa:	4835      	ldr	r0, [pc, #212]	; (c580 <am_util_faultisr_collect_data+0x2f4>)
    c4ac:	f000 ff08 	bl	d2c0 <am_util_stdio_printf>
                break;
    c4b0:	e01c      	b.n	c4ec <am_util_faultisr_collect_data+0x260>
                am_util_stdio_printf("        BFSR bit6: RESERVED\n");
    c4b2:	4834      	ldr	r0, [pc, #208]	; (c584 <am_util_faultisr_collect_data+0x2f8>)
    c4b4:	f000 ff04 	bl	d2c0 <am_util_stdio_printf>
                break;
    c4b8:	e018      	b.n	c4ec <am_util_faultisr_collect_data+0x260>
                am_util_stdio_printf("        BFSR bit5: LSPERR\n");
    c4ba:	4833      	ldr	r0, [pc, #204]	; (c588 <am_util_faultisr_collect_data+0x2fc>)
    c4bc:	f000 ff00 	bl	d2c0 <am_util_stdio_printf>
                break;
    c4c0:	e014      	b.n	c4ec <am_util_faultisr_collect_data+0x260>
                am_util_stdio_printf("        BFSR bit4: STKERR\n");
    c4c2:	4832      	ldr	r0, [pc, #200]	; (c58c <am_util_faultisr_collect_data+0x300>)
    c4c4:	f000 fefc 	bl	d2c0 <am_util_stdio_printf>
                break;
    c4c8:	e010      	b.n	c4ec <am_util_faultisr_collect_data+0x260>
                am_util_stdio_printf("        BFSR bit3: UNSTKERR\n");
    c4ca:	4831      	ldr	r0, [pc, #196]	; (c590 <am_util_faultisr_collect_data+0x304>)
    c4cc:	f000 fef8 	bl	d2c0 <am_util_stdio_printf>
                break;
    c4d0:	e00c      	b.n	c4ec <am_util_faultisr_collect_data+0x260>
                am_util_stdio_printf("        BFSR bit2: IMPRECISERR\n");
    c4d2:	4830      	ldr	r0, [pc, #192]	; (c594 <am_util_faultisr_collect_data+0x308>)
    c4d4:	f000 fef4 	bl	d2c0 <am_util_stdio_printf>
                break;
    c4d8:	e008      	b.n	c4ec <am_util_faultisr_collect_data+0x260>
                am_util_stdio_printf("        BFSR bit1: PRECISEERR\n");
    c4da:	482f      	ldr	r0, [pc, #188]	; (c598 <am_util_faultisr_collect_data+0x30c>)
    c4dc:	f000 fef0 	bl	d2c0 <am_util_stdio_printf>
                break;
    c4e0:	e004      	b.n	c4ec <am_util_faultisr_collect_data+0x260>
                am_util_stdio_printf("        BFSR bit0: IBUSERR\n");
    c4e2:	482e      	ldr	r0, [pc, #184]	; (c59c <am_util_faultisr_collect_data+0x310>)
    c4e4:	f000 feec 	bl	d2c0 <am_util_stdio_printf>
                break;
    c4e8:	e000      	b.n	c4ec <am_util_faultisr_collect_data+0x260>
                break;
    c4ea:	bf00      	nop
        }
        u32Mask >>= 1;
    c4ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c4ee:	085b      	lsrs	r3, r3, #1
    c4f0:	9315      	str	r3, [sp, #84]	; 0x54
    while (u32Mask)
    c4f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c4f4:	2b00      	cmp	r3, #0
    c4f6:	d181      	bne.n	c3fc <am_util_faultisr_collect_data+0x170>
    }

    //
    // Print out any Apollo* Internal fault information.
    //
    am_util_stdio_printf("MCU Fault data:\n");
    c4f8:	4829      	ldr	r0, [pc, #164]	; (c5a0 <am_util_faultisr_collect_data+0x314>)
    c4fa:	f000 fee1 	bl	d2c0 <am_util_stdio_printf>
    if (sHalFaultData.bICODE)
    c4fe:	f89d 300c 	ldrb.w	r3, [sp, #12]
    c502:	2b00      	cmp	r3, #0
    c504:	d004      	beq.n	c510 <am_util_faultisr_collect_data+0x284>
    {
      am_util_stdio_printf("   ICODE Fault Address: 0x%08X\n", sHalFaultData.ui32ICODE);
    c506:	9b04      	ldr	r3, [sp, #16]
    c508:	4619      	mov	r1, r3
    c50a:	4826      	ldr	r0, [pc, #152]	; (c5a4 <am_util_faultisr_collect_data+0x318>)
    c50c:	f000 fed8 	bl	d2c0 <am_util_stdio_printf>
    }
    if (sHalFaultData.bDCODE)
    c510:	f89d 3014 	ldrb.w	r3, [sp, #20]
    c514:	2b00      	cmp	r3, #0
    c516:	d004      	beq.n	c522 <am_util_faultisr_collect_data+0x296>
    {
      am_util_stdio_printf("   DCODE Fault Address: 0x%08X\n", sHalFaultData.ui32DCODE);
    c518:	9b06      	ldr	r3, [sp, #24]
    c51a:	4619      	mov	r1, r3
    c51c:	4822      	ldr	r0, [pc, #136]	; (c5a8 <am_util_faultisr_collect_data+0x31c>)
    c51e:	f000 fecf 	bl	d2c0 <am_util_stdio_printf>
    }
    if (sHalFaultData.bSYS)
    c522:	f89d 301c 	ldrb.w	r3, [sp, #28]
    c526:	2b00      	cmp	r3, #0
    c528:	d004      	beq.n	c534 <am_util_faultisr_collect_data+0x2a8>
    {
      am_util_stdio_printf("   SYS Fault Address: 0x%08X\n", sHalFaultData.ui32SYS);
    c52a:	9b08      	ldr	r3, [sp, #32]
    c52c:	4619      	mov	r1, r3
    c52e:	481f      	ldr	r0, [pc, #124]	; (c5ac <am_util_faultisr_collect_data+0x320>)
    c530:	f000 fec6 	bl	d2c0 <am_util_stdio_printf>
    }

#endif

    u32Mask = 0;
    c534:	2300      	movs	r3, #0
    c536:	9315      	str	r3, [sp, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    c538:	e7fe      	b.n	c538 <am_util_faultisr_collect_data+0x2ac>
    c53a:	bf00      	nop
    c53c:	e000ed28 	.word	0xe000ed28
    c540:	e000ed38 	.word	0xe000ed38
    c544:	0000e738 	.word	0x0000e738
    c548:	0000e754 	.word	0x0000e754
    c54c:	0000e768 	.word	0x0000e768
    c550:	0000e77c 	.word	0x0000e77c
    c554:	0000e790 	.word	0x0000e790
    c558:	0000e7a4 	.word	0x0000e7a4
    c55c:	0000e7b8 	.word	0x0000e7b8
    c560:	0000e7cc 	.word	0x0000e7cc
    c564:	0000e7e0 	.word	0x0000e7e0
    c568:	0000e7f4 	.word	0x0000e7f4
    c56c:	0000e80c 	.word	0x0000e80c
    c570:	0000e828 	.word	0x0000e828
    c574:	0000e850 	.word	0x0000e850
    c578:	0000e880 	.word	0x0000e880
    c57c:	0000e8ac 	.word	0x0000e8ac
    c580:	0000e8d8 	.word	0x0000e8d8
    c584:	0000e8f8 	.word	0x0000e8f8
    c588:	0000e918 	.word	0x0000e918
    c58c:	0000e934 	.word	0x0000e934
    c590:	0000e950 	.word	0x0000e950
    c594:	0000e970 	.word	0x0000e970
    c598:	0000e990 	.word	0x0000e990
    c59c:	0000e9b0 	.word	0x0000e9b0
    c5a0:	0000e9cc 	.word	0x0000e9cc
    c5a4:	0000e9e0 	.word	0x0000e9e0
    c5a8:	0000ea00 	.word	0x0000ea00
    c5ac:	0000ea20 	.word	0x0000ea20

0000c5b0 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    c5b0:	b082      	sub	sp, #8
    c5b2:	9001      	str	r0, [sp, #4]
    g_pfnCharPrint = pfnCharPrint;
    c5b4:	4a02      	ldr	r2, [pc, #8]	; (c5c0 <am_util_stdio_printf_init+0x10>)
    c5b6:	9b01      	ldr	r3, [sp, #4]
    c5b8:	6013      	str	r3, [r2, #0]
}
    c5ba:	bf00      	nop
    c5bc:	b002      	add	sp, #8
    c5be:	4770      	bx	lr
    c5c0:	10001034 	.word	0x10001034

0000c5c4 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c5c4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c5c8:	b098      	sub	sp, #96	; 0x60
    c5ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c5ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c5d2:	f04f 0000 	mov.w	r0, #0
    c5d6:	f04f 0100 	mov.w	r1, #0
    c5da:	0018      	movs	r0, r3
    c5dc:	2100      	movs	r1, #0
    c5de:	ea50 0301 	orrs.w	r3, r0, r1
    c5e2:	f000 80b0 	beq.w	c746 <divu64_10+0x182>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c5e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c5ea:	f04f 0400 	mov.w	r4, #0
    c5ee:	f04f 0500 	mov.w	r5, #0
    c5f2:	0854      	lsrs	r4, r2, #1
    c5f4:	ea44 74c3 	orr.w	r4, r4, r3, lsl #31
    c5f8:	085d      	lsrs	r5, r3, #1
    c5fa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c5fe:	f04f 0000 	mov.w	r0, #0
    c602:	f04f 0100 	mov.w	r1, #0
    c606:	0890      	lsrs	r0, r2, #2
    c608:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
    c60c:	0899      	lsrs	r1, r3, #2
    c60e:	eb14 0a00 	adds.w	sl, r4, r0
    c612:	eb45 0b01 	adc.w	fp, r5, r1
    c616:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
        q64 += (q64 >> 4);
    c61a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c61e:	f04f 0000 	mov.w	r0, #0
    c622:	f04f 0100 	mov.w	r1, #0
    c626:	0910      	lsrs	r0, r2, #4
    c628:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
    c62c:	0919      	lsrs	r1, r3, #4
    c62e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c632:	1814      	adds	r4, r2, r0
    c634:	9402      	str	r4, [sp, #8]
    c636:	414b      	adcs	r3, r1
    c638:	9303      	str	r3, [sp, #12]
    c63a:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    c63e:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 8);
    c642:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c646:	f04f 0000 	mov.w	r0, #0
    c64a:	f04f 0100 	mov.w	r1, #0
    c64e:	0a10      	lsrs	r0, r2, #8
    c650:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
    c654:	0a19      	lsrs	r1, r3, #8
    c656:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c65a:	1814      	adds	r4, r2, r0
    c65c:	9404      	str	r4, [sp, #16]
    c65e:	414b      	adcs	r3, r1
    c660:	9305      	str	r3, [sp, #20]
    c662:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    c666:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 16);
    c66a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c66e:	f04f 0000 	mov.w	r0, #0
    c672:	f04f 0100 	mov.w	r1, #0
    c676:	0c10      	lsrs	r0, r2, #16
    c678:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    c67c:	0c19      	lsrs	r1, r3, #16
    c67e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c682:	1814      	adds	r4, r2, r0
    c684:	9406      	str	r4, [sp, #24]
    c686:	414b      	adcs	r3, r1
    c688:	9307      	str	r3, [sp, #28]
    c68a:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
    c68e:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 32);
    c692:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c696:	f04f 0000 	mov.w	r0, #0
    c69a:	f04f 0100 	mov.w	r1, #0
    c69e:	0018      	movs	r0, r3
    c6a0:	2100      	movs	r1, #0
    c6a2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c6a6:	1814      	adds	r4, r2, r0
    c6a8:	9408      	str	r4, [sp, #32]
    c6aa:	414b      	adcs	r3, r1
    c6ac:	9309      	str	r3, [sp, #36]	; 0x24
    c6ae:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
    c6b2:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 >>= 3;
    c6b6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    c6ba:	f04f 0200 	mov.w	r2, #0
    c6be:	f04f 0300 	mov.w	r3, #0
    c6c2:	08c2      	lsrs	r2, r0, #3
    c6c4:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    c6c8:	08cb      	lsrs	r3, r1, #3
    c6ca:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
        r64 = ui64Val - q64*10;
    c6ce:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
    c6d2:	4622      	mov	r2, r4
    c6d4:	462b      	mov	r3, r5
    c6d6:	f04f 0000 	mov.w	r0, #0
    c6da:	f04f 0100 	mov.w	r1, #0
    c6de:	0099      	lsls	r1, r3, #2
    c6e0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
    c6e4:	0090      	lsls	r0, r2, #2
    c6e6:	4602      	mov	r2, r0
    c6e8:	460b      	mov	r3, r1
    c6ea:	1916      	adds	r6, r2, r4
    c6ec:	eb43 0705 	adc.w	r7, r3, r5
    c6f0:	19b3      	adds	r3, r6, r6
    c6f2:	930a      	str	r3, [sp, #40]	; 0x28
    c6f4:	eb47 0307 	adc.w	r3, r7, r7
    c6f8:	930b      	str	r3, [sp, #44]	; 0x2c
    c6fa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    c6fe:	4630      	mov	r0, r6
    c700:	4639      	mov	r1, r7
    c702:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c706:	1a14      	subs	r4, r2, r0
    c708:	940c      	str	r4, [sp, #48]	; 0x30
    c70a:	eb63 0301 	sbc.w	r3, r3, r1
    c70e:	930d      	str	r3, [sp, #52]	; 0x34
    c710:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    c714:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
        return q64 + ((r64 + 6) >> 4);
    c718:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    c71c:	f112 0806 	adds.w	r8, r2, #6
    c720:	f143 0900 	adc.w	r9, r3, #0
    c724:	f04f 0200 	mov.w	r2, #0
    c728:	f04f 0300 	mov.w	r3, #0
    c72c:	ea4f 1218 	mov.w	r2, r8, lsr #4
    c730:	ea42 7209 	orr.w	r2, r2, r9, lsl #28
    c734:	ea4f 1319 	mov.w	r3, r9, lsr #4
    c738:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    c73c:	1814      	adds	r4, r2, r0
    c73e:	9400      	str	r4, [sp, #0]
    c740:	414b      	adcs	r3, r1
    c742:	9301      	str	r3, [sp, #4]
    c744:	e02a      	b.n	c79c <divu64_10+0x1d8>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    c746:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c748:	9317      	str	r3, [sp, #92]	; 0x5c
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c74a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c74c:	085a      	lsrs	r2, r3, #1
    c74e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c750:	089b      	lsrs	r3, r3, #2
    c752:	4413      	add	r3, r2
    c754:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 4);
    c756:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c758:	091b      	lsrs	r3, r3, #4
    c75a:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c75c:	4413      	add	r3, r2
    c75e:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 8);
    c760:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c762:	0a1b      	lsrs	r3, r3, #8
    c764:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c766:	4413      	add	r3, r2
    c768:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 16);
    c76a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c76c:	0c1b      	lsrs	r3, r3, #16
    c76e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c770:	4413      	add	r3, r2
    c772:	9316      	str	r3, [sp, #88]	; 0x58
        q32 >>= 3;
    c774:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c776:	08db      	lsrs	r3, r3, #3
    c778:	9316      	str	r3, [sp, #88]	; 0x58
        r32 = ui32Val - q32*10;
    c77a:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c77c:	4613      	mov	r3, r2
    c77e:	009b      	lsls	r3, r3, #2
    c780:	4413      	add	r3, r2
    c782:	005b      	lsls	r3, r3, #1
    c784:	461a      	mov	r2, r3
    c786:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c788:	1a9b      	subs	r3, r3, r2
    c78a:	9315      	str	r3, [sp, #84]	; 0x54
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c78c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c78e:	3306      	adds	r3, #6
    c790:	091a      	lsrs	r2, r3, #4
    c792:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c794:	4413      	add	r3, r2
    c796:	2200      	movs	r2, #0
    c798:	9300      	str	r3, [sp, #0]
    c79a:	9201      	str	r2, [sp, #4]
    }
}
    c79c:	e9dd 2300 	ldrd	r2, r3, [sp]
    c7a0:	4610      	mov	r0, r2
    c7a2:	4619      	mov	r1, r3
    c7a4:	b018      	add	sp, #96	; 0x60
    c7a6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c7aa:	4770      	bx	lr

0000c7ac <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    c7ac:	b500      	push	{lr}
    c7ae:	b085      	sub	sp, #20
    c7b0:	e9cd 0100 	strd	r0, r1, [sp]
    int iNDigits = ui64Val ? 0 : 1;
    c7b4:	9a00      	ldr	r2, [sp, #0]
    c7b6:	9b01      	ldr	r3, [sp, #4]
    c7b8:	4313      	orrs	r3, r2
    c7ba:	2b00      	cmp	r3, #0
    c7bc:	bf0c      	ite	eq
    c7be:	2301      	moveq	r3, #1
    c7c0:	2300      	movne	r3, #0
    c7c2:	b2db      	uxtb	r3, r3
    c7c4:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    c7c6:	e008      	b.n	c7da <ndigits_in_u64+0x2e>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    c7c8:	e9dd 0100 	ldrd	r0, r1, [sp]
    c7cc:	f7ff fefa 	bl	c5c4 <divu64_10>
    c7d0:	e9cd 0100 	strd	r0, r1, [sp]
        ++iNDigits;
    c7d4:	9b03      	ldr	r3, [sp, #12]
    c7d6:	3301      	adds	r3, #1
    c7d8:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    c7da:	e9dd 2300 	ldrd	r2, r3, [sp]
    c7de:	4313      	orrs	r3, r2
    c7e0:	d1f2      	bne.n	c7c8 <ndigits_in_u64+0x1c>
    }

    return iNDigits;
    c7e2:	9b03      	ldr	r3, [sp, #12]
}
    c7e4:	4618      	mov	r0, r3
    c7e6:	b005      	add	sp, #20
    c7e8:	f85d fb04 	ldr.w	pc, [sp], #4

0000c7ec <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    c7ec:	b530      	push	{r4, r5, lr}
    c7ee:	b083      	sub	sp, #12
    c7f0:	e9cd 0100 	strd	r0, r1, [sp]
    if ( i64Val < 0 )
    c7f4:	e9dd 2300 	ldrd	r2, r3, [sp]
    c7f8:	2b00      	cmp	r3, #0
    c7fa:	da07      	bge.n	c80c <ndigits_in_i64+0x20>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    c7fc:	e9dd 2300 	ldrd	r2, r3, [sp]
    c800:	2100      	movs	r1, #0
    c802:	4254      	negs	r4, r2
    c804:	eb61 0503 	sbc.w	r5, r1, r3
    c808:	e9cd 4500 	strd	r4, r5, [sp]
    }

    return ndigits_in_u64((uint64_t) i64Val);
    c80c:	e9dd 2300 	ldrd	r2, r3, [sp]
    c810:	4610      	mov	r0, r2
    c812:	4619      	mov	r1, r3
    c814:	f7ff ffca 	bl	c7ac <ndigits_in_u64>
    c818:	4603      	mov	r3, r0
}
    c81a:	4618      	mov	r0, r3
    c81c:	b003      	add	sp, #12
    c81e:	bd30      	pop	{r4, r5, pc}

0000c820 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    c820:	b084      	sub	sp, #16
    c822:	e9cd 0100 	strd	r0, r1, [sp]
    int iDigits = ui64Val ? 0 : 1;
    c826:	9a00      	ldr	r2, [sp, #0]
    c828:	9b01      	ldr	r3, [sp, #4]
    c82a:	4313      	orrs	r3, r2
    c82c:	2b00      	cmp	r3, #0
    c82e:	bf0c      	ite	eq
    c830:	2301      	moveq	r3, #1
    c832:	2300      	movne	r3, #0
    c834:	b2db      	uxtb	r3, r3
    c836:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    c838:	e00e      	b.n	c858 <ndigits_in_hex+0x38>
    {
        ui64Val >>= 4;
    c83a:	e9dd 0100 	ldrd	r0, r1, [sp]
    c83e:	f04f 0200 	mov.w	r2, #0
    c842:	f04f 0300 	mov.w	r3, #0
    c846:	0902      	lsrs	r2, r0, #4
    c848:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    c84c:	090b      	lsrs	r3, r1, #4
    c84e:	e9cd 2300 	strd	r2, r3, [sp]
        ++iDigits;
    c852:	9b03      	ldr	r3, [sp, #12]
    c854:	3301      	adds	r3, #1
    c856:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    c858:	e9dd 2300 	ldrd	r2, r3, [sp]
    c85c:	4313      	orrs	r3, r2
    c85e:	d1ec      	bne.n	c83a <ndigits_in_hex+0x1a>
    }

    return iDigits;
    c860:	9b03      	ldr	r3, [sp, #12]
}
    c862:	4618      	mov	r0, r3
    c864:	b004      	add	sp, #16
    c866:	4770      	bx	lr

0000c868 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    c868:	b086      	sub	sp, #24
    c86a:	9001      	str	r0, [sp, #4]
    c86c:	9100      	str	r1, [sp, #0]
    bool bNeg = false;
    c86e:	2300      	movs	r3, #0
    c870:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    c874:	2300      	movs	r3, #0
    c876:	9304      	str	r3, [sp, #16]
    c878:	2300      	movs	r3, #0
    c87a:	9303      	str	r3, [sp, #12]

    if ( *pcStr == '-')
    c87c:	9b01      	ldr	r3, [sp, #4]
    c87e:	781b      	ldrb	r3, [r3, #0]
    c880:	2b2d      	cmp	r3, #45	; 0x2d
    c882:	d11c      	bne.n	c8be <decstr_to_int+0x56>
    {
        bNeg = true;
    c884:	2301      	movs	r3, #1
    c886:	f88d 3017 	strb.w	r3, [sp, #23]
        pcStr++;
    c88a:	9b01      	ldr	r3, [sp, #4]
    c88c:	3301      	adds	r3, #1
    c88e:	9301      	str	r3, [sp, #4]
        uCnt++;
    c890:	9b03      	ldr	r3, [sp, #12]
    c892:	3301      	adds	r3, #1
    c894:	9303      	str	r3, [sp, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c896:	e012      	b.n	c8be <decstr_to_int+0x56>
    {
        ++uCnt;
    c898:	9b03      	ldr	r3, [sp, #12]
    c89a:	3301      	adds	r3, #1
    c89c:	9303      	str	r3, [sp, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    c89e:	9a04      	ldr	r2, [sp, #16]
    c8a0:	4613      	mov	r3, r2
    c8a2:	009b      	lsls	r3, r3, #2
    c8a4:	4413      	add	r3, r2
    c8a6:	005b      	lsls	r3, r3, #1
    c8a8:	9304      	str	r3, [sp, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    c8aa:	9b01      	ldr	r3, [sp, #4]
    c8ac:	781b      	ldrb	r3, [r3, #0]
    c8ae:	461a      	mov	r2, r3
    c8b0:	9b04      	ldr	r3, [sp, #16]
    c8b2:	4413      	add	r3, r2
    c8b4:	3b30      	subs	r3, #48	; 0x30
    c8b6:	9304      	str	r3, [sp, #16]
        pcStr++;
    c8b8:	9b01      	ldr	r3, [sp, #4]
    c8ba:	3301      	adds	r3, #1
    c8bc:	9301      	str	r3, [sp, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c8be:	9b01      	ldr	r3, [sp, #4]
    c8c0:	781b      	ldrb	r3, [r3, #0]
    c8c2:	2b2f      	cmp	r3, #47	; 0x2f
    c8c4:	d903      	bls.n	c8ce <decstr_to_int+0x66>
    c8c6:	9b01      	ldr	r3, [sp, #4]
    c8c8:	781b      	ldrb	r3, [r3, #0]
    c8ca:	2b39      	cmp	r3, #57	; 0x39
    c8cc:	d9e4      	bls.n	c898 <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    c8ce:	9b00      	ldr	r3, [sp, #0]
    c8d0:	2b00      	cmp	r3, #0
    c8d2:	d002      	beq.n	c8da <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    c8d4:	9b00      	ldr	r3, [sp, #0]
    c8d6:	9a03      	ldr	r2, [sp, #12]
    c8d8:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    c8da:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c8de:	2b00      	cmp	r3, #0
    c8e0:	d002      	beq.n	c8e8 <decstr_to_int+0x80>
    c8e2:	9b04      	ldr	r3, [sp, #16]
    c8e4:	425b      	negs	r3, r3
    c8e6:	e000      	b.n	c8ea <decstr_to_int+0x82>
    c8e8:	9b04      	ldr	r3, [sp, #16]
}
    c8ea:	4618      	mov	r0, r3
    c8ec:	b006      	add	sp, #24
    c8ee:	4770      	bx	lr

0000c8f0 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c8f0:	b500      	push	{lr}
    c8f2:	b091      	sub	sp, #68	; 0x44
    c8f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
    c8f8:	9201      	str	r2, [sp, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    c8fa:	2300      	movs	r3, #0
    c8fc:	930f      	str	r3, [sp, #60]	; 0x3c
    c8fe:	2300      	movs	r3, #0
    c900:	930e      	str	r3, [sp, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    c902:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c906:	f7ff fe5d 	bl	c5c4 <divu64_10>
    c90a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    c90e:	9902      	ldr	r1, [sp, #8]
    c910:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c912:	4613      	mov	r3, r2
    c914:	009b      	lsls	r3, r3, #2
    c916:	4413      	add	r3, r2
    c918:	005b      	lsls	r3, r3, #1
    c91a:	1acb      	subs	r3, r1, r3
    c91c:	930b      	str	r3, [sp, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    c91e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c920:	b2da      	uxtb	r2, r3
    c922:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c924:	1c59      	adds	r1, r3, #1
    c926:	910f      	str	r1, [sp, #60]	; 0x3c
    c928:	3230      	adds	r2, #48	; 0x30
    c92a:	b2d2      	uxtb	r2, r2
    c92c:	3340      	adds	r3, #64	; 0x40
    c92e:	446b      	add	r3, sp
    c930:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    c934:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    c938:	e9cd 2302 	strd	r2, r3, [sp, #8]
    } while ( ui64Val );
    c93c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c940:	4313      	orrs	r3, r2
    c942:	d1de      	bne.n	c902 <uint64_to_str+0x12>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    c944:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c946:	930e      	str	r3, [sp, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c948:	9b01      	ldr	r3, [sp, #4]
    c94a:	2b00      	cmp	r3, #0
    c94c:	d010      	beq.n	c970 <uint64_to_str+0x80>
    {
        while ( ix-- )
    c94e:	e007      	b.n	c960 <uint64_to_str+0x70>
        {
            *pcBuf++ = tbuf[ix];
    c950:	9b01      	ldr	r3, [sp, #4]
    c952:	1c5a      	adds	r2, r3, #1
    c954:	9201      	str	r2, [sp, #4]
    c956:	a904      	add	r1, sp, #16
    c958:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    c95a:	440a      	add	r2, r1
    c95c:	7812      	ldrb	r2, [r2, #0]
    c95e:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    c960:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c962:	1e5a      	subs	r2, r3, #1
    c964:	920f      	str	r2, [sp, #60]	; 0x3c
    c966:	2b00      	cmp	r3, #0
    c968:	d1f2      	bne.n	c950 <uint64_to_str+0x60>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    c96a:	9b01      	ldr	r3, [sp, #4]
    c96c:	2200      	movs	r2, #0
    c96e:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    c970:	9b0e      	ldr	r3, [sp, #56]	; 0x38
}
    c972:	4618      	mov	r0, r3
    c974:	b011      	add	sp, #68	; 0x44
    c976:	f85d fb04 	ldr.w	pc, [sp], #4

0000c97a <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    c97a:	b08c      	sub	sp, #48	; 0x30
    c97c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    c980:	9201      	str	r2, [sp, #4]
    c982:	f88d 3003 	strb.w	r3, [sp, #3]
    int iNumDig, ix = 0;
    c986:	2300      	movs	r3, #0
    c988:	930b      	str	r3, [sp, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    c98a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c98e:	4313      	orrs	r3, r2
    c990:	d135      	bne.n	c9fe <uint64_to_hexstr+0x84>
    {
        tbuf[ix++] = '0';   // Print a '0'
    c992:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c994:	1c5a      	adds	r2, r3, #1
    c996:	920b      	str	r2, [sp, #44]	; 0x2c
    c998:	3330      	adds	r3, #48	; 0x30
    c99a:	446b      	add	r3, sp
    c99c:	2230      	movs	r2, #48	; 0x30
    c99e:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    c9a2:	e02c      	b.n	c9fe <uint64_to_hexstr+0x84>
    {
        cCh = ui64Val & 0xf;
    c9a4:	f89d 3008 	ldrb.w	r3, [sp, #8]
    c9a8:	f003 030f 	and.w	r3, r3, #15
    c9ac:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    c9b0:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    c9b4:	2b09      	cmp	r3, #9
    c9b6:	d90b      	bls.n	c9d0 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    c9b8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c9bc:	2b00      	cmp	r3, #0
    c9be:	d001      	beq.n	c9c4 <uint64_to_hexstr+0x4a>
    c9c0:	2227      	movs	r2, #39	; 0x27
    c9c2:	e000      	b.n	c9c6 <uint64_to_hexstr+0x4c>
    c9c4:	2207      	movs	r2, #7
    c9c6:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    c9ca:	4413      	add	r3, r2
    c9cc:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    c9d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c9d2:	1c5a      	adds	r2, r3, #1
    c9d4:	920b      	str	r2, [sp, #44]	; 0x2c
    c9d6:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    c9da:	3230      	adds	r2, #48	; 0x30
    c9dc:	b2d2      	uxtb	r2, r2
    c9de:	3330      	adds	r3, #48	; 0x30
    c9e0:	446b      	add	r3, sp
    c9e2:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    c9e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c9ea:	f04f 0200 	mov.w	r2, #0
    c9ee:	f04f 0300 	mov.w	r3, #0
    c9f2:	0902      	lsrs	r2, r0, #4
    c9f4:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    c9f8:	090b      	lsrs	r3, r1, #4
    c9fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
    while ( ui64Val )
    c9fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ca02:	4313      	orrs	r3, r2
    ca04:	d1ce      	bne.n	c9a4 <uint64_to_hexstr+0x2a>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    ca06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca08:	9309      	str	r3, [sp, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    ca0a:	9b01      	ldr	r3, [sp, #4]
    ca0c:	2b00      	cmp	r3, #0
    ca0e:	d010      	beq.n	ca32 <uint64_to_hexstr+0xb8>
    {
        while (ix--)
    ca10:	e007      	b.n	ca22 <uint64_to_hexstr+0xa8>
        {
            *pcBuf++ = tbuf[ix];
    ca12:	9b01      	ldr	r3, [sp, #4]
    ca14:	1c5a      	adds	r2, r3, #1
    ca16:	9201      	str	r2, [sp, #4]
    ca18:	a904      	add	r1, sp, #16
    ca1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ca1c:	440a      	add	r2, r1
    ca1e:	7812      	ldrb	r2, [r2, #0]
    ca20:	701a      	strb	r2, [r3, #0]
        while (ix--)
    ca22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca24:	1e5a      	subs	r2, r3, #1
    ca26:	920b      	str	r2, [sp, #44]	; 0x2c
    ca28:	2b00      	cmp	r3, #0
    ca2a:	d1f2      	bne.n	ca12 <uint64_to_hexstr+0x98>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    ca2c:	9b01      	ldr	r3, [sp, #4]
    ca2e:	2200      	movs	r2, #0
    ca30:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    ca32:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    ca34:	4618      	mov	r0, r3
    ca36:	b00c      	add	sp, #48	; 0x30
    ca38:	4770      	bx	lr

0000ca3a <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    ca3a:	b084      	sub	sp, #16
    ca3c:	9001      	str	r0, [sp, #4]
    uint32_t ui32RetVal = 0;
    ca3e:	2300      	movs	r3, #0
    ca40:	9303      	str	r3, [sp, #12]
    if ( !pcBuf )
    ca42:	9b01      	ldr	r3, [sp, #4]
    ca44:	2b00      	cmp	r3, #0
    ca46:	d104      	bne.n	ca52 <simple_strlen+0x18>
    {
        return ui32RetVal;
    ca48:	9b03      	ldr	r3, [sp, #12]
    ca4a:	e009      	b.n	ca60 <simple_strlen+0x26>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    ca4c:	9b03      	ldr	r3, [sp, #12]
    ca4e:	3301      	adds	r3, #1
    ca50:	9303      	str	r3, [sp, #12]
    while ( *pcBuf++ )
    ca52:	9b01      	ldr	r3, [sp, #4]
    ca54:	1c5a      	adds	r2, r3, #1
    ca56:	9201      	str	r2, [sp, #4]
    ca58:	781b      	ldrb	r3, [r3, #0]
    ca5a:	2b00      	cmp	r3, #0
    ca5c:	d1f6      	bne.n	ca4c <simple_strlen+0x12>
    }
    return ui32RetVal;
    ca5e:	9b03      	ldr	r3, [sp, #12]
}
    ca60:	4618      	mov	r0, r3
    ca62:	b004      	add	sp, #16
    ca64:	4770      	bx	lr

0000ca66 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    ca66:	b086      	sub	sp, #24
    ca68:	9003      	str	r0, [sp, #12]
    ca6a:	460b      	mov	r3, r1
    ca6c:	9201      	str	r2, [sp, #4]
    ca6e:	f88d 300b 	strb.w	r3, [sp, #11]
    int32_t i32Cnt = 0;
    ca72:	2300      	movs	r3, #0
    ca74:	9305      	str	r3, [sp, #20]

    if ( i32NumChars <= 0 )
    ca76:	9b01      	ldr	r3, [sp, #4]
    ca78:	2b00      	cmp	r3, #0
    ca7a:	dc0d      	bgt.n	ca98 <padbuffer+0x32>
    {
        return i32Cnt;
    ca7c:	9b05      	ldr	r3, [sp, #20]
    ca7e:	e011      	b.n	caa4 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    ca80:	9b03      	ldr	r3, [sp, #12]
    ca82:	2b00      	cmp	r3, #0
    ca84:	d005      	beq.n	ca92 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    ca86:	9b03      	ldr	r3, [sp, #12]
    ca88:	1c5a      	adds	r2, r3, #1
    ca8a:	9203      	str	r2, [sp, #12]
    ca8c:	f89d 200b 	ldrb.w	r2, [sp, #11]
    ca90:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    ca92:	9b05      	ldr	r3, [sp, #20]
    ca94:	3301      	adds	r3, #1
    ca96:	9305      	str	r3, [sp, #20]
    while ( i32NumChars-- )
    ca98:	9b01      	ldr	r3, [sp, #4]
    ca9a:	1e5a      	subs	r2, r3, #1
    ca9c:	9201      	str	r2, [sp, #4]
    ca9e:	2b00      	cmp	r3, #0
    caa0:	d1ee      	bne.n	ca80 <padbuffer+0x1a>
    }

    return i32Cnt;
    caa2:	9b05      	ldr	r3, [sp, #20]
}
    caa4:	4618      	mov	r0, r3
    caa6:	b006      	add	sp, #24
    caa8:	4770      	bx	lr
	...

0000caac <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    caac:	b5f0      	push	{r4, r5, r6, r7, lr}
    caae:	b08f      	sub	sp, #60	; 0x3c
    cab0:	ed8d 0a03 	vstr	s0, [sp, #12]
    cab4:	9002      	str	r0, [sp, #8]
    cab6:	9101      	str	r1, [sp, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    cab8:	9b02      	ldr	r3, [sp, #8]
    caba:	681b      	ldr	r3, [r3, #0]
    cabc:	9309      	str	r3, [sp, #36]	; 0x24
    if (iBufSize < 4)
    cabe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cac0:	2b03      	cmp	r3, #3
    cac2:	dc02      	bgt.n	caca <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    cac4:	f06f 0302 	mvn.w	r3, #2
    cac8:	e0e9      	b.n	cc9e <ftoa+0x1f2>
    }

    if (fValue == 0.0f)
    caca:	eddd 7a03 	vldr	s15, [sp, #12]
    cace:	eef5 7a40 	vcmp.f32	s15, #0.0
    cad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cad6:	d104      	bne.n	cae2 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    cad8:	9b02      	ldr	r3, [sp, #8]
    cada:	4a72      	ldr	r2, [pc, #456]	; (cca4 <ftoa+0x1f8>)
    cadc:	601a      	str	r2, [r3, #0]
        return 3;
    cade:	2303      	movs	r3, #3
    cae0:	e0dd      	b.n	cc9e <ftoa+0x1f2>
    }

    pcBufInitial = pcBuf;
    cae2:	9b02      	ldr	r3, [sp, #8]
    cae4:	9308      	str	r3, [sp, #32]

    unFloatValue.F = fValue;
    cae6:	9b03      	ldr	r3, [sp, #12]
    cae8:	9304      	str	r3, [sp, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    caea:	9b04      	ldr	r3, [sp, #16]
    caec:	15db      	asrs	r3, r3, #23
    caee:	b2db      	uxtb	r3, r3
    caf0:	3b7f      	subs	r3, #127	; 0x7f
    caf2:	9307      	str	r3, [sp, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    caf4:	9b04      	ldr	r3, [sp, #16]
    caf6:	f3c3 0316 	ubfx	r3, r3, #0, #23
    cafa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    cafe:	9306      	str	r3, [sp, #24]
    i32FracPart = 0;
    cb00:	2300      	movs	r3, #0
    cb02:	930c      	str	r3, [sp, #48]	; 0x30
    i32IntPart = 0;
    cb04:	2300      	movs	r3, #0
    cb06:	930d      	str	r3, [sp, #52]	; 0x34

    if (iExp2 >= 31)
    cb08:	9b07      	ldr	r3, [sp, #28]
    cb0a:	2b1e      	cmp	r3, #30
    cb0c:	dd02      	ble.n	cb14 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    cb0e:	f06f 0301 	mvn.w	r3, #1
    cb12:	e0c4      	b.n	cc9e <ftoa+0x1f2>
    }
    else if (iExp2 < -23)
    cb14:	9b07      	ldr	r3, [sp, #28]
    cb16:	f113 0f17 	cmn.w	r3, #23
    cb1a:	da02      	bge.n	cb22 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    cb1c:	f04f 33ff 	mov.w	r3, #4294967295
    cb20:	e0bd      	b.n	cc9e <ftoa+0x1f2>
    }
    else if (iExp2 >= 23)
    cb22:	9b07      	ldr	r3, [sp, #28]
    cb24:	2b16      	cmp	r3, #22
    cb26:	dd06      	ble.n	cb36 <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    cb28:	9b07      	ldr	r3, [sp, #28]
    cb2a:	3b17      	subs	r3, #23
    cb2c:	9a06      	ldr	r2, [sp, #24]
    cb2e:	fa02 f303 	lsl.w	r3, r2, r3
    cb32:	930d      	str	r3, [sp, #52]	; 0x34
    cb34:	e01a      	b.n	cb6c <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    cb36:	9b07      	ldr	r3, [sp, #28]
    cb38:	2b00      	cmp	r3, #0
    cb3a:	db0f      	blt.n	cb5c <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    cb3c:	9b07      	ldr	r3, [sp, #28]
    cb3e:	f1c3 0317 	rsb	r3, r3, #23
    cb42:	9a06      	ldr	r2, [sp, #24]
    cb44:	fa42 f303 	asr.w	r3, r2, r3
    cb48:	930d      	str	r3, [sp, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    cb4a:	9b07      	ldr	r3, [sp, #28]
    cb4c:	3301      	adds	r3, #1
    cb4e:	9a06      	ldr	r2, [sp, #24]
    cb50:	fa02 f303 	lsl.w	r3, r2, r3
    cb54:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cb58:	930c      	str	r3, [sp, #48]	; 0x30
    cb5a:	e007      	b.n	cb6c <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    cb5c:	9b06      	ldr	r3, [sp, #24]
    cb5e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    cb62:	9b07      	ldr	r3, [sp, #28]
    cb64:	43db      	mvns	r3, r3
    cb66:	fa42 f303 	asr.w	r3, r2, r3
    cb6a:	930c      	str	r3, [sp, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    cb6c:	9b04      	ldr	r3, [sp, #16]
    cb6e:	2b00      	cmp	r3, #0
    cb70:	da04      	bge.n	cb7c <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    cb72:	9b02      	ldr	r3, [sp, #8]
    cb74:	1c5a      	adds	r2, r3, #1
    cb76:	9202      	str	r2, [sp, #8]
    cb78:	222d      	movs	r2, #45	; 0x2d
    cb7a:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    cb7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cb7e:	2b00      	cmp	r3, #0
    cb80:	d105      	bne.n	cb8e <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    cb82:	9b02      	ldr	r3, [sp, #8]
    cb84:	1c5a      	adds	r2, r3, #1
    cb86:	9202      	str	r2, [sp, #8]
    cb88:	2230      	movs	r2, #48	; 0x30
    cb8a:	701a      	strb	r2, [r3, #0]
    cb8c:	e023      	b.n	cbd6 <ftoa+0x12a>
    }
    else
    {
        if (i32IntPart > 0)
    cb8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cb90:	2b00      	cmp	r3, #0
    cb92:	dd09      	ble.n	cba8 <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
    cb94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cb96:	17da      	asrs	r2, r3, #31
    cb98:	461e      	mov	r6, r3
    cb9a:	4617      	mov	r7, r2
    cb9c:	9a02      	ldr	r2, [sp, #8]
    cb9e:	4630      	mov	r0, r6
    cba0:	4639      	mov	r1, r7
    cba2:	f7ff fea5 	bl	c8f0 <uint64_to_str>
    cba6:	e012      	b.n	cbce <ftoa+0x122>
        }
        else
        {
            *pcBuf++ = '-';
    cba8:	9b02      	ldr	r3, [sp, #8]
    cbaa:	1c5a      	adds	r2, r3, #1
    cbac:	9202      	str	r2, [sp, #8]
    cbae:	222d      	movs	r2, #45	; 0x2d
    cbb0:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    cbb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cbb4:	425b      	negs	r3, r3
    cbb6:	17da      	asrs	r2, r3, #31
    cbb8:	461c      	mov	r4, r3
    cbba:	4615      	mov	r5, r2
    cbbc:	9a02      	ldr	r2, [sp, #8]
    cbbe:	4620      	mov	r0, r4
    cbc0:	4629      	mov	r1, r5
    cbc2:	f7ff fe95 	bl	c8f0 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    cbc6:	e002      	b.n	cbce <ftoa+0x122>
        {
            pcBuf++;
    cbc8:	9b02      	ldr	r3, [sp, #8]
    cbca:	3301      	adds	r3, #1
    cbcc:	9302      	str	r3, [sp, #8]
        while (*pcBuf)    // Get to end of new string
    cbce:	9b02      	ldr	r3, [sp, #8]
    cbd0:	781b      	ldrb	r3, [r3, #0]
    cbd2:	2b00      	cmp	r3, #0
    cbd4:	d1f8      	bne.n	cbc8 <ftoa+0x11c>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    cbd6:	9b02      	ldr	r3, [sp, #8]
    cbd8:	1c5a      	adds	r2, r3, #1
    cbda:	9202      	str	r2, [sp, #8]
    cbdc:	222e      	movs	r2, #46	; 0x2e
    cbde:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    cbe0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cbe2:	2b00      	cmp	r3, #0
    cbe4:	d105      	bne.n	cbf2 <ftoa+0x146>
    {
        *pcBuf++ = '0';
    cbe6:	9b02      	ldr	r3, [sp, #8]
    cbe8:	1c5a      	adds	r2, r3, #1
    cbea:	9202      	str	r2, [sp, #8]
    cbec:	2230      	movs	r2, #48	; 0x30
    cbee:	701a      	strb	r2, [r3, #0]
    cbf0:	e04f      	b.n	cc92 <ftoa+0x1e6>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    cbf2:	9a02      	ldr	r2, [sp, #8]
    cbf4:	9b08      	ldr	r3, [sp, #32]
    cbf6:	1ad3      	subs	r3, r2, r3
    cbf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    cbfa:	1ad3      	subs	r3, r2, r3
    cbfc:	3b01      	subs	r3, #1
    cbfe:	9305      	str	r3, [sp, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    cc00:	9a05      	ldr	r2, [sp, #20]
    cc02:	9b01      	ldr	r3, [sp, #4]
    cc04:	4293      	cmp	r3, r2
    cc06:	bfa8      	it	ge
    cc08:	4613      	movge	r3, r2
    cc0a:	9305      	str	r3, [sp, #20]

        for (jx = 0; jx < iMax; jx++)
    cc0c:	2300      	movs	r3, #0
    cc0e:	930a      	str	r3, [sp, #40]	; 0x28
    cc10:	e015      	b.n	cc3e <ftoa+0x192>
        {
            i32FracPart *= 10;
    cc12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cc14:	4613      	mov	r3, r2
    cc16:	009b      	lsls	r3, r3, #2
    cc18:	4413      	add	r3, r2
    cc1a:	005b      	lsls	r3, r3, #1
    cc1c:	930c      	str	r3, [sp, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    cc1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cc20:	161b      	asrs	r3, r3, #24
    cc22:	b2da      	uxtb	r2, r3
    cc24:	9b02      	ldr	r3, [sp, #8]
    cc26:	1c59      	adds	r1, r3, #1
    cc28:	9102      	str	r1, [sp, #8]
    cc2a:	3230      	adds	r2, #48	; 0x30
    cc2c:	b2d2      	uxtb	r2, r2
    cc2e:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    cc30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cc32:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cc36:	930c      	str	r3, [sp, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    cc38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cc3a:	3301      	adds	r3, #1
    cc3c:	930a      	str	r3, [sp, #40]	; 0x28
    cc3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    cc40:	9b05      	ldr	r3, [sp, #20]
    cc42:	429a      	cmp	r2, r3
    cc44:	dbe5      	blt.n	cc12 <ftoa+0x166>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    cc46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cc48:	4613      	mov	r3, r2
    cc4a:	009b      	lsls	r3, r3, #2
    cc4c:	4413      	add	r3, r2
    cc4e:	005b      	lsls	r3, r3, #1
    cc50:	161b      	asrs	r3, r3, #24
    cc52:	2b04      	cmp	r3, #4
    cc54:	dd1d      	ble.n	cc92 <ftoa+0x1e6>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    cc56:	9b02      	ldr	r3, [sp, #8]
    cc58:	3b01      	subs	r3, #1
    cc5a:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cc5c:	e015      	b.n	cc8a <ftoa+0x1de>
            {
                if ( *pcBuftmp == '.' )
    cc5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cc60:	781b      	ldrb	r3, [r3, #0]
    cc62:	2b2e      	cmp	r3, #46	; 0x2e
    cc64:	d00e      	beq.n	cc84 <ftoa+0x1d8>
                {
                }
                else if ( *pcBuftmp == '9' )
    cc66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cc68:	781b      	ldrb	r3, [r3, #0]
    cc6a:	2b39      	cmp	r3, #57	; 0x39
    cc6c:	d103      	bne.n	cc76 <ftoa+0x1ca>
                {
                    *pcBuftmp = '0';
    cc6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cc70:	2230      	movs	r2, #48	; 0x30
    cc72:	701a      	strb	r2, [r3, #0]
    cc74:	e006      	b.n	cc84 <ftoa+0x1d8>
                }
                else
                {
                    *pcBuftmp += 1;
    cc76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cc78:	781b      	ldrb	r3, [r3, #0]
    cc7a:	3301      	adds	r3, #1
    cc7c:	b2da      	uxtb	r2, r3
    cc7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cc80:	701a      	strb	r2, [r3, #0]
                    break;
    cc82:	e006      	b.n	cc92 <ftoa+0x1e6>
                }
                pcBuftmp--;
    cc84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cc86:	3b01      	subs	r3, #1
    cc88:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cc8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cc8c:	9b08      	ldr	r3, [sp, #32]
    cc8e:	429a      	cmp	r2, r3
    cc90:	d2e5      	bcs.n	cc5e <ftoa+0x1b2>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    cc92:	9b02      	ldr	r3, [sp, #8]
    cc94:	2200      	movs	r2, #0
    cc96:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    cc98:	9a02      	ldr	r2, [sp, #8]
    cc9a:	9b08      	ldr	r3, [sp, #32]
    cc9c:	1ad3      	subs	r3, r2, r3
} // ftoa()
    cc9e:	4618      	mov	r0, r3
    cca0:	b00f      	add	sp, #60	; 0x3c
    cca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cca4:	00302e30 	.word	0x00302e30

0000cca8 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    cca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ccac:	b097      	sub	sp, #92	; 0x5c
    ccae:	9003      	str	r0, [sp, #12]
    ccb0:	9102      	str	r1, [sp, #8]
    ccb2:	9201      	str	r2, [sp, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    ccb4:	2300      	movs	r3, #0
    ccb6:	9311      	str	r3, [sp, #68]	; 0x44
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    ccb8:	2300      	movs	r3, #0
    ccba:	930b      	str	r3, [sp, #44]	; 0x2c

    while ( *pcFmt != 0x0 )
    ccbc:	e2e9      	b.n	d292 <am_util_stdio_vsprintf+0x5ea>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    ccbe:	2306      	movs	r3, #6
    ccc0:	930e      	str	r3, [sp, #56]	; 0x38

        if ( *pcFmt != '%' )
    ccc2:	9b02      	ldr	r3, [sp, #8]
    ccc4:	781b      	ldrb	r3, [r3, #0]
    ccc6:	2b25      	cmp	r3, #37	; 0x25
    ccc8:	d01f      	beq.n	cd0a <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    ccca:	9b03      	ldr	r3, [sp, #12]
    cccc:	2b00      	cmp	r3, #0
    ccce:	d015      	beq.n	ccfc <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    ccd0:	9b02      	ldr	r3, [sp, #8]
    ccd2:	781b      	ldrb	r3, [r3, #0]
    ccd4:	2b0a      	cmp	r3, #10
    ccd6:	d10b      	bne.n	ccf0 <am_util_stdio_vsprintf+0x48>
    ccd8:	4ba8      	ldr	r3, [pc, #672]	; (cf7c <am_util_stdio_vsprintf+0x2d4>)
    ccda:	781b      	ldrb	r3, [r3, #0]
    ccdc:	2b00      	cmp	r3, #0
    ccde:	d007      	beq.n	ccf0 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    cce0:	9b03      	ldr	r3, [sp, #12]
    cce2:	1c5a      	adds	r2, r3, #1
    cce4:	9203      	str	r2, [sp, #12]
    cce6:	220d      	movs	r2, #13
    cce8:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    ccea:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ccec:	3301      	adds	r3, #1
    ccee:	9311      	str	r3, [sp, #68]	; 0x44
                }
                *pcBuf++ = *pcFmt;
    ccf0:	9b03      	ldr	r3, [sp, #12]
    ccf2:	1c5a      	adds	r2, r3, #1
    ccf4:	9203      	str	r2, [sp, #12]
    ccf6:	9a02      	ldr	r2, [sp, #8]
    ccf8:	7812      	ldrb	r2, [r2, #0]
    ccfa:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    ccfc:	9b02      	ldr	r3, [sp, #8]
    ccfe:	3301      	adds	r3, #1
    cd00:	9302      	str	r3, [sp, #8]
            ++ui32CharCnt;
    cd02:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cd04:	3301      	adds	r3, #1
    cd06:	9311      	str	r3, [sp, #68]	; 0x44
            continue;
    cd08:	e2c3      	b.n	d292 <am_util_stdio_vsprintf+0x5ea>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    cd0a:	9b02      	ldr	r3, [sp, #8]
    cd0c:	3301      	adds	r3, #1
    cd0e:	9302      	str	r3, [sp, #8]
        bLower = bLongLong = false;
    cd10:	2300      	movs	r3, #0
    cd12:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    cd16:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    cd1a:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    cd1e:	2320      	movs	r3, #32
    cd20:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

        if ( *pcFmt == '0' )
    cd24:	9b02      	ldr	r3, [sp, #8]
    cd26:	781b      	ldrb	r3, [r3, #0]
    cd28:	2b30      	cmp	r3, #48	; 0x30
    cd2a:	d105      	bne.n	cd38 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    cd2c:	2330      	movs	r3, #48	; 0x30
    cd2e:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
            ++pcFmt;
    cd32:	9b02      	ldr	r3, [sp, #8]
    cd34:	3301      	adds	r3, #1
    cd36:	9302      	str	r3, [sp, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    cd38:	ab05      	add	r3, sp, #20
    cd3a:	4619      	mov	r1, r3
    cd3c:	9802      	ldr	r0, [sp, #8]
    cd3e:	f7ff fd93 	bl	c868 <decstr_to_int>
    cd42:	4603      	mov	r3, r0
    cd44:	9310      	str	r3, [sp, #64]	; 0x40
        pcFmt += ui32NumChars;
    cd46:	9b05      	ldr	r3, [sp, #20]
    cd48:	9a02      	ldr	r2, [sp, #8]
    cd4a:	4413      	add	r3, r2
    cd4c:	9302      	str	r3, [sp, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    cd4e:	9b02      	ldr	r3, [sp, #8]
    cd50:	781b      	ldrb	r3, [r3, #0]
    cd52:	2b73      	cmp	r3, #115	; 0x73
    cd54:	d005      	beq.n	cd62 <am_util_stdio_vsprintf+0xba>
    cd56:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cd58:	2b00      	cmp	r3, #0
    cd5a:	da02      	bge.n	cd62 <am_util_stdio_vsprintf+0xba>
        {
            iWidth = -iWidth;
    cd5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cd5e:	425b      	negs	r3, r3
    cd60:	9310      	str	r3, [sp, #64]	; 0x40
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    cd62:	9b02      	ldr	r3, [sp, #8]
    cd64:	781b      	ldrb	r3, [r3, #0]
    cd66:	2b2e      	cmp	r3, #46	; 0x2e
    cd68:	d10d      	bne.n	cd86 <am_util_stdio_vsprintf+0xde>
        {
            ++pcFmt;
    cd6a:	9b02      	ldr	r3, [sp, #8]
    cd6c:	3301      	adds	r3, #1
    cd6e:	9302      	str	r3, [sp, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    cd70:	ab05      	add	r3, sp, #20
    cd72:	4619      	mov	r1, r3
    cd74:	9802      	ldr	r0, [sp, #8]
    cd76:	f7ff fd77 	bl	c868 <decstr_to_int>
    cd7a:	4603      	mov	r3, r0
    cd7c:	930e      	str	r3, [sp, #56]	; 0x38
            pcFmt += ui32NumChars;
    cd7e:	9b05      	ldr	r3, [sp, #20]
    cd80:	9a02      	ldr	r2, [sp, #8]
    cd82:	4413      	add	r3, r2
    cd84:	9302      	str	r3, [sp, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    cd86:	9b02      	ldr	r3, [sp, #8]
    cd88:	781b      	ldrb	r3, [r3, #0]
    cd8a:	2b6c      	cmp	r3, #108	; 0x6c
    cd8c:	d10c      	bne.n	cda8 <am_util_stdio_vsprintf+0x100>
        {
            pcFmt++;
    cd8e:	9b02      	ldr	r3, [sp, #8]
    cd90:	3301      	adds	r3, #1
    cd92:	9302      	str	r3, [sp, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    cd94:	9b02      	ldr	r3, [sp, #8]
    cd96:	781b      	ldrb	r3, [r3, #0]
    cd98:	2b6c      	cmp	r3, #108	; 0x6c
    cd9a:	d105      	bne.n	cda8 <am_util_stdio_vsprintf+0x100>
            {
                pcFmt++;
    cd9c:	9b02      	ldr	r3, [sp, #8]
    cd9e:	3301      	adds	r3, #1
    cda0:	9302      	str	r3, [sp, #8]
                bLongLong = true;
    cda2:	2301      	movs	r3, #1
    cda4:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
            }
        }

        switch ( *pcFmt )
    cda8:	9b02      	ldr	r3, [sp, #8]
    cdaa:	781b      	ldrb	r3, [r3, #0]
    cdac:	3b46      	subs	r3, #70	; 0x46
    cdae:	2b32      	cmp	r3, #50	; 0x32
    cdb0:	f200 825c 	bhi.w	d26c <am_util_stdio_vsprintf+0x5c4>
    cdb4:	a201      	add	r2, pc, #4	; (adr r2, cdbc <am_util_stdio_vsprintf+0x114>)
    cdb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cdba:	bf00      	nop
    cdbc:	0000d1f3 	.word	0x0000d1f3
    cdc0:	0000d26d 	.word	0x0000d26d
    cdc4:	0000d26d 	.word	0x0000d26d
    cdc8:	0000d26d 	.word	0x0000d26d
    cdcc:	0000d26d 	.word	0x0000d26d
    cdd0:	0000d26d 	.word	0x0000d26d
    cdd4:	0000d26d 	.word	0x0000d26d
    cdd8:	0000d26d 	.word	0x0000d26d
    cddc:	0000d26d 	.word	0x0000d26d
    cde0:	0000d26d 	.word	0x0000d26d
    cde4:	0000d26d 	.word	0x0000d26d
    cde8:	0000d26d 	.word	0x0000d26d
    cdec:	0000d26d 	.word	0x0000d26d
    cdf0:	0000d26d 	.word	0x0000d26d
    cdf4:	0000d26d 	.word	0x0000d26d
    cdf8:	0000d26d 	.word	0x0000d26d
    cdfc:	0000d26d 	.word	0x0000d26d
    ce00:	0000d26d 	.word	0x0000d26d
    ce04:	0000cf87 	.word	0x0000cf87
    ce08:	0000d26d 	.word	0x0000d26d
    ce0c:	0000d26d 	.word	0x0000d26d
    ce10:	0000d26d 	.word	0x0000d26d
    ce14:	0000d26d 	.word	0x0000d26d
    ce18:	0000d26d 	.word	0x0000d26d
    ce1c:	0000d26d 	.word	0x0000d26d
    ce20:	0000d26d 	.word	0x0000d26d
    ce24:	0000d26d 	.word	0x0000d26d
    ce28:	0000d26d 	.word	0x0000d26d
    ce2c:	0000d26d 	.word	0x0000d26d
    ce30:	0000ce89 	.word	0x0000ce89
    ce34:	0000d0b7 	.word	0x0000d0b7
    ce38:	0000d26d 	.word	0x0000d26d
    ce3c:	0000d1f3 	.word	0x0000d1f3
    ce40:	0000d26d 	.word	0x0000d26d
    ce44:	0000d26d 	.word	0x0000d26d
    ce48:	0000d0b7 	.word	0x0000d0b7
    ce4c:	0000d26d 	.word	0x0000d26d
    ce50:	0000d26d 	.word	0x0000d26d
    ce54:	0000d26d 	.word	0x0000d26d
    ce58:	0000d26d 	.word	0x0000d26d
    ce5c:	0000d26d 	.word	0x0000d26d
    ce60:	0000d26d 	.word	0x0000d26d
    ce64:	0000d26d 	.word	0x0000d26d
    ce68:	0000d26d 	.word	0x0000d26d
    ce6c:	0000d26d 	.word	0x0000d26d
    ce70:	0000ceaf 	.word	0x0000ceaf
    ce74:	0000d26d 	.word	0x0000d26d
    ce78:	0000d021 	.word	0x0000d021
    ce7c:	0000d26d 	.word	0x0000d26d
    ce80:	0000d26d 	.word	0x0000d26d
    ce84:	0000cf81 	.word	0x0000cf81
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    ce88:	9b01      	ldr	r3, [sp, #4]
    ce8a:	1d1a      	adds	r2, r3, #4
    ce8c:	9201      	str	r2, [sp, #4]
    ce8e:	681b      	ldr	r3, [r3, #0]
    ce90:	f88d 301f 	strb.w	r3, [sp, #31]

                if ( pcBuf )
    ce94:	9b03      	ldr	r3, [sp, #12]
    ce96:	2b00      	cmp	r3, #0
    ce98:	d005      	beq.n	cea6 <am_util_stdio_vsprintf+0x1fe>
                {
                    *pcBuf++ = ui8CharSpecifier;
    ce9a:	9b03      	ldr	r3, [sp, #12]
    ce9c:	1c5a      	adds	r2, r3, #1
    ce9e:	9203      	str	r2, [sp, #12]
    cea0:	f89d 201f 	ldrb.w	r2, [sp, #31]
    cea4:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    cea6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cea8:	3301      	adds	r3, #1
    ceaa:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    ceac:	e1ee      	b.n	d28c <am_util_stdio_vsprintf+0x5e4>

            case 's':
                pcStr = va_arg(pArgs, char *);
    ceae:	9b01      	ldr	r3, [sp, #4]
    ceb0:	1d1a      	adds	r2, r3, #4
    ceb2:	9201      	str	r2, [sp, #4]
    ceb4:	681b      	ldr	r3, [r3, #0]
    ceb6:	9315      	str	r3, [sp, #84]	; 0x54
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    ceb8:	9815      	ldr	r0, [sp, #84]	; 0x54
    ceba:	f7ff fdbe 	bl	ca3a <simple_strlen>
    cebe:	900b      	str	r0, [sp, #44]	; 0x2c
                if ( iWidth > 0 )
    cec0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cec2:	2b00      	cmp	r3, #0
    cec4:	dd2e      	ble.n	cf24 <am_util_stdio_vsprintf+0x27c>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    cec6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cec8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ceca:	429a      	cmp	r2, r3
    cecc:	d22a      	bcs.n	cf24 <am_util_stdio_vsprintf+0x27c>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cece:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ced0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ced2:	1ad3      	subs	r3, r2, r3
    ced4:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    ced6:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    ceda:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cedc:	4619      	mov	r1, r3
    cede:	9803      	ldr	r0, [sp, #12]
    cee0:	f7ff fdc1 	bl	ca66 <padbuffer>
    cee4:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    cee6:	9b03      	ldr	r3, [sp, #12]
    cee8:	2b00      	cmp	r3, #0
    ceea:	d001      	beq.n	cef0 <am_util_stdio_vsprintf+0x248>
    ceec:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ceee:	e000      	b.n	cef2 <am_util_stdio_vsprintf+0x24a>
    cef0:	2300      	movs	r3, #0
    cef2:	9a03      	ldr	r2, [sp, #12]
    cef4:	4413      	add	r3, r2
    cef6:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    cef8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cefa:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cefc:	4413      	add	r3, r2
    cefe:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    cf00:	2300      	movs	r3, #0
    cf02:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }

                while (*pcStr != 0x0)
    cf04:	e00e      	b.n	cf24 <am_util_stdio_vsprintf+0x27c>
                {
                    if ( pcBuf )
    cf06:	9b03      	ldr	r3, [sp, #12]
    cf08:	2b00      	cmp	r3, #0
    cf0a:	d005      	beq.n	cf18 <am_util_stdio_vsprintf+0x270>
                    {
                        *pcBuf++ = *pcStr;
    cf0c:	9b03      	ldr	r3, [sp, #12]
    cf0e:	1c5a      	adds	r2, r3, #1
    cf10:	9203      	str	r2, [sp, #12]
    cf12:	9a15      	ldr	r2, [sp, #84]	; 0x54
    cf14:	7812      	ldrb	r2, [r2, #0]
    cf16:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    cf18:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cf1a:	3301      	adds	r3, #1
    cf1c:	9315      	str	r3, [sp, #84]	; 0x54
                    ++ui32CharCnt;
    cf1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cf20:	3301      	adds	r3, #1
    cf22:	9311      	str	r3, [sp, #68]	; 0x44
                while (*pcStr != 0x0)
    cf24:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cf26:	781b      	ldrb	r3, [r3, #0]
    cf28:	2b00      	cmp	r3, #0
    cf2a:	d1ec      	bne.n	cf06 <am_util_stdio_vsprintf+0x25e>
                }

                if ( iWidth )
    cf2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf2e:	2b00      	cmp	r3, #0
    cf30:	f000 81a9 	beq.w	d286 <am_util_stdio_vsprintf+0x5de>
                {
                    iWidth = -iWidth;
    cf34:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf36:	425b      	negs	r3, r3
    cf38:	9310      	str	r3, [sp, #64]	; 0x40

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    cf3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cf3e:	429a      	cmp	r2, r3
    cf40:	f080 81a1 	bcs.w	d286 <am_util_stdio_vsprintf+0x5de>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cf44:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cf46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cf48:	1ad3      	subs	r3, r2, r3
    cf4a:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cf4c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cf50:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cf52:	4619      	mov	r1, r3
    cf54:	9803      	ldr	r0, [sp, #12]
    cf56:	f7ff fd86 	bl	ca66 <padbuffer>
    cf5a:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    cf5c:	9b03      	ldr	r3, [sp, #12]
    cf5e:	2b00      	cmp	r3, #0
    cf60:	d001      	beq.n	cf66 <am_util_stdio_vsprintf+0x2be>
    cf62:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf64:	e000      	b.n	cf68 <am_util_stdio_vsprintf+0x2c0>
    cf66:	2300      	movs	r3, #0
    cf68:	9a03      	ldr	r2, [sp, #12]
    cf6a:	4413      	add	r3, r2
    cf6c:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    cf6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf70:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cf72:	4413      	add	r3, r2
    cf74:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    cf76:	2300      	movs	r3, #0
    cf78:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }
                break;
    cf7a:	e184      	b.n	d286 <am_util_stdio_vsprintf+0x5de>
    cf7c:	10001138 	.word	0x10001138

            case 'x':
                bLower = true;
    cf80:	2301      	movs	r3, #1
    cf82:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cf86:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    cf8a:	2b00      	cmp	r3, #0
    cf8c:	d009      	beq.n	cfa2 <am_util_stdio_vsprintf+0x2fa>
    cf8e:	9b01      	ldr	r3, [sp, #4]
    cf90:	3307      	adds	r3, #7
    cf92:	f023 0307 	bic.w	r3, r3, #7
    cf96:	f103 0208 	add.w	r2, r3, #8
    cf9a:	9201      	str	r2, [sp, #4]
    cf9c:	e9d3 4500 	ldrd	r4, r5, [r3]
    cfa0:	e006      	b.n	cfb0 <am_util_stdio_vsprintf+0x308>
                                      va_arg(pArgs, uint32_t);
    cfa2:	9b01      	ldr	r3, [sp, #4]
    cfa4:	1d1a      	adds	r2, r3, #4
    cfa6:	9201      	str	r2, [sp, #4]
    cfa8:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cfaa:	2200      	movs	r2, #0
    cfac:	461c      	mov	r4, r3
    cfae:	4615      	mov	r5, r2
    cfb0:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48

                if ( iWidth )
    cfb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfb6:	2b00      	cmp	r3, #0
    cfb8:	d01e      	beq.n	cff8 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    cfba:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    cfbe:	f7ff fc2f 	bl	c820 <ndigits_in_hex>
    cfc2:	4602      	mov	r2, r0
    cfc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfc6:	1a9b      	subs	r3, r3, r2
    cfc8:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cfca:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cfce:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cfd0:	4619      	mov	r1, r3
    cfd2:	9803      	ldr	r0, [sp, #12]
    cfd4:	f7ff fd47 	bl	ca66 <padbuffer>
    cfd8:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    cfda:	9b03      	ldr	r3, [sp, #12]
    cfdc:	2b00      	cmp	r3, #0
    cfde:	d001      	beq.n	cfe4 <am_util_stdio_vsprintf+0x33c>
    cfe0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfe2:	e000      	b.n	cfe6 <am_util_stdio_vsprintf+0x33e>
    cfe4:	2300      	movs	r3, #0
    cfe6:	9a03      	ldr	r2, [sp, #12]
    cfe8:	4413      	add	r3, r2
    cfea:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    cfec:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfee:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cff0:	4413      	add	r3, r2
    cff2:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    cff4:	2300      	movs	r3, #0
    cff6:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    cff8:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    cffc:	9a03      	ldr	r2, [sp, #12]
    cffe:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d002:	f7ff fcba 	bl	c97a <uint64_to_hexstr>
    d006:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d008:	9b03      	ldr	r3, [sp, #12]
    d00a:	2b00      	cmp	r3, #0
    d00c:	d003      	beq.n	d016 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    d00e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d010:	9a03      	ldr	r2, [sp, #12]
    d012:	4413      	add	r3, r2
    d014:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d016:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d018:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d01a:	4413      	add	r3, r2
    d01c:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d01e:	e135      	b.n	d28c <am_util_stdio_vsprintf+0x5e4>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d020:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d024:	2b00      	cmp	r3, #0
    d026:	d009      	beq.n	d03c <am_util_stdio_vsprintf+0x394>
    d028:	9b01      	ldr	r3, [sp, #4]
    d02a:	3307      	adds	r3, #7
    d02c:	f023 0307 	bic.w	r3, r3, #7
    d030:	f103 0208 	add.w	r2, r3, #8
    d034:	9201      	str	r2, [sp, #4]
    d036:	e9d3 6700 	ldrd	r6, r7, [r3]
    d03a:	e006      	b.n	d04a <am_util_stdio_vsprintf+0x3a2>
                                      va_arg(pArgs, uint32_t);
    d03c:	9b01      	ldr	r3, [sp, #4]
    d03e:	1d1a      	adds	r2, r3, #4
    d040:	9201      	str	r2, [sp, #4]
    d042:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d044:	2200      	movs	r2, #0
    d046:	461e      	mov	r6, r3
    d048:	4617      	mov	r7, r2
    d04a:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48

                if ( iWidth )
    d04e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d050:	2b00      	cmp	r3, #0
    d052:	d01e      	beq.n	d092 <am_util_stdio_vsprintf+0x3ea>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    d054:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d058:	f7ff fba8 	bl	c7ac <ndigits_in_u64>
    d05c:	4602      	mov	r2, r0
    d05e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d060:	1a9b      	subs	r3, r3, r2
    d062:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d064:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d068:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d06a:	4619      	mov	r1, r3
    d06c:	9803      	ldr	r0, [sp, #12]
    d06e:	f7ff fcfa 	bl	ca66 <padbuffer>
    d072:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d074:	9b03      	ldr	r3, [sp, #12]
    d076:	2b00      	cmp	r3, #0
    d078:	d001      	beq.n	d07e <am_util_stdio_vsprintf+0x3d6>
    d07a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d07c:	e000      	b.n	d080 <am_util_stdio_vsprintf+0x3d8>
    d07e:	2300      	movs	r3, #0
    d080:	9a03      	ldr	r2, [sp, #12]
    d082:	4413      	add	r3, r2
    d084:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d086:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d088:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d08a:	4413      	add	r3, r2
    d08c:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d08e:	2300      	movs	r3, #0
    d090:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d092:	9a03      	ldr	r2, [sp, #12]
    d094:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d098:	f7ff fc2a 	bl	c8f0 <uint64_to_str>
    d09c:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d09e:	9b03      	ldr	r3, [sp, #12]
    d0a0:	2b00      	cmp	r3, #0
    d0a2:	d003      	beq.n	d0ac <am_util_stdio_vsprintf+0x404>
                {
                    pcBuf += iVal;
    d0a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d0a6:	9a03      	ldr	r2, [sp, #12]
    d0a8:	4413      	add	r3, r2
    d0aa:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d0ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d0ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d0b0:	4413      	add	r3, r2
    d0b2:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d0b4:	e0ea      	b.n	d28c <am_util_stdio_vsprintf+0x5e4>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d0b6:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d0ba:	2b00      	cmp	r3, #0
    d0bc:	d009      	beq.n	d0d2 <am_util_stdio_vsprintf+0x42a>
    d0be:	9b01      	ldr	r3, [sp, #4]
    d0c0:	3307      	adds	r3, #7
    d0c2:	f023 0307 	bic.w	r3, r3, #7
    d0c6:	f103 0208 	add.w	r2, r3, #8
    d0ca:	9201      	str	r2, [sp, #4]
    d0cc:	e9d3 8900 	ldrd	r8, r9, [r3]
    d0d0:	e006      	b.n	d0e0 <am_util_stdio_vsprintf+0x438>
                                     va_arg(pArgs, int32_t);
    d0d2:	9b01      	ldr	r3, [sp, #4]
    d0d4:	1d1a      	adds	r2, r3, #4
    d0d6:	9201      	str	r2, [sp, #4]
    d0d8:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d0da:	17da      	asrs	r2, r3, #31
    d0dc:	4698      	mov	r8, r3
    d0de:	4691      	mov	r9, r2
    d0e0:	e9cd 8908 	strd	r8, r9, [sp, #32]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    d0e4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d0e8:	2b00      	cmp	r3, #0
    d0ea:	da0c      	bge.n	d106 <am_util_stdio_vsprintf+0x45e>
                {
                    ui64Val = -i64Val;          // Get absolute value
    d0ec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d0f0:	2100      	movs	r1, #0
    d0f2:	f1d2 0a00 	rsbs	sl, r2, #0
    d0f6:	eb61 0b03 	sbc.w	fp, r1, r3
    d0fa:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
                    bNeg = true;
    d0fe:	2301      	movs	r3, #1
    d100:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    d104:	e006      	b.n	d114 <am_util_stdio_vsprintf+0x46c>
                }
                else
                {
                    ui64Val = i64Val;
    d106:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d10a:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
                    bNeg = false;
    d10e:	2300      	movs	r3, #0
    d110:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                }

                if ( iWidth )
    d114:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d116:	2b00      	cmp	r3, #0
    d118:	d04a      	beq.n	d1b0 <am_util_stdio_vsprintf+0x508>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    d11a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    d11e:	4610      	mov	r0, r2
    d120:	4619      	mov	r1, r3
    d122:	f7ff fb63 	bl	c7ec <ndigits_in_i64>
    d126:	4602      	mov	r2, r0
    d128:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d12a:	1a9b      	subs	r3, r3, r2
    d12c:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg )
    d12e:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d132:	2b00      	cmp	r3, #0
    d134:	d011      	beq.n	d15a <am_util_stdio_vsprintf+0x4b2>
                    {
                        --iWidth;
    d136:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d138:	3b01      	subs	r3, #1
    d13a:	9310      	str	r3, [sp, #64]	; 0x40

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    d13c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d140:	2b30      	cmp	r3, #48	; 0x30
    d142:	d10a      	bne.n	d15a <am_util_stdio_vsprintf+0x4b2>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    d144:	9b03      	ldr	r3, [sp, #12]
    d146:	2b00      	cmp	r3, #0
    d148:	d004      	beq.n	d154 <am_util_stdio_vsprintf+0x4ac>
                            {
                                *pcBuf++ = '-';
    d14a:	9b03      	ldr	r3, [sp, #12]
    d14c:	1c5a      	adds	r2, r3, #1
    d14e:	9203      	str	r2, [sp, #12]
    d150:	222d      	movs	r2, #45	; 0x2d
    d152:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    d154:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d156:	3301      	adds	r3, #1
    d158:	9311      	str	r3, [sp, #68]	; 0x44
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d15a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d15e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d160:	4619      	mov	r1, r3
    d162:	9803      	ldr	r0, [sp, #12]
    d164:	f7ff fc7f 	bl	ca66 <padbuffer>
    d168:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d16a:	9b03      	ldr	r3, [sp, #12]
    d16c:	2b00      	cmp	r3, #0
    d16e:	d001      	beq.n	d174 <am_util_stdio_vsprintf+0x4cc>
    d170:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d172:	e000      	b.n	d176 <am_util_stdio_vsprintf+0x4ce>
    d174:	2300      	movs	r3, #0
    d176:	9a03      	ldr	r2, [sp, #12]
    d178:	4413      	add	r3, r2
    d17a:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d17c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d17e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d180:	4413      	add	r3, r2
    d182:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d184:	2300      	movs	r3, #0
    d186:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d188:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d18c:	2b00      	cmp	r3, #0
    d18e:	d01e      	beq.n	d1ce <am_util_stdio_vsprintf+0x526>
    d190:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d194:	2b20      	cmp	r3, #32
    d196:	d11a      	bne.n	d1ce <am_util_stdio_vsprintf+0x526>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    d198:	9b03      	ldr	r3, [sp, #12]
    d19a:	2b00      	cmp	r3, #0
    d19c:	d004      	beq.n	d1a8 <am_util_stdio_vsprintf+0x500>
                        {
                            *pcBuf++ = '-';
    d19e:	9b03      	ldr	r3, [sp, #12]
    d1a0:	1c5a      	adds	r2, r3, #1
    d1a2:	9203      	str	r2, [sp, #12]
    d1a4:	222d      	movs	r2, #45	; 0x2d
    d1a6:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    d1a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d1aa:	3301      	adds	r3, #1
    d1ac:	9311      	str	r3, [sp, #68]	; 0x44
    d1ae:	e00e      	b.n	d1ce <am_util_stdio_vsprintf+0x526>
                    }
                }
                else
                {
                    if ( bNeg )
    d1b0:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d1b4:	2b00      	cmp	r3, #0
    d1b6:	d00a      	beq.n	d1ce <am_util_stdio_vsprintf+0x526>
                    {
                        if ( pcBuf )
    d1b8:	9b03      	ldr	r3, [sp, #12]
    d1ba:	2b00      	cmp	r3, #0
    d1bc:	d004      	beq.n	d1c8 <am_util_stdio_vsprintf+0x520>
                        {
                            *pcBuf++ = '-';
    d1be:	9b03      	ldr	r3, [sp, #12]
    d1c0:	1c5a      	adds	r2, r3, #1
    d1c2:	9203      	str	r2, [sp, #12]
    d1c4:	222d      	movs	r2, #45	; 0x2d
    d1c6:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    d1c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d1ca:	3301      	adds	r3, #1
    d1cc:	9311      	str	r3, [sp, #68]	; 0x44
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d1ce:	9a03      	ldr	r2, [sp, #12]
    d1d0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d1d4:	f7ff fb8c 	bl	c8f0 <uint64_to_str>
    d1d8:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d1da:	9b03      	ldr	r3, [sp, #12]
    d1dc:	2b00      	cmp	r3, #0
    d1de:	d003      	beq.n	d1e8 <am_util_stdio_vsprintf+0x540>
                {
                    pcBuf += iVal;
    d1e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d1e2:	9a03      	ldr	r2, [sp, #12]
    d1e4:	4413      	add	r3, r2
    d1e6:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d1e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d1ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d1ec:	4413      	add	r3, r2
    d1ee:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d1f0:	e04c      	b.n	d28c <am_util_stdio_vsprintf+0x5e4>


            case 'f':
            case 'F':
                if ( pcBuf )
    d1f2:	9b03      	ldr	r3, [sp, #12]
    d1f4:	2b00      	cmp	r3, #0
    d1f6:	d048      	beq.n	d28a <am_util_stdio_vsprintf+0x5e2>
                {
                    float fValue = va_arg(pArgs, double);
    d1f8:	9b01      	ldr	r3, [sp, #4]
    d1fa:	3307      	adds	r3, #7
    d1fc:	f023 0307 	bic.w	r3, r3, #7
    d200:	f103 0208 	add.w	r2, r3, #8
    d204:	9201      	str	r2, [sp, #4]
    d206:	e9d3 2300 	ldrd	r2, r3, [r3]
    d20a:	4610      	mov	r0, r2
    d20c:	4619      	mov	r1, r3
    d20e:	f7fe ff77 	bl	c100 <__aeabi_d2f>
    d212:	4603      	mov	r3, r0
    d214:	9306      	str	r3, [sp, #24]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    d216:	9b03      	ldr	r3, [sp, #12]
    d218:	2214      	movs	r2, #20
    d21a:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    d21c:	990e      	ldr	r1, [sp, #56]	; 0x38
    d21e:	9803      	ldr	r0, [sp, #12]
    d220:	ed9d 0a06 	vldr	s0, [sp, #24]
    d224:	f7ff fc42 	bl	caac <ftoa>
    d228:	900f      	str	r0, [sp, #60]	; 0x3c
                    if ( iVal < 0 )
    d22a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d22c:	2b00      	cmp	r3, #0
    d22e:	da14      	bge.n	d25a <am_util_stdio_vsprintf+0x5b2>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d230:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d232:	f1b3 3fff 	cmp.w	r3, #4294967295
    d236:	d102      	bne.n	d23e <am_util_stdio_vsprintf+0x596>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d238:	4b1e      	ldr	r3, [pc, #120]	; (d2b4 <am_util_stdio_vsprintf+0x60c>)
    d23a:	930c      	str	r3, [sp, #48]	; 0x30
    d23c:	e008      	b.n	d250 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d23e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d240:	f113 0f02 	cmn.w	r3, #2
    d244:	d102      	bne.n	d24c <am_util_stdio_vsprintf+0x5a4>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d246:	4b1c      	ldr	r3, [pc, #112]	; (d2b8 <am_util_stdio_vsprintf+0x610>)
    d248:	930c      	str	r3, [sp, #48]	; 0x30
    d24a:	e001      	b.n	d250 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d24c:	4b1b      	ldr	r3, [pc, #108]	; (d2bc <am_util_stdio_vsprintf+0x614>)
    d24e:	930c      	str	r3, [sp, #48]	; 0x30
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d250:	9b03      	ldr	r3, [sp, #12]
    d252:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d254:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    d256:	2303      	movs	r3, #3
    d258:	930f      	str	r3, [sp, #60]	; 0x3c
                    }
                    ui32CharCnt += iVal;
    d25a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d25c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d25e:	4413      	add	r3, r2
    d260:	9311      	str	r3, [sp, #68]	; 0x44
                    pcBuf += iVal;
    d262:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d264:	9a03      	ldr	r2, [sp, #12]
    d266:	4413      	add	r3, r2
    d268:	9303      	str	r3, [sp, #12]
                }
                break;
    d26a:	e00e      	b.n	d28a <am_util_stdio_vsprintf+0x5e2>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d26c:	9b03      	ldr	r3, [sp, #12]
    d26e:	2b00      	cmp	r3, #0
    d270:	d005      	beq.n	d27e <am_util_stdio_vsprintf+0x5d6>
                {
                    *pcBuf++ = *pcFmt;
    d272:	9b03      	ldr	r3, [sp, #12]
    d274:	1c5a      	adds	r2, r3, #1
    d276:	9203      	str	r2, [sp, #12]
    d278:	9a02      	ldr	r2, [sp, #8]
    d27a:	7812      	ldrb	r2, [r2, #0]
    d27c:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d27e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d280:	3301      	adds	r3, #1
    d282:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d284:	e002      	b.n	d28c <am_util_stdio_vsprintf+0x5e4>
                break;
    d286:	bf00      	nop
    d288:	e000      	b.n	d28c <am_util_stdio_vsprintf+0x5e4>
                break;
    d28a:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d28c:	9b02      	ldr	r3, [sp, #8]
    d28e:	3301      	adds	r3, #1
    d290:	9302      	str	r3, [sp, #8]
    while ( *pcFmt != 0x0 )
    d292:	9b02      	ldr	r3, [sp, #8]
    d294:	781b      	ldrb	r3, [r3, #0]
    d296:	2b00      	cmp	r3, #0
    d298:	f47f ad11 	bne.w	ccbe <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d29c:	9b03      	ldr	r3, [sp, #12]
    d29e:	2b00      	cmp	r3, #0
    d2a0:	d002      	beq.n	d2a8 <am_util_stdio_vsprintf+0x600>
    {
        *pcBuf = 0x0;
    d2a2:	9b03      	ldr	r3, [sp, #12]
    d2a4:	2200      	movs	r2, #0
    d2a6:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d2a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    d2aa:	4618      	mov	r0, r3
    d2ac:	b017      	add	sp, #92	; 0x5c
    d2ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d2b2:	bf00      	nop
    d2b4:	00302e30 	.word	0x00302e30
    d2b8:	00232e23 	.word	0x00232e23
    d2bc:	003f2e3f 	.word	0x003f2e3f

0000d2c0 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d2c0:	b40f      	push	{r0, r1, r2, r3}
    d2c2:	b500      	push	{lr}
    d2c4:	b083      	sub	sp, #12
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d2c6:	4b0c      	ldr	r3, [pc, #48]	; (d2f8 <am_util_stdio_printf+0x38>)
    d2c8:	681b      	ldr	r3, [r3, #0]
    d2ca:	2b00      	cmp	r3, #0
    d2cc:	d101      	bne.n	d2d2 <am_util_stdio_printf+0x12>
    {
        return 0;
    d2ce:	2300      	movs	r3, #0
    d2d0:	e00c      	b.n	d2ec <am_util_stdio_printf+0x2c>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d2d2:	ab05      	add	r3, sp, #20
    d2d4:	9300      	str	r3, [sp, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d2d6:	9a00      	ldr	r2, [sp, #0]
    d2d8:	9904      	ldr	r1, [sp, #16]
    d2da:	4808      	ldr	r0, [pc, #32]	; (d2fc <am_util_stdio_printf+0x3c>)
    d2dc:	f7ff fce4 	bl	cca8 <am_util_stdio_vsprintf>
    d2e0:	9001      	str	r0, [sp, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d2e2:	4b05      	ldr	r3, [pc, #20]	; (d2f8 <am_util_stdio_printf+0x38>)
    d2e4:	681b      	ldr	r3, [r3, #0]
    d2e6:	4805      	ldr	r0, [pc, #20]	; (d2fc <am_util_stdio_printf+0x3c>)
    d2e8:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d2ea:	9b01      	ldr	r3, [sp, #4]
}
    d2ec:	4618      	mov	r0, r3
    d2ee:	b003      	add	sp, #12
    d2f0:	f85d eb04 	ldr.w	lr, [sp], #4
    d2f4:	b004      	add	sp, #16
    d2f6:	4770      	bx	lr
    d2f8:	10001034 	.word	0x10001034
    d2fc:	10001038 	.word	0x10001038

0000d300 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    d300:	b508      	push	{r3, lr}
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d302:	4802      	ldr	r0, [pc, #8]	; (d30c <am_util_stdio_terminal_clear+0xc>)
    d304:	f7ff ffdc 	bl	d2c0 <am_util_stdio_printf>
}
    d308:	bf00      	nop
    d30a:	bd08      	pop	{r3, pc}
    d30c:	0000ea40 	.word	0x0000ea40

0000d310 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    d310:	4811      	ldr	r0, [pc, #68]	; (d358 <zero_loop+0x12>)
    d312:	4912      	ldr	r1, [pc, #72]	; (d35c <zero_loop+0x16>)
    d314:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    d316:	f8d1 d000 	ldr.w	sp, [r1]

#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    d31a:	4811      	ldr	r0, [pc, #68]	; (d360 <zero_loop+0x1a>)
    d31c:	6801      	ldr	r1, [r0, #0]
    d31e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d322:	6001      	str	r1, [r0, #0]
    d324:	f3bf 8f4f 	dsb	sy
    d328:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    d32c:	480d      	ldr	r0, [pc, #52]	; (d364 <zero_loop+0x1e>)
    d32e:	490e      	ldr	r1, [pc, #56]	; (d368 <zero_loop+0x22>)
    d330:	4a0e      	ldr	r2, [pc, #56]	; (d36c <zero_loop+0x26>)

0000d332 <copy_loop>:
    d332:	f850 3b04 	ldr.w	r3, [r0], #4
    d336:	f841 3b04 	str.w	r3, [r1], #4
    d33a:	4291      	cmp	r1, r2
    d33c:	dbf9      	blt.n	d332 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    d33e:	480c      	ldr	r0, [pc, #48]	; (d370 <zero_loop+0x2a>)
    d340:	490c      	ldr	r1, [pc, #48]	; (d374 <zero_loop+0x2e>)
    d342:	f04f 0200 	mov.w	r2, #0

0000d346 <zero_loop>:
    d346:	4288      	cmp	r0, r1
    d348:	bfb8      	it	lt
    d34a:	f840 2b04 	strlt.w	r2, [r0], #4
    d34e:	dbfa      	blt.n	d346 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    d350:	f7fe ff34 	bl	c1bc <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    d354:	be00      	bkpt	0x0000
}
    d356:	bf00      	nop
    d358:	e000ed08 	.word	0xe000ed08
    d35c:	0000c000 	.word	0x0000c000
    d360:	e000ed88 	.word	0xe000ed88
    d364:	0000ecfc 	.word	0x0000ecfc
    d368:	10001000 	.word	0x10001000
    d36c:	10001034 	.word	0x10001034
    d370:	10001034 	.word	0x10001034
    d374:	1000114c 	.word	0x1000114c

0000d378 <NMI_Handler>:
NMI_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d378:	e7fe      	b.n	d378 <NMI_Handler>

0000d37a <BusFault_Handler>:
HardFault_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d37a:	e7fe      	b.n	d37a <BusFault_Handler>

0000d37c <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d37c:	e7fe      	b.n	d37c <DebugMon_Handler>
	...

0000d380 <am_bsp_low_power_init>:
    d380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d382:	f000 fef1 	bl	e168 <am_hal_pwrctrl_low_power_init>
    d386:	f000 ffcd 	bl	e324 <am_hal_rtc_osc_disable>
    d38a:	4b0b      	ldr	r3, [pc, #44]	; (d3b8 <am_bsp_low_power_init+0x38>)
    d38c:	4f0b      	ldr	r7, [pc, #44]	; (d3bc <am_bsp_low_power_init+0x3c>)
    d38e:	681e      	ldr	r6, [r3, #0]
    d390:	2400      	movs	r4, #0
    d392:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    d396:	4631      	mov	r1, r6
    d398:	4628      	mov	r0, r5
    d39a:	f000 fb19 	bl	d9d0 <am_hal_gpio_pinconfig>
    d39e:	2103      	movs	r1, #3
    d3a0:	4628      	mov	r0, r5
    d3a2:	f000 fc4b 	bl	dc3c <am_hal_gpio_state_write>
    d3a6:	3401      	adds	r4, #1
    d3a8:	2100      	movs	r1, #0
    d3aa:	4628      	mov	r0, r5
    d3ac:	f000 fc46 	bl	dc3c <am_hal_gpio_state_write>
    d3b0:	2c05      	cmp	r4, #5
    d3b2:	d1ee      	bne.n	d392 <am_bsp_low_power_init+0x12>
    d3b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d3b6:	bf00      	nop
    d3b8:	0000ea60 	.word	0x0000ea60
    d3bc:	10001000 	.word	0x10001000

0000d3c0 <am_bsp_debug_printf_disable>:
    d3c0:	b538      	push	{r3, r4, r5, lr}
    d3c2:	4b17      	ldr	r3, [pc, #92]	; (d420 <am_bsp_debug_printf_disable+0x60>)
    d3c4:	681c      	ldr	r4, [r3, #0]
    d3c6:	2c01      	cmp	r4, #1
    d3c8:	d002      	beq.n	d3d0 <am_bsp_debug_printf_disable+0x10>
    d3ca:	2c02      	cmp	r4, #2
    d3cc:	d00c      	beq.n	d3e8 <am_bsp_debug_printf_disable+0x28>
    d3ce:	bd38      	pop	{r3, r4, r5, pc}
    d3d0:	f000 fca4 	bl	dd1c <am_hal_itm_disable>
    d3d4:	2000      	movs	r0, #0
    d3d6:	f7ff f8eb 	bl	c5b0 <am_util_stdio_printf_init>
    d3da:	4b12      	ldr	r3, [pc, #72]	; (d424 <am_bsp_debug_printf_disable+0x64>)
    d3dc:	2029      	movs	r0, #41	; 0x29
    d3de:	6819      	ldr	r1, [r3, #0]
    d3e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d3e4:	f000 baf4 	b.w	d9d0 <am_hal_gpio_pinconfig>
    d3e8:	4d0f      	ldr	r5, [pc, #60]	; (d428 <am_bsp_debug_printf_disable+0x68>)
    d3ea:	6828      	ldr	r0, [r5, #0]
    d3ec:	f001 f8b8 	bl	e560 <am_hal_uart_tx_flush>
    d3f0:	2000      	movs	r0, #0
    d3f2:	f7ff f8dd 	bl	c5b0 <am_util_stdio_printf_init>
    d3f6:	4621      	mov	r1, r4
    d3f8:	2200      	movs	r2, #0
    d3fa:	6828      	ldr	r0, [r5, #0]
    d3fc:	f001 f838 	bl	e470 <am_hal_uart_power_control>
    d400:	6828      	ldr	r0, [r5, #0]
    d402:	f001 f821 	bl	e448 <am_hal_uart_deinitialize>
    d406:	4b07      	ldr	r3, [pc, #28]	; (d424 <am_bsp_debug_printf_disable+0x64>)
    d408:	681c      	ldr	r4, [r3, #0]
    d40a:	2016      	movs	r0, #22
    d40c:	4621      	mov	r1, r4
    d40e:	f000 fadf 	bl	d9d0 <am_hal_gpio_pinconfig>
    d412:	4621      	mov	r1, r4
    d414:	2017      	movs	r0, #23
    d416:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d41a:	f000 bad9 	b.w	d9d0 <am_hal_gpio_pinconfig>
    d41e:	bf00      	nop
    d420:	10001140 	.word	0x10001140
    d424:	0000ea5c 	.word	0x0000ea5c
    d428:	1000113c 	.word	0x1000113c

0000d42c <am_bsp_itm_printf_enable>:
    d42c:	b500      	push	{lr}
    d42e:	4b0b      	ldr	r3, [pc, #44]	; (d45c <am_bsp_itm_printf_enable+0x30>)
    d430:	b087      	sub	sp, #28
    d432:	2201      	movs	r2, #1
    d434:	601a      	str	r2, [r3, #0]
    d436:	f000 fc4d 	bl	dcd4 <am_hal_itm_enable>
    d43a:	4b09      	ldr	r3, [pc, #36]	; (d460 <am_bsp_itm_printf_enable+0x34>)
    d43c:	9301      	str	r3, [sp, #4]
    d43e:	a801      	add	r0, sp, #4
    d440:	f000 ffb2 	bl	e3a8 <am_hal_tpiu_enable>
    d444:	4b07      	ldr	r3, [pc, #28]	; (d464 <am_bsp_itm_printf_enable+0x38>)
    d446:	2029      	movs	r0, #41	; 0x29
    d448:	6819      	ldr	r1, [r3, #0]
    d44a:	f000 fac1 	bl	d9d0 <am_hal_gpio_pinconfig>
    d44e:	4806      	ldr	r0, [pc, #24]	; (d468 <am_bsp_itm_printf_enable+0x3c>)
    d450:	f7ff f8ae 	bl	c5b0 <am_util_stdio_printf_init>
    d454:	b007      	add	sp, #28
    d456:	f85d fb04 	ldr.w	pc, [sp], #4
    d45a:	bf00      	nop
    d45c:	10001140 	.word	0x10001140
    d460:	000f4240 	.word	0x000f4240
    d464:	0000ea54 	.word	0x0000ea54
    d468:	0000ddd1 	.word	0x0000ddd1

0000d46c <am_hal_cachectrl_config>:
    d46c:	b530      	push	{r4, r5, lr}
    d46e:	b083      	sub	sp, #12
    d470:	4604      	mov	r4, r0
    d472:	f000 fc27 	bl	dcc4 <am_hal_interrupt_master_disable>
    d476:	4d0e      	ldr	r5, [pc, #56]	; (d4b0 <am_hal_cachectrl_config+0x44>)
    d478:	9001      	str	r0, [sp, #4]
    d47a:	682b      	ldr	r3, [r5, #0]
    d47c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    d480:	602b      	str	r3, [r5, #0]
    d482:	9801      	ldr	r0, [sp, #4]
    d484:	f000 fc22 	bl	dccc <am_hal_interrupt_master_set>
    d488:	7863      	ldrb	r3, [r4, #1]
    d48a:	7822      	ldrb	r2, [r4, #0]
    d48c:	78a1      	ldrb	r1, [r4, #2]
    d48e:	021b      	lsls	r3, r3, #8
    d490:	f403 7340 	and.w	r3, r3, #768	; 0x300
    d494:	0112      	lsls	r2, r2, #4
    d496:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    d49a:	b2d2      	uxtb	r2, r2
    d49c:	4313      	orrs	r3, r2
    d49e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d4a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d4a6:	2000      	movs	r0, #0
    d4a8:	602b      	str	r3, [r5, #0]
    d4aa:	b003      	add	sp, #12
    d4ac:	bd30      	pop	{r4, r5, pc}
    d4ae:	bf00      	nop
    d4b0:	40018000 	.word	0x40018000

0000d4b4 <am_hal_cachectrl_enable>:
    d4b4:	4a03      	ldr	r2, [pc, #12]	; (d4c4 <am_hal_cachectrl_enable+0x10>)
    d4b6:	6813      	ldr	r3, [r2, #0]
    d4b8:	f043 0301 	orr.w	r3, r3, #1
    d4bc:	2000      	movs	r0, #0
    d4be:	6013      	str	r3, [r2, #0]
    d4c0:	4770      	bx	lr
    d4c2:	bf00      	nop
    d4c4:	40018000 	.word	0x40018000

0000d4c8 <am_hal_cachectrl_control>:
    d4c8:	b510      	push	{r4, lr}
    d4ca:	3801      	subs	r0, #1
    d4cc:	b08e      	sub	sp, #56	; 0x38
    d4ce:	2810      	cmp	r0, #16
    d4d0:	f200 815e 	bhi.w	d790 <am_hal_cachectrl_control+0x2c8>
    d4d4:	e8df f010 	tbh	[pc, r0, lsl #1]
    d4d8:	00360018 	.word	0x00360018
    d4dc:	0040003d 	.word	0x0040003d
    d4e0:	00450043 	.word	0x00450043
    d4e4:	0011001a 	.word	0x0011001a
    d4e8:	00540047 	.word	0x00540047
    d4ec:	009a0061 	.word	0x009a0061
    d4f0:	010c00d3 	.word	0x010c00d3
    d4f4:	013f0126 	.word	0x013f0126
    d4f8:	001d      	.short	0x001d
    d4fa:	f44f 7300 	mov.w	r3, #512	; 0x200
    d4fe:	4aac      	ldr	r2, [pc, #688]	; (d7b0 <am_hal_cachectrl_control+0x2e8>)
    d500:	2000      	movs	r0, #0
    d502:	6093      	str	r3, [r2, #8]
    d504:	b00e      	add	sp, #56	; 0x38
    d506:	bd10      	pop	{r4, pc}
    d508:	2301      	movs	r3, #1
    d50a:	e7f8      	b.n	d4fe <am_hal_cachectrl_control+0x36>
    d50c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    d510:	e7f5      	b.n	d4fe <am_hal_cachectrl_control+0x36>
    d512:	2900      	cmp	r1, #0
    d514:	f000 813c 	beq.w	d790 <am_hal_cachectrl_control+0x2c8>
    d518:	684a      	ldr	r2, [r1, #4]
    d51a:	48a6      	ldr	r0, [pc, #664]	; (d7b4 <am_hal_cachectrl_control+0x2ec>)
    d51c:	4202      	tst	r2, r0
    d51e:	f040 8137 	bne.w	d790 <am_hal_cachectrl_control+0x2c8>
    d522:	688b      	ldr	r3, [r1, #8]
    d524:	4018      	ands	r0, r3
    d526:	f040 8133 	bne.w	d790 <am_hal_cachectrl_control+0x2c8>
    d52a:	780c      	ldrb	r4, [r1, #0]
    d52c:	2c00      	cmp	r4, #0
    d52e:	f040 8133 	bne.w	d798 <am_hal_cachectrl_control+0x2d0>
    d532:	4c9f      	ldr	r4, [pc, #636]	; (d7b0 <am_hal_cachectrl_control+0x2e8>)
    d534:	7849      	ldrb	r1, [r1, #1]
    d536:	6122      	str	r2, [r4, #16]
    d538:	6163      	str	r3, [r4, #20]
    d53a:	6823      	ldr	r3, [r4, #0]
    d53c:	f361 0382 	bfi	r3, r1, #2, #1
    d540:	6023      	str	r3, [r4, #0]
    d542:	e7df      	b.n	d504 <am_hal_cachectrl_control+0x3c>
    d544:	4b9a      	ldr	r3, [pc, #616]	; (d7b0 <am_hal_cachectrl_control+0x2e8>)
    d546:	681b      	ldr	r3, [r3, #0]
    d548:	01db      	lsls	r3, r3, #7
    d54a:	f140 811f 	bpl.w	d78c <am_hal_cachectrl_control+0x2c4>
    d54e:	2302      	movs	r3, #2
    d550:	e7d5      	b.n	d4fe <am_hal_cachectrl_control+0x36>
    d552:	f44f 6388 	mov.w	r3, #1088	; 0x440
    d556:	e7d2      	b.n	d4fe <am_hal_cachectrl_control+0x36>
    d558:	f44f 7308 	mov.w	r3, #544	; 0x220
    d55c:	e7cf      	b.n	d4fe <am_hal_cachectrl_control+0x36>
    d55e:	2340      	movs	r3, #64	; 0x40
    d560:	e7cd      	b.n	d4fe <am_hal_cachectrl_control+0x36>
    d562:	2320      	movs	r3, #32
    d564:	e7cb      	b.n	d4fe <am_hal_cachectrl_control+0x36>
    d566:	f000 fbad 	bl	dcc4 <am_hal_interrupt_master_disable>
    d56a:	4a91      	ldr	r2, [pc, #580]	; (d7b0 <am_hal_cachectrl_control+0x2e8>)
    d56c:	9000      	str	r0, [sp, #0]
    d56e:	6813      	ldr	r3, [r2, #0]
    d570:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    d574:	6013      	str	r3, [r2, #0]
    d576:	9800      	ldr	r0, [sp, #0]
    d578:	f000 fba8 	bl	dccc <am_hal_interrupt_master_set>
    d57c:	2000      	movs	r0, #0
    d57e:	e7c1      	b.n	d504 <am_hal_cachectrl_control+0x3c>
    d580:	f000 fba0 	bl	dcc4 <am_hal_interrupt_master_disable>
    d584:	4a8a      	ldr	r2, [pc, #552]	; (d7b0 <am_hal_cachectrl_control+0x2e8>)
    d586:	9001      	str	r0, [sp, #4]
    d588:	6813      	ldr	r3, [r2, #0]
    d58a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    d58e:	6013      	str	r3, [r2, #0]
    d590:	9801      	ldr	r0, [sp, #4]
    d592:	f000 fb9b 	bl	dccc <am_hal_interrupt_master_set>
    d596:	2000      	movs	r0, #0
    d598:	e7b4      	b.n	d504 <am_hal_cachectrl_control+0x3c>
    d59a:	f000 fb93 	bl	dcc4 <am_hal_interrupt_master_disable>
    d59e:	4603      	mov	r3, r0
    d5a0:	4885      	ldr	r0, [pc, #532]	; (d7b8 <am_hal_cachectrl_control+0x2f0>)
    d5a2:	9302      	str	r3, [sp, #8]
    d5a4:	f000 fa0a 	bl	d9bc <am_hal_flash_load_ui32>
    d5a8:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d5ac:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d5b0:	4881      	ldr	r0, [pc, #516]	; (d7b8 <am_hal_cachectrl_control+0x2f0>)
    d5b2:	f000 fa07 	bl	d9c4 <am_hal_flash_store_ui32>
    d5b6:	9802      	ldr	r0, [sp, #8]
    d5b8:	f000 fb88 	bl	dccc <am_hal_interrupt_master_set>
    d5bc:	f000 fb82 	bl	dcc4 <am_hal_interrupt_master_disable>
    d5c0:	4603      	mov	r3, r0
    d5c2:	487d      	ldr	r0, [pc, #500]	; (d7b8 <am_hal_cachectrl_control+0x2f0>)
    d5c4:	9303      	str	r3, [sp, #12]
    d5c6:	f000 f9f9 	bl	d9bc <am_hal_flash_load_ui32>
    d5ca:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d5ce:	f440 61ee 	orr.w	r1, r0, #1904	; 0x770
    d5d2:	4879      	ldr	r0, [pc, #484]	; (d7b8 <am_hal_cachectrl_control+0x2f0>)
    d5d4:	f000 f9f6 	bl	d9c4 <am_hal_flash_store_ui32>
    d5d8:	9803      	ldr	r0, [sp, #12]
    d5da:	f000 fb77 	bl	dccc <am_hal_interrupt_master_set>
    d5de:	f000 fb71 	bl	dcc4 <am_hal_interrupt_master_disable>
    d5e2:	4603      	mov	r3, r0
    d5e4:	4874      	ldr	r0, [pc, #464]	; (d7b8 <am_hal_cachectrl_control+0x2f0>)
    d5e6:	9304      	str	r3, [sp, #16]
    d5e8:	f000 f9e8 	bl	d9bc <am_hal_flash_load_ui32>
    d5ec:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d5f0:	f020 000f 	bic.w	r0, r0, #15
    d5f4:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d5f8:	f041 0103 	orr.w	r1, r1, #3
    d5fc:	486e      	ldr	r0, [pc, #440]	; (d7b8 <am_hal_cachectrl_control+0x2f0>)
    d5fe:	f000 f9e1 	bl	d9c4 <am_hal_flash_store_ui32>
    d602:	9804      	ldr	r0, [sp, #16]
    d604:	f000 fb62 	bl	dccc <am_hal_interrupt_master_set>
    d608:	2000      	movs	r0, #0
    d60a:	e77b      	b.n	d504 <am_hal_cachectrl_control+0x3c>
    d60c:	f000 fb5a 	bl	dcc4 <am_hal_interrupt_master_disable>
    d610:	4603      	mov	r3, r0
    d612:	4869      	ldr	r0, [pc, #420]	; (d7b8 <am_hal_cachectrl_control+0x2f0>)
    d614:	9305      	str	r3, [sp, #20]
    d616:	f000 f9d1 	bl	d9bc <am_hal_flash_load_ui32>
    d61a:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d61e:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    d622:	4865      	ldr	r0, [pc, #404]	; (d7b8 <am_hal_cachectrl_control+0x2f0>)
    d624:	f000 f9ce 	bl	d9c4 <am_hal_flash_store_ui32>
    d628:	9805      	ldr	r0, [sp, #20]
    d62a:	f000 fb4f 	bl	dccc <am_hal_interrupt_master_set>
    d62e:	f000 fb49 	bl	dcc4 <am_hal_interrupt_master_disable>
    d632:	4603      	mov	r3, r0
    d634:	4860      	ldr	r0, [pc, #384]	; (d7b8 <am_hal_cachectrl_control+0x2f0>)
    d636:	9306      	str	r3, [sp, #24]
    d638:	f000 f9c0 	bl	d9bc <am_hal_flash_load_ui32>
    d63c:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d640:	f440 61ea 	orr.w	r1, r0, #1872	; 0x750
    d644:	485c      	ldr	r0, [pc, #368]	; (d7b8 <am_hal_cachectrl_control+0x2f0>)
    d646:	f000 f9bd 	bl	d9c4 <am_hal_flash_store_ui32>
    d64a:	9806      	ldr	r0, [sp, #24]
    d64c:	f000 fb3e 	bl	dccc <am_hal_interrupt_master_set>
    d650:	f000 fb38 	bl	dcc4 <am_hal_interrupt_master_disable>
    d654:	4603      	mov	r3, r0
    d656:	4858      	ldr	r0, [pc, #352]	; (d7b8 <am_hal_cachectrl_control+0x2f0>)
    d658:	9307      	str	r3, [sp, #28]
    d65a:	f000 f9af 	bl	d9bc <am_hal_flash_load_ui32>
    d65e:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d662:	f020 000f 	bic.w	r0, r0, #15
    d666:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d66a:	f041 0101 	orr.w	r1, r1, #1
    d66e:	4852      	ldr	r0, [pc, #328]	; (d7b8 <am_hal_cachectrl_control+0x2f0>)
    d670:	f000 f9a8 	bl	d9c4 <am_hal_flash_store_ui32>
    d674:	9807      	ldr	r0, [sp, #28]
    d676:	f000 fb29 	bl	dccc <am_hal_interrupt_master_set>
    d67a:	2000      	movs	r0, #0
    d67c:	e742      	b.n	d504 <am_hal_cachectrl_control+0x3c>
    d67e:	f000 fb21 	bl	dcc4 <am_hal_interrupt_master_disable>
    d682:	4603      	mov	r3, r0
    d684:	484c      	ldr	r0, [pc, #304]	; (d7b8 <am_hal_cachectrl_control+0x2f0>)
    d686:	9308      	str	r3, [sp, #32]
    d688:	f000 f998 	bl	d9bc <am_hal_flash_load_ui32>
    d68c:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d690:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    d694:	4848      	ldr	r0, [pc, #288]	; (d7b8 <am_hal_cachectrl_control+0x2f0>)
    d696:	f000 f995 	bl	d9c4 <am_hal_flash_store_ui32>
    d69a:	9808      	ldr	r0, [sp, #32]
    d69c:	f000 fb16 	bl	dccc <am_hal_interrupt_master_set>
    d6a0:	f000 fb10 	bl	dcc4 <am_hal_interrupt_master_disable>
    d6a4:	4603      	mov	r3, r0
    d6a6:	4844      	ldr	r0, [pc, #272]	; (d7b8 <am_hal_cachectrl_control+0x2f0>)
    d6a8:	9309      	str	r3, [sp, #36]	; 0x24
    d6aa:	f000 f987 	bl	d9bc <am_hal_flash_load_ui32>
    d6ae:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d6b2:	f440 61ec 	orr.w	r1, r0, #1888	; 0x760
    d6b6:	4840      	ldr	r0, [pc, #256]	; (d7b8 <am_hal_cachectrl_control+0x2f0>)
    d6b8:	f000 f984 	bl	d9c4 <am_hal_flash_store_ui32>
    d6bc:	9809      	ldr	r0, [sp, #36]	; 0x24
    d6be:	f000 fb05 	bl	dccc <am_hal_interrupt_master_set>
    d6c2:	f000 faff 	bl	dcc4 <am_hal_interrupt_master_disable>
    d6c6:	4603      	mov	r3, r0
    d6c8:	483b      	ldr	r0, [pc, #236]	; (d7b8 <am_hal_cachectrl_control+0x2f0>)
    d6ca:	930a      	str	r3, [sp, #40]	; 0x28
    d6cc:	f000 f976 	bl	d9bc <am_hal_flash_load_ui32>
    d6d0:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d6d4:	f020 000f 	bic.w	r0, r0, #15
    d6d8:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d6dc:	f041 0101 	orr.w	r1, r1, #1
    d6e0:	4835      	ldr	r0, [pc, #212]	; (d7b8 <am_hal_cachectrl_control+0x2f0>)
    d6e2:	f000 f96f 	bl	d9c4 <am_hal_flash_store_ui32>
    d6e6:	980a      	ldr	r0, [sp, #40]	; 0x28
    d6e8:	f000 faf0 	bl	dccc <am_hal_interrupt_master_set>
    d6ec:	2000      	movs	r0, #0
    d6ee:	e709      	b.n	d504 <am_hal_cachectrl_control+0x3c>
    d6f0:	2900      	cmp	r1, #0
    d6f2:	d04d      	beq.n	d790 <am_hal_cachectrl_control+0x2c8>
    d6f4:	680c      	ldr	r4, [r1, #0]
    d6f6:	2c03      	cmp	r4, #3
    d6f8:	d84c      	bhi.n	d794 <am_hal_cachectrl_control+0x2cc>
    d6fa:	f000 fae3 	bl	dcc4 <am_hal_interrupt_master_disable>
    d6fe:	4603      	mov	r3, r0
    d700:	482d      	ldr	r0, [pc, #180]	; (d7b8 <am_hal_cachectrl_control+0x2f0>)
    d702:	930b      	str	r3, [sp, #44]	; 0x2c
    d704:	f000 f95a 	bl	d9bc <am_hal_flash_load_ui32>
    d708:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d70c:	ea40 3104 	orr.w	r1, r0, r4, lsl #12
    d710:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d714:	4828      	ldr	r0, [pc, #160]	; (d7b8 <am_hal_cachectrl_control+0x2f0>)
    d716:	f000 f955 	bl	d9c4 <am_hal_flash_store_ui32>
    d71a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d71c:	f000 fad6 	bl	dccc <am_hal_interrupt_master_set>
    d720:	2000      	movs	r0, #0
    d722:	e6ef      	b.n	d504 <am_hal_cachectrl_control+0x3c>
    d724:	b3a1      	cbz	r1, d790 <am_hal_cachectrl_control+0x2c8>
    d726:	680c      	ldr	r4, [r1, #0]
    d728:	2c07      	cmp	r4, #7
    d72a:	d833      	bhi.n	d794 <am_hal_cachectrl_control+0x2cc>
    d72c:	f000 faca 	bl	dcc4 <am_hal_interrupt_master_disable>
    d730:	4603      	mov	r3, r0
    d732:	4821      	ldr	r0, [pc, #132]	; (d7b8 <am_hal_cachectrl_control+0x2f0>)
    d734:	930c      	str	r3, [sp, #48]	; 0x30
    d736:	f000 f941 	bl	d9bc <am_hal_flash_load_ui32>
    d73a:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d73e:	ea40 1104 	orr.w	r1, r0, r4, lsl #4
    d742:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d746:	481c      	ldr	r0, [pc, #112]	; (d7b8 <am_hal_cachectrl_control+0x2f0>)
    d748:	f000 f93c 	bl	d9c4 <am_hal_flash_store_ui32>
    d74c:	980c      	ldr	r0, [sp, #48]	; 0x30
    d74e:	f000 fabd 	bl	dccc <am_hal_interrupt_master_set>
    d752:	2000      	movs	r0, #0
    d754:	e6d6      	b.n	d504 <am_hal_cachectrl_control+0x3c>
    d756:	b1d9      	cbz	r1, d790 <am_hal_cachectrl_control+0x2c8>
    d758:	680c      	ldr	r4, [r1, #0]
    d75a:	2c0f      	cmp	r4, #15
    d75c:	d81a      	bhi.n	d794 <am_hal_cachectrl_control+0x2cc>
    d75e:	f000 fab1 	bl	dcc4 <am_hal_interrupt_master_disable>
    d762:	4603      	mov	r3, r0
    d764:	4814      	ldr	r0, [pc, #80]	; (d7b8 <am_hal_cachectrl_control+0x2f0>)
    d766:	930d      	str	r3, [sp, #52]	; 0x34
    d768:	f000 f928 	bl	d9bc <am_hal_flash_load_ui32>
    d76c:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d770:	f020 000f 	bic.w	r0, r0, #15
    d774:	ea40 0104 	orr.w	r1, r0, r4
    d778:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d77c:	480e      	ldr	r0, [pc, #56]	; (d7b8 <am_hal_cachectrl_control+0x2f0>)
    d77e:	f000 f921 	bl	d9c4 <am_hal_flash_store_ui32>
    d782:	980d      	ldr	r0, [sp, #52]	; 0x34
    d784:	f000 faa2 	bl	dccc <am_hal_interrupt_master_set>
    d788:	2000      	movs	r0, #0
    d78a:	e6bb      	b.n	d504 <am_hal_cachectrl_control+0x3c>
    d78c:	2007      	movs	r0, #7
    d78e:	e6b9      	b.n	d504 <am_hal_cachectrl_control+0x3c>
    d790:	2006      	movs	r0, #6
    d792:	e6b7      	b.n	d504 <am_hal_cachectrl_control+0x3c>
    d794:	2001      	movs	r0, #1
    d796:	e6b5      	b.n	d504 <am_hal_cachectrl_control+0x3c>
    d798:	2c01      	cmp	r4, #1
    d79a:	d1f9      	bne.n	d790 <am_hal_cachectrl_control+0x2c8>
    d79c:	4c04      	ldr	r4, [pc, #16]	; (d7b0 <am_hal_cachectrl_control+0x2e8>)
    d79e:	7849      	ldrb	r1, [r1, #1]
    d7a0:	61a2      	str	r2, [r4, #24]
    d7a2:	61e3      	str	r3, [r4, #28]
    d7a4:	6823      	ldr	r3, [r4, #0]
    d7a6:	f361 03c3 	bfi	r3, r1, #3, #1
    d7aa:	6023      	str	r3, [r4, #0]
    d7ac:	e6aa      	b.n	d504 <am_hal_cachectrl_control+0x3c>
    d7ae:	bf00      	nop
    d7b0:	40018000 	.word	0x40018000
    d7b4:	f800000f 	.word	0xf800000f
    d7b8:	40018004 	.word	0x40018004

0000d7bc <am_hal_clkgen_control>:
    d7bc:	4b49      	ldr	r3, [pc, #292]	; (d8e4 <am_hal_clkgen_control+0x128>)
    d7be:	681a      	ldr	r2, [r3, #0]
    d7c0:	b912      	cbnz	r2, d7c8 <am_hal_clkgen_control+0xc>
    d7c2:	4a49      	ldr	r2, [pc, #292]	; (d8e8 <am_hal_clkgen_control+0x12c>)
    d7c4:	6812      	ldr	r2, [r2, #0]
    d7c6:	601a      	str	r2, [r3, #0]
    d7c8:	2809      	cmp	r0, #9
    d7ca:	f200 8089 	bhi.w	d8e0 <am_hal_clkgen_control+0x124>
    d7ce:	e8df f000 	tbb	[pc, r0]
    d7d2:	160d      	.short	0x160d
    d7d4:	423a261e 	.word	0x423a261e
    d7d8:	055c544c 	.word	0x055c544c
    d7dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d7e0:	2000      	movs	r0, #0
    d7e2:	6a1a      	ldr	r2, [r3, #32]
    d7e4:	f36f 0200 	bfc	r2, #0, #1
    d7e8:	621a      	str	r2, [r3, #32]
    d7ea:	4770      	bx	lr
    d7ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d7f0:	2200      	movs	r2, #0
    d7f2:	2147      	movs	r1, #71	; 0x47
    d7f4:	6159      	str	r1, [r3, #20]
    d7f6:	4610      	mov	r0, r2
    d7f8:	619a      	str	r2, [r3, #24]
    d7fa:	615a      	str	r2, [r3, #20]
    d7fc:	4770      	bx	lr
    d7fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d802:	2000      	movs	r0, #0
    d804:	899a      	ldrh	r2, [r3, #12]
    d806:	f36f 0200 	bfc	r2, #0, #1
    d80a:	819a      	strh	r2, [r3, #12]
    d80c:	4770      	bx	lr
    d80e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d812:	2000      	movs	r0, #0
    d814:	899a      	ldrh	r2, [r3, #12]
    d816:	f36f 0241 	bfc	r2, #1, #1
    d81a:	819a      	strh	r2, [r3, #12]
    d81c:	4770      	bx	lr
    d81e:	4a33      	ldr	r2, [pc, #204]	; (d8ec <am_hal_clkgen_control+0x130>)
    d820:	68d3      	ldr	r3, [r2, #12]
    d822:	b2db      	uxtb	r3, r3
    d824:	2b21      	cmp	r3, #33	; 0x21
    d826:	d106      	bne.n	d836 <am_hal_clkgen_control+0x7a>
    d828:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    d82c:	2101      	movs	r1, #1
    d82e:	f361 2309 	bfi	r3, r1, #8, #2
    d832:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    d836:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d83a:	2000      	movs	r0, #0
    d83c:	8993      	ldrh	r3, [r2, #12]
    d83e:	f043 0301 	orr.w	r3, r3, #1
    d842:	8193      	strh	r3, [r2, #12]
    d844:	4770      	bx	lr
    d846:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d84a:	2000      	movs	r0, #0
    d84c:	8993      	ldrh	r3, [r2, #12]
    d84e:	f043 0302 	orr.w	r3, r3, #2
    d852:	8193      	strh	r3, [r2, #12]
    d854:	4770      	bx	lr
    d856:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d85a:	2200      	movs	r2, #0
    d85c:	2047      	movs	r0, #71	; 0x47
    d85e:	2101      	movs	r1, #1
    d860:	6158      	str	r0, [r3, #20]
    d862:	6199      	str	r1, [r3, #24]
    d864:	4610      	mov	r0, r2
    d866:	615a      	str	r2, [r3, #20]
    d868:	4770      	bx	lr
    d86a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d86e:	2000      	movs	r0, #0
    d870:	899a      	ldrh	r2, [r3, #12]
    d872:	f36f 12c7 	bfc	r2, #7, #1
    d876:	819a      	strh	r2, [r3, #12]
    d878:	4770      	bx	lr
    d87a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d87e:	2000      	movs	r0, #0
    d880:	8993      	ldrh	r3, [r2, #12]
    d882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d886:	8193      	strh	r3, [r2, #12]
    d888:	4770      	bx	lr
    d88a:	4a18      	ldr	r2, [pc, #96]	; (d8ec <am_hal_clkgen_control+0x130>)
    d88c:	68d3      	ldr	r3, [r2, #12]
    d88e:	b2db      	uxtb	r3, r3
    d890:	2b21      	cmp	r3, #33	; 0x21
    d892:	d00a      	beq.n	d8aa <am_hal_clkgen_control+0xee>
    d894:	b139      	cbz	r1, d8a6 <am_hal_clkgen_control+0xea>
    d896:	680b      	ldr	r3, [r1, #0]
    d898:	f043 0301 	orr.w	r3, r3, #1
    d89c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d8a0:	2000      	movs	r0, #0
    d8a2:	6213      	str	r3, [r2, #32]
    d8a4:	4770      	bx	lr
    d8a6:	4b12      	ldr	r3, [pc, #72]	; (d8f0 <am_hal_clkgen_control+0x134>)
    d8a8:	e7f8      	b.n	d89c <am_hal_clkgen_control+0xe0>
    d8aa:	b500      	push	{lr}
    d8ac:	b083      	sub	sp, #12
    d8ae:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    d8b2:	9101      	str	r1, [sp, #4]
    d8b4:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    d8b8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    d8bc:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    d8c0:	f000 f836 	bl	d930 <am_hal_flash_delay>
    d8c4:	9901      	ldr	r1, [sp, #4]
    d8c6:	b149      	cbz	r1, d8dc <am_hal_clkgen_control+0x120>
    d8c8:	680b      	ldr	r3, [r1, #0]
    d8ca:	f043 0301 	orr.w	r3, r3, #1
    d8ce:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d8d2:	2000      	movs	r0, #0
    d8d4:	6213      	str	r3, [r2, #32]
    d8d6:	b003      	add	sp, #12
    d8d8:	f85d fb04 	ldr.w	pc, [sp], #4
    d8dc:	4b04      	ldr	r3, [pc, #16]	; (d8f0 <am_hal_clkgen_control+0x134>)
    d8de:	e7f6      	b.n	d8ce <am_hal_clkgen_control+0x112>
    d8e0:	2006      	movs	r0, #6
    d8e2:	4770      	bx	lr
    d8e4:	10001144 	.word	0x10001144
    d8e8:	4ffff000 	.word	0x4ffff000
    d8ec:	40020000 	.word	0x40020000
    d8f0:	0025b801 	.word	0x0025b801

0000d8f4 <am_hal_clkgen_status_get>:
    d8f4:	b1b0      	cbz	r0, d924 <am_hal_clkgen_status_get+0x30>
    d8f6:	b410      	push	{r4}
    d8f8:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    d8fc:	4603      	mov	r3, r0
    d8fe:	698c      	ldr	r4, [r1, #24]
    d900:	4809      	ldr	r0, [pc, #36]	; (d928 <am_hal_clkgen_status_get+0x34>)
    d902:	4a0a      	ldr	r2, [pc, #40]	; (d92c <am_hal_clkgen_status_get+0x38>)
    d904:	f014 0f01 	tst.w	r4, #1
    d908:	bf08      	it	eq
    d90a:	4602      	moveq	r2, r0
    d90c:	601a      	str	r2, [r3, #0]
    d90e:	69ca      	ldr	r2, [r1, #28]
    d910:	f85d 4b04 	ldr.w	r4, [sp], #4
    d914:	f002 0101 	and.w	r1, r2, #1
    d918:	f3c2 0240 	ubfx	r2, r2, #1, #1
    d91c:	2000      	movs	r0, #0
    d91e:	6059      	str	r1, [r3, #4]
    d920:	721a      	strb	r2, [r3, #8]
    d922:	4770      	bx	lr
    d924:	2006      	movs	r0, #6
    d926:	4770      	bx	lr
    d928:	02dc6c00 	.word	0x02dc6c00
    d92c:	016e3600 	.word	0x016e3600

0000d930 <am_hal_flash_delay>:
    d930:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    d936:	075b      	lsls	r3, r3, #29
    d938:	bf46      	itte	mi
    d93a:	0040      	lslmi	r0, r0, #1
    d93c:	230e      	movmi	r3, #14
    d93e:	230b      	movpl	r3, #11
    d940:	4298      	cmp	r0, r3
    d942:	d902      	bls.n	d94a <am_hal_flash_delay+0x1a>
    d944:	4a01      	ldr	r2, [pc, #4]	; (d94c <am_hal_flash_delay+0x1c>)
    d946:	1ac0      	subs	r0, r0, r3
    d948:	4710      	bx	r2
    d94a:	4770      	bx	lr
    d94c:	0800009d 	.word	0x0800009d

0000d950 <am_hal_flash_delay_status_check>:
    d950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d954:	f89d c020 	ldrb.w	ip, [sp, #32]
    d958:	f8df 805c 	ldr.w	r8, [pc, #92]	; d9b8 <am_hal_flash_delay_status_check+0x68>
    d95c:	4604      	mov	r4, r0
    d95e:	460d      	mov	r5, r1
    d960:	4616      	mov	r6, r2
    d962:	461f      	mov	r7, r3
    d964:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    d968:	f1bc 0f00 	cmp.w	ip, #0
    d96c:	d00a      	beq.n	d984 <am_hal_flash_delay_status_check+0x34>
    d96e:	e01a      	b.n	d9a6 <am_hal_flash_delay_status_check+0x56>
    d970:	b1f4      	cbz	r4, d9b0 <am_hal_flash_delay_status_check+0x60>
    d972:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    d976:	f013 0f04 	tst.w	r3, #4
    d97a:	bf0c      	ite	eq
    d97c:	2005      	moveq	r0, #5
    d97e:	2012      	movne	r0, #18
    d980:	3c01      	subs	r4, #1
    d982:	47c0      	blx	r8
    d984:	6828      	ldr	r0, [r5, #0]
    d986:	4030      	ands	r0, r6
    d988:	42b8      	cmp	r0, r7
    d98a:	d0f1      	beq.n	d970 <am_hal_flash_delay_status_check+0x20>
    d98c:	2000      	movs	r0, #0
    d98e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d992:	b16c      	cbz	r4, d9b0 <am_hal_flash_delay_status_check+0x60>
    d994:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    d998:	f013 0f04 	tst.w	r3, #4
    d99c:	bf0c      	ite	eq
    d99e:	2005      	moveq	r0, #5
    d9a0:	2012      	movne	r0, #18
    d9a2:	3c01      	subs	r4, #1
    d9a4:	47c0      	blx	r8
    d9a6:	6828      	ldr	r0, [r5, #0]
    d9a8:	4030      	ands	r0, r6
    d9aa:	42b8      	cmp	r0, r7
    d9ac:	d1f1      	bne.n	d992 <am_hal_flash_delay_status_check+0x42>
    d9ae:	e7ed      	b.n	d98c <am_hal_flash_delay_status_check+0x3c>
    d9b0:	2004      	movs	r0, #4
    d9b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d9b6:	bf00      	nop
    d9b8:	0800009d 	.word	0x0800009d

0000d9bc <am_hal_flash_load_ui32>:
    d9bc:	4b00      	ldr	r3, [pc, #0]	; (d9c0 <am_hal_flash_load_ui32+0x4>)
    d9be:	4718      	bx	r3
    d9c0:	08000075 	.word	0x08000075

0000d9c4 <am_hal_flash_store_ui32>:
    d9c4:	4b01      	ldr	r3, [pc, #4]	; (d9cc <am_hal_flash_store_ui32+0x8>)
    d9c6:	f043 0301 	orr.w	r3, r3, #1
    d9ca:	4718      	bx	r3
    d9cc:	10001028 	.word	0x10001028

0000d9d0 <am_hal_gpio_pinconfig>:
    d9d0:	2831      	cmp	r0, #49	; 0x31
    d9d2:	f200 80c3 	bhi.w	db5c <am_hal_gpio_pinconfig+0x18c>
    d9d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d9da:	4604      	mov	r4, r0
    d9dc:	f011 07e0 	ands.w	r7, r1, #224	; 0xe0
    d9e0:	f001 0007 	and.w	r0, r1, #7
    d9e4:	b085      	sub	sp, #20
    d9e6:	f3c1 03c1 	ubfx	r3, r1, #3, #2
    d9ea:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    d9ee:	d00f      	beq.n	da10 <am_hal_gpio_pinconfig+0x40>
    d9f0:	f3c1 1642 	ubfx	r6, r1, #5, #3
    d9f4:	1db5      	adds	r5, r6, #6
    d9f6:	f005 0507 	and.w	r5, r5, #7
    d9fa:	2d03      	cmp	r5, #3
    d9fc:	f042 0201 	orr.w	r2, r2, #1
    da00:	f240 80ae 	bls.w	db60 <am_hal_gpio_pinconfig+0x190>
    da04:	2fc0      	cmp	r7, #192	; 0xc0
    da06:	f000 80e1 	beq.w	dbcc <am_hal_gpio_pinconfig+0x1fc>
    da0a:	2f20      	cmp	r7, #32
    da0c:	f000 80e3 	beq.w	dbd6 <am_hal_gpio_pinconfig+0x206>
    da10:	b163      	cbz	r3, da2c <am_hal_gpio_pinconfig+0x5c>
    da12:	2b01      	cmp	r3, #1
    da14:	f000 80d3 	beq.w	dbbe <am_hal_gpio_pinconfig+0x1ee>
    da18:	2b02      	cmp	r3, #2
    da1a:	f040 80c9 	bne.w	dbb0 <am_hal_gpio_pinconfig+0x1e0>
    da1e:	4b79      	ldr	r3, [pc, #484]	; (dc04 <am_hal_gpio_pinconfig+0x234>)
    da20:	5d1b      	ldrb	r3, [r3, r4]
    da22:	075b      	lsls	r3, r3, #29
    da24:	f140 80c4 	bpl.w	dbb0 <am_hal_gpio_pinconfig+0x1e0>
    da28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    da2c:	4b76      	ldr	r3, [pc, #472]	; (dc08 <am_hal_gpio_pinconfig+0x238>)
    da2e:	5d1b      	ldrb	r3, [r3, r4]
    da30:	4103      	asrs	r3, r0
    da32:	005b      	lsls	r3, r3, #1
    da34:	f003 0302 	and.w	r3, r3, #2
    da38:	4313      	orrs	r3, r2
    da3a:	4a74      	ldr	r2, [pc, #464]	; (dc0c <am_hal_gpio_pinconfig+0x23c>)
    da3c:	5d12      	ldrb	r2, [r2, r4]
    da3e:	4282      	cmp	r2, r0
    da40:	f000 8099 	beq.w	db76 <am_hal_gpio_pinconfig+0x1a6>
    da44:	f3c1 3000 	ubfx	r0, r1, #12, #1
    da48:	f3c1 2581 	ubfx	r5, r1, #10, #2
    da4c:	f3c1 3280 	ubfx	r2, r1, #14, #1
    da50:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    da54:	0a88      	lsrs	r0, r1, #10
    da56:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    da5a:	f000 0008 	and.w	r0, r0, #8
    da5e:	4302      	orrs	r2, r0
    da60:	f3c1 2007 	ubfx	r0, r1, #8, #8
    da64:	f000 050c 	and.w	r5, r0, #12
    da68:	2d04      	cmp	r5, #4
    da6a:	f000 80a5 	beq.w	dbb8 <am_hal_gpio_pinconfig+0x1e8>
    da6e:	4d68      	ldr	r5, [pc, #416]	; (dc10 <am_hal_gpio_pinconfig+0x240>)
    da70:	682d      	ldr	r5, [r5, #0]
    da72:	eba1 0805 	sub.w	r8, r1, r5
    da76:	fab8 f888 	clz	r8, r8
    da7a:	ea4f 1858 	mov.w	r8, r8, lsr #5
    da7e:	f010 0f60 	tst.w	r0, #96	; 0x60
    da82:	bf04      	itt	eq
    da84:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
    da88:	f360 0200 	bfieq	r2, r0, #0, #1
    da8c:	00a0      	lsls	r0, r4, #2
    da8e:	f3c1 2101 	ubfx	r1, r1, #8, #2
    da92:	2902      	cmp	r1, #2
    da94:	d05c      	beq.n	db50 <am_hal_gpio_pinconfig+0x180>
    da96:	2903      	cmp	r1, #3
    da98:	d058      	beq.n	db4c <am_hal_gpio_pinconfig+0x17c>
    da9a:	2901      	cmp	r1, #1
    da9c:	ea4f 01c4 	mov.w	r1, r4, lsl #3
    daa0:	bf08      	it	eq
    daa2:	f043 0304 	orreq.w	r3, r3, #4
    daa6:	f001 0118 	and.w	r1, r1, #24
    daaa:	2700      	movs	r7, #0
    daac:	f000 001c 	and.w	r0, r0, #28
    dab0:	fa02 f600 	lsl.w	r6, r2, r0
    dab4:	220f      	movs	r2, #15
    dab6:	4082      	lsls	r2, r0
    dab8:	43d2      	mvns	r2, r2
    daba:	f04f 09ff 	mov.w	r9, #255	; 0xff
    dabe:	fa03 f501 	lsl.w	r5, r3, r1
    dac2:	fa09 f901 	lsl.w	r9, r9, r1
    dac6:	9201      	str	r2, [sp, #4]
    dac8:	f000 f8fc 	bl	dcc4 <am_hal_interrupt_master_disable>
    dacc:	f024 0a03 	bic.w	sl, r4, #3
    dad0:	ea4f 0b54 	mov.w	fp, r4, lsr #1
    dad4:	f10a 4c80 	add.w	ip, sl, #1073741824	; 0x40000000
    dad8:	4b4e      	ldr	r3, [pc, #312]	; (dc14 <am_hal_gpio_pinconfig+0x244>)
    dada:	494f      	ldr	r1, [pc, #316]	; (dc18 <am_hal_gpio_pinconfig+0x248>)
    dadc:	9a01      	ldr	r2, [sp, #4]
    dade:	9003      	str	r0, [sp, #12]
    dae0:	ea6f 0909 	mvn.w	r9, r9
    dae4:	f02b 0b03 	bic.w	fp, fp, #3
    dae8:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
    daec:	f1b8 0f00 	cmp.w	r8, #0
    daf0:	d00b      	beq.n	db0a <am_hal_gpio_pinconfig+0x13a>
    daf2:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
    daf6:	f004 081f 	and.w	r8, r4, #31
    dafa:	4848      	ldr	r0, [pc, #288]	; (dc1c <am_hal_gpio_pinconfig+0x24c>)
    dafc:	f00e 0e04 	and.w	lr, lr, #4
    db00:	2401      	movs	r4, #1
    db02:	fa04 f408 	lsl.w	r4, r4, r8
    db06:	f84e 4000 	str.w	r4, [lr, r0]
    db0a:	4845      	ldr	r0, [pc, #276]	; (dc20 <am_hal_gpio_pinconfig+0x250>)
    db0c:	2473      	movs	r4, #115	; 0x73
    db0e:	6604      	str	r4, [r0, #96]	; 0x60
    db10:	f8dc 4000 	ldr.w	r4, [ip]
    db14:	ea04 0409 	and.w	r4, r4, r9
    db18:	4325      	orrs	r5, r4
    db1a:	f8cc 5000 	str.w	r5, [ip]
    db1e:	f85b 4003 	ldr.w	r4, [fp, r3]
    db22:	4022      	ands	r2, r4
    db24:	4332      	orrs	r2, r6
    db26:	f84b 2003 	str.w	r2, [fp, r3]
    db2a:	f85a 3001 	ldr.w	r3, [sl, r1]
    db2e:	ea03 0909 	and.w	r9, r3, r9
    db32:	2400      	movs	r4, #0
    db34:	ea49 0707 	orr.w	r7, r9, r7
    db38:	f84a 7001 	str.w	r7, [sl, r1]
    db3c:	6604      	str	r4, [r0, #96]	; 0x60
    db3e:	9803      	ldr	r0, [sp, #12]
    db40:	f000 f8c4 	bl	dccc <am_hal_interrupt_master_set>
    db44:	4620      	mov	r0, r4
    db46:	b005      	add	sp, #20
    db48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    db4c:	f043 0304 	orr.w	r3, r3, #4
    db50:	00e1      	lsls	r1, r4, #3
    db52:	f001 0118 	and.w	r1, r1, #24
    db56:	2701      	movs	r7, #1
    db58:	408f      	lsls	r7, r1
    db5a:	e7a7      	b.n	daac <am_hal_gpio_pinconfig+0xdc>
    db5c:	2006      	movs	r0, #6
    db5e:	4770      	bx	lr
    db60:	4d28      	ldr	r5, [pc, #160]	; (dc04 <am_hal_gpio_pinconfig+0x234>)
    db62:	5d2d      	ldrb	r5, [r5, r4]
    db64:	3e02      	subs	r6, #2
    db66:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    db6a:	07ee      	lsls	r6, r5, #31
    db6c:	d536      	bpl.n	dbdc <am_hal_gpio_pinconfig+0x20c>
    db6e:	2b00      	cmp	r3, #0
    db70:	f43f af5c 	beq.w	da2c <am_hal_gpio_pinconfig+0x5c>
    db74:	e74d      	b.n	da12 <am_hal_gpio_pinconfig+0x42>
    db76:	f3c1 4202 	ubfx	r2, r1, #16, #3
    db7a:	2a07      	cmp	r2, #7
    db7c:	d030      	beq.n	dbe0 <am_hal_gpio_pinconfig+0x210>
    db7e:	4d29      	ldr	r5, [pc, #164]	; (dc24 <am_hal_gpio_pinconfig+0x254>)
    db80:	f3c1 40c1 	ubfx	r0, r1, #19, #2
    db84:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    db88:	f815 0024 	ldrb.w	r0, [r5, r4, lsl #2]
    db8c:	4290      	cmp	r0, r2
    db8e:	d029      	beq.n	dbe4 <am_hal_gpio_pinconfig+0x214>
    db90:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    db94:	00a0      	lsls	r0, r4, #2
    db96:	786e      	ldrb	r6, [r5, #1]
    db98:	4296      	cmp	r6, r2
    db9a:	d02d      	beq.n	dbf8 <am_hal_gpio_pinconfig+0x228>
    db9c:	78ae      	ldrb	r6, [r5, #2]
    db9e:	4296      	cmp	r6, r2
    dba0:	d02c      	beq.n	dbfc <am_hal_gpio_pinconfig+0x22c>
    dba2:	78ed      	ldrb	r5, [r5, #3]
    dba4:	4295      	cmp	r5, r2
    dba6:	d02b      	beq.n	dc00 <am_hal_gpio_pinconfig+0x230>
    dba8:	481f      	ldr	r0, [pc, #124]	; (dc28 <am_hal_gpio_pinconfig+0x258>)
    dbaa:	b005      	add	sp, #20
    dbac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dbb0:	481e      	ldr	r0, [pc, #120]	; (dc2c <am_hal_gpio_pinconfig+0x25c>)
    dbb2:	b005      	add	sp, #20
    dbb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dbb8:	f04f 0801 	mov.w	r8, #1
    dbbc:	e75f      	b.n	da7e <am_hal_gpio_pinconfig+0xae>
    dbbe:	4b11      	ldr	r3, [pc, #68]	; (dc04 <am_hal_gpio_pinconfig+0x234>)
    dbc0:	5d1b      	ldrb	r3, [r3, r4]
    dbc2:	079d      	lsls	r5, r3, #30
    dbc4:	d5f4      	bpl.n	dbb0 <am_hal_gpio_pinconfig+0x1e0>
    dbc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    dbca:	e72f      	b.n	da2c <am_hal_gpio_pinconfig+0x5c>
    dbcc:	2c14      	cmp	r4, #20
    dbce:	f43f af1f 	beq.w	da10 <am_hal_gpio_pinconfig+0x40>
    dbd2:	4817      	ldr	r0, [pc, #92]	; (dc30 <am_hal_gpio_pinconfig+0x260>)
    dbd4:	e7b7      	b.n	db46 <am_hal_gpio_pinconfig+0x176>
    dbd6:	2c14      	cmp	r4, #20
    dbd8:	f47f af1a 	bne.w	da10 <am_hal_gpio_pinconfig+0x40>
    dbdc:	4815      	ldr	r0, [pc, #84]	; (dc34 <am_hal_gpio_pinconfig+0x264>)
    dbde:	e7b2      	b.n	db46 <am_hal_gpio_pinconfig+0x176>
    dbe0:	4815      	ldr	r0, [pc, #84]	; (dc38 <am_hal_gpio_pinconfig+0x268>)
    dbe2:	e7b0      	b.n	db46 <am_hal_gpio_pinconfig+0x176>
    dbe4:	2200      	movs	r2, #0
    dbe6:	00a0      	lsls	r0, r4, #2
    dbe8:	0052      	lsls	r2, r2, #1
    dbea:	f3c1 5540 	ubfx	r5, r1, #21, #1
    dbee:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
    dbf2:	f04f 0800 	mov.w	r8, #0
    dbf6:	e74a      	b.n	da8e <am_hal_gpio_pinconfig+0xbe>
    dbf8:	2201      	movs	r2, #1
    dbfa:	e7f5      	b.n	dbe8 <am_hal_gpio_pinconfig+0x218>
    dbfc:	2202      	movs	r2, #2
    dbfe:	e7f3      	b.n	dbe8 <am_hal_gpio_pinconfig+0x218>
    dc00:	2203      	movs	r2, #3
    dc02:	e7f1      	b.n	dbe8 <am_hal_gpio_pinconfig+0x218>
    dc04:	0000ea64 	.word	0x0000ea64
    dc08:	0000ea98 	.word	0x0000ea98
    dc0c:	0000eb94 	.word	0x0000eb94
    dc10:	0000ea5c 	.word	0x0000ea5c
    dc14:	40010040 	.word	0x40010040
    dc18:	400100e0 	.word	0x400100e0
    dc1c:	400100b4 	.word	0x400100b4
    dc20:	40010000 	.word	0x40010000
    dc24:	0000eacc 	.word	0x0000eacc
    dc28:	08000104 	.word	0x08000104
    dc2c:	08000102 	.word	0x08000102
    dc30:	08000101 	.word	0x08000101
    dc34:	08000100 	.word	0x08000100
    dc38:	08000103 	.word	0x08000103

0000dc3c <am_hal_gpio_state_write>:
    dc3c:	2831      	cmp	r0, #49	; 0x31
    dc3e:	d81a      	bhi.n	dc76 <am_hal_gpio_state_write+0x3a>
    dc40:	b570      	push	{r4, r5, r6, lr}
    dc42:	2905      	cmp	r1, #5
    dc44:	b082      	sub	sp, #8
    dc46:	460d      	mov	r5, r1
    dc48:	d812      	bhi.n	dc70 <am_hal_gpio_state_write+0x34>
    dc4a:	f000 031f 	and.w	r3, r0, #31
    dc4e:	2201      	movs	r2, #1
    dc50:	08c0      	lsrs	r0, r0, #3
    dc52:	fa02 f603 	lsl.w	r6, r2, r3
    dc56:	f000 0404 	and.w	r4, r0, #4
    dc5a:	f000 f833 	bl	dcc4 <am_hal_interrupt_master_disable>
    dc5e:	3d01      	subs	r5, #1
    dc60:	9001      	str	r0, [sp, #4]
    dc62:	2d04      	cmp	r5, #4
    dc64:	d821      	bhi.n	dcaa <am_hal_gpio_state_write+0x6e>
    dc66:	e8df f005 	tbb	[pc, r5]
    dc6a:	1512      	.short	0x1512
    dc6c:	1d1a      	.short	0x1d1a
    dc6e:	08          	.byte	0x08
    dc6f:	00          	.byte	0x00
    dc70:	2006      	movs	r0, #6
    dc72:	b002      	add	sp, #8
    dc74:	bd70      	pop	{r4, r5, r6, pc}
    dc76:	2005      	movs	r0, #5
    dc78:	4770      	bx	lr
    dc7a:	4a0d      	ldr	r2, [pc, #52]	; (dcb0 <am_hal_gpio_state_write+0x74>)
    dc7c:	58a3      	ldr	r3, [r4, r2]
    dc7e:	4073      	eors	r3, r6
    dc80:	50a3      	str	r3, [r4, r2]
    dc82:	9801      	ldr	r0, [sp, #4]
    dc84:	f000 f822 	bl	dccc <am_hal_interrupt_master_set>
    dc88:	2000      	movs	r0, #0
    dc8a:	b002      	add	sp, #8
    dc8c:	bd70      	pop	{r4, r5, r6, pc}
    dc8e:	4b09      	ldr	r3, [pc, #36]	; (dcb4 <am_hal_gpio_state_write+0x78>)
    dc90:	50e6      	str	r6, [r4, r3]
    dc92:	e7f6      	b.n	dc82 <am_hal_gpio_state_write+0x46>
    dc94:	4a08      	ldr	r2, [pc, #32]	; (dcb8 <am_hal_gpio_state_write+0x7c>)
    dc96:	58a3      	ldr	r3, [r4, r2]
    dc98:	4073      	eors	r3, r6
    dc9a:	50a3      	str	r3, [r4, r2]
    dc9c:	e7f1      	b.n	dc82 <am_hal_gpio_state_write+0x46>
    dc9e:	4b04      	ldr	r3, [pc, #16]	; (dcb0 <am_hal_gpio_state_write+0x74>)
    dca0:	50e6      	str	r6, [r4, r3]
    dca2:	e7ee      	b.n	dc82 <am_hal_gpio_state_write+0x46>
    dca4:	4b05      	ldr	r3, [pc, #20]	; (dcbc <am_hal_gpio_state_write+0x80>)
    dca6:	50e6      	str	r6, [r4, r3]
    dca8:	e7eb      	b.n	dc82 <am_hal_gpio_state_write+0x46>
    dcaa:	4b05      	ldr	r3, [pc, #20]	; (dcc0 <am_hal_gpio_state_write+0x84>)
    dcac:	50e6      	str	r6, [r4, r3]
    dcae:	e7e8      	b.n	dc82 <am_hal_gpio_state_write+0x46>
    dcb0:	400100b4 	.word	0x400100b4
    dcb4:	40010090 	.word	0x40010090
    dcb8:	40010088 	.word	0x40010088
    dcbc:	400100a8 	.word	0x400100a8
    dcc0:	40010098 	.word	0x40010098

0000dcc4 <am_hal_interrupt_master_disable>:
    dcc4:	f3ef 8010 	mrs	r0, PRIMASK
    dcc8:	b672      	cpsid	i
    dcca:	4770      	bx	lr

0000dccc <am_hal_interrupt_master_set>:
    dccc:	f380 8810 	msr	PRIMASK, r0
    dcd0:	4770      	bx	lr
    dcd2:	bf00      	nop

0000dcd4 <am_hal_itm_enable>:
    dcd4:	4a0e      	ldr	r2, [pc, #56]	; (dd10 <am_hal_itm_enable+0x3c>)
    dcd6:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    dcda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    dcde:	b410      	push	{r4}
    dce0:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    dce4:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    dce8:	01db      	lsls	r3, r3, #7
    dcea:	d5fb      	bpl.n	dce4 <am_hal_itm_enable+0x10>
    dcec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    dcf0:	4c08      	ldr	r4, [pc, #32]	; (dd14 <am_hal_itm_enable+0x40>)
    dcf2:	4a09      	ldr	r2, [pc, #36]	; (dd18 <am_hal_itm_enable+0x44>)
    dcf4:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    dcf8:	200f      	movs	r0, #15
    dcfa:	f04f 31ff 	mov.w	r1, #4294967295
    dcfe:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    dd02:	f85d 4b04 	ldr.w	r4, [sp], #4
    dd06:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    dd0a:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    dd0e:	4770      	bx	lr
    dd10:	e000ed00 	.word	0xe000ed00
    dd14:	c5acce55 	.word	0xc5acce55
    dd18:	00150511 	.word	0x00150511

0000dd1c <am_hal_itm_disable>:
    dd1c:	4b27      	ldr	r3, [pc, #156]	; (ddbc <am_hal_itm_disable+0xa0>)
    dd1e:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    dd22:	b510      	push	{r4, lr}
    dd24:	b9cb      	cbnz	r3, dd5a <am_hal_itm_disable+0x3e>
    dd26:	4a26      	ldr	r2, [pc, #152]	; (ddc0 <am_hal_itm_disable+0xa4>)
    dd28:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    dd2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    dd30:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    dd34:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    dd38:	01d9      	lsls	r1, r3, #7
    dd3a:	d5fb      	bpl.n	dd34 <am_hal_itm_disable+0x18>
    dd3c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    dd40:	4c20      	ldr	r4, [pc, #128]	; (ddc4 <am_hal_itm_disable+0xa8>)
    dd42:	4a21      	ldr	r2, [pc, #132]	; (ddc8 <am_hal_itm_disable+0xac>)
    dd44:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    dd48:	200f      	movs	r0, #15
    dd4a:	f04f 31ff 	mov.w	r1, #4294967295
    dd4e:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    dd52:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    dd56:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    dd5a:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    dd5e:	f8d4 3e80 	ldr.w	r3, [r4, #3712]	; 0xe80
    dd62:	021b      	lsls	r3, r3, #8
    dd64:	d4fb      	bmi.n	dd5e <am_hal_itm_disable+0x42>
    dd66:	f44f 7048 	mov.w	r0, #800	; 0x320
    dd6a:	f7ff fde1 	bl	d930 <am_hal_flash_delay>
    dd6e:	4b15      	ldr	r3, [pc, #84]	; (ddc4 <am_hal_itm_disable+0xa8>)
    dd70:	4916      	ldr	r1, [pc, #88]	; (ddcc <am_hal_itm_disable+0xb0>)
    dd72:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
    dd76:	2064      	movs	r0, #100	; 0x64
    dd78:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    dd7c:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    dd80:	f023 0301 	bic.w	r3, r3, #1
    dd84:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
    dd88:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    dd8c:	420b      	tst	r3, r1
    dd8e:	d1fb      	bne.n	dd88 <am_hal_itm_disable+0x6c>
    dd90:	3801      	subs	r0, #1
    dd92:	d1f3      	bne.n	dd7c <am_hal_itm_disable+0x60>
    dd94:	4a0a      	ldr	r2, [pc, #40]	; (ddc0 <am_hal_itm_disable+0xa4>)
    dd96:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    dd9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    dd9e:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    dda2:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    dda6:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    ddaa:	d1fa      	bne.n	dda2 <am_hal_itm_disable+0x86>
    ddac:	4a03      	ldr	r2, [pc, #12]	; (ddbc <am_hal_itm_disable+0xa0>)
    ddae:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    ddb2:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
    ddb6:	2b00      	cmp	r3, #0
    ddb8:	d1fb      	bne.n	ddb2 <am_hal_itm_disable+0x96>
    ddba:	bd10      	pop	{r4, pc}
    ddbc:	40020000 	.word	0x40020000
    ddc0:	e000ed00 	.word	0xe000ed00
    ddc4:	c5acce55 	.word	0xc5acce55
    ddc8:	00150511 	.word	0x00150511
    ddcc:	00800001 	.word	0x00800001

0000ddd0 <am_hal_itm_print>:
    ddd0:	7803      	ldrb	r3, [r0, #0]
    ddd2:	b1a3      	cbz	r3, ddfe <am_hal_itm_print+0x2e>
    ddd4:	4603      	mov	r3, r0
    ddd6:	f1c0 0c01 	rsb	ip, r0, #1
    ddda:	eb0c 0103 	add.w	r1, ip, r3
    ddde:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    dde2:	2a00      	cmp	r2, #0
    dde4:	d1f9      	bne.n	ddda <am_hal_itm_print+0xa>
    dde6:	4401      	add	r1, r0
    dde8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    ddec:	f810 cb01 	ldrb.w	ip, [r0], #1
    ddf0:	6813      	ldr	r3, [r2, #0]
    ddf2:	2b00      	cmp	r3, #0
    ddf4:	d0fc      	beq.n	ddf0 <am_hal_itm_print+0x20>
    ddf6:	4288      	cmp	r0, r1
    ddf8:	f882 c000 	strb.w	ip, [r2]
    ddfc:	d1f6      	bne.n	ddec <am_hal_itm_print+0x1c>
    ddfe:	4770      	bx	lr

0000de00 <am_hal_mcuctrl_control>:
    de00:	b570      	push	{r4, r5, r6, lr}
    de02:	b082      	sub	sp, #8
    de04:	2804      	cmp	r0, #4
    de06:	f200 80b9 	bhi.w	df7c <am_hal_mcuctrl_control+0x17c>
    de0a:	e8df f000 	tbb	[pc, r0]
    de0e:	3a2f      	.short	0x3a2f
    de10:	5645      	.short	0x5645
    de12:	03          	.byte	0x03
    de13:	00          	.byte	0x00
    de14:	680a      	ldr	r2, [r1, #0]
    de16:	f032 1433 	bics.w	r4, r2, #3342387	; 0x330033
    de1a:	f040 80af 	bne.w	df7c <am_hal_mcuctrl_control+0x17c>
    de1e:	4b58      	ldr	r3, [pc, #352]	; (df80 <am_hal_mcuctrl_control+0x180>)
    de20:	f8d3 1284 	ldr.w	r1, [r3, #644]	; 0x284
    de24:	00cb      	lsls	r3, r1, #3
    de26:	0048      	lsls	r0, r1, #1
    de28:	f000 0004 	and.w	r0, r0, #4
    de2c:	f003 0308 	and.w	r3, r3, #8
    de30:	4303      	orrs	r3, r0
    de32:	00d0      	lsls	r0, r2, #3
    de34:	f000 0008 	and.w	r0, r0, #8
    de38:	4303      	orrs	r3, r0
    de3a:	0050      	lsls	r0, r2, #1
    de3c:	f000 0004 	and.w	r0, r0, #4
    de40:	4303      	orrs	r3, r0
    de42:	0bd0      	lsrs	r0, r2, #15
    de44:	f000 0002 	and.w	r0, r0, #2
    de48:	4303      	orrs	r3, r0
    de4a:	f3c2 4040 	ubfx	r0, r2, #17, #1
    de4e:	4303      	orrs	r3, r0
    de50:	3b01      	subs	r3, #1
    de52:	2b0e      	cmp	r3, #14
    de54:	f200 808e 	bhi.w	df74 <am_hal_mcuctrl_control+0x174>
    de58:	e8df f003 	tbb	[pc, r3]
    de5c:	75404083 	.word	0x75404083
    de60:	7740758c 	.word	0x7740758c
    de64:	7f404077 	.word	0x7f404077
    de68:	7577      	.short	0x7577
    de6a:	40          	.byte	0x40
    de6b:	00          	.byte	0x00
    de6c:	4a44      	ldr	r2, [pc, #272]	; (df80 <am_hal_mcuctrl_control+0x180>)
    de6e:	f892 31d0 	ldrb.w	r3, [r2, #464]	; 0x1d0
    de72:	f043 0301 	orr.w	r3, r3, #1
    de76:	2400      	movs	r4, #0
    de78:	f882 31d0 	strb.w	r3, [r2, #464]	; 0x1d0
    de7c:	4620      	mov	r0, r4
    de7e:	b002      	add	sp, #8
    de80:	bd70      	pop	{r4, r5, r6, pc}
    de82:	4a3f      	ldr	r2, [pc, #252]	; (df80 <am_hal_mcuctrl_control+0x180>)
    de84:	f892 31d0 	ldrb.w	r3, [r2, #464]	; 0x1d0
    de88:	2400      	movs	r4, #0
    de8a:	f36f 0300 	bfc	r3, #0, #1
    de8e:	4620      	mov	r0, r4
    de90:	f882 31d0 	strb.w	r3, [r2, #464]	; 0x1d0
    de94:	b002      	add	sp, #8
    de96:	bd70      	pop	{r4, r5, r6, pc}
    de98:	4b39      	ldr	r3, [pc, #228]	; (df80 <am_hal_mcuctrl_control+0x180>)
    de9a:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    de9e:	f022 021f 	bic.w	r2, r2, #31
    dea2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    dea6:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    deaa:	2400      	movs	r4, #0
    deac:	f042 0207 	orr.w	r2, r2, #7
    deb0:	4620      	mov	r0, r4
    deb2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    deb6:	b002      	add	sp, #8
    deb8:	bd70      	pop	{r4, r5, r6, pc}
    deba:	4b31      	ldr	r3, [pc, #196]	; (df80 <am_hal_mcuctrl_control+0x180>)
    debc:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    dec0:	f022 021f 	bic.w	r2, r2, #31
    dec4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    dec8:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    decc:	2400      	movs	r4, #0
    dece:	f042 0218 	orr.w	r2, r2, #24
    ded2:	4620      	mov	r0, r4
    ded4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    ded8:	b002      	add	sp, #8
    deda:	bd70      	pop	{r4, r5, r6, pc}
    dedc:	2600      	movs	r6, #0
    dede:	f06f 0503 	mvn.w	r5, #3
    dee2:	084b      	lsrs	r3, r1, #1
    dee4:	08c9      	lsrs	r1, r1, #3
    dee6:	f001 0104 	and.w	r1, r1, #4
    deea:	f003 0308 	and.w	r3, r3, #8
    deee:	430b      	orrs	r3, r1
    def0:	0851      	lsrs	r1, r2, #1
    def2:	ea43 5352 	orr.w	r3, r3, r2, lsr #21
    def6:	f001 0108 	and.w	r1, r1, #8
    defa:	430b      	orrs	r3, r1
    defc:	08d1      	lsrs	r1, r2, #3
    defe:	f001 0104 	and.w	r1, r1, #4
    df02:	0cd2      	lsrs	r2, r2, #19
    df04:	430b      	orrs	r3, r1
    df06:	f002 0202 	and.w	r2, r2, #2
    df0a:	431a      	orrs	r2, r3
    df0c:	3a01      	subs	r2, #1
    df0e:	2a0e      	cmp	r2, #14
    df10:	d80b      	bhi.n	df2a <am_hal_mcuctrl_control+0x12a>
    df12:	e8df f002 	tbb	[pc, r2]
    df16:	082c      	.short	0x082c
    df18:	180a1808 	.word	0x180a1808
    df1c:	081e1e08 	.word	0x081e1e08
    df20:	181e2a08 	.word	0x181e2a08
    df24:	08          	.byte	0x08
    df25:	00          	.byte	0x00
    df26:	f06f 0530 	mvn.w	r5, #48	; 0x30
    df2a:	f7ff fecb 	bl	dcc4 <am_hal_interrupt_master_disable>
    df2e:	4b14      	ldr	r3, [pc, #80]	; (df80 <am_hal_mcuctrl_control+0x180>)
    df30:	9001      	str	r0, [sp, #4]
    df32:	f8d3 2284 	ldr.w	r2, [r3, #644]	; 0x284
    df36:	4316      	orrs	r6, r2
    df38:	4035      	ands	r5, r6
    df3a:	f8c3 5284 	str.w	r5, [r3, #644]	; 0x284
    df3e:	9801      	ldr	r0, [sp, #4]
    df40:	f7ff fec4 	bl	dccc <am_hal_interrupt_master_set>
    df44:	e79a      	b.n	de7c <am_hal_mcuctrl_control+0x7c>
    df46:	2407      	movs	r4, #7
    df48:	e798      	b.n	de7c <am_hal_mcuctrl_control+0x7c>
    df4a:	f06f 0502 	mvn.w	r5, #2
    df4e:	2601      	movs	r6, #1
    df50:	e7c7      	b.n	dee2 <am_hal_mcuctrl_control+0xe2>
    df52:	f06f 0520 	mvn.w	r5, #32
    df56:	2610      	movs	r6, #16
    df58:	e7e7      	b.n	df2a <am_hal_mcuctrl_control+0x12a>
    df5a:	f04f 35ff 	mov.w	r5, #4294967295
    df5e:	2603      	movs	r6, #3
    df60:	e7bf      	b.n	dee2 <am_hal_mcuctrl_control+0xe2>
    df62:	2600      	movs	r6, #0
    df64:	f06f 0502 	mvn.w	r5, #2
    df68:	e7bb      	b.n	dee2 <am_hal_mcuctrl_control+0xe2>
    df6a:	2630      	movs	r6, #48	; 0x30
    df6c:	e7dd      	b.n	df2a <am_hal_mcuctrl_control+0x12a>
    df6e:	f06f 0520 	mvn.w	r5, #32
    df72:	e7da      	b.n	df2a <am_hal_mcuctrl_control+0x12a>
    df74:	2600      	movs	r6, #0
    df76:	f04f 35ff 	mov.w	r5, #4294967295
    df7a:	e7b2      	b.n	dee2 <am_hal_mcuctrl_control+0xe2>
    df7c:	2406      	movs	r4, #6
    df7e:	e77d      	b.n	de7c <am_hal_mcuctrl_control+0x7c>
    df80:	40020000 	.word	0x40020000

0000df84 <am_hal_mcuctrl_info_get>:
    df84:	2900      	cmp	r1, #0
    df86:	f000 808f 	beq.w	e0a8 <am_hal_mcuctrl_info_get+0x124>
    df8a:	2801      	cmp	r0, #1
    df8c:	b430      	push	{r4, r5}
    df8e:	d006      	beq.n	df9e <am_hal_mcuctrl_info_get+0x1a>
    df90:	2802      	cmp	r0, #2
    df92:	d06d      	beq.n	e070 <am_hal_mcuctrl_info_get+0xec>
    df94:	2800      	cmp	r0, #0
    df96:	d055      	beq.n	e044 <am_hal_mcuctrl_info_get+0xc0>
    df98:	2006      	movs	r0, #6
    df9a:	bc30      	pop	{r4, r5}
    df9c:	4770      	bx	lr
    df9e:	4a43      	ldr	r2, [pc, #268]	; (e0ac <am_hal_mcuctrl_info_get+0x128>)
    dfa0:	4843      	ldr	r0, [pc, #268]	; (e0b0 <am_hal_mcuctrl_info_get+0x12c>)
    dfa2:	6813      	ldr	r3, [r2, #0]
    dfa4:	600b      	str	r3, [r1, #0]
    dfa6:	6854      	ldr	r4, [r2, #4]
    dfa8:	604c      	str	r4, [r1, #4]
    dfaa:	6894      	ldr	r4, [r2, #8]
    dfac:	608c      	str	r4, [r1, #8]
    dfae:	68d4      	ldr	r4, [r2, #12]
    dfb0:	60cc      	str	r4, [r1, #12]
    dfb2:	f3c3 5503 	ubfx	r5, r3, #20, #4
    dfb6:	6914      	ldr	r4, [r2, #16]
    dfb8:	610c      	str	r4, [r1, #16]
    dfba:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    dfbe:	4c3d      	ldr	r4, [pc, #244]	; (e0b4 <am_hal_mcuctrl_info_get+0x130>)
    dfc0:	6950      	ldr	r0, [r2, #20]
    dfc2:	6148      	str	r0, [r1, #20]
    dfc4:	f003 0201 	and.w	r2, r3, #1
    dfc8:	f3c3 4303 	ubfx	r3, r3, #16, #4
    dfcc:	e9c1 2506 	strd	r2, r5, [r1, #24]
    dfd0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    dfd4:	4a38      	ldr	r2, [pc, #224]	; (e0b8 <am_hal_mcuctrl_info_get+0x134>)
    dfd6:	620b      	str	r3, [r1, #32]
    dfd8:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    dfdc:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    dfe0:	b2db      	uxtb	r3, r3
    dfe2:	f000 000f 	and.w	r0, r0, #15
    dfe6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    dfea:	624b      	str	r3, [r1, #36]	; 0x24
    dfec:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    dff0:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
    dff4:	f3c3 1303 	ubfx	r3, r3, #4, #4
    dff8:	f000 000f 	and.w	r0, r0, #15
    dffc:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
    e000:	628b      	str	r3, [r1, #40]	; 0x28
    e002:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    e006:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
    e00a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    e00e:	f3c0 1003 	ubfx	r0, r0, #4, #4
    e012:	4303      	orrs	r3, r0
    e014:	62cb      	str	r3, [r1, #44]	; 0x2c
    e016:	f8d2 40fc 	ldr.w	r4, [r2, #252]	; 0xfc
    e01a:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    e01e:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    e022:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    e026:	b2db      	uxtb	r3, r3
    e028:	041b      	lsls	r3, r3, #16
    e02a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    e02e:	fa5f fc82 	uxtb.w	ip, r2
    e032:	ea43 030c 	orr.w	r3, r3, ip
    e036:	b2c2      	uxtb	r2, r0
    e038:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e03c:	630b      	str	r3, [r1, #48]	; 0x30
    e03e:	2000      	movs	r0, #0
    e040:	bc30      	pop	{r4, r5}
    e042:	4770      	bx	lr
    e044:	4a19      	ldr	r2, [pc, #100]	; (e0ac <am_hal_mcuctrl_info_get+0x128>)
    e046:	6993      	ldr	r3, [r2, #24]
    e048:	f3c3 1480 	ubfx	r4, r3, #6, #1
    e04c:	700c      	strb	r4, [r1, #0]
    e04e:	f8d2 41a0 	ldr.w	r4, [r2, #416]	; 0x1a0
    e052:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e056:	704b      	strb	r3, [r1, #1]
    e058:	f3c4 6381 	ubfx	r3, r4, #26, #2
    e05c:	710b      	strb	r3, [r1, #4]
    e05e:	6953      	ldr	r3, [r2, #20]
    e060:	f3c3 0240 	ubfx	r2, r3, #1, #1
    e064:	f003 0301 	and.w	r3, r3, #1
    e068:	bc30      	pop	{r4, r5}
    e06a:	708a      	strb	r2, [r1, #2]
    e06c:	70cb      	strb	r3, [r1, #3]
    e06e:	4770      	bx	lr
    e070:	4a0e      	ldr	r2, [pc, #56]	; (e0ac <am_hal_mcuctrl_info_get+0x128>)
    e072:	6848      	ldr	r0, [r1, #4]
    e074:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    e078:	f003 0401 	and.w	r4, r3, #1
    e07c:	700c      	strb	r4, [r1, #0]
    e07e:	f3c3 0440 	ubfx	r4, r3, #1, #1
    e082:	720c      	strb	r4, [r1, #8]
    e084:	f8d2 41c4 	ldr.w	r4, [r2, #452]	; 0x1c4
    e088:	60cc      	str	r4, [r1, #12]
    e08a:	f8d2 41c0 	ldr.w	r4, [r2, #448]	; 0x1c0
    e08e:	4320      	orrs	r0, r4
    e090:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e094:	6048      	str	r0, [r1, #4]
    e096:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    e09a:	740b      	strb	r3, [r1, #16]
    e09c:	694b      	ldr	r3, [r1, #20]
    e09e:	4313      	orrs	r3, r2
    e0a0:	2000      	movs	r0, #0
    e0a2:	bc30      	pop	{r4, r5}
    e0a4:	614b      	str	r3, [r1, #20]
    e0a6:	4770      	bx	lr
    e0a8:	2006      	movs	r0, #6
    e0aa:	4770      	bx	lr
    e0ac:	40020000 	.word	0x40020000
    e0b0:	0000ebc8 	.word	0x0000ebc8
    e0b4:	0000ec08 	.word	0x0000ec08
    e0b8:	f0000f00 	.word	0xf0000f00

0000e0bc <am_hal_pwrctrl_periph_enable>:
    e0bc:	b570      	push	{r4, r5, r6, lr}
    e0be:	b082      	sub	sp, #8
    e0c0:	4604      	mov	r4, r0
    e0c2:	f7ff fdff 	bl	dcc4 <am_hal_interrupt_master_disable>
    e0c6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e0ca:	4e0f      	ldr	r6, [pc, #60]	; (e108 <am_hal_pwrctrl_periph_enable+0x4c>)
    e0cc:	4d0f      	ldr	r5, [pc, #60]	; (e10c <am_hal_pwrctrl_periph_enable+0x50>)
    e0ce:	9001      	str	r0, [sp, #4]
    e0d0:	00a4      	lsls	r4, r4, #2
    e0d2:	68b3      	ldr	r3, [r6, #8]
    e0d4:	592a      	ldr	r2, [r5, r4]
    e0d6:	4313      	orrs	r3, r2
    e0d8:	60b3      	str	r3, [r6, #8]
    e0da:	9801      	ldr	r0, [sp, #4]
    e0dc:	442c      	add	r4, r5
    e0de:	f7ff fdf5 	bl	dccc <am_hal_interrupt_master_set>
    e0e2:	20a0      	movs	r0, #160	; 0xa0
    e0e4:	f7ff fc24 	bl	d930 <am_hal_flash_delay>
    e0e8:	69b3      	ldr	r3, [r6, #24]
    e0ea:	6864      	ldr	r4, [r4, #4]
    e0ec:	4223      	tst	r3, r4
    e0ee:	d103      	bne.n	e0f8 <am_hal_pwrctrl_periph_enable+0x3c>
    e0f0:	20a0      	movs	r0, #160	; 0xa0
    e0f2:	f7ff fc1d 	bl	d930 <am_hal_flash_delay>
    e0f6:	69b3      	ldr	r3, [r6, #24]
    e0f8:	4b03      	ldr	r3, [pc, #12]	; (e108 <am_hal_pwrctrl_periph_enable+0x4c>)
    e0fa:	699b      	ldr	r3, [r3, #24]
    e0fc:	4223      	tst	r3, r4
    e0fe:	bf0c      	ite	eq
    e100:	2001      	moveq	r0, #1
    e102:	2000      	movne	r0, #0
    e104:	b002      	add	sp, #8
    e106:	bd70      	pop	{r4, r5, r6, pc}
    e108:	40021000 	.word	0x40021000
    e10c:	0000ec48 	.word	0x0000ec48

0000e110 <am_hal_pwrctrl_periph_disable>:
    e110:	b570      	push	{r4, r5, r6, lr}
    e112:	b082      	sub	sp, #8
    e114:	4604      	mov	r4, r0
    e116:	f7ff fdd5 	bl	dcc4 <am_hal_interrupt_master_disable>
    e11a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e11e:	4e10      	ldr	r6, [pc, #64]	; (e160 <am_hal_pwrctrl_periph_disable+0x50>)
    e120:	4d10      	ldr	r5, [pc, #64]	; (e164 <am_hal_pwrctrl_periph_disable+0x54>)
    e122:	9001      	str	r0, [sp, #4]
    e124:	00a4      	lsls	r4, r4, #2
    e126:	68b3      	ldr	r3, [r6, #8]
    e128:	592a      	ldr	r2, [r5, r4]
    e12a:	ea23 0302 	bic.w	r3, r3, r2
    e12e:	60b3      	str	r3, [r6, #8]
    e130:	9801      	ldr	r0, [sp, #4]
    e132:	442c      	add	r4, r5
    e134:	f7ff fdca 	bl	dccc <am_hal_interrupt_master_set>
    e138:	20a0      	movs	r0, #160	; 0xa0
    e13a:	f7ff fbf9 	bl	d930 <am_hal_flash_delay>
    e13e:	69b3      	ldr	r3, [r6, #24]
    e140:	6864      	ldr	r4, [r4, #4]
    e142:	4223      	tst	r3, r4
    e144:	d003      	beq.n	e14e <am_hal_pwrctrl_periph_disable+0x3e>
    e146:	20a0      	movs	r0, #160	; 0xa0
    e148:	f7ff fbf2 	bl	d930 <am_hal_flash_delay>
    e14c:	69b3      	ldr	r3, [r6, #24]
    e14e:	4b04      	ldr	r3, [pc, #16]	; (e160 <am_hal_pwrctrl_periph_disable+0x50>)
    e150:	699b      	ldr	r3, [r3, #24]
    e152:	4223      	tst	r3, r4
    e154:	bf14      	ite	ne
    e156:	2001      	movne	r0, #1
    e158:	2000      	moveq	r0, #0
    e15a:	b002      	add	sp, #8
    e15c:	bd70      	pop	{r4, r5, r6, pc}
    e15e:	bf00      	nop
    e160:	40021000 	.word	0x40021000
    e164:	0000ec48 	.word	0x0000ec48

0000e168 <am_hal_pwrctrl_low_power_init>:
    e168:	b530      	push	{r4, r5, lr}
    e16a:	4b69      	ldr	r3, [pc, #420]	; (e310 <am_hal_pwrctrl_low_power_init+0x1a8>)
    e16c:	681a      	ldr	r2, [r3, #0]
    e16e:	b085      	sub	sp, #20
    e170:	b912      	cbnz	r2, e178 <am_hal_pwrctrl_low_power_init+0x10>
    e172:	4a68      	ldr	r2, [pc, #416]	; (e314 <am_hal_pwrctrl_low_power_init+0x1ac>)
    e174:	6812      	ldr	r2, [r2, #0]
    e176:	601a      	str	r2, [r3, #0]
    e178:	4b67      	ldr	r3, [pc, #412]	; (e318 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e17a:	68db      	ldr	r3, [r3, #12]
    e17c:	b2db      	uxtb	r3, r3
    e17e:	2b12      	cmp	r3, #18
    e180:	d104      	bne.n	e18c <am_hal_pwrctrl_low_power_init+0x24>
    e182:	4c66      	ldr	r4, [pc, #408]	; (e31c <am_hal_pwrctrl_low_power_init+0x1b4>)
    e184:	6863      	ldr	r3, [r4, #4]
    e186:	07d8      	lsls	r0, r3, #31
    e188:	f100 8088 	bmi.w	e29c <am_hal_pwrctrl_low_power_init+0x134>
    e18c:	4b62      	ldr	r3, [pc, #392]	; (e318 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e18e:	68da      	ldr	r2, [r3, #12]
    e190:	b2d2      	uxtb	r2, r2
    e192:	2a20      	cmp	r2, #32
    e194:	d934      	bls.n	e200 <am_hal_pwrctrl_low_power_init+0x98>
    e196:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
    e19a:	2002      	movs	r0, #2
    e19c:	f360 4213 	bfi	r2, r0, #16, #4
    e1a0:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    e1a4:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
    e1a8:	2203      	movs	r2, #3
    e1aa:	f362 5117 	bfi	r1, r2, #20, #4
    e1ae:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
    e1b2:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e1b6:	2405      	movs	r4, #5
    e1b8:	f364 0103 	bfi	r1, r4, #0, #4
    e1bc:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e1c0:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e1c4:	f360 1107 	bfi	r1, r0, #4, #4
    e1c8:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e1cc:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e1d0:	2406      	movs	r4, #6
    e1d2:	f364 210b 	bfi	r1, r4, #8, #4
    e1d6:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e1da:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e1de:	2001      	movs	r0, #1
    e1e0:	f360 310f 	bfi	r1, r0, #12, #4
    e1e4:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e1e8:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e1ec:	f362 61de 	bfi	r1, r2, #27, #4
    e1f0:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e1f4:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
    e1f8:	f362 0103 	bfi	r1, r2, #0, #4
    e1fc:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
    e200:	4a45      	ldr	r2, [pc, #276]	; (e318 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e202:	68d3      	ldr	r3, [r2, #12]
    e204:	b2db      	uxtb	r3, r3
    e206:	2b11      	cmp	r3, #17
    e208:	d905      	bls.n	e216 <am_hal_pwrctrl_low_power_init+0xae>
    e20a:	f8d2 335c 	ldr.w	r3, [r2, #860]	; 0x35c
    e20e:	f36f 6318 	bfc	r3, #24, #1
    e212:	f8c2 335c 	str.w	r3, [r2, #860]	; 0x35c
    e216:	2100      	movs	r1, #0
    e218:	200c      	movs	r0, #12
    e21a:	f7ff f955 	bl	d4c8 <am_hal_cachectrl_control>
    e21e:	4b3f      	ldr	r3, [pc, #252]	; (e31c <am_hal_pwrctrl_low_power_init+0x1b4>)
    e220:	699b      	ldr	r3, [r3, #24]
    e222:	f3c3 2500 	ubfx	r5, r3, #8, #1
    e226:	05db      	lsls	r3, r3, #23
    e228:	d420      	bmi.n	e26c <am_hal_pwrctrl_low_power_init+0x104>
    e22a:	4c3b      	ldr	r4, [pc, #236]	; (e318 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e22c:	68e3      	ldr	r3, [r4, #12]
    e22e:	b2db      	uxtb	r3, r3
    e230:	2b11      	cmp	r3, #17
    e232:	d84e      	bhi.n	e2d2 <am_hal_pwrctrl_low_power_init+0x16a>
    e234:	4c38      	ldr	r4, [pc, #224]	; (e318 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e236:	493a      	ldr	r1, [pc, #232]	; (e320 <am_hal_pwrctrl_low_power_init+0x1b8>)
    e238:	7e22      	ldrb	r2, [r4, #24]
    e23a:	2001      	movs	r0, #1
    e23c:	4302      	orrs	r2, r0
    e23e:	2307      	movs	r3, #7
    e240:	7622      	strb	r2, [r4, #24]
    e242:	9000      	str	r0, [sp, #0]
    e244:	461a      	mov	r2, r3
    e246:	f242 7010 	movw	r0, #10000	; 0x2710
    e24a:	f7ff fb81 	bl	d950 <am_hal_flash_delay_status_check>
    e24e:	2800      	cmp	r0, #0
    e250:	d15a      	bne.n	e308 <am_hal_pwrctrl_low_power_init+0x1a0>
    e252:	4b32      	ldr	r3, [pc, #200]	; (e31c <am_hal_pwrctrl_low_power_init+0x1b4>)
    e254:	681a      	ldr	r2, [r3, #0]
    e256:	f042 0201 	orr.w	r2, r2, #1
    e25a:	601a      	str	r2, [r3, #0]
    e25c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    e25e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    e262:	625a      	str	r2, [r3, #36]	; 0x24
    e264:	68e3      	ldr	r3, [r4, #12]
    e266:	b2db      	uxtb	r3, r3
    e268:	2b11      	cmp	r3, #17
    e26a:	d002      	beq.n	e272 <am_hal_pwrctrl_low_power_init+0x10a>
    e26c:	2000      	movs	r0, #0
    e26e:	b005      	add	sp, #20
    e270:	bd30      	pop	{r4, r5, pc}
    e272:	f8d4 335c 	ldr.w	r3, [r4, #860]	; 0x35c
    e276:	f360 5356 	bfi	r3, r0, #21, #2
    e27a:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
    e27e:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e282:	220f      	movs	r2, #15
    e284:	f362 138b 	bfi	r3, r2, #6, #6
    e288:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e28c:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e290:	f362 0305 	bfi	r3, r2, #0, #6
    e294:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e298:	b005      	add	sp, #20
    e29a:	bd30      	pop	{r4, r5, pc}
    e29c:	f7ff fd12 	bl	dcc4 <am_hal_interrupt_master_disable>
    e2a0:	9002      	str	r0, [sp, #8]
    e2a2:	68a3      	ldr	r3, [r4, #8]
    e2a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    e2a8:	60a3      	str	r3, [r4, #8]
    e2aa:	9802      	ldr	r0, [sp, #8]
    e2ac:	f7ff fd0e 	bl	dccc <am_hal_interrupt_master_set>
    e2b0:	20a0      	movs	r0, #160	; 0xa0
    e2b2:	f7ff fb3d 	bl	d930 <am_hal_flash_delay>
    e2b6:	69a3      	ldr	r3, [r4, #24]
    e2b8:	0619      	lsls	r1, r3, #24
    e2ba:	d403      	bmi.n	e2c4 <am_hal_pwrctrl_low_power_init+0x15c>
    e2bc:	20a0      	movs	r0, #160	; 0xa0
    e2be:	f7ff fb37 	bl	d930 <am_hal_flash_delay>
    e2c2:	69a3      	ldr	r3, [r4, #24]
    e2c4:	4b15      	ldr	r3, [pc, #84]	; (e31c <am_hal_pwrctrl_low_power_init+0x1b4>)
    e2c6:	699b      	ldr	r3, [r3, #24]
    e2c8:	061a      	lsls	r2, r3, #24
    e2ca:	f53f af5f 	bmi.w	e18c <am_hal_pwrctrl_low_power_init+0x24>
    e2ce:	2001      	movs	r0, #1
    e2d0:	e7cd      	b.n	e26e <am_hal_pwrctrl_low_power_init+0x106>
    e2d2:	f7ff fcf7 	bl	dcc4 <am_hal_interrupt_master_disable>
    e2d6:	9003      	str	r0, [sp, #12]
    e2d8:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e2dc:	2219      	movs	r2, #25
    e2de:	f362 138b 	bfi	r3, r2, #6, #6
    e2e2:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e2e6:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
    e2ea:	210c      	movs	r1, #12
    e2ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e2f0:	f361 0205 	bfi	r2, r1, #0, #6
    e2f4:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
    e2f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    e2fa:	f365 5296 	bfi	r2, r5, #22, #1
    e2fe:	63da      	str	r2, [r3, #60]	; 0x3c
    e300:	9803      	ldr	r0, [sp, #12]
    e302:	f7ff fce3 	bl	dccc <am_hal_interrupt_master_set>
    e306:	e795      	b.n	e234 <am_hal_pwrctrl_low_power_init+0xcc>
    e308:	2004      	movs	r0, #4
    e30a:	b005      	add	sp, #20
    e30c:	bd30      	pop	{r4, r5, pc}
    e30e:	bf00      	nop
    e310:	10001144 	.word	0x10001144
    e314:	4ffff000 	.word	0x4ffff000
    e318:	40020000 	.word	0x40020000
    e31c:	40021000 	.word	0x40021000
    e320:	40020018 	.word	0x40020018

0000e324 <am_hal_rtc_osc_disable>:
    e324:	4a03      	ldr	r2, [pc, #12]	; (e334 <am_hal_rtc_osc_disable+0x10>)
    e326:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    e32a:	f043 0310 	orr.w	r3, r3, #16
    e32e:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    e332:	4770      	bx	lr
    e334:	40004200 	.word	0x40004200

0000e338 <am_hal_sysctrl_sleep>:
    e338:	b510      	push	{r4, lr}
    e33a:	b082      	sub	sp, #8
    e33c:	4604      	mov	r4, r0
    e33e:	f7ff fcc1 	bl	dcc4 <am_hal_interrupt_master_disable>
    e342:	9001      	str	r0, [sp, #4]
    e344:	b124      	cbz	r4, e350 <am_hal_sysctrl_sleep+0x18>
    e346:	4b12      	ldr	r3, [pc, #72]	; (e390 <am_hal_sysctrl_sleep+0x58>)
    e348:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    e34c:	07db      	lsls	r3, r3, #31
    e34e:	d513      	bpl.n	e378 <am_hal_sysctrl_sleep+0x40>
    e350:	4a10      	ldr	r2, [pc, #64]	; (e394 <am_hal_sysctrl_sleep+0x5c>)
    e352:	6913      	ldr	r3, [r2, #16]
    e354:	f023 0304 	bic.w	r3, r3, #4
    e358:	6113      	str	r3, [r2, #16]
    e35a:	f3bf 8f4f 	dsb	sy
    e35e:	4a0e      	ldr	r2, [pc, #56]	; (e398 <am_hal_sysctrl_sleep+0x60>)
    e360:	4b0e      	ldr	r3, [pc, #56]	; (e39c <am_hal_sysctrl_sleep+0x64>)
    e362:	6812      	ldr	r2, [r2, #0]
    e364:	601a      	str	r2, [r3, #0]
    e366:	bf30      	wfi
    e368:	f3bf 8f6f 	isb	sy
    e36c:	9801      	ldr	r0, [sp, #4]
    e36e:	b002      	add	sp, #8
    e370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e374:	f7ff bcaa 	b.w	dccc <am_hal_interrupt_master_set>
    e378:	4b09      	ldr	r3, [pc, #36]	; (e3a0 <am_hal_sysctrl_sleep+0x68>)
    e37a:	681a      	ldr	r2, [r3, #0]
    e37c:	b912      	cbnz	r2, e384 <am_hal_sysctrl_sleep+0x4c>
    e37e:	4a09      	ldr	r2, [pc, #36]	; (e3a4 <am_hal_sysctrl_sleep+0x6c>)
    e380:	6812      	ldr	r2, [r2, #0]
    e382:	601a      	str	r2, [r3, #0]
    e384:	4a03      	ldr	r2, [pc, #12]	; (e394 <am_hal_sysctrl_sleep+0x5c>)
    e386:	6913      	ldr	r3, [r2, #16]
    e388:	f043 0304 	orr.w	r3, r3, #4
    e38c:	6113      	str	r3, [r2, #16]
    e38e:	e7e4      	b.n	e35a <am_hal_sysctrl_sleep+0x22>
    e390:	40020000 	.word	0x40020000
    e394:	e000ed00 	.word	0xe000ed00
    e398:	5fff0000 	.word	0x5fff0000
    e39c:	10001148 	.word	0x10001148
    e3a0:	10001144 	.word	0x10001144
    e3a4:	4ffff000 	.word	0x4ffff000

0000e3a8 <am_hal_tpiu_enable>:
    e3a8:	b510      	push	{r4, lr}
    e3aa:	4b23      	ldr	r3, [pc, #140]	; (e438 <am_hal_tpiu_enable+0x90>)
    e3ac:	6804      	ldr	r4, [r0, #0]
    e3ae:	2200      	movs	r2, #0
    e3b0:	b084      	sub	sp, #16
    e3b2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    e3b6:	b334      	cbz	r4, e406 <am_hal_tpiu_enable+0x5e>
    e3b8:	4a20      	ldr	r2, [pc, #128]	; (e43c <am_hal_tpiu_enable+0x94>)
    e3ba:	4921      	ldr	r1, [pc, #132]	; (e440 <am_hal_tpiu_enable+0x98>)
    e3bc:	2001      	movs	r0, #1
    e3be:	6058      	str	r0, [r3, #4]
    e3c0:	f5a4 4361 	sub.w	r3, r4, #57600	; 0xe100
    e3c4:	a801      	add	r0, sp, #4
    e3c6:	428b      	cmp	r3, r1
    e3c8:	bf88      	it	hi
    e3ca:	4614      	movhi	r4, r2
    e3cc:	f7ff fa92 	bl	d8f4 <am_hal_clkgen_status_get>
    e3d0:	9b01      	ldr	r3, [sp, #4]
    e3d2:	1c5a      	adds	r2, r3, #1
    e3d4:	d02d      	beq.n	e432 <am_hal_tpiu_enable+0x8a>
    e3d6:	08db      	lsrs	r3, r3, #3
    e3d8:	fbb3 f4f4 	udiv	r4, r3, r4
    e3dc:	3c01      	subs	r4, #1
    e3de:	b2a4      	uxth	r4, r4
    e3e0:	4b15      	ldr	r3, [pc, #84]	; (e438 <am_hal_tpiu_enable+0x90>)
    e3e2:	4a18      	ldr	r2, [pc, #96]	; (e444 <am_hal_tpiu_enable+0x9c>)
    e3e4:	611c      	str	r4, [r3, #16]
    e3e6:	2102      	movs	r1, #2
    e3e8:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
    e3ec:	2000      	movs	r0, #0
    e3ee:	f240 2101 	movw	r1, #513	; 0x201
    e3f2:	f8c3 0f00 	str.w	r0, [r3, #3840]	; 0xf00
    e3f6:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
    e3fa:	f44f 7048 	mov.w	r0, #800	; 0x320
    e3fe:	f7ff fa97 	bl	d930 <am_hal_flash_delay>
    e402:	b004      	add	sp, #16
    e404:	bd10      	pop	{r4, pc}
    e406:	6902      	ldr	r2, [r0, #16]
    e408:	611a      	str	r2, [r3, #16]
    e40a:	6882      	ldr	r2, [r0, #8]
    e40c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    e410:	68c1      	ldr	r1, [r0, #12]
    e412:	2201      	movs	r2, #1
    e414:	3901      	subs	r1, #1
    e416:	408a      	lsls	r2, r1
    e418:	605a      	str	r2, [r3, #4]
    e41a:	f8c3 4f00 	str.w	r4, [r3, #3840]	; 0xf00
    e41e:	4a09      	ldr	r2, [pc, #36]	; (e444 <am_hal_tpiu_enable+0x9c>)
    e420:	6843      	ldr	r3, [r0, #4]
    e422:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    e426:	f44f 7048 	mov.w	r0, #800	; 0x320
    e42a:	f7ff fa81 	bl	d930 <am_hal_flash_delay>
    e42e:	b004      	add	sp, #16
    e430:	bd10      	pop	{r4, pc}
    e432:	2405      	movs	r4, #5
    e434:	e7d4      	b.n	e3e0 <am_hal_tpiu_enable+0x38>
    e436:	bf00      	nop
    e438:	e0040000 	.word	0xe0040000
    e43c:	000f4240 	.word	0x000f4240
    e440:	001da380 	.word	0x001da380
    e444:	40020000 	.word	0x40020000

0000e448 <am_hal_uart_deinitialize>:
    e448:	b170      	cbz	r0, e468 <am_hal_uart_deinitialize+0x20>
    e44a:	6803      	ldr	r3, [r0, #0]
    e44c:	4a07      	ldr	r2, [pc, #28]	; (e46c <am_hal_uart_deinitialize+0x24>)
    e44e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e452:	4293      	cmp	r3, r2
    e454:	d108      	bne.n	e468 <am_hal_uart_deinitialize+0x20>
    e456:	78c2      	ldrb	r2, [r0, #3]
    e458:	2300      	movs	r3, #0
    e45a:	f36f 0200 	bfc	r2, #0, #1
    e45e:	70c2      	strb	r2, [r0, #3]
    e460:	6243      	str	r3, [r0, #36]	; 0x24
    e462:	7103      	strb	r3, [r0, #4]
    e464:	4618      	mov	r0, r3
    e466:	4770      	bx	lr
    e468:	2002      	movs	r0, #2
    e46a:	4770      	bx	lr
    e46c:	01ea9e06 	.word	0x01ea9e06

0000e470 <am_hal_uart_power_control>:
    e470:	b5f0      	push	{r4, r5, r6, r7, lr}
    e472:	4604      	mov	r4, r0
    e474:	6800      	ldr	r0, [r0, #0]
    e476:	4b39      	ldr	r3, [pc, #228]	; (e55c <am_hal_uart_power_control+0xec>)
    e478:	f020 467e 	bic.w	r6, r0, #4261412864	; 0xfe000000
    e47c:	429e      	cmp	r6, r3
    e47e:	b085      	sub	sp, #20
    e480:	d13f      	bne.n	e502 <am_hal_uart_power_control+0x92>
    e482:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e484:	f105 0008 	add.w	r0, r5, #8
    e488:	b2c7      	uxtb	r7, r0
    e48a:	b189      	cbz	r1, e4b0 <am_hal_uart_power_control+0x40>
    e48c:	3901      	subs	r1, #1
    e48e:	2901      	cmp	r1, #1
    e490:	d834      	bhi.n	e4fc <am_hal_uart_power_control+0x8c>
    e492:	2a00      	cmp	r2, #0
    e494:	d138      	bne.n	e508 <am_hal_uart_power_control+0x98>
    e496:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e49a:	351c      	adds	r5, #28
    e49c:	032d      	lsls	r5, r5, #12
    e49e:	f04f 33ff 	mov.w	r3, #4294967295
    e4a2:	646b      	str	r3, [r5, #68]	; 0x44
    e4a4:	4638      	mov	r0, r7
    e4a6:	f7ff fe33 	bl	e110 <am_hal_pwrctrl_periph_disable>
    e4aa:	2000      	movs	r0, #0
    e4ac:	b005      	add	sp, #20
    e4ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e4b0:	2a00      	cmp	r2, #0
    e4b2:	d04a      	beq.n	e54a <am_hal_uart_power_control+0xda>
    e4b4:	7923      	ldrb	r3, [r4, #4]
    e4b6:	2b00      	cmp	r3, #0
    e4b8:	d04e      	beq.n	e558 <am_hal_uart_power_control+0xe8>
    e4ba:	4638      	mov	r0, r7
    e4bc:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e4c0:	9101      	str	r1, [sp, #4]
    e4c2:	351c      	adds	r5, #28
    e4c4:	f7ff fdfa 	bl	e0bc <am_hal_pwrctrl_periph_enable>
    e4c8:	f7ff fbfc 	bl	dcc4 <am_hal_interrupt_master_disable>
    e4cc:	032d      	lsls	r5, r5, #12
    e4ce:	68a3      	ldr	r3, [r4, #8]
    e4d0:	9002      	str	r0, [sp, #8]
    e4d2:	622b      	str	r3, [r5, #32]
    e4d4:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    e4d8:	626a      	str	r2, [r5, #36]	; 0x24
    e4da:	62ab      	str	r3, [r5, #40]	; 0x28
    e4dc:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
    e4e0:	62ea      	str	r2, [r5, #44]	; 0x2c
    e4e2:	632b      	str	r3, [r5, #48]	; 0x30
    e4e4:	e9d4 2307 	ldrd	r2, r3, [r4, #28]
    e4e8:	9901      	ldr	r1, [sp, #4]
    e4ea:	636a      	str	r2, [r5, #52]	; 0x34
    e4ec:	63ab      	str	r3, [r5, #56]	; 0x38
    e4ee:	9802      	ldr	r0, [sp, #8]
    e4f0:	7121      	strb	r1, [r4, #4]
    e4f2:	f7ff fbeb 	bl	dccc <am_hal_interrupt_master_set>
    e4f6:	9901      	ldr	r1, [sp, #4]
    e4f8:	4608      	mov	r0, r1
    e4fa:	e000      	b.n	e4fe <am_hal_uart_power_control+0x8e>
    e4fc:	2006      	movs	r0, #6
    e4fe:	b005      	add	sp, #20
    e500:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e502:	2002      	movs	r0, #2
    e504:	b005      	add	sp, #20
    e506:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e508:	f7ff fbdc 	bl	dcc4 <am_hal_interrupt_master_disable>
    e50c:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e510:	351c      	adds	r5, #28
    e512:	032d      	lsls	r5, r5, #12
    e514:	9003      	str	r0, [sp, #12]
    e516:	6a2b      	ldr	r3, [r5, #32]
    e518:	60a3      	str	r3, [r4, #8]
    e51a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e51c:	60e3      	str	r3, [r4, #12]
    e51e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e520:	6123      	str	r3, [r4, #16]
    e522:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    e524:	6163      	str	r3, [r4, #20]
    e526:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    e528:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    e52a:	61a3      	str	r3, [r4, #24]
    e52c:	6bab      	ldr	r3, [r5, #56]	; 0x38
    e52e:	61e2      	str	r2, [r4, #28]
    e530:	2201      	movs	r2, #1
    e532:	6223      	str	r3, [r4, #32]
    e534:	9803      	ldr	r0, [sp, #12]
    e536:	7122      	strb	r2, [r4, #4]
    e538:	f7ff fbc8 	bl	dccc <am_hal_interrupt_master_set>
    e53c:	6823      	ldr	r3, [r4, #0]
    e53e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e542:	42b3      	cmp	r3, r6
    e544:	d1ae      	bne.n	e4a4 <am_hal_uart_power_control+0x34>
    e546:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e548:	e7a5      	b.n	e496 <am_hal_uart_power_control+0x26>
    e54a:	4638      	mov	r0, r7
    e54c:	9201      	str	r2, [sp, #4]
    e54e:	f7ff fdb5 	bl	e0bc <am_hal_pwrctrl_periph_enable>
    e552:	9a01      	ldr	r2, [sp, #4]
    e554:	4610      	mov	r0, r2
    e556:	e7d2      	b.n	e4fe <am_hal_uart_power_control+0x8e>
    e558:	2007      	movs	r0, #7
    e55a:	e7d0      	b.n	e4fe <am_hal_uart_power_control+0x8e>
    e55c:	01ea9e06 	.word	0x01ea9e06

0000e560 <am_hal_uart_tx_flush>:
    e560:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    e564:	b570      	push	{r4, r5, r6, lr}
    e566:	6a45      	ldr	r5, [r0, #36]	; 0x24
    e568:	4604      	mov	r4, r0
    e56a:	b15b      	cbz	r3, e584 <am_hal_uart_tx_flush+0x24>
    e56c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    e56e:	b14b      	cbz	r3, e584 <am_hal_uart_tx_flush+0x24>
    e570:	4e0e      	ldr	r6, [pc, #56]	; (e5ac <am_hal_uart_tx_flush+0x4c>)
    e572:	6e20      	ldr	r0, [r4, #96]	; 0x60
    e574:	fbb6 f0f0 	udiv	r0, r6, r0
    e578:	0100      	lsls	r0, r0, #4
    e57a:	f7ff f9d9 	bl	d930 <am_hal_flash_delay>
    e57e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e580:	2b00      	cmp	r3, #0
    e582:	d1f6      	bne.n	e572 <am_hal_uart_tx_flush+0x12>
    e584:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e588:	351c      	adds	r5, #28
    e58a:	032d      	lsls	r5, r5, #12
    e58c:	69ab      	ldr	r3, [r5, #24]
    e58e:	071a      	lsls	r2, r3, #28
    e590:	d509      	bpl.n	e5a6 <am_hal_uart_tx_flush+0x46>
    e592:	4e06      	ldr	r6, [pc, #24]	; (e5ac <am_hal_uart_tx_flush+0x4c>)
    e594:	6e23      	ldr	r3, [r4, #96]	; 0x60
    e596:	fbb6 f3f3 	udiv	r3, r6, r3
    e59a:	0118      	lsls	r0, r3, #4
    e59c:	f7ff f9c8 	bl	d930 <am_hal_flash_delay>
    e5a0:	69ab      	ldr	r3, [r5, #24]
    e5a2:	071b      	lsls	r3, r3, #28
    e5a4:	d4f6      	bmi.n	e594 <am_hal_uart_tx_flush+0x34>
    e5a6:	2000      	movs	r0, #0
    e5a8:	bd70      	pop	{r4, r5, r6, pc}
    e5aa:	bf00      	nop
    e5ac:	00b71b00 	.word	0x00b71b00
    e5b0:	6c6c6548 	.word	0x6c6c6548
    e5b4:	6146206f 	.word	0x6146206f
    e5b8:	2e746c75 	.word	0x2e746c75
    e5bc:	00000a0a 	.word	0x00000a0a
    e5c0:	69206e41 	.word	0x69206e41
    e5c4:	67656c6c 	.word	0x67656c6c
    e5c8:	6d206c61 	.word	0x6d206c61
    e5cc:	726f6d65 	.word	0x726f6d65
    e5d0:	63612079 	.word	0x63612079
    e5d4:	73736563 	.word	0x73736563
    e5d8:	6c697720 	.word	0x6c697720
    e5dc:	636f206c 	.word	0x636f206c
    e5e0:	20727563 	.word	0x20727563
    e5e4:	7478656e 	.word	0x7478656e
    e5e8:	6877202c 	.word	0x6877202c
    e5ec:	20686369 	.word	0x20686369
    e5f0:	6c6c6977 	.word	0x6c6c6977
    e5f4:	65786520 	.word	0x65786520
    e5f8:	65747563 	.word	0x65747563
    e5fc:	65687420 	.word	0x65687420
    e600:	7478650a 	.word	0x7478650a
    e604:	65646e65 	.word	0x65646e65
    e608:	61662064 	.word	0x61662064
    e60c:	20746c75 	.word	0x20746c75
    e610:	646e6168 	.word	0x646e6168
    e614:	2072656c 	.word	0x2072656c
    e618:	61206f74 	.word	0x61206f74
    e61c:	73697373 	.word	0x73697373
    e620:	6e692074 	.word	0x6e692074
    e624:	63656420 	.word	0x63656420
    e628:	6e69646f 	.word	0x6e69646f
    e62c:	68742067 	.word	0x68742067
    e630:	61662065 	.word	0x61662065
    e634:	2e746c75 	.word	0x2e746c75
    e638:	0000000a 	.word	0x0000000a
    e63c:	206e490a 	.word	0x206e490a
    e640:	6564726f 	.word	0x6564726f
    e644:	6f742072 	.word	0x6f742072
    e648:	69727020 	.word	0x69727020
    e64c:	6f20746e 	.word	0x6f20746e
    e650:	74207475 	.word	0x74207475
    e654:	66206568 	.word	0x66206568
    e658:	746c7561 	.word	0x746c7561
    e65c:	666e6920 	.word	0x666e6920
    e660:	616d726f 	.word	0x616d726f
    e664:	6e6f6974 	.word	0x6e6f6974
    e668:	726f6620 	.word	0x726f6620
    e66c:	69687420 	.word	0x69687420
    e670:	78652073 	.word	0x78652073
    e674:	6c706d61 	.word	0x6c706d61
    e678:	20610a65 	.word	0x20610a65
    e67c:	7263616d 	.word	0x7263616d
    e680:	41202c6f 	.word	0x41202c6f
    e684:	54555f4d 	.word	0x54555f4d
    e688:	465f4c49 	.word	0x465f4c49
    e68c:	544c5541 	.word	0x544c5541
    e690:	5f525349 	.word	0x5f525349
    e694:	4e495250 	.word	0x4e495250
    e698:	68202c54 	.word	0x68202c54
    e69c:	62207361 	.word	0x62207361
    e6a0:	206e6565 	.word	0x206e6565
    e6a4:	69666564 	.word	0x69666564
    e6a8:	2064656e 	.word	0x2064656e
    e6ac:	74206e69 	.word	0x74206e69
    e6b0:	62206568 	.word	0x62206568
    e6b4:	646c6975 	.word	0x646c6975
    e6b8:	766e650a 	.word	0x766e650a
    e6bc:	6e6f7269 	.word	0x6e6f7269
    e6c0:	746e656d 	.word	0x746e656d
    e6c4:	4f20202e 	.word	0x4f20202e
    e6c8:	72656874 	.word	0x72656874
    e6cc:	65736977 	.word	0x65736977
    e6d0:	65687420 	.word	0x65687420
    e6d4:	75616620 	.word	0x75616620
    e6d8:	6420746c 	.word	0x6420746c
    e6dc:	20617461 	.word	0x20617461
    e6e0:	206e6163 	.word	0x206e6163
    e6e4:	796c6e6f 	.word	0x796c6e6f
    e6e8:	20656220 	.word	0x20656220
    e6ec:	6d617865 	.word	0x6d617865
    e6f0:	64656e69 	.word	0x64656e69
    e6f4:	7269640a 	.word	0x7269640a
    e6f8:	6c746365 	.word	0x6c746365
    e6fc:	6e692079 	.word	0x6e692079
    e700:	65687420 	.word	0x65687420
    e704:	52534920 	.word	0x52534920
    e708:	6f726620 	.word	0x6f726620
    e70c:	2061206d 	.word	0x2061206d
    e710:	75626564 	.word	0x75626564
    e714:	72656767 	.word	0x72656767
    e718:	000a0a2e 	.word	0x000a0a2e
    e71c:	63726f46 	.word	0x63726f46
    e720:	20676e69 	.word	0x20676e69
    e724:	20656874 	.word	0x20656874
    e728:	6c756166 	.word	0x6c756166
    e72c:	6f6e2074 	.word	0x6f6e2074
    e730:	2e2e2077 	.word	0x2e2e2077
    e734:	000a0a2e 	.word	0x000a0a2e
    e738:	64726148 	.word	0x64726148
    e73c:	75614620 	.word	0x75614620
    e740:	7320746c 	.word	0x7320746c
    e744:	6b636174 	.word	0x6b636174
    e748:	64206465 	.word	0x64206465
    e74c:	3a617461 	.word	0x3a617461
    e750:	0000000a 	.word	0x0000000a
    e754:	20202020 	.word	0x20202020
    e758:	20203052 	.word	0x20203052
    e75c:	7830203d 	.word	0x7830203d
    e760:	58383025 	.word	0x58383025
    e764:	0000000a 	.word	0x0000000a
    e768:	20202020 	.word	0x20202020
    e76c:	20203152 	.word	0x20203152
    e770:	7830203d 	.word	0x7830203d
    e774:	58383025 	.word	0x58383025
    e778:	0000000a 	.word	0x0000000a
    e77c:	20202020 	.word	0x20202020
    e780:	20203252 	.word	0x20203252
    e784:	7830203d 	.word	0x7830203d
    e788:	58383025 	.word	0x58383025
    e78c:	0000000a 	.word	0x0000000a
    e790:	20202020 	.word	0x20202020
    e794:	20203352 	.word	0x20203352
    e798:	7830203d 	.word	0x7830203d
    e79c:	58383025 	.word	0x58383025
    e7a0:	0000000a 	.word	0x0000000a
    e7a4:	20202020 	.word	0x20202020
    e7a8:	20323152 	.word	0x20323152
    e7ac:	7830203d 	.word	0x7830203d
    e7b0:	58383025 	.word	0x58383025
    e7b4:	0000000a 	.word	0x0000000a
    e7b8:	20202020 	.word	0x20202020
    e7bc:	2020524c 	.word	0x2020524c
    e7c0:	7830203d 	.word	0x7830203d
    e7c4:	58383025 	.word	0x58383025
    e7c8:	0000000a 	.word	0x0000000a
    e7cc:	20202020 	.word	0x20202020
    e7d0:	20204350 	.word	0x20204350
    e7d4:	7830203d 	.word	0x7830203d
    e7d8:	58383025 	.word	0x58383025
    e7dc:	0000000a 	.word	0x0000000a
    e7e0:	20202020 	.word	0x20202020
    e7e4:	20525350 	.word	0x20525350
    e7e8:	7830203d 	.word	0x7830203d
    e7ec:	58383025 	.word	0x58383025
    e7f0:	0000000a 	.word	0x0000000a
    e7f4:	6568744f 	.word	0x6568744f
    e7f8:	61482072 	.word	0x61482072
    e7fc:	46206472 	.word	0x46206472
    e800:	746c7561 	.word	0x746c7561
    e804:	74616420 	.word	0x74616420
    e808:	000a3a61 	.word	0x000a3a61
    e80c:	20202020 	.word	0x20202020
    e810:	6c756146 	.word	0x6c756146
    e814:	64612074 	.word	0x64612074
    e818:	73657264 	.word	0x73657264
    e81c:	203d2073 	.word	0x203d2073
    e820:	30257830 	.word	0x30257830
    e824:	000a5838 	.word	0x000a5838
    e828:	20202020 	.word	0x20202020
    e82c:	52414642 	.word	0x52414642
    e830:	75422820 	.word	0x75422820
    e834:	61462073 	.word	0x61462073
    e838:	20746c75 	.word	0x20746c75
    e83c:	72646441 	.word	0x72646441
    e840:	67655220 	.word	0x67655220
    e844:	203d2029 	.word	0x203d2029
    e848:	30257830 	.word	0x30257830
    e84c:	000a5838 	.word	0x000a5838
    e850:	20202020 	.word	0x20202020
    e854:	52534d4d 	.word	0x52534d4d
    e858:	654d2820 	.word	0x654d2820
    e85c:	674d206d 	.word	0x674d206d
    e860:	4620746d 	.word	0x4620746d
    e864:	746c7561 	.word	0x746c7561
    e868:	61745320 	.word	0x61745320
    e86c:	20737574 	.word	0x20737574
    e870:	29676552 	.word	0x29676552
    e874:	30203d20 	.word	0x30203d20
    e878:	32302578 	.word	0x32302578
    e87c:	00000a58 	.word	0x00000a58
    e880:	20202020 	.word	0x20202020
    e884:	52534642 	.word	0x52534642
    e888:	75422820 	.word	0x75422820
    e88c:	61462073 	.word	0x61462073
    e890:	20746c75 	.word	0x20746c75
    e894:	74617453 	.word	0x74617453
    e898:	52207375 	.word	0x52207375
    e89c:	20296765 	.word	0x20296765
    e8a0:	7830203d 	.word	0x7830203d
    e8a4:	58323025 	.word	0x58323025
    e8a8:	0000000a 	.word	0x0000000a
    e8ac:	20202020 	.word	0x20202020
    e8b0:	52534655 	.word	0x52534655
    e8b4:	73552820 	.word	0x73552820
    e8b8:	20656761 	.word	0x20656761
    e8bc:	6c756146 	.word	0x6c756146
    e8c0:	74532074 	.word	0x74532074
    e8c4:	73757461 	.word	0x73757461
    e8c8:	67655220 	.word	0x67655220
    e8cc:	203d2029 	.word	0x203d2029
    e8d0:	30257830 	.word	0x30257830
    e8d4:	000a5834 	.word	0x000a5834
    e8d8:	20202020 	.word	0x20202020
    e8dc:	20202020 	.word	0x20202020
    e8e0:	52534642 	.word	0x52534642
    e8e4:	74696220 	.word	0x74696220
    e8e8:	42203a37 	.word	0x42203a37
    e8ec:	56524146 	.word	0x56524146
    e8f0:	44494c41 	.word	0x44494c41
    e8f4:	0000000a 	.word	0x0000000a
    e8f8:	20202020 	.word	0x20202020
    e8fc:	20202020 	.word	0x20202020
    e900:	52534642 	.word	0x52534642
    e904:	74696220 	.word	0x74696220
    e908:	52203a36 	.word	0x52203a36
    e90c:	52455345 	.word	0x52455345
    e910:	0a444556 	.word	0x0a444556
    e914:	00000000 	.word	0x00000000
    e918:	20202020 	.word	0x20202020
    e91c:	20202020 	.word	0x20202020
    e920:	52534642 	.word	0x52534642
    e924:	74696220 	.word	0x74696220
    e928:	4c203a35 	.word	0x4c203a35
    e92c:	52455053 	.word	0x52455053
    e930:	00000a52 	.word	0x00000a52
    e934:	20202020 	.word	0x20202020
    e938:	20202020 	.word	0x20202020
    e93c:	52534642 	.word	0x52534642
    e940:	74696220 	.word	0x74696220
    e944:	53203a34 	.word	0x53203a34
    e948:	52454b54 	.word	0x52454b54
    e94c:	00000a52 	.word	0x00000a52
    e950:	20202020 	.word	0x20202020
    e954:	20202020 	.word	0x20202020
    e958:	52534642 	.word	0x52534642
    e95c:	74696220 	.word	0x74696220
    e960:	55203a33 	.word	0x55203a33
    e964:	4b54534e 	.word	0x4b54534e
    e968:	0a525245 	.word	0x0a525245
    e96c:	00000000 	.word	0x00000000
    e970:	20202020 	.word	0x20202020
    e974:	20202020 	.word	0x20202020
    e978:	52534642 	.word	0x52534642
    e97c:	74696220 	.word	0x74696220
    e980:	49203a32 	.word	0x49203a32
    e984:	4552504d 	.word	0x4552504d
    e988:	45534943 	.word	0x45534943
    e98c:	000a5252 	.word	0x000a5252
    e990:	20202020 	.word	0x20202020
    e994:	20202020 	.word	0x20202020
    e998:	52534642 	.word	0x52534642
    e99c:	74696220 	.word	0x74696220
    e9a0:	50203a31 	.word	0x50203a31
    e9a4:	49434552 	.word	0x49434552
    e9a8:	52454553 	.word	0x52454553
    e9ac:	00000a52 	.word	0x00000a52
    e9b0:	20202020 	.word	0x20202020
    e9b4:	20202020 	.word	0x20202020
    e9b8:	52534642 	.word	0x52534642
    e9bc:	74696220 	.word	0x74696220
    e9c0:	49203a30 	.word	0x49203a30
    e9c4:	45535542 	.word	0x45535542
    e9c8:	000a5252 	.word	0x000a5252
    e9cc:	2055434d 	.word	0x2055434d
    e9d0:	6c756146 	.word	0x6c756146
    e9d4:	61642074 	.word	0x61642074
    e9d8:	0a3a6174 	.word	0x0a3a6174
    e9dc:	00000000 	.word	0x00000000
    e9e0:	49202020 	.word	0x49202020
    e9e4:	45444f43 	.word	0x45444f43
    e9e8:	75614620 	.word	0x75614620
    e9ec:	4120746c 	.word	0x4120746c
    e9f0:	65726464 	.word	0x65726464
    e9f4:	203a7373 	.word	0x203a7373
    e9f8:	30257830 	.word	0x30257830
    e9fc:	000a5838 	.word	0x000a5838
    ea00:	44202020 	.word	0x44202020
    ea04:	45444f43 	.word	0x45444f43
    ea08:	75614620 	.word	0x75614620
    ea0c:	4120746c 	.word	0x4120746c
    ea10:	65726464 	.word	0x65726464
    ea14:	203a7373 	.word	0x203a7373
    ea18:	30257830 	.word	0x30257830
    ea1c:	000a5838 	.word	0x000a5838
    ea20:	53202020 	.word	0x53202020
    ea24:	46205359 	.word	0x46205359
    ea28:	746c7561 	.word	0x746c7561
    ea2c:	64644120 	.word	0x64644120
    ea30:	73736572 	.word	0x73736572
    ea34:	7830203a 	.word	0x7830203a
    ea38:	58383025 	.word	0x58383025
    ea3c:	0000000a 	.word	0x0000000a
    ea40:	0a0a0a0a 	.word	0x0a0a0a0a
    ea44:	0a0a0a0a 	.word	0x0a0a0a0a
    ea48:	0a0a0a0a 	.word	0x0a0a0a0a
    ea4c:	0a0a0a0a 	.word	0x0a0a0a0a
    ea50:	00000a0a 	.word	0x00000a0a

0000ea54 <g_AM_BSP_GPIO_ITM_SWO>:
    ea54:	00000002                                ....

0000ea58 <am_hal_cachectrl_defaults>:
    ea58:	00000308                                ....

0000ea5c <g_AM_HAL_GPIO_DISABLE>:
    ea5c:	00000003                                ....

0000ea60 <g_AM_HAL_GPIO_OUTPUT>:
    ea60:	00000403                                ....

0000ea64 <g_ui8Bit76Capabilities>:
    ea64:	02800101 80010180 80800101 80808080     ................
    ea74:	80808080 80808008 01800180 80808080     ................
    ea84:	80808080 01800402 01010401 80808080     ................
    ea94:	00000101                                ....

0000ea98 <g_ui8Inpen>:
    ea98:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
    eaa8:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
    eab8:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
    eac8:	00003130                                01..

0000eacc <g_ui8NCEtable>:
    eacc:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    eadc:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    eaec:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    eafc:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    eb0c:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    eb1c:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    eb2c:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    eb3c:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    eb4c:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    eb5c:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    eb6c:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    eb7c:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    eb8c:	32221202 43231303                       .."2..#C

0000eb94 <g_ui8nCEpins>:
    eb94:	02070707 00080802 01020202 01010101     ................
    eba4:	01010101 01010101 01010101 01010101     ................
    ebb4:	01010101 08010101 01010008 01010101     ................
    ebc4:	00000101                                ....

0000ebc8 <g_am_hal_mcuctrl_flash_size>:
    ebc8:	00004000 00008000 00010000 00020000     .@..............
    ebd8:	00040000 00080000 00100000 00200000     .............. .
    ebe8:	00180000 00000000 00000000 00000000     ................
	...

0000ec08 <g_am_hal_mcuctrl_sram_size>:
    ec08:	00004000 00008000 00010000 00020000     .@..............
    ec18:	00040000 00080000 00100000 00060000     ................
    ec28:	000c0000 00000000 00000000 00000000     ................
	...

0000ec48 <am_hal_pwrctrl_peripheral_control>:
	...
    ec54:	00000001 00000004 00000004 00000002     ................
    ec64:	00000008 00000008 00000004 00000008     ................
    ec74:	00000008 00000008 00000008 00000008     ................
    ec84:	00000010 00000010 00000010 00000020     ............ ...
    ec94:	00000010 00000010 00000040 00000010     ........@.......
    eca4:	00000010 00000080 00000004 00000004     ................
    ecb4:	00000100 00000004 00000004 00000200     ................
    ecc4:	00000020 00000020 00000400 00000004      ... ...........
    ecd4:	00000004 00000800 00000040 00000040     ........@...@...
    ece4:	00001000 00000080 00000080 00002000     ............. ..
    ecf4:	00000100 00000100                       ........
