
bin/apollo3_secbl.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 40 00 10 89 d8 00 00 f1 d8 00 00 1d ca 00 00     .@..............
    c010:	f3 d8 00 00 f3 d8 00 00 f3 d8 00 00 00 00 00 00     ................
	...
    c02c:	f5 d8 00 00 f5 d8 00 00 00 00 00 00 f5 d8 00 00     ................
    c03c:	f5 d8 00 00 f5 d8 00 00 f5 d8 00 00 f5 d8 00 00     ................
    c04c:	f5 d8 00 00 f5 d8 00 00 f5 d8 00 00 f5 d8 00 00     ................
    c05c:	f5 d8 00 00 f5 d8 00 00 f5 d8 00 00 f5 d8 00 00     ................
    c06c:	f5 d8 00 00 f5 d8 00 00 f5 d8 00 00 f5 d8 00 00     ................
    c07c:	f5 d8 00 00 f5 d8 00 00 f5 d8 00 00 f5 d8 00 00     ................
    c08c:	f5 d8 00 00 f5 d8 00 00 f5 d8 00 00 f5 d8 00 00     ................
    c09c:	f5 d8 00 00 f5 d8 00 00 f5 d8 00 00 f5 d8 00 00     ................
    c0ac:	f5 d8 00 00 f5 d8 00 00 f5 d8 00 00 f5 d8 00 00     ................
    c0bc:	f5 d8 00 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <memcpy>:
    c100:	4684      	mov	ip, r0
    c102:	ea41 0300 	orr.w	r3, r1, r0
    c106:	f013 0303 	ands.w	r3, r3, #3
    c10a:	d16d      	bne.n	c1e8 <memcpy+0xe8>
    c10c:	3a40      	subs	r2, #64	; 0x40
    c10e:	d341      	bcc.n	c194 <memcpy+0x94>
    c110:	f851 3b04 	ldr.w	r3, [r1], #4
    c114:	f840 3b04 	str.w	r3, [r0], #4
    c118:	f851 3b04 	ldr.w	r3, [r1], #4
    c11c:	f840 3b04 	str.w	r3, [r0], #4
    c120:	f851 3b04 	ldr.w	r3, [r1], #4
    c124:	f840 3b04 	str.w	r3, [r0], #4
    c128:	f851 3b04 	ldr.w	r3, [r1], #4
    c12c:	f840 3b04 	str.w	r3, [r0], #4
    c130:	f851 3b04 	ldr.w	r3, [r1], #4
    c134:	f840 3b04 	str.w	r3, [r0], #4
    c138:	f851 3b04 	ldr.w	r3, [r1], #4
    c13c:	f840 3b04 	str.w	r3, [r0], #4
    c140:	f851 3b04 	ldr.w	r3, [r1], #4
    c144:	f840 3b04 	str.w	r3, [r0], #4
    c148:	f851 3b04 	ldr.w	r3, [r1], #4
    c14c:	f840 3b04 	str.w	r3, [r0], #4
    c150:	f851 3b04 	ldr.w	r3, [r1], #4
    c154:	f840 3b04 	str.w	r3, [r0], #4
    c158:	f851 3b04 	ldr.w	r3, [r1], #4
    c15c:	f840 3b04 	str.w	r3, [r0], #4
    c160:	f851 3b04 	ldr.w	r3, [r1], #4
    c164:	f840 3b04 	str.w	r3, [r0], #4
    c168:	f851 3b04 	ldr.w	r3, [r1], #4
    c16c:	f840 3b04 	str.w	r3, [r0], #4
    c170:	f851 3b04 	ldr.w	r3, [r1], #4
    c174:	f840 3b04 	str.w	r3, [r0], #4
    c178:	f851 3b04 	ldr.w	r3, [r1], #4
    c17c:	f840 3b04 	str.w	r3, [r0], #4
    c180:	f851 3b04 	ldr.w	r3, [r1], #4
    c184:	f840 3b04 	str.w	r3, [r0], #4
    c188:	f851 3b04 	ldr.w	r3, [r1], #4
    c18c:	f840 3b04 	str.w	r3, [r0], #4
    c190:	3a40      	subs	r2, #64	; 0x40
    c192:	d2bd      	bcs.n	c110 <memcpy+0x10>
    c194:	3230      	adds	r2, #48	; 0x30
    c196:	d311      	bcc.n	c1bc <memcpy+0xbc>
    c198:	f851 3b04 	ldr.w	r3, [r1], #4
    c19c:	f840 3b04 	str.w	r3, [r0], #4
    c1a0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1a4:	f840 3b04 	str.w	r3, [r0], #4
    c1a8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1ac:	f840 3b04 	str.w	r3, [r0], #4
    c1b0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1b4:	f840 3b04 	str.w	r3, [r0], #4
    c1b8:	3a10      	subs	r2, #16
    c1ba:	d2ed      	bcs.n	c198 <memcpy+0x98>
    c1bc:	320c      	adds	r2, #12
    c1be:	d305      	bcc.n	c1cc <memcpy+0xcc>
    c1c0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1c4:	f840 3b04 	str.w	r3, [r0], #4
    c1c8:	3a04      	subs	r2, #4
    c1ca:	d2f9      	bcs.n	c1c0 <memcpy+0xc0>
    c1cc:	3204      	adds	r2, #4
    c1ce:	d008      	beq.n	c1e2 <memcpy+0xe2>
    c1d0:	07d2      	lsls	r2, r2, #31
    c1d2:	bf1c      	itt	ne
    c1d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c1d8:	f800 3b01 	strbne.w	r3, [r0], #1
    c1dc:	d301      	bcc.n	c1e2 <memcpy+0xe2>
    c1de:	880b      	ldrh	r3, [r1, #0]
    c1e0:	8003      	strh	r3, [r0, #0]
    c1e2:	4660      	mov	r0, ip
    c1e4:	4770      	bx	lr
    c1e6:	bf00      	nop
    c1e8:	2a08      	cmp	r2, #8
    c1ea:	d313      	bcc.n	c214 <memcpy+0x114>
    c1ec:	078b      	lsls	r3, r1, #30
    c1ee:	d08d      	beq.n	c10c <memcpy+0xc>
    c1f0:	f010 0303 	ands.w	r3, r0, #3
    c1f4:	d08a      	beq.n	c10c <memcpy+0xc>
    c1f6:	f1c3 0304 	rsb	r3, r3, #4
    c1fa:	1ad2      	subs	r2, r2, r3
    c1fc:	07db      	lsls	r3, r3, #31
    c1fe:	bf1c      	itt	ne
    c200:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c204:	f800 3b01 	strbne.w	r3, [r0], #1
    c208:	d380      	bcc.n	c10c <memcpy+0xc>
    c20a:	f831 3b02 	ldrh.w	r3, [r1], #2
    c20e:	f820 3b02 	strh.w	r3, [r0], #2
    c212:	e77b      	b.n	c10c <memcpy+0xc>
    c214:	3a04      	subs	r2, #4
    c216:	d3d9      	bcc.n	c1cc <memcpy+0xcc>
    c218:	3a01      	subs	r2, #1
    c21a:	f811 3b01 	ldrb.w	r3, [r1], #1
    c21e:	f800 3b01 	strb.w	r3, [r0], #1
    c222:	d2f9      	bcs.n	c218 <memcpy+0x118>
    c224:	780b      	ldrb	r3, [r1, #0]
    c226:	7003      	strb	r3, [r0, #0]
    c228:	784b      	ldrb	r3, [r1, #1]
    c22a:	7043      	strb	r3, [r0, #1]
    c22c:	788b      	ldrb	r3, [r1, #2]
    c22e:	7083      	strb	r3, [r0, #2]
    c230:	4660      	mov	r0, ip
    c232:	4770      	bx	lr

0000c234 <__aeabi_d2f>:
    c234:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c238:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c23c:	bf24      	itt	cs
    c23e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c242:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c246:	d90d      	bls.n	c264 <__aeabi_d2f+0x30>
    c248:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c24c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c250:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c254:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c258:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c25c:	bf08      	it	eq
    c25e:	f020 0001 	biceq.w	r0, r0, #1
    c262:	4770      	bx	lr
    c264:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c268:	d121      	bne.n	c2ae <__aeabi_d2f+0x7a>
    c26a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c26e:	bfbc      	itt	lt
    c270:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c274:	4770      	bxlt	lr
    c276:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c27a:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c27e:	f1c2 0218 	rsb	r2, r2, #24
    c282:	f1c2 0c20 	rsb	ip, r2, #32
    c286:	fa10 f30c 	lsls.w	r3, r0, ip
    c28a:	fa20 f002 	lsr.w	r0, r0, r2
    c28e:	bf18      	it	ne
    c290:	f040 0001 	orrne.w	r0, r0, #1
    c294:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c298:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c29c:	fa03 fc0c 	lsl.w	ip, r3, ip
    c2a0:	ea40 000c 	orr.w	r0, r0, ip
    c2a4:	fa23 f302 	lsr.w	r3, r3, r2
    c2a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c2ac:	e7cc      	b.n	c248 <__aeabi_d2f+0x14>
    c2ae:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c2b2:	d107      	bne.n	c2c4 <__aeabi_d2f+0x90>
    c2b4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c2b8:	bf1e      	ittt	ne
    c2ba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c2be:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c2c2:	4770      	bxne	lr
    c2c4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c2c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c2cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c2d0:	4770      	bx	lr
    c2d2:	bf00      	nop

0000c2d4 <flash_page_erase>:
//! @return Returns 0 on success
//
//*****************************************************************************
int
flash_page_erase(uint32_t addr)
{
    c2d4:	b500      	push	{lr}
    c2d6:	b085      	sub	sp, #20
    c2d8:	9001      	str	r0, [sp, #4]
    uint32_t ui32Page;
    uint32_t ui32Block;
    //
    // Calculate the flash page number.
    //
    ui32Page = AM_HAL_FLASH_ADDR2PAGE((uintptr_t)addr);
    c2da:	9b01      	ldr	r3, [sp, #4]
    c2dc:	0b5b      	lsrs	r3, r3, #13
    c2de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c2e2:	9303      	str	r3, [sp, #12]
    ui32Block = AM_HAL_FLASH_ADDR2INST((uint32_t)addr);
    c2e4:	9b01      	ldr	r3, [sp, #4]
    c2e6:	0cdb      	lsrs	r3, r3, #19
    c2e8:	f003 0301 	and.w	r3, r3, #1
    c2ec:	9302      	str	r3, [sp, #8]
    return am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY, ui32Block, ui32Page);
    c2ee:	9a03      	ldr	r2, [sp, #12]
    c2f0:	9902      	ldr	r1, [sp, #8]
    c2f2:	4804      	ldr	r0, [pc, #16]	; (c304 <flash_page_erase+0x30>)
    c2f4:	f001 fda2 	bl	de3c <am_hal_flash_page_erase>
    c2f8:	4603      	mov	r3, r0
}
    c2fa:	4618      	mov	r0, r3
    c2fc:	b005      	add	sp, #20
    c2fe:	f85d fb04 	ldr.w	pc, [sp], #4
    c302:	bf00      	nop
    c304:	12344321 	.word	0x12344321

0000c308 <main>:
// Main
//
//*****************************************************************************
int
main(void)
{
    c308:	b510      	push	{r4, lr}
    c30a:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
#endif

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c30e:	2100      	movs	r1, #0
    c310:	2000      	movs	r0, #0
    c312:	f001 fcd9 	bl	dcc8 <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c316:	48c9      	ldr	r0, [pc, #804]	; (c63c <main+0x334>)
    c318:	f001 fb2e 	bl	d978 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c31c:	f001 fb50 	bl	d9c0 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    c320:	f001 faea 	bl	d8f8 <am_bsp_low_power_init>

    //
    // Enable debug printf messages using ITM on SWO pin
    //
    am_bsp_itm_printf_enable();
    c324:	f001 fb08 	bl	d938 <am_bsp_itm_printf_enable>

    //
    // Clear the terminal and print the banner.
    //
    am_util_stdio_terminal_clear();
    c328:	f001 faa6 	bl	d878 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("This is Apollo3 Secondary Bootloader Template Program!\r\n\r\n");
    c32c:	48c4      	ldr	r0, [pc, #784]	; (c640 <main+0x338>)
    c32e:	f001 fa83 	bl	d838 <am_util_stdio_printf>

    //
    // Get chip specific info
    //
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_DEVICEID, &sDevice);
    c332:	f50d 5300 	add.w	r3, sp, #8192	; 0x2000
    c336:	f103 0308 	add.w	r3, r3, #8
    c33a:	4619      	mov	r1, r3
    c33c:	2001      	movs	r0, #1
    c33e:	f001 ffcd 	bl	e2dc <am_hal_mcuctrl_info_get>
    //
    // If INFO0->Security->PLONEXIT was not set, SBL will keep info0 open upon transferring to main image
    // This allows the secondary bootloader to use the keys in info0 to perform any necessary validations
    // of images and/or OTA upgrades
    //
    if (MCUCTRL->SHADOWVALID_b.INFO0_VALID && MCUCTRL->BOOTLOADER_b.PROTLOCK)
    c342:	4bc0      	ldr	r3, [pc, #768]	; (c644 <main+0x33c>)
    c344:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
    c348:	f3c3 0380 	ubfx	r3, r3, #2, #1
    c34c:	b2db      	uxtb	r3, r3
    c34e:	2b00      	cmp	r3, #0
    c350:	f000 80e1 	beq.w	c516 <main+0x20e>
    c354:	4bbb      	ldr	r3, [pc, #748]	; (c644 <main+0x33c>)
    c356:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
    c35a:	f3c3 0380 	ubfx	r3, r3, #2, #1
    c35e:	b2db      	uxtb	r3, r3
    c360:	2b00      	cmp	r3, #0
    c362:	f000 80d8 	beq.w	c516 <main+0x20e>
    {
        uint32_t *pCustKey = (uint32_t *)0x50021A00;
    c366:	4bb8      	ldr	r3, [pc, #736]	; (c648 <main+0x340>)
    c368:	f50d 5201 	add.w	r2, sp, #8256	; 0x2040
    c36c:	f102 0218 	add.w	r2, r2, #24
    c370:	6013      	str	r3, [r2, #0]
        uint32_t *pKek = (uint32_t *)0x50021800;
    c372:	4bb6      	ldr	r3, [pc, #728]	; (c64c <main+0x344>)
    c374:	f50d 5201 	add.w	r2, sp, #8256	; 0x2040
    c378:	f102 023c 	add.w	r2, r2, #60	; 0x3c
    c37c:	6013      	str	r3, [r2, #0]
        uint32_t *pAuthKey = (uint32_t *)0x50021880;
    c37e:	4bb4      	ldr	r3, [pc, #720]	; (c650 <main+0x348>)
    c380:	f50d 5201 	add.w	r2, sp, #8256	; 0x2040
    c384:	f102 0238 	add.w	r2, r2, #56	; 0x38
    c388:	6013      	str	r3, [r2, #0]
        // PROTLOCK Open
        // This should also mean that Customer key is accessible
        // All the infospace keys are available to be read - and used for OTA and image verification
        // In this template - we'll just print the values to confirm that we've access to it
        //
        am_util_stdio_printf("Customer Key: 0x%08x-0x%08x-0x%08x-0x%08x\r\n", pCustKey[0], pCustKey[1], pCustKey[2], pCustKey[3]);
    c38a:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c38e:	f103 0318 	add.w	r3, r3, #24
    c392:	681b      	ldr	r3, [r3, #0]
    c394:	6819      	ldr	r1, [r3, #0]
    c396:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c39a:	f103 0318 	add.w	r3, r3, #24
    c39e:	681b      	ldr	r3, [r3, #0]
    c3a0:	3304      	adds	r3, #4
    c3a2:	681a      	ldr	r2, [r3, #0]
    c3a4:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c3a8:	f103 0318 	add.w	r3, r3, #24
    c3ac:	681b      	ldr	r3, [r3, #0]
    c3ae:	3308      	adds	r3, #8
    c3b0:	6818      	ldr	r0, [r3, #0]
    c3b2:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c3b6:	f103 0318 	add.w	r3, r3, #24
    c3ba:	681b      	ldr	r3, [r3, #0]
    c3bc:	330c      	adds	r3, #12
    c3be:	681b      	ldr	r3, [r3, #0]
    c3c0:	9300      	str	r3, [sp, #0]
    c3c2:	4603      	mov	r3, r0
    c3c4:	48a3      	ldr	r0, [pc, #652]	; (c654 <main+0x34c>)
    c3c6:	f001 fa37 	bl	d838 <am_util_stdio_printf>

        //
        // Print KEK & Auth keys
        //
        uint32_t i = 0;
    c3ca:	2300      	movs	r3, #0
    c3cc:	f50d 5201 	add.w	r2, sp, #8256	; 0x2040
    c3d0:	f102 0234 	add.w	r2, r2, #52	; 0x34
    c3d4:	6013      	str	r3, [r2, #0]
        am_util_stdio_printf("KEK:\n");
    c3d6:	48a0      	ldr	r0, [pc, #640]	; (c658 <main+0x350>)
    c3d8:	f001 fa2e 	bl	d838 <am_util_stdio_printf>

        for (i = 0; i < 8; i++)
    c3dc:	2300      	movs	r3, #0
    c3de:	f50d 5201 	add.w	r2, sp, #8256	; 0x2040
    c3e2:	f102 0234 	add.w	r2, r2, #52	; 0x34
    c3e6:	6013      	str	r3, [r2, #0]
    c3e8:	e03e      	b.n	c468 <main+0x160>
        {
            am_util_stdio_printf("Key %2d: 0x%08x-0x%08x-0x%08x-0x%08x\r\n", i + 8, pKek[0], pKek[1], pKek[2], pKek[3]);
    c3ea:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c3ee:	f103 0334 	add.w	r3, r3, #52	; 0x34
    c3f2:	681b      	ldr	r3, [r3, #0]
    c3f4:	f103 0108 	add.w	r1, r3, #8
    c3f8:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c3fc:	f103 033c 	add.w	r3, r3, #60	; 0x3c
    c400:	681b      	ldr	r3, [r3, #0]
    c402:	6818      	ldr	r0, [r3, #0]
    c404:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c408:	f103 033c 	add.w	r3, r3, #60	; 0x3c
    c40c:	681b      	ldr	r3, [r3, #0]
    c40e:	3304      	adds	r3, #4
    c410:	681c      	ldr	r4, [r3, #0]
    c412:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c416:	f103 033c 	add.w	r3, r3, #60	; 0x3c
    c41a:	681b      	ldr	r3, [r3, #0]
    c41c:	3308      	adds	r3, #8
    c41e:	681b      	ldr	r3, [r3, #0]
    c420:	f50d 5201 	add.w	r2, sp, #8256	; 0x2040
    c424:	f102 023c 	add.w	r2, r2, #60	; 0x3c
    c428:	6812      	ldr	r2, [r2, #0]
    c42a:	320c      	adds	r2, #12
    c42c:	6812      	ldr	r2, [r2, #0]
    c42e:	9201      	str	r2, [sp, #4]
    c430:	9300      	str	r3, [sp, #0]
    c432:	4623      	mov	r3, r4
    c434:	4602      	mov	r2, r0
    c436:	4889      	ldr	r0, [pc, #548]	; (c65c <main+0x354>)
    c438:	f001 f9fe 	bl	d838 <am_util_stdio_printf>
            pKek += 4;
    c43c:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c440:	f103 033c 	add.w	r3, r3, #60	; 0x3c
    c444:	681b      	ldr	r3, [r3, #0]
    c446:	3310      	adds	r3, #16
    c448:	f50d 5201 	add.w	r2, sp, #8256	; 0x2040
    c44c:	f102 023c 	add.w	r2, r2, #60	; 0x3c
    c450:	6013      	str	r3, [r2, #0]
        for (i = 0; i < 8; i++)
    c452:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c456:	f103 0334 	add.w	r3, r3, #52	; 0x34
    c45a:	681b      	ldr	r3, [r3, #0]
    c45c:	3301      	adds	r3, #1
    c45e:	f50d 5201 	add.w	r2, sp, #8256	; 0x2040
    c462:	f102 0234 	add.w	r2, r2, #52	; 0x34
    c466:	6013      	str	r3, [r2, #0]
    c468:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c46c:	f103 0334 	add.w	r3, r3, #52	; 0x34
    c470:	681b      	ldr	r3, [r3, #0]
    c472:	2b07      	cmp	r3, #7
    c474:	d9b9      	bls.n	c3ea <main+0xe2>
        }

        am_util_stdio_printf("Auth:\n");
    c476:	487a      	ldr	r0, [pc, #488]	; (c660 <main+0x358>)
    c478:	f001 f9de 	bl	d838 <am_util_stdio_printf>

        for (i = 0; i < 8; i++)
    c47c:	2300      	movs	r3, #0
    c47e:	f50d 5201 	add.w	r2, sp, #8256	; 0x2040
    c482:	f102 0234 	add.w	r2, r2, #52	; 0x34
    c486:	6013      	str	r3, [r2, #0]
    c488:	e03e      	b.n	c508 <main+0x200>
        {
            am_util_stdio_printf("Key %2d: 0x%08x-0x%08x-0x%08x-0x%08x\r\n", i + 8, pAuthKey[0], pAuthKey[1], pAuthKey[2], pAuthKey[3]);
    c48a:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c48e:	f103 0334 	add.w	r3, r3, #52	; 0x34
    c492:	681b      	ldr	r3, [r3, #0]
    c494:	f103 0108 	add.w	r1, r3, #8
    c498:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c49c:	f103 0338 	add.w	r3, r3, #56	; 0x38
    c4a0:	681b      	ldr	r3, [r3, #0]
    c4a2:	6818      	ldr	r0, [r3, #0]
    c4a4:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c4a8:	f103 0338 	add.w	r3, r3, #56	; 0x38
    c4ac:	681b      	ldr	r3, [r3, #0]
    c4ae:	3304      	adds	r3, #4
    c4b0:	681c      	ldr	r4, [r3, #0]
    c4b2:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c4b6:	f103 0338 	add.w	r3, r3, #56	; 0x38
    c4ba:	681b      	ldr	r3, [r3, #0]
    c4bc:	3308      	adds	r3, #8
    c4be:	681b      	ldr	r3, [r3, #0]
    c4c0:	f50d 5201 	add.w	r2, sp, #8256	; 0x2040
    c4c4:	f102 0238 	add.w	r2, r2, #56	; 0x38
    c4c8:	6812      	ldr	r2, [r2, #0]
    c4ca:	320c      	adds	r2, #12
    c4cc:	6812      	ldr	r2, [r2, #0]
    c4ce:	9201      	str	r2, [sp, #4]
    c4d0:	9300      	str	r3, [sp, #0]
    c4d2:	4623      	mov	r3, r4
    c4d4:	4602      	mov	r2, r0
    c4d6:	4861      	ldr	r0, [pc, #388]	; (c65c <main+0x354>)
    c4d8:	f001 f9ae 	bl	d838 <am_util_stdio_printf>
            pAuthKey += 4;
    c4dc:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c4e0:	f103 0338 	add.w	r3, r3, #56	; 0x38
    c4e4:	681b      	ldr	r3, [r3, #0]
    c4e6:	3310      	adds	r3, #16
    c4e8:	f50d 5201 	add.w	r2, sp, #8256	; 0x2040
    c4ec:	f102 0238 	add.w	r2, r2, #56	; 0x38
    c4f0:	6013      	str	r3, [r2, #0]
        for (i = 0; i < 8; i++)
    c4f2:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c4f6:	f103 0334 	add.w	r3, r3, #52	; 0x34
    c4fa:	681b      	ldr	r3, [r3, #0]
    c4fc:	3301      	adds	r3, #1
    c4fe:	f50d 5201 	add.w	r2, sp, #8256	; 0x2040
    c502:	f102 0234 	add.w	r2, r2, #52	; 0x34
    c506:	6013      	str	r3, [r2, #0]
    c508:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c50c:	f103 0334 	add.w	r3, r3, #52	; 0x34
    c510:	681b      	ldr	r3, [r3, #0]
    c512:	2b07      	cmp	r3, #7
    c514:	d9b9      	bls.n	c48a <main+0x182>
        }
    }

    // Process OTA's
    if ( MCUCTRL->OTAPOINTER_b.OTAVALID )
    c516:	4b4b      	ldr	r3, [pc, #300]	; (c644 <main+0x33c>)
    c518:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
    c51c:	f3c3 0300 	ubfx	r3, r3, #0, #1
    c520:	b2db      	uxtb	r3, r3
    c522:	2b00      	cmp	r3, #0
    c524:	f000 81f4 	beq.w	c910 <main+0x608>
    {
        uint32_t *pOtaDesc = (uint32_t *)(MCUCTRL->OTAPOINTER & ~0x3);
    c528:	4b46      	ldr	r3, [pc, #280]	; (c644 <main+0x33c>)
    c52a:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
    c52e:	f023 0303 	bic.w	r3, r3, #3
    c532:	f50d 5201 	add.w	r2, sp, #8256	; 0x2040
    c536:	f102 0214 	add.w	r2, r2, #20
    c53a:	6013      	str	r3, [r2, #0]
        uint32_t i = 0;
    c53c:	2300      	movs	r3, #0
    c53e:	f50d 5201 	add.w	r2, sp, #8256	; 0x2040
    c542:	f102 0230 	add.w	r2, r2, #48	; 0x30
    c546:	6013      	str	r3, [r2, #0]

        uint32_t otaImagePtr = pOtaDesc[0];
    c548:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c54c:	f103 0314 	add.w	r3, r3, #20
    c550:	681b      	ldr	r3, [r3, #0]
    c552:	681b      	ldr	r3, [r3, #0]
    c554:	f50d 5201 	add.w	r2, sp, #8256	; 0x2040
    c558:	f102 022c 	add.w	r2, r2, #44	; 0x2c
    c55c:	6013      	str	r3, [r2, #0]

        // CAUTION: We can reprogram a bit in flash to 0 only once...so make sure we do not re-clear bits

        am_util_stdio_printf("OTA Available - OTA Desc @0x%x\n", pOtaDesc);
    c55e:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c562:	f103 0314 	add.w	r3, r3, #20
    c566:	6819      	ldr	r1, [r3, #0]
    c568:	483e      	ldr	r0, [pc, #248]	; (c664 <main+0x35c>)
    c56a:	f001 f965 	bl	d838 <am_util_stdio_printf>
        // Make sure the OTA list is valid
        // Whole OTA list is skipped if it is constructed incorrectly
        while (otaImagePtr != AM_HAL_SECURE_OTA_OTA_LIST_END_MARKER)
    c56e:	e1c6      	b.n	c8fe <main+0x5f6>
        {
            if (AM_HAL_SECURE_OTA_OTA_IS_VALID(otaImagePtr))
    c570:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c574:	f103 032c 	add.w	r3, r3, #44	; 0x2c
    c578:	681b      	ldr	r3, [r3, #0]
    c57a:	f003 0303 	and.w	r3, r3, #3
    c57e:	2b03      	cmp	r3, #3
    c580:	f040 8170 	bne.w	c864 <main+0x55c>
                // This template assumes OTA images using the same formal as used by Main.
                // Users can select any image format - as long as the first byte (magic#) is kept the same.
                //
                am_image_hdr_common_t *pComHdr;

                otaImagePtr = AM_HAL_SECURE_OTA_OTA_GET_BLOB_PTR(otaImagePtr);
    c584:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c588:	f103 032c 	add.w	r3, r3, #44	; 0x2c
    c58c:	681b      	ldr	r3, [r3, #0]
    c58e:	f023 0303 	bic.w	r3, r3, #3
    c592:	f50d 5201 	add.w	r2, sp, #8256	; 0x2040
    c596:	f102 022c 	add.w	r2, r2, #44	; 0x2c
    c59a:	6013      	str	r3, [r2, #0]
                pComHdr = (am_image_hdr_common_t *)otaImagePtr;
    c59c:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c5a0:	f103 032c 	add.w	r3, r3, #44	; 0x2c
    c5a4:	681b      	ldr	r3, [r3, #0]
    c5a6:	f50d 5201 	add.w	r2, sp, #8256	; 0x2040
    c5aa:	f102 0210 	add.w	r2, r2, #16
    c5ae:	6013      	str	r3, [r2, #0]

                //
                // Valid OTA image
                // Make sure the image is contained within flash
                if ((otaImagePtr >= sDevice.ui32FlashSize) ||
    c5b0:	f50d 5300 	add.w	r3, sp, #8192	; 0x2000
    c5b4:	f103 0324 	add.w	r3, r3, #36	; 0x24
    c5b8:	681b      	ldr	r3, [r3, #0]
    c5ba:	f50d 5201 	add.w	r2, sp, #8256	; 0x2040
    c5be:	f102 022c 	add.w	r2, r2, #44	; 0x2c
    c5c2:	6812      	ldr	r2, [r2, #0]
    c5c4:	429a      	cmp	r2, r3
    c5c6:	d215      	bcs.n	c5f4 <main+0x2ec>
                    ((otaImagePtr + pComHdr->w0.s.blobSize) > sDevice.ui32FlashSize))
    c5c8:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c5cc:	f103 0310 	add.w	r3, r3, #16
    c5d0:	681b      	ldr	r3, [r3, #0]
    c5d2:	681b      	ldr	r3, [r3, #0]
    c5d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
    c5d8:	461a      	mov	r2, r3
    c5da:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c5de:	f103 032c 	add.w	r3, r3, #44	; 0x2c
    c5e2:	681b      	ldr	r3, [r3, #0]
    c5e4:	441a      	add	r2, r3
    c5e6:	f50d 5300 	add.w	r3, sp, #8192	; 0x2000
    c5ea:	f103 0324 	add.w	r3, r3, #36	; 0x24
    c5ee:	681b      	ldr	r3, [r3, #0]
                if ((otaImagePtr >= sDevice.ui32FlashSize) ||
    c5f0:	429a      	cmp	r2, r3
    c5f2:	d93d      	bls.n	c670 <main+0x368>
                {
                    // Invalidate this OTA for subsequent processing
                    am_util_stdio_printf("Found bad OTA pointing to: image address=0x%x, size 0x%x\n", otaImagePtr, pComHdr->w0.s.blobSize);
    c5f4:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c5f8:	f103 0310 	add.w	r3, r3, #16
    c5fc:	681b      	ldr	r3, [r3, #0]
    c5fe:	681b      	ldr	r3, [r3, #0]
    c600:	f3c3 0313 	ubfx	r3, r3, #0, #20
    c604:	461a      	mov	r2, r3
    c606:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c60a:	f103 032c 	add.w	r3, r3, #44	; 0x2c
    c60e:	6819      	ldr	r1, [r3, #0]
    c610:	4815      	ldr	r0, [pc, #84]	; (c668 <main+0x360>)
    c612:	f001 f911 	bl	d838 <am_util_stdio_printf>
                    // Indicate Failure
                    am_hal_flash_clear_bits(AM_HAL_FLASH_PROGRAM_KEY, &pOtaDesc[i], AM_HAL_SECURE_OTA_OTA_DONE_FAILURE_CLRMASK);
    c616:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c61a:	f103 0330 	add.w	r3, r3, #48	; 0x30
    c61e:	681b      	ldr	r3, [r3, #0]
    c620:	009b      	lsls	r3, r3, #2
    c622:	f50d 5201 	add.w	r2, sp, #8256	; 0x2040
    c626:	f102 0214 	add.w	r2, r2, #20
    c62a:	6812      	ldr	r2, [r2, #0]
    c62c:	4413      	add	r3, r2
    c62e:	2201      	movs	r2, #1
    c630:	4619      	mov	r1, r3
    c632:	480e      	ldr	r0, [pc, #56]	; (c66c <main+0x364>)
    c634:	f001 fc34 	bl	dea0 <am_hal_flash_clear_bits>
    c638:	e114      	b.n	c864 <main+0x55c>
    c63a:	bf00      	nop
    c63c:	0000e960 	.word	0x0000e960
    c640:	0000e730 	.word	0x0000e730
    c644:	40020000 	.word	0x40020000
    c648:	50021a00 	.word	0x50021a00
    c64c:	50021800 	.word	0x50021800
    c650:	50021880 	.word	0x50021880
    c654:	0000e76c 	.word	0x0000e76c
    c658:	0000e798 	.word	0x0000e798
    c65c:	0000e7a0 	.word	0x0000e7a0
    c660:	0000e7c8 	.word	0x0000e7c8
    c664:	0000e7d0 	.word	0x0000e7d0
    c668:	0000e7f0 	.word	0x0000e7f0
    c66c:	12344321 	.word	0x12344321

                }
                else
                {
                    if (AM_IMAGE_MAGIC_CUST(pComHdr->w0.s.magicNum))
    c670:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c674:	f103 0310 	add.w	r3, r3, #16
    c678:	681b      	ldr	r3, [r3, #0]
    c67a:	78db      	ldrb	r3, [r3, #3]
    c67c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    c680:	2bc0      	cmp	r3, #192	; 0xc0
    c682:	f040 80db 	bne.w	c83c <main+0x534>
    c686:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c68a:	f103 0310 	add.w	r3, r3, #16
    c68e:	681b      	ldr	r3, [r3, #0]
    c690:	78db      	ldrb	r3, [r3, #3]
    c692:	2bc0      	cmp	r3, #192	; 0xc0
    c694:	f000 80d2 	beq.w	c83c <main+0x534>
    c698:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c69c:	f103 0310 	add.w	r3, r3, #16
    c6a0:	681b      	ldr	r3, [r3, #0]
    c6a2:	78db      	ldrb	r3, [r3, #3]
    c6a4:	2bcc      	cmp	r3, #204	; 0xcc
    c6a6:	f000 80c9 	beq.w	c83c <main+0x534>
    c6aa:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c6ae:	f103 0310 	add.w	r3, r3, #16
    c6b2:	681b      	ldr	r3, [r3, #0]
    c6b4:	78db      	ldrb	r3, [r3, #3]
    c6b6:	2bcb      	cmp	r3, #203	; 0xcb
    c6b8:	f000 80c0 	beq.w	c83c <main+0x534>
    c6bc:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c6c0:	f103 0310 	add.w	r3, r3, #16
    c6c4:	681b      	ldr	r3, [r3, #0]
    c6c6:	78db      	ldrb	r3, [r3, #3]
    c6c8:	2bcf      	cmp	r3, #207	; 0xcf
    c6ca:	f000 80b7 	beq.w	c83c <main+0x534>
                        // Process OTA
                        // We can perform any necessary verification/decryption here before installing a valid OTA image
                        // install
                        // Operate only in flash page multiples
                        //
                        uint32_t size = pComHdr->w0.s.blobSize - sizeof(am_thirdparty_image_hdr_t);
    c6ce:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c6d2:	f103 0310 	add.w	r3, r3, #16
    c6d6:	681b      	ldr	r3, [r3, #0]
    c6d8:	681b      	ldr	r3, [r3, #0]
    c6da:	f3c3 0313 	ubfx	r3, r3, #0, #20
    c6de:	3b80      	subs	r3, #128	; 0x80
    c6e0:	f50d 5201 	add.w	r2, sp, #8256	; 0x2040
    c6e4:	f102 020c 	add.w	r2, r2, #12
    c6e8:	6013      	str	r3, [r2, #0]
                        uint32_t numFlashPage = (size + AM_HAL_FLASH_PAGE_SIZE - 1) / AM_HAL_FLASH_PAGE_SIZE;
    c6ea:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c6ee:	f103 030c 	add.w	r3, r3, #12
    c6f2:	681b      	ldr	r3, [r3, #0]
    c6f4:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
    c6f8:	331f      	adds	r3, #31
    c6fa:	0b5b      	lsrs	r3, r3, #13
    c6fc:	f50d 5201 	add.w	r2, sp, #8256	; 0x2040
    c700:	f102 0208 	add.w	r2, r2, #8
    c704:	6013      	str	r3, [r2, #0]
                        uint32_t *pDst = (uint32_t *)AM_IMAGE_GET_LOADADDR(pComHdr);
    c706:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c70a:	f103 0310 	add.w	r3, r3, #16
    c70e:	681b      	ldr	r3, [r3, #0]
    c710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    c712:	f3c3 039d 	ubfx	r3, r3, #2, #30
    c716:	009b      	lsls	r3, r3, #2
    c718:	f50d 5201 	add.w	r2, sp, #8256	; 0x2040
    c71c:	f102 0228 	add.w	r2, r2, #40	; 0x28
    c720:	6013      	str	r3, [r2, #0]
                        uint32_t tempBuf[AM_HAL_FLASH_PAGE_SIZE / 4];
                        uint32_t *pSrc = (uint32_t *)((am_thirdparty_image_hdr_t *)pComHdr + 1);
    c722:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c726:	f103 0310 	add.w	r3, r3, #16
    c72a:	681b      	ldr	r3, [r3, #0]
    c72c:	3380      	adds	r3, #128	; 0x80
    c72e:	f50d 5201 	add.w	r2, sp, #8256	; 0x2040
    c732:	f102 0224 	add.w	r2, r2, #36	; 0x24
    c736:	6013      	str	r3, [r2, #0]

                        am_util_stdio_printf("Found OTA @ 0x%x magic 0x%x - size 0x%x to be installed at 0x%x\n", otaImagePtr, pComHdr->w0.s.magicNum, size, pDst);
    c738:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c73c:	f103 0310 	add.w	r3, r3, #16
    c740:	681b      	ldr	r3, [r3, #0]
    c742:	78db      	ldrb	r3, [r3, #3]
    c744:	461a      	mov	r2, r3
    c746:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c74a:	f103 0328 	add.w	r3, r3, #40	; 0x28
    c74e:	681b      	ldr	r3, [r3, #0]
    c750:	9300      	str	r3, [sp, #0]
    c752:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c756:	f103 030c 	add.w	r3, r3, #12
    c75a:	681b      	ldr	r3, [r3, #0]
    c75c:	f50d 5101 	add.w	r1, sp, #8256	; 0x2040
    c760:	f101 012c 	add.w	r1, r1, #44	; 0x2c
    c764:	6809      	ldr	r1, [r1, #0]
    c766:	48a4      	ldr	r0, [pc, #656]	; (c9f8 <main+0x6f0>)
    c768:	f001 f866 	bl	d838 <am_util_stdio_printf>
                        for (uint32_t i = 0; i < numFlashPage; i++)
    c76c:	2300      	movs	r3, #0
    c76e:	f50d 5201 	add.w	r2, sp, #8256	; 0x2040
    c772:	f102 0220 	add.w	r2, r2, #32
    c776:	6013      	str	r3, [r2, #0]
    c778:	e042      	b.n	c800 <main+0x4f8>
                        {
                            memcpy(tempBuf, pSrc, AM_HAL_FLASH_PAGE_SIZE);
    c77a:	ab10      	add	r3, sp, #64	; 0x40
    c77c:	3b38      	subs	r3, #56	; 0x38
    c77e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    c782:	f50d 5101 	add.w	r1, sp, #8256	; 0x2040
    c786:	f101 0124 	add.w	r1, r1, #36	; 0x24
    c78a:	6809      	ldr	r1, [r1, #0]
    c78c:	4618      	mov	r0, r3
    c78e:	f7ff fcb7 	bl	c100 <memcpy>
                            flash_page_erase((uint32_t)pDst);
    c792:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c796:	f103 0328 	add.w	r3, r3, #40	; 0x28
    c79a:	681b      	ldr	r3, [r3, #0]
    c79c:	4618      	mov	r0, r3
    c79e:	f7ff fd99 	bl	c2d4 <flash_page_erase>
                            am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY, tempBuf, pDst, AM_HAL_FLASH_PAGE_SIZE / 4);
    c7a2:	a910      	add	r1, sp, #64	; 0x40
    c7a4:	3938      	subs	r1, #56	; 0x38
    c7a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
    c7aa:	f50d 5201 	add.w	r2, sp, #8256	; 0x2040
    c7ae:	f102 0228 	add.w	r2, r2, #40	; 0x28
    c7b2:	6812      	ldr	r2, [r2, #0]
    c7b4:	4891      	ldr	r0, [pc, #580]	; (c9fc <main+0x6f4>)
    c7b6:	f001 fb45 	bl	de44 <am_hal_flash_program_main>
                            pSrc += AM_HAL_FLASH_PAGE_SIZE / 4;
    c7ba:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c7be:	f103 0324 	add.w	r3, r3, #36	; 0x24
    c7c2:	681b      	ldr	r3, [r3, #0]
    c7c4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    c7c8:	f50d 5201 	add.w	r2, sp, #8256	; 0x2040
    c7cc:	f102 0224 	add.w	r2, r2, #36	; 0x24
    c7d0:	6013      	str	r3, [r2, #0]
                            pDst += AM_HAL_FLASH_PAGE_SIZE / 4;
    c7d2:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c7d6:	f103 0328 	add.w	r3, r3, #40	; 0x28
    c7da:	681b      	ldr	r3, [r3, #0]
    c7dc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    c7e0:	f50d 5201 	add.w	r2, sp, #8256	; 0x2040
    c7e4:	f102 0228 	add.w	r2, r2, #40	; 0x28
    c7e8:	6013      	str	r3, [r2, #0]
                        for (uint32_t i = 0; i < numFlashPage; i++)
    c7ea:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c7ee:	f103 0320 	add.w	r3, r3, #32
    c7f2:	681b      	ldr	r3, [r3, #0]
    c7f4:	3301      	adds	r3, #1
    c7f6:	f50d 5201 	add.w	r2, sp, #8256	; 0x2040
    c7fa:	f102 0220 	add.w	r2, r2, #32
    c7fe:	6013      	str	r3, [r2, #0]
    c800:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c804:	f103 0320 	add.w	r3, r3, #32
    c808:	681a      	ldr	r2, [r3, #0]
    c80a:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c80e:	f103 0308 	add.w	r3, r3, #8
    c812:	681b      	ldr	r3, [r3, #0]
    c814:	429a      	cmp	r2, r3
    c816:	d3b0      	bcc.n	c77a <main+0x472>
                        }

                        //
                        // Indicate Success
                        //
                        am_hal_flash_clear_bits(AM_HAL_FLASH_PROGRAM_KEY, &pOtaDesc[i], AM_HAL_SECURE_OTA_OTA_DONE_SUCCESS_CLRMASK);
    c818:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c81c:	f103 0330 	add.w	r3, r3, #48	; 0x30
    c820:	681b      	ldr	r3, [r3, #0]
    c822:	009b      	lsls	r3, r3, #2
    c824:	f50d 5201 	add.w	r2, sp, #8256	; 0x2040
    c828:	f102 0214 	add.w	r2, r2, #20
    c82c:	6812      	ldr	r2, [r2, #0]
    c82e:	4413      	add	r3, r2
    c830:	2203      	movs	r2, #3
    c832:	4619      	mov	r1, r3
    c834:	4871      	ldr	r0, [pc, #452]	; (c9fc <main+0x6f4>)
    c836:	f001 fb33 	bl	dea0 <am_hal_flash_clear_bits>
                    {
    c83a:	e013      	b.n	c864 <main+0x55c>
                    else
                    {
                        //
                        // unknown OTA
                        //
                        am_util_stdio_printf("Found unexpected OTA\n");
    c83c:	4870      	ldr	r0, [pc, #448]	; (ca00 <main+0x6f8>)
    c83e:	f000 fffb 	bl	d838 <am_util_stdio_printf>

                        //
                        // Indicate Failure
                        //
                        am_hal_flash_clear_bits(AM_HAL_FLASH_PROGRAM_KEY, &pOtaDesc[i], AM_HAL_SECURE_OTA_OTA_DONE_FAILURE_CLRMASK);
    c842:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c846:	f103 0330 	add.w	r3, r3, #48	; 0x30
    c84a:	681b      	ldr	r3, [r3, #0]
    c84c:	009b      	lsls	r3, r3, #2
    c84e:	f50d 5201 	add.w	r2, sp, #8256	; 0x2040
    c852:	f102 0214 	add.w	r2, r2, #20
    c856:	6812      	ldr	r2, [r2, #0]
    c858:	4413      	add	r3, r2
    c85a:	2201      	movs	r2, #1
    c85c:	4619      	mov	r1, r3
    c85e:	4867      	ldr	r0, [pc, #412]	; (c9fc <main+0x6f4>)
    c860:	f001 fb1e 	bl	dea0 <am_hal_flash_clear_bits>
                //
                // This OTA has already been invalidated...Skip
                //
            }

            if (i++ == AM_HAL_SECURE_OTA_MAX_OTA)
    c864:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c868:	f103 0330 	add.w	r3, r3, #48	; 0x30
    c86c:	681b      	ldr	r3, [r3, #0]
    c86e:	1c5a      	adds	r2, r3, #1
    c870:	f50d 5101 	add.w	r1, sp, #8256	; 0x2040
    c874:	f101 0130 	add.w	r1, r1, #48	; 0x30
    c878:	600a      	str	r2, [r1, #0]
    c87a:	2b08      	cmp	r3, #8
    c87c:	d108      	bne.n	c890 <main+0x588>
            {
                am_util_stdio_printf("Exceeded maximum OTAs\n", i);
    c87e:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c882:	f103 0330 	add.w	r3, r3, #48	; 0x30
    c886:	6819      	ldr	r1, [r3, #0]
    c888:	485e      	ldr	r0, [pc, #376]	; (ca04 <main+0x6fc>)
    c88a:	f000 ffd5 	bl	d838 <am_util_stdio_printf>
                break;
    c88e:	e03f      	b.n	c910 <main+0x608>
            }

            if ((uint32_t)&pOtaDesc[i] >= sDevice.ui32FlashSize)
    c890:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c894:	f103 0330 	add.w	r3, r3, #48	; 0x30
    c898:	681b      	ldr	r3, [r3, #0]
    c89a:	009b      	lsls	r3, r3, #2
    c89c:	f50d 5201 	add.w	r2, sp, #8256	; 0x2040
    c8a0:	f102 0214 	add.w	r2, r2, #20
    c8a4:	6812      	ldr	r2, [r2, #0]
    c8a6:	4413      	add	r3, r2
    c8a8:	461a      	mov	r2, r3
    c8aa:	f50d 5300 	add.w	r3, sp, #8192	; 0x2000
    c8ae:	f103 0324 	add.w	r3, r3, #36	; 0x24
    c8b2:	681b      	ldr	r3, [r3, #0]
    c8b4:	429a      	cmp	r2, r3
    c8b6:	d310      	bcc.n	c8da <main+0x5d2>
            {
                am_util_stdio_printf("Found Invalid OTA pointer 0x%x\n", (uint32_t)&pOtaDesc[i]);
    c8b8:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c8bc:	f103 0330 	add.w	r3, r3, #48	; 0x30
    c8c0:	681b      	ldr	r3, [r3, #0]
    c8c2:	009b      	lsls	r3, r3, #2
    c8c4:	f50d 5201 	add.w	r2, sp, #8256	; 0x2040
    c8c8:	f102 0214 	add.w	r2, r2, #20
    c8cc:	6812      	ldr	r2, [r2, #0]
    c8ce:	4413      	add	r3, r2
    c8d0:	4619      	mov	r1, r3
    c8d2:	484d      	ldr	r0, [pc, #308]	; (ca08 <main+0x700>)
    c8d4:	f000 ffb0 	bl	d838 <am_util_stdio_printf>
                break;
    c8d8:	e01a      	b.n	c910 <main+0x608>
            }
            else
            {
                otaImagePtr = pOtaDesc[i];
    c8da:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c8de:	f103 0330 	add.w	r3, r3, #48	; 0x30
    c8e2:	681b      	ldr	r3, [r3, #0]
    c8e4:	009b      	lsls	r3, r3, #2
    c8e6:	f50d 5201 	add.w	r2, sp, #8256	; 0x2040
    c8ea:	f102 0214 	add.w	r2, r2, #20
    c8ee:	6812      	ldr	r2, [r2, #0]
    c8f0:	4413      	add	r3, r2
    c8f2:	681b      	ldr	r3, [r3, #0]
    c8f4:	f50d 5201 	add.w	r2, sp, #8256	; 0x2040
    c8f8:	f102 022c 	add.w	r2, r2, #44	; 0x2c
    c8fc:	6013      	str	r3, [r2, #0]
        while (otaImagePtr != AM_HAL_SECURE_OTA_OTA_LIST_END_MARKER)
    c8fe:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c902:	f103 032c 	add.w	r3, r3, #44	; 0x2c
    c906:	681b      	ldr	r3, [r3, #0]
    c908:	f1b3 3fff 	cmp.w	r3, #4294967295
    c90c:	f47f ae30 	bne.w	c570 <main+0x268>
    }

    //
    // Clear OTA_POINTER
    //
    MCUCTRL->OTAPOINTER = 0;
    c910:	4b3e      	ldr	r3, [pc, #248]	; (ca0c <main+0x704>)
    c912:	2200      	movs	r2, #0
    c914:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
    // Validate main image
    // This is only a place holder - Assumes raw main image @ 0x10000
    // Users can select any image format
    // Depending on the custom image format - more elaborate validation (including signature verification) can be done
    //
    uint32_t imageAddr = MAIN_PROGRAM_ADDR_IN_FLASH;
    c918:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    c91c:	f50d 5201 	add.w	r2, sp, #8256	; 0x2040
    c920:	f102 0204 	add.w	r2, r2, #4
    c924:	6013      	str	r3, [r2, #0]
    uint32_t sp = *((uint32_t *)imageAddr);
    c926:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c92a:	f103 0304 	add.w	r3, r3, #4
    c92e:	681b      	ldr	r3, [r3, #0]
    c930:	681b      	ldr	r3, [r3, #0]
    c932:	f50d 5201 	add.w	r2, sp, #8256	; 0x2040
    c936:	6013      	str	r3, [r2, #0]
    uint32_t reset = *((uint32_t *)(imageAddr + 4));
    c938:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c93c:	f103 0304 	add.w	r3, r3, #4
    c940:	681b      	ldr	r3, [r3, #0]
    c942:	3304      	adds	r3, #4
    c944:	681b      	ldr	r3, [r3, #0]
    c946:	f50d 5200 	add.w	r2, sp, #8192	; 0x2000
    c94a:	f102 023c 	add.w	r2, r2, #60	; 0x3c
    c94e:	6013      	str	r3, [r2, #0]
    uint32_t *pVtor = 0;
    c950:	2300      	movs	r3, #0
    c952:	f50d 5201 	add.w	r2, sp, #8256	; 0x2040
    c956:	f102 021c 	add.w	r2, r2, #28
    c95a:	6013      	str	r3, [r2, #0]
    //
    // Make sure the SP & Reset vector are sane
    // Validate the Stack Pointer
    // Validate the reset vector
    //
    if ((sp < SRAM_BASEADDR)                            || \
    c95c:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c960:	681b      	ldr	r3, [r3, #0]
    c962:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    c966:	d323      	bcc.n	c9b0 <main+0x6a8>
        (sp >= (SRAM_BASEADDR + sDevice.ui32SRAMSize))  || \
    c968:	f50d 5300 	add.w	r3, sp, #8192	; 0x2000
    c96c:	f103 0328 	add.w	r3, r3, #40	; 0x28
    c970:	681b      	ldr	r3, [r3, #0]
    c972:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
    if ((sp < SRAM_BASEADDR)                            || \
    c976:	f50d 5201 	add.w	r2, sp, #8256	; 0x2040
    c97a:	6812      	ldr	r2, [r2, #0]
    c97c:	429a      	cmp	r2, r3
    c97e:	d217      	bcs.n	c9b0 <main+0x6a8>
        (sp >= (SRAM_BASEADDR + sDevice.ui32SRAMSize))  || \
    c980:	f50d 5300 	add.w	r3, sp, #8192	; 0x2000
    c984:	f103 033c 	add.w	r3, r3, #60	; 0x3c
    c988:	681a      	ldr	r2, [r3, #0]
    c98a:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c98e:	f103 0304 	add.w	r3, r3, #4
    c992:	681b      	ldr	r3, [r3, #0]
    c994:	429a      	cmp	r2, r3
    c996:	d30b      	bcc.n	c9b0 <main+0x6a8>
        (reset < imageAddr)                             || \
        (reset >= sDevice.ui32FlashSize))
    c998:	f50d 5300 	add.w	r3, sp, #8192	; 0x2000
    c99c:	f103 0324 	add.w	r3, r3, #36	; 0x24
    c9a0:	681b      	ldr	r3, [r3, #0]
        (reset < imageAddr)                             || \
    c9a2:	f50d 5200 	add.w	r2, sp, #8192	; 0x2000
    c9a6:	f102 023c 	add.w	r2, r2, #60	; 0x3c
    c9aa:	6812      	ldr	r2, [r2, #0]
    c9ac:	429a      	cmp	r2, r3
    c9ae:	d303      	bcc.n	c9b8 <main+0x6b0>
    {
        am_util_stdio_printf("Invalid main image\n");
    c9b0:	4817      	ldr	r0, [pc, #92]	; (ca10 <main+0x708>)
    c9b2:	f000 ff41 	bl	d838 <am_util_stdio_printf>
    c9b6:	e017      	b.n	c9e8 <main+0x6e0>
    }
    else
    {
        am_util_stdio_printf("Found valid main image - SP:0x%x RV:0x%x\n", sp, reset);
    c9b8:	f50d 5300 	add.w	r3, sp, #8192	; 0x2000
    c9bc:	f103 033c 	add.w	r3, r3, #60	; 0x3c
    c9c0:	681a      	ldr	r2, [r3, #0]
    c9c2:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c9c6:	6819      	ldr	r1, [r3, #0]
    c9c8:	4812      	ldr	r0, [pc, #72]	; (ca14 <main+0x70c>)
    c9ca:	f000 ff35 	bl	d838 <am_util_stdio_printf>
        pVtor = (uint32_t *)imageAddr;
    c9ce:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c9d2:	f103 0304 	add.w	r3, r3, #4
    c9d6:	681b      	ldr	r3, [r3, #0]
    c9d8:	f50d 5201 	add.w	r2, sp, #8256	; 0x2040
    c9dc:	f102 021c 	add.w	r2, r2, #28
    c9e0:	6013      	str	r3, [r2, #0]
        am_util_stdio_printf("Will transfer control over to this image after locking things down\n\n\n\n");
    c9e2:	480d      	ldr	r0, [pc, #52]	; (ca18 <main+0x710>)
    c9e4:	f000 ff28 	bl	d838 <am_util_stdio_printf>
    }

    //
    // Lock the assets (if needed) and give control to main
    //
    am_hal_bootloader_exit(pVtor);
    c9e8:	f50d 5301 	add.w	r3, sp, #8256	; 0x2040
    c9ec:	f103 031c 	add.w	r3, r3, #28
    c9f0:	6818      	ldr	r0, [r3, #0]
    c9f2:	f001 fe01 	bl	e5f8 <am_hal_bootloader_exit>

    while(1);
    c9f6:	e7fe      	b.n	c9f6 <main+0x6ee>
    c9f8:	0000e82c 	.word	0x0000e82c
    c9fc:	12344321 	.word	0x12344321
    ca00:	0000e870 	.word	0x0000e870
    ca04:	0000e888 	.word	0x0000e888
    ca08:	0000e8a0 	.word	0x0000e8a0
    ca0c:	40020000 	.word	0x40020000
    ca10:	0000e8c0 	.word	0x0000e8c0
    ca14:	0000e8d4 	.word	0x0000e8d4
    ca18:	0000e900 	.word	0x0000e900

0000ca1c <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    ca1c:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    ca1e:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    ca22:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    ca24:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    ca28:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    ca2c:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    ca30:	f000 f80a 	bl	ca48 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    ca34:	bd01      	pop	{r0, pc}
}
    ca36:	bf00      	nop
    ca38:	4618      	mov	r0, r3

0000ca3a <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    ca3a:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    ca3c:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    ca3e:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    ca40:	4770      	bx	lr
}
    ca42:	bf00      	nop
    ca44:	4618      	mov	r0, r3
	...

0000ca48 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    ca48:	b500      	push	{lr}
    ca4a:	b097      	sub	sp, #92	; 0x5c
    ca4c:	9001      	str	r0, [sp, #4]
    volatile am_fault_t sFaultData;
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_t  sHalFaultData = {0};
#else
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    ca4e:	ab03      	add	r3, sp, #12
    ca50:	2200      	movs	r2, #0
    ca52:	601a      	str	r2, [r3, #0]
    ca54:	605a      	str	r2, [r3, #4]
    ca56:	609a      	str	r2, [r3, #8]
    ca58:	60da      	str	r2, [r3, #12]
    ca5a:	611a      	str	r2, [r3, #16]
    ca5c:	615a      	str	r2, [r3, #20]
#endif // if defined(AM_PART_APOLLO4)

    uint32_t u32Mask = 0;
    ca5e:	2300      	movs	r3, #0
    ca60:	9315      	str	r3, [sp, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    ca62:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ca64:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    ca66:	4b2e      	ldr	r3, [pc, #184]	; (cb20 <am_util_faultisr_collect_data+0xd8>)
    ca68:	681b      	ldr	r3, [r3, #0]
    ca6a:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    ca6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ca6e:	b2db      	uxtb	r3, r3
    ca70:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    ca74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ca76:	0a1b      	lsrs	r3, r3, #8
    ca78:	b2db      	uxtb	r3, r3
    ca7a:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    ca7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ca80:	0c1b      	lsrs	r3, r3, #16
    ca82:	b29b      	uxth	r3, r3
    ca84:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    ca88:	4b26      	ldr	r3, [pc, #152]	; (cb24 <am_util_faultisr_collect_data+0xdc>)
    ca8a:	681b      	ldr	r3, [r3, #0]
    ca8c:	9312      	str	r3, [sp, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    ca8e:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
    ca92:	b2db      	uxtb	r3, r3
    ca94:	f003 0302 	and.w	r3, r3, #2
    ca98:	2b00      	cmp	r3, #0
    ca9a:	d005      	beq.n	caa8 <am_util_faultisr_collect_data+0x60>
    ca9c:	9901      	ldr	r1, [sp, #4]
    ca9e:	2006      	movs	r0, #6
    caa0:	f7ff ffcb 	bl	ca3a <getStackedReg>
    caa4:	4603      	mov	r3, r0
    caa6:	e001      	b.n	caac <am_util_faultisr_collect_data+0x64>
    caa8:	f04f 33ff 	mov.w	r3, #4294967295
    caac:	9311      	str	r3, [sp, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    caae:	9901      	ldr	r1, [sp, #4]
    cab0:	2000      	movs	r0, #0
    cab2:	f7ff ffc2 	bl	ca3a <getStackedReg>
    cab6:	4603      	mov	r3, r0
    cab8:	9309      	str	r3, [sp, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    caba:	9901      	ldr	r1, [sp, #4]
    cabc:	2001      	movs	r0, #1
    cabe:	f7ff ffbc 	bl	ca3a <getStackedReg>
    cac2:	4603      	mov	r3, r0
    cac4:	930a      	str	r3, [sp, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    cac6:	9901      	ldr	r1, [sp, #4]
    cac8:	2002      	movs	r0, #2
    caca:	f7ff ffb6 	bl	ca3a <getStackedReg>
    cace:	4603      	mov	r3, r0
    cad0:	930b      	str	r3, [sp, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    cad2:	9901      	ldr	r1, [sp, #4]
    cad4:	2003      	movs	r0, #3
    cad6:	f7ff ffb0 	bl	ca3a <getStackedReg>
    cada:	4603      	mov	r3, r0
    cadc:	930c      	str	r3, [sp, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    cade:	9901      	ldr	r1, [sp, #4]
    cae0:	2004      	movs	r0, #4
    cae2:	f7ff ffaa 	bl	ca3a <getStackedReg>
    cae6:	4603      	mov	r3, r0
    cae8:	930d      	str	r3, [sp, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    caea:	9901      	ldr	r1, [sp, #4]
    caec:	2005      	movs	r0, #5
    caee:	f7ff ffa4 	bl	ca3a <getStackedReg>
    caf2:	4603      	mov	r3, r0
    caf4:	930e      	str	r3, [sp, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    caf6:	9901      	ldr	r1, [sp, #4]
    caf8:	2006      	movs	r0, #6
    cafa:	f7ff ff9e 	bl	ca3a <getStackedReg>
    cafe:	4603      	mov	r3, r0
    cb00:	930f      	str	r3, [sp, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    cb02:	9901      	ldr	r1, [sp, #4]
    cb04:	2007      	movs	r0, #7
    cb06:	f7ff ff98 	bl	ca3a <getStackedReg>
    cb0a:	4603      	mov	r3, r0
    cb0c:	9310      	str	r3, [sp, #64]	; 0x40
    //
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_get(&sHalFaultData);
#else
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    cb0e:	ab03      	add	r3, sp, #12
    cb10:	4619      	mov	r1, r3
    cb12:	2002      	movs	r0, #2
    cb14:	f001 fbe2 	bl	e2dc <am_hal_mcuctrl_info_get>
      am_util_stdio_printf("   SYS Fault Address: 0x%08X\n", sHalFaultData.ui32SYS);
    }

#endif

    u32Mask = 0;
    cb18:	2300      	movs	r3, #0
    cb1a:	9315      	str	r3, [sp, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    cb1c:	e7fe      	b.n	cb1c <am_util_faultisr_collect_data+0xd4>
    cb1e:	bf00      	nop
    cb20:	e000ed28 	.word	0xe000ed28
    cb24:	e000ed38 	.word	0xe000ed38

0000cb28 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    cb28:	b082      	sub	sp, #8
    cb2a:	9001      	str	r0, [sp, #4]
    g_pfnCharPrint = pfnCharPrint;
    cb2c:	4a02      	ldr	r2, [pc, #8]	; (cb38 <am_util_stdio_printf_init+0x10>)
    cb2e:	9b01      	ldr	r3, [sp, #4]
    cb30:	6013      	str	r3, [r2, #0]
}
    cb32:	bf00      	nop
    cb34:	b002      	add	sp, #8
    cb36:	4770      	bx	lr
    cb38:	10004034 	.word	0x10004034

0000cb3c <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    cb3c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    cb40:	b098      	sub	sp, #96	; 0x60
    cb42:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    cb46:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    cb4a:	f04f 0000 	mov.w	r0, #0
    cb4e:	f04f 0100 	mov.w	r1, #0
    cb52:	0018      	movs	r0, r3
    cb54:	2100      	movs	r1, #0
    cb56:	ea50 0301 	orrs.w	r3, r0, r1
    cb5a:	f000 80b0 	beq.w	ccbe <divu64_10+0x182>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    cb5e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    cb62:	f04f 0400 	mov.w	r4, #0
    cb66:	f04f 0500 	mov.w	r5, #0
    cb6a:	0854      	lsrs	r4, r2, #1
    cb6c:	ea44 74c3 	orr.w	r4, r4, r3, lsl #31
    cb70:	085d      	lsrs	r5, r3, #1
    cb72:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    cb76:	f04f 0000 	mov.w	r0, #0
    cb7a:	f04f 0100 	mov.w	r1, #0
    cb7e:	0890      	lsrs	r0, r2, #2
    cb80:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
    cb84:	0899      	lsrs	r1, r3, #2
    cb86:	eb14 0a00 	adds.w	sl, r4, r0
    cb8a:	eb45 0b01 	adc.w	fp, r5, r1
    cb8e:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
        q64 += (q64 >> 4);
    cb92:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cb96:	f04f 0000 	mov.w	r0, #0
    cb9a:	f04f 0100 	mov.w	r1, #0
    cb9e:	0910      	lsrs	r0, r2, #4
    cba0:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
    cba4:	0919      	lsrs	r1, r3, #4
    cba6:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cbaa:	1814      	adds	r4, r2, r0
    cbac:	9402      	str	r4, [sp, #8]
    cbae:	414b      	adcs	r3, r1
    cbb0:	9303      	str	r3, [sp, #12]
    cbb2:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    cbb6:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 8);
    cbba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cbbe:	f04f 0000 	mov.w	r0, #0
    cbc2:	f04f 0100 	mov.w	r1, #0
    cbc6:	0a10      	lsrs	r0, r2, #8
    cbc8:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
    cbcc:	0a19      	lsrs	r1, r3, #8
    cbce:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cbd2:	1814      	adds	r4, r2, r0
    cbd4:	9404      	str	r4, [sp, #16]
    cbd6:	414b      	adcs	r3, r1
    cbd8:	9305      	str	r3, [sp, #20]
    cbda:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    cbde:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 16);
    cbe2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cbe6:	f04f 0000 	mov.w	r0, #0
    cbea:	f04f 0100 	mov.w	r1, #0
    cbee:	0c10      	lsrs	r0, r2, #16
    cbf0:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    cbf4:	0c19      	lsrs	r1, r3, #16
    cbf6:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cbfa:	1814      	adds	r4, r2, r0
    cbfc:	9406      	str	r4, [sp, #24]
    cbfe:	414b      	adcs	r3, r1
    cc00:	9307      	str	r3, [sp, #28]
    cc02:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
    cc06:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 32);
    cc0a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cc0e:	f04f 0000 	mov.w	r0, #0
    cc12:	f04f 0100 	mov.w	r1, #0
    cc16:	0018      	movs	r0, r3
    cc18:	2100      	movs	r1, #0
    cc1a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cc1e:	1814      	adds	r4, r2, r0
    cc20:	9408      	str	r4, [sp, #32]
    cc22:	414b      	adcs	r3, r1
    cc24:	9309      	str	r3, [sp, #36]	; 0x24
    cc26:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
    cc2a:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 >>= 3;
    cc2e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    cc32:	f04f 0200 	mov.w	r2, #0
    cc36:	f04f 0300 	mov.w	r3, #0
    cc3a:	08c2      	lsrs	r2, r0, #3
    cc3c:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    cc40:	08cb      	lsrs	r3, r1, #3
    cc42:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
        r64 = ui64Val - q64*10;
    cc46:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
    cc4a:	4622      	mov	r2, r4
    cc4c:	462b      	mov	r3, r5
    cc4e:	f04f 0000 	mov.w	r0, #0
    cc52:	f04f 0100 	mov.w	r1, #0
    cc56:	0099      	lsls	r1, r3, #2
    cc58:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
    cc5c:	0090      	lsls	r0, r2, #2
    cc5e:	4602      	mov	r2, r0
    cc60:	460b      	mov	r3, r1
    cc62:	1916      	adds	r6, r2, r4
    cc64:	eb43 0705 	adc.w	r7, r3, r5
    cc68:	19b3      	adds	r3, r6, r6
    cc6a:	930a      	str	r3, [sp, #40]	; 0x28
    cc6c:	eb47 0307 	adc.w	r3, r7, r7
    cc70:	930b      	str	r3, [sp, #44]	; 0x2c
    cc72:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    cc76:	4630      	mov	r0, r6
    cc78:	4639      	mov	r1, r7
    cc7a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    cc7e:	1a14      	subs	r4, r2, r0
    cc80:	940c      	str	r4, [sp, #48]	; 0x30
    cc82:	eb63 0301 	sbc.w	r3, r3, r1
    cc86:	930d      	str	r3, [sp, #52]	; 0x34
    cc88:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    cc8c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
        return q64 + ((r64 + 6) >> 4);
    cc90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    cc94:	f112 0806 	adds.w	r8, r2, #6
    cc98:	f143 0900 	adc.w	r9, r3, #0
    cc9c:	f04f 0200 	mov.w	r2, #0
    cca0:	f04f 0300 	mov.w	r3, #0
    cca4:	ea4f 1218 	mov.w	r2, r8, lsr #4
    cca8:	ea42 7209 	orr.w	r2, r2, r9, lsl #28
    ccac:	ea4f 1319 	mov.w	r3, r9, lsr #4
    ccb0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    ccb4:	1814      	adds	r4, r2, r0
    ccb6:	9400      	str	r4, [sp, #0]
    ccb8:	414b      	adcs	r3, r1
    ccba:	9301      	str	r3, [sp, #4]
    ccbc:	e02a      	b.n	cd14 <divu64_10+0x1d8>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    ccbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ccc0:	9317      	str	r3, [sp, #92]	; 0x5c
        q32 = (ui32Val>>1) + (ui32Val>>2);
    ccc2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ccc4:	085a      	lsrs	r2, r3, #1
    ccc6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ccc8:	089b      	lsrs	r3, r3, #2
    ccca:	4413      	add	r3, r2
    cccc:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 4);
    ccce:	9b16      	ldr	r3, [sp, #88]	; 0x58
    ccd0:	091b      	lsrs	r3, r3, #4
    ccd2:	9a16      	ldr	r2, [sp, #88]	; 0x58
    ccd4:	4413      	add	r3, r2
    ccd6:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 8);
    ccd8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    ccda:	0a1b      	lsrs	r3, r3, #8
    ccdc:	9a16      	ldr	r2, [sp, #88]	; 0x58
    ccde:	4413      	add	r3, r2
    cce0:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 16);
    cce2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    cce4:	0c1b      	lsrs	r3, r3, #16
    cce6:	9a16      	ldr	r2, [sp, #88]	; 0x58
    cce8:	4413      	add	r3, r2
    ccea:	9316      	str	r3, [sp, #88]	; 0x58
        q32 >>= 3;
    ccec:	9b16      	ldr	r3, [sp, #88]	; 0x58
    ccee:	08db      	lsrs	r3, r3, #3
    ccf0:	9316      	str	r3, [sp, #88]	; 0x58
        r32 = ui32Val - q32*10;
    ccf2:	9a16      	ldr	r2, [sp, #88]	; 0x58
    ccf4:	4613      	mov	r3, r2
    ccf6:	009b      	lsls	r3, r3, #2
    ccf8:	4413      	add	r3, r2
    ccfa:	005b      	lsls	r3, r3, #1
    ccfc:	461a      	mov	r2, r3
    ccfe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    cd00:	1a9b      	subs	r3, r3, r2
    cd02:	9315      	str	r3, [sp, #84]	; 0x54
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cd04:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cd06:	3306      	adds	r3, #6
    cd08:	091a      	lsrs	r2, r3, #4
    cd0a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    cd0c:	4413      	add	r3, r2
    cd0e:	2200      	movs	r2, #0
    cd10:	9300      	str	r3, [sp, #0]
    cd12:	9201      	str	r2, [sp, #4]
    }
}
    cd14:	e9dd 2300 	ldrd	r2, r3, [sp]
    cd18:	4610      	mov	r0, r2
    cd1a:	4619      	mov	r1, r3
    cd1c:	b018      	add	sp, #96	; 0x60
    cd1e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    cd22:	4770      	bx	lr

0000cd24 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    cd24:	b500      	push	{lr}
    cd26:	b085      	sub	sp, #20
    cd28:	e9cd 0100 	strd	r0, r1, [sp]
    int iNDigits = ui64Val ? 0 : 1;
    cd2c:	9a00      	ldr	r2, [sp, #0]
    cd2e:	9b01      	ldr	r3, [sp, #4]
    cd30:	4313      	orrs	r3, r2
    cd32:	2b00      	cmp	r3, #0
    cd34:	bf0c      	ite	eq
    cd36:	2301      	moveq	r3, #1
    cd38:	2300      	movne	r3, #0
    cd3a:	b2db      	uxtb	r3, r3
    cd3c:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    cd3e:	e008      	b.n	cd52 <ndigits_in_u64+0x2e>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    cd40:	e9dd 0100 	ldrd	r0, r1, [sp]
    cd44:	f7ff fefa 	bl	cb3c <divu64_10>
    cd48:	e9cd 0100 	strd	r0, r1, [sp]
        ++iNDigits;
    cd4c:	9b03      	ldr	r3, [sp, #12]
    cd4e:	3301      	adds	r3, #1
    cd50:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    cd52:	e9dd 2300 	ldrd	r2, r3, [sp]
    cd56:	4313      	orrs	r3, r2
    cd58:	d1f2      	bne.n	cd40 <ndigits_in_u64+0x1c>
    }

    return iNDigits;
    cd5a:	9b03      	ldr	r3, [sp, #12]
}
    cd5c:	4618      	mov	r0, r3
    cd5e:	b005      	add	sp, #20
    cd60:	f85d fb04 	ldr.w	pc, [sp], #4

0000cd64 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    cd64:	b530      	push	{r4, r5, lr}
    cd66:	b083      	sub	sp, #12
    cd68:	e9cd 0100 	strd	r0, r1, [sp]
    if ( i64Val < 0 )
    cd6c:	e9dd 2300 	ldrd	r2, r3, [sp]
    cd70:	2b00      	cmp	r3, #0
    cd72:	da07      	bge.n	cd84 <ndigits_in_i64+0x20>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    cd74:	e9dd 2300 	ldrd	r2, r3, [sp]
    cd78:	2100      	movs	r1, #0
    cd7a:	4254      	negs	r4, r2
    cd7c:	eb61 0503 	sbc.w	r5, r1, r3
    cd80:	e9cd 4500 	strd	r4, r5, [sp]
    }

    return ndigits_in_u64((uint64_t) i64Val);
    cd84:	e9dd 2300 	ldrd	r2, r3, [sp]
    cd88:	4610      	mov	r0, r2
    cd8a:	4619      	mov	r1, r3
    cd8c:	f7ff ffca 	bl	cd24 <ndigits_in_u64>
    cd90:	4603      	mov	r3, r0
}
    cd92:	4618      	mov	r0, r3
    cd94:	b003      	add	sp, #12
    cd96:	bd30      	pop	{r4, r5, pc}

0000cd98 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    cd98:	b084      	sub	sp, #16
    cd9a:	e9cd 0100 	strd	r0, r1, [sp]
    int iDigits = ui64Val ? 0 : 1;
    cd9e:	9a00      	ldr	r2, [sp, #0]
    cda0:	9b01      	ldr	r3, [sp, #4]
    cda2:	4313      	orrs	r3, r2
    cda4:	2b00      	cmp	r3, #0
    cda6:	bf0c      	ite	eq
    cda8:	2301      	moveq	r3, #1
    cdaa:	2300      	movne	r3, #0
    cdac:	b2db      	uxtb	r3, r3
    cdae:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    cdb0:	e00e      	b.n	cdd0 <ndigits_in_hex+0x38>
    {
        ui64Val >>= 4;
    cdb2:	e9dd 0100 	ldrd	r0, r1, [sp]
    cdb6:	f04f 0200 	mov.w	r2, #0
    cdba:	f04f 0300 	mov.w	r3, #0
    cdbe:	0902      	lsrs	r2, r0, #4
    cdc0:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    cdc4:	090b      	lsrs	r3, r1, #4
    cdc6:	e9cd 2300 	strd	r2, r3, [sp]
        ++iDigits;
    cdca:	9b03      	ldr	r3, [sp, #12]
    cdcc:	3301      	adds	r3, #1
    cdce:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    cdd0:	e9dd 2300 	ldrd	r2, r3, [sp]
    cdd4:	4313      	orrs	r3, r2
    cdd6:	d1ec      	bne.n	cdb2 <ndigits_in_hex+0x1a>
    }

    return iDigits;
    cdd8:	9b03      	ldr	r3, [sp, #12]
}
    cdda:	4618      	mov	r0, r3
    cddc:	b004      	add	sp, #16
    cdde:	4770      	bx	lr

0000cde0 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    cde0:	b086      	sub	sp, #24
    cde2:	9001      	str	r0, [sp, #4]
    cde4:	9100      	str	r1, [sp, #0]
    bool bNeg = false;
    cde6:	2300      	movs	r3, #0
    cde8:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    cdec:	2300      	movs	r3, #0
    cdee:	9304      	str	r3, [sp, #16]
    cdf0:	2300      	movs	r3, #0
    cdf2:	9303      	str	r3, [sp, #12]

    if ( *pcStr == '-')
    cdf4:	9b01      	ldr	r3, [sp, #4]
    cdf6:	781b      	ldrb	r3, [r3, #0]
    cdf8:	2b2d      	cmp	r3, #45	; 0x2d
    cdfa:	d11c      	bne.n	ce36 <decstr_to_int+0x56>
    {
        bNeg = true;
    cdfc:	2301      	movs	r3, #1
    cdfe:	f88d 3017 	strb.w	r3, [sp, #23]
        pcStr++;
    ce02:	9b01      	ldr	r3, [sp, #4]
    ce04:	3301      	adds	r3, #1
    ce06:	9301      	str	r3, [sp, #4]
        uCnt++;
    ce08:	9b03      	ldr	r3, [sp, #12]
    ce0a:	3301      	adds	r3, #1
    ce0c:	9303      	str	r3, [sp, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ce0e:	e012      	b.n	ce36 <decstr_to_int+0x56>
    {
        ++uCnt;
    ce10:	9b03      	ldr	r3, [sp, #12]
    ce12:	3301      	adds	r3, #1
    ce14:	9303      	str	r3, [sp, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    ce16:	9a04      	ldr	r2, [sp, #16]
    ce18:	4613      	mov	r3, r2
    ce1a:	009b      	lsls	r3, r3, #2
    ce1c:	4413      	add	r3, r2
    ce1e:	005b      	lsls	r3, r3, #1
    ce20:	9304      	str	r3, [sp, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    ce22:	9b01      	ldr	r3, [sp, #4]
    ce24:	781b      	ldrb	r3, [r3, #0]
    ce26:	461a      	mov	r2, r3
    ce28:	9b04      	ldr	r3, [sp, #16]
    ce2a:	4413      	add	r3, r2
    ce2c:	3b30      	subs	r3, #48	; 0x30
    ce2e:	9304      	str	r3, [sp, #16]
        pcStr++;
    ce30:	9b01      	ldr	r3, [sp, #4]
    ce32:	3301      	adds	r3, #1
    ce34:	9301      	str	r3, [sp, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ce36:	9b01      	ldr	r3, [sp, #4]
    ce38:	781b      	ldrb	r3, [r3, #0]
    ce3a:	2b2f      	cmp	r3, #47	; 0x2f
    ce3c:	d903      	bls.n	ce46 <decstr_to_int+0x66>
    ce3e:	9b01      	ldr	r3, [sp, #4]
    ce40:	781b      	ldrb	r3, [r3, #0]
    ce42:	2b39      	cmp	r3, #57	; 0x39
    ce44:	d9e4      	bls.n	ce10 <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    ce46:	9b00      	ldr	r3, [sp, #0]
    ce48:	2b00      	cmp	r3, #0
    ce4a:	d002      	beq.n	ce52 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    ce4c:	9b00      	ldr	r3, [sp, #0]
    ce4e:	9a03      	ldr	r2, [sp, #12]
    ce50:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    ce52:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ce56:	2b00      	cmp	r3, #0
    ce58:	d002      	beq.n	ce60 <decstr_to_int+0x80>
    ce5a:	9b04      	ldr	r3, [sp, #16]
    ce5c:	425b      	negs	r3, r3
    ce5e:	e000      	b.n	ce62 <decstr_to_int+0x82>
    ce60:	9b04      	ldr	r3, [sp, #16]
}
    ce62:	4618      	mov	r0, r3
    ce64:	b006      	add	sp, #24
    ce66:	4770      	bx	lr

0000ce68 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    ce68:	b500      	push	{lr}
    ce6a:	b091      	sub	sp, #68	; 0x44
    ce6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    ce70:	9201      	str	r2, [sp, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    ce72:	2300      	movs	r3, #0
    ce74:	930f      	str	r3, [sp, #60]	; 0x3c
    ce76:	2300      	movs	r3, #0
    ce78:	930e      	str	r3, [sp, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    ce7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    ce7e:	f7ff fe5d 	bl	cb3c <divu64_10>
    ce82:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    ce86:	9902      	ldr	r1, [sp, #8]
    ce88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ce8a:	4613      	mov	r3, r2
    ce8c:	009b      	lsls	r3, r3, #2
    ce8e:	4413      	add	r3, r2
    ce90:	005b      	lsls	r3, r3, #1
    ce92:	1acb      	subs	r3, r1, r3
    ce94:	930b      	str	r3, [sp, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    ce96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ce98:	b2da      	uxtb	r2, r3
    ce9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ce9c:	1c59      	adds	r1, r3, #1
    ce9e:	910f      	str	r1, [sp, #60]	; 0x3c
    cea0:	3230      	adds	r2, #48	; 0x30
    cea2:	b2d2      	uxtb	r2, r2
    cea4:	3340      	adds	r3, #64	; 0x40
    cea6:	446b      	add	r3, sp
    cea8:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    ceac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    ceb0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    } while ( ui64Val );
    ceb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ceb8:	4313      	orrs	r3, r2
    ceba:	d1de      	bne.n	ce7a <uint64_to_str+0x12>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    cebc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cebe:	930e      	str	r3, [sp, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    cec0:	9b01      	ldr	r3, [sp, #4]
    cec2:	2b00      	cmp	r3, #0
    cec4:	d010      	beq.n	cee8 <uint64_to_str+0x80>
    {
        while ( ix-- )
    cec6:	e007      	b.n	ced8 <uint64_to_str+0x70>
        {
            *pcBuf++ = tbuf[ix];
    cec8:	9b01      	ldr	r3, [sp, #4]
    ceca:	1c5a      	adds	r2, r3, #1
    cecc:	9201      	str	r2, [sp, #4]
    cece:	a904      	add	r1, sp, #16
    ced0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    ced2:	440a      	add	r2, r1
    ced4:	7812      	ldrb	r2, [r2, #0]
    ced6:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    ced8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ceda:	1e5a      	subs	r2, r3, #1
    cedc:	920f      	str	r2, [sp, #60]	; 0x3c
    cede:	2b00      	cmp	r3, #0
    cee0:	d1f2      	bne.n	cec8 <uint64_to_str+0x60>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    cee2:	9b01      	ldr	r3, [sp, #4]
    cee4:	2200      	movs	r2, #0
    cee6:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    cee8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
}
    ceea:	4618      	mov	r0, r3
    ceec:	b011      	add	sp, #68	; 0x44
    ceee:	f85d fb04 	ldr.w	pc, [sp], #4

0000cef2 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    cef2:	b08c      	sub	sp, #48	; 0x30
    cef4:	e9cd 0102 	strd	r0, r1, [sp, #8]
    cef8:	9201      	str	r2, [sp, #4]
    cefa:	f88d 3003 	strb.w	r3, [sp, #3]
    int iNumDig, ix = 0;
    cefe:	2300      	movs	r3, #0
    cf00:	930b      	str	r3, [sp, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    cf02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cf06:	4313      	orrs	r3, r2
    cf08:	d135      	bne.n	cf76 <uint64_to_hexstr+0x84>
    {
        tbuf[ix++] = '0';   // Print a '0'
    cf0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cf0c:	1c5a      	adds	r2, r3, #1
    cf0e:	920b      	str	r2, [sp, #44]	; 0x2c
    cf10:	3330      	adds	r3, #48	; 0x30
    cf12:	446b      	add	r3, sp
    cf14:	2230      	movs	r2, #48	; 0x30
    cf16:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    cf1a:	e02c      	b.n	cf76 <uint64_to_hexstr+0x84>
    {
        cCh = ui64Val & 0xf;
    cf1c:	f89d 3008 	ldrb.w	r3, [sp, #8]
    cf20:	f003 030f 	and.w	r3, r3, #15
    cf24:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    cf28:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    cf2c:	2b09      	cmp	r3, #9
    cf2e:	d90b      	bls.n	cf48 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    cf30:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cf34:	2b00      	cmp	r3, #0
    cf36:	d001      	beq.n	cf3c <uint64_to_hexstr+0x4a>
    cf38:	2227      	movs	r2, #39	; 0x27
    cf3a:	e000      	b.n	cf3e <uint64_to_hexstr+0x4c>
    cf3c:	2207      	movs	r2, #7
    cf3e:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    cf42:	4413      	add	r3, r2
    cf44:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    cf48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cf4a:	1c5a      	adds	r2, r3, #1
    cf4c:	920b      	str	r2, [sp, #44]	; 0x2c
    cf4e:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    cf52:	3230      	adds	r2, #48	; 0x30
    cf54:	b2d2      	uxtb	r2, r2
    cf56:	3330      	adds	r3, #48	; 0x30
    cf58:	446b      	add	r3, sp
    cf5a:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    cf5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    cf62:	f04f 0200 	mov.w	r2, #0
    cf66:	f04f 0300 	mov.w	r3, #0
    cf6a:	0902      	lsrs	r2, r0, #4
    cf6c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    cf70:	090b      	lsrs	r3, r1, #4
    cf72:	e9cd 2302 	strd	r2, r3, [sp, #8]
    while ( ui64Val )
    cf76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cf7a:	4313      	orrs	r3, r2
    cf7c:	d1ce      	bne.n	cf1c <uint64_to_hexstr+0x2a>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    cf7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cf80:	9309      	str	r3, [sp, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    cf82:	9b01      	ldr	r3, [sp, #4]
    cf84:	2b00      	cmp	r3, #0
    cf86:	d010      	beq.n	cfaa <uint64_to_hexstr+0xb8>
    {
        while (ix--)
    cf88:	e007      	b.n	cf9a <uint64_to_hexstr+0xa8>
        {
            *pcBuf++ = tbuf[ix];
    cf8a:	9b01      	ldr	r3, [sp, #4]
    cf8c:	1c5a      	adds	r2, r3, #1
    cf8e:	9201      	str	r2, [sp, #4]
    cf90:	a904      	add	r1, sp, #16
    cf92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cf94:	440a      	add	r2, r1
    cf96:	7812      	ldrb	r2, [r2, #0]
    cf98:	701a      	strb	r2, [r3, #0]
        while (ix--)
    cf9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cf9c:	1e5a      	subs	r2, r3, #1
    cf9e:	920b      	str	r2, [sp, #44]	; 0x2c
    cfa0:	2b00      	cmp	r3, #0
    cfa2:	d1f2      	bne.n	cf8a <uint64_to_hexstr+0x98>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    cfa4:	9b01      	ldr	r3, [sp, #4]
    cfa6:	2200      	movs	r2, #0
    cfa8:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    cfaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    cfac:	4618      	mov	r0, r3
    cfae:	b00c      	add	sp, #48	; 0x30
    cfb0:	4770      	bx	lr

0000cfb2 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    cfb2:	b084      	sub	sp, #16
    cfb4:	9001      	str	r0, [sp, #4]
    uint32_t ui32RetVal = 0;
    cfb6:	2300      	movs	r3, #0
    cfb8:	9303      	str	r3, [sp, #12]
    if ( !pcBuf )
    cfba:	9b01      	ldr	r3, [sp, #4]
    cfbc:	2b00      	cmp	r3, #0
    cfbe:	d104      	bne.n	cfca <simple_strlen+0x18>
    {
        return ui32RetVal;
    cfc0:	9b03      	ldr	r3, [sp, #12]
    cfc2:	e009      	b.n	cfd8 <simple_strlen+0x26>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    cfc4:	9b03      	ldr	r3, [sp, #12]
    cfc6:	3301      	adds	r3, #1
    cfc8:	9303      	str	r3, [sp, #12]
    while ( *pcBuf++ )
    cfca:	9b01      	ldr	r3, [sp, #4]
    cfcc:	1c5a      	adds	r2, r3, #1
    cfce:	9201      	str	r2, [sp, #4]
    cfd0:	781b      	ldrb	r3, [r3, #0]
    cfd2:	2b00      	cmp	r3, #0
    cfd4:	d1f6      	bne.n	cfc4 <simple_strlen+0x12>
    }
    return ui32RetVal;
    cfd6:	9b03      	ldr	r3, [sp, #12]
}
    cfd8:	4618      	mov	r0, r3
    cfda:	b004      	add	sp, #16
    cfdc:	4770      	bx	lr

0000cfde <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    cfde:	b086      	sub	sp, #24
    cfe0:	9003      	str	r0, [sp, #12]
    cfe2:	460b      	mov	r3, r1
    cfe4:	9201      	str	r2, [sp, #4]
    cfe6:	f88d 300b 	strb.w	r3, [sp, #11]
    int32_t i32Cnt = 0;
    cfea:	2300      	movs	r3, #0
    cfec:	9305      	str	r3, [sp, #20]

    if ( i32NumChars <= 0 )
    cfee:	9b01      	ldr	r3, [sp, #4]
    cff0:	2b00      	cmp	r3, #0
    cff2:	dc0d      	bgt.n	d010 <padbuffer+0x32>
    {
        return i32Cnt;
    cff4:	9b05      	ldr	r3, [sp, #20]
    cff6:	e011      	b.n	d01c <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    cff8:	9b03      	ldr	r3, [sp, #12]
    cffa:	2b00      	cmp	r3, #0
    cffc:	d005      	beq.n	d00a <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    cffe:	9b03      	ldr	r3, [sp, #12]
    d000:	1c5a      	adds	r2, r3, #1
    d002:	9203      	str	r2, [sp, #12]
    d004:	f89d 200b 	ldrb.w	r2, [sp, #11]
    d008:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    d00a:	9b05      	ldr	r3, [sp, #20]
    d00c:	3301      	adds	r3, #1
    d00e:	9305      	str	r3, [sp, #20]
    while ( i32NumChars-- )
    d010:	9b01      	ldr	r3, [sp, #4]
    d012:	1e5a      	subs	r2, r3, #1
    d014:	9201      	str	r2, [sp, #4]
    d016:	2b00      	cmp	r3, #0
    d018:	d1ee      	bne.n	cff8 <padbuffer+0x1a>
    }

    return i32Cnt;
    d01a:	9b05      	ldr	r3, [sp, #20]
}
    d01c:	4618      	mov	r0, r3
    d01e:	b006      	add	sp, #24
    d020:	4770      	bx	lr
	...

0000d024 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    d024:	b5f0      	push	{r4, r5, r6, r7, lr}
    d026:	b08f      	sub	sp, #60	; 0x3c
    d028:	ed8d 0a03 	vstr	s0, [sp, #12]
    d02c:	9002      	str	r0, [sp, #8]
    d02e:	9101      	str	r1, [sp, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    d030:	9b02      	ldr	r3, [sp, #8]
    d032:	681b      	ldr	r3, [r3, #0]
    d034:	9309      	str	r3, [sp, #36]	; 0x24
    if (iBufSize < 4)
    d036:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d038:	2b03      	cmp	r3, #3
    d03a:	dc02      	bgt.n	d042 <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    d03c:	f06f 0302 	mvn.w	r3, #2
    d040:	e0e9      	b.n	d216 <ftoa+0x1f2>
    }

    if (fValue == 0.0f)
    d042:	eddd 7a03 	vldr	s15, [sp, #12]
    d046:	eef5 7a40 	vcmp.f32	s15, #0.0
    d04a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d04e:	d104      	bne.n	d05a <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    d050:	9b02      	ldr	r3, [sp, #8]
    d052:	4a72      	ldr	r2, [pc, #456]	; (d21c <ftoa+0x1f8>)
    d054:	601a      	str	r2, [r3, #0]
        return 3;
    d056:	2303      	movs	r3, #3
    d058:	e0dd      	b.n	d216 <ftoa+0x1f2>
    }

    pcBufInitial = pcBuf;
    d05a:	9b02      	ldr	r3, [sp, #8]
    d05c:	9308      	str	r3, [sp, #32]

    unFloatValue.F = fValue;
    d05e:	9b03      	ldr	r3, [sp, #12]
    d060:	9304      	str	r3, [sp, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    d062:	9b04      	ldr	r3, [sp, #16]
    d064:	15db      	asrs	r3, r3, #23
    d066:	b2db      	uxtb	r3, r3
    d068:	3b7f      	subs	r3, #127	; 0x7f
    d06a:	9307      	str	r3, [sp, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    d06c:	9b04      	ldr	r3, [sp, #16]
    d06e:	f3c3 0316 	ubfx	r3, r3, #0, #23
    d072:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    d076:	9306      	str	r3, [sp, #24]
    i32FracPart = 0;
    d078:	2300      	movs	r3, #0
    d07a:	930c      	str	r3, [sp, #48]	; 0x30
    i32IntPart = 0;
    d07c:	2300      	movs	r3, #0
    d07e:	930d      	str	r3, [sp, #52]	; 0x34

    if (iExp2 >= 31)
    d080:	9b07      	ldr	r3, [sp, #28]
    d082:	2b1e      	cmp	r3, #30
    d084:	dd02      	ble.n	d08c <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    d086:	f06f 0301 	mvn.w	r3, #1
    d08a:	e0c4      	b.n	d216 <ftoa+0x1f2>
    }
    else if (iExp2 < -23)
    d08c:	9b07      	ldr	r3, [sp, #28]
    d08e:	f113 0f17 	cmn.w	r3, #23
    d092:	da02      	bge.n	d09a <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    d094:	f04f 33ff 	mov.w	r3, #4294967295
    d098:	e0bd      	b.n	d216 <ftoa+0x1f2>
    }
    else if (iExp2 >= 23)
    d09a:	9b07      	ldr	r3, [sp, #28]
    d09c:	2b16      	cmp	r3, #22
    d09e:	dd06      	ble.n	d0ae <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    d0a0:	9b07      	ldr	r3, [sp, #28]
    d0a2:	3b17      	subs	r3, #23
    d0a4:	9a06      	ldr	r2, [sp, #24]
    d0a6:	fa02 f303 	lsl.w	r3, r2, r3
    d0aa:	930d      	str	r3, [sp, #52]	; 0x34
    d0ac:	e01a      	b.n	d0e4 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    d0ae:	9b07      	ldr	r3, [sp, #28]
    d0b0:	2b00      	cmp	r3, #0
    d0b2:	db0f      	blt.n	d0d4 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    d0b4:	9b07      	ldr	r3, [sp, #28]
    d0b6:	f1c3 0317 	rsb	r3, r3, #23
    d0ba:	9a06      	ldr	r2, [sp, #24]
    d0bc:	fa42 f303 	asr.w	r3, r2, r3
    d0c0:	930d      	str	r3, [sp, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    d0c2:	9b07      	ldr	r3, [sp, #28]
    d0c4:	3301      	adds	r3, #1
    d0c6:	9a06      	ldr	r2, [sp, #24]
    d0c8:	fa02 f303 	lsl.w	r3, r2, r3
    d0cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    d0d0:	930c      	str	r3, [sp, #48]	; 0x30
    d0d2:	e007      	b.n	d0e4 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    d0d4:	9b06      	ldr	r3, [sp, #24]
    d0d6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    d0da:	9b07      	ldr	r3, [sp, #28]
    d0dc:	43db      	mvns	r3, r3
    d0de:	fa42 f303 	asr.w	r3, r2, r3
    d0e2:	930c      	str	r3, [sp, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    d0e4:	9b04      	ldr	r3, [sp, #16]
    d0e6:	2b00      	cmp	r3, #0
    d0e8:	da04      	bge.n	d0f4 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    d0ea:	9b02      	ldr	r3, [sp, #8]
    d0ec:	1c5a      	adds	r2, r3, #1
    d0ee:	9202      	str	r2, [sp, #8]
    d0f0:	222d      	movs	r2, #45	; 0x2d
    d0f2:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    d0f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d0f6:	2b00      	cmp	r3, #0
    d0f8:	d105      	bne.n	d106 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    d0fa:	9b02      	ldr	r3, [sp, #8]
    d0fc:	1c5a      	adds	r2, r3, #1
    d0fe:	9202      	str	r2, [sp, #8]
    d100:	2230      	movs	r2, #48	; 0x30
    d102:	701a      	strb	r2, [r3, #0]
    d104:	e023      	b.n	d14e <ftoa+0x12a>
    }
    else
    {
        if (i32IntPart > 0)
    d106:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d108:	2b00      	cmp	r3, #0
    d10a:	dd09      	ble.n	d120 <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
    d10c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d10e:	17da      	asrs	r2, r3, #31
    d110:	461e      	mov	r6, r3
    d112:	4617      	mov	r7, r2
    d114:	9a02      	ldr	r2, [sp, #8]
    d116:	4630      	mov	r0, r6
    d118:	4639      	mov	r1, r7
    d11a:	f7ff fea5 	bl	ce68 <uint64_to_str>
    d11e:	e012      	b.n	d146 <ftoa+0x122>
        }
        else
        {
            *pcBuf++ = '-';
    d120:	9b02      	ldr	r3, [sp, #8]
    d122:	1c5a      	adds	r2, r3, #1
    d124:	9202      	str	r2, [sp, #8]
    d126:	222d      	movs	r2, #45	; 0x2d
    d128:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    d12a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d12c:	425b      	negs	r3, r3
    d12e:	17da      	asrs	r2, r3, #31
    d130:	461c      	mov	r4, r3
    d132:	4615      	mov	r5, r2
    d134:	9a02      	ldr	r2, [sp, #8]
    d136:	4620      	mov	r0, r4
    d138:	4629      	mov	r1, r5
    d13a:	f7ff fe95 	bl	ce68 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    d13e:	e002      	b.n	d146 <ftoa+0x122>
        {
            pcBuf++;
    d140:	9b02      	ldr	r3, [sp, #8]
    d142:	3301      	adds	r3, #1
    d144:	9302      	str	r3, [sp, #8]
        while (*pcBuf)    // Get to end of new string
    d146:	9b02      	ldr	r3, [sp, #8]
    d148:	781b      	ldrb	r3, [r3, #0]
    d14a:	2b00      	cmp	r3, #0
    d14c:	d1f8      	bne.n	d140 <ftoa+0x11c>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    d14e:	9b02      	ldr	r3, [sp, #8]
    d150:	1c5a      	adds	r2, r3, #1
    d152:	9202      	str	r2, [sp, #8]
    d154:	222e      	movs	r2, #46	; 0x2e
    d156:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    d158:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d15a:	2b00      	cmp	r3, #0
    d15c:	d105      	bne.n	d16a <ftoa+0x146>
    {
        *pcBuf++ = '0';
    d15e:	9b02      	ldr	r3, [sp, #8]
    d160:	1c5a      	adds	r2, r3, #1
    d162:	9202      	str	r2, [sp, #8]
    d164:	2230      	movs	r2, #48	; 0x30
    d166:	701a      	strb	r2, [r3, #0]
    d168:	e04f      	b.n	d20a <ftoa+0x1e6>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    d16a:	9a02      	ldr	r2, [sp, #8]
    d16c:	9b08      	ldr	r3, [sp, #32]
    d16e:	1ad3      	subs	r3, r2, r3
    d170:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d172:	1ad3      	subs	r3, r2, r3
    d174:	3b01      	subs	r3, #1
    d176:	9305      	str	r3, [sp, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    d178:	9a05      	ldr	r2, [sp, #20]
    d17a:	9b01      	ldr	r3, [sp, #4]
    d17c:	4293      	cmp	r3, r2
    d17e:	bfa8      	it	ge
    d180:	4613      	movge	r3, r2
    d182:	9305      	str	r3, [sp, #20]

        for (jx = 0; jx < iMax; jx++)
    d184:	2300      	movs	r3, #0
    d186:	930a      	str	r3, [sp, #40]	; 0x28
    d188:	e015      	b.n	d1b6 <ftoa+0x192>
        {
            i32FracPart *= 10;
    d18a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d18c:	4613      	mov	r3, r2
    d18e:	009b      	lsls	r3, r3, #2
    d190:	4413      	add	r3, r2
    d192:	005b      	lsls	r3, r3, #1
    d194:	930c      	str	r3, [sp, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d196:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d198:	161b      	asrs	r3, r3, #24
    d19a:	b2da      	uxtb	r2, r3
    d19c:	9b02      	ldr	r3, [sp, #8]
    d19e:	1c59      	adds	r1, r3, #1
    d1a0:	9102      	str	r1, [sp, #8]
    d1a2:	3230      	adds	r2, #48	; 0x30
    d1a4:	b2d2      	uxtb	r2, r2
    d1a6:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    d1a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d1aa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    d1ae:	930c      	str	r3, [sp, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    d1b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d1b2:	3301      	adds	r3, #1
    d1b4:	930a      	str	r3, [sp, #40]	; 0x28
    d1b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d1b8:	9b05      	ldr	r3, [sp, #20]
    d1ba:	429a      	cmp	r2, r3
    d1bc:	dbe5      	blt.n	d18a <ftoa+0x166>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    d1be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d1c0:	4613      	mov	r3, r2
    d1c2:	009b      	lsls	r3, r3, #2
    d1c4:	4413      	add	r3, r2
    d1c6:	005b      	lsls	r3, r3, #1
    d1c8:	161b      	asrs	r3, r3, #24
    d1ca:	2b04      	cmp	r3, #4
    d1cc:	dd1d      	ble.n	d20a <ftoa+0x1e6>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    d1ce:	9b02      	ldr	r3, [sp, #8]
    d1d0:	3b01      	subs	r3, #1
    d1d2:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    d1d4:	e015      	b.n	d202 <ftoa+0x1de>
            {
                if ( *pcBuftmp == '.' )
    d1d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d1d8:	781b      	ldrb	r3, [r3, #0]
    d1da:	2b2e      	cmp	r3, #46	; 0x2e
    d1dc:	d00e      	beq.n	d1fc <ftoa+0x1d8>
                {
                }
                else if ( *pcBuftmp == '9' )
    d1de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d1e0:	781b      	ldrb	r3, [r3, #0]
    d1e2:	2b39      	cmp	r3, #57	; 0x39
    d1e4:	d103      	bne.n	d1ee <ftoa+0x1ca>
                {
                    *pcBuftmp = '0';
    d1e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d1e8:	2230      	movs	r2, #48	; 0x30
    d1ea:	701a      	strb	r2, [r3, #0]
    d1ec:	e006      	b.n	d1fc <ftoa+0x1d8>
                }
                else
                {
                    *pcBuftmp += 1;
    d1ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d1f0:	781b      	ldrb	r3, [r3, #0]
    d1f2:	3301      	adds	r3, #1
    d1f4:	b2da      	uxtb	r2, r3
    d1f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d1f8:	701a      	strb	r2, [r3, #0]
                    break;
    d1fa:	e006      	b.n	d20a <ftoa+0x1e6>
                }
                pcBuftmp--;
    d1fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d1fe:	3b01      	subs	r3, #1
    d200:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    d202:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d204:	9b08      	ldr	r3, [sp, #32]
    d206:	429a      	cmp	r2, r3
    d208:	d2e5      	bcs.n	d1d6 <ftoa+0x1b2>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    d20a:	9b02      	ldr	r3, [sp, #8]
    d20c:	2200      	movs	r2, #0
    d20e:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    d210:	9a02      	ldr	r2, [sp, #8]
    d212:	9b08      	ldr	r3, [sp, #32]
    d214:	1ad3      	subs	r3, r2, r3
} // ftoa()
    d216:	4618      	mov	r0, r3
    d218:	b00f      	add	sp, #60	; 0x3c
    d21a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d21c:	00302e30 	.word	0x00302e30

0000d220 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    d220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d224:	b097      	sub	sp, #92	; 0x5c
    d226:	9003      	str	r0, [sp, #12]
    d228:	9102      	str	r1, [sp, #8]
    d22a:	9201      	str	r2, [sp, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    d22c:	2300      	movs	r3, #0
    d22e:	9311      	str	r3, [sp, #68]	; 0x44
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    d230:	2300      	movs	r3, #0
    d232:	930b      	str	r3, [sp, #44]	; 0x2c

    while ( *pcFmt != 0x0 )
    d234:	e2e9      	b.n	d80a <am_util_stdio_vsprintf+0x5ea>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    d236:	2306      	movs	r3, #6
    d238:	930e      	str	r3, [sp, #56]	; 0x38

        if ( *pcFmt != '%' )
    d23a:	9b02      	ldr	r3, [sp, #8]
    d23c:	781b      	ldrb	r3, [r3, #0]
    d23e:	2b25      	cmp	r3, #37	; 0x25
    d240:	d01f      	beq.n	d282 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    d242:	9b03      	ldr	r3, [sp, #12]
    d244:	2b00      	cmp	r3, #0
    d246:	d015      	beq.n	d274 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    d248:	9b02      	ldr	r3, [sp, #8]
    d24a:	781b      	ldrb	r3, [r3, #0]
    d24c:	2b0a      	cmp	r3, #10
    d24e:	d10b      	bne.n	d268 <am_util_stdio_vsprintf+0x48>
    d250:	4ba8      	ldr	r3, [pc, #672]	; (d4f4 <am_util_stdio_vsprintf+0x2d4>)
    d252:	781b      	ldrb	r3, [r3, #0]
    d254:	2b00      	cmp	r3, #0
    d256:	d007      	beq.n	d268 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    d258:	9b03      	ldr	r3, [sp, #12]
    d25a:	1c5a      	adds	r2, r3, #1
    d25c:	9203      	str	r2, [sp, #12]
    d25e:	220d      	movs	r2, #13
    d260:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    d262:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d264:	3301      	adds	r3, #1
    d266:	9311      	str	r3, [sp, #68]	; 0x44
                }
                *pcBuf++ = *pcFmt;
    d268:	9b03      	ldr	r3, [sp, #12]
    d26a:	1c5a      	adds	r2, r3, #1
    d26c:	9203      	str	r2, [sp, #12]
    d26e:	9a02      	ldr	r2, [sp, #8]
    d270:	7812      	ldrb	r2, [r2, #0]
    d272:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    d274:	9b02      	ldr	r3, [sp, #8]
    d276:	3301      	adds	r3, #1
    d278:	9302      	str	r3, [sp, #8]
            ++ui32CharCnt;
    d27a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d27c:	3301      	adds	r3, #1
    d27e:	9311      	str	r3, [sp, #68]	; 0x44
            continue;
    d280:	e2c3      	b.n	d80a <am_util_stdio_vsprintf+0x5ea>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    d282:	9b02      	ldr	r3, [sp, #8]
    d284:	3301      	adds	r3, #1
    d286:	9302      	str	r3, [sp, #8]
        bLower = bLongLong = false;
    d288:	2300      	movs	r3, #0
    d28a:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    d28e:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d292:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    d296:	2320      	movs	r3, #32
    d298:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

        if ( *pcFmt == '0' )
    d29c:	9b02      	ldr	r3, [sp, #8]
    d29e:	781b      	ldrb	r3, [r3, #0]
    d2a0:	2b30      	cmp	r3, #48	; 0x30
    d2a2:	d105      	bne.n	d2b0 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    d2a4:	2330      	movs	r3, #48	; 0x30
    d2a6:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
            ++pcFmt;
    d2aa:	9b02      	ldr	r3, [sp, #8]
    d2ac:	3301      	adds	r3, #1
    d2ae:	9302      	str	r3, [sp, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    d2b0:	ab05      	add	r3, sp, #20
    d2b2:	4619      	mov	r1, r3
    d2b4:	9802      	ldr	r0, [sp, #8]
    d2b6:	f7ff fd93 	bl	cde0 <decstr_to_int>
    d2ba:	4603      	mov	r3, r0
    d2bc:	9310      	str	r3, [sp, #64]	; 0x40
        pcFmt += ui32NumChars;
    d2be:	9b05      	ldr	r3, [sp, #20]
    d2c0:	9a02      	ldr	r2, [sp, #8]
    d2c2:	4413      	add	r3, r2
    d2c4:	9302      	str	r3, [sp, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    d2c6:	9b02      	ldr	r3, [sp, #8]
    d2c8:	781b      	ldrb	r3, [r3, #0]
    d2ca:	2b73      	cmp	r3, #115	; 0x73
    d2cc:	d005      	beq.n	d2da <am_util_stdio_vsprintf+0xba>
    d2ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d2d0:	2b00      	cmp	r3, #0
    d2d2:	da02      	bge.n	d2da <am_util_stdio_vsprintf+0xba>
        {
            iWidth = -iWidth;
    d2d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d2d6:	425b      	negs	r3, r3
    d2d8:	9310      	str	r3, [sp, #64]	; 0x40
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    d2da:	9b02      	ldr	r3, [sp, #8]
    d2dc:	781b      	ldrb	r3, [r3, #0]
    d2de:	2b2e      	cmp	r3, #46	; 0x2e
    d2e0:	d10d      	bne.n	d2fe <am_util_stdio_vsprintf+0xde>
        {
            ++pcFmt;
    d2e2:	9b02      	ldr	r3, [sp, #8]
    d2e4:	3301      	adds	r3, #1
    d2e6:	9302      	str	r3, [sp, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    d2e8:	ab05      	add	r3, sp, #20
    d2ea:	4619      	mov	r1, r3
    d2ec:	9802      	ldr	r0, [sp, #8]
    d2ee:	f7ff fd77 	bl	cde0 <decstr_to_int>
    d2f2:	4603      	mov	r3, r0
    d2f4:	930e      	str	r3, [sp, #56]	; 0x38
            pcFmt += ui32NumChars;
    d2f6:	9b05      	ldr	r3, [sp, #20]
    d2f8:	9a02      	ldr	r2, [sp, #8]
    d2fa:	4413      	add	r3, r2
    d2fc:	9302      	str	r3, [sp, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    d2fe:	9b02      	ldr	r3, [sp, #8]
    d300:	781b      	ldrb	r3, [r3, #0]
    d302:	2b6c      	cmp	r3, #108	; 0x6c
    d304:	d10c      	bne.n	d320 <am_util_stdio_vsprintf+0x100>
        {
            pcFmt++;
    d306:	9b02      	ldr	r3, [sp, #8]
    d308:	3301      	adds	r3, #1
    d30a:	9302      	str	r3, [sp, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    d30c:	9b02      	ldr	r3, [sp, #8]
    d30e:	781b      	ldrb	r3, [r3, #0]
    d310:	2b6c      	cmp	r3, #108	; 0x6c
    d312:	d105      	bne.n	d320 <am_util_stdio_vsprintf+0x100>
            {
                pcFmt++;
    d314:	9b02      	ldr	r3, [sp, #8]
    d316:	3301      	adds	r3, #1
    d318:	9302      	str	r3, [sp, #8]
                bLongLong = true;
    d31a:	2301      	movs	r3, #1
    d31c:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
            }
        }

        switch ( *pcFmt )
    d320:	9b02      	ldr	r3, [sp, #8]
    d322:	781b      	ldrb	r3, [r3, #0]
    d324:	3b46      	subs	r3, #70	; 0x46
    d326:	2b32      	cmp	r3, #50	; 0x32
    d328:	f200 825c 	bhi.w	d7e4 <am_util_stdio_vsprintf+0x5c4>
    d32c:	a201      	add	r2, pc, #4	; (adr r2, d334 <am_util_stdio_vsprintf+0x114>)
    d32e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d332:	bf00      	nop
    d334:	0000d76b 	.word	0x0000d76b
    d338:	0000d7e5 	.word	0x0000d7e5
    d33c:	0000d7e5 	.word	0x0000d7e5
    d340:	0000d7e5 	.word	0x0000d7e5
    d344:	0000d7e5 	.word	0x0000d7e5
    d348:	0000d7e5 	.word	0x0000d7e5
    d34c:	0000d7e5 	.word	0x0000d7e5
    d350:	0000d7e5 	.word	0x0000d7e5
    d354:	0000d7e5 	.word	0x0000d7e5
    d358:	0000d7e5 	.word	0x0000d7e5
    d35c:	0000d7e5 	.word	0x0000d7e5
    d360:	0000d7e5 	.word	0x0000d7e5
    d364:	0000d7e5 	.word	0x0000d7e5
    d368:	0000d7e5 	.word	0x0000d7e5
    d36c:	0000d7e5 	.word	0x0000d7e5
    d370:	0000d7e5 	.word	0x0000d7e5
    d374:	0000d7e5 	.word	0x0000d7e5
    d378:	0000d7e5 	.word	0x0000d7e5
    d37c:	0000d4ff 	.word	0x0000d4ff
    d380:	0000d7e5 	.word	0x0000d7e5
    d384:	0000d7e5 	.word	0x0000d7e5
    d388:	0000d7e5 	.word	0x0000d7e5
    d38c:	0000d7e5 	.word	0x0000d7e5
    d390:	0000d7e5 	.word	0x0000d7e5
    d394:	0000d7e5 	.word	0x0000d7e5
    d398:	0000d7e5 	.word	0x0000d7e5
    d39c:	0000d7e5 	.word	0x0000d7e5
    d3a0:	0000d7e5 	.word	0x0000d7e5
    d3a4:	0000d7e5 	.word	0x0000d7e5
    d3a8:	0000d401 	.word	0x0000d401
    d3ac:	0000d62f 	.word	0x0000d62f
    d3b0:	0000d7e5 	.word	0x0000d7e5
    d3b4:	0000d76b 	.word	0x0000d76b
    d3b8:	0000d7e5 	.word	0x0000d7e5
    d3bc:	0000d7e5 	.word	0x0000d7e5
    d3c0:	0000d62f 	.word	0x0000d62f
    d3c4:	0000d7e5 	.word	0x0000d7e5
    d3c8:	0000d7e5 	.word	0x0000d7e5
    d3cc:	0000d7e5 	.word	0x0000d7e5
    d3d0:	0000d7e5 	.word	0x0000d7e5
    d3d4:	0000d7e5 	.word	0x0000d7e5
    d3d8:	0000d7e5 	.word	0x0000d7e5
    d3dc:	0000d7e5 	.word	0x0000d7e5
    d3e0:	0000d7e5 	.word	0x0000d7e5
    d3e4:	0000d7e5 	.word	0x0000d7e5
    d3e8:	0000d427 	.word	0x0000d427
    d3ec:	0000d7e5 	.word	0x0000d7e5
    d3f0:	0000d599 	.word	0x0000d599
    d3f4:	0000d7e5 	.word	0x0000d7e5
    d3f8:	0000d7e5 	.word	0x0000d7e5
    d3fc:	0000d4f9 	.word	0x0000d4f9
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    d400:	9b01      	ldr	r3, [sp, #4]
    d402:	1d1a      	adds	r2, r3, #4
    d404:	9201      	str	r2, [sp, #4]
    d406:	681b      	ldr	r3, [r3, #0]
    d408:	f88d 301f 	strb.w	r3, [sp, #31]

                if ( pcBuf )
    d40c:	9b03      	ldr	r3, [sp, #12]
    d40e:	2b00      	cmp	r3, #0
    d410:	d005      	beq.n	d41e <am_util_stdio_vsprintf+0x1fe>
                {
                    *pcBuf++ = ui8CharSpecifier;
    d412:	9b03      	ldr	r3, [sp, #12]
    d414:	1c5a      	adds	r2, r3, #1
    d416:	9203      	str	r2, [sp, #12]
    d418:	f89d 201f 	ldrb.w	r2, [sp, #31]
    d41c:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d41e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d420:	3301      	adds	r3, #1
    d422:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d424:	e1ee      	b.n	d804 <am_util_stdio_vsprintf+0x5e4>

            case 's':
                pcStr = va_arg(pArgs, char *);
    d426:	9b01      	ldr	r3, [sp, #4]
    d428:	1d1a      	adds	r2, r3, #4
    d42a:	9201      	str	r2, [sp, #4]
    d42c:	681b      	ldr	r3, [r3, #0]
    d42e:	9315      	str	r3, [sp, #84]	; 0x54
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    d430:	9815      	ldr	r0, [sp, #84]	; 0x54
    d432:	f7ff fdbe 	bl	cfb2 <simple_strlen>
    d436:	900b      	str	r0, [sp, #44]	; 0x2c
                if ( iWidth > 0 )
    d438:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d43a:	2b00      	cmp	r3, #0
    d43c:	dd2e      	ble.n	d49c <am_util_stdio_vsprintf+0x27c>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    d43e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d440:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d442:	429a      	cmp	r2, r3
    d444:	d22a      	bcs.n	d49c <am_util_stdio_vsprintf+0x27c>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    d446:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d448:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d44a:	1ad3      	subs	r3, r2, r3
    d44c:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d44e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d452:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d454:	4619      	mov	r1, r3
    d456:	9803      	ldr	r0, [sp, #12]
    d458:	f7ff fdc1 	bl	cfde <padbuffer>
    d45c:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    d45e:	9b03      	ldr	r3, [sp, #12]
    d460:	2b00      	cmp	r3, #0
    d462:	d001      	beq.n	d468 <am_util_stdio_vsprintf+0x248>
    d464:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d466:	e000      	b.n	d46a <am_util_stdio_vsprintf+0x24a>
    d468:	2300      	movs	r3, #0
    d46a:	9a03      	ldr	r2, [sp, #12]
    d46c:	4413      	add	r3, r2
    d46e:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    d470:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d472:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d474:	4413      	add	r3, r2
    d476:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    d478:	2300      	movs	r3, #0
    d47a:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }

                while (*pcStr != 0x0)
    d47c:	e00e      	b.n	d49c <am_util_stdio_vsprintf+0x27c>
                {
                    if ( pcBuf )
    d47e:	9b03      	ldr	r3, [sp, #12]
    d480:	2b00      	cmp	r3, #0
    d482:	d005      	beq.n	d490 <am_util_stdio_vsprintf+0x270>
                    {
                        *pcBuf++ = *pcStr;
    d484:	9b03      	ldr	r3, [sp, #12]
    d486:	1c5a      	adds	r2, r3, #1
    d488:	9203      	str	r2, [sp, #12]
    d48a:	9a15      	ldr	r2, [sp, #84]	; 0x54
    d48c:	7812      	ldrb	r2, [r2, #0]
    d48e:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    d490:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d492:	3301      	adds	r3, #1
    d494:	9315      	str	r3, [sp, #84]	; 0x54
                    ++ui32CharCnt;
    d496:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d498:	3301      	adds	r3, #1
    d49a:	9311      	str	r3, [sp, #68]	; 0x44
                while (*pcStr != 0x0)
    d49c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d49e:	781b      	ldrb	r3, [r3, #0]
    d4a0:	2b00      	cmp	r3, #0
    d4a2:	d1ec      	bne.n	d47e <am_util_stdio_vsprintf+0x25e>
                }

                if ( iWidth )
    d4a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d4a6:	2b00      	cmp	r3, #0
    d4a8:	f000 81a9 	beq.w	d7fe <am_util_stdio_vsprintf+0x5de>
                {
                    iWidth = -iWidth;
    d4ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d4ae:	425b      	negs	r3, r3
    d4b0:	9310      	str	r3, [sp, #64]	; 0x40

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    d4b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d4b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d4b6:	429a      	cmp	r2, r3
    d4b8:	f080 81a1 	bcs.w	d7fe <am_util_stdio_vsprintf+0x5de>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    d4bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d4be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d4c0:	1ad3      	subs	r3, r2, r3
    d4c2:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d4c4:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d4c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d4ca:	4619      	mov	r1, r3
    d4cc:	9803      	ldr	r0, [sp, #12]
    d4ce:	f7ff fd86 	bl	cfde <padbuffer>
    d4d2:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    d4d4:	9b03      	ldr	r3, [sp, #12]
    d4d6:	2b00      	cmp	r3, #0
    d4d8:	d001      	beq.n	d4de <am_util_stdio_vsprintf+0x2be>
    d4da:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d4dc:	e000      	b.n	d4e0 <am_util_stdio_vsprintf+0x2c0>
    d4de:	2300      	movs	r3, #0
    d4e0:	9a03      	ldr	r2, [sp, #12]
    d4e2:	4413      	add	r3, r2
    d4e4:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    d4e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d4e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d4ea:	4413      	add	r3, r2
    d4ec:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    d4ee:	2300      	movs	r3, #0
    d4f0:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }
                break;
    d4f2:	e184      	b.n	d7fe <am_util_stdio_vsprintf+0x5de>
    d4f4:	10004138 	.word	0x10004138

            case 'x':
                bLower = true;
    d4f8:	2301      	movs	r3, #1
    d4fa:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d4fe:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d502:	2b00      	cmp	r3, #0
    d504:	d009      	beq.n	d51a <am_util_stdio_vsprintf+0x2fa>
    d506:	9b01      	ldr	r3, [sp, #4]
    d508:	3307      	adds	r3, #7
    d50a:	f023 0307 	bic.w	r3, r3, #7
    d50e:	f103 0208 	add.w	r2, r3, #8
    d512:	9201      	str	r2, [sp, #4]
    d514:	e9d3 4500 	ldrd	r4, r5, [r3]
    d518:	e006      	b.n	d528 <am_util_stdio_vsprintf+0x308>
                                      va_arg(pArgs, uint32_t);
    d51a:	9b01      	ldr	r3, [sp, #4]
    d51c:	1d1a      	adds	r2, r3, #4
    d51e:	9201      	str	r2, [sp, #4]
    d520:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d522:	2200      	movs	r2, #0
    d524:	461c      	mov	r4, r3
    d526:	4615      	mov	r5, r2
    d528:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48

                if ( iWidth )
    d52c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d52e:	2b00      	cmp	r3, #0
    d530:	d01e      	beq.n	d570 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    d532:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d536:	f7ff fc2f 	bl	cd98 <ndigits_in_hex>
    d53a:	4602      	mov	r2, r0
    d53c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d53e:	1a9b      	subs	r3, r3, r2
    d540:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d542:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d546:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d548:	4619      	mov	r1, r3
    d54a:	9803      	ldr	r0, [sp, #12]
    d54c:	f7ff fd47 	bl	cfde <padbuffer>
    d550:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d552:	9b03      	ldr	r3, [sp, #12]
    d554:	2b00      	cmp	r3, #0
    d556:	d001      	beq.n	d55c <am_util_stdio_vsprintf+0x33c>
    d558:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d55a:	e000      	b.n	d55e <am_util_stdio_vsprintf+0x33e>
    d55c:	2300      	movs	r3, #0
    d55e:	9a03      	ldr	r2, [sp, #12]
    d560:	4413      	add	r3, r2
    d562:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d564:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d566:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d568:	4413      	add	r3, r2
    d56a:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d56c:	2300      	movs	r3, #0
    d56e:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    d570:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    d574:	9a03      	ldr	r2, [sp, #12]
    d576:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d57a:	f7ff fcba 	bl	cef2 <uint64_to_hexstr>
    d57e:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d580:	9b03      	ldr	r3, [sp, #12]
    d582:	2b00      	cmp	r3, #0
    d584:	d003      	beq.n	d58e <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    d586:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d588:	9a03      	ldr	r2, [sp, #12]
    d58a:	4413      	add	r3, r2
    d58c:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d58e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d590:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d592:	4413      	add	r3, r2
    d594:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d596:	e135      	b.n	d804 <am_util_stdio_vsprintf+0x5e4>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d598:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d59c:	2b00      	cmp	r3, #0
    d59e:	d009      	beq.n	d5b4 <am_util_stdio_vsprintf+0x394>
    d5a0:	9b01      	ldr	r3, [sp, #4]
    d5a2:	3307      	adds	r3, #7
    d5a4:	f023 0307 	bic.w	r3, r3, #7
    d5a8:	f103 0208 	add.w	r2, r3, #8
    d5ac:	9201      	str	r2, [sp, #4]
    d5ae:	e9d3 6700 	ldrd	r6, r7, [r3]
    d5b2:	e006      	b.n	d5c2 <am_util_stdio_vsprintf+0x3a2>
                                      va_arg(pArgs, uint32_t);
    d5b4:	9b01      	ldr	r3, [sp, #4]
    d5b6:	1d1a      	adds	r2, r3, #4
    d5b8:	9201      	str	r2, [sp, #4]
    d5ba:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d5bc:	2200      	movs	r2, #0
    d5be:	461e      	mov	r6, r3
    d5c0:	4617      	mov	r7, r2
    d5c2:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48

                if ( iWidth )
    d5c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d5c8:	2b00      	cmp	r3, #0
    d5ca:	d01e      	beq.n	d60a <am_util_stdio_vsprintf+0x3ea>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    d5cc:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d5d0:	f7ff fba8 	bl	cd24 <ndigits_in_u64>
    d5d4:	4602      	mov	r2, r0
    d5d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d5d8:	1a9b      	subs	r3, r3, r2
    d5da:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d5dc:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d5e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d5e2:	4619      	mov	r1, r3
    d5e4:	9803      	ldr	r0, [sp, #12]
    d5e6:	f7ff fcfa 	bl	cfde <padbuffer>
    d5ea:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d5ec:	9b03      	ldr	r3, [sp, #12]
    d5ee:	2b00      	cmp	r3, #0
    d5f0:	d001      	beq.n	d5f6 <am_util_stdio_vsprintf+0x3d6>
    d5f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d5f4:	e000      	b.n	d5f8 <am_util_stdio_vsprintf+0x3d8>
    d5f6:	2300      	movs	r3, #0
    d5f8:	9a03      	ldr	r2, [sp, #12]
    d5fa:	4413      	add	r3, r2
    d5fc:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d5fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d600:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d602:	4413      	add	r3, r2
    d604:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d606:	2300      	movs	r3, #0
    d608:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d60a:	9a03      	ldr	r2, [sp, #12]
    d60c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d610:	f7ff fc2a 	bl	ce68 <uint64_to_str>
    d614:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d616:	9b03      	ldr	r3, [sp, #12]
    d618:	2b00      	cmp	r3, #0
    d61a:	d003      	beq.n	d624 <am_util_stdio_vsprintf+0x404>
                {
                    pcBuf += iVal;
    d61c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d61e:	9a03      	ldr	r2, [sp, #12]
    d620:	4413      	add	r3, r2
    d622:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d624:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d626:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d628:	4413      	add	r3, r2
    d62a:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d62c:	e0ea      	b.n	d804 <am_util_stdio_vsprintf+0x5e4>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d62e:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d632:	2b00      	cmp	r3, #0
    d634:	d009      	beq.n	d64a <am_util_stdio_vsprintf+0x42a>
    d636:	9b01      	ldr	r3, [sp, #4]
    d638:	3307      	adds	r3, #7
    d63a:	f023 0307 	bic.w	r3, r3, #7
    d63e:	f103 0208 	add.w	r2, r3, #8
    d642:	9201      	str	r2, [sp, #4]
    d644:	e9d3 8900 	ldrd	r8, r9, [r3]
    d648:	e006      	b.n	d658 <am_util_stdio_vsprintf+0x438>
                                     va_arg(pArgs, int32_t);
    d64a:	9b01      	ldr	r3, [sp, #4]
    d64c:	1d1a      	adds	r2, r3, #4
    d64e:	9201      	str	r2, [sp, #4]
    d650:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d652:	17da      	asrs	r2, r3, #31
    d654:	4698      	mov	r8, r3
    d656:	4691      	mov	r9, r2
    d658:	e9cd 8908 	strd	r8, r9, [sp, #32]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    d65c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d660:	2b00      	cmp	r3, #0
    d662:	da0c      	bge.n	d67e <am_util_stdio_vsprintf+0x45e>
                {
                    ui64Val = -i64Val;          // Get absolute value
    d664:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d668:	2100      	movs	r1, #0
    d66a:	f1d2 0a00 	rsbs	sl, r2, #0
    d66e:	eb61 0b03 	sbc.w	fp, r1, r3
    d672:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
                    bNeg = true;
    d676:	2301      	movs	r3, #1
    d678:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    d67c:	e006      	b.n	d68c <am_util_stdio_vsprintf+0x46c>
                }
                else
                {
                    ui64Val = i64Val;
    d67e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d682:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
                    bNeg = false;
    d686:	2300      	movs	r3, #0
    d688:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                }

                if ( iWidth )
    d68c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d68e:	2b00      	cmp	r3, #0
    d690:	d04a      	beq.n	d728 <am_util_stdio_vsprintf+0x508>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    d692:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    d696:	4610      	mov	r0, r2
    d698:	4619      	mov	r1, r3
    d69a:	f7ff fb63 	bl	cd64 <ndigits_in_i64>
    d69e:	4602      	mov	r2, r0
    d6a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d6a2:	1a9b      	subs	r3, r3, r2
    d6a4:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg )
    d6a6:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d6aa:	2b00      	cmp	r3, #0
    d6ac:	d011      	beq.n	d6d2 <am_util_stdio_vsprintf+0x4b2>
                    {
                        --iWidth;
    d6ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d6b0:	3b01      	subs	r3, #1
    d6b2:	9310      	str	r3, [sp, #64]	; 0x40

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    d6b4:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d6b8:	2b30      	cmp	r3, #48	; 0x30
    d6ba:	d10a      	bne.n	d6d2 <am_util_stdio_vsprintf+0x4b2>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    d6bc:	9b03      	ldr	r3, [sp, #12]
    d6be:	2b00      	cmp	r3, #0
    d6c0:	d004      	beq.n	d6cc <am_util_stdio_vsprintf+0x4ac>
                            {
                                *pcBuf++ = '-';
    d6c2:	9b03      	ldr	r3, [sp, #12]
    d6c4:	1c5a      	adds	r2, r3, #1
    d6c6:	9203      	str	r2, [sp, #12]
    d6c8:	222d      	movs	r2, #45	; 0x2d
    d6ca:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    d6cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d6ce:	3301      	adds	r3, #1
    d6d0:	9311      	str	r3, [sp, #68]	; 0x44
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d6d2:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d6d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d6d8:	4619      	mov	r1, r3
    d6da:	9803      	ldr	r0, [sp, #12]
    d6dc:	f7ff fc7f 	bl	cfde <padbuffer>
    d6e0:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d6e2:	9b03      	ldr	r3, [sp, #12]
    d6e4:	2b00      	cmp	r3, #0
    d6e6:	d001      	beq.n	d6ec <am_util_stdio_vsprintf+0x4cc>
    d6e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d6ea:	e000      	b.n	d6ee <am_util_stdio_vsprintf+0x4ce>
    d6ec:	2300      	movs	r3, #0
    d6ee:	9a03      	ldr	r2, [sp, #12]
    d6f0:	4413      	add	r3, r2
    d6f2:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d6f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d6f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d6f8:	4413      	add	r3, r2
    d6fa:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d6fc:	2300      	movs	r3, #0
    d6fe:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d700:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d704:	2b00      	cmp	r3, #0
    d706:	d01e      	beq.n	d746 <am_util_stdio_vsprintf+0x526>
    d708:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d70c:	2b20      	cmp	r3, #32
    d70e:	d11a      	bne.n	d746 <am_util_stdio_vsprintf+0x526>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    d710:	9b03      	ldr	r3, [sp, #12]
    d712:	2b00      	cmp	r3, #0
    d714:	d004      	beq.n	d720 <am_util_stdio_vsprintf+0x500>
                        {
                            *pcBuf++ = '-';
    d716:	9b03      	ldr	r3, [sp, #12]
    d718:	1c5a      	adds	r2, r3, #1
    d71a:	9203      	str	r2, [sp, #12]
    d71c:	222d      	movs	r2, #45	; 0x2d
    d71e:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    d720:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d722:	3301      	adds	r3, #1
    d724:	9311      	str	r3, [sp, #68]	; 0x44
    d726:	e00e      	b.n	d746 <am_util_stdio_vsprintf+0x526>
                    }
                }
                else
                {
                    if ( bNeg )
    d728:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d72c:	2b00      	cmp	r3, #0
    d72e:	d00a      	beq.n	d746 <am_util_stdio_vsprintf+0x526>
                    {
                        if ( pcBuf )
    d730:	9b03      	ldr	r3, [sp, #12]
    d732:	2b00      	cmp	r3, #0
    d734:	d004      	beq.n	d740 <am_util_stdio_vsprintf+0x520>
                        {
                            *pcBuf++ = '-';
    d736:	9b03      	ldr	r3, [sp, #12]
    d738:	1c5a      	adds	r2, r3, #1
    d73a:	9203      	str	r2, [sp, #12]
    d73c:	222d      	movs	r2, #45	; 0x2d
    d73e:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    d740:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d742:	3301      	adds	r3, #1
    d744:	9311      	str	r3, [sp, #68]	; 0x44
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d746:	9a03      	ldr	r2, [sp, #12]
    d748:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d74c:	f7ff fb8c 	bl	ce68 <uint64_to_str>
    d750:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d752:	9b03      	ldr	r3, [sp, #12]
    d754:	2b00      	cmp	r3, #0
    d756:	d003      	beq.n	d760 <am_util_stdio_vsprintf+0x540>
                {
                    pcBuf += iVal;
    d758:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d75a:	9a03      	ldr	r2, [sp, #12]
    d75c:	4413      	add	r3, r2
    d75e:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d760:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d762:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d764:	4413      	add	r3, r2
    d766:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d768:	e04c      	b.n	d804 <am_util_stdio_vsprintf+0x5e4>


            case 'f':
            case 'F':
                if ( pcBuf )
    d76a:	9b03      	ldr	r3, [sp, #12]
    d76c:	2b00      	cmp	r3, #0
    d76e:	d048      	beq.n	d802 <am_util_stdio_vsprintf+0x5e2>
                {
                    float fValue = va_arg(pArgs, double);
    d770:	9b01      	ldr	r3, [sp, #4]
    d772:	3307      	adds	r3, #7
    d774:	f023 0307 	bic.w	r3, r3, #7
    d778:	f103 0208 	add.w	r2, r3, #8
    d77c:	9201      	str	r2, [sp, #4]
    d77e:	e9d3 2300 	ldrd	r2, r3, [r3]
    d782:	4610      	mov	r0, r2
    d784:	4619      	mov	r1, r3
    d786:	f7fe fd55 	bl	c234 <__aeabi_d2f>
    d78a:	4603      	mov	r3, r0
    d78c:	9306      	str	r3, [sp, #24]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    d78e:	9b03      	ldr	r3, [sp, #12]
    d790:	2214      	movs	r2, #20
    d792:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    d794:	990e      	ldr	r1, [sp, #56]	; 0x38
    d796:	9803      	ldr	r0, [sp, #12]
    d798:	ed9d 0a06 	vldr	s0, [sp, #24]
    d79c:	f7ff fc42 	bl	d024 <ftoa>
    d7a0:	900f      	str	r0, [sp, #60]	; 0x3c
                    if ( iVal < 0 )
    d7a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d7a4:	2b00      	cmp	r3, #0
    d7a6:	da14      	bge.n	d7d2 <am_util_stdio_vsprintf+0x5b2>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d7a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d7aa:	f1b3 3fff 	cmp.w	r3, #4294967295
    d7ae:	d102      	bne.n	d7b6 <am_util_stdio_vsprintf+0x596>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d7b0:	4b1e      	ldr	r3, [pc, #120]	; (d82c <am_util_stdio_vsprintf+0x60c>)
    d7b2:	930c      	str	r3, [sp, #48]	; 0x30
    d7b4:	e008      	b.n	d7c8 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d7b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d7b8:	f113 0f02 	cmn.w	r3, #2
    d7bc:	d102      	bne.n	d7c4 <am_util_stdio_vsprintf+0x5a4>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d7be:	4b1c      	ldr	r3, [pc, #112]	; (d830 <am_util_stdio_vsprintf+0x610>)
    d7c0:	930c      	str	r3, [sp, #48]	; 0x30
    d7c2:	e001      	b.n	d7c8 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d7c4:	4b1b      	ldr	r3, [pc, #108]	; (d834 <am_util_stdio_vsprintf+0x614>)
    d7c6:	930c      	str	r3, [sp, #48]	; 0x30
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d7c8:	9b03      	ldr	r3, [sp, #12]
    d7ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d7cc:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    d7ce:	2303      	movs	r3, #3
    d7d0:	930f      	str	r3, [sp, #60]	; 0x3c
                    }
                    ui32CharCnt += iVal;
    d7d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d7d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d7d6:	4413      	add	r3, r2
    d7d8:	9311      	str	r3, [sp, #68]	; 0x44
                    pcBuf += iVal;
    d7da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d7dc:	9a03      	ldr	r2, [sp, #12]
    d7de:	4413      	add	r3, r2
    d7e0:	9303      	str	r3, [sp, #12]
                }
                break;
    d7e2:	e00e      	b.n	d802 <am_util_stdio_vsprintf+0x5e2>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d7e4:	9b03      	ldr	r3, [sp, #12]
    d7e6:	2b00      	cmp	r3, #0
    d7e8:	d005      	beq.n	d7f6 <am_util_stdio_vsprintf+0x5d6>
                {
                    *pcBuf++ = *pcFmt;
    d7ea:	9b03      	ldr	r3, [sp, #12]
    d7ec:	1c5a      	adds	r2, r3, #1
    d7ee:	9203      	str	r2, [sp, #12]
    d7f0:	9a02      	ldr	r2, [sp, #8]
    d7f2:	7812      	ldrb	r2, [r2, #0]
    d7f4:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d7f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d7f8:	3301      	adds	r3, #1
    d7fa:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d7fc:	e002      	b.n	d804 <am_util_stdio_vsprintf+0x5e4>
                break;
    d7fe:	bf00      	nop
    d800:	e000      	b.n	d804 <am_util_stdio_vsprintf+0x5e4>
                break;
    d802:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d804:	9b02      	ldr	r3, [sp, #8]
    d806:	3301      	adds	r3, #1
    d808:	9302      	str	r3, [sp, #8]
    while ( *pcFmt != 0x0 )
    d80a:	9b02      	ldr	r3, [sp, #8]
    d80c:	781b      	ldrb	r3, [r3, #0]
    d80e:	2b00      	cmp	r3, #0
    d810:	f47f ad11 	bne.w	d236 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d814:	9b03      	ldr	r3, [sp, #12]
    d816:	2b00      	cmp	r3, #0
    d818:	d002      	beq.n	d820 <am_util_stdio_vsprintf+0x600>
    {
        *pcBuf = 0x0;
    d81a:	9b03      	ldr	r3, [sp, #12]
    d81c:	2200      	movs	r2, #0
    d81e:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d820:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    d822:	4618      	mov	r0, r3
    d824:	b017      	add	sp, #92	; 0x5c
    d826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d82a:	bf00      	nop
    d82c:	00302e30 	.word	0x00302e30
    d830:	00232e23 	.word	0x00232e23
    d834:	003f2e3f 	.word	0x003f2e3f

0000d838 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d838:	b40f      	push	{r0, r1, r2, r3}
    d83a:	b500      	push	{lr}
    d83c:	b083      	sub	sp, #12
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d83e:	4b0c      	ldr	r3, [pc, #48]	; (d870 <am_util_stdio_printf+0x38>)
    d840:	681b      	ldr	r3, [r3, #0]
    d842:	2b00      	cmp	r3, #0
    d844:	d101      	bne.n	d84a <am_util_stdio_printf+0x12>
    {
        return 0;
    d846:	2300      	movs	r3, #0
    d848:	e00c      	b.n	d864 <am_util_stdio_printf+0x2c>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d84a:	ab05      	add	r3, sp, #20
    d84c:	9300      	str	r3, [sp, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d84e:	9a00      	ldr	r2, [sp, #0]
    d850:	9904      	ldr	r1, [sp, #16]
    d852:	4808      	ldr	r0, [pc, #32]	; (d874 <am_util_stdio_printf+0x3c>)
    d854:	f7ff fce4 	bl	d220 <am_util_stdio_vsprintf>
    d858:	9001      	str	r0, [sp, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d85a:	4b05      	ldr	r3, [pc, #20]	; (d870 <am_util_stdio_printf+0x38>)
    d85c:	681b      	ldr	r3, [r3, #0]
    d85e:	4805      	ldr	r0, [pc, #20]	; (d874 <am_util_stdio_printf+0x3c>)
    d860:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d862:	9b01      	ldr	r3, [sp, #4]
}
    d864:	4618      	mov	r0, r3
    d866:	b003      	add	sp, #12
    d868:	f85d eb04 	ldr.w	lr, [sp], #4
    d86c:	b004      	add	sp, #16
    d86e:	4770      	bx	lr
    d870:	10004034 	.word	0x10004034
    d874:	10004038 	.word	0x10004038

0000d878 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    d878:	b508      	push	{r3, lr}
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d87a:	4802      	ldr	r0, [pc, #8]	; (d884 <am_util_stdio_terminal_clear+0xc>)
    d87c:	f7ff ffdc 	bl	d838 <am_util_stdio_printf>
}
    d880:	bf00      	nop
    d882:	bd08      	pop	{r3, pc}
    d884:	0000e948 	.word	0x0000e948

0000d888 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    d888:	4811      	ldr	r0, [pc, #68]	; (d8d0 <zero_loop+0x12>)
    d88a:	4912      	ldr	r1, [pc, #72]	; (d8d4 <zero_loop+0x16>)
    d88c:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    d88e:	f8d1 d000 	ldr.w	sp, [r1]

#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    d892:	4811      	ldr	r0, [pc, #68]	; (d8d8 <zero_loop+0x1a>)
    d894:	6801      	ldr	r1, [r0, #0]
    d896:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d89a:	6001      	str	r1, [r0, #0]
    d89c:	f3bf 8f4f 	dsb	sy
    d8a0:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    d8a4:	480d      	ldr	r0, [pc, #52]	; (d8dc <zero_loop+0x1e>)
    d8a6:	490e      	ldr	r1, [pc, #56]	; (d8e0 <zero_loop+0x22>)
    d8a8:	4a0e      	ldr	r2, [pc, #56]	; (d8e4 <zero_loop+0x26>)

0000d8aa <copy_loop>:
    d8aa:	f850 3b04 	ldr.w	r3, [r0], #4
    d8ae:	f841 3b04 	str.w	r3, [r1], #4
    d8b2:	4291      	cmp	r1, r2
    d8b4:	dbf9      	blt.n	d8aa <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    d8b6:	480c      	ldr	r0, [pc, #48]	; (d8e8 <zero_loop+0x2a>)
    d8b8:	490c      	ldr	r1, [pc, #48]	; (d8ec <zero_loop+0x2e>)
    d8ba:	f04f 0200 	mov.w	r2, #0

0000d8be <zero_loop>:
    d8be:	4288      	cmp	r0, r1
    d8c0:	bfb8      	it	lt
    d8c2:	f840 2b04 	strlt.w	r2, [r0], #4
    d8c6:	dbfa      	blt.n	d8be <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    d8c8:	f7fe fd1e 	bl	c308 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    d8cc:	be00      	bkpt	0x0000
}
    d8ce:	bf00      	nop
    d8d0:	e000ed08 	.word	0xe000ed08
    d8d4:	0000c000 	.word	0x0000c000
    d8d8:	e000ed88 	.word	0xe000ed88
    d8dc:	0000eb50 	.word	0x0000eb50
    d8e0:	10004000 	.word	0x10004000
    d8e4:	10004034 	.word	0x10004034
    d8e8:	10004034 	.word	0x10004034
    d8ec:	10004144 	.word	0x10004144

0000d8f0 <NMI_Handler>:
NMI_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d8f0:	e7fe      	b.n	d8f0 <NMI_Handler>

0000d8f2 <BusFault_Handler>:
HardFault_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d8f2:	e7fe      	b.n	d8f2 <BusFault_Handler>

0000d8f4 <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d8f4:	e7fe      	b.n	d8f4 <DebugMon_Handler>
	...

0000d8f8 <am_bsp_low_power_init>:
    d8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d8fa:	f000 fd8b 	bl	e414 <am_hal_pwrctrl_low_power_init>
    d8fe:	f000 fe67 	bl	e5d0 <am_hal_rtc_osc_disable>
    d902:	4b0b      	ldr	r3, [pc, #44]	; (d930 <am_bsp_low_power_init+0x38>)
    d904:	4f0b      	ldr	r7, [pc, #44]	; (d934 <am_bsp_low_power_init+0x3c>)
    d906:	681e      	ldr	r6, [r3, #0]
    d908:	2400      	movs	r4, #0
    d90a:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    d90e:	4631      	mov	r1, r6
    d910:	4628      	mov	r0, r5
    d912:	f000 fb25 	bl	df60 <am_hal_gpio_pinconfig>
    d916:	2103      	movs	r1, #3
    d918:	4628      	mov	r0, r5
    d91a:	f000 fc57 	bl	e1cc <am_hal_gpio_state_write>
    d91e:	3401      	adds	r4, #1
    d920:	2100      	movs	r1, #0
    d922:	4628      	mov	r0, r5
    d924:	f000 fc52 	bl	e1cc <am_hal_gpio_state_write>
    d928:	2c05      	cmp	r4, #5
    d92a:	d1ee      	bne.n	d90a <am_bsp_low_power_init+0x12>
    d92c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d92e:	bf00      	nop
    d930:	0000e968 	.word	0x0000e968
    d934:	10004000 	.word	0x10004000

0000d938 <am_bsp_itm_printf_enable>:
    d938:	b500      	push	{lr}
    d93a:	4b0b      	ldr	r3, [pc, #44]	; (d968 <am_bsp_itm_printf_enable+0x30>)
    d93c:	b087      	sub	sp, #28
    d93e:	2201      	movs	r2, #1
    d940:	601a      	str	r2, [r3, #0]
    d942:	f000 fc8f 	bl	e264 <am_hal_itm_enable>
    d946:	4b09      	ldr	r3, [pc, #36]	; (d96c <am_bsp_itm_printf_enable+0x34>)
    d948:	9301      	str	r3, [sp, #4]
    d94a:	a801      	add	r0, sp, #4
    d94c:	f000 fea0 	bl	e690 <am_hal_tpiu_enable>
    d950:	4b07      	ldr	r3, [pc, #28]	; (d970 <am_bsp_itm_printf_enable+0x38>)
    d952:	2029      	movs	r0, #41	; 0x29
    d954:	6819      	ldr	r1, [r3, #0]
    d956:	f000 fb03 	bl	df60 <am_hal_gpio_pinconfig>
    d95a:	4806      	ldr	r0, [pc, #24]	; (d974 <am_bsp_itm_printf_enable+0x3c>)
    d95c:	f7ff f8e4 	bl	cb28 <am_util_stdio_printf_init>
    d960:	b007      	add	sp, #28
    d962:	f85d fb04 	ldr.w	pc, [sp], #4
    d966:	bf00      	nop
    d968:	1000413c 	.word	0x1000413c
    d96c:	000f4240 	.word	0x000f4240
    d970:	0000e95c 	.word	0x0000e95c
    d974:	0000e2ad 	.word	0x0000e2ad

0000d978 <am_hal_cachectrl_config>:
    d978:	b530      	push	{r4, r5, lr}
    d97a:	b083      	sub	sp, #12
    d97c:	4604      	mov	r4, r0
    d97e:	f000 fc69 	bl	e254 <am_hal_interrupt_master_disable>
    d982:	4d0e      	ldr	r5, [pc, #56]	; (d9bc <am_hal_cachectrl_config+0x44>)
    d984:	9001      	str	r0, [sp, #4]
    d986:	682b      	ldr	r3, [r5, #0]
    d988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    d98c:	602b      	str	r3, [r5, #0]
    d98e:	9801      	ldr	r0, [sp, #4]
    d990:	f000 fc64 	bl	e25c <am_hal_interrupt_master_set>
    d994:	7863      	ldrb	r3, [r4, #1]
    d996:	7822      	ldrb	r2, [r4, #0]
    d998:	78a1      	ldrb	r1, [r4, #2]
    d99a:	021b      	lsls	r3, r3, #8
    d99c:	f403 7340 	and.w	r3, r3, #768	; 0x300
    d9a0:	0112      	lsls	r2, r2, #4
    d9a2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    d9a6:	b2d2      	uxtb	r2, r2
    d9a8:	4313      	orrs	r3, r2
    d9aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d9ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d9b2:	2000      	movs	r0, #0
    d9b4:	602b      	str	r3, [r5, #0]
    d9b6:	b003      	add	sp, #12
    d9b8:	bd30      	pop	{r4, r5, pc}
    d9ba:	bf00      	nop
    d9bc:	40018000 	.word	0x40018000

0000d9c0 <am_hal_cachectrl_enable>:
    d9c0:	4a03      	ldr	r2, [pc, #12]	; (d9d0 <am_hal_cachectrl_enable+0x10>)
    d9c2:	6813      	ldr	r3, [r2, #0]
    d9c4:	f043 0301 	orr.w	r3, r3, #1
    d9c8:	2000      	movs	r0, #0
    d9ca:	6013      	str	r3, [r2, #0]
    d9cc:	4770      	bx	lr
    d9ce:	bf00      	nop
    d9d0:	40018000 	.word	0x40018000

0000d9d4 <am_hal_cachectrl_control>:
    d9d4:	b510      	push	{r4, lr}
    d9d6:	3801      	subs	r0, #1
    d9d8:	b08e      	sub	sp, #56	; 0x38
    d9da:	2810      	cmp	r0, #16
    d9dc:	f200 815e 	bhi.w	dc9c <am_hal_cachectrl_control+0x2c8>
    d9e0:	e8df f010 	tbh	[pc, r0, lsl #1]
    d9e4:	00360018 	.word	0x00360018
    d9e8:	0040003d 	.word	0x0040003d
    d9ec:	00450043 	.word	0x00450043
    d9f0:	0011001a 	.word	0x0011001a
    d9f4:	00540047 	.word	0x00540047
    d9f8:	009a0061 	.word	0x009a0061
    d9fc:	010c00d3 	.word	0x010c00d3
    da00:	013f0126 	.word	0x013f0126
    da04:	001d      	.short	0x001d
    da06:	f44f 7300 	mov.w	r3, #512	; 0x200
    da0a:	4aac      	ldr	r2, [pc, #688]	; (dcbc <am_hal_cachectrl_control+0x2e8>)
    da0c:	2000      	movs	r0, #0
    da0e:	6093      	str	r3, [r2, #8]
    da10:	b00e      	add	sp, #56	; 0x38
    da12:	bd10      	pop	{r4, pc}
    da14:	2301      	movs	r3, #1
    da16:	e7f8      	b.n	da0a <am_hal_cachectrl_control+0x36>
    da18:	f44f 6380 	mov.w	r3, #1024	; 0x400
    da1c:	e7f5      	b.n	da0a <am_hal_cachectrl_control+0x36>
    da1e:	2900      	cmp	r1, #0
    da20:	f000 813c 	beq.w	dc9c <am_hal_cachectrl_control+0x2c8>
    da24:	684a      	ldr	r2, [r1, #4]
    da26:	48a6      	ldr	r0, [pc, #664]	; (dcc0 <am_hal_cachectrl_control+0x2ec>)
    da28:	4202      	tst	r2, r0
    da2a:	f040 8137 	bne.w	dc9c <am_hal_cachectrl_control+0x2c8>
    da2e:	688b      	ldr	r3, [r1, #8]
    da30:	4018      	ands	r0, r3
    da32:	f040 8133 	bne.w	dc9c <am_hal_cachectrl_control+0x2c8>
    da36:	780c      	ldrb	r4, [r1, #0]
    da38:	2c00      	cmp	r4, #0
    da3a:	f040 8133 	bne.w	dca4 <am_hal_cachectrl_control+0x2d0>
    da3e:	4c9f      	ldr	r4, [pc, #636]	; (dcbc <am_hal_cachectrl_control+0x2e8>)
    da40:	7849      	ldrb	r1, [r1, #1]
    da42:	6122      	str	r2, [r4, #16]
    da44:	6163      	str	r3, [r4, #20]
    da46:	6823      	ldr	r3, [r4, #0]
    da48:	f361 0382 	bfi	r3, r1, #2, #1
    da4c:	6023      	str	r3, [r4, #0]
    da4e:	e7df      	b.n	da10 <am_hal_cachectrl_control+0x3c>
    da50:	4b9a      	ldr	r3, [pc, #616]	; (dcbc <am_hal_cachectrl_control+0x2e8>)
    da52:	681b      	ldr	r3, [r3, #0]
    da54:	01db      	lsls	r3, r3, #7
    da56:	f140 811f 	bpl.w	dc98 <am_hal_cachectrl_control+0x2c4>
    da5a:	2302      	movs	r3, #2
    da5c:	e7d5      	b.n	da0a <am_hal_cachectrl_control+0x36>
    da5e:	f44f 6388 	mov.w	r3, #1088	; 0x440
    da62:	e7d2      	b.n	da0a <am_hal_cachectrl_control+0x36>
    da64:	f44f 7308 	mov.w	r3, #544	; 0x220
    da68:	e7cf      	b.n	da0a <am_hal_cachectrl_control+0x36>
    da6a:	2340      	movs	r3, #64	; 0x40
    da6c:	e7cd      	b.n	da0a <am_hal_cachectrl_control+0x36>
    da6e:	2320      	movs	r3, #32
    da70:	e7cb      	b.n	da0a <am_hal_cachectrl_control+0x36>
    da72:	f000 fbef 	bl	e254 <am_hal_interrupt_master_disable>
    da76:	4a91      	ldr	r2, [pc, #580]	; (dcbc <am_hal_cachectrl_control+0x2e8>)
    da78:	9000      	str	r0, [sp, #0]
    da7a:	6813      	ldr	r3, [r2, #0]
    da7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    da80:	6013      	str	r3, [r2, #0]
    da82:	9800      	ldr	r0, [sp, #0]
    da84:	f000 fbea 	bl	e25c <am_hal_interrupt_master_set>
    da88:	2000      	movs	r0, #0
    da8a:	e7c1      	b.n	da10 <am_hal_cachectrl_control+0x3c>
    da8c:	f000 fbe2 	bl	e254 <am_hal_interrupt_master_disable>
    da90:	4a8a      	ldr	r2, [pc, #552]	; (dcbc <am_hal_cachectrl_control+0x2e8>)
    da92:	9001      	str	r0, [sp, #4]
    da94:	6813      	ldr	r3, [r2, #0]
    da96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    da9a:	6013      	str	r3, [r2, #0]
    da9c:	9801      	ldr	r0, [sp, #4]
    da9e:	f000 fbdd 	bl	e25c <am_hal_interrupt_master_set>
    daa2:	2000      	movs	r0, #0
    daa4:	e7b4      	b.n	da10 <am_hal_cachectrl_control+0x3c>
    daa6:	f000 fbd5 	bl	e254 <am_hal_interrupt_master_disable>
    daaa:	4603      	mov	r3, r0
    daac:	4885      	ldr	r0, [pc, #532]	; (dcc4 <am_hal_cachectrl_control+0x2f0>)
    daae:	9302      	str	r3, [sp, #8]
    dab0:	f000 fa4c 	bl	df4c <am_hal_flash_load_ui32>
    dab4:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    dab8:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    dabc:	4881      	ldr	r0, [pc, #516]	; (dcc4 <am_hal_cachectrl_control+0x2f0>)
    dabe:	f000 fa49 	bl	df54 <am_hal_flash_store_ui32>
    dac2:	9802      	ldr	r0, [sp, #8]
    dac4:	f000 fbca 	bl	e25c <am_hal_interrupt_master_set>
    dac8:	f000 fbc4 	bl	e254 <am_hal_interrupt_master_disable>
    dacc:	4603      	mov	r3, r0
    dace:	487d      	ldr	r0, [pc, #500]	; (dcc4 <am_hal_cachectrl_control+0x2f0>)
    dad0:	9303      	str	r3, [sp, #12]
    dad2:	f000 fa3b 	bl	df4c <am_hal_flash_load_ui32>
    dad6:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    dada:	f440 61ee 	orr.w	r1, r0, #1904	; 0x770
    dade:	4879      	ldr	r0, [pc, #484]	; (dcc4 <am_hal_cachectrl_control+0x2f0>)
    dae0:	f000 fa38 	bl	df54 <am_hal_flash_store_ui32>
    dae4:	9803      	ldr	r0, [sp, #12]
    dae6:	f000 fbb9 	bl	e25c <am_hal_interrupt_master_set>
    daea:	f000 fbb3 	bl	e254 <am_hal_interrupt_master_disable>
    daee:	4603      	mov	r3, r0
    daf0:	4874      	ldr	r0, [pc, #464]	; (dcc4 <am_hal_cachectrl_control+0x2f0>)
    daf2:	9304      	str	r3, [sp, #16]
    daf4:	f000 fa2a 	bl	df4c <am_hal_flash_load_ui32>
    daf8:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    dafc:	f020 000f 	bic.w	r0, r0, #15
    db00:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    db04:	f041 0103 	orr.w	r1, r1, #3
    db08:	486e      	ldr	r0, [pc, #440]	; (dcc4 <am_hal_cachectrl_control+0x2f0>)
    db0a:	f000 fa23 	bl	df54 <am_hal_flash_store_ui32>
    db0e:	9804      	ldr	r0, [sp, #16]
    db10:	f000 fba4 	bl	e25c <am_hal_interrupt_master_set>
    db14:	2000      	movs	r0, #0
    db16:	e77b      	b.n	da10 <am_hal_cachectrl_control+0x3c>
    db18:	f000 fb9c 	bl	e254 <am_hal_interrupt_master_disable>
    db1c:	4603      	mov	r3, r0
    db1e:	4869      	ldr	r0, [pc, #420]	; (dcc4 <am_hal_cachectrl_control+0x2f0>)
    db20:	9305      	str	r3, [sp, #20]
    db22:	f000 fa13 	bl	df4c <am_hal_flash_load_ui32>
    db26:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    db2a:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    db2e:	4865      	ldr	r0, [pc, #404]	; (dcc4 <am_hal_cachectrl_control+0x2f0>)
    db30:	f000 fa10 	bl	df54 <am_hal_flash_store_ui32>
    db34:	9805      	ldr	r0, [sp, #20]
    db36:	f000 fb91 	bl	e25c <am_hal_interrupt_master_set>
    db3a:	f000 fb8b 	bl	e254 <am_hal_interrupt_master_disable>
    db3e:	4603      	mov	r3, r0
    db40:	4860      	ldr	r0, [pc, #384]	; (dcc4 <am_hal_cachectrl_control+0x2f0>)
    db42:	9306      	str	r3, [sp, #24]
    db44:	f000 fa02 	bl	df4c <am_hal_flash_load_ui32>
    db48:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    db4c:	f440 61ea 	orr.w	r1, r0, #1872	; 0x750
    db50:	485c      	ldr	r0, [pc, #368]	; (dcc4 <am_hal_cachectrl_control+0x2f0>)
    db52:	f000 f9ff 	bl	df54 <am_hal_flash_store_ui32>
    db56:	9806      	ldr	r0, [sp, #24]
    db58:	f000 fb80 	bl	e25c <am_hal_interrupt_master_set>
    db5c:	f000 fb7a 	bl	e254 <am_hal_interrupt_master_disable>
    db60:	4603      	mov	r3, r0
    db62:	4858      	ldr	r0, [pc, #352]	; (dcc4 <am_hal_cachectrl_control+0x2f0>)
    db64:	9307      	str	r3, [sp, #28]
    db66:	f000 f9f1 	bl	df4c <am_hal_flash_load_ui32>
    db6a:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    db6e:	f020 000f 	bic.w	r0, r0, #15
    db72:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    db76:	f041 0101 	orr.w	r1, r1, #1
    db7a:	4852      	ldr	r0, [pc, #328]	; (dcc4 <am_hal_cachectrl_control+0x2f0>)
    db7c:	f000 f9ea 	bl	df54 <am_hal_flash_store_ui32>
    db80:	9807      	ldr	r0, [sp, #28]
    db82:	f000 fb6b 	bl	e25c <am_hal_interrupt_master_set>
    db86:	2000      	movs	r0, #0
    db88:	e742      	b.n	da10 <am_hal_cachectrl_control+0x3c>
    db8a:	f000 fb63 	bl	e254 <am_hal_interrupt_master_disable>
    db8e:	4603      	mov	r3, r0
    db90:	484c      	ldr	r0, [pc, #304]	; (dcc4 <am_hal_cachectrl_control+0x2f0>)
    db92:	9308      	str	r3, [sp, #32]
    db94:	f000 f9da 	bl	df4c <am_hal_flash_load_ui32>
    db98:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    db9c:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    dba0:	4848      	ldr	r0, [pc, #288]	; (dcc4 <am_hal_cachectrl_control+0x2f0>)
    dba2:	f000 f9d7 	bl	df54 <am_hal_flash_store_ui32>
    dba6:	9808      	ldr	r0, [sp, #32]
    dba8:	f000 fb58 	bl	e25c <am_hal_interrupt_master_set>
    dbac:	f000 fb52 	bl	e254 <am_hal_interrupt_master_disable>
    dbb0:	4603      	mov	r3, r0
    dbb2:	4844      	ldr	r0, [pc, #272]	; (dcc4 <am_hal_cachectrl_control+0x2f0>)
    dbb4:	9309      	str	r3, [sp, #36]	; 0x24
    dbb6:	f000 f9c9 	bl	df4c <am_hal_flash_load_ui32>
    dbba:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    dbbe:	f440 61ec 	orr.w	r1, r0, #1888	; 0x760
    dbc2:	4840      	ldr	r0, [pc, #256]	; (dcc4 <am_hal_cachectrl_control+0x2f0>)
    dbc4:	f000 f9c6 	bl	df54 <am_hal_flash_store_ui32>
    dbc8:	9809      	ldr	r0, [sp, #36]	; 0x24
    dbca:	f000 fb47 	bl	e25c <am_hal_interrupt_master_set>
    dbce:	f000 fb41 	bl	e254 <am_hal_interrupt_master_disable>
    dbd2:	4603      	mov	r3, r0
    dbd4:	483b      	ldr	r0, [pc, #236]	; (dcc4 <am_hal_cachectrl_control+0x2f0>)
    dbd6:	930a      	str	r3, [sp, #40]	; 0x28
    dbd8:	f000 f9b8 	bl	df4c <am_hal_flash_load_ui32>
    dbdc:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    dbe0:	f020 000f 	bic.w	r0, r0, #15
    dbe4:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    dbe8:	f041 0101 	orr.w	r1, r1, #1
    dbec:	4835      	ldr	r0, [pc, #212]	; (dcc4 <am_hal_cachectrl_control+0x2f0>)
    dbee:	f000 f9b1 	bl	df54 <am_hal_flash_store_ui32>
    dbf2:	980a      	ldr	r0, [sp, #40]	; 0x28
    dbf4:	f000 fb32 	bl	e25c <am_hal_interrupt_master_set>
    dbf8:	2000      	movs	r0, #0
    dbfa:	e709      	b.n	da10 <am_hal_cachectrl_control+0x3c>
    dbfc:	2900      	cmp	r1, #0
    dbfe:	d04d      	beq.n	dc9c <am_hal_cachectrl_control+0x2c8>
    dc00:	680c      	ldr	r4, [r1, #0]
    dc02:	2c03      	cmp	r4, #3
    dc04:	d84c      	bhi.n	dca0 <am_hal_cachectrl_control+0x2cc>
    dc06:	f000 fb25 	bl	e254 <am_hal_interrupt_master_disable>
    dc0a:	4603      	mov	r3, r0
    dc0c:	482d      	ldr	r0, [pc, #180]	; (dcc4 <am_hal_cachectrl_control+0x2f0>)
    dc0e:	930b      	str	r3, [sp, #44]	; 0x2c
    dc10:	f000 f99c 	bl	df4c <am_hal_flash_load_ui32>
    dc14:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    dc18:	ea40 3104 	orr.w	r1, r0, r4, lsl #12
    dc1c:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    dc20:	4828      	ldr	r0, [pc, #160]	; (dcc4 <am_hal_cachectrl_control+0x2f0>)
    dc22:	f000 f997 	bl	df54 <am_hal_flash_store_ui32>
    dc26:	980b      	ldr	r0, [sp, #44]	; 0x2c
    dc28:	f000 fb18 	bl	e25c <am_hal_interrupt_master_set>
    dc2c:	2000      	movs	r0, #0
    dc2e:	e6ef      	b.n	da10 <am_hal_cachectrl_control+0x3c>
    dc30:	b3a1      	cbz	r1, dc9c <am_hal_cachectrl_control+0x2c8>
    dc32:	680c      	ldr	r4, [r1, #0]
    dc34:	2c07      	cmp	r4, #7
    dc36:	d833      	bhi.n	dca0 <am_hal_cachectrl_control+0x2cc>
    dc38:	f000 fb0c 	bl	e254 <am_hal_interrupt_master_disable>
    dc3c:	4603      	mov	r3, r0
    dc3e:	4821      	ldr	r0, [pc, #132]	; (dcc4 <am_hal_cachectrl_control+0x2f0>)
    dc40:	930c      	str	r3, [sp, #48]	; 0x30
    dc42:	f000 f983 	bl	df4c <am_hal_flash_load_ui32>
    dc46:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    dc4a:	ea40 1104 	orr.w	r1, r0, r4, lsl #4
    dc4e:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    dc52:	481c      	ldr	r0, [pc, #112]	; (dcc4 <am_hal_cachectrl_control+0x2f0>)
    dc54:	f000 f97e 	bl	df54 <am_hal_flash_store_ui32>
    dc58:	980c      	ldr	r0, [sp, #48]	; 0x30
    dc5a:	f000 faff 	bl	e25c <am_hal_interrupt_master_set>
    dc5e:	2000      	movs	r0, #0
    dc60:	e6d6      	b.n	da10 <am_hal_cachectrl_control+0x3c>
    dc62:	b1d9      	cbz	r1, dc9c <am_hal_cachectrl_control+0x2c8>
    dc64:	680c      	ldr	r4, [r1, #0]
    dc66:	2c0f      	cmp	r4, #15
    dc68:	d81a      	bhi.n	dca0 <am_hal_cachectrl_control+0x2cc>
    dc6a:	f000 faf3 	bl	e254 <am_hal_interrupt_master_disable>
    dc6e:	4603      	mov	r3, r0
    dc70:	4814      	ldr	r0, [pc, #80]	; (dcc4 <am_hal_cachectrl_control+0x2f0>)
    dc72:	930d      	str	r3, [sp, #52]	; 0x34
    dc74:	f000 f96a 	bl	df4c <am_hal_flash_load_ui32>
    dc78:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    dc7c:	f020 000f 	bic.w	r0, r0, #15
    dc80:	ea40 0104 	orr.w	r1, r0, r4
    dc84:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    dc88:	480e      	ldr	r0, [pc, #56]	; (dcc4 <am_hal_cachectrl_control+0x2f0>)
    dc8a:	f000 f963 	bl	df54 <am_hal_flash_store_ui32>
    dc8e:	980d      	ldr	r0, [sp, #52]	; 0x34
    dc90:	f000 fae4 	bl	e25c <am_hal_interrupt_master_set>
    dc94:	2000      	movs	r0, #0
    dc96:	e6bb      	b.n	da10 <am_hal_cachectrl_control+0x3c>
    dc98:	2007      	movs	r0, #7
    dc9a:	e6b9      	b.n	da10 <am_hal_cachectrl_control+0x3c>
    dc9c:	2006      	movs	r0, #6
    dc9e:	e6b7      	b.n	da10 <am_hal_cachectrl_control+0x3c>
    dca0:	2001      	movs	r0, #1
    dca2:	e6b5      	b.n	da10 <am_hal_cachectrl_control+0x3c>
    dca4:	2c01      	cmp	r4, #1
    dca6:	d1f9      	bne.n	dc9c <am_hal_cachectrl_control+0x2c8>
    dca8:	4c04      	ldr	r4, [pc, #16]	; (dcbc <am_hal_cachectrl_control+0x2e8>)
    dcaa:	7849      	ldrb	r1, [r1, #1]
    dcac:	61a2      	str	r2, [r4, #24]
    dcae:	61e3      	str	r3, [r4, #28]
    dcb0:	6823      	ldr	r3, [r4, #0]
    dcb2:	f361 03c3 	bfi	r3, r1, #3, #1
    dcb6:	6023      	str	r3, [r4, #0]
    dcb8:	e6aa      	b.n	da10 <am_hal_cachectrl_control+0x3c>
    dcba:	bf00      	nop
    dcbc:	40018000 	.word	0x40018000
    dcc0:	f800000f 	.word	0xf800000f
    dcc4:	40018004 	.word	0x40018004

0000dcc8 <am_hal_clkgen_control>:
    dcc8:	4b49      	ldr	r3, [pc, #292]	; (ddf0 <am_hal_clkgen_control+0x128>)
    dcca:	681a      	ldr	r2, [r3, #0]
    dccc:	b912      	cbnz	r2, dcd4 <am_hal_clkgen_control+0xc>
    dcce:	4a49      	ldr	r2, [pc, #292]	; (ddf4 <am_hal_clkgen_control+0x12c>)
    dcd0:	6812      	ldr	r2, [r2, #0]
    dcd2:	601a      	str	r2, [r3, #0]
    dcd4:	2809      	cmp	r0, #9
    dcd6:	f200 8089 	bhi.w	ddec <am_hal_clkgen_control+0x124>
    dcda:	e8df f000 	tbb	[pc, r0]
    dcde:	160d      	.short	0x160d
    dce0:	423a261e 	.word	0x423a261e
    dce4:	055c544c 	.word	0x055c544c
    dce8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dcec:	2000      	movs	r0, #0
    dcee:	6a1a      	ldr	r2, [r3, #32]
    dcf0:	f36f 0200 	bfc	r2, #0, #1
    dcf4:	621a      	str	r2, [r3, #32]
    dcf6:	4770      	bx	lr
    dcf8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dcfc:	2200      	movs	r2, #0
    dcfe:	2147      	movs	r1, #71	; 0x47
    dd00:	6159      	str	r1, [r3, #20]
    dd02:	4610      	mov	r0, r2
    dd04:	619a      	str	r2, [r3, #24]
    dd06:	615a      	str	r2, [r3, #20]
    dd08:	4770      	bx	lr
    dd0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dd0e:	2000      	movs	r0, #0
    dd10:	899a      	ldrh	r2, [r3, #12]
    dd12:	f36f 0200 	bfc	r2, #0, #1
    dd16:	819a      	strh	r2, [r3, #12]
    dd18:	4770      	bx	lr
    dd1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dd1e:	2000      	movs	r0, #0
    dd20:	899a      	ldrh	r2, [r3, #12]
    dd22:	f36f 0241 	bfc	r2, #1, #1
    dd26:	819a      	strh	r2, [r3, #12]
    dd28:	4770      	bx	lr
    dd2a:	4a33      	ldr	r2, [pc, #204]	; (ddf8 <am_hal_clkgen_control+0x130>)
    dd2c:	68d3      	ldr	r3, [r2, #12]
    dd2e:	b2db      	uxtb	r3, r3
    dd30:	2b21      	cmp	r3, #33	; 0x21
    dd32:	d106      	bne.n	dd42 <am_hal_clkgen_control+0x7a>
    dd34:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    dd38:	2101      	movs	r1, #1
    dd3a:	f361 2309 	bfi	r3, r1, #8, #2
    dd3e:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    dd42:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dd46:	2000      	movs	r0, #0
    dd48:	8993      	ldrh	r3, [r2, #12]
    dd4a:	f043 0301 	orr.w	r3, r3, #1
    dd4e:	8193      	strh	r3, [r2, #12]
    dd50:	4770      	bx	lr
    dd52:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dd56:	2000      	movs	r0, #0
    dd58:	8993      	ldrh	r3, [r2, #12]
    dd5a:	f043 0302 	orr.w	r3, r3, #2
    dd5e:	8193      	strh	r3, [r2, #12]
    dd60:	4770      	bx	lr
    dd62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dd66:	2200      	movs	r2, #0
    dd68:	2047      	movs	r0, #71	; 0x47
    dd6a:	2101      	movs	r1, #1
    dd6c:	6158      	str	r0, [r3, #20]
    dd6e:	6199      	str	r1, [r3, #24]
    dd70:	4610      	mov	r0, r2
    dd72:	615a      	str	r2, [r3, #20]
    dd74:	4770      	bx	lr
    dd76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dd7a:	2000      	movs	r0, #0
    dd7c:	899a      	ldrh	r2, [r3, #12]
    dd7e:	f36f 12c7 	bfc	r2, #7, #1
    dd82:	819a      	strh	r2, [r3, #12]
    dd84:	4770      	bx	lr
    dd86:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dd8a:	2000      	movs	r0, #0
    dd8c:	8993      	ldrh	r3, [r2, #12]
    dd8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    dd92:	8193      	strh	r3, [r2, #12]
    dd94:	4770      	bx	lr
    dd96:	4a18      	ldr	r2, [pc, #96]	; (ddf8 <am_hal_clkgen_control+0x130>)
    dd98:	68d3      	ldr	r3, [r2, #12]
    dd9a:	b2db      	uxtb	r3, r3
    dd9c:	2b21      	cmp	r3, #33	; 0x21
    dd9e:	d00a      	beq.n	ddb6 <am_hal_clkgen_control+0xee>
    dda0:	b139      	cbz	r1, ddb2 <am_hal_clkgen_control+0xea>
    dda2:	680b      	ldr	r3, [r1, #0]
    dda4:	f043 0301 	orr.w	r3, r3, #1
    dda8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    ddac:	2000      	movs	r0, #0
    ddae:	6213      	str	r3, [r2, #32]
    ddb0:	4770      	bx	lr
    ddb2:	4b12      	ldr	r3, [pc, #72]	; (ddfc <am_hal_clkgen_control+0x134>)
    ddb4:	e7f8      	b.n	dda8 <am_hal_clkgen_control+0xe0>
    ddb6:	b500      	push	{lr}
    ddb8:	b083      	sub	sp, #12
    ddba:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    ddbe:	9101      	str	r1, [sp, #4]
    ddc0:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    ddc4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    ddc8:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    ddcc:	f000 f878 	bl	dec0 <am_hal_flash_delay>
    ddd0:	9901      	ldr	r1, [sp, #4]
    ddd2:	b149      	cbz	r1, dde8 <am_hal_clkgen_control+0x120>
    ddd4:	680b      	ldr	r3, [r1, #0]
    ddd6:	f043 0301 	orr.w	r3, r3, #1
    ddda:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    ddde:	2000      	movs	r0, #0
    dde0:	6213      	str	r3, [r2, #32]
    dde2:	b003      	add	sp, #12
    dde4:	f85d fb04 	ldr.w	pc, [sp], #4
    dde8:	4b04      	ldr	r3, [pc, #16]	; (ddfc <am_hal_clkgen_control+0x134>)
    ddea:	e7f6      	b.n	ddda <am_hal_clkgen_control+0x112>
    ddec:	2006      	movs	r0, #6
    ddee:	4770      	bx	lr
    ddf0:	10004140 	.word	0x10004140
    ddf4:	4ffff000 	.word	0x4ffff000
    ddf8:	40020000 	.word	0x40020000
    ddfc:	0025b801 	.word	0x0025b801

0000de00 <am_hal_clkgen_status_get>:
    de00:	b1b0      	cbz	r0, de30 <am_hal_clkgen_status_get+0x30>
    de02:	b410      	push	{r4}
    de04:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    de08:	4603      	mov	r3, r0
    de0a:	698c      	ldr	r4, [r1, #24]
    de0c:	4809      	ldr	r0, [pc, #36]	; (de34 <am_hal_clkgen_status_get+0x34>)
    de0e:	4a0a      	ldr	r2, [pc, #40]	; (de38 <am_hal_clkgen_status_get+0x38>)
    de10:	f014 0f01 	tst.w	r4, #1
    de14:	bf08      	it	eq
    de16:	4602      	moveq	r2, r0
    de18:	601a      	str	r2, [r3, #0]
    de1a:	69ca      	ldr	r2, [r1, #28]
    de1c:	f85d 4b04 	ldr.w	r4, [sp], #4
    de20:	f002 0101 	and.w	r1, r2, #1
    de24:	f3c2 0240 	ubfx	r2, r2, #1, #1
    de28:	2000      	movs	r0, #0
    de2a:	6059      	str	r1, [r3, #4]
    de2c:	721a      	strb	r2, [r3, #8]
    de2e:	4770      	bx	lr
    de30:	2006      	movs	r0, #6
    de32:	4770      	bx	lr
    de34:	02dc6c00 	.word	0x02dc6c00
    de38:	016e3600 	.word	0x016e3600

0000de3c <am_hal_flash_page_erase>:
    de3c:	4b00      	ldr	r3, [pc, #0]	; (de40 <am_hal_flash_page_erase+0x4>)
    de3e:	4718      	bx	r3
    de40:	08000051 	.word	0x08000051

0000de44 <am_hal_flash_program_main>:
    de44:	b5f0      	push	{r4, r5, r6, r7, lr}
    de46:	4d13      	ldr	r5, [pc, #76]	; (de94 <am_hal_flash_program_main+0x50>)
    de48:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
    de4c:	45ac      	cmp	ip, r5
    de4e:	b083      	sub	sp, #12
    de50:	d005      	beq.n	de5e <am_hal_flash_program_main+0x1a>
    de52:	4c11      	ldr	r4, [pc, #68]	; (de98 <am_hal_flash_program_main+0x54>)
    de54:	46a4      	mov	ip, r4
    de56:	b003      	add	sp, #12
    de58:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    de5c:	4760      	bx	ip
    de5e:	2b01      	cmp	r3, #1
    de60:	4607      	mov	r7, r0
    de62:	461c      	mov	r4, r3
    de64:	4616      	mov	r6, r2
    de66:	d905      	bls.n	de74 <am_hal_flash_program_main+0x30>
    de68:	4d0b      	ldr	r5, [pc, #44]	; (de98 <am_hal_flash_program_main+0x54>)
    de6a:	3b01      	subs	r3, #1
    de6c:	47a8      	blx	r5
    de6e:	b108      	cbz	r0, de74 <am_hal_flash_program_main+0x30>
    de70:	b003      	add	sp, #12
    de72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    de74:	4b09      	ldr	r3, [pc, #36]	; (de9c <am_hal_flash_program_main+0x58>)
    de76:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
    de7a:	f8d3 3ffc 	ldr.w	r3, [r3, #4092]	; 0xffc
    de7e:	9301      	str	r3, [sp, #4]
    de80:	3a01      	subs	r2, #1
    de82:	4c05      	ldr	r4, [pc, #20]	; (de98 <am_hal_flash_program_main+0x54>)
    de84:	2301      	movs	r3, #1
    de86:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    de8a:	a901      	add	r1, sp, #4
    de8c:	4638      	mov	r0, r7
    de8e:	47a0      	blx	r4
    de90:	b003      	add	sp, #12
    de92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    de94:	10060000 	.word	0x10060000
    de98:	08000055 	.word	0x08000055
    de9c:	1005f000 	.word	0x1005f000

0000dea0 <am_hal_flash_clear_bits>:
    dea0:	b510      	push	{r4, lr}
    dea2:	680c      	ldr	r4, [r1, #0]
    dea4:	b082      	sub	sp, #8
    dea6:	4022      	ands	r2, r4
    dea8:	43d2      	mvns	r2, r2
    deaa:	9201      	str	r2, [sp, #4]
    deac:	4c03      	ldr	r4, [pc, #12]	; (debc <am_hal_flash_clear_bits+0x1c>)
    deae:	460a      	mov	r2, r1
    deb0:	2301      	movs	r3, #1
    deb2:	a901      	add	r1, sp, #4
    deb4:	47a0      	blx	r4
    deb6:	b002      	add	sp, #8
    deb8:	bd10      	pop	{r4, pc}
    deba:	bf00      	nop
    debc:	08000055 	.word	0x08000055

0000dec0 <am_hal_flash_delay>:
    dec0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    dec6:	075b      	lsls	r3, r3, #29
    dec8:	bf46      	itte	mi
    deca:	0040      	lslmi	r0, r0, #1
    decc:	230e      	movmi	r3, #14
    dece:	230b      	movpl	r3, #11
    ded0:	4298      	cmp	r0, r3
    ded2:	d902      	bls.n	deda <am_hal_flash_delay+0x1a>
    ded4:	4a01      	ldr	r2, [pc, #4]	; (dedc <am_hal_flash_delay+0x1c>)
    ded6:	1ac0      	subs	r0, r0, r3
    ded8:	4710      	bx	r2
    deda:	4770      	bx	lr
    dedc:	0800009d 	.word	0x0800009d

0000dee0 <am_hal_flash_delay_status_check>:
    dee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dee4:	f89d c020 	ldrb.w	ip, [sp, #32]
    dee8:	f8df 805c 	ldr.w	r8, [pc, #92]	; df48 <am_hal_flash_delay_status_check+0x68>
    deec:	4604      	mov	r4, r0
    deee:	460d      	mov	r5, r1
    def0:	4616      	mov	r6, r2
    def2:	461f      	mov	r7, r3
    def4:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    def8:	f1bc 0f00 	cmp.w	ip, #0
    defc:	d00a      	beq.n	df14 <am_hal_flash_delay_status_check+0x34>
    defe:	e01a      	b.n	df36 <am_hal_flash_delay_status_check+0x56>
    df00:	b1f4      	cbz	r4, df40 <am_hal_flash_delay_status_check+0x60>
    df02:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    df06:	f013 0f04 	tst.w	r3, #4
    df0a:	bf0c      	ite	eq
    df0c:	2005      	moveq	r0, #5
    df0e:	2012      	movne	r0, #18
    df10:	3c01      	subs	r4, #1
    df12:	47c0      	blx	r8
    df14:	6828      	ldr	r0, [r5, #0]
    df16:	4030      	ands	r0, r6
    df18:	42b8      	cmp	r0, r7
    df1a:	d0f1      	beq.n	df00 <am_hal_flash_delay_status_check+0x20>
    df1c:	2000      	movs	r0, #0
    df1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    df22:	b16c      	cbz	r4, df40 <am_hal_flash_delay_status_check+0x60>
    df24:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    df28:	f013 0f04 	tst.w	r3, #4
    df2c:	bf0c      	ite	eq
    df2e:	2005      	moveq	r0, #5
    df30:	2012      	movne	r0, #18
    df32:	3c01      	subs	r4, #1
    df34:	47c0      	blx	r8
    df36:	6828      	ldr	r0, [r5, #0]
    df38:	4030      	ands	r0, r6
    df3a:	42b8      	cmp	r0, r7
    df3c:	d1f1      	bne.n	df22 <am_hal_flash_delay_status_check+0x42>
    df3e:	e7ed      	b.n	df1c <am_hal_flash_delay_status_check+0x3c>
    df40:	2004      	movs	r0, #4
    df42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    df46:	bf00      	nop
    df48:	0800009d 	.word	0x0800009d

0000df4c <am_hal_flash_load_ui32>:
    df4c:	4b00      	ldr	r3, [pc, #0]	; (df50 <am_hal_flash_load_ui32+0x4>)
    df4e:	4718      	bx	r3
    df50:	08000075 	.word	0x08000075

0000df54 <am_hal_flash_store_ui32>:
    df54:	4b01      	ldr	r3, [pc, #4]	; (df5c <am_hal_flash_store_ui32+0x8>)
    df56:	f043 0301 	orr.w	r3, r3, #1
    df5a:	4718      	bx	r3
    df5c:	10004028 	.word	0x10004028

0000df60 <am_hal_gpio_pinconfig>:
    df60:	2831      	cmp	r0, #49	; 0x31
    df62:	f200 80c3 	bhi.w	e0ec <am_hal_gpio_pinconfig+0x18c>
    df66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    df6a:	4604      	mov	r4, r0
    df6c:	f011 07e0 	ands.w	r7, r1, #224	; 0xe0
    df70:	f001 0007 	and.w	r0, r1, #7
    df74:	b085      	sub	sp, #20
    df76:	f3c1 03c1 	ubfx	r3, r1, #3, #2
    df7a:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    df7e:	d00f      	beq.n	dfa0 <am_hal_gpio_pinconfig+0x40>
    df80:	f3c1 1642 	ubfx	r6, r1, #5, #3
    df84:	1db5      	adds	r5, r6, #6
    df86:	f005 0507 	and.w	r5, r5, #7
    df8a:	2d03      	cmp	r5, #3
    df8c:	f042 0201 	orr.w	r2, r2, #1
    df90:	f240 80ae 	bls.w	e0f0 <am_hal_gpio_pinconfig+0x190>
    df94:	2fc0      	cmp	r7, #192	; 0xc0
    df96:	f000 80e1 	beq.w	e15c <am_hal_gpio_pinconfig+0x1fc>
    df9a:	2f20      	cmp	r7, #32
    df9c:	f000 80e3 	beq.w	e166 <am_hal_gpio_pinconfig+0x206>
    dfa0:	b163      	cbz	r3, dfbc <am_hal_gpio_pinconfig+0x5c>
    dfa2:	2b01      	cmp	r3, #1
    dfa4:	f000 80d3 	beq.w	e14e <am_hal_gpio_pinconfig+0x1ee>
    dfa8:	2b02      	cmp	r3, #2
    dfaa:	f040 80c9 	bne.w	e140 <am_hal_gpio_pinconfig+0x1e0>
    dfae:	4b79      	ldr	r3, [pc, #484]	; (e194 <am_hal_gpio_pinconfig+0x234>)
    dfb0:	5d1b      	ldrb	r3, [r3, r4]
    dfb2:	075b      	lsls	r3, r3, #29
    dfb4:	f140 80c4 	bpl.w	e140 <am_hal_gpio_pinconfig+0x1e0>
    dfb8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    dfbc:	4b76      	ldr	r3, [pc, #472]	; (e198 <am_hal_gpio_pinconfig+0x238>)
    dfbe:	5d1b      	ldrb	r3, [r3, r4]
    dfc0:	4103      	asrs	r3, r0
    dfc2:	005b      	lsls	r3, r3, #1
    dfc4:	f003 0302 	and.w	r3, r3, #2
    dfc8:	4313      	orrs	r3, r2
    dfca:	4a74      	ldr	r2, [pc, #464]	; (e19c <am_hal_gpio_pinconfig+0x23c>)
    dfcc:	5d12      	ldrb	r2, [r2, r4]
    dfce:	4282      	cmp	r2, r0
    dfd0:	f000 8099 	beq.w	e106 <am_hal_gpio_pinconfig+0x1a6>
    dfd4:	f3c1 3000 	ubfx	r0, r1, #12, #1
    dfd8:	f3c1 2581 	ubfx	r5, r1, #10, #2
    dfdc:	f3c1 3280 	ubfx	r2, r1, #14, #1
    dfe0:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    dfe4:	0a88      	lsrs	r0, r1, #10
    dfe6:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    dfea:	f000 0008 	and.w	r0, r0, #8
    dfee:	4302      	orrs	r2, r0
    dff0:	f3c1 2007 	ubfx	r0, r1, #8, #8
    dff4:	f000 050c 	and.w	r5, r0, #12
    dff8:	2d04      	cmp	r5, #4
    dffa:	f000 80a5 	beq.w	e148 <am_hal_gpio_pinconfig+0x1e8>
    dffe:	4d68      	ldr	r5, [pc, #416]	; (e1a0 <am_hal_gpio_pinconfig+0x240>)
    e000:	682d      	ldr	r5, [r5, #0]
    e002:	eba1 0805 	sub.w	r8, r1, r5
    e006:	fab8 f888 	clz	r8, r8
    e00a:	ea4f 1858 	mov.w	r8, r8, lsr #5
    e00e:	f010 0f60 	tst.w	r0, #96	; 0x60
    e012:	bf04      	itt	eq
    e014:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
    e018:	f360 0200 	bfieq	r2, r0, #0, #1
    e01c:	00a0      	lsls	r0, r4, #2
    e01e:	f3c1 2101 	ubfx	r1, r1, #8, #2
    e022:	2902      	cmp	r1, #2
    e024:	d05c      	beq.n	e0e0 <am_hal_gpio_pinconfig+0x180>
    e026:	2903      	cmp	r1, #3
    e028:	d058      	beq.n	e0dc <am_hal_gpio_pinconfig+0x17c>
    e02a:	2901      	cmp	r1, #1
    e02c:	ea4f 01c4 	mov.w	r1, r4, lsl #3
    e030:	bf08      	it	eq
    e032:	f043 0304 	orreq.w	r3, r3, #4
    e036:	f001 0118 	and.w	r1, r1, #24
    e03a:	2700      	movs	r7, #0
    e03c:	f000 001c 	and.w	r0, r0, #28
    e040:	fa02 f600 	lsl.w	r6, r2, r0
    e044:	220f      	movs	r2, #15
    e046:	4082      	lsls	r2, r0
    e048:	43d2      	mvns	r2, r2
    e04a:	f04f 09ff 	mov.w	r9, #255	; 0xff
    e04e:	fa03 f501 	lsl.w	r5, r3, r1
    e052:	fa09 f901 	lsl.w	r9, r9, r1
    e056:	9201      	str	r2, [sp, #4]
    e058:	f000 f8fc 	bl	e254 <am_hal_interrupt_master_disable>
    e05c:	f024 0a03 	bic.w	sl, r4, #3
    e060:	ea4f 0b54 	mov.w	fp, r4, lsr #1
    e064:	f10a 4c80 	add.w	ip, sl, #1073741824	; 0x40000000
    e068:	4b4e      	ldr	r3, [pc, #312]	; (e1a4 <am_hal_gpio_pinconfig+0x244>)
    e06a:	494f      	ldr	r1, [pc, #316]	; (e1a8 <am_hal_gpio_pinconfig+0x248>)
    e06c:	9a01      	ldr	r2, [sp, #4]
    e06e:	9003      	str	r0, [sp, #12]
    e070:	ea6f 0909 	mvn.w	r9, r9
    e074:	f02b 0b03 	bic.w	fp, fp, #3
    e078:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
    e07c:	f1b8 0f00 	cmp.w	r8, #0
    e080:	d00b      	beq.n	e09a <am_hal_gpio_pinconfig+0x13a>
    e082:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
    e086:	f004 081f 	and.w	r8, r4, #31
    e08a:	4848      	ldr	r0, [pc, #288]	; (e1ac <am_hal_gpio_pinconfig+0x24c>)
    e08c:	f00e 0e04 	and.w	lr, lr, #4
    e090:	2401      	movs	r4, #1
    e092:	fa04 f408 	lsl.w	r4, r4, r8
    e096:	f84e 4000 	str.w	r4, [lr, r0]
    e09a:	4845      	ldr	r0, [pc, #276]	; (e1b0 <am_hal_gpio_pinconfig+0x250>)
    e09c:	2473      	movs	r4, #115	; 0x73
    e09e:	6604      	str	r4, [r0, #96]	; 0x60
    e0a0:	f8dc 4000 	ldr.w	r4, [ip]
    e0a4:	ea04 0409 	and.w	r4, r4, r9
    e0a8:	4325      	orrs	r5, r4
    e0aa:	f8cc 5000 	str.w	r5, [ip]
    e0ae:	f85b 4003 	ldr.w	r4, [fp, r3]
    e0b2:	4022      	ands	r2, r4
    e0b4:	4332      	orrs	r2, r6
    e0b6:	f84b 2003 	str.w	r2, [fp, r3]
    e0ba:	f85a 3001 	ldr.w	r3, [sl, r1]
    e0be:	ea03 0909 	and.w	r9, r3, r9
    e0c2:	2400      	movs	r4, #0
    e0c4:	ea49 0707 	orr.w	r7, r9, r7
    e0c8:	f84a 7001 	str.w	r7, [sl, r1]
    e0cc:	6604      	str	r4, [r0, #96]	; 0x60
    e0ce:	9803      	ldr	r0, [sp, #12]
    e0d0:	f000 f8c4 	bl	e25c <am_hal_interrupt_master_set>
    e0d4:	4620      	mov	r0, r4
    e0d6:	b005      	add	sp, #20
    e0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e0dc:	f043 0304 	orr.w	r3, r3, #4
    e0e0:	00e1      	lsls	r1, r4, #3
    e0e2:	f001 0118 	and.w	r1, r1, #24
    e0e6:	2701      	movs	r7, #1
    e0e8:	408f      	lsls	r7, r1
    e0ea:	e7a7      	b.n	e03c <am_hal_gpio_pinconfig+0xdc>
    e0ec:	2006      	movs	r0, #6
    e0ee:	4770      	bx	lr
    e0f0:	4d28      	ldr	r5, [pc, #160]	; (e194 <am_hal_gpio_pinconfig+0x234>)
    e0f2:	5d2d      	ldrb	r5, [r5, r4]
    e0f4:	3e02      	subs	r6, #2
    e0f6:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    e0fa:	07ee      	lsls	r6, r5, #31
    e0fc:	d536      	bpl.n	e16c <am_hal_gpio_pinconfig+0x20c>
    e0fe:	2b00      	cmp	r3, #0
    e100:	f43f af5c 	beq.w	dfbc <am_hal_gpio_pinconfig+0x5c>
    e104:	e74d      	b.n	dfa2 <am_hal_gpio_pinconfig+0x42>
    e106:	f3c1 4202 	ubfx	r2, r1, #16, #3
    e10a:	2a07      	cmp	r2, #7
    e10c:	d030      	beq.n	e170 <am_hal_gpio_pinconfig+0x210>
    e10e:	4d29      	ldr	r5, [pc, #164]	; (e1b4 <am_hal_gpio_pinconfig+0x254>)
    e110:	f3c1 40c1 	ubfx	r0, r1, #19, #2
    e114:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    e118:	f815 0024 	ldrb.w	r0, [r5, r4, lsl #2]
    e11c:	4290      	cmp	r0, r2
    e11e:	d029      	beq.n	e174 <am_hal_gpio_pinconfig+0x214>
    e120:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    e124:	00a0      	lsls	r0, r4, #2
    e126:	786e      	ldrb	r6, [r5, #1]
    e128:	4296      	cmp	r6, r2
    e12a:	d02d      	beq.n	e188 <am_hal_gpio_pinconfig+0x228>
    e12c:	78ae      	ldrb	r6, [r5, #2]
    e12e:	4296      	cmp	r6, r2
    e130:	d02c      	beq.n	e18c <am_hal_gpio_pinconfig+0x22c>
    e132:	78ed      	ldrb	r5, [r5, #3]
    e134:	4295      	cmp	r5, r2
    e136:	d02b      	beq.n	e190 <am_hal_gpio_pinconfig+0x230>
    e138:	481f      	ldr	r0, [pc, #124]	; (e1b8 <am_hal_gpio_pinconfig+0x258>)
    e13a:	b005      	add	sp, #20
    e13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e140:	481e      	ldr	r0, [pc, #120]	; (e1bc <am_hal_gpio_pinconfig+0x25c>)
    e142:	b005      	add	sp, #20
    e144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e148:	f04f 0801 	mov.w	r8, #1
    e14c:	e75f      	b.n	e00e <am_hal_gpio_pinconfig+0xae>
    e14e:	4b11      	ldr	r3, [pc, #68]	; (e194 <am_hal_gpio_pinconfig+0x234>)
    e150:	5d1b      	ldrb	r3, [r3, r4]
    e152:	079d      	lsls	r5, r3, #30
    e154:	d5f4      	bpl.n	e140 <am_hal_gpio_pinconfig+0x1e0>
    e156:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    e15a:	e72f      	b.n	dfbc <am_hal_gpio_pinconfig+0x5c>
    e15c:	2c14      	cmp	r4, #20
    e15e:	f43f af1f 	beq.w	dfa0 <am_hal_gpio_pinconfig+0x40>
    e162:	4817      	ldr	r0, [pc, #92]	; (e1c0 <am_hal_gpio_pinconfig+0x260>)
    e164:	e7b7      	b.n	e0d6 <am_hal_gpio_pinconfig+0x176>
    e166:	2c14      	cmp	r4, #20
    e168:	f47f af1a 	bne.w	dfa0 <am_hal_gpio_pinconfig+0x40>
    e16c:	4815      	ldr	r0, [pc, #84]	; (e1c4 <am_hal_gpio_pinconfig+0x264>)
    e16e:	e7b2      	b.n	e0d6 <am_hal_gpio_pinconfig+0x176>
    e170:	4815      	ldr	r0, [pc, #84]	; (e1c8 <am_hal_gpio_pinconfig+0x268>)
    e172:	e7b0      	b.n	e0d6 <am_hal_gpio_pinconfig+0x176>
    e174:	2200      	movs	r2, #0
    e176:	00a0      	lsls	r0, r4, #2
    e178:	0052      	lsls	r2, r2, #1
    e17a:	f3c1 5540 	ubfx	r5, r1, #21, #1
    e17e:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
    e182:	f04f 0800 	mov.w	r8, #0
    e186:	e74a      	b.n	e01e <am_hal_gpio_pinconfig+0xbe>
    e188:	2201      	movs	r2, #1
    e18a:	e7f5      	b.n	e178 <am_hal_gpio_pinconfig+0x218>
    e18c:	2202      	movs	r2, #2
    e18e:	e7f3      	b.n	e178 <am_hal_gpio_pinconfig+0x218>
    e190:	2203      	movs	r2, #3
    e192:	e7f1      	b.n	e178 <am_hal_gpio_pinconfig+0x218>
    e194:	0000e96c 	.word	0x0000e96c
    e198:	0000e9a0 	.word	0x0000e9a0
    e19c:	0000ea9c 	.word	0x0000ea9c
    e1a0:	0000e964 	.word	0x0000e964
    e1a4:	40010040 	.word	0x40010040
    e1a8:	400100e0 	.word	0x400100e0
    e1ac:	400100b4 	.word	0x400100b4
    e1b0:	40010000 	.word	0x40010000
    e1b4:	0000e9d4 	.word	0x0000e9d4
    e1b8:	08000104 	.word	0x08000104
    e1bc:	08000102 	.word	0x08000102
    e1c0:	08000101 	.word	0x08000101
    e1c4:	08000100 	.word	0x08000100
    e1c8:	08000103 	.word	0x08000103

0000e1cc <am_hal_gpio_state_write>:
    e1cc:	2831      	cmp	r0, #49	; 0x31
    e1ce:	d81a      	bhi.n	e206 <am_hal_gpio_state_write+0x3a>
    e1d0:	b570      	push	{r4, r5, r6, lr}
    e1d2:	2905      	cmp	r1, #5
    e1d4:	b082      	sub	sp, #8
    e1d6:	460d      	mov	r5, r1
    e1d8:	d812      	bhi.n	e200 <am_hal_gpio_state_write+0x34>
    e1da:	f000 031f 	and.w	r3, r0, #31
    e1de:	2201      	movs	r2, #1
    e1e0:	08c0      	lsrs	r0, r0, #3
    e1e2:	fa02 f603 	lsl.w	r6, r2, r3
    e1e6:	f000 0404 	and.w	r4, r0, #4
    e1ea:	f000 f833 	bl	e254 <am_hal_interrupt_master_disable>
    e1ee:	3d01      	subs	r5, #1
    e1f0:	9001      	str	r0, [sp, #4]
    e1f2:	2d04      	cmp	r5, #4
    e1f4:	d821      	bhi.n	e23a <am_hal_gpio_state_write+0x6e>
    e1f6:	e8df f005 	tbb	[pc, r5]
    e1fa:	1512      	.short	0x1512
    e1fc:	1d1a      	.short	0x1d1a
    e1fe:	08          	.byte	0x08
    e1ff:	00          	.byte	0x00
    e200:	2006      	movs	r0, #6
    e202:	b002      	add	sp, #8
    e204:	bd70      	pop	{r4, r5, r6, pc}
    e206:	2005      	movs	r0, #5
    e208:	4770      	bx	lr
    e20a:	4a0d      	ldr	r2, [pc, #52]	; (e240 <am_hal_gpio_state_write+0x74>)
    e20c:	58a3      	ldr	r3, [r4, r2]
    e20e:	4073      	eors	r3, r6
    e210:	50a3      	str	r3, [r4, r2]
    e212:	9801      	ldr	r0, [sp, #4]
    e214:	f000 f822 	bl	e25c <am_hal_interrupt_master_set>
    e218:	2000      	movs	r0, #0
    e21a:	b002      	add	sp, #8
    e21c:	bd70      	pop	{r4, r5, r6, pc}
    e21e:	4b09      	ldr	r3, [pc, #36]	; (e244 <am_hal_gpio_state_write+0x78>)
    e220:	50e6      	str	r6, [r4, r3]
    e222:	e7f6      	b.n	e212 <am_hal_gpio_state_write+0x46>
    e224:	4a08      	ldr	r2, [pc, #32]	; (e248 <am_hal_gpio_state_write+0x7c>)
    e226:	58a3      	ldr	r3, [r4, r2]
    e228:	4073      	eors	r3, r6
    e22a:	50a3      	str	r3, [r4, r2]
    e22c:	e7f1      	b.n	e212 <am_hal_gpio_state_write+0x46>
    e22e:	4b04      	ldr	r3, [pc, #16]	; (e240 <am_hal_gpio_state_write+0x74>)
    e230:	50e6      	str	r6, [r4, r3]
    e232:	e7ee      	b.n	e212 <am_hal_gpio_state_write+0x46>
    e234:	4b05      	ldr	r3, [pc, #20]	; (e24c <am_hal_gpio_state_write+0x80>)
    e236:	50e6      	str	r6, [r4, r3]
    e238:	e7eb      	b.n	e212 <am_hal_gpio_state_write+0x46>
    e23a:	4b05      	ldr	r3, [pc, #20]	; (e250 <am_hal_gpio_state_write+0x84>)
    e23c:	50e6      	str	r6, [r4, r3]
    e23e:	e7e8      	b.n	e212 <am_hal_gpio_state_write+0x46>
    e240:	400100b4 	.word	0x400100b4
    e244:	40010090 	.word	0x40010090
    e248:	40010088 	.word	0x40010088
    e24c:	400100a8 	.word	0x400100a8
    e250:	40010098 	.word	0x40010098

0000e254 <am_hal_interrupt_master_disable>:
    e254:	f3ef 8010 	mrs	r0, PRIMASK
    e258:	b672      	cpsid	i
    e25a:	4770      	bx	lr

0000e25c <am_hal_interrupt_master_set>:
    e25c:	f380 8810 	msr	PRIMASK, r0
    e260:	4770      	bx	lr
    e262:	bf00      	nop

0000e264 <am_hal_itm_enable>:
    e264:	4a0e      	ldr	r2, [pc, #56]	; (e2a0 <am_hal_itm_enable+0x3c>)
    e266:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e26a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    e26e:	b410      	push	{r4}
    e270:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    e274:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e278:	01db      	lsls	r3, r3, #7
    e27a:	d5fb      	bpl.n	e274 <am_hal_itm_enable+0x10>
    e27c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    e280:	4c08      	ldr	r4, [pc, #32]	; (e2a4 <am_hal_itm_enable+0x40>)
    e282:	4a09      	ldr	r2, [pc, #36]	; (e2a8 <am_hal_itm_enable+0x44>)
    e284:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    e288:	200f      	movs	r0, #15
    e28a:	f04f 31ff 	mov.w	r1, #4294967295
    e28e:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    e292:	f85d 4b04 	ldr.w	r4, [sp], #4
    e296:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    e29a:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    e29e:	4770      	bx	lr
    e2a0:	e000ed00 	.word	0xe000ed00
    e2a4:	c5acce55 	.word	0xc5acce55
    e2a8:	00150511 	.word	0x00150511

0000e2ac <am_hal_itm_print>:
    e2ac:	7803      	ldrb	r3, [r0, #0]
    e2ae:	b1a3      	cbz	r3, e2da <am_hal_itm_print+0x2e>
    e2b0:	4603      	mov	r3, r0
    e2b2:	f1c0 0c01 	rsb	ip, r0, #1
    e2b6:	eb0c 0103 	add.w	r1, ip, r3
    e2ba:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    e2be:	2a00      	cmp	r2, #0
    e2c0:	d1f9      	bne.n	e2b6 <am_hal_itm_print+0xa>
    e2c2:	4401      	add	r1, r0
    e2c4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    e2c8:	f810 cb01 	ldrb.w	ip, [r0], #1
    e2cc:	6813      	ldr	r3, [r2, #0]
    e2ce:	2b00      	cmp	r3, #0
    e2d0:	d0fc      	beq.n	e2cc <am_hal_itm_print+0x20>
    e2d2:	4288      	cmp	r0, r1
    e2d4:	f882 c000 	strb.w	ip, [r2]
    e2d8:	d1f6      	bne.n	e2c8 <am_hal_itm_print+0x1c>
    e2da:	4770      	bx	lr

0000e2dc <am_hal_mcuctrl_info_get>:
    e2dc:	2900      	cmp	r1, #0
    e2de:	f000 808f 	beq.w	e400 <am_hal_mcuctrl_info_get+0x124>
    e2e2:	2801      	cmp	r0, #1
    e2e4:	b430      	push	{r4, r5}
    e2e6:	d006      	beq.n	e2f6 <am_hal_mcuctrl_info_get+0x1a>
    e2e8:	2802      	cmp	r0, #2
    e2ea:	d06d      	beq.n	e3c8 <am_hal_mcuctrl_info_get+0xec>
    e2ec:	2800      	cmp	r0, #0
    e2ee:	d055      	beq.n	e39c <am_hal_mcuctrl_info_get+0xc0>
    e2f0:	2006      	movs	r0, #6
    e2f2:	bc30      	pop	{r4, r5}
    e2f4:	4770      	bx	lr
    e2f6:	4a43      	ldr	r2, [pc, #268]	; (e404 <am_hal_mcuctrl_info_get+0x128>)
    e2f8:	4843      	ldr	r0, [pc, #268]	; (e408 <am_hal_mcuctrl_info_get+0x12c>)
    e2fa:	6813      	ldr	r3, [r2, #0]
    e2fc:	600b      	str	r3, [r1, #0]
    e2fe:	6854      	ldr	r4, [r2, #4]
    e300:	604c      	str	r4, [r1, #4]
    e302:	6894      	ldr	r4, [r2, #8]
    e304:	608c      	str	r4, [r1, #8]
    e306:	68d4      	ldr	r4, [r2, #12]
    e308:	60cc      	str	r4, [r1, #12]
    e30a:	f3c3 5503 	ubfx	r5, r3, #20, #4
    e30e:	6914      	ldr	r4, [r2, #16]
    e310:	610c      	str	r4, [r1, #16]
    e312:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    e316:	4c3d      	ldr	r4, [pc, #244]	; (e40c <am_hal_mcuctrl_info_get+0x130>)
    e318:	6950      	ldr	r0, [r2, #20]
    e31a:	6148      	str	r0, [r1, #20]
    e31c:	f003 0201 	and.w	r2, r3, #1
    e320:	f3c3 4303 	ubfx	r3, r3, #16, #4
    e324:	e9c1 2506 	strd	r2, r5, [r1, #24]
    e328:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    e32c:	4a38      	ldr	r2, [pc, #224]	; (e410 <am_hal_mcuctrl_info_get+0x134>)
    e32e:	620b      	str	r3, [r1, #32]
    e330:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    e334:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    e338:	b2db      	uxtb	r3, r3
    e33a:	f000 000f 	and.w	r0, r0, #15
    e33e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    e342:	624b      	str	r3, [r1, #36]	; 0x24
    e344:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    e348:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
    e34c:	f3c3 1303 	ubfx	r3, r3, #4, #4
    e350:	f000 000f 	and.w	r0, r0, #15
    e354:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
    e358:	628b      	str	r3, [r1, #40]	; 0x28
    e35a:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    e35e:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
    e362:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    e366:	f3c0 1003 	ubfx	r0, r0, #4, #4
    e36a:	4303      	orrs	r3, r0
    e36c:	62cb      	str	r3, [r1, #44]	; 0x2c
    e36e:	f8d2 40fc 	ldr.w	r4, [r2, #252]	; 0xfc
    e372:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    e376:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    e37a:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    e37e:	b2db      	uxtb	r3, r3
    e380:	041b      	lsls	r3, r3, #16
    e382:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    e386:	fa5f fc82 	uxtb.w	ip, r2
    e38a:	ea43 030c 	orr.w	r3, r3, ip
    e38e:	b2c2      	uxtb	r2, r0
    e390:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e394:	630b      	str	r3, [r1, #48]	; 0x30
    e396:	2000      	movs	r0, #0
    e398:	bc30      	pop	{r4, r5}
    e39a:	4770      	bx	lr
    e39c:	4a19      	ldr	r2, [pc, #100]	; (e404 <am_hal_mcuctrl_info_get+0x128>)
    e39e:	6993      	ldr	r3, [r2, #24]
    e3a0:	f3c3 1480 	ubfx	r4, r3, #6, #1
    e3a4:	700c      	strb	r4, [r1, #0]
    e3a6:	f8d2 41a0 	ldr.w	r4, [r2, #416]	; 0x1a0
    e3aa:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e3ae:	704b      	strb	r3, [r1, #1]
    e3b0:	f3c4 6381 	ubfx	r3, r4, #26, #2
    e3b4:	710b      	strb	r3, [r1, #4]
    e3b6:	6953      	ldr	r3, [r2, #20]
    e3b8:	f3c3 0240 	ubfx	r2, r3, #1, #1
    e3bc:	f003 0301 	and.w	r3, r3, #1
    e3c0:	bc30      	pop	{r4, r5}
    e3c2:	708a      	strb	r2, [r1, #2]
    e3c4:	70cb      	strb	r3, [r1, #3]
    e3c6:	4770      	bx	lr
    e3c8:	4a0e      	ldr	r2, [pc, #56]	; (e404 <am_hal_mcuctrl_info_get+0x128>)
    e3ca:	6848      	ldr	r0, [r1, #4]
    e3cc:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    e3d0:	f003 0401 	and.w	r4, r3, #1
    e3d4:	700c      	strb	r4, [r1, #0]
    e3d6:	f3c3 0440 	ubfx	r4, r3, #1, #1
    e3da:	720c      	strb	r4, [r1, #8]
    e3dc:	f8d2 41c4 	ldr.w	r4, [r2, #452]	; 0x1c4
    e3e0:	60cc      	str	r4, [r1, #12]
    e3e2:	f8d2 41c0 	ldr.w	r4, [r2, #448]	; 0x1c0
    e3e6:	4320      	orrs	r0, r4
    e3e8:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e3ec:	6048      	str	r0, [r1, #4]
    e3ee:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    e3f2:	740b      	strb	r3, [r1, #16]
    e3f4:	694b      	ldr	r3, [r1, #20]
    e3f6:	4313      	orrs	r3, r2
    e3f8:	2000      	movs	r0, #0
    e3fa:	bc30      	pop	{r4, r5}
    e3fc:	614b      	str	r3, [r1, #20]
    e3fe:	4770      	bx	lr
    e400:	2006      	movs	r0, #6
    e402:	4770      	bx	lr
    e404:	40020000 	.word	0x40020000
    e408:	0000ead0 	.word	0x0000ead0
    e40c:	0000eb10 	.word	0x0000eb10
    e410:	f0000f00 	.word	0xf0000f00

0000e414 <am_hal_pwrctrl_low_power_init>:
    e414:	b530      	push	{r4, r5, lr}
    e416:	4b69      	ldr	r3, [pc, #420]	; (e5bc <am_hal_pwrctrl_low_power_init+0x1a8>)
    e418:	681a      	ldr	r2, [r3, #0]
    e41a:	b085      	sub	sp, #20
    e41c:	b912      	cbnz	r2, e424 <am_hal_pwrctrl_low_power_init+0x10>
    e41e:	4a68      	ldr	r2, [pc, #416]	; (e5c0 <am_hal_pwrctrl_low_power_init+0x1ac>)
    e420:	6812      	ldr	r2, [r2, #0]
    e422:	601a      	str	r2, [r3, #0]
    e424:	4b67      	ldr	r3, [pc, #412]	; (e5c4 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e426:	68db      	ldr	r3, [r3, #12]
    e428:	b2db      	uxtb	r3, r3
    e42a:	2b12      	cmp	r3, #18
    e42c:	d104      	bne.n	e438 <am_hal_pwrctrl_low_power_init+0x24>
    e42e:	4c66      	ldr	r4, [pc, #408]	; (e5c8 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e430:	6863      	ldr	r3, [r4, #4]
    e432:	07d8      	lsls	r0, r3, #31
    e434:	f100 8088 	bmi.w	e548 <am_hal_pwrctrl_low_power_init+0x134>
    e438:	4b62      	ldr	r3, [pc, #392]	; (e5c4 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e43a:	68da      	ldr	r2, [r3, #12]
    e43c:	b2d2      	uxtb	r2, r2
    e43e:	2a20      	cmp	r2, #32
    e440:	d934      	bls.n	e4ac <am_hal_pwrctrl_low_power_init+0x98>
    e442:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
    e446:	2002      	movs	r0, #2
    e448:	f360 4213 	bfi	r2, r0, #16, #4
    e44c:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    e450:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
    e454:	2203      	movs	r2, #3
    e456:	f362 5117 	bfi	r1, r2, #20, #4
    e45a:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
    e45e:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e462:	2405      	movs	r4, #5
    e464:	f364 0103 	bfi	r1, r4, #0, #4
    e468:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e46c:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e470:	f360 1107 	bfi	r1, r0, #4, #4
    e474:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e478:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e47c:	2406      	movs	r4, #6
    e47e:	f364 210b 	bfi	r1, r4, #8, #4
    e482:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e486:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e48a:	2001      	movs	r0, #1
    e48c:	f360 310f 	bfi	r1, r0, #12, #4
    e490:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e494:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e498:	f362 61de 	bfi	r1, r2, #27, #4
    e49c:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e4a0:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
    e4a4:	f362 0103 	bfi	r1, r2, #0, #4
    e4a8:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
    e4ac:	4a45      	ldr	r2, [pc, #276]	; (e5c4 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e4ae:	68d3      	ldr	r3, [r2, #12]
    e4b0:	b2db      	uxtb	r3, r3
    e4b2:	2b11      	cmp	r3, #17
    e4b4:	d905      	bls.n	e4c2 <am_hal_pwrctrl_low_power_init+0xae>
    e4b6:	f8d2 335c 	ldr.w	r3, [r2, #860]	; 0x35c
    e4ba:	f36f 6318 	bfc	r3, #24, #1
    e4be:	f8c2 335c 	str.w	r3, [r2, #860]	; 0x35c
    e4c2:	2100      	movs	r1, #0
    e4c4:	200c      	movs	r0, #12
    e4c6:	f7ff fa85 	bl	d9d4 <am_hal_cachectrl_control>
    e4ca:	4b3f      	ldr	r3, [pc, #252]	; (e5c8 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e4cc:	699b      	ldr	r3, [r3, #24]
    e4ce:	f3c3 2500 	ubfx	r5, r3, #8, #1
    e4d2:	05db      	lsls	r3, r3, #23
    e4d4:	d420      	bmi.n	e518 <am_hal_pwrctrl_low_power_init+0x104>
    e4d6:	4c3b      	ldr	r4, [pc, #236]	; (e5c4 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e4d8:	68e3      	ldr	r3, [r4, #12]
    e4da:	b2db      	uxtb	r3, r3
    e4dc:	2b11      	cmp	r3, #17
    e4de:	d84e      	bhi.n	e57e <am_hal_pwrctrl_low_power_init+0x16a>
    e4e0:	4c38      	ldr	r4, [pc, #224]	; (e5c4 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e4e2:	493a      	ldr	r1, [pc, #232]	; (e5cc <am_hal_pwrctrl_low_power_init+0x1b8>)
    e4e4:	7e22      	ldrb	r2, [r4, #24]
    e4e6:	2001      	movs	r0, #1
    e4e8:	4302      	orrs	r2, r0
    e4ea:	2307      	movs	r3, #7
    e4ec:	7622      	strb	r2, [r4, #24]
    e4ee:	9000      	str	r0, [sp, #0]
    e4f0:	461a      	mov	r2, r3
    e4f2:	f242 7010 	movw	r0, #10000	; 0x2710
    e4f6:	f7ff fcf3 	bl	dee0 <am_hal_flash_delay_status_check>
    e4fa:	2800      	cmp	r0, #0
    e4fc:	d15a      	bne.n	e5b4 <am_hal_pwrctrl_low_power_init+0x1a0>
    e4fe:	4b32      	ldr	r3, [pc, #200]	; (e5c8 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e500:	681a      	ldr	r2, [r3, #0]
    e502:	f042 0201 	orr.w	r2, r2, #1
    e506:	601a      	str	r2, [r3, #0]
    e508:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    e50a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    e50e:	625a      	str	r2, [r3, #36]	; 0x24
    e510:	68e3      	ldr	r3, [r4, #12]
    e512:	b2db      	uxtb	r3, r3
    e514:	2b11      	cmp	r3, #17
    e516:	d002      	beq.n	e51e <am_hal_pwrctrl_low_power_init+0x10a>
    e518:	2000      	movs	r0, #0
    e51a:	b005      	add	sp, #20
    e51c:	bd30      	pop	{r4, r5, pc}
    e51e:	f8d4 335c 	ldr.w	r3, [r4, #860]	; 0x35c
    e522:	f360 5356 	bfi	r3, r0, #21, #2
    e526:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
    e52a:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e52e:	220f      	movs	r2, #15
    e530:	f362 138b 	bfi	r3, r2, #6, #6
    e534:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e538:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e53c:	f362 0305 	bfi	r3, r2, #0, #6
    e540:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e544:	b005      	add	sp, #20
    e546:	bd30      	pop	{r4, r5, pc}
    e548:	f7ff fe84 	bl	e254 <am_hal_interrupt_master_disable>
    e54c:	9002      	str	r0, [sp, #8]
    e54e:	68a3      	ldr	r3, [r4, #8]
    e550:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    e554:	60a3      	str	r3, [r4, #8]
    e556:	9802      	ldr	r0, [sp, #8]
    e558:	f7ff fe80 	bl	e25c <am_hal_interrupt_master_set>
    e55c:	20a0      	movs	r0, #160	; 0xa0
    e55e:	f7ff fcaf 	bl	dec0 <am_hal_flash_delay>
    e562:	69a3      	ldr	r3, [r4, #24]
    e564:	0619      	lsls	r1, r3, #24
    e566:	d403      	bmi.n	e570 <am_hal_pwrctrl_low_power_init+0x15c>
    e568:	20a0      	movs	r0, #160	; 0xa0
    e56a:	f7ff fca9 	bl	dec0 <am_hal_flash_delay>
    e56e:	69a3      	ldr	r3, [r4, #24]
    e570:	4b15      	ldr	r3, [pc, #84]	; (e5c8 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e572:	699b      	ldr	r3, [r3, #24]
    e574:	061a      	lsls	r2, r3, #24
    e576:	f53f af5f 	bmi.w	e438 <am_hal_pwrctrl_low_power_init+0x24>
    e57a:	2001      	movs	r0, #1
    e57c:	e7cd      	b.n	e51a <am_hal_pwrctrl_low_power_init+0x106>
    e57e:	f7ff fe69 	bl	e254 <am_hal_interrupt_master_disable>
    e582:	9003      	str	r0, [sp, #12]
    e584:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e588:	2219      	movs	r2, #25
    e58a:	f362 138b 	bfi	r3, r2, #6, #6
    e58e:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e592:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
    e596:	210c      	movs	r1, #12
    e598:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e59c:	f361 0205 	bfi	r2, r1, #0, #6
    e5a0:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
    e5a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    e5a6:	f365 5296 	bfi	r2, r5, #22, #1
    e5aa:	63da      	str	r2, [r3, #60]	; 0x3c
    e5ac:	9803      	ldr	r0, [sp, #12]
    e5ae:	f7ff fe55 	bl	e25c <am_hal_interrupt_master_set>
    e5b2:	e795      	b.n	e4e0 <am_hal_pwrctrl_low_power_init+0xcc>
    e5b4:	2004      	movs	r0, #4
    e5b6:	b005      	add	sp, #20
    e5b8:	bd30      	pop	{r4, r5, pc}
    e5ba:	bf00      	nop
    e5bc:	10004140 	.word	0x10004140
    e5c0:	4ffff000 	.word	0x4ffff000
    e5c4:	40020000 	.word	0x40020000
    e5c8:	40021000 	.word	0x40021000
    e5cc:	40020018 	.word	0x40020018

0000e5d0 <am_hal_rtc_osc_disable>:
    e5d0:	4a03      	ldr	r2, [pc, #12]	; (e5e0 <am_hal_rtc_osc_disable+0x10>)
    e5d2:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    e5d6:	f043 0310 	orr.w	r3, r3, #16
    e5da:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    e5de:	4770      	bx	lr
    e5e0:	40004200 	.word	0x40004200

0000e5e4 <bl_run_main>:
    e5e4:	f64e 5308 	movw	r3, #60680	; 0xed08
    e5e8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    e5ec:	6018      	str	r0, [r3, #0]
    e5ee:	6803      	ldr	r3, [r0, #0]
    e5f0:	6842      	ldr	r2, [r0, #4]
    e5f2:	469d      	mov	sp, r3
    e5f4:	4710      	bx	r2
    e5f6:	bf00      	nop

0000e5f8 <am_hal_bootloader_exit>:
    e5f8:	b510      	push	{r4, lr}
    e5fa:	4a21      	ldr	r2, [pc, #132]	; (e680 <am_hal_bootloader_exit+0x88>)
    e5fc:	f8d2 31a4 	ldr.w	r3, [r2, #420]	; 0x1a4
    e600:	075c      	lsls	r4, r3, #29
    e602:	b084      	sub	sp, #16
    e604:	d503      	bpl.n	e60e <am_hal_bootloader_exit+0x16>
    e606:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
    e60a:	0759      	lsls	r1, r3, #29
    e60c:	d40a      	bmi.n	e624 <am_hal_bootloader_exit+0x2c>
    e60e:	b128      	cbz	r0, e61c <am_hal_bootloader_exit+0x24>
    e610:	f7ff ffe8 	bl	e5e4 <bl_run_main>
    e614:	2300      	movs	r3, #0
    e616:	4618      	mov	r0, r3
    e618:	b004      	add	sp, #16
    e61a:	bd10      	pop	{r4, pc}
    e61c:	4603      	mov	r3, r0
    e61e:	4618      	mov	r0, r3
    e620:	b004      	add	sp, #16
    e622:	bd10      	pop	{r4, pc}
    e624:	4917      	ldr	r1, [pc, #92]	; (e684 <am_hal_bootloader_exit+0x8c>)
    e626:	4b18      	ldr	r3, [pc, #96]	; (e688 <am_hal_bootloader_exit+0x90>)
    e628:	f8d1 1a00 	ldr.w	r1, [r1, #2560]	; 0xa00
    e62c:	2401      	movs	r4, #1
    e62e:	679c      	str	r4, [r3, #120]	; 0x78
    e630:	43c9      	mvns	r1, r1
    e632:	9c01      	ldr	r4, [sp, #4]
    e634:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    e638:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
    e63c:	e9dd 4102 	ldrd	r4, r1, [sp, #8]
    e640:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
    e644:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
    e648:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    e64a:	f013 0301 	ands.w	r3, r3, #1
    e64e:	d1e2      	bne.n	e616 <am_hal_bootloader_exit+0x1e>
    e650:	2304      	movs	r3, #4
    e652:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
    e656:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    e65a:	07db      	lsls	r3, r3, #31
    e65c:	d5d7      	bpl.n	e60e <am_hal_bootloader_exit+0x16>
    e65e:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    e662:	f8d4 1df0 	ldr.w	r1, [r4, #3568]	; 0xdf0
    e666:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    e66a:	f023 0301 	bic.w	r3, r3, #1
    e66e:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
    e672:	4b06      	ldr	r3, [pc, #24]	; (e68c <am_hal_bootloader_exit+0x94>)
    e674:	b289      	uxth	r1, r1
    e676:	430b      	orrs	r3, r1
    e678:	f8c4 3df0 	str.w	r3, [r4, #3568]	; 0xdf0
    e67c:	e7c7      	b.n	e60e <am_hal_bootloader_exit+0x16>
    e67e:	bf00      	nop
    e680:	40020000 	.word	0x40020000
    e684:	50021000 	.word	0x50021000
    e688:	40030000 	.word	0x40030000
    e68c:	a05f0003 	.word	0xa05f0003

0000e690 <am_hal_tpiu_enable>:
    e690:	b510      	push	{r4, lr}
    e692:	4b23      	ldr	r3, [pc, #140]	; (e720 <am_hal_tpiu_enable+0x90>)
    e694:	6804      	ldr	r4, [r0, #0]
    e696:	2200      	movs	r2, #0
    e698:	b084      	sub	sp, #16
    e69a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    e69e:	b334      	cbz	r4, e6ee <am_hal_tpiu_enable+0x5e>
    e6a0:	4a20      	ldr	r2, [pc, #128]	; (e724 <am_hal_tpiu_enable+0x94>)
    e6a2:	4921      	ldr	r1, [pc, #132]	; (e728 <am_hal_tpiu_enable+0x98>)
    e6a4:	2001      	movs	r0, #1
    e6a6:	6058      	str	r0, [r3, #4]
    e6a8:	f5a4 4361 	sub.w	r3, r4, #57600	; 0xe100
    e6ac:	a801      	add	r0, sp, #4
    e6ae:	428b      	cmp	r3, r1
    e6b0:	bf88      	it	hi
    e6b2:	4614      	movhi	r4, r2
    e6b4:	f7ff fba4 	bl	de00 <am_hal_clkgen_status_get>
    e6b8:	9b01      	ldr	r3, [sp, #4]
    e6ba:	1c5a      	adds	r2, r3, #1
    e6bc:	d02d      	beq.n	e71a <am_hal_tpiu_enable+0x8a>
    e6be:	08db      	lsrs	r3, r3, #3
    e6c0:	fbb3 f4f4 	udiv	r4, r3, r4
    e6c4:	3c01      	subs	r4, #1
    e6c6:	b2a4      	uxth	r4, r4
    e6c8:	4b15      	ldr	r3, [pc, #84]	; (e720 <am_hal_tpiu_enable+0x90>)
    e6ca:	4a18      	ldr	r2, [pc, #96]	; (e72c <am_hal_tpiu_enable+0x9c>)
    e6cc:	611c      	str	r4, [r3, #16]
    e6ce:	2102      	movs	r1, #2
    e6d0:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
    e6d4:	2000      	movs	r0, #0
    e6d6:	f240 2101 	movw	r1, #513	; 0x201
    e6da:	f8c3 0f00 	str.w	r0, [r3, #3840]	; 0xf00
    e6de:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
    e6e2:	f44f 7048 	mov.w	r0, #800	; 0x320
    e6e6:	f7ff fbeb 	bl	dec0 <am_hal_flash_delay>
    e6ea:	b004      	add	sp, #16
    e6ec:	bd10      	pop	{r4, pc}
    e6ee:	6902      	ldr	r2, [r0, #16]
    e6f0:	611a      	str	r2, [r3, #16]
    e6f2:	6882      	ldr	r2, [r0, #8]
    e6f4:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    e6f8:	68c1      	ldr	r1, [r0, #12]
    e6fa:	2201      	movs	r2, #1
    e6fc:	3901      	subs	r1, #1
    e6fe:	408a      	lsls	r2, r1
    e700:	605a      	str	r2, [r3, #4]
    e702:	f8c3 4f00 	str.w	r4, [r3, #3840]	; 0xf00
    e706:	4a09      	ldr	r2, [pc, #36]	; (e72c <am_hal_tpiu_enable+0x9c>)
    e708:	6843      	ldr	r3, [r0, #4]
    e70a:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    e70e:	f44f 7048 	mov.w	r0, #800	; 0x320
    e712:	f7ff fbd5 	bl	dec0 <am_hal_flash_delay>
    e716:	b004      	add	sp, #16
    e718:	bd10      	pop	{r4, pc}
    e71a:	2405      	movs	r4, #5
    e71c:	e7d4      	b.n	e6c8 <am_hal_tpiu_enable+0x38>
    e71e:	bf00      	nop
    e720:	e0040000 	.word	0xe0040000
    e724:	000f4240 	.word	0x000f4240
    e728:	001da380 	.word	0x001da380
    e72c:	40020000 	.word	0x40020000
    e730:	73696854 	.word	0x73696854
    e734:	20736920 	.word	0x20736920
    e738:	6c6f7041 	.word	0x6c6f7041
    e73c:	20336f6c 	.word	0x20336f6c
    e740:	6f636553 	.word	0x6f636553
    e744:	7261646e 	.word	0x7261646e
    e748:	6f422079 	.word	0x6f422079
    e74c:	6f6c746f 	.word	0x6f6c746f
    e750:	72656461 	.word	0x72656461
    e754:	6d655420 	.word	0x6d655420
    e758:	74616c70 	.word	0x74616c70
    e75c:	72502065 	.word	0x72502065
    e760:	6172676f 	.word	0x6172676f
    e764:	0a0d216d 	.word	0x0a0d216d
    e768:	00000a0d 	.word	0x00000a0d
    e76c:	74737543 	.word	0x74737543
    e770:	72656d6f 	.word	0x72656d6f
    e774:	79654b20 	.word	0x79654b20
    e778:	7830203a 	.word	0x7830203a
    e77c:	78383025 	.word	0x78383025
    e780:	2578302d 	.word	0x2578302d
    e784:	2d783830 	.word	0x2d783830
    e788:	30257830 	.word	0x30257830
    e78c:	302d7838 	.word	0x302d7838
    e790:	38302578 	.word	0x38302578
    e794:	000a0d78 	.word	0x000a0d78
    e798:	3a4b454b 	.word	0x3a4b454b
    e79c:	0000000a 	.word	0x0000000a
    e7a0:	2079654b 	.word	0x2079654b
    e7a4:	3a643225 	.word	0x3a643225
    e7a8:	25783020 	.word	0x25783020
    e7ac:	2d783830 	.word	0x2d783830
    e7b0:	30257830 	.word	0x30257830
    e7b4:	302d7838 	.word	0x302d7838
    e7b8:	38302578 	.word	0x38302578
    e7bc:	78302d78 	.word	0x78302d78
    e7c0:	78383025 	.word	0x78383025
    e7c4:	00000a0d 	.word	0x00000a0d
    e7c8:	68747541 	.word	0x68747541
    e7cc:	00000a3a 	.word	0x00000a3a
    e7d0:	2041544f 	.word	0x2041544f
    e7d4:	69617641 	.word	0x69617641
    e7d8:	6c62616c 	.word	0x6c62616c
    e7dc:	202d2065 	.word	0x202d2065
    e7e0:	2041544f 	.word	0x2041544f
    e7e4:	63736544 	.word	0x63736544
    e7e8:	78304020 	.word	0x78304020
    e7ec:	000a7825 	.word	0x000a7825
    e7f0:	6e756f46 	.word	0x6e756f46
    e7f4:	61622064 	.word	0x61622064
    e7f8:	544f2064 	.word	0x544f2064
    e7fc:	6f702041 	.word	0x6f702041
    e800:	69746e69 	.word	0x69746e69
    e804:	7420676e 	.word	0x7420676e
    e808:	69203a6f 	.word	0x69203a6f
    e80c:	6567616d 	.word	0x6567616d
    e810:	64646120 	.word	0x64646120
    e814:	73736572 	.word	0x73736572
    e818:	2578303d 	.word	0x2578303d
    e81c:	73202c78 	.word	0x73202c78
    e820:	20657a69 	.word	0x20657a69
    e824:	78257830 	.word	0x78257830
    e828:	0000000a 	.word	0x0000000a
    e82c:	6e756f46 	.word	0x6e756f46
    e830:	544f2064 	.word	0x544f2064
    e834:	20402041 	.word	0x20402041
    e838:	78257830 	.word	0x78257830
    e83c:	67616d20 	.word	0x67616d20
    e840:	30206369 	.word	0x30206369
    e844:	20782578 	.word	0x20782578
    e848:	6973202d 	.word	0x6973202d
    e84c:	3020657a 	.word	0x3020657a
    e850:	20782578 	.word	0x20782578
    e854:	62206f74 	.word	0x62206f74
    e858:	6e692065 	.word	0x6e692065
    e85c:	6c617473 	.word	0x6c617473
    e860:	2064656c 	.word	0x2064656c
    e864:	30207461 	.word	0x30207461
    e868:	0a782578 	.word	0x0a782578
    e86c:	00000000 	.word	0x00000000
    e870:	6e756f46 	.word	0x6e756f46
    e874:	6e752064 	.word	0x6e752064
    e878:	65707865 	.word	0x65707865
    e87c:	64657463 	.word	0x64657463
    e880:	41544f20 	.word	0x41544f20
    e884:	0000000a 	.word	0x0000000a
    e888:	65637845 	.word	0x65637845
    e88c:	64656465 	.word	0x64656465
    e890:	78616d20 	.word	0x78616d20
    e894:	6d756d69 	.word	0x6d756d69
    e898:	41544f20 	.word	0x41544f20
    e89c:	00000a73 	.word	0x00000a73
    e8a0:	6e756f46 	.word	0x6e756f46
    e8a4:	6e492064 	.word	0x6e492064
    e8a8:	696c6176 	.word	0x696c6176
    e8ac:	544f2064 	.word	0x544f2064
    e8b0:	6f702041 	.word	0x6f702041
    e8b4:	65746e69 	.word	0x65746e69
    e8b8:	78302072 	.word	0x78302072
    e8bc:	000a7825 	.word	0x000a7825
    e8c0:	61766e49 	.word	0x61766e49
    e8c4:	2064696c 	.word	0x2064696c
    e8c8:	6e69616d 	.word	0x6e69616d
    e8cc:	616d6920 	.word	0x616d6920
    e8d0:	000a6567 	.word	0x000a6567
    e8d4:	6e756f46 	.word	0x6e756f46
    e8d8:	61762064 	.word	0x61762064
    e8dc:	2064696c 	.word	0x2064696c
    e8e0:	6e69616d 	.word	0x6e69616d
    e8e4:	616d6920 	.word	0x616d6920
    e8e8:	2d206567 	.word	0x2d206567
    e8ec:	3a505320 	.word	0x3a505320
    e8f0:	78257830 	.word	0x78257830
    e8f4:	3a565220 	.word	0x3a565220
    e8f8:	78257830 	.word	0x78257830
    e8fc:	0000000a 	.word	0x0000000a
    e900:	6c6c6957 	.word	0x6c6c6957
    e904:	61727420 	.word	0x61727420
    e908:	6566736e 	.word	0x6566736e
    e90c:	6f632072 	.word	0x6f632072
    e910:	6f72746e 	.word	0x6f72746e
    e914:	766f206c 	.word	0x766f206c
    e918:	74207265 	.word	0x74207265
    e91c:	6874206f 	.word	0x6874206f
    e920:	69207369 	.word	0x69207369
    e924:	6567616d 	.word	0x6567616d
    e928:	74666120 	.word	0x74666120
    e92c:	6c207265 	.word	0x6c207265
    e930:	696b636f 	.word	0x696b636f
    e934:	7420676e 	.word	0x7420676e
    e938:	676e6968 	.word	0x676e6968
    e93c:	6f642073 	.word	0x6f642073
    e940:	0a0a6e77 	.word	0x0a0a6e77
    e944:	00000a0a 	.word	0x00000a0a
    e948:	0a0a0a0a 	.word	0x0a0a0a0a
    e94c:	0a0a0a0a 	.word	0x0a0a0a0a
    e950:	0a0a0a0a 	.word	0x0a0a0a0a
    e954:	0a0a0a0a 	.word	0x0a0a0a0a
    e958:	00000a0a 	.word	0x00000a0a

0000e95c <g_AM_BSP_GPIO_ITM_SWO>:
    e95c:	00000002                                ....

0000e960 <am_hal_cachectrl_defaults>:
    e960:	00000308                                ....

0000e964 <g_AM_HAL_GPIO_DISABLE>:
    e964:	00000003                                ....

0000e968 <g_AM_HAL_GPIO_OUTPUT>:
    e968:	00000403                                ....

0000e96c <g_ui8Bit76Capabilities>:
    e96c:	02800101 80010180 80800101 80808080     ................
    e97c:	80808080 80808008 01800180 80808080     ................
    e98c:	80808080 01800402 01010401 80808080     ................
    e99c:	00000101                                ....

0000e9a0 <g_ui8Inpen>:
    e9a0:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
    e9b0:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
    e9c0:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
    e9d0:	00003130                                01..

0000e9d4 <g_ui8NCEtable>:
    e9d4:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    e9e4:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    e9f4:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    ea04:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    ea14:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    ea24:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    ea34:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    ea44:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    ea54:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    ea64:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    ea74:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    ea84:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    ea94:	32221202 43231303                       .."2..#C

0000ea9c <g_ui8nCEpins>:
    ea9c:	02070707 00080802 01020202 01010101     ................
    eaac:	01010101 01010101 01010101 01010101     ................
    eabc:	01010101 08010101 01010008 01010101     ................
    eacc:	00000101                                ....

0000ead0 <g_am_hal_mcuctrl_flash_size>:
    ead0:	00004000 00008000 00010000 00020000     .@..............
    eae0:	00040000 00080000 00100000 00200000     .............. .
    eaf0:	00180000 00000000 00000000 00000000     ................
	...

0000eb10 <g_am_hal_mcuctrl_sram_size>:
    eb10:	00004000 00008000 00010000 00020000     .@..............
    eb20:	00040000 00080000 00100000 00060000     ................
    eb30:	000c0000 00000000 00000000 00000000     ................
	...
