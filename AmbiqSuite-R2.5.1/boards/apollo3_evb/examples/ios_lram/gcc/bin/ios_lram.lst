
bin/ios_lram.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 85 d2 00 00 ed d2 00 00 ef d2 00 00     ................
    c010:	ef d2 00 00 ef d2 00 00 ef d2 00 00 00 00 00 00     ................
	...
    c02c:	f1 d2 00 00 f1 d2 00 00 00 00 00 00 f1 d2 00 00     ................
    c03c:	f1 d2 00 00 f1 d2 00 00 f1 d2 00 00 f1 d2 00 00     ................
    c04c:	f1 d2 00 00 75 c3 00 00 f1 d2 00 00 f1 d2 00 00     ....u...........
    c05c:	f1 d2 00 00 f1 d2 00 00 f1 d2 00 00 f1 d2 00 00     ................
    c06c:	f1 d2 00 00 f1 d2 00 00 f1 d2 00 00 f1 d2 00 00     ................
    c07c:	f1 d2 00 00 f1 d2 00 00 f1 d2 00 00 f1 d2 00 00     ................
    c08c:	f1 d2 00 00 f1 d2 00 00 f1 d2 00 00 f1 d2 00 00     ................
    c09c:	f1 d2 00 00 f1 d2 00 00 f1 d2 00 00 f1 d2 00 00     ................
    c0ac:	f1 d2 00 00 f1 d2 00 00 f1 d2 00 00 f1 d2 00 00     ................
    c0bc:	f1 d2 00 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    c1a0:	b082      	sub	sp, #8
    c1a2:	4603      	mov	r3, r0
    c1a4:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
    c1a8:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c1ac:	2b00      	cmp	r3, #0
    c1ae:	db0c      	blt.n	c1ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c1b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c1b4:	f003 021f 	and.w	r2, r3, #31
    c1b8:	4905      	ldr	r1, [pc, #20]	; (c1d0 <__NVIC_EnableIRQ+0x30>)
    c1ba:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c1be:	095b      	lsrs	r3, r3, #5
    c1c0:	2001      	movs	r0, #1
    c1c2:	fa00 f202 	lsl.w	r2, r0, r2
    c1c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
    c1ca:	bf00      	nop
    c1cc:	b002      	add	sp, #8
    c1ce:	4770      	bx	lr
    c1d0:	e000e100 	.word	0xe000e100

0000c1d4 <ios_set_up>:
//
// Configure the SPI slave.
//
//*****************************************************************************
static void ios_set_up(bool bSpi)
{
    c1d4:	b500      	push	{lr}
    c1d6:	b085      	sub	sp, #20
    c1d8:	4603      	mov	r3, r0
    c1da:	f88d 3007 	strb.w	r3, [sp, #7]
    if (bSpi)
    c1de:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c1e2:	2b00      	cmp	r3, #0
    c1e4:	d015      	beq.n	c212 <ios_set_up+0x3e>
    {
        // Configure SPI interface
        am_bsp_ios_pins_enable(0, AM_HAL_IOS_USE_SPI);
    c1e6:	2101      	movs	r1, #1
    c1e8:	2000      	movs	r0, #0
    c1ea:	f002 f959 	bl	e4a0 <am_bsp_ios_pins_enable>
        //
        // Configure the IOS interface and LRAM structure.
        //
        am_hal_ios_initialize(0, &g_pIOSHandle);
    c1ee:	492e      	ldr	r1, [pc, #184]	; (c2a8 <ios_set_up+0xd4>)
    c1f0:	2000      	movs	r0, #0
    c1f2:	f001 fd17 	bl	dc24 <am_hal_ios_initialize>
        am_hal_ios_power_ctrl(g_pIOSHandle, AM_HAL_SYSCTRL_WAKE, false);
    c1f6:	4b2c      	ldr	r3, [pc, #176]	; (c2a8 <ios_set_up+0xd4>)
    c1f8:	681b      	ldr	r3, [r3, #0]
    c1fa:	2200      	movs	r2, #0
    c1fc:	2100      	movs	r1, #0
    c1fe:	4618      	mov	r0, r3
    c200:	f001 fcb2 	bl	db68 <am_hal_ios_power_ctrl>
        am_hal_ios_configure(g_pIOSHandle, &g_sIOSSpiConfig);
    c204:	4b28      	ldr	r3, [pc, #160]	; (c2a8 <ios_set_up+0xd4>)
    c206:	681b      	ldr	r3, [r3, #0]
    c208:	4928      	ldr	r1, [pc, #160]	; (c2ac <ios_set_up+0xd8>)
    c20a:	4618      	mov	r0, r3
    c20c:	f001 fd28 	bl	dc60 <am_hal_ios_configure>
    c210:	e014      	b.n	c23c <ios_set_up+0x68>
    }
    else
    {
        // Configure I2C interface
        am_bsp_ios_pins_enable(0, AM_HAL_IOS_USE_I2C);
    c212:	2100      	movs	r1, #0
    c214:	2000      	movs	r0, #0
    c216:	f002 f943 	bl	e4a0 <am_bsp_ios_pins_enable>
        //
        // Configure the IOS interface and LRAM structure.
        //
        am_hal_ios_initialize(0, &g_pIOSHandle);
    c21a:	4923      	ldr	r1, [pc, #140]	; (c2a8 <ios_set_up+0xd4>)
    c21c:	2000      	movs	r0, #0
    c21e:	f001 fd01 	bl	dc24 <am_hal_ios_initialize>
        am_hal_ios_power_ctrl(g_pIOSHandle, AM_HAL_SYSCTRL_WAKE, false);
    c222:	4b21      	ldr	r3, [pc, #132]	; (c2a8 <ios_set_up+0xd4>)
    c224:	681b      	ldr	r3, [r3, #0]
    c226:	2200      	movs	r2, #0
    c228:	2100      	movs	r1, #0
    c22a:	4618      	mov	r0, r3
    c22c:	f001 fc9c 	bl	db68 <am_hal_ios_power_ctrl>
        am_hal_ios_configure(g_pIOSHandle, &g_sIOSI2cConfig);
    c230:	4b1d      	ldr	r3, [pc, #116]	; (c2a8 <ios_set_up+0xd4>)
    c232:	681b      	ldr	r3, [r3, #0]
    c234:	491e      	ldr	r1, [pc, #120]	; (c2b0 <ios_set_up+0xdc>)
    c236:	4618      	mov	r0, r3
    c238:	f001 fd12 	bl	dc60 <am_hal_ios_configure>

    //
    // Clear out any IOS register-access interrupts that may be active, and
    // enable interrupts for the registers we're interested in.
    //
    am_hal_ios_interrupt_clear(g_pIOSHandle, AM_HAL_IOS_INT_ALL);
    c23c:	4b1a      	ldr	r3, [pc, #104]	; (c2a8 <ios_set_up+0xd4>)
    c23e:	681b      	ldr	r3, [r3, #0]
    c240:	f04f 31ff 	mov.w	r1, #4294967295
    c244:	4618      	mov	r0, r3
    c246:	f001 fe17 	bl	de78 <am_hal_ios_interrupt_clear>
    am_hal_ios_interrupt_enable(g_pIOSHandle, AM_HAL_IOS_INT_ERR | AM_HAL_IOS_INT_FSIZE);
    c24a:	4b17      	ldr	r3, [pc, #92]	; (c2a8 <ios_set_up+0xd4>)
    c24c:	681b      	ldr	r3, [r3, #0]
    c24e:	210f      	movs	r1, #15
    c250:	4618      	mov	r0, r3
    c252:	f001 fdfd 	bl	de50 <am_hal_ios_interrupt_enable>
#ifdef TEST_IOINTCTL
    am_hal_ios_interrupt_enable(g_pIOSHandle, AM_HAL_IOS_INT_IOINTW);
#endif
#ifdef TEST_IOS_XCMP_INT
    am_hal_ios_interrupt_enable(g_pIOSHandle, AM_HAL_IOS_XCMP_INT);
    c256:	4b14      	ldr	r3, [pc, #80]	; (c2a8 <ios_set_up+0xd4>)
    c258:	681b      	ldr	r3, [r3, #0]
    c25a:	f44f 7170 	mov.w	r1, #960	; 0x3c0
    c25e:	4618      	mov	r0, r3
    c260:	f001 fdf6 	bl	de50 <am_hal_ios_interrupt_enable>
#endif

    //
    // Set the bit in the NVIC to accept access interrupts from the IO Slave.
    //
    NVIC_EnableIRQ(IOSLAVE_IRQn);
    c264:	2004      	movs	r0, #4
    c266:	f7ff ff9b 	bl	c1a0 <__NVIC_EnableIRQ>

    // Set up the IOSINT interrupt pin
    am_hal_gpio_pinconfig(HANDSHAKE_IOS_PIN, g_AM_BSP_GPIO_ENABLE);
    c26a:	4b12      	ldr	r3, [pc, #72]	; (c2b4 <ios_set_up+0xe0>)
    c26c:	6819      	ldr	r1, [r3, #0]
    c26e:	2004      	movs	r0, #4
    c270:	f001 faf4 	bl	d85c <am_hal_gpio_pinconfig>

    // Initialize RO & AHB-RAM data with pattern
    for (uint8_t i = 0; i < 8; i++)
    c274:	2300      	movs	r3, #0
    c276:	f88d 300f 	strb.w	r3, [sp, #15]
    c27a:	e00c      	b.n	c296 <ios_set_up+0xc2>
    {
        am_hal_ios_pui8LRAM[0x78 + i] = ROBUFFER_INIT;
    c27c:	4b0e      	ldr	r3, [pc, #56]	; (c2b8 <ios_set_up+0xe4>)
    c27e:	681b      	ldr	r3, [r3, #0]
    c280:	f89d 200f 	ldrb.w	r2, [sp, #15]
    c284:	3278      	adds	r2, #120	; 0x78
    c286:	4413      	add	r3, r2
    c288:	2255      	movs	r2, #85	; 0x55
    c28a:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 8; i++)
    c28c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c290:	3301      	adds	r3, #1
    c292:	f88d 300f 	strb.w	r3, [sp, #15]
    c296:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c29a:	2b07      	cmp	r3, #7
    c29c:	d9ee      	bls.n	c27c <ios_set_up+0xa8>
    }
}
    c29e:	bf00      	nop
    c2a0:	bf00      	nop
    c2a2:	b005      	add	sp, #20
    c2a4:	f85d fb04 	ldr.w	pc, [sp], #4
    c2a8:	1000106c 	.word	0x1000106c
    c2ac:	10001000 	.word	0x10001000
    c2b0:	1000101c 	.word	0x1000101c
    c2b4:	0000e6f4 	.word	0x0000e6f4
    c2b8:	0000e868 	.word	0x0000e868

0000c2bc <inform_host>:


// Inform host of new data available to read
void inform_host(void)
{
    c2bc:	b500      	push	{lr}
    c2be:	b083      	sub	sp, #12
    uint32_t ui32Arg = HANDSHAKE_IOS_TO_IOM;
    c2c0:	2302      	movs	r3, #2
    c2c2:	9301      	str	r3, [sp, #4]
    // Update FIFOCTR for host to read
    am_hal_ios_control(g_pIOSHandle, AM_HAL_IOS_REQ_FIFO_UPDATE_CTR, NULL);
    c2c4:	4b08      	ldr	r3, [pc, #32]	; (c2e8 <inform_host+0x2c>)
    c2c6:	681b      	ldr	r3, [r3, #0]
    c2c8:	2200      	movs	r2, #0
    c2ca:	2106      	movs	r1, #6
    c2cc:	4618      	mov	r0, r3
    c2ce:	f001 febb 	bl	e048 <am_hal_ios_control>
    // Interrupt the host
    am_hal_ios_control(g_pIOSHandle, AM_HAL_IOS_REQ_HOST_INTSET, &ui32Arg);
    c2d2:	4b05      	ldr	r3, [pc, #20]	; (c2e8 <inform_host+0x2c>)
    c2d4:	681b      	ldr	r3, [r3, #0]
    c2d6:	aa01      	add	r2, sp, #4
    c2d8:	2100      	movs	r1, #0
    c2da:	4618      	mov	r0, r3
    c2dc:	f001 feb4 	bl	e048 <am_hal_ios_control>
}
    c2e0:	bf00      	nop
    c2e2:	b003      	add	sp, #12
    c2e4:	f85d fb04 	ldr.w	pc, [sp], #4
    c2e8:	1000106c 	.word	0x1000106c

0000c2ec <ios_read>:

// Receive data from host and prepare the loop back data
static void ios_read(uint32_t offset, uint32_t size)
{
    c2ec:	b084      	sub	sp, #16
    c2ee:	9001      	str	r0, [sp, #4]
    c2f0:	9100      	str	r1, [sp, #0]
    uint32_t i;
    uint8_t readByte;
    // Read only supported from LRAM
    for (i = 0; i + IOM_DATA_VALUE < size; i++)
    c2f2:	2300      	movs	r3, #0
    c2f4:	9303      	str	r3, [sp, #12]
    c2f6:	e014      	b.n	c322 <ios_read+0x36>
    {
        readByte = am_hal_ios_pui8LRAM[offset + IOM_DATA_VALUE + i];
    c2f8:	4b0e      	ldr	r3, [pc, #56]	; (c334 <ios_read+0x48>)
    c2fa:	681a      	ldr	r2, [r3, #0]
    c2fc:	9901      	ldr	r1, [sp, #4]
    c2fe:	9b03      	ldr	r3, [sp, #12]
    c300:	440b      	add	r3, r1
    c302:	3302      	adds	r3, #2
    c304:	4413      	add	r3, r2
    c306:	781b      	ldrb	r3, [r3, #0]
    c308:	f88d 300b 	strb.w	r3, [sp, #11]
        // Read data and prepare to be sent back after processing
        g_pIosSendBuf[IOM_DATA_VALUE + i] = readByte ^ TEST_XOR_BYTE;
    c30c:	9b03      	ldr	r3, [sp, #12]
    c30e:	3302      	adds	r3, #2
    c310:	f89d 200b 	ldrb.w	r2, [sp, #11]
    c314:	43d2      	mvns	r2, r2
    c316:	b2d1      	uxtb	r1, r2
    c318:	4a07      	ldr	r2, [pc, #28]	; (c338 <ios_read+0x4c>)
    c31a:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i + IOM_DATA_VALUE < size; i++)
    c31c:	9b03      	ldr	r3, [sp, #12]
    c31e:	3301      	adds	r3, #1
    c320:	9303      	str	r3, [sp, #12]
    c322:	9b03      	ldr	r3, [sp, #12]
    c324:	3302      	adds	r3, #2
    c326:	9a00      	ldr	r2, [sp, #0]
    c328:	429a      	cmp	r2, r3
    c32a:	d8e5      	bhi.n	c2f8 <ios_read+0xc>
    }
}
    c32c:	bf00      	nop
    c32e:	bf00      	nop
    c330:	b004      	add	sp, #16
    c332:	4770      	bx	lr
    c334:	0000e868 	.word	0x0000e868
    c338:	10001074 	.word	0x10001074

0000c33c <ios_send>:

// Send data to host (IOM)
static void ios_send(uint32_t address, uint32_t size)
{
    c33c:	b082      	sub	sp, #8
    c33e:	9001      	str	r0, [sp, #4]
    c340:	9100      	str	r1, [sp, #0]
    // Send data using the LRAM
    while (size--)
    c342:	e00a      	b.n	c35a <ios_send+0x1e>
    {
        am_hal_ios_pui8LRAM[address + size] = g_pIosSendBuf[size];
    c344:	4b09      	ldr	r3, [pc, #36]	; (c36c <ios_send+0x30>)
    c346:	681a      	ldr	r2, [r3, #0]
    c348:	9901      	ldr	r1, [sp, #4]
    c34a:	9b00      	ldr	r3, [sp, #0]
    c34c:	440b      	add	r3, r1
    c34e:	4413      	add	r3, r2
    c350:	4907      	ldr	r1, [pc, #28]	; (c370 <ios_send+0x34>)
    c352:	9a00      	ldr	r2, [sp, #0]
    c354:	440a      	add	r2, r1
    c356:	7812      	ldrb	r2, [r2, #0]
    c358:	701a      	strb	r2, [r3, #0]
    while (size--)
    c35a:	9b00      	ldr	r3, [sp, #0]
    c35c:	1e5a      	subs	r2, r3, #1
    c35e:	9200      	str	r2, [sp, #0]
    c360:	2b00      	cmp	r3, #0
    c362:	d1ef      	bne.n	c344 <ios_send+0x8>
    }
}
    c364:	bf00      	nop
    c366:	bf00      	nop
    c368:	b002      	add	sp, #8
    c36a:	4770      	bx	lr
    c36c:	0000e868 	.word	0x0000e868
    c370:	10001074 	.word	0x10001074

0000c374 <am_ioslave_ios_isr>:
//
// IO Slave Main ISR.
//
//*****************************************************************************
void am_ioslave_ios_isr(void)
{
    c374:	b500      	push	{lr}
    c376:	b083      	sub	sp, #12
    //
    // Check to see what caused this interrupt, then clear the bit from the
    // interrupt register.
    //

    am_hal_ios_interrupt_status_get(g_pIOSHandle, false, &ui32Status);
    c378:	4b1f      	ldr	r3, [pc, #124]	; (c3f8 <am_ioslave_ios_isr+0x84>)
    c37a:	681b      	ldr	r3, [r3, #0]
    c37c:	aa01      	add	r2, sp, #4
    c37e:	2100      	movs	r1, #0
    c380:	4618      	mov	r0, r3
    c382:	f001 fd8b 	bl	de9c <am_hal_ios_interrupt_status_get>

    am_hal_ios_interrupt_clear(g_pIOSHandle, ui32Status);
    c386:	4b1c      	ldr	r3, [pc, #112]	; (c3f8 <am_ioslave_ios_isr+0x84>)
    c388:	681b      	ldr	r3, [r3, #0]
    c38a:	9a01      	ldr	r2, [sp, #4]
    c38c:	4611      	mov	r1, r2
    c38e:	4618      	mov	r0, r3
    c390:	f001 fd72 	bl	de78 <am_hal_ios_interrupt_clear>

    if (ui32Status & AM_HAL_IOS_INT_FUNDFL)
    c394:	9b01      	ldr	r3, [sp, #4]
    c396:	f003 0304 	and.w	r3, r3, #4
    c39a:	2b00      	cmp	r3, #0
    c39c:	d008      	beq.n	c3b0 <am_ioslave_ios_isr+0x3c>
    {
        am_util_stdio_printf("Hitting underflow for the requested IOS FIFO transfer\n");
    c39e:	4817      	ldr	r0, [pc, #92]	; (c3fc <am_ioslave_ios_isr+0x88>)
    c3a0:	f000 ff48 	bl	d234 <am_util_stdio_printf>
        // We should never hit this case unless the threshold has beeen set
        // incorrect, or we are unable to handle the data rate
        // ERROR!
        am_hal_debug_assert_msg(0,
    c3a4:	4a16      	ldr	r2, [pc, #88]	; (c400 <am_ioslave_ios_isr+0x8c>)
    c3a6:	f44f 719c 	mov.w	r1, #312	; 0x138
    c3aa:	4816      	ldr	r0, [pc, #88]	; (c404 <am_ioslave_ios_isr+0x90>)
    c3ac:	f001 fa04 	bl	d7b8 <am_hal_debug_error>
            "Hitting underflow for the requested IOS FIFO transfer.");
    }

    if (ui32Status & AM_HAL_IOS_INT_ERR)
    c3b0:	9b01      	ldr	r3, [sp, #4]
    c3b2:	f003 030e 	and.w	r3, r3, #14
    c3b6:	2b00      	cmp	r3, #0
    c3b8:	d005      	beq.n	c3c6 <am_ioslave_ios_isr+0x52>
    {
        // We should never hit this case
        // ERROR!
        am_hal_debug_assert_msg(0,
    c3ba:	4a13      	ldr	r2, [pc, #76]	; (c408 <am_ioslave_ios_isr+0x94>)
    c3bc:	f44f 71a0 	mov.w	r1, #320	; 0x140
    c3c0:	4810      	ldr	r0, [pc, #64]	; (c404 <am_ioslave_ios_isr+0x90>)
    c3c2:	f001 f9f9 	bl	d7b8 <am_hal_debug_error>
            "Hitting ERROR case.");
    }

    if (ui32Status & AM_HAL_IOS_INT_FSIZE)
    c3c6:	9b01      	ldr	r3, [sp, #4]
    c3c8:	f003 0301 	and.w	r3, r3, #1
    c3cc:	2b00      	cmp	r3, #0
    c3ce:	d006      	beq.n	c3de <am_ioslave_ios_isr+0x6a>
    {
        //
        // Service the I2C slave FIFO if necessary.
        //
        am_hal_ios_interrupt_service(g_pIOSHandle, ui32Status);
    c3d0:	4b09      	ldr	r3, [pc, #36]	; (c3f8 <am_ioslave_ios_isr+0x84>)
    c3d2:	681b      	ldr	r3, [r3, #0]
    c3d4:	9a01      	ldr	r2, [sp, #4]
    c3d6:	4611      	mov	r1, r2
    c3d8:	4618      	mov	r0, r3
    c3da:	f001 fd79 	bl	ded0 <am_hal_ios_interrupt_service>
    }

    if (ui32Status & AM_HAL_IOS_INT_XCMPWR)
    c3de:	9b01      	ldr	r3, [sp, #4]
    c3e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
    c3e4:	2b00      	cmp	r3, #0
    c3e6:	d002      	beq.n	c3ee <am_ioslave_ios_isr+0x7a>
    {
        bIomSendComplete = true;
    c3e8:	4b08      	ldr	r3, [pc, #32]	; (c40c <am_ioslave_ios_isr+0x98>)
    c3ea:	2201      	movs	r2, #1
    c3ec:	701a      	strb	r2, [r3, #0]
    }
}
    c3ee:	bf00      	nop
    c3f0:	b003      	add	sp, #12
    c3f2:	f85d fb04 	ldr.w	pc, [sp], #4
    c3f6:	bf00      	nop
    c3f8:	1000106c 	.word	0x1000106c
    c3fc:	0000e634 	.word	0x0000e634
    c400:	0000e66c 	.word	0x0000e66c
    c404:	0000e6a4 	.word	0x0000e6a4
    c408:	0000e6b8 	.word	0x0000e6b8
    c40c:	10001070 	.word	0x10001070

0000c410 <main>:
//
// Main function.
//
//*****************************************************************************
int main(void)
{
    c410:	b500      	push	{lr}
    c412:	b085      	sub	sp, #20
    uint8_t  *pui8Packet;
    uint8_t ui8Tag = 1;
    c414:	2301      	movs	r3, #1
    c416:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8_t ui8Length = 0;
    c41a:	2300      	movs	r3, #0
    c41c:	f88d 300d 	strb.w	r3, [sp, #13]

    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c420:	2100      	movs	r1, #0
    c422:	2000      	movs	r0, #0
    c424:	f001 f90e 	bl	d644 <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c428:	4839      	ldr	r0, [pc, #228]	; (c510 <main+0x100>)
    c42a:	f000 ff63 	bl	d2f4 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c42e:	f000 ff85 	bl	d33c <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    c432:	f001 fff5 	bl	e420 <am_bsp_low_power_init>

    //
    // Enable the ITM print interface.
    //
    am_bsp_itm_printf_enable();
    c436:	f002 f813 	bl	e460 <am_bsp_itm_printf_enable>

    //
    // Clear the terminal and print the banner.
    //
    am_util_stdio_terminal_clear();
    c43a:	f000 ff1b 	bl	d274 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("IOS LRAM Example\n");
    c43e:	4835      	ldr	r0, [pc, #212]	; (c514 <main+0x104>)
    c440:	f000 fef8 	bl	d234 <am_util_stdio_printf>

    //
    // Enable the IOS. Choose the correct protocol based on USE_SPI
    //
    ios_set_up(USE_SPI);
    c444:	2001      	movs	r0, #1
    c446:	f7ff fec5 	bl	c1d4 <ios_set_up>

    //
    // Enable interrupts so we can receive messages from the boot host.
    //
    am_hal_interrupt_master_enable();
    c44a:	f001 fb81 	bl	db50 <am_hal_interrupt_master_enable>
    //
    // Loop forever.
    //
    while(1)
    {
        uint32_t ui32IntStatus = am_hal_interrupt_master_disable();
    c44e:	f001 fb83 	bl	db58 <am_hal_interrupt_master_disable>
    c452:	9002      	str	r0, [sp, #8]
        if (bIomSendComplete)
    c454:	4b30      	ldr	r3, [pc, #192]	; (c518 <main+0x108>)
    c456:	781b      	ldrb	r3, [r3, #0]
    c458:	b2db      	uxtb	r3, r3
    c45a:	2b00      	cmp	r3, #0
    c45c:	d050      	beq.n	c500 <main+0xf0>
        {
            // Enable the interrupts
            am_hal_interrupt_master_set(ui32IntStatus);
    c45e:	9802      	ldr	r0, [sp, #8]
    c460:	f001 fb7e 	bl	db60 <am_hal_interrupt_master_set>
            bIomSendComplete = false;
    c464:	4b2c      	ldr	r3, [pc, #176]	; (c518 <main+0x108>)
    c466:	2200      	movs	r2, #0
    c468:	701a      	strb	r2, [r3, #0]
            pui8Packet = (uint8_t *) am_hal_ios_pui8LRAM;
    c46a:	4b2c      	ldr	r3, [pc, #176]	; (c51c <main+0x10c>)
    c46c:	681b      	ldr	r3, [r3, #0]
    c46e:	9301      	str	r3, [sp, #4]
            if (AM_IOSTEST_CMD_START_DATA == pui8Packet[IOM_DATA_TAG])
    c470:	9b01      	ldr	r3, [sp, #4]
    c472:	781b      	ldrb	r3, [r3, #0]
    c474:	2bfd      	cmp	r3, #253	; 0xfd
    c476:	d106      	bne.n	c486 <main+0x76>
            {
                // Host wants to start data transmit
                // Respond the ACK
                *((uint8_t *) am_hal_ios_pui8LRAM) = AM_IOSTEST_CMD_ACK_DATA;
    c478:	4b28      	ldr	r3, [pc, #160]	; (c51c <main+0x10c>)
    c47a:	681b      	ldr	r3, [r3, #0]
    c47c:	22fe      	movs	r2, #254	; 0xfe
    c47e:	701a      	strb	r2, [r3, #0]
                inform_host();
    c480:	f7ff ff1c 	bl	c2bc <inform_host>
    c484:	e7e3      	b.n	c44e <main+0x3e>
            }
            else if (AM_IOSTEST_CMD_STOP_DATA == pui8Packet[IOM_DATA_TAG])
    c486:	9b01      	ldr	r3, [sp, #4]
    c488:	781b      	ldrb	r3, [r3, #0]
    c48a:	2bff      	cmp	r3, #255	; 0xff
    c48c:	d100      	bne.n	c490 <main+0x80>
            {
                break;
    c48e:	e03e      	b.n	c50e <main+0xfe>
            }
            else if (ui8Tag == pui8Packet[IOM_DATA_TAG])
    c490:	9b01      	ldr	r3, [sp, #4]
    c492:	781b      	ldrb	r3, [r3, #0]
    c494:	f89d 200f 	ldrb.w	r2, [sp, #15]
    c498:	429a      	cmp	r2, r3
    c49a:	d1d8      	bne.n	c44e <main+0x3e>
            {
                ui8Length = pui8Packet[IOM_DATA_LENGTH];
    c49c:	9b01      	ldr	r3, [sp, #4]
    c49e:	785b      	ldrb	r3, [r3, #1]
    c4a0:	f88d 300d 	strb.w	r3, [sp, #13]
                // Init buffer
                g_pIosSendBuf[IOM_DATA_TAG] = ui8Tag;
    c4a4:	4a1e      	ldr	r2, [pc, #120]	; (c520 <main+0x110>)
    c4a6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c4aa:	7013      	strb	r3, [r2, #0]
                g_pIosSendBuf[IOM_DATA_LENGTH] = ui8Length;
    c4ac:	4a1c      	ldr	r2, [pc, #112]	; (c520 <main+0x110>)
    c4ae:	f89d 300d 	ldrb.w	r3, [sp, #13]
    c4b2:	7053      	strb	r3, [r2, #1]
                for (uint8_t i = IOM_DATA_VALUE; i < AM_IOS_LRAM_SIZE_MAX; i++)
    c4b4:	2302      	movs	r3, #2
    c4b6:	f88d 300e 	strb.w	r3, [sp, #14]
    c4ba:	e009      	b.n	c4d0 <main+0xc0>
                {
                    g_pIosSendBuf[i] = INBUFFER_EMPTY;
    c4bc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c4c0:	4a17      	ldr	r2, [pc, #92]	; (c520 <main+0x110>)
    c4c2:	21ee      	movs	r1, #238	; 0xee
    c4c4:	54d1      	strb	r1, [r2, r3]
                for (uint8_t i = IOM_DATA_VALUE; i < AM_IOS_LRAM_SIZE_MAX; i++)
    c4c6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c4ca:	3301      	adds	r3, #1
    c4cc:	f88d 300e 	strb.w	r3, [sp, #14]
    c4d0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c4d4:	2b77      	cmp	r3, #119	; 0x77
    c4d6:	d9f1      	bls.n	c4bc <main+0xac>
                }
                // Read data sent from IOM
                ios_read(0, ui8Length);
    c4d8:	f89d 300d 	ldrb.w	r3, [sp, #13]
    c4dc:	4619      	mov	r1, r3
    c4de:	2000      	movs	r0, #0
    c4e0:	f7ff ff04 	bl	c2ec <ios_read>
                // Reply data to IOM
                ios_send(0, ui8Length);
    c4e4:	f89d 300d 	ldrb.w	r3, [sp, #13]
    c4e8:	4619      	mov	r1, r3
    c4ea:	2000      	movs	r0, #0
    c4ec:	f7ff ff26 	bl	c33c <ios_send>
                ui8Tag++;
    c4f0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c4f4:	3301      	adds	r3, #1
    c4f6:	f88d 300f 	strb.w	r3, [sp, #15]
                // Notify the host
                inform_host();
    c4fa:	f7ff fedf 	bl	c2bc <inform_host>
    c4fe:	e7a6      	b.n	c44e <main+0x3e>
        else
        {
            //
            // Go to Deep Sleep.
            //
            am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_NORMAL);
    c500:	2000      	movs	r0, #0
    c502:	f001 ff55 	bl	e3b0 <am_hal_sysctrl_sleep>
            // Enable the interrupts
            am_hal_interrupt_master_set(ui32IntStatus);
    c506:	9802      	ldr	r0, [sp, #8]
    c508:	f001 fb2a 	bl	db60 <am_hal_interrupt_master_set>
    {
    c50c:	e79f      	b.n	c44e <main+0x3e>
        }
    }

    while(1);
    c50e:	e7fe      	b.n	c50e <main+0xfe>
    c510:	0000e6f8 	.word	0x0000e6f8
    c514:	0000e6cc 	.word	0x0000e6cc
    c518:	10001070 	.word	0x10001070
    c51c:	0000e868 	.word	0x0000e868
    c520:	10001074 	.word	0x10001074

0000c524 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    c524:	b082      	sub	sp, #8
    c526:	9001      	str	r0, [sp, #4]
    g_pfnCharPrint = pfnCharPrint;
    c528:	4a02      	ldr	r2, [pc, #8]	; (c534 <am_util_stdio_printf_init+0x10>)
    c52a:	9b01      	ldr	r3, [sp, #4]
    c52c:	6013      	str	r3, [r2, #0]
}
    c52e:	bf00      	nop
    c530:	b002      	add	sp, #8
    c532:	4770      	bx	lr
    c534:	100010ec 	.word	0x100010ec

0000c538 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c538:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c53c:	b098      	sub	sp, #96	; 0x60
    c53e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c542:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c546:	f04f 0000 	mov.w	r0, #0
    c54a:	f04f 0100 	mov.w	r1, #0
    c54e:	0018      	movs	r0, r3
    c550:	2100      	movs	r1, #0
    c552:	ea50 0301 	orrs.w	r3, r0, r1
    c556:	f000 80b0 	beq.w	c6ba <divu64_10+0x182>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c55a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c55e:	f04f 0400 	mov.w	r4, #0
    c562:	f04f 0500 	mov.w	r5, #0
    c566:	0854      	lsrs	r4, r2, #1
    c568:	ea44 74c3 	orr.w	r4, r4, r3, lsl #31
    c56c:	085d      	lsrs	r5, r3, #1
    c56e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c572:	f04f 0000 	mov.w	r0, #0
    c576:	f04f 0100 	mov.w	r1, #0
    c57a:	0890      	lsrs	r0, r2, #2
    c57c:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
    c580:	0899      	lsrs	r1, r3, #2
    c582:	eb14 0a00 	adds.w	sl, r4, r0
    c586:	eb45 0b01 	adc.w	fp, r5, r1
    c58a:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
        q64 += (q64 >> 4);
    c58e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c592:	f04f 0000 	mov.w	r0, #0
    c596:	f04f 0100 	mov.w	r1, #0
    c59a:	0910      	lsrs	r0, r2, #4
    c59c:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
    c5a0:	0919      	lsrs	r1, r3, #4
    c5a2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c5a6:	1814      	adds	r4, r2, r0
    c5a8:	9402      	str	r4, [sp, #8]
    c5aa:	414b      	adcs	r3, r1
    c5ac:	9303      	str	r3, [sp, #12]
    c5ae:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    c5b2:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 8);
    c5b6:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c5ba:	f04f 0000 	mov.w	r0, #0
    c5be:	f04f 0100 	mov.w	r1, #0
    c5c2:	0a10      	lsrs	r0, r2, #8
    c5c4:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
    c5c8:	0a19      	lsrs	r1, r3, #8
    c5ca:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c5ce:	1814      	adds	r4, r2, r0
    c5d0:	9404      	str	r4, [sp, #16]
    c5d2:	414b      	adcs	r3, r1
    c5d4:	9305      	str	r3, [sp, #20]
    c5d6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    c5da:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 16);
    c5de:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c5e2:	f04f 0000 	mov.w	r0, #0
    c5e6:	f04f 0100 	mov.w	r1, #0
    c5ea:	0c10      	lsrs	r0, r2, #16
    c5ec:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    c5f0:	0c19      	lsrs	r1, r3, #16
    c5f2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c5f6:	1814      	adds	r4, r2, r0
    c5f8:	9406      	str	r4, [sp, #24]
    c5fa:	414b      	adcs	r3, r1
    c5fc:	9307      	str	r3, [sp, #28]
    c5fe:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
    c602:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 32);
    c606:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c60a:	f04f 0000 	mov.w	r0, #0
    c60e:	f04f 0100 	mov.w	r1, #0
    c612:	0018      	movs	r0, r3
    c614:	2100      	movs	r1, #0
    c616:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c61a:	1814      	adds	r4, r2, r0
    c61c:	9408      	str	r4, [sp, #32]
    c61e:	414b      	adcs	r3, r1
    c620:	9309      	str	r3, [sp, #36]	; 0x24
    c622:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
    c626:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 >>= 3;
    c62a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    c62e:	f04f 0200 	mov.w	r2, #0
    c632:	f04f 0300 	mov.w	r3, #0
    c636:	08c2      	lsrs	r2, r0, #3
    c638:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    c63c:	08cb      	lsrs	r3, r1, #3
    c63e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
        r64 = ui64Val - q64*10;
    c642:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
    c646:	4622      	mov	r2, r4
    c648:	462b      	mov	r3, r5
    c64a:	f04f 0000 	mov.w	r0, #0
    c64e:	f04f 0100 	mov.w	r1, #0
    c652:	0099      	lsls	r1, r3, #2
    c654:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
    c658:	0090      	lsls	r0, r2, #2
    c65a:	4602      	mov	r2, r0
    c65c:	460b      	mov	r3, r1
    c65e:	1916      	adds	r6, r2, r4
    c660:	eb43 0705 	adc.w	r7, r3, r5
    c664:	19b3      	adds	r3, r6, r6
    c666:	930a      	str	r3, [sp, #40]	; 0x28
    c668:	eb47 0307 	adc.w	r3, r7, r7
    c66c:	930b      	str	r3, [sp, #44]	; 0x2c
    c66e:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    c672:	4630      	mov	r0, r6
    c674:	4639      	mov	r1, r7
    c676:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c67a:	1a14      	subs	r4, r2, r0
    c67c:	940c      	str	r4, [sp, #48]	; 0x30
    c67e:	eb63 0301 	sbc.w	r3, r3, r1
    c682:	930d      	str	r3, [sp, #52]	; 0x34
    c684:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    c688:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
        return q64 + ((r64 + 6) >> 4);
    c68c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    c690:	f112 0806 	adds.w	r8, r2, #6
    c694:	f143 0900 	adc.w	r9, r3, #0
    c698:	f04f 0200 	mov.w	r2, #0
    c69c:	f04f 0300 	mov.w	r3, #0
    c6a0:	ea4f 1218 	mov.w	r2, r8, lsr #4
    c6a4:	ea42 7209 	orr.w	r2, r2, r9, lsl #28
    c6a8:	ea4f 1319 	mov.w	r3, r9, lsr #4
    c6ac:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    c6b0:	1814      	adds	r4, r2, r0
    c6b2:	9400      	str	r4, [sp, #0]
    c6b4:	414b      	adcs	r3, r1
    c6b6:	9301      	str	r3, [sp, #4]
    c6b8:	e02a      	b.n	c710 <divu64_10+0x1d8>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    c6ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c6bc:	9317      	str	r3, [sp, #92]	; 0x5c
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c6be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c6c0:	085a      	lsrs	r2, r3, #1
    c6c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c6c4:	089b      	lsrs	r3, r3, #2
    c6c6:	4413      	add	r3, r2
    c6c8:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 4);
    c6ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c6cc:	091b      	lsrs	r3, r3, #4
    c6ce:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c6d0:	4413      	add	r3, r2
    c6d2:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 8);
    c6d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c6d6:	0a1b      	lsrs	r3, r3, #8
    c6d8:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c6da:	4413      	add	r3, r2
    c6dc:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 16);
    c6de:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c6e0:	0c1b      	lsrs	r3, r3, #16
    c6e2:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c6e4:	4413      	add	r3, r2
    c6e6:	9316      	str	r3, [sp, #88]	; 0x58
        q32 >>= 3;
    c6e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c6ea:	08db      	lsrs	r3, r3, #3
    c6ec:	9316      	str	r3, [sp, #88]	; 0x58
        r32 = ui32Val - q32*10;
    c6ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c6f0:	4613      	mov	r3, r2
    c6f2:	009b      	lsls	r3, r3, #2
    c6f4:	4413      	add	r3, r2
    c6f6:	005b      	lsls	r3, r3, #1
    c6f8:	461a      	mov	r2, r3
    c6fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c6fc:	1a9b      	subs	r3, r3, r2
    c6fe:	9315      	str	r3, [sp, #84]	; 0x54
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c700:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c702:	3306      	adds	r3, #6
    c704:	091a      	lsrs	r2, r3, #4
    c706:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c708:	4413      	add	r3, r2
    c70a:	2200      	movs	r2, #0
    c70c:	9300      	str	r3, [sp, #0]
    c70e:	9201      	str	r2, [sp, #4]
    }
}
    c710:	e9dd 2300 	ldrd	r2, r3, [sp]
    c714:	4610      	mov	r0, r2
    c716:	4619      	mov	r1, r3
    c718:	b018      	add	sp, #96	; 0x60
    c71a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c71e:	4770      	bx	lr

0000c720 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    c720:	b500      	push	{lr}
    c722:	b085      	sub	sp, #20
    c724:	e9cd 0100 	strd	r0, r1, [sp]
    int iNDigits = ui64Val ? 0 : 1;
    c728:	9a00      	ldr	r2, [sp, #0]
    c72a:	9b01      	ldr	r3, [sp, #4]
    c72c:	4313      	orrs	r3, r2
    c72e:	2b00      	cmp	r3, #0
    c730:	bf0c      	ite	eq
    c732:	2301      	moveq	r3, #1
    c734:	2300      	movne	r3, #0
    c736:	b2db      	uxtb	r3, r3
    c738:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    c73a:	e008      	b.n	c74e <ndigits_in_u64+0x2e>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    c73c:	e9dd 0100 	ldrd	r0, r1, [sp]
    c740:	f7ff fefa 	bl	c538 <divu64_10>
    c744:	e9cd 0100 	strd	r0, r1, [sp]
        ++iNDigits;
    c748:	9b03      	ldr	r3, [sp, #12]
    c74a:	3301      	adds	r3, #1
    c74c:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    c74e:	e9dd 2300 	ldrd	r2, r3, [sp]
    c752:	4313      	orrs	r3, r2
    c754:	d1f2      	bne.n	c73c <ndigits_in_u64+0x1c>
    }

    return iNDigits;
    c756:	9b03      	ldr	r3, [sp, #12]
}
    c758:	4618      	mov	r0, r3
    c75a:	b005      	add	sp, #20
    c75c:	f85d fb04 	ldr.w	pc, [sp], #4

0000c760 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    c760:	b530      	push	{r4, r5, lr}
    c762:	b083      	sub	sp, #12
    c764:	e9cd 0100 	strd	r0, r1, [sp]
    if ( i64Val < 0 )
    c768:	e9dd 2300 	ldrd	r2, r3, [sp]
    c76c:	2b00      	cmp	r3, #0
    c76e:	da07      	bge.n	c780 <ndigits_in_i64+0x20>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    c770:	e9dd 2300 	ldrd	r2, r3, [sp]
    c774:	2100      	movs	r1, #0
    c776:	4254      	negs	r4, r2
    c778:	eb61 0503 	sbc.w	r5, r1, r3
    c77c:	e9cd 4500 	strd	r4, r5, [sp]
    }

    return ndigits_in_u64((uint64_t) i64Val);
    c780:	e9dd 2300 	ldrd	r2, r3, [sp]
    c784:	4610      	mov	r0, r2
    c786:	4619      	mov	r1, r3
    c788:	f7ff ffca 	bl	c720 <ndigits_in_u64>
    c78c:	4603      	mov	r3, r0
}
    c78e:	4618      	mov	r0, r3
    c790:	b003      	add	sp, #12
    c792:	bd30      	pop	{r4, r5, pc}

0000c794 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    c794:	b084      	sub	sp, #16
    c796:	e9cd 0100 	strd	r0, r1, [sp]
    int iDigits = ui64Val ? 0 : 1;
    c79a:	9a00      	ldr	r2, [sp, #0]
    c79c:	9b01      	ldr	r3, [sp, #4]
    c79e:	4313      	orrs	r3, r2
    c7a0:	2b00      	cmp	r3, #0
    c7a2:	bf0c      	ite	eq
    c7a4:	2301      	moveq	r3, #1
    c7a6:	2300      	movne	r3, #0
    c7a8:	b2db      	uxtb	r3, r3
    c7aa:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    c7ac:	e00e      	b.n	c7cc <ndigits_in_hex+0x38>
    {
        ui64Val >>= 4;
    c7ae:	e9dd 0100 	ldrd	r0, r1, [sp]
    c7b2:	f04f 0200 	mov.w	r2, #0
    c7b6:	f04f 0300 	mov.w	r3, #0
    c7ba:	0902      	lsrs	r2, r0, #4
    c7bc:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    c7c0:	090b      	lsrs	r3, r1, #4
    c7c2:	e9cd 2300 	strd	r2, r3, [sp]
        ++iDigits;
    c7c6:	9b03      	ldr	r3, [sp, #12]
    c7c8:	3301      	adds	r3, #1
    c7ca:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    c7cc:	e9dd 2300 	ldrd	r2, r3, [sp]
    c7d0:	4313      	orrs	r3, r2
    c7d2:	d1ec      	bne.n	c7ae <ndigits_in_hex+0x1a>
    }

    return iDigits;
    c7d4:	9b03      	ldr	r3, [sp, #12]
}
    c7d6:	4618      	mov	r0, r3
    c7d8:	b004      	add	sp, #16
    c7da:	4770      	bx	lr

0000c7dc <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    c7dc:	b086      	sub	sp, #24
    c7de:	9001      	str	r0, [sp, #4]
    c7e0:	9100      	str	r1, [sp, #0]
    bool bNeg = false;
    c7e2:	2300      	movs	r3, #0
    c7e4:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    c7e8:	2300      	movs	r3, #0
    c7ea:	9304      	str	r3, [sp, #16]
    c7ec:	2300      	movs	r3, #0
    c7ee:	9303      	str	r3, [sp, #12]

    if ( *pcStr == '-')
    c7f0:	9b01      	ldr	r3, [sp, #4]
    c7f2:	781b      	ldrb	r3, [r3, #0]
    c7f4:	2b2d      	cmp	r3, #45	; 0x2d
    c7f6:	d11c      	bne.n	c832 <decstr_to_int+0x56>
    {
        bNeg = true;
    c7f8:	2301      	movs	r3, #1
    c7fa:	f88d 3017 	strb.w	r3, [sp, #23]
        pcStr++;
    c7fe:	9b01      	ldr	r3, [sp, #4]
    c800:	3301      	adds	r3, #1
    c802:	9301      	str	r3, [sp, #4]
        uCnt++;
    c804:	9b03      	ldr	r3, [sp, #12]
    c806:	3301      	adds	r3, #1
    c808:	9303      	str	r3, [sp, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c80a:	e012      	b.n	c832 <decstr_to_int+0x56>
    {
        ++uCnt;
    c80c:	9b03      	ldr	r3, [sp, #12]
    c80e:	3301      	adds	r3, #1
    c810:	9303      	str	r3, [sp, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    c812:	9a04      	ldr	r2, [sp, #16]
    c814:	4613      	mov	r3, r2
    c816:	009b      	lsls	r3, r3, #2
    c818:	4413      	add	r3, r2
    c81a:	005b      	lsls	r3, r3, #1
    c81c:	9304      	str	r3, [sp, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    c81e:	9b01      	ldr	r3, [sp, #4]
    c820:	781b      	ldrb	r3, [r3, #0]
    c822:	461a      	mov	r2, r3
    c824:	9b04      	ldr	r3, [sp, #16]
    c826:	4413      	add	r3, r2
    c828:	3b30      	subs	r3, #48	; 0x30
    c82a:	9304      	str	r3, [sp, #16]
        pcStr++;
    c82c:	9b01      	ldr	r3, [sp, #4]
    c82e:	3301      	adds	r3, #1
    c830:	9301      	str	r3, [sp, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c832:	9b01      	ldr	r3, [sp, #4]
    c834:	781b      	ldrb	r3, [r3, #0]
    c836:	2b2f      	cmp	r3, #47	; 0x2f
    c838:	d903      	bls.n	c842 <decstr_to_int+0x66>
    c83a:	9b01      	ldr	r3, [sp, #4]
    c83c:	781b      	ldrb	r3, [r3, #0]
    c83e:	2b39      	cmp	r3, #57	; 0x39
    c840:	d9e4      	bls.n	c80c <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    c842:	9b00      	ldr	r3, [sp, #0]
    c844:	2b00      	cmp	r3, #0
    c846:	d002      	beq.n	c84e <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    c848:	9b00      	ldr	r3, [sp, #0]
    c84a:	9a03      	ldr	r2, [sp, #12]
    c84c:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    c84e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c852:	2b00      	cmp	r3, #0
    c854:	d002      	beq.n	c85c <decstr_to_int+0x80>
    c856:	9b04      	ldr	r3, [sp, #16]
    c858:	425b      	negs	r3, r3
    c85a:	e000      	b.n	c85e <decstr_to_int+0x82>
    c85c:	9b04      	ldr	r3, [sp, #16]
}
    c85e:	4618      	mov	r0, r3
    c860:	b006      	add	sp, #24
    c862:	4770      	bx	lr

0000c864 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c864:	b500      	push	{lr}
    c866:	b091      	sub	sp, #68	; 0x44
    c868:	e9cd 0102 	strd	r0, r1, [sp, #8]
    c86c:	9201      	str	r2, [sp, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    c86e:	2300      	movs	r3, #0
    c870:	930f      	str	r3, [sp, #60]	; 0x3c
    c872:	2300      	movs	r3, #0
    c874:	930e      	str	r3, [sp, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    c876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c87a:	f7ff fe5d 	bl	c538 <divu64_10>
    c87e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    c882:	9902      	ldr	r1, [sp, #8]
    c884:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c886:	4613      	mov	r3, r2
    c888:	009b      	lsls	r3, r3, #2
    c88a:	4413      	add	r3, r2
    c88c:	005b      	lsls	r3, r3, #1
    c88e:	1acb      	subs	r3, r1, r3
    c890:	930b      	str	r3, [sp, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    c892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c894:	b2da      	uxtb	r2, r3
    c896:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c898:	1c59      	adds	r1, r3, #1
    c89a:	910f      	str	r1, [sp, #60]	; 0x3c
    c89c:	3230      	adds	r2, #48	; 0x30
    c89e:	b2d2      	uxtb	r2, r2
    c8a0:	3340      	adds	r3, #64	; 0x40
    c8a2:	446b      	add	r3, sp
    c8a4:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    c8a8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    c8ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
    } while ( ui64Val );
    c8b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c8b4:	4313      	orrs	r3, r2
    c8b6:	d1de      	bne.n	c876 <uint64_to_str+0x12>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    c8b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c8ba:	930e      	str	r3, [sp, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c8bc:	9b01      	ldr	r3, [sp, #4]
    c8be:	2b00      	cmp	r3, #0
    c8c0:	d010      	beq.n	c8e4 <uint64_to_str+0x80>
    {
        while ( ix-- )
    c8c2:	e007      	b.n	c8d4 <uint64_to_str+0x70>
        {
            *pcBuf++ = tbuf[ix];
    c8c4:	9b01      	ldr	r3, [sp, #4]
    c8c6:	1c5a      	adds	r2, r3, #1
    c8c8:	9201      	str	r2, [sp, #4]
    c8ca:	a904      	add	r1, sp, #16
    c8cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    c8ce:	440a      	add	r2, r1
    c8d0:	7812      	ldrb	r2, [r2, #0]
    c8d2:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    c8d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c8d6:	1e5a      	subs	r2, r3, #1
    c8d8:	920f      	str	r2, [sp, #60]	; 0x3c
    c8da:	2b00      	cmp	r3, #0
    c8dc:	d1f2      	bne.n	c8c4 <uint64_to_str+0x60>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    c8de:	9b01      	ldr	r3, [sp, #4]
    c8e0:	2200      	movs	r2, #0
    c8e2:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    c8e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
}
    c8e6:	4618      	mov	r0, r3
    c8e8:	b011      	add	sp, #68	; 0x44
    c8ea:	f85d fb04 	ldr.w	pc, [sp], #4

0000c8ee <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    c8ee:	b08c      	sub	sp, #48	; 0x30
    c8f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
    c8f4:	9201      	str	r2, [sp, #4]
    c8f6:	f88d 3003 	strb.w	r3, [sp, #3]
    int iNumDig, ix = 0;
    c8fa:	2300      	movs	r3, #0
    c8fc:	930b      	str	r3, [sp, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    c8fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c902:	4313      	orrs	r3, r2
    c904:	d135      	bne.n	c972 <uint64_to_hexstr+0x84>
    {
        tbuf[ix++] = '0';   // Print a '0'
    c906:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c908:	1c5a      	adds	r2, r3, #1
    c90a:	920b      	str	r2, [sp, #44]	; 0x2c
    c90c:	3330      	adds	r3, #48	; 0x30
    c90e:	446b      	add	r3, sp
    c910:	2230      	movs	r2, #48	; 0x30
    c912:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    c916:	e02c      	b.n	c972 <uint64_to_hexstr+0x84>
    {
        cCh = ui64Val & 0xf;
    c918:	f89d 3008 	ldrb.w	r3, [sp, #8]
    c91c:	f003 030f 	and.w	r3, r3, #15
    c920:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    c924:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    c928:	2b09      	cmp	r3, #9
    c92a:	d90b      	bls.n	c944 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    c92c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c930:	2b00      	cmp	r3, #0
    c932:	d001      	beq.n	c938 <uint64_to_hexstr+0x4a>
    c934:	2227      	movs	r2, #39	; 0x27
    c936:	e000      	b.n	c93a <uint64_to_hexstr+0x4c>
    c938:	2207      	movs	r2, #7
    c93a:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    c93e:	4413      	add	r3, r2
    c940:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    c944:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c946:	1c5a      	adds	r2, r3, #1
    c948:	920b      	str	r2, [sp, #44]	; 0x2c
    c94a:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    c94e:	3230      	adds	r2, #48	; 0x30
    c950:	b2d2      	uxtb	r2, r2
    c952:	3330      	adds	r3, #48	; 0x30
    c954:	446b      	add	r3, sp
    c956:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    c95a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c95e:	f04f 0200 	mov.w	r2, #0
    c962:	f04f 0300 	mov.w	r3, #0
    c966:	0902      	lsrs	r2, r0, #4
    c968:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    c96c:	090b      	lsrs	r3, r1, #4
    c96e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    while ( ui64Val )
    c972:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c976:	4313      	orrs	r3, r2
    c978:	d1ce      	bne.n	c918 <uint64_to_hexstr+0x2a>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    c97a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c97c:	9309      	str	r3, [sp, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    c97e:	9b01      	ldr	r3, [sp, #4]
    c980:	2b00      	cmp	r3, #0
    c982:	d010      	beq.n	c9a6 <uint64_to_hexstr+0xb8>
    {
        while (ix--)
    c984:	e007      	b.n	c996 <uint64_to_hexstr+0xa8>
        {
            *pcBuf++ = tbuf[ix];
    c986:	9b01      	ldr	r3, [sp, #4]
    c988:	1c5a      	adds	r2, r3, #1
    c98a:	9201      	str	r2, [sp, #4]
    c98c:	a904      	add	r1, sp, #16
    c98e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c990:	440a      	add	r2, r1
    c992:	7812      	ldrb	r2, [r2, #0]
    c994:	701a      	strb	r2, [r3, #0]
        while (ix--)
    c996:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c998:	1e5a      	subs	r2, r3, #1
    c99a:	920b      	str	r2, [sp, #44]	; 0x2c
    c99c:	2b00      	cmp	r3, #0
    c99e:	d1f2      	bne.n	c986 <uint64_to_hexstr+0x98>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    c9a0:	9b01      	ldr	r3, [sp, #4]
    c9a2:	2200      	movs	r2, #0
    c9a4:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    c9a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    c9a8:	4618      	mov	r0, r3
    c9aa:	b00c      	add	sp, #48	; 0x30
    c9ac:	4770      	bx	lr

0000c9ae <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    c9ae:	b084      	sub	sp, #16
    c9b0:	9001      	str	r0, [sp, #4]
    uint32_t ui32RetVal = 0;
    c9b2:	2300      	movs	r3, #0
    c9b4:	9303      	str	r3, [sp, #12]
    if ( !pcBuf )
    c9b6:	9b01      	ldr	r3, [sp, #4]
    c9b8:	2b00      	cmp	r3, #0
    c9ba:	d104      	bne.n	c9c6 <simple_strlen+0x18>
    {
        return ui32RetVal;
    c9bc:	9b03      	ldr	r3, [sp, #12]
    c9be:	e009      	b.n	c9d4 <simple_strlen+0x26>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    c9c0:	9b03      	ldr	r3, [sp, #12]
    c9c2:	3301      	adds	r3, #1
    c9c4:	9303      	str	r3, [sp, #12]
    while ( *pcBuf++ )
    c9c6:	9b01      	ldr	r3, [sp, #4]
    c9c8:	1c5a      	adds	r2, r3, #1
    c9ca:	9201      	str	r2, [sp, #4]
    c9cc:	781b      	ldrb	r3, [r3, #0]
    c9ce:	2b00      	cmp	r3, #0
    c9d0:	d1f6      	bne.n	c9c0 <simple_strlen+0x12>
    }
    return ui32RetVal;
    c9d2:	9b03      	ldr	r3, [sp, #12]
}
    c9d4:	4618      	mov	r0, r3
    c9d6:	b004      	add	sp, #16
    c9d8:	4770      	bx	lr

0000c9da <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    c9da:	b086      	sub	sp, #24
    c9dc:	9003      	str	r0, [sp, #12]
    c9de:	460b      	mov	r3, r1
    c9e0:	9201      	str	r2, [sp, #4]
    c9e2:	f88d 300b 	strb.w	r3, [sp, #11]
    int32_t i32Cnt = 0;
    c9e6:	2300      	movs	r3, #0
    c9e8:	9305      	str	r3, [sp, #20]

    if ( i32NumChars <= 0 )
    c9ea:	9b01      	ldr	r3, [sp, #4]
    c9ec:	2b00      	cmp	r3, #0
    c9ee:	dc0d      	bgt.n	ca0c <padbuffer+0x32>
    {
        return i32Cnt;
    c9f0:	9b05      	ldr	r3, [sp, #20]
    c9f2:	e011      	b.n	ca18 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    c9f4:	9b03      	ldr	r3, [sp, #12]
    c9f6:	2b00      	cmp	r3, #0
    c9f8:	d005      	beq.n	ca06 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    c9fa:	9b03      	ldr	r3, [sp, #12]
    c9fc:	1c5a      	adds	r2, r3, #1
    c9fe:	9203      	str	r2, [sp, #12]
    ca00:	f89d 200b 	ldrb.w	r2, [sp, #11]
    ca04:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    ca06:	9b05      	ldr	r3, [sp, #20]
    ca08:	3301      	adds	r3, #1
    ca0a:	9305      	str	r3, [sp, #20]
    while ( i32NumChars-- )
    ca0c:	9b01      	ldr	r3, [sp, #4]
    ca0e:	1e5a      	subs	r2, r3, #1
    ca10:	9201      	str	r2, [sp, #4]
    ca12:	2b00      	cmp	r3, #0
    ca14:	d1ee      	bne.n	c9f4 <padbuffer+0x1a>
    }

    return i32Cnt;
    ca16:	9b05      	ldr	r3, [sp, #20]
}
    ca18:	4618      	mov	r0, r3
    ca1a:	b006      	add	sp, #24
    ca1c:	4770      	bx	lr
	...

0000ca20 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    ca20:	b5f0      	push	{r4, r5, r6, r7, lr}
    ca22:	b08f      	sub	sp, #60	; 0x3c
    ca24:	ed8d 0a03 	vstr	s0, [sp, #12]
    ca28:	9002      	str	r0, [sp, #8]
    ca2a:	9101      	str	r1, [sp, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    ca2c:	9b02      	ldr	r3, [sp, #8]
    ca2e:	681b      	ldr	r3, [r3, #0]
    ca30:	9309      	str	r3, [sp, #36]	; 0x24
    if (iBufSize < 4)
    ca32:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ca34:	2b03      	cmp	r3, #3
    ca36:	dc02      	bgt.n	ca3e <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    ca38:	f06f 0302 	mvn.w	r3, #2
    ca3c:	e0e9      	b.n	cc12 <ftoa+0x1f2>
    }

    if (fValue == 0.0f)
    ca3e:	eddd 7a03 	vldr	s15, [sp, #12]
    ca42:	eef5 7a40 	vcmp.f32	s15, #0.0
    ca46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ca4a:	d104      	bne.n	ca56 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    ca4c:	9b02      	ldr	r3, [sp, #8]
    ca4e:	4a72      	ldr	r2, [pc, #456]	; (cc18 <ftoa+0x1f8>)
    ca50:	601a      	str	r2, [r3, #0]
        return 3;
    ca52:	2303      	movs	r3, #3
    ca54:	e0dd      	b.n	cc12 <ftoa+0x1f2>
    }

    pcBufInitial = pcBuf;
    ca56:	9b02      	ldr	r3, [sp, #8]
    ca58:	9308      	str	r3, [sp, #32]

    unFloatValue.F = fValue;
    ca5a:	9b03      	ldr	r3, [sp, #12]
    ca5c:	9304      	str	r3, [sp, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    ca5e:	9b04      	ldr	r3, [sp, #16]
    ca60:	15db      	asrs	r3, r3, #23
    ca62:	b2db      	uxtb	r3, r3
    ca64:	3b7f      	subs	r3, #127	; 0x7f
    ca66:	9307      	str	r3, [sp, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    ca68:	9b04      	ldr	r3, [sp, #16]
    ca6a:	f3c3 0316 	ubfx	r3, r3, #0, #23
    ca6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    ca72:	9306      	str	r3, [sp, #24]
    i32FracPart = 0;
    ca74:	2300      	movs	r3, #0
    ca76:	930c      	str	r3, [sp, #48]	; 0x30
    i32IntPart = 0;
    ca78:	2300      	movs	r3, #0
    ca7a:	930d      	str	r3, [sp, #52]	; 0x34

    if (iExp2 >= 31)
    ca7c:	9b07      	ldr	r3, [sp, #28]
    ca7e:	2b1e      	cmp	r3, #30
    ca80:	dd02      	ble.n	ca88 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    ca82:	f06f 0301 	mvn.w	r3, #1
    ca86:	e0c4      	b.n	cc12 <ftoa+0x1f2>
    }
    else if (iExp2 < -23)
    ca88:	9b07      	ldr	r3, [sp, #28]
    ca8a:	f113 0f17 	cmn.w	r3, #23
    ca8e:	da02      	bge.n	ca96 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    ca90:	f04f 33ff 	mov.w	r3, #4294967295
    ca94:	e0bd      	b.n	cc12 <ftoa+0x1f2>
    }
    else if (iExp2 >= 23)
    ca96:	9b07      	ldr	r3, [sp, #28]
    ca98:	2b16      	cmp	r3, #22
    ca9a:	dd06      	ble.n	caaa <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    ca9c:	9b07      	ldr	r3, [sp, #28]
    ca9e:	3b17      	subs	r3, #23
    caa0:	9a06      	ldr	r2, [sp, #24]
    caa2:	fa02 f303 	lsl.w	r3, r2, r3
    caa6:	930d      	str	r3, [sp, #52]	; 0x34
    caa8:	e01a      	b.n	cae0 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    caaa:	9b07      	ldr	r3, [sp, #28]
    caac:	2b00      	cmp	r3, #0
    caae:	db0f      	blt.n	cad0 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    cab0:	9b07      	ldr	r3, [sp, #28]
    cab2:	f1c3 0317 	rsb	r3, r3, #23
    cab6:	9a06      	ldr	r2, [sp, #24]
    cab8:	fa42 f303 	asr.w	r3, r2, r3
    cabc:	930d      	str	r3, [sp, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    cabe:	9b07      	ldr	r3, [sp, #28]
    cac0:	3301      	adds	r3, #1
    cac2:	9a06      	ldr	r2, [sp, #24]
    cac4:	fa02 f303 	lsl.w	r3, r2, r3
    cac8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cacc:	930c      	str	r3, [sp, #48]	; 0x30
    cace:	e007      	b.n	cae0 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    cad0:	9b06      	ldr	r3, [sp, #24]
    cad2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    cad6:	9b07      	ldr	r3, [sp, #28]
    cad8:	43db      	mvns	r3, r3
    cada:	fa42 f303 	asr.w	r3, r2, r3
    cade:	930c      	str	r3, [sp, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    cae0:	9b04      	ldr	r3, [sp, #16]
    cae2:	2b00      	cmp	r3, #0
    cae4:	da04      	bge.n	caf0 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    cae6:	9b02      	ldr	r3, [sp, #8]
    cae8:	1c5a      	adds	r2, r3, #1
    caea:	9202      	str	r2, [sp, #8]
    caec:	222d      	movs	r2, #45	; 0x2d
    caee:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    caf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    caf2:	2b00      	cmp	r3, #0
    caf4:	d105      	bne.n	cb02 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    caf6:	9b02      	ldr	r3, [sp, #8]
    caf8:	1c5a      	adds	r2, r3, #1
    cafa:	9202      	str	r2, [sp, #8]
    cafc:	2230      	movs	r2, #48	; 0x30
    cafe:	701a      	strb	r2, [r3, #0]
    cb00:	e023      	b.n	cb4a <ftoa+0x12a>
    }
    else
    {
        if (i32IntPart > 0)
    cb02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cb04:	2b00      	cmp	r3, #0
    cb06:	dd09      	ble.n	cb1c <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
    cb08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cb0a:	17da      	asrs	r2, r3, #31
    cb0c:	461e      	mov	r6, r3
    cb0e:	4617      	mov	r7, r2
    cb10:	9a02      	ldr	r2, [sp, #8]
    cb12:	4630      	mov	r0, r6
    cb14:	4639      	mov	r1, r7
    cb16:	f7ff fea5 	bl	c864 <uint64_to_str>
    cb1a:	e012      	b.n	cb42 <ftoa+0x122>
        }
        else
        {
            *pcBuf++ = '-';
    cb1c:	9b02      	ldr	r3, [sp, #8]
    cb1e:	1c5a      	adds	r2, r3, #1
    cb20:	9202      	str	r2, [sp, #8]
    cb22:	222d      	movs	r2, #45	; 0x2d
    cb24:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    cb26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cb28:	425b      	negs	r3, r3
    cb2a:	17da      	asrs	r2, r3, #31
    cb2c:	461c      	mov	r4, r3
    cb2e:	4615      	mov	r5, r2
    cb30:	9a02      	ldr	r2, [sp, #8]
    cb32:	4620      	mov	r0, r4
    cb34:	4629      	mov	r1, r5
    cb36:	f7ff fe95 	bl	c864 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    cb3a:	e002      	b.n	cb42 <ftoa+0x122>
        {
            pcBuf++;
    cb3c:	9b02      	ldr	r3, [sp, #8]
    cb3e:	3301      	adds	r3, #1
    cb40:	9302      	str	r3, [sp, #8]
        while (*pcBuf)    // Get to end of new string
    cb42:	9b02      	ldr	r3, [sp, #8]
    cb44:	781b      	ldrb	r3, [r3, #0]
    cb46:	2b00      	cmp	r3, #0
    cb48:	d1f8      	bne.n	cb3c <ftoa+0x11c>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    cb4a:	9b02      	ldr	r3, [sp, #8]
    cb4c:	1c5a      	adds	r2, r3, #1
    cb4e:	9202      	str	r2, [sp, #8]
    cb50:	222e      	movs	r2, #46	; 0x2e
    cb52:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    cb54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cb56:	2b00      	cmp	r3, #0
    cb58:	d105      	bne.n	cb66 <ftoa+0x146>
    {
        *pcBuf++ = '0';
    cb5a:	9b02      	ldr	r3, [sp, #8]
    cb5c:	1c5a      	adds	r2, r3, #1
    cb5e:	9202      	str	r2, [sp, #8]
    cb60:	2230      	movs	r2, #48	; 0x30
    cb62:	701a      	strb	r2, [r3, #0]
    cb64:	e04f      	b.n	cc06 <ftoa+0x1e6>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    cb66:	9a02      	ldr	r2, [sp, #8]
    cb68:	9b08      	ldr	r3, [sp, #32]
    cb6a:	1ad3      	subs	r3, r2, r3
    cb6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    cb6e:	1ad3      	subs	r3, r2, r3
    cb70:	3b01      	subs	r3, #1
    cb72:	9305      	str	r3, [sp, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    cb74:	9a05      	ldr	r2, [sp, #20]
    cb76:	9b01      	ldr	r3, [sp, #4]
    cb78:	4293      	cmp	r3, r2
    cb7a:	bfa8      	it	ge
    cb7c:	4613      	movge	r3, r2
    cb7e:	9305      	str	r3, [sp, #20]

        for (jx = 0; jx < iMax; jx++)
    cb80:	2300      	movs	r3, #0
    cb82:	930a      	str	r3, [sp, #40]	; 0x28
    cb84:	e015      	b.n	cbb2 <ftoa+0x192>
        {
            i32FracPart *= 10;
    cb86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cb88:	4613      	mov	r3, r2
    cb8a:	009b      	lsls	r3, r3, #2
    cb8c:	4413      	add	r3, r2
    cb8e:	005b      	lsls	r3, r3, #1
    cb90:	930c      	str	r3, [sp, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    cb92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cb94:	161b      	asrs	r3, r3, #24
    cb96:	b2da      	uxtb	r2, r3
    cb98:	9b02      	ldr	r3, [sp, #8]
    cb9a:	1c59      	adds	r1, r3, #1
    cb9c:	9102      	str	r1, [sp, #8]
    cb9e:	3230      	adds	r2, #48	; 0x30
    cba0:	b2d2      	uxtb	r2, r2
    cba2:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    cba4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cba6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cbaa:	930c      	str	r3, [sp, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    cbac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cbae:	3301      	adds	r3, #1
    cbb0:	930a      	str	r3, [sp, #40]	; 0x28
    cbb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    cbb4:	9b05      	ldr	r3, [sp, #20]
    cbb6:	429a      	cmp	r2, r3
    cbb8:	dbe5      	blt.n	cb86 <ftoa+0x166>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    cbba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cbbc:	4613      	mov	r3, r2
    cbbe:	009b      	lsls	r3, r3, #2
    cbc0:	4413      	add	r3, r2
    cbc2:	005b      	lsls	r3, r3, #1
    cbc4:	161b      	asrs	r3, r3, #24
    cbc6:	2b04      	cmp	r3, #4
    cbc8:	dd1d      	ble.n	cc06 <ftoa+0x1e6>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    cbca:	9b02      	ldr	r3, [sp, #8]
    cbcc:	3b01      	subs	r3, #1
    cbce:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cbd0:	e015      	b.n	cbfe <ftoa+0x1de>
            {
                if ( *pcBuftmp == '.' )
    cbd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cbd4:	781b      	ldrb	r3, [r3, #0]
    cbd6:	2b2e      	cmp	r3, #46	; 0x2e
    cbd8:	d00e      	beq.n	cbf8 <ftoa+0x1d8>
                {
                }
                else if ( *pcBuftmp == '9' )
    cbda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cbdc:	781b      	ldrb	r3, [r3, #0]
    cbde:	2b39      	cmp	r3, #57	; 0x39
    cbe0:	d103      	bne.n	cbea <ftoa+0x1ca>
                {
                    *pcBuftmp = '0';
    cbe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cbe4:	2230      	movs	r2, #48	; 0x30
    cbe6:	701a      	strb	r2, [r3, #0]
    cbe8:	e006      	b.n	cbf8 <ftoa+0x1d8>
                }
                else
                {
                    *pcBuftmp += 1;
    cbea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cbec:	781b      	ldrb	r3, [r3, #0]
    cbee:	3301      	adds	r3, #1
    cbf0:	b2da      	uxtb	r2, r3
    cbf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cbf4:	701a      	strb	r2, [r3, #0]
                    break;
    cbf6:	e006      	b.n	cc06 <ftoa+0x1e6>
                }
                pcBuftmp--;
    cbf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cbfa:	3b01      	subs	r3, #1
    cbfc:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cbfe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cc00:	9b08      	ldr	r3, [sp, #32]
    cc02:	429a      	cmp	r2, r3
    cc04:	d2e5      	bcs.n	cbd2 <ftoa+0x1b2>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    cc06:	9b02      	ldr	r3, [sp, #8]
    cc08:	2200      	movs	r2, #0
    cc0a:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    cc0c:	9a02      	ldr	r2, [sp, #8]
    cc0e:	9b08      	ldr	r3, [sp, #32]
    cc10:	1ad3      	subs	r3, r2, r3
} // ftoa()
    cc12:	4618      	mov	r0, r3
    cc14:	b00f      	add	sp, #60	; 0x3c
    cc16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cc18:	00302e30 	.word	0x00302e30

0000cc1c <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    cc1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cc20:	b097      	sub	sp, #92	; 0x5c
    cc22:	9003      	str	r0, [sp, #12]
    cc24:	9102      	str	r1, [sp, #8]
    cc26:	9201      	str	r2, [sp, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    cc28:	2300      	movs	r3, #0
    cc2a:	9311      	str	r3, [sp, #68]	; 0x44
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    cc2c:	2300      	movs	r3, #0
    cc2e:	930b      	str	r3, [sp, #44]	; 0x2c

    while ( *pcFmt != 0x0 )
    cc30:	e2e9      	b.n	d206 <am_util_stdio_vsprintf+0x5ea>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    cc32:	2306      	movs	r3, #6
    cc34:	930e      	str	r3, [sp, #56]	; 0x38

        if ( *pcFmt != '%' )
    cc36:	9b02      	ldr	r3, [sp, #8]
    cc38:	781b      	ldrb	r3, [r3, #0]
    cc3a:	2b25      	cmp	r3, #37	; 0x25
    cc3c:	d01f      	beq.n	cc7e <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    cc3e:	9b03      	ldr	r3, [sp, #12]
    cc40:	2b00      	cmp	r3, #0
    cc42:	d015      	beq.n	cc70 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    cc44:	9b02      	ldr	r3, [sp, #8]
    cc46:	781b      	ldrb	r3, [r3, #0]
    cc48:	2b0a      	cmp	r3, #10
    cc4a:	d10b      	bne.n	cc64 <am_util_stdio_vsprintf+0x48>
    cc4c:	4ba8      	ldr	r3, [pc, #672]	; (cef0 <am_util_stdio_vsprintf+0x2d4>)
    cc4e:	781b      	ldrb	r3, [r3, #0]
    cc50:	2b00      	cmp	r3, #0
    cc52:	d007      	beq.n	cc64 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    cc54:	9b03      	ldr	r3, [sp, #12]
    cc56:	1c5a      	adds	r2, r3, #1
    cc58:	9203      	str	r2, [sp, #12]
    cc5a:	220d      	movs	r2, #13
    cc5c:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    cc5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cc60:	3301      	adds	r3, #1
    cc62:	9311      	str	r3, [sp, #68]	; 0x44
                }
                *pcBuf++ = *pcFmt;
    cc64:	9b03      	ldr	r3, [sp, #12]
    cc66:	1c5a      	adds	r2, r3, #1
    cc68:	9203      	str	r2, [sp, #12]
    cc6a:	9a02      	ldr	r2, [sp, #8]
    cc6c:	7812      	ldrb	r2, [r2, #0]
    cc6e:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    cc70:	9b02      	ldr	r3, [sp, #8]
    cc72:	3301      	adds	r3, #1
    cc74:	9302      	str	r3, [sp, #8]
            ++ui32CharCnt;
    cc76:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cc78:	3301      	adds	r3, #1
    cc7a:	9311      	str	r3, [sp, #68]	; 0x44
            continue;
    cc7c:	e2c3      	b.n	d206 <am_util_stdio_vsprintf+0x5ea>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    cc7e:	9b02      	ldr	r3, [sp, #8]
    cc80:	3301      	adds	r3, #1
    cc82:	9302      	str	r3, [sp, #8]
        bLower = bLongLong = false;
    cc84:	2300      	movs	r3, #0
    cc86:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    cc8a:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    cc8e:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    cc92:	2320      	movs	r3, #32
    cc94:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

        if ( *pcFmt == '0' )
    cc98:	9b02      	ldr	r3, [sp, #8]
    cc9a:	781b      	ldrb	r3, [r3, #0]
    cc9c:	2b30      	cmp	r3, #48	; 0x30
    cc9e:	d105      	bne.n	ccac <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    cca0:	2330      	movs	r3, #48	; 0x30
    cca2:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
            ++pcFmt;
    cca6:	9b02      	ldr	r3, [sp, #8]
    cca8:	3301      	adds	r3, #1
    ccaa:	9302      	str	r3, [sp, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    ccac:	ab05      	add	r3, sp, #20
    ccae:	4619      	mov	r1, r3
    ccb0:	9802      	ldr	r0, [sp, #8]
    ccb2:	f7ff fd93 	bl	c7dc <decstr_to_int>
    ccb6:	4603      	mov	r3, r0
    ccb8:	9310      	str	r3, [sp, #64]	; 0x40
        pcFmt += ui32NumChars;
    ccba:	9b05      	ldr	r3, [sp, #20]
    ccbc:	9a02      	ldr	r2, [sp, #8]
    ccbe:	4413      	add	r3, r2
    ccc0:	9302      	str	r3, [sp, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    ccc2:	9b02      	ldr	r3, [sp, #8]
    ccc4:	781b      	ldrb	r3, [r3, #0]
    ccc6:	2b73      	cmp	r3, #115	; 0x73
    ccc8:	d005      	beq.n	ccd6 <am_util_stdio_vsprintf+0xba>
    ccca:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cccc:	2b00      	cmp	r3, #0
    ccce:	da02      	bge.n	ccd6 <am_util_stdio_vsprintf+0xba>
        {
            iWidth = -iWidth;
    ccd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ccd2:	425b      	negs	r3, r3
    ccd4:	9310      	str	r3, [sp, #64]	; 0x40
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    ccd6:	9b02      	ldr	r3, [sp, #8]
    ccd8:	781b      	ldrb	r3, [r3, #0]
    ccda:	2b2e      	cmp	r3, #46	; 0x2e
    ccdc:	d10d      	bne.n	ccfa <am_util_stdio_vsprintf+0xde>
        {
            ++pcFmt;
    ccde:	9b02      	ldr	r3, [sp, #8]
    cce0:	3301      	adds	r3, #1
    cce2:	9302      	str	r3, [sp, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    cce4:	ab05      	add	r3, sp, #20
    cce6:	4619      	mov	r1, r3
    cce8:	9802      	ldr	r0, [sp, #8]
    ccea:	f7ff fd77 	bl	c7dc <decstr_to_int>
    ccee:	4603      	mov	r3, r0
    ccf0:	930e      	str	r3, [sp, #56]	; 0x38
            pcFmt += ui32NumChars;
    ccf2:	9b05      	ldr	r3, [sp, #20]
    ccf4:	9a02      	ldr	r2, [sp, #8]
    ccf6:	4413      	add	r3, r2
    ccf8:	9302      	str	r3, [sp, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    ccfa:	9b02      	ldr	r3, [sp, #8]
    ccfc:	781b      	ldrb	r3, [r3, #0]
    ccfe:	2b6c      	cmp	r3, #108	; 0x6c
    cd00:	d10c      	bne.n	cd1c <am_util_stdio_vsprintf+0x100>
        {
            pcFmt++;
    cd02:	9b02      	ldr	r3, [sp, #8]
    cd04:	3301      	adds	r3, #1
    cd06:	9302      	str	r3, [sp, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    cd08:	9b02      	ldr	r3, [sp, #8]
    cd0a:	781b      	ldrb	r3, [r3, #0]
    cd0c:	2b6c      	cmp	r3, #108	; 0x6c
    cd0e:	d105      	bne.n	cd1c <am_util_stdio_vsprintf+0x100>
            {
                pcFmt++;
    cd10:	9b02      	ldr	r3, [sp, #8]
    cd12:	3301      	adds	r3, #1
    cd14:	9302      	str	r3, [sp, #8]
                bLongLong = true;
    cd16:	2301      	movs	r3, #1
    cd18:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
            }
        }

        switch ( *pcFmt )
    cd1c:	9b02      	ldr	r3, [sp, #8]
    cd1e:	781b      	ldrb	r3, [r3, #0]
    cd20:	3b46      	subs	r3, #70	; 0x46
    cd22:	2b32      	cmp	r3, #50	; 0x32
    cd24:	f200 825c 	bhi.w	d1e0 <am_util_stdio_vsprintf+0x5c4>
    cd28:	a201      	add	r2, pc, #4	; (adr r2, cd30 <am_util_stdio_vsprintf+0x114>)
    cd2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cd2e:	bf00      	nop
    cd30:	0000d167 	.word	0x0000d167
    cd34:	0000d1e1 	.word	0x0000d1e1
    cd38:	0000d1e1 	.word	0x0000d1e1
    cd3c:	0000d1e1 	.word	0x0000d1e1
    cd40:	0000d1e1 	.word	0x0000d1e1
    cd44:	0000d1e1 	.word	0x0000d1e1
    cd48:	0000d1e1 	.word	0x0000d1e1
    cd4c:	0000d1e1 	.word	0x0000d1e1
    cd50:	0000d1e1 	.word	0x0000d1e1
    cd54:	0000d1e1 	.word	0x0000d1e1
    cd58:	0000d1e1 	.word	0x0000d1e1
    cd5c:	0000d1e1 	.word	0x0000d1e1
    cd60:	0000d1e1 	.word	0x0000d1e1
    cd64:	0000d1e1 	.word	0x0000d1e1
    cd68:	0000d1e1 	.word	0x0000d1e1
    cd6c:	0000d1e1 	.word	0x0000d1e1
    cd70:	0000d1e1 	.word	0x0000d1e1
    cd74:	0000d1e1 	.word	0x0000d1e1
    cd78:	0000cefb 	.word	0x0000cefb
    cd7c:	0000d1e1 	.word	0x0000d1e1
    cd80:	0000d1e1 	.word	0x0000d1e1
    cd84:	0000d1e1 	.word	0x0000d1e1
    cd88:	0000d1e1 	.word	0x0000d1e1
    cd8c:	0000d1e1 	.word	0x0000d1e1
    cd90:	0000d1e1 	.word	0x0000d1e1
    cd94:	0000d1e1 	.word	0x0000d1e1
    cd98:	0000d1e1 	.word	0x0000d1e1
    cd9c:	0000d1e1 	.word	0x0000d1e1
    cda0:	0000d1e1 	.word	0x0000d1e1
    cda4:	0000cdfd 	.word	0x0000cdfd
    cda8:	0000d02b 	.word	0x0000d02b
    cdac:	0000d1e1 	.word	0x0000d1e1
    cdb0:	0000d167 	.word	0x0000d167
    cdb4:	0000d1e1 	.word	0x0000d1e1
    cdb8:	0000d1e1 	.word	0x0000d1e1
    cdbc:	0000d02b 	.word	0x0000d02b
    cdc0:	0000d1e1 	.word	0x0000d1e1
    cdc4:	0000d1e1 	.word	0x0000d1e1
    cdc8:	0000d1e1 	.word	0x0000d1e1
    cdcc:	0000d1e1 	.word	0x0000d1e1
    cdd0:	0000d1e1 	.word	0x0000d1e1
    cdd4:	0000d1e1 	.word	0x0000d1e1
    cdd8:	0000d1e1 	.word	0x0000d1e1
    cddc:	0000d1e1 	.word	0x0000d1e1
    cde0:	0000d1e1 	.word	0x0000d1e1
    cde4:	0000ce23 	.word	0x0000ce23
    cde8:	0000d1e1 	.word	0x0000d1e1
    cdec:	0000cf95 	.word	0x0000cf95
    cdf0:	0000d1e1 	.word	0x0000d1e1
    cdf4:	0000d1e1 	.word	0x0000d1e1
    cdf8:	0000cef5 	.word	0x0000cef5
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cdfc:	9b01      	ldr	r3, [sp, #4]
    cdfe:	1d1a      	adds	r2, r3, #4
    ce00:	9201      	str	r2, [sp, #4]
    ce02:	681b      	ldr	r3, [r3, #0]
    ce04:	f88d 301f 	strb.w	r3, [sp, #31]

                if ( pcBuf )
    ce08:	9b03      	ldr	r3, [sp, #12]
    ce0a:	2b00      	cmp	r3, #0
    ce0c:	d005      	beq.n	ce1a <am_util_stdio_vsprintf+0x1fe>
                {
                    *pcBuf++ = ui8CharSpecifier;
    ce0e:	9b03      	ldr	r3, [sp, #12]
    ce10:	1c5a      	adds	r2, r3, #1
    ce12:	9203      	str	r2, [sp, #12]
    ce14:	f89d 201f 	ldrb.w	r2, [sp, #31]
    ce18:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    ce1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ce1c:	3301      	adds	r3, #1
    ce1e:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    ce20:	e1ee      	b.n	d200 <am_util_stdio_vsprintf+0x5e4>

            case 's':
                pcStr = va_arg(pArgs, char *);
    ce22:	9b01      	ldr	r3, [sp, #4]
    ce24:	1d1a      	adds	r2, r3, #4
    ce26:	9201      	str	r2, [sp, #4]
    ce28:	681b      	ldr	r3, [r3, #0]
    ce2a:	9315      	str	r3, [sp, #84]	; 0x54
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    ce2c:	9815      	ldr	r0, [sp, #84]	; 0x54
    ce2e:	f7ff fdbe 	bl	c9ae <simple_strlen>
    ce32:	900b      	str	r0, [sp, #44]	; 0x2c
                if ( iWidth > 0 )
    ce34:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce36:	2b00      	cmp	r3, #0
    ce38:	dd2e      	ble.n	ce98 <am_util_stdio_vsprintf+0x27c>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    ce3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ce3e:	429a      	cmp	r2, r3
    ce40:	d22a      	bcs.n	ce98 <am_util_stdio_vsprintf+0x27c>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    ce42:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ce44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ce46:	1ad3      	subs	r3, r2, r3
    ce48:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    ce4a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    ce4e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ce50:	4619      	mov	r1, r3
    ce52:	9803      	ldr	r0, [sp, #12]
    ce54:	f7ff fdc1 	bl	c9da <padbuffer>
    ce58:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    ce5a:	9b03      	ldr	r3, [sp, #12]
    ce5c:	2b00      	cmp	r3, #0
    ce5e:	d001      	beq.n	ce64 <am_util_stdio_vsprintf+0x248>
    ce60:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce62:	e000      	b.n	ce66 <am_util_stdio_vsprintf+0x24a>
    ce64:	2300      	movs	r3, #0
    ce66:	9a03      	ldr	r2, [sp, #12]
    ce68:	4413      	add	r3, r2
    ce6a:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    ce6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ce70:	4413      	add	r3, r2
    ce72:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    ce74:	2300      	movs	r3, #0
    ce76:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }

                while (*pcStr != 0x0)
    ce78:	e00e      	b.n	ce98 <am_util_stdio_vsprintf+0x27c>
                {
                    if ( pcBuf )
    ce7a:	9b03      	ldr	r3, [sp, #12]
    ce7c:	2b00      	cmp	r3, #0
    ce7e:	d005      	beq.n	ce8c <am_util_stdio_vsprintf+0x270>
                    {
                        *pcBuf++ = *pcStr;
    ce80:	9b03      	ldr	r3, [sp, #12]
    ce82:	1c5a      	adds	r2, r3, #1
    ce84:	9203      	str	r2, [sp, #12]
    ce86:	9a15      	ldr	r2, [sp, #84]	; 0x54
    ce88:	7812      	ldrb	r2, [r2, #0]
    ce8a:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    ce8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ce8e:	3301      	adds	r3, #1
    ce90:	9315      	str	r3, [sp, #84]	; 0x54
                    ++ui32CharCnt;
    ce92:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ce94:	3301      	adds	r3, #1
    ce96:	9311      	str	r3, [sp, #68]	; 0x44
                while (*pcStr != 0x0)
    ce98:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ce9a:	781b      	ldrb	r3, [r3, #0]
    ce9c:	2b00      	cmp	r3, #0
    ce9e:	d1ec      	bne.n	ce7a <am_util_stdio_vsprintf+0x25e>
                }

                if ( iWidth )
    cea0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cea2:	2b00      	cmp	r3, #0
    cea4:	f000 81a9 	beq.w	d1fa <am_util_stdio_vsprintf+0x5de>
                {
                    iWidth = -iWidth;
    cea8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ceaa:	425b      	negs	r3, r3
    ceac:	9310      	str	r3, [sp, #64]	; 0x40

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    ceae:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ceb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ceb2:	429a      	cmp	r2, r3
    ceb4:	f080 81a1 	bcs.w	d1fa <am_util_stdio_vsprintf+0x5de>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    ceb8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ceba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cebc:	1ad3      	subs	r3, r2, r3
    cebe:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cec0:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cec4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cec6:	4619      	mov	r1, r3
    cec8:	9803      	ldr	r0, [sp, #12]
    ceca:	f7ff fd86 	bl	c9da <padbuffer>
    cece:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    ced0:	9b03      	ldr	r3, [sp, #12]
    ced2:	2b00      	cmp	r3, #0
    ced4:	d001      	beq.n	ceda <am_util_stdio_vsprintf+0x2be>
    ced6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ced8:	e000      	b.n	cedc <am_util_stdio_vsprintf+0x2c0>
    ceda:	2300      	movs	r3, #0
    cedc:	9a03      	ldr	r2, [sp, #12]
    cede:	4413      	add	r3, r2
    cee0:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    cee2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cee4:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cee6:	4413      	add	r3, r2
    cee8:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    ceea:	2300      	movs	r3, #0
    ceec:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }
                break;
    ceee:	e184      	b.n	d1fa <am_util_stdio_vsprintf+0x5de>
    cef0:	100011f0 	.word	0x100011f0

            case 'x':
                bLower = true;
    cef4:	2301      	movs	r3, #1
    cef6:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cefa:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    cefe:	2b00      	cmp	r3, #0
    cf00:	d009      	beq.n	cf16 <am_util_stdio_vsprintf+0x2fa>
    cf02:	9b01      	ldr	r3, [sp, #4]
    cf04:	3307      	adds	r3, #7
    cf06:	f023 0307 	bic.w	r3, r3, #7
    cf0a:	f103 0208 	add.w	r2, r3, #8
    cf0e:	9201      	str	r2, [sp, #4]
    cf10:	e9d3 4500 	ldrd	r4, r5, [r3]
    cf14:	e006      	b.n	cf24 <am_util_stdio_vsprintf+0x308>
                                      va_arg(pArgs, uint32_t);
    cf16:	9b01      	ldr	r3, [sp, #4]
    cf18:	1d1a      	adds	r2, r3, #4
    cf1a:	9201      	str	r2, [sp, #4]
    cf1c:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cf1e:	2200      	movs	r2, #0
    cf20:	461c      	mov	r4, r3
    cf22:	4615      	mov	r5, r2
    cf24:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48

                if ( iWidth )
    cf28:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf2a:	2b00      	cmp	r3, #0
    cf2c:	d01e      	beq.n	cf6c <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    cf2e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    cf32:	f7ff fc2f 	bl	c794 <ndigits_in_hex>
    cf36:	4602      	mov	r2, r0
    cf38:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf3a:	1a9b      	subs	r3, r3, r2
    cf3c:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cf3e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cf42:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cf44:	4619      	mov	r1, r3
    cf46:	9803      	ldr	r0, [sp, #12]
    cf48:	f7ff fd47 	bl	c9da <padbuffer>
    cf4c:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    cf4e:	9b03      	ldr	r3, [sp, #12]
    cf50:	2b00      	cmp	r3, #0
    cf52:	d001      	beq.n	cf58 <am_util_stdio_vsprintf+0x33c>
    cf54:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf56:	e000      	b.n	cf5a <am_util_stdio_vsprintf+0x33e>
    cf58:	2300      	movs	r3, #0
    cf5a:	9a03      	ldr	r2, [sp, #12]
    cf5c:	4413      	add	r3, r2
    cf5e:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    cf60:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf62:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cf64:	4413      	add	r3, r2
    cf66:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    cf68:	2300      	movs	r3, #0
    cf6a:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    cf6c:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    cf70:	9a03      	ldr	r2, [sp, #12]
    cf72:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    cf76:	f7ff fcba 	bl	c8ee <uint64_to_hexstr>
    cf7a:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    cf7c:	9b03      	ldr	r3, [sp, #12]
    cf7e:	2b00      	cmp	r3, #0
    cf80:	d003      	beq.n	cf8a <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    cf82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cf84:	9a03      	ldr	r2, [sp, #12]
    cf86:	4413      	add	r3, r2
    cf88:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    cf8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cf8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cf8e:	4413      	add	r3, r2
    cf90:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    cf92:	e135      	b.n	d200 <am_util_stdio_vsprintf+0x5e4>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cf94:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    cf98:	2b00      	cmp	r3, #0
    cf9a:	d009      	beq.n	cfb0 <am_util_stdio_vsprintf+0x394>
    cf9c:	9b01      	ldr	r3, [sp, #4]
    cf9e:	3307      	adds	r3, #7
    cfa0:	f023 0307 	bic.w	r3, r3, #7
    cfa4:	f103 0208 	add.w	r2, r3, #8
    cfa8:	9201      	str	r2, [sp, #4]
    cfaa:	e9d3 6700 	ldrd	r6, r7, [r3]
    cfae:	e006      	b.n	cfbe <am_util_stdio_vsprintf+0x3a2>
                                      va_arg(pArgs, uint32_t);
    cfb0:	9b01      	ldr	r3, [sp, #4]
    cfb2:	1d1a      	adds	r2, r3, #4
    cfb4:	9201      	str	r2, [sp, #4]
    cfb6:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cfb8:	2200      	movs	r2, #0
    cfba:	461e      	mov	r6, r3
    cfbc:	4617      	mov	r7, r2
    cfbe:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48

                if ( iWidth )
    cfc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfc4:	2b00      	cmp	r3, #0
    cfc6:	d01e      	beq.n	d006 <am_util_stdio_vsprintf+0x3ea>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    cfc8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    cfcc:	f7ff fba8 	bl	c720 <ndigits_in_u64>
    cfd0:	4602      	mov	r2, r0
    cfd2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfd4:	1a9b      	subs	r3, r3, r2
    cfd6:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cfd8:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cfdc:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cfde:	4619      	mov	r1, r3
    cfe0:	9803      	ldr	r0, [sp, #12]
    cfe2:	f7ff fcfa 	bl	c9da <padbuffer>
    cfe6:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    cfe8:	9b03      	ldr	r3, [sp, #12]
    cfea:	2b00      	cmp	r3, #0
    cfec:	d001      	beq.n	cff2 <am_util_stdio_vsprintf+0x3d6>
    cfee:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cff0:	e000      	b.n	cff4 <am_util_stdio_vsprintf+0x3d8>
    cff2:	2300      	movs	r3, #0
    cff4:	9a03      	ldr	r2, [sp, #12]
    cff6:	4413      	add	r3, r2
    cff8:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    cffa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cffc:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cffe:	4413      	add	r3, r2
    d000:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d002:	2300      	movs	r3, #0
    d004:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d006:	9a03      	ldr	r2, [sp, #12]
    d008:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d00c:	f7ff fc2a 	bl	c864 <uint64_to_str>
    d010:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d012:	9b03      	ldr	r3, [sp, #12]
    d014:	2b00      	cmp	r3, #0
    d016:	d003      	beq.n	d020 <am_util_stdio_vsprintf+0x404>
                {
                    pcBuf += iVal;
    d018:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d01a:	9a03      	ldr	r2, [sp, #12]
    d01c:	4413      	add	r3, r2
    d01e:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d020:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d022:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d024:	4413      	add	r3, r2
    d026:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d028:	e0ea      	b.n	d200 <am_util_stdio_vsprintf+0x5e4>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d02a:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d02e:	2b00      	cmp	r3, #0
    d030:	d009      	beq.n	d046 <am_util_stdio_vsprintf+0x42a>
    d032:	9b01      	ldr	r3, [sp, #4]
    d034:	3307      	adds	r3, #7
    d036:	f023 0307 	bic.w	r3, r3, #7
    d03a:	f103 0208 	add.w	r2, r3, #8
    d03e:	9201      	str	r2, [sp, #4]
    d040:	e9d3 8900 	ldrd	r8, r9, [r3]
    d044:	e006      	b.n	d054 <am_util_stdio_vsprintf+0x438>
                                     va_arg(pArgs, int32_t);
    d046:	9b01      	ldr	r3, [sp, #4]
    d048:	1d1a      	adds	r2, r3, #4
    d04a:	9201      	str	r2, [sp, #4]
    d04c:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d04e:	17da      	asrs	r2, r3, #31
    d050:	4698      	mov	r8, r3
    d052:	4691      	mov	r9, r2
    d054:	e9cd 8908 	strd	r8, r9, [sp, #32]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    d058:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d05c:	2b00      	cmp	r3, #0
    d05e:	da0c      	bge.n	d07a <am_util_stdio_vsprintf+0x45e>
                {
                    ui64Val = -i64Val;          // Get absolute value
    d060:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d064:	2100      	movs	r1, #0
    d066:	f1d2 0a00 	rsbs	sl, r2, #0
    d06a:	eb61 0b03 	sbc.w	fp, r1, r3
    d06e:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
                    bNeg = true;
    d072:	2301      	movs	r3, #1
    d074:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    d078:	e006      	b.n	d088 <am_util_stdio_vsprintf+0x46c>
                }
                else
                {
                    ui64Val = i64Val;
    d07a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d07e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
                    bNeg = false;
    d082:	2300      	movs	r3, #0
    d084:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                }

                if ( iWidth )
    d088:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d08a:	2b00      	cmp	r3, #0
    d08c:	d04a      	beq.n	d124 <am_util_stdio_vsprintf+0x508>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    d08e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    d092:	4610      	mov	r0, r2
    d094:	4619      	mov	r1, r3
    d096:	f7ff fb63 	bl	c760 <ndigits_in_i64>
    d09a:	4602      	mov	r2, r0
    d09c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d09e:	1a9b      	subs	r3, r3, r2
    d0a0:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg )
    d0a2:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d0a6:	2b00      	cmp	r3, #0
    d0a8:	d011      	beq.n	d0ce <am_util_stdio_vsprintf+0x4b2>
                    {
                        --iWidth;
    d0aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d0ac:	3b01      	subs	r3, #1
    d0ae:	9310      	str	r3, [sp, #64]	; 0x40

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    d0b0:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d0b4:	2b30      	cmp	r3, #48	; 0x30
    d0b6:	d10a      	bne.n	d0ce <am_util_stdio_vsprintf+0x4b2>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    d0b8:	9b03      	ldr	r3, [sp, #12]
    d0ba:	2b00      	cmp	r3, #0
    d0bc:	d004      	beq.n	d0c8 <am_util_stdio_vsprintf+0x4ac>
                            {
                                *pcBuf++ = '-';
    d0be:	9b03      	ldr	r3, [sp, #12]
    d0c0:	1c5a      	adds	r2, r3, #1
    d0c2:	9203      	str	r2, [sp, #12]
    d0c4:	222d      	movs	r2, #45	; 0x2d
    d0c6:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    d0c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d0ca:	3301      	adds	r3, #1
    d0cc:	9311      	str	r3, [sp, #68]	; 0x44
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d0ce:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d0d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d0d4:	4619      	mov	r1, r3
    d0d6:	9803      	ldr	r0, [sp, #12]
    d0d8:	f7ff fc7f 	bl	c9da <padbuffer>
    d0dc:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d0de:	9b03      	ldr	r3, [sp, #12]
    d0e0:	2b00      	cmp	r3, #0
    d0e2:	d001      	beq.n	d0e8 <am_util_stdio_vsprintf+0x4cc>
    d0e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d0e6:	e000      	b.n	d0ea <am_util_stdio_vsprintf+0x4ce>
    d0e8:	2300      	movs	r3, #0
    d0ea:	9a03      	ldr	r2, [sp, #12]
    d0ec:	4413      	add	r3, r2
    d0ee:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d0f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d0f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d0f4:	4413      	add	r3, r2
    d0f6:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d0f8:	2300      	movs	r3, #0
    d0fa:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d0fc:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d100:	2b00      	cmp	r3, #0
    d102:	d01e      	beq.n	d142 <am_util_stdio_vsprintf+0x526>
    d104:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d108:	2b20      	cmp	r3, #32
    d10a:	d11a      	bne.n	d142 <am_util_stdio_vsprintf+0x526>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    d10c:	9b03      	ldr	r3, [sp, #12]
    d10e:	2b00      	cmp	r3, #0
    d110:	d004      	beq.n	d11c <am_util_stdio_vsprintf+0x500>
                        {
                            *pcBuf++ = '-';
    d112:	9b03      	ldr	r3, [sp, #12]
    d114:	1c5a      	adds	r2, r3, #1
    d116:	9203      	str	r2, [sp, #12]
    d118:	222d      	movs	r2, #45	; 0x2d
    d11a:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    d11c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d11e:	3301      	adds	r3, #1
    d120:	9311      	str	r3, [sp, #68]	; 0x44
    d122:	e00e      	b.n	d142 <am_util_stdio_vsprintf+0x526>
                    }
                }
                else
                {
                    if ( bNeg )
    d124:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d128:	2b00      	cmp	r3, #0
    d12a:	d00a      	beq.n	d142 <am_util_stdio_vsprintf+0x526>
                    {
                        if ( pcBuf )
    d12c:	9b03      	ldr	r3, [sp, #12]
    d12e:	2b00      	cmp	r3, #0
    d130:	d004      	beq.n	d13c <am_util_stdio_vsprintf+0x520>
                        {
                            *pcBuf++ = '-';
    d132:	9b03      	ldr	r3, [sp, #12]
    d134:	1c5a      	adds	r2, r3, #1
    d136:	9203      	str	r2, [sp, #12]
    d138:	222d      	movs	r2, #45	; 0x2d
    d13a:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    d13c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d13e:	3301      	adds	r3, #1
    d140:	9311      	str	r3, [sp, #68]	; 0x44
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d142:	9a03      	ldr	r2, [sp, #12]
    d144:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d148:	f7ff fb8c 	bl	c864 <uint64_to_str>
    d14c:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d14e:	9b03      	ldr	r3, [sp, #12]
    d150:	2b00      	cmp	r3, #0
    d152:	d003      	beq.n	d15c <am_util_stdio_vsprintf+0x540>
                {
                    pcBuf += iVal;
    d154:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d156:	9a03      	ldr	r2, [sp, #12]
    d158:	4413      	add	r3, r2
    d15a:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d15c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d15e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d160:	4413      	add	r3, r2
    d162:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d164:	e04c      	b.n	d200 <am_util_stdio_vsprintf+0x5e4>


            case 'f':
            case 'F':
                if ( pcBuf )
    d166:	9b03      	ldr	r3, [sp, #12]
    d168:	2b00      	cmp	r3, #0
    d16a:	d048      	beq.n	d1fe <am_util_stdio_vsprintf+0x5e2>
                {
                    float fValue = va_arg(pArgs, double);
    d16c:	9b01      	ldr	r3, [sp, #4]
    d16e:	3307      	adds	r3, #7
    d170:	f023 0307 	bic.w	r3, r3, #7
    d174:	f103 0208 	add.w	r2, r3, #8
    d178:	9201      	str	r2, [sp, #4]
    d17a:	e9d3 2300 	ldrd	r2, r3, [r3]
    d17e:	4610      	mov	r0, r2
    d180:	4619      	mov	r1, r3
    d182:	f7fe ffbd 	bl	c100 <__aeabi_d2f>
    d186:	4603      	mov	r3, r0
    d188:	9306      	str	r3, [sp, #24]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    d18a:	9b03      	ldr	r3, [sp, #12]
    d18c:	2214      	movs	r2, #20
    d18e:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    d190:	990e      	ldr	r1, [sp, #56]	; 0x38
    d192:	9803      	ldr	r0, [sp, #12]
    d194:	ed9d 0a06 	vldr	s0, [sp, #24]
    d198:	f7ff fc42 	bl	ca20 <ftoa>
    d19c:	900f      	str	r0, [sp, #60]	; 0x3c
                    if ( iVal < 0 )
    d19e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d1a0:	2b00      	cmp	r3, #0
    d1a2:	da14      	bge.n	d1ce <am_util_stdio_vsprintf+0x5b2>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d1a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d1a6:	f1b3 3fff 	cmp.w	r3, #4294967295
    d1aa:	d102      	bne.n	d1b2 <am_util_stdio_vsprintf+0x596>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d1ac:	4b1e      	ldr	r3, [pc, #120]	; (d228 <am_util_stdio_vsprintf+0x60c>)
    d1ae:	930c      	str	r3, [sp, #48]	; 0x30
    d1b0:	e008      	b.n	d1c4 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d1b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d1b4:	f113 0f02 	cmn.w	r3, #2
    d1b8:	d102      	bne.n	d1c0 <am_util_stdio_vsprintf+0x5a4>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d1ba:	4b1c      	ldr	r3, [pc, #112]	; (d22c <am_util_stdio_vsprintf+0x610>)
    d1bc:	930c      	str	r3, [sp, #48]	; 0x30
    d1be:	e001      	b.n	d1c4 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d1c0:	4b1b      	ldr	r3, [pc, #108]	; (d230 <am_util_stdio_vsprintf+0x614>)
    d1c2:	930c      	str	r3, [sp, #48]	; 0x30
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d1c4:	9b03      	ldr	r3, [sp, #12]
    d1c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d1c8:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    d1ca:	2303      	movs	r3, #3
    d1cc:	930f      	str	r3, [sp, #60]	; 0x3c
                    }
                    ui32CharCnt += iVal;
    d1ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d1d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d1d2:	4413      	add	r3, r2
    d1d4:	9311      	str	r3, [sp, #68]	; 0x44
                    pcBuf += iVal;
    d1d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d1d8:	9a03      	ldr	r2, [sp, #12]
    d1da:	4413      	add	r3, r2
    d1dc:	9303      	str	r3, [sp, #12]
                }
                break;
    d1de:	e00e      	b.n	d1fe <am_util_stdio_vsprintf+0x5e2>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d1e0:	9b03      	ldr	r3, [sp, #12]
    d1e2:	2b00      	cmp	r3, #0
    d1e4:	d005      	beq.n	d1f2 <am_util_stdio_vsprintf+0x5d6>
                {
                    *pcBuf++ = *pcFmt;
    d1e6:	9b03      	ldr	r3, [sp, #12]
    d1e8:	1c5a      	adds	r2, r3, #1
    d1ea:	9203      	str	r2, [sp, #12]
    d1ec:	9a02      	ldr	r2, [sp, #8]
    d1ee:	7812      	ldrb	r2, [r2, #0]
    d1f0:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d1f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d1f4:	3301      	adds	r3, #1
    d1f6:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d1f8:	e002      	b.n	d200 <am_util_stdio_vsprintf+0x5e4>
                break;
    d1fa:	bf00      	nop
    d1fc:	e000      	b.n	d200 <am_util_stdio_vsprintf+0x5e4>
                break;
    d1fe:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d200:	9b02      	ldr	r3, [sp, #8]
    d202:	3301      	adds	r3, #1
    d204:	9302      	str	r3, [sp, #8]
    while ( *pcFmt != 0x0 )
    d206:	9b02      	ldr	r3, [sp, #8]
    d208:	781b      	ldrb	r3, [r3, #0]
    d20a:	2b00      	cmp	r3, #0
    d20c:	f47f ad11 	bne.w	cc32 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d210:	9b03      	ldr	r3, [sp, #12]
    d212:	2b00      	cmp	r3, #0
    d214:	d002      	beq.n	d21c <am_util_stdio_vsprintf+0x600>
    {
        *pcBuf = 0x0;
    d216:	9b03      	ldr	r3, [sp, #12]
    d218:	2200      	movs	r2, #0
    d21a:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d21c:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    d21e:	4618      	mov	r0, r3
    d220:	b017      	add	sp, #92	; 0x5c
    d222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d226:	bf00      	nop
    d228:	00302e30 	.word	0x00302e30
    d22c:	00232e23 	.word	0x00232e23
    d230:	003f2e3f 	.word	0x003f2e3f

0000d234 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d234:	b40f      	push	{r0, r1, r2, r3}
    d236:	b500      	push	{lr}
    d238:	b083      	sub	sp, #12
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d23a:	4b0c      	ldr	r3, [pc, #48]	; (d26c <am_util_stdio_printf+0x38>)
    d23c:	681b      	ldr	r3, [r3, #0]
    d23e:	2b00      	cmp	r3, #0
    d240:	d101      	bne.n	d246 <am_util_stdio_printf+0x12>
    {
        return 0;
    d242:	2300      	movs	r3, #0
    d244:	e00c      	b.n	d260 <am_util_stdio_printf+0x2c>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d246:	ab05      	add	r3, sp, #20
    d248:	9300      	str	r3, [sp, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d24a:	9a00      	ldr	r2, [sp, #0]
    d24c:	9904      	ldr	r1, [sp, #16]
    d24e:	4808      	ldr	r0, [pc, #32]	; (d270 <am_util_stdio_printf+0x3c>)
    d250:	f7ff fce4 	bl	cc1c <am_util_stdio_vsprintf>
    d254:	9001      	str	r0, [sp, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d256:	4b05      	ldr	r3, [pc, #20]	; (d26c <am_util_stdio_printf+0x38>)
    d258:	681b      	ldr	r3, [r3, #0]
    d25a:	4805      	ldr	r0, [pc, #20]	; (d270 <am_util_stdio_printf+0x3c>)
    d25c:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d25e:	9b01      	ldr	r3, [sp, #4]
}
    d260:	4618      	mov	r0, r3
    d262:	b003      	add	sp, #12
    d264:	f85d eb04 	ldr.w	lr, [sp], #4
    d268:	b004      	add	sp, #16
    d26a:	4770      	bx	lr
    d26c:	100010ec 	.word	0x100010ec
    d270:	100010f0 	.word	0x100010f0

0000d274 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    d274:	b508      	push	{r3, lr}
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d276:	4802      	ldr	r0, [pc, #8]	; (d280 <am_util_stdio_terminal_clear+0xc>)
    d278:	f7ff ffdc 	bl	d234 <am_util_stdio_printf>
}
    d27c:	bf00      	nop
    d27e:	bd08      	pop	{r3, pc}
    d280:	0000e6e0 	.word	0x0000e6e0

0000d284 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    d284:	4811      	ldr	r0, [pc, #68]	; (d2cc <zero_loop+0x12>)
    d286:	4912      	ldr	r1, [pc, #72]	; (d2d0 <zero_loop+0x16>)
    d288:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    d28a:	f8d1 d000 	ldr.w	sp, [r1]

#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    d28e:	4811      	ldr	r0, [pc, #68]	; (d2d4 <zero_loop+0x1a>)
    d290:	6801      	ldr	r1, [r0, #0]
    d292:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d296:	6001      	str	r1, [r0, #0]
    d298:	f3bf 8f4f 	dsb	sy
    d29c:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    d2a0:	480d      	ldr	r0, [pc, #52]	; (d2d8 <zero_loop+0x1e>)
    d2a2:	490e      	ldr	r1, [pc, #56]	; (d2dc <zero_loop+0x22>)
    d2a4:	4a0e      	ldr	r2, [pc, #56]	; (d2e0 <zero_loop+0x26>)

0000d2a6 <copy_loop>:
    d2a6:	f850 3b04 	ldr.w	r3, [r0], #4
    d2aa:	f841 3b04 	str.w	r3, [r1], #4
    d2ae:	4291      	cmp	r1, r2
    d2b0:	dbf9      	blt.n	d2a6 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    d2b2:	480c      	ldr	r0, [pc, #48]	; (d2e4 <zero_loop+0x2a>)
    d2b4:	490c      	ldr	r1, [pc, #48]	; (d2e8 <zero_loop+0x2e>)
    d2b6:	f04f 0200 	mov.w	r2, #0

0000d2ba <zero_loop>:
    d2ba:	4288      	cmp	r0, r1
    d2bc:	bfb8      	it	lt
    d2be:	f840 2b04 	strlt.w	r2, [r0], #4
    d2c2:	dbfa      	blt.n	d2ba <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    d2c4:	f7ff f8a4 	bl	c410 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    d2c8:	be00      	bkpt	0x0000
}
    d2ca:	bf00      	nop
    d2cc:	e000ed08 	.word	0xe000ed08
    d2d0:	0000c000 	.word	0x0000c000
    d2d4:	e000ed88 	.word	0xe000ed88
    d2d8:	0000e93c 	.word	0x0000e93c
    d2dc:	10001000 	.word	0x10001000
    d2e0:	1000106c 	.word	0x1000106c
    d2e4:	1000106c 	.word	0x1000106c
    d2e8:	10001248 	.word	0x10001248

0000d2ec <NMI_Handler>:
NMI_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d2ec:	e7fe      	b.n	d2ec <NMI_Handler>

0000d2ee <BusFault_Handler>:
HardFault_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d2ee:	e7fe      	b.n	d2ee <BusFault_Handler>

0000d2f0 <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d2f0:	e7fe      	b.n	d2f0 <DebugMon_Handler>
	...

0000d2f4 <am_hal_cachectrl_config>:
    d2f4:	b530      	push	{r4, r5, lr}
    d2f6:	b083      	sub	sp, #12
    d2f8:	4604      	mov	r4, r0
    d2fa:	f000 fc2d 	bl	db58 <am_hal_interrupt_master_disable>
    d2fe:	4d0e      	ldr	r5, [pc, #56]	; (d338 <am_hal_cachectrl_config+0x44>)
    d300:	9001      	str	r0, [sp, #4]
    d302:	682b      	ldr	r3, [r5, #0]
    d304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    d308:	602b      	str	r3, [r5, #0]
    d30a:	9801      	ldr	r0, [sp, #4]
    d30c:	f000 fc28 	bl	db60 <am_hal_interrupt_master_set>
    d310:	7863      	ldrb	r3, [r4, #1]
    d312:	7822      	ldrb	r2, [r4, #0]
    d314:	78a1      	ldrb	r1, [r4, #2]
    d316:	021b      	lsls	r3, r3, #8
    d318:	f403 7340 	and.w	r3, r3, #768	; 0x300
    d31c:	0112      	lsls	r2, r2, #4
    d31e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    d322:	b2d2      	uxtb	r2, r2
    d324:	4313      	orrs	r3, r2
    d326:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d32a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d32e:	2000      	movs	r0, #0
    d330:	602b      	str	r3, [r5, #0]
    d332:	b003      	add	sp, #12
    d334:	bd30      	pop	{r4, r5, pc}
    d336:	bf00      	nop
    d338:	40018000 	.word	0x40018000

0000d33c <am_hal_cachectrl_enable>:
    d33c:	4a03      	ldr	r2, [pc, #12]	; (d34c <am_hal_cachectrl_enable+0x10>)
    d33e:	6813      	ldr	r3, [r2, #0]
    d340:	f043 0301 	orr.w	r3, r3, #1
    d344:	2000      	movs	r0, #0
    d346:	6013      	str	r3, [r2, #0]
    d348:	4770      	bx	lr
    d34a:	bf00      	nop
    d34c:	40018000 	.word	0x40018000

0000d350 <am_hal_cachectrl_control>:
    d350:	b510      	push	{r4, lr}
    d352:	3801      	subs	r0, #1
    d354:	b08e      	sub	sp, #56	; 0x38
    d356:	2810      	cmp	r0, #16
    d358:	f200 815e 	bhi.w	d618 <am_hal_cachectrl_control+0x2c8>
    d35c:	e8df f010 	tbh	[pc, r0, lsl #1]
    d360:	00360018 	.word	0x00360018
    d364:	0040003d 	.word	0x0040003d
    d368:	00450043 	.word	0x00450043
    d36c:	0011001a 	.word	0x0011001a
    d370:	00540047 	.word	0x00540047
    d374:	009a0061 	.word	0x009a0061
    d378:	010c00d3 	.word	0x010c00d3
    d37c:	013f0126 	.word	0x013f0126
    d380:	001d      	.short	0x001d
    d382:	f44f 7300 	mov.w	r3, #512	; 0x200
    d386:	4aac      	ldr	r2, [pc, #688]	; (d638 <am_hal_cachectrl_control+0x2e8>)
    d388:	2000      	movs	r0, #0
    d38a:	6093      	str	r3, [r2, #8]
    d38c:	b00e      	add	sp, #56	; 0x38
    d38e:	bd10      	pop	{r4, pc}
    d390:	2301      	movs	r3, #1
    d392:	e7f8      	b.n	d386 <am_hal_cachectrl_control+0x36>
    d394:	f44f 6380 	mov.w	r3, #1024	; 0x400
    d398:	e7f5      	b.n	d386 <am_hal_cachectrl_control+0x36>
    d39a:	2900      	cmp	r1, #0
    d39c:	f000 813c 	beq.w	d618 <am_hal_cachectrl_control+0x2c8>
    d3a0:	684a      	ldr	r2, [r1, #4]
    d3a2:	48a6      	ldr	r0, [pc, #664]	; (d63c <am_hal_cachectrl_control+0x2ec>)
    d3a4:	4202      	tst	r2, r0
    d3a6:	f040 8137 	bne.w	d618 <am_hal_cachectrl_control+0x2c8>
    d3aa:	688b      	ldr	r3, [r1, #8]
    d3ac:	4018      	ands	r0, r3
    d3ae:	f040 8133 	bne.w	d618 <am_hal_cachectrl_control+0x2c8>
    d3b2:	780c      	ldrb	r4, [r1, #0]
    d3b4:	2c00      	cmp	r4, #0
    d3b6:	f040 8133 	bne.w	d620 <am_hal_cachectrl_control+0x2d0>
    d3ba:	4c9f      	ldr	r4, [pc, #636]	; (d638 <am_hal_cachectrl_control+0x2e8>)
    d3bc:	7849      	ldrb	r1, [r1, #1]
    d3be:	6122      	str	r2, [r4, #16]
    d3c0:	6163      	str	r3, [r4, #20]
    d3c2:	6823      	ldr	r3, [r4, #0]
    d3c4:	f361 0382 	bfi	r3, r1, #2, #1
    d3c8:	6023      	str	r3, [r4, #0]
    d3ca:	e7df      	b.n	d38c <am_hal_cachectrl_control+0x3c>
    d3cc:	4b9a      	ldr	r3, [pc, #616]	; (d638 <am_hal_cachectrl_control+0x2e8>)
    d3ce:	681b      	ldr	r3, [r3, #0]
    d3d0:	01db      	lsls	r3, r3, #7
    d3d2:	f140 811f 	bpl.w	d614 <am_hal_cachectrl_control+0x2c4>
    d3d6:	2302      	movs	r3, #2
    d3d8:	e7d5      	b.n	d386 <am_hal_cachectrl_control+0x36>
    d3da:	f44f 6388 	mov.w	r3, #1088	; 0x440
    d3de:	e7d2      	b.n	d386 <am_hal_cachectrl_control+0x36>
    d3e0:	f44f 7308 	mov.w	r3, #544	; 0x220
    d3e4:	e7cf      	b.n	d386 <am_hal_cachectrl_control+0x36>
    d3e6:	2340      	movs	r3, #64	; 0x40
    d3e8:	e7cd      	b.n	d386 <am_hal_cachectrl_control+0x36>
    d3ea:	2320      	movs	r3, #32
    d3ec:	e7cb      	b.n	d386 <am_hal_cachectrl_control+0x36>
    d3ee:	f000 fbb3 	bl	db58 <am_hal_interrupt_master_disable>
    d3f2:	4a91      	ldr	r2, [pc, #580]	; (d638 <am_hal_cachectrl_control+0x2e8>)
    d3f4:	9000      	str	r0, [sp, #0]
    d3f6:	6813      	ldr	r3, [r2, #0]
    d3f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    d3fc:	6013      	str	r3, [r2, #0]
    d3fe:	9800      	ldr	r0, [sp, #0]
    d400:	f000 fbae 	bl	db60 <am_hal_interrupt_master_set>
    d404:	2000      	movs	r0, #0
    d406:	e7c1      	b.n	d38c <am_hal_cachectrl_control+0x3c>
    d408:	f000 fba6 	bl	db58 <am_hal_interrupt_master_disable>
    d40c:	4a8a      	ldr	r2, [pc, #552]	; (d638 <am_hal_cachectrl_control+0x2e8>)
    d40e:	9001      	str	r0, [sp, #4]
    d410:	6813      	ldr	r3, [r2, #0]
    d412:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    d416:	6013      	str	r3, [r2, #0]
    d418:	9801      	ldr	r0, [sp, #4]
    d41a:	f000 fba1 	bl	db60 <am_hal_interrupt_master_set>
    d41e:	2000      	movs	r0, #0
    d420:	e7b4      	b.n	d38c <am_hal_cachectrl_control+0x3c>
    d422:	f000 fb99 	bl	db58 <am_hal_interrupt_master_disable>
    d426:	4603      	mov	r3, r0
    d428:	4885      	ldr	r0, [pc, #532]	; (d640 <am_hal_cachectrl_control+0x2f0>)
    d42a:	9302      	str	r3, [sp, #8]
    d42c:	f000 fa0c 	bl	d848 <am_hal_flash_load_ui32>
    d430:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d434:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d438:	4881      	ldr	r0, [pc, #516]	; (d640 <am_hal_cachectrl_control+0x2f0>)
    d43a:	f000 fa09 	bl	d850 <am_hal_flash_store_ui32>
    d43e:	9802      	ldr	r0, [sp, #8]
    d440:	f000 fb8e 	bl	db60 <am_hal_interrupt_master_set>
    d444:	f000 fb88 	bl	db58 <am_hal_interrupt_master_disable>
    d448:	4603      	mov	r3, r0
    d44a:	487d      	ldr	r0, [pc, #500]	; (d640 <am_hal_cachectrl_control+0x2f0>)
    d44c:	9303      	str	r3, [sp, #12]
    d44e:	f000 f9fb 	bl	d848 <am_hal_flash_load_ui32>
    d452:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d456:	f440 61ee 	orr.w	r1, r0, #1904	; 0x770
    d45a:	4879      	ldr	r0, [pc, #484]	; (d640 <am_hal_cachectrl_control+0x2f0>)
    d45c:	f000 f9f8 	bl	d850 <am_hal_flash_store_ui32>
    d460:	9803      	ldr	r0, [sp, #12]
    d462:	f000 fb7d 	bl	db60 <am_hal_interrupt_master_set>
    d466:	f000 fb77 	bl	db58 <am_hal_interrupt_master_disable>
    d46a:	4603      	mov	r3, r0
    d46c:	4874      	ldr	r0, [pc, #464]	; (d640 <am_hal_cachectrl_control+0x2f0>)
    d46e:	9304      	str	r3, [sp, #16]
    d470:	f000 f9ea 	bl	d848 <am_hal_flash_load_ui32>
    d474:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d478:	f020 000f 	bic.w	r0, r0, #15
    d47c:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d480:	f041 0103 	orr.w	r1, r1, #3
    d484:	486e      	ldr	r0, [pc, #440]	; (d640 <am_hal_cachectrl_control+0x2f0>)
    d486:	f000 f9e3 	bl	d850 <am_hal_flash_store_ui32>
    d48a:	9804      	ldr	r0, [sp, #16]
    d48c:	f000 fb68 	bl	db60 <am_hal_interrupt_master_set>
    d490:	2000      	movs	r0, #0
    d492:	e77b      	b.n	d38c <am_hal_cachectrl_control+0x3c>
    d494:	f000 fb60 	bl	db58 <am_hal_interrupt_master_disable>
    d498:	4603      	mov	r3, r0
    d49a:	4869      	ldr	r0, [pc, #420]	; (d640 <am_hal_cachectrl_control+0x2f0>)
    d49c:	9305      	str	r3, [sp, #20]
    d49e:	f000 f9d3 	bl	d848 <am_hal_flash_load_ui32>
    d4a2:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d4a6:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    d4aa:	4865      	ldr	r0, [pc, #404]	; (d640 <am_hal_cachectrl_control+0x2f0>)
    d4ac:	f000 f9d0 	bl	d850 <am_hal_flash_store_ui32>
    d4b0:	9805      	ldr	r0, [sp, #20]
    d4b2:	f000 fb55 	bl	db60 <am_hal_interrupt_master_set>
    d4b6:	f000 fb4f 	bl	db58 <am_hal_interrupt_master_disable>
    d4ba:	4603      	mov	r3, r0
    d4bc:	4860      	ldr	r0, [pc, #384]	; (d640 <am_hal_cachectrl_control+0x2f0>)
    d4be:	9306      	str	r3, [sp, #24]
    d4c0:	f000 f9c2 	bl	d848 <am_hal_flash_load_ui32>
    d4c4:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d4c8:	f440 61ea 	orr.w	r1, r0, #1872	; 0x750
    d4cc:	485c      	ldr	r0, [pc, #368]	; (d640 <am_hal_cachectrl_control+0x2f0>)
    d4ce:	f000 f9bf 	bl	d850 <am_hal_flash_store_ui32>
    d4d2:	9806      	ldr	r0, [sp, #24]
    d4d4:	f000 fb44 	bl	db60 <am_hal_interrupt_master_set>
    d4d8:	f000 fb3e 	bl	db58 <am_hal_interrupt_master_disable>
    d4dc:	4603      	mov	r3, r0
    d4de:	4858      	ldr	r0, [pc, #352]	; (d640 <am_hal_cachectrl_control+0x2f0>)
    d4e0:	9307      	str	r3, [sp, #28]
    d4e2:	f000 f9b1 	bl	d848 <am_hal_flash_load_ui32>
    d4e6:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d4ea:	f020 000f 	bic.w	r0, r0, #15
    d4ee:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d4f2:	f041 0101 	orr.w	r1, r1, #1
    d4f6:	4852      	ldr	r0, [pc, #328]	; (d640 <am_hal_cachectrl_control+0x2f0>)
    d4f8:	f000 f9aa 	bl	d850 <am_hal_flash_store_ui32>
    d4fc:	9807      	ldr	r0, [sp, #28]
    d4fe:	f000 fb2f 	bl	db60 <am_hal_interrupt_master_set>
    d502:	2000      	movs	r0, #0
    d504:	e742      	b.n	d38c <am_hal_cachectrl_control+0x3c>
    d506:	f000 fb27 	bl	db58 <am_hal_interrupt_master_disable>
    d50a:	4603      	mov	r3, r0
    d50c:	484c      	ldr	r0, [pc, #304]	; (d640 <am_hal_cachectrl_control+0x2f0>)
    d50e:	9308      	str	r3, [sp, #32]
    d510:	f000 f99a 	bl	d848 <am_hal_flash_load_ui32>
    d514:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d518:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    d51c:	4848      	ldr	r0, [pc, #288]	; (d640 <am_hal_cachectrl_control+0x2f0>)
    d51e:	f000 f997 	bl	d850 <am_hal_flash_store_ui32>
    d522:	9808      	ldr	r0, [sp, #32]
    d524:	f000 fb1c 	bl	db60 <am_hal_interrupt_master_set>
    d528:	f000 fb16 	bl	db58 <am_hal_interrupt_master_disable>
    d52c:	4603      	mov	r3, r0
    d52e:	4844      	ldr	r0, [pc, #272]	; (d640 <am_hal_cachectrl_control+0x2f0>)
    d530:	9309      	str	r3, [sp, #36]	; 0x24
    d532:	f000 f989 	bl	d848 <am_hal_flash_load_ui32>
    d536:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d53a:	f440 61ec 	orr.w	r1, r0, #1888	; 0x760
    d53e:	4840      	ldr	r0, [pc, #256]	; (d640 <am_hal_cachectrl_control+0x2f0>)
    d540:	f000 f986 	bl	d850 <am_hal_flash_store_ui32>
    d544:	9809      	ldr	r0, [sp, #36]	; 0x24
    d546:	f000 fb0b 	bl	db60 <am_hal_interrupt_master_set>
    d54a:	f000 fb05 	bl	db58 <am_hal_interrupt_master_disable>
    d54e:	4603      	mov	r3, r0
    d550:	483b      	ldr	r0, [pc, #236]	; (d640 <am_hal_cachectrl_control+0x2f0>)
    d552:	930a      	str	r3, [sp, #40]	; 0x28
    d554:	f000 f978 	bl	d848 <am_hal_flash_load_ui32>
    d558:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d55c:	f020 000f 	bic.w	r0, r0, #15
    d560:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d564:	f041 0101 	orr.w	r1, r1, #1
    d568:	4835      	ldr	r0, [pc, #212]	; (d640 <am_hal_cachectrl_control+0x2f0>)
    d56a:	f000 f971 	bl	d850 <am_hal_flash_store_ui32>
    d56e:	980a      	ldr	r0, [sp, #40]	; 0x28
    d570:	f000 faf6 	bl	db60 <am_hal_interrupt_master_set>
    d574:	2000      	movs	r0, #0
    d576:	e709      	b.n	d38c <am_hal_cachectrl_control+0x3c>
    d578:	2900      	cmp	r1, #0
    d57a:	d04d      	beq.n	d618 <am_hal_cachectrl_control+0x2c8>
    d57c:	680c      	ldr	r4, [r1, #0]
    d57e:	2c03      	cmp	r4, #3
    d580:	d84c      	bhi.n	d61c <am_hal_cachectrl_control+0x2cc>
    d582:	f000 fae9 	bl	db58 <am_hal_interrupt_master_disable>
    d586:	4603      	mov	r3, r0
    d588:	482d      	ldr	r0, [pc, #180]	; (d640 <am_hal_cachectrl_control+0x2f0>)
    d58a:	930b      	str	r3, [sp, #44]	; 0x2c
    d58c:	f000 f95c 	bl	d848 <am_hal_flash_load_ui32>
    d590:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d594:	ea40 3104 	orr.w	r1, r0, r4, lsl #12
    d598:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d59c:	4828      	ldr	r0, [pc, #160]	; (d640 <am_hal_cachectrl_control+0x2f0>)
    d59e:	f000 f957 	bl	d850 <am_hal_flash_store_ui32>
    d5a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d5a4:	f000 fadc 	bl	db60 <am_hal_interrupt_master_set>
    d5a8:	2000      	movs	r0, #0
    d5aa:	e6ef      	b.n	d38c <am_hal_cachectrl_control+0x3c>
    d5ac:	b3a1      	cbz	r1, d618 <am_hal_cachectrl_control+0x2c8>
    d5ae:	680c      	ldr	r4, [r1, #0]
    d5b0:	2c07      	cmp	r4, #7
    d5b2:	d833      	bhi.n	d61c <am_hal_cachectrl_control+0x2cc>
    d5b4:	f000 fad0 	bl	db58 <am_hal_interrupt_master_disable>
    d5b8:	4603      	mov	r3, r0
    d5ba:	4821      	ldr	r0, [pc, #132]	; (d640 <am_hal_cachectrl_control+0x2f0>)
    d5bc:	930c      	str	r3, [sp, #48]	; 0x30
    d5be:	f000 f943 	bl	d848 <am_hal_flash_load_ui32>
    d5c2:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d5c6:	ea40 1104 	orr.w	r1, r0, r4, lsl #4
    d5ca:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d5ce:	481c      	ldr	r0, [pc, #112]	; (d640 <am_hal_cachectrl_control+0x2f0>)
    d5d0:	f000 f93e 	bl	d850 <am_hal_flash_store_ui32>
    d5d4:	980c      	ldr	r0, [sp, #48]	; 0x30
    d5d6:	f000 fac3 	bl	db60 <am_hal_interrupt_master_set>
    d5da:	2000      	movs	r0, #0
    d5dc:	e6d6      	b.n	d38c <am_hal_cachectrl_control+0x3c>
    d5de:	b1d9      	cbz	r1, d618 <am_hal_cachectrl_control+0x2c8>
    d5e0:	680c      	ldr	r4, [r1, #0]
    d5e2:	2c0f      	cmp	r4, #15
    d5e4:	d81a      	bhi.n	d61c <am_hal_cachectrl_control+0x2cc>
    d5e6:	f000 fab7 	bl	db58 <am_hal_interrupt_master_disable>
    d5ea:	4603      	mov	r3, r0
    d5ec:	4814      	ldr	r0, [pc, #80]	; (d640 <am_hal_cachectrl_control+0x2f0>)
    d5ee:	930d      	str	r3, [sp, #52]	; 0x34
    d5f0:	f000 f92a 	bl	d848 <am_hal_flash_load_ui32>
    d5f4:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d5f8:	f020 000f 	bic.w	r0, r0, #15
    d5fc:	ea40 0104 	orr.w	r1, r0, r4
    d600:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d604:	480e      	ldr	r0, [pc, #56]	; (d640 <am_hal_cachectrl_control+0x2f0>)
    d606:	f000 f923 	bl	d850 <am_hal_flash_store_ui32>
    d60a:	980d      	ldr	r0, [sp, #52]	; 0x34
    d60c:	f000 faa8 	bl	db60 <am_hal_interrupt_master_set>
    d610:	2000      	movs	r0, #0
    d612:	e6bb      	b.n	d38c <am_hal_cachectrl_control+0x3c>
    d614:	2007      	movs	r0, #7
    d616:	e6b9      	b.n	d38c <am_hal_cachectrl_control+0x3c>
    d618:	2006      	movs	r0, #6
    d61a:	e6b7      	b.n	d38c <am_hal_cachectrl_control+0x3c>
    d61c:	2001      	movs	r0, #1
    d61e:	e6b5      	b.n	d38c <am_hal_cachectrl_control+0x3c>
    d620:	2c01      	cmp	r4, #1
    d622:	d1f9      	bne.n	d618 <am_hal_cachectrl_control+0x2c8>
    d624:	4c04      	ldr	r4, [pc, #16]	; (d638 <am_hal_cachectrl_control+0x2e8>)
    d626:	7849      	ldrb	r1, [r1, #1]
    d628:	61a2      	str	r2, [r4, #24]
    d62a:	61e3      	str	r3, [r4, #28]
    d62c:	6823      	ldr	r3, [r4, #0]
    d62e:	f361 03c3 	bfi	r3, r1, #3, #1
    d632:	6023      	str	r3, [r4, #0]
    d634:	e6aa      	b.n	d38c <am_hal_cachectrl_control+0x3c>
    d636:	bf00      	nop
    d638:	40018000 	.word	0x40018000
    d63c:	f800000f 	.word	0xf800000f
    d640:	40018004 	.word	0x40018004

0000d644 <am_hal_clkgen_control>:
    d644:	4b49      	ldr	r3, [pc, #292]	; (d76c <am_hal_clkgen_control+0x128>)
    d646:	681a      	ldr	r2, [r3, #0]
    d648:	b912      	cbnz	r2, d650 <am_hal_clkgen_control+0xc>
    d64a:	4a49      	ldr	r2, [pc, #292]	; (d770 <am_hal_clkgen_control+0x12c>)
    d64c:	6812      	ldr	r2, [r2, #0]
    d64e:	601a      	str	r2, [r3, #0]
    d650:	2809      	cmp	r0, #9
    d652:	f200 8089 	bhi.w	d768 <am_hal_clkgen_control+0x124>
    d656:	e8df f000 	tbb	[pc, r0]
    d65a:	160d      	.short	0x160d
    d65c:	423a261e 	.word	0x423a261e
    d660:	055c544c 	.word	0x055c544c
    d664:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d668:	2000      	movs	r0, #0
    d66a:	6a1a      	ldr	r2, [r3, #32]
    d66c:	f36f 0200 	bfc	r2, #0, #1
    d670:	621a      	str	r2, [r3, #32]
    d672:	4770      	bx	lr
    d674:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d678:	2200      	movs	r2, #0
    d67a:	2147      	movs	r1, #71	; 0x47
    d67c:	6159      	str	r1, [r3, #20]
    d67e:	4610      	mov	r0, r2
    d680:	619a      	str	r2, [r3, #24]
    d682:	615a      	str	r2, [r3, #20]
    d684:	4770      	bx	lr
    d686:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d68a:	2000      	movs	r0, #0
    d68c:	899a      	ldrh	r2, [r3, #12]
    d68e:	f36f 0200 	bfc	r2, #0, #1
    d692:	819a      	strh	r2, [r3, #12]
    d694:	4770      	bx	lr
    d696:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d69a:	2000      	movs	r0, #0
    d69c:	899a      	ldrh	r2, [r3, #12]
    d69e:	f36f 0241 	bfc	r2, #1, #1
    d6a2:	819a      	strh	r2, [r3, #12]
    d6a4:	4770      	bx	lr
    d6a6:	4a33      	ldr	r2, [pc, #204]	; (d774 <am_hal_clkgen_control+0x130>)
    d6a8:	68d3      	ldr	r3, [r2, #12]
    d6aa:	b2db      	uxtb	r3, r3
    d6ac:	2b21      	cmp	r3, #33	; 0x21
    d6ae:	d106      	bne.n	d6be <am_hal_clkgen_control+0x7a>
    d6b0:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    d6b4:	2101      	movs	r1, #1
    d6b6:	f361 2309 	bfi	r3, r1, #8, #2
    d6ba:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    d6be:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d6c2:	2000      	movs	r0, #0
    d6c4:	8993      	ldrh	r3, [r2, #12]
    d6c6:	f043 0301 	orr.w	r3, r3, #1
    d6ca:	8193      	strh	r3, [r2, #12]
    d6cc:	4770      	bx	lr
    d6ce:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d6d2:	2000      	movs	r0, #0
    d6d4:	8993      	ldrh	r3, [r2, #12]
    d6d6:	f043 0302 	orr.w	r3, r3, #2
    d6da:	8193      	strh	r3, [r2, #12]
    d6dc:	4770      	bx	lr
    d6de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d6e2:	2200      	movs	r2, #0
    d6e4:	2047      	movs	r0, #71	; 0x47
    d6e6:	2101      	movs	r1, #1
    d6e8:	6158      	str	r0, [r3, #20]
    d6ea:	6199      	str	r1, [r3, #24]
    d6ec:	4610      	mov	r0, r2
    d6ee:	615a      	str	r2, [r3, #20]
    d6f0:	4770      	bx	lr
    d6f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d6f6:	2000      	movs	r0, #0
    d6f8:	899a      	ldrh	r2, [r3, #12]
    d6fa:	f36f 12c7 	bfc	r2, #7, #1
    d6fe:	819a      	strh	r2, [r3, #12]
    d700:	4770      	bx	lr
    d702:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d706:	2000      	movs	r0, #0
    d708:	8993      	ldrh	r3, [r2, #12]
    d70a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d70e:	8193      	strh	r3, [r2, #12]
    d710:	4770      	bx	lr
    d712:	4a18      	ldr	r2, [pc, #96]	; (d774 <am_hal_clkgen_control+0x130>)
    d714:	68d3      	ldr	r3, [r2, #12]
    d716:	b2db      	uxtb	r3, r3
    d718:	2b21      	cmp	r3, #33	; 0x21
    d71a:	d00a      	beq.n	d732 <am_hal_clkgen_control+0xee>
    d71c:	b139      	cbz	r1, d72e <am_hal_clkgen_control+0xea>
    d71e:	680b      	ldr	r3, [r1, #0]
    d720:	f043 0301 	orr.w	r3, r3, #1
    d724:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d728:	2000      	movs	r0, #0
    d72a:	6213      	str	r3, [r2, #32]
    d72c:	4770      	bx	lr
    d72e:	4b12      	ldr	r3, [pc, #72]	; (d778 <am_hal_clkgen_control+0x134>)
    d730:	e7f8      	b.n	d724 <am_hal_clkgen_control+0xe0>
    d732:	b500      	push	{lr}
    d734:	b083      	sub	sp, #12
    d736:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    d73a:	9101      	str	r1, [sp, #4]
    d73c:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    d740:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    d744:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    d748:	f000 f838 	bl	d7bc <am_hal_flash_delay>
    d74c:	9901      	ldr	r1, [sp, #4]
    d74e:	b149      	cbz	r1, d764 <am_hal_clkgen_control+0x120>
    d750:	680b      	ldr	r3, [r1, #0]
    d752:	f043 0301 	orr.w	r3, r3, #1
    d756:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d75a:	2000      	movs	r0, #0
    d75c:	6213      	str	r3, [r2, #32]
    d75e:	b003      	add	sp, #12
    d760:	f85d fb04 	ldr.w	pc, [sp], #4
    d764:	4b04      	ldr	r3, [pc, #16]	; (d778 <am_hal_clkgen_control+0x134>)
    d766:	e7f6      	b.n	d756 <am_hal_clkgen_control+0x112>
    d768:	2006      	movs	r0, #6
    d76a:	4770      	bx	lr
    d76c:	1000123c 	.word	0x1000123c
    d770:	4ffff000 	.word	0x4ffff000
    d774:	40020000 	.word	0x40020000
    d778:	0025b801 	.word	0x0025b801

0000d77c <am_hal_clkgen_status_get>:
    d77c:	b1b0      	cbz	r0, d7ac <am_hal_clkgen_status_get+0x30>
    d77e:	b410      	push	{r4}
    d780:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    d784:	4603      	mov	r3, r0
    d786:	698c      	ldr	r4, [r1, #24]
    d788:	4809      	ldr	r0, [pc, #36]	; (d7b0 <am_hal_clkgen_status_get+0x34>)
    d78a:	4a0a      	ldr	r2, [pc, #40]	; (d7b4 <am_hal_clkgen_status_get+0x38>)
    d78c:	f014 0f01 	tst.w	r4, #1
    d790:	bf08      	it	eq
    d792:	4602      	moveq	r2, r0
    d794:	601a      	str	r2, [r3, #0]
    d796:	69ca      	ldr	r2, [r1, #28]
    d798:	f85d 4b04 	ldr.w	r4, [sp], #4
    d79c:	f002 0101 	and.w	r1, r2, #1
    d7a0:	f3c2 0240 	ubfx	r2, r2, #1, #1
    d7a4:	2000      	movs	r0, #0
    d7a6:	6059      	str	r1, [r3, #4]
    d7a8:	721a      	strb	r2, [r3, #8]
    d7aa:	4770      	bx	lr
    d7ac:	2006      	movs	r0, #6
    d7ae:	4770      	bx	lr
    d7b0:	02dc6c00 	.word	0x02dc6c00
    d7b4:	016e3600 	.word	0x016e3600

0000d7b8 <am_hal_debug_error>:
    d7b8:	e7fe      	b.n	d7b8 <am_hal_debug_error>
    d7ba:	bf00      	nop

0000d7bc <am_hal_flash_delay>:
    d7bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d7c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    d7c2:	075b      	lsls	r3, r3, #29
    d7c4:	bf46      	itte	mi
    d7c6:	0040      	lslmi	r0, r0, #1
    d7c8:	230e      	movmi	r3, #14
    d7ca:	230b      	movpl	r3, #11
    d7cc:	4298      	cmp	r0, r3
    d7ce:	d902      	bls.n	d7d6 <am_hal_flash_delay+0x1a>
    d7d0:	4a01      	ldr	r2, [pc, #4]	; (d7d8 <am_hal_flash_delay+0x1c>)
    d7d2:	1ac0      	subs	r0, r0, r3
    d7d4:	4710      	bx	r2
    d7d6:	4770      	bx	lr
    d7d8:	0800009d 	.word	0x0800009d

0000d7dc <am_hal_flash_delay_status_check>:
    d7dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d7e0:	f89d c020 	ldrb.w	ip, [sp, #32]
    d7e4:	f8df 805c 	ldr.w	r8, [pc, #92]	; d844 <am_hal_flash_delay_status_check+0x68>
    d7e8:	4604      	mov	r4, r0
    d7ea:	460d      	mov	r5, r1
    d7ec:	4616      	mov	r6, r2
    d7ee:	461f      	mov	r7, r3
    d7f0:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    d7f4:	f1bc 0f00 	cmp.w	ip, #0
    d7f8:	d00a      	beq.n	d810 <am_hal_flash_delay_status_check+0x34>
    d7fa:	e01a      	b.n	d832 <am_hal_flash_delay_status_check+0x56>
    d7fc:	b1f4      	cbz	r4, d83c <am_hal_flash_delay_status_check+0x60>
    d7fe:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    d802:	f013 0f04 	tst.w	r3, #4
    d806:	bf0c      	ite	eq
    d808:	2005      	moveq	r0, #5
    d80a:	2012      	movne	r0, #18
    d80c:	3c01      	subs	r4, #1
    d80e:	47c0      	blx	r8
    d810:	6828      	ldr	r0, [r5, #0]
    d812:	4030      	ands	r0, r6
    d814:	42b8      	cmp	r0, r7
    d816:	d0f1      	beq.n	d7fc <am_hal_flash_delay_status_check+0x20>
    d818:	2000      	movs	r0, #0
    d81a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d81e:	b16c      	cbz	r4, d83c <am_hal_flash_delay_status_check+0x60>
    d820:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    d824:	f013 0f04 	tst.w	r3, #4
    d828:	bf0c      	ite	eq
    d82a:	2005      	moveq	r0, #5
    d82c:	2012      	movne	r0, #18
    d82e:	3c01      	subs	r4, #1
    d830:	47c0      	blx	r8
    d832:	6828      	ldr	r0, [r5, #0]
    d834:	4030      	ands	r0, r6
    d836:	42b8      	cmp	r0, r7
    d838:	d1f1      	bne.n	d81e <am_hal_flash_delay_status_check+0x42>
    d83a:	e7ed      	b.n	d818 <am_hal_flash_delay_status_check+0x3c>
    d83c:	2004      	movs	r0, #4
    d83e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d842:	bf00      	nop
    d844:	0800009d 	.word	0x0800009d

0000d848 <am_hal_flash_load_ui32>:
    d848:	4b00      	ldr	r3, [pc, #0]	; (d84c <am_hal_flash_load_ui32+0x4>)
    d84a:	4718      	bx	r3
    d84c:	08000075 	.word	0x08000075

0000d850 <am_hal_flash_store_ui32>:
    d850:	4b01      	ldr	r3, [pc, #4]	; (d858 <am_hal_flash_store_ui32+0x8>)
    d852:	f043 0301 	orr.w	r3, r3, #1
    d856:	4718      	bx	r3
    d858:	10001038 	.word	0x10001038

0000d85c <am_hal_gpio_pinconfig>:
    d85c:	2831      	cmp	r0, #49	; 0x31
    d85e:	f200 80c3 	bhi.w	d9e8 <am_hal_gpio_pinconfig+0x18c>
    d862:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d866:	4604      	mov	r4, r0
    d868:	f011 07e0 	ands.w	r7, r1, #224	; 0xe0
    d86c:	f001 0007 	and.w	r0, r1, #7
    d870:	b085      	sub	sp, #20
    d872:	f3c1 03c1 	ubfx	r3, r1, #3, #2
    d876:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    d87a:	d00f      	beq.n	d89c <am_hal_gpio_pinconfig+0x40>
    d87c:	f3c1 1642 	ubfx	r6, r1, #5, #3
    d880:	1db5      	adds	r5, r6, #6
    d882:	f005 0507 	and.w	r5, r5, #7
    d886:	2d03      	cmp	r5, #3
    d888:	f042 0201 	orr.w	r2, r2, #1
    d88c:	f240 80ae 	bls.w	d9ec <am_hal_gpio_pinconfig+0x190>
    d890:	2fc0      	cmp	r7, #192	; 0xc0
    d892:	f000 80e1 	beq.w	da58 <am_hal_gpio_pinconfig+0x1fc>
    d896:	2f20      	cmp	r7, #32
    d898:	f000 80e3 	beq.w	da62 <am_hal_gpio_pinconfig+0x206>
    d89c:	b163      	cbz	r3, d8b8 <am_hal_gpio_pinconfig+0x5c>
    d89e:	2b01      	cmp	r3, #1
    d8a0:	f000 80d3 	beq.w	da4a <am_hal_gpio_pinconfig+0x1ee>
    d8a4:	2b02      	cmp	r3, #2
    d8a6:	f040 80c9 	bne.w	da3c <am_hal_gpio_pinconfig+0x1e0>
    d8aa:	4b79      	ldr	r3, [pc, #484]	; (da90 <am_hal_gpio_pinconfig+0x234>)
    d8ac:	5d1b      	ldrb	r3, [r3, r4]
    d8ae:	075b      	lsls	r3, r3, #29
    d8b0:	f140 80c4 	bpl.w	da3c <am_hal_gpio_pinconfig+0x1e0>
    d8b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    d8b8:	4b76      	ldr	r3, [pc, #472]	; (da94 <am_hal_gpio_pinconfig+0x238>)
    d8ba:	5d1b      	ldrb	r3, [r3, r4]
    d8bc:	4103      	asrs	r3, r0
    d8be:	005b      	lsls	r3, r3, #1
    d8c0:	f003 0302 	and.w	r3, r3, #2
    d8c4:	4313      	orrs	r3, r2
    d8c6:	4a74      	ldr	r2, [pc, #464]	; (da98 <am_hal_gpio_pinconfig+0x23c>)
    d8c8:	5d12      	ldrb	r2, [r2, r4]
    d8ca:	4282      	cmp	r2, r0
    d8cc:	f000 8099 	beq.w	da02 <am_hal_gpio_pinconfig+0x1a6>
    d8d0:	f3c1 3000 	ubfx	r0, r1, #12, #1
    d8d4:	f3c1 2581 	ubfx	r5, r1, #10, #2
    d8d8:	f3c1 3280 	ubfx	r2, r1, #14, #1
    d8dc:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    d8e0:	0a88      	lsrs	r0, r1, #10
    d8e2:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    d8e6:	f000 0008 	and.w	r0, r0, #8
    d8ea:	4302      	orrs	r2, r0
    d8ec:	f3c1 2007 	ubfx	r0, r1, #8, #8
    d8f0:	f000 050c 	and.w	r5, r0, #12
    d8f4:	2d04      	cmp	r5, #4
    d8f6:	f000 80a5 	beq.w	da44 <am_hal_gpio_pinconfig+0x1e8>
    d8fa:	4d68      	ldr	r5, [pc, #416]	; (da9c <am_hal_gpio_pinconfig+0x240>)
    d8fc:	682d      	ldr	r5, [r5, #0]
    d8fe:	eba1 0805 	sub.w	r8, r1, r5
    d902:	fab8 f888 	clz	r8, r8
    d906:	ea4f 1858 	mov.w	r8, r8, lsr #5
    d90a:	f010 0f60 	tst.w	r0, #96	; 0x60
    d90e:	bf04      	itt	eq
    d910:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
    d914:	f360 0200 	bfieq	r2, r0, #0, #1
    d918:	00a0      	lsls	r0, r4, #2
    d91a:	f3c1 2101 	ubfx	r1, r1, #8, #2
    d91e:	2902      	cmp	r1, #2
    d920:	d05c      	beq.n	d9dc <am_hal_gpio_pinconfig+0x180>
    d922:	2903      	cmp	r1, #3
    d924:	d058      	beq.n	d9d8 <am_hal_gpio_pinconfig+0x17c>
    d926:	2901      	cmp	r1, #1
    d928:	ea4f 01c4 	mov.w	r1, r4, lsl #3
    d92c:	bf08      	it	eq
    d92e:	f043 0304 	orreq.w	r3, r3, #4
    d932:	f001 0118 	and.w	r1, r1, #24
    d936:	2700      	movs	r7, #0
    d938:	f000 001c 	and.w	r0, r0, #28
    d93c:	fa02 f600 	lsl.w	r6, r2, r0
    d940:	220f      	movs	r2, #15
    d942:	4082      	lsls	r2, r0
    d944:	43d2      	mvns	r2, r2
    d946:	f04f 09ff 	mov.w	r9, #255	; 0xff
    d94a:	fa03 f501 	lsl.w	r5, r3, r1
    d94e:	fa09 f901 	lsl.w	r9, r9, r1
    d952:	9201      	str	r2, [sp, #4]
    d954:	f000 f900 	bl	db58 <am_hal_interrupt_master_disable>
    d958:	f024 0a03 	bic.w	sl, r4, #3
    d95c:	ea4f 0b54 	mov.w	fp, r4, lsr #1
    d960:	f10a 4c80 	add.w	ip, sl, #1073741824	; 0x40000000
    d964:	4b4e      	ldr	r3, [pc, #312]	; (daa0 <am_hal_gpio_pinconfig+0x244>)
    d966:	494f      	ldr	r1, [pc, #316]	; (daa4 <am_hal_gpio_pinconfig+0x248>)
    d968:	9a01      	ldr	r2, [sp, #4]
    d96a:	9003      	str	r0, [sp, #12]
    d96c:	ea6f 0909 	mvn.w	r9, r9
    d970:	f02b 0b03 	bic.w	fp, fp, #3
    d974:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
    d978:	f1b8 0f00 	cmp.w	r8, #0
    d97c:	d00b      	beq.n	d996 <am_hal_gpio_pinconfig+0x13a>
    d97e:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
    d982:	f004 081f 	and.w	r8, r4, #31
    d986:	4848      	ldr	r0, [pc, #288]	; (daa8 <am_hal_gpio_pinconfig+0x24c>)
    d988:	f00e 0e04 	and.w	lr, lr, #4
    d98c:	2401      	movs	r4, #1
    d98e:	fa04 f408 	lsl.w	r4, r4, r8
    d992:	f84e 4000 	str.w	r4, [lr, r0]
    d996:	4845      	ldr	r0, [pc, #276]	; (daac <am_hal_gpio_pinconfig+0x250>)
    d998:	2473      	movs	r4, #115	; 0x73
    d99a:	6604      	str	r4, [r0, #96]	; 0x60
    d99c:	f8dc 4000 	ldr.w	r4, [ip]
    d9a0:	ea04 0409 	and.w	r4, r4, r9
    d9a4:	4325      	orrs	r5, r4
    d9a6:	f8cc 5000 	str.w	r5, [ip]
    d9aa:	f85b 4003 	ldr.w	r4, [fp, r3]
    d9ae:	4022      	ands	r2, r4
    d9b0:	4332      	orrs	r2, r6
    d9b2:	f84b 2003 	str.w	r2, [fp, r3]
    d9b6:	f85a 3001 	ldr.w	r3, [sl, r1]
    d9ba:	ea03 0909 	and.w	r9, r3, r9
    d9be:	2400      	movs	r4, #0
    d9c0:	ea49 0707 	orr.w	r7, r9, r7
    d9c4:	f84a 7001 	str.w	r7, [sl, r1]
    d9c8:	6604      	str	r4, [r0, #96]	; 0x60
    d9ca:	9803      	ldr	r0, [sp, #12]
    d9cc:	f000 f8c8 	bl	db60 <am_hal_interrupt_master_set>
    d9d0:	4620      	mov	r0, r4
    d9d2:	b005      	add	sp, #20
    d9d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d9d8:	f043 0304 	orr.w	r3, r3, #4
    d9dc:	00e1      	lsls	r1, r4, #3
    d9de:	f001 0118 	and.w	r1, r1, #24
    d9e2:	2701      	movs	r7, #1
    d9e4:	408f      	lsls	r7, r1
    d9e6:	e7a7      	b.n	d938 <am_hal_gpio_pinconfig+0xdc>
    d9e8:	2006      	movs	r0, #6
    d9ea:	4770      	bx	lr
    d9ec:	4d28      	ldr	r5, [pc, #160]	; (da90 <am_hal_gpio_pinconfig+0x234>)
    d9ee:	5d2d      	ldrb	r5, [r5, r4]
    d9f0:	3e02      	subs	r6, #2
    d9f2:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    d9f6:	07ee      	lsls	r6, r5, #31
    d9f8:	d536      	bpl.n	da68 <am_hal_gpio_pinconfig+0x20c>
    d9fa:	2b00      	cmp	r3, #0
    d9fc:	f43f af5c 	beq.w	d8b8 <am_hal_gpio_pinconfig+0x5c>
    da00:	e74d      	b.n	d89e <am_hal_gpio_pinconfig+0x42>
    da02:	f3c1 4202 	ubfx	r2, r1, #16, #3
    da06:	2a07      	cmp	r2, #7
    da08:	d030      	beq.n	da6c <am_hal_gpio_pinconfig+0x210>
    da0a:	4d29      	ldr	r5, [pc, #164]	; (dab0 <am_hal_gpio_pinconfig+0x254>)
    da0c:	f3c1 40c1 	ubfx	r0, r1, #19, #2
    da10:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    da14:	f815 0024 	ldrb.w	r0, [r5, r4, lsl #2]
    da18:	4290      	cmp	r0, r2
    da1a:	d029      	beq.n	da70 <am_hal_gpio_pinconfig+0x214>
    da1c:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    da20:	00a0      	lsls	r0, r4, #2
    da22:	786e      	ldrb	r6, [r5, #1]
    da24:	4296      	cmp	r6, r2
    da26:	d02d      	beq.n	da84 <am_hal_gpio_pinconfig+0x228>
    da28:	78ae      	ldrb	r6, [r5, #2]
    da2a:	4296      	cmp	r6, r2
    da2c:	d02c      	beq.n	da88 <am_hal_gpio_pinconfig+0x22c>
    da2e:	78ed      	ldrb	r5, [r5, #3]
    da30:	4295      	cmp	r5, r2
    da32:	d02b      	beq.n	da8c <am_hal_gpio_pinconfig+0x230>
    da34:	481f      	ldr	r0, [pc, #124]	; (dab4 <am_hal_gpio_pinconfig+0x258>)
    da36:	b005      	add	sp, #20
    da38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da3c:	481e      	ldr	r0, [pc, #120]	; (dab8 <am_hal_gpio_pinconfig+0x25c>)
    da3e:	b005      	add	sp, #20
    da40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da44:	f04f 0801 	mov.w	r8, #1
    da48:	e75f      	b.n	d90a <am_hal_gpio_pinconfig+0xae>
    da4a:	4b11      	ldr	r3, [pc, #68]	; (da90 <am_hal_gpio_pinconfig+0x234>)
    da4c:	5d1b      	ldrb	r3, [r3, r4]
    da4e:	079d      	lsls	r5, r3, #30
    da50:	d5f4      	bpl.n	da3c <am_hal_gpio_pinconfig+0x1e0>
    da52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    da56:	e72f      	b.n	d8b8 <am_hal_gpio_pinconfig+0x5c>
    da58:	2c14      	cmp	r4, #20
    da5a:	f43f af1f 	beq.w	d89c <am_hal_gpio_pinconfig+0x40>
    da5e:	4817      	ldr	r0, [pc, #92]	; (dabc <am_hal_gpio_pinconfig+0x260>)
    da60:	e7b7      	b.n	d9d2 <am_hal_gpio_pinconfig+0x176>
    da62:	2c14      	cmp	r4, #20
    da64:	f47f af1a 	bne.w	d89c <am_hal_gpio_pinconfig+0x40>
    da68:	4815      	ldr	r0, [pc, #84]	; (dac0 <am_hal_gpio_pinconfig+0x264>)
    da6a:	e7b2      	b.n	d9d2 <am_hal_gpio_pinconfig+0x176>
    da6c:	4815      	ldr	r0, [pc, #84]	; (dac4 <am_hal_gpio_pinconfig+0x268>)
    da6e:	e7b0      	b.n	d9d2 <am_hal_gpio_pinconfig+0x176>
    da70:	2200      	movs	r2, #0
    da72:	00a0      	lsls	r0, r4, #2
    da74:	0052      	lsls	r2, r2, #1
    da76:	f3c1 5540 	ubfx	r5, r1, #21, #1
    da7a:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
    da7e:	f04f 0800 	mov.w	r8, #0
    da82:	e74a      	b.n	d91a <am_hal_gpio_pinconfig+0xbe>
    da84:	2201      	movs	r2, #1
    da86:	e7f5      	b.n	da74 <am_hal_gpio_pinconfig+0x218>
    da88:	2202      	movs	r2, #2
    da8a:	e7f3      	b.n	da74 <am_hal_gpio_pinconfig+0x218>
    da8c:	2203      	movs	r2, #3
    da8e:	e7f1      	b.n	da74 <am_hal_gpio_pinconfig+0x218>
    da90:	0000e704 	.word	0x0000e704
    da94:	0000e738 	.word	0x0000e738
    da98:	0000e834 	.word	0x0000e834
    da9c:	0000e6fc 	.word	0x0000e6fc
    daa0:	40010040 	.word	0x40010040
    daa4:	400100e0 	.word	0x400100e0
    daa8:	400100b4 	.word	0x400100b4
    daac:	40010000 	.word	0x40010000
    dab0:	0000e76c 	.word	0x0000e76c
    dab4:	08000104 	.word	0x08000104
    dab8:	08000102 	.word	0x08000102
    dabc:	08000101 	.word	0x08000101
    dac0:	08000100 	.word	0x08000100
    dac4:	08000103 	.word	0x08000103

0000dac8 <am_hal_gpio_state_write>:
    dac8:	2831      	cmp	r0, #49	; 0x31
    daca:	d81a      	bhi.n	db02 <am_hal_gpio_state_write+0x3a>
    dacc:	b570      	push	{r4, r5, r6, lr}
    dace:	2905      	cmp	r1, #5
    dad0:	b082      	sub	sp, #8
    dad2:	460d      	mov	r5, r1
    dad4:	d812      	bhi.n	dafc <am_hal_gpio_state_write+0x34>
    dad6:	f000 031f 	and.w	r3, r0, #31
    dada:	2201      	movs	r2, #1
    dadc:	08c0      	lsrs	r0, r0, #3
    dade:	fa02 f603 	lsl.w	r6, r2, r3
    dae2:	f000 0404 	and.w	r4, r0, #4
    dae6:	f000 f837 	bl	db58 <am_hal_interrupt_master_disable>
    daea:	3d01      	subs	r5, #1
    daec:	9001      	str	r0, [sp, #4]
    daee:	2d04      	cmp	r5, #4
    daf0:	d821      	bhi.n	db36 <am_hal_gpio_state_write+0x6e>
    daf2:	e8df f005 	tbb	[pc, r5]
    daf6:	1512      	.short	0x1512
    daf8:	1d1a      	.short	0x1d1a
    dafa:	08          	.byte	0x08
    dafb:	00          	.byte	0x00
    dafc:	2006      	movs	r0, #6
    dafe:	b002      	add	sp, #8
    db00:	bd70      	pop	{r4, r5, r6, pc}
    db02:	2005      	movs	r0, #5
    db04:	4770      	bx	lr
    db06:	4a0d      	ldr	r2, [pc, #52]	; (db3c <am_hal_gpio_state_write+0x74>)
    db08:	58a3      	ldr	r3, [r4, r2]
    db0a:	4073      	eors	r3, r6
    db0c:	50a3      	str	r3, [r4, r2]
    db0e:	9801      	ldr	r0, [sp, #4]
    db10:	f000 f826 	bl	db60 <am_hal_interrupt_master_set>
    db14:	2000      	movs	r0, #0
    db16:	b002      	add	sp, #8
    db18:	bd70      	pop	{r4, r5, r6, pc}
    db1a:	4b09      	ldr	r3, [pc, #36]	; (db40 <am_hal_gpio_state_write+0x78>)
    db1c:	50e6      	str	r6, [r4, r3]
    db1e:	e7f6      	b.n	db0e <am_hal_gpio_state_write+0x46>
    db20:	4a08      	ldr	r2, [pc, #32]	; (db44 <am_hal_gpio_state_write+0x7c>)
    db22:	58a3      	ldr	r3, [r4, r2]
    db24:	4073      	eors	r3, r6
    db26:	50a3      	str	r3, [r4, r2]
    db28:	e7f1      	b.n	db0e <am_hal_gpio_state_write+0x46>
    db2a:	4b04      	ldr	r3, [pc, #16]	; (db3c <am_hal_gpio_state_write+0x74>)
    db2c:	50e6      	str	r6, [r4, r3]
    db2e:	e7ee      	b.n	db0e <am_hal_gpio_state_write+0x46>
    db30:	4b05      	ldr	r3, [pc, #20]	; (db48 <am_hal_gpio_state_write+0x80>)
    db32:	50e6      	str	r6, [r4, r3]
    db34:	e7eb      	b.n	db0e <am_hal_gpio_state_write+0x46>
    db36:	4b05      	ldr	r3, [pc, #20]	; (db4c <am_hal_gpio_state_write+0x84>)
    db38:	50e6      	str	r6, [r4, r3]
    db3a:	e7e8      	b.n	db0e <am_hal_gpio_state_write+0x46>
    db3c:	400100b4 	.word	0x400100b4
    db40:	40010090 	.word	0x40010090
    db44:	40010088 	.word	0x40010088
    db48:	400100a8 	.word	0x400100a8
    db4c:	40010098 	.word	0x40010098

0000db50 <am_hal_interrupt_master_enable>:
    db50:	f3ef 8010 	mrs	r0, PRIMASK
    db54:	b662      	cpsie	i
    db56:	4770      	bx	lr

0000db58 <am_hal_interrupt_master_disable>:
    db58:	f3ef 8010 	mrs	r0, PRIMASK
    db5c:	b672      	cpsid	i
    db5e:	4770      	bx	lr

0000db60 <am_hal_interrupt_master_set>:
    db60:	f380 8810 	msr	PRIMASK, r0
    db64:	4770      	bx	lr
    db66:	bf00      	nop

0000db68 <am_hal_ios_power_ctrl>:
    db68:	2800      	cmp	r0, #0
    db6a:	d04c      	beq.n	dc06 <am_hal_ios_power_ctrl+0x9e>
    db6c:	b510      	push	{r4, lr}
    db6e:	6803      	ldr	r3, [r0, #0]
    db70:	4604      	mov	r4, r0
    db72:	482b      	ldr	r0, [pc, #172]	; (dc20 <am_hal_ios_power_ctrl+0xb8>)
    db74:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    db78:	4283      	cmp	r3, r0
    db7a:	b082      	sub	sp, #8
    db7c:	d11f      	bne.n	dbbe <am_hal_ios_power_ctrl+0x56>
    db7e:	b321      	cbz	r1, dbca <am_hal_ios_power_ctrl+0x62>
    db80:	3901      	subs	r1, #1
    db82:	2901      	cmp	r1, #1
    db84:	d81e      	bhi.n	dbc4 <am_hal_ios_power_ctrl+0x5c>
    db86:	b192      	cbz	r2, dbae <am_hal_ios_power_ctrl+0x46>
    db88:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    db8c:	2201      	movs	r2, #1
    db8e:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    db92:	60e1      	str	r1, [r4, #12]
    db94:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
    db98:	6121      	str	r1, [r4, #16]
    db9a:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
    db9e:	6161      	str	r1, [r4, #20]
    dba0:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
    dba4:	61a1      	str	r1, [r4, #24]
    dba6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    dbaa:	61e3      	str	r3, [r4, #28]
    dbac:	7222      	strb	r2, [r4, #8]
    dbae:	6860      	ldr	r0, [r4, #4]
    dbb0:	3001      	adds	r0, #1
    dbb2:	b2c0      	uxtb	r0, r0
    dbb4:	f000 faf2 	bl	e19c <am_hal_pwrctrl_periph_disable>
    dbb8:	2000      	movs	r0, #0
    dbba:	b002      	add	sp, #8
    dbbc:	bd10      	pop	{r4, pc}
    dbbe:	2002      	movs	r0, #2
    dbc0:	b002      	add	sp, #8
    dbc2:	bd10      	pop	{r4, pc}
    dbc4:	2006      	movs	r0, #6
    dbc6:	b002      	add	sp, #8
    dbc8:	bd10      	pop	{r4, pc}
    dbca:	b1f2      	cbz	r2, dc0a <am_hal_ios_power_ctrl+0xa2>
    dbcc:	7a23      	ldrb	r3, [r4, #8]
    dbce:	b32b      	cbz	r3, dc1c <am_hal_ios_power_ctrl+0xb4>
    dbd0:	6860      	ldr	r0, [r4, #4]
    dbd2:	9101      	str	r1, [sp, #4]
    dbd4:	3001      	adds	r0, #1
    dbd6:	b2c0      	uxtb	r0, r0
    dbd8:	f000 fab6 	bl	e148 <am_hal_pwrctrl_periph_enable>
    dbdc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    dbe0:	68e2      	ldr	r2, [r4, #12]
    dbe2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    dbe6:	6922      	ldr	r2, [r4, #16]
    dbe8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    dbec:	6962      	ldr	r2, [r4, #20]
    dbee:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    dbf2:	69a2      	ldr	r2, [r4, #24]
    dbf4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    dbf8:	9901      	ldr	r1, [sp, #4]
    dbfa:	69e2      	ldr	r2, [r4, #28]
    dbfc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    dc00:	4608      	mov	r0, r1
    dc02:	7221      	strb	r1, [r4, #8]
    dc04:	e7dc      	b.n	dbc0 <am_hal_ios_power_ctrl+0x58>
    dc06:	2002      	movs	r0, #2
    dc08:	4770      	bx	lr
    dc0a:	6860      	ldr	r0, [r4, #4]
    dc0c:	9201      	str	r2, [sp, #4]
    dc0e:	3001      	adds	r0, #1
    dc10:	b2c0      	uxtb	r0, r0
    dc12:	f000 fa99 	bl	e148 <am_hal_pwrctrl_periph_enable>
    dc16:	9a01      	ldr	r2, [sp, #4]
    dc18:	4610      	mov	r0, r2
    dc1a:	e7d1      	b.n	dbc0 <am_hal_ios_power_ctrl+0x58>
    dc1c:	2007      	movs	r0, #7
    dc1e:	e7cf      	b.n	dbc0 <am_hal_ios_power_ctrl+0x58>
    dc20:	01123456 	.word	0x01123456

0000dc24 <am_hal_ios_initialize>:
    dc24:	b990      	cbnz	r0, dc4c <am_hal_ios_initialize+0x28>
    dc26:	b1a9      	cbz	r1, dc54 <am_hal_ios_initialize+0x30>
    dc28:	4b0b      	ldr	r3, [pc, #44]	; (dc58 <am_hal_ios_initialize+0x34>)
    dc2a:	78d8      	ldrb	r0, [r3, #3]
    dc2c:	f010 0001 	ands.w	r0, r0, #1
    dc30:	d10e      	bne.n	dc50 <am_hal_ios_initialize+0x2c>
    dc32:	b410      	push	{r4}
    dc34:	681c      	ldr	r4, [r3, #0]
    dc36:	4a09      	ldr	r2, [pc, #36]	; (dc5c <am_hal_ios_initialize+0x38>)
    dc38:	f004 4c7c 	and.w	ip, r4, #4227858432	; 0xfc000000
    dc3c:	ea4c 0202 	orr.w	r2, ip, r2
    dc40:	e9c3 2000 	strd	r2, r0, [r3]
    dc44:	f85d 4b04 	ldr.w	r4, [sp], #4
    dc48:	600b      	str	r3, [r1, #0]
    dc4a:	4770      	bx	lr
    dc4c:	2005      	movs	r0, #5
    dc4e:	4770      	bx	lr
    dc50:	2007      	movs	r0, #7
    dc52:	4770      	bx	lr
    dc54:	2006      	movs	r0, #6
    dc56:	4770      	bx	lr
    dc58:	100011f4 	.word	0x100011f4
    dc5c:	01123456 	.word	0x01123456

0000dc60 <am_hal_ios_configure>:
    dc60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dc64:	b083      	sub	sp, #12
    dc66:	2800      	cmp	r0, #0
    dc68:	f000 80b8 	beq.w	dddc <am_hal_ios_configure+0x17c>
    dc6c:	6803      	ldr	r3, [r0, #0]
    dc6e:	4a76      	ldr	r2, [pc, #472]	; (de48 <am_hal_ios_configure+0x1e8>)
    dc70:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dc74:	4293      	cmp	r3, r2
    dc76:	4604      	mov	r4, r0
    dc78:	f040 80b0 	bne.w	dddc <am_hal_ios_configure+0x17c>
    dc7c:	460d      	mov	r5, r1
    dc7e:	2900      	cmp	r1, #0
    dc80:	f000 80b1 	beq.w	dde6 <am_hal_ios_configure+0x186>
    dc84:	6846      	ldr	r6, [r0, #4]
    dc86:	2e00      	cmp	r6, #0
    dc88:	f040 80ad 	bne.w	dde6 <am_hal_ios_configure+0x186>
    dc8c:	78c3      	ldrb	r3, [r0, #3]
    dc8e:	0799      	lsls	r1, r3, #30
    dc90:	f100 80c2 	bmi.w	de18 <am_hal_ios_configure+0x1b8>
    dc94:	2001      	movs	r0, #1
    dc96:	f000 fa57 	bl	e148 <am_hal_pwrctrl_periph_enable>
    dc9a:	68af      	ldr	r7, [r5, #8]
    dc9c:	68ea      	ldr	r2, [r5, #12]
    dc9e:	6327      	str	r7, [r4, #48]	; 0x30
    dca0:	f102 43a0 	add.w	r3, r2, #1342177280	; 0x50000000
    dca4:	f107 48a0 	add.w	r8, r7, #1342177280	; 0x50000000
    dca8:	6263      	str	r3, [r4, #36]	; 0x24
    dcaa:	eba3 0308 	sub.w	r3, r3, r8
    dcae:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    dcb2:	69a9      	ldr	r1, [r5, #24]
    dcb4:	f8c4 8020 	str.w	r8, [r4, #32]
    dcb8:	b2db      	uxtb	r3, r3
    dcba:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
    dcbe:	4299      	cmp	r1, r3
    dcc0:	bf84      	itt	hi
    dcc2:	4619      	movhi	r1, r3
    dcc4:	61ab      	strhi	r3, [r5, #24]
    dcc6:	686b      	ldr	r3, [r5, #4]
    dcc8:	4860      	ldr	r0, [pc, #384]	; (de4c <am_hal_ios_configure+0x1ec>)
    dcca:	f8df e17c 	ldr.w	lr, [pc, #380]	; de48 <am_hal_ios_configure+0x1e8>
    dcce:	0152      	lsls	r2, r2, #5
    dcd0:	055b      	lsls	r3, r3, #21
    dcd2:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
    dcd6:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
    dcda:	4313      	orrs	r3, r2
    dcdc:	6822      	ldr	r2, [r4, #0]
    dcde:	6101      	str	r1, [r0, #16]
    dce0:	f022 4c7e 	bic.w	ip, r2, #4261412864	; 0xfe000000
    dce4:	6969      	ldr	r1, [r5, #20]
    dce6:	6001      	str	r1, [r0, #0]
    dce8:	2200      	movs	r2, #0
    dcea:	f3c7 01c4 	ubfx	r1, r7, #3, #5
    dcee:	45f4      	cmp	ip, lr
    dcf0:	6042      	str	r2, [r0, #4]
    dcf2:	ea43 0301 	orr.w	r3, r3, r1
    dcf6:	6082      	str	r2, [r0, #8]
    dcf8:	60c2      	str	r2, [r0, #12]
    dcfa:	d179      	bne.n	ddf0 <am_hal_ios_configure+0x190>
    dcfc:	78e1      	ldrb	r1, [r4, #3]
    dcfe:	f011 0102 	ands.w	r1, r1, #2
    dd02:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    dd06:	f000 808c 	beq.w	de22 <am_hal_ios_configure+0x1c2>
    dd0a:	f8d0 1118 	ldr.w	r1, [r0, #280]	; 0x118
    dd0e:	f894 e003 	ldrb.w	lr, [r4, #3]
    dd12:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    dd16:	f362 0e41 	bfi	lr, r2, #1, #1
    dd1a:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    dd1e:	f884 e003 	strb.w	lr, [r4, #3]
    dd22:	6829      	ldr	r1, [r5, #0]
    dd24:	f8d4 e000 	ldr.w	lr, [r4]
    dd28:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    dd2c:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    dd30:	f8b0 1110 	ldrh.w	r1, [r0, #272]	; 0x110
    dd34:	f362 0109 	bfi	r1, r2, #0, #10
    dd38:	f8a0 1110 	strh.w	r1, [r0, #272]	; 0x110
    dd3c:	f8b0 1100 	ldrh.w	r1, [r0, #256]	; 0x100
    dd40:	f02e 437e 	bic.w	r3, lr, #4261412864	; 0xfe000000
    dd44:	f362 210f 	bfi	r1, r2, #8, #8
    dd48:	4563      	cmp	r3, ip
    dd4a:	f8a0 1100 	strh.w	r1, [r0, #256]	; 0x100
    dd4e:	d13c      	bne.n	ddca <am_hal_ios_configure+0x16a>
    dd50:	f7ff ff02 	bl	db58 <am_hal_interrupt_master_disable>
    dd54:	f04f 49a0 	mov.w	r9, #1342177280	; 0x50000000
    dd58:	2301      	movs	r3, #1
    dd5a:	9000      	str	r0, [sp, #0]
    dd5c:	f8c9 310c 	str.w	r3, [r9, #268]	; 0x10c
    dd60:	2300      	movs	r3, #0
    dd62:	f8c9 7100 	str.w	r7, [r9, #256]	; 0x100
    dd66:	f8c9 310c 	str.w	r3, [r9, #268]	; 0x10c
    dd6a:	9800      	ldr	r0, [sp, #0]
    dd6c:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
    dd70:	f7ff fef6 	bl	db60 <am_hal_interrupt_master_set>
    dd74:	6823      	ldr	r3, [r4, #0]
    dd76:	4a34      	ldr	r2, [pc, #208]	; (de48 <am_hal_ios_configure+0x1e8>)
    dd78:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dd7c:	4293      	cmp	r3, r2
    dd7e:	d124      	bne.n	ddca <am_hal_ios_configure+0x16a>
    dd80:	78e2      	ldrb	r2, [r4, #3]
    dd82:	0792      	lsls	r2, r2, #30
    dd84:	d40e      	bmi.n	dda4 <am_hal_ios_configure+0x144>
    dd86:	f8d9 2118 	ldr.w	r2, [r9, #280]	; 0x118
    dd8a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    dd8e:	f8c9 2118 	str.w	r2, [r9, #280]	; 0x118
    dd92:	78e2      	ldrb	r2, [r4, #3]
    dd94:	f042 0202 	orr.w	r2, r2, #2
    dd98:	70e2      	strb	r2, [r4, #3]
    dd9a:	6822      	ldr	r2, [r4, #0]
    dd9c:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    dda0:	429a      	cmp	r2, r3
    dda2:	d112      	bne.n	ddca <am_hal_ios_configure+0x16a>
    dda4:	68af      	ldr	r7, [r5, #8]
    dda6:	f7ff fed7 	bl	db58 <am_hal_interrupt_master_disable>
    ddaa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    ddae:	2201      	movs	r2, #1
    ddb0:	9001      	str	r0, [sp, #4]
    ddb2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    ddb6:	2200      	movs	r2, #0
    ddb8:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
    ddbc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    ddc0:	441f      	add	r7, r3
    ddc2:	9801      	ldr	r0, [sp, #4]
    ddc4:	62a7      	str	r7, [r4, #40]	; 0x28
    ddc6:	f7ff fecb 	bl	db60 <am_hal_interrupt_master_set>
    ddca:	692a      	ldr	r2, [r5, #16]
    ddcc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    ddd0:	4630      	mov	r0, r6
    ddd2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    ddd6:	b003      	add	sp, #12
    ddd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    dddc:	2602      	movs	r6, #2
    ddde:	4630      	mov	r0, r6
    dde0:	b003      	add	sp, #12
    dde2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    dde6:	2606      	movs	r6, #6
    dde8:	4630      	mov	r0, r6
    ddea:	b003      	add	sp, #12
    ddec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ddf0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    ddf4:	6828      	ldr	r0, [r5, #0]
    ddf6:	f8c1 0118 	str.w	r0, [r1, #280]	; 0x118
    ddfa:	f8c1 3104 	str.w	r3, [r1, #260]	; 0x104
    ddfe:	f8b1 3110 	ldrh.w	r3, [r1, #272]	; 0x110
    de02:	f362 0309 	bfi	r3, r2, #0, #10
    de06:	f8a1 3110 	strh.w	r3, [r1, #272]	; 0x110
    de0a:	f8b1 3100 	ldrh.w	r3, [r1, #256]	; 0x100
    de0e:	f362 230f 	bfi	r3, r2, #8, #8
    de12:	f8a1 3100 	strh.w	r3, [r1, #256]	; 0x100
    de16:	e7d8      	b.n	ddca <am_hal_ios_configure+0x16a>
    de18:	2607      	movs	r6, #7
    de1a:	4630      	mov	r0, r6
    de1c:	b003      	add	sp, #12
    de1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    de22:	682a      	ldr	r2, [r5, #0]
    de24:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
    de28:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    de2c:	f8b0 3110 	ldrh.w	r3, [r0, #272]	; 0x110
    de30:	f361 0309 	bfi	r3, r1, #0, #10
    de34:	f8a0 3110 	strh.w	r3, [r0, #272]	; 0x110
    de38:	f8b0 3100 	ldrh.w	r3, [r0, #256]	; 0x100
    de3c:	f361 230f 	bfi	r3, r1, #8, #8
    de40:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
    de44:	e784      	b.n	dd50 <am_hal_ios_configure+0xf0>
    de46:	bf00      	nop
    de48:	01123456 	.word	0x01123456
    de4c:	10001228 	.word	0x10001228

0000de50 <am_hal_ios_interrupt_enable>:
    de50:	b170      	cbz	r0, de70 <am_hal_ios_interrupt_enable+0x20>
    de52:	6803      	ldr	r3, [r0, #0]
    de54:	4a07      	ldr	r2, [pc, #28]	; (de74 <am_hal_ios_interrupt_enable+0x24>)
    de56:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    de5a:	4293      	cmp	r3, r2
    de5c:	d108      	bne.n	de70 <am_hal_ios_interrupt_enable+0x20>
    de5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    de62:	2000      	movs	r0, #0
    de64:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    de68:	4319      	orrs	r1, r3
    de6a:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    de6e:	4770      	bx	lr
    de70:	2002      	movs	r0, #2
    de72:	4770      	bx	lr
    de74:	01123456 	.word	0x01123456

0000de78 <am_hal_ios_interrupt_clear>:
    de78:	b158      	cbz	r0, de92 <am_hal_ios_interrupt_clear+0x1a>
    de7a:	6803      	ldr	r3, [r0, #0]
    de7c:	4a06      	ldr	r2, [pc, #24]	; (de98 <am_hal_ios_interrupt_clear+0x20>)
    de7e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    de82:	4293      	cmp	r3, r2
    de84:	d105      	bne.n	de92 <am_hal_ios_interrupt_clear+0x1a>
    de86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    de8a:	2000      	movs	r0, #0
    de8c:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    de90:	4770      	bx	lr
    de92:	2002      	movs	r0, #2
    de94:	4770      	bx	lr
    de96:	bf00      	nop
    de98:	01123456 	.word	0x01123456

0000de9c <am_hal_ios_interrupt_status_get>:
    de9c:	b188      	cbz	r0, dec2 <am_hal_ios_interrupt_status_get+0x26>
    de9e:	6803      	ldr	r3, [r0, #0]
    dea0:	480a      	ldr	r0, [pc, #40]	; (decc <am_hal_ios_interrupt_status_get+0x30>)
    dea2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dea6:	4283      	cmp	r3, r0
    dea8:	d10b      	bne.n	dec2 <am_hal_ios_interrupt_status_get+0x26>
    deaa:	b162      	cbz	r2, dec6 <am_hal_ios_interrupt_status_get+0x2a>
    deac:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    deb0:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
    deb4:	b111      	cbz	r1, debc <am_hal_ios_interrupt_status_get+0x20>
    deb6:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    deba:	400b      	ands	r3, r1
    debc:	6013      	str	r3, [r2, #0]
    debe:	2000      	movs	r0, #0
    dec0:	4770      	bx	lr
    dec2:	2002      	movs	r0, #2
    dec4:	4770      	bx	lr
    dec6:	2006      	movs	r0, #6
    dec8:	4770      	bx	lr
    deca:	bf00      	nop
    decc:	01123456 	.word	0x01123456

0000ded0 <am_hal_ios_interrupt_service>:
    ded0:	2800      	cmp	r0, #0
    ded2:	f000 8092 	beq.w	dffa <am_hal_ios_interrupt_service+0x12a>
    ded6:	6803      	ldr	r3, [r0, #0]
    ded8:	4a59      	ldr	r2, [pc, #356]	; (e040 <am_hal_ios_interrupt_service+0x170>)
    deda:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dede:	4293      	cmp	r3, r2
    dee0:	f040 808b 	bne.w	dffa <am_hal_ios_interrupt_service+0x12a>
    dee4:	07cb      	lsls	r3, r1, #31
    dee6:	d543      	bpl.n	df70 <am_hal_ios_interrupt_service+0xa0>
    dee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    deec:	4955      	ldr	r1, [pc, #340]	; (e044 <am_hal_ios_interrupt_service+0x174>)
    deee:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
    def2:	f8dc 2108 	ldr.w	r2, [ip, #264]	; 0x108
    def6:	68cb      	ldr	r3, [r1, #12]
    def8:	fa5f fe82 	uxtb.w	lr, r2
    defc:	2b00      	cmp	r3, #0
    defe:	d034      	beq.n	df6a <am_hal_ios_interrupt_service+0x9a>
    df00:	f8dc 3100 	ldr.w	r3, [ip, #256]	; 0x100
    df04:	f3c3 2307 	ubfx	r3, r3, #8, #8
    df08:	459e      	cmp	lr, r3
    df0a:	d32e      	bcc.n	df6a <am_hal_ios_interrupt_service+0x9a>
    df0c:	684c      	ldr	r4, [r1, #4]
    df0e:	688a      	ldr	r2, [r1, #8]
    df10:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
    df14:	42a2      	cmp	r2, r4
    df16:	bf28      	it	cs
    df18:	690c      	ldrcs	r4, [r1, #16]
    df1a:	688a      	ldr	r2, [r1, #8]
    df1c:	f8d1 800c 	ldr.w	r8, [r1, #12]
    df20:	43db      	mvns	r3, r3
    df22:	1aa4      	subs	r4, r4, r2
    df24:	441d      	add	r5, r3
    df26:	680a      	ldr	r2, [r1, #0]
    df28:	688b      	ldr	r3, [r1, #8]
    df2a:	42ac      	cmp	r4, r5
    df2c:	441a      	add	r2, r3
    df2e:	6a83      	ldr	r3, [r0, #40]	; 0x28
    df30:	d924      	bls.n	df7c <am_hal_ios_interrupt_service+0xac>
    df32:	e9d0 8608 	ldrd	r8, r6, [r0, #32]
    df36:	b145      	cbz	r5, df4a <am_hal_ios_interrupt_service+0x7a>
    df38:	1957      	adds	r7, r2, r5
    df3a:	f812 4b01 	ldrb.w	r4, [r2], #1
    df3e:	f803 4b01 	strb.w	r4, [r3], #1
    df42:	429e      	cmp	r6, r3
    df44:	d016      	beq.n	df74 <am_hal_ios_interrupt_service+0xa4>
    df46:	42ba      	cmp	r2, r7
    df48:	d1f7      	bne.n	df3a <am_hal_ios_interrupt_service+0x6a>
    df4a:	688a      	ldr	r2, [r1, #8]
    df4c:	6283      	str	r3, [r0, #40]	; 0x28
    df4e:	442a      	add	r2, r5
    df50:	608a      	str	r2, [r1, #8]
    df52:	68cb      	ldr	r3, [r1, #12]
    df54:	1b5d      	subs	r5, r3, r5
    df56:	60cd      	str	r5, [r1, #12]
    df58:	f8bc 3208 	ldrh.w	r3, [ip, #520]	; 0x208
    df5c:	f043 0301 	orr.w	r3, r3, #1
    df60:	f8ac 3208 	strh.w	r3, [ip, #520]	; 0x208
    df64:	68cb      	ldr	r3, [r1, #12]
    df66:	2b00      	cmp	r3, #0
    df68:	d1ca      	bne.n	df00 <am_hal_ios_interrupt_service+0x30>
    df6a:	2000      	movs	r0, #0
    df6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    df70:	2000      	movs	r0, #0
    df72:	4770      	bx	lr
    df74:	42ba      	cmp	r2, r7
    df76:	4643      	mov	r3, r8
    df78:	d1df      	bne.n	df3a <am_hal_ios_interrupt_service+0x6a>
    df7a:	e7e6      	b.n	df4a <am_hal_ios_interrupt_service+0x7a>
    df7c:	e9d0 a708 	ldrd	sl, r7, [r0, #32]
    df80:	b14c      	cbz	r4, df96 <am_hal_ios_interrupt_service+0xc6>
    df82:	eb02 0904 	add.w	r9, r2, r4
    df86:	f812 6b01 	ldrb.w	r6, [r2], #1
    df8a:	f803 6b01 	strb.w	r6, [r3], #1
    df8e:	429f      	cmp	r7, r3
    df90:	d02f      	beq.n	dff2 <am_hal_ios_interrupt_service+0x122>
    df92:	4591      	cmp	r9, r2
    df94:	d1f7      	bne.n	df86 <am_hal_ios_interrupt_service+0xb6>
    df96:	688a      	ldr	r2, [r1, #8]
    df98:	690e      	ldr	r6, [r1, #16]
    df9a:	6283      	str	r3, [r0, #40]	; 0x28
    df9c:	4422      	add	r2, r4
    df9e:	608a      	str	r2, [r1, #8]
    dfa0:	688a      	ldr	r2, [r1, #8]
    dfa2:	fbb2 f7f6 	udiv	r7, r2, r6
    dfa6:	fb06 2217 	mls	r2, r6, r7, r2
    dfaa:	608a      	str	r2, [r1, #8]
    dfac:	68ca      	ldr	r2, [r1, #12]
    dfae:	1b2f      	subs	r7, r5, r4
    dfb0:	eba2 0204 	sub.w	r2, r2, r4
    dfb4:	60ca      	str	r2, [r1, #12]
    dfb6:	d0cf      	beq.n	df58 <am_hal_ios_interrupt_service+0x88>
    dfb8:	ebb8 0604 	subs.w	r6, r8, r4
    dfbc:	d0cc      	beq.n	df58 <am_hal_ios_interrupt_service+0x88>
    dfbe:	42be      	cmp	r6, r7
    dfc0:	d91d      	bls.n	dffe <am_hal_ios_interrupt_service+0x12e>
    dfc2:	688e      	ldr	r6, [r1, #8]
    dfc4:	680a      	ldr	r2, [r1, #0]
    dfc6:	e9d0 a808 	ldrd	sl, r8, [r0, #32]
    dfca:	4432      	add	r2, r6
    dfcc:	eb02 0907 	add.w	r9, r2, r7
    dfd0:	f812 6b01 	ldrb.w	r6, [r2], #1
    dfd4:	f803 6b01 	strb.w	r6, [r3], #1
    dfd8:	4598      	cmp	r8, r3
    dfda:	d029      	beq.n	e030 <am_hal_ios_interrupt_service+0x160>
    dfdc:	4591      	cmp	r9, r2
    dfde:	d1f7      	bne.n	dfd0 <am_hal_ios_interrupt_service+0x100>
    dfe0:	6283      	str	r3, [r0, #40]	; 0x28
    dfe2:	688b      	ldr	r3, [r1, #8]
    dfe4:	441f      	add	r7, r3
    dfe6:	608f      	str	r7, [r1, #8]
    dfe8:	68cb      	ldr	r3, [r1, #12]
    dfea:	1b5d      	subs	r5, r3, r5
    dfec:	442c      	add	r4, r5
    dfee:	60cc      	str	r4, [r1, #12]
    dff0:	e7b2      	b.n	df58 <am_hal_ios_interrupt_service+0x88>
    dff2:	4591      	cmp	r9, r2
    dff4:	4653      	mov	r3, sl
    dff6:	d1c6      	bne.n	df86 <am_hal_ios_interrupt_service+0xb6>
    dff8:	e7cd      	b.n	df96 <am_hal_ios_interrupt_service+0xc6>
    dffa:	2002      	movs	r0, #2
    dffc:	4770      	bx	lr
    dffe:	688d      	ldr	r5, [r1, #8]
    e000:	680a      	ldr	r2, [r1, #0]
    e002:	e9d0 a708 	ldrd	sl, r7, [r0, #32]
    e006:	442a      	add	r2, r5
    e008:	eb02 0906 	add.w	r9, r2, r6
    e00c:	f812 5b01 	ldrb.w	r5, [r2], #1
    e010:	f803 5b01 	strb.w	r5, [r3], #1
    e014:	429f      	cmp	r7, r3
    e016:	d00f      	beq.n	e038 <am_hal_ios_interrupt_service+0x168>
    e018:	454a      	cmp	r2, r9
    e01a:	d1f7      	bne.n	e00c <am_hal_ios_interrupt_service+0x13c>
    e01c:	6283      	str	r3, [r0, #40]	; 0x28
    e01e:	688b      	ldr	r3, [r1, #8]
    e020:	441e      	add	r6, r3
    e022:	608e      	str	r6, [r1, #8]
    e024:	68cb      	ldr	r3, [r1, #12]
    e026:	eba3 0808 	sub.w	r8, r3, r8
    e02a:	4444      	add	r4, r8
    e02c:	60cc      	str	r4, [r1, #12]
    e02e:	e793      	b.n	df58 <am_hal_ios_interrupt_service+0x88>
    e030:	4591      	cmp	r9, r2
    e032:	4653      	mov	r3, sl
    e034:	d1cc      	bne.n	dfd0 <am_hal_ios_interrupt_service+0x100>
    e036:	e7d3      	b.n	dfe0 <am_hal_ios_interrupt_service+0x110>
    e038:	454a      	cmp	r2, r9
    e03a:	4653      	mov	r3, sl
    e03c:	d1e6      	bne.n	e00c <am_hal_ios_interrupt_service+0x13c>
    e03e:	e7ed      	b.n	e01c <am_hal_ios_interrupt_service+0x14c>
    e040:	01123456 	.word	0x01123456
    e044:	10001228 	.word	0x10001228

0000e048 <am_hal_ios_control>:
    e048:	b188      	cbz	r0, e06e <am_hal_ios_control+0x26>
    e04a:	6803      	ldr	r3, [r0, #0]
    e04c:	483c      	ldr	r0, [pc, #240]	; (e140 <am_hal_ios_control+0xf8>)
    e04e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e052:	4283      	cmp	r3, r0
    e054:	d10b      	bne.n	e06e <am_hal_ios_control+0x26>
    e056:	2904      	cmp	r1, #4
    e058:	d800      	bhi.n	e05c <am_hal_ios_control+0x14>
    e05a:	b152      	cbz	r2, e072 <am_hal_ios_control+0x2a>
    e05c:	2908      	cmp	r1, #8
    e05e:	d832      	bhi.n	e0c6 <am_hal_ios_control+0x7e>
    e060:	e8df f001 	tbb	[pc, r1]
    e064:	463d332b 	.word	0x463d332b
    e068:	5611094e 	.word	0x5611094e
    e06c:	07          	.byte	0x07
    e06d:	00          	.byte	0x00
    e06e:	2002      	movs	r0, #2
    e070:	4770      	bx	lr
    e072:	2006      	movs	r0, #6
    e074:	4770      	bx	lr
    e076:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    e07a:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
    e07e:	f010 0002 	ands.w	r0, r0, #2
    e082:	d1fa      	bne.n	e07a <am_hal_ios_control+0x32>
    e084:	4770      	bx	lr
    e086:	b530      	push	{r4, r5, lr}
    e088:	b083      	sub	sp, #12
    e08a:	f7ff fd65 	bl	db58 <am_hal_interrupt_master_disable>
    e08e:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    e092:	4b2c      	ldr	r3, [pc, #176]	; (e144 <am_hal_ios_control+0xfc>)
    e094:	9001      	str	r0, [sp, #4]
    e096:	68db      	ldr	r3, [r3, #12]
    e098:	f8d5 4100 	ldr.w	r4, [r5, #256]	; 0x100
    e09c:	9801      	ldr	r0, [sp, #4]
    e09e:	f3c4 2407 	ubfx	r4, r4, #8, #8
    e0a2:	441c      	add	r4, r3
    e0a4:	f7ff fd5c 	bl	db60 <am_hal_interrupt_master_set>
    e0a8:	f8b5 3110 	ldrh.w	r3, [r5, #272]	; 0x110
    e0ac:	2000      	movs	r0, #0
    e0ae:	f364 0309 	bfi	r3, r4, #0, #10
    e0b2:	f8a5 3110 	strh.w	r3, [r5, #272]	; 0x110
    e0b6:	b003      	add	sp, #12
    e0b8:	bd30      	pop	{r4, r5, pc}
    e0ba:	6813      	ldr	r3, [r2, #0]
    e0bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    e0c0:	061b      	lsls	r3, r3, #24
    e0c2:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
    e0c6:	2000      	movs	r0, #0
    e0c8:	4770      	bx	lr
    e0ca:	6813      	ldr	r3, [r2, #0]
    e0cc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    e0d0:	041b      	lsls	r3, r3, #16
    e0d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    e0d6:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
    e0da:	2000      	movs	r0, #0
    e0dc:	4770      	bx	lr
    e0de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    e0e2:	2000      	movs	r0, #0
    e0e4:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
    e0e8:	f3c3 2307 	ubfx	r3, r3, #8, #8
    e0ec:	6013      	str	r3, [r2, #0]
    e0ee:	4770      	bx	lr
    e0f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    e0f4:	2000      	movs	r0, #0
    e0f6:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
    e0fa:	b2db      	uxtb	r3, r3
    e0fc:	6013      	str	r3, [r2, #0]
    e0fe:	4770      	bx	lr
    e100:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    e104:	2000      	movs	r0, #0
    e106:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    e10a:	b2db      	uxtb	r3, r3
    e10c:	6013      	str	r3, [r2, #0]
    e10e:	4770      	bx	lr
    e110:	4a0c      	ldr	r2, [pc, #48]	; (e144 <am_hal_ios_control+0xfc>)
    e112:	2300      	movs	r3, #0
    e114:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    e118:	6053      	str	r3, [r2, #4]
    e11a:	6093      	str	r3, [r2, #8]
    e11c:	60d3      	str	r3, [r2, #12]
    e11e:	f8b1 0110 	ldrh.w	r0, [r1, #272]	; 0x110
    e122:	6013      	str	r3, [r2, #0]
    e124:	f363 0009 	bfi	r0, r3, #0, #10
    e128:	6113      	str	r3, [r2, #16]
    e12a:	f8a1 0110 	strh.w	r0, [r1, #272]	; 0x110
    e12e:	f8b1 2100 	ldrh.w	r2, [r1, #256]	; 0x100
    e132:	f363 220f 	bfi	r2, r3, #8, #8
    e136:	4618      	mov	r0, r3
    e138:	f8a1 2100 	strh.w	r2, [r1, #256]	; 0x100
    e13c:	4770      	bx	lr
    e13e:	bf00      	nop
    e140:	01123456 	.word	0x01123456
    e144:	10001228 	.word	0x10001228

0000e148 <am_hal_pwrctrl_periph_enable>:
    e148:	b570      	push	{r4, r5, r6, lr}
    e14a:	b082      	sub	sp, #8
    e14c:	4604      	mov	r4, r0
    e14e:	f7ff fd03 	bl	db58 <am_hal_interrupt_master_disable>
    e152:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e156:	4e0f      	ldr	r6, [pc, #60]	; (e194 <am_hal_pwrctrl_periph_enable+0x4c>)
    e158:	4d0f      	ldr	r5, [pc, #60]	; (e198 <am_hal_pwrctrl_periph_enable+0x50>)
    e15a:	9001      	str	r0, [sp, #4]
    e15c:	00a4      	lsls	r4, r4, #2
    e15e:	68b3      	ldr	r3, [r6, #8]
    e160:	592a      	ldr	r2, [r5, r4]
    e162:	4313      	orrs	r3, r2
    e164:	60b3      	str	r3, [r6, #8]
    e166:	9801      	ldr	r0, [sp, #4]
    e168:	442c      	add	r4, r5
    e16a:	f7ff fcf9 	bl	db60 <am_hal_interrupt_master_set>
    e16e:	20a0      	movs	r0, #160	; 0xa0
    e170:	f7ff fb24 	bl	d7bc <am_hal_flash_delay>
    e174:	69b3      	ldr	r3, [r6, #24]
    e176:	6864      	ldr	r4, [r4, #4]
    e178:	4223      	tst	r3, r4
    e17a:	d103      	bne.n	e184 <am_hal_pwrctrl_periph_enable+0x3c>
    e17c:	20a0      	movs	r0, #160	; 0xa0
    e17e:	f7ff fb1d 	bl	d7bc <am_hal_flash_delay>
    e182:	69b3      	ldr	r3, [r6, #24]
    e184:	4b03      	ldr	r3, [pc, #12]	; (e194 <am_hal_pwrctrl_periph_enable+0x4c>)
    e186:	699b      	ldr	r3, [r3, #24]
    e188:	4223      	tst	r3, r4
    e18a:	bf0c      	ite	eq
    e18c:	2001      	moveq	r0, #1
    e18e:	2000      	movne	r0, #0
    e190:	b002      	add	sp, #8
    e192:	bd70      	pop	{r4, r5, r6, pc}
    e194:	40021000 	.word	0x40021000
    e198:	0000e86c 	.word	0x0000e86c

0000e19c <am_hal_pwrctrl_periph_disable>:
    e19c:	b570      	push	{r4, r5, r6, lr}
    e19e:	b082      	sub	sp, #8
    e1a0:	4604      	mov	r4, r0
    e1a2:	f7ff fcd9 	bl	db58 <am_hal_interrupt_master_disable>
    e1a6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e1aa:	4e10      	ldr	r6, [pc, #64]	; (e1ec <am_hal_pwrctrl_periph_disable+0x50>)
    e1ac:	4d10      	ldr	r5, [pc, #64]	; (e1f0 <am_hal_pwrctrl_periph_disable+0x54>)
    e1ae:	9001      	str	r0, [sp, #4]
    e1b0:	00a4      	lsls	r4, r4, #2
    e1b2:	68b3      	ldr	r3, [r6, #8]
    e1b4:	592a      	ldr	r2, [r5, r4]
    e1b6:	ea23 0302 	bic.w	r3, r3, r2
    e1ba:	60b3      	str	r3, [r6, #8]
    e1bc:	9801      	ldr	r0, [sp, #4]
    e1be:	442c      	add	r4, r5
    e1c0:	f7ff fcce 	bl	db60 <am_hal_interrupt_master_set>
    e1c4:	20a0      	movs	r0, #160	; 0xa0
    e1c6:	f7ff faf9 	bl	d7bc <am_hal_flash_delay>
    e1ca:	69b3      	ldr	r3, [r6, #24]
    e1cc:	6864      	ldr	r4, [r4, #4]
    e1ce:	4223      	tst	r3, r4
    e1d0:	d003      	beq.n	e1da <am_hal_pwrctrl_periph_disable+0x3e>
    e1d2:	20a0      	movs	r0, #160	; 0xa0
    e1d4:	f7ff faf2 	bl	d7bc <am_hal_flash_delay>
    e1d8:	69b3      	ldr	r3, [r6, #24]
    e1da:	4b04      	ldr	r3, [pc, #16]	; (e1ec <am_hal_pwrctrl_periph_disable+0x50>)
    e1dc:	699b      	ldr	r3, [r3, #24]
    e1de:	4223      	tst	r3, r4
    e1e0:	bf14      	ite	ne
    e1e2:	2001      	movne	r0, #1
    e1e4:	2000      	moveq	r0, #0
    e1e6:	b002      	add	sp, #8
    e1e8:	bd70      	pop	{r4, r5, r6, pc}
    e1ea:	bf00      	nop
    e1ec:	40021000 	.word	0x40021000
    e1f0:	0000e86c 	.word	0x0000e86c

0000e1f4 <am_hal_pwrctrl_low_power_init>:
    e1f4:	b530      	push	{r4, r5, lr}
    e1f6:	4b69      	ldr	r3, [pc, #420]	; (e39c <am_hal_pwrctrl_low_power_init+0x1a8>)
    e1f8:	681a      	ldr	r2, [r3, #0]
    e1fa:	b085      	sub	sp, #20
    e1fc:	b912      	cbnz	r2, e204 <am_hal_pwrctrl_low_power_init+0x10>
    e1fe:	4a68      	ldr	r2, [pc, #416]	; (e3a0 <am_hal_pwrctrl_low_power_init+0x1ac>)
    e200:	6812      	ldr	r2, [r2, #0]
    e202:	601a      	str	r2, [r3, #0]
    e204:	4b67      	ldr	r3, [pc, #412]	; (e3a4 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e206:	68db      	ldr	r3, [r3, #12]
    e208:	b2db      	uxtb	r3, r3
    e20a:	2b12      	cmp	r3, #18
    e20c:	d104      	bne.n	e218 <am_hal_pwrctrl_low_power_init+0x24>
    e20e:	4c66      	ldr	r4, [pc, #408]	; (e3a8 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e210:	6863      	ldr	r3, [r4, #4]
    e212:	07d8      	lsls	r0, r3, #31
    e214:	f100 8088 	bmi.w	e328 <am_hal_pwrctrl_low_power_init+0x134>
    e218:	4b62      	ldr	r3, [pc, #392]	; (e3a4 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e21a:	68da      	ldr	r2, [r3, #12]
    e21c:	b2d2      	uxtb	r2, r2
    e21e:	2a20      	cmp	r2, #32
    e220:	d934      	bls.n	e28c <am_hal_pwrctrl_low_power_init+0x98>
    e222:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
    e226:	2002      	movs	r0, #2
    e228:	f360 4213 	bfi	r2, r0, #16, #4
    e22c:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    e230:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
    e234:	2203      	movs	r2, #3
    e236:	f362 5117 	bfi	r1, r2, #20, #4
    e23a:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
    e23e:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e242:	2405      	movs	r4, #5
    e244:	f364 0103 	bfi	r1, r4, #0, #4
    e248:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e24c:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e250:	f360 1107 	bfi	r1, r0, #4, #4
    e254:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e258:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e25c:	2406      	movs	r4, #6
    e25e:	f364 210b 	bfi	r1, r4, #8, #4
    e262:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e266:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e26a:	2001      	movs	r0, #1
    e26c:	f360 310f 	bfi	r1, r0, #12, #4
    e270:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e274:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e278:	f362 61de 	bfi	r1, r2, #27, #4
    e27c:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e280:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
    e284:	f362 0103 	bfi	r1, r2, #0, #4
    e288:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
    e28c:	4a45      	ldr	r2, [pc, #276]	; (e3a4 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e28e:	68d3      	ldr	r3, [r2, #12]
    e290:	b2db      	uxtb	r3, r3
    e292:	2b11      	cmp	r3, #17
    e294:	d905      	bls.n	e2a2 <am_hal_pwrctrl_low_power_init+0xae>
    e296:	f8d2 335c 	ldr.w	r3, [r2, #860]	; 0x35c
    e29a:	f36f 6318 	bfc	r3, #24, #1
    e29e:	f8c2 335c 	str.w	r3, [r2, #860]	; 0x35c
    e2a2:	2100      	movs	r1, #0
    e2a4:	200c      	movs	r0, #12
    e2a6:	f7ff f853 	bl	d350 <am_hal_cachectrl_control>
    e2aa:	4b3f      	ldr	r3, [pc, #252]	; (e3a8 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e2ac:	699b      	ldr	r3, [r3, #24]
    e2ae:	f3c3 2500 	ubfx	r5, r3, #8, #1
    e2b2:	05db      	lsls	r3, r3, #23
    e2b4:	d420      	bmi.n	e2f8 <am_hal_pwrctrl_low_power_init+0x104>
    e2b6:	4c3b      	ldr	r4, [pc, #236]	; (e3a4 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e2b8:	68e3      	ldr	r3, [r4, #12]
    e2ba:	b2db      	uxtb	r3, r3
    e2bc:	2b11      	cmp	r3, #17
    e2be:	d84e      	bhi.n	e35e <am_hal_pwrctrl_low_power_init+0x16a>
    e2c0:	4c38      	ldr	r4, [pc, #224]	; (e3a4 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e2c2:	493a      	ldr	r1, [pc, #232]	; (e3ac <am_hal_pwrctrl_low_power_init+0x1b8>)
    e2c4:	7e22      	ldrb	r2, [r4, #24]
    e2c6:	2001      	movs	r0, #1
    e2c8:	4302      	orrs	r2, r0
    e2ca:	2307      	movs	r3, #7
    e2cc:	7622      	strb	r2, [r4, #24]
    e2ce:	9000      	str	r0, [sp, #0]
    e2d0:	461a      	mov	r2, r3
    e2d2:	f242 7010 	movw	r0, #10000	; 0x2710
    e2d6:	f7ff fa81 	bl	d7dc <am_hal_flash_delay_status_check>
    e2da:	2800      	cmp	r0, #0
    e2dc:	d15a      	bne.n	e394 <am_hal_pwrctrl_low_power_init+0x1a0>
    e2de:	4b32      	ldr	r3, [pc, #200]	; (e3a8 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e2e0:	681a      	ldr	r2, [r3, #0]
    e2e2:	f042 0201 	orr.w	r2, r2, #1
    e2e6:	601a      	str	r2, [r3, #0]
    e2e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    e2ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    e2ee:	625a      	str	r2, [r3, #36]	; 0x24
    e2f0:	68e3      	ldr	r3, [r4, #12]
    e2f2:	b2db      	uxtb	r3, r3
    e2f4:	2b11      	cmp	r3, #17
    e2f6:	d002      	beq.n	e2fe <am_hal_pwrctrl_low_power_init+0x10a>
    e2f8:	2000      	movs	r0, #0
    e2fa:	b005      	add	sp, #20
    e2fc:	bd30      	pop	{r4, r5, pc}
    e2fe:	f8d4 335c 	ldr.w	r3, [r4, #860]	; 0x35c
    e302:	f360 5356 	bfi	r3, r0, #21, #2
    e306:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
    e30a:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e30e:	220f      	movs	r2, #15
    e310:	f362 138b 	bfi	r3, r2, #6, #6
    e314:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e318:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e31c:	f362 0305 	bfi	r3, r2, #0, #6
    e320:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e324:	b005      	add	sp, #20
    e326:	bd30      	pop	{r4, r5, pc}
    e328:	f7ff fc16 	bl	db58 <am_hal_interrupt_master_disable>
    e32c:	9002      	str	r0, [sp, #8]
    e32e:	68a3      	ldr	r3, [r4, #8]
    e330:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    e334:	60a3      	str	r3, [r4, #8]
    e336:	9802      	ldr	r0, [sp, #8]
    e338:	f7ff fc12 	bl	db60 <am_hal_interrupt_master_set>
    e33c:	20a0      	movs	r0, #160	; 0xa0
    e33e:	f7ff fa3d 	bl	d7bc <am_hal_flash_delay>
    e342:	69a3      	ldr	r3, [r4, #24]
    e344:	0619      	lsls	r1, r3, #24
    e346:	d403      	bmi.n	e350 <am_hal_pwrctrl_low_power_init+0x15c>
    e348:	20a0      	movs	r0, #160	; 0xa0
    e34a:	f7ff fa37 	bl	d7bc <am_hal_flash_delay>
    e34e:	69a3      	ldr	r3, [r4, #24]
    e350:	4b15      	ldr	r3, [pc, #84]	; (e3a8 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e352:	699b      	ldr	r3, [r3, #24]
    e354:	061a      	lsls	r2, r3, #24
    e356:	f53f af5f 	bmi.w	e218 <am_hal_pwrctrl_low_power_init+0x24>
    e35a:	2001      	movs	r0, #1
    e35c:	e7cd      	b.n	e2fa <am_hal_pwrctrl_low_power_init+0x106>
    e35e:	f7ff fbfb 	bl	db58 <am_hal_interrupt_master_disable>
    e362:	9003      	str	r0, [sp, #12]
    e364:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e368:	2219      	movs	r2, #25
    e36a:	f362 138b 	bfi	r3, r2, #6, #6
    e36e:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e372:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
    e376:	210c      	movs	r1, #12
    e378:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e37c:	f361 0205 	bfi	r2, r1, #0, #6
    e380:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
    e384:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    e386:	f365 5296 	bfi	r2, r5, #22, #1
    e38a:	63da      	str	r2, [r3, #60]	; 0x3c
    e38c:	9803      	ldr	r0, [sp, #12]
    e38e:	f7ff fbe7 	bl	db60 <am_hal_interrupt_master_set>
    e392:	e795      	b.n	e2c0 <am_hal_pwrctrl_low_power_init+0xcc>
    e394:	2004      	movs	r0, #4
    e396:	b005      	add	sp, #20
    e398:	bd30      	pop	{r4, r5, pc}
    e39a:	bf00      	nop
    e39c:	1000123c 	.word	0x1000123c
    e3a0:	4ffff000 	.word	0x4ffff000
    e3a4:	40020000 	.word	0x40020000
    e3a8:	40021000 	.word	0x40021000
    e3ac:	40020018 	.word	0x40020018

0000e3b0 <am_hal_sysctrl_sleep>:
    e3b0:	b510      	push	{r4, lr}
    e3b2:	b082      	sub	sp, #8
    e3b4:	4604      	mov	r4, r0
    e3b6:	f7ff fbcf 	bl	db58 <am_hal_interrupt_master_disable>
    e3ba:	9001      	str	r0, [sp, #4]
    e3bc:	b124      	cbz	r4, e3c8 <am_hal_sysctrl_sleep+0x18>
    e3be:	4b12      	ldr	r3, [pc, #72]	; (e408 <am_hal_sysctrl_sleep+0x58>)
    e3c0:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    e3c4:	07db      	lsls	r3, r3, #31
    e3c6:	d513      	bpl.n	e3f0 <am_hal_sysctrl_sleep+0x40>
    e3c8:	4a10      	ldr	r2, [pc, #64]	; (e40c <am_hal_sysctrl_sleep+0x5c>)
    e3ca:	6913      	ldr	r3, [r2, #16]
    e3cc:	f023 0304 	bic.w	r3, r3, #4
    e3d0:	6113      	str	r3, [r2, #16]
    e3d2:	f3bf 8f4f 	dsb	sy
    e3d6:	4a0e      	ldr	r2, [pc, #56]	; (e410 <am_hal_sysctrl_sleep+0x60>)
    e3d8:	4b0e      	ldr	r3, [pc, #56]	; (e414 <am_hal_sysctrl_sleep+0x64>)
    e3da:	6812      	ldr	r2, [r2, #0]
    e3dc:	601a      	str	r2, [r3, #0]
    e3de:	bf30      	wfi
    e3e0:	f3bf 8f6f 	isb	sy
    e3e4:	9801      	ldr	r0, [sp, #4]
    e3e6:	b002      	add	sp, #8
    e3e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e3ec:	f7ff bbb8 	b.w	db60 <am_hal_interrupt_master_set>
    e3f0:	4b09      	ldr	r3, [pc, #36]	; (e418 <am_hal_sysctrl_sleep+0x68>)
    e3f2:	681a      	ldr	r2, [r3, #0]
    e3f4:	b912      	cbnz	r2, e3fc <am_hal_sysctrl_sleep+0x4c>
    e3f6:	4a09      	ldr	r2, [pc, #36]	; (e41c <am_hal_sysctrl_sleep+0x6c>)
    e3f8:	6812      	ldr	r2, [r2, #0]
    e3fa:	601a      	str	r2, [r3, #0]
    e3fc:	4a03      	ldr	r2, [pc, #12]	; (e40c <am_hal_sysctrl_sleep+0x5c>)
    e3fe:	6913      	ldr	r3, [r2, #16]
    e400:	f043 0304 	orr.w	r3, r3, #4
    e404:	6113      	str	r3, [r2, #16]
    e406:	e7e4      	b.n	e3d2 <am_hal_sysctrl_sleep+0x22>
    e408:	40020000 	.word	0x40020000
    e40c:	e000ed00 	.word	0xe000ed00
    e410:	5fff0000 	.word	0x5fff0000
    e414:	10001240 	.word	0x10001240
    e418:	1000123c 	.word	0x1000123c
    e41c:	4ffff000 	.word	0x4ffff000

0000e420 <am_bsp_low_power_init>:
    e420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e422:	f7ff fee7 	bl	e1f4 <am_hal_pwrctrl_low_power_init>
    e426:	f000 f8ab 	bl	e580 <am_hal_rtc_osc_disable>
    e42a:	4b0b      	ldr	r3, [pc, #44]	; (e458 <am_bsp_low_power_init+0x38>)
    e42c:	4f0b      	ldr	r7, [pc, #44]	; (e45c <am_bsp_low_power_init+0x3c>)
    e42e:	681e      	ldr	r6, [r3, #0]
    e430:	2400      	movs	r4, #0
    e432:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    e436:	4631      	mov	r1, r6
    e438:	4628      	mov	r0, r5
    e43a:	f7ff fa0f 	bl	d85c <am_hal_gpio_pinconfig>
    e43e:	2103      	movs	r1, #3
    e440:	4628      	mov	r0, r5
    e442:	f7ff fb41 	bl	dac8 <am_hal_gpio_state_write>
    e446:	3401      	adds	r4, #1
    e448:	2100      	movs	r1, #0
    e44a:	4628      	mov	r0, r5
    e44c:	f7ff fb3c 	bl	dac8 <am_hal_gpio_state_write>
    e450:	2c05      	cmp	r4, #5
    e452:	d1ee      	bne.n	e432 <am_bsp_low_power_init+0x12>
    e454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e456:	bf00      	nop
    e458:	0000e700 	.word	0x0000e700
    e45c:	10001044 	.word	0x10001044

0000e460 <am_bsp_itm_printf_enable>:
    e460:	b500      	push	{lr}
    e462:	4b0b      	ldr	r3, [pc, #44]	; (e490 <am_bsp_itm_printf_enable+0x30>)
    e464:	b087      	sub	sp, #28
    e466:	2201      	movs	r2, #1
    e468:	601a      	str	r2, [r3, #0]
    e46a:	f000 f84d 	bl	e508 <am_hal_itm_enable>
    e46e:	4b09      	ldr	r3, [pc, #36]	; (e494 <am_bsp_itm_printf_enable+0x34>)
    e470:	9301      	str	r3, [sp, #4]
    e472:	a801      	add	r0, sp, #4
    e474:	f000 f88e 	bl	e594 <am_hal_tpiu_enable>
    e478:	4b07      	ldr	r3, [pc, #28]	; (e498 <am_bsp_itm_printf_enable+0x38>)
    e47a:	2029      	movs	r0, #41	; 0x29
    e47c:	6819      	ldr	r1, [r3, #0]
    e47e:	f7ff f9ed 	bl	d85c <am_hal_gpio_pinconfig>
    e482:	4806      	ldr	r0, [pc, #24]	; (e49c <am_bsp_itm_printf_enable+0x3c>)
    e484:	f7fe f84e 	bl	c524 <am_util_stdio_printf_init>
    e488:	b007      	add	sp, #28
    e48a:	f85d fb04 	ldr.w	pc, [sp], #4
    e48e:	bf00      	nop
    e490:	10001244 	.word	0x10001244
    e494:	000f4240 	.word	0x000f4240
    e498:	0000e938 	.word	0x0000e938
    e49c:	0000e551 	.word	0x0000e551

0000e4a0 <am_bsp_ios_pins_enable>:
    e4a0:	bb28      	cbnz	r0, e4ee <am_bsp_ios_pins_enable+0x4e>
    e4a2:	b510      	push	{r4, lr}
    e4a4:	460c      	mov	r4, r1
    e4a6:	b1b9      	cbz	r1, e4d8 <am_bsp_ios_pins_enable+0x38>
    e4a8:	2901      	cmp	r1, #1
    e4aa:	d000      	beq.n	e4ae <am_bsp_ios_pins_enable+0xe>
    e4ac:	bd10      	pop	{r4, pc}
    e4ae:	4b10      	ldr	r3, [pc, #64]	; (e4f0 <am_bsp_ios_pins_enable+0x50>)
    e4b0:	6819      	ldr	r1, [r3, #0]
    e4b2:	f7ff f9d3 	bl	d85c <am_hal_gpio_pinconfig>
    e4b6:	4b0f      	ldr	r3, [pc, #60]	; (e4f4 <am_bsp_ios_pins_enable+0x54>)
    e4b8:	2002      	movs	r0, #2
    e4ba:	6819      	ldr	r1, [r3, #0]
    e4bc:	f7ff f9ce 	bl	d85c <am_hal_gpio_pinconfig>
    e4c0:	4b0d      	ldr	r3, [pc, #52]	; (e4f8 <am_bsp_ios_pins_enable+0x58>)
    e4c2:	4620      	mov	r0, r4
    e4c4:	6819      	ldr	r1, [r3, #0]
    e4c6:	f7ff f9c9 	bl	d85c <am_hal_gpio_pinconfig>
    e4ca:	4b0c      	ldr	r3, [pc, #48]	; (e4fc <am_bsp_ios_pins_enable+0x5c>)
    e4cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e4d0:	6819      	ldr	r1, [r3, #0]
    e4d2:	2003      	movs	r0, #3
    e4d4:	f7ff b9c2 	b.w	d85c <am_hal_gpio_pinconfig>
    e4d8:	4b09      	ldr	r3, [pc, #36]	; (e500 <am_bsp_ios_pins_enable+0x60>)
    e4da:	6819      	ldr	r1, [r3, #0]
    e4dc:	f7ff f9be 	bl	d85c <am_hal_gpio_pinconfig>
    e4e0:	4b08      	ldr	r3, [pc, #32]	; (e504 <am_bsp_ios_pins_enable+0x64>)
    e4e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e4e6:	6819      	ldr	r1, [r3, #0]
    e4e8:	2001      	movs	r0, #1
    e4ea:	f7ff b9b7 	b.w	d85c <am_hal_gpio_pinconfig>
    e4ee:	4770      	bx	lr
    e4f0:	0000e92c 	.word	0x0000e92c
    e4f4:	0000e924 	.word	0x0000e924
    e4f8:	0000e928 	.word	0x0000e928
    e4fc:	0000e920 	.word	0x0000e920
    e500:	0000e930 	.word	0x0000e930
    e504:	0000e934 	.word	0x0000e934

0000e508 <am_hal_itm_enable>:
    e508:	4a0e      	ldr	r2, [pc, #56]	; (e544 <am_hal_itm_enable+0x3c>)
    e50a:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e50e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    e512:	b410      	push	{r4}
    e514:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    e518:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e51c:	01db      	lsls	r3, r3, #7
    e51e:	d5fb      	bpl.n	e518 <am_hal_itm_enable+0x10>
    e520:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    e524:	4c08      	ldr	r4, [pc, #32]	; (e548 <am_hal_itm_enable+0x40>)
    e526:	4a09      	ldr	r2, [pc, #36]	; (e54c <am_hal_itm_enable+0x44>)
    e528:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    e52c:	200f      	movs	r0, #15
    e52e:	f04f 31ff 	mov.w	r1, #4294967295
    e532:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    e536:	f85d 4b04 	ldr.w	r4, [sp], #4
    e53a:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    e53e:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    e542:	4770      	bx	lr
    e544:	e000ed00 	.word	0xe000ed00
    e548:	c5acce55 	.word	0xc5acce55
    e54c:	00150511 	.word	0x00150511

0000e550 <am_hal_itm_print>:
    e550:	7803      	ldrb	r3, [r0, #0]
    e552:	b1a3      	cbz	r3, e57e <am_hal_itm_print+0x2e>
    e554:	4603      	mov	r3, r0
    e556:	f1c0 0c01 	rsb	ip, r0, #1
    e55a:	eb0c 0103 	add.w	r1, ip, r3
    e55e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    e562:	2a00      	cmp	r2, #0
    e564:	d1f9      	bne.n	e55a <am_hal_itm_print+0xa>
    e566:	4401      	add	r1, r0
    e568:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    e56c:	f810 cb01 	ldrb.w	ip, [r0], #1
    e570:	6813      	ldr	r3, [r2, #0]
    e572:	2b00      	cmp	r3, #0
    e574:	d0fc      	beq.n	e570 <am_hal_itm_print+0x20>
    e576:	4288      	cmp	r0, r1
    e578:	f882 c000 	strb.w	ip, [r2]
    e57c:	d1f6      	bne.n	e56c <am_hal_itm_print+0x1c>
    e57e:	4770      	bx	lr

0000e580 <am_hal_rtc_osc_disable>:
    e580:	4a03      	ldr	r2, [pc, #12]	; (e590 <am_hal_rtc_osc_disable+0x10>)
    e582:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    e586:	f043 0310 	orr.w	r3, r3, #16
    e58a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    e58e:	4770      	bx	lr
    e590:	40004200 	.word	0x40004200

0000e594 <am_hal_tpiu_enable>:
    e594:	b510      	push	{r4, lr}
    e596:	4b23      	ldr	r3, [pc, #140]	; (e624 <am_hal_tpiu_enable+0x90>)
    e598:	6804      	ldr	r4, [r0, #0]
    e59a:	2200      	movs	r2, #0
    e59c:	b084      	sub	sp, #16
    e59e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    e5a2:	b334      	cbz	r4, e5f2 <am_hal_tpiu_enable+0x5e>
    e5a4:	4a20      	ldr	r2, [pc, #128]	; (e628 <am_hal_tpiu_enable+0x94>)
    e5a6:	4921      	ldr	r1, [pc, #132]	; (e62c <am_hal_tpiu_enable+0x98>)
    e5a8:	2001      	movs	r0, #1
    e5aa:	6058      	str	r0, [r3, #4]
    e5ac:	f5a4 4361 	sub.w	r3, r4, #57600	; 0xe100
    e5b0:	a801      	add	r0, sp, #4
    e5b2:	428b      	cmp	r3, r1
    e5b4:	bf88      	it	hi
    e5b6:	4614      	movhi	r4, r2
    e5b8:	f7ff f8e0 	bl	d77c <am_hal_clkgen_status_get>
    e5bc:	9b01      	ldr	r3, [sp, #4]
    e5be:	1c5a      	adds	r2, r3, #1
    e5c0:	d02d      	beq.n	e61e <am_hal_tpiu_enable+0x8a>
    e5c2:	08db      	lsrs	r3, r3, #3
    e5c4:	fbb3 f4f4 	udiv	r4, r3, r4
    e5c8:	3c01      	subs	r4, #1
    e5ca:	b2a4      	uxth	r4, r4
    e5cc:	4b15      	ldr	r3, [pc, #84]	; (e624 <am_hal_tpiu_enable+0x90>)
    e5ce:	4a18      	ldr	r2, [pc, #96]	; (e630 <am_hal_tpiu_enable+0x9c>)
    e5d0:	611c      	str	r4, [r3, #16]
    e5d2:	2102      	movs	r1, #2
    e5d4:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
    e5d8:	2000      	movs	r0, #0
    e5da:	f240 2101 	movw	r1, #513	; 0x201
    e5de:	f8c3 0f00 	str.w	r0, [r3, #3840]	; 0xf00
    e5e2:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
    e5e6:	f44f 7048 	mov.w	r0, #800	; 0x320
    e5ea:	f7ff f8e7 	bl	d7bc <am_hal_flash_delay>
    e5ee:	b004      	add	sp, #16
    e5f0:	bd10      	pop	{r4, pc}
    e5f2:	6902      	ldr	r2, [r0, #16]
    e5f4:	611a      	str	r2, [r3, #16]
    e5f6:	6882      	ldr	r2, [r0, #8]
    e5f8:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    e5fc:	68c1      	ldr	r1, [r0, #12]
    e5fe:	2201      	movs	r2, #1
    e600:	3901      	subs	r1, #1
    e602:	408a      	lsls	r2, r1
    e604:	605a      	str	r2, [r3, #4]
    e606:	f8c3 4f00 	str.w	r4, [r3, #3840]	; 0xf00
    e60a:	4a09      	ldr	r2, [pc, #36]	; (e630 <am_hal_tpiu_enable+0x9c>)
    e60c:	6843      	ldr	r3, [r0, #4]
    e60e:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    e612:	f44f 7048 	mov.w	r0, #800	; 0x320
    e616:	f7ff f8d1 	bl	d7bc <am_hal_flash_delay>
    e61a:	b004      	add	sp, #16
    e61c:	bd10      	pop	{r4, pc}
    e61e:	2405      	movs	r4, #5
    e620:	e7d4      	b.n	e5cc <am_hal_tpiu_enable+0x38>
    e622:	bf00      	nop
    e624:	e0040000 	.word	0xe0040000
    e628:	000f4240 	.word	0x000f4240
    e62c:	001da380 	.word	0x001da380
    e630:	40020000 	.word	0x40020000
    e634:	74746948 	.word	0x74746948
    e638:	20676e69 	.word	0x20676e69
    e63c:	65646e75 	.word	0x65646e75
    e640:	6f6c6672 	.word	0x6f6c6672
    e644:	6f662077 	.word	0x6f662077
    e648:	68742072 	.word	0x68742072
    e64c:	65722065 	.word	0x65722065
    e650:	73657571 	.word	0x73657571
    e654:	20646574 	.word	0x20646574
    e658:	20534f49 	.word	0x20534f49
    e65c:	4f464946 	.word	0x4f464946
    e660:	61727420 	.word	0x61727420
    e664:	6566736e 	.word	0x6566736e
    e668:	00000a72 	.word	0x00000a72
    e66c:	74746948 	.word	0x74746948
    e670:	20676e69 	.word	0x20676e69
    e674:	65646e75 	.word	0x65646e75
    e678:	6f6c6672 	.word	0x6f6c6672
    e67c:	6f662077 	.word	0x6f662077
    e680:	68742072 	.word	0x68742072
    e684:	65722065 	.word	0x65722065
    e688:	73657571 	.word	0x73657571
    e68c:	20646574 	.word	0x20646574
    e690:	20534f49 	.word	0x20534f49
    e694:	4f464946 	.word	0x4f464946
    e698:	61727420 	.word	0x61727420
    e69c:	6566736e 	.word	0x6566736e
    e6a0:	00002e72 	.word	0x00002e72
    e6a4:	75626564 	.word	0x75626564
    e6a8:	69665f67 	.word	0x69665f67
    e6ac:	616e656c 	.word	0x616e656c
    e6b0:	652e656d 	.word	0x652e656d
    e6b4:	00007478 	.word	0x00007478
    e6b8:	74746948 	.word	0x74746948
    e6bc:	20676e69 	.word	0x20676e69
    e6c0:	4f525245 	.word	0x4f525245
    e6c4:	61632052 	.word	0x61632052
    e6c8:	002e6573 	.word	0x002e6573
    e6cc:	20534f49 	.word	0x20534f49
    e6d0:	4d41524c 	.word	0x4d41524c
    e6d4:	61784520 	.word	0x61784520
    e6d8:	656c706d 	.word	0x656c706d
    e6dc:	0000000a 	.word	0x0000000a
    e6e0:	0a0a0a0a 	.word	0x0a0a0a0a
    e6e4:	0a0a0a0a 	.word	0x0a0a0a0a
    e6e8:	0a0a0a0a 	.word	0x0a0a0a0a
    e6ec:	0a0a0a0a 	.word	0x0a0a0a0a
    e6f0:	00000a0a 	.word	0x00000a0a

0000e6f4 <g_AM_BSP_GPIO_ENABLE>:
    e6f4:	00200801                                .. .

0000e6f8 <am_hal_cachectrl_defaults>:
    e6f8:	00000308                                ....

0000e6fc <g_AM_HAL_GPIO_DISABLE>:
    e6fc:	00000003                                ....

0000e700 <g_AM_HAL_GPIO_OUTPUT>:
    e700:	00000403                                ....

0000e704 <g_ui8Bit76Capabilities>:
    e704:	02800101 80010180 80800101 80808080     ................
    e714:	80808080 80808008 01800180 80808080     ................
    e724:	80808080 01800402 01010401 80808080     ................
    e734:	00000101                                ....

0000e738 <g_ui8Inpen>:
    e738:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
    e748:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
    e758:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
    e768:	00003130                                01..

0000e76c <g_ui8NCEtable>:
    e76c:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    e77c:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    e78c:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    e79c:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    e7ac:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    e7bc:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    e7cc:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    e7dc:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    e7ec:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    e7fc:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    e80c:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    e81c:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    e82c:	32221202 43231303                       .."2..#C

0000e834 <g_ui8nCEpins>:
    e834:	02070707 00080802 01020202 01010101     ................
    e844:	01010101 01010101 01010101 01010101     ................
    e854:	01010101 08010101 01010008 01010101     ................
    e864:	00000101                                ....

0000e868 <am_hal_ios_pui8LRAM>:
    e868:	50000000                                ...P

0000e86c <am_hal_pwrctrl_peripheral_control>:
	...
    e878:	00000001 00000004 00000004 00000002     ................
    e888:	00000008 00000008 00000004 00000008     ................
    e898:	00000008 00000008 00000008 00000008     ................
    e8a8:	00000010 00000010 00000010 00000020     ............ ...
    e8b8:	00000010 00000010 00000040 00000010     ........@.......
    e8c8:	00000010 00000080 00000004 00000004     ................
    e8d8:	00000100 00000004 00000004 00000200     ................
    e8e8:	00000020 00000020 00000400 00000004      ... ...........
    e8f8:	00000004 00000800 00000040 00000040     ........@...@...
    e908:	00001000 00000080 00000080 00002000     ............. ..
    e918:	00000100 00000100                       ........

0000e920 <g_AM_BSP_GPIO_IOS_CE>:
    e920:	00001001                                ....

0000e924 <g_AM_BSP_GPIO_IOS_MISO>:
    e924:	00000301                                ....

0000e928 <g_AM_BSP_GPIO_IOS_MOSI>:
    e928:	00001001                                ....

0000e92c <g_AM_BSP_GPIO_IOS_SCK>:
    e92c:	00001001                                ....

0000e930 <g_AM_BSP_GPIO_IOS_SCL>:
    e930:	00001000                                ....

0000e934 <g_AM_BSP_GPIO_IOS_SDA>:
    e934:	00000840                                @...

0000e938 <g_AM_BSP_GPIO_ITM_SWO>:
    e938:	00000002                                ....
