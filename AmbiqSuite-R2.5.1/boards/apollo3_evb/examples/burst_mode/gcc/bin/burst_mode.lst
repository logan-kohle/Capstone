
bin/burst_mode.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 85 d4 00 00 ed d4 00 00 d5 c3 00 00     ................
    c010:	ef d4 00 00 ef d4 00 00 ef d4 00 00 00 00 00 00     ................
	...
    c02c:	f1 d4 00 00 f1 d4 00 00 00 00 00 00 f1 d4 00 00     ................
    c03c:	f1 d4 00 00 f1 d4 00 00 f1 d4 00 00 f1 d4 00 00     ................
    c04c:	f1 d4 00 00 f1 d4 00 00 f1 d4 00 00 f1 d4 00 00     ................
    c05c:	f1 d4 00 00 f1 d4 00 00 f1 d4 00 00 f1 d4 00 00     ................
    c06c:	f1 d4 00 00 f1 d4 00 00 f1 d4 00 00 f1 d4 00 00     ................
    c07c:	f1 d4 00 00 f1 d4 00 00 f1 d4 00 00 f1 d4 00 00     ................
    c08c:	f1 d4 00 00 f1 d4 00 00 f1 d4 00 00 f1 d4 00 00     ................
    c09c:	f1 d4 00 00 f1 d4 00 00 f1 d4 00 00 f1 d4 00 00     ................
    c0ac:	f1 d4 00 00 f1 d4 00 00 f1 d4 00 00 f1 d4 00 00     ................
    c0bc:	f1 d4 00 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <stimer_init>:
// Init function for the STimer.
//
//*****************************************************************************
void
stimer_init(void)
{
    c1a0:	b508      	push	{r3, lr}
    //
    // Configure the STIMER and run
    //
    am_hal_stimer_config(AM_HAL_STIMER_CFG_CLEAR | AM_HAL_STIMER_CFG_FREEZE);
    c1a2:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    c1a6:	f002 f86f 	bl	e288 <am_hal_stimer_config>
    am_hal_stimer_config(AM_HAL_STIMER_XTAL_32KHZ);
    c1aa:	2003      	movs	r0, #3
    c1ac:	f002 f86c 	bl	e288 <am_hal_stimer_config>
}
    c1b0:	bf00      	nop
    c1b2:	bd08      	pop	{r3, pc}

0000c1b4 <prime_number>:
//    Output, int PRIME_NUMBER, the number of prime numbers up to N.
//
//*****************************************************************************
uint32_t
prime_number(int32_t i32n)
{
    c1b4:	b086      	sub	sp, #24
    c1b6:	9001      	str	r0, [sp, #4]
    uint32_t ui32Total, ui32Prime;
    int32_t ix, jx;

    ui32Total = 0;
    c1b8:	2300      	movs	r3, #0
    c1ba:	9305      	str	r3, [sp, #20]

    for ( ix = 2; ix <= i32n; ix++ )
    c1bc:	2302      	movs	r3, #2
    c1be:	9303      	str	r3, [sp, #12]
    c1c0:	e01f      	b.n	c202 <prime_number+0x4e>
    {
        ui32Prime = 1;
    c1c2:	2301      	movs	r3, #1
    c1c4:	9304      	str	r3, [sp, #16]
        for ( jx = 2; jx < ix; jx++ )
    c1c6:	2302      	movs	r3, #2
    c1c8:	9302      	str	r3, [sp, #8]
    c1ca:	e00f      	b.n	c1ec <prime_number+0x38>
        {
            if ( (ix % jx) == 0 )
    c1cc:	9b03      	ldr	r3, [sp, #12]
    c1ce:	9a02      	ldr	r2, [sp, #8]
    c1d0:	fb93 f2f2 	sdiv	r2, r3, r2
    c1d4:	9902      	ldr	r1, [sp, #8]
    c1d6:	fb01 f202 	mul.w	r2, r1, r2
    c1da:	1a9b      	subs	r3, r3, r2
    c1dc:	2b00      	cmp	r3, #0
    c1de:	d102      	bne.n	c1e6 <prime_number+0x32>
            {
                ui32Prime = 0;
    c1e0:	2300      	movs	r3, #0
    c1e2:	9304      	str	r3, [sp, #16]
                break;
    c1e4:	e006      	b.n	c1f4 <prime_number+0x40>
        for ( jx = 2; jx < ix; jx++ )
    c1e6:	9b02      	ldr	r3, [sp, #8]
    c1e8:	3301      	adds	r3, #1
    c1ea:	9302      	str	r3, [sp, #8]
    c1ec:	9a02      	ldr	r2, [sp, #8]
    c1ee:	9b03      	ldr	r3, [sp, #12]
    c1f0:	429a      	cmp	r2, r3
    c1f2:	dbeb      	blt.n	c1cc <prime_number+0x18>
            }
        }
        ui32Total += ui32Prime;
    c1f4:	9a05      	ldr	r2, [sp, #20]
    c1f6:	9b04      	ldr	r3, [sp, #16]
    c1f8:	4413      	add	r3, r2
    c1fa:	9305      	str	r3, [sp, #20]
    for ( ix = 2; ix <= i32n; ix++ )
    c1fc:	9b03      	ldr	r3, [sp, #12]
    c1fe:	3301      	adds	r3, #1
    c200:	9303      	str	r3, [sp, #12]
    c202:	9a03      	ldr	r2, [sp, #12]
    c204:	9b01      	ldr	r3, [sp, #4]
    c206:	429a      	cmp	r2, r3
    c208:	dddb      	ble.n	c1c2 <prime_number+0xe>
    }

    return ui32Total;
    c20a:	9b05      	ldr	r3, [sp, #20]
}
    c20c:	4618      	mov	r0, r3
    c20e:	b006      	add	sp, #24
    c210:	4770      	bx	lr
	...

0000c214 <main>:
// Test cases for the main program to run.
//
//*****************************************************************************
int
main(void)
{
    c214:	b500      	push	{lr}
    c216:	b087      	sub	sp, #28
    am_hal_burst_mode_e           eBurstMode;

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c218:	2100      	movs	r1, #0
    c21a:	2000      	movs	r0, #0
    c21c:	f001 fbe8 	bl	d9f0 <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c220:	4859      	ldr	r0, [pc, #356]	; (c388 <main+0x174>)
    c222:	f001 fa3d 	bl	d6a0 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c226:	f001 fa5f 	bl	d6e8 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    c22a:	f001 f963 	bl	d4f4 <am_bsp_low_power_init>

    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_bsp_itm_printf_enable();
    c22e:	f001 f981 	bl	d534 <am_bsp_itm_printf_enable>

    //
    // Print the banner.
    //
    am_util_stdio_terminal_clear();
    c232:	f001 f91f 	bl	d474 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("%s TurboSPOT Example\n\n", AM_HAL_DEVICE_NAME);
    c236:	4955      	ldr	r1, [pc, #340]	; (c38c <main+0x178>)
    c238:	4855      	ldr	r0, [pc, #340]	; (c390 <main+0x17c>)
    c23a:	f001 f8fb 	bl	d434 <am_util_stdio_printf>

    //
    // Initialize the STimer.
    //
    stimer_init();
    c23e:	f7ff ffaf 	bl	c1a0 <stimer_init>

    //
    // Check that the TurboSPOT Feature is available.
    //
    if ( am_hal_burst_mode_initialize(&eBurstModeAvailable) == AM_HAL_STATUS_SUCCESS )
    c242:	f10d 0307 	add.w	r3, sp, #7
    c246:	4618      	mov	r0, r3
    c248:	f001 f994 	bl	d574 <am_hal_burst_mode_initialize>
    c24c:	4603      	mov	r3, r0
    c24e:	2b00      	cmp	r3, #0
    c250:	d11f      	bne.n	c292 <main+0x7e>
    {
        if ( eBurstModeAvailable == AM_HAL_BURST_AVAIL )
    c252:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c256:	2b00      	cmp	r3, #0
    c258:	d117      	bne.n	c28a <main+0x76>
        {
            am_util_stdio_printf("TurboSPOT mode is Available\n");
    c25a:	484e      	ldr	r0, [pc, #312]	; (c394 <main+0x180>)
    c25c:	f001 f8ea 	bl	d434 <am_util_stdio_printf>

            //
            // It's available, make sure we are in "Normal" mode.
            //
            if ( am_hal_burst_mode_disable(&eBurstMode) == AM_HAL_STATUS_SUCCESS )
    c260:	f10d 0306 	add.w	r3, sp, #6
    c264:	4618      	mov	r0, r3
    c266:	f001 f9ef 	bl	d648 <am_hal_burst_mode_disable>
    c26a:	4603      	mov	r3, r0
    c26c:	2b00      	cmp	r3, #0
    c26e:	d108      	bne.n	c282 <main+0x6e>
            {
                if ( eBurstMode == AM_HAL_NORMAL_MODE )
    c270:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c274:	2b01      	cmp	r3, #1
    c276:	d10f      	bne.n	c298 <main+0x84>
                {
                    am_util_stdio_printf("Operating in Normal mode (%dMHz)\n", AM_HAL_CLKGEN_FREQ_MAX_MHZ);
    c278:	2130      	movs	r1, #48	; 0x30
    c27a:	4847      	ldr	r0, [pc, #284]	; (c398 <main+0x184>)
    c27c:	f001 f8da 	bl	d434 <am_util_stdio_printf>
    c280:	e00a      	b.n	c298 <main+0x84>
                }
            }
            else
            {
                am_util_stdio_printf("Failed to Disable TurboSPOT mode operation\n");
    c282:	4846      	ldr	r0, [pc, #280]	; (c39c <main+0x188>)
    c284:	f001 f8d6 	bl	d434 <am_util_stdio_printf>
    c288:	e006      	b.n	c298 <main+0x84>
            }
        }
        else
        {
            am_util_stdio_printf("TurboSPOT mode is Not Available\n");
    c28a:	4845      	ldr	r0, [pc, #276]	; (c3a0 <main+0x18c>)
    c28c:	f001 f8d2 	bl	d434 <am_util_stdio_printf>
    c290:	e002      	b.n	c298 <main+0x84>
        }
    }
    else
    {
        am_util_stdio_printf("Failed to Initialize for TurboSPOT mode operation\n");
    c292:	4844      	ldr	r0, [pc, #272]	; (c3a4 <main+0x190>)
    c294:	f001 f8ce 	bl	d434 <am_util_stdio_printf>
    }

    //
    // Execute the example algorithm.
    //
    am_util_stdio_printf("\nStarted calculating primes in Normal Mode\n");
    c298:	4843      	ldr	r0, [pc, #268]	; (c3a8 <main+0x194>)
    c29a:	f001 f8cb 	bl	d434 <am_util_stdio_printf>

    //
    // Capture the start time.
    //
    ui32StartTime = am_hal_stimer_counter_get();
    c29e:	f001 fffd 	bl	e29c <am_hal_stimer_counter_get>
    c2a2:	9005      	str	r0, [sp, #20]

    am_util_stdio_printf("\nNumber of Primes: %d\n", prime_number(NUM_OF_PRIMES_IN));
    c2a4:	f242 7010 	movw	r0, #10000	; 0x2710
    c2a8:	f7ff ff84 	bl	c1b4 <prime_number>
    c2ac:	4603      	mov	r3, r0
    c2ae:	4619      	mov	r1, r3
    c2b0:	483e      	ldr	r0, [pc, #248]	; (c3ac <main+0x198>)
    c2b2:	f001 f8bf 	bl	d434 <am_util_stdio_printf>

    //
    // Stop the timer and calculate the elapsed time.
    //
    ui32StopTime = am_hal_stimer_counter_get();
    c2b6:	f001 fff1 	bl	e29c <am_hal_stimer_counter_get>
    c2ba:	9004      	str	r0, [sp, #16]

    //
    // Calculate the TurboSPOT mode delta time.
    //
    ui32NormalModeDelta = ui32StopTime - ui32StartTime;
    c2bc:	9a04      	ldr	r2, [sp, #16]
    c2be:	9b05      	ldr	r3, [sp, #20]
    c2c0:	1ad3      	subs	r3, r2, r3
    c2c2:	9303      	str	r3, [sp, #12]
    am_util_stdio_printf("Normal Mode Delta: %d\n", ui32NormalModeDelta);
    c2c4:	9903      	ldr	r1, [sp, #12]
    c2c6:	483a      	ldr	r0, [pc, #232]	; (c3b0 <main+0x19c>)
    c2c8:	f001 f8b4 	bl	d434 <am_util_stdio_printf>

    //
    // Put the MCU into TurboSPOT mode.
    //
    if ( eBurstModeAvailable == AM_HAL_BURST_AVAIL )
    c2cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c2d0:	2b00      	cmp	r3, #0
    c2d2:	d114      	bne.n	c2fe <main+0xea>
    {
        if ( am_hal_burst_mode_enable(&eBurstMode) == AM_HAL_STATUS_SUCCESS )
    c2d4:	f10d 0306 	add.w	r3, sp, #6
    c2d8:	4618      	mov	r0, r3
    c2da:	f001 f985 	bl	d5e8 <am_hal_burst_mode_enable>
    c2de:	4603      	mov	r3, r0
    c2e0:	2b00      	cmp	r3, #0
    c2e2:	d109      	bne.n	c2f8 <main+0xe4>
        {
            if ( eBurstMode == AM_HAL_BURST_MODE )
    c2e4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c2e8:	2b00      	cmp	r3, #0
    c2ea:	d108      	bne.n	c2fe <main+0xea>
            {
                am_util_stdio_printf("%s operating in TurboSPOT mode (%dMHz)\n",
    c2ec:	2260      	movs	r2, #96	; 0x60
    c2ee:	4927      	ldr	r1, [pc, #156]	; (c38c <main+0x178>)
    c2f0:	4830      	ldr	r0, [pc, #192]	; (c3b4 <main+0x1a0>)
    c2f2:	f001 f89f 	bl	d434 <am_util_stdio_printf>
    c2f6:	e002      	b.n	c2fe <main+0xea>
                                     AM_HAL_DEVICE_NAME, AM_HAL_CLKGEN_FREQ_MAX_MHZ * 2);
            }
        }
        else
        {
            am_util_stdio_printf("Failed to Enable TurboSPOT mode operation\n");
    c2f8:	482f      	ldr	r0, [pc, #188]	; (c3b8 <main+0x1a4>)
    c2fa:	f001 f89b 	bl	d434 <am_util_stdio_printf>
    }

    //
    // Execute the example algorithm.
    //
    if ( eBurstModeAvailable == AM_HAL_BURST_AVAIL )
    c2fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c302:	2b00      	cmp	r3, #0
    c304:	d103      	bne.n	c30e <main+0xfa>
    {
        am_util_stdio_printf("\nStarted calculating primes in TurboSPOT mode\n");
    c306:	482d      	ldr	r0, [pc, #180]	; (c3bc <main+0x1a8>)
    c308:	f001 f894 	bl	d434 <am_util_stdio_printf>
    c30c:	e002      	b.n	c314 <main+0x100>
    }
    else
    {
        am_util_stdio_printf("\nTurboSPOT mode not available, started calculating primes in Normal mode.\n");
    c30e:	482c      	ldr	r0, [pc, #176]	; (c3c0 <main+0x1ac>)
    c310:	f001 f890 	bl	d434 <am_util_stdio_printf>
    }

    //
    // Capture the start time.
    //
    ui32StartTime = am_hal_stimer_counter_get();
    c314:	f001 ffc2 	bl	e29c <am_hal_stimer_counter_get>
    c318:	9005      	str	r0, [sp, #20]

    am_util_stdio_printf("\nNumber of Primes: %d\n", prime_number(NUM_OF_PRIMES_IN));
    c31a:	f242 7010 	movw	r0, #10000	; 0x2710
    c31e:	f7ff ff49 	bl	c1b4 <prime_number>
    c322:	4603      	mov	r3, r0
    c324:	4619      	mov	r1, r3
    c326:	4821      	ldr	r0, [pc, #132]	; (c3ac <main+0x198>)
    c328:	f001 f884 	bl	d434 <am_util_stdio_printf>

    //
    // Stop the timer and calculate the elapsed time.
    //
    ui32StopTime = am_hal_stimer_counter_get();
    c32c:	f001 ffb6 	bl	e29c <am_hal_stimer_counter_get>
    c330:	9004      	str	r0, [sp, #16]

    //
    // Disable TurboSPOT Mode.
    //
    if ( eBurstModeAvailable == AM_HAL_BURST_AVAIL )
    c332:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c336:	2b00      	cmp	r3, #0
    c338:	d114      	bne.n	c364 <main+0x150>
    {
        if ( am_hal_burst_mode_disable(&eBurstMode) == AM_HAL_STATUS_SUCCESS )
    c33a:	f10d 0306 	add.w	r3, sp, #6
    c33e:	4618      	mov	r0, r3
    c340:	f001 f982 	bl	d648 <am_hal_burst_mode_disable>
    c344:	4603      	mov	r3, r0
    c346:	2b00      	cmp	r3, #0
    c348:	d109      	bne.n	c35e <main+0x14a>
        {
            if ( AM_HAL_NORMAL_MODE != eBurstMode )
    c34a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c34e:	2b01      	cmp	r3, #1
    c350:	d008      	beq.n	c364 <main+0x150>
            {
                am_util_stdio_printf("%s failed to return to Normal Mode (%dMHz)\n",
    c352:	2230      	movs	r2, #48	; 0x30
    c354:	490d      	ldr	r1, [pc, #52]	; (c38c <main+0x178>)
    c356:	481b      	ldr	r0, [pc, #108]	; (c3c4 <main+0x1b0>)
    c358:	f001 f86c 	bl	d434 <am_util_stdio_printf>
    c35c:	e002      	b.n	c364 <main+0x150>
                                     AM_HAL_DEVICE_NAME, AM_HAL_CLKGEN_FREQ_MAX_MHZ);
            }
        }
        else
        {
            am_util_stdio_printf("Failed to Disable TurboSPOT mode operation\n");
    c35e:	480f      	ldr	r0, [pc, #60]	; (c39c <main+0x188>)
    c360:	f001 f868 	bl	d434 <am_util_stdio_printf>
    }

    //
    // Calculate the TurboSPOT mode delta time.
    //
    ui32BurstModeDelta = ui32StopTime - ui32StartTime;
    c364:	9a04      	ldr	r2, [sp, #16]
    c366:	9b05      	ldr	r3, [sp, #20]
    c368:	1ad3      	subs	r3, r2, r3
    c36a:	9302      	str	r3, [sp, #8]
    am_util_stdio_printf("TurboSPOT mode Delta: %d\n", ui32BurstModeDelta);
    c36c:	9902      	ldr	r1, [sp, #8]
    c36e:	4816      	ldr	r0, [pc, #88]	; (c3c8 <main+0x1b4>)
    c370:	f001 f860 	bl	d434 <am_util_stdio_printf>

    //
    // End of example.
    //
    am_util_stdio_printf("\n");
    c374:	4815      	ldr	r0, [pc, #84]	; (c3cc <main+0x1b8>)
    c376:	f001 f85d 	bl	d434 <am_util_stdio_printf>
    am_util_stdio_printf("TurboSPOT mode Example Complete.");
    c37a:	4815      	ldr	r0, [pc, #84]	; (c3d0 <main+0x1bc>)
    c37c:	f001 f85a 	bl	d434 <am_util_stdio_printf>
    while (1)
    {
        //
        // Go to Deep Sleep.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c380:	2001      	movs	r0, #1
    c382:	f001 ff9b 	bl	e2bc <am_hal_sysctrl_sleep>
    c386:	e7fb      	b.n	c380 <main+0x16c>
    c388:	0000e994 	.word	0x0000e994
    c38c:	0000e3e8 	.word	0x0000e3e8
    c390:	0000e3f8 	.word	0x0000e3f8
    c394:	0000e410 	.word	0x0000e410
    c398:	0000e430 	.word	0x0000e430
    c39c:	0000e454 	.word	0x0000e454
    c3a0:	0000e480 	.word	0x0000e480
    c3a4:	0000e4a4 	.word	0x0000e4a4
    c3a8:	0000e4d8 	.word	0x0000e4d8
    c3ac:	0000e504 	.word	0x0000e504
    c3b0:	0000e51c 	.word	0x0000e51c
    c3b4:	0000e534 	.word	0x0000e534
    c3b8:	0000e55c 	.word	0x0000e55c
    c3bc:	0000e588 	.word	0x0000e588
    c3c0:	0000e5b8 	.word	0x0000e5b8
    c3c4:	0000e604 	.word	0x0000e604
    c3c8:	0000e630 	.word	0x0000e630
    c3cc:	0000e64c 	.word	0x0000e64c
    c3d0:	0000e650 	.word	0x0000e650

0000c3d4 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    c3d4:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    c3d6:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    c3da:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    c3dc:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    c3e0:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    c3e4:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c3e8:	f000 f80a 	bl	c400 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    c3ec:	bd01      	pop	{r0, pc}
}
    c3ee:	bf00      	nop
    c3f0:	4618      	mov	r0, r3

0000c3f2 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c3f2:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c3f4:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c3f6:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c3f8:	4770      	bx	lr
}
    c3fa:	bf00      	nop
    c3fc:	4618      	mov	r0, r3
	...

0000c400 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c400:	b500      	push	{lr}
    c402:	b097      	sub	sp, #92	; 0x5c
    c404:	9001      	str	r0, [sp, #4]
    volatile am_fault_t sFaultData;
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_t  sHalFaultData = {0};
#else
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c406:	ab03      	add	r3, sp, #12
    c408:	2200      	movs	r2, #0
    c40a:	601a      	str	r2, [r3, #0]
    c40c:	605a      	str	r2, [r3, #4]
    c40e:	609a      	str	r2, [r3, #8]
    c410:	60da      	str	r2, [r3, #12]
    c412:	611a      	str	r2, [r3, #16]
    c414:	615a      	str	r2, [r3, #20]
#endif // if defined(AM_PART_APOLLO4)

    uint32_t u32Mask = 0;
    c416:	2300      	movs	r3, #0
    c418:	9315      	str	r3, [sp, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c41a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c41c:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c41e:	4ba4      	ldr	r3, [pc, #656]	; (c6b0 <am_util_faultisr_collect_data+0x2b0>)
    c420:	681b      	ldr	r3, [r3, #0]
    c422:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c424:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c426:	b2db      	uxtb	r3, r3
    c428:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c42c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c42e:	0a1b      	lsrs	r3, r3, #8
    c430:	b2db      	uxtb	r3, r3
    c432:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c436:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c438:	0c1b      	lsrs	r3, r3, #16
    c43a:	b29b      	uxth	r3, r3
    c43c:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c440:	4b9c      	ldr	r3, [pc, #624]	; (c6b4 <am_util_faultisr_collect_data+0x2b4>)
    c442:	681b      	ldr	r3, [r3, #0]
    c444:	9312      	str	r3, [sp, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c446:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
    c44a:	b2db      	uxtb	r3, r3
    c44c:	f003 0302 	and.w	r3, r3, #2
    c450:	2b00      	cmp	r3, #0
    c452:	d005      	beq.n	c460 <am_util_faultisr_collect_data+0x60>
    c454:	9901      	ldr	r1, [sp, #4]
    c456:	2006      	movs	r0, #6
    c458:	f7ff ffcb 	bl	c3f2 <getStackedReg>
    c45c:	4603      	mov	r3, r0
    c45e:	e001      	b.n	c464 <am_util_faultisr_collect_data+0x64>
    c460:	f04f 33ff 	mov.w	r3, #4294967295
    c464:	9311      	str	r3, [sp, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c466:	9901      	ldr	r1, [sp, #4]
    c468:	2000      	movs	r0, #0
    c46a:	f7ff ffc2 	bl	c3f2 <getStackedReg>
    c46e:	4603      	mov	r3, r0
    c470:	9309      	str	r3, [sp, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c472:	9901      	ldr	r1, [sp, #4]
    c474:	2001      	movs	r0, #1
    c476:	f7ff ffbc 	bl	c3f2 <getStackedReg>
    c47a:	4603      	mov	r3, r0
    c47c:	930a      	str	r3, [sp, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c47e:	9901      	ldr	r1, [sp, #4]
    c480:	2002      	movs	r0, #2
    c482:	f7ff ffb6 	bl	c3f2 <getStackedReg>
    c486:	4603      	mov	r3, r0
    c488:	930b      	str	r3, [sp, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c48a:	9901      	ldr	r1, [sp, #4]
    c48c:	2003      	movs	r0, #3
    c48e:	f7ff ffb0 	bl	c3f2 <getStackedReg>
    c492:	4603      	mov	r3, r0
    c494:	930c      	str	r3, [sp, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c496:	9901      	ldr	r1, [sp, #4]
    c498:	2004      	movs	r0, #4
    c49a:	f7ff ffaa 	bl	c3f2 <getStackedReg>
    c49e:	4603      	mov	r3, r0
    c4a0:	930d      	str	r3, [sp, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c4a2:	9901      	ldr	r1, [sp, #4]
    c4a4:	2005      	movs	r0, #5
    c4a6:	f7ff ffa4 	bl	c3f2 <getStackedReg>
    c4aa:	4603      	mov	r3, r0
    c4ac:	930e      	str	r3, [sp, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c4ae:	9901      	ldr	r1, [sp, #4]
    c4b0:	2006      	movs	r0, #6
    c4b2:	f7ff ff9e 	bl	c3f2 <getStackedReg>
    c4b6:	4603      	mov	r3, r0
    c4b8:	930f      	str	r3, [sp, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c4ba:	9901      	ldr	r1, [sp, #4]
    c4bc:	2007      	movs	r0, #7
    c4be:	f7ff ff98 	bl	c3f2 <getStackedReg>
    c4c2:	4603      	mov	r3, r0
    c4c4:	9310      	str	r3, [sp, #64]	; 0x40
    //
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_get(&sHalFaultData);
#else
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c4c6:	ab03      	add	r3, sp, #12
    c4c8:	4619      	mov	r1, r3
    c4ca:	2002      	movs	r0, #2
    c4cc:	f001 fd58 	bl	df80 <am_hal_mcuctrl_info_get>
#ifdef AM_UTIL_FAULTISR_PRINT
    //
    // If printf has previously been initialized in the application, we should
    // be able to print out the fault information.
    //
    am_util_stdio_printf("Hard Fault stacked data:\n");
    c4d0:	4879      	ldr	r0, [pc, #484]	; (c6b8 <am_util_faultisr_collect_data+0x2b8>)
    c4d2:	f000 ffaf 	bl	d434 <am_util_stdio_printf>
    am_util_stdio_printf("    R0  = 0x%08X\n", sFaultData.u32R0);
    c4d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c4d8:	4619      	mov	r1, r3
    c4da:	4878      	ldr	r0, [pc, #480]	; (c6bc <am_util_faultisr_collect_data+0x2bc>)
    c4dc:	f000 ffaa 	bl	d434 <am_util_stdio_printf>
    am_util_stdio_printf("    R1  = 0x%08X\n", sFaultData.u32R1);
    c4e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c4e2:	4619      	mov	r1, r3
    c4e4:	4876      	ldr	r0, [pc, #472]	; (c6c0 <am_util_faultisr_collect_data+0x2c0>)
    c4e6:	f000 ffa5 	bl	d434 <am_util_stdio_printf>
    am_util_stdio_printf("    R2  = 0x%08X\n", sFaultData.u32R2);
    c4ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c4ec:	4619      	mov	r1, r3
    c4ee:	4875      	ldr	r0, [pc, #468]	; (c6c4 <am_util_faultisr_collect_data+0x2c4>)
    c4f0:	f000 ffa0 	bl	d434 <am_util_stdio_printf>
    am_util_stdio_printf("    R3  = 0x%08X\n", sFaultData.u32R3);
    c4f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c4f6:	4619      	mov	r1, r3
    c4f8:	4873      	ldr	r0, [pc, #460]	; (c6c8 <am_util_faultisr_collect_data+0x2c8>)
    c4fa:	f000 ff9b 	bl	d434 <am_util_stdio_printf>
    am_util_stdio_printf("    R12 = 0x%08X\n", sFaultData.u32R12);
    c4fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c500:	4619      	mov	r1, r3
    c502:	4872      	ldr	r0, [pc, #456]	; (c6cc <am_util_faultisr_collect_data+0x2cc>)
    c504:	f000 ff96 	bl	d434 <am_util_stdio_printf>
    am_util_stdio_printf("    LR  = 0x%08X\n", sFaultData.u32LR);
    c508:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c50a:	4619      	mov	r1, r3
    c50c:	4870      	ldr	r0, [pc, #448]	; (c6d0 <am_util_faultisr_collect_data+0x2d0>)
    c50e:	f000 ff91 	bl	d434 <am_util_stdio_printf>
    am_util_stdio_printf("    PC  = 0x%08X\n", sFaultData.u32PC);
    c512:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c514:	4619      	mov	r1, r3
    c516:	486f      	ldr	r0, [pc, #444]	; (c6d4 <am_util_faultisr_collect_data+0x2d4>)
    c518:	f000 ff8c 	bl	d434 <am_util_stdio_printf>
    am_util_stdio_printf("    PSR = 0x%08X\n", sFaultData.u32PSR);
    c51c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c51e:	4619      	mov	r1, r3
    c520:	486d      	ldr	r0, [pc, #436]	; (c6d8 <am_util_faultisr_collect_data+0x2d8>)
    c522:	f000 ff87 	bl	d434 <am_util_stdio_printf>
    am_util_stdio_printf("Other Hard Fault data:\n");
    c526:	486d      	ldr	r0, [pc, #436]	; (c6dc <am_util_faultisr_collect_data+0x2dc>)
    c528:	f000 ff84 	bl	d434 <am_util_stdio_printf>
    am_util_stdio_printf("    Fault address = 0x%08X\n", sFaultData.u32FaultAddr);
    c52c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c52e:	4619      	mov	r1, r3
    c530:	486b      	ldr	r0, [pc, #428]	; (c6e0 <am_util_faultisr_collect_data+0x2e0>)
    c532:	f000 ff7f 	bl	d434 <am_util_stdio_printf>
    am_util_stdio_printf("    BFAR (Bus Fault Addr Reg) = 0x%08X\n", sFaultData.u32BFAR);
    c536:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c538:	4619      	mov	r1, r3
    c53a:	486a      	ldr	r0, [pc, #424]	; (c6e4 <am_util_faultisr_collect_data+0x2e4>)
    c53c:	f000 ff7a 	bl	d434 <am_util_stdio_printf>
    am_util_stdio_printf("    MMSR (Mem Mgmt Fault Status Reg) = 0x%02X\n", sFaultData.u8MMSR);
    c540:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
    c544:	b2db      	uxtb	r3, r3
    c546:	4619      	mov	r1, r3
    c548:	4867      	ldr	r0, [pc, #412]	; (c6e8 <am_util_faultisr_collect_data+0x2e8>)
    c54a:	f000 ff73 	bl	d434 <am_util_stdio_printf>
    am_util_stdio_printf("    BFSR (Bus Fault Status Reg) = 0x%02X\n", sFaultData.u8BFSR);
    c54e:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
    c552:	b2db      	uxtb	r3, r3
    c554:	4619      	mov	r1, r3
    c556:	4865      	ldr	r0, [pc, #404]	; (c6ec <am_util_faultisr_collect_data+0x2ec>)
    c558:	f000 ff6c 	bl	d434 <am_util_stdio_printf>
    am_util_stdio_printf("    UFSR (Usage Fault Status Reg) = 0x%04X\n", sFaultData.u16UFSR);
    c55c:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
    c560:	b29b      	uxth	r3, r3
    c562:	4619      	mov	r1, r3
    c564:	4862      	ldr	r0, [pc, #392]	; (c6f0 <am_util_faultisr_collect_data+0x2f0>)
    c566:	f000 ff65 	bl	d434 <am_util_stdio_printf>

    //
    // Print out any bits set in the BFSR.
    //
    u32Mask = 0x80;
    c56a:	2380      	movs	r3, #128	; 0x80
    c56c:	9315      	str	r3, [sp, #84]	; 0x54
    while (u32Mask)
    c56e:	e07a      	b.n	c666 <am_util_faultisr_collect_data+0x266>
    {
        switch (sFaultData.u8BFSR & u32Mask)
    c570:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
    c574:	b2db      	uxtb	r3, r3
    c576:	461a      	mov	r2, r3
    c578:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c57a:	4013      	ands	r3, r2
    c57c:	2b80      	cmp	r3, #128	; 0x80
    c57e:	d04e      	beq.n	c61e <am_util_faultisr_collect_data+0x21e>
    c580:	2b80      	cmp	r3, #128	; 0x80
    c582:	d86c      	bhi.n	c65e <am_util_faultisr_collect_data+0x25e>
    c584:	2b20      	cmp	r3, #32
    c586:	d847      	bhi.n	c618 <am_util_faultisr_collect_data+0x218>
    c588:	2b00      	cmp	r3, #0
    c58a:	d068      	beq.n	c65e <am_util_faultisr_collect_data+0x25e>
    c58c:	3b01      	subs	r3, #1
    c58e:	2b1f      	cmp	r3, #31
    c590:	d865      	bhi.n	c65e <am_util_faultisr_collect_data+0x25e>
    c592:	a201      	add	r2, pc, #4	; (adr r2, c598 <am_util_faultisr_collect_data+0x198>)
    c594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c598:	0000c657 	.word	0x0000c657
    c59c:	0000c64f 	.word	0x0000c64f
    c5a0:	0000c65f 	.word	0x0000c65f
    c5a4:	0000c647 	.word	0x0000c647
    c5a8:	0000c65f 	.word	0x0000c65f
    c5ac:	0000c65f 	.word	0x0000c65f
    c5b0:	0000c65f 	.word	0x0000c65f
    c5b4:	0000c63f 	.word	0x0000c63f
    c5b8:	0000c65f 	.word	0x0000c65f
    c5bc:	0000c65f 	.word	0x0000c65f
    c5c0:	0000c65f 	.word	0x0000c65f
    c5c4:	0000c65f 	.word	0x0000c65f
    c5c8:	0000c65f 	.word	0x0000c65f
    c5cc:	0000c65f 	.word	0x0000c65f
    c5d0:	0000c65f 	.word	0x0000c65f
    c5d4:	0000c637 	.word	0x0000c637
    c5d8:	0000c65f 	.word	0x0000c65f
    c5dc:	0000c65f 	.word	0x0000c65f
    c5e0:	0000c65f 	.word	0x0000c65f
    c5e4:	0000c65f 	.word	0x0000c65f
    c5e8:	0000c65f 	.word	0x0000c65f
    c5ec:	0000c65f 	.word	0x0000c65f
    c5f0:	0000c65f 	.word	0x0000c65f
    c5f4:	0000c65f 	.word	0x0000c65f
    c5f8:	0000c65f 	.word	0x0000c65f
    c5fc:	0000c65f 	.word	0x0000c65f
    c600:	0000c65f 	.word	0x0000c65f
    c604:	0000c65f 	.word	0x0000c65f
    c608:	0000c65f 	.word	0x0000c65f
    c60c:	0000c65f 	.word	0x0000c65f
    c610:	0000c65f 	.word	0x0000c65f
    c614:	0000c62f 	.word	0x0000c62f
    c618:	2b40      	cmp	r3, #64	; 0x40
    c61a:	d004      	beq.n	c626 <am_util_faultisr_collect_data+0x226>
                break;
            case 0x01:
                am_util_stdio_printf("        BFSR bit0: IBUSERR\n");
                break;
            default:
                break;
    c61c:	e01f      	b.n	c65e <am_util_faultisr_collect_data+0x25e>
                am_util_stdio_printf("        BFSR bit7: BFARVALID\n");
    c61e:	4835      	ldr	r0, [pc, #212]	; (c6f4 <am_util_faultisr_collect_data+0x2f4>)
    c620:	f000 ff08 	bl	d434 <am_util_stdio_printf>
                break;
    c624:	e01c      	b.n	c660 <am_util_faultisr_collect_data+0x260>
                am_util_stdio_printf("        BFSR bit6: RESERVED\n");
    c626:	4834      	ldr	r0, [pc, #208]	; (c6f8 <am_util_faultisr_collect_data+0x2f8>)
    c628:	f000 ff04 	bl	d434 <am_util_stdio_printf>
                break;
    c62c:	e018      	b.n	c660 <am_util_faultisr_collect_data+0x260>
                am_util_stdio_printf("        BFSR bit5: LSPERR\n");
    c62e:	4833      	ldr	r0, [pc, #204]	; (c6fc <am_util_faultisr_collect_data+0x2fc>)
    c630:	f000 ff00 	bl	d434 <am_util_stdio_printf>
                break;
    c634:	e014      	b.n	c660 <am_util_faultisr_collect_data+0x260>
                am_util_stdio_printf("        BFSR bit4: STKERR\n");
    c636:	4832      	ldr	r0, [pc, #200]	; (c700 <am_util_faultisr_collect_data+0x300>)
    c638:	f000 fefc 	bl	d434 <am_util_stdio_printf>
                break;
    c63c:	e010      	b.n	c660 <am_util_faultisr_collect_data+0x260>
                am_util_stdio_printf("        BFSR bit3: UNSTKERR\n");
    c63e:	4831      	ldr	r0, [pc, #196]	; (c704 <am_util_faultisr_collect_data+0x304>)
    c640:	f000 fef8 	bl	d434 <am_util_stdio_printf>
                break;
    c644:	e00c      	b.n	c660 <am_util_faultisr_collect_data+0x260>
                am_util_stdio_printf("        BFSR bit2: IMPRECISERR\n");
    c646:	4830      	ldr	r0, [pc, #192]	; (c708 <am_util_faultisr_collect_data+0x308>)
    c648:	f000 fef4 	bl	d434 <am_util_stdio_printf>
                break;
    c64c:	e008      	b.n	c660 <am_util_faultisr_collect_data+0x260>
                am_util_stdio_printf("        BFSR bit1: PRECISEERR\n");
    c64e:	482f      	ldr	r0, [pc, #188]	; (c70c <am_util_faultisr_collect_data+0x30c>)
    c650:	f000 fef0 	bl	d434 <am_util_stdio_printf>
                break;
    c654:	e004      	b.n	c660 <am_util_faultisr_collect_data+0x260>
                am_util_stdio_printf("        BFSR bit0: IBUSERR\n");
    c656:	482e      	ldr	r0, [pc, #184]	; (c710 <am_util_faultisr_collect_data+0x310>)
    c658:	f000 feec 	bl	d434 <am_util_stdio_printf>
                break;
    c65c:	e000      	b.n	c660 <am_util_faultisr_collect_data+0x260>
                break;
    c65e:	bf00      	nop
        }
        u32Mask >>= 1;
    c660:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c662:	085b      	lsrs	r3, r3, #1
    c664:	9315      	str	r3, [sp, #84]	; 0x54
    while (u32Mask)
    c666:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c668:	2b00      	cmp	r3, #0
    c66a:	d181      	bne.n	c570 <am_util_faultisr_collect_data+0x170>
    }

    //
    // Print out any Apollo* Internal fault information.
    //
    am_util_stdio_printf("MCU Fault data:\n");
    c66c:	4829      	ldr	r0, [pc, #164]	; (c714 <am_util_faultisr_collect_data+0x314>)
    c66e:	f000 fee1 	bl	d434 <am_util_stdio_printf>
    if (sHalFaultData.bICODE)
    c672:	f89d 300c 	ldrb.w	r3, [sp, #12]
    c676:	2b00      	cmp	r3, #0
    c678:	d004      	beq.n	c684 <am_util_faultisr_collect_data+0x284>
    {
      am_util_stdio_printf("   ICODE Fault Address: 0x%08X\n", sHalFaultData.ui32ICODE);
    c67a:	9b04      	ldr	r3, [sp, #16]
    c67c:	4619      	mov	r1, r3
    c67e:	4826      	ldr	r0, [pc, #152]	; (c718 <am_util_faultisr_collect_data+0x318>)
    c680:	f000 fed8 	bl	d434 <am_util_stdio_printf>
    }
    if (sHalFaultData.bDCODE)
    c684:	f89d 3014 	ldrb.w	r3, [sp, #20]
    c688:	2b00      	cmp	r3, #0
    c68a:	d004      	beq.n	c696 <am_util_faultisr_collect_data+0x296>
    {
      am_util_stdio_printf("   DCODE Fault Address: 0x%08X\n", sHalFaultData.ui32DCODE);
    c68c:	9b06      	ldr	r3, [sp, #24]
    c68e:	4619      	mov	r1, r3
    c690:	4822      	ldr	r0, [pc, #136]	; (c71c <am_util_faultisr_collect_data+0x31c>)
    c692:	f000 fecf 	bl	d434 <am_util_stdio_printf>
    }
    if (sHalFaultData.bSYS)
    c696:	f89d 301c 	ldrb.w	r3, [sp, #28]
    c69a:	2b00      	cmp	r3, #0
    c69c:	d004      	beq.n	c6a8 <am_util_faultisr_collect_data+0x2a8>
    {
      am_util_stdio_printf("   SYS Fault Address: 0x%08X\n", sHalFaultData.ui32SYS);
    c69e:	9b08      	ldr	r3, [sp, #32]
    c6a0:	4619      	mov	r1, r3
    c6a2:	481f      	ldr	r0, [pc, #124]	; (c720 <am_util_faultisr_collect_data+0x320>)
    c6a4:	f000 fec6 	bl	d434 <am_util_stdio_printf>
    }

#endif

    u32Mask = 0;
    c6a8:	2300      	movs	r3, #0
    c6aa:	9315      	str	r3, [sp, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    c6ac:	e7fe      	b.n	c6ac <am_util_faultisr_collect_data+0x2ac>
    c6ae:	bf00      	nop
    c6b0:	e000ed28 	.word	0xe000ed28
    c6b4:	e000ed38 	.word	0xe000ed38
    c6b8:	0000e674 	.word	0x0000e674
    c6bc:	0000e690 	.word	0x0000e690
    c6c0:	0000e6a4 	.word	0x0000e6a4
    c6c4:	0000e6b8 	.word	0x0000e6b8
    c6c8:	0000e6cc 	.word	0x0000e6cc
    c6cc:	0000e6e0 	.word	0x0000e6e0
    c6d0:	0000e6f4 	.word	0x0000e6f4
    c6d4:	0000e708 	.word	0x0000e708
    c6d8:	0000e71c 	.word	0x0000e71c
    c6dc:	0000e730 	.word	0x0000e730
    c6e0:	0000e748 	.word	0x0000e748
    c6e4:	0000e764 	.word	0x0000e764
    c6e8:	0000e78c 	.word	0x0000e78c
    c6ec:	0000e7bc 	.word	0x0000e7bc
    c6f0:	0000e7e8 	.word	0x0000e7e8
    c6f4:	0000e814 	.word	0x0000e814
    c6f8:	0000e834 	.word	0x0000e834
    c6fc:	0000e854 	.word	0x0000e854
    c700:	0000e870 	.word	0x0000e870
    c704:	0000e88c 	.word	0x0000e88c
    c708:	0000e8ac 	.word	0x0000e8ac
    c70c:	0000e8cc 	.word	0x0000e8cc
    c710:	0000e8ec 	.word	0x0000e8ec
    c714:	0000e908 	.word	0x0000e908
    c718:	0000e91c 	.word	0x0000e91c
    c71c:	0000e93c 	.word	0x0000e93c
    c720:	0000e95c 	.word	0x0000e95c

0000c724 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    c724:	b082      	sub	sp, #8
    c726:	9001      	str	r0, [sp, #4]
    g_pfnCharPrint = pfnCharPrint;
    c728:	4a02      	ldr	r2, [pc, #8]	; (c734 <am_util_stdio_printf_init+0x10>)
    c72a:	9b01      	ldr	r3, [sp, #4]
    c72c:	6013      	str	r3, [r2, #0]
}
    c72e:	bf00      	nop
    c730:	b002      	add	sp, #8
    c732:	4770      	bx	lr
    c734:	10001034 	.word	0x10001034

0000c738 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c738:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c73c:	b098      	sub	sp, #96	; 0x60
    c73e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c742:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c746:	f04f 0000 	mov.w	r0, #0
    c74a:	f04f 0100 	mov.w	r1, #0
    c74e:	0018      	movs	r0, r3
    c750:	2100      	movs	r1, #0
    c752:	ea50 0301 	orrs.w	r3, r0, r1
    c756:	f000 80b0 	beq.w	c8ba <divu64_10+0x182>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c75a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c75e:	f04f 0400 	mov.w	r4, #0
    c762:	f04f 0500 	mov.w	r5, #0
    c766:	0854      	lsrs	r4, r2, #1
    c768:	ea44 74c3 	orr.w	r4, r4, r3, lsl #31
    c76c:	085d      	lsrs	r5, r3, #1
    c76e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c772:	f04f 0000 	mov.w	r0, #0
    c776:	f04f 0100 	mov.w	r1, #0
    c77a:	0890      	lsrs	r0, r2, #2
    c77c:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
    c780:	0899      	lsrs	r1, r3, #2
    c782:	eb14 0a00 	adds.w	sl, r4, r0
    c786:	eb45 0b01 	adc.w	fp, r5, r1
    c78a:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
        q64 += (q64 >> 4);
    c78e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c792:	f04f 0000 	mov.w	r0, #0
    c796:	f04f 0100 	mov.w	r1, #0
    c79a:	0910      	lsrs	r0, r2, #4
    c79c:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
    c7a0:	0919      	lsrs	r1, r3, #4
    c7a2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c7a6:	1814      	adds	r4, r2, r0
    c7a8:	9402      	str	r4, [sp, #8]
    c7aa:	414b      	adcs	r3, r1
    c7ac:	9303      	str	r3, [sp, #12]
    c7ae:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    c7b2:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 8);
    c7b6:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c7ba:	f04f 0000 	mov.w	r0, #0
    c7be:	f04f 0100 	mov.w	r1, #0
    c7c2:	0a10      	lsrs	r0, r2, #8
    c7c4:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
    c7c8:	0a19      	lsrs	r1, r3, #8
    c7ca:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c7ce:	1814      	adds	r4, r2, r0
    c7d0:	9404      	str	r4, [sp, #16]
    c7d2:	414b      	adcs	r3, r1
    c7d4:	9305      	str	r3, [sp, #20]
    c7d6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    c7da:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 16);
    c7de:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c7e2:	f04f 0000 	mov.w	r0, #0
    c7e6:	f04f 0100 	mov.w	r1, #0
    c7ea:	0c10      	lsrs	r0, r2, #16
    c7ec:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    c7f0:	0c19      	lsrs	r1, r3, #16
    c7f2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c7f6:	1814      	adds	r4, r2, r0
    c7f8:	9406      	str	r4, [sp, #24]
    c7fa:	414b      	adcs	r3, r1
    c7fc:	9307      	str	r3, [sp, #28]
    c7fe:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
    c802:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 32);
    c806:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c80a:	f04f 0000 	mov.w	r0, #0
    c80e:	f04f 0100 	mov.w	r1, #0
    c812:	0018      	movs	r0, r3
    c814:	2100      	movs	r1, #0
    c816:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c81a:	1814      	adds	r4, r2, r0
    c81c:	9408      	str	r4, [sp, #32]
    c81e:	414b      	adcs	r3, r1
    c820:	9309      	str	r3, [sp, #36]	; 0x24
    c822:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
    c826:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 >>= 3;
    c82a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    c82e:	f04f 0200 	mov.w	r2, #0
    c832:	f04f 0300 	mov.w	r3, #0
    c836:	08c2      	lsrs	r2, r0, #3
    c838:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    c83c:	08cb      	lsrs	r3, r1, #3
    c83e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
        r64 = ui64Val - q64*10;
    c842:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
    c846:	4622      	mov	r2, r4
    c848:	462b      	mov	r3, r5
    c84a:	f04f 0000 	mov.w	r0, #0
    c84e:	f04f 0100 	mov.w	r1, #0
    c852:	0099      	lsls	r1, r3, #2
    c854:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
    c858:	0090      	lsls	r0, r2, #2
    c85a:	4602      	mov	r2, r0
    c85c:	460b      	mov	r3, r1
    c85e:	1916      	adds	r6, r2, r4
    c860:	eb43 0705 	adc.w	r7, r3, r5
    c864:	19b3      	adds	r3, r6, r6
    c866:	930a      	str	r3, [sp, #40]	; 0x28
    c868:	eb47 0307 	adc.w	r3, r7, r7
    c86c:	930b      	str	r3, [sp, #44]	; 0x2c
    c86e:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    c872:	4630      	mov	r0, r6
    c874:	4639      	mov	r1, r7
    c876:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c87a:	1a14      	subs	r4, r2, r0
    c87c:	940c      	str	r4, [sp, #48]	; 0x30
    c87e:	eb63 0301 	sbc.w	r3, r3, r1
    c882:	930d      	str	r3, [sp, #52]	; 0x34
    c884:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    c888:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
        return q64 + ((r64 + 6) >> 4);
    c88c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    c890:	f112 0806 	adds.w	r8, r2, #6
    c894:	f143 0900 	adc.w	r9, r3, #0
    c898:	f04f 0200 	mov.w	r2, #0
    c89c:	f04f 0300 	mov.w	r3, #0
    c8a0:	ea4f 1218 	mov.w	r2, r8, lsr #4
    c8a4:	ea42 7209 	orr.w	r2, r2, r9, lsl #28
    c8a8:	ea4f 1319 	mov.w	r3, r9, lsr #4
    c8ac:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    c8b0:	1814      	adds	r4, r2, r0
    c8b2:	9400      	str	r4, [sp, #0]
    c8b4:	414b      	adcs	r3, r1
    c8b6:	9301      	str	r3, [sp, #4]
    c8b8:	e02a      	b.n	c910 <divu64_10+0x1d8>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    c8ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c8bc:	9317      	str	r3, [sp, #92]	; 0x5c
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c8be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c8c0:	085a      	lsrs	r2, r3, #1
    c8c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c8c4:	089b      	lsrs	r3, r3, #2
    c8c6:	4413      	add	r3, r2
    c8c8:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 4);
    c8ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c8cc:	091b      	lsrs	r3, r3, #4
    c8ce:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c8d0:	4413      	add	r3, r2
    c8d2:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 8);
    c8d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c8d6:	0a1b      	lsrs	r3, r3, #8
    c8d8:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c8da:	4413      	add	r3, r2
    c8dc:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 16);
    c8de:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c8e0:	0c1b      	lsrs	r3, r3, #16
    c8e2:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c8e4:	4413      	add	r3, r2
    c8e6:	9316      	str	r3, [sp, #88]	; 0x58
        q32 >>= 3;
    c8e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c8ea:	08db      	lsrs	r3, r3, #3
    c8ec:	9316      	str	r3, [sp, #88]	; 0x58
        r32 = ui32Val - q32*10;
    c8ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c8f0:	4613      	mov	r3, r2
    c8f2:	009b      	lsls	r3, r3, #2
    c8f4:	4413      	add	r3, r2
    c8f6:	005b      	lsls	r3, r3, #1
    c8f8:	461a      	mov	r2, r3
    c8fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c8fc:	1a9b      	subs	r3, r3, r2
    c8fe:	9315      	str	r3, [sp, #84]	; 0x54
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c900:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c902:	3306      	adds	r3, #6
    c904:	091a      	lsrs	r2, r3, #4
    c906:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c908:	4413      	add	r3, r2
    c90a:	2200      	movs	r2, #0
    c90c:	9300      	str	r3, [sp, #0]
    c90e:	9201      	str	r2, [sp, #4]
    }
}
    c910:	e9dd 2300 	ldrd	r2, r3, [sp]
    c914:	4610      	mov	r0, r2
    c916:	4619      	mov	r1, r3
    c918:	b018      	add	sp, #96	; 0x60
    c91a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c91e:	4770      	bx	lr

0000c920 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    c920:	b500      	push	{lr}
    c922:	b085      	sub	sp, #20
    c924:	e9cd 0100 	strd	r0, r1, [sp]
    int iNDigits = ui64Val ? 0 : 1;
    c928:	9a00      	ldr	r2, [sp, #0]
    c92a:	9b01      	ldr	r3, [sp, #4]
    c92c:	4313      	orrs	r3, r2
    c92e:	2b00      	cmp	r3, #0
    c930:	bf0c      	ite	eq
    c932:	2301      	moveq	r3, #1
    c934:	2300      	movne	r3, #0
    c936:	b2db      	uxtb	r3, r3
    c938:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    c93a:	e008      	b.n	c94e <ndigits_in_u64+0x2e>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    c93c:	e9dd 0100 	ldrd	r0, r1, [sp]
    c940:	f7ff fefa 	bl	c738 <divu64_10>
    c944:	e9cd 0100 	strd	r0, r1, [sp]
        ++iNDigits;
    c948:	9b03      	ldr	r3, [sp, #12]
    c94a:	3301      	adds	r3, #1
    c94c:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    c94e:	e9dd 2300 	ldrd	r2, r3, [sp]
    c952:	4313      	orrs	r3, r2
    c954:	d1f2      	bne.n	c93c <ndigits_in_u64+0x1c>
    }

    return iNDigits;
    c956:	9b03      	ldr	r3, [sp, #12]
}
    c958:	4618      	mov	r0, r3
    c95a:	b005      	add	sp, #20
    c95c:	f85d fb04 	ldr.w	pc, [sp], #4

0000c960 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    c960:	b530      	push	{r4, r5, lr}
    c962:	b083      	sub	sp, #12
    c964:	e9cd 0100 	strd	r0, r1, [sp]
    if ( i64Val < 0 )
    c968:	e9dd 2300 	ldrd	r2, r3, [sp]
    c96c:	2b00      	cmp	r3, #0
    c96e:	da07      	bge.n	c980 <ndigits_in_i64+0x20>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    c970:	e9dd 2300 	ldrd	r2, r3, [sp]
    c974:	2100      	movs	r1, #0
    c976:	4254      	negs	r4, r2
    c978:	eb61 0503 	sbc.w	r5, r1, r3
    c97c:	e9cd 4500 	strd	r4, r5, [sp]
    }

    return ndigits_in_u64((uint64_t) i64Val);
    c980:	e9dd 2300 	ldrd	r2, r3, [sp]
    c984:	4610      	mov	r0, r2
    c986:	4619      	mov	r1, r3
    c988:	f7ff ffca 	bl	c920 <ndigits_in_u64>
    c98c:	4603      	mov	r3, r0
}
    c98e:	4618      	mov	r0, r3
    c990:	b003      	add	sp, #12
    c992:	bd30      	pop	{r4, r5, pc}

0000c994 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    c994:	b084      	sub	sp, #16
    c996:	e9cd 0100 	strd	r0, r1, [sp]
    int iDigits = ui64Val ? 0 : 1;
    c99a:	9a00      	ldr	r2, [sp, #0]
    c99c:	9b01      	ldr	r3, [sp, #4]
    c99e:	4313      	orrs	r3, r2
    c9a0:	2b00      	cmp	r3, #0
    c9a2:	bf0c      	ite	eq
    c9a4:	2301      	moveq	r3, #1
    c9a6:	2300      	movne	r3, #0
    c9a8:	b2db      	uxtb	r3, r3
    c9aa:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    c9ac:	e00e      	b.n	c9cc <ndigits_in_hex+0x38>
    {
        ui64Val >>= 4;
    c9ae:	e9dd 0100 	ldrd	r0, r1, [sp]
    c9b2:	f04f 0200 	mov.w	r2, #0
    c9b6:	f04f 0300 	mov.w	r3, #0
    c9ba:	0902      	lsrs	r2, r0, #4
    c9bc:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    c9c0:	090b      	lsrs	r3, r1, #4
    c9c2:	e9cd 2300 	strd	r2, r3, [sp]
        ++iDigits;
    c9c6:	9b03      	ldr	r3, [sp, #12]
    c9c8:	3301      	adds	r3, #1
    c9ca:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    c9cc:	e9dd 2300 	ldrd	r2, r3, [sp]
    c9d0:	4313      	orrs	r3, r2
    c9d2:	d1ec      	bne.n	c9ae <ndigits_in_hex+0x1a>
    }

    return iDigits;
    c9d4:	9b03      	ldr	r3, [sp, #12]
}
    c9d6:	4618      	mov	r0, r3
    c9d8:	b004      	add	sp, #16
    c9da:	4770      	bx	lr

0000c9dc <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    c9dc:	b086      	sub	sp, #24
    c9de:	9001      	str	r0, [sp, #4]
    c9e0:	9100      	str	r1, [sp, #0]
    bool bNeg = false;
    c9e2:	2300      	movs	r3, #0
    c9e4:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    c9e8:	2300      	movs	r3, #0
    c9ea:	9304      	str	r3, [sp, #16]
    c9ec:	2300      	movs	r3, #0
    c9ee:	9303      	str	r3, [sp, #12]

    if ( *pcStr == '-')
    c9f0:	9b01      	ldr	r3, [sp, #4]
    c9f2:	781b      	ldrb	r3, [r3, #0]
    c9f4:	2b2d      	cmp	r3, #45	; 0x2d
    c9f6:	d11c      	bne.n	ca32 <decstr_to_int+0x56>
    {
        bNeg = true;
    c9f8:	2301      	movs	r3, #1
    c9fa:	f88d 3017 	strb.w	r3, [sp, #23]
        pcStr++;
    c9fe:	9b01      	ldr	r3, [sp, #4]
    ca00:	3301      	adds	r3, #1
    ca02:	9301      	str	r3, [sp, #4]
        uCnt++;
    ca04:	9b03      	ldr	r3, [sp, #12]
    ca06:	3301      	adds	r3, #1
    ca08:	9303      	str	r3, [sp, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ca0a:	e012      	b.n	ca32 <decstr_to_int+0x56>
    {
        ++uCnt;
    ca0c:	9b03      	ldr	r3, [sp, #12]
    ca0e:	3301      	adds	r3, #1
    ca10:	9303      	str	r3, [sp, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    ca12:	9a04      	ldr	r2, [sp, #16]
    ca14:	4613      	mov	r3, r2
    ca16:	009b      	lsls	r3, r3, #2
    ca18:	4413      	add	r3, r2
    ca1a:	005b      	lsls	r3, r3, #1
    ca1c:	9304      	str	r3, [sp, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    ca1e:	9b01      	ldr	r3, [sp, #4]
    ca20:	781b      	ldrb	r3, [r3, #0]
    ca22:	461a      	mov	r2, r3
    ca24:	9b04      	ldr	r3, [sp, #16]
    ca26:	4413      	add	r3, r2
    ca28:	3b30      	subs	r3, #48	; 0x30
    ca2a:	9304      	str	r3, [sp, #16]
        pcStr++;
    ca2c:	9b01      	ldr	r3, [sp, #4]
    ca2e:	3301      	adds	r3, #1
    ca30:	9301      	str	r3, [sp, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ca32:	9b01      	ldr	r3, [sp, #4]
    ca34:	781b      	ldrb	r3, [r3, #0]
    ca36:	2b2f      	cmp	r3, #47	; 0x2f
    ca38:	d903      	bls.n	ca42 <decstr_to_int+0x66>
    ca3a:	9b01      	ldr	r3, [sp, #4]
    ca3c:	781b      	ldrb	r3, [r3, #0]
    ca3e:	2b39      	cmp	r3, #57	; 0x39
    ca40:	d9e4      	bls.n	ca0c <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    ca42:	9b00      	ldr	r3, [sp, #0]
    ca44:	2b00      	cmp	r3, #0
    ca46:	d002      	beq.n	ca4e <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    ca48:	9b00      	ldr	r3, [sp, #0]
    ca4a:	9a03      	ldr	r2, [sp, #12]
    ca4c:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    ca4e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ca52:	2b00      	cmp	r3, #0
    ca54:	d002      	beq.n	ca5c <decstr_to_int+0x80>
    ca56:	9b04      	ldr	r3, [sp, #16]
    ca58:	425b      	negs	r3, r3
    ca5a:	e000      	b.n	ca5e <decstr_to_int+0x82>
    ca5c:	9b04      	ldr	r3, [sp, #16]
}
    ca5e:	4618      	mov	r0, r3
    ca60:	b006      	add	sp, #24
    ca62:	4770      	bx	lr

0000ca64 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    ca64:	b500      	push	{lr}
    ca66:	b091      	sub	sp, #68	; 0x44
    ca68:	e9cd 0102 	strd	r0, r1, [sp, #8]
    ca6c:	9201      	str	r2, [sp, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    ca6e:	2300      	movs	r3, #0
    ca70:	930f      	str	r3, [sp, #60]	; 0x3c
    ca72:	2300      	movs	r3, #0
    ca74:	930e      	str	r3, [sp, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    ca76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    ca7a:	f7ff fe5d 	bl	c738 <divu64_10>
    ca7e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    ca82:	9902      	ldr	r1, [sp, #8]
    ca84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ca86:	4613      	mov	r3, r2
    ca88:	009b      	lsls	r3, r3, #2
    ca8a:	4413      	add	r3, r2
    ca8c:	005b      	lsls	r3, r3, #1
    ca8e:	1acb      	subs	r3, r1, r3
    ca90:	930b      	str	r3, [sp, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    ca92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca94:	b2da      	uxtb	r2, r3
    ca96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ca98:	1c59      	adds	r1, r3, #1
    ca9a:	910f      	str	r1, [sp, #60]	; 0x3c
    ca9c:	3230      	adds	r2, #48	; 0x30
    ca9e:	b2d2      	uxtb	r2, r2
    caa0:	3340      	adds	r3, #64	; 0x40
    caa2:	446b      	add	r3, sp
    caa4:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    caa8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    caac:	e9cd 2302 	strd	r2, r3, [sp, #8]
    } while ( ui64Val );
    cab0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cab4:	4313      	orrs	r3, r2
    cab6:	d1de      	bne.n	ca76 <uint64_to_str+0x12>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    cab8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    caba:	930e      	str	r3, [sp, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    cabc:	9b01      	ldr	r3, [sp, #4]
    cabe:	2b00      	cmp	r3, #0
    cac0:	d010      	beq.n	cae4 <uint64_to_str+0x80>
    {
        while ( ix-- )
    cac2:	e007      	b.n	cad4 <uint64_to_str+0x70>
        {
            *pcBuf++ = tbuf[ix];
    cac4:	9b01      	ldr	r3, [sp, #4]
    cac6:	1c5a      	adds	r2, r3, #1
    cac8:	9201      	str	r2, [sp, #4]
    caca:	a904      	add	r1, sp, #16
    cacc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    cace:	440a      	add	r2, r1
    cad0:	7812      	ldrb	r2, [r2, #0]
    cad2:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    cad4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cad6:	1e5a      	subs	r2, r3, #1
    cad8:	920f      	str	r2, [sp, #60]	; 0x3c
    cada:	2b00      	cmp	r3, #0
    cadc:	d1f2      	bne.n	cac4 <uint64_to_str+0x60>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    cade:	9b01      	ldr	r3, [sp, #4]
    cae0:	2200      	movs	r2, #0
    cae2:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    cae4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
}
    cae6:	4618      	mov	r0, r3
    cae8:	b011      	add	sp, #68	; 0x44
    caea:	f85d fb04 	ldr.w	pc, [sp], #4

0000caee <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    caee:	b08c      	sub	sp, #48	; 0x30
    caf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
    caf4:	9201      	str	r2, [sp, #4]
    caf6:	f88d 3003 	strb.w	r3, [sp, #3]
    int iNumDig, ix = 0;
    cafa:	2300      	movs	r3, #0
    cafc:	930b      	str	r3, [sp, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    cafe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cb02:	4313      	orrs	r3, r2
    cb04:	d135      	bne.n	cb72 <uint64_to_hexstr+0x84>
    {
        tbuf[ix++] = '0';   // Print a '0'
    cb06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb08:	1c5a      	adds	r2, r3, #1
    cb0a:	920b      	str	r2, [sp, #44]	; 0x2c
    cb0c:	3330      	adds	r3, #48	; 0x30
    cb0e:	446b      	add	r3, sp
    cb10:	2230      	movs	r2, #48	; 0x30
    cb12:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    cb16:	e02c      	b.n	cb72 <uint64_to_hexstr+0x84>
    {
        cCh = ui64Val & 0xf;
    cb18:	f89d 3008 	ldrb.w	r3, [sp, #8]
    cb1c:	f003 030f 	and.w	r3, r3, #15
    cb20:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    cb24:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    cb28:	2b09      	cmp	r3, #9
    cb2a:	d90b      	bls.n	cb44 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    cb2c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cb30:	2b00      	cmp	r3, #0
    cb32:	d001      	beq.n	cb38 <uint64_to_hexstr+0x4a>
    cb34:	2227      	movs	r2, #39	; 0x27
    cb36:	e000      	b.n	cb3a <uint64_to_hexstr+0x4c>
    cb38:	2207      	movs	r2, #7
    cb3a:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    cb3e:	4413      	add	r3, r2
    cb40:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    cb44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb46:	1c5a      	adds	r2, r3, #1
    cb48:	920b      	str	r2, [sp, #44]	; 0x2c
    cb4a:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    cb4e:	3230      	adds	r2, #48	; 0x30
    cb50:	b2d2      	uxtb	r2, r2
    cb52:	3330      	adds	r3, #48	; 0x30
    cb54:	446b      	add	r3, sp
    cb56:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    cb5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    cb5e:	f04f 0200 	mov.w	r2, #0
    cb62:	f04f 0300 	mov.w	r3, #0
    cb66:	0902      	lsrs	r2, r0, #4
    cb68:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    cb6c:	090b      	lsrs	r3, r1, #4
    cb6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    while ( ui64Val )
    cb72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cb76:	4313      	orrs	r3, r2
    cb78:	d1ce      	bne.n	cb18 <uint64_to_hexstr+0x2a>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    cb7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb7c:	9309      	str	r3, [sp, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    cb7e:	9b01      	ldr	r3, [sp, #4]
    cb80:	2b00      	cmp	r3, #0
    cb82:	d010      	beq.n	cba6 <uint64_to_hexstr+0xb8>
    {
        while (ix--)
    cb84:	e007      	b.n	cb96 <uint64_to_hexstr+0xa8>
        {
            *pcBuf++ = tbuf[ix];
    cb86:	9b01      	ldr	r3, [sp, #4]
    cb88:	1c5a      	adds	r2, r3, #1
    cb8a:	9201      	str	r2, [sp, #4]
    cb8c:	a904      	add	r1, sp, #16
    cb8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cb90:	440a      	add	r2, r1
    cb92:	7812      	ldrb	r2, [r2, #0]
    cb94:	701a      	strb	r2, [r3, #0]
        while (ix--)
    cb96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb98:	1e5a      	subs	r2, r3, #1
    cb9a:	920b      	str	r2, [sp, #44]	; 0x2c
    cb9c:	2b00      	cmp	r3, #0
    cb9e:	d1f2      	bne.n	cb86 <uint64_to_hexstr+0x98>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    cba0:	9b01      	ldr	r3, [sp, #4]
    cba2:	2200      	movs	r2, #0
    cba4:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    cba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    cba8:	4618      	mov	r0, r3
    cbaa:	b00c      	add	sp, #48	; 0x30
    cbac:	4770      	bx	lr

0000cbae <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    cbae:	b084      	sub	sp, #16
    cbb0:	9001      	str	r0, [sp, #4]
    uint32_t ui32RetVal = 0;
    cbb2:	2300      	movs	r3, #0
    cbb4:	9303      	str	r3, [sp, #12]
    if ( !pcBuf )
    cbb6:	9b01      	ldr	r3, [sp, #4]
    cbb8:	2b00      	cmp	r3, #0
    cbba:	d104      	bne.n	cbc6 <simple_strlen+0x18>
    {
        return ui32RetVal;
    cbbc:	9b03      	ldr	r3, [sp, #12]
    cbbe:	e009      	b.n	cbd4 <simple_strlen+0x26>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    cbc0:	9b03      	ldr	r3, [sp, #12]
    cbc2:	3301      	adds	r3, #1
    cbc4:	9303      	str	r3, [sp, #12]
    while ( *pcBuf++ )
    cbc6:	9b01      	ldr	r3, [sp, #4]
    cbc8:	1c5a      	adds	r2, r3, #1
    cbca:	9201      	str	r2, [sp, #4]
    cbcc:	781b      	ldrb	r3, [r3, #0]
    cbce:	2b00      	cmp	r3, #0
    cbd0:	d1f6      	bne.n	cbc0 <simple_strlen+0x12>
    }
    return ui32RetVal;
    cbd2:	9b03      	ldr	r3, [sp, #12]
}
    cbd4:	4618      	mov	r0, r3
    cbd6:	b004      	add	sp, #16
    cbd8:	4770      	bx	lr

0000cbda <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    cbda:	b086      	sub	sp, #24
    cbdc:	9003      	str	r0, [sp, #12]
    cbde:	460b      	mov	r3, r1
    cbe0:	9201      	str	r2, [sp, #4]
    cbe2:	f88d 300b 	strb.w	r3, [sp, #11]
    int32_t i32Cnt = 0;
    cbe6:	2300      	movs	r3, #0
    cbe8:	9305      	str	r3, [sp, #20]

    if ( i32NumChars <= 0 )
    cbea:	9b01      	ldr	r3, [sp, #4]
    cbec:	2b00      	cmp	r3, #0
    cbee:	dc0d      	bgt.n	cc0c <padbuffer+0x32>
    {
        return i32Cnt;
    cbf0:	9b05      	ldr	r3, [sp, #20]
    cbf2:	e011      	b.n	cc18 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    cbf4:	9b03      	ldr	r3, [sp, #12]
    cbf6:	2b00      	cmp	r3, #0
    cbf8:	d005      	beq.n	cc06 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    cbfa:	9b03      	ldr	r3, [sp, #12]
    cbfc:	1c5a      	adds	r2, r3, #1
    cbfe:	9203      	str	r2, [sp, #12]
    cc00:	f89d 200b 	ldrb.w	r2, [sp, #11]
    cc04:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    cc06:	9b05      	ldr	r3, [sp, #20]
    cc08:	3301      	adds	r3, #1
    cc0a:	9305      	str	r3, [sp, #20]
    while ( i32NumChars-- )
    cc0c:	9b01      	ldr	r3, [sp, #4]
    cc0e:	1e5a      	subs	r2, r3, #1
    cc10:	9201      	str	r2, [sp, #4]
    cc12:	2b00      	cmp	r3, #0
    cc14:	d1ee      	bne.n	cbf4 <padbuffer+0x1a>
    }

    return i32Cnt;
    cc16:	9b05      	ldr	r3, [sp, #20]
}
    cc18:	4618      	mov	r0, r3
    cc1a:	b006      	add	sp, #24
    cc1c:	4770      	bx	lr
	...

0000cc20 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    cc20:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc22:	b08f      	sub	sp, #60	; 0x3c
    cc24:	ed8d 0a03 	vstr	s0, [sp, #12]
    cc28:	9002      	str	r0, [sp, #8]
    cc2a:	9101      	str	r1, [sp, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    cc2c:	9b02      	ldr	r3, [sp, #8]
    cc2e:	681b      	ldr	r3, [r3, #0]
    cc30:	9309      	str	r3, [sp, #36]	; 0x24
    if (iBufSize < 4)
    cc32:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cc34:	2b03      	cmp	r3, #3
    cc36:	dc02      	bgt.n	cc3e <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    cc38:	f06f 0302 	mvn.w	r3, #2
    cc3c:	e0e9      	b.n	ce12 <ftoa+0x1f2>
    }

    if (fValue == 0.0f)
    cc3e:	eddd 7a03 	vldr	s15, [sp, #12]
    cc42:	eef5 7a40 	vcmp.f32	s15, #0.0
    cc46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cc4a:	d104      	bne.n	cc56 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    cc4c:	9b02      	ldr	r3, [sp, #8]
    cc4e:	4a72      	ldr	r2, [pc, #456]	; (ce18 <ftoa+0x1f8>)
    cc50:	601a      	str	r2, [r3, #0]
        return 3;
    cc52:	2303      	movs	r3, #3
    cc54:	e0dd      	b.n	ce12 <ftoa+0x1f2>
    }

    pcBufInitial = pcBuf;
    cc56:	9b02      	ldr	r3, [sp, #8]
    cc58:	9308      	str	r3, [sp, #32]

    unFloatValue.F = fValue;
    cc5a:	9b03      	ldr	r3, [sp, #12]
    cc5c:	9304      	str	r3, [sp, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    cc5e:	9b04      	ldr	r3, [sp, #16]
    cc60:	15db      	asrs	r3, r3, #23
    cc62:	b2db      	uxtb	r3, r3
    cc64:	3b7f      	subs	r3, #127	; 0x7f
    cc66:	9307      	str	r3, [sp, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    cc68:	9b04      	ldr	r3, [sp, #16]
    cc6a:	f3c3 0316 	ubfx	r3, r3, #0, #23
    cc6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    cc72:	9306      	str	r3, [sp, #24]
    i32FracPart = 0;
    cc74:	2300      	movs	r3, #0
    cc76:	930c      	str	r3, [sp, #48]	; 0x30
    i32IntPart = 0;
    cc78:	2300      	movs	r3, #0
    cc7a:	930d      	str	r3, [sp, #52]	; 0x34

    if (iExp2 >= 31)
    cc7c:	9b07      	ldr	r3, [sp, #28]
    cc7e:	2b1e      	cmp	r3, #30
    cc80:	dd02      	ble.n	cc88 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    cc82:	f06f 0301 	mvn.w	r3, #1
    cc86:	e0c4      	b.n	ce12 <ftoa+0x1f2>
    }
    else if (iExp2 < -23)
    cc88:	9b07      	ldr	r3, [sp, #28]
    cc8a:	f113 0f17 	cmn.w	r3, #23
    cc8e:	da02      	bge.n	cc96 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    cc90:	f04f 33ff 	mov.w	r3, #4294967295
    cc94:	e0bd      	b.n	ce12 <ftoa+0x1f2>
    }
    else if (iExp2 >= 23)
    cc96:	9b07      	ldr	r3, [sp, #28]
    cc98:	2b16      	cmp	r3, #22
    cc9a:	dd06      	ble.n	ccaa <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    cc9c:	9b07      	ldr	r3, [sp, #28]
    cc9e:	3b17      	subs	r3, #23
    cca0:	9a06      	ldr	r2, [sp, #24]
    cca2:	fa02 f303 	lsl.w	r3, r2, r3
    cca6:	930d      	str	r3, [sp, #52]	; 0x34
    cca8:	e01a      	b.n	cce0 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    ccaa:	9b07      	ldr	r3, [sp, #28]
    ccac:	2b00      	cmp	r3, #0
    ccae:	db0f      	blt.n	ccd0 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    ccb0:	9b07      	ldr	r3, [sp, #28]
    ccb2:	f1c3 0317 	rsb	r3, r3, #23
    ccb6:	9a06      	ldr	r2, [sp, #24]
    ccb8:	fa42 f303 	asr.w	r3, r2, r3
    ccbc:	930d      	str	r3, [sp, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    ccbe:	9b07      	ldr	r3, [sp, #28]
    ccc0:	3301      	adds	r3, #1
    ccc2:	9a06      	ldr	r2, [sp, #24]
    ccc4:	fa02 f303 	lsl.w	r3, r2, r3
    ccc8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cccc:	930c      	str	r3, [sp, #48]	; 0x30
    ccce:	e007      	b.n	cce0 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    ccd0:	9b06      	ldr	r3, [sp, #24]
    ccd2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    ccd6:	9b07      	ldr	r3, [sp, #28]
    ccd8:	43db      	mvns	r3, r3
    ccda:	fa42 f303 	asr.w	r3, r2, r3
    ccde:	930c      	str	r3, [sp, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    cce0:	9b04      	ldr	r3, [sp, #16]
    cce2:	2b00      	cmp	r3, #0
    cce4:	da04      	bge.n	ccf0 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    cce6:	9b02      	ldr	r3, [sp, #8]
    cce8:	1c5a      	adds	r2, r3, #1
    ccea:	9202      	str	r2, [sp, #8]
    ccec:	222d      	movs	r2, #45	; 0x2d
    ccee:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    ccf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ccf2:	2b00      	cmp	r3, #0
    ccf4:	d105      	bne.n	cd02 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    ccf6:	9b02      	ldr	r3, [sp, #8]
    ccf8:	1c5a      	adds	r2, r3, #1
    ccfa:	9202      	str	r2, [sp, #8]
    ccfc:	2230      	movs	r2, #48	; 0x30
    ccfe:	701a      	strb	r2, [r3, #0]
    cd00:	e023      	b.n	cd4a <ftoa+0x12a>
    }
    else
    {
        if (i32IntPart > 0)
    cd02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cd04:	2b00      	cmp	r3, #0
    cd06:	dd09      	ble.n	cd1c <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
    cd08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cd0a:	17da      	asrs	r2, r3, #31
    cd0c:	461e      	mov	r6, r3
    cd0e:	4617      	mov	r7, r2
    cd10:	9a02      	ldr	r2, [sp, #8]
    cd12:	4630      	mov	r0, r6
    cd14:	4639      	mov	r1, r7
    cd16:	f7ff fea5 	bl	ca64 <uint64_to_str>
    cd1a:	e012      	b.n	cd42 <ftoa+0x122>
        }
        else
        {
            *pcBuf++ = '-';
    cd1c:	9b02      	ldr	r3, [sp, #8]
    cd1e:	1c5a      	adds	r2, r3, #1
    cd20:	9202      	str	r2, [sp, #8]
    cd22:	222d      	movs	r2, #45	; 0x2d
    cd24:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    cd26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cd28:	425b      	negs	r3, r3
    cd2a:	17da      	asrs	r2, r3, #31
    cd2c:	461c      	mov	r4, r3
    cd2e:	4615      	mov	r5, r2
    cd30:	9a02      	ldr	r2, [sp, #8]
    cd32:	4620      	mov	r0, r4
    cd34:	4629      	mov	r1, r5
    cd36:	f7ff fe95 	bl	ca64 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    cd3a:	e002      	b.n	cd42 <ftoa+0x122>
        {
            pcBuf++;
    cd3c:	9b02      	ldr	r3, [sp, #8]
    cd3e:	3301      	adds	r3, #1
    cd40:	9302      	str	r3, [sp, #8]
        while (*pcBuf)    // Get to end of new string
    cd42:	9b02      	ldr	r3, [sp, #8]
    cd44:	781b      	ldrb	r3, [r3, #0]
    cd46:	2b00      	cmp	r3, #0
    cd48:	d1f8      	bne.n	cd3c <ftoa+0x11c>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    cd4a:	9b02      	ldr	r3, [sp, #8]
    cd4c:	1c5a      	adds	r2, r3, #1
    cd4e:	9202      	str	r2, [sp, #8]
    cd50:	222e      	movs	r2, #46	; 0x2e
    cd52:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    cd54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cd56:	2b00      	cmp	r3, #0
    cd58:	d105      	bne.n	cd66 <ftoa+0x146>
    {
        *pcBuf++ = '0';
    cd5a:	9b02      	ldr	r3, [sp, #8]
    cd5c:	1c5a      	adds	r2, r3, #1
    cd5e:	9202      	str	r2, [sp, #8]
    cd60:	2230      	movs	r2, #48	; 0x30
    cd62:	701a      	strb	r2, [r3, #0]
    cd64:	e04f      	b.n	ce06 <ftoa+0x1e6>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    cd66:	9a02      	ldr	r2, [sp, #8]
    cd68:	9b08      	ldr	r3, [sp, #32]
    cd6a:	1ad3      	subs	r3, r2, r3
    cd6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    cd6e:	1ad3      	subs	r3, r2, r3
    cd70:	3b01      	subs	r3, #1
    cd72:	9305      	str	r3, [sp, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    cd74:	9a05      	ldr	r2, [sp, #20]
    cd76:	9b01      	ldr	r3, [sp, #4]
    cd78:	4293      	cmp	r3, r2
    cd7a:	bfa8      	it	ge
    cd7c:	4613      	movge	r3, r2
    cd7e:	9305      	str	r3, [sp, #20]

        for (jx = 0; jx < iMax; jx++)
    cd80:	2300      	movs	r3, #0
    cd82:	930a      	str	r3, [sp, #40]	; 0x28
    cd84:	e015      	b.n	cdb2 <ftoa+0x192>
        {
            i32FracPart *= 10;
    cd86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cd88:	4613      	mov	r3, r2
    cd8a:	009b      	lsls	r3, r3, #2
    cd8c:	4413      	add	r3, r2
    cd8e:	005b      	lsls	r3, r3, #1
    cd90:	930c      	str	r3, [sp, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    cd92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cd94:	161b      	asrs	r3, r3, #24
    cd96:	b2da      	uxtb	r2, r3
    cd98:	9b02      	ldr	r3, [sp, #8]
    cd9a:	1c59      	adds	r1, r3, #1
    cd9c:	9102      	str	r1, [sp, #8]
    cd9e:	3230      	adds	r2, #48	; 0x30
    cda0:	b2d2      	uxtb	r2, r2
    cda2:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    cda4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cda6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cdaa:	930c      	str	r3, [sp, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    cdac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cdae:	3301      	adds	r3, #1
    cdb0:	930a      	str	r3, [sp, #40]	; 0x28
    cdb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    cdb4:	9b05      	ldr	r3, [sp, #20]
    cdb6:	429a      	cmp	r2, r3
    cdb8:	dbe5      	blt.n	cd86 <ftoa+0x166>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    cdba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cdbc:	4613      	mov	r3, r2
    cdbe:	009b      	lsls	r3, r3, #2
    cdc0:	4413      	add	r3, r2
    cdc2:	005b      	lsls	r3, r3, #1
    cdc4:	161b      	asrs	r3, r3, #24
    cdc6:	2b04      	cmp	r3, #4
    cdc8:	dd1d      	ble.n	ce06 <ftoa+0x1e6>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    cdca:	9b02      	ldr	r3, [sp, #8]
    cdcc:	3b01      	subs	r3, #1
    cdce:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cdd0:	e015      	b.n	cdfe <ftoa+0x1de>
            {
                if ( *pcBuftmp == '.' )
    cdd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cdd4:	781b      	ldrb	r3, [r3, #0]
    cdd6:	2b2e      	cmp	r3, #46	; 0x2e
    cdd8:	d00e      	beq.n	cdf8 <ftoa+0x1d8>
                {
                }
                else if ( *pcBuftmp == '9' )
    cdda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cddc:	781b      	ldrb	r3, [r3, #0]
    cdde:	2b39      	cmp	r3, #57	; 0x39
    cde0:	d103      	bne.n	cdea <ftoa+0x1ca>
                {
                    *pcBuftmp = '0';
    cde2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cde4:	2230      	movs	r2, #48	; 0x30
    cde6:	701a      	strb	r2, [r3, #0]
    cde8:	e006      	b.n	cdf8 <ftoa+0x1d8>
                }
                else
                {
                    *pcBuftmp += 1;
    cdea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cdec:	781b      	ldrb	r3, [r3, #0]
    cdee:	3301      	adds	r3, #1
    cdf0:	b2da      	uxtb	r2, r3
    cdf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cdf4:	701a      	strb	r2, [r3, #0]
                    break;
    cdf6:	e006      	b.n	ce06 <ftoa+0x1e6>
                }
                pcBuftmp--;
    cdf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cdfa:	3b01      	subs	r3, #1
    cdfc:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cdfe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ce00:	9b08      	ldr	r3, [sp, #32]
    ce02:	429a      	cmp	r2, r3
    ce04:	d2e5      	bcs.n	cdd2 <ftoa+0x1b2>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    ce06:	9b02      	ldr	r3, [sp, #8]
    ce08:	2200      	movs	r2, #0
    ce0a:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    ce0c:	9a02      	ldr	r2, [sp, #8]
    ce0e:	9b08      	ldr	r3, [sp, #32]
    ce10:	1ad3      	subs	r3, r2, r3
} // ftoa()
    ce12:	4618      	mov	r0, r3
    ce14:	b00f      	add	sp, #60	; 0x3c
    ce16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ce18:	00302e30 	.word	0x00302e30

0000ce1c <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    ce1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ce20:	b097      	sub	sp, #92	; 0x5c
    ce22:	9003      	str	r0, [sp, #12]
    ce24:	9102      	str	r1, [sp, #8]
    ce26:	9201      	str	r2, [sp, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    ce28:	2300      	movs	r3, #0
    ce2a:	9311      	str	r3, [sp, #68]	; 0x44
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    ce2c:	2300      	movs	r3, #0
    ce2e:	930b      	str	r3, [sp, #44]	; 0x2c

    while ( *pcFmt != 0x0 )
    ce30:	e2e9      	b.n	d406 <am_util_stdio_vsprintf+0x5ea>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    ce32:	2306      	movs	r3, #6
    ce34:	930e      	str	r3, [sp, #56]	; 0x38

        if ( *pcFmt != '%' )
    ce36:	9b02      	ldr	r3, [sp, #8]
    ce38:	781b      	ldrb	r3, [r3, #0]
    ce3a:	2b25      	cmp	r3, #37	; 0x25
    ce3c:	d01f      	beq.n	ce7e <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    ce3e:	9b03      	ldr	r3, [sp, #12]
    ce40:	2b00      	cmp	r3, #0
    ce42:	d015      	beq.n	ce70 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    ce44:	9b02      	ldr	r3, [sp, #8]
    ce46:	781b      	ldrb	r3, [r3, #0]
    ce48:	2b0a      	cmp	r3, #10
    ce4a:	d10b      	bne.n	ce64 <am_util_stdio_vsprintf+0x48>
    ce4c:	4ba8      	ldr	r3, [pc, #672]	; (d0f0 <am_util_stdio_vsprintf+0x2d4>)
    ce4e:	781b      	ldrb	r3, [r3, #0]
    ce50:	2b00      	cmp	r3, #0
    ce52:	d007      	beq.n	ce64 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    ce54:	9b03      	ldr	r3, [sp, #12]
    ce56:	1c5a      	adds	r2, r3, #1
    ce58:	9203      	str	r2, [sp, #12]
    ce5a:	220d      	movs	r2, #13
    ce5c:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    ce5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ce60:	3301      	adds	r3, #1
    ce62:	9311      	str	r3, [sp, #68]	; 0x44
                }
                *pcBuf++ = *pcFmt;
    ce64:	9b03      	ldr	r3, [sp, #12]
    ce66:	1c5a      	adds	r2, r3, #1
    ce68:	9203      	str	r2, [sp, #12]
    ce6a:	9a02      	ldr	r2, [sp, #8]
    ce6c:	7812      	ldrb	r2, [r2, #0]
    ce6e:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    ce70:	9b02      	ldr	r3, [sp, #8]
    ce72:	3301      	adds	r3, #1
    ce74:	9302      	str	r3, [sp, #8]
            ++ui32CharCnt;
    ce76:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ce78:	3301      	adds	r3, #1
    ce7a:	9311      	str	r3, [sp, #68]	; 0x44
            continue;
    ce7c:	e2c3      	b.n	d406 <am_util_stdio_vsprintf+0x5ea>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    ce7e:	9b02      	ldr	r3, [sp, #8]
    ce80:	3301      	adds	r3, #1
    ce82:	9302      	str	r3, [sp, #8]
        bLower = bLongLong = false;
    ce84:	2300      	movs	r3, #0
    ce86:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    ce8a:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    ce8e:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    ce92:	2320      	movs	r3, #32
    ce94:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

        if ( *pcFmt == '0' )
    ce98:	9b02      	ldr	r3, [sp, #8]
    ce9a:	781b      	ldrb	r3, [r3, #0]
    ce9c:	2b30      	cmp	r3, #48	; 0x30
    ce9e:	d105      	bne.n	ceac <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    cea0:	2330      	movs	r3, #48	; 0x30
    cea2:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
            ++pcFmt;
    cea6:	9b02      	ldr	r3, [sp, #8]
    cea8:	3301      	adds	r3, #1
    ceaa:	9302      	str	r3, [sp, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    ceac:	ab05      	add	r3, sp, #20
    ceae:	4619      	mov	r1, r3
    ceb0:	9802      	ldr	r0, [sp, #8]
    ceb2:	f7ff fd93 	bl	c9dc <decstr_to_int>
    ceb6:	4603      	mov	r3, r0
    ceb8:	9310      	str	r3, [sp, #64]	; 0x40
        pcFmt += ui32NumChars;
    ceba:	9b05      	ldr	r3, [sp, #20]
    cebc:	9a02      	ldr	r2, [sp, #8]
    cebe:	4413      	add	r3, r2
    cec0:	9302      	str	r3, [sp, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    cec2:	9b02      	ldr	r3, [sp, #8]
    cec4:	781b      	ldrb	r3, [r3, #0]
    cec6:	2b73      	cmp	r3, #115	; 0x73
    cec8:	d005      	beq.n	ced6 <am_util_stdio_vsprintf+0xba>
    ceca:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cecc:	2b00      	cmp	r3, #0
    cece:	da02      	bge.n	ced6 <am_util_stdio_vsprintf+0xba>
        {
            iWidth = -iWidth;
    ced0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ced2:	425b      	negs	r3, r3
    ced4:	9310      	str	r3, [sp, #64]	; 0x40
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    ced6:	9b02      	ldr	r3, [sp, #8]
    ced8:	781b      	ldrb	r3, [r3, #0]
    ceda:	2b2e      	cmp	r3, #46	; 0x2e
    cedc:	d10d      	bne.n	cefa <am_util_stdio_vsprintf+0xde>
        {
            ++pcFmt;
    cede:	9b02      	ldr	r3, [sp, #8]
    cee0:	3301      	adds	r3, #1
    cee2:	9302      	str	r3, [sp, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    cee4:	ab05      	add	r3, sp, #20
    cee6:	4619      	mov	r1, r3
    cee8:	9802      	ldr	r0, [sp, #8]
    ceea:	f7ff fd77 	bl	c9dc <decstr_to_int>
    ceee:	4603      	mov	r3, r0
    cef0:	930e      	str	r3, [sp, #56]	; 0x38
            pcFmt += ui32NumChars;
    cef2:	9b05      	ldr	r3, [sp, #20]
    cef4:	9a02      	ldr	r2, [sp, #8]
    cef6:	4413      	add	r3, r2
    cef8:	9302      	str	r3, [sp, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    cefa:	9b02      	ldr	r3, [sp, #8]
    cefc:	781b      	ldrb	r3, [r3, #0]
    cefe:	2b6c      	cmp	r3, #108	; 0x6c
    cf00:	d10c      	bne.n	cf1c <am_util_stdio_vsprintf+0x100>
        {
            pcFmt++;
    cf02:	9b02      	ldr	r3, [sp, #8]
    cf04:	3301      	adds	r3, #1
    cf06:	9302      	str	r3, [sp, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    cf08:	9b02      	ldr	r3, [sp, #8]
    cf0a:	781b      	ldrb	r3, [r3, #0]
    cf0c:	2b6c      	cmp	r3, #108	; 0x6c
    cf0e:	d105      	bne.n	cf1c <am_util_stdio_vsprintf+0x100>
            {
                pcFmt++;
    cf10:	9b02      	ldr	r3, [sp, #8]
    cf12:	3301      	adds	r3, #1
    cf14:	9302      	str	r3, [sp, #8]
                bLongLong = true;
    cf16:	2301      	movs	r3, #1
    cf18:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
            }
        }

        switch ( *pcFmt )
    cf1c:	9b02      	ldr	r3, [sp, #8]
    cf1e:	781b      	ldrb	r3, [r3, #0]
    cf20:	3b46      	subs	r3, #70	; 0x46
    cf22:	2b32      	cmp	r3, #50	; 0x32
    cf24:	f200 825c 	bhi.w	d3e0 <am_util_stdio_vsprintf+0x5c4>
    cf28:	a201      	add	r2, pc, #4	; (adr r2, cf30 <am_util_stdio_vsprintf+0x114>)
    cf2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cf2e:	bf00      	nop
    cf30:	0000d367 	.word	0x0000d367
    cf34:	0000d3e1 	.word	0x0000d3e1
    cf38:	0000d3e1 	.word	0x0000d3e1
    cf3c:	0000d3e1 	.word	0x0000d3e1
    cf40:	0000d3e1 	.word	0x0000d3e1
    cf44:	0000d3e1 	.word	0x0000d3e1
    cf48:	0000d3e1 	.word	0x0000d3e1
    cf4c:	0000d3e1 	.word	0x0000d3e1
    cf50:	0000d3e1 	.word	0x0000d3e1
    cf54:	0000d3e1 	.word	0x0000d3e1
    cf58:	0000d3e1 	.word	0x0000d3e1
    cf5c:	0000d3e1 	.word	0x0000d3e1
    cf60:	0000d3e1 	.word	0x0000d3e1
    cf64:	0000d3e1 	.word	0x0000d3e1
    cf68:	0000d3e1 	.word	0x0000d3e1
    cf6c:	0000d3e1 	.word	0x0000d3e1
    cf70:	0000d3e1 	.word	0x0000d3e1
    cf74:	0000d3e1 	.word	0x0000d3e1
    cf78:	0000d0fb 	.word	0x0000d0fb
    cf7c:	0000d3e1 	.word	0x0000d3e1
    cf80:	0000d3e1 	.word	0x0000d3e1
    cf84:	0000d3e1 	.word	0x0000d3e1
    cf88:	0000d3e1 	.word	0x0000d3e1
    cf8c:	0000d3e1 	.word	0x0000d3e1
    cf90:	0000d3e1 	.word	0x0000d3e1
    cf94:	0000d3e1 	.word	0x0000d3e1
    cf98:	0000d3e1 	.word	0x0000d3e1
    cf9c:	0000d3e1 	.word	0x0000d3e1
    cfa0:	0000d3e1 	.word	0x0000d3e1
    cfa4:	0000cffd 	.word	0x0000cffd
    cfa8:	0000d22b 	.word	0x0000d22b
    cfac:	0000d3e1 	.word	0x0000d3e1
    cfb0:	0000d367 	.word	0x0000d367
    cfb4:	0000d3e1 	.word	0x0000d3e1
    cfb8:	0000d3e1 	.word	0x0000d3e1
    cfbc:	0000d22b 	.word	0x0000d22b
    cfc0:	0000d3e1 	.word	0x0000d3e1
    cfc4:	0000d3e1 	.word	0x0000d3e1
    cfc8:	0000d3e1 	.word	0x0000d3e1
    cfcc:	0000d3e1 	.word	0x0000d3e1
    cfd0:	0000d3e1 	.word	0x0000d3e1
    cfd4:	0000d3e1 	.word	0x0000d3e1
    cfd8:	0000d3e1 	.word	0x0000d3e1
    cfdc:	0000d3e1 	.word	0x0000d3e1
    cfe0:	0000d3e1 	.word	0x0000d3e1
    cfe4:	0000d023 	.word	0x0000d023
    cfe8:	0000d3e1 	.word	0x0000d3e1
    cfec:	0000d195 	.word	0x0000d195
    cff0:	0000d3e1 	.word	0x0000d3e1
    cff4:	0000d3e1 	.word	0x0000d3e1
    cff8:	0000d0f5 	.word	0x0000d0f5
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cffc:	9b01      	ldr	r3, [sp, #4]
    cffe:	1d1a      	adds	r2, r3, #4
    d000:	9201      	str	r2, [sp, #4]
    d002:	681b      	ldr	r3, [r3, #0]
    d004:	f88d 301f 	strb.w	r3, [sp, #31]

                if ( pcBuf )
    d008:	9b03      	ldr	r3, [sp, #12]
    d00a:	2b00      	cmp	r3, #0
    d00c:	d005      	beq.n	d01a <am_util_stdio_vsprintf+0x1fe>
                {
                    *pcBuf++ = ui8CharSpecifier;
    d00e:	9b03      	ldr	r3, [sp, #12]
    d010:	1c5a      	adds	r2, r3, #1
    d012:	9203      	str	r2, [sp, #12]
    d014:	f89d 201f 	ldrb.w	r2, [sp, #31]
    d018:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d01a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d01c:	3301      	adds	r3, #1
    d01e:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d020:	e1ee      	b.n	d400 <am_util_stdio_vsprintf+0x5e4>

            case 's':
                pcStr = va_arg(pArgs, char *);
    d022:	9b01      	ldr	r3, [sp, #4]
    d024:	1d1a      	adds	r2, r3, #4
    d026:	9201      	str	r2, [sp, #4]
    d028:	681b      	ldr	r3, [r3, #0]
    d02a:	9315      	str	r3, [sp, #84]	; 0x54
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    d02c:	9815      	ldr	r0, [sp, #84]	; 0x54
    d02e:	f7ff fdbe 	bl	cbae <simple_strlen>
    d032:	900b      	str	r0, [sp, #44]	; 0x2c
                if ( iWidth > 0 )
    d034:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d036:	2b00      	cmp	r3, #0
    d038:	dd2e      	ble.n	d098 <am_util_stdio_vsprintf+0x27c>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    d03a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d03c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d03e:	429a      	cmp	r2, r3
    d040:	d22a      	bcs.n	d098 <am_util_stdio_vsprintf+0x27c>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    d042:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d044:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d046:	1ad3      	subs	r3, r2, r3
    d048:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d04a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d04e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d050:	4619      	mov	r1, r3
    d052:	9803      	ldr	r0, [sp, #12]
    d054:	f7ff fdc1 	bl	cbda <padbuffer>
    d058:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    d05a:	9b03      	ldr	r3, [sp, #12]
    d05c:	2b00      	cmp	r3, #0
    d05e:	d001      	beq.n	d064 <am_util_stdio_vsprintf+0x248>
    d060:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d062:	e000      	b.n	d066 <am_util_stdio_vsprintf+0x24a>
    d064:	2300      	movs	r3, #0
    d066:	9a03      	ldr	r2, [sp, #12]
    d068:	4413      	add	r3, r2
    d06a:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    d06c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d06e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d070:	4413      	add	r3, r2
    d072:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    d074:	2300      	movs	r3, #0
    d076:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }

                while (*pcStr != 0x0)
    d078:	e00e      	b.n	d098 <am_util_stdio_vsprintf+0x27c>
                {
                    if ( pcBuf )
    d07a:	9b03      	ldr	r3, [sp, #12]
    d07c:	2b00      	cmp	r3, #0
    d07e:	d005      	beq.n	d08c <am_util_stdio_vsprintf+0x270>
                    {
                        *pcBuf++ = *pcStr;
    d080:	9b03      	ldr	r3, [sp, #12]
    d082:	1c5a      	adds	r2, r3, #1
    d084:	9203      	str	r2, [sp, #12]
    d086:	9a15      	ldr	r2, [sp, #84]	; 0x54
    d088:	7812      	ldrb	r2, [r2, #0]
    d08a:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    d08c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d08e:	3301      	adds	r3, #1
    d090:	9315      	str	r3, [sp, #84]	; 0x54
                    ++ui32CharCnt;
    d092:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d094:	3301      	adds	r3, #1
    d096:	9311      	str	r3, [sp, #68]	; 0x44
                while (*pcStr != 0x0)
    d098:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d09a:	781b      	ldrb	r3, [r3, #0]
    d09c:	2b00      	cmp	r3, #0
    d09e:	d1ec      	bne.n	d07a <am_util_stdio_vsprintf+0x25e>
                }

                if ( iWidth )
    d0a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d0a2:	2b00      	cmp	r3, #0
    d0a4:	f000 81a9 	beq.w	d3fa <am_util_stdio_vsprintf+0x5de>
                {
                    iWidth = -iWidth;
    d0a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d0aa:	425b      	negs	r3, r3
    d0ac:	9310      	str	r3, [sp, #64]	; 0x40

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    d0ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d0b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d0b2:	429a      	cmp	r2, r3
    d0b4:	f080 81a1 	bcs.w	d3fa <am_util_stdio_vsprintf+0x5de>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    d0b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d0ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d0bc:	1ad3      	subs	r3, r2, r3
    d0be:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d0c0:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d0c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d0c6:	4619      	mov	r1, r3
    d0c8:	9803      	ldr	r0, [sp, #12]
    d0ca:	f7ff fd86 	bl	cbda <padbuffer>
    d0ce:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    d0d0:	9b03      	ldr	r3, [sp, #12]
    d0d2:	2b00      	cmp	r3, #0
    d0d4:	d001      	beq.n	d0da <am_util_stdio_vsprintf+0x2be>
    d0d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d0d8:	e000      	b.n	d0dc <am_util_stdio_vsprintf+0x2c0>
    d0da:	2300      	movs	r3, #0
    d0dc:	9a03      	ldr	r2, [sp, #12]
    d0de:	4413      	add	r3, r2
    d0e0:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    d0e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d0e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d0e6:	4413      	add	r3, r2
    d0e8:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    d0ea:	2300      	movs	r3, #0
    d0ec:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }
                break;
    d0ee:	e184      	b.n	d3fa <am_util_stdio_vsprintf+0x5de>
    d0f0:	10001138 	.word	0x10001138

            case 'x':
                bLower = true;
    d0f4:	2301      	movs	r3, #1
    d0f6:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d0fa:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d0fe:	2b00      	cmp	r3, #0
    d100:	d009      	beq.n	d116 <am_util_stdio_vsprintf+0x2fa>
    d102:	9b01      	ldr	r3, [sp, #4]
    d104:	3307      	adds	r3, #7
    d106:	f023 0307 	bic.w	r3, r3, #7
    d10a:	f103 0208 	add.w	r2, r3, #8
    d10e:	9201      	str	r2, [sp, #4]
    d110:	e9d3 4500 	ldrd	r4, r5, [r3]
    d114:	e006      	b.n	d124 <am_util_stdio_vsprintf+0x308>
                                      va_arg(pArgs, uint32_t);
    d116:	9b01      	ldr	r3, [sp, #4]
    d118:	1d1a      	adds	r2, r3, #4
    d11a:	9201      	str	r2, [sp, #4]
    d11c:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d11e:	2200      	movs	r2, #0
    d120:	461c      	mov	r4, r3
    d122:	4615      	mov	r5, r2
    d124:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48

                if ( iWidth )
    d128:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d12a:	2b00      	cmp	r3, #0
    d12c:	d01e      	beq.n	d16c <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    d12e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d132:	f7ff fc2f 	bl	c994 <ndigits_in_hex>
    d136:	4602      	mov	r2, r0
    d138:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d13a:	1a9b      	subs	r3, r3, r2
    d13c:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d13e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d142:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d144:	4619      	mov	r1, r3
    d146:	9803      	ldr	r0, [sp, #12]
    d148:	f7ff fd47 	bl	cbda <padbuffer>
    d14c:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d14e:	9b03      	ldr	r3, [sp, #12]
    d150:	2b00      	cmp	r3, #0
    d152:	d001      	beq.n	d158 <am_util_stdio_vsprintf+0x33c>
    d154:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d156:	e000      	b.n	d15a <am_util_stdio_vsprintf+0x33e>
    d158:	2300      	movs	r3, #0
    d15a:	9a03      	ldr	r2, [sp, #12]
    d15c:	4413      	add	r3, r2
    d15e:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d160:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d162:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d164:	4413      	add	r3, r2
    d166:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d168:	2300      	movs	r3, #0
    d16a:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    d16c:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    d170:	9a03      	ldr	r2, [sp, #12]
    d172:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d176:	f7ff fcba 	bl	caee <uint64_to_hexstr>
    d17a:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d17c:	9b03      	ldr	r3, [sp, #12]
    d17e:	2b00      	cmp	r3, #0
    d180:	d003      	beq.n	d18a <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    d182:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d184:	9a03      	ldr	r2, [sp, #12]
    d186:	4413      	add	r3, r2
    d188:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d18a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d18c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d18e:	4413      	add	r3, r2
    d190:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d192:	e135      	b.n	d400 <am_util_stdio_vsprintf+0x5e4>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d194:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d198:	2b00      	cmp	r3, #0
    d19a:	d009      	beq.n	d1b0 <am_util_stdio_vsprintf+0x394>
    d19c:	9b01      	ldr	r3, [sp, #4]
    d19e:	3307      	adds	r3, #7
    d1a0:	f023 0307 	bic.w	r3, r3, #7
    d1a4:	f103 0208 	add.w	r2, r3, #8
    d1a8:	9201      	str	r2, [sp, #4]
    d1aa:	e9d3 6700 	ldrd	r6, r7, [r3]
    d1ae:	e006      	b.n	d1be <am_util_stdio_vsprintf+0x3a2>
                                      va_arg(pArgs, uint32_t);
    d1b0:	9b01      	ldr	r3, [sp, #4]
    d1b2:	1d1a      	adds	r2, r3, #4
    d1b4:	9201      	str	r2, [sp, #4]
    d1b6:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d1b8:	2200      	movs	r2, #0
    d1ba:	461e      	mov	r6, r3
    d1bc:	4617      	mov	r7, r2
    d1be:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48

                if ( iWidth )
    d1c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d1c4:	2b00      	cmp	r3, #0
    d1c6:	d01e      	beq.n	d206 <am_util_stdio_vsprintf+0x3ea>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    d1c8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d1cc:	f7ff fba8 	bl	c920 <ndigits_in_u64>
    d1d0:	4602      	mov	r2, r0
    d1d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d1d4:	1a9b      	subs	r3, r3, r2
    d1d6:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d1d8:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d1dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d1de:	4619      	mov	r1, r3
    d1e0:	9803      	ldr	r0, [sp, #12]
    d1e2:	f7ff fcfa 	bl	cbda <padbuffer>
    d1e6:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d1e8:	9b03      	ldr	r3, [sp, #12]
    d1ea:	2b00      	cmp	r3, #0
    d1ec:	d001      	beq.n	d1f2 <am_util_stdio_vsprintf+0x3d6>
    d1ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d1f0:	e000      	b.n	d1f4 <am_util_stdio_vsprintf+0x3d8>
    d1f2:	2300      	movs	r3, #0
    d1f4:	9a03      	ldr	r2, [sp, #12]
    d1f6:	4413      	add	r3, r2
    d1f8:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d1fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d1fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d1fe:	4413      	add	r3, r2
    d200:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d202:	2300      	movs	r3, #0
    d204:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d206:	9a03      	ldr	r2, [sp, #12]
    d208:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d20c:	f7ff fc2a 	bl	ca64 <uint64_to_str>
    d210:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d212:	9b03      	ldr	r3, [sp, #12]
    d214:	2b00      	cmp	r3, #0
    d216:	d003      	beq.n	d220 <am_util_stdio_vsprintf+0x404>
                {
                    pcBuf += iVal;
    d218:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d21a:	9a03      	ldr	r2, [sp, #12]
    d21c:	4413      	add	r3, r2
    d21e:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d220:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d222:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d224:	4413      	add	r3, r2
    d226:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d228:	e0ea      	b.n	d400 <am_util_stdio_vsprintf+0x5e4>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d22a:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d22e:	2b00      	cmp	r3, #0
    d230:	d009      	beq.n	d246 <am_util_stdio_vsprintf+0x42a>
    d232:	9b01      	ldr	r3, [sp, #4]
    d234:	3307      	adds	r3, #7
    d236:	f023 0307 	bic.w	r3, r3, #7
    d23a:	f103 0208 	add.w	r2, r3, #8
    d23e:	9201      	str	r2, [sp, #4]
    d240:	e9d3 8900 	ldrd	r8, r9, [r3]
    d244:	e006      	b.n	d254 <am_util_stdio_vsprintf+0x438>
                                     va_arg(pArgs, int32_t);
    d246:	9b01      	ldr	r3, [sp, #4]
    d248:	1d1a      	adds	r2, r3, #4
    d24a:	9201      	str	r2, [sp, #4]
    d24c:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d24e:	17da      	asrs	r2, r3, #31
    d250:	4698      	mov	r8, r3
    d252:	4691      	mov	r9, r2
    d254:	e9cd 8908 	strd	r8, r9, [sp, #32]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    d258:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d25c:	2b00      	cmp	r3, #0
    d25e:	da0c      	bge.n	d27a <am_util_stdio_vsprintf+0x45e>
                {
                    ui64Val = -i64Val;          // Get absolute value
    d260:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d264:	2100      	movs	r1, #0
    d266:	f1d2 0a00 	rsbs	sl, r2, #0
    d26a:	eb61 0b03 	sbc.w	fp, r1, r3
    d26e:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
                    bNeg = true;
    d272:	2301      	movs	r3, #1
    d274:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    d278:	e006      	b.n	d288 <am_util_stdio_vsprintf+0x46c>
                }
                else
                {
                    ui64Val = i64Val;
    d27a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d27e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
                    bNeg = false;
    d282:	2300      	movs	r3, #0
    d284:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                }

                if ( iWidth )
    d288:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d28a:	2b00      	cmp	r3, #0
    d28c:	d04a      	beq.n	d324 <am_util_stdio_vsprintf+0x508>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    d28e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    d292:	4610      	mov	r0, r2
    d294:	4619      	mov	r1, r3
    d296:	f7ff fb63 	bl	c960 <ndigits_in_i64>
    d29a:	4602      	mov	r2, r0
    d29c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d29e:	1a9b      	subs	r3, r3, r2
    d2a0:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg )
    d2a2:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d2a6:	2b00      	cmp	r3, #0
    d2a8:	d011      	beq.n	d2ce <am_util_stdio_vsprintf+0x4b2>
                    {
                        --iWidth;
    d2aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d2ac:	3b01      	subs	r3, #1
    d2ae:	9310      	str	r3, [sp, #64]	; 0x40

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    d2b0:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d2b4:	2b30      	cmp	r3, #48	; 0x30
    d2b6:	d10a      	bne.n	d2ce <am_util_stdio_vsprintf+0x4b2>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    d2b8:	9b03      	ldr	r3, [sp, #12]
    d2ba:	2b00      	cmp	r3, #0
    d2bc:	d004      	beq.n	d2c8 <am_util_stdio_vsprintf+0x4ac>
                            {
                                *pcBuf++ = '-';
    d2be:	9b03      	ldr	r3, [sp, #12]
    d2c0:	1c5a      	adds	r2, r3, #1
    d2c2:	9203      	str	r2, [sp, #12]
    d2c4:	222d      	movs	r2, #45	; 0x2d
    d2c6:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    d2c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d2ca:	3301      	adds	r3, #1
    d2cc:	9311      	str	r3, [sp, #68]	; 0x44
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d2ce:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d2d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d2d4:	4619      	mov	r1, r3
    d2d6:	9803      	ldr	r0, [sp, #12]
    d2d8:	f7ff fc7f 	bl	cbda <padbuffer>
    d2dc:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d2de:	9b03      	ldr	r3, [sp, #12]
    d2e0:	2b00      	cmp	r3, #0
    d2e2:	d001      	beq.n	d2e8 <am_util_stdio_vsprintf+0x4cc>
    d2e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d2e6:	e000      	b.n	d2ea <am_util_stdio_vsprintf+0x4ce>
    d2e8:	2300      	movs	r3, #0
    d2ea:	9a03      	ldr	r2, [sp, #12]
    d2ec:	4413      	add	r3, r2
    d2ee:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d2f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d2f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d2f4:	4413      	add	r3, r2
    d2f6:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d2f8:	2300      	movs	r3, #0
    d2fa:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d2fc:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d300:	2b00      	cmp	r3, #0
    d302:	d01e      	beq.n	d342 <am_util_stdio_vsprintf+0x526>
    d304:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d308:	2b20      	cmp	r3, #32
    d30a:	d11a      	bne.n	d342 <am_util_stdio_vsprintf+0x526>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    d30c:	9b03      	ldr	r3, [sp, #12]
    d30e:	2b00      	cmp	r3, #0
    d310:	d004      	beq.n	d31c <am_util_stdio_vsprintf+0x500>
                        {
                            *pcBuf++ = '-';
    d312:	9b03      	ldr	r3, [sp, #12]
    d314:	1c5a      	adds	r2, r3, #1
    d316:	9203      	str	r2, [sp, #12]
    d318:	222d      	movs	r2, #45	; 0x2d
    d31a:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    d31c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d31e:	3301      	adds	r3, #1
    d320:	9311      	str	r3, [sp, #68]	; 0x44
    d322:	e00e      	b.n	d342 <am_util_stdio_vsprintf+0x526>
                    }
                }
                else
                {
                    if ( bNeg )
    d324:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d328:	2b00      	cmp	r3, #0
    d32a:	d00a      	beq.n	d342 <am_util_stdio_vsprintf+0x526>
                    {
                        if ( pcBuf )
    d32c:	9b03      	ldr	r3, [sp, #12]
    d32e:	2b00      	cmp	r3, #0
    d330:	d004      	beq.n	d33c <am_util_stdio_vsprintf+0x520>
                        {
                            *pcBuf++ = '-';
    d332:	9b03      	ldr	r3, [sp, #12]
    d334:	1c5a      	adds	r2, r3, #1
    d336:	9203      	str	r2, [sp, #12]
    d338:	222d      	movs	r2, #45	; 0x2d
    d33a:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    d33c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d33e:	3301      	adds	r3, #1
    d340:	9311      	str	r3, [sp, #68]	; 0x44
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d342:	9a03      	ldr	r2, [sp, #12]
    d344:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d348:	f7ff fb8c 	bl	ca64 <uint64_to_str>
    d34c:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d34e:	9b03      	ldr	r3, [sp, #12]
    d350:	2b00      	cmp	r3, #0
    d352:	d003      	beq.n	d35c <am_util_stdio_vsprintf+0x540>
                {
                    pcBuf += iVal;
    d354:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d356:	9a03      	ldr	r2, [sp, #12]
    d358:	4413      	add	r3, r2
    d35a:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d35c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d35e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d360:	4413      	add	r3, r2
    d362:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d364:	e04c      	b.n	d400 <am_util_stdio_vsprintf+0x5e4>


            case 'f':
            case 'F':
                if ( pcBuf )
    d366:	9b03      	ldr	r3, [sp, #12]
    d368:	2b00      	cmp	r3, #0
    d36a:	d048      	beq.n	d3fe <am_util_stdio_vsprintf+0x5e2>
                {
                    float fValue = va_arg(pArgs, double);
    d36c:	9b01      	ldr	r3, [sp, #4]
    d36e:	3307      	adds	r3, #7
    d370:	f023 0307 	bic.w	r3, r3, #7
    d374:	f103 0208 	add.w	r2, r3, #8
    d378:	9201      	str	r2, [sp, #4]
    d37a:	e9d3 2300 	ldrd	r2, r3, [r3]
    d37e:	4610      	mov	r0, r2
    d380:	4619      	mov	r1, r3
    d382:	f7fe febd 	bl	c100 <__aeabi_d2f>
    d386:	4603      	mov	r3, r0
    d388:	9306      	str	r3, [sp, #24]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    d38a:	9b03      	ldr	r3, [sp, #12]
    d38c:	2214      	movs	r2, #20
    d38e:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    d390:	990e      	ldr	r1, [sp, #56]	; 0x38
    d392:	9803      	ldr	r0, [sp, #12]
    d394:	ed9d 0a06 	vldr	s0, [sp, #24]
    d398:	f7ff fc42 	bl	cc20 <ftoa>
    d39c:	900f      	str	r0, [sp, #60]	; 0x3c
                    if ( iVal < 0 )
    d39e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d3a0:	2b00      	cmp	r3, #0
    d3a2:	da14      	bge.n	d3ce <am_util_stdio_vsprintf+0x5b2>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d3a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d3a6:	f1b3 3fff 	cmp.w	r3, #4294967295
    d3aa:	d102      	bne.n	d3b2 <am_util_stdio_vsprintf+0x596>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d3ac:	4b1e      	ldr	r3, [pc, #120]	; (d428 <am_util_stdio_vsprintf+0x60c>)
    d3ae:	930c      	str	r3, [sp, #48]	; 0x30
    d3b0:	e008      	b.n	d3c4 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d3b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d3b4:	f113 0f02 	cmn.w	r3, #2
    d3b8:	d102      	bne.n	d3c0 <am_util_stdio_vsprintf+0x5a4>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d3ba:	4b1c      	ldr	r3, [pc, #112]	; (d42c <am_util_stdio_vsprintf+0x610>)
    d3bc:	930c      	str	r3, [sp, #48]	; 0x30
    d3be:	e001      	b.n	d3c4 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d3c0:	4b1b      	ldr	r3, [pc, #108]	; (d430 <am_util_stdio_vsprintf+0x614>)
    d3c2:	930c      	str	r3, [sp, #48]	; 0x30
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d3c4:	9b03      	ldr	r3, [sp, #12]
    d3c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d3c8:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    d3ca:	2303      	movs	r3, #3
    d3cc:	930f      	str	r3, [sp, #60]	; 0x3c
                    }
                    ui32CharCnt += iVal;
    d3ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d3d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d3d2:	4413      	add	r3, r2
    d3d4:	9311      	str	r3, [sp, #68]	; 0x44
                    pcBuf += iVal;
    d3d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d3d8:	9a03      	ldr	r2, [sp, #12]
    d3da:	4413      	add	r3, r2
    d3dc:	9303      	str	r3, [sp, #12]
                }
                break;
    d3de:	e00e      	b.n	d3fe <am_util_stdio_vsprintf+0x5e2>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d3e0:	9b03      	ldr	r3, [sp, #12]
    d3e2:	2b00      	cmp	r3, #0
    d3e4:	d005      	beq.n	d3f2 <am_util_stdio_vsprintf+0x5d6>
                {
                    *pcBuf++ = *pcFmt;
    d3e6:	9b03      	ldr	r3, [sp, #12]
    d3e8:	1c5a      	adds	r2, r3, #1
    d3ea:	9203      	str	r2, [sp, #12]
    d3ec:	9a02      	ldr	r2, [sp, #8]
    d3ee:	7812      	ldrb	r2, [r2, #0]
    d3f0:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d3f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d3f4:	3301      	adds	r3, #1
    d3f6:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d3f8:	e002      	b.n	d400 <am_util_stdio_vsprintf+0x5e4>
                break;
    d3fa:	bf00      	nop
    d3fc:	e000      	b.n	d400 <am_util_stdio_vsprintf+0x5e4>
                break;
    d3fe:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d400:	9b02      	ldr	r3, [sp, #8]
    d402:	3301      	adds	r3, #1
    d404:	9302      	str	r3, [sp, #8]
    while ( *pcFmt != 0x0 )
    d406:	9b02      	ldr	r3, [sp, #8]
    d408:	781b      	ldrb	r3, [r3, #0]
    d40a:	2b00      	cmp	r3, #0
    d40c:	f47f ad11 	bne.w	ce32 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d410:	9b03      	ldr	r3, [sp, #12]
    d412:	2b00      	cmp	r3, #0
    d414:	d002      	beq.n	d41c <am_util_stdio_vsprintf+0x600>
    {
        *pcBuf = 0x0;
    d416:	9b03      	ldr	r3, [sp, #12]
    d418:	2200      	movs	r2, #0
    d41a:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d41c:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    d41e:	4618      	mov	r0, r3
    d420:	b017      	add	sp, #92	; 0x5c
    d422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d426:	bf00      	nop
    d428:	00302e30 	.word	0x00302e30
    d42c:	00232e23 	.word	0x00232e23
    d430:	003f2e3f 	.word	0x003f2e3f

0000d434 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d434:	b40f      	push	{r0, r1, r2, r3}
    d436:	b500      	push	{lr}
    d438:	b083      	sub	sp, #12
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d43a:	4b0c      	ldr	r3, [pc, #48]	; (d46c <am_util_stdio_printf+0x38>)
    d43c:	681b      	ldr	r3, [r3, #0]
    d43e:	2b00      	cmp	r3, #0
    d440:	d101      	bne.n	d446 <am_util_stdio_printf+0x12>
    {
        return 0;
    d442:	2300      	movs	r3, #0
    d444:	e00c      	b.n	d460 <am_util_stdio_printf+0x2c>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d446:	ab05      	add	r3, sp, #20
    d448:	9300      	str	r3, [sp, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d44a:	9a00      	ldr	r2, [sp, #0]
    d44c:	9904      	ldr	r1, [sp, #16]
    d44e:	4808      	ldr	r0, [pc, #32]	; (d470 <am_util_stdio_printf+0x3c>)
    d450:	f7ff fce4 	bl	ce1c <am_util_stdio_vsprintf>
    d454:	9001      	str	r0, [sp, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d456:	4b05      	ldr	r3, [pc, #20]	; (d46c <am_util_stdio_printf+0x38>)
    d458:	681b      	ldr	r3, [r3, #0]
    d45a:	4805      	ldr	r0, [pc, #20]	; (d470 <am_util_stdio_printf+0x3c>)
    d45c:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d45e:	9b01      	ldr	r3, [sp, #4]
}
    d460:	4618      	mov	r0, r3
    d462:	b003      	add	sp, #12
    d464:	f85d eb04 	ldr.w	lr, [sp], #4
    d468:	b004      	add	sp, #16
    d46a:	4770      	bx	lr
    d46c:	10001034 	.word	0x10001034
    d470:	10001038 	.word	0x10001038

0000d474 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    d474:	b508      	push	{r3, lr}
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d476:	4802      	ldr	r0, [pc, #8]	; (d480 <am_util_stdio_terminal_clear+0xc>)
    d478:	f7ff ffdc 	bl	d434 <am_util_stdio_printf>
}
    d47c:	bf00      	nop
    d47e:	bd08      	pop	{r3, pc}
    d480:	0000e97c 	.word	0x0000e97c

0000d484 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    d484:	4811      	ldr	r0, [pc, #68]	; (d4cc <zero_loop+0x12>)
    d486:	4912      	ldr	r1, [pc, #72]	; (d4d0 <zero_loop+0x16>)
    d488:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    d48a:	f8d1 d000 	ldr.w	sp, [r1]

#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    d48e:	4811      	ldr	r0, [pc, #68]	; (d4d4 <zero_loop+0x1a>)
    d490:	6801      	ldr	r1, [r0, #0]
    d492:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d496:	6001      	str	r1, [r0, #0]
    d498:	f3bf 8f4f 	dsb	sy
    d49c:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    d4a0:	480d      	ldr	r0, [pc, #52]	; (d4d8 <zero_loop+0x1e>)
    d4a2:	490e      	ldr	r1, [pc, #56]	; (d4dc <zero_loop+0x22>)
    d4a4:	4a0e      	ldr	r2, [pc, #56]	; (d4e0 <zero_loop+0x26>)

0000d4a6 <copy_loop>:
    d4a6:	f850 3b04 	ldr.w	r3, [r0], #4
    d4aa:	f841 3b04 	str.w	r3, [r1], #4
    d4ae:	4291      	cmp	r1, r2
    d4b0:	dbf9      	blt.n	d4a6 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    d4b2:	480c      	ldr	r0, [pc, #48]	; (d4e4 <zero_loop+0x2a>)
    d4b4:	490c      	ldr	r1, [pc, #48]	; (d4e8 <zero_loop+0x2e>)
    d4b6:	f04f 0200 	mov.w	r2, #0

0000d4ba <zero_loop>:
    d4ba:	4288      	cmp	r0, r1
    d4bc:	bfb8      	it	lt
    d4be:	f840 2b04 	strlt.w	r2, [r0], #4
    d4c2:	dbfa      	blt.n	d4ba <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    d4c4:	f7fe fea6 	bl	c214 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    d4c8:	be00      	bkpt	0x0000
}
    d4ca:	bf00      	nop
    d4cc:	e000ed08 	.word	0xe000ed08
    d4d0:	0000c000 	.word	0x0000c000
    d4d4:	e000ed88 	.word	0xe000ed88
    d4d8:	0000eb84 	.word	0x0000eb84
    d4dc:	10001000 	.word	0x10001000
    d4e0:	10001034 	.word	0x10001034
    d4e4:	10001034 	.word	0x10001034
    d4e8:	1000114c 	.word	0x1000114c

0000d4ec <NMI_Handler>:
NMI_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d4ec:	e7fe      	b.n	d4ec <NMI_Handler>

0000d4ee <BusFault_Handler>:
HardFault_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d4ee:	e7fe      	b.n	d4ee <BusFault_Handler>

0000d4f0 <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d4f0:	e7fe      	b.n	d4f0 <DebugMon_Handler>
	...

0000d4f4 <am_bsp_low_power_init>:
    d4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d4f6:	f000 fddf 	bl	e0b8 <am_hal_pwrctrl_low_power_init>
    d4fa:	f000 febb 	bl	e274 <am_hal_rtc_osc_disable>
    d4fe:	4b0b      	ldr	r3, [pc, #44]	; (d52c <am_bsp_low_power_init+0x38>)
    d500:	4f0b      	ldr	r7, [pc, #44]	; (d530 <am_bsp_low_power_init+0x3c>)
    d502:	681e      	ldr	r6, [r3, #0]
    d504:	2400      	movs	r4, #0
    d506:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    d50a:	4631      	mov	r1, r6
    d50c:	4628      	mov	r0, r5
    d50e:	f000 fb79 	bl	dc04 <am_hal_gpio_pinconfig>
    d512:	2103      	movs	r1, #3
    d514:	4628      	mov	r0, r5
    d516:	f000 fcab 	bl	de70 <am_hal_gpio_state_write>
    d51a:	3401      	adds	r4, #1
    d51c:	2100      	movs	r1, #0
    d51e:	4628      	mov	r0, r5
    d520:	f000 fca6 	bl	de70 <am_hal_gpio_state_write>
    d524:	2c05      	cmp	r4, #5
    d526:	d1ee      	bne.n	d506 <am_bsp_low_power_init+0x12>
    d528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d52a:	bf00      	nop
    d52c:	0000e99c 	.word	0x0000e99c
    d530:	10001000 	.word	0x10001000

0000d534 <am_bsp_itm_printf_enable>:
    d534:	b500      	push	{lr}
    d536:	4b0b      	ldr	r3, [pc, #44]	; (d564 <am_bsp_itm_printf_enable+0x30>)
    d538:	b087      	sub	sp, #28
    d53a:	2201      	movs	r2, #1
    d53c:	601a      	str	r2, [r3, #0]
    d53e:	f000 fce3 	bl	df08 <am_hal_itm_enable>
    d542:	4b09      	ldr	r3, [pc, #36]	; (d568 <am_bsp_itm_printf_enable+0x34>)
    d544:	9301      	str	r3, [sp, #4]
    d546:	a801      	add	r0, sp, #4
    d548:	f000 fef0 	bl	e32c <am_hal_tpiu_enable>
    d54c:	4b07      	ldr	r3, [pc, #28]	; (d56c <am_bsp_itm_printf_enable+0x38>)
    d54e:	2029      	movs	r0, #41	; 0x29
    d550:	6819      	ldr	r1, [r3, #0]
    d552:	f000 fb57 	bl	dc04 <am_hal_gpio_pinconfig>
    d556:	4806      	ldr	r0, [pc, #24]	; (d570 <am_bsp_itm_printf_enable+0x3c>)
    d558:	f7ff f8e4 	bl	c724 <am_util_stdio_printf_init>
    d55c:	b007      	add	sp, #28
    d55e:	f85d fb04 	ldr.w	pc, [sp], #4
    d562:	bf00      	nop
    d564:	1000113c 	.word	0x1000113c
    d568:	000f4240 	.word	0x000f4240
    d56c:	0000e990 	.word	0x0000e990
    d570:	0000df51 	.word	0x0000df51

0000d574 <am_hal_burst_mode_initialize>:
    d574:	b570      	push	{r4, r5, r6, lr}
    d576:	4c19      	ldr	r4, [pc, #100]	; (d5dc <am_hal_burst_mode_initialize+0x68>)
    d578:	6963      	ldr	r3, [r4, #20]
    d57a:	07d9      	lsls	r1, r3, #31
    d57c:	b082      	sub	sp, #8
    d57e:	4605      	mov	r5, r0
    d580:	d51e      	bpl.n	d5c0 <am_hal_burst_mode_initialize+0x4c>
    d582:	4917      	ldr	r1, [pc, #92]	; (d5e0 <am_hal_burst_mode_initialize+0x6c>)
    d584:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    d586:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    d58a:	628a      	str	r2, [r1, #40]	; 0x28
    d58c:	7e22      	ldrb	r2, [r4, #24]
    d58e:	2320      	movs	r3, #32
    d590:	f042 0210 	orr.w	r2, r2, #16
    d594:	2601      	movs	r6, #1
    d596:	7622      	strb	r2, [r4, #24]
    d598:	f6a1 71e8 	subw	r1, r1, #4072	; 0xfe8
    d59c:	9600      	str	r6, [sp, #0]
    d59e:	461a      	mov	r2, r3
    d5a0:	f242 7010 	movw	r0, #10000	; 0x2710
    d5a4:	f000 faee 	bl	db84 <am_hal_flash_delay_status_check>
    d5a8:	b990      	cbnz	r0, d5d0 <am_hal_burst_mode_initialize+0x5c>
    d5aa:	69a3      	ldr	r3, [r4, #24]
    d5ac:	065a      	lsls	r2, r3, #25
    d5ae:	d507      	bpl.n	d5c0 <am_hal_burst_mode_initialize+0x4c>
    d5b0:	69a3      	ldr	r3, [r4, #24]
    d5b2:	069b      	lsls	r3, r3, #26
    d5b4:	d504      	bpl.n	d5c0 <am_hal_burst_mode_initialize+0x4c>
    d5b6:	4b0b      	ldr	r3, [pc, #44]	; (d5e4 <am_hal_burst_mode_initialize+0x70>)
    d5b8:	701e      	strb	r6, [r3, #0]
    d5ba:	7028      	strb	r0, [r5, #0]
    d5bc:	b002      	add	sp, #8
    d5be:	bd70      	pop	{r4, r5, r6, pc}
    d5c0:	4a08      	ldr	r2, [pc, #32]	; (d5e4 <am_hal_burst_mode_initialize+0x70>)
    d5c2:	2100      	movs	r1, #0
    d5c4:	2301      	movs	r3, #1
    d5c6:	2007      	movs	r0, #7
    d5c8:	7011      	strb	r1, [r2, #0]
    d5ca:	702b      	strb	r3, [r5, #0]
    d5cc:	b002      	add	sp, #8
    d5ce:	bd70      	pop	{r4, r5, r6, pc}
    d5d0:	4b04      	ldr	r3, [pc, #16]	; (d5e4 <am_hal_burst_mode_initialize+0x70>)
    d5d2:	2200      	movs	r2, #0
    d5d4:	701a      	strb	r2, [r3, #0]
    d5d6:	702e      	strb	r6, [r5, #0]
    d5d8:	b002      	add	sp, #8
    d5da:	bd70      	pop	{r4, r5, r6, pc}
    d5dc:	40020000 	.word	0x40020000
    d5e0:	40021000 	.word	0x40021000
    d5e4:	10001140 	.word	0x10001140

0000d5e8 <am_hal_burst_mode_enable>:
    d5e8:	b570      	push	{r4, r5, r6, lr}
    d5ea:	4b15      	ldr	r3, [pc, #84]	; (d640 <am_hal_burst_mode_enable+0x58>)
    d5ec:	781b      	ldrb	r3, [r3, #0]
    d5ee:	b082      	sub	sp, #8
    d5f0:	4604      	mov	r4, r0
    d5f2:	b1db      	cbz	r3, d62c <am_hal_burst_mode_enable+0x44>
    d5f4:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
    d5f8:	2601      	movs	r6, #1
    d5fa:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
    d5fe:	4911      	ldr	r1, [pc, #68]	; (d644 <am_hal_burst_mode_enable+0x5c>)
    d600:	4332      	orrs	r2, r6
    d602:	2304      	movs	r3, #4
    d604:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    d608:	f242 7010 	movw	r0, #10000	; 0x2710
    d60c:	9600      	str	r6, [sp, #0]
    d60e:	461a      	mov	r2, r3
    d610:	f000 fab8 	bl	db84 <am_hal_flash_delay_status_check>
    d614:	b938      	cbnz	r0, d626 <am_hal_burst_mode_enable+0x3e>
    d616:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    d618:	079b      	lsls	r3, r3, #30
    d61a:	d50c      	bpl.n	d636 <am_hal_burst_mode_enable+0x4e>
    d61c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    d61e:	f013 0f04 	tst.w	r3, #4
    d622:	bf18      	it	ne
    d624:	4606      	movne	r6, r0
    d626:	7026      	strb	r6, [r4, #0]
    d628:	b002      	add	sp, #8
    d62a:	bd70      	pop	{r4, r5, r6, pc}
    d62c:	2301      	movs	r3, #1
    d62e:	7003      	strb	r3, [r0, #0]
    d630:	2007      	movs	r0, #7
    d632:	b002      	add	sp, #8
    d634:	bd70      	pop	{r4, r5, r6, pc}
    d636:	4630      	mov	r0, r6
    d638:	7026      	strb	r6, [r4, #0]
    d63a:	b002      	add	sp, #8
    d63c:	bd70      	pop	{r4, r5, r6, pc}
    d63e:	bf00      	nop
    d640:	10001140 	.word	0x10001140
    d644:	40004034 	.word	0x40004034

0000d648 <am_hal_burst_mode_disable>:
    d648:	b530      	push	{r4, r5, lr}
    d64a:	b085      	sub	sp, #20
    d64c:	4605      	mov	r5, r0
    d64e:	f000 fc53 	bl	def8 <am_hal_interrupt_master_disable>
    d652:	2100      	movs	r1, #0
    d654:	4603      	mov	r3, r0
    d656:	4810      	ldr	r0, [pc, #64]	; (d698 <am_hal_burst_mode_disable+0x50>)
    d658:	9303      	str	r3, [sp, #12]
    d65a:	f000 facd 	bl	dbf8 <am_hal_flash_store_ui32>
    d65e:	9803      	ldr	r0, [sp, #12]
    d660:	f000 fc4e 	bl	df00 <am_hal_interrupt_master_set>
    d664:	4a0d      	ldr	r2, [pc, #52]	; (d69c <am_hal_burst_mode_disable+0x54>)
    d666:	6a91      	ldr	r1, [r2, #40]	; 0x28
    d668:	2401      	movs	r4, #1
    d66a:	f36f 71df 	bfc	r1, #31, #1
    d66e:	6291      	str	r1, [r2, #40]	; 0x28
    d670:	2300      	movs	r3, #0
    d672:	4909      	ldr	r1, [pc, #36]	; (d698 <am_hal_burst_mode_disable+0x50>)
    d674:	9400      	str	r4, [sp, #0]
    d676:	2204      	movs	r2, #4
    d678:	f242 7010 	movw	r0, #10000	; 0x2710
    d67c:	f000 fa82 	bl	db84 <am_hal_flash_delay_status_check>
    d680:	b930      	cbnz	r0, d690 <am_hal_burst_mode_disable+0x48>
    d682:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    d688:	f013 0f04 	tst.w	r3, #4
    d68c:	bf18      	it	ne
    d68e:	4604      	movne	r4, r0
    d690:	702c      	strb	r4, [r5, #0]
    d692:	b005      	add	sp, #20
    d694:	bd30      	pop	{r4, r5, pc}
    d696:	bf00      	nop
    d698:	40004034 	.word	0x40004034
    d69c:	40021000 	.word	0x40021000

0000d6a0 <am_hal_cachectrl_config>:
    d6a0:	b530      	push	{r4, r5, lr}
    d6a2:	b083      	sub	sp, #12
    d6a4:	4604      	mov	r4, r0
    d6a6:	f000 fc27 	bl	def8 <am_hal_interrupt_master_disable>
    d6aa:	4d0e      	ldr	r5, [pc, #56]	; (d6e4 <am_hal_cachectrl_config+0x44>)
    d6ac:	9001      	str	r0, [sp, #4]
    d6ae:	682b      	ldr	r3, [r5, #0]
    d6b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    d6b4:	602b      	str	r3, [r5, #0]
    d6b6:	9801      	ldr	r0, [sp, #4]
    d6b8:	f000 fc22 	bl	df00 <am_hal_interrupt_master_set>
    d6bc:	7863      	ldrb	r3, [r4, #1]
    d6be:	7822      	ldrb	r2, [r4, #0]
    d6c0:	78a1      	ldrb	r1, [r4, #2]
    d6c2:	021b      	lsls	r3, r3, #8
    d6c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
    d6c8:	0112      	lsls	r2, r2, #4
    d6ca:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    d6ce:	b2d2      	uxtb	r2, r2
    d6d0:	4313      	orrs	r3, r2
    d6d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d6d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d6da:	2000      	movs	r0, #0
    d6dc:	602b      	str	r3, [r5, #0]
    d6de:	b003      	add	sp, #12
    d6e0:	bd30      	pop	{r4, r5, pc}
    d6e2:	bf00      	nop
    d6e4:	40018000 	.word	0x40018000

0000d6e8 <am_hal_cachectrl_enable>:
    d6e8:	4a03      	ldr	r2, [pc, #12]	; (d6f8 <am_hal_cachectrl_enable+0x10>)
    d6ea:	6813      	ldr	r3, [r2, #0]
    d6ec:	f043 0301 	orr.w	r3, r3, #1
    d6f0:	2000      	movs	r0, #0
    d6f2:	6013      	str	r3, [r2, #0]
    d6f4:	4770      	bx	lr
    d6f6:	bf00      	nop
    d6f8:	40018000 	.word	0x40018000

0000d6fc <am_hal_cachectrl_control>:
    d6fc:	b510      	push	{r4, lr}
    d6fe:	3801      	subs	r0, #1
    d700:	b08e      	sub	sp, #56	; 0x38
    d702:	2810      	cmp	r0, #16
    d704:	f200 815e 	bhi.w	d9c4 <am_hal_cachectrl_control+0x2c8>
    d708:	e8df f010 	tbh	[pc, r0, lsl #1]
    d70c:	00360018 	.word	0x00360018
    d710:	0040003d 	.word	0x0040003d
    d714:	00450043 	.word	0x00450043
    d718:	0011001a 	.word	0x0011001a
    d71c:	00540047 	.word	0x00540047
    d720:	009a0061 	.word	0x009a0061
    d724:	010c00d3 	.word	0x010c00d3
    d728:	013f0126 	.word	0x013f0126
    d72c:	001d      	.short	0x001d
    d72e:	f44f 7300 	mov.w	r3, #512	; 0x200
    d732:	4aac      	ldr	r2, [pc, #688]	; (d9e4 <am_hal_cachectrl_control+0x2e8>)
    d734:	2000      	movs	r0, #0
    d736:	6093      	str	r3, [r2, #8]
    d738:	b00e      	add	sp, #56	; 0x38
    d73a:	bd10      	pop	{r4, pc}
    d73c:	2301      	movs	r3, #1
    d73e:	e7f8      	b.n	d732 <am_hal_cachectrl_control+0x36>
    d740:	f44f 6380 	mov.w	r3, #1024	; 0x400
    d744:	e7f5      	b.n	d732 <am_hal_cachectrl_control+0x36>
    d746:	2900      	cmp	r1, #0
    d748:	f000 813c 	beq.w	d9c4 <am_hal_cachectrl_control+0x2c8>
    d74c:	684a      	ldr	r2, [r1, #4]
    d74e:	48a6      	ldr	r0, [pc, #664]	; (d9e8 <am_hal_cachectrl_control+0x2ec>)
    d750:	4202      	tst	r2, r0
    d752:	f040 8137 	bne.w	d9c4 <am_hal_cachectrl_control+0x2c8>
    d756:	688b      	ldr	r3, [r1, #8]
    d758:	4018      	ands	r0, r3
    d75a:	f040 8133 	bne.w	d9c4 <am_hal_cachectrl_control+0x2c8>
    d75e:	780c      	ldrb	r4, [r1, #0]
    d760:	2c00      	cmp	r4, #0
    d762:	f040 8133 	bne.w	d9cc <am_hal_cachectrl_control+0x2d0>
    d766:	4c9f      	ldr	r4, [pc, #636]	; (d9e4 <am_hal_cachectrl_control+0x2e8>)
    d768:	7849      	ldrb	r1, [r1, #1]
    d76a:	6122      	str	r2, [r4, #16]
    d76c:	6163      	str	r3, [r4, #20]
    d76e:	6823      	ldr	r3, [r4, #0]
    d770:	f361 0382 	bfi	r3, r1, #2, #1
    d774:	6023      	str	r3, [r4, #0]
    d776:	e7df      	b.n	d738 <am_hal_cachectrl_control+0x3c>
    d778:	4b9a      	ldr	r3, [pc, #616]	; (d9e4 <am_hal_cachectrl_control+0x2e8>)
    d77a:	681b      	ldr	r3, [r3, #0]
    d77c:	01db      	lsls	r3, r3, #7
    d77e:	f140 811f 	bpl.w	d9c0 <am_hal_cachectrl_control+0x2c4>
    d782:	2302      	movs	r3, #2
    d784:	e7d5      	b.n	d732 <am_hal_cachectrl_control+0x36>
    d786:	f44f 6388 	mov.w	r3, #1088	; 0x440
    d78a:	e7d2      	b.n	d732 <am_hal_cachectrl_control+0x36>
    d78c:	f44f 7308 	mov.w	r3, #544	; 0x220
    d790:	e7cf      	b.n	d732 <am_hal_cachectrl_control+0x36>
    d792:	2340      	movs	r3, #64	; 0x40
    d794:	e7cd      	b.n	d732 <am_hal_cachectrl_control+0x36>
    d796:	2320      	movs	r3, #32
    d798:	e7cb      	b.n	d732 <am_hal_cachectrl_control+0x36>
    d79a:	f000 fbad 	bl	def8 <am_hal_interrupt_master_disable>
    d79e:	4a91      	ldr	r2, [pc, #580]	; (d9e4 <am_hal_cachectrl_control+0x2e8>)
    d7a0:	9000      	str	r0, [sp, #0]
    d7a2:	6813      	ldr	r3, [r2, #0]
    d7a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    d7a8:	6013      	str	r3, [r2, #0]
    d7aa:	9800      	ldr	r0, [sp, #0]
    d7ac:	f000 fba8 	bl	df00 <am_hal_interrupt_master_set>
    d7b0:	2000      	movs	r0, #0
    d7b2:	e7c1      	b.n	d738 <am_hal_cachectrl_control+0x3c>
    d7b4:	f000 fba0 	bl	def8 <am_hal_interrupt_master_disable>
    d7b8:	4a8a      	ldr	r2, [pc, #552]	; (d9e4 <am_hal_cachectrl_control+0x2e8>)
    d7ba:	9001      	str	r0, [sp, #4]
    d7bc:	6813      	ldr	r3, [r2, #0]
    d7be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    d7c2:	6013      	str	r3, [r2, #0]
    d7c4:	9801      	ldr	r0, [sp, #4]
    d7c6:	f000 fb9b 	bl	df00 <am_hal_interrupt_master_set>
    d7ca:	2000      	movs	r0, #0
    d7cc:	e7b4      	b.n	d738 <am_hal_cachectrl_control+0x3c>
    d7ce:	f000 fb93 	bl	def8 <am_hal_interrupt_master_disable>
    d7d2:	4603      	mov	r3, r0
    d7d4:	4885      	ldr	r0, [pc, #532]	; (d9ec <am_hal_cachectrl_control+0x2f0>)
    d7d6:	9302      	str	r3, [sp, #8]
    d7d8:	f000 fa0a 	bl	dbf0 <am_hal_flash_load_ui32>
    d7dc:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d7e0:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d7e4:	4881      	ldr	r0, [pc, #516]	; (d9ec <am_hal_cachectrl_control+0x2f0>)
    d7e6:	f000 fa07 	bl	dbf8 <am_hal_flash_store_ui32>
    d7ea:	9802      	ldr	r0, [sp, #8]
    d7ec:	f000 fb88 	bl	df00 <am_hal_interrupt_master_set>
    d7f0:	f000 fb82 	bl	def8 <am_hal_interrupt_master_disable>
    d7f4:	4603      	mov	r3, r0
    d7f6:	487d      	ldr	r0, [pc, #500]	; (d9ec <am_hal_cachectrl_control+0x2f0>)
    d7f8:	9303      	str	r3, [sp, #12]
    d7fa:	f000 f9f9 	bl	dbf0 <am_hal_flash_load_ui32>
    d7fe:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d802:	f440 61ee 	orr.w	r1, r0, #1904	; 0x770
    d806:	4879      	ldr	r0, [pc, #484]	; (d9ec <am_hal_cachectrl_control+0x2f0>)
    d808:	f000 f9f6 	bl	dbf8 <am_hal_flash_store_ui32>
    d80c:	9803      	ldr	r0, [sp, #12]
    d80e:	f000 fb77 	bl	df00 <am_hal_interrupt_master_set>
    d812:	f000 fb71 	bl	def8 <am_hal_interrupt_master_disable>
    d816:	4603      	mov	r3, r0
    d818:	4874      	ldr	r0, [pc, #464]	; (d9ec <am_hal_cachectrl_control+0x2f0>)
    d81a:	9304      	str	r3, [sp, #16]
    d81c:	f000 f9e8 	bl	dbf0 <am_hal_flash_load_ui32>
    d820:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d824:	f020 000f 	bic.w	r0, r0, #15
    d828:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d82c:	f041 0103 	orr.w	r1, r1, #3
    d830:	486e      	ldr	r0, [pc, #440]	; (d9ec <am_hal_cachectrl_control+0x2f0>)
    d832:	f000 f9e1 	bl	dbf8 <am_hal_flash_store_ui32>
    d836:	9804      	ldr	r0, [sp, #16]
    d838:	f000 fb62 	bl	df00 <am_hal_interrupt_master_set>
    d83c:	2000      	movs	r0, #0
    d83e:	e77b      	b.n	d738 <am_hal_cachectrl_control+0x3c>
    d840:	f000 fb5a 	bl	def8 <am_hal_interrupt_master_disable>
    d844:	4603      	mov	r3, r0
    d846:	4869      	ldr	r0, [pc, #420]	; (d9ec <am_hal_cachectrl_control+0x2f0>)
    d848:	9305      	str	r3, [sp, #20]
    d84a:	f000 f9d1 	bl	dbf0 <am_hal_flash_load_ui32>
    d84e:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d852:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    d856:	4865      	ldr	r0, [pc, #404]	; (d9ec <am_hal_cachectrl_control+0x2f0>)
    d858:	f000 f9ce 	bl	dbf8 <am_hal_flash_store_ui32>
    d85c:	9805      	ldr	r0, [sp, #20]
    d85e:	f000 fb4f 	bl	df00 <am_hal_interrupt_master_set>
    d862:	f000 fb49 	bl	def8 <am_hal_interrupt_master_disable>
    d866:	4603      	mov	r3, r0
    d868:	4860      	ldr	r0, [pc, #384]	; (d9ec <am_hal_cachectrl_control+0x2f0>)
    d86a:	9306      	str	r3, [sp, #24]
    d86c:	f000 f9c0 	bl	dbf0 <am_hal_flash_load_ui32>
    d870:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d874:	f440 61ea 	orr.w	r1, r0, #1872	; 0x750
    d878:	485c      	ldr	r0, [pc, #368]	; (d9ec <am_hal_cachectrl_control+0x2f0>)
    d87a:	f000 f9bd 	bl	dbf8 <am_hal_flash_store_ui32>
    d87e:	9806      	ldr	r0, [sp, #24]
    d880:	f000 fb3e 	bl	df00 <am_hal_interrupt_master_set>
    d884:	f000 fb38 	bl	def8 <am_hal_interrupt_master_disable>
    d888:	4603      	mov	r3, r0
    d88a:	4858      	ldr	r0, [pc, #352]	; (d9ec <am_hal_cachectrl_control+0x2f0>)
    d88c:	9307      	str	r3, [sp, #28]
    d88e:	f000 f9af 	bl	dbf0 <am_hal_flash_load_ui32>
    d892:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d896:	f020 000f 	bic.w	r0, r0, #15
    d89a:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d89e:	f041 0101 	orr.w	r1, r1, #1
    d8a2:	4852      	ldr	r0, [pc, #328]	; (d9ec <am_hal_cachectrl_control+0x2f0>)
    d8a4:	f000 f9a8 	bl	dbf8 <am_hal_flash_store_ui32>
    d8a8:	9807      	ldr	r0, [sp, #28]
    d8aa:	f000 fb29 	bl	df00 <am_hal_interrupt_master_set>
    d8ae:	2000      	movs	r0, #0
    d8b0:	e742      	b.n	d738 <am_hal_cachectrl_control+0x3c>
    d8b2:	f000 fb21 	bl	def8 <am_hal_interrupt_master_disable>
    d8b6:	4603      	mov	r3, r0
    d8b8:	484c      	ldr	r0, [pc, #304]	; (d9ec <am_hal_cachectrl_control+0x2f0>)
    d8ba:	9308      	str	r3, [sp, #32]
    d8bc:	f000 f998 	bl	dbf0 <am_hal_flash_load_ui32>
    d8c0:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d8c4:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    d8c8:	4848      	ldr	r0, [pc, #288]	; (d9ec <am_hal_cachectrl_control+0x2f0>)
    d8ca:	f000 f995 	bl	dbf8 <am_hal_flash_store_ui32>
    d8ce:	9808      	ldr	r0, [sp, #32]
    d8d0:	f000 fb16 	bl	df00 <am_hal_interrupt_master_set>
    d8d4:	f000 fb10 	bl	def8 <am_hal_interrupt_master_disable>
    d8d8:	4603      	mov	r3, r0
    d8da:	4844      	ldr	r0, [pc, #272]	; (d9ec <am_hal_cachectrl_control+0x2f0>)
    d8dc:	9309      	str	r3, [sp, #36]	; 0x24
    d8de:	f000 f987 	bl	dbf0 <am_hal_flash_load_ui32>
    d8e2:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d8e6:	f440 61ec 	orr.w	r1, r0, #1888	; 0x760
    d8ea:	4840      	ldr	r0, [pc, #256]	; (d9ec <am_hal_cachectrl_control+0x2f0>)
    d8ec:	f000 f984 	bl	dbf8 <am_hal_flash_store_ui32>
    d8f0:	9809      	ldr	r0, [sp, #36]	; 0x24
    d8f2:	f000 fb05 	bl	df00 <am_hal_interrupt_master_set>
    d8f6:	f000 faff 	bl	def8 <am_hal_interrupt_master_disable>
    d8fa:	4603      	mov	r3, r0
    d8fc:	483b      	ldr	r0, [pc, #236]	; (d9ec <am_hal_cachectrl_control+0x2f0>)
    d8fe:	930a      	str	r3, [sp, #40]	; 0x28
    d900:	f000 f976 	bl	dbf0 <am_hal_flash_load_ui32>
    d904:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d908:	f020 000f 	bic.w	r0, r0, #15
    d90c:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d910:	f041 0101 	orr.w	r1, r1, #1
    d914:	4835      	ldr	r0, [pc, #212]	; (d9ec <am_hal_cachectrl_control+0x2f0>)
    d916:	f000 f96f 	bl	dbf8 <am_hal_flash_store_ui32>
    d91a:	980a      	ldr	r0, [sp, #40]	; 0x28
    d91c:	f000 faf0 	bl	df00 <am_hal_interrupt_master_set>
    d920:	2000      	movs	r0, #0
    d922:	e709      	b.n	d738 <am_hal_cachectrl_control+0x3c>
    d924:	2900      	cmp	r1, #0
    d926:	d04d      	beq.n	d9c4 <am_hal_cachectrl_control+0x2c8>
    d928:	680c      	ldr	r4, [r1, #0]
    d92a:	2c03      	cmp	r4, #3
    d92c:	d84c      	bhi.n	d9c8 <am_hal_cachectrl_control+0x2cc>
    d92e:	f000 fae3 	bl	def8 <am_hal_interrupt_master_disable>
    d932:	4603      	mov	r3, r0
    d934:	482d      	ldr	r0, [pc, #180]	; (d9ec <am_hal_cachectrl_control+0x2f0>)
    d936:	930b      	str	r3, [sp, #44]	; 0x2c
    d938:	f000 f95a 	bl	dbf0 <am_hal_flash_load_ui32>
    d93c:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d940:	ea40 3104 	orr.w	r1, r0, r4, lsl #12
    d944:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d948:	4828      	ldr	r0, [pc, #160]	; (d9ec <am_hal_cachectrl_control+0x2f0>)
    d94a:	f000 f955 	bl	dbf8 <am_hal_flash_store_ui32>
    d94e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d950:	f000 fad6 	bl	df00 <am_hal_interrupt_master_set>
    d954:	2000      	movs	r0, #0
    d956:	e6ef      	b.n	d738 <am_hal_cachectrl_control+0x3c>
    d958:	b3a1      	cbz	r1, d9c4 <am_hal_cachectrl_control+0x2c8>
    d95a:	680c      	ldr	r4, [r1, #0]
    d95c:	2c07      	cmp	r4, #7
    d95e:	d833      	bhi.n	d9c8 <am_hal_cachectrl_control+0x2cc>
    d960:	f000 faca 	bl	def8 <am_hal_interrupt_master_disable>
    d964:	4603      	mov	r3, r0
    d966:	4821      	ldr	r0, [pc, #132]	; (d9ec <am_hal_cachectrl_control+0x2f0>)
    d968:	930c      	str	r3, [sp, #48]	; 0x30
    d96a:	f000 f941 	bl	dbf0 <am_hal_flash_load_ui32>
    d96e:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d972:	ea40 1104 	orr.w	r1, r0, r4, lsl #4
    d976:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d97a:	481c      	ldr	r0, [pc, #112]	; (d9ec <am_hal_cachectrl_control+0x2f0>)
    d97c:	f000 f93c 	bl	dbf8 <am_hal_flash_store_ui32>
    d980:	980c      	ldr	r0, [sp, #48]	; 0x30
    d982:	f000 fabd 	bl	df00 <am_hal_interrupt_master_set>
    d986:	2000      	movs	r0, #0
    d988:	e6d6      	b.n	d738 <am_hal_cachectrl_control+0x3c>
    d98a:	b1d9      	cbz	r1, d9c4 <am_hal_cachectrl_control+0x2c8>
    d98c:	680c      	ldr	r4, [r1, #0]
    d98e:	2c0f      	cmp	r4, #15
    d990:	d81a      	bhi.n	d9c8 <am_hal_cachectrl_control+0x2cc>
    d992:	f000 fab1 	bl	def8 <am_hal_interrupt_master_disable>
    d996:	4603      	mov	r3, r0
    d998:	4814      	ldr	r0, [pc, #80]	; (d9ec <am_hal_cachectrl_control+0x2f0>)
    d99a:	930d      	str	r3, [sp, #52]	; 0x34
    d99c:	f000 f928 	bl	dbf0 <am_hal_flash_load_ui32>
    d9a0:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d9a4:	f020 000f 	bic.w	r0, r0, #15
    d9a8:	ea40 0104 	orr.w	r1, r0, r4
    d9ac:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d9b0:	480e      	ldr	r0, [pc, #56]	; (d9ec <am_hal_cachectrl_control+0x2f0>)
    d9b2:	f000 f921 	bl	dbf8 <am_hal_flash_store_ui32>
    d9b6:	980d      	ldr	r0, [sp, #52]	; 0x34
    d9b8:	f000 faa2 	bl	df00 <am_hal_interrupt_master_set>
    d9bc:	2000      	movs	r0, #0
    d9be:	e6bb      	b.n	d738 <am_hal_cachectrl_control+0x3c>
    d9c0:	2007      	movs	r0, #7
    d9c2:	e6b9      	b.n	d738 <am_hal_cachectrl_control+0x3c>
    d9c4:	2006      	movs	r0, #6
    d9c6:	e6b7      	b.n	d738 <am_hal_cachectrl_control+0x3c>
    d9c8:	2001      	movs	r0, #1
    d9ca:	e6b5      	b.n	d738 <am_hal_cachectrl_control+0x3c>
    d9cc:	2c01      	cmp	r4, #1
    d9ce:	d1f9      	bne.n	d9c4 <am_hal_cachectrl_control+0x2c8>
    d9d0:	4c04      	ldr	r4, [pc, #16]	; (d9e4 <am_hal_cachectrl_control+0x2e8>)
    d9d2:	7849      	ldrb	r1, [r1, #1]
    d9d4:	61a2      	str	r2, [r4, #24]
    d9d6:	61e3      	str	r3, [r4, #28]
    d9d8:	6823      	ldr	r3, [r4, #0]
    d9da:	f361 03c3 	bfi	r3, r1, #3, #1
    d9de:	6023      	str	r3, [r4, #0]
    d9e0:	e6aa      	b.n	d738 <am_hal_cachectrl_control+0x3c>
    d9e2:	bf00      	nop
    d9e4:	40018000 	.word	0x40018000
    d9e8:	f800000f 	.word	0xf800000f
    d9ec:	40018004 	.word	0x40018004

0000d9f0 <am_hal_clkgen_control>:
    d9f0:	4b49      	ldr	r3, [pc, #292]	; (db18 <am_hal_clkgen_control+0x128>)
    d9f2:	681a      	ldr	r2, [r3, #0]
    d9f4:	b912      	cbnz	r2, d9fc <am_hal_clkgen_control+0xc>
    d9f6:	4a49      	ldr	r2, [pc, #292]	; (db1c <am_hal_clkgen_control+0x12c>)
    d9f8:	6812      	ldr	r2, [r2, #0]
    d9fa:	601a      	str	r2, [r3, #0]
    d9fc:	2809      	cmp	r0, #9
    d9fe:	f200 8089 	bhi.w	db14 <am_hal_clkgen_control+0x124>
    da02:	e8df f000 	tbb	[pc, r0]
    da06:	160d      	.short	0x160d
    da08:	423a261e 	.word	0x423a261e
    da0c:	055c544c 	.word	0x055c544c
    da10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    da14:	2000      	movs	r0, #0
    da16:	6a1a      	ldr	r2, [r3, #32]
    da18:	f36f 0200 	bfc	r2, #0, #1
    da1c:	621a      	str	r2, [r3, #32]
    da1e:	4770      	bx	lr
    da20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    da24:	2200      	movs	r2, #0
    da26:	2147      	movs	r1, #71	; 0x47
    da28:	6159      	str	r1, [r3, #20]
    da2a:	4610      	mov	r0, r2
    da2c:	619a      	str	r2, [r3, #24]
    da2e:	615a      	str	r2, [r3, #20]
    da30:	4770      	bx	lr
    da32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    da36:	2000      	movs	r0, #0
    da38:	899a      	ldrh	r2, [r3, #12]
    da3a:	f36f 0200 	bfc	r2, #0, #1
    da3e:	819a      	strh	r2, [r3, #12]
    da40:	4770      	bx	lr
    da42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    da46:	2000      	movs	r0, #0
    da48:	899a      	ldrh	r2, [r3, #12]
    da4a:	f36f 0241 	bfc	r2, #1, #1
    da4e:	819a      	strh	r2, [r3, #12]
    da50:	4770      	bx	lr
    da52:	4a33      	ldr	r2, [pc, #204]	; (db20 <am_hal_clkgen_control+0x130>)
    da54:	68d3      	ldr	r3, [r2, #12]
    da56:	b2db      	uxtb	r3, r3
    da58:	2b21      	cmp	r3, #33	; 0x21
    da5a:	d106      	bne.n	da6a <am_hal_clkgen_control+0x7a>
    da5c:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    da60:	2101      	movs	r1, #1
    da62:	f361 2309 	bfi	r3, r1, #8, #2
    da66:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    da6a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    da6e:	2000      	movs	r0, #0
    da70:	8993      	ldrh	r3, [r2, #12]
    da72:	f043 0301 	orr.w	r3, r3, #1
    da76:	8193      	strh	r3, [r2, #12]
    da78:	4770      	bx	lr
    da7a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    da7e:	2000      	movs	r0, #0
    da80:	8993      	ldrh	r3, [r2, #12]
    da82:	f043 0302 	orr.w	r3, r3, #2
    da86:	8193      	strh	r3, [r2, #12]
    da88:	4770      	bx	lr
    da8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    da8e:	2200      	movs	r2, #0
    da90:	2047      	movs	r0, #71	; 0x47
    da92:	2101      	movs	r1, #1
    da94:	6158      	str	r0, [r3, #20]
    da96:	6199      	str	r1, [r3, #24]
    da98:	4610      	mov	r0, r2
    da9a:	615a      	str	r2, [r3, #20]
    da9c:	4770      	bx	lr
    da9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    daa2:	2000      	movs	r0, #0
    daa4:	899a      	ldrh	r2, [r3, #12]
    daa6:	f36f 12c7 	bfc	r2, #7, #1
    daaa:	819a      	strh	r2, [r3, #12]
    daac:	4770      	bx	lr
    daae:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dab2:	2000      	movs	r0, #0
    dab4:	8993      	ldrh	r3, [r2, #12]
    dab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    daba:	8193      	strh	r3, [r2, #12]
    dabc:	4770      	bx	lr
    dabe:	4a18      	ldr	r2, [pc, #96]	; (db20 <am_hal_clkgen_control+0x130>)
    dac0:	68d3      	ldr	r3, [r2, #12]
    dac2:	b2db      	uxtb	r3, r3
    dac4:	2b21      	cmp	r3, #33	; 0x21
    dac6:	d00a      	beq.n	dade <am_hal_clkgen_control+0xee>
    dac8:	b139      	cbz	r1, dada <am_hal_clkgen_control+0xea>
    daca:	680b      	ldr	r3, [r1, #0]
    dacc:	f043 0301 	orr.w	r3, r3, #1
    dad0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dad4:	2000      	movs	r0, #0
    dad6:	6213      	str	r3, [r2, #32]
    dad8:	4770      	bx	lr
    dada:	4b12      	ldr	r3, [pc, #72]	; (db24 <am_hal_clkgen_control+0x134>)
    dadc:	e7f8      	b.n	dad0 <am_hal_clkgen_control+0xe0>
    dade:	b500      	push	{lr}
    dae0:	b083      	sub	sp, #12
    dae2:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    dae6:	9101      	str	r1, [sp, #4]
    dae8:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    daec:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    daf0:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    daf4:	f000 f836 	bl	db64 <am_hal_flash_delay>
    daf8:	9901      	ldr	r1, [sp, #4]
    dafa:	b149      	cbz	r1, db10 <am_hal_clkgen_control+0x120>
    dafc:	680b      	ldr	r3, [r1, #0]
    dafe:	f043 0301 	orr.w	r3, r3, #1
    db02:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    db06:	2000      	movs	r0, #0
    db08:	6213      	str	r3, [r2, #32]
    db0a:	b003      	add	sp, #12
    db0c:	f85d fb04 	ldr.w	pc, [sp], #4
    db10:	4b04      	ldr	r3, [pc, #16]	; (db24 <am_hal_clkgen_control+0x134>)
    db12:	e7f6      	b.n	db02 <am_hal_clkgen_control+0x112>
    db14:	2006      	movs	r0, #6
    db16:	4770      	bx	lr
    db18:	10001144 	.word	0x10001144
    db1c:	4ffff000 	.word	0x4ffff000
    db20:	40020000 	.word	0x40020000
    db24:	0025b801 	.word	0x0025b801

0000db28 <am_hal_clkgen_status_get>:
    db28:	b1b0      	cbz	r0, db58 <am_hal_clkgen_status_get+0x30>
    db2a:	b410      	push	{r4}
    db2c:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    db30:	4603      	mov	r3, r0
    db32:	698c      	ldr	r4, [r1, #24]
    db34:	4809      	ldr	r0, [pc, #36]	; (db5c <am_hal_clkgen_status_get+0x34>)
    db36:	4a0a      	ldr	r2, [pc, #40]	; (db60 <am_hal_clkgen_status_get+0x38>)
    db38:	f014 0f01 	tst.w	r4, #1
    db3c:	bf08      	it	eq
    db3e:	4602      	moveq	r2, r0
    db40:	601a      	str	r2, [r3, #0]
    db42:	69ca      	ldr	r2, [r1, #28]
    db44:	f85d 4b04 	ldr.w	r4, [sp], #4
    db48:	f002 0101 	and.w	r1, r2, #1
    db4c:	f3c2 0240 	ubfx	r2, r2, #1, #1
    db50:	2000      	movs	r0, #0
    db52:	6059      	str	r1, [r3, #4]
    db54:	721a      	strb	r2, [r3, #8]
    db56:	4770      	bx	lr
    db58:	2006      	movs	r0, #6
    db5a:	4770      	bx	lr
    db5c:	02dc6c00 	.word	0x02dc6c00
    db60:	016e3600 	.word	0x016e3600

0000db64 <am_hal_flash_delay>:
    db64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    db68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    db6a:	075b      	lsls	r3, r3, #29
    db6c:	bf46      	itte	mi
    db6e:	0040      	lslmi	r0, r0, #1
    db70:	230e      	movmi	r3, #14
    db72:	230b      	movpl	r3, #11
    db74:	4298      	cmp	r0, r3
    db76:	d902      	bls.n	db7e <am_hal_flash_delay+0x1a>
    db78:	4a01      	ldr	r2, [pc, #4]	; (db80 <am_hal_flash_delay+0x1c>)
    db7a:	1ac0      	subs	r0, r0, r3
    db7c:	4710      	bx	r2
    db7e:	4770      	bx	lr
    db80:	0800009d 	.word	0x0800009d

0000db84 <am_hal_flash_delay_status_check>:
    db84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    db88:	f89d c020 	ldrb.w	ip, [sp, #32]
    db8c:	f8df 805c 	ldr.w	r8, [pc, #92]	; dbec <am_hal_flash_delay_status_check+0x68>
    db90:	4604      	mov	r4, r0
    db92:	460d      	mov	r5, r1
    db94:	4616      	mov	r6, r2
    db96:	461f      	mov	r7, r3
    db98:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    db9c:	f1bc 0f00 	cmp.w	ip, #0
    dba0:	d00a      	beq.n	dbb8 <am_hal_flash_delay_status_check+0x34>
    dba2:	e01a      	b.n	dbda <am_hal_flash_delay_status_check+0x56>
    dba4:	b1f4      	cbz	r4, dbe4 <am_hal_flash_delay_status_check+0x60>
    dba6:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    dbaa:	f013 0f04 	tst.w	r3, #4
    dbae:	bf0c      	ite	eq
    dbb0:	2005      	moveq	r0, #5
    dbb2:	2012      	movne	r0, #18
    dbb4:	3c01      	subs	r4, #1
    dbb6:	47c0      	blx	r8
    dbb8:	6828      	ldr	r0, [r5, #0]
    dbba:	4030      	ands	r0, r6
    dbbc:	42b8      	cmp	r0, r7
    dbbe:	d0f1      	beq.n	dba4 <am_hal_flash_delay_status_check+0x20>
    dbc0:	2000      	movs	r0, #0
    dbc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dbc6:	b16c      	cbz	r4, dbe4 <am_hal_flash_delay_status_check+0x60>
    dbc8:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    dbcc:	f013 0f04 	tst.w	r3, #4
    dbd0:	bf0c      	ite	eq
    dbd2:	2005      	moveq	r0, #5
    dbd4:	2012      	movne	r0, #18
    dbd6:	3c01      	subs	r4, #1
    dbd8:	47c0      	blx	r8
    dbda:	6828      	ldr	r0, [r5, #0]
    dbdc:	4030      	ands	r0, r6
    dbde:	42b8      	cmp	r0, r7
    dbe0:	d1f1      	bne.n	dbc6 <am_hal_flash_delay_status_check+0x42>
    dbe2:	e7ed      	b.n	dbc0 <am_hal_flash_delay_status_check+0x3c>
    dbe4:	2004      	movs	r0, #4
    dbe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dbea:	bf00      	nop
    dbec:	0800009d 	.word	0x0800009d

0000dbf0 <am_hal_flash_load_ui32>:
    dbf0:	4b00      	ldr	r3, [pc, #0]	; (dbf4 <am_hal_flash_load_ui32+0x4>)
    dbf2:	4718      	bx	r3
    dbf4:	08000075 	.word	0x08000075

0000dbf8 <am_hal_flash_store_ui32>:
    dbf8:	4b01      	ldr	r3, [pc, #4]	; (dc00 <am_hal_flash_store_ui32+0x8>)
    dbfa:	f043 0301 	orr.w	r3, r3, #1
    dbfe:	4718      	bx	r3
    dc00:	10001028 	.word	0x10001028

0000dc04 <am_hal_gpio_pinconfig>:
    dc04:	2831      	cmp	r0, #49	; 0x31
    dc06:	f200 80c3 	bhi.w	dd90 <am_hal_gpio_pinconfig+0x18c>
    dc0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dc0e:	4604      	mov	r4, r0
    dc10:	f011 07e0 	ands.w	r7, r1, #224	; 0xe0
    dc14:	f001 0007 	and.w	r0, r1, #7
    dc18:	b085      	sub	sp, #20
    dc1a:	f3c1 03c1 	ubfx	r3, r1, #3, #2
    dc1e:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    dc22:	d00f      	beq.n	dc44 <am_hal_gpio_pinconfig+0x40>
    dc24:	f3c1 1642 	ubfx	r6, r1, #5, #3
    dc28:	1db5      	adds	r5, r6, #6
    dc2a:	f005 0507 	and.w	r5, r5, #7
    dc2e:	2d03      	cmp	r5, #3
    dc30:	f042 0201 	orr.w	r2, r2, #1
    dc34:	f240 80ae 	bls.w	dd94 <am_hal_gpio_pinconfig+0x190>
    dc38:	2fc0      	cmp	r7, #192	; 0xc0
    dc3a:	f000 80e1 	beq.w	de00 <am_hal_gpio_pinconfig+0x1fc>
    dc3e:	2f20      	cmp	r7, #32
    dc40:	f000 80e3 	beq.w	de0a <am_hal_gpio_pinconfig+0x206>
    dc44:	b163      	cbz	r3, dc60 <am_hal_gpio_pinconfig+0x5c>
    dc46:	2b01      	cmp	r3, #1
    dc48:	f000 80d3 	beq.w	ddf2 <am_hal_gpio_pinconfig+0x1ee>
    dc4c:	2b02      	cmp	r3, #2
    dc4e:	f040 80c9 	bne.w	dde4 <am_hal_gpio_pinconfig+0x1e0>
    dc52:	4b79      	ldr	r3, [pc, #484]	; (de38 <am_hal_gpio_pinconfig+0x234>)
    dc54:	5d1b      	ldrb	r3, [r3, r4]
    dc56:	075b      	lsls	r3, r3, #29
    dc58:	f140 80c4 	bpl.w	dde4 <am_hal_gpio_pinconfig+0x1e0>
    dc5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    dc60:	4b76      	ldr	r3, [pc, #472]	; (de3c <am_hal_gpio_pinconfig+0x238>)
    dc62:	5d1b      	ldrb	r3, [r3, r4]
    dc64:	4103      	asrs	r3, r0
    dc66:	005b      	lsls	r3, r3, #1
    dc68:	f003 0302 	and.w	r3, r3, #2
    dc6c:	4313      	orrs	r3, r2
    dc6e:	4a74      	ldr	r2, [pc, #464]	; (de40 <am_hal_gpio_pinconfig+0x23c>)
    dc70:	5d12      	ldrb	r2, [r2, r4]
    dc72:	4282      	cmp	r2, r0
    dc74:	f000 8099 	beq.w	ddaa <am_hal_gpio_pinconfig+0x1a6>
    dc78:	f3c1 3000 	ubfx	r0, r1, #12, #1
    dc7c:	f3c1 2581 	ubfx	r5, r1, #10, #2
    dc80:	f3c1 3280 	ubfx	r2, r1, #14, #1
    dc84:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    dc88:	0a88      	lsrs	r0, r1, #10
    dc8a:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    dc8e:	f000 0008 	and.w	r0, r0, #8
    dc92:	4302      	orrs	r2, r0
    dc94:	f3c1 2007 	ubfx	r0, r1, #8, #8
    dc98:	f000 050c 	and.w	r5, r0, #12
    dc9c:	2d04      	cmp	r5, #4
    dc9e:	f000 80a5 	beq.w	ddec <am_hal_gpio_pinconfig+0x1e8>
    dca2:	4d68      	ldr	r5, [pc, #416]	; (de44 <am_hal_gpio_pinconfig+0x240>)
    dca4:	682d      	ldr	r5, [r5, #0]
    dca6:	eba1 0805 	sub.w	r8, r1, r5
    dcaa:	fab8 f888 	clz	r8, r8
    dcae:	ea4f 1858 	mov.w	r8, r8, lsr #5
    dcb2:	f010 0f60 	tst.w	r0, #96	; 0x60
    dcb6:	bf04      	itt	eq
    dcb8:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
    dcbc:	f360 0200 	bfieq	r2, r0, #0, #1
    dcc0:	00a0      	lsls	r0, r4, #2
    dcc2:	f3c1 2101 	ubfx	r1, r1, #8, #2
    dcc6:	2902      	cmp	r1, #2
    dcc8:	d05c      	beq.n	dd84 <am_hal_gpio_pinconfig+0x180>
    dcca:	2903      	cmp	r1, #3
    dccc:	d058      	beq.n	dd80 <am_hal_gpio_pinconfig+0x17c>
    dcce:	2901      	cmp	r1, #1
    dcd0:	ea4f 01c4 	mov.w	r1, r4, lsl #3
    dcd4:	bf08      	it	eq
    dcd6:	f043 0304 	orreq.w	r3, r3, #4
    dcda:	f001 0118 	and.w	r1, r1, #24
    dcde:	2700      	movs	r7, #0
    dce0:	f000 001c 	and.w	r0, r0, #28
    dce4:	fa02 f600 	lsl.w	r6, r2, r0
    dce8:	220f      	movs	r2, #15
    dcea:	4082      	lsls	r2, r0
    dcec:	43d2      	mvns	r2, r2
    dcee:	f04f 09ff 	mov.w	r9, #255	; 0xff
    dcf2:	fa03 f501 	lsl.w	r5, r3, r1
    dcf6:	fa09 f901 	lsl.w	r9, r9, r1
    dcfa:	9201      	str	r2, [sp, #4]
    dcfc:	f000 f8fc 	bl	def8 <am_hal_interrupt_master_disable>
    dd00:	f024 0a03 	bic.w	sl, r4, #3
    dd04:	ea4f 0b54 	mov.w	fp, r4, lsr #1
    dd08:	f10a 4c80 	add.w	ip, sl, #1073741824	; 0x40000000
    dd0c:	4b4e      	ldr	r3, [pc, #312]	; (de48 <am_hal_gpio_pinconfig+0x244>)
    dd0e:	494f      	ldr	r1, [pc, #316]	; (de4c <am_hal_gpio_pinconfig+0x248>)
    dd10:	9a01      	ldr	r2, [sp, #4]
    dd12:	9003      	str	r0, [sp, #12]
    dd14:	ea6f 0909 	mvn.w	r9, r9
    dd18:	f02b 0b03 	bic.w	fp, fp, #3
    dd1c:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
    dd20:	f1b8 0f00 	cmp.w	r8, #0
    dd24:	d00b      	beq.n	dd3e <am_hal_gpio_pinconfig+0x13a>
    dd26:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
    dd2a:	f004 081f 	and.w	r8, r4, #31
    dd2e:	4848      	ldr	r0, [pc, #288]	; (de50 <am_hal_gpio_pinconfig+0x24c>)
    dd30:	f00e 0e04 	and.w	lr, lr, #4
    dd34:	2401      	movs	r4, #1
    dd36:	fa04 f408 	lsl.w	r4, r4, r8
    dd3a:	f84e 4000 	str.w	r4, [lr, r0]
    dd3e:	4845      	ldr	r0, [pc, #276]	; (de54 <am_hal_gpio_pinconfig+0x250>)
    dd40:	2473      	movs	r4, #115	; 0x73
    dd42:	6604      	str	r4, [r0, #96]	; 0x60
    dd44:	f8dc 4000 	ldr.w	r4, [ip]
    dd48:	ea04 0409 	and.w	r4, r4, r9
    dd4c:	4325      	orrs	r5, r4
    dd4e:	f8cc 5000 	str.w	r5, [ip]
    dd52:	f85b 4003 	ldr.w	r4, [fp, r3]
    dd56:	4022      	ands	r2, r4
    dd58:	4332      	orrs	r2, r6
    dd5a:	f84b 2003 	str.w	r2, [fp, r3]
    dd5e:	f85a 3001 	ldr.w	r3, [sl, r1]
    dd62:	ea03 0909 	and.w	r9, r3, r9
    dd66:	2400      	movs	r4, #0
    dd68:	ea49 0707 	orr.w	r7, r9, r7
    dd6c:	f84a 7001 	str.w	r7, [sl, r1]
    dd70:	6604      	str	r4, [r0, #96]	; 0x60
    dd72:	9803      	ldr	r0, [sp, #12]
    dd74:	f000 f8c4 	bl	df00 <am_hal_interrupt_master_set>
    dd78:	4620      	mov	r0, r4
    dd7a:	b005      	add	sp, #20
    dd7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd80:	f043 0304 	orr.w	r3, r3, #4
    dd84:	00e1      	lsls	r1, r4, #3
    dd86:	f001 0118 	and.w	r1, r1, #24
    dd8a:	2701      	movs	r7, #1
    dd8c:	408f      	lsls	r7, r1
    dd8e:	e7a7      	b.n	dce0 <am_hal_gpio_pinconfig+0xdc>
    dd90:	2006      	movs	r0, #6
    dd92:	4770      	bx	lr
    dd94:	4d28      	ldr	r5, [pc, #160]	; (de38 <am_hal_gpio_pinconfig+0x234>)
    dd96:	5d2d      	ldrb	r5, [r5, r4]
    dd98:	3e02      	subs	r6, #2
    dd9a:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    dd9e:	07ee      	lsls	r6, r5, #31
    dda0:	d536      	bpl.n	de10 <am_hal_gpio_pinconfig+0x20c>
    dda2:	2b00      	cmp	r3, #0
    dda4:	f43f af5c 	beq.w	dc60 <am_hal_gpio_pinconfig+0x5c>
    dda8:	e74d      	b.n	dc46 <am_hal_gpio_pinconfig+0x42>
    ddaa:	f3c1 4202 	ubfx	r2, r1, #16, #3
    ddae:	2a07      	cmp	r2, #7
    ddb0:	d030      	beq.n	de14 <am_hal_gpio_pinconfig+0x210>
    ddb2:	4d29      	ldr	r5, [pc, #164]	; (de58 <am_hal_gpio_pinconfig+0x254>)
    ddb4:	f3c1 40c1 	ubfx	r0, r1, #19, #2
    ddb8:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    ddbc:	f815 0024 	ldrb.w	r0, [r5, r4, lsl #2]
    ddc0:	4290      	cmp	r0, r2
    ddc2:	d029      	beq.n	de18 <am_hal_gpio_pinconfig+0x214>
    ddc4:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    ddc8:	00a0      	lsls	r0, r4, #2
    ddca:	786e      	ldrb	r6, [r5, #1]
    ddcc:	4296      	cmp	r6, r2
    ddce:	d02d      	beq.n	de2c <am_hal_gpio_pinconfig+0x228>
    ddd0:	78ae      	ldrb	r6, [r5, #2]
    ddd2:	4296      	cmp	r6, r2
    ddd4:	d02c      	beq.n	de30 <am_hal_gpio_pinconfig+0x22c>
    ddd6:	78ed      	ldrb	r5, [r5, #3]
    ddd8:	4295      	cmp	r5, r2
    ddda:	d02b      	beq.n	de34 <am_hal_gpio_pinconfig+0x230>
    dddc:	481f      	ldr	r0, [pc, #124]	; (de5c <am_hal_gpio_pinconfig+0x258>)
    ddde:	b005      	add	sp, #20
    dde0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dde4:	481e      	ldr	r0, [pc, #120]	; (de60 <am_hal_gpio_pinconfig+0x25c>)
    dde6:	b005      	add	sp, #20
    dde8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ddec:	f04f 0801 	mov.w	r8, #1
    ddf0:	e75f      	b.n	dcb2 <am_hal_gpio_pinconfig+0xae>
    ddf2:	4b11      	ldr	r3, [pc, #68]	; (de38 <am_hal_gpio_pinconfig+0x234>)
    ddf4:	5d1b      	ldrb	r3, [r3, r4]
    ddf6:	079d      	lsls	r5, r3, #30
    ddf8:	d5f4      	bpl.n	dde4 <am_hal_gpio_pinconfig+0x1e0>
    ddfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    ddfe:	e72f      	b.n	dc60 <am_hal_gpio_pinconfig+0x5c>
    de00:	2c14      	cmp	r4, #20
    de02:	f43f af1f 	beq.w	dc44 <am_hal_gpio_pinconfig+0x40>
    de06:	4817      	ldr	r0, [pc, #92]	; (de64 <am_hal_gpio_pinconfig+0x260>)
    de08:	e7b7      	b.n	dd7a <am_hal_gpio_pinconfig+0x176>
    de0a:	2c14      	cmp	r4, #20
    de0c:	f47f af1a 	bne.w	dc44 <am_hal_gpio_pinconfig+0x40>
    de10:	4815      	ldr	r0, [pc, #84]	; (de68 <am_hal_gpio_pinconfig+0x264>)
    de12:	e7b2      	b.n	dd7a <am_hal_gpio_pinconfig+0x176>
    de14:	4815      	ldr	r0, [pc, #84]	; (de6c <am_hal_gpio_pinconfig+0x268>)
    de16:	e7b0      	b.n	dd7a <am_hal_gpio_pinconfig+0x176>
    de18:	2200      	movs	r2, #0
    de1a:	00a0      	lsls	r0, r4, #2
    de1c:	0052      	lsls	r2, r2, #1
    de1e:	f3c1 5540 	ubfx	r5, r1, #21, #1
    de22:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
    de26:	f04f 0800 	mov.w	r8, #0
    de2a:	e74a      	b.n	dcc2 <am_hal_gpio_pinconfig+0xbe>
    de2c:	2201      	movs	r2, #1
    de2e:	e7f5      	b.n	de1c <am_hal_gpio_pinconfig+0x218>
    de30:	2202      	movs	r2, #2
    de32:	e7f3      	b.n	de1c <am_hal_gpio_pinconfig+0x218>
    de34:	2203      	movs	r2, #3
    de36:	e7f1      	b.n	de1c <am_hal_gpio_pinconfig+0x218>
    de38:	0000e9a0 	.word	0x0000e9a0
    de3c:	0000e9d4 	.word	0x0000e9d4
    de40:	0000ead0 	.word	0x0000ead0
    de44:	0000e998 	.word	0x0000e998
    de48:	40010040 	.word	0x40010040
    de4c:	400100e0 	.word	0x400100e0
    de50:	400100b4 	.word	0x400100b4
    de54:	40010000 	.word	0x40010000
    de58:	0000ea08 	.word	0x0000ea08
    de5c:	08000104 	.word	0x08000104
    de60:	08000102 	.word	0x08000102
    de64:	08000101 	.word	0x08000101
    de68:	08000100 	.word	0x08000100
    de6c:	08000103 	.word	0x08000103

0000de70 <am_hal_gpio_state_write>:
    de70:	2831      	cmp	r0, #49	; 0x31
    de72:	d81a      	bhi.n	deaa <am_hal_gpio_state_write+0x3a>
    de74:	b570      	push	{r4, r5, r6, lr}
    de76:	2905      	cmp	r1, #5
    de78:	b082      	sub	sp, #8
    de7a:	460d      	mov	r5, r1
    de7c:	d812      	bhi.n	dea4 <am_hal_gpio_state_write+0x34>
    de7e:	f000 031f 	and.w	r3, r0, #31
    de82:	2201      	movs	r2, #1
    de84:	08c0      	lsrs	r0, r0, #3
    de86:	fa02 f603 	lsl.w	r6, r2, r3
    de8a:	f000 0404 	and.w	r4, r0, #4
    de8e:	f000 f833 	bl	def8 <am_hal_interrupt_master_disable>
    de92:	3d01      	subs	r5, #1
    de94:	9001      	str	r0, [sp, #4]
    de96:	2d04      	cmp	r5, #4
    de98:	d821      	bhi.n	dede <am_hal_gpio_state_write+0x6e>
    de9a:	e8df f005 	tbb	[pc, r5]
    de9e:	1512      	.short	0x1512
    dea0:	1d1a      	.short	0x1d1a
    dea2:	08          	.byte	0x08
    dea3:	00          	.byte	0x00
    dea4:	2006      	movs	r0, #6
    dea6:	b002      	add	sp, #8
    dea8:	bd70      	pop	{r4, r5, r6, pc}
    deaa:	2005      	movs	r0, #5
    deac:	4770      	bx	lr
    deae:	4a0d      	ldr	r2, [pc, #52]	; (dee4 <am_hal_gpio_state_write+0x74>)
    deb0:	58a3      	ldr	r3, [r4, r2]
    deb2:	4073      	eors	r3, r6
    deb4:	50a3      	str	r3, [r4, r2]
    deb6:	9801      	ldr	r0, [sp, #4]
    deb8:	f000 f822 	bl	df00 <am_hal_interrupt_master_set>
    debc:	2000      	movs	r0, #0
    debe:	b002      	add	sp, #8
    dec0:	bd70      	pop	{r4, r5, r6, pc}
    dec2:	4b09      	ldr	r3, [pc, #36]	; (dee8 <am_hal_gpio_state_write+0x78>)
    dec4:	50e6      	str	r6, [r4, r3]
    dec6:	e7f6      	b.n	deb6 <am_hal_gpio_state_write+0x46>
    dec8:	4a08      	ldr	r2, [pc, #32]	; (deec <am_hal_gpio_state_write+0x7c>)
    deca:	58a3      	ldr	r3, [r4, r2]
    decc:	4073      	eors	r3, r6
    dece:	50a3      	str	r3, [r4, r2]
    ded0:	e7f1      	b.n	deb6 <am_hal_gpio_state_write+0x46>
    ded2:	4b04      	ldr	r3, [pc, #16]	; (dee4 <am_hal_gpio_state_write+0x74>)
    ded4:	50e6      	str	r6, [r4, r3]
    ded6:	e7ee      	b.n	deb6 <am_hal_gpio_state_write+0x46>
    ded8:	4b05      	ldr	r3, [pc, #20]	; (def0 <am_hal_gpio_state_write+0x80>)
    deda:	50e6      	str	r6, [r4, r3]
    dedc:	e7eb      	b.n	deb6 <am_hal_gpio_state_write+0x46>
    dede:	4b05      	ldr	r3, [pc, #20]	; (def4 <am_hal_gpio_state_write+0x84>)
    dee0:	50e6      	str	r6, [r4, r3]
    dee2:	e7e8      	b.n	deb6 <am_hal_gpio_state_write+0x46>
    dee4:	400100b4 	.word	0x400100b4
    dee8:	40010090 	.word	0x40010090
    deec:	40010088 	.word	0x40010088
    def0:	400100a8 	.word	0x400100a8
    def4:	40010098 	.word	0x40010098

0000def8 <am_hal_interrupt_master_disable>:
    def8:	f3ef 8010 	mrs	r0, PRIMASK
    defc:	b672      	cpsid	i
    defe:	4770      	bx	lr

0000df00 <am_hal_interrupt_master_set>:
    df00:	f380 8810 	msr	PRIMASK, r0
    df04:	4770      	bx	lr
    df06:	bf00      	nop

0000df08 <am_hal_itm_enable>:
    df08:	4a0e      	ldr	r2, [pc, #56]	; (df44 <am_hal_itm_enable+0x3c>)
    df0a:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    df0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    df12:	b410      	push	{r4}
    df14:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    df18:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    df1c:	01db      	lsls	r3, r3, #7
    df1e:	d5fb      	bpl.n	df18 <am_hal_itm_enable+0x10>
    df20:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    df24:	4c08      	ldr	r4, [pc, #32]	; (df48 <am_hal_itm_enable+0x40>)
    df26:	4a09      	ldr	r2, [pc, #36]	; (df4c <am_hal_itm_enable+0x44>)
    df28:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    df2c:	200f      	movs	r0, #15
    df2e:	f04f 31ff 	mov.w	r1, #4294967295
    df32:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    df36:	f85d 4b04 	ldr.w	r4, [sp], #4
    df3a:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    df3e:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    df42:	4770      	bx	lr
    df44:	e000ed00 	.word	0xe000ed00
    df48:	c5acce55 	.word	0xc5acce55
    df4c:	00150511 	.word	0x00150511

0000df50 <am_hal_itm_print>:
    df50:	7803      	ldrb	r3, [r0, #0]
    df52:	b1a3      	cbz	r3, df7e <am_hal_itm_print+0x2e>
    df54:	4603      	mov	r3, r0
    df56:	f1c0 0c01 	rsb	ip, r0, #1
    df5a:	eb0c 0103 	add.w	r1, ip, r3
    df5e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    df62:	2a00      	cmp	r2, #0
    df64:	d1f9      	bne.n	df5a <am_hal_itm_print+0xa>
    df66:	4401      	add	r1, r0
    df68:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    df6c:	f810 cb01 	ldrb.w	ip, [r0], #1
    df70:	6813      	ldr	r3, [r2, #0]
    df72:	2b00      	cmp	r3, #0
    df74:	d0fc      	beq.n	df70 <am_hal_itm_print+0x20>
    df76:	4288      	cmp	r0, r1
    df78:	f882 c000 	strb.w	ip, [r2]
    df7c:	d1f6      	bne.n	df6c <am_hal_itm_print+0x1c>
    df7e:	4770      	bx	lr

0000df80 <am_hal_mcuctrl_info_get>:
    df80:	2900      	cmp	r1, #0
    df82:	f000 808f 	beq.w	e0a4 <am_hal_mcuctrl_info_get+0x124>
    df86:	2801      	cmp	r0, #1
    df88:	b430      	push	{r4, r5}
    df8a:	d006      	beq.n	df9a <am_hal_mcuctrl_info_get+0x1a>
    df8c:	2802      	cmp	r0, #2
    df8e:	d06d      	beq.n	e06c <am_hal_mcuctrl_info_get+0xec>
    df90:	2800      	cmp	r0, #0
    df92:	d055      	beq.n	e040 <am_hal_mcuctrl_info_get+0xc0>
    df94:	2006      	movs	r0, #6
    df96:	bc30      	pop	{r4, r5}
    df98:	4770      	bx	lr
    df9a:	4a43      	ldr	r2, [pc, #268]	; (e0a8 <am_hal_mcuctrl_info_get+0x128>)
    df9c:	4843      	ldr	r0, [pc, #268]	; (e0ac <am_hal_mcuctrl_info_get+0x12c>)
    df9e:	6813      	ldr	r3, [r2, #0]
    dfa0:	600b      	str	r3, [r1, #0]
    dfa2:	6854      	ldr	r4, [r2, #4]
    dfa4:	604c      	str	r4, [r1, #4]
    dfa6:	6894      	ldr	r4, [r2, #8]
    dfa8:	608c      	str	r4, [r1, #8]
    dfaa:	68d4      	ldr	r4, [r2, #12]
    dfac:	60cc      	str	r4, [r1, #12]
    dfae:	f3c3 5503 	ubfx	r5, r3, #20, #4
    dfb2:	6914      	ldr	r4, [r2, #16]
    dfb4:	610c      	str	r4, [r1, #16]
    dfb6:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    dfba:	4c3d      	ldr	r4, [pc, #244]	; (e0b0 <am_hal_mcuctrl_info_get+0x130>)
    dfbc:	6950      	ldr	r0, [r2, #20]
    dfbe:	6148      	str	r0, [r1, #20]
    dfc0:	f003 0201 	and.w	r2, r3, #1
    dfc4:	f3c3 4303 	ubfx	r3, r3, #16, #4
    dfc8:	e9c1 2506 	strd	r2, r5, [r1, #24]
    dfcc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    dfd0:	4a38      	ldr	r2, [pc, #224]	; (e0b4 <am_hal_mcuctrl_info_get+0x134>)
    dfd2:	620b      	str	r3, [r1, #32]
    dfd4:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    dfd8:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    dfdc:	b2db      	uxtb	r3, r3
    dfde:	f000 000f 	and.w	r0, r0, #15
    dfe2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    dfe6:	624b      	str	r3, [r1, #36]	; 0x24
    dfe8:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    dfec:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
    dff0:	f3c3 1303 	ubfx	r3, r3, #4, #4
    dff4:	f000 000f 	and.w	r0, r0, #15
    dff8:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
    dffc:	628b      	str	r3, [r1, #40]	; 0x28
    dffe:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    e002:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
    e006:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    e00a:	f3c0 1003 	ubfx	r0, r0, #4, #4
    e00e:	4303      	orrs	r3, r0
    e010:	62cb      	str	r3, [r1, #44]	; 0x2c
    e012:	f8d2 40fc 	ldr.w	r4, [r2, #252]	; 0xfc
    e016:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    e01a:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    e01e:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    e022:	b2db      	uxtb	r3, r3
    e024:	041b      	lsls	r3, r3, #16
    e026:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    e02a:	fa5f fc82 	uxtb.w	ip, r2
    e02e:	ea43 030c 	orr.w	r3, r3, ip
    e032:	b2c2      	uxtb	r2, r0
    e034:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e038:	630b      	str	r3, [r1, #48]	; 0x30
    e03a:	2000      	movs	r0, #0
    e03c:	bc30      	pop	{r4, r5}
    e03e:	4770      	bx	lr
    e040:	4a19      	ldr	r2, [pc, #100]	; (e0a8 <am_hal_mcuctrl_info_get+0x128>)
    e042:	6993      	ldr	r3, [r2, #24]
    e044:	f3c3 1480 	ubfx	r4, r3, #6, #1
    e048:	700c      	strb	r4, [r1, #0]
    e04a:	f8d2 41a0 	ldr.w	r4, [r2, #416]	; 0x1a0
    e04e:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e052:	704b      	strb	r3, [r1, #1]
    e054:	f3c4 6381 	ubfx	r3, r4, #26, #2
    e058:	710b      	strb	r3, [r1, #4]
    e05a:	6953      	ldr	r3, [r2, #20]
    e05c:	f3c3 0240 	ubfx	r2, r3, #1, #1
    e060:	f003 0301 	and.w	r3, r3, #1
    e064:	bc30      	pop	{r4, r5}
    e066:	708a      	strb	r2, [r1, #2]
    e068:	70cb      	strb	r3, [r1, #3]
    e06a:	4770      	bx	lr
    e06c:	4a0e      	ldr	r2, [pc, #56]	; (e0a8 <am_hal_mcuctrl_info_get+0x128>)
    e06e:	6848      	ldr	r0, [r1, #4]
    e070:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    e074:	f003 0401 	and.w	r4, r3, #1
    e078:	700c      	strb	r4, [r1, #0]
    e07a:	f3c3 0440 	ubfx	r4, r3, #1, #1
    e07e:	720c      	strb	r4, [r1, #8]
    e080:	f8d2 41c4 	ldr.w	r4, [r2, #452]	; 0x1c4
    e084:	60cc      	str	r4, [r1, #12]
    e086:	f8d2 41c0 	ldr.w	r4, [r2, #448]	; 0x1c0
    e08a:	4320      	orrs	r0, r4
    e08c:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e090:	6048      	str	r0, [r1, #4]
    e092:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    e096:	740b      	strb	r3, [r1, #16]
    e098:	694b      	ldr	r3, [r1, #20]
    e09a:	4313      	orrs	r3, r2
    e09c:	2000      	movs	r0, #0
    e09e:	bc30      	pop	{r4, r5}
    e0a0:	614b      	str	r3, [r1, #20]
    e0a2:	4770      	bx	lr
    e0a4:	2006      	movs	r0, #6
    e0a6:	4770      	bx	lr
    e0a8:	40020000 	.word	0x40020000
    e0ac:	0000eb04 	.word	0x0000eb04
    e0b0:	0000eb44 	.word	0x0000eb44
    e0b4:	f0000f00 	.word	0xf0000f00

0000e0b8 <am_hal_pwrctrl_low_power_init>:
    e0b8:	b530      	push	{r4, r5, lr}
    e0ba:	4b69      	ldr	r3, [pc, #420]	; (e260 <am_hal_pwrctrl_low_power_init+0x1a8>)
    e0bc:	681a      	ldr	r2, [r3, #0]
    e0be:	b085      	sub	sp, #20
    e0c0:	b912      	cbnz	r2, e0c8 <am_hal_pwrctrl_low_power_init+0x10>
    e0c2:	4a68      	ldr	r2, [pc, #416]	; (e264 <am_hal_pwrctrl_low_power_init+0x1ac>)
    e0c4:	6812      	ldr	r2, [r2, #0]
    e0c6:	601a      	str	r2, [r3, #0]
    e0c8:	4b67      	ldr	r3, [pc, #412]	; (e268 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e0ca:	68db      	ldr	r3, [r3, #12]
    e0cc:	b2db      	uxtb	r3, r3
    e0ce:	2b12      	cmp	r3, #18
    e0d0:	d104      	bne.n	e0dc <am_hal_pwrctrl_low_power_init+0x24>
    e0d2:	4c66      	ldr	r4, [pc, #408]	; (e26c <am_hal_pwrctrl_low_power_init+0x1b4>)
    e0d4:	6863      	ldr	r3, [r4, #4]
    e0d6:	07d8      	lsls	r0, r3, #31
    e0d8:	f100 8088 	bmi.w	e1ec <am_hal_pwrctrl_low_power_init+0x134>
    e0dc:	4b62      	ldr	r3, [pc, #392]	; (e268 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e0de:	68da      	ldr	r2, [r3, #12]
    e0e0:	b2d2      	uxtb	r2, r2
    e0e2:	2a20      	cmp	r2, #32
    e0e4:	d934      	bls.n	e150 <am_hal_pwrctrl_low_power_init+0x98>
    e0e6:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
    e0ea:	2002      	movs	r0, #2
    e0ec:	f360 4213 	bfi	r2, r0, #16, #4
    e0f0:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    e0f4:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
    e0f8:	2203      	movs	r2, #3
    e0fa:	f362 5117 	bfi	r1, r2, #20, #4
    e0fe:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
    e102:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e106:	2405      	movs	r4, #5
    e108:	f364 0103 	bfi	r1, r4, #0, #4
    e10c:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e110:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e114:	f360 1107 	bfi	r1, r0, #4, #4
    e118:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e11c:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e120:	2406      	movs	r4, #6
    e122:	f364 210b 	bfi	r1, r4, #8, #4
    e126:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e12a:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e12e:	2001      	movs	r0, #1
    e130:	f360 310f 	bfi	r1, r0, #12, #4
    e134:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e138:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e13c:	f362 61de 	bfi	r1, r2, #27, #4
    e140:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e144:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
    e148:	f362 0103 	bfi	r1, r2, #0, #4
    e14c:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
    e150:	4a45      	ldr	r2, [pc, #276]	; (e268 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e152:	68d3      	ldr	r3, [r2, #12]
    e154:	b2db      	uxtb	r3, r3
    e156:	2b11      	cmp	r3, #17
    e158:	d905      	bls.n	e166 <am_hal_pwrctrl_low_power_init+0xae>
    e15a:	f8d2 335c 	ldr.w	r3, [r2, #860]	; 0x35c
    e15e:	f36f 6318 	bfc	r3, #24, #1
    e162:	f8c2 335c 	str.w	r3, [r2, #860]	; 0x35c
    e166:	2100      	movs	r1, #0
    e168:	200c      	movs	r0, #12
    e16a:	f7ff fac7 	bl	d6fc <am_hal_cachectrl_control>
    e16e:	4b3f      	ldr	r3, [pc, #252]	; (e26c <am_hal_pwrctrl_low_power_init+0x1b4>)
    e170:	699b      	ldr	r3, [r3, #24]
    e172:	f3c3 2500 	ubfx	r5, r3, #8, #1
    e176:	05db      	lsls	r3, r3, #23
    e178:	d420      	bmi.n	e1bc <am_hal_pwrctrl_low_power_init+0x104>
    e17a:	4c3b      	ldr	r4, [pc, #236]	; (e268 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e17c:	68e3      	ldr	r3, [r4, #12]
    e17e:	b2db      	uxtb	r3, r3
    e180:	2b11      	cmp	r3, #17
    e182:	d84e      	bhi.n	e222 <am_hal_pwrctrl_low_power_init+0x16a>
    e184:	4c38      	ldr	r4, [pc, #224]	; (e268 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e186:	493a      	ldr	r1, [pc, #232]	; (e270 <am_hal_pwrctrl_low_power_init+0x1b8>)
    e188:	7e22      	ldrb	r2, [r4, #24]
    e18a:	2001      	movs	r0, #1
    e18c:	4302      	orrs	r2, r0
    e18e:	2307      	movs	r3, #7
    e190:	7622      	strb	r2, [r4, #24]
    e192:	9000      	str	r0, [sp, #0]
    e194:	461a      	mov	r2, r3
    e196:	f242 7010 	movw	r0, #10000	; 0x2710
    e19a:	f7ff fcf3 	bl	db84 <am_hal_flash_delay_status_check>
    e19e:	2800      	cmp	r0, #0
    e1a0:	d15a      	bne.n	e258 <am_hal_pwrctrl_low_power_init+0x1a0>
    e1a2:	4b32      	ldr	r3, [pc, #200]	; (e26c <am_hal_pwrctrl_low_power_init+0x1b4>)
    e1a4:	681a      	ldr	r2, [r3, #0]
    e1a6:	f042 0201 	orr.w	r2, r2, #1
    e1aa:	601a      	str	r2, [r3, #0]
    e1ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    e1ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    e1b2:	625a      	str	r2, [r3, #36]	; 0x24
    e1b4:	68e3      	ldr	r3, [r4, #12]
    e1b6:	b2db      	uxtb	r3, r3
    e1b8:	2b11      	cmp	r3, #17
    e1ba:	d002      	beq.n	e1c2 <am_hal_pwrctrl_low_power_init+0x10a>
    e1bc:	2000      	movs	r0, #0
    e1be:	b005      	add	sp, #20
    e1c0:	bd30      	pop	{r4, r5, pc}
    e1c2:	f8d4 335c 	ldr.w	r3, [r4, #860]	; 0x35c
    e1c6:	f360 5356 	bfi	r3, r0, #21, #2
    e1ca:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
    e1ce:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e1d2:	220f      	movs	r2, #15
    e1d4:	f362 138b 	bfi	r3, r2, #6, #6
    e1d8:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e1dc:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e1e0:	f362 0305 	bfi	r3, r2, #0, #6
    e1e4:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e1e8:	b005      	add	sp, #20
    e1ea:	bd30      	pop	{r4, r5, pc}
    e1ec:	f7ff fe84 	bl	def8 <am_hal_interrupt_master_disable>
    e1f0:	9002      	str	r0, [sp, #8]
    e1f2:	68a3      	ldr	r3, [r4, #8]
    e1f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    e1f8:	60a3      	str	r3, [r4, #8]
    e1fa:	9802      	ldr	r0, [sp, #8]
    e1fc:	f7ff fe80 	bl	df00 <am_hal_interrupt_master_set>
    e200:	20a0      	movs	r0, #160	; 0xa0
    e202:	f7ff fcaf 	bl	db64 <am_hal_flash_delay>
    e206:	69a3      	ldr	r3, [r4, #24]
    e208:	0619      	lsls	r1, r3, #24
    e20a:	d403      	bmi.n	e214 <am_hal_pwrctrl_low_power_init+0x15c>
    e20c:	20a0      	movs	r0, #160	; 0xa0
    e20e:	f7ff fca9 	bl	db64 <am_hal_flash_delay>
    e212:	69a3      	ldr	r3, [r4, #24]
    e214:	4b15      	ldr	r3, [pc, #84]	; (e26c <am_hal_pwrctrl_low_power_init+0x1b4>)
    e216:	699b      	ldr	r3, [r3, #24]
    e218:	061a      	lsls	r2, r3, #24
    e21a:	f53f af5f 	bmi.w	e0dc <am_hal_pwrctrl_low_power_init+0x24>
    e21e:	2001      	movs	r0, #1
    e220:	e7cd      	b.n	e1be <am_hal_pwrctrl_low_power_init+0x106>
    e222:	f7ff fe69 	bl	def8 <am_hal_interrupt_master_disable>
    e226:	9003      	str	r0, [sp, #12]
    e228:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e22c:	2219      	movs	r2, #25
    e22e:	f362 138b 	bfi	r3, r2, #6, #6
    e232:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e236:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
    e23a:	210c      	movs	r1, #12
    e23c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e240:	f361 0205 	bfi	r2, r1, #0, #6
    e244:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
    e248:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    e24a:	f365 5296 	bfi	r2, r5, #22, #1
    e24e:	63da      	str	r2, [r3, #60]	; 0x3c
    e250:	9803      	ldr	r0, [sp, #12]
    e252:	f7ff fe55 	bl	df00 <am_hal_interrupt_master_set>
    e256:	e795      	b.n	e184 <am_hal_pwrctrl_low_power_init+0xcc>
    e258:	2004      	movs	r0, #4
    e25a:	b005      	add	sp, #20
    e25c:	bd30      	pop	{r4, r5, pc}
    e25e:	bf00      	nop
    e260:	10001144 	.word	0x10001144
    e264:	4ffff000 	.word	0x4ffff000
    e268:	40020000 	.word	0x40020000
    e26c:	40021000 	.word	0x40021000
    e270:	40020018 	.word	0x40020018

0000e274 <am_hal_rtc_osc_disable>:
    e274:	4a03      	ldr	r2, [pc, #12]	; (e284 <am_hal_rtc_osc_disable+0x10>)
    e276:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    e27a:	f043 0310 	orr.w	r3, r3, #16
    e27e:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    e282:	4770      	bx	lr
    e284:	40004200 	.word	0x40004200

0000e288 <am_hal_stimer_config>:
    e288:	4a03      	ldr	r2, [pc, #12]	; (e298 <am_hal_stimer_config+0x10>)
    e28a:	4603      	mov	r3, r0
    e28c:	f8d2 0140 	ldr.w	r0, [r2, #320]	; 0x140
    e290:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
    e294:	4770      	bx	lr
    e296:	bf00      	nop
    e298:	40008000 	.word	0x40008000

0000e29c <am_hal_stimer_counter_get>:
    e29c:	b500      	push	{lr}
    e29e:	b085      	sub	sp, #20
    e2a0:	4805      	ldr	r0, [pc, #20]	; (e2b8 <am_hal_stimer_counter_get+0x1c>)
    e2a2:	a901      	add	r1, sp, #4
    e2a4:	f000 f892 	bl	e3cc <am_hal_triple_read>
    e2a8:	e9dd 3001 	ldrd	r3, r0, [sp, #4]
    e2ac:	4283      	cmp	r3, r0
    e2ae:	bf18      	it	ne
    e2b0:	9803      	ldrne	r0, [sp, #12]
    e2b2:	b005      	add	sp, #20
    e2b4:	f85d fb04 	ldr.w	pc, [sp], #4
    e2b8:	40008144 	.word	0x40008144

0000e2bc <am_hal_sysctrl_sleep>:
    e2bc:	b510      	push	{r4, lr}
    e2be:	b082      	sub	sp, #8
    e2c0:	4604      	mov	r4, r0
    e2c2:	f7ff fe19 	bl	def8 <am_hal_interrupt_master_disable>
    e2c6:	9001      	str	r0, [sp, #4]
    e2c8:	b124      	cbz	r4, e2d4 <am_hal_sysctrl_sleep+0x18>
    e2ca:	4b12      	ldr	r3, [pc, #72]	; (e314 <am_hal_sysctrl_sleep+0x58>)
    e2cc:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    e2d0:	07db      	lsls	r3, r3, #31
    e2d2:	d513      	bpl.n	e2fc <am_hal_sysctrl_sleep+0x40>
    e2d4:	4a10      	ldr	r2, [pc, #64]	; (e318 <am_hal_sysctrl_sleep+0x5c>)
    e2d6:	6913      	ldr	r3, [r2, #16]
    e2d8:	f023 0304 	bic.w	r3, r3, #4
    e2dc:	6113      	str	r3, [r2, #16]
    e2de:	f3bf 8f4f 	dsb	sy
    e2e2:	4a0e      	ldr	r2, [pc, #56]	; (e31c <am_hal_sysctrl_sleep+0x60>)
    e2e4:	4b0e      	ldr	r3, [pc, #56]	; (e320 <am_hal_sysctrl_sleep+0x64>)
    e2e6:	6812      	ldr	r2, [r2, #0]
    e2e8:	601a      	str	r2, [r3, #0]
    e2ea:	bf30      	wfi
    e2ec:	f3bf 8f6f 	isb	sy
    e2f0:	9801      	ldr	r0, [sp, #4]
    e2f2:	b002      	add	sp, #8
    e2f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e2f8:	f7ff be02 	b.w	df00 <am_hal_interrupt_master_set>
    e2fc:	4b09      	ldr	r3, [pc, #36]	; (e324 <am_hal_sysctrl_sleep+0x68>)
    e2fe:	681a      	ldr	r2, [r3, #0]
    e300:	b912      	cbnz	r2, e308 <am_hal_sysctrl_sleep+0x4c>
    e302:	4a09      	ldr	r2, [pc, #36]	; (e328 <am_hal_sysctrl_sleep+0x6c>)
    e304:	6812      	ldr	r2, [r2, #0]
    e306:	601a      	str	r2, [r3, #0]
    e308:	4a03      	ldr	r2, [pc, #12]	; (e318 <am_hal_sysctrl_sleep+0x5c>)
    e30a:	6913      	ldr	r3, [r2, #16]
    e30c:	f043 0304 	orr.w	r3, r3, #4
    e310:	6113      	str	r3, [r2, #16]
    e312:	e7e4      	b.n	e2de <am_hal_sysctrl_sleep+0x22>
    e314:	40020000 	.word	0x40020000
    e318:	e000ed00 	.word	0xe000ed00
    e31c:	5fff0000 	.word	0x5fff0000
    e320:	10001148 	.word	0x10001148
    e324:	10001144 	.word	0x10001144
    e328:	4ffff000 	.word	0x4ffff000

0000e32c <am_hal_tpiu_enable>:
    e32c:	b510      	push	{r4, lr}
    e32e:	4b23      	ldr	r3, [pc, #140]	; (e3bc <am_hal_tpiu_enable+0x90>)
    e330:	6804      	ldr	r4, [r0, #0]
    e332:	2200      	movs	r2, #0
    e334:	b084      	sub	sp, #16
    e336:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    e33a:	b334      	cbz	r4, e38a <am_hal_tpiu_enable+0x5e>
    e33c:	4a20      	ldr	r2, [pc, #128]	; (e3c0 <am_hal_tpiu_enable+0x94>)
    e33e:	4921      	ldr	r1, [pc, #132]	; (e3c4 <am_hal_tpiu_enable+0x98>)
    e340:	2001      	movs	r0, #1
    e342:	6058      	str	r0, [r3, #4]
    e344:	f5a4 4361 	sub.w	r3, r4, #57600	; 0xe100
    e348:	a801      	add	r0, sp, #4
    e34a:	428b      	cmp	r3, r1
    e34c:	bf88      	it	hi
    e34e:	4614      	movhi	r4, r2
    e350:	f7ff fbea 	bl	db28 <am_hal_clkgen_status_get>
    e354:	9b01      	ldr	r3, [sp, #4]
    e356:	1c5a      	adds	r2, r3, #1
    e358:	d02d      	beq.n	e3b6 <am_hal_tpiu_enable+0x8a>
    e35a:	08db      	lsrs	r3, r3, #3
    e35c:	fbb3 f4f4 	udiv	r4, r3, r4
    e360:	3c01      	subs	r4, #1
    e362:	b2a4      	uxth	r4, r4
    e364:	4b15      	ldr	r3, [pc, #84]	; (e3bc <am_hal_tpiu_enable+0x90>)
    e366:	4a18      	ldr	r2, [pc, #96]	; (e3c8 <am_hal_tpiu_enable+0x9c>)
    e368:	611c      	str	r4, [r3, #16]
    e36a:	2102      	movs	r1, #2
    e36c:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
    e370:	2000      	movs	r0, #0
    e372:	f240 2101 	movw	r1, #513	; 0x201
    e376:	f8c3 0f00 	str.w	r0, [r3, #3840]	; 0xf00
    e37a:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
    e37e:	f44f 7048 	mov.w	r0, #800	; 0x320
    e382:	f7ff fbef 	bl	db64 <am_hal_flash_delay>
    e386:	b004      	add	sp, #16
    e388:	bd10      	pop	{r4, pc}
    e38a:	6902      	ldr	r2, [r0, #16]
    e38c:	611a      	str	r2, [r3, #16]
    e38e:	6882      	ldr	r2, [r0, #8]
    e390:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    e394:	68c1      	ldr	r1, [r0, #12]
    e396:	2201      	movs	r2, #1
    e398:	3901      	subs	r1, #1
    e39a:	408a      	lsls	r2, r1
    e39c:	605a      	str	r2, [r3, #4]
    e39e:	f8c3 4f00 	str.w	r4, [r3, #3840]	; 0xf00
    e3a2:	4a09      	ldr	r2, [pc, #36]	; (e3c8 <am_hal_tpiu_enable+0x9c>)
    e3a4:	6843      	ldr	r3, [r0, #4]
    e3a6:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    e3aa:	f44f 7048 	mov.w	r0, #800	; 0x320
    e3ae:	f7ff fbd9 	bl	db64 <am_hal_flash_delay>
    e3b2:	b004      	add	sp, #16
    e3b4:	bd10      	pop	{r4, pc}
    e3b6:	2405      	movs	r4, #5
    e3b8:	e7d4      	b.n	e364 <am_hal_tpiu_enable+0x38>
    e3ba:	bf00      	nop
    e3bc:	e0040000 	.word	0xe0040000
    e3c0:	000f4240 	.word	0x000f4240
    e3c4:	001da380 	.word	0x001da380
    e3c8:	40020000 	.word	0x40020000

0000e3cc <am_hal_triple_read>:
    e3cc:	b412      	push	{r1, r4}
    e3ce:	f3ef 8410 	mrs	r4, PRIMASK
    e3d2:	b672      	cpsid	i
    e3d4:	6801      	ldr	r1, [r0, #0]
    e3d6:	6802      	ldr	r2, [r0, #0]
    e3d8:	6803      	ldr	r3, [r0, #0]
    e3da:	f384 8810 	msr	PRIMASK, r4
    e3de:	bc11      	pop	{r0, r4}
    e3e0:	6001      	str	r1, [r0, #0]
    e3e2:	6042      	str	r2, [r0, #4]
    e3e4:	6083      	str	r3, [r0, #8]
    e3e6:	4770      	bx	lr
    e3e8:	6c6f7041 	.word	0x6c6f7041
    e3ec:	20336f6c 	.word	0x20336f6c
    e3f0:	65756c42 	.word	0x65756c42
    e3f4:	00000000 	.word	0x00000000
    e3f8:	54207325 	.word	0x54207325
    e3fc:	6f627275 	.word	0x6f627275
    e400:	544f5053 	.word	0x544f5053
    e404:	61784520 	.word	0x61784520
    e408:	656c706d 	.word	0x656c706d
    e40c:	00000a0a 	.word	0x00000a0a
    e410:	62727554 	.word	0x62727554
    e414:	4f50536f 	.word	0x4f50536f
    e418:	6f6d2054 	.word	0x6f6d2054
    e41c:	69206564 	.word	0x69206564
    e420:	76412073 	.word	0x76412073
    e424:	616c6961 	.word	0x616c6961
    e428:	0a656c62 	.word	0x0a656c62
    e42c:	00000000 	.word	0x00000000
    e430:	7265704f 	.word	0x7265704f
    e434:	6e697461 	.word	0x6e697461
    e438:	6e692067 	.word	0x6e692067
    e43c:	726f4e20 	.word	0x726f4e20
    e440:	206c616d 	.word	0x206c616d
    e444:	65646f6d 	.word	0x65646f6d
    e448:	64252820 	.word	0x64252820
    e44c:	297a484d 	.word	0x297a484d
    e450:	0000000a 	.word	0x0000000a
    e454:	6c696146 	.word	0x6c696146
    e458:	74206465 	.word	0x74206465
    e45c:	6944206f 	.word	0x6944206f
    e460:	6c626173 	.word	0x6c626173
    e464:	75542065 	.word	0x75542065
    e468:	536f6272 	.word	0x536f6272
    e46c:	20544f50 	.word	0x20544f50
    e470:	65646f6d 	.word	0x65646f6d
    e474:	65706f20 	.word	0x65706f20
    e478:	69746172 	.word	0x69746172
    e47c:	000a6e6f 	.word	0x000a6e6f
    e480:	62727554 	.word	0x62727554
    e484:	4f50536f 	.word	0x4f50536f
    e488:	6f6d2054 	.word	0x6f6d2054
    e48c:	69206564 	.word	0x69206564
    e490:	6f4e2073 	.word	0x6f4e2073
    e494:	76412074 	.word	0x76412074
    e498:	616c6961 	.word	0x616c6961
    e49c:	0a656c62 	.word	0x0a656c62
    e4a0:	00000000 	.word	0x00000000
    e4a4:	6c696146 	.word	0x6c696146
    e4a8:	74206465 	.word	0x74206465
    e4ac:	6e49206f 	.word	0x6e49206f
    e4b0:	61697469 	.word	0x61697469
    e4b4:	657a696c 	.word	0x657a696c
    e4b8:	726f6620 	.word	0x726f6620
    e4bc:	72755420 	.word	0x72755420
    e4c0:	50536f62 	.word	0x50536f62
    e4c4:	6d20544f 	.word	0x6d20544f
    e4c8:	2065646f 	.word	0x2065646f
    e4cc:	7265706f 	.word	0x7265706f
    e4d0:	6f697461 	.word	0x6f697461
    e4d4:	00000a6e 	.word	0x00000a6e
    e4d8:	6174530a 	.word	0x6174530a
    e4dc:	64657472 	.word	0x64657472
    e4e0:	6c616320 	.word	0x6c616320
    e4e4:	616c7563 	.word	0x616c7563
    e4e8:	676e6974 	.word	0x676e6974
    e4ec:	69727020 	.word	0x69727020
    e4f0:	2073656d 	.word	0x2073656d
    e4f4:	4e206e69 	.word	0x4e206e69
    e4f8:	616d726f 	.word	0x616d726f
    e4fc:	6f4d206c 	.word	0x6f4d206c
    e500:	000a6564 	.word	0x000a6564
    e504:	6d754e0a 	.word	0x6d754e0a
    e508:	20726562 	.word	0x20726562
    e50c:	5020666f 	.word	0x5020666f
    e510:	656d6972 	.word	0x656d6972
    e514:	25203a73 	.word	0x25203a73
    e518:	00000a64 	.word	0x00000a64
    e51c:	6d726f4e 	.word	0x6d726f4e
    e520:	4d206c61 	.word	0x4d206c61
    e524:	2065646f 	.word	0x2065646f
    e528:	746c6544 	.word	0x746c6544
    e52c:	25203a61 	.word	0x25203a61
    e530:	00000a64 	.word	0x00000a64
    e534:	6f207325 	.word	0x6f207325
    e538:	61726570 	.word	0x61726570
    e53c:	676e6974 	.word	0x676e6974
    e540:	206e6920 	.word	0x206e6920
    e544:	62727554 	.word	0x62727554
    e548:	4f50536f 	.word	0x4f50536f
    e54c:	6f6d2054 	.word	0x6f6d2054
    e550:	28206564 	.word	0x28206564
    e554:	484d6425 	.word	0x484d6425
    e558:	000a297a 	.word	0x000a297a
    e55c:	6c696146 	.word	0x6c696146
    e560:	74206465 	.word	0x74206465
    e564:	6e45206f 	.word	0x6e45206f
    e568:	656c6261 	.word	0x656c6261
    e56c:	72755420 	.word	0x72755420
    e570:	50536f62 	.word	0x50536f62
    e574:	6d20544f 	.word	0x6d20544f
    e578:	2065646f 	.word	0x2065646f
    e57c:	7265706f 	.word	0x7265706f
    e580:	6f697461 	.word	0x6f697461
    e584:	00000a6e 	.word	0x00000a6e
    e588:	6174530a 	.word	0x6174530a
    e58c:	64657472 	.word	0x64657472
    e590:	6c616320 	.word	0x6c616320
    e594:	616c7563 	.word	0x616c7563
    e598:	676e6974 	.word	0x676e6974
    e59c:	69727020 	.word	0x69727020
    e5a0:	2073656d 	.word	0x2073656d
    e5a4:	54206e69 	.word	0x54206e69
    e5a8:	6f627275 	.word	0x6f627275
    e5ac:	544f5053 	.word	0x544f5053
    e5b0:	646f6d20 	.word	0x646f6d20
    e5b4:	00000a65 	.word	0x00000a65
    e5b8:	7275540a 	.word	0x7275540a
    e5bc:	50536f62 	.word	0x50536f62
    e5c0:	6d20544f 	.word	0x6d20544f
    e5c4:	2065646f 	.word	0x2065646f
    e5c8:	20746f6e 	.word	0x20746f6e
    e5cc:	69617661 	.word	0x69617661
    e5d0:	6c62616c 	.word	0x6c62616c
    e5d4:	73202c65 	.word	0x73202c65
    e5d8:	74726174 	.word	0x74726174
    e5dc:	63206465 	.word	0x63206465
    e5e0:	75636c61 	.word	0x75636c61
    e5e4:	6974616c 	.word	0x6974616c
    e5e8:	7020676e 	.word	0x7020676e
    e5ec:	656d6972 	.word	0x656d6972
    e5f0:	6e692073 	.word	0x6e692073
    e5f4:	726f4e20 	.word	0x726f4e20
    e5f8:	206c616d 	.word	0x206c616d
    e5fc:	65646f6d 	.word	0x65646f6d
    e600:	00000a2e 	.word	0x00000a2e
    e604:	66207325 	.word	0x66207325
    e608:	656c6961 	.word	0x656c6961
    e60c:	6f742064 	.word	0x6f742064
    e610:	74657220 	.word	0x74657220
    e614:	206e7275 	.word	0x206e7275
    e618:	4e206f74 	.word	0x4e206f74
    e61c:	616d726f 	.word	0x616d726f
    e620:	6f4d206c 	.word	0x6f4d206c
    e624:	28206564 	.word	0x28206564
    e628:	484d6425 	.word	0x484d6425
    e62c:	000a297a 	.word	0x000a297a
    e630:	62727554 	.word	0x62727554
    e634:	4f50536f 	.word	0x4f50536f
    e638:	6f6d2054 	.word	0x6f6d2054
    e63c:	44206564 	.word	0x44206564
    e640:	61746c65 	.word	0x61746c65
    e644:	6425203a 	.word	0x6425203a
    e648:	0000000a 	.word	0x0000000a
    e64c:	0000000a 	.word	0x0000000a
    e650:	62727554 	.word	0x62727554
    e654:	4f50536f 	.word	0x4f50536f
    e658:	6f6d2054 	.word	0x6f6d2054
    e65c:	45206564 	.word	0x45206564
    e660:	706d6178 	.word	0x706d6178
    e664:	4320656c 	.word	0x4320656c
    e668:	6c706d6f 	.word	0x6c706d6f
    e66c:	2e657465 	.word	0x2e657465
    e670:	00000000 	.word	0x00000000
    e674:	64726148 	.word	0x64726148
    e678:	75614620 	.word	0x75614620
    e67c:	7320746c 	.word	0x7320746c
    e680:	6b636174 	.word	0x6b636174
    e684:	64206465 	.word	0x64206465
    e688:	3a617461 	.word	0x3a617461
    e68c:	0000000a 	.word	0x0000000a
    e690:	20202020 	.word	0x20202020
    e694:	20203052 	.word	0x20203052
    e698:	7830203d 	.word	0x7830203d
    e69c:	58383025 	.word	0x58383025
    e6a0:	0000000a 	.word	0x0000000a
    e6a4:	20202020 	.word	0x20202020
    e6a8:	20203152 	.word	0x20203152
    e6ac:	7830203d 	.word	0x7830203d
    e6b0:	58383025 	.word	0x58383025
    e6b4:	0000000a 	.word	0x0000000a
    e6b8:	20202020 	.word	0x20202020
    e6bc:	20203252 	.word	0x20203252
    e6c0:	7830203d 	.word	0x7830203d
    e6c4:	58383025 	.word	0x58383025
    e6c8:	0000000a 	.word	0x0000000a
    e6cc:	20202020 	.word	0x20202020
    e6d0:	20203352 	.word	0x20203352
    e6d4:	7830203d 	.word	0x7830203d
    e6d8:	58383025 	.word	0x58383025
    e6dc:	0000000a 	.word	0x0000000a
    e6e0:	20202020 	.word	0x20202020
    e6e4:	20323152 	.word	0x20323152
    e6e8:	7830203d 	.word	0x7830203d
    e6ec:	58383025 	.word	0x58383025
    e6f0:	0000000a 	.word	0x0000000a
    e6f4:	20202020 	.word	0x20202020
    e6f8:	2020524c 	.word	0x2020524c
    e6fc:	7830203d 	.word	0x7830203d
    e700:	58383025 	.word	0x58383025
    e704:	0000000a 	.word	0x0000000a
    e708:	20202020 	.word	0x20202020
    e70c:	20204350 	.word	0x20204350
    e710:	7830203d 	.word	0x7830203d
    e714:	58383025 	.word	0x58383025
    e718:	0000000a 	.word	0x0000000a
    e71c:	20202020 	.word	0x20202020
    e720:	20525350 	.word	0x20525350
    e724:	7830203d 	.word	0x7830203d
    e728:	58383025 	.word	0x58383025
    e72c:	0000000a 	.word	0x0000000a
    e730:	6568744f 	.word	0x6568744f
    e734:	61482072 	.word	0x61482072
    e738:	46206472 	.word	0x46206472
    e73c:	746c7561 	.word	0x746c7561
    e740:	74616420 	.word	0x74616420
    e744:	000a3a61 	.word	0x000a3a61
    e748:	20202020 	.word	0x20202020
    e74c:	6c756146 	.word	0x6c756146
    e750:	64612074 	.word	0x64612074
    e754:	73657264 	.word	0x73657264
    e758:	203d2073 	.word	0x203d2073
    e75c:	30257830 	.word	0x30257830
    e760:	000a5838 	.word	0x000a5838
    e764:	20202020 	.word	0x20202020
    e768:	52414642 	.word	0x52414642
    e76c:	75422820 	.word	0x75422820
    e770:	61462073 	.word	0x61462073
    e774:	20746c75 	.word	0x20746c75
    e778:	72646441 	.word	0x72646441
    e77c:	67655220 	.word	0x67655220
    e780:	203d2029 	.word	0x203d2029
    e784:	30257830 	.word	0x30257830
    e788:	000a5838 	.word	0x000a5838
    e78c:	20202020 	.word	0x20202020
    e790:	52534d4d 	.word	0x52534d4d
    e794:	654d2820 	.word	0x654d2820
    e798:	674d206d 	.word	0x674d206d
    e79c:	4620746d 	.word	0x4620746d
    e7a0:	746c7561 	.word	0x746c7561
    e7a4:	61745320 	.word	0x61745320
    e7a8:	20737574 	.word	0x20737574
    e7ac:	29676552 	.word	0x29676552
    e7b0:	30203d20 	.word	0x30203d20
    e7b4:	32302578 	.word	0x32302578
    e7b8:	00000a58 	.word	0x00000a58
    e7bc:	20202020 	.word	0x20202020
    e7c0:	52534642 	.word	0x52534642
    e7c4:	75422820 	.word	0x75422820
    e7c8:	61462073 	.word	0x61462073
    e7cc:	20746c75 	.word	0x20746c75
    e7d0:	74617453 	.word	0x74617453
    e7d4:	52207375 	.word	0x52207375
    e7d8:	20296765 	.word	0x20296765
    e7dc:	7830203d 	.word	0x7830203d
    e7e0:	58323025 	.word	0x58323025
    e7e4:	0000000a 	.word	0x0000000a
    e7e8:	20202020 	.word	0x20202020
    e7ec:	52534655 	.word	0x52534655
    e7f0:	73552820 	.word	0x73552820
    e7f4:	20656761 	.word	0x20656761
    e7f8:	6c756146 	.word	0x6c756146
    e7fc:	74532074 	.word	0x74532074
    e800:	73757461 	.word	0x73757461
    e804:	67655220 	.word	0x67655220
    e808:	203d2029 	.word	0x203d2029
    e80c:	30257830 	.word	0x30257830
    e810:	000a5834 	.word	0x000a5834
    e814:	20202020 	.word	0x20202020
    e818:	20202020 	.word	0x20202020
    e81c:	52534642 	.word	0x52534642
    e820:	74696220 	.word	0x74696220
    e824:	42203a37 	.word	0x42203a37
    e828:	56524146 	.word	0x56524146
    e82c:	44494c41 	.word	0x44494c41
    e830:	0000000a 	.word	0x0000000a
    e834:	20202020 	.word	0x20202020
    e838:	20202020 	.word	0x20202020
    e83c:	52534642 	.word	0x52534642
    e840:	74696220 	.word	0x74696220
    e844:	52203a36 	.word	0x52203a36
    e848:	52455345 	.word	0x52455345
    e84c:	0a444556 	.word	0x0a444556
    e850:	00000000 	.word	0x00000000
    e854:	20202020 	.word	0x20202020
    e858:	20202020 	.word	0x20202020
    e85c:	52534642 	.word	0x52534642
    e860:	74696220 	.word	0x74696220
    e864:	4c203a35 	.word	0x4c203a35
    e868:	52455053 	.word	0x52455053
    e86c:	00000a52 	.word	0x00000a52
    e870:	20202020 	.word	0x20202020
    e874:	20202020 	.word	0x20202020
    e878:	52534642 	.word	0x52534642
    e87c:	74696220 	.word	0x74696220
    e880:	53203a34 	.word	0x53203a34
    e884:	52454b54 	.word	0x52454b54
    e888:	00000a52 	.word	0x00000a52
    e88c:	20202020 	.word	0x20202020
    e890:	20202020 	.word	0x20202020
    e894:	52534642 	.word	0x52534642
    e898:	74696220 	.word	0x74696220
    e89c:	55203a33 	.word	0x55203a33
    e8a0:	4b54534e 	.word	0x4b54534e
    e8a4:	0a525245 	.word	0x0a525245
    e8a8:	00000000 	.word	0x00000000
    e8ac:	20202020 	.word	0x20202020
    e8b0:	20202020 	.word	0x20202020
    e8b4:	52534642 	.word	0x52534642
    e8b8:	74696220 	.word	0x74696220
    e8bc:	49203a32 	.word	0x49203a32
    e8c0:	4552504d 	.word	0x4552504d
    e8c4:	45534943 	.word	0x45534943
    e8c8:	000a5252 	.word	0x000a5252
    e8cc:	20202020 	.word	0x20202020
    e8d0:	20202020 	.word	0x20202020
    e8d4:	52534642 	.word	0x52534642
    e8d8:	74696220 	.word	0x74696220
    e8dc:	50203a31 	.word	0x50203a31
    e8e0:	49434552 	.word	0x49434552
    e8e4:	52454553 	.word	0x52454553
    e8e8:	00000a52 	.word	0x00000a52
    e8ec:	20202020 	.word	0x20202020
    e8f0:	20202020 	.word	0x20202020
    e8f4:	52534642 	.word	0x52534642
    e8f8:	74696220 	.word	0x74696220
    e8fc:	49203a30 	.word	0x49203a30
    e900:	45535542 	.word	0x45535542
    e904:	000a5252 	.word	0x000a5252
    e908:	2055434d 	.word	0x2055434d
    e90c:	6c756146 	.word	0x6c756146
    e910:	61642074 	.word	0x61642074
    e914:	0a3a6174 	.word	0x0a3a6174
    e918:	00000000 	.word	0x00000000
    e91c:	49202020 	.word	0x49202020
    e920:	45444f43 	.word	0x45444f43
    e924:	75614620 	.word	0x75614620
    e928:	4120746c 	.word	0x4120746c
    e92c:	65726464 	.word	0x65726464
    e930:	203a7373 	.word	0x203a7373
    e934:	30257830 	.word	0x30257830
    e938:	000a5838 	.word	0x000a5838
    e93c:	44202020 	.word	0x44202020
    e940:	45444f43 	.word	0x45444f43
    e944:	75614620 	.word	0x75614620
    e948:	4120746c 	.word	0x4120746c
    e94c:	65726464 	.word	0x65726464
    e950:	203a7373 	.word	0x203a7373
    e954:	30257830 	.word	0x30257830
    e958:	000a5838 	.word	0x000a5838
    e95c:	53202020 	.word	0x53202020
    e960:	46205359 	.word	0x46205359
    e964:	746c7561 	.word	0x746c7561
    e968:	64644120 	.word	0x64644120
    e96c:	73736572 	.word	0x73736572
    e970:	7830203a 	.word	0x7830203a
    e974:	58383025 	.word	0x58383025
    e978:	0000000a 	.word	0x0000000a
    e97c:	0a0a0a0a 	.word	0x0a0a0a0a
    e980:	0a0a0a0a 	.word	0x0a0a0a0a
    e984:	0a0a0a0a 	.word	0x0a0a0a0a
    e988:	0a0a0a0a 	.word	0x0a0a0a0a
    e98c:	00000a0a 	.word	0x00000a0a

0000e990 <g_AM_BSP_GPIO_ITM_SWO>:
    e990:	00000002                                ....

0000e994 <am_hal_cachectrl_defaults>:
    e994:	00000308                                ....

0000e998 <g_AM_HAL_GPIO_DISABLE>:
    e998:	00000003                                ....

0000e99c <g_AM_HAL_GPIO_OUTPUT>:
    e99c:	00000403                                ....

0000e9a0 <g_ui8Bit76Capabilities>:
    e9a0:	02800101 80010180 80800101 80808080     ................
    e9b0:	80808080 80808008 01800180 80808080     ................
    e9c0:	80808080 01800402 01010401 80808080     ................
    e9d0:	00000101                                ....

0000e9d4 <g_ui8Inpen>:
    e9d4:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
    e9e4:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
    e9f4:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
    ea04:	00003130                                01..

0000ea08 <g_ui8NCEtable>:
    ea08:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    ea18:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    ea28:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    ea38:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    ea48:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    ea58:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    ea68:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    ea78:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    ea88:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    ea98:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    eaa8:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    eab8:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    eac8:	32221202 43231303                       .."2..#C

0000ead0 <g_ui8nCEpins>:
    ead0:	02070707 00080802 01020202 01010101     ................
    eae0:	01010101 01010101 01010101 01010101     ................
    eaf0:	01010101 08010101 01010008 01010101     ................
    eb00:	00000101                                ....

0000eb04 <g_am_hal_mcuctrl_flash_size>:
    eb04:	00004000 00008000 00010000 00020000     .@..............
    eb14:	00040000 00080000 00100000 00200000     .............. .
    eb24:	00180000 00000000 00000000 00000000     ................
	...

0000eb44 <g_am_hal_mcuctrl_sram_size>:
    eb44:	00004000 00008000 00010000 00020000     .@..............
    eb54:	00040000 00080000 00100000 00060000     ................
    eb64:	000c0000 00000000 00000000 00000000     ................
	...
