
bin/deepsleep.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 69 d0 00 00 d1 d0 00 00 fd c1 00 00     ....i...........
    c010:	d3 d0 00 00 d3 d0 00 00 d3 d0 00 00 00 00 00 00     ................
	...
    c02c:	d5 d0 00 00 d5 d0 00 00 00 00 00 00 d5 d0 00 00     ................
    c03c:	d5 d0 00 00 d5 d0 00 00 d5 d0 00 00 d5 d0 00 00     ................
    c04c:	d5 d0 00 00 d5 d0 00 00 d5 d0 00 00 d5 d0 00 00     ................
    c05c:	d5 d0 00 00 d5 d0 00 00 d5 d0 00 00 d5 d0 00 00     ................
    c06c:	d5 d0 00 00 d5 d0 00 00 d5 d0 00 00 d5 d0 00 00     ................
    c07c:	d5 d0 00 00 d5 d0 00 00 d5 d0 00 00 d5 d0 00 00     ................
    c08c:	d5 d0 00 00 d5 d0 00 00 d5 d0 00 00 d5 d0 00 00     ................
    c09c:	d5 d0 00 00 d5 d0 00 00 d5 d0 00 00 d5 d0 00 00     ................
    c0ac:	d5 d0 00 00 d5 d0 00 00 d5 d0 00 00 d5 d0 00 00     ................
    c0bc:	d5 d0 00 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
    c1a0:	b508      	push	{r3, lr}
    //
    // Set the clock frequency.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c1a2:	2100      	movs	r1, #0
    c1a4:	2000      	movs	r0, #0
    c1a6:	f001 f9d5 	bl	d554 <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c1aa:	4812      	ldr	r0, [pc, #72]	; (c1f4 <main+0x54>)
    c1ac:	f001 f82a 	bl	d204 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c1b0:	f001 f84c 	bl	d24c <am_hal_cachectrl_enable>

    //
    // Initialize the printf interface for UART output.
    //
    am_bsp_uart_printf_enable();
    c1b4:	f000 ffd6 	bl	d164 <am_bsp_uart_printf_enable>

    //
    // Print the banner.
    //
    am_util_stdio_terminal_clear();
    c1b8:	f000 ff4e 	bl	d058 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Deepsleep Example\n");
    c1bc:	480e      	ldr	r0, [pc, #56]	; (c1f8 <main+0x58>)
    c1be:	f000 ff2b 	bl	d018 <am_util_stdio_printf>

    //
    // To minimize power during the run, disable the UART.
    //
    am_bsp_uart_printf_disable();
    c1c2:	f000 fffd 	bl	d1c0 <am_bsp_uart_printf_disable>

    //
    // Configure the board for low power.
    //
    am_bsp_low_power_init();
    c1c6:	f000 ffad 	bl	d124 <am_bsp_low_power_init>

#if defined(AM_PART_APOLLO3) || defined(AM_PART_APOLLO3P)
    //
    // Turn OFF unneeded flash
    //
    if ( am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEM_FLASH_MIN) )
    c1ca:	200e      	movs	r0, #14
    c1cc:	f001 fd22 	bl	dc14 <am_hal_pwrctrl_memory_enable>
    c1d0:	4603      	mov	r3, r0
    c1d2:	2b00      	cmp	r3, #0
    c1d4:	d000      	beq.n	c1d8 <main+0x38>
    {
        while(1);
    c1d6:	e7fe      	b.n	c1d6 <main+0x36>
    }

    // For optimal Deep Sleep current, configure cache to be powered-down in deepsleep:
    am_hal_pwrctrl_memory_deepsleep_powerdown(AM_HAL_PWRCTRL_MEM_CACHE);
    c1d8:	2010      	movs	r0, #16
    c1da:	f001 fd67 	bl	dcac <am_hal_pwrctrl_memory_deepsleep_powerdown>

    //
    // Power down SRAM, only 32K SRAM retained
    //
    am_hal_pwrctrl_memory_deepsleep_powerdown(AM_HAL_PWRCTRL_MEM_SRAM_MAX);
    c1de:	200d      	movs	r0, #13
    c1e0:	f001 fd64 	bl	dcac <am_hal_pwrctrl_memory_deepsleep_powerdown>
    am_hal_pwrctrl_memory_deepsleep_retain(AM_HAL_PWRCTRL_MEM_SRAM_32K_DTCM);
    c1e4:	2002      	movs	r0, #2
    c1e6:	f001 fd75 	bl	dcd4 <am_hal_pwrctrl_memory_deepsleep_retain>
    while (1)
    {
        //
        // Go to Deep Sleep and stay there.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c1ea:	2001      	movs	r0, #1
    c1ec:	f001 fe70 	bl	ded0 <am_hal_sysctrl_sleep>
    c1f0:	e7fb      	b.n	c1ea <main+0x4a>
    c1f2:	bf00      	nop
    c1f4:	0000e85c 	.word	0x0000e85c
    c1f8:	0000e804 	.word	0x0000e804

0000c1fc <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    c1fc:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    c1fe:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    c202:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    c204:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    c208:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    c20c:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c210:	f000 f80a 	bl	c228 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    c214:	bd01      	pop	{r0, pc}
}
    c216:	bf00      	nop
    c218:	4618      	mov	r0, r3

0000c21a <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c21a:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c21c:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c21e:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c220:	4770      	bx	lr
}
    c222:	bf00      	nop
    c224:	4618      	mov	r0, r3
	...

0000c228 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c228:	b500      	push	{lr}
    c22a:	b097      	sub	sp, #92	; 0x5c
    c22c:	9001      	str	r0, [sp, #4]
    volatile am_fault_t sFaultData;
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_t  sHalFaultData = {0};
#else
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c22e:	ab03      	add	r3, sp, #12
    c230:	2200      	movs	r2, #0
    c232:	601a      	str	r2, [r3, #0]
    c234:	605a      	str	r2, [r3, #4]
    c236:	609a      	str	r2, [r3, #8]
    c238:	60da      	str	r2, [r3, #12]
    c23a:	611a      	str	r2, [r3, #16]
    c23c:	615a      	str	r2, [r3, #20]
#endif // if defined(AM_PART_APOLLO4)

    uint32_t u32Mask = 0;
    c23e:	2300      	movs	r3, #0
    c240:	9315      	str	r3, [sp, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c242:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c244:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c246:	4b2e      	ldr	r3, [pc, #184]	; (c300 <am_util_faultisr_collect_data+0xd8>)
    c248:	681b      	ldr	r3, [r3, #0]
    c24a:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c24c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c24e:	b2db      	uxtb	r3, r3
    c250:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c254:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c256:	0a1b      	lsrs	r3, r3, #8
    c258:	b2db      	uxtb	r3, r3
    c25a:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c25e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c260:	0c1b      	lsrs	r3, r3, #16
    c262:	b29b      	uxth	r3, r3
    c264:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c268:	4b26      	ldr	r3, [pc, #152]	; (c304 <am_util_faultisr_collect_data+0xdc>)
    c26a:	681b      	ldr	r3, [r3, #0]
    c26c:	9312      	str	r3, [sp, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c26e:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
    c272:	b2db      	uxtb	r3, r3
    c274:	f003 0302 	and.w	r3, r3, #2
    c278:	2b00      	cmp	r3, #0
    c27a:	d005      	beq.n	c288 <am_util_faultisr_collect_data+0x60>
    c27c:	9901      	ldr	r1, [sp, #4]
    c27e:	2006      	movs	r0, #6
    c280:	f7ff ffcb 	bl	c21a <getStackedReg>
    c284:	4603      	mov	r3, r0
    c286:	e001      	b.n	c28c <am_util_faultisr_collect_data+0x64>
    c288:	f04f 33ff 	mov.w	r3, #4294967295
    c28c:	9311      	str	r3, [sp, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c28e:	9901      	ldr	r1, [sp, #4]
    c290:	2000      	movs	r0, #0
    c292:	f7ff ffc2 	bl	c21a <getStackedReg>
    c296:	4603      	mov	r3, r0
    c298:	9309      	str	r3, [sp, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c29a:	9901      	ldr	r1, [sp, #4]
    c29c:	2001      	movs	r0, #1
    c29e:	f7ff ffbc 	bl	c21a <getStackedReg>
    c2a2:	4603      	mov	r3, r0
    c2a4:	930a      	str	r3, [sp, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c2a6:	9901      	ldr	r1, [sp, #4]
    c2a8:	2002      	movs	r0, #2
    c2aa:	f7ff ffb6 	bl	c21a <getStackedReg>
    c2ae:	4603      	mov	r3, r0
    c2b0:	930b      	str	r3, [sp, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c2b2:	9901      	ldr	r1, [sp, #4]
    c2b4:	2003      	movs	r0, #3
    c2b6:	f7ff ffb0 	bl	c21a <getStackedReg>
    c2ba:	4603      	mov	r3, r0
    c2bc:	930c      	str	r3, [sp, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c2be:	9901      	ldr	r1, [sp, #4]
    c2c0:	2004      	movs	r0, #4
    c2c2:	f7ff ffaa 	bl	c21a <getStackedReg>
    c2c6:	4603      	mov	r3, r0
    c2c8:	930d      	str	r3, [sp, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c2ca:	9901      	ldr	r1, [sp, #4]
    c2cc:	2005      	movs	r0, #5
    c2ce:	f7ff ffa4 	bl	c21a <getStackedReg>
    c2d2:	4603      	mov	r3, r0
    c2d4:	930e      	str	r3, [sp, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c2d6:	9901      	ldr	r1, [sp, #4]
    c2d8:	2006      	movs	r0, #6
    c2da:	f7ff ff9e 	bl	c21a <getStackedReg>
    c2de:	4603      	mov	r3, r0
    c2e0:	930f      	str	r3, [sp, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c2e2:	9901      	ldr	r1, [sp, #4]
    c2e4:	2007      	movs	r0, #7
    c2e6:	f7ff ff98 	bl	c21a <getStackedReg>
    c2ea:	4603      	mov	r3, r0
    c2ec:	9310      	str	r3, [sp, #64]	; 0x40
    //
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_get(&sHalFaultData);
#else
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c2ee:	ab03      	add	r3, sp, #12
    c2f0:	4619      	mov	r1, r3
    c2f2:	2002      	movs	r0, #2
    c2f4:	f001 fb9c 	bl	da30 <am_hal_mcuctrl_info_get>
      am_util_stdio_printf("   SYS Fault Address: 0x%08X\n", sHalFaultData.ui32SYS);
    }

#endif

    u32Mask = 0;
    c2f8:	2300      	movs	r3, #0
    c2fa:	9315      	str	r3, [sp, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    c2fc:	e7fe      	b.n	c2fc <am_util_faultisr_collect_data+0xd4>
    c2fe:	bf00      	nop
    c300:	e000ed28 	.word	0xe000ed28
    c304:	e000ed38 	.word	0xe000ed38

0000c308 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    c308:	b082      	sub	sp, #8
    c30a:	9001      	str	r0, [sp, #4]
    g_pfnCharPrint = pfnCharPrint;
    c30c:	4a02      	ldr	r2, [pc, #8]	; (c318 <am_util_stdio_printf_init+0x10>)
    c30e:	9b01      	ldr	r3, [sp, #4]
    c310:	6013      	str	r3, [r2, #0]
}
    c312:	bf00      	nop
    c314:	b002      	add	sp, #8
    c316:	4770      	bx	lr
    c318:	10001034 	.word	0x10001034

0000c31c <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c31c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c320:	b098      	sub	sp, #96	; 0x60
    c322:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c326:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c32a:	f04f 0000 	mov.w	r0, #0
    c32e:	f04f 0100 	mov.w	r1, #0
    c332:	0018      	movs	r0, r3
    c334:	2100      	movs	r1, #0
    c336:	ea50 0301 	orrs.w	r3, r0, r1
    c33a:	f000 80b0 	beq.w	c49e <divu64_10+0x182>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c33e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c342:	f04f 0400 	mov.w	r4, #0
    c346:	f04f 0500 	mov.w	r5, #0
    c34a:	0854      	lsrs	r4, r2, #1
    c34c:	ea44 74c3 	orr.w	r4, r4, r3, lsl #31
    c350:	085d      	lsrs	r5, r3, #1
    c352:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c356:	f04f 0000 	mov.w	r0, #0
    c35a:	f04f 0100 	mov.w	r1, #0
    c35e:	0890      	lsrs	r0, r2, #2
    c360:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
    c364:	0899      	lsrs	r1, r3, #2
    c366:	eb14 0a00 	adds.w	sl, r4, r0
    c36a:	eb45 0b01 	adc.w	fp, r5, r1
    c36e:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
        q64 += (q64 >> 4);
    c372:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c376:	f04f 0000 	mov.w	r0, #0
    c37a:	f04f 0100 	mov.w	r1, #0
    c37e:	0910      	lsrs	r0, r2, #4
    c380:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
    c384:	0919      	lsrs	r1, r3, #4
    c386:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c38a:	1814      	adds	r4, r2, r0
    c38c:	9402      	str	r4, [sp, #8]
    c38e:	414b      	adcs	r3, r1
    c390:	9303      	str	r3, [sp, #12]
    c392:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    c396:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 8);
    c39a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c39e:	f04f 0000 	mov.w	r0, #0
    c3a2:	f04f 0100 	mov.w	r1, #0
    c3a6:	0a10      	lsrs	r0, r2, #8
    c3a8:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
    c3ac:	0a19      	lsrs	r1, r3, #8
    c3ae:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c3b2:	1814      	adds	r4, r2, r0
    c3b4:	9404      	str	r4, [sp, #16]
    c3b6:	414b      	adcs	r3, r1
    c3b8:	9305      	str	r3, [sp, #20]
    c3ba:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    c3be:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 16);
    c3c2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c3c6:	f04f 0000 	mov.w	r0, #0
    c3ca:	f04f 0100 	mov.w	r1, #0
    c3ce:	0c10      	lsrs	r0, r2, #16
    c3d0:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    c3d4:	0c19      	lsrs	r1, r3, #16
    c3d6:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c3da:	1814      	adds	r4, r2, r0
    c3dc:	9406      	str	r4, [sp, #24]
    c3de:	414b      	adcs	r3, r1
    c3e0:	9307      	str	r3, [sp, #28]
    c3e2:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
    c3e6:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 32);
    c3ea:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c3ee:	f04f 0000 	mov.w	r0, #0
    c3f2:	f04f 0100 	mov.w	r1, #0
    c3f6:	0018      	movs	r0, r3
    c3f8:	2100      	movs	r1, #0
    c3fa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c3fe:	1814      	adds	r4, r2, r0
    c400:	9408      	str	r4, [sp, #32]
    c402:	414b      	adcs	r3, r1
    c404:	9309      	str	r3, [sp, #36]	; 0x24
    c406:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
    c40a:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 >>= 3;
    c40e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    c412:	f04f 0200 	mov.w	r2, #0
    c416:	f04f 0300 	mov.w	r3, #0
    c41a:	08c2      	lsrs	r2, r0, #3
    c41c:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    c420:	08cb      	lsrs	r3, r1, #3
    c422:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
        r64 = ui64Val - q64*10;
    c426:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
    c42a:	4622      	mov	r2, r4
    c42c:	462b      	mov	r3, r5
    c42e:	f04f 0000 	mov.w	r0, #0
    c432:	f04f 0100 	mov.w	r1, #0
    c436:	0099      	lsls	r1, r3, #2
    c438:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
    c43c:	0090      	lsls	r0, r2, #2
    c43e:	4602      	mov	r2, r0
    c440:	460b      	mov	r3, r1
    c442:	1916      	adds	r6, r2, r4
    c444:	eb43 0705 	adc.w	r7, r3, r5
    c448:	19b3      	adds	r3, r6, r6
    c44a:	930a      	str	r3, [sp, #40]	; 0x28
    c44c:	eb47 0307 	adc.w	r3, r7, r7
    c450:	930b      	str	r3, [sp, #44]	; 0x2c
    c452:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    c456:	4630      	mov	r0, r6
    c458:	4639      	mov	r1, r7
    c45a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c45e:	1a14      	subs	r4, r2, r0
    c460:	940c      	str	r4, [sp, #48]	; 0x30
    c462:	eb63 0301 	sbc.w	r3, r3, r1
    c466:	930d      	str	r3, [sp, #52]	; 0x34
    c468:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    c46c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
        return q64 + ((r64 + 6) >> 4);
    c470:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    c474:	f112 0806 	adds.w	r8, r2, #6
    c478:	f143 0900 	adc.w	r9, r3, #0
    c47c:	f04f 0200 	mov.w	r2, #0
    c480:	f04f 0300 	mov.w	r3, #0
    c484:	ea4f 1218 	mov.w	r2, r8, lsr #4
    c488:	ea42 7209 	orr.w	r2, r2, r9, lsl #28
    c48c:	ea4f 1319 	mov.w	r3, r9, lsr #4
    c490:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    c494:	1814      	adds	r4, r2, r0
    c496:	9400      	str	r4, [sp, #0]
    c498:	414b      	adcs	r3, r1
    c49a:	9301      	str	r3, [sp, #4]
    c49c:	e02a      	b.n	c4f4 <divu64_10+0x1d8>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    c49e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c4a0:	9317      	str	r3, [sp, #92]	; 0x5c
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c4a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c4a4:	085a      	lsrs	r2, r3, #1
    c4a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c4a8:	089b      	lsrs	r3, r3, #2
    c4aa:	4413      	add	r3, r2
    c4ac:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 4);
    c4ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c4b0:	091b      	lsrs	r3, r3, #4
    c4b2:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c4b4:	4413      	add	r3, r2
    c4b6:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 8);
    c4b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c4ba:	0a1b      	lsrs	r3, r3, #8
    c4bc:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c4be:	4413      	add	r3, r2
    c4c0:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 16);
    c4c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c4c4:	0c1b      	lsrs	r3, r3, #16
    c4c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c4c8:	4413      	add	r3, r2
    c4ca:	9316      	str	r3, [sp, #88]	; 0x58
        q32 >>= 3;
    c4cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c4ce:	08db      	lsrs	r3, r3, #3
    c4d0:	9316      	str	r3, [sp, #88]	; 0x58
        r32 = ui32Val - q32*10;
    c4d2:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c4d4:	4613      	mov	r3, r2
    c4d6:	009b      	lsls	r3, r3, #2
    c4d8:	4413      	add	r3, r2
    c4da:	005b      	lsls	r3, r3, #1
    c4dc:	461a      	mov	r2, r3
    c4de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c4e0:	1a9b      	subs	r3, r3, r2
    c4e2:	9315      	str	r3, [sp, #84]	; 0x54
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c4e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c4e6:	3306      	adds	r3, #6
    c4e8:	091a      	lsrs	r2, r3, #4
    c4ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c4ec:	4413      	add	r3, r2
    c4ee:	2200      	movs	r2, #0
    c4f0:	9300      	str	r3, [sp, #0]
    c4f2:	9201      	str	r2, [sp, #4]
    }
}
    c4f4:	e9dd 2300 	ldrd	r2, r3, [sp]
    c4f8:	4610      	mov	r0, r2
    c4fa:	4619      	mov	r1, r3
    c4fc:	b018      	add	sp, #96	; 0x60
    c4fe:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c502:	4770      	bx	lr

0000c504 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    c504:	b500      	push	{lr}
    c506:	b085      	sub	sp, #20
    c508:	e9cd 0100 	strd	r0, r1, [sp]
    int iNDigits = ui64Val ? 0 : 1;
    c50c:	9a00      	ldr	r2, [sp, #0]
    c50e:	9b01      	ldr	r3, [sp, #4]
    c510:	4313      	orrs	r3, r2
    c512:	2b00      	cmp	r3, #0
    c514:	bf0c      	ite	eq
    c516:	2301      	moveq	r3, #1
    c518:	2300      	movne	r3, #0
    c51a:	b2db      	uxtb	r3, r3
    c51c:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    c51e:	e008      	b.n	c532 <ndigits_in_u64+0x2e>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    c520:	e9dd 0100 	ldrd	r0, r1, [sp]
    c524:	f7ff fefa 	bl	c31c <divu64_10>
    c528:	e9cd 0100 	strd	r0, r1, [sp]
        ++iNDigits;
    c52c:	9b03      	ldr	r3, [sp, #12]
    c52e:	3301      	adds	r3, #1
    c530:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    c532:	e9dd 2300 	ldrd	r2, r3, [sp]
    c536:	4313      	orrs	r3, r2
    c538:	d1f2      	bne.n	c520 <ndigits_in_u64+0x1c>
    }

    return iNDigits;
    c53a:	9b03      	ldr	r3, [sp, #12]
}
    c53c:	4618      	mov	r0, r3
    c53e:	b005      	add	sp, #20
    c540:	f85d fb04 	ldr.w	pc, [sp], #4

0000c544 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    c544:	b530      	push	{r4, r5, lr}
    c546:	b083      	sub	sp, #12
    c548:	e9cd 0100 	strd	r0, r1, [sp]
    if ( i64Val < 0 )
    c54c:	e9dd 2300 	ldrd	r2, r3, [sp]
    c550:	2b00      	cmp	r3, #0
    c552:	da07      	bge.n	c564 <ndigits_in_i64+0x20>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    c554:	e9dd 2300 	ldrd	r2, r3, [sp]
    c558:	2100      	movs	r1, #0
    c55a:	4254      	negs	r4, r2
    c55c:	eb61 0503 	sbc.w	r5, r1, r3
    c560:	e9cd 4500 	strd	r4, r5, [sp]
    }

    return ndigits_in_u64((uint64_t) i64Val);
    c564:	e9dd 2300 	ldrd	r2, r3, [sp]
    c568:	4610      	mov	r0, r2
    c56a:	4619      	mov	r1, r3
    c56c:	f7ff ffca 	bl	c504 <ndigits_in_u64>
    c570:	4603      	mov	r3, r0
}
    c572:	4618      	mov	r0, r3
    c574:	b003      	add	sp, #12
    c576:	bd30      	pop	{r4, r5, pc}

0000c578 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    c578:	b084      	sub	sp, #16
    c57a:	e9cd 0100 	strd	r0, r1, [sp]
    int iDigits = ui64Val ? 0 : 1;
    c57e:	9a00      	ldr	r2, [sp, #0]
    c580:	9b01      	ldr	r3, [sp, #4]
    c582:	4313      	orrs	r3, r2
    c584:	2b00      	cmp	r3, #0
    c586:	bf0c      	ite	eq
    c588:	2301      	moveq	r3, #1
    c58a:	2300      	movne	r3, #0
    c58c:	b2db      	uxtb	r3, r3
    c58e:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    c590:	e00e      	b.n	c5b0 <ndigits_in_hex+0x38>
    {
        ui64Val >>= 4;
    c592:	e9dd 0100 	ldrd	r0, r1, [sp]
    c596:	f04f 0200 	mov.w	r2, #0
    c59a:	f04f 0300 	mov.w	r3, #0
    c59e:	0902      	lsrs	r2, r0, #4
    c5a0:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    c5a4:	090b      	lsrs	r3, r1, #4
    c5a6:	e9cd 2300 	strd	r2, r3, [sp]
        ++iDigits;
    c5aa:	9b03      	ldr	r3, [sp, #12]
    c5ac:	3301      	adds	r3, #1
    c5ae:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    c5b0:	e9dd 2300 	ldrd	r2, r3, [sp]
    c5b4:	4313      	orrs	r3, r2
    c5b6:	d1ec      	bne.n	c592 <ndigits_in_hex+0x1a>
    }

    return iDigits;
    c5b8:	9b03      	ldr	r3, [sp, #12]
}
    c5ba:	4618      	mov	r0, r3
    c5bc:	b004      	add	sp, #16
    c5be:	4770      	bx	lr

0000c5c0 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    c5c0:	b086      	sub	sp, #24
    c5c2:	9001      	str	r0, [sp, #4]
    c5c4:	9100      	str	r1, [sp, #0]
    bool bNeg = false;
    c5c6:	2300      	movs	r3, #0
    c5c8:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    c5cc:	2300      	movs	r3, #0
    c5ce:	9304      	str	r3, [sp, #16]
    c5d0:	2300      	movs	r3, #0
    c5d2:	9303      	str	r3, [sp, #12]

    if ( *pcStr == '-')
    c5d4:	9b01      	ldr	r3, [sp, #4]
    c5d6:	781b      	ldrb	r3, [r3, #0]
    c5d8:	2b2d      	cmp	r3, #45	; 0x2d
    c5da:	d11c      	bne.n	c616 <decstr_to_int+0x56>
    {
        bNeg = true;
    c5dc:	2301      	movs	r3, #1
    c5de:	f88d 3017 	strb.w	r3, [sp, #23]
        pcStr++;
    c5e2:	9b01      	ldr	r3, [sp, #4]
    c5e4:	3301      	adds	r3, #1
    c5e6:	9301      	str	r3, [sp, #4]
        uCnt++;
    c5e8:	9b03      	ldr	r3, [sp, #12]
    c5ea:	3301      	adds	r3, #1
    c5ec:	9303      	str	r3, [sp, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c5ee:	e012      	b.n	c616 <decstr_to_int+0x56>
    {
        ++uCnt;
    c5f0:	9b03      	ldr	r3, [sp, #12]
    c5f2:	3301      	adds	r3, #1
    c5f4:	9303      	str	r3, [sp, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    c5f6:	9a04      	ldr	r2, [sp, #16]
    c5f8:	4613      	mov	r3, r2
    c5fa:	009b      	lsls	r3, r3, #2
    c5fc:	4413      	add	r3, r2
    c5fe:	005b      	lsls	r3, r3, #1
    c600:	9304      	str	r3, [sp, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    c602:	9b01      	ldr	r3, [sp, #4]
    c604:	781b      	ldrb	r3, [r3, #0]
    c606:	461a      	mov	r2, r3
    c608:	9b04      	ldr	r3, [sp, #16]
    c60a:	4413      	add	r3, r2
    c60c:	3b30      	subs	r3, #48	; 0x30
    c60e:	9304      	str	r3, [sp, #16]
        pcStr++;
    c610:	9b01      	ldr	r3, [sp, #4]
    c612:	3301      	adds	r3, #1
    c614:	9301      	str	r3, [sp, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c616:	9b01      	ldr	r3, [sp, #4]
    c618:	781b      	ldrb	r3, [r3, #0]
    c61a:	2b2f      	cmp	r3, #47	; 0x2f
    c61c:	d903      	bls.n	c626 <decstr_to_int+0x66>
    c61e:	9b01      	ldr	r3, [sp, #4]
    c620:	781b      	ldrb	r3, [r3, #0]
    c622:	2b39      	cmp	r3, #57	; 0x39
    c624:	d9e4      	bls.n	c5f0 <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    c626:	9b00      	ldr	r3, [sp, #0]
    c628:	2b00      	cmp	r3, #0
    c62a:	d002      	beq.n	c632 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    c62c:	9b00      	ldr	r3, [sp, #0]
    c62e:	9a03      	ldr	r2, [sp, #12]
    c630:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    c632:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c636:	2b00      	cmp	r3, #0
    c638:	d002      	beq.n	c640 <decstr_to_int+0x80>
    c63a:	9b04      	ldr	r3, [sp, #16]
    c63c:	425b      	negs	r3, r3
    c63e:	e000      	b.n	c642 <decstr_to_int+0x82>
    c640:	9b04      	ldr	r3, [sp, #16]
}
    c642:	4618      	mov	r0, r3
    c644:	b006      	add	sp, #24
    c646:	4770      	bx	lr

0000c648 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c648:	b500      	push	{lr}
    c64a:	b091      	sub	sp, #68	; 0x44
    c64c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    c650:	9201      	str	r2, [sp, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    c652:	2300      	movs	r3, #0
    c654:	930f      	str	r3, [sp, #60]	; 0x3c
    c656:	2300      	movs	r3, #0
    c658:	930e      	str	r3, [sp, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    c65a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c65e:	f7ff fe5d 	bl	c31c <divu64_10>
    c662:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    c666:	9902      	ldr	r1, [sp, #8]
    c668:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c66a:	4613      	mov	r3, r2
    c66c:	009b      	lsls	r3, r3, #2
    c66e:	4413      	add	r3, r2
    c670:	005b      	lsls	r3, r3, #1
    c672:	1acb      	subs	r3, r1, r3
    c674:	930b      	str	r3, [sp, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    c676:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c678:	b2da      	uxtb	r2, r3
    c67a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c67c:	1c59      	adds	r1, r3, #1
    c67e:	910f      	str	r1, [sp, #60]	; 0x3c
    c680:	3230      	adds	r2, #48	; 0x30
    c682:	b2d2      	uxtb	r2, r2
    c684:	3340      	adds	r3, #64	; 0x40
    c686:	446b      	add	r3, sp
    c688:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    c68c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    c690:	e9cd 2302 	strd	r2, r3, [sp, #8]
    } while ( ui64Val );
    c694:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c698:	4313      	orrs	r3, r2
    c69a:	d1de      	bne.n	c65a <uint64_to_str+0x12>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    c69c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c69e:	930e      	str	r3, [sp, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c6a0:	9b01      	ldr	r3, [sp, #4]
    c6a2:	2b00      	cmp	r3, #0
    c6a4:	d010      	beq.n	c6c8 <uint64_to_str+0x80>
    {
        while ( ix-- )
    c6a6:	e007      	b.n	c6b8 <uint64_to_str+0x70>
        {
            *pcBuf++ = tbuf[ix];
    c6a8:	9b01      	ldr	r3, [sp, #4]
    c6aa:	1c5a      	adds	r2, r3, #1
    c6ac:	9201      	str	r2, [sp, #4]
    c6ae:	a904      	add	r1, sp, #16
    c6b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    c6b2:	440a      	add	r2, r1
    c6b4:	7812      	ldrb	r2, [r2, #0]
    c6b6:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    c6b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c6ba:	1e5a      	subs	r2, r3, #1
    c6bc:	920f      	str	r2, [sp, #60]	; 0x3c
    c6be:	2b00      	cmp	r3, #0
    c6c0:	d1f2      	bne.n	c6a8 <uint64_to_str+0x60>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    c6c2:	9b01      	ldr	r3, [sp, #4]
    c6c4:	2200      	movs	r2, #0
    c6c6:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    c6c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
}
    c6ca:	4618      	mov	r0, r3
    c6cc:	b011      	add	sp, #68	; 0x44
    c6ce:	f85d fb04 	ldr.w	pc, [sp], #4

0000c6d2 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    c6d2:	b08c      	sub	sp, #48	; 0x30
    c6d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
    c6d8:	9201      	str	r2, [sp, #4]
    c6da:	f88d 3003 	strb.w	r3, [sp, #3]
    int iNumDig, ix = 0;
    c6de:	2300      	movs	r3, #0
    c6e0:	930b      	str	r3, [sp, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    c6e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c6e6:	4313      	orrs	r3, r2
    c6e8:	d135      	bne.n	c756 <uint64_to_hexstr+0x84>
    {
        tbuf[ix++] = '0';   // Print a '0'
    c6ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c6ec:	1c5a      	adds	r2, r3, #1
    c6ee:	920b      	str	r2, [sp, #44]	; 0x2c
    c6f0:	3330      	adds	r3, #48	; 0x30
    c6f2:	446b      	add	r3, sp
    c6f4:	2230      	movs	r2, #48	; 0x30
    c6f6:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    c6fa:	e02c      	b.n	c756 <uint64_to_hexstr+0x84>
    {
        cCh = ui64Val & 0xf;
    c6fc:	f89d 3008 	ldrb.w	r3, [sp, #8]
    c700:	f003 030f 	and.w	r3, r3, #15
    c704:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    c708:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    c70c:	2b09      	cmp	r3, #9
    c70e:	d90b      	bls.n	c728 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    c710:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c714:	2b00      	cmp	r3, #0
    c716:	d001      	beq.n	c71c <uint64_to_hexstr+0x4a>
    c718:	2227      	movs	r2, #39	; 0x27
    c71a:	e000      	b.n	c71e <uint64_to_hexstr+0x4c>
    c71c:	2207      	movs	r2, #7
    c71e:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    c722:	4413      	add	r3, r2
    c724:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    c728:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c72a:	1c5a      	adds	r2, r3, #1
    c72c:	920b      	str	r2, [sp, #44]	; 0x2c
    c72e:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    c732:	3230      	adds	r2, #48	; 0x30
    c734:	b2d2      	uxtb	r2, r2
    c736:	3330      	adds	r3, #48	; 0x30
    c738:	446b      	add	r3, sp
    c73a:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    c73e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c742:	f04f 0200 	mov.w	r2, #0
    c746:	f04f 0300 	mov.w	r3, #0
    c74a:	0902      	lsrs	r2, r0, #4
    c74c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    c750:	090b      	lsrs	r3, r1, #4
    c752:	e9cd 2302 	strd	r2, r3, [sp, #8]
    while ( ui64Val )
    c756:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c75a:	4313      	orrs	r3, r2
    c75c:	d1ce      	bne.n	c6fc <uint64_to_hexstr+0x2a>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    c75e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c760:	9309      	str	r3, [sp, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    c762:	9b01      	ldr	r3, [sp, #4]
    c764:	2b00      	cmp	r3, #0
    c766:	d010      	beq.n	c78a <uint64_to_hexstr+0xb8>
    {
        while (ix--)
    c768:	e007      	b.n	c77a <uint64_to_hexstr+0xa8>
        {
            *pcBuf++ = tbuf[ix];
    c76a:	9b01      	ldr	r3, [sp, #4]
    c76c:	1c5a      	adds	r2, r3, #1
    c76e:	9201      	str	r2, [sp, #4]
    c770:	a904      	add	r1, sp, #16
    c772:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c774:	440a      	add	r2, r1
    c776:	7812      	ldrb	r2, [r2, #0]
    c778:	701a      	strb	r2, [r3, #0]
        while (ix--)
    c77a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c77c:	1e5a      	subs	r2, r3, #1
    c77e:	920b      	str	r2, [sp, #44]	; 0x2c
    c780:	2b00      	cmp	r3, #0
    c782:	d1f2      	bne.n	c76a <uint64_to_hexstr+0x98>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    c784:	9b01      	ldr	r3, [sp, #4]
    c786:	2200      	movs	r2, #0
    c788:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    c78a:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    c78c:	4618      	mov	r0, r3
    c78e:	b00c      	add	sp, #48	; 0x30
    c790:	4770      	bx	lr

0000c792 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    c792:	b084      	sub	sp, #16
    c794:	9001      	str	r0, [sp, #4]
    uint32_t ui32RetVal = 0;
    c796:	2300      	movs	r3, #0
    c798:	9303      	str	r3, [sp, #12]
    if ( !pcBuf )
    c79a:	9b01      	ldr	r3, [sp, #4]
    c79c:	2b00      	cmp	r3, #0
    c79e:	d104      	bne.n	c7aa <simple_strlen+0x18>
    {
        return ui32RetVal;
    c7a0:	9b03      	ldr	r3, [sp, #12]
    c7a2:	e009      	b.n	c7b8 <simple_strlen+0x26>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    c7a4:	9b03      	ldr	r3, [sp, #12]
    c7a6:	3301      	adds	r3, #1
    c7a8:	9303      	str	r3, [sp, #12]
    while ( *pcBuf++ )
    c7aa:	9b01      	ldr	r3, [sp, #4]
    c7ac:	1c5a      	adds	r2, r3, #1
    c7ae:	9201      	str	r2, [sp, #4]
    c7b0:	781b      	ldrb	r3, [r3, #0]
    c7b2:	2b00      	cmp	r3, #0
    c7b4:	d1f6      	bne.n	c7a4 <simple_strlen+0x12>
    }
    return ui32RetVal;
    c7b6:	9b03      	ldr	r3, [sp, #12]
}
    c7b8:	4618      	mov	r0, r3
    c7ba:	b004      	add	sp, #16
    c7bc:	4770      	bx	lr

0000c7be <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    c7be:	b086      	sub	sp, #24
    c7c0:	9003      	str	r0, [sp, #12]
    c7c2:	460b      	mov	r3, r1
    c7c4:	9201      	str	r2, [sp, #4]
    c7c6:	f88d 300b 	strb.w	r3, [sp, #11]
    int32_t i32Cnt = 0;
    c7ca:	2300      	movs	r3, #0
    c7cc:	9305      	str	r3, [sp, #20]

    if ( i32NumChars <= 0 )
    c7ce:	9b01      	ldr	r3, [sp, #4]
    c7d0:	2b00      	cmp	r3, #0
    c7d2:	dc0d      	bgt.n	c7f0 <padbuffer+0x32>
    {
        return i32Cnt;
    c7d4:	9b05      	ldr	r3, [sp, #20]
    c7d6:	e011      	b.n	c7fc <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    c7d8:	9b03      	ldr	r3, [sp, #12]
    c7da:	2b00      	cmp	r3, #0
    c7dc:	d005      	beq.n	c7ea <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    c7de:	9b03      	ldr	r3, [sp, #12]
    c7e0:	1c5a      	adds	r2, r3, #1
    c7e2:	9203      	str	r2, [sp, #12]
    c7e4:	f89d 200b 	ldrb.w	r2, [sp, #11]
    c7e8:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    c7ea:	9b05      	ldr	r3, [sp, #20]
    c7ec:	3301      	adds	r3, #1
    c7ee:	9305      	str	r3, [sp, #20]
    while ( i32NumChars-- )
    c7f0:	9b01      	ldr	r3, [sp, #4]
    c7f2:	1e5a      	subs	r2, r3, #1
    c7f4:	9201      	str	r2, [sp, #4]
    c7f6:	2b00      	cmp	r3, #0
    c7f8:	d1ee      	bne.n	c7d8 <padbuffer+0x1a>
    }

    return i32Cnt;
    c7fa:	9b05      	ldr	r3, [sp, #20]
}
    c7fc:	4618      	mov	r0, r3
    c7fe:	b006      	add	sp, #24
    c800:	4770      	bx	lr
	...

0000c804 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    c804:	b5f0      	push	{r4, r5, r6, r7, lr}
    c806:	b08f      	sub	sp, #60	; 0x3c
    c808:	ed8d 0a03 	vstr	s0, [sp, #12]
    c80c:	9002      	str	r0, [sp, #8]
    c80e:	9101      	str	r1, [sp, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    c810:	9b02      	ldr	r3, [sp, #8]
    c812:	681b      	ldr	r3, [r3, #0]
    c814:	9309      	str	r3, [sp, #36]	; 0x24
    if (iBufSize < 4)
    c816:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c818:	2b03      	cmp	r3, #3
    c81a:	dc02      	bgt.n	c822 <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    c81c:	f06f 0302 	mvn.w	r3, #2
    c820:	e0e9      	b.n	c9f6 <ftoa+0x1f2>
    }

    if (fValue == 0.0f)
    c822:	eddd 7a03 	vldr	s15, [sp, #12]
    c826:	eef5 7a40 	vcmp.f32	s15, #0.0
    c82a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c82e:	d104      	bne.n	c83a <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    c830:	9b02      	ldr	r3, [sp, #8]
    c832:	4a72      	ldr	r2, [pc, #456]	; (c9fc <ftoa+0x1f8>)
    c834:	601a      	str	r2, [r3, #0]
        return 3;
    c836:	2303      	movs	r3, #3
    c838:	e0dd      	b.n	c9f6 <ftoa+0x1f2>
    }

    pcBufInitial = pcBuf;
    c83a:	9b02      	ldr	r3, [sp, #8]
    c83c:	9308      	str	r3, [sp, #32]

    unFloatValue.F = fValue;
    c83e:	9b03      	ldr	r3, [sp, #12]
    c840:	9304      	str	r3, [sp, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    c842:	9b04      	ldr	r3, [sp, #16]
    c844:	15db      	asrs	r3, r3, #23
    c846:	b2db      	uxtb	r3, r3
    c848:	3b7f      	subs	r3, #127	; 0x7f
    c84a:	9307      	str	r3, [sp, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    c84c:	9b04      	ldr	r3, [sp, #16]
    c84e:	f3c3 0316 	ubfx	r3, r3, #0, #23
    c852:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    c856:	9306      	str	r3, [sp, #24]
    i32FracPart = 0;
    c858:	2300      	movs	r3, #0
    c85a:	930c      	str	r3, [sp, #48]	; 0x30
    i32IntPart = 0;
    c85c:	2300      	movs	r3, #0
    c85e:	930d      	str	r3, [sp, #52]	; 0x34

    if (iExp2 >= 31)
    c860:	9b07      	ldr	r3, [sp, #28]
    c862:	2b1e      	cmp	r3, #30
    c864:	dd02      	ble.n	c86c <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    c866:	f06f 0301 	mvn.w	r3, #1
    c86a:	e0c4      	b.n	c9f6 <ftoa+0x1f2>
    }
    else if (iExp2 < -23)
    c86c:	9b07      	ldr	r3, [sp, #28]
    c86e:	f113 0f17 	cmn.w	r3, #23
    c872:	da02      	bge.n	c87a <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    c874:	f04f 33ff 	mov.w	r3, #4294967295
    c878:	e0bd      	b.n	c9f6 <ftoa+0x1f2>
    }
    else if (iExp2 >= 23)
    c87a:	9b07      	ldr	r3, [sp, #28]
    c87c:	2b16      	cmp	r3, #22
    c87e:	dd06      	ble.n	c88e <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    c880:	9b07      	ldr	r3, [sp, #28]
    c882:	3b17      	subs	r3, #23
    c884:	9a06      	ldr	r2, [sp, #24]
    c886:	fa02 f303 	lsl.w	r3, r2, r3
    c88a:	930d      	str	r3, [sp, #52]	; 0x34
    c88c:	e01a      	b.n	c8c4 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    c88e:	9b07      	ldr	r3, [sp, #28]
    c890:	2b00      	cmp	r3, #0
    c892:	db0f      	blt.n	c8b4 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    c894:	9b07      	ldr	r3, [sp, #28]
    c896:	f1c3 0317 	rsb	r3, r3, #23
    c89a:	9a06      	ldr	r2, [sp, #24]
    c89c:	fa42 f303 	asr.w	r3, r2, r3
    c8a0:	930d      	str	r3, [sp, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    c8a2:	9b07      	ldr	r3, [sp, #28]
    c8a4:	3301      	adds	r3, #1
    c8a6:	9a06      	ldr	r2, [sp, #24]
    c8a8:	fa02 f303 	lsl.w	r3, r2, r3
    c8ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c8b0:	930c      	str	r3, [sp, #48]	; 0x30
    c8b2:	e007      	b.n	c8c4 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    c8b4:	9b06      	ldr	r3, [sp, #24]
    c8b6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    c8ba:	9b07      	ldr	r3, [sp, #28]
    c8bc:	43db      	mvns	r3, r3
    c8be:	fa42 f303 	asr.w	r3, r2, r3
    c8c2:	930c      	str	r3, [sp, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    c8c4:	9b04      	ldr	r3, [sp, #16]
    c8c6:	2b00      	cmp	r3, #0
    c8c8:	da04      	bge.n	c8d4 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    c8ca:	9b02      	ldr	r3, [sp, #8]
    c8cc:	1c5a      	adds	r2, r3, #1
    c8ce:	9202      	str	r2, [sp, #8]
    c8d0:	222d      	movs	r2, #45	; 0x2d
    c8d2:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    c8d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c8d6:	2b00      	cmp	r3, #0
    c8d8:	d105      	bne.n	c8e6 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    c8da:	9b02      	ldr	r3, [sp, #8]
    c8dc:	1c5a      	adds	r2, r3, #1
    c8de:	9202      	str	r2, [sp, #8]
    c8e0:	2230      	movs	r2, #48	; 0x30
    c8e2:	701a      	strb	r2, [r3, #0]
    c8e4:	e023      	b.n	c92e <ftoa+0x12a>
    }
    else
    {
        if (i32IntPart > 0)
    c8e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c8e8:	2b00      	cmp	r3, #0
    c8ea:	dd09      	ble.n	c900 <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
    c8ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c8ee:	17da      	asrs	r2, r3, #31
    c8f0:	461e      	mov	r6, r3
    c8f2:	4617      	mov	r7, r2
    c8f4:	9a02      	ldr	r2, [sp, #8]
    c8f6:	4630      	mov	r0, r6
    c8f8:	4639      	mov	r1, r7
    c8fa:	f7ff fea5 	bl	c648 <uint64_to_str>
    c8fe:	e012      	b.n	c926 <ftoa+0x122>
        }
        else
        {
            *pcBuf++ = '-';
    c900:	9b02      	ldr	r3, [sp, #8]
    c902:	1c5a      	adds	r2, r3, #1
    c904:	9202      	str	r2, [sp, #8]
    c906:	222d      	movs	r2, #45	; 0x2d
    c908:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    c90a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c90c:	425b      	negs	r3, r3
    c90e:	17da      	asrs	r2, r3, #31
    c910:	461c      	mov	r4, r3
    c912:	4615      	mov	r5, r2
    c914:	9a02      	ldr	r2, [sp, #8]
    c916:	4620      	mov	r0, r4
    c918:	4629      	mov	r1, r5
    c91a:	f7ff fe95 	bl	c648 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    c91e:	e002      	b.n	c926 <ftoa+0x122>
        {
            pcBuf++;
    c920:	9b02      	ldr	r3, [sp, #8]
    c922:	3301      	adds	r3, #1
    c924:	9302      	str	r3, [sp, #8]
        while (*pcBuf)    // Get to end of new string
    c926:	9b02      	ldr	r3, [sp, #8]
    c928:	781b      	ldrb	r3, [r3, #0]
    c92a:	2b00      	cmp	r3, #0
    c92c:	d1f8      	bne.n	c920 <ftoa+0x11c>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    c92e:	9b02      	ldr	r3, [sp, #8]
    c930:	1c5a      	adds	r2, r3, #1
    c932:	9202      	str	r2, [sp, #8]
    c934:	222e      	movs	r2, #46	; 0x2e
    c936:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    c938:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c93a:	2b00      	cmp	r3, #0
    c93c:	d105      	bne.n	c94a <ftoa+0x146>
    {
        *pcBuf++ = '0';
    c93e:	9b02      	ldr	r3, [sp, #8]
    c940:	1c5a      	adds	r2, r3, #1
    c942:	9202      	str	r2, [sp, #8]
    c944:	2230      	movs	r2, #48	; 0x30
    c946:	701a      	strb	r2, [r3, #0]
    c948:	e04f      	b.n	c9ea <ftoa+0x1e6>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    c94a:	9a02      	ldr	r2, [sp, #8]
    c94c:	9b08      	ldr	r3, [sp, #32]
    c94e:	1ad3      	subs	r3, r2, r3
    c950:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c952:	1ad3      	subs	r3, r2, r3
    c954:	3b01      	subs	r3, #1
    c956:	9305      	str	r3, [sp, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    c958:	9a05      	ldr	r2, [sp, #20]
    c95a:	9b01      	ldr	r3, [sp, #4]
    c95c:	4293      	cmp	r3, r2
    c95e:	bfa8      	it	ge
    c960:	4613      	movge	r3, r2
    c962:	9305      	str	r3, [sp, #20]

        for (jx = 0; jx < iMax; jx++)
    c964:	2300      	movs	r3, #0
    c966:	930a      	str	r3, [sp, #40]	; 0x28
    c968:	e015      	b.n	c996 <ftoa+0x192>
        {
            i32FracPart *= 10;
    c96a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c96c:	4613      	mov	r3, r2
    c96e:	009b      	lsls	r3, r3, #2
    c970:	4413      	add	r3, r2
    c972:	005b      	lsls	r3, r3, #1
    c974:	930c      	str	r3, [sp, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    c976:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c978:	161b      	asrs	r3, r3, #24
    c97a:	b2da      	uxtb	r2, r3
    c97c:	9b02      	ldr	r3, [sp, #8]
    c97e:	1c59      	adds	r1, r3, #1
    c980:	9102      	str	r1, [sp, #8]
    c982:	3230      	adds	r2, #48	; 0x30
    c984:	b2d2      	uxtb	r2, r2
    c986:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    c988:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c98a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c98e:	930c      	str	r3, [sp, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    c990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c992:	3301      	adds	r3, #1
    c994:	930a      	str	r3, [sp, #40]	; 0x28
    c996:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c998:	9b05      	ldr	r3, [sp, #20]
    c99a:	429a      	cmp	r2, r3
    c99c:	dbe5      	blt.n	c96a <ftoa+0x166>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    c99e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c9a0:	4613      	mov	r3, r2
    c9a2:	009b      	lsls	r3, r3, #2
    c9a4:	4413      	add	r3, r2
    c9a6:	005b      	lsls	r3, r3, #1
    c9a8:	161b      	asrs	r3, r3, #24
    c9aa:	2b04      	cmp	r3, #4
    c9ac:	dd1d      	ble.n	c9ea <ftoa+0x1e6>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    c9ae:	9b02      	ldr	r3, [sp, #8]
    c9b0:	3b01      	subs	r3, #1
    c9b2:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    c9b4:	e015      	b.n	c9e2 <ftoa+0x1de>
            {
                if ( *pcBuftmp == '.' )
    c9b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c9b8:	781b      	ldrb	r3, [r3, #0]
    c9ba:	2b2e      	cmp	r3, #46	; 0x2e
    c9bc:	d00e      	beq.n	c9dc <ftoa+0x1d8>
                {
                }
                else if ( *pcBuftmp == '9' )
    c9be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c9c0:	781b      	ldrb	r3, [r3, #0]
    c9c2:	2b39      	cmp	r3, #57	; 0x39
    c9c4:	d103      	bne.n	c9ce <ftoa+0x1ca>
                {
                    *pcBuftmp = '0';
    c9c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c9c8:	2230      	movs	r2, #48	; 0x30
    c9ca:	701a      	strb	r2, [r3, #0]
    c9cc:	e006      	b.n	c9dc <ftoa+0x1d8>
                }
                else
                {
                    *pcBuftmp += 1;
    c9ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c9d0:	781b      	ldrb	r3, [r3, #0]
    c9d2:	3301      	adds	r3, #1
    c9d4:	b2da      	uxtb	r2, r3
    c9d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c9d8:	701a      	strb	r2, [r3, #0]
                    break;
    c9da:	e006      	b.n	c9ea <ftoa+0x1e6>
                }
                pcBuftmp--;
    c9dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c9de:	3b01      	subs	r3, #1
    c9e0:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    c9e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c9e4:	9b08      	ldr	r3, [sp, #32]
    c9e6:	429a      	cmp	r2, r3
    c9e8:	d2e5      	bcs.n	c9b6 <ftoa+0x1b2>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    c9ea:	9b02      	ldr	r3, [sp, #8]
    c9ec:	2200      	movs	r2, #0
    c9ee:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    c9f0:	9a02      	ldr	r2, [sp, #8]
    c9f2:	9b08      	ldr	r3, [sp, #32]
    c9f4:	1ad3      	subs	r3, r2, r3
} // ftoa()
    c9f6:	4618      	mov	r0, r3
    c9f8:	b00f      	add	sp, #60	; 0x3c
    c9fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c9fc:	00302e30 	.word	0x00302e30

0000ca00 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    ca00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ca04:	b097      	sub	sp, #92	; 0x5c
    ca06:	9003      	str	r0, [sp, #12]
    ca08:	9102      	str	r1, [sp, #8]
    ca0a:	9201      	str	r2, [sp, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    ca0c:	2300      	movs	r3, #0
    ca0e:	9311      	str	r3, [sp, #68]	; 0x44
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    ca10:	2300      	movs	r3, #0
    ca12:	930b      	str	r3, [sp, #44]	; 0x2c

    while ( *pcFmt != 0x0 )
    ca14:	e2e9      	b.n	cfea <am_util_stdio_vsprintf+0x5ea>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    ca16:	2306      	movs	r3, #6
    ca18:	930e      	str	r3, [sp, #56]	; 0x38

        if ( *pcFmt != '%' )
    ca1a:	9b02      	ldr	r3, [sp, #8]
    ca1c:	781b      	ldrb	r3, [r3, #0]
    ca1e:	2b25      	cmp	r3, #37	; 0x25
    ca20:	d01f      	beq.n	ca62 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    ca22:	9b03      	ldr	r3, [sp, #12]
    ca24:	2b00      	cmp	r3, #0
    ca26:	d015      	beq.n	ca54 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    ca28:	9b02      	ldr	r3, [sp, #8]
    ca2a:	781b      	ldrb	r3, [r3, #0]
    ca2c:	2b0a      	cmp	r3, #10
    ca2e:	d10b      	bne.n	ca48 <am_util_stdio_vsprintf+0x48>
    ca30:	4ba8      	ldr	r3, [pc, #672]	; (ccd4 <am_util_stdio_vsprintf+0x2d4>)
    ca32:	781b      	ldrb	r3, [r3, #0]
    ca34:	2b00      	cmp	r3, #0
    ca36:	d007      	beq.n	ca48 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    ca38:	9b03      	ldr	r3, [sp, #12]
    ca3a:	1c5a      	adds	r2, r3, #1
    ca3c:	9203      	str	r2, [sp, #12]
    ca3e:	220d      	movs	r2, #13
    ca40:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    ca42:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ca44:	3301      	adds	r3, #1
    ca46:	9311      	str	r3, [sp, #68]	; 0x44
                }
                *pcBuf++ = *pcFmt;
    ca48:	9b03      	ldr	r3, [sp, #12]
    ca4a:	1c5a      	adds	r2, r3, #1
    ca4c:	9203      	str	r2, [sp, #12]
    ca4e:	9a02      	ldr	r2, [sp, #8]
    ca50:	7812      	ldrb	r2, [r2, #0]
    ca52:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    ca54:	9b02      	ldr	r3, [sp, #8]
    ca56:	3301      	adds	r3, #1
    ca58:	9302      	str	r3, [sp, #8]
            ++ui32CharCnt;
    ca5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ca5c:	3301      	adds	r3, #1
    ca5e:	9311      	str	r3, [sp, #68]	; 0x44
            continue;
    ca60:	e2c3      	b.n	cfea <am_util_stdio_vsprintf+0x5ea>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    ca62:	9b02      	ldr	r3, [sp, #8]
    ca64:	3301      	adds	r3, #1
    ca66:	9302      	str	r3, [sp, #8]
        bLower = bLongLong = false;
    ca68:	2300      	movs	r3, #0
    ca6a:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    ca6e:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    ca72:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    ca76:	2320      	movs	r3, #32
    ca78:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

        if ( *pcFmt == '0' )
    ca7c:	9b02      	ldr	r3, [sp, #8]
    ca7e:	781b      	ldrb	r3, [r3, #0]
    ca80:	2b30      	cmp	r3, #48	; 0x30
    ca82:	d105      	bne.n	ca90 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    ca84:	2330      	movs	r3, #48	; 0x30
    ca86:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
            ++pcFmt;
    ca8a:	9b02      	ldr	r3, [sp, #8]
    ca8c:	3301      	adds	r3, #1
    ca8e:	9302      	str	r3, [sp, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    ca90:	ab05      	add	r3, sp, #20
    ca92:	4619      	mov	r1, r3
    ca94:	9802      	ldr	r0, [sp, #8]
    ca96:	f7ff fd93 	bl	c5c0 <decstr_to_int>
    ca9a:	4603      	mov	r3, r0
    ca9c:	9310      	str	r3, [sp, #64]	; 0x40
        pcFmt += ui32NumChars;
    ca9e:	9b05      	ldr	r3, [sp, #20]
    caa0:	9a02      	ldr	r2, [sp, #8]
    caa2:	4413      	add	r3, r2
    caa4:	9302      	str	r3, [sp, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    caa6:	9b02      	ldr	r3, [sp, #8]
    caa8:	781b      	ldrb	r3, [r3, #0]
    caaa:	2b73      	cmp	r3, #115	; 0x73
    caac:	d005      	beq.n	caba <am_util_stdio_vsprintf+0xba>
    caae:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cab0:	2b00      	cmp	r3, #0
    cab2:	da02      	bge.n	caba <am_util_stdio_vsprintf+0xba>
        {
            iWidth = -iWidth;
    cab4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cab6:	425b      	negs	r3, r3
    cab8:	9310      	str	r3, [sp, #64]	; 0x40
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    caba:	9b02      	ldr	r3, [sp, #8]
    cabc:	781b      	ldrb	r3, [r3, #0]
    cabe:	2b2e      	cmp	r3, #46	; 0x2e
    cac0:	d10d      	bne.n	cade <am_util_stdio_vsprintf+0xde>
        {
            ++pcFmt;
    cac2:	9b02      	ldr	r3, [sp, #8]
    cac4:	3301      	adds	r3, #1
    cac6:	9302      	str	r3, [sp, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    cac8:	ab05      	add	r3, sp, #20
    caca:	4619      	mov	r1, r3
    cacc:	9802      	ldr	r0, [sp, #8]
    cace:	f7ff fd77 	bl	c5c0 <decstr_to_int>
    cad2:	4603      	mov	r3, r0
    cad4:	930e      	str	r3, [sp, #56]	; 0x38
            pcFmt += ui32NumChars;
    cad6:	9b05      	ldr	r3, [sp, #20]
    cad8:	9a02      	ldr	r2, [sp, #8]
    cada:	4413      	add	r3, r2
    cadc:	9302      	str	r3, [sp, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    cade:	9b02      	ldr	r3, [sp, #8]
    cae0:	781b      	ldrb	r3, [r3, #0]
    cae2:	2b6c      	cmp	r3, #108	; 0x6c
    cae4:	d10c      	bne.n	cb00 <am_util_stdio_vsprintf+0x100>
        {
            pcFmt++;
    cae6:	9b02      	ldr	r3, [sp, #8]
    cae8:	3301      	adds	r3, #1
    caea:	9302      	str	r3, [sp, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    caec:	9b02      	ldr	r3, [sp, #8]
    caee:	781b      	ldrb	r3, [r3, #0]
    caf0:	2b6c      	cmp	r3, #108	; 0x6c
    caf2:	d105      	bne.n	cb00 <am_util_stdio_vsprintf+0x100>
            {
                pcFmt++;
    caf4:	9b02      	ldr	r3, [sp, #8]
    caf6:	3301      	adds	r3, #1
    caf8:	9302      	str	r3, [sp, #8]
                bLongLong = true;
    cafa:	2301      	movs	r3, #1
    cafc:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
            }
        }

        switch ( *pcFmt )
    cb00:	9b02      	ldr	r3, [sp, #8]
    cb02:	781b      	ldrb	r3, [r3, #0]
    cb04:	3b46      	subs	r3, #70	; 0x46
    cb06:	2b32      	cmp	r3, #50	; 0x32
    cb08:	f200 825c 	bhi.w	cfc4 <am_util_stdio_vsprintf+0x5c4>
    cb0c:	a201      	add	r2, pc, #4	; (adr r2, cb14 <am_util_stdio_vsprintf+0x114>)
    cb0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cb12:	bf00      	nop
    cb14:	0000cf4b 	.word	0x0000cf4b
    cb18:	0000cfc5 	.word	0x0000cfc5
    cb1c:	0000cfc5 	.word	0x0000cfc5
    cb20:	0000cfc5 	.word	0x0000cfc5
    cb24:	0000cfc5 	.word	0x0000cfc5
    cb28:	0000cfc5 	.word	0x0000cfc5
    cb2c:	0000cfc5 	.word	0x0000cfc5
    cb30:	0000cfc5 	.word	0x0000cfc5
    cb34:	0000cfc5 	.word	0x0000cfc5
    cb38:	0000cfc5 	.word	0x0000cfc5
    cb3c:	0000cfc5 	.word	0x0000cfc5
    cb40:	0000cfc5 	.word	0x0000cfc5
    cb44:	0000cfc5 	.word	0x0000cfc5
    cb48:	0000cfc5 	.word	0x0000cfc5
    cb4c:	0000cfc5 	.word	0x0000cfc5
    cb50:	0000cfc5 	.word	0x0000cfc5
    cb54:	0000cfc5 	.word	0x0000cfc5
    cb58:	0000cfc5 	.word	0x0000cfc5
    cb5c:	0000ccdf 	.word	0x0000ccdf
    cb60:	0000cfc5 	.word	0x0000cfc5
    cb64:	0000cfc5 	.word	0x0000cfc5
    cb68:	0000cfc5 	.word	0x0000cfc5
    cb6c:	0000cfc5 	.word	0x0000cfc5
    cb70:	0000cfc5 	.word	0x0000cfc5
    cb74:	0000cfc5 	.word	0x0000cfc5
    cb78:	0000cfc5 	.word	0x0000cfc5
    cb7c:	0000cfc5 	.word	0x0000cfc5
    cb80:	0000cfc5 	.word	0x0000cfc5
    cb84:	0000cfc5 	.word	0x0000cfc5
    cb88:	0000cbe1 	.word	0x0000cbe1
    cb8c:	0000ce0f 	.word	0x0000ce0f
    cb90:	0000cfc5 	.word	0x0000cfc5
    cb94:	0000cf4b 	.word	0x0000cf4b
    cb98:	0000cfc5 	.word	0x0000cfc5
    cb9c:	0000cfc5 	.word	0x0000cfc5
    cba0:	0000ce0f 	.word	0x0000ce0f
    cba4:	0000cfc5 	.word	0x0000cfc5
    cba8:	0000cfc5 	.word	0x0000cfc5
    cbac:	0000cfc5 	.word	0x0000cfc5
    cbb0:	0000cfc5 	.word	0x0000cfc5
    cbb4:	0000cfc5 	.word	0x0000cfc5
    cbb8:	0000cfc5 	.word	0x0000cfc5
    cbbc:	0000cfc5 	.word	0x0000cfc5
    cbc0:	0000cfc5 	.word	0x0000cfc5
    cbc4:	0000cfc5 	.word	0x0000cfc5
    cbc8:	0000cc07 	.word	0x0000cc07
    cbcc:	0000cfc5 	.word	0x0000cfc5
    cbd0:	0000cd79 	.word	0x0000cd79
    cbd4:	0000cfc5 	.word	0x0000cfc5
    cbd8:	0000cfc5 	.word	0x0000cfc5
    cbdc:	0000ccd9 	.word	0x0000ccd9
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cbe0:	9b01      	ldr	r3, [sp, #4]
    cbe2:	1d1a      	adds	r2, r3, #4
    cbe4:	9201      	str	r2, [sp, #4]
    cbe6:	681b      	ldr	r3, [r3, #0]
    cbe8:	f88d 301f 	strb.w	r3, [sp, #31]

                if ( pcBuf )
    cbec:	9b03      	ldr	r3, [sp, #12]
    cbee:	2b00      	cmp	r3, #0
    cbf0:	d005      	beq.n	cbfe <am_util_stdio_vsprintf+0x1fe>
                {
                    *pcBuf++ = ui8CharSpecifier;
    cbf2:	9b03      	ldr	r3, [sp, #12]
    cbf4:	1c5a      	adds	r2, r3, #1
    cbf6:	9203      	str	r2, [sp, #12]
    cbf8:	f89d 201f 	ldrb.w	r2, [sp, #31]
    cbfc:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    cbfe:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cc00:	3301      	adds	r3, #1
    cc02:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    cc04:	e1ee      	b.n	cfe4 <am_util_stdio_vsprintf+0x5e4>

            case 's':
                pcStr = va_arg(pArgs, char *);
    cc06:	9b01      	ldr	r3, [sp, #4]
    cc08:	1d1a      	adds	r2, r3, #4
    cc0a:	9201      	str	r2, [sp, #4]
    cc0c:	681b      	ldr	r3, [r3, #0]
    cc0e:	9315      	str	r3, [sp, #84]	; 0x54
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    cc10:	9815      	ldr	r0, [sp, #84]	; 0x54
    cc12:	f7ff fdbe 	bl	c792 <simple_strlen>
    cc16:	900b      	str	r0, [sp, #44]	; 0x2c
                if ( iWidth > 0 )
    cc18:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cc1a:	2b00      	cmp	r3, #0
    cc1c:	dd2e      	ble.n	cc7c <am_util_stdio_vsprintf+0x27c>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    cc1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cc20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cc22:	429a      	cmp	r2, r3
    cc24:	d22a      	bcs.n	cc7c <am_util_stdio_vsprintf+0x27c>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cc26:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cc28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cc2a:	1ad3      	subs	r3, r2, r3
    cc2c:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cc2e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cc32:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cc34:	4619      	mov	r1, r3
    cc36:	9803      	ldr	r0, [sp, #12]
    cc38:	f7ff fdc1 	bl	c7be <padbuffer>
    cc3c:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    cc3e:	9b03      	ldr	r3, [sp, #12]
    cc40:	2b00      	cmp	r3, #0
    cc42:	d001      	beq.n	cc48 <am_util_stdio_vsprintf+0x248>
    cc44:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cc46:	e000      	b.n	cc4a <am_util_stdio_vsprintf+0x24a>
    cc48:	2300      	movs	r3, #0
    cc4a:	9a03      	ldr	r2, [sp, #12]
    cc4c:	4413      	add	r3, r2
    cc4e:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    cc50:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cc52:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cc54:	4413      	add	r3, r2
    cc56:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    cc58:	2300      	movs	r3, #0
    cc5a:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }

                while (*pcStr != 0x0)
    cc5c:	e00e      	b.n	cc7c <am_util_stdio_vsprintf+0x27c>
                {
                    if ( pcBuf )
    cc5e:	9b03      	ldr	r3, [sp, #12]
    cc60:	2b00      	cmp	r3, #0
    cc62:	d005      	beq.n	cc70 <am_util_stdio_vsprintf+0x270>
                    {
                        *pcBuf++ = *pcStr;
    cc64:	9b03      	ldr	r3, [sp, #12]
    cc66:	1c5a      	adds	r2, r3, #1
    cc68:	9203      	str	r2, [sp, #12]
    cc6a:	9a15      	ldr	r2, [sp, #84]	; 0x54
    cc6c:	7812      	ldrb	r2, [r2, #0]
    cc6e:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    cc70:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cc72:	3301      	adds	r3, #1
    cc74:	9315      	str	r3, [sp, #84]	; 0x54
                    ++ui32CharCnt;
    cc76:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cc78:	3301      	adds	r3, #1
    cc7a:	9311      	str	r3, [sp, #68]	; 0x44
                while (*pcStr != 0x0)
    cc7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cc7e:	781b      	ldrb	r3, [r3, #0]
    cc80:	2b00      	cmp	r3, #0
    cc82:	d1ec      	bne.n	cc5e <am_util_stdio_vsprintf+0x25e>
                }

                if ( iWidth )
    cc84:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cc86:	2b00      	cmp	r3, #0
    cc88:	f000 81a9 	beq.w	cfde <am_util_stdio_vsprintf+0x5de>
                {
                    iWidth = -iWidth;
    cc8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cc8e:	425b      	negs	r3, r3
    cc90:	9310      	str	r3, [sp, #64]	; 0x40

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    cc92:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cc94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cc96:	429a      	cmp	r2, r3
    cc98:	f080 81a1 	bcs.w	cfde <am_util_stdio_vsprintf+0x5de>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cc9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cc9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cca0:	1ad3      	subs	r3, r2, r3
    cca2:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cca4:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cca8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ccaa:	4619      	mov	r1, r3
    ccac:	9803      	ldr	r0, [sp, #12]
    ccae:	f7ff fd86 	bl	c7be <padbuffer>
    ccb2:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    ccb4:	9b03      	ldr	r3, [sp, #12]
    ccb6:	2b00      	cmp	r3, #0
    ccb8:	d001      	beq.n	ccbe <am_util_stdio_vsprintf+0x2be>
    ccba:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ccbc:	e000      	b.n	ccc0 <am_util_stdio_vsprintf+0x2c0>
    ccbe:	2300      	movs	r3, #0
    ccc0:	9a03      	ldr	r2, [sp, #12]
    ccc2:	4413      	add	r3, r2
    ccc4:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    ccc6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ccc8:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ccca:	4413      	add	r3, r2
    cccc:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    ccce:	2300      	movs	r3, #0
    ccd0:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }
                break;
    ccd2:	e184      	b.n	cfde <am_util_stdio_vsprintf+0x5de>
    ccd4:	10001138 	.word	0x10001138

            case 'x':
                bLower = true;
    ccd8:	2301      	movs	r3, #1
    ccda:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    ccde:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    cce2:	2b00      	cmp	r3, #0
    cce4:	d009      	beq.n	ccfa <am_util_stdio_vsprintf+0x2fa>
    cce6:	9b01      	ldr	r3, [sp, #4]
    cce8:	3307      	adds	r3, #7
    ccea:	f023 0307 	bic.w	r3, r3, #7
    ccee:	f103 0208 	add.w	r2, r3, #8
    ccf2:	9201      	str	r2, [sp, #4]
    ccf4:	e9d3 4500 	ldrd	r4, r5, [r3]
    ccf8:	e006      	b.n	cd08 <am_util_stdio_vsprintf+0x308>
                                      va_arg(pArgs, uint32_t);
    ccfa:	9b01      	ldr	r3, [sp, #4]
    ccfc:	1d1a      	adds	r2, r3, #4
    ccfe:	9201      	str	r2, [sp, #4]
    cd00:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cd02:	2200      	movs	r2, #0
    cd04:	461c      	mov	r4, r3
    cd06:	4615      	mov	r5, r2
    cd08:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48

                if ( iWidth )
    cd0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cd0e:	2b00      	cmp	r3, #0
    cd10:	d01e      	beq.n	cd50 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    cd12:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    cd16:	f7ff fc2f 	bl	c578 <ndigits_in_hex>
    cd1a:	4602      	mov	r2, r0
    cd1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cd1e:	1a9b      	subs	r3, r3, r2
    cd20:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cd22:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cd26:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cd28:	4619      	mov	r1, r3
    cd2a:	9803      	ldr	r0, [sp, #12]
    cd2c:	f7ff fd47 	bl	c7be <padbuffer>
    cd30:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    cd32:	9b03      	ldr	r3, [sp, #12]
    cd34:	2b00      	cmp	r3, #0
    cd36:	d001      	beq.n	cd3c <am_util_stdio_vsprintf+0x33c>
    cd38:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cd3a:	e000      	b.n	cd3e <am_util_stdio_vsprintf+0x33e>
    cd3c:	2300      	movs	r3, #0
    cd3e:	9a03      	ldr	r2, [sp, #12]
    cd40:	4413      	add	r3, r2
    cd42:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    cd44:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cd46:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cd48:	4413      	add	r3, r2
    cd4a:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    cd4c:	2300      	movs	r3, #0
    cd4e:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    cd50:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    cd54:	9a03      	ldr	r2, [sp, #12]
    cd56:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    cd5a:	f7ff fcba 	bl	c6d2 <uint64_to_hexstr>
    cd5e:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    cd60:	9b03      	ldr	r3, [sp, #12]
    cd62:	2b00      	cmp	r3, #0
    cd64:	d003      	beq.n	cd6e <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    cd66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cd68:	9a03      	ldr	r2, [sp, #12]
    cd6a:	4413      	add	r3, r2
    cd6c:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    cd6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cd70:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cd72:	4413      	add	r3, r2
    cd74:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    cd76:	e135      	b.n	cfe4 <am_util_stdio_vsprintf+0x5e4>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cd78:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    cd7c:	2b00      	cmp	r3, #0
    cd7e:	d009      	beq.n	cd94 <am_util_stdio_vsprintf+0x394>
    cd80:	9b01      	ldr	r3, [sp, #4]
    cd82:	3307      	adds	r3, #7
    cd84:	f023 0307 	bic.w	r3, r3, #7
    cd88:	f103 0208 	add.w	r2, r3, #8
    cd8c:	9201      	str	r2, [sp, #4]
    cd8e:	e9d3 6700 	ldrd	r6, r7, [r3]
    cd92:	e006      	b.n	cda2 <am_util_stdio_vsprintf+0x3a2>
                                      va_arg(pArgs, uint32_t);
    cd94:	9b01      	ldr	r3, [sp, #4]
    cd96:	1d1a      	adds	r2, r3, #4
    cd98:	9201      	str	r2, [sp, #4]
    cd9a:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cd9c:	2200      	movs	r2, #0
    cd9e:	461e      	mov	r6, r3
    cda0:	4617      	mov	r7, r2
    cda2:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48

                if ( iWidth )
    cda6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cda8:	2b00      	cmp	r3, #0
    cdaa:	d01e      	beq.n	cdea <am_util_stdio_vsprintf+0x3ea>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    cdac:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    cdb0:	f7ff fba8 	bl	c504 <ndigits_in_u64>
    cdb4:	4602      	mov	r2, r0
    cdb6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cdb8:	1a9b      	subs	r3, r3, r2
    cdba:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cdbc:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cdc0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cdc2:	4619      	mov	r1, r3
    cdc4:	9803      	ldr	r0, [sp, #12]
    cdc6:	f7ff fcfa 	bl	c7be <padbuffer>
    cdca:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    cdcc:	9b03      	ldr	r3, [sp, #12]
    cdce:	2b00      	cmp	r3, #0
    cdd0:	d001      	beq.n	cdd6 <am_util_stdio_vsprintf+0x3d6>
    cdd2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cdd4:	e000      	b.n	cdd8 <am_util_stdio_vsprintf+0x3d8>
    cdd6:	2300      	movs	r3, #0
    cdd8:	9a03      	ldr	r2, [sp, #12]
    cdda:	4413      	add	r3, r2
    cddc:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    cdde:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cde0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cde2:	4413      	add	r3, r2
    cde4:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    cde6:	2300      	movs	r3, #0
    cde8:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    cdea:	9a03      	ldr	r2, [sp, #12]
    cdec:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    cdf0:	f7ff fc2a 	bl	c648 <uint64_to_str>
    cdf4:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    cdf6:	9b03      	ldr	r3, [sp, #12]
    cdf8:	2b00      	cmp	r3, #0
    cdfa:	d003      	beq.n	ce04 <am_util_stdio_vsprintf+0x404>
                {
                    pcBuf += iVal;
    cdfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cdfe:	9a03      	ldr	r2, [sp, #12]
    ce00:	4413      	add	r3, r2
    ce02:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    ce04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ce06:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ce08:	4413      	add	r3, r2
    ce0a:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    ce0c:	e0ea      	b.n	cfe4 <am_util_stdio_vsprintf+0x5e4>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    ce0e:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    ce12:	2b00      	cmp	r3, #0
    ce14:	d009      	beq.n	ce2a <am_util_stdio_vsprintf+0x42a>
    ce16:	9b01      	ldr	r3, [sp, #4]
    ce18:	3307      	adds	r3, #7
    ce1a:	f023 0307 	bic.w	r3, r3, #7
    ce1e:	f103 0208 	add.w	r2, r3, #8
    ce22:	9201      	str	r2, [sp, #4]
    ce24:	e9d3 8900 	ldrd	r8, r9, [r3]
    ce28:	e006      	b.n	ce38 <am_util_stdio_vsprintf+0x438>
                                     va_arg(pArgs, int32_t);
    ce2a:	9b01      	ldr	r3, [sp, #4]
    ce2c:	1d1a      	adds	r2, r3, #4
    ce2e:	9201      	str	r2, [sp, #4]
    ce30:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    ce32:	17da      	asrs	r2, r3, #31
    ce34:	4698      	mov	r8, r3
    ce36:	4691      	mov	r9, r2
    ce38:	e9cd 8908 	strd	r8, r9, [sp, #32]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    ce3c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    ce40:	2b00      	cmp	r3, #0
    ce42:	da0c      	bge.n	ce5e <am_util_stdio_vsprintf+0x45e>
                {
                    ui64Val = -i64Val;          // Get absolute value
    ce44:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    ce48:	2100      	movs	r1, #0
    ce4a:	f1d2 0a00 	rsbs	sl, r2, #0
    ce4e:	eb61 0b03 	sbc.w	fp, r1, r3
    ce52:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
                    bNeg = true;
    ce56:	2301      	movs	r3, #1
    ce58:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    ce5c:	e006      	b.n	ce6c <am_util_stdio_vsprintf+0x46c>
                }
                else
                {
                    ui64Val = i64Val;
    ce5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    ce62:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
                    bNeg = false;
    ce66:	2300      	movs	r3, #0
    ce68:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                }

                if ( iWidth )
    ce6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce6e:	2b00      	cmp	r3, #0
    ce70:	d04a      	beq.n	cf08 <am_util_stdio_vsprintf+0x508>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    ce72:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    ce76:	4610      	mov	r0, r2
    ce78:	4619      	mov	r1, r3
    ce7a:	f7ff fb63 	bl	c544 <ndigits_in_i64>
    ce7e:	4602      	mov	r2, r0
    ce80:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce82:	1a9b      	subs	r3, r3, r2
    ce84:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg )
    ce86:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    ce8a:	2b00      	cmp	r3, #0
    ce8c:	d011      	beq.n	ceb2 <am_util_stdio_vsprintf+0x4b2>
                    {
                        --iWidth;
    ce8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce90:	3b01      	subs	r3, #1
    ce92:	9310      	str	r3, [sp, #64]	; 0x40

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    ce94:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    ce98:	2b30      	cmp	r3, #48	; 0x30
    ce9a:	d10a      	bne.n	ceb2 <am_util_stdio_vsprintf+0x4b2>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    ce9c:	9b03      	ldr	r3, [sp, #12]
    ce9e:	2b00      	cmp	r3, #0
    cea0:	d004      	beq.n	ceac <am_util_stdio_vsprintf+0x4ac>
                            {
                                *pcBuf++ = '-';
    cea2:	9b03      	ldr	r3, [sp, #12]
    cea4:	1c5a      	adds	r2, r3, #1
    cea6:	9203      	str	r2, [sp, #12]
    cea8:	222d      	movs	r2, #45	; 0x2d
    ceaa:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    ceac:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ceae:	3301      	adds	r3, #1
    ceb0:	9311      	str	r3, [sp, #68]	; 0x44
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    ceb2:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    ceb6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ceb8:	4619      	mov	r1, r3
    ceba:	9803      	ldr	r0, [sp, #12]
    cebc:	f7ff fc7f 	bl	c7be <padbuffer>
    cec0:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    cec2:	9b03      	ldr	r3, [sp, #12]
    cec4:	2b00      	cmp	r3, #0
    cec6:	d001      	beq.n	cecc <am_util_stdio_vsprintf+0x4cc>
    cec8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ceca:	e000      	b.n	cece <am_util_stdio_vsprintf+0x4ce>
    cecc:	2300      	movs	r3, #0
    cece:	9a03      	ldr	r2, [sp, #12]
    ced0:	4413      	add	r3, r2
    ced2:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    ced4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ced6:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ced8:	4413      	add	r3, r2
    ceda:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    cedc:	2300      	movs	r3, #0
    cede:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    cee0:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    cee4:	2b00      	cmp	r3, #0
    cee6:	d01e      	beq.n	cf26 <am_util_stdio_vsprintf+0x526>
    cee8:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    ceec:	2b20      	cmp	r3, #32
    ceee:	d11a      	bne.n	cf26 <am_util_stdio_vsprintf+0x526>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    cef0:	9b03      	ldr	r3, [sp, #12]
    cef2:	2b00      	cmp	r3, #0
    cef4:	d004      	beq.n	cf00 <am_util_stdio_vsprintf+0x500>
                        {
                            *pcBuf++ = '-';
    cef6:	9b03      	ldr	r3, [sp, #12]
    cef8:	1c5a      	adds	r2, r3, #1
    cefa:	9203      	str	r2, [sp, #12]
    cefc:	222d      	movs	r2, #45	; 0x2d
    cefe:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    cf00:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cf02:	3301      	adds	r3, #1
    cf04:	9311      	str	r3, [sp, #68]	; 0x44
    cf06:	e00e      	b.n	cf26 <am_util_stdio_vsprintf+0x526>
                    }
                }
                else
                {
                    if ( bNeg )
    cf08:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    cf0c:	2b00      	cmp	r3, #0
    cf0e:	d00a      	beq.n	cf26 <am_util_stdio_vsprintf+0x526>
                    {
                        if ( pcBuf )
    cf10:	9b03      	ldr	r3, [sp, #12]
    cf12:	2b00      	cmp	r3, #0
    cf14:	d004      	beq.n	cf20 <am_util_stdio_vsprintf+0x520>
                        {
                            *pcBuf++ = '-';
    cf16:	9b03      	ldr	r3, [sp, #12]
    cf18:	1c5a      	adds	r2, r3, #1
    cf1a:	9203      	str	r2, [sp, #12]
    cf1c:	222d      	movs	r2, #45	; 0x2d
    cf1e:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    cf20:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cf22:	3301      	adds	r3, #1
    cf24:	9311      	str	r3, [sp, #68]	; 0x44
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    cf26:	9a03      	ldr	r2, [sp, #12]
    cf28:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    cf2c:	f7ff fb8c 	bl	c648 <uint64_to_str>
    cf30:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    cf32:	9b03      	ldr	r3, [sp, #12]
    cf34:	2b00      	cmp	r3, #0
    cf36:	d003      	beq.n	cf40 <am_util_stdio_vsprintf+0x540>
                {
                    pcBuf += iVal;
    cf38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cf3a:	9a03      	ldr	r2, [sp, #12]
    cf3c:	4413      	add	r3, r2
    cf3e:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    cf40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cf42:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cf44:	4413      	add	r3, r2
    cf46:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    cf48:	e04c      	b.n	cfe4 <am_util_stdio_vsprintf+0x5e4>


            case 'f':
            case 'F':
                if ( pcBuf )
    cf4a:	9b03      	ldr	r3, [sp, #12]
    cf4c:	2b00      	cmp	r3, #0
    cf4e:	d048      	beq.n	cfe2 <am_util_stdio_vsprintf+0x5e2>
                {
                    float fValue = va_arg(pArgs, double);
    cf50:	9b01      	ldr	r3, [sp, #4]
    cf52:	3307      	adds	r3, #7
    cf54:	f023 0307 	bic.w	r3, r3, #7
    cf58:	f103 0208 	add.w	r2, r3, #8
    cf5c:	9201      	str	r2, [sp, #4]
    cf5e:	e9d3 2300 	ldrd	r2, r3, [r3]
    cf62:	4610      	mov	r0, r2
    cf64:	4619      	mov	r1, r3
    cf66:	f7ff f8cb 	bl	c100 <__aeabi_d2f>
    cf6a:	4603      	mov	r3, r0
    cf6c:	9306      	str	r3, [sp, #24]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    cf6e:	9b03      	ldr	r3, [sp, #12]
    cf70:	2214      	movs	r2, #20
    cf72:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    cf74:	990e      	ldr	r1, [sp, #56]	; 0x38
    cf76:	9803      	ldr	r0, [sp, #12]
    cf78:	ed9d 0a06 	vldr	s0, [sp, #24]
    cf7c:	f7ff fc42 	bl	c804 <ftoa>
    cf80:	900f      	str	r0, [sp, #60]	; 0x3c
                    if ( iVal < 0 )
    cf82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cf84:	2b00      	cmp	r3, #0
    cf86:	da14      	bge.n	cfb2 <am_util_stdio_vsprintf+0x5b2>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    cf88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cf8a:	f1b3 3fff 	cmp.w	r3, #4294967295
    cf8e:	d102      	bne.n	cf96 <am_util_stdio_vsprintf+0x596>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    cf90:	4b1e      	ldr	r3, [pc, #120]	; (d00c <am_util_stdio_vsprintf+0x60c>)
    cf92:	930c      	str	r3, [sp, #48]	; 0x30
    cf94:	e008      	b.n	cfa8 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    cf96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cf98:	f113 0f02 	cmn.w	r3, #2
    cf9c:	d102      	bne.n	cfa4 <am_util_stdio_vsprintf+0x5a4>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    cf9e:	4b1c      	ldr	r3, [pc, #112]	; (d010 <am_util_stdio_vsprintf+0x610>)
    cfa0:	930c      	str	r3, [sp, #48]	; 0x30
    cfa2:	e001      	b.n	cfa8 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    cfa4:	4b1b      	ldr	r3, [pc, #108]	; (d014 <am_util_stdio_vsprintf+0x614>)
    cfa6:	930c      	str	r3, [sp, #48]	; 0x30
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    cfa8:	9b03      	ldr	r3, [sp, #12]
    cfaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cfac:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    cfae:	2303      	movs	r3, #3
    cfb0:	930f      	str	r3, [sp, #60]	; 0x3c
                    }
                    ui32CharCnt += iVal;
    cfb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cfb4:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cfb6:	4413      	add	r3, r2
    cfb8:	9311      	str	r3, [sp, #68]	; 0x44
                    pcBuf += iVal;
    cfba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cfbc:	9a03      	ldr	r2, [sp, #12]
    cfbe:	4413      	add	r3, r2
    cfc0:	9303      	str	r3, [sp, #12]
                }
                break;
    cfc2:	e00e      	b.n	cfe2 <am_util_stdio_vsprintf+0x5e2>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    cfc4:	9b03      	ldr	r3, [sp, #12]
    cfc6:	2b00      	cmp	r3, #0
    cfc8:	d005      	beq.n	cfd6 <am_util_stdio_vsprintf+0x5d6>
                {
                    *pcBuf++ = *pcFmt;
    cfca:	9b03      	ldr	r3, [sp, #12]
    cfcc:	1c5a      	adds	r2, r3, #1
    cfce:	9203      	str	r2, [sp, #12]
    cfd0:	9a02      	ldr	r2, [sp, #8]
    cfd2:	7812      	ldrb	r2, [r2, #0]
    cfd4:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    cfd6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cfd8:	3301      	adds	r3, #1
    cfda:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    cfdc:	e002      	b.n	cfe4 <am_util_stdio_vsprintf+0x5e4>
                break;
    cfde:	bf00      	nop
    cfe0:	e000      	b.n	cfe4 <am_util_stdio_vsprintf+0x5e4>
                break;
    cfe2:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    cfe4:	9b02      	ldr	r3, [sp, #8]
    cfe6:	3301      	adds	r3, #1
    cfe8:	9302      	str	r3, [sp, #8]
    while ( *pcFmt != 0x0 )
    cfea:	9b02      	ldr	r3, [sp, #8]
    cfec:	781b      	ldrb	r3, [r3, #0]
    cfee:	2b00      	cmp	r3, #0
    cff0:	f47f ad11 	bne.w	ca16 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    cff4:	9b03      	ldr	r3, [sp, #12]
    cff6:	2b00      	cmp	r3, #0
    cff8:	d002      	beq.n	d000 <am_util_stdio_vsprintf+0x600>
    {
        *pcBuf = 0x0;
    cffa:	9b03      	ldr	r3, [sp, #12]
    cffc:	2200      	movs	r2, #0
    cffe:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d000:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    d002:	4618      	mov	r0, r3
    d004:	b017      	add	sp, #92	; 0x5c
    d006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d00a:	bf00      	nop
    d00c:	00302e30 	.word	0x00302e30
    d010:	00232e23 	.word	0x00232e23
    d014:	003f2e3f 	.word	0x003f2e3f

0000d018 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d018:	b40f      	push	{r0, r1, r2, r3}
    d01a:	b500      	push	{lr}
    d01c:	b083      	sub	sp, #12
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d01e:	4b0c      	ldr	r3, [pc, #48]	; (d050 <am_util_stdio_printf+0x38>)
    d020:	681b      	ldr	r3, [r3, #0]
    d022:	2b00      	cmp	r3, #0
    d024:	d101      	bne.n	d02a <am_util_stdio_printf+0x12>
    {
        return 0;
    d026:	2300      	movs	r3, #0
    d028:	e00c      	b.n	d044 <am_util_stdio_printf+0x2c>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d02a:	ab05      	add	r3, sp, #20
    d02c:	9300      	str	r3, [sp, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d02e:	9a00      	ldr	r2, [sp, #0]
    d030:	9904      	ldr	r1, [sp, #16]
    d032:	4808      	ldr	r0, [pc, #32]	; (d054 <am_util_stdio_printf+0x3c>)
    d034:	f7ff fce4 	bl	ca00 <am_util_stdio_vsprintf>
    d038:	9001      	str	r0, [sp, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d03a:	4b05      	ldr	r3, [pc, #20]	; (d050 <am_util_stdio_printf+0x38>)
    d03c:	681b      	ldr	r3, [r3, #0]
    d03e:	4805      	ldr	r0, [pc, #20]	; (d054 <am_util_stdio_printf+0x3c>)
    d040:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d042:	9b01      	ldr	r3, [sp, #4]
}
    d044:	4618      	mov	r0, r3
    d046:	b003      	add	sp, #12
    d048:	f85d eb04 	ldr.w	lr, [sp], #4
    d04c:	b004      	add	sp, #16
    d04e:	4770      	bx	lr
    d050:	10001034 	.word	0x10001034
    d054:	10001038 	.word	0x10001038

0000d058 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    d058:	b508      	push	{r3, lr}
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d05a:	4802      	ldr	r0, [pc, #8]	; (d064 <am_util_stdio_terminal_clear+0xc>)
    d05c:	f7ff ffdc 	bl	d018 <am_util_stdio_printf>
}
    d060:	bf00      	nop
    d062:	bd08      	pop	{r3, pc}
    d064:	0000e818 	.word	0x0000e818

0000d068 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    d068:	4811      	ldr	r0, [pc, #68]	; (d0b0 <zero_loop+0x12>)
    d06a:	4912      	ldr	r1, [pc, #72]	; (d0b4 <zero_loop+0x16>)
    d06c:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    d06e:	f8d1 d000 	ldr.w	sp, [r1]

#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    d072:	4811      	ldr	r0, [pc, #68]	; (d0b8 <zero_loop+0x1a>)
    d074:	6801      	ldr	r1, [r0, #0]
    d076:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d07a:	6001      	str	r1, [r0, #0]
    d07c:	f3bf 8f4f 	dsb	sy
    d080:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    d084:	480d      	ldr	r0, [pc, #52]	; (d0bc <zero_loop+0x1e>)
    d086:	490e      	ldr	r1, [pc, #56]	; (d0c0 <zero_loop+0x22>)
    d088:	4a0e      	ldr	r2, [pc, #56]	; (d0c4 <zero_loop+0x26>)

0000d08a <copy_loop>:
    d08a:	f850 3b04 	ldr.w	r3, [r0], #4
    d08e:	f841 3b04 	str.w	r3, [r1], #4
    d092:	4291      	cmp	r1, r2
    d094:	dbf9      	blt.n	d08a <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    d096:	480c      	ldr	r0, [pc, #48]	; (d0c8 <zero_loop+0x2a>)
    d098:	490c      	ldr	r1, [pc, #48]	; (d0cc <zero_loop+0x2e>)
    d09a:	f04f 0200 	mov.w	r2, #0

0000d09e <zero_loop>:
    d09e:	4288      	cmp	r0, r1
    d0a0:	bfb8      	it	lt
    d0a2:	f840 2b04 	strlt.w	r2, [r0], #4
    d0a6:	dbfa      	blt.n	d09e <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    d0a8:	f7ff f87a 	bl	c1a0 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    d0ac:	be00      	bkpt	0x0000
}
    d0ae:	bf00      	nop
    d0b0:	e000ed08 	.word	0xe000ed08
    d0b4:	0000c000 	.word	0x0000c000
    d0b8:	e000ed88 	.word	0xe000ed88
    d0bc:	0000ecc0 	.word	0x0000ecc0
    d0c0:	10001000 	.word	0x10001000
    d0c4:	10001034 	.word	0x10001034
    d0c8:	10001034 	.word	0x10001034
    d0cc:	10001214 	.word	0x10001214

0000d0d0 <NMI_Handler>:
NMI_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d0d0:	e7fe      	b.n	d0d0 <NMI_Handler>

0000d0d2 <BusFault_Handler>:
HardFault_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d0d2:	e7fe      	b.n	d0d2 <BusFault_Handler>

0000d0d4 <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d0d4:	e7fe      	b.n	d0d4 <DebugMon_Handler>
	...

0000d0d8 <am_bsp_uart_string_print>:
    d0d8:	b530      	push	{r4, r5, lr}
    d0da:	b087      	sub	sp, #28
    d0dc:	7804      	ldrb	r4, [r0, #0]
    d0de:	2300      	movs	r3, #0
    d0e0:	4605      	mov	r5, r0
    d0e2:	9300      	str	r3, [sp, #0]
    d0e4:	b13c      	cbz	r4, d0f6 <am_bsp_uart_string_print+0x1e>
    d0e6:	4603      	mov	r3, r0
    d0e8:	f1c0 0101 	rsb	r1, r0, #1
    d0ec:	18cc      	adds	r4, r1, r3
    d0ee:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    d0f2:	2a00      	cmp	r2, #0
    d0f4:	d1fa      	bne.n	d0ec <am_bsp_uart_string_print+0x14>
    d0f6:	4b0a      	ldr	r3, [pc, #40]	; (d120 <am_bsp_uart_string_print+0x48>)
    d0f8:	f8cd d014 	str.w	sp, [sp, #20]
    d0fc:	6818      	ldr	r0, [r3, #0]
    d0fe:	2200      	movs	r2, #0
    d100:	f04f 33ff 	mov.w	r3, #4294967295
    d104:	a901      	add	r1, sp, #4
    d106:	e9cd 4303 	strd	r4, r3, [sp, #12]
    d10a:	e9cd 2501 	strd	r2, r5, [sp, #4]
    d10e:	f001 f8c9 	bl	e2a4 <am_hal_uart_transfer>
    d112:	9b00      	ldr	r3, [sp, #0]
    d114:	42a3      	cmp	r3, r4
    d116:	d000      	beq.n	d11a <am_bsp_uart_string_print+0x42>
    d118:	e7fe      	b.n	d118 <am_bsp_uart_string_print+0x40>
    d11a:	b007      	add	sp, #28
    d11c:	bd30      	pop	{r4, r5, pc}
    d11e:	bf00      	nop
    d120:	1000113c 	.word	0x1000113c

0000d124 <am_bsp_low_power_init>:
    d124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d126:	f000 fdeb 	bl	dd00 <am_hal_pwrctrl_low_power_init>
    d12a:	f000 fec7 	bl	debc <am_hal_rtc_osc_disable>
    d12e:	4b0b      	ldr	r3, [pc, #44]	; (d15c <am_bsp_low_power_init+0x38>)
    d130:	4f0b      	ldr	r7, [pc, #44]	; (d160 <am_bsp_low_power_init+0x3c>)
    d132:	681e      	ldr	r6, [r3, #0]
    d134:	2400      	movs	r4, #0
    d136:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    d13a:	4631      	mov	r1, r6
    d13c:	4628      	mov	r0, r5
    d13e:	f000 faf5 	bl	d72c <am_hal_gpio_pinconfig>
    d142:	2103      	movs	r1, #3
    d144:	4628      	mov	r0, r5
    d146:	f000 fc27 	bl	d998 <am_hal_gpio_state_write>
    d14a:	3401      	adds	r4, #1
    d14c:	2100      	movs	r1, #0
    d14e:	4628      	mov	r0, r5
    d150:	f000 fc22 	bl	d998 <am_hal_gpio_state_write>
    d154:	2c05      	cmp	r4, #5
    d156:	d1ee      	bne.n	d136 <am_bsp_low_power_init+0x12>
    d158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d15a:	bf00      	nop
    d15c:	0000e864 	.word	0x0000e864
    d160:	10001000 	.word	0x10001000

0000d164 <am_bsp_uart_printf_enable>:
    d164:	b510      	push	{r4, lr}
    d166:	4c10      	ldr	r4, [pc, #64]	; (d1a8 <am_bsp_uart_printf_enable+0x44>)
    d168:	4b10      	ldr	r3, [pc, #64]	; (d1ac <am_bsp_uart_printf_enable+0x48>)
    d16a:	4621      	mov	r1, r4
    d16c:	2202      	movs	r2, #2
    d16e:	2000      	movs	r0, #0
    d170:	601a      	str	r2, [r3, #0]
    d172:	f000 fee5 	bl	df40 <am_hal_uart_initialize>
    d176:	2200      	movs	r2, #0
    d178:	4611      	mov	r1, r2
    d17a:	6820      	ldr	r0, [r4, #0]
    d17c:	f000 ff1c 	bl	dfb8 <am_hal_uart_power_control>
    d180:	490b      	ldr	r1, [pc, #44]	; (d1b0 <am_bsp_uart_printf_enable+0x4c>)
    d182:	6820      	ldr	r0, [r4, #0]
    d184:	f000 ff90 	bl	e0a8 <am_hal_uart_configure>
    d188:	4b0a      	ldr	r3, [pc, #40]	; (d1b4 <am_bsp_uart_printf_enable+0x50>)
    d18a:	2016      	movs	r0, #22
    d18c:	6819      	ldr	r1, [r3, #0]
    d18e:	f000 facd 	bl	d72c <am_hal_gpio_pinconfig>
    d192:	4b09      	ldr	r3, [pc, #36]	; (d1b8 <am_bsp_uart_printf_enable+0x54>)
    d194:	2017      	movs	r0, #23
    d196:	6819      	ldr	r1, [r3, #0]
    d198:	f000 fac8 	bl	d72c <am_hal_gpio_pinconfig>
    d19c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d1a0:	4806      	ldr	r0, [pc, #24]	; (d1bc <am_bsp_uart_printf_enable+0x58>)
    d1a2:	f7ff b8b1 	b.w	c308 <am_util_stdio_printf_init>
    d1a6:	bf00      	nop
    d1a8:	1000113c 	.word	0x1000113c
    d1ac:	10001140 	.word	0x10001140
    d1b0:	0000e82c 	.word	0x0000e82c
    d1b4:	0000e858 	.word	0x0000e858
    d1b8:	0000e854 	.word	0x0000e854
    d1bc:	0000d0d9 	.word	0x0000d0d9

0000d1c0 <am_bsp_uart_printf_disable>:
    d1c0:	b510      	push	{r4, lr}
    d1c2:	4c0e      	ldr	r4, [pc, #56]	; (d1fc <am_bsp_uart_printf_disable+0x3c>)
    d1c4:	b082      	sub	sp, #8
    d1c6:	6820      	ldr	r0, [r4, #0]
    d1c8:	f001 fa6c 	bl	e6a4 <am_hal_uart_tx_flush>
    d1cc:	2000      	movs	r0, #0
    d1ce:	f7ff f89b 	bl	c308 <am_util_stdio_printf_init>
    d1d2:	2200      	movs	r2, #0
    d1d4:	2102      	movs	r1, #2
    d1d6:	6820      	ldr	r0, [r4, #0]
    d1d8:	f000 feee 	bl	dfb8 <am_hal_uart_power_control>
    d1dc:	6820      	ldr	r0, [r4, #0]
    d1de:	f000 fed7 	bl	df90 <am_hal_uart_deinitialize>
    d1e2:	4b07      	ldr	r3, [pc, #28]	; (d200 <am_bsp_uart_printf_disable+0x40>)
    d1e4:	2016      	movs	r0, #22
    d1e6:	6819      	ldr	r1, [r3, #0]
    d1e8:	9101      	str	r1, [sp, #4]
    d1ea:	f000 fa9f 	bl	d72c <am_hal_gpio_pinconfig>
    d1ee:	9901      	ldr	r1, [sp, #4]
    d1f0:	2017      	movs	r0, #23
    d1f2:	b002      	add	sp, #8
    d1f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d1f8:	f000 ba98 	b.w	d72c <am_hal_gpio_pinconfig>
    d1fc:	1000113c 	.word	0x1000113c
    d200:	0000e860 	.word	0x0000e860

0000d204 <am_hal_cachectrl_config>:
    d204:	b530      	push	{r4, r5, lr}
    d206:	b083      	sub	sp, #12
    d208:	4604      	mov	r4, r0
    d20a:	f000 fc09 	bl	da20 <am_hal_interrupt_master_disable>
    d20e:	4d0e      	ldr	r5, [pc, #56]	; (d248 <am_hal_cachectrl_config+0x44>)
    d210:	9001      	str	r0, [sp, #4]
    d212:	682b      	ldr	r3, [r5, #0]
    d214:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    d218:	602b      	str	r3, [r5, #0]
    d21a:	9801      	ldr	r0, [sp, #4]
    d21c:	f000 fc04 	bl	da28 <am_hal_interrupt_master_set>
    d220:	7863      	ldrb	r3, [r4, #1]
    d222:	7822      	ldrb	r2, [r4, #0]
    d224:	78a1      	ldrb	r1, [r4, #2]
    d226:	021b      	lsls	r3, r3, #8
    d228:	f403 7340 	and.w	r3, r3, #768	; 0x300
    d22c:	0112      	lsls	r2, r2, #4
    d22e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    d232:	b2d2      	uxtb	r2, r2
    d234:	4313      	orrs	r3, r2
    d236:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d23a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d23e:	2000      	movs	r0, #0
    d240:	602b      	str	r3, [r5, #0]
    d242:	b003      	add	sp, #12
    d244:	bd30      	pop	{r4, r5, pc}
    d246:	bf00      	nop
    d248:	40018000 	.word	0x40018000

0000d24c <am_hal_cachectrl_enable>:
    d24c:	4a03      	ldr	r2, [pc, #12]	; (d25c <am_hal_cachectrl_enable+0x10>)
    d24e:	6813      	ldr	r3, [r2, #0]
    d250:	f043 0301 	orr.w	r3, r3, #1
    d254:	2000      	movs	r0, #0
    d256:	6013      	str	r3, [r2, #0]
    d258:	4770      	bx	lr
    d25a:	bf00      	nop
    d25c:	40018000 	.word	0x40018000

0000d260 <am_hal_cachectrl_control>:
    d260:	b510      	push	{r4, lr}
    d262:	3801      	subs	r0, #1
    d264:	b08e      	sub	sp, #56	; 0x38
    d266:	2810      	cmp	r0, #16
    d268:	f200 815e 	bhi.w	d528 <am_hal_cachectrl_control+0x2c8>
    d26c:	e8df f010 	tbh	[pc, r0, lsl #1]
    d270:	00360018 	.word	0x00360018
    d274:	0040003d 	.word	0x0040003d
    d278:	00450043 	.word	0x00450043
    d27c:	0011001a 	.word	0x0011001a
    d280:	00540047 	.word	0x00540047
    d284:	009a0061 	.word	0x009a0061
    d288:	010c00d3 	.word	0x010c00d3
    d28c:	013f0126 	.word	0x013f0126
    d290:	001d      	.short	0x001d
    d292:	f44f 7300 	mov.w	r3, #512	; 0x200
    d296:	4aac      	ldr	r2, [pc, #688]	; (d548 <am_hal_cachectrl_control+0x2e8>)
    d298:	2000      	movs	r0, #0
    d29a:	6093      	str	r3, [r2, #8]
    d29c:	b00e      	add	sp, #56	; 0x38
    d29e:	bd10      	pop	{r4, pc}
    d2a0:	2301      	movs	r3, #1
    d2a2:	e7f8      	b.n	d296 <am_hal_cachectrl_control+0x36>
    d2a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    d2a8:	e7f5      	b.n	d296 <am_hal_cachectrl_control+0x36>
    d2aa:	2900      	cmp	r1, #0
    d2ac:	f000 813c 	beq.w	d528 <am_hal_cachectrl_control+0x2c8>
    d2b0:	684a      	ldr	r2, [r1, #4]
    d2b2:	48a6      	ldr	r0, [pc, #664]	; (d54c <am_hal_cachectrl_control+0x2ec>)
    d2b4:	4202      	tst	r2, r0
    d2b6:	f040 8137 	bne.w	d528 <am_hal_cachectrl_control+0x2c8>
    d2ba:	688b      	ldr	r3, [r1, #8]
    d2bc:	4018      	ands	r0, r3
    d2be:	f040 8133 	bne.w	d528 <am_hal_cachectrl_control+0x2c8>
    d2c2:	780c      	ldrb	r4, [r1, #0]
    d2c4:	2c00      	cmp	r4, #0
    d2c6:	f040 8133 	bne.w	d530 <am_hal_cachectrl_control+0x2d0>
    d2ca:	4c9f      	ldr	r4, [pc, #636]	; (d548 <am_hal_cachectrl_control+0x2e8>)
    d2cc:	7849      	ldrb	r1, [r1, #1]
    d2ce:	6122      	str	r2, [r4, #16]
    d2d0:	6163      	str	r3, [r4, #20]
    d2d2:	6823      	ldr	r3, [r4, #0]
    d2d4:	f361 0382 	bfi	r3, r1, #2, #1
    d2d8:	6023      	str	r3, [r4, #0]
    d2da:	e7df      	b.n	d29c <am_hal_cachectrl_control+0x3c>
    d2dc:	4b9a      	ldr	r3, [pc, #616]	; (d548 <am_hal_cachectrl_control+0x2e8>)
    d2de:	681b      	ldr	r3, [r3, #0]
    d2e0:	01db      	lsls	r3, r3, #7
    d2e2:	f140 811f 	bpl.w	d524 <am_hal_cachectrl_control+0x2c4>
    d2e6:	2302      	movs	r3, #2
    d2e8:	e7d5      	b.n	d296 <am_hal_cachectrl_control+0x36>
    d2ea:	f44f 6388 	mov.w	r3, #1088	; 0x440
    d2ee:	e7d2      	b.n	d296 <am_hal_cachectrl_control+0x36>
    d2f0:	f44f 7308 	mov.w	r3, #544	; 0x220
    d2f4:	e7cf      	b.n	d296 <am_hal_cachectrl_control+0x36>
    d2f6:	2340      	movs	r3, #64	; 0x40
    d2f8:	e7cd      	b.n	d296 <am_hal_cachectrl_control+0x36>
    d2fa:	2320      	movs	r3, #32
    d2fc:	e7cb      	b.n	d296 <am_hal_cachectrl_control+0x36>
    d2fe:	f000 fb8f 	bl	da20 <am_hal_interrupt_master_disable>
    d302:	4a91      	ldr	r2, [pc, #580]	; (d548 <am_hal_cachectrl_control+0x2e8>)
    d304:	9000      	str	r0, [sp, #0]
    d306:	6813      	ldr	r3, [r2, #0]
    d308:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    d30c:	6013      	str	r3, [r2, #0]
    d30e:	9800      	ldr	r0, [sp, #0]
    d310:	f000 fb8a 	bl	da28 <am_hal_interrupt_master_set>
    d314:	2000      	movs	r0, #0
    d316:	e7c1      	b.n	d29c <am_hal_cachectrl_control+0x3c>
    d318:	f000 fb82 	bl	da20 <am_hal_interrupt_master_disable>
    d31c:	4a8a      	ldr	r2, [pc, #552]	; (d548 <am_hal_cachectrl_control+0x2e8>)
    d31e:	9001      	str	r0, [sp, #4]
    d320:	6813      	ldr	r3, [r2, #0]
    d322:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    d326:	6013      	str	r3, [r2, #0]
    d328:	9801      	ldr	r0, [sp, #4]
    d32a:	f000 fb7d 	bl	da28 <am_hal_interrupt_master_set>
    d32e:	2000      	movs	r0, #0
    d330:	e7b4      	b.n	d29c <am_hal_cachectrl_control+0x3c>
    d332:	f000 fb75 	bl	da20 <am_hal_interrupt_master_disable>
    d336:	4603      	mov	r3, r0
    d338:	4885      	ldr	r0, [pc, #532]	; (d550 <am_hal_cachectrl_control+0x2f0>)
    d33a:	9302      	str	r3, [sp, #8]
    d33c:	f000 f9ec 	bl	d718 <am_hal_flash_load_ui32>
    d340:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d344:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d348:	4881      	ldr	r0, [pc, #516]	; (d550 <am_hal_cachectrl_control+0x2f0>)
    d34a:	f000 f9e9 	bl	d720 <am_hal_flash_store_ui32>
    d34e:	9802      	ldr	r0, [sp, #8]
    d350:	f000 fb6a 	bl	da28 <am_hal_interrupt_master_set>
    d354:	f000 fb64 	bl	da20 <am_hal_interrupt_master_disable>
    d358:	4603      	mov	r3, r0
    d35a:	487d      	ldr	r0, [pc, #500]	; (d550 <am_hal_cachectrl_control+0x2f0>)
    d35c:	9303      	str	r3, [sp, #12]
    d35e:	f000 f9db 	bl	d718 <am_hal_flash_load_ui32>
    d362:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d366:	f440 61ee 	orr.w	r1, r0, #1904	; 0x770
    d36a:	4879      	ldr	r0, [pc, #484]	; (d550 <am_hal_cachectrl_control+0x2f0>)
    d36c:	f000 f9d8 	bl	d720 <am_hal_flash_store_ui32>
    d370:	9803      	ldr	r0, [sp, #12]
    d372:	f000 fb59 	bl	da28 <am_hal_interrupt_master_set>
    d376:	f000 fb53 	bl	da20 <am_hal_interrupt_master_disable>
    d37a:	4603      	mov	r3, r0
    d37c:	4874      	ldr	r0, [pc, #464]	; (d550 <am_hal_cachectrl_control+0x2f0>)
    d37e:	9304      	str	r3, [sp, #16]
    d380:	f000 f9ca 	bl	d718 <am_hal_flash_load_ui32>
    d384:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d388:	f020 000f 	bic.w	r0, r0, #15
    d38c:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d390:	f041 0103 	orr.w	r1, r1, #3
    d394:	486e      	ldr	r0, [pc, #440]	; (d550 <am_hal_cachectrl_control+0x2f0>)
    d396:	f000 f9c3 	bl	d720 <am_hal_flash_store_ui32>
    d39a:	9804      	ldr	r0, [sp, #16]
    d39c:	f000 fb44 	bl	da28 <am_hal_interrupt_master_set>
    d3a0:	2000      	movs	r0, #0
    d3a2:	e77b      	b.n	d29c <am_hal_cachectrl_control+0x3c>
    d3a4:	f000 fb3c 	bl	da20 <am_hal_interrupt_master_disable>
    d3a8:	4603      	mov	r3, r0
    d3aa:	4869      	ldr	r0, [pc, #420]	; (d550 <am_hal_cachectrl_control+0x2f0>)
    d3ac:	9305      	str	r3, [sp, #20]
    d3ae:	f000 f9b3 	bl	d718 <am_hal_flash_load_ui32>
    d3b2:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d3b6:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    d3ba:	4865      	ldr	r0, [pc, #404]	; (d550 <am_hal_cachectrl_control+0x2f0>)
    d3bc:	f000 f9b0 	bl	d720 <am_hal_flash_store_ui32>
    d3c0:	9805      	ldr	r0, [sp, #20]
    d3c2:	f000 fb31 	bl	da28 <am_hal_interrupt_master_set>
    d3c6:	f000 fb2b 	bl	da20 <am_hal_interrupt_master_disable>
    d3ca:	4603      	mov	r3, r0
    d3cc:	4860      	ldr	r0, [pc, #384]	; (d550 <am_hal_cachectrl_control+0x2f0>)
    d3ce:	9306      	str	r3, [sp, #24]
    d3d0:	f000 f9a2 	bl	d718 <am_hal_flash_load_ui32>
    d3d4:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d3d8:	f440 61ea 	orr.w	r1, r0, #1872	; 0x750
    d3dc:	485c      	ldr	r0, [pc, #368]	; (d550 <am_hal_cachectrl_control+0x2f0>)
    d3de:	f000 f99f 	bl	d720 <am_hal_flash_store_ui32>
    d3e2:	9806      	ldr	r0, [sp, #24]
    d3e4:	f000 fb20 	bl	da28 <am_hal_interrupt_master_set>
    d3e8:	f000 fb1a 	bl	da20 <am_hal_interrupt_master_disable>
    d3ec:	4603      	mov	r3, r0
    d3ee:	4858      	ldr	r0, [pc, #352]	; (d550 <am_hal_cachectrl_control+0x2f0>)
    d3f0:	9307      	str	r3, [sp, #28]
    d3f2:	f000 f991 	bl	d718 <am_hal_flash_load_ui32>
    d3f6:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d3fa:	f020 000f 	bic.w	r0, r0, #15
    d3fe:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d402:	f041 0101 	orr.w	r1, r1, #1
    d406:	4852      	ldr	r0, [pc, #328]	; (d550 <am_hal_cachectrl_control+0x2f0>)
    d408:	f000 f98a 	bl	d720 <am_hal_flash_store_ui32>
    d40c:	9807      	ldr	r0, [sp, #28]
    d40e:	f000 fb0b 	bl	da28 <am_hal_interrupt_master_set>
    d412:	2000      	movs	r0, #0
    d414:	e742      	b.n	d29c <am_hal_cachectrl_control+0x3c>
    d416:	f000 fb03 	bl	da20 <am_hal_interrupt_master_disable>
    d41a:	4603      	mov	r3, r0
    d41c:	484c      	ldr	r0, [pc, #304]	; (d550 <am_hal_cachectrl_control+0x2f0>)
    d41e:	9308      	str	r3, [sp, #32]
    d420:	f000 f97a 	bl	d718 <am_hal_flash_load_ui32>
    d424:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d428:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    d42c:	4848      	ldr	r0, [pc, #288]	; (d550 <am_hal_cachectrl_control+0x2f0>)
    d42e:	f000 f977 	bl	d720 <am_hal_flash_store_ui32>
    d432:	9808      	ldr	r0, [sp, #32]
    d434:	f000 faf8 	bl	da28 <am_hal_interrupt_master_set>
    d438:	f000 faf2 	bl	da20 <am_hal_interrupt_master_disable>
    d43c:	4603      	mov	r3, r0
    d43e:	4844      	ldr	r0, [pc, #272]	; (d550 <am_hal_cachectrl_control+0x2f0>)
    d440:	9309      	str	r3, [sp, #36]	; 0x24
    d442:	f000 f969 	bl	d718 <am_hal_flash_load_ui32>
    d446:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d44a:	f440 61ec 	orr.w	r1, r0, #1888	; 0x760
    d44e:	4840      	ldr	r0, [pc, #256]	; (d550 <am_hal_cachectrl_control+0x2f0>)
    d450:	f000 f966 	bl	d720 <am_hal_flash_store_ui32>
    d454:	9809      	ldr	r0, [sp, #36]	; 0x24
    d456:	f000 fae7 	bl	da28 <am_hal_interrupt_master_set>
    d45a:	f000 fae1 	bl	da20 <am_hal_interrupt_master_disable>
    d45e:	4603      	mov	r3, r0
    d460:	483b      	ldr	r0, [pc, #236]	; (d550 <am_hal_cachectrl_control+0x2f0>)
    d462:	930a      	str	r3, [sp, #40]	; 0x28
    d464:	f000 f958 	bl	d718 <am_hal_flash_load_ui32>
    d468:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d46c:	f020 000f 	bic.w	r0, r0, #15
    d470:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d474:	f041 0101 	orr.w	r1, r1, #1
    d478:	4835      	ldr	r0, [pc, #212]	; (d550 <am_hal_cachectrl_control+0x2f0>)
    d47a:	f000 f951 	bl	d720 <am_hal_flash_store_ui32>
    d47e:	980a      	ldr	r0, [sp, #40]	; 0x28
    d480:	f000 fad2 	bl	da28 <am_hal_interrupt_master_set>
    d484:	2000      	movs	r0, #0
    d486:	e709      	b.n	d29c <am_hal_cachectrl_control+0x3c>
    d488:	2900      	cmp	r1, #0
    d48a:	d04d      	beq.n	d528 <am_hal_cachectrl_control+0x2c8>
    d48c:	680c      	ldr	r4, [r1, #0]
    d48e:	2c03      	cmp	r4, #3
    d490:	d84c      	bhi.n	d52c <am_hal_cachectrl_control+0x2cc>
    d492:	f000 fac5 	bl	da20 <am_hal_interrupt_master_disable>
    d496:	4603      	mov	r3, r0
    d498:	482d      	ldr	r0, [pc, #180]	; (d550 <am_hal_cachectrl_control+0x2f0>)
    d49a:	930b      	str	r3, [sp, #44]	; 0x2c
    d49c:	f000 f93c 	bl	d718 <am_hal_flash_load_ui32>
    d4a0:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d4a4:	ea40 3104 	orr.w	r1, r0, r4, lsl #12
    d4a8:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d4ac:	4828      	ldr	r0, [pc, #160]	; (d550 <am_hal_cachectrl_control+0x2f0>)
    d4ae:	f000 f937 	bl	d720 <am_hal_flash_store_ui32>
    d4b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d4b4:	f000 fab8 	bl	da28 <am_hal_interrupt_master_set>
    d4b8:	2000      	movs	r0, #0
    d4ba:	e6ef      	b.n	d29c <am_hal_cachectrl_control+0x3c>
    d4bc:	b3a1      	cbz	r1, d528 <am_hal_cachectrl_control+0x2c8>
    d4be:	680c      	ldr	r4, [r1, #0]
    d4c0:	2c07      	cmp	r4, #7
    d4c2:	d833      	bhi.n	d52c <am_hal_cachectrl_control+0x2cc>
    d4c4:	f000 faac 	bl	da20 <am_hal_interrupt_master_disable>
    d4c8:	4603      	mov	r3, r0
    d4ca:	4821      	ldr	r0, [pc, #132]	; (d550 <am_hal_cachectrl_control+0x2f0>)
    d4cc:	930c      	str	r3, [sp, #48]	; 0x30
    d4ce:	f000 f923 	bl	d718 <am_hal_flash_load_ui32>
    d4d2:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d4d6:	ea40 1104 	orr.w	r1, r0, r4, lsl #4
    d4da:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d4de:	481c      	ldr	r0, [pc, #112]	; (d550 <am_hal_cachectrl_control+0x2f0>)
    d4e0:	f000 f91e 	bl	d720 <am_hal_flash_store_ui32>
    d4e4:	980c      	ldr	r0, [sp, #48]	; 0x30
    d4e6:	f000 fa9f 	bl	da28 <am_hal_interrupt_master_set>
    d4ea:	2000      	movs	r0, #0
    d4ec:	e6d6      	b.n	d29c <am_hal_cachectrl_control+0x3c>
    d4ee:	b1d9      	cbz	r1, d528 <am_hal_cachectrl_control+0x2c8>
    d4f0:	680c      	ldr	r4, [r1, #0]
    d4f2:	2c0f      	cmp	r4, #15
    d4f4:	d81a      	bhi.n	d52c <am_hal_cachectrl_control+0x2cc>
    d4f6:	f000 fa93 	bl	da20 <am_hal_interrupt_master_disable>
    d4fa:	4603      	mov	r3, r0
    d4fc:	4814      	ldr	r0, [pc, #80]	; (d550 <am_hal_cachectrl_control+0x2f0>)
    d4fe:	930d      	str	r3, [sp, #52]	; 0x34
    d500:	f000 f90a 	bl	d718 <am_hal_flash_load_ui32>
    d504:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d508:	f020 000f 	bic.w	r0, r0, #15
    d50c:	ea40 0104 	orr.w	r1, r0, r4
    d510:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d514:	480e      	ldr	r0, [pc, #56]	; (d550 <am_hal_cachectrl_control+0x2f0>)
    d516:	f000 f903 	bl	d720 <am_hal_flash_store_ui32>
    d51a:	980d      	ldr	r0, [sp, #52]	; 0x34
    d51c:	f000 fa84 	bl	da28 <am_hal_interrupt_master_set>
    d520:	2000      	movs	r0, #0
    d522:	e6bb      	b.n	d29c <am_hal_cachectrl_control+0x3c>
    d524:	2007      	movs	r0, #7
    d526:	e6b9      	b.n	d29c <am_hal_cachectrl_control+0x3c>
    d528:	2006      	movs	r0, #6
    d52a:	e6b7      	b.n	d29c <am_hal_cachectrl_control+0x3c>
    d52c:	2001      	movs	r0, #1
    d52e:	e6b5      	b.n	d29c <am_hal_cachectrl_control+0x3c>
    d530:	2c01      	cmp	r4, #1
    d532:	d1f9      	bne.n	d528 <am_hal_cachectrl_control+0x2c8>
    d534:	4c04      	ldr	r4, [pc, #16]	; (d548 <am_hal_cachectrl_control+0x2e8>)
    d536:	7849      	ldrb	r1, [r1, #1]
    d538:	61a2      	str	r2, [r4, #24]
    d53a:	61e3      	str	r3, [r4, #28]
    d53c:	6823      	ldr	r3, [r4, #0]
    d53e:	f361 03c3 	bfi	r3, r1, #3, #1
    d542:	6023      	str	r3, [r4, #0]
    d544:	e6aa      	b.n	d29c <am_hal_cachectrl_control+0x3c>
    d546:	bf00      	nop
    d548:	40018000 	.word	0x40018000
    d54c:	f800000f 	.word	0xf800000f
    d550:	40018004 	.word	0x40018004

0000d554 <am_hal_clkgen_control>:
    d554:	4b49      	ldr	r3, [pc, #292]	; (d67c <am_hal_clkgen_control+0x128>)
    d556:	681a      	ldr	r2, [r3, #0]
    d558:	b912      	cbnz	r2, d560 <am_hal_clkgen_control+0xc>
    d55a:	4a49      	ldr	r2, [pc, #292]	; (d680 <am_hal_clkgen_control+0x12c>)
    d55c:	6812      	ldr	r2, [r2, #0]
    d55e:	601a      	str	r2, [r3, #0]
    d560:	2809      	cmp	r0, #9
    d562:	f200 8089 	bhi.w	d678 <am_hal_clkgen_control+0x124>
    d566:	e8df f000 	tbb	[pc, r0]
    d56a:	160d      	.short	0x160d
    d56c:	423a261e 	.word	0x423a261e
    d570:	055c544c 	.word	0x055c544c
    d574:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d578:	2000      	movs	r0, #0
    d57a:	6a1a      	ldr	r2, [r3, #32]
    d57c:	f36f 0200 	bfc	r2, #0, #1
    d580:	621a      	str	r2, [r3, #32]
    d582:	4770      	bx	lr
    d584:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d588:	2200      	movs	r2, #0
    d58a:	2147      	movs	r1, #71	; 0x47
    d58c:	6159      	str	r1, [r3, #20]
    d58e:	4610      	mov	r0, r2
    d590:	619a      	str	r2, [r3, #24]
    d592:	615a      	str	r2, [r3, #20]
    d594:	4770      	bx	lr
    d596:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d59a:	2000      	movs	r0, #0
    d59c:	899a      	ldrh	r2, [r3, #12]
    d59e:	f36f 0200 	bfc	r2, #0, #1
    d5a2:	819a      	strh	r2, [r3, #12]
    d5a4:	4770      	bx	lr
    d5a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d5aa:	2000      	movs	r0, #0
    d5ac:	899a      	ldrh	r2, [r3, #12]
    d5ae:	f36f 0241 	bfc	r2, #1, #1
    d5b2:	819a      	strh	r2, [r3, #12]
    d5b4:	4770      	bx	lr
    d5b6:	4a33      	ldr	r2, [pc, #204]	; (d684 <am_hal_clkgen_control+0x130>)
    d5b8:	68d3      	ldr	r3, [r2, #12]
    d5ba:	b2db      	uxtb	r3, r3
    d5bc:	2b21      	cmp	r3, #33	; 0x21
    d5be:	d106      	bne.n	d5ce <am_hal_clkgen_control+0x7a>
    d5c0:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    d5c4:	2101      	movs	r1, #1
    d5c6:	f361 2309 	bfi	r3, r1, #8, #2
    d5ca:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    d5ce:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d5d2:	2000      	movs	r0, #0
    d5d4:	8993      	ldrh	r3, [r2, #12]
    d5d6:	f043 0301 	orr.w	r3, r3, #1
    d5da:	8193      	strh	r3, [r2, #12]
    d5dc:	4770      	bx	lr
    d5de:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d5e2:	2000      	movs	r0, #0
    d5e4:	8993      	ldrh	r3, [r2, #12]
    d5e6:	f043 0302 	orr.w	r3, r3, #2
    d5ea:	8193      	strh	r3, [r2, #12]
    d5ec:	4770      	bx	lr
    d5ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d5f2:	2200      	movs	r2, #0
    d5f4:	2047      	movs	r0, #71	; 0x47
    d5f6:	2101      	movs	r1, #1
    d5f8:	6158      	str	r0, [r3, #20]
    d5fa:	6199      	str	r1, [r3, #24]
    d5fc:	4610      	mov	r0, r2
    d5fe:	615a      	str	r2, [r3, #20]
    d600:	4770      	bx	lr
    d602:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d606:	2000      	movs	r0, #0
    d608:	899a      	ldrh	r2, [r3, #12]
    d60a:	f36f 12c7 	bfc	r2, #7, #1
    d60e:	819a      	strh	r2, [r3, #12]
    d610:	4770      	bx	lr
    d612:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d616:	2000      	movs	r0, #0
    d618:	8993      	ldrh	r3, [r2, #12]
    d61a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d61e:	8193      	strh	r3, [r2, #12]
    d620:	4770      	bx	lr
    d622:	4a18      	ldr	r2, [pc, #96]	; (d684 <am_hal_clkgen_control+0x130>)
    d624:	68d3      	ldr	r3, [r2, #12]
    d626:	b2db      	uxtb	r3, r3
    d628:	2b21      	cmp	r3, #33	; 0x21
    d62a:	d00a      	beq.n	d642 <am_hal_clkgen_control+0xee>
    d62c:	b139      	cbz	r1, d63e <am_hal_clkgen_control+0xea>
    d62e:	680b      	ldr	r3, [r1, #0]
    d630:	f043 0301 	orr.w	r3, r3, #1
    d634:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d638:	2000      	movs	r0, #0
    d63a:	6213      	str	r3, [r2, #32]
    d63c:	4770      	bx	lr
    d63e:	4b12      	ldr	r3, [pc, #72]	; (d688 <am_hal_clkgen_control+0x134>)
    d640:	e7f8      	b.n	d634 <am_hal_clkgen_control+0xe0>
    d642:	b500      	push	{lr}
    d644:	b083      	sub	sp, #12
    d646:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    d64a:	9101      	str	r1, [sp, #4]
    d64c:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    d650:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    d654:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    d658:	f000 f818 	bl	d68c <am_hal_flash_delay>
    d65c:	9901      	ldr	r1, [sp, #4]
    d65e:	b149      	cbz	r1, d674 <am_hal_clkgen_control+0x120>
    d660:	680b      	ldr	r3, [r1, #0]
    d662:	f043 0301 	orr.w	r3, r3, #1
    d666:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d66a:	2000      	movs	r0, #0
    d66c:	6213      	str	r3, [r2, #32]
    d66e:	b003      	add	sp, #12
    d670:	f85d fb04 	ldr.w	pc, [sp], #4
    d674:	4b04      	ldr	r3, [pc, #16]	; (d688 <am_hal_clkgen_control+0x134>)
    d676:	e7f6      	b.n	d666 <am_hal_clkgen_control+0x112>
    d678:	2006      	movs	r0, #6
    d67a:	4770      	bx	lr
    d67c:	10001144 	.word	0x10001144
    d680:	4ffff000 	.word	0x4ffff000
    d684:	40020000 	.word	0x40020000
    d688:	0025b801 	.word	0x0025b801

0000d68c <am_hal_flash_delay>:
    d68c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    d692:	075b      	lsls	r3, r3, #29
    d694:	bf46      	itte	mi
    d696:	0040      	lslmi	r0, r0, #1
    d698:	230e      	movmi	r3, #14
    d69a:	230b      	movpl	r3, #11
    d69c:	4298      	cmp	r0, r3
    d69e:	d902      	bls.n	d6a6 <am_hal_flash_delay+0x1a>
    d6a0:	4a01      	ldr	r2, [pc, #4]	; (d6a8 <am_hal_flash_delay+0x1c>)
    d6a2:	1ac0      	subs	r0, r0, r3
    d6a4:	4710      	bx	r2
    d6a6:	4770      	bx	lr
    d6a8:	0800009d 	.word	0x0800009d

0000d6ac <am_hal_flash_delay_status_check>:
    d6ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d6b0:	f89d c020 	ldrb.w	ip, [sp, #32]
    d6b4:	f8df 805c 	ldr.w	r8, [pc, #92]	; d714 <am_hal_flash_delay_status_check+0x68>
    d6b8:	4604      	mov	r4, r0
    d6ba:	460d      	mov	r5, r1
    d6bc:	4616      	mov	r6, r2
    d6be:	461f      	mov	r7, r3
    d6c0:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    d6c4:	f1bc 0f00 	cmp.w	ip, #0
    d6c8:	d00a      	beq.n	d6e0 <am_hal_flash_delay_status_check+0x34>
    d6ca:	e01a      	b.n	d702 <am_hal_flash_delay_status_check+0x56>
    d6cc:	b1f4      	cbz	r4, d70c <am_hal_flash_delay_status_check+0x60>
    d6ce:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    d6d2:	f013 0f04 	tst.w	r3, #4
    d6d6:	bf0c      	ite	eq
    d6d8:	2005      	moveq	r0, #5
    d6da:	2012      	movne	r0, #18
    d6dc:	3c01      	subs	r4, #1
    d6de:	47c0      	blx	r8
    d6e0:	6828      	ldr	r0, [r5, #0]
    d6e2:	4030      	ands	r0, r6
    d6e4:	42b8      	cmp	r0, r7
    d6e6:	d0f1      	beq.n	d6cc <am_hal_flash_delay_status_check+0x20>
    d6e8:	2000      	movs	r0, #0
    d6ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d6ee:	b16c      	cbz	r4, d70c <am_hal_flash_delay_status_check+0x60>
    d6f0:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    d6f4:	f013 0f04 	tst.w	r3, #4
    d6f8:	bf0c      	ite	eq
    d6fa:	2005      	moveq	r0, #5
    d6fc:	2012      	movne	r0, #18
    d6fe:	3c01      	subs	r4, #1
    d700:	47c0      	blx	r8
    d702:	6828      	ldr	r0, [r5, #0]
    d704:	4030      	ands	r0, r6
    d706:	42b8      	cmp	r0, r7
    d708:	d1f1      	bne.n	d6ee <am_hal_flash_delay_status_check+0x42>
    d70a:	e7ed      	b.n	d6e8 <am_hal_flash_delay_status_check+0x3c>
    d70c:	2004      	movs	r0, #4
    d70e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d712:	bf00      	nop
    d714:	0800009d 	.word	0x0800009d

0000d718 <am_hal_flash_load_ui32>:
    d718:	4b00      	ldr	r3, [pc, #0]	; (d71c <am_hal_flash_load_ui32+0x4>)
    d71a:	4718      	bx	r3
    d71c:	08000075 	.word	0x08000075

0000d720 <am_hal_flash_store_ui32>:
    d720:	4b01      	ldr	r3, [pc, #4]	; (d728 <am_hal_flash_store_ui32+0x8>)
    d722:	f043 0301 	orr.w	r3, r3, #1
    d726:	4718      	bx	r3
    d728:	10001028 	.word	0x10001028

0000d72c <am_hal_gpio_pinconfig>:
    d72c:	2831      	cmp	r0, #49	; 0x31
    d72e:	f200 80c3 	bhi.w	d8b8 <am_hal_gpio_pinconfig+0x18c>
    d732:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d736:	4604      	mov	r4, r0
    d738:	f011 07e0 	ands.w	r7, r1, #224	; 0xe0
    d73c:	f001 0007 	and.w	r0, r1, #7
    d740:	b085      	sub	sp, #20
    d742:	f3c1 03c1 	ubfx	r3, r1, #3, #2
    d746:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    d74a:	d00f      	beq.n	d76c <am_hal_gpio_pinconfig+0x40>
    d74c:	f3c1 1642 	ubfx	r6, r1, #5, #3
    d750:	1db5      	adds	r5, r6, #6
    d752:	f005 0507 	and.w	r5, r5, #7
    d756:	2d03      	cmp	r5, #3
    d758:	f042 0201 	orr.w	r2, r2, #1
    d75c:	f240 80ae 	bls.w	d8bc <am_hal_gpio_pinconfig+0x190>
    d760:	2fc0      	cmp	r7, #192	; 0xc0
    d762:	f000 80e1 	beq.w	d928 <am_hal_gpio_pinconfig+0x1fc>
    d766:	2f20      	cmp	r7, #32
    d768:	f000 80e3 	beq.w	d932 <am_hal_gpio_pinconfig+0x206>
    d76c:	b163      	cbz	r3, d788 <am_hal_gpio_pinconfig+0x5c>
    d76e:	2b01      	cmp	r3, #1
    d770:	f000 80d3 	beq.w	d91a <am_hal_gpio_pinconfig+0x1ee>
    d774:	2b02      	cmp	r3, #2
    d776:	f040 80c9 	bne.w	d90c <am_hal_gpio_pinconfig+0x1e0>
    d77a:	4b79      	ldr	r3, [pc, #484]	; (d960 <am_hal_gpio_pinconfig+0x234>)
    d77c:	5d1b      	ldrb	r3, [r3, r4]
    d77e:	075b      	lsls	r3, r3, #29
    d780:	f140 80c4 	bpl.w	d90c <am_hal_gpio_pinconfig+0x1e0>
    d784:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    d788:	4b76      	ldr	r3, [pc, #472]	; (d964 <am_hal_gpio_pinconfig+0x238>)
    d78a:	5d1b      	ldrb	r3, [r3, r4]
    d78c:	4103      	asrs	r3, r0
    d78e:	005b      	lsls	r3, r3, #1
    d790:	f003 0302 	and.w	r3, r3, #2
    d794:	4313      	orrs	r3, r2
    d796:	4a74      	ldr	r2, [pc, #464]	; (d968 <am_hal_gpio_pinconfig+0x23c>)
    d798:	5d12      	ldrb	r2, [r2, r4]
    d79a:	4282      	cmp	r2, r0
    d79c:	f000 8099 	beq.w	d8d2 <am_hal_gpio_pinconfig+0x1a6>
    d7a0:	f3c1 3000 	ubfx	r0, r1, #12, #1
    d7a4:	f3c1 2581 	ubfx	r5, r1, #10, #2
    d7a8:	f3c1 3280 	ubfx	r2, r1, #14, #1
    d7ac:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    d7b0:	0a88      	lsrs	r0, r1, #10
    d7b2:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    d7b6:	f000 0008 	and.w	r0, r0, #8
    d7ba:	4302      	orrs	r2, r0
    d7bc:	f3c1 2007 	ubfx	r0, r1, #8, #8
    d7c0:	f000 050c 	and.w	r5, r0, #12
    d7c4:	2d04      	cmp	r5, #4
    d7c6:	f000 80a5 	beq.w	d914 <am_hal_gpio_pinconfig+0x1e8>
    d7ca:	4d68      	ldr	r5, [pc, #416]	; (d96c <am_hal_gpio_pinconfig+0x240>)
    d7cc:	682d      	ldr	r5, [r5, #0]
    d7ce:	eba1 0805 	sub.w	r8, r1, r5
    d7d2:	fab8 f888 	clz	r8, r8
    d7d6:	ea4f 1858 	mov.w	r8, r8, lsr #5
    d7da:	f010 0f60 	tst.w	r0, #96	; 0x60
    d7de:	bf04      	itt	eq
    d7e0:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
    d7e4:	f360 0200 	bfieq	r2, r0, #0, #1
    d7e8:	00a0      	lsls	r0, r4, #2
    d7ea:	f3c1 2101 	ubfx	r1, r1, #8, #2
    d7ee:	2902      	cmp	r1, #2
    d7f0:	d05c      	beq.n	d8ac <am_hal_gpio_pinconfig+0x180>
    d7f2:	2903      	cmp	r1, #3
    d7f4:	d058      	beq.n	d8a8 <am_hal_gpio_pinconfig+0x17c>
    d7f6:	2901      	cmp	r1, #1
    d7f8:	ea4f 01c4 	mov.w	r1, r4, lsl #3
    d7fc:	bf08      	it	eq
    d7fe:	f043 0304 	orreq.w	r3, r3, #4
    d802:	f001 0118 	and.w	r1, r1, #24
    d806:	2700      	movs	r7, #0
    d808:	f000 001c 	and.w	r0, r0, #28
    d80c:	fa02 f600 	lsl.w	r6, r2, r0
    d810:	220f      	movs	r2, #15
    d812:	4082      	lsls	r2, r0
    d814:	43d2      	mvns	r2, r2
    d816:	f04f 09ff 	mov.w	r9, #255	; 0xff
    d81a:	fa03 f501 	lsl.w	r5, r3, r1
    d81e:	fa09 f901 	lsl.w	r9, r9, r1
    d822:	9201      	str	r2, [sp, #4]
    d824:	f000 f8fc 	bl	da20 <am_hal_interrupt_master_disable>
    d828:	f024 0a03 	bic.w	sl, r4, #3
    d82c:	ea4f 0b54 	mov.w	fp, r4, lsr #1
    d830:	f10a 4c80 	add.w	ip, sl, #1073741824	; 0x40000000
    d834:	4b4e      	ldr	r3, [pc, #312]	; (d970 <am_hal_gpio_pinconfig+0x244>)
    d836:	494f      	ldr	r1, [pc, #316]	; (d974 <am_hal_gpio_pinconfig+0x248>)
    d838:	9a01      	ldr	r2, [sp, #4]
    d83a:	9003      	str	r0, [sp, #12]
    d83c:	ea6f 0909 	mvn.w	r9, r9
    d840:	f02b 0b03 	bic.w	fp, fp, #3
    d844:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
    d848:	f1b8 0f00 	cmp.w	r8, #0
    d84c:	d00b      	beq.n	d866 <am_hal_gpio_pinconfig+0x13a>
    d84e:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
    d852:	f004 081f 	and.w	r8, r4, #31
    d856:	4848      	ldr	r0, [pc, #288]	; (d978 <am_hal_gpio_pinconfig+0x24c>)
    d858:	f00e 0e04 	and.w	lr, lr, #4
    d85c:	2401      	movs	r4, #1
    d85e:	fa04 f408 	lsl.w	r4, r4, r8
    d862:	f84e 4000 	str.w	r4, [lr, r0]
    d866:	4845      	ldr	r0, [pc, #276]	; (d97c <am_hal_gpio_pinconfig+0x250>)
    d868:	2473      	movs	r4, #115	; 0x73
    d86a:	6604      	str	r4, [r0, #96]	; 0x60
    d86c:	f8dc 4000 	ldr.w	r4, [ip]
    d870:	ea04 0409 	and.w	r4, r4, r9
    d874:	4325      	orrs	r5, r4
    d876:	f8cc 5000 	str.w	r5, [ip]
    d87a:	f85b 4003 	ldr.w	r4, [fp, r3]
    d87e:	4022      	ands	r2, r4
    d880:	4332      	orrs	r2, r6
    d882:	f84b 2003 	str.w	r2, [fp, r3]
    d886:	f85a 3001 	ldr.w	r3, [sl, r1]
    d88a:	ea03 0909 	and.w	r9, r3, r9
    d88e:	2400      	movs	r4, #0
    d890:	ea49 0707 	orr.w	r7, r9, r7
    d894:	f84a 7001 	str.w	r7, [sl, r1]
    d898:	6604      	str	r4, [r0, #96]	; 0x60
    d89a:	9803      	ldr	r0, [sp, #12]
    d89c:	f000 f8c4 	bl	da28 <am_hal_interrupt_master_set>
    d8a0:	4620      	mov	r0, r4
    d8a2:	b005      	add	sp, #20
    d8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d8a8:	f043 0304 	orr.w	r3, r3, #4
    d8ac:	00e1      	lsls	r1, r4, #3
    d8ae:	f001 0118 	and.w	r1, r1, #24
    d8b2:	2701      	movs	r7, #1
    d8b4:	408f      	lsls	r7, r1
    d8b6:	e7a7      	b.n	d808 <am_hal_gpio_pinconfig+0xdc>
    d8b8:	2006      	movs	r0, #6
    d8ba:	4770      	bx	lr
    d8bc:	4d28      	ldr	r5, [pc, #160]	; (d960 <am_hal_gpio_pinconfig+0x234>)
    d8be:	5d2d      	ldrb	r5, [r5, r4]
    d8c0:	3e02      	subs	r6, #2
    d8c2:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    d8c6:	07ee      	lsls	r6, r5, #31
    d8c8:	d536      	bpl.n	d938 <am_hal_gpio_pinconfig+0x20c>
    d8ca:	2b00      	cmp	r3, #0
    d8cc:	f43f af5c 	beq.w	d788 <am_hal_gpio_pinconfig+0x5c>
    d8d0:	e74d      	b.n	d76e <am_hal_gpio_pinconfig+0x42>
    d8d2:	f3c1 4202 	ubfx	r2, r1, #16, #3
    d8d6:	2a07      	cmp	r2, #7
    d8d8:	d030      	beq.n	d93c <am_hal_gpio_pinconfig+0x210>
    d8da:	4d29      	ldr	r5, [pc, #164]	; (d980 <am_hal_gpio_pinconfig+0x254>)
    d8dc:	f3c1 40c1 	ubfx	r0, r1, #19, #2
    d8e0:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    d8e4:	f815 0024 	ldrb.w	r0, [r5, r4, lsl #2]
    d8e8:	4290      	cmp	r0, r2
    d8ea:	d029      	beq.n	d940 <am_hal_gpio_pinconfig+0x214>
    d8ec:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    d8f0:	00a0      	lsls	r0, r4, #2
    d8f2:	786e      	ldrb	r6, [r5, #1]
    d8f4:	4296      	cmp	r6, r2
    d8f6:	d02d      	beq.n	d954 <am_hal_gpio_pinconfig+0x228>
    d8f8:	78ae      	ldrb	r6, [r5, #2]
    d8fa:	4296      	cmp	r6, r2
    d8fc:	d02c      	beq.n	d958 <am_hal_gpio_pinconfig+0x22c>
    d8fe:	78ed      	ldrb	r5, [r5, #3]
    d900:	4295      	cmp	r5, r2
    d902:	d02b      	beq.n	d95c <am_hal_gpio_pinconfig+0x230>
    d904:	481f      	ldr	r0, [pc, #124]	; (d984 <am_hal_gpio_pinconfig+0x258>)
    d906:	b005      	add	sp, #20
    d908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d90c:	481e      	ldr	r0, [pc, #120]	; (d988 <am_hal_gpio_pinconfig+0x25c>)
    d90e:	b005      	add	sp, #20
    d910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d914:	f04f 0801 	mov.w	r8, #1
    d918:	e75f      	b.n	d7da <am_hal_gpio_pinconfig+0xae>
    d91a:	4b11      	ldr	r3, [pc, #68]	; (d960 <am_hal_gpio_pinconfig+0x234>)
    d91c:	5d1b      	ldrb	r3, [r3, r4]
    d91e:	079d      	lsls	r5, r3, #30
    d920:	d5f4      	bpl.n	d90c <am_hal_gpio_pinconfig+0x1e0>
    d922:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    d926:	e72f      	b.n	d788 <am_hal_gpio_pinconfig+0x5c>
    d928:	2c14      	cmp	r4, #20
    d92a:	f43f af1f 	beq.w	d76c <am_hal_gpio_pinconfig+0x40>
    d92e:	4817      	ldr	r0, [pc, #92]	; (d98c <am_hal_gpio_pinconfig+0x260>)
    d930:	e7b7      	b.n	d8a2 <am_hal_gpio_pinconfig+0x176>
    d932:	2c14      	cmp	r4, #20
    d934:	f47f af1a 	bne.w	d76c <am_hal_gpio_pinconfig+0x40>
    d938:	4815      	ldr	r0, [pc, #84]	; (d990 <am_hal_gpio_pinconfig+0x264>)
    d93a:	e7b2      	b.n	d8a2 <am_hal_gpio_pinconfig+0x176>
    d93c:	4815      	ldr	r0, [pc, #84]	; (d994 <am_hal_gpio_pinconfig+0x268>)
    d93e:	e7b0      	b.n	d8a2 <am_hal_gpio_pinconfig+0x176>
    d940:	2200      	movs	r2, #0
    d942:	00a0      	lsls	r0, r4, #2
    d944:	0052      	lsls	r2, r2, #1
    d946:	f3c1 5540 	ubfx	r5, r1, #21, #1
    d94a:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
    d94e:	f04f 0800 	mov.w	r8, #0
    d952:	e74a      	b.n	d7ea <am_hal_gpio_pinconfig+0xbe>
    d954:	2201      	movs	r2, #1
    d956:	e7f5      	b.n	d944 <am_hal_gpio_pinconfig+0x218>
    d958:	2202      	movs	r2, #2
    d95a:	e7f3      	b.n	d944 <am_hal_gpio_pinconfig+0x218>
    d95c:	2203      	movs	r2, #3
    d95e:	e7f1      	b.n	d944 <am_hal_gpio_pinconfig+0x218>
    d960:	0000e868 	.word	0x0000e868
    d964:	0000e89c 	.word	0x0000e89c
    d968:	0000e998 	.word	0x0000e998
    d96c:	0000e860 	.word	0x0000e860
    d970:	40010040 	.word	0x40010040
    d974:	400100e0 	.word	0x400100e0
    d978:	400100b4 	.word	0x400100b4
    d97c:	40010000 	.word	0x40010000
    d980:	0000e8d0 	.word	0x0000e8d0
    d984:	08000104 	.word	0x08000104
    d988:	08000102 	.word	0x08000102
    d98c:	08000101 	.word	0x08000101
    d990:	08000100 	.word	0x08000100
    d994:	08000103 	.word	0x08000103

0000d998 <am_hal_gpio_state_write>:
    d998:	2831      	cmp	r0, #49	; 0x31
    d99a:	d81a      	bhi.n	d9d2 <am_hal_gpio_state_write+0x3a>
    d99c:	b570      	push	{r4, r5, r6, lr}
    d99e:	2905      	cmp	r1, #5
    d9a0:	b082      	sub	sp, #8
    d9a2:	460d      	mov	r5, r1
    d9a4:	d812      	bhi.n	d9cc <am_hal_gpio_state_write+0x34>
    d9a6:	f000 031f 	and.w	r3, r0, #31
    d9aa:	2201      	movs	r2, #1
    d9ac:	08c0      	lsrs	r0, r0, #3
    d9ae:	fa02 f603 	lsl.w	r6, r2, r3
    d9b2:	f000 0404 	and.w	r4, r0, #4
    d9b6:	f000 f833 	bl	da20 <am_hal_interrupt_master_disable>
    d9ba:	3d01      	subs	r5, #1
    d9bc:	9001      	str	r0, [sp, #4]
    d9be:	2d04      	cmp	r5, #4
    d9c0:	d821      	bhi.n	da06 <am_hal_gpio_state_write+0x6e>
    d9c2:	e8df f005 	tbb	[pc, r5]
    d9c6:	1512      	.short	0x1512
    d9c8:	1d1a      	.short	0x1d1a
    d9ca:	08          	.byte	0x08
    d9cb:	00          	.byte	0x00
    d9cc:	2006      	movs	r0, #6
    d9ce:	b002      	add	sp, #8
    d9d0:	bd70      	pop	{r4, r5, r6, pc}
    d9d2:	2005      	movs	r0, #5
    d9d4:	4770      	bx	lr
    d9d6:	4a0d      	ldr	r2, [pc, #52]	; (da0c <am_hal_gpio_state_write+0x74>)
    d9d8:	58a3      	ldr	r3, [r4, r2]
    d9da:	4073      	eors	r3, r6
    d9dc:	50a3      	str	r3, [r4, r2]
    d9de:	9801      	ldr	r0, [sp, #4]
    d9e0:	f000 f822 	bl	da28 <am_hal_interrupt_master_set>
    d9e4:	2000      	movs	r0, #0
    d9e6:	b002      	add	sp, #8
    d9e8:	bd70      	pop	{r4, r5, r6, pc}
    d9ea:	4b09      	ldr	r3, [pc, #36]	; (da10 <am_hal_gpio_state_write+0x78>)
    d9ec:	50e6      	str	r6, [r4, r3]
    d9ee:	e7f6      	b.n	d9de <am_hal_gpio_state_write+0x46>
    d9f0:	4a08      	ldr	r2, [pc, #32]	; (da14 <am_hal_gpio_state_write+0x7c>)
    d9f2:	58a3      	ldr	r3, [r4, r2]
    d9f4:	4073      	eors	r3, r6
    d9f6:	50a3      	str	r3, [r4, r2]
    d9f8:	e7f1      	b.n	d9de <am_hal_gpio_state_write+0x46>
    d9fa:	4b04      	ldr	r3, [pc, #16]	; (da0c <am_hal_gpio_state_write+0x74>)
    d9fc:	50e6      	str	r6, [r4, r3]
    d9fe:	e7ee      	b.n	d9de <am_hal_gpio_state_write+0x46>
    da00:	4b05      	ldr	r3, [pc, #20]	; (da18 <am_hal_gpio_state_write+0x80>)
    da02:	50e6      	str	r6, [r4, r3]
    da04:	e7eb      	b.n	d9de <am_hal_gpio_state_write+0x46>
    da06:	4b05      	ldr	r3, [pc, #20]	; (da1c <am_hal_gpio_state_write+0x84>)
    da08:	50e6      	str	r6, [r4, r3]
    da0a:	e7e8      	b.n	d9de <am_hal_gpio_state_write+0x46>
    da0c:	400100b4 	.word	0x400100b4
    da10:	40010090 	.word	0x40010090
    da14:	40010088 	.word	0x40010088
    da18:	400100a8 	.word	0x400100a8
    da1c:	40010098 	.word	0x40010098

0000da20 <am_hal_interrupt_master_disable>:
    da20:	f3ef 8010 	mrs	r0, PRIMASK
    da24:	b672      	cpsid	i
    da26:	4770      	bx	lr

0000da28 <am_hal_interrupt_master_set>:
    da28:	f380 8810 	msr	PRIMASK, r0
    da2c:	4770      	bx	lr
    da2e:	bf00      	nop

0000da30 <am_hal_mcuctrl_info_get>:
    da30:	2900      	cmp	r1, #0
    da32:	f000 808f 	beq.w	db54 <am_hal_mcuctrl_info_get+0x124>
    da36:	2801      	cmp	r0, #1
    da38:	b430      	push	{r4, r5}
    da3a:	d006      	beq.n	da4a <am_hal_mcuctrl_info_get+0x1a>
    da3c:	2802      	cmp	r0, #2
    da3e:	d06d      	beq.n	db1c <am_hal_mcuctrl_info_get+0xec>
    da40:	2800      	cmp	r0, #0
    da42:	d055      	beq.n	daf0 <am_hal_mcuctrl_info_get+0xc0>
    da44:	2006      	movs	r0, #6
    da46:	bc30      	pop	{r4, r5}
    da48:	4770      	bx	lr
    da4a:	4a43      	ldr	r2, [pc, #268]	; (db58 <am_hal_mcuctrl_info_get+0x128>)
    da4c:	4843      	ldr	r0, [pc, #268]	; (db5c <am_hal_mcuctrl_info_get+0x12c>)
    da4e:	6813      	ldr	r3, [r2, #0]
    da50:	600b      	str	r3, [r1, #0]
    da52:	6854      	ldr	r4, [r2, #4]
    da54:	604c      	str	r4, [r1, #4]
    da56:	6894      	ldr	r4, [r2, #8]
    da58:	608c      	str	r4, [r1, #8]
    da5a:	68d4      	ldr	r4, [r2, #12]
    da5c:	60cc      	str	r4, [r1, #12]
    da5e:	f3c3 5503 	ubfx	r5, r3, #20, #4
    da62:	6914      	ldr	r4, [r2, #16]
    da64:	610c      	str	r4, [r1, #16]
    da66:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    da6a:	4c3d      	ldr	r4, [pc, #244]	; (db60 <am_hal_mcuctrl_info_get+0x130>)
    da6c:	6950      	ldr	r0, [r2, #20]
    da6e:	6148      	str	r0, [r1, #20]
    da70:	f003 0201 	and.w	r2, r3, #1
    da74:	f3c3 4303 	ubfx	r3, r3, #16, #4
    da78:	e9c1 2506 	strd	r2, r5, [r1, #24]
    da7c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    da80:	4a38      	ldr	r2, [pc, #224]	; (db64 <am_hal_mcuctrl_info_get+0x134>)
    da82:	620b      	str	r3, [r1, #32]
    da84:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    da88:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    da8c:	b2db      	uxtb	r3, r3
    da8e:	f000 000f 	and.w	r0, r0, #15
    da92:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    da96:	624b      	str	r3, [r1, #36]	; 0x24
    da98:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    da9c:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
    daa0:	f3c3 1303 	ubfx	r3, r3, #4, #4
    daa4:	f000 000f 	and.w	r0, r0, #15
    daa8:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
    daac:	628b      	str	r3, [r1, #40]	; 0x28
    daae:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    dab2:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
    dab6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    daba:	f3c0 1003 	ubfx	r0, r0, #4, #4
    dabe:	4303      	orrs	r3, r0
    dac0:	62cb      	str	r3, [r1, #44]	; 0x2c
    dac2:	f8d2 40fc 	ldr.w	r4, [r2, #252]	; 0xfc
    dac6:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    daca:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    dace:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    dad2:	b2db      	uxtb	r3, r3
    dad4:	041b      	lsls	r3, r3, #16
    dad6:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    dada:	fa5f fc82 	uxtb.w	ip, r2
    dade:	ea43 030c 	orr.w	r3, r3, ip
    dae2:	b2c2      	uxtb	r2, r0
    dae4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    dae8:	630b      	str	r3, [r1, #48]	; 0x30
    daea:	2000      	movs	r0, #0
    daec:	bc30      	pop	{r4, r5}
    daee:	4770      	bx	lr
    daf0:	4a19      	ldr	r2, [pc, #100]	; (db58 <am_hal_mcuctrl_info_get+0x128>)
    daf2:	6993      	ldr	r3, [r2, #24]
    daf4:	f3c3 1480 	ubfx	r4, r3, #6, #1
    daf8:	700c      	strb	r4, [r1, #0]
    dafa:	f8d2 41a0 	ldr.w	r4, [r2, #416]	; 0x1a0
    dafe:	f3c3 0380 	ubfx	r3, r3, #2, #1
    db02:	704b      	strb	r3, [r1, #1]
    db04:	f3c4 6381 	ubfx	r3, r4, #26, #2
    db08:	710b      	strb	r3, [r1, #4]
    db0a:	6953      	ldr	r3, [r2, #20]
    db0c:	f3c3 0240 	ubfx	r2, r3, #1, #1
    db10:	f003 0301 	and.w	r3, r3, #1
    db14:	bc30      	pop	{r4, r5}
    db16:	708a      	strb	r2, [r1, #2]
    db18:	70cb      	strb	r3, [r1, #3]
    db1a:	4770      	bx	lr
    db1c:	4a0e      	ldr	r2, [pc, #56]	; (db58 <am_hal_mcuctrl_info_get+0x128>)
    db1e:	6848      	ldr	r0, [r1, #4]
    db20:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    db24:	f003 0401 	and.w	r4, r3, #1
    db28:	700c      	strb	r4, [r1, #0]
    db2a:	f3c3 0440 	ubfx	r4, r3, #1, #1
    db2e:	720c      	strb	r4, [r1, #8]
    db30:	f8d2 41c4 	ldr.w	r4, [r2, #452]	; 0x1c4
    db34:	60cc      	str	r4, [r1, #12]
    db36:	f8d2 41c0 	ldr.w	r4, [r2, #448]	; 0x1c0
    db3a:	4320      	orrs	r0, r4
    db3c:	f3c3 0380 	ubfx	r3, r3, #2, #1
    db40:	6048      	str	r0, [r1, #4]
    db42:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    db46:	740b      	strb	r3, [r1, #16]
    db48:	694b      	ldr	r3, [r1, #20]
    db4a:	4313      	orrs	r3, r2
    db4c:	2000      	movs	r0, #0
    db4e:	bc30      	pop	{r4, r5}
    db50:	614b      	str	r3, [r1, #20]
    db52:	4770      	bx	lr
    db54:	2006      	movs	r0, #6
    db56:	4770      	bx	lr
    db58:	40020000 	.word	0x40020000
    db5c:	0000e9cc 	.word	0x0000e9cc
    db60:	0000ea0c 	.word	0x0000ea0c
    db64:	f0000f00 	.word	0xf0000f00

0000db68 <am_hal_pwrctrl_periph_enable>:
    db68:	b570      	push	{r4, r5, r6, lr}
    db6a:	b082      	sub	sp, #8
    db6c:	4604      	mov	r4, r0
    db6e:	f7ff ff57 	bl	da20 <am_hal_interrupt_master_disable>
    db72:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    db76:	4e0f      	ldr	r6, [pc, #60]	; (dbb4 <am_hal_pwrctrl_periph_enable+0x4c>)
    db78:	4d0f      	ldr	r5, [pc, #60]	; (dbb8 <am_hal_pwrctrl_periph_enable+0x50>)
    db7a:	9001      	str	r0, [sp, #4]
    db7c:	00a4      	lsls	r4, r4, #2
    db7e:	68b3      	ldr	r3, [r6, #8]
    db80:	592a      	ldr	r2, [r5, r4]
    db82:	4313      	orrs	r3, r2
    db84:	60b3      	str	r3, [r6, #8]
    db86:	9801      	ldr	r0, [sp, #4]
    db88:	442c      	add	r4, r5
    db8a:	f7ff ff4d 	bl	da28 <am_hal_interrupt_master_set>
    db8e:	20a0      	movs	r0, #160	; 0xa0
    db90:	f7ff fd7c 	bl	d68c <am_hal_flash_delay>
    db94:	69b3      	ldr	r3, [r6, #24]
    db96:	6864      	ldr	r4, [r4, #4]
    db98:	4223      	tst	r3, r4
    db9a:	d103      	bne.n	dba4 <am_hal_pwrctrl_periph_enable+0x3c>
    db9c:	20a0      	movs	r0, #160	; 0xa0
    db9e:	f7ff fd75 	bl	d68c <am_hal_flash_delay>
    dba2:	69b3      	ldr	r3, [r6, #24]
    dba4:	4b03      	ldr	r3, [pc, #12]	; (dbb4 <am_hal_pwrctrl_periph_enable+0x4c>)
    dba6:	699b      	ldr	r3, [r3, #24]
    dba8:	4223      	tst	r3, r4
    dbaa:	bf0c      	ite	eq
    dbac:	2001      	moveq	r0, #1
    dbae:	2000      	movne	r0, #0
    dbb0:	b002      	add	sp, #8
    dbb2:	bd70      	pop	{r4, r5, r6, pc}
    dbb4:	40021000 	.word	0x40021000
    dbb8:	0000ebfc 	.word	0x0000ebfc

0000dbbc <am_hal_pwrctrl_periph_disable>:
    dbbc:	b570      	push	{r4, r5, r6, lr}
    dbbe:	b082      	sub	sp, #8
    dbc0:	4604      	mov	r4, r0
    dbc2:	f7ff ff2d 	bl	da20 <am_hal_interrupt_master_disable>
    dbc6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    dbca:	4e10      	ldr	r6, [pc, #64]	; (dc0c <am_hal_pwrctrl_periph_disable+0x50>)
    dbcc:	4d10      	ldr	r5, [pc, #64]	; (dc10 <am_hal_pwrctrl_periph_disable+0x54>)
    dbce:	9001      	str	r0, [sp, #4]
    dbd0:	00a4      	lsls	r4, r4, #2
    dbd2:	68b3      	ldr	r3, [r6, #8]
    dbd4:	592a      	ldr	r2, [r5, r4]
    dbd6:	ea23 0302 	bic.w	r3, r3, r2
    dbda:	60b3      	str	r3, [r6, #8]
    dbdc:	9801      	ldr	r0, [sp, #4]
    dbde:	442c      	add	r4, r5
    dbe0:	f7ff ff22 	bl	da28 <am_hal_interrupt_master_set>
    dbe4:	20a0      	movs	r0, #160	; 0xa0
    dbe6:	f7ff fd51 	bl	d68c <am_hal_flash_delay>
    dbea:	69b3      	ldr	r3, [r6, #24]
    dbec:	6864      	ldr	r4, [r4, #4]
    dbee:	4223      	tst	r3, r4
    dbf0:	d003      	beq.n	dbfa <am_hal_pwrctrl_periph_disable+0x3e>
    dbf2:	20a0      	movs	r0, #160	; 0xa0
    dbf4:	f7ff fd4a 	bl	d68c <am_hal_flash_delay>
    dbf8:	69b3      	ldr	r3, [r6, #24]
    dbfa:	4b04      	ldr	r3, [pc, #16]	; (dc0c <am_hal_pwrctrl_periph_disable+0x50>)
    dbfc:	699b      	ldr	r3, [r3, #24]
    dbfe:	4223      	tst	r3, r4
    dc00:	bf14      	ite	ne
    dc02:	2001      	movne	r0, #1
    dc04:	2000      	moveq	r0, #0
    dc06:	b002      	add	sp, #8
    dc08:	bd70      	pop	{r4, r5, r6, pc}
    dc0a:	bf00      	nop
    dc0c:	40021000 	.word	0x40021000
    dc10:	0000ebfc 	.word	0x0000ebfc

0000dc14 <am_hal_pwrctrl_memory_enable>:
    dc14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dc18:	4d22      	ldr	r5, [pc, #136]	; (dca4 <am_hal_pwrctrl_memory_enable+0x90>)
    dc1a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    dc1e:	eb05 09c3 	add.w	r9, r5, r3, lsl #3
    dc22:	f855 8033 	ldr.w	r8, [r5, r3, lsl #3]
    dc26:	f8d9 6010 	ldr.w	r6, [r9, #16]
    dc2a:	f1b8 3fff 	cmp.w	r8, #4294967295
    dc2e:	4604      	mov	r4, r0
    dc30:	ea4f 0740 	mov.w	r7, r0, lsl #1
    dc34:	d120      	bne.n	dc78 <am_hal_pwrctrl_memory_enable+0x64>
    dc36:	f8df 9070 	ldr.w	r9, [pc, #112]	; dca8 <am_hal_pwrctrl_memory_enable+0x94>
    dc3a:	f8d9 3010 	ldr.w	r3, [r9, #16]
    dc3e:	443c      	add	r4, r7
    dc40:	ea43 0308 	orr.w	r3, r3, r8
    dc44:	f8c9 3010 	str.w	r3, [r9, #16]
    dc48:	20a0      	movs	r0, #160	; 0xa0
    dc4a:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
    dc4e:	f7ff fd1d 	bl	d68c <am_hal_flash_delay>
    dc52:	f8d9 3014 	ldr.w	r3, [r9, #20]
    dc56:	686c      	ldr	r4, [r5, #4]
    dc58:	4033      	ands	r3, r6
    dc5a:	42a3      	cmp	r3, r4
    dc5c:	d004      	beq.n	dc68 <am_hal_pwrctrl_memory_enable+0x54>
    dc5e:	20a0      	movs	r0, #160	; 0xa0
    dc60:	f7ff fd14 	bl	d68c <am_hal_flash_delay>
    dc64:	f8d9 3014 	ldr.w	r3, [r9, #20]
    dc68:	4b0f      	ldr	r3, [pc, #60]	; (dca8 <am_hal_pwrctrl_memory_enable+0x94>)
    dc6a:	6958      	ldr	r0, [r3, #20]
    dc6c:	4030      	ands	r0, r6
    dc6e:	1b00      	subs	r0, r0, r4
    dc70:	bf18      	it	ne
    dc72:	2001      	movne	r0, #1
    dc74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dc78:	f8d9 300c 	ldr.w	r3, [r9, #12]
    dc7c:	4a0a      	ldr	r2, [pc, #40]	; (dca8 <am_hal_pwrctrl_memory_enable+0x94>)
    dc7e:	ea68 0303 	orn	r3, r8, r3
    dc82:	6911      	ldr	r1, [r2, #16]
    dc84:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    dc88:	f043 0301 	orr.w	r3, r3, #1
    dc8c:	400b      	ands	r3, r1
    dc8e:	2010      	movs	r0, #16
    dc90:	6113      	str	r3, [r2, #16]
    dc92:	f7ff fcfb 	bl	d68c <am_hal_flash_delay>
    dc96:	f1b8 0f00 	cmp.w	r8, #0
    dc9a:	d1cc      	bne.n	dc36 <am_hal_pwrctrl_memory_enable+0x22>
    dc9c:	f8d9 4004 	ldr.w	r4, [r9, #4]
    dca0:	e7e2      	b.n	dc68 <am_hal_pwrctrl_memory_enable+0x54>
    dca2:	bf00      	nop
    dca4:	0000ea4c 	.word	0x0000ea4c
    dca8:	40021000 	.word	0x40021000

0000dcac <am_hal_pwrctrl_memory_deepsleep_powerdown>:
    dcac:	2811      	cmp	r0, #17
    dcae:	d80b      	bhi.n	dcc8 <am_hal_pwrctrl_memory_deepsleep_powerdown+0x1c>
    dcb0:	4b06      	ldr	r3, [pc, #24]	; (dccc <am_hal_pwrctrl_memory_deepsleep_powerdown+0x20>)
    dcb2:	4a07      	ldr	r2, [pc, #28]	; (dcd0 <am_hal_pwrctrl_memory_deepsleep_powerdown+0x24>)
    dcb4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    dcb8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    dcbc:	68d3      	ldr	r3, [r2, #12]
    dcbe:	6941      	ldr	r1, [r0, #20]
    dcc0:	430b      	orrs	r3, r1
    dcc2:	2000      	movs	r0, #0
    dcc4:	60d3      	str	r3, [r2, #12]
    dcc6:	4770      	bx	lr
    dcc8:	2001      	movs	r0, #1
    dcca:	4770      	bx	lr
    dccc:	0000ea4c 	.word	0x0000ea4c
    dcd0:	40021000 	.word	0x40021000

0000dcd4 <am_hal_pwrctrl_memory_deepsleep_retain>:
    dcd4:	2811      	cmp	r0, #17
    dcd6:	d80c      	bhi.n	dcf2 <am_hal_pwrctrl_memory_deepsleep_retain+0x1e>
    dcd8:	4b07      	ldr	r3, [pc, #28]	; (dcf8 <am_hal_pwrctrl_memory_deepsleep_retain+0x24>)
    dcda:	4a08      	ldr	r2, [pc, #32]	; (dcfc <am_hal_pwrctrl_memory_deepsleep_retain+0x28>)
    dcdc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    dce0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    dce4:	68d3      	ldr	r3, [r2, #12]
    dce6:	6941      	ldr	r1, [r0, #20]
    dce8:	ea23 0301 	bic.w	r3, r3, r1
    dcec:	2000      	movs	r0, #0
    dcee:	60d3      	str	r3, [r2, #12]
    dcf0:	4770      	bx	lr
    dcf2:	2001      	movs	r0, #1
    dcf4:	4770      	bx	lr
    dcf6:	bf00      	nop
    dcf8:	0000ea4c 	.word	0x0000ea4c
    dcfc:	40021000 	.word	0x40021000

0000dd00 <am_hal_pwrctrl_low_power_init>:
    dd00:	b530      	push	{r4, r5, lr}
    dd02:	4b69      	ldr	r3, [pc, #420]	; (dea8 <am_hal_pwrctrl_low_power_init+0x1a8>)
    dd04:	681a      	ldr	r2, [r3, #0]
    dd06:	b085      	sub	sp, #20
    dd08:	b912      	cbnz	r2, dd10 <am_hal_pwrctrl_low_power_init+0x10>
    dd0a:	4a68      	ldr	r2, [pc, #416]	; (deac <am_hal_pwrctrl_low_power_init+0x1ac>)
    dd0c:	6812      	ldr	r2, [r2, #0]
    dd0e:	601a      	str	r2, [r3, #0]
    dd10:	4b67      	ldr	r3, [pc, #412]	; (deb0 <am_hal_pwrctrl_low_power_init+0x1b0>)
    dd12:	68db      	ldr	r3, [r3, #12]
    dd14:	b2db      	uxtb	r3, r3
    dd16:	2b12      	cmp	r3, #18
    dd18:	d104      	bne.n	dd24 <am_hal_pwrctrl_low_power_init+0x24>
    dd1a:	4c66      	ldr	r4, [pc, #408]	; (deb4 <am_hal_pwrctrl_low_power_init+0x1b4>)
    dd1c:	6863      	ldr	r3, [r4, #4]
    dd1e:	07d8      	lsls	r0, r3, #31
    dd20:	f100 8088 	bmi.w	de34 <am_hal_pwrctrl_low_power_init+0x134>
    dd24:	4b62      	ldr	r3, [pc, #392]	; (deb0 <am_hal_pwrctrl_low_power_init+0x1b0>)
    dd26:	68da      	ldr	r2, [r3, #12]
    dd28:	b2d2      	uxtb	r2, r2
    dd2a:	2a20      	cmp	r2, #32
    dd2c:	d934      	bls.n	dd98 <am_hal_pwrctrl_low_power_init+0x98>
    dd2e:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
    dd32:	2002      	movs	r0, #2
    dd34:	f360 4213 	bfi	r2, r0, #16, #4
    dd38:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    dd3c:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
    dd40:	2203      	movs	r2, #3
    dd42:	f362 5117 	bfi	r1, r2, #20, #4
    dd46:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
    dd4a:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    dd4e:	2405      	movs	r4, #5
    dd50:	f364 0103 	bfi	r1, r4, #0, #4
    dd54:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    dd58:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    dd5c:	f360 1107 	bfi	r1, r0, #4, #4
    dd60:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    dd64:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    dd68:	2406      	movs	r4, #6
    dd6a:	f364 210b 	bfi	r1, r4, #8, #4
    dd6e:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    dd72:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    dd76:	2001      	movs	r0, #1
    dd78:	f360 310f 	bfi	r1, r0, #12, #4
    dd7c:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    dd80:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    dd84:	f362 61de 	bfi	r1, r2, #27, #4
    dd88:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    dd8c:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
    dd90:	f362 0103 	bfi	r1, r2, #0, #4
    dd94:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
    dd98:	4a45      	ldr	r2, [pc, #276]	; (deb0 <am_hal_pwrctrl_low_power_init+0x1b0>)
    dd9a:	68d3      	ldr	r3, [r2, #12]
    dd9c:	b2db      	uxtb	r3, r3
    dd9e:	2b11      	cmp	r3, #17
    dda0:	d905      	bls.n	ddae <am_hal_pwrctrl_low_power_init+0xae>
    dda2:	f8d2 335c 	ldr.w	r3, [r2, #860]	; 0x35c
    dda6:	f36f 6318 	bfc	r3, #24, #1
    ddaa:	f8c2 335c 	str.w	r3, [r2, #860]	; 0x35c
    ddae:	2100      	movs	r1, #0
    ddb0:	200c      	movs	r0, #12
    ddb2:	f7ff fa55 	bl	d260 <am_hal_cachectrl_control>
    ddb6:	4b3f      	ldr	r3, [pc, #252]	; (deb4 <am_hal_pwrctrl_low_power_init+0x1b4>)
    ddb8:	699b      	ldr	r3, [r3, #24]
    ddba:	f3c3 2500 	ubfx	r5, r3, #8, #1
    ddbe:	05db      	lsls	r3, r3, #23
    ddc0:	d420      	bmi.n	de04 <am_hal_pwrctrl_low_power_init+0x104>
    ddc2:	4c3b      	ldr	r4, [pc, #236]	; (deb0 <am_hal_pwrctrl_low_power_init+0x1b0>)
    ddc4:	68e3      	ldr	r3, [r4, #12]
    ddc6:	b2db      	uxtb	r3, r3
    ddc8:	2b11      	cmp	r3, #17
    ddca:	d84e      	bhi.n	de6a <am_hal_pwrctrl_low_power_init+0x16a>
    ddcc:	4c38      	ldr	r4, [pc, #224]	; (deb0 <am_hal_pwrctrl_low_power_init+0x1b0>)
    ddce:	493a      	ldr	r1, [pc, #232]	; (deb8 <am_hal_pwrctrl_low_power_init+0x1b8>)
    ddd0:	7e22      	ldrb	r2, [r4, #24]
    ddd2:	2001      	movs	r0, #1
    ddd4:	4302      	orrs	r2, r0
    ddd6:	2307      	movs	r3, #7
    ddd8:	7622      	strb	r2, [r4, #24]
    ddda:	9000      	str	r0, [sp, #0]
    dddc:	461a      	mov	r2, r3
    ddde:	f242 7010 	movw	r0, #10000	; 0x2710
    dde2:	f7ff fc63 	bl	d6ac <am_hal_flash_delay_status_check>
    dde6:	2800      	cmp	r0, #0
    dde8:	d15a      	bne.n	dea0 <am_hal_pwrctrl_low_power_init+0x1a0>
    ddea:	4b32      	ldr	r3, [pc, #200]	; (deb4 <am_hal_pwrctrl_low_power_init+0x1b4>)
    ddec:	681a      	ldr	r2, [r3, #0]
    ddee:	f042 0201 	orr.w	r2, r2, #1
    ddf2:	601a      	str	r2, [r3, #0]
    ddf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    ddf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    ddfa:	625a      	str	r2, [r3, #36]	; 0x24
    ddfc:	68e3      	ldr	r3, [r4, #12]
    ddfe:	b2db      	uxtb	r3, r3
    de00:	2b11      	cmp	r3, #17
    de02:	d002      	beq.n	de0a <am_hal_pwrctrl_low_power_init+0x10a>
    de04:	2000      	movs	r0, #0
    de06:	b005      	add	sp, #20
    de08:	bd30      	pop	{r4, r5, pc}
    de0a:	f8d4 335c 	ldr.w	r3, [r4, #860]	; 0x35c
    de0e:	f360 5356 	bfi	r3, r0, #21, #2
    de12:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
    de16:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    de1a:	220f      	movs	r2, #15
    de1c:	f362 138b 	bfi	r3, r2, #6, #6
    de20:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    de24:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    de28:	f362 0305 	bfi	r3, r2, #0, #6
    de2c:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    de30:	b005      	add	sp, #20
    de32:	bd30      	pop	{r4, r5, pc}
    de34:	f7ff fdf4 	bl	da20 <am_hal_interrupt_master_disable>
    de38:	9002      	str	r0, [sp, #8]
    de3a:	68a3      	ldr	r3, [r4, #8]
    de3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    de40:	60a3      	str	r3, [r4, #8]
    de42:	9802      	ldr	r0, [sp, #8]
    de44:	f7ff fdf0 	bl	da28 <am_hal_interrupt_master_set>
    de48:	20a0      	movs	r0, #160	; 0xa0
    de4a:	f7ff fc1f 	bl	d68c <am_hal_flash_delay>
    de4e:	69a3      	ldr	r3, [r4, #24]
    de50:	0619      	lsls	r1, r3, #24
    de52:	d403      	bmi.n	de5c <am_hal_pwrctrl_low_power_init+0x15c>
    de54:	20a0      	movs	r0, #160	; 0xa0
    de56:	f7ff fc19 	bl	d68c <am_hal_flash_delay>
    de5a:	69a3      	ldr	r3, [r4, #24]
    de5c:	4b15      	ldr	r3, [pc, #84]	; (deb4 <am_hal_pwrctrl_low_power_init+0x1b4>)
    de5e:	699b      	ldr	r3, [r3, #24]
    de60:	061a      	lsls	r2, r3, #24
    de62:	f53f af5f 	bmi.w	dd24 <am_hal_pwrctrl_low_power_init+0x24>
    de66:	2001      	movs	r0, #1
    de68:	e7cd      	b.n	de06 <am_hal_pwrctrl_low_power_init+0x106>
    de6a:	f7ff fdd9 	bl	da20 <am_hal_interrupt_master_disable>
    de6e:	9003      	str	r0, [sp, #12]
    de70:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    de74:	2219      	movs	r2, #25
    de76:	f362 138b 	bfi	r3, r2, #6, #6
    de7a:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    de7e:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
    de82:	210c      	movs	r1, #12
    de84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    de88:	f361 0205 	bfi	r2, r1, #0, #6
    de8c:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
    de90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    de92:	f365 5296 	bfi	r2, r5, #22, #1
    de96:	63da      	str	r2, [r3, #60]	; 0x3c
    de98:	9803      	ldr	r0, [sp, #12]
    de9a:	f7ff fdc5 	bl	da28 <am_hal_interrupt_master_set>
    de9e:	e795      	b.n	ddcc <am_hal_pwrctrl_low_power_init+0xcc>
    dea0:	2004      	movs	r0, #4
    dea2:	b005      	add	sp, #20
    dea4:	bd30      	pop	{r4, r5, pc}
    dea6:	bf00      	nop
    dea8:	10001144 	.word	0x10001144
    deac:	4ffff000 	.word	0x4ffff000
    deb0:	40020000 	.word	0x40020000
    deb4:	40021000 	.word	0x40021000
    deb8:	40020018 	.word	0x40020018

0000debc <am_hal_rtc_osc_disable>:
    debc:	4a03      	ldr	r2, [pc, #12]	; (decc <am_hal_rtc_osc_disable+0x10>)
    debe:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    dec2:	f043 0310 	orr.w	r3, r3, #16
    dec6:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    deca:	4770      	bx	lr
    decc:	40004200 	.word	0x40004200

0000ded0 <am_hal_sysctrl_sleep>:
    ded0:	b510      	push	{r4, lr}
    ded2:	b082      	sub	sp, #8
    ded4:	4604      	mov	r4, r0
    ded6:	f7ff fda3 	bl	da20 <am_hal_interrupt_master_disable>
    deda:	9001      	str	r0, [sp, #4]
    dedc:	b124      	cbz	r4, dee8 <am_hal_sysctrl_sleep+0x18>
    dede:	4b12      	ldr	r3, [pc, #72]	; (df28 <am_hal_sysctrl_sleep+0x58>)
    dee0:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    dee4:	07db      	lsls	r3, r3, #31
    dee6:	d513      	bpl.n	df10 <am_hal_sysctrl_sleep+0x40>
    dee8:	4a10      	ldr	r2, [pc, #64]	; (df2c <am_hal_sysctrl_sleep+0x5c>)
    deea:	6913      	ldr	r3, [r2, #16]
    deec:	f023 0304 	bic.w	r3, r3, #4
    def0:	6113      	str	r3, [r2, #16]
    def2:	f3bf 8f4f 	dsb	sy
    def6:	4a0e      	ldr	r2, [pc, #56]	; (df30 <am_hal_sysctrl_sleep+0x60>)
    def8:	4b0e      	ldr	r3, [pc, #56]	; (df34 <am_hal_sysctrl_sleep+0x64>)
    defa:	6812      	ldr	r2, [r2, #0]
    defc:	601a      	str	r2, [r3, #0]
    defe:	bf30      	wfi
    df00:	f3bf 8f6f 	isb	sy
    df04:	9801      	ldr	r0, [sp, #4]
    df06:	b002      	add	sp, #8
    df08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    df0c:	f7ff bd8c 	b.w	da28 <am_hal_interrupt_master_set>
    df10:	4b09      	ldr	r3, [pc, #36]	; (df38 <am_hal_sysctrl_sleep+0x68>)
    df12:	681a      	ldr	r2, [r3, #0]
    df14:	b912      	cbnz	r2, df1c <am_hal_sysctrl_sleep+0x4c>
    df16:	4a09      	ldr	r2, [pc, #36]	; (df3c <am_hal_sysctrl_sleep+0x6c>)
    df18:	6812      	ldr	r2, [r2, #0]
    df1a:	601a      	str	r2, [r3, #0]
    df1c:	4a03      	ldr	r2, [pc, #12]	; (df2c <am_hal_sysctrl_sleep+0x5c>)
    df1e:	6913      	ldr	r3, [r2, #16]
    df20:	f043 0304 	orr.w	r3, r3, #4
    df24:	6113      	str	r3, [r2, #16]
    df26:	e7e4      	b.n	def2 <am_hal_sysctrl_sleep+0x22>
    df28:	40020000 	.word	0x40020000
    df2c:	e000ed00 	.word	0xe000ed00
    df30:	5fff0000 	.word	0x5fff0000
    df34:	10001148 	.word	0x10001148
    df38:	10001144 	.word	0x10001144
    df3c:	4ffff000 	.word	0x4ffff000

0000df40 <am_hal_uart_initialize>:
    df40:	2801      	cmp	r0, #1
    df42:	d81a      	bhi.n	df7a <am_hal_uart_initialize+0x3a>
    df44:	b1e9      	cbz	r1, df82 <am_hal_uart_initialize+0x42>
    df46:	b530      	push	{r4, r5, lr}
    df48:	2264      	movs	r2, #100	; 0x64
    df4a:	4d0f      	ldr	r5, [pc, #60]	; (df88 <am_hal_uart_initialize+0x48>)
    df4c:	fb00 f202 	mul.w	r2, r0, r2
    df50:	18ac      	adds	r4, r5, r2
    df52:	78e3      	ldrb	r3, [r4, #3]
    df54:	f3c3 0e00 	ubfx	lr, r3, #0, #1
    df58:	f013 0301 	ands.w	r3, r3, #1
    df5c:	d10f      	bne.n	df7e <am_hal_uart_initialize+0x3e>
    df5e:	6260      	str	r0, [r4, #36]	; 0x24
    df60:	58a8      	ldr	r0, [r5, r2]
    df62:	f000 4c7e 	and.w	ip, r0, #4261412864	; 0xfe000000
    df66:	4809      	ldr	r0, [pc, #36]	; (df8c <am_hal_uart_initialize+0x4c>)
    df68:	ea4c 0000 	orr.w	r0, ip, r0
    df6c:	50a8      	str	r0, [r5, r2]
    df6e:	f884 e004 	strb.w	lr, [r4, #4]
    df72:	6623      	str	r3, [r4, #96]	; 0x60
    df74:	4618      	mov	r0, r3
    df76:	600c      	str	r4, [r1, #0]
    df78:	bd30      	pop	{r4, r5, pc}
    df7a:	2005      	movs	r0, #5
    df7c:	4770      	bx	lr
    df7e:	2007      	movs	r0, #7
    df80:	bd30      	pop	{r4, r5, pc}
    df82:	2006      	movs	r0, #6
    df84:	4770      	bx	lr
    df86:	bf00      	nop
    df88:	1000114c 	.word	0x1000114c
    df8c:	01ea9e06 	.word	0x01ea9e06

0000df90 <am_hal_uart_deinitialize>:
    df90:	b170      	cbz	r0, dfb0 <am_hal_uart_deinitialize+0x20>
    df92:	6803      	ldr	r3, [r0, #0]
    df94:	4a07      	ldr	r2, [pc, #28]	; (dfb4 <am_hal_uart_deinitialize+0x24>)
    df96:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    df9a:	4293      	cmp	r3, r2
    df9c:	d108      	bne.n	dfb0 <am_hal_uart_deinitialize+0x20>
    df9e:	78c2      	ldrb	r2, [r0, #3]
    dfa0:	2300      	movs	r3, #0
    dfa2:	f36f 0200 	bfc	r2, #0, #1
    dfa6:	70c2      	strb	r2, [r0, #3]
    dfa8:	6243      	str	r3, [r0, #36]	; 0x24
    dfaa:	7103      	strb	r3, [r0, #4]
    dfac:	4618      	mov	r0, r3
    dfae:	4770      	bx	lr
    dfb0:	2002      	movs	r0, #2
    dfb2:	4770      	bx	lr
    dfb4:	01ea9e06 	.word	0x01ea9e06

0000dfb8 <am_hal_uart_power_control>:
    dfb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    dfba:	4604      	mov	r4, r0
    dfbc:	6800      	ldr	r0, [r0, #0]
    dfbe:	4b39      	ldr	r3, [pc, #228]	; (e0a4 <am_hal_uart_power_control+0xec>)
    dfc0:	f020 467e 	bic.w	r6, r0, #4261412864	; 0xfe000000
    dfc4:	429e      	cmp	r6, r3
    dfc6:	b085      	sub	sp, #20
    dfc8:	d13f      	bne.n	e04a <am_hal_uart_power_control+0x92>
    dfca:	6a65      	ldr	r5, [r4, #36]	; 0x24
    dfcc:	f105 0008 	add.w	r0, r5, #8
    dfd0:	b2c7      	uxtb	r7, r0
    dfd2:	b189      	cbz	r1, dff8 <am_hal_uart_power_control+0x40>
    dfd4:	3901      	subs	r1, #1
    dfd6:	2901      	cmp	r1, #1
    dfd8:	d834      	bhi.n	e044 <am_hal_uart_power_control+0x8c>
    dfda:	2a00      	cmp	r2, #0
    dfdc:	d138      	bne.n	e050 <am_hal_uart_power_control+0x98>
    dfde:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    dfe2:	351c      	adds	r5, #28
    dfe4:	032d      	lsls	r5, r5, #12
    dfe6:	f04f 33ff 	mov.w	r3, #4294967295
    dfea:	646b      	str	r3, [r5, #68]	; 0x44
    dfec:	4638      	mov	r0, r7
    dfee:	f7ff fde5 	bl	dbbc <am_hal_pwrctrl_periph_disable>
    dff2:	2000      	movs	r0, #0
    dff4:	b005      	add	sp, #20
    dff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dff8:	2a00      	cmp	r2, #0
    dffa:	d04a      	beq.n	e092 <am_hal_uart_power_control+0xda>
    dffc:	7923      	ldrb	r3, [r4, #4]
    dffe:	2b00      	cmp	r3, #0
    e000:	d04e      	beq.n	e0a0 <am_hal_uart_power_control+0xe8>
    e002:	4638      	mov	r0, r7
    e004:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e008:	9101      	str	r1, [sp, #4]
    e00a:	351c      	adds	r5, #28
    e00c:	f7ff fdac 	bl	db68 <am_hal_pwrctrl_periph_enable>
    e010:	f7ff fd06 	bl	da20 <am_hal_interrupt_master_disable>
    e014:	032d      	lsls	r5, r5, #12
    e016:	68a3      	ldr	r3, [r4, #8]
    e018:	9002      	str	r0, [sp, #8]
    e01a:	622b      	str	r3, [r5, #32]
    e01c:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    e020:	626a      	str	r2, [r5, #36]	; 0x24
    e022:	62ab      	str	r3, [r5, #40]	; 0x28
    e024:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
    e028:	62ea      	str	r2, [r5, #44]	; 0x2c
    e02a:	632b      	str	r3, [r5, #48]	; 0x30
    e02c:	e9d4 2307 	ldrd	r2, r3, [r4, #28]
    e030:	9901      	ldr	r1, [sp, #4]
    e032:	636a      	str	r2, [r5, #52]	; 0x34
    e034:	63ab      	str	r3, [r5, #56]	; 0x38
    e036:	9802      	ldr	r0, [sp, #8]
    e038:	7121      	strb	r1, [r4, #4]
    e03a:	f7ff fcf5 	bl	da28 <am_hal_interrupt_master_set>
    e03e:	9901      	ldr	r1, [sp, #4]
    e040:	4608      	mov	r0, r1
    e042:	e000      	b.n	e046 <am_hal_uart_power_control+0x8e>
    e044:	2006      	movs	r0, #6
    e046:	b005      	add	sp, #20
    e048:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e04a:	2002      	movs	r0, #2
    e04c:	b005      	add	sp, #20
    e04e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e050:	f7ff fce6 	bl	da20 <am_hal_interrupt_master_disable>
    e054:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e058:	351c      	adds	r5, #28
    e05a:	032d      	lsls	r5, r5, #12
    e05c:	9003      	str	r0, [sp, #12]
    e05e:	6a2b      	ldr	r3, [r5, #32]
    e060:	60a3      	str	r3, [r4, #8]
    e062:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e064:	60e3      	str	r3, [r4, #12]
    e066:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e068:	6123      	str	r3, [r4, #16]
    e06a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    e06c:	6163      	str	r3, [r4, #20]
    e06e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    e070:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    e072:	61a3      	str	r3, [r4, #24]
    e074:	6bab      	ldr	r3, [r5, #56]	; 0x38
    e076:	61e2      	str	r2, [r4, #28]
    e078:	2201      	movs	r2, #1
    e07a:	6223      	str	r3, [r4, #32]
    e07c:	9803      	ldr	r0, [sp, #12]
    e07e:	7122      	strb	r2, [r4, #4]
    e080:	f7ff fcd2 	bl	da28 <am_hal_interrupt_master_set>
    e084:	6823      	ldr	r3, [r4, #0]
    e086:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e08a:	42b3      	cmp	r3, r6
    e08c:	d1ae      	bne.n	dfec <am_hal_uart_power_control+0x34>
    e08e:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e090:	e7a5      	b.n	dfde <am_hal_uart_power_control+0x26>
    e092:	4638      	mov	r0, r7
    e094:	9201      	str	r2, [sp, #4]
    e096:	f7ff fd67 	bl	db68 <am_hal_pwrctrl_periph_enable>
    e09a:	9a01      	ldr	r2, [sp, #4]
    e09c:	4610      	mov	r0, r2
    e09e:	e7d2      	b.n	e046 <am_hal_uart_power_control+0x8e>
    e0a0:	2007      	movs	r0, #7
    e0a2:	e7d0      	b.n	e046 <am_hal_uart_power_control+0x8e>
    e0a4:	01ea9e06 	.word	0x01ea9e06

0000e0a8 <am_hal_uart_configure>:
    e0a8:	6803      	ldr	r3, [r0, #0]
    e0aa:	4a78      	ldr	r2, [pc, #480]	; (e28c <am_hal_uart_configure+0x1e4>)
    e0ac:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e0b0:	4293      	cmp	r3, r2
    e0b2:	d001      	beq.n	e0b8 <am_hal_uart_configure+0x10>
    e0b4:	2002      	movs	r0, #2
    e0b6:	4770      	bx	lr
    e0b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e0bc:	6a44      	ldr	r4, [r0, #36]	; 0x24
    e0be:	f504 2480 	add.w	r4, r4, #262144	; 0x40000
    e0c2:	341c      	adds	r4, #28
    e0c4:	0324      	lsls	r4, r4, #12
    e0c6:	2700      	movs	r7, #0
    e0c8:	b084      	sub	sp, #16
    e0ca:	6327      	str	r7, [r4, #48]	; 0x30
    e0cc:	460e      	mov	r6, r1
    e0ce:	4605      	mov	r5, r0
    e0d0:	f7ff fca6 	bl	da20 <am_hal_interrupt_master_disable>
    e0d4:	9001      	str	r0, [sp, #4]
    e0d6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e0d8:	f043 0308 	orr.w	r3, r3, #8
    e0dc:	8623      	strh	r3, [r4, #48]	; 0x30
    e0de:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e0e0:	2201      	movs	r2, #1
    e0e2:	f362 1306 	bfi	r3, r2, #4, #3
    e0e6:	8623      	strh	r3, [r4, #48]	; 0x30
    e0e8:	9801      	ldr	r0, [sp, #4]
    e0ea:	f7ff fc9d 	bl	da28 <am_hal_interrupt_master_set>
    e0ee:	f7ff fc97 	bl	da20 <am_hal_interrupt_master_disable>
    e0f2:	9002      	str	r0, [sp, #8]
    e0f4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e0f6:	f367 0300 	bfi	r3, r7, #0, #1
    e0fa:	8623      	strh	r3, [r4, #48]	; 0x30
    e0fc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e0fe:	f367 2349 	bfi	r3, r7, #9, #1
    e102:	8623      	strh	r3, [r4, #48]	; 0x30
    e104:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e106:	f367 2308 	bfi	r3, r7, #8, #1
    e10a:	8623      	strh	r3, [r4, #48]	; 0x30
    e10c:	9802      	ldr	r0, [sp, #8]
    e10e:	f7ff fc8b 	bl	da28 <am_hal_interrupt_master_set>
    e112:	4b5f      	ldr	r3, [pc, #380]	; (e290 <am_hal_uart_configure+0x1e8>)
    e114:	6832      	ldr	r2, [r6, #0]
    e116:	68db      	ldr	r3, [r3, #12]
    e118:	b2db      	uxtb	r3, r3
    e11a:	2b12      	cmp	r3, #18
    e11c:	d076      	beq.n	e20c <am_hal_uart_configure+0x164>
    e11e:	4b5c      	ldr	r3, [pc, #368]	; (e290 <am_hal_uart_configure+0x1e8>)
    e120:	68db      	ldr	r3, [r3, #12]
    e122:	b2db      	uxtb	r3, r3
    e124:	2b20      	cmp	r3, #32
    e126:	d902      	bls.n	e12e <am_hal_uart_configure+0x86>
    e128:	4b5a      	ldr	r3, [pc, #360]	; (e294 <am_hal_uart_configure+0x1ec>)
    e12a:	429a      	cmp	r2, r3
    e12c:	d871      	bhi.n	e212 <am_hal_uart_configure+0x16a>
    e12e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e130:	f3c3 1302 	ubfx	r3, r3, #4, #3
    e134:	3b01      	subs	r3, #1
    e136:	b2db      	uxtb	r3, r3
    e138:	2b03      	cmp	r3, #3
    e13a:	d86c      	bhi.n	e216 <am_hal_uart_configure+0x16e>
    e13c:	4956      	ldr	r1, [pc, #344]	; (e298 <am_hal_uart_configure+0x1f0>)
    e13e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    e142:	0112      	lsls	r2, r2, #4
    e144:	4291      	cmp	r1, r2
    e146:	ea4f 1381 	mov.w	r3, r1, lsl #6
    e14a:	fbb1 f0f2 	udiv	r0, r1, r2
    e14e:	fbb3 f3f2 	udiv	r3, r3, r2
    e152:	eba3 1380 	sub.w	r3, r3, r0, lsl #6
    e156:	d364      	bcc.n	e222 <am_hal_uart_configure+0x17a>
    e158:	6260      	str	r0, [r4, #36]	; 0x24
    e15a:	6260      	str	r0, [r4, #36]	; 0x24
    e15c:	62a3      	str	r3, [r4, #40]	; 0x28
    e15e:	089b      	lsrs	r3, r3, #2
    e160:	eb03 1300 	add.w	r3, r3, r0, lsl #4
    e164:	fbb1 f3f3 	udiv	r3, r1, r3
    e168:	662b      	str	r3, [r5, #96]	; 0x60
    e16a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e16c:	f36f 338e 	bfc	r3, #14, #1
    e170:	8623      	strh	r3, [r4, #48]	; 0x30
    e172:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e174:	f36f 33cf 	bfc	r3, #15, #1
    e178:	8623      	strh	r3, [r4, #48]	; 0x30
    e17a:	6933      	ldr	r3, [r6, #16]
    e17c:	6b22      	ldr	r2, [r4, #48]	; 0x30
    e17e:	6971      	ldr	r1, [r6, #20]
    e180:	431a      	orrs	r2, r3
    e182:	6873      	ldr	r3, [r6, #4]
    e184:	6322      	str	r2, [r4, #48]	; 0x30
    e186:	68f2      	ldr	r2, [r6, #12]
    e188:	6361      	str	r1, [r4, #52]	; 0x34
    e18a:	4313      	orrs	r3, r2
    e18c:	68b2      	ldr	r2, [r6, #8]
    e18e:	4313      	orrs	r3, r2
    e190:	f043 0310 	orr.w	r3, r3, #16
    e194:	62e3      	str	r3, [r4, #44]	; 0x2c
    e196:	f7ff fc43 	bl	da20 <am_hal_interrupt_master_disable>
    e19a:	9003      	str	r0, [sp, #12]
    e19c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e19e:	f043 0301 	orr.w	r3, r3, #1
    e1a2:	8623      	strh	r3, [r4, #48]	; 0x30
    e1a4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e1a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    e1aa:	8623      	strh	r3, [r4, #48]	; 0x30
    e1ac:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e1ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    e1b2:	8623      	strh	r3, [r4, #48]	; 0x30
    e1b4:	9803      	ldr	r0, [sp, #12]
    e1b6:	f7ff fc37 	bl	da28 <am_hal_interrupt_master_set>
    e1ba:	682a      	ldr	r2, [r5, #0]
    e1bc:	4b33      	ldr	r3, [pc, #204]	; (e28c <am_hal_uart_configure+0x1e4>)
    e1be:	f022 487e 	bic.w	r8, r2, #4261412864	; 0xfe000000
    e1c2:	4598      	cmp	r8, r3
    e1c4:	d11e      	bne.n	e204 <am_hal_uart_configure+0x15c>
    e1c6:	69b1      	ldr	r1, [r6, #24]
    e1c8:	e9d6 4708 	ldrd	r4, r7, [r6, #32]
    e1cc:	b109      	cbz	r1, e1d2 <am_hal_uart_configure+0x12a>
    e1ce:	69f3      	ldr	r3, [r6, #28]
    e1d0:	bb5b      	cbnz	r3, e22a <am_hal_uart_configure+0x182>
    e1d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e1d4:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e1d8:	331c      	adds	r3, #28
    e1da:	031b      	lsls	r3, r3, #12
    e1dc:	2200      	movs	r2, #0
    e1de:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
    e1e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e1e4:	f022 0220 	bic.w	r2, r2, #32
    e1e8:	639a      	str	r2, [r3, #56]	; 0x38
    e1ea:	b10c      	cbz	r4, e1f0 <am_hal_uart_configure+0x148>
    e1ec:	2f00      	cmp	r7, #0
    e1ee:	d132      	bne.n	e256 <am_hal_uart_configure+0x1ae>
    e1f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e1f2:	2000      	movs	r0, #0
    e1f4:	f022 0250 	bic.w	r2, r2, #80	; 0x50
    e1f8:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
    e1fc:	639a      	str	r2, [r3, #56]	; 0x38
    e1fe:	b004      	add	sp, #16
    e200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e204:	2000      	movs	r0, #0
    e206:	b004      	add	sp, #16
    e208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e20c:	f5b2 2f61 	cmp.w	r2, #921600	; 0xe1000
    e210:	d985      	bls.n	e11e <am_hal_uart_configure+0x76>
    e212:	4822      	ldr	r0, [pc, #136]	; (e29c <am_hal_uart_configure+0x1f4>)
    e214:	e7f3      	b.n	e1fe <am_hal_uart_configure+0x156>
    e216:	4822      	ldr	r0, [pc, #136]	; (e2a0 <am_hal_uart_configure+0x1f8>)
    e218:	2300      	movs	r3, #0
    e21a:	662b      	str	r3, [r5, #96]	; 0x60
    e21c:	b004      	add	sp, #16
    e21e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e222:	2300      	movs	r3, #0
    e224:	481d      	ldr	r0, [pc, #116]	; (e29c <am_hal_uart_configure+0x1f4>)
    e226:	662b      	str	r3, [r5, #96]	; 0x60
    e228:	e7e9      	b.n	e1fe <am_hal_uart_configure+0x156>
    e22a:	2201      	movs	r2, #1
    e22c:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
    e230:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    e234:	f000 fa5e 	bl	e6f4 <am_hal_queue_init>
    e238:	682b      	ldr	r3, [r5, #0]
    e23a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e23e:	4543      	cmp	r3, r8
    e240:	d1e0      	bne.n	e204 <am_hal_uart_configure+0x15c>
    e242:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e244:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e248:	331c      	adds	r3, #28
    e24a:	031b      	lsls	r3, r3, #12
    e24c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e24e:	f042 0220 	orr.w	r2, r2, #32
    e252:	639a      	str	r2, [r3, #56]	; 0x38
    e254:	e7c9      	b.n	e1ea <am_hal_uart_configure+0x142>
    e256:	2201      	movs	r2, #1
    e258:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
    e25c:	463b      	mov	r3, r7
    e25e:	4621      	mov	r1, r4
    e260:	f105 0048 	add.w	r0, r5, #72	; 0x48
    e264:	f000 fa46 	bl	e6f4 <am_hal_queue_init>
    e268:	682b      	ldr	r3, [r5, #0]
    e26a:	4a08      	ldr	r2, [pc, #32]	; (e28c <am_hal_uart_configure+0x1e4>)
    e26c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e270:	4293      	cmp	r3, r2
    e272:	d1c7      	bne.n	e204 <am_hal_uart_configure+0x15c>
    e274:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e276:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e27a:	331c      	adds	r3, #28
    e27c:	031b      	lsls	r3, r3, #12
    e27e:	2000      	movs	r0, #0
    e280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e282:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    e286:	639a      	str	r2, [r3, #56]	; 0x38
    e288:	e7b9      	b.n	e1fe <am_hal_uart_configure+0x156>
    e28a:	bf00      	nop
    e28c:	01ea9e06 	.word	0x01ea9e06
    e290:	40020000 	.word	0x40020000
    e294:	0016e360 	.word	0x0016e360
    e298:	0000ecb0 	.word	0x0000ecb0
    e29c:	08000003 	.word	0x08000003
    e2a0:	08000002 	.word	0x08000002

0000e2a4 <am_hal_uart_transfer>:
    e2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e2a8:	ed2d 8b02 	vpush	{d8}
    e2ac:	680d      	ldr	r5, [r1, #0]
    e2ae:	b091      	sub	sp, #68	; 0x44
    e2b0:	4604      	mov	r4, r0
    e2b2:	b14d      	cbz	r5, e2c8 <am_hal_uart_transfer+0x24>
    e2b4:	2d01      	cmp	r5, #1
    e2b6:	f000 808f 	beq.w	e3d8 <am_hal_uart_transfer+0x134>
    e2ba:	2507      	movs	r5, #7
    e2bc:	4628      	mov	r0, r5
    e2be:	b011      	add	sp, #68	; 0x44
    e2c0:	ecbd 8b02 	vpop	{d8}
    e2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e2c8:	e9d1 b802 	ldrd	fp, r8, [r1, #8]
    e2cc:	684b      	ldr	r3, [r1, #4]
    e2ce:	690a      	ldr	r2, [r1, #16]
    e2d0:	9202      	str	r2, [sp, #8]
    e2d2:	4618      	mov	r0, r3
    e2d4:	f1b8 0f00 	cmp.w	r8, #0
    e2d8:	f000 8111 	beq.w	e4fe <am_hal_uart_transfer+0x25a>
    e2dc:	f1bb 0f00 	cmp.w	fp, #0
    e2e0:	f000 8172 	beq.w	e5c8 <am_hal_uart_transfer+0x324>
    e2e4:	2c00      	cmp	r4, #0
    e2e6:	f000 8165 	beq.w	e5b4 <am_hal_uart_transfer+0x310>
    e2ea:	46a9      	mov	r9, r5
    e2ec:	462f      	mov	r7, r5
    e2ee:	9501      	str	r5, [sp, #4]
    e2f0:	4625      	mov	r5, r4
    e2f2:	4619      	mov	r1, r3
    e2f4:	682a      	ldr	r2, [r5, #0]
    e2f6:	461c      	mov	r4, r3
    e2f8:	4bad      	ldr	r3, [pc, #692]	; (e5b0 <am_hal_uart_transfer+0x30c>)
    e2fa:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e2fe:	429a      	cmp	r2, r3
    e300:	465e      	mov	r6, fp
    e302:	d12d      	bne.n	e360 <am_hal_uart_transfer+0xbc>
    e304:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    e308:	bb7a      	cbnz	r2, e36a <am_hal_uart_transfer+0xc6>
    e30a:	1e48      	subs	r0, r1, #1
    e30c:	6a69      	ldr	r1, [r5, #36]	; 0x24
    e30e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    e312:	311c      	adds	r1, #28
    e314:	0309      	lsls	r1, r1, #12
    e316:	698b      	ldr	r3, [r1, #24]
    e318:	069b      	lsls	r3, r3, #26
    e31a:	d405      	bmi.n	e328 <am_hal_uart_transfer+0x84>
    e31c:	3201      	adds	r2, #1
    e31e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    e322:	600b      	str	r3, [r1, #0]
    e324:	4296      	cmp	r6, r2
    e326:	d8f6      	bhi.n	e316 <am_hal_uart_transfer+0x72>
    e328:	4417      	add	r7, r2
    e32a:	1ab6      	subs	r6, r6, r2
    e32c:	b936      	cbnz	r6, e33c <am_hal_uart_transfer+0x98>
    e32e:	9d01      	ldr	r5, [sp, #4]
    e330:	9b02      	ldr	r3, [sp, #8]
    e332:	2b00      	cmp	r3, #0
    e334:	f000 808c 	beq.w	e450 <am_hal_uart_transfer+0x1ac>
    e338:	601f      	str	r7, [r3, #0]
    e33a:	e7bf      	b.n	e2bc <am_hal_uart_transfer+0x18>
    e33c:	2010      	movs	r0, #16
    e33e:	f7ff f9a5 	bl	d68c <am_hal_flash_delay>
    e342:	f1b8 3fff 	cmp.w	r8, #4294967295
    e346:	bf18      	it	ne
    e348:	f109 0901 	addne.w	r9, r9, #1
    e34c:	45c8      	cmp	r8, r9
    e34e:	d9ee      	bls.n	e32e <am_hal_uart_transfer+0x8a>
    e350:	682a      	ldr	r2, [r5, #0]
    e352:	4b97      	ldr	r3, [pc, #604]	; (e5b0 <am_hal_uart_transfer+0x30c>)
    e354:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e358:	429a      	cmp	r2, r3
    e35a:	eb04 0107 	add.w	r1, r4, r7
    e35e:	d0d1      	beq.n	e304 <am_hal_uart_transfer+0x60>
    e360:	9b02      	ldr	r3, [sp, #8]
    e362:	b103      	cbz	r3, e366 <am_hal_uart_transfer+0xc2>
    e364:	601f      	str	r7, [r3, #0]
    e366:	2502      	movs	r5, #2
    e368:	e7a8      	b.n	e2bc <am_hal_uart_transfer+0x18>
    e36a:	e9d5 020d 	ldrd	r0, r2, [r5, #52]	; 0x34
    e36e:	1a12      	subs	r2, r2, r0
    e370:	42b2      	cmp	r2, r6
    e372:	4613      	mov	r3, r2
    e374:	f105 0b2c 	add.w	fp, r5, #44	; 0x2c
    e378:	bf28      	it	cs
    e37a:	4633      	movcs	r3, r6
    e37c:	461a      	mov	r2, r3
    e37e:	4658      	mov	r0, fp
    e380:	9303      	str	r3, [sp, #12]
    e382:	f000 f9c3 	bl	e70c <am_hal_queue_item_add>
    e386:	f8d5 a024 	ldr.w	sl, [r5, #36]	; 0x24
    e38a:	f7ff fb49 	bl	da20 <am_hal_interrupt_master_disable>
    e38e:	f50a 2a80 	add.w	sl, sl, #262144	; 0x40000
    e392:	f10a 0a1c 	add.w	sl, sl, #28
    e396:	9008      	str	r0, [sp, #32]
    e398:	ea4f 3a0a 	mov.w	sl, sl, lsl #12
    e39c:	e00d      	b.n	e3ba <am_hal_uart_transfer+0x116>
    e39e:	f000 f9f3 	bl	e788 <am_hal_queue_item_get>
    e3a2:	b190      	cbz	r0, e3ca <am_hal_uart_transfer+0x126>
    e3a4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    e3a6:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e3aa:	321c      	adds	r2, #28
    e3ac:	0312      	lsls	r2, r2, #12
    e3ae:	6993      	ldr	r3, [r2, #24]
    e3b0:	0699      	lsls	r1, r3, #26
    e3b2:	bf5c      	itt	pl
    e3b4:	f89d 301c 	ldrbpl.w	r3, [sp, #28]
    e3b8:	6013      	strpl	r3, [r2, #0]
    e3ba:	f8da 3018 	ldr.w	r3, [sl, #24]
    e3be:	069b      	lsls	r3, r3, #26
    e3c0:	f04f 0201 	mov.w	r2, #1
    e3c4:	a907      	add	r1, sp, #28
    e3c6:	4658      	mov	r0, fp
    e3c8:	d5e9      	bpl.n	e39e <am_hal_uart_transfer+0xfa>
    e3ca:	9b03      	ldr	r3, [sp, #12]
    e3cc:	9808      	ldr	r0, [sp, #32]
    e3ce:	441f      	add	r7, r3
    e3d0:	1af6      	subs	r6, r6, r3
    e3d2:	f7ff fb29 	bl	da28 <am_hal_interrupt_master_set>
    e3d6:	e7a9      	b.n	e32c <am_hal_uart_transfer+0x88>
    e3d8:	68cd      	ldr	r5, [r1, #12]
    e3da:	690b      	ldr	r3, [r1, #16]
    e3dc:	9301      	str	r3, [sp, #4]
    e3de:	e9d1 b701 	ldrd	fp, r7, [r1, #4]
    e3e2:	2d00      	cmp	r5, #0
    e3e4:	f000 80b5 	beq.w	e552 <am_hal_uart_transfer+0x2ae>
    e3e8:	2f00      	cmp	r7, #0
    e3ea:	f000 811e 	beq.w	e62a <am_hal_uart_transfer+0x386>
    e3ee:	2800      	cmp	r0, #0
    e3f0:	f000 80e7 	beq.w	e5c2 <am_hal_uart_transfer+0x31e>
    e3f4:	6822      	ldr	r2, [r4, #0]
    e3f6:	f8df a1b8 	ldr.w	sl, [pc, #440]	; e5b0 <am_hal_uart_transfer+0x30c>
    e3fa:	f100 0348 	add.w	r3, r0, #72	; 0x48
    e3fe:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e402:	ee08 3a10 	vmov	s16, r3
    e406:	f04f 0900 	mov.w	r9, #0
    e40a:	462b      	mov	r3, r5
    e40c:	4552      	cmp	r2, sl
    e40e:	46c8      	mov	r8, r9
    e410:	465d      	mov	r5, fp
    e412:	461e      	mov	r6, r3
    e414:	d133      	bne.n	e47e <am_hal_uart_transfer+0x1da>
    e416:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    e41a:	2a00      	cmp	r2, #0
    e41c:	d137      	bne.n	e48e <am_hal_uart_transfer+0x1ea>
    e41e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    e420:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    e424:	311c      	adds	r1, #28
    e426:	1e68      	subs	r0, r5, #1
    e428:	0309      	lsls	r1, r1, #12
    e42a:	698b      	ldr	r3, [r1, #24]
    e42c:	06dd      	lsls	r5, r3, #27
    e42e:	d408      	bmi.n	e442 <am_hal_uart_transfer+0x19e>
    e430:	680b      	ldr	r3, [r1, #0]
    e432:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    e436:	d15e      	bne.n	e4f6 <am_hal_uart_transfer+0x252>
    e438:	3201      	adds	r2, #1
    e43a:	4297      	cmp	r7, r2
    e43c:	f800 3f01 	strb.w	r3, [r0, #1]!
    e440:	d8f3      	bhi.n	e42a <am_hal_uart_transfer+0x186>
    e442:	4490      	add	r8, r2
    e444:	1abf      	subs	r7, r7, r2
    e446:	b957      	cbnz	r7, e45e <am_hal_uart_transfer+0x1ba>
    e448:	9b01      	ldr	r3, [sp, #4]
    e44a:	b10b      	cbz	r3, e450 <am_hal_uart_transfer+0x1ac>
    e44c:	f8c3 8000 	str.w	r8, [r3]
    e450:	2500      	movs	r5, #0
    e452:	4628      	mov	r0, r5
    e454:	b011      	add	sp, #68	; 0x44
    e456:	ecbd 8b02 	vpop	{d8}
    e45a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e45e:	2010      	movs	r0, #16
    e460:	f7ff f914 	bl	d68c <am_hal_flash_delay>
    e464:	1c73      	adds	r3, r6, #1
    e466:	bf18      	it	ne
    e468:	f109 0901 	addne.w	r9, r9, #1
    e46c:	454e      	cmp	r6, r9
    e46e:	d9eb      	bls.n	e448 <am_hal_uart_transfer+0x1a4>
    e470:	6822      	ldr	r2, [r4, #0]
    e472:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e476:	4552      	cmp	r2, sl
    e478:	eb0b 0508 	add.w	r5, fp, r8
    e47c:	d0cb      	beq.n	e416 <am_hal_uart_transfer+0x172>
    e47e:	2502      	movs	r5, #2
    e480:	9b01      	ldr	r3, [sp, #4]
    e482:	2b00      	cmp	r3, #0
    e484:	f43f af1a 	beq.w	e2bc <am_hal_uart_transfer+0x18>
    e488:	f8c3 8000 	str.w	r8, [r3]
    e48c:	e716      	b.n	e2bc <am_hal_uart_transfer+0x18>
    e48e:	f7ff fac7 	bl	da20 <am_hal_interrupt_master_disable>
    e492:	9007      	str	r0, [sp, #28]
    e494:	6a60      	ldr	r0, [r4, #36]	; 0x24
    e496:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    e49a:	301c      	adds	r0, #28
    e49c:	0300      	lsls	r0, r0, #12
    e49e:	f10d 0c20 	add.w	ip, sp, #32
    e4a2:	2200      	movs	r2, #0
    e4a4:	6983      	ldr	r3, [r0, #24]
    e4a6:	06db      	lsls	r3, r3, #27
    e4a8:	d409      	bmi.n	e4be <am_hal_uart_transfer+0x21a>
    e4aa:	6803      	ldr	r3, [r0, #0]
    e4ac:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    e4b0:	f102 0201 	add.w	r2, r2, #1
    e4b4:	d119      	bne.n	e4ea <am_hal_uart_transfer+0x246>
    e4b6:	2a20      	cmp	r2, #32
    e4b8:	f80c 3b01 	strb.w	r3, [ip], #1
    e4bc:	d1f2      	bne.n	e4a4 <am_hal_uart_transfer+0x200>
    e4be:	ee18 0a10 	vmov	r0, s16
    e4c2:	a908      	add	r1, sp, #32
    e4c4:	f000 f922 	bl	e70c <am_hal_queue_item_add>
    e4c8:	2800      	cmp	r0, #0
    e4ca:	d075      	beq.n	e5b8 <am_hal_uart_transfer+0x314>
    e4cc:	9807      	ldr	r0, [sp, #28]
    e4ce:	f7ff faab 	bl	da28 <am_hal_interrupt_master_set>
    e4d2:	6d22      	ldr	r2, [r4, #80]	; 0x50
    e4d4:	42ba      	cmp	r2, r7
    e4d6:	bf28      	it	cs
    e4d8:	463a      	movcs	r2, r7
    e4da:	ee18 0a10 	vmov	r0, s16
    e4de:	4629      	mov	r1, r5
    e4e0:	4490      	add	r8, r2
    e4e2:	1abf      	subs	r7, r7, r2
    e4e4:	f000 f950 	bl	e788 <am_hal_queue_item_get>
    e4e8:	e7ad      	b.n	e446 <am_hal_uart_transfer+0x1a2>
    e4ea:	9807      	ldr	r0, [sp, #28]
    e4ec:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    e4f0:	f7ff fa9a 	bl	da28 <am_hal_interrupt_master_set>
    e4f4:	e7c4      	b.n	e480 <am_hal_uart_transfer+0x1dc>
    e4f6:	4490      	add	r8, r2
    e4f8:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    e4fc:	e7c0      	b.n	e480 <am_hal_uart_transfer+0x1dc>
    e4fe:	2c00      	cmp	r4, #0
    e500:	f43f af31 	beq.w	e366 <am_hal_uart_transfer+0xc2>
    e504:	6822      	ldr	r2, [r4, #0]
    e506:	492a      	ldr	r1, [pc, #168]	; (e5b0 <am_hal_uart_transfer+0x30c>)
    e508:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e50c:	428a      	cmp	r2, r1
    e50e:	f47f af2a 	bne.w	e366 <am_hal_uart_transfer+0xc2>
    e512:	9b02      	ldr	r3, [sp, #8]
    e514:	b10b      	cbz	r3, e51a <am_hal_uart_transfer+0x276>
    e516:	f8c3 8000 	str.w	r8, [r3]
    e51a:	f1bb 0f00 	cmp.w	fp, #0
    e51e:	d097      	beq.n	e450 <am_hal_uart_transfer+0x1ac>
    e520:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
    e524:	2d00      	cmp	r5, #0
    e526:	d151      	bne.n	e5cc <am_hal_uart_transfer+0x328>
    e528:	6a61      	ldr	r1, [r4, #36]	; 0x24
    e52a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    e52e:	311c      	adds	r1, #28
    e530:	1e42      	subs	r2, r0, #1
    e532:	0309      	lsls	r1, r1, #12
    e534:	698b      	ldr	r3, [r1, #24]
    e536:	0698      	lsls	r0, r3, #26
    e538:	d405      	bmi.n	e546 <am_hal_uart_transfer+0x2a2>
    e53a:	3501      	adds	r5, #1
    e53c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    e540:	600b      	str	r3, [r1, #0]
    e542:	45ab      	cmp	fp, r5
    e544:	d1f6      	bne.n	e534 <am_hal_uart_transfer+0x290>
    e546:	9b02      	ldr	r3, [sp, #8]
    e548:	2b00      	cmp	r3, #0
    e54a:	d081      	beq.n	e450 <am_hal_uart_transfer+0x1ac>
    e54c:	601d      	str	r5, [r3, #0]
    e54e:	2500      	movs	r5, #0
    e550:	e6b4      	b.n	e2bc <am_hal_uart_transfer+0x18>
    e552:	2800      	cmp	r0, #0
    e554:	f43f af07 	beq.w	e366 <am_hal_uart_transfer+0xc2>
    e558:	6802      	ldr	r2, [r0, #0]
    e55a:	4915      	ldr	r1, [pc, #84]	; (e5b0 <am_hal_uart_transfer+0x30c>)
    e55c:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e560:	428a      	cmp	r2, r1
    e562:	f47f af00 	bne.w	e366 <am_hal_uart_transfer+0xc2>
    e566:	b103      	cbz	r3, e56a <am_hal_uart_transfer+0x2c6>
    e568:	601d      	str	r5, [r3, #0]
    e56a:	2f00      	cmp	r7, #0
    e56c:	f43f af70 	beq.w	e450 <am_hal_uart_transfer+0x1ac>
    e570:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    e574:	2a00      	cmp	r2, #0
    e576:	d15a      	bne.n	e62e <am_hal_uart_transfer+0x38a>
    e578:	6a61      	ldr	r1, [r4, #36]	; 0x24
    e57a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    e57e:	311c      	adds	r1, #28
    e580:	f10b 33ff 	add.w	r3, fp, #4294967295
    e584:	0309      	lsls	r1, r1, #12
    e586:	4614      	mov	r4, r2
    e588:	698a      	ldr	r2, [r1, #24]
    e58a:	06d2      	lsls	r2, r2, #27
    e58c:	d409      	bmi.n	e5a2 <am_hal_uart_transfer+0x2fe>
    e58e:	680a      	ldr	r2, [r1, #0]
    e590:	f412 6070 	ands.w	r0, r2, #3840	; 0xf00
    e594:	d176      	bne.n	e684 <am_hal_uart_transfer+0x3e0>
    e596:	3401      	adds	r4, #1
    e598:	42a7      	cmp	r7, r4
    e59a:	f803 2f01 	strb.w	r2, [r3, #1]!
    e59e:	d1f3      	bne.n	e588 <am_hal_uart_transfer+0x2e4>
    e5a0:	4605      	mov	r5, r0
    e5a2:	9b01      	ldr	r3, [sp, #4]
    e5a4:	2b00      	cmp	r3, #0
    e5a6:	f43f ae89 	beq.w	e2bc <am_hal_uart_transfer+0x18>
    e5aa:	601c      	str	r4, [r3, #0]
    e5ac:	e686      	b.n	e2bc <am_hal_uart_transfer+0x18>
    e5ae:	bf00      	nop
    e5b0:	01ea9e06 	.word	0x01ea9e06
    e5b4:	4627      	mov	r7, r4
    e5b6:	e6d3      	b.n	e360 <am_hal_uart_transfer+0xbc>
    e5b8:	9807      	ldr	r0, [sp, #28]
    e5ba:	4d39      	ldr	r5, [pc, #228]	; (e6a0 <am_hal_uart_transfer+0x3fc>)
    e5bc:	f7ff fa34 	bl	da28 <am_hal_interrupt_master_set>
    e5c0:	e75e      	b.n	e480 <am_hal_uart_transfer+0x1dc>
    e5c2:	2502      	movs	r5, #2
    e5c4:	4680      	mov	r8, r0
    e5c6:	e75b      	b.n	e480 <am_hal_uart_transfer+0x1dc>
    e5c8:	462f      	mov	r7, r5
    e5ca:	e6b1      	b.n	e330 <am_hal_uart_transfer+0x8c>
    e5cc:	6b65      	ldr	r5, [r4, #52]	; 0x34
    e5ce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e5d0:	1b52      	subs	r2, r2, r5
    e5d2:	455a      	cmp	r2, fp
    e5d4:	f104 072c 	add.w	r7, r4, #44	; 0x2c
    e5d8:	4601      	mov	r1, r0
    e5da:	bf28      	it	cs
    e5dc:	465a      	movcs	r2, fp
    e5de:	4638      	mov	r0, r7
    e5e0:	4615      	mov	r5, r2
    e5e2:	f000 f893 	bl	e70c <am_hal_queue_item_add>
    e5e6:	6a66      	ldr	r6, [r4, #36]	; 0x24
    e5e8:	f7ff fa1a 	bl	da20 <am_hal_interrupt_master_disable>
    e5ec:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
    e5f0:	361c      	adds	r6, #28
    e5f2:	9005      	str	r0, [sp, #20]
    e5f4:	0336      	lsls	r6, r6, #12
    e5f6:	e00f      	b.n	e618 <am_hal_uart_transfer+0x374>
    e5f8:	a908      	add	r1, sp, #32
    e5fa:	4638      	mov	r0, r7
    e5fc:	f000 f8c4 	bl	e788 <am_hal_queue_item_get>
    e600:	b178      	cbz	r0, e622 <am_hal_uart_transfer+0x37e>
    e602:	6a62      	ldr	r2, [r4, #36]	; 0x24
    e604:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e608:	321c      	adds	r2, #28
    e60a:	0312      	lsls	r2, r2, #12
    e60c:	6993      	ldr	r3, [r2, #24]
    e60e:	0699      	lsls	r1, r3, #26
    e610:	bf5c      	itt	pl
    e612:	f89d 3020 	ldrbpl.w	r3, [sp, #32]
    e616:	6013      	strpl	r3, [r2, #0]
    e618:	69b3      	ldr	r3, [r6, #24]
    e61a:	069b      	lsls	r3, r3, #26
    e61c:	f04f 0201 	mov.w	r2, #1
    e620:	d5ea      	bpl.n	e5f8 <am_hal_uart_transfer+0x354>
    e622:	9805      	ldr	r0, [sp, #20]
    e624:	f7ff fa00 	bl	da28 <am_hal_interrupt_master_set>
    e628:	e78d      	b.n	e546 <am_hal_uart_transfer+0x2a2>
    e62a:	46b8      	mov	r8, r7
    e62c:	e70c      	b.n	e448 <am_hal_uart_transfer+0x1a4>
    e62e:	f7ff f9f7 	bl	da20 <am_hal_interrupt_master_disable>
    e632:	6a61      	ldr	r1, [r4, #36]	; 0x24
    e634:	9006      	str	r0, [sp, #24]
    e636:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    e63a:	311c      	adds	r1, #28
    e63c:	0309      	lsls	r1, r1, #12
    e63e:	ae08      	add	r6, sp, #32
    e640:	2200      	movs	r2, #0
    e642:	698b      	ldr	r3, [r1, #24]
    e644:	06d8      	lsls	r0, r3, #27
    e646:	d409      	bmi.n	e65c <am_hal_uart_transfer+0x3b8>
    e648:	680b      	ldr	r3, [r1, #0]
    e64a:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    e64e:	f102 0201 	add.w	r2, r2, #1
    e652:	d11a      	bne.n	e68a <am_hal_uart_transfer+0x3e6>
    e654:	2a20      	cmp	r2, #32
    e656:	f806 3b01 	strb.w	r3, [r6], #1
    e65a:	d1f2      	bne.n	e642 <am_hal_uart_transfer+0x39e>
    e65c:	f104 0648 	add.w	r6, r4, #72	; 0x48
    e660:	a908      	add	r1, sp, #32
    e662:	4630      	mov	r0, r6
    e664:	f000 f852 	bl	e70c <am_hal_queue_item_add>
    e668:	b1a8      	cbz	r0, e696 <am_hal_uart_transfer+0x3f2>
    e66a:	9806      	ldr	r0, [sp, #24]
    e66c:	f7ff f9dc 	bl	da28 <am_hal_interrupt_master_set>
    e670:	6d24      	ldr	r4, [r4, #80]	; 0x50
    e672:	42bc      	cmp	r4, r7
    e674:	bf28      	it	cs
    e676:	463c      	movcs	r4, r7
    e678:	4659      	mov	r1, fp
    e67a:	4630      	mov	r0, r6
    e67c:	4622      	mov	r2, r4
    e67e:	f000 f883 	bl	e788 <am_hal_queue_item_get>
    e682:	e78e      	b.n	e5a2 <am_hal_uart_transfer+0x2fe>
    e684:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    e688:	e78b      	b.n	e5a2 <am_hal_uart_transfer+0x2fe>
    e68a:	9806      	ldr	r0, [sp, #24]
    e68c:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    e690:	f7ff f9ca 	bl	da28 <am_hal_interrupt_master_set>
    e694:	e612      	b.n	e2bc <am_hal_uart_transfer+0x18>
    e696:	9806      	ldr	r0, [sp, #24]
    e698:	4d01      	ldr	r5, [pc, #4]	; (e6a0 <am_hal_uart_transfer+0x3fc>)
    e69a:	f7ff f9c5 	bl	da28 <am_hal_interrupt_master_set>
    e69e:	e60d      	b.n	e2bc <am_hal_uart_transfer+0x18>
    e6a0:	08000001 	.word	0x08000001

0000e6a4 <am_hal_uart_tx_flush>:
    e6a4:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    e6a8:	b570      	push	{r4, r5, r6, lr}
    e6aa:	6a45      	ldr	r5, [r0, #36]	; 0x24
    e6ac:	4604      	mov	r4, r0
    e6ae:	b15b      	cbz	r3, e6c8 <am_hal_uart_tx_flush+0x24>
    e6b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    e6b2:	b14b      	cbz	r3, e6c8 <am_hal_uart_tx_flush+0x24>
    e6b4:	4e0e      	ldr	r6, [pc, #56]	; (e6f0 <am_hal_uart_tx_flush+0x4c>)
    e6b6:	6e20      	ldr	r0, [r4, #96]	; 0x60
    e6b8:	fbb6 f0f0 	udiv	r0, r6, r0
    e6bc:	0100      	lsls	r0, r0, #4
    e6be:	f7fe ffe5 	bl	d68c <am_hal_flash_delay>
    e6c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e6c4:	2b00      	cmp	r3, #0
    e6c6:	d1f6      	bne.n	e6b6 <am_hal_uart_tx_flush+0x12>
    e6c8:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e6cc:	351c      	adds	r5, #28
    e6ce:	032d      	lsls	r5, r5, #12
    e6d0:	69ab      	ldr	r3, [r5, #24]
    e6d2:	071a      	lsls	r2, r3, #28
    e6d4:	d509      	bpl.n	e6ea <am_hal_uart_tx_flush+0x46>
    e6d6:	4e06      	ldr	r6, [pc, #24]	; (e6f0 <am_hal_uart_tx_flush+0x4c>)
    e6d8:	6e23      	ldr	r3, [r4, #96]	; 0x60
    e6da:	fbb6 f3f3 	udiv	r3, r6, r3
    e6de:	0118      	lsls	r0, r3, #4
    e6e0:	f7fe ffd4 	bl	d68c <am_hal_flash_delay>
    e6e4:	69ab      	ldr	r3, [r5, #24]
    e6e6:	071b      	lsls	r3, r3, #28
    e6e8:	d4f6      	bmi.n	e6d8 <am_hal_uart_tx_flush+0x34>
    e6ea:	2000      	movs	r0, #0
    e6ec:	bd70      	pop	{r4, r5, r6, pc}
    e6ee:	bf00      	nop
    e6f0:	00b71b00 	.word	0x00b71b00

0000e6f4 <am_hal_queue_init>:
    e6f4:	b410      	push	{r4}
    e6f6:	2400      	movs	r4, #0
    e6f8:	e9c0 4400 	strd	r4, r4, [r0]
    e6fc:	e9c0 4302 	strd	r4, r3, [r0, #8]
    e700:	e9c0 2104 	strd	r2, r1, [r0, #16]
    e704:	f85d 4b04 	ldr.w	r4, [sp], #4
    e708:	4770      	bx	lr
    e70a:	bf00      	nop

0000e70c <am_hal_queue_item_add>:
    e70c:	b570      	push	{r4, r5, r6, lr}
    e70e:	6905      	ldr	r5, [r0, #16]
    e710:	b082      	sub	sp, #8
    e712:	4604      	mov	r4, r0
    e714:	fb02 f505 	mul.w	r5, r2, r5
    e718:	460e      	mov	r6, r1
    e71a:	f7ff f981 	bl	da20 <am_hal_interrupt_master_disable>
    e71e:	68e2      	ldr	r2, [r4, #12]
    e720:	9001      	str	r0, [sp, #4]
    e722:	68a0      	ldr	r0, [r4, #8]
    e724:	1a13      	subs	r3, r2, r0
    e726:	42ab      	cmp	r3, r5
    e728:	d31c      	bcc.n	e764 <am_hal_queue_item_add+0x58>
    e72a:	b195      	cbz	r5, e752 <am_hal_queue_item_add+0x46>
    e72c:	6823      	ldr	r3, [r4, #0]
    e72e:	b306      	cbz	r6, e772 <am_hal_queue_item_add+0x66>
    e730:	1e71      	subs	r1, r6, #1
    e732:	194e      	adds	r6, r1, r5
    e734:	6962      	ldr	r2, [r4, #20]
    e736:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    e73a:	54d0      	strb	r0, [r2, r3]
    e73c:	6823      	ldr	r3, [r4, #0]
    e73e:	68e0      	ldr	r0, [r4, #12]
    e740:	3301      	adds	r3, #1
    e742:	428e      	cmp	r6, r1
    e744:	fbb3 f2f0 	udiv	r2, r3, r0
    e748:	fb00 3312 	mls	r3, r0, r2, r3
    e74c:	6023      	str	r3, [r4, #0]
    e74e:	d1f1      	bne.n	e734 <am_hal_queue_item_add+0x28>
    e750:	68a0      	ldr	r0, [r4, #8]
    e752:	4405      	add	r5, r0
    e754:	60a5      	str	r5, [r4, #8]
    e756:	9801      	ldr	r0, [sp, #4]
    e758:	f7ff f966 	bl	da28 <am_hal_interrupt_master_set>
    e75c:	2401      	movs	r4, #1
    e75e:	4620      	mov	r0, r4
    e760:	b002      	add	sp, #8
    e762:	bd70      	pop	{r4, r5, r6, pc}
    e764:	9801      	ldr	r0, [sp, #4]
    e766:	f7ff f95f 	bl	da28 <am_hal_interrupt_master_set>
    e76a:	2400      	movs	r4, #0
    e76c:	4620      	mov	r0, r4
    e76e:	b002      	add	sp, #8
    e770:	bd70      	pop	{r4, r5, r6, pc}
    e772:	4631      	mov	r1, r6
    e774:	3101      	adds	r1, #1
    e776:	3301      	adds	r3, #1
    e778:	428d      	cmp	r5, r1
    e77a:	fbb3 f6f2 	udiv	r6, r3, r2
    e77e:	fb02 3316 	mls	r3, r2, r6, r3
    e782:	d1f7      	bne.n	e774 <am_hal_queue_item_add+0x68>
    e784:	6023      	str	r3, [r4, #0]
    e786:	e7e4      	b.n	e752 <am_hal_queue_item_add+0x46>

0000e788 <am_hal_queue_item_get>:
    e788:	b570      	push	{r4, r5, r6, lr}
    e78a:	6905      	ldr	r5, [r0, #16]
    e78c:	4604      	mov	r4, r0
    e78e:	b082      	sub	sp, #8
    e790:	fb02 f505 	mul.w	r5, r2, r5
    e794:	460e      	mov	r6, r1
    e796:	f7ff f943 	bl	da20 <am_hal_interrupt_master_disable>
    e79a:	68a2      	ldr	r2, [r4, #8]
    e79c:	9001      	str	r0, [sp, #4]
    e79e:	42aa      	cmp	r2, r5
    e7a0:	d31c      	bcc.n	e7dc <am_hal_queue_item_get+0x54>
    e7a2:	b195      	cbz	r5, e7ca <am_hal_queue_item_get+0x42>
    e7a4:	6863      	ldr	r3, [r4, #4]
    e7a6:	b306      	cbz	r6, e7ea <am_hal_queue_item_get+0x62>
    e7a8:	1e71      	subs	r1, r6, #1
    e7aa:	194e      	adds	r6, r1, r5
    e7ac:	6962      	ldr	r2, [r4, #20]
    e7ae:	5cd3      	ldrb	r3, [r2, r3]
    e7b0:	f801 3f01 	strb.w	r3, [r1, #1]!
    e7b4:	6863      	ldr	r3, [r4, #4]
    e7b6:	68e0      	ldr	r0, [r4, #12]
    e7b8:	3301      	adds	r3, #1
    e7ba:	428e      	cmp	r6, r1
    e7bc:	fbb3 f2f0 	udiv	r2, r3, r0
    e7c0:	fb00 3312 	mls	r3, r0, r2, r3
    e7c4:	6063      	str	r3, [r4, #4]
    e7c6:	d1f1      	bne.n	e7ac <am_hal_queue_item_get+0x24>
    e7c8:	68a2      	ldr	r2, [r4, #8]
    e7ca:	9801      	ldr	r0, [sp, #4]
    e7cc:	1b52      	subs	r2, r2, r5
    e7ce:	60a2      	str	r2, [r4, #8]
    e7d0:	f7ff f92a 	bl	da28 <am_hal_interrupt_master_set>
    e7d4:	2401      	movs	r4, #1
    e7d6:	4620      	mov	r0, r4
    e7d8:	b002      	add	sp, #8
    e7da:	bd70      	pop	{r4, r5, r6, pc}
    e7dc:	9801      	ldr	r0, [sp, #4]
    e7de:	f7ff f923 	bl	da28 <am_hal_interrupt_master_set>
    e7e2:	2400      	movs	r4, #0
    e7e4:	4620      	mov	r0, r4
    e7e6:	b002      	add	sp, #8
    e7e8:	bd70      	pop	{r4, r5, r6, pc}
    e7ea:	68e0      	ldr	r0, [r4, #12]
    e7ec:	4631      	mov	r1, r6
    e7ee:	3101      	adds	r1, #1
    e7f0:	3301      	adds	r3, #1
    e7f2:	42a9      	cmp	r1, r5
    e7f4:	fbb3 f6f0 	udiv	r6, r3, r0
    e7f8:	fb00 3316 	mls	r3, r0, r6, r3
    e7fc:	d1f7      	bne.n	e7ee <am_hal_queue_item_get+0x66>
    e7fe:	6063      	str	r3, [r4, #4]
    e800:	e7e3      	b.n	e7ca <am_hal_queue_item_get+0x42>
    e802:	bf00      	nop
    e804:	70656544 	.word	0x70656544
    e808:	65656c73 	.word	0x65656c73
    e80c:	78452070 	.word	0x78452070
    e810:	6c706d61 	.word	0x6c706d61
    e814:	00000a65 	.word	0x00000a65
    e818:	0a0a0a0a 	.word	0x0a0a0a0a
    e81c:	0a0a0a0a 	.word	0x0a0a0a0a
    e820:	0a0a0a0a 	.word	0x0a0a0a0a
    e824:	0a0a0a0a 	.word	0x0a0a0a0a
    e828:	00000a0a 	.word	0x00000a0a

0000e82c <g_sBspUartConfig>:
    e82c:	0001c200 00000060 00000000 00000000     ....`...........
    e83c:	00000000 00000012 00000000 00000000     ................
	...

0000e854 <g_AM_BSP_GPIO_COM_UART_RX>:
    e854:	00000000                                ....

0000e858 <g_AM_BSP_GPIO_COM_UART_TX>:
    e858:	00000000                                ....

0000e85c <am_hal_cachectrl_defaults>:
    e85c:	00000308                                ....

0000e860 <g_AM_HAL_GPIO_DISABLE>:
    e860:	00000003                                ....

0000e864 <g_AM_HAL_GPIO_OUTPUT>:
    e864:	00000403                                ....

0000e868 <g_ui8Bit76Capabilities>:
    e868:	02800101 80010180 80800101 80808080     ................
    e878:	80808080 80808008 01800180 80808080     ................
    e888:	80808080 01800402 01010401 80808080     ................
    e898:	00000101                                ....

0000e89c <g_ui8Inpen>:
    e89c:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
    e8ac:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
    e8bc:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
    e8cc:	00003130                                01..

0000e8d0 <g_ui8NCEtable>:
    e8d0:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    e8e0:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    e8f0:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    e900:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    e910:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    e920:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    e930:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    e940:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    e950:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    e960:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    e970:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    e980:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    e990:	32221202 43231303                       .."2..#C

0000e998 <g_ui8nCEpins>:
    e998:	02070707 00080802 01020202 01010101     ................
    e9a8:	01010101 01010101 01010101 01010101     ................
    e9b8:	01010101 08010101 01010008 01010101     ................
    e9c8:	00000101                                ....

0000e9cc <g_am_hal_mcuctrl_flash_size>:
    e9cc:	00004000 00008000 00010000 00020000     .@..............
    e9dc:	00040000 00080000 00100000 00200000     .............. .
    e9ec:	00180000 00000000 00000000 00000000     ................
	...

0000ea0c <g_am_hal_mcuctrl_sram_size>:
    ea0c:	00004000 00008000 00010000 00020000     .@..............
    ea1c:	00040000 00080000 00100000 00060000     ................
    ea2c:	000c0000 00000000 00000000 00000000     ................
	...

0000ea4c <am_hal_pwrctrl_memory_control>:
	...
    ea64:	00000001 00000001 00000001 00001fff     ................
    ea74:	00001fff 00000001 00000003 00000003     ................
    ea84:	00000003 00001fff 00001fff 00000003     ................
    ea94:	00000007 00000007 00000007 00001fff     ................
    eaa4:	00001fff 00000007 0000000f 0000000f     ................
    eab4:	0000000f 00001fff 00001fff 0000000f     ................
    eac4:	0000001f 0000001f 0000001f 00001fff     ................
    ead4:	00001fff 0000001f 0000003f 0000003f     ........?...?...
    eae4:	0000003f 00001fff 00001fff 0000003f     ?...........?...
    eaf4:	0000007f 0000007f 0000007f 00001fff     ................
    eb04:	00001fff 0000007f 000000ff 000000ff     ................
    eb14:	000000ff 00001fff 00001fff 000000ff     ................
    eb24:	000001ff 000001ff 000001ff 00001fff     ................
    eb34:	00001fff 000001ff 000003ff 000003ff     ................
    eb44:	000003ff 00001fff 00001fff 000003ff     ................
    eb54:	000007ff 000007ff 000007ff 00001fff     ................
    eb64:	00001fff 000007ff 00000fff 00000fff     ................
    eb74:	00000fff 00001fff 00001fff 00000fff     ................
    eb84:	00001fff 00001fff 00001fff 00001fff     ................
    eb94:	00001fff 00001fff 00002000 00002000     ......... ... ..
    eba4:	00002000 00006000 00006000 00002000     . ...`...`... ..
    ebb4:	00006000 00006000 00006000 00006000     .`...`...`...`..
    ebc4:	00006000 00006000 c0000000 00000000     .`...`..........
    ebd4:	c0000000 c0000000 00000000 80000000     ................
    ebe4:	c0007fff 00007fff c0007fff c0007fff     ................
    ebf4:	00007fff 80007fff                       ........

0000ebfc <am_hal_pwrctrl_peripheral_control>:
	...
    ec08:	00000001 00000004 00000004 00000002     ................
    ec18:	00000008 00000008 00000004 00000008     ................
    ec28:	00000008 00000008 00000008 00000008     ................
    ec38:	00000010 00000010 00000010 00000020     ............ ...
    ec48:	00000010 00000010 00000040 00000010     ........@.......
    ec58:	00000010 00000080 00000004 00000004     ................
    ec68:	00000100 00000004 00000004 00000200     ................
    ec78:	00000020 00000020 00000400 00000004      ... ...........
    ec88:	00000004 00000800 00000040 00000040     ........@...@...
    ec98:	00001000 00000080 00000080 00002000     ............. ..
    eca8:	00000100 00000100                       ........

0000ecb0 <CSWTCH.20>:
    ecb0:	016e3600 00b71b00 005b8d80 002dc6c0     .6n.......[...-.
