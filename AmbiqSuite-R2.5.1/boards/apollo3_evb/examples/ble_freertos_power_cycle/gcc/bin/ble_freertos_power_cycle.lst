
bin/ble_freertos_power_cycle.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 2b 00 10 81 13 02 00 75 13 02 00 95 cd 01 00     .+......u.......
    c010:	79 13 02 00 79 13 02 00 79 13 02 00 00 00 00 00     y...y...y.......
	...
    c02c:	f1 3f 01 00 7d 13 02 00 00 00 00 00 61 40 01 00     .?..}.......a@..
    c03c:	c5 40 01 00 7d 13 02 00 7d 13 02 00 7d 13 02 00     .@..}...}...}...
    c04c:	7d 13 02 00 7d 13 02 00 7d 13 02 00 7d 13 02 00     }...}...}...}...
    c05c:	7d 13 02 00 7d 13 02 00 7d 13 02 00 7d 13 02 00     }...}...}...}...
    c06c:	7d 13 02 00 09 04 01 00 7d 13 02 00 95 04 01 00     }.......}.......
    c07c:	fd 03 01 00 7d 13 02 00 7d 13 02 00 7d 13 02 00     ....}...}...}...
    c08c:	7d 13 02 00 7d 13 02 00 7d 13 02 00 7d 13 02 00     }...}...}...}...
    c09c:	6d 42 01 00 8d 42 01 00 7d 13 02 00 7d 13 02 00     mB...B..}...}...
    c0ac:	7d 13 02 00 7d 13 02 00 7d 13 02 00 7d 13 02 00     }...}...}...}...
    c0bc:	7d 13 02 00                                         }...

0000c0c0 <__Patchable>:
	...

0000c100 <memcpy>:
    c100:	4684      	mov	ip, r0
    c102:	ea41 0300 	orr.w	r3, r1, r0
    c106:	f013 0303 	ands.w	r3, r3, #3
    c10a:	d16d      	bne.n	c1e8 <memcpy+0xe8>
    c10c:	3a40      	subs	r2, #64	; 0x40
    c10e:	d341      	bcc.n	c194 <memcpy+0x94>
    c110:	f851 3b04 	ldr.w	r3, [r1], #4
    c114:	f840 3b04 	str.w	r3, [r0], #4
    c118:	f851 3b04 	ldr.w	r3, [r1], #4
    c11c:	f840 3b04 	str.w	r3, [r0], #4
    c120:	f851 3b04 	ldr.w	r3, [r1], #4
    c124:	f840 3b04 	str.w	r3, [r0], #4
    c128:	f851 3b04 	ldr.w	r3, [r1], #4
    c12c:	f840 3b04 	str.w	r3, [r0], #4
    c130:	f851 3b04 	ldr.w	r3, [r1], #4
    c134:	f840 3b04 	str.w	r3, [r0], #4
    c138:	f851 3b04 	ldr.w	r3, [r1], #4
    c13c:	f840 3b04 	str.w	r3, [r0], #4
    c140:	f851 3b04 	ldr.w	r3, [r1], #4
    c144:	f840 3b04 	str.w	r3, [r0], #4
    c148:	f851 3b04 	ldr.w	r3, [r1], #4
    c14c:	f840 3b04 	str.w	r3, [r0], #4
    c150:	f851 3b04 	ldr.w	r3, [r1], #4
    c154:	f840 3b04 	str.w	r3, [r0], #4
    c158:	f851 3b04 	ldr.w	r3, [r1], #4
    c15c:	f840 3b04 	str.w	r3, [r0], #4
    c160:	f851 3b04 	ldr.w	r3, [r1], #4
    c164:	f840 3b04 	str.w	r3, [r0], #4
    c168:	f851 3b04 	ldr.w	r3, [r1], #4
    c16c:	f840 3b04 	str.w	r3, [r0], #4
    c170:	f851 3b04 	ldr.w	r3, [r1], #4
    c174:	f840 3b04 	str.w	r3, [r0], #4
    c178:	f851 3b04 	ldr.w	r3, [r1], #4
    c17c:	f840 3b04 	str.w	r3, [r0], #4
    c180:	f851 3b04 	ldr.w	r3, [r1], #4
    c184:	f840 3b04 	str.w	r3, [r0], #4
    c188:	f851 3b04 	ldr.w	r3, [r1], #4
    c18c:	f840 3b04 	str.w	r3, [r0], #4
    c190:	3a40      	subs	r2, #64	; 0x40
    c192:	d2bd      	bcs.n	c110 <memcpy+0x10>
    c194:	3230      	adds	r2, #48	; 0x30
    c196:	d311      	bcc.n	c1bc <memcpy+0xbc>
    c198:	f851 3b04 	ldr.w	r3, [r1], #4
    c19c:	f840 3b04 	str.w	r3, [r0], #4
    c1a0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1a4:	f840 3b04 	str.w	r3, [r0], #4
    c1a8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1ac:	f840 3b04 	str.w	r3, [r0], #4
    c1b0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1b4:	f840 3b04 	str.w	r3, [r0], #4
    c1b8:	3a10      	subs	r2, #16
    c1ba:	d2ed      	bcs.n	c198 <memcpy+0x98>
    c1bc:	320c      	adds	r2, #12
    c1be:	d305      	bcc.n	c1cc <memcpy+0xcc>
    c1c0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1c4:	f840 3b04 	str.w	r3, [r0], #4
    c1c8:	3a04      	subs	r2, #4
    c1ca:	d2f9      	bcs.n	c1c0 <memcpy+0xc0>
    c1cc:	3204      	adds	r2, #4
    c1ce:	d008      	beq.n	c1e2 <memcpy+0xe2>
    c1d0:	07d2      	lsls	r2, r2, #31
    c1d2:	bf1c      	itt	ne
    c1d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c1d8:	f800 3b01 	strbne.w	r3, [r0], #1
    c1dc:	d301      	bcc.n	c1e2 <memcpy+0xe2>
    c1de:	880b      	ldrh	r3, [r1, #0]
    c1e0:	8003      	strh	r3, [r0, #0]
    c1e2:	4660      	mov	r0, ip
    c1e4:	4770      	bx	lr
    c1e6:	bf00      	nop
    c1e8:	2a08      	cmp	r2, #8
    c1ea:	d313      	bcc.n	c214 <memcpy+0x114>
    c1ec:	078b      	lsls	r3, r1, #30
    c1ee:	d08d      	beq.n	c10c <memcpy+0xc>
    c1f0:	f010 0303 	ands.w	r3, r0, #3
    c1f4:	d08a      	beq.n	c10c <memcpy+0xc>
    c1f6:	f1c3 0304 	rsb	r3, r3, #4
    c1fa:	1ad2      	subs	r2, r2, r3
    c1fc:	07db      	lsls	r3, r3, #31
    c1fe:	bf1c      	itt	ne
    c200:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c204:	f800 3b01 	strbne.w	r3, [r0], #1
    c208:	d380      	bcc.n	c10c <memcpy+0xc>
    c20a:	f831 3b02 	ldrh.w	r3, [r1], #2
    c20e:	f820 3b02 	strh.w	r3, [r0], #2
    c212:	e77b      	b.n	c10c <memcpy+0xc>
    c214:	3a04      	subs	r2, #4
    c216:	d3d9      	bcc.n	c1cc <memcpy+0xcc>
    c218:	3a01      	subs	r2, #1
    c21a:	f811 3b01 	ldrb.w	r3, [r1], #1
    c21e:	f800 3b01 	strb.w	r3, [r0], #1
    c222:	d2f9      	bcs.n	c218 <memcpy+0x118>
    c224:	780b      	ldrb	r3, [r1, #0]
    c226:	7003      	strb	r3, [r0, #0]
    c228:	784b      	ldrb	r3, [r1, #1]
    c22a:	7043      	strb	r3, [r0, #1]
    c22c:	788b      	ldrb	r3, [r1, #2]
    c22e:	7083      	strb	r3, [r0, #2]
    c230:	4660      	mov	r0, ip
    c232:	4770      	bx	lr

0000c234 <__aeabi_d2f>:
    c234:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c238:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c23c:	bf24      	itt	cs
    c23e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c242:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c246:	d90d      	bls.n	c264 <__aeabi_d2f+0x30>
    c248:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c24c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c250:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c254:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c258:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c25c:	bf08      	it	eq
    c25e:	f020 0001 	biceq.w	r0, r0, #1
    c262:	4770      	bx	lr
    c264:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c268:	d121      	bne.n	c2ae <__aeabi_d2f+0x7a>
    c26a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c26e:	bfbc      	itt	lt
    c270:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c274:	4770      	bxlt	lr
    c276:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c27a:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c27e:	f1c2 0218 	rsb	r2, r2, #24
    c282:	f1c2 0c20 	rsb	ip, r2, #32
    c286:	fa10 f30c 	lsls.w	r3, r0, ip
    c28a:	fa20 f002 	lsr.w	r0, r0, r2
    c28e:	bf18      	it	ne
    c290:	f040 0001 	orrne.w	r0, r0, #1
    c294:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c298:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c29c:	fa03 fc0c 	lsl.w	ip, r3, ip
    c2a0:	ea40 000c 	orr.w	r0, r0, ip
    c2a4:	fa23 f302 	lsr.w	r3, r3, r2
    c2a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c2ac:	e7cc      	b.n	c248 <__aeabi_d2f+0x14>
    c2ae:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c2b2:	d107      	bne.n	c2c4 <__aeabi_d2f+0x90>
    c2b4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c2b8:	bf1e      	ittt	ne
    c2ba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c2be:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c2c2:	4770      	bxne	lr
    c2c4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c2c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c2cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c2d0:	4770      	bx	lr
    c2d2:	bf00      	nop

0000c2d4 <attcDiscDescriptors>:
 *          ATT_SUCCESS if discovery procedure completed successfully.
 *          Otherwise the discovery procedure failed.
 */
/*************************************************************************************************/
static uint8_t attcDiscDescriptors(dmConnId_t connId, attcDiscCb_t *pCb)
{
    c2d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  attcDiscChar_t  **pChar;
  uint16_t        startHdl = ATT_HANDLE_NONE;
  uint16_t        endHdl = ATT_HANDLE_NONE;

  /* find next descriptor in list */
  pChar = pCb->pCharList + pCb->charListIdx;
    c2d8:	7c8b      	ldrb	r3, [r1, #18]
  while (pCb->charListIdx < pCb->charListLen)
    c2da:	7b0d      	ldrb	r5, [r1, #12]
  pChar = pCb->pCharList + pCb->charListIdx;
    c2dc:	680e      	ldr	r6, [r1, #0]
{
    c2de:	b083      	sub	sp, #12
  uint16_t        endHdl = ATT_HANDLE_NONE;
    c2e0:	2200      	movs	r2, #0
  while (pCb->charListIdx < pCb->charListLen)
    c2e2:	42ab      	cmp	r3, r5
{
    c2e4:	9001      	str	r0, [sp, #4]
  pChar = pCb->pCharList + pCb->charListIdx;
    c2e6:	eb06 0c83 	add.w	ip, r6, r3, lsl #2
  uint16_t        startHdl = ATT_HANDLE_NONE;
    c2ea:	4614      	mov	r4, r2
  while (pCb->charListIdx < pCb->charListLen)
    c2ec:	d23f      	bcs.n	c36e <attcDiscDescriptors+0x9a>
    {
      /* start handle is one greater than characteristic value handle,
       * which is stored in the previous entry in the list;
       * end handle is stored at current entry in the list
       */
      startHdl = pCb->pHdlList[pCb->charListIdx - 1] + 1;
    c2ee:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
      endHdl = pCb->pHdlList[pCb->charListIdx];

      /* clear temp end handle */
      pCb->pHdlList[pCb->charListIdx] = ATT_HANDLE_NONE;
    c2f2:	4617      	mov	r7, r2
      {
        /* we are looking for descriptors for this characteristic but
         * there aren't any;
         * skip over any other descriptors that follow in our list
         */
        while (++pCb->charListIdx < pCb->charListLen)
    c2f4:	f105 3aff 	add.w	sl, r5, #4294967295
        {
          pChar++;
    c2f8:	f1a5 0902 	sub.w	r9, r5, #2
    c2fc:	e006      	b.n	c30c <attcDiscDescriptors+0x38>
    }
    else
    {
      /* go to next in list */
      pChar++;
      pCb->charListIdx++;
    c2fe:	fa5f f38e 	uxtb.w	r3, lr
  while (pCb->charListIdx < pCb->charListLen)
    c302:	429d      	cmp	r5, r3
      pCb->charListIdx++;
    c304:	748b      	strb	r3, [r1, #18]
      pChar++;
    c306:	f10c 0c04 	add.w	ip, ip, #4
  while (pCb->charListIdx < pCb->charListLen)
    c30a:	d930      	bls.n	c36e <attcDiscDescriptors+0x9a>
    if (((*pChar)->settings & ATTC_SET_DESCRIPTOR) != 0)
    c30c:	f8dc 0000 	ldr.w	r0, [ip]
    c310:	f890 b004 	ldrb.w	fp, [r0, #4]
    c314:	f01b 0f04 	tst.w	fp, #4
      pCb->charListIdx++;
    c318:	f103 0e01 	add.w	lr, r3, #1
    if (((*pChar)->settings & ATTC_SET_DESCRIPTOR) != 0)
    c31c:	d0ef      	beq.n	c2fe <attcDiscDescriptors+0x2a>
      startHdl = pCb->pHdlList[pCb->charListIdx - 1] + 1;
    c31e:	f8d1 e004 	ldr.w	lr, [r1, #4]
    c322:	4443      	add	r3, r8
    c324:	005a      	lsls	r2, r3, #1
    c326:	f83e 4013 	ldrh.w	r4, [lr, r3, lsl #1]
      endHdl = pCb->pHdlList[pCb->charListIdx];
    c32a:	1c93      	adds	r3, r2, #2
      startHdl = pCb->pHdlList[pCb->charListIdx - 1] + 1;
    c32c:	3401      	adds	r4, #1
      endHdl = pCb->pHdlList[pCb->charListIdx];
    c32e:	f83e 2003 	ldrh.w	r2, [lr, r3]
      pCb->pHdlList[pCb->charListIdx] = ATT_HANDLE_NONE;
    c332:	f82e 7003 	strh.w	r7, [lr, r3]
      startHdl = pCb->pHdlList[pCb->charListIdx - 1] + 1;
    c336:	b2a4      	uxth	r4, r4
      if (startHdl <= endHdl)
    c338:	4294      	cmp	r4, r2
    c33a:	d932      	bls.n	c3a2 <attcDiscDescriptors+0xce>
        while (++pCb->charListIdx < pCb->charListLen)
    c33c:	f891 b012 	ldrb.w	fp, [r1, #18]
    c340:	f10b 0301 	add.w	r3, fp, #1
    c344:	b2db      	uxtb	r3, r3
    c346:	eb03 0e0a 	add.w	lr, r3, sl
    c34a:	ebae 0e0b 	sub.w	lr, lr, fp
          pChar++;
    c34e:	eba9 0b0b 	sub.w	fp, r9, fp
    c352:	fa5f fb8b 	uxtb.w	fp, fp
    c356:	f10b 0b01 	add.w	fp, fp, #1
        while (++pCb->charListIdx < pCb->charListLen)
    c35a:	42ab      	cmp	r3, r5
    c35c:	748b      	strb	r3, [r1, #18]
          pChar++;
    c35e:	eb0c 0c8b 	add.w	ip, ip, fp, lsl #2
        while (++pCb->charListIdx < pCb->charListLen)
    c362:	d204      	bcs.n	c36e <attcDiscDescriptors+0x9a>
    c364:	fa5f f38e 	uxtb.w	r3, lr
  while (pCb->charListIdx < pCb->charListLen)
    c368:	429d      	cmp	r5, r3
    c36a:	748b      	strb	r3, [r1, #18]
    c36c:	d8ce      	bhi.n	c30c <attcDiscDescriptors+0x38>
    }
  }

  /* if no more descriptors to be discovered */
  if (pCb->charListIdx == pCb->charListLen)
    c36e:	42ab      	cmp	r3, r5
    c370:	d117      	bne.n	c3a2 <attcDiscDescriptors+0xce>
  for (i = 0, pChar = pCb->pCharList; i < pCb->charListLen; i++, pChar++)
    c372:	b193      	cbz	r3, c39a <attcDiscDescriptors+0xc6>
    c374:	3b01      	subs	r3, #1
    c376:	b2db      	uxtb	r3, r3
    c378:	1f32      	subs	r2, r6, #4
    c37a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    c37e:	2000      	movs	r0, #0
    if (((*pChar)->settings & ATTC_SET_REQUIRED) != 0)
    c380:	f852 4f04 	ldr.w	r4, [r2, #4]!
    c384:	7924      	ldrb	r4, [r4, #4]
    c386:	07a4      	lsls	r4, r4, #30
    c388:	d502      	bpl.n	c390 <attcDiscDescriptors+0xbc>
      if (pCb->pHdlList[i] == ATT_HANDLE_NONE)
    c38a:	684c      	ldr	r4, [r1, #4]
    c38c:	5a24      	ldrh	r4, [r4, r0]
    c38e:	b194      	cbz	r4, c3b6 <attcDiscDescriptors+0xe2>
  for (i = 0, pChar = pCb->pCharList; i < pCb->charListLen; i++, pChar++)
    c390:	4293      	cmp	r3, r2
    c392:	f100 0002 	add.w	r0, r0, #2
    c396:	d1f3      	bne.n	c380 <attcDiscDescriptors+0xac>
  return ATT_SUCCESS;
    c398:	2500      	movs	r5, #0
  else
  {
    AttcFindInfoReq(connId, startHdl, endHdl, TRUE);
    return ATT_CONTINUING;
  }
}
    c39a:	4628      	mov	r0, r5
    c39c:	b003      	add	sp, #12
    c39e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    AttcFindInfoReq(connId, startHdl, endHdl, TRUE);
    c3a2:	9801      	ldr	r0, [sp, #4]
    c3a4:	2301      	movs	r3, #1
    c3a6:	4621      	mov	r1, r4
    c3a8:	f001 f832 	bl	d410 <AttcFindInfoReq>
    return ATT_CONTINUING;
    c3ac:	2578      	movs	r5, #120	; 0x78
}
    c3ae:	4628      	mov	r0, r5
    c3b0:	b003      	add	sp, #12
    c3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return ATT_ERR_REQ_NOT_FOUND;
    c3b6:	2576      	movs	r5, #118	; 0x76
}
    c3b8:	4628      	mov	r0, r5
    c3ba:	b003      	add	sp, #12
    c3bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c3c0 <AttcDiscService>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttcDiscService(dmConnId_t connId, attcDiscCb_t *pCb, uint8_t uuidLen, uint8_t *pUuid)
{
    c3c0:	b500      	push	{lr}
    c3c2:	b085      	sub	sp, #20
  AttcFindByTypeValueReq(connId, ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_UUID_PRIMARY_SERVICE,
    c3c4:	2100      	movs	r1, #0
    c3c6:	e9cd 3101 	strd	r3, r1, [sp, #4]
    c3ca:	9200      	str	r2, [sp, #0]
    c3cc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    c3d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    c3d4:	2101      	movs	r1, #1
    c3d6:	f001 f9a9 	bl	d72c <AttcFindByTypeValueReq>
                         uuidLen, pUuid, FALSE);
}
    c3da:	b005      	add	sp, #20
    c3dc:	f85d fb04 	ldr.w	pc, [sp], #4

0000c3e0 <AttcDiscServiceCmpl>:
 *
 *  \return ATT_SUCCESS if successful otherwise error.
 */
/*************************************************************************************************/
uint8_t AttcDiscServiceCmpl(attcDiscCb_t *pCb, attEvt_t *pMsg)
{
    c3e0:	b510      	push	{r4, lr}
  uint8_t *p;

  /* verify callback event */
  if (pMsg->hdr.event != ATTC_FIND_BY_TYPE_VALUE_RSP)
    c3e2:	788b      	ldrb	r3, [r1, #2]
    c3e4:	2b03      	cmp	r3, #3
    c3e6:	d117      	bne.n	c418 <AttcDiscServiceCmpl+0x38>
  {
    ATT_TRACE_WARN1("unexpected callback event %d", pMsg->hdr.event);
    return ATT_ERR_UNDEFINED;
  }
  /* verify status */
  else if (pMsg->hdr.status != ATT_SUCCESS)
    c3e8:	78cc      	ldrb	r4, [r1, #3]
    c3ea:	b99c      	cbnz	r4, c414 <AttcDiscServiceCmpl+0x34>
  {
    return pMsg->hdr.status;
  }
  /* verify result was found */
  else if (pMsg->valueLen == 0)
    c3ec:	890b      	ldrh	r3, [r1, #8]
    c3ee:	b1d3      	cbz	r3, c426 <AttcDiscServiceCmpl+0x46>
  {
    return ATT_ERR_NOT_FOUND;
  }

  /* get handles of first returned service only; ATT has already performed error checking */
  p = pMsg->pValue;
    c3f0:	684b      	ldr	r3, [r1, #4]
  BSTREAM_TO_UINT16(pCb->svcStartHdl, p);
    c3f2:	785a      	ldrb	r2, [r3, #1]
    c3f4:	7819      	ldrb	r1, [r3, #0]
    c3f6:	eb01 2102 	add.w	r1, r1, r2, lsl #8
    c3fa:	b289      	uxth	r1, r1
    c3fc:	81c1      	strh	r1, [r0, #14]
  BSTREAM_TO_UINT16(pCb->svcEndHdl, p);
    c3fe:	789a      	ldrb	r2, [r3, #2]
    c400:	4684      	mov	ip, r0
    c402:	78d8      	ldrb	r0, [r3, #3]
    c404:	eb02 2200 	add.w	r2, r2, r0, lsl #8
    c408:	b292      	uxth	r2, r2

  ATT_TRACE_INFO2("found service startHdl=0x%x endHdl=0x%x", pCb->svcStartHdl, pCb->svcEndHdl);
    c40a:	4808      	ldr	r0, [pc, #32]	; (c42c <AttcDiscServiceCmpl+0x4c>)
  BSTREAM_TO_UINT16(pCb->svcEndHdl, p);
    c40c:	f8ac 2010 	strh.w	r2, [ip, #16]
  ATT_TRACE_INFO2("found service startHdl=0x%x endHdl=0x%x", pCb->svcStartHdl, pCb->svcEndHdl);
    c410:	f007 fd80 	bl	13f14 <WsfTrace>

  return ATT_SUCCESS;
}
    c414:	4620      	mov	r0, r4
    c416:	bd10      	pop	{r4, pc}
    ATT_TRACE_WARN1("unexpected callback event %d", pMsg->hdr.event);
    c418:	4805      	ldr	r0, [pc, #20]	; (c430 <AttcDiscServiceCmpl+0x50>)
    c41a:	4619      	mov	r1, r3
    return ATT_ERR_UNDEFINED;
    c41c:	2475      	movs	r4, #117	; 0x75
    ATT_TRACE_WARN1("unexpected callback event %d", pMsg->hdr.event);
    c41e:	f007 fd79 	bl	13f14 <WsfTrace>
}
    c422:	4620      	mov	r0, r4
    c424:	bd10      	pop	{r4, pc}
    return ATT_ERR_NOT_FOUND;
    c426:	240a      	movs	r4, #10
}
    c428:	4620      	mov	r0, r4
    c42a:	bd10      	pop	{r4, pc}
    c42c:	00023c0c 	.word	0x00023c0c
    c430:	00023bec 	.word	0x00023bec

0000c434 <AttcDiscCharStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttcDiscCharStart(dmConnId_t connId, attcDiscCb_t *pCb)
{
    c434:	b500      	push	{lr}
    c436:	b083      	sub	sp, #12
  /* initialize control block */
  pCb->charListIdx = 0;
    c438:	f44f 4c7f 	mov.w	ip, #65280	; 0xff00
  pCb->endHdlIdx = ATT_DISC_HDL_IDX_NONE;

  AttcReadByTypeReq(connId, pCb->svcStartHdl, pCb->svcEndHdl, ATT_16_UUID_LEN,
    c43c:	2201      	movs	r2, #1
  pCb->charListIdx = 0;
    c43e:	f8a1 c012 	strh.w	ip, [r1, #18]
  AttcReadByTypeReq(connId, pCb->svcStartHdl, pCb->svcEndHdl, ATT_16_UUID_LEN,
    c442:	4b05      	ldr	r3, [pc, #20]	; (c458 <AttcDiscCharStart+0x24>)
    c444:	9201      	str	r2, [sp, #4]
    c446:	8a0a      	ldrh	r2, [r1, #16]
    c448:	89c9      	ldrh	r1, [r1, #14]
    c44a:	9300      	str	r3, [sp, #0]
    c44c:	2302      	movs	r3, #2
    c44e:	f001 f99f 	bl	d790 <AttcReadByTypeReq>
                    (uint8_t *) attChUuid, TRUE);
}
    c452:	b003      	add	sp, #12
    c454:	f85d fb04 	ldr.w	pc, [sp], #4
    c458:	00023ed0 	.word	0x00023ed0

0000c45c <AttcDiscCharCmpl>:
 *          ATT_SUCCESS if discovery procedure completed successfully.
 *          Otherwise the discovery procedure failed.
 */
/*************************************************************************************************/
uint8_t AttcDiscCharCmpl(attcDiscCb_t *pCb, attEvt_t *pMsg)
{
    c45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c460:	468b      	mov	fp, r1
  uint8_t status;

  /* verify callback event */
  if (pMsg->hdr.event != ATTC_READ_BY_TYPE_RSP &&
    c462:	7889      	ldrb	r1, [r1, #2]
    c464:	2904      	cmp	r1, #4
{
    c466:	b087      	sub	sp, #28
    c468:	4607      	mov	r7, r0
  if (pMsg->hdr.event != ATTC_READ_BY_TYPE_RSP &&
    c46a:	f000 8099 	beq.w	c5a0 <AttcDiscCharCmpl+0x144>
    c46e:	2902      	cmp	r1, #2
    c470:	f040 819b 	bne.w	c7aa <AttcDiscCharCmpl+0x34e>
  if (pMsg->hdr.status == ATT_SUCCESS)
    c474:	f89b 3003 	ldrb.w	r3, [fp, #3]
    c478:	9300      	str	r3, [sp, #0]
    c47a:	b32b      	cbz	r3, c4c8 <AttcDiscCharCmpl+0x6c>
    pChar = &pCb->pCharList[pCb->charListIdx];
    c47c:	7cba      	ldrb	r2, [r7, #18]
    c47e:	6839      	ldr	r1, [r7, #0]
      if (pCb->charListIdx == pCb->charListLen)
    c480:	7b3c      	ldrb	r4, [r7, #12]
    pChar = &pCb->pCharList[pCb->charListIdx];
    c482:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    c486:	3201      	adds	r2, #1
    c488:	b2d2      	uxtb	r2, r2
    c48a:	e005      	b.n	c498 <AttcDiscCharCmpl+0x3c>
    } while ((*pChar)->settings & ATTC_SET_DESCRIPTOR);
    c48c:	f851 0f04 	ldr.w	r0, [r1, #4]!
    c490:	7900      	ldrb	r0, [r0, #4]
    c492:	0740      	lsls	r0, r0, #29
    c494:	d504      	bpl.n	c4a0 <AttcDiscCharCmpl+0x44>
    c496:	461a      	mov	r2, r3
    c498:	1c53      	adds	r3, r2, #1
      if (pCb->charListIdx == pCb->charListLen)
    c49a:	42a2      	cmp	r2, r4
    } while ((*pChar)->settings & ATTC_SET_DESCRIPTOR);
    c49c:	b2db      	uxtb	r3, r3
      if (pCb->charListIdx == pCb->charListLen)
    c49e:	d1f5      	bne.n	c48c <AttcDiscCharCmpl+0x30>
    return attcDiscDescriptors((dmConnId_t) pMsg->hdr.param, pCb);
    c4a0:	74ba      	strb	r2, [r7, #18]
    c4a2:	f89b 0000 	ldrb.w	r0, [fp]
    c4a6:	4639      	mov	r1, r7
    c4a8:	f7ff ff14 	bl	c2d4 <attcDiscDescriptors>
    c4ac:	4604      	mov	r4, r0
  {
    status = attcDiscProcDesc(pCb, pMsg);
  }

  /* if characteristic discovery failed clear any handles */
  if (status != ATT_SUCCESS && status != ATT_CONTINUING)
    c4ae:	b13c      	cbz	r4, c4c0 <AttcDiscCharCmpl+0x64>
    c4b0:	2c78      	cmp	r4, #120	; 0x78
    c4b2:	d070      	beq.n	c596 <AttcDiscCharCmpl+0x13a>
  {
    memset(pCb->pHdlList, 0, (pCb->charListLen * sizeof(uint16_t)));
    c4b4:	7b3a      	ldrb	r2, [r7, #12]
    c4b6:	6878      	ldr	r0, [r7, #4]
    c4b8:	0052      	lsls	r2, r2, #1
    c4ba:	2100      	movs	r1, #0
    c4bc:	f014 ffc6 	bl	2144c <memset>
  }

  return status;
}
    c4c0:	4620      	mov	r0, r4
    c4c2:	b007      	add	sp, #28
    c4c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    p = pMsg->pValue;
    c4c8:	f8db 3004 	ldr.w	r3, [fp, #4]
    pEnd = pMsg->pValue + pMsg->valueLen;
    c4cc:	f8bb 2008 	ldrh.w	r2, [fp, #8]
    BSTREAM_TO_UINT8(format, p);
    c4d0:	4698      	mov	r8, r3
    pEnd = pMsg->pValue + pMsg->valueLen;
    c4d2:	eb03 0a02 	add.w	sl, r3, r2
    BSTREAM_TO_UINT8(format, p);
    c4d6:	f818 3b01 	ldrb.w	r3, [r8], #1
    if (format == ATT_FIND_HANDLE_16_UUID)
    c4da:	2b01      	cmp	r3, #1
    c4dc:	f000 810d 	beq.w	c6fa <AttcDiscCharCmpl+0x29e>
    else if (format == ATT_FIND_HANDLE_128_UUID)
    c4e0:	2b02      	cmp	r3, #2
    c4e2:	f040 816a 	bne.w	c7ba <AttcDiscCharCmpl+0x35e>
    c4e6:	2312      	movs	r3, #18
    c4e8:	9303      	str	r3, [sp, #12]
      settings = ATTC_SET_UUID_128;
    c4ea:	2301      	movs	r3, #1
    c4ec:	9300      	str	r3, [sp, #0]
    while (p < pEnd)
    c4ee:	45c2      	cmp	sl, r8
    c4f0:	d94c      	bls.n	c58c <AttcDiscCharCmpl+0x130>
    c4f2:	f897 900c 	ldrb.w	r9, [r7, #12]
    c4f6:	f8cd b014 	str.w	fp, [sp, #20]
    c4fa:	46d3      	mov	fp, sl
  pDesc = &pCb->pCharList[pCb->charListIdx];
    c4fc:	7cbc      	ldrb	r4, [r7, #18]
  BSTREAM_TO_UINT16(hdl, pPair);
    c4fe:	f898 3000 	ldrb.w	r3, [r8]
  pDesc = &pCb->pCharList[pCb->charListIdx];
    c502:	683e      	ldr	r6, [r7, #0]
  BSTREAM_TO_UINT16(hdl, pPair);
    c504:	9301      	str	r3, [sp, #4]
  for (i = pCb->charListIdx;
    c506:	454c      	cmp	r4, r9
  BSTREAM_TO_UINT16(hdl, pPair);
    c508:	f898 3001 	ldrb.w	r3, [r8, #1]
    c50c:	9302      	str	r3, [sp, #8]
  pDesc = &pCb->pCharList[pCb->charListIdx];
    c50e:	eb06 0684 	add.w	r6, r6, r4, lsl #2
    c512:	f108 0a02 	add.w	sl, r8, #2
    c516:	b222      	sxth	r2, r4
  for (i = pCb->charListIdx;
    c518:	f080 8151 	bcs.w	c7be <AttcDiscCharCmpl+0x362>
    c51c:	9b00      	ldr	r3, [sp, #0]
    c51e:	2b01      	cmp	r3, #1
    c520:	f040 80ee 	bne.w	c700 <AttcDiscCharCmpl+0x2a4>
    c524:	3e04      	subs	r6, #4
    c526:	e003      	b.n	c530 <AttcDiscCharCmpl+0xd4>
       i++, pDesc++)
    c528:	3401      	adds	r4, #1
    c52a:	b2e4      	uxtb	r4, r4
  for (i = pCb->charListIdx;
    c52c:	454c      	cmp	r4, r9
    c52e:	d222      	bcs.n	c576 <AttcDiscCharCmpl+0x11a>
       (i < pCb->charListLen) && (((*pDesc)->settings & ATTC_SET_DESCRIPTOR) != 0);
    c530:	f856 0f04 	ldr.w	r0, [r6, #4]!
    c534:	f890 c004 	ldrb.w	ip, [r0, #4]
    c538:	f01c 0f04 	tst.w	ip, #4
    if (pCb->pHdlList[i] == 0)
    c53c:	ea4f 0244 	mov.w	r2, r4, lsl #1
       (i < pCb->charListLen) && (((*pDesc)->settings & ATTC_SET_DESCRIPTOR) != 0);
    c540:	d019      	beq.n	c576 <AttcDiscCharCmpl+0x11a>
    if (pCb->pHdlList[i] == 0)
    c542:	687d      	ldr	r5, [r7, #4]
    c544:	f835 1014 	ldrh.w	r1, [r5, r4, lsl #1]
    c548:	eb05 0544 	add.w	r5, r5, r4, lsl #1
    c54c:	2900      	cmp	r1, #0
    c54e:	d1eb      	bne.n	c528 <AttcDiscCharCmpl+0xcc>
  if ((pChar->settings & ATT_SET_UUID_MASK) == settings)
    c550:	f01c 0f01 	tst.w	ip, #1
    c554:	6800      	ldr	r0, [r0, #0]
    return attUuidCmp16to128(pChar->pUuid, pUuid);
    c556:	4651      	mov	r1, sl
  if ((pChar->settings & ATT_SET_UUID_MASK) == settings)
    c558:	f040 810c 	bne.w	c774 <AttcDiscCharCmpl+0x318>
    c55c:	9204      	str	r2, [sp, #16]
    return attUuidCmp16to128(pChar->pUuid, pUuid);
    c55e:	f003 fa75 	bl	fa4c <attUuidCmp16to128>
      if (attcUuidCmp(*pDesc, pPair, settings))
    c562:	9a04      	ldr	r2, [sp, #16]
    c564:	2800      	cmp	r0, #0
    c566:	f040 811d 	bne.w	c7a4 <AttcDiscCharCmpl+0x348>
       (i < pCb->charListLen) && (((*pDesc)->settings & ATTC_SET_DESCRIPTOR) != 0);
    c56a:	f897 900c 	ldrb.w	r9, [r7, #12]
       i++, pDesc++)
    c56e:	3401      	adds	r4, #1
    c570:	b2e4      	uxtb	r4, r4
  for (i = pCb->charListIdx;
    c572:	454c      	cmp	r4, r9
    c574:	d3dc      	bcc.n	c530 <AttcDiscCharCmpl+0xd4>
      p += pairLen;
    c576:	9b03      	ldr	r3, [sp, #12]
    c578:	4498      	add	r8, r3
    while (p < pEnd)
    c57a:	45c3      	cmp	fp, r8
    c57c:	d8be      	bhi.n	c4fc <AttcDiscCharCmpl+0xa0>
    c57e:	f8dd b014 	ldr.w	fp, [sp, #20]
  if (pMsg->hdr.status != ATT_SUCCESS || pMsg->continuing == FALSE)
    c582:	f89b 3003 	ldrb.w	r3, [fp, #3]
    c586:	2b00      	cmp	r3, #0
    c588:	f47f af78 	bne.w	c47c <AttcDiscCharCmpl+0x20>
    c58c:	f89b 300c 	ldrb.w	r3, [fp, #12]
    c590:	2b00      	cmp	r3, #0
    c592:	f43f af73 	beq.w	c47c <AttcDiscCharCmpl+0x20>
    return ATT_CONTINUING;
    c596:	2478      	movs	r4, #120	; 0x78
}
    c598:	4620      	mov	r0, r4
    c59a:	b007      	add	sp, #28
    c59c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pMsg->hdr.status == ATT_SUCCESS)
    c5a0:	f89b 3003 	ldrb.w	r3, [fp, #3]
    c5a4:	4618      	mov	r0, r3
    c5a6:	2b00      	cmp	r3, #0
    c5a8:	f040 8097 	bne.w	c6da <AttcDiscCharCmpl+0x27e>
    p = pMsg->pValue;
    c5ac:	f8db 3004 	ldr.w	r3, [fp, #4]
    pEnd = pMsg->pValue + pMsg->valueLen;
    c5b0:	f8bb 2008 	ldrh.w	r2, [fp, #8]
    c5b4:	189a      	adds	r2, r3, r2
    c5b6:	9200      	str	r2, [sp, #0]
    BSTREAM_TO_UINT8(pairLen, p);
    c5b8:	461a      	mov	r2, r3
    c5ba:	f812 1b01 	ldrb.w	r1, [r2], #1
    c5be:	9101      	str	r1, [sp, #4]
    if (pairLen == ATT_READ_RSP_LEN_UUID16)
    c5c0:	2907      	cmp	r1, #7
    c5c2:	d004      	beq.n	c5ce <AttcDiscCharCmpl+0x172>
    else if (pairLen == ATT_READ_RSP_LEN_UUID128)
    c5c4:	2915      	cmp	r1, #21
    c5c6:	f040 80f8 	bne.w	c7ba <AttcDiscCharCmpl+0x35e>
      settings = ATTC_SET_UUID_128;
    c5ca:	2101      	movs	r1, #1
    c5cc:	4608      	mov	r0, r1
    while (p < pEnd)
    c5ce:	9900      	ldr	r1, [sp, #0]
    c5d0:	4291      	cmp	r1, r2
    c5d2:	d97d      	bls.n	c6d0 <AttcDiscCharCmpl+0x274>
    pCb->endHdlIdx = ATT_DISC_HDL_IDX_NONE;
    c5d4:	f8cd b010 	str.w	fp, [sp, #16]
    c5d8:	f103 0906 	add.w	r9, r3, #6
    c5dc:	4683      	mov	fp, r0
  BSTREAM_TO_UINT16(declHdl, pDecl);
    c5de:	f819 2c04 	ldrb.w	r2, [r9, #-4]
    c5e2:	f819 3c05 	ldrb.w	r3, [r9, #-5]
  BSTREAM_TO_UINT16(hdl, pDecl);
    c5e6:	f819 8c02 	ldrb.w	r8, [r9, #-2]
  BSTREAM_TO_UINT16(declHdl, pDecl);
    c5ea:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  BSTREAM_TO_UINT16(hdl, pDecl);
    c5ee:	f819 2c01 	ldrb.w	r2, [r9, #-1]
    c5f2:	eb08 2802 	add.w	r8, r8, r2, lsl #8
  if (pCb->endHdlIdx != ATT_DISC_HDL_IDX_NONE)
    c5f6:	7cfa      	ldrb	r2, [r7, #19]
    c5f8:	2aff      	cmp	r2, #255	; 0xff
  BSTREAM_TO_UINT16(declHdl, pDecl);
    c5fa:	b29b      	uxth	r3, r3
  BSTREAM_TO_UINT16(hdl, pDecl);
    c5fc:	fa1f f888 	uxth.w	r8, r8
  if (pCb->endHdlIdx != ATT_DISC_HDL_IDX_NONE)
    c600:	d006      	beq.n	c610 <AttcDiscCharCmpl+0x1b4>
    pCb->pHdlList[pCb->endHdlIdx] = declHdl - 1;
    c602:	6879      	ldr	r1, [r7, #4]
    c604:	1e58      	subs	r0, r3, #1
    c606:	f821 0012 	strh.w	r0, [r1, r2, lsl #1]
    pCb->endHdlIdx = ATT_DISC_HDL_IDX_NONE;
    c60a:	f04f 32ff 	mov.w	r2, #4294967295
    c60e:	74fa      	strb	r2, [r7, #19]
  if (hdl > declHdl && hdl <= pCb->svcEndHdl)
    c610:	4543      	cmp	r3, r8
    c612:	f080 80b6 	bcs.w	c782 <AttcDiscCharCmpl+0x326>
    c616:	8a3b      	ldrh	r3, [r7, #16]
    c618:	4543      	cmp	r3, r8
    c61a:	f0c0 80b2 	bcc.w	c782 <AttcDiscCharCmpl+0x326>
    for (i = 0, pChar = pCb->pCharList; i < pCb->charListLen; i++, pChar++)
    c61e:	7b3b      	ldrb	r3, [r7, #12]
    c620:	f8d7 a000 	ldr.w	sl, [r7]
    c624:	2b00      	cmp	r3, #0
    c626:	d047      	beq.n	c6b8 <AttcDiscCharCmpl+0x25c>
    c628:	f8cd 9008 	str.w	r9, [sp, #8]
    c62c:	2601      	movs	r6, #1
    c62e:	46c1      	mov	r9, r8
    c630:	4698      	mov	r8, r3
    c632:	e006      	b.n	c642 <AttcDiscCharCmpl+0x1e6>
    c634:	1c72      	adds	r2, r6, #1
    c636:	45b0      	cmp	r8, r6
    c638:	f10a 0a04 	add.w	sl, sl, #4
    c63c:	b2d2      	uxtb	r2, r2
    c63e:	d939      	bls.n	c6b4 <AttcDiscCharCmpl+0x258>
    c640:	4616      	mov	r6, r2
    c642:	1e75      	subs	r5, r6, #1
      if (pCb->pHdlList[i] == 0)
    c644:	b2e9      	uxtb	r1, r5
    c646:	687c      	ldr	r4, [r7, #4]
    c648:	f834 0011 	ldrh.w	r0, [r4, r1, lsl #1]
    c64c:	460d      	mov	r5, r1
    c64e:	004a      	lsls	r2, r1, #1
    c650:	eb04 0441 	add.w	r4, r4, r1, lsl #1
    c654:	2800      	cmp	r0, #0
    c656:	d1ed      	bne.n	c634 <AttcDiscCharCmpl+0x1d8>
        if (attcUuidCmp(*pChar, pDecl, settings))
    c658:	f8da 0000 	ldr.w	r0, [sl]
    c65c:	7901      	ldrb	r1, [r0, #4]
    c65e:	6800      	ldr	r0, [r0, #0]
  if ((pChar->settings & ATT_SET_UUID_MASK) == settings)
    c660:	f001 0101 	and.w	r1, r1, #1
    c664:	458b      	cmp	fp, r1
    c666:	f000 8091 	beq.w	c78c <AttcDiscCharCmpl+0x330>
  else if ((settings == ATTC_SET_UUID_128) && ((pChar->settings & ATTC_SET_UUID_128) == 0))
    c66a:	f1bb 0f01 	cmp.w	fp, #1
    c66e:	d1e1      	bne.n	c634 <AttcDiscCharCmpl+0x1d8>
    c670:	2900      	cmp	r1, #0
    c672:	d1df      	bne.n	c634 <AttcDiscCharCmpl+0x1d8>
    return attUuidCmp16to128(pChar->pUuid, pUuid);
    c674:	9902      	ldr	r1, [sp, #8]
    c676:	9203      	str	r2, [sp, #12]
    c678:	f003 f9e8 	bl	fa4c <attUuidCmp16to128>
        if (attcUuidCmp(*pChar, pDecl, settings))
    c67c:	9a03      	ldr	r2, [sp, #12]
    c67e:	b188      	cbz	r0, c6a4 <AttcDiscCharCmpl+0x248>
          pCb->pHdlList[i] = hdl;
    c680:	687c      	ldr	r4, [r7, #4]
    c682:	4414      	add	r4, r2
    c684:	f8a4 9000 	strh.w	r9, [r4]
          if (i < (pCb->charListLen - 1) &&
    c688:	7b3a      	ldrb	r2, [r7, #12]
    c68a:	3a01      	subs	r2, #1
    c68c:	4295      	cmp	r5, r2
    c68e:	da05      	bge.n	c69c <AttcDiscCharCmpl+0x240>
              ((*(pChar + 1))->settings & ATTC_SET_DESCRIPTOR) == ATTC_SET_DESCRIPTOR)
    c690:	f8da 2004 	ldr.w	r2, [sl, #4]
          if (i < (pCb->charListLen - 1) &&
    c694:	7912      	ldrb	r2, [r2, #4]
    c696:	0752      	lsls	r2, r2, #29
            pCb->endHdlIdx = i + 1;
    c698:	bf48      	it	mi
    c69a:	74fe      	strbmi	r6, [r7, #19]
          ATT_TRACE_INFO1("characteristic found handle:0x%x", hdl);
    c69c:	4850      	ldr	r0, [pc, #320]	; (c7e0 <AttcDiscCharCmpl+0x384>)
    c69e:	4649      	mov	r1, r9
    c6a0:	f007 fc38 	bl	13f14 <WsfTrace>
    c6a4:	f897 800c 	ldrb.w	r8, [r7, #12]
    for (i = 0, pChar = pCb->pCharList; i < pCb->charListLen; i++, pChar++)
    c6a8:	1c72      	adds	r2, r6, #1
    c6aa:	45b0      	cmp	r8, r6
    c6ac:	f10a 0a04 	add.w	sl, sl, #4
    c6b0:	b2d2      	uxtb	r2, r2
    c6b2:	d8c5      	bhi.n	c640 <AttcDiscCharCmpl+0x1e4>
    c6b4:	f8dd 9008 	ldr.w	r9, [sp, #8]
    while (p < pEnd)
    c6b8:	9b01      	ldr	r3, [sp, #4]
    c6ba:	9a00      	ldr	r2, [sp, #0]
    c6bc:	4499      	add	r9, r3
    c6be:	f1a9 0305 	sub.w	r3, r9, #5
    c6c2:	429a      	cmp	r2, r3
    c6c4:	d88b      	bhi.n	c5de <AttcDiscCharCmpl+0x182>
  if (pMsg->hdr.status != ATT_SUCCESS || pMsg->continuing == FALSE)
    c6c6:	f8dd b010 	ldr.w	fp, [sp, #16]
    c6ca:	f89b 3003 	ldrb.w	r3, [fp, #3]
    c6ce:	b923      	cbnz	r3, c6da <AttcDiscCharCmpl+0x27e>
    c6d0:	f89b 300c 	ldrb.w	r3, [fp, #12]
    c6d4:	2b00      	cmp	r3, #0
    c6d6:	f47f af5e 	bne.w	c596 <AttcDiscCharCmpl+0x13a>
    if (pCb->endHdlIdx != ATT_DISC_HDL_IDX_NONE)
    c6da:	7cfb      	ldrb	r3, [r7, #19]
    c6dc:	2bff      	cmp	r3, #255	; 0xff
    c6de:	d003      	beq.n	c6e8 <AttcDiscCharCmpl+0x28c>
      pCb->pHdlList[pCb->endHdlIdx] = pCb->svcEndHdl;
    c6e0:	687a      	ldr	r2, [r7, #4]
    c6e2:	8a39      	ldrh	r1, [r7, #16]
    c6e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    pCb->charListIdx = 0;
    c6e8:	2300      	movs	r3, #0
    c6ea:	74bb      	strb	r3, [r7, #18]
    return attcDiscDescriptors((dmConnId_t) pMsg->hdr.param, pCb);
    c6ec:	f89b 0000 	ldrb.w	r0, [fp]
    c6f0:	4639      	mov	r1, r7
    c6f2:	f7ff fdef 	bl	c2d4 <attcDiscDescriptors>
    c6f6:	4604      	mov	r4, r0
    c6f8:	e6d9      	b.n	c4ae <AttcDiscCharCmpl+0x52>
    c6fa:	2304      	movs	r3, #4
    c6fc:	9303      	str	r3, [sp, #12]
    c6fe:	e6f6      	b.n	c4ee <AttcDiscCharCmpl+0x92>
    c700:	f109 3cff 	add.w	ip, r9, #4294967295
    c704:	ebac 0c04 	sub.w	ip, ip, r4
    c708:	fa5f fc8c 	uxtb.w	ip, ip
    c70c:	2304      	movs	r3, #4
    c70e:	fb13 6c0c 	smlabb	ip, r3, ip, r6
    c712:	0052      	lsls	r2, r2, #1
    c714:	3e04      	subs	r6, #4
    c716:	e002      	b.n	c71e <AttcDiscCharCmpl+0x2c2>
  for (i = pCb->charListIdx;
    c718:	45b4      	cmp	ip, r6
    c71a:	f43f af2c 	beq.w	c576 <AttcDiscCharCmpl+0x11a>
       (i < pCb->charListLen) && (((*pDesc)->settings & ATTC_SET_DESCRIPTOR) != 0);
    c71e:	f856 0f04 	ldr.w	r0, [r6, #4]!
    c722:	7901      	ldrb	r1, [r0, #4]
    c724:	074b      	lsls	r3, r1, #29
    c726:	f57f af26 	bpl.w	c576 <AttcDiscCharCmpl+0x11a>
    if (pCb->pHdlList[i] == 0)
    c72a:	687b      	ldr	r3, [r7, #4]
    c72c:	5a9c      	ldrh	r4, [r3, r2]
    c72e:	4413      	add	r3, r2
  for (i = pCb->charListIdx;
    c730:	3202      	adds	r2, #2
    if (pCb->pHdlList[i] == 0)
    c732:	2c00      	cmp	r4, #0
    c734:	d1f0      	bne.n	c718 <AttcDiscCharCmpl+0x2bc>
  if ((pChar->settings & ATT_SET_UUID_MASK) == settings)
    c736:	07cd      	lsls	r5, r1, #31
    c738:	6800      	ldr	r0, [r0, #0]
    c73a:	d4ed      	bmi.n	c718 <AttcDiscCharCmpl+0x2bc>
    return (memcmp(pChar->pUuid, pUuid, (settings == 0) ? ATT_16_UUID_LEN : ATT_128_UUID_LEN) == 0);
    c73c:	7804      	ldrb	r4, [r0, #0]
    c73e:	f89a 1000 	ldrb.w	r1, [sl]
    c742:	428c      	cmp	r4, r1
    c744:	d1e8      	bne.n	c718 <AttcDiscCharCmpl+0x2bc>
    c746:	7840      	ldrb	r0, [r0, #1]
    c748:	f89a 1001 	ldrb.w	r1, [sl, #1]
    c74c:	4288      	cmp	r0, r1
    c74e:	d1e3      	bne.n	c718 <AttcDiscCharCmpl+0x2bc>
    c750:	461d      	mov	r5, r3
  BSTREAM_TO_UINT16(hdl, pPair);
    c752:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
    c756:	eb03 2102 	add.w	r1, r3, r2, lsl #8
      p += pairLen;
    c75a:	9b03      	ldr	r3, [sp, #12]
        ATT_TRACE_INFO1("descriptor found handle:0x%x", hdl);
    c75c:	4821      	ldr	r0, [pc, #132]	; (c7e4 <AttcDiscCharCmpl+0x388>)
  BSTREAM_TO_UINT16(hdl, pPair);
    c75e:	b289      	uxth	r1, r1
      p += pairLen;
    c760:	4498      	add	r8, r3
        pCb->pHdlList[i] = hdl;
    c762:	8029      	strh	r1, [r5, #0]
        ATT_TRACE_INFO1("descriptor found handle:0x%x", hdl);
    c764:	f007 fbd6 	bl	13f14 <WsfTrace>
    while (p < pEnd)
    c768:	45c3      	cmp	fp, r8
    c76a:	f67f af08 	bls.w	c57e <AttcDiscCharCmpl+0x122>
    c76e:	f897 900c 	ldrb.w	r9, [r7, #12]
    c772:	e6c3      	b.n	c4fc <AttcDiscCharCmpl+0xa0>
    return (memcmp(pChar->pUuid, pUuid, (settings == 0) ? ATT_16_UUID_LEN : ATT_128_UUID_LEN) == 0);
    c774:	2210      	movs	r2, #16
    c776:	f014 fe37 	bl	213e8 <memcmp>
      if (attcUuidCmp(*pDesc, pPair, settings))
    c77a:	2800      	cmp	r0, #0
    c77c:	f47f aed4 	bne.w	c528 <AttcDiscCharCmpl+0xcc>
    c780:	e7e7      	b.n	c752 <AttcDiscCharCmpl+0x2f6>
    ATT_TRACE_WARN1("invalid handle:0x%x", hdl);
    c782:	4819      	ldr	r0, [pc, #100]	; (c7e8 <AttcDiscCharCmpl+0x38c>)
    c784:	4641      	mov	r1, r8
    c786:	f007 fbc5 	bl	13f14 <WsfTrace>
    c78a:	e795      	b.n	c6b8 <AttcDiscCharCmpl+0x25c>
    return (memcmp(pChar->pUuid, pUuid, (settings == 0) ? ATT_16_UUID_LEN : ATT_128_UUID_LEN) == 0);
    c78c:	f1bb 0f00 	cmp.w	fp, #0
    c790:	bf0c      	ite	eq
    c792:	2202      	moveq	r2, #2
    c794:	2210      	movne	r2, #16
    c796:	9902      	ldr	r1, [sp, #8]
    c798:	f014 fe26 	bl	213e8 <memcmp>
        if (attcUuidCmp(*pChar, pDecl, settings))
    c79c:	2800      	cmp	r0, #0
    c79e:	f43f af71 	beq.w	c684 <AttcDiscCharCmpl+0x228>
    c7a2:	e747      	b.n	c634 <AttcDiscCharCmpl+0x1d8>
        pCb->pHdlList[i] = hdl;
    c7a4:	687d      	ldr	r5, [r7, #4]
    c7a6:	4415      	add	r5, r2
    c7a8:	e7d3      	b.n	c752 <AttcDiscCharCmpl+0x2f6>
    ATT_TRACE_WARN1("unexpected callback event %d", pMsg->hdr.event);
    c7aa:	4810      	ldr	r0, [pc, #64]	; (c7ec <AttcDiscCharCmpl+0x390>)
    c7ac:	f007 fbb2 	bl	13f14 <WsfTrace>
    return ATT_ERR_UNDEFINED;
    c7b0:	2475      	movs	r4, #117	; 0x75
}
    c7b2:	4620      	mov	r0, r4
    c7b4:	b007      	add	sp, #28
    c7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c7ba:	2473      	movs	r4, #115	; 0x73
    c7bc:	e67a      	b.n	c4b4 <AttcDiscCharCmpl+0x58>
      p += pairLen;
    c7be:	9b03      	ldr	r3, [sp, #12]
    c7c0:	46da      	mov	sl, fp
    c7c2:	4498      	add	r8, r3
    while (p < pEnd)
    c7c4:	45c2      	cmp	sl, r8
      p += pairLen;
    c7c6:	f8dd b014 	ldr.w	fp, [sp, #20]
    while (p < pEnd)
    c7ca:	f67f aeda 	bls.w	c582 <AttcDiscCharCmpl+0x126>
      p += pairLen;
    c7ce:	4498      	add	r8, r3
    while (p < pEnd)
    c7d0:	45c2      	cmp	sl, r8
    c7d2:	f67f aed6 	bls.w	c582 <AttcDiscCharCmpl+0x126>
      p += pairLen;
    c7d6:	4498      	add	r8, r3
    while (p < pEnd)
    c7d8:	45c2      	cmp	sl, r8
    c7da:	d8f8      	bhi.n	c7ce <AttcDiscCharCmpl+0x372>
    c7dc:	e6d1      	b.n	c582 <AttcDiscCharCmpl+0x126>
    c7de:	bf00      	nop
    c7e0:	00023c34 	.word	0x00023c34
    c7e4:	00023c6c 	.word	0x00023c6c
    c7e8:	00023c58 	.word	0x00023c58
    c7ec:	00023bec 	.word	0x00023bec

0000c7f0 <AttcDiscConfigStart>:
 *  \return ATT_CONTINUING if successful and configuration procedure is continuing.
 *          ATT_SUCCESS if nothing to configure.
 */
/*************************************************************************************************/
uint8_t AttcDiscConfigStart(dmConnId_t connId, attcDiscCb_t *pCb)
{
    c7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (pCb->charListIdx < pCb->cfgListLen)
    c7f2:	7b4e      	ldrb	r6, [r1, #13]
  pCfg = pCb->pCfgList + pCb->charListIdx;
    c7f4:	688c      	ldr	r4, [r1, #8]
  /* use char list index to iterate over config list */
  pCb->charListIdx = 0;
    c7f6:	2300      	movs	r3, #0
    c7f8:	748b      	strb	r3, [r1, #18]
  while (pCb->charListIdx < pCb->cfgListLen)
    c7fa:	b1ae      	cbz	r6, c828 <AttcDiscConfigStart+0x38>
    if (pCb->pHdlList[pCfg->hdlIdx] != ATT_HANDLE_NONE)
    c7fc:	684f      	ldr	r7, [r1, #4]
    c7fe:	e004      	b.n	c80a <AttcDiscConfigStart+0x1a>
  while (pCb->charListIdx < pCb->cfgListLen)
    c800:	429e      	cmp	r6, r3
    pCb->charListIdx++;
    c802:	748b      	strb	r3, [r1, #18]
    pCfg++;
    c804:	f104 0408 	add.w	r4, r4, #8
  while (pCb->charListIdx < pCb->cfgListLen)
    c808:	d00e      	beq.n	c828 <AttcDiscConfigStart+0x38>
    if (pCb->pHdlList[pCfg->hdlIdx] != ATT_HANDLE_NONE)
    c80a:	7962      	ldrb	r2, [r4, #5]
    c80c:	f837 5012 	ldrh.w	r5, [r7, r2, lsl #1]
    pCb->charListIdx++;
    c810:	3301      	adds	r3, #1
    c812:	b2db      	uxtb	r3, r3
    if (pCb->pHdlList[pCfg->hdlIdx] != ATT_HANDLE_NONE)
    c814:	2d00      	cmp	r5, #0
    c816:	d0f3      	beq.n	c800 <AttcDiscConfigStart+0x10>
      if (pCfg->valueLen != 0)
    c818:	7922      	ldrb	r2, [r4, #4]
    c81a:	b13a      	cbz	r2, c82c <AttcDiscConfigStart+0x3c>
        AttcWriteReq(connId, pCb->pHdlList[pCfg->hdlIdx], pCfg->valueLen, (uint8_t *) pCfg->pValue);
    c81c:	6823      	ldr	r3, [r4, #0]
    c81e:	4629      	mov	r1, r5
    c820:	f000 fe9e 	bl	d560 <AttcWriteReq>
      return ATT_CONTINUING;
    c824:	2078      	movs	r0, #120	; 0x78

  return attcDiscConfigNext(connId, pCb);
}
    c826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return ATT_SUCCESS;
    c828:	2000      	movs	r0, #0
}
    c82a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        AttcReadReq(connId, pCb->pHdlList[pCfg->hdlIdx]);
    c82c:	4629      	mov	r1, r5
    c82e:	f000 fe45 	bl	d4bc <AttcReadReq>
      return ATT_CONTINUING;
    c832:	2078      	movs	r0, #120	; 0x78
}
    c834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c836:	bf00      	nop

0000c838 <AttcDiscConfigCmpl>:
 *  \return ATT_CONTINUING if successful and configuration procedure is continuing.
 *          ATT_SUCCESS if configuration procedure completed successfully.
 */
/*************************************************************************************************/
uint8_t AttcDiscConfigCmpl(dmConnId_t connId, attcDiscCb_t *pCb)
{
    c838:	b538      	push	{r3, r4, r5, lr}
  /* go to next in list */
  pCb->charListIdx++;
    c83a:	7c8b      	ldrb	r3, [r1, #18]
  while (pCb->charListIdx < pCb->cfgListLen)
    c83c:	f891 e00d 	ldrb.w	lr, [r1, #13]
  pCfg = pCb->pCfgList + pCb->charListIdx;
    c840:	688a      	ldr	r2, [r1, #8]
  pCb->charListIdx++;
    c842:	3301      	adds	r3, #1
    c844:	b2db      	uxtb	r3, r3
  while (pCb->charListIdx < pCb->cfgListLen)
    c846:	4573      	cmp	r3, lr
  pCb->charListIdx++;
    c848:	748b      	strb	r3, [r1, #18]
  pCfg = pCb->pCfgList + pCb->charListIdx;
    c84a:	eb02 0cc3 	add.w	ip, r2, r3, lsl #3
  while (pCb->charListIdx < pCb->cfgListLen)
    c84e:	d218      	bcs.n	c882 <AttcDiscConfigCmpl+0x4a>
    if (pCb->pHdlList[pCfg->hdlIdx] != ATT_HANDLE_NONE)
    c850:	684d      	ldr	r5, [r1, #4]
    c852:	e004      	b.n	c85e <AttcDiscConfigCmpl+0x26>
  while (pCb->charListIdx < pCb->cfgListLen)
    c854:	4573      	cmp	r3, lr
    pCb->charListIdx++;
    c856:	748b      	strb	r3, [r1, #18]
    pCfg++;
    c858:	f10c 0c08 	add.w	ip, ip, #8
  while (pCb->charListIdx < pCb->cfgListLen)
    c85c:	d211      	bcs.n	c882 <AttcDiscConfigCmpl+0x4a>
    if (pCb->pHdlList[pCfg->hdlIdx] != ATT_HANDLE_NONE)
    c85e:	f89c 2005 	ldrb.w	r2, [ip, #5]
    c862:	f835 4012 	ldrh.w	r4, [r5, r2, lsl #1]
    pCb->charListIdx++;
    c866:	3301      	adds	r3, #1
    c868:	b2db      	uxtb	r3, r3
    if (pCb->pHdlList[pCfg->hdlIdx] != ATT_HANDLE_NONE)
    c86a:	2c00      	cmp	r4, #0
    c86c:	d0f2      	beq.n	c854 <AttcDiscConfigCmpl+0x1c>
      if (pCfg->valueLen != 0)
    c86e:	f89c 2004 	ldrb.w	r2, [ip, #4]
    c872:	b142      	cbz	r2, c886 <AttcDiscConfigCmpl+0x4e>
        AttcWriteReq(connId, pCb->pHdlList[pCfg->hdlIdx], pCfg->valueLen, (uint8_t *) pCfg->pValue);
    c874:	f8dc 3000 	ldr.w	r3, [ip]
    c878:	4621      	mov	r1, r4
    c87a:	f000 fe71 	bl	d560 <AttcWriteReq>
      return ATT_CONTINUING;
    c87e:	2078      	movs	r0, #120	; 0x78

  return attcDiscConfigNext(connId, pCb);
}
    c880:	bd38      	pop	{r3, r4, r5, pc}
  return ATT_SUCCESS;
    c882:	2000      	movs	r0, #0
}
    c884:	bd38      	pop	{r3, r4, r5, pc}
        AttcReadReq(connId, pCb->pHdlList[pCfg->hdlIdx]);
    c886:	4621      	mov	r1, r4
    c888:	f000 fe18 	bl	d4bc <AttcReadReq>
      return ATT_CONTINUING;
    c88c:	2078      	movs	r0, #120	; 0x78
}
    c88e:	bd38      	pop	{r3, r4, r5, pc}

0000c890 <AttcDiscConfigResume>:
 *  \return ATT_CONTINUING if successful and configuration procedure is continuing.
 *          ATT_SUCCESS if configuration procedure completed successfully.
 */
/*************************************************************************************************/
uint8_t AttcDiscConfigResume(dmConnId_t connId, attcDiscCb_t *pCb)
{
    c890:	b538      	push	{r3, r4, r5, lr}
  pCfg = pCb->pCfgList + pCb->charListIdx;
    c892:	7c8b      	ldrb	r3, [r1, #18]
  while (pCb->charListIdx < pCb->cfgListLen)
    c894:	f891 e00d 	ldrb.w	lr, [r1, #13]
  pCfg = pCb->pCfgList + pCb->charListIdx;
    c898:	688a      	ldr	r2, [r1, #8]
  while (pCb->charListIdx < pCb->cfgListLen)
    c89a:	4573      	cmp	r3, lr
  pCfg = pCb->pCfgList + pCb->charListIdx;
    c89c:	eb02 0cc3 	add.w	ip, r2, r3, lsl #3
  while (pCb->charListIdx < pCb->cfgListLen)
    c8a0:	d218      	bcs.n	c8d4 <AttcDiscConfigResume+0x44>
    if (pCb->pHdlList[pCfg->hdlIdx] != ATT_HANDLE_NONE)
    c8a2:	684d      	ldr	r5, [r1, #4]
    c8a4:	e004      	b.n	c8b0 <AttcDiscConfigResume+0x20>
  while (pCb->charListIdx < pCb->cfgListLen)
    c8a6:	4573      	cmp	r3, lr
    pCb->charListIdx++;
    c8a8:	748b      	strb	r3, [r1, #18]
    pCfg++;
    c8aa:	f10c 0c08 	add.w	ip, ip, #8
  while (pCb->charListIdx < pCb->cfgListLen)
    c8ae:	d011      	beq.n	c8d4 <AttcDiscConfigResume+0x44>
    if (pCb->pHdlList[pCfg->hdlIdx] != ATT_HANDLE_NONE)
    c8b0:	f89c 2005 	ldrb.w	r2, [ip, #5]
    c8b4:	f835 4012 	ldrh.w	r4, [r5, r2, lsl #1]
    pCb->charListIdx++;
    c8b8:	3301      	adds	r3, #1
    c8ba:	b2db      	uxtb	r3, r3
    if (pCb->pHdlList[pCfg->hdlIdx] != ATT_HANDLE_NONE)
    c8bc:	2c00      	cmp	r4, #0
    c8be:	d0f2      	beq.n	c8a6 <AttcDiscConfigResume+0x16>
      if (pCfg->valueLen != 0)
    c8c0:	f89c 2004 	ldrb.w	r2, [ip, #4]
    c8c4:	b142      	cbz	r2, c8d8 <AttcDiscConfigResume+0x48>
        AttcWriteReq(connId, pCb->pHdlList[pCfg->hdlIdx], pCfg->valueLen, (uint8_t *) pCfg->pValue);
    c8c6:	f8dc 3000 	ldr.w	r3, [ip]
    c8ca:	4621      	mov	r1, r4
    c8cc:	f000 fe48 	bl	d560 <AttcWriteReq>
      return ATT_CONTINUING;
    c8d0:	2078      	movs	r0, #120	; 0x78
  return attcDiscConfigNext(connId, pCb);
}
    c8d2:	bd38      	pop	{r3, r4, r5, pc}
  return ATT_SUCCESS;
    c8d4:	2000      	movs	r0, #0
}
    c8d6:	bd38      	pop	{r3, r4, r5, pc}
        AttcReadReq(connId, pCb->pHdlList[pCfg->hdlIdx]);
    c8d8:	4621      	mov	r1, r4
    c8da:	f000 fdef 	bl	d4bc <AttcReadReq>
      return ATT_CONTINUING;
    c8de:	2078      	movs	r0, #120	; 0x78
}
    c8e0:	bd38      	pop	{r3, r4, r5, pc}
    c8e2:	bf00      	nop

0000c8e4 <attcSendSimpleReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attcSendSimpleReq(attcCcb_t *pCcb)
{
    c8e4:	b570      	push	{r4, r5, r6, lr}

  /* clear stored packet pointer */
  pCcb->outReq.pPkt = NULL;

  /* start request timer (except for write command) */
  if (pCcb->outReq.hdr.event != ATTC_MSG_API_WRITE_CMD)
    c8e6:	7c83      	ldrb	r3, [r0, #18]
  attcPktParam_t  *pPkt = pCcb->outReq.pPkt;
    c8e8:	6945      	ldr	r5, [r0, #20]
  pCcb->outReq.pPkt = NULL;
    c8ea:	2200      	movs	r2, #0
  if (pCcb->outReq.hdr.event != ATTC_MSG_API_WRITE_CMD)
    c8ec:	2b0a      	cmp	r3, #10
{
    c8ee:	4604      	mov	r4, r0
  pCcb->outReq.pPkt = NULL;
    c8f0:	6142      	str	r2, [r0, #20]
  if (pCcb->outReq.hdr.event != ATTC_MSG_API_WRITE_CMD)
    c8f2:	d008      	beq.n	c906 <attcSendSimpleReq+0x22>
  {
    pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
    WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
    c8f4:	4b08      	ldr	r3, [pc, #32]	; (c918 <attcSendSimpleReq+0x34>)
    pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
    c8f6:	2210      	movs	r2, #16
    WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
    c8f8:	681b      	ldr	r3, [r3, #0]
    pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
    c8fa:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
    WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
    c8fe:	7999      	ldrb	r1, [r3, #6]
    c900:	3024      	adds	r0, #36	; 0x24
    c902:	f007 f9e1 	bl	13cc8 <WsfTimerStartSec>
  }

  /* send packet to L2CAP */
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
    c906:	6823      	ldr	r3, [r4, #0]
    c908:	882a      	ldrh	r2, [r5, #0]
    c90a:	8b19      	ldrh	r1, [r3, #24]
    c90c:	2004      	movs	r0, #4
    c90e:	462b      	mov	r3, r5
}
    c910:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
    c914:	f003 bf6c 	b.w	107f0 <L2cDataReq>
    c918:	10002b00 	.word	0x10002b00

0000c91c <attcDataCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attcDataCback(uint16_t handle, uint16_t len, uint8_t *pPacket)
{
    c91c:	b538      	push	{r3, r4, r5, lr}
    c91e:	460d      	mov	r5, r1
    c920:	4614      	mov	r4, r2
/*************************************************************************************************/
attcCcb_t *attcCcbByHandle(uint16_t handle)
{
  dmConnId_t  connId;

  if ((connId = DmConnIdByHandle(handle)) != DM_CONN_ID_NONE)
    c922:	f00b ff75 	bl	18810 <DmConnIdByHandle>
    c926:	b190      	cbz	r0, c94e <attcDataCback+0x32>
  opcode = *(pPacket + L2C_PAYLOAD_START);
    c928:	7a21      	ldrb	r1, [r4, #8]
  {
    return &attcCb.ccb[connId - 1];
    c92a:	4b0f      	ldr	r3, [pc, #60]	; (c968 <attcDataCback+0x4c>)
    c92c:	3801      	subs	r0, #1
    c92e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  if (opcode <= ATT_PDU_EXEC_WRITE_RSP)
    c932:	2919      	cmp	r1, #25
    return &attcCb.ccb[connId - 1];
    c934:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
  if (opcode <= ATT_PDU_EXEC_WRITE_RSP)
    c938:	d90a      	bls.n	c950 <attcDataCback+0x34>
  else if ((opcode == ATT_PDU_VALUE_NTF) || (opcode == ATT_PDU_VALUE_IND))
    c93a:	291b      	cmp	r1, #27
    c93c:	d001      	beq.n	c942 <attcDataCback+0x26>
    c93e:	291d      	cmp	r1, #29
    c940:	d10c      	bne.n	c95c <attcDataCback+0x40>
    attcProcInd(pCcb, len, pPacket);
    c942:	4622      	mov	r2, r4
    c944:	4629      	mov	r1, r5
}
    c946:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    attcProcInd(pCcb, len, pPacket);
    c94a:	f000 bcb9 	b.w	d2c0 <attcProcInd>
}
    c94e:	bd38      	pop	{r3, r4, r5, pc}
    attcProcRsp(pCcb, len, pPacket);
    c950:	4622      	mov	r2, r4
    c952:	4629      	mov	r1, r5
}
    c954:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    attcProcRsp(pCcb, len, pPacket);
    c958:	f000 bc54 	b.w	d204 <attcProcRsp>
}
    c95c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ATT_TRACE_WARN1("attc unknown opcode 0x%02x", opcode);
    c960:	4802      	ldr	r0, [pc, #8]	; (c96c <attcDataCback+0x50>)
    c962:	f007 bad7 	b.w	13f14 <WsfTrace>
    c966:	bf00      	nop
    c968:	10003e50 	.word	0x10003e50
    c96c:	00023c8c 	.word	0x00023c8c

0000c970 <attcCtrlCback>:
{
    c970:	b530      	push	{r4, r5, lr}
  if ((pCcb = attcCcbByConnId((dmConnId_t) pMsg->param)) != NULL)
    c972:	7804      	ldrb	r4, [r0, #0]
{
    c974:	b083      	sub	sp, #12
    c976:	4605      	mov	r5, r0
  if (DmConnInUse(connId))
    c978:	4620      	mov	r0, r4
    c97a:	f00b ff6b 	bl	18854 <DmConnInUse>
    c97e:	b1a0      	cbz	r0, c9aa <attcCtrlCback+0x3a>
    AttcIndConfirm((dmConnId_t) pMsg->param);
    c980:	7828      	ldrb	r0, [r5, #0]
    c982:	f000 fe63 	bl	d64c <AttcIndConfirm>
    return &attcCb.ccb[connId - 1];
    c986:	3c01      	subs	r4, #1
    if (pCcb->pendWriteCmdHandle[i] != ATT_HANDLE_NONE)
    c988:	490b      	ldr	r1, [pc, #44]	; (c9b8 <attcCtrlCback+0x48>)
    attcWriteCmdCallback((dmConnId_t) pMsg->param, pCcb, ATT_SUCCESS);
    c98a:	7828      	ldrb	r0, [r5, #0]
    if (pCcb->pendWriteCmdHandle[i] != ATT_HANDLE_NONE)
    c98c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    c990:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    c994:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
    c996:	b132      	cbz	r2, c9a6 <attcCtrlCback+0x36>
/*************************************************************************************************/
void attcExecCallback(dmConnId_t connId, uint8_t event, uint16_t handle, uint8_t status)
{
  if (event != ATT_METHOD_MTU)
  {
    attExecCallback(connId, event, handle, status, 0);
    c998:	2500      	movs	r5, #0
    c99a:	9500      	str	r5, [sp, #0]
    c99c:	462b      	mov	r3, r5
    c99e:	210a      	movs	r1, #10
    c9a0:	f003 f888 	bl	fab4 <attExecCallback>
      pCcb->pendWriteCmdHandle[i] = ATT_HANDLE_NONE;
    c9a4:	86e5      	strh	r5, [r4, #54]	; 0x36
}
    c9a6:	b003      	add	sp, #12
    c9a8:	bd30      	pop	{r4, r5, pc}
    ATT_TRACE_WARN1("attc ccb not in use: %d", connId);
    c9aa:	4804      	ldr	r0, [pc, #16]	; (c9bc <attcCtrlCback+0x4c>)
    c9ac:	4621      	mov	r1, r4
}
    c9ae:	b003      	add	sp, #12
    c9b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    ATT_TRACE_WARN1("attc ccb not in use: %d", connId);
    c9b4:	f007 baae 	b.w	13f14 <WsfTrace>
    c9b8:	10003e50 	.word	0x10003e50
    c9bc:	00023ca8 	.word	0x00023ca8

0000c9c0 <attcSendWriteCmd>:
{
    c9c0:	b530      	push	{r4, r5, lr}
  if (pCcb->outReq.hdr.event != ATTC_MSG_API_WRITE_CMD)
    c9c2:	7c83      	ldrb	r3, [r0, #18]
  attcPktParam_t  *pPkt = pCcb->outReq.pPkt;
    c9c4:	6945      	ldr	r5, [r0, #20]
  pCcb->outReq.pPkt = NULL;
    c9c6:	2200      	movs	r2, #0
  if (pCcb->outReq.hdr.event != ATTC_MSG_API_WRITE_CMD)
    c9c8:	2b0a      	cmp	r3, #10
{
    c9ca:	b083      	sub	sp, #12
    c9cc:	4604      	mov	r4, r0
  pCcb->outReq.pPkt = NULL;
    c9ce:	6142      	str	r2, [r0, #20]
  if (pCcb->outReq.hdr.event != ATTC_MSG_API_WRITE_CMD)
    c9d0:	d008      	beq.n	c9e4 <attcSendWriteCmd+0x24>
    WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
    c9d2:	4b13      	ldr	r3, [pc, #76]	; (ca20 <attcSendWriteCmd+0x60>)
    pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
    c9d4:	2210      	movs	r2, #16
    WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
    c9d6:	681b      	ldr	r3, [r3, #0]
    pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
    c9d8:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
    WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
    c9dc:	7999      	ldrb	r1, [r3, #6]
    c9de:	3024      	adds	r0, #36	; 0x24
    c9e0:	f007 f972 	bl	13cc8 <WsfTimerStartSec>
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
    c9e4:	6823      	ldr	r3, [r4, #0]
    c9e6:	882a      	ldrh	r2, [r5, #0]
    c9e8:	8b19      	ldrh	r1, [r3, #24]
    c9ea:	2004      	movs	r0, #4
    c9ec:	462b      	mov	r3, r5
    c9ee:	f003 feff 	bl	107f0 <L2cDataReq>
  if (!(pCcb->pMainCcb->control & ATT_CCB_STATUS_FLOW_DISABLED))
    c9f2:	6822      	ldr	r2, [r4, #0]
    c9f4:	7f53      	ldrb	r3, [r2, #29]
    c9f6:	f013 0302 	ands.w	r3, r3, #2
    c9fa:	d007      	beq.n	ca0c <attcSendWriteCmd+0x4c>
    if (pCcb->pendWriteCmdHandle[i] == ATT_HANDLE_NONE)
    c9fc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    c9fe:	b90b      	cbnz	r3, ca04 <attcSendWriteCmd+0x44>
      pCcb->pendWriteCmdHandle[i] = pCcb->outReq.handle;
    ca00:	8b23      	ldrh	r3, [r4, #24]
    ca02:	86e3      	strh	r3, [r4, #54]	; 0x36
  pCcb->outReq.hdr.event = ATTC_MSG_API_NONE;
    ca04:	2300      	movs	r3, #0
    ca06:	74a3      	strb	r3, [r4, #18]
}
    ca08:	b003      	add	sp, #12
    ca0a:	bd30      	pop	{r4, r5, pc}
    attExecCallback(connId, event, handle, status, 0);
    ca0c:	7f10      	ldrb	r0, [r2, #28]
    ca0e:	8b22      	ldrh	r2, [r4, #24]
    ca10:	9300      	str	r3, [sp, #0]
    ca12:	210a      	movs	r1, #10
    ca14:	f003 f84e 	bl	fab4 <attExecCallback>
  pCcb->outReq.hdr.event = ATTC_MSG_API_NONE;
    ca18:	2300      	movs	r3, #0
    ca1a:	74a3      	strb	r3, [r4, #18]
}
    ca1c:	b003      	add	sp, #12
    ca1e:	bd30      	pop	{r4, r5, pc}
    ca20:	10002b00 	.word	0x10002b00

0000ca24 <attcSendMtuReq>:
{
    ca24:	b570      	push	{r4, r5, r6, lr}
  if (pCcb->pMainCcb->control & ATT_CCB_STATUS_MTU_SENT)
    ca26:	6801      	ldr	r1, [r0, #0]
    ca28:	7f4b      	ldrb	r3, [r1, #29]
    ca2a:	f013 0201 	ands.w	r2, r3, #1
{
    ca2e:	4604      	mov	r4, r0
  if (pCcb->pMainCcb->control & ATT_CCB_STATUS_MTU_SENT)
    ca30:	d00c      	beq.n	ca4c <attcSendMtuReq+0x28>
  if (pMsg->pPkt != NULL)
    ca32:	6940      	ldr	r0, [r0, #20]
    ca34:	b118      	cbz	r0, ca3e <attcSendMtuReq+0x1a>
    WsfMsgFree(pMsg->pPkt);
    ca36:	f006 fef5 	bl	13824 <WsfMsgFree>
    pMsg->pPkt = NULL;
    ca3a:	2300      	movs	r3, #0
    ca3c:	6163      	str	r3, [r4, #20]
    pCcb->outReq.hdr.event = ATTC_MSG_API_NONE;
    ca3e:	2300      	movs	r3, #0
    ca40:	74a3      	strb	r3, [r4, #18]
}
    ca42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ATT_TRACE_WARN0("MTU req discarded");
    ca46:	480f      	ldr	r0, [pc, #60]	; (ca84 <attcSendMtuReq+0x60>)
    ca48:	f007 ba64 	b.w	13f14 <WsfTrace>
    pCcb->pMainCcb->control |= ATT_CCB_STATUS_MTU_SENT;
    ca4c:	f043 0301 	orr.w	r3, r3, #1
    ca50:	774b      	strb	r3, [r1, #29]
  if (pCcb->outReq.hdr.event != ATTC_MSG_API_WRITE_CMD)
    ca52:	7c83      	ldrb	r3, [r0, #18]
  attcPktParam_t  *pPkt = pCcb->outReq.pPkt;
    ca54:	6945      	ldr	r5, [r0, #20]
  pCcb->outReq.pPkt = NULL;
    ca56:	6142      	str	r2, [r0, #20]
  if (pCcb->outReq.hdr.event != ATTC_MSG_API_WRITE_CMD)
    ca58:	2b0a      	cmp	r3, #10
    ca5a:	d107      	bne.n	ca6c <attcSendMtuReq+0x48>
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
    ca5c:	882a      	ldrh	r2, [r5, #0]
    ca5e:	8b09      	ldrh	r1, [r1, #24]
    ca60:	462b      	mov	r3, r5
    ca62:	2004      	movs	r0, #4
}
    ca64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
    ca68:	f003 bec2 	b.w	107f0 <L2cDataReq>
    WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
    ca6c:	4b06      	ldr	r3, [pc, #24]	; (ca88 <attcSendMtuReq+0x64>)
    pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
    ca6e:	2210      	movs	r2, #16
    WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
    ca70:	681b      	ldr	r3, [r3, #0]
    pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
    ca72:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
    WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
    ca76:	7999      	ldrb	r1, [r3, #6]
    ca78:	3024      	adds	r0, #36	; 0x24
    ca7a:	f007 f925 	bl	13cc8 <WsfTimerStartSec>
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
    ca7e:	6821      	ldr	r1, [r4, #0]
    ca80:	e7ec      	b.n	ca5c <attcSendMtuReq+0x38>
    ca82:	bf00      	nop
    ca84:	00023cc0 	.word	0x00023cc0
    ca88:	10002b00 	.word	0x10002b00

0000ca8c <attcConnCback>:
{
    ca8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
    ca90:	788b      	ldrb	r3, [r1, #2]
    ca92:	2b27      	cmp	r3, #39	; 0x27
{
    ca94:	b085      	sub	sp, #20
    ca96:	4606      	mov	r6, r0
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
    ca98:	d03e      	beq.n	cb18 <attcConnCback+0x8c>
  else if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
    ca9a:	2b28      	cmp	r3, #40	; 0x28
    ca9c:	d002      	beq.n	caa4 <attcConnCback+0x18>
}
    ca9e:	b005      	add	sp, #20
    caa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (pDmEvt->connClose.hdr.status == HCI_SUCCESS)
    caa4:	78cb      	ldrb	r3, [r1, #3]
    caa6:	2b00      	cmp	r3, #0
    caa8:	d04d      	beq.n	cb46 <attcConnCback+0xba>
      status = pDmEvt->connClose.hdr.status + ATT_HCI_ERR_BASE;
    caaa:	3320      	adds	r3, #32
    caac:	b2db      	uxtb	r3, r3
    pClient = &attcCb.ccb[pCcb->connId - 1];
    caae:	7f35      	ldrb	r5, [r6, #28]
    if (pClient->outReq.hdr.event != ATTC_MSG_API_NONE)
    cab0:	4c51      	ldr	r4, [pc, #324]	; (cbf8 <attcConnCback+0x16c>)
    pClient = &attcCb.ccb[pCcb->connId - 1];
    cab2:	3d01      	subs	r5, #1
    cab4:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
    if (pClient->outReq.hdr.event != ATTC_MSG_API_NONE)
    cab8:	eb04 09c2 	add.w	r9, r4, r2, lsl #3
    cabc:	ea4f 08c2 	mov.w	r8, r2, lsl #3
    cac0:	f899 2012 	ldrb.w	r2, [r9, #18]
    cac4:	00ef      	lsls	r7, r5, #3
    cac6:	2a00      	cmp	r2, #0
    cac8:	d155      	bne.n	cb76 <attcConnCback+0xea>
    if (pClient->onDeck.hdr.event != ATTC_MSG_API_NONE)
    caca:	eba7 0905 	sub.w	r9, r7, r5
    cace:	eb04 09c9 	add.w	r9, r4, r9, lsl #3
    cad2:	f899 1006 	ldrb.w	r1, [r9, #6]
    cad6:	2900      	cmp	r1, #0
    cad8:	d139      	bne.n	cb4e <attcConnCback+0xc2>
    pClient->flowDisabled = FALSE;
    cada:	1b7a      	subs	r2, r7, r5
    if (attcCb.pSign != NULL)
    cadc:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    pClient->flowDisabled = FALSE;
    cae0:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    cae4:	2000      	movs	r0, #0
    cae6:	8690      	strh	r0, [r2, #52]	; 0x34
    if (attcCb.pSign != NULL)
    cae8:	b131      	cbz	r1, caf8 <attcConnCback+0x6c>
      (*attcCb.pSign->closeCback)(pClient, status);
    caea:	684a      	ldr	r2, [r1, #4]
    caec:	9303      	str	r3, [sp, #12]
    caee:	4619      	mov	r1, r3
    caf0:	eb04 0008 	add.w	r0, r4, r8
    caf4:	4790      	blx	r2
    caf6:	9b03      	ldr	r3, [sp, #12]
    attcWriteCmdCallback(pCcb->connId, pClient, status);
    caf8:	7f30      	ldrb	r0, [r6, #28]
    if (pCcb->pendWriteCmdHandle[i] != ATT_HANDLE_NONE)
    cafa:	1b7d      	subs	r5, r7, r5
    cafc:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    cb00:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
    cb02:	2a00      	cmp	r2, #0
    cb04:	d0cb      	beq.n	ca9e <attcConnCback+0x12>
    attExecCallback(connId, event, handle, status, 0);
    cb06:	2500      	movs	r5, #0
    cb08:	9500      	str	r5, [sp, #0]
    cb0a:	210a      	movs	r1, #10
    cb0c:	f002 ffd2 	bl	fab4 <attExecCallback>
      pCcb->pendWriteCmdHandle[i] = ATT_HANDLE_NONE;
    cb10:	86e5      	strh	r5, [r4, #54]	; 0x36
}
    cb12:	b005      	add	sp, #20
    cb14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (DmConnRole(pCcb->connId) == DM_ROLE_MASTER)
    cb18:	7f00      	ldrb	r0, [r0, #28]
    cb1a:	f00b ff2d 	bl	18978 <DmConnRole>
    cb1e:	2800      	cmp	r0, #0
    cb20:	d1bd      	bne.n	ca9e <attcConnCback+0x12>
      localMtu = WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN));
    cb22:	4c36      	ldr	r4, [pc, #216]	; (cbfc <attcConnCback+0x170>)
    cb24:	6823      	ldr	r3, [r4, #0]
    cb26:	889d      	ldrh	r5, [r3, #4]
    cb28:	f005 fc26 	bl	12378 <HciGetMaxRxAclLen>
    cb2c:	3804      	subs	r0, #4
    cb2e:	4285      	cmp	r5, r0
    cb30:	da5d      	bge.n	cbee <attcConnCback+0x162>
    cb32:	6823      	ldr	r3, [r4, #0]
    cb34:	8899      	ldrh	r1, [r3, #4]
      if (localMtu != ATT_DEFAULT_MTU)
    cb36:	2917      	cmp	r1, #23
    cb38:	d0b1      	beq.n	ca9e <attcConnCback+0x12>
        AttcMtuReq(pCcb->connId, localMtu);
    cb3a:	7f30      	ldrb	r0, [r6, #28]
}
    cb3c:	b005      	add	sp, #20
    cb3e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        AttcMtuReq(pCcb->connId, localMtu);
    cb42:	f000 bd33 	b.w	d5ac <AttcMtuReq>
      status = pDmEvt->connClose.reason + ATT_HCI_ERR_BASE;
    cb46:	7a0b      	ldrb	r3, [r1, #8]
    cb48:	3320      	adds	r3, #32
    cb4a:	b2db      	uxtb	r3, r3
    cb4c:	e7af      	b.n	caae <attcConnCback+0x22>
  if (pMsg->pPkt != NULL)
    cb4e:	f8d9 0008 	ldr.w	r0, [r9, #8]
    cb52:	b140      	cbz	r0, cb66 <attcConnCback+0xda>
    cb54:	9303      	str	r3, [sp, #12]
    WsfMsgFree(pMsg->pPkt);
    cb56:	f006 fe65 	bl	13824 <WsfMsgFree>
    pMsg->pPkt = NULL;
    cb5a:	2200      	movs	r2, #0
 */
/*************************************************************************************************/
void attcReqClear(attcCcb_t *pCcb, attcApiMsg_t *pMsg, uint8_t status)
{
  attcFreePkt(pMsg);
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
    cb5c:	f899 1006 	ldrb.w	r1, [r9, #6]
    cb60:	9b03      	ldr	r3, [sp, #12]
    pMsg->pPkt = NULL;
    cb62:	f8c9 2008 	str.w	r2, [r9, #8]
  if (event != ATT_METHOD_MTU)
    cb66:	2901      	cmp	r1, #1
    cb68:	d130      	bne.n	cbcc <attcConnCback+0x140>
  pMsg->hdr.event = ATTC_MSG_API_NONE;
    cb6a:	1b7a      	subs	r2, r7, r5
    cb6c:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    cb70:	2100      	movs	r1, #0
    cb72:	7191      	strb	r1, [r2, #6]
}
    cb74:	e7b1      	b.n	cada <attcConnCback+0x4e>
      WsfTimerStop(&pClient->outReqTimer);
    cb76:	f108 0024 	add.w	r0, r8, #36	; 0x24
    cb7a:	4420      	add	r0, r4
    cb7c:	9303      	str	r3, [sp, #12]
    cb7e:	f007 f929 	bl	13dd4 <WsfTimerStop>
  if (pMsg->pPkt != NULL)
    cb82:	f8d9 0014 	ldr.w	r0, [r9, #20]
    cb86:	9b03      	ldr	r3, [sp, #12]
    cb88:	b128      	cbz	r0, cb96 <attcConnCback+0x10a>
    WsfMsgFree(pMsg->pPkt);
    cb8a:	f006 fe4b 	bl	13824 <WsfMsgFree>
    pMsg->pPkt = NULL;
    cb8e:	2200      	movs	r2, #0
    cb90:	9b03      	ldr	r3, [sp, #12]
    cb92:	f8c9 2014 	str.w	r2, [r9, #20]
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
    cb96:	1b7a      	subs	r2, r7, r5
    cb98:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
    cb9c:	00d2      	lsls	r2, r2, #3
    cb9e:	7c81      	ldrb	r1, [r0, #18]
  if (event != ATT_METHOD_MTU)
    cba0:	2901      	cmp	r1, #1
    cba2:	d105      	bne.n	cbb0 <attcConnCback+0x124>
  pMsg->hdr.event = ATTC_MSG_API_NONE;
    cba4:	1b7a      	subs	r2, r7, r5
    cba6:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    cbaa:	2100      	movs	r1, #0
    cbac:	7491      	strb	r1, [r2, #18]
}
    cbae:	e78c      	b.n	caca <attcConnCback+0x3e>
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
    cbb0:	f854 c002 	ldr.w	ip, [r4, r2]
    attExecCallback(connId, event, handle, status, 0);
    cbb4:	8b02      	ldrh	r2, [r0, #24]
    cbb6:	f89c 001c 	ldrb.w	r0, [ip, #28]
    cbba:	9303      	str	r3, [sp, #12]
    cbbc:	f04f 0c00 	mov.w	ip, #0
    cbc0:	f8cd c000 	str.w	ip, [sp]
    cbc4:	f002 ff76 	bl	fab4 <attExecCallback>
    cbc8:	9b03      	ldr	r3, [sp, #12]
    cbca:	e7eb      	b.n	cba4 <attcConnCback+0x118>
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
    cbcc:	1b7a      	subs	r2, r7, r5
    cbce:	eb04 0cc2 	add.w	ip, r4, r2, lsl #3
    cbd2:	f854 0032 	ldr.w	r0, [r4, r2, lsl #3]
    attExecCallback(connId, event, handle, status, 0);
    cbd6:	f8bc 200c 	ldrh.w	r2, [ip, #12]
    cbda:	7f00      	ldrb	r0, [r0, #28]
    cbdc:	9303      	str	r3, [sp, #12]
    cbde:	f04f 0c00 	mov.w	ip, #0
    cbe2:	f8cd c000 	str.w	ip, [sp]
    cbe6:	f002 ff65 	bl	fab4 <attExecCallback>
    cbea:	9b03      	ldr	r3, [sp, #12]
    cbec:	e7bd      	b.n	cb6a <attcConnCback+0xde>
      localMtu = WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN));
    cbee:	f005 fbc3 	bl	12378 <HciGetMaxRxAclLen>
    cbf2:	3804      	subs	r0, #4
    cbf4:	b281      	uxth	r1, r0
    cbf6:	e79e      	b.n	cb36 <attcConnCback+0xaa>
    cbf8:	10003e50 	.word	0x10003e50
    cbfc:	10002b00 	.word	0x10002b00

0000cc00 <attcSendPrepWriteReq>:
{
    cc00:	b570      	push	{r4, r5, r6, lr}
  if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
    cc02:	7cc3      	ldrb	r3, [r0, #19]
    cc04:	2b01      	cmp	r3, #1
{
    cc06:	b082      	sub	sp, #8
    cc08:	4604      	mov	r4, r0
  if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
    cc0a:	d020      	beq.n	cc4e <attcSendPrepWriteReq+0x4e>
    pCcb->outReq.pPkt = NULL;
    cc0c:	2300      	movs	r3, #0
    dataLen = pCcb->outReqParams.w.len;
    cc0e:	8b85      	ldrh	r5, [r0, #28]
    pPkt = pCcb->outReq.pPkt;
    cc10:	6946      	ldr	r6, [r0, #20]
    pCcb->outReq.pPkt = NULL;
    cc12:	6143      	str	r3, [r0, #20]
  UINT16_TO_BSTREAM(p, pCcb->outReqParams.w.offset);
    cc14:	8be3      	ldrh	r3, [r4, #30]
    cc16:	72f3      	strb	r3, [r6, #11]
    cc18:	8be3      	ldrh	r3, [r4, #30]
  WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
    cc1a:	4a29      	ldr	r2, [pc, #164]	; (ccc0 <attcSendPrepWriteReq+0xc0>)
  UINT16_TO_BSTREAM(p, pCcb->outReqParams.w.offset);
    cc1c:	0a1b      	lsrs	r3, r3, #8
    cc1e:	7333      	strb	r3, [r6, #12]
  pCcb->outReqParams.w.offset += dataLen;
    cc20:	8be3      	ldrh	r3, [r4, #30]
  WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
    cc22:	6812      	ldr	r2, [r2, #0]
  pCcb->outReqParams.w.offset += dataLen;
    cc24:	442b      	add	r3, r5
    cc26:	83e3      	strh	r3, [r4, #30]
  pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
    cc28:	2310      	movs	r3, #16
    cc2a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
    cc2e:	7991      	ldrb	r1, [r2, #6]
    cc30:	f104 0024 	add.w	r0, r4, #36	; 0x24
    cc34:	f007 f848 	bl	13cc8 <WsfTimerStartSec>
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, dataLen + ATT_PREP_WRITE_REQ_LEN, (uint8_t *) pPkt);
    cc38:	6823      	ldr	r3, [r4, #0]
    cc3a:	1d6a      	adds	r2, r5, #5
    cc3c:	8b19      	ldrh	r1, [r3, #24]
    cc3e:	b292      	uxth	r2, r2
    cc40:	4633      	mov	r3, r6
    cc42:	2004      	movs	r0, #4
}
    cc44:	b002      	add	sp, #8
    cc46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, dataLen + ATT_PREP_WRITE_REQ_LEN, (uint8_t *) pPkt);
    cc4a:	f003 bdd1 	b.w	107f0 <L2cDataReq>
    if (pCcb->outReqParams.w.len < (pCcb->pMainCcb->mtu - ATT_PREP_WRITE_REQ_LEN))
    cc4e:	6803      	ldr	r3, [r0, #0]
    cc50:	8b85      	ldrh	r5, [r0, #28]
    cc52:	8b5b      	ldrh	r3, [r3, #26]
    cc54:	3b05      	subs	r3, #5
    cc56:	429d      	cmp	r5, r3
      dataLen = pCcb->pMainCcb->mtu - ATT_PREP_WRITE_REQ_LEN;
    cc58:	bfa8      	it	ge
    cc5a:	b29d      	uxthge	r5, r3
    if ((pPkt = attMsgAlloc(dataLen + ATT_PREP_WRITE_REQ_LEN + L2C_PAYLOAD_START)) != NULL)
    cc5c:	f105 000d 	add.w	r0, r5, #13
    cc60:	b280      	uxth	r0, r0
    cc62:	f002 ff43 	bl	faec <attMsgAlloc>
    cc66:	4606      	mov	r6, r0
    cc68:	b1a8      	cbz	r0, cc96 <attcSendPrepWriteReq+0x96>
      memcpy(pPkt, pCcb->outReq.pPkt, ATT_PREP_WRITE_REQ_LEN + L2C_PAYLOAD_START);
    cc6a:	6963      	ldr	r3, [r4, #20]
    cc6c:	6819      	ldr	r1, [r3, #0]
    cc6e:	685a      	ldr	r2, [r3, #4]
    cc70:	6898      	ldr	r0, [r3, #8]
    cc72:	60b0      	str	r0, [r6, #8]
    cc74:	6072      	str	r2, [r6, #4]
    cc76:	6031      	str	r1, [r6, #0]
    cc78:	7b1b      	ldrb	r3, [r3, #12]
    cc7a:	7333      	strb	r3, [r6, #12]
      memcpy(((uint8_t *) pPkt + L2C_PAYLOAD_START + ATT_PREP_WRITE_REQ_LEN),
    cc7c:	462a      	mov	r2, r5
    cc7e:	6a21      	ldr	r1, [r4, #32]
    cc80:	f106 000d 	add.w	r0, r6, #13
    cc84:	f7ff fa3c 	bl	c100 <memcpy>
      pCcb->outReqParams.w.pValue += dataLen;
    cc88:	6a22      	ldr	r2, [r4, #32]
      pCcb->outReqParams.w.len -= dataLen;
    cc8a:	8ba3      	ldrh	r3, [r4, #28]
      pCcb->outReqParams.w.pValue += dataLen;
    cc8c:	442a      	add	r2, r5
      pCcb->outReqParams.w.len -= dataLen;
    cc8e:	1b5b      	subs	r3, r3, r5
      pCcb->outReqParams.w.pValue += dataLen;
    cc90:	6222      	str	r2, [r4, #32]
      pCcb->outReqParams.w.len -= dataLen;
    cc92:	83a3      	strh	r3, [r4, #28]
    cc94:	e7be      	b.n	cc14 <attcSendPrepWriteReq+0x14>
  if (pMsg->pPkt != NULL)
    cc96:	6960      	ldr	r0, [r4, #20]
    cc98:	b110      	cbz	r0, cca0 <attcSendPrepWriteReq+0xa0>
    WsfMsgFree(pMsg->pPkt);
    cc9a:	f006 fdc3 	bl	13824 <WsfMsgFree>
    pMsg->pPkt = NULL;
    cc9e:	6166      	str	r6, [r4, #20]
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
    cca0:	7ca1      	ldrb	r1, [r4, #18]
  if (event != ATT_METHOD_MTU)
    cca2:	2901      	cmp	r1, #1
    cca4:	d103      	bne.n	ccae <attcSendPrepWriteReq+0xae>
  pMsg->hdr.event = ATTC_MSG_API_NONE;
    cca6:	2300      	movs	r3, #0
    cca8:	74a3      	strb	r3, [r4, #18]
}
    ccaa:	b002      	add	sp, #8
    ccac:	bd70      	pop	{r4, r5, r6, pc}
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
    ccae:	6822      	ldr	r2, [r4, #0]
    attExecCallback(connId, event, handle, status, 0);
    ccb0:	2300      	movs	r3, #0
    ccb2:	7f10      	ldrb	r0, [r2, #28]
    ccb4:	8b22      	ldrh	r2, [r4, #24]
    ccb6:	9300      	str	r3, [sp, #0]
    ccb8:	2370      	movs	r3, #112	; 0x70
    ccba:	f002 fefb 	bl	fab4 <attExecCallback>
    ccbe:	e7f2      	b.n	cca6 <attcSendPrepWriteReq+0xa6>
    ccc0:	10002b00 	.word	0x10002b00

0000ccc4 <attcSendContinuingReq>:
{
    ccc4:	b530      	push	{r4, r5, lr}
  if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
    ccc6:	7cc3      	ldrb	r3, [r0, #19]
    ccc8:	2b01      	cmp	r3, #1
{
    ccca:	b083      	sub	sp, #12
    cccc:	4604      	mov	r4, r0
  if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
    ccce:	d028      	beq.n	cd22 <attcSendContinuingReq+0x5e>
    pCcb->outReq.pPkt = NULL;
    ccd0:	2300      	movs	r3, #0
    pPkt = pCcb->outReq.pPkt;
    ccd2:	6945      	ldr	r5, [r0, #20]
    pCcb->outReq.pPkt = NULL;
    ccd4:	6143      	str	r3, [r0, #20]
  if (pCcb->outReq.hdr.event == ATTC_MSG_API_READ_LONG)
    ccd6:	7ca3      	ldrb	r3, [r4, #18]
    ccd8:	2b06      	cmp	r3, #6
    UINT16_TO_BSTREAM(p, pCcb->outReqParams.o.offset);
    ccda:	8be3      	ldrh	r3, [r4, #30]
  if (pCcb->outReq.hdr.event == ATTC_MSG_API_READ_LONG)
    ccdc:	d01c      	beq.n	cd18 <attcSendContinuingReq+0x54>
    UINT16_TO_BSTREAM(p, pCcb->outReqParams.h.startHandle);
    ccde:	726b      	strb	r3, [r5, #9]
    cce0:	8be3      	ldrh	r3, [r4, #30]
    cce2:	0a1b      	lsrs	r3, r3, #8
    cce4:	72ab      	strb	r3, [r5, #10]
    UINT16_TO_BSTREAM(p, pCcb->outReqParams.h.endHandle);
    cce6:	8c23      	ldrh	r3, [r4, #32]
    cce8:	72eb      	strb	r3, [r5, #11]
    ccea:	8c23      	ldrh	r3, [r4, #32]
    ccec:	0a1b      	lsrs	r3, r3, #8
    ccee:	732b      	strb	r3, [r5, #12]
  WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
    ccf0:	4b1d      	ldr	r3, [pc, #116]	; (cd68 <attcSendContinuingReq+0xa4>)
  pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
    ccf2:	2210      	movs	r2, #16
  WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
    ccf4:	681b      	ldr	r3, [r3, #0]
  pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
    ccf6:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
  WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
    ccfa:	7999      	ldrb	r1, [r3, #6]
    ccfc:	f104 0024 	add.w	r0, r4, #36	; 0x24
    cd00:	f006 ffe2 	bl	13cc8 <WsfTimerStartSec>
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
    cd04:	6823      	ldr	r3, [r4, #0]
    cd06:	882a      	ldrh	r2, [r5, #0]
    cd08:	8b19      	ldrh	r1, [r3, #24]
    cd0a:	2004      	movs	r0, #4
    cd0c:	462b      	mov	r3, r5
}
    cd0e:	b003      	add	sp, #12
    cd10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
    cd14:	f003 bd6c 	b.w	107f0 <L2cDataReq>
    UINT16_TO_BSTREAM(p, pCcb->outReqParams.o.offset);
    cd18:	72eb      	strb	r3, [r5, #11]
    cd1a:	8be3      	ldrh	r3, [r4, #30]
    cd1c:	0a1b      	lsrs	r3, r3, #8
    cd1e:	732b      	strb	r3, [r5, #12]
    cd20:	e7e6      	b.n	ccf0 <attcSendContinuingReq+0x2c>
    if ((pPkt = attMsgAlloc(pCcb->outReq.pPkt->len + L2C_PAYLOAD_START)) != NULL)
    cd22:	6943      	ldr	r3, [r0, #20]
    cd24:	8818      	ldrh	r0, [r3, #0]
    cd26:	3008      	adds	r0, #8
    cd28:	b280      	uxth	r0, r0
    cd2a:	f002 fedf 	bl	faec <attMsgAlloc>
    cd2e:	4605      	mov	r5, r0
    cd30:	b128      	cbz	r0, cd3e <attcSendContinuingReq+0x7a>
      memcpy(pPkt, pCcb->outReq.pPkt, pCcb->outReq.pPkt->len + L2C_PAYLOAD_START);
    cd32:	6961      	ldr	r1, [r4, #20]
    cd34:	880a      	ldrh	r2, [r1, #0]
    cd36:	3208      	adds	r2, #8
    cd38:	f7ff f9e2 	bl	c100 <memcpy>
    cd3c:	e7cb      	b.n	ccd6 <attcSendContinuingReq+0x12>
  if (pMsg->pPkt != NULL)
    cd3e:	6960      	ldr	r0, [r4, #20]
    cd40:	b110      	cbz	r0, cd48 <attcSendContinuingReq+0x84>
    WsfMsgFree(pMsg->pPkt);
    cd42:	f006 fd6f 	bl	13824 <WsfMsgFree>
    pMsg->pPkt = NULL;
    cd46:	6165      	str	r5, [r4, #20]
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
    cd48:	7ca1      	ldrb	r1, [r4, #18]
  if (event != ATT_METHOD_MTU)
    cd4a:	2901      	cmp	r1, #1
    cd4c:	d007      	beq.n	cd5e <attcSendContinuingReq+0x9a>
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
    cd4e:	6822      	ldr	r2, [r4, #0]
    attExecCallback(connId, event, handle, status, 0);
    cd50:	2300      	movs	r3, #0
    cd52:	7f10      	ldrb	r0, [r2, #28]
    cd54:	8b22      	ldrh	r2, [r4, #24]
    cd56:	9300      	str	r3, [sp, #0]
    cd58:	2370      	movs	r3, #112	; 0x70
    cd5a:	f002 feab 	bl	fab4 <attExecCallback>
  pMsg->hdr.event = ATTC_MSG_API_NONE;
    cd5e:	2300      	movs	r3, #0
    cd60:	74a3      	strb	r3, [r4, #18]
}
    cd62:	b003      	add	sp, #12
    cd64:	bd30      	pop	{r4, r5, pc}
    cd66:	bf00      	nop
    cd68:	10002b00 	.word	0x10002b00

0000cd6c <attcMsgCback>:
{
    cd6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((pCcb = attcCcbByConnId((dmConnId_t) pMsg->hdr.param)) == NULL)
    cd70:	7804      	ldrb	r4, [r0, #0]
{
    cd72:	b082      	sub	sp, #8
    cd74:	4606      	mov	r6, r0
  if (DmConnInUse(connId))
    cd76:	4620      	mov	r0, r4
    cd78:	f00b fd6c 	bl	18854 <DmConnInUse>
    cd7c:	2800      	cmp	r0, #0
    cd7e:	d068      	beq.n	ce52 <attcMsgCback+0xe6>
  if (pMsg->hdr.event <= ATTC_MSG_API_EXEC_WRITE)
    cd80:	78b1      	ldrb	r1, [r6, #2]
    return &attcCb.ccb[connId - 1];
    cd82:	4f71      	ldr	r7, [pc, #452]	; (cf48 <attcMsgCback+0x1dc>)
    cd84:	3c01      	subs	r4, #1
    cd86:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
  if (pMsg->hdr.event <= ATTC_MSG_API_EXEC_WRITE)
    cd8a:	290c      	cmp	r1, #12
    cd8c:	ea4f 08c4 	mov.w	r8, r4, lsl #3
    cd90:	ea4f 03c0 	mov.w	r3, r0, lsl #3
    return &attcCb.ccb[connId - 1];
    cd94:	eb07 05c0 	add.w	r5, r7, r0, lsl #3
  if (pMsg->hdr.event <= ATTC_MSG_API_EXEC_WRITE)
    cd98:	d825      	bhi.n	cde6 <attcMsgCback+0x7a>
    if ((pCcb->onDeck.hdr.event != ATTC_MSG_API_NONE) ||
    cd9a:	79aa      	ldrb	r2, [r5, #6]
    cd9c:	bb72      	cbnz	r2, cdfc <attcMsgCback+0x90>
        (pCcb->outReq.hdr.event > ATTC_MSG_API_MTU)   ||
    cd9e:	7caa      	ldrb	r2, [r5, #18]
    if ((pCcb->onDeck.hdr.event != ATTC_MSG_API_NONE) ||
    cda0:	2a01      	cmp	r2, #1
    cda2:	d82b      	bhi.n	cdfc <attcMsgCback+0x90>
        (pCcb->outReq.hdr.event > ATTC_MSG_API_MTU)   ||
    cda4:	290a      	cmp	r1, #10
    cda6:	d06f      	beq.n	ce88 <attcMsgCback+0x11c>
    if (pCcb->outReq.hdr.event == ATTC_MSG_API_MTU || pCcb->flowDisabled)
    cda8:	2a01      	cmp	r2, #1
    cdaa:	d077      	beq.n	ce9c <attcMsgCback+0x130>
    cdac:	eba8 0304 	sub.w	r3, r8, r4
    cdb0:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
    cdb4:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
    cdb8:	2a00      	cmp	r2, #0
    cdba:	d16f      	bne.n	ce9c <attcMsgCback+0x130>
  (*attcSendReqTbl[pCcb->outReq.hdr.event])(pCcb);
    cdbc:	4a63      	ldr	r2, [pc, #396]	; (cf4c <attcMsgCback+0x1e0>)
    cdbe:	f852 7021 	ldr.w	r7, [r2, r1, lsl #2]
  pCcb->outReq = *pMsg;
    cdc2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    cdc6:	f103 0410 	add.w	r4, r3, #16
    cdca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pCcb->outReqParams = *(pMsg->pPkt);
    cdce:	6872      	ldr	r2, [r6, #4]
    cdd0:	e892 0003 	ldmia.w	r2, {r0, r1}
    cdd4:	331c      	adds	r3, #28
    cdd6:	e883 0003 	stmia.w	r3, {r0, r1}
  (*attcSendReqTbl[pCcb->outReq.hdr.event])(pCcb);
    cdda:	4628      	mov	r0, r5
    cddc:	463b      	mov	r3, r7
}
    cdde:	b002      	add	sp, #8
    cde0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  (*attcSendReqTbl[pCcb->outReq.hdr.event])(pCcb);
    cde4:	4718      	bx	r3
  else if (pMsg->hdr.event >= ATTC_MSG_API_SIGNED_WRITE_CMD &&
    cde6:	f1a1 020d 	sub.w	r2, r1, #13
    cdea:	2a01      	cmp	r2, #1
    cdec:	d941      	bls.n	ce72 <attcMsgCback+0x106>
  else if (pMsg->hdr.event == ATTC_MSG_API_CANCEL)
    cdee:	290f      	cmp	r1, #15
    cdf0:	d012      	beq.n	ce18 <attcMsgCback+0xac>
  else if (pMsg->hdr.event == ATTC_MSG_REQ_TIMEOUT)
    cdf2:	2910      	cmp	r1, #16
    cdf4:	d06a      	beq.n	cecc <attcMsgCback+0x160>
}
    cdf6:	b002      	add	sp, #8
    cdf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pMsg->pPkt != NULL)
    cdfc:	6870      	ldr	r0, [r6, #4]
    cdfe:	b120      	cbz	r0, ce0a <attcMsgCback+0x9e>
    WsfMsgFree(pMsg->pPkt);
    ce00:	f006 fd10 	bl	13824 <WsfMsgFree>
    pMsg->pPkt = NULL;
    ce04:	2300      	movs	r3, #0
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
    ce06:	78b1      	ldrb	r1, [r6, #2]
    pMsg->pPkt = NULL;
    ce08:	6073      	str	r3, [r6, #4]
  if (event != ATT_METHOD_MTU)
    ce0a:	2901      	cmp	r1, #1
    ce0c:	d152      	bne.n	ceb4 <attcMsgCback+0x148>
  pMsg->hdr.event = ATTC_MSG_API_NONE;
    ce0e:	2300      	movs	r3, #0
    ce10:	70b3      	strb	r3, [r6, #2]
}
    ce12:	b002      	add	sp, #8
    ce14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pCcb->outReq.hdr.event != ATTC_MSG_API_NONE &&
    ce18:	7caa      	ldrb	r2, [r5, #18]
    ce1a:	2a01      	cmp	r2, #1
    ce1c:	d878      	bhi.n	cf10 <attcMsgCback+0x1a4>
    else if (pCcb->onDeck.hdr.event != ATTC_MSG_API_NONE)
    ce1e:	79ab      	ldrb	r3, [r5, #6]
    ce20:	2b00      	cmp	r3, #0
    ce22:	d0e8      	beq.n	cdf6 <attcMsgCback+0x8a>
  if (pMsg->pPkt != NULL)
    ce24:	68a8      	ldr	r0, [r5, #8]
    ce26:	b118      	cbz	r0, ce30 <attcMsgCback+0xc4>
    WsfMsgFree(pMsg->pPkt);
    ce28:	f006 fcfc 	bl	13824 <WsfMsgFree>
    pMsg->pPkt = NULL;
    ce2c:	2300      	movs	r3, #0
    ce2e:	60ab      	str	r3, [r5, #8]
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
    ce30:	79a9      	ldrb	r1, [r5, #6]
  if (event != ATT_METHOD_MTU)
    ce32:	2901      	cmp	r1, #1
    ce34:	d00a      	beq.n	ce4c <attcMsgCback+0xe0>
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
    ce36:	eba8 0404 	sub.w	r4, r8, r4
    attExecCallback(connId, event, handle, status, 0);
    ce3a:	2300      	movs	r3, #0
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
    ce3c:	f857 2034 	ldr.w	r2, [r7, r4, lsl #3]
    attExecCallback(connId, event, handle, status, 0);
    ce40:	7f10      	ldrb	r0, [r2, #28]
    ce42:	9300      	str	r3, [sp, #0]
    ce44:	89aa      	ldrh	r2, [r5, #12]
    ce46:	2374      	movs	r3, #116	; 0x74
    ce48:	f002 fe34 	bl	fab4 <attExecCallback>
  pMsg->hdr.event = ATTC_MSG_API_NONE;
    ce4c:	2300      	movs	r3, #0
    ce4e:	71ab      	strb	r3, [r5, #6]
}
    ce50:	e7d1      	b.n	cdf6 <attcMsgCback+0x8a>
    ATT_TRACE_WARN1("attc ccb not in use: %d", connId);
    ce52:	4605      	mov	r5, r0
    ce54:	4621      	mov	r1, r4
    ce56:	483e      	ldr	r0, [pc, #248]	; (cf50 <attcMsgCback+0x1e4>)
    ce58:	f007 f85c 	bl	13f14 <WsfTrace>
    if (pMsg->hdr.event >= ATTC_MSG_API_MTU &&
    ce5c:	78b3      	ldrb	r3, [r6, #2]
    ce5e:	3b01      	subs	r3, #1
    ce60:	2b0c      	cmp	r3, #12
    ce62:	d8c8      	bhi.n	cdf6 <attcMsgCback+0x8a>
  if (pMsg->pPkt != NULL)
    ce64:	6870      	ldr	r0, [r6, #4]
    ce66:	2800      	cmp	r0, #0
    ce68:	d0c5      	beq.n	cdf6 <attcMsgCback+0x8a>
    WsfMsgFree(pMsg->pPkt);
    ce6a:	f006 fcdb 	bl	13824 <WsfMsgFree>
    pMsg->pPkt = NULL;
    ce6e:	6075      	str	r5, [r6, #4]
    ce70:	e7c1      	b.n	cdf6 <attcMsgCback+0x8a>
    if (attcCb.pSign != NULL)
    ce72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
    ce76:	2b00      	cmp	r3, #0
    ce78:	d0bd      	beq.n	cdf6 <attcMsgCback+0x8a>
      (*attcCb.pSign->msgCback)(pCcb, pMsg);
    ce7a:	681b      	ldr	r3, [r3, #0]
    ce7c:	4631      	mov	r1, r6
    ce7e:	4628      	mov	r0, r5
}
    ce80:	b002      	add	sp, #8
    ce82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      (*attcCb.pSign->msgCback)(pCcb, pMsg);
    ce86:	4718      	bx	r3
    if (pCcb->pendWriteCmdHandle[i] != ATT_HANDLE_NONE)
    ce88:	8ee8      	ldrh	r0, [r5, #54]	; 0x36
    ce8a:	2800      	cmp	r0, #0
    ce8c:	d08c      	beq.n	cda8 <attcMsgCback+0x3c>
  if (pMsg->pPkt != NULL)
    ce8e:	6870      	ldr	r0, [r6, #4]
    ce90:	2800      	cmp	r0, #0
    ce92:	d1b5      	bne.n	ce00 <attcMsgCback+0x94>
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
    ce94:	58fb      	ldr	r3, [r7, r3]
      if (pCcb->pendWriteCmdHandle[i] == pMsg->handle)
    ce96:	8932      	ldrh	r2, [r6, #8]
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
    ce98:	7f18      	ldrb	r0, [r3, #28]
  if (event != ATT_METHOD_MTU)
    ce9a:	e011      	b.n	cec0 <attcMsgCback+0x154>
      pCcb->onDeck = *pMsg;
    ce9c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    cea0:	eba8 0404 	sub.w	r4, r8, r4
    cea4:	eb07 07c4 	add.w	r7, r7, r4, lsl #3
    cea8:	3704      	adds	r7, #4
    ceaa:	e887 0007 	stmia.w	r7, {r0, r1, r2}
}
    ceae:	b002      	add	sp, #8
    ceb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
    ceb4:	eba8 0404 	sub.w	r4, r8, r4
    ceb8:	8932      	ldrh	r2, [r6, #8]
    ceba:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
    cebe:	7f18      	ldrb	r0, [r3, #28]
    attExecCallback(connId, event, handle, status, 0);
    cec0:	2300      	movs	r3, #0
    cec2:	9300      	str	r3, [sp, #0]
    cec4:	2372      	movs	r3, #114	; 0x72
    cec6:	f002 fdf5 	bl	fab4 <attExecCallback>
    ceca:	e7a0      	b.n	ce0e <attcMsgCback+0xa2>
    if (pCcb->outReq.hdr.event != ATTC_MSG_API_NONE)
    cecc:	7cab      	ldrb	r3, [r5, #18]
    cece:	2b00      	cmp	r3, #0
    ced0:	d091      	beq.n	cdf6 <attcMsgCback+0x8a>
  if (pMsg->pPkt != NULL)
    ced2:	6968      	ldr	r0, [r5, #20]
    ced4:	b118      	cbz	r0, cede <attcMsgCback+0x172>
    WsfMsgFree(pMsg->pPkt);
    ced6:	f006 fca5 	bl	13824 <WsfMsgFree>
    pMsg->pPkt = NULL;
    ceda:	2300      	movs	r3, #0
    cedc:	616b      	str	r3, [r5, #20]
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
    cede:	7ca9      	ldrb	r1, [r5, #18]
  if (event != ATT_METHOD_MTU)
    cee0:	2901      	cmp	r1, #1
    cee2:	d00a      	beq.n	cefa <attcMsgCback+0x18e>
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
    cee4:	eba8 0304 	sub.w	r3, r8, r4
    cee8:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
    attExecCallback(connId, event, handle, status, 0);
    ceec:	7f18      	ldrb	r0, [r3, #28]
    ceee:	2300      	movs	r3, #0
    cef0:	9300      	str	r3, [sp, #0]
    cef2:	8b2a      	ldrh	r2, [r5, #24]
    cef4:	2371      	movs	r3, #113	; 0x71
    cef6:	f002 fddd 	bl	fab4 <attExecCallback>
  pMsg->hdr.event = ATTC_MSG_API_NONE;
    cefa:	2300      	movs	r3, #0
      pCcb->pMainCcb->control |= ATT_CCB_STATUS_TX_TIMEOUT;
    cefc:	eba8 0404 	sub.w	r4, r8, r4
  pMsg->hdr.event = ATTC_MSG_API_NONE;
    cf00:	74ab      	strb	r3, [r5, #18]
      pCcb->pMainCcb->control |= ATT_CCB_STATUS_TX_TIMEOUT;
    cf02:	f857 2034 	ldr.w	r2, [r7, r4, lsl #3]
    cf06:	7f53      	ldrb	r3, [r2, #29]
    cf08:	f043 0304 	orr.w	r3, r3, #4
    cf0c:	7753      	strb	r3, [r2, #29]
    cf0e:	e772      	b.n	cdf6 <attcMsgCback+0x8a>
      WsfTimerStop(&pCcb->outReqTimer);
    cf10:	f103 0024 	add.w	r0, r3, #36	; 0x24
    cf14:	4438      	add	r0, r7
    cf16:	f006 ff5d 	bl	13dd4 <WsfTimerStop>
  if (pMsg->pPkt != NULL)
    cf1a:	6968      	ldr	r0, [r5, #20]
    cf1c:	b118      	cbz	r0, cf26 <attcMsgCback+0x1ba>
    WsfMsgFree(pMsg->pPkt);
    cf1e:	f006 fc81 	bl	13824 <WsfMsgFree>
    pMsg->pPkt = NULL;
    cf22:	2300      	movs	r3, #0
    cf24:	616b      	str	r3, [r5, #20]
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
    cf26:	7ca9      	ldrb	r1, [r5, #18]
  if (event != ATT_METHOD_MTU)
    cf28:	2901      	cmp	r1, #1
    cf2a:	d00a      	beq.n	cf42 <attcMsgCback+0x1d6>
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
    cf2c:	eba8 0404 	sub.w	r4, r8, r4
    attExecCallback(connId, event, handle, status, 0);
    cf30:	2300      	movs	r3, #0
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
    cf32:	f857 2034 	ldr.w	r2, [r7, r4, lsl #3]
    attExecCallback(connId, event, handle, status, 0);
    cf36:	7f10      	ldrb	r0, [r2, #28]
    cf38:	9300      	str	r3, [sp, #0]
    cf3a:	8b2a      	ldrh	r2, [r5, #24]
    cf3c:	2374      	movs	r3, #116	; 0x74
    cf3e:	f002 fdb9 	bl	fab4 <attExecCallback>
  pMsg->hdr.event = ATTC_MSG_API_NONE;
    cf42:	2300      	movs	r3, #0
    cf44:	74ab      	strb	r3, [r5, #18]
}
    cf46:	e756      	b.n	cdf6 <attcMsgCback+0x8a>
    cf48:	10003e50 	.word	0x10003e50
    cf4c:	00023ce4 	.word	0x00023ce4
    cf50:	00023ca8 	.word	0x00023ca8

0000cf54 <attcSendReq>:
  (*attcSendReqTbl[pCcb->outReq.hdr.event])(pCcb);
    cf54:	4b02      	ldr	r3, [pc, #8]	; (cf60 <attcSendReq+0xc>)
    cf56:	7c82      	ldrb	r2, [r0, #18]
    cf58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    cf5c:	4718      	bx	r3
    cf5e:	bf00      	nop
    cf60:	00023ce4 	.word	0x00023ce4

0000cf64 <attcSetupReq>:
{
    cf64:	b510      	push	{r4, lr}
    cf66:	4603      	mov	r3, r0
  pCcb->outReq = *pMsg;
    cf68:	f100 0e10 	add.w	lr, r0, #16
{
    cf6c:	468c      	mov	ip, r1
  pCcb->outReq = *pMsg;
    cf6e:	c907      	ldmia	r1, {r0, r1, r2}
    cf70:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  pCcb->outReqParams = *(pMsg->pPkt);
    cf74:	f8dc 1004 	ldr.w	r1, [ip, #4]
  (*attcSendReqTbl[pCcb->outReq.hdr.event])(pCcb);
    cf78:	4c06      	ldr	r4, [pc, #24]	; (cf94 <attcSetupReq+0x30>)
  pCcb->outReqParams = *(pMsg->pPkt);
    cf7a:	c903      	ldmia	r1, {r0, r1}
    cf7c:	f103 021c 	add.w	r2, r3, #28
    cf80:	e882 0003 	stmia.w	r2, {r0, r1}
  (*attcSendReqTbl[pCcb->outReq.hdr.event])(pCcb);
    cf84:	4618      	mov	r0, r3
    cf86:	7c9b      	ldrb	r3, [r3, #18]
    cf88:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
}
    cf8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (*attcSendReqTbl[pCcb->outReq.hdr.event])(pCcb);
    cf90:	4718      	bx	r3
    cf92:	bf00      	nop
    cf94:	00023ce4 	.word	0x00023ce4

0000cf98 <attcCcbByConnId>:
{
    cf98:	b538      	push	{r3, r4, r5, lr}
    cf9a:	4604      	mov	r4, r0
  if (DmConnInUse(connId))
    cf9c:	f00b fc5a 	bl	18854 <DmConnInUse>
    cfa0:	b130      	cbz	r0, cfb0 <attcCcbByConnId+0x18>
    return &attcCb.ccb[connId - 1];
    cfa2:	4d07      	ldr	r5, [pc, #28]	; (cfc0 <attcCcbByConnId+0x28>)
    cfa4:	1e60      	subs	r0, r4, #1
    cfa6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    cfaa:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
}
    cfae:	bd38      	pop	{r3, r4, r5, pc}
    cfb0:	4605      	mov	r5, r0
    ATT_TRACE_WARN1("attc ccb not in use: %d", connId);
    cfb2:	4621      	mov	r1, r4
    cfb4:	4803      	ldr	r0, [pc, #12]	; (cfc4 <attcCcbByConnId+0x2c>)
    cfb6:	f006 ffad 	bl	13f14 <WsfTrace>
    return NULL;
    cfba:	4628      	mov	r0, r5
}
    cfbc:	bd38      	pop	{r3, r4, r5, pc}
    cfbe:	bf00      	nop
    cfc0:	10003e50 	.word	0x10003e50
    cfc4:	00023ca8 	.word	0x00023ca8

0000cfc8 <attcCcbByHandle>:
{
    cfc8:	b508      	push	{r3, lr}
  if ((connId = DmConnIdByHandle(handle)) != DM_CONN_ID_NONE)
    cfca:	f00b fc21 	bl	18810 <DmConnIdByHandle>
    cfce:	b128      	cbz	r0, cfdc <attcCcbByHandle+0x14>
    return &attcCb.ccb[connId - 1];
    cfd0:	4b03      	ldr	r3, [pc, #12]	; (cfe0 <attcCcbByHandle+0x18>)
    cfd2:	3801      	subs	r0, #1
    cfd4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    cfd8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
}
    cfdc:	bd08      	pop	{r3, pc}
    cfde:	bf00      	nop
    cfe0:	10003e50 	.word	0x10003e50

0000cfe4 <attcFreePkt>:
{
    cfe4:	b510      	push	{r4, lr}
    cfe6:	4604      	mov	r4, r0
  if (pMsg->pPkt != NULL)
    cfe8:	6840      	ldr	r0, [r0, #4]
    cfea:	b118      	cbz	r0, cff4 <attcFreePkt+0x10>
    WsfMsgFree(pMsg->pPkt);
    cfec:	f006 fc1a 	bl	13824 <WsfMsgFree>
    pMsg->pPkt = NULL;
    cff0:	2300      	movs	r3, #0
    cff2:	6063      	str	r3, [r4, #4]
}
    cff4:	bd10      	pop	{r4, pc}
    cff6:	bf00      	nop

0000cff8 <attcExecCallback>:
  if (event != ATT_METHOD_MTU)
    cff8:	2901      	cmp	r1, #1
    cffa:	d100      	bne.n	cffe <attcExecCallback+0x6>
    cffc:	4770      	bx	lr
{
    cffe:	b510      	push	{r4, lr}
    d000:	b082      	sub	sp, #8
    attExecCallback(connId, event, handle, status, 0);
    d002:	2400      	movs	r4, #0
    d004:	9400      	str	r4, [sp, #0]
    d006:	f002 fd55 	bl	fab4 <attExecCallback>
}
    d00a:	b002      	add	sp, #8
    d00c:	bd10      	pop	{r4, pc}
    d00e:	bf00      	nop

0000d010 <AttcInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttcInit(void)
{
    d010:	b410      	push	{r4}
  uint8_t     i;
  attcCcb_t   *pCcb;

  /* Initialize control block */
  attcCb.pSign = NULL;
    d012:	4b12      	ldr	r3, [pc, #72]	; (d05c <AttcInit+0x4c>)
  {
    /* set pointer to main CCB */
    pCcb->pMainCcb = &attCb.ccb[i];

    /* initialize timer */
    pCcb->outReqTimer.handlerId = attCb.handlerId;
    d014:	4a12      	ldr	r2, [pc, #72]	; (d060 <AttcInit+0x50>)
    pCcb->pMainCcb = &attCb.ccb[i];
    d016:	601a      	str	r2, [r3, #0]
  attcCb.pSign = NULL;
    d018:	2400      	movs	r4, #0
    d01a:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
    pCcb->pMainCcb = &attCb.ccb[i];
    d01e:	f102 0424 	add.w	r4, r2, #36	; 0x24
    pCcb->outReqTimer.handlerId = attCb.handlerId;
    d022:	f892 107c 	ldrb.w	r1, [r2, #124]	; 0x7c
    pCcb->pMainCcb = &attCb.ccb[i];
    d026:	639c      	str	r4, [r3, #56]	; 0x38
  attcCb.autoCnf = TRUE;
    d028:	2001      	movs	r0, #1
    pCcb->outReqTimer.msg.param = i + 1;  /* param stores the conn id */
    d02a:	2402      	movs	r4, #2
  attcCb.autoCnf = TRUE;
    d02c:	f883 00ac 	strb.w	r0, [r3, #172]	; 0xac
    pCcb->outReqTimer.handlerId = attCb.handlerId;
    d030:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
    pCcb->outReqTimer.msg.param = i + 1;  /* param stores the conn id */
    d034:	8598      	strh	r0, [r3, #44]	; 0x2c
    pCcb->outReqTimer.handlerId = attCb.handlerId;
    d036:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
  }

  /* set up callback interface */
  attCb.pClient = &attcFcnIf;
    d03a:	480a      	ldr	r0, [pc, #40]	; (d064 <AttcInit+0x54>)
    pCcb->outReqTimer.msg.param = i + 1;  /* param stores the conn id */
    d03c:	f8a3 4064 	strh.w	r4, [r3, #100]	; 0x64
    d040:	f04f 0c03 	mov.w	ip, #3
    pCcb->pMainCcb = &attCb.ccb[i];
    d044:	f102 0448 	add.w	r4, r2, #72	; 0x48
    pCcb->outReqTimer.handlerId = attCb.handlerId;
    d048:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
    pCcb->pMainCcb = &attCb.ccb[i];
    d04c:	671c      	str	r4, [r3, #112]	; 0x70
    pCcb->outReqTimer.msg.param = i + 1;  /* param stores the conn id */
    d04e:	f8a3 c09c 	strh.w	ip, [r3, #156]	; 0x9c
}
    d052:	f85d 4b04 	ldr.w	r4, [sp], #4
  attCb.pClient = &attcFcnIf;
    d056:	66d0      	str	r0, [r2, #108]	; 0x6c
}
    d058:	4770      	bx	lr
    d05a:	bf00      	nop
    d05c:	10003e50 	.word	0x10003e50
    d060:	10003fd0 	.word	0x10003fd0
    d064:	00023cd4 	.word	0x00023cd4

0000d068 <attcProcErrRsp>:
  uint8_t *p;

  p =  pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;

  /* set callback event from stored method */
  pEvt->hdr.event = pCcb->outReq.hdr.event;
    d068:	7c81      	ldrb	r1, [r0, #18]
    d06a:	7099      	strb	r1, [r3, #2]

  /* ignore request opcode in the error response */
  p++;

  /* if request was a read or write with a specific handle */
  if (pEvt->hdr.event == ATTC_READ_RSP || pEvt->hdr.event == ATTC_READ_LONG_RSP ||
    d06c:	1f48      	subs	r0, r1, #5
    d06e:	2801      	cmp	r0, #1
    d070:	d90a      	bls.n	d088 <attcProcErrRsp+0x20>
    d072:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
    d076:	2909      	cmp	r1, #9
    d078:	d006      	beq.n	d088 <attcProcErrRsp+0x20>
    p += 2;
  }
  else
  {
    /* set handle from packet */
    BSTREAM_TO_UINT16(pEvt->handle, p);
    d07a:	7ad0      	ldrb	r0, [r2, #11]
    d07c:	7a91      	ldrb	r1, [r2, #10]
    d07e:	eb01 2100 	add.w	r1, r1, r0, lsl #8
    d082:	320c      	adds	r2, #12
    d084:	8159      	strh	r1, [r3, #10]
    d086:	e000      	b.n	d08a <attcProcErrRsp+0x22>
    p += 2;
    d088:	320c      	adds	r2, #12
  }

  /* set status from error code in packet, but verify it's not 'success' */
  BSTREAM_TO_UINT8(pEvt->hdr.status, p);
    d08a:	7812      	ldrb	r2, [r2, #0]
  if (pEvt->hdr.status == ATT_SUCCESS)
    d08c:	b902      	cbnz	r2, d090 <attcProcErrRsp+0x28>
  {
    pEvt->hdr.status = ATT_ERR_UNDEFINED;
    d08e:	2275      	movs	r2, #117	; 0x75
    d090:	70da      	strb	r2, [r3, #3]
  }

  /* no parameters so clear length */
  pEvt->valueLen = 0;
    d092:	2200      	movs	r2, #0
    d094:	811a      	strh	r2, [r3, #8]
}
    d096:	4770      	bx	lr

0000d098 <attcProcFindOrReadRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcProcFindOrReadRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
    d098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  p = pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;
  pEnd = pPacket + L2C_PAYLOAD_START + len;

  /* parameter length depends on packet type */
  if (pCcb->outReq.hdr.event == ATTC_MSG_API_FIND_INFO)
    d09c:	7c87      	ldrb	r7, [r0, #18]
  pEnd = pPacket + L2C_PAYLOAD_START + len;
    d09e:	3108      	adds	r1, #8
  if (pCcb->outReq.hdr.event == ATTC_MSG_API_FIND_INFO)
    d0a0:	2f02      	cmp	r7, #2
  pEnd = pPacket + L2C_PAYLOAD_START + len;
    d0a2:	eb02 0c01 	add.w	ip, r2, r1
  if (pCcb->outReq.hdr.event == ATTC_MSG_API_FIND_INFO)
    d0a6:	d065      	beq.n	d174 <attcProcFindOrReadRsp+0xdc>
    else
    {
      paramLen = ATT_128_UUID_LEN;
    }
  }
  else if (pCcb->outReq.hdr.event == ATTC_MSG_API_READ_BY_TYPE)
    d0a8:	2f04      	cmp	r7, #4
    d0aa:	d03d      	beq.n	d128 <attcProcFindOrReadRsp+0x90>
    paramLen = *p++ - sizeof(uint16_t);
  }
  else
  {
    /* length in read by group type response is two handles plus parameter length */
    paramLen = *p++ - (2 * sizeof(uint16_t));
    d0ac:	f892 e009 	ldrb.w	lr, [r2, #9]
  }

  /* get and verify all handles */
  nextHandle = pCcb->outReqParams.h.startHandle;
    d0b0:	8bc4      	ldrh	r4, [r0, #30]
    paramLen = *p++ - (2 * sizeof(uint16_t));
    d0b2:	f1ae 0e04 	sub.w	lr, lr, #4
    d0b6:	2f08      	cmp	r7, #8
    d0b8:	f102 010a 	add.w	r1, r2, #10
    d0bc:	fa5f fe8e 	uxtb.w	lr, lr
  while (p < pEnd)
    d0c0:	d16b      	bne.n	d19a <attcProcFindOrReadRsp+0x102>
    d0c2:	f10e 0e04 	add.w	lr, lr, #4
        break;
      }
    }

    /* set next expected handle, with special case for max handle */
    if (handle == ATT_HANDLE_MAX)
    d0c6:	f64f 76ff 	movw	r6, #65535	; 0xffff
    d0ca:	e024      	b.n	d116 <attcProcFindOrReadRsp+0x7e>
    BSTREAM_TO_UINT16(handle, p);
    d0cc:	784d      	ldrb	r5, [r1, #1]
    d0ce:	780a      	ldrb	r2, [r1, #0]
    d0d0:	eb02 2205 	add.w	r2, r2, r5, lsl #8
    d0d4:	b292      	uxth	r2, r2
    if (handle == 0 || nextHandle == 0 || handle < nextHandle ||
    d0d6:	2a00      	cmp	r2, #0
    d0d8:	d048      	beq.n	d16c <attcProcFindOrReadRsp+0xd4>
    d0da:	2c00      	cmp	r4, #0
    d0dc:	d046      	beq.n	d16c <attcProcFindOrReadRsp+0xd4>
    d0de:	4294      	cmp	r4, r2
    d0e0:	d844      	bhi.n	d16c <attcProcFindOrReadRsp+0xd4>
        handle > pCcb->outReqParams.h.endHandle)
    d0e2:	8c07      	ldrh	r7, [r0, #32]
    if (handle == 0 || nextHandle == 0 || handle < nextHandle ||
    d0e4:	4297      	cmp	r7, r2
    d0e6:	d341      	bcc.n	d16c <attcProcFindOrReadRsp+0xd4>
      BSTREAM_TO_UINT16(handle, p);
    d0e8:	f891 8003 	ldrb.w	r8, [r1, #3]
    d0ec:	788d      	ldrb	r5, [r1, #2]
    d0ee:	eb05 2508 	add.w	r5, r5, r8, lsl #8
    d0f2:	b2ad      	uxth	r5, r5
      if (handle == 0 || handle < prevHandle || handle < nextHandle ||
    d0f4:	2d00      	cmp	r5, #0
    d0f6:	d039      	beq.n	d16c <attcProcFindOrReadRsp+0xd4>
    d0f8:	42aa      	cmp	r2, r5
    d0fa:	d837      	bhi.n	d16c <attcProcFindOrReadRsp+0xd4>
    d0fc:	42ac      	cmp	r4, r5
    d0fe:	d835      	bhi.n	d16c <attcProcFindOrReadRsp+0xd4>
    d100:	42af      	cmp	r7, r5
    d102:	d333      	bcc.n	d16c <attcProcFindOrReadRsp+0xd4>
    if (handle == ATT_HANDLE_MAX)
    d104:	42b5      	cmp	r5, r6
    {
      nextHandle = 0;
    }
    else
    {
      nextHandle = handle + 1;
    d106:	bf18      	it	ne
    d108:	1c6c      	addne	r4, r5, #1
    d10a:	4471      	add	r1, lr
    d10c:	bf14      	ite	ne
    d10e:	b2a4      	uxthne	r4, r4
      nextHandle = 0;
    d110:	2400      	moveq	r4, #0

    /* skip over parameter */
    p += paramLen;

    /* check for truncated response */
    if (p > pEnd)
    d112:	458c      	cmp	ip, r1
    d114:	d32a      	bcc.n	d16c <attcProcFindOrReadRsp+0xd4>
  while (p < pEnd)
    d116:	4561      	cmp	r1, ip
    d118:	d3d8      	bcc.n	d0cc <attcProcFindOrReadRsp+0x34>
      break;
    }
  }

  /* if response was correct */
  if (pEvt->hdr.status == ATT_SUCCESS)
    d11a:	78db      	ldrb	r3, [r3, #3]
    d11c:	b913      	cbnz	r3, d124 <attcProcFindOrReadRsp+0x8c>
  {
    /* if continuing */
    if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
    d11e:	7cc3      	ldrb	r3, [r0, #19]
    d120:	2b01      	cmp	r3, #1
    d122:	d02e      	beq.n	d182 <attcProcFindOrReadRsp+0xea>
        pCcb->outReqParams.h.startHandle = nextHandle;
        pCcb->outReq.handle = nextHandle;
      }
    }
  }
}
    d124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    paramLen = *p++ - sizeof(uint16_t);
    d128:	7a57      	ldrb	r7, [r2, #9]
    d12a:	3f02      	subs	r7, #2
    d12c:	f102 010a 	add.w	r1, r2, #10
    d130:	b2ff      	uxtb	r7, r7
  nextHandle = pCcb->outReqParams.h.startHandle;
    d132:	8bc4      	ldrh	r4, [r0, #30]
  while (p < pEnd)
    d134:	3702      	adds	r7, #2
    if (handle == ATT_HANDLE_MAX)
    d136:	f64f 76ff 	movw	r6, #65535	; 0xffff
    d13a:	e014      	b.n	d166 <attcProcFindOrReadRsp+0xce>
    BSTREAM_TO_UINT16(handle, p);
    d13c:	784d      	ldrb	r5, [r1, #1]
    d13e:	780a      	ldrb	r2, [r1, #0]
    d140:	eb02 2205 	add.w	r2, r2, r5, lsl #8
    d144:	b292      	uxth	r2, r2
      nextHandle = handle + 1;
    d146:	1c55      	adds	r5, r2, #1
    if (handle == 0 || nextHandle == 0 || handle < nextHandle ||
    d148:	b182      	cbz	r2, d16c <attcProcFindOrReadRsp+0xd4>
    d14a:	b17c      	cbz	r4, d16c <attcProcFindOrReadRsp+0xd4>
    d14c:	42a2      	cmp	r2, r4
    d14e:	d30d      	bcc.n	d16c <attcProcFindOrReadRsp+0xd4>
    d150:	f8b0 e020 	ldrh.w	lr, [r0, #32]
    d154:	4596      	cmp	lr, r2
      nextHandle = handle + 1;
    d156:	b2ac      	uxth	r4, r5
    if (handle == 0 || nextHandle == 0 || handle < nextHandle ||
    d158:	d308      	bcc.n	d16c <attcProcFindOrReadRsp+0xd4>
    if (handle == ATT_HANDLE_MAX)
    d15a:	42b2      	cmp	r2, r6
    d15c:	4439      	add	r1, r7
      nextHandle = 0;
    d15e:	bf08      	it	eq
    d160:	2400      	moveq	r4, #0
    if (p > pEnd)
    d162:	4561      	cmp	r1, ip
    d164:	d802      	bhi.n	d16c <attcProcFindOrReadRsp+0xd4>
  while (p < pEnd)
    d166:	458c      	cmp	ip, r1
    d168:	d8e8      	bhi.n	d13c <attcProcFindOrReadRsp+0xa4>
    d16a:	e7d6      	b.n	d11a <attcProcFindOrReadRsp+0x82>
      pEvt->hdr.status = ATT_ERR_INVALID_RSP;
    d16c:	2273      	movs	r2, #115	; 0x73
    d16e:	70da      	strb	r2, [r3, #3]
}
    d170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (*p++ == ATT_FIND_HANDLE_16_UUID)
    d174:	7a51      	ldrb	r1, [r2, #9]
      paramLen = ATT_128_UUID_LEN;
    d176:	2901      	cmp	r1, #1
    d178:	bf18      	it	ne
    d17a:	2710      	movne	r7, #16
    if (*p++ == ATT_FIND_HANDLE_16_UUID)
    d17c:	f102 010a 	add.w	r1, r2, #10
    d180:	e7d7      	b.n	d132 <attcProcFindOrReadRsp+0x9a>
      if (nextHandle == 0 || nextHandle == (pCcb->outReqParams.h.endHandle + 1))
    d182:	b134      	cbz	r4, d192 <attcProcFindOrReadRsp+0xfa>
    d184:	8c03      	ldrh	r3, [r0, #32]
    d186:	3301      	adds	r3, #1
    d188:	429c      	cmp	r4, r3
    d18a:	d002      	beq.n	d192 <attcProcFindOrReadRsp+0xfa>
        pCcb->outReqParams.h.startHandle = nextHandle;
    d18c:	83c4      	strh	r4, [r0, #30]
        pCcb->outReq.handle = nextHandle;
    d18e:	8304      	strh	r4, [r0, #24]
}
    d190:	e7c8      	b.n	d124 <attcProcFindOrReadRsp+0x8c>
        pCcb->outReq.hdr.status = ATTC_NOT_CONTINUING;
    d192:	2300      	movs	r3, #0
    d194:	74c3      	strb	r3, [r0, #19]
}
    d196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    paramLen = *p++ - (2 * sizeof(uint16_t));
    d19a:	4677      	mov	r7, lr
    d19c:	e7ca      	b.n	d134 <attcProcFindOrReadRsp+0x9c>
    d19e:	bf00      	nop

0000d1a0 <attcProcReadRsp>:
 */
/*************************************************************************************************/
void attcProcReadRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
  /* nothing to process */
}
    d1a0:	4770      	bx	lr
    d1a2:	bf00      	nop

0000d1a4 <attcProcWriteRsp>:
 */
/*************************************************************************************************/
void attcProcWriteRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
  /* no parameters so clear length */
  pEvt->valueLen = 0;
    d1a4:	2200      	movs	r2, #0
    d1a6:	811a      	strh	r2, [r3, #8]
}
    d1a8:	4770      	bx	lr
    d1aa:	bf00      	nop

0000d1ac <attcProcMtuRsp>:
{
    d1ac:	b570      	push	{r4, r5, r6, lr}
  BYTES_TO_UINT16(mtu, pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN);
    d1ae:	7a93      	ldrb	r3, [r2, #10]
    d1b0:	7a51      	ldrb	r1, [r2, #9]
  attSetMtu(pCcb->pMainCcb, mtu, WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN)));
    d1b2:	4c13      	ldr	r4, [pc, #76]	; (d200 <attcProcMtuRsp+0x54>)
    d1b4:	6805      	ldr	r5, [r0, #0]
  BYTES_TO_UINT16(mtu, pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN);
    d1b6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
    d1ba:	b289      	uxth	r1, r1
  if (mtu < ATT_DEFAULT_MTU)
    d1bc:	2917      	cmp	r1, #23
{
    d1be:	b082      	sub	sp, #8
  attSetMtu(pCcb->pMainCcb, mtu, WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN)));
    d1c0:	6823      	ldr	r3, [r4, #0]
    d1c2:	bf38      	it	cc
    d1c4:	2117      	movcc	r1, #23
    d1c6:	889e      	ldrh	r6, [r3, #4]
    d1c8:	9101      	str	r1, [sp, #4]
    d1ca:	f005 f8d5 	bl	12378 <HciGetMaxRxAclLen>
    d1ce:	3804      	subs	r0, #4
    d1d0:	4286      	cmp	r6, r0
    d1d2:	9901      	ldr	r1, [sp, #4]
    d1d4:	da07      	bge.n	d1e6 <attcProcMtuRsp+0x3a>
    d1d6:	6823      	ldr	r3, [r4, #0]
    d1d8:	889a      	ldrh	r2, [r3, #4]
    d1da:	4628      	mov	r0, r5
}
    d1dc:	b002      	add	sp, #8
    d1de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  attSetMtu(pCcb->pMainCcb, mtu, WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN)));
    d1e2:	f002 bc45 	b.w	fa70 <attSetMtu>
    d1e6:	9101      	str	r1, [sp, #4]
    d1e8:	f005 f8c6 	bl	12378 <HciGetMaxRxAclLen>
    d1ec:	9901      	ldr	r1, [sp, #4]
    d1ee:	3804      	subs	r0, #4
    d1f0:	b282      	uxth	r2, r0
    d1f2:	4628      	mov	r0, r5
}
    d1f4:	b002      	add	sp, #8
    d1f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  attSetMtu(pCcb->pMainCcb, mtu, WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN)));
    d1fa:	f002 bc39 	b.w	fa70 <attSetMtu>
    d1fe:	bf00      	nop
    d200:	10002b00 	.word	0x10002b00

0000d204 <attcProcRsp>:
void attcProcRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
  attEvt_t    evt;

  /* if no request in progress ignore response */
  if (pCcb->outReq.hdr.event == ATTC_MSG_API_NONE)
    d204:	7c83      	ldrb	r3, [r0, #18]
    d206:	2b00      	cmp	r3, #0
    d208:	d04b      	beq.n	d2a2 <attcProcRsp+0x9e>
{
    d20a:	b5f0      	push	{r4, r5, r6, r7, lr}
    d20c:	4615      	mov	r5, r2
  {
    return;
  }

  /* get method */
  evt.hdr.event = ATT_OPCODE_2_METHOD(*(pPacket + L2C_PAYLOAD_START));
    d20e:	7a12      	ldrb	r2, [r2, #8]
{
    d210:	b085      	sub	sp, #20
    d212:	460e      	mov	r6, r1
  evt.hdr.event = ATT_OPCODE_2_METHOD(*(pPacket + L2C_PAYLOAD_START));
    d214:	0851      	lsrs	r1, r2, #1

  /* if response method is not error and does not match stored method ignore response */
  if ((evt.hdr.event != ATT_METHOD_ERR) && (evt.hdr.event != pCcb->outReq.hdr.event))
    d216:	0852      	lsrs	r2, r2, #1
    d218:	4604      	mov	r4, r0
  evt.hdr.event = ATT_OPCODE_2_METHOD(*(pPacket + L2C_PAYLOAD_START));
    d21a:	f88d 1002 	strb.w	r1, [sp, #2]
  if ((evt.hdr.event != ATT_METHOD_ERR) && (evt.hdr.event != pCcb->outReq.hdr.event))
    d21e:	d001      	beq.n	d224 <attcProcRsp+0x20>
    d220:	428b      	cmp	r3, r1
    d222:	d135      	bne.n	d290 <attcProcRsp+0x8c>
  {
    return;
  }

  /* stop request timer */
  WsfTimerStop(&pCcb->outReqTimer);
    d224:	f104 0024 	add.w	r0, r4, #36	; 0x24
    d228:	f006 fdd4 	bl	13dd4 <WsfTimerStop>

  /* initialize event structure then process response */
  evt.pValue = pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;
  evt.valueLen = len - ATT_HDR_LEN;
  evt.handle = pCcb->outReq.handle;
    d22c:	8b23      	ldrh	r3, [r4, #24]
    d22e:	f8ad 300a 	strh.w	r3, [sp, #10]
  evt.pValue = pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;
    d232:	f105 0309 	add.w	r3, r5, #9
  evt.hdr.status = ATT_SUCCESS;
  (*attcProcRspTbl[evt.hdr.event])(pCcb, len, pPacket, &evt);
    d236:	f89d 1002 	ldrb.w	r1, [sp, #2]
    d23a:	4a1f      	ldr	r2, [pc, #124]	; (d2b8 <attcProcRsp+0xb4>)
  evt.pValue = pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;
    d23c:	9301      	str	r3, [sp, #4]
  evt.valueLen = len - ATT_HDR_LEN;
    d23e:	1e73      	subs	r3, r6, #1
    d240:	f8ad 3008 	strh.w	r3, [sp, #8]
  evt.hdr.status = ATT_SUCCESS;
    d244:	2300      	movs	r3, #0
  (*attcProcRspTbl[evt.hdr.event])(pCcb, len, pPacket, &evt);
    d246:	f852 7021 	ldr.w	r7, [r2, r1, lsl #2]
  evt.hdr.status = ATT_SUCCESS;
    d24a:	f88d 3003 	strb.w	r3, [sp, #3]
  (*attcProcRspTbl[evt.hdr.event])(pCcb, len, pPacket, &evt);
    d24e:	462a      	mov	r2, r5
    d250:	466b      	mov	r3, sp
    d252:	4631      	mov	r1, r6
    d254:	4620      	mov	r0, r4
    d256:	47b8      	blx	r7

  /* if not continuing or status is not success */
  if ((pCcb->outReq.hdr.status == ATTC_NOT_CONTINUING) || (evt.hdr.status != ATT_SUCCESS))
    d258:	7ce3      	ldrb	r3, [r4, #19]
    d25a:	b1db      	cbz	r3, d294 <attcProcRsp+0x90>
    d25c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d260:	b9c3      	cbnz	r3, d294 <attcProcRsp+0x90>
    pCcb->outReq.hdr.event = ATTC_MSG_API_NONE;
    attcFreePkt(&pCcb->outReq);
  }

  /* call callback (if not mtu rsp) */
  if ((evt.hdr.event != ATT_METHOD_MTU) && attCb.cback)
    d262:	f89d 3002 	ldrb.w	r3, [sp, #2]
    d266:	2b01      	cmp	r3, #1
    d268:	d00a      	beq.n	d280 <attcProcRsp+0x7c>
    d26a:	4b14      	ldr	r3, [pc, #80]	; (d2bc <attcProcRsp+0xb8>)
    d26c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    d26e:	b13b      	cbz	r3, d280 <attcProcRsp+0x7c>
  {
    /* set additional parameters and call callback */
    evt.continuing = pCcb->outReq.hdr.status;   /* continuing flag */
    d270:	7ce1      	ldrb	r1, [r4, #19]
    evt.hdr.param = pCcb->outReq.hdr.param;     /* connId */
    d272:	8a22      	ldrh	r2, [r4, #16]
    evt.continuing = pCcb->outReq.hdr.status;   /* continuing flag */
    d274:	f88d 100c 	strb.w	r1, [sp, #12]
    evt.hdr.param = pCcb->outReq.hdr.param;     /* connId */
    d278:	f8ad 2000 	strh.w	r2, [sp]
    (*attCb.cback)(&evt);
    d27c:	4668      	mov	r0, sp
    d27e:	4798      	blx	r3
  }

  /* if no flow control */
  if (!pCcb->flowDisabled)
    d280:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    d284:	b923      	cbnz	r3, d290 <attcProcRsp+0x8c>
  {
    /* if out req ready */
    if (pCcb->outReq.pPkt != NULL)
    d286:	6965      	ldr	r5, [r4, #20]
    d288:	b165      	cbz	r5, d2a4 <attcProcRsp+0xa0>
    {
      /* build and send request */
      attcSendReq(pCcb);
    d28a:	4620      	mov	r0, r4
    d28c:	f7ff fe62 	bl	cf54 <attcSendReq>

      /* clear on deck */
      pCcb->onDeck.hdr.event = ATTC_MSG_API_NONE;
    }
  }
}
    d290:	b005      	add	sp, #20
    d292:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pCcb->outReq.hdr.event = ATTC_MSG_API_NONE;
    d294:	2300      	movs	r3, #0
    d296:	74a3      	strb	r3, [r4, #18]
    attcFreePkt(&pCcb->outReq);
    d298:	f104 0010 	add.w	r0, r4, #16
    d29c:	f7ff fea2 	bl	cfe4 <attcFreePkt>
    d2a0:	e7df      	b.n	d262 <attcProcRsp+0x5e>
    d2a2:	4770      	bx	lr
    else if (pCcb->onDeck.hdr.event != ATTC_MSG_API_NONE)
    d2a4:	79a3      	ldrb	r3, [r4, #6]
    d2a6:	2b00      	cmp	r3, #0
    d2a8:	d0f2      	beq.n	d290 <attcProcRsp+0x8c>
      attcSetupReq(pCcb, &pCcb->onDeck);
    d2aa:	1d21      	adds	r1, r4, #4
    d2ac:	4620      	mov	r0, r4
    d2ae:	f7ff fe59 	bl	cf64 <attcSetupReq>
      pCcb->onDeck.hdr.event = ATTC_MSG_API_NONE;
    d2b2:	71a5      	strb	r5, [r4, #6]
    d2b4:	e7ec      	b.n	d290 <attcProcRsp+0x8c>
    d2b6:	bf00      	nop
    d2b8:	00023d18 	.word	0x00023d18
    d2bc:	10003fd0 	.word	0x10003fd0

0000d2c0 <attcProcInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcProcInd(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
    d2c0:	b510      	push	{r4, lr}
    d2c2:	4604      	mov	r4, r0
  uint8_t     *pPkt;

  p = pPacket + L2C_PAYLOAD_START;

  /* parse packet and set callback event struct */
  evt.hdr.event = ATT_OPCODE_2_METHOD(*p++);
    d2c4:	7a10      	ldrb	r0, [r2, #8]
  BSTREAM_TO_UINT16(evt.handle, p);
    d2c6:	f892 c00a 	ldrb.w	ip, [r2, #10]
    d2ca:	7a53      	ldrb	r3, [r2, #9]
{
    d2cc:	b084      	sub	sp, #16
  evt.hdr.event = ATT_OPCODE_2_METHOD(*p++);
    d2ce:	1040      	asrs	r0, r0, #1
    d2d0:	f88d 0002 	strb.w	r0, [sp, #2]
  evt.pValue = p;
  evt.valueLen = len - ATT_HDR_LEN - sizeof(uint16_t);
  evt.hdr.param = pCcb->pMainCcb->connId;
    d2d4:	6820      	ldr	r0, [r4, #0]
  BSTREAM_TO_UINT16(evt.handle, p);
    d2d6:	320b      	adds	r2, #11
    d2d8:	eb03 230c 	add.w	r3, r3, ip, lsl #8
  evt.hdr.param = pCcb->pMainCcb->connId;
    d2dc:	7f00      	ldrb	r0, [r0, #28]
  evt.pValue = p;
    d2de:	9201      	str	r2, [sp, #4]
  BSTREAM_TO_UINT16(evt.handle, p);
    d2e0:	b29b      	uxth	r3, r3
  evt.hdr.status = ATT_SUCCESS;
    d2e2:	2200      	movs	r2, #0
  evt.valueLen = len - ATT_HDR_LEN - sizeof(uint16_t);
    d2e4:	3903      	subs	r1, #3
  BSTREAM_TO_UINT16(evt.handle, p);
    d2e6:	f8ad 300a 	strh.w	r3, [sp, #10]
  evt.valueLen = len - ATT_HDR_LEN - sizeof(uint16_t);
    d2ea:	f8ad 1008 	strh.w	r1, [sp, #8]
  evt.hdr.param = pCcb->pMainCcb->connId;
    d2ee:	f8ad 0000 	strh.w	r0, [sp]
  evt.hdr.status = ATT_SUCCESS;
    d2f2:	f88d 2003 	strb.w	r2, [sp, #3]
  evt.continuing = FALSE;
    d2f6:	f88d 200c 	strb.w	r2, [sp, #12]

  /* verify handle and call callback */
  if ((evt.handle != 0) && attCb.cback)
    d2fa:	b123      	cbz	r3, d306 <attcProcInd+0x46>
    d2fc:	4b12      	ldr	r3, [pc, #72]	; (d348 <attcProcInd+0x88>)
    d2fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    d300:	b10b      	cbz	r3, d306 <attcProcInd+0x46>
  {
    (*attCb.cback)(&evt);
    d302:	4668      	mov	r0, sp
    d304:	4798      	blx	r3
  }

  /* if indication send confirm */
  if (attcCb.autoCnf && (evt.hdr.event == ATT_METHOD_VALUE_IND))
    d306:	4b11      	ldr	r3, [pc, #68]	; (d34c <attcProcInd+0x8c>)
    d308:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
    d30c:	b11b      	cbz	r3, d316 <attcProcInd+0x56>
    d30e:	f89d 3002 	ldrb.w	r3, [sp, #2]
    d312:	2b0e      	cmp	r3, #14
    d314:	d004      	beq.n	d320 <attcProcInd+0x60>

    return;
  }

  /* mark confirm as pending; will be sent when flow enabled or application sends it. */
  pCcb->cnfPending = TRUE;
    d316:	2301      	movs	r3, #1
    d318:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
    d31c:	b004      	add	sp, #16
    d31e:	bd10      	pop	{r4, pc}
    if (!pCcb->flowDisabled)
    d320:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    d324:	2b00      	cmp	r3, #0
    d326:	d1f9      	bne.n	d31c <attcProcInd+0x5c>
      if ((pPkt = attMsgAlloc(ATT_VALUE_CNF_LEN + L2C_PAYLOAD_START)) != NULL)
    d328:	2009      	movs	r0, #9
    d32a:	f002 fbdf 	bl	faec <attMsgAlloc>
    d32e:	2800      	cmp	r0, #0
    d330:	d0f4      	beq.n	d31c <attcProcInd+0x5c>
        *(pPkt + L2C_PAYLOAD_START) = ATT_PDU_VALUE_CNF;
    d332:	231e      	movs	r3, #30
    d334:	7203      	strb	r3, [r0, #8]
        L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, ATT_VALUE_CNF_LEN, pPkt);
    d336:	6822      	ldr	r2, [r4, #0]
    d338:	4603      	mov	r3, r0
    d33a:	8b11      	ldrh	r1, [r2, #24]
    d33c:	2004      	movs	r0, #4
    d33e:	2201      	movs	r2, #1
    d340:	f003 fa56 	bl	107f0 <L2cDataReq>
    return;
    d344:	e7ea      	b.n	d31c <attcProcInd+0x5c>
    d346:	bf00      	nop
    d348:	10003fd0 	.word	0x10003fd0
    d34c:	10003e50 	.word	0x10003e50

0000d350 <attcSendMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcSendMsg(dmConnId_t connId, uint16_t handle, uint8_t msgId, attcPktParam_t *pPkt, bool_t continuing)
{
    d350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d354:	4605      	mov	r5, r0
    d356:	f89d 8020 	ldrb.w	r8, [sp, #32]
    d35a:	460f      	mov	r7, r1
    d35c:	4616      	mov	r6, r2
    d35e:	461c      	mov	r4, r3
  attcCcb_t   *pCcb;
  uint16_t    mtu;
  bool_t      transTimedOut;

  WsfTaskLock();
    d360:	f006 fa9a 	bl	13898 <WsfTaskLock>

  /* get CCB and verify connection still in use */
  if ((pCcb = attcCcbByConnId(connId)) != NULL)
    d364:	4628      	mov	r0, r5
    d366:	f7ff fe17 	bl	cf98 <attcCcbByConnId>
    d36a:	b1f0      	cbz	r0, d3aa <attcSendMsg+0x5a>
  {
    /* get MTU size */
    mtu = pCcb->pMainCcb->mtu;
    d36c:	6803      	ldr	r3, [r0, #0]
    d36e:	f8b3 901a 	ldrh.w	r9, [r3, #26]
    transTimedOut = !!(pCcb->pMainCcb->control & ATT_CCB_STATUS_TX_TIMEOUT);
    d372:	f893 a01d 	ldrb.w	sl, [r3, #29]
    /* MTU size unknown */
    mtu = 0;
    transTimedOut = FALSE;
  }

  WsfTaskUnlock();
    d376:	f006 fa99 	bl	138ac <WsfTaskUnlock>

  /* if MTU size known for connection */
  if (mtu > 0)
    d37a:	f1b9 0f00 	cmp.w	r9, #0
    d37e:	d016      	beq.n	d3ae <attcSendMsg+0x5e>
  {
    /* if no transaction's timed out */
    if (!transTimedOut)
    d380:	f01a 0f04 	tst.w	sl, #4
    d384:	d117      	bne.n	d3b6 <attcSendMsg+0x66>
    {
      uint16_t dataLen = 0;

      /* if packet is not null then find out its length */
      if (pPkt != NULL)
    d386:	2c00      	cmp	r4, #0
    d388:	d038      	beq.n	d3fc <attcSendMsg+0xac>
      {
        /* if not prepare write request */
        if (msgId != ATTC_MSG_API_PREP_WRITE)
    d38a:	2e0b      	cmp	r6, #11
    d38c:	d01c      	beq.n	d3c8 <attcSendMsg+0x78>
        {
          dataLen = pPkt->len;
    d38e:	8823      	ldrh	r3, [r4, #0]
          /* else will be sent as multiple prepare write requests */
        }
      }

      /* if packet length is less than or equal to negotiated MTU */
      if (dataLen <= mtu)
    d390:	454b      	cmp	r3, r9
    d392:	d920      	bls.n	d3d6 <attcSendMsg+0x86>
      }
      /* else packet length exceeds MTU size */
      else
      {
        /* call callback with failure status */
        attcExecCallback(connId, msgId, handle, ATT_ERR_MTU_EXCEEDED);
    d394:	2377      	movs	r3, #119	; 0x77
    d396:	463a      	mov	r2, r7
    d398:	4631      	mov	r1, r6
    d39a:	4628      	mov	r0, r5
    d39c:	f7ff fe2c 	bl	cff8 <attcExecCallback>
  }

  /* alloc failed, transaction's timed out or packet length exceeded MTU size; free packet buffer */
  if (pPkt != NULL)
  {
    WsfMsgFree(pPkt);
    d3a0:	4620      	mov	r0, r4
  }
}
    d3a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    WsfMsgFree(pPkt);
    d3a6:	f006 ba3d 	b.w	13824 <WsfMsgFree>
  WsfTaskUnlock();
    d3aa:	f006 fa7f 	bl	138ac <WsfTaskUnlock>
  if (pPkt != NULL)
    d3ae:	2c00      	cmp	r4, #0
    d3b0:	d1f6      	bne.n	d3a0 <attcSendMsg+0x50>
}
    d3b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      attcExecCallback(connId, msgId, handle, ATT_ERR_TIMEOUT);
    d3b6:	2371      	movs	r3, #113	; 0x71
    d3b8:	463a      	mov	r2, r7
    d3ba:	4631      	mov	r1, r6
    d3bc:	4628      	mov	r0, r5
    d3be:	f7ff fe1b 	bl	cff8 <attcExecCallback>
  if (pPkt != NULL)
    d3c2:	2c00      	cmp	r4, #0
    d3c4:	d0f5      	beq.n	d3b2 <attcSendMsg+0x62>
    d3c6:	e7eb      	b.n	d3a0 <attcSendMsg+0x50>
          if (!continuing)
    d3c8:	f1b8 0f00 	cmp.w	r8, #0
    d3cc:	d103      	bne.n	d3d6 <attcSendMsg+0x86>
            dataLen = ATT_PREP_WRITE_REQ_LEN + pPkt->w.len;
    d3ce:	8823      	ldrh	r3, [r4, #0]
    d3d0:	3305      	adds	r3, #5
    d3d2:	b29b      	uxth	r3, r3
    d3d4:	e7dc      	b.n	d390 <attcSendMsg+0x40>
        if ((pMsg = WsfMsgAlloc(sizeof(attcApiMsg_t))) != NULL)
    d3d6:	200c      	movs	r0, #12
    d3d8:	f006 fa1c 	bl	13814 <WsfMsgAlloc>
    d3dc:	4601      	mov	r1, r0
    d3de:	2800      	cmp	r0, #0
    d3e0:	d0de      	beq.n	d3a0 <attcSendMsg+0x50>
          WsfMsgSend(attCb.handlerId, pMsg);
    d3e2:	4b0a      	ldr	r3, [pc, #40]	; (d40c <attcSendMsg+0xbc>)
          pMsg->hdr.param = connId;
    d3e4:	800d      	strh	r5, [r1, #0]
          pMsg->hdr.status = continuing;
    d3e6:	f881 8003 	strb.w	r8, [r1, #3]
          pMsg->hdr.event = msgId;
    d3ea:	708e      	strb	r6, [r1, #2]
          pMsg->pPkt = pPkt;
    d3ec:	604c      	str	r4, [r1, #4]
          pMsg->handle = handle;
    d3ee:	810f      	strh	r7, [r1, #8]
          WsfMsgSend(attCb.handlerId, pMsg);
    d3f0:	f893 007c 	ldrb.w	r0, [r3, #124]	; 0x7c
}
    d3f4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
          WsfMsgSend(attCb.handlerId, pMsg);
    d3f8:	f006 ba18 	b.w	1382c <WsfMsgSend>
        if ((pMsg = WsfMsgAlloc(sizeof(attcApiMsg_t))) != NULL)
    d3fc:	200c      	movs	r0, #12
    d3fe:	f006 fa09 	bl	13814 <WsfMsgAlloc>
    d402:	4601      	mov	r1, r0
    d404:	2800      	cmp	r0, #0
    d406:	d0d4      	beq.n	d3b2 <attcSendMsg+0x62>
    d408:	e7eb      	b.n	d3e2 <attcSendMsg+0x92>
    d40a:	bf00      	nop
    d40c:	10003fd0 	.word	0x10003fd0

0000d410 <AttcFindInfoReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttcFindInfoReq(dmConnId_t connId, uint16_t startHandle, uint16_t endHandle, bool_t continuing)
{
    d410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d414:	4606      	mov	r6, r0
  attcPktParam_t  *pPkt;
  uint8_t         *p;

  /* allocate packet and parameter buffer */
  if ((pPkt = attMsgAlloc(ATT_FIND_INFO_REQ_BUF_LEN)) != NULL)
    d416:	200d      	movs	r0, #13
{
    d418:	460f      	mov	r7, r1
    d41a:	4615      	mov	r5, r2
    d41c:	4698      	mov	r8, r3
  if ((pPkt = attMsgAlloc(ATT_FIND_INFO_REQ_BUF_LEN)) != NULL)
    d41e:	f002 fb65 	bl	faec <attMsgAlloc>
    d422:	b318      	cbz	r0, d46c <AttcFindInfoReq+0x5c>
    pPkt->h.startHandle = startHandle;
    pPkt->h.endHandle = endHandle;

    /* build partial packet */
    p = (uint8_t *) pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, ATT_PDU_FIND_INFO_REQ);
    d424:	2304      	movs	r3, #4
    d426:	7203      	strb	r3, [r0, #8]
    pPkt->len = ATT_FIND_INFO_REQ_LEN;
    d428:	2305      	movs	r3, #5
    pPkt->h.endHandle = endHandle;
    d42a:	8085      	strh	r5, [r0, #4]
    pPkt->h.startHandle = startHandle;
    d42c:	8047      	strh	r7, [r0, #2]
    pPkt->len = ATT_FIND_INFO_REQ_LEN;
    d42e:	8003      	strh	r3, [r0, #0]
    p = (uint8_t *) pPkt + L2C_PAYLOAD_START;
    d430:	4604      	mov	r4, r0
  WsfTaskLock();
    d432:	f006 fa31 	bl	13898 <WsfTaskLock>
  if ((pCcb = attcCcbByConnId(connId)) != NULL)
    d436:	4630      	mov	r0, r6
    d438:	f7ff fdae 	bl	cf98 <attcCcbByConnId>
    d43c:	b1c0      	cbz	r0, d470 <AttcFindInfoReq+0x60>
    mtu = pCcb->pMainCcb->mtu;
    d43e:	6803      	ldr	r3, [r0, #0]
    d440:	8b5d      	ldrh	r5, [r3, #26]
    transTimedOut = !!(pCcb->pMainCcb->control & ATT_CCB_STATUS_TX_TIMEOUT);
    d442:	f893 901d 	ldrb.w	r9, [r3, #29]
  WsfTaskUnlock();
    d446:	f006 fa31 	bl	138ac <WsfTaskUnlock>
  if (mtu > 0)
    d44a:	b155      	cbz	r5, d462 <AttcFindInfoReq+0x52>
    if (!transTimedOut)
    d44c:	f019 0f04 	tst.w	r9, #4
    d450:	d115      	bne.n	d47e <AttcFindInfoReq+0x6e>
      if (dataLen <= mtu)
    d452:	8823      	ldrh	r3, [r4, #0]
    d454:	42ab      	cmp	r3, r5
    d456:	d819      	bhi.n	d48c <AttcFindInfoReq+0x7c>
        if ((pMsg = WsfMsgAlloc(sizeof(attcApiMsg_t))) != NULL)
    d458:	200c      	movs	r0, #12
    d45a:	f006 f9db 	bl	13814 <WsfMsgAlloc>
    d45e:	4601      	mov	r1, r0
    d460:	b9d8      	cbnz	r0, d49a <AttcFindInfoReq+0x8a>
    WsfMsgFree(pPkt);
    d462:	4620      	mov	r0, r4

    /* send message */
    attcSendMsg(connId, startHandle, ATTC_MSG_API_FIND_INFO, pPkt, continuing);
  }
}
    d464:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    WsfMsgFree(pPkt);
    d468:	f006 b9dc 	b.w	13824 <WsfMsgFree>
}
    d46c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  WsfTaskUnlock();
    d470:	f006 fa1c 	bl	138ac <WsfTaskUnlock>
    WsfMsgFree(pPkt);
    d474:	4620      	mov	r0, r4
}
    d476:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    WsfMsgFree(pPkt);
    d47a:	f006 b9d3 	b.w	13824 <WsfMsgFree>
      attcExecCallback(connId, msgId, handle, ATT_ERR_TIMEOUT);
    d47e:	2371      	movs	r3, #113	; 0x71
    d480:	463a      	mov	r2, r7
    d482:	2102      	movs	r1, #2
    d484:	4630      	mov	r0, r6
    d486:	f7ff fdb7 	bl	cff8 <attcExecCallback>
    d48a:	e7ea      	b.n	d462 <AttcFindInfoReq+0x52>
        attcExecCallback(connId, msgId, handle, ATT_ERR_MTU_EXCEEDED);
    d48c:	2377      	movs	r3, #119	; 0x77
    d48e:	463a      	mov	r2, r7
    d490:	2102      	movs	r1, #2
    d492:	4630      	mov	r0, r6
    d494:	f7ff fdb0 	bl	cff8 <attcExecCallback>
    d498:	e7e3      	b.n	d462 <AttcFindInfoReq+0x52>
          WsfMsgSend(attCb.handlerId, pMsg);
    d49a:	4b07      	ldr	r3, [pc, #28]	; (d4b8 <AttcFindInfoReq+0xa8>)
          pMsg->hdr.param = connId;
    d49c:	8006      	strh	r6, [r0, #0]
          pMsg->hdr.event = msgId;
    d49e:	2202      	movs	r2, #2
    d4a0:	7082      	strb	r2, [r0, #2]
          pMsg->hdr.status = continuing;
    d4a2:	f880 8003 	strb.w	r8, [r0, #3]
          pMsg->pPkt = pPkt;
    d4a6:	6044      	str	r4, [r0, #4]
          pMsg->handle = handle;
    d4a8:	8107      	strh	r7, [r0, #8]
          WsfMsgSend(attCb.handlerId, pMsg);
    d4aa:	f893 007c 	ldrb.w	r0, [r3, #124]	; 0x7c
}
    d4ae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
          WsfMsgSend(attCb.handlerId, pMsg);
    d4b2:	f006 b9bb 	b.w	1382c <WsfMsgSend>
    d4b6:	bf00      	nop
    d4b8:	10003fd0 	.word	0x10003fd0

0000d4bc <AttcReadReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttcReadReq(dmConnId_t connId, uint16_t handle)
{
    d4bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d4c0:	4606      	mov	r6, r0
  attcPktParam_t  *pPkt;
  uint8_t         *p;

  /* allocate packet and parameter buffer */
  if ((pPkt = attMsgAlloc(ATT_READ_REQ_BUF_LEN)) != NULL)
    d4c2:	200b      	movs	r0, #11
{
    d4c4:	460d      	mov	r5, r1
  if ((pPkt = attMsgAlloc(ATT_READ_REQ_BUF_LEN)) != NULL)
    d4c6:	f002 fb11 	bl	faec <attMsgAlloc>
    d4ca:	b320      	cbz	r0, d516 <AttcReadReq+0x5a>
    /* set length */
    pPkt->len = ATT_READ_REQ_LEN;

    /* build packet */
    p = (uint8_t *) pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, ATT_PDU_READ_REQ);
    d4cc:	230a      	movs	r3, #10
    d4ce:	7203      	strb	r3, [r0, #8]
    pPkt->len = ATT_READ_REQ_LEN;
    d4d0:	2203      	movs	r2, #3
    UINT16_TO_BSTREAM(p, handle);
    d4d2:	0a2b      	lsrs	r3, r5, #8
    pPkt->len = ATT_READ_REQ_LEN;
    d4d4:	8002      	strh	r2, [r0, #0]
    UINT16_TO_BSTREAM(p, handle);
    d4d6:	7245      	strb	r5, [r0, #9]
    d4d8:	7283      	strb	r3, [r0, #10]

    /* send message */
    attcSendMsg(connId, handle, ATTC_MSG_API_READ, pPkt, FALSE);
    d4da:	4604      	mov	r4, r0
  WsfTaskLock();
    d4dc:	f006 f9dc 	bl	13898 <WsfTaskLock>
  if ((pCcb = attcCcbByConnId(connId)) != NULL)
    d4e0:	4630      	mov	r0, r6
    d4e2:	f7ff fd59 	bl	cf98 <attcCcbByConnId>
    d4e6:	b1c0      	cbz	r0, d51a <AttcReadReq+0x5e>
    mtu = pCcb->pMainCcb->mtu;
    d4e8:	6803      	ldr	r3, [r0, #0]
    d4ea:	8b5f      	ldrh	r7, [r3, #26]
    transTimedOut = !!(pCcb->pMainCcb->control & ATT_CCB_STATUS_TX_TIMEOUT);
    d4ec:	f893 801d 	ldrb.w	r8, [r3, #29]
  WsfTaskUnlock();
    d4f0:	f006 f9dc 	bl	138ac <WsfTaskUnlock>
  if (mtu > 0)
    d4f4:	b157      	cbz	r7, d50c <AttcReadReq+0x50>
    if (!transTimedOut)
    d4f6:	f018 0f04 	tst.w	r8, #4
    d4fa:	d115      	bne.n	d528 <AttcReadReq+0x6c>
      if (dataLen <= mtu)
    d4fc:	8823      	ldrh	r3, [r4, #0]
    d4fe:	42bb      	cmp	r3, r7
    d500:	d819      	bhi.n	d536 <AttcReadReq+0x7a>
        if ((pMsg = WsfMsgAlloc(sizeof(attcApiMsg_t))) != NULL)
    d502:	200c      	movs	r0, #12
    d504:	f006 f986 	bl	13814 <WsfMsgAlloc>
    d508:	4601      	mov	r1, r0
    d50a:	b9d8      	cbnz	r0, d544 <AttcReadReq+0x88>
    WsfMsgFree(pPkt);
    d50c:	4620      	mov	r0, r4
  }
}
    d50e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    WsfMsgFree(pPkt);
    d512:	f006 b987 	b.w	13824 <WsfMsgFree>
}
    d516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  WsfTaskUnlock();
    d51a:	f006 f9c7 	bl	138ac <WsfTaskUnlock>
    WsfMsgFree(pPkt);
    d51e:	4620      	mov	r0, r4
}
    d520:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    WsfMsgFree(pPkt);
    d524:	f006 b97e 	b.w	13824 <WsfMsgFree>
      attcExecCallback(connId, msgId, handle, ATT_ERR_TIMEOUT);
    d528:	2371      	movs	r3, #113	; 0x71
    d52a:	462a      	mov	r2, r5
    d52c:	2105      	movs	r1, #5
    d52e:	4630      	mov	r0, r6
    d530:	f7ff fd62 	bl	cff8 <attcExecCallback>
    d534:	e7ea      	b.n	d50c <AttcReadReq+0x50>
        attcExecCallback(connId, msgId, handle, ATT_ERR_MTU_EXCEEDED);
    d536:	2377      	movs	r3, #119	; 0x77
    d538:	462a      	mov	r2, r5
    d53a:	2105      	movs	r1, #5
    d53c:	4630      	mov	r0, r6
    d53e:	f7ff fd5b 	bl	cff8 <attcExecCallback>
    d542:	e7e3      	b.n	d50c <AttcReadReq+0x50>
          WsfMsgSend(attCb.handlerId, pMsg);
    d544:	4b05      	ldr	r3, [pc, #20]	; (d55c <AttcReadReq+0xa0>)
          pMsg->hdr.param = connId;
    d546:	8006      	strh	r6, [r0, #0]
          pMsg->hdr.event = msgId;
    d548:	2205      	movs	r2, #5
    d54a:	8042      	strh	r2, [r0, #2]
          pMsg->pPkt = pPkt;
    d54c:	6044      	str	r4, [r0, #4]
          pMsg->handle = handle;
    d54e:	8105      	strh	r5, [r0, #8]
          WsfMsgSend(attCb.handlerId, pMsg);
    d550:	f893 007c 	ldrb.w	r0, [r3, #124]	; 0x7c
}
    d554:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          WsfMsgSend(attCb.handlerId, pMsg);
    d558:	f006 b968 	b.w	1382c <WsfMsgSend>
    d55c:	10003fd0 	.word	0x10003fd0

0000d560 <AttcWriteReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttcWriteReq(dmConnId_t connId, uint16_t handle, uint16_t valueLen, uint8_t *pValue)
{
    d560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  attcPktParam_t  *pPkt;
  uint8_t         *p;

  /* allocate packet and parameter buffer */
  if ((pPkt = attMsgAlloc(ATT_WRITE_REQ_BUF_LEN + valueLen)) != NULL)
    d564:	f102 040b 	add.w	r4, r2, #11
{
    d568:	b082      	sub	sp, #8
    d56a:	4680      	mov	r8, r0
  if ((pPkt = attMsgAlloc(ATT_WRITE_REQ_BUF_LEN + valueLen)) != NULL)
    d56c:	b2a0      	uxth	r0, r4
{
    d56e:	4615      	mov	r5, r2
    d570:	460e      	mov	r6, r1
    d572:	461f      	mov	r7, r3
  if ((pPkt = attMsgAlloc(ATT_WRITE_REQ_BUF_LEN + valueLen)) != NULL)
    d574:	f002 faba 	bl	faec <attMsgAlloc>
    d578:	b1a0      	cbz	r0, d5a4 <AttcWriteReq+0x44>
  {
    /* set length */
    pPkt->len = ATT_WRITE_REQ_LEN + valueLen;
    d57a:	1ceb      	adds	r3, r5, #3
    d57c:	8003      	strh	r3, [r0, #0]

    /* build packet */
    p = (uint8_t *) pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, ATT_PDU_WRITE_REQ);
    d57e:	2312      	movs	r3, #18
    d580:	7203      	strb	r3, [r0, #8]
    UINT16_TO_BSTREAM(p, handle);
    d582:	0a33      	lsrs	r3, r6, #8
    d584:	7283      	strb	r3, [r0, #10]
    memcpy(p, pValue, valueLen);
    d586:	4604      	mov	r4, r0
    d588:	4639      	mov	r1, r7
    UINT16_TO_BSTREAM(p, handle);
    d58a:	7246      	strb	r6, [r0, #9]
    memcpy(p, pValue, valueLen);
    d58c:	462a      	mov	r2, r5
    d58e:	300b      	adds	r0, #11
    d590:	f7fe fdb6 	bl	c100 <memcpy>

    /* send message */
    attcSendMsg(connId, handle, ATTC_MSG_API_WRITE, pPkt, FALSE);
    d594:	2300      	movs	r3, #0
    d596:	9300      	str	r3, [sp, #0]
    d598:	2209      	movs	r2, #9
    d59a:	4623      	mov	r3, r4
    d59c:	4631      	mov	r1, r6
    d59e:	4640      	mov	r0, r8
    d5a0:	f7ff fed6 	bl	d350 <attcSendMsg>
  }
}
    d5a4:	b002      	add	sp, #8
    d5a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d5aa:	bf00      	nop

0000d5ac <AttcMtuReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttcMtuReq(dmConnId_t connId, uint16_t mtu)
{
    d5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d5ae:	4606      	mov	r6, r0
  attcPktParam_t  *pPkt;
  uint8_t         *p;

  /* allocate packet and parameter buffer */
  if ((pPkt = attMsgAlloc(ATT_MTU_REQ_BUF_LEN)) != NULL)
    d5b0:	200b      	movs	r0, #11
{
    d5b2:	460d      	mov	r5, r1
  if ((pPkt = attMsgAlloc(ATT_MTU_REQ_BUF_LEN)) != NULL)
    d5b4:	f002 fa9a 	bl	faec <attMsgAlloc>
    d5b8:	b318      	cbz	r0, d602 <AttcMtuReq+0x56>
    /* set length */
    pPkt->len = ATT_MTU_REQ_LEN;

    /* build packet */
    p = (uint8_t *) pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, ATT_PDU_MTU_REQ);
    d5ba:	2302      	movs	r3, #2
    d5bc:	7203      	strb	r3, [r0, #8]
    pPkt->len = ATT_MTU_REQ_LEN;
    d5be:	2203      	movs	r2, #3
    UINT16_TO_BSTREAM(p, mtu);
    d5c0:	0a2b      	lsrs	r3, r5, #8
    pPkt->len = ATT_MTU_REQ_LEN;
    d5c2:	8002      	strh	r2, [r0, #0]
    UINT16_TO_BSTREAM(p, mtu);
    d5c4:	7245      	strb	r5, [r0, #9]
    d5c6:	7283      	strb	r3, [r0, #10]

    /* send message */
    attcSendMsg(connId, 0, ATTC_MSG_API_MTU, pPkt, FALSE);
    d5c8:	4604      	mov	r4, r0
  WsfTaskLock();
    d5ca:	f006 f965 	bl	13898 <WsfTaskLock>
  if ((pCcb = attcCcbByConnId(connId)) != NULL)
    d5ce:	4630      	mov	r0, r6
    d5d0:	f7ff fce2 	bl	cf98 <attcCcbByConnId>
    d5d4:	b1b0      	cbz	r0, d604 <AttcMtuReq+0x58>
    mtu = pCcb->pMainCcb->mtu;
    d5d6:	6803      	ldr	r3, [r0, #0]
    d5d8:	8b5f      	ldrh	r7, [r3, #26]
    transTimedOut = !!(pCcb->pMainCcb->control & ATT_CCB_STATUS_TX_TIMEOUT);
    d5da:	7f5d      	ldrb	r5, [r3, #29]
  WsfTaskUnlock();
    d5dc:	f006 f966 	bl	138ac <WsfTaskUnlock>
  if (mtu > 0)
    d5e0:	b157      	cbz	r7, d5f8 <AttcMtuReq+0x4c>
    if (!transTimedOut)
    d5e2:	f015 0504 	ands.w	r5, r5, #4
    d5e6:	d114      	bne.n	d612 <AttcMtuReq+0x66>
      if (dataLen <= mtu)
    d5e8:	8823      	ldrh	r3, [r4, #0]
    d5ea:	42bb      	cmp	r3, r7
    d5ec:	d818      	bhi.n	d620 <AttcMtuReq+0x74>
        if ((pMsg = WsfMsgAlloc(sizeof(attcApiMsg_t))) != NULL)
    d5ee:	200c      	movs	r0, #12
    d5f0:	f006 f910 	bl	13814 <WsfMsgAlloc>
    d5f4:	4601      	mov	r1, r0
    d5f6:	b9d0      	cbnz	r0, d62e <AttcMtuReq+0x82>
    WsfMsgFree(pPkt);
    d5f8:	4620      	mov	r0, r4
  }
}
    d5fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    WsfMsgFree(pPkt);
    d5fe:	f006 b911 	b.w	13824 <WsfMsgFree>
}
    d602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  WsfTaskUnlock();
    d604:	f006 f952 	bl	138ac <WsfTaskUnlock>
    WsfMsgFree(pPkt);
    d608:	4620      	mov	r0, r4
}
    d60a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    WsfMsgFree(pPkt);
    d60e:	f006 b909 	b.w	13824 <WsfMsgFree>
      attcExecCallback(connId, msgId, handle, ATT_ERR_TIMEOUT);
    d612:	2371      	movs	r3, #113	; 0x71
    d614:	2200      	movs	r2, #0
    d616:	2101      	movs	r1, #1
    d618:	4630      	mov	r0, r6
    d61a:	f7ff fced 	bl	cff8 <attcExecCallback>
    d61e:	e7eb      	b.n	d5f8 <AttcMtuReq+0x4c>
        attcExecCallback(connId, msgId, handle, ATT_ERR_MTU_EXCEEDED);
    d620:	2377      	movs	r3, #119	; 0x77
    d622:	462a      	mov	r2, r5
    d624:	2101      	movs	r1, #1
    d626:	4630      	mov	r0, r6
    d628:	f7ff fce6 	bl	cff8 <attcExecCallback>
    d62c:	e7e4      	b.n	d5f8 <AttcMtuReq+0x4c>
          WsfMsgSend(attCb.handlerId, pMsg);
    d62e:	4b06      	ldr	r3, [pc, #24]	; (d648 <AttcMtuReq+0x9c>)
          pMsg->hdr.param = connId;
    d630:	8006      	strh	r6, [r0, #0]
          pMsg->hdr.event = msgId;
    d632:	2201      	movs	r2, #1
    d634:	8042      	strh	r2, [r0, #2]
          pMsg->pPkt = pPkt;
    d636:	6044      	str	r4, [r0, #4]
          pMsg->handle = handle;
    d638:	8105      	strh	r5, [r0, #8]
          WsfMsgSend(attCb.handlerId, pMsg);
    d63a:	f893 007c 	ldrb.w	r0, [r3, #124]	; 0x7c
}
    d63e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
          WsfMsgSend(attCb.handlerId, pMsg);
    d642:	f006 b8f3 	b.w	1382c <WsfMsgSend>
    d646:	bf00      	nop
    d648:	10003fd0 	.word	0x10003fd0

0000d64c <AttcIndConfirm>:
void AttcIndConfirm(dmConnId_t connId)
{
  attcCcb_t   *pCcb;
  uint8_t     *pPkt;

  pCcb = attcCcbByHandle(connId - 1);
    d64c:	3801      	subs	r0, #1
{
    d64e:	b570      	push	{r4, r5, r6, lr}
  pCcb = attcCcbByHandle(connId - 1);
    d650:	b280      	uxth	r0, r0
    d652:	f7ff fcb9 	bl	cfc8 <attcCcbByHandle>

  /* If confirmation is pending */
  if (pCcb && pCcb->cnfPending && !pCcb->flowDisabled)
    d656:	b130      	cbz	r0, d666 <AttcIndConfirm+0x1a>
    d658:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
    d65c:	4604      	mov	r4, r0
    d65e:	b113      	cbz	r3, d666 <AttcIndConfirm+0x1a>
    d660:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
    d664:	b105      	cbz	r5, d668 <AttcIndConfirm+0x1c>

      *(pPkt + L2C_PAYLOAD_START) = ATT_PDU_VALUE_CNF;
      L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, ATT_VALUE_CNF_LEN, pPkt);
    }
  }
}
    d666:	bd70      	pop	{r4, r5, r6, pc}
    if ((pPkt = attMsgAlloc(ATT_VALUE_CNF_LEN + L2C_PAYLOAD_START)) != NULL)
    d668:	2009      	movs	r0, #9
    d66a:	f002 fa3f 	bl	faec <attMsgAlloc>
    d66e:	2800      	cmp	r0, #0
    d670:	d0f9      	beq.n	d666 <AttcIndConfirm+0x1a>
      *(pPkt + L2C_PAYLOAD_START) = ATT_PDU_VALUE_CNF;
    d672:	231e      	movs	r3, #30
      pCcb->cnfPending = FALSE;
    d674:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
      *(pPkt + L2C_PAYLOAD_START) = ATT_PDU_VALUE_CNF;
    d678:	7203      	strb	r3, [r0, #8]
      L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, ATT_VALUE_CNF_LEN, pPkt);
    d67a:	6822      	ldr	r2, [r4, #0]
    d67c:	4603      	mov	r3, r0
    d67e:	8b11      	ldrh	r1, [r2, #24]
}
    d680:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, ATT_VALUE_CNF_LEN, pPkt);
    d684:	2201      	movs	r2, #1
    d686:	2004      	movs	r0, #4
    d688:	f003 b8b2 	b.w	107f0 <L2cDataReq>

0000d68c <attcProcFindByTypeRsp>:
  uint16_t  startHandle;
  uint16_t  endHandle;
  uint16_t  nextHandle;

  p = pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;
  pEnd = pPacket + L2C_PAYLOAD_START + len;
    d68c:	3108      	adds	r1, #8
{
    d68e:	b5f0      	push	{r4, r5, r6, r7, lr}
  p = pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;
    d690:	f102 0c09 	add.w	ip, r2, #9

  /* get and verify all handles */
  nextHandle = pCcb->outReqParams.h.startHandle;
    d694:	8bc4      	ldrh	r4, [r0, #30]
  pEnd = pPacket + L2C_PAYLOAD_START + len;
    d696:	eb02 0e01 	add.w	lr, r2, r1
      pEvt->hdr.status = ATT_ERR_INVALID_RSP;
      break;
    }

    /* set next expected handle, with special case for max handle */
    if (endHandle == ATT_HANDLE_MAX)
    d69a:	f64f 77ff 	movw	r7, #65535	; 0xffff
  while (p < pEnd)
    d69e:	e01f      	b.n	d6e0 <attcProcFindByTypeRsp+0x54>
    BSTREAM_TO_UINT16(startHandle, p);
    d6a0:	f89c 6001 	ldrb.w	r6, [ip, #1]
    d6a4:	f89c 2000 	ldrb.w	r2, [ip]
    BSTREAM_TO_UINT16(endHandle, p);
    d6a8:	f89c 5003 	ldrb.w	r5, [ip, #3]
    d6ac:	f89c 1002 	ldrb.w	r1, [ip, #2]
    BSTREAM_TO_UINT16(startHandle, p);
    d6b0:	eb02 2206 	add.w	r2, r2, r6, lsl #8
    BSTREAM_TO_UINT16(endHandle, p);
    d6b4:	eb01 2105 	add.w	r1, r1, r5, lsl #8
    d6b8:	b289      	uxth	r1, r1
    BSTREAM_TO_UINT16(startHandle, p);
    d6ba:	b292      	uxth	r2, r2
    if ((startHandle > endHandle) || (startHandle < nextHandle) ||
    d6bc:	428a      	cmp	r2, r1
    d6be:	f10c 0c04 	add.w	ip, ip, #4
    {
      nextHandle = 0;
    }
    else
    {
      nextHandle = endHandle + 1;
    d6c2:	f101 0601 	add.w	r6, r1, #1
    if ((startHandle > endHandle) || (startHandle < nextHandle) ||
    d6c6:	d813      	bhi.n	d6f0 <attcProcFindByTypeRsp+0x64>
    d6c8:	4294      	cmp	r4, r2
    d6ca:	d811      	bhi.n	d6f0 <attcProcFindByTypeRsp+0x64>
    d6cc:	8c05      	ldrh	r5, [r0, #32]
    d6ce:	4295      	cmp	r5, r2
    d6d0:	d30e      	bcc.n	d6f0 <attcProcFindByTypeRsp+0x64>
        (startHandle > pCcb->outReqParams.h.endHandle) || (nextHandle == 0))
    d6d2:	b16c      	cbz	r4, d6f0 <attcProcFindByTypeRsp+0x64>
    if (endHandle == ATT_HANDLE_MAX)
    d6d4:	42b9      	cmp	r1, r7
      nextHandle = endHandle + 1;
    d6d6:	bf14      	ite	ne
    d6d8:	b2b4      	uxthne	r4, r6
      nextHandle = 0;
    d6da:	2400      	moveq	r4, #0
    }

    /* check for truncated response */
    if (p > pEnd)
    d6dc:	45e6      	cmp	lr, ip
    d6de:	d307      	bcc.n	d6f0 <attcProcFindByTypeRsp+0x64>
  while (p < pEnd)
    d6e0:	45f4      	cmp	ip, lr
    d6e2:	d3dd      	bcc.n	d6a0 <attcProcFindByTypeRsp+0x14>
      break;
    }
  }

  /* if response was correct */
  if (pEvt->hdr.status == ATT_SUCCESS)
    d6e4:	78db      	ldrb	r3, [r3, #3]
    d6e6:	b913      	cbnz	r3, d6ee <attcProcFindByTypeRsp+0x62>
  {
    /* if continuing */
    if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
    d6e8:	7cc3      	ldrb	r3, [r0, #19]
    d6ea:	2b01      	cmp	r3, #1
    d6ec:	d003      	beq.n	d6f6 <attcProcFindByTypeRsp+0x6a>
        pCcb->outReqParams.h.startHandle = nextHandle;
        pCcb->outReq.handle = nextHandle;
      }
    }
  }
}
    d6ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pEvt->hdr.status = ATT_ERR_INVALID_RSP;
    d6f0:	2273      	movs	r2, #115	; 0x73
    d6f2:	70da      	strb	r2, [r3, #3]
}
    d6f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (nextHandle == 0 || nextHandle > pCcb->outReqParams.h.endHandle)
    d6f6:	b114      	cbz	r4, d6fe <attcProcFindByTypeRsp+0x72>
    d6f8:	8c03      	ldrh	r3, [r0, #32]
    d6fa:	42a3      	cmp	r3, r4
    d6fc:	d202      	bcs.n	d704 <attcProcFindByTypeRsp+0x78>
        pCcb->outReq.hdr.status = ATTC_NOT_CONTINUING;
    d6fe:	2300      	movs	r3, #0
    d700:	74c3      	strb	r3, [r0, #19]
}
    d702:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pCcb->outReqParams.h.startHandle = nextHandle;
    d704:	83c4      	strh	r4, [r0, #30]
        pCcb->outReq.handle = nextHandle;
    d706:	8304      	strh	r4, [r0, #24]
}
    d708:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d70a:	bf00      	nop

0000d70c <attcProcReadLongRsp>:
 */
/*************************************************************************************************/
void attcProcReadLongRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
  /* if continuing */
  if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
    d70c:	7cc2      	ldrb	r2, [r0, #19]
    d70e:	2a01      	cmp	r2, #1
    d710:	d000      	beq.n	d714 <attcProcReadLongRsp+0x8>
    else
    {
      pCcb->outReqParams.o.offset += pEvt->valueLen;
    }
  }
}
    d712:	4770      	bx	lr
    if (len < pCcb->pMainCcb->mtu)
    d714:	6802      	ldr	r2, [r0, #0]
    d716:	8b52      	ldrh	r2, [r2, #26]
    d718:	428a      	cmp	r2, r1
    d71a:	d902      	bls.n	d722 <attcProcReadLongRsp+0x16>
      pCcb->outReq.hdr.status = ATTC_NOT_CONTINUING;
    d71c:	2300      	movs	r3, #0
    d71e:	74c3      	strb	r3, [r0, #19]
    d720:	4770      	bx	lr
      pCcb->outReqParams.o.offset += pEvt->valueLen;
    d722:	8bc2      	ldrh	r2, [r0, #30]
    d724:	891b      	ldrh	r3, [r3, #8]
    d726:	4413      	add	r3, r2
    d728:	83c3      	strh	r3, [r0, #30]
}
    d72a:	4770      	bx	lr

0000d72c <AttcFindByTypeValueReq>:
 *  \return None.
 */
/*************************************************************************************************/
void AttcFindByTypeValueReq(dmConnId_t connId, uint16_t startHandle, uint16_t endHandle,
                            uint16_t uuid16, uint16_t valueLen, uint8_t *pValue, bool_t continuing)
{
    d72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d730:	b081      	sub	sp, #4
    d732:	4607      	mov	r7, r0
    d734:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
    d738:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    d73c:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
  attcPktParam_t  *pPkt;
  uint8_t         *p;

  /* allocate packet and parameter buffer */
  if ((pPkt = attMsgAlloc(ATT_FIND_TYPE_REQ_BUF_LEN + valueLen)) != NULL)
    d740:	f109 000f 	add.w	r0, r9, #15
    d744:	b280      	uxth	r0, r0
{
    d746:	460e      	mov	r6, r1
    d748:	4690      	mov	r8, r2
    d74a:	461d      	mov	r5, r3
  if ((pPkt = attMsgAlloc(ATT_FIND_TYPE_REQ_BUF_LEN + valueLen)) != NULL)
    d74c:	f002 f9ce 	bl	faec <attMsgAlloc>
    d750:	b1d8      	cbz	r0, d78a <AttcFindByTypeValueReq+0x5e>
  {
    /* set parameters */
    pPkt->len = ATT_FIND_TYPE_REQ_LEN + valueLen;
    d752:	f109 0307 	add.w	r3, r9, #7
    /* build partial packet */
    p = (uint8_t *) pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, ATT_PDU_FIND_TYPE_REQ);
    /* skip start and end handle fields */
    p += (2 * sizeof(uint16_t));
    UINT16_TO_BSTREAM(p, uuid16);
    d756:	7345      	strb	r5, [r0, #13]
    pPkt->len = ATT_FIND_TYPE_REQ_LEN + valueLen;
    d758:	8003      	strh	r3, [r0, #0]
    UINT16_TO_BSTREAM(p, uuid16);
    d75a:	0a2d      	lsrs	r5, r5, #8
    UINT8_TO_BSTREAM(p, ATT_PDU_FIND_TYPE_REQ);
    d75c:	2306      	movs	r3, #6
    d75e:	4604      	mov	r4, r0
    pPkt->h.endHandle = endHandle;
    d760:	f8a0 8004 	strh.w	r8, [r0, #4]
    memcpy(p, pValue, valueLen);
    d764:	4659      	mov	r1, fp
    pPkt->h.startHandle = startHandle;
    d766:	8046      	strh	r6, [r0, #2]
    UINT16_TO_BSTREAM(p, uuid16);
    d768:	7385      	strb	r5, [r0, #14]
    memcpy(p, pValue, valueLen);
    d76a:	464a      	mov	r2, r9
    UINT8_TO_BSTREAM(p, ATT_PDU_FIND_TYPE_REQ);
    d76c:	7203      	strb	r3, [r0, #8]
    memcpy(p, pValue, valueLen);
    d76e:	300f      	adds	r0, #15
    d770:	f7fe fcc6 	bl	c100 <memcpy>

    /* send message */
    attcSendMsg(connId, startHandle, ATTC_MSG_API_FIND_BY_TYPE_VALUE, pPkt, continuing);
    d774:	4623      	mov	r3, r4
    d776:	2203      	movs	r2, #3
    d778:	4631      	mov	r1, r6
    d77a:	4638      	mov	r0, r7
    d77c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  }
}
    d780:	b001      	add	sp, #4
    d782:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    attcSendMsg(connId, startHandle, ATTC_MSG_API_FIND_BY_TYPE_VALUE, pPkt, continuing);
    d786:	f7ff bde3 	b.w	d350 <attcSendMsg>
}
    d78a:	b001      	add	sp, #4
    d78c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d790 <AttcReadByTypeReq>:
 *  \return None.
 */
/*************************************************************************************************/
void AttcReadByTypeReq(dmConnId_t connId, uint16_t startHandle, uint16_t endHandle,
                       uint8_t uuidLen, uint8_t *pUuid, bool_t continuing)
{
    d790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d794:	4607      	mov	r7, r0
  attcPktParam_t  *pPkt;
  uint8_t         *p;

  /* allocate packet and parameter buffer */
  if ((pPkt = attMsgAlloc(ATT_READ_TYPE_REQ_BUF_LEN + uuidLen)) != NULL)
    d796:	f103 000d 	add.w	r0, r3, #13
{
    d79a:	f8dd a020 	ldr.w	sl, [sp, #32]
    d79e:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
    d7a2:	461d      	mov	r5, r3
    d7a4:	460e      	mov	r6, r1
    d7a6:	4690      	mov	r8, r2
  if ((pPkt = attMsgAlloc(ATT_READ_TYPE_REQ_BUF_LEN + uuidLen)) != NULL)
    d7a8:	f002 f9a0 	bl	faec <attMsgAlloc>
    d7ac:	b1b8      	cbz	r0, d7de <AttcReadByTypeReq+0x4e>
  {
    /* set parameters */
    pPkt->len = ATT_READ_TYPE_REQ_LEN + uuidLen;
    d7ae:	b2ab      	uxth	r3, r5
    d7b0:	3305      	adds	r3, #5
    d7b2:	8003      	strh	r3, [r0, #0]
    pPkt->h.startHandle = startHandle;
    pPkt->h.endHandle = endHandle;

    /* build partial packet */
    p = (uint8_t *) pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, ATT_PDU_READ_TYPE_REQ);
    d7b4:	2308      	movs	r3, #8
    d7b6:	4604      	mov	r4, r0
    pPkt->h.endHandle = endHandle;
    d7b8:	f8a0 8004 	strh.w	r8, [r0, #4]
    /* skip start and end handle fields */
    p += (2 * sizeof(uint16_t));
    memcpy(p, pUuid, uuidLen);
    d7bc:	462a      	mov	r2, r5
    d7be:	4651      	mov	r1, sl
    pPkt->h.startHandle = startHandle;
    d7c0:	8046      	strh	r6, [r0, #2]
    UINT8_TO_BSTREAM(p, ATT_PDU_READ_TYPE_REQ);
    d7c2:	7203      	strb	r3, [r0, #8]
    memcpy(p, pUuid, uuidLen);
    d7c4:	300d      	adds	r0, #13
    d7c6:	f7fe fc9b 	bl	c100 <memcpy>

    /* send message */
    attcSendMsg(connId, startHandle, ATTC_MSG_API_READ_BY_TYPE, pPkt, continuing);
    d7ca:	f8cd 9020 	str.w	r9, [sp, #32]
    d7ce:	4623      	mov	r3, r4
    d7d0:	4631      	mov	r1, r6
    d7d2:	4638      	mov	r0, r7
    d7d4:	2204      	movs	r2, #4
  }
}
    d7d6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    attcSendMsg(connId, startHandle, ATTC_MSG_API_READ_BY_TYPE, pPkt, continuing);
    d7da:	f7ff bdb9 	b.w	d350 <attcSendMsg>
}
    d7de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d7e2:	bf00      	nop

0000d7e4 <attcProcPrepWriteRsp>:
 */
/*************************************************************************************************/
void attcProcPrepWriteRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
  /* if continuing */
  if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
    d7e4:	7cc2      	ldrb	r2, [r0, #19]
    d7e6:	2a01      	cmp	r2, #1
    d7e8:	d006      	beq.n	d7f8 <attcProcPrepWriteRsp+0x14>
      pCcb->outReq.hdr.status = ATTC_NOT_CONTINUING;
    }
  }

  /* adjust attribute value and its length (adjusted by ATT header length already) */
  pEvt->pValue += (ATT_PREP_WRITE_RSP_LEN - ATT_HDR_LEN);
    d7ea:	6859      	ldr	r1, [r3, #4]
  pEvt->valueLen -= (ATT_PREP_WRITE_RSP_LEN - ATT_HDR_LEN);
    d7ec:	891a      	ldrh	r2, [r3, #8]
  pEvt->pValue += (ATT_PREP_WRITE_RSP_LEN - ATT_HDR_LEN);
    d7ee:	3104      	adds	r1, #4
  pEvt->valueLen -= (ATT_PREP_WRITE_RSP_LEN - ATT_HDR_LEN);
    d7f0:	3a04      	subs	r2, #4
  pEvt->pValue += (ATT_PREP_WRITE_RSP_LEN - ATT_HDR_LEN);
    d7f2:	6059      	str	r1, [r3, #4]
  pEvt->valueLen -= (ATT_PREP_WRITE_RSP_LEN - ATT_HDR_LEN);
    d7f4:	811a      	strh	r2, [r3, #8]
}
    d7f6:	4770      	bx	lr
    if (pCcb->outReqParams.w.len == 0)
    d7f8:	8b82      	ldrh	r2, [r0, #28]
    d7fa:	2a00      	cmp	r2, #0
    d7fc:	d1f5      	bne.n	d7ea <attcProcPrepWriteRsp+0x6>
      pCcb->outReq.hdr.status = ATTC_NOT_CONTINUING;
    d7fe:	74c2      	strb	r2, [r0, #19]
    d800:	e7f3      	b.n	d7ea <attcProcPrepWriteRsp+0x6>
    d802:	bf00      	nop

0000d804 <AttcWriteCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttcWriteCmd(dmConnId_t connId, uint16_t handle, uint16_t valueLen, uint8_t *pValue)
{
    d804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  attcPktParam_t  *pPkt;
  uint8_t         *p;

  /* allocate packet and parameter buffer */
  if ((pPkt = attMsgAlloc(ATT_WRITE_CMD_BUF_LEN + valueLen)) != NULL)
    d808:	f102 040b 	add.w	r4, r2, #11
{
    d80c:	b082      	sub	sp, #8
    d80e:	4680      	mov	r8, r0
  if ((pPkt = attMsgAlloc(ATT_WRITE_CMD_BUF_LEN + valueLen)) != NULL)
    d810:	b2a0      	uxth	r0, r4
{
    d812:	4615      	mov	r5, r2
    d814:	460e      	mov	r6, r1
    d816:	461f      	mov	r7, r3
  if ((pPkt = attMsgAlloc(ATT_WRITE_CMD_BUF_LEN + valueLen)) != NULL)
    d818:	f002 f968 	bl	faec <attMsgAlloc>
    d81c:	b1a0      	cbz	r0, d848 <AttcWriteCmd+0x44>
  {
    /* set length */
    pPkt->len = ATT_WRITE_CMD_LEN + valueLen;
    d81e:	1ceb      	adds	r3, r5, #3
    d820:	8003      	strh	r3, [r0, #0]

    /* build packet */
    p = (uint8_t *) pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, ATT_PDU_WRITE_CMD);
    d822:	2352      	movs	r3, #82	; 0x52
    d824:	7203      	strb	r3, [r0, #8]
    UINT16_TO_BSTREAM(p, handle);
    d826:	0a33      	lsrs	r3, r6, #8
    d828:	7283      	strb	r3, [r0, #10]
    memcpy(p, pValue, valueLen);
    d82a:	4604      	mov	r4, r0
    d82c:	4639      	mov	r1, r7
    UINT16_TO_BSTREAM(p, handle);
    d82e:	7246      	strb	r6, [r0, #9]
    memcpy(p, pValue, valueLen);
    d830:	462a      	mov	r2, r5
    d832:	300b      	adds	r0, #11
    d834:	f7fe fc64 	bl	c100 <memcpy>

    /* send message */
    attcSendMsg(connId, handle, ATTC_MSG_API_WRITE_CMD, pPkt, FALSE);
    d838:	2300      	movs	r3, #0
    d83a:	9300      	str	r3, [sp, #0]
    d83c:	220a      	movs	r2, #10
    d83e:	4623      	mov	r3, r4
    d840:	4631      	mov	r1, r6
    d842:	4640      	mov	r0, r8
    d844:	f7ff fd84 	bl	d350 <attcSendMsg>
  }
}
    d848:	b002      	add	sp, #8
    d84a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d84e:	bf00      	nop

0000d850 <attsCccMainCback>:
 *
 *  \return ATT_SUCCESS if successful otherwise error.
 */
/*************************************************************************************************/
static uint8_t attsCccMainCback(dmConnId_t connId, uint8_t method, uint16_t handle, uint8_t *pValue)
{
    d850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d854:	4606      	mov	r6, r0
    d856:	460c      	mov	r4, r1
  ATT_TRACE_INFO2("attsCccMainCback connId=%d handle=%d", connId, handle);
    d858:	483d      	ldr	r0, [pc, #244]	; (d950 <attsCccMainCback+0x100>)
  for (pSet = attsCccCb.pSet, i = 0; i < attsCccCb.setLen; i++, pSet++)
    d85a:	f8df 80f8 	ldr.w	r8, [pc, #248]	; d954 <attsCccMainCback+0x104>
{
    d85e:	b084      	sub	sp, #16
  ATT_TRACE_INFO2("attsCccMainCback connId=%d handle=%d", connId, handle);
    d860:	4631      	mov	r1, r6
{
    d862:	4615      	mov	r5, r2
    d864:	461f      	mov	r7, r3
  ATT_TRACE_INFO2("attsCccMainCback connId=%d handle=%d", connId, handle);
    d866:	f006 fb55 	bl	13f14 <WsfTrace>

  if (method == ATT_METHOD_READ)
    d86a:	2c05      	cmp	r4, #5
    d86c:	d040      	beq.n	d8f0 <attsCccMainCback+0xa0>
  for (pSet = attsCccCb.pSet, i = 0; i < attsCccCb.setLen; i++, pSet++)
    d86e:	f898 3014 	ldrb.w	r3, [r8, #20]
    d872:	f8d8 400c 	ldr.w	r4, [r8, #12]
    d876:	2b00      	cmp	r3, #0
    d878:	d036      	beq.n	d8e8 <attsCccMainCback+0x98>
    d87a:	f04f 0c00 	mov.w	ip, #0
    d87e:	e005      	b.n	d88c <attsCccMainCback+0x3c>
    d880:	fa5f fc8e 	uxtb.w	ip, lr
    d884:	459c      	cmp	ip, r3
    d886:	f104 0406 	add.w	r4, r4, #6
    d88a:	d02d      	beq.n	d8e8 <attsCccMainCback+0x98>
    if (pSet->handle == handle)
    d88c:	8822      	ldrh	r2, [r4, #0]
    d88e:	42aa      	cmp	r2, r5
  for (pSet = attsCccCb.pSet, i = 0; i < attsCccCb.setLen; i++, pSet++)
    d890:	f10c 0e01 	add.w	lr, ip, #1
    if (pSet->handle == handle)
    d894:	d1f4      	bne.n	d880 <attsCccMainCback+0x30>
  BYTES_TO_UINT16(value, pValue);
    d896:	787a      	ldrb	r2, [r7, #1]
    d898:	783b      	ldrb	r3, [r7, #0]
    d89a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    d89e:	b29b      	uxth	r3, r3
  if (((value != 0) && (value != ATT_CLIENT_CFG_NOTIFY) && (value != ATT_CLIENT_CFG_INDICATE)) ||
    d8a0:	2b02      	cmp	r3, #2
    d8a2:	d849      	bhi.n	d938 <attsCccMainCback+0xe8>
    d8a4:	b113      	cbz	r3, d8ac <attsCccMainCback+0x5c>
      ((value != 0) && ((value & pSet->valueRange) == 0)))
    d8a6:	8862      	ldrh	r2, [r4, #2]
    d8a8:	4213      	tst	r3, r2
    d8aa:	d045      	beq.n	d938 <attsCccMainCback+0xe8>
  return attsCccCb.pCccTbl[connId - 1];
    d8ac:	1e72      	subs	r2, r6, #1
    d8ae:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
  if ((pTbl = attsCccGetTbl(connId)) != NULL)
    d8b2:	2a00      	cmp	r2, #0
    d8b4:	d044      	beq.n	d940 <attsCccMainCback+0xf0>
    prevValue = pTbl[i];
    d8b6:	f832 101c 	ldrh.w	r1, [r2, ip, lsl #1]
    pTbl[i] = value;
    d8ba:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
    if (prevValue != value)
    d8be:	428b      	cmp	r3, r1
    d8c0:	d042      	beq.n	d948 <attsCccMainCback+0xf8>
  evt.value = value;
    d8c2:	f8ad 300a 	strh.w	r3, [sp, #10]
  evt.hdr.event = ATTS_CCC_STATE_IND;
    d8c6:	2310      	movs	r3, #16
  (*attsCccCb.cback)(&evt);
    d8c8:	a801      	add	r0, sp, #4
    d8ca:	f8d8 2010 	ldr.w	r2, [r8, #16]
  evt.hdr.param = connId;
    d8ce:	f8ad 6004 	strh.w	r6, [sp, #4]
  evt.idx = idx;
    d8d2:	f88d c00c 	strb.w	ip, [sp, #12]
  evt.handle = handle;
    d8d6:	f8ad 5008 	strh.w	r5, [sp, #8]
  evt.hdr.event = ATTS_CCC_STATE_IND;
    d8da:	f88d 3006 	strb.w	r3, [sp, #6]
  (*attsCccCb.cback)(&evt);
    d8de:	4790      	blx	r2
    return ATT_SUCCESS;
    d8e0:	2000      	movs	r0, #0
  }
  else
  {
    return attsCccWriteValue(connId, handle, pValue);
  }
}
    d8e2:	b004      	add	sp, #16
    d8e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ATT_ERR_NOT_FOUND;
    d8e8:	200a      	movs	r0, #10
}
    d8ea:	b004      	add	sp, #16
    d8ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (pSet = attsCccCb.pSet, i = 0; i < attsCccCb.setLen; i++, pSet++)
    d8f0:	f898 4014 	ldrb.w	r4, [r8, #20]
    d8f4:	f8d8 200c 	ldr.w	r2, [r8, #12]
    d8f8:	2c00      	cmp	r4, #0
    d8fa:	d0f5      	beq.n	d8e8 <attsCccMainCback+0x98>
    d8fc:	3206      	adds	r2, #6
    d8fe:	2300      	movs	r3, #0
    d900:	e002      	b.n	d908 <attsCccMainCback+0xb8>
    d902:	b2c3      	uxtb	r3, r0
    d904:	42a3      	cmp	r3, r4
    d906:	d0ef      	beq.n	d8e8 <attsCccMainCback+0x98>
    if (pSet->handle == handle)
    d908:	f832 1c06 	ldrh.w	r1, [r2, #-6]
    d90c:	42a9      	cmp	r1, r5
  for (pSet = attsCccCb.pSet, i = 0; i < attsCccCb.setLen; i++, pSet++)
    d90e:	f103 0001 	add.w	r0, r3, #1
    d912:	f102 0206 	add.w	r2, r2, #6
    if (pSet->handle == handle)
    d916:	d1f4      	bne.n	d902 <attsCccMainCback+0xb2>
  return attsCccCb.pCccTbl[connId - 1];
    d918:	3e01      	subs	r6, #1
    d91a:	f858 2026 	ldr.w	r2, [r8, r6, lsl #2]
  if ((pTbl = attsCccGetTbl(connId)) != NULL)
    d91e:	b17a      	cbz	r2, d940 <attsCccMainCback+0xf0>
    UINT16_TO_BSTREAM(pValue, pTbl[i]);
    d920:	b21b      	sxth	r3, r3
    return ATT_SUCCESS;
    d922:	2000      	movs	r0, #0
    UINT16_TO_BSTREAM(pValue, pTbl[i]);
    d924:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    d928:	7039      	strb	r1, [r7, #0]
    d92a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    d92e:	0a1b      	lsrs	r3, r3, #8
    d930:	707b      	strb	r3, [r7, #1]
}
    d932:	b004      	add	sp, #16
    d934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ATT_ERR_VALUE_RANGE;
    d938:	2080      	movs	r0, #128	; 0x80
}
    d93a:	b004      	add	sp, #16
    d93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ATT_ERR_RESOURCES;
    d940:	2011      	movs	r0, #17
}
    d942:	b004      	add	sp, #16
    d944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ATT_SUCCESS;
    d948:	2000      	movs	r0, #0
}
    d94a:	b004      	add	sp, #16
    d94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d950:	00023d4c 	.word	0x00023d4c
    d954:	10003f00 	.word	0x10003f00

0000d958 <AttsCccRegister>:
 *  \return None.
 */
/*************************************************************************************************/
void AttsCccRegister(uint8_t setLen, attsCccSet_t *pSet, attsCccCback_t cback)
{
  attsCccCb.setLen = setLen;
    d958:	4b05      	ldr	r3, [pc, #20]	; (d970 <AttsCccRegister+0x18>)
{
    d95a:	b410      	push	{r4}
  attsCccCb.pSet = pSet;
  attsCccCb.cback = cback;

  attsCb.cccCback = attsCccMainCback;
    d95c:	4c05      	ldr	r4, [pc, #20]	; (d974 <AttsCccRegister+0x1c>)
  attsCccCb.setLen = setLen;
    d95e:	7518      	strb	r0, [r3, #20]
  attsCccCb.pSet = pSet;
    d960:	60d9      	str	r1, [r3, #12]
  attsCb.cccCback = attsCccMainCback;
    d962:	4905      	ldr	r1, [pc, #20]	; (d978 <AttsCccRegister+0x20>)
    d964:	6161      	str	r1, [r4, #20]
  attsCccCb.cback = cback;
    d966:	611a      	str	r2, [r3, #16]
}
    d968:	f85d 4b04 	ldr.w	r4, [sp], #4
    d96c:	4770      	bx	lr
    d96e:	bf00      	nop
    d970:	10003f00 	.word	0x10003f00
    d974:	10003f7c 	.word	0x10003f7c
    d978:	0000d851 	.word	0x0000d851

0000d97c <AttsCccInitTable>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsCccInitTable(dmConnId_t connId, uint16_t *pCccTbl)
{
    d97c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d980:	4607      	mov	r7, r0
  if (attsCccCb.pCccTbl[connId - 1] == NULL)
    d982:	1e44      	subs	r4, r0, #1
    d984:	f8df a0a0 	ldr.w	sl, [pc, #160]	; da28 <AttsCccInitTable+0xac>
  uint8_t   i;
  uint16_t  *pTbl;

  ATT_TRACE_INFO1("AttsCccInitTable connId=%d", connId);
    d988:	4826      	ldr	r0, [pc, #152]	; (da24 <AttsCccInitTable+0xa8>)
{
    d98a:	b084      	sub	sp, #16
    d98c:	460d      	mov	r5, r1
  ATT_TRACE_INFO1("AttsCccInitTable connId=%d", connId);
    d98e:	4639      	mov	r1, r7
    d990:	f006 fac0 	bl	13f14 <WsfTrace>
  if (attsCccCb.pCccTbl[connId - 1] == NULL)
    d994:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
    d998:	b370      	cbz	r0, d9f8 <AttsCccInitTable+0x7c>

  if ((pTbl = attsCccAllocTbl(connId)) != NULL)
  {
    /* if initializer table is passed in */
    if (pCccTbl != NULL)
    d99a:	2d00      	cmp	r5, #0
    d99c:	d038      	beq.n	da10 <AttsCccInitTable+0x94>
    {
      /* initialize table */
      for (i = 0; i < attsCccCb.setLen; i++, pCccTbl++, pTbl++)
    d99e:	f89a 1014 	ldrb.w	r1, [sl, #20]
    d9a2:	b1f9      	cbz	r1, d9e4 <AttsCccInitTable+0x68>
    d9a4:	2400      	movs	r4, #0
    d9a6:	3d02      	subs	r5, #2
    d9a8:	1e86      	subs	r6, r0, #2
    d9aa:	4622      	mov	r2, r4
  evt.hdr.event = ATTS_CCC_STATE_IND;
    d9ac:	f04f 0910 	mov.w	r9, #16
  evt.handle = handle;
    d9b0:	46a0      	mov	r8, r4
      {
        /* copy value */
        *pTbl = *pCccTbl;
    d9b2:	f835 3f02 	ldrh.w	r3, [r5, #2]!
    d9b6:	f826 3f02 	strh.w	r3, [r6, #2]!
  (*attsCccCb.cback)(&evt);
    d9ba:	a801      	add	r0, sp, #4

        /* execute callback for each nonzero entry in table */
        if (*pCccTbl != 0)
    d9bc:	b1ab      	cbz	r3, d9ea <AttsCccInitTable+0x6e>
  evt.idx = idx;
    d9be:	f88d 200c 	strb.w	r2, [sp, #12]
  evt.hdr.event = ATTS_CCC_STATE_IND;
    d9c2:	f88d 9006 	strb.w	r9, [sp, #6]
  (*attsCccCb.cback)(&evt);
    d9c6:	f8da 2010 	ldr.w	r2, [sl, #16]
  evt.hdr.param = connId;
    d9ca:	f8ad 7004 	strh.w	r7, [sp, #4]
  evt.handle = handle;
    d9ce:	f8ad 8008 	strh.w	r8, [sp, #8]
  evt.value = value;
    d9d2:	f8ad 300a 	strh.w	r3, [sp, #10]
  (*attsCccCb.cback)(&evt);
    d9d6:	4790      	blx	r2
      for (i = 0; i < attsCccCb.setLen; i++, pCccTbl++, pTbl++)
    d9d8:	3401      	adds	r4, #1
    d9da:	f89a 1014 	ldrb.w	r1, [sl, #20]
    d9de:	b2e2      	uxtb	r2, r4
    d9e0:	4291      	cmp	r1, r2
    d9e2:	d8e6      	bhi.n	d9b2 <AttsCccInitTable+0x36>
    {
      /* initialize table to zero */
      memset(pTbl, 0, (sizeof(uint16_t) * attsCccCb.setLen));
    }
  }
}
    d9e4:	b004      	add	sp, #16
    d9e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      for (i = 0; i < attsCccCb.setLen; i++, pCccTbl++, pTbl++)
    d9ea:	3401      	adds	r4, #1
    d9ec:	b2e2      	uxtb	r2, r4
    d9ee:	4291      	cmp	r1, r2
    d9f0:	d8df      	bhi.n	d9b2 <AttsCccInitTable+0x36>
}
    d9f2:	b004      	add	sp, #16
    d9f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    attsCccCb.pCccTbl[connId - 1] = WsfBufAlloc(attsCccCb.setLen * sizeof(uint16_t));
    d9f8:	f89a 0014 	ldrb.w	r0, [sl, #20]
    d9fc:	0040      	lsls	r0, r0, #1
    d9fe:	f005 fea9 	bl	13754 <WsfBufAlloc>
    da02:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
  if ((pTbl = attsCccAllocTbl(connId)) != NULL)
    da06:	2800      	cmp	r0, #0
    da08:	d1c7      	bne.n	d99a <AttsCccInitTable+0x1e>
}
    da0a:	b004      	add	sp, #16
    da0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      memset(pTbl, 0, (sizeof(uint16_t) * attsCccCb.setLen));
    da10:	f89a 2014 	ldrb.w	r2, [sl, #20]
    da14:	4629      	mov	r1, r5
    da16:	0052      	lsls	r2, r2, #1
}
    da18:	b004      	add	sp, #16
    da1a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      memset(pTbl, 0, (sizeof(uint16_t) * attsCccCb.setLen));
    da1e:	f013 bd15 	b.w	2144c <memset>
    da22:	bf00      	nop
    da24:	00023d74 	.word	0x00023d74
    da28:	10003f00 	.word	0x10003f00

0000da2c <AttsCccClearTable>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsCccClearTable(dmConnId_t connId)
{
    da2c:	b538      	push	{r3, r4, r5, lr}
  if (attsCccCb.pCccTbl[connId - 1] != NULL)
    da2e:	1e45      	subs	r5, r0, #1
    da30:	4c06      	ldr	r4, [pc, #24]	; (da4c <AttsCccClearTable+0x20>)
{
    da32:	4601      	mov	r1, r0
  ATT_TRACE_INFO1("AttsCccClearTable connId=%d", connId);
    da34:	4806      	ldr	r0, [pc, #24]	; (da50 <AttsCccClearTable+0x24>)
    da36:	f006 fa6d 	bl	13f14 <WsfTrace>
  if (attsCccCb.pCccTbl[connId - 1] != NULL)
    da3a:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
    da3e:	b120      	cbz	r0, da4a <AttsCccClearTable+0x1e>
    WsfBufFree(attsCccCb.pCccTbl[connId - 1]);
    da40:	f005 feb8 	bl	137b4 <WsfBufFree>
    attsCccCb.pCccTbl[connId - 1] = NULL;
    da44:	2300      	movs	r3, #0
    da46:	f844 3025 	str.w	r3, [r4, r5, lsl #2]

  attsCccFreeTbl(connId);
}
    da4a:	bd38      	pop	{r3, r4, r5, pc}
    da4c:	10003f00 	.word	0x10003f00
    da50:	00023d90 	.word	0x00023d90

0000da54 <AttsCccGet>:
  return attsCccCb.pCccTbl[connId - 1];
    da54:	4b03      	ldr	r3, [pc, #12]	; (da64 <AttsCccGet+0x10>)
    da56:	3801      	subs	r0, #1
    da58:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
{
  uint16_t      *pTbl;

  WSF_ASSERT(idx < attsCccCb.setLen);

  if ((pTbl = attsCccGetTbl(connId)) != NULL)
    da5c:	b108      	cbz	r0, da62 <AttsCccGet+0xe>
  {
    /* return value from table */
    return pTbl[idx];
    da5e:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
  }
  else
  {
    return 0;
  }
}
    da62:	4770      	bx	lr
    da64:	10003f00 	.word	0x10003f00

0000da68 <AttsCccEnabled>:
 *
 *  \return Value of the descriptor if security level is met, otherwise zero.
 */
/*************************************************************************************************/
uint16_t AttsCccEnabled(dmConnId_t connId, uint8_t idx)
{
    da68:	b538      	push	{r3, r4, r5, lr}
    da6a:	460c      	mov	r4, r1
    da6c:	4605      	mov	r5, r0
  WSF_ASSERT(idx < attsCccCb.setLen);

  /* check security level */
  if (DmConnSecLevel(connId) < attsCccCb.pSet[idx].secLevel)
    da6e:	f00a ff37 	bl	188e0 <DmConnSecLevel>
    da72:	4b0a      	ldr	r3, [pc, #40]	; (da9c <AttsCccEnabled+0x34>)
    da74:	68d9      	ldr	r1, [r3, #12]
    da76:	fa0f fc84 	sxth.w	ip, r4
    da7a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    da7e:	eb01 0444 	add.w	r4, r1, r4, lsl #1
    da82:	7922      	ldrb	r2, [r4, #4]
    da84:	4282      	cmp	r2, r0
    da86:	d806      	bhi.n	da96 <AttsCccEnabled+0x2e>
  return attsCccCb.pCccTbl[connId - 1];
    da88:	1e68      	subs	r0, r5, #1
    da8a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  if ((pTbl = attsCccGetTbl(connId)) != NULL)
    da8e:	b108      	cbz	r0, da94 <AttsCccEnabled+0x2c>
    return pTbl[idx];
    da90:	f830 001c 	ldrh.w	r0, [r0, ip, lsl #1]
    return 0;
  }

  /* get value */
  return AttsCccGet(connId, idx);
}
    da94:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
    da96:	2000      	movs	r0, #0
}
    da98:	bd38      	pop	{r3, r4, r5, pc}
    da9a:	bf00      	nop
    da9c:	10003f00 	.word	0x10003f00

0000daa0 <AttsGetCccTableLen>:
 *  \return  Number of CCC entries in table.
 */
/*************************************************************************************************/
uint8_t AttsGetCccTableLen(void)
{
  return attsCccCb.setLen;
    daa0:	4b01      	ldr	r3, [pc, #4]	; (daa8 <AttsGetCccTableLen+0x8>)
}
    daa2:	7d18      	ldrb	r0, [r3, #20]
    daa4:	4770      	bx	lr
    daa6:	bf00      	nop
    daa8:	10003f00 	.word	0x10003f00

0000daac <attsCsfSetHashUpdateStatus>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsCsfSetHashUpdateStatus(bool_t isUpdating)
{
    daac:	b510      	push	{r4, lr}
  if (attsCsfCb.isHashUpdating == isUpdating)
    daae:	4c10      	ldr	r4, [pc, #64]	; (daf0 <attsCsfSetHashUpdateStatus+0x44>)
    dab0:	7b23      	ldrb	r3, [r4, #12]
    dab2:	4283      	cmp	r3, r0
    dab4:	d01a      	beq.n	daec <attsCsfSetHashUpdateStatus+0x40>
    return;
  }
  else
  {
    /* Update state. */
    attsCsfCb.isHashUpdating = isUpdating;
    dab6:	7320      	strb	r0, [r4, #12]
  }

  /* Update complete.
   * Check if clients were pending on the hash value and fulfill their requests.
   */
  if (isUpdating == FALSE)
    dab8:	b930      	cbnz	r0, dac8 <attsCsfSetHashUpdateStatus+0x1c>
  {
    ATT_TRACE_INFO0("Database hash calculation complete");
    daba:	480e      	ldr	r0, [pc, #56]	; (daf4 <attsCsfSetHashUpdateStatus+0x48>)
    dabc:	f006 fa2a 	bl	13f14 <WsfTrace>
      {
        attsCsfCb.attsCsfTable[i].changeAwareState = ATTS_CLIENT_CHANGE_PENDING_AWARE;
      }
    }
  }
}
    dac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    attsCheckPendDbHashReadRsp();
    dac4:	f000 bc4c 	b.w	e360 <attsCheckPendDbHashReadRsp>
    ATT_TRACE_INFO0("Calculating database hash");
    dac8:	480b      	ldr	r0, [pc, #44]	; (daf8 <attsCsfSetHashUpdateStatus+0x4c>)
    daca:	f006 fa23 	bl	13f14 <WsfTrace>
      if (attsCsfCb.attsCsfTable[i].changeAwareState == ATTS_CLIENT_CHANGE_AWARE_DB_READ_PENDING)
    dace:	7863      	ldrb	r3, [r4, #1]
    dad0:	2b02      	cmp	r3, #2
        attsCsfCb.attsCsfTable[i].changeAwareState = ATTS_CLIENT_CHANGE_PENDING_AWARE;
    dad2:	bf04      	itt	eq
    dad4:	2301      	moveq	r3, #1
    dad6:	7063      	strbeq	r3, [r4, #1]
      if (attsCsfCb.attsCsfTable[i].changeAwareState == ATTS_CLIENT_CHANGE_AWARE_DB_READ_PENDING)
    dad8:	78e3      	ldrb	r3, [r4, #3]
    dada:	2b02      	cmp	r3, #2
        attsCsfCb.attsCsfTable[i].changeAwareState = ATTS_CLIENT_CHANGE_PENDING_AWARE;
    dadc:	bf04      	itt	eq
    dade:	2301      	moveq	r3, #1
    dae0:	70e3      	strbeq	r3, [r4, #3]
      if (attsCsfCb.attsCsfTable[i].changeAwareState == ATTS_CLIENT_CHANGE_AWARE_DB_READ_PENDING)
    dae2:	7963      	ldrb	r3, [r4, #5]
    dae4:	2b02      	cmp	r3, #2
        attsCsfCb.attsCsfTable[i].changeAwareState = ATTS_CLIENT_CHANGE_PENDING_AWARE;
    dae6:	bf04      	itt	eq
    dae8:	2301      	moveq	r3, #1
    daea:	7163      	strbeq	r3, [r4, #5]
}
    daec:	bd10      	pop	{r4, pc}
    daee:	bf00      	nop
    daf0:	10003f18 	.word	0x10003f18
    daf4:	00023dac 	.word	0x00023dac
    daf8:	00023dd0 	.word	0x00023dd0

0000dafc <attsCsfGetHashUpdateStatus>:
*  \return \ref TRUE if update in progress, \ref FALSE otherwise.
*/
/*************************************************************************************************/
uint8_t attsCsfGetHashUpdateStatus(void)
{
  return attsCsfCb.isHashUpdating;
    dafc:	4b01      	ldr	r3, [pc, #4]	; (db04 <attsCsfGetHashUpdateStatus+0x8>)
}
    dafe:	7b18      	ldrb	r0, [r3, #12]
    db00:	4770      	bx	lr
    db02:	bf00      	nop
    db04:	10003f18 	.word	0x10003f18

0000db08 <attsCsfIsClientChangeAware>:
 *  \return \ref TRUE if client is aware, otherwise \ref FALSE.
 */
/*************************************************************************************************/
uint8_t attsCsfIsClientChangeAware(dmConnId_t connId, uint16_t handle)
{
  if ((attsCsfCb.attsCsfTable[connId - 1].csf & ATTS_CSF_ROBUST_CACHING) &&
    db08:	1e42      	subs	r2, r0, #1
{
    db0a:	b410      	push	{r4}
  if ((attsCsfCb.attsCsfTable[connId - 1].csf & ATTS_CSF_ROBUST_CACHING) &&
    db0c:	4c0c      	ldr	r4, [pc, #48]	; (db40 <attsCsfIsClientChangeAware+0x38>)
    db0e:	f814 3012 	ldrb.w	r3, [r4, r2, lsl #1]
    db12:	f013 0001 	ands.w	r0, r3, #1
    db16:	d007      	beq.n	db28 <attsCsfIsClientChangeAware+0x20>
      (attsCsfCb.attsCsfTable[connId - 1].changeAwareState == ATTS_CLIENT_CHANGE_UNAWARE) &&
    db18:	eb04 0242 	add.w	r2, r4, r2, lsl #1
  if ((attsCsfCb.attsCsfTable[connId - 1].csf & ATTS_CSF_ROBUST_CACHING) &&
    db1c:	7853      	ldrb	r3, [r2, #1]
    db1e:	2b03      	cmp	r3, #3
    db20:	d006      	beq.n	db30 <attsCsfIsClientChangeAware+0x28>
  {
    return FALSE;
  }

  return TRUE;
}
    db22:	f85d 4b04 	ldr.w	r4, [sp], #4
    db26:	4770      	bx	lr
  return TRUE;
    db28:	2001      	movs	r0, #1
}
    db2a:	f85d 4b04 	ldr.w	r4, [sp], #4
    db2e:	4770      	bx	lr
    return FALSE;
    db30:	f1a1 0012 	sub.w	r0, r1, #18
    db34:	fab0 f080 	clz	r0, r0
    db38:	0940      	lsrs	r0, r0, #5
}
    db3a:	f85d 4b04 	ldr.w	r4, [sp], #4
    db3e:	4770      	bx	lr
    db40:	10003f18 	.word	0x10003f18

0000db44 <attsCsfActClientState>:
{
  uint8_t err = ATT_SUCCESS;
  attsCsfRec_t *pRec;

  /* PDU which do not operate on att handles are handled agnostically of the client's state. */
  if (opcode == ATT_PDU_MTU_REQ || opcode == ATT_PDU_VALUE_CNF)
    db44:	2902      	cmp	r1, #2
    db46:	d04a      	beq.n	dbde <attsCsfActClientState+0x9a>
    db48:	291e      	cmp	r1, #30
{
    db4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    db4e:	460c      	mov	r4, r1
  if (opcode == ATT_PDU_MTU_REQ || opcode == ATT_PDU_VALUE_CNF)
    db50:	d00e      	beq.n	db70 <attsCsfActClientState+0x2c>
  }

  pRec = &attsCsfCb.attsCsfTable[handle];

  /* If the client is change-unaware */
  if (pRec->changeAwareState == ATTS_CLIENT_CHANGE_UNAWARE)
    db52:	4f2e      	ldr	r7, [pc, #184]	; (dc0c <attsCsfActClientState+0xc8>)
    db54:	eb07 0840 	add.w	r8, r7, r0, lsl #1
    db58:	4605      	mov	r5, r0
    db5a:	f898 3001 	ldrb.w	r3, [r8, #1]
    db5e:	2b03      	cmp	r3, #3
    db60:	4616      	mov	r6, r2
    db62:	ea4f 0940 	mov.w	r9, r0, lsl #1
    db66:	d006      	beq.n	db76 <attsCsfActClientState+0x32>
    {
      /* return a database out of sync error */
      err = ATT_ERR_DATABASE_OUT_OF_SYNC;
    }
  }
  else if (pRec->changeAwareState == ATTS_CLIENT_CHANGE_PENDING_AWARE)
    db68:	2b01      	cmp	r3, #1
    db6a:	d03a      	beq.n	dbe2 <attsCsfActClientState+0x9e>
      err = ATT_ERR_DATABASE_OUT_OF_SYNC;
    }
  }

  /* If this is Read by Type request */
  if (opcode == ATT_PDU_READ_TYPE_REQ)
    db6c:	2c08      	cmp	r4, #8
    db6e:	d016      	beq.n	db9e <attsCsfActClientState+0x5a>
    BYTES_TO_UINT16(uuid, (pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN + 4));

    /* If this is a Read By Type Request of the Database Hash characteristic value */
    if (uuid == ATT_UUID_DATABASE_HASH)
    {
      err = ATT_SUCCESS;
    db70:	2000      	movs	r0, #0
  {
    ATT_TRACE_INFO2("ConnId %d out of sync, PDU with opcode 0x%02x ignored!", handle + 1, opcode);
  }

  return err;
}
    db72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((opcode & ATT_PDU_MASK_COMMAND) == 0)
    db76:	064a      	lsls	r2, r1, #25
    db78:	d525      	bpl.n	dbc6 <attsCsfActClientState+0x82>
  if (opcode == ATT_PDU_READ_TYPE_REQ)
    db7a:	2c08      	cmp	r4, #8
    db7c:	d108      	bne.n	db90 <attsCsfActClientState+0x4c>
    BYTES_TO_UINT16(uuid, (pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN + 4));
    db7e:	7bb2      	ldrb	r2, [r6, #14]
    db80:	7b73      	ldrb	r3, [r6, #13]
    db82:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    if (uuid == ATT_UUID_DATABASE_HASH)
    db86:	b29b      	uxth	r3, r3
    db88:	f642 322a 	movw	r2, #11050	; 0x2b2a
    db8c:	4293      	cmp	r3, r2
    db8e:	d00f      	beq.n	dbb0 <attsCsfActClientState+0x6c>
    ATT_TRACE_INFO2("ConnId %d out of sync, PDU with opcode 0x%02x ignored!", handle + 1, opcode);
    db90:	481f      	ldr	r0, [pc, #124]	; (dc10 <attsCsfActClientState+0xcc>)
    db92:	4622      	mov	r2, r4
    db94:	1c69      	adds	r1, r5, #1
    db96:	f006 f9bd 	bl	13f14 <WsfTrace>
    db9a:	2012      	movs	r0, #18
    db9c:	e7e9      	b.n	db72 <attsCsfActClientState+0x2e>
    BYTES_TO_UINT16(uuid, (pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN + 4));
    db9e:	7bb2      	ldrb	r2, [r6, #14]
    dba0:	7b73      	ldrb	r3, [r6, #13]
    dba2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    if (uuid == ATT_UUID_DATABASE_HASH)
    dba6:	b29b      	uxth	r3, r3
    dba8:	f642 322a 	movw	r2, #11050	; 0x2b2a
    dbac:	4293      	cmp	r3, r2
    dbae:	d1df      	bne.n	db70 <attsCsfActClientState+0x2c>
      if (attsCsfCb.isHashUpdating)
    dbb0:	7b3b      	ldrb	r3, [r7, #12]
    dbb2:	2b00      	cmp	r3, #0
    dbb4:	d0dc      	beq.n	db70 <attsCsfActClientState+0x2c>
        pRec->changeAwareState = ATTS_CLIENT_CHANGE_AWARE_DB_READ_PENDING;
    dbb6:	444f      	add	r7, r9
    dbb8:	2202      	movs	r2, #2
        ATT_TRACE_INFO2("ConnId %d change aware state is %d", handle + 1,
    dbba:	4816      	ldr	r0, [pc, #88]	; (dc14 <attsCsfActClientState+0xd0>)
        pRec->changeAwareState = ATTS_CLIENT_CHANGE_AWARE_DB_READ_PENDING;
    dbbc:	707a      	strb	r2, [r7, #1]
        ATT_TRACE_INFO2("ConnId %d change aware state is %d", handle + 1,
    dbbe:	1c69      	adds	r1, r5, #1
    dbc0:	f006 f9a8 	bl	13f14 <WsfTrace>
    dbc4:	e7d4      	b.n	db70 <attsCsfActClientState+0x2c>
      pRec->changeAwareState = ATTS_CLIENT_CHANGE_PENDING_AWARE;
    dbc6:	2201      	movs	r2, #1
      ATT_TRACE_INFO2("ConnId %d change aware state is %d", handle + 1,
    dbc8:	4812      	ldr	r0, [pc, #72]	; (dc14 <attsCsfActClientState+0xd0>)
      pRec->changeAwareState = ATTS_CLIENT_CHANGE_PENDING_AWARE;
    dbca:	f888 2001 	strb.w	r2, [r8, #1]
      ATT_TRACE_INFO2("ConnId %d change aware state is %d", handle + 1,
    dbce:	18a9      	adds	r1, r5, r2
    dbd0:	f006 f9a0 	bl	13f14 <WsfTrace>
    if ((opcode & ATT_PDU_MASK_COMMAND) ||
    dbd4:	f817 3015 	ldrb.w	r3, [r7, r5, lsl #1]
    dbd8:	07db      	lsls	r3, r3, #31
    dbda:	d4ce      	bmi.n	db7a <attsCsfActClientState+0x36>
    dbdc:	e7c6      	b.n	db6c <attsCsfActClientState+0x28>
    return err;
    dbde:	2000      	movs	r0, #0
}
    dbe0:	4770      	bx	lr
    if ((opcode & ATT_PDU_MASK_COMMAND) == 0)
    dbe2:	f011 0240 	ands.w	r2, r1, #64	; 0x40
    dbe6:	d1c8      	bne.n	db7a <attsCsfActClientState+0x36>
      ATT_TRACE_INFO2("ConnId %d change aware state is %d", handle + 1, ATTS_CLIENT_CHANGE_AWARE);
    dbe8:	f100 0a01 	add.w	sl, r0, #1
      pRec->changeAwareState = ATTS_CLIENT_CHANGE_AWARE;
    dbec:	f888 2001 	strb.w	r2, [r8, #1]
      ATT_TRACE_INFO2("ConnId %d change aware state is %d", handle + 1, ATTS_CLIENT_CHANGE_AWARE);
    dbf0:	4808      	ldr	r0, [pc, #32]	; (dc14 <attsCsfActClientState+0xd0>)
    dbf2:	4651      	mov	r1, sl
    dbf4:	f006 f98e 	bl	13f14 <WsfTrace>
      if (attsCsfCb.writeCback != NULL)
    dbf8:	68bb      	ldr	r3, [r7, #8]
    dbfa:	2b00      	cmp	r3, #0
    dbfc:	d0b6      	beq.n	db6c <attsCsfActClientState+0x28>
        attsCsfCb.writeCback(handle + 1, pRec->changeAwareState, &pRec->csf);
    dbfe:	f898 1001 	ldrb.w	r1, [r8, #1]
    dc02:	fa5f f08a 	uxtb.w	r0, sl
    dc06:	4642      	mov	r2, r8
    dc08:	4798      	blx	r3
    dc0a:	e7af      	b.n	db6c <attsCsfActClientState+0x28>
    dc0c:	10003f18 	.word	0x10003f18
    dc10:	00023e10 	.word	0x00023e10
    dc14:	00023dec 	.word	0x00023dec

0000dc18 <AttsCsfSetClientsChangeAwarenessState>:
 *  \note A callback to application is not needed as it is expected the caller (i.e. the
 *        application) will have updated all persistent records prior to calling this function.
 */
/*************************************************************************************************/
void AttsCsfSetClientsChangeAwarenessState(dmConnId_t connId, uint8_t state)
{
    dc18:	460a      	mov	r2, r1
  if (connId == DM_CONN_ID_NONE)
  {
    for (uint8_t i = 0; i < DM_CONN_MAX; i++)
    {
      if (attsCsfCb.attsCsfTable[i].changeAwareState == ATTS_CLIENT_CHANGE_AWARE_DB_READ_PENDING)
    dc1a:	4b0f      	ldr	r3, [pc, #60]	; (dc58 <AttsCsfSetClientsChangeAwarenessState+0x40>)
  if (connId == DM_CONN_ID_NONE)
    dc1c:	4601      	mov	r1, r0
    dc1e:	b998      	cbnz	r0, dc48 <AttsCsfSetClientsChangeAwarenessState+0x30>
      if (attsCsfCb.attsCsfTable[i].changeAwareState == ATTS_CLIENT_CHANGE_AWARE_DB_READ_PENDING)
    dc20:	7858      	ldrb	r0, [r3, #1]
    dc22:	78d9      	ldrb	r1, [r3, #3]
    dc24:	f893 c005 	ldrb.w	ip, [r3, #5]
      {
        attsCsfCb.attsCsfTable[i].changeAwareState = ATTS_CLIENT_CHANGE_PENDING_AWARE;
    dc28:	2802      	cmp	r0, #2
    dc2a:	bf14      	ite	ne
    dc2c:	4610      	movne	r0, r2
    dc2e:	2001      	moveq	r0, #1
    dc30:	2902      	cmp	r1, #2
    dc32:	bf14      	ite	ne
    dc34:	4611      	movne	r1, r2
    dc36:	2101      	moveq	r1, #1
    dc38:	f1bc 0f02 	cmp.w	ip, #2
    dc3c:	bf08      	it	eq
    dc3e:	2201      	moveq	r2, #1
    dc40:	7058      	strb	r0, [r3, #1]
      if (attsCsfCb.attsCsfTable[i].changeAwareState == ATTS_CLIENT_CHANGE_AWARE_DB_READ_PENDING)
    dc42:	70d9      	strb	r1, [r3, #3]
    dc44:	715a      	strb	r2, [r3, #5]
  {
    attsCsfCb.attsCsfTable[connId - 1].changeAwareState = state;

    ATT_TRACE_INFO2("ConnId %d change aware state is %d", connId, state);
  }
}
    dc46:	4770      	bx	lr
    attsCsfCb.attsCsfTable[connId - 1].changeAwareState = state;
    dc48:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    ATT_TRACE_INFO2("ConnId %d change aware state is %d", connId, state);
    dc4c:	4803      	ldr	r0, [pc, #12]	; (dc5c <AttsCsfSetClientsChangeAwarenessState+0x44>)
    attsCsfCb.attsCsfTable[connId - 1].changeAwareState = state;
    dc4e:	f803 2c01 	strb.w	r2, [r3, #-1]
    ATT_TRACE_INFO2("ConnId %d change aware state is %d", connId, state);
    dc52:	f006 b95f 	b.w	13f14 <WsfTrace>
    dc56:	bf00      	nop
    dc58:	10003f18 	.word	0x10003f18
    dc5c:	00023dec 	.word	0x00023dec

0000dc60 <AttsCsfConnOpen>:
/*************************************************************************************************/
void AttsCsfConnOpen(dmConnId_t connId, uint8_t changeAwareState, uint8_t *pCsf)
{
  if (pCsf != NULL)
  {
    attsCsfCb.attsCsfTable[connId - 1].changeAwareState = changeAwareState;
    dc60:	4b06      	ldr	r3, [pc, #24]	; (dc7c <AttsCsfConnOpen+0x1c>)
    dc62:	3801      	subs	r0, #1
  if (pCsf != NULL)
    dc64:	b13a      	cbz	r2, dc76 <AttsCsfConnOpen+0x16>
    attsCsfCb.attsCsfTable[connId - 1].changeAwareState = changeAwareState;
    dc66:	eb03 0c40 	add.w	ip, r3, r0, lsl #1
    dc6a:	f88c 1001 	strb.w	r1, [ip, #1]
    memcpy(&attsCsfCb.attsCsfTable[connId - 1].csf, pCsf, ATT_CSF_LEN);
    dc6e:	7812      	ldrb	r2, [r2, #0]
    dc70:	f803 2010 	strb.w	r2, [r3, r0, lsl #1]
    dc74:	4770      	bx	lr
  }
  else
  {
    /* Note: this set client to the change-aware state. */
    memset(&attsCsfCb.attsCsfTable[connId - 1], 0, sizeof(attsCsfRec_t));
    dc76:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
  }
}
    dc7a:	4770      	bx	lr
    dc7c:	10003f18 	.word	0x10003f18

0000dc80 <AttsCsfRegister>:
 *  \return None.
 */
/*************************************************************************************************/
void AttsCsfRegister(attsCsfWriteCback_t writeCback)
{
  attsCsfCb.writeCback = writeCback;
    dc80:	4b01      	ldr	r3, [pc, #4]	; (dc88 <AttsCsfRegister+0x8>)
    dc82:	6098      	str	r0, [r3, #8]
}
    dc84:	4770      	bx	lr
    dc86:	bf00      	nop
    dc88:	10003f18 	.word	0x10003f18

0000dc8c <AttsCsfWriteFeatures>:
  /* future parameter in case the client supported features characteristic becomes a multi-octet
   * structure.
   */
  (void)offset;

  if (valueLen > ATT_CSF_LEN)
    dc8c:	2a01      	cmp	r2, #1
    dc8e:	d81d      	bhi.n	dccc <AttsCsfWriteFeatures+0x40>
{
    dc90:	b570      	push	{r4, r5, r6, lr}
  {
    return ATT_ERR_LENGTH;
  }

  /* A client can not clear any bits it has set. */
  if ((pCsfRec->csf & *pValue) < pCsfRec->csf)
    dc92:	4d10      	ldr	r5, [pc, #64]	; (dcd4 <AttsCsfWriteFeatures+0x48>)
    dc94:	781a      	ldrb	r2, [r3, #0]
  attsCsfRec_t *pCsfRec = &attsCsfCb.attsCsfTable[connId - 1];
    dc96:	1e46      	subs	r6, r0, #1
  if ((pCsfRec->csf & *pValue) < pCsfRec->csf)
    dc98:	4604      	mov	r4, r0
    dc9a:	f815 3016 	ldrb.w	r3, [r5, r6, lsl #1]
    dc9e:	ea03 0102 	and.w	r1, r3, r2
    dca2:	428b      	cmp	r3, r1
    dca4:	d810      	bhi.n	dcc8 <AttsCsfWriteFeatures+0x3c>
  {
    return ATT_ERR_VALUE_NOT_ALLOWED;
  }

  pCsfRec->csf = *pValue & ATTS_CSF_OCT0_FEATURES;
    dca6:	f002 0201 	and.w	r2, r2, #1

  ATT_TRACE_INFO2("connId %d updated csf to 0x%02x", connId, pCsfRec->csf);
    dcaa:	480b      	ldr	r0, [pc, #44]	; (dcd8 <AttsCsfWriteFeatures+0x4c>)
  pCsfRec->csf = *pValue & ATTS_CSF_OCT0_FEATURES;
    dcac:	f805 2016 	strb.w	r2, [r5, r6, lsl #1]
  ATT_TRACE_INFO2("connId %d updated csf to 0x%02x", connId, pCsfRec->csf);
    dcb0:	4621      	mov	r1, r4
    dcb2:	f006 f92f 	bl	13f14 <WsfTrace>

  /* Callback to application to store updated features, if bonded. */
  if (attsCsfCb.writeCback != NULL)
    dcb6:	68ab      	ldr	r3, [r5, #8]
    dcb8:	b153      	cbz	r3, dcd0 <AttsCsfWriteFeatures+0x44>
  {
    attsCsfCb.writeCback(connId, pCsfRec->changeAwareState, &pCsfRec->csf);
    dcba:	eb05 0246 	add.w	r2, r5, r6, lsl #1
    dcbe:	4620      	mov	r0, r4
    dcc0:	7851      	ldrb	r1, [r2, #1]
    dcc2:	4798      	blx	r3
  }

  return ATT_SUCCESS;
    dcc4:	2000      	movs	r0, #0
}
    dcc6:	bd70      	pop	{r4, r5, r6, pc}
    return ATT_ERR_VALUE_NOT_ALLOWED;
    dcc8:	2013      	movs	r0, #19
}
    dcca:	bd70      	pop	{r4, r5, r6, pc}
    return ATT_ERR_LENGTH;
    dccc:	200d      	movs	r0, #13
}
    dcce:	4770      	bx	lr
  return ATT_SUCCESS;
    dcd0:	4618      	mov	r0, r3
}
    dcd2:	bd70      	pop	{r4, r5, r6, pc}
    dcd4:	10003f18 	.word	0x10003f18
    dcd8:	00023e48 	.word	0x00023e48

0000dcdc <AttsCsfGetFeatures>:
 *  \return None.
 */
/*************************************************************************************************/
void AttsCsfGetFeatures(dmConnId_t connId, uint8_t *pCsfOut, uint8_t pCsfOutLen)
{
  if (pCsfOutLen <= ATT_CSF_LEN)
    dcdc:	2a01      	cmp	r2, #1
{
    dcde:	468c      	mov	ip, r1
  if (pCsfOutLen <= ATT_CSF_LEN)
    dce0:	d900      	bls.n	dce4 <AttsCsfGetFeatures+0x8>
  {
    memcpy(pCsfOut, &attsCsfCb.attsCsfTable[connId - 1].csf, pCsfOutLen);
  }
}
    dce2:	4770      	bx	lr
    memcpy(pCsfOut, &attsCsfCb.attsCsfTable[connId - 1].csf, pCsfOutLen);
    dce4:	4903      	ldr	r1, [pc, #12]	; (dcf4 <AttsCsfGetFeatures+0x18>)
    dce6:	3801      	subs	r0, #1
    dce8:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    dcec:	4660      	mov	r0, ip
    dcee:	f7fe ba07 	b.w	c100 <memcpy>
    dcf2:	bf00      	nop
    dcf4:	10003f18 	.word	0x10003f18

0000dcf8 <AttsCsfGetChangeAwareState>:
 *  \return Client's change-aware state.
 */
/*************************************************************************************************/
uint8_t AttsCsfGetChangeAwareState(dmConnId_t connId)
{
  return attsCsfCb.attsCsfTable[connId - 1].changeAwareState;
    dcf8:	4b02      	ldr	r3, [pc, #8]	; (dd04 <AttsCsfGetChangeAwareState+0xc>)
    dcfa:	eb03 0040 	add.w	r0, r3, r0, lsl #1
}
    dcfe:	f810 0c01 	ldrb.w	r0, [r0, #-1]
    dd02:	4770      	bx	lr
    dd04:	10003f18 	.word	0x10003f18

0000dd08 <attsIndMsgCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsIndMsgCback(attsApiMsg_t *pMsg)
{
    dd08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  attsIndCcb_t   *pCcb;

  /* get CCB and verify connection still in use */
  if ((pCcb = attsIndCcbByConnId((dmConnId_t) pMsg->hdr.param)) == NULL)
    dd0c:	7804      	ldrb	r4, [r0, #0]
{
    dd0e:	b082      	sub	sp, #8
    dd10:	4605      	mov	r5, r0
  if (DmConnInUse(connId))
    dd12:	4620      	mov	r0, r4
    dd14:	f00a fd9e 	bl	18854 <DmConnInUse>
    dd18:	2800      	cmp	r0, #0
    dd1a:	d03b      	beq.n	dd94 <attsIndMsgCback+0x8c>
    /* ignore if connection not in use */
    return;
  }

  /* if an API message to send packet */
  if (pMsg->hdr.event == ATTS_MSG_API_VALUE_IND_NTF)
    dd1c:	78ab      	ldrb	r3, [r5, #2]
    dd1e:	2b21      	cmp	r3, #33	; 0x21
    return &attsIndCb.ccb[connId - 1];
    dd20:	f104 34ff 	add.w	r4, r4, #4294967295
  if (pMsg->hdr.event == ATTS_MSG_API_VALUE_IND_NTF)
    dd24:	d004      	beq.n	dd30 <attsIndMsgCback+0x28>
    {
      attsSetupMsg(pCcb, (dmConnId_t) pMsg->hdr.param, pMsg->pPkt);
    }
  }
  /* else if indication timeout */
  else if (pMsg->hdr.event == ATTS_MSG_IND_TIMEOUT)
    dd26:	2b22      	cmp	r3, #34	; 0x22
    dd28:	d01c      	beq.n	dd64 <attsIndMsgCback+0x5c>
      attsExecCallback((dmConnId_t) pMsg->hdr.param, pCcb->pendIndHandle, ATT_ERR_TIMEOUT);
      pCcb->pendIndHandle = ATT_HANDLE_NONE;
      pCcb->pMainCcb->control |= ATT_CCB_STATUS_TX_TIMEOUT;
    }
  }
}
    dd2a:	b002      	add	sp, #8
    dd2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (attsPendIndNtfHandle(pCcb, pMsg->pPkt))
    dd30:	686b      	ldr	r3, [r5, #4]
  if (opcode == ATT_PDU_VALUE_IND)
    dd32:	7a1a      	ldrb	r2, [r3, #8]
    dd34:	2a1d      	cmp	r2, #29
    dd36:	d049      	beq.n	ddcc <attsIndMsgCback+0xc4>
    if (pCcb->pendNtfHandle[i] != ATT_HANDLE_NONE)
    dd38:	4939      	ldr	r1, [pc, #228]	; (de20 <attsIndMsgCback+0x118>)
    dd3a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    dd3e:	eb01 0484 	add.w	r4, r1, r4, lsl #2
    dd42:	8b22      	ldrh	r2, [r4, #24]
    dd44:	2a00      	cmp	r2, #0
    dd46:	d02f      	beq.n	dda8 <attsIndMsgCback+0xa0>
  handle = pPkt->handle;
    dd48:	885a      	ldrh	r2, [r3, #2]
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
    dd4a:	7828      	ldrb	r0, [r5, #0]
    dd4c:	2300      	movs	r3, #0
    dd4e:	9300      	str	r3, [sp, #0]
    dd50:	210f      	movs	r1, #15
    dd52:	2372      	movs	r3, #114	; 0x72
    dd54:	f001 feae 	bl	fab4 <attExecCallback>
      WsfMsgFree(pMsg->pPkt);
    dd58:	6868      	ldr	r0, [r5, #4]
}
    dd5a:	b002      	add	sp, #8
    dd5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      WsfMsgFree(pMsg->pPkt);
    dd60:	f005 bd60 	b.w	13824 <WsfMsgFree>
    if (pCcb->outIndHandle != ATT_HANDLE_NONE)
    dd64:	4b2e      	ldr	r3, [pc, #184]	; (de20 <attsIndMsgCback+0x118>)
    dd66:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    dd6a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    dd6e:	8aa3      	ldrh	r3, [r4, #20]
    dd70:	2b00      	cmp	r3, #0
    dd72:	d0da      	beq.n	dd2a <attsIndMsgCback+0x22>
      pCcb->outIndHandle = ATT_HANDLE_NONE;
    dd74:	2600      	movs	r6, #0
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
    dd76:	8ae2      	ldrh	r2, [r4, #22]
    dd78:	7828      	ldrb	r0, [r5, #0]
    dd7a:	9600      	str	r6, [sp, #0]
    dd7c:	2371      	movs	r3, #113	; 0x71
      pCcb->outIndHandle = ATT_HANDLE_NONE;
    dd7e:	82a6      	strh	r6, [r4, #20]
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
    dd80:	210f      	movs	r1, #15
    dd82:	f001 fe97 	bl	fab4 <attExecCallback>
      pCcb->pMainCcb->control |= ATT_CCB_STATUS_TX_TIMEOUT;
    dd86:	6922      	ldr	r2, [r4, #16]
      pCcb->pendIndHandle = ATT_HANDLE_NONE;
    dd88:	82e6      	strh	r6, [r4, #22]
      pCcb->pMainCcb->control |= ATT_CCB_STATUS_TX_TIMEOUT;
    dd8a:	7f53      	ldrb	r3, [r2, #29]
    dd8c:	f043 0304 	orr.w	r3, r3, #4
    dd90:	7753      	strb	r3, [r2, #29]
    dd92:	e7ca      	b.n	dd2a <attsIndMsgCback+0x22>
    ATT_TRACE_WARN1("atts ccb not in use: %d", connId);
    dd94:	4823      	ldr	r0, [pc, #140]	; (de24 <attsIndMsgCback+0x11c>)
    dd96:	4621      	mov	r1, r4
    dd98:	f006 f8bc 	bl	13f14 <WsfTrace>
    if (pMsg->hdr.event == ATTS_MSG_API_VALUE_IND_NTF)
    dd9c:	78ab      	ldrb	r3, [r5, #2]
    dd9e:	2b21      	cmp	r3, #33	; 0x21
    dda0:	d0da      	beq.n	dd58 <attsIndMsgCback+0x50>
}
    dda2:	b002      	add	sp, #8
    dda4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
    dda8:	6922      	ldr	r2, [r4, #16]
      attsSetupMsg(pCcb, (dmConnId_t) pMsg->hdr.param, pMsg->pPkt);
    ddaa:	882e      	ldrh	r6, [r5, #0]
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
    ddac:	8b11      	ldrh	r1, [r2, #24]
    ddae:	881a      	ldrh	r2, [r3, #0]
  handle = pPkt->handle;
    ddb0:	885d      	ldrh	r5, [r3, #2]
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
    ddb2:	2004      	movs	r0, #4
    ddb4:	f002 fd1c 	bl	107f0 <L2cDataReq>
  else if (!(pCcb->pMainCcb->control & ATT_CCB_STATUS_FLOW_DISABLED))
    ddb8:	6923      	ldr	r3, [r4, #16]
    ddba:	7f5b      	ldrb	r3, [r3, #29]
    ddbc:	f013 0302 	ands.w	r3, r3, #2
    ddc0:	d026      	beq.n	de10 <attsIndMsgCback+0x108>
    if (pCcb->pendNtfHandle[i] == ATT_HANDLE_NONE)
    ddc2:	8b23      	ldrh	r3, [r4, #24]
    ddc4:	2b00      	cmp	r3, #0
    ddc6:	d1b0      	bne.n	dd2a <attsIndMsgCback+0x22>
      pCcb->pendNtfHandle[i] = handle;
    ddc8:	8325      	strh	r5, [r4, #24]
      break;
    ddca:	e7ae      	b.n	dd2a <attsIndMsgCback+0x22>
    return (pCcb->pendIndHandle == ATT_HANDLE_NONE) ? FALSE : TRUE;
    ddcc:	4f14      	ldr	r7, [pc, #80]	; (de20 <attsIndMsgCback+0x118>)
    ddce:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    ddd2:	ea4f 0884 	mov.w	r8, r4, lsl #2
    ddd6:	eb07 0484 	add.w	r4, r7, r4, lsl #2
    if (attsPendIndNtfHandle(pCcb, pMsg->pPkt))
    ddda:	8ae6      	ldrh	r6, [r4, #22]
    dddc:	2e00      	cmp	r6, #0
    ddde:	d1b3      	bne.n	dd48 <attsIndMsgCback+0x40>
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
    dde0:	6922      	ldr	r2, [r4, #16]
  handle = pPkt->handle;
    dde2:	885d      	ldrh	r5, [r3, #2]
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
    dde4:	8b11      	ldrh	r1, [r2, #24]
    dde6:	881a      	ldrh	r2, [r3, #0]
    dde8:	2004      	movs	r0, #4
    ddea:	f002 fd01 	bl	107f0 <L2cDataReq>
    WsfTimerStartSec(&pCcb->outIndTimer, pAttCfg->transTimeout);
    ddee:	4b0e      	ldr	r3, [pc, #56]	; (de28 <attsIndMsgCback+0x120>)
    pCcb->outIndHandle = pCcb->pendIndHandle = handle;
    ddf0:	4447      	add	r7, r8
    ddf2:	f365 060f 	bfi	r6, r5, #0, #16
    WsfTimerStartSec(&pCcb->outIndTimer, pAttCfg->transTimeout);
    ddf6:	681b      	ldr	r3, [r3, #0]
    pCcb->outIndHandle = pCcb->pendIndHandle = handle;
    ddf8:	f365 461f 	bfi	r6, r5, #16, #16
    pCcb->outIndTimer.msg.event = ATTS_MSG_IND_TIMEOUT;
    ddfc:	2222      	movs	r2, #34	; 0x22
    pCcb->outIndHandle = pCcb->pendIndHandle = handle;
    ddfe:	617e      	str	r6, [r7, #20]
    pCcb->outIndTimer.msg.event = ATTS_MSG_IND_TIMEOUT;
    de00:	72a2      	strb	r2, [r4, #10]
    WsfTimerStartSec(&pCcb->outIndTimer, pAttCfg->transTimeout);
    de02:	7999      	ldrb	r1, [r3, #6]
    de04:	4620      	mov	r0, r4
}
    de06:	b002      	add	sp, #8
    de08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    WsfTimerStartSec(&pCcb->outIndTimer, pAttCfg->transTimeout);
    de0c:	f005 bf5c 	b.w	13cc8 <WsfTimerStartSec>
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
    de10:	9300      	str	r3, [sp, #0]
    de12:	462a      	mov	r2, r5
    de14:	210f      	movs	r1, #15
    de16:	b2f0      	uxtb	r0, r6
    de18:	f001 fe4c 	bl	fab4 <attExecCallback>
}
    de1c:	e785      	b.n	dd2a <attsIndMsgCback+0x22>
    de1e:	bf00      	nop
    de20:	10003f28 	.word	0x10003f28
    de24:	00023e68 	.word	0x00023e68
    de28:	10002b00 	.word	0x10002b00

0000de2c <attsIndConnCback>:
  else if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
    de2c:	788b      	ldrb	r3, [r1, #2]
    de2e:	2b28      	cmp	r3, #40	; 0x28
    de30:	d000      	beq.n	de34 <attsIndConnCback+0x8>
    de32:	4770      	bx	lr
{
    de34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (pDmEvt->connClose.hdr.status == HCI_SUCCESS)
    de38:	78cb      	ldrb	r3, [r1, #3]
{
    de3a:	b084      	sub	sp, #16
    de3c:	4604      	mov	r4, r0
    if (pDmEvt->connClose.hdr.status == HCI_SUCCESS)
    de3e:	b1fb      	cbz	r3, de80 <attsIndConnCback+0x54>
      status = pDmEvt->connClose.hdr.status + ATT_HCI_ERR_BASE;
    de40:	3320      	adds	r3, #32
    de42:	b2db      	uxtb	r3, r3
    pIndCcb = &attsIndCb.ccb[pCcb->connId - 1];
    de44:	7f20      	ldrb	r0, [r4, #28]
    if (pIndCcb->outIndHandle != ATT_HANDLE_NONE)
    de46:	4d1c      	ldr	r5, [pc, #112]	; (deb8 <attsIndConnCback+0x8c>)
    pIndCcb = &attsIndCb.ccb[pCcb->connId - 1];
    de48:	1e46      	subs	r6, r0, #1
    if (pIndCcb->outIndHandle != ATT_HANDLE_NONE)
    de4a:	ebc6 08c6 	rsb	r8, r6, r6, lsl #3
    de4e:	eb05 0888 	add.w	r8, r5, r8, lsl #2
    de52:	00f7      	lsls	r7, r6, #3
    de54:	f8b8 2014 	ldrh.w	r2, [r8, #20]
    de58:	bb22      	cbnz	r2, dea4 <attsIndConnCback+0x78>
  if (pCcb->pendIndHandle != ATT_HANDLE_NONE)
    de5a:	1bbc      	subs	r4, r7, r6
    de5c:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    de60:	8ae2      	ldrh	r2, [r4, #22]
    de62:	b98a      	cbnz	r2, de88 <attsIndConnCback+0x5c>
    if (pCcb->pendNtfHandle[i] != ATT_HANDLE_NONE)
    de64:	1bbe      	subs	r6, r7, r6
    de66:	eb05 0586 	add.w	r5, r5, r6, lsl #2
    de6a:	8b2a      	ldrh	r2, [r5, #24]
    de6c:	b12a      	cbz	r2, de7a <attsIndConnCback+0x4e>
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
    de6e:	2400      	movs	r4, #0
    de70:	9400      	str	r4, [sp, #0]
    de72:	210f      	movs	r1, #15
    de74:	f001 fe1e 	bl	fab4 <attExecCallback>
      pCcb->pendNtfHandle[i] = ATT_HANDLE_NONE;
    de78:	832c      	strh	r4, [r5, #24]
}
    de7a:	b004      	add	sp, #16
    de7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      status = pDmEvt->connClose.reason + ATT_HCI_ERR_BASE;
    de80:	7a0b      	ldrb	r3, [r1, #8]
    de82:	3320      	adds	r3, #32
    de84:	b2db      	uxtb	r3, r3
    de86:	e7dd      	b.n	de44 <attsIndConnCback+0x18>
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
    de88:	f04f 0800 	mov.w	r8, #0
    de8c:	f8cd 8000 	str.w	r8, [sp]
    de90:	210f      	movs	r1, #15
    de92:	9303      	str	r3, [sp, #12]
    de94:	9002      	str	r0, [sp, #8]
    de96:	f001 fe0d 	bl	fab4 <attExecCallback>
    pCcb->pendIndHandle = ATT_HANDLE_NONE;
    de9a:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
    de9e:	f8a4 8016 	strh.w	r8, [r4, #22]
    dea2:	e7df      	b.n	de64 <attsIndConnCback+0x38>
      WsfTimerStop(&pIndCcb->outIndTimer);
    dea4:	4640      	mov	r0, r8
    dea6:	9302      	str	r3, [sp, #8]
    dea8:	f005 ff94 	bl	13dd4 <WsfTimerStop>
      pIndCcb->outIndHandle = ATT_HANDLE_NONE;
    deac:	2200      	movs	r2, #0
    deae:	f8a8 2014 	strh.w	r2, [r8, #20]
    attsIndNtfCallback(pCcb->connId, pIndCcb, status);
    deb2:	7f20      	ldrb	r0, [r4, #28]
    deb4:	9b02      	ldr	r3, [sp, #8]
    deb6:	e7d0      	b.n	de5a <attsIndConnCback+0x2e>
    deb8:	10003f28 	.word	0x10003f28

0000debc <attsIndCtrlCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsIndCtrlCback(wsfMsgHdr_t *pMsg)
{
    debc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  attsIndCcb_t   *pCcb;

  /* note this function is currently only called when flow is enabled */

  /* get CCB */
  if ((pCcb = attsIndCcbByConnId((dmConnId_t) pMsg->param)) != NULL)
    dec0:	7804      	ldrb	r4, [r0, #0]
{
    dec2:	b084      	sub	sp, #16
    dec4:	4606      	mov	r6, r0
  if (DmConnInUse(connId))
    dec6:	4620      	mov	r0, r4
    dec8:	f00a fcc4 	bl	18854 <DmConnInUse>
    decc:	b328      	cbz	r0, df1a <attsIndCtrlCback+0x5e>
    return &attsIndCb.ccb[connId - 1];
    dece:	3c01      	subs	r4, #1
  if (pCcb->pendIndHandle != ATT_HANDLE_NONE)
    ded0:	4d15      	ldr	r5, [pc, #84]	; (df28 <attsIndCtrlCback+0x6c>)
  {
    /* call pending indication and notification callback */
    attsIndNtfCallback((dmConnId_t) pMsg->param, pCcb, ATT_SUCCESS);
    ded2:	7830      	ldrb	r0, [r6, #0]
  if (pCcb->pendIndHandle != ATT_HANDLE_NONE)
    ded4:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
    ded8:	eb05 0787 	add.w	r7, r5, r7, lsl #2
    dedc:	00e6      	lsls	r6, r4, #3
    dede:	8afa      	ldrh	r2, [r7, #22]
    dee0:	b972      	cbnz	r2, df00 <attsIndCtrlCback+0x44>
    if (pCcb->pendNtfHandle[i] != ATT_HANDLE_NONE)
    dee2:	1b34      	subs	r4, r6, r4
    dee4:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    dee8:	8b2a      	ldrh	r2, [r5, #24]
    deea:	b132      	cbz	r2, defa <attsIndCtrlCback+0x3e>
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
    deec:	2400      	movs	r4, #0
    deee:	9400      	str	r4, [sp, #0]
    def0:	4623      	mov	r3, r4
    def2:	210f      	movs	r1, #15
    def4:	f001 fdde 	bl	fab4 <attExecCallback>
      pCcb->pendNtfHandle[i] = ATT_HANDLE_NONE;
    def8:	832c      	strh	r4, [r5, #24]
  }
}
    defa:	b004      	add	sp, #16
    defc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
    df00:	f04f 0800 	mov.w	r8, #0
    df04:	f8cd 8000 	str.w	r8, [sp]
    df08:	4643      	mov	r3, r8
    df0a:	210f      	movs	r1, #15
    df0c:	9003      	str	r0, [sp, #12]
    df0e:	f001 fdd1 	bl	fab4 <attExecCallback>
    pCcb->pendIndHandle = ATT_HANDLE_NONE;
    df12:	9803      	ldr	r0, [sp, #12]
    df14:	f8a7 8016 	strh.w	r8, [r7, #22]
    df18:	e7e3      	b.n	dee2 <attsIndCtrlCback+0x26>
    ATT_TRACE_WARN1("atts ccb not in use: %d", connId);
    df1a:	4804      	ldr	r0, [pc, #16]	; (df2c <attsIndCtrlCback+0x70>)
    df1c:	4621      	mov	r1, r4
}
    df1e:	b004      	add	sp, #16
    df20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ATT_TRACE_WARN1("atts ccb not in use: %d", connId);
    df24:	f005 bff6 	b.w	13f14 <WsfTrace>
    df28:	10003f28 	.word	0x10003f28
    df2c:	00023e68 	.word	0x00023e68

0000df30 <attsProcValueCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcValueCnf(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
    df30:	b570      	push	{r4, r5, r6, lr}
  attsIndCcb_t    *pIndCcb;

  /* get server indication CCB */
  if ((pIndCcb = attsIndCcbByConnId(pCcb->connId)) == NULL)
    df32:	7f04      	ldrb	r4, [r0, #28]
{
    df34:	b082      	sub	sp, #8
    df36:	4605      	mov	r5, r0
  if (DmConnInUse(connId))
    df38:	4620      	mov	r0, r4
    df3a:	f00a fc8b 	bl	18854 <DmConnInUse>
    df3e:	b1d8      	cbz	r0, df78 <attsProcValueCnf+0x48>
  {
    return;
  }

  /* if an outstanding indication */
  if (pIndCcb->outIndHandle != ATT_HANDLE_NONE)
    df40:	4911      	ldr	r1, [pc, #68]	; (df88 <attsProcValueCnf+0x58>)
    return &attsIndCb.ccb[connId - 1];
    df42:	3c01      	subs	r4, #1
  if (pIndCcb->outIndHandle != ATT_HANDLE_NONE)
    df44:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    df48:	eb01 0484 	add.w	r4, r1, r4, lsl #2
    df4c:	8aa3      	ldrh	r3, [r4, #20]
    df4e:	b90b      	cbnz	r3, df54 <attsProcValueCnf+0x24>
    {
      attsExecCallback(pCcb->connId, pIndCcb->pendIndHandle, ATT_SUCCESS);
      pIndCcb->pendIndHandle = ATT_HANDLE_NONE;
    }
  }
}
    df50:	b002      	add	sp, #8
    df52:	bd70      	pop	{r4, r5, r6, pc}
    pIndCcb->outIndHandle = ATT_HANDLE_NONE;
    df54:	2300      	movs	r3, #0
    df56:	82a3      	strh	r3, [r4, #20]
    WsfTimerStop(&pIndCcb->outIndTimer);
    df58:	4620      	mov	r0, r4
    df5a:	f005 ff3b 	bl	13dd4 <WsfTimerStop>
    if (!(pCcb->control & ATT_CCB_STATUS_FLOW_DISABLED))
    df5e:	7f6b      	ldrb	r3, [r5, #29]
    df60:	f013 0602 	ands.w	r6, r3, #2
    df64:	d1f4      	bne.n	df50 <attsProcValueCnf+0x20>
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
    df66:	8ae2      	ldrh	r2, [r4, #22]
    df68:	7f28      	ldrb	r0, [r5, #28]
    df6a:	9600      	str	r6, [sp, #0]
    df6c:	4633      	mov	r3, r6
    df6e:	210f      	movs	r1, #15
    df70:	f001 fda0 	bl	fab4 <attExecCallback>
      pIndCcb->pendIndHandle = ATT_HANDLE_NONE;
    df74:	82e6      	strh	r6, [r4, #22]
    df76:	e7eb      	b.n	df50 <attsProcValueCnf+0x20>
    ATT_TRACE_WARN1("atts ccb not in use: %d", connId);
    df78:	4804      	ldr	r0, [pc, #16]	; (df8c <attsProcValueCnf+0x5c>)
    df7a:	4621      	mov	r1, r4
}
    df7c:	b002      	add	sp, #8
    df7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ATT_TRACE_WARN1("atts ccb not in use: %d", connId);
    df82:	f005 bfc7 	b.w	13f14 <WsfTrace>
    df86:	bf00      	nop
    df88:	10003f28 	.word	0x10003f28
    df8c:	00023e68 	.word	0x00023e68

0000df90 <AttsIndInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsIndInit(void)
{
    df90:	b410      	push	{r4}

  /* Initialize control block CCBs */
  for (i = 0, pCcb = attsIndCb.ccb; i < DM_CONN_MAX; i++, pCcb++)
  {
    /* set pointer to main CCB */
    pCcb->pMainCcb = &attCb.ccb[i];
    df92:	4b0e      	ldr	r3, [pc, #56]	; (dfcc <AttsIndInit+0x3c>)

    /* initialize timer */
    pCcb->outIndTimer.handlerId = attCb.handlerId;
    df94:	4a0e      	ldr	r2, [pc, #56]	; (dfd0 <AttsIndInit+0x40>)
    pCcb->outIndTimer.msg.param = i + 1;  /* param stores the conn id */
  }

  /* set up callback interface */
  attsCb.pInd = &attsIndFcnIf;
    df96:	480f      	ldr	r0, [pc, #60]	; (dfd4 <AttsIndInit+0x44>)
    pCcb->outIndTimer.handlerId = attCb.handlerId;
    df98:	f892 107c 	ldrb.w	r1, [r2, #124]	; 0x7c
    pCcb->pMainCcb = &attCb.ccb[i];
    df9c:	611a      	str	r2, [r3, #16]
    pCcb->outIndTimer.msg.param = i + 1;  /* param stores the conn id */
    df9e:	2401      	movs	r4, #1
    dfa0:	811c      	strh	r4, [r3, #8]
    pCcb->pMainCcb = &attCb.ccb[i];
    dfa2:	f102 0424 	add.w	r4, r2, #36	; 0x24
    dfa6:	62dc      	str	r4, [r3, #44]	; 0x2c
    pCcb->outIndTimer.msg.param = i + 1;  /* param stores the conn id */
    dfa8:	2402      	movs	r4, #2
    pCcb->outIndTimer.handlerId = attCb.handlerId;
    dfaa:	7319      	strb	r1, [r3, #12]
    pCcb->pMainCcb = &attCb.ccb[i];
    dfac:	3248      	adds	r2, #72	; 0x48
    pCcb->outIndTimer.handlerId = attCb.handlerId;
    dfae:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
    pCcb->outIndTimer.msg.param = i + 1;  /* param stores the conn id */
    dfb2:	849c      	strh	r4, [r3, #36]	; 0x24
    dfb4:	f04f 0c03 	mov.w	ip, #3
  attsCb.pInd = &attsIndFcnIf;
    dfb8:	4c07      	ldr	r4, [pc, #28]	; (dfd8 <AttsIndInit+0x48>)
    pCcb->outIndTimer.handlerId = attCb.handlerId;
    dfba:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
  attsCb.pInd = &attsIndFcnIf;
    dfbe:	6084      	str	r4, [r0, #8]
    pCcb->outIndTimer.msg.param = i + 1;  /* param stores the conn id */
    dfc0:	f8a3 c040 	strh.w	ip, [r3, #64]	; 0x40
}
    dfc4:	f85d 4b04 	ldr.w	r4, [sp], #4
    pCcb->pMainCcb = &attCb.ccb[i];
    dfc8:	649a      	str	r2, [r3, #72]	; 0x48
}
    dfca:	4770      	bx	lr
    dfcc:	10003f28 	.word	0x10003f28
    dfd0:	10003fd0 	.word	0x10003fd0
    dfd4:	10003f7c 	.word	0x10003f7c
    dfd8:	00023e80 	.word	0x00023e80

0000dfdc <AttsHandleValueInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsHandleValueInd(dmConnId_t connId, uint16_t handle, uint16_t valueLen, uint8_t *pValue)
{
    dfdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dfe0:	4604      	mov	r4, r0
    dfe2:	b083      	sub	sp, #12
    dfe4:	460d      	mov	r5, r1
    dfe6:	4616      	mov	r6, r2
    dfe8:	461f      	mov	r7, r3
  WsfTaskLock();
    dfea:	f005 fc55 	bl	13898 <WsfTaskLock>
  if (DmConnInUse(connId))
    dfee:	4620      	mov	r0, r4
    dff0:	f00a fc30 	bl	18854 <DmConnInUse>
    dff4:	2800      	cmp	r0, #0
    dff6:	d04f      	beq.n	e098 <AttsHandleValueInd+0xbc>
    mtu = pCcb->pMainCcb->mtu;
    dff8:	4933      	ldr	r1, [pc, #204]	; (e0c8 <AttsHandleValueInd+0xec>)
    dffa:	1e60      	subs	r0, r4, #1
    dffc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    e000:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    e004:	6903      	ldr	r3, [r0, #16]
    e006:	f8b3 901a 	ldrh.w	r9, [r3, #26]
    transTimedOut = !!(pCcb->pMainCcb->control & ATT_CCB_STATUS_TX_TIMEOUT);
    e00a:	f893 801d 	ldrb.w	r8, [r3, #29]
  WsfTaskUnlock();
    e00e:	f005 fc4d 	bl	138ac <WsfTaskUnlock>
  if (mtu > 0)
    e012:	f1b9 0f00 	cmp.w	r9, #0
    e016:	d00a      	beq.n	e02e <AttsHandleValueInd+0x52>
    if (!transTimedOut)
    e018:	f018 0804 	ands.w	r8, r8, #4
    e01c:	d00a      	beq.n	e034 <AttsHandleValueInd+0x58>
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
    e01e:	2300      	movs	r3, #0
    e020:	9300      	str	r3, [sp, #0]
    e022:	462a      	mov	r2, r5
    e024:	2371      	movs	r3, #113	; 0x71
    e026:	210f      	movs	r1, #15
    e028:	4620      	mov	r0, r4
    e02a:	f001 fd43 	bl	fab4 <attExecCallback>
  attsHandleValueIndNtf(connId, handle, valueLen, pValue, ATT_PDU_VALUE_IND, FALSE);
}
    e02e:	b003      	add	sp, #12
    e030:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (attsCsfIsClientChangeAware(connId, handle))
    e034:	4629      	mov	r1, r5
    e036:	4620      	mov	r0, r4
    e038:	f7ff fd66 	bl	db08 <attsCsfIsClientChangeAware>
    e03c:	2800      	cmp	r0, #0
    e03e:	d0f6      	beq.n	e02e <AttsHandleValueInd+0x52>
        if ((valueLen + ATT_VALUE_NTF_LEN) <= mtu)
    e040:	1cb3      	adds	r3, r6, #2
    e042:	454b      	cmp	r3, r9
    e044:	da31      	bge.n	e0aa <AttsHandleValueInd+0xce>
          if ((pMsg = WsfMsgAlloc(sizeof(attsApiMsg_t))) != NULL)
    e046:	2008      	movs	r0, #8
    e048:	f005 fbe4 	bl	13814 <WsfMsgAlloc>
    e04c:	4680      	mov	r8, r0
    e04e:	2800      	cmp	r0, #0
    e050:	d0ed      	beq.n	e02e <AttsHandleValueInd+0x52>
            pMsg->hdr.event = ATTS_MSG_API_VALUE_IND_NTF;
    e052:	2321      	movs	r3, #33	; 0x21
    e054:	7083      	strb	r3, [r0, #2]
            pMsg->hdr.param = connId;
    e056:	8004      	strh	r4, [r0, #0]
              pMsg->pPkt = attMsgAlloc(ATT_VALUE_IND_NTF_BUF_LEN + valueLen);
    e058:	f106 000b 	add.w	r0, r6, #11
    e05c:	b280      	uxth	r0, r0
    e05e:	f001 fd45 	bl	faec <attMsgAlloc>
    e062:	4603      	mov	r3, r0
    e064:	f8c8 0004 	str.w	r0, [r8, #4]
            if (pMsg->pPkt != NULL)
    e068:	b340      	cbz	r0, e0bc <AttsHandleValueInd+0xe0>
              pMsg->pPkt->handle = handle;
    e06a:	8045      	strh	r5, [r0, #2]
              UINT16_TO_BSTREAM(p, handle);
    e06c:	7245      	strb	r5, [r0, #9]
                memcpy(p, pValue, valueLen);
    e06e:	4632      	mov	r2, r6
              UINT16_TO_BSTREAM(p, handle);
    e070:	0a2d      	lsrs	r5, r5, #8
              pMsg->pPkt->len = ATT_VALUE_IND_LEN + valueLen;
    e072:	3603      	adds	r6, #3
              UINT16_TO_BSTREAM(p, handle);
    e074:	7285      	strb	r5, [r0, #10]
              pMsg->pPkt->len = ATT_VALUE_IND_LEN + valueLen;
    e076:	8006      	strh	r6, [r0, #0]
              UINT8_TO_BSTREAM(p, opcode);
    e078:	201d      	movs	r0, #29
                memcpy(p, pValue, valueLen);
    e07a:	4639      	mov	r1, r7
              UINT8_TO_BSTREAM(p, opcode);
    e07c:	7218      	strb	r0, [r3, #8]
                memcpy(p, pValue, valueLen);
    e07e:	f103 000b 	add.w	r0, r3, #11
    e082:	f7fe f83d 	bl	c100 <memcpy>
              WsfMsgSend(attCb.handlerId, pMsg);
    e086:	4b11      	ldr	r3, [pc, #68]	; (e0cc <AttsHandleValueInd+0xf0>)
    e088:	f893 007c 	ldrb.w	r0, [r3, #124]	; 0x7c
    e08c:	4641      	mov	r1, r8
}
    e08e:	b003      	add	sp, #12
    e090:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
              WsfMsgSend(attCb.handlerId, pMsg);
    e094:	f005 bbca 	b.w	1382c <WsfMsgSend>
    ATT_TRACE_WARN1("atts ccb not in use: %d", connId);
    e098:	480d      	ldr	r0, [pc, #52]	; (e0d0 <AttsHandleValueInd+0xf4>)
    e09a:	4621      	mov	r1, r4
    e09c:	f005 ff3a 	bl	13f14 <WsfTrace>
}
    e0a0:	b003      	add	sp, #12
    e0a2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  WsfTaskUnlock();
    e0a6:	f005 bc01 	b.w	138ac <WsfTaskUnlock>
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
    e0aa:	f8cd 8000 	str.w	r8, [sp]
    e0ae:	2377      	movs	r3, #119	; 0x77
    e0b0:	462a      	mov	r2, r5
    e0b2:	210f      	movs	r1, #15
    e0b4:	4620      	mov	r0, r4
    e0b6:	f001 fcfd 	bl	fab4 <attExecCallback>
  if (!pktSent && zeroCpy)
    e0ba:	e7b8      	b.n	e02e <AttsHandleValueInd+0x52>
              WsfMsgFree(pMsg);
    e0bc:	4640      	mov	r0, r8
}
    e0be:	b003      	add	sp, #12
    e0c0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
              WsfMsgFree(pMsg);
    e0c4:	f005 bbae 	b.w	13824 <WsfMsgFree>
    e0c8:	10003f28 	.word	0x10003f28
    e0cc:	10003fd0 	.word	0x10003fd0
    e0d0:	00023e68 	.word	0x00023e68

0000e0d4 <attsL2cCtrlCback>:
 */
/*************************************************************************************************/
static void attsL2cCtrlCback(wsfMsgHdr_t *pMsg)
{
  /* pass event to indication interface */
  (*attsCb.pInd->ctrlCback)(pMsg);
    e0d4:	4b01      	ldr	r3, [pc, #4]	; (e0dc <attsL2cCtrlCback+0x8>)
    e0d6:	689b      	ldr	r3, [r3, #8]
    e0d8:	685b      	ldr	r3, [r3, #4]
    e0da:	4718      	bx	r3
    e0dc:	10003f7c 	.word	0x10003f7c

0000e0e0 <attsConnCback>:
  if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
    e0e0:	788b      	ldrb	r3, [r1, #2]
    e0e2:	2b28      	cmp	r3, #40	; 0x28
{
    e0e4:	b570      	push	{r4, r5, r6, lr}
    e0e6:	460d      	mov	r5, r1
    e0e8:	4604      	mov	r4, r0
  if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
    e0ea:	d009      	beq.n	e100 <attsConnCback+0x20>
  (*attsCb.pInd->connCback)(pCcb, pDmEvt);
    e0ec:	4b0c      	ldr	r3, [pc, #48]	; (e120 <attsConnCback+0x40>)
    e0ee:	689b      	ldr	r3, [r3, #8]
    e0f0:	4629      	mov	r1, r5
    e0f2:	4620      	mov	r0, r4
    e0f4:	68db      	ldr	r3, [r3, #12]
}
    e0f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  (*attsCb.pInd->connCback)(pCcb, pDmEvt);
    e0fa:	4718      	bx	r3
{
  void *pBuf;

  while ((pBuf = WsfQueueDeq(&pCcb->prepWriteQueue)) != NULL)
  {
    WsfBufFree(pBuf);
    e0fc:	f005 fb5a 	bl	137b4 <WsfBufFree>
  while ((pBuf = WsfQueueDeq(&pCcb->prepWriteQueue)) != NULL)
    e100:	4620      	mov	r0, r4
    e102:	f005 fd3d 	bl	13b80 <WsfQueueDeq>
    e106:	2800      	cmp	r0, #0
    e108:	d1f8      	bne.n	e0fc <attsConnCback+0x1c>
    if (DmConnCheckIdle(pCcb->connId) & DM_IDLE_ATTS_DISC)
    e10a:	7f20      	ldrb	r0, [r4, #28]
    e10c:	f00a fc20 	bl	18950 <DmConnCheckIdle>
    e110:	0743      	lsls	r3, r0, #29
    e112:	d5eb      	bpl.n	e0ec <attsConnCback+0xc>
      WsfTimerStop(&pCcb->idleTimer);
    e114:	f104 0008 	add.w	r0, r4, #8
    e118:	f005 fe5c 	bl	13dd4 <WsfTimerStop>
    e11c:	e7e6      	b.n	e0ec <attsConnCback+0xc>
    e11e:	bf00      	nop
    e120:	10003f7c 	.word	0x10003f7c

0000e124 <attsDataCback>:
{
    e124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e128:	4680      	mov	r8, r0
    e12a:	4689      	mov	r9, r1
    e12c:	4614      	mov	r4, r2
  if ((pCcb = attCcbByHandle(handle)) == NULL)
    e12e:	f001 fc7f 	bl	fa30 <attCcbByHandle>
    e132:	b180      	cbz	r0, e156 <attsDataCback+0x32>
  opcode = *(pPacket + L2C_PAYLOAD_START);
    e134:	7a27      	ldrb	r7, [r4, #8]
  if ((opcode <= ATT_PDU_WRITE_REQ) ||
    e136:	2f12      	cmp	r7, #18
    e138:	4605      	mov	r5, r0
    e13a:	d90e      	bls.n	e15a <attsDataCback+0x36>
    e13c:	f1a7 0316 	sub.w	r3, r7, #22
    e140:	2b08      	cmp	r3, #8
    e142:	d90a      	bls.n	e15a <attsDataCback+0x36>
  else if (opcode == ATT_PDU_WRITE_CMD)
    e144:	2f52      	cmp	r7, #82	; 0x52
    e146:	d048      	beq.n	e1da <attsDataCback+0xb6>
  else if (opcode == ATT_PDU_SIGNED_WRITE_CMD)
    e148:	2fd2      	cmp	r7, #210	; 0xd2
    e14a:	d04f      	beq.n	e1ec <attsDataCback+0xc8>
  if (pCcb->control & ATT_CCB_STATUS_RSP_PENDING)
    e14c:	f890 a01d 	ldrb.w	sl, [r0, #29]
    e150:	f01a 0a08 	ands.w	sl, sl, #8
    e154:	d009      	beq.n	e16a <attsDataCback+0x46>
}
    e156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (pCcb->control & ATT_CCB_STATUS_RSP_PENDING)
    e15a:	7f6b      	ldrb	r3, [r5, #29]
    e15c:	0718      	lsls	r0, r3, #28
    method = ATT_OPCODE_2_METHOD(opcode);
    e15e:	ea4f 0a67 	mov.w	sl, r7, asr #1
  if (pCcb->control & ATT_CCB_STATUS_RSP_PENDING)
    e162:	d502      	bpl.n	e16a <attsDataCback+0x46>
    if (method != ATT_METHOD_VALUE_CNF)
    e164:	f1ba 0f0f 	cmp.w	sl, #15
    e168:	d1f5      	bne.n	e156 <attsDataCback+0x32>
  err = attsCsfActClientState(handle, opcode, pPacket);
    e16a:	4622      	mov	r2, r4
    e16c:	4639      	mov	r1, r7
    e16e:	4640      	mov	r0, r8
    e170:	f7ff fce8 	bl	db44 <attsCsfActClientState>
  if (err)
    e174:	4606      	mov	r6, r0
    e176:	b1f0      	cbz	r0, e1b6 <attsDataCback+0x92>
    BYTES_TO_UINT16(attHandle, pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN);
    e178:	7aa2      	ldrb	r2, [r4, #10]
    e17a:	7a63      	ldrb	r3, [r4, #9]
    e17c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    e180:	b29c      	uxth	r4, r3
  if (err && (opcode != ATT_PDU_MTU_REQ) && (opcode != ATT_PDU_VALUE_CNF) &&
    e182:	2f02      	cmp	r7, #2
    e184:	d0e7      	beq.n	e156 <attsDataCback+0x32>
    e186:	2f1e      	cmp	r7, #30
    e188:	d0e5      	beq.n	e156 <attsDataCback+0x32>
    e18a:	067b      	lsls	r3, r7, #25
    e18c:	d4e3      	bmi.n	e156 <attsDataCback+0x32>
  if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_ERR_RSP_LEN)) != NULL)
    e18e:	200d      	movs	r0, #13
    e190:	f001 fcac 	bl	faec <attMsgAlloc>
    e194:	4603      	mov	r3, r0
    e196:	2800      	cmp	r0, #0
    e198:	d0dd      	beq.n	e156 <attsDataCback+0x32>
    UINT16_TO_BSTREAM(p, attHandle);
    e19a:	7284      	strb	r4, [r0, #10]
    e19c:	0a22      	lsrs	r2, r4, #8
    UINT8_TO_BSTREAM(p, ATT_PDU_ERR_RSP);
    e19e:	2401      	movs	r4, #1
    UINT16_TO_BSTREAM(p, attHandle);
    e1a0:	72c2      	strb	r2, [r0, #11]
    UINT8_TO_BSTREAM(p, opcode);
    e1a2:	7247      	strb	r7, [r0, #9]
    UINT8_TO_BSTREAM(p, reason);
    e1a4:	7306      	strb	r6, [r0, #12]
    UINT8_TO_BSTREAM(p, ATT_PDU_ERR_RSP);
    e1a6:	721c      	strb	r4, [r3, #8]
    L2cDataReq(L2C_CID_ATT, handle, ATT_ERR_RSP_LEN, pBuf);
    e1a8:	4641      	mov	r1, r8
    e1aa:	2205      	movs	r2, #5
}
    e1ac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    L2cDataReq(L2C_CID_ATT, handle, ATT_ERR_RSP_LEN, pBuf);
    e1b0:	2004      	movs	r0, #4
    e1b2:	f002 bb1d 	b.w	107f0 <L2cDataReq>
    procFcn = attsProcFcnTbl[method];
    e1b6:	4b10      	ldr	r3, [pc, #64]	; (e1f8 <attsDataCback+0xd4>)
    e1b8:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
    if (procFcn != NULL)
    e1bc:	b153      	cbz	r3, e1d4 <attsDataCback+0xb0>
      if (len >= attsMinPduLen[method])
    e1be:	4a0f      	ldr	r2, [pc, #60]	; (e1fc <attsDataCback+0xd8>)
    e1c0:	f812 200a 	ldrb.w	r2, [r2, sl]
    e1c4:	454a      	cmp	r2, r9
    e1c6:	d80e      	bhi.n	e1e6 <attsDataCback+0xc2>
        (*procFcn)(pCcb, len, pPacket);
    e1c8:	4622      	mov	r2, r4
    e1ca:	4649      	mov	r1, r9
    e1cc:	4628      	mov	r0, r5
}
    e1ce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        (*procFcn)(pCcb, len, pPacket);
    e1d2:	4718      	bx	r3
    attHandle = ATT_HANDLE_NONE;
    e1d4:	4604      	mov	r4, r0
      err = ATT_ERR_NOT_SUP;
    e1d6:	2606      	movs	r6, #6
    e1d8:	e7d3      	b.n	e182 <attsDataCback+0x5e>
  if (pCcb->control & ATT_CCB_STATUS_RSP_PENDING)
    e1da:	7f43      	ldrb	r3, [r0, #29]
    e1dc:	0719      	lsls	r1, r3, #28
    e1de:	d4ba      	bmi.n	e156 <attsDataCback+0x32>
    e1e0:	f04f 0a0a 	mov.w	sl, #10
    e1e4:	e7c1      	b.n	e16a <attsDataCback+0x46>
    attHandle = ATT_HANDLE_NONE;
    e1e6:	4634      	mov	r4, r6
        err = ATT_ERR_INVALID_PDU;
    e1e8:	2604      	movs	r6, #4
    e1ea:	e7ca      	b.n	e182 <attsDataCback+0x5e>
  if (pCcb->control & ATT_CCB_STATUS_RSP_PENDING)
    e1ec:	7f43      	ldrb	r3, [r0, #29]
    e1ee:	071a      	lsls	r2, r3, #28
    e1f0:	d4b1      	bmi.n	e156 <attsDataCback+0x32>
    e1f2:	f04f 0a10 	mov.w	sl, #16
    e1f6:	e7b8      	b.n	e16a <attsDataCback+0x46>
    e1f8:	10002b08 	.word	0x10002b08
    e1fc:	00023ea0 	.word	0x00023ea0

0000e200 <attsErrRsp>:
{
    e200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e204:	4607      	mov	r7, r0
  if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_ERR_RSP_LEN)) != NULL)
    e206:	200d      	movs	r0, #13
{
    e208:	460e      	mov	r6, r1
    e20a:	4614      	mov	r4, r2
    e20c:	461d      	mov	r5, r3
  if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_ERR_RSP_LEN)) != NULL)
    e20e:	f001 fc6d 	bl	faec <attMsgAlloc>
    e212:	b180      	cbz	r0, e236 <attsErrRsp+0x36>
    e214:	4684      	mov	ip, r0
    UINT16_TO_BSTREAM(p, attHandle);
    e216:	7284      	strb	r4, [r0, #10]
    e218:	0a23      	lsrs	r3, r4, #8
    UINT8_TO_BSTREAM(p, ATT_PDU_ERR_RSP);
    e21a:	2401      	movs	r4, #1
    UINT16_TO_BSTREAM(p, attHandle);
    e21c:	72c3      	strb	r3, [r0, #11]
    UINT8_TO_BSTREAM(p, opcode);
    e21e:	7246      	strb	r6, [r0, #9]
    UINT8_TO_BSTREAM(p, reason);
    e220:	7305      	strb	r5, [r0, #12]
    UINT8_TO_BSTREAM(p, ATT_PDU_ERR_RSP);
    e222:	f88c 4008 	strb.w	r4, [ip, #8]
    L2cDataReq(L2C_CID_ATT, handle, ATT_ERR_RSP_LEN, pBuf);
    e226:	4603      	mov	r3, r0
    e228:	4639      	mov	r1, r7
    e22a:	2205      	movs	r2, #5
}
    e22c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    L2cDataReq(L2C_CID_ATT, handle, ATT_ERR_RSP_LEN, pBuf);
    e230:	2004      	movs	r0, #4
    e232:	f002 badd 	b.w	107f0 <L2cDataReq>
}
    e236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e23a:	bf00      	nop

0000e23c <attsClearPrepWrites>:
{
    e23c:	b510      	push	{r4, lr}
    e23e:	4604      	mov	r4, r0
  while ((pBuf = WsfQueueDeq(&pCcb->prepWriteQueue)) != NULL)
    e240:	e001      	b.n	e246 <attsClearPrepWrites+0xa>
    WsfBufFree(pBuf);
    e242:	f005 fab7 	bl	137b4 <WsfBufFree>
  while ((pBuf = WsfQueueDeq(&pCcb->prepWriteQueue)) != NULL)
    e246:	4620      	mov	r0, r4
    e248:	f005 fc9a 	bl	13b80 <WsfQueueDeq>
    e24c:	2800      	cmp	r0, #0
    e24e:	d1f8      	bne.n	e242 <attsClearPrepWrites+0x6>
  }
}
    e250:	bd10      	pop	{r4, pc}
    e252:	bf00      	nop

0000e254 <attsDiscBusy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsDiscBusy(attCcb_t *pCcb)
{
    e254:	b538      	push	{r3, r4, r5, lr}
  if (pAttCfg->discIdleTimeout > 0)
    e256:	4d0d      	ldr	r5, [pc, #52]	; (e28c <attsDiscBusy+0x38>)
    e258:	682b      	ldr	r3, [r5, #0]
    e25a:	681b      	ldr	r3, [r3, #0]
    e25c:	b903      	cbnz	r3, e260 <attsDiscBusy+0xc>
    pCcb->idleTimer.handlerId = attCb.handlerId;
    pCcb->idleTimer.msg.event = ATTS_MSG_IDLE_TIMEOUT;
    pCcb->idleTimer.msg.param = pCcb->connId;
    WsfTimerStartSec(&pCcb->idleTimer, pAttCfg->discIdleTimeout);
  }
}
    e25e:	bd38      	pop	{r3, r4, r5, pc}
    DmConnSetIdle(pCcb->connId, DM_IDLE_ATTS_DISC, DM_CONN_BUSY);
    e260:	4604      	mov	r4, r0
    e262:	2104      	movs	r1, #4
    e264:	7f00      	ldrb	r0, [r0, #28]
    e266:	2201      	movs	r2, #1
    e268:	f00a fb44 	bl	188f4 <DmConnSetIdle>
    pCcb->idleTimer.handlerId = attCb.handlerId;
    e26c:	4b08      	ldr	r3, [pc, #32]	; (e290 <attsDiscBusy+0x3c>)
    WsfTimerStartSec(&pCcb->idleTimer, pAttCfg->discIdleTimeout);
    e26e:	682a      	ldr	r2, [r5, #0]
    pCcb->idleTimer.handlerId = attCb.handlerId;
    e270:	f893 007c 	ldrb.w	r0, [r3, #124]	; 0x7c
    e274:	7520      	strb	r0, [r4, #20]
    pCcb->idleTimer.msg.event = ATTS_MSG_IDLE_TIMEOUT;
    e276:	2120      	movs	r1, #32
    pCcb->idleTimer.msg.param = pCcb->connId;
    e278:	7f23      	ldrb	r3, [r4, #28]
    pCcb->idleTimer.msg.event = ATTS_MSG_IDLE_TIMEOUT;
    e27a:	74a1      	strb	r1, [r4, #18]
    WsfTimerStartSec(&pCcb->idleTimer, pAttCfg->discIdleTimeout);
    e27c:	6811      	ldr	r1, [r2, #0]
    pCcb->idleTimer.msg.param = pCcb->connId;
    e27e:	8223      	strh	r3, [r4, #16]
    WsfTimerStartSec(&pCcb->idleTimer, pAttCfg->discIdleTimeout);
    e280:	f104 0008 	add.w	r0, r4, #8
}
    e284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    WsfTimerStartSec(&pCcb->idleTimer, pAttCfg->discIdleTimeout);
    e288:	f005 bd1e 	b.w	13cc8 <WsfTimerStartSec>
    e28c:	10002b00 	.word	0x10002b00
    e290:	10003fd0 	.word	0x10003fd0

0000e294 <attsProcessDatabaseHashUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcessDatabaseHashUpdate(secCmacMsg_t *pMsg)
{
    e294:	b530      	push	{r4, r5, lr}
    e296:	4604      	mov	r4, r0
    e298:	b08b      	sub	sp, #44	; 0x2c
  evt.handle = ATT_HANDLE_NONE;
  evt.continuing = FALSE;
  evt.mtu = 0;

  /* free plain text buffer */
  if (pMsg->pPlainText != NULL)
    e29a:	6880      	ldr	r0, [r0, #8]
  evt.continuing = FALSE;
    e29c:	2500      	movs	r5, #0
  evt.hdr.param = DM_CONN_ID_NONE;
    e29e:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
  evt.valueLen = ATT_DATABASE_HASH_LEN;
    e2a2:	2310      	movs	r3, #16
  evt.hdr.param = DM_CONN_ID_NONE;
    e2a4:	9206      	str	r2, [sp, #24]
  evt.valueLen = ATT_DATABASE_HASH_LEN;
    e2a6:	9308      	str	r3, [sp, #32]
  evt.continuing = FALSE;
    e2a8:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
  evt.mtu = 0;
    e2ac:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
  if (pMsg->pPlainText != NULL)
    e2b0:	b110      	cbz	r0, e2b8 <attsProcessDatabaseHashUpdate+0x24>
  {
    WsfBufFree(pMsg->pPlainText);
    e2b2:	f005 fa7f 	bl	137b4 <WsfBufFree>
    pMsg->pPlainText = NULL;
    e2b6:	60a5      	str	r5, [r4, #8]

  /* copy in little endian */
  evt.pValue = pMsg->pCiphertext;

  /* find GATT database handle */
  dbhCharHandle = attsFindUuidInRange(ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
    e2b8:	a904      	add	r1, sp, #16
    e2ba:	aa03      	add	r2, sp, #12
  evt.pValue = pMsg->pCiphertext;
    e2bc:	6864      	ldr	r4, [r4, #4]
  dbhCharHandle = attsFindUuidInRange(ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
    e2be:	4b19      	ldr	r3, [pc, #100]	; (e324 <attsProcessDatabaseHashUpdate+0x90>)
  evt.pValue = pMsg->pCiphertext;
    e2c0:	9407      	str	r4, [sp, #28]
  dbhCharHandle = attsFindUuidInRange(ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
    e2c2:	e9cd 2100 	strd	r2, r1, [sp]
    e2c6:	2001      	movs	r0, #1
    e2c8:	2202      	movs	r2, #2
    e2ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e2ce:	f000 fc19 	bl	eb04 <attsFindUuidInRange>
                                      (uint8_t *) attGattDbhChUuid, &pAttr, &pGroup);

  if (dbhCharHandle != ATT_HANDLE_NONE)
    e2d2:	4604      	mov	r4, r0
    e2d4:	b940      	cbnz	r0, e2e8 <attsProcessDatabaseHashUpdate+0x54>
    /* Set hash in service. */
    AttsSetAttr(dbhCharHandle, SEC_CMAC_HASH_LEN, evt.pValue);
  }

  /* set hash update complete */
  attsCsfSetHashUpdateStatus(FALSE);
    e2d6:	2000      	movs	r0, #0
    e2d8:	f7ff fbe8 	bl	daac <attsCsfSetHashUpdateStatus>

  attCb.cback(&evt);
    e2dc:	4b12      	ldr	r3, [pc, #72]	; (e328 <attsProcessDatabaseHashUpdate+0x94>)
    e2de:	a806      	add	r0, sp, #24
    e2e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    e2e2:	4798      	blx	r3
}
    e2e4:	b00b      	add	sp, #44	; 0x2c
    e2e6:	bd30      	pop	{r4, r5, pc}
    AttsSetAttr(dbhCharHandle, SEC_CMAC_HASH_LEN, evt.pValue);
    e2e8:	9d07      	ldr	r5, [sp, #28]
{
  attsAttr_t  *pAttr;
  attsGroup_t *pGroup;
  uint8_t     err = ATT_SUCCESS;

  WsfTaskLock();
    e2ea:	f005 fad5 	bl	13898 <WsfTaskLock>

  /* find attribute */
  if ((pAttr = attsFindByHandle(handle, &pGroup)) != NULL)
    e2ee:	a905      	add	r1, sp, #20
    e2f0:	4620      	mov	r0, r4
    e2f2:	f000 fa49 	bl	e788 <attsFindByHandle>
    e2f6:	b110      	cbz	r0, e2fe <attsProcessDatabaseHashUpdate+0x6a>
  {
    /* verify write length */
    if (valueLen > pAttr->maxLen)
    e2f8:	8983      	ldrh	r3, [r0, #12]
    e2fa:	2b0f      	cmp	r3, #15
    e2fc:	d802      	bhi.n	e304 <attsProcessDatabaseHashUpdate+0x70>
  else
  {
    err = ATT_ERR_NOT_FOUND;
  }

  WsfTaskUnlock();
    e2fe:	f005 fad5 	bl	138ac <WsfTaskUnlock>

  return err;
    e302:	e7e8      	b.n	e2d6 <attsProcessDatabaseHashUpdate+0x42>
      memcpy(pAttr->pValue, pValue, valueLen);
    e304:	6843      	ldr	r3, [r0, #4]
    e306:	682c      	ldr	r4, [r5, #0]
    e308:	6869      	ldr	r1, [r5, #4]
    e30a:	68aa      	ldr	r2, [r5, #8]
    e30c:	68ed      	ldr	r5, [r5, #12]
    e30e:	60dd      	str	r5, [r3, #12]
    e310:	601c      	str	r4, [r3, #0]
    e312:	6059      	str	r1, [r3, #4]
    e314:	609a      	str	r2, [r3, #8]
      if ((pAttr->settings & ATTS_SET_VARIABLE_LEN) != 0)
    e316:	7b83      	ldrb	r3, [r0, #14]
    e318:	071b      	lsls	r3, r3, #28
    e31a:	d5f0      	bpl.n	e2fe <attsProcessDatabaseHashUpdate+0x6a>
        *(pAttr->pLen) = valueLen;
    e31c:	6883      	ldr	r3, [r0, #8]
    e31e:	2210      	movs	r2, #16
    e320:	801a      	strh	r2, [r3, #0]
    e322:	e7ec      	b.n	e2fe <attsProcessDatabaseHashUpdate+0x6a>
    e324:	00023ee0 	.word	0x00023ee0
    e328:	10003fd0 	.word	0x10003fd0

0000e32c <attsMsgCback>:
  if (pMsg->event == ATTS_MSG_IDLE_TIMEOUT)
    e32c:	7882      	ldrb	r2, [r0, #2]
    e32e:	2a20      	cmp	r2, #32
    e330:	d00a      	beq.n	e348 <attsMsgCback+0x1c>
  else if (pMsg->event <= ATTS_MSG_IND_TIMEOUT)
    e332:	2a22      	cmp	r2, #34	; 0x22
    e334:	d904      	bls.n	e340 <attsMsgCback+0x14>
  else if (pMsg->event == ATTS_MSG_SIGN_CMAC_CMPL)
    e336:	2a23      	cmp	r2, #35	; 0x23
    e338:	d00b      	beq.n	e352 <attsMsgCback+0x26>
  else if (pMsg->event == ATTS_MSG_DBH_CMAC_CMPL)
    e33a:	2a24      	cmp	r2, #36	; 0x24
    e33c:	d00c      	beq.n	e358 <attsMsgCback+0x2c>
}
    e33e:	4770      	bx	lr
    (*attsCb.pInd->msgCback)(pMsg);
    e340:	4b06      	ldr	r3, [pc, #24]	; (e35c <attsMsgCback+0x30>)
    e342:	689b      	ldr	r3, [r3, #8]
    e344:	689b      	ldr	r3, [r3, #8]
    e346:	4718      	bx	r3
    DmConnSetIdle((dmConnId_t) pMsg->param, DM_IDLE_ATTS_DISC, DM_CONN_IDLE);
    e348:	7800      	ldrb	r0, [r0, #0]
    e34a:	2200      	movs	r2, #0
    e34c:	2104      	movs	r1, #4
    e34e:	f00a bad1 	b.w	188f4 <DmConnSetIdle>
    (*attsCb.signMsgCback)(pMsg);
    e352:	4b02      	ldr	r3, [pc, #8]	; (e35c <attsMsgCback+0x30>)
    e354:	68db      	ldr	r3, [r3, #12]
    e356:	4718      	bx	r3
    attsProcessDatabaseHashUpdate((secCmacMsg_t *) pMsg);
    e358:	f7ff bf9c 	b.w	e294 <attsProcessDatabaseHashUpdate>
    e35c:	10003f7c 	.word	0x10003f7c

0000e360 <attsCheckPendDbHashReadRsp>:
{
    e360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e364:	4c39      	ldr	r4, [pc, #228]	; (e44c <attsCheckPendDbHashReadRsp+0xec>)
    e366:	b084      	sub	sp, #16
      pCcb->pPendDbHashRsp = NULL;
    e368:	f04f 0900 	mov.w	r9, #0
    e36c:	f104 086c 	add.w	r8, r4, #108	; 0x6c
    UINT8_TO_BSTREAM(p, ATT_PDU_ERR_RSP);
    e370:	f04f 0a01 	mov.w	sl, #1
    if (pCcb->pPendDbHashRsp)
    e374:	6a23      	ldr	r3, [r4, #32]
    e376:	2b00      	cmp	r3, #0
    e378:	d032      	beq.n	e3e0 <attsCheckPendDbHashReadRsp+0x80>
      if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
    e37a:	8b60      	ldrh	r0, [r4, #26]
    e37c:	3008      	adds	r0, #8
    e37e:	b280      	uxth	r0, r0
    e380:	f001 fbb4 	bl	faec <attMsgAlloc>
        UINT8_TO_BSTREAM(p, ATT_PDU_READ_TYPE_RSP);
    e384:	2209      	movs	r2, #9
        UINT8_TO_BSTREAM(p, ATT_DATABASE_HASH_LEN + sizeof(uint16_t));
    e386:	2312      	movs	r3, #18
        if ((pAttr = attsFindByHandle(pCcb->pPendDbHashRsp->handle, &pGroup)) != NULL)
    e388:	a903      	add	r1, sp, #12
      if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
    e38a:	4605      	mov	r5, r0
        UINT16_TO_BSTREAM(p, pCcb->pPendDbHashRsp->handle);
    e38c:	f100 070c 	add.w	r7, r0, #12
      if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
    e390:	b360      	cbz	r0, e3ec <attsCheckPendDbHashReadRsp+0x8c>
        UINT8_TO_BSTREAM(p, ATT_PDU_READ_TYPE_RSP);
    e392:	7202      	strb	r2, [r0, #8]
        UINT8_TO_BSTREAM(p, ATT_DATABASE_HASH_LEN + sizeof(uint16_t));
    e394:	7243      	strb	r3, [r0, #9]
        UINT16_TO_BSTREAM(p, pCcb->pPendDbHashRsp->handle);
    e396:	6a23      	ldr	r3, [r4, #32]
    e398:	885b      	ldrh	r3, [r3, #2]
    e39a:	7283      	strb	r3, [r0, #10]
    e39c:	6a23      	ldr	r3, [r4, #32]
    e39e:	885b      	ldrh	r3, [r3, #2]
    e3a0:	0a1b      	lsrs	r3, r3, #8
    e3a2:	72c3      	strb	r3, [r0, #11]
        if ((pAttr = attsFindByHandle(pCcb->pPendDbHashRsp->handle, &pGroup)) != NULL)
    e3a4:	6a23      	ldr	r3, [r4, #32]
    e3a6:	8858      	ldrh	r0, [r3, #2]
    e3a8:	f000 f9ee 	bl	e788 <attsFindByHandle>
    e3ac:	4606      	mov	r6, r0
          memcpy(p, pAttr->pValue, *pAttr->pLen);
    e3ae:	4638      	mov	r0, r7
        if ((pAttr = attsFindByHandle(pCcb->pPendDbHashRsp->handle, &pGroup)) != NULL)
    e3b0:	2e00      	cmp	r6, #0
    e3b2:	d037      	beq.n	e424 <attsCheckPendDbHashReadRsp+0xc4>
          memcpy(p, pAttr->pValue, *pAttr->pLen);
    e3b4:	68b3      	ldr	r3, [r6, #8]
    e3b6:	6871      	ldr	r1, [r6, #4]
    e3b8:	881a      	ldrh	r2, [r3, #0]
    e3ba:	f7fd fea1 	bl	c100 <memcpy>
          p += *pAttr->pLen;
    e3be:	68b3      	ldr	r3, [r6, #8]
          L2cDataReq(L2C_CID_ATT, pCcb->handle, p - (pBuf + L2C_PAYLOAD_START), pBuf);
    e3c0:	8b21      	ldrh	r1, [r4, #24]
          p += *pAttr->pLen;
    e3c2:	881a      	ldrh	r2, [r3, #0]
    e3c4:	4417      	add	r7, r2
        p = pBuf + L2C_PAYLOAD_START;
    e3c6:	f105 0208 	add.w	r2, r5, #8
          L2cDataReq(L2C_CID_ATT, pCcb->handle, p - (pBuf + L2C_PAYLOAD_START), pBuf);
    e3ca:	1aba      	subs	r2, r7, r2
    e3cc:	462b      	mov	r3, r5
    e3ce:	b292      	uxth	r2, r2
    e3d0:	2004      	movs	r0, #4
    e3d2:	f002 fa0d 	bl	107f0 <L2cDataReq>
      WsfBufFree(pCcb->pPendDbHashRsp);
    e3d6:	6a20      	ldr	r0, [r4, #32]
    e3d8:	f005 f9ec 	bl	137b4 <WsfBufFree>
      pCcb->pPendDbHashRsp = NULL;
    e3dc:	f8c4 9020 	str.w	r9, [r4, #32]
  for (uint8_t i = 0; i < DM_CONN_MAX; i++)
    e3e0:	3424      	adds	r4, #36	; 0x24
    e3e2:	4544      	cmp	r4, r8
    e3e4:	d1c6      	bne.n	e374 <attsCheckPendDbHashReadRsp+0x14>
}
    e3e6:	b004      	add	sp, #16
    e3e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        attsErrRsp(pCcb->connId, ATT_PDU_READ_TYPE_REQ, pCcb->pPendDbHashRsp->startHandle, ATT_ERR_RESOURCES);
    e3ec:	6a23      	ldr	r3, [r4, #32]
    e3ee:	7f21      	ldrb	r1, [r4, #28]
    e3f0:	881d      	ldrh	r5, [r3, #0]
    e3f2:	9101      	str	r1, [sp, #4]
  if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_ERR_RSP_LEN)) != NULL)
    e3f4:	200d      	movs	r0, #13
    e3f6:	f001 fb79 	bl	faec <attMsgAlloc>
    UINT8_TO_BSTREAM(p, opcode);
    e3fa:	f04f 0c08 	mov.w	ip, #8
  if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_ERR_RSP_LEN)) != NULL)
    e3fe:	4603      	mov	r3, r0
    L2cDataReq(L2C_CID_ATT, handle, ATT_ERR_RSP_LEN, pBuf);
    e400:	9901      	ldr	r1, [sp, #4]
    UINT16_TO_BSTREAM(p, attHandle);
    e402:	fa25 f70c 	lsr.w	r7, r5, ip
    UINT8_TO_BSTREAM(p, reason);
    e406:	2611      	movs	r6, #17
    L2cDataReq(L2C_CID_ATT, handle, ATT_ERR_RSP_LEN, pBuf);
    e408:	2205      	movs	r2, #5
    e40a:	2004      	movs	r0, #4
  if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_ERR_RSP_LEN)) != NULL)
    e40c:	2b00      	cmp	r3, #0
    e40e:	d0e2      	beq.n	e3d6 <attsCheckPendDbHashReadRsp+0x76>
    UINT8_TO_BSTREAM(p, opcode);
    e410:	f883 c009 	strb.w	ip, [r3, #9]
    UINT16_TO_BSTREAM(p, attHandle);
    e414:	729d      	strb	r5, [r3, #10]
    e416:	72df      	strb	r7, [r3, #11]
    UINT8_TO_BSTREAM(p, reason);
    e418:	731e      	strb	r6, [r3, #12]
    UINT8_TO_BSTREAM(p, ATT_PDU_ERR_RSP);
    e41a:	f883 a008 	strb.w	sl, [r3, #8]
    L2cDataReq(L2C_CID_ATT, handle, ATT_ERR_RSP_LEN, pBuf);
    e41e:	f002 f9e7 	bl	107f0 <L2cDataReq>
    e422:	e7d8      	b.n	e3d6 <attsCheckPendDbHashReadRsp+0x76>
          attsErrRsp(pCcb->connId, ATT_PDU_READ_TYPE_REQ, pCcb->pPendDbHashRsp->startHandle, ATT_ERR_NOT_FOUND);
    e424:	6a23      	ldr	r3, [r4, #32]
    e426:	7f21      	ldrb	r1, [r4, #28]
    e428:	881d      	ldrh	r5, [r3, #0]
    e42a:	9101      	str	r1, [sp, #4]
  if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_ERR_RSP_LEN)) != NULL)
    e42c:	200d      	movs	r0, #13
    e42e:	f001 fb5d 	bl	faec <attMsgAlloc>
    UINT8_TO_BSTREAM(p, opcode);
    e432:	f04f 0c08 	mov.w	ip, #8
  if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_ERR_RSP_LEN)) != NULL)
    e436:	4603      	mov	r3, r0
    L2cDataReq(L2C_CID_ATT, handle, ATT_ERR_RSP_LEN, pBuf);
    e438:	9901      	ldr	r1, [sp, #4]
    UINT16_TO_BSTREAM(p, attHandle);
    e43a:	fa25 f70c 	lsr.w	r7, r5, ip
    UINT8_TO_BSTREAM(p, reason);
    e43e:	260a      	movs	r6, #10
    L2cDataReq(L2C_CID_ATT, handle, ATT_ERR_RSP_LEN, pBuf);
    e440:	2205      	movs	r2, #5
    e442:	2004      	movs	r0, #4
  if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_ERR_RSP_LEN)) != NULL)
    e444:	2b00      	cmp	r3, #0
    e446:	d1e3      	bne.n	e410 <attsCheckPendDbHashReadRsp+0xb0>
    e448:	e7c5      	b.n	e3d6 <attsCheckPendDbHashReadRsp+0x76>
    e44a:	bf00      	nop
    e44c:	10003fd0 	.word	0x10003fd0

0000e450 <AttsInit>:
  WSF_QUEUE_INIT(&attsCb.groupQueue);
    e450:	4b07      	ldr	r3, [pc, #28]	; (e470 <AttsInit+0x20>)
  attCb.pServer = &attsFcnIf;
    e452:	4908      	ldr	r1, [pc, #32]	; (e474 <AttsInit+0x24>)
  attsCb.signMsgCback = (attMsgHandler_t) attEmptyHandler;
    e454:	4808      	ldr	r0, [pc, #32]	; (e478 <AttsInit+0x28>)
  WSF_QUEUE_INIT(&attsCb.groupQueue);
    e456:	2200      	movs	r2, #0
{
    e458:	b410      	push	{r4}
  attsCb.pInd = &attFcnDefault;
    e45a:	4c08      	ldr	r4, [pc, #32]	; (e47c <AttsInit+0x2c>)
    e45c:	609c      	str	r4, [r3, #8]
  WSF_QUEUE_INIT(&attsCb.groupQueue);
    e45e:	e9c3 2200 	strd	r2, r2, [r3]
  attCb.pServer = &attsFcnIf;
    e462:	4a07      	ldr	r2, [pc, #28]	; (e480 <AttsInit+0x30>)
}
    e464:	f85d 4b04 	ldr.w	r4, [sp], #4
  attsCb.signMsgCback = (attMsgHandler_t) attEmptyHandler;
    e468:	60d8      	str	r0, [r3, #12]
  attCb.pServer = &attsFcnIf;
    e46a:	670a      	str	r2, [r1, #112]	; 0x70
}
    e46c:	4770      	bx	lr
    e46e:	bf00      	nop
    e470:	10003f7c 	.word	0x10003f7c
    e474:	10003fd0 	.word	0x10003fd0
    e478:	0000f94d 	.word	0x0000f94d
    e47c:	00023eb4 	.word	0x00023eb4
    e480:	00023e90 	.word	0x00023e90

0000e484 <AttsCalculateDbHash>:
{
    e484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  attsGroup_t *pGroup = (attsGroup_t *) attsCb.groupQueue.pHead;
    e488:	4f86      	ldr	r7, [pc, #536]	; (e6a4 <AttsCalculateDbHash+0x220>)
    e48a:	683d      	ldr	r5, [r7, #0]
{
    e48c:	b087      	sub	sp, #28
  while (pGroup != NULL)
    e48e:	2d00      	cmp	r5, #0
    e490:	f000 8106 	beq.w	e6a0 <AttsCalculateDbHash+0x21c>
    e494:	f8df a210 	ldr.w	sl, [pc, #528]	; e6a8 <AttsCalculateDbHash+0x224>
    e498:	2000      	movs	r0, #0
    e49a:	f89a 1000 	ldrb.w	r1, [sl]
  uint16_t msgLen = 0;
    e49e:	4604      	mov	r4, r0
  switch (uuid)
    e4a0:	f642 1903 	movw	r9, #10499	; 0x2903
    uint8_t numAttrs = (pGroup->endHandle - pGroup->startHandle) + 1;
    e4a4:	8a6b      	ldrh	r3, [r5, #18]
    e4a6:	8a2a      	ldrh	r2, [r5, #16]
    e4a8:	3301      	adds	r3, #1
    e4aa:	1a9b      	subs	r3, r3, r2
    for (attsAttr_t *pAttr = pGroup->pAttr; numAttrs != 0; numAttrs--, pAttr++)
    e4ac:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    e4b0:	686a      	ldr	r2, [r5, #4]
    e4b2:	d034      	beq.n	e51e <AttsCalculateDbHash+0x9a>
    e4b4:	3b01      	subs	r3, #1
    e4b6:	f102 0c20 	add.w	ip, r2, #32
    e4ba:	b2db      	uxtb	r3, r3
    e4bc:	3210      	adds	r2, #16
    e4be:	eb0c 1c03 	add.w	ip, ip, r3, lsl #4
  switch (uuid)
    e4c2:	f642 1805 	movw	r8, #10501	; 0x2905
    e4c6:	f642 0602 	movw	r6, #10242	; 0x2802
    e4ca:	f642 0e03 	movw	lr, #10243	; 0x2803
  if (isAttrCharVal)
    e4ce:	2900      	cmp	r1, #0
    e4d0:	f040 80b6 	bne.w	e640 <AttsCalculateDbHash+0x1bc>
  BYTES_TO_UINT16(uuid, pAttr->pUuid);
    e4d4:	f852 3c10 	ldr.w	r3, [r2, #-16]
    e4d8:	f893 b001 	ldrb.w	fp, [r3, #1]
    e4dc:	781b      	ldrb	r3, [r3, #0]
    e4de:	eb03 230b 	add.w	r3, r3, fp, lsl #8
    e4e2:	b29b      	uxth	r3, r3
  switch (uuid)
    e4e4:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
    e4e8:	d008      	beq.n	e4fc <AttsCalculateDbHash+0x78>
    e4ea:	f200 80a2 	bhi.w	e632 <AttsCalculateDbHash+0x1ae>
    e4ee:	42b3      	cmp	r3, r6
    e4f0:	f240 809a 	bls.w	e628 <AttsCalculateDbHash+0x1a4>
    e4f4:	4573      	cmp	r3, lr
    e4f6:	d10f      	bne.n	e518 <AttsCalculateDbHash+0x94>
    e4f8:	2001      	movs	r0, #1
    e4fa:	4601      	mov	r1, r0
      length += *pAttr->pLen;
    e4fc:	f852 3c08 	ldr.w	r3, [r2, #-8]
    e500:	881b      	ldrh	r3, [r3, #0]
    e502:	3302      	adds	r3, #2
    e504:	b29b      	uxth	r3, r3
      if (pAttr->settings & ATTS_SET_UUID_128)
    e506:	f812 bc02 	ldrb.w	fp, [r2, #-2]
    e50a:	f01b 0f01 	tst.w	fp, #1
      msgLen += attsIsHashableAttr(pAttr);
    e50e:	bf14      	ite	ne
    e510:	3410      	addne	r4, #16
    e512:	3402      	addeq	r4, #2
    e514:	441c      	add	r4, r3
    e516:	b2a4      	uxth	r4, r4
    for (attsAttr_t *pAttr = pGroup->pAttr; numAttrs != 0; numAttrs--, pAttr++)
    e518:	3210      	adds	r2, #16
    e51a:	4594      	cmp	ip, r2
    e51c:	d1d7      	bne.n	e4ce <AttsCalculateDbHash+0x4a>
    pGroup = pGroup->pNext;
    e51e:	682d      	ldr	r5, [r5, #0]
  while (pGroup != NULL)
    e520:	2d00      	cmp	r5, #0
    e522:	d1bf      	bne.n	e4a4 <AttsCalculateDbHash+0x20>
    e524:	b108      	cbz	r0, e52a <AttsCalculateDbHash+0xa6>
    e526:	f88a 1000 	strb.w	r1, [sl]
  if ((pMsg = WsfBufAlloc(msgLen)) != NULL)
    e52a:	4620      	mov	r0, r4
    e52c:	f005 f912 	bl	13754 <WsfBufAlloc>
    e530:	4680      	mov	r8, r0
    e532:	2800      	cmp	r0, #0
    e534:	d075      	beq.n	e622 <AttsCalculateDbHash+0x19e>
    pGroup = (attsGroup_t *)attsCb.groupQueue.pHead;
    e536:	f8d7 9000 	ldr.w	r9, [r7]
    uint8_t hashingKey[16] = { 0, };
    e53a:	2300      	movs	r3, #0
    e53c:	e9cd 3302 	strd	r3, r3, [sp, #8]
    e540:	e9cd 3304 	strd	r3, r3, [sp, #16]
    while (pGroup)
    e544:	f1b9 0f00 	cmp.w	r9, #0
    e548:	d05f      	beq.n	e60a <AttsCalculateDbHash+0x186>
    e54a:	4f57      	ldr	r7, [pc, #348]	; (e6a8 <AttsCalculateDbHash+0x224>)
    e54c:	4602      	mov	r2, r0
      uint16_t attHandle = pGroup->startHandle;
    e54e:	f8b9 5010 	ldrh.w	r5, [r9, #16]
      for (attsAttr_t *pAttr = pGroup->pAttr; attHandle <= pGroup->endHandle; attHandle++, pAttr++)
    e552:	f8b9 1012 	ldrh.w	r1, [r9, #18]
    e556:	f8d9 6004 	ldr.w	r6, [r9, #4]
    e55a:	428d      	cmp	r5, r1
    e55c:	d850      	bhi.n	e600 <AttsCalculateDbHash+0x17c>
    e55e:	3610      	adds	r6, #16
  switch (uuid)
    e560:	f642 1a03 	movw	sl, #10499	; 0x2903
    e564:	e041      	b.n	e5ea <AttsCalculateDbHash+0x166>
  BYTES_TO_UINT16(uuid, pAttr->pUuid);
    e566:	f856 0c10 	ldr.w	r0, [r6, #-16]
    e56a:	f890 c001 	ldrb.w	ip, [r0, #1]
    e56e:	7803      	ldrb	r3, [r0, #0]
    e570:	eb03 230c 	add.w	r3, r3, ip, lsl #8
    e574:	b29b      	uxth	r3, r3
  switch (uuid)
    e576:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
    e57a:	d00a      	beq.n	e592 <AttsCalculateDbHash+0x10e>
    e57c:	d867      	bhi.n	e64e <AttsCalculateDbHash+0x1ca>
    e57e:	f642 0002 	movw	r0, #10242	; 0x2802
    e582:	4283      	cmp	r3, r0
    e584:	d95f      	bls.n	e646 <AttsCalculateDbHash+0x1c2>
    e586:	f642 0003 	movw	r0, #10243	; 0x2803
    e58a:	4283      	cmp	r3, r0
    e58c:	d127      	bne.n	e5de <AttsCalculateDbHash+0x15a>
      isAttrCharVal = TRUE;
    e58e:	2301      	movs	r3, #1
    e590:	703b      	strb	r3, [r7, #0]
      length += *pAttr->pLen;
    e592:	f856 3c08 	ldr.w	r3, [r6, #-8]
    e596:	881b      	ldrh	r3, [r3, #0]
    e598:	3302      	adds	r3, #2
    e59a:	b29b      	uxth	r3, r3
      if (pAttr->settings & ATTS_SET_UUID_128)
    e59c:	f816 0c02 	ldrb.w	r0, [r6, #-2]
    e5a0:	07c0      	lsls	r0, r0, #31
        length += 16;
    e5a2:	bf4c      	ite	mi
    e5a4:	3310      	addmi	r3, #16
        length += 2;
    e5a6:	3302      	addpl	r3, #2
    e5a8:	b298      	uxth	r0, r3
        if (valLen)
    e5aa:	b1c0      	cbz	r0, e5de <AttsCalculateDbHash+0x15a>
          UINT16_TO_BSTREAM(p, attHandle);
    e5ac:	0a2b      	lsrs	r3, r5, #8
    e5ae:	7015      	strb	r5, [r2, #0]
    e5b0:	7053      	strb	r3, [r2, #1]
          if (pAttr->settings & ATTS_SET_UUID_128)
    e5b2:	f816 3c02 	ldrb.w	r3, [r6, #-2]
    e5b6:	07db      	lsls	r3, r3, #31
    e5b8:	d45e      	bmi.n	e678 <AttsCalculateDbHash+0x1f4>
            BYTES_TO_UINT16(uuid, pAttr->pUuid);
    e5ba:	f856 1c10 	ldr.w	r1, [r6, #-16]
    e5be:	f891 c001 	ldrb.w	ip, [r1, #1]
    e5c2:	780b      	ldrb	r3, [r1, #0]
    e5c4:	eb03 230c 	add.w	r3, r3, ip, lsl #8
    e5c8:	b29b      	uxth	r3, r3
            UINT16_TO_BSTREAM(p,uuid);
    e5ca:	0a19      	lsrs	r1, r3, #8
    e5cc:	7093      	strb	r3, [r2, #2]
    e5ce:	70d1      	strb	r1, [r2, #3]
    e5d0:	1d13      	adds	r3, r2, #4
    e5d2:	2204      	movs	r2, #4
          if (valLen - (uuidLen + 2))
    e5d4:	4290      	cmp	r0, r2
    e5d6:	d142      	bne.n	e65e <AttsCalculateDbHash+0x1da>
      for (attsAttr_t *pAttr = pGroup->pAttr; attHandle <= pGroup->endHandle; attHandle++, pAttr++)
    e5d8:	f8b9 1012 	ldrh.w	r1, [r9, #18]
    e5dc:	461a      	mov	r2, r3
    e5de:	3501      	adds	r5, #1
    e5e0:	b2ad      	uxth	r5, r5
    e5e2:	428d      	cmp	r5, r1
    e5e4:	f106 0610 	add.w	r6, r6, #16
    e5e8:	d80a      	bhi.n	e600 <AttsCalculateDbHash+0x17c>
  if (isAttrCharVal)
    e5ea:	783b      	ldrb	r3, [r7, #0]
    e5ec:	2b00      	cmp	r3, #0
    e5ee:	d0ba      	beq.n	e566 <AttsCalculateDbHash+0xe2>
      for (attsAttr_t *pAttr = pGroup->pAttr; attHandle <= pGroup->endHandle; attHandle++, pAttr++)
    e5f0:	3501      	adds	r5, #1
    e5f2:	b2ad      	uxth	r5, r5
    isAttrCharVal = FALSE;
    e5f4:	2300      	movs	r3, #0
      for (attsAttr_t *pAttr = pGroup->pAttr; attHandle <= pGroup->endHandle; attHandle++, pAttr++)
    e5f6:	428d      	cmp	r5, r1
    isAttrCharVal = FALSE;
    e5f8:	703b      	strb	r3, [r7, #0]
      for (attsAttr_t *pAttr = pGroup->pAttr; attHandle <= pGroup->endHandle; attHandle++, pAttr++)
    e5fa:	f106 0610 	add.w	r6, r6, #16
    e5fe:	d9f4      	bls.n	e5ea <AttsCalculateDbHash+0x166>
      pGroup = pGroup->pNext;
    e600:	f8d9 9000 	ldr.w	r9, [r9]
    while (pGroup)
    e604:	f1b9 0f00 	cmp.w	r9, #0
    e608:	d1a1      	bne.n	e54e <AttsCalculateDbHash+0xca>
  return SecCmac(pKey, pMsg, msgLen, attCb.handlerId, 0, ATTS_MSG_DBH_CMAC_CMPL);
    e60a:	4b28      	ldr	r3, [pc, #160]	; (e6ac <AttsCalculateDbHash+0x228>)
    e60c:	2124      	movs	r1, #36	; 0x24
    e60e:	2200      	movs	r2, #0
    e610:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
    e614:	a802      	add	r0, sp, #8
    e616:	e9cd 2100 	strd	r2, r1, [sp]
    e61a:	4622      	mov	r2, r4
    e61c:	4641      	mov	r1, r8
    e61e:	f001 fc7d 	bl	ff1c <SecCmac>
}
    e622:	b007      	add	sp, #28
    e624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (uuid)
    e628:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
    e62c:	f4ff af74 	bcc.w	e518 <AttsCalculateDbHash+0x94>
    e630:	e764      	b.n	e4fc <AttsCalculateDbHash+0x78>
    e632:	454b      	cmp	r3, r9
    e634:	d902      	bls.n	e63c <AttsCalculateDbHash+0x1b8>
    e636:	4543      	cmp	r3, r8
    e638:	f47f af6e 	bne.w	e518 <AttsCalculateDbHash+0x94>
    e63c:	2302      	movs	r3, #2
    e63e:	e762      	b.n	e506 <AttsCalculateDbHash+0x82>
    e640:	2001      	movs	r0, #1
    isAttrCharVal = FALSE;
    e642:	2100      	movs	r1, #0
    e644:	e768      	b.n	e518 <AttsCalculateDbHash+0x94>
  switch (uuid)
    e646:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
    e64a:	d3c8      	bcc.n	e5de <AttsCalculateDbHash+0x15a>
    e64c:	e7a1      	b.n	e592 <AttsCalculateDbHash+0x10e>
    e64e:	4553      	cmp	r3, sl
    e650:	d903      	bls.n	e65a <AttsCalculateDbHash+0x1d6>
    e652:	f642 1005 	movw	r0, #10501	; 0x2905
    e656:	4283      	cmp	r3, r0
    e658:	d1c1      	bne.n	e5de <AttsCalculateDbHash+0x15a>
    e65a:	2302      	movs	r3, #2
    e65c:	e79e      	b.n	e59c <AttsCalculateDbHash+0x118>
            memcpy(p, pAttr->pValue, *pAttr->pLen);
    e65e:	e956 1203 	ldrd	r1, r2, [r6, #-12]
    e662:	4618      	mov	r0, r3
    e664:	8812      	ldrh	r2, [r2, #0]
    e666:	f7fd fd4b 	bl	c100 <memcpy>
            p += *pAttr->pLen;
    e66a:	f856 2c08 	ldr.w	r2, [r6, #-8]
      for (attsAttr_t *pAttr = pGroup->pAttr; attHandle <= pGroup->endHandle; attHandle++, pAttr++)
    e66e:	f8b9 1012 	ldrh.w	r1, [r9, #18]
            p += *pAttr->pLen;
    e672:	8812      	ldrh	r2, [r2, #0]
    e674:	4402      	add	r2, r0
    e676:	e7b2      	b.n	e5de <AttsCalculateDbHash+0x15a>
            memcpy(p, pAttr->pUuid, 16);
    e678:	f856 3c10 	ldr.w	r3, [r6, #-16]
    e67c:	f8d3 e000 	ldr.w	lr, [r3]
    e680:	f8d3 c004 	ldr.w	ip, [r3, #4]
    e684:	6899      	ldr	r1, [r3, #8]
    e686:	68db      	ldr	r3, [r3, #12]
    e688:	f8c2 300e 	str.w	r3, [r2, #14]
    e68c:	f8c2 e002 	str.w	lr, [r2, #2]
    e690:	f8c2 c006 	str.w	ip, [r2, #6]
    e694:	f8c2 100a 	str.w	r1, [r2, #10]
            p += 16;
    e698:	f102 0312 	add.w	r3, r2, #18
            uuidLen = 16;
    e69c:	2212      	movs	r2, #18
    e69e:	e799      	b.n	e5d4 <AttsCalculateDbHash+0x150>
  uint16_t msgLen = 0;
    e6a0:	462c      	mov	r4, r5
    e6a2:	e742      	b.n	e52a <AttsCalculateDbHash+0xa6>
    e6a4:	10003f7c 	.word	0x10003f7c
    e6a8:	10003f94 	.word	0x10003f94
    e6ac:	10003fd0 	.word	0x10003fd0

0000e6b0 <AttsAddGroup>:
{
    e6b0:	b538      	push	{r3, r4, r5, lr}
    e6b2:	4605      	mov	r5, r0
  WsfTaskLock();
    e6b4:	f005 f8f0 	bl	13898 <WsfTaskLock>
  pElem = (attsGroup_t *) attsCb.groupQueue.pHead;
    e6b8:	4b0d      	ldr	r3, [pc, #52]	; (e6f0 <AttsAddGroup+0x40>)
    e6ba:	681b      	ldr	r3, [r3, #0]
  while (pElem != NULL)
    e6bc:	b1ab      	cbz	r3, e6ea <AttsAddGroup+0x3a>
    if (pGroup->startHandle < pElem->startHandle)
    e6be:	f8b5 c010 	ldrh.w	ip, [r5, #16]
  attsGroup_t   *pPrev = NULL;
    e6c2:	2200      	movs	r2, #0
    e6c4:	e003      	b.n	e6ce <AttsAddGroup+0x1e>
    pElem = pElem->pNext;
    e6c6:	681c      	ldr	r4, [r3, #0]
  while (pElem != NULL)
    e6c8:	461a      	mov	r2, r3
    e6ca:	b11c      	cbz	r4, e6d4 <AttsAddGroup+0x24>
    e6cc:	4623      	mov	r3, r4
    if (pGroup->startHandle < pElem->startHandle)
    e6ce:	8a1c      	ldrh	r4, [r3, #16]
    e6d0:	4564      	cmp	r4, ip
    e6d2:	d9f8      	bls.n	e6c6 <AttsAddGroup+0x16>
  WsfQueueInsert(&attsCb.groupQueue, pGroup, pPrev);
    e6d4:	4629      	mov	r1, r5
    e6d6:	4806      	ldr	r0, [pc, #24]	; (e6f0 <AttsAddGroup+0x40>)
    e6d8:	f005 fa64 	bl	13ba4 <WsfQueueInsert>
  attsCsfSetHashUpdateStatus(TRUE);
    e6dc:	2001      	movs	r0, #1
    e6de:	f7ff f9e5 	bl	daac <attsCsfSetHashUpdateStatus>
}
    e6e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WsfTaskUnlock();
    e6e6:	f005 b8e1 	b.w	138ac <WsfTaskUnlock>
  attsGroup_t   *pPrev = NULL;
    e6ea:	461a      	mov	r2, r3
    e6ec:	e7f2      	b.n	e6d4 <AttsAddGroup+0x24>
    e6ee:	bf00      	nop
    e6f0:	10003f7c 	.word	0x10003f7c

0000e6f4 <AttsGetAttr>:
 *
 *  \return ATT_SUCCESS if successful or other error code if failure.
 */
/*************************************************************************************************/
uint8_t AttsGetAttr(uint16_t handle, uint16_t *pLen, uint8_t **pValue)
{
    e6f4:	b530      	push	{r4, r5, lr}
    e6f6:	b083      	sub	sp, #12
    e6f8:	460d      	mov	r5, r1
  attsAttr_t  *pAttr;
  attsGroup_t *pGroup;
  uint8_t     err = ATT_SUCCESS;

  /* find attribute */
  if ((pAttr = attsFindByHandle(handle, &pGroup)) != NULL)
    e6fa:	a901      	add	r1, sp, #4
{
    e6fc:	4614      	mov	r4, r2
  if ((pAttr = attsFindByHandle(handle, &pGroup)) != NULL)
    e6fe:	f000 f843 	bl	e788 <attsFindByHandle>
    e702:	b138      	cbz	r0, e714 <AttsGetAttr+0x20>
  {
    /* set length and value pointers */
    *pLen = *(pAttr->pLen);
    *pValue = pAttr->pValue;
    e704:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
    *pLen = *(pAttr->pLen);
    e708:	8812      	ldrh	r2, [r2, #0]
    e70a:	802a      	strh	r2, [r5, #0]
  uint8_t     err = ATT_SUCCESS;
    e70c:	2000      	movs	r0, #0
    *pValue = pAttr->pValue;
    e70e:	6023      	str	r3, [r4, #0]
  {
    err = ATT_ERR_NOT_FOUND;
  }

  return err;
}
    e710:	b003      	add	sp, #12
    e712:	bd30      	pop	{r4, r5, pc}
    err = ATT_ERR_NOT_FOUND;
    e714:	200a      	movs	r0, #10
}
    e716:	b003      	add	sp, #12
    e718:	bd30      	pop	{r4, r5, pc}
    e71a:	bf00      	nop

0000e71c <attsUuidCmp>:
 *
 *  \return TRUE of UUIDs match, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t attsUuidCmp(attsAttr_t *pAttr, uint8_t uuidLen, uint8_t *pUuid)
{
    e71c:	b508      	push	{r3, lr}
  /* if both uuids are the same length */
  if ((((pAttr->settings & ATTS_SET_UUID_128) == 0) && (uuidLen == ATT_16_UUID_LEN)) ||
    e71e:	f890 c00e 	ldrb.w	ip, [r0, #14]
    e722:	f01c 0f01 	tst.w	ip, #1
{
    e726:	4613      	mov	r3, r2
  if ((((pAttr->settings & ATTS_SET_UUID_128) == 0) && (uuidLen == ATT_16_UUID_LEN)) ||
    e728:	d007      	beq.n	e73a <attsUuidCmp+0x1e>
      (((pAttr->settings & ATTS_SET_UUID_128) != 0) &&  (uuidLen == ATT_128_UUID_LEN)))
    e72a:	2910      	cmp	r1, #16
    e72c:	d00f      	beq.n	e74e <attsUuidCmp+0x32>
  {
    return attUuidCmp16to128(pAttr->pUuid, pUuid);
  }
  else
  {
    return attUuidCmp16to128(pUuid, pAttr->pUuid);
    e72e:	6801      	ldr	r1, [r0, #0]
    e730:	4618      	mov	r0, r3
  }
}
    e732:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return attUuidCmp16to128(pUuid, pAttr->pUuid);
    e736:	f001 b989 	b.w	fa4c <attUuidCmp16to128>
  if ((((pAttr->settings & ATTS_SET_UUID_128) == 0) && (uuidLen == ATT_16_UUID_LEN)) ||
    e73a:	2902      	cmp	r1, #2
    e73c:	d007      	beq.n	e74e <attsUuidCmp+0x32>
  else if (((pAttr->settings & ATTS_SET_UUID_128) == 0) && (uuidLen == ATT_128_UUID_LEN))
    e73e:	2910      	cmp	r1, #16
    e740:	d1f5      	bne.n	e72e <attsUuidCmp+0x12>
}
    e742:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return attUuidCmp16to128(pAttr->pUuid, pUuid);
    e746:	6800      	ldr	r0, [r0, #0]
    e748:	4611      	mov	r1, r2
    e74a:	f001 b97f 	b.w	fa4c <attUuidCmp16to128>
    return (memcmp(pAttr->pUuid, pUuid, uuidLen) == 0);
    e74e:	460a      	mov	r2, r1
    e750:	6800      	ldr	r0, [r0, #0]
    e752:	4619      	mov	r1, r3
    e754:	f012 fe48 	bl	213e8 <memcmp>
    e758:	fab0 f080 	clz	r0, r0
    e75c:	0940      	lsrs	r0, r0, #5
}
    e75e:	bd08      	pop	{r3, pc}

0000e760 <attsUuid16Cmp>:
 *  \return TRUE of UUIDs match, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t attsUuid16Cmp(uint8_t *pUuid16, uint8_t uuidLen, uint8_t *pUuid)
{
  if (uuidLen == ATT_16_UUID_LEN)
    e760:	2902      	cmp	r1, #2
{
    e762:	4603      	mov	r3, r0
  if (uuidLen == ATT_16_UUID_LEN)
    e764:	d105      	bne.n	e772 <attsUuid16Cmp+0x12>
  {
    return ((pUuid16[0] == pUuid[0]) && (pUuid16[1] == pUuid[1]));
    e766:	7800      	ldrb	r0, [r0, #0]
    e768:	7811      	ldrb	r1, [r2, #0]
    e76a:	4288      	cmp	r0, r1
    e76c:	d004      	beq.n	e778 <attsUuid16Cmp+0x18>
    e76e:	2000      	movs	r0, #0
  }
  else
  {
    return attUuidCmp16to128(pUuid16, pUuid);
  }
}
    e770:	4770      	bx	lr
    return attUuidCmp16to128(pUuid16, pUuid);
    e772:	4611      	mov	r1, r2
    e774:	f001 b96a 	b.w	fa4c <attUuidCmp16to128>
    return ((pUuid16[0] == pUuid[0]) && (pUuid16[1] == pUuid[1]));
    e778:	7858      	ldrb	r0, [r3, #1]
    e77a:	7853      	ldrb	r3, [r2, #1]
    e77c:	1ac0      	subs	r0, r0, r3
    e77e:	fab0 f080 	clz	r0, r0
    e782:	0940      	lsrs	r0, r0, #5
    e784:	4770      	bx	lr
    e786:	bf00      	nop

0000e788 <attsFindByHandle>:
attsAttr_t *attsFindByHandle(uint16_t handle, attsGroup_t **pAttrGroup)
{
  attsGroup_t   *pGroup;

  /* iterate over attribute group list */
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
    e788:	4b0a      	ldr	r3, [pc, #40]	; (e7b4 <attsFindByHandle+0x2c>)
    e78a:	681b      	ldr	r3, [r3, #0]
    e78c:	b183      	cbz	r3, e7b0 <attsFindByHandle+0x28>
  {
    /*  if start handle within handle range of group */
    if ((handle >= pGroup->startHandle) && (handle <= pGroup->endHandle))
    e78e:	8a1a      	ldrh	r2, [r3, #16]
    e790:	4282      	cmp	r2, r0
    e792:	d8fa      	bhi.n	e78a <attsFindByHandle+0x2>
    e794:	f8b3 c012 	ldrh.w	ip, [r3, #18]
    e798:	4584      	cmp	ip, r0
    e79a:	d3f6      	bcc.n	e78a <attsFindByHandle+0x2>
{
    e79c:	b410      	push	{r4}
    {
      /* index by handle into attribute array to return attribute */
      *pAttrGroup = pGroup;
      return &pGroup->pAttr[handle - pGroup->startHandle];
    e79e:	685c      	ldr	r4, [r3, #4]
      *pAttrGroup = pGroup;
    e7a0:	600b      	str	r3, [r1, #0]
      return &pGroup->pAttr[handle - pGroup->startHandle];
    e7a2:	1a80      	subs	r0, r0, r2
    e7a4:	eb04 1300 	add.w	r3, r4, r0, lsl #4
    }
  }

  /* handle not found */
  return NULL;
}
    e7a8:	4618      	mov	r0, r3
    e7aa:	f85d 4b04 	ldr.w	r4, [sp], #4
    e7ae:	4770      	bx	lr
    e7b0:	4618      	mov	r0, r3
    e7b2:	4770      	bx	lr
    e7b4:	10003f7c 	.word	0x10003f7c

0000e7b8 <attsPermissions>:
uint8_t attsPermissions(dmConnId_t connId, uint8_t permit, uint16_t handle, uint8_t permissions)
{
  uint8_t secLevel;

  /* verify read or write permissions */
  if (!(permissions & permit))
    e7b8:	420b      	tst	r3, r1
{
    e7ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e7be:	460d      	mov	r5, r1
  if (!(permissions & permit))
    e7c0:	d01f      	beq.n	e802 <attsPermissions+0x4a>
  {
    return (permit == ATTS_PERMIT_READ) ? ATT_ERR_READ : ATT_ERR_WRITE;
  }

  /* convert write permissions to read permissions for easier masking */
  if (permit == ATTS_PERMIT_WRITE)
    e7c2:	2910      	cmp	r1, #16
    e7c4:	461c      	mov	r4, r3
  {
    permissions >>= 4;
    e7c6:	bf08      	it	eq
    e7c8:	091c      	lsreq	r4, r3, #4
  }

  /* if no security requirements return quickly */
  if ((permissions & (ATTS_PERMIT_READ_AUTH | ATTS_PERMIT_READ_AUTHORIZ | ATTS_PERMIT_READ_ENC)) == 0)
    e7ca:	f014 0f0e 	tst.w	r4, #14
    e7ce:	4607      	mov	r7, r0
    e7d0:	4616      	mov	r6, r2
    e7d2:	d102      	bne.n	e7da <attsPermissions+0x22>
  {
    return ATT_SUCCESS;
    e7d4:	2000      	movs	r0, #0
  }
  else
  {
    return ATT_SUCCESS;
  }
}
    e7d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  secLevel = DmConnSecLevel(connId);
    e7da:	f00a f881 	bl	188e0 <DmConnSecLevel>
  if ((permissions & ATTS_PERMIT_READ_ENC) && (secLevel == DM_SEC_LEVEL_NONE))
    e7de:	0722      	lsls	r2, r4, #28
    e7e0:	d500      	bpl.n	e7e4 <attsPermissions+0x2c>
    e7e2:	b1b0      	cbz	r0, e812 <attsPermissions+0x5a>
  if (((permissions & (ATTS_PERMIT_READ_AUTH | ATTS_PERMIT_READ_ENC)) ==
    e7e4:	f004 030a 	and.w	r3, r4, #10
    e7e8:	2b0a      	cmp	r3, #10
    e7ea:	d010      	beq.n	e80e <attsPermissions+0x56>
  if (permissions & ATTS_PERMIT_READ_AUTHORIZ)
    e7ec:	0763      	lsls	r3, r4, #29
    e7ee:	d5f1      	bpl.n	e7d4 <attsPermissions+0x1c>
    if (attsCb.authorCback == NULL)
    e7f0:	4b0a      	ldr	r3, [pc, #40]	; (e81c <attsPermissions+0x64>)
    e7f2:	691b      	ldr	r3, [r3, #16]
    e7f4:	b17b      	cbz	r3, e816 <attsPermissions+0x5e>
      return (*attsCb.authorCback)(connId, permit, handle);
    e7f6:	4632      	mov	r2, r6
    e7f8:	4629      	mov	r1, r5
    e7fa:	4638      	mov	r0, r7
}
    e7fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      return (*attsCb.authorCback)(connId, permit, handle);
    e800:	4718      	bx	r3
    return (permit == ATTS_PERMIT_READ) ? ATT_ERR_READ : ATT_ERR_WRITE;
    e802:	2901      	cmp	r1, #1
    e804:	bf0c      	ite	eq
    e806:	2002      	moveq	r0, #2
    e808:	2003      	movne	r0, #3
}
    e80a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       (ATTS_PERMIT_READ_AUTH | ATTS_PERMIT_READ_ENC)) && (secLevel < DM_SEC_LEVEL_ENC_AUTH))
    e80e:	2801      	cmp	r0, #1
    e810:	d8ec      	bhi.n	e7ec <attsPermissions+0x34>
    return ATT_ERR_AUTH;
    e812:	2005      	movs	r0, #5
    e814:	e7df      	b.n	e7d6 <attsPermissions+0x1e>
      return ATT_ERR_AUTHOR;
    e816:	2008      	movs	r0, #8
    e818:	e7dd      	b.n	e7d6 <attsPermissions+0x1e>
    e81a:	bf00      	nop
    e81c:	10003f7c 	.word	0x10003f7c

0000e820 <attsProcMtuReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcMtuReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
    e820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t   *pRsp;

  p = pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;

  /* parse mtu */
  BYTES_TO_UINT16(mtu, p);
    e822:	7a93      	ldrb	r3, [r2, #10]
    e824:	7a54      	ldrb	r4, [r2, #9]
  {
    mtu = ATT_DEFAULT_MTU;
  }

  /* get desired MTU */
  localMtu = WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN));
    e826:	4e15      	ldr	r6, [pc, #84]	; (e87c <attsProcMtuReq+0x5c>)
  BYTES_TO_UINT16(mtu, p);
    e828:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    e82c:	b2a4      	uxth	r4, r4
  localMtu = WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN));
    e82e:	6833      	ldr	r3, [r6, #0]
    e830:	2c17      	cmp	r4, #23
    e832:	889f      	ldrh	r7, [r3, #4]
    e834:	bf38      	it	cc
    e836:	2417      	movcc	r4, #23
{
    e838:	4605      	mov	r5, r0
  localMtu = WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN));
    e83a:	f003 fd9d 	bl	12378 <HciGetMaxRxAclLen>
    e83e:	3804      	subs	r0, #4
    e840:	4287      	cmp	r7, r0
    e842:	da16      	bge.n	e872 <attsProcMtuReq+0x52>
    e844:	6833      	ldr	r3, [r6, #0]
    e846:	889e      	ldrh	r6, [r3, #4]

  /* send response */
  if ((pRsp = attMsgAlloc(L2C_PAYLOAD_START + ATT_MTU_RSP_LEN)) != NULL)
    e848:	200b      	movs	r0, #11
    e84a:	f001 f94f 	bl	faec <attMsgAlloc>
    e84e:	4603      	mov	r3, r0
    e850:	b140      	cbz	r0, e864 <attsProcMtuReq+0x44>
  {
    p = pRsp + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, ATT_PDU_MTU_RSP);
    UINT16_TO_BSTREAM(p, localMtu);
    e852:	0a31      	lsrs	r1, r6, #8
    UINT8_TO_BSTREAM(p, ATT_PDU_MTU_RSP);
    e854:	2203      	movs	r2, #3
    e856:	7202      	strb	r2, [r0, #8]
    UINT16_TO_BSTREAM(p, localMtu);
    e858:	7246      	strb	r6, [r0, #9]
    e85a:	7281      	strb	r1, [r0, #10]

    L2cDataReq(L2C_CID_ATT, pCcb->handle, ATT_MTU_RSP_LEN, pRsp);
    e85c:	8b29      	ldrh	r1, [r5, #24]
    e85e:	2004      	movs	r0, #4
    e860:	f001 ffc6 	bl	107f0 <L2cDataReq>
  }

  /* set mtu for the connection */
  attSetMtu(pCcb, mtu, localMtu);
    e864:	4632      	mov	r2, r6
    e866:	4621      	mov	r1, r4
    e868:	4628      	mov	r0, r5
}
    e86a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  attSetMtu(pCcb, mtu, localMtu);
    e86e:	f001 b8ff 	b.w	fa70 <attSetMtu>
  localMtu = WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN));
    e872:	f003 fd81 	bl	12378 <HciGetMaxRxAclLen>
    e876:	3804      	subs	r0, #4
    e878:	b286      	uxth	r6, r0
    e87a:	e7e5      	b.n	e848 <attsProcMtuReq+0x28>
    e87c:	10002b00 	.word	0x10002b00

0000e880 <attsProcFindInfoReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcFindInfoReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
    e880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint16_t    handle;
  uint8_t     err = ATT_SUCCESS;

  /* parse handles */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
  BSTREAM_TO_UINT16(startHandle, pPacket);
    e884:	7a93      	ldrb	r3, [r2, #10]
    e886:	7a56      	ldrb	r6, [r2, #9]
    e888:	eb06 2603 	add.w	r6, r6, r3, lsl #8
    e88c:	b2b6      	uxth	r6, r6
{
    e88e:	4607      	mov	r7, r0
  BSTREAM_TO_UINT16(endHandle, pPacket);

  /* verify handles */
  if ((startHandle == 0) || (startHandle > endHandle))
    e890:	b136      	cbz	r6, e8a0 <attsProcFindInfoReq+0x20>
  BSTREAM_TO_UINT16(endHandle, pPacket);
    e892:	7b13      	ldrb	r3, [r2, #12]
    e894:	7ad5      	ldrb	r5, [r2, #11]
    e896:	eb05 2503 	add.w	r5, r5, r3, lsl #8
    e89a:	b2ad      	uxth	r5, r5
  if ((startHandle == 0) || (startHandle > endHandle))
    e89c:	42ae      	cmp	r6, r5
    e89e:	d90a      	bls.n	e8b6 <attsProcFindInfoReq+0x36>
      err = ATT_ERR_RESOURCES;
    }
  }

  /* set channel as busy for service discovery */
  attsDiscBusy(pCcb);
    e8a0:	4638      	mov	r0, r7
    e8a2:	f7ff fcd7 	bl	e254 <attsDiscBusy>
    err = ATT_ERR_HANDLE;
    e8a6:	2301      	movs	r3, #1
  {
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
  }
  else
  {
    attsErrRsp(pCcb->handle, ATT_PDU_FIND_INFO_REQ, startHandle, err);
    e8a8:	8b38      	ldrh	r0, [r7, #24]
    e8aa:	4632      	mov	r2, r6
    e8ac:	2104      	movs	r1, #4
  }
}
    e8ae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    attsErrRsp(pCcb->handle, ATT_PDU_FIND_INFO_REQ, startHandle, err);
    e8b2:	f7ff bca5 	b.w	e200 <attsErrRsp>
    if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
    e8b6:	8b40      	ldrh	r0, [r0, #26]
    e8b8:	3008      	adds	r0, #8
    e8ba:	b280      	uxth	r0, r0
    e8bc:	f001 f916 	bl	faec <attMsgAlloc>
    e8c0:	4680      	mov	r8, r0
    e8c2:	2800      	cmp	r0, #0
    e8c4:	d05a      	beq.n	e97c <attsProcFindInfoReq+0xfc>
      UINT8_TO_BSTREAM(p, ATT_PDU_FIND_INFO_RSP);
    e8c6:	f240 1305 	movw	r3, #261	; 0x105
    e8ca:	8103      	strh	r3, [r0, #8]
      while ((handle = attsFindInRange(handle, endHandle, &pAttr)) != ATT_HANDLE_NONE)
    e8cc:	f100 030e 	add.w	r3, r0, #14
    e8d0:	4842      	ldr	r0, [pc, #264]	; (e9dc <attsProcFindInfoReq+0x15c>)
    e8d2:	4634      	mov	r4, r6
        if (handle == ATT_HANDLE_MAX)
    e8d4:	f64f 7eff 	movw	lr, #65535	; 0xffff
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
    e8d8:	6801      	ldr	r1, [r0, #0]
    e8da:	f1a3 0904 	sub.w	r9, r3, #4
    e8de:	b161      	cbz	r1, e8fa <attsProcFindInfoReq+0x7a>
    if ((startHandle < pGroup->startHandle) && (endHandle >= pGroup->startHandle))
    e8e0:	f8b1 c010 	ldrh.w	ip, [r1, #16]
    e8e4:	45a4      	cmp	ip, r4
    e8e6:	d902      	bls.n	e8ee <attsProcFindInfoReq+0x6e>
    e8e8:	4565      	cmp	r5, ip
    e8ea:	d303      	bcc.n	e8f4 <attsProcFindInfoReq+0x74>
    e8ec:	4664      	mov	r4, ip
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
    e8ee:	8a4a      	ldrh	r2, [r1, #18]
    e8f0:	42a2      	cmp	r2, r4
    e8f2:	d215      	bcs.n	e920 <attsProcFindInfoReq+0xa0>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
    e8f4:	6809      	ldr	r1, [r1, #0]
    e8f6:	2900      	cmp	r1, #0
    e8f8:	d1f2      	bne.n	e8e0 <attsProcFindInfoReq+0x60>
      if (p == (pBuf + L2C_PAYLOAD_START + 2))
    e8fa:	f108 020a 	add.w	r2, r8, #10
    e8fe:	4591      	cmp	r9, r2
    e900:	d063      	beq.n	e9ca <attsProcFindInfoReq+0x14a>
  attsDiscBusy(pCcb);
    e902:	4638      	mov	r0, r7
    e904:	f7ff fca6 	bl	e254 <attsDiscBusy>
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
    e908:	f108 0208 	add.w	r2, r8, #8
    e90c:	eba9 0202 	sub.w	r2, r9, r2
    e910:	8b39      	ldrh	r1, [r7, #24]
    e912:	4643      	mov	r3, r8
    e914:	b292      	uxth	r2, r2
}
    e916:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
    e91a:	2004      	movs	r0, #4
    e91c:	f001 bf68 	b.w	107f0 <L2cDataReq>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
    e920:	6849      	ldr	r1, [r1, #4]
    e922:	eba4 0c0c 	sub.w	ip, r4, ip
    e926:	ea4f 1a0c 	mov.w	sl, ip, lsl #4
    e92a:	eb01 1c0c 	add.w	ip, r1, ip, lsl #4
      while ((handle = attsFindInRange(handle, endHandle, &pAttr)) != ATT_HANDLE_NONE)
    e92e:	2c00      	cmp	r4, #0
    e930:	d0e3      	beq.n	e8fa <attsProcFindInfoReq+0x7a>
        if (pAttr->settings & ATTS_SET_UUID_128)
    e932:	f89c 200e 	ldrb.w	r2, [ip, #14]
    e936:	07d2      	lsls	r2, r2, #31
    e938:	d429      	bmi.n	e98e <attsProcFindInfoReq+0x10e>
              (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
    e93a:	8b7a      	ldrh	r2, [r7, #26]
    e93c:	3208      	adds	r2, #8
    e93e:	4442      	add	r2, r8
          if ((p + ATT_16_UUID_LEN + sizeof(uint16_t)) <=
    e940:	4293      	cmp	r3, r2
    e942:	469c      	mov	ip, r3
    e944:	d8d9      	bhi.n	e8fa <attsProcFindInfoReq+0x7a>
            UINT16_TO_BSTREAM(p, handle);
    e946:	0a22      	lsrs	r2, r4, #8
    e948:	f803 4c04 	strb.w	r4, [r3, #-4]
    e94c:	f803 2c03 	strb.w	r2, [r3, #-3]
            UINT8_TO_BSTREAM(p, pAttr->pUuid[0]);
    e950:	f851 200a 	ldr.w	r2, [r1, sl]
    e954:	7812      	ldrb	r2, [r2, #0]
    e956:	f803 2c02 	strb.w	r2, [r3, #-2]
            UINT8_TO_BSTREAM(p, pAttr->pUuid[1]);
    e95a:	f851 200a 	ldr.w	r2, [r1, sl]
        if (handle == ATT_HANDLE_MAX)
    e95e:	4574      	cmp	r4, lr
            UINT8_TO_BSTREAM(p, pAttr->pUuid[1]);
    e960:	7852      	ldrb	r2, [r2, #1]
    e962:	f803 2c01 	strb.w	r2, [r3, #-1]
        if (handle == ATT_HANDLE_MAX)
    e966:	d00e      	beq.n	e986 <attsProcFindInfoReq+0x106>
        if (++handle > endHandle)
    e968:	3401      	adds	r4, #1
    e96a:	b2a4      	uxth	r4, r4
    e96c:	42a5      	cmp	r5, r4
    e96e:	f103 0304 	add.w	r3, r3, #4
    e972:	d2b1      	bcs.n	e8d8 <attsProcFindInfoReq+0x58>
      if (p == (pBuf + L2C_PAYLOAD_START + 2))
    e974:	f108 020a 	add.w	r2, r8, #10
    e978:	46e1      	mov	r9, ip
    e97a:	e7c0      	b.n	e8fe <attsProcFindInfoReq+0x7e>
  attsDiscBusy(pCcb);
    e97c:	4638      	mov	r0, r7
    e97e:	f7ff fc69 	bl	e254 <attsDiscBusy>
      err = ATT_ERR_RESOURCES;
    e982:	2311      	movs	r3, #17
    e984:	e790      	b.n	e8a8 <attsProcFindInfoReq+0x28>
      if (p == (pBuf + L2C_PAYLOAD_START + 2))
    e986:	f108 020a 	add.w	r2, r8, #10
    e98a:	4699      	mov	r9, r3
    e98c:	e7b7      	b.n	e8fe <attsProcFindInfoReq+0x7e>
          if (p == (pBuf + L2C_PAYLOAD_START + 2))
    e98e:	f108 030a 	add.w	r3, r8, #10
    e992:	4599      	cmp	r9, r3
    e994:	d1b5      	bne.n	e902 <attsProcFindInfoReq+0x82>
            UINT16_TO_BSTREAM(p, handle);
    e996:	f889 4000 	strb.w	r4, [r9]
            UINT8_TO_BSTREAM(p, ATT_FIND_HANDLE_128_UUID);
    e99a:	2302      	movs	r3, #2
            UINT16_TO_BSTREAM(p, handle);
    e99c:	0a24      	lsrs	r4, r4, #8
    e99e:	f889 4001 	strb.w	r4, [r9, #1]
            UINT8_TO_BSTREAM(p, ATT_FIND_HANDLE_128_UUID);
    e9a2:	f809 3c01 	strb.w	r3, [r9, #-1]
            memcpy(p, pAttr->pUuid, ATT_128_UUID_LEN);
    e9a6:	f8dc 3000 	ldr.w	r3, [ip]
    e9aa:	681c      	ldr	r4, [r3, #0]
    e9ac:	6858      	ldr	r0, [r3, #4]
    e9ae:	6899      	ldr	r1, [r3, #8]
    e9b0:	68db      	ldr	r3, [r3, #12]
    e9b2:	f8c8 3018 	str.w	r3, [r8, #24]
            p += ATT_128_UUID_LEN;
    e9b6:	464a      	mov	r2, r9
            memcpy(p, pAttr->pUuid, ATT_128_UUID_LEN);
    e9b8:	f8c8 400c 	str.w	r4, [r8, #12]
    e9bc:	f8c8 0010 	str.w	r0, [r8, #16]
    e9c0:	f8c8 1014 	str.w	r1, [r8, #20]
            p += ATT_128_UUID_LEN;
    e9c4:	f108 091c 	add.w	r9, r8, #28
    e9c8:	e799      	b.n	e8fe <attsProcFindInfoReq+0x7e>
        WsfMsgFree(pBuf);
    e9ca:	4640      	mov	r0, r8
    e9cc:	f004 ff2a 	bl	13824 <WsfMsgFree>
  attsDiscBusy(pCcb);
    e9d0:	4638      	mov	r0, r7
    e9d2:	f7ff fc3f 	bl	e254 <attsDiscBusy>
        err = ATT_ERR_NOT_FOUND;
    e9d6:	230a      	movs	r3, #10
    e9d8:	e766      	b.n	e8a8 <attsProcFindInfoReq+0x28>
    e9da:	bf00      	nop
    e9dc:	10003f7c 	.word	0x10003f7c

0000e9e0 <attsProcReadReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcReadReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
    e9e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
    e9e4:	4f46      	ldr	r7, [pc, #280]	; (eb00 <attsProcReadReq+0x120>)
  uint16_t    readLen;
  uint8_t     err = ATT_SUCCESS;

  /* parse handle */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
  BSTREAM_TO_UINT16(handle, pPacket);
    e9e6:	7a93      	ldrb	r3, [r2, #10]
    e9e8:	7a55      	ldrb	r5, [r2, #9]
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
    e9ea:	683c      	ldr	r4, [r7, #0]
  BSTREAM_TO_UINT16(handle, pPacket);
    e9ec:	eb05 2503 	add.w	r5, r5, r3, lsl #8
{
    e9f0:	b082      	sub	sp, #8
    e9f2:	4680      	mov	r8, r0
  BSTREAM_TO_UINT16(handle, pPacket);
    e9f4:	b2ad      	uxth	r5, r5
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
    e9f6:	b144      	cbz	r4, ea0a <attsProcReadReq+0x2a>
    if ((handle >= pGroup->startHandle) && (handle <= pGroup->endHandle))
    e9f8:	8a23      	ldrh	r3, [r4, #16]
    e9fa:	429d      	cmp	r5, r3
    e9fc:	d302      	bcc.n	ea04 <attsProcReadReq+0x24>
    e9fe:	8a62      	ldrh	r2, [r4, #18]
    ea00:	42aa      	cmp	r2, r5
    ea02:	d20c      	bcs.n	ea1e <attsProcReadReq+0x3e>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
    ea04:	6824      	ldr	r4, [r4, #0]
    ea06:	2c00      	cmp	r4, #0
    ea08:	d1f6      	bne.n	e9f8 <attsProcReadReq+0x18>
    }
  }
  /* else invalid handle */
  else
  {
    err = ATT_ERR_HANDLE;
    ea0a:	2301      	movs	r3, #1
  }

  if (err)
  {
    attsErrRsp(pCcb->handle, ATT_PDU_READ_REQ, handle, err);
    ea0c:	f8b8 0018 	ldrh.w	r0, [r8, #24]
    ea10:	462a      	mov	r2, r5
    ea12:	210a      	movs	r1, #10
  }
}
    ea14:	b002      	add	sp, #8
    ea16:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    attsErrRsp(pCcb->handle, ATT_PDU_READ_REQ, handle, err);
    ea1a:	f7ff bbf1 	b.w	e200 <attsErrRsp>
      return &pGroup->pAttr[handle - pGroup->startHandle];
    ea1e:	6866      	ldr	r6, [r4, #4]
    ea20:	1aeb      	subs	r3, r5, r3
  if ((pAttr = attsFindByHandle(handle, &pGroup)) != NULL)
    ea22:	eb16 1603 	adds.w	r6, r6, r3, lsl #4
    ea26:	d0f0      	beq.n	ea0a <attsProcReadReq+0x2a>
    if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
    ea28:	f896 900f 	ldrb.w	r9, [r6, #15]
  if (!(permissions & permit))
    ea2c:	f019 0f01 	tst.w	r9, #1
    ea30:	d04e      	beq.n	ead0 <attsProcReadReq+0xf0>
  if ((permissions & (ATTS_PERMIT_READ_AUTH | ATTS_PERMIT_READ_AUTHORIZ | ATTS_PERMIT_READ_ENC)) == 0)
    ea32:	f019 0f0e 	tst.w	r9, #14
    ea36:	d01a      	beq.n	ea6e <attsProcReadReq+0x8e>
    if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
    ea38:	f898 a01c 	ldrb.w	sl, [r8, #28]
  secLevel = DmConnSecLevel(connId);
    ea3c:	4650      	mov	r0, sl
    ea3e:	f009 ff4f 	bl	188e0 <DmConnSecLevel>
  if ((permissions & ATTS_PERMIT_READ_ENC) && (secLevel == DM_SEC_LEVEL_NONE))
    ea42:	f019 0f08 	tst.w	r9, #8
    ea46:	d001      	beq.n	ea4c <attsProcReadReq+0x6c>
    ea48:	2800      	cmp	r0, #0
    ea4a:	d052      	beq.n	eaf2 <attsProcReadReq+0x112>
  if (((permissions & (ATTS_PERMIT_READ_AUTH | ATTS_PERMIT_READ_ENC)) ==
    ea4c:	f009 030a 	and.w	r3, r9, #10
    ea50:	2b0a      	cmp	r3, #10
    ea52:	d04c      	beq.n	eaee <attsProcReadReq+0x10e>
  if (permissions & ATTS_PERMIT_READ_AUTHORIZ)
    ea54:	f019 0f04 	tst.w	r9, #4
    ea58:	d009      	beq.n	ea6e <attsProcReadReq+0x8e>
    if (attsCb.authorCback == NULL)
    ea5a:	693b      	ldr	r3, [r7, #16]
    ea5c:	2b00      	cmp	r3, #0
    ea5e:	d04d      	beq.n	eafc <attsProcReadReq+0x11c>
      return (*attsCb.authorCback)(connId, permit, handle);
    ea60:	4650      	mov	r0, sl
    ea62:	462a      	mov	r2, r5
    ea64:	2101      	movs	r1, #1
    ea66:	4798      	blx	r3
    if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
    ea68:	4603      	mov	r3, r0
    ea6a:	2800      	cmp	r0, #0
    ea6c:	d1ce      	bne.n	ea0c <attsProcReadReq+0x2c>
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
    ea6e:	7bb3      	ldrb	r3, [r6, #14]
    ea70:	075a      	lsls	r2, r3, #29
    ea72:	d52f      	bpl.n	ead4 <attsProcReadReq+0xf4>
          (pGroup->readCback != NULL))
    ea74:	68a4      	ldr	r4, [r4, #8]
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
    ea76:	b36c      	cbz	r4, ead4 <attsProcReadReq+0xf4>
        err = (*pGroup->readCback)(pCcb->connId, handle, ATT_PDU_READ_REQ, 0, pAttr);
    ea78:	9600      	str	r6, [sp, #0]
    ea7a:	2300      	movs	r3, #0
    ea7c:	f898 001c 	ldrb.w	r0, [r8, #28]
    ea80:	220a      	movs	r2, #10
    ea82:	4629      	mov	r1, r5
    ea84:	47a0      	blx	r4
    ea86:	4603      	mov	r3, r0
      if (err == ATT_SUCCESS)
    ea88:	2b00      	cmp	r3, #0
    ea8a:	d1bf      	bne.n	ea0c <attsProcReadReq+0x2c>
        readLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_RSP_LEN)) ?
    ea8c:	68b2      	ldr	r2, [r6, #8]
    ea8e:	f8b8 301a 	ldrh.w	r3, [r8, #26]
    ea92:	8812      	ldrh	r2, [r2, #0]
    ea94:	1e5c      	subs	r4, r3, #1
                   *pAttr->pLen : (pCcb->mtu - ATT_READ_RSP_LEN);
    ea96:	4294      	cmp	r4, r2
    ea98:	bfa8      	it	ge
    ea9a:	4614      	movge	r4, r2
        readLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_RSP_LEN)) ?
    ea9c:	b2a7      	uxth	r7, r4
        if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_READ_RSP_LEN + readLen)) != NULL)
    ea9e:	f107 0009 	add.w	r0, r7, #9
    eaa2:	b280      	uxth	r0, r0
    eaa4:	f001 f822 	bl	faec <attMsgAlloc>
    eaa8:	4605      	mov	r5, r0
    eaaa:	b320      	cbz	r0, eaf6 <attsProcReadReq+0x116>
          UINT8_TO_BSTREAM(p, ATT_PDU_READ_RSP);
    eaac:	230b      	movs	r3, #11
    eaae:	7203      	strb	r3, [r0, #8]
          memcpy(p, pAttr->pValue, readLen);
    eab0:	6871      	ldr	r1, [r6, #4]
    eab2:	b2a2      	uxth	r2, r4
    eab4:	3009      	adds	r0, #9
    eab6:	f7fd fb23 	bl	c100 <memcpy>
          L2cDataReq(L2C_CID_ATT, pCcb->handle, (ATT_READ_RSP_LEN + readLen), pBuf);
    eaba:	1c7a      	adds	r2, r7, #1
    eabc:	f8b8 1018 	ldrh.w	r1, [r8, #24]
    eac0:	462b      	mov	r3, r5
    eac2:	b292      	uxth	r2, r2
    eac4:	2004      	movs	r0, #4
}
    eac6:	b002      	add	sp, #8
    eac8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
          L2cDataReq(L2C_CID_ATT, pCcb->handle, (ATT_READ_RSP_LEN + readLen), pBuf);
    eacc:	f001 be90 	b.w	107f0 <L2cDataReq>
    return (permit == ATTS_PERMIT_READ) ? ATT_ERR_READ : ATT_ERR_WRITE;
    ead0:	2302      	movs	r3, #2
    ead2:	e79b      	b.n	ea0c <attsProcReadReq+0x2c>
      else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
    ead4:	069b      	lsls	r3, r3, #26
    ead6:	d5d9      	bpl.n	ea8c <attsProcReadReq+0xac>
    ead8:	697c      	ldr	r4, [r7, #20]
    eada:	2c00      	cmp	r4, #0
    eadc:	d0d6      	beq.n	ea8c <attsProcReadReq+0xac>
        err = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_READ, handle, pAttr->pValue);
    eade:	6873      	ldr	r3, [r6, #4]
    eae0:	f898 001c 	ldrb.w	r0, [r8, #28]
    eae4:	462a      	mov	r2, r5
    eae6:	2105      	movs	r1, #5
    eae8:	47a0      	blx	r4
    eaea:	4603      	mov	r3, r0
    eaec:	e7cc      	b.n	ea88 <attsProcReadReq+0xa8>
       (ATTS_PERMIT_READ_AUTH | ATTS_PERMIT_READ_ENC)) && (secLevel < DM_SEC_LEVEL_ENC_AUTH))
    eaee:	2801      	cmp	r0, #1
    eaf0:	d8b0      	bhi.n	ea54 <attsProcReadReq+0x74>
    return ATT_ERR_AUTH;
    eaf2:	2305      	movs	r3, #5
    eaf4:	e78a      	b.n	ea0c <attsProcReadReq+0x2c>
}
    eaf6:	b002      	add	sp, #8
    eaf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return ATT_ERR_AUTHOR;
    eafc:	2308      	movs	r3, #8
    eafe:	e785      	b.n	ea0c <attsProcReadReq+0x2c>
    eb00:	10003f7c 	.word	0x10003f7c

0000eb04 <attsFindUuidInRange>:
 *  \return Attribute handle or ATT_HANDLE_NONE if not found.
 */
/*************************************************************************************************/
uint16_t attsFindUuidInRange(uint16_t startHandle, uint16_t endHandle, uint8_t uuidLen,
                             uint8_t *pUuid, attsAttr_t **pAttr, attsGroup_t **pAttrGroup)
{
    eb04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    eb08:	469a      	mov	sl, r3
  attsGroup_t *pGroup;

  /* iterate over attribute group list */
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
    eb0a:	4b1e      	ldr	r3, [pc, #120]	; (eb84 <attsFindUuidInRange+0x80>)
{
    eb0c:	9e08      	ldr	r6, [sp, #32]
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
    eb0e:	681d      	ldr	r5, [r3, #0]
    eb10:	2d00      	cmp	r5, #0
    eb12:	d033      	beq.n	eb7c <attsFindUuidInRange+0x78>
    eb14:	4604      	mov	r4, r0
    eb16:	460f      	mov	r7, r1
    eb18:	4690      	mov	r8, r2
          *pAttrGroup = pGroup;
          return startHandle;
        }

        /* special case of max handle value */
        if (startHandle == ATT_HANDLE_MAX)
    eb1a:	f64f 79ff 	movw	r9, #65535	; 0xffff
    eb1e:	e004      	b.n	eb2a <attsFindUuidInRange+0x26>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
    eb20:	8a6b      	ldrh	r3, [r5, #18]
    eb22:	42a3      	cmp	r3, r4
    eb24:	d224      	bcs.n	eb70 <attsFindUuidInRange+0x6c>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
    eb26:	682d      	ldr	r5, [r5, #0]
    eb28:	b345      	cbz	r5, eb7c <attsFindUuidInRange+0x78>
    if ((startHandle < pGroup->startHandle) && (endHandle >= pGroup->startHandle))
    eb2a:	8a28      	ldrh	r0, [r5, #16]
    eb2c:	42a0      	cmp	r0, r4
    eb2e:	d9f7      	bls.n	eb20 <attsFindUuidInRange+0x1c>
    eb30:	42b8      	cmp	r0, r7
    eb32:	d8f8      	bhi.n	eb26 <attsFindUuidInRange+0x22>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
    eb34:	8a6b      	ldrh	r3, [r5, #18]
    eb36:	4283      	cmp	r3, r0
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
    eb38:	4604      	mov	r4, r0
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
    eb3a:	d3f4      	bcc.n	eb26 <attsFindUuidInRange+0x22>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
    eb3c:	6868      	ldr	r0, [r5, #4]
    eb3e:	6030      	str	r0, [r6, #0]
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
    eb40:	e00a      	b.n	eb58 <attsFindUuidInRange+0x54>
        if (startHandle == ATT_HANDLE_MAX)
    eb42:	454c      	cmp	r4, r9
    eb44:	d0ef      	beq.n	eb26 <attsFindUuidInRange+0x22>
        {
          break;
        }

        startHandle++;
        (*pAttr)++;
    eb46:	6830      	ldr	r0, [r6, #0]
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
    eb48:	8a6a      	ldrh	r2, [r5, #18]
        startHandle++;
    eb4a:	b29c      	uxth	r4, r3
        (*pAttr)++;
    eb4c:	3010      	adds	r0, #16
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
    eb4e:	42a2      	cmp	r2, r4
        (*pAttr)++;
    eb50:	6030      	str	r0, [r6, #0]
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
    eb52:	d3e8      	bcc.n	eb26 <attsFindUuidInRange+0x22>
    eb54:	42a7      	cmp	r7, r4
    eb56:	d3e6      	bcc.n	eb26 <attsFindUuidInRange+0x22>
        if (attsUuidCmp(*pAttr, uuidLen, pUuid))
    eb58:	4652      	mov	r2, sl
    eb5a:	4641      	mov	r1, r8
    eb5c:	f7ff fdde 	bl	e71c <attsUuidCmp>
        startHandle++;
    eb60:	1c63      	adds	r3, r4, #1
        if (attsUuidCmp(*pAttr, uuidLen, pUuid))
    eb62:	2800      	cmp	r0, #0
    eb64:	d0ed      	beq.n	eb42 <attsFindUuidInRange+0x3e>
          *pAttrGroup = pGroup;
    eb66:	9b09      	ldr	r3, [sp, #36]	; 0x24
          return startHandle;
    eb68:	4620      	mov	r0, r4
          *pAttrGroup = pGroup;
    eb6a:	601d      	str	r5, [r3, #0]
    }
  }

  /* no match found */
  return ATT_HANDLE_NONE;
}
    eb6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
    eb70:	1a23      	subs	r3, r4, r0
    eb72:	6868      	ldr	r0, [r5, #4]
    eb74:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    eb78:	6030      	str	r0, [r6, #0]
    eb7a:	e7eb      	b.n	eb54 <attsFindUuidInRange+0x50>
  return ATT_HANDLE_NONE;
    eb7c:	2000      	movs	r0, #0
}
    eb7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    eb82:	bf00      	nop
    eb84:	10003f7c 	.word	0x10003f7c

0000eb88 <attsFindServiceGroupEnd>:
 *
 *  \return Service group end handle.
 */
/*************************************************************************************************/
uint16_t attsFindServiceGroupEnd(uint16_t startHandle)
{
    eb88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint16_t      prevHandle;
  uint8_t       primSvcUuid[ATT_16_UUID_LEN] = {UINT16_TO_BYTES(ATT_UUID_PRIMARY_SERVICE)};
  uint8_t       secSvcUuid[ATT_16_UUID_LEN] = {UINT16_TO_BYTES(ATT_UUID_SECONDARY_SERVICE)};

  /* special case for max handle */
  if (startHandle == ATT_HANDLE_MAX)
    eb8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
    eb90:	b082      	sub	sp, #8
  uint8_t       primSvcUuid[ATT_16_UUID_LEN] = {UINT16_TO_BYTES(ATT_UUID_PRIMARY_SERVICE)};
    eb92:	f44f 5120 	mov.w	r1, #10240	; 0x2800
  uint8_t       secSvcUuid[ATT_16_UUID_LEN] = {UINT16_TO_BYTES(ATT_UUID_SECONDARY_SERVICE)};
    eb96:	f642 0201 	movw	r2, #10241	; 0x2801
  if (startHandle == ATT_HANDLE_MAX)
    eb9a:	4298      	cmp	r0, r3
  uint8_t       primSvcUuid[ATT_16_UUID_LEN] = {UINT16_TO_BYTES(ATT_UUID_PRIMARY_SERVICE)};
    eb9c:	f8ad 1000 	strh.w	r1, [sp]
  uint8_t       secSvcUuid[ATT_16_UUID_LEN] = {UINT16_TO_BYTES(ATT_UUID_SECONDARY_SERVICE)};
    eba0:	f8ad 2004 	strh.w	r2, [sp, #4]
  if (startHandle == ATT_HANDLE_MAX)
    eba4:	d010      	beq.n	ebc8 <attsFindServiceGroupEnd+0x40>

  prevHandle = startHandle;
  startHandle++;

  /* iterate over attribute group list */
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
    eba6:	4b1d      	ldr	r3, [pc, #116]	; (ec1c <attsFindServiceGroupEnd+0x94>)
    eba8:	681e      	ldr	r6, [r3, #0]
  startHandle++;
    ebaa:	1c44      	adds	r4, r0, #1
    ebac:	4607      	mov	r7, r0
    ebae:	b2a4      	uxth	r4, r4
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
    ebb0:	b156      	cbz	r6, ebc8 <attsFindServiceGroupEnd+0x40>
  {
    /* if start handle is less than group start handle */
    if (startHandle < pGroup->startHandle)
    ebb2:	8a35      	ldrh	r5, [r6, #16]
      /* set start handle to first handle in group */
      startHandle = pGroup->startHandle;
    }

    /*  if start handle within handle range of group */
    if (startHandle <= pGroup->endHandle)
    ebb4:	8a73      	ldrh	r3, [r6, #18]
    ebb6:	42ac      	cmp	r4, r5
    ebb8:	bf38      	it	cc
    ebba:	462c      	movcc	r4, r5
    ebbc:	b2a4      	uxth	r4, r4
    ebbe:	42a3      	cmp	r3, r4
    ebc0:	d208      	bcs.n	ebd4 <attsFindServiceGroupEnd+0x4c>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
    ebc2:	6836      	ldr	r6, [r6, #0]
    ebc4:	2e00      	cmp	r6, #0
    ebc6:	d1f4      	bne.n	ebb2 <attsFindServiceGroupEnd+0x2a>
    return ATT_HANDLE_MAX;
    ebc8:	f64f 77ff 	movw	r7, #65535	; 0xffff
    }
  }

  /* next service not found; return 0xFFFF as the last handle in the database */
  return ATT_HANDLE_MAX;
}
    ebcc:	4638      	mov	r0, r7
    ebce:	b002      	add	sp, #8
    ebd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
    ebd4:	6873      	ldr	r3, [r6, #4]
    ebd6:	1b65      	subs	r5, r4, r5
    ebd8:	eb03 1505 	add.w	r5, r3, r5, lsl #4
        if (startHandle == ATT_HANDLE_MAX)
    ebdc:	f64f 78ff 	movw	r8, #65535	; 0xffff
    ebe0:	e00c      	b.n	ebfc <attsFindServiceGroupEnd+0x74>
            attsUuidCmp(pAttr, ATT_16_UUID_LEN, secSvcUuid))
    ebe2:	f7ff fd9b 	bl	e71c <attsUuidCmp>
        startHandle++;
    ebe6:	1c63      	adds	r3, r4, #1
    ebe8:	b29b      	uxth	r3, r3
        if (attsUuidCmp(pAttr, ATT_16_UUID_LEN, primSvcUuid) ||
    ebea:	2800      	cmp	r0, #0
    ebec:	d1ee      	bne.n	ebcc <attsFindServiceGroupEnd+0x44>
        if (startHandle == ATT_HANDLE_MAX)
    ebee:	4544      	cmp	r4, r8
    ebf0:	4627      	mov	r7, r4
    ebf2:	d0e9      	beq.n	ebc8 <attsFindServiceGroupEnd+0x40>
      while (startHandle <= pGroup->endHandle)
    ebf4:	8a72      	ldrh	r2, [r6, #18]
    ebf6:	429a      	cmp	r2, r3
    ebf8:	461c      	mov	r4, r3
    ebfa:	d3e2      	bcc.n	ebc2 <attsFindServiceGroupEnd+0x3a>
        if (attsUuidCmp(pAttr, ATT_16_UUID_LEN, primSvcUuid) ||
    ebfc:	466a      	mov	r2, sp
    ebfe:	2102      	movs	r1, #2
    ec00:	4628      	mov	r0, r5
    ec02:	f7ff fd8b 	bl	e71c <attsUuidCmp>
    ec06:	4603      	mov	r3, r0
            attsUuidCmp(pAttr, ATT_16_UUID_LEN, secSvcUuid))
    ec08:	aa01      	add	r2, sp, #4
    ec0a:	4628      	mov	r0, r5
    ec0c:	2102      	movs	r1, #2
        pAttr++;
    ec0e:	3510      	adds	r5, #16
        if (attsUuidCmp(pAttr, ATT_16_UUID_LEN, primSvcUuid) ||
    ec10:	2b00      	cmp	r3, #0
    ec12:	d0e6      	beq.n	ebe2 <attsFindServiceGroupEnd+0x5a>
}
    ec14:	4638      	mov	r0, r7
    ec16:	b002      	add	sp, #8
    ec18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ec1c:	10003f7c 	.word	0x10003f7c

0000ec20 <attsProcReadBlobReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcReadBlobReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
    ec20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint16_t    readLen;
  uint8_t     err = ATT_SUCCESS;

  /* parse handle and offset */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
  BSTREAM_TO_UINT16(handle, pPacket);
    ec24:	7a93      	ldrb	r3, [r2, #10]
    ec26:	7a54      	ldrb	r4, [r2, #9]
  BSTREAM_TO_UINT16(offset, pPacket);
    ec28:	7ad7      	ldrb	r7, [r2, #11]
    ec2a:	f892 800c 	ldrb.w	r8, [r2, #12]
  BSTREAM_TO_UINT16(handle, pPacket);
    ec2e:	eb04 2403 	add.w	r4, r4, r3, lsl #8
{
    ec32:	b085      	sub	sp, #20
  BSTREAM_TO_UINT16(handle, pPacket);
    ec34:	b2a4      	uxth	r4, r4
{
    ec36:	4606      	mov	r6, r0

  /* find attribute */
  if ((pAttr = attsFindByHandle(handle, &pGroup)) != NULL)
    ec38:	a903      	add	r1, sp, #12
    ec3a:	4620      	mov	r0, r4
    ec3c:	f7ff fda4 	bl	e788 <attsFindByHandle>
    ec40:	2800      	cmp	r0, #0
    ec42:	d04c      	beq.n	ecde <attsProcReadBlobReq+0xbe>
  {
    /* verify permissions */
    if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
    ec44:	7bc3      	ldrb	r3, [r0, #15]
    ec46:	4605      	mov	r5, r0
    ec48:	4622      	mov	r2, r4
    ec4a:	7f30      	ldrb	r0, [r6, #28]
    ec4c:	2101      	movs	r1, #1
    ec4e:	f7ff fdb3 	bl	e7b8 <attsPermissions>
    ec52:	4603      	mov	r3, r0
    ec54:	b138      	cbz	r0, ec66 <attsProcReadBlobReq+0x46>
    err = ATT_ERR_HANDLE;
  }

  if (err)
  {
    attsErrRsp(pCcb->handle, ATT_PDU_READ_BLOB_REQ, handle, err);
    ec56:	8b30      	ldrh	r0, [r6, #24]
    ec58:	4622      	mov	r2, r4
    ec5a:	210c      	movs	r1, #12
    ec5c:	f7ff fad0 	bl	e200 <attsErrRsp>
  }
}
    ec60:	b005      	add	sp, #20
    ec62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (offset > *pAttr->pLen)
    ec66:	68ab      	ldr	r3, [r5, #8]
  BSTREAM_TO_UINT16(offset, pPacket);
    ec68:	eb07 2708 	add.w	r7, r7, r8, lsl #8
    else if (offset > *pAttr->pLen)
    ec6c:	881b      	ldrh	r3, [r3, #0]
  BSTREAM_TO_UINT16(offset, pPacket);
    ec6e:	b2bf      	uxth	r7, r7
    else if (offset > *pAttr->pLen)
    ec70:	42bb      	cmp	r3, r7
    ec72:	d336      	bcc.n	ece2 <attsProcReadBlobReq+0xc2>
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
    ec74:	7baa      	ldrb	r2, [r5, #14]
    ec76:	0751      	lsls	r1, r2, #29
    ec78:	d535      	bpl.n	ece6 <attsProcReadBlobReq+0xc6>
          (pGroup->readCback != NULL))
    ec7a:	9903      	ldr	r1, [sp, #12]
    ec7c:	f8d1 8008 	ldr.w	r8, [r1, #8]
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
    ec80:	f1b8 0f00 	cmp.w	r8, #0
    ec84:	d02f      	beq.n	ece6 <attsProcReadBlobReq+0xc6>
        err = (*pGroup->readCback)(pCcb->connId, handle, ATT_PDU_READ_BLOB_REQ, offset, pAttr);
    ec86:	9500      	str	r5, [sp, #0]
    ec88:	463b      	mov	r3, r7
    ec8a:	7f30      	ldrb	r0, [r6, #28]
    ec8c:	220c      	movs	r2, #12
    ec8e:	4621      	mov	r1, r4
    ec90:	47c0      	blx	r8
    ec92:	4603      	mov	r3, r0
      if (err == ATT_SUCCESS)
    ec94:	2b00      	cmp	r3, #0
    ec96:	d1de      	bne.n	ec56 <attsProcReadBlobReq+0x36>
        readLen = ((*pAttr->pLen - offset) < (pCcb->mtu - ATT_READ_BLOB_RSP_LEN)) ?
    ec98:	68ab      	ldr	r3, [r5, #8]
    ec9a:	881b      	ldrh	r3, [r3, #0]
    ec9c:	8b74      	ldrh	r4, [r6, #26]
    ec9e:	1bda      	subs	r2, r3, r7
    eca0:	3c01      	subs	r4, #1
                   (*pAttr->pLen - offset) : (pCcb->mtu - ATT_READ_BLOB_RSP_LEN);
    eca2:	4294      	cmp	r4, r2
    eca4:	bfa8      	it	ge
    eca6:	4614      	movge	r4, r2
        readLen = ((*pAttr->pLen - offset) < (pCcb->mtu - ATT_READ_BLOB_RSP_LEN)) ?
    eca8:	fa1f f984 	uxth.w	r9, r4
        if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_READ_BLOB_RSP_LEN + readLen)) != NULL)
    ecac:	f109 0009 	add.w	r0, r9, #9
    ecb0:	b280      	uxth	r0, r0
    ecb2:	f000 ff1b 	bl	faec <attMsgAlloc>
    ecb6:	4680      	mov	r8, r0
    ecb8:	2800      	cmp	r0, #0
    ecba:	d0d1      	beq.n	ec60 <attsProcReadBlobReq+0x40>
          UINT8_TO_BSTREAM(p, ATT_PDU_READ_BLOB_RSP);
    ecbc:	230d      	movs	r3, #13
    ecbe:	7203      	strb	r3, [r0, #8]
          memcpy(p, (pAttr->pValue + offset), readLen);
    ecc0:	6869      	ldr	r1, [r5, #4]
    ecc2:	464a      	mov	r2, r9
    ecc4:	4439      	add	r1, r7
    ecc6:	3009      	adds	r0, #9
    ecc8:	f7fd fa1a 	bl	c100 <memcpy>
          L2cDataReq(L2C_CID_ATT, pCcb->handle, (ATT_READ_BLOB_RSP_LEN + readLen), pBuf);
    eccc:	f109 0201 	add.w	r2, r9, #1
    ecd0:	8b31      	ldrh	r1, [r6, #24]
    ecd2:	4643      	mov	r3, r8
    ecd4:	b292      	uxth	r2, r2
    ecd6:	2004      	movs	r0, #4
    ecd8:	f001 fd8a 	bl	107f0 <L2cDataReq>
  if (err)
    ecdc:	e7c0      	b.n	ec60 <attsProcReadBlobReq+0x40>
    err = ATT_ERR_HANDLE;
    ecde:	2301      	movs	r3, #1
    ece0:	e7b9      	b.n	ec56 <attsProcReadBlobReq+0x36>
      err = ATT_ERR_OFFSET;
    ece2:	2307      	movs	r3, #7
    ece4:	e7b7      	b.n	ec56 <attsProcReadBlobReq+0x36>
      else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
    ece6:	0692      	lsls	r2, r2, #26
    ece8:	d5d8      	bpl.n	ec9c <attsProcReadBlobReq+0x7c>
    ecea:	4a07      	ldr	r2, [pc, #28]	; (ed08 <attsProcReadBlobReq+0xe8>)
    ecec:	f8d2 8014 	ldr.w	r8, [r2, #20]
    ecf0:	f1b8 0f00 	cmp.w	r8, #0
    ecf4:	d0d2      	beq.n	ec9c <attsProcReadBlobReq+0x7c>
        err = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_READ, handle, pAttr->pValue);
    ecf6:	686b      	ldr	r3, [r5, #4]
    ecf8:	7f30      	ldrb	r0, [r6, #28]
    ecfa:	4622      	mov	r2, r4
    ecfc:	2105      	movs	r1, #5
    ecfe:	47c0      	blx	r8
    ed00:	4603      	mov	r3, r0
      if (err == ATT_SUCCESS)
    ed02:	2b00      	cmp	r3, #0
    ed04:	d1a7      	bne.n	ec56 <attsProcReadBlobReq+0x36>
    ed06:	e7c7      	b.n	ec98 <attsProcReadBlobReq+0x78>
    ed08:	10003f7c 	.word	0x10003f7c

0000ed0c <attsProcFindTypeReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcFindTypeReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
    ed0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ed10:	ed2d 8b02 	vpush	{d8}
  uint16_t    nextHandle;
  uint8_t     err = ATT_SUCCESS;

  /* parse handles and uuid; pPacket then points to the value in the request */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
  BSTREAM_TO_UINT16(startHandle, pPacket);
    ed14:	7a93      	ldrb	r3, [r2, #10]
    ed16:	f892 9009 	ldrb.w	r9, [r2, #9]
{
    ed1a:	b087      	sub	sp, #28
  BSTREAM_TO_UINT16(startHandle, pPacket);
    ed1c:	eb09 2903 	add.w	r9, r9, r3, lsl #8
    ed20:	fa1f f389 	uxth.w	r3, r9
    ed24:	9301      	str	r3, [sp, #4]
{
    ed26:	4683      	mov	fp, r0

  /* set len to the value length */
  len -= ATT_FIND_TYPE_REQ_LEN;

  /* verify handles */
  if ((startHandle == 0) || (startHandle > endHandle))
    ed28:	b143      	cbz	r3, ed3c <attsProcFindTypeReq+0x30>
  BSTREAM_TO_UINT16(endHandle, pPacket);
    ed2a:	7b13      	ldrb	r3, [r2, #12]
    ed2c:	7ad6      	ldrb	r6, [r2, #11]
    ed2e:	eb06 2603 	add.w	r6, r6, r3, lsl #8
  if ((startHandle == 0) || (startHandle > endHandle))
    ed32:	9b01      	ldr	r3, [sp, #4]
  BSTREAM_TO_UINT16(endHandle, pPacket);
    ed34:	b2b6      	uxth	r6, r6
  if ((startHandle == 0) || (startHandle > endHandle))
    ed36:	42b3      	cmp	r3, r6
    ed38:	4692      	mov	sl, r2
    ed3a:	d90e      	bls.n	ed5a <attsProcFindTypeReq+0x4e>
      err = ATT_ERR_RESOURCES;
    }
  }

  /* set channel as busy for service discovery */
  attsDiscBusy(pCcb);
    ed3c:	4658      	mov	r0, fp
    ed3e:	f7ff fa89 	bl	e254 <attsDiscBusy>
    err = ATT_ERR_HANDLE;
    ed42:	2301      	movs	r3, #1
  {
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
  }
  else
  {
    attsErrRsp(pCcb->handle, ATT_PDU_FIND_TYPE_REQ, startHandle, err);
    ed44:	f8bb 0018 	ldrh.w	r0, [fp, #24]
    ed48:	9a01      	ldr	r2, [sp, #4]
    ed4a:	2106      	movs	r1, #6
  }
}
    ed4c:	b007      	add	sp, #28
    ed4e:	ecbd 8b02 	vpop	{d8}
    ed52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    attsErrRsp(pCcb->handle, ATT_PDU_FIND_TYPE_REQ, startHandle, err);
    ed56:	f7ff ba53 	b.w	e200 <attsErrRsp>
    if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
    ed5a:	8b40      	ldrh	r0, [r0, #26]
    ed5c:	3008      	adds	r0, #8
    ed5e:	b280      	uxth	r0, r0
    ed60:	460c      	mov	r4, r1
    ed62:	f000 fec3 	bl	faec <attMsgAlloc>
    ed66:	9002      	str	r0, [sp, #8]
    ed68:	2800      	cmp	r0, #0
    ed6a:	f000 8091 	beq.w	ee90 <attsProcFindTypeReq+0x184>
  len -= ATT_FIND_TYPE_REQ_LEN;
    ed6e:	1fe1      	subs	r1, r4, #7
    ed70:	b28b      	uxth	r3, r1
    ed72:	9303      	str	r3, [sp, #12]
      UINT8_TO_BSTREAM(p, ATT_PDU_FIND_TYPE_RSP);
    ed74:	2307      	movs	r3, #7
    ed76:	7203      	strb	r3, [r0, #8]
  pPacket += ATT_16_UUID_LEN;
    ed78:	f10a 030f 	add.w	r3, sl, #15
      UINT8_TO_BSTREAM(p, ATT_PDU_FIND_TYPE_RSP);
    ed7c:	f100 0109 	add.w	r1, r0, #9
  pPacket += ATT_16_UUID_LEN;
    ed80:	ee08 3a10 	vmov	s16, r3
      while ((handle = attsFindUuidInRange(handle, endHandle, ATT_16_UUID_LEN,
    ed84:	9c01      	ldr	r4, [sp, #4]
    ed86:	f8cd a010 	str.w	sl, [sp, #16]
  BSTREAM_TO_UINT16(endHandle, pPacket);
    ed8a:	f10a 070d 	add.w	r7, sl, #13
      UINT8_TO_BSTREAM(p, ATT_PDU_FIND_TYPE_RSP);
    ed8e:	9105      	str	r1, [sp, #20]
        if (startHandle == ATT_HANDLE_MAX)
    ed90:	f64f 78ff 	movw	r8, #65535	; 0xffff
    ed94:	468a      	mov	sl, r1
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
    ed96:	4b46      	ldr	r3, [pc, #280]	; (eeb0 <attsProcFindTypeReq+0x1a4>)
    ed98:	681d      	ldr	r5, [r3, #0]
    ed9a:	b92d      	cbnz	r5, eda8 <attsProcFindTypeReq+0x9c>
    ed9c:	e03a      	b.n	ee14 <attsProcFindTypeReq+0x108>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
    ed9e:	8a6b      	ldrh	r3, [r5, #18]
    eda0:	42a3      	cmp	r3, r4
    eda2:	d231      	bcs.n	ee08 <attsProcFindTypeReq+0xfc>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
    eda4:	682d      	ldr	r5, [r5, #0]
    eda6:	b3ad      	cbz	r5, ee14 <attsProcFindTypeReq+0x108>
    if ((startHandle < pGroup->startHandle) && (endHandle >= pGroup->startHandle))
    eda8:	f8b5 9010 	ldrh.w	r9, [r5, #16]
    edac:	454c      	cmp	r4, r9
    edae:	d2f6      	bcs.n	ed9e <attsProcFindTypeReq+0x92>
    edb0:	454e      	cmp	r6, r9
    edb2:	d3f7      	bcc.n	eda4 <attsProcFindTypeReq+0x98>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
    edb4:	8a6b      	ldrh	r3, [r5, #18]
    edb6:	454b      	cmp	r3, r9
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
    edb8:	464c      	mov	r4, r9
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
    edba:	d3f3      	bcc.n	eda4 <attsProcFindTypeReq+0x98>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
    edbc:	f8d5 9004 	ldr.w	r9, [r5, #4]
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
    edc0:	e009      	b.n	edd6 <attsProcFindTypeReq+0xca>
        if (startHandle == ATT_HANDLE_MAX)
    edc2:	4544      	cmp	r4, r8
        (*pAttr)++;
    edc4:	f109 0910 	add.w	r9, r9, #16
        if (startHandle == ATT_HANDLE_MAX)
    edc8:	d0ec      	beq.n	eda4 <attsProcFindTypeReq+0x98>
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
    edca:	8a6a      	ldrh	r2, [r5, #18]
        startHandle++;
    edcc:	b29c      	uxth	r4, r3
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
    edce:	42a2      	cmp	r2, r4
    edd0:	d3e8      	bcc.n	eda4 <attsProcFindTypeReq+0x98>
    edd2:	42a6      	cmp	r6, r4
    edd4:	d3e6      	bcc.n	eda4 <attsProcFindTypeReq+0x98>
        if (attsUuidCmp(*pAttr, uuidLen, pUuid))
    edd6:	4648      	mov	r0, r9
    edd8:	463a      	mov	r2, r7
    edda:	2102      	movs	r1, #2
    eddc:	f7ff fc9e 	bl	e71c <attsUuidCmp>
        startHandle++;
    ede0:	1c63      	adds	r3, r4, #1
        if (attsUuidCmp(*pAttr, uuidLen, pUuid))
    ede2:	2800      	cmp	r0, #0
    ede4:	d0ed      	beq.n	edc2 <attsProcFindTypeReq+0xb6>
      while ((handle = attsFindUuidInRange(handle, endHandle, ATT_16_UUID_LEN,
    ede6:	b1ac      	cbz	r4, ee14 <attsProcFindTypeReq+0x108>
        if ((pAttr->permissions & ATTS_PERMIT_READ) &&
    ede8:	f899 200f 	ldrb.w	r2, [r9, #15]
    edec:	07d3      	lsls	r3, r2, #31
    edee:	d506      	bpl.n	edfe <attsProcFindTypeReq+0xf2>
    edf0:	9b03      	ldr	r3, [sp, #12]
    edf2:	b373      	cbz	r3, ee52 <attsProcFindTypeReq+0x146>
             ((len == *pAttr->pLen) && (memcmp(pPacket, pAttr->pValue, len) == 0))))
    edf4:	f8d9 2008 	ldr.w	r2, [r9, #8]
            ((len == 0) ||
    edf8:	8812      	ldrh	r2, [r2, #0]
    edfa:	429a      	cmp	r2, r3
    edfc:	d020      	beq.n	ee40 <attsProcFindTypeReq+0x134>
        if ((nextHandle >= endHandle) || (nextHandle == ATT_HANDLE_MAX))
    edfe:	42b4      	cmp	r4, r6
    ee00:	d208      	bcs.n	ee14 <attsProcFindTypeReq+0x108>
        handle = nextHandle + 1;
    ee02:	3401      	adds	r4, #1
    ee04:	b2a4      	uxth	r4, r4
    ee06:	e7c6      	b.n	ed96 <attsProcFindTypeReq+0x8a>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
    ee08:	686b      	ldr	r3, [r5, #4]
    ee0a:	eba4 0909 	sub.w	r9, r4, r9
    ee0e:	eb03 1909 	add.w	r9, r3, r9, lsl #4
    ee12:	e7de      	b.n	edd2 <attsProcFindTypeReq+0xc6>
      if (p == (pBuf + L2C_PAYLOAD_START + 1))
    ee14:	9b05      	ldr	r3, [sp, #20]
    ee16:	459a      	cmp	sl, r3
    ee18:	4654      	mov	r4, sl
    ee1a:	d041      	beq.n	eea0 <attsProcFindTypeReq+0x194>
  attsDiscBusy(pCcb);
    ee1c:	4658      	mov	r0, fp
    ee1e:	f7ff fa19 	bl	e254 <attsDiscBusy>
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
    ee22:	9b02      	ldr	r3, [sp, #8]
    ee24:	f8bb 1018 	ldrh.w	r1, [fp, #24]
    ee28:	f103 0208 	add.w	r2, r3, #8
    ee2c:	1aa2      	subs	r2, r4, r2
    ee2e:	b292      	uxth	r2, r2
    ee30:	2004      	movs	r0, #4
}
    ee32:	b007      	add	sp, #28
    ee34:	ecbd 8b02 	vpop	{d8}
    ee38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
    ee3c:	f001 bcd8 	b.w	107f0 <L2cDataReq>
             ((len == *pAttr->pLen) && (memcmp(pPacket, pAttr->pValue, len) == 0))))
    ee40:	f8d9 1004 	ldr.w	r1, [r9, #4]
    ee44:	ee18 0a10 	vmov	r0, s16
    ee48:	461a      	mov	r2, r3
    ee4a:	f012 facd 	bl	213e8 <memcmp>
    ee4e:	2800      	cmp	r0, #0
    ee50:	d1d5      	bne.n	edfe <attsProcFindTypeReq+0xf2>
          if (pUuid[0] == UINT16_TO_BYTE0(ATT_UUID_PRIMARY_SERVICE) &&
    ee52:	9a04      	ldr	r2, [sp, #16]
    ee54:	7b53      	ldrb	r3, [r2, #13]
    ee56:	b9cb      	cbnz	r3, ee8c <attsProcFindTypeReq+0x180>
    ee58:	7b93      	ldrb	r3, [r2, #14]
    ee5a:	2b28      	cmp	r3, #40	; 0x28
            nextHandle = attsFindServiceGroupEnd(handle);
    ee5c:	4620      	mov	r0, r4
          if (pUuid[0] == UINT16_TO_BYTE0(ATT_UUID_PRIMARY_SERVICE) &&
    ee5e:	d01c      	beq.n	ee9a <attsProcFindTypeReq+0x18e>
          if ((p + (sizeof(uint16_t) * 2)) <= (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
    ee60:	f8bb 301a 	ldrh.w	r3, [fp, #26]
    ee64:	9a02      	ldr	r2, [sp, #8]
    ee66:	3308      	adds	r3, #8
    ee68:	4413      	add	r3, r2
    ee6a:	f10a 0204 	add.w	r2, sl, #4
    ee6e:	429a      	cmp	r2, r3
    ee70:	d8d0      	bhi.n	ee14 <attsProcFindTypeReq+0x108>
            UINT16_TO_BSTREAM(p, handle);
    ee72:	f88a 4000 	strb.w	r4, [sl]
            UINT16_TO_BSTREAM(p, nextHandle);
    ee76:	0a03      	lsrs	r3, r0, #8
            UINT16_TO_BSTREAM(p, handle);
    ee78:	0a24      	lsrs	r4, r4, #8
    ee7a:	f88a 4001 	strb.w	r4, [sl, #1]
            UINT16_TO_BSTREAM(p, nextHandle);
    ee7e:	f88a 0002 	strb.w	r0, [sl, #2]
    ee82:	f88a 3003 	strb.w	r3, [sl, #3]
          if ((p + (sizeof(uint16_t) * 2)) <= (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
    ee86:	4604      	mov	r4, r0
            UINT16_TO_BSTREAM(p, nextHandle);
    ee88:	4692      	mov	sl, r2
          if ((p + (sizeof(uint16_t) * 2)) <= (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
    ee8a:	e7b8      	b.n	edfe <attsProcFindTypeReq+0xf2>
    ee8c:	4620      	mov	r0, r4
    ee8e:	e7e7      	b.n	ee60 <attsProcFindTypeReq+0x154>
  attsDiscBusy(pCcb);
    ee90:	4658      	mov	r0, fp
    ee92:	f7ff f9df 	bl	e254 <attsDiscBusy>
      err = ATT_ERR_RESOURCES;
    ee96:	2311      	movs	r3, #17
    ee98:	e754      	b.n	ed44 <attsProcFindTypeReq+0x38>
            nextHandle = attsFindServiceGroupEnd(handle);
    ee9a:	f7ff fe75 	bl	eb88 <attsFindServiceGroupEnd>
    ee9e:	e7df      	b.n	ee60 <attsProcFindTypeReq+0x154>
        WsfMsgFree(pBuf);
    eea0:	9802      	ldr	r0, [sp, #8]
    eea2:	f004 fcbf 	bl	13824 <WsfMsgFree>
  attsDiscBusy(pCcb);
    eea6:	4658      	mov	r0, fp
    eea8:	f7ff f9d4 	bl	e254 <attsDiscBusy>
        err = ATT_ERR_NOT_FOUND;
    eeac:	230a      	movs	r3, #10
    eeae:	e749      	b.n	ed44 <attsProcFindTypeReq+0x38>
    eeb0:	10003f7c 	.word	0x10003f7c

0000eeb4 <attsProcReadTypeReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcReadTypeReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
    eeb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
  BSTREAM_TO_UINT16(startHandle, pPacket);
  BSTREAM_TO_UINT16(endHandle, pPacket);

  /* get and verify uuid length */
  uuidLen = len - ATT_READ_TYPE_REQ_LEN;
    eeb8:	3905      	subs	r1, #5
  BSTREAM_TO_UINT16(startHandle, pPacket);
    eeba:	7a93      	ldrb	r3, [r2, #10]
    eebc:	7a54      	ldrb	r4, [r2, #9]
  uuidLen = len - ATT_READ_TYPE_REQ_LEN;
    eebe:	b2cd      	uxtb	r5, r1
  BSTREAM_TO_UINT16(startHandle, pPacket);
    eec0:	eb04 2403 	add.w	r4, r4, r3, lsl #8
  if (!((uuidLen == ATT_16_UUID_LEN) || (uuidLen == ATT_128_UUID_LEN)))
    eec4:	2d02      	cmp	r5, #2
{
    eec6:	b087      	sub	sp, #28
    eec8:	4617      	mov	r7, r2
    eeca:	4683      	mov	fp, r0
  BSTREAM_TO_UINT16(startHandle, pPacket);
    eecc:	b2a4      	uxth	r4, r4
  if (!((uuidLen == ATT_16_UUID_LEN) || (uuidLen == ATT_128_UUID_LEN)))
    eece:	d00b      	beq.n	eee8 <attsProcReadTypeReq+0x34>
    eed0:	2d10      	cmp	r5, #16
    eed2:	d009      	beq.n	eee8 <attsProcReadTypeReq+0x34>
  {
    err = ATT_ERR_INVALID_PDU;
    eed4:	2304      	movs	r3, #4
  {
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
  }
  else
  {
    attsErrRsp(pCcb->handle, ATT_PDU_READ_TYPE_REQ, startHandle, err);
    eed6:	f8bb 0018 	ldrh.w	r0, [fp, #24]
    eeda:	4622      	mov	r2, r4
    eedc:	2108      	movs	r1, #8
  }
}
    eede:	b007      	add	sp, #28
    eee0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    attsErrRsp(pCcb->handle, ATT_PDU_READ_TYPE_REQ, startHandle, err);
    eee4:	f7ff b98c 	b.w	e200 <attsErrRsp>
  else if ((startHandle == 0) || (startHandle > endHandle))
    eee8:	b90c      	cbnz	r4, eeee <attsProcReadTypeReq+0x3a>
    err = ATT_ERR_HANDLE;
    eeea:	2301      	movs	r3, #1
    eeec:	e7f3      	b.n	eed6 <attsProcReadTypeReq+0x22>
  BSTREAM_TO_UINT16(endHandle, pPacket);
    eeee:	7b3b      	ldrb	r3, [r7, #12]
    eef0:	f897 800b 	ldrb.w	r8, [r7, #11]
    eef4:	eb08 2803 	add.w	r8, r8, r3, lsl #8
    eef8:	fa1f f888 	uxth.w	r8, r8
  else if ((startHandle == 0) || (startHandle > endHandle))
    eefc:	4544      	cmp	r4, r8
    eefe:	d8f4      	bhi.n	eeea <attsProcReadTypeReq+0x36>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
    ef00:	4baf      	ldr	r3, [pc, #700]	; (f1c0 <attsProcReadTypeReq+0x30c>)
    ef02:	681e      	ldr	r6, [r3, #0]
  BSTREAM_TO_UINT16(endHandle, pPacket);
    ef04:	f107 0a0d 	add.w	sl, r7, #13
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
    ef08:	b946      	cbnz	r6, ef1c <attsProcReadTypeReq+0x68>
    ef0a:	e109      	b.n	f120 <attsProcReadTypeReq+0x26c>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
    ef0c:	8a73      	ldrh	r3, [r6, #18]
    ef0e:	42a3      	cmp	r3, r4
    ef10:	f080 80fd 	bcs.w	f10e <attsProcReadTypeReq+0x25a>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
    ef14:	6836      	ldr	r6, [r6, #0]
    ef16:	2e00      	cmp	r6, #0
    ef18:	f000 8102 	beq.w	f120 <attsProcReadTypeReq+0x26c>
    if ((startHandle < pGroup->startHandle) && (endHandle >= pGroup->startHandle))
    ef1c:	f8b6 9010 	ldrh.w	r9, [r6, #16]
    ef20:	454c      	cmp	r4, r9
    ef22:	d2f3      	bcs.n	ef0c <attsProcReadTypeReq+0x58>
    ef24:	45c8      	cmp	r8, r9
    ef26:	d3f5      	bcc.n	ef14 <attsProcReadTypeReq+0x60>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
    ef28:	8a73      	ldrh	r3, [r6, #18]
    ef2a:	454b      	cmp	r3, r9
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
    ef2c:	464c      	mov	r4, r9
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
    ef2e:	d3f1      	bcc.n	ef14 <attsProcReadTypeReq+0x60>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
    ef30:	f8d6 9004 	ldr.w	r9, [r6, #4]
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
    ef34:	e00b      	b.n	ef4e <attsProcReadTypeReq+0x9a>
        if (startHandle == ATT_HANDLE_MAX)
    ef36:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ef3a:	4294      	cmp	r4, r2
        (*pAttr)++;
    ef3c:	f109 0910 	add.w	r9, r9, #16
        if (startHandle == ATT_HANDLE_MAX)
    ef40:	d0e8      	beq.n	ef14 <attsProcReadTypeReq+0x60>
        startHandle++;
    ef42:	b29c      	uxth	r4, r3
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
    ef44:	8a73      	ldrh	r3, [r6, #18]
    ef46:	42a3      	cmp	r3, r4
    ef48:	d3e4      	bcc.n	ef14 <attsProcReadTypeReq+0x60>
    ef4a:	45a0      	cmp	r8, r4
    ef4c:	d3e2      	bcc.n	ef14 <attsProcReadTypeReq+0x60>
        if (attsUuidCmp(*pAttr, uuidLen, pUuid))
    ef4e:	4648      	mov	r0, r9
    ef50:	4652      	mov	r2, sl
    ef52:	4629      	mov	r1, r5
    ef54:	f7ff fbe2 	bl	e71c <attsUuidCmp>
        startHandle++;
    ef58:	1c63      	adds	r3, r4, #1
        if (attsUuidCmp(*pAttr, uuidLen, pUuid))
    ef5a:	2800      	cmp	r0, #0
    ef5c:	d0eb      	beq.n	ef36 <attsProcReadTypeReq+0x82>
    if (handle == ATT_HANDLE_NONE)
    ef5e:	2c00      	cmp	r4, #0
    ef60:	f000 80de 	beq.w	f120 <attsProcReadTypeReq+0x26c>
    else if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
    ef64:	f899 300f 	ldrb.w	r3, [r9, #15]
    ef68:	f89b 001c 	ldrb.w	r0, [fp, #28]
    ef6c:	4622      	mov	r2, r4
    ef6e:	2101      	movs	r1, #1
    ef70:	f7ff fc22 	bl	e7b8 <attsPermissions>
    ef74:	4603      	mov	r3, r0
    ef76:	2800      	cmp	r0, #0
    ef78:	d1ad      	bne.n	eed6 <attsProcReadTypeReq+0x22>
    else if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
    ef7a:	f899 200e 	ldrb.w	r2, [r9, #14]
    ef7e:	0750      	lsls	r0, r2, #29
    ef80:	f140 80e8 	bpl.w	f154 <attsProcReadTypeReq+0x2a0>
             (pGroup->readCback != NULL))
    ef84:	68b6      	ldr	r6, [r6, #8]
    else if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
    ef86:	2e00      	cmp	r6, #0
    ef88:	f000 80e4 	beq.w	f154 <attsProcReadTypeReq+0x2a0>
      err = (*pGroup->readCback)(pCcb->connId, handle, ATT_PDU_READ_TYPE_REQ, 0, pAttr);
    ef8c:	f8cd 9000 	str.w	r9, [sp]
    ef90:	f89b 001c 	ldrb.w	r0, [fp, #28]
    ef94:	2208      	movs	r2, #8
    ef96:	4621      	mov	r1, r4
    ef98:	47b0      	blx	r6
    ef9a:	4603      	mov	r3, r0
    if (err == ATT_SUCCESS)
    ef9c:	2b00      	cmp	r3, #0
    ef9e:	d19a      	bne.n	eed6 <attsProcReadTypeReq+0x22>
      if ((memcmp(pPacket, attGattDbhChUuid, ATT_16_UUID_LEN) == 0) && attsCsfGetHashUpdateStatus())
    efa0:	4b88      	ldr	r3, [pc, #544]	; (f1c4 <attsProcReadTypeReq+0x310>)
    efa2:	7b79      	ldrb	r1, [r7, #13]
    efa4:	781a      	ldrb	r2, [r3, #0]
    efa6:	4291      	cmp	r1, r2
    efa8:	f000 80e7 	beq.w	f17a <attsProcReadTypeReq+0x2c6>
      if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
    efac:	f8bb 001a 	ldrh.w	r0, [fp, #26]
    efb0:	3008      	adds	r0, #8
    efb2:	b280      	uxth	r0, r0
    efb4:	f000 fd9a 	bl	faec <attMsgAlloc>
    efb8:	4606      	mov	r6, r0
    efba:	2800      	cmp	r0, #0
    efbc:	f000 80db 	beq.w	f176 <attsProcReadTypeReq+0x2c2>
        UINT8_TO_BSTREAM(p, ATT_PDU_READ_TYPE_RSP);
    efc0:	2309      	movs	r3, #9
    efc2:	7203      	strb	r3, [r0, #8]
        attLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_TYPE_RSP_LEN - sizeof(uint16_t))) ?
    efc4:	f8d9 3008 	ldr.w	r3, [r9, #8]
    efc8:	881a      	ldrh	r2, [r3, #0]
    efca:	f8bb 301a 	ldrh.w	r3, [fp, #26]
        UINT16_TO_BSTREAM(p, handle);
    efce:	7284      	strb	r4, [r0, #10]
        attLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_TYPE_RSP_LEN - sizeof(uint16_t))) ?
    efd0:	3b04      	subs	r3, #4
                  *pAttr->pLen : (pCcb->mtu - ATT_READ_TYPE_RSP_LEN - sizeof(uint16_t));
    efd2:	4293      	cmp	r3, r2
    efd4:	bf28      	it	cs
    efd6:	4613      	movcs	r3, r2
        attLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_TYPE_RSP_LEN - sizeof(uint16_t))) ?
    efd8:	b2da      	uxtb	r2, r3
        UINT8_TO_BSTREAM(p, attLen + sizeof(uint16_t));
    efda:	1c97      	adds	r7, r2, #2
        UINT16_TO_BSTREAM(p, handle);
    efdc:	0a23      	lsrs	r3, r4, #8
        UINT8_TO_BSTREAM(p, attLen + sizeof(uint16_t));
    efde:	7247      	strb	r7, [r0, #9]
        UINT16_TO_BSTREAM(p, handle);
    efe0:	72c3      	strb	r3, [r0, #11]
    efe2:	f100 030c 	add.w	r3, r0, #12
        memcpy(p, pAttr->pValue, attLen);
    efe6:	f8d9 1004 	ldr.w	r1, [r9, #4]
        UINT8_TO_BSTREAM(p, attLen + sizeof(uint16_t));
    efea:	9705      	str	r7, [sp, #20]
        memcpy(p, pAttr->pValue, attLen);
    efec:	4618      	mov	r0, r3
    efee:	4691      	mov	r9, r2
    eff0:	f7fd f886 	bl	c100 <memcpy>
        handle++;
    eff4:	3401      	adds	r4, #1
    eff6:	e9cd b603 	strd	fp, r6, [sp, #12]
    effa:	b2a4      	uxth	r4, r4
        while ((handle = attsFindUuidInRange(handle, endHandle, uuidLen,
    effc:	19c7      	adds	r7, r0, r7
    effe:	46cb      	mov	fp, r9
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
    f000:	4b6f      	ldr	r3, [pc, #444]	; (f1c0 <attsProcReadTypeReq+0x30c>)
    f002:	f8d3 9000 	ldr.w	r9, [r3]
    f006:	1ebb      	subs	r3, r7, #2
    f008:	9302      	str	r3, [sp, #8]
    f00a:	f1b9 0f00 	cmp.w	r9, #0
    f00e:	f000 808f 	beq.w	f130 <attsProcReadTypeReq+0x27c>
    f012:	464b      	mov	r3, r9
    f014:	46a9      	mov	r9, r5
    f016:	461d      	mov	r5, r3
    f018:	e007      	b.n	f02a <attsProcReadTypeReq+0x176>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
    f01a:	8a6b      	ldrh	r3, [r5, #18]
    f01c:	42a3      	cmp	r3, r4
    f01e:	f080 8082 	bcs.w	f126 <attsProcReadTypeReq+0x272>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
    f022:	682d      	ldr	r5, [r5, #0]
    f024:	2d00      	cmp	r5, #0
    f026:	f000 8083 	beq.w	f130 <attsProcReadTypeReq+0x27c>
    if ((startHandle < pGroup->startHandle) && (endHandle >= pGroup->startHandle))
    f02a:	8a2e      	ldrh	r6, [r5, #16]
    f02c:	42b4      	cmp	r4, r6
    f02e:	d2f4      	bcs.n	f01a <attsProcReadTypeReq+0x166>
    f030:	45b0      	cmp	r8, r6
    f032:	d3f6      	bcc.n	f022 <attsProcReadTypeReq+0x16e>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
    f034:	8a6b      	ldrh	r3, [r5, #18]
    f036:	42b3      	cmp	r3, r6
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
    f038:	4634      	mov	r4, r6
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
    f03a:	d3f2      	bcc.n	f022 <attsProcReadTypeReq+0x16e>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
    f03c:	686e      	ldr	r6, [r5, #4]
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
    f03e:	e00d      	b.n	f05c <attsProcReadTypeReq+0x1a8>
        if (startHandle == ATT_HANDLE_MAX)
    f040:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f044:	429c      	cmp	r4, r3
        (*pAttr)++;
    f046:	f106 0610 	add.w	r6, r6, #16
        startHandle++;
    f04a:	f104 0301 	add.w	r3, r4, #1
        if (startHandle == ATT_HANDLE_MAX)
    f04e:	d0e8      	beq.n	f022 <attsProcReadTypeReq+0x16e>
        startHandle++;
    f050:	b29c      	uxth	r4, r3
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
    f052:	8a6b      	ldrh	r3, [r5, #18]
    f054:	42a3      	cmp	r3, r4
    f056:	d3e4      	bcc.n	f022 <attsProcReadTypeReq+0x16e>
    f058:	45a0      	cmp	r8, r4
    f05a:	d3e2      	bcc.n	f022 <attsProcReadTypeReq+0x16e>
        if (attsUuidCmp(*pAttr, uuidLen, pUuid))
    f05c:	4630      	mov	r0, r6
    f05e:	4652      	mov	r2, sl
    f060:	4649      	mov	r1, r9
    f062:	f7ff fb5b 	bl	e71c <attsUuidCmp>
    f066:	2800      	cmp	r0, #0
    f068:	d0ea      	beq.n	f040 <attsProcReadTypeReq+0x18c>
        while ((handle = attsFindUuidInRange(handle, endHandle, uuidLen,
    f06a:	462b      	mov	r3, r5
    f06c:	464d      	mov	r5, r9
    f06e:	4699      	mov	r9, r3
    f070:	2c00      	cmp	r4, #0
    f072:	d05d      	beq.n	f130 <attsProcReadTypeReq+0x27c>
          if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
    f074:	7bb3      	ldrb	r3, [r6, #14]
    f076:	075a      	lsls	r2, r3, #29
    f078:	d55d      	bpl.n	f136 <attsProcReadTypeReq+0x282>
              (pGroup->readCback != NULL))
    f07a:	f8d9 9008 	ldr.w	r9, [r9, #8]
          if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
    f07e:	f1b9 0f00 	cmp.w	r9, #0
    f082:	d058      	beq.n	f136 <attsProcReadTypeReq+0x282>
            cbackErr = (*pGroup->readCback)(pCcb->connId, handle, ATT_PDU_READ_TYPE_REQ, 0, pAttr);
    f084:	9b03      	ldr	r3, [sp, #12]
    f086:	9600      	str	r6, [sp, #0]
    f088:	7f18      	ldrb	r0, [r3, #28]
    f08a:	2208      	movs	r2, #8
    f08c:	2300      	movs	r3, #0
    f08e:	4621      	mov	r1, r4
    f090:	47c8      	blx	r9
          if ((cbackErr == ATT_SUCCESS) &&
    f092:	2800      	cmp	r0, #0
    f094:	d14c      	bne.n	f130 <attsProcReadTypeReq+0x27c>
              (*pAttr->pLen == attLen) &&
    f096:	68b3      	ldr	r3, [r6, #8]
          if ((cbackErr == ATT_SUCCESS) &&
    f098:	881b      	ldrh	r3, [r3, #0]
    f09a:	455b      	cmp	r3, fp
    f09c:	d148      	bne.n	f130 <attsProcReadTypeReq+0x27c>
              (attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
    f09e:	9a03      	ldr	r2, [sp, #12]
    f0a0:	7bf3      	ldrb	r3, [r6, #15]
    f0a2:	7f10      	ldrb	r0, [r2, #28]
    f0a4:	2101      	movs	r1, #1
    f0a6:	4622      	mov	r2, r4
    f0a8:	f7ff fb86 	bl	e7b8 <attsPermissions>
              (*pAttr->pLen == attLen) &&
    f0ac:	2800      	cmp	r0, #0
    f0ae:	d13f      	bne.n	f130 <attsProcReadTypeReq+0x27c>
            if ((p + attLen + sizeof(uint16_t)) <= (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
    f0b0:	9a03      	ldr	r2, [sp, #12]
    f0b2:	8b53      	ldrh	r3, [r2, #26]
    f0b4:	9a04      	ldr	r2, [sp, #16]
    f0b6:	3308      	adds	r3, #8
    f0b8:	4413      	add	r3, r2
    f0ba:	eb0b 0907 	add.w	r9, fp, r7
    f0be:	4599      	cmp	r9, r3
    f0c0:	d875      	bhi.n	f1ae <attsProcReadTypeReq+0x2fa>
              UINT16_TO_BSTREAM(p, handle);
    f0c2:	0a23      	lsrs	r3, r4, #8
    f0c4:	f807 3c01 	strb.w	r3, [r7, #-1]
    f0c8:	f807 4c02 	strb.w	r4, [r7, #-2]
              memcpy(p, pAttr->pValue, attLen);
    f0cc:	6871      	ldr	r1, [r6, #4]
    f0ce:	465a      	mov	r2, fp
    f0d0:	4638      	mov	r0, r7
    f0d2:	f7fd f815 	bl	c100 <memcpy>
          if (handle == ATT_HANDLE_MAX)
    f0d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f0da:	429c      	cmp	r4, r3
    f0dc:	d005      	beq.n	f0ea <attsProcReadTypeReq+0x236>
          if (++handle > endHandle)
    f0de:	3401      	adds	r4, #1
    f0e0:	9b05      	ldr	r3, [sp, #20]
    f0e2:	b2a4      	uxth	r4, r4
    f0e4:	45a0      	cmp	r8, r4
    f0e6:	441f      	add	r7, r3
    f0e8:	d28a      	bcs.n	f000 <attsProcReadTypeReq+0x14c>
    f0ea:	e9dd b603 	ldrd	fp, r6, [sp, #12]
    f0ee:	f8cd 9008 	str.w	r9, [sp, #8]
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
    f0f2:	9b02      	ldr	r3, [sp, #8]
    f0f4:	f8bb 1018 	ldrh.w	r1, [fp, #24]
    f0f8:	f106 0208 	add.w	r2, r6, #8
    f0fc:	1a9a      	subs	r2, r3, r2
    f0fe:	b292      	uxth	r2, r2
    f100:	4633      	mov	r3, r6
    f102:	2004      	movs	r0, #4
}
    f104:	b007      	add	sp, #28
    f106:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
    f10a:	f001 bb71 	b.w	107f0 <L2cDataReq>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
    f10e:	6873      	ldr	r3, [r6, #4]
    f110:	eba4 0909 	sub.w	r9, r4, r9
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
    f114:	4544      	cmp	r4, r8
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
    f116:	eb03 1909 	add.w	r9, r3, r9, lsl #4
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
    f11a:	f67f af18 	bls.w	ef4e <attsProcReadTypeReq+0x9a>
    f11e:	e6f9      	b.n	ef14 <attsProcReadTypeReq+0x60>
      err = ATT_ERR_NOT_FOUND;
    f120:	230a      	movs	r3, #10
    startHandle = handle;
    f122:	2400      	movs	r4, #0
    f124:	e6d7      	b.n	eed6 <attsProcReadTypeReq+0x22>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
    f126:	686b      	ldr	r3, [r5, #4]
    f128:	1ba6      	subs	r6, r4, r6
    f12a:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    f12e:	e793      	b.n	f058 <attsProcReadTypeReq+0x1a4>
    f130:	e9dd b603 	ldrd	fp, r6, [sp, #12]
    f134:	e7dd      	b.n	f0f2 <attsProcReadTypeReq+0x23e>
          else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
    f136:	069b      	lsls	r3, r3, #26
    f138:	d5ad      	bpl.n	f096 <attsProcReadTypeReq+0x1e2>
    f13a:	4b21      	ldr	r3, [pc, #132]	; (f1c0 <attsProcReadTypeReq+0x30c>)
    f13c:	f8d3 9014 	ldr.w	r9, [r3, #20]
    f140:	f1b9 0f00 	cmp.w	r9, #0
    f144:	d0a7      	beq.n	f096 <attsProcReadTypeReq+0x1e2>
            cbackErr = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_READ, handle, pAttr->pValue);
    f146:	9a03      	ldr	r2, [sp, #12]
    f148:	6873      	ldr	r3, [r6, #4]
    f14a:	7f10      	ldrb	r0, [r2, #28]
    f14c:	2105      	movs	r1, #5
    f14e:	4622      	mov	r2, r4
    f150:	47c8      	blx	r9
    f152:	e79e      	b.n	f092 <attsProcReadTypeReq+0x1de>
    else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
    f154:	0691      	lsls	r1, r2, #26
    f156:	f57f af23 	bpl.w	efa0 <attsProcReadTypeReq+0xec>
    f15a:	4b19      	ldr	r3, [pc, #100]	; (f1c0 <attsProcReadTypeReq+0x30c>)
    f15c:	695e      	ldr	r6, [r3, #20]
    f15e:	2e00      	cmp	r6, #0
    f160:	f43f af1e 	beq.w	efa0 <attsProcReadTypeReq+0xec>
      err = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_READ, handle, pAttr->pValue);
    f164:	f8d9 3004 	ldr.w	r3, [r9, #4]
    f168:	f89b 001c 	ldrb.w	r0, [fp, #28]
    f16c:	4622      	mov	r2, r4
    f16e:	2105      	movs	r1, #5
    f170:	47b0      	blx	r6
    f172:	4603      	mov	r3, r0
    f174:	e712      	b.n	ef9c <attsProcReadTypeReq+0xe8>
        err = ATT_ERR_RESOURCES;
    f176:	2311      	movs	r3, #17
    f178:	e6ad      	b.n	eed6 <attsProcReadTypeReq+0x22>
      if ((memcmp(pPacket, attGattDbhChUuid, ATT_16_UUID_LEN) == 0) && attsCsfGetHashUpdateStatus())
    f17a:	785b      	ldrb	r3, [r3, #1]
    f17c:	f89a 2001 	ldrb.w	r2, [sl, #1]
    f180:	429a      	cmp	r2, r3
    f182:	f47f af13 	bne.w	efac <attsProcReadTypeReq+0xf8>
    f186:	f7fe fcb9 	bl	dafc <attsCsfGetHashUpdateStatus>
    f18a:	2800      	cmp	r0, #0
    f18c:	f43f af0e 	beq.w	efac <attsProcReadTypeReq+0xf8>
        pCcb->pPendDbHashRsp = WsfBufAlloc(sizeof(attPendDbHashRsp_t));
    f190:	2004      	movs	r0, #4
    f192:	f004 fadf 	bl	13754 <WsfBufAlloc>
    f196:	f8cb 0020 	str.w	r0, [fp, #32]
        if (pCcb->pPendDbHashRsp)
    f19a:	b160      	cbz	r0, f1b6 <attsProcReadTypeReq+0x302>
          pCcb->pPendDbHashRsp->startHandle = startHandle;
    f19c:	2300      	movs	r3, #0
    f19e:	f364 030f 	bfi	r3, r4, #0, #16
    f1a2:	f364 431f 	bfi	r3, r4, #16, #16
    f1a6:	6003      	str	r3, [r0, #0]
}
    f1a8:	b007      	add	sp, #28
    f1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f1ae:	f8dd b00c 	ldr.w	fp, [sp, #12]
    f1b2:	4616      	mov	r6, r2
    f1b4:	e79d      	b.n	f0f2 <attsProcReadTypeReq+0x23e>
          attsErrRsp(pCcb->handle, ATT_PDU_READ_TYPE_REQ, startHandle, ATT_ERR_RESOURCES);
    f1b6:	f8bb 0018 	ldrh.w	r0, [fp, #24]
    f1ba:	2311      	movs	r3, #17
    f1bc:	e68d      	b.n	eeda <attsProcReadTypeReq+0x26>
    f1be:	bf00      	nop
    f1c0:	10003f7c 	.word	0x10003f7c
    f1c4:	00023ee0 	.word	0x00023ee0

0000f1c8 <attsProcReadMultReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcReadMultReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
    f1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f1cc:	4607      	mov	r7, r0

  /* points to first handle */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;

  /* allocate max size buffer for response */
  if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
    f1ce:	8b40      	ldrh	r0, [r0, #26]
    f1d0:	3008      	adds	r0, #8
{
    f1d2:	b087      	sub	sp, #28
  if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
    f1d4:	b280      	uxth	r0, r0
{
    f1d6:	460c      	mov	r4, r1
    f1d8:	4616      	mov	r6, r2
  if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
    f1da:	f000 fc87 	bl	faec <attMsgAlloc>
    f1de:	4682      	mov	sl, r0
    f1e0:	2800      	cmp	r0, #0
    f1e2:	d07d      	beq.n	f2e0 <attsProcReadMultReq+0x118>
  {
    p = pBuf + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, ATT_PDU_READ_MULT_RSP);
    f1e4:	220f      	movs	r2, #15
  pEnd = pPacket + L2C_PAYLOAD_START + len;
    f1e6:	f104 0108 	add.w	r1, r4, #8
    f1ea:	1873      	adds	r3, r6, r1
    UINT8_TO_BSTREAM(p, ATT_PDU_READ_MULT_RSP);
    f1ec:	7202      	strb	r2, [r0, #8]
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
    f1ee:	f106 0209 	add.w	r2, r6, #9

    /* while there are handles remaining and there is space in response buffer */
    while (pPacket < pEnd)
    f1f2:	4293      	cmp	r3, r2
    UINT8_TO_BSTREAM(p, ATT_PDU_READ_MULT_RSP);
    f1f4:	f100 0809 	add.w	r8, r0, #9
    while (pPacket < pEnd)
    f1f8:	d965      	bls.n	f2c6 <attsProcReadMultReq+0xfe>
    f1fa:	eba3 0906 	sub.w	r9, r3, r6
    f1fe:	f1a9 090a 	sub.w	r9, r9, #10
    f202:	f106 030d 	add.w	r3, r6, #13
    f206:	f029 0901 	bic.w	r9, r9, #1
    f20a:	4499      	add	r9, r3
    f20c:	360b      	adds	r6, #11
    f20e:	e014      	b.n	f23a <attsProcReadMultReq+0x72>
        break;
      }

      /* call read callback if desired */
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
          (pGroup->readCback != NULL))
    f210:	9a05      	ldr	r2, [sp, #20]
    f212:	f8d2 b008 	ldr.w	fp, [r2, #8]
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
    f216:	f1bb 0f00 	cmp.w	fp, #0
    f21a:	d026      	beq.n	f26a <attsProcReadMultReq+0xa2>
      {
        err = (*pGroup->readCback)(pCcb->connId, handle, ATT_PDU_READ_MULT_REQ, 0, pAttr);
    f21c:	9500      	str	r5, [sp, #0]
    f21e:	4603      	mov	r3, r0
    f220:	220e      	movs	r2, #14
    f222:	7f38      	ldrb	r0, [r7, #28]
    f224:	4621      	mov	r1, r4
    f226:	47d8      	blx	fp
        if (err != ATT_SUCCESS)
    f228:	bb70      	cbnz	r0, f288 <attsProcReadMultReq+0xc0>
        {
          break;
        }
      }

      if (p < (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
    f22a:	8b7a      	ldrh	r2, [r7, #26]
    f22c:	3208      	adds	r2, #8
    f22e:	4452      	add	r2, sl
    f230:	4542      	cmp	r2, r8
    f232:	d837      	bhi.n	f2a4 <attsProcReadMultReq+0xdc>
    while (pPacket < pEnd)
    f234:	3602      	adds	r6, #2
    f236:	45b1      	cmp	r9, r6
    f238:	d045      	beq.n	f2c6 <attsProcReadMultReq+0xfe>
      BSTREAM_TO_UINT16(handle, pPacket);
    f23a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
    f23e:	f816 4c02 	ldrb.w	r4, [r6, #-2]
    f242:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    f246:	b2a4      	uxth	r4, r4
      if ((pAttr = attsFindByHandle(handle, &pGroup)) == NULL)
    f248:	a905      	add	r1, sp, #20
    f24a:	4620      	mov	r0, r4
    f24c:	f7ff fa9c 	bl	e788 <attsFindByHandle>
    f250:	4605      	mov	r5, r0
    f252:	2800      	cmp	r0, #0
    f254:	d047      	beq.n	f2e6 <attsProcReadMultReq+0x11e>
      if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
    f256:	7bc3      	ldrb	r3, [r0, #15]
    f258:	7f38      	ldrb	r0, [r7, #28]
    f25a:	4622      	mov	r2, r4
    f25c:	2101      	movs	r1, #1
    f25e:	f7ff faab 	bl	e7b8 <attsPermissions>
    f262:	b988      	cbnz	r0, f288 <attsProcReadMultReq+0xc0>
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
    f264:	7bab      	ldrb	r3, [r5, #14]
    f266:	075a      	lsls	r2, r3, #29
    f268:	d4d2      	bmi.n	f210 <attsProcReadMultReq+0x48>
      else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
    f26a:	069b      	lsls	r3, r3, #26
    f26c:	d5dd      	bpl.n	f22a <attsProcReadMultReq+0x62>
    f26e:	4b1f      	ldr	r3, [pc, #124]	; (f2ec <attsProcReadMultReq+0x124>)
    f270:	f8d3 b014 	ldr.w	fp, [r3, #20]
    f274:	f1bb 0f00 	cmp.w	fp, #0
    f278:	d0d7      	beq.n	f22a <attsProcReadMultReq+0x62>
        err = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_READ, handle, pAttr->pValue);
    f27a:	686b      	ldr	r3, [r5, #4]
    f27c:	7f38      	ldrb	r0, [r7, #28]
    f27e:	4622      	mov	r2, r4
    f280:	2105      	movs	r1, #5
    f282:	47d8      	blx	fp
        if (err != ATT_SUCCESS)
    f284:	2800      	cmp	r0, #0
    f286:	d0d0      	beq.n	f22a <attsProcReadMultReq+0x62>
    f288:	4603      	mov	r3, r0
  else
  {
    /* discard response buffer */
    if (pBuf != NULL)
    {
      WsfMsgFree(pBuf);
    f28a:	4650      	mov	r0, sl
    f28c:	9303      	str	r3, [sp, #12]
    f28e:	f004 fac9 	bl	13824 <WsfMsgFree>
    f292:	9b03      	ldr	r3, [sp, #12]
    }

    attsErrRsp(pCcb->handle, ATT_PDU_READ_MULT_REQ, handle, err);
    f294:	8b38      	ldrh	r0, [r7, #24]
    f296:	4622      	mov	r2, r4
    f298:	210e      	movs	r1, #14
    f29a:	f7fe ffb1 	bl	e200 <attsErrRsp>
  }
}
    f29e:	b007      	add	sp, #28
    f2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        readLen = (*pAttr->pLen < readLen) ? *pAttr->pLen : readLen;
    f2a4:	68ab      	ldr	r3, [r5, #8]
        memcpy(p, pAttr->pValue, readLen);
    f2a6:	6869      	ldr	r1, [r5, #4]
        readLen = (*pAttr->pLen < readLen) ? *pAttr->pLen : readLen;
    f2a8:	881c      	ldrh	r4, [r3, #0]
        readLen = (pBuf + pCcb->mtu + L2C_PAYLOAD_START) - p;
    f2aa:	eba2 0208 	sub.w	r2, r2, r8
    f2ae:	b292      	uxth	r2, r2
        memcpy(p, pAttr->pValue, readLen);
    f2b0:	4294      	cmp	r4, r2
    f2b2:	bf28      	it	cs
    f2b4:	4614      	movcs	r4, r2
    f2b6:	4640      	mov	r0, r8
    f2b8:	4622      	mov	r2, r4
    while (pPacket < pEnd)
    f2ba:	3602      	adds	r6, #2
        memcpy(p, pAttr->pValue, readLen);
    f2bc:	f7fc ff20 	bl	c100 <memcpy>
    while (pPacket < pEnd)
    f2c0:	45b1      	cmp	r9, r6
        p += readLen;
    f2c2:	44a0      	add	r8, r4
    while (pPacket < pEnd)
    f2c4:	d1b9      	bne.n	f23a <attsProcReadMultReq+0x72>
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
    f2c6:	f10a 0208 	add.w	r2, sl, #8
    f2ca:	eba8 0202 	sub.w	r2, r8, r2
    f2ce:	8b39      	ldrh	r1, [r7, #24]
    f2d0:	4653      	mov	r3, sl
    f2d2:	b292      	uxth	r2, r2
    f2d4:	2004      	movs	r0, #4
    f2d6:	f001 fa8b 	bl	107f0 <L2cDataReq>
}
    f2da:	b007      	add	sp, #28
    f2dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = ATT_ERR_RESOURCES;
    f2e0:	2311      	movs	r3, #17
  uint16_t    handle = ATT_HANDLE_NONE;
    f2e2:	4604      	mov	r4, r0
    f2e4:	e7d6      	b.n	f294 <attsProcReadMultReq+0xcc>
        err = ATT_ERR_HANDLE;
    f2e6:	2301      	movs	r3, #1
    f2e8:	e7cf      	b.n	f28a <attsProcReadMultReq+0xc2>
    f2ea:	bf00      	nop
    f2ec:	10003f7c 	.word	0x10003f7c

0000f2f0 <attsProcReadGroupTypeReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcReadGroupTypeReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
    f2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f2f4:	b089      	sub	sp, #36	; 0x24
  uint16_t    endHandle;
  uint16_t    handle;
  uint8_t     uuidLen;
  uint8_t     attLen;
  uint8_t     err = ATT_SUCCESS;
  uint8_t     primSvcUuid[ATT_16_UUID_LEN] = {UINT16_TO_BYTES(ATT_UUID_PRIMARY_SERVICE)};
    f2f6:	f44f 5320 	mov.w	r3, #10240	; 0x2800

  /* parse handles; pPacket then points to the uuid */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
  BSTREAM_TO_UINT16(startHandle, pPacket);
    f2fa:	f892 8009 	ldrb.w	r8, [r2, #9]
  uint8_t     primSvcUuid[ATT_16_UUID_LEN] = {UINT16_TO_BYTES(ATT_UUID_PRIMARY_SERVICE)};
    f2fe:	f8ad 301c 	strh.w	r3, [sp, #28]
  BSTREAM_TO_UINT16(endHandle, pPacket);

  /* get and verify uuid length */
  uuidLen = len - ATT_READ_GROUP_TYPE_REQ_LEN;
    f302:	3905      	subs	r1, #5
  BSTREAM_TO_UINT16(startHandle, pPacket);
    f304:	7a93      	ldrb	r3, [r2, #10]
  uuidLen = len - ATT_READ_GROUP_TYPE_REQ_LEN;
    f306:	b2cc      	uxtb	r4, r1
  BSTREAM_TO_UINT16(startHandle, pPacket);
    f308:	eb08 2803 	add.w	r8, r8, r3, lsl #8
  if (!((uuidLen == ATT_16_UUID_LEN) || (uuidLen == ATT_128_UUID_LEN)))
    f30c:	2c02      	cmp	r4, #2
{
    f30e:	4606      	mov	r6, r0
  BSTREAM_TO_UINT16(startHandle, pPacket);
    f310:	fa1f f888 	uxth.w	r8, r8
  if (!((uuidLen == ATT_16_UUID_LEN) || (uuidLen == ATT_128_UUID_LEN)))
    f314:	d00c      	beq.n	f330 <attsProcReadGroupTypeReq+0x40>
    f316:	2c10      	cmp	r4, #16
    f318:	d00a      	beq.n	f330 <attsProcReadGroupTypeReq+0x40>
      }
    }
  }

  /* set channel as busy for service discovery */
  attsDiscBusy(pCcb);
    f31a:	f7fe ff9b 	bl	e254 <attsDiscBusy>
    err = ATT_ERR_INVALID_PDU;
    f31e:	2304      	movs	r3, #4
  {
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
  }
  else
  {
    attsErrRsp(pCcb->handle, ATT_PDU_READ_GROUP_TYPE_REQ, startHandle, err);
    f320:	8b30      	ldrh	r0, [r6, #24]
    f322:	4642      	mov	r2, r8
    f324:	2110      	movs	r1, #16
    f326:	f7fe ff6b 	bl	e200 <attsErrRsp>
  }
}
    f32a:	b009      	add	sp, #36	; 0x24
    f32c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if ((startHandle == 0) || (startHandle > endHandle))
    f330:	f1b8 0f00 	cmp.w	r8, #0
    f334:	d104      	bne.n	f340 <attsProcReadGroupTypeReq+0x50>
  attsDiscBusy(pCcb);
    f336:	4630      	mov	r0, r6
    f338:	f7fe ff8c 	bl	e254 <attsDiscBusy>
    err = ATT_ERR_HANDLE;
    f33c:	2301      	movs	r3, #1
    f33e:	e7ef      	b.n	f320 <attsProcReadGroupTypeReq+0x30>
  BSTREAM_TO_UINT16(endHandle, pPacket);
    f340:	7b13      	ldrb	r3, [r2, #12]
    f342:	7ad7      	ldrb	r7, [r2, #11]
    f344:	eb07 2703 	add.w	r7, r7, r3, lsl #8
    f348:	b2bf      	uxth	r7, r7
  else if ((startHandle == 0) || (startHandle > endHandle))
    f34a:	45b8      	cmp	r8, r7
    f34c:	d8f3      	bhi.n	f336 <attsProcReadGroupTypeReq+0x46>
  BSTREAM_TO_UINT16(endHandle, pPacket);
    f34e:	f102 050d 	add.w	r5, r2, #13
  else if (!attsUuid16Cmp(primSvcUuid, uuidLen, pPacket))
    f352:	462a      	mov	r2, r5
    f354:	4621      	mov	r1, r4
    f356:	a807      	add	r0, sp, #28
    f358:	f7ff fa02 	bl	e760 <attsUuid16Cmp>
    f35c:	b920      	cbnz	r0, f368 <attsProcReadGroupTypeReq+0x78>
  attsDiscBusy(pCcb);
    f35e:	4630      	mov	r0, r6
    f360:	f7fe ff78 	bl	e254 <attsDiscBusy>
    err = ATT_ERR_GROUP_TYPE;
    f364:	2310      	movs	r3, #16
    f366:	e7db      	b.n	f320 <attsProcReadGroupTypeReq+0x30>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
    f368:	4b8d      	ldr	r3, [pc, #564]	; (f5a0 <attsProcReadGroupTypeReq+0x2b0>)
    f36a:	f8d3 a000 	ldr.w	sl, [r3]
    f36e:	f1ba 0f00 	cmp.w	sl, #0
    f372:	d046      	beq.n	f402 <attsProcReadGroupTypeReq+0x112>
        if (startHandle == ATT_HANDLE_MAX)
    f374:	4653      	mov	r3, sl
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
    f376:	46c1      	mov	r9, r8
        if (startHandle == ATT_HANDLE_MAX)
    f378:	46a2      	mov	sl, r4
    f37a:	461c      	mov	r4, r3
    f37c:	e005      	b.n	f38a <attsProcReadGroupTypeReq+0x9a>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
    f37e:	8a63      	ldrh	r3, [r4, #18]
    f380:	454b      	cmp	r3, r9
    f382:	d238      	bcs.n	f3f6 <attsProcReadGroupTypeReq+0x106>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
    f384:	6824      	ldr	r4, [r4, #0]
    f386:	2c00      	cmp	r4, #0
    f388:	d03b      	beq.n	f402 <attsProcReadGroupTypeReq+0x112>
    if ((startHandle < pGroup->startHandle) && (endHandle >= pGroup->startHandle))
    f38a:	f8b4 b010 	ldrh.w	fp, [r4, #16]
    f38e:	45cb      	cmp	fp, r9
    f390:	d9f5      	bls.n	f37e <attsProcReadGroupTypeReq+0x8e>
    f392:	455f      	cmp	r7, fp
    f394:	d3f6      	bcc.n	f384 <attsProcReadGroupTypeReq+0x94>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
    f396:	8a63      	ldrh	r3, [r4, #18]
    f398:	455b      	cmp	r3, fp
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
    f39a:	46d9      	mov	r9, fp
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
    f39c:	d3f2      	bcc.n	f384 <attsProcReadGroupTypeReq+0x94>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
    f39e:	f8d4 b004 	ldr.w	fp, [r4, #4]
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
    f3a2:	e00e      	b.n	f3c2 <attsProcReadGroupTypeReq+0xd2>
        if (startHandle == ATT_HANDLE_MAX)
    f3a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f3a8:	4599      	cmp	r9, r3
        (*pAttr)++;
    f3aa:	f10b 0b10 	add.w	fp, fp, #16
        startHandle++;
    f3ae:	f109 0301 	add.w	r3, r9, #1
        if (startHandle == ATT_HANDLE_MAX)
    f3b2:	d0e7      	beq.n	f384 <attsProcReadGroupTypeReq+0x94>
        startHandle++;
    f3b4:	fa1f f983 	uxth.w	r9, r3
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
    f3b8:	8a63      	ldrh	r3, [r4, #18]
    f3ba:	454b      	cmp	r3, r9
    f3bc:	d3e2      	bcc.n	f384 <attsProcReadGroupTypeReq+0x94>
    f3be:	454f      	cmp	r7, r9
    f3c0:	d3e0      	bcc.n	f384 <attsProcReadGroupTypeReq+0x94>
        if (attsUuidCmp(*pAttr, uuidLen, pUuid))
    f3c2:	4658      	mov	r0, fp
    f3c4:	462a      	mov	r2, r5
    f3c6:	4651      	mov	r1, sl
    f3c8:	f7ff f9a8 	bl	e71c <attsUuidCmp>
    f3cc:	2800      	cmp	r0, #0
    f3ce:	d0e9      	beq.n	f3a4 <attsProcReadGroupTypeReq+0xb4>
    if (handle == ATT_HANDLE_NONE)
    f3d0:	4654      	mov	r4, sl
    f3d2:	f1b9 0f00 	cmp.w	r9, #0
    f3d6:	d014      	beq.n	f402 <attsProcReadGroupTypeReq+0x112>
    else if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
    f3d8:	f89b 300f 	ldrb.w	r3, [fp, #15]
    f3dc:	7f30      	ldrb	r0, [r6, #28]
    f3de:	464a      	mov	r2, r9
    f3e0:	2101      	movs	r1, #1
    f3e2:	f7ff f9e9 	bl	e7b8 <attsPermissions>
    f3e6:	b188      	cbz	r0, f40c <attsProcReadGroupTypeReq+0x11c>
    f3e8:	9001      	str	r0, [sp, #4]
  attsDiscBusy(pCcb);
    f3ea:	4630      	mov	r0, r6
    f3ec:	f7fe ff32 	bl	e254 <attsDiscBusy>
    f3f0:	46c8      	mov	r8, r9
    f3f2:	9b01      	ldr	r3, [sp, #4]
    f3f4:	e794      	b.n	f320 <attsProcReadGroupTypeReq+0x30>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
    f3f6:	6863      	ldr	r3, [r4, #4]
    f3f8:	eba9 0b0b 	sub.w	fp, r9, fp
    f3fc:	eb03 1b0b 	add.w	fp, r3, fp, lsl #4
    f400:	e7dd      	b.n	f3be <attsProcReadGroupTypeReq+0xce>
  attsDiscBusy(pCcb);
    f402:	4630      	mov	r0, r6
    f404:	f7fe ff26 	bl	e254 <attsDiscBusy>
      err = ATT_ERR_NOT_FOUND;
    f408:	230a      	movs	r3, #10
    f40a:	e789      	b.n	f320 <attsProcReadGroupTypeReq+0x30>
      if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
    f40c:	8b70      	ldrh	r0, [r6, #26]
    f40e:	3008      	adds	r0, #8
    f410:	b280      	uxth	r0, r0
    f412:	f000 fb6b 	bl	faec <attMsgAlloc>
    f416:	4682      	mov	sl, r0
    f418:	2800      	cmp	r0, #0
    f41a:	f000 80bc 	beq.w	f596 <attsProcReadGroupTypeReq+0x2a6>
        UINT8_TO_BSTREAM(p, ATT_PDU_READ_GROUP_TYPE_RSP);
    f41e:	2311      	movs	r3, #17
    f420:	7203      	strb	r3, [r0, #8]
        attLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_GROUP_TYPE_RSP_LEN - (2 * sizeof(uint16_t)))) ?
    f422:	f8db 3008 	ldr.w	r3, [fp, #8]
    f426:	881a      	ldrh	r2, [r3, #0]
    f428:	8b73      	ldrh	r3, [r6, #26]
        UINT16_TO_BSTREAM(p, handle);
    f42a:	f880 900a 	strb.w	r9, [r0, #10]
        attLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_GROUP_TYPE_RSP_LEN - (2 * sizeof(uint16_t)))) ?
    f42e:	3b06      	subs	r3, #6
                  *pAttr->pLen : (pCcb->mtu - ATT_READ_GROUP_TYPE_RSP_LEN - (2 * sizeof(uint16_t)));
    f430:	4293      	cmp	r3, r2
    f432:	bf28      	it	cs
    f434:	4613      	movcs	r3, r2
        attLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_GROUP_TYPE_RSP_LEN - (2 * sizeof(uint16_t)))) ?
    f436:	b2db      	uxtb	r3, r3
        UINT8_TO_BSTREAM(p, attLen + (2 * sizeof(uint16_t)));
    f438:	1d1a      	adds	r2, r3, #4
    f43a:	9301      	str	r3, [sp, #4]
        UINT16_TO_BSTREAM(p, handle);
    f43c:	ea4f 2319 	mov.w	r3, r9, lsr #8
        UINT8_TO_BSTREAM(p, attLen + (2 * sizeof(uint16_t)));
    f440:	7242      	strb	r2, [r0, #9]
        UINT16_TO_BSTREAM(p, handle);
    f442:	72c3      	strb	r3, [r0, #11]
        handle = attsFindServiceGroupEnd(handle);
    f444:	4648      	mov	r0, r9
        UINT8_TO_BSTREAM(p, attLen + (2 * sizeof(uint16_t)));
    f446:	9205      	str	r2, [sp, #20]
        handle = attsFindServiceGroupEnd(handle);
    f448:	f7ff fb9e 	bl	eb88 <attsFindServiceGroupEnd>
        UINT16_TO_BSTREAM(p, handle);
    f44c:	0a03      	lsrs	r3, r0, #8
    f44e:	f88a 000c 	strb.w	r0, [sl, #12]
    f452:	f88a 300d 	strb.w	r3, [sl, #13]
        memcpy(p, pAttr->pValue, attLen);
    f456:	f8db 1004 	ldr.w	r1, [fp, #4]
    f45a:	f8dd b004 	ldr.w	fp, [sp, #4]
        UINT16_TO_BSTREAM(p, handle);
    f45e:	f10a 080e 	add.w	r8, sl, #14
        handle = attsFindServiceGroupEnd(handle);
    f462:	4681      	mov	r9, r0
        memcpy(p, pAttr->pValue, attLen);
    f464:	465a      	mov	r2, fp
    f466:	4640      	mov	r0, r8
    f468:	f7fc fe4a 	bl	c100 <memcpy>
          if (handle == ATT_HANDLE_MAX)
    f46c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f470:	4591      	cmp	r9, r2
        p += attLen;
    f472:	44d8      	add	r8, fp
          if (handle == ATT_HANDLE_MAX)
    f474:	d075      	beq.n	f562 <attsProcReadGroupTypeReq+0x272>
          if (++handle > endHandle)
    f476:	f109 0901 	add.w	r9, r9, #1
    f47a:	fa1f f989 	uxth.w	r9, r9
    f47e:	454f      	cmp	r7, r9
    f480:	d36f      	bcc.n	f562 <attsProcReadGroupTypeReq+0x272>
    f482:	f108 0204 	add.w	r2, r8, #4
    f486:	464b      	mov	r3, r9
    f488:	f8cd a004 	str.w	sl, [sp, #4]
    f48c:	46a1      	mov	r9, r4
    f48e:	46b8      	mov	r8, r7
    f490:	4692      	mov	sl, r2
    f492:	9602      	str	r6, [sp, #8]
    f494:	461c      	mov	r4, r3
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
    f496:	4b42      	ldr	r3, [pc, #264]	; (f5a0 <attsProcReadGroupTypeReq+0x2b0>)
    f498:	681e      	ldr	r6, [r3, #0]
    f49a:	f1aa 0304 	sub.w	r3, sl, #4
    f49e:	9303      	str	r3, [sp, #12]
    f4a0:	b936      	cbnz	r6, f4b0 <attsProcReadGroupTypeReq+0x1c0>
    f4a2:	e073      	b.n	f58c <attsProcReadGroupTypeReq+0x29c>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
    f4a4:	8a72      	ldrh	r2, [r6, #18]
    f4a6:	42a2      	cmp	r2, r4
    f4a8:	d26b      	bcs.n	f582 <attsProcReadGroupTypeReq+0x292>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
    f4aa:	6836      	ldr	r6, [r6, #0]
    f4ac:	2e00      	cmp	r6, #0
    f4ae:	d06d      	beq.n	f58c <attsProcReadGroupTypeReq+0x29c>
    if ((startHandle < pGroup->startHandle) && (endHandle >= pGroup->startHandle))
    f4b0:	8a33      	ldrh	r3, [r6, #16]
    f4b2:	42a3      	cmp	r3, r4
    f4b4:	d9f6      	bls.n	f4a4 <attsProcReadGroupTypeReq+0x1b4>
    f4b6:	4598      	cmp	r8, r3
    f4b8:	d3f7      	bcc.n	f4aa <attsProcReadGroupTypeReq+0x1ba>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
    f4ba:	8a72      	ldrh	r2, [r6, #18]
    f4bc:	429a      	cmp	r2, r3
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
    f4be:	461c      	mov	r4, r3
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
    f4c0:	d3f3      	bcc.n	f4aa <attsProcReadGroupTypeReq+0x1ba>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
    f4c2:	6877      	ldr	r7, [r6, #4]
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
    f4c4:	e00d      	b.n	f4e2 <attsProcReadGroupTypeReq+0x1f2>
        if (startHandle == ATT_HANDLE_MAX)
    f4c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f4ca:	429c      	cmp	r4, r3
        (*pAttr)++;
    f4cc:	f107 0710 	add.w	r7, r7, #16
        startHandle++;
    f4d0:	f104 0301 	add.w	r3, r4, #1
        if (startHandle == ATT_HANDLE_MAX)
    f4d4:	d0e9      	beq.n	f4aa <attsProcReadGroupTypeReq+0x1ba>
        startHandle++;
    f4d6:	b29c      	uxth	r4, r3
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
    f4d8:	8a73      	ldrh	r3, [r6, #18]
    f4da:	42a3      	cmp	r3, r4
    f4dc:	d3e5      	bcc.n	f4aa <attsProcReadGroupTypeReq+0x1ba>
    f4de:	45a0      	cmp	r8, r4
    f4e0:	d3e3      	bcc.n	f4aa <attsProcReadGroupTypeReq+0x1ba>
        if (attsUuidCmp(*pAttr, uuidLen, pUuid))
    f4e2:	4638      	mov	r0, r7
    f4e4:	462a      	mov	r2, r5
    f4e6:	4649      	mov	r1, r9
    f4e8:	f7ff f918 	bl	e71c <attsUuidCmp>
    f4ec:	2800      	cmp	r0, #0
    f4ee:	d0ea      	beq.n	f4c6 <attsProcReadGroupTypeReq+0x1d6>
          if ((handle = attsFindUuidInRange(handle, endHandle, uuidLen,
    f4f0:	2c00      	cmp	r4, #0
    f4f2:	d04b      	beq.n	f58c <attsProcReadGroupTypeReq+0x29c>
          if ((*pAttr->pLen == attLen) &&
    f4f4:	68bb      	ldr	r3, [r7, #8]
    f4f6:	881b      	ldrh	r3, [r3, #0]
    f4f8:	455b      	cmp	r3, fp
    f4fa:	d147      	bne.n	f58c <attsProcReadGroupTypeReq+0x29c>
              (attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
    f4fc:	9e02      	ldr	r6, [sp, #8]
    f4fe:	7bfb      	ldrb	r3, [r7, #15]
    f500:	7f30      	ldrb	r0, [r6, #28]
    f502:	4622      	mov	r2, r4
    f504:	2101      	movs	r1, #1
    f506:	f7ff f957 	bl	e7b8 <attsPermissions>
          if ((*pAttr->pLen == attLen) &&
    f50a:	2800      	cmp	r0, #0
    f50c:	d13e      	bne.n	f58c <attsProcReadGroupTypeReq+0x29c>
                (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
    f50e:	8b72      	ldrh	r2, [r6, #26]
    f510:	9b01      	ldr	r3, [sp, #4]
    f512:	3208      	adds	r2, #8
    f514:	441a      	add	r2, r3
    f516:	eb0b 030a 	add.w	r3, fp, sl
            if ((p + attLen + (2 * sizeof(uint16_t))) <=
    f51a:	4293      	cmp	r3, r2
    f51c:	9304      	str	r3, [sp, #16]
    f51e:	d835      	bhi.n	f58c <attsProcReadGroupTypeReq+0x29c>
              UINT16_TO_BSTREAM(p, handle);
    f520:	0a22      	lsrs	r2, r4, #8
    f522:	f80a 4c04 	strb.w	r4, [sl, #-4]
    f526:	f80a 2c03 	strb.w	r2, [sl, #-3]
              handle = attsFindServiceGroupEnd(handle);
    f52a:	4620      	mov	r0, r4
    f52c:	f7ff fb2c 	bl	eb88 <attsFindServiceGroupEnd>
              UINT16_TO_BSTREAM(p, handle);
    f530:	0a02      	lsrs	r2, r0, #8
    f532:	f80a 0c02 	strb.w	r0, [sl, #-2]
    f536:	f80a 2c01 	strb.w	r2, [sl, #-1]
              handle = attsFindServiceGroupEnd(handle);
    f53a:	4604      	mov	r4, r0
              memcpy(p, pAttr->pValue, attLen);
    f53c:	6879      	ldr	r1, [r7, #4]
    f53e:	465a      	mov	r2, fp
    f540:	4650      	mov	r0, sl
    f542:	f7fc fddd 	bl	c100 <memcpy>
          if (handle == ATT_HANDLE_MAX)
    f546:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f54a:	429c      	cmp	r4, r3
    f54c:	9b04      	ldr	r3, [sp, #16]
    f54e:	d005      	beq.n	f55c <attsProcReadGroupTypeReq+0x26c>
          if (++handle > endHandle)
    f550:	3401      	adds	r4, #1
    f552:	9a05      	ldr	r2, [sp, #20]
    f554:	b2a4      	uxth	r4, r4
    f556:	45a0      	cmp	r8, r4
    f558:	4492      	add	sl, r2
    f55a:	d29c      	bcs.n	f496 <attsProcReadGroupTypeReq+0x1a6>
    f55c:	e9dd a601 	ldrd	sl, r6, [sp, #4]
    f560:	4698      	mov	r8, r3
  attsDiscBusy(pCcb);
    f562:	4630      	mov	r0, r6
    f564:	f7fe fe76 	bl	e254 <attsDiscBusy>
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
    f568:	f10a 0208 	add.w	r2, sl, #8
    f56c:	eba8 0202 	sub.w	r2, r8, r2
    f570:	8b31      	ldrh	r1, [r6, #24]
    f572:	4653      	mov	r3, sl
    f574:	b292      	uxth	r2, r2
    f576:	2004      	movs	r0, #4
    f578:	f001 f93a 	bl	107f0 <L2cDataReq>
}
    f57c:	b009      	add	sp, #36	; 0x24
    f57e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
    f582:	6872      	ldr	r2, [r6, #4]
    f584:	1ae3      	subs	r3, r4, r3
    f586:	eb02 1703 	add.w	r7, r2, r3, lsl #4
    f58a:	e7a8      	b.n	f4de <attsProcReadGroupTypeReq+0x1ee>
    f58c:	e9dd 6802 	ldrd	r6, r8, [sp, #8]
    f590:	f8dd a004 	ldr.w	sl, [sp, #4]
    f594:	e7e5      	b.n	f562 <attsProcReadGroupTypeReq+0x272>
  attsDiscBusy(pCcb);
    f596:	4630      	mov	r0, r6
    f598:	f7fe fe5c 	bl	e254 <attsDiscBusy>
        err = ATT_ERR_RESOURCES;
    f59c:	2311      	movs	r3, #17
    f59e:	e6bf      	b.n	f320 <attsProcReadGroupTypeReq+0x30>
    f5a0:	10003f7c 	.word	0x10003f7c

0000f5a4 <AttsSetCsrk>:
 *  \return None.
 */
/*************************************************************************************************/
void AttsSetCsrk(dmConnId_t connId, uint8_t *pCsrk, bool_t authenticated)
{
  attsSignCcbByConnId(connId)->pCsrk = pCsrk;
    f5a4:	4b03      	ldr	r3, [pc, #12]	; (f5b4 <AttsSetCsrk+0x10>)
  return &attsSignCb.ccb[connId - 1];
    f5a6:	3801      	subs	r0, #1
  attsSignCcbByConnId(connId)->pCsrk = pCsrk;
    f5a8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    f5ac:	6041      	str	r1, [r0, #4]
  attsSignCcbByConnId(connId)->authenticated = authenticated;
    f5ae:	7302      	strb	r2, [r0, #12]
}
    f5b0:	4770      	bx	lr
    f5b2:	bf00      	nop
    f5b4:	10003f98 	.word	0x10003f98

0000f5b8 <AttsSetSignCounter>:
 *  \return None.
 */
/*************************************************************************************************/
void AttsSetSignCounter(dmConnId_t connId, uint32_t signCounter)
{
  attsSignCcbByConnId(connId)->signCounter = signCounter;
    f5b8:	4b02      	ldr	r3, [pc, #8]	; (f5c4 <AttsSetSignCounter+0xc>)
    f5ba:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    f5be:	f840 1c10 	str.w	r1, [r0, #-16]
}
    f5c2:	4770      	bx	lr
    f5c4:	10003f98 	.word	0x10003f98

0000f5c8 <AttsGetSignCounter>:
 *  \return Sign counter.
 */
/*************************************************************************************************/
uint32_t AttsGetSignCounter(dmConnId_t connId)
{
  return attsSignCcbByConnId(connId)->signCounter;
    f5c8:	4b02      	ldr	r3, [pc, #8]	; (f5d4 <AttsGetSignCounter+0xc>)
    f5ca:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
    f5ce:	f850 0c10 	ldr.w	r0, [r0, #-16]
    f5d2:	4770      	bx	lr
    f5d4:	10003f98 	.word	0x10003f98

0000f5d8 <attsProcWrite>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcWrite(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
    f5d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint8_t     err = ATT_SUCCESS;

  /* parse opcode handle, calculate write length */
  pPacket += L2C_PAYLOAD_START;
  BSTREAM_TO_UINT8(opcode, pPacket);
  BSTREAM_TO_UINT16(handle, pPacket);
    f5dc:	7a93      	ldrb	r3, [r2, #10]
    f5de:	7a54      	ldrb	r4, [r2, #9]
  BSTREAM_TO_UINT8(opcode, pPacket);
    f5e0:	f892 9008 	ldrb.w	r9, [r2, #8]
  BSTREAM_TO_UINT16(handle, pPacket);
    f5e4:	eb04 2403 	add.w	r4, r4, r3, lsl #8
{
    f5e8:	b087      	sub	sp, #28
  BSTREAM_TO_UINT16(handle, pPacket);
    f5ea:	b2a4      	uxth	r4, r4
{
    f5ec:	460d      	mov	r5, r1
    f5ee:	4606      	mov	r6, r0
  writeLen = len - ATT_WRITE_REQ_LEN;

  /* find attribute */
  if ((pAttr = attsFindByHandle(handle, &pGroup)) != NULL)
    f5f0:	a905      	add	r1, sp, #20
    f5f2:	4620      	mov	r0, r4
{
    f5f4:	4617      	mov	r7, r2
  if ((pAttr = attsFindByHandle(handle, &pGroup)) != NULL)
    f5f6:	f7ff f8c7 	bl	e788 <attsFindByHandle>
    f5fa:	b350      	cbz	r0, f652 <attsProcWrite+0x7a>
  {
    /* verify permissions */
    if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_WRITE,
    f5fc:	7bc3      	ldrb	r3, [r0, #15]
    f5fe:	4680      	mov	r8, r0
    f600:	4622      	mov	r2, r4
    f602:	7f30      	ldrb	r0, [r6, #28]
    f604:	2110      	movs	r1, #16
    f606:	f7ff f8d7 	bl	e7b8 <attsPermissions>
    f60a:	4603      	mov	r3, r0
    f60c:	b158      	cbz	r0, f626 <attsProcWrite+0x4e>
  {
    err = ATT_ERR_HANDLE;
  }

  /* send error response for write req only */
  if (err && (opcode == ATT_PDU_WRITE_REQ))
    f60e:	f1b9 0f12 	cmp.w	r9, #18
    f612:	d121      	bne.n	f658 <attsProcWrite+0x80>
  {
    if (err == ATT_RSP_PENDING)
    f614:	2b79      	cmp	r3, #121	; 0x79
    f616:	d114      	bne.n	f642 <attsProcWrite+0x6a>
    {
      /* set response pending */
      pCcb->control |= ATT_CCB_STATUS_RSP_PENDING;
    f618:	7f73      	ldrb	r3, [r6, #29]
    f61a:	f043 0308 	orr.w	r3, r3, #8
    f61e:	7773      	strb	r3, [r6, #29]
    else
    {
      attsErrRsp(pCcb->handle, ATT_PDU_WRITE_REQ, handle, err);
    }
  }
}
    f620:	b007      	add	sp, #28
    f622:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (((pAttr->settings & ATTS_SET_VARIABLE_LEN) == 0) &&
    f626:	f898 300e 	ldrb.w	r3, [r8, #14]
    f62a:	f8b8 200c 	ldrh.w	r2, [r8, #12]
  writeLen = len - ATT_WRITE_REQ_LEN;
    f62e:	3d03      	subs	r5, #3
    else if (((pAttr->settings & ATTS_SET_VARIABLE_LEN) == 0) &&
    f630:	0719      	lsls	r1, r3, #28
  writeLen = len - ATT_WRITE_REQ_LEN;
    f632:	b2ad      	uxth	r5, r5
    else if (((pAttr->settings & ATTS_SET_VARIABLE_LEN) == 0) &&
    f634:	d413      	bmi.n	f65e <attsProcWrite+0x86>
    f636:	42aa      	cmp	r2, r5
    f638:	d013      	beq.n	f662 <attsProcWrite+0x8a>
  if (err && (opcode == ATT_PDU_WRITE_REQ))
    f63a:	f1b9 0f12 	cmp.w	r9, #18
    f63e:	d10b      	bne.n	f658 <attsProcWrite+0x80>
      err = ATT_ERR_LENGTH;
    f640:	230d      	movs	r3, #13
      attsErrRsp(pCcb->handle, ATT_PDU_WRITE_REQ, handle, err);
    f642:	8b30      	ldrh	r0, [r6, #24]
    f644:	4622      	mov	r2, r4
    f646:	2112      	movs	r1, #18
    f648:	f7fe fdda 	bl	e200 <attsErrRsp>
}
    f64c:	b007      	add	sp, #28
    f64e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (err && (opcode == ATT_PDU_WRITE_REQ))
    f652:	f1b9 0f12 	cmp.w	r9, #18
    f656:	d033      	beq.n	f6c0 <attsProcWrite+0xe8>
}
    f658:	b007      	add	sp, #28
    f65a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (((pAttr->settings & ATTS_SET_VARIABLE_LEN) != 0) &&
    f65e:	42aa      	cmp	r2, r5
    f660:	d3eb      	bcc.n	f63a <attsProcWrite+0x62>
      if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
    f662:	0798      	lsls	r0, r3, #30
  BSTREAM_TO_UINT16(handle, pPacket);
    f664:	f107 010b 	add.w	r1, r7, #11
      if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
    f668:	d51e      	bpl.n	f6a8 <attsProcWrite+0xd0>
          (pGroup->writeCback != NULL))
    f66a:	9a05      	ldr	r2, [sp, #20]
    f66c:	68d7      	ldr	r7, [r2, #12]
      if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
    f66e:	b1df      	cbz	r7, f6a8 <attsProcWrite+0xd0>
        err = (*pGroup->writeCback)(pCcb->connId, handle, opcode, 0, writeLen,
    f670:	e9cd 1801 	strd	r1, r8, [sp, #4]
    f674:	9500      	str	r5, [sp, #0]
    f676:	2300      	movs	r3, #0
    f678:	7f30      	ldrb	r0, [r6, #28]
    f67a:	464a      	mov	r2, r9
    f67c:	4621      	mov	r1, r4
    f67e:	47b8      	blx	r7
    f680:	4603      	mov	r3, r0
      if (err == ATT_SUCCESS && opcode == ATT_PDU_WRITE_REQ)
    f682:	2b00      	cmp	r3, #0
    f684:	d1c3      	bne.n	f60e <attsProcWrite+0x36>
    f686:	f1b9 0f12 	cmp.w	r9, #18
    f68a:	d1e5      	bne.n	f658 <attsProcWrite+0x80>
        if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_WRITE_RSP_LEN)) != NULL)
    f68c:	2009      	movs	r0, #9
    f68e:	f000 fa2d 	bl	faec <attMsgAlloc>
    f692:	2800      	cmp	r0, #0
    f694:	d0e0      	beq.n	f658 <attsProcWrite+0x80>
          UINT8_TO_BSTREAM(p, ATT_PDU_WRITE_RSP);
    f696:	2313      	movs	r3, #19
    f698:	7203      	strb	r3, [r0, #8]
          L2cDataReq(L2C_CID_ATT, pCcb->handle, ATT_WRITE_RSP_LEN, pBuf);
    f69a:	8b31      	ldrh	r1, [r6, #24]
    f69c:	4603      	mov	r3, r0
    f69e:	2201      	movs	r2, #1
    f6a0:	2004      	movs	r0, #4
    f6a2:	f001 f8a5 	bl	107f0 <L2cDataReq>
  if (err && (opcode == ATT_PDU_WRITE_REQ))
    f6a6:	e7d7      	b.n	f658 <attsProcWrite+0x80>
      else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
    f6a8:	069a      	lsls	r2, r3, #26
    f6aa:	d510      	bpl.n	f6ce <attsProcWrite+0xf6>
    f6ac:	4b0e      	ldr	r3, [pc, #56]	; (f6e8 <attsProcWrite+0x110>)
    f6ae:	695f      	ldr	r7, [r3, #20]
    f6b0:	b16f      	cbz	r7, f6ce <attsProcWrite+0xf6>
        err = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_WRITE, handle, pPacket);
    f6b2:	460b      	mov	r3, r1
    f6b4:	7f30      	ldrb	r0, [r6, #28]
    f6b6:	4622      	mov	r2, r4
    f6b8:	2109      	movs	r1, #9
    f6ba:	47b8      	blx	r7
    f6bc:	4603      	mov	r3, r0
    f6be:	e7e0      	b.n	f682 <attsProcWrite+0xaa>
      attsErrRsp(pCcb->handle, ATT_PDU_WRITE_REQ, handle, err);
    f6c0:	8b30      	ldrh	r0, [r6, #24]
    err = ATT_ERR_HANDLE;
    f6c2:	2301      	movs	r3, #1
      attsErrRsp(pCcb->handle, ATT_PDU_WRITE_REQ, handle, err);
    f6c4:	4622      	mov	r2, r4
    f6c6:	2112      	movs	r1, #18
    f6c8:	f7fe fd9a 	bl	e200 <attsErrRsp>
    f6cc:	e7be      	b.n	f64c <attsProcWrite+0x74>
        memcpy(pAttr->pValue, pPacket, writeLen);
    f6ce:	f8d8 0004 	ldr.w	r0, [r8, #4]
    f6d2:	462a      	mov	r2, r5
    f6d4:	f7fc fd14 	bl	c100 <memcpy>
        if ((pAttr->settings & ATTS_SET_VARIABLE_LEN) != 0)
    f6d8:	f898 300e 	ldrb.w	r3, [r8, #14]
    f6dc:	071b      	lsls	r3, r3, #28
    f6de:	d5d2      	bpl.n	f686 <attsProcWrite+0xae>
          *(pAttr->pLen) = writeLen;
    f6e0:	f8d8 3008 	ldr.w	r3, [r8, #8]
    f6e4:	801d      	strh	r5, [r3, #0]
      if (err == ATT_SUCCESS && opcode == ATT_PDU_WRITE_REQ)
    f6e6:	e7ce      	b.n	f686 <attsProcWrite+0xae>
    f6e8:	10003f7c 	.word	0x10003f7c

0000f6ec <attsProcPrepWriteReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcPrepWriteReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
    f6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t        writeLen;
  uint8_t         err = ATT_SUCCESS;

  /* parse handle and offset, calculate write length */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
  BSTREAM_TO_UINT16(handle, pPacket);
    f6f0:	7a93      	ldrb	r3, [r2, #10]
    f6f2:	7a54      	ldrb	r4, [r2, #9]
  BSTREAM_TO_UINT16(offset, pPacket);
    f6f4:	f892 800b 	ldrb.w	r8, [r2, #11]
    f6f8:	f892 900c 	ldrb.w	r9, [r2, #12]
  BSTREAM_TO_UINT16(handle, pPacket);
    f6fc:	eb04 2403 	add.w	r4, r4, r3, lsl #8
{
    f700:	b089      	sub	sp, #36	; 0x24
  BSTREAM_TO_UINT16(handle, pPacket);
    f702:	b2a4      	uxth	r4, r4
{
    f704:	4606      	mov	r6, r0
    f706:	460f      	mov	r7, r1
  writeLen = len - ATT_PREP_WRITE_REQ_LEN;    /* length of value being written */

  /* find attribute */
  if ((pAttr = attsFindByHandle(handle, &pGroup)) == NULL)
    f708:	4620      	mov	r0, r4
    f70a:	a907      	add	r1, sp, #28
{
    f70c:	4693      	mov	fp, r2
  if ((pAttr = attsFindByHandle(handle, &pGroup)) == NULL)
    f70e:	f7ff f83b 	bl	e788 <attsFindByHandle>
    f712:	b338      	cbz	r0, f764 <attsProcPrepWriteReq+0x78>
  {
    /* attribute not found */
    err = ATT_ERR_HANDLE;
  }
  /* verify permissions */
  else if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_WRITE,
    f714:	7bc3      	ldrb	r3, [r0, #15]
    f716:	4605      	mov	r5, r0
    f718:	4622      	mov	r2, r4
    f71a:	7f30      	ldrb	r0, [r6, #28]
    f71c:	2110      	movs	r1, #16
    f71e:	f7ff f84b 	bl	e7b8 <attsPermissions>
    f722:	4603      	mov	r3, r0
    f724:	b138      	cbz	r0, f736 <attsProcPrepWriteReq+0x4a>
    }
  }

  if (err)
  {
    attsErrRsp(pCcb->handle, ATT_PDU_PREP_WRITE_REQ, handle, err);
    f726:	8b30      	ldrh	r0, [r6, #24]
    f728:	4622      	mov	r2, r4
    f72a:	2116      	movs	r1, #22
    f72c:	f7fe fd68 	bl	e200 <attsErrRsp>
  }
}
    f730:	b009      	add	sp, #36	; 0x24
    f732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  BSTREAM_TO_UINT16(offset, pPacket);
    f736:	eb08 2809 	add.w	r8, r8, r9, lsl #8
    f73a:	fa1f f888 	uxth.w	r8, r8
  else if ((offset != 0) && ((pAttr->settings & ATTS_SET_ALLOW_OFFSET) == 0))
    f73e:	7bab      	ldrb	r3, [r5, #14]
    f740:	f1b8 0f00 	cmp.w	r8, #0
    f744:	d003      	beq.n	f74e <attsProcPrepWriteReq+0x62>
    f746:	06d9      	lsls	r1, r3, #27
    f748:	d401      	bmi.n	f74e <attsProcPrepWriteReq+0x62>
    err = ATT_ERR_NOT_LONG;
    f74a:	230b      	movs	r3, #11
    f74c:	e7eb      	b.n	f726 <attsProcPrepWriteReq+0x3a>
  writeLen = len - ATT_PREP_WRITE_REQ_LEN;    /* length of value being written */
    f74e:	f1a7 0905 	sub.w	r9, r7, #5
  else if (((pAttr->settings & ATTS_SET_VARIABLE_LEN) == 0) &&
    f752:	071a      	lsls	r2, r3, #28
  writeLen = len - ATT_PREP_WRITE_REQ_LEN;    /* length of value being written */
    f754:	fa1f f989 	uxth.w	r9, r9
  else if (((pAttr->settings & ATTS_SET_VARIABLE_LEN) == 0) &&
    f758:	d406      	bmi.n	f768 <attsProcPrepWriteReq+0x7c>
    f75a:	89ab      	ldrh	r3, [r5, #12]
    f75c:	454b      	cmp	r3, r9
    f75e:	d003      	beq.n	f768 <attsProcPrepWriteReq+0x7c>
    err = ATT_ERR_LENGTH;
    f760:	230d      	movs	r3, #13
    f762:	e7e0      	b.n	f726 <attsProcPrepWriteReq+0x3a>
    err = ATT_ERR_HANDLE;
    f764:	2301      	movs	r3, #1
    f766:	e7de      	b.n	f726 <attsProcPrepWriteReq+0x3a>
  else if (WsfQueueCount(&pCcb->prepWriteQueue) >= pAttCfg->numPrepWrites)
    f768:	4630      	mov	r0, r6
    f76a:	f004 fa61 	bl	13c30 <WsfQueueCount>
    f76e:	4b2a      	ldr	r3, [pc, #168]	; (f818 <attsProcPrepWriteReq+0x12c>)
    f770:	681b      	ldr	r3, [r3, #0]
    f772:	79db      	ldrb	r3, [r3, #7]
    f774:	4283      	cmp	r3, r0
    f776:	d801      	bhi.n	f77c <attsProcPrepWriteReq+0x90>
    err = ATT_ERR_QUEUE_FULL;
    f778:	2309      	movs	r3, #9
    f77a:	e7d4      	b.n	f726 <attsProcPrepWriteReq+0x3a>
  else if ((pPrep = WsfBufAlloc(sizeof(attsPrepWrite_t) - 1 + writeLen)) == NULL)
    f77c:	1db8      	adds	r0, r7, #6
    f77e:	b280      	uxth	r0, r0
    f780:	f003 ffe8 	bl	13754 <WsfBufAlloc>
    f784:	4682      	mov	sl, r0
    f786:	2800      	cmp	r0, #0
    f788:	d044      	beq.n	f814 <attsProcPrepWriteReq+0x128>
  else if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
    f78a:	7bab      	ldrb	r3, [r5, #14]
    f78c:	079b      	lsls	r3, r3, #30
  BSTREAM_TO_UINT16(offset, pPacket);
    f78e:	f10b 0b0d 	add.w	fp, fp, #13
  else if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
    f792:	d510      	bpl.n	f7b6 <attsProcPrepWriteReq+0xca>
          (pGroup->writeCback != NULL))
    f794:	9b07      	ldr	r3, [sp, #28]
    f796:	68db      	ldr	r3, [r3, #12]
  else if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
    f798:	9305      	str	r3, [sp, #20]
    f79a:	b163      	cbz	r3, f7b6 <attsProcPrepWriteReq+0xca>
    err = (*pGroup->writeCback)(pCcb->connId, handle, ATT_PDU_PREP_WRITE_REQ, 0, writeLen,
    f79c:	e9cd b501 	strd	fp, r5, [sp, #4]
    f7a0:	f8cd 9000 	str.w	r9, [sp]
    f7a4:	2300      	movs	r3, #0
    f7a6:	7f30      	ldrb	r0, [r6, #28]
    f7a8:	9d05      	ldr	r5, [sp, #20]
    f7aa:	2216      	movs	r2, #22
    f7ac:	4621      	mov	r1, r4
    f7ae:	47a8      	blx	r5
  if (err == ATT_SUCCESS)
    f7b0:	4603      	mov	r3, r0
    f7b2:	2800      	cmp	r0, #0
    f7b4:	d1b7      	bne.n	f726 <attsProcPrepWriteReq+0x3a>
    memcpy(pPrep->packet, pPacket, writeLen);
    f7b6:	464a      	mov	r2, r9
    f7b8:	4659      	mov	r1, fp
    pPrep->writeLen = writeLen;
    f7ba:	f8aa 9004 	strh.w	r9, [sl, #4]
    pPrep->handle = handle;
    f7be:	f8aa 4006 	strh.w	r4, [sl, #6]
    pPrep->offset = offset;
    f7c2:	f8aa 8008 	strh.w	r8, [sl, #8]
    memcpy(pPrep->packet, pPacket, writeLen);
    f7c6:	f10a 000a 	add.w	r0, sl, #10
    f7ca:	f7fc fc99 	bl	c100 <memcpy>
    WsfQueueEnq(&pCcb->prepWriteQueue, pPrep);
    f7ce:	4651      	mov	r1, sl
    f7d0:	4630      	mov	r0, r6
    f7d2:	f004 f9bf 	bl	13b54 <WsfQueueEnq>
    if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_PREP_WRITE_RSP_LEN + writeLen)) != NULL)
    f7d6:	f107 0008 	add.w	r0, r7, #8
    f7da:	b280      	uxth	r0, r0
    f7dc:	f000 f986 	bl	faec <attMsgAlloc>
    f7e0:	4605      	mov	r5, r0
    f7e2:	2800      	cmp	r0, #0
    f7e4:	d0a4      	beq.n	f730 <attsProcPrepWriteReq+0x44>
      UINT16_TO_BSTREAM(p, handle);
    f7e6:	7244      	strb	r4, [r0, #9]
      UINT16_TO_BSTREAM(p, offset);
    f7e8:	f880 800b 	strb.w	r8, [r0, #11]
      UINT8_TO_BSTREAM(p, ATT_PDU_PREP_WRITE_RSP);
    f7ec:	2317      	movs	r3, #23
      UINT16_TO_BSTREAM(p, handle);
    f7ee:	0a24      	lsrs	r4, r4, #8
      UINT16_TO_BSTREAM(p, offset);
    f7f0:	ea4f 2818 	mov.w	r8, r8, lsr #8
      memcpy(p, pPacket, writeLen);
    f7f4:	4659      	mov	r1, fp
      UINT16_TO_BSTREAM(p, handle);
    f7f6:	7284      	strb	r4, [r0, #10]
      UINT16_TO_BSTREAM(p, offset);
    f7f8:	f880 800c 	strb.w	r8, [r0, #12]
      memcpy(p, pPacket, writeLen);
    f7fc:	464a      	mov	r2, r9
      UINT8_TO_BSTREAM(p, ATT_PDU_PREP_WRITE_RSP);
    f7fe:	7203      	strb	r3, [r0, #8]
      memcpy(p, pPacket, writeLen);
    f800:	300d      	adds	r0, #13
    f802:	f7fc fc7d 	bl	c100 <memcpy>
      L2cDataReq(L2C_CID_ATT, pCcb->handle, (ATT_PREP_WRITE_RSP_LEN + writeLen), pBuf);
    f806:	8b31      	ldrh	r1, [r6, #24]
    f808:	462b      	mov	r3, r5
    f80a:	463a      	mov	r2, r7
    f80c:	2004      	movs	r0, #4
    f80e:	f000 ffef 	bl	107f0 <L2cDataReq>
  if (err)
    f812:	e78d      	b.n	f730 <attsProcPrepWriteReq+0x44>
    err = ATT_ERR_RESOURCES;
    f814:	2311      	movs	r3, #17
    f816:	e786      	b.n	f726 <attsProcPrepWriteReq+0x3a>
    f818:	10002b00 	.word	0x10002b00

0000f81c <attsProcExecWriteReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcExecWriteReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
    f81c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t         err = ATT_SUCCESS;

  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;

  /* if cancelling all prepared writes */
  if (*pPacket == ATT_EXEC_WRITE_CANCEL)
    f820:	7a53      	ldrb	r3, [r2, #9]
{
    f822:	b086      	sub	sp, #24
    f824:	4606      	mov	r6, r0
  if (*pPacket == ATT_EXEC_WRITE_CANCEL)
    f826:	2b00      	cmp	r3, #0
    f828:	d04d      	beq.n	f8c6 <attsProcExecWriteReq+0xaa>
  {
    /* free all queued buffers */
    attsClearPrepWrites(pCcb);
  }
  /* else writing all prepared writes */
  else if (*pPacket == ATT_EXEC_WRITE_ALL)
    f82a:	2b01      	cmp	r3, #1
    f82c:	d141      	bne.n	f8b2 <attsProcExecWriteReq+0x96>
  {
    /* iterate over prepare write queue and verify offset and length */
    for (pPrep = pCcb->prepWriteQueue.pHead; pPrep != NULL; pPrep = pPrep->pNext)
    f82e:	6804      	ldr	r4, [r0, #0]
    f830:	b17c      	cbz	r4, f852 <attsProcExecWriteReq+0x36>
    {
      /* find attribute */
      if ((pAttr = attsFindByHandle(pPrep->handle, &pGroup)) != NULL)
    f832:	88e0      	ldrh	r0, [r4, #6]
    f834:	a904      	add	r1, sp, #16
    f836:	f7fe ffa7 	bl	e788 <attsFindByHandle>
    f83a:	b138      	cbz	r0, f84c <attsProcExecWriteReq+0x30>
      {
        /* verify offset */
        if (pPrep->offset > pAttr->maxLen)
    f83c:	8921      	ldrh	r1, [r4, #8]
    f83e:	8982      	ldrh	r2, [r0, #12]
    f840:	4291      	cmp	r1, r2
    f842:	d87a      	bhi.n	f93a <attsProcExecWriteReq+0x11e>
        {
          err = ATT_ERR_OFFSET;
        }
        /* verify write length with offset */
        else if ((pPrep->writeLen + pPrep->offset) > pAttr->maxLen)
    f844:	88a3      	ldrh	r3, [r4, #4]
    f846:	440b      	add	r3, r1
    f848:	4293      	cmp	r3, r2
    f84a:	dc7b      	bgt.n	f944 <attsProcExecWriteReq+0x128>
    for (pPrep = pCcb->prepWriteQueue.pHead; pPrep != NULL; pPrep = pPrep->pNext)
    f84c:	6824      	ldr	r4, [r4, #0]
    f84e:	2c00      	cmp	r4, #0
    f850:	d1ef      	bne.n	f832 <attsProcExecWriteReq+0x16>

    /* if length and offset checks ok then write all buffers in queue */
    if (err == ATT_SUCCESS)
    {
      /* for each buffer */
      while ((pPrep = WsfQueueDeq(&pCcb->prepWriteQueue)) != NULL)
    f852:	4630      	mov	r0, r6
    f854:	f004 f994 	bl	13b80 <WsfQueueDeq>
  else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
    f858:	f8df 80ec 	ldr.w	r8, [pc, #236]	; f948 <attsProcExecWriteReq+0x12c>
      while ((pPrep = WsfQueueDeq(&pCcb->prepWriteQueue)) != NULL)
    f85c:	2700      	movs	r7, #0
    f85e:	4604      	mov	r4, r0
    f860:	b328      	cbz	r0, f8ae <attsProcExecWriteReq+0x92>
  if ((pAttr = attsFindByHandle(pPrep->handle, &pGroup)) == NULL)
    f862:	88e0      	ldrh	r0, [r4, #6]
    f864:	a905      	add	r1, sp, #20
    f866:	f7fe ff8f 	bl	e788 <attsFindByHandle>
    f86a:	4605      	mov	r5, r0
    f86c:	2800      	cmp	r0, #0
    f86e:	d04d      	beq.n	f90c <attsProcExecWriteReq+0xf0>
  else if (!(pAttr->permissions & ATTS_PERMIT_WRITE))
    f870:	7bc3      	ldrb	r3, [r0, #15]
    f872:	06d8      	lsls	r0, r3, #27
    f874:	d545      	bpl.n	f902 <attsProcExecWriteReq+0xe6>
  else if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
    f876:	7bab      	ldrb	r3, [r5, #14]
    f878:	0799      	lsls	r1, r3, #30
  p = pPrep->packet;
    f87a:	f104 020a 	add.w	r2, r4, #10
  else if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
    f87e:	d534      	bpl.n	f8ea <attsProcExecWriteReq+0xce>
           (pGroup->writeCback != NULL))
    f880:	9905      	ldr	r1, [sp, #20]
    f882:	68cf      	ldr	r7, [r1, #12]
  else if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
    f884:	b38f      	cbz	r7, f8ea <attsProcExecWriteReq+0xce>
    err = (*pGroup->writeCback)(pCcb->connId, pPrep->handle, ATT_PDU_EXEC_WRITE_REQ,
    f886:	8923      	ldrh	r3, [r4, #8]
    f888:	88e1      	ldrh	r1, [r4, #6]
    f88a:	e9cd 2501 	strd	r2, r5, [sp, #4]
    f88e:	88a2      	ldrh	r2, [r4, #4]
    f890:	9200      	str	r2, [sp, #0]
    f892:	7f30      	ldrb	r0, [r6, #28]
    f894:	2218      	movs	r2, #24
    f896:	47b8      	blx	r7
    f898:	4607      	mov	r7, r0
      {
        /* write buffer */
        if ((err = attsExecPrepWrite(pCcb, pPrep)) != ATT_SUCCESS)
    f89a:	bb9f      	cbnz	r7, f904 <attsProcExecWriteReq+0xe8>
          /* write failed; discard remaining prepared writes */
          attsClearPrepWrites(pCcb);
        }

        /* free buffer */
        WsfBufFree(pPrep);
    f89c:	4620      	mov	r0, r4
    f89e:	f003 ff89 	bl	137b4 <WsfBufFree>
      while ((pPrep = WsfQueueDeq(&pCcb->prepWriteQueue)) != NULL)
    f8a2:	4630      	mov	r0, r6
    f8a4:	f004 f96c 	bl	13b80 <WsfQueueDeq>
    f8a8:	4604      	mov	r4, r0
    f8aa:	2800      	cmp	r0, #0
    f8ac:	d1d9      	bne.n	f862 <attsProcExecWriteReq+0x46>
  {
    err = ATT_ERR_INVALID_PDU;
  }

  /* send response or error response */
  if (err)
    f8ae:	b167      	cbz	r7, f8ca <attsProcExecWriteReq+0xae>
    f8b0:	e000      	b.n	f8b4 <attsProcExecWriteReq+0x98>
    err = ATT_ERR_INVALID_PDU;
    f8b2:	2704      	movs	r7, #4
  {
    attsErrRsp(pCcb->handle, ATT_PDU_EXEC_WRITE_REQ, 0, err);
    f8b4:	8b30      	ldrh	r0, [r6, #24]
    f8b6:	463b      	mov	r3, r7
    f8b8:	2200      	movs	r2, #0
    f8ba:	2118      	movs	r1, #24
    f8bc:	f7fe fca0 	bl	e200 <attsErrRsp>
      UINT8_TO_BSTREAM(p, ATT_PDU_EXEC_WRITE_RSP);

      L2cDataReq(L2C_CID_ATT, pCcb->handle, ATT_EXEC_WRITE_RSP_LEN, pBuf);
    }
  }
}
    f8c0:	b006      	add	sp, #24
    f8c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    attsClearPrepWrites(pCcb);
    f8c6:	f7fe fcb9 	bl	e23c <attsClearPrepWrites>
    if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_EXEC_WRITE_RSP_LEN)) != NULL)
    f8ca:	2009      	movs	r0, #9
    f8cc:	f000 f90e 	bl	faec <attMsgAlloc>
    f8d0:	2800      	cmp	r0, #0
    f8d2:	d0f5      	beq.n	f8c0 <attsProcExecWriteReq+0xa4>
      UINT8_TO_BSTREAM(p, ATT_PDU_EXEC_WRITE_RSP);
    f8d4:	2319      	movs	r3, #25
    f8d6:	7203      	strb	r3, [r0, #8]
      L2cDataReq(L2C_CID_ATT, pCcb->handle, ATT_EXEC_WRITE_RSP_LEN, pBuf);
    f8d8:	8b31      	ldrh	r1, [r6, #24]
    f8da:	4603      	mov	r3, r0
    f8dc:	2201      	movs	r2, #1
    f8de:	2004      	movs	r0, #4
    f8e0:	f000 ff86 	bl	107f0 <L2cDataReq>
}
    f8e4:	b006      	add	sp, #24
    f8e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
    f8ea:	069b      	lsls	r3, r3, #26
    f8ec:	d513      	bpl.n	f916 <attsProcExecWriteReq+0xfa>
    f8ee:	f8d8 7014 	ldr.w	r7, [r8, #20]
    f8f2:	b187      	cbz	r7, f916 <attsProcExecWriteReq+0xfa>
    err = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_WRITE, pPrep->handle, p);
    f8f4:	4613      	mov	r3, r2
    f8f6:	7f30      	ldrb	r0, [r6, #28]
    f8f8:	88e2      	ldrh	r2, [r4, #6]
    f8fa:	2109      	movs	r1, #9
    f8fc:	47b8      	blx	r7
    f8fe:	4607      	mov	r7, r0
    f900:	e7cb      	b.n	f89a <attsProcExecWriteReq+0x7e>
    err = ATT_ERR_WRITE;
    f902:	2703      	movs	r7, #3
          attsClearPrepWrites(pCcb);
    f904:	4630      	mov	r0, r6
    f906:	f7fe fc99 	bl	e23c <attsClearPrepWrites>
    f90a:	e7c7      	b.n	f89c <attsProcExecWriteReq+0x80>
    f90c:	4630      	mov	r0, r6
    err = ATT_ERR_UNLIKELY;
    f90e:	270e      	movs	r7, #14
          attsClearPrepWrites(pCcb);
    f910:	f7fe fc94 	bl	e23c <attsClearPrepWrites>
    f914:	e7c2      	b.n	f89c <attsProcExecWriteReq+0x80>
    memcpy((pAttr->pValue + pPrep->offset), p, pPrep->writeLen);
    f916:	8923      	ldrh	r3, [r4, #8]
    f918:	6868      	ldr	r0, [r5, #4]
    f91a:	4611      	mov	r1, r2
    f91c:	4418      	add	r0, r3
    f91e:	88a2      	ldrh	r2, [r4, #4]
    f920:	f7fc fbee 	bl	c100 <memcpy>
    if ((pAttr->settings & ATTS_SET_VARIABLE_LEN) != 0)
    f924:	7baf      	ldrb	r7, [r5, #14]
    f926:	f017 0708 	ands.w	r7, r7, #8
    f92a:	d0b7      	beq.n	f89c <attsProcExecWriteReq+0x80>
      *(pAttr->pLen) = pPrep->writeLen + pPrep->offset;
    f92c:	88a3      	ldrh	r3, [r4, #4]
    f92e:	8921      	ldrh	r1, [r4, #8]
    f930:	68aa      	ldr	r2, [r5, #8]
    f932:	440b      	add	r3, r1
    f934:	8013      	strh	r3, [r2, #0]
  uint8_t     err = ATT_SUCCESS;
    f936:	2700      	movs	r7, #0
    f938:	e7b0      	b.n	f89c <attsProcExecWriteReq+0x80>
          err = ATT_ERR_OFFSET;
    f93a:	2707      	movs	r7, #7
          attsClearPrepWrites(pCcb);
    f93c:	4630      	mov	r0, r6
    f93e:	f7fe fc7d 	bl	e23c <attsClearPrepWrites>
  if (err)
    f942:	e7b7      	b.n	f8b4 <attsProcExecWriteReq+0x98>
          err = ATT_ERR_LENGTH;
    f944:	270d      	movs	r7, #13
    f946:	e7f9      	b.n	f93c <attsProcExecWriteReq+0x120>
    f948:	10003f7c 	.word	0x10003f7c

0000f94c <attEmptyHandler>:
 */
/*************************************************************************************************/
void attEmptyHandler(wsfMsgHdr_t *pMsg)
{
  return;
}
    f94c:	4770      	bx	lr
    f94e:	bf00      	nop

0000f950 <attEmptyConnCback>:
 */
/*************************************************************************************************/
void attEmptyConnCback(attCcb_t *pCcb, dmEvt_t *pDmEvt)
{
  return;
}
    f950:	4770      	bx	lr
    f952:	bf00      	nop

0000f954 <attEmptyDataCback>:
 */
/*************************************************************************************************/
void attEmptyDataCback(uint16_t handle, uint16_t len, uint8_t *pPacket)
{
  return;
}
    f954:	4770      	bx	lr
    f956:	bf00      	nop

0000f958 <attDmConnCback>:
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
    f958:	7883      	ldrb	r3, [r0, #2]
  pCcb = attCcbByConnId((dmConnId_t) pDmEvt->hdr.param);
    f95a:	7802      	ldrb	r2, [r0, #0]
{
    f95c:	b570      	push	{r4, r5, r6, lr}
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
    f95e:	2b27      	cmp	r3, #39	; 0x27
{
    f960:	4604      	mov	r4, r0
/*************************************************************************************************/
attCcb_t *attCcbByConnId(dmConnId_t connId)
{
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return &attCb.ccb[connId - 1];
    f962:	f102 30ff 	add.w	r0, r2, #4294967295
    pCcb->handle = pDmEvt->connOpen.handle;
    f966:	4e18      	ldr	r6, [pc, #96]	; (f9c8 <attDmConnCback+0x70>)
    f968:	ea4f 05c0 	mov.w	r5, r0, lsl #3
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
    f96c:	d10b      	bne.n	f986 <attDmConnCback+0x2e>
    pCcb->handle = pDmEvt->connOpen.handle;
    f96e:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
    f972:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    f976:	88e1      	ldrh	r1, [r4, #6]
    pCcb->connId = (dmConnId_t) pDmEvt->hdr.param;
    f978:	771a      	strb	r2, [r3, #28]
    pCcb->control = 0;
    f97a:	2200      	movs	r2, #0
    f97c:	775a      	strb	r2, [r3, #29]
    pCcb->pPendDbHashRsp = NULL;
    f97e:	621a      	str	r2, [r3, #32]
    pCcb->mtu = ATT_DEFAULT_MTU;
    f980:	2217      	movs	r2, #23
    pCcb->handle = pDmEvt->connOpen.handle;
    f982:	8319      	strh	r1, [r3, #24]
    pCcb->mtu = ATT_DEFAULT_MTU;
    f984:	835a      	strh	r2, [r3, #26]
  if (pCcb->connId != DM_CONN_ID_NONE)
    f986:	4405      	add	r5, r0
    f988:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    f98c:	7f2b      	ldrb	r3, [r5, #28]
    f98e:	b163      	cbz	r3, f9aa <attDmConnCback+0x52>
    (*attCb.pServer->connCback)(pCcb, pDmEvt);
    f990:	6f33      	ldr	r3, [r6, #112]	; 0x70
    f992:	4621      	mov	r1, r4
    f994:	68db      	ldr	r3, [r3, #12]
    f996:	4628      	mov	r0, r5
    f998:	4798      	blx	r3
    (*attCb.pClient->connCback)(pCcb, pDmEvt);
    f99a:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
    f99c:	4621      	mov	r1, r4
    f99e:	68db      	ldr	r3, [r3, #12]
    f9a0:	4628      	mov	r0, r5
    f9a2:	4798      	blx	r3
    if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
    f9a4:	78a3      	ldrb	r3, [r4, #2]
    f9a6:	2b28      	cmp	r3, #40	; 0x28
    f9a8:	d006      	beq.n	f9b8 <attDmConnCback+0x60>
  if (attCb.connCback != NULL)
    f9aa:	6fb3      	ldr	r3, [r6, #120]	; 0x78
    f9ac:	b11b      	cbz	r3, f9b6 <attDmConnCback+0x5e>
    (*attCb.connCback)(pDmEvt);
    f9ae:	4620      	mov	r0, r4
}
    f9b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    (*attCb.connCback)(pDmEvt);
    f9b4:	4718      	bx	r3
}
    f9b6:	bd70      	pop	{r4, r5, r6, pc}
      if (pCcb->pPendDbHashRsp)
    f9b8:	6a28      	ldr	r0, [r5, #32]
      pCcb->connId = DM_CONN_ID_NONE;
    f9ba:	2300      	movs	r3, #0
    f9bc:	772b      	strb	r3, [r5, #28]
      if (pCcb->pPendDbHashRsp)
    f9be:	2800      	cmp	r0, #0
    f9c0:	d0f3      	beq.n	f9aa <attDmConnCback+0x52>
        WsfBufFree(pCcb->pPendDbHashRsp);
    f9c2:	f003 fef7 	bl	137b4 <WsfBufFree>
    f9c6:	e7f0      	b.n	f9aa <attDmConnCback+0x52>
    f9c8:	10003fd0 	.word	0x10003fd0

0000f9cc <attL2cDataCback>:
  if ((pduType & ATT_PDU_MASK_SERVER) != 0)
    f9cc:	7a13      	ldrb	r3, [r2, #8]
    f9ce:	f013 0f01 	tst.w	r3, #1
    (*attCb.pClient->dataCback)(handle, len, pPacket);
    f9d2:	4b04      	ldr	r3, [pc, #16]	; (f9e4 <attL2cDataCback+0x18>)
  if ((pduType & ATT_PDU_MASK_SERVER) != 0)
    f9d4:	d002      	beq.n	f9dc <attL2cDataCback+0x10>
    (*attCb.pClient->dataCback)(handle, len, pPacket);
    f9d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    f9d8:	681b      	ldr	r3, [r3, #0]
    f9da:	4718      	bx	r3
    (*attCb.pServer->dataCback)(handle, len, pPacket);
    f9dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    f9de:	681b      	ldr	r3, [r3, #0]
    f9e0:	4718      	bx	r3
    f9e2:	bf00      	nop
    f9e4:	10003fd0 	.word	0x10003fd0

0000f9e8 <attL2cCtrlCback>:
{
    f9e8:	b570      	push	{r4, r5, r6, lr}
  return &attCb.ccb[connId - 1];
    f9ea:	7804      	ldrb	r4, [r0, #0]
  if (pCcb->connId != DM_CONN_ID_NONE)
    f9ec:	4e0f      	ldr	r6, [pc, #60]	; (fa2c <attL2cCtrlCback+0x44>)
  return &attCb.ccb[connId - 1];
    f9ee:	3c01      	subs	r4, #1
  if (pCcb->connId != DM_CONN_ID_NONE)
    f9f0:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    f9f4:	eb06 0484 	add.w	r4, r6, r4, lsl #2
    f9f8:	7f23      	ldrb	r3, [r4, #28]
    f9fa:	b1b3      	cbz	r3, fa2a <attL2cCtrlCback+0x42>
    if (pMsg->event == L2C_CTRL_FLOW_DISABLE_IND)
    f9fc:	7883      	ldrb	r3, [r0, #2]
    f9fe:	2b01      	cmp	r3, #1
    fa00:	4605      	mov	r5, r0
      pCcb->control |= ATT_CCB_STATUS_FLOW_DISABLED;
    fa02:	7f63      	ldrb	r3, [r4, #29]
    if (pMsg->event == L2C_CTRL_FLOW_DISABLE_IND)
    fa04:	d00e      	beq.n	fa24 <attL2cCtrlCback+0x3c>
      pCcb->control &= ~ATT_CCB_STATUS_FLOW_DISABLED;
    fa06:	f023 0302 	bic.w	r3, r3, #2
    fa0a:	7763      	strb	r3, [r4, #29]
      (*attCb.pServer->ctrlCback)(pMsg);
    fa0c:	6f33      	ldr	r3, [r6, #112]	; 0x70
    fa0e:	685b      	ldr	r3, [r3, #4]
    fa10:	4798      	blx	r3
      if (!(pCcb->control & ATT_CCB_STATUS_FLOW_DISABLED))
    fa12:	7f63      	ldrb	r3, [r4, #29]
    fa14:	079b      	lsls	r3, r3, #30
    fa16:	d408      	bmi.n	fa2a <attL2cCtrlCback+0x42>
        (*attCb.pClient->ctrlCback)(pMsg);
    fa18:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
    fa1a:	4628      	mov	r0, r5
    fa1c:	685b      	ldr	r3, [r3, #4]
}
    fa1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        (*attCb.pClient->ctrlCback)(pMsg);
    fa22:	4718      	bx	r3
      pCcb->control |= ATT_CCB_STATUS_FLOW_DISABLED;
    fa24:	f043 0302 	orr.w	r3, r3, #2
    fa28:	7763      	strb	r3, [r4, #29]
}
    fa2a:	bd70      	pop	{r4, r5, r6, pc}
    fa2c:	10003fd0 	.word	0x10003fd0

0000fa30 <attCcbByHandle>:
{
    fa30:	b508      	push	{r3, lr}
  if ((connId = DmConnIdByHandle(handle)) != DM_CONN_ID_NONE)
    fa32:	f008 feed 	bl	18810 <DmConnIdByHandle>
    fa36:	b128      	cbz	r0, fa44 <attCcbByHandle+0x14>
    return &attCb.ccb[connId - 1];
    fa38:	4b03      	ldr	r3, [pc, #12]	; (fa48 <attCcbByHandle+0x18>)
    fa3a:	3801      	subs	r0, #1
    fa3c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    fa40:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    fa44:	bd08      	pop	{r3, pc}
    fa46:	bf00      	nop
    fa48:	10003fd0 	.word	0x10003fd0

0000fa4c <attUuidCmp16to128>:
 *
 *  \return TRUE of UUIDs match, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t attUuidCmp16to128(const uint8_t *pUuid16, const uint8_t *pUuid128)
{
    fa4c:	b508      	push	{r3, lr}
  attBaseUuid[ATT_BASE_UUID_POS_0] = pUuid16[0];
    fa4e:	4b07      	ldr	r3, [pc, #28]	; (fa6c <attUuidCmp16to128+0x20>)
    fa50:	7802      	ldrb	r2, [r0, #0]
    fa52:	731a      	strb	r2, [r3, #12]
  attBaseUuid[ATT_BASE_UUID_POS_1] = pUuid16[1];
    fa54:	f890 c001 	ldrb.w	ip, [r0, #1]
    fa58:	f883 c00d 	strb.w	ip, [r3, #13]

  return (memcmp(attBaseUuid, pUuid128, ATT_128_UUID_LEN) == 0);
    fa5c:	2210      	movs	r2, #16
    fa5e:	4618      	mov	r0, r3
    fa60:	f011 fcc2 	bl	213e8 <memcmp>
}
    fa64:	fab0 f080 	clz	r0, r0
    fa68:	0940      	lsrs	r0, r0, #5
    fa6a:	bd08      	pop	{r3, pc}
    fa6c:	10002b4c 	.word	0x10002b4c

0000fa70 <attSetMtu>:
void attSetMtu(attCcb_t *pCcb, uint16_t peerMtu, uint16_t localMtu)
{
  uint16_t  mtu;

  /* set negotiated mtu for the connection to the lesser of ours and theirs */
  mtu = WSF_MIN(peerMtu, localMtu);
    fa70:	428a      	cmp	r2, r1

  /* if current mtu is not the same as the negotiated value */
  if (pCcb->mtu != mtu)
    fa72:	8b43      	ldrh	r3, [r0, #26]
  mtu = WSF_MIN(peerMtu, localMtu);
    fa74:	bf28      	it	cs
    fa76:	460a      	movcs	r2, r1
  if (pCcb->mtu != mtu)
    fa78:	4293      	cmp	r3, r2
    fa7a:	d017      	beq.n	faac <attSetMtu+0x3c>
 *  \return None.
 */
/*************************************************************************************************/
void attExecCallback(dmConnId_t connId, uint8_t event, uint16_t handle, uint8_t status, uint16_t mtu)
{
  if (attCb.cback)
    fa7c:	4b0c      	ldr	r3, [pc, #48]	; (fab0 <attSetMtu+0x40>)
    pCcb->mtu = mtu;
    fa7e:	8342      	strh	r2, [r0, #26]
  if (attCb.cback)
    fa80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    fa82:	b19b      	cbz	r3, faac <attSetMtu+0x3c>
{
    fa84:	b500      	push	{lr}
    fa86:	b085      	sub	sp, #20
  {
    attEvt_t evt;

    evt.hdr.param = connId;
    fa88:	f890 c01c 	ldrb.w	ip, [r0, #28]
    fa8c:	f8ad c000 	strh.w	ip, [sp]
    evt.hdr.event = event;
    evt.hdr.status = status;
    evt.valueLen = 0;
    fa90:	2100      	movs	r1, #0
    evt.hdr.event = event;
    fa92:	2012      	movs	r0, #18
    fa94:	f8ad 0002 	strh.w	r0, [sp, #2]
    evt.valueLen = 0;
    fa98:	9102      	str	r1, [sp, #8]
    evt.handle = handle;
    evt.continuing = 0;
    fa9a:	f88d 100c 	strb.w	r1, [sp, #12]
    evt.mtu = mtu;
    fa9e:	f8ad 200e 	strh.w	r2, [sp, #14]

    (*attCb.cback)(&evt);
    faa2:	4668      	mov	r0, sp
    faa4:	4798      	blx	r3
}
    faa6:	b005      	add	sp, #20
    faa8:	f85d fb04 	ldr.w	pc, [sp], #4
    faac:	4770      	bx	lr
    faae:	bf00      	nop
    fab0:	10003fd0 	.word	0x10003fd0

0000fab4 <attExecCallback>:
{
    fab4:	b510      	push	{r4, lr}
  if (attCb.cback)
    fab6:	4c0c      	ldr	r4, [pc, #48]	; (fae8 <attExecCallback+0x34>)
{
    fab8:	b084      	sub	sp, #16
  if (attCb.cback)
    faba:	6f64      	ldr	r4, [r4, #116]	; 0x74
{
    fabc:	f8bd c018 	ldrh.w	ip, [sp, #24]
  if (attCb.cback)
    fac0:	b184      	cbz	r4, fae4 <attExecCallback+0x30>
    evt.hdr.event = event;
    fac2:	f88d 1002 	strb.w	r1, [sp, #2]
    evt.valueLen = 0;
    fac6:	2100      	movs	r1, #0
    evt.hdr.param = connId;
    fac8:	f8ad 0000 	strh.w	r0, [sp]
    evt.hdr.status = status;
    facc:	f88d 3003 	strb.w	r3, [sp, #3]
    evt.valueLen = 0;
    fad0:	f8ad 1008 	strh.w	r1, [sp, #8]
    evt.handle = handle;
    fad4:	f8ad 200a 	strh.w	r2, [sp, #10]
    evt.continuing = 0;
    fad8:	f88d 100c 	strb.w	r1, [sp, #12]
    evt.mtu = mtu;
    fadc:	f8ad c00e 	strh.w	ip, [sp, #14]
    (*attCb.cback)(&evt);
    fae0:	4668      	mov	r0, sp
    fae2:	47a0      	blx	r4
  }
}
    fae4:	b004      	add	sp, #16
    fae6:	bd10      	pop	{r4, pc}
    fae8:	10003fd0 	.word	0x10003fd0

0000faec <attMsgAlloc>:
 *  \return Pointer to data message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *attMsgAlloc(uint16_t len)
{
  return WsfMsgDataAlloc(len, HCI_TX_DATA_TAILROOM);
    faec:	2100      	movs	r1, #0
    faee:	f003 be87 	b.w	13800 <WsfMsgDataAlloc>
    faf2:	bf00      	nop

0000faf4 <AttHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttHandlerInit(wsfHandlerId_t handlerId)
{
    faf4:	b510      	push	{r4, lr}
  /* store handler ID */
  attCb.handlerId = handlerId;
    faf6:	4b08      	ldr	r3, [pc, #32]	; (fb18 <AttHandlerInit+0x24>)

  /* initialize control block */
  attCb.pClient = &attFcnDefault;
    faf8:	4c08      	ldr	r4, [pc, #32]	; (fb1c <AttHandlerInit+0x28>)
  attCb.pServer = &attFcnDefault;

  /* Register with L2C */
  L2cRegister(L2C_CID_ATT,  attL2cDataCback, attL2cCtrlCback);
    fafa:	4909      	ldr	r1, [pc, #36]	; (fb20 <AttHandlerInit+0x2c>)
  attCb.handlerId = handlerId;
    fafc:	f883 007c 	strb.w	r0, [r3, #124]	; 0x7c
  L2cRegister(L2C_CID_ATT,  attL2cDataCback, attL2cCtrlCback);
    fb00:	4a08      	ldr	r2, [pc, #32]	; (fb24 <AttHandlerInit+0x30>)
    fb02:	2004      	movs	r0, #4
  attCb.pServer = &attFcnDefault;
    fb04:	e9c3 441b 	strd	r4, r4, [r3, #108]	; 0x6c
  L2cRegister(L2C_CID_ATT,  attL2cDataCback, attL2cCtrlCback);
    fb08:	f000 fe68 	bl	107dc <L2cRegister>

  /* Register with DM */
  DmConnRegister(DM_CLIENT_ID_ATT, attDmConnCback);

}
    fb0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  DmConnRegister(DM_CLIENT_ID_ATT, attDmConnCback);
    fb10:	4905      	ldr	r1, [pc, #20]	; (fb28 <AttHandlerInit+0x34>)
    fb12:	2000      	movs	r0, #0
    fb14:	f008 bd96 	b.w	18644 <DmConnRegister>
    fb18:	10003fd0 	.word	0x10003fd0
    fb1c:	00023eb4 	.word	0x00023eb4
    fb20:	0000f9cd 	.word	0x0000f9cd
    fb24:	0000f9e9 	.word	0x0000f9e9
    fb28:	0000f959 	.word	0x0000f959

0000fb2c <AttHandler>:
 */
/*************************************************************************************************/
void AttHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
  /* Handle message */
  if (pMsg != NULL)
    fb2c:	4608      	mov	r0, r1
    fb2e:	b149      	cbz	r1, fb44 <AttHandler+0x18>
  {
    if (pMsg->event >= ATTS_MSG_START)
    fb30:	788b      	ldrb	r3, [r1, #2]
    fb32:	2b1f      	cmp	r3, #31
    {
      /* pass event to server */
      (*attCb.pServer->msgCback)(pMsg);
    fb34:	4b04      	ldr	r3, [pc, #16]	; (fb48 <AttHandler+0x1c>)
    if (pMsg->event >= ATTS_MSG_START)
    fb36:	d902      	bls.n	fb3e <AttHandler+0x12>
      (*attCb.pServer->msgCback)(pMsg);
    fb38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    fb3a:	689b      	ldr	r3, [r3, #8]
    fb3c:	4718      	bx	r3
    }
    else
    {
      /* pass event to client */
      (*attCb.pClient->msgCback)(pMsg);
    fb3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    fb40:	689b      	ldr	r3, [r3, #8]
    fb42:	4718      	bx	r3
  /* Handle events */
  else if (event)
  {

  }
}
    fb44:	4770      	bx	lr
    fb46:	bf00      	nop
    fb48:	10003fd0 	.word	0x10003fd0

0000fb4c <AttRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttRegister(attCback_t cback)
{
    fb4c:	b510      	push	{r4, lr}
  attCb.cback = cback;
    fb4e:	4c0c      	ldr	r4, [pc, #48]	; (fb80 <AttRegister+0x34>)
{
    fb50:	b084      	sub	sp, #16
  attCb.cback = cback;
    fb52:	6760      	str	r0, [r4, #116]	; 0x74

  /* if configured MTU size is larger than maximum RX PDU length */
  if (pAttCfg->mtu > (HciGetMaxRxAclLen() - L2C_HDR_LEN))
    fb54:	f002 fc10 	bl	12378 <HciGetMaxRxAclLen>
    fb58:	4b0a      	ldr	r3, [pc, #40]	; (fb84 <AttRegister+0x38>)
    fb5a:	681b      	ldr	r3, [r3, #0]
    fb5c:	889b      	ldrh	r3, [r3, #4]
    fb5e:	3803      	subs	r0, #3
    fb60:	4298      	cmp	r0, r3
    fb62:	dc0b      	bgt.n	fb7c <AttRegister+0x30>
  if (attCb.cback)
    fb64:	6f62      	ldr	r2, [r4, #116]	; 0x74
    fb66:	b14a      	cbz	r2, fb7c <AttRegister+0x30>
    evt.valueLen = 0;
    fb68:	2300      	movs	r3, #0
    evt.hdr.param = connId;
    fb6a:	4907      	ldr	r1, [pc, #28]	; (fb88 <AttRegister+0x3c>)
    fb6c:	9100      	str	r1, [sp, #0]
    evt.valueLen = 0;
    fb6e:	9302      	str	r3, [sp, #8]
    evt.continuing = 0;
    fb70:	f88d 300c 	strb.w	r3, [sp, #12]
    evt.mtu = mtu;
    fb74:	f8ad 300e 	strh.w	r3, [sp, #14]
    (*attCb.cback)(&evt);
    fb78:	4668      	mov	r0, sp
    fb7a:	4790      	blx	r2
  {
    /* notify app about MTU misconfiguration */
    attExecCallback(0, DM_ERROR_IND, 0, DM_ERR_ATT_RX_PDU_LEN_EXCEEDED, 0);
  }
}
    fb7c:	b004      	add	sp, #16
    fb7e:	bd10      	pop	{r4, pc}
    fb80:	10003fd0 	.word	0x10003fd0
    fb84:	10002b00 	.word	0x10002b00
    fb88:	02650000 	.word	0x02650000

0000fb8c <AttConnRegister>:
 *  \return None.
 */
/*************************************************************************************************/
void AttConnRegister(dmCback_t cback)
{
  attCb.connCback = cback;
    fb8c:	4b01      	ldr	r3, [pc, #4]	; (fb94 <AttConnRegister+0x8>)
    fb8e:	6798      	str	r0, [r3, #120]	; 0x78
}
    fb90:	4770      	bx	lr
    fb92:	bf00      	nop
    fb94:	10003fd0 	.word	0x10003fd0

0000fb98 <AttGetMtu>:
 *  \return MTU of the connection.
 */
/*************************************************************************************************/
uint16_t AttGetMtu(dmConnId_t connId)
{
  return (attCcbByConnId(connId)->mtu);
    fb98:	4b03      	ldr	r3, [pc, #12]	; (fba8 <AttGetMtu+0x10>)
    fb9a:	3801      	subs	r0, #1
    fb9c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    fba0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    fba4:	8b40      	ldrh	r0, [r0, #26]
    fba6:	4770      	bx	lr
    fba8:	10003fd0 	.word	0x10003fd0

0000fbac <SecAesHciCback>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecAesHciCback(secQueueBuf_t *pBuf, hciEvt_t *pEvent, wsfHandlerId_t handlerId)
{
    fbac:	b538      	push	{r3, r4, r5, lr}
    fbae:	4604      	mov	r4, r0
  secAes_t *pAes = (secAes_t *) &pBuf->msg;

  /* set encrypted data pointer and copy */
  pAes->pCiphertext = pBuf->ciphertext;
    fbb0:	3010      	adds	r0, #16
{
    fbb2:	4615      	mov	r5, r2
  pAes->pCiphertext = pBuf->ciphertext;
    fbb4:	6060      	str	r0, [r4, #4]
  Calc128Cpy(pAes->pCiphertext, pEvent->leEncryptCmdCmpl.data);
    fbb6:	3105      	adds	r1, #5
    fbb8:	f00c fbf0 	bl	1c39c <Calc128Cpy>

  /* send message */
  WsfMsgSend(handlerId, pAes);
    fbbc:	4621      	mov	r1, r4
    fbbe:	4628      	mov	r0, r5
}
    fbc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WsfMsgSend(handlerId, pAes);
    fbc4:	f003 be32 	b.w	1382c <WsfMsgSend>

0000fbc8 <SecAes>:
{
    fbc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fbcc:	4606      	mov	r6, r0
  if ((pBuf = WsfMsgAlloc(sizeof(secQueueBuf_t))) != NULL)
    fbce:	2038      	movs	r0, #56	; 0x38
{
    fbd0:	f89d 8020 	ldrb.w	r8, [sp, #32]
    fbd4:	460f      	mov	r7, r1
    fbd6:	4692      	mov	sl, r2
    fbd8:	4699      	mov	r9, r3
  if ((pBuf = WsfMsgAlloc(sizeof(secQueueBuf_t))) != NULL)
    fbda:	f003 fe1b 	bl	13814 <WsfMsgAlloc>
    fbde:	b328      	cbz	r0, fc2c <SecAes+0x64>
  uint8_t token = secCb.token++;
    fbe0:	4d14      	ldr	r5, [pc, #80]	; (fc34 <SecAes+0x6c>)
    fbe2:	f895 c038 	ldrb.w	ip, [r5, #56]	; 0x38
  if (token == SEC_TOKEN_INVALID)
    fbe6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    fbea:	4604      	mov	r4, r0
    fbec:	d018      	beq.n	fc20 <SecAes+0x58>
  uint8_t token = secCb.token++;
    fbee:	f10c 0301 	add.w	r3, ip, #1
    fbf2:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
    pBuf->type = SEC_TYPE_AES;
    fbf6:	2300      	movs	r3, #0
    pBuf->msg.hdr.status = getNextToken();
    fbf8:	f884 c003 	strb.w	ip, [r4, #3]
    pBuf->type = SEC_TYPE_AES;
    fbfc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    WsfMsgEnq(&secCb.aesEncQueue, handlerId, pBuf);
    fc00:	4622      	mov	r2, r4
    fc02:	4651      	mov	r1, sl
    fc04:	480c      	ldr	r0, [pc, #48]	; (fc38 <SecAes+0x70>)
    pBuf->msg.hdr.param = param;
    fc06:	f8a4 9000 	strh.w	r9, [r4]
    pBuf->msg.hdr.event = event;
    fc0a:	f884 8002 	strb.w	r8, [r4, #2]
    WsfMsgEnq(&secCb.aesEncQueue, handlerId, pBuf);
    fc0e:	f003 fe1f 	bl	13850 <WsfMsgEnq>
    HciLeEncryptCmd(pKey, pPlaintext);
    fc12:	4630      	mov	r0, r6
    fc14:	4639      	mov	r1, r7
    fc16:	f001 f977 	bl	10f08 <HciLeEncryptCmd>
    return pBuf->msg.hdr.status;
    fc1a:	78e0      	ldrb	r0, [r4, #3]
}
    fc1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    token = secCb.token++;
    fc20:	2301      	movs	r3, #1
    fc22:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
    fc26:	f04f 0c00 	mov.w	ip, #0
    fc2a:	e7e4      	b.n	fbf6 <SecAes+0x2e>
  return SEC_TOKEN_INVALID;
    fc2c:	20ff      	movs	r0, #255	; 0xff
}
    fc2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fc32:	bf00      	nop
    fc34:	10004050 	.word	0x10004050
    fc38:	10004070 	.word	0x10004070

0000fc3c <SecAesInit>:
 *  \return none.
 */
/*************************************************************************************************/
void SecAesInit()
{
  secCb.hciCbackTbl[SEC_TYPE_AES] = SecAesHciCback;
    fc3c:	4b01      	ldr	r3, [pc, #4]	; (fc44 <SecAesInit+0x8>)
    fc3e:	4a02      	ldr	r2, [pc, #8]	; (fc48 <SecAesInit+0xc>)
    fc40:	63da      	str	r2, [r3, #60]	; 0x3c
}
    fc42:	4770      	bx	lr
    fc44:	10004050 	.word	0x10004050
    fc48:	0000fbad 	.word	0x0000fbad

0000fc4c <secCmacProcessBlock>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacProcessBlock(secQueueBuf_t *pBuf)
{
    fc4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
    fc4e:	6b04      	ldr	r4, [r0, #48]	; 0x30
  uint8_t text[SEC_BLOCK_LEN];
  uint8_t *pMn = pCmac->pPlainText + pCmac->position;
    fc50:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
  int16_t remaining = (int16_t) pCmac->len - pCmac->position;
    fc52:	8ce5      	ldrh	r5, [r4, #38]	; 0x26
  uint8_t *pMn = pCmac->pPlainText + pCmac->position;
    fc54:	6821      	ldr	r1, [r4, #0]
  int16_t remaining = (int16_t) pCmac->len - pCmac->position;
    fc56:	1aed      	subs	r5, r5, r3
    fc58:	b22d      	sxth	r5, r5
{
    fc5a:	b085      	sub	sp, #20

  /* Check for Last Block */
  if (remaining <= SEC_BLOCK_LEN)
    fc5c:	2d10      	cmp	r5, #16
{
    fc5e:	4606      	mov	r6, r0
  uint8_t *pMn = pCmac->pPlainText + pCmac->position;
    fc60:	4419      	add	r1, r3
  {
    memcpy(text, pMn, remaining);
    fc62:	466f      	mov	r7, sp
  if (remaining <= SEC_BLOCK_LEN)
    fc64:	dc1a      	bgt.n	fc9c <secCmacProcessBlock+0x50>
    memcpy(text, pMn, remaining);
    fc66:	462a      	mov	r2, r5
    fc68:	4638      	mov	r0, r7
    fc6a:	f7fc fa49 	bl	c100 <memcpy>

    /* Pad the message if necessary */
    if (remaining != SEC_BLOCK_LEN)
    fc6e:	2d10      	cmp	r5, #16
    fc70:	d121      	bne.n	fcb6 <secCmacProcessBlock+0x6a>
      memset(text + remaining, 0, SEC_BLOCK_LEN - remaining);
      text[remaining] = 0x80;
    }

    /* XOr the subkey */
    Calc128Xor(text, pCmac->subkey);
    fc72:	f104 0114 	add.w	r1, r4, #20
    fc76:	4638      	mov	r0, r7
    fc78:	f00c fba2 	bl	1c3c0 <Calc128Xor>
  {
    /* Copy the block to the buffer */
    Calc128Cpy(text, pMn);
  }

  if (pCmac->position != 0)
    fc7c:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    pCmac->state = SEC_CMAC_STATE_COMPLETE;
    fc7e:	2302      	movs	r3, #2
    fc80:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  if (pCmac->position != 0)
    fc84:	b982      	cbnz	r2, fca8 <secCmacProcessBlock+0x5c>
  {
    /* Except for first block, XOr the previous AES calculation */
    Calc128Xor(text, pBuf->ciphertext);
  }

  pCmac->position += SEC_BLOCK_LEN;
    fc86:	3210      	adds	r2, #16
    fc88:	84a2      	strh	r2, [r4, #36]	; 0x24

  SecLeEncryptCmd(pCmac->key, text, pBuf, pCmac->handlerId);
    fc8a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    fc8e:	4632      	mov	r2, r6
    fc90:	4639      	mov	r1, r7
    fc92:	1d20      	adds	r0, r4, #4
    fc94:	f000 fa3a 	bl	1010c <SecLeEncryptCmd>
}
    fc98:	b005      	add	sp, #20
    fc9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Calc128Cpy(text, pMn);
    fc9c:	4638      	mov	r0, r7
    fc9e:	f00c fb7d 	bl	1c39c <Calc128Cpy>
  if (pCmac->position != 0)
    fca2:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    fca4:	2a00      	cmp	r2, #0
    fca6:	d0ee      	beq.n	fc86 <secCmacProcessBlock+0x3a>
    Calc128Xor(text, pBuf->ciphertext);
    fca8:	f106 0110 	add.w	r1, r6, #16
    fcac:	4638      	mov	r0, r7
    fcae:	f00c fb87 	bl	1c3c0 <Calc128Xor>
  pCmac->position += SEC_BLOCK_LEN;
    fcb2:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    fcb4:	e7e7      	b.n	fc86 <secCmacProcessBlock+0x3a>
      memset(text + remaining, 0, SEC_BLOCK_LEN - remaining);
    fcb6:	f1c5 0210 	rsb	r2, r5, #16
    fcba:	1978      	adds	r0, r7, r5
    fcbc:	2100      	movs	r1, #0
    fcbe:	f011 fbc5 	bl	2144c <memset>
      text[remaining] = 0x80;
    fcc2:	f105 0310 	add.w	r3, r5, #16
    fcc6:	eb0d 0503 	add.w	r5, sp, r3
    fcca:	2380      	movs	r3, #128	; 0x80
    fccc:	f805 3c10 	strb.w	r3, [r5, #-16]
    fcd0:	e7cf      	b.n	fc72 <secCmacProcessBlock+0x26>
    fcd2:	bf00      	nop

0000fcd4 <SecCmacHciCback>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecCmacHciCback(secQueueBuf_t *pBuf, hciEvt_t *pEvent, wsfHandlerId_t handlerId)
{
    fcd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  secCmacSecCb_t *pCmac = (secCmacSecCb_t *) pBuf->pCb;
    fcd8:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
    fcda:	b089      	sub	sp, #36	; 0x24

  if (pCmac)
    fcdc:	b17c      	cbz	r4, fcfe <SecCmacHciCback+0x2a>
  {
    Calc128Cpy(pBuf->ciphertext, pEvent->leEncryptCmdCmpl.data);
    fcde:	f100 0610 	add.w	r6, r0, #16
    fce2:	4605      	mov	r5, r0
    fce4:	3105      	adds	r1, #5
    fce6:	4630      	mov	r0, r6
    fce8:	f00c fb58 	bl	1c39c <Calc128Cpy>

    switch (pCmac->state)
    fcec:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    fcf0:	2b01      	cmp	r3, #1
    fcf2:	f000 8100 	beq.w	fef6 <SecCmacHciCback+0x222>
    fcf6:	2b02      	cmp	r3, #2
    fcf8:	f000 8103 	beq.w	ff02 <SecCmacHciCback+0x22e>
    fcfc:	b113      	cbz	r3, fd04 <SecCmacHciCback+0x30>
    case SEC_CMAC_STATE_COMPLETE:
      secCmacComplete(pBuf);
      break;
    }
  }
}
    fcfe:	b009      	add	sp, #36	; 0x24
    fd00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
    fd04:	6b2c      	ldr	r4, [r5, #48]	; 0x30
  Calc128Cpy(pCmac->subkey, pBuf->ciphertext);
    fd06:	4631      	mov	r1, r6
    fd08:	f104 0014 	add.w	r0, r4, #20
    fd0c:	f00c fb46 	bl	1c39c <Calc128Cpy>
      overflow = pBuf[i+1] >> (8 - shift);
    fd10:	f894 b015 	ldrb.w	fp, [r4, #21]
    fd14:	7fe2      	ldrb	r2, [r4, #31]
  uint8_t finalOverflow = pBuf[0] >> (8 - shift);
    fd16:	7d23      	ldrb	r3, [r4, #20]
      overflow = pBuf[i+1] >> (8 - shift);
    fd18:	9206      	str	r2, [sp, #24]
    fd1a:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
    fd1e:	f894 a016 	ldrb.w	sl, [r4, #22]
    fd22:	9202      	str	r2, [sp, #8]
    fd24:	ea4f 12eb 	mov.w	r2, fp, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fd28:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
    fd2c:	f894 9017 	ldrb.w	r9, [r4, #23]
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fd30:	9301      	str	r3, [sp, #4]
    fd32:	b2d3      	uxtb	r3, r2
      overflow = pBuf[i+1] >> (8 - shift);
    fd34:	ea4f 12ea 	mov.w	r2, sl, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fd38:	ea42 024b 	orr.w	r2, r2, fp, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
    fd3c:	f894 8018 	ldrb.w	r8, [r4, #24]
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fd40:	7562      	strb	r2, [r4, #21]
      overflow = pBuf[i+1] >> (8 - shift);
    fd42:	ea4f 12e9 	mov.w	r2, r9, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fd46:	ea42 024a 	orr.w	r2, r2, sl, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
    fd4a:	7e67      	ldrb	r7, [r4, #25]
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fd4c:	75a2      	strb	r2, [r4, #22]
      overflow = pBuf[i+1] >> (8 - shift);
    fd4e:	ea4f 12e8 	mov.w	r2, r8, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fd52:	ea42 0249 	orr.w	r2, r2, r9, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
    fd56:	7ea6      	ldrb	r6, [r4, #26]
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fd58:	75e2      	strb	r2, [r4, #23]
      overflow = pBuf[i+1] >> (8 - shift);
    fd5a:	11fa      	asrs	r2, r7, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fd5c:	ea42 0248 	orr.w	r2, r2, r8, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
    fd60:	f894 e01b 	ldrb.w	lr, [r4, #27]
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fd64:	7622      	strb	r2, [r4, #24]
      overflow = pBuf[i+1] >> (8 - shift);
    fd66:	11f2      	asrs	r2, r6, #7
    fd68:	7f61      	ldrb	r1, [r4, #29]
    fd6a:	f894 c01c 	ldrb.w	ip, [r4, #28]
    fd6e:	9104      	str	r1, [sp, #16]
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fd70:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
    fd74:	7662      	strb	r2, [r4, #25]
      overflow = pBuf[i+1] >> (8 - shift);
    fd76:	ea4f 12ee 	mov.w	r2, lr, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fd7a:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
    fd7e:	9e04      	ldr	r6, [sp, #16]
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fd80:	76a2      	strb	r2, [r4, #26]
      overflow = pBuf[i+1] >> (8 - shift);
    fd82:	ea4f 12ec 	mov.w	r2, ip, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fd86:	ea42 0e4e 	orr.w	lr, r2, lr, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
    fd8a:	11f2      	asrs	r2, r6, #7
    fd8c:	7fa0      	ldrb	r0, [r4, #30]
    fd8e:	f894 1020 	ldrb.w	r1, [r4, #32]
    fd92:	9005      	str	r0, [sp, #20]
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fd94:	ea42 0c4c 	orr.w	ip, r2, ip, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
    fd98:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    fd9c:	9107      	str	r1, [sp, #28]
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fd9e:	9303      	str	r3, [sp, #12]
      overflow = pBuf[i+1] >> (8 - shift);
    fda0:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fda4:	7523      	strb	r3, [r4, #20]
    fda6:	f884 e01b 	strb.w	lr, [r4, #27]
    fdaa:	f884 c01c 	strb.w	ip, [r4, #28]
      overflow = pBuf[i+1] >> (8 - shift);
    fdae:	9f05      	ldr	r7, [sp, #20]
    fdb0:	9b02      	ldr	r3, [sp, #8]
    fdb2:	11fa      	asrs	r2, r7, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fdb4:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
    fdb8:	9e06      	ldr	r6, [sp, #24]
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fdba:	7762      	strb	r2, [r4, #29]
      overflow = pBuf[i+1] >> (8 - shift);
    fdbc:	11f2      	asrs	r2, r6, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fdbe:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
    fdc2:	9f07      	ldr	r7, [sp, #28]
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fdc4:	77a2      	strb	r2, [r4, #30]
      overflow = pBuf[i+1] >> (8 - shift);
    fdc6:	11fa      	asrs	r2, r7, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fdc8:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
    fdcc:	77e2      	strb	r2, [r4, #31]
      overflow = pBuf[i+1] >> (8 - shift);
    fdce:	11c2      	asrs	r2, r0, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fdd0:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
    fdd4:	f884 2020 	strb.w	r2, [r4, #32]
      overflow = pBuf[i+1] >> (8 - shift);
    fdd8:	11ca      	asrs	r2, r1, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fdda:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
    fdde:	11da      	asrs	r2, r3, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fde0:	ea42 0141 	orr.w	r1, r2, r1, lsl #1
  if (overflow)
    fde4:	9a01      	ldr	r2, [sp, #4]
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fde6:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    fdea:	005b      	lsls	r3, r3, #1
    fdec:	b2db      	uxtb	r3, r3
  if (overflow)
    fdee:	09d2      	lsrs	r2, r2, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fdf0:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
    pCmac->subkey[SEC_BLOCK_LEN-1] ^= SEC_CMAC_RB;
    fdf4:	bf1c      	itt	ne
    fdf6:	f083 0387 	eorne.w	r3, r3, #135	; 0x87
    fdfa:	f884 3023 	strbne.w	r3, [r4, #35]	; 0x23
  if (pCmac->len % SEC_BLOCK_LEN != 0)
    fdfe:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fe00:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
  if (pCmac->len % SEC_BLOCK_LEN != 0)
    fe04:	071b      	lsls	r3, r3, #28
    fe06:	d073      	beq.n	fef0 <SecCmacHciCback+0x21c>
      overflow = pBuf[i+1] >> (8 - shift);
    fe08:	f894 a016 	ldrb.w	sl, [r4, #22]
    fe0c:	f894 b015 	ldrb.w	fp, [r4, #21]
    fe10:	7fa1      	ldrb	r1, [r4, #30]
    fe12:	f894 9017 	ldrb.w	r9, [r4, #23]
    fe16:	9102      	str	r1, [sp, #8]
    fe18:	ea4f 11ea 	mov.w	r1, sl, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fe1c:	ea41 014b 	orr.w	r1, r1, fp, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
    fe20:	f894 8018 	ldrb.w	r8, [r4, #24]
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fe24:	7561      	strb	r1, [r4, #21]
      overflow = pBuf[i+1] >> (8 - shift);
    fe26:	ea4f 11e9 	mov.w	r1, r9, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fe2a:	ea41 014a 	orr.w	r1, r1, sl, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
    fe2e:	f894 e019 	ldrb.w	lr, [r4, #25]
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fe32:	75a1      	strb	r1, [r4, #22]
      overflow = pBuf[i+1] >> (8 - shift);
    fe34:	ea4f 11e8 	mov.w	r1, r8, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fe38:	ea41 0149 	orr.w	r1, r1, r9, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
    fe3c:	f894 c01a 	ldrb.w	ip, [r4, #26]
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fe40:	75e1      	strb	r1, [r4, #23]
      overflow = pBuf[i+1] >> (8 - shift);
    fe42:	ea4f 11ee 	mov.w	r1, lr, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fe46:	ea41 0148 	orr.w	r1, r1, r8, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
    fe4a:	7ee7      	ldrb	r7, [r4, #27]
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fe4c:	9a03      	ldr	r2, [sp, #12]
    fe4e:	7621      	strb	r1, [r4, #24]
      overflow = pBuf[i+1] >> (8 - shift);
    fe50:	ea4f 11ec 	mov.w	r1, ip, asr #7
    fe54:	7f26      	ldrb	r6, [r4, #28]
    fe56:	7fe0      	ldrb	r0, [r4, #31]
    fe58:	9004      	str	r0, [sp, #16]
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fe5a:	ea41 014e 	orr.w	r1, r1, lr, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
    fe5e:	ea4f 13eb 	mov.w	r3, fp, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fe62:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
    fe66:	7661      	strb	r1, [r4, #25]
      overflow = pBuf[i+1] >> (8 - shift);
    fe68:	11f9      	asrs	r1, r7, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fe6a:	7523      	strb	r3, [r4, #20]
    fe6c:	ea41 0c4c 	orr.w	ip, r1, ip, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
    fe70:	7f63      	ldrb	r3, [r4, #29]
    fe72:	9301      	str	r3, [sp, #4]
    fe74:	11f1      	asrs	r1, r6, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fe76:	ea41 0747 	orr.w	r7, r1, r7, lsl #1
    fe7a:	76e7      	strb	r7, [r4, #27]
      overflow = pBuf[i+1] >> (8 - shift);
    fe7c:	9f01      	ldr	r7, [sp, #4]
    fe7e:	f894 3020 	ldrb.w	r3, [r4, #32]
    fe82:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    fe86:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    fe8a:	9305      	str	r3, [sp, #20]
    fe8c:	11f9      	asrs	r1, r7, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fe8e:	ea41 0646 	orr.w	r6, r1, r6, lsl #1
    fe92:	7726      	strb	r6, [r4, #28]
      overflow = pBuf[i+1] >> (8 - shift);
    fe94:	9e02      	ldr	r6, [sp, #8]
    fe96:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fe9a:	f884 c01a 	strb.w	ip, [r4, #26]
      overflow = pBuf[i+1] >> (8 - shift);
    fe9e:	11f1      	asrs	r1, r6, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fea0:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
    fea4:	7761      	strb	r1, [r4, #29]
      overflow = pBuf[i+1] >> (8 - shift);
    fea6:	9f04      	ldr	r7, [sp, #16]
    fea8:	11f9      	asrs	r1, r7, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
    feaa:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
    feae:	9e05      	ldr	r6, [sp, #20]
    pBuf[i] = (pBuf[i] << shift) | overflow;
    feb0:	77a1      	strb	r1, [r4, #30]
      overflow = pBuf[i+1] >> (8 - shift);
    feb2:	11f1      	asrs	r1, r6, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
    feb4:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
    feb8:	77e1      	strb	r1, [r4, #31]
    feba:	0071      	lsls	r1, r6, #1
    febc:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
    fec0:	0052      	lsls	r2, r2, #1
    fec2:	ea42 12d0 	orr.w	r2, r2, r0, lsr #7
    fec6:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
      overflow = pBuf[i+1] >> (8 - shift);
    feca:	11da      	asrs	r2, r3, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fecc:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
    if (overflow)
    fed0:	9a03      	ldr	r2, [sp, #12]
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fed2:	f884 1020 	strb.w	r1, [r4, #32]
    fed6:	005b      	lsls	r3, r3, #1
    fed8:	b2db      	uxtb	r3, r3
    if (overflow)
    feda:	09d2      	lsrs	r2, r2, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fedc:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
      pCmac->subkey[SEC_BLOCK_LEN-1] ^= SEC_CMAC_RB;
    fee0:	bf18      	it	ne
    fee2:	f083 0387 	eorne.w	r3, r3, #135	; 0x87
    pBuf[i] = (pBuf[i] << shift) | overflow;
    fee6:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
      pCmac->subkey[SEC_BLOCK_LEN-1] ^= SEC_CMAC_RB;
    feea:	bf18      	it	ne
    feec:	f884 3023 	strbne.w	r3, [r4, #35]	; 0x23
  pCmac->state = SEC_CMAC_STATE_BLOCK;
    fef0:	2301      	movs	r3, #1
    fef2:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
      secCmacProcessBlock(pBuf);
    fef6:	4628      	mov	r0, r5
}
    fef8:	b009      	add	sp, #36	; 0x24
    fefa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      secCmacProcessBlock(pBuf);
    fefe:	f7ff bea5 	b.w	fc4c <secCmacProcessBlock>
  secCmacSecCb_t *pCmac = (secCmacSecCb_t *) pBuf->pCb;
    ff02:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  pMsg->pCiphertext = pBuf->ciphertext;
    ff04:	606e      	str	r6, [r5, #4]
  pMsg->pPlainText = pCmac->pPlainText;
    ff06:	681a      	ldr	r2, [r3, #0]
    ff08:	60aa      	str	r2, [r5, #8]
  WsfMsgSend(pCmac->handlerId, pMsg);
    ff0a:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
    ff0e:	4629      	mov	r1, r5
}
    ff10:	b009      	add	sp, #36	; 0x24
    ff12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  WsfMsgSend(pCmac->handlerId, pMsg);
    ff16:	f003 bc89 	b.w	1382c <WsfMsgSend>
    ff1a:	bf00      	nop

0000ff1c <SecCmac>:
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecCmac(const uint8_t *pKey, uint8_t *pPlainText, uint16_t textLen, wsfHandlerId_t handlerId,
               uint16_t param, uint8_t event)
{
    ff1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ff20:	b084      	sub	sp, #16
    ff22:	4606      	mov	r6, r0
  secQueueBuf_t *pBuf;
  uint16_t bufSize = sizeof(secQueueBuf_t) + sizeof(secCmacSecCb_t);

  if ((pBuf = WsfMsgAlloc(bufSize)) != NULL)
    ff24:	2064      	movs	r0, #100	; 0x64
{
    ff26:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
    ff2a:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
    ff2e:	460d      	mov	r5, r1
    ff30:	4690      	mov	r8, r2
    ff32:	461f      	mov	r7, r3
  if ((pBuf = WsfMsgAlloc(bufSize)) != NULL)
    ff34:	f003 fc6e 	bl	13814 <WsfMsgAlloc>
    ff38:	4604      	mov	r4, r0
    ff3a:	b360      	cbz	r0, ff96 <SecCmac+0x7a>

    pCmacCb->pPlainText = pPlainText;

    pCmacCb->len = textLen;
    pCmacCb->position = 0;
    pCmacCb->handlerId = handlerId;
    ff3c:	f880 7060 	strb.w	r7, [r0, #96]	; 0x60
    pBuf->msg.hdr.status = secCb.token++;
    ff40:	4a16      	ldr	r2, [pc, #88]	; (ff9c <SecCmac+0x80>)
    pCmacCb->len = textLen;
    ff42:	f8a0 805e 	strh.w	r8, [r0, #94]	; 0x5e
    pBuf->type = SEC_TYPE_CMAC;
    ff46:	2701      	movs	r7, #1
    secCmacSecCb_t *pCmacCb = (secCmacSecCb_t *) (pBuf + 1);
    ff48:	f100 0338 	add.w	r3, r0, #56	; 0x38
    pBuf->type = SEC_TYPE_CMAC;
    ff4c:	f880 7034 	strb.w	r7, [r0, #52]	; 0x34
    pBuf->pCb = pCmacCb;
    ff50:	6303      	str	r3, [r0, #48]	; 0x30
    pBuf->msg.hdr.status = secCb.token++;
    ff52:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
    pCmacCb->state = SEC_CMAC_STATE_SUBKEY;

    /* Copy key */
    Calc128Cpy(pCmacCb->key, (uint8_t *) pKey);
    ff56:	4631      	mov	r1, r6
    pCmacCb->position = 0;
    ff58:	2600      	movs	r6, #0
    ff5a:	f8a0 605c 	strh.w	r6, [r0, #92]	; 0x5c
    pCmacCb->state = SEC_CMAC_STATE_SUBKEY;
    ff5e:	f880 6061 	strb.w	r6, [r0, #97]	; 0x61
    pBuf->msg.hdr.status = secCb.token++;
    ff62:	19d8      	adds	r0, r3, r7
    ff64:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
    ff68:	70e3      	strb	r3, [r4, #3]
    Calc128Cpy(pCmacCb->key, (uint8_t *) pKey);
    ff6a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    pBuf->msg.hdr.param = param;
    ff6e:	f8a4 9000 	strh.w	r9, [r4]
    pBuf->msg.hdr.event = event;
    ff72:	f884 a002 	strb.w	sl, [r4, #2]
    pCmacCb->pPlainText = pPlainText;
    ff76:	63a5      	str	r5, [r4, #56]	; 0x38
    Calc128Cpy(pCmacCb->key, (uint8_t *) pKey);
    ff78:	f00c fa10 	bl	1c39c <Calc128Cpy>
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
    ff7c:	6b20      	ldr	r0, [r4, #48]	; 0x30
  SecLeEncryptCmd(pCmac->key, buf, pBuf, pCmac->handlerId);
    ff7e:	4622      	mov	r2, r4
    ff80:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    ff84:	4669      	mov	r1, sp
    ff86:	3004      	adds	r0, #4
  memset(buf, 0, SEC_BLOCK_LEN);
    ff88:	e9cd 6600 	strd	r6, r6, [sp]
    ff8c:	e9cd 6602 	strd	r6, r6, [sp, #8]
  SecLeEncryptCmd(pCmac->key, buf, pBuf, pCmac->handlerId);
    ff90:	f000 f8bc 	bl	1010c <SecLeEncryptCmd>

    /* Start the CMAC process by calculating the subkey */
    secCmacGenSubkey1(pBuf);

    return TRUE;
    ff94:	4638      	mov	r0, r7
  }

  return FALSE;
}
    ff96:	b004      	add	sp, #16
    ff98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ff9c:	10004050 	.word	0x10004050

0000ffa0 <SecCmacInit>:
 *  \return None.
 */
/*************************************************************************************************/
void SecCmacInit()
{
  secCb.hciCbackTbl[SEC_TYPE_CMAC] = SecCmacHciCback;
    ffa0:	4b01      	ldr	r3, [pc, #4]	; (ffa8 <SecCmacInit+0x8>)
    ffa2:	4a02      	ldr	r2, [pc, #8]	; (ffac <SecCmacInit+0xc>)
    ffa4:	641a      	str	r2, [r3, #64]	; 0x40
}
    ffa6:	4770      	bx	lr
    ffa8:	10004050 	.word	0x10004050
    ffac:	0000fcd5 	.word	0x0000fcd5

0000ffb0 <secHciCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secHciCback(hciEvt_t *pEvent)
{
    ffb0:	b530      	push	{r4, r5, lr}
  secQueueBuf_t *pBuf = NULL;
  wsfHandlerId_t handlerId = 0;

  /* Handle random number event. */
  switch (pEvent->hdr.event)
    ffb2:	7883      	ldrb	r3, [r0, #2]
{
    ffb4:	b083      	sub	sp, #12
  wsfHandlerId_t handlerId = 0;
    ffb6:	2200      	movs	r2, #0
  switch (pEvent->hdr.event)
    ffb8:	3b1b      	subs	r3, #27
{
    ffba:	4604      	mov	r4, r0
  wsfHandlerId_t handlerId = 0;
    ffbc:	f88d 2007 	strb.w	r2, [sp, #7]
  switch (pEvent->hdr.event)
    ffc0:	2b0b      	cmp	r3, #11
    ffc2:	d819      	bhi.n	fff8 <secHciCback+0x48>
    ffc4:	e8df f003 	tbb	[pc, r3]
    ffc8:	18182136 	.word	0x18182136
    ffcc:	18181818 	.word	0x18181818
    ffd0:	061a1818 	.word	0x061a1818
  case HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT:
    pBuf = WsfMsgDeq(&secCb.pubKeyQueue, &handlerId);
    break;

  case HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT:
    pBuf = WsfMsgDeq(&secCb.dhKeyQueue, &handlerId);
    ffd4:	4821      	ldr	r0, [pc, #132]	; (1005c <secHciCback+0xac>)
    ffd6:	f10d 0107 	add.w	r1, sp, #7
    ffda:	f003 fc3f 	bl	1385c <WsfMsgDeq>
    ffde:	4605      	mov	r5, r0

  default:
    break;
  }

  if (pBuf)
    ffe0:	b155      	cbz	r5, fff8 <secHciCback+0x48>
  {
    WSF_ASSERT(secCb.hciCbackTbl[pBuf->type]);
    secCb.hciCbackTbl[pBuf->type](pBuf, pEvent, handlerId);
    ffe2:	f895 1034 	ldrb.w	r1, [r5, #52]	; 0x34
    ffe6:	4b1e      	ldr	r3, [pc, #120]	; (10060 <secHciCback+0xb0>)
    ffe8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    ffec:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    fff0:	4628      	mov	r0, r5
    fff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    fff4:	4621      	mov	r1, r4
    fff6:	4798      	blx	r3
  }
}
    fff8:	b003      	add	sp, #12
    fffa:	bd30      	pop	{r4, r5, pc}
    pBuf = WsfMsgDeq(&secCb.pubKeyQueue, &handlerId);
    fffc:	4819      	ldr	r0, [pc, #100]	; (10064 <secHciCback+0xb4>)
    fffe:	f10d 0107 	add.w	r1, sp, #7
   10002:	f003 fc2b 	bl	1385c <WsfMsgDeq>
   10006:	4605      	mov	r5, r0
    break;
   10008:	e7ea      	b.n	ffe0 <secHciCback+0x30>
    memcpy(&secCb.rand[HCI_RAND_LEN * secCb.randTop], pEvent->leRandCmdCmpl.randNum, HCI_RAND_LEN);
   1000a:	4a15      	ldr	r2, [pc, #84]	; (10060 <secHciCback+0xb0>)
   1000c:	f8d0 0005 	ldr.w	r0, [r0, #5]
   10010:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
   10014:	f8d4 1009 	ldr.w	r1, [r4, #9]
   10018:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1001c:	c303      	stmia	r3!, {r0, r1}
    secCb.randTop = (secCb.randTop >= SEC_HCI_RAND_MULT - 1) ? 0 : secCb.randTop + 1;
   1001e:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
   10022:	2b02      	cmp	r3, #2
   10024:	bf9a      	itte	ls
   10026:	3301      	addls	r3, #1
   10028:	b2db      	uxtbls	r3, r3
   1002a:	2300      	movhi	r3, #0
   1002c:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
}
   10030:	b003      	add	sp, #12
   10032:	bd30      	pop	{r4, r5, pc}
    pBuf = WsfMsgDeq(&secCb.aesEncQueue, &handlerId);
   10034:	f10d 0107 	add.w	r1, sp, #7
   10038:	480b      	ldr	r0, [pc, #44]	; (10068 <secHciCback+0xb8>)
   1003a:	f003 fc0f 	bl	1385c <WsfMsgDeq>
    if (pBuf->type == SEC_TYPE_CCM || pBuf->type == SEC_TYPE_CMAC || pBuf->type == SEC_TYPE_AES_REV)
   1003e:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
   10042:	1ecb      	subs	r3, r1, #3
   10044:	2b01      	cmp	r3, #1
    pBuf = WsfMsgDeq(&secCb.aesEncQueue, &handlerId);
   10046:	4605      	mov	r5, r0
    if (pBuf->type == SEC_TYPE_CCM || pBuf->type == SEC_TYPE_CMAC || pBuf->type == SEC_TYPE_AES_REV)
   10048:	d901      	bls.n	1004e <secHciCback+0x9e>
   1004a:	2901      	cmp	r1, #1
   1004c:	d1cb      	bne.n	ffe6 <secHciCback+0x36>
      WStrReverse(pEvent->leEncryptCmdCmpl.data, HCI_ENCRYPT_DATA_LEN);
   1004e:	2110      	movs	r1, #16
   10050:	1d60      	adds	r0, r4, #5
   10052:	f00c fa2f 	bl	1c4b4 <WStrReverse>
    secCb.hciCbackTbl[pBuf->type](pBuf, pEvent, handlerId);
   10056:	f895 1034 	ldrb.w	r1, [r5, #52]	; 0x34
   1005a:	e7c4      	b.n	ffe6 <secHciCback+0x36>
   1005c:	10004080 	.word	0x10004080
   10060:	10004050 	.word	0x10004050
   10064:	10004078 	.word	0x10004078
   10068:	10004070 	.word	0x10004070

0001006c <SecInit>:
 *  \return None.
 */
/*************************************************************************************************/
void SecInit(void)
{
  WSF_QUEUE_INIT(&secCb.aesEncQueue);
   1006c:	4b06      	ldr	r3, [pc, #24]	; (10088 <SecInit+0x1c>)
  WSF_QUEUE_INIT(&secCb.dhKeyQueue);

  secCb.token = 0;

  /* Register callback with HCI */
  HciSecRegister(secHciCback);
   1006e:	4807      	ldr	r0, [pc, #28]	; (1008c <SecInit+0x20>)
  WSF_QUEUE_INIT(&secCb.aesEncQueue);
   10070:	2200      	movs	r2, #0
   10072:	e9c3 2208 	strd	r2, r2, [r3, #32]
  WSF_QUEUE_INIT(&secCb.pubKeyQueue);
   10076:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
  WSF_QUEUE_INIT(&secCb.dhKeyQueue);
   1007a:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
  secCb.token = 0;
   1007e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  HciSecRegister(secHciCback);
   10082:	f000 ba3d 	b.w	10500 <HciSecRegister>
   10086:	bf00      	nop
   10088:	10004050 	.word	0x10004050
   1008c:	0000ffb1 	.word	0x0000ffb1

00010090 <SecRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecRand(uint8_t *pRand, uint8_t randLen)
{
   10090:	b570      	push	{r4, r5, r6, lr}
  int8_t count = (randLen + HCI_RAND_LEN - 1) / HCI_RAND_LEN;
  uint8_t index = secCb.randBtm * HCI_RAND_LEN;
   10092:	4d1d      	ldr	r5, [pc, #116]	; (10108 <SecRand+0x78>)
  int8_t count = (randLen + HCI_RAND_LEN - 1) / HCI_RAND_LEN;
   10094:	1dce      	adds	r6, r1, #7
  uint8_t index = secCb.randBtm * HCI_RAND_LEN;
   10096:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
  int8_t count = (randLen + HCI_RAND_LEN - 1) / HCI_RAND_LEN;
   1009a:	10f6      	asrs	r6, r6, #3

  WSF_ASSERT(randLen <= SEC_RAND_DATA_LEN);

  /* Copy from circular buffer of random data. */
  while (randLen--)
   1009c:	b1d1      	cbz	r1, 100d4 <SecRand+0x44>
   1009e:	00db      	lsls	r3, r3, #3
   100a0:	b2db      	uxtb	r3, r3
   100a2:	4401      	add	r1, r0
   100a4:	e009      	b.n	100ba <SecRand+0x2a>
   100a6:	4291      	cmp	r1, r2
   100a8:	d014      	beq.n	100d4 <SecRand+0x44>
  {
    *pRand++ = secCb.rand[index];
   100aa:	782b      	ldrb	r3, [r5, #0]
   100ac:	f800 3c01 	strb.w	r3, [r0, #-1]
    index = (index == SEC_RAND_DATA_LEN - 1) ? 0 : index + 1;
   100b0:	2300      	movs	r3, #0
   100b2:	3301      	adds	r3, #1
  while (randLen--)
   100b4:	4281      	cmp	r1, r0
    index = (index == SEC_RAND_DATA_LEN - 1) ? 0 : index + 1;
   100b6:	b2db      	uxtb	r3, r3
  while (randLen--)
   100b8:	d00c      	beq.n	100d4 <SecRand+0x44>
    *pRand++ = secCb.rand[index];
   100ba:	4602      	mov	r2, r0
   100bc:	5cec      	ldrb	r4, [r5, r3]
   100be:	f802 4b01 	strb.w	r4, [r2], #1
    index = (index == SEC_RAND_DATA_LEN - 1) ? 0 : index + 1;
   100c2:	2b1f      	cmp	r3, #31
    *pRand++ = secCb.rand[index];
   100c4:	f100 0002 	add.w	r0, r0, #2
    index = (index == SEC_RAND_DATA_LEN - 1) ? 0 : index + 1;
   100c8:	d0ed      	beq.n	100a6 <SecRand+0x16>
   100ca:	4610      	mov	r0, r2
   100cc:	3301      	adds	r3, #1
  while (randLen--)
   100ce:	4281      	cmp	r1, r0
    index = (index == SEC_RAND_DATA_LEN - 1) ? 0 : index + 1;
   100d0:	b2db      	uxtb	r3, r3
  while (randLen--)
   100d2:	d1f2      	bne.n	100ba <SecRand+0x2a>
  }

  while (count--)
   100d4:	b2f4      	uxtb	r4, r6
   100d6:	b17e      	cbz	r6, 100f8 <SecRand+0x68>
  {
    /* Request more random data. */
    HciLeRandCmd();

    /* Update copy index. */
    secCb.randBtm = (secCb.randBtm >= SEC_HCI_RAND_MULT - 1) ? 0 : secCb.randBtm + 1;
   100d8:	2600      	movs	r6, #0
    HciLeRandCmd();
   100da:	f000 ffdb 	bl	11094 <HciLeRandCmd>
    secCb.randBtm = (secCb.randBtm >= SEC_HCI_RAND_MULT - 1) ? 0 : secCb.randBtm + 1;
   100de:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
   100e2:	2b02      	cmp	r3, #2
  while (count--)
   100e4:	f104 32ff 	add.w	r2, r4, #4294967295
    secCb.randBtm = (secCb.randBtm >= SEC_HCI_RAND_MULT - 1) ? 0 : secCb.randBtm + 1;
   100e8:	f103 0101 	add.w	r1, r3, #1
   100ec:	d805      	bhi.n	100fa <SecRand+0x6a>
  while (count--)
   100ee:	f012 04ff 	ands.w	r4, r2, #255	; 0xff
    secCb.randBtm = (secCb.randBtm >= SEC_HCI_RAND_MULT - 1) ? 0 : secCb.randBtm + 1;
   100f2:	f885 103a 	strb.w	r1, [r5, #58]	; 0x3a
  while (count--)
   100f6:	d1f0      	bne.n	100da <SecRand+0x4a>
  }
}
   100f8:	bd70      	pop	{r4, r5, r6, pc}
  while (count--)
   100fa:	f012 04ff 	ands.w	r4, r2, #255	; 0xff
    secCb.randBtm = (secCb.randBtm >= SEC_HCI_RAND_MULT - 1) ? 0 : secCb.randBtm + 1;
   100fe:	f885 603a 	strb.w	r6, [r5, #58]	; 0x3a
  while (count--)
   10102:	d1ea      	bne.n	100da <SecRand+0x4a>
}
   10104:	bd70      	pop	{r4, r5, r6, pc}
   10106:	bf00      	nop
   10108:	10004050 	.word	0x10004050

0001010c <SecLeEncryptCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecLeEncryptCmd(uint8_t *pKey, uint8_t *pText, void *pBuf, wsfHandlerId_t handlerId)
{
   1010c:	b570      	push	{r4, r5, r6, lr}
   1010e:	b088      	sub	sp, #32
   10110:	460e      	mov	r6, r1
   10112:	4615      	mov	r5, r2
  uint8_t revKey[HCI_KEY_LEN];
  uint8_t revText[HCI_ENCRYPT_DATA_LEN];

  WStrReverseCpy(revKey, pKey, HCI_KEY_LEN);
   10114:	4601      	mov	r1, r0
   10116:	2210      	movs	r2, #16
   10118:	4668      	mov	r0, sp
{
   1011a:	461c      	mov	r4, r3
  WStrReverseCpy(revKey, pKey, HCI_KEY_LEN);
   1011c:	f00c f9b8 	bl	1c490 <WStrReverseCpy>
  WStrReverseCpy(revText, pText, HCI_ENCRYPT_DATA_LEN);
   10120:	4631      	mov	r1, r6
   10122:	a804      	add	r0, sp, #16
   10124:	2210      	movs	r2, #16
   10126:	f00c f9b3 	bl	1c490 <WStrReverseCpy>

  WsfMsgEnq(&secCb.aesEncQueue, handlerId, pBuf);
   1012a:	462a      	mov	r2, r5
   1012c:	4621      	mov	r1, r4
   1012e:	4804      	ldr	r0, [pc, #16]	; (10140 <SecLeEncryptCmd+0x34>)
   10130:	f003 fb8e 	bl	13850 <WsfMsgEnq>
  HciLeEncryptCmd(revKey, revText);
   10134:	a904      	add	r1, sp, #16
   10136:	4668      	mov	r0, sp
   10138:	f000 fee6 	bl	10f08 <HciLeEncryptCmd>
}
   1013c:	b008      	add	sp, #32
   1013e:	bd70      	pop	{r4, r5, r6, pc}
   10140:	10004070 	.word	0x10004070

00010144 <FmplIasDiscover>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void FmplIasDiscover(dmConnId_t connId, uint16_t *pHdlList)
{
   10144:	b500      	push	{lr}
  AppDiscFindService(connId, ATT_16_UUID_LEN, (uint8_t *) attIasSvcUuid,
   10146:	4b06      	ldr	r3, [pc, #24]	; (10160 <FmplIasDiscover+0x1c>)
   10148:	4a06      	ldr	r2, [pc, #24]	; (10164 <FmplIasDiscover+0x20>)
{
   1014a:	b083      	sub	sp, #12
  AppDiscFindService(connId, ATT_16_UUID_LEN, (uint8_t *) attIasSvcUuid,
   1014c:	e9cd 3100 	strd	r3, r1, [sp]
   10150:	2301      	movs	r3, #1
   10152:	2102      	movs	r1, #2
   10154:	f00d fefc 	bl	1df50 <AppDiscFindService>
                     FMPL_IAS_HDL_LIST_LEN, (attcDiscChar_t **) fmplIasDiscCharList, pHdlList);
}
   10158:	b003      	add	sp, #12
   1015a:	f85d fb04 	ldr.w	pc, [sp], #4
   1015e:	bf00      	nop
   10160:	10002b5c 	.word	0x10002b5c
   10164:	00023ee8 	.word	0x00023ee8

00010168 <FmplSendAlert>:
/*************************************************************************************************/
void FmplSendAlert(dmConnId_t connId, uint16_t handle, uint8_t alert)
{
  uint8_t buf[1];

  if (handle != ATT_HANDLE_NONE)
   10168:	b901      	cbnz	r1, 1016c <FmplSendAlert+0x4>
   1016a:	4770      	bx	lr
{
   1016c:	b500      	push	{lr}
   1016e:	b083      	sub	sp, #12
   10170:	4694      	mov	ip, r2
  {
    buf[0] = alert;
    AttcWriteCmd(connId, handle, 1, buf);
   10172:	ab01      	add	r3, sp, #4
   10174:	2201      	movs	r2, #1
    buf[0] = alert;
   10176:	f88d c004 	strb.w	ip, [sp, #4]
    AttcWriteCmd(connId, handle, 1, buf);
   1017a:	f7fd fb43 	bl	d804 <AttcWriteCmd>
  }
}
   1017e:	b003      	add	sp, #12
   10180:	f85d fb04 	ldr.w	pc, [sp], #4

00010184 <main>:
main(void)
{
    //
    // Set the clock frequency
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
   10184:	2100      	movs	r1, #0
{
   10186:	b508      	push	{r3, lr}
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
   10188:	4608      	mov	r0, r1
   1018a:	f012 fddd 	bl	22d48 <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
   1018e:	480a      	ldr	r0, [pc, #40]	; (101b8 <main+0x34>)
   10190:	f012 fc32 	bl	229f8 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
   10194:	f012 fc54 	bl	22a40 <am_hal_cachectrl_enable>
#ifndef NOFPU
    //
    // Enable the floating point module, and configure the core for lazy
    // stacking.
    //
    am_hal_sysctrl_fpu_enable();
   10198:	f013 fc10 	bl	239bc <am_hal_sysctrl_fpu_enable>
    am_hal_sysctrl_fpu_stacking_enable(true);
   1019c:	2001      	movs	r0, #1
   1019e:	f013 fc15 	bl	239cc <am_hal_sysctrl_fpu_stacking_enable>
#endif

    //
    // Configure the board for low power.
    //
    am_bsp_low_power_init();
   101a2:	f013 fc2d 	bl	23a00 <am_bsp_low_power_init>
    am_bsp_itm_printf_enable();
   101a6:	f013 fc4b 	bl	23a40 <am_bsp_itm_printf_enable>
#endif

    //
    // Initialize plotting interface.
    //
    am_util_debug_printf("FreeRTOS Power Cycle Example\n");
   101aa:	4804      	ldr	r0, [pc, #16]	; (101bc <main+0x38>)
   101ac:	f00d fbc6 	bl	1d93c <am_util_stdio_printf>

    //
    // Run the application.
    //
    run_tasks();
   101b0:	f000 f988 	bl	104c4 <run_tasks>

    //
    // We shouldn't ever get here.
    //
    while (1)
   101b4:	e7fe      	b.n	101b4 <main+0x30>
   101b6:	bf00      	nop
   101b8:	0002770c 	.word	0x0002770c
   101bc:	00023f00 	.word	0x00023f00

000101c0 <button_handler>:
// Poll the buttons.
//
//*****************************************************************************
void
button_handler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   101c0:	b538      	push	{r3, r4, r5, lr}
    if ( pMsg->event == BUTTON_TIMER_EVENT )
   101c2:	788b      	ldrb	r3, [r1, #2]
   101c4:	2ba0      	cmp	r3, #160	; 0xa0
   101c6:	d018      	beq.n	101fa <button_handler+0x3a>
            am_util_debug_printf("Got Button 2 Press\n");
        }

    }

    if (pMsg->event == POWERCYCLE_TIMER_EVENT)
   101c8:	2ba1      	cmp	r3, #161	; 0xa1
   101ca:	d000      	beq.n	101ce <button_handler+0xe>
            DmDevReset();
            ble_on = true;
            WsfTimerStartSec(&PowerCycleTimer, 10);
        }
    }
}
   101cc:	bd38      	pop	{r3, r4, r5, pc}
        if ( ble_on == true )
   101ce:	4c2d      	ldr	r4, [pc, #180]	; (10284 <button_handler+0xc4>)
   101d0:	7823      	ldrb	r3, [r4, #0]
   101d2:	b363      	cbz	r3, 1022e <button_handler+0x6e>
            WsfTimerStartSec(&PowerCycleTimer, 1);
   101d4:	482c      	ldr	r0, [pc, #176]	; (10288 <button_handler+0xc8>)
   101d6:	2101      	movs	r1, #1
   101d8:	f003 fd76 	bl	13cc8 <WsfTimerStartSec>
            if ((connId = AppConnIsOpen()) != DM_CONN_ID_NONE)
   101dc:	f00e f824 	bl	1e228 <AppConnIsOpen>
   101e0:	4605      	mov	r5, r0
   101e2:	bba0      	cbnz	r0, 1024e <button_handler+0x8e>
            if ( AppSlaveIsAdvertising() == true )
   101e4:	f00f f8c8 	bl	1f378 <AppSlaveIsAdvertising>
   101e8:	2801      	cmp	r0, #1
   101ea:	d046      	beq.n	1027a <button_handler+0xba>
            am_util_debug_printf("Power off Apollo3 BLE controller\n");
   101ec:	4827      	ldr	r0, [pc, #156]	; (1028c <button_handler+0xcc>)
   101ee:	f00d fba5 	bl	1d93c <am_util_stdio_printf>
            HciDrvRadioShutdown();
   101f2:	f006 ff67 	bl	170c4 <HciDrvRadioShutdown>
            ble_on = false;
   101f6:	7025      	strb	r5, [r4, #0]
}
   101f8:	bd38      	pop	{r3, r4, r5, pc}
        am_devices_button_array_tick(am_bsp_psButtons, AM_BSP_NUM_BUTTONS);
   101fa:	4d25      	ldr	r5, [pc, #148]	; (10290 <button_handler+0xd0>)
        WsfTimerStartMs(&ButtonTimer, 10);
   101fc:	4825      	ldr	r0, [pc, #148]	; (10294 <button_handler+0xd4>)
   101fe:	460c      	mov	r4, r1
   10200:	210a      	movs	r1, #10
   10202:	f003 fda3 	bl	13d4c <WsfTimerStartMs>
        am_devices_button_array_tick(am_bsp_psButtons, AM_BSP_NUM_BUTTONS);
   10206:	2103      	movs	r1, #3
   10208:	4628      	mov	r0, r5
   1020a:	f00c fd5d 	bl	1ccc8 <am_devices_button_array_tick>
        if ( am_devices_button_released(am_bsp_psButtons[0]) )
   1020e:	7b2b      	ldrb	r3, [r5, #12]
   10210:	b90b      	cbnz	r3, 10216 <button_handler+0x56>
   10212:	7b6b      	ldrb	r3, [r5, #13]
   10214:	b9fb      	cbnz	r3, 10256 <button_handler+0x96>
        if ( am_devices_button_released(am_bsp_psButtons[1]) )
   10216:	7f2b      	ldrb	r3, [r5, #28]
   10218:	b90b      	cbnz	r3, 1021e <button_handler+0x5e>
   1021a:	7f6b      	ldrb	r3, [r5, #29]
   1021c:	bb13      	cbnz	r3, 10264 <button_handler+0xa4>
        if ( am_devices_button_released(am_bsp_psButtons[2]) )
   1021e:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   10222:	b913      	cbnz	r3, 1022a <button_handler+0x6a>
   10224:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   10228:	bb1b      	cbnz	r3, 10272 <button_handler+0xb2>
    if (pMsg->event == POWERCYCLE_TIMER_EVENT)
   1022a:	78a3      	ldrb	r3, [r4, #2]
   1022c:	e7cc      	b.n	101c8 <button_handler+0x8>
            am_util_debug_printf("Power on Apollo3 BLE controller\n");
   1022e:	481a      	ldr	r0, [pc, #104]	; (10298 <button_handler+0xd8>)
   10230:	f00d fb84 	bl	1d93c <am_util_stdio_printf>
            HciDrvRadioBoot(1);
   10234:	2001      	movs	r0, #1
   10236:	f006 fe51 	bl	16edc <HciDrvRadioBoot>
            DmDevReset();
   1023a:	f008 fd0b 	bl	18c54 <DmDevReset>
            ble_on = true;
   1023e:	2301      	movs	r3, #1
   10240:	7023      	strb	r3, [r4, #0]
            WsfTimerStartSec(&PowerCycleTimer, 10);
   10242:	4811      	ldr	r0, [pc, #68]	; (10288 <button_handler+0xc8>)
}
   10244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            WsfTimerStartSec(&PowerCycleTimer, 10);
   10248:	210a      	movs	r1, #10
   1024a:	f003 bd3d 	b.w	13cc8 <WsfTimerStartSec>
}
   1024e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                AppConnClose(connId);
   10252:	f00d bfe3 	b.w	1e21c <AppConnClose>
            am_util_debug_printf("Got Button 0 Press\n");
   10256:	4811      	ldr	r0, [pc, #68]	; (1029c <button_handler+0xdc>)
   10258:	f00d fb70 	bl	1d93c <am_util_stdio_printf>
            AppUiBtnTest(APP_UI_BTN_1_SHORT);
   1025c:	2002      	movs	r0, #2
   1025e:	f004 fbf7 	bl	14a50 <AppUiBtnTest>
   10262:	e7d8      	b.n	10216 <button_handler+0x56>
            am_util_debug_printf("Got Button 1 Press\n");
   10264:	480e      	ldr	r0, [pc, #56]	; (102a0 <button_handler+0xe0>)
   10266:	f00d fb69 	bl	1d93c <am_util_stdio_printf>
            AppUiBtnTest(APP_UI_BTN_1_SHORT);
   1026a:	2002      	movs	r0, #2
   1026c:	f004 fbf0 	bl	14a50 <AppUiBtnTest>
   10270:	e7d5      	b.n	1021e <button_handler+0x5e>
            am_util_debug_printf("Got Button 2 Press\n");
   10272:	480c      	ldr	r0, [pc, #48]	; (102a4 <button_handler+0xe4>)
   10274:	f00d fb62 	bl	1d93c <am_util_stdio_printf>
   10278:	e7d7      	b.n	1022a <button_handler+0x6a>
}
   1027a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                AppAdvStop();
   1027e:	f00f b977 	b.w	1f570 <AppAdvStop>
   10282:	bf00      	nop
   10284:	100040c4 	.word	0x100040c4
   10288:	100040b4 	.word	0x100040b4
   1028c:	00023f5c 	.word	0x00023f5c
   10290:	10003df4 	.word	0x10003df4
   10294:	100040a4 	.word	0x100040a4
   10298:	00023f80 	.word	0x00023f80
   1029c:	00023f20 	.word	0x00023f20
   102a0:	00023f34 	.word	0x00023f34
   102a4:	00023f48 	.word	0x00023f48

000102a8 <setup_buttons>:
// Sets up a button interface.
//
//*****************************************************************************
void
setup_buttons(void)
{
   102a8:	b510      	push	{r4, lr}
    //
    // Enable the buttons for user interaction.
    //
    am_devices_button_array_init(am_bsp_psButtons, AM_BSP_NUM_BUTTONS);
   102aa:	480b      	ldr	r0, [pc, #44]	; (102d8 <setup_buttons+0x30>)

    //
    // Start a timer.
    //
    ButtonTimer.handlerId = ButtonHandlerId;
   102ac:	4c0b      	ldr	r4, [pc, #44]	; (102dc <setup_buttons+0x34>)
    am_devices_button_array_init(am_bsp_psButtons, AM_BSP_NUM_BUTTONS);
   102ae:	2103      	movs	r1, #3
   102b0:	f00c fcee 	bl	1cc90 <am_devices_button_array_init>
    ButtonTimer.handlerId = ButtonHandlerId;
   102b4:	480a      	ldr	r0, [pc, #40]	; (102e0 <setup_buttons+0x38>)
   102b6:	7823      	ldrb	r3, [r4, #0]
   102b8:	7303      	strb	r3, [r0, #12]
    ButtonTimer.msg.event = BUTTON_TIMER_EVENT;
   102ba:	22a0      	movs	r2, #160	; 0xa0

    WsfTimerStartSec(&ButtonTimer, 2);
   102bc:	2102      	movs	r1, #2
    ButtonTimer.msg.event = BUTTON_TIMER_EVENT;
   102be:	7282      	strb	r2, [r0, #10]
    WsfTimerStartSec(&ButtonTimer, 2);
   102c0:	f003 fd02 	bl	13cc8 <WsfTimerStartSec>


    //
    // Start a timer.
    //
    PowerCycleTimer.handlerId = ButtonHandlerId;
   102c4:	4807      	ldr	r0, [pc, #28]	; (102e4 <setup_buttons+0x3c>)
   102c6:	7822      	ldrb	r2, [r4, #0]
   102c8:	7302      	strb	r2, [r0, #12]
    PowerCycleTimer.msg.event = POWERCYCLE_TIMER_EVENT;
   102ca:	23a1      	movs	r3, #161	; 0xa1
   102cc:	7283      	strb	r3, [r0, #10]

    WsfTimerStartSec(&PowerCycleTimer, 4);

}
   102ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    WsfTimerStartSec(&PowerCycleTimer, 4);
   102d2:	2104      	movs	r1, #4
   102d4:	f003 bcf8 	b.w	13cc8 <WsfTimerStartSec>
   102d8:	10003df4 	.word	0x10003df4
   102dc:	100040a0 	.word	0x100040a0
   102e0:	100040a4 	.word	0x100040a4
   102e4:	100040b4 	.word	0x100040b4

000102e8 <exactle_stack_init>:
// Initialization for the ExactLE stack.
//
//*****************************************************************************
void
exactle_stack_init(void)
{
   102e8:	b510      	push	{r4, lr}
    wsfHandlerId_t handlerId;
    uint16_t       wsfBufMemLen;
    //
    // Set up timers for the WSF scheduler.
    //
    WsfOsInit();
   102ea:	f003 fb97 	bl	13a1c <WsfOsInit>
    WsfTimerInit();
   102ee:	f003 fcc5 	bl	13c7c <WsfTimerInit>

    //
    // Initialize a buffer pool for WSF dynamic memory needs.
    //
    wsfBufMemLen = WsfBufInit(sizeof(g_pui32BufMem), (uint8_t *)g_pui32BufMem, WSF_BUF_POOLS,
   102f2:	4b35      	ldr	r3, [pc, #212]	; (103c8 <exactle_stack_init+0xe0>)
   102f4:	4935      	ldr	r1, [pc, #212]	; (103cc <exactle_stack_init+0xe4>)
   102f6:	2204      	movs	r2, #4
   102f8:	f44f 6038 	mov.w	r0, #2944	; 0xb80
   102fc:	f003 f9be 	bl	1367c <WsfBufInit>
               g_psPoolDescriptors);

    if (wsfBufMemLen > sizeof(g_pui32BufMem))
   10300:	f5b0 6f38 	cmp.w	r0, #2944	; 0xb80
   10304:	d859      	bhi.n	103ba <exactle_stack_init+0xd2>
    }

    //
    // Initialize the WSF security service.
    //
    SecInit();
   10306:	f7ff feb1 	bl	1006c <SecInit>
    SecAesInit();
   1030a:	f7ff fc97 	bl	fc3c <SecAesInit>
    SecCmacInit();
   1030e:	f7ff fe47 	bl	ffa0 <SecCmacInit>
    SecEccInit();
   10312:	f000 f959 	bl	105c8 <SecEccInit>

    //
    // Set up callback functions for the various layers of the ExactLE stack.
    //
    handlerId = WsfOsSetNextHandler(HciHandler);
   10316:	482e      	ldr	r0, [pc, #184]	; (103d0 <exactle_stack_init+0xe8>)
   10318:	f003 fb74 	bl	13a04 <WsfOsSetNextHandler>
    HciHandlerInit(handlerId);
   1031c:	f000 f8fc 	bl	10518 <HciHandlerInit>

    handlerId = WsfOsSetNextHandler(DmHandler);
   10320:	482c      	ldr	r0, [pc, #176]	; (103d4 <exactle_stack_init+0xec>)
   10322:	f003 fb6f 	bl	13a04 <WsfOsSetNextHandler>
   10326:	4604      	mov	r4, r0
    DmDevVsInit(0);
   10328:	2000      	movs	r0, #0
   1032a:	f008 fccf 	bl	18ccc <DmDevVsInit>
    DmAdvInit();
   1032e:	f007 fd19 	bl	17d64 <DmAdvInit>
    DmConnInit();
   10332:	f008 f971 	bl	18618 <DmConnInit>
    DmConnSlaveInit();
   10336:	f008 fbe9 	bl	18b0c <DmConnSlaveInit>
    DmSecInit();
   1033a:	f009 f83b 	bl	193b4 <DmSecInit>
    DmSecLescInit();
   1033e:	f009 f8d9 	bl	194f4 <DmSecLescInit>
    DmPrivInit();
   10342:	f008 feb3 	bl	190ac <DmPrivInit>
    DmHandlerInit(handlerId);
   10346:	4620      	mov	r0, r4
   10348:	f008 fd12 	bl	18d70 <DmHandlerInit>

    handlerId = WsfOsSetNextHandler(L2cSlaveHandler);
   1034c:	4822      	ldr	r0, [pc, #136]	; (103d8 <exactle_stack_init+0xf0>)
   1034e:	f003 fb59 	bl	13a04 <WsfOsSetNextHandler>
    L2cSlaveHandlerInit(handlerId);
   10352:	f000 fb19 	bl	10988 <L2cSlaveHandlerInit>
    L2cInit();
   10356:	f000 fa1b 	bl	10790 <L2cInit>
    L2cSlaveInit();
   1035a:	f000 fabf 	bl	108dc <L2cSlaveInit>

    handlerId = WsfOsSetNextHandler(AttHandler);
   1035e:	481f      	ldr	r0, [pc, #124]	; (103dc <exactle_stack_init+0xf4>)
   10360:	f003 fb50 	bl	13a04 <WsfOsSetNextHandler>
    AttHandlerInit(handlerId);
   10364:	f7ff fbc6 	bl	faf4 <AttHandlerInit>
    AttsInit();
   10368:	f7fe f872 	bl	e450 <AttsInit>
    AttsIndInit();
   1036c:	f7fd fe10 	bl	df90 <AttsIndInit>
    AttcInit();
   10370:	f7fc fe4e 	bl	d010 <AttcInit>

    handlerId = WsfOsSetNextHandler(SmpHandler);
   10374:	481a      	ldr	r0, [pc, #104]	; (103e0 <exactle_stack_init+0xf8>)
   10376:	f003 fb45 	bl	13a04 <WsfOsSetNextHandler>
    SmpHandlerInit(handlerId);
   1037a:	f00a ffa1 	bl	1b2c0 <SmpHandlerInit>
    SmprInit();
   1037e:	f009 fdd3 	bl	19f28 <SmprInit>
    SmprScInit();
   10382:	f009 fdc7 	bl	19f14 <SmprScInit>
    HciSetMaxRxAclLen(251);
   10386:	20fb      	movs	r0, #251	; 0xfb
   10388:	f001 fef2 	bl	12170 <HciSetMaxRxAclLen>

    handlerId = WsfOsSetNextHandler(AppHandler);
   1038c:	4815      	ldr	r0, [pc, #84]	; (103e4 <exactle_stack_init+0xfc>)
   1038e:	f003 fb39 	bl	13a04 <WsfOsSetNextHandler>
    AppHandlerInit(handlerId);
   10392:	f00d fed5 	bl	1e140 <AppHandlerInit>

    handlerId = WsfOsSetNextHandler(TagHandler);
   10396:	4814      	ldr	r0, [pc, #80]	; (103e8 <exactle_stack_init+0x100>)
   10398:	f003 fb34 	bl	13a04 <WsfOsSetNextHandler>
    TagHandlerInit(handlerId);
   1039c:	f00c fa62 	bl	1c864 <TagHandlerInit>

    ButtonHandlerId = WsfOsSetNextHandler(button_handler);
   103a0:	4812      	ldr	r0, [pc, #72]	; (103ec <exactle_stack_init+0x104>)
   103a2:	f003 fb2f 	bl	13a04 <WsfOsSetNextHandler>
   103a6:	4b12      	ldr	r3, [pc, #72]	; (103f0 <exactle_stack_init+0x108>)
   103a8:	4602      	mov	r2, r0

    handlerId = WsfOsSetNextHandler(HciDrvHandler);
   103aa:	4812      	ldr	r0, [pc, #72]	; (103f4 <exactle_stack_init+0x10c>)
    ButtonHandlerId = WsfOsSetNextHandler(button_handler);
   103ac:	701a      	strb	r2, [r3, #0]
    handlerId = WsfOsSetNextHandler(HciDrvHandler);
   103ae:	f003 fb29 	bl	13a04 <WsfOsSetNextHandler>
    HciDrvHandlerInit(handlerId);
}
   103b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HciDrvHandlerInit(handlerId);
   103b6:	f006 bf1f 	b.w	171f8 <HciDrvHandlerInit>
        am_util_debug_printf("Memory pool is too small by %d\r\n",
   103ba:	4601      	mov	r1, r0
   103bc:	f5a1 6138 	sub.w	r1, r1, #2944	; 0xb80
   103c0:	480d      	ldr	r0, [pc, #52]	; (103f8 <exactle_stack_init+0x110>)
   103c2:	f00d fabb 	bl	1d93c <am_util_stdio_printf>
   103c6:	e79e      	b.n	10306 <exactle_stack_init+0x1e>
   103c8:	10002b60 	.word	0x10002b60
   103cc:	100040c8 	.word	0x100040c8
   103d0:	0001052d 	.word	0x0001052d
   103d4:	00018d8d 	.word	0x00018d8d
   103d8:	00010999 	.word	0x00010999
   103dc:	0000fb2d 	.word	0x0000fb2d
   103e0:	0001b325 	.word	0x0001b325
   103e4:	0001e14d 	.word	0x0001e14d
   103e8:	0001c909 	.word	0x0001c909
   103ec:	000101c1 	.word	0x000101c1
   103f0:	100040a0 	.word	0x100040a0
   103f4:	00017259 	.word	0x00017259
   103f8:	00023fa4 	.word	0x00023fa4

000103fc <am_uart_isr>:
    uint32_t ui32Status;

    //
    // Read and save the interrupt status, but clear out the status register.
    //
    ui32Status = UARTn(0)->MIS;
   103fc:	4b01      	ldr	r3, [pc, #4]	; (10404 <am_uart_isr+0x8>)
   103fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    UARTn(0)->IEC = ui32Status;
   10400:	645a      	str	r2, [r3, #68]	; 0x44

}
   10402:	4770      	bx	lr
   10404:	4001c000 	.word	0x4001c000

00010408 <am_ble_isr>:
//*****************************************************************************
void
am_ble_isr(void)
{

    HciDrvIntService();
   10408:	f006 bf0a 	b.w	17220 <HciDrvIntService>

0001040c <RadioTaskSetup>:
// Perform initial setup for the radio task.
//
//*****************************************************************************
void
RadioTaskSetup(void)
{
   1040c:	b508      	push	{r3, lr}
    am_util_debug_printf("RadioTask: setup\r\n");
   1040e:	4804      	ldr	r0, [pc, #16]	; (10420 <RadioTaskSetup+0x14>)
   10410:	f00d fa94 	bl	1d93c <am_util_stdio_printf>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10414:	4b03      	ldr	r3, [pc, #12]	; (10424 <RadioTaskSetup+0x18>)
   10416:	2280      	movs	r2, #128	; 0x80
   10418:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c


    NVIC_SetPriority(BLE_IRQn, NVIC_configMAX_SYSCALL_INTERRUPT_PRIORITY);

}
   1041c:	bd08      	pop	{r3, pc}
   1041e:	bf00      	nop
   10420:	00023fc8 	.word	0x00023fc8
   10424:	e000e100 	.word	0xe000e100

00010428 <RadioTask>:
// Short Description.
//
//*****************************************************************************
void
RadioTask(void *pvParameters)
{
   10428:	b508      	push	{r3, lr}
#if WSF_TRACE_ENABLED == TRUE
    //
    // Enable ITM
    //
    am_util_debug_printf("Starting wicentric trace:\n\n");
   1042a:	4809      	ldr	r0, [pc, #36]	; (10450 <RadioTask+0x28>)
   1042c:	f00d fa86 	bl	1d93c <am_util_stdio_printf>
#endif

    //
    // Boot the radio.
    //
    HciDrvRadioBoot(1);
   10430:	2001      	movs	r0, #1
   10432:	f006 fd53 	bl	16edc <HciDrvRadioBoot>

    //
    // Initialize the main ExactLE stack.
    //
    exactle_stack_init();
   10436:	f7ff ff57 	bl	102e8 <exactle_stack_init>


    //
    // Prep the buttons for use
    //
    setup_buttons();
   1043a:	f7ff ff35 	bl	102a8 <setup_buttons>

    //
    // Start the "Tag" profile.
    //
    TagStart();
   1043e:	f00c fbe5 	bl	1cc0c <TagStart>

    ble_on = true;
   10442:	4b04      	ldr	r3, [pc, #16]	; (10454 <RadioTask+0x2c>)
   10444:	2201      	movs	r2, #1
   10446:	701a      	strb	r2, [r3, #0]

        //
        // Calculate the elapsed time from our free-running timer, and update
        // the software timers in the WSF scheduler.
        //
        wsfOsDispatcher();
   10448:	f003 fafa 	bl	13a40 <wsfOsDispatcher>
    while (1)
   1044c:	e7fc      	b.n	10448 <RadioTask+0x20>
   1044e:	bf00      	nop
   10450:	00023fdc 	.word	0x00023fdc
   10454:	100040c4 	.word	0x100040c4

00010458 <setup_task>:
// features.
//
//*****************************************************************************
void
setup_task(void *pvParameters)
{
   10458:	b500      	push	{lr}
    //
    // Print a debug message.
    //
    am_util_debug_printf("Running setup tasks...\r\n");
   1045a:	480a      	ldr	r0, [pc, #40]	; (10484 <setup_task+0x2c>)
{
   1045c:	b083      	sub	sp, #12
    am_util_debug_printf("Running setup tasks...\r\n");
   1045e:	f00d fa6d 	bl	1d93c <am_util_stdio_printf>

    //
    // Run setup functions.
    //
    RadioTaskSetup();
   10462:	f7ff ffd3 	bl	1040c <RadioTaskSetup>

    //
    // Create the functional tasks
    //
    xTaskCreate(RadioTask, "RadioTask", 512, 0, 3, &radio_task_handle);
   10466:	4a08      	ldr	r2, [pc, #32]	; (10488 <setup_task+0x30>)
   10468:	4908      	ldr	r1, [pc, #32]	; (1048c <setup_task+0x34>)
   1046a:	4809      	ldr	r0, [pc, #36]	; (10490 <setup_task+0x38>)
   1046c:	2303      	movs	r3, #3
   1046e:	e9cd 3200 	strd	r3, r2, [sp]
   10472:	2300      	movs	r3, #0
   10474:	f44f 7200 	mov.w	r2, #512	; 0x200
   10478:	f00f ff14 	bl	202a4 <xTaskCreate>

    //
    // The setup operations are complete, so suspend the setup task now.
    //
    vTaskSuspend(NULL);
   1047c:	2000      	movs	r0, #0
   1047e:	f010 f841 	bl	20504 <vTaskSuspend>

    while (1);
   10482:	e7fe      	b.n	10482 <setup_task+0x2a>
   10484:	00023ff8 	.word	0x00023ff8
   10488:	10004c48 	.word	0x10004c48
   1048c:	00024014 	.word	0x00024014
   10490:	00010429 	.word	0x00010429

00010494 <am_ctimer_isr>:
{
   10494:	b510      	push	{r4, lr}
    ui32Status = am_hal_ctimer_int_status_get(false);
   10496:	2000      	movs	r0, #0
   10498:	f012 fd3a 	bl	22f10 <am_hal_ctimer_int_status_get>
   1049c:	4604      	mov	r4, r0
    am_hal_ctimer_int_clear(ui32Status);
   1049e:	f012 fd25 	bl	22eec <am_hal_ctimer_int_clear>
    am_hal_ctimer_int_service(ui32Status);
   104a2:	4620      	mov	r0, r4
}
   104a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    am_hal_ctimer_int_service(ui32Status);
   104a8:	f012 bd08 	b.w	22ebc <am_hal_ctimer_int_service>

000104ac <am_freertos_sleep>:
{
   104ac:	b508      	push	{r3, lr}
    am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
   104ae:	2001      	movs	r0, #1
   104b0:	f013 fa4c 	bl	2394c <am_hal_sysctrl_sleep>
}
   104b4:	2000      	movs	r0, #0
   104b6:	bd08      	pop	{r3, pc}

000104b8 <am_freertos_wakeup>:
}
   104b8:	4770      	bx	lr
   104ba:	bf00      	nop

000104bc <vApplicationMallocFailedHook>:
    while (1);
   104bc:	e7fe      	b.n	104bc <vApplicationMallocFailedHook>
   104be:	bf00      	nop

000104c0 <vApplicationStackOverflowHook>:
        __asm("BKPT #0\n") ; // Break into the debugger
   104c0:	be00      	bkpt	0x0000
    while (1)
   104c2:	e7fd      	b.n	104c0 <vApplicationStackOverflowHook>

000104c4 <run_tasks>:
// Initializes all tasks
//
//*****************************************************************************
void
run_tasks(void)
{
   104c4:	b500      	push	{lr}
    //

    //
    // Create essential tasks.
    //
    xTaskCreate(setup_task, "Setup", 512, 0, 3, &xSetupTask);
   104c6:	4a08      	ldr	r2, [pc, #32]	; (104e8 <run_tasks+0x24>)
   104c8:	4908      	ldr	r1, [pc, #32]	; (104ec <run_tasks+0x28>)
   104ca:	4809      	ldr	r0, [pc, #36]	; (104f0 <run_tasks+0x2c>)
{
   104cc:	b083      	sub	sp, #12
    xTaskCreate(setup_task, "Setup", 512, 0, 3, &xSetupTask);
   104ce:	2303      	movs	r3, #3
   104d0:	e9cd 3200 	strd	r3, r2, [sp]
   104d4:	2300      	movs	r3, #0
   104d6:	f44f 7200 	mov.w	r2, #512	; 0x200
   104da:	f00f fee3 	bl	202a4 <xTaskCreate>

    //
    // Start the scheduler.
    //
    vTaskStartScheduler();
}
   104de:	b003      	add	sp, #12
   104e0:	f85d eb04 	ldr.w	lr, [sp], #4
    vTaskStartScheduler();
   104e4:	f010 b87e 	b.w	205e4 <vTaskStartScheduler>
   104e8:	10004c4c 	.word	0x10004c4c
   104ec:	00024020 	.word	0x00024020
   104f0:	00010459 	.word	0x00010459

000104f4 <HciEvtRegister>:
 *  \return None.
 */
/*************************************************************************************************/
void HciEvtRegister(hciEvtCback_t evtCback)
{
  hciCb.evtCback = evtCback;
   104f4:	4b01      	ldr	r3, [pc, #4]	; (104fc <HciEvtRegister+0x8>)
   104f6:	6098      	str	r0, [r3, #8]
}
   104f8:	4770      	bx	lr
   104fa:	bf00      	nop
   104fc:	10004c50 	.word	0x10004c50

00010500 <HciSecRegister>:
 *  \return None.
 */
/*************************************************************************************************/
void HciSecRegister(hciSecCback_t secCback)
{
  hciCb.secCback = secCback;
   10500:	4b01      	ldr	r3, [pc, #4]	; (10508 <HciSecRegister+0x8>)
   10502:	60d8      	str	r0, [r3, #12]
}
   10504:	4770      	bx	lr
   10506:	bf00      	nop
   10508:	10004c50 	.word	0x10004c50

0001050c <HciAclRegister>:
 *  \return None.
 */
/*************************************************************************************************/
void HciAclRegister(hciAclCback_t aclCback, hciFlowCback_t flowCback)
{
  hciCb.aclCback = aclCback;
   1050c:	4b01      	ldr	r3, [pc, #4]	; (10514 <HciAclRegister+0x8>)
  hciCb.flowCback = flowCback;
   1050e:	e9c3 0104 	strd	r0, r1, [r3, #16]
}
   10512:	4770      	bx	lr
   10514:	10004c50 	.word	0x10004c50

00010518 <HciHandlerInit>:
 */
/*************************************************************************************************/
void HciHandlerInit(wsfHandlerId_t handlerId)
{
  /* store handler ID */
  hciCb.handlerId = handlerId;
   10518:	4b03      	ldr	r3, [pc, #12]	; (10528 <HciHandlerInit+0x10>)

  /* init rx queue */
  WSF_QUEUE_INIT(&hciCb.rxQueue);
   1051a:	2200      	movs	r2, #0
   1051c:	e9c3 2200 	strd	r2, r2, [r3]
  hciCb.handlerId = handlerId;
   10520:	7618      	strb	r0, [r3, #24]

  /* perform other hci initialization */
  HciCoreInit();
   10522:	f001 bdbd 	b.w	120a0 <HciCoreInit>
   10526:	bf00      	nop
   10528:	10004c50 	.word	0x10004c50

0001052c <HciHandler>:
 *  \return None.
 */
/*************************************************************************************************/
void HciHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
  HciCoreHandler(event, pMsg);
   1052c:	f001 bedc 	b.w	122e8 <HciCoreHandler>

00010530 <secEccRng>:
 *
 *  \return TRUE if successful.
 */
/*************************************************************************************************/
static int secEccRng(uint8_t *p_dest, unsigned p_size)
{
   10530:	b508      	push	{r3, lr}
  SecRand(p_dest, p_size);
   10532:	b2c9      	uxtb	r1, r1
   10534:	f7ff fdac 	bl	10090 <SecRand>
  return TRUE;
}
   10538:	2001      	movs	r0, #1
   1053a:	bd08      	pop	{r3, pc}

0001053c <SecEccGenKey>:
 *
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecEccGenKey(wsfHandlerId_t handlerId, uint16_t param, uint8_t event)
{
   1053c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1053e:	4605      	mov	r5, r0
  secEccMsg_t *pMsg = WsfMsgAlloc(sizeof(secEccMsg_t));
   10540:	2064      	movs	r0, #100	; 0x64
{
   10542:	460e      	mov	r6, r1
   10544:	4617      	mov	r7, r2
  secEccMsg_t *pMsg = WsfMsgAlloc(sizeof(secEccMsg_t));
   10546:	f003 f965 	bl	13814 <WsfMsgAlloc>

  if (pMsg)
   1054a:	4604      	mov	r4, r0
   1054c:	b900      	cbnz	r0, 10550 <SecEccGenKey+0x14>

    return TRUE;
  }

  return FALSE;
}
   1054e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uECC_make_key(pMsg->data.key.pubKey_x, pMsg->data.key.privKey);
   10550:	f100 0144 	add.w	r1, r0, #68	; 0x44
   10554:	3004      	adds	r0, #4
   10556:	f006 f989 	bl	1686c <uECC_make_key>
    pMsg->hdr.status = HCI_SUCCESS;
   1055a:	2300      	movs	r3, #0
    WsfMsgSend(handlerId, pMsg);
   1055c:	4628      	mov	r0, r5
    pMsg->hdr.event = event;
   1055e:	70a7      	strb	r7, [r4, #2]
    pMsg->hdr.param = param;
   10560:	8026      	strh	r6, [r4, #0]
    pMsg->hdr.status = HCI_SUCCESS;
   10562:	70e3      	strb	r3, [r4, #3]
    WsfMsgSend(handlerId, pMsg);
   10564:	4621      	mov	r1, r4
   10566:	f003 f961 	bl	1382c <WsfMsgSend>
    return TRUE;
   1056a:	2001      	movs	r0, #1
}
   1056c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1056e:	bf00      	nop

00010570 <SecEccGenSharedSecret>:
 *
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecEccGenSharedSecret(secEccKey_t *pKey, wsfHandlerId_t handlerId, uint16_t param, uint8_t event)
{
   10570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10574:	4605      	mov	r5, r0
  secEccMsg_t *pMsg = WsfMsgAlloc(sizeof(secEccMsg_t));
   10576:	2064      	movs	r0, #100	; 0x64
{
   10578:	4688      	mov	r8, r1
   1057a:	4617      	mov	r7, r2
   1057c:	461e      	mov	r6, r3
  secEccMsg_t *pMsg = WsfMsgAlloc(sizeof(secEccMsg_t));
   1057e:	f003 f949 	bl	13814 <WsfMsgAlloc>

  if (pMsg)
   10582:	4604      	mov	r4, r0
   10584:	b908      	cbnz	r0, 1058a <SecEccGenSharedSecret+0x1a>

    return TRUE;
  }

  return FALSE;
}
   10586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool_t keyValid = uECC_valid_public_key(pKey->pubKey_x);
   1058a:	4628      	mov	r0, r5
   1058c:	f006 fb74 	bl	16c78 <uECC_valid_public_key>
    if (keyValid)
   10590:	b2c0      	uxtb	r0, r0
   10592:	b978      	cbnz	r0, 105b4 <SecEccGenSharedSecret+0x44>
      memset(pMsg->data.sharedSecret.secret, 0xFF, SEC_ECC_KEY_LEN);
   10594:	2220      	movs	r2, #32
   10596:	21ff      	movs	r1, #255	; 0xff
   10598:	1d20      	adds	r0, r4, #4
   1059a:	f010 ff57 	bl	2144c <memset>
    pMsg->hdr.event = event;
   1059e:	70a6      	strb	r6, [r4, #2]
    pMsg->hdr.param = param;
   105a0:	8027      	strh	r7, [r4, #0]
    pMsg->hdr.status = keyValid ? HCI_SUCCESS : HCI_ERR_INVALID_PARAM;
   105a2:	2312      	movs	r3, #18
    WsfMsgSend(handlerId, pMsg);
   105a4:	4640      	mov	r0, r8
    pMsg->hdr.status = keyValid ? HCI_SUCCESS : HCI_ERR_INVALID_PARAM;
   105a6:	70e3      	strb	r3, [r4, #3]
    WsfMsgSend(handlerId, pMsg);
   105a8:	4621      	mov	r1, r4
   105aa:	f003 f93f 	bl	1382c <WsfMsgSend>
    return TRUE;
   105ae:	2001      	movs	r0, #1
}
   105b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      uECC_shared_secret(pKey->pubKey_x, pKey->privKey, pMsg->data.sharedSecret.secret);
   105b4:	1d22      	adds	r2, r4, #4
   105b6:	f105 0140 	add.w	r1, r5, #64	; 0x40
   105ba:	4628      	mov	r0, r5
   105bc:	f006 fa5c 	bl	16a78 <uECC_shared_secret>
    pMsg->hdr.event = event;
   105c0:	70a6      	strb	r6, [r4, #2]
    pMsg->hdr.param = param;
   105c2:	8027      	strh	r7, [r4, #0]
    pMsg->hdr.status = keyValid ? HCI_SUCCESS : HCI_ERR_INVALID_PARAM;
   105c4:	2300      	movs	r3, #0
   105c6:	e7ed      	b.n	105a4 <SecEccGenSharedSecret+0x34>

000105c8 <SecEccInit>:
 */
/*************************************************************************************************/
void SecEccInit()
{
  //srand((unsigned int)time(NULL));
  uECC_set_rng(secEccRng);
   105c8:	4801      	ldr	r0, [pc, #4]	; (105d0 <SecEccInit+0x8>)
   105ca:	f006 b949 	b.w	16860 <uECC_set_rng>
   105ce:	bf00      	nop
   105d0:	00010531 	.word	0x00010531

000105d4 <l2cDefaultCtrlCback>:
 */
/*************************************************************************************************/
static void l2cDefaultCtrlCback(wsfMsgHdr_t *pMsg)
{
  return;
}
   105d4:	4770      	bx	lr
   105d6:	bf00      	nop

000105d8 <l2cHciFlowCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void l2cHciFlowCback(uint16_t handle, bool_t flowDisabled)
{
   105d8:	b530      	push	{r4, r5, lr}
   105da:	b083      	sub	sp, #12
   105dc:	460c      	mov	r4, r1
  wsfMsgHdr_t hdr;

  /* get conn ID for handle */
  if ((hdr.param = DmConnIdByHandle(handle)) != DM_CONN_ID_NONE)
   105de:	f008 f917 	bl	18810 <DmConnIdByHandle>
   105e2:	b280      	uxth	r0, r0
   105e4:	f8ad 0004 	strh.w	r0, [sp, #4]
   105e8:	b178      	cbz	r0, 1060a <l2cHciFlowCback+0x32>
  {
    /* execute higher layer flow control callbacks */
    hdr.event = flowDisabled;
    (*l2cCb.attCtrlCback)(&hdr);
   105ea:	4d09      	ldr	r5, [pc, #36]	; (10610 <l2cHciFlowCback+0x38>)
    hdr.event = flowDisabled;
   105ec:	f88d 4006 	strb.w	r4, [sp, #6]
    (*l2cCb.attCtrlCback)(&hdr);
   105f0:	68eb      	ldr	r3, [r5, #12]
   105f2:	a801      	add	r0, sp, #4
   105f4:	4798      	blx	r3
    hdr.event = flowDisabled;
    (*l2cCb.smpCtrlCback)(&hdr);
   105f6:	692b      	ldr	r3, [r5, #16]
    hdr.event = flowDisabled;
   105f8:	f88d 4006 	strb.w	r4, [sp, #6]
    (*l2cCb.smpCtrlCback)(&hdr);
   105fc:	a801      	add	r0, sp, #4
   105fe:	4798      	blx	r3

    /* execute connection oriented channel flow control callback */
    hdr.event = flowDisabled;
    (*l2cCb.l2cCocCtrlCback)(&hdr);
   10600:	696b      	ldr	r3, [r5, #20]
    hdr.event = flowDisabled;
   10602:	f88d 4006 	strb.w	r4, [sp, #6]
    (*l2cCb.l2cCocCtrlCback)(&hdr);
   10606:	a801      	add	r0, sp, #4
   10608:	4798      	blx	r3
  }
}
   1060a:	b003      	add	sp, #12
   1060c:	bd30      	pop	{r4, r5, pc}
   1060e:	bf00      	nop
   10610:	10004c6c 	.word	0x10004c6c

00010614 <l2cRxSignalingPkt>:
{
   10614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10618:	4606      	mov	r6, r0
   1061a:	460d      	mov	r5, r1
   1061c:	4614      	mov	r4, r2
  if ((connId = DmConnIdByHandle(handle)) == DM_CONN_ID_NONE)
   1061e:	f008 f8f7 	bl	18810 <DmConnIdByHandle>
   10622:	b908      	cbnz	r0, 10628 <l2cRxSignalingPkt+0x14>
}
   10624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  role = DmConnRole(connId);
   10628:	f008 f9a6 	bl	18978 <DmConnRole>
  if ((role == DM_ROLE_MASTER) && (l2cCb.masterRxSignalingPkt != NULL))
   1062c:	4601      	mov	r1, r0
   1062e:	b948      	cbnz	r0, 10644 <l2cRxSignalingPkt+0x30>
   10630:	4a0d      	ldr	r2, [pc, #52]	; (10668 <l2cRxSignalingPkt+0x54>)
   10632:	6997      	ldr	r7, [r2, #24]
   10634:	b147      	cbz	r7, 10648 <l2cRxSignalingPkt+0x34>
    (*l2cCb.slaveRxSignalingPkt)(handle, len, pPacket);
   10636:	4622      	mov	r2, r4
   10638:	4629      	mov	r1, r5
   1063a:	4630      	mov	r0, r6
   1063c:	463b      	mov	r3, r7
}
   1063e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    (*l2cCb.slaveRxSignalingPkt)(handle, len, pPacket);
   10642:	4718      	bx	r3
  else if ((role == DM_ROLE_SLAVE) && (l2cCb.slaveRxSignalingPkt != NULL))
   10644:	2801      	cmp	r0, #1
   10646:	d004      	beq.n	10652 <l2cRxSignalingPkt+0x3e>
}
   10648:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    L2C_TRACE_ERR1("Invalid role configuration: role=%d", role);
   1064c:	4807      	ldr	r0, [pc, #28]	; (1066c <l2cRxSignalingPkt+0x58>)
   1064e:	f003 bc61 	b.w	13f14 <WsfTrace>
  else if ((role == DM_ROLE_SLAVE) && (l2cCb.slaveRxSignalingPkt != NULL))
   10652:	4a05      	ldr	r2, [pc, #20]	; (10668 <l2cRxSignalingPkt+0x54>)
   10654:	69d7      	ldr	r7, [r2, #28]
   10656:	2f00      	cmp	r7, #0
   10658:	d0f6      	beq.n	10648 <l2cRxSignalingPkt+0x34>
    (*l2cCb.slaveRxSignalingPkt)(handle, len, pPacket);
   1065a:	4622      	mov	r2, r4
   1065c:	4629      	mov	r1, r5
   1065e:	4630      	mov	r0, r6
   10660:	463b      	mov	r3, r7
}
   10662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    (*l2cCb.slaveRxSignalingPkt)(handle, len, pPacket);
   10666:	4718      	bx	r3
   10668:	10004c6c 	.word	0x10004c6c
   1066c:	00024028 	.word	0x00024028

00010670 <l2cDefaultDataCidCback>:
  L2C_TRACE_WARN1("unknown cid=0x%04x", cid);
   10670:	4801      	ldr	r0, [pc, #4]	; (10678 <l2cDefaultDataCidCback+0x8>)
   10672:	f003 bc4f 	b.w	13f14 <WsfTrace>
   10676:	bf00      	nop
   10678:	0002404c 	.word	0x0002404c

0001067c <l2cDefaultDataCback>:
  L2C_TRACE_WARN0("rcvd data on uregistered cid");
   1067c:	4801      	ldr	r0, [pc, #4]	; (10684 <l2cDefaultDataCback+0x8>)
   1067e:	f003 bc49 	b.w	13f14 <WsfTrace>
   10682:	bf00      	nop
   10684:	00024060 	.word	0x00024060

00010688 <l2cHciAclCback>:
{
   10688:	b538      	push	{r3, r4, r5, lr}
  BSTREAM_TO_UINT16(hciLen, p);
   1068a:	78c3      	ldrb	r3, [r0, #3]
   1068c:	7882      	ldrb	r2, [r0, #2]
   1068e:	eb02 2203 	add.w	r2, r2, r3, lsl #8
   10692:	b292      	uxth	r2, r2
  if (hciLen >= L2C_HDR_LEN)
   10694:	2a03      	cmp	r2, #3
{
   10696:	4604      	mov	r4, r0
  if (hciLen >= L2C_HDR_LEN)
   10698:	d808      	bhi.n	106ac <l2cHciAclCback+0x24>
  if (hciLen == (l2cLen + L2C_HDR_LEN))
   1069a:	2100      	movs	r1, #0
    L2C_TRACE_WARN2("length mismatch: l2c=%u hci=%u", l2cLen, hciLen);
   1069c:	4826      	ldr	r0, [pc, #152]	; (10738 <l2cHciAclCback+0xb0>)
   1069e:	f003 fc39 	bl	13f14 <WsfTrace>
  WsfMsgFree(pPacket);
   106a2:	4620      	mov	r0, r4
}
   106a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WsfMsgFree(pPacket);
   106a8:	f003 b8bc 	b.w	13824 <WsfMsgFree>
    BSTREAM_TO_UINT16(l2cLen, p);
   106ac:	7941      	ldrb	r1, [r0, #5]
   106ae:	f890 c004 	ldrb.w	ip, [r0, #4]
   106b2:	eb0c 2c01 	add.w	ip, ip, r1, lsl #8
   106b6:	fa1f fc8c 	uxth.w	ip, ip
  if (hciLen == (l2cLen + L2C_HDR_LEN))
   106ba:	f10c 0304 	add.w	r3, ip, #4
   106be:	429a      	cmp	r2, r3
   106c0:	4661      	mov	r1, ip
   106c2:	d1eb      	bne.n	1069c <l2cHciAclCback+0x14>
    BSTREAM_TO_UINT16(cid, p);
   106c4:	79c1      	ldrb	r1, [r0, #7]
   106c6:	7983      	ldrb	r3, [r0, #6]
  BSTREAM_TO_UINT16(handle, p);
   106c8:	7842      	ldrb	r2, [r0, #1]
   106ca:	7800      	ldrb	r0, [r0, #0]
    BSTREAM_TO_UINT16(cid, p);
   106cc:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   106d0:	b29b      	uxth	r3, r3
  BSTREAM_TO_UINT16(handle, p);
   106d2:	eb00 2002 	add.w	r0, r0, r2, lsl #8
    switch (cid)
   106d6:	2b05      	cmp	r3, #5
  handle &= HCI_HANDLE_MASK;
   106d8:	f3c0 000b 	ubfx	r0, r0, #0, #12
    switch (cid)
   106dc:	d022      	beq.n	10724 <l2cHciAclCback+0x9c>
   106de:	2b06      	cmp	r3, #6
   106e0:	d016      	beq.n	10710 <l2cHciAclCback+0x88>
   106e2:	2b04      	cmp	r3, #4
   106e4:	d00a      	beq.n	106fc <l2cHciAclCback+0x74>
        (*l2cCb.l2cDataCidCback)(handle, cid, l2cLen, pPacket);
   106e6:	4915      	ldr	r1, [pc, #84]	; (1073c <l2cHciAclCback+0xb4>)
   106e8:	4662      	mov	r2, ip
   106ea:	6a0d      	ldr	r5, [r1, #32]
   106ec:	4619      	mov	r1, r3
   106ee:	4623      	mov	r3, r4
   106f0:	47a8      	blx	r5
  WsfMsgFree(pPacket);
   106f2:	4620      	mov	r0, r4
}
   106f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WsfMsgFree(pPacket);
   106f8:	f003 b894 	b.w	13824 <WsfMsgFree>
        (*l2cCb.attDataCback)(handle, l2cLen, pPacket);
   106fc:	4b0f      	ldr	r3, [pc, #60]	; (1073c <l2cHciAclCback+0xb4>)
   106fe:	4622      	mov	r2, r4
   10700:	681b      	ldr	r3, [r3, #0]
   10702:	4661      	mov	r1, ip
   10704:	4798      	blx	r3
  WsfMsgFree(pPacket);
   10706:	4620      	mov	r0, r4
}
   10708:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WsfMsgFree(pPacket);
   1070c:	f003 b88a 	b.w	13824 <WsfMsgFree>
        (*l2cCb.smpDataCback)(handle, l2cLen, pPacket);
   10710:	4b0a      	ldr	r3, [pc, #40]	; (1073c <l2cHciAclCback+0xb4>)
   10712:	4622      	mov	r2, r4
   10714:	685b      	ldr	r3, [r3, #4]
   10716:	4661      	mov	r1, ip
   10718:	4798      	blx	r3
  WsfMsgFree(pPacket);
   1071a:	4620      	mov	r0, r4
}
   1071c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WsfMsgFree(pPacket);
   10720:	f003 b880 	b.w	13824 <WsfMsgFree>
        (*l2cCb.l2cSignalingCback)(handle, l2cLen, pPacket);
   10724:	4b05      	ldr	r3, [pc, #20]	; (1073c <l2cHciAclCback+0xb4>)
   10726:	4622      	mov	r2, r4
   10728:	689b      	ldr	r3, [r3, #8]
   1072a:	4661      	mov	r1, ip
   1072c:	4798      	blx	r3
  WsfMsgFree(pPacket);
   1072e:	4620      	mov	r0, r4
}
   10730:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WsfMsgFree(pPacket);
   10734:	f003 b876 	b.w	13824 <WsfMsgFree>
   10738:	00024080 	.word	0x00024080
   1073c:	10004c6c 	.word	0x10004c6c

00010740 <l2cSendCmdReject>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void l2cSendCmdReject(uint16_t handle, uint8_t identifier, uint16_t reason)
{
   10740:	b570      	push	{r4, r5, r6, lr}
   10742:	4605      	mov	r5, r0
   10744:	460e      	mov	r6, r1
 *  \return Pointer to data message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *l2cMsgAlloc(uint16_t len)
{
  return WsfMsgDataAlloc(len, HCI_TX_DATA_TAILROOM);
   10746:	200e      	movs	r0, #14
   10748:	2100      	movs	r1, #0
{
   1074a:	4614      	mov	r4, r2
  return WsfMsgDataAlloc(len, HCI_TX_DATA_TAILROOM);
   1074c:	f003 f858 	bl	13800 <WsfMsgDataAlloc>
  if ((pPacket = l2cMsgAlloc(L2C_SIG_PKT_BASE_LEN + L2C_SIG_CMD_REJ_LEN)) != NULL)
   10750:	b1c8      	cbz	r0, 10786 <l2cSendCmdReject+0x46>
void L2cDataReq(uint16_t cid, uint16_t handle, uint16_t len, uint8_t *pPacket)
{
  uint8_t *p = pPacket;

  /* Set HCI header */
  UINT16_TO_BSTREAM(p, handle);
   10752:	0a29      	lsrs	r1, r5, #8
    UINT16_TO_BSTREAM(p, L2C_SIG_CMD_REJ_LEN);    /* parameter length */
   10754:	2202      	movs	r2, #2
   10756:	7282      	strb	r2, [r0, #10]
    UINT16_TO_BSTREAM(p, reason);                 /* reason */
   10758:	7304      	strb	r4, [r0, #12]
    UINT16_TO_BSTREAM(p, L2C_SIG_CMD_REJ_LEN);    /* parameter length */
   1075a:	2200      	movs	r2, #0
    UINT16_TO_BSTREAM(p, reason);                 /* reason */
   1075c:	0a24      	lsrs	r4, r4, #8
  UINT16_TO_BSTREAM(p, handle);
   1075e:	7041      	strb	r1, [r0, #1]
  UINT16_TO_BSTREAM(p, (len + L2C_HDR_LEN));

  /* Set L2CAP header */
  UINT16_TO_BSTREAM(p, len);
   10760:	2106      	movs	r1, #6
    UINT16_TO_BSTREAM(p, L2C_SIG_CMD_REJ_LEN);    /* parameter length */
   10762:	72c2      	strb	r2, [r0, #11]
    UINT16_TO_BSTREAM(p, reason);                 /* reason */
   10764:	7344      	strb	r4, [r0, #13]
  UINT16_TO_BSTREAM(p, (len + L2C_HDR_LEN));
   10766:	70c2      	strb	r2, [r0, #3]
   10768:	240a      	movs	r4, #10
  UINT16_TO_BSTREAM(p, len);
   1076a:	7101      	strb	r1, [r0, #4]
   1076c:	7142      	strb	r2, [r0, #5]
  UINT16_TO_BSTREAM(p, cid);
   1076e:	71c2      	strb	r2, [r0, #7]
   10770:	2105      	movs	r1, #5
    UINT8_TO_BSTREAM(p, L2C_SIG_CMD_REJ);         /* command code */
   10772:	2201      	movs	r2, #1
    UINT8_TO_BSTREAM(p, identifier);              /* identifier */
   10774:	7246      	strb	r6, [r0, #9]
  UINT16_TO_BSTREAM(p, handle);
   10776:	7005      	strb	r5, [r0, #0]
  UINT16_TO_BSTREAM(p, (len + L2C_HDR_LEN));
   10778:	7084      	strb	r4, [r0, #2]
  UINT16_TO_BSTREAM(p, cid);
   1077a:	7181      	strb	r1, [r0, #6]
    UINT8_TO_BSTREAM(p, L2C_SIG_CMD_REJ);         /* command code */
   1077c:	7202      	strb	r2, [r0, #8]
}
   1077e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  /* Send to HCI */
  HciSendAclData(pPacket);
   10782:	f001 bcfb 	b.w	1217c <HciSendAclData>
}
   10786:	bd70      	pop	{r4, r5, r6, pc}

00010788 <l2cMsgAlloc>:
  return WsfMsgDataAlloc(len, HCI_TX_DATA_TAILROOM);
   10788:	2100      	movs	r1, #0
   1078a:	f003 b839 	b.w	13800 <WsfMsgDataAlloc>
   1078e:	bf00      	nop

00010790 <L2cInit>:
  l2cCb.attDataCback = l2cDefaultDataCback;
   10790:	4b0b      	ldr	r3, [pc, #44]	; (107c0 <L2cInit+0x30>)
   10792:	490c      	ldr	r1, [pc, #48]	; (107c4 <L2cInit+0x34>)
  l2cCb.attCtrlCback = l2cDefaultCtrlCback;
   10794:	4a0c      	ldr	r2, [pc, #48]	; (107c8 <L2cInit+0x38>)
  l2cCb.l2cDataCidCback = l2cDefaultDataCidCback;
   10796:	480d      	ldr	r0, [pc, #52]	; (107cc <L2cInit+0x3c>)
  l2cCb.identifier = 1;
   10798:	f04f 0c01 	mov.w	ip, #1
{
   1079c:	b410      	push	{r4}
  l2cCb.l2cSignalingCback = l2cRxSignalingPkt;
   1079e:	4c0c      	ldr	r4, [pc, #48]	; (107d0 <L2cInit+0x40>)
  l2cCb.identifier = 1;
   107a0:	f883 c024 	strb.w	ip, [r3, #36]	; 0x24
  l2cCb.smpDataCback = l2cDefaultDataCback;
   107a4:	e9c3 1100 	strd	r1, r1, [r3]
  l2cCb.l2cSignalingCback = l2cRxSignalingPkt;
   107a8:	609c      	str	r4, [r3, #8]
  l2cCb.l2cDataCidCback = l2cDefaultDataCidCback;
   107aa:	6218      	str	r0, [r3, #32]
  HciAclRegister(l2cHciAclCback, l2cHciFlowCback);
   107ac:	4909      	ldr	r1, [pc, #36]	; (107d4 <L2cInit+0x44>)
   107ae:	480a      	ldr	r0, [pc, #40]	; (107d8 <L2cInit+0x48>)
}
   107b0:	f85d 4b04 	ldr.w	r4, [sp], #4
  l2cCb.l2cCocCtrlCback = l2cDefaultCtrlCback;
   107b4:	615a      	str	r2, [r3, #20]
  l2cCb.smpCtrlCback = l2cDefaultCtrlCback;
   107b6:	e9c3 2203 	strd	r2, r2, [r3, #12]
  HciAclRegister(l2cHciAclCback, l2cHciFlowCback);
   107ba:	f7ff bea7 	b.w	1050c <HciAclRegister>
   107be:	bf00      	nop
   107c0:	10004c6c 	.word	0x10004c6c
   107c4:	0001067d 	.word	0x0001067d
   107c8:	000105d5 	.word	0x000105d5
   107cc:	00010671 	.word	0x00010671
   107d0:	00010615 	.word	0x00010615
   107d4:	000105d9 	.word	0x000105d9
   107d8:	00010689 	.word	0x00010689

000107dc <L2cRegister>:
    l2cCb.attDataCback = dataCback;
   107dc:	4b03      	ldr	r3, [pc, #12]	; (107ec <L2cRegister+0x10>)
  if (cid == L2C_CID_ATT)
   107de:	2804      	cmp	r0, #4
    l2cCb.attDataCback = dataCback;
   107e0:	bf07      	ittee	eq
   107e2:	6019      	streq	r1, [r3, #0]
    l2cCb.attCtrlCback = ctrlCback;
   107e4:	60da      	streq	r2, [r3, #12]
    l2cCb.smpDataCback = dataCback;
   107e6:	6059      	strne	r1, [r3, #4]
    l2cCb.smpCtrlCback = ctrlCback;
   107e8:	611a      	strne	r2, [r3, #16]
}
   107ea:	4770      	bx	lr
   107ec:	10004c6c 	.word	0x10004c6c

000107f0 <L2cDataReq>:
  UINT16_TO_BSTREAM(p, handle);
   107f0:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   107f4:	f883 c001 	strb.w	ip, [r3, #1]
  UINT16_TO_BSTREAM(p, (len + L2C_HDR_LEN));
   107f8:	fa5f fc82 	uxtb.w	ip, r2
  UINT16_TO_BSTREAM(p, handle);
   107fc:	7019      	strb	r1, [r3, #0]
  UINT16_TO_BSTREAM(p, (len + L2C_HDR_LEN));
   107fe:	f10c 0104 	add.w	r1, ip, #4
   10802:	7099      	strb	r1, [r3, #2]
   10804:	1d11      	adds	r1, r2, #4
   10806:	1209      	asrs	r1, r1, #8
  UINT16_TO_BSTREAM(p, len);
   10808:	0a12      	lsrs	r2, r2, #8
  UINT16_TO_BSTREAM(p, (len + L2C_HDR_LEN));
   1080a:	70d9      	strb	r1, [r3, #3]
  UINT16_TO_BSTREAM(p, cid);
   1080c:	0a01      	lsrs	r1, r0, #8
   1080e:	7198      	strb	r0, [r3, #6]
  UINT16_TO_BSTREAM(p, len);
   10810:	f883 c004 	strb.w	ip, [r3, #4]
   10814:	715a      	strb	r2, [r3, #5]
  UINT16_TO_BSTREAM(p, cid);
   10816:	71d9      	strb	r1, [r3, #7]
  HciSendAclData(pPacket);
   10818:	4618      	mov	r0, r3
   1081a:	f001 bcaf 	b.w	1217c <HciSendAclData>
   1081e:	bf00      	nop

00010820 <l2cSlaveRxSignalingPkt>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void l2cSlaveRxSignalingPkt(uint16_t handle, uint16_t l2cLen, uint8_t *pPacket)
{
   10820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t  result;

  /* parse code, len, and identifier */
  pPacket += L2C_PAYLOAD_START;
  BSTREAM_TO_UINT8(code, pPacket);
  BSTREAM_TO_UINT8(id, pPacket);
   10822:	7a54      	ldrb	r4, [r2, #9]
  BSTREAM_TO_UINT16(len, pPacket);

  /* verify signal identifier is valid */
  if (id == L2C_SIGNAL_ID_INVALID)
   10824:	b38c      	cbz	r4, 1088a <l2cSlaveRxSignalingPkt+0x6a>
   10826:	4605      	mov	r5, r0
  /* verify signal identifier is expected
   * verify signaling length vs. l2c length
   * verify this is a conn param update rsp or command reject
   * verify parameter length
   */
  if ((id == l2cSlaveCb.signId[handle])   &&
   10828:	482a      	ldr	r0, [pc, #168]	; (108d4 <l2cSlaveRxSignalingPkt+0xb4>)
  BSTREAM_TO_UINT16(len, pPacket);
   1082a:	f892 e00b 	ldrb.w	lr, [r2, #11]
   1082e:	f892 c00a 	ldrb.w	ip, [r2, #10]
  BSTREAM_TO_UINT8(code, pPacket);
   10832:	7a16      	ldrb	r6, [r2, #8]
   10834:	460b      	mov	r3, r1
  if ((id == l2cSlaveCb.signId[handle])   &&
   10836:	1941      	adds	r1, r0, r5
  BSTREAM_TO_UINT16(len, pPacket);
   10838:	eb0c 2c0e 	add.w	ip, ip, lr, lsl #8
  if ((id == l2cSlaveCb.signId[handle])   &&
   1083c:	f891 e014 	ldrb.w	lr, [r1, #20]
   10840:	45a6      	cmp	lr, r4
  BSTREAM_TO_UINT16(len, pPacket);
   10842:	fa1f fc8c 	uxth.w	ip, ip
  if ((id == l2cSlaveCb.signId[handle])   &&
   10846:	d119      	bne.n	1087c <l2cSlaveRxSignalingPkt+0x5c>
      (l2cLen == (len + L2C_SIG_HDR_LEN)) &&
   10848:	f10c 0e04 	add.w	lr, ip, #4
  if ((id == l2cSlaveCb.signId[handle])   &&
   1084c:	4573      	cmp	r3, lr
   1084e:	d115      	bne.n	1087c <l2cSlaveRxSignalingPkt+0x5c>
      (l2cLen == (len + L2C_SIG_HDR_LEN)) &&
   10850:	2e13      	cmp	r6, #19
   10852:	d01b      	beq.n	1088c <l2cSlaveRxSignalingPkt+0x6c>
      (((code == L2C_SIG_CONN_UPDATE_RSP) && (len == L2C_SIG_CONN_UPDATE_RSP_LEN)) ||
   10854:	2e01      	cmp	r6, #1
   10856:	d11c      	bne.n	10892 <l2cSlaveRxSignalingPkt+0x72>
  {
    /* get last sent code */
    uint8_t lastCode = l2cSlaveCb.lastCode[handle];

    /* clear pending signal id */
    l2cSlaveCb.signId[handle] = L2C_SIGNAL_ID_INVALID;
   10858:	2300      	movs	r3, #0
   1085a:	750b      	strb	r3, [r1, #20]
    uint8_t lastCode = l2cSlaveCb.lastCode[handle];
   1085c:	7c4f      	ldrb	r7, [r1, #17]

    /* parse result parameter */
    BSTREAM_TO_UINT16(result, pPacket);
   1085e:	7b14      	ldrb	r4, [r2, #12]
   10860:	7b51      	ldrb	r1, [r2, #13]
   10862:	eb04 2401 	add.w	r4, r4, r1, lsl #8

    /* stop req timer */
    WsfTimerStop(&l2cSlaveCb.reqTimer);
   10866:	f003 fab5 	bl	13dd4 <WsfTimerStop>

    if (lastCode == L2C_SIG_CONN_UPDATE_REQ)
   1086a:	2f12      	cmp	r7, #18
    BSTREAM_TO_UINT16(result, pPacket);
   1086c:	b2a4      	uxth	r4, r4
    if (lastCode == L2C_SIG_CONN_UPDATE_REQ)
   1086e:	d02f      	beq.n	108d0 <l2cSlaveRxSignalingPkt+0xb0>
      DmL2cConnUpdateCnf(handle, result);
    }
    else
    {
      /* send to DM */
      DmL2cCmdRejInd(handle, result);
   10870:	4621      	mov	r1, r4
   10872:	4628      	mov	r0, r5
      l2cSendCmdReject(handle, id, L2C_REJ_NOT_UNDERSTOOD);
    }

    return;
  }
}
   10874:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      DmL2cCmdRejInd(handle, result);
   10878:	f008 b8ee 	b.w	18a58 <DmL2cCmdRejInd>
    L2C_TRACE_WARN3("invalid msg code:%d len:%d l2cLen:%d", code, len, l2cLen);
   1087c:	4816      	ldr	r0, [pc, #88]	; (108d8 <l2cSlaveRxSignalingPkt+0xb8>)
   1087e:	4662      	mov	r2, ip
   10880:	4631      	mov	r1, r6
   10882:	f003 fb47 	bl	13f14 <WsfTrace>
    if (code != L2C_SIG_CMD_REJ)
   10886:	2e01      	cmp	r6, #1
   10888:	d109      	bne.n	1089e <l2cSlaveRxSignalingPkt+0x7e>
}
   1088a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (((code == L2C_SIG_CONN_UPDATE_RSP) && (len == L2C_SIG_CONN_UPDATE_RSP_LEN)) ||
   1088c:	f1bc 0f02 	cmp.w	ip, #2
   10890:	d00c      	beq.n	108ac <l2cSlaveRxSignalingPkt+0x8c>
    L2C_TRACE_WARN3("invalid msg code:%d len:%d l2cLen:%d", code, len, l2cLen);
   10892:	4811      	ldr	r0, [pc, #68]	; (108d8 <l2cSlaveRxSignalingPkt+0xb8>)
   10894:	4673      	mov	r3, lr
   10896:	4662      	mov	r2, ip
   10898:	4631      	mov	r1, r6
   1089a:	f003 fb3b 	bl	13f14 <WsfTrace>
      l2cSendCmdReject(handle, id, L2C_REJ_NOT_UNDERSTOOD);
   1089e:	4621      	mov	r1, r4
   108a0:	4628      	mov	r0, r5
   108a2:	2200      	movs	r2, #0
}
   108a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      l2cSendCmdReject(handle, id, L2C_REJ_NOT_UNDERSTOOD);
   108a8:	f7ff bf4a 	b.w	10740 <l2cSendCmdReject>
    l2cSlaveCb.signId[handle] = L2C_SIGNAL_ID_INVALID;
   108ac:	2300      	movs	r3, #0
   108ae:	750b      	strb	r3, [r1, #20]
    uint8_t lastCode = l2cSlaveCb.lastCode[handle];
   108b0:	7c4e      	ldrb	r6, [r1, #17]
    BSTREAM_TO_UINT16(result, pPacket);
   108b2:	7b14      	ldrb	r4, [r2, #12]
   108b4:	7b51      	ldrb	r1, [r2, #13]
   108b6:	eb04 2401 	add.w	r4, r4, r1, lsl #8
    WsfTimerStop(&l2cSlaveCb.reqTimer);
   108ba:	f003 fa8b 	bl	13dd4 <WsfTimerStop>
    if (lastCode == L2C_SIG_CONN_UPDATE_REQ)
   108be:	2e12      	cmp	r6, #18
    BSTREAM_TO_UINT16(result, pPacket);
   108c0:	b2a4      	uxth	r4, r4
    if (lastCode == L2C_SIG_CONN_UPDATE_REQ)
   108c2:	d1d5      	bne.n	10870 <l2cSlaveRxSignalingPkt+0x50>
      DmL2cConnUpdateCnf(handle, result);
   108c4:	4621      	mov	r1, r4
   108c6:	4628      	mov	r0, r5
}
   108c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      DmL2cConnUpdateCnf(handle, result);
   108cc:	f008 b8b4 	b.w	18a38 <DmL2cConnUpdateCnf>
        result = L2C_CONN_PARAM_REJECTED;
   108d0:	4634      	mov	r4, r6
   108d2:	e7f7      	b.n	108c4 <l2cSlaveRxSignalingPkt+0xa4>
   108d4:	10004c94 	.word	0x10004c94
   108d8:	000240a0 	.word	0x000240a0

000108dc <L2cSlaveInit>:
{
  l2cCb.slaveRxSignalingPkt = l2cSlaveRxSignalingPkt;

  for (uint8_t i = 0; i < DM_CONN_MAX; i++)
  {
    l2cSlaveCb.signId[i] = L2C_SIGNAL_ID_INVALID;
   108dc:	4b03      	ldr	r3, [pc, #12]	; (108ec <L2cSlaveInit+0x10>)
  l2cCb.slaveRxSignalingPkt = l2cSlaveRxSignalingPkt;
   108de:	4904      	ldr	r1, [pc, #16]	; (108f0 <L2cSlaveInit+0x14>)
   108e0:	4804      	ldr	r0, [pc, #16]	; (108f4 <L2cSlaveInit+0x18>)
   108e2:	61c8      	str	r0, [r1, #28]
    l2cSlaveCb.signId[i] = L2C_SIGNAL_ID_INVALID;
   108e4:	2200      	movs	r2, #0
   108e6:	829a      	strh	r2, [r3, #20]
   108e8:	759a      	strb	r2, [r3, #22]
  }
}
   108ea:	4770      	bx	lr
   108ec:	10004c94 	.word	0x10004c94
   108f0:	10004c6c 	.word	0x10004c6c
   108f4:	00010821 	.word	0x00010821

000108f8 <L2cDmConnUpdateReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void L2cDmConnUpdateReq(uint16_t handle, hciConnSpec_t *pConnSpec)
{
   108f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t *pPacket;
  uint8_t *p;

  /* record code */
  l2cSlaveCb.lastCode[handle] = L2C_SIG_CONN_UPDATE_REQ;
   108fc:	4e20      	ldr	r6, [pc, #128]	; (10980 <L2cDmConnUpdateReq+0x88>)
   108fe:	1837      	adds	r7, r6, r0
   10900:	f04f 0812 	mov.w	r8, #18
{
   10904:	4605      	mov	r5, r0
   10906:	460c      	mov	r4, r1

  /* Start signaling request timer and store handle */
  WsfTimerStartSec(&l2cSlaveCb.reqTimer, L2C_SIG_REQ_TIMEOUT);
   10908:	4630      	mov	r0, r6
  l2cSlaveCb.lastCode[handle] = L2C_SIG_CONN_UPDATE_REQ;
   1090a:	f887 8011 	strb.w	r8, [r7, #17]
  WsfTimerStartSec(&l2cSlaveCb.reqTimer, L2C_SIG_REQ_TIMEOUT);
   1090e:	211e      	movs	r1, #30
   10910:	f003 f9da 	bl	13cc8 <WsfTimerStartSec>
  l2cSlaveCb.reqTimer.msg.param = handle;

  /* allocate msg buffer */
  if ((pPacket = l2cMsgAlloc(L2C_SIG_PKT_BASE_LEN + L2C_SIG_CONN_UPDATE_REQ_LEN)) != NULL)
   10914:	2014      	movs	r0, #20
  l2cSlaveCb.reqTimer.msg.param = handle;
   10916:	8135      	strh	r5, [r6, #8]
  if ((pPacket = l2cMsgAlloc(L2C_SIG_PKT_BASE_LEN + L2C_SIG_CONN_UPDATE_REQ_LEN)) != NULL)
   10918:	f7ff ff36 	bl	10788 <l2cMsgAlloc>
   1091c:	b368      	cbz	r0, 1097a <L2cDmConnUpdateReq+0x82>
  {
    /* build message */
    p = pPacket + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, L2C_SIG_CONN_UPDATE_REQ);       /* command code */
    UINT8_TO_BSTREAM(p, l2cCb.identifier);              /* identifier */
   1091e:	4919      	ldr	r1, [pc, #100]	; (10984 <L2cDmConnUpdateReq+0x8c>)
    UINT8_TO_BSTREAM(p, L2C_SIG_CONN_UPDATE_REQ);       /* command code */
   10920:	f880 8008 	strb.w	r8, [r0, #8]
    UINT8_TO_BSTREAM(p, l2cCb.identifier);              /* identifier */
   10924:	f891 2024 	ldrb.w	r2, [r1, #36]	; 0x24
   10928:	7242      	strb	r2, [r0, #9]
    l2cSlaveCb.signId[handle] = l2cCb.identifier;
    l2cCb.identifier = L2C_NEXT_ID(l2cCb.identifier);
   1092a:	2aff      	cmp	r2, #255	; 0xff
    l2cSlaveCb.signId[handle] = l2cCb.identifier;
   1092c:	753a      	strb	r2, [r7, #20]
    l2cCb.identifier = L2C_NEXT_ID(l2cCb.identifier);
   1092e:	bf1a      	itte	ne
   10930:	3201      	addne	r2, #1
   10932:	b2d2      	uxtbne	r2, r2
   10934:	2201      	moveq	r2, #1
   10936:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
    UINT16_TO_BSTREAM(p, L2C_SIG_CONN_UPDATE_REQ_LEN);  /* parameter length */
   1093a:	2108      	movs	r1, #8
   1093c:	2200      	movs	r2, #0
   1093e:	7281      	strb	r1, [r0, #10]
   10940:	72c2      	strb	r2, [r0, #11]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMin);   /* interval min */
   10942:	8822      	ldrh	r2, [r4, #0]
   10944:	7302      	strb	r2, [r0, #12]
   10946:	8822      	ldrh	r2, [r4, #0]
   10948:	40ca      	lsrs	r2, r1
   1094a:	7342      	strb	r2, [r0, #13]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMax);   /* interval max */
   1094c:	8862      	ldrh	r2, [r4, #2]
   1094e:	7382      	strb	r2, [r0, #14]
   10950:	8862      	ldrh	r2, [r4, #2]
   10952:	0a12      	lsrs	r2, r2, #8
   10954:	73c2      	strb	r2, [r0, #15]
    UINT16_TO_BSTREAM(p, pConnSpec->connLatency);       /* slave latency */
   10956:	88a2      	ldrh	r2, [r4, #4]
   10958:	7402      	strb	r2, [r0, #16]
   1095a:	88a2      	ldrh	r2, [r4, #4]
   1095c:	0a12      	lsrs	r2, r2, #8
   1095e:	7442      	strb	r2, [r0, #17]
    UINT16_TO_BSTREAM(p, pConnSpec->supTimeout);        /* timeout multiplier */
   10960:	88e2      	ldrh	r2, [r4, #6]
   10962:	7482      	strb	r2, [r0, #18]
   10964:	4603      	mov	r3, r0
   10966:	88e0      	ldrh	r0, [r4, #6]
   10968:	0a00      	lsrs	r0, r0, #8
   1096a:	74d8      	strb	r0, [r3, #19]

    /* send packet */
    L2cDataReq(L2C_CID_LE_SIGNALING, handle, (L2C_SIG_HDR_LEN + L2C_SIG_CONN_UPDATE_REQ_LEN), pPacket);
   1096c:	4629      	mov	r1, r5
   1096e:	220c      	movs	r2, #12
  }
}
   10970:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    L2cDataReq(L2C_CID_LE_SIGNALING, handle, (L2C_SIG_HDR_LEN + L2C_SIG_CONN_UPDATE_REQ_LEN), pPacket);
   10974:	2005      	movs	r0, #5
   10976:	f7ff bf3b 	b.w	107f0 <L2cDataReq>
}
   1097a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1097e:	bf00      	nop
   10980:	10004c94 	.word	0x10004c94
   10984:	10004c6c 	.word	0x10004c6c

00010988 <L2cSlaveHandlerInit>:
 *  \return None.
 */
/*************************************************************************************************/
void L2cSlaveHandlerInit(wsfHandlerId_t handlerId)
{
  l2cSlaveCb.reqTimer.msg.event = L2C_MSG_REQ_TIMEOUT;
   10988:	4b02      	ldr	r3, [pc, #8]	; (10994 <L2cSlaveHandlerInit+0xc>)
   1098a:	2201      	movs	r2, #1
   1098c:	729a      	strb	r2, [r3, #10]
  l2cSlaveCb.reqTimer.handlerId = handlerId;
   1098e:	7318      	strb	r0, [r3, #12]
  l2cSlaveCb.handlerId = handlerId;
   10990:	7418      	strb	r0, [r3, #16]
}
   10992:	4770      	bx	lr
   10994:	10004c94 	.word	0x10004c94

00010998 <L2cSlaveHandler>:
 */
/*************************************************************************************************/
void L2cSlaveHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
  /* Handle message */
  if (pMsg != NULL)
   10998:	b129      	cbz	r1, 109a6 <L2cSlaveHandler+0xe>
{
   1099a:	b538      	push	{r3, r4, r5, lr}
  {
    WSF_ASSERT(pMsg->event > 0 && pMsg->event <= L2C_MSG_TYPE_MAX);

    /* handle slave signaling request timeout */
    if (pMsg->event == L2C_MSG_REQ_TIMEOUT)
   1099c:	788d      	ldrb	r5, [r1, #2]
   1099e:	2d01      	cmp	r5, #1
   109a0:	460c      	mov	r4, r1
   109a2:	d001      	beq.n	109a8 <L2cSlaveHandler+0x10>
  /* Handle events */
  else if (event)
  {

  }
}
   109a4:	bd38      	pop	{r3, r4, r5, pc}
   109a6:	4770      	bx	lr
  L2C_TRACE_WARN0("conn update req timeout");
   109a8:	4804      	ldr	r0, [pc, #16]	; (109bc <L2cSlaveHandler+0x24>)
   109aa:	f003 fab3 	bl	13f14 <WsfTrace>
  DmL2cConnUpdateCnf(pMsg->param, L2C_CONN_PARAM_REJECTED);
   109ae:	8820      	ldrh	r0, [r4, #0]
   109b0:	4629      	mov	r1, r5
}
   109b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  DmL2cConnUpdateCnf(pMsg->param, L2C_CONN_PARAM_REJECTED);
   109b6:	f008 b83f 	b.w	18a38 <DmL2cConnUpdateCnf>
   109ba:	bf00      	nop
   109bc:	000240c8 	.word	0x000240c8

000109c0 <GapDiscover>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void GapDiscover(dmConnId_t connId, uint16_t *pHdlList)
{
   109c0:	b510      	push	{r4, lr}
  AppDiscFindService(connId, ATT_16_UUID_LEN, (uint8_t *) attGapSvcUuid,
   109c2:	4c05      	ldr	r4, [pc, #20]	; (109d8 <GapDiscover+0x18>)
   109c4:	4a05      	ldr	r2, [pc, #20]	; (109dc <GapDiscover+0x1c>)
{
   109c6:	b082      	sub	sp, #8
  AppDiscFindService(connId, ATT_16_UUID_LEN, (uint8_t *) attGapSvcUuid,
   109c8:	2302      	movs	r3, #2
   109ca:	e9cd 4100 	strd	r4, r1, [sp]
   109ce:	4619      	mov	r1, r3
   109d0:	f00d fabe 	bl	1df50 <AppDiscFindService>
                     GAP_HDL_LIST_LEN, (attcDiscChar_t **) gapDiscCharList, pHdlList);
}
   109d4:	b002      	add	sp, #8
   109d6:	bd10      	pop	{r4, pc}
   109d8:	10002b70 	.word	0x10002b70
   109dc:	00023ed8 	.word	0x00023ed8

000109e0 <GapValueUpdate>:
uint8_t GapValueUpdate(uint16_t *pHdlList, attEvt_t *pMsg)
{
  uint8_t status = ATT_SUCCESS;

  /* Central Address Resolution */
  if (pMsg->handle == pHdlList[GAP_CAR_HDL_IDX])
   109e0:	8803      	ldrh	r3, [r0, #0]
   109e2:	894a      	ldrh	r2, [r1, #10]
   109e4:	429a      	cmp	r2, r3
{
   109e6:	b510      	push	{r4, lr}
  if (pMsg->handle == pHdlList[GAP_CAR_HDL_IDX])
   109e8:	d002      	beq.n	109f0 <GapValueUpdate+0x10>
    }
  }
  /* handle not found in list */
  else
  {
    status = ATT_ERR_NOT_FOUND;
   109ea:	240a      	movs	r4, #10
  }

  return status;
}
   109ec:	4620      	mov	r0, r4
   109ee:	bd10      	pop	{r4, pc}
    if ((dbHdl = AppDbGetHdl((dmConnId_t)pMsg->hdr.param)) != APP_DB_HDL_NONE)
   109f0:	7808      	ldrb	r0, [r1, #0]
   109f2:	460c      	mov	r4, r1
   109f4:	f00d fc24 	bl	1e240 <AppDbGetHdl>
   109f8:	b178      	cbz	r0, 10a1a <GapValueUpdate+0x3a>
      if ((pMsg->pValue[0] == FALSE) || (pMsg->pValue[0] == TRUE))
   109fa:	6863      	ldr	r3, [r4, #4]
   109fc:	7819      	ldrb	r1, [r3, #0]
   109fe:	2901      	cmp	r1, #1
   10a00:	d905      	bls.n	10a0e <GapValueUpdate+0x2e>
        status = ATT_ERR_RANGE;
   10a02:	24ff      	movs	r4, #255	; 0xff
      APP_TRACE_INFO1("Central address resolution: %d", pMsg->pValue[0]);
   10a04:	4806      	ldr	r0, [pc, #24]	; (10a20 <GapValueUpdate+0x40>)
   10a06:	f003 fa85 	bl	13f14 <WsfTrace>
}
   10a0a:	4620      	mov	r0, r4
   10a0c:	bd10      	pop	{r4, pc}
        AppDbSetPeerAddrRes(dbHdl, pMsg->pValue[0]);
   10a0e:	f003 ff2b 	bl	14868 <AppDbSetPeerAddrRes>
      APP_TRACE_INFO1("Central address resolution: %d", pMsg->pValue[0]);
   10a12:	6863      	ldr	r3, [r4, #4]
  uint8_t status = ATT_SUCCESS;
   10a14:	2400      	movs	r4, #0
      APP_TRACE_INFO1("Central address resolution: %d", pMsg->pValue[0]);
   10a16:	7819      	ldrb	r1, [r3, #0]
   10a18:	e7f4      	b.n	10a04 <GapValueUpdate+0x24>
  uint8_t status = ATT_SUCCESS;
   10a1a:	4604      	mov	r4, r0
   10a1c:	e7e6      	b.n	109ec <GapValueUpdate+0xc>
   10a1e:	bf00      	nop
   10a20:	000240e0 	.word	0x000240e0

00010a24 <hciCmdInit>:
  /* initialize numCmdPkts for special case of first command */
  hciCmdCb.numCmdPkts = 1;

  /* initialize timer */
  hciCmdCb.cmdTimer.msg.event = HCI_MSG_CMD_TIMEOUT;
  hciCmdCb.cmdTimer.handlerId = hciCb.handlerId;
   10a24:	4805      	ldr	r0, [pc, #20]	; (10a3c <hciCmdInit+0x18>)
  WSF_QUEUE_INIT(&hciCmdCb.cmdQueue);
   10a26:	4b06      	ldr	r3, [pc, #24]	; (10a40 <hciCmdInit+0x1c>)
  hciCmdCb.cmdTimer.handlerId = hciCb.handlerId;
   10a28:	7e00      	ldrb	r0, [r0, #24]
   10a2a:	7318      	strb	r0, [r3, #12]
  hciCmdCb.numCmdPkts = 1;
   10a2c:	2201      	movs	r2, #1
  WSF_QUEUE_INIT(&hciCmdCb.cmdQueue);
   10a2e:	2100      	movs	r1, #0
   10a30:	e9c3 1104 	strd	r1, r1, [r3, #16]
  hciCmdCb.numCmdPkts = 1;
   10a34:	769a      	strb	r2, [r3, #26]
  hciCmdCb.cmdTimer.msg.event = HCI_MSG_CMD_TIMEOUT;
   10a36:	729a      	strb	r2, [r3, #10]
}
   10a38:	4770      	bx	lr
   10a3a:	bf00      	nop
   10a3c:	10004c50 	.word	0x10004c50
   10a40:	10004cac 	.word	0x10004cac

00010a44 <hciCmdTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdTimeout(wsfMsgHdr_t *pMsg)
{
   10a44:	b508      	push	{r3, lr}
  HCI_TRACE_INFO1("hciCmdTimeout, opcode=0x%x", hciCmdCb.cmdOpcode);
  // When it times out, pretty much we have to
  // reset/reboot controller and initialize HCI
  // layer and SPI transport layer again.

  HciDrvRadioShutdown();
   10a46:	f006 fb3d 	bl	170c4 <HciDrvRadioShutdown>
  HciDrvRadioBoot(0);
   10a4a:	2000      	movs	r0, #0
   10a4c:	f006 fa46 	bl	16edc <HciDrvRadioBoot>
  DmDevReset();
}
   10a50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  DmDevReset();
   10a54:	f008 b8fe 	b.w	18c54 <DmDevReset>

00010a58 <hciCmdRecvCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdRecvCmpl(uint8_t numCmdPkts)
{
   10a58:	b530      	push	{r4, r5, lr}
  /* stop the command timeout timer */
  WsfTimerStop(&hciCmdCb.cmdTimer);
   10a5a:	4c10      	ldr	r4, [pc, #64]	; (10a9c <hciCmdRecvCmpl+0x44>)
{
   10a5c:	b083      	sub	sp, #12
  WsfTimerStop(&hciCmdCb.cmdTimer);
   10a5e:	4620      	mov	r0, r4
   10a60:	f003 f9b8 	bl	13dd4 <WsfTimerStop>
  /*
   * Set the number of commands that can be sent to the controller.  Setting this
   * to 1 rather than incrementing by numCmdPkts allows only one command at a time to
   * be sent to the controller and simplifies the code.
   */
  hciCmdCb.numCmdPkts = 1;
   10a64:	2301      	movs	r3, #1
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   10a66:	f10d 0107 	add.w	r1, sp, #7
   10a6a:	f104 0010 	add.w	r0, r4, #16
  hciCmdCb.numCmdPkts = 1;
   10a6e:	76a3      	strb	r3, [r4, #26]
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   10a70:	f002 fef4 	bl	1385c <WsfMsgDeq>
   10a74:	b178      	cbz	r0, 10a96 <hciCmdRecvCmpl+0x3e>
      hciCmdCb.numCmdPkts--;
   10a76:	7ea3      	ldrb	r3, [r4, #26]
   10a78:	3b01      	subs	r3, #1
   10a7a:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10a7c:	7842      	ldrb	r2, [r0, #1]
   10a7e:	7803      	ldrb	r3, [r0, #0]
   10a80:	4605      	mov	r5, r0
   10a82:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10a86:	4620      	mov	r0, r4
   10a88:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10a8a:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10a8c:	f003 f91c 	bl	13cc8 <WsfTimerStartSec>
      hciTrSendCmd(p);
   10a90:	4628      	mov	r0, r5
   10a92:	f002 fd03 	bl	1349c <hciTrSendCmd>

  /* send the next queued command */
  hciCmdSend(NULL);
}
   10a96:	b003      	add	sp, #12
   10a98:	bd30      	pop	{r4, r5, pc}
   10a9a:	bf00      	nop
   10a9c:	10004cac 	.word	0x10004cac

00010aa0 <HciDisconnectCmd>:
 *
 *  \brief  HCI disconnect command.
 */
/*************************************************************************************************/
void HciDisconnectCmd(uint16_t handle, uint8_t reason)
{
   10aa0:	b570      	push	{r4, r5, r6, lr}
   10aa2:	4604      	mov	r4, r0
   10aa4:	b082      	sub	sp, #8
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10aa6:	2006      	movs	r0, #6
{
   10aa8:	460e      	mov	r6, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10aaa:	f002 feb3 	bl	13814 <WsfMsgAlloc>
   10aae:	b190      	cbz	r0, 10ad6 <HciDisconnectCmd+0x36>
    UINT16_TO_BSTREAM(p, opcode);
   10ab0:	2306      	movs	r3, #6
   10ab2:	7003      	strb	r3, [r0, #0]
   10ab4:	2304      	movs	r3, #4
   10ab6:	7043      	strb	r3, [r0, #1]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10ab8:	4d14      	ldr	r5, [pc, #80]	; (10b0c <HciDisconnectCmd+0x6c>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_DISCONNECT, HCI_LEN_DISCONNECT)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
   10aba:	70c4      	strb	r4, [r0, #3]
    UINT8_TO_BSTREAM(p, len);
   10abc:	2303      	movs	r3, #3
   10abe:	7083      	strb	r3, [r0, #2]
    UINT16_TO_BSTREAM(p, handle);
   10ac0:	0a23      	lsrs	r3, r4, #8
   10ac2:	7103      	strb	r3, [r0, #4]
    UINT8_TO_BSTREAM(p, reason);
   10ac4:	4602      	mov	r2, r0
   10ac6:	7146      	strb	r6, [r0, #5]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10ac8:	2100      	movs	r1, #0
   10aca:	f105 0010 	add.w	r0, r5, #16
   10ace:	f002 febf 	bl	13850 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   10ad2:	7eab      	ldrb	r3, [r5, #26]
   10ad4:	b90b      	cbnz	r3, 10ada <HciDisconnectCmd+0x3a>
    hciCmdSend(pBuf);
  }
}
   10ad6:	b002      	add	sp, #8
   10ad8:	bd70      	pop	{r4, r5, r6, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   10ada:	f10d 0107 	add.w	r1, sp, #7
   10ade:	f105 0010 	add.w	r0, r5, #16
   10ae2:	f002 febb 	bl	1385c <WsfMsgDeq>
   10ae6:	4604      	mov	r4, r0
   10ae8:	2800      	cmp	r0, #0
   10aea:	d0f4      	beq.n	10ad6 <HciDisconnectCmd+0x36>
      hciCmdCb.numCmdPkts--;
   10aec:	7eab      	ldrb	r3, [r5, #26]
   10aee:	3b01      	subs	r3, #1
   10af0:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10af2:	7842      	ldrb	r2, [r0, #1]
   10af4:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10af6:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10af8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10afc:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10afe:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10b00:	f003 f8e2 	bl	13cc8 <WsfTimerStartSec>
      hciTrSendCmd(p);
   10b04:	4620      	mov	r0, r4
   10b06:	f002 fcc9 	bl	1349c <hciTrSendCmd>
}
   10b0a:	e7e4      	b.n	10ad6 <HciDisconnectCmd+0x36>
   10b0c:	10004cac 	.word	0x10004cac

00010b10 <HciLeAddDevWhiteListCmd>:
 *
 *  \brief  HCI LE add device white list command.
 */
/*************************************************************************************************/
void HciLeAddDevWhiteListCmd(uint8_t addrType, uint8_t *pAddr)
{
   10b10:	b5f0      	push	{r4, r5, r6, r7, lr}
   10b12:	4607      	mov	r7, r0
   10b14:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10b16:	200a      	movs	r0, #10
{
   10b18:	460d      	mov	r5, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10b1a:	f002 fe7b 	bl	13814 <WsfMsgAlloc>
   10b1e:	b1a0      	cbz	r0, 10b4a <HciLeAddDevWhiteListCmd+0x3a>
    UINT16_TO_BSTREAM(p, opcode);
   10b20:	2311      	movs	r3, #17
   10b22:	7003      	strb	r3, [r0, #0]
   10b24:	4604      	mov	r4, r0
   10b26:	2320      	movs	r3, #32
   10b28:	7043      	strb	r3, [r0, #1]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10b2a:	4e15      	ldr	r6, [pc, #84]	; (10b80 <HciLeAddDevWhiteListCmd+0x70>)
    UINT8_TO_BSTREAM(p, len);
   10b2c:	2307      	movs	r3, #7
   10b2e:	7083      	strb	r3, [r0, #2]

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ADD_DEV_WHITE_LIST, HCI_LEN_LE_ADD_DEV_WHITE_LIST)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT8_TO_BSTREAM(p, addrType);
    BDA_TO_BSTREAM(p, pAddr);
   10b30:	4629      	mov	r1, r5
   10b32:	3004      	adds	r0, #4
    UINT8_TO_BSTREAM(p, addrType);
   10b34:	70e7      	strb	r7, [r4, #3]
    BDA_TO_BSTREAM(p, pAddr);
   10b36:	f00b fc0d 	bl	1c354 <BdaCpy>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10b3a:	4622      	mov	r2, r4
   10b3c:	2100      	movs	r1, #0
   10b3e:	f106 0010 	add.w	r0, r6, #16
   10b42:	f002 fe85 	bl	13850 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   10b46:	7eb3      	ldrb	r3, [r6, #26]
   10b48:	b90b      	cbnz	r3, 10b4e <HciLeAddDevWhiteListCmd+0x3e>
    hciCmdSend(pBuf);
  }
}
   10b4a:	b003      	add	sp, #12
   10b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   10b4e:	f10d 0107 	add.w	r1, sp, #7
   10b52:	f106 0010 	add.w	r0, r6, #16
   10b56:	f002 fe81 	bl	1385c <WsfMsgDeq>
   10b5a:	4604      	mov	r4, r0
   10b5c:	2800      	cmp	r0, #0
   10b5e:	d0f4      	beq.n	10b4a <HciLeAddDevWhiteListCmd+0x3a>
      hciCmdCb.numCmdPkts--;
   10b60:	7eb3      	ldrb	r3, [r6, #26]
   10b62:	3b01      	subs	r3, #1
   10b64:	76b3      	strb	r3, [r6, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10b66:	7842      	ldrb	r2, [r0, #1]
   10b68:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10b6a:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10b6c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10b70:	4630      	mov	r0, r6
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10b72:	8333      	strh	r3, [r6, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10b74:	f003 f8a8 	bl	13cc8 <WsfTimerStartSec>
      hciTrSendCmd(p);
   10b78:	4620      	mov	r0, r4
   10b7a:	f002 fc8f 	bl	1349c <hciTrSendCmd>
}
   10b7e:	e7e4      	b.n	10b4a <HciLeAddDevWhiteListCmd+0x3a>
   10b80:	10004cac 	.word	0x10004cac

00010b84 <HciLeClearWhiteListCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeClearWhiteListCmd(void)
{
   10b84:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10b86:	2003      	movs	r0, #3
{
   10b88:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10b8a:	f002 fe43 	bl	13814 <WsfMsgAlloc>
   10b8e:	b160      	cbz	r0, 10baa <HciLeClearWhiteListCmd+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10b90:	4c13      	ldr	r4, [pc, #76]	; (10be0 <HciLeClearWhiteListCmd+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
   10b92:	f242 0310 	movw	r3, #8208	; 0x2010
    UINT8_TO_BSTREAM(p, len);
   10b96:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
   10b98:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   10b9a:	4602      	mov	r2, r0
   10b9c:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10b9e:	f104 0010 	add.w	r0, r4, #16
   10ba2:	f002 fe55 	bl	13850 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   10ba6:	7ea3      	ldrb	r3, [r4, #26]
   10ba8:	b90b      	cbnz	r3, 10bae <HciLeClearWhiteListCmd+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CLEAR_WHITE_LIST, HCI_LEN_LE_CLEAR_WHITE_LIST)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
   10baa:	b003      	add	sp, #12
   10bac:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   10bae:	f10d 0107 	add.w	r1, sp, #7
   10bb2:	f104 0010 	add.w	r0, r4, #16
   10bb6:	f002 fe51 	bl	1385c <WsfMsgDeq>
   10bba:	4605      	mov	r5, r0
   10bbc:	2800      	cmp	r0, #0
   10bbe:	d0f4      	beq.n	10baa <HciLeClearWhiteListCmd+0x26>
      hciCmdCb.numCmdPkts--;
   10bc0:	7ea3      	ldrb	r3, [r4, #26]
   10bc2:	3b01      	subs	r3, #1
   10bc4:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10bc6:	7842      	ldrb	r2, [r0, #1]
   10bc8:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10bca:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10bcc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10bd0:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10bd2:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10bd4:	f003 f878 	bl	13cc8 <WsfTimerStartSec>
      hciTrSendCmd(p);
   10bd8:	4628      	mov	r0, r5
   10bda:	f002 fc5f 	bl	1349c <hciTrSendCmd>
}
   10bde:	e7e4      	b.n	10baa <HciLeClearWhiteListCmd+0x26>
   10be0:	10004cac 	.word	0x10004cac

00010be4 <HciLeConnUpdateCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeConnUpdateCmd(uint16_t handle, hciConnSpec_t *pConnSpec)
{
   10be4:	b530      	push	{r4, r5, lr}
   10be6:	4605      	mov	r5, r0
   10be8:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10bea:	2011      	movs	r0, #17
{
   10bec:	460c      	mov	r4, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10bee:	f002 fe11 	bl	13814 <WsfMsgAlloc>
   10bf2:	b378      	cbz	r0, 10c54 <HciLeConnUpdateCmd+0x70>
    UINT16_TO_BSTREAM(p, opcode);
   10bf4:	2113      	movs	r1, #19
   10bf6:	2320      	movs	r3, #32
   10bf8:	7001      	strb	r1, [r0, #0]
   10bfa:	7043      	strb	r3, [r0, #1]
    UINT8_TO_BSTREAM(p, len);
   10bfc:	210e      	movs	r1, #14
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CONN_UPDATE, HCI_LEN_LE_CONN_UPDATE)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
   10bfe:	0a2b      	lsrs	r3, r5, #8
    UINT8_TO_BSTREAM(p, len);
   10c00:	7081      	strb	r1, [r0, #2]
    UINT16_TO_BSTREAM(p, handle);
   10c02:	70c5      	strb	r5, [r0, #3]
   10c04:	7103      	strb	r3, [r0, #4]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMin);
   10c06:	8823      	ldrh	r3, [r4, #0]
   10c08:	7143      	strb	r3, [r0, #5]
   10c0a:	8823      	ldrh	r3, [r4, #0]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10c0c:	4d1f      	ldr	r5, [pc, #124]	; (10c8c <HciLeConnUpdateCmd+0xa8>)
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMin);
   10c0e:	0a1b      	lsrs	r3, r3, #8
   10c10:	7183      	strb	r3, [r0, #6]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMax);
   10c12:	8863      	ldrh	r3, [r4, #2]
   10c14:	71c3      	strb	r3, [r0, #7]
   10c16:	8863      	ldrh	r3, [r4, #2]
   10c18:	0a1b      	lsrs	r3, r3, #8
   10c1a:	7203      	strb	r3, [r0, #8]
    UINT16_TO_BSTREAM(p, pConnSpec->connLatency);
   10c1c:	88a3      	ldrh	r3, [r4, #4]
   10c1e:	7243      	strb	r3, [r0, #9]
   10c20:	88a3      	ldrh	r3, [r4, #4]
   10c22:	0a1b      	lsrs	r3, r3, #8
   10c24:	7283      	strb	r3, [r0, #10]
    UINT16_TO_BSTREAM(p, pConnSpec->supTimeout);
   10c26:	88e3      	ldrh	r3, [r4, #6]
   10c28:	72c3      	strb	r3, [r0, #11]
   10c2a:	88e3      	ldrh	r3, [r4, #6]
   10c2c:	0a1b      	lsrs	r3, r3, #8
   10c2e:	7303      	strb	r3, [r0, #12]
    UINT16_TO_BSTREAM(p, pConnSpec->minCeLen);
   10c30:	8923      	ldrh	r3, [r4, #8]
   10c32:	7343      	strb	r3, [r0, #13]
   10c34:	8923      	ldrh	r3, [r4, #8]
   10c36:	0a1b      	lsrs	r3, r3, #8
   10c38:	7383      	strb	r3, [r0, #14]
    UINT16_TO_BSTREAM(p, pConnSpec->maxCeLen);
   10c3a:	8963      	ldrh	r3, [r4, #10]
   10c3c:	73c3      	strb	r3, [r0, #15]
   10c3e:	8963      	ldrh	r3, [r4, #10]
   10c40:	0a1b      	lsrs	r3, r3, #8
   10c42:	7403      	strb	r3, [r0, #16]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10c44:	4602      	mov	r2, r0
   10c46:	2100      	movs	r1, #0
   10c48:	f105 0010 	add.w	r0, r5, #16
   10c4c:	f002 fe00 	bl	13850 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   10c50:	7eab      	ldrb	r3, [r5, #26]
   10c52:	b90b      	cbnz	r3, 10c58 <HciLeConnUpdateCmd+0x74>
    hciCmdSend(pBuf);
  }
}
   10c54:	b003      	add	sp, #12
   10c56:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   10c58:	f10d 0107 	add.w	r1, sp, #7
   10c5c:	f105 0010 	add.w	r0, r5, #16
   10c60:	f002 fdfc 	bl	1385c <WsfMsgDeq>
   10c64:	4604      	mov	r4, r0
   10c66:	2800      	cmp	r0, #0
   10c68:	d0f4      	beq.n	10c54 <HciLeConnUpdateCmd+0x70>
      hciCmdCb.numCmdPkts--;
   10c6a:	7eab      	ldrb	r3, [r5, #26]
   10c6c:	3b01      	subs	r3, #1
   10c6e:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10c70:	7842      	ldrb	r2, [r0, #1]
   10c72:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10c74:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10c76:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10c7a:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10c7c:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10c7e:	f003 f823 	bl	13cc8 <WsfTimerStartSec>
      hciTrSendCmd(p);
   10c82:	4620      	mov	r0, r4
   10c84:	f002 fc0a 	bl	1349c <hciTrSendCmd>
}
   10c88:	e7e4      	b.n	10c54 <HciLeConnUpdateCmd+0x70>
   10c8a:	bf00      	nop
   10c8c:	10004cac 	.word	0x10004cac

00010c90 <HciLeRemoteConnParamReqReply>:
*  \return None.
*/
/*************************************************************************************************/
void HciLeRemoteConnParamReqReply(uint16_t handle, uint16_t intervalMin, uint16_t intervalMax, uint16_t latency,
                                  uint16_t timeout, uint16_t minCeLen, uint16_t maxCeLen)
{
   10c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10c94:	b082      	sub	sp, #8
   10c96:	4607      	mov	r7, r0
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10c98:	2011      	movs	r0, #17
{
   10c9a:	f8bd a028 	ldrh.w	sl, [sp, #40]	; 0x28
   10c9e:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   10ca2:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
   10ca6:	460e      	mov	r6, r1
   10ca8:	4615      	mov	r5, r2
   10caa:	461c      	mov	r4, r3
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10cac:	f002 fdb2 	bl	13814 <WsfMsgAlloc>
   10cb0:	b360      	cbz	r0, 10d0c <HciLeRemoteConnParamReqReply+0x7c>
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
    UINT16_TO_BSTREAM(p, intervalMin);
    UINT16_TO_BSTREAM(p, intervalMax);
    UINT16_TO_BSTREAM(p, latency);
    UINT16_TO_BSTREAM(p, timeout);
   10cb2:	ea4f 231a 	mov.w	r3, sl, lsr #8
    UINT16_TO_BSTREAM(p, latency);
   10cb6:	7244      	strb	r4, [r0, #9]
    UINT16_TO_BSTREAM(p, timeout);
   10cb8:	7303      	strb	r3, [r0, #12]
   10cba:	4684      	mov	ip, r0
    UINT16_TO_BSTREAM(p, latency);
   10cbc:	0a24      	lsrs	r4, r4, #8
    UINT16_TO_BSTREAM(p, minCeLen);
    UINT16_TO_BSTREAM(p, maxCeLen);
   10cbe:	ea4f 2318 	mov.w	r3, r8, lsr #8
    UINT16_TO_BSTREAM(p, handle);
   10cc2:	70c7      	strb	r7, [r0, #3]
    UINT16_TO_BSTREAM(p, intervalMin);
   10cc4:	7146      	strb	r6, [r0, #5]
    UINT16_TO_BSTREAM(p, intervalMax);
   10cc6:	71c5      	strb	r5, [r0, #7]
    UINT16_TO_BSTREAM(p, latency);
   10cc8:	7284      	strb	r4, [r0, #10]
    UINT16_TO_BSTREAM(p, maxCeLen);
   10cca:	7403      	strb	r3, [r0, #16]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10ccc:	4c1d      	ldr	r4, [pc, #116]	; (10d44 <HciLeRemoteConnParamReqReply+0xb4>)
    UINT16_TO_BSTREAM(p, timeout);
   10cce:	f880 a00b 	strb.w	sl, [r0, #11]
    UINT16_TO_BSTREAM(p, opcode);
   10cd2:	2320      	movs	r3, #32
    UINT16_TO_BSTREAM(p, minCeLen);
   10cd4:	ea4f 2219 	mov.w	r2, r9, lsr #8
    UINT16_TO_BSTREAM(p, handle);
   10cd8:	0a3f      	lsrs	r7, r7, #8
    UINT16_TO_BSTREAM(p, intervalMin);
   10cda:	0a36      	lsrs	r6, r6, #8
    UINT16_TO_BSTREAM(p, intervalMax);
   10cdc:	0a2d      	lsrs	r5, r5, #8
    UINT16_TO_BSTREAM(p, minCeLen);
   10cde:	7382      	strb	r2, [r0, #14]
    UINT16_TO_BSTREAM(p, handle);
   10ce0:	7107      	strb	r7, [r0, #4]
    UINT16_TO_BSTREAM(p, intervalMin);
   10ce2:	7186      	strb	r6, [r0, #6]
    UINT16_TO_BSTREAM(p, intervalMax);
   10ce4:	7205      	strb	r5, [r0, #8]
    UINT16_TO_BSTREAM(p, minCeLen);
   10ce6:	f880 900d 	strb.w	r9, [r0, #13]
    UINT16_TO_BSTREAM(p, maxCeLen);
   10cea:	f880 800f 	strb.w	r8, [r0, #15]
    UINT16_TO_BSTREAM(p, opcode);
   10cee:	f88c 3000 	strb.w	r3, [ip]
   10cf2:	f88c 3001 	strb.w	r3, [ip, #1]
    UINT8_TO_BSTREAM(p, len);
   10cf6:	230e      	movs	r3, #14
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10cf8:	4602      	mov	r2, r0
    UINT8_TO_BSTREAM(p, len);
   10cfa:	f88c 3002 	strb.w	r3, [ip, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10cfe:	2100      	movs	r1, #0
   10d00:	f104 0010 	add.w	r0, r4, #16
   10d04:	f002 fda4 	bl	13850 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   10d08:	7ea3      	ldrb	r3, [r4, #26]
   10d0a:	b913      	cbnz	r3, 10d12 <HciLeRemoteConnParamReqReply+0x82>
    hciCmdSend(pBuf);
  }
}
   10d0c:	b002      	add	sp, #8
   10d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   10d12:	f10d 0107 	add.w	r1, sp, #7
   10d16:	f104 0010 	add.w	r0, r4, #16
   10d1a:	f002 fd9f 	bl	1385c <WsfMsgDeq>
   10d1e:	4605      	mov	r5, r0
   10d20:	2800      	cmp	r0, #0
   10d22:	d0f3      	beq.n	10d0c <HciLeRemoteConnParamReqReply+0x7c>
      hciCmdCb.numCmdPkts--;
   10d24:	7ea3      	ldrb	r3, [r4, #26]
   10d26:	3b01      	subs	r3, #1
   10d28:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10d2a:	7842      	ldrb	r2, [r0, #1]
   10d2c:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10d2e:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10d30:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10d34:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10d36:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10d38:	f002 ffc6 	bl	13cc8 <WsfTimerStartSec>
      hciTrSendCmd(p);
   10d3c:	4628      	mov	r0, r5
   10d3e:	f002 fbad 	bl	1349c <hciTrSendCmd>
}
   10d42:	e7e3      	b.n	10d0c <HciLeRemoteConnParamReqReply+0x7c>
   10d44:	10004cac 	.word	0x10004cac

00010d48 <HciLeRemoteConnParamReqNegReply>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeRemoteConnParamReqNegReply(uint16_t handle, uint8_t reason)
{
   10d48:	b570      	push	{r4, r5, r6, lr}
   10d4a:	4604      	mov	r4, r0
   10d4c:	b082      	sub	sp, #8
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10d4e:	2006      	movs	r0, #6
{
   10d50:	460e      	mov	r6, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10d52:	f002 fd5f 	bl	13814 <WsfMsgAlloc>
   10d56:	b190      	cbz	r0, 10d7e <HciLeRemoteConnParamReqNegReply+0x36>
    UINT16_TO_BSTREAM(p, opcode);
   10d58:	2321      	movs	r3, #33	; 0x21
   10d5a:	7003      	strb	r3, [r0, #0]
   10d5c:	2320      	movs	r3, #32
   10d5e:	7043      	strb	r3, [r0, #1]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10d60:	4d14      	ldr	r5, [pc, #80]	; (10db4 <HciLeRemoteConnParamReqNegReply+0x6c>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REM_CONN_PARAM_NEG_REP, HCI_LEN_LE_REM_CONN_PARAM_NEG_REP)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
   10d62:	70c4      	strb	r4, [r0, #3]
    UINT8_TO_BSTREAM(p, len);
   10d64:	2303      	movs	r3, #3
   10d66:	7083      	strb	r3, [r0, #2]
    UINT16_TO_BSTREAM(p, handle);
   10d68:	0a23      	lsrs	r3, r4, #8
   10d6a:	7103      	strb	r3, [r0, #4]
    UINT8_TO_BSTREAM(p, reason);
   10d6c:	4602      	mov	r2, r0
   10d6e:	7146      	strb	r6, [r0, #5]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10d70:	2100      	movs	r1, #0
   10d72:	f105 0010 	add.w	r0, r5, #16
   10d76:	f002 fd6b 	bl	13850 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   10d7a:	7eab      	ldrb	r3, [r5, #26]
   10d7c:	b90b      	cbnz	r3, 10d82 <HciLeRemoteConnParamReqNegReply+0x3a>
    hciCmdSend(pBuf);
  }
}
   10d7e:	b002      	add	sp, #8
   10d80:	bd70      	pop	{r4, r5, r6, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   10d82:	f10d 0107 	add.w	r1, sp, #7
   10d86:	f105 0010 	add.w	r0, r5, #16
   10d8a:	f002 fd67 	bl	1385c <WsfMsgDeq>
   10d8e:	4604      	mov	r4, r0
   10d90:	2800      	cmp	r0, #0
   10d92:	d0f4      	beq.n	10d7e <HciLeRemoteConnParamReqNegReply+0x36>
      hciCmdCb.numCmdPkts--;
   10d94:	7eab      	ldrb	r3, [r5, #26]
   10d96:	3b01      	subs	r3, #1
   10d98:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10d9a:	7842      	ldrb	r2, [r0, #1]
   10d9c:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10d9e:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10da0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10da4:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10da6:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10da8:	f002 ff8e 	bl	13cc8 <WsfTimerStartSec>
      hciTrSendCmd(p);
   10dac:	4620      	mov	r0, r4
   10dae:	f002 fb75 	bl	1349c <hciTrSendCmd>
}
   10db2:	e7e4      	b.n	10d7e <HciLeRemoteConnParamReqNegReply+0x36>
   10db4:	10004cac 	.word	0x10004cac

00010db8 <HciLeSetDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeSetDataLen(uint16_t handle, uint16_t txOctets, uint16_t txTime)
{
   10db8:	b570      	push	{r4, r5, r6, lr}
   10dba:	4605      	mov	r5, r0
   10dbc:	b082      	sub	sp, #8
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10dbe:	2009      	movs	r0, #9
{
   10dc0:	460e      	mov	r6, r1
   10dc2:	4614      	mov	r4, r2
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10dc4:	f002 fd26 	bl	13814 <WsfMsgAlloc>
   10dc8:	b1b8      	cbz	r0, 10dfa <HciLeSetDataLen+0x42>
    UINT16_TO_BSTREAM(p, opcode);
   10dca:	2322      	movs	r3, #34	; 0x22
   10dcc:	7003      	strb	r3, [r0, #0]
   10dce:	2320      	movs	r3, #32
   10dd0:	7043      	strb	r3, [r0, #1]
    UINT8_TO_BSTREAM(p, len);
   10dd2:	2306      	movs	r3, #6
   10dd4:	7083      	strb	r3, [r0, #2]
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_DATA_LEN, HCI_LEN_LE_SET_DATA_LEN)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
   10dd6:	70c5      	strb	r5, [r0, #3]
   10dd8:	0a2b      	lsrs	r3, r5, #8
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10dda:	4d15      	ldr	r5, [pc, #84]	; (10e30 <HciLeSetDataLen+0x78>)
    UINT16_TO_BSTREAM(p, handle);
   10ddc:	7103      	strb	r3, [r0, #4]
    UINT16_TO_BSTREAM(p, txOctets);
   10dde:	0a32      	lsrs	r2, r6, #8
    UINT16_TO_BSTREAM(p, txTime);
   10de0:	0a23      	lsrs	r3, r4, #8
    UINT16_TO_BSTREAM(p, txOctets);
   10de2:	7182      	strb	r2, [r0, #6]
    UINT16_TO_BSTREAM(p, txTime);
   10de4:	7203      	strb	r3, [r0, #8]
    UINT16_TO_BSTREAM(p, txOctets);
   10de6:	7146      	strb	r6, [r0, #5]
    UINT16_TO_BSTREAM(p, txTime);
   10de8:	71c4      	strb	r4, [r0, #7]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10dea:	4602      	mov	r2, r0
   10dec:	2100      	movs	r1, #0
   10dee:	f105 0010 	add.w	r0, r5, #16
   10df2:	f002 fd2d 	bl	13850 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   10df6:	7eab      	ldrb	r3, [r5, #26]
   10df8:	b90b      	cbnz	r3, 10dfe <HciLeSetDataLen+0x46>
    hciCmdSend(pBuf);
  }
}
   10dfa:	b002      	add	sp, #8
   10dfc:	bd70      	pop	{r4, r5, r6, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   10dfe:	f10d 0107 	add.w	r1, sp, #7
   10e02:	f105 0010 	add.w	r0, r5, #16
   10e06:	f002 fd29 	bl	1385c <WsfMsgDeq>
   10e0a:	4604      	mov	r4, r0
   10e0c:	2800      	cmp	r0, #0
   10e0e:	d0f4      	beq.n	10dfa <HciLeSetDataLen+0x42>
      hciCmdCb.numCmdPkts--;
   10e10:	7eab      	ldrb	r3, [r5, #26]
   10e12:	3b01      	subs	r3, #1
   10e14:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10e16:	7842      	ldrb	r2, [r0, #1]
   10e18:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10e1a:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10e1c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10e20:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10e22:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10e24:	f002 ff50 	bl	13cc8 <WsfTimerStartSec>
      hciTrSendCmd(p);
   10e28:	4620      	mov	r0, r4
   10e2a:	f002 fb37 	bl	1349c <hciTrSendCmd>
}
   10e2e:	e7e4      	b.n	10dfa <HciLeSetDataLen+0x42>
   10e30:	10004cac 	.word	0x10004cac

00010e34 <HciLeWriteDefDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeWriteDefDataLen(uint16_t suggestedMaxTxOctets, uint16_t suggestedMaxTxTime)
{
   10e34:	b570      	push	{r4, r5, r6, lr}
   10e36:	4605      	mov	r5, r0
   10e38:	b082      	sub	sp, #8
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10e3a:	2007      	movs	r0, #7
{
   10e3c:	460c      	mov	r4, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10e3e:	f002 fce9 	bl	13814 <WsfMsgAlloc>
   10e42:	b1a0      	cbz	r0, 10e6e <HciLeWriteDefDataLen+0x3a>
    UINT16_TO_BSTREAM(p, opcode);
   10e44:	2324      	movs	r3, #36	; 0x24
   10e46:	7003      	strb	r3, [r0, #0]
   10e48:	2320      	movs	r3, #32
   10e4a:	7043      	strb	r3, [r0, #1]
    UINT8_TO_BSTREAM(p, len);
   10e4c:	2304      	movs	r3, #4
   10e4e:	7083      	strb	r3, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10e50:	4e14      	ldr	r6, [pc, #80]	; (10ea4 <HciLeWriteDefDataLen+0x70>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_WRITE_DEF_DATA_LEN, HCI_LEN_LE_WRITE_DEF_DATA_LEN)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, suggestedMaxTxOctets);
   10e52:	70c5      	strb	r5, [r0, #3]
   10e54:	0a2b      	lsrs	r3, r5, #8
   10e56:	7103      	strb	r3, [r0, #4]
    UINT16_TO_BSTREAM(p, suggestedMaxTxTime);
   10e58:	0a23      	lsrs	r3, r4, #8
   10e5a:	7183      	strb	r3, [r0, #6]
   10e5c:	4602      	mov	r2, r0
   10e5e:	7144      	strb	r4, [r0, #5]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10e60:	2100      	movs	r1, #0
   10e62:	f106 0010 	add.w	r0, r6, #16
   10e66:	f002 fcf3 	bl	13850 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   10e6a:	7eb3      	ldrb	r3, [r6, #26]
   10e6c:	b90b      	cbnz	r3, 10e72 <HciLeWriteDefDataLen+0x3e>
    hciCmdSend(pBuf);
  }
}
   10e6e:	b002      	add	sp, #8
   10e70:	bd70      	pop	{r4, r5, r6, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   10e72:	f10d 0107 	add.w	r1, sp, #7
   10e76:	f106 0010 	add.w	r0, r6, #16
   10e7a:	f002 fcef 	bl	1385c <WsfMsgDeq>
   10e7e:	4604      	mov	r4, r0
   10e80:	2800      	cmp	r0, #0
   10e82:	d0f4      	beq.n	10e6e <HciLeWriteDefDataLen+0x3a>
      hciCmdCb.numCmdPkts--;
   10e84:	7eb3      	ldrb	r3, [r6, #26]
   10e86:	3b01      	subs	r3, #1
   10e88:	76b3      	strb	r3, [r6, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10e8a:	7842      	ldrb	r2, [r0, #1]
   10e8c:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10e8e:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10e90:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10e94:	4630      	mov	r0, r6
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10e96:	8333      	strh	r3, [r6, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10e98:	f002 ff16 	bl	13cc8 <WsfTimerStartSec>
      hciTrSendCmd(p);
   10e9c:	4620      	mov	r0, r4
   10e9e:	f002 fafd 	bl	1349c <hciTrSendCmd>
}
   10ea2:	e7e4      	b.n	10e6e <HciLeWriteDefDataLen+0x3a>
   10ea4:	10004cac 	.word	0x10004cac

00010ea8 <HciLeReadMaxDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeReadMaxDataLen(void)
{
   10ea8:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10eaa:	2003      	movs	r0, #3
{
   10eac:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10eae:	f002 fcb1 	bl	13814 <WsfMsgAlloc>
   10eb2:	b160      	cbz	r0, 10ece <HciLeReadMaxDataLen+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10eb4:	4c13      	ldr	r4, [pc, #76]	; (10f04 <HciLeReadMaxDataLen+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
   10eb6:	f242 032f 	movw	r3, #8239	; 0x202f
    UINT8_TO_BSTREAM(p, len);
   10eba:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
   10ebc:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   10ebe:	4602      	mov	r2, r0
   10ec0:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10ec2:	f104 0010 	add.w	r0, r4, #16
   10ec6:	f002 fcc3 	bl	13850 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   10eca:	7ea3      	ldrb	r3, [r4, #26]
   10ecc:	b90b      	cbnz	r3, 10ed2 <HciLeReadMaxDataLen+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_MAX_DATA_LEN, HCI_LEN_LE_READ_MAX_DATA_LEN)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
   10ece:	b003      	add	sp, #12
   10ed0:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   10ed2:	f10d 0107 	add.w	r1, sp, #7
   10ed6:	f104 0010 	add.w	r0, r4, #16
   10eda:	f002 fcbf 	bl	1385c <WsfMsgDeq>
   10ede:	4605      	mov	r5, r0
   10ee0:	2800      	cmp	r0, #0
   10ee2:	d0f4      	beq.n	10ece <HciLeReadMaxDataLen+0x26>
      hciCmdCb.numCmdPkts--;
   10ee4:	7ea3      	ldrb	r3, [r4, #26]
   10ee6:	3b01      	subs	r3, #1
   10ee8:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10eea:	7842      	ldrb	r2, [r0, #1]
   10eec:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10eee:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10ef0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10ef4:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10ef6:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10ef8:	f002 fee6 	bl	13cc8 <WsfTimerStartSec>
      hciTrSendCmd(p);
   10efc:	4628      	mov	r0, r5
   10efe:	f002 facd 	bl	1349c <hciTrSendCmd>
}
   10f02:	e7e4      	b.n	10ece <HciLeReadMaxDataLen+0x26>
   10f04:	10004cac 	.word	0x10004cac

00010f08 <HciLeEncryptCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeEncryptCmd(uint8_t *pKey, uint8_t *pData)
{
   10f08:	b530      	push	{r4, r5, lr}
   10f0a:	4605      	mov	r5, r0
   10f0c:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10f0e:	2023      	movs	r0, #35	; 0x23
{
   10f10:	460c      	mov	r4, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10f12:	f002 fc7f 	bl	13814 <WsfMsgAlloc>
   10f16:	b328      	cbz	r0, 10f64 <HciLeEncryptCmd+0x5c>
    UINT16_TO_BSTREAM(p, opcode);
   10f18:	f242 0117 	movw	r1, #8215	; 0x2017
    UINT8_TO_BSTREAM(p, len);
   10f1c:	2320      	movs	r3, #32
    UINT16_TO_BSTREAM(p, opcode);
   10f1e:	8001      	strh	r1, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   10f20:	7083      	strb	r3, [r0, #2]
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ENCRYPT, HCI_LEN_LE_ENCRYPT)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    memcpy(p, pKey, HCI_KEY_LEN);
   10f22:	4602      	mov	r2, r0
   10f24:	6869      	ldr	r1, [r5, #4]
   10f26:	6828      	ldr	r0, [r5, #0]
   10f28:	68ab      	ldr	r3, [r5, #8]
   10f2a:	68ed      	ldr	r5, [r5, #12]
   10f2c:	f8c2 500f 	str.w	r5, [r2, #15]
   10f30:	f8c2 0003 	str.w	r0, [r2, #3]
   10f34:	f8c2 1007 	str.w	r1, [r2, #7]
   10f38:	f8c2 300b 	str.w	r3, [r2, #11]
    p += HCI_KEY_LEN;
    memcpy(p, pData, HCI_ENCRYPT_DATA_LEN);
   10f3c:	6820      	ldr	r0, [r4, #0]
   10f3e:	6861      	ldr	r1, [r4, #4]
   10f40:	68a3      	ldr	r3, [r4, #8]
   10f42:	68e4      	ldr	r4, [r4, #12]
   10f44:	f8c2 401f 	str.w	r4, [r2, #31]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10f48:	4c14      	ldr	r4, [pc, #80]	; (10f9c <HciLeEncryptCmd+0x94>)
    memcpy(p, pData, HCI_ENCRYPT_DATA_LEN);
   10f4a:	f8c2 0013 	str.w	r0, [r2, #19]
   10f4e:	f8c2 1017 	str.w	r1, [r2, #23]
   10f52:	f8c2 301b 	str.w	r3, [r2, #27]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10f56:	2100      	movs	r1, #0
   10f58:	f104 0010 	add.w	r0, r4, #16
   10f5c:	f002 fc78 	bl	13850 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   10f60:	7ea3      	ldrb	r3, [r4, #26]
   10f62:	b90b      	cbnz	r3, 10f68 <HciLeEncryptCmd+0x60>
    hciCmdSend(pBuf);
  }
}
   10f64:	b003      	add	sp, #12
   10f66:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   10f68:	f10d 0107 	add.w	r1, sp, #7
   10f6c:	f104 0010 	add.w	r0, r4, #16
   10f70:	f002 fc74 	bl	1385c <WsfMsgDeq>
   10f74:	4605      	mov	r5, r0
   10f76:	2800      	cmp	r0, #0
   10f78:	d0f4      	beq.n	10f64 <HciLeEncryptCmd+0x5c>
      hciCmdCb.numCmdPkts--;
   10f7a:	7ea3      	ldrb	r3, [r4, #26]
   10f7c:	3b01      	subs	r3, #1
   10f7e:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10f80:	7842      	ldrb	r2, [r0, #1]
   10f82:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10f84:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10f86:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10f8a:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10f8c:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10f8e:	f002 fe9b 	bl	13cc8 <WsfTimerStartSec>
      hciTrSendCmd(p);
   10f92:	4628      	mov	r0, r5
   10f94:	f002 fa82 	bl	1349c <hciTrSendCmd>
}
   10f98:	e7e4      	b.n	10f64 <HciLeEncryptCmd+0x5c>
   10f9a:	bf00      	nop
   10f9c:	10004cac 	.word	0x10004cac

00010fa0 <HciLeLtkReqNegReplCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeLtkReqNegReplCmd(uint16_t handle)
{
   10fa0:	b530      	push	{r4, r5, lr}
   10fa2:	4604      	mov	r4, r0
   10fa4:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10fa6:	2005      	movs	r0, #5
   10fa8:	f002 fc34 	bl	13814 <WsfMsgAlloc>
   10fac:	b188      	cbz	r0, 10fd2 <HciLeLtkReqNegReplCmd+0x32>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10fae:	4d16      	ldr	r5, [pc, #88]	; (11008 <HciLeLtkReqNegReplCmd+0x68>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_LTK_REQ_NEG_REPL, HCI_LEN_LE_LTK_REQ_NEG_REPL)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
   10fb0:	70c4      	strb	r4, [r0, #3]
    UINT16_TO_BSTREAM(p, opcode);
   10fb2:	211b      	movs	r1, #27
   10fb4:	2320      	movs	r3, #32
   10fb6:	7001      	strb	r1, [r0, #0]
   10fb8:	7043      	strb	r3, [r0, #1]
    UINT8_TO_BSTREAM(p, len);
   10fba:	2102      	movs	r1, #2
    UINT16_TO_BSTREAM(p, handle);
   10fbc:	0a23      	lsrs	r3, r4, #8
    UINT8_TO_BSTREAM(p, len);
   10fbe:	7081      	strb	r1, [r0, #2]
    UINT16_TO_BSTREAM(p, handle);
   10fc0:	7103      	strb	r3, [r0, #4]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10fc2:	4602      	mov	r2, r0
   10fc4:	2100      	movs	r1, #0
   10fc6:	f105 0010 	add.w	r0, r5, #16
   10fca:	f002 fc41 	bl	13850 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   10fce:	7eab      	ldrb	r3, [r5, #26]
   10fd0:	b90b      	cbnz	r3, 10fd6 <HciLeLtkReqNegReplCmd+0x36>
    hciCmdSend(pBuf);
  }
}
   10fd2:	b003      	add	sp, #12
   10fd4:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   10fd6:	f10d 0107 	add.w	r1, sp, #7
   10fda:	f105 0010 	add.w	r0, r5, #16
   10fde:	f002 fc3d 	bl	1385c <WsfMsgDeq>
   10fe2:	4604      	mov	r4, r0
   10fe4:	2800      	cmp	r0, #0
   10fe6:	d0f4      	beq.n	10fd2 <HciLeLtkReqNegReplCmd+0x32>
      hciCmdCb.numCmdPkts--;
   10fe8:	7eab      	ldrb	r3, [r5, #26]
   10fea:	3b01      	subs	r3, #1
   10fec:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10fee:	7842      	ldrb	r2, [r0, #1]
   10ff0:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10ff2:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10ff4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10ff8:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10ffa:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10ffc:	f002 fe64 	bl	13cc8 <WsfTimerStartSec>
      hciTrSendCmd(p);
   11000:	4620      	mov	r0, r4
   11002:	f002 fa4b 	bl	1349c <hciTrSendCmd>
}
   11006:	e7e4      	b.n	10fd2 <HciLeLtkReqNegReplCmd+0x32>
   11008:	10004cac 	.word	0x10004cac

0001100c <HciLeLtkReqReplCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeLtkReqReplCmd(uint16_t handle, uint8_t *pKey)
{
   1100c:	b530      	push	{r4, r5, lr}
   1100e:	4605      	mov	r5, r0
   11010:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   11012:	2015      	movs	r0, #21
{
   11014:	460c      	mov	r4, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   11016:	f002 fbfd 	bl	13814 <WsfMsgAlloc>
   1101a:	b1e8      	cbz	r0, 11058 <HciLeLtkReqReplCmd+0x4c>
    UINT16_TO_BSTREAM(p, opcode);
   1101c:	211a      	movs	r1, #26
   1101e:	2320      	movs	r3, #32
   11020:	7001      	strb	r1, [r0, #0]
   11022:	7043      	strb	r3, [r0, #1]
    UINT8_TO_BSTREAM(p, len);
   11024:	2112      	movs	r1, #18
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_LTK_REQ_REPL, HCI_LEN_LE_LTK_REQ_REPL)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
   11026:	0a2b      	lsrs	r3, r5, #8
    UINT8_TO_BSTREAM(p, len);
   11028:	7081      	strb	r1, [r0, #2]
    UINT16_TO_BSTREAM(p, handle);
   1102a:	70c5      	strb	r5, [r0, #3]
   1102c:	7103      	strb	r3, [r0, #4]
    memcpy(p, pKey, HCI_KEY_LEN);
   1102e:	4602      	mov	r2, r0
   11030:	6861      	ldr	r1, [r4, #4]
   11032:	6820      	ldr	r0, [r4, #0]
   11034:	68a3      	ldr	r3, [r4, #8]
   11036:	68e4      	ldr	r4, [r4, #12]
   11038:	f8c2 4011 	str.w	r4, [r2, #17]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1103c:	4c14      	ldr	r4, [pc, #80]	; (11090 <HciLeLtkReqReplCmd+0x84>)
    memcpy(p, pKey, HCI_KEY_LEN);
   1103e:	f8c2 0005 	str.w	r0, [r2, #5]
   11042:	f8c2 1009 	str.w	r1, [r2, #9]
   11046:	f8c2 300d 	str.w	r3, [r2, #13]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1104a:	2100      	movs	r1, #0
   1104c:	f104 0010 	add.w	r0, r4, #16
   11050:	f002 fbfe 	bl	13850 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   11054:	7ea3      	ldrb	r3, [r4, #26]
   11056:	b90b      	cbnz	r3, 1105c <HciLeLtkReqReplCmd+0x50>
    hciCmdSend(pBuf);
  }
}
   11058:	b003      	add	sp, #12
   1105a:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   1105c:	f10d 0107 	add.w	r1, sp, #7
   11060:	f104 0010 	add.w	r0, r4, #16
   11064:	f002 fbfa 	bl	1385c <WsfMsgDeq>
   11068:	4605      	mov	r5, r0
   1106a:	2800      	cmp	r0, #0
   1106c:	d0f4      	beq.n	11058 <HciLeLtkReqReplCmd+0x4c>
      hciCmdCb.numCmdPkts--;
   1106e:	7ea3      	ldrb	r3, [r4, #26]
   11070:	3b01      	subs	r3, #1
   11072:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11074:	7842      	ldrb	r2, [r0, #1]
   11076:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11078:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1107a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1107e:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11080:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11082:	f002 fe21 	bl	13cc8 <WsfTimerStartSec>
      hciTrSendCmd(p);
   11086:	4628      	mov	r0, r5
   11088:	f002 fa08 	bl	1349c <hciTrSendCmd>
}
   1108c:	e7e4      	b.n	11058 <HciLeLtkReqReplCmd+0x4c>
   1108e:	bf00      	nop
   11090:	10004cac 	.word	0x10004cac

00011094 <HciLeRandCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeRandCmd(void)
{
   11094:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   11096:	2003      	movs	r0, #3
{
   11098:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   1109a:	f002 fbbb 	bl	13814 <WsfMsgAlloc>
   1109e:	b160      	cbz	r0, 110ba <HciLeRandCmd+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   110a0:	4c13      	ldr	r4, [pc, #76]	; (110f0 <HciLeRandCmd+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
   110a2:	f242 0318 	movw	r3, #8216	; 0x2018
    UINT8_TO_BSTREAM(p, len);
   110a6:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
   110a8:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   110aa:	4602      	mov	r2, r0
   110ac:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   110ae:	f104 0010 	add.w	r0, r4, #16
   110b2:	f002 fbcd 	bl	13850 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   110b6:	7ea3      	ldrb	r3, [r4, #26]
   110b8:	b90b      	cbnz	r3, 110be <HciLeRandCmd+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_RAND, HCI_LEN_LE_RAND)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
   110ba:	b003      	add	sp, #12
   110bc:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   110be:	f10d 0107 	add.w	r1, sp, #7
   110c2:	f104 0010 	add.w	r0, r4, #16
   110c6:	f002 fbc9 	bl	1385c <WsfMsgDeq>
   110ca:	4605      	mov	r5, r0
   110cc:	2800      	cmp	r0, #0
   110ce:	d0f4      	beq.n	110ba <HciLeRandCmd+0x26>
      hciCmdCb.numCmdPkts--;
   110d0:	7ea3      	ldrb	r3, [r4, #26]
   110d2:	3b01      	subs	r3, #1
   110d4:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   110d6:	7842      	ldrb	r2, [r0, #1]
   110d8:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   110da:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   110dc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   110e0:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   110e2:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   110e4:	f002 fdf0 	bl	13cc8 <WsfTimerStartSec>
      hciTrSendCmd(p);
   110e8:	4628      	mov	r0, r5
   110ea:	f002 f9d7 	bl	1349c <hciTrSendCmd>
}
   110ee:	e7e4      	b.n	110ba <HciLeRandCmd+0x26>
   110f0:	10004cac 	.word	0x10004cac

000110f4 <HciLeReadBufSizeCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadBufSizeCmd(void)
{
   110f4:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   110f6:	2003      	movs	r0, #3
{
   110f8:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   110fa:	f002 fb8b 	bl	13814 <WsfMsgAlloc>
   110fe:	b160      	cbz	r0, 1111a <HciLeReadBufSizeCmd+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   11100:	4c13      	ldr	r4, [pc, #76]	; (11150 <HciLeReadBufSizeCmd+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
   11102:	f242 0302 	movw	r3, #8194	; 0x2002
    UINT8_TO_BSTREAM(p, len);
   11106:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
   11108:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   1110a:	4602      	mov	r2, r0
   1110c:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1110e:	f104 0010 	add.w	r0, r4, #16
   11112:	f002 fb9d 	bl	13850 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   11116:	7ea3      	ldrb	r3, [r4, #26]
   11118:	b90b      	cbnz	r3, 1111e <HciLeReadBufSizeCmd+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_BUF_SIZE, HCI_LEN_LE_READ_BUF_SIZE)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
   1111a:	b003      	add	sp, #12
   1111c:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   1111e:	f10d 0107 	add.w	r1, sp, #7
   11122:	f104 0010 	add.w	r0, r4, #16
   11126:	f002 fb99 	bl	1385c <WsfMsgDeq>
   1112a:	4605      	mov	r5, r0
   1112c:	2800      	cmp	r0, #0
   1112e:	d0f4      	beq.n	1111a <HciLeReadBufSizeCmd+0x26>
      hciCmdCb.numCmdPkts--;
   11130:	7ea3      	ldrb	r3, [r4, #26]
   11132:	3b01      	subs	r3, #1
   11134:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11136:	7842      	ldrb	r2, [r0, #1]
   11138:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1113a:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1113c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11140:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11142:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11144:	f002 fdc0 	bl	13cc8 <WsfTimerStartSec>
      hciTrSendCmd(p);
   11148:	4628      	mov	r0, r5
   1114a:	f002 f9a7 	bl	1349c <hciTrSendCmd>
}
   1114e:	e7e4      	b.n	1111a <HciLeReadBufSizeCmd+0x26>
   11150:	10004cac 	.word	0x10004cac

00011154 <HciLeReadLocalSupFeatCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadLocalSupFeatCmd(void)
{
   11154:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   11156:	2003      	movs	r0, #3
{
   11158:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   1115a:	f002 fb5b 	bl	13814 <WsfMsgAlloc>
   1115e:	b160      	cbz	r0, 1117a <HciLeReadLocalSupFeatCmd+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   11160:	4c13      	ldr	r4, [pc, #76]	; (111b0 <HciLeReadLocalSupFeatCmd+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
   11162:	f242 0303 	movw	r3, #8195	; 0x2003
    UINT8_TO_BSTREAM(p, len);
   11166:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
   11168:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   1116a:	4602      	mov	r2, r0
   1116c:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1116e:	f104 0010 	add.w	r0, r4, #16
   11172:	f002 fb6d 	bl	13850 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   11176:	7ea3      	ldrb	r3, [r4, #26]
   11178:	b90b      	cbnz	r3, 1117e <HciLeReadLocalSupFeatCmd+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_LOCAL_SUP_FEAT, HCI_LEN_LE_READ_LOCAL_SUP_FEAT)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
   1117a:	b003      	add	sp, #12
   1117c:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   1117e:	f10d 0107 	add.w	r1, sp, #7
   11182:	f104 0010 	add.w	r0, r4, #16
   11186:	f002 fb69 	bl	1385c <WsfMsgDeq>
   1118a:	4605      	mov	r5, r0
   1118c:	2800      	cmp	r0, #0
   1118e:	d0f4      	beq.n	1117a <HciLeReadLocalSupFeatCmd+0x26>
      hciCmdCb.numCmdPkts--;
   11190:	7ea3      	ldrb	r3, [r4, #26]
   11192:	3b01      	subs	r3, #1
   11194:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11196:	7842      	ldrb	r2, [r0, #1]
   11198:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1119a:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1119c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   111a0:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   111a2:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   111a4:	f002 fd90 	bl	13cc8 <WsfTimerStartSec>
      hciTrSendCmd(p);
   111a8:	4628      	mov	r0, r5
   111aa:	f002 f977 	bl	1349c <hciTrSendCmd>
}
   111ae:	e7e4      	b.n	1117a <HciLeReadLocalSupFeatCmd+0x26>
   111b0:	10004cac 	.word	0x10004cac

000111b4 <HciLeReadRemoteFeatCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadRemoteFeatCmd(uint16_t handle)
{
   111b4:	b530      	push	{r4, r5, lr}
   111b6:	4604      	mov	r4, r0
   111b8:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   111ba:	2005      	movs	r0, #5
   111bc:	f002 fb2a 	bl	13814 <WsfMsgAlloc>
   111c0:	b188      	cbz	r0, 111e6 <HciLeReadRemoteFeatCmd+0x32>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   111c2:	4d16      	ldr	r5, [pc, #88]	; (1121c <HciLeReadRemoteFeatCmd+0x68>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_REMOTE_FEAT, HCI_LEN_LE_READ_REMOTE_FEAT)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
   111c4:	70c4      	strb	r4, [r0, #3]
    UINT16_TO_BSTREAM(p, opcode);
   111c6:	2116      	movs	r1, #22
   111c8:	2320      	movs	r3, #32
   111ca:	7001      	strb	r1, [r0, #0]
   111cc:	7043      	strb	r3, [r0, #1]
    UINT8_TO_BSTREAM(p, len);
   111ce:	2102      	movs	r1, #2
    UINT16_TO_BSTREAM(p, handle);
   111d0:	0a23      	lsrs	r3, r4, #8
    UINT8_TO_BSTREAM(p, len);
   111d2:	7081      	strb	r1, [r0, #2]
    UINT16_TO_BSTREAM(p, handle);
   111d4:	7103      	strb	r3, [r0, #4]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   111d6:	4602      	mov	r2, r0
   111d8:	2100      	movs	r1, #0
   111da:	f105 0010 	add.w	r0, r5, #16
   111de:	f002 fb37 	bl	13850 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   111e2:	7eab      	ldrb	r3, [r5, #26]
   111e4:	b90b      	cbnz	r3, 111ea <HciLeReadRemoteFeatCmd+0x36>
    hciCmdSend(pBuf);
  }
}
   111e6:	b003      	add	sp, #12
   111e8:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   111ea:	f10d 0107 	add.w	r1, sp, #7
   111ee:	f105 0010 	add.w	r0, r5, #16
   111f2:	f002 fb33 	bl	1385c <WsfMsgDeq>
   111f6:	4604      	mov	r4, r0
   111f8:	2800      	cmp	r0, #0
   111fa:	d0f4      	beq.n	111e6 <HciLeReadRemoteFeatCmd+0x32>
      hciCmdCb.numCmdPkts--;
   111fc:	7eab      	ldrb	r3, [r5, #26]
   111fe:	3b01      	subs	r3, #1
   11200:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11202:	7842      	ldrb	r2, [r0, #1]
   11204:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11206:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11208:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1120c:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1120e:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11210:	f002 fd5a 	bl	13cc8 <WsfTimerStartSec>
      hciTrSendCmd(p);
   11214:	4620      	mov	r0, r4
   11216:	f002 f941 	bl	1349c <hciTrSendCmd>
}
   1121a:	e7e4      	b.n	111e6 <HciLeReadRemoteFeatCmd+0x32>
   1121c:	10004cac 	.word	0x10004cac

00011220 <HciLeReadSupStatesCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadSupStatesCmd(void)
{
   11220:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   11222:	2003      	movs	r0, #3
{
   11224:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   11226:	f002 faf5 	bl	13814 <WsfMsgAlloc>
   1122a:	b160      	cbz	r0, 11246 <HciLeReadSupStatesCmd+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1122c:	4c13      	ldr	r4, [pc, #76]	; (1127c <HciLeReadSupStatesCmd+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
   1122e:	f242 031c 	movw	r3, #8220	; 0x201c
    UINT8_TO_BSTREAM(p, len);
   11232:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
   11234:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   11236:	4602      	mov	r2, r0
   11238:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1123a:	f104 0010 	add.w	r0, r4, #16
   1123e:	f002 fb07 	bl	13850 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   11242:	7ea3      	ldrb	r3, [r4, #26]
   11244:	b90b      	cbnz	r3, 1124a <HciLeReadSupStatesCmd+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_SUP_STATES, HCI_LEN_LE_READ_SUP_STATES)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
   11246:	b003      	add	sp, #12
   11248:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   1124a:	f10d 0107 	add.w	r1, sp, #7
   1124e:	f104 0010 	add.w	r0, r4, #16
   11252:	f002 fb03 	bl	1385c <WsfMsgDeq>
   11256:	4605      	mov	r5, r0
   11258:	2800      	cmp	r0, #0
   1125a:	d0f4      	beq.n	11246 <HciLeReadSupStatesCmd+0x26>
      hciCmdCb.numCmdPkts--;
   1125c:	7ea3      	ldrb	r3, [r4, #26]
   1125e:	3b01      	subs	r3, #1
   11260:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11262:	7842      	ldrb	r2, [r0, #1]
   11264:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11266:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11268:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1126c:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1126e:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11270:	f002 fd2a 	bl	13cc8 <WsfTimerStartSec>
      hciTrSendCmd(p);
   11274:	4628      	mov	r0, r5
   11276:	f002 f911 	bl	1349c <hciTrSendCmd>
}
   1127a:	e7e4      	b.n	11246 <HciLeReadSupStatesCmd+0x26>
   1127c:	10004cac 	.word	0x10004cac

00011280 <HciLeReadWhiteListSizeCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadWhiteListSizeCmd(void)
{
   11280:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   11282:	2003      	movs	r0, #3
{
   11284:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   11286:	f002 fac5 	bl	13814 <WsfMsgAlloc>
   1128a:	b160      	cbz	r0, 112a6 <HciLeReadWhiteListSizeCmd+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1128c:	4c13      	ldr	r4, [pc, #76]	; (112dc <HciLeReadWhiteListSizeCmd+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
   1128e:	f242 030f 	movw	r3, #8207	; 0x200f
    UINT8_TO_BSTREAM(p, len);
   11292:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
   11294:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   11296:	4602      	mov	r2, r0
   11298:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1129a:	f104 0010 	add.w	r0, r4, #16
   1129e:	f002 fad7 	bl	13850 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   112a2:	7ea3      	ldrb	r3, [r4, #26]
   112a4:	b90b      	cbnz	r3, 112aa <HciLeReadWhiteListSizeCmd+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_WHITE_LIST_SIZE, HCI_LEN_LE_READ_WHITE_LIST_SIZE)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
   112a6:	b003      	add	sp, #12
   112a8:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   112aa:	f10d 0107 	add.w	r1, sp, #7
   112ae:	f104 0010 	add.w	r0, r4, #16
   112b2:	f002 fad3 	bl	1385c <WsfMsgDeq>
   112b6:	4605      	mov	r5, r0
   112b8:	2800      	cmp	r0, #0
   112ba:	d0f4      	beq.n	112a6 <HciLeReadWhiteListSizeCmd+0x26>
      hciCmdCb.numCmdPkts--;
   112bc:	7ea3      	ldrb	r3, [r4, #26]
   112be:	3b01      	subs	r3, #1
   112c0:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   112c2:	7842      	ldrb	r2, [r0, #1]
   112c4:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   112c6:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   112c8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   112cc:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   112ce:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   112d0:	f002 fcfa 	bl	13cc8 <WsfTimerStartSec>
      hciTrSendCmd(p);
   112d4:	4628      	mov	r0, r5
   112d6:	f002 f8e1 	bl	1349c <hciTrSendCmd>
}
   112da:	e7e4      	b.n	112a6 <HciLeReadWhiteListSizeCmd+0x26>
   112dc:	10004cac 	.word	0x10004cac

000112e0 <HciLeSetAdvEnableCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAdvEnableCmd(uint8_t enable)
{
   112e0:	b570      	push	{r4, r5, r6, lr}
   112e2:	4604      	mov	r4, r0
   112e4:	b082      	sub	sp, #8
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   112e6:	2004      	movs	r0, #4
   112e8:	f002 fa94 	bl	13814 <WsfMsgAlloc>
   112ec:	b178      	cbz	r0, 1130e <HciLeSetAdvEnableCmd+0x2e>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   112ee:	4d15      	ldr	r5, [pc, #84]	; (11344 <HciLeSetAdvEnableCmd+0x64>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_ENABLE, HCI_LEN_LE_SET_ADV_ENABLE)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT8_TO_BSTREAM(p, enable);
   112f0:	70c4      	strb	r4, [r0, #3]
    UINT16_TO_BSTREAM(p, opcode);
   112f2:	2320      	movs	r3, #32
   112f4:	7043      	strb	r3, [r0, #1]
   112f6:	260a      	movs	r6, #10
    UINT8_TO_BSTREAM(p, len);
   112f8:	2301      	movs	r3, #1
   112fa:	7083      	strb	r3, [r0, #2]
   112fc:	4602      	mov	r2, r0
    UINT16_TO_BSTREAM(p, opcode);
   112fe:	7006      	strb	r6, [r0, #0]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   11300:	2100      	movs	r1, #0
   11302:	f105 0010 	add.w	r0, r5, #16
   11306:	f002 faa3 	bl	13850 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   1130a:	7eab      	ldrb	r3, [r5, #26]
   1130c:	b90b      	cbnz	r3, 11312 <HciLeSetAdvEnableCmd+0x32>
    hciCmdSend(pBuf);
  }
}
   1130e:	b002      	add	sp, #8
   11310:	bd70      	pop	{r4, r5, r6, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   11312:	f10d 0107 	add.w	r1, sp, #7
   11316:	f105 0010 	add.w	r0, r5, #16
   1131a:	f002 fa9f 	bl	1385c <WsfMsgDeq>
   1131e:	4604      	mov	r4, r0
   11320:	2800      	cmp	r0, #0
   11322:	d0f4      	beq.n	1130e <HciLeSetAdvEnableCmd+0x2e>
      hciCmdCb.numCmdPkts--;
   11324:	7eab      	ldrb	r3, [r5, #26]
   11326:	3b01      	subs	r3, #1
   11328:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1132a:	7842      	ldrb	r2, [r0, #1]
   1132c:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1132e:	4631      	mov	r1, r6
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11330:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11334:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11336:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11338:	f002 fcc6 	bl	13cc8 <WsfTimerStartSec>
      hciTrSendCmd(p);
   1133c:	4620      	mov	r0, r4
   1133e:	f002 f8ad 	bl	1349c <hciTrSendCmd>
}
   11342:	e7e4      	b.n	1130e <HciLeSetAdvEnableCmd+0x2e>
   11344:	10004cac 	.word	0x10004cac

00011348 <HciLeSetAdvDataCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAdvDataCmd(uint8_t len, uint8_t *pData)
{
   11348:	b570      	push	{r4, r5, r6, lr}
   1134a:	4605      	mov	r5, r0
   1134c:	b082      	sub	sp, #8
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   1134e:	2023      	movs	r0, #35	; 0x23
{
   11350:	460e      	mov	r6, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   11352:	f002 fa5f 	bl	13814 <WsfMsgAlloc>
   11356:	b1d8      	cbz	r0, 11390 <HciLeSetAdvDataCmd+0x48>
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_DATA, HCI_LEN_LE_SET_ADV_DATA)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT8_TO_BSTREAM(p, len);
   11358:	1d03      	adds	r3, r0, #4
    UINT16_TO_BSTREAM(p, opcode);
   1135a:	2220      	movs	r2, #32
   1135c:	2108      	movs	r1, #8
   1135e:	7001      	strb	r1, [r0, #0]
   11360:	7042      	strb	r2, [r0, #1]
    memcpy(p, pData, len);
   11362:	4631      	mov	r1, r6
    UINT8_TO_BSTREAM(p, len);
   11364:	7082      	strb	r2, [r0, #2]
    UINT8_TO_BSTREAM(p, len);
   11366:	4604      	mov	r4, r0
    memcpy(p, pData, len);
   11368:	462a      	mov	r2, r5
    UINT8_TO_BSTREAM(p, len);
   1136a:	70c5      	strb	r5, [r0, #3]
    memcpy(p, pData, len);
   1136c:	4618      	mov	r0, r3
   1136e:	f7fa fec7 	bl	c100 <memcpy>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   11372:	4e15      	ldr	r6, [pc, #84]	; (113c8 <HciLeSetAdvDataCmd+0x80>)
    p += len;
    memset(p, 0, (HCI_ADV_DATA_LEN - len));
   11374:	f1c5 021f 	rsb	r2, r5, #31
   11378:	2100      	movs	r1, #0
   1137a:	4428      	add	r0, r5
   1137c:	f010 f866 	bl	2144c <memset>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   11380:	4622      	mov	r2, r4
   11382:	2100      	movs	r1, #0
   11384:	f106 0010 	add.w	r0, r6, #16
   11388:	f002 fa62 	bl	13850 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   1138c:	7eb3      	ldrb	r3, [r6, #26]
   1138e:	b90b      	cbnz	r3, 11394 <HciLeSetAdvDataCmd+0x4c>
    hciCmdSend(pBuf);
  }
}
   11390:	b002      	add	sp, #8
   11392:	bd70      	pop	{r4, r5, r6, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   11394:	f10d 0107 	add.w	r1, sp, #7
   11398:	f106 0010 	add.w	r0, r6, #16
   1139c:	f002 fa5e 	bl	1385c <WsfMsgDeq>
   113a0:	4604      	mov	r4, r0
   113a2:	2800      	cmp	r0, #0
   113a4:	d0f4      	beq.n	11390 <HciLeSetAdvDataCmd+0x48>
      hciCmdCb.numCmdPkts--;
   113a6:	7eb3      	ldrb	r3, [r6, #26]
   113a8:	3b01      	subs	r3, #1
   113aa:	76b3      	strb	r3, [r6, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   113ac:	7842      	ldrb	r2, [r0, #1]
   113ae:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   113b0:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   113b2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   113b6:	4630      	mov	r0, r6
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   113b8:	8333      	strh	r3, [r6, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   113ba:	f002 fc85 	bl	13cc8 <WsfTimerStartSec>
      hciTrSendCmd(p);
   113be:	4620      	mov	r0, r4
   113c0:	f002 f86c 	bl	1349c <hciTrSendCmd>
}
   113c4:	e7e4      	b.n	11390 <HciLeSetAdvDataCmd+0x48>
   113c6:	bf00      	nop
   113c8:	10004cac 	.word	0x10004cac

000113cc <HciLeSetAdvParamCmd>:
 */
/*************************************************************************************************/
void HciLeSetAdvParamCmd(uint16_t advIntervalMin, uint16_t advIntervalMax, uint8_t advType,
                         uint8_t ownAddrType, uint8_t peerAddrType, uint8_t *pPeerAddr,
                         uint8_t advChanMap, uint8_t advFiltPolicy)
{
   113cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113d0:	b083      	sub	sp, #12
   113d2:	4680      	mov	r8, r0
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   113d4:	2012      	movs	r0, #18
{
   113d6:	f89d b030 	ldrb.w	fp, [sp, #48]	; 0x30
   113da:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   113de:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
   113e2:	460d      	mov	r5, r1
   113e4:	4617      	mov	r7, r2
   113e6:	461e      	mov	r6, r3
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   113e8:	f002 fa14 	bl	13814 <WsfMsgAlloc>
   113ec:	2800      	cmp	r0, #0
   113ee:	d03f      	beq.n	11470 <HciLeSetAdvParamCmd+0xa4>
    UINT16_TO_BSTREAM(p, opcode);
   113f0:	4604      	mov	r4, r0
   113f2:	2306      	movs	r3, #6
  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_PARAM, HCI_LEN_LE_SET_ADV_PARAM)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, advIntervalMin);
    UINT16_TO_BSTREAM(p, advIntervalMax);
    UINT8_TO_BSTREAM(p, advType);
   113f4:	71c7      	strb	r7, [r0, #7]
    UINT8_TO_BSTREAM(p, ownAddrType);
   113f6:	7206      	strb	r6, [r0, #8]
    UINT8_TO_BSTREAM(p, peerAddrType);
   113f8:	f880 b009 	strb.w	fp, [r0, #9]
    UINT16_TO_BSTREAM(p, advIntervalMin);
   113fc:	f880 8003 	strb.w	r8, [r0, #3]
    UINT16_TO_BSTREAM(p, opcode);
   11400:	7023      	strb	r3, [r4, #0]
   11402:	2320      	movs	r3, #32
   11404:	7063      	strb	r3, [r4, #1]
    UINT8_TO_BSTREAM(p, len);
   11406:	230f      	movs	r3, #15
   11408:	70a3      	strb	r3, [r4, #2]
    if (pPeerAddr != NULL)
   1140a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    UINT16_TO_BSTREAM(p, advIntervalMax);
   1140c:	7165      	strb	r5, [r4, #5]
    UINT16_TO_BSTREAM(p, advIntervalMin);
   1140e:	ea4f 2018 	mov.w	r0, r8, lsr #8
    UINT16_TO_BSTREAM(p, advIntervalMax);
   11412:	0a2d      	lsrs	r5, r5, #8
    UINT16_TO_BSTREAM(p, advIntervalMin);
   11414:	7120      	strb	r0, [r4, #4]
    UINT16_TO_BSTREAM(p, advIntervalMax);
   11416:	71a5      	strb	r5, [r4, #6]
    UINT8_TO_BSTREAM(p, peerAddrType);
   11418:	f104 000a 	add.w	r0, r4, #10
    if (pPeerAddr != NULL)
   1141c:	b35b      	cbz	r3, 11476 <HciLeSetAdvParamCmd+0xaa>
    {
      BDA_TO_BSTREAM(p, pPeerAddr);
   1141e:	4619      	mov	r1, r3
   11420:	f00a ff98 	bl	1c354 <BdaCpy>
   11424:	f104 0010 	add.w	r0, r4, #16
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   11428:	4d14      	ldr	r5, [pc, #80]	; (1147c <HciLeSetAdvParamCmd+0xb0>)
    }
    else
    {
      p = BdaClr(p);
    }
    UINT8_TO_BSTREAM(p, advChanMap);
   1142a:	f880 a000 	strb.w	sl, [r0]
    UINT8_TO_BSTREAM(p, advFiltPolicy);
   1142e:	f880 9001 	strb.w	r9, [r0, #1]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   11432:	4622      	mov	r2, r4
   11434:	2100      	movs	r1, #0
   11436:	f105 0010 	add.w	r0, r5, #16
   1143a:	f002 fa09 	bl	13850 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   1143e:	7eab      	ldrb	r3, [r5, #26]
   11440:	b1b3      	cbz	r3, 11470 <HciLeSetAdvParamCmd+0xa4>
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   11442:	f10d 0107 	add.w	r1, sp, #7
   11446:	f105 0010 	add.w	r0, r5, #16
   1144a:	f002 fa07 	bl	1385c <WsfMsgDeq>
   1144e:	4604      	mov	r4, r0
   11450:	b170      	cbz	r0, 11470 <HciLeSetAdvParamCmd+0xa4>
      hciCmdCb.numCmdPkts--;
   11452:	7eab      	ldrb	r3, [r5, #26]
   11454:	3b01      	subs	r3, #1
   11456:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11458:	7842      	ldrb	r2, [r0, #1]
   1145a:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1145c:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1145e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11462:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11464:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11466:	f002 fc2f 	bl	13cc8 <WsfTimerStartSec>
      hciTrSendCmd(p);
   1146a:	4620      	mov	r0, r4
   1146c:	f002 f816 	bl	1349c <hciTrSendCmd>
    hciCmdSend(pBuf);
  }
}
   11470:	b003      	add	sp, #12
   11472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p = BdaClr(p);
   11476:	f00a ff7b 	bl	1c370 <BdaClr>
   1147a:	e7d5      	b.n	11428 <HciLeSetAdvParamCmd+0x5c>
   1147c:	10004cac 	.word	0x10004cac

00011480 <HciLeSetEventMaskCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetEventMaskCmd(uint8_t *pLeEventMask)
{
   11480:	b530      	push	{r4, r5, lr}
   11482:	4604      	mov	r4, r0
   11484:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   11486:	200b      	movs	r0, #11
   11488:	f002 f9c4 	bl	13814 <WsfMsgAlloc>
   1148c:	b198      	cbz	r0, 114b6 <HciLeSetEventMaskCmd+0x36>
    UINT16_TO_BSTREAM(p, opcode);
   1148e:	f242 0101 	movw	r1, #8193	; 0x2001
    UINT8_TO_BSTREAM(p, len);
   11492:	2308      	movs	r3, #8
    UINT16_TO_BSTREAM(p, opcode);
   11494:	8001      	strh	r1, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   11496:	7083      	strb	r3, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   11498:	4d14      	ldr	r5, [pc, #80]	; (114ec <HciLeSetEventMaskCmd+0x6c>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_EVENT_MASK, HCI_LEN_LE_SET_EVENT_MASK)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    memcpy(p, pLeEventMask, HCI_LE_EVT_MASK_LEN);
   1149a:	6823      	ldr	r3, [r4, #0]
   1149c:	6861      	ldr	r1, [r4, #4]
   1149e:	f8c0 1007 	str.w	r1, [r0, #7]
   114a2:	f8c0 3003 	str.w	r3, [r0, #3]
   114a6:	4602      	mov	r2, r0
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   114a8:	2100      	movs	r1, #0
   114aa:	f105 0010 	add.w	r0, r5, #16
   114ae:	f002 f9cf 	bl	13850 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   114b2:	7eab      	ldrb	r3, [r5, #26]
   114b4:	b90b      	cbnz	r3, 114ba <HciLeSetEventMaskCmd+0x3a>
    hciCmdSend(pBuf);
  }
}
   114b6:	b003      	add	sp, #12
   114b8:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   114ba:	f10d 0107 	add.w	r1, sp, #7
   114be:	f105 0010 	add.w	r0, r5, #16
   114c2:	f002 f9cb 	bl	1385c <WsfMsgDeq>
   114c6:	4604      	mov	r4, r0
   114c8:	2800      	cmp	r0, #0
   114ca:	d0f4      	beq.n	114b6 <HciLeSetEventMaskCmd+0x36>
      hciCmdCb.numCmdPkts--;
   114cc:	7eab      	ldrb	r3, [r5, #26]
   114ce:	3b01      	subs	r3, #1
   114d0:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   114d2:	7842      	ldrb	r2, [r0, #1]
   114d4:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   114d6:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   114d8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   114dc:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   114de:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   114e0:	f002 fbf2 	bl	13cc8 <WsfTimerStartSec>
      hciTrSendCmd(p);
   114e4:	4620      	mov	r0, r4
   114e6:	f001 ffd9 	bl	1349c <hciTrSendCmd>
}
   114ea:	e7e4      	b.n	114b6 <HciLeSetEventMaskCmd+0x36>
   114ec:	10004cac 	.word	0x10004cac

000114f0 <HciLeSetScanRespDataCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetScanRespDataCmd(uint8_t len, uint8_t *pData)
{
   114f0:	b570      	push	{r4, r5, r6, lr}
   114f2:	4605      	mov	r5, r0
   114f4:	b082      	sub	sp, #8
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   114f6:	2023      	movs	r0, #35	; 0x23
{
   114f8:	460e      	mov	r6, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   114fa:	f002 f98b 	bl	13814 <WsfMsgAlloc>
   114fe:	b1d8      	cbz	r0, 11538 <HciLeSetScanRespDataCmd+0x48>
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_SCAN_RESP_DATA, HCI_LEN_LE_SET_SCAN_RESP_DATA)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT8_TO_BSTREAM(p, len);
   11500:	1d03      	adds	r3, r0, #4
    UINT16_TO_BSTREAM(p, opcode);
   11502:	2220      	movs	r2, #32
   11504:	2109      	movs	r1, #9
   11506:	7001      	strb	r1, [r0, #0]
   11508:	7042      	strb	r2, [r0, #1]
    memcpy(p, pData, len);
   1150a:	4631      	mov	r1, r6
    UINT8_TO_BSTREAM(p, len);
   1150c:	7082      	strb	r2, [r0, #2]
    UINT8_TO_BSTREAM(p, len);
   1150e:	4604      	mov	r4, r0
    memcpy(p, pData, len);
   11510:	462a      	mov	r2, r5
    UINT8_TO_BSTREAM(p, len);
   11512:	70c5      	strb	r5, [r0, #3]
    memcpy(p, pData, len);
   11514:	4618      	mov	r0, r3
   11516:	f7fa fdf3 	bl	c100 <memcpy>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1151a:	4e15      	ldr	r6, [pc, #84]	; (11570 <HciLeSetScanRespDataCmd+0x80>)
    p += len;
    memset(p, 0, (HCI_SCAN_DATA_LEN - len));
   1151c:	f1c5 021f 	rsb	r2, r5, #31
   11520:	2100      	movs	r1, #0
   11522:	4428      	add	r0, r5
   11524:	f00f ff92 	bl	2144c <memset>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   11528:	4622      	mov	r2, r4
   1152a:	2100      	movs	r1, #0
   1152c:	f106 0010 	add.w	r0, r6, #16
   11530:	f002 f98e 	bl	13850 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   11534:	7eb3      	ldrb	r3, [r6, #26]
   11536:	b90b      	cbnz	r3, 1153c <HciLeSetScanRespDataCmd+0x4c>
    hciCmdSend(pBuf);
  }
}
   11538:	b002      	add	sp, #8
   1153a:	bd70      	pop	{r4, r5, r6, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   1153c:	f10d 0107 	add.w	r1, sp, #7
   11540:	f106 0010 	add.w	r0, r6, #16
   11544:	f002 f98a 	bl	1385c <WsfMsgDeq>
   11548:	4604      	mov	r4, r0
   1154a:	2800      	cmp	r0, #0
   1154c:	d0f4      	beq.n	11538 <HciLeSetScanRespDataCmd+0x48>
      hciCmdCb.numCmdPkts--;
   1154e:	7eb3      	ldrb	r3, [r6, #26]
   11550:	3b01      	subs	r3, #1
   11552:	76b3      	strb	r3, [r6, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11554:	7842      	ldrb	r2, [r0, #1]
   11556:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11558:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1155a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1155e:	4630      	mov	r0, r6
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11560:	8333      	strh	r3, [r6, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11562:	f002 fbb1 	bl	13cc8 <WsfTimerStartSec>
      hciTrSendCmd(p);
   11566:	4620      	mov	r0, r4
   11568:	f001 ff98 	bl	1349c <hciTrSendCmd>
}
   1156c:	e7e4      	b.n	11538 <HciLeSetScanRespDataCmd+0x48>
   1156e:	bf00      	nop
   11570:	10004cac 	.word	0x10004cac

00011574 <HciLeStartEncryptionCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeStartEncryptionCmd(uint16_t handle, uint8_t *pRand, uint16_t diversifier, uint8_t *pKey)
{
   11574:	b5f0      	push	{r4, r5, r6, r7, lr}
   11576:	4604      	mov	r4, r0
   11578:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   1157a:	201f      	movs	r0, #31
{
   1157c:	460d      	mov	r5, r1
   1157e:	4617      	mov	r7, r2
   11580:	461e      	mov	r6, r3
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   11582:	f002 f947 	bl	13814 <WsfMsgAlloc>
   11586:	b330      	cbz	r0, 115d6 <HciLeStartEncryptionCmd+0x62>
    UINT16_TO_BSTREAM(p, opcode);
   11588:	2319      	movs	r3, #25
   1158a:	7003      	strb	r3, [r0, #0]
   1158c:	2320      	movs	r3, #32
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_START_ENCRYPTION, HCI_LEN_LE_START_ENCRYPTION)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
   1158e:	70c4      	strb	r4, [r0, #3]
    UINT16_TO_BSTREAM(p, opcode);
   11590:	7043      	strb	r3, [r0, #1]
    UINT16_TO_BSTREAM(p, handle);
   11592:	0a24      	lsrs	r4, r4, #8
    UINT8_TO_BSTREAM(p, len);
   11594:	231c      	movs	r3, #28
    UINT16_TO_BSTREAM(p, handle);
   11596:	7104      	strb	r4, [r0, #4]
    UINT8_TO_BSTREAM(p, len);
   11598:	7083      	strb	r3, [r0, #2]
    memcpy(p, pRand, HCI_RAND_LEN);
   1159a:	682b      	ldr	r3, [r5, #0]
   1159c:	686a      	ldr	r2, [r5, #4]
   1159e:	f8c0 3005 	str.w	r3, [r0, #5]
    p += HCI_RAND_LEN;
    UINT16_TO_BSTREAM(p, diversifier);
   115a2:	0a3b      	lsrs	r3, r7, #8
    memcpy(p, pRand, HCI_RAND_LEN);
   115a4:	f8c0 2009 	str.w	r2, [r0, #9]
    UINT16_TO_BSTREAM(p, diversifier);
   115a8:	7347      	strb	r7, [r0, #13]
   115aa:	7383      	strb	r3, [r0, #14]
    memcpy(p, pKey, HCI_KEY_LEN);
   115ac:	68f4      	ldr	r4, [r6, #12]
   115ae:	6831      	ldr	r1, [r6, #0]
   115b0:	6872      	ldr	r2, [r6, #4]
   115b2:	68b3      	ldr	r3, [r6, #8]
   115b4:	f8c0 401b 	str.w	r4, [r0, #27]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   115b8:	4c14      	ldr	r4, [pc, #80]	; (1160c <HciLeStartEncryptionCmd+0x98>)
    memcpy(p, pKey, HCI_KEY_LEN);
   115ba:	f8c0 100f 	str.w	r1, [r0, #15]
   115be:	f8c0 2013 	str.w	r2, [r0, #19]
   115c2:	f8c0 3017 	str.w	r3, [r0, #23]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   115c6:	4602      	mov	r2, r0
   115c8:	2100      	movs	r1, #0
   115ca:	f104 0010 	add.w	r0, r4, #16
   115ce:	f002 f93f 	bl	13850 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   115d2:	7ea3      	ldrb	r3, [r4, #26]
   115d4:	b90b      	cbnz	r3, 115da <HciLeStartEncryptionCmd+0x66>
    hciCmdSend(pBuf);
  }
}
   115d6:	b003      	add	sp, #12
   115d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   115da:	f10d 0107 	add.w	r1, sp, #7
   115de:	f104 0010 	add.w	r0, r4, #16
   115e2:	f002 f93b 	bl	1385c <WsfMsgDeq>
   115e6:	4605      	mov	r5, r0
   115e8:	2800      	cmp	r0, #0
   115ea:	d0f4      	beq.n	115d6 <HciLeStartEncryptionCmd+0x62>
      hciCmdCb.numCmdPkts--;
   115ec:	7ea3      	ldrb	r3, [r4, #26]
   115ee:	3b01      	subs	r3, #1
   115f0:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   115f2:	7842      	ldrb	r2, [r0, #1]
   115f4:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   115f6:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   115f8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   115fc:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   115fe:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11600:	f002 fb62 	bl	13cc8 <WsfTimerStartSec>
      hciTrSendCmd(p);
   11604:	4628      	mov	r0, r5
   11606:	f001 ff49 	bl	1349c <hciTrSendCmd>
}
   1160a:	e7e4      	b.n	115d6 <HciLeStartEncryptionCmd+0x62>
   1160c:	10004cac 	.word	0x10004cac

00011610 <HciReadBdAddrCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadBdAddrCmd(void)
{
   11610:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   11612:	2003      	movs	r0, #3
{
   11614:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   11616:	f002 f8fd 	bl	13814 <WsfMsgAlloc>
   1161a:	b160      	cbz	r0, 11636 <HciReadBdAddrCmd+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1161c:	4c13      	ldr	r4, [pc, #76]	; (1166c <HciReadBdAddrCmd+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
   1161e:	f241 0309 	movw	r3, #4105	; 0x1009
    UINT8_TO_BSTREAM(p, len);
   11622:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
   11624:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   11626:	4602      	mov	r2, r0
   11628:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1162a:	f104 0010 	add.w	r0, r4, #16
   1162e:	f002 f90f 	bl	13850 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   11632:	7ea3      	ldrb	r3, [r4, #26]
   11634:	b90b      	cbnz	r3, 1163a <HciReadBdAddrCmd+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_BD_ADDR, HCI_LEN_READ_BD_ADDR)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
   11636:	b003      	add	sp, #12
   11638:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   1163a:	f10d 0107 	add.w	r1, sp, #7
   1163e:	f104 0010 	add.w	r0, r4, #16
   11642:	f002 f90b 	bl	1385c <WsfMsgDeq>
   11646:	4605      	mov	r5, r0
   11648:	2800      	cmp	r0, #0
   1164a:	d0f4      	beq.n	11636 <HciReadBdAddrCmd+0x26>
      hciCmdCb.numCmdPkts--;
   1164c:	7ea3      	ldrb	r3, [r4, #26]
   1164e:	3b01      	subs	r3, #1
   11650:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11652:	7842      	ldrb	r2, [r0, #1]
   11654:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11656:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11658:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1165c:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1165e:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11660:	f002 fb32 	bl	13cc8 <WsfTimerStartSec>
      hciTrSendCmd(p);
   11664:	4628      	mov	r0, r5
   11666:	f001 ff19 	bl	1349c <hciTrSendCmd>
}
   1166a:	e7e4      	b.n	11636 <HciReadBdAddrCmd+0x26>
   1166c:	10004cac 	.word	0x10004cac

00011670 <HciReadLocalVerInfoCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadLocalVerInfoCmd(void)
{
   11670:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   11672:	2003      	movs	r0, #3
{
   11674:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   11676:	f002 f8cd 	bl	13814 <WsfMsgAlloc>
   1167a:	b160      	cbz	r0, 11696 <HciReadLocalVerInfoCmd+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1167c:	4c13      	ldr	r4, [pc, #76]	; (116cc <HciReadLocalVerInfoCmd+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
   1167e:	f241 0301 	movw	r3, #4097	; 0x1001
    UINT8_TO_BSTREAM(p, len);
   11682:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
   11684:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   11686:	4602      	mov	r2, r0
   11688:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1168a:	f104 0010 	add.w	r0, r4, #16
   1168e:	f002 f8df 	bl	13850 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   11692:	7ea3      	ldrb	r3, [r4, #26]
   11694:	b90b      	cbnz	r3, 1169a <HciReadLocalVerInfoCmd+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_LOCAL_VER_INFO, HCI_LEN_READ_LOCAL_VER_INFO)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
   11696:	b003      	add	sp, #12
   11698:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   1169a:	f10d 0107 	add.w	r1, sp, #7
   1169e:	f104 0010 	add.w	r0, r4, #16
   116a2:	f002 f8db 	bl	1385c <WsfMsgDeq>
   116a6:	4605      	mov	r5, r0
   116a8:	2800      	cmp	r0, #0
   116aa:	d0f4      	beq.n	11696 <HciReadLocalVerInfoCmd+0x26>
      hciCmdCb.numCmdPkts--;
   116ac:	7ea3      	ldrb	r3, [r4, #26]
   116ae:	3b01      	subs	r3, #1
   116b0:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   116b2:	7842      	ldrb	r2, [r0, #1]
   116b4:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   116b6:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   116b8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   116bc:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   116be:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   116c0:	f002 fb02 	bl	13cc8 <WsfTimerStartSec>
      hciTrSendCmd(p);
   116c4:	4628      	mov	r0, r5
   116c6:	f001 fee9 	bl	1349c <hciTrSendCmd>
}
   116ca:	e7e4      	b.n	11696 <HciReadLocalVerInfoCmd+0x26>
   116cc:	10004cac 	.word	0x10004cac

000116d0 <HciReadRssiCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadRssiCmd(uint16_t handle)
{
   116d0:	b530      	push	{r4, r5, lr}
   116d2:	4604      	mov	r4, r0
   116d4:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   116d6:	2005      	movs	r0, #5
   116d8:	f002 f89c 	bl	13814 <WsfMsgAlloc>
   116dc:	b188      	cbz	r0, 11702 <HciReadRssiCmd+0x32>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   116de:	4d16      	ldr	r5, [pc, #88]	; (11738 <HciReadRssiCmd+0x68>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_RSSI, HCI_LEN_READ_RSSI)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
   116e0:	70c4      	strb	r4, [r0, #3]
    UINT16_TO_BSTREAM(p, opcode);
   116e2:	2105      	movs	r1, #5
   116e4:	2314      	movs	r3, #20
   116e6:	7001      	strb	r1, [r0, #0]
   116e8:	7043      	strb	r3, [r0, #1]
    UINT8_TO_BSTREAM(p, len);
   116ea:	2102      	movs	r1, #2
    UINT16_TO_BSTREAM(p, handle);
   116ec:	0a23      	lsrs	r3, r4, #8
    UINT8_TO_BSTREAM(p, len);
   116ee:	7081      	strb	r1, [r0, #2]
    UINT16_TO_BSTREAM(p, handle);
   116f0:	7103      	strb	r3, [r0, #4]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   116f2:	4602      	mov	r2, r0
   116f4:	2100      	movs	r1, #0
   116f6:	f105 0010 	add.w	r0, r5, #16
   116fa:	f002 f8a9 	bl	13850 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   116fe:	7eab      	ldrb	r3, [r5, #26]
   11700:	b90b      	cbnz	r3, 11706 <HciReadRssiCmd+0x36>
    hciCmdSend(pBuf);
  }
}
   11702:	b003      	add	sp, #12
   11704:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   11706:	f10d 0107 	add.w	r1, sp, #7
   1170a:	f105 0010 	add.w	r0, r5, #16
   1170e:	f002 f8a5 	bl	1385c <WsfMsgDeq>
   11712:	4604      	mov	r4, r0
   11714:	2800      	cmp	r0, #0
   11716:	d0f4      	beq.n	11702 <HciReadRssiCmd+0x32>
      hciCmdCb.numCmdPkts--;
   11718:	7eab      	ldrb	r3, [r5, #26]
   1171a:	3b01      	subs	r3, #1
   1171c:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1171e:	7842      	ldrb	r2, [r0, #1]
   11720:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11722:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11724:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11728:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1172a:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1172c:	f002 facc 	bl	13cc8 <WsfTimerStartSec>
      hciTrSendCmd(p);
   11730:	4620      	mov	r0, r4
   11732:	f001 feb3 	bl	1349c <hciTrSendCmd>
}
   11736:	e7e4      	b.n	11702 <HciReadRssiCmd+0x32>
   11738:	10004cac 	.word	0x10004cac

0001173c <HciResetCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciResetCmd(void)
{
   1173c:	b570      	push	{r4, r5, r6, lr}
  hciHwErrorEvt_t evt;

  // let security module to clean up pending request/command
  evt.hdr.event = HCI_HW_ERROR_CBACK_EVT;

  hciCb.secCback((hciEvt_t *)&evt);
   1173e:	4b20      	ldr	r3, [pc, #128]	; (117c0 <HciResetCmd+0x84>)
   11740:	4e20      	ldr	r6, [pc, #128]	; (117c4 <HciResetCmd+0x88>)
   11742:	68db      	ldr	r3, [r3, #12]
{
   11744:	b084      	sub	sp, #16
  evt.hdr.event = HCI_HW_ERROR_CBACK_EVT;
   11746:	2214      	movs	r2, #20
   11748:	f88d 200a 	strb.w	r2, [sp, #10]
  hciCb.secCback((hciEvt_t *)&evt);
   1174c:	a802      	add	r0, sp, #8
   1174e:	4798      	blx	r3

  // Free up any unsent HCI commandss
  while((pBuf = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   11750:	f106 0510 	add.w	r5, r6, #16
   11754:	e001      	b.n	1175a <HciResetCmd+0x1e>
  {
    WsfMsgFree(pBuf);
   11756:	f002 f865 	bl	13824 <WsfMsgFree>
  while((pBuf = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   1175a:	f10d 0106 	add.w	r1, sp, #6
   1175e:	4628      	mov	r0, r5
   11760:	f002 f87c 	bl	1385c <WsfMsgDeq>
   11764:	4604      	mov	r4, r0
   11766:	2800      	cmp	r0, #0
   11768:	d1f5      	bne.n	11756 <HciResetCmd+0x1a>
  }

  /* initialize numCmdPkts for special case of reset command */
  hciCmdCb.numCmdPkts = 1;
   1176a:	2301      	movs	r3, #1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   1176c:	2003      	movs	r0, #3
  hciCmdCb.numCmdPkts = 1;
   1176e:	76b3      	strb	r3, [r6, #26]
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   11770:	f002 f850 	bl	13814 <WsfMsgAlloc>
   11774:	4602      	mov	r2, r0
   11776:	b148      	cbz	r0, 1178c <HciResetCmd+0x50>
    UINT16_TO_BSTREAM(p, opcode);
   11778:	f640 4303 	movw	r3, #3075	; 0xc03
   1177c:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   1177e:	7084      	strb	r4, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   11780:	4621      	mov	r1, r4
   11782:	4811      	ldr	r0, [pc, #68]	; (117c8 <HciResetCmd+0x8c>)
   11784:	f002 f864 	bl	13850 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   11788:	7eb3      	ldrb	r3, [r6, #26]
   1178a:	b90b      	cbnz	r3, 11790 <HciResetCmd+0x54>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_RESET, HCI_LEN_RESET)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
   1178c:	b004      	add	sp, #16
   1178e:	bd70      	pop	{r4, r5, r6, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   11790:	480d      	ldr	r0, [pc, #52]	; (117c8 <HciResetCmd+0x8c>)
   11792:	f10d 0107 	add.w	r1, sp, #7
   11796:	f002 f861 	bl	1385c <WsfMsgDeq>
   1179a:	4604      	mov	r4, r0
   1179c:	2800      	cmp	r0, #0
   1179e:	d0f5      	beq.n	1178c <HciResetCmd+0x50>
      hciCmdCb.numCmdPkts--;
   117a0:	7eb3      	ldrb	r3, [r6, #26]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   117a2:	4808      	ldr	r0, [pc, #32]	; (117c4 <HciResetCmd+0x88>)
      hciCmdCb.numCmdPkts--;
   117a4:	3b01      	subs	r3, #1
   117a6:	76b3      	strb	r3, [r6, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   117a8:	7862      	ldrb	r2, [r4, #1]
   117aa:	7823      	ldrb	r3, [r4, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   117ac:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   117ae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   117b2:	8333      	strh	r3, [r6, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   117b4:	f002 fa88 	bl	13cc8 <WsfTimerStartSec>
      hciTrSendCmd(p);
   117b8:	4620      	mov	r0, r4
   117ba:	f001 fe6f 	bl	1349c <hciTrSendCmd>
}
   117be:	e7e5      	b.n	1178c <HciResetCmd+0x50>
   117c0:	10004c50 	.word	0x10004c50
   117c4:	10004cac 	.word	0x10004cac
   117c8:	10004cbc 	.word	0x10004cbc

000117cc <HciSetEventMaskCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSetEventMaskCmd(uint8_t *pEventMask)
{
   117cc:	b530      	push	{r4, r5, lr}
   117ce:	4604      	mov	r4, r0
   117d0:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   117d2:	200b      	movs	r0, #11
   117d4:	f002 f81e 	bl	13814 <WsfMsgAlloc>
   117d8:	b198      	cbz	r0, 11802 <HciSetEventMaskCmd+0x36>
    UINT16_TO_BSTREAM(p, opcode);
   117da:	f640 4101 	movw	r1, #3073	; 0xc01
    UINT8_TO_BSTREAM(p, len);
   117de:	2308      	movs	r3, #8
    UINT16_TO_BSTREAM(p, opcode);
   117e0:	8001      	strh	r1, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   117e2:	7083      	strb	r3, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   117e4:	4d14      	ldr	r5, [pc, #80]	; (11838 <HciSetEventMaskCmd+0x6c>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_SET_EVENT_MASK, HCI_LEN_SET_EVENT_MASK)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    memcpy(p, pEventMask, HCI_EVT_MASK_LEN);
   117e6:	6823      	ldr	r3, [r4, #0]
   117e8:	6861      	ldr	r1, [r4, #4]
   117ea:	f8c0 1007 	str.w	r1, [r0, #7]
   117ee:	f8c0 3003 	str.w	r3, [r0, #3]
   117f2:	4602      	mov	r2, r0
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   117f4:	2100      	movs	r1, #0
   117f6:	f105 0010 	add.w	r0, r5, #16
   117fa:	f002 f829 	bl	13850 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   117fe:	7eab      	ldrb	r3, [r5, #26]
   11800:	b90b      	cbnz	r3, 11806 <HciSetEventMaskCmd+0x3a>
    hciCmdSend(pBuf);
  }
}
   11802:	b003      	add	sp, #12
   11804:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   11806:	f10d 0107 	add.w	r1, sp, #7
   1180a:	f105 0010 	add.w	r0, r5, #16
   1180e:	f002 f825 	bl	1385c <WsfMsgDeq>
   11812:	4604      	mov	r4, r0
   11814:	2800      	cmp	r0, #0
   11816:	d0f4      	beq.n	11802 <HciSetEventMaskCmd+0x36>
      hciCmdCb.numCmdPkts--;
   11818:	7eab      	ldrb	r3, [r5, #26]
   1181a:	3b01      	subs	r3, #1
   1181c:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1181e:	7842      	ldrb	r2, [r0, #1]
   11820:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11822:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11824:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11828:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1182a:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1182c:	f002 fa4c 	bl	13cc8 <WsfTimerStartSec>
      hciTrSendCmd(p);
   11830:	4620      	mov	r0, r4
   11832:	f001 fe33 	bl	1349c <hciTrSendCmd>
}
   11836:	e7e4      	b.n	11802 <HciSetEventMaskCmd+0x36>
   11838:	10004cac 	.word	0x10004cac

0001183c <HciSetEventMaskPage2Cmd>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciSetEventMaskPage2Cmd(uint8_t *pEventMask)
{
   1183c:	b530      	push	{r4, r5, lr}
   1183e:	4604      	mov	r4, r0
   11840:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   11842:	200b      	movs	r0, #11
   11844:	f001 ffe6 	bl	13814 <WsfMsgAlloc>
   11848:	b198      	cbz	r0, 11872 <HciSetEventMaskPage2Cmd+0x36>
    UINT16_TO_BSTREAM(p, opcode);
   1184a:	f640 4163 	movw	r1, #3171	; 0xc63
    UINT8_TO_BSTREAM(p, len);
   1184e:	2308      	movs	r3, #8
    UINT16_TO_BSTREAM(p, opcode);
   11850:	8001      	strh	r1, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   11852:	7083      	strb	r3, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   11854:	4d14      	ldr	r5, [pc, #80]	; (118a8 <HciSetEventMaskPage2Cmd+0x6c>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_SET_EVENT_MASK_PAGE2, HCI_LEN_SET_EVENT_MASK_PAGE2)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    memcpy(p, pEventMask, HCI_EVT_MASK_PAGE_2_LEN);
   11856:	6823      	ldr	r3, [r4, #0]
   11858:	6861      	ldr	r1, [r4, #4]
   1185a:	f8c0 1007 	str.w	r1, [r0, #7]
   1185e:	f8c0 3003 	str.w	r3, [r0, #3]
   11862:	4602      	mov	r2, r0
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   11864:	2100      	movs	r1, #0
   11866:	f105 0010 	add.w	r0, r5, #16
   1186a:	f001 fff1 	bl	13850 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   1186e:	7eab      	ldrb	r3, [r5, #26]
   11870:	b90b      	cbnz	r3, 11876 <HciSetEventMaskPage2Cmd+0x3a>
    hciCmdSend(pBuf);
  }
}
   11872:	b003      	add	sp, #12
   11874:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   11876:	f10d 0107 	add.w	r1, sp, #7
   1187a:	f105 0010 	add.w	r0, r5, #16
   1187e:	f001 ffed 	bl	1385c <WsfMsgDeq>
   11882:	4604      	mov	r4, r0
   11884:	2800      	cmp	r0, #0
   11886:	d0f4      	beq.n	11872 <HciSetEventMaskPage2Cmd+0x36>
      hciCmdCb.numCmdPkts--;
   11888:	7eab      	ldrb	r3, [r5, #26]
   1188a:	3b01      	subs	r3, #1
   1188c:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1188e:	7842      	ldrb	r2, [r0, #1]
   11890:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11892:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11894:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11898:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1189a:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1189c:	f002 fa14 	bl	13cc8 <WsfTimerStartSec>
      hciTrSendCmd(p);
   118a0:	4620      	mov	r0, r4
   118a2:	f001 fdfb 	bl	1349c <hciTrSendCmd>
}
   118a6:	e7e4      	b.n	11872 <HciSetEventMaskPage2Cmd+0x36>
   118a8:	10004cac 	.word	0x10004cac

000118ac <HciWriteAuthPayloadTimeout>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciWriteAuthPayloadTimeout(uint16_t handle, uint16_t timeout)
{
   118ac:	b570      	push	{r4, r5, r6, lr}
   118ae:	4605      	mov	r5, r0
   118b0:	b082      	sub	sp, #8
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   118b2:	2007      	movs	r0, #7
{
   118b4:	460c      	mov	r4, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   118b6:	f001 ffad 	bl	13814 <WsfMsgAlloc>
   118ba:	b1a0      	cbz	r0, 118e6 <HciWriteAuthPayloadTimeout+0x3a>
    UINT16_TO_BSTREAM(p, opcode);
   118bc:	237c      	movs	r3, #124	; 0x7c
   118be:	7003      	strb	r3, [r0, #0]
   118c0:	230c      	movs	r3, #12
   118c2:	7043      	strb	r3, [r0, #1]
    UINT8_TO_BSTREAM(p, len);
   118c4:	2304      	movs	r3, #4
   118c6:	7083      	strb	r3, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   118c8:	4e14      	ldr	r6, [pc, #80]	; (1191c <HciWriteAuthPayloadTimeout+0x70>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_WRITE_AUTH_PAYLOAD_TO, HCI_LEN_WRITE_AUTH_PAYLOAD_TO)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
   118ca:	70c5      	strb	r5, [r0, #3]
   118cc:	0a2b      	lsrs	r3, r5, #8
   118ce:	7103      	strb	r3, [r0, #4]
    UINT16_TO_BSTREAM(p, timeout);
   118d0:	0a23      	lsrs	r3, r4, #8
   118d2:	7183      	strb	r3, [r0, #6]
   118d4:	4602      	mov	r2, r0
   118d6:	7144      	strb	r4, [r0, #5]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   118d8:	2100      	movs	r1, #0
   118da:	f106 0010 	add.w	r0, r6, #16
   118de:	f001 ffb7 	bl	13850 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   118e2:	7eb3      	ldrb	r3, [r6, #26]
   118e4:	b90b      	cbnz	r3, 118ea <HciWriteAuthPayloadTimeout+0x3e>
    hciCmdSend(pBuf);
  }
}
   118e6:	b002      	add	sp, #8
   118e8:	bd70      	pop	{r4, r5, r6, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   118ea:	f10d 0107 	add.w	r1, sp, #7
   118ee:	f106 0010 	add.w	r0, r6, #16
   118f2:	f001 ffb3 	bl	1385c <WsfMsgDeq>
   118f6:	4604      	mov	r4, r0
   118f8:	2800      	cmp	r0, #0
   118fa:	d0f4      	beq.n	118e6 <HciWriteAuthPayloadTimeout+0x3a>
      hciCmdCb.numCmdPkts--;
   118fc:	7eb3      	ldrb	r3, [r6, #26]
   118fe:	3b01      	subs	r3, #1
   11900:	76b3      	strb	r3, [r6, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11902:	7842      	ldrb	r2, [r0, #1]
   11904:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11906:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11908:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1190c:	4630      	mov	r0, r6
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1190e:	8333      	strh	r3, [r6, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11910:	f002 f9da 	bl	13cc8 <WsfTimerStartSec>
      hciTrSendCmd(p);
   11914:	4620      	mov	r0, r4
   11916:	f001 fdc1 	bl	1349c <hciTrSendCmd>
}
   1191a:	e7e4      	b.n	118e6 <HciWriteAuthPayloadTimeout+0x3a>
   1191c:	10004cac 	.word	0x10004cac

00011920 <HciLeAddDeviceToResolvingListCmd>:
 *  \return None.
 */
/*************************************************************************************************/
void HciLeAddDeviceToResolvingListCmd(uint8_t peerAddrType, const uint8_t *pPeerIdentityAddr,
                                      const uint8_t *pPeerIrk, const uint8_t *pLocalIrk)
{
   11920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11924:	4680      	mov	r8, r0
   11926:	b082      	sub	sp, #8
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   11928:	202a      	movs	r0, #42	; 0x2a
{
   1192a:	460f      	mov	r7, r1
   1192c:	4616      	mov	r6, r2
   1192e:	461d      	mov	r5, r3
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   11930:	f001 ff70 	bl	13814 <WsfMsgAlloc>
   11934:	b360      	cbz	r0, 11990 <HciLeAddDeviceToResolvingListCmd+0x70>
    UINT16_TO_BSTREAM(p, opcode);
   11936:	4604      	mov	r4, r0
   11938:	2327      	movs	r3, #39	; 0x27
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ADD_DEV_RES_LIST, HCI_LEN_LE_ADD_DEV_RES_LIST)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT8_TO_BSTREAM(p, peerAddrType);
   1193a:	f880 8003 	strb.w	r8, [r0, #3]
    UINT16_TO_BSTREAM(p, opcode);
   1193e:	7023      	strb	r3, [r4, #0]
    UINT8_TO_BSTREAM(p, len);
   11940:	70a3      	strb	r3, [r4, #2]
    UINT16_TO_BSTREAM(p, opcode);
   11942:	2320      	movs	r3, #32
    BDA_TO_BSTREAM(p, pPeerIdentityAddr);
   11944:	4639      	mov	r1, r7
   11946:	3004      	adds	r0, #4
    UINT16_TO_BSTREAM(p, opcode);
   11948:	7063      	strb	r3, [r4, #1]
    BDA_TO_BSTREAM(p, pPeerIdentityAddr);
   1194a:	f00a fd03 	bl	1c354 <BdaCpy>
    memcpy(p, pPeerIrk, HCI_KEY_LEN);
   1194e:	6831      	ldr	r1, [r6, #0]
   11950:	6872      	ldr	r2, [r6, #4]
   11952:	68b3      	ldr	r3, [r6, #8]
   11954:	68f0      	ldr	r0, [r6, #12]
   11956:	f8c4 0016 	str.w	r0, [r4, #22]
   1195a:	f8c4 100a 	str.w	r1, [r4, #10]
   1195e:	f8c4 200e 	str.w	r2, [r4, #14]
   11962:	f8c4 3012 	str.w	r3, [r4, #18]
    p += HCI_KEY_LEN;
    memcpy(p, pLocalIrk, HCI_KEY_LEN);
   11966:	6829      	ldr	r1, [r5, #0]
   11968:	686a      	ldr	r2, [r5, #4]
   1196a:	68ab      	ldr	r3, [r5, #8]
   1196c:	68e8      	ldr	r0, [r5, #12]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1196e:	4d16      	ldr	r5, [pc, #88]	; (119c8 <HciLeAddDeviceToResolvingListCmd+0xa8>)
    memcpy(p, pLocalIrk, HCI_KEY_LEN);
   11970:	f8c4 0026 	str.w	r0, [r4, #38]	; 0x26
   11974:	f8c4 101a 	str.w	r1, [r4, #26]
   11978:	f8c4 201e 	str.w	r2, [r4, #30]
   1197c:	f8c4 3022 	str.w	r3, [r4, #34]	; 0x22
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   11980:	4622      	mov	r2, r4
   11982:	2100      	movs	r1, #0
   11984:	f105 0010 	add.w	r0, r5, #16
   11988:	f001 ff62 	bl	13850 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   1198c:	7eab      	ldrb	r3, [r5, #26]
   1198e:	b913      	cbnz	r3, 11996 <HciLeAddDeviceToResolvingListCmd+0x76>
    hciCmdSend(pBuf);
  }
}
   11990:	b002      	add	sp, #8
   11992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   11996:	f10d 0107 	add.w	r1, sp, #7
   1199a:	f105 0010 	add.w	r0, r5, #16
   1199e:	f001 ff5d 	bl	1385c <WsfMsgDeq>
   119a2:	4604      	mov	r4, r0
   119a4:	2800      	cmp	r0, #0
   119a6:	d0f3      	beq.n	11990 <HciLeAddDeviceToResolvingListCmd+0x70>
      hciCmdCb.numCmdPkts--;
   119a8:	7eab      	ldrb	r3, [r5, #26]
   119aa:	3b01      	subs	r3, #1
   119ac:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   119ae:	7842      	ldrb	r2, [r0, #1]
   119b0:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   119b2:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   119b4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   119b8:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   119ba:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   119bc:	f002 f984 	bl	13cc8 <WsfTimerStartSec>
      hciTrSendCmd(p);
   119c0:	4620      	mov	r0, r4
   119c2:	f001 fd6b 	bl	1349c <hciTrSendCmd>
}
   119c6:	e7e3      	b.n	11990 <HciLeAddDeviceToResolvingListCmd+0x70>
   119c8:	10004cac 	.word	0x10004cac

000119cc <HciLeRemoveDeviceFromResolvingList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeRemoveDeviceFromResolvingList(uint8_t peerAddrType, const uint8_t *pPeerIdentityAddr)
{
   119cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   119ce:	4607      	mov	r7, r0
   119d0:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   119d2:	200a      	movs	r0, #10
{
   119d4:	460d      	mov	r5, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   119d6:	f001 ff1d 	bl	13814 <WsfMsgAlloc>
   119da:	b1a0      	cbz	r0, 11a06 <HciLeRemoveDeviceFromResolvingList+0x3a>
    UINT16_TO_BSTREAM(p, opcode);
   119dc:	2328      	movs	r3, #40	; 0x28
   119de:	7003      	strb	r3, [r0, #0]
   119e0:	4604      	mov	r4, r0
   119e2:	2320      	movs	r3, #32
   119e4:	7043      	strb	r3, [r0, #1]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   119e6:	4e15      	ldr	r6, [pc, #84]	; (11a3c <HciLeRemoveDeviceFromResolvingList+0x70>)
    UINT8_TO_BSTREAM(p, len);
   119e8:	2307      	movs	r3, #7
   119ea:	7083      	strb	r3, [r0, #2]

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REMOVE_DEV_RES_LIST, HCI_LEN_LE_REMOVE_DEV_RES_LIST)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT8_TO_BSTREAM(p, peerAddrType);
    BDA_TO_BSTREAM(p, pPeerIdentityAddr);
   119ec:	4629      	mov	r1, r5
   119ee:	3004      	adds	r0, #4
    UINT8_TO_BSTREAM(p, peerAddrType);
   119f0:	70e7      	strb	r7, [r4, #3]
    BDA_TO_BSTREAM(p, pPeerIdentityAddr);
   119f2:	f00a fcaf 	bl	1c354 <BdaCpy>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   119f6:	4622      	mov	r2, r4
   119f8:	2100      	movs	r1, #0
   119fa:	f106 0010 	add.w	r0, r6, #16
   119fe:	f001 ff27 	bl	13850 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   11a02:	7eb3      	ldrb	r3, [r6, #26]
   11a04:	b90b      	cbnz	r3, 11a0a <HciLeRemoveDeviceFromResolvingList+0x3e>
    hciCmdSend(pBuf);
  }
}
   11a06:	b003      	add	sp, #12
   11a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   11a0a:	f10d 0107 	add.w	r1, sp, #7
   11a0e:	f106 0010 	add.w	r0, r6, #16
   11a12:	f001 ff23 	bl	1385c <WsfMsgDeq>
   11a16:	4604      	mov	r4, r0
   11a18:	2800      	cmp	r0, #0
   11a1a:	d0f4      	beq.n	11a06 <HciLeRemoveDeviceFromResolvingList+0x3a>
      hciCmdCb.numCmdPkts--;
   11a1c:	7eb3      	ldrb	r3, [r6, #26]
   11a1e:	3b01      	subs	r3, #1
   11a20:	76b3      	strb	r3, [r6, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11a22:	7842      	ldrb	r2, [r0, #1]
   11a24:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11a26:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11a28:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11a2c:	4630      	mov	r0, r6
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11a2e:	8333      	strh	r3, [r6, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11a30:	f002 f94a 	bl	13cc8 <WsfTimerStartSec>
      hciTrSendCmd(p);
   11a34:	4620      	mov	r0, r4
   11a36:	f001 fd31 	bl	1349c <hciTrSendCmd>
}
   11a3a:	e7e4      	b.n	11a06 <HciLeRemoveDeviceFromResolvingList+0x3a>
   11a3c:	10004cac 	.word	0x10004cac

00011a40 <HciLeClearResolvingList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeClearResolvingList(void)
{
   11a40:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   11a42:	2003      	movs	r0, #3
{
   11a44:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   11a46:	f001 fee5 	bl	13814 <WsfMsgAlloc>
   11a4a:	b160      	cbz	r0, 11a66 <HciLeClearResolvingList+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   11a4c:	4c13      	ldr	r4, [pc, #76]	; (11a9c <HciLeClearResolvingList+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
   11a4e:	f242 0329 	movw	r3, #8233	; 0x2029
    UINT8_TO_BSTREAM(p, len);
   11a52:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
   11a54:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   11a56:	4602      	mov	r2, r0
   11a58:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   11a5a:	f104 0010 	add.w	r0, r4, #16
   11a5e:	f001 fef7 	bl	13850 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   11a62:	7ea3      	ldrb	r3, [r4, #26]
   11a64:	b90b      	cbnz	r3, 11a6a <HciLeClearResolvingList+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CLEAR_RES_LIST, HCI_LEN_LE_CLEAR_RES_LIST)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
   11a66:	b003      	add	sp, #12
   11a68:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   11a6a:	f10d 0107 	add.w	r1, sp, #7
   11a6e:	f104 0010 	add.w	r0, r4, #16
   11a72:	f001 fef3 	bl	1385c <WsfMsgDeq>
   11a76:	4605      	mov	r5, r0
   11a78:	2800      	cmp	r0, #0
   11a7a:	d0f4      	beq.n	11a66 <HciLeClearResolvingList+0x26>
      hciCmdCb.numCmdPkts--;
   11a7c:	7ea3      	ldrb	r3, [r4, #26]
   11a7e:	3b01      	subs	r3, #1
   11a80:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11a82:	7842      	ldrb	r2, [r0, #1]
   11a84:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11a86:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11a88:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11a8c:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11a8e:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11a90:	f002 f91a 	bl	13cc8 <WsfTimerStartSec>
      hciTrSendCmd(p);
   11a94:	4628      	mov	r0, r5
   11a96:	f001 fd01 	bl	1349c <hciTrSendCmd>
}
   11a9a:	e7e4      	b.n	11a66 <HciLeClearResolvingList+0x26>
   11a9c:	10004cac 	.word	0x10004cac

00011aa0 <HciLeReadResolvingListSize>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadResolvingListSize(void)
{
   11aa0:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   11aa2:	2003      	movs	r0, #3
{
   11aa4:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   11aa6:	f001 feb5 	bl	13814 <WsfMsgAlloc>
   11aaa:	b160      	cbz	r0, 11ac6 <HciLeReadResolvingListSize+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   11aac:	4c13      	ldr	r4, [pc, #76]	; (11afc <HciLeReadResolvingListSize+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
   11aae:	f242 032a 	movw	r3, #8234	; 0x202a
    UINT8_TO_BSTREAM(p, len);
   11ab2:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
   11ab4:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   11ab6:	4602      	mov	r2, r0
   11ab8:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   11aba:	f104 0010 	add.w	r0, r4, #16
   11abe:	f001 fec7 	bl	13850 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   11ac2:	7ea3      	ldrb	r3, [r4, #26]
   11ac4:	b90b      	cbnz	r3, 11aca <HciLeReadResolvingListSize+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_RES_LIST_SIZE, HCI_LEN_LE_READ_RES_LIST_SIZE)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
   11ac6:	b003      	add	sp, #12
   11ac8:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   11aca:	f10d 0107 	add.w	r1, sp, #7
   11ace:	f104 0010 	add.w	r0, r4, #16
   11ad2:	f001 fec3 	bl	1385c <WsfMsgDeq>
   11ad6:	4605      	mov	r5, r0
   11ad8:	2800      	cmp	r0, #0
   11ada:	d0f4      	beq.n	11ac6 <HciLeReadResolvingListSize+0x26>
      hciCmdCb.numCmdPkts--;
   11adc:	7ea3      	ldrb	r3, [r4, #26]
   11ade:	3b01      	subs	r3, #1
   11ae0:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11ae2:	7842      	ldrb	r2, [r0, #1]
   11ae4:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11ae6:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11ae8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11aec:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11aee:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11af0:	f002 f8ea 	bl	13cc8 <WsfTimerStartSec>
      hciTrSendCmd(p);
   11af4:	4628      	mov	r0, r5
   11af6:	f001 fcd1 	bl	1349c <hciTrSendCmd>
}
   11afa:	e7e4      	b.n	11ac6 <HciLeReadResolvingListSize+0x26>
   11afc:	10004cac 	.word	0x10004cac

00011b00 <HciLeSetAddrResolutionEnable>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAddrResolutionEnable(uint8_t enable)
{
   11b00:	b530      	push	{r4, r5, lr}
   11b02:	4604      	mov	r4, r0
   11b04:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   11b06:	2004      	movs	r0, #4
   11b08:	f001 fe84 	bl	13814 <WsfMsgAlloc>
   11b0c:	b178      	cbz	r0, 11b2e <HciLeSetAddrResolutionEnable+0x2e>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   11b0e:	4d15      	ldr	r5, [pc, #84]	; (11b64 <HciLeSetAddrResolutionEnable+0x64>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADDR_RES_ENABLE, HCI_LEN_LE_SET_ADDR_RES_ENABLE)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT8_TO_BSTREAM(p, enable);
   11b10:	70c4      	strb	r4, [r0, #3]
    UINT16_TO_BSTREAM(p, opcode);
   11b12:	2320      	movs	r3, #32
   11b14:	7043      	strb	r3, [r0, #1]
   11b16:	212d      	movs	r1, #45	; 0x2d
    UINT8_TO_BSTREAM(p, len);
   11b18:	2301      	movs	r3, #1
    UINT16_TO_BSTREAM(p, opcode);
   11b1a:	7001      	strb	r1, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   11b1c:	7083      	strb	r3, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   11b1e:	4602      	mov	r2, r0
   11b20:	2100      	movs	r1, #0
   11b22:	f105 0010 	add.w	r0, r5, #16
   11b26:	f001 fe93 	bl	13850 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   11b2a:	7eab      	ldrb	r3, [r5, #26]
   11b2c:	b90b      	cbnz	r3, 11b32 <HciLeSetAddrResolutionEnable+0x32>
    hciCmdSend(pBuf);
  }
}
   11b2e:	b003      	add	sp, #12
   11b30:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   11b32:	f10d 0107 	add.w	r1, sp, #7
   11b36:	f105 0010 	add.w	r0, r5, #16
   11b3a:	f001 fe8f 	bl	1385c <WsfMsgDeq>
   11b3e:	4604      	mov	r4, r0
   11b40:	2800      	cmp	r0, #0
   11b42:	d0f4      	beq.n	11b2e <HciLeSetAddrResolutionEnable+0x2e>
      hciCmdCb.numCmdPkts--;
   11b44:	7eab      	ldrb	r3, [r5, #26]
   11b46:	3b01      	subs	r3, #1
   11b48:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11b4a:	7842      	ldrb	r2, [r0, #1]
   11b4c:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11b4e:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11b50:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11b54:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11b56:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11b58:	f002 f8b6 	bl	13cc8 <WsfTimerStartSec>
      hciTrSendCmd(p);
   11b5c:	4620      	mov	r0, r4
   11b5e:	f001 fc9d 	bl	1349c <hciTrSendCmd>
}
   11b62:	e7e4      	b.n	11b2e <HciLeSetAddrResolutionEnable+0x2e>
   11b64:	10004cac 	.word	0x10004cac

00011b68 <HciLeSetPrivacyModeCmd>:
 *
 *  \return     None.
 */
/*************************************************************************************************/
void HciLeSetPrivacyModeCmd(uint8_t addrType, uint8_t *pAddr, uint8_t mode)
{
   11b68:	b5f0      	push	{r4, r5, r6, r7, lr}
   11b6a:	4607      	mov	r7, r0
   11b6c:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   11b6e:	200b      	movs	r0, #11
{
   11b70:	460d      	mov	r5, r1
   11b72:	4616      	mov	r6, r2
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   11b74:	f001 fe4e 	bl	13814 <WsfMsgAlloc>
   11b78:	b1a8      	cbz	r0, 11ba6 <HciLeSetPrivacyModeCmd+0x3e>
    UINT16_TO_BSTREAM(p, opcode);
   11b7a:	234e      	movs	r3, #78	; 0x4e
   11b7c:	7003      	strb	r3, [r0, #0]
   11b7e:	4604      	mov	r4, r0
   11b80:	2320      	movs	r3, #32
   11b82:	7043      	strb	r3, [r0, #1]

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_PRIVACY_MODE, HCI_LEN_LE_SET_PRIVACY_MODE)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT8_TO_BSTREAM(p, addrType);
    BDA_TO_BSTREAM(p, pAddr);
   11b84:	4629      	mov	r1, r5
    UINT8_TO_BSTREAM(p, len);
   11b86:	2308      	movs	r3, #8
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   11b88:	4d14      	ldr	r5, [pc, #80]	; (11bdc <HciLeSetPrivacyModeCmd+0x74>)
    UINT8_TO_BSTREAM(p, len);
   11b8a:	7083      	strb	r3, [r0, #2]
    BDA_TO_BSTREAM(p, pAddr);
   11b8c:	3004      	adds	r0, #4
    UINT8_TO_BSTREAM(p, addrType);
   11b8e:	70e7      	strb	r7, [r4, #3]
    BDA_TO_BSTREAM(p, pAddr);
   11b90:	f00a fbe0 	bl	1c354 <BdaCpy>
    UINT8_TO_BSTREAM(p, mode);
   11b94:	72a6      	strb	r6, [r4, #10]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   11b96:	4622      	mov	r2, r4
   11b98:	2100      	movs	r1, #0
   11b9a:	f105 0010 	add.w	r0, r5, #16
   11b9e:	f001 fe57 	bl	13850 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   11ba2:	7eab      	ldrb	r3, [r5, #26]
   11ba4:	b90b      	cbnz	r3, 11baa <HciLeSetPrivacyModeCmd+0x42>
    hciCmdSend(pBuf);
  }
}
   11ba6:	b003      	add	sp, #12
   11ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   11baa:	f10d 0107 	add.w	r1, sp, #7
   11bae:	f105 0010 	add.w	r0, r5, #16
   11bb2:	f001 fe53 	bl	1385c <WsfMsgDeq>
   11bb6:	4604      	mov	r4, r0
   11bb8:	2800      	cmp	r0, #0
   11bba:	d0f4      	beq.n	11ba6 <HciLeSetPrivacyModeCmd+0x3e>
      hciCmdCb.numCmdPkts--;
   11bbc:	7eab      	ldrb	r3, [r5, #26]
   11bbe:	3b01      	subs	r3, #1
   11bc0:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11bc2:	7842      	ldrb	r2, [r0, #1]
   11bc4:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11bc6:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11bc8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11bcc:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11bce:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11bd0:	f002 f87a 	bl	13cc8 <WsfTimerStartSec>
      hciTrSendCmd(p);
   11bd4:	4620      	mov	r0, r4
   11bd6:	f001 fc61 	bl	1349c <hciTrSendCmd>
}
   11bda:	e7e4      	b.n	11ba6 <HciLeSetPrivacyModeCmd+0x3e>
   11bdc:	10004cac 	.word	0x10004cac

00011be0 <HciVendorSpecificCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciVendorSpecificCmd(uint16_t opcode, uint8_t len, uint8_t *pData)
{
   11be0:	b5f0      	push	{r4, r5, r6, r7, lr}
   11be2:	4606      	mov	r6, r0
   11be4:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   11be6:	1cc8      	adds	r0, r1, #3
{
   11be8:	460d      	mov	r5, r1
   11bea:	4617      	mov	r7, r2
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   11bec:	f001 fe12 	bl	13814 <WsfMsgAlloc>
   11bf0:	b190      	cbz	r0, 11c18 <HciVendorSpecificCmd+0x38>
    UINT16_TO_BSTREAM(p, opcode);
   11bf2:	0a33      	lsrs	r3, r6, #8
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(opcode, len)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    memcpy(p, pData, len);
   11bf4:	462a      	mov	r2, r5
    UINT8_TO_BSTREAM(p, len);
   11bf6:	7085      	strb	r5, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   11bf8:	4d15      	ldr	r5, [pc, #84]	; (11c50 <HciVendorSpecificCmd+0x70>)
    UINT16_TO_BSTREAM(p, opcode);
   11bfa:	7043      	strb	r3, [r0, #1]
   11bfc:	4604      	mov	r4, r0
    memcpy(p, pData, len);
   11bfe:	4639      	mov	r1, r7
    UINT16_TO_BSTREAM(p, opcode);
   11c00:	7006      	strb	r6, [r0, #0]
    memcpy(p, pData, len);
   11c02:	3003      	adds	r0, #3
   11c04:	f7fa fa7c 	bl	c100 <memcpy>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   11c08:	4622      	mov	r2, r4
   11c0a:	2100      	movs	r1, #0
   11c0c:	f105 0010 	add.w	r0, r5, #16
   11c10:	f001 fe1e 	bl	13850 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   11c14:	7eab      	ldrb	r3, [r5, #26]
   11c16:	b90b      	cbnz	r3, 11c1c <HciVendorSpecificCmd+0x3c>
    hciCmdSend(pBuf);
  }
}
   11c18:	b003      	add	sp, #12
   11c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   11c1c:	f10d 0107 	add.w	r1, sp, #7
   11c20:	f105 0010 	add.w	r0, r5, #16
   11c24:	f001 fe1a 	bl	1385c <WsfMsgDeq>
   11c28:	4604      	mov	r4, r0
   11c2a:	2800      	cmp	r0, #0
   11c2c:	d0f4      	beq.n	11c18 <HciVendorSpecificCmd+0x38>
      hciCmdCb.numCmdPkts--;
   11c2e:	7eab      	ldrb	r3, [r5, #26]
   11c30:	3b01      	subs	r3, #1
   11c32:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11c34:	7842      	ldrb	r2, [r0, #1]
   11c36:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11c38:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11c3a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11c3e:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11c40:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11c42:	f002 f841 	bl	13cc8 <WsfTimerStartSec>
      hciTrSendCmd(p);
   11c46:	4620      	mov	r0, r4
   11c48:	f001 fc28 	bl	1349c <hciTrSendCmd>
}
   11c4c:	e7e4      	b.n	11c18 <HciVendorSpecificCmd+0x38>
   11c4e:	bf00      	nop
   11c50:	10004cac 	.word	0x10004cac

00011c54 <hciCoreConnByHandle>:
  hciCoreConn_t   *pConn = hciCoreCb.conn;

  /* find available connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
  {
    if (pConn->handle == handle)
   11c54:	4b09      	ldr	r3, [pc, #36]	; (11c7c <hciCoreConnByHandle+0x28>)
   11c56:	8a19      	ldrh	r1, [r3, #16]
   11c58:	4281      	cmp	r1, r0
   11c5a:	d00a      	beq.n	11c72 <hciCoreConnByHandle+0x1e>
   11c5c:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
   11c5e:	4281      	cmp	r1, r0
   11c60:	d009      	beq.n	11c76 <hciCoreConnByHandle+0x22>
   11c62:	f8b3 1048 	ldrh.w	r1, [r3, #72]	; 0x48
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   11c66:	3338      	adds	r3, #56	; 0x38
   11c68:	4281      	cmp	r1, r0
   11c6a:	bf0c      	ite	eq
   11c6c:	4618      	moveq	r0, r3
   11c6e:	2000      	movne	r0, #0
   11c70:	4770      	bx	lr
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   11c72:	4618      	mov	r0, r3
   11c74:	4770      	bx	lr
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   11c76:	f103 001c 	add.w	r0, r3, #28
      return pConn;
    }
  }

  return NULL;
}
   11c7a:	4770      	bx	lr
   11c7c:	10004cc8 	.word	0x10004cc8

00011c80 <hciCoreConnOpen>:
    if (pConn->handle == HCI_HANDLE_NONE)
   11c80:	4b0b      	ldr	r3, [pc, #44]	; (11cb0 <hciCoreConnOpen+0x30>)
   11c82:	8a19      	ldrh	r1, [r3, #16]
   11c84:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11c88:	4291      	cmp	r1, r2
   11c8a:	d00a      	beq.n	11ca2 <hciCoreConnOpen+0x22>
   11c8c:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
   11c8e:	4291      	cmp	r1, r2
   11c90:	d006      	beq.n	11ca0 <hciCoreConnOpen+0x20>
   11c92:	f8b3 1048 	ldrh.w	r1, [r3, #72]	; 0x48
   11c96:	4291      	cmp	r1, r2
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   11c98:	bf08      	it	eq
   11c9a:	3338      	addeq	r3, #56	; 0x38
    if (pConn->handle == HCI_HANDLE_NONE)
   11c9c:	d001      	beq.n	11ca2 <hciCoreConnOpen+0x22>
/*************************************************************************************************/
void hciCoreConnOpen(uint16_t handle)
{
  /* allocate connection structure */
  hciCoreConnAlloc(handle);
}
   11c9e:	4770      	bx	lr
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   11ca0:	331c      	adds	r3, #28
      pConn->outBufs = 0;
   11ca2:	2200      	movs	r2, #0
      pConn->handle = handle;
   11ca4:	8218      	strh	r0, [r3, #16]
      pConn->outBufs = 0;
   11ca6:	765a      	strb	r2, [r3, #25]
      pConn->flowDisabled = FALSE;
   11ca8:	f8a3 2017 	strh.w	r2, [r3, #23]
}
   11cac:	4770      	bx	lr
   11cae:	bf00      	nop
   11cb0:	10004cc8 	.word	0x10004cc8

00011cb4 <hciCoreTxAclStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxAclStart(hciCoreConn_t *pConn, uint16_t len, uint8_t *pData)
{
   11cb4:	b570      	push	{r4, r5, r6, lr}
   11cb6:	460e      	mov	r6, r1
   11cb8:	4604      	mov	r4, r0
   11cba:	4615      	mov	r5, r2
  uint16_t hciLen;

  /* make sure not already fragmenting on this connection */
  WSF_ASSERT(pConn->fragmenting == FALSE);

  hciLen = HciGetBufSize();
   11cbc:	f000 fb4e 	bl	1235c <HciGetBufSize>

  HCI_TRACE_INFO1("hciCoreTxAclStart len=%u", len);

  /* if acl len > controller acl buf len */
  if (len > hciLen)
   11cc0:	42b0      	cmp	r0, r6
   11cc2:	d24b      	bcs.n	11d5c <hciCoreTxAclStart+0xa8>
  {
    /* store remaining acl len = acl len - hci acl buf len */
    pConn->txAclRemLen = len - hciLen;

    /* store position for next fragment */
    pConn->pNextTxFrag = pData + hciLen;
   11cc4:	182b      	adds	r3, r5, r0
   11cc6:	6063      	str	r3, [r4, #4]
    pConn->txAclRemLen = len - hciLen;
   11cc8:	1a36      	subs	r6, r6, r0
    /* store information required for fragmentation */
    pConn->pTxAclPkt = pData;
    pConn->fragmenting = TRUE;

    /* set acl len in packet to hci acl buf len */
    UINT16_TO_BUF(&pData[2], hciLen);
   11cca:	0a03      	lsrs	r3, r0, #8
    pConn->fragmenting = TRUE;
   11ccc:	2201      	movs	r2, #1
    pConn->txAclRemLen = len - hciLen;
   11cce:	8266      	strh	r6, [r4, #18]
    pConn->pTxAclPkt = pData;
   11cd0:	6025      	str	r5, [r4, #0]
    pConn->fragmenting = TRUE;
   11cd2:	75a2      	strb	r2, [r4, #22]
    UINT16_TO_BUF(&pData[2], hciLen);
   11cd4:	70a8      	strb	r0, [r5, #2]
   11cd6:	70eb      	strb	r3, [r5, #3]
  pConn->outBufs++;
   11cd8:	7e63      	ldrb	r3, [r4, #25]
  if (hciCoreCb.availBufs > 0)
   11cda:	4e2f      	ldr	r6, [pc, #188]	; (11d98 <hciCoreTxAclStart+0xe4>)
  pConn->outBufs++;
   11cdc:	4413      	add	r3, r2
   11cde:	7663      	strb	r3, [r4, #25]
  hciTrSendAclData(pConn, pData);
   11ce0:	4629      	mov	r1, r5
   11ce2:	4620      	mov	r0, r4
   11ce4:	f001 fbc2 	bl	1346c <hciTrSendAclData>
  if (hciCoreCb.availBufs > 0)
   11ce8:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76
   11cec:	2b00      	cmp	r3, #0
   11cee:	d040      	beq.n	11d72 <hciCoreTxAclStart+0xbe>
    hciCoreCb.availBufs--;
   11cf0:	3b01      	subs	r3, #1
   11cf2:	b2db      	uxtb	r3, r3
   11cf4:	f886 3076 	strb.w	r3, [r6, #118]	; 0x76

    /* send the packet */
    hciCoreSendAclData(pConn, pData);

    /* send additional fragments while there are HCI buffers available */
    while ((hciCoreCb.availBufs > 0) && hciCoreTxAclContinue(pConn));
   11cf8:	2b00      	cmp	r3, #0
   11cfa:	d03a      	beq.n	11d72 <hciCoreTxAclStart+0xbe>
  }

  if (pConn != NULL)
  {
    /* get next fragment length */
    aclLen = (pConn->txAclRemLen < HciGetBufSize()) ? pConn->txAclRemLen : HciGetBufSize();
   11cfc:	8a65      	ldrh	r5, [r4, #18]
   11cfe:	f000 fb2d 	bl	1235c <HciGetBufSize>
   11d02:	4285      	cmp	r5, r0
   11d04:	d23a      	bcs.n	11d7c <hciCoreTxAclStart+0xc8>
   11d06:	8a65      	ldrh	r5, [r4, #18]

    if (aclLen > 0)
   11d08:	2d00      	cmp	r5, #0
   11d0a:	d032      	beq.n	11d72 <hciCoreTxAclStart+0xbe>
    {
      /* decrement remaining length */
      pConn->txAclRemLen -= aclLen;
   11d0c:	8a63      	ldrh	r3, [r4, #18]

      /* set handle in packet with continuation bit set */
      UINT16_TO_BUF(pConn->pNextTxFrag, (pConn->handle | HCI_PB_CONTINUE));
   11d0e:	6862      	ldr	r2, [r4, #4]
      pConn->txAclRemLen -= aclLen;
   11d10:	1b5b      	subs	r3, r3, r5
   11d12:	8263      	strh	r3, [r4, #18]
      UINT16_TO_BUF(pConn->pNextTxFrag, (pConn->handle | HCI_PB_CONTINUE));
   11d14:	8a23      	ldrh	r3, [r4, #16]
   11d16:	7013      	strb	r3, [r2, #0]
   11d18:	8a23      	ldrh	r3, [r4, #16]
   11d1a:	6862      	ldr	r2, [r4, #4]
   11d1c:	0a1b      	lsrs	r3, r3, #8
   11d1e:	f043 0310 	orr.w	r3, r3, #16
   11d22:	7053      	strb	r3, [r2, #1]

      /* set acl len in packet */
      UINT16_TO_BUF(&(pConn->pNextTxFrag[2]), aclLen);
   11d24:	6862      	ldr	r2, [r4, #4]
   11d26:	7095      	strb	r5, [r2, #2]
   11d28:	6862      	ldr	r2, [r4, #4]
   11d2a:	0a2b      	lsrs	r3, r5, #8
   11d2c:	70d3      	strb	r3, [r2, #3]
  pConn->outBufs++;
   11d2e:	7e63      	ldrb	r3, [r4, #25]
  hciTrSendAclData(pConn, pData);
   11d30:	6861      	ldr	r1, [r4, #4]
  pConn->outBufs++;
   11d32:	3301      	adds	r3, #1
   11d34:	7663      	strb	r3, [r4, #25]
  hciTrSendAclData(pConn, pData);
   11d36:	4620      	mov	r0, r4
   11d38:	f001 fb98 	bl	1346c <hciTrSendAclData>
  if (hciCoreCb.availBufs > 0)
   11d3c:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76
   11d40:	b303      	cbz	r3, 11d84 <hciCoreTxAclStart+0xd0>
    hciCoreCb.availBufs--;
   11d42:	3b01      	subs	r3, #1
   11d44:	b2db      	uxtb	r3, r3
   11d46:	f886 3076 	strb.w	r3, [r6, #118]	; 0x76

      /* send the packet */
      hciCoreSendAclData(pConn, pConn->pNextTxFrag);

      /* set up pointer to next fragment */
      if (pConn->txAclRemLen > 0)
   11d4a:	8a62      	ldrh	r2, [r4, #18]
   11d4c:	2a00      	cmp	r2, #0
   11d4e:	d0d3      	beq.n	11cf8 <hciCoreTxAclStart+0x44>
      {
        pConn->pNextTxFrag += aclLen;
   11d50:	6863      	ldr	r3, [r4, #4]
   11d52:	442b      	add	r3, r5
   11d54:	6063      	str	r3, [r4, #4]
    while ((hciCoreCb.availBufs > 0) && hciCoreTxAclContinue(pConn));
   11d56:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76
   11d5a:	e7cd      	b.n	11cf8 <hciCoreTxAclStart+0x44>
  pConn->outBufs++;
   11d5c:	7e63      	ldrb	r3, [r4, #25]
   11d5e:	3301      	adds	r3, #1
   11d60:	7663      	strb	r3, [r4, #25]
  hciTrSendAclData(pConn, pData);
   11d62:	4629      	mov	r1, r5
   11d64:	4620      	mov	r0, r4
   11d66:	f001 fb81 	bl	1346c <hciTrSendAclData>
  if (hciCoreCb.availBufs > 0)
   11d6a:	4a0b      	ldr	r2, [pc, #44]	; (11d98 <hciCoreTxAclStart+0xe4>)
   11d6c:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
   11d70:	b903      	cbnz	r3, 11d74 <hciCoreTxAclStart+0xc0>
}
   11d72:	bd70      	pop	{r4, r5, r6, pc}
    hciCoreCb.availBufs--;
   11d74:	3b01      	subs	r3, #1
   11d76:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
}
   11d7a:	bd70      	pop	{r4, r5, r6, pc}
    aclLen = (pConn->txAclRemLen < HciGetBufSize()) ? pConn->txAclRemLen : HciGetBufSize();
   11d7c:	f000 faee 	bl	1235c <HciGetBufSize>
   11d80:	4605      	mov	r5, r0
   11d82:	e7c1      	b.n	11d08 <hciCoreTxAclStart+0x54>
      if (pConn->txAclRemLen > 0)
   11d84:	8a63      	ldrh	r3, [r4, #18]
   11d86:	2b00      	cmp	r3, #0
   11d88:	d0f3      	beq.n	11d72 <hciCoreTxAclStart+0xbe>
        pConn->pNextTxFrag += aclLen;
   11d8a:	6863      	ldr	r3, [r4, #4]
   11d8c:	442b      	add	r3, r5
   11d8e:	6063      	str	r3, [r4, #4]
    while ((hciCoreCb.availBufs > 0) && hciCoreTxAclContinue(pConn));
   11d90:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76
   11d94:	e7b0      	b.n	11cf8 <hciCoreTxAclStart+0x44>
   11d96:	bf00      	nop
   11d98:	10004cc8 	.word	0x10004cc8

00011d9c <hciCoreTxReady>:
{
   11d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    hciCoreCb.availBufs += bufs;
   11da0:	4c50      	ldr	r4, [pc, #320]	; (11ee4 <hciCoreTxReady+0x148>)
{
   11da2:	b082      	sub	sp, #8
    hciCoreCb.availBufs += bufs;
   11da4:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
  if (bufs > 0)
   11da8:	b150      	cbz	r0, 11dc0 <hciCoreTxReady+0x24>
    if (hciCoreCb.availBufs > hciCoreCb.numBufs)
   11daa:	f894 2077 	ldrb.w	r2, [r4, #119]	; 0x77
    hciCoreCb.availBufs += bufs;
   11dae:	4403      	add	r3, r0
   11db0:	b2db      	uxtb	r3, r3
    if (hciCoreCb.availBufs > hciCoreCb.numBufs)
   11db2:	4293      	cmp	r3, r2
    hciCoreCb.availBufs += bufs;
   11db4:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
      hciCoreCb.availBufs = hciCoreCb.numBufs;
   11db8:	bf84      	itt	hi
   11dba:	f884 2076 	strbhi.w	r2, [r4, #118]	; 0x76
   11dbe:	4613      	movhi	r3, r2
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   11dc0:	4e49      	ldr	r6, [pc, #292]	; (11ee8 <hciCoreTxReady+0x14c>)
   11dc2:	f1a6 081c 	sub.w	r8, r6, #28
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   11dc6:	f1a6 0a38 	sub.w	sl, r6, #56	; 0x38
  while (hciCoreCb.availBufs > 0)
   11dca:	2b00      	cmp	r3, #0
   11dcc:	d035      	beq.n	11e3a <hciCoreTxReady+0x9e>
    if (pConn->handle != HCI_HANDLE_NONE && pConn->fragmenting)
   11dce:	8a22      	ldrh	r2, [r4, #16]
   11dd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11dd4:	429a      	cmp	r2, r3
   11dd6:	d001      	beq.n	11ddc <hciCoreTxReady+0x40>
   11dd8:	7da3      	ldrb	r3, [r4, #22]
   11dda:	bb8b      	cbnz	r3, 11e40 <hciCoreTxReady+0xa4>
   11ddc:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   11dde:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11de2:	429a      	cmp	r2, r3
   11de4:	d003      	beq.n	11dee <hciCoreTxReady+0x52>
   11de6:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   11dea:	2b00      	cmp	r3, #0
   11dec:	d169      	bne.n	11ec2 <hciCoreTxReady+0x126>
   11dee:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
   11df2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11df6:	429a      	cmp	r2, r3
   11df8:	d003      	beq.n	11e02 <hciCoreTxReady+0x66>
   11dfa:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
   11dfe:	2b00      	cmp	r3, #0
   11e00:	d161      	bne.n	11ec6 <hciCoreTxReady+0x12a>
      if ((pData = WsfMsgDeq(&hciCoreCb.aclQueue, &handlerId)) != NULL)
   11e02:	483a      	ldr	r0, [pc, #232]	; (11eec <hciCoreTxReady+0x150>)
   11e04:	f10d 0107 	add.w	r1, sp, #7
   11e08:	f001 fd28 	bl	1385c <WsfMsgDeq>
   11e0c:	4602      	mov	r2, r0
   11e0e:	b1a0      	cbz	r0, 11e3a <hciCoreTxReady+0x9e>
        BYTES_TO_UINT16(handle, pData);
   11e10:	7841      	ldrb	r1, [r0, #1]
   11e12:	7803      	ldrb	r3, [r0, #0]
   11e14:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    if (pConn->handle == handle)
   11e18:	8a21      	ldrh	r1, [r4, #16]
        BYTES_TO_UINT16(handle, pData);
   11e1a:	b29b      	uxth	r3, r3
    if (pConn->handle == handle)
   11e1c:	4299      	cmp	r1, r3
   11e1e:	d054      	beq.n	11eca <hciCoreTxReady+0x12e>
   11e20:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   11e22:	4299      	cmp	r1, r3
   11e24:	d05a      	beq.n	11edc <hciCoreTxReady+0x140>
   11e26:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
   11e2a:	4299      	cmp	r1, r3
   11e2c:	d058      	beq.n	11ee0 <hciCoreTxReady+0x144>
          WsfMsgFree(pData);
   11e2e:	f001 fcf9 	bl	13824 <WsfMsgFree>
  while (hciCoreCb.availBufs > 0)
   11e32:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
   11e36:	2b00      	cmp	r3, #0
   11e38:	d1c9      	bne.n	11dce <hciCoreTxReady+0x32>
}
   11e3a:	b002      	add	sp, #8
   11e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   11e40:	4655      	mov	r5, sl
    aclLen = (pConn->txAclRemLen < HciGetBufSize()) ? pConn->txAclRemLen : HciGetBufSize();
   11e42:	f8b5 9012 	ldrh.w	r9, [r5, #18]
   11e46:	f000 fa89 	bl	1235c <HciGetBufSize>
   11e4a:	4581      	cmp	r9, r0
   11e4c:	d22a      	bcs.n	11ea4 <hciCoreTxReady+0x108>
   11e4e:	8a6f      	ldrh	r7, [r5, #18]
    if (aclLen > 0)
   11e50:	2f00      	cmp	r7, #0
   11e52:	d0d6      	beq.n	11e02 <hciCoreTxReady+0x66>
      pConn->txAclRemLen -= aclLen;
   11e54:	8a6b      	ldrh	r3, [r5, #18]
      UINT16_TO_BUF(pConn->pNextTxFrag, (pConn->handle | HCI_PB_CONTINUE));
   11e56:	686a      	ldr	r2, [r5, #4]
   11e58:	8a29      	ldrh	r1, [r5, #16]
      pConn->txAclRemLen -= aclLen;
   11e5a:	1bdb      	subs	r3, r3, r7
   11e5c:	826b      	strh	r3, [r5, #18]
      UINT16_TO_BUF(pConn->pNextTxFrag, (pConn->handle | HCI_PB_CONTINUE));
   11e5e:	7011      	strb	r1, [r2, #0]
   11e60:	8a2b      	ldrh	r3, [r5, #16]
   11e62:	686a      	ldr	r2, [r5, #4]
   11e64:	0a1b      	lsrs	r3, r3, #8
   11e66:	f043 0310 	orr.w	r3, r3, #16
   11e6a:	7053      	strb	r3, [r2, #1]
      UINT16_TO_BUF(&(pConn->pNextTxFrag[2]), aclLen);
   11e6c:	686b      	ldr	r3, [r5, #4]
   11e6e:	709f      	strb	r7, [r3, #2]
   11e70:	686b      	ldr	r3, [r5, #4]
   11e72:	0a3a      	lsrs	r2, r7, #8
   11e74:	70da      	strb	r2, [r3, #3]
  pConn->outBufs++;
   11e76:	7e6b      	ldrb	r3, [r5, #25]
  hciTrSendAclData(pConn, pData);
   11e78:	6869      	ldr	r1, [r5, #4]
  pConn->outBufs++;
   11e7a:	3301      	adds	r3, #1
   11e7c:	766b      	strb	r3, [r5, #25]
  hciTrSendAclData(pConn, pData);
   11e7e:	4628      	mov	r0, r5
   11e80:	f001 faf4 	bl	1346c <hciTrSendAclData>
  if (hciCoreCb.availBufs > 0)
   11e84:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
   11e88:	b193      	cbz	r3, 11eb0 <hciCoreTxReady+0x114>
    hciCoreCb.availBufs--;
   11e8a:	3b01      	subs	r3, #1
   11e8c:	b2db      	uxtb	r3, r3
   11e8e:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
      if (pConn->txAclRemLen > 0)
   11e92:	8a6a      	ldrh	r2, [r5, #18]
   11e94:	2a00      	cmp	r2, #0
   11e96:	d098      	beq.n	11dca <hciCoreTxReady+0x2e>
        pConn->pNextTxFrag += aclLen;
   11e98:	686b      	ldr	r3, [r5, #4]
   11e9a:	443b      	add	r3, r7
   11e9c:	606b      	str	r3, [r5, #4]
  while (hciCoreCb.availBufs > 0)
   11e9e:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
   11ea2:	e792      	b.n	11dca <hciCoreTxReady+0x2e>
    aclLen = (pConn->txAclRemLen < HciGetBufSize()) ? pConn->txAclRemLen : HciGetBufSize();
   11ea4:	f000 fa5a 	bl	1235c <HciGetBufSize>
   11ea8:	4607      	mov	r7, r0
    if (aclLen > 0)
   11eaa:	2f00      	cmp	r7, #0
   11eac:	d0a9      	beq.n	11e02 <hciCoreTxReady+0x66>
   11eae:	e7d1      	b.n	11e54 <hciCoreTxReady+0xb8>
      if (pConn->txAclRemLen > 0)
   11eb0:	8a6b      	ldrh	r3, [r5, #18]
   11eb2:	2b00      	cmp	r3, #0
   11eb4:	d0c1      	beq.n	11e3a <hciCoreTxReady+0x9e>
        pConn->pNextTxFrag += aclLen;
   11eb6:	686b      	ldr	r3, [r5, #4]
   11eb8:	443b      	add	r3, r7
   11eba:	606b      	str	r3, [r5, #4]
  while (hciCoreCb.availBufs > 0)
   11ebc:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
   11ec0:	e783      	b.n	11dca <hciCoreTxReady+0x2e>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   11ec2:	4645      	mov	r5, r8
   11ec4:	e7bd      	b.n	11e42 <hciCoreTxReady+0xa6>
   11ec6:	4635      	mov	r5, r6
   11ec8:	e7bb      	b.n	11e42 <hciCoreTxReady+0xa6>
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   11eca:	4650      	mov	r0, sl
        BYTES_TO_UINT16(len, &pData[2]);
   11ecc:	78d3      	ldrb	r3, [r2, #3]
   11ece:	7891      	ldrb	r1, [r2, #2]
   11ed0:	eb01 2103 	add.w	r1, r1, r3, lsl #8
          hciCoreTxAclStart(pConn, len, pData);
   11ed4:	b289      	uxth	r1, r1
   11ed6:	f7ff feed 	bl	11cb4 <hciCoreTxAclStart>
   11eda:	e7aa      	b.n	11e32 <hciCoreTxReady+0x96>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   11edc:	4640      	mov	r0, r8
   11ede:	e7f5      	b.n	11ecc <hciCoreTxReady+0x130>
   11ee0:	4630      	mov	r0, r6
   11ee2:	e7f3      	b.n	11ecc <hciCoreTxReady+0x130>
   11ee4:	10004cc8 	.word	0x10004cc8
   11ee8:	10004d00 	.word	0x10004d00
   11eec:	10004d2c 	.word	0x10004d2c

00011ef0 <hciCoreConnClose>:
{
   11ef0:	b538      	push	{r3, r4, r5, lr}
    if (pConn->handle == handle)
   11ef2:	4c12      	ldr	r4, [pc, #72]	; (11f3c <hciCoreConnClose+0x4c>)
   11ef4:	8a22      	ldrh	r2, [r4, #16]
   11ef6:	4282      	cmp	r2, r0
   11ef8:	d00a      	beq.n	11f10 <hciCoreConnClose+0x20>
   11efa:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   11efc:	4282      	cmp	r2, r0
   11efe:	d006      	beq.n	11f0e <hciCoreConnClose+0x1e>
   11f00:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
   11f04:	4282      	cmp	r2, r0
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   11f06:	bf08      	it	eq
   11f08:	3438      	addeq	r4, #56	; 0x38
    if (pConn->handle == handle)
   11f0a:	d001      	beq.n	11f10 <hciCoreConnClose+0x20>
}
   11f0c:	bd38      	pop	{r3, r4, r5, pc}
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   11f0e:	341c      	adds	r4, #28
      if (pConn->pTxAclPkt != NULL)
   11f10:	6820      	ldr	r0, [r4, #0]
   11f12:	b118      	cbz	r0, 11f1c <hciCoreConnClose+0x2c>
        WsfMsgFree(pConn->pTxAclPkt);
   11f14:	f001 fc86 	bl	13824 <WsfMsgFree>
        pConn->pTxAclPkt = NULL;
   11f18:	2300      	movs	r3, #0
   11f1a:	6023      	str	r3, [r4, #0]
      if (pConn->pRxAclPkt != NULL)
   11f1c:	68a0      	ldr	r0, [r4, #8]
      pConn->fragmenting = FALSE;
   11f1e:	2500      	movs	r5, #0
   11f20:	75a5      	strb	r5, [r4, #22]
      if (pConn->pRxAclPkt != NULL)
   11f22:	b110      	cbz	r0, 11f2a <hciCoreConnClose+0x3a>
        WsfMsgFree(pConn->pRxAclPkt);
   11f24:	f001 fc7e 	bl	13824 <WsfMsgFree>
        pConn->pRxAclPkt = NULL;
   11f28:	60a5      	str	r5, [r4, #8]
      pConn->handle = HCI_HANDLE_NONE;
   11f2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
      hciCoreTxReady(pConn->outBufs);
   11f2e:	7e60      	ldrb	r0, [r4, #25]
      pConn->handle = HCI_HANDLE_NONE;
   11f30:	8223      	strh	r3, [r4, #16]
}
   11f32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      hciCoreTxReady(pConn->outBufs);
   11f36:	f7ff bf31 	b.w	11d9c <hciCoreTxReady>
   11f3a:	bf00      	nop
   11f3c:	10004cc8 	.word	0x10004cc8

00011f40 <hciCoreTxAclComplete>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxAclComplete(hciCoreConn_t *pConn, uint8_t *pData)
{
   11f40:	b538      	push	{r3, r4, r5, lr}
  /* if fragmenting */
  if (pConn->fragmenting)
   11f42:	7d83      	ldrb	r3, [r0, #22]
   11f44:	b11b      	cbz	r3, 11f4e <hciCoreTxAclComplete+0xe>
  {
    /* check if all fragments sent */
    if (pConn->txAclRemLen == 0)
   11f46:	8a45      	ldrh	r5, [r0, #18]
   11f48:	4604      	mov	r4, r0
   11f4a:	b13d      	cbz	r5, 11f5c <hciCoreTxAclComplete+0x1c>
  }
  else if (pData != NULL)
  {
    WsfMsgFree(pData);
  }
}
   11f4c:	bd38      	pop	{r3, r4, r5, pc}
  else if (pData != NULL)
   11f4e:	2900      	cmp	r1, #0
   11f50:	d0fc      	beq.n	11f4c <hciCoreTxAclComplete+0xc>
}
   11f52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    WsfMsgFree(pData);
   11f56:	4608      	mov	r0, r1
   11f58:	f001 bc64 	b.w	13824 <WsfMsgFree>
      WsfMsgFree(pConn->pTxAclPkt);
   11f5c:	6800      	ldr	r0, [r0, #0]
   11f5e:	f001 fc61 	bl	13824 <WsfMsgFree>
      pConn->fragmenting = FALSE;
   11f62:	75a5      	strb	r5, [r4, #22]
      pConn->pTxAclPkt = NULL;
   11f64:	6025      	str	r5, [r4, #0]
}
   11f66:	bd38      	pop	{r3, r4, r5, pc}

00011f68 <hciCoreAclReassembly>:
 *
 *  \return pointer to ACL packet to send, or NULL if no packet to send.
 */
/*************************************************************************************************/
uint8_t *hciCoreAclReassembly(uint8_t *pData)
{
   11f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (pConn->handle == handle)
   11f6c:	4e4b      	ldr	r6, [pc, #300]	; (1209c <hciCoreAclReassembly+0x134>)
  uint16_t      aclLen;
  uint16_t      l2cLen;
  uint16_t      pbf;
  bool_t        freeData = TRUE;

  BYTES_TO_UINT16(handle, pData);
   11f6e:	7841      	ldrb	r1, [r0, #1]
   11f70:	7804      	ldrb	r4, [r0, #0]
  pbf = handle & HCI_PB_FLAG_MASK;
  handle &= HCI_HANDLE_MASK;
  BYTES_TO_UINT16(aclLen, &pData[2]);
   11f72:	78c3      	ldrb	r3, [r0, #3]
   11f74:	7882      	ldrb	r2, [r0, #2]
  BYTES_TO_UINT16(handle, pData);
   11f76:	eb04 2401 	add.w	r4, r4, r1, lsl #8
    if (pConn->handle == handle)
   11f7a:	8a31      	ldrh	r1, [r6, #16]
  BYTES_TO_UINT16(aclLen, &pData[2]);
   11f7c:	eb02 2203 	add.w	r2, r2, r3, lsl #8
  pbf = handle & HCI_PB_FLAG_MASK;
   11f80:	f404 5340 	and.w	r3, r4, #12288	; 0x3000
  handle &= HCI_HANDLE_MASK;
   11f84:	f3c4 040b 	ubfx	r4, r4, #0, #12
    if (pConn->handle == handle)
   11f88:	42a1      	cmp	r1, r4
{
   11f8a:	4605      	mov	r5, r0
  BYTES_TO_UINT16(aclLen, &pData[2]);
   11f8c:	b297      	uxth	r7, r2
    if (pConn->handle == handle)
   11f8e:	d00d      	beq.n	11fac <hciCoreAclReassembly+0x44>
   11f90:	8db2      	ldrh	r2, [r6, #44]	; 0x2c
   11f92:	42a2      	cmp	r2, r4
   11f94:	d049      	beq.n	1202a <hciCoreAclReassembly+0xc2>
   11f96:	f8b6 2048 	ldrh.w	r2, [r6, #72]	; 0x48
   11f9a:	42a2      	cmp	r2, r4
   11f9c:	d07a      	beq.n	12094 <hciCoreAclReassembly+0x12c>
  uint8_t       *pDataRtn = NULL;
   11f9e:	2400      	movs	r4, #0
    HCI_TRACE_WARN1("pkt rcvd on unknown handle=0x%04x", (handle & HCI_HANDLE_MASK));
  }

  if (freeData)
  {
    WsfMsgFree(pData);
   11fa0:	4628      	mov	r0, r5
   11fa2:	f001 fc3f 	bl	13824 <WsfMsgFree>
  }

  return pDataRtn;
}
   11fa6:	4620      	mov	r0, r4
   11fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   11fac:	46b0      	mov	r8, r6
    if (pbf == HCI_PB_START_C2H)
   11fae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   11fb2:	d022      	beq.n	11ffa <hciCoreAclReassembly+0x92>
    else if (pbf == HCI_PB_CONTINUE)
   11fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   11fb8:	d1f1      	bne.n	11f9e <hciCoreAclReassembly+0x36>
      if (pConn->pRxAclPkt != NULL)
   11fba:	f8d8 3008 	ldr.w	r3, [r8, #8]
   11fbe:	2b00      	cmp	r3, #0
   11fc0:	d0ed      	beq.n	11f9e <hciCoreAclReassembly+0x36>
        if (aclLen <= pConn->rxAclRemLen)
   11fc2:	f8b8 3014 	ldrh.w	r3, [r8, #20]
   11fc6:	42bb      	cmp	r3, r7
   11fc8:	d3e9      	bcc.n	11f9e <hciCoreAclReassembly+0x36>
          memcpy(pConn->pNextRxFrag, &pData[HCI_ACL_HDR_LEN], aclLen);
   11fca:	463a      	mov	r2, r7
   11fcc:	f8d8 000c 	ldr.w	r0, [r8, #12]
   11fd0:	1d29      	adds	r1, r5, #4
   11fd2:	f7fa f895 	bl	c100 <memcpy>
          pConn->rxAclRemLen -= aclLen;
   11fd6:	f8b8 3014 	ldrh.w	r3, [r8, #20]
          pConn->pNextRxFrag += aclLen;
   11fda:	f8d8 200c 	ldr.w	r2, [r8, #12]
          pConn->rxAclRemLen -= aclLen;
   11fde:	1bdb      	subs	r3, r3, r7
          pConn->pNextRxFrag += aclLen;
   11fe0:	443a      	add	r2, r7
          pConn->rxAclRemLen -= aclLen;
   11fe2:	b29b      	uxth	r3, r3
          pConn->pNextRxFrag += aclLen;
   11fe4:	f8c8 200c 	str.w	r2, [r8, #12]
          pConn->rxAclRemLen -= aclLen;
   11fe8:	f8a8 3014 	strh.w	r3, [r8, #20]
          if (pConn->rxAclRemLen == 0)
   11fec:	2b00      	cmp	r3, #0
   11fee:	d1d6      	bne.n	11f9e <hciCoreAclReassembly+0x36>
            pDataRtn = pConn->pRxAclPkt;
   11ff0:	f8d8 4008 	ldr.w	r4, [r8, #8]
            pConn->pRxAclPkt = NULL;
   11ff4:	f8c8 3008 	str.w	r3, [r8, #8]
  if (freeData)
   11ff8:	e7d2      	b.n	11fa0 <hciCoreAclReassembly+0x38>
      if (pConn->pRxAclPkt != NULL)
   11ffa:	f8d8 0008 	ldr.w	r0, [r8, #8]
   11ffe:	b120      	cbz	r0, 1200a <hciCoreAclReassembly+0xa2>
        WsfMsgFree(pConn->pRxAclPkt);
   12000:	f001 fc10 	bl	13824 <WsfMsgFree>
        pConn->pRxAclPkt = NULL;
   12004:	2300      	movs	r3, #0
   12006:	f8c8 3008 	str.w	r3, [r8, #8]
      if (aclLen >= L2C_HDR_LEN)
   1200a:	2f03      	cmp	r7, #3
   1200c:	d9c7      	bls.n	11f9e <hciCoreAclReassembly+0x36>
        if ((l2cLen + L2C_HDR_LEN) > hciCoreCb.maxRxAclLen)
   1200e:	f8b6 2070 	ldrh.w	r2, [r6, #112]	; 0x70
        BYTES_TO_UINT16(l2cLen, &pData[4]);
   12012:	796b      	ldrb	r3, [r5, #5]
   12014:	792e      	ldrb	r6, [r5, #4]
   12016:	eb06 2603 	add.w	r6, r6, r3, lsl #8
   1201a:	b2b6      	uxth	r6, r6
        if ((l2cLen + L2C_HDR_LEN) > hciCoreCb.maxRxAclLen)
   1201c:	1cf3      	adds	r3, r6, #3
   1201e:	4293      	cmp	r3, r2
   12020:	dabd      	bge.n	11f9e <hciCoreAclReassembly+0x36>
        else if ((l2cLen + L2C_HDR_LEN) > aclLen)
   12022:	42bb      	cmp	r3, r7
   12024:	da04      	bge.n	12030 <hciCoreAclReassembly+0xc8>
   12026:	462c      	mov	r4, r5
  return pDataRtn;
   12028:	e7bd      	b.n	11fa6 <hciCoreAclReassembly+0x3e>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   1202a:	f106 081c 	add.w	r8, r6, #28
   1202e:	e7be      	b.n	11fae <hciCoreAclReassembly+0x46>
          if ((pConn->pRxAclPkt = WsfMsgDataAlloc(l2cLen + L2C_HDR_LEN + HCI_ACL_HDR_LEN, 0)) != NULL)
   12030:	f106 0008 	add.w	r0, r6, #8
   12034:	b280      	uxth	r0, r0
   12036:	2100      	movs	r1, #0
   12038:	f001 fbe2 	bl	13800 <WsfMsgDataAlloc>
   1203c:	f8c8 0008 	str.w	r0, [r8, #8]
   12040:	2800      	cmp	r0, #0
   12042:	d0ac      	beq.n	11f9e <hciCoreAclReassembly+0x36>
            UINT16_TO_BSTREAM(pConn->pNextRxFrag, handle);
   12044:	1c43      	adds	r3, r0, #1
   12046:	f8c8 300c 	str.w	r3, [r8, #12]
   1204a:	7004      	strb	r4, [r0, #0]
   1204c:	f8d8 300c 	ldr.w	r3, [r8, #12]
   12050:	0a24      	lsrs	r4, r4, #8
   12052:	1c5a      	adds	r2, r3, #1
   12054:	f8c8 200c 	str.w	r2, [r8, #12]
   12058:	701c      	strb	r4, [r3, #0]
            UINT16_TO_BSTREAM(pConn->pNextRxFrag, l2cLen + L2C_HDR_LEN);
   1205a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1205e:	3604      	adds	r6, #4
   12060:	1c59      	adds	r1, r3, #1
   12062:	f8c8 100c 	str.w	r1, [r8, #12]
   12066:	701e      	strb	r6, [r3, #0]
   12068:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1206c:	1230      	asrs	r0, r6, #8
   1206e:	1c5c      	adds	r4, r3, #1
   12070:	f8c8 400c 	str.w	r4, [r8, #12]
   12074:	7018      	strb	r0, [r3, #0]
            memcpy(pConn->pNextRxFrag, &pData[4], aclLen);
   12076:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1207a:	463a      	mov	r2, r7
   1207c:	1d29      	adds	r1, r5, #4
   1207e:	f7fa f83f 	bl	c100 <memcpy>
            pConn->pNextRxFrag += aclLen;
   12082:	f8d8 300c 	ldr.w	r3, [r8, #12]
            pConn->rxAclRemLen = l2cLen + L2C_HDR_LEN - aclLen;
   12086:	1bf6      	subs	r6, r6, r7
            pConn->pNextRxFrag += aclLen;
   12088:	443b      	add	r3, r7
   1208a:	f8c8 300c 	str.w	r3, [r8, #12]
            pConn->rxAclRemLen = l2cLen + L2C_HDR_LEN - aclLen;
   1208e:	f8a8 6014 	strh.w	r6, [r8, #20]
   12092:	e784      	b.n	11f9e <hciCoreAclReassembly+0x36>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   12094:	f106 0838 	add.w	r8, r6, #56	; 0x38
   12098:	e789      	b.n	11fae <hciCoreAclReassembly+0x46>
   1209a:	bf00      	nop
   1209c:	10004cc8 	.word	0x10004cc8

000120a0 <HciCoreInit>:
  hciCoreCb.maxRxAclLen = HCI_MAX_RX_ACL_LEN;
  hciCoreCb.aclQueueHi = HCI_ACL_QUEUE_HI;
  hciCoreCb.aclQueueLo = HCI_ACL_QUEUE_LO;

  #if defined(AM_PART_APOLLO3) || defined(AM_PART_APOLLO3P)
    if (APOLLO3_GE_B0)
   120a0:	4a10      	ldr	r2, [pc, #64]	; (120e4 <HciCoreInit+0x44>)
  WSF_QUEUE_INIT(&hciCoreCb.aclQueue);
   120a2:	4b11      	ldr	r3, [pc, #68]	; (120e8 <HciCoreInit+0x48>)
    if (APOLLO3_GE_B0)
   120a4:	68d2      	ldr	r2, [r2, #12]
   120a6:	b2d2      	uxtb	r2, r2
    hciCoreCb.conn[i].handle = HCI_HANDLE_NONE;
   120a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    if (APOLLO3_GE_B0)
   120ac:	2a20      	cmp	r2, #32
    {
      // B0 has only less internal ACL buffers
      hciCoreCb.aclQueueHi--;
   120ae:	bf88      	it	hi
   120b0:	f44f 7201 	movhi.w	r2, #516	; 0x204
    hciCoreCb.conn[i].handle = HCI_HANDLE_NONE;
   120b4:	8219      	strh	r1, [r3, #16]
   120b6:	8599      	strh	r1, [r3, #44]	; 0x2c
   120b8:	f8a3 1048 	strh.w	r1, [r3, #72]	; 0x48
  hciCoreCb.aclQueueHi = HCI_ACL_QUEUE_HI;
   120bc:	f240 3105 	movw	r1, #773	; 0x305
  WSF_QUEUE_INIT(&hciCoreCb.aclQueue);
   120c0:	f04f 0000 	mov.w	r0, #0
  hciCoreCb.maxRxAclLen = HCI_MAX_RX_ACL_LEN;
   120c4:	f04f 0c1b 	mov.w	ip, #27
  hciCoreCb.aclQueueHi = HCI_ACL_QUEUE_HI;
   120c8:	f8a3 1074 	strh.w	r1, [r3, #116]	; 0x74
      hciCoreCb.aclQueueHi--;
   120cc:	bf88      	it	hi
   120ce:	f8a3 2074 	strhhi.w	r2, [r3, #116]	; 0x74
      hciCoreCb.aclQueueLo--;
    }
  #endif
  hciCoreCb.extResetSeq = NULL;
   120d2:	2200      	movs	r2, #0
  WSF_QUEUE_INIT(&hciCoreCb.aclQueue);
   120d4:	e9c3 0019 	strd	r0, r0, [r3, #100]	; 0x64
  hciCoreCb.maxRxAclLen = HCI_MAX_RX_ACL_LEN;
   120d8:	f8a3 c070 	strh.w	ip, [r3, #112]	; 0x70
  hciCoreCb.extResetSeq = NULL;
   120dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  hciCoreInit();
   120e0:	f000 b8a4 	b.w	1222c <hciCoreInit>
   120e4:	40020000 	.word	0x40020000
   120e8:	10004cc8 	.word	0x10004cc8

000120ec <HciResetSequence>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciResetSequence(void)
{
   120ec:	b5f0      	push	{r4, r5, r6, r7, lr}

  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;

  // free any pending incoming packets
  while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   120ee:	4d1e      	ldr	r5, [pc, #120]	; (12168 <HciResetSequence+0x7c>)
{
   120f0:	b083      	sub	sp, #12
  while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   120f2:	e001      	b.n	120f8 <HciResetSequence+0xc>
  {
    /* Free buffer */
    WsfMsgFree(pBuf);
   120f4:	f001 fb96 	bl	13824 <WsfMsgFree>
  while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   120f8:	f10d 0107 	add.w	r1, sp, #7
   120fc:	4628      	mov	r0, r5
   120fe:	f001 fbad 	bl	1385c <WsfMsgDeq>
   12102:	4604      	mov	r4, r0
   12104:	2800      	cmp	r0, #0
   12106:	d1f5      	bne.n	120f4 <HciResetSequence+0x8>
   12108:	4d18      	ldr	r5, [pc, #96]	; (1216c <HciResetSequence+0x80>)
      WsfMsgFree(pConn->pRxAclPkt);
      pConn->pRxAclPkt = NULL;
    }

    /* free structure */
    pConn->handle = HCI_HANDLE_NONE;
   1210a:	f64f 77ff 	movw	r7, #65535	; 0xffff
   1210e:	f105 0654 	add.w	r6, r5, #84	; 0x54
    if (pConn->pTxAclPkt != NULL)
   12112:	f855 0c1c 	ldr.w	r0, [r5, #-28]
   12116:	b118      	cbz	r0, 12120 <HciResetSequence+0x34>
      WsfMsgFree(pConn->pTxAclPkt);
   12118:	f001 fb84 	bl	13824 <WsfMsgFree>
      pConn->pTxAclPkt = NULL;
   1211c:	f845 4c1c 	str.w	r4, [r5, #-28]
    if (pConn->pRxAclPkt != NULL)
   12120:	f855 0c14 	ldr.w	r0, [r5, #-20]
    pConn->fragmenting = FALSE;
   12124:	f805 4c06 	strb.w	r4, [r5, #-6]
    if (pConn->pRxAclPkt != NULL)
   12128:	b198      	cbz	r0, 12152 <HciResetSequence+0x66>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   1212a:	351c      	adds	r5, #28
      WsfMsgFree(pConn->pRxAclPkt);
   1212c:	f001 fb7a 	bl	13824 <WsfMsgFree>

    /* optional: iterate through tx ACL queue and free any buffers with this handle */

    /* outstanding buffers are now available; service TX data path */
    hciCoreTxReady(pConn->outBufs);
   12130:	f815 0c1f 	ldrb.w	r0, [r5, #-31]
      pConn->pRxAclPkt = NULL;
   12134:	f845 4c30 	str.w	r4, [r5, #-48]
    pConn->handle = HCI_HANDLE_NONE;
   12138:	f825 7c28 	strh.w	r7, [r5, #-40]
    hciCoreTxReady(pConn->outBufs);
   1213c:	f7ff fe2e 	bl	11d9c <hciCoreTxReady>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   12140:	42ae      	cmp	r6, r5
   12142:	d1e6      	bne.n	12112 <HciResetSequence+0x26>

  }

  /* set resetting state */
  hciCb.resetting = TRUE;
   12144:	4b08      	ldr	r3, [pc, #32]	; (12168 <HciResetSequence+0x7c>)
   12146:	2201      	movs	r2, #1
   12148:	765a      	strb	r2, [r3, #25]

  /* start the reset sequence */
  hciCoreResetStart();
   1214a:	f005 f9e7 	bl	1751c <hciCoreResetStart>
}
   1214e:	b003      	add	sp, #12
   12150:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hciCoreTxReady(pConn->outBufs);
   12152:	f815 0c03 	ldrb.w	r0, [r5, #-3]
    pConn->handle = HCI_HANDLE_NONE;
   12156:	f825 7c0c 	strh.w	r7, [r5, #-12]
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   1215a:	351c      	adds	r5, #28
    hciCoreTxReady(pConn->outBufs);
   1215c:	f7ff fe1e 	bl	11d9c <hciCoreTxReady>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   12160:	42b5      	cmp	r5, r6
   12162:	d1d6      	bne.n	12112 <HciResetSequence+0x26>
   12164:	e7ee      	b.n	12144 <HciResetSequence+0x58>
   12166:	bf00      	nop
   12168:	10004c50 	.word	0x10004c50
   1216c:	10004ce4 	.word	0x10004ce4

00012170 <HciSetMaxRxAclLen>:
 *  \return None.
 */
/*************************************************************************************************/
void HciSetMaxRxAclLen(uint16_t len)
{
  hciCoreCb.maxRxAclLen = len;
   12170:	4b01      	ldr	r3, [pc, #4]	; (12178 <HciSetMaxRxAclLen+0x8>)
   12172:	f8a3 0070 	strh.w	r0, [r3, #112]	; 0x70
}
   12176:	4770      	bx	lr
   12178:	10004cc8 	.word	0x10004cc8

0001217c <HciSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSendAclData(uint8_t *pData)
{
   1217c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (pConn->handle == handle)
   12180:	4f27      	ldr	r7, [pc, #156]	; (12220 <HciSendAclData+0xa4>)
  uint16_t        handle;
  uint16_t        len;
  hciCoreConn_t   *pConn;

  /* parse handle and length */
  BYTES_TO_UINT16(handle, pData);
   12182:	7843      	ldrb	r3, [r0, #1]
   12184:	7805      	ldrb	r5, [r0, #0]
   12186:	eb05 2503 	add.w	r5, r5, r3, lsl #8
    if (pConn->handle == handle)
   1218a:	8a3b      	ldrh	r3, [r7, #16]
  BYTES_TO_UINT16(handle, pData);
   1218c:	b2ad      	uxth	r5, r5
    if (pConn->handle == handle)
   1218e:	42ab      	cmp	r3, r5
{
   12190:	4680      	mov	r8, r0
    if (pConn->handle == handle)
   12192:	d00a      	beq.n	121aa <HciSendAclData+0x2e>
   12194:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   12196:	42ab      	cmp	r3, r5
   12198:	d03c      	beq.n	12214 <HciSendAclData+0x98>
   1219a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
   1219e:	42ab      	cmp	r3, r5
   121a0:	d03b      	beq.n	1221a <HciSendAclData+0x9e>
    /* discard buffer */
    WsfMsgFree(pData);

    HCI_TRACE_WARN1("HciSendAclData discarding buffer, handle=%u", handle);
  }
}
   121a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    WsfMsgFree(pData);
   121a6:	f001 bb3d 	b.w	13824 <WsfMsgFree>
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   121aa:	463e      	mov	r6, r7
  BYTES_TO_UINT16(len, &pData[2]);
   121ac:	f898 3003 	ldrb.w	r3, [r8, #3]
   121b0:	f898 4002 	ldrb.w	r4, [r8, #2]
    if (WsfQueueEmpty(&hciCoreCb.aclQueue) && hciCoreCb.availBufs > 0)
   121b4:	481b      	ldr	r0, [pc, #108]	; (12224 <HciSendAclData+0xa8>)
  BYTES_TO_UINT16(len, &pData[2]);
   121b6:	eb04 2403 	add.w	r4, r4, r3, lsl #8
   121ba:	b2a4      	uxth	r4, r4
    if (WsfQueueEmpty(&hciCoreCb.aclQueue) && hciCoreCb.availBufs > 0)
   121bc:	f001 fd4e 	bl	13c5c <WsfQueueEmpty>
   121c0:	b110      	cbz	r0, 121c8 <HciSendAclData+0x4c>
   121c2:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
   121c6:	b9fb      	cbnz	r3, 12208 <HciSendAclData+0x8c>
      WsfMsgEnq(&hciCoreCb.aclQueue, 0, pData);
   121c8:	4816      	ldr	r0, [pc, #88]	; (12224 <HciSendAclData+0xa8>)
   121ca:	4642      	mov	r2, r8
   121cc:	2100      	movs	r1, #0
   121ce:	f001 fb3f 	bl	13850 <WsfMsgEnq>
    pConn->queuedBufs += ((len - 1) / HciGetBufSize()) + 1;
   121d2:	f000 f8c3 	bl	1235c <HciGetBufSize>
   121d6:	7e32      	ldrb	r2, [r6, #24]
   121d8:	3c01      	subs	r4, #1
   121da:	fb94 f4f0 	sdiv	r4, r4, r0
   121de:	1c63      	adds	r3, r4, #1
   121e0:	4413      	add	r3, r2
   121e2:	b2db      	uxtb	r3, r3
   121e4:	7633      	strb	r3, [r6, #24]
    if (pConn->queuedBufs >= hciCoreCb.aclQueueHi && pConn->flowDisabled == FALSE)
   121e6:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
   121ea:	429a      	cmp	r2, r3
   121ec:	d901      	bls.n	121f2 <HciSendAclData+0x76>
}
   121ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pConn->queuedBufs >= hciCoreCb.aclQueueHi && pConn->flowDisabled == FALSE)
   121f2:	7df3      	ldrb	r3, [r6, #23]
   121f4:	2b00      	cmp	r3, #0
   121f6:	d1fa      	bne.n	121ee <HciSendAclData+0x72>
      (*hciCb.flowCback)(handle, TRUE);
   121f8:	4b0b      	ldr	r3, [pc, #44]	; (12228 <HciSendAclData+0xac>)
      pConn->flowDisabled = TRUE;
   121fa:	2101      	movs	r1, #1
   121fc:	75f1      	strb	r1, [r6, #23]
      (*hciCb.flowCback)(handle, TRUE);
   121fe:	4628      	mov	r0, r5
   12200:	695b      	ldr	r3, [r3, #20]
}
   12202:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      (*hciCb.flowCback)(handle, TRUE);
   12206:	4718      	bx	r3
      hciCoreTxAclStart(pConn, len, pData);
   12208:	4642      	mov	r2, r8
   1220a:	4621      	mov	r1, r4
   1220c:	4630      	mov	r0, r6
   1220e:	f7ff fd51 	bl	11cb4 <hciCoreTxAclStart>
   12212:	e7de      	b.n	121d2 <HciSendAclData+0x56>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   12214:	f107 061c 	add.w	r6, r7, #28
   12218:	e7c8      	b.n	121ac <HciSendAclData+0x30>
   1221a:	f107 0638 	add.w	r6, r7, #56	; 0x38
   1221e:	e7c5      	b.n	121ac <HciSendAclData+0x30>
   12220:	10004cc8 	.word	0x10004cc8
   12224:	10004d2c 	.word	0x10004d2c
   12228:	10004c50 	.word	0x10004c50

0001222c <hciCoreInit>:
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreInit(void)
{
  hciCmdInit();
   1222c:	f7fe bbfa 	b.w	10a24 <hciCmdInit>

00012230 <hciCoreNumCmplPkts>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreNumCmplPkts(uint8_t *pMsg)
{
   12230:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t        handle;
  uint8_t         availBufs = 0;
  hciCoreConn_t   *pConn;

  /* parse number of handles */
  BSTREAM_TO_UINT8(numHandles, pMsg);
   12234:	f890 a000 	ldrb.w	sl, [r0]

  /* for each handle in event */
  while (numHandles-- > 0)
   12238:	f1ba 0f00 	cmp.w	sl, #0
   1223c:	d03b      	beq.n	122b6 <hciCoreNumCmplPkts+0x86>
   1223e:	f10a 36ff 	add.w	r6, sl, #4294967295
   12242:	b2f6      	uxtb	r6, r6
   12244:	f100 0309 	add.w	r3, r0, #9
  uint8_t         availBufs = 0;
   12248:	f04f 0a00 	mov.w	sl, #0

      /* increment available buffer count */
      availBufs += (uint8_t) bufs;

      /* call flow control callback */
      if (pConn->flowDisabled && pConn->queuedBufs <= hciCoreCb.aclQueueLo)
   1224c:	4f1c      	ldr	r7, [pc, #112]	; (122c0 <hciCoreNumCmplPkts+0x90>)
      {
        pConn->flowDisabled = FALSE;
        (*hciCb.flowCback)(handle, FALSE);
   1224e:	f8df 9074 	ldr.w	r9, [pc, #116]	; 122c4 <hciCoreNumCmplPkts+0x94>
   12252:	1d44      	adds	r4, r0, #5
   12254:	eb03 0686 	add.w	r6, r3, r6, lsl #2
        pConn->flowDisabled = FALSE;
   12258:	46d0      	mov	r8, sl
    BSTREAM_TO_UINT16(handle, pMsg);
   1225a:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1225e:	f814 5c04 	ldrb.w	r5, [r4, #-4]
    BSTREAM_TO_UINT16(bufs, pMsg);
   12262:	f814 bc02 	ldrb.w	fp, [r4, #-2]
    BSTREAM_TO_UINT16(handle, pMsg);
   12266:	eb05 2503 	add.w	r5, r5, r3, lsl #8
   1226a:	b2ad      	uxth	r5, r5
    if ((pConn = hciCoreConnByHandle(handle)) != NULL)
   1226c:	4628      	mov	r0, r5
   1226e:	f7ff fcf1 	bl	11c54 <hciCoreConnByHandle>
  while (numHandles-- > 0)
   12272:	3404      	adds	r4, #4
      pConn->outBufs -= (uint8_t) bufs;
   12274:	465a      	mov	r2, fp
      availBufs += (uint8_t) bufs;
   12276:	eb0b 0c0a 	add.w	ip, fp, sl
    if ((pConn = hciCoreConnByHandle(handle)) != NULL)
   1227a:	4603      	mov	r3, r0
   1227c:	b1c8      	cbz	r0, 122b2 <hciCoreNumCmplPkts+0x82>
      pConn->queuedBufs -= (uint8_t) bufs;
   1227e:	7e00      	ldrb	r0, [r0, #24]
      pConn->outBufs -= (uint8_t) bufs;
   12280:	7e59      	ldrb	r1, [r3, #25]
      if (pConn->flowDisabled && pConn->queuedBufs <= hciCoreCb.aclQueueLo)
   12282:	f893 e017 	ldrb.w	lr, [r3, #23]
      pConn->queuedBufs -= (uint8_t) bufs;
   12286:	1a80      	subs	r0, r0, r2
   12288:	b2c0      	uxtb	r0, r0
      pConn->outBufs -= (uint8_t) bufs;
   1228a:	1a8a      	subs	r2, r1, r2
   1228c:	765a      	strb	r2, [r3, #25]
      pConn->queuedBufs -= (uint8_t) bufs;
   1228e:	7618      	strb	r0, [r3, #24]
      availBufs += (uint8_t) bufs;
   12290:	fa5f fa8c 	uxtb.w	sl, ip
      if (pConn->flowDisabled && pConn->queuedBufs <= hciCoreCb.aclQueueLo)
   12294:	f1be 0f00 	cmp.w	lr, #0
   12298:	d00b      	beq.n	122b2 <hciCoreNumCmplPkts+0x82>
   1229a:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
   1229e:	4282      	cmp	r2, r0
        (*hciCb.flowCback)(handle, FALSE);
   122a0:	f04f 0100 	mov.w	r1, #0
   122a4:	4628      	mov	r0, r5
      if (pConn->flowDisabled && pConn->queuedBufs <= hciCoreCb.aclQueueLo)
   122a6:	d304      	bcc.n	122b2 <hciCoreNumCmplPkts+0x82>
        pConn->flowDisabled = FALSE;
   122a8:	f883 8017 	strb.w	r8, [r3, #23]
        (*hciCb.flowCback)(handle, FALSE);
   122ac:	f8d9 3014 	ldr.w	r3, [r9, #20]
   122b0:	4798      	blx	r3
  while (numHandles-- > 0)
   122b2:	42a6      	cmp	r6, r4
   122b4:	d1d1      	bne.n	1225a <hciCoreNumCmplPkts+0x2a>
      }
    }
  }

  /* service TX data path */
  hciCoreTxReady(availBufs);
   122b6:	4650      	mov	r0, sl
}
   122b8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hciCoreTxReady(availBufs);
   122bc:	f7ff bd6e 	b.w	11d9c <hciCoreTxReady>
   122c0:	10004cc8 	.word	0x10004cc8
   122c4:	10004c50 	.word	0x10004c50

000122c8 <hciCoreRecv>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreRecv(uint8_t msgType, uint8_t *pCoreRecvMsg)
{
   122c8:	b510      	push	{r4, lr}
  {
    HCI_PDUMP_RX_ACL(*(pCoreRecvMsg + 2) + HCI_ACL_HDR_LEN, pCoreRecvMsg);
  }

  /* queue buffer */
  WsfMsgEnq(&hciCb.rxQueue, (wsfHandlerId_t) msgType, pCoreRecvMsg);
   122ca:	4c06      	ldr	r4, [pc, #24]	; (122e4 <hciCoreRecv+0x1c>)
{
   122cc:	4603      	mov	r3, r0
   122ce:	460a      	mov	r2, r1
  WsfMsgEnq(&hciCb.rxQueue, (wsfHandlerId_t) msgType, pCoreRecvMsg);
   122d0:	4620      	mov	r0, r4
   122d2:	4619      	mov	r1, r3
   122d4:	f001 fabc 	bl	13850 <WsfMsgEnq>

  /* set event */
  WsfSetEvent(hciCb.handlerId, HCI_EVT_RX);
   122d8:	7e20      	ldrb	r0, [r4, #24]
   122da:	2101      	movs	r1, #1
}
   122dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  WsfSetEvent(hciCb.handlerId, HCI_EVT_RX);
   122e0:	f001 baee 	b.w	138c0 <WsfSetEvent>
   122e4:	10004c50 	.word	0x10004c50

000122e8 <HciCoreHandler>:
{
  uint8_t         *pBuf;
  wsfHandlerId_t  handlerId;
  
  /* Handle message */
  if (pMsg != NULL)
   122e8:	b119      	cbz	r1, 122f2 <HciCoreHandler+0xa>
  {
    /* Handle HCI command timeout */
    if (pMsg->event == HCI_MSG_CMD_TIMEOUT)
   122ea:	788b      	ldrb	r3, [r1, #2]
   122ec:	2b01      	cmp	r3, #1
   122ee:	d028      	beq.n	12342 <HciCoreHandler+0x5a>
   122f0:	4770      	bx	lr
    {
      hciCmdTimeout(pMsg);
    }
  }
  /* Handle events */
  else if (event & HCI_EVT_RX)
   122f2:	07c3      	lsls	r3, r0, #31
   122f4:	d5fc      	bpl.n	122f0 <HciCoreHandler+0x8>
{
   122f6:	b530      	push	{r4, r5, lr}
   122f8:	4d15      	ldr	r5, [pc, #84]	; (12350 <HciCoreHandler+0x68>)
   122fa:	b083      	sub	sp, #12
  {
    /* Process rx queue */
    while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   122fc:	f10d 0107 	add.w	r1, sp, #7
   12300:	4628      	mov	r0, r5
   12302:	f001 faab 	bl	1385c <WsfMsgDeq>
   12306:	4604      	mov	r4, r0
   12308:	b188      	cbz	r0, 1232e <HciCoreHandler+0x46>
    {
      /* Handle incoming HCI events */
      if (handlerId == HCI_EVT_TYPE)
   1230a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1230e:	2b04      	cmp	r3, #4
   12310:	d00f      	beq.n	12332 <HciCoreHandler+0x4a>
      }
      /* Handle ACL data */
      else
      {
        /* Reassemble */
        if ((pBuf = hciCoreAclReassembly(pBuf)) != NULL)
   12312:	f7ff fe29 	bl	11f68 <hciCoreAclReassembly>
   12316:	2800      	cmp	r0, #0
   12318:	d0f0      	beq.n	122fc <HciCoreHandler+0x14>
        {
          /* Call ACL callback; client will free buffer */
          hciCb.aclCback(pBuf);
   1231a:	692b      	ldr	r3, [r5, #16]
   1231c:	4798      	blx	r3
    while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   1231e:	f10d 0107 	add.w	r1, sp, #7
   12322:	4628      	mov	r0, r5
   12324:	f001 fa9a 	bl	1385c <WsfMsgDeq>
   12328:	4604      	mov	r4, r0
   1232a:	2800      	cmp	r0, #0
   1232c:	d1ed      	bne.n	1230a <HciCoreHandler+0x22>
        }
      }
    }
  }
}
   1232e:	b003      	add	sp, #12
   12330:	bd30      	pop	{r4, r5, pc}
        hciEvtProcessMsg(pBuf);
   12332:	f000 fccb 	bl	12ccc <hciEvtProcessMsg>
        if (hciCb.resetting)
   12336:	7e6b      	ldrb	r3, [r5, #25]
   12338:	b933      	cbnz	r3, 12348 <HciCoreHandler+0x60>
        WsfMsgFree(pBuf);
   1233a:	4620      	mov	r0, r4
   1233c:	f001 fa72 	bl	13824 <WsfMsgFree>
   12340:	e7dc      	b.n	122fc <HciCoreHandler+0x14>
      hciCmdTimeout(pMsg);
   12342:	4608      	mov	r0, r1
   12344:	f7fe bb7e 	b.w	10a44 <hciCmdTimeout>
          hciCoreResetSequence(pBuf);
   12348:	4620      	mov	r0, r4
   1234a:	f005 f8ef 	bl	1752c <hciCoreResetSequence>
   1234e:	e7f4      	b.n	1233a <HciCoreHandler+0x52>
   12350:	10004c50 	.word	0x10004c50

00012354 <HciGetBdAddr>:
 */
/*************************************************************************************************/
uint8_t *HciGetBdAddr(void)
{
  return hciCoreCb.bdAddr;
}
   12354:	4800      	ldr	r0, [pc, #0]	; (12358 <HciGetBdAddr+0x4>)
   12356:	4770      	bx	lr
   12358:	10004d24 	.word	0x10004d24

0001235c <HciGetBufSize>:
 *  \return ACL buffer size.
 */
/*************************************************************************************************/
uint16_t HciGetBufSize(void)
{
  return hciCoreCb.bufSize;
   1235c:	4b01      	ldr	r3, [pc, #4]	; (12364 <HciGetBufSize+0x8>)
}
   1235e:	f8b3 0072 	ldrh.w	r0, [r3, #114]	; 0x72
   12362:	4770      	bx	lr
   12364:	10004cc8 	.word	0x10004cc8

00012368 <HciGetLeSupFeat>:
/*************************************************************************************************/
uint32_t HciGetLeSupFeat(void)
{
  // disable LL connection parameter update feature for a better
  // interoperability with Android phones (especially older Android OS).
  return hciCoreCb.leSupFeat & ~HCI_LE_SUP_FEAT_CONN_PARAM_REQ_PROC;
   12368:	4b02      	ldr	r3, [pc, #8]	; (12374 <HciGetLeSupFeat+0xc>)
   1236a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
}
   1236c:	f020 0002 	bic.w	r0, r0, #2
   12370:	4770      	bx	lr
   12372:	bf00      	nop
   12374:	10004cc8 	.word	0x10004cc8

00012378 <HciGetMaxRxAclLen>:
 *  \return ACL packet length.
 */
/*************************************************************************************************/
uint16_t HciGetMaxRxAclLen(void)
{
  return hciCoreCb.maxRxAclLen;
   12378:	4b01      	ldr	r3, [pc, #4]	; (12380 <HciGetMaxRxAclLen+0x8>)
}
   1237a:	f8b3 0070 	ldrh.w	r0, [r3, #112]	; 0x70
   1237e:	4770      	bx	lr
   12380:	10004cc8 	.word	0x10004cc8

00012384 <HciLlPrivacySupported>:
 *  \return TRUE if LL Privacy is supported. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t HciLlPrivacySupported(void)
{
  return (hciCoreCb.resListSize > 0) ? TRUE : FALSE;
   12384:	4b03      	ldr	r3, [pc, #12]	; (12394 <HciLlPrivacySupported+0x10>)
   12386:	f893 0081 	ldrb.w	r0, [r3, #129]	; 0x81
}
   1238a:	3800      	subs	r0, #0
   1238c:	bf18      	it	ne
   1238e:	2001      	movne	r0, #1
   12390:	4770      	bx	lr
   12392:	bf00      	nop
   12394:	10004cc8 	.word	0x10004cc8

00012398 <hciEvtParseDisconnectCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseDisconnectCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->disconnectCmpl.status, p);
   12398:	780a      	ldrb	r2, [r1, #0]
   1239a:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->disconnectCmpl.handle, p);
   1239c:	f891 c002 	ldrb.w	ip, [r1, #2]
   123a0:	784b      	ldrb	r3, [r1, #1]
   123a2:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   123a6:	b29b      	uxth	r3, r3
   123a8:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT8(pMsg->disconnectCmpl.reason, p);
   123aa:	78c9      	ldrb	r1, [r1, #3]
   123ac:	7201      	strb	r1, [r0, #8]

  pMsg->hdr.param = pMsg->disconnectCmpl.handle;
   123ae:	8003      	strh	r3, [r0, #0]
  pMsg->hdr.status = pMsg->disconnectCmpl.status;
   123b0:	70c2      	strb	r2, [r0, #3]
}
   123b2:	4770      	bx	lr

000123b4 <hciEvtParseLeConnUpdateCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeConnUpdateCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leConnUpdateCmpl.status, p);
   123b4:	f891 c000 	ldrb.w	ip, [r1]
   123b8:	f880 c004 	strb.w	ip, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.handle, p);
   123bc:	788a      	ldrb	r2, [r1, #2]
   123be:	784b      	ldrb	r3, [r1, #1]
   123c0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   123c4:	b29b      	uxth	r3, r3
   123c6:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.connInterval, p);
   123c8:	78ca      	ldrb	r2, [r1, #3]
{
   123ca:	b500      	push	{lr}
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.connInterval, p);
   123cc:	f891 e004 	ldrb.w	lr, [r1, #4]
   123d0:	eb02 220e 	add.w	r2, r2, lr, lsl #8
   123d4:	8102      	strh	r2, [r0, #8]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.connLatency, p);
   123d6:	f891 e006 	ldrb.w	lr, [r1, #6]
   123da:	794a      	ldrb	r2, [r1, #5]
   123dc:	eb02 220e 	add.w	r2, r2, lr, lsl #8
   123e0:	8142      	strh	r2, [r0, #10]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.supTimeout, p);
   123e2:	f891 e008 	ldrb.w	lr, [r1, #8]
   123e6:	79ca      	ldrb	r2, [r1, #7]

  pMsg->hdr.param = pMsg->leConnUpdateCmpl.handle;
   123e8:	8003      	strh	r3, [r0, #0]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.supTimeout, p);
   123ea:	eb02 230e 	add.w	r3, r2, lr, lsl #8
   123ee:	8183      	strh	r3, [r0, #12]
  pMsg->hdr.status = pMsg->leConnUpdateCmpl.status;
   123f0:	f880 c003 	strb.w	ip, [r0, #3]
}
   123f4:	f85d fb04 	ldr.w	pc, [sp], #4

000123f8 <hciEvtParseLeCreateConnCancelCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeCreateConnCancelCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leCreateConnCancelCmdCmpl.status, p);
   123f8:	780a      	ldrb	r2, [r1, #0]

  pMsg->hdr.status = pMsg->leCreateConnCancelCmdCmpl.status;
   123fa:	f04f 0300 	mov.w	r3, #0
   123fe:	f362 0307 	bfi	r3, r2, #0, #8
   12402:	f362 230f 	bfi	r3, r2, #8, #8
   12406:	f8a0 3003 	strh.w	r3, [r0, #3]
}
   1240a:	4770      	bx	lr

0001240c <hciEvtParseReadRssiCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadRssiCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->readRssiCmdCmpl.status, p);
   1240c:	780a      	ldrb	r2, [r1, #0]
   1240e:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->readRssiCmdCmpl.handle, p);
   12410:	f891 c002 	ldrb.w	ip, [r1, #2]
   12414:	784b      	ldrb	r3, [r1, #1]
   12416:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   1241a:	b29b      	uxth	r3, r3
   1241c:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT8(pMsg->readRssiCmdCmpl.rssi, p);
   1241e:	78c9      	ldrb	r1, [r1, #3]
   12420:	7201      	strb	r1, [r0, #8]

  pMsg->hdr.param = pMsg->readRssiCmdCmpl.handle;
   12422:	8003      	strh	r3, [r0, #0]
  pMsg->hdr.status = pMsg->readRssiCmdCmpl.status;
   12424:	70c2      	strb	r2, [r0, #3]
}
   12426:	4770      	bx	lr

00012428 <hciEvtParseReadTxPwrLvlCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadTxPwrLvlCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->readTxPwrLvlCmdCmpl.status, p);
   12428:	780b      	ldrb	r3, [r1, #0]
   1242a:	7103      	strb	r3, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->readTxPwrLvlCmdCmpl.handle, p);
   1242c:	784a      	ldrb	r2, [r1, #1]
   1242e:	7142      	strb	r2, [r0, #5]
  BSTREAM_TO_INT8(pMsg->readTxPwrLvlCmdCmpl.pwrLvl, p);
   12430:	78c9      	ldrb	r1, [r1, #3]
   12432:	7181      	strb	r1, [r0, #6]

  pMsg->hdr.param = pMsg->readTxPwrLvlCmdCmpl.handle;
   12434:	8002      	strh	r2, [r0, #0]
  pMsg->hdr.status = pMsg->readTxPwrLvlCmdCmpl.status;
   12436:	70c3      	strb	r3, [r0, #3]
}
   12438:	4770      	bx	lr
   1243a:	bf00      	nop

0001243c <hciEvtParseReadRemoteVerInfoCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadRemoteVerInfoCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->readRemoteVerInfoCmpl.status, p);
   1243c:	f891 c000 	ldrb.w	ip, [r1]
   12440:	f880 c004 	strb.w	ip, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.handle, p);
   12444:	788a      	ldrb	r2, [r1, #2]
   12446:	784b      	ldrb	r3, [r1, #1]
   12448:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   1244c:	b29b      	uxth	r3, r3
   1244e:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT8(pMsg->readRemoteVerInfoCmpl.version, p);
   12450:	78ca      	ldrb	r2, [r1, #3]
   12452:	7202      	strb	r2, [r0, #8]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.mfrName, p);
   12454:	790a      	ldrb	r2, [r1, #4]
{
   12456:	b500      	push	{lr}
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.mfrName, p);
   12458:	f891 e005 	ldrb.w	lr, [r1, #5]
   1245c:	eb02 220e 	add.w	r2, r2, lr, lsl #8
   12460:	8142      	strh	r2, [r0, #10]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.subversion, p);
   12462:	f891 e007 	ldrb.w	lr, [r1, #7]
   12466:	798a      	ldrb	r2, [r1, #6]

  pMsg->hdr.param = pMsg->readRemoteVerInfoCmpl.handle;
   12468:	8003      	strh	r3, [r0, #0]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.subversion, p);
   1246a:	eb02 230e 	add.w	r3, r2, lr, lsl #8
   1246e:	8183      	strh	r3, [r0, #12]
  pMsg->hdr.status = pMsg->readRemoteVerInfoCmpl.status;
   12470:	f880 c003 	strb.w	ip, [r0, #3]
}
   12474:	f85d fb04 	ldr.w	pc, [sp], #4

00012478 <hciEvtParseLeLtkReqReplCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReqReplCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leLtkReqReplCmdCmpl.status, p);
   12478:	780a      	ldrb	r2, [r1, #0]
   1247a:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leLtkReqReplCmdCmpl.handle, p);
   1247c:	f891 c002 	ldrb.w	ip, [r1, #2]
   12480:	784b      	ldrb	r3, [r1, #1]

  pMsg->hdr.param = pMsg->leLtkReqReplCmdCmpl.handle;
  pMsg->hdr.status = pMsg->leLtkReqReplCmdCmpl.status;
   12482:	70c2      	strb	r2, [r0, #3]
  BSTREAM_TO_UINT16(pMsg->leLtkReqReplCmdCmpl.handle, p);
   12484:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   12488:	b29b      	uxth	r3, r3
   1248a:	80c3      	strh	r3, [r0, #6]
  pMsg->hdr.param = pMsg->leLtkReqReplCmdCmpl.handle;
   1248c:	8003      	strh	r3, [r0, #0]
}
   1248e:	4770      	bx	lr

00012490 <hciEvtParseLeLtkReqNegReplCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReqNegReplCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leLtkReqNegReplCmdCmpl.status, p);
   12490:	780a      	ldrb	r2, [r1, #0]
   12492:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leLtkReqNegReplCmdCmpl.handle, p);
   12494:	f891 c002 	ldrb.w	ip, [r1, #2]
   12498:	784b      	ldrb	r3, [r1, #1]

  pMsg->hdr.param = pMsg->leLtkReqNegReplCmdCmpl.handle;
  pMsg->hdr.status = pMsg->leLtkReqNegReplCmdCmpl.status;
   1249a:	70c2      	strb	r2, [r0, #3]
  BSTREAM_TO_UINT16(pMsg->leLtkReqNegReplCmdCmpl.handle, p);
   1249c:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   124a0:	b29b      	uxth	r3, r3
   124a2:	80c3      	strh	r3, [r0, #6]
  pMsg->hdr.param = pMsg->leLtkReqNegReplCmdCmpl.handle;
   124a4:	8003      	strh	r3, [r0, #0]
}
   124a6:	4770      	bx	lr

000124a8 <hciEvtParseEncKeyRefreshCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseEncKeyRefreshCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->encKeyRefreshCmpl.status, p);
   124a8:	780a      	ldrb	r2, [r1, #0]
   124aa:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->encKeyRefreshCmpl.handle, p);
   124ac:	f891 c002 	ldrb.w	ip, [r1, #2]
   124b0:	784b      	ldrb	r3, [r1, #1]

  pMsg->hdr.param = pMsg->encKeyRefreshCmpl.handle;
  pMsg->hdr.status = pMsg->encKeyRefreshCmpl.status;
   124b2:	70c2      	strb	r2, [r0, #3]
  BSTREAM_TO_UINT16(pMsg->encKeyRefreshCmpl.handle, p);
   124b4:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   124b8:	b29b      	uxth	r3, r3
   124ba:	80c3      	strh	r3, [r0, #6]
  pMsg->hdr.param = pMsg->encKeyRefreshCmpl.handle;
   124bc:	8003      	strh	r3, [r0, #0]
}
   124be:	4770      	bx	lr

000124c0 <hciEvtParseEncChange>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseEncChange(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->encChange.status, p);
   124c0:	780a      	ldrb	r2, [r1, #0]
   124c2:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->encChange.handle, p);
   124c4:	f891 c002 	ldrb.w	ip, [r1, #2]
   124c8:	784b      	ldrb	r3, [r1, #1]
   124ca:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   124ce:	b29b      	uxth	r3, r3
   124d0:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT8(pMsg->encChange.enabled, p);
   124d2:	78c9      	ldrb	r1, [r1, #3]
   124d4:	7201      	strb	r1, [r0, #8]

  pMsg->hdr.param = pMsg->encChange.handle;
   124d6:	8003      	strh	r3, [r0, #0]
  pMsg->hdr.status = pMsg->encChange.status;
   124d8:	70c2      	strb	r2, [r0, #3]
}
   124da:	4770      	bx	lr

000124dc <hciEvtParseVendorSpecCmdStatus>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseVendorSpecCmdStatus(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT16(pMsg->vendorSpecCmdStatus.opcode, p);
   124dc:	784a      	ldrb	r2, [r1, #1]
   124de:	780b      	ldrb	r3, [r1, #0]
   124e0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   124e4:	8083      	strh	r3, [r0, #4]
}
   124e6:	4770      	bx	lr

000124e8 <hciEvtParseHwError>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseHwError(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->hwError.code, p);
   124e8:	780b      	ldrb	r3, [r1, #0]
   124ea:	7103      	strb	r3, [r0, #4]
}
   124ec:	4770      	bx	lr
   124ee:	bf00      	nop

000124f0 <hciEvtParseLeAddDevToResListCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeAddDevToResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leAddDevToResListCmdCmpl.status, p);
   124f0:	780a      	ldrb	r2, [r1, #0]

  pMsg->hdr.status = pMsg->leAddDevToResListCmdCmpl.status;
   124f2:	f04f 0300 	mov.w	r3, #0
   124f6:	f362 0307 	bfi	r3, r2, #0, #8
   124fa:	f362 230f 	bfi	r3, r2, #8, #8
   124fe:	f8a0 3003 	strh.w	r3, [r0, #3]
}
   12502:	4770      	bx	lr

00012504 <hciEvtParseLeRemDevFromResListCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeRemDevFromResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leRemDevFromResListCmdCmpl.status, p);
   12504:	780a      	ldrb	r2, [r1, #0]

  pMsg->hdr.status = pMsg->leRemDevFromResListCmdCmpl.status;
   12506:	f04f 0300 	mov.w	r3, #0
   1250a:	f362 0307 	bfi	r3, r2, #0, #8
   1250e:	f362 230f 	bfi	r3, r2, #8, #8
   12512:	f8a0 3003 	strh.w	r3, [r0, #3]
}
   12516:	4770      	bx	lr

00012518 <hciEvtParseLeClearResListCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeClearResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leClearResListCmdCmpl.status, p);
   12518:	780a      	ldrb	r2, [r1, #0]

  pMsg->hdr.status = pMsg->leClearResListCmdCmpl.status;
   1251a:	f04f 0300 	mov.w	r3, #0
   1251e:	f362 0307 	bfi	r3, r2, #0, #8
   12522:	f362 230f 	bfi	r3, r2, #8, #8
   12526:	f8a0 3003 	strh.w	r3, [r0, #3]
}
   1252a:	4770      	bx	lr

0001252c <hciEvtParseLeSetAddrResEnableCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeSetAddrResEnableCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leSetAddrResEnableCmdCmpl.status, p);
   1252c:	780a      	ldrb	r2, [r1, #0]

  pMsg->hdr.status = pMsg->leSetAddrResEnableCmdCmpl.status;
   1252e:	f04f 0300 	mov.w	r3, #0
   12532:	f362 0307 	bfi	r3, r2, #0, #8
   12536:	f362 230f 	bfi	r3, r2, #8, #8
   1253a:	f8a0 3003 	strh.w	r3, [r0, #3]
}
   1253e:	4770      	bx	lr

00012540 <hciEvtParseRemConnParamRepCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamRepCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leRemConnParamRepCmdCmpl.status, p);
   12540:	780a      	ldrb	r2, [r1, #0]
   12542:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamRepCmdCmpl.handle, p);
   12544:	f891 c002 	ldrb.w	ip, [r1, #2]
   12548:	784b      	ldrb	r3, [r1, #1]

  pMsg->hdr.status = pMsg->leRemConnParamRepCmdCmpl.status;
   1254a:	70c2      	strb	r2, [r0, #3]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamRepCmdCmpl.handle, p);
   1254c:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   12550:	b29b      	uxth	r3, r3
   12552:	80c3      	strh	r3, [r0, #6]
  pMsg->hdr.param = pMsg->leRemConnParamRepCmdCmpl.handle;
   12554:	8003      	strh	r3, [r0, #0]
}
   12556:	4770      	bx	lr

00012558 <hciEvtParseRemConnParamNegRepCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamNegRepCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leRemConnParamNegRepCmdCmpl.status, p);
   12558:	780a      	ldrb	r2, [r1, #0]
   1255a:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamNegRepCmdCmpl.handle, p);
   1255c:	f891 c002 	ldrb.w	ip, [r1, #2]
   12560:	784b      	ldrb	r3, [r1, #1]

  pMsg->hdr.status = pMsg->leRemConnParamNegRepCmdCmpl.status;
   12562:	70c2      	strb	r2, [r0, #3]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamNegRepCmdCmpl.handle, p);
   12564:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   12568:	b29b      	uxth	r3, r3
   1256a:	80c3      	strh	r3, [r0, #6]
  pMsg->hdr.param = pMsg->leRemConnParamNegRepCmdCmpl.handle;
   1256c:	8003      	strh	r3, [r0, #0]
}
   1256e:	4770      	bx	lr

00012570 <hciEvtParseReadDefDataLenCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadDefDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leReadDefDataLenCmdCmpl.status, p);
   12570:	780a      	ldrb	r2, [r1, #0]
   12572:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leReadDefDataLenCmdCmpl.suggestedMaxTxOctets, p);
   12574:	f891 c002 	ldrb.w	ip, [r1, #2]
   12578:	784b      	ldrb	r3, [r1, #1]
   1257a:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   1257e:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT16(pMsg->leReadDefDataLenCmdCmpl.suggestedMaxTxTime, p);
   12580:	f891 c004 	ldrb.w	ip, [r1, #4]
   12584:	78cb      	ldrb	r3, [r1, #3]

  pMsg->hdr.status = pMsg->leReadDefDataLenCmdCmpl.status;
   12586:	70c2      	strb	r2, [r0, #3]
  BSTREAM_TO_UINT16(pMsg->leReadDefDataLenCmdCmpl.suggestedMaxTxTime, p);
   12588:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   1258c:	8103      	strh	r3, [r0, #8]
}
   1258e:	4770      	bx	lr

00012590 <hciEvtParseWriteDefDataLenCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseWriteDefDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leWriteDefDataLenCmdCmpl.status, p);
   12590:	780a      	ldrb	r2, [r1, #0]

  pMsg->hdr.status = pMsg->leWriteDefDataLenCmdCmpl.status;
   12592:	f04f 0300 	mov.w	r3, #0
   12596:	f362 0307 	bfi	r3, r2, #0, #8
   1259a:	f362 230f 	bfi	r3, r2, #8, #8
   1259e:	f8a0 3003 	strh.w	r3, [r0, #3]
}
   125a2:	4770      	bx	lr

000125a4 <hciEvtParseSetDataLenCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseSetDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leSetDataLenCmdCmpl.status, p);
   125a4:	780a      	ldrb	r2, [r1, #0]
   125a6:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leSetDataLenCmdCmpl.handle, p);
   125a8:	f891 c002 	ldrb.w	ip, [r1, #2]
   125ac:	784b      	ldrb	r3, [r1, #1]

  pMsg->hdr.status = pMsg->leSetDataLenCmdCmpl.status;
   125ae:	70c2      	strb	r2, [r0, #3]
  BSTREAM_TO_UINT16(pMsg->leSetDataLenCmdCmpl.handle, p);
   125b0:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   125b4:	b29b      	uxth	r3, r3
   125b6:	80c3      	strh	r3, [r0, #6]
  pMsg->hdr.param = pMsg->leSetDataLenCmdCmpl.handle;
   125b8:	8003      	strh	r3, [r0, #0]
}
   125ba:	4770      	bx	lr

000125bc <hciEvtParseReadMaxDataLenCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadMaxDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leReadMaxDataLenCmdCmpl.status, p);
   125bc:	780a      	ldrb	r2, [r1, #0]
   125be:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxTxOctets, p);
   125c0:	f891 c002 	ldrb.w	ip, [r1, #2]
   125c4:	784b      	ldrb	r3, [r1, #1]
   125c6:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   125ca:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxTxTime, p);
   125cc:	f891 c004 	ldrb.w	ip, [r1, #4]
   125d0:	78cb      	ldrb	r3, [r1, #3]
   125d2:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   125d6:	8103      	strh	r3, [r0, #8]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxRxOctets, p);
   125d8:	f891 c006 	ldrb.w	ip, [r1, #6]
   125dc:	794b      	ldrb	r3, [r1, #5]
   125de:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   125e2:	8143      	strh	r3, [r0, #10]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxRxTime, p);
   125e4:	f891 c008 	ldrb.w	ip, [r1, #8]
   125e8:	79cb      	ldrb	r3, [r1, #7]

  pMsg->hdr.status = pMsg->leReadMaxDataLenCmdCmpl.status;
   125ea:	70c2      	strb	r2, [r0, #3]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxRxTime, p);
   125ec:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   125f0:	8183      	strh	r3, [r0, #12]
}
   125f2:	4770      	bx	lr

000125f4 <hciEvtParseRemConnParamReq>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamReq(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.handle, p);
   125f4:	784a      	ldrb	r2, [r1, #1]
   125f6:	780b      	ldrb	r3, [r1, #0]
   125f8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   125fc:	b29b      	uxth	r3, r3
   125fe:	8083      	strh	r3, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.intervalMin, p);
   12600:	f891 c003 	ldrb.w	ip, [r1, #3]
   12604:	788a      	ldrb	r2, [r1, #2]
   12606:	eb02 220c 	add.w	r2, r2, ip, lsl #8
   1260a:	80c2      	strh	r2, [r0, #6]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.intervalMax, p);
   1260c:	f891 c005 	ldrb.w	ip, [r1, #5]
   12610:	790a      	ldrb	r2, [r1, #4]
   12612:	eb02 220c 	add.w	r2, r2, ip, lsl #8
   12616:	8102      	strh	r2, [r0, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.latency, p);
   12618:	f891 c007 	ldrb.w	ip, [r1, #7]
   1261c:	798a      	ldrb	r2, [r1, #6]
   1261e:	eb02 220c 	add.w	r2, r2, ip, lsl #8
   12622:	8142      	strh	r2, [r0, #10]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.timeout, p);
   12624:	f891 c009 	ldrb.w	ip, [r1, #9]
   12628:	7a0a      	ldrb	r2, [r1, #8]

  pMsg->hdr.param = pMsg->leRemConnParamReq.handle;
   1262a:	8003      	strh	r3, [r0, #0]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.timeout, p);
   1262c:	eb02 230c 	add.w	r3, r2, ip, lsl #8
   12630:	8183      	strh	r3, [r0, #12]
}
   12632:	4770      	bx	lr

00012634 <hciEvtParseDataLenChange>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseDataLenChange(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.handle, p);
   12634:	784a      	ldrb	r2, [r1, #1]
   12636:	780b      	ldrb	r3, [r1, #0]
   12638:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   1263c:	b29b      	uxth	r3, r3
   1263e:	8083      	strh	r3, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxTxOctets, p);
   12640:	f891 c003 	ldrb.w	ip, [r1, #3]
   12644:	788a      	ldrb	r2, [r1, #2]
   12646:	eb02 220c 	add.w	r2, r2, ip, lsl #8
   1264a:	80c2      	strh	r2, [r0, #6]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxTxTime, p);
   1264c:	f891 c005 	ldrb.w	ip, [r1, #5]
   12650:	790a      	ldrb	r2, [r1, #4]
   12652:	eb02 220c 	add.w	r2, r2, ip, lsl #8
   12656:	8102      	strh	r2, [r0, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxRxOctets, p);
   12658:	f891 c007 	ldrb.w	ip, [r1, #7]
   1265c:	798a      	ldrb	r2, [r1, #6]
   1265e:	eb02 220c 	add.w	r2, r2, ip, lsl #8
   12662:	8142      	strh	r2, [r0, #10]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxRxTime, p);
   12664:	f891 c009 	ldrb.w	ip, [r1, #9]
   12668:	7a0a      	ldrb	r2, [r1, #8]

  pMsg->hdr.param = pMsg->leDataLenChange.handle;
   1266a:	8003      	strh	r3, [r0, #0]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxRxTime, p);
   1266c:	eb02 230c 	add.w	r3, r2, ip, lsl #8
   12670:	8183      	strh	r3, [r0, #12]
}
   12672:	4770      	bx	lr

00012674 <hciEvtParseWriteAuthTimeoutCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtParseWriteAuthTimeoutCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->writeAuthPayloadToCmdCmpl.status, p);
   12674:	780a      	ldrb	r2, [r1, #0]
   12676:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->writeAuthPayloadToCmdCmpl.handle, p);
   12678:	f891 c002 	ldrb.w	ip, [r1, #2]
   1267c:	784b      	ldrb	r3, [r1, #1]

  pMsg->hdr.status = pMsg->writeAuthPayloadToCmdCmpl.status;
   1267e:	70c2      	strb	r2, [r0, #3]
  BSTREAM_TO_UINT16(pMsg->writeAuthPayloadToCmdCmpl.handle, p);
   12680:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   12684:	b29b      	uxth	r3, r3
   12686:	80c3      	strh	r3, [r0, #6]
  pMsg->hdr.param = pMsg->writeAuthPayloadToCmdCmpl.handle;
   12688:	8003      	strh	r3, [r0, #0]
}
   1268a:	4770      	bx	lr

0001268c <hciEvtParseAuthTimeoutExpiredEvt>:
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtParseAuthTimeoutExpiredEvt(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT16(pMsg->authPayloadToExpired.handle, p);
   1268c:	784a      	ldrb	r2, [r1, #1]
   1268e:	780b      	ldrb	r3, [r1, #0]
   12690:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   12694:	b29b      	uxth	r3, r3
   12696:	8083      	strh	r3, [r0, #4]

  pMsg->hdr.param = pMsg->authPayloadToExpired.handle;
   12698:	8003      	strh	r3, [r0, #0]
}
   1269a:	4770      	bx	lr

0001269c <hciEvtParseReadPhyCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadPhyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.status, p);
   1269c:	780a      	ldrb	r2, [r1, #0]
   1269e:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leReadPhyCmdCmpl.handle, p);
   126a0:	f891 c002 	ldrb.w	ip, [r1, #2]
   126a4:	784b      	ldrb	r3, [r1, #1]
   126a6:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   126aa:	b29b      	uxth	r3, r3
   126ac:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.txPhy, p);
   126ae:	f891 c003 	ldrb.w	ip, [r1, #3]
   126b2:	f880 c008 	strb.w	ip, [r0, #8]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.rxPhy, p);
   126b6:	7909      	ldrb	r1, [r1, #4]
   126b8:	7241      	strb	r1, [r0, #9]

  pMsg->hdr.status = pMsg->leReadPhyCmdCmpl.status;
   126ba:	70c2      	strb	r2, [r0, #3]
  pMsg->hdr.param = pMsg->leReadPhyCmdCmpl.handle;
   126bc:	8003      	strh	r3, [r0, #0]
}
   126be:	4770      	bx	lr

000126c0 <hciEvtParseSetDefPhyCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseSetDefPhyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leSetDefPhyCmdCmpl.status, p);
   126c0:	780a      	ldrb	r2, [r1, #0]

  pMsg->hdr.status = pMsg->leSetDefPhyCmdCmpl.status;
   126c2:	f04f 0300 	mov.w	r3, #0
   126c6:	f362 0307 	bfi	r3, r2, #0, #8
   126ca:	f362 230f 	bfi	r3, r2, #8, #8
   126ce:	f8a0 3003 	strh.w	r3, [r0, #3]
}
   126d2:	4770      	bx	lr

000126d4 <hciEvtParsePhyUpdateCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParsePhyUpdateCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.status, p);
   126d4:	780a      	ldrb	r2, [r1, #0]
   126d6:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->lePhyUpdate.handle, p);
   126d8:	f891 c002 	ldrb.w	ip, [r1, #2]
   126dc:	784b      	ldrb	r3, [r1, #1]
   126de:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   126e2:	b29b      	uxth	r3, r3
   126e4:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.txPhy, p);
   126e6:	f891 c003 	ldrb.w	ip, [r1, #3]
   126ea:	f880 c008 	strb.w	ip, [r0, #8]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.rxPhy, p);
   126ee:	7909      	ldrb	r1, [r1, #4]
   126f0:	7241      	strb	r1, [r0, #9]

  pMsg->hdr.status = pMsg->lePhyUpdate.status;
   126f2:	70c2      	strb	r2, [r0, #3]
  pMsg->hdr.param = pMsg->lePhyUpdate.handle;
   126f4:	8003      	strh	r3, [r0, #0]
}
   126f6:	4770      	bx	lr

000126f8 <hciEvtParseLeScanTimeout>:
 */
/*************************************************************************************************/
static void hciEvtParseLeScanTimeout(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  /* empty */
}
   126f8:	4770      	bx	lr
   126fa:	bf00      	nop

000126fc <hciEvtParseLeAdvSetTerm>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeAdvSetTerm(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.status, p);
   126fc:	780a      	ldrb	r2, [r1, #0]
   126fe:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.advHandle, p);
   12700:	784b      	ldrb	r3, [r1, #1]
   12702:	7143      	strb	r3, [r0, #5]
  BSTREAM_TO_UINT16(pMsg->leAdvSetTerm.handle, p);
   12704:	f891 c003 	ldrb.w	ip, [r1, #3]
   12708:	788b      	ldrb	r3, [r1, #2]
   1270a:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   1270e:	b29b      	uxth	r3, r3
   12710:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.numComplEvts, p);
   12712:	7909      	ldrb	r1, [r1, #4]
   12714:	7201      	strb	r1, [r0, #8]

  pMsg->hdr.status = pMsg->leAdvSetTerm.status;
   12716:	70c2      	strb	r2, [r0, #3]
  pMsg->hdr.param = pMsg->leAdvSetTerm.handle;
   12718:	8003      	strh	r3, [r0, #0]
}
   1271a:	4770      	bx	lr

0001271c <hciEvtParseLeCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->hdr.status, p);
   1271c:	780b      	ldrb	r3, [r1, #0]
   1271e:	70c3      	strb	r3, [r0, #3]
}
   12720:	4770      	bx	lr
   12722:	bf00      	nop

00012724 <hciEvtParseLeSetConnCteRcvParm>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeSetConnCteRcvParm(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    BSTREAM_TO_UINT8(pMsg->leSetConnCteRxParamsCmdCmpl.status, p);
   12724:	780a      	ldrb	r2, [r1, #0]
   12726:	7102      	strb	r2, [r0, #4]
    BSTREAM_TO_UINT16(pMsg->leSetConnCteRxParamsCmdCmpl.handle, p);
   12728:	f891 c002 	ldrb.w	ip, [r1, #2]
   1272c:	784b      	ldrb	r3, [r1, #1]
    
    pMsg->hdr.status = pMsg->leSetConnCteRxParamsCmdCmpl.status;
   1272e:	70c2      	strb	r2, [r0, #3]
    BSTREAM_TO_UINT16(pMsg->leSetConnCteRxParamsCmdCmpl.handle, p);
   12730:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   12734:	b29b      	uxth	r3, r3
   12736:	80c3      	strh	r3, [r0, #6]
    pMsg->hdr.param = pMsg->leSetConnCteRxParamsCmdCmpl.handle;
   12738:	8003      	strh	r3, [r0, #0]
}
   1273a:	4770      	bx	lr

0001273c <hciEvtParseLeSetConnCteTxParm>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeSetConnCteTxParm(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    BSTREAM_TO_UINT8(pMsg->leSetConnCteTxParamsCmdCmpl.status, p);
   1273c:	780a      	ldrb	r2, [r1, #0]
   1273e:	7102      	strb	r2, [r0, #4]
    BSTREAM_TO_UINT16(pMsg->leSetConnCteTxParamsCmdCmpl.handle, p);
   12740:	f891 c002 	ldrb.w	ip, [r1, #2]
   12744:	784b      	ldrb	r3, [r1, #1]
    
    pMsg->hdr.status = pMsg->leSetConnCteTxParamsCmdCmpl.status;
   12746:	70c2      	strb	r2, [r0, #3]
    BSTREAM_TO_UINT16(pMsg->leSetConnCteTxParamsCmdCmpl.handle, p);
   12748:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   1274c:	b29b      	uxth	r3, r3
   1274e:	80c3      	strh	r3, [r0, #6]
    pMsg->hdr.param = pMsg->leSetConnCteTxParamsCmdCmpl.handle;
   12750:	8003      	strh	r3, [r0, #0]
}
   12752:	4770      	bx	lr

00012754 <hciEvtParseLeConnCteReqEn>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeConnCteReqEn(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    BSTREAM_TO_UINT8(pMsg->leConnCteReqEnableCmdCmpl.status, p);
   12754:	780a      	ldrb	r2, [r1, #0]
   12756:	7102      	strb	r2, [r0, #4]
    BSTREAM_TO_UINT16(pMsg->leConnCteReqEnableCmdCmpl.handle, p);
   12758:	f891 c002 	ldrb.w	ip, [r1, #2]
   1275c:	784b      	ldrb	r3, [r1, #1]
    
    pMsg->hdr.status = pMsg->leConnCteReqEnableCmdCmpl.status;
   1275e:	70c2      	strb	r2, [r0, #3]
    BSTREAM_TO_UINT16(pMsg->leConnCteReqEnableCmdCmpl.handle, p);
   12760:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   12764:	b29b      	uxth	r3, r3
   12766:	80c3      	strh	r3, [r0, #6]
    pMsg->hdr.param = pMsg->leConnCteReqEnableCmdCmpl.handle;
   12768:	8003      	strh	r3, [r0, #0]
}
   1276a:	4770      	bx	lr

0001276c <hciEvtParseLeConnCteRspEn>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeConnCteRspEn(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    BSTREAM_TO_UINT8(pMsg->leConnCteRspEnableCmdCmpl.status, p);
   1276c:	780a      	ldrb	r2, [r1, #0]
   1276e:	7102      	strb	r2, [r0, #4]
    BSTREAM_TO_UINT16(pMsg->leConnCteRspEnableCmdCmpl.handle, p);
   12770:	f891 c002 	ldrb.w	ip, [r1, #2]
   12774:	784b      	ldrb	r3, [r1, #1]
    
    pMsg->hdr.status = pMsg->leConnCteRspEnableCmdCmpl.status;
   12776:	70c2      	strb	r2, [r0, #3]
    BSTREAM_TO_UINT16(pMsg->leConnCteRspEnableCmdCmpl.handle, p);
   12778:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   1277c:	b29b      	uxth	r3, r3
   1277e:	80c3      	strh	r3, [r0, #6]
    pMsg->hdr.param = pMsg->leConnCteRspEnableCmdCmpl.handle;
   12780:	8003      	strh	r3, [r0, #0]
}
   12782:	4770      	bx	lr

00012784 <hciEvtParseLePerAdvSyncLost>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLePerAdvSyncLost(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncLost.syncHandle, p);
   12784:	784a      	ldrb	r2, [r1, #1]
   12786:	780b      	ldrb	r3, [r1, #0]
   12788:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   1278c:	8083      	strh	r3, [r0, #4]
}
   1278e:	4770      	bx	lr

00012790 <hciEvtParseLePerAdvSyncEst>:
{
   12790:	b538      	push	{r3, r4, r5, lr}
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.status, p);
   12792:	780b      	ldrb	r3, [r1, #0]
   12794:	7103      	strb	r3, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncEst.syncHandle, p);
   12796:	788a      	ldrb	r2, [r1, #2]
   12798:	784b      	ldrb	r3, [r1, #1]
{
   1279a:	460d      	mov	r5, r1
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncEst.syncHandle, p);
   1279c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   127a0:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advSid, p);
   127a2:	78eb      	ldrb	r3, [r5, #3]
   127a4:	7203      	strb	r3, [r0, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advAddrType, p);
   127a6:	792b      	ldrb	r3, [r5, #4]
   127a8:	7243      	strb	r3, [r0, #9]
{
   127aa:	4604      	mov	r4, r0
  BSTREAM_TO_BDA(pMsg->lePerAdvSyncEst.advAddr, p);
   127ac:	3105      	adds	r1, #5
   127ae:	300a      	adds	r0, #10
   127b0:	f009 fdd0 	bl	1c354 <BdaCpy>
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advPhy, p);
   127b4:	7aeb      	ldrb	r3, [r5, #11]
   127b6:	7423      	strb	r3, [r4, #16]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncEst.perAdvInterval, p);
   127b8:	7b69      	ldrb	r1, [r5, #13]
   127ba:	7b2b      	ldrb	r3, [r5, #12]
  pMsg->hdr.status = pMsg->lePerAdvSyncEst.status;
   127bc:	7922      	ldrb	r2, [r4, #4]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncEst.perAdvInterval, p);
   127be:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   127c2:	8263      	strh	r3, [r4, #18]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.clockAccuracy, p);
   127c4:	7bab      	ldrb	r3, [r5, #14]
   127c6:	7523      	strb	r3, [r4, #20]
  pMsg->hdr.status = pMsg->lePerAdvSyncEst.status;
   127c8:	70e2      	strb	r2, [r4, #3]
}
   127ca:	bd38      	pop	{r3, r4, r5, pc}

000127cc <hciEvtParseLeScanReqRcvd>:
  BSTREAM_TO_UINT8(pMsg->leScanReqRcvd.advHandle, p);
   127cc:	780b      	ldrb	r3, [r1, #0]
   127ce:	7103      	strb	r3, [r0, #4]
  BSTREAM_TO_UINT8(pMsg->leScanReqRcvd.scanAddrType, p);
   127d0:	784b      	ldrb	r3, [r1, #1]
   127d2:	7143      	strb	r3, [r0, #5]
  BSTREAM_TO_BDA(pMsg->leScanReqRcvd.scanAddr, p);
   127d4:	3102      	adds	r1, #2
   127d6:	3006      	adds	r0, #6
   127d8:	f009 bdbc 	b.w	1c354 <BdaCpy>

000127dc <hciEvtParseLeReadLocalResAddrCmdCmpl>:
{
   127dc:	b510      	push	{r4, lr}
  BSTREAM_TO_UINT8(pMsg->leReadLocalResAddrCmdCmpl.status, p);
   127de:	f811 3b01 	ldrb.w	r3, [r1], #1
   127e2:	7103      	strb	r3, [r0, #4]
{
   127e4:	4604      	mov	r4, r0
  BSTREAM_TO_BDA(pMsg->leReadLocalResAddrCmdCmpl.localRpa, p);
   127e6:	3005      	adds	r0, #5
   127e8:	f009 fdb4 	bl	1c354 <BdaCpy>
  pMsg->hdr.status = pMsg->leReadLocalResAddrCmdCmpl.status;
   127ec:	7923      	ldrb	r3, [r4, #4]
   127ee:	70e3      	strb	r3, [r4, #3]
}
   127f0:	bd10      	pop	{r4, pc}
   127f2:	bf00      	nop

000127f4 <hciEvtParseLeReadPeerResAddrCmdCmpl>:
{
   127f4:	b510      	push	{r4, lr}
  BSTREAM_TO_UINT8(pMsg->leReadPeerResAddrCmdCmpl.status, p);
   127f6:	f811 3b01 	ldrb.w	r3, [r1], #1
   127fa:	7103      	strb	r3, [r0, #4]
{
   127fc:	4604      	mov	r4, r0
  BSTREAM_TO_BDA(pMsg->leReadPeerResAddrCmdCmpl.peerRpa, p);
   127fe:	3005      	adds	r0, #5
   12800:	f009 fda8 	bl	1c354 <BdaCpy>
  pMsg->hdr.status = pMsg->leReadPeerResAddrCmdCmpl.status;
   12804:	7923      	ldrb	r3, [r4, #4]
   12806:	70e3      	strb	r3, [r4, #3]
}
   12808:	bd10      	pop	{r4, pc}
   1280a:	bf00      	nop

0001280c <hciEvtParseLeEnhancedConnCmpl>:
{
   1280c:	b538      	push	{r3, r4, r5, lr}
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.status, p);
   1280e:	780b      	ldrb	r3, [r1, #0]
   12810:	7103      	strb	r3, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.handle, p);
   12812:	788a      	ldrb	r2, [r1, #2]
   12814:	784b      	ldrb	r3, [r1, #1]
{
   12816:	460d      	mov	r5, r1
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.handle, p);
   12818:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   1281c:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.role, p);
   1281e:	78eb      	ldrb	r3, [r5, #3]
   12820:	7203      	strb	r3, [r0, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.addrType, p);
   12822:	792b      	ldrb	r3, [r5, #4]
   12824:	7243      	strb	r3, [r0, #9]
{
   12826:	4604      	mov	r4, r0
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerAddr, p);
   12828:	3105      	adds	r1, #5
   1282a:	300a      	adds	r0, #10
   1282c:	f009 fd92 	bl	1c354 <BdaCpy>
  BSTREAM_TO_BDA(pMsg->leConnCmpl.localRpa, p);
   12830:	f105 010b 	add.w	r1, r5, #11
   12834:	f104 0017 	add.w	r0, r4, #23
   12838:	f009 fd8c 	bl	1c354 <BdaCpy>
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerRpa, p);
   1283c:	f105 0111 	add.w	r1, r5, #17
   12840:	f104 001d 	add.w	r0, r4, #29
   12844:	f009 fd86 	bl	1c354 <BdaCpy>
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connInterval, p);
   12848:	7e29      	ldrb	r1, [r5, #24]
   1284a:	7deb      	ldrb	r3, [r5, #23]
  pMsg->hdr.param = pMsg->leConnCmpl.handle;
   1284c:	88e2      	ldrh	r2, [r4, #6]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connInterval, p);
   1284e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   12852:	8223      	strh	r3, [r4, #16]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connLatency, p);
   12854:	7ea9      	ldrb	r1, [r5, #26]
   12856:	7e6b      	ldrb	r3, [r5, #25]
   12858:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   1285c:	8263      	strh	r3, [r4, #18]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.supTimeout, p);
   1285e:	7f29      	ldrb	r1, [r5, #28]
   12860:	7eeb      	ldrb	r3, [r5, #27]
   12862:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   12866:	82a3      	strh	r3, [r4, #20]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.clockAccuracy, p);
   12868:	7f69      	ldrb	r1, [r5, #29]
  pMsg->hdr.status = pMsg->leConnCmpl.status;
   1286a:	7923      	ldrb	r3, [r4, #4]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.clockAccuracy, p);
   1286c:	75a1      	strb	r1, [r4, #22]
  pMsg->hdr.param = pMsg->leConnCmpl.handle;
   1286e:	8022      	strh	r2, [r4, #0]
  pMsg->hdr.status = pMsg->leConnCmpl.status;
   12870:	70e3      	strb	r3, [r4, #3]
}
   12872:	bd38      	pop	{r3, r4, r5, pc}

00012874 <hciEvtParseGenDhKeyCmdCmpl>:
{
   12874:	b510      	push	{r4, lr}
  BSTREAM_TO_UINT8(pMsg->leGenDHKey.status, p);
   12876:	460b      	mov	r3, r1
   12878:	f813 4b01 	ldrb.w	r4, [r3], #1
   1287c:	7104      	strb	r4, [r0, #4]
  memcpy(pMsg->leGenDHKey.key, p, HCI_DH_KEY_LEN);
   1287e:	f8d1 c001 	ldr.w	ip, [r1, #1]
   12882:	689a      	ldr	r2, [r3, #8]
   12884:	6859      	ldr	r1, [r3, #4]
   12886:	f8d3 e00c 	ldr.w	lr, [r3, #12]
   1288a:	f8c0 e011 	str.w	lr, [r0, #17]
   1288e:	f8c0 c005 	str.w	ip, [r0, #5]
   12892:	f8c0 1009 	str.w	r1, [r0, #9]
   12896:	f8c0 200d 	str.w	r2, [r0, #13]
   1289a:	f8d3 c010 	ldr.w	ip, [r3, #16]
   1289e:	6959      	ldr	r1, [r3, #20]
   128a0:	699a      	ldr	r2, [r3, #24]
   128a2:	f8d3 e01c 	ldr.w	lr, [r3, #28]
   128a6:	f8c0 e021 	str.w	lr, [r0, #33]	; 0x21
   128aa:	f8c0 c015 	str.w	ip, [r0, #21]
   128ae:	f8c0 1019 	str.w	r1, [r0, #25]
   128b2:	f8c0 201d 	str.w	r2, [r0, #29]
  pMsg->hdr.status = pMsg->leGenDHKey.status;
   128b6:	70c4      	strb	r4, [r0, #3]
}
   128b8:	bd10      	pop	{r4, pc}
   128ba:	bf00      	nop

000128bc <hciEvtParseReadPubKeyCmdCmpl>:
{
   128bc:	b570      	push	{r4, r5, r6, lr}
  BSTREAM_TO_UINT8(pMsg->leP256.status, p);
   128be:	460b      	mov	r3, r1
  memcpy(pMsg->leP256.key, p, HCI_P256_KEY_LEN);
   128c0:	1d42      	adds	r2, r0, #5
  BSTREAM_TO_UINT8(pMsg->leP256.status, p);
   128c2:	f813 cb01 	ldrb.w	ip, [r3], #1
   128c6:	f880 c004 	strb.w	ip, [r0, #4]
  memcpy(pMsg->leP256.key, p, HCI_P256_KEY_LEN);
   128ca:	3141      	adds	r1, #65	; 0x41
   128cc:	681d      	ldr	r5, [r3, #0]
   128ce:	685c      	ldr	r4, [r3, #4]
   128d0:	f8d3 e008 	ldr.w	lr, [r3, #8]
   128d4:	68de      	ldr	r6, [r3, #12]
   128d6:	60d6      	str	r6, [r2, #12]
   128d8:	3310      	adds	r3, #16
   128da:	428b      	cmp	r3, r1
   128dc:	6015      	str	r5, [r2, #0]
   128de:	6054      	str	r4, [r2, #4]
   128e0:	f8c2 e008 	str.w	lr, [r2, #8]
   128e4:	f102 0210 	add.w	r2, r2, #16
   128e8:	d1f0      	bne.n	128cc <hciEvtParseReadPubKeyCmdCmpl+0x10>
  pMsg->hdr.status = pMsg->leP256.status;
   128ea:	f880 c003 	strb.w	ip, [r0, #3]
}
   128ee:	bd70      	pop	{r4, r5, r6, pc}

000128f0 <hciEvtParseLeRandCmdCmpl>:
  BSTREAM_TO_UINT8(pMsg->leRandCmdCmpl.status, p);
   128f0:	460b      	mov	r3, r1
   128f2:	f813 2b01 	ldrb.w	r2, [r3], #1
   128f6:	7102      	strb	r2, [r0, #4]
  memcpy(pMsg->leRandCmdCmpl.randNum, p, HCI_RAND_LEN);
   128f8:	f8d1 1001 	ldr.w	r1, [r1, #1]
   128fc:	685b      	ldr	r3, [r3, #4]
   128fe:	f8c0 3009 	str.w	r3, [r0, #9]
   12902:	f8c0 1005 	str.w	r1, [r0, #5]
  pMsg->hdr.status = pMsg->leRandCmdCmpl.status;
   12906:	70c2      	strb	r2, [r0, #3]
}
   12908:	4770      	bx	lr
   1290a:	bf00      	nop

0001290c <hciEvtParseLeEncryptCmdCmpl>:
{
   1290c:	b500      	push	{lr}
  BSTREAM_TO_UINT8(pMsg->leEncryptCmdCmpl.status, p);
   1290e:	460b      	mov	r3, r1
   12910:	f813 2b01 	ldrb.w	r2, [r3], #1
   12914:	7102      	strb	r2, [r0, #4]
  memcpy(pMsg->leEncryptCmdCmpl.data, p, HCI_ENCRYPT_DATA_LEN);
   12916:	f8d1 e001 	ldr.w	lr, [r1, #1]
   1291a:	f8d3 c004 	ldr.w	ip, [r3, #4]
   1291e:	6899      	ldr	r1, [r3, #8]
   12920:	68db      	ldr	r3, [r3, #12]
   12922:	f8c0 3011 	str.w	r3, [r0, #17]
   12926:	f8c0 e005 	str.w	lr, [r0, #5]
   1292a:	f8c0 c009 	str.w	ip, [r0, #9]
   1292e:	f8c0 100d 	str.w	r1, [r0, #13]
  pMsg->hdr.status = pMsg->leEncryptCmdCmpl.status;
   12932:	70c2      	strb	r2, [r0, #3]
}
   12934:	f85d fb04 	ldr.w	pc, [sp], #4

00012938 <hciEvtParseVendorSpec>:
  memcpy(pMsg->vendorSpec.param, p, len);
   12938:	3004      	adds	r0, #4
   1293a:	f7f9 bbe1 	b.w	c100 <memcpy>
   1293e:	bf00      	nop

00012940 <hciEvtParseVendorSpecCmdCmpl>:
  BSTREAM_TO_UINT16(pMsg->vendorSpecCmdCmpl.opcode, p);
   12940:	f811 cc01 	ldrb.w	ip, [r1, #-1]
   12944:	f811 3c02 	ldrb.w	r3, [r1, #-2]
   12948:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   1294c:	8083      	strh	r3, [r0, #4]
  BSTREAM_TO_UINT8(pMsg->hdr.status, p);
   1294e:	f811 3b01 	ldrb.w	r3, [r1], #1
   12952:	70c3      	strb	r3, [r0, #3]
  memcpy(&pMsg->vendorSpecCmdCmpl.param[0], p, len - 4);
   12954:	3a04      	subs	r2, #4
   12956:	3006      	adds	r0, #6
   12958:	f7f9 bbd2 	b.w	c100 <memcpy>

0001295c <hciEvtParseLeLtkReq>:
  BSTREAM_TO_UINT16(pMsg->leLtkReq.handle, p);
   1295c:	460a      	mov	r2, r1
   1295e:	f891 c001 	ldrb.w	ip, [r1, #1]
   12962:	f812 3b02 	ldrb.w	r3, [r2], #2
   12966:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   1296a:	b29b      	uxth	r3, r3
   1296c:	8083      	strh	r3, [r0, #4]
  memcpy(pMsg->leLtkReq.randNum, p, HCI_RAND_LEN);
   1296e:	f8d1 c002 	ldr.w	ip, [r1, #2]
   12972:	6852      	ldr	r2, [r2, #4]
   12974:	f8c0 200a 	str.w	r2, [r0, #10]
   12978:	f8c0 c006 	str.w	ip, [r0, #6]
  BSTREAM_TO_UINT16(pMsg->leLtkReq.encDiversifier, p);
   1297c:	f891 c00b 	ldrb.w	ip, [r1, #11]
   12980:	7a8a      	ldrb	r2, [r1, #10]
  pMsg->hdr.param = pMsg->leLtkReq.handle;
   12982:	8003      	strh	r3, [r0, #0]
  BSTREAM_TO_UINT16(pMsg->leLtkReq.encDiversifier, p);
   12984:	eb02 230c 	add.w	r3, r2, ip, lsl #8
   12988:	81c3      	strh	r3, [r0, #14]
}
   1298a:	4770      	bx	lr

0001298c <hciEvtParseReadLeRemoteFeatCmpl>:
  BSTREAM_TO_UINT8(pMsg->leReadRemoteFeatCmpl.status, p);
   1298c:	780a      	ldrb	r2, [r1, #0]
   1298e:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leReadRemoteFeatCmpl.handle, p);
   12990:	f891 c002 	ldrb.w	ip, [r1, #2]
   12994:	784b      	ldrb	r3, [r1, #1]
   12996:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   1299a:	b29b      	uxth	r3, r3
   1299c:	80c3      	strh	r3, [r0, #6]
  memcpy(&pMsg->leReadRemoteFeatCmpl.features, p, HCI_FEAT_LEN);
   1299e:	f8d1 c003 	ldr.w	ip, [r1, #3]
   129a2:	f8d1 1007 	ldr.w	r1, [r1, #7]
   129a6:	60c1      	str	r1, [r0, #12]
   129a8:	f8c0 c008 	str.w	ip, [r0, #8]
  pMsg->hdr.param = pMsg->leReadRemoteFeatCmpl.handle;
   129ac:	8003      	strh	r3, [r0, #0]
  pMsg->hdr.status = pMsg->leReadRemoteFeatCmpl.status;
   129ae:	70c2      	strb	r2, [r0, #3]
}
   129b0:	4770      	bx	lr
   129b2:	bf00      	nop

000129b4 <hciEvtParseReadChanMapCmdCmpl>:
  BSTREAM_TO_UINT8(pMsg->readChanMapCmdCmpl.status, p);
   129b4:	780a      	ldrb	r2, [r1, #0]
   129b6:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->readChanMapCmdCmpl.handle, p);
   129b8:	f891 c002 	ldrb.w	ip, [r1, #2]
   129bc:	784b      	ldrb	r3, [r1, #1]
   129be:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   129c2:	b29b      	uxth	r3, r3
   129c4:	80c3      	strh	r3, [r0, #6]
  memcpy(pMsg->readChanMapCmdCmpl.chanMap, p, HCI_CHAN_MAP_LEN);
   129c6:	f8d1 c003 	ldr.w	ip, [r1, #3]
   129ca:	f8c0 c008 	str.w	ip, [r0, #8]
   129ce:	79c9      	ldrb	r1, [r1, #7]
   129d0:	7301      	strb	r1, [r0, #12]
  pMsg->hdr.param = pMsg->readChanMapCmdCmpl.handle;
   129d2:	8003      	strh	r3, [r0, #0]
  pMsg->hdr.status = pMsg->readChanMapCmdCmpl.status;
   129d4:	70c2      	strb	r2, [r0, #3]
}
   129d6:	4770      	bx	lr

000129d8 <hciEvtParseLeConnCmpl>:
{
   129d8:	b538      	push	{r3, r4, r5, lr}
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.status, p);
   129da:	780b      	ldrb	r3, [r1, #0]
   129dc:	7103      	strb	r3, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.handle, p);
   129de:	788a      	ldrb	r2, [r1, #2]
   129e0:	784b      	ldrb	r3, [r1, #1]
{
   129e2:	460d      	mov	r5, r1
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.handle, p);
   129e4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   129e8:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.role, p);
   129ea:	78eb      	ldrb	r3, [r5, #3]
   129ec:	7203      	strb	r3, [r0, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.addrType, p);
   129ee:	792b      	ldrb	r3, [r5, #4]
   129f0:	7243      	strb	r3, [r0, #9]
{
   129f2:	4604      	mov	r4, r0
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerAddr, p);
   129f4:	3105      	adds	r1, #5
   129f6:	300a      	adds	r0, #10
   129f8:	f009 fcac 	bl	1c354 <BdaCpy>
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connInterval, p);
   129fc:	7b2a      	ldrb	r2, [r5, #12]
   129fe:	7aeb      	ldrb	r3, [r5, #11]
   12a00:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   12a04:	8223      	strh	r3, [r4, #16]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connLatency, p);
   12a06:	7baa      	ldrb	r2, [r5, #14]
   12a08:	7b6b      	ldrb	r3, [r5, #13]
   12a0a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   12a0e:	8263      	strh	r3, [r4, #18]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.supTimeout, p);
   12a10:	7c2a      	ldrb	r2, [r5, #16]
   12a12:	7beb      	ldrb	r3, [r5, #15]
   12a14:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   12a18:	82a3      	strh	r3, [r4, #20]
  memset(pMsg->leConnCmpl.localRpa, 0, BDA_ADDR_LEN);
   12a1a:	2300      	movs	r3, #0
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.clockAccuracy, p);
   12a1c:	7c68      	ldrb	r0, [r5, #17]
  pMsg->hdr.param = pMsg->leConnCmpl.handle;
   12a1e:	88e2      	ldrh	r2, [r4, #6]
  memset(pMsg->leConnCmpl.localRpa, 0, BDA_ADDR_LEN);
   12a20:	f8c4 3017 	str.w	r3, [r4, #23]
   12a24:	f8a4 301b 	strh.w	r3, [r4, #27]
  memset(pMsg->leConnCmpl.peerRpa, 0, BDA_ADDR_LEN);
   12a28:	f8c4 301d 	str.w	r3, [r4, #29]
   12a2c:	f8a4 3021 	strh.w	r3, [r4, #33]	; 0x21
  pMsg->hdr.status = pMsg->leConnCmpl.status;
   12a30:	7923      	ldrb	r3, [r4, #4]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.clockAccuracy, p);
   12a32:	75a0      	strb	r0, [r4, #22]
  pMsg->hdr.param = pMsg->leConnCmpl.handle;
   12a34:	8022      	strh	r2, [r4, #0]
  pMsg->hdr.status = pMsg->leConnCmpl.status;
   12a36:	70e3      	strb	r3, [r4, #3]
}
   12a38:	bd38      	pop	{r3, r4, r5, pc}
   12a3a:	bf00      	nop

00012a3c <hciEvtProcessCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessCmdCmpl(uint8_t *p, uint8_t len)
{
   12a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12a40:	4688      	mov	r8, r1
  hciEvt_t      *pMsg;
  uint8_t       cbackEvt = 0;
  hciEvtCback_t cback = hciCb.evtCback;

  BSTREAM_TO_UINT8(numPkts, p);
  BSTREAM_TO_UINT16(opcode, p);
   12a42:	7843      	ldrb	r3, [r0, #1]
   12a44:	7881      	ldrb	r1, [r0, #2]
  hciEvtCback_t cback = hciCb.evtCback;
   12a46:	4a9e      	ldr	r2, [pc, #632]	; (12cc0 <hciEvtProcessCmdCmpl+0x284>)
  BSTREAM_TO_UINT8(numPkts, p);
   12a48:	7806      	ldrb	r6, [r0, #0]
  hciEvtCback_t cback = hciCb.evtCback;
   12a4a:	6897      	ldr	r7, [r2, #8]
  BSTREAM_TO_UINT16(opcode, p);
   12a4c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   12a50:	b29b      	uxth	r3, r3

  /* convert opcode to internal event code and perform special handling */
  switch (opcode)
   12a52:	f242 0157 	movw	r1, #8279	; 0x2057
   12a56:	428b      	cmp	r3, r1
  BSTREAM_TO_UINT16(opcode, p);
   12a58:	f100 0503 	add.w	r5, r0, #3
  switch (opcode)
   12a5c:	f200 808d 	bhi.w	12b7a <hciEvtProcessCmdCmpl+0x13e>
   12a60:	f242 0109 	movw	r1, #8201	; 0x2009
   12a64:	428b      	cmp	r3, r1
   12a66:	d955      	bls.n	12b14 <hciEvtProcessCmdCmpl+0xd8>
   12a68:	f5a3 5000 	sub.w	r0, r3, #8192	; 0x2000
   12a6c:	380a      	subs	r0, #10
   12a6e:	284d      	cmp	r0, #77	; 0x4d
   12a70:	f200 8083 	bhi.w	12b7a <hciEvtProcessCmdCmpl+0x13e>
   12a74:	e8df f010 	tbh	[pc, r0, lsl #1]
   12a78:	00810114 	.word	0x00810114
   12a7c:	0081010f 	.word	0x0081010f
   12a80:	0081011e 	.word	0x0081011e
   12a84:	00810081 	.word	0x00810081
   12a88:	00810081 	.word	0x00810081
   12a8c:	010a0081 	.word	0x010a0081
   12a90:	01040081 	.word	0x01040081
   12a94:	008100fe 	.word	0x008100fe
   12a98:	00f400f9 	.word	0x00f400f9
   12a9c:	00810081 	.word	0x00810081
   12aa0:	00810081 	.word	0x00810081
   12aa4:	00ea00ef 	.word	0x00ea00ef
   12aa8:	00e000e5 	.word	0x00e000e5
   12aac:	008100db 	.word	0x008100db
   12ab0:	00d60081 	.word	0x00d60081
   12ab4:	00cc00d1 	.word	0x00cc00d1
   12ab8:	00c70081 	.word	0x00c70081
   12abc:	00bd00c2 	.word	0x00bd00c2
   12ac0:	00b80081 	.word	0x00b80081
   12ac4:	00ae00b3 	.word	0x00ae00b3
   12ac8:	00810081 	.word	0x00810081
   12acc:	00810081 	.word	0x00810081
   12ad0:	00810081 	.word	0x00810081
   12ad4:	00a90081 	.word	0x00a90081
   12ad8:	00810081 	.word	0x00810081
   12adc:	00810081 	.word	0x00810081
   12ae0:	00810081 	.word	0x00810081
   12ae4:	008100a4 	.word	0x008100a4
   12ae8:	0081009f 	.word	0x0081009f
   12aec:	00810081 	.word	0x00810081
   12af0:	00810081 	.word	0x00810081
   12af4:	00810081 	.word	0x00810081
   12af8:	00810081 	.word	0x00810081
   12afc:	00810081 	.word	0x00810081
   12b00:	00810081 	.word	0x00810081
   12b04:	00810081 	.word	0x00810081
   12b08:	00810081 	.word	0x00810081
   12b0c:	0095009a 	.word	0x0095009a
   12b10:	01190090 	.word	0x01190090
   12b14:	f640 427c 	movw	r2, #3196	; 0xc7c
   12b18:	4293      	cmp	r3, r2
   12b1a:	d029      	beq.n	12b70 <hciEvtProcessCmdCmpl+0x134>
   12b1c:	f241 4205 	movw	r2, #5125	; 0x1405
   12b20:	4293      	cmp	r3, r2
   12b22:	d11c      	bne.n	12b5e <hciEvtProcessCmdCmpl+0x122>
   12b24:	f04f 0a07 	mov.w	sl, #7
   12b28:	200a      	movs	r0, #10
  case HCI_OPCODE_LE_READ_CHAN_MAP:
    cbackEvt = HCI_LE_READ_CHAN_MAP_CMD_CMPL_CBACK_EVT;
    break;

  case HCI_OPCODE_READ_RSSI:
    cbackEvt = HCI_READ_RSSI_CMD_CMPL_CBACK_EVT;
   12b2a:	46d1      	mov	r9, sl

  /* if callback is executed for this event */
  if (cbackEvt != 0)
  {
    /* allocate temp buffer */
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
   12b2c:	f000 fe12 	bl	13754 <WsfBufAlloc>
   12b30:	4604      	mov	r4, r0
   12b32:	b178      	cbz	r0, 12b54 <hciEvtProcessCmdCmpl+0x118>
      pMsg->hdr.param = 0;
      pMsg->hdr.event = cbackEvt;
      pMsg->hdr.status = 0;

      /* execute parsing function for the event */
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, p, len);
   12b34:	4b63      	ldr	r3, [pc, #396]	; (12cc4 <hciEvtProcessCmdCmpl+0x288>)
      pMsg->hdr.event = cbackEvt;
   12b36:	f880 9002 	strb.w	r9, [r0, #2]
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, p, len);
   12b3a:	4629      	mov	r1, r5
   12b3c:	f853 502a 	ldr.w	r5, [r3, sl, lsl #2]
      pMsg->hdr.param = 0;
   12b40:	2300      	movs	r3, #0
   12b42:	8003      	strh	r3, [r0, #0]
      pMsg->hdr.status = 0;
   12b44:	70c3      	strb	r3, [r0, #3]
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, p, len);
   12b46:	4642      	mov	r2, r8
   12b48:	47a8      	blx	r5

      /* execute callback */
      (*cback)(pMsg);
   12b4a:	4620      	mov	r0, r4
   12b4c:	47b8      	blx	r7

      /* free buffer */
      WsfBufFree(pMsg);
   12b4e:	4620      	mov	r0, r4
   12b50:	f000 fe30 	bl	137b4 <WsfBufFree>
    }
  }

  hciCmdRecvCmpl(numPkts);
   12b54:	4630      	mov	r0, r6
}
   12b56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  hciCmdRecvCmpl(numPkts);
   12b5a:	f7fd bf7d 	b.w	10a58 <hciCmdRecvCmpl>
  switch (opcode)
   12b5e:	f640 422d 	movw	r2, #3117	; 0xc2d
   12b62:	4293      	cmp	r3, r2
   12b64:	d1f6      	bne.n	12b54 <hciEvtProcessCmdCmpl+0x118>
   12b66:	f04f 0a09 	mov.w	sl, #9
   12b6a:	2008      	movs	r0, #8
    cbackEvt = HCI_READ_TX_PWR_LVL_CMD_CMPL_CBACK_EVT;
   12b6c:	46d1      	mov	r9, sl
   12b6e:	e7dd      	b.n	12b2c <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   12b70:	f04f 0a27 	mov.w	sl, #39	; 0x27
   12b74:	2008      	movs	r0, #8
    cbackEvt = HCI_WRITE_AUTH_PAYLOAD_TO_CMD_CMPL_CBACK_EVT;
   12b76:	46d1      	mov	r9, sl
   12b78:	e7d8      	b.n	12b2c <hciEvtProcessCmdCmpl+0xf0>
    if (HCI_OGF(opcode) == HCI_OGF_VENDOR_SPEC)
   12b7a:	0a9a      	lsrs	r2, r3, #10
   12b7c:	2a3f      	cmp	r2, #63	; 0x3f
   12b7e:	d1e9      	bne.n	12b54 <hciEvtProcessCmdCmpl+0x118>
      cbackEvt = hciCoreVsCmdCmplRcvd(opcode, p, len);
   12b80:	4618      	mov	r0, r3
   12b82:	4642      	mov	r2, r8
   12b84:	4629      	mov	r1, r5
   12b86:	f004 fe17 	bl	177b8 <hciCoreVsCmdCmplRcvd>
  if (cbackEvt != 0)
   12b8a:	4681      	mov	r9, r0
   12b8c:	2800      	cmp	r0, #0
   12b8e:	d0e1      	beq.n	12b54 <hciEvtProcessCmdCmpl+0x118>
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
   12b90:	4b4d      	ldr	r3, [pc, #308]	; (12cc8 <hciEvtProcessCmdCmpl+0x28c>)
   12b92:	46ca      	mov	sl, r9
   12b94:	5c18      	ldrb	r0, [r3, r0]
   12b96:	e7c9      	b.n	12b2c <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   12b98:	f04f 0a41 	mov.w	sl, #65	; 0x41
   12b9c:	2008      	movs	r0, #8
    cbackEvt = HCI_LE_CONN_CTE_REQ_ENABLE_CMD_CMPL_CBACK_EVT;
   12b9e:	46d1      	mov	r9, sl
   12ba0:	e7c4      	b.n	12b2c <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   12ba2:	f04f 0a40 	mov.w	sl, #64	; 0x40
   12ba6:	2008      	movs	r0, #8
    cbackEvt = HCI_LE_SET_CONN_CTE_TX_PARAMS_CMD_CMPL_CBACK_EVT;
   12ba8:	46d1      	mov	r9, sl
   12baa:	e7bf      	b.n	12b2c <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   12bac:	f04f 0a3f 	mov.w	sl, #63	; 0x3f
   12bb0:	2008      	movs	r0, #8
    cbackEvt = HCI_LE_SET_CONN_CTE_RX_PARAMS_CMD_CMPL_CBACK_EVT;
   12bb2:	46d1      	mov	r9, sl
   12bb4:	e7ba      	b.n	12b2c <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   12bb6:	f04f 0a36 	mov.w	sl, #54	; 0x36
   12bba:	2004      	movs	r0, #4
    cbackEvt = HCI_LE_EXT_SCAN_ENABLE_CMD_CMPL_CBACK_EVT;
   12bbc:	46d1      	mov	r9, sl
   12bbe:	e7b5      	b.n	12b2c <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   12bc0:	f04f 0a38 	mov.w	sl, #56	; 0x38
   12bc4:	2004      	movs	r0, #4
    cbackEvt = HCI_LE_PER_ADV_ENABLE_CMD_CMPL_CBACK_EVT;
   12bc6:	46d1      	mov	r9, sl
   12bc8:	e7b0      	b.n	12b2c <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   12bca:	f04f 0a37 	mov.w	sl, #55	; 0x37
   12bce:	2004      	movs	r0, #4
    cbackEvt = HCI_LE_EXT_ADV_ENABLE_CMD_CMPL_CBACK_EVT;
   12bd0:	46d1      	mov	r9, sl
   12bd2:	e7ab      	b.n	12b2c <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   12bd4:	f04f 0a2a 	mov.w	sl, #42	; 0x2a
   12bd8:	2006      	movs	r0, #6
    cbackEvt = HCI_LE_SET_DEF_PHY_CMD_CMPL_CBACK_EVT;
   12bda:	46d1      	mov	r9, sl
   12bdc:	e7a6      	b.n	12b2c <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   12bde:	f04f 0a29 	mov.w	sl, #41	; 0x29
   12be2:	200a      	movs	r0, #10
    cbackEvt = HCI_LE_READ_PHY_CMD_CMPL_CBACK_EVT;
   12be4:	46d1      	mov	r9, sl
   12be6:	e7a1      	b.n	12b2c <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   12be8:	f04f 0a22 	mov.w	sl, #34	; 0x22
   12bec:	200e      	movs	r0, #14
    cbackEvt = HCI_LE_READ_MAX_DATA_LEN_CMD_CMPL_CBACK_EVT;
   12bee:	46d1      	mov	r9, sl
   12bf0:	e79c      	b.n	12b2c <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   12bf2:	f04f 0a1a 	mov.w	sl, #26
   12bf6:	2006      	movs	r0, #6
    cbackEvt = HCI_LE_SET_ADDR_RES_ENABLE_CMD_CMPL_CBACK_EVT;
   12bf8:	46d1      	mov	r9, sl
   12bfa:	e797      	b.n	12b2c <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   12bfc:	f04f 0a19 	mov.w	sl, #25
   12c00:	200c      	movs	r0, #12
    cbackEvt = HCI_LE_READ_LOCAL_RES_ADDR_CMD_CMPL_CBACK_EVT;
   12c02:	46d1      	mov	r9, sl
   12c04:	e792      	b.n	12b2c <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   12c06:	f04f 0a18 	mov.w	sl, #24
   12c0a:	200c      	movs	r0, #12
    cbackEvt = HCI_LE_READ_PEER_RES_ADDR_CMD_CMPL_CBACK_EVT;
   12c0c:	46d1      	mov	r9, sl
   12c0e:	e78d      	b.n	12b2c <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   12c10:	f04f 0a17 	mov.w	sl, #23
   12c14:	2006      	movs	r0, #6
    cbackEvt = HCI_LE_CLEAR_RES_LIST_CMD_CMPL_CBACK_EVT;
   12c16:	46d1      	mov	r9, sl
   12c18:	e788      	b.n	12b2c <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   12c1a:	f04f 0a16 	mov.w	sl, #22
   12c1e:	2006      	movs	r0, #6
    cbackEvt = HCI_LE_REM_DEV_FROM_RES_LIST_CMD_CMPL_CBACK_EVT;
   12c20:	46d1      	mov	r9, sl
   12c22:	e783      	b.n	12b2c <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   12c24:	f04f 0a15 	mov.w	sl, #21
   12c28:	2006      	movs	r0, #6
    cbackEvt = HCI_LE_ADD_DEV_TO_RES_LIST_CMD_CMPL_CBACK_EVT;
   12c2a:	46d1      	mov	r9, sl
   12c2c:	e77e      	b.n	12b2c <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   12c2e:	f04f 0a20 	mov.w	sl, #32
   12c32:	2006      	movs	r0, #6
    cbackEvt = HCI_LE_WRITE_DEF_DATA_LEN_CMD_CMPL_CBACK_EVT;
   12c34:	46d1      	mov	r9, sl
   12c36:	e779      	b.n	12b2c <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   12c38:	f04f 0a1f 	mov.w	sl, #31
   12c3c:	200a      	movs	r0, #10
    cbackEvt = HCI_LE_READ_DEF_DATA_LEN_CMD_CMPL_CBACK_EVT;
   12c3e:	46d1      	mov	r9, sl
   12c40:	e774      	b.n	12b2c <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   12c42:	f04f 0a21 	mov.w	sl, #33	; 0x21
   12c46:	2008      	movs	r0, #8
    cbackEvt = HCI_LE_SET_DATA_LEN_CMD_CMPL_CBACK_EVT;
   12c48:	46d1      	mov	r9, sl
   12c4a:	e76f      	b.n	12b2c <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   12c4c:	f04f 0a1e 	mov.w	sl, #30
   12c50:	2008      	movs	r0, #8
    cbackEvt = HCI_LE_REM_CONN_PARAM_NEG_REP_CMD_CMPL_CBACK_EVT;
   12c52:	46d1      	mov	r9, sl
   12c54:	e76a      	b.n	12b2c <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   12c56:	f04f 0a1d 	mov.w	sl, #29
   12c5a:	2008      	movs	r0, #8
    cbackEvt = HCI_LE_REM_CONN_PARAM_REP_CMD_CMPL_CBACK_EVT;
   12c5c:	46d1      	mov	r9, sl
   12c5e:	e765      	b.n	12b2c <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   12c60:	f04f 0a0d 	mov.w	sl, #13
   12c64:	2008      	movs	r0, #8
    cbackEvt = HCI_LE_LTK_REQ_NEG_REPL_CMD_CMPL_CBACK_EVT;
   12c66:	46d1      	mov	r9, sl
   12c68:	e760      	b.n	12b2c <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   12c6a:	f04f 0a0c 	mov.w	sl, #12
   12c6e:	2008      	movs	r0, #8
    cbackEvt = HCI_LE_LTK_REQ_REPL_CMD_CMPL_CBACK_EVT;
   12c70:	46d1      	mov	r9, sl
   12c72:	e75b      	b.n	12b2c <hciEvtProcessCmdCmpl+0xf0>
    cback = hciCb.secCback;
   12c74:	f04f 0a1c 	mov.w	sl, #28
   12c78:	68d7      	ldr	r7, [r2, #12]
   12c7a:	200e      	movs	r0, #14
    cbackEvt = HCI_LE_RAND_CMD_CMPL_CBACK_EVT;
   12c7c:	46d1      	mov	r9, sl
   12c7e:	e755      	b.n	12b2c <hciEvtProcessCmdCmpl+0xf0>
    cback = hciCb.secCback;
   12c80:	f04f 0a1b 	mov.w	sl, #27
   12c84:	68d7      	ldr	r7, [r2, #12]
   12c86:	2016      	movs	r0, #22
    cbackEvt = HCI_LE_ENCRYPT_CMD_CMPL_CBACK_EVT;
   12c88:	46d1      	mov	r9, sl
   12c8a:	e74f      	b.n	12b2c <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   12c8c:	f04f 0a08 	mov.w	sl, #8
   12c90:	200e      	movs	r0, #14
    cbackEvt = HCI_LE_READ_CHAN_MAP_CMD_CMPL_CBACK_EVT;
   12c92:	46d1      	mov	r9, sl
   12c94:	e74a      	b.n	12b2c <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   12c96:	f04f 0a34 	mov.w	sl, #52	; 0x34
   12c9a:	2004      	movs	r0, #4
    cbackEvt = HCI_LE_SCAN_ENABLE_CMD_CMPL_CBACK_EVT;
   12c9c:	46d1      	mov	r9, sl
   12c9e:	e745      	b.n	12b2c <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   12ca0:	f04f 0a35 	mov.w	sl, #53	; 0x35
   12ca4:	2004      	movs	r0, #4
    cbackEvt = HCI_LE_ADV_ENABLE_CMD_CMPL_CBACK_EVT;
   12ca6:	46d1      	mov	r9, sl
   12ca8:	e740      	b.n	12b2c <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   12caa:	f04f 0a42 	mov.w	sl, #66	; 0x42
   12cae:	2008      	movs	r0, #8
    cbackEvt = HCI_LE_CONN_CTE_RSP_ENABLE_CMD_CMPL_CBACK_EVT;
   12cb0:	46d1      	mov	r9, sl
   12cb2:	e73b      	b.n	12b2c <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   12cb4:	f04f 0a05 	mov.w	sl, #5
   12cb8:	2006      	movs	r0, #6
   12cba:	46d1      	mov	r9, sl
   12cbc:	e736      	b.n	12b2c <hciEvtProcessCmdCmpl+0xf0>
   12cbe:	bf00      	nop
   12cc0:	10004c50 	.word	0x10004c50
   12cc4:	000241f0 	.word	0x000241f0
   12cc8:	000241ac 	.word	0x000241ac

00012ccc <hciEvtProcessMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessMsg(uint8_t *pEvt)
{
   12ccc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hciEvt_t  *pMsg;
  uint16_t  handle;
  hciEvtCback_t cback = hciCb.evtCback;

  /* parse HCI event header */
  BSTREAM_TO_UINT8(evt, pEvt);
   12cd0:	4605      	mov	r5, r0
  hciEvtCback_t cback = hciCb.evtCback;
   12cd2:	4e89      	ldr	r6, [pc, #548]	; (12ef8 <hciEvtProcessMsg+0x22c>)
  BSTREAM_TO_UINT8(evt, pEvt);
   12cd4:	f815 3b02 	ldrb.w	r3, [r5], #2
  hciEvtCback_t cback = hciCb.evtCback;
   12cd8:	68b7      	ldr	r7, [r6, #8]
  BSTREAM_TO_UINT8(len, pEvt);
   12cda:	f890 8001 	ldrb.w	r8, [r0, #1]

  /* convert hci event code to internal event code and perform special handling */
  switch (evt)
   12cde:	2b57      	cmp	r3, #87	; 0x57
   12ce0:	d831      	bhi.n	12d46 <hciEvtProcessMsg+0x7a>
   12ce2:	2b04      	cmp	r3, #4
   12ce4:	d94d      	bls.n	12d82 <hciEvtProcessMsg+0xb6>
   12ce6:	3b05      	subs	r3, #5
   12ce8:	4604      	mov	r4, r0
   12cea:	2b52      	cmp	r3, #82	; 0x52
   12cec:	d849      	bhi.n	12d82 <hciEvtProcessMsg+0xb6>
   12cee:	e8df f003 	tbb	[pc, r3]
   12cf2:	4853      	.short	0x4853
   12cf4:	48487048 	.word	0x48487048
   12cf8:	82487948 	.word	0x82487948
   12cfc:	4848958c 	.word	0x4848958c
   12d00:	4848489e 	.word	0x4848489e
   12d04:	a6484848 	.word	0xa6484848
   12d08:	48484848 	.word	0x48484848
   12d0c:	48484848 	.word	0x48484848
   12d10:	48484848 	.word	0x48484848
   12d14:	48484848 	.word	0x48484848
   12d18:	48484848 	.word	0x48484848
   12d1c:	4848ab48 	.word	0x4848ab48
   12d20:	48484848 	.word	0x48484848
   12d24:	48484848 	.word	0x48484848
   12d28:	b4484848 	.word	0xb4484848
   12d2c:	48484848 	.word	0x48484848
   12d30:	48484848 	.word	0x48484848
   12d34:	48484848 	.word	0x48484848
   12d38:	48484848 	.word	0x48484848
   12d3c:	48484848 	.word	0x48484848
   12d40:	48484848 	.word	0x48484848
   12d44:	4a          	.byte	0x4a
   12d45:	00          	.byte	0x00
   12d46:	2bff      	cmp	r3, #255	; 0xff
   12d48:	d11b      	bne.n	12d82 <hciEvtProcessMsg+0xb6>
      /* for nonstandard controllers that send a vendor-specific event instead
       * of a command complete event
       */
      hciCmdRecvCmpl(1);
#endif
      hciEvtStats.numVendorSpecEvt++;
   12d4a:	4a6c      	ldr	r2, [pc, #432]	; (12efc <hciEvtProcessMsg+0x230>)
   12d4c:	4e6c      	ldr	r6, [pc, #432]	; (12f00 <hciEvtProcessMsg+0x234>)
   12d4e:	8a93      	ldrh	r3, [r2, #20]
   12d50:	3301      	adds	r3, #1
   12d52:	8293      	strh	r3, [r2, #20]
   12d54:	2006      	movs	r0, #6
      cbackEvt = HCI_VENDOR_SPEC_CBACK_EVT;
   12d56:	f04f 0913 	mov.w	r9, #19

  /* if callback is executed for this event */
  if (cbackEvt != 0)
  {
    /* allocate temp buffer */
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
   12d5a:	f000 fcfb 	bl	13754 <WsfBufAlloc>
   12d5e:	4604      	mov	r4, r0
   12d60:	b178      	cbz	r0, 12d82 <hciEvtProcessMsg+0xb6>
    {
      /* initialize message header */
      pMsg->hdr.param = 0;
   12d62:	2300      	movs	r3, #0
      pMsg->hdr.event = cbackEvt;
      pMsg->hdr.status = 0;

      /* execute parsing function for the event */
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, pEvt, len);
   12d64:	4642      	mov	r2, r8
      pMsg->hdr.param = 0;
   12d66:	8023      	strh	r3, [r4, #0]
      pMsg->hdr.status = 0;
   12d68:	70e3      	strb	r3, [r4, #3]
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, pEvt, len);
   12d6a:	4629      	mov	r1, r5
      pMsg->hdr.event = cbackEvt;
   12d6c:	f884 9002 	strb.w	r9, [r4, #2]
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, pEvt, len);
   12d70:	47b0      	blx	r6

      /* execute callback */
      (*cback)(pMsg);
   12d72:	4620      	mov	r0, r4
   12d74:	47b8      	blx	r7

      /* free buffer */
      WsfBufFree(pMsg);
   12d76:	4620      	mov	r0, r4
   12d78:	f000 fd1c 	bl	137b4 <WsfBufFree>
    }

    /* execute core procedure for connection close after callback */
    if (cbackEvt == HCI_DISCONNECT_CMPL_CBACK_EVT)
   12d7c:	f1b9 0f03 	cmp.w	r9, #3
   12d80:	d01e      	beq.n	12dc0 <hciEvtProcessMsg+0xf4>
    {
      BYTES_TO_UINT16(handle, (pEvt + 1));
      hciCoreConnClose(handle);
    }
  }
}
   12d82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hciEvtStats.numAuthToEvt++;
   12d86:	4a5d      	ldr	r2, [pc, #372]	; (12efc <hciEvtProcessMsg+0x230>)
   12d88:	4e5e      	ldr	r6, [pc, #376]	; (12f04 <hciEvtProcessMsg+0x238>)
   12d8a:	8ad3      	ldrh	r3, [r2, #22]
   12d8c:	3301      	adds	r3, #1
   12d8e:	82d3      	strh	r3, [r2, #22]
   12d90:	2006      	movs	r0, #6
      cbackEvt = HCI_AUTH_PAYLOAD_TO_EXPIRED_CBACK_EVT;
   12d92:	f04f 0928 	mov.w	r9, #40	; 0x28
   12d96:	e7e0      	b.n	12d5a <hciEvtProcessMsg+0x8e>
      hciEvtStats.numDiscCmplEvt++;
   12d98:	4a58      	ldr	r2, [pc, #352]	; (12efc <hciEvtProcessMsg+0x230>)
   12d9a:	8813      	ldrh	r3, [r2, #0]
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
   12d9c:	200a      	movs	r0, #10
      hciEvtStats.numDiscCmplEvt++;
   12d9e:	3301      	adds	r3, #1
   12da0:	8013      	strh	r3, [r2, #0]
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
   12da2:	f000 fcd7 	bl	13754 <WsfBufAlloc>
   12da6:	4604      	mov	r4, r0
   12da8:	b150      	cbz	r0, 12dc0 <hciEvtProcessMsg+0xf4>
      pMsg->hdr.param = 0;
   12daa:	f44f 3340 	mov.w	r3, #196608	; 0x30000
   12dae:	6003      	str	r3, [r0, #0]
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, pEvt, len);
   12db0:	4642      	mov	r2, r8
   12db2:	4629      	mov	r1, r5
   12db4:	f7ff faf0 	bl	12398 <hciEvtParseDisconnectCmpl>
      (*cback)(pMsg);
   12db8:	47b8      	blx	r7
      WsfBufFree(pMsg);
   12dba:	4620      	mov	r0, r4
   12dbc:	f000 fcfa 	bl	137b4 <WsfBufFree>
      BYTES_TO_UINT16(handle, (pEvt + 1));
   12dc0:	78ab      	ldrb	r3, [r5, #2]
   12dc2:	7868      	ldrb	r0, [r5, #1]
   12dc4:	eb00 2003 	add.w	r0, r0, r3, lsl #8
      hciCoreConnClose(handle);
   12dc8:	b280      	uxth	r0, r0
}
   12dca:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      hciCoreConnClose(handle);
   12dce:	f7ff b88f 	b.w	11ef0 <hciCoreConnClose>
      hciEvtStats.numEncChangeEvt++;
   12dd2:	4a4a      	ldr	r2, [pc, #296]	; (12efc <hciEvtProcessMsg+0x230>)
   12dd4:	4e4c      	ldr	r6, [pc, #304]	; (12f08 <hciEvtProcessMsg+0x23c>)
   12dd6:	8853      	ldrh	r3, [r2, #2]
   12dd8:	3301      	adds	r3, #1
   12dda:	8053      	strh	r3, [r2, #2]
   12ddc:	200a      	movs	r0, #10
      cbackEvt = HCI_ENC_CHANGE_CBACK_EVT;
   12dde:	f04f 090f 	mov.w	r9, #15
   12de2:	e7ba      	b.n	12d5a <hciEvtProcessMsg+0x8e>
      hciEvtStats.numReadRemoteVerInfoCmpEvt++;
   12de4:	4a45      	ldr	r2, [pc, #276]	; (12efc <hciEvtProcessMsg+0x230>)
   12de6:	4e49      	ldr	r6, [pc, #292]	; (12f0c <hciEvtProcessMsg+0x240>)
   12de8:	8893      	ldrh	r3, [r2, #4]
   12dea:	3301      	adds	r3, #1
   12dec:	8093      	strh	r3, [r2, #4]
   12dee:	200e      	movs	r0, #14
      cbackEvt = HCI_READ_REMOTE_VER_INFO_CMPL_CBACK_EVT;
   12df0:	f04f 090a 	mov.w	r9, #10
   12df4:	e7b1      	b.n	12d5a <hciEvtProcessMsg+0x8e>
      hciEvtStats.numCmdCmplEvt++;
   12df6:	4a41      	ldr	r2, [pc, #260]	; (12efc <hciEvtProcessMsg+0x230>)
   12df8:	88d3      	ldrh	r3, [r2, #6]
   12dfa:	3301      	adds	r3, #1
      hciEvtProcessCmdCmpl(pEvt, len);
   12dfc:	4641      	mov	r1, r8
   12dfe:	4628      	mov	r0, r5
      hciEvtStats.numCmdCmplEvt++;
   12e00:	80d3      	strh	r3, [r2, #6]
}
   12e02:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      hciEvtProcessCmdCmpl(pEvt, len);
   12e06:	f7ff be19 	b.w	12a3c <hciEvtProcessCmdCmpl>
      hciEvtStats.numCmdStatusEvt++;
   12e0a:	4a3c      	ldr	r2, [pc, #240]	; (12efc <hciEvtProcessMsg+0x230>)
   12e0c:	8913      	ldrh	r3, [r2, #8]
   12e0e:	3301      	adds	r3, #1
   12e10:	8113      	strh	r3, [r2, #8]
  hciCmdRecvCmpl(numPkts);
   12e12:	78c0      	ldrb	r0, [r0, #3]
}
   12e14:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hciCmdRecvCmpl(numPkts);
   12e18:	f7fd be1e 	b.w	10a58 <hciCmdRecvCmpl>
      hciEvtStats.numHwErrorEvt++;
   12e1c:	4a37      	ldr	r2, [pc, #220]	; (12efc <hciEvtProcessMsg+0x230>)
   12e1e:	4e3c      	ldr	r6, [pc, #240]	; (12f10 <hciEvtProcessMsg+0x244>)
   12e20:	8953      	ldrh	r3, [r2, #10]
   12e22:	3301      	adds	r3, #1
   12e24:	8153      	strh	r3, [r2, #10]
   12e26:	2006      	movs	r0, #6
      cbackEvt = HCI_HW_ERROR_CBACK_EVT;
   12e28:	f04f 0914 	mov.w	r9, #20
   12e2c:	e795      	b.n	12d5a <hciEvtProcessMsg+0x8e>
      hciCoreNumCmplPkts(pEvt);
   12e2e:	4628      	mov	r0, r5
   12e30:	f7ff f9fe 	bl	12230 <hciCoreNumCmplPkts>
      hciEvtStats.numCmplPktsEvt++;
   12e34:	4a31      	ldr	r2, [pc, #196]	; (12efc <hciEvtProcessMsg+0x230>)
   12e36:	8993      	ldrh	r3, [r2, #12]
   12e38:	3301      	adds	r3, #1
   12e3a:	8193      	strh	r3, [r2, #12]
  if (cbackEvt != 0)
   12e3c:	e7a1      	b.n	12d82 <hciEvtProcessMsg+0xb6>
      hciEvtStats.numDataBufOverflowEvt++;
   12e3e:	4a2f      	ldr	r2, [pc, #188]	; (12efc <hciEvtProcessMsg+0x230>)
   12e40:	89d3      	ldrh	r3, [r2, #14]
   12e42:	3301      	adds	r3, #1
   12e44:	81d3      	strh	r3, [r2, #14]
  if (cbackEvt != 0)
   12e46:	e79c      	b.n	12d82 <hciEvtProcessMsg+0xb6>
      hciEvtStats.numEncKeyRefreshCmplEvt++;
   12e48:	4a2c      	ldr	r2, [pc, #176]	; (12efc <hciEvtProcessMsg+0x230>)
   12e4a:	4e32      	ldr	r6, [pc, #200]	; (12f14 <hciEvtProcessMsg+0x248>)
   12e4c:	8a13      	ldrh	r3, [r2, #16]
   12e4e:	3301      	adds	r3, #1
   12e50:	8213      	strh	r3, [r2, #16]
   12e52:	2008      	movs	r0, #8
      cbackEvt = HCI_ENC_KEY_REFRESH_CMPL_CBACK_EVT;
   12e54:	f04f 090e 	mov.w	r9, #14
   12e58:	e77f      	b.n	12d5a <hciEvtProcessMsg+0x8e>
      hciEvtStats.numLeMetaEvt++;
   12e5a:	4a28      	ldr	r2, [pc, #160]	; (12efc <hciEvtProcessMsg+0x230>)
      BSTREAM_TO_UINT8(subEvt, pEvt);
   12e5c:	f890 9002 	ldrb.w	r9, [r0, #2]
      hciEvtStats.numLeMetaEvt++;
   12e60:	8a53      	ldrh	r3, [r2, #18]
      BSTREAM_TO_UINT8(subEvt, pEvt);
   12e62:	1cc5      	adds	r5, r0, #3
      hciEvtStats.numLeMetaEvt++;
   12e64:	3301      	adds	r3, #1
      APP_TRACE_INFO1("LE meta sub event = 0x%x", subEvt);
   12e66:	482c      	ldr	r0, [pc, #176]	; (12f18 <hciEvtProcessMsg+0x24c>)
      hciEvtStats.numLeMetaEvt++;
   12e68:	8253      	strh	r3, [r2, #18]
      APP_TRACE_INFO1("LE meta sub event = 0x%x", subEvt);
   12e6a:	4649      	mov	r1, r9
   12e6c:	f001 f852 	bl	13f14 <WsfTrace>
      switch (subEvt)
   12e70:	f109 33ff 	add.w	r3, r9, #4294967295
   12e74:	2b16      	cmp	r3, #22
   12e76:	d884      	bhi.n	12d82 <hciEvtProcessMsg+0xb6>
   12e78:	a201      	add	r2, pc, #4	; (adr r2, 12e80 <hciEvtProcessMsg+0x1b4>)
   12e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   12e7e:	bf00      	nop
   12e80:	00012fc1 	.word	0x00012fc1
   12e84:	00012f29 	.word	0x00012f29
   12e88:	000133f9 	.word	0x000133f9
   12e8c:	00012eef 	.word	0x00012eef
   12e90:	00012ee7 	.word	0x00012ee7
   12e94:	00012edd 	.word	0x00012edd
   12e98:	0001337d 	.word	0x0001337d
   12e9c:	00013371 	.word	0x00013371
   12ea0:	00013367 	.word	0x00013367
   12ea4:	00013357 	.word	0x00013357
   12ea8:	00013387 	.word	0x00013387
   12eac:	00013195 	.word	0x00013195
   12eb0:	00012fe3 	.word	0x00012fe3
   12eb4:	00012fd9 	.word	0x00012fd9
   12eb8:	000131bd 	.word	0x000131bd
   12ebc:	000131b3 	.word	0x000131b3
   12ec0:	000131a9 	.word	0x000131a9
   12ec4:	0001319f 	.word	0x0001319f
   12ec8:	0001329b 	.word	0x0001329b
   12ecc:	00012d83 	.word	0x00012d83
   12ed0:	00013217 	.word	0x00013217
   12ed4:	000132c9 	.word	0x000132c9
   12ed8:	00012fcf 	.word	0x00012fcf
   12edc:	4e0f      	ldr	r6, [pc, #60]	; (12f1c <hciEvtProcessMsg+0x250>)
   12ede:	200e      	movs	r0, #14
          cbackEvt = HCI_LE_REM_CONN_PARAM_REQ_CBACK_EVT;
   12ee0:	f04f 0923 	mov.w	r9, #35	; 0x23
   12ee4:	e739      	b.n	12d5a <hciEvtProcessMsg+0x8e>
   12ee6:	2010      	movs	r0, #16
   12ee8:	4e0d      	ldr	r6, [pc, #52]	; (12f20 <hciEvtProcessMsg+0x254>)
   12eea:	4681      	mov	r9, r0
   12eec:	e735      	b.n	12d5a <hciEvtProcessMsg+0x8e>
   12eee:	4e0d      	ldr	r6, [pc, #52]	; (12f24 <hciEvtProcessMsg+0x258>)
   12ef0:	2010      	movs	r0, #16
          cbackEvt = HCI_LE_READ_REMOTE_FEAT_CMPL_CBACK_EVT;
   12ef2:	f04f 090b 	mov.w	r9, #11
   12ef6:	e730      	b.n	12d5a <hciEvtProcessMsg+0x8e>
   12ef8:	10004c50 	.word	0x10004c50
   12efc:	10004d5c 	.word	0x10004d5c
   12f00:	00012939 	.word	0x00012939
   12f04:	0001268d 	.word	0x0001268d
   12f08:	000124c1 	.word	0x000124c1
   12f0c:	0001243d 	.word	0x0001243d
   12f10:	000124e9 	.word	0x000124e9
   12f14:	000124a9 	.word	0x000124a9
   12f18:	00024128 	.word	0x00024128
   12f1c:	000125f5 	.word	0x000125f5
   12f20:	0001295d 	.word	0x0001295d
   12f24:	0001298d 	.word	0x0001298d
  BSTREAM_TO_UINT8(i, p);
   12f28:	f894 8003 	ldrb.w	r8, [r4, #3]
  if (i > HCI_MAX_REPORTS)
   12f2c:	f1b8 0f0f 	cmp.w	r8, #15
   12f30:	f63f af27 	bhi.w	12d82 <hciEvtProcessMsg+0xb6>
  if ((pMsg = WsfBufAlloc(sizeof(hciLeAdvReportEvt_t) + HCI_ADV_DATA_LEN)) != NULL)
   12f34:	203b      	movs	r0, #59	; 0x3b
   12f36:	f000 fc0d 	bl	13754 <WsfBufAlloc>
   12f3a:	4605      	mov	r5, r0
   12f3c:	2800      	cmp	r0, #0
   12f3e:	f43f af20 	beq.w	12d82 <hciEvtProcessMsg+0xb6>
    while (i-- > 0)
   12f42:	f108 37ff 	add.w	r7, r8, #4294967295
   12f46:	b2ff      	uxtb	r7, r7
   12f48:	f1b8 0f00 	cmp.w	r8, #0
   12f4c:	f000 815e 	beq.w	1320c <hciEvtProcessMsg+0x540>
  BSTREAM_TO_UINT8(i, p);
   12f50:	3404      	adds	r4, #4
      BSTREAM_TO_BDA(pMsg->addr, p);
   12f52:	f100 0a0c 	add.w	sl, r0, #12
      pMsg->pData = (uint8_t *) (pMsg + 1);
   12f56:	f100 091c 	add.w	r9, r0, #28
      pMsg->directAddrType = 0;
   12f5a:	f04f 0800 	mov.w	r8, #0
   12f5e:	e01c      	b.n	12f9a <hciEvtProcessMsg+0x2ce>
      memcpy(pMsg->pData, p, pMsg->len);
   12f60:	4621      	mov	r1, r4
   12f62:	465a      	mov	r2, fp
      pMsg->pData = (uint8_t *) (pMsg + 1);
   12f64:	f8c5 9004 	str.w	r9, [r5, #4]
      memcpy(pMsg->pData, p, pMsg->len);
   12f68:	f7f9 f8ca 	bl	c100 <memcpy>
      BSTREAM_TO_UINT8(pMsg->rssi, p);
   12f6c:	f814 100b 	ldrb.w	r1, [r4, fp]
   12f70:	7269      	strb	r1, [r5, #9]
      pMsg->hdr.param = 0;
   12f72:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
   12f76:	602b      	str	r3, [r5, #0]
    while (i-- > 0)
   12f78:	3f01      	subs	r7, #1
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
   12f7a:	68b3      	ldr	r3, [r6, #8]
      pMsg->directAddrType = 0;
   12f7c:	f885 8012 	strb.w	r8, [r5, #18]
      memset(pMsg->directAddr, 0, BDA_ADDR_LEN);
   12f80:	f8c5 8013 	str.w	r8, [r5, #19]
   12f84:	f8a5 8017 	strh.w	r8, [r5, #23]
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
   12f88:	4628      	mov	r0, r5
    while (i-- > 0)
   12f8a:	b2ff      	uxtb	r7, r7
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
   12f8c:	4798      	blx	r3
      p += pMsg->len;
   12f8e:	445c      	add	r4, fp
    while (i-- > 0)
   12f90:	2fff      	cmp	r7, #255	; 0xff
      BSTREAM_TO_UINT8(pMsg->rssi, p);
   12f92:	f104 0401 	add.w	r4, r4, #1
    while (i-- > 0)
   12f96:	f000 8139 	beq.w	1320c <hciEvtProcessMsg+0x540>
      BSTREAM_TO_UINT8(pMsg->eventType, p);
   12f9a:	7823      	ldrb	r3, [r4, #0]
   12f9c:	72ab      	strb	r3, [r5, #10]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
   12f9e:	7863      	ldrb	r3, [r4, #1]
   12fa0:	72eb      	strb	r3, [r5, #11]
      BSTREAM_TO_BDA(pMsg->addr, p);
   12fa2:	1ca1      	adds	r1, r4, #2
   12fa4:	4650      	mov	r0, sl
   12fa6:	f009 f9d5 	bl	1c354 <BdaCpy>
      BSTREAM_TO_UINT8(pMsg->len, p);
   12faa:	f894 b008 	ldrb.w	fp, [r4, #8]
   12fae:	f885 b008 	strb.w	fp, [r5, #8]
      if (pMsg->len > HCI_ADV_DATA_LEN)
   12fb2:	f1bb 0f1f 	cmp.w	fp, #31
      memcpy(pMsg->pData, p, pMsg->len);
   12fb6:	4648      	mov	r0, r9
      BSTREAM_TO_UINT8(pMsg->len, p);
   12fb8:	f104 0409 	add.w	r4, r4, #9
      if (pMsg->len > HCI_ADV_DATA_LEN)
   12fbc:	d9d0      	bls.n	12f60 <hciEvtProcessMsg+0x294>
   12fbe:	e125      	b.n	1320c <hciEvtProcessMsg+0x540>
          if (*pEvt == HCI_SUCCESS)
   12fc0:	78e3      	ldrb	r3, [r4, #3]
   12fc2:	2b00      	cmp	r3, #0
   12fc4:	f000 8238 	beq.w	13438 <hciEvtProcessMsg+0x76c>
   12fc8:	4eb6      	ldr	r6, [pc, #728]	; (132a4 <hciEvtProcessMsg+0x5d8>)
   12fca:	2024      	movs	r0, #36	; 0x24
   12fcc:	e6c5      	b.n	12d5a <hciEvtProcessMsg+0x8e>
}
   12fce:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        APP_TRACE_INFO0("cte req failed....");
   12fd2:	48b5      	ldr	r0, [pc, #724]	; (132a8 <hciEvtProcessMsg+0x5dc>)
   12fd4:	f000 bf9e 	b.w	13f14 <WsfTrace>
  if (cbackEvt != 0)
   12fd8:	4eb4      	ldr	r6, [pc, #720]	; (132ac <hciEvtProcessMsg+0x5e0>)
   12fda:	2016      	movs	r0, #22
          cbackEvt = HCI_LE_PER_ADV_SYNC_EST_CBACK_EVT;
   12fdc:	f04f 0930 	mov.w	r9, #48	; 0x30
   12fe0:	e6bb      	b.n	12d5a <hciEvtProcessMsg+0x8e>
  i = *p;
   12fe2:	78e2      	ldrb	r2, [r4, #3]
  if (i > HCI_MAX_REPORTS)
   12fe4:	2a0f      	cmp	r2, #15
   12fe6:	f63f aecc 	bhi.w	12d82 <hciEvtProcessMsg+0xb6>
  ptr = p + 1;
   12fea:	1d25      	adds	r5, r4, #4
  while (i-- > 0)
   12fec:	2a00      	cmp	r2, #0
   12fee:	f000 822d 	beq.w	1344c <hciEvtProcessMsg+0x780>
    BSTREAM_TO_UINT8(dataLen, ptr);
   12ff2:	7ee0      	ldrb	r0, [r4, #27]
   12ff4:	f104 031c 	add.w	r3, r4, #28
  while (i-- > 0)
   12ff8:	2a01      	cmp	r2, #1
    ptr += dataLen;
   12ffa:	4403      	add	r3, r0
  while (i-- > 0)
   12ffc:	d078      	beq.n	130f0 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
   12ffe:	7dd9      	ldrb	r1, [r3, #23]
   13000:	4288      	cmp	r0, r1
   13002:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
   13006:	bf38      	it	cc
   13008:	4608      	movcc	r0, r1
  while (i-- > 0)
   1300a:	2a02      	cmp	r2, #2
    ptr += dataLen;
   1300c:	440b      	add	r3, r1
  while (i-- > 0)
   1300e:	d06f      	beq.n	130f0 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
   13010:	7dd9      	ldrb	r1, [r3, #23]
   13012:	4288      	cmp	r0, r1
   13014:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
   13018:	bf38      	it	cc
   1301a:	4608      	movcc	r0, r1
  while (i-- > 0)
   1301c:	2a03      	cmp	r2, #3
    ptr += dataLen;
   1301e:	440b      	add	r3, r1
  while (i-- > 0)
   13020:	d066      	beq.n	130f0 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
   13022:	7dd9      	ldrb	r1, [r3, #23]
   13024:	4288      	cmp	r0, r1
   13026:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
   1302a:	bf38      	it	cc
   1302c:	4608      	movcc	r0, r1
  while (i-- > 0)
   1302e:	2a04      	cmp	r2, #4
    ptr += dataLen;
   13030:	440b      	add	r3, r1
  while (i-- > 0)
   13032:	d05d      	beq.n	130f0 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
   13034:	7dd9      	ldrb	r1, [r3, #23]
   13036:	4288      	cmp	r0, r1
   13038:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
   1303c:	bf38      	it	cc
   1303e:	4608      	movcc	r0, r1
  while (i-- > 0)
   13040:	2a05      	cmp	r2, #5
    ptr += dataLen;
   13042:	440b      	add	r3, r1
  while (i-- > 0)
   13044:	d054      	beq.n	130f0 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
   13046:	7dd9      	ldrb	r1, [r3, #23]
   13048:	4288      	cmp	r0, r1
   1304a:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
   1304e:	bf38      	it	cc
   13050:	4608      	movcc	r0, r1
  while (i-- > 0)
   13052:	2a06      	cmp	r2, #6
    ptr += dataLen;
   13054:	440b      	add	r3, r1
  while (i-- > 0)
   13056:	d04b      	beq.n	130f0 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
   13058:	7dd9      	ldrb	r1, [r3, #23]
   1305a:	4288      	cmp	r0, r1
   1305c:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
   13060:	bf38      	it	cc
   13062:	4608      	movcc	r0, r1
  while (i-- > 0)
   13064:	2a07      	cmp	r2, #7
    ptr += dataLen;
   13066:	440b      	add	r3, r1
  while (i-- > 0)
   13068:	d042      	beq.n	130f0 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
   1306a:	7dd9      	ldrb	r1, [r3, #23]
   1306c:	4288      	cmp	r0, r1
   1306e:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
   13072:	bf38      	it	cc
   13074:	4608      	movcc	r0, r1
  while (i-- > 0)
   13076:	2a08      	cmp	r2, #8
    ptr += dataLen;
   13078:	440b      	add	r3, r1
  while (i-- > 0)
   1307a:	d039      	beq.n	130f0 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
   1307c:	7dd9      	ldrb	r1, [r3, #23]
   1307e:	4288      	cmp	r0, r1
   13080:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
   13084:	bf38      	it	cc
   13086:	4608      	movcc	r0, r1
  while (i-- > 0)
   13088:	2a09      	cmp	r2, #9
    ptr += dataLen;
   1308a:	440b      	add	r3, r1
  while (i-- > 0)
   1308c:	d030      	beq.n	130f0 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
   1308e:	7dd9      	ldrb	r1, [r3, #23]
   13090:	4288      	cmp	r0, r1
   13092:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
   13096:	bf38      	it	cc
   13098:	4608      	movcc	r0, r1
  while (i-- > 0)
   1309a:	2a0a      	cmp	r2, #10
    ptr += dataLen;
   1309c:	440b      	add	r3, r1
  while (i-- > 0)
   1309e:	d027      	beq.n	130f0 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
   130a0:	7dd9      	ldrb	r1, [r3, #23]
   130a2:	4288      	cmp	r0, r1
   130a4:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
   130a8:	bf38      	it	cc
   130aa:	4608      	movcc	r0, r1
  while (i-- > 0)
   130ac:	2a0b      	cmp	r2, #11
    ptr += dataLen;
   130ae:	440b      	add	r3, r1
  while (i-- > 0)
   130b0:	d01e      	beq.n	130f0 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
   130b2:	7dd9      	ldrb	r1, [r3, #23]
   130b4:	4288      	cmp	r0, r1
   130b6:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
   130ba:	bf38      	it	cc
   130bc:	4608      	movcc	r0, r1
  while (i-- > 0)
   130be:	2a0c      	cmp	r2, #12
    ptr += dataLen;
   130c0:	440b      	add	r3, r1
  while (i-- > 0)
   130c2:	d015      	beq.n	130f0 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
   130c4:	7dd9      	ldrb	r1, [r3, #23]
   130c6:	4288      	cmp	r0, r1
   130c8:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
   130cc:	bf38      	it	cc
   130ce:	4608      	movcc	r0, r1
  while (i-- > 0)
   130d0:	2a0d      	cmp	r2, #13
    ptr += dataLen;
   130d2:	440b      	add	r3, r1
  while (i-- > 0)
   130d4:	d00c      	beq.n	130f0 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
   130d6:	7dd9      	ldrb	r1, [r3, #23]
   130d8:	4288      	cmp	r0, r1
   130da:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
   130de:	bf38      	it	cc
   130e0:	4608      	movcc	r0, r1
  while (i-- > 0)
   130e2:	2a0e      	cmp	r2, #14
    ptr += dataLen;
   130e4:	440b      	add	r3, r1
  while (i-- > 0)
   130e6:	d003      	beq.n	130f0 <hciEvtProcessMsg+0x424>
    if (dataLen > maxLen)
   130e8:	7ddb      	ldrb	r3, [r3, #23]
   130ea:	4298      	cmp	r0, r3
   130ec:	bf38      	it	cc
   130ee:	4618      	movcc	r0, r3
  if ((pMsg = WsfBufAlloc(sizeof(hciLeExtAdvReportEvt_t) + maxLen)) != NULL)
   130f0:	3024      	adds	r0, #36	; 0x24
   130f2:	f000 fb2f 	bl	13754 <WsfBufAlloc>
   130f6:	4607      	mov	r7, r0
   130f8:	2800      	cmp	r0, #0
   130fa:	f43f ae42 	beq.w	12d82 <hciEvtProcessMsg+0xb6>
    BSTREAM_TO_UINT8(i, p);
   130fe:	78e3      	ldrb	r3, [r4, #3]
    while (i-- > 0)
   13100:	1e5c      	subs	r4, r3, #1
   13102:	b2e4      	uxtb	r4, r4
   13104:	2b00      	cmp	r3, #0
   13106:	d040      	beq.n	1318a <hciEvtProcessMsg+0x4be>
      BSTREAM_TO_BDA(pMsg->addr, p);
   13108:	f100 0a07 	add.w	sl, r0, #7
      BSTREAM_TO_BDA(pMsg->directAddr, p);
   1310c:	f100 0915 	add.w	r9, r0, #21
      pMsg->pData = (uint8_t *)(pMsg + 1);
   13110:	f100 0824 	add.w	r8, r0, #36	; 0x24
      pMsg->hdr.param = 0;
   13114:	f44f 1b30 	mov.w	fp, #2883584	; 0x2c0000
   13118:	e00c      	b.n	13134 <hciEvtProcessMsg+0x468>
      pMsg->pData = (uint8_t *)(pMsg + 1);
   1311a:	f8c7 8020 	str.w	r8, [r7, #32]
      memcpy(pMsg->pData, p, pMsg->len);
   1311e:	f7f8 ffef 	bl	c100 <memcpy>
    while (i-- > 0)
   13122:	3c01      	subs	r4, #1
      pMsg->hdr.param = 0;
   13124:	f8c7 b000 	str.w	fp, [r7]
      (*hciCb.evtCback)((hciEvt_t *)pMsg);
   13128:	68b3      	ldr	r3, [r6, #8]
   1312a:	4638      	mov	r0, r7
    while (i-- > 0)
   1312c:	b2e4      	uxtb	r4, r4
      (*hciCb.evtCback)((hciEvt_t *)pMsg);
   1312e:	4798      	blx	r3
    while (i-- > 0)
   13130:	2cff      	cmp	r4, #255	; 0xff
   13132:	d02a      	beq.n	1318a <hciEvtProcessMsg+0x4be>
      BSTREAM_TO_UINT16(pMsg->eventType, p);
   13134:	786a      	ldrb	r2, [r5, #1]
   13136:	782b      	ldrb	r3, [r5, #0]
   13138:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   1313c:	80bb      	strh	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
   1313e:	78ab      	ldrb	r3, [r5, #2]
   13140:	71bb      	strb	r3, [r7, #6]
      BSTREAM_TO_BDA(pMsg->addr, p);
   13142:	1ce9      	adds	r1, r5, #3
   13144:	4650      	mov	r0, sl
   13146:	f009 f905 	bl	1c354 <BdaCpy>
      BSTREAM_TO_UINT8(pMsg->priPhy, p);
   1314a:	7a6b      	ldrb	r3, [r5, #9]
   1314c:	737b      	strb	r3, [r7, #13]
      BSTREAM_TO_UINT8(pMsg->secPhy, p);
   1314e:	7aab      	ldrb	r3, [r5, #10]
   13150:	73bb      	strb	r3, [r7, #14]
      BSTREAM_TO_UINT8(pMsg->advSid, p);
   13152:	7aeb      	ldrb	r3, [r5, #11]
   13154:	73fb      	strb	r3, [r7, #15]
      BSTREAM_TO_INT8(pMsg->txPower, p);
   13156:	7b2b      	ldrb	r3, [r5, #12]
   13158:	743b      	strb	r3, [r7, #16]
      BSTREAM_TO_INT8(pMsg->rssi, p);
   1315a:	7b6b      	ldrb	r3, [r5, #13]
   1315c:	747b      	strb	r3, [r7, #17]
      BSTREAM_TO_UINT16(pMsg->perAdvInter, p);
   1315e:	7bea      	ldrb	r2, [r5, #15]
   13160:	7bab      	ldrb	r3, [r5, #14]
   13162:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   13166:	827b      	strh	r3, [r7, #18]
      BSTREAM_TO_UINT8(pMsg->directAddrType, p);
   13168:	7c2b      	ldrb	r3, [r5, #16]
   1316a:	753b      	strb	r3, [r7, #20]
      BSTREAM_TO_BDA(pMsg->directAddr, p);
   1316c:	f105 0111 	add.w	r1, r5, #17
   13170:	4648      	mov	r0, r9
   13172:	f009 f8ef 	bl	1c354 <BdaCpy>
      BSTREAM_TO_UINT8(pMsg->len, p);
   13176:	7dea      	ldrb	r2, [r5, #23]
   13178:	b293      	uxth	r3, r2
   1317a:	f105 0118 	add.w	r1, r5, #24
      if (pMsg->len > HCI_EXT_ADV_RPT_DATA_LEN)
   1317e:	2be5      	cmp	r3, #229	; 0xe5
      memcpy(pMsg->pData, p, pMsg->len);
   13180:	4640      	mov	r0, r8
      p += pMsg->len;
   13182:	eb01 0502 	add.w	r5, r1, r2
      BSTREAM_TO_UINT8(pMsg->len, p);
   13186:	83bb      	strh	r3, [r7, #28]
      if (pMsg->len > HCI_EXT_ADV_RPT_DATA_LEN)
   13188:	d9c7      	bls.n	1311a <hciEvtProcessMsg+0x44e>
    WsfBufFree(pMsg);
   1318a:	4638      	mov	r0, r7
}
   1318c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    WsfBufFree(pMsg);
   13190:	f000 bb10 	b.w	137b4 <WsfBufFree>
  if (cbackEvt != 0)
   13194:	4e46      	ldr	r6, [pc, #280]	; (132b0 <hciEvtProcessMsg+0x5e4>)
   13196:	200a      	movs	r0, #10
          cbackEvt = HCI_LE_PHY_UPDATE_CMPL_CBACK_EVT;
   13198:	f04f 092b 	mov.w	r9, #43	; 0x2b
   1319c:	e5dd      	b.n	12d5a <hciEvtProcessMsg+0x8e>
  if (cbackEvt != 0)
   1319e:	4e45      	ldr	r6, [pc, #276]	; (132b4 <hciEvtProcessMsg+0x5e8>)
   131a0:	200a      	movs	r0, #10
          cbackEvt = HCI_LE_ADV_SET_TERM_CBACK_EVT;
   131a2:	f04f 092e 	mov.w	r9, #46	; 0x2e
   131a6:	e5d8      	b.n	12d5a <hciEvtProcessMsg+0x8e>
  if (cbackEvt != 0)
   131a8:	4e43      	ldr	r6, [pc, #268]	; (132b8 <hciEvtProcessMsg+0x5ec>)
   131aa:	2004      	movs	r0, #4
          cbackEvt = HCI_LE_SCAN_TIMEOUT_CBACK_EVT;
   131ac:	f04f 092d 	mov.w	r9, #45	; 0x2d
   131b0:	e5d3      	b.n	12d5a <hciEvtProcessMsg+0x8e>
  if (cbackEvt != 0)
   131b2:	4e42      	ldr	r6, [pc, #264]	; (132bc <hciEvtProcessMsg+0x5f0>)
   131b4:	2006      	movs	r0, #6
          cbackEvt = HCI_LE_PER_ADV_SYNC_LOST_CBACK_EVT;
   131b6:	f04f 0932 	mov.w	r9, #50	; 0x32
   131ba:	e5ce      	b.n	12d5a <hciEvtProcessMsg+0x8e>
  dataLen = p[HCI_PER_ADV_RPT_DATA_LEN_OFFSET];
   131bc:	7a60      	ldrb	r0, [r4, #9]
  if (dataLen > HCI_PER_ADV_RPT_DATA_LEN)
   131be:	28f7      	cmp	r0, #247	; 0xf7
   131c0:	f63f addf 	bhi.w	12d82 <hciEvtProcessMsg+0xb6>
  if ((pMsg = WsfBufAlloc(sizeof(hciLePerAdvReportEvt_t) + dataLen)) != NULL)
   131c4:	3010      	adds	r0, #16
   131c6:	f000 fac5 	bl	13754 <WsfBufAlloc>
   131ca:	4605      	mov	r5, r0
   131cc:	2800      	cmp	r0, #0
   131ce:	f43f add8 	beq.w	12d82 <hciEvtProcessMsg+0xb6>
    BSTREAM_TO_UINT16(pMsg->syncHandle, p);
   131d2:	7922      	ldrb	r2, [r4, #4]
   131d4:	78e3      	ldrb	r3, [r4, #3]
   131d6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   131da:	8083      	strh	r3, [r0, #4]
    BSTREAM_TO_UINT8(pMsg->txPower, p);
   131dc:	7963      	ldrb	r3, [r4, #5]
   131de:	7183      	strb	r3, [r0, #6]
    BSTREAM_TO_UINT8(pMsg->rssi, p);
   131e0:	79a3      	ldrb	r3, [r4, #6]
   131e2:	71c3      	strb	r3, [r0, #7]
    BSTREAM_TO_UINT8(pMsg->unused, p);
   131e4:	79e3      	ldrb	r3, [r4, #7]
   131e6:	7203      	strb	r3, [r0, #8]
    BSTREAM_TO_UINT8(pMsg->status, p);
   131e8:	7a27      	ldrb	r7, [r4, #8]
   131ea:	7247      	strb	r7, [r0, #9]
    BSTREAM_TO_UINT8(pMsg->len, p);
   131ec:	7a62      	ldrb	r2, [r4, #9]
   131ee:	8142      	strh	r2, [r0, #10]
    pMsg->pData = (uint8_t *)(pMsg + 1);
   131f0:	3010      	adds	r0, #16
    memcpy(pMsg->pData, p, pMsg->len);
   131f2:	f104 010a 	add.w	r1, r4, #10
    pMsg->pData = (uint8_t *)(pMsg + 1);
   131f6:	60e8      	str	r0, [r5, #12]
    memcpy(pMsg->pData, p, pMsg->len);
   131f8:	f7f8 ff82 	bl	c100 <memcpy>
    pMsg->hdr.event = HCI_LE_PER_ADV_REPORT_CBACK_EVT;
   131fc:	2331      	movs	r3, #49	; 0x31
   131fe:	70ab      	strb	r3, [r5, #2]
    pMsg->hdr.status = pMsg->status;
   13200:	70ef      	strb	r7, [r5, #3]
    pMsg->hdr.param = 0;
   13202:	2200      	movs	r2, #0
    (*hciCb.evtCback)((hciEvt_t *)pMsg);
   13204:	68b3      	ldr	r3, [r6, #8]
    pMsg->hdr.param = 0;
   13206:	802a      	strh	r2, [r5, #0]
    (*hciCb.evtCback)((hciEvt_t *)pMsg);
   13208:	4628      	mov	r0, r5
   1320a:	4798      	blx	r3
    WsfBufFree(pMsg);
   1320c:	4628      	mov	r0, r5
}
   1320e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    WsfBufFree(pMsg);
   13212:	f000 bacf 	b.w	137b4 <WsfBufFree>
    if ((pMsg = WsfBufAlloc(sizeof(hciLeConlessIQReportEvt_t) + HCI_IQ_RPT_SAMPLE_CNT_MAX*2)) != NULL)
   13216:	20c0      	movs	r0, #192	; 0xc0
   13218:	f000 fa9c 	bl	13754 <WsfBufAlloc>
   1321c:	4605      	mov	r5, r0
   1321e:	2800      	cmp	r0, #0
   13220:	f43f adaf 	beq.w	12d82 <hciEvtProcessMsg+0xb6>
        APP_TRACE_INFO0("rcv Le Conntless IQ Report...");
   13224:	4826      	ldr	r0, [pc, #152]	; (132c0 <hciEvtProcessMsg+0x5f4>)
   13226:	f000 fe75 	bl	13f14 <WsfTrace>
        BSTREAM_TO_UINT16(pMsg->synHdl, p);
   1322a:	7923      	ldrb	r3, [r4, #4]
   1322c:	78e7      	ldrb	r7, [r4, #3]
   1322e:	eb07 2703 	add.w	r7, r7, r3, lsl #8
   13232:	b2bf      	uxth	r7, r7
   13234:	80af      	strh	r7, [r5, #4]
        BSTREAM_TO_UINT8(pMsg->chIdx, p);
   13236:	7963      	ldrb	r3, [r4, #5]
   13238:	71ab      	strb	r3, [r5, #6]
        BSTREAM_TO_UINT16(pMsg->rssi, p); 
   1323a:	79e2      	ldrb	r2, [r4, #7]
   1323c:	79a3      	ldrb	r3, [r4, #6]
   1323e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   13242:	812b      	strh	r3, [r5, #8]
        BSTREAM_TO_UINT8(pMsg->rssiAntennaId, p);
   13244:	7a23      	ldrb	r3, [r4, #8]
   13246:	72ab      	strb	r3, [r5, #10]
        BSTREAM_TO_UINT8(pMsg->cteType, p);
   13248:	7a63      	ldrb	r3, [r4, #9]
   1324a:	72eb      	strb	r3, [r5, #11]
        BSTREAM_TO_UINT8(pMsg->slotDurations, p);
   1324c:	7aa3      	ldrb	r3, [r4, #10]
   1324e:	732b      	strb	r3, [r5, #12]
        BSTREAM_TO_UINT8(pMsg->pktStatus, p);
   13250:	f894 900b 	ldrb.w	r9, [r4, #11]
   13254:	f885 900d 	strb.w	r9, [r5, #13]
        BSTREAM_TO_UINT16(pMsg->paEvtCnt, p);
   13258:	7b62      	ldrb	r2, [r4, #13]
   1325a:	7b23      	ldrb	r3, [r4, #12]
   1325c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   13260:	81eb      	strh	r3, [r5, #14]
        BSTREAM_TO_UINT8(pMsg->sampleCnt, p);
   13262:	f894 800e 	ldrb.w	r8, [r4, #14]
   13266:	f885 8010 	strb.w	r8, [r5, #16]
        pMsg->pISample = (int8_t *) (pMsg + 1);
   1326a:	f105 031c 	add.w	r3, r5, #28
        BSTREAM_TO_UINT8(pMsg->sampleCnt, p);
   1326e:	340f      	adds	r4, #15
        pMsg->pISample = (int8_t *) (pMsg + 1);
   13270:	616b      	str	r3, [r5, #20]
        memcpy(pMsg->pISample, p, pMsg->sampleCnt);
   13272:	4642      	mov	r2, r8
   13274:	4621      	mov	r1, r4
   13276:	4618      	mov	r0, r3
   13278:	f7f8 ff42 	bl	c100 <memcpy>
        pMsg->pQSample = (int8_t *) (pMsg + 1)+HCI_IQ_RPT_SAMPLE_CNT_MAX;
   1327c:	f105 036e 	add.w	r3, r5, #110	; 0x6e
   13280:	61ab      	str	r3, [r5, #24]
        memcpy(pMsg->pISample, p, pMsg->sampleCnt);
   13282:	eb04 0108 	add.w	r1, r4, r8
   13286:	4642      	mov	r2, r8
   13288:	f7f8 ff3a 	bl	c100 <memcpy>
        pMsg->hdr.event = HCI_LE_CONNLESS_IQ_REPORT_CBACK_EVT;
   1328c:	2347      	movs	r3, #71	; 0x47
        pMsg->hdr.status = pMsg->pktStatus;
   1328e:	f885 9003 	strb.w	r9, [r5, #3]
        pMsg->hdr.event = HCI_LE_CONNLESS_IQ_REPORT_CBACK_EVT;
   13292:	70ab      	strb	r3, [r5, #2]
        (*hciCb.evtCback)((hciEvt_t *) pMsg);
   13294:	68b3      	ldr	r3, [r6, #8]
        pMsg->hdr.param = pMsg->synHdl;
   13296:	802f      	strh	r7, [r5, #0]
        (*hciCb.evtCback)((hciEvt_t *) pMsg);
   13298:	e7b6      	b.n	13208 <hciEvtProcessMsg+0x53c>
  if (cbackEvt != 0)
   1329a:	4e0a      	ldr	r6, [pc, #40]	; (132c4 <hciEvtProcessMsg+0x5f8>)
   1329c:	200c      	movs	r0, #12
          cbackEvt = HCI_LE_SCAN_REQ_RCVD_CBACK_EVT;
   1329e:	f04f 092f 	mov.w	r9, #47	; 0x2f
   132a2:	e55a      	b.n	12d5a <hciEvtProcessMsg+0x8e>
   132a4:	000129d9 	.word	0x000129d9
   132a8:	00024178 	.word	0x00024178
   132ac:	00012791 	.word	0x00012791
   132b0:	000126d5 	.word	0x000126d5
   132b4:	000126fd 	.word	0x000126fd
   132b8:	000126f9 	.word	0x000126f9
   132bc:	00012785 	.word	0x00012785
   132c0:	0002418c 	.word	0x0002418c
   132c4:	000127cd 	.word	0x000127cd
    APP_TRACE_INFO0("hciEvtProcessLeConnIQReport");
   132c8:	4861      	ldr	r0, [pc, #388]	; (13450 <hciEvtProcessMsg+0x784>)
   132ca:	f000 fe23 	bl	13f14 <WsfTrace>
    if ((pMsg = WsfBufAlloc(sizeof(hciLeConnIQReportEvt_t) + HCI_IQ_RPT_SAMPLE_CNT_MAX*2)) != NULL)
   132ce:	20c0      	movs	r0, #192	; 0xc0
   132d0:	f000 fa40 	bl	13754 <WsfBufAlloc>
   132d4:	4605      	mov	r5, r0
   132d6:	2800      	cmp	r0, #0
   132d8:	f43f ad53 	beq.w	12d82 <hciEvtProcessMsg+0xb6>
        APP_TRACE_INFO0("rcv Le ConnIQ Report...");
   132dc:	485d      	ldr	r0, [pc, #372]	; (13454 <hciEvtProcessMsg+0x788>)
   132de:	f000 fe19 	bl	13f14 <WsfTrace>
        BSTREAM_TO_UINT16(pMsg->handle, p);
   132e2:	7923      	ldrb	r3, [r4, #4]
   132e4:	78e7      	ldrb	r7, [r4, #3]
   132e6:	eb07 2703 	add.w	r7, r7, r3, lsl #8
   132ea:	b2bf      	uxth	r7, r7
   132ec:	80af      	strh	r7, [r5, #4]
        BSTREAM_TO_UINT8(pMsg->rxPhy, p);
   132ee:	7963      	ldrb	r3, [r4, #5]
   132f0:	71ab      	strb	r3, [r5, #6]
        BSTREAM_TO_UINT8(pMsg->dataChIdx, p);
   132f2:	79a3      	ldrb	r3, [r4, #6]
   132f4:	71eb      	strb	r3, [r5, #7]
        BSTREAM_TO_UINT16(pMsg->rssi, p); 
   132f6:	7a22      	ldrb	r2, [r4, #8]
   132f8:	79e3      	ldrb	r3, [r4, #7]
   132fa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   132fe:	812b      	strh	r3, [r5, #8]
        BSTREAM_TO_UINT8(pMsg->rssiAntennaId, p);
   13300:	7a63      	ldrb	r3, [r4, #9]
   13302:	72ab      	strb	r3, [r5, #10]
        BSTREAM_TO_UINT8(pMsg->cteType, p);
   13304:	7aa3      	ldrb	r3, [r4, #10]
   13306:	72eb      	strb	r3, [r5, #11]
        BSTREAM_TO_UINT8(pMsg->slotDurations, p);
   13308:	7ae3      	ldrb	r3, [r4, #11]
   1330a:	732b      	strb	r3, [r5, #12]
        BSTREAM_TO_UINT8(pMsg->pktStatus, p);
   1330c:	f894 900c 	ldrb.w	r9, [r4, #12]
   13310:	f885 900d 	strb.w	r9, [r5, #13]
        BSTREAM_TO_UINT16(pMsg->connEvtCnt, p);
   13314:	7ba2      	ldrb	r2, [r4, #14]
   13316:	7b63      	ldrb	r3, [r4, #13]
   13318:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   1331c:	81eb      	strh	r3, [r5, #14]
        BSTREAM_TO_UINT8(pMsg->sampleCnt, p);
   1331e:	f894 800f 	ldrb.w	r8, [r4, #15]
   13322:	f885 8010 	strb.w	r8, [r5, #16]
        pMsg->pISample = (int8_t *) (pMsg + 1);
   13326:	f105 031c 	add.w	r3, r5, #28
        BSTREAM_TO_UINT8(pMsg->sampleCnt, p);
   1332a:	3410      	adds	r4, #16
        pMsg->pISample = (int8_t *) (pMsg + 1);
   1332c:	616b      	str	r3, [r5, #20]
        memcpy(pMsg->pISample, p, pMsg->sampleCnt);
   1332e:	4642      	mov	r2, r8
   13330:	4621      	mov	r1, r4
   13332:	4618      	mov	r0, r3
   13334:	f7f8 fee4 	bl	c100 <memcpy>
        pMsg->pQSample = (int8_t *) (pMsg + 1)+HCI_IQ_RPT_SAMPLE_CNT_MAX;
   13338:	f105 036e 	add.w	r3, r5, #110	; 0x6e
   1333c:	61ab      	str	r3, [r5, #24]
        memcpy(pMsg->pISample, p, pMsg->sampleCnt);
   1333e:	eb04 0108 	add.w	r1, r4, r8
   13342:	4642      	mov	r2, r8
   13344:	f7f8 fedc 	bl	c100 <memcpy>
        pMsg->hdr.event = HCI_LE_CONN_IQ_REPORT_CBACK_EVT;
   13348:	233d      	movs	r3, #61	; 0x3d
        pMsg->hdr.status = pMsg->pktStatus;
   1334a:	f885 9003 	strb.w	r9, [r5, #3]
        pMsg->hdr.event = HCI_LE_CONN_IQ_REPORT_CBACK_EVT;
   1334e:	70ab      	strb	r3, [r5, #2]
        (*hciCb.evtCback)((hciEvt_t *) pMsg);
   13350:	68b3      	ldr	r3, [r6, #8]
        pMsg->hdr.param = pMsg->handle;
   13352:	802f      	strh	r7, [r5, #0]
        (*hciCb.evtCback)((hciEvt_t *) pMsg);
   13354:	e758      	b.n	13208 <hciEvtProcessMsg+0x53c>
          if (*pEvt == HCI_SUCCESS)
   13356:	78e3      	ldrb	r3, [r4, #3]
   13358:	2b00      	cmp	r3, #0
   1335a:	d061      	beq.n	13420 <hciEvtProcessMsg+0x754>
   1335c:	4e3e      	ldr	r6, [pc, #248]	; (13458 <hciEvtProcessMsg+0x78c>)
   1335e:	2024      	movs	r0, #36	; 0x24
          cbackEvt = HCI_LE_ENHANCED_CONN_CMPL_CBACK_EVT;
   13360:	f04f 0902 	mov.w	r9, #2
   13364:	e4f9      	b.n	12d5a <hciEvtProcessMsg+0x8e>
          cback = hciCb.secCback;
   13366:	2026      	movs	r0, #38	; 0x26
   13368:	68f7      	ldr	r7, [r6, #12]
   1336a:	4e3c      	ldr	r6, [pc, #240]	; (1345c <hciEvtProcessMsg+0x790>)
          cbackEvt = HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT;
   1336c:	4681      	mov	r9, r0
   1336e:	e4f4      	b.n	12d5a <hciEvtProcessMsg+0x8e>
          cback = hciCb.secCback;
   13370:	68f7      	ldr	r7, [r6, #12]
   13372:	4e3b      	ldr	r6, [pc, #236]	; (13460 <hciEvtProcessMsg+0x794>)
   13374:	2046      	movs	r0, #70	; 0x46
          cbackEvt = HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT;
   13376:	f04f 0925 	mov.w	r9, #37	; 0x25
   1337a:	e4ee      	b.n	12d5a <hciEvtProcessMsg+0x8e>
  if (cbackEvt != 0)
   1337c:	4e39      	ldr	r6, [pc, #228]	; (13464 <hciEvtProcessMsg+0x798>)
   1337e:	200e      	movs	r0, #14
          cbackEvt = HCI_LE_DATA_LEN_CHANGE_CBACK_EVT;
   13380:	f04f 0924 	mov.w	r9, #36	; 0x24
   13384:	e4e9      	b.n	12d5a <hciEvtProcessMsg+0x8e>
  BSTREAM_TO_UINT8(i, p);
   13386:	78e7      	ldrb	r7, [r4, #3]
  if (i > HCI_MAX_REPORTS)
   13388:	2f0f      	cmp	r7, #15
   1338a:	f63f acfa 	bhi.w	12d82 <hciEvtProcessMsg+0xb6>
  if ((pMsg = WsfBufAlloc(sizeof(hciLeAdvReportEvt_t))) != NULL)
   1338e:	201c      	movs	r0, #28
   13390:	f000 f9e0 	bl	13754 <WsfBufAlloc>
   13394:	4605      	mov	r5, r0
   13396:	2800      	cmp	r0, #0
   13398:	f43f acf3 	beq.w	12d82 <hciEvtProcessMsg+0xb6>
    while (i-- > 0)
   1339c:	1e7b      	subs	r3, r7, #1
   1339e:	b2db      	uxtb	r3, r3
   133a0:	2f00      	cmp	r7, #0
   133a2:	f43f af33 	beq.w	1320c <hciEvtProcessMsg+0x540>
   133a6:	f104 0816 	add.w	r8, r4, #22
      BSTREAM_TO_BDA(pMsg->addr, p);
   133aa:	f100 0a0c 	add.w	sl, r0, #12
   133ae:	eb08 1803 	add.w	r8, r8, r3, lsl #4
   133b2:	3406      	adds	r4, #6
      BSTREAM_TO_BDA(pMsg->directAddr, p);
   133b4:	f100 0b13 	add.w	fp, r0, #19
      pMsg->hdr.param = 0;
   133b8:	f44f 29c0 	mov.w	r9, #393216	; 0x60000
      pMsg->pData = NULL;
   133bc:	2700      	movs	r7, #0
      BSTREAM_TO_UINT8(pMsg->eventType, p);
   133be:	f814 3c02 	ldrb.w	r3, [r4, #-2]
   133c2:	72ab      	strb	r3, [r5, #10]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
   133c4:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   133c8:	72eb      	strb	r3, [r5, #11]
      BSTREAM_TO_BDA(pMsg->addr, p);
   133ca:	4621      	mov	r1, r4
   133cc:	4650      	mov	r0, sl
   133ce:	f008 ffc1 	bl	1c354 <BdaCpy>
      BSTREAM_TO_UINT8(pMsg->directAddrType, p);
   133d2:	79a3      	ldrb	r3, [r4, #6]
   133d4:	74ab      	strb	r3, [r5, #18]
      BSTREAM_TO_BDA(pMsg->directAddr, p);
   133d6:	1de1      	adds	r1, r4, #7
   133d8:	4658      	mov	r0, fp
   133da:	f008 ffbb 	bl	1c354 <BdaCpy>
      BSTREAM_TO_UINT8(pMsg->rssi, p);
   133de:	7b63      	ldrb	r3, [r4, #13]
   133e0:	726b      	strb	r3, [r5, #9]
      pMsg->hdr.param = 0;
   133e2:	f8c5 9000 	str.w	r9, [r5]
      pMsg->len = 0;
   133e6:	722f      	strb	r7, [r5, #8]
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
   133e8:	68b3      	ldr	r3, [r6, #8]
      pMsg->pData = NULL;
   133ea:	606f      	str	r7, [r5, #4]
    while (i-- > 0)
   133ec:	3410      	adds	r4, #16
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
   133ee:	4628      	mov	r0, r5
   133f0:	4798      	blx	r3
    while (i-- > 0)
   133f2:	4544      	cmp	r4, r8
   133f4:	d1e3      	bne.n	133be <hciEvtProcessMsg+0x6f2>
   133f6:	e709      	b.n	1320c <hciEvtProcessMsg+0x540>
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
   133f8:	200e      	movs	r0, #14
   133fa:	f000 f9ab 	bl	13754 <WsfBufAlloc>
   133fe:	4604      	mov	r4, r0
   13400:	2800      	cmp	r0, #0
   13402:	f43f acbe 	beq.w	12d82 <hciEvtProcessMsg+0xb6>
      pMsg->hdr.param = 0;
   13406:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1340a:	6003      	str	r3, [r0, #0]
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, pEvt, len);
   1340c:	4642      	mov	r2, r8
   1340e:	4629      	mov	r1, r5
   13410:	f7fe ffd0 	bl	123b4 <hciEvtParseLeConnUpdateCmpl>
      (*cback)(pMsg);
   13414:	47b8      	blx	r7
      WsfBufFree(pMsg);
   13416:	4620      	mov	r0, r4
}
   13418:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      WsfBufFree(pMsg);
   1341c:	f000 b9ca 	b.w	137b4 <WsfBufFree>
            BYTES_TO_UINT16(handle, (pEvt + 1));
   13420:	7963      	ldrb	r3, [r4, #5]
   13422:	7920      	ldrb	r0, [r4, #4]
            hciCoreConnOpen(handle);
   13424:	4e0c      	ldr	r6, [pc, #48]	; (13458 <hciEvtProcessMsg+0x78c>)
            BYTES_TO_UINT16(handle, (pEvt + 1));
   13426:	eb00 2003 	add.w	r0, r0, r3, lsl #8
            hciCoreConnOpen(handle);
   1342a:	b280      	uxth	r0, r0
   1342c:	f7fe fc28 	bl	11c80 <hciCoreConnOpen>
          cbackEvt = HCI_LE_ENHANCED_CONN_CMPL_CBACK_EVT;
   13430:	f04f 0902 	mov.w	r9, #2
            hciCoreConnOpen(handle);
   13434:	2024      	movs	r0, #36	; 0x24
   13436:	e490      	b.n	12d5a <hciEvtProcessMsg+0x8e>
            BYTES_TO_UINT16(handle, (pEvt + 1));
   13438:	7963      	ldrb	r3, [r4, #5]
   1343a:	7920      	ldrb	r0, [r4, #4]
            hciCoreConnOpen(handle);
   1343c:	4e0a      	ldr	r6, [pc, #40]	; (13468 <hciEvtProcessMsg+0x79c>)
            BYTES_TO_UINT16(handle, (pEvt + 1));
   1343e:	eb00 2003 	add.w	r0, r0, r3, lsl #8
            hciCoreConnOpen(handle);
   13442:	b280      	uxth	r0, r0
   13444:	f7fe fc1c 	bl	11c80 <hciCoreConnOpen>
   13448:	2024      	movs	r0, #36	; 0x24
   1344a:	e486      	b.n	12d5a <hciEvtProcessMsg+0x8e>
  maxLen = 0;
   1344c:	4610      	mov	r0, r2
   1344e:	e64f      	b.n	130f0 <hciEvtProcessMsg+0x424>
   13450:	00024144 	.word	0x00024144
   13454:	00024160 	.word	0x00024160
   13458:	0001280d 	.word	0x0001280d
   1345c:	00012875 	.word	0x00012875
   13460:	000128bd 	.word	0x000128bd
   13464:	00012635 	.word	0x00012635
   13468:	000129d9 	.word	0x000129d9

0001346c <hciTrSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciTrSendAclData(void *pContext, uint8_t *pData)
{
   1346c:	b570      	push	{r4, r5, r6, lr}
  uint16_t   len;

  /* get 16-bit length */
  BYTES_TO_UINT16(len, &pData[2]);
   1346e:	788c      	ldrb	r4, [r1, #2]
{
   13470:	460d      	mov	r5, r1
  BYTES_TO_UINT16(len, &pData[2]);
   13472:	78c9      	ldrb	r1, [r1, #3]
  len += HCI_ACL_HDR_LEN;
   13474:	3404      	adds	r4, #4
   13476:	eb04 2401 	add.w	r4, r4, r1, lsl #8
   1347a:	b2a4      	uxth	r4, r4

  /* dump event for protocol analysis */
  HCI_PDUMP_TX_ACL(len, pData);

  /* transmit ACL header and data */
  if (hciDrvWrite(HCI_ACL_TYPE, len, pData) == len)
   1347c:	462a      	mov	r2, r5
   1347e:	4621      	mov	r1, r4
{
   13480:	4606      	mov	r6, r0
  if (hciDrvWrite(HCI_ACL_TYPE, len, pData) == len)
   13482:	2002      	movs	r0, #2
   13484:	f003 fe56 	bl	17134 <hciDrvWrite>
   13488:	42a0      	cmp	r0, r4
   1348a:	d000      	beq.n	1348e <hciTrSendAclData+0x22>
  {
    /* free buffer */
    hciCoreTxAclComplete(pContext, pData);
  }
}
   1348c:	bd70      	pop	{r4, r5, r6, pc}
    hciCoreTxAclComplete(pContext, pData);
   1348e:	4629      	mov	r1, r5
   13490:	4630      	mov	r0, r6
}
   13492:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    hciCoreTxAclComplete(pContext, pData);
   13496:	f7fe bd53 	b.w	11f40 <hciCoreTxAclComplete>
   1349a:	bf00      	nop

0001349c <hciTrSendCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciTrSendCmd(uint8_t *pData)
{
   1349c:	b538      	push	{r3, r4, r5, lr}
  uint16_t   len;  // in case like LE set periodic advertising data, the maximum HCI command parameter length is 255

  /* get length */
  len = pData[2] + HCI_CMD_HDR_LEN;
   1349e:	7885      	ldrb	r5, [r0, #2]
   134a0:	3503      	adds	r5, #3

  /* dump event for protocol analysis */
  HCI_PDUMP_CMD(len, pData);

  /* transmit ACL header and data */
  if (hciDrvWrite(HCI_CMD_TYPE, len, pData) == len)
   134a2:	4602      	mov	r2, r0
{
   134a4:	4604      	mov	r4, r0
  if (hciDrvWrite(HCI_CMD_TYPE, len, pData) == len)
   134a6:	4629      	mov	r1, r5
   134a8:	2001      	movs	r0, #1
   134aa:	f003 fe43 	bl	17134 <hciDrvWrite>
   134ae:	42a8      	cmp	r0, r5
   134b0:	d000      	beq.n	134b4 <hciTrSendCmd+0x18>
  {
    /* free buffer */
    WsfMsgFree(pData);
  }
}
   134b2:	bd38      	pop	{r3, r4, r5, pc}
    WsfMsgFree(pData);
   134b4:	4620      	mov	r0, r4
}
   134b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    WsfMsgFree(pData);
   134ba:	f000 b9b3 	b.w	13824 <WsfMsgFree>
   134be:	bf00      	nop

000134c0 <hciTrSerialRxIncoming>:
 *
 *  \return The number of bytes consumed.
 */
/*************************************************************************************************/
uint16_t hciTrSerialRxIncoming(uint8_t *pBuf, uint16_t len)
{
   134c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t   dataByte;
  uint16_t  consumed_bytes;

  consumed_bytes = 0;
  /* loop until all bytes of incoming buffer are handled */
  while (len)
   134c4:	460c      	mov	r4, r1
{
   134c6:	b083      	sub	sp, #12
  while (len)
   134c8:	2900      	cmp	r1, #0
   134ca:	f000 80b9 	beq.w	13640 <hciTrSerialRxIncoming+0x180>
   134ce:	f890 c000 	ldrb.w	ip, [r0]
   134d2:	4f5e      	ldr	r7, [pc, #376]	; (1364c <hciTrSerialRxIncoming+0x18c>)
    if (stateRx == HCI_RX_STATE_COMPLETE)
    {
      g_bHCIReceivingPacket = FALSE;

      /* deliver data */
      if (pPktRx != NULL)
   134d4:	f8df a184 	ldr.w	sl, [pc, #388]	; 1365c <hciTrSerialRxIncoming+0x19c>
      g_bHCIReceivingPacket = FALSE;
   134d8:	f8df 9184 	ldr.w	r9, [pc, #388]	; 13660 <hciTrSerialRxIncoming+0x1a0>
   134dc:	f8df 8184 	ldr.w	r8, [pc, #388]	; 13664 <hciTrSerialRxIncoming+0x1a4>
   134e0:	4606      	mov	r6, r0
  consumed_bytes = 0;
   134e2:	2500      	movs	r5, #0
    if (stateRx == HCI_RX_STATE_IDLE)
   134e4:	783b      	ldrb	r3, [r7, #0]
   134e6:	b993      	cbnz	r3, 1350e <hciTrSerialRxIncoming+0x4e>
      stateRx  = HCI_RX_STATE_HEADER;
   134e8:	2201      	movs	r2, #1
      iRx      = 0;
   134ea:	4959      	ldr	r1, [pc, #356]	; (13650 <hciTrSerialRxIncoming+0x190>)
      pktIndRx = dataByte;
   134ec:	f888 c000 	strb.w	ip, [r8]
      consumed_bytes++;
   134f0:	4415      	add	r5, r2
      len--;
   134f2:	3c01      	subs	r4, #1
      iRx      = 0;
   134f4:	800b      	strh	r3, [r1, #0]
      stateRx  = HCI_RX_STATE_HEADER;
   134f6:	703a      	strb	r2, [r7, #0]
      g_bHCIReceivingPacket = TRUE;
   134f8:	f889 2000 	strb.w	r2, [r9]
      pBuf++;
   134fc:	4416      	add	r6, r2
      consumed_bytes++;
   134fe:	b2ad      	uxth	r5, r5
      len--;
   13500:	b2a4      	uxth	r4, r4
  while (len)
   13502:	b1cc      	cbz	r4, 13538 <hciTrSerialRxIncoming+0x78>
    if (stateRx == HCI_RX_STATE_IDLE)
   13504:	783b      	ldrb	r3, [r7, #0]
   13506:	f896 c000 	ldrb.w	ip, [r6]
   1350a:	2b00      	cmp	r3, #0
   1350c:	d0ec      	beq.n	134e8 <hciTrSerialRxIncoming+0x28>
    else if (stateRx == HCI_RX_STATE_HEADER)
   1350e:	2b01      	cmp	r3, #1
   13510:	d016      	beq.n	13540 <hciTrSerialRxIncoming+0x80>
    else if (stateRx == HCI_RX_STATE_DATA)
   13512:	2b02      	cmp	r3, #2
   13514:	d054      	beq.n	135c0 <hciTrSerialRxIncoming+0x100>
    if (stateRx == HCI_RX_STATE_COMPLETE)
   13516:	2b03      	cmp	r3, #3
   13518:	d1e4      	bne.n	134e4 <hciTrSerialRxIncoming+0x24>
      if (pPktRx != NULL)
   1351a:	f8da 3000 	ldr.w	r3, [sl]
      g_bHCIReceivingPacket = FALSE;
   1351e:	2200      	movs	r2, #0
   13520:	f889 2000 	strb.w	r2, [r9]
      if (pPktRx != NULL)
   13524:	b123      	cbz	r3, 13530 <hciTrSerialRxIncoming+0x70>
      {
        //am_hal_gpio_out_bit_set(13);
        hciCoreRecv(pktIndRx, pPktRx);
   13526:	f898 0000 	ldrb.w	r0, [r8]
   1352a:	4619      	mov	r1, r3
   1352c:	f7fe fecc 	bl	122c8 <hciCoreRecv>
        //am_hal_gpio_out_bit_clear(13);
      }

      /* reset state machine */
      stateRx = HCI_RX_STATE_IDLE;
   13530:	2300      	movs	r3, #0
   13532:	703b      	strb	r3, [r7, #0]
  while (len)
   13534:	2c00      	cmp	r4, #0
   13536:	d1e5      	bne.n	13504 <hciTrSerialRxIncoming+0x44>
    }
  }
  return consumed_bytes;
}
   13538:	4628      	mov	r0, r5
   1353a:	b003      	add	sp, #12
   1353c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (pktIndRx == HCI_EVT_TYPE)
   13540:	f898 1000 	ldrb.w	r1, [r8]
   13544:	2904      	cmp	r1, #4
   13546:	d050      	beq.n	135ea <hciTrSerialRxIncoming+0x12a>
      else if (pktIndRx == HCI_ACL_TYPE)
   13548:	2902      	cmp	r1, #2
   1354a:	d1f5      	bne.n	13538 <hciTrSerialRxIncoming+0x78>
      if (iRx != hdrLen) {
   1354c:	f8df b100 	ldr.w	fp, [pc, #256]	; 13650 <hciTrSerialRxIncoming+0x190>
   13550:	f8bb 3000 	ldrh.w	r3, [fp]
   13554:	2b04      	cmp	r3, #4
   13556:	d05d      	beq.n	13614 <hciTrSerialRxIncoming+0x154>
        hdrLen = HCI_ACL_HDR_LEN;
   13558:	2204      	movs	r2, #4
      if (iRx != hdrLen) {
   1355a:	4610      	mov	r0, r2
        hdrRx[iRx++] = dataByte;
   1355c:	f8df e0f4 	ldr.w	lr, [pc, #244]	; 13654 <hciTrSerialRxIncoming+0x194>
   13560:	f80e c003 	strb.w	ip, [lr, r3]
   13564:	3301      	adds	r3, #1
   13566:	b29b      	uxth	r3, r3
        consumed_bytes++;
   13568:	3501      	adds	r5, #1
        len--;
   1356a:	3c01      	subs	r4, #1
      if (iRx == hdrLen)
   1356c:	4283      	cmp	r3, r0
        pBuf++;
   1356e:	f106 0601 	add.w	r6, r6, #1
        consumed_bytes++;
   13572:	b2ad      	uxth	r5, r5
        len--;
   13574:	b2a4      	uxth	r4, r4
        hdrRx[iRx++] = dataByte;
   13576:	f8ab 3000 	strh.w	r3, [fp]
      if (iRx == hdrLen)
   1357a:	d1c2      	bne.n	13502 <hciTrSerialRxIncoming+0x42>
        if (pktIndRx == HCI_EVT_TYPE)
   1357c:	2904      	cmp	r1, #4
   1357e:	d061      	beq.n	13644 <hciTrSerialRxIncoming+0x184>
        else if (pktIndRx == HCI_ACL_TYPE)
   13580:	2902      	cmp	r1, #2
   13582:	d061      	beq.n	13648 <hciTrSerialRxIncoming+0x188>
      uint16_t dataLen = 0;
   13584:	2300      	movs	r3, #0
   13586:	9300      	str	r3, [sp, #0]
   13588:	9201      	str	r2, [sp, #4]
          pPktRx = (uint8_t*)WsfMsgAlloc(hdrLen + dataLen);
   1358a:	f000 f943 	bl	13814 <WsfMsgAlloc>
   1358e:	9a01      	ldr	r2, [sp, #4]
   13590:	f8ca 0000 	str.w	r0, [sl]
   13594:	4603      	mov	r3, r0
        if (pPktRx != NULL)
   13596:	2b00      	cmp	r3, #0
   13598:	d0ce      	beq.n	13538 <hciTrSerialRxIncoming+0x78>
              *pDataRx++ = hdrRx[i];
   1359a:	492e      	ldr	r1, [pc, #184]	; (13654 <hciTrSerialRxIncoming+0x194>)
   1359c:	9201      	str	r2, [sp, #4]
   1359e:	4618      	mov	r0, r3
   135a0:	f7f8 fdae 	bl	c100 <memcpy>
   135a4:	9a01      	ldr	r2, [sp, #4]
   135a6:	492c      	ldr	r1, [pc, #176]	; (13658 <hciTrSerialRxIncoming+0x198>)
   135a8:	4603      	mov	r3, r0
          iRx = dataLen;
   135aa:	9800      	ldr	r0, [sp, #0]
   135ac:	f8ab 0000 	strh.w	r0, [fp]
              *pDataRx++ = hdrRx[i];
   135b0:	441a      	add	r2, r3
   135b2:	600a      	str	r2, [r1, #0]
          if (iRx == 0)
   135b4:	bb10      	cbnz	r0, 135fc <hciTrSerialRxIncoming+0x13c>
            stateRx = HCI_RX_STATE_COMPLETE;
   135b6:	2203      	movs	r2, #3
      g_bHCIReceivingPacket = FALSE;
   135b8:	f889 0000 	strb.w	r0, [r9]
            stateRx = HCI_RX_STATE_COMPLETE;
   135bc:	703a      	strb	r2, [r7, #0]
      if (pPktRx != NULL)
   135be:	e7b2      	b.n	13526 <hciTrSerialRxIncoming+0x66>
      *pDataRx++ = dataByte;
   135c0:	4925      	ldr	r1, [pc, #148]	; (13658 <hciTrSerialRxIncoming+0x198>)
      iRx--;
   135c2:	4a23      	ldr	r2, [pc, #140]	; (13650 <hciTrSerialRxIncoming+0x190>)
      *pDataRx++ = dataByte;
   135c4:	680b      	ldr	r3, [r1, #0]
   135c6:	f883 c000 	strb.w	ip, [r3]
   135ca:	3301      	adds	r3, #1
   135cc:	600b      	str	r3, [r1, #0]
      iRx--;
   135ce:	8813      	ldrh	r3, [r2, #0]
   135d0:	3b01      	subs	r3, #1
   135d2:	b29b      	uxth	r3, r3
      consumed_bytes++;
   135d4:	3501      	adds	r5, #1
      len--;
   135d6:	3c01      	subs	r4, #1
      iRx--;
   135d8:	8013      	strh	r3, [r2, #0]
      pBuf++;
   135da:	3601      	adds	r6, #1
      consumed_bytes++;
   135dc:	b2ad      	uxth	r5, r5
      len--;
   135de:	b2a4      	uxth	r4, r4
      if (iRx == 0)
   135e0:	2b00      	cmp	r3, #0
   135e2:	d18e      	bne.n	13502 <hciTrSerialRxIncoming+0x42>
        stateRx = HCI_RX_STATE_COMPLETE;
   135e4:	2303      	movs	r3, #3
   135e6:	703b      	strb	r3, [r7, #0]
    if (stateRx == HCI_RX_STATE_COMPLETE)
   135e8:	e797      	b.n	1351a <hciTrSerialRxIncoming+0x5a>
      if (iRx != hdrLen) {
   135ea:	f8df b064 	ldr.w	fp, [pc, #100]	; 13650 <hciTrSerialRxIncoming+0x190>
   135ee:	f8bb 3000 	ldrh.w	r3, [fp]
   135f2:	2b02      	cmp	r3, #2
   135f4:	d005      	beq.n	13602 <hciTrSerialRxIncoming+0x142>
        hdrLen = HCI_EVT_HDR_LEN;
   135f6:	2202      	movs	r2, #2
      if (iRx != hdrLen) {
   135f8:	4610      	mov	r0, r2
   135fa:	e7af      	b.n	1355c <hciTrSerialRxIncoming+0x9c>
            stateRx = HCI_RX_STATE_DATA;
   135fc:	2302      	movs	r3, #2
   135fe:	703b      	strb	r3, [r7, #0]
   13600:	e77f      	b.n	13502 <hciTrSerialRxIncoming+0x42>
   13602:	f8df e050 	ldr.w	lr, [pc, #80]	; 13654 <hciTrSerialRxIncoming+0x194>
        hdrLen = HCI_EVT_HDR_LEN;
   13606:	461a      	mov	r2, r3
          dataLen = hdrRx[1];
   13608:	f89e 1001 	ldrb.w	r1, [lr, #1]
   1360c:	9100      	str	r1, [sp, #0]
          pPktRx = (uint8_t*)WsfMsgAlloc(hdrLen + dataLen);
   1360e:	440b      	add	r3, r1
   13610:	b298      	uxth	r0, r3
   13612:	e7b9      	b.n	13588 <hciTrSerialRxIncoming+0xc8>
   13614:	f8df e03c 	ldr.w	lr, [pc, #60]	; 13654 <hciTrSerialRxIncoming+0x194>
        hdrLen = HCI_ACL_HDR_LEN;
   13618:	461a      	mov	r2, r3
          BYTES_TO_UINT16(dataLen, &hdrRx[2]);
   1361a:	f89e 0003 	ldrb.w	r0, [lr, #3]
   1361e:	f89e 1002 	ldrb.w	r1, [lr, #2]
   13622:	9201      	str	r2, [sp, #4]
   13624:	eb01 2100 	add.w	r1, r1, r0, lsl #8
   13628:	b28a      	uxth	r2, r1
          pPktRx = (uint8_t*)WsfMsgDataAlloc(hdrLen + dataLen, 0);
   1362a:	4413      	add	r3, r2
   1362c:	b298      	uxth	r0, r3
   1362e:	2100      	movs	r1, #0
          BYTES_TO_UINT16(dataLen, &hdrRx[2]);
   13630:	9200      	str	r2, [sp, #0]
          pPktRx = (uint8_t*)WsfMsgDataAlloc(hdrLen + dataLen, 0);
   13632:	f000 f8e5 	bl	13800 <WsfMsgDataAlloc>
   13636:	9a01      	ldr	r2, [sp, #4]
   13638:	f8ca 0000 	str.w	r0, [sl]
   1363c:	4603      	mov	r3, r0
   1363e:	e7aa      	b.n	13596 <hciTrSerialRxIncoming+0xd6>
  consumed_bytes = 0;
   13640:	460d      	mov	r5, r1
   13642:	e779      	b.n	13538 <hciTrSerialRxIncoming+0x78>
   13644:	4603      	mov	r3, r0
   13646:	e7df      	b.n	13608 <hciTrSerialRxIncoming+0x148>
   13648:	4603      	mov	r3, r0
   1364a:	e7e6      	b.n	1361a <hciTrSerialRxIncoming+0x15a>
   1364c:	10004d89 	.word	0x10004d89
   13650:	10004d7c 	.word	0x10004d7c
   13654:	10004d78 	.word	0x10004d78
   13658:	10004d80 	.word	0x10004d80
   1365c:	10004d84 	.word	0x10004d84
   13660:	10004d74 	.word	0x10004d74
   13664:	10004d88 	.word	0x10004d88

00013668 <WsfAssert>:
 *  \param  pFile   Name of file originating assert.
 *  \param  line    Line number of assert statement.
 */
/*************************************************************************************************/
void WsfAssert(const char *pFile, uint16_t line)
{
   13668:	b082      	sub	sp, #8
  volatile uint8_t escape=0;
   1366a:	2300      	movs	r3, #0
   1366c:	f88d 3007 	strb.w	r3, [sp, #7]
  {
    /*
     *  However, you can exit with a debugger by setting variable 'escape'.
     *  Handy to see where the assert happened if you cannot view the call stack.
    */
    if (escape)
   13670:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13674:	2b00      	cmp	r3, #0
   13676:	d0fb      	beq.n	13670 <WsfAssert+0x8>
    {
      break;
    }
  }
}
   13678:	b002      	add	sp, #8
   1367a:	4770      	bx	lr

0001367c <WsfBufInit>:
 *
 *  \return Amount of pBufMem used or 0 for failures.
 */
/*************************************************************************************************/
uint16_t WsfBufInit(uint16_t bufMemLen, uint8_t *pBufMem, uint8_t numPools, wsfBufPoolDesc_t *pDesc)
{
   1367c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* create each pool; see loop exit condition below */
  while (TRUE)
  {
    /* verify we didn't overrun memory; if we did, abort */
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   13680:	08c0      	lsrs	r0, r0, #3
  wsfBufMem = (wsfBufMem_t *) pBufMem;
   13682:	4c31      	ldr	r4, [pc, #196]	; (13748 <WsfBufInit+0xcc>)
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   13684:	eb01 0cc0 	add.w	ip, r1, r0, lsl #3
  pStart = (wsfBufMem_t *) (pPool + numPools);
   13688:	eb02 0042 	add.w	r0, r2, r2, lsl #1
  wsfBufMem = (wsfBufMem_t *) pBufMem;
   1368c:	6021      	str	r1, [r4, #0]
  pStart = (wsfBufMem_t *) (pPool + numPools);
   1368e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  wsfBufNumPools = numPools;
   13692:	4c2e      	ldr	r4, [pc, #184]	; (1374c <WsfBufInit+0xd0>)
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   13694:	4560      	cmp	r0, ip
  wsfBufNumPools = numPools;
   13696:	7022      	strb	r2, [r4, #0]
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   13698:	d849      	bhi.n	1372e <WsfBufInit+0xb2>
      WSF_ASSERT(FALSE);
      return 0;
    }

    /* exit loop after verification check */
    if (numPools-- == 0)
   1369a:	1e57      	subs	r7, r2, #1
   1369c:	b2ff      	uxtb	r7, r7
   1369e:	b3ba      	cbz	r2, 13710 <WsfBufInit+0x94>
   136a0:	f103 0208 	add.w	r2, r3, #8
   136a4:	eb02 0787 	add.w	r7, r2, r7, lsl #2
   136a8:	1d1d      	adds	r5, r3, #4
   136aa:	f101 060c 	add.w	r6, r1, #12
    }

    /* adjust pool lengths for minimum size and alignment */
    if (pDesc->len < sizeof(wsfBufMem_t))
    {
      pPool->desc.len = sizeof(wsfBufMem_t);
   136ae:	f04f 0908 	mov.w	r9, #8
    {
      WSF_ASSERT(FALSE);
      return 0;
    }
    /* last one in list points to NULL */
    pStart->pNext = NULL;
   136b2:	f04f 0800 	mov.w	r8, #0
    if (pDesc->len < sizeof(wsfBufMem_t))
   136b6:	f835 4c04 	ldrh.w	r4, [r5, #-4]
   136ba:	2c07      	cmp	r4, #7
   136bc:	d83a      	bhi.n	13734 <WsfBufInit+0xb8>
      pPool->desc.len = sizeof(wsfBufMem_t);
   136be:	f826 9c0c 	strh.w	r9, [r6, #-12]
   136c2:	2401      	movs	r4, #1
    pPool->desc.num = pDesc->num;
   136c4:	f815 3c02 	ldrb.w	r3, [r5, #-2]
   136c8:	f806 3c0a 	strb.w	r3, [r6, #-10]
    for (i = pPool->desc.num; i > 1; i--)
   136cc:	2b01      	cmp	r3, #1
    pPool->pFree = pStart;
   136ce:	e946 0002 	strd	r0, r0, [r6, #-8]
    for (i = pPool->desc.num; i > 1; i--)
   136d2:	d910      	bls.n	136f6 <WsfBufInit+0x7a>
      if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   136d4:	4584      	cmp	ip, r0
   136d6:	d32a      	bcc.n	1372e <WsfBufInit+0xb2>
      pStart->pNext = pStart + len;
   136d8:	00e2      	lsls	r2, r4, #3
   136da:	2c01      	cmp	r4, #1
   136dc:	f1c2 0e00 	rsb	lr, r2, #0
   136e0:	d002      	beq.n	136e8 <WsfBufInit+0x6c>
   136e2:	e01c      	b.n	1371e <WsfBufInit+0xa2>
      if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   136e4:	4560      	cmp	r0, ip
   136e6:	d822      	bhi.n	1372e <WsfBufInit+0xb2>
    for (i = pPool->desc.num; i > 1; i--)
   136e8:	3b01      	subs	r3, #1
      pStart->pNext = pStart + len;
   136ea:	4410      	add	r0, r2
    for (i = pPool->desc.num; i > 1; i--)
   136ec:	b2db      	uxtb	r3, r3
   136ee:	2b01      	cmp	r3, #1
      pStart->pNext = pStart + len;
   136f0:	f840 000e 	str.w	r0, [r0, lr]
    for (i = pPool->desc.num; i > 1; i--)
   136f4:	d1f6      	bne.n	136e4 <WsfBufInit+0x68>
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   136f6:	4584      	cmp	ip, r0
   136f8:	d319      	bcc.n	1372e <WsfBufInit+0xb2>
    pStart->pNext = NULL;
   136fa:	f8c0 8000 	str.w	r8, [r0]
    pStart += len;
   136fe:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   13702:	4560      	cmp	r0, ip
   13704:	d813      	bhi.n	1372e <WsfBufInit+0xb2>
    if (numPools-- == 0)
   13706:	3504      	adds	r5, #4
   13708:	42bd      	cmp	r5, r7
   1370a:	f106 060c 	add.w	r6, r6, #12
   1370e:	d1d2      	bne.n	136b6 <WsfBufInit+0x3a>

    /* next pool */
    pPool++;
  }

  wsfBufMemLen = (uint8_t *) pStart - (uint8_t *) wsfBufMem;
   13710:	4b0f      	ldr	r3, [pc, #60]	; (13750 <WsfBufInit+0xd4>)
   13712:	1a40      	subs	r0, r0, r1
   13714:	b280      	uxth	r0, r0
   13716:	8018      	strh	r0, [r3, #0]
  WSF_TRACE_INFO1("Created buffer pools; using %u bytes", wsfBufMemLen);

  return wsfBufMemLen;
   13718:	e00a      	b.n	13730 <WsfBufInit+0xb4>
      if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   1371a:	4560      	cmp	r0, ip
   1371c:	d807      	bhi.n	1372e <WsfBufInit+0xb2>
    for (i = pPool->desc.num; i > 1; i--)
   1371e:	3b01      	subs	r3, #1
      pStart->pNext = pStart + len;
   13720:	4410      	add	r0, r2
    for (i = pPool->desc.num; i > 1; i--)
   13722:	b2db      	uxtb	r3, r3
   13724:	2b01      	cmp	r3, #1
      pStart->pNext = pStart + len;
   13726:	f840 000e 	str.w	r0, [r0, lr]
    for (i = pPool->desc.num; i > 1; i--)
   1372a:	d1f6      	bne.n	1371a <WsfBufInit+0x9e>
   1372c:	e7e3      	b.n	136f6 <WsfBufInit+0x7a>
      return 0;
   1372e:	2000      	movs	r0, #0
}
   13730:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if ((pDesc->len % sizeof(wsfBufMem_t)) != 0)
   13734:	0763      	lsls	r3, r4, #29
      pPool->desc.len = pDesc->len + sizeof(wsfBufMem_t) - (pDesc->len % sizeof(wsfBufMem_t));
   13736:	bf1e      	ittt	ne
   13738:	f024 0407 	bicne.w	r4, r4, #7
   1373c:	3408      	addne	r4, #8
   1373e:	b2a4      	uxthne	r4, r4
      pPool->desc.len = pDesc->len;
   13740:	f826 4c0c 	strh.w	r4, [r6, #-12]
    len = pPool->desc.len / sizeof(wsfBufMem_t);
   13744:	08e4      	lsrs	r4, r4, #3
   13746:	e7bd      	b.n	136c4 <WsfBufInit+0x48>
   13748:	10004d8c 	.word	0x10004d8c
   1374c:	10004d92 	.word	0x10004d92
   13750:	10004d90 	.word	0x10004d90

00013754 <WsfBufAlloc>:
 *
 *  \return Pointer to allocated buffer or NULL if allocation fails.
 */
/*************************************************************************************************/
void *WsfBufAlloc(uint16_t len)
{
   13754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  WSF_ASSERT(len > 0);

  pPool = (wsfBufPool_t *) wsfBufMem;

  for (i = wsfBufNumPools; i > 0; i--, pPool++)
   13756:	4a14      	ldr	r2, [pc, #80]	; (137a8 <WsfBufAlloc+0x54>)
  pPool = (wsfBufPool_t *) wsfBufMem;
   13758:	4b14      	ldr	r3, [pc, #80]	; (137ac <WsfBufAlloc+0x58>)
  for (i = wsfBufNumPools; i > 0; i--, pPool++)
   1375a:	7815      	ldrb	r5, [r2, #0]
  pPool = (wsfBufPool_t *) wsfBufMem;
   1375c:	681c      	ldr	r4, [r3, #0]
{
   1375e:	4606      	mov	r6, r0
  for (i = wsfBufNumPools; i > 0; i--, pPool++)
   13760:	b19d      	cbz	r5, 1378a <WsfBufAlloc+0x36>
   13762:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   13766:	eb04 0585 	add.w	r5, r4, r5, lsl #2
   1376a:	e002      	b.n	13772 <WsfBufAlloc+0x1e>
   1376c:	340c      	adds	r4, #12
   1376e:	42ac      	cmp	r4, r5
   13770:	d00b      	beq.n	1378a <WsfBufAlloc+0x36>
  {
    /* if buffer is big enough */
    if (len <= pPool->desc.len)
   13772:	8823      	ldrh	r3, [r4, #0]
   13774:	42b3      	cmp	r3, r6
   13776:	d3f9      	bcc.n	1376c <WsfBufAlloc+0x18>
    {
      /* enter critical section */
      WSF_CS_ENTER(cs);
   13778:	f000 f87a 	bl	13870 <WsfCsEnter>

      /* if buffers available */
      if (pPool->pFree != NULL)
   1377c:	68a7      	ldr	r7, [r4, #8]
   1377e:	b95f      	cbnz	r7, 13798 <WsfBufAlloc+0x44>
  for (i = wsfBufNumPools; i > 0; i--, pPool++)
   13780:	340c      	adds	r4, #12

        return pBuf;
      }

      /* exit critical section */
      WSF_CS_EXIT(cs);
   13782:	f000 f87f 	bl	13884 <WsfCsExit>
  for (i = wsfBufNumPools; i > 0; i--, pPool++)
   13786:	42ac      	cmp	r4, r5
   13788:	d1f3      	bne.n	13772 <WsfBufAlloc+0x1e>
  else
  {
    WSF_TRACE_WARN2("WsfBufAlloc failed len:%u - task:%u", len, WSF_OS_GET_ACTIVE_HANDLER_ID());
  }
#else
  WSF_TRACE_WARN1("WsfBufAlloc failed len:%u", len);
   1378a:	4809      	ldr	r0, [pc, #36]	; (137b0 <WsfBufAlloc+0x5c>)
   1378c:	4631      	mov	r1, r6

#if WSF_BUF_ALLOC_FAIL_ASSERT == TRUE
  WSF_ASSERT(FALSE);
#endif

  return NULL;
   1378e:	2700      	movs	r7, #0
  WSF_TRACE_WARN1("WsfBufAlloc failed len:%u", len);
   13790:	f000 fbc0 	bl	13f14 <WsfTrace>
}
   13794:	4638      	mov	r0, r7
   13796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pPool->pFree = pBuf->pNext;
   13798:	683a      	ldr	r2, [r7, #0]
   1379a:	60a2      	str	r2, [r4, #8]
        pBuf->free = 0;
   1379c:	2300      	movs	r3, #0
   1379e:	607b      	str	r3, [r7, #4]
        WSF_CS_EXIT(cs);
   137a0:	f000 f870 	bl	13884 <WsfCsExit>
}
   137a4:	4638      	mov	r0, r7
   137a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   137a8:	10004d92 	.word	0x10004d92
   137ac:	10004d8c 	.word	0x10004d8c
   137b0:	000242fc 	.word	0x000242fc

000137b4 <WsfBufFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfBufFree(void *pBuf)
{
   137b4:	b538      	push	{r3, r4, r5, lr}
  WSF_ASSERT(p >= ((wsfBufPool_t *) wsfBufMem)->pStart);
  WSF_ASSERT(p < (wsfBufMem_t *)(((uint8_t *) wsfBufMem) + wsfBufMemLen));
#endif

  /* iterate over pools starting from last pool */
  pPool = (wsfBufPool_t *) wsfBufMem + (wsfBufNumPools - 1);
   137b6:	4a0f      	ldr	r2, [pc, #60]	; (137f4 <WsfBufFree+0x40>)
   137b8:	4b0f      	ldr	r3, [pc, #60]	; (137f8 <WsfBufFree+0x44>)
   137ba:	6812      	ldr	r2, [r2, #0]
   137bc:	781c      	ldrb	r4, [r3, #0]
   137be:	230c      	movs	r3, #12
   137c0:	fb03 2404 	mla	r4, r3, r4, r2
   137c4:	3c0c      	subs	r4, #12
  while (pPool >= (wsfBufPool_t *) wsfBufMem)
   137c6:	42a2      	cmp	r2, r4
   137c8:	d812      	bhi.n	137f0 <WsfBufFree+0x3c>
   137ca:	4605      	mov	r5, r0
   137cc:	e002      	b.n	137d4 <WsfBufFree+0x20>

      return;
    }

    /* next pool */
    pPool--;
   137ce:	3c0c      	subs	r4, #12
  while (pPool >= (wsfBufPool_t *) wsfBufMem)
   137d0:	42a2      	cmp	r2, r4
   137d2:	d80d      	bhi.n	137f0 <WsfBufFree+0x3c>
    if (p >= pPool->pStart)
   137d4:	6863      	ldr	r3, [r4, #4]
   137d6:	42ab      	cmp	r3, r5
   137d8:	d8f9      	bhi.n	137ce <WsfBufFree+0x1a>
      WSF_CS_ENTER(cs);
   137da:	f000 f849 	bl	13870 <WsfCsEnter>
      p->pNext = pPool->pFree;
   137de:	68a3      	ldr	r3, [r4, #8]
      p->free = WSF_BUF_FREE_NUM;
   137e0:	4a06      	ldr	r2, [pc, #24]	; (137fc <WsfBufFree+0x48>)
      p->pNext = pPool->pFree;
   137e2:	e9c5 3200 	strd	r3, r2, [r5]
      pPool->pFree = p;
   137e6:	60a5      	str	r5, [r4, #8]

  /* should never get here */
  WSF_ASSERT(FALSE);

  return;
}
   137e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      WSF_CS_EXIT(cs);
   137ec:	f000 b84a 	b.w	13884 <WsfCsExit>
}
   137f0:	bd38      	pop	{r3, r4, r5, pc}
   137f2:	bf00      	nop
   137f4:	10004d8c 	.word	0x10004d8c
   137f8:	10004d92 	.word	0x10004d92
   137fc:	faabd00d 	.word	0xfaabd00d

00013800 <WsfMsgDataAlloc>:
/*************************************************************************************************/
void *WsfMsgAlloc(uint16_t len)
{
  wsfMsg_t  *pMsg;

  pMsg = WsfBufAlloc(len + sizeof(wsfMsg_t));
   13800:	3008      	adds	r0, #8
   13802:	4408      	add	r0, r1
{
   13804:	b508      	push	{r3, lr}
  pMsg = WsfBufAlloc(len + sizeof(wsfMsg_t));
   13806:	b280      	uxth	r0, r0
   13808:	f7ff ffa4 	bl	13754 <WsfBufAlloc>

  /* hide header */
  if (pMsg != NULL)
   1380c:	b100      	cbz	r0, 13810 <WsfMsgDataAlloc+0x10>
  {
    pMsg++;
   1380e:	3008      	adds	r0, #8
}
   13810:	bd08      	pop	{r3, pc}
   13812:	bf00      	nop

00013814 <WsfMsgAlloc>:
  pMsg = WsfBufAlloc(len + sizeof(wsfMsg_t));
   13814:	3008      	adds	r0, #8
{
   13816:	b508      	push	{r3, lr}
  pMsg = WsfBufAlloc(len + sizeof(wsfMsg_t));
   13818:	b280      	uxth	r0, r0
   1381a:	f7ff ff9b 	bl	13754 <WsfBufAlloc>
  if (pMsg != NULL)
   1381e:	b100      	cbz	r0, 13822 <WsfMsgAlloc+0xe>
    pMsg++;
   13820:	3008      	adds	r0, #8
  }

  return pMsg;
}
   13822:	bd08      	pop	{r3, pc}

00013824 <WsfMsgFree>:
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgFree(void *pMsg)
{
  WsfBufFree(((wsfMsg_t *) pMsg) - 1);
   13824:	3808      	subs	r0, #8
   13826:	f7ff bfc5 	b.w	137b4 <WsfBufFree>
   1382a:	bf00      	nop

0001382c <WsfMsgSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgSend(wsfHandlerId_t handlerId, void *pMsg)
{
   1382c:	b538      	push	{r3, r4, r5, lr}
   1382e:	460d      	mov	r5, r1
   13830:	4604      	mov	r4, r0
  WSF_TRACE_MSG1("WsfMsgSend handlerId:%u", handlerId);

  /* get queue for this handler and enqueue message */
  WsfMsgEnq(WsfTaskMsgQueue(handlerId), handlerId, pMsg);
   13832:	f000 f8e3 	bl	139fc <WsfTaskMsgQueue>
  p = ((wsfMsg_t *) pMsg) - 1;

  /* set handler ID */
  p->handlerId = handlerId;

  WsfQueueEnq(pQueue, p);
   13836:	f1a5 0108 	sub.w	r1, r5, #8
  p->handlerId = handlerId;
   1383a:	f805 4c04 	strb.w	r4, [r5, #-4]
  WsfQueueEnq(pQueue, p);
   1383e:	f000 f989 	bl	13b54 <WsfQueueEnq>
  WsfTaskSetReady(handlerId, WSF_MSG_QUEUE_EVENT);
   13842:	4620      	mov	r0, r4
   13844:	2101      	movs	r1, #1
}
   13846:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WsfTaskSetReady(handlerId, WSF_MSG_QUEUE_EVENT);
   1384a:	f000 b88f 	b.w	1396c <WsfTaskSetReady>
   1384e:	bf00      	nop

00013850 <WsfMsgEnq>:
  p->handlerId = handlerId;
   13850:	f802 1c04 	strb.w	r1, [r2, #-4]
  WsfQueueEnq(pQueue, p);
   13854:	f1a2 0108 	sub.w	r1, r2, #8
   13858:	f000 b97c 	b.w	13b54 <WsfQueueEnq>

0001385c <WsfMsgDeq>:
 *
 *  \return Pointer to message that has been dequeued or NULL if queue is empty.
 */
/*************************************************************************************************/
void *WsfMsgDeq(wsfQueue_t *pQueue, wsfHandlerId_t *pHandlerId)
{
   1385c:	b510      	push	{r4, lr}
   1385e:	460c      	mov	r4, r1
  wsfMsg_t *pMsg;

  if ((pMsg = WsfQueueDeq(pQueue)) != NULL)
   13860:	f000 f98e 	bl	13b80 <WsfQueueDeq>
   13864:	b110      	cbz	r0, 1386c <WsfMsgDeq+0x10>
  {
    *pHandlerId = pMsg->handlerId;
   13866:	7903      	ldrb	r3, [r0, #4]
   13868:	7023      	strb	r3, [r4, #0]

    /* hide header */
    pMsg++;
   1386a:	3008      	adds	r0, #8
  }

  return pMsg;
}
   1386c:	bd10      	pop	{r4, pc}
   1386e:	bf00      	nop

00013870 <WsfCsEnter>:
   13870:	4a03      	ldr	r2, [pc, #12]	; (13880 <WsfCsEnter+0x10>)
   13872:	7813      	ldrb	r3, [r2, #0]
   13874:	b90b      	cbnz	r3, 1387a <WsfCsEnter+0xa>
   13876:	b672      	cpsid	i
   13878:	7813      	ldrb	r3, [r2, #0]
   1387a:	3301      	adds	r3, #1
   1387c:	7013      	strb	r3, [r2, #0]
   1387e:	4770      	bx	lr
   13880:	10004d93 	.word	0x10004d93

00013884 <WsfCsExit>:
   13884:	4a03      	ldr	r2, [pc, #12]	; (13894 <WsfCsExit+0x10>)
   13886:	7813      	ldrb	r3, [r2, #0]
   13888:	3b01      	subs	r3, #1
   1388a:	b2db      	uxtb	r3, r3
   1388c:	7013      	strb	r3, [r2, #0]
   1388e:	b903      	cbnz	r3, 13892 <WsfCsExit+0xe>
   13890:	b662      	cpsie	i
   13892:	4770      	bx	lr
   13894:	10004d93 	.word	0x10004d93

00013898 <WsfTaskLock>:
 *  \return None.
 */
/*************************************************************************************************/
void WsfCsEnter(void)
{
  if (csNesting == 0)
   13898:	4a03      	ldr	r2, [pc, #12]	; (138a8 <WsfTaskLock+0x10>)
   1389a:	7813      	ldrb	r3, [r2, #0]
   1389c:	b90b      	cbnz	r3, 138a2 <WsfTaskLock+0xa>
  {
#ifdef __IAR_SYSTEMS_ICC__
    __disable_interrupt();
#endif
#ifdef __GNUC__
    __asm volatile ("cpsid i");
   1389e:	b672      	cpsid	i
#ifdef __CC_ARM
  __disable_irq();
#endif

  }
  csNesting++;
   138a0:	7813      	ldrb	r3, [r2, #0]
   138a2:	3301      	adds	r3, #1
   138a4:	7013      	strb	r3, [r2, #0]
 */
/*************************************************************************************************/
void WsfTaskLock(void)
{
  WsfCsEnter();
}
   138a6:	4770      	bx	lr
   138a8:	10004d93 	.word	0x10004d93

000138ac <WsfTaskUnlock>:
  csNesting--;
   138ac:	4a03      	ldr	r2, [pc, #12]	; (138bc <WsfTaskUnlock+0x10>)
   138ae:	7813      	ldrb	r3, [r2, #0]
   138b0:	3b01      	subs	r3, #1
   138b2:	b2db      	uxtb	r3, r3
   138b4:	7013      	strb	r3, [r2, #0]
  if (csNesting == 0)
   138b6:	b903      	cbnz	r3, 138ba <WsfTaskUnlock+0xe>
    __asm volatile ("cpsie i");
   138b8:	b662      	cpsie	i
 */
/*************************************************************************************************/
void WsfTaskUnlock(void)
{
  WsfCsExit();
}
   138ba:	4770      	bx	lr
   138bc:	10004d93 	.word	0x10004d93

000138c0 <WsfSetEvent>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfSetEvent(wsfHandlerId_t handlerId, wsfEventMask_t event)
{
   138c0:	b510      	push	{r4, lr}
  if (csNesting == 0)
   138c2:	4b26      	ldr	r3, [pc, #152]	; (1395c <WsfSetEvent+0x9c>)
   138c4:	781a      	ldrb	r2, [r3, #0]
{
   138c6:	b082      	sub	sp, #8
  if (csNesting == 0)
   138c8:	bb4a      	cbnz	r2, 1391e <WsfSetEvent+0x5e>
    __asm volatile ("cpsid i");
   138ca:	b672      	cpsid	i
  WSF_ASSERT(WSF_HANDLER_FROM_ID(handlerId) < WSF_MAX_HANDLERS);

  WSF_TRACE_INFO2("WsfSetEvent handlerId:%u event:%u", handlerId, event);

  WSF_CS_ENTER(cs);
  wsfOs.task.handlerEventMask[WSF_HANDLER_FROM_ID(handlerId)] |= event;
   138cc:	4a24      	ldr	r2, [pc, #144]	; (13960 <WsfSetEvent+0xa0>)
  csNesting++;
   138ce:	781c      	ldrb	r4, [r3, #0]
  wsfOs.task.handlerEventMask[WSF_HANDLER_FROM_ID(handlerId)] |= event;
   138d0:	f000 000f 	and.w	r0, r0, #15
   138d4:	4410      	add	r0, r2
   138d6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   138da:	4319      	orrs	r1, r3
  wsfOs.task.taskEventMask |= WSF_HANDLER_EVENT;
   138dc:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
  wsfOs.task.handlerEventMask[WSF_HANDLER_FROM_ID(handlerId)] |= event;
   138e0:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  wsfOs.task.taskEventMask |= WSF_HANDLER_EVENT;
   138e4:	f043 0304 	orr.w	r3, r3, #4
   138e8:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
  if (csNesting == 0)
   138ec:	b904      	cbnz	r4, 138f0 <WsfSetEvent+0x30>
    __asm volatile ("cpsie i");
   138ee:	b662      	cpsie	i
  if(xRadioTaskEventObject != NULL) 
   138f0:	4b1c      	ldr	r3, [pc, #112]	; (13964 <WsfSetEvent+0xa4>)
   138f2:	681a      	ldr	r2, [r3, #0]
   138f4:	b18a      	cbz	r2, 1391a <WsfSetEvent+0x5a>
{
uint32_t ulCurrentInterrupt;
BaseType_t xReturn;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
   138f6:	f3ef 8205 	mrs	r2, IPSR

	if( ulCurrentInterrupt == 0 )
   138fa:	bb0a      	cbnz	r2, 13940 <WsfSetEvent+0x80>
          xResult = xEventGroupSetBits(xRadioTaskEventObject, 1);
   138fc:	6818      	ldr	r0, [r3, #0]
   138fe:	2101      	movs	r1, #1
   13900:	f00b ff88 	bl	1f814 <xEventGroupSetBits>
          if ( xResult != pdFAIL )
   13904:	b148      	cbz	r0, 1391a <WsfSetEvent+0x5a>
              portYIELD();
   13906:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1390a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1390e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
   13912:	f3bf 8f4f 	dsb	sy
   13916:	f3bf 8f6f 	isb	sy
  WSF_CS_EXIT(cs);

  /* set event in OS */

  WsfSetOsSpecificEvent();
}
   1391a:	b002      	add	sp, #8
   1391c:	bd10      	pop	{r4, pc}
  wsfOs.task.handlerEventMask[WSF_HANDLER_FROM_ID(handlerId)] |= event;
   1391e:	4b10      	ldr	r3, [pc, #64]	; (13960 <WsfSetEvent+0xa0>)
   13920:	f000 000f 	and.w	r0, r0, #15
   13924:	4418      	add	r0, r3
  wsfOs.task.taskEventMask |= WSF_HANDLER_EVENT;
   13926:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
  wsfOs.task.handlerEventMask[WSF_HANDLER_FROM_ID(handlerId)] |= event;
   1392a:	f890 c024 	ldrb.w	ip, [r0, #36]	; 0x24
  wsfOs.task.taskEventMask |= WSF_HANDLER_EVENT;
   1392e:	f042 0204 	orr.w	r2, r2, #4
  wsfOs.task.handlerEventMask[WSF_HANDLER_FROM_ID(handlerId)] |= event;
   13932:	ea41 010c 	orr.w	r1, r1, ip
   13936:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  wsfOs.task.taskEventMask |= WSF_HANDLER_EVENT;
   1393a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (csNesting == 0)
   1393e:	e7d7      	b.n	138f0 <WsfSetEvent+0x30>
          xResult = xEventGroupSetBitsFromISR(xRadioTaskEventObject, 1,
   13940:	6819      	ldr	r1, [r3, #0]
   13942:	4809      	ldr	r0, [pc, #36]	; (13968 <WsfSetEvent+0xa8>)
          xHigherPriorityTaskWoken = pdFALSE;
   13944:	2400      	movs	r4, #0
          xResult = xEventGroupSetBitsFromISR(xRadioTaskEventObject, 1,
   13946:	ab01      	add	r3, sp, #4
   13948:	2201      	movs	r2, #1
          xHigherPriorityTaskWoken = pdFALSE;
   1394a:	9401      	str	r4, [sp, #4]
          xResult = xEventGroupSetBitsFromISR(xRadioTaskEventObject, 1,
   1394c:	f00d fcce 	bl	212ec <xTimerPendFunctionCallFromISR>
          if ( xResult != pdFAIL )
   13950:	2800      	cmp	r0, #0
   13952:	d0e2      	beq.n	1391a <WsfSetEvent+0x5a>
              portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13954:	9b01      	ldr	r3, [sp, #4]
   13956:	2b00      	cmp	r3, #0
   13958:	d0df      	beq.n	1391a <WsfSetEvent+0x5a>
   1395a:	e7d4      	b.n	13906 <WsfSetEvent+0x46>
   1395c:	10004d93 	.word	0x10004d93
   13960:	10004d94 	.word	0x10004d94
   13964:	10004dd0 	.word	0x10004dd0
   13968:	0001f889 	.word	0x0001f889

0001396c <WsfTaskSetReady>:
  if (csNesting == 0)
   1396c:	4b1f      	ldr	r3, [pc, #124]	; (139ec <WsfTaskSetReady+0x80>)
   1396e:	781a      	ldrb	r2, [r3, #0]
   13970:	bb12      	cbnz	r2, 139b8 <WsfTaskSetReady+0x4c>
    __asm volatile ("cpsid i");
   13972:	b672      	cpsid	i
  (void)handlerId;

  WSF_CS_INIT(cs);

  WSF_CS_ENTER(cs);
  wsfOs.task.taskEventMask |= event;
   13974:	4a1e      	ldr	r2, [pc, #120]	; (139f0 <WsfTaskSetReady+0x84>)
  csNesting++;
   13976:	781b      	ldrb	r3, [r3, #0]
  wsfOs.task.taskEventMask |= event;
   13978:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
   1397c:	4301      	orrs	r1, r0
   1397e:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
  if (csNesting == 0)
   13982:	b903      	cbnz	r3, 13986 <WsfTaskSetReady+0x1a>
    __asm volatile ("cpsie i");
   13984:	b662      	cpsie	i
  if(xRadioTaskEventObject != NULL) 
   13986:	4b1b      	ldr	r3, [pc, #108]	; (139f4 <WsfTaskSetReady+0x88>)
   13988:	681a      	ldr	r2, [r3, #0]
   1398a:	b1fa      	cbz	r2, 139cc <WsfTaskSetReady+0x60>
{
   1398c:	b510      	push	{r4, lr}
   1398e:	b082      	sub	sp, #8
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
   13990:	f3ef 8205 	mrs	r2, IPSR
	if( ulCurrentInterrupt == 0 )
   13994:	b9da      	cbnz	r2, 139ce <WsfTaskSetReady+0x62>
          xResult = xEventGroupSetBits(xRadioTaskEventObject, 1);
   13996:	6818      	ldr	r0, [r3, #0]
   13998:	2101      	movs	r1, #1
   1399a:	f00b ff3b 	bl	1f814 <xEventGroupSetBits>
          if ( xResult != pdFAIL )
   1399e:	b148      	cbz	r0, 139b4 <WsfTaskSetReady+0x48>
              portYIELD();
   139a0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   139a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   139a8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
   139ac:	f3bf 8f4f 	dsb	sy
   139b0:	f3bf 8f6f 	isb	sy
  WSF_CS_EXIT(cs);

  /* set event in OS */

  WsfSetOsSpecificEvent();
}
   139b4:	b002      	add	sp, #8
   139b6:	bd10      	pop	{r4, pc}
  wsfOs.task.taskEventMask |= event;
   139b8:	4b0d      	ldr	r3, [pc, #52]	; (139f0 <WsfTaskSetReady+0x84>)
   139ba:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   139be:	4311      	orrs	r1, r2
   139c0:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
  if(xRadioTaskEventObject != NULL) 
   139c4:	4b0b      	ldr	r3, [pc, #44]	; (139f4 <WsfTaskSetReady+0x88>)
   139c6:	681a      	ldr	r2, [r3, #0]
   139c8:	2a00      	cmp	r2, #0
   139ca:	d1df      	bne.n	1398c <WsfTaskSetReady+0x20>
   139cc:	4770      	bx	lr
          xResult = xEventGroupSetBitsFromISR(xRadioTaskEventObject, 1,
   139ce:	6819      	ldr	r1, [r3, #0]
   139d0:	4809      	ldr	r0, [pc, #36]	; (139f8 <WsfTaskSetReady+0x8c>)
          xHigherPriorityTaskWoken = pdFALSE;
   139d2:	2400      	movs	r4, #0
          xResult = xEventGroupSetBitsFromISR(xRadioTaskEventObject, 1,
   139d4:	ab01      	add	r3, sp, #4
   139d6:	2201      	movs	r2, #1
          xHigherPriorityTaskWoken = pdFALSE;
   139d8:	9401      	str	r4, [sp, #4]
          xResult = xEventGroupSetBitsFromISR(xRadioTaskEventObject, 1,
   139da:	f00d fc87 	bl	212ec <xTimerPendFunctionCallFromISR>
          if ( xResult != pdFAIL )
   139de:	2800      	cmp	r0, #0
   139e0:	d0e8      	beq.n	139b4 <WsfTaskSetReady+0x48>
              portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   139e2:	9b01      	ldr	r3, [sp, #4]
   139e4:	2b00      	cmp	r3, #0
   139e6:	d0e5      	beq.n	139b4 <WsfTaskSetReady+0x48>
   139e8:	e7da      	b.n	139a0 <WsfTaskSetReady+0x34>
   139ea:	bf00      	nop
   139ec:	10004d93 	.word	0x10004d93
   139f0:	10004d94 	.word	0x10004d94
   139f4:	10004dd0 	.word	0x10004dd0
   139f8:	0001f889 	.word	0x0001f889

000139fc <WsfTaskMsgQueue>:
{
  /* Unused parameter */
  (void)handlerId;

  return &(wsfOs.task.msgQueue);
}
   139fc:	4800      	ldr	r0, [pc, #0]	; (13a00 <WsfTaskMsgQueue+0x4>)
   139fe:	4770      	bx	lr
   13a00:	10004dc4 	.word	0x10004dc4

00013a04 <WsfOsSetNextHandler>:
 *  \return WSF handler ID for this handler.
 */
/*************************************************************************************************/
wsfHandlerId_t WsfOsSetNextHandler(wsfEventHandler_t handler)
{
  wsfHandlerId_t handlerId = wsfOs.task.numHandler++;
   13a04:	4a04      	ldr	r2, [pc, #16]	; (13a18 <WsfOsSetNextHandler+0x14>)
   13a06:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
   13a0a:	1c59      	adds	r1, r3, #1

  WSF_ASSERT(handlerId < WSF_MAX_HANDLERS);

  wsfOs.task.handler[handlerId] = handler;
   13a0c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  wsfHandlerId_t handlerId = wsfOs.task.numHandler++;
   13a10:	f882 1039 	strb.w	r1, [r2, #57]	; 0x39

  return handlerId;
}
   13a14:	4618      	mov	r0, r3
   13a16:	4770      	bx	lr
   13a18:	10004d94 	.word	0x10004d94

00013a1c <WsfOsInit>:
*
*  \return None.
*/
/*************************************************************************************************/
void WsfOsInit(void)
{
   13a1c:	b510      	push	{r4, lr}
  memset(&wsfOs, 0, sizeof(wsfOs));

  if( xRadioTaskEventObject == NULL)
   13a1e:	4c06      	ldr	r4, [pc, #24]	; (13a38 <WsfOsInit+0x1c>)
  memset(&wsfOs, 0, sizeof(wsfOs));
   13a20:	4806      	ldr	r0, [pc, #24]	; (13a3c <WsfOsInit+0x20>)
   13a22:	223c      	movs	r2, #60	; 0x3c
   13a24:	2100      	movs	r1, #0
   13a26:	f00d fd11 	bl	2144c <memset>
  if( xRadioTaskEventObject == NULL)
   13a2a:	6823      	ldr	r3, [r4, #0]
   13a2c:	b103      	cbz	r3, 13a30 <WsfOsInit+0x14>
  {
    xRadioTaskEventObject = xEventGroupCreate();

    WSF_ASSERT(xRadioTaskEventObject != NULL);
  }
}
   13a2e:	bd10      	pop	{r4, pc}
    xRadioTaskEventObject = xEventGroupCreate();
   13a30:	f00b fe7c 	bl	1f72c <xEventGroupCreate>
   13a34:	6020      	str	r0, [r4, #0]
}
   13a36:	bd10      	pop	{r4, pc}
   13a38:	10004dd0 	.word	0x10004dd0
   13a3c:	10004d94 	.word	0x10004d94

00013a40 <wsfOsDispatcher>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void wsfOsDispatcher(void)
{
   13a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13a44:	b084      	sub	sp, #16
   13a46:	4d3f      	ldr	r5, [pc, #252]	; (13b44 <wsfOsDispatcher+0x104>)
  if (csNesting == 0)
   13a48:	f8df 8104 	ldr.w	r8, [pc, #260]	; 13b50 <wsfOsDispatcher+0x110>

  WSF_CS_INIT(cs);

  pTask = &wsfOs.task;

  WsfTimerUpdateTicks();
   13a4c:	f000 f9fc 	bl	13e48 <WsfTimerUpdateTicks>
    WSF_CS_EXIT(cs);

    if (taskEventMask & WSF_MSG_QUEUE_EVENT)
    {
      /* handle msg queue */
      while ((pMsg = WsfMsgDeq(&pTask->msgQueue, &handlerId)) != NULL)
   13a50:	f105 0730 	add.w	r7, r5, #48	; 0x30
    pTask->taskEventMask = 0;
   13a54:	f04f 0900 	mov.w	r9, #0
   13a58:	e00e      	b.n	13a78 <wsfOsDispatcher+0x38>
    __asm volatile ("cpsid i");
   13a5a:	b672      	cpsid	i
  csNesting++;
   13a5c:	f898 2000 	ldrb.w	r2, [r8]
    taskEventMask = pTask->taskEventMask;
   13a60:	f895 6038 	ldrb.w	r6, [r5, #56]	; 0x38
    pTask->taskEventMask = 0;
   13a64:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  if (csNesting == 0)
   13a68:	b902      	cbnz	r2, 13a6c <wsfOsDispatcher+0x2c>
    __asm volatile ("cpsie i");
   13a6a:	b662      	cpsie	i
    if (taskEventMask & WSF_MSG_QUEUE_EVENT)
   13a6c:	07f1      	lsls	r1, r6, #31
   13a6e:	d416      	bmi.n	13a9e <wsfOsDispatcher+0x5e>
        (*pTask->handler[handlerId])(0, pMsg);
        WsfMsgFree(pMsg);
      }
    }

    if (taskEventMask & WSF_TIMER_EVENT)
   13a70:	07b2      	lsls	r2, r6, #30
   13a72:	d423      	bmi.n	13abc <wsfOsDispatcher+0x7c>
        WSF_ASSERT(pTimer->handlerId < WSF_MAX_HANDLERS);
        (*pTask->handler[pTimer->handlerId])(0, &pTimer->msg);
      }
    }

    if (taskEventMask & WSF_HANDLER_EVENT)
   13a74:	0773      	lsls	r3, r6, #29
   13a76:	d42c      	bmi.n	13ad2 <wsfOsDispatcher+0x92>
  while (pTask->taskEventMask)
   13a78:	f895 6038 	ldrb.w	r6, [r5, #56]	; 0x38
   13a7c:	2e00      	cmp	r6, #0
   13a7e:	d04c      	beq.n	13b1a <wsfOsDispatcher+0xda>
  if (csNesting == 0)
   13a80:	f898 3000 	ldrb.w	r3, [r8]
   13a84:	2b00      	cmp	r3, #0
   13a86:	d0e8      	beq.n	13a5a <wsfOsDispatcher+0x1a>
    pTask->taskEventMask = 0;
   13a88:	f885 9038 	strb.w	r9, [r5, #56]	; 0x38
  if (csNesting == 0)
   13a8c:	e7ee      	b.n	13a6c <wsfOsDispatcher+0x2c>
        (*pTask->handler[handlerId])(0, pMsg);
   13a8e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   13a92:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   13a96:	4798      	blx	r3
        WsfMsgFree(pMsg);
   13a98:	4620      	mov	r0, r4
   13a9a:	f7ff fec3 	bl	13824 <WsfMsgFree>
      while ((pMsg = WsfMsgDeq(&pTask->msgQueue, &handlerId)) != NULL)
   13a9e:	f10d 010f 	add.w	r1, sp, #15
   13aa2:	4638      	mov	r0, r7
   13aa4:	f7ff feda 	bl	1385c <WsfMsgDeq>
   13aa8:	4604      	mov	r4, r0
        (*pTask->handler[handlerId])(0, pMsg);
   13aaa:	4621      	mov	r1, r4
   13aac:	2000      	movs	r0, #0
      while ((pMsg = WsfMsgDeq(&pTask->msgQueue, &handlerId)) != NULL)
   13aae:	2c00      	cmp	r4, #0
   13ab0:	d1ed      	bne.n	13a8e <wsfOsDispatcher+0x4e>
   13ab2:	e7dd      	b.n	13a70 <wsfOsDispatcher+0x30>
        (*pTask->handler[pTimer->handlerId])(0, &pTimer->msg);
   13ab4:	7b1b      	ldrb	r3, [r3, #12]
   13ab6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   13aba:	4798      	blx	r3
      while ((pTimer = WsfTimerServiceExpired(0)) != NULL)
   13abc:	2000      	movs	r0, #0
   13abe:	f000 f9ab 	bl	13e18 <WsfTimerServiceExpired>
   13ac2:	4603      	mov	r3, r0
        (*pTask->handler[pTimer->handlerId])(0, &pTimer->msg);
   13ac4:	f103 0108 	add.w	r1, r3, #8
   13ac8:	2000      	movs	r0, #0
      while ((pTimer = WsfTimerServiceExpired(0)) != NULL)
   13aca:	2b00      	cmp	r3, #0
   13acc:	d1f2      	bne.n	13ab4 <wsfOsDispatcher+0x74>
    if (taskEventMask & WSF_HANDLER_EVENT)
   13ace:	0773      	lsls	r3, r6, #29
   13ad0:	d5d2      	bpl.n	13a78 <wsfOsDispatcher+0x38>
   13ad2:	4c1d      	ldr	r4, [pc, #116]	; (13b48 <wsfOsDispatcher+0x108>)
      {
        if ((pTask->handlerEventMask[i] != 0) && (pTask->handler[i] != NULL))
        {
          WSF_CS_ENTER(cs);
          eventMask = pTask->handlerEventMask[i];
          pTask->handlerEventMask[i] = 0;
   13ad4:	f04f 0900 	mov.w	r9, #0
   13ad8:	f1a4 0623 	sub.w	r6, r4, #35	; 0x23
   13adc:	f104 0a09 	add.w	sl, r4, #9
   13ae0:	e00d      	b.n	13afe <wsfOsDispatcher+0xbe>
    __asm volatile ("cpsid i");
   13ae2:	b672      	cpsid	i
  csNesting++;
   13ae4:	f898 2000 	ldrb.w	r2, [r8]
          eventMask = pTask->handlerEventMask[i];
   13ae8:	7820      	ldrb	r0, [r4, #0]
          pTask->handlerEventMask[i] = 0;
   13aea:	7023      	strb	r3, [r4, #0]
  if (csNesting == 0)
   13aec:	b902      	cbnz	r2, 13af0 <wsfOsDispatcher+0xb0>
    __asm volatile ("cpsie i");
   13aee:	b662      	cpsie	i
          WSF_CS_EXIT(cs);

          (*pTask->handler[i])(eventMask, NULL);
   13af0:	6833      	ldr	r3, [r6, #0]
   13af2:	2100      	movs	r1, #0
   13af4:	4798      	blx	r3
      for (i = 0; i < WSF_MAX_HANDLERS; i++)
   13af6:	4554      	cmp	r4, sl
   13af8:	f106 0604 	add.w	r6, r6, #4
   13afc:	d0aa      	beq.n	13a54 <wsfOsDispatcher+0x14>
        if ((pTask->handlerEventMask[i] != 0) && (pTask->handler[i] != NULL))
   13afe:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   13b02:	2800      	cmp	r0, #0
   13b04:	d0f7      	beq.n	13af6 <wsfOsDispatcher+0xb6>
   13b06:	6833      	ldr	r3, [r6, #0]
   13b08:	2b00      	cmp	r3, #0
   13b0a:	d0f4      	beq.n	13af6 <wsfOsDispatcher+0xb6>
  if (csNesting == 0)
   13b0c:	f898 3000 	ldrb.w	r3, [r8]
   13b10:	2b00      	cmp	r3, #0
   13b12:	d0e6      	beq.n	13ae2 <wsfOsDispatcher+0xa2>
          pTask->handlerEventMask[i] = 0;
   13b14:	f884 9000 	strb.w	r9, [r4]
  if (csNesting == 0)
   13b18:	e7ea      	b.n	13af0 <wsfOsDispatcher+0xb0>
        }
      }
    }
  }

  WsfTimerUpdateTicks();
   13b1a:	f000 f995 	bl	13e48 <WsfTimerUpdateTicks>

  if (wsfOsReadyToSleep())
   13b1e:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   13b22:	b113      	cbz	r3, 13b2a <wsfOsDispatcher+0xea>
  {
    xEventGroupWaitBits(xRadioTaskEventObject, 1, pdTRUE,
                      pdFALSE, portMAX_DELAY);
  }

}
   13b24:	b004      	add	sp, #16
   13b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    xEventGroupWaitBits(xRadioTaskEventObject, 1, pdTRUE,
   13b2a:	4808      	ldr	r0, [pc, #32]	; (13b4c <wsfOsDispatcher+0x10c>)
   13b2c:	2201      	movs	r2, #1
   13b2e:	f04f 31ff 	mov.w	r1, #4294967295
   13b32:	6800      	ldr	r0, [r0, #0]
   13b34:	9100      	str	r1, [sp, #0]
   13b36:	4611      	mov	r1, r2
   13b38:	f00b fe06 	bl	1f748 <xEventGroupWaitBits>
}
   13b3c:	b004      	add	sp, #16
   13b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13b42:	bf00      	nop
   13b44:	10004d94 	.word	0x10004d94
   13b48:	10004db7 	.word	0x10004db7
   13b4c:	10004dd0 	.word	0x10004dd0
   13b50:	10004d93 	.word	0x10004d93

00013b54 <WsfQueueEnq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueEnq(wsfQueue_t *pQueue, void *pElem)
{
   13b54:	b538      	push	{r3, r4, r5, lr}

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* initialize next pointer */
  WSF_QUEUE_NEXT(pElem) = NULL;
   13b56:	2300      	movs	r3, #0
{
   13b58:	4604      	mov	r4, r0
  WSF_QUEUE_NEXT(pElem) = NULL;
   13b5a:	600b      	str	r3, [r1, #0]
{
   13b5c:	460d      	mov	r5, r1

  /* enter critical section */
  WSF_CS_ENTER(cs);
   13b5e:	f7ff fe87 	bl	13870 <WsfCsEnter>

  /* if queue empty */
  if (pQueue->pHead == NULL)
   13b62:	6823      	ldr	r3, [r4, #0]
   13b64:	b133      	cbz	r3, 13b74 <WsfQueueEnq+0x20>
    pQueue->pTail = pElem;
  }
  /* else enqueue element to the tail of queue */
  else
  {
    WSF_QUEUE_NEXT(pQueue->pTail) = pElem;
   13b66:	6863      	ldr	r3, [r4, #4]
   13b68:	601d      	str	r5, [r3, #0]
    pQueue->pTail = pElem;
   13b6a:	6065      	str	r5, [r4, #4]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
}
   13b6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WSF_CS_EXIT(cs);
   13b70:	f7ff be88 	b.w	13884 <WsfCsExit>
    pQueue->pTail = pElem;
   13b74:	e9c4 5500 	strd	r5, r5, [r4]
}
   13b78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WSF_CS_EXIT(cs);
   13b7c:	f7ff be82 	b.w	13884 <WsfCsExit>

00013b80 <WsfQueueDeq>:
 *
 *  \return Pointer to element that has been dequeued or NULL if queue is empty.
 */
/*************************************************************************************************/
void *WsfQueueDeq(wsfQueue_t *pQueue)
{
   13b80:	b538      	push	{r3, r4, r5, lr}
   13b82:	4604      	mov	r4, r0
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   13b84:	f7ff fe74 	bl	13870 <WsfCsEnter>

  pElem = pQueue->pHead;
   13b88:	6825      	ldr	r5, [r4, #0]

  /* if queue is not empty */
  if (pElem != NULL)
   13b8a:	b115      	cbz	r5, 13b92 <WsfQueueDeq+0x12>
  {
    /* set head to next element in queue */
    pQueue->pHead = WSF_QUEUE_NEXT(pElem);
   13b8c:	682b      	ldr	r3, [r5, #0]
   13b8e:	6023      	str	r3, [r4, #0]

    /* check for empty queue */
    if (pQueue->pHead == NULL)
   13b90:	b11b      	cbz	r3, 13b9a <WsfQueueDeq+0x1a>
      pQueue->pTail = NULL;
    }
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   13b92:	f7ff fe77 	bl	13884 <WsfCsExit>

  return pElem;
}
   13b96:	4628      	mov	r0, r5
   13b98:	bd38      	pop	{r3, r4, r5, pc}
      pQueue->pTail = NULL;
   13b9a:	6063      	str	r3, [r4, #4]
  WSF_CS_EXIT(cs);
   13b9c:	f7ff fe72 	bl	13884 <WsfCsExit>
}
   13ba0:	4628      	mov	r0, r5
   13ba2:	bd38      	pop	{r3, r4, r5, pc}

00013ba4 <WsfQueueInsert>:
 *                    Note:  set pPrev to NULL if pElem is first element in queue.
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueInsert(wsfQueue_t *pQueue, void *pElem, void *pPrev)
{
   13ba4:	b570      	push	{r4, r5, r6, lr}
   13ba6:	4604      	mov	r4, r0
   13ba8:	460d      	mov	r5, r1
   13baa:	4616      	mov	r6, r2

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   13bac:	f7ff fe60 	bl	13870 <WsfCsEnter>

  /* if queue empty or inserting at tail */
  if (pQueue->pHead == NULL || pPrev == pQueue->pTail)
   13bb0:	6823      	ldr	r3, [r4, #0]
   13bb2:	b153      	cbz	r3, 13bca <WsfQueueInsert+0x26>
   13bb4:	6863      	ldr	r3, [r4, #4]
   13bb6:	42b3      	cmp	r3, r6
   13bb8:	d007      	beq.n	13bca <WsfQueueInsert+0x26>
  {
    /* queue as normal */
    WsfQueueEnq(pQueue, pElem);
  }
  /* else if inserting at head */
  else if (pPrev == NULL)
   13bba:	b1ae      	cbz	r6, 13be8 <WsfQueueInsert+0x44>
    WsfQueuePush(pQueue, pElem);
  }
  else
  {
    /* insert in middle of queue */
    WSF_QUEUE_NEXT(pElem) = WSF_QUEUE_NEXT(pPrev);
   13bbc:	6833      	ldr	r3, [r6, #0]
   13bbe:	602b      	str	r3, [r5, #0]
    WSF_QUEUE_NEXT(pPrev) = pElem;
   13bc0:	6035      	str	r5, [r6, #0]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
}
   13bc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  WSF_CS_EXIT(cs);
   13bc6:	f7ff be5d 	b.w	13884 <WsfCsExit>
  WSF_QUEUE_NEXT(pElem) = NULL;
   13bca:	2300      	movs	r3, #0
   13bcc:	602b      	str	r3, [r5, #0]
  WSF_CS_ENTER(cs);
   13bce:	f7ff fe4f 	bl	13870 <WsfCsEnter>
  if (pQueue->pHead == NULL)
   13bd2:	6823      	ldr	r3, [r4, #0]
   13bd4:	b17b      	cbz	r3, 13bf6 <WsfQueueInsert+0x52>
    WSF_QUEUE_NEXT(pQueue->pTail) = pElem;
   13bd6:	6863      	ldr	r3, [r4, #4]
   13bd8:	601d      	str	r5, [r3, #0]
    pQueue->pTail = pElem;
   13bda:	6065      	str	r5, [r4, #4]
  WSF_CS_EXIT(cs);
   13bdc:	f7ff fe52 	bl	13884 <WsfCsExit>
}
   13be0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  WSF_CS_EXIT(cs);
   13be4:	f7ff be4e 	b.w	13884 <WsfCsExit>
  WSF_CS_ENTER(cs);
   13be8:	f7ff fe42 	bl	13870 <WsfCsEnter>
  WSF_QUEUE_NEXT(pElem) = pQueue->pHead;
   13bec:	6823      	ldr	r3, [r4, #0]
   13bee:	602b      	str	r3, [r5, #0]
  if (pQueue->pHead == NULL)
   13bf0:	b123      	cbz	r3, 13bfc <WsfQueueInsert+0x58>
  pQueue->pHead = pElem;
   13bf2:	6025      	str	r5, [r4, #0]
   13bf4:	e7f2      	b.n	13bdc <WsfQueueInsert+0x38>
    pQueue->pTail = pElem;
   13bf6:	e9c4 5500 	strd	r5, r5, [r4]
   13bfa:	e7ef      	b.n	13bdc <WsfQueueInsert+0x38>
    pQueue->pTail = pElem;
   13bfc:	6065      	str	r5, [r4, #4]
   13bfe:	e7f8      	b.n	13bf2 <WsfQueueInsert+0x4e>

00013c00 <WsfQueueRemove>:
 *                    Note:  set pPrev to NULL if pElem is first element in queue.
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueRemove(wsfQueue_t *pQueue, void *pElem, void *pPrev)
{
   13c00:	b570      	push	{r4, r5, r6, lr}
   13c02:	4605      	mov	r5, r0
   13c04:	460c      	mov	r4, r1
   13c06:	4616      	mov	r6, r2
  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pQueue->pHead != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   13c08:	f7ff fe32 	bl	13870 <WsfCsEnter>

  /* if first element */
  if (pElem == pQueue->pHead)
   13c0c:	682b      	ldr	r3, [r5, #0]
   13c0e:	42a3      	cmp	r3, r4
   13c10:	d00a      	beq.n	13c28 <WsfQueueRemove+0x28>
  {
    /* remove from head of queue */
    pQueue->pHead = WSF_QUEUE_NEXT(pElem);
  }
  else if (pPrev)
   13c12:	b10e      	cbz	r6, 13c18 <WsfQueueRemove+0x18>
  {
    /* remove from middle of queue, pPrev will never be null */
    WSF_QUEUE_NEXT(pPrev) = WSF_QUEUE_NEXT(pElem);
   13c14:	6823      	ldr	r3, [r4, #0]
   13c16:	6033      	str	r3, [r6, #0]
  }

  /* if last element */
  if (pElem == pQueue->pTail)
   13c18:	686b      	ldr	r3, [r5, #4]
   13c1a:	42a3      	cmp	r3, r4
  {
    /* update tail */
    pQueue->pTail = pPrev;
   13c1c:	bf08      	it	eq
   13c1e:	606e      	streq	r6, [r5, #4]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
}
   13c20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  WSF_CS_EXIT(cs);
   13c24:	f7ff be2e 	b.w	13884 <WsfCsExit>
    pQueue->pHead = WSF_QUEUE_NEXT(pElem);
   13c28:	6823      	ldr	r3, [r4, #0]
   13c2a:	602b      	str	r3, [r5, #0]
   13c2c:	e7f4      	b.n	13c18 <WsfQueueRemove+0x18>
   13c2e:	bf00      	nop

00013c30 <WsfQueueCount>:
 *
 *  \return Number of elements in queue.
 */
/*************************************************************************************************/
uint16_t WsfQueueCount(wsfQueue_t *pQueue)
{
   13c30:	b510      	push	{r4, lr}
   13c32:	4604      	mov	r4, r0
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   13c34:	f7ff fe1c 	bl	13870 <WsfCsEnter>

  pElem = pQueue->pHead;
   13c38:	6823      	ldr	r3, [r4, #0]

  /* iterate over queue */
  while (pElem != NULL)
   13c3a:	b14b      	cbz	r3, 13c50 <WsfQueueCount+0x20>
  uint16_t        count = 0;
   13c3c:	2400      	movs	r4, #0
  {
    count++;
    pElem = pElem->pNext;
   13c3e:	681b      	ldr	r3, [r3, #0]
    count++;
   13c40:	3401      	adds	r4, #1
   13c42:	b2a4      	uxth	r4, r4
  while (pElem != NULL)
   13c44:	2b00      	cmp	r3, #0
   13c46:	d1fa      	bne.n	13c3e <WsfQueueCount+0xe>
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   13c48:	f7ff fe1c 	bl	13884 <WsfCsExit>

  return count;
}
   13c4c:	4620      	mov	r0, r4
   13c4e:	bd10      	pop	{r4, pc}
  uint16_t        count = 0;
   13c50:	461c      	mov	r4, r3
  WSF_CS_EXIT(cs);
   13c52:	f7ff fe17 	bl	13884 <WsfCsExit>
}
   13c56:	4620      	mov	r0, r4
   13c58:	bd10      	pop	{r4, pc}
   13c5a:	bf00      	nop

00013c5c <WsfQueueEmpty>:
 *
 *  \return TRUE if queue is empty, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t WsfQueueEmpty(wsfQueue_t *pQueue)
{
   13c5c:	b510      	push	{r4, lr}
   13c5e:	4604      	mov	r4, r0
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   13c60:	f7ff fe06 	bl	13870 <WsfCsEnter>

  empty = (pQueue->pHead == NULL);
   13c64:	6824      	ldr	r4, [r4, #0]
   13c66:	fab4 f484 	clz	r4, r4
   13c6a:	0964      	lsrs	r4, r4, #5

  /* exit critical section */
  WSF_CS_EXIT(cs);
   13c6c:	f7ff fe0a 	bl	13884 <WsfCsExit>

  return empty;
}
   13c70:	4620      	mov	r0, r4
   13c72:	bd10      	pop	{r4, pc}

00013c74 <WsfTimer_handler>:
  WsfTaskUnlock();
}

static void WsfTimer_handler(TimerHandle_t xTimer)
{
  WsfTaskSetReady(0, WSF_TIMER_EVENT);
   13c74:	2102      	movs	r1, #2
   13c76:	2000      	movs	r0, #0
   13c78:	f7ff be78 	b.w	1396c <WsfTaskSetReady>

00013c7c <WsfTimerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerInit(void)
{
   13c7c:	b510      	push	{r4, lr}
  WSF_QUEUE_INIT(&wsfTimerTimerQueue);

  if(xWsfTimer == NULL)
   13c7e:	4c0d      	ldr	r4, [pc, #52]	; (13cb4 <WsfTimerInit+0x38>)
  WSF_QUEUE_INIT(&wsfTimerTimerQueue);
   13c80:	4a0d      	ldr	r2, [pc, #52]	; (13cb8 <WsfTimerInit+0x3c>)
  if(xWsfTimer == NULL)
   13c82:	6823      	ldr	r3, [r4, #0]
  WSF_QUEUE_INIT(&wsfTimerTimerQueue);
   13c84:	2000      	movs	r0, #0
   13c86:	2100      	movs	r1, #0
   13c88:	e9c2 0100 	strd	r0, r1, [r2]
{
   13c8c:	b082      	sub	sp, #8
  if(xWsfTimer == NULL)
   13c8e:	b10b      	cbz	r3, 13c94 <WsfTimerInit+0x18>
    xWsfTimer = xTimerCreate("WSF Timer", pdMS_TO_TICKS(WSF_MS_PER_TICK),
          pdFALSE, NULL, WsfTimer_handler);
    configASSERT(xWsfTimer);
    g_ui32LastTime = xTaskGetTickCount();
  }
}
   13c90:	b002      	add	sp, #8
   13c92:	bd10      	pop	{r4, pc}
    xWsfTimer = xTimerCreate("WSF Timer", pdMS_TO_TICKS(WSF_MS_PER_TICK),
   13c94:	4a09      	ldr	r2, [pc, #36]	; (13cbc <WsfTimerInit+0x40>)
   13c96:	9200      	str	r2, [sp, #0]
   13c98:	4809      	ldr	r0, [pc, #36]	; (13cc0 <WsfTimerInit+0x44>)
   13c9a:	461a      	mov	r2, r3
   13c9c:	210a      	movs	r1, #10
   13c9e:	f00d faaf 	bl	21200 <xTimerCreate>
   13ca2:	6020      	str	r0, [r4, #0]
    configASSERT(xWsfTimer);
   13ca4:	b120      	cbz	r0, 13cb0 <WsfTimerInit+0x34>
    g_ui32LastTime = xTaskGetTickCount();
   13ca6:	f00c fd8b 	bl	207c0 <xTaskGetTickCount>
   13caa:	4b06      	ldr	r3, [pc, #24]	; (13cc4 <WsfTimerInit+0x48>)
   13cac:	6018      	str	r0, [r3, #0]
}
   13cae:	e7ef      	b.n	13c90 <WsfTimerInit+0x14>
    configASSERT(xWsfTimer);
   13cb0:	e7fe      	b.n	13cb0 <WsfTimerInit+0x34>
   13cb2:	bf00      	nop
   13cb4:	10004de0 	.word	0x10004de0
   13cb8:	10004dd8 	.word	0x10004dd8
   13cbc:	00013c75 	.word	0x00013c75
   13cc0:	00024318 	.word	0x00024318
   13cc4:	10004dd4 	.word	0x10004dd4

00013cc8 <WsfTimerStartSec>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStartSec(wsfTimer_t *pTimer, wsfTimerTicks_t sec)
{
   13cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13cca:	4606      	mov	r6, r0
  WSF_TRACE_INFO2("WsfTimerStartSec pTimer:0x%x ticks:%u", (uint32_t)pTimer, WSF_TIMER_SEC_TO_TICKS(sec));

  /* insert timer into queue */
  wsfTimerInsert(pTimer, WSF_TIMER_SEC_TO_TICKS(sec));
   13ccc:	2564      	movs	r5, #100	; 0x64
   13cce:	fb01 f505 	mul.w	r5, r1, r5
  WsfTaskLock();
   13cd2:	f7ff fde1 	bl	13898 <WsfTaskLock>
  if (pTimer->isStarted)
   13cd6:	7b73      	ldrb	r3, [r6, #13]
   13cd8:	b9b3      	cbnz	r3, 13d08 <WsfTimerStartSec+0x40>
  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   13cda:	4b1b      	ldr	r3, [pc, #108]	; (13d48 <WsfTimerStartSec+0x80>)
   13cdc:	681b      	ldr	r3, [r3, #0]
  pTimer->ticks = ticks;
   13cde:	6075      	str	r5, [r6, #4]
  pTimer->isStarted = TRUE;
   13ce0:	2201      	movs	r2, #1
   13ce2:	7372      	strb	r2, [r6, #13]
  while (pElem != NULL)
   13ce4:	b343      	cbz	r3, 13d38 <WsfTimerStartSec+0x70>
    if (pElem == pTimer)
   13ce6:	2200      	movs	r2, #0
   13ce8:	e003      	b.n	13cf2 <WsfTimerStartSec+0x2a>
    pElem = pElem->pNext;
   13cea:	681c      	ldr	r4, [r3, #0]
  while (pElem != NULL)
   13cec:	461a      	mov	r2, r3
   13cee:	b11c      	cbz	r4, 13cf8 <WsfTimerStartSec+0x30>
   13cf0:	4623      	mov	r3, r4
    if (pTimer->ticks < pElem->ticks)
   13cf2:	685c      	ldr	r4, [r3, #4]
   13cf4:	42a5      	cmp	r5, r4
   13cf6:	d2f8      	bcs.n	13cea <WsfTimerStartSec+0x22>
  WsfQueueInsert(&wsfTimerTimerQueue, pTimer, pPrev);
   13cf8:	4631      	mov	r1, r6
   13cfa:	4813      	ldr	r0, [pc, #76]	; (13d48 <WsfTimerStartSec+0x80>)
   13cfc:	f7ff ff52 	bl	13ba4 <WsfQueueInsert>
}
   13d00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  WsfTaskUnlock();
   13d04:	f7ff bdd2 	b.w	138ac <WsfTaskUnlock>
  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   13d08:	4f0f      	ldr	r7, [pc, #60]	; (13d48 <WsfTimerStartSec+0x80>)
   13d0a:	683b      	ldr	r3, [r7, #0]
  while (pElem != NULL)
   13d0c:	b1b3      	cbz	r3, 13d3c <WsfTimerStartSec+0x74>
    if (pElem == pTimer)
   13d0e:	429e      	cmp	r6, r3
   13d10:	d00b      	beq.n	13d2a <WsfTimerStartSec+0x62>
   13d12:	461c      	mov	r4, r3
   13d14:	e001      	b.n	13d1a <WsfTimerStartSec+0x52>
   13d16:	42a6      	cmp	r6, r4
   13d18:	d008      	beq.n	13d2c <WsfTimerStartSec+0x64>
    pElem = pElem->pNext;
   13d1a:	4622      	mov	r2, r4
   13d1c:	6824      	ldr	r4, [r4, #0]
  while (pElem != NULL)
   13d1e:	2c00      	cmp	r4, #0
   13d20:	d1f9      	bne.n	13d16 <WsfTimerStartSec+0x4e>
  pTimer->isStarted = TRUE;
   13d22:	2201      	movs	r2, #1
   13d24:	7372      	strb	r2, [r6, #13]
  pTimer->ticks = ticks;
   13d26:	6075      	str	r5, [r6, #4]
  while (pElem != NULL)
   13d28:	e7dd      	b.n	13ce6 <WsfTimerStartSec+0x1e>
  wsfTimer_t  *pPrev = NULL;
   13d2a:	2200      	movs	r2, #0
    WsfQueueRemove(&wsfTimerTimerQueue, pTimer, pPrev);
   13d2c:	4806      	ldr	r0, [pc, #24]	; (13d48 <WsfTimerStartSec+0x80>)
   13d2e:	4631      	mov	r1, r6
   13d30:	f7ff ff66 	bl	13c00 <WsfQueueRemove>
  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   13d34:	683b      	ldr	r3, [r7, #0]
   13d36:	e7d2      	b.n	13cde <WsfTimerStartSec+0x16>
  wsfTimer_t  *pPrev = NULL;
   13d38:	461a      	mov	r2, r3
   13d3a:	e7dd      	b.n	13cf8 <WsfTimerStartSec+0x30>
  pTimer->isStarted = TRUE;
   13d3c:	2201      	movs	r2, #1
   13d3e:	7372      	strb	r2, [r6, #13]
  pTimer->ticks = ticks;
   13d40:	6075      	str	r5, [r6, #4]
  wsfTimer_t  *pPrev = NULL;
   13d42:	461a      	mov	r2, r3
   13d44:	e7d8      	b.n	13cf8 <WsfTimerStartSec+0x30>
   13d46:	bf00      	nop
   13d48:	10004dd8 	.word	0x10004dd8

00013d4c <WsfTimerStartMs>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStartMs(wsfTimer_t *pTimer, wsfTimerTicks_t ms)
{
   13d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  WSF_TRACE_INFO2("WsfTimerStartMs pTimer:0x%x ticks:%u", (uint32_t)pTimer, WSF_TIMER_MS_TO_TICKS(ms));

  /* insert timer into queue */
  wsfTimerInsert(pTimer, WSF_TIMER_MS_TO_TICKS(ms));
   13d4e:	4b1f      	ldr	r3, [pc, #124]	; (13dcc <WsfTimerStartMs+0x80>)
{
   13d50:	4606      	mov	r6, r0
  wsfTimerInsert(pTimer, WSF_TIMER_MS_TO_TICKS(ms));
   13d52:	fba3 3501 	umull	r3, r5, r3, r1
  WsfTaskLock();
   13d56:	f7ff fd9f 	bl	13898 <WsfTaskLock>
  if (pTimer->isStarted)
   13d5a:	7b73      	ldrb	r3, [r6, #13]
  wsfTimerInsert(pTimer, WSF_TIMER_MS_TO_TICKS(ms));
   13d5c:	08ed      	lsrs	r5, r5, #3
  if (pTimer->isStarted)
   13d5e:	b9b3      	cbnz	r3, 13d8e <WsfTimerStartMs+0x42>
  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   13d60:	4b1b      	ldr	r3, [pc, #108]	; (13dd0 <WsfTimerStartMs+0x84>)
   13d62:	681b      	ldr	r3, [r3, #0]
  pTimer->ticks = ticks;
   13d64:	6075      	str	r5, [r6, #4]
  pTimer->isStarted = TRUE;
   13d66:	2201      	movs	r2, #1
   13d68:	7372      	strb	r2, [r6, #13]
  while (pElem != NULL)
   13d6a:	b343      	cbz	r3, 13dbe <WsfTimerStartMs+0x72>
    if (pElem == pTimer)
   13d6c:	2200      	movs	r2, #0
   13d6e:	e003      	b.n	13d78 <WsfTimerStartMs+0x2c>
    pElem = pElem->pNext;
   13d70:	681c      	ldr	r4, [r3, #0]
  while (pElem != NULL)
   13d72:	461a      	mov	r2, r3
   13d74:	b11c      	cbz	r4, 13d7e <WsfTimerStartMs+0x32>
   13d76:	4623      	mov	r3, r4
    if (pTimer->ticks < pElem->ticks)
   13d78:	685c      	ldr	r4, [r3, #4]
   13d7a:	42a5      	cmp	r5, r4
   13d7c:	d2f8      	bcs.n	13d70 <WsfTimerStartMs+0x24>
  WsfQueueInsert(&wsfTimerTimerQueue, pTimer, pPrev);
   13d7e:	4631      	mov	r1, r6
   13d80:	4813      	ldr	r0, [pc, #76]	; (13dd0 <WsfTimerStartMs+0x84>)
   13d82:	f7ff ff0f 	bl	13ba4 <WsfQueueInsert>
}
   13d86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  WsfTaskUnlock();
   13d8a:	f7ff bd8f 	b.w	138ac <WsfTaskUnlock>
  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   13d8e:	4f10      	ldr	r7, [pc, #64]	; (13dd0 <WsfTimerStartMs+0x84>)
   13d90:	683b      	ldr	r3, [r7, #0]
  while (pElem != NULL)
   13d92:	b1b3      	cbz	r3, 13dc2 <WsfTimerStartMs+0x76>
    if (pElem == pTimer)
   13d94:	429e      	cmp	r6, r3
   13d96:	d00b      	beq.n	13db0 <WsfTimerStartMs+0x64>
   13d98:	461c      	mov	r4, r3
   13d9a:	e001      	b.n	13da0 <WsfTimerStartMs+0x54>
   13d9c:	42a6      	cmp	r6, r4
   13d9e:	d008      	beq.n	13db2 <WsfTimerStartMs+0x66>
    pElem = pElem->pNext;
   13da0:	4622      	mov	r2, r4
   13da2:	6824      	ldr	r4, [r4, #0]
  while (pElem != NULL)
   13da4:	2c00      	cmp	r4, #0
   13da6:	d1f9      	bne.n	13d9c <WsfTimerStartMs+0x50>
  pTimer->isStarted = TRUE;
   13da8:	2201      	movs	r2, #1
   13daa:	7372      	strb	r2, [r6, #13]
  pTimer->ticks = ticks;
   13dac:	6075      	str	r5, [r6, #4]
  while (pElem != NULL)
   13dae:	e7dd      	b.n	13d6c <WsfTimerStartMs+0x20>
  wsfTimer_t  *pPrev = NULL;
   13db0:	2200      	movs	r2, #0
    WsfQueueRemove(&wsfTimerTimerQueue, pTimer, pPrev);
   13db2:	4807      	ldr	r0, [pc, #28]	; (13dd0 <WsfTimerStartMs+0x84>)
   13db4:	4631      	mov	r1, r6
   13db6:	f7ff ff23 	bl	13c00 <WsfQueueRemove>
  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   13dba:	683b      	ldr	r3, [r7, #0]
   13dbc:	e7d2      	b.n	13d64 <WsfTimerStartMs+0x18>
  wsfTimer_t  *pPrev = NULL;
   13dbe:	461a      	mov	r2, r3
   13dc0:	e7dd      	b.n	13d7e <WsfTimerStartMs+0x32>
  pTimer->isStarted = TRUE;
   13dc2:	2201      	movs	r2, #1
   13dc4:	7372      	strb	r2, [r6, #13]
  pTimer->ticks = ticks;
   13dc6:	6075      	str	r5, [r6, #4]
  wsfTimer_t  *pPrev = NULL;
   13dc8:	461a      	mov	r2, r3
   13dca:	e7d8      	b.n	13d7e <WsfTimerStartMs+0x32>
   13dcc:	cccccccd 	.word	0xcccccccd
   13dd0:	10004dd8 	.word	0x10004dd8

00013dd4 <WsfTimerStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStop(wsfTimer_t *pTimer)
{
   13dd4:	b510      	push	{r4, lr}
   13dd6:	4604      	mov	r4, r0
  WSF_TRACE_INFO1("WsfTimerStop pTimer:0x%x", pTimer);

  /* task schedule lock */
  WsfTaskLock();
   13dd8:	f7ff fd5e 	bl	13898 <WsfTaskLock>
  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   13ddc:	4b0d      	ldr	r3, [pc, #52]	; (13e14 <WsfTimerStop+0x40>)
   13dde:	681b      	ldr	r3, [r3, #0]
  while (pElem != NULL)
   13de0:	b143      	cbz	r3, 13df4 <WsfTimerStop+0x20>
    if (pElem == pTimer)
   13de2:	429c      	cmp	r4, r3
   13de4:	d102      	bne.n	13dec <WsfTimerStop+0x18>
   13de6:	e009      	b.n	13dfc <WsfTimerStop+0x28>
   13de8:	429c      	cmp	r4, r3
   13dea:	d008      	beq.n	13dfe <WsfTimerStop+0x2a>
    pElem = pElem->pNext;
   13dec:	461a      	mov	r2, r3
   13dee:	681b      	ldr	r3, [r3, #0]
  while (pElem != NULL)
   13df0:	2b00      	cmp	r3, #0
   13df2:	d1f9      	bne.n	13de8 <WsfTimerStop+0x14>

  wsfTimerRemove(pTimer);

  /* task schedule unlock */
  WsfTaskUnlock();
}
   13df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  WsfTaskUnlock();
   13df8:	f7ff bd58 	b.w	138ac <WsfTaskUnlock>
  wsfTimer_t  *pPrev = NULL;
   13dfc:	2200      	movs	r2, #0
    WsfQueueRemove(&wsfTimerTimerQueue, pTimer, pPrev);
   13dfe:	4621      	mov	r1, r4
   13e00:	4804      	ldr	r0, [pc, #16]	; (13e14 <WsfTimerStop+0x40>)
   13e02:	f7ff fefd 	bl	13c00 <WsfQueueRemove>
    pTimer->isStarted = FALSE;
   13e06:	2300      	movs	r3, #0
   13e08:	7363      	strb	r3, [r4, #13]
}
   13e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  WsfTaskUnlock();
   13e0e:	f7ff bd4d 	b.w	138ac <WsfTaskUnlock>
   13e12:	bf00      	nop
   13e14:	10004dd8 	.word	0x10004dd8

00013e18 <WsfTimerServiceExpired>:
 *
 *  \return Pointer to timer or NULL.
 */
/*************************************************************************************************/
wsfTimer_t *WsfTimerServiceExpired(wsfTaskId_t taskId)
{
   13e18:	b538      	push	{r3, r4, r5, lr}

  /* Unused parameters */
  (void)taskId;

  /* task schedule lock */
  WsfTaskLock();
   13e1a:	f7ff fd3d 	bl	13898 <WsfTaskLock>

  /* find expired timers in queue */
  if (((pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead) != NULL) &&
   13e1e:	4809      	ldr	r0, [pc, #36]	; (13e44 <WsfTimerServiceExpired+0x2c>)
   13e20:	6804      	ldr	r4, [r0, #0]
   13e22:	b10c      	cbz	r4, 13e28 <WsfTimerServiceExpired+0x10>
   13e24:	6865      	ldr	r5, [r4, #4]
   13e26:	b125      	cbz	r5, 13e32 <WsfTimerServiceExpired+0x1a>
  }

  /* task schedule unlock */
  WsfTaskUnlock();

  return NULL;
   13e28:	2400      	movs	r4, #0
  WsfTaskUnlock();
   13e2a:	f7ff fd3f 	bl	138ac <WsfTaskUnlock>
}
   13e2e:	4620      	mov	r0, r4
   13e30:	bd38      	pop	{r3, r4, r5, pc}
    WsfQueueRemove(&wsfTimerTimerQueue, pElem, pPrev);
   13e32:	462a      	mov	r2, r5
   13e34:	4621      	mov	r1, r4
   13e36:	f7ff fee3 	bl	13c00 <WsfQueueRemove>
    pElem->isStarted = FALSE;
   13e3a:	7365      	strb	r5, [r4, #13]
    WsfTaskUnlock();
   13e3c:	f7ff fd36 	bl	138ac <WsfTaskUnlock>
}
   13e40:	4620      	mov	r0, r4
   13e42:	bd38      	pop	{r3, r4, r5, pc}
   13e44:	10004dd8 	.word	0x10004dd8

00013e48 <WsfTimerUpdateTicks>:
//
// Calculate the elapsed time, and update the WSF software timers.
//
//*****************************************************************************
void WsfTimerUpdateTicks(void)
{
   13e48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    //
    // Figure out how long it has been since the last time we've read the
    // continuous timer. We should be reading often enough that we'll never
    // have more than one overflow.
    //
    ui32ElapsedTime = ui32CurrentTime - g_ui32LastTime;
   13e4c:	4f2c      	ldr	r7, [pc, #176]	; (13f00 <WsfTimerUpdateTicks+0xb8>)
{
   13e4e:	b083      	sub	sp, #12
    ui32CurrentTime = xTaskGetTickCount();
   13e50:	f00c fcb6 	bl	207c0 <xTaskGetTickCount>
    ui32ElapsedTime = ui32CurrentTime - g_ui32LastTime;
   13e54:	683b      	ldr	r3, [r7, #0]
   13e56:	1ac3      	subs	r3, r0, r3

    //
    // Check to see if any WSF ticks need to happen.
    //
    if ( (ui32ElapsedTime / CLK_TICKS_PER_WSF_TICKS) > 0 )
   13e58:	2b09      	cmp	r3, #9
   13e5a:	d821      	bhi.n	13ea0 <WsfTimerUpdateTicks+0x58>
  WsfTaskLock();
   13e5c:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 13f10 <WsfTimerUpdateTicks+0xc8>
   13e60:	f7ff fd1a 	bl	13898 <WsfTaskLock>
  if (wsfTimerTimerQueue.pHead == NULL)
   13e64:	f8d8 3000 	ldr.w	r3, [r8]
   13e68:	2b00      	cmp	r3, #0
   13e6a:	d039      	beq.n	13ee0 <WsfTimerUpdateTicks+0x98>
    ticks = ((wsfTimer_t *) wsfTimerTimerQueue.pHead)->ticks;
   13e6c:	685c      	ldr	r4, [r3, #4]
  WsfTaskUnlock();
   13e6e:	f7ff fd1d 	bl	138ac <WsfTaskUnlock>

    //
    // If there's a pending WSF timer event, set an interrupt to wake us up in
    // time to service it.
    //
    if ( xNextExpiration )
   13e72:	b194      	cbz	r4, 13e9a <WsfTimerUpdateTicks+0x52>
    {
        configASSERT(pdPASS == xTimerChangePeriod( xWsfTimer,
   13e74:	4b23      	ldr	r3, [pc, #140]	; (13f04 <WsfTimerUpdateTicks+0xbc>)
   13e76:	4924      	ldr	r1, [pc, #144]	; (13f08 <WsfTimerUpdateTicks+0xc0>)
   13e78:	f242 7210 	movw	r2, #10000	; 0x2710
   13e7c:	fb04 f202 	mul.w	r2, r4, r2
   13e80:	fba3 3202 	umull	r3, r2, r3, r2
   13e84:	2364      	movs	r3, #100	; 0x64
   13e86:	6808      	ldr	r0, [r1, #0]
   13e88:	9300      	str	r3, [sp, #0]
   13e8a:	0992      	lsrs	r2, r2, #6
   13e8c:	2300      	movs	r3, #0
   13e8e:	2104      	movs	r1, #4
   13e90:	f00d f9fe 	bl	21290 <xTimerGenericCommand>
   13e94:	2801      	cmp	r0, #1
   13e96:	d000      	beq.n	13e9a <WsfTimerUpdateTicks+0x52>
   13e98:	e7fe      	b.n	13e98 <WsfTimerUpdateTicks+0x50>
                pdMS_TO_TICKS(xNextExpiration*CLK_TICKS_PER_WSF_TICKS), 100)) ;
    }
}
   13e9a:	b003      	add	sp, #12
   13e9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        WsfTimerUpdate(ui32ElapsedTime / CLK_TICKS_PER_WSF_TICKS);
   13ea0:	4d1a      	ldr	r5, [pc, #104]	; (13f0c <WsfTimerUpdateTicks+0xc4>)
  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   13ea2:	f8df 806c 	ldr.w	r8, [pc, #108]	; 13f10 <WsfTimerUpdateTicks+0xc8>
        WsfTimerUpdate(ui32ElapsedTime / CLK_TICKS_PER_WSF_TICKS);
   13ea6:	fba5 2303 	umull	r2, r3, r5, r3
   13eaa:	4606      	mov	r6, r0
   13eac:	08dd      	lsrs	r5, r3, #3
  WsfTaskLock();
   13eae:	f7ff fcf3 	bl	13898 <WsfTaskLock>
  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   13eb2:	f8d8 4000 	ldr.w	r4, [r8]
  while (pElem != NULL)
   13eb6:	b154      	cbz	r4, 13ece <WsfTimerUpdateTicks+0x86>
      pElem->ticks = 0;
   13eb8:	f04f 0900 	mov.w	r9, #0
    if (pElem->ticks > ticks)
   13ebc:	6863      	ldr	r3, [r4, #4]
   13ebe:	429d      	cmp	r5, r3
      pElem->ticks -= ticks;
   13ec0:	eba3 0205 	sub.w	r2, r3, r5
    if (pElem->ticks > ticks)
   13ec4:	d211      	bcs.n	13eea <WsfTimerUpdateTicks+0xa2>
      pElem->ticks -= ticks;
   13ec6:	6062      	str	r2, [r4, #4]
    pElem = pElem->pNext;
   13ec8:	6824      	ldr	r4, [r4, #0]
  while (pElem != NULL)
   13eca:	2c00      	cmp	r4, #0
   13ecc:	d1f6      	bne.n	13ebc <WsfTimerUpdateTicks+0x74>
  WsfTaskUnlock();
   13ece:	f7ff fced 	bl	138ac <WsfTaskUnlock>
        g_ui32LastTime = ui32CurrentTime;
   13ed2:	603e      	str	r6, [r7, #0]
  WsfTaskLock();
   13ed4:	f7ff fce0 	bl	13898 <WsfTaskLock>
  if (wsfTimerTimerQueue.pHead == NULL)
   13ed8:	f8d8 3000 	ldr.w	r3, [r8]
   13edc:	2b00      	cmp	r3, #0
   13ede:	d1c5      	bne.n	13e6c <WsfTimerUpdateTicks+0x24>
}
   13ee0:	b003      	add	sp, #12
   13ee2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  WsfTaskUnlock();
   13ee6:	f7ff bce1 	b.w	138ac <WsfTaskUnlock>
      WsfTaskSetReady(pElem->handlerId, WSF_TIMER_EVENT);
   13eea:	7b20      	ldrb	r0, [r4, #12]
      pElem->ticks = 0;
   13eec:	f8c4 9004 	str.w	r9, [r4, #4]
      WsfTaskSetReady(pElem->handlerId, WSF_TIMER_EVENT);
   13ef0:	2102      	movs	r1, #2
   13ef2:	f7ff fd3b 	bl	1396c <WsfTaskSetReady>
    pElem = pElem->pNext;
   13ef6:	6824      	ldr	r4, [r4, #0]
  while (pElem != NULL)
   13ef8:	2c00      	cmp	r4, #0
   13efa:	d1df      	bne.n	13ebc <WsfTimerUpdateTicks+0x74>
   13efc:	e7e7      	b.n	13ece <WsfTimerUpdateTicks+0x86>
   13efe:	bf00      	nop
   13f00:	10004dd4 	.word	0x10004dd4
   13f04:	10624dd3 	.word	0x10624dd3
   13f08:	10004de0 	.word	0x10004de0
   13f0c:	cccccccd 	.word	0xcccccccd
   13f10:	10004dd8 	.word	0x10004dd8

00013f14 <WsfTrace>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTrace(const char *pStr, ...)
{
   13f14:	b40f      	push	{r0, r1, r2, r3}
   13f16:	b500      	push	{lr}
   13f18:	b0c3      	sub	sp, #268	; 0x10c
   13f1a:	aa44      	add	r2, sp, #272	; 0x110
  char pTraceMsg[AM_PRINTF_BUFSIZE];
  uint32_t ui32NumChars;
  va_list           args;

  va_start(args, pStr);
  am_util_stdio_vsprintf(pTraceMsg, pStr, args);
   13f1c:	a802      	add	r0, sp, #8
{
   13f1e:	f852 1b04 	ldr.w	r1, [r2], #4
  va_start(args, pStr);
   13f22:	9201      	str	r2, [sp, #4]
  am_util_stdio_vsprintf(pTraceMsg, pStr, args);
   13f24:	f009 f88e 	bl	1d044 <am_util_stdio_vsprintf>
  //vprintf(pStr, args);
  va_end(args);
  ui32NumChars = am_util_debug_printf(pTraceMsg);
   13f28:	a802      	add	r0, sp, #8
   13f2a:	f009 fd07 	bl	1d93c <am_util_stdio_printf>
  if (!(ui32NumChars < AM_PRINTF_BUFSIZE))
   13f2e:	28ff      	cmp	r0, #255	; 0xff
   13f30:	d807      	bhi.n	13f42 <WsfTrace+0x2e>
    WsfAssert(__FILE__, (uint16_t) __LINE__);
  am_util_debug_printf("\n");
   13f32:	4806      	ldr	r0, [pc, #24]	; (13f4c <WsfTrace+0x38>)
   13f34:	f009 fd02 	bl	1d93c <am_util_stdio_printf>
}
   13f38:	b043      	add	sp, #268	; 0x10c
   13f3a:	f85d eb04 	ldr.w	lr, [sp], #4
   13f3e:	b004      	add	sp, #16
   13f40:	4770      	bx	lr
    WsfAssert(__FILE__, (uint16_t) __LINE__);
   13f42:	4803      	ldr	r0, [pc, #12]	; (13f50 <WsfTrace+0x3c>)
   13f44:	2183      	movs	r1, #131	; 0x83
   13f46:	f7ff fb8f 	bl	13668 <WsfAssert>
   13f4a:	e7f2      	b.n	13f32 <WsfTrace+0x1e>
   13f4c:	000248c0 	.word	0x000248c0
   13f50:	00024330 	.word	0x00024330

00013f54 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   13f54:	4b0a      	ldr	r3, [pc, #40]	; (13f80 <prvTaskExitError+0x2c>)
   13f56:	681b      	ldr	r3, [r3, #0]
{
   13f58:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
   13f5a:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
   13f5c:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
   13f5e:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
   13f60:	d000      	beq.n	13f64 <prvTaskExitError+0x10>
   13f62:	e7fe      	b.n	13f62 <prvTaskExitError+0xe>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
   13f64:	f04f 0380 	mov.w	r3, #128	; 0x80
   13f68:	f383 8811 	msr	BASEPRI, r3
   13f6c:	f3bf 8f6f 	isb	sy
   13f70:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
   13f74:	9b01      	ldr	r3, [sp, #4]
   13f76:	2b00      	cmp	r3, #0
   13f78:	d0fc      	beq.n	13f74 <prvTaskExitError+0x20>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   13f7a:	b002      	add	sp, #8
   13f7c:	4770      	bx	lr
   13f7e:	bf00      	nop
   13f80:	10002b7c 	.word	0x10002b7c

00013f84 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
   13f84:	4808      	ldr	r0, [pc, #32]	; (13fa8 <prvPortStartFirstTask+0x24>)
   13f86:	6800      	ldr	r0, [r0, #0]
   13f88:	6800      	ldr	r0, [r0, #0]
   13f8a:	f380 8808 	msr	MSP, r0
   13f8e:	f04f 0000 	mov.w	r0, #0
   13f92:	f380 8814 	msr	CONTROL, r0
   13f96:	b662      	cpsie	i
   13f98:	b661      	cpsie	f
   13f9a:	f3bf 8f4f 	dsb	sy
   13f9e:	f3bf 8f6f 	isb	sy
   13fa2:	df00      	svc	0
   13fa4:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
   13fa6:	0000      	.short	0x0000
   13fa8:	e000ed08 	.word	0xe000ed08

00013fac <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
   13fac:	f8df 000c 	ldr.w	r0, [pc, #12]	; 13fbc <vPortEnableVFP+0x10>
   13fb0:	6801      	ldr	r1, [r0, #0]
   13fb2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   13fb6:	6001      	str	r1, [r0, #0]
   13fb8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
   13fba:	0000      	.short	0x0000
   13fbc:	e000ed88 	.word	0xe000ed88

00013fc0 <pxPortInitialiseStack>:
{
   13fc0:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   13fc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   13fc6:	4c07      	ldr	r4, [pc, #28]	; (13fe4 <pxPortInitialiseStack+0x24>)
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   13fc8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
   13fcc:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
   13fd0:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   13fd4:	e940 4103 	strd	r4, r1, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
   13fd8:	e940 3209 	strd	r3, r2, [r0, #-36]	; 0x24
}
   13fdc:	f85d 4b04 	ldr.w	r4, [sp], #4
   13fe0:	3844      	subs	r0, #68	; 0x44
   13fe2:	4770      	bx	lr
   13fe4:	00013f55 	.word	0x00013f55
	...

00013ff0 <SVC_Handler>:
	__asm volatile (
   13ff0:	4b07      	ldr	r3, [pc, #28]	; (14010 <pxCurrentTCBConst2>)
   13ff2:	6819      	ldr	r1, [r3, #0]
   13ff4:	6808      	ldr	r0, [r1, #0]
   13ff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ffa:	f380 8809 	msr	PSP, r0
   13ffe:	f3bf 8f6f 	isb	sy
   14002:	f04f 0000 	mov.w	r0, #0
   14006:	f380 8811 	msr	BASEPRI, r0
   1400a:	4770      	bx	lr
   1400c:	f3af 8000 	nop.w

00014010 <pxCurrentTCBConst2>:
   14010:	10009fdc 	.word	0x10009fdc

00014014 <vPortEnterCritical>:
   14014:	f04f 0380 	mov.w	r3, #128	; 0x80
   14018:	f383 8811 	msr	BASEPRI, r3
   1401c:	f3bf 8f6f 	isb	sy
   14020:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
   14024:	4a07      	ldr	r2, [pc, #28]	; (14044 <vPortEnterCritical+0x30>)
   14026:	6813      	ldr	r3, [r2, #0]
   14028:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
   1402a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
   1402c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
   1402e:	d000      	beq.n	14032 <vPortEnterCritical+0x1e>
}
   14030:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   14032:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   14036:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
   1403a:	b2db      	uxtb	r3, r3
   1403c:	2b00      	cmp	r3, #0
   1403e:	d0f7      	beq.n	14030 <vPortEnterCritical+0x1c>
   14040:	e7fe      	b.n	14040 <vPortEnterCritical+0x2c>
   14042:	bf00      	nop
   14044:	10002b7c 	.word	0x10002b7c

00014048 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
   14048:	4a04      	ldr	r2, [pc, #16]	; (1405c <vPortExitCritical+0x14>)
   1404a:	6813      	ldr	r3, [r2, #0]
   1404c:	b12b      	cbz	r3, 1405a <vPortExitCritical+0x12>
	uxCriticalNesting--;
   1404e:	3b01      	subs	r3, #1
   14050:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   14052:	b90b      	cbnz	r3, 14058 <vPortExitCritical+0x10>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
   14054:	f383 8811 	msr	BASEPRI, r3
}
   14058:	4770      	bx	lr
	configASSERT( uxCriticalNesting );
   1405a:	e7fe      	b.n	1405a <vPortExitCritical+0x12>
   1405c:	10002b7c 	.word	0x10002b7c

00014060 <PendSV_Handler>:
	__asm volatile
   14060:	f3ef 8009 	mrs	r0, PSP
   14064:	f3bf 8f6f 	isb	sy
   14068:	4b15      	ldr	r3, [pc, #84]	; (140c0 <pxCurrentTCBConst>)
   1406a:	681a      	ldr	r2, [r3, #0]
   1406c:	f01e 0f10 	tst.w	lr, #16
   14070:	bf08      	it	eq
   14072:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
   14076:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1407a:	6010      	str	r0, [r2, #0]
   1407c:	e92d 0009 	stmdb	sp!, {r0, r3}
   14080:	f04f 0080 	mov.w	r0, #128	; 0x80
   14084:	f380 8811 	msr	BASEPRI, r0
   14088:	f3bf 8f4f 	dsb	sy
   1408c:	f3bf 8f6f 	isb	sy
   14090:	f00c fd44 	bl	20b1c <vTaskSwitchContext>
   14094:	f04f 0000 	mov.w	r0, #0
   14098:	f380 8811 	msr	BASEPRI, r0
   1409c:	bc09      	pop	{r0, r3}
   1409e:	6819      	ldr	r1, [r3, #0]
   140a0:	6808      	ldr	r0, [r1, #0]
   140a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140a6:	f01e 0f10 	tst.w	lr, #16
   140aa:	bf08      	it	eq
   140ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
   140b0:	f380 8809 	msr	PSP, r0
   140b4:	f3bf 8f6f 	isb	sy
   140b8:	4770      	bx	lr
   140ba:	bf00      	nop
   140bc:	f3af 8000 	nop.w

000140c0 <pxCurrentTCBConst>:
   140c0:	10009fdc 	.word	0x10009fdc

000140c4 <SysTick_Handler>:
{
   140c4:	b508      	push	{r3, lr}
	__asm volatile
   140c6:	f04f 0380 	mov.w	r3, #128	; 0x80
   140ca:	f383 8811 	msr	BASEPRI, r3
   140ce:	f3bf 8f6f 	isb	sy
   140d2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
   140d6:	f00c fb89 	bl	207ec <xTaskIncrementTick>
   140da:	b128      	cbz	r0, 140e8 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   140dc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   140e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   140e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
   140e8:	2300      	movs	r3, #0
   140ea:	f383 8811 	msr	BASEPRI, r3
}
   140ee:	bd08      	pop	{r3, pc}

000140f0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
   140f0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
   140f4:	2b0f      	cmp	r3, #15
   140f6:	d906      	bls.n	14106 <vPortValidateInterruptPriority+0x16>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   140f8:	4909      	ldr	r1, [pc, #36]	; (14120 <vPortValidateInterruptPriority+0x30>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   140fa:	4a0a      	ldr	r2, [pc, #40]	; (14124 <vPortValidateInterruptPriority+0x34>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   140fc:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   140fe:	7812      	ldrb	r2, [r2, #0]
   14100:	429a      	cmp	r2, r3
   14102:	d900      	bls.n	14106 <vPortValidateInterruptPriority+0x16>
   14104:	e7fe      	b.n	14104 <vPortValidateInterruptPriority+0x14>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
   14106:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1410a:	4a07      	ldr	r2, [pc, #28]	; (14128 <vPortValidateInterruptPriority+0x38>)
   1410c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
   14110:	6812      	ldr	r2, [r2, #0]
   14112:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   14116:	4293      	cmp	r3, r2
   14118:	d900      	bls.n	1411c <vPortValidateInterruptPriority+0x2c>
   1411a:	e7fe      	b.n	1411a <vPortValidateInterruptPriority+0x2a>
	}
   1411c:	4770      	bx	lr
   1411e:	bf00      	nop
   14120:	e000e3f0 	.word	0xe000e3f0
   14124:	10004dec 	.word	0x10004dec
   14128:	10004df0 	.word	0x10004df0

0001412c <vPortSuppressTicksAndSleep>:
 * resolution of the Tick timer.
 */
	static uint32_t xMaximumPossibleSuppressedTicks = 0;

void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
   1412c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint32_t New_Timer, Delta_Sleep;
	TickType_t xModifiableIdleTime;
    uint32_t elapsed_time;

	/* Make sure the SysTick reload value does not overflow the counter. */
	if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
   14130:	4b2c      	ldr	r3, [pc, #176]	; (141e4 <vPortSuppressTicksAndSleep+0xb8>)


	/* Calculate the reload value required to wait xExpectedIdleTime
	tick periods.  -1 is used because this code will execute part way
	through one of the tick periods. */
	ulReloadValue =  ulTimerCountsForOneTick * ( xExpectedIdleTime - 1 );
   14132:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 141ec <vPortSuppressTicksAndSleep+0xc0>
	if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
   14136:	f8d3 a000 	ldr.w	sl, [r3]
	ulReloadValue =  ulTimerCountsForOneTick * ( xExpectedIdleTime - 1 );
   1413a:	f8d9 8000 	ldr.w	r8, [r9]
{
   1413e:	4605      	mov	r5, r0

	/* Enter a critical section but don't use the taskENTER_CRITICAL()
	method as that will mask interrupts that should exit sleep mode. */
	__asm volatile( "cpsid i" );
   14140:	b672      	cpsid	i
	__asm volatile( "dsb" );
   14142:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   14146:	f3bf 8f6f 	isb	sy
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
    // Adjust for the time already elapsed
    uint32_t curTime = am_hal_stimer_counter_get();
   1414a:	f00f fb77 	bl	2383c <am_hal_stimer_counter_get>
    gF_stimerGetHistory[gF_stimerGetHistoryCount][1] = curTime;
    gF_stimerGetHistory[gF_stimerGetHistoryCount][2] = AM_REGVAL(AM_REG_STIMER_COMPARE(0, 0));
    gF_stimerGetHistory[gF_stimerGetHistoryCount][3] = gF_stimerHistoryCount;
    gF_stimerGetHistoryCount++;
#endif
    elapsed_time = curTime - g_lastSTimerVal;
   1414e:	4f26      	ldr	r7, [pc, #152]	; (141e8 <vPortSuppressTicksAndSleep+0xbc>)
    uint32_t curTime = am_hal_stimer_counter_get();
   14150:	4604      	mov	r4, r0
    elapsed_time = curTime - g_lastSTimerVal;
   14152:	683e      	ldr	r6, [r7, #0]


	/* If a context switch is pending or a task is waiting for the scheduler
	to be unsuspended then abandon the low power entry. */
    /* Abandon low power entry if the sleep time is too short */
	if( (eTaskConfirmSleepModeStatus() == eAbortSleep) || ((elapsed_time + ulTimerCountsForOneTick) > ulReloadValue) )
   14154:	f00c fe86 	bl	20e64 <eTaskConfirmSleepModeStatus>
   14158:	b158      	cbz	r0, 14172 <vPortSuppressTicksAndSleep+0x46>
   1415a:	4555      	cmp	r5, sl
   1415c:	f8d9 3000 	ldr.w	r3, [r9]
   14160:	bf28      	it	cs
   14162:	4655      	movcs	r5, sl
   14164:	1b9b      	subs	r3, r3, r6
	ulReloadValue =  ulTimerCountsForOneTick * ( xExpectedIdleTime - 1 );
   14166:	1e69      	subs	r1, r5, #1
	if( (eTaskConfirmSleepModeStatus() == eAbortSleep) || ((elapsed_time + ulTimerCountsForOneTick) > ulReloadValue) )
   14168:	4423      	add	r3, r4
	ulReloadValue =  ulTimerCountsForOneTick * ( xExpectedIdleTime - 1 );
   1416a:	fb08 f801 	mul.w	r8, r8, r1
	if( (eTaskConfirmSleepModeStatus() == eAbortSleep) || ((elapsed_time + ulTimerCountsForOneTick) > ulReloadValue) )
   1416e:	4543      	cmp	r3, r8
   14170:	d902      	bls.n	14178 <vPortSuppressTicksAndSleep+0x4c>

        am_hal_ctimer_start(configCTIMER_NUM, AM_HAL_CTIMER_BOTH);
#endif
		/* Re-enable interrupts - see comments above the cpsid instruction()
		above. */
		__asm volatile( "cpsie i" );
   14172:	b662      	cpsie	i

	}
}
   14174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ulReloadValue -= elapsed_time;
   14178:	4446      	add	r6, r8
   1417a:	1b34      	subs	r4, r6, r4
        am_hal_stimer_compare_delta_set(0, ulReloadValue);
   1417c:	4621      	mov	r1, r4
   1417e:	2000      	movs	r0, #0
   14180:	f00f fb6c 	bl	2385c <am_hal_stimer_compare_delta_set>
        am_hal_stimer_compare_delta_set(1, ulReloadValue+1);
   14184:	2001      	movs	r0, #1
   14186:	1c61      	adds	r1, r4, #1
   14188:	f00f fb68 	bl	2385c <am_hal_stimer_compare_delta_set>
		configPRE_SLEEP_PROCESSING( xModifiableIdleTime );       // Turn OFF all Periphials in this function
   1418c:	4628      	mov	r0, r5
   1418e:	f7fc f98d 	bl	104ac <am_freertos_sleep>
		if( xModifiableIdleTime > 0 )
   14192:	b120      	cbz	r0, 1419e <vPortSuppressTicksAndSleep+0x72>
			__asm volatile( "dsb" );
   14194:	f3bf 8f4f 	dsb	sy
			__asm volatile( "wfi" );
   14198:	bf30      	wfi
			__asm volatile( "isb" );
   1419a:	f3bf 8f6f 	isb	sy
		configPOST_SLEEP_PROCESSING( xExpectedIdleTime );       // Turn ON all Periphials in this function
   1419e:	4628      	mov	r0, r5
   141a0:	f7fc f98a 	bl	104b8 <am_freertos_wakeup>
        New_Timer = am_hal_stimer_counter_get();
   141a4:	f00f fb4a 	bl	2383c <am_hal_stimer_counter_get>
        Delta_Sleep = (signed long) New_Timer - (signed long) g_lastSTimerVal;
   141a8:	683b      	ldr	r3, [r7, #0]
        g_lastSTimerVal = New_Timer - Delta_Sleep%ulTimerCountsForOneTick;
   141aa:	f8d9 1000 	ldr.w	r1, [r9]
        Delta_Sleep = (signed long) New_Timer - (signed long) g_lastSTimerVal;
   141ae:	1ac3      	subs	r3, r0, r3
        g_lastSTimerVal = New_Timer - Delta_Sleep%ulTimerCountsForOneTick;
   141b0:	fbb3 f2f1 	udiv	r2, r3, r1
   141b4:	fb01 3312 	mls	r3, r1, r2, r3
   141b8:	1ac3      	subs	r3, r0, r3
        vTaskStepTick( Delta_Sleep );
   141ba:	4610      	mov	r0, r2
        g_lastSTimerVal = New_Timer - Delta_Sleep%ulTimerCountsForOneTick;
   141bc:	603b      	str	r3, [r7, #0]
        vTaskStepTick( Delta_Sleep );
   141be:	f00c fb05 	bl	207cc <vTaskStepTick>
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA | AM_HAL_STIMER_INT_COMPAREB);
   141c2:	2003      	movs	r0, #3
   141c4:	f00f fbb0 	bl	23928 <am_hal_stimer_int_clear>
        am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
   141c8:	f8d9 1000 	ldr.w	r1, [r9]
   141cc:	2000      	movs	r0, #0
   141ce:	f00f fb45 	bl	2385c <am_hal_stimer_compare_delta_set>
        am_hal_stimer_compare_delta_set(1, ulTimerCountsForOneTick+1);
   141d2:	f8d9 1000 	ldr.w	r1, [r9]
   141d6:	2001      	movs	r0, #1
   141d8:	4401      	add	r1, r0
   141da:	f00f fb3f 	bl	2385c <am_hal_stimer_compare_delta_set>
		__asm volatile( "cpsie i" );
   141de:	b662      	cpsie	i
}
   141e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   141e4:	10004df8 	.word	0x10004df8
   141e8:	10004de8 	.word	0x10004de8
   141ec:	10004df4 	.word	0x10004df4

000141f0 <xPortStimerTickHandler>:
//
//
//*****************************************************************************
void
xPortStimerTickHandler(uint32_t delta)
{
   141f0:	b570      	push	{r4, r5, r6, lr}

    curSTimer = am_hal_stimer_counter_get();
    //
    // Configure the STIMER->COMPARE_0
    //
    am_hal_stimer_compare_delta_set(0, (ulTimerCountsForOneTick-delta));
   141f2:	4e1c      	ldr	r6, [pc, #112]	; (14264 <xPortStimerTickHandler+0x74>)
{
   141f4:	4604      	mov	r4, r0
    curSTimer = am_hal_stimer_counter_get();
   141f6:	f00f fb21 	bl	2383c <am_hal_stimer_counter_get>
    am_hal_stimer_compare_delta_set(0, (ulTimerCountsForOneTick-delta));
   141fa:	6831      	ldr	r1, [r6, #0]
    curSTimer = am_hal_stimer_counter_get();
   141fc:	4605      	mov	r5, r0
    am_hal_stimer_compare_delta_set(0, (ulTimerCountsForOneTick-delta));
   141fe:	1b09      	subs	r1, r1, r4
   14200:	2000      	movs	r0, #0
   14202:	f00f fb2b 	bl	2385c <am_hal_stimer_compare_delta_set>
#ifdef AM_FREERTOS_STIMER_BACKUP
    am_hal_stimer_compare_delta_set(1, (ulTimerCountsForOneTick-delta+1));
   14206:	6831      	ldr	r1, [r6, #0]
   14208:	2001      	movs	r0, #1
   1420a:	4401      	add	r1, r0
   1420c:	1b09      	subs	r1, r1, r4
   1420e:	f00f fb25 	bl	2385c <am_hal_stimer_compare_delta_set>
#endif

    timerCounts = curSTimer - g_lastSTimerVal;
   14212:	4915      	ldr	r1, [pc, #84]	; (14268 <xPortStimerTickHandler+0x78>)
    numTicksElapsed = timerCounts/ulTimerCountsForOneTick;
   14214:	6832      	ldr	r2, [r6, #0]
    timerCounts = curSTimer - g_lastSTimerVal;
   14216:	680b      	ldr	r3, [r1, #0]
   14218:	1aeb      	subs	r3, r5, r3
    numTicksElapsed = timerCounts/ulTimerCountsForOneTick;
   1421a:	fbb3 f4f2 	udiv	r4, r3, r2
    remainder = timerCounts % ulTimerCountsForOneTick;
   1421e:	fb02 3014 	mls	r0, r2, r4, r3
    g_lastSTimerVal = curSTimer - remainder;
   14222:	1a2d      	subs	r5, r5, r0
   14224:	600d      	str	r5, [r1, #0]
	__asm volatile
   14226:	f3ef 8111 	mrs	r1, BASEPRI
   1422a:	f04f 0080 	mov.w	r0, #128	; 0x80
   1422e:	f380 8811 	msr	BASEPRI, r0
   14232:	f3bf 8f6f 	isb	sy
   14236:	f3bf 8f4f 	dsb	sy
        //
        // Increment RTOS tick
        // Allowing for need to increment the tick more than one... to avoid accumulation of
        // error in case of interrupt latencies
        //
        while (numTicksElapsed--)
   1423a:	429a      	cmp	r2, r3
   1423c:	d80e      	bhi.n	1425c <xPortStimerTickHandler+0x6c>
    BaseType_t ctxtSwitchReqd = pdFALSE;
   1423e:	2500      	movs	r5, #0
        {
            ctxtSwitchReqd = (( xTaskIncrementTick() != pdFALSE ) ? pdTRUE : ctxtSwitchReqd);
   14240:	f00c fad4 	bl	207ec <xTaskIncrementTick>
   14244:	2800      	cmp	r0, #0
   14246:	bf18      	it	ne
   14248:	2501      	movne	r5, #1
        while (numTicksElapsed--)
   1424a:	3c01      	subs	r4, #1
   1424c:	d1f8      	bne.n	14240 <xPortStimerTickHandler+0x50>
        }
        if ( ctxtSwitchReqd != pdFALSE )
   1424e:	b12d      	cbz	r5, 1425c <xPortStimerTickHandler+0x6c>
            //
            // A context switch is required.  Context switching is
            // performed in the PendSV interrupt. Pend the PendSV
            // interrupt.
            //
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   14250:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   14254:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   14258:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
   1425c:	2300      	movs	r3, #0
   1425e:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR(0);
}
   14262:	bd70      	pop	{r4, r5, r6, pc}
   14264:	10004df4 	.word	0x10004df4
   14268:	10004de8 	.word	0x10004de8

0001426c <am_stimer_cmpr0_isr>:
// Interrupt handler for the STIMER module Compare 0.
//
//*****************************************************************************
void
am_stimer_cmpr0_isr(void)
{
   1426c:	b508      	push	{r3, lr}

    //
    // Check the timer interrupt status.
    //
    uint32_t ui32Status = am_hal_stimer_int_status_get(false);
   1426e:	2000      	movs	r0, #0
   14270:	f00f fb60 	bl	23934 <am_hal_stimer_int_status_get>
    if (ui32Status & AM_HAL_STIMER_INT_COMPAREA)
   14274:	07c3      	lsls	r3, r0, #31
   14276:	d400      	bmi.n	1427a <am_stimer_cmpr0_isr+0xe>
        //
        // Run handlers for the various possible timer events.
        //
        xPortStimerTickHandler(0);
    }
}
   14278:	bd08      	pop	{r3, pc}
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
   1427a:	2001      	movs	r0, #1
   1427c:	f00f fb54 	bl	23928 <am_hal_stimer_int_clear>
}
   14280:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        xPortStimerTickHandler(0);
   14284:	2000      	movs	r0, #0
   14286:	f7ff bfb3 	b.w	141f0 <xPortStimerTickHandler>
   1428a:	bf00      	nop

0001428c <am_stimer_cmpr1_isr>:
// Interrupt handler for the STIMER module Compare 0.
//
//*****************************************************************************
void
am_stimer_cmpr1_isr(void)
{
   1428c:	b508      	push	{r3, lr}

    //
    // Check the timer interrupt status.
    //
    uint32_t ui32Status = am_hal_stimer_int_status_get(false);
   1428e:	2000      	movs	r0, #0
   14290:	f00f fb50 	bl	23934 <am_hal_stimer_int_status_get>
    if (ui32Status & AM_HAL_STIMER_INT_COMPAREB)
   14294:	0783      	lsls	r3, r0, #30
   14296:	d400      	bmi.n	1429a <am_stimer_cmpr1_isr+0xe>
        //
        // Run handlers for the various possible timer events.
        //
        xPortStimerTickHandler(1);
    }
}
   14298:	bd08      	pop	{r3, pc}
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREB);
   1429a:	2002      	movs	r0, #2
   1429c:	f00f fb44 	bl	23928 <am_hal_stimer_int_clear>
        gNumCmpB++;
   142a0:	4a04      	ldr	r2, [pc, #16]	; (142b4 <am_stimer_cmpr1_isr+0x28>)
   142a2:	6813      	ldr	r3, [r2, #0]
        xPortStimerTickHandler(1);
   142a4:	2001      	movs	r0, #1
        gNumCmpB++;
   142a6:	4403      	add	r3, r0
   142a8:	6013      	str	r3, [r2, #0]
}
   142aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        xPortStimerTickHandler(1);
   142ae:	f7ff bf9f 	b.w	141f0 <xPortStimerTickHandler>
   142b2:	bf00      	nop
   142b4:	10004de4 	.word	0x10004de4

000142b8 <vPortSetupTimerInterrupt>:

#endif // AM_FREERTOS_USE_STIMER_FOR_TICK


void vPortSetupTimerInterrupt( void )
{
   142b8:	b538      	push	{r3, r4, r5, lr}
    /* Calculate the constants required to configure the tick interrupt. */
    #if configUSE_TICKLESS_IDLE == 2
    {
        ulTimerCountsForOneTick = (configSTIMER_CLOCK_HZ /configTICK_RATE_HZ) ; //( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
#ifdef AM_FREERTOS_STIMER_BACKUP
        xMaximumPossibleSuppressedTicks = portMAX_32_BIT_NUMBER / ulTimerCountsForOneTick - 1;
   142ba:	4b18      	ldr	r3, [pc, #96]	; (1431c <vPortSetupTimerInterrupt+0x64>)
        ulTimerCountsForOneTick = (configSTIMER_CLOCK_HZ /configTICK_RATE_HZ) ; //( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
   142bc:	4d18      	ldr	r5, [pc, #96]	; (14320 <vPortSetupTimerInterrupt+0x68>)
        xMaximumPossibleSuppressedTicks = portMAX_32_BIT_NUMBER / ulTimerCountsForOneTick - 1;
   142be:	4a19      	ldr	r2, [pc, #100]	; (14324 <vPortSetupTimerInterrupt+0x6c>)
   142c0:	601a      	str	r2, [r3, #0]
        ulTimerCountsForOneTick = (configSTIMER_CLOCK_HZ /configTICK_RATE_HZ) ; //( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
   142c2:	2120      	movs	r1, #32
    #endif /* configUSE_TICKLESS_IDLE */
    //
    //
    //
#ifdef AM_FREERTOS_STIMER_BACKUP
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_COMPAREA | AM_HAL_STIMER_INT_COMPAREB);
   142c4:	2003      	movs	r0, #3
        ulTimerCountsForOneTick = (configSTIMER_CLOCK_HZ /configTICK_RATE_HZ) ; //( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
   142c6:	6029      	str	r1, [r5, #0]
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_COMPAREA | AM_HAL_STIMER_INT_COMPAREB);
   142c8:	f00f fb24 	bl	23914 <am_hal_stimer_int_enable>
   142cc:	4b16      	ldr	r3, [pc, #88]	; (14328 <vPortSetupTimerInterrupt+0x70>)
   142ce:	22e0      	movs	r2, #224	; 0xe0
   142d0:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   142d4:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   142d8:	6019      	str	r1, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   142da:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   142de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   142e2:	601a      	str	r2, [r3, #0]
#endif // AM_CMSIS_REGS
#endif
    //
    // Configure the STIMER
    //
    oldCfg = am_hal_stimer_config(AM_HAL_STIMER_CFG_FREEZE);
   142e4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   142e8:	f00f fa9e 	bl	23828 <am_hal_stimer_config>
   142ec:	4604      	mov	r4, r0
    g_lastSTimerVal = am_hal_stimer_counter_get();
   142ee:	f00f faa5 	bl	2383c <am_hal_stimer_counter_get>
   142f2:	4b0e      	ldr	r3, [pc, #56]	; (1432c <vPortSetupTimerInterrupt+0x74>)
    am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
   142f4:	6829      	ldr	r1, [r5, #0]
    g_lastSTimerVal = am_hal_stimer_counter_get();
   142f6:	6018      	str	r0, [r3, #0]
    am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
   142f8:	2000      	movs	r0, #0
   142fa:	f00f faaf 	bl	2385c <am_hal_stimer_compare_delta_set>
#ifdef AM_FREERTOS_STIMER_BACKUP
    am_hal_stimer_compare_delta_set(1, ulTimerCountsForOneTick+1);
   142fe:	6829      	ldr	r1, [r5, #0]
   14300:	2001      	movs	r0, #1
   14302:	4401      	add	r1, r0
   14304:	f00f faaa 	bl	2385c <am_hal_stimer_compare_delta_set>
#if AM_CMSIS_REGS
    am_hal_stimer_config((oldCfg & ~(AM_HAL_STIMER_CFG_FREEZE | CTIMER_STCFG_CLKSEL_Msk)) | configSTIMER_CLOCK | AM_HAL_STIMER_CFG_COMPARE_A_ENABLE | AM_HAL_STIMER_CFG_COMPARE_B_ENABLE);
   14308:	4809      	ldr	r0, [pc, #36]	; (14330 <vPortSetupTimerInterrupt+0x78>)
   1430a:	4020      	ands	r0, r4
   1430c:	f440 7040 	orr.w	r0, r0, #768	; 0x300
    //
    am_hal_ctimer_start(configCTIMER_NUM, AM_HAL_CTIMER_BOTH);


#endif // AM_FREERTOS_USE_STIMER_FOR_TICK
}
   14310:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_stimer_config((oldCfg & ~(AM_HAL_STIMER_CFG_FREEZE | CTIMER_STCFG_CLKSEL_Msk)) | configSTIMER_CLOCK | AM_HAL_STIMER_CFG_COMPARE_A_ENABLE | AM_HAL_STIMER_CFG_COMPARE_B_ENABLE);
   14314:	f040 0003 	orr.w	r0, r0, #3
   14318:	f00f ba86 	b.w	23828 <am_hal_stimer_config>
   1431c:	10004df8 	.word	0x10004df8
   14320:	10004df4 	.word	0x10004df4
   14324:	07fffffe 	.word	0x07fffffe
   14328:	e000e100 	.word	0xe000e100
   1432c:	10004de8 	.word	0x10004de8
   14330:	7ffffcf0 	.word	0x7ffffcf0

00014334 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
   14334:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   14338:	4a36      	ldr	r2, [pc, #216]	; (14414 <xPortStartScheduler+0xe0>)
   1433a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
   1433e:	4291      	cmp	r1, r2
   14340:	d02b      	beq.n	1439a <xPortStartScheduler+0x66>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
   14342:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
   14346:	4b34      	ldr	r3, [pc, #208]	; (14418 <xPortStartScheduler+0xe4>)
   14348:	429a      	cmp	r2, r3
   1434a:	d027      	beq.n	1439c <xPortStartScheduler+0x68>
{
   1434c:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   1434e:	4b33      	ldr	r3, [pc, #204]	; (1441c <xPortStartScheduler+0xe8>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   14350:	4933      	ldr	r1, [pc, #204]	; (14420 <xPortStartScheduler+0xec>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   14352:	781a      	ldrb	r2, [r3, #0]
{
   14354:	b084      	sub	sp, #16
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   14356:	b2d2      	uxtb	r2, r2
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
   14358:	20ff      	movs	r0, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   1435a:	9202      	str	r2, [sp, #8]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
   1435c:	7018      	strb	r0, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
   1435e:	781b      	ldrb	r3, [r3, #0]
   14360:	b2db      	uxtb	r3, r3
   14362:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   14366:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   1436a:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   1436e:	f003 0380 	and.w	r3, r3, #128	; 0x80
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   14372:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   14374:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   14376:	d50f      	bpl.n	14398 <xPortStartScheduler+0x64>
   14378:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
   1437a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1437e:	005b      	lsls	r3, r3, #1
   14380:	b2db      	uxtb	r3, r3
   14382:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   14386:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1438a:	061b      	lsls	r3, r3, #24
   1438c:	4611      	mov	r1, r2
   1438e:	f102 32ff 	add.w	r2, r2, #4294967295
   14392:	d4f2      	bmi.n	1437a <xPortStartScheduler+0x46>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
   14394:	2904      	cmp	r1, #4
   14396:	d002      	beq.n	1439e <xPortStartScheduler+0x6a>
   14398:	e7fe      	b.n	14398 <xPortStartScheduler+0x64>
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
   1439a:	e7fe      	b.n	1439a <xPortStartScheduler+0x66>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
   1439c:	e7fe      	b.n	1439c <xPortStartScheduler+0x68>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   1439e:	9b02      	ldr	r3, [sp, #8]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   143a0:	4920      	ldr	r1, [pc, #128]	; (14424 <xPortStartScheduler+0xf0>)
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   143a2:	4a1e      	ldr	r2, [pc, #120]	; (1441c <xPortStartScheduler+0xe8>)
	uxCriticalNesting = 0;
   143a4:	4d20      	ldr	r5, [pc, #128]	; (14428 <xPortStartScheduler+0xf4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   143a6:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   143aa:	f44f 6080 	mov.w	r0, #1024	; 0x400
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   143ae:	b2db      	uxtb	r3, r3
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   143b0:	6008      	str	r0, [r1, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   143b2:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   143b4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
   143b8:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
   143bc:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   143c0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
   143c4:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
   143c8:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	uxCriticalNesting = 0;
   143cc:	2600      	movs	r6, #0
	vPortSetupTimerInterrupt();
   143ce:	f7ff ff73 	bl	142b8 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
   143d2:	602e      	str	r6, [r5, #0]
	vPortEnableVFP();
   143d4:	f7ff fdea 	bl	13fac <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
   143d8:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
   143dc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   143e0:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
   143e4:	f7ff fdce 	bl	13f84 <prvPortStartFirstTask>
	vTaskSwitchContext();
   143e8:	f00c fb98 	bl	20b1c <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
   143ec:	682b      	ldr	r3, [r5, #0]
volatile uint32_t ulDummy = 0;
   143ee:	9603      	str	r6, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
   143f0:	3301      	adds	r3, #1
   143f2:	d000      	beq.n	143f6 <xPortStartScheduler+0xc2>
   143f4:	e7fe      	b.n	143f4 <xPortStartScheduler+0xc0>
	__asm volatile
   143f6:	f04f 0380 	mov.w	r3, #128	; 0x80
   143fa:	f383 8811 	msr	BASEPRI, r3
   143fe:	f3bf 8f6f 	isb	sy
   14402:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
   14406:	9b03      	ldr	r3, [sp, #12]
   14408:	2b00      	cmp	r3, #0
   1440a:	d0fc      	beq.n	14406 <xPortStartScheduler+0xd2>
}
   1440c:	2000      	movs	r0, #0
   1440e:	b004      	add	sp, #16
   14410:	bd70      	pop	{r4, r5, r6, pc}
   14412:	bf00      	nop
   14414:	410fc271 	.word	0x410fc271
   14418:	410fc270 	.word	0x410fc270
   1441c:	e000e400 	.word	0xe000e400
   14420:	10004dec 	.word	0x10004dec
   14424:	10004df0 	.word	0x10004df0
   14428:	10002b7c 	.word	0x10002b7c

0001442c <AppDbInit>:
{
#ifdef AM_BLE_USE_NVM
    AppCopyRecListInNvm(pAppDbNewRec);
#endif
  return;
}
   1442c:	4770      	bx	lr
   1442e:	bf00      	nop

00014430 <AppDbNewRecord>:
 *
 *  \return Database record handle.
 */
/*************************************************************************************************/
appDbHdl_t AppDbNewRecord(uint8_t addrType, uint8_t *pAddr, bool_t master_role)
{
   14430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t     i;

  /* find a free record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
  {
    if (!pRec->inUse)
   14432:	4b19      	ldr	r3, [pc, #100]	; (14498 <AppDbNewRecord+0x68>)
   14434:	f893 402f 	ldrb.w	r4, [r3, #47]	; 0x2f
{
   14438:	4607      	mov	r7, r0
   1443a:	460e      	mov	r6, r1
   1443c:	4615      	mov	r5, r2
    if (!pRec->inUse)
   1443e:	b32c      	cbz	r4, 1448c <AppDbNewRecord+0x5c>
   14440:	f893 20f3 	ldrb.w	r2, [r3, #243]	; 0xf3
   14444:	b322      	cbz	r2, 14490 <AppDbNewRecord+0x60>
   14446:	f893 21b7 	ldrb.w	r2, [r3, #439]	; 0x1b7
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1444a:	f503 74c4 	add.w	r4, r3, #392	; 0x188
    if (!pRec->inUse)
   1444e:	b14a      	cbz	r2, 14464 <AppDbNewRecord+0x34>

  /* if all records were allocated */
  if (i == 0)
  {
    /* overwrite a record */
    pRec = pAppDbNewRec;
   14450:	4a12      	ldr	r2, [pc, #72]	; (1449c <AppDbNewRecord+0x6c>)
   14452:	6814      	ldr	r4, [r2, #0]

    /* get next record to overwrite */
    pAppDbNewRec++;
    if (pAppDbNewRec == &appDb.rec[APP_DB_NUM_RECS])
   14454:	f503 7013 	add.w	r0, r3, #588	; 0x24c
    pAppDbNewRec++;
   14458:	f104 01c4 	add.w	r1, r4, #196	; 0xc4
    {
      pAppDbNewRec = appDb.rec;
   1445c:	4281      	cmp	r1, r0
   1445e:	bf18      	it	ne
   14460:	460b      	movne	r3, r1
   14462:	6013      	str	r3, [r2, #0]
    }
  }

  /* initialize record */
  memset(pRec, 0, sizeof(appDbRec_t));
   14464:	22c4      	movs	r2, #196	; 0xc4
   14466:	2100      	movs	r1, #0
   14468:	4620      	mov	r0, r4
   1446a:	f00c ffef 	bl	2144c <memset>
  pRec->inUse = TRUE;
   1446e:	2301      	movs	r3, #1
   14470:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  pRec->addrType = addrType;
  BdaCpy(pRec->peerAddr, pAddr);
   14474:	4620      	mov	r0, r4
  pRec->addrType = addrType;
   14476:	71a7      	strb	r7, [r4, #6]
  BdaCpy(pRec->peerAddr, pAddr);
   14478:	4631      	mov	r1, r6
   1447a:	f007 ff6b 	bl	1c354 <BdaCpy>
  pRec->peerAddedToRl = FALSE;
   1447e:	2300      	movs	r3, #0
   14480:	f8a4 3031 	strh.w	r3, [r4, #49]	; 0x31
  pRec->peerRpao = FALSE;
  pRec->master_role = master_role;
   14484:	f884 50c3 	strb.w	r5, [r4, #195]	; 0xc3

  return (appDbHdl_t) pRec;
}
   14488:	4620      	mov	r0, r4
   1448a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  appDbRec_t  *pRec = appDb.rec;
   1448c:	461c      	mov	r4, r3
   1448e:	e7e9      	b.n	14464 <AppDbNewRecord+0x34>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   14490:	f103 04c4 	add.w	r4, r3, #196	; 0xc4
   14494:	e7e6      	b.n	14464 <AppDbNewRecord+0x34>
   14496:	bf00      	nop
   14498:	10004dfc 	.word	0x10004dfc
   1449c:	10002b80 	.word	0x10002b80

000144a0 <AppDbGetNextRecord>:
appDbHdl_t AppDbGetNextRecord(appDbHdl_t hdl)
{
  appDbRec_t  *pRec;

  /* if first record is requested */
  if (hdl == APP_DB_HDL_NONE)
   144a0:	b198      	cbz	r0, 144ca <AppDbGetNextRecord+0x2a>
  uint8_t     i;

  /* see if record is in database record list */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
  {
    if (pRec->inUse && pRec->valid && (pRec == ((appDbRec_t *)hdl)))
   144a2:	4a12      	ldr	r2, [pc, #72]	; (144ec <AppDbGetNextRecord+0x4c>)
   144a4:	f892 302f 	ldrb.w	r3, [r2, #47]	; 0x2f
   144a8:	b123      	cbz	r3, 144b4 <AppDbGetNextRecord+0x14>
   144aa:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
   144ae:	b10b      	cbz	r3, 144b4 <AppDbGetNextRecord+0x14>
   144b0:	4290      	cmp	r0, r2
   144b2:	d018      	beq.n	144e6 <AppDbGetNextRecord+0x46>
   144b4:	f892 30f3 	ldrb.w	r3, [r2, #243]	; 0xf3
   144b8:	b12b      	cbz	r3, 144c6 <AppDbGetNextRecord+0x26>
   144ba:	f892 30f4 	ldrb.w	r3, [r2, #244]	; 0xf4
   144be:	b113      	cbz	r3, 144c6 <AppDbGetNextRecord+0x26>
   144c0:	4b0b      	ldr	r3, [pc, #44]	; (144f0 <AppDbGetNextRecord+0x50>)
   144c2:	4298      	cmp	r0, r3
   144c4:	d00f      	beq.n	144e6 <AppDbGetNextRecord+0x46>
    return APP_DB_HDL_NONE;
   144c6:	2000      	movs	r0, #0
   144c8:	4770      	bx	lr
    pRec = appDb.rec;
   144ca:	4808      	ldr	r0, [pc, #32]	; (144ec <AppDbGetNextRecord+0x4c>)
  while (pRec < &appDb.rec[APP_DB_NUM_RECS])
   144cc:	4a09      	ldr	r2, [pc, #36]	; (144f4 <AppDbGetNextRecord+0x54>)
    if (pRec->inUse && pRec->valid)
   144ce:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
   144d2:	b113      	cbz	r3, 144da <AppDbGetNextRecord+0x3a>
   144d4:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   144d8:	b923      	cbnz	r3, 144e4 <AppDbGetNextRecord+0x44>
    pRec++;
   144da:	30c4      	adds	r0, #196	; 0xc4
  while (pRec < &appDb.rec[APP_DB_NUM_RECS])
   144dc:	4290      	cmp	r0, r2
   144de:	d3f6      	bcc.n	144ce <AppDbGetNextRecord+0x2e>
    return APP_DB_HDL_NONE;
   144e0:	2000      	movs	r0, #0
   144e2:	4770      	bx	lr
}
   144e4:	4770      	bx	lr
    pRec++;
   144e6:	30c4      	adds	r0, #196	; 0xc4
  while (pRec < &appDb.rec[APP_DB_NUM_RECS])
   144e8:	e7f0      	b.n	144cc <AppDbGetNextRecord+0x2c>
   144ea:	bf00      	nop
   144ec:	10004dfc 	.word	0x10004dfc
   144f0:	10004ec0 	.word	0x10004ec0
   144f4:	10005048 	.word	0x10005048

000144f8 <AppDbValidateRecord>:
  ((appDbRec_t *) hdl)->valid = TRUE;
   144f8:	2301      	movs	r3, #1
   144fa:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  ((appDbRec_t *) hdl)->keyValidMask = keyMask;
   144fe:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
}
   14502:	4770      	bx	lr

00014504 <AppDbCheckValidRecord>:
  if (((appDbRec_t *) hdl)->valid == FALSE)
   14504:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   14508:	b90b      	cbnz	r3, 1450e <AppDbCheckValidRecord+0xa>
  ((appDbRec_t *) hdl)->inUse = FALSE;
   1450a:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
}
   1450e:	4770      	bx	lr

00014510 <AppDbCheckBonded>:
  uint8_t     i;

  /* find a record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
  {
    if (pRec->inUse && !pRec->master_role)
   14510:	4b0b      	ldr	r3, [pc, #44]	; (14540 <AppDbCheckBonded+0x30>)
   14512:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
   14516:	b112      	cbz	r2, 1451e <AppDbCheckBonded+0xe>
   14518:	f893 20c3 	ldrb.w	r2, [r3, #195]	; 0xc3
   1451c:	b172      	cbz	r2, 1453c <AppDbCheckBonded+0x2c>
   1451e:	f893 20f3 	ldrb.w	r2, [r3, #243]	; 0xf3
   14522:	b112      	cbz	r2, 1452a <AppDbCheckBonded+0x1a>
   14524:	f893 2187 	ldrb.w	r2, [r3, #391]	; 0x187
   14528:	b142      	cbz	r2, 1453c <AppDbCheckBonded+0x2c>
   1452a:	f893 01b7 	ldrb.w	r0, [r3, #439]	; 0x1b7
   1452e:	b130      	cbz	r0, 1453e <AppDbCheckBonded+0x2e>
   14530:	f893 024b 	ldrb.w	r0, [r3, #587]	; 0x24b
    {
      return TRUE;
    }
  }

  return FALSE;
   14534:	fab0 f080 	clz	r0, r0
   14538:	0940      	lsrs	r0, r0, #5
   1453a:	4770      	bx	lr
      return TRUE;
   1453c:	2001      	movs	r0, #1
}
   1453e:	4770      	bx	lr
   14540:	10004dfc 	.word	0x10004dfc

00014544 <AppDbDeleteAllRecords>:
  uint8_t     i;

  /* set in use to false for all records */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
  {
    pRec->inUse = FALSE;
   14544:	4b04      	ldr	r3, [pc, #16]	; (14558 <AppDbDeleteAllRecords+0x14>)
   14546:	2200      	movs	r2, #0
   14548:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   1454c:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3
   14550:	f883 21b7 	strb.w	r2, [r3, #439]	; 0x1b7
  }
}
   14554:	4770      	bx	lr
   14556:	bf00      	nop
   14558:	10004dfc 	.word	0x10004dfc

0001455c <AppDbFindByAddr>:
 *
 *  \return Database record handle or APP_DB_HDL_NONE if not found.
 */
/*************************************************************************************************/
appDbHdl_t AppDbFindByAddr(uint8_t addrType, uint8_t *pAddr)
{
   1455c:	b570      	push	{r4, r5, r6, lr}
  uint8_t     i;

  /* find matching record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
  {
    if (pRec->inUse && (pRec->addrType == peerAddrType) && BdaCmp(pRec->peerAddr, pAddr))
   1455e:	4c19      	ldr	r4, [pc, #100]	; (145c4 <AppDbFindByAddr+0x68>)
{
   14560:	460e      	mov	r6, r1
  uint8_t     peerAddrType = DmHostAddrType(addrType);
   14562:	f004 fc37 	bl	18dd4 <DmHostAddrType>
    if (pRec->inUse && (pRec->addrType == peerAddrType) && BdaCmp(pRec->peerAddr, pAddr))
   14566:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
  uint8_t     peerAddrType = DmHostAddrType(addrType);
   1456a:	4605      	mov	r5, r0
    if (pRec->inUse && (pRec->addrType == peerAddrType) && BdaCmp(pRec->peerAddr, pAddr))
   1456c:	b113      	cbz	r3, 14574 <AppDbFindByAddr+0x18>
   1456e:	79a3      	ldrb	r3, [r4, #6]
   14570:	4283      	cmp	r3, r0
   14572:	d00f      	beq.n	14594 <AppDbFindByAddr+0x38>
   14574:	f894 30f3 	ldrb.w	r3, [r4, #243]	; 0xf3
   14578:	b11b      	cbz	r3, 14582 <AppDbFindByAddr+0x26>
   1457a:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
   1457e:	42ab      	cmp	r3, r5
   14580:	d010      	beq.n	145a4 <AppDbFindByAddr+0x48>
   14582:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   14586:	b11b      	cbz	r3, 14590 <AppDbFindByAddr+0x34>
   14588:	f894 318e 	ldrb.w	r3, [r4, #398]	; 0x18e
   1458c:	42ab      	cmp	r3, r5
   1458e:	d011      	beq.n	145b4 <AppDbFindByAddr+0x58>
    {
      return (appDbHdl_t) pRec;
    }
  }

  return APP_DB_HDL_NONE;
   14590:	2000      	movs	r0, #0
}
   14592:	bd70      	pop	{r4, r5, r6, pc}
    if (pRec->inUse && (pRec->addrType == peerAddrType) && BdaCmp(pRec->peerAddr, pAddr))
   14594:	4631      	mov	r1, r6
   14596:	4620      	mov	r0, r4
   14598:	f007 fee2 	bl	1c360 <BdaCmp>
   1459c:	2800      	cmp	r0, #0
   1459e:	d0e9      	beq.n	14574 <AppDbFindByAddr+0x18>
  appDbRec_t  *pRec = appDb.rec;
   145a0:	4620      	mov	r0, r4
}
   145a2:	bd70      	pop	{r4, r5, r6, pc}
    if (pRec->inUse && (pRec->addrType == peerAddrType) && BdaCmp(pRec->peerAddr, pAddr))
   145a4:	4808      	ldr	r0, [pc, #32]	; (145c8 <AppDbFindByAddr+0x6c>)
   145a6:	4631      	mov	r1, r6
   145a8:	f007 feda 	bl	1c360 <BdaCmp>
   145ac:	2800      	cmp	r0, #0
   145ae:	d0e8      	beq.n	14582 <AppDbFindByAddr+0x26>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   145b0:	4805      	ldr	r0, [pc, #20]	; (145c8 <AppDbFindByAddr+0x6c>)
}
   145b2:	bd70      	pop	{r4, r5, r6, pc}
    if (pRec->inUse && (pRec->addrType == peerAddrType) && BdaCmp(pRec->peerAddr, pAddr))
   145b4:	4805      	ldr	r0, [pc, #20]	; (145cc <AppDbFindByAddr+0x70>)
   145b6:	4631      	mov	r1, r6
   145b8:	f007 fed2 	bl	1c360 <BdaCmp>
   145bc:	2800      	cmp	r0, #0
   145be:	d0e7      	beq.n	14590 <AppDbFindByAddr+0x34>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   145c0:	4802      	ldr	r0, [pc, #8]	; (145cc <AppDbFindByAddr+0x70>)
}
   145c2:	bd70      	pop	{r4, r5, r6, pc}
   145c4:	10004dfc 	.word	0x10004dfc
   145c8:	10004ec0 	.word	0x10004ec0
   145cc:	10004f84 	.word	0x10004f84

000145d0 <AppDbFindByLtkReq>:
 *
 *  \return Database record handle or APP_DB_HDL_NONE if not found.
 */
/*************************************************************************************************/
appDbHdl_t AppDbFindByLtkReq(uint16_t encDiversifier, uint8_t *pRandNum)
{
   145d0:	b570      	push	{r4, r5, r6, lr}
  uint8_t     i;

  /* find matching record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
  {
    if (pRec->inUse && (pRec->localLtk.ediv == encDiversifier) &&
   145d2:	4c1b      	ldr	r4, [pc, #108]	; (14640 <AppDbFindByLtkReq+0x70>)
   145d4:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
{
   145d8:	4605      	mov	r5, r0
   145da:	460e      	mov	r6, r1
    if (pRec->inUse && (pRec->localLtk.ediv == encDiversifier) &&
   145dc:	b11b      	cbz	r3, 145e6 <AppDbFindByLtkReq+0x16>
   145de:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
   145e2:	4283      	cmp	r3, r0
   145e4:	d00f      	beq.n	14606 <AppDbFindByLtkReq+0x36>
   145e6:	f894 30f3 	ldrb.w	r3, [r4, #243]	; 0xf3
   145ea:	b11b      	cbz	r3, 145f4 <AppDbFindByLtkReq+0x24>
   145ec:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
   145f0:	42ab      	cmp	r3, r5
   145f2:	d011      	beq.n	14618 <AppDbFindByLtkReq+0x48>
   145f4:	f894 01b7 	ldrb.w	r0, [r4, #439]	; 0x1b7
   145f8:	b120      	cbz	r0, 14604 <AppDbFindByLtkReq+0x34>
   145fa:	f8b4 31d4 	ldrh.w	r3, [r4, #468]	; 0x1d4
   145fe:	42ab      	cmp	r3, r5
   14600:	d013      	beq.n	1462a <AppDbFindByLtkReq+0x5a>
    {
      return (appDbHdl_t) pRec;
    }
  }

  return APP_DB_HDL_NONE;
   14602:	2000      	movs	r0, #0
}
   14604:	bd70      	pop	{r4, r5, r6, pc}
        (memcmp(pRec->localLtk.rand, pRandNum, SMP_RAND8_LEN) == 0))
   14606:	2208      	movs	r2, #8
   14608:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1460c:	f00c feec 	bl	213e8 <memcmp>
    if (pRec->inUse && (pRec->localLtk.ediv == encDiversifier) &&
   14610:	2800      	cmp	r0, #0
   14612:	d1e8      	bne.n	145e6 <AppDbFindByLtkReq+0x16>
  appDbRec_t  *pRec = appDb.rec;
   14614:	4620      	mov	r0, r4
}
   14616:	bd70      	pop	{r4, r5, r6, pc}
        (memcmp(pRec->localLtk.rand, pRandNum, SMP_RAND8_LEN) == 0))
   14618:	480a      	ldr	r0, [pc, #40]	; (14644 <AppDbFindByLtkReq+0x74>)
   1461a:	2208      	movs	r2, #8
   1461c:	4631      	mov	r1, r6
   1461e:	f00c fee3 	bl	213e8 <memcmp>
    if (pRec->inUse && (pRec->localLtk.ediv == encDiversifier) &&
   14622:	2800      	cmp	r0, #0
   14624:	d1e6      	bne.n	145f4 <AppDbFindByLtkReq+0x24>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   14626:	4808      	ldr	r0, [pc, #32]	; (14648 <AppDbFindByLtkReq+0x78>)
}
   14628:	bd70      	pop	{r4, r5, r6, pc}
        (memcmp(pRec->localLtk.rand, pRandNum, SMP_RAND8_LEN) == 0))
   1462a:	2208      	movs	r2, #8
   1462c:	4631      	mov	r1, r6
   1462e:	4807      	ldr	r0, [pc, #28]	; (1464c <AppDbFindByLtkReq+0x7c>)
   14630:	f00c feda 	bl	213e8 <memcmp>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   14634:	4b06      	ldr	r3, [pc, #24]	; (14650 <AppDbFindByLtkReq+0x80>)
   14636:	2800      	cmp	r0, #0
   14638:	bf0c      	ite	eq
   1463a:	4618      	moveq	r0, r3
   1463c:	2000      	movne	r0, #0
}
   1463e:	bd70      	pop	{r4, r5, r6, pc}
   14640:	10004dfc 	.word	0x10004dfc
   14644:	10004f04 	.word	0x10004f04
   14648:	10004ec0 	.word	0x10004ec0
   1464c:	10004fc8 	.word	0x10004fc8
   14650:	10004f84 	.word	0x10004f84

00014654 <AppDbGetKey>:
dmSecKey_t *AppDbGetKey(appDbHdl_t hdl, uint8_t type, uint8_t *pSecLevel)
{
  dmSecKey_t *pKey = NULL;

  /* if key valid */
  if ((type & ((appDbRec_t *) hdl)->keyValidMask) != 0)
   14654:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
   14658:	400b      	ands	r3, r1
   1465a:	d008      	beq.n	1466e <AppDbGetKey+0x1a>
  {
    switch(type)
   1465c:	3901      	subs	r1, #1
   1465e:	2907      	cmp	r1, #7
   14660:	d805      	bhi.n	1466e <AppDbGetKey+0x1a>
   14662:	e8df f001 	tbb	[pc, r1]
   14666:	0d08      	.short	0x0d08
   14668:	04041204 	.word	0x04041204
   1466c:	0604      	.short	0x0604
   1466e:	2000      	movs	r0, #0
        break;
    }
  }

  return pKey;
}
   14670:	4770      	bx	lr
        pKey = (dmSecKey_t *)&((appDbRec_t *)hdl)->peerCsrk;
   14672:	301e      	adds	r0, #30
        break;
   14674:	4770      	bx	lr
        *pSecLevel = ((appDbRec_t *) hdl)->localLtkSecLevel;
   14676:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   1467a:	7013      	strb	r3, [r2, #0]
        pKey = (dmSecKey_t *) &((appDbRec_t *) hdl)->localLtk;
   1467c:	3034      	adds	r0, #52	; 0x34
        break;
   1467e:	4770      	bx	lr
        *pSecLevel = ((appDbRec_t *) hdl)->peerLtkSecLevel;
   14680:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
   14684:	7013      	strb	r3, [r2, #0]
        pKey = (dmSecKey_t *) &((appDbRec_t *) hdl)->peerLtk;
   14686:	3050      	adds	r0, #80	; 0x50
        break;
   14688:	4770      	bx	lr
        pKey = (dmSecKey_t *)&((appDbRec_t *)hdl)->peerIrk;
   1468a:	3007      	adds	r0, #7
        break;
   1468c:	4770      	bx	lr
   1468e:	bf00      	nop

00014690 <AppDbSetKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetKey(appDbHdl_t hdl, dmSecKeyIndEvt_t *pKey)
{
   14690:	b500      	push	{lr}
  switch(pKey->type)
   14692:	7f8a      	ldrb	r2, [r1, #30]
   14694:	3a01      	subs	r2, #1
{
   14696:	468e      	mov	lr, r1
   14698:	4603      	mov	r3, r0
  switch(pKey->type)
   1469a:	2a07      	cmp	r2, #7
   1469c:	d81f      	bhi.n	146de <AppDbSetKey+0x4e>
   1469e:	e8df f002 	tbb	[pc, r2]
   146a2:	045a      	.short	0x045a
   146a4:	1e1e351e 	.word	0x1e1e351e
   146a8:	201e      	.short	0x201e
      ((appDbRec_t *) hdl)->localLtkSecLevel = pKey->secLevel;
      ((appDbRec_t *) hdl)->localLtk = pKey->keyData.ltk;
      break;

    case DM_KEY_PEER_LTK:
      ((appDbRec_t *) hdl)->peerLtkSecLevel = pKey->secLevel;
   146aa:	f89e 201f 	ldrb.w	r2, [lr, #31]
   146ae:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
      ((appDbRec_t *) hdl)->peerLtk = pKey->keyData.ltk;
   146b2:	f8de 0004 	ldr.w	r0, [lr, #4]
   146b6:	f8de 1008 	ldr.w	r1, [lr, #8]
   146ba:	f8de 200c 	ldr.w	r2, [lr, #12]
   146be:	f103 0c50 	add.w	ip, r3, #80	; 0x50
   146c2:	f8de 3010 	ldr.w	r3, [lr, #16]
   146c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   146ca:	f8de 0014 	ldr.w	r0, [lr, #20]
   146ce:	f8de 1018 	ldr.w	r1, [lr, #24]
   146d2:	f8be 301c 	ldrh.w	r3, [lr, #28]
   146d6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   146da:	f8ac 3000 	strh.w	r3, [ip]
      break;

    default:
      break;
  }
}
   146de:	f85d fb04 	ldr.w	pc, [sp], #4
      ((appDbRec_t *)hdl)->peerCsrk = pKey->keyData.csrk;
   146e2:	f8de 2004 	ldr.w	r2, [lr, #4]
   146e6:	f8de 0008 	ldr.w	r0, [lr, #8]
   146ea:	f8de 100c 	ldr.w	r1, [lr, #12]
   146ee:	f8de c010 	ldr.w	ip, [lr, #16]
   146f2:	f8c3 201e 	str.w	r2, [r3, #30]
      ((appDbRec_t *)hdl)->peerSignCounter = 0;
   146f6:	2200      	movs	r2, #0
      ((appDbRec_t *)hdl)->peerCsrk = pKey->keyData.csrk;
   146f8:	f8c3 c02a 	str.w	ip, [r3, #42]	; 0x2a
   146fc:	f8c3 0022 	str.w	r0, [r3, #34]	; 0x22
   14700:	f8c3 1026 	str.w	r1, [r3, #38]	; 0x26
      ((appDbRec_t *)hdl)->peerSignCounter = 0;
   14704:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
   14708:	f85d fb04 	ldr.w	pc, [sp], #4
      ((appDbRec_t *)hdl)->peerIrk = pKey->keyData.irk;
   1470c:	f8de 2004 	ldr.w	r2, [lr, #4]
   14710:	f8de 000c 	ldr.w	r0, [lr, #12]
   14714:	f8de 1010 	ldr.w	r1, [lr, #16]
   14718:	f8de c008 	ldr.w	ip, [lr, #8]
   1471c:	f8c3 2007 	str.w	r2, [r3, #7]
   14720:	f8de 2014 	ldr.w	r2, [lr, #20]
   14724:	f8c3 000f 	str.w	r0, [r3, #15]
   14728:	f8c3 1013 	str.w	r1, [r3, #19]
   1472c:	f8be 0018 	ldrh.w	r0, [lr, #24]
   14730:	f89e 101a 	ldrb.w	r1, [lr, #26]
   14734:	f8c3 2017 	str.w	r2, [r3, #23]
      ((appDbRec_t *)hdl)->addrType = pKey->keyData.irk.addrType;
   14738:	f89e 201a 	ldrb.w	r2, [lr, #26]
   1473c:	719a      	strb	r2, [r3, #6]
      ((appDbRec_t *)hdl)->peerIrk = pKey->keyData.irk;
   1473e:	f8a3 001b 	strh.w	r0, [r3, #27]
   14742:	7759      	strb	r1, [r3, #29]
   14744:	f8c3 c00b 	str.w	ip, [r3, #11]
      BdaCpy(((appDbRec_t *)hdl)->peerAddr, pKey->keyData.irk.bdAddr);
   14748:	f10e 0114 	add.w	r1, lr, #20
   1474c:	4618      	mov	r0, r3
}
   1474e:	f85d eb04 	ldr.w	lr, [sp], #4
      BdaCpy(((appDbRec_t *)hdl)->peerAddr, pKey->keyData.irk.bdAddr);
   14752:	f007 bdff 	b.w	1c354 <BdaCpy>
      ((appDbRec_t *) hdl)->localLtkSecLevel = pKey->secLevel;
   14756:	f89e 201f 	ldrb.w	r2, [lr, #31]
   1475a:	f880 204e 	strb.w	r2, [r0, #78]	; 0x4e
      ((appDbRec_t *) hdl)->localLtk = pKey->keyData.ltk;
   1475e:	f8de 0004 	ldr.w	r0, [lr, #4]
   14762:	f8de 1008 	ldr.w	r1, [lr, #8]
   14766:	f8de 200c 	ldr.w	r2, [lr, #12]
   1476a:	f103 0c34 	add.w	ip, r3, #52	; 0x34
   1476e:	e7a8      	b.n	146c2 <AppDbSetKey+0x32>

00014770 <AppDbGetPeerDbHash>:
 */
/*************************************************************************************************/
uint8_t *AppDbGetPeerDbHash(appDbHdl_t hdl)
{
  return ((appDbRec_t *) hdl)->dbHash;
}
   14770:	3087      	adds	r0, #135	; 0x87
   14772:	4770      	bx	lr

00014774 <AppDbSetPeerDbHash>:
/*************************************************************************************************/
void AppDbSetPeerDbHash(appDbHdl_t hdl, uint8_t *pDbHash)
{
  WSF_ASSERT(pDbHash != NULL);

  memcpy(((appDbRec_t *) hdl)->dbHash, pDbHash, ATT_DATABASE_HASH_LEN);
   14774:	f8d1 c000 	ldr.w	ip, [r1]
   14778:	684a      	ldr	r2, [r1, #4]
   1477a:	688b      	ldr	r3, [r1, #8]
   1477c:	68c9      	ldr	r1, [r1, #12]
   1477e:	f8c0 1093 	str.w	r1, [r0, #147]	; 0x93
   14782:	f8c0 c087 	str.w	ip, [r0, #135]	; 0x87
   14786:	f8c0 208b 	str.w	r2, [r0, #139]	; 0x8b
   1478a:	f8c0 308f 	str.w	r3, [r0, #143]	; 0x8f
}
   1478e:	4770      	bx	lr

00014790 <AppDbIsCacheCheckedByHash>:
 */
/*************************************************************************************************/
bool_t AppDbIsCacheCheckedByHash(appDbHdl_t hdl)
{
  return ((appDbRec_t *) hdl)->cacheByHash;
}
   14790:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
   14794:	4770      	bx	lr
   14796:	bf00      	nop

00014798 <AppDbSetCacheByHash>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetCacheByHash(appDbHdl_t hdl, bool_t cacheByHash)
{
  ((appDbRec_t *) hdl)->cacheByHash = cacheByHash;
   14798:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
}
   1479c:	4770      	bx	lr
   1479e:	bf00      	nop

000147a0 <AppDbGetCccTbl>:
 */
/*************************************************************************************************/
uint16_t *AppDbGetCccTbl(appDbHdl_t hdl)
{
  return ((appDbRec_t *) hdl)->cccTbl;
}
   147a0:	306c      	adds	r0, #108	; 0x6c
   147a2:	4770      	bx	lr

000147a4 <AppDbSetCccTblValue>:
/*************************************************************************************************/
void AppDbSetCccTblValue(appDbHdl_t hdl, uint16_t idx, uint16_t value)
{
  WSF_ASSERT(idx < APP_DB_NUM_CCCD);

  ((appDbRec_t *) hdl)->cccTbl[idx] = value;
   147a4:	eb00 0141 	add.w	r1, r0, r1, lsl #1
   147a8:	f8a1 206c 	strh.w	r2, [r1, #108]	; 0x6c
  if(AppCheckBonded(connId))
  {
    AppStorePairingInfoInNVM(hdl);
  }
#endif
}
   147ac:	4770      	bx	lr
   147ae:	bf00      	nop

000147b0 <AppDbGetCsfRecord>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDbGetCsfRecord(appDbHdl_t hdl, uint8_t *pChangeAwareState, uint8_t **pCsf)
{
  *pChangeAwareState = ((appDbRec_t *)hdl)->changeAwareState;
   147b0:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
   147b4:	700b      	strb	r3, [r1, #0]
  *pCsf = ((appDbRec_t *) hdl)->csf;
   147b6:	3085      	adds	r0, #133	; 0x85
   147b8:	6010      	str	r0, [r2, #0]
}
   147ba:	4770      	bx	lr

000147bc <AppDbSetCsfRecord>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetCsfRecord(appDbHdl_t hdl, uint8_t changeAwareState, uint8_t *pCsf)
{
  if ((pCsf != NULL) && (hdl != APP_DB_HDL_NONE))
   147bc:	b12a      	cbz	r2, 147ca <AppDbSetCsfRecord+0xe>
   147be:	b120      	cbz	r0, 147ca <AppDbSetCsfRecord+0xe>
  {
    ((appDbRec_t *) hdl)->changeAwareState = changeAwareState;
   147c0:	f880 1084 	strb.w	r1, [r0, #132]	; 0x84
    memcpy(&((appDbRec_t *) hdl)->csf, pCsf, ATT_CSF_LEN);
   147c4:	7813      	ldrb	r3, [r2, #0]
   147c6:	f880 3085 	strb.w	r3, [r0, #133]	; 0x85
  }
}
   147ca:	4770      	bx	lr

000147cc <AppDbSetClientsChangeAwareState>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetClientsChangeAwareState(appDbHdl_t hdl, uint8_t state)
{
  if (hdl == APP_DB_HDL_NONE)
   147cc:	b110      	cbz	r0, 147d4 <AppDbSetClientsChangeAwareState+0x8>
      pRec->changeAwareState = state;
    }
  }
  else
  {
    ((appDbRec_t *) hdl)->changeAwareState = state;
   147ce:	f880 1084 	strb.w	r1, [r0, #132]	; 0x84
  }
}
   147d2:	4770      	bx	lr
      pRec->changeAwareState = state;
   147d4:	4b03      	ldr	r3, [pc, #12]	; (147e4 <AppDbSetClientsChangeAwareState+0x18>)
   147d6:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
   147da:	f883 1148 	strb.w	r1, [r3, #328]	; 0x148
   147de:	f883 120c 	strb.w	r1, [r3, #524]	; 0x20c
    for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   147e2:	4770      	bx	lr
   147e4:	10004dfc 	.word	0x10004dfc

000147e8 <AppDbGetDbHash>:
 */
/*************************************************************************************************/
uint8_t *AppDbGetDbHash(void)
{
  return appDb.dbHash;
}
   147e8:	4800      	ldr	r0, [pc, #0]	; (147ec <AppDbGetDbHash+0x4>)
   147ea:	4770      	bx	lr
   147ec:	1000505d 	.word	0x1000505d

000147f0 <AppDbSetDbHash>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetDbHash(uint8_t *pHash)
{
  if (pHash != NULL)
   147f0:	b168      	cbz	r0, 1480e <AppDbSetDbHash+0x1e>
  {
    memcpy(appDb.dbHash, pHash, ATT_DATABASE_HASH_LEN);
   147f2:	4b07      	ldr	r3, [pc, #28]	; (14810 <AppDbSetDbHash+0x20>)
   147f4:	f8d0 c000 	ldr.w	ip, [r0]
   147f8:	6841      	ldr	r1, [r0, #4]
   147fa:	6882      	ldr	r2, [r0, #8]
   147fc:	68c0      	ldr	r0, [r0, #12]
   147fe:	f8c3 026d 	str.w	r0, [r3, #621]	; 0x26d
   14802:	f8c3 c261 	str.w	ip, [r3, #609]	; 0x261
   14806:	f8c3 1265 	str.w	r1, [r3, #613]	; 0x265
   1480a:	f8c3 2269 	str.w	r2, [r3, #617]	; 0x269
  }
}
   1480e:	4770      	bx	lr
   14810:	10004dfc 	.word	0x10004dfc

00014814 <AppDbGetDiscStatus>:
 */
/*************************************************************************************************/
uint8_t AppDbGetDiscStatus(appDbHdl_t hdl)
{
  return ((appDbRec_t *) hdl)->discStatus;
}
   14814:	f890 00c2 	ldrb.w	r0, [r0, #194]	; 0xc2
   14818:	4770      	bx	lr
   1481a:	bf00      	nop

0001481c <AppDbSetDiscStatus>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetDiscStatus(appDbHdl_t hdl, uint8_t status)
{
  ((appDbRec_t *) hdl)->discStatus = status;
   1481c:	f880 10c2 	strb.w	r1, [r0, #194]	; 0xc2
}
   14820:	4770      	bx	lr
   14822:	bf00      	nop

00014824 <AppDbGetHdlList>:
 */
/*************************************************************************************************/
uint16_t *AppDbGetHdlList(appDbHdl_t hdl)
{
  return ((appDbRec_t *) hdl)->hdlList;
}
   14824:	3098      	adds	r0, #152	; 0x98
   14826:	4770      	bx	lr

00014828 <AppDbSetHdlList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetHdlList(appDbHdl_t hdl, uint16_t *pHdlList)
{
   14828:	b510      	push	{r4, lr}
  memcpy(((appDbRec_t *) hdl)->hdlList, pHdlList, sizeof(((appDbRec_t *) hdl)->hdlList));
   1482a:	3098      	adds	r0, #152	; 0x98
   1482c:	f101 0320 	add.w	r3, r1, #32
   14830:	f8d1 e000 	ldr.w	lr, [r1]
   14834:	f8d1 c004 	ldr.w	ip, [r1, #4]
   14838:	688a      	ldr	r2, [r1, #8]
   1483a:	68cc      	ldr	r4, [r1, #12]
   1483c:	60c4      	str	r4, [r0, #12]
   1483e:	3110      	adds	r1, #16
   14840:	4299      	cmp	r1, r3
   14842:	f8c0 e000 	str.w	lr, [r0]
   14846:	f8c0 c004 	str.w	ip, [r0, #4]
   1484a:	6082      	str	r2, [r0, #8]
   1484c:	f100 0010 	add.w	r0, r0, #16
   14850:	d1ee      	bne.n	14830 <AppDbSetHdlList+0x8>
   14852:	680b      	ldr	r3, [r1, #0]
   14854:	684a      	ldr	r2, [r1, #4]
   14856:	6042      	str	r2, [r0, #4]
   14858:	6003      	str	r3, [r0, #0]
   1485a:	890b      	ldrh	r3, [r1, #8]
   1485c:	8103      	strh	r3, [r0, #8]
}
   1485e:	bd10      	pop	{r4, pc}

00014860 <AppDbGetPeerAddrRes>:
 */
/*************************************************************************************************/
bool_t AppDbGetPeerAddrRes(appDbHdl_t hdl)
{
  return ((appDbRec_t *)hdl)->peerAddrRes;
}
   14860:	f890 004f 	ldrb.w	r0, [r0, #79]	; 0x4f
   14864:	4770      	bx	lr
   14866:	bf00      	nop

00014868 <AppDbSetPeerAddrRes>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetPeerAddrRes(appDbHdl_t hdl, uint8_t addrRes)
{
  ((appDbRec_t *)hdl)->peerAddrRes = addrRes;
   14868:	f880 104f 	strb.w	r1, [r0, #79]	; 0x4f
}
   1486c:	4770      	bx	lr
   1486e:	bf00      	nop

00014870 <AppDbGetPeerSignCounter>:
 */
/*************************************************************************************************/
uint32_t AppDbGetPeerSignCounter(appDbHdl_t hdl)
{
  return ((appDbRec_t *)hdl)->peerSignCounter;
}
   14870:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   14874:	4770      	bx	lr
   14876:	bf00      	nop

00014878 <AppDbSetPeerSignCounter>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetPeerSignCounter(appDbHdl_t hdl, uint32_t signCounter)
{
  ((appDbRec_t *)hdl)->peerSignCounter = signCounter;
   14878:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
}
   1487c:	4770      	bx	lr
   1487e:	bf00      	nop

00014880 <AppDbGetPeerAddedToRl>:
 */
/*************************************************************************************************/
bool_t AppDbGetPeerAddedToRl(appDbHdl_t hdl)
{
  return ((appDbRec_t *)hdl)->peerAddedToRl;
}
   14880:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
   14884:	4770      	bx	lr
   14886:	bf00      	nop

00014888 <AppDbSetPeerAddedToRl>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetPeerAddedToRl(appDbHdl_t hdl, bool_t peerAddedToRl)
{
  ((appDbRec_t *)hdl)->peerAddedToRl = peerAddedToRl;
   14888:	f880 1031 	strb.w	r1, [r0, #49]	; 0x31
}
   1488c:	4770      	bx	lr
   1488e:	bf00      	nop

00014890 <AppDbGetPeerRpao>:
 */
/*************************************************************************************************/
bool_t AppDbGetPeerRpao(appDbHdl_t hdl)
{
  return ((appDbRec_t *)hdl)->peerRpao;
}
   14890:	f890 0032 	ldrb.w	r0, [r0, #50]	; 0x32
   14894:	4770      	bx	lr
   14896:	bf00      	nop

00014898 <AppDbSetPeerRpao>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetPeerRpao(appDbHdl_t hdl, bool_t peerRpao)
{
  ((appDbRec_t *)hdl)->peerRpao = peerRpao;
   14898:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
}
   1489c:	4770      	bx	lr
   1489e:	bf00      	nop

000148a0 <AppUiAction>:
 *  \return None.
 */
/*************************************************************************************************/
void AppUiAction(uint8_t event)
{
  switch (event)
   148a0:	1e43      	subs	r3, r0, #1
{
   148a2:	b510      	push	{r4, lr}
   148a4:	4604      	mov	r4, r0
  switch (event)
   148a6:	2b19      	cmp	r3, #25
   148a8:	d811      	bhi.n	148ce <AppUiAction+0x2e>
   148aa:	e8df f003 	tbb	[pc, r3]
   148ae:	1074      	.short	0x1074
   148b0:	64686c70 	.word	0x64686c70
   148b4:	54585c60 	.word	0x54585c60
   148b8:	44484c50 	.word	0x44484c50
   148bc:	34383c40 	.word	0x34383c40
   148c0:	24282c30 	.word	0x24282c30
   148c4:	0d181c20 	.word	0x0d181c20
    case APP_UI_PER_ADV_SYNC_EST_IND:
      APP_TRACE_INFO0(">>> Periodic advertising sync established <<<");
      break;

    case APP_UI_PER_ADV_SYNC_LOST_IND:
      APP_TRACE_INFO0(">>> Periodic advertising sync lost <<<");
   148c8:	4835      	ldr	r0, [pc, #212]	; (149a0 <AppUiAction+0x100>)
   148ca:	f7ff fb23 	bl	13f14 <WsfTrace>

    default:
      break;
  }

  if (appUiCbackTbl.actionCback)
   148ce:	4b35      	ldr	r3, [pc, #212]	; (149a4 <AppUiAction+0x104>)
   148d0:	685b      	ldr	r3, [r3, #4]
   148d2:	b11b      	cbz	r3, 148dc <AppUiAction+0x3c>
  {
    (*appUiCbackTbl.actionCback)(event);
   148d4:	4620      	mov	r0, r4
  }
}
   148d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    (*appUiCbackTbl.actionCback)(event);
   148da:	4718      	bx	r3
}
   148dc:	bd10      	pop	{r4, pc}
      APP_TRACE_INFO0(">>> Periodic advertising sync established <<<");
   148de:	4832      	ldr	r0, [pc, #200]	; (149a8 <AppUiAction+0x108>)
   148e0:	f7ff fb18 	bl	13f14 <WsfTrace>
      break;
   148e4:	e7f3      	b.n	148ce <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Periodic advertising set stopped <<<");
   148e6:	4831      	ldr	r0, [pc, #196]	; (149ac <AppUiAction+0x10c>)
   148e8:	f7ff fb14 	bl	13f14 <WsfTrace>
      break;
   148ec:	e7ef      	b.n	148ce <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Periodic advertising set started <<<");
   148ee:	4830      	ldr	r0, [pc, #192]	; (149b0 <AppUiAction+0x110>)
   148f0:	f7ff fb10 	bl	13f14 <WsfTrace>
      break;
   148f4:	e7eb      	b.n	148ce <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Extended scanning stopped <<<");
   148f6:	482f      	ldr	r0, [pc, #188]	; (149b4 <AppUiAction+0x114>)
   148f8:	f7ff fb0c 	bl	13f14 <WsfTrace>
      break;
   148fc:	e7e7      	b.n	148ce <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Extended scanning started <<<");
   148fe:	482e      	ldr	r0, [pc, #184]	; (149b8 <AppUiAction+0x118>)
   14900:	f7ff fb08 	bl	13f14 <WsfTrace>
      break;
   14904:	e7e3      	b.n	148ce <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Scan request received <<<");
   14906:	482d      	ldr	r0, [pc, #180]	; (149bc <AppUiAction+0x11c>)
   14908:	f7ff fb04 	bl	13f14 <WsfTrace>
      break;
   1490c:	e7df      	b.n	148ce <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Advertising sets stopped <<<");
   1490e:	482c      	ldr	r0, [pc, #176]	; (149c0 <AppUiAction+0x120>)
   14910:	f7ff fb00 	bl	13f14 <WsfTrace>
      break;
   14914:	e7db      	b.n	148ce <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Advertising sets started <<<");
   14916:	482b      	ldr	r0, [pc, #172]	; (149c4 <AppUiAction+0x124>)
   14918:	f7ff fafc 	bl	13f14 <WsfTrace>
      break;
   1491c:	e7d7      	b.n	148ce <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> High alert <<<");
   1491e:	482a      	ldr	r0, [pc, #168]	; (149c8 <AppUiAction+0x128>)
   14920:	f7ff faf8 	bl	13f14 <WsfTrace>
      break;
   14924:	e7d3      	b.n	148ce <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Low alert <<<");
   14926:	4829      	ldr	r0, [pc, #164]	; (149cc <AppUiAction+0x12c>)
   14928:	f7ff faf4 	bl	13f14 <WsfTrace>
      break;
   1492c:	e7cf      	b.n	148ce <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Cancel a low or high alert <<<");
   1492e:	4828      	ldr	r0, [pc, #160]	; (149d0 <AppUiAction+0x130>)
   14930:	f7ff faf0 	bl	13f14 <WsfTrace>
      break;
   14934:	e7cb      	b.n	148ce <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Prompt user to enter passkey <<<");
   14936:	4827      	ldr	r0, [pc, #156]	; (149d4 <AppUiAction+0x134>)
   14938:	f7ff faec 	bl	13f14 <WsfTrace>
      break;
   1493c:	e7c7      	b.n	148ce <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Encryption failed <<<");
   1493e:	4826      	ldr	r0, [pc, #152]	; (149d8 <AppUiAction+0x138>)
   14940:	f7ff fae8 	bl	13f14 <WsfTrace>
      break;
   14944:	e7c3      	b.n	148ce <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Connection encrypted <<<");
   14946:	4825      	ldr	r0, [pc, #148]	; (149dc <AppUiAction+0x13c>)
   14948:	f7ff fae4 	bl	13f14 <WsfTrace>
      break;
   1494c:	e7bf      	b.n	148ce <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Pairing failed <<<");
   1494e:	4824      	ldr	r0, [pc, #144]	; (149e0 <AppUiAction+0x140>)
   14950:	f7ff fae0 	bl	13f14 <WsfTrace>
      break;
   14954:	e7bb      	b.n	148ce <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Pairing completed successfully <<<");
   14956:	4823      	ldr	r0, [pc, #140]	; (149e4 <AppUiAction+0x144>)
   14958:	f7ff fadc 	bl	13f14 <WsfTrace>
      break;
   1495c:	e7b7      	b.n	148ce <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Connection closed <<<");
   1495e:	4822      	ldr	r0, [pc, #136]	; (149e8 <AppUiAction+0x148>)
   14960:	f7ff fad8 	bl	13f14 <WsfTrace>
      break;
   14964:	e7b3      	b.n	148ce <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Connection opened <<<");
   14966:	4821      	ldr	r0, [pc, #132]	; (149ec <AppUiAction+0x14c>)
   14968:	f7ff fad4 	bl	13f14 <WsfTrace>
      break;
   1496c:	e7af      	b.n	148ce <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Scan data received from peer <<<");
   1496e:	4820      	ldr	r0, [pc, #128]	; (149f0 <AppUiAction+0x150>)
   14970:	f7ff fad0 	bl	13f14 <WsfTrace>
      break;
   14974:	e7ab      	b.n	148ce <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Scanning stopped <<<");
   14976:	481f      	ldr	r0, [pc, #124]	; (149f4 <AppUiAction+0x154>)
   14978:	f7ff facc 	bl	13f14 <WsfTrace>
      break;
   1497c:	e7a7      	b.n	148ce <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Scanning started <<<");
   1497e:	481e      	ldr	r0, [pc, #120]	; (149f8 <AppUiAction+0x158>)
   14980:	f7ff fac8 	bl	13f14 <WsfTrace>
      break;
   14984:	e7a3      	b.n	148ce <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Advertising stopped <<<");
   14986:	481d      	ldr	r0, [pc, #116]	; (149fc <AppUiAction+0x15c>)
   14988:	f7ff fac4 	bl	13f14 <WsfTrace>
      break;
   1498c:	e79f      	b.n	148ce <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Advertising started <<<");
   1498e:	481c      	ldr	r0, [pc, #112]	; (14a00 <AppUiAction+0x160>)
   14990:	f7ff fac0 	bl	13f14 <WsfTrace>
      break;
   14994:	e79b      	b.n	148ce <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Reset complete <<<");
   14996:	481b      	ldr	r0, [pc, #108]	; (14a04 <AppUiAction+0x164>)
   14998:	f7ff fabc 	bl	13f14 <WsfTrace>
      break;
   1499c:	e797      	b.n	148ce <AppUiAction+0x2e>
   1499e:	bf00      	nop
   149a0:	00024688 	.word	0x00024688
   149a4:	10005070 	.word	0x10005070
   149a8:	00024658 	.word	0x00024658
   149ac:	0002462c 	.word	0x0002462c
   149b0:	00024600 	.word	0x00024600
   149b4:	000245dc 	.word	0x000245dc
   149b8:	000245b8 	.word	0x000245b8
   149bc:	00024598 	.word	0x00024598
   149c0:	00024574 	.word	0x00024574
   149c4:	00024550 	.word	0x00024550
   149c8:	0002453c 	.word	0x0002453c
   149cc:	00024528 	.word	0x00024528
   149d0:	00024504 	.word	0x00024504
   149d4:	000244dc 	.word	0x000244dc
   149d8:	000244c0 	.word	0x000244c0
   149dc:	000244a0 	.word	0x000244a0
   149e0:	00024488 	.word	0x00024488
   149e4:	00024460 	.word	0x00024460
   149e8:	00024444 	.word	0x00024444
   149ec:	00024428 	.word	0x00024428
   149f0:	00024400 	.word	0x00024400
   149f4:	000243e4 	.word	0x000243e4
   149f8:	000243c8 	.word	0x000243c8
   149fc:	000243ac 	.word	0x000243ac
   14a00:	00024390 	.word	0x00024390
   14a04:	00024378 	.word	0x00024378

00014a08 <AppUiDisplayPasskey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiDisplayPasskey(uint32_t passkey)
{
   14a08:	4601      	mov	r1, r0
  APP_TRACE_INFO1(">>> Passkey: %d <<<", passkey);
   14a0a:	4801      	ldr	r0, [pc, #4]	; (14a10 <AppUiDisplayPasskey+0x8>)
   14a0c:	f7ff ba82 	b.w	13f14 <WsfTrace>
   14a10:	000246b0 	.word	0x000246b0

00014a14 <AppUiDisplayConfirmValue>:
*
*  \return None.
*/
/*************************************************************************************************/
void AppUiDisplayConfirmValue(uint32_t confirm)
{
   14a14:	4601      	mov	r1, r0
  APP_TRACE_INFO1(">>> Confirm Value: %d <<<", confirm);
   14a16:	4801      	ldr	r0, [pc, #4]	; (14a1c <AppUiDisplayConfirmValue+0x8>)
   14a18:	f7ff ba7c 	b.w	13f14 <WsfTrace>
   14a1c:	000246c4 	.word	0x000246c4

00014a20 <AppUiDisplayRssi>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiDisplayRssi(int8_t rssi)
{
   14a20:	4601      	mov	r1, r0
  APP_TRACE_INFO1(">>> RSSI: %d dBm <<<", rssi);
   14a22:	4801      	ldr	r0, [pc, #4]	; (14a28 <AppUiDisplayRssi+0x8>)
   14a24:	f7ff ba76 	b.w	13f14 <WsfTrace>
   14a28:	000246e0 	.word	0x000246e0

00014a2c <appUiTimerExpired>:
   14a2c:	4770      	bx	lr
   14a2e:	bf00      	nop

00014a30 <appUiBtnPoll>:
 *  \return None.
 */
/*************************************************************************************************/
void appUiBtnPoll(void)
{
  if (appUiCbackTbl.btnPollCback)
   14a30:	4b02      	ldr	r3, [pc, #8]	; (14a3c <appUiBtnPoll+0xc>)
   14a32:	689b      	ldr	r3, [r3, #8]
   14a34:	b103      	cbz	r3, 14a38 <appUiBtnPoll+0x8>
  {
    (*appUiCbackTbl.btnPollCback)();
   14a36:	4718      	bx	r3
  }
}
   14a38:	4770      	bx	lr
   14a3a:	bf00      	nop
   14a3c:	10005070 	.word	0x10005070

00014a40 <AppUiBtnPressed>:
 */
/*************************************************************************************************/
void AppUiBtnPressed(void)
{

}
   14a40:	4770      	bx	lr
   14a42:	bf00      	nop

00014a44 <AppUiBtnRegister>:
 *  \note   Registered by application to receive button events
 */
/*************************************************************************************************/
void AppUiBtnRegister(appUiBtnCback_t btnCback)
{
  appUiCbackTbl.btnCback = btnCback;
   14a44:	4b01      	ldr	r3, [pc, #4]	; (14a4c <AppUiBtnRegister+0x8>)
   14a46:	6018      	str	r0, [r3, #0]
}
   14a48:	4770      	bx	lr
   14a4a:	bf00      	nop
   14a4c:	10005070 	.word	0x10005070

00014a50 <AppUiBtnTest>:
 *  \return None.
 */
/*************************************************************************************************/
void AppUiBtnTest(uint8_t btn)
{
  if (appUiCbackTbl.btnCback)
   14a50:	4b02      	ldr	r3, [pc, #8]	; (14a5c <AppUiBtnTest+0xc>)
   14a52:	681b      	ldr	r3, [r3, #0]
   14a54:	b103      	cbz	r3, 14a58 <AppUiBtnTest+0x8>
  {
    (*appUiCbackTbl.btnCback)(btn);
   14a56:	4718      	bx	r3
  }
}
   14a58:	4770      	bx	lr
   14a5a:	bf00      	nop
   14a5c:	10005070 	.word	0x10005070

00014a60 <GattDiscover>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void GattDiscover(dmConnId_t connId, uint16_t *pHdlList)
{
   14a60:	b500      	push	{lr}
  AppDiscFindService(connId, ATT_16_UUID_LEN, (uint8_t *) attGattSvcUuid,
   14a62:	4b06      	ldr	r3, [pc, #24]	; (14a7c <GattDiscover+0x1c>)
   14a64:	4a06      	ldr	r2, [pc, #24]	; (14a80 <GattDiscover+0x20>)
{
   14a66:	b083      	sub	sp, #12
  AppDiscFindService(connId, ATT_16_UUID_LEN, (uint8_t *) attGattSvcUuid,
   14a68:	e9cd 3100 	strd	r3, r1, [sp]
   14a6c:	2303      	movs	r3, #3
   14a6e:	2102      	movs	r1, #2
   14a70:	f009 fa6e 	bl	1df50 <AppDiscFindService>
                     GATT_HDL_LIST_LEN, (attcDiscChar_t **) gattDiscCharList, pHdlList);
}
   14a74:	b003      	add	sp, #12
   14a76:	f85d fb04 	ldr.w	pc, [sp], #4
   14a7a:	bf00      	nop
   14a7c:	10002b84 	.word	0x10002b84
   14a80:	00023ee4 	.word	0x00023ee4

00014a84 <GattValueUpdate>:
 *
 *  \return ATT_SUCCESS if handle is found, ATT_ERR_NOT_FOUND otherwise.
 */
/*************************************************************************************************/
uint8_t GattValueUpdate(uint16_t *pHdlList, attEvt_t *pMsg)
{
   14a84:	b508      	push	{r3, lr}
  uint8_t status = ATT_SUCCESS;

  /* service changed */
  if (pMsg->handle == pHdlList[GATT_SC_HDL_IDX])
   14a86:	894a      	ldrh	r2, [r1, #10]
   14a88:	8803      	ldrh	r3, [r0, #0]
   14a8a:	429a      	cmp	r2, r3
   14a8c:	d001      	beq.n	14a92 <GattValueUpdate+0xe>
    AppDiscServiceChanged(pMsg);
  }
  /* handle not found in list */
  else
  {
    status = ATT_ERR_NOT_FOUND;
   14a8e:	200a      	movs	r0, #10
  }

  return status;
}
   14a90:	bd08      	pop	{r3, pc}
    AppDiscServiceChanged(pMsg);
   14a92:	4608      	mov	r0, r1
   14a94:	f009 faca 	bl	1e02c <AppDiscServiceChanged>
  uint8_t status = ATT_SUCCESS;
   14a98:	2000      	movs	r0, #0
}
   14a9a:	bd08      	pop	{r3, pc}

00014a9c <GattSetSvcChangedIdx>:
 *  \return None.
 */
/*************************************************************************************************/
void GattSetSvcChangedIdx(uint8_t idx)
{
  gattServCb.svcChangedCccdIdxSet = TRUE;
   14a9c:	4b02      	ldr	r3, [pc, #8]	; (14aa8 <GattSetSvcChangedIdx+0xc>)
   14a9e:	2201      	movs	r2, #1
   14aa0:	701a      	strb	r2, [r3, #0]
  gattServCb.svcChangedCccdIdx = idx;
   14aa2:	7058      	strb	r0, [r3, #1]
}
   14aa4:	4770      	bx	lr
   14aa6:	bf00      	nop
   14aa8:	1000507c 	.word	0x1000507c

00014aac <GattSendServiceChangedInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void GattSendServiceChangedInd(dmConnId_t connId, uint16_t start, uint16_t end)
{
   14aac:	b530      	push	{r4, r5, lr}
  uint8_t svcChangedValues[4];
  uint8_t *p;

  if (!gattServCb.svcChangedCccdIdxSet)
   14aae:	4d17      	ldr	r5, [pc, #92]	; (14b0c <GattSendServiceChangedInd+0x60>)
   14ab0:	782b      	ldrb	r3, [r5, #0]
{
   14ab2:	b083      	sub	sp, #12
  if (!gattServCb.svcChangedCccdIdxSet)
   14ab4:	b1ab      	cbz	r3, 14ae2 <GattSendServiceChangedInd+0x36>
  {
    return;
  }

  p = svcChangedValues;
  UINT16_TO_BSTREAM(p, start);
   14ab6:	f88d 1004 	strb.w	r1, [sp, #4]
  UINT16_TO_BSTREAM(p, end);
   14aba:	0a13      	lsrs	r3, r2, #8
  UINT16_TO_BSTREAM(p, start);
   14abc:	0a09      	lsrs	r1, r1, #8
   14abe:	4604      	mov	r4, r0
   14ac0:	f88d 1005 	strb.w	r1, [sp, #5]
  UINT16_TO_BSTREAM(p, end);
   14ac4:	f88d 2006 	strb.w	r2, [sp, #6]
   14ac8:	f88d 3007 	strb.w	r3, [sp, #7]

  /* If connection is not specified */
  if (connId == DM_CONN_ID_NONE)
   14acc:	b958      	cbnz	r0, 14ae6 <GattSendServiceChangedInd+0x3a>
  {
    /* Send to all. */
    for (connId = 1; connId <= DM_CONN_MAX; connId++)
   14ace:	2401      	movs	r4, #1
    {
      if (AttsCccEnabled(connId, gattServCb.svcChangedCccdIdx))
   14ad0:	7869      	ldrb	r1, [r5, #1]
   14ad2:	4620      	mov	r0, r4
   14ad4:	f7f8 ffc8 	bl	da68 <AttsCccEnabled>
   14ad8:	b988      	cbnz	r0, 14afe <GattSendServiceChangedInd+0x52>
    for (connId = 1; connId <= DM_CONN_MAX; connId++)
   14ada:	3401      	adds	r4, #1
   14adc:	b2e4      	uxtb	r4, r4
   14ade:	2c04      	cmp	r4, #4
   14ae0:	d1f6      	bne.n	14ad0 <GattSendServiceChangedInd+0x24>
    if (AttsCccEnabled(connId, gattServCb.svcChangedCccdIdx))
    {
      AttsHandleValueInd(connId, GATT_SC_HDL, sizeof(svcChangedValues), svcChangedValues);
    }
  }
}
   14ae2:	b003      	add	sp, #12
   14ae4:	bd30      	pop	{r4, r5, pc}
    if (AttsCccEnabled(connId, gattServCb.svcChangedCccdIdx))
   14ae6:	7869      	ldrb	r1, [r5, #1]
   14ae8:	f7f8 ffbe 	bl	da68 <AttsCccEnabled>
   14aec:	2800      	cmp	r0, #0
   14aee:	d0f8      	beq.n	14ae2 <GattSendServiceChangedInd+0x36>
      AttsHandleValueInd(connId, GATT_SC_HDL, sizeof(svcChangedValues), svcChangedValues);
   14af0:	ab01      	add	r3, sp, #4
   14af2:	2204      	movs	r2, #4
   14af4:	2112      	movs	r1, #18
   14af6:	4620      	mov	r0, r4
   14af8:	f7f9 fa70 	bl	dfdc <AttsHandleValueInd>
   14afc:	e7f1      	b.n	14ae2 <GattSendServiceChangedInd+0x36>
        AttsHandleValueInd(connId, GATT_SC_HDL, sizeof(svcChangedValues), svcChangedValues);
   14afe:	ab01      	add	r3, sp, #4
   14b00:	2204      	movs	r2, #4
   14b02:	2112      	movs	r1, #18
   14b04:	4620      	mov	r0, r4
   14b06:	f7f9 fa69 	bl	dfdc <AttsHandleValueInd>
   14b0a:	e7e6      	b.n	14ada <GattSendServiceChangedInd+0x2e>
   14b0c:	1000507c 	.word	0x1000507c

00014b10 <GattReadCback>:
 */
/*************************************************************************************************/
uint8_t GattReadCback(dmConnId_t connId, uint16_t handle, uint8_t operation,
                      uint16_t offset, attsAttr_t *pAttr)
{
  switch (handle)
   14b10:	2915      	cmp	r1, #21
   14b12:	d001      	beq.n	14b18 <GattReadCback+0x8>
    default:
      break;
  }

  return ATT_SUCCESS;
}
   14b14:	2000      	movs	r0, #0
   14b16:	4770      	bx	lr
{
   14b18:	b500      	push	{lr}
   14b1a:	b083      	sub	sp, #12
      AttsCsfGetFeatures(connId, csf, sizeof(csf));
   14b1c:	2201      	movs	r2, #1
   14b1e:	a901      	add	r1, sp, #4
   14b20:	f7f9 f8dc 	bl	dcdc <AttsCsfGetFeatures>
      memcpy(pAttr->pValue, csf, ATT_CSF_LEN);
   14b24:	9b04      	ldr	r3, [sp, #16]
   14b26:	f89d 2004 	ldrb.w	r2, [sp, #4]
   14b2a:	685b      	ldr	r3, [r3, #4]
}
   14b2c:	2000      	movs	r0, #0
      memcpy(pAttr->pValue, csf, ATT_CSF_LEN);
   14b2e:	701a      	strb	r2, [r3, #0]
}
   14b30:	b003      	add	sp, #12
   14b32:	f85d fb04 	ldr.w	pc, [sp], #4
   14b36:	bf00      	nop

00014b38 <GattWriteCback>:
 *  \return ATT status.
 */
/*************************************************************************************************/
uint8_t GattWriteCback(dmConnId_t connId, uint16_t handle, uint8_t operation,
                       uint16_t offset, uint16_t len, uint8_t *pValue, attsAttr_t *pAttr)
{
   14b38:	b410      	push	{r4}
  uint8_t status;

  switch (handle)
   14b3a:	2915      	cmp	r1, #21
{
   14b3c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   14b40:	9c02      	ldr	r4, [sp, #8]
  switch (handle)
   14b42:	d003      	beq.n	14b4c <GattWriteCback+0x14>
      status = ATT_SUCCESS;
      break;
  }

  return status;
}
   14b44:	2000      	movs	r0, #0
   14b46:	f85d 4b04 	ldr.w	r4, [sp], #4
   14b4a:	4770      	bx	lr
   14b4c:	469c      	mov	ip, r3
      status = AttsCsfWriteFeatures(connId, offset, len, pValue);
   14b4e:	4661      	mov	r1, ip
   14b50:	4623      	mov	r3, r4
}
   14b52:	f85d 4b04 	ldr.w	r4, [sp], #4
      status = AttsCsfWriteFeatures(connId, offset, len, pValue);
   14b56:	f7f9 b899 	b.w	dc8c <AttsCsfWriteFeatures>
   14b5a:	bf00      	nop

00014b5c <default_RNG>:

#else /* Some other platform */

static int default_RNG(uint8_t *dest, unsigned size) {
    return 0;
}
   14b5c:	2000      	movs	r0, #0
   14b5e:	4770      	bx	lr

00014b60 <vli_add>:
static uint32_t vli_add(uint32_t *result, const uint32_t *left, const uint32_t *right) {
    uint32_t carry = 0;
    uint32_t left_word;
    uint32_t right_word;

    __asm__ volatile (
   14b60:	2300      	movs	r3, #0
static uint32_t vli_add(uint32_t *result, const uint32_t *left, const uint32_t *right) {
   14b62:	b500      	push	{lr}
    __asm__ volatile (
   14b64:	4684      	mov	ip, r0
   14b66:	4618      	mov	r0, r3
   14b68:	c908      	ldmia	r1!, {r3}
   14b6a:	f852 eb04 	ldr.w	lr, [r2], #4
   14b6e:	eb13 030e 	adds.w	r3, r3, lr
   14b72:	f84c 3b04 	str.w	r3, [ip], #4
   14b76:	c908      	ldmia	r1!, {r3}
   14b78:	f852 eb04 	ldr.w	lr, [r2], #4
   14b7c:	eb53 030e 	adcs.w	r3, r3, lr
   14b80:	f84c 3b04 	str.w	r3, [ip], #4
   14b84:	c908      	ldmia	r1!, {r3}
   14b86:	f852 eb04 	ldr.w	lr, [r2], #4
   14b8a:	eb53 030e 	adcs.w	r3, r3, lr
   14b8e:	f84c 3b04 	str.w	r3, [ip], #4
   14b92:	c908      	ldmia	r1!, {r3}
   14b94:	f852 eb04 	ldr.w	lr, [r2], #4
   14b98:	eb53 030e 	adcs.w	r3, r3, lr
   14b9c:	f84c 3b04 	str.w	r3, [ip], #4
   14ba0:	c908      	ldmia	r1!, {r3}
   14ba2:	f852 eb04 	ldr.w	lr, [r2], #4
   14ba6:	eb53 030e 	adcs.w	r3, r3, lr
   14baa:	f84c 3b04 	str.w	r3, [ip], #4
   14bae:	c908      	ldmia	r1!, {r3}
   14bb0:	f852 eb04 	ldr.w	lr, [r2], #4
   14bb4:	eb53 030e 	adcs.w	r3, r3, lr
   14bb8:	f84c 3b04 	str.w	r3, [ip], #4
   14bbc:	c908      	ldmia	r1!, {r3}
   14bbe:	f852 eb04 	ldr.w	lr, [r2], #4
   14bc2:	eb53 030e 	adcs.w	r3, r3, lr
   14bc6:	f84c 3b04 	str.w	r3, [ip], #4
   14bca:	c908      	ldmia	r1!, {r3}
   14bcc:	f852 eb04 	ldr.w	lr, [r2], #4
   14bd0:	eb53 030e 	adcs.w	r3, r3, lr
   14bd4:	f84c 3b04 	str.w	r3, [ip], #4
   14bd8:	4140      	adcs	r0, r0
    #endif
        :
        : "cc", "memory"
    );
    return carry;
}
   14bda:	f85d fb04 	ldr.w	pc, [sp], #4
   14bde:	bf00      	nop

00014be0 <vli_sub>:
#define asm_add 1

static uint32_t vli_sub(uint32_t *result, const uint32_t *left, const uint32_t *right) {
   14be0:	b500      	push	{lr}
    uint32_t carry = 0;
    uint32_t left_word;
    uint32_t right_word;

    __asm__ volatile (
   14be2:	2300      	movs	r3, #0
   14be4:	f851 cb04 	ldr.w	ip, [r1], #4
   14be8:	f852 eb04 	ldr.w	lr, [r2], #4
   14bec:	ebbc 0c0e 	subs.w	ip, ip, lr
   14bf0:	f840 cb04 	str.w	ip, [r0], #4
   14bf4:	f851 cb04 	ldr.w	ip, [r1], #4
   14bf8:	f852 eb04 	ldr.w	lr, [r2], #4
   14bfc:	eb7c 0c0e 	sbcs.w	ip, ip, lr
   14c00:	f840 cb04 	str.w	ip, [r0], #4
   14c04:	f851 cb04 	ldr.w	ip, [r1], #4
   14c08:	f852 eb04 	ldr.w	lr, [r2], #4
   14c0c:	eb7c 0c0e 	sbcs.w	ip, ip, lr
   14c10:	f840 cb04 	str.w	ip, [r0], #4
   14c14:	f851 cb04 	ldr.w	ip, [r1], #4
   14c18:	f852 eb04 	ldr.w	lr, [r2], #4
   14c1c:	eb7c 0c0e 	sbcs.w	ip, ip, lr
   14c20:	f840 cb04 	str.w	ip, [r0], #4
   14c24:	f851 cb04 	ldr.w	ip, [r1], #4
   14c28:	f852 eb04 	ldr.w	lr, [r2], #4
   14c2c:	eb7c 0c0e 	sbcs.w	ip, ip, lr
   14c30:	f840 cb04 	str.w	ip, [r0], #4
   14c34:	f851 cb04 	ldr.w	ip, [r1], #4
   14c38:	f852 eb04 	ldr.w	lr, [r2], #4
   14c3c:	eb7c 0c0e 	sbcs.w	ip, ip, lr
   14c40:	f840 cb04 	str.w	ip, [r0], #4
   14c44:	f851 cb04 	ldr.w	ip, [r1], #4
   14c48:	f852 eb04 	ldr.w	lr, [r2], #4
   14c4c:	eb7c 0c0e 	sbcs.w	ip, ip, lr
   14c50:	f840 cb04 	str.w	ip, [r0], #4
   14c54:	f851 cb04 	ldr.w	ip, [r1], #4
   14c58:	f852 eb04 	ldr.w	lr, [r2], #4
   14c5c:	eb7c 0c0e 	sbcs.w	ip, ip, lr
   14c60:	f840 cb04 	str.w	ip, [r0], #4
   14c64:	415b      	adcs	r3, r3
        :
        : "cc", "memory"
    );
    return !carry; // note that on ARM, carry flag set means "no borrow" when subtracting
                   // (for some reason...)
}
   14c66:	fab3 f083 	clz	r0, r3
   14c6a:	0940      	lsrs	r0, r0, #5
   14c6c:	f85d fb04 	ldr.w	pc, [sp], #4

00014c70 <vli_mult>:
}
#define asm_mult 1
#endif /* (uECC_WORDS == 7) */

#if (uECC_WORDS == 8)
static void vli_mult(uint32_t *result, const uint32_t *left, const uint32_t *right) {
   14c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    register uint32_t *r0 __asm__("r0") = result;
    register const uint32_t *r1 __asm__("r1") = left;
    register const uint32_t *r2 __asm__("r2") = right;

    __asm__ volatile (
   14c74:	f100 0018 	add.w	r0, r0, #24
   14c78:	f102 0218 	add.w	r2, r2, #24
   14c7c:	c918      	ldmia	r1!, {r3, r4}
   14c7e:	cac0      	ldmia	r2!, {r6, r7}
   14c80:	fba3 bc06 	umull	fp, ip, r3, r6
   14c84:	f840 bb04 	str.w	fp, [r0], #4
   14c88:	f04f 0a00 	mov.w	sl, #0
   14c8c:	fba3 b907 	umull	fp, r9, r3, r7
   14c90:	eb1c 0c0b 	adds.w	ip, ip, fp
   14c94:	f149 0900 	adc.w	r9, r9, #0
   14c98:	fba4 be06 	umull	fp, lr, r4, r6
   14c9c:	eb1c 0c0b 	adds.w	ip, ip, fp
   14ca0:	eb59 090e 	adcs.w	r9, r9, lr
   14ca4:	f14a 0a00 	adc.w	sl, sl, #0
   14ca8:	f840 cb04 	str.w	ip, [r0], #4
   14cac:	fba4 ce07 	umull	ip, lr, r4, r7
   14cb0:	eb19 090c 	adds.w	r9, r9, ip
   14cb4:	eb4a 0a0e 	adc.w	sl, sl, lr
   14cb8:	e8a0 0600 	stmia.w	r0!, {r9, sl}
   14cbc:	f1a0 001c 	sub.w	r0, r0, #28
   14cc0:	f1a2 0214 	sub.w	r2, r2, #20
   14cc4:	e8b2 01c0 	ldmia.w	r2!, {r6, r7, r8}
   14cc8:	c920      	ldmia	r1!, {r5}
   14cca:	fba3 bc06 	umull	fp, ip, r3, r6
   14cce:	f840 bb04 	str.w	fp, [r0], #4
   14cd2:	f04f 0a00 	mov.w	sl, #0
   14cd6:	fba3 b907 	umull	fp, r9, r3, r7
   14cda:	eb1c 0c0b 	adds.w	ip, ip, fp
   14cde:	f149 0900 	adc.w	r9, r9, #0
   14ce2:	fba4 be06 	umull	fp, lr, r4, r6
   14ce6:	eb1c 0c0b 	adds.w	ip, ip, fp
   14cea:	eb59 090e 	adcs.w	r9, r9, lr
   14cee:	f14a 0a00 	adc.w	sl, sl, #0
   14cf2:	f840 cb04 	str.w	ip, [r0], #4
   14cf6:	f04f 0b00 	mov.w	fp, #0
   14cfa:	fba3 ce08 	umull	ip, lr, r3, r8
   14cfe:	eb19 090c 	adds.w	r9, r9, ip
   14d02:	eb5a 0a0e 	adcs.w	sl, sl, lr
   14d06:	f14b 0b00 	adc.w	fp, fp, #0
   14d0a:	fba4 ce07 	umull	ip, lr, r4, r7
   14d0e:	eb19 090c 	adds.w	r9, r9, ip
   14d12:	eb5a 0a0e 	adcs.w	sl, sl, lr
   14d16:	f14b 0b00 	adc.w	fp, fp, #0
   14d1a:	fba5 ce06 	umull	ip, lr, r5, r6
   14d1e:	eb19 090c 	adds.w	r9, r9, ip
   14d22:	eb5a 0a0e 	adcs.w	sl, sl, lr
   14d26:	f14b 0b00 	adc.w	fp, fp, #0
   14d2a:	f840 9b04 	str.w	r9, [r0], #4
   14d2e:	c908      	ldmia	r1!, {r3}
   14d30:	f04f 0c00 	mov.w	ip, #0
   14d34:	fba4 e908 	umull	lr, r9, r4, r8
   14d38:	eb1a 0a0e 	adds.w	sl, sl, lr
   14d3c:	eb5b 0b09 	adcs.w	fp, fp, r9
   14d40:	f14c 0c00 	adc.w	ip, ip, #0
   14d44:	fba5 e907 	umull	lr, r9, r5, r7
   14d48:	eb1a 0a0e 	adds.w	sl, sl, lr
   14d4c:	eb5b 0b09 	adcs.w	fp, fp, r9
   14d50:	f14c 0c00 	adc.w	ip, ip, #0
   14d54:	fba3 e906 	umull	lr, r9, r3, r6
   14d58:	eb1a 0a0e 	adds.w	sl, sl, lr
   14d5c:	eb5b 0b09 	adcs.w	fp, fp, r9
   14d60:	f14c 0c00 	adc.w	ip, ip, #0
   14d64:	f8d0 e000 	ldr.w	lr, [r0]
   14d68:	eb1a 0a0e 	adds.w	sl, sl, lr
   14d6c:	f15b 0b00 	adcs.w	fp, fp, #0
   14d70:	f14c 0c00 	adc.w	ip, ip, #0
   14d74:	f840 ab04 	str.w	sl, [r0], #4
   14d78:	c910      	ldmia	r1!, {r4}
   14d7a:	f04f 0e00 	mov.w	lr, #0
   14d7e:	fba5 9a08 	umull	r9, sl, r5, r8
   14d82:	eb1b 0b09 	adds.w	fp, fp, r9
   14d86:	eb5c 0c0a 	adcs.w	ip, ip, sl
   14d8a:	f14e 0e00 	adc.w	lr, lr, #0
   14d8e:	fba3 9a07 	umull	r9, sl, r3, r7
   14d92:	eb1b 0b09 	adds.w	fp, fp, r9
   14d96:	eb5c 0c0a 	adcs.w	ip, ip, sl
   14d9a:	f14e 0e00 	adc.w	lr, lr, #0
   14d9e:	fba4 9a06 	umull	r9, sl, r4, r6
   14da2:	eb1b 0b09 	adds.w	fp, fp, r9
   14da6:	eb5c 0c0a 	adcs.w	ip, ip, sl
   14daa:	f14e 0e00 	adc.w	lr, lr, #0
   14dae:	f8d0 9000 	ldr.w	r9, [r0]
   14db2:	eb1b 0b09 	adds.w	fp, fp, r9
   14db6:	f15c 0c00 	adcs.w	ip, ip, #0
   14dba:	f14e 0e00 	adc.w	lr, lr, #0
   14dbe:	f840 bb04 	str.w	fp, [r0], #4
   14dc2:	ca40      	ldmia	r2!, {r6}
   14dc4:	f04f 0900 	mov.w	r9, #0
   14dc8:	fba5 ab06 	umull	sl, fp, r5, r6
   14dcc:	eb1c 0c0a 	adds.w	ip, ip, sl
   14dd0:	eb5e 0e0b 	adcs.w	lr, lr, fp
   14dd4:	f149 0900 	adc.w	r9, r9, #0
   14dd8:	fba3 ab08 	umull	sl, fp, r3, r8
   14ddc:	eb1c 0c0a 	adds.w	ip, ip, sl
   14de0:	eb5e 0e0b 	adcs.w	lr, lr, fp
   14de4:	f149 0900 	adc.w	r9, r9, #0
   14de8:	fba4 ab07 	umull	sl, fp, r4, r7
   14dec:	eb1c 0c0a 	adds.w	ip, ip, sl
   14df0:	eb5e 0e0b 	adcs.w	lr, lr, fp
   14df4:	f149 0900 	adc.w	r9, r9, #0
   14df8:	f8d0 a000 	ldr.w	sl, [r0]
   14dfc:	eb1c 0c0a 	adds.w	ip, ip, sl
   14e00:	f15e 0e00 	adcs.w	lr, lr, #0
   14e04:	f149 0900 	adc.w	r9, r9, #0
   14e08:	f840 cb04 	str.w	ip, [r0], #4
   14e0c:	ca80      	ldmia	r2!, {r7}
   14e0e:	f04f 0a00 	mov.w	sl, #0
   14e12:	fba5 bc07 	umull	fp, ip, r5, r7
   14e16:	eb1e 0e0b 	adds.w	lr, lr, fp
   14e1a:	eb59 090c 	adcs.w	r9, r9, ip
   14e1e:	f14a 0a00 	adc.w	sl, sl, #0
   14e22:	fba3 bc06 	umull	fp, ip, r3, r6
   14e26:	eb1e 0e0b 	adds.w	lr, lr, fp
   14e2a:	eb59 090c 	adcs.w	r9, r9, ip
   14e2e:	f14a 0a00 	adc.w	sl, sl, #0
   14e32:	fba4 bc08 	umull	fp, ip, r4, r8
   14e36:	eb1e 0e0b 	adds.w	lr, lr, fp
   14e3a:	eb59 090c 	adcs.w	r9, r9, ip
   14e3e:	f14a 0a00 	adc.w	sl, sl, #0
   14e42:	f8d0 b000 	ldr.w	fp, [r0]
   14e46:	eb1e 0e0b 	adds.w	lr, lr, fp
   14e4a:	f159 0900 	adcs.w	r9, r9, #0
   14e4e:	f14a 0a00 	adc.w	sl, sl, #0
   14e52:	f840 eb04 	str.w	lr, [r0], #4
   14e56:	f04f 0b00 	mov.w	fp, #0
   14e5a:	fba3 ce07 	umull	ip, lr, r3, r7
   14e5e:	eb19 090c 	adds.w	r9, r9, ip
   14e62:	eb5a 0a0e 	adcs.w	sl, sl, lr
   14e66:	f14b 0b00 	adc.w	fp, fp, #0
   14e6a:	fba4 ce06 	umull	ip, lr, r4, r6
   14e6e:	eb19 090c 	adds.w	r9, r9, ip
   14e72:	eb5a 0a0e 	adcs.w	sl, sl, lr
   14e76:	f14b 0b00 	adc.w	fp, fp, #0
   14e7a:	f840 9b04 	str.w	r9, [r0], #4
   14e7e:	fba4 e907 	umull	lr, r9, r4, r7
   14e82:	eb1a 0a0e 	adds.w	sl, sl, lr
   14e86:	eb4b 0b09 	adc.w	fp, fp, r9
   14e8a:	e8a0 0c00 	stmia.w	r0!, {sl, fp}
   14e8e:	f1a0 0034 	sub.w	r0, r0, #52	; 0x34
   14e92:	f1a1 0114 	sub.w	r1, r1, #20
   14e96:	f1a2 0220 	sub.w	r2, r2, #32
   14e9a:	c938      	ldmia	r1!, {r3, r4, r5}
   14e9c:	e8b2 01c0 	ldmia.w	r2!, {r6, r7, r8}
   14ea0:	fba3 bc06 	umull	fp, ip, r3, r6
   14ea4:	f840 bb04 	str.w	fp, [r0], #4
   14ea8:	f04f 0a00 	mov.w	sl, #0
   14eac:	fba3 b907 	umull	fp, r9, r3, r7
   14eb0:	eb1c 0c0b 	adds.w	ip, ip, fp
   14eb4:	f149 0900 	adc.w	r9, r9, #0
   14eb8:	fba4 be06 	umull	fp, lr, r4, r6
   14ebc:	eb1c 0c0b 	adds.w	ip, ip, fp
   14ec0:	eb59 090e 	adcs.w	r9, r9, lr
   14ec4:	f14a 0a00 	adc.w	sl, sl, #0
   14ec8:	f840 cb04 	str.w	ip, [r0], #4
   14ecc:	f04f 0b00 	mov.w	fp, #0
   14ed0:	fba3 ce08 	umull	ip, lr, r3, r8
   14ed4:	eb19 090c 	adds.w	r9, r9, ip
   14ed8:	eb5a 0a0e 	adcs.w	sl, sl, lr
   14edc:	f14b 0b00 	adc.w	fp, fp, #0
   14ee0:	fba4 ce07 	umull	ip, lr, r4, r7
   14ee4:	eb19 090c 	adds.w	r9, r9, ip
   14ee8:	eb5a 0a0e 	adcs.w	sl, sl, lr
   14eec:	f14b 0b00 	adc.w	fp, fp, #0
   14ef0:	fba5 ce06 	umull	ip, lr, r5, r6
   14ef4:	eb19 090c 	adds.w	r9, r9, ip
   14ef8:	eb5a 0a0e 	adcs.w	sl, sl, lr
   14efc:	f14b 0b00 	adc.w	fp, fp, #0
   14f00:	f840 9b04 	str.w	r9, [r0], #4
   14f04:	c908      	ldmia	r1!, {r3}
   14f06:	f04f 0c00 	mov.w	ip, #0
   14f0a:	fba4 e908 	umull	lr, r9, r4, r8
   14f0e:	eb1a 0a0e 	adds.w	sl, sl, lr
   14f12:	eb5b 0b09 	adcs.w	fp, fp, r9
   14f16:	f14c 0c00 	adc.w	ip, ip, #0
   14f1a:	fba5 e907 	umull	lr, r9, r5, r7
   14f1e:	eb1a 0a0e 	adds.w	sl, sl, lr
   14f22:	eb5b 0b09 	adcs.w	fp, fp, r9
   14f26:	f14c 0c00 	adc.w	ip, ip, #0
   14f2a:	fba3 e906 	umull	lr, r9, r3, r6
   14f2e:	eb1a 0a0e 	adds.w	sl, sl, lr
   14f32:	eb5b 0b09 	adcs.w	fp, fp, r9
   14f36:	f14c 0c00 	adc.w	ip, ip, #0
   14f3a:	f8d0 e000 	ldr.w	lr, [r0]
   14f3e:	eb1a 0a0e 	adds.w	sl, sl, lr
   14f42:	f15b 0b00 	adcs.w	fp, fp, #0
   14f46:	f14c 0c00 	adc.w	ip, ip, #0
   14f4a:	f840 ab04 	str.w	sl, [r0], #4
   14f4e:	c910      	ldmia	r1!, {r4}
   14f50:	f04f 0e00 	mov.w	lr, #0
   14f54:	fba5 9a08 	umull	r9, sl, r5, r8
   14f58:	eb1b 0b09 	adds.w	fp, fp, r9
   14f5c:	eb5c 0c0a 	adcs.w	ip, ip, sl
   14f60:	f14e 0e00 	adc.w	lr, lr, #0
   14f64:	fba3 9a07 	umull	r9, sl, r3, r7
   14f68:	eb1b 0b09 	adds.w	fp, fp, r9
   14f6c:	eb5c 0c0a 	adcs.w	ip, ip, sl
   14f70:	f14e 0e00 	adc.w	lr, lr, #0
   14f74:	fba4 9a06 	umull	r9, sl, r4, r6
   14f78:	eb1b 0b09 	adds.w	fp, fp, r9
   14f7c:	eb5c 0c0a 	adcs.w	ip, ip, sl
   14f80:	f14e 0e00 	adc.w	lr, lr, #0
   14f84:	f8d0 9000 	ldr.w	r9, [r0]
   14f88:	eb1b 0b09 	adds.w	fp, fp, r9
   14f8c:	f15c 0c00 	adcs.w	ip, ip, #0
   14f90:	f14e 0e00 	adc.w	lr, lr, #0
   14f94:	f840 bb04 	str.w	fp, [r0], #4
   14f98:	c920      	ldmia	r1!, {r5}
   14f9a:	f04f 0900 	mov.w	r9, #0
   14f9e:	fba3 ab08 	umull	sl, fp, r3, r8
   14fa2:	eb1c 0c0a 	adds.w	ip, ip, sl
   14fa6:	eb5e 0e0b 	adcs.w	lr, lr, fp
   14faa:	f149 0900 	adc.w	r9, r9, #0
   14fae:	fba4 ab07 	umull	sl, fp, r4, r7
   14fb2:	eb1c 0c0a 	adds.w	ip, ip, sl
   14fb6:	eb5e 0e0b 	adcs.w	lr, lr, fp
   14fba:	f149 0900 	adc.w	r9, r9, #0
   14fbe:	fba5 ab06 	umull	sl, fp, r5, r6
   14fc2:	eb1c 0c0a 	adds.w	ip, ip, sl
   14fc6:	eb5e 0e0b 	adcs.w	lr, lr, fp
   14fca:	f149 0900 	adc.w	r9, r9, #0
   14fce:	f8d0 a000 	ldr.w	sl, [r0]
   14fd2:	eb1c 0c0a 	adds.w	ip, ip, sl
   14fd6:	f15e 0e00 	adcs.w	lr, lr, #0
   14fda:	f149 0900 	adc.w	r9, r9, #0
   14fde:	f840 cb04 	str.w	ip, [r0], #4
   14fe2:	c908      	ldmia	r1!, {r3}
   14fe4:	f04f 0a00 	mov.w	sl, #0
   14fe8:	fba4 bc08 	umull	fp, ip, r4, r8
   14fec:	eb1e 0e0b 	adds.w	lr, lr, fp
   14ff0:	eb59 090c 	adcs.w	r9, r9, ip
   14ff4:	f14a 0a00 	adc.w	sl, sl, #0
   14ff8:	fba5 bc07 	umull	fp, ip, r5, r7
   14ffc:	eb1e 0e0b 	adds.w	lr, lr, fp
   15000:	eb59 090c 	adcs.w	r9, r9, ip
   15004:	f14a 0a00 	adc.w	sl, sl, #0
   15008:	fba3 bc06 	umull	fp, ip, r3, r6
   1500c:	eb1e 0e0b 	adds.w	lr, lr, fp
   15010:	eb59 090c 	adcs.w	r9, r9, ip
   15014:	f14a 0a00 	adc.w	sl, sl, #0
   15018:	f8d0 b000 	ldr.w	fp, [r0]
   1501c:	eb1e 0e0b 	adds.w	lr, lr, fp
   15020:	f159 0900 	adcs.w	r9, r9, #0
   15024:	f14a 0a00 	adc.w	sl, sl, #0
   15028:	f840 eb04 	str.w	lr, [r0], #4
   1502c:	c910      	ldmia	r1!, {r4}
   1502e:	f04f 0b00 	mov.w	fp, #0
   15032:	fba5 ce08 	umull	ip, lr, r5, r8
   15036:	eb19 090c 	adds.w	r9, r9, ip
   1503a:	eb5a 0a0e 	adcs.w	sl, sl, lr
   1503e:	f14b 0b00 	adc.w	fp, fp, #0
   15042:	fba3 ce07 	umull	ip, lr, r3, r7
   15046:	eb19 090c 	adds.w	r9, r9, ip
   1504a:	eb5a 0a0e 	adcs.w	sl, sl, lr
   1504e:	f14b 0b00 	adc.w	fp, fp, #0
   15052:	fba4 ce06 	umull	ip, lr, r4, r6
   15056:	eb19 090c 	adds.w	r9, r9, ip
   1505a:	eb5a 0a0e 	adcs.w	sl, sl, lr
   1505e:	f14b 0b00 	adc.w	fp, fp, #0
   15062:	f8d0 c000 	ldr.w	ip, [r0]
   15066:	eb19 090c 	adds.w	r9, r9, ip
   1506a:	f15a 0a00 	adcs.w	sl, sl, #0
   1506e:	f14b 0b00 	adc.w	fp, fp, #0
   15072:	f840 9b04 	str.w	r9, [r0], #4
   15076:	ca40      	ldmia	r2!, {r6}
   15078:	f04f 0c00 	mov.w	ip, #0
   1507c:	fba5 e906 	umull	lr, r9, r5, r6
   15080:	eb1a 0a0e 	adds.w	sl, sl, lr
   15084:	eb5b 0b09 	adcs.w	fp, fp, r9
   15088:	f14c 0c00 	adc.w	ip, ip, #0
   1508c:	fba3 e908 	umull	lr, r9, r3, r8
   15090:	eb1a 0a0e 	adds.w	sl, sl, lr
   15094:	eb5b 0b09 	adcs.w	fp, fp, r9
   15098:	f14c 0c00 	adc.w	ip, ip, #0
   1509c:	fba4 e907 	umull	lr, r9, r4, r7
   150a0:	eb1a 0a0e 	adds.w	sl, sl, lr
   150a4:	eb5b 0b09 	adcs.w	fp, fp, r9
   150a8:	f14c 0c00 	adc.w	ip, ip, #0
   150ac:	f8d0 e000 	ldr.w	lr, [r0]
   150b0:	eb1a 0a0e 	adds.w	sl, sl, lr
   150b4:	f15b 0b00 	adcs.w	fp, fp, #0
   150b8:	f14c 0c00 	adc.w	ip, ip, #0
   150bc:	f840 ab04 	str.w	sl, [r0], #4
   150c0:	ca80      	ldmia	r2!, {r7}
   150c2:	f04f 0e00 	mov.w	lr, #0
   150c6:	fba5 9a07 	umull	r9, sl, r5, r7
   150ca:	eb1b 0b09 	adds.w	fp, fp, r9
   150ce:	eb5c 0c0a 	adcs.w	ip, ip, sl
   150d2:	f14e 0e00 	adc.w	lr, lr, #0
   150d6:	fba3 9a06 	umull	r9, sl, r3, r6
   150da:	eb1b 0b09 	adds.w	fp, fp, r9
   150de:	eb5c 0c0a 	adcs.w	ip, ip, sl
   150e2:	f14e 0e00 	adc.w	lr, lr, #0
   150e6:	fba4 9a08 	umull	r9, sl, r4, r8
   150ea:	eb1b 0b09 	adds.w	fp, fp, r9
   150ee:	eb5c 0c0a 	adcs.w	ip, ip, sl
   150f2:	f14e 0e00 	adc.w	lr, lr, #0
   150f6:	f8d0 9000 	ldr.w	r9, [r0]
   150fa:	eb1b 0b09 	adds.w	fp, fp, r9
   150fe:	f15c 0c00 	adcs.w	ip, ip, #0
   15102:	f14e 0e00 	adc.w	lr, lr, #0
   15106:	f840 bb04 	str.w	fp, [r0], #4
   1510a:	f852 8b04 	ldr.w	r8, [r2], #4
   1510e:	f04f 0900 	mov.w	r9, #0
   15112:	fba5 ab08 	umull	sl, fp, r5, r8
   15116:	eb1c 0c0a 	adds.w	ip, ip, sl
   1511a:	eb5e 0e0b 	adcs.w	lr, lr, fp
   1511e:	f149 0900 	adc.w	r9, r9, #0
   15122:	fba3 ab07 	umull	sl, fp, r3, r7
   15126:	eb1c 0c0a 	adds.w	ip, ip, sl
   1512a:	eb5e 0e0b 	adcs.w	lr, lr, fp
   1512e:	f149 0900 	adc.w	r9, r9, #0
   15132:	fba4 ab06 	umull	sl, fp, r4, r6
   15136:	eb1c 0c0a 	adds.w	ip, ip, sl
   1513a:	eb5e 0e0b 	adcs.w	lr, lr, fp
   1513e:	f149 0900 	adc.w	r9, r9, #0
   15142:	f8d0 a000 	ldr.w	sl, [r0]
   15146:	eb1c 0c0a 	adds.w	ip, ip, sl
   1514a:	f15e 0e00 	adcs.w	lr, lr, #0
   1514e:	f149 0900 	adc.w	r9, r9, #0
   15152:	f840 cb04 	str.w	ip, [r0], #4
   15156:	ca40      	ldmia	r2!, {r6}
   15158:	f04f 0a00 	mov.w	sl, #0
   1515c:	fba5 bc06 	umull	fp, ip, r5, r6
   15160:	eb1e 0e0b 	adds.w	lr, lr, fp
   15164:	eb59 090c 	adcs.w	r9, r9, ip
   15168:	f14a 0a00 	adc.w	sl, sl, #0
   1516c:	fba3 bc08 	umull	fp, ip, r3, r8
   15170:	eb1e 0e0b 	adds.w	lr, lr, fp
   15174:	eb59 090c 	adcs.w	r9, r9, ip
   15178:	f14a 0a00 	adc.w	sl, sl, #0
   1517c:	fba4 bc07 	umull	fp, ip, r4, r7
   15180:	eb1e 0e0b 	adds.w	lr, lr, fp
   15184:	eb59 090c 	adcs.w	r9, r9, ip
   15188:	f14a 0a00 	adc.w	sl, sl, #0
   1518c:	f8d0 b000 	ldr.w	fp, [r0]
   15190:	eb1e 0e0b 	adds.w	lr, lr, fp
   15194:	f159 0900 	adcs.w	r9, r9, #0
   15198:	f14a 0a00 	adc.w	sl, sl, #0
   1519c:	f840 eb04 	str.w	lr, [r0], #4
   151a0:	ca80      	ldmia	r2!, {r7}
   151a2:	f04f 0b00 	mov.w	fp, #0
   151a6:	fba5 ce07 	umull	ip, lr, r5, r7
   151aa:	eb19 090c 	adds.w	r9, r9, ip
   151ae:	eb5a 0a0e 	adcs.w	sl, sl, lr
   151b2:	f14b 0b00 	adc.w	fp, fp, #0
   151b6:	fba3 ce06 	umull	ip, lr, r3, r6
   151ba:	eb19 090c 	adds.w	r9, r9, ip
   151be:	eb5a 0a0e 	adcs.w	sl, sl, lr
   151c2:	f14b 0b00 	adc.w	fp, fp, #0
   151c6:	fba4 ce08 	umull	ip, lr, r4, r8
   151ca:	eb19 090c 	adds.w	r9, r9, ip
   151ce:	eb5a 0a0e 	adcs.w	sl, sl, lr
   151d2:	f14b 0b00 	adc.w	fp, fp, #0
   151d6:	f8d0 c000 	ldr.w	ip, [r0]
   151da:	eb19 090c 	adds.w	r9, r9, ip
   151de:	f15a 0a00 	adcs.w	sl, sl, #0
   151e2:	f14b 0b00 	adc.w	fp, fp, #0
   151e6:	f840 9b04 	str.w	r9, [r0], #4
   151ea:	f04f 0c00 	mov.w	ip, #0
   151ee:	fba3 e907 	umull	lr, r9, r3, r7
   151f2:	eb1a 0a0e 	adds.w	sl, sl, lr
   151f6:	eb5b 0b09 	adcs.w	fp, fp, r9
   151fa:	f14c 0c00 	adc.w	ip, ip, #0
   151fe:	fba4 e906 	umull	lr, r9, r4, r6
   15202:	eb1a 0a0e 	adds.w	sl, sl, lr
   15206:	eb5b 0b09 	adcs.w	fp, fp, r9
   1520a:	f14c 0c00 	adc.w	ip, ip, #0
   1520e:	f840 ab04 	str.w	sl, [r0], #4
   15212:	fba4 9a07 	umull	r9, sl, r4, r7
   15216:	eb1b 0b09 	adds.w	fp, fp, r9
   1521a:	eb4c 0c0a 	adc.w	ip, ip, sl
   1521e:	e8a0 1800 	stmia.w	r0!, {fp, ip}
    #endif
        : "+r" (r0), "+r" (r1), "+r" (r2)
        :
        : "r3", "r4", "r5", "r6", "r7", "r8", "r9", "r10", "r11", "r12", "r14", "cc", "memory"
    );
}
   15222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15226:	bf00      	nop

00015228 <vli_square>:
}
#define asm_square 1
#endif /* (uECC_WORDS == 7) */

#if (uECC_WORDS == 8)
static void vli_square(uint32_t *result, const uint32_t *left) {
   15228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    register uint32_t *r0 __asm__("r0") = result;
    register const uint32_t *r1 __asm__("r1") = left;

    __asm__ volatile (
   1522c:	c90c      	ldmia	r1!, {r2, r3}
   1522e:	f101 0110 	add.w	r1, r1, #16
   15232:	c960      	ldmia	r1!, {r5, r6}
   15234:	f100 0018 	add.w	r0, r0, #24
   15238:	fba2 8905 	umull	r8, r9, r2, r5
   1523c:	f840 8b04 	str.w	r8, [r0], #4
   15240:	fba2 ca06 	umull	ip, sl, r2, r6
   15244:	eb19 090c 	adds.w	r9, r9, ip
   15248:	f14a 0a00 	adc.w	sl, sl, #0
   1524c:	f840 9b04 	str.w	r9, [r0], #4
   15250:	fba3 8906 	umull	r8, r9, r3, r6
   15254:	eb1a 0a08 	adds.w	sl, sl, r8
   15258:	f149 0b00 	adc.w	fp, r9, #0
   1525c:	e8a0 0c00 	stmia.w	r0!, {sl, fp}
   15260:	f1a0 0028 	sub.w	r0, r0, #40	; 0x28
   15264:	f1a1 0120 	sub.w	r1, r1, #32
   15268:	c9fc      	ldmia	r1!, {r2, r3, r4, r5, r6, r7}
   1526a:	fba2 bc02 	umull	fp, ip, r2, r2
   1526e:	f840 bb04 	str.w	fp, [r0], #4
   15272:	f04f 0900 	mov.w	r9, #0
   15276:	fba2 ab03 	umull	sl, fp, r2, r3
   1527a:	eb1c 0c0a 	adds.w	ip, ip, sl
   1527e:	f15b 0800 	adcs.w	r8, fp, #0
   15282:	f149 0900 	adc.w	r9, r9, #0
   15286:	eb1c 0c0a 	adds.w	ip, ip, sl
   1528a:	eb58 080b 	adcs.w	r8, r8, fp
   1528e:	f149 0900 	adc.w	r9, r9, #0
   15292:	f840 cb04 	str.w	ip, [r0], #4
   15296:	f04f 0a00 	mov.w	sl, #0
   1529a:	fba2 bc04 	umull	fp, ip, r2, r4
   1529e:	eb1b 0b0b 	adds.w	fp, fp, fp
   152a2:	eb5c 0c0c 	adcs.w	ip, ip, ip
   152a6:	f14a 0a00 	adc.w	sl, sl, #0
   152aa:	eb18 080b 	adds.w	r8, r8, fp
   152ae:	eb59 090c 	adcs.w	r9, r9, ip
   152b2:	f14a 0a00 	adc.w	sl, sl, #0
   152b6:	fba3 bc03 	umull	fp, ip, r3, r3
   152ba:	eb18 080b 	adds.w	r8, r8, fp
   152be:	eb59 090c 	adcs.w	r9, r9, ip
   152c2:	f14a 0a00 	adc.w	sl, sl, #0
   152c6:	f840 8b04 	str.w	r8, [r0], #4
   152ca:	f04f 0c00 	mov.w	ip, #0
   152ce:	fba2 8b05 	umull	r8, fp, r2, r5
   152d2:	46de      	mov	lr, fp
   152d4:	fbe3 8b04 	umlal	r8, fp, r3, r4
   152d8:	45de      	cmp	lr, fp
   152da:	bf88      	it	hi
   152dc:	f14c 0c00 	adchi.w	ip, ip, #0
   152e0:	eb18 0808 	adds.w	r8, r8, r8
   152e4:	eb5b 0b0b 	adcs.w	fp, fp, fp
   152e8:	eb4c 0c0c 	adc.w	ip, ip, ip
   152ec:	eb18 0809 	adds.w	r8, r8, r9
   152f0:	eb5b 0b0a 	adcs.w	fp, fp, sl
   152f4:	f14c 0c00 	adc.w	ip, ip, #0
   152f8:	f840 8b04 	str.w	r8, [r0], #4
   152fc:	f04f 0a00 	mov.w	sl, #0
   15300:	fba2 8906 	umull	r8, r9, r2, r6
   15304:	46ce      	mov	lr, r9
   15306:	fbe3 8905 	umlal	r8, r9, r3, r5
   1530a:	45ce      	cmp	lr, r9
   1530c:	bf88      	it	hi
   1530e:	f14a 0a00 	adchi.w	sl, sl, #0
   15312:	eb18 0808 	adds.w	r8, r8, r8
   15316:	eb59 0909 	adcs.w	r9, r9, r9
   1531a:	eb4a 0a0a 	adc.w	sl, sl, sl
   1531e:	46ce      	mov	lr, r9
   15320:	fbe4 8904 	umlal	r8, r9, r4, r4
   15324:	45ce      	cmp	lr, r9
   15326:	bf88      	it	hi
   15328:	f14a 0a00 	adchi.w	sl, sl, #0
   1532c:	eb18 080b 	adds.w	r8, r8, fp
   15330:	eb59 090c 	adcs.w	r9, r9, ip
   15334:	f14a 0a00 	adc.w	sl, sl, #0
   15338:	f840 8b04 	str.w	r8, [r0], #4
   1533c:	f04f 0c00 	mov.w	ip, #0
   15340:	fba2 8b07 	umull	r8, fp, r2, r7
   15344:	46de      	mov	lr, fp
   15346:	fbe3 8b06 	umlal	r8, fp, r3, r6
   1534a:	45de      	cmp	lr, fp
   1534c:	bf88      	it	hi
   1534e:	f14c 0c00 	adchi.w	ip, ip, #0
   15352:	46de      	mov	lr, fp
   15354:	fbe4 8b05 	umlal	r8, fp, r4, r5
   15358:	45de      	cmp	lr, fp
   1535a:	bf88      	it	hi
   1535c:	f14c 0c00 	adchi.w	ip, ip, #0
   15360:	eb18 0808 	adds.w	r8, r8, r8
   15364:	eb5b 0b0b 	adcs.w	fp, fp, fp
   15368:	eb4c 0c0c 	adc.w	ip, ip, ip
   1536c:	eb18 0809 	adds.w	r8, r8, r9
   15370:	eb5b 0b0a 	adcs.w	fp, fp, sl
   15374:	f14c 0c00 	adc.w	ip, ip, #0
   15378:	f840 8b04 	str.w	r8, [r0], #4
   1537c:	c904      	ldmia	r1!, {r2}
   1537e:	f04f 0a00 	mov.w	sl, #0
   15382:	fba3 8907 	umull	r8, r9, r3, r7
   15386:	46ce      	mov	lr, r9
   15388:	fbe4 8906 	umlal	r8, r9, r4, r6
   1538c:	45ce      	cmp	lr, r9
   1538e:	bf88      	it	hi
   15390:	f14a 0a00 	adchi.w	sl, sl, #0
   15394:	f8d0 e000 	ldr.w	lr, [r0]
   15398:	eb18 080e 	adds.w	r8, r8, lr
   1539c:	f159 0900 	adcs.w	r9, r9, #0
   153a0:	f14a 0a00 	adc.w	sl, sl, #0
   153a4:	eb18 0808 	adds.w	r8, r8, r8
   153a8:	eb59 0909 	adcs.w	r9, r9, r9
   153ac:	eb4a 0a0a 	adc.w	sl, sl, sl
   153b0:	46ce      	mov	lr, r9
   153b2:	fbe5 8905 	umlal	r8, r9, r5, r5
   153b6:	45ce      	cmp	lr, r9
   153b8:	bf88      	it	hi
   153ba:	f14a 0a00 	adchi.w	sl, sl, #0
   153be:	eb18 080b 	adds.w	r8, r8, fp
   153c2:	eb59 090c 	adcs.w	r9, r9, ip
   153c6:	f14a 0a00 	adc.w	sl, sl, #0
   153ca:	f840 8b04 	str.w	r8, [r0], #4
   153ce:	f04f 0c00 	mov.w	ip, #0
   153d2:	fba3 8b02 	umull	r8, fp, r3, r2
   153d6:	46de      	mov	lr, fp
   153d8:	fbe4 8b07 	umlal	r8, fp, r4, r7
   153dc:	45de      	cmp	lr, fp
   153de:	bf88      	it	hi
   153e0:	f14c 0c00 	adchi.w	ip, ip, #0
   153e4:	46de      	mov	lr, fp
   153e6:	fbe5 8b06 	umlal	r8, fp, r5, r6
   153ea:	45de      	cmp	lr, fp
   153ec:	bf88      	it	hi
   153ee:	f14c 0c00 	adchi.w	ip, ip, #0
   153f2:	f8d0 e000 	ldr.w	lr, [r0]
   153f6:	eb18 080e 	adds.w	r8, r8, lr
   153fa:	f15b 0b00 	adcs.w	fp, fp, #0
   153fe:	f14c 0c00 	adc.w	ip, ip, #0
   15402:	eb18 0808 	adds.w	r8, r8, r8
   15406:	eb5b 0b0b 	adcs.w	fp, fp, fp
   1540a:	eb4c 0c0c 	adc.w	ip, ip, ip
   1540e:	eb18 0809 	adds.w	r8, r8, r9
   15412:	eb5b 0b0a 	adcs.w	fp, fp, sl
   15416:	f14c 0c00 	adc.w	ip, ip, #0
   1541a:	f840 8b04 	str.w	r8, [r0], #4
   1541e:	c908      	ldmia	r1!, {r3}
   15420:	f04f 0a00 	mov.w	sl, #0
   15424:	fba4 8902 	umull	r8, r9, r4, r2
   15428:	46ce      	mov	lr, r9
   1542a:	fbe5 8907 	umlal	r8, r9, r5, r7
   1542e:	45ce      	cmp	lr, r9
   15430:	bf88      	it	hi
   15432:	f14a 0a00 	adchi.w	sl, sl, #0
   15436:	f8d0 e000 	ldr.w	lr, [r0]
   1543a:	eb18 080e 	adds.w	r8, r8, lr
   1543e:	f159 0900 	adcs.w	r9, r9, #0
   15442:	f14a 0a00 	adc.w	sl, sl, #0
   15446:	eb18 0808 	adds.w	r8, r8, r8
   1544a:	eb59 0909 	adcs.w	r9, r9, r9
   1544e:	eb4a 0a0a 	adc.w	sl, sl, sl
   15452:	46ce      	mov	lr, r9
   15454:	fbe6 8906 	umlal	r8, r9, r6, r6
   15458:	45ce      	cmp	lr, r9
   1545a:	bf88      	it	hi
   1545c:	f14a 0a00 	adchi.w	sl, sl, #0
   15460:	eb18 080b 	adds.w	r8, r8, fp
   15464:	eb59 090c 	adcs.w	r9, r9, ip
   15468:	f14a 0a00 	adc.w	sl, sl, #0
   1546c:	f840 8b04 	str.w	r8, [r0], #4
   15470:	f04f 0c00 	mov.w	ip, #0
   15474:	fba4 8b03 	umull	r8, fp, r4, r3
   15478:	46de      	mov	lr, fp
   1547a:	fbe5 8b02 	umlal	r8, fp, r5, r2
   1547e:	45de      	cmp	lr, fp
   15480:	bf88      	it	hi
   15482:	f14c 0c00 	adchi.w	ip, ip, #0
   15486:	46de      	mov	lr, fp
   15488:	fbe6 8b07 	umlal	r8, fp, r6, r7
   1548c:	45de      	cmp	lr, fp
   1548e:	bf88      	it	hi
   15490:	f14c 0c00 	adchi.w	ip, ip, #0
   15494:	f8d0 e000 	ldr.w	lr, [r0]
   15498:	eb18 080e 	adds.w	r8, r8, lr
   1549c:	f15b 0b00 	adcs.w	fp, fp, #0
   154a0:	f14c 0c00 	adc.w	ip, ip, #0
   154a4:	eb18 0808 	adds.w	r8, r8, r8
   154a8:	eb5b 0b0b 	adcs.w	fp, fp, fp
   154ac:	eb4c 0c0c 	adc.w	ip, ip, ip
   154b0:	eb18 0809 	adds.w	r8, r8, r9
   154b4:	eb5b 0b0a 	adcs.w	fp, fp, sl
   154b8:	f14c 0c00 	adc.w	ip, ip, #0
   154bc:	f840 8b04 	str.w	r8, [r0], #4
   154c0:	f04f 0a00 	mov.w	sl, #0
   154c4:	fba5 8903 	umull	r8, r9, r5, r3
   154c8:	46ce      	mov	lr, r9
   154ca:	fbe6 8902 	umlal	r8, r9, r6, r2
   154ce:	45ce      	cmp	lr, r9
   154d0:	bf88      	it	hi
   154d2:	f14a 0a00 	adchi.w	sl, sl, #0
   154d6:	eb18 0808 	adds.w	r8, r8, r8
   154da:	eb59 0909 	adcs.w	r9, r9, r9
   154de:	eb4a 0a0a 	adc.w	sl, sl, sl
   154e2:	46ce      	mov	lr, r9
   154e4:	fbe7 8907 	umlal	r8, r9, r7, r7
   154e8:	45ce      	cmp	lr, r9
   154ea:	bf88      	it	hi
   154ec:	f14a 0a00 	adchi.w	sl, sl, #0
   154f0:	eb18 080b 	adds.w	r8, r8, fp
   154f4:	eb59 090c 	adcs.w	r9, r9, ip
   154f8:	f14a 0a00 	adc.w	sl, sl, #0
   154fc:	f840 8b04 	str.w	r8, [r0], #4
   15500:	f04f 0c00 	mov.w	ip, #0
   15504:	fba6 8b03 	umull	r8, fp, r6, r3
   15508:	46de      	mov	lr, fp
   1550a:	fbe7 8b02 	umlal	r8, fp, r7, r2
   1550e:	45de      	cmp	lr, fp
   15510:	bf88      	it	hi
   15512:	f14c 0c00 	adchi.w	ip, ip, #0
   15516:	eb18 0808 	adds.w	r8, r8, r8
   1551a:	eb5b 0b0b 	adcs.w	fp, fp, fp
   1551e:	eb4c 0c0c 	adc.w	ip, ip, ip
   15522:	eb18 0809 	adds.w	r8, r8, r9
   15526:	eb5b 0b0a 	adcs.w	fp, fp, sl
   1552a:	f14c 0c00 	adc.w	ip, ip, #0
   1552e:	f840 8b04 	str.w	r8, [r0], #4
   15532:	f04f 0800 	mov.w	r8, #0
   15536:	fba7 1a03 	umull	r1, sl, r7, r3
   1553a:	1849      	adds	r1, r1, r1
   1553c:	eb5a 0a0a 	adcs.w	sl, sl, sl
   15540:	f148 0800 	adc.w	r8, r8, #0
   15544:	eb1b 0b01 	adds.w	fp, fp, r1
   15548:	eb5c 0c0a 	adcs.w	ip, ip, sl
   1554c:	f148 0800 	adc.w	r8, r8, #0
   15550:	fba2 1a02 	umull	r1, sl, r2, r2
   15554:	eb1b 0b01 	adds.w	fp, fp, r1
   15558:	eb5c 0c0a 	adcs.w	ip, ip, sl
   1555c:	f148 0800 	adc.w	r8, r8, #0
   15560:	f840 bb04 	str.w	fp, [r0], #4
   15564:	f04f 0b00 	mov.w	fp, #0
   15568:	fba2 1a03 	umull	r1, sl, r2, r3
   1556c:	1849      	adds	r1, r1, r1
   1556e:	eb5a 0a0a 	adcs.w	sl, sl, sl
   15572:	f14b 0b00 	adc.w	fp, fp, #0
   15576:	eb1c 0c01 	adds.w	ip, ip, r1
   1557a:	eb58 080a 	adcs.w	r8, r8, sl
   1557e:	f14b 0b00 	adc.w	fp, fp, #0
   15582:	f840 cb04 	str.w	ip, [r0], #4
   15586:	fba3 1a03 	umull	r1, sl, r3, r3
   1558a:	eb18 0801 	adds.w	r8, r8, r1
   1558e:	eb5b 0b0a 	adcs.w	fp, fp, sl
   15592:	e8a0 0900 	stmia.w	r0!, {r8, fp}
    #endif
        : "+r" (r0), "+r" (r1)
        :
        : "r2", "r3", "r4", "r5", "r6", "r7", "r8", "r9", "r10", "r11", "r12", "r14", "cc", "memory"
    );
}
   15596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1559a:	bf00      	nop
   1559c:	0000      	movs	r0, r0
	...

000155a0 <vli_mmod_fast>:
            carry -= vli_sub(result, result, curve_p);
        }
    }
}
#elif uECC_WORD_SIZE == 4
static void vli_mmod_fast(uint32_t *RESTRICT result, uint32_t *RESTRICT product) {
   155a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   155a2:	b089      	sub	sp, #36	; 0x24
    /* t */
    vli_set(result, product);

    /* s1 */
    tmp[0] = tmp[1] = tmp[2] = 0;
    tmp[3] = product[11];
   155a4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   155a6:	9303      	str	r3, [sp, #12]
    tmp[4] = product[12];
   155a8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   155aa:	9304      	str	r3, [sp, #16]
    tmp[5] = product[13];
   155ac:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   155ae:	9305      	str	r3, [sp, #20]
    tmp[6] = product[14];
   155b0:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   155b2:	9306      	str	r3, [sp, #24]
        dest[i] = src[i];
   155b4:	468c      	mov	ip, r1
    tmp[7] = product[15];
   155b6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   155b8:	9307      	str	r3, [sp, #28]
static void vli_mmod_fast(uint32_t *RESTRICT result, uint32_t *RESTRICT product) {
   155ba:	460e      	mov	r6, r1
   155bc:	4604      	mov	r4, r0
        dest[i] = src[i];
   155be:	4605      	mov	r5, r0
   155c0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   155c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   155c6:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
    tmp[0] = tmp[1] = tmp[2] = 0;
   155ca:	ed9f 7b65 	vldr	d7, [pc, #404]	; 15760 <vli_mmod_fast+0x1c0>
        dest[i] = src[i];
   155ce:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    tmp[0] = tmp[1] = tmp[2] = 0;
   155d2:	2700      	movs	r7, #0
    carry = vli_add(tmp, tmp, tmp);
   155d4:	466a      	mov	r2, sp
   155d6:	4669      	mov	r1, sp
   155d8:	4668      	mov	r0, sp
    tmp[0] = tmp[1] = tmp[2] = 0;
   155da:	ed8d 7b00 	vstr	d7, [sp]
   155de:	9702      	str	r7, [sp, #8]
    carry = vli_add(tmp, tmp, tmp);
   155e0:	f7ff fabe 	bl	14b60 <vli_add>
    carry += vli_add(result, result, tmp);
   155e4:	466a      	mov	r2, sp
    carry = vli_add(tmp, tmp, tmp);
   155e6:	4605      	mov	r5, r0
    carry += vli_add(result, result, tmp);
   155e8:	4621      	mov	r1, r4
   155ea:	4620      	mov	r0, r4
   155ec:	f7ff fab8 	bl	14b60 <vli_add>

    /* s2 */
    tmp[3] = product[12];
   155f0:	6b33      	ldr	r3, [r6, #48]	; 0x30
   155f2:	9303      	str	r3, [sp, #12]
    tmp[4] = product[13];
   155f4:	6b73      	ldr	r3, [r6, #52]	; 0x34
   155f6:	9304      	str	r3, [sp, #16]
    tmp[5] = product[14];
   155f8:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   155fa:	9305      	str	r3, [sp, #20]
    carry += vli_add(result, result, tmp);
   155fc:	4405      	add	r5, r0
    tmp[6] = product[15];
   155fe:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   15600:	9306      	str	r3, [sp, #24]
    tmp[7] = 0;
    carry += vli_add(tmp, tmp, tmp);
   15602:	466a      	mov	r2, sp
   15604:	4669      	mov	r1, sp
   15606:	4668      	mov	r0, sp
    tmp[7] = 0;
   15608:	9707      	str	r7, [sp, #28]
    carry += vli_add(tmp, tmp, tmp);
   1560a:	f7ff faa9 	bl	14b60 <vli_add>
    carry += vli_add(result, result, tmp);
   1560e:	466a      	mov	r2, sp
    carry += vli_add(tmp, tmp, tmp);
   15610:	4405      	add	r5, r0
    carry += vli_add(result, result, tmp);
   15612:	4621      	mov	r1, r4
   15614:	4620      	mov	r0, r4
   15616:	f7ff faa3 	bl	14b60 <vli_add>

    /* s3 */
    tmp[0] = product[8];
   1561a:	6a33      	ldr	r3, [r6, #32]
   1561c:	9300      	str	r3, [sp, #0]
    tmp[1] = product[9];
   1561e:	6a73      	ldr	r3, [r6, #36]	; 0x24
   15620:	9301      	str	r3, [sp, #4]
    tmp[2] = product[10];
   15622:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   15624:	9302      	str	r3, [sp, #8]
    tmp[3] = tmp[4] = tmp[5] = 0;
    tmp[6] = product[14];
   15626:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   15628:	9306      	str	r3, [sp, #24]
    carry += vli_add(result, result, tmp);
   1562a:	4405      	add	r5, r0
    tmp[7] = product[15];
   1562c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   1562e:	9307      	str	r3, [sp, #28]
    carry += vli_add(result, result, tmp);
   15630:	466a      	mov	r2, sp
   15632:	4621      	mov	r1, r4
   15634:	4620      	mov	r0, r4
    tmp[3] = tmp[4] = tmp[5] = 0;
   15636:	ed8d 7b04 	vstr	d7, [sp, #16]
   1563a:	9703      	str	r7, [sp, #12]
    carry += vli_add(result, result, tmp);
   1563c:	f7ff fa90 	bl	14b60 <vli_add>
   15640:	6b73      	ldr	r3, [r6, #52]	; 0x34

    /* s4 */
    tmp[0] = product[9];
   15642:	9303      	str	r3, [sp, #12]
   15644:	9306      	str	r3, [sp, #24]
   15646:	6a33      	ldr	r3, [r6, #32]
   15648:	9307      	str	r3, [sp, #28]
   1564a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1564c:	9301      	str	r3, [sp, #4]
   1564e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   15650:	9302      	str	r3, [sp, #8]
   15652:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   15654:	9304      	str	r3, [sp, #16]
   15656:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   15658:	9305      	str	r3, [sp, #20]
    carry += vli_add(result, result, tmp);
   1565a:	4405      	add	r5, r0
    tmp[0] = product[9];
   1565c:	6a73      	ldr	r3, [r6, #36]	; 0x24
   1565e:	9300      	str	r3, [sp, #0]
    tmp[3] = product[13];
    tmp[4] = product[14];
    tmp[5] = product[15];
    tmp[6] = product[13];
    tmp[7] = product[8];
    carry += vli_add(result, result, tmp);
   15660:	466a      	mov	r2, sp
   15662:	4621      	mov	r1, r4
   15664:	4620      	mov	r0, r4
   15666:	f7ff fa7b 	bl	14b60 <vli_add>

    /* d1 */
    tmp[0] = product[11];
   1566a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   1566c:	9300      	str	r3, [sp, #0]
    tmp[1] = product[12];
   1566e:	6b33      	ldr	r3, [r6, #48]	; 0x30
   15670:	9301      	str	r3, [sp, #4]
    tmp[2] = product[13];
   15672:	6b73      	ldr	r3, [r6, #52]	; 0x34
   15674:	9302      	str	r3, [sp, #8]
    tmp[3] = tmp[4] = tmp[5] = 0;
    tmp[6] = product[8];
   15676:	6a33      	ldr	r3, [r6, #32]
   15678:	9306      	str	r3, [sp, #24]
    carry += vli_add(result, result, tmp);
   1567a:	4405      	add	r5, r0
    tmp[7] = product[10];
   1567c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1567e:	9307      	str	r3, [sp, #28]
    carry -= vli_sub(result, result, tmp);
   15680:	466a      	mov	r2, sp
   15682:	4621      	mov	r1, r4
   15684:	4620      	mov	r0, r4
    tmp[3] = tmp[4] = tmp[5] = 0;
   15686:	ed8d 7b04 	vstr	d7, [sp, #16]
   1568a:	9703      	str	r7, [sp, #12]
    carry -= vli_sub(result, result, tmp);
   1568c:	f7ff faa8 	bl	14be0 <vli_sub>

    /* d2 */
    tmp[0] = product[12];
   15690:	6b33      	ldr	r3, [r6, #48]	; 0x30
   15692:	9300      	str	r3, [sp, #0]
    tmp[1] = product[13];
   15694:	6b73      	ldr	r3, [r6, #52]	; 0x34
   15696:	9301      	str	r3, [sp, #4]
    tmp[2] = product[14];
   15698:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   1569a:	9302      	str	r3, [sp, #8]
    tmp[3] = product[15];
   1569c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   1569e:	9303      	str	r3, [sp, #12]
    tmp[4] = tmp[5] = 0;
    tmp[6] = product[9];
   156a0:	6a73      	ldr	r3, [r6, #36]	; 0x24
   156a2:	9306      	str	r3, [sp, #24]
    carry -= vli_sub(result, result, tmp);
   156a4:	1a2d      	subs	r5, r5, r0
    tmp[7] = product[11];
   156a6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   156a8:	9307      	str	r3, [sp, #28]
    carry -= vli_sub(result, result, tmp);
   156aa:	466a      	mov	r2, sp
   156ac:	4621      	mov	r1, r4
   156ae:	4620      	mov	r0, r4
    tmp[4] = tmp[5] = 0;
   156b0:	ed8d 7b04 	vstr	d7, [sp, #16]
    carry -= vli_sub(result, result, tmp);
   156b4:	f7ff fa94 	bl	14be0 <vli_sub>

    /* d3 */
    tmp[0] = product[13];
   156b8:	6b73      	ldr	r3, [r6, #52]	; 0x34
   156ba:	9300      	str	r3, [sp, #0]
    tmp[1] = product[14];
   156bc:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   156be:	9301      	str	r3, [sp, #4]
    tmp[2] = product[15];
   156c0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   156c2:	9302      	str	r3, [sp, #8]
    tmp[3] = product[8];
   156c4:	6a33      	ldr	r3, [r6, #32]
   156c6:	9303      	str	r3, [sp, #12]
    tmp[4] = product[9];
   156c8:	6a73      	ldr	r3, [r6, #36]	; 0x24
   156ca:	9304      	str	r3, [sp, #16]
    tmp[5] = product[10];
   156cc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   156ce:	9305      	str	r3, [sp, #20]
    carry -= vli_sub(result, result, tmp);
   156d0:	1a2d      	subs	r5, r5, r0
    tmp[6] = 0;
    tmp[7] = product[12];
   156d2:	6b33      	ldr	r3, [r6, #48]	; 0x30
   156d4:	9307      	str	r3, [sp, #28]
    carry -= vli_sub(result, result, tmp);
   156d6:	466a      	mov	r2, sp
   156d8:	4621      	mov	r1, r4
   156da:	4620      	mov	r0, r4
    tmp[6] = 0;
   156dc:	9706      	str	r7, [sp, #24]
    carry -= vli_sub(result, result, tmp);
   156de:	f7ff fa7f 	bl	14be0 <vli_sub>
    tmp[2] = 0;
    tmp[3] = product[9];
    tmp[4] = product[10];
    tmp[5] = product[11];
    tmp[6] = 0;
    tmp[7] = product[13];
   156e2:	6b73      	ldr	r3, [r6, #52]	; 0x34
   156e4:	9307      	str	r3, [sp, #28]
    tmp[0] = product[14];
   156e6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   156e8:	9300      	str	r3, [sp, #0]
    tmp[1] = product[15];
   156ea:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   156ec:	9301      	str	r3, [sp, #4]
    tmp[3] = product[9];
   156ee:	6a73      	ldr	r3, [r6, #36]	; 0x24
   156f0:	9303      	str	r3, [sp, #12]
    tmp[4] = product[10];
   156f2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   156f4:	9304      	str	r3, [sp, #16]
    carry -= vli_sub(result, result, tmp);
   156f6:	1a2d      	subs	r5, r5, r0
    tmp[5] = product[11];
   156f8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    tmp[2] = 0;
   156fa:	9702      	str	r7, [sp, #8]
    carry -= vli_sub(result, result, tmp);
   156fc:	466a      	mov	r2, sp
   156fe:	4621      	mov	r1, r4
   15700:	4620      	mov	r0, r4
    tmp[6] = 0;
   15702:	9706      	str	r7, [sp, #24]
    tmp[5] = product[11];
   15704:	9305      	str	r3, [sp, #20]
    carry -= vli_sub(result, result, tmp);
   15706:	f7ff fa6b 	bl	14be0 <vli_sub>

    if (carry < 0) {
   1570a:	1a2d      	subs	r5, r5, r0
        do {
            carry += vli_add(result, result, curve_p);
   1570c:	4e16      	ldr	r6, [pc, #88]	; (15768 <vli_mmod_fast+0x1c8>)
    if (carry < 0) {
   1570e:	d41d      	bmi.n	1574c <vli_mmod_fast+0x1ac>
        } while (carry < 0);
    } else {
        while (carry || vli_cmp(curve_p, result) != 1) {
   15710:	b9ad      	cbnz	r5, 1573e <vli_mmod_fast+0x19e>
        if (left[i] > right[i]) {
   15712:	69e3      	ldr	r3, [r4, #28]
   15714:	3301      	adds	r3, #1
   15716:	d120      	bne.n	1575a <vli_mmod_fast+0x1ba>
   15718:	69a3      	ldr	r3, [r4, #24]
   1571a:	b1f3      	cbz	r3, 1575a <vli_mmod_fast+0x1ba>
        } else if (left[i] < right[i]) {
   1571c:	2b01      	cmp	r3, #1
   1571e:	d10e      	bne.n	1573e <vli_mmod_fast+0x19e>
   15720:	6963      	ldr	r3, [r4, #20]
   15722:	b963      	cbnz	r3, 1573e <vli_mmod_fast+0x19e>
   15724:	6923      	ldr	r3, [r4, #16]
   15726:	b953      	cbnz	r3, 1573e <vli_mmod_fast+0x19e>
   15728:	68e3      	ldr	r3, [r4, #12]
   1572a:	b943      	cbnz	r3, 1573e <vli_mmod_fast+0x19e>
        if (left[i] > right[i]) {
   1572c:	68a3      	ldr	r3, [r4, #8]
   1572e:	3301      	adds	r3, #1
   15730:	d113      	bne.n	1575a <vli_mmod_fast+0x1ba>
   15732:	6863      	ldr	r3, [r4, #4]
   15734:	3301      	adds	r3, #1
   15736:	d110      	bne.n	1575a <vli_mmod_fast+0x1ba>
   15738:	6823      	ldr	r3, [r4, #0]
   1573a:	3301      	adds	r3, #1
   1573c:	d10d      	bne.n	1575a <vli_mmod_fast+0x1ba>
            carry -= vli_sub(result, result, curve_p);
   1573e:	4632      	mov	r2, r6
   15740:	4621      	mov	r1, r4
   15742:	4620      	mov	r0, r4
   15744:	f7ff fa4c 	bl	14be0 <vli_sub>
   15748:	1a2d      	subs	r5, r5, r0
   1574a:	e7e1      	b.n	15710 <vli_mmod_fast+0x170>
            carry += vli_add(result, result, curve_p);
   1574c:	4632      	mov	r2, r6
   1574e:	4621      	mov	r1, r4
   15750:	4620      	mov	r0, r4
   15752:	f7ff fa05 	bl	14b60 <vli_add>
        } while (carry < 0);
   15756:	182d      	adds	r5, r5, r0
   15758:	d4f8      	bmi.n	1574c <vli_mmod_fast+0x1ac>
        }
    }
}
   1575a:	b009      	add	sp, #36	; 0x24
   1575c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1575e:	bf00      	nop
	...
   15768:	00024790 	.word	0x00024790

0001576c <vli_modInv.part.0>:
#define EVEN(vli) (!(vli[0] & 1))
/* Computes result = (1 / input) % mod. All VLIs are the same size.
   See "From Euclid's GCD to Montgomery Multiplication to the Great Divide"
   https://labs.oracle.com/techrep/2001/smli_tr-2001-95.pdf */
#if !defined(asm_modInv) || !asm_modInv
static void vli_modInv(uECC_word_t *result, const uECC_word_t *input, const uECC_word_t *mod) {
   1576c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15770:	ed2d 8b02 	vpush	{d8}
   15774:	b0a5      	sub	sp, #148	; 0x94
        dest[i] = src[i];
   15776:	460c      	mov	r4, r1
static void vli_modInv(uECC_word_t *result, const uECC_word_t *input, const uECC_word_t *mod) {
   15778:	9003      	str	r0, [sp, #12]
        dest[i] = src[i];
   1577a:	4616      	mov	r6, r2
static void vli_modInv(uECC_word_t *result, const uECC_word_t *input, const uECC_word_t *mod) {
   1577c:	ee08 2a10 	vmov	s16, r2
        dest[i] = src[i];
   15780:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   15782:	af04      	add	r7, sp, #16
   15784:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   15786:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1578a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   1578e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   15790:	ad0c      	add	r5, sp, #48	; 0x30
   15792:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   15794:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
        vli[i] = 0;
   15798:	f04f 0c00 	mov.w	ip, #0
        dest[i] = src[i];
   1579c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    }

    vli_set(a, input);
    vli_set(b, mod);
    vli_clear(u);
    u[0] = 1;
   157a0:	f04f 0e01 	mov.w	lr, #1
        vli[i] = 0;
   157a4:	4661      	mov	r1, ip
   157a6:	2220      	movs	r2, #32
   157a8:	a81c      	add	r0, sp, #112	; 0x70
    u[0] = 1;
   157aa:	e9cd ec14 	strd	lr, ip, [sp, #80]	; 0x50
        vli[i] = 0;
   157ae:	e9cd cc16 	strd	ip, ip, [sp, #88]	; 0x58
   157b2:	e9cd cc18 	strd	ip, ip, [sp, #96]	; 0x60
   157b6:	e9cd cc1a 	strd	ip, ip, [sp, #104]	; 0x68
   157ba:	f00b fe47 	bl	2144c <memset>
        if (left[i] > right[i]) {
   157be:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   157c2:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
    vli_clear(v);
    while ((cmpResult = vli_cmp(a, b)) != 0) {
        carry = 0;
        if (EVEN(a)) {
   157c6:	9c04      	ldr	r4, [sp, #16]
        if (left[i] > right[i]) {
   157c8:	45da      	cmp	sl, fp
   157ca:	d844      	bhi.n	15856 <vli_modInv.part.0+0xea>
        } else if (left[i] < right[i]) {
   157cc:	f0c0 80e6 	bcc.w	1599c <vli_modInv.part.0+0x230>
        if (left[i] > right[i]) {
   157d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   157d2:	9e12      	ldr	r6, [sp, #72]	; 0x48
   157d4:	42b3      	cmp	r3, r6
   157d6:	f200 8187 	bhi.w	15ae8 <vli_modInv.part.0+0x37c>
        } else if (left[i] < right[i]) {
   157da:	f0c0 81ef 	bcc.w	15bbc <vli_modInv.part.0+0x450>
        if (left[i] > right[i]) {
   157de:	9a09      	ldr	r2, [sp, #36]	; 0x24
   157e0:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
   157e4:	4562      	cmp	r2, ip
   157e6:	f200 81fa 	bhi.w	15bde <vli_modInv.part.0+0x472>
        } else if (left[i] < right[i]) {
   157ea:	f0c0 8273 	bcc.w	15cd4 <vli_modInv.part.0+0x568>
        if (left[i] > right[i]) {
   157ee:	9908      	ldr	r1, [sp, #32]
   157f0:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   157f4:	4571      	cmp	r1, lr
   157f6:	f200 8276 	bhi.w	15ce6 <vli_modInv.part.0+0x57a>
        } else if (left[i] < right[i]) {
   157fa:	f0c0 827d 	bcc.w	15cf8 <vli_modInv.part.0+0x58c>
        if (left[i] > right[i]) {
   157fe:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   15800:	9807      	ldr	r0, [sp, #28]
   15802:	9501      	str	r5, [sp, #4]
   15804:	42a8      	cmp	r0, r5
   15806:	f200 8280 	bhi.w	15d0a <vli_modInv.part.0+0x59e>
        } else if (left[i] < right[i]) {
   1580a:	f0c0 8287 	bcc.w	15d1c <vli_modInv.part.0+0x5b0>
        if (left[i] > right[i]) {
   1580e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   15810:	9d06      	ldr	r5, [sp, #24]
   15812:	9702      	str	r7, [sp, #8]
   15814:	42bd      	cmp	r5, r7
   15816:	f200 828b 	bhi.w	15d30 <vli_modInv.part.0+0x5c4>
        } else if (left[i] < right[i]) {
   1581a:	f0c0 8297 	bcc.w	15d4c <vli_modInv.part.0+0x5e0>
        if (left[i] > right[i]) {
   1581e:	9f05      	ldr	r7, [sp, #20]
   15820:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   15824:	454f      	cmp	r7, r9
   15826:	f200 829c 	bhi.w	15d62 <vli_modInv.part.0+0x5f6>
        } else if (left[i] < right[i]) {
   1582a:	f0c0 82a6 	bcc.w	15d7a <vli_modInv.part.0+0x60e>
        if (left[i] > right[i]) {
   1582e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   15832:	4544      	cmp	r4, r8
   15834:	f200 82ac 	bhi.w	15d90 <vli_modInv.part.0+0x624>
        } else if (left[i] < right[i]) {
   15838:	f0c0 82b3 	bcc.w	15da2 <vli_modInv.part.0+0x636>
        dest[i] = src[i];
   1583c:	ac14      	add	r4, sp, #80	; 0x50
   1583e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   15840:	9d03      	ldr	r5, [sp, #12]
   15842:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   15844:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   15848:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                v[uECC_WORDS - 1] |= HIGH_BIT_SET;
            }
        }
    }
    vli_set(result, u);
}
   1584c:	b025      	add	sp, #148	; 0x94
   1584e:	ecbd 8b02 	vpop	{d8}
   15852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (EVEN(a)) {
   15856:	07e5      	lsls	r5, r4, #31
   15858:	f140 81d7 	bpl.w	15c0a <vli_modInv.part.0+0x49e>
        } else if (EVEN(b)) {
   1585c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   15860:	f018 0f01 	tst.w	r8, #1
   15864:	f000 82a6 	beq.w	15db4 <vli_modInv.part.0+0x648>
            vli_sub(a, a, b);
   15868:	a904      	add	r1, sp, #16
   1586a:	aa0c      	add	r2, sp, #48	; 0x30
   1586c:	4608      	mov	r0, r1
   1586e:	f7ff f9b7 	bl	14be0 <vli_sub>
        uECC_word_t temp = *vli;
   15872:	e9dd 0509 	ldrd	r0, r5, [sp, #36]	; 0x24
   15876:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   15878:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
        *vli = (temp >> 1) | carry;
   1587c:	0873      	lsrs	r3, r6, #1
   1587e:	086f      	lsrs	r7, r5, #1
   15880:	ea47 77c6 	orr.w	r7, r7, r6, lsl #31
   15884:	930b      	str	r3, [sp, #44]	; 0x2c
   15886:	0846      	lsrs	r6, r0, #1
        uECC_word_t temp = *vli;
   15888:	e9dd 3405 	ldrd	r3, r4, [sp, #20]
        *vli = (temp >> 1) | carry;
   1588c:	ea46 76c5 	orr.w	r6, r6, r5, lsl #31
   15890:	084d      	lsrs	r5, r1, #1
   15892:	ea45 75c0 	orr.w	r5, r5, r0, lsl #31
   15896:	0850      	lsrs	r0, r2, #1
   15898:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
   1589c:	0861      	lsrs	r1, r4, #1
   1589e:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
   158a2:	085a      	lsrs	r2, r3, #1
   158a4:	ea42 72c4 	orr.w	r2, r2, r4, lsl #31
   158a8:	9205      	str	r2, [sp, #20]
   158aa:	9a04      	ldr	r2, [sp, #16]
   158ac:	970a      	str	r7, [sp, #40]	; 0x28
        carry = temp << (uECC_WORD_BITS - 1);
   158ae:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
   158b0:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   158b4:	9304      	str	r3, [sp, #16]
        if (left[i] > right[i]) {
   158b6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   158b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
        *vli = (temp >> 1) | carry;
   158ba:	9609      	str	r6, [sp, #36]	; 0x24
        if (left[i] > right[i]) {
   158bc:	429a      	cmp	r2, r3
        *vli = (temp >> 1) | carry;
   158be:	9508      	str	r5, [sp, #32]
   158c0:	9007      	str	r0, [sp, #28]
   158c2:	9106      	str	r1, [sp, #24]
        if (left[i] > right[i]) {
   158c4:	d82a      	bhi.n	1591c <vli_modInv.part.0+0x1b0>
        } else if (left[i] < right[i]) {
   158c6:	f0c0 8183 	bcc.w	15bd0 <vli_modInv.part.0+0x464>
        if (left[i] > right[i]) {
   158ca:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   158cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
   158ce:	429a      	cmp	r2, r3
   158d0:	d824      	bhi.n	1591c <vli_modInv.part.0+0x1b0>
        } else if (left[i] < right[i]) {
   158d2:	f0c0 817d 	bcc.w	15bd0 <vli_modInv.part.0+0x464>
        if (left[i] > right[i]) {
   158d6:	9a19      	ldr	r2, [sp, #100]	; 0x64
   158d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
   158da:	429a      	cmp	r2, r3
   158dc:	d81e      	bhi.n	1591c <vli_modInv.part.0+0x1b0>
        } else if (left[i] < right[i]) {
   158de:	f0c0 8177 	bcc.w	15bd0 <vli_modInv.part.0+0x464>
        if (left[i] > right[i]) {
   158e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   158e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
   158e6:	429a      	cmp	r2, r3
   158e8:	d818      	bhi.n	1591c <vli_modInv.part.0+0x1b0>
        } else if (left[i] < right[i]) {
   158ea:	f0c0 8171 	bcc.w	15bd0 <vli_modInv.part.0+0x464>
        if (left[i] > right[i]) {
   158ee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   158f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   158f2:	429a      	cmp	r2, r3
   158f4:	d812      	bhi.n	1591c <vli_modInv.part.0+0x1b0>
        } else if (left[i] < right[i]) {
   158f6:	f0c0 816b 	bcc.w	15bd0 <vli_modInv.part.0+0x464>
        if (left[i] > right[i]) {
   158fa:	9a16      	ldr	r2, [sp, #88]	; 0x58
   158fc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   158fe:	429a      	cmp	r2, r3
   15900:	d80c      	bhi.n	1591c <vli_modInv.part.0+0x1b0>
        } else if (left[i] < right[i]) {
   15902:	f0c0 8165 	bcc.w	15bd0 <vli_modInv.part.0+0x464>
        if (left[i] > right[i]) {
   15906:	9a15      	ldr	r2, [sp, #84]	; 0x54
   15908:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1590a:	429a      	cmp	r2, r3
   1590c:	d806      	bhi.n	1591c <vli_modInv.part.0+0x1b0>
        } else if (left[i] < right[i]) {
   1590e:	f0c0 815f 	bcc.w	15bd0 <vli_modInv.part.0+0x464>
   15912:	9a14      	ldr	r2, [sp, #80]	; 0x50
   15914:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   15916:	429a      	cmp	r2, r3
   15918:	f0c0 815a 	bcc.w	15bd0 <vli_modInv.part.0+0x464>
            vli_sub(u, u, v);
   1591c:	a914      	add	r1, sp, #80	; 0x50
   1591e:	aa1c      	add	r2, sp, #112	; 0x70
   15920:	4608      	mov	r0, r1
   15922:	f7ff f95d 	bl	14be0 <vli_sub>
            if (!EVEN(u)) {
   15926:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15928:	f013 0001 	ands.w	r0, r3, #1
   1592c:	d12e      	bne.n	1598c <vli_modInv.part.0+0x220>
        uECC_word_t temp = *vli;
   1592e:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
   15932:	e9dd 5417 	ldrd	r5, r4, [sp, #92]	; 0x5c
        *vli = (temp >> 1) | carry;
   15936:	085b      	lsrs	r3, r3, #1
   15938:	ea43 73c7 	orr.w	r3, r3, r7, lsl #31
   1593c:	087f      	lsrs	r7, r7, #1
        uECC_word_t temp = *vli;
   1593e:	e9dd 1219 	ldrd	r1, r2, [sp, #100]	; 0x64
        *vli = (temp >> 1) | carry;
   15942:	ea47 77c6 	orr.w	r7, r7, r6, lsl #31
   15946:	0876      	lsrs	r6, r6, #1
   15948:	ea46 76c5 	orr.w	r6, r6, r5, lsl #31
   1594c:	086d      	lsrs	r5, r5, #1
   1594e:	ea45 75c4 	orr.w	r5, r5, r4, lsl #31
   15952:	0864      	lsrs	r4, r4, #1
   15954:	ea44 74c1 	orr.w	r4, r4, r1, lsl #31
   15958:	9314      	str	r3, [sp, #80]	; 0x50
   1595a:	0849      	lsrs	r1, r1, #1
        uECC_word_t temp = *vli;
   1595c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
        *vli = (temp >> 1) | carry;
   1595e:	9715      	str	r7, [sp, #84]	; 0x54
   15960:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
   15964:	0852      	lsrs	r2, r2, #1
   15966:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
   1596a:	085b      	lsrs	r3, r3, #1
   1596c:	9616      	str	r6, [sp, #88]	; 0x58
   1596e:	9517      	str	r5, [sp, #92]	; 0x5c
   15970:	9418      	str	r4, [sp, #96]	; 0x60
   15972:	9119      	str	r1, [sp, #100]	; 0x64
   15974:	921a      	str	r2, [sp, #104]	; 0x68
   15976:	931b      	str	r3, [sp, #108]	; 0x6c
            if (carry) {
   15978:	b110      	cbz	r0, 15980 <vli_modInv.part.0+0x214>
                u[uECC_WORDS - 1] |= HIGH_BIT_SET;
   1597a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1597e:	931b      	str	r3, [sp, #108]	; 0x6c
        if (left[i] > right[i]) {
   15980:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   15984:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
        if (EVEN(a)) {
   15988:	9c04      	ldr	r4, [sp, #16]
   1598a:	e71d      	b.n	157c8 <vli_modInv.part.0+0x5c>
                carry = vli_add(u, u, mod);
   1598c:	a914      	add	r1, sp, #80	; 0x50
   1598e:	ee18 2a10 	vmov	r2, s16
   15992:	4608      	mov	r0, r1
   15994:	f7ff f8e4 	bl	14b60 <vli_add>
        uECC_word_t temp = *vli;
   15998:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1599a:	e7c8      	b.n	1592e <vli_modInv.part.0+0x1c2>
        if (EVEN(a)) {
   1599c:	07e3      	lsls	r3, r4, #31
   1599e:	f140 8134 	bpl.w	15c0a <vli_modInv.part.0+0x49e>
        } else if (EVEN(b)) {
   159a2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   159a6:	f018 0f01 	tst.w	r8, #1
   159aa:	f000 8203 	beq.w	15db4 <vli_modInv.part.0+0x648>
            vli_sub(b, b, a);
   159ae:	a90c      	add	r1, sp, #48	; 0x30
   159b0:	aa04      	add	r2, sp, #16
   159b2:	4608      	mov	r0, r1
   159b4:	f7ff f914 	bl	14be0 <vli_sub>
        uECC_word_t temp = *vli;
   159b8:	e9dd 4511 	ldrd	r4, r5, [sp, #68]	; 0x44
   159bc:	e9dd 0e0f 	ldrd	r0, lr, [sp, #60]	; 0x3c
   159c0:	e9dd 370d 	ldrd	r3, r7, [sp, #52]	; 0x34
   159c4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
        *vli = (temp >> 1) | carry;
   159c6:	0869      	lsrs	r1, r5, #1
   159c8:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
   159cc:	0866      	lsrs	r6, r4, #1
   159ce:	ea46 76c5 	orr.w	r6, r6, r5, lsl #31
   159d2:	9112      	str	r1, [sp, #72]	; 0x48
   159d4:	ea4f 055e 	mov.w	r5, lr, lsr #1
   159d8:	0879      	lsrs	r1, r7, #1
   159da:	0852      	lsrs	r2, r2, #1
   159dc:	ea45 75c4 	orr.w	r5, r5, r4, lsl #31
   159e0:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
   159e4:	0844      	lsrs	r4, r0, #1
   159e6:	980c      	ldr	r0, [sp, #48]	; 0x30
   159e8:	9213      	str	r2, [sp, #76]	; 0x4c
   159ea:	085a      	lsrs	r2, r3, #1
        carry = temp << (uECC_WORD_BITS - 1);
   159ec:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
   159ee:	ea44 74ce 	orr.w	r4, r4, lr, lsl #31
   159f2:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
   159f6:	940f      	str	r4, [sp, #60]	; 0x3c
   159f8:	930c      	str	r3, [sp, #48]	; 0x30
        if (left[i] > right[i]) {
   159fa:	9c23      	ldr	r4, [sp, #140]	; 0x8c
   159fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
        *vli = (temp >> 1) | carry;
   159fe:	9611      	str	r6, [sp, #68]	; 0x44
   15a00:	ea42 72c7 	orr.w	r2, r2, r7, lsl #31
        if (left[i] > right[i]) {
   15a04:	429c      	cmp	r4, r3
        *vli = (temp >> 1) | carry;
   15a06:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
   15a0a:	9510      	str	r5, [sp, #64]	; 0x40
        if (left[i] > right[i]) {
   15a0c:	d822      	bhi.n	15a54 <vli_modInv.part.0+0x2e8>
        } else if (left[i] < right[i]) {
   15a0e:	d364      	bcc.n	15ada <vli_modInv.part.0+0x36e>
        if (left[i] > right[i]) {
   15a10:	9a22      	ldr	r2, [sp, #136]	; 0x88
   15a12:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   15a14:	429a      	cmp	r2, r3
   15a16:	d81d      	bhi.n	15a54 <vli_modInv.part.0+0x2e8>
        } else if (left[i] < right[i]) {
   15a18:	d35f      	bcc.n	15ada <vli_modInv.part.0+0x36e>
        if (left[i] > right[i]) {
   15a1a:	9a21      	ldr	r2, [sp, #132]	; 0x84
   15a1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   15a1e:	429a      	cmp	r2, r3
   15a20:	d818      	bhi.n	15a54 <vli_modInv.part.0+0x2e8>
        } else if (left[i] < right[i]) {
   15a22:	d35a      	bcc.n	15ada <vli_modInv.part.0+0x36e>
        if (left[i] > right[i]) {
   15a24:	9a20      	ldr	r2, [sp, #128]	; 0x80
   15a26:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15a28:	429a      	cmp	r2, r3
   15a2a:	d813      	bhi.n	15a54 <vli_modInv.part.0+0x2e8>
        } else if (left[i] < right[i]) {
   15a2c:	d355      	bcc.n	15ada <vli_modInv.part.0+0x36e>
        if (left[i] > right[i]) {
   15a2e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   15a30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15a32:	429a      	cmp	r2, r3
   15a34:	d80e      	bhi.n	15a54 <vli_modInv.part.0+0x2e8>
        } else if (left[i] < right[i]) {
   15a36:	d350      	bcc.n	15ada <vli_modInv.part.0+0x36e>
        if (left[i] > right[i]) {
   15a38:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   15a3a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   15a3c:	429a      	cmp	r2, r3
   15a3e:	d809      	bhi.n	15a54 <vli_modInv.part.0+0x2e8>
        } else if (left[i] < right[i]) {
   15a40:	d34b      	bcc.n	15ada <vli_modInv.part.0+0x36e>
        if (left[i] > right[i]) {
   15a42:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   15a44:	9b15      	ldr	r3, [sp, #84]	; 0x54
   15a46:	429a      	cmp	r2, r3
   15a48:	d804      	bhi.n	15a54 <vli_modInv.part.0+0x2e8>
        } else if (left[i] < right[i]) {
   15a4a:	d346      	bcc.n	15ada <vli_modInv.part.0+0x36e>
   15a4c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   15a4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15a50:	429a      	cmp	r2, r3
   15a52:	d342      	bcc.n	15ada <vli_modInv.part.0+0x36e>
            vli_sub(v, v, u);
   15a54:	a91c      	add	r1, sp, #112	; 0x70
   15a56:	aa14      	add	r2, sp, #80	; 0x50
   15a58:	4608      	mov	r0, r1
   15a5a:	f7ff f8c1 	bl	14be0 <vli_sub>
            if (!EVEN(v)) {
   15a5e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   15a60:	f013 0001 	ands.w	r0, r3, #1
   15a64:	d131      	bne.n	15aca <vli_modInv.part.0+0x35e>
        uECC_word_t temp = *vli;
   15a66:	e9dd c71d 	ldrd	ip, r7, [sp, #116]	; 0x74
   15a6a:	e9dd 641f 	ldrd	r6, r4, [sp, #124]	; 0x7c
        *vli = (temp >> 1) | carry;
   15a6e:	085b      	lsrs	r3, r3, #1
   15a70:	ea43 73cc 	orr.w	r3, r3, ip, lsl #31
   15a74:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
        uECC_word_t temp = *vli;
   15a78:	e9dd 1221 	ldrd	r1, r2, [sp, #132]	; 0x84
        *vli = (temp >> 1) | carry;
   15a7c:	931c      	str	r3, [sp, #112]	; 0x70
   15a7e:	ea4c 73c7 	orr.w	r3, ip, r7, lsl #31
   15a82:	087f      	lsrs	r7, r7, #1
   15a84:	ea47 77c6 	orr.w	r7, r7, r6, lsl #31
   15a88:	0876      	lsrs	r6, r6, #1
   15a8a:	ea46 76c4 	orr.w	r6, r6, r4, lsl #31
   15a8e:	0864      	lsrs	r4, r4, #1
        uECC_word_t temp = *vli;
   15a90:	9d23      	ldr	r5, [sp, #140]	; 0x8c
        *vli = (temp >> 1) | carry;
   15a92:	931d      	str	r3, [sp, #116]	; 0x74
   15a94:	ea44 74c1 	orr.w	r4, r4, r1, lsl #31
   15a98:	0849      	lsrs	r1, r1, #1
   15a9a:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
   15a9e:	0852      	lsrs	r2, r2, #1
   15aa0:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
   15aa4:	086d      	lsrs	r5, r5, #1
   15aa6:	971e      	str	r7, [sp, #120]	; 0x78
   15aa8:	961f      	str	r6, [sp, #124]	; 0x7c
   15aaa:	9420      	str	r4, [sp, #128]	; 0x80
   15aac:	9121      	str	r1, [sp, #132]	; 0x84
   15aae:	9222      	str	r2, [sp, #136]	; 0x88
   15ab0:	9523      	str	r5, [sp, #140]	; 0x8c
            if (carry) {
   15ab2:	2800      	cmp	r0, #0
   15ab4:	f43f af64 	beq.w	15980 <vli_modInv.part.0+0x214>
                v[uECC_WORDS - 1] |= HIGH_BIT_SET;
   15ab8:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
        if (left[i] > right[i]) {
   15abc:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   15ac0:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
        if (EVEN(a)) {
   15ac4:	9c04      	ldr	r4, [sp, #16]
                v[uECC_WORDS - 1] |= HIGH_BIT_SET;
   15ac6:	9523      	str	r5, [sp, #140]	; 0x8c
   15ac8:	e67e      	b.n	157c8 <vli_modInv.part.0+0x5c>
                carry = vli_add(v, v, mod);
   15aca:	a91c      	add	r1, sp, #112	; 0x70
   15acc:	ee18 2a10 	vmov	r2, s16
   15ad0:	4608      	mov	r0, r1
   15ad2:	f7ff f845 	bl	14b60 <vli_add>
        uECC_word_t temp = *vli;
   15ad6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   15ad8:	e7c5      	b.n	15a66 <vli_modInv.part.0+0x2fa>
                vli_add(v, v, mod);
   15ada:	a91c      	add	r1, sp, #112	; 0x70
   15adc:	ee18 2a10 	vmov	r2, s16
   15ae0:	4608      	mov	r0, r1
   15ae2:	f7ff f83d 	bl	14b60 <vli_add>
   15ae6:	e7b5      	b.n	15a54 <vli_modInv.part.0+0x2e8>
        if (EVEN(a)) {
   15ae8:	07e2      	lsls	r2, r4, #31
   15aea:	f140 8166 	bpl.w	15dba <vli_modInv.part.0+0x64e>
        } else if (EVEN(b)) {
   15aee:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   15af2:	f018 0f01 	tst.w	r8, #1
   15af6:	f47f aeb7 	bne.w	15868 <vli_modInv.part.0+0xfc>
   15afa:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
   15afe:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   15b02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   15b04:	9301      	str	r3, [sp, #4]
   15b06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15b08:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   15b0c:	9302      	str	r3, [sp, #8]
   15b0e:	461a      	mov	r2, r3
        *vli = (temp >> 1) | carry;
   15b10:	ea4f 0858 	mov.w	r8, r8, lsr #1
   15b14:	ea48 73c9 	orr.w	r3, r8, r9, lsl #31
   15b18:	ea4f 0959 	mov.w	r9, r9, lsr #1
   15b1c:	930c      	str	r3, [sp, #48]	; 0x30
   15b1e:	ea49 73c2 	orr.w	r3, r9, r2, lsl #31
   15b22:	930d      	str	r3, [sp, #52]	; 0x34
   15b24:	0853      	lsrs	r3, r2, #1
   15b26:	9a01      	ldr	r2, [sp, #4]
   15b28:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   15b2c:	930e      	str	r3, [sp, #56]	; 0x38
   15b2e:	0853      	lsrs	r3, r2, #1
   15b30:	ea43 73ce 	orr.w	r3, r3, lr, lsl #31
   15b34:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
   15b38:	930f      	str	r3, [sp, #60]	; 0x3c
   15b3a:	ea4e 73cc 	orr.w	r3, lr, ip, lsl #31
   15b3e:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   15b42:	9310      	str	r3, [sp, #64]	; 0x40
   15b44:	ea4c 73c6 	orr.w	r3, ip, r6, lsl #31
   15b48:	9311      	str	r3, [sp, #68]	; 0x44
            if (!EVEN(v)) {
   15b4a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
        *vli = (temp >> 1) | carry;
   15b4c:	0876      	lsrs	r6, r6, #1
   15b4e:	ea46 76cb 	orr.w	r6, r6, fp, lsl #31
   15b52:	ea4f 025b 	mov.w	r2, fp, lsr #1
            if (!EVEN(v)) {
   15b56:	f013 0001 	ands.w	r0, r3, #1
        *vli = (temp >> 1) | carry;
   15b5a:	9612      	str	r6, [sp, #72]	; 0x48
   15b5c:	9213      	str	r2, [sp, #76]	; 0x4c
            if (!EVEN(v)) {
   15b5e:	d147      	bne.n	15bf0 <vli_modInv.part.0+0x484>
   15b60:	4693      	mov	fp, r2
        uECC_word_t temp = *vli;
   15b62:	e9dd c71d 	ldrd	ip, r7, [sp, #116]	; 0x74
   15b66:	e9dd 651f 	ldrd	r6, r5, [sp, #124]	; 0x7c
        *vli = (temp >> 1) | carry;
   15b6a:	085b      	lsrs	r3, r3, #1
   15b6c:	ea43 73cc 	orr.w	r3, r3, ip, lsl #31
   15b70:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
        uECC_word_t temp = *vli;
   15b74:	e9dd 1221 	ldrd	r1, r2, [sp, #132]	; 0x84
        *vli = (temp >> 1) | carry;
   15b78:	931c      	str	r3, [sp, #112]	; 0x70
   15b7a:	ea4c 73c7 	orr.w	r3, ip, r7, lsl #31
   15b7e:	087f      	lsrs	r7, r7, #1
   15b80:	ea47 77c6 	orr.w	r7, r7, r6, lsl #31
   15b84:	0876      	lsrs	r6, r6, #1
   15b86:	ea46 76c5 	orr.w	r6, r6, r5, lsl #31
   15b8a:	086d      	lsrs	r5, r5, #1
   15b8c:	ea45 75c1 	orr.w	r5, r5, r1, lsl #31
   15b90:	931d      	str	r3, [sp, #116]	; 0x74
   15b92:	0849      	lsrs	r1, r1, #1
        uECC_word_t temp = *vli;
   15b94:	9b23      	ldr	r3, [sp, #140]	; 0x8c
        *vli = (temp >> 1) | carry;
   15b96:	971e      	str	r7, [sp, #120]	; 0x78
   15b98:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
   15b9c:	0852      	lsrs	r2, r2, #1
   15b9e:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
   15ba2:	085b      	lsrs	r3, r3, #1
   15ba4:	961f      	str	r6, [sp, #124]	; 0x7c
   15ba6:	9520      	str	r5, [sp, #128]	; 0x80
   15ba8:	9121      	str	r1, [sp, #132]	; 0x84
   15baa:	9222      	str	r2, [sp, #136]	; 0x88
   15bac:	9323      	str	r3, [sp, #140]	; 0x8c
            if (carry) {
   15bae:	2800      	cmp	r0, #0
   15bb0:	f43f ae0a 	beq.w	157c8 <vli_modInv.part.0+0x5c>
                v[uECC_WORDS - 1] |= HIGH_BIT_SET;
   15bb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   15bb8:	9323      	str	r3, [sp, #140]	; 0x8c
   15bba:	e605      	b.n	157c8 <vli_modInv.part.0+0x5c>
        if (EVEN(a)) {
   15bbc:	07e0      	lsls	r0, r4, #31
   15bbe:	f140 80fc 	bpl.w	15dba <vli_modInv.part.0+0x64e>
        } else if (EVEN(b)) {
   15bc2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   15bc6:	f018 0f01 	tst.w	r8, #1
   15bca:	f47f aef0 	bne.w	159ae <vli_modInv.part.0+0x242>
   15bce:	e794      	b.n	15afa <vli_modInv.part.0+0x38e>
                vli_add(u, u, mod);
   15bd0:	a914      	add	r1, sp, #80	; 0x50
   15bd2:	ee18 2a10 	vmov	r2, s16
   15bd6:	4608      	mov	r0, r1
   15bd8:	f7fe ffc2 	bl	14b60 <vli_add>
   15bdc:	e69e      	b.n	1591c <vli_modInv.part.0+0x1b0>
        if (EVEN(a)) {
   15bde:	07e1      	lsls	r1, r4, #31
   15be0:	d515      	bpl.n	15c0e <vli_modInv.part.0+0x4a2>
        } else if (EVEN(b)) {
   15be2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   15be6:	f018 0f01 	tst.w	r8, #1
   15bea:	f47f ae3d 	bne.w	15868 <vli_modInv.part.0+0xfc>
   15bee:	e786      	b.n	15afe <vli_modInv.part.0+0x392>
                carry = vli_add(v, v, mod);
   15bf0:	a91c      	add	r1, sp, #112	; 0x70
   15bf2:	ee18 2a10 	vmov	r2, s16
   15bf6:	4608      	mov	r0, r1
   15bf8:	f7fe ffb2 	bl	14b60 <vli_add>
        uECC_word_t temp = *vli;
   15bfc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
        if (left[i] > right[i]) {
   15bfe:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   15c02:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
        if (EVEN(a)) {
   15c06:	9c04      	ldr	r4, [sp, #16]
   15c08:	e7ab      	b.n	15b62 <vli_modInv.part.0+0x3f6>
   15c0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   15c0e:	9908      	ldr	r1, [sp, #32]
   15c10:	9807      	ldr	r0, [sp, #28]
   15c12:	9d06      	ldr	r5, [sp, #24]
   15c14:	9e05      	ldr	r6, [sp, #20]
   15c16:	4637      	mov	r7, r6
        *vli = (temp >> 1) | carry;
   15c18:	0864      	lsrs	r4, r4, #1
   15c1a:	ea44 74c7 	orr.w	r4, r4, r7, lsl #31
   15c1e:	087f      	lsrs	r7, r7, #1
   15c20:	ea47 77c5 	orr.w	r7, r7, r5, lsl #31
   15c24:	086d      	lsrs	r5, r5, #1
   15c26:	ea45 75c0 	orr.w	r5, r5, r0, lsl #31
   15c2a:	0840      	lsrs	r0, r0, #1
   15c2c:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
   15c30:	0849      	lsrs	r1, r1, #1
   15c32:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
   15c36:	0852      	lsrs	r2, r2, #1
   15c38:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
   15c3c:	085b      	lsrs	r3, r3, #1
   15c3e:	ea43 73ca 	orr.w	r3, r3, sl, lsl #31
   15c42:	930a      	str	r3, [sp, #40]	; 0x28
            if (!EVEN(u)) {
   15c44:	9b14      	ldr	r3, [sp, #80]	; 0x50
        *vli = (temp >> 1) | carry;
   15c46:	9007      	str	r0, [sp, #28]
   15c48:	9209      	str	r2, [sp, #36]	; 0x24
            if (!EVEN(u)) {
   15c4a:	f013 0001 	ands.w	r0, r3, #1
        *vli = (temp >> 1) | carry;
   15c4e:	ea4f 025a 	mov.w	r2, sl, lsr #1
   15c52:	9705      	str	r7, [sp, #20]
   15c54:	9506      	str	r5, [sp, #24]
   15c56:	9108      	str	r1, [sp, #32]
   15c58:	920b      	str	r2, [sp, #44]	; 0x2c
   15c5a:	9404      	str	r4, [sp, #16]
            if (!EVEN(u)) {
   15c5c:	d12d      	bne.n	15cba <vli_modInv.part.0+0x54e>
   15c5e:	4692      	mov	sl, r2
        uECC_word_t temp = *vli;
   15c60:	e9dd c715 	ldrd	ip, r7, [sp, #84]	; 0x54
   15c64:	e9dd 6517 	ldrd	r6, r5, [sp, #92]	; 0x5c
        *vli = (temp >> 1) | carry;
   15c68:	085b      	lsrs	r3, r3, #1
   15c6a:	ea43 73cc 	orr.w	r3, r3, ip, lsl #31
   15c6e:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
        uECC_word_t temp = *vli;
   15c72:	e9dd 1219 	ldrd	r1, r2, [sp, #100]	; 0x64
        *vli = (temp >> 1) | carry;
   15c76:	9314      	str	r3, [sp, #80]	; 0x50
   15c78:	ea4c 73c7 	orr.w	r3, ip, r7, lsl #31
   15c7c:	087f      	lsrs	r7, r7, #1
   15c7e:	ea47 77c6 	orr.w	r7, r7, r6, lsl #31
   15c82:	0876      	lsrs	r6, r6, #1
   15c84:	ea46 76c5 	orr.w	r6, r6, r5, lsl #31
   15c88:	086d      	lsrs	r5, r5, #1
   15c8a:	ea45 75c1 	orr.w	r5, r5, r1, lsl #31
   15c8e:	9315      	str	r3, [sp, #84]	; 0x54
   15c90:	0849      	lsrs	r1, r1, #1
        uECC_word_t temp = *vli;
   15c92:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
        *vli = (temp >> 1) | carry;
   15c94:	9716      	str	r7, [sp, #88]	; 0x58
   15c96:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
   15c9a:	0852      	lsrs	r2, r2, #1
   15c9c:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
   15ca0:	085b      	lsrs	r3, r3, #1
   15ca2:	9617      	str	r6, [sp, #92]	; 0x5c
   15ca4:	9518      	str	r5, [sp, #96]	; 0x60
   15ca6:	9119      	str	r1, [sp, #100]	; 0x64
   15ca8:	921a      	str	r2, [sp, #104]	; 0x68
   15caa:	931b      	str	r3, [sp, #108]	; 0x6c
            if (carry) {
   15cac:	2800      	cmp	r0, #0
   15cae:	f43f ad8b 	beq.w	157c8 <vli_modInv.part.0+0x5c>
                u[uECC_WORDS - 1] |= HIGH_BIT_SET;
   15cb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   15cb6:	931b      	str	r3, [sp, #108]	; 0x6c
   15cb8:	e586      	b.n	157c8 <vli_modInv.part.0+0x5c>
                carry = vli_add(u, u, mod);
   15cba:	a914      	add	r1, sp, #80	; 0x50
   15cbc:	ee18 2a10 	vmov	r2, s16
   15cc0:	4608      	mov	r0, r1
   15cc2:	f7fe ff4d 	bl	14b60 <vli_add>
        uECC_word_t temp = *vli;
   15cc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (left[i] > right[i]) {
   15cc8:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   15ccc:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
        if (EVEN(a)) {
   15cd0:	9c04      	ldr	r4, [sp, #16]
   15cd2:	e7c5      	b.n	15c60 <vli_modInv.part.0+0x4f4>
   15cd4:	07e1      	lsls	r1, r4, #31
   15cd6:	d59a      	bpl.n	15c0e <vli_modInv.part.0+0x4a2>
        } else if (EVEN(b)) {
   15cd8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   15cdc:	f018 0f01 	tst.w	r8, #1
   15ce0:	f47f ae65 	bne.w	159ae <vli_modInv.part.0+0x242>
   15ce4:	e70b      	b.n	15afe <vli_modInv.part.0+0x392>
        if (EVEN(a)) {
   15ce6:	07e7      	lsls	r7, r4, #31
   15ce8:	d592      	bpl.n	15c10 <vli_modInv.part.0+0x4a4>
        } else if (EVEN(b)) {
   15cea:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   15cee:	f018 0f01 	tst.w	r8, #1
   15cf2:	f47f adb9 	bne.w	15868 <vli_modInv.part.0+0xfc>
   15cf6:	e704      	b.n	15b02 <vli_modInv.part.0+0x396>
        if (EVEN(a)) {
   15cf8:	07e7      	lsls	r7, r4, #31
   15cfa:	d589      	bpl.n	15c10 <vli_modInv.part.0+0x4a4>
        } else if (EVEN(b)) {
   15cfc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   15d00:	f018 0f01 	tst.w	r8, #1
   15d04:	f47f ae53 	bne.w	159ae <vli_modInv.part.0+0x242>
   15d08:	e6fb      	b.n	15b02 <vli_modInv.part.0+0x396>
        if (EVEN(a)) {
   15d0a:	07e5      	lsls	r5, r4, #31
   15d0c:	d581      	bpl.n	15c12 <vli_modInv.part.0+0x4a6>
        } else if (EVEN(b)) {
   15d0e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   15d12:	f018 0f01 	tst.w	r8, #1
   15d16:	f47f ada7 	bne.w	15868 <vli_modInv.part.0+0xfc>
   15d1a:	e6f4      	b.n	15b06 <vli_modInv.part.0+0x39a>
        if (EVEN(a)) {
   15d1c:	07e5      	lsls	r5, r4, #31
   15d1e:	f57f af78 	bpl.w	15c12 <vli_modInv.part.0+0x4a6>
        } else if (EVEN(b)) {
   15d22:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   15d26:	f018 0f01 	tst.w	r8, #1
   15d2a:	f47f ae40 	bne.w	159ae <vli_modInv.part.0+0x242>
   15d2e:	e6ea      	b.n	15b06 <vli_modInv.part.0+0x39a>
        if (EVEN(a)) {
   15d30:	f014 0f01 	tst.w	r4, #1
   15d34:	f43f af6e 	beq.w	15c14 <vli_modInv.part.0+0x4a8>
        } else if (EVEN(b)) {
   15d38:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   15d3c:	f018 0f01 	tst.w	r8, #1
   15d40:	f47f ad92 	bne.w	15868 <vli_modInv.part.0+0xfc>
   15d44:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   15d48:	463a      	mov	r2, r7
   15d4a:	e6e1      	b.n	15b10 <vli_modInv.part.0+0x3a4>
        if (EVEN(a)) {
   15d4c:	f014 0f01 	tst.w	r4, #1
   15d50:	f43f af60 	beq.w	15c14 <vli_modInv.part.0+0x4a8>
        } else if (EVEN(b)) {
   15d54:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   15d58:	f018 0f01 	tst.w	r8, #1
   15d5c:	f47f ae27 	bne.w	159ae <vli_modInv.part.0+0x242>
   15d60:	e7f0      	b.n	15d44 <vli_modInv.part.0+0x5d8>
        if (EVEN(a)) {
   15d62:	f014 0f01 	tst.w	r4, #1
   15d66:	f43f af57 	beq.w	15c18 <vli_modInv.part.0+0x4ac>
        } else if (EVEN(b)) {
   15d6a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   15d6e:	f018 0f01 	tst.w	r8, #1
   15d72:	f47f ad79 	bne.w	15868 <vli_modInv.part.0+0xfc>
   15d76:	9a02      	ldr	r2, [sp, #8]
   15d78:	e6ca      	b.n	15b10 <vli_modInv.part.0+0x3a4>
        if (EVEN(a)) {
   15d7a:	f014 0f01 	tst.w	r4, #1
   15d7e:	f43f af4b 	beq.w	15c18 <vli_modInv.part.0+0x4ac>
        } else if (EVEN(b)) {
   15d82:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   15d86:	f018 0f01 	tst.w	r8, #1
   15d8a:	f47f ae10 	bne.w	159ae <vli_modInv.part.0+0x242>
   15d8e:	e7f2      	b.n	15d76 <vli_modInv.part.0+0x60a>
        if (EVEN(a)) {
   15d90:	f014 0f01 	tst.w	r4, #1
   15d94:	f43f af40 	beq.w	15c18 <vli_modInv.part.0+0x4ac>
        } else if (EVEN(b)) {
   15d98:	f018 0f01 	tst.w	r8, #1
   15d9c:	f47f ad64 	bne.w	15868 <vli_modInv.part.0+0xfc>
   15da0:	e7e9      	b.n	15d76 <vli_modInv.part.0+0x60a>
        if (EVEN(a)) {
   15da2:	f014 0f01 	tst.w	r4, #1
   15da6:	f43f af37 	beq.w	15c18 <vli_modInv.part.0+0x4ac>
        } else if (EVEN(b)) {
   15daa:	f018 0f01 	tst.w	r8, #1
   15dae:	f47f adfe 	bne.w	159ae <vli_modInv.part.0+0x242>
   15db2:	e7e0      	b.n	15d76 <vli_modInv.part.0+0x60a>
   15db4:	e9dd c611 	ldrd	ip, r6, [sp, #68]	; 0x44
   15db8:	e6a1      	b.n	15afe <vli_modInv.part.0+0x392>
   15dba:	9a09      	ldr	r2, [sp, #36]	; 0x24
   15dbc:	e727      	b.n	15c0e <vli_modInv.part.0+0x4a2>
   15dbe:	bf00      	nop

00015dc0 <XYcZ_add>:
   or P => P', Q => P + Q
*/
static void XYcZ_add(uECC_word_t * RESTRICT X1,
                     uECC_word_t * RESTRICT Y1,
                     uECC_word_t * RESTRICT X2,
                     uECC_word_t * RESTRICT Y2) {
   15dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   15dc2:	4614      	mov	r4, r2
   15dc4:	b099      	sub	sp, #100	; 0x64
   15dc6:	4606      	mov	r6, r0
   15dc8:	460f      	mov	r7, r1
    uECC_word_t l_borrow = vli_sub(result, left, right);
   15dca:	4602      	mov	r2, r0
   15dcc:	4621      	mov	r1, r4
   15dce:	4668      	mov	r0, sp
                     uECC_word_t * RESTRICT Y2) {
   15dd0:	461d      	mov	r5, r3
    uECC_word_t l_borrow = vli_sub(result, left, right);
   15dd2:	f7fe ff05 	bl	14be0 <vli_sub>
    if (l_borrow) {
   15dd6:	2800      	cmp	r0, #0
   15dd8:	d165      	bne.n	15ea6 <XYcZ_add+0xe6>
    vli_square(product, left);
   15dda:	4669      	mov	r1, sp
   15ddc:	a808      	add	r0, sp, #32
   15dde:	f7ff fa23 	bl	15228 <vli_square>
    vli_mmod_fast(result, product);
   15de2:	a908      	add	r1, sp, #32
   15de4:	4668      	mov	r0, sp
   15de6:	f7ff fbdb 	bl	155a0 <vli_mmod_fast>
    vli_mult(product, left, right);
   15dea:	466a      	mov	r2, sp
   15dec:	4631      	mov	r1, r6
   15dee:	a808      	add	r0, sp, #32
   15df0:	f7fe ff3e 	bl	14c70 <vli_mult>
    vli_mmod_fast(result, product);
   15df4:	a908      	add	r1, sp, #32
   15df6:	4630      	mov	r0, r6
   15df8:	f7ff fbd2 	bl	155a0 <vli_mmod_fast>
    vli_mult(product, left, right);
   15dfc:	466a      	mov	r2, sp
   15dfe:	4621      	mov	r1, r4
   15e00:	a808      	add	r0, sp, #32
   15e02:	f7fe ff35 	bl	14c70 <vli_mult>
    vli_mmod_fast(result, product);
   15e06:	a908      	add	r1, sp, #32
   15e08:	4620      	mov	r0, r4
   15e0a:	f7ff fbc9 	bl	155a0 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   15e0e:	463a      	mov	r2, r7
   15e10:	4629      	mov	r1, r5
   15e12:	4628      	mov	r0, r5
   15e14:	f7fe fee4 	bl	14be0 <vli_sub>
    if (l_borrow) {
   15e18:	2800      	cmp	r0, #0
   15e1a:	d168      	bne.n	15eee <XYcZ_add+0x12e>
    vli_square(product, left);
   15e1c:	4629      	mov	r1, r5
   15e1e:	a808      	add	r0, sp, #32
   15e20:	f7ff fa02 	bl	15228 <vli_square>
    vli_mmod_fast(result, product);
   15e24:	a908      	add	r1, sp, #32
   15e26:	4668      	mov	r0, sp
   15e28:	f7ff fbba 	bl	155a0 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   15e2c:	4632      	mov	r2, r6
   15e2e:	4669      	mov	r1, sp
   15e30:	4668      	mov	r0, sp
   15e32:	f7fe fed5 	bl	14be0 <vli_sub>
    if (l_borrow) {
   15e36:	2800      	cmp	r0, #0
   15e38:	d153      	bne.n	15ee2 <XYcZ_add+0x122>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   15e3a:	4622      	mov	r2, r4
   15e3c:	4669      	mov	r1, sp
   15e3e:	4668      	mov	r0, sp
   15e40:	f7fe fece 	bl	14be0 <vli_sub>
    if (l_borrow) {
   15e44:	2800      	cmp	r0, #0
   15e46:	d146      	bne.n	15ed6 <XYcZ_add+0x116>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   15e48:	4632      	mov	r2, r6
   15e4a:	4621      	mov	r1, r4
   15e4c:	4620      	mov	r0, r4
   15e4e:	f7fe fec7 	bl	14be0 <vli_sub>
    if (l_borrow) {
   15e52:	2800      	cmp	r0, #0
   15e54:	d139      	bne.n	15eca <XYcZ_add+0x10a>
    vli_mult(product, left, right);
   15e56:	4622      	mov	r2, r4
   15e58:	4639      	mov	r1, r7
   15e5a:	a808      	add	r0, sp, #32
   15e5c:	f7fe ff08 	bl	14c70 <vli_mult>
    vli_mmod_fast(result, product);
   15e60:	a908      	add	r1, sp, #32
   15e62:	4638      	mov	r0, r7
   15e64:	f7ff fb9c 	bl	155a0 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   15e68:	466a      	mov	r2, sp
   15e6a:	4631      	mov	r1, r6
   15e6c:	4620      	mov	r0, r4
   15e6e:	f7fe feb7 	bl	14be0 <vli_sub>
    if (l_borrow) {
   15e72:	bb20      	cbnz	r0, 15ebe <XYcZ_add+0xfe>
    vli_mult(product, left, right);
   15e74:	4622      	mov	r2, r4
   15e76:	4629      	mov	r1, r5
   15e78:	a808      	add	r0, sp, #32
   15e7a:	f7fe fef9 	bl	14c70 <vli_mult>
    vli_mmod_fast(result, product);
   15e7e:	a908      	add	r1, sp, #32
   15e80:	4628      	mov	r0, r5
   15e82:	f7ff fb8d 	bl	155a0 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   15e86:	463a      	mov	r2, r7
   15e88:	4629      	mov	r1, r5
   15e8a:	4628      	mov	r0, r5
   15e8c:	f7fe fea8 	bl	14be0 <vli_sub>
    if (l_borrow) {
   15e90:	b978      	cbnz	r0, 15eb2 <XYcZ_add+0xf2>
        dest[i] = src[i];
   15e92:	46ec      	mov	ip, sp
   15e94:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   15e98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   15e9a:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   15e9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    vli_modSub_fast(X2, X1, t5);  /* t3 = B - x3 */
    vli_modMult_fast(Y2, Y2, X2); /* t4 = (y2 - y1)*(B - x3) */
    vli_modSub_fast(Y2, Y2, Y1);  /* t4 = y3 */

    vli_set(X2, t5);
}
   15ea2:	b019      	add	sp, #100	; 0x64
   15ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        vli_add(result, result, mod);
   15ea6:	4a15      	ldr	r2, [pc, #84]	; (15efc <XYcZ_add+0x13c>)
   15ea8:	4669      	mov	r1, sp
   15eaa:	4668      	mov	r0, sp
   15eac:	f7fe fe58 	bl	14b60 <vli_add>
   15eb0:	e793      	b.n	15dda <XYcZ_add+0x1a>
   15eb2:	4a12      	ldr	r2, [pc, #72]	; (15efc <XYcZ_add+0x13c>)
   15eb4:	4629      	mov	r1, r5
   15eb6:	4628      	mov	r0, r5
   15eb8:	f7fe fe52 	bl	14b60 <vli_add>
   15ebc:	e7e9      	b.n	15e92 <XYcZ_add+0xd2>
   15ebe:	4a0f      	ldr	r2, [pc, #60]	; (15efc <XYcZ_add+0x13c>)
   15ec0:	4621      	mov	r1, r4
   15ec2:	4620      	mov	r0, r4
   15ec4:	f7fe fe4c 	bl	14b60 <vli_add>
   15ec8:	e7d4      	b.n	15e74 <XYcZ_add+0xb4>
   15eca:	4a0c      	ldr	r2, [pc, #48]	; (15efc <XYcZ_add+0x13c>)
   15ecc:	4621      	mov	r1, r4
   15ece:	4620      	mov	r0, r4
   15ed0:	f7fe fe46 	bl	14b60 <vli_add>
   15ed4:	e7bf      	b.n	15e56 <XYcZ_add+0x96>
   15ed6:	4a09      	ldr	r2, [pc, #36]	; (15efc <XYcZ_add+0x13c>)
   15ed8:	4669      	mov	r1, sp
   15eda:	4668      	mov	r0, sp
   15edc:	f7fe fe40 	bl	14b60 <vli_add>
   15ee0:	e7b2      	b.n	15e48 <XYcZ_add+0x88>
   15ee2:	4a06      	ldr	r2, [pc, #24]	; (15efc <XYcZ_add+0x13c>)
   15ee4:	4669      	mov	r1, sp
   15ee6:	4668      	mov	r0, sp
   15ee8:	f7fe fe3a 	bl	14b60 <vli_add>
   15eec:	e7a5      	b.n	15e3a <XYcZ_add+0x7a>
   15eee:	4a03      	ldr	r2, [pc, #12]	; (15efc <XYcZ_add+0x13c>)
   15ef0:	4629      	mov	r1, r5
   15ef2:	4628      	mov	r0, r5
   15ef4:	f7fe fe34 	bl	14b60 <vli_add>
   15ef8:	e790      	b.n	15e1c <XYcZ_add+0x5c>
   15efa:	bf00      	nop
   15efc:	00024790 	.word	0x00024790

00015f00 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
*/
static void XYcZ_addC(uECC_word_t * RESTRICT X1,
                      uECC_word_t * RESTRICT Y1,
                      uECC_word_t * RESTRICT X2,
                      uECC_word_t * RESTRICT Y2) {
   15f00:	b5f0      	push	{r4, r5, r6, r7, lr}
   15f02:	4614      	mov	r4, r2
   15f04:	b0a9      	sub	sp, #164	; 0xa4
   15f06:	4606      	mov	r6, r0
   15f08:	460f      	mov	r7, r1
    uECC_word_t l_borrow = vli_sub(result, left, right);
   15f0a:	4602      	mov	r2, r0
   15f0c:	4621      	mov	r1, r4
   15f0e:	4668      	mov	r0, sp
                      uECC_word_t * RESTRICT Y2) {
   15f10:	461d      	mov	r5, r3
    uECC_word_t l_borrow = vli_sub(result, left, right);
   15f12:	f7fe fe65 	bl	14be0 <vli_sub>
    if (l_borrow) {
   15f16:	2800      	cmp	r0, #0
   15f18:	f040 80cb 	bne.w	160b2 <XYcZ_addC+0x1b2>
    vli_square(product, left);
   15f1c:	4669      	mov	r1, sp
   15f1e:	a818      	add	r0, sp, #96	; 0x60
   15f20:	f7ff f982 	bl	15228 <vli_square>
    vli_mmod_fast(result, product);
   15f24:	a918      	add	r1, sp, #96	; 0x60
   15f26:	4668      	mov	r0, sp
   15f28:	f7ff fb3a 	bl	155a0 <vli_mmod_fast>
    vli_mult(product, left, right);
   15f2c:	466a      	mov	r2, sp
   15f2e:	4631      	mov	r1, r6
   15f30:	a818      	add	r0, sp, #96	; 0x60
   15f32:	f7fe fe9d 	bl	14c70 <vli_mult>
    vli_mmod_fast(result, product);
   15f36:	a918      	add	r1, sp, #96	; 0x60
   15f38:	4630      	mov	r0, r6
   15f3a:	f7ff fb31 	bl	155a0 <vli_mmod_fast>
    vli_mult(product, left, right);
   15f3e:	466a      	mov	r2, sp
   15f40:	4621      	mov	r1, r4
   15f42:	a818      	add	r0, sp, #96	; 0x60
   15f44:	f7fe fe94 	bl	14c70 <vli_mult>
    vli_mmod_fast(result, product);
   15f48:	a918      	add	r1, sp, #96	; 0x60
   15f4a:	4620      	mov	r0, r4
   15f4c:	f7ff fb28 	bl	155a0 <vli_mmod_fast>
    uECC_word_t carry = vli_add(result, left, right);
   15f50:	463a      	mov	r2, r7
   15f52:	4629      	mov	r1, r5
   15f54:	4668      	mov	r0, sp
   15f56:	f7fe fe03 	bl	14b60 <vli_add>
    if (carry || vli_cmp(result, mod) >= 0) {
   15f5a:	b9a8      	cbnz	r0, 15f88 <XYcZ_addC+0x88>
        } else if (left[i] < right[i]) {
   15f5c:	9b07      	ldr	r3, [sp, #28]
   15f5e:	3301      	adds	r3, #1
   15f60:	d117      	bne.n	15f92 <XYcZ_addC+0x92>
        if (left[i] > right[i]) {
   15f62:	9b06      	ldr	r3, [sp, #24]
   15f64:	2b01      	cmp	r3, #1
   15f66:	d80f      	bhi.n	15f88 <XYcZ_addC+0x88>
        } else if (left[i] < right[i]) {
   15f68:	b19b      	cbz	r3, 15f92 <XYcZ_addC+0x92>
        if (left[i] > right[i]) {
   15f6a:	9b05      	ldr	r3, [sp, #20]
   15f6c:	b963      	cbnz	r3, 15f88 <XYcZ_addC+0x88>
   15f6e:	9b04      	ldr	r3, [sp, #16]
   15f70:	b953      	cbnz	r3, 15f88 <XYcZ_addC+0x88>
   15f72:	9b03      	ldr	r3, [sp, #12]
   15f74:	b943      	cbnz	r3, 15f88 <XYcZ_addC+0x88>
        } else if (left[i] < right[i]) {
   15f76:	9b02      	ldr	r3, [sp, #8]
   15f78:	3301      	adds	r3, #1
   15f7a:	d10a      	bne.n	15f92 <XYcZ_addC+0x92>
   15f7c:	9b01      	ldr	r3, [sp, #4]
   15f7e:	3301      	adds	r3, #1
   15f80:	d107      	bne.n	15f92 <XYcZ_addC+0x92>
   15f82:	9b00      	ldr	r3, [sp, #0]
   15f84:	3301      	adds	r3, #1
   15f86:	d104      	bne.n	15f92 <XYcZ_addC+0x92>
        vli_sub(result, result, mod);
   15f88:	4a65      	ldr	r2, [pc, #404]	; (16120 <XYcZ_addC+0x220>)
   15f8a:	4669      	mov	r1, sp
   15f8c:	4668      	mov	r0, sp
   15f8e:	f7fe fe27 	bl	14be0 <vli_sub>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   15f92:	463a      	mov	r2, r7
   15f94:	4629      	mov	r1, r5
   15f96:	4628      	mov	r0, r5
   15f98:	f7fe fe22 	bl	14be0 <vli_sub>
    if (l_borrow) {
   15f9c:	2800      	cmp	r0, #0
   15f9e:	f040 8094 	bne.w	160ca <XYcZ_addC+0x1ca>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   15fa2:	4632      	mov	r2, r6
   15fa4:	4621      	mov	r1, r4
   15fa6:	a808      	add	r0, sp, #32
   15fa8:	f7fe fe1a 	bl	14be0 <vli_sub>
    if (l_borrow) {
   15fac:	2800      	cmp	r0, #0
   15fae:	f040 8086 	bne.w	160be <XYcZ_addC+0x1be>
    vli_mult(product, left, right);
   15fb2:	aa08      	add	r2, sp, #32
   15fb4:	4639      	mov	r1, r7
   15fb6:	a818      	add	r0, sp, #96	; 0x60
   15fb8:	f7fe fe5a 	bl	14c70 <vli_mult>
    vli_mmod_fast(result, product);
   15fbc:	a918      	add	r1, sp, #96	; 0x60
   15fbe:	4638      	mov	r0, r7
   15fc0:	f7ff faee 	bl	155a0 <vli_mmod_fast>
    uECC_word_t carry = vli_add(result, left, right);
   15fc4:	4622      	mov	r2, r4
   15fc6:	4631      	mov	r1, r6
   15fc8:	a808      	add	r0, sp, #32
   15fca:	f7fe fdc9 	bl	14b60 <vli_add>
    if (carry || vli_cmp(result, mod) >= 0) {
   15fce:	b9a8      	cbnz	r0, 15ffc <XYcZ_addC+0xfc>
        } else if (left[i] < right[i]) {
   15fd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   15fd2:	3301      	adds	r3, #1
   15fd4:	d117      	bne.n	16006 <XYcZ_addC+0x106>
        if (left[i] > right[i]) {
   15fd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15fd8:	2b01      	cmp	r3, #1
   15fda:	d80f      	bhi.n	15ffc <XYcZ_addC+0xfc>
        } else if (left[i] < right[i]) {
   15fdc:	b19b      	cbz	r3, 16006 <XYcZ_addC+0x106>
        if (left[i] > right[i]) {
   15fde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15fe0:	b963      	cbnz	r3, 15ffc <XYcZ_addC+0xfc>
   15fe2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15fe4:	b953      	cbnz	r3, 15ffc <XYcZ_addC+0xfc>
   15fe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15fe8:	b943      	cbnz	r3, 15ffc <XYcZ_addC+0xfc>
        } else if (left[i] < right[i]) {
   15fea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15fec:	3301      	adds	r3, #1
   15fee:	d10a      	bne.n	16006 <XYcZ_addC+0x106>
   15ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15ff2:	3301      	adds	r3, #1
   15ff4:	d107      	bne.n	16006 <XYcZ_addC+0x106>
   15ff6:	9b08      	ldr	r3, [sp, #32]
   15ff8:	3301      	adds	r3, #1
   15ffa:	d104      	bne.n	16006 <XYcZ_addC+0x106>
        vli_sub(result, result, mod);
   15ffc:	a908      	add	r1, sp, #32
   15ffe:	4a48      	ldr	r2, [pc, #288]	; (16120 <XYcZ_addC+0x220>)
   16000:	4608      	mov	r0, r1
   16002:	f7fe fded 	bl	14be0 <vli_sub>
    vli_square(product, left);
   16006:	4629      	mov	r1, r5
   16008:	a818      	add	r0, sp, #96	; 0x60
   1600a:	f7ff f90d 	bl	15228 <vli_square>
    vli_mmod_fast(result, product);
   1600e:	a918      	add	r1, sp, #96	; 0x60
   16010:	4620      	mov	r0, r4
   16012:	f7ff fac5 	bl	155a0 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   16016:	aa08      	add	r2, sp, #32
   16018:	4621      	mov	r1, r4
   1601a:	4620      	mov	r0, r4
   1601c:	f7fe fde0 	bl	14be0 <vli_sub>
    if (l_borrow) {
   16020:	2800      	cmp	r0, #0
   16022:	d176      	bne.n	16112 <XYcZ_addC+0x212>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   16024:	4622      	mov	r2, r4
   16026:	4631      	mov	r1, r6
   16028:	a810      	add	r0, sp, #64	; 0x40
   1602a:	f7fe fdd9 	bl	14be0 <vli_sub>
    if (l_borrow) {
   1602e:	2800      	cmp	r0, #0
   16030:	d169      	bne.n	16106 <XYcZ_addC+0x206>
    vli_mult(product, left, right);
   16032:	aa10      	add	r2, sp, #64	; 0x40
   16034:	4629      	mov	r1, r5
   16036:	a818      	add	r0, sp, #96	; 0x60
   16038:	f7fe fe1a 	bl	14c70 <vli_mult>
    vli_mmod_fast(result, product);
   1603c:	a918      	add	r1, sp, #96	; 0x60
   1603e:	4628      	mov	r0, r5
   16040:	f7ff faae 	bl	155a0 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   16044:	463a      	mov	r2, r7
   16046:	4629      	mov	r1, r5
   16048:	4628      	mov	r0, r5
   1604a:	f7fe fdc9 	bl	14be0 <vli_sub>
    if (l_borrow) {
   1604e:	2800      	cmp	r0, #0
   16050:	d153      	bne.n	160fa <XYcZ_addC+0x1fa>
    vli_square(product, left);
   16052:	4669      	mov	r1, sp
   16054:	a818      	add	r0, sp, #96	; 0x60
   16056:	f7ff f8e7 	bl	15228 <vli_square>
    vli_mmod_fast(result, product);
   1605a:	a918      	add	r1, sp, #96	; 0x60
   1605c:	a810      	add	r0, sp, #64	; 0x40
   1605e:	f7ff fa9f 	bl	155a0 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   16062:	a910      	add	r1, sp, #64	; 0x40
   16064:	aa08      	add	r2, sp, #32
   16066:	4608      	mov	r0, r1
   16068:	f7fe fdba 	bl	14be0 <vli_sub>
    if (l_borrow) {
   1606c:	2800      	cmp	r0, #0
   1606e:	d13e      	bne.n	160ee <XYcZ_addC+0x1ee>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   16070:	4632      	mov	r2, r6
   16072:	a910      	add	r1, sp, #64	; 0x40
   16074:	a808      	add	r0, sp, #32
   16076:	f7fe fdb3 	bl	14be0 <vli_sub>
    if (l_borrow) {
   1607a:	bb90      	cbnz	r0, 160e2 <XYcZ_addC+0x1e2>
    vli_mult(product, left, right);
   1607c:	466a      	mov	r2, sp
   1607e:	a908      	add	r1, sp, #32
   16080:	a818      	add	r0, sp, #96	; 0x60
   16082:	f7fe fdf5 	bl	14c70 <vli_mult>
    vli_mmod_fast(result, product);
   16086:	a918      	add	r1, sp, #96	; 0x60
   16088:	a808      	add	r0, sp, #32
   1608a:	f7ff fa89 	bl	155a0 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   1608e:	463a      	mov	r2, r7
   16090:	a908      	add	r1, sp, #32
   16092:	4638      	mov	r0, r7
   16094:	f7fe fda4 	bl	14be0 <vli_sub>
    if (l_borrow) {
   16098:	b9e8      	cbnz	r0, 160d6 <XYcZ_addC+0x1d6>
        dest[i] = src[i];
   1609a:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
   1609e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   160a2:	4634      	mov	r4, r6
   160a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   160a6:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   160aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    vli_modSub_fast(t6, t7, X1);  /* t6 = x3' - B */
    vli_modMult_fast(t6, t6, t5); /* t6 = (y2 + y1)*(x3' - B) */
    vli_modSub_fast(Y1, t6, Y1);  /* t2 = (y2 + y1)*(x3' - B) - E = y3' */

    vli_set(X1, t7);
}
   160ae:	b029      	add	sp, #164	; 0xa4
   160b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        vli_add(result, result, mod);
   160b2:	4a1b      	ldr	r2, [pc, #108]	; (16120 <XYcZ_addC+0x220>)
   160b4:	4669      	mov	r1, sp
   160b6:	4668      	mov	r0, sp
   160b8:	f7fe fd52 	bl	14b60 <vli_add>
   160bc:	e72e      	b.n	15f1c <XYcZ_addC+0x1c>
   160be:	a908      	add	r1, sp, #32
   160c0:	4a17      	ldr	r2, [pc, #92]	; (16120 <XYcZ_addC+0x220>)
   160c2:	4608      	mov	r0, r1
   160c4:	f7fe fd4c 	bl	14b60 <vli_add>
   160c8:	e773      	b.n	15fb2 <XYcZ_addC+0xb2>
   160ca:	4a15      	ldr	r2, [pc, #84]	; (16120 <XYcZ_addC+0x220>)
   160cc:	4629      	mov	r1, r5
   160ce:	4628      	mov	r0, r5
   160d0:	f7fe fd46 	bl	14b60 <vli_add>
   160d4:	e765      	b.n	15fa2 <XYcZ_addC+0xa2>
   160d6:	4a12      	ldr	r2, [pc, #72]	; (16120 <XYcZ_addC+0x220>)
   160d8:	4639      	mov	r1, r7
   160da:	4638      	mov	r0, r7
   160dc:	f7fe fd40 	bl	14b60 <vli_add>
   160e0:	e7db      	b.n	1609a <XYcZ_addC+0x19a>
   160e2:	a908      	add	r1, sp, #32
   160e4:	4a0e      	ldr	r2, [pc, #56]	; (16120 <XYcZ_addC+0x220>)
   160e6:	4608      	mov	r0, r1
   160e8:	f7fe fd3a 	bl	14b60 <vli_add>
   160ec:	e7c6      	b.n	1607c <XYcZ_addC+0x17c>
   160ee:	a910      	add	r1, sp, #64	; 0x40
   160f0:	4a0b      	ldr	r2, [pc, #44]	; (16120 <XYcZ_addC+0x220>)
   160f2:	4608      	mov	r0, r1
   160f4:	f7fe fd34 	bl	14b60 <vli_add>
   160f8:	e7ba      	b.n	16070 <XYcZ_addC+0x170>
   160fa:	4a09      	ldr	r2, [pc, #36]	; (16120 <XYcZ_addC+0x220>)
   160fc:	4629      	mov	r1, r5
   160fe:	4628      	mov	r0, r5
   16100:	f7fe fd2e 	bl	14b60 <vli_add>
   16104:	e7a5      	b.n	16052 <XYcZ_addC+0x152>
   16106:	a910      	add	r1, sp, #64	; 0x40
   16108:	4a05      	ldr	r2, [pc, #20]	; (16120 <XYcZ_addC+0x220>)
   1610a:	4608      	mov	r0, r1
   1610c:	f7fe fd28 	bl	14b60 <vli_add>
   16110:	e78f      	b.n	16032 <XYcZ_addC+0x132>
   16112:	4a03      	ldr	r2, [pc, #12]	; (16120 <XYcZ_addC+0x220>)
   16114:	4621      	mov	r1, r4
   16116:	4620      	mov	r0, r4
   16118:	f7fe fd22 	bl	14b60 <vli_add>
   1611c:	e782      	b.n	16024 <XYcZ_addC+0x124>
   1611e:	bf00      	nop
   16120:	00024790 	.word	0x00024790

00016124 <EccPoint_double_jacobian.part.0>:
static void EccPoint_double_jacobian(uECC_word_t * RESTRICT X1,
   16124:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16128:	b0a1      	sub	sp, #132	; 0x84
   1612a:	4604      	mov	r4, r0
    vli_square(product, left);
   1612c:	a810      	add	r0, sp, #64	; 0x40
static void EccPoint_double_jacobian(uECC_word_t * RESTRICT X1,
   1612e:	4615      	mov	r5, r2
   16130:	460e      	mov	r6, r1
    vli_square(product, left);
   16132:	f7ff f879 	bl	15228 <vli_square>
    vli_mmod_fast(result, product);
   16136:	a910      	add	r1, sp, #64	; 0x40
   16138:	4668      	mov	r0, sp
   1613a:	f7ff fa31 	bl	155a0 <vli_mmod_fast>
    vli_mult(product, left, right);
   1613e:	466a      	mov	r2, sp
   16140:	4621      	mov	r1, r4
   16142:	a810      	add	r0, sp, #64	; 0x40
   16144:	f7fe fd94 	bl	14c70 <vli_mult>
    vli_mmod_fast(result, product);
   16148:	a910      	add	r1, sp, #64	; 0x40
   1614a:	a808      	add	r0, sp, #32
   1614c:	f7ff fa28 	bl	155a0 <vli_mmod_fast>
    vli_square(product, left);
   16150:	4669      	mov	r1, sp
   16152:	a810      	add	r0, sp, #64	; 0x40
   16154:	f7ff f868 	bl	15228 <vli_square>
    vli_mmod_fast(result, product);
   16158:	a910      	add	r1, sp, #64	; 0x40
   1615a:	4668      	mov	r0, sp
   1615c:	f7ff fa20 	bl	155a0 <vli_mmod_fast>
    vli_mult(product, left, right);
   16160:	462a      	mov	r2, r5
   16162:	4631      	mov	r1, r6
   16164:	a810      	add	r0, sp, #64	; 0x40
   16166:	f7fe fd83 	bl	14c70 <vli_mult>
    vli_mmod_fast(result, product);
   1616a:	a910      	add	r1, sp, #64	; 0x40
   1616c:	4630      	mov	r0, r6
   1616e:	f7ff fa17 	bl	155a0 <vli_mmod_fast>
    vli_square(product, left);
   16172:	4629      	mov	r1, r5
   16174:	a810      	add	r0, sp, #64	; 0x40
   16176:	f7ff f857 	bl	15228 <vli_square>
    vli_mmod_fast(result, product);
   1617a:	a910      	add	r1, sp, #64	; 0x40
   1617c:	4628      	mov	r0, r5
   1617e:	f7ff fa0f 	bl	155a0 <vli_mmod_fast>
    uECC_word_t carry = vli_add(result, left, right);
   16182:	462a      	mov	r2, r5
   16184:	4621      	mov	r1, r4
   16186:	4620      	mov	r0, r4
   16188:	f7fe fcea 	bl	14b60 <vli_add>
    if (carry || vli_cmp(result, mod) >= 0) {
   1618c:	b9a8      	cbnz	r0, 161ba <EccPoint_double_jacobian.part.0+0x96>
        } else if (left[i] < right[i]) {
   1618e:	69e3      	ldr	r3, [r4, #28]
   16190:	3301      	adds	r3, #1
   16192:	d117      	bne.n	161c4 <EccPoint_double_jacobian.part.0+0xa0>
        if (left[i] > right[i]) {
   16194:	69a3      	ldr	r3, [r4, #24]
   16196:	2b01      	cmp	r3, #1
   16198:	d80f      	bhi.n	161ba <EccPoint_double_jacobian.part.0+0x96>
        } else if (left[i] < right[i]) {
   1619a:	b19b      	cbz	r3, 161c4 <EccPoint_double_jacobian.part.0+0xa0>
        if (left[i] > right[i]) {
   1619c:	6963      	ldr	r3, [r4, #20]
   1619e:	b963      	cbnz	r3, 161ba <EccPoint_double_jacobian.part.0+0x96>
   161a0:	6923      	ldr	r3, [r4, #16]
   161a2:	b953      	cbnz	r3, 161ba <EccPoint_double_jacobian.part.0+0x96>
   161a4:	68e3      	ldr	r3, [r4, #12]
   161a6:	b943      	cbnz	r3, 161ba <EccPoint_double_jacobian.part.0+0x96>
        } else if (left[i] < right[i]) {
   161a8:	68a3      	ldr	r3, [r4, #8]
   161aa:	3301      	adds	r3, #1
   161ac:	d10a      	bne.n	161c4 <EccPoint_double_jacobian.part.0+0xa0>
   161ae:	6863      	ldr	r3, [r4, #4]
   161b0:	3301      	adds	r3, #1
   161b2:	d107      	bne.n	161c4 <EccPoint_double_jacobian.part.0+0xa0>
   161b4:	6823      	ldr	r3, [r4, #0]
   161b6:	3301      	adds	r3, #1
   161b8:	d104      	bne.n	161c4 <EccPoint_double_jacobian.part.0+0xa0>
        vli_sub(result, result, mod);
   161ba:	4a9d      	ldr	r2, [pc, #628]	; (16430 <EccPoint_double_jacobian.part.0+0x30c>)
   161bc:	4621      	mov	r1, r4
   161be:	4620      	mov	r0, r4
   161c0:	f7fe fd0e 	bl	14be0 <vli_sub>
    uECC_word_t carry = vli_add(result, left, right);
   161c4:	462a      	mov	r2, r5
   161c6:	4629      	mov	r1, r5
   161c8:	4628      	mov	r0, r5
   161ca:	f7fe fcc9 	bl	14b60 <vli_add>
    if (carry || vli_cmp(result, mod) >= 0) {
   161ce:	b9a8      	cbnz	r0, 161fc <EccPoint_double_jacobian.part.0+0xd8>
        } else if (left[i] < right[i]) {
   161d0:	69eb      	ldr	r3, [r5, #28]
   161d2:	3301      	adds	r3, #1
   161d4:	d117      	bne.n	16206 <EccPoint_double_jacobian.part.0+0xe2>
        if (left[i] > right[i]) {
   161d6:	69ab      	ldr	r3, [r5, #24]
   161d8:	2b01      	cmp	r3, #1
   161da:	d80f      	bhi.n	161fc <EccPoint_double_jacobian.part.0+0xd8>
        } else if (left[i] < right[i]) {
   161dc:	b19b      	cbz	r3, 16206 <EccPoint_double_jacobian.part.0+0xe2>
        if (left[i] > right[i]) {
   161de:	696b      	ldr	r3, [r5, #20]
   161e0:	b963      	cbnz	r3, 161fc <EccPoint_double_jacobian.part.0+0xd8>
   161e2:	692b      	ldr	r3, [r5, #16]
   161e4:	b953      	cbnz	r3, 161fc <EccPoint_double_jacobian.part.0+0xd8>
   161e6:	68eb      	ldr	r3, [r5, #12]
   161e8:	b943      	cbnz	r3, 161fc <EccPoint_double_jacobian.part.0+0xd8>
        } else if (left[i] < right[i]) {
   161ea:	68ab      	ldr	r3, [r5, #8]
   161ec:	3301      	adds	r3, #1
   161ee:	d10a      	bne.n	16206 <EccPoint_double_jacobian.part.0+0xe2>
   161f0:	686b      	ldr	r3, [r5, #4]
   161f2:	3301      	adds	r3, #1
   161f4:	d107      	bne.n	16206 <EccPoint_double_jacobian.part.0+0xe2>
   161f6:	682b      	ldr	r3, [r5, #0]
   161f8:	3301      	adds	r3, #1
   161fa:	d104      	bne.n	16206 <EccPoint_double_jacobian.part.0+0xe2>
        vli_sub(result, result, mod);
   161fc:	4a8c      	ldr	r2, [pc, #560]	; (16430 <EccPoint_double_jacobian.part.0+0x30c>)
   161fe:	4629      	mov	r1, r5
   16200:	4628      	mov	r0, r5
   16202:	f7fe fced 	bl	14be0 <vli_sub>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   16206:	462a      	mov	r2, r5
   16208:	4621      	mov	r1, r4
   1620a:	4628      	mov	r0, r5
   1620c:	f7fe fce8 	bl	14be0 <vli_sub>
    if (l_borrow) {
   16210:	2800      	cmp	r0, #0
   16212:	f040 80bd 	bne.w	16390 <EccPoint_double_jacobian.part.0+0x26c>
    vli_mult(product, left, right);
   16216:	462a      	mov	r2, r5
   16218:	4621      	mov	r1, r4
   1621a:	a810      	add	r0, sp, #64	; 0x40
   1621c:	f7fe fd28 	bl	14c70 <vli_mult>
    vli_mmod_fast(result, product);
   16220:	a910      	add	r1, sp, #64	; 0x40
   16222:	4620      	mov	r0, r4
   16224:	f7ff f9bc 	bl	155a0 <vli_mmod_fast>
    uECC_word_t carry = vli_add(result, left, right);
   16228:	4622      	mov	r2, r4
   1622a:	4621      	mov	r1, r4
   1622c:	4628      	mov	r0, r5
   1622e:	f7fe fc97 	bl	14b60 <vli_add>
    if (carry || vli_cmp(result, mod) >= 0) {
   16232:	b9a8      	cbnz	r0, 16260 <EccPoint_double_jacobian.part.0+0x13c>
        } else if (left[i] < right[i]) {
   16234:	69eb      	ldr	r3, [r5, #28]
   16236:	3301      	adds	r3, #1
   16238:	d117      	bne.n	1626a <EccPoint_double_jacobian.part.0+0x146>
        if (left[i] > right[i]) {
   1623a:	69ab      	ldr	r3, [r5, #24]
   1623c:	2b01      	cmp	r3, #1
   1623e:	d80f      	bhi.n	16260 <EccPoint_double_jacobian.part.0+0x13c>
        } else if (left[i] < right[i]) {
   16240:	b19b      	cbz	r3, 1626a <EccPoint_double_jacobian.part.0+0x146>
        if (left[i] > right[i]) {
   16242:	696b      	ldr	r3, [r5, #20]
   16244:	b963      	cbnz	r3, 16260 <EccPoint_double_jacobian.part.0+0x13c>
   16246:	692b      	ldr	r3, [r5, #16]
   16248:	b953      	cbnz	r3, 16260 <EccPoint_double_jacobian.part.0+0x13c>
   1624a:	68eb      	ldr	r3, [r5, #12]
   1624c:	b943      	cbnz	r3, 16260 <EccPoint_double_jacobian.part.0+0x13c>
        } else if (left[i] < right[i]) {
   1624e:	68ab      	ldr	r3, [r5, #8]
   16250:	3301      	adds	r3, #1
   16252:	d10a      	bne.n	1626a <EccPoint_double_jacobian.part.0+0x146>
   16254:	686b      	ldr	r3, [r5, #4]
   16256:	3301      	adds	r3, #1
   16258:	d107      	bne.n	1626a <EccPoint_double_jacobian.part.0+0x146>
   1625a:	682b      	ldr	r3, [r5, #0]
   1625c:	3301      	adds	r3, #1
   1625e:	d104      	bne.n	1626a <EccPoint_double_jacobian.part.0+0x146>
        vli_sub(result, result, mod);
   16260:	4a73      	ldr	r2, [pc, #460]	; (16430 <EccPoint_double_jacobian.part.0+0x30c>)
   16262:	4629      	mov	r1, r5
   16264:	4628      	mov	r0, r5
   16266:	f7fe fcbb 	bl	14be0 <vli_sub>
    uECC_word_t carry = vli_add(result, left, right);
   1626a:	462a      	mov	r2, r5
   1626c:	4621      	mov	r1, r4
   1626e:	4620      	mov	r0, r4
   16270:	f7fe fc76 	bl	14b60 <vli_add>
    if (carry || vli_cmp(result, mod) >= 0) {
   16274:	b9a8      	cbnz	r0, 162a2 <EccPoint_double_jacobian.part.0+0x17e>
        } else if (left[i] < right[i]) {
   16276:	69e3      	ldr	r3, [r4, #28]
   16278:	3301      	adds	r3, #1
   1627a:	d117      	bne.n	162ac <EccPoint_double_jacobian.part.0+0x188>
        if (left[i] > right[i]) {
   1627c:	69a3      	ldr	r3, [r4, #24]
   1627e:	2b01      	cmp	r3, #1
   16280:	d80f      	bhi.n	162a2 <EccPoint_double_jacobian.part.0+0x17e>
        } else if (left[i] < right[i]) {
   16282:	b19b      	cbz	r3, 162ac <EccPoint_double_jacobian.part.0+0x188>
        if (left[i] > right[i]) {
   16284:	6963      	ldr	r3, [r4, #20]
   16286:	b963      	cbnz	r3, 162a2 <EccPoint_double_jacobian.part.0+0x17e>
   16288:	6923      	ldr	r3, [r4, #16]
   1628a:	b953      	cbnz	r3, 162a2 <EccPoint_double_jacobian.part.0+0x17e>
   1628c:	68e3      	ldr	r3, [r4, #12]
   1628e:	b943      	cbnz	r3, 162a2 <EccPoint_double_jacobian.part.0+0x17e>
        } else if (left[i] < right[i]) {
   16290:	68a3      	ldr	r3, [r4, #8]
   16292:	3301      	adds	r3, #1
   16294:	d10a      	bne.n	162ac <EccPoint_double_jacobian.part.0+0x188>
   16296:	6863      	ldr	r3, [r4, #4]
   16298:	3301      	adds	r3, #1
   1629a:	d107      	bne.n	162ac <EccPoint_double_jacobian.part.0+0x188>
   1629c:	6823      	ldr	r3, [r4, #0]
   1629e:	3301      	adds	r3, #1
   162a0:	d104      	bne.n	162ac <EccPoint_double_jacobian.part.0+0x188>
        vli_sub(result, result, mod);
   162a2:	4a63      	ldr	r2, [pc, #396]	; (16430 <EccPoint_double_jacobian.part.0+0x30c>)
   162a4:	4621      	mov	r1, r4
   162a6:	4620      	mov	r0, r4
   162a8:	f7fe fc9a 	bl	14be0 <vli_sub>
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   162ac:	6821      	ldr	r1, [r4, #0]
    if (vli_testBit(X1, 0)) {
   162ae:	07cb      	lsls	r3, r1, #31
   162b0:	f100 808c 	bmi.w	163cc <EccPoint_double_jacobian.part.0+0x2a8>
        uECC_word_t temp = *vli;
   162b4:	e9d4 7905 	ldrd	r7, r9, [r4, #20]
   162b8:	e9d4 e803 	ldrd	lr, r8, [r4, #12]
   162bc:	69e2      	ldr	r2, [r4, #28]
        *vli = (temp >> 1) | carry;
   162be:	ea4f 0059 	mov.w	r0, r9, lsr #1
        uECC_word_t temp = *vli;
   162c2:	e9d4 3c01 	ldrd	r3, ip, [r4, #4]
        *vli = (temp >> 1) | carry;
   162c6:	ea40 70c2 	orr.w	r0, r0, r2, lsl #31
   162ca:	0852      	lsrs	r2, r2, #1
   162cc:	61a0      	str	r0, [r4, #24]
   162ce:	61e2      	str	r2, [r4, #28]
   162d0:	0878      	lsrs	r0, r7, #1
   162d2:	ea4f 0258 	mov.w	r2, r8, lsr #1
   162d6:	ea42 72c7 	orr.w	r2, r2, r7, lsl #31
   162da:	ea40 70c9 	orr.w	r0, r0, r9, lsl #31
   162de:	6160      	str	r0, [r4, #20]
   162e0:	6122      	str	r2, [r4, #16]
   162e2:	ea4f 075e 	mov.w	r7, lr, lsr #1
   162e6:	085a      	lsrs	r2, r3, #1
   162e8:	ea4f 005c 	mov.w	r0, ip, lsr #1
        carry = temp << (uECC_WORD_BITS - 1);
   162ec:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
   162ee:	ea47 77c8 	orr.w	r7, r7, r8, lsl #31
   162f2:	ea40 70ce 	orr.w	r0, r0, lr, lsl #31
   162f6:	ea42 72cc 	orr.w	r2, r2, ip, lsl #31
   162fa:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
   162fe:	60e7      	str	r7, [r4, #12]
   16300:	60a0      	str	r0, [r4, #8]
   16302:	6062      	str	r2, [r4, #4]
   16304:	6023      	str	r3, [r4, #0]
    vli_square(product, left);
   16306:	4621      	mov	r1, r4
   16308:	a810      	add	r0, sp, #64	; 0x40
   1630a:	f7fe ff8d 	bl	15228 <vli_square>
    vli_mmod_fast(result, product);
   1630e:	a910      	add	r1, sp, #64	; 0x40
   16310:	4628      	mov	r0, r5
   16312:	f7ff f945 	bl	155a0 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   16316:	aa08      	add	r2, sp, #32
   16318:	4629      	mov	r1, r5
   1631a:	4628      	mov	r0, r5
   1631c:	f7fe fc60 	bl	14be0 <vli_sub>
    if (l_borrow) {
   16320:	2800      	cmp	r0, #0
   16322:	d14d      	bne.n	163c0 <EccPoint_double_jacobian.part.0+0x29c>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   16324:	aa08      	add	r2, sp, #32
   16326:	4629      	mov	r1, r5
   16328:	4628      	mov	r0, r5
   1632a:	f7fe fc59 	bl	14be0 <vli_sub>
    if (l_borrow) {
   1632e:	2800      	cmp	r0, #0
   16330:	d140      	bne.n	163b4 <EccPoint_double_jacobian.part.0+0x290>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   16332:	a908      	add	r1, sp, #32
   16334:	462a      	mov	r2, r5
   16336:	4608      	mov	r0, r1
   16338:	f7fe fc52 	bl	14be0 <vli_sub>
    if (l_borrow) {
   1633c:	bba0      	cbnz	r0, 163a8 <EccPoint_double_jacobian.part.0+0x284>
    vli_mult(product, left, right);
   1633e:	aa08      	add	r2, sp, #32
   16340:	4621      	mov	r1, r4
   16342:	a810      	add	r0, sp, #64	; 0x40
   16344:	f7fe fc94 	bl	14c70 <vli_mult>
    vli_mmod_fast(result, product);
   16348:	a910      	add	r1, sp, #64	; 0x40
   1634a:	4620      	mov	r0, r4
   1634c:	f7ff f928 	bl	155a0 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   16350:	466a      	mov	r2, sp
   16352:	4621      	mov	r1, r4
   16354:	4668      	mov	r0, sp
   16356:	f7fe fc43 	bl	14be0 <vli_sub>
    if (l_borrow) {
   1635a:	b9f8      	cbnz	r0, 1639c <EccPoint_double_jacobian.part.0+0x278>
        dest[i] = src[i];
   1635c:	462f      	mov	r7, r5
   1635e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   16360:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   16362:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   16366:	46b4      	mov	ip, r6
   16368:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1636c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   16370:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   16372:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   16376:	46ee      	mov	lr, sp
   16378:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1637c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   16380:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   16382:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
   16386:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
   1638a:	b021      	add	sp, #132	; 0x84
   1638c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        vli_add(result, result, mod);
   16390:	4a27      	ldr	r2, [pc, #156]	; (16430 <EccPoint_double_jacobian.part.0+0x30c>)
   16392:	4629      	mov	r1, r5
   16394:	4628      	mov	r0, r5
   16396:	f7fe fbe3 	bl	14b60 <vli_add>
   1639a:	e73c      	b.n	16216 <EccPoint_double_jacobian.part.0+0xf2>
   1639c:	4a24      	ldr	r2, [pc, #144]	; (16430 <EccPoint_double_jacobian.part.0+0x30c>)
   1639e:	4669      	mov	r1, sp
   163a0:	4668      	mov	r0, sp
   163a2:	f7fe fbdd 	bl	14b60 <vli_add>
   163a6:	e7d9      	b.n	1635c <EccPoint_double_jacobian.part.0+0x238>
   163a8:	a908      	add	r1, sp, #32
   163aa:	4a21      	ldr	r2, [pc, #132]	; (16430 <EccPoint_double_jacobian.part.0+0x30c>)
   163ac:	4608      	mov	r0, r1
   163ae:	f7fe fbd7 	bl	14b60 <vli_add>
   163b2:	e7c4      	b.n	1633e <EccPoint_double_jacobian.part.0+0x21a>
   163b4:	4a1e      	ldr	r2, [pc, #120]	; (16430 <EccPoint_double_jacobian.part.0+0x30c>)
   163b6:	4629      	mov	r1, r5
   163b8:	4628      	mov	r0, r5
   163ba:	f7fe fbd1 	bl	14b60 <vli_add>
   163be:	e7b8      	b.n	16332 <EccPoint_double_jacobian.part.0+0x20e>
   163c0:	4a1b      	ldr	r2, [pc, #108]	; (16430 <EccPoint_double_jacobian.part.0+0x30c>)
   163c2:	4629      	mov	r1, r5
   163c4:	4628      	mov	r0, r5
   163c6:	f7fe fbcb 	bl	14b60 <vli_add>
   163ca:	e7ab      	b.n	16324 <EccPoint_double_jacobian.part.0+0x200>
        uECC_word_t l_carry = vli_add(X1, X1, curve_p);
   163cc:	4a18      	ldr	r2, [pc, #96]	; (16430 <EccPoint_double_jacobian.part.0+0x30c>)
   163ce:	4621      	mov	r1, r4
   163d0:	4620      	mov	r0, r4
   163d2:	f7fe fbc5 	bl	14b60 <vli_add>
        uECC_word_t temp = *vli;
   163d6:	e9d4 2705 	ldrd	r2, r7, [r4, #20]
   163da:	f8d4 901c 	ldr.w	r9, [r4, #28]
   163de:	6863      	ldr	r3, [r4, #4]
        X1[uECC_WORDS - 1] |= l_carry << (uECC_WORD_BITS - 1);
   163e0:	07c1      	lsls	r1, r0, #31
   163e2:	ea41 0159 	orr.w	r1, r1, r9, lsr #1
        uECC_word_t temp = *vli;
   163e6:	e9d4 0c02 	ldrd	r0, ip, [r4, #8]
        *vli = (temp >> 1) | carry;
   163ea:	ea4f 0857 	mov.w	r8, r7, lsr #1
        X1[uECC_WORDS - 1] |= l_carry << (uECC_WORD_BITS - 1);
   163ee:	61e1      	str	r1, [r4, #28]
        carry = temp << (uECC_WORD_BITS - 1);
   163f0:	07ff      	lsls	r7, r7, #31
        uECC_word_t temp = *vli;
   163f2:	6921      	ldr	r1, [r4, #16]
        *vli = (temp >> 1) | carry;
   163f4:	ea47 0752 	orr.w	r7, r7, r2, lsr #1
        carry = temp << (uECC_WORD_BITS - 1);
   163f8:	07d2      	lsls	r2, r2, #31
        *vli = (temp >> 1) | carry;
   163fa:	ea42 0251 	orr.w	r2, r2, r1, lsr #1
   163fe:	6122      	str	r2, [r4, #16]
   16400:	ea4f 025c 	mov.w	r2, ip, lsr #1
   16404:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
   16408:	60e2      	str	r2, [r4, #12]
   1640a:	0842      	lsrs	r2, r0, #1
   1640c:	ea42 72cc 	orr.w	r2, r2, ip, lsl #31
   16410:	60a2      	str	r2, [r4, #8]
   16412:	085a      	lsrs	r2, r3, #1
   16414:	ea42 70c0 	orr.w	r0, r2, r0, lsl #31
   16418:	6822      	ldr	r2, [r4, #0]
   1641a:	6167      	str	r7, [r4, #20]
        carry = temp << (uECC_WORD_BITS - 1);
   1641c:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
   1641e:	ea48 78c9 	orr.w	r8, r8, r9, lsl #31
   16422:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   16426:	f8c4 8018 	str.w	r8, [r4, #24]
   1642a:	6060      	str	r0, [r4, #4]
   1642c:	6023      	str	r3, [r4, #0]
        X1[uECC_WORDS - 1] |= l_carry << (uECC_WORD_BITS - 1);
   1642e:	e76a      	b.n	16306 <EccPoint_double_jacobian.part.0+0x1e2>
   16430:	00024790 	.word	0x00024790

00016434 <EccPoint_mult.constprop.0>:

static void EccPoint_mult(EccPoint * RESTRICT result,
   16434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16438:	b0c5      	sub	sp, #276	; 0x114
   1643a:	4690      	mov	r8, r2
        dest[i] = src[i];
   1643c:	468c      	mov	ip, r1
    uECC_word_t z[uECC_WORDS];
    bitcount_t i;
    uECC_word_t nb;

    vli_set(Rx[1], point->x);
    vli_set(Ry[1], point->y);
   1643e:	f101 0220 	add.w	r2, r1, #32
static void EccPoint_mult(EccPoint * RESTRICT result,
   16442:	9002      	str	r0, [sp, #8]
    vli_set(Ry[1], point->y);
   16444:	9201      	str	r2, [sp, #4]
        dest[i] = src[i];
   16446:	4616      	mov	r6, r2
static void EccPoint_mult(EccPoint * RESTRICT result,
   16448:	468a      	mov	sl, r1
    if (initial_Z) {
   1644a:	461c      	mov	r4, r3
        dest[i] = src[i];
   1644c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   16450:	af1c      	add	r7, sp, #112	; 0x70
   16452:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   16454:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   16458:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   1645c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1645e:	ad2c      	add	r5, sp, #176	; 0xb0
   16460:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   16462:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   16466:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    if (initial_Z) {
   1646a:	2c00      	cmp	r4, #0
   1646c:	f000 815c 	beq.w	16728 <EccPoint_mult.constprop.0+0x2f4>
        dest[i] = src[i];
   16470:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   16472:	ae04      	add	r6, sp, #16
   16474:	4635      	mov	r5, r6
   16476:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   16478:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1647c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   16480:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   16484:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   16488:	af14      	add	r7, sp, #80	; 0x50
   1648a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1648c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   16490:	ad2c      	add	r5, sp, #176	; 0xb0
   16492:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   16496:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   16498:	ac24      	add	r4, sp, #144	; 0x90
   1649a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1649c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   164a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    vli_square(product, left);
   164a4:	4631      	mov	r1, r6
   164a6:	a834      	add	r0, sp, #208	; 0xd0
   164a8:	f7fe febe 	bl	15228 <vli_square>
    vli_mmod_fast(result, product);
   164ac:	a934      	add	r1, sp, #208	; 0xd0
   164ae:	a80c      	add	r0, sp, #48	; 0x30
   164b0:	f7ff f876 	bl	155a0 <vli_mmod_fast>
    vli_mult(product, left, right);
   164b4:	aa0c      	add	r2, sp, #48	; 0x30
   164b6:	a91c      	add	r1, sp, #112	; 0x70
   164b8:	a834      	add	r0, sp, #208	; 0xd0
   164ba:	f7fe fbd9 	bl	14c70 <vli_mult>
    vli_mmod_fast(result, product);
   164be:	a934      	add	r1, sp, #208	; 0xd0
   164c0:	a81c      	add	r0, sp, #112	; 0x70
   164c2:	f7ff f86d 	bl	155a0 <vli_mmod_fast>
    vli_mult(product, left, right);
   164c6:	4632      	mov	r2, r6
   164c8:	a90c      	add	r1, sp, #48	; 0x30
   164ca:	a834      	add	r0, sp, #208	; 0xd0
   164cc:	f7fe fbd0 	bl	14c70 <vli_mult>
    vli_mmod_fast(result, product);
   164d0:	a934      	add	r1, sp, #208	; 0xd0
   164d2:	a80c      	add	r0, sp, #48	; 0x30
   164d4:	f7ff f864 	bl	155a0 <vli_mmod_fast>
    vli_mult(product, left, right);
   164d8:	aa0c      	add	r2, sp, #48	; 0x30
   164da:	a92c      	add	r1, sp, #176	; 0xb0
   164dc:	a834      	add	r0, sp, #208	; 0xd0
   164de:	f7fe fbc7 	bl	14c70 <vli_mult>
    vli_mmod_fast(result, product);
   164e2:	a934      	add	r1, sp, #208	; 0xd0
   164e4:	a82c      	add	r0, sp, #176	; 0xb0
   164e6:	f7ff f85b 	bl	155a0 <vli_mmod_fast>
        if (vli[i]) {
   164ea:	6833      	ldr	r3, [r6, #0]
   164ec:	2b00      	cmp	r3, #0
   164ee:	f040 810f 	bne.w	16710 <EccPoint_mult.constprop.0+0x2dc>
   164f2:	6873      	ldr	r3, [r6, #4]
   164f4:	2b00      	cmp	r3, #0
   164f6:	f040 810b 	bne.w	16710 <EccPoint_mult.constprop.0+0x2dc>
   164fa:	68b3      	ldr	r3, [r6, #8]
   164fc:	2b00      	cmp	r3, #0
   164fe:	f040 8107 	bne.w	16710 <EccPoint_mult.constprop.0+0x2dc>
   16502:	68f3      	ldr	r3, [r6, #12]
   16504:	2b00      	cmp	r3, #0
   16506:	f040 8103 	bne.w	16710 <EccPoint_mult.constprop.0+0x2dc>
   1650a:	6933      	ldr	r3, [r6, #16]
   1650c:	2b00      	cmp	r3, #0
   1650e:	f040 80ff 	bne.w	16710 <EccPoint_mult.constprop.0+0x2dc>
   16512:	6973      	ldr	r3, [r6, #20]
   16514:	2b00      	cmp	r3, #0
   16516:	f040 80fb 	bne.w	16710 <EccPoint_mult.constprop.0+0x2dc>
   1651a:	69b3      	ldr	r3, [r6, #24]
   1651c:	2b00      	cmp	r3, #0
   1651e:	f040 80f7 	bne.w	16710 <EccPoint_mult.constprop.0+0x2dc>
   16522:	69f3      	ldr	r3, [r6, #28]
   16524:	2b00      	cmp	r3, #0
   16526:	f040 80f3 	bne.w	16710 <EccPoint_mult.constprop.0+0x2dc>
    vli_square(product, left);
   1652a:	4631      	mov	r1, r6
   1652c:	a834      	add	r0, sp, #208	; 0xd0
   1652e:	f7fe fe7b 	bl	15228 <vli_square>
    vli_mmod_fast(result, product);
   16532:	a934      	add	r1, sp, #208	; 0xd0
   16534:	a80c      	add	r0, sp, #48	; 0x30
   16536:	f7ff f833 	bl	155a0 <vli_mmod_fast>
    vli_mult(product, left, right);
   1653a:	aa0c      	add	r2, sp, #48	; 0x30
   1653c:	a914      	add	r1, sp, #80	; 0x50
   1653e:	a834      	add	r0, sp, #208	; 0xd0
   16540:	f7fe fb96 	bl	14c70 <vli_mult>
    vli_mmod_fast(result, product);
   16544:	a934      	add	r1, sp, #208	; 0xd0
   16546:	a814      	add	r0, sp, #80	; 0x50
   16548:	f7ff f82a 	bl	155a0 <vli_mmod_fast>
    vli_mult(product, left, right);
   1654c:	4632      	mov	r2, r6
   1654e:	a90c      	add	r1, sp, #48	; 0x30
   16550:	a834      	add	r0, sp, #208	; 0xd0
   16552:	f7fe fb8d 	bl	14c70 <vli_mult>
    vli_mmod_fast(result, product);
   16556:	a934      	add	r1, sp, #208	; 0xd0
   16558:	a80c      	add	r0, sp, #48	; 0x30
   1655a:	f7ff f821 	bl	155a0 <vli_mmod_fast>
    vli_mult(product, left, right);
   1655e:	aa0c      	add	r2, sp, #48	; 0x30
   16560:	a924      	add	r1, sp, #144	; 0x90
   16562:	a834      	add	r0, sp, #208	; 0xd0
   16564:	f7fe fb84 	bl	14c70 <vli_mult>
    vli_mmod_fast(result, product);
   16568:	a934      	add	r1, sp, #208	; 0xd0
   1656a:	a824      	add	r0, sp, #144	; 0x90
   1656c:	f7ff f818 	bl	155a0 <vli_mmod_fast>

    XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initialZ);

    for (i = numBits - 2; i > 0; --i) {
   16570:	25ff      	movs	r5, #255	; 0xff
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   16572:	f04f 0901 	mov.w	r9, #1
   16576:	9603      	str	r6, [sp, #12]
   16578:	116b      	asrs	r3, r5, #5
   1657a:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
   1657e:	f005 031f 	and.w	r3, r5, #31
   16582:	fa09 f303 	lsl.w	r3, r9, r3
        nb = !vli_testBit(scalar, i);
   16586:	4213      	tst	r3, r2
   16588:	bf0c      	ite	eq
   1658a:	2401      	moveq	r4, #1
   1658c:	2400      	movne	r4, #0
        XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb]);
   1658e:	f1c4 0701 	rsb	r7, r4, #1
   16592:	ab14      	add	r3, sp, #80	; 0x50
   16594:	eb03 1647 	add.w	r6, r3, r7, lsl #5
   16598:	ab24      	add	r3, sp, #144	; 0x90
   1659a:	eb03 1747 	add.w	r7, r3, r7, lsl #5
   1659e:	ab14      	add	r3, sp, #80	; 0x50
   165a0:	eb03 1b44 	add.w	fp, r3, r4, lsl #5
   165a4:	ab24      	add	r3, sp, #144	; 0x90
   165a6:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   165aa:	4623      	mov	r3, r4
   165ac:	465a      	mov	r2, fp
   165ae:	4639      	mov	r1, r7
   165b0:	4630      	mov	r0, r6
   165b2:	f7ff fca5 	bl	15f00 <XYcZ_addC>
        XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb]);
   165b6:	463b      	mov	r3, r7
   165b8:	4632      	mov	r2, r6
   165ba:	4621      	mov	r1, r4
   165bc:	4658      	mov	r0, fp
   165be:	f7ff fbff 	bl	15dc0 <XYcZ_add>
    for (i = numBits - 2; i > 0; --i) {
   165c2:	3d01      	subs	r5, #1
   165c4:	d1d8      	bne.n	16578 <EccPoint_mult.constprop.0+0x144>
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   165c6:	f8d8 4000 	ldr.w	r4, [r8]
   165ca:	9e03      	ldr	r6, [sp, #12]
   165cc:	43e5      	mvns	r5, r4
    }

    nb = !vli_testBit(scalar, 0);
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb]);
   165ce:	ab14      	add	r3, sp, #80	; 0x50
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   165d0:	f004 0401 	and.w	r4, r4, #1
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb]);
   165d4:	eb03 1744 	add.w	r7, r3, r4, lsl #5
   165d8:	ab24      	add	r3, sp, #144	; 0x90
   165da:	f005 0501 	and.w	r5, r5, #1
   165de:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   165e2:	ab14      	add	r3, sp, #80	; 0x50
   165e4:	eb03 1845 	add.w	r8, r3, r5, lsl #5
   165e8:	ab24      	add	r3, sp, #144	; 0x90
   165ea:	eb03 1545 	add.w	r5, r3, r5, lsl #5
   165ee:	4642      	mov	r2, r8
   165f0:	4621      	mov	r1, r4
   165f2:	4638      	mov	r0, r7
   165f4:	462b      	mov	r3, r5
   165f6:	f7ff fc83 	bl	15f00 <XYcZ_addC>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   165fa:	aa14      	add	r2, sp, #80	; 0x50
   165fc:	a91c      	add	r1, sp, #112	; 0x70
   165fe:	4630      	mov	r0, r6
   16600:	f7fe faee 	bl	14be0 <vli_sub>
    if (l_borrow) {
   16604:	2800      	cmp	r0, #0
   16606:	f040 8089 	bne.w	1671c <EccPoint_mult.constprop.0+0x2e8>
    vli_mult(product, left, right);
   1660a:	4622      	mov	r2, r4
   1660c:	4631      	mov	r1, r6
   1660e:	a834      	add	r0, sp, #208	; 0xd0
   16610:	f7fe fb2e 	bl	14c70 <vli_mult>
    vli_mmod_fast(result, product);
   16614:	a934      	add	r1, sp, #208	; 0xd0
   16616:	4630      	mov	r0, r6
   16618:	f7fe ffc2 	bl	155a0 <vli_mmod_fast>
    vli_mult(product, left, right);
   1661c:	4652      	mov	r2, sl
   1661e:	4631      	mov	r1, r6
   16620:	a834      	add	r0, sp, #208	; 0xd0
   16622:	f7fe fb25 	bl	14c70 <vli_mult>
    vli_mmod_fast(result, product);
   16626:	a934      	add	r1, sp, #208	; 0xd0
   16628:	4630      	mov	r0, r6
   1662a:	f7fe ffb9 	bl	155a0 <vli_mmod_fast>
        if (vli[i]) {
   1662e:	6833      	ldr	r3, [r6, #0]
   16630:	2b00      	cmp	r3, #0
   16632:	d167      	bne.n	16704 <EccPoint_mult.constprop.0+0x2d0>
   16634:	6873      	ldr	r3, [r6, #4]
   16636:	2b00      	cmp	r3, #0
   16638:	d164      	bne.n	16704 <EccPoint_mult.constprop.0+0x2d0>
   1663a:	68b3      	ldr	r3, [r6, #8]
   1663c:	2b00      	cmp	r3, #0
   1663e:	d161      	bne.n	16704 <EccPoint_mult.constprop.0+0x2d0>
   16640:	68f3      	ldr	r3, [r6, #12]
   16642:	2b00      	cmp	r3, #0
   16644:	d15e      	bne.n	16704 <EccPoint_mult.constprop.0+0x2d0>
   16646:	6933      	ldr	r3, [r6, #16]
   16648:	2b00      	cmp	r3, #0
   1664a:	d15b      	bne.n	16704 <EccPoint_mult.constprop.0+0x2d0>
   1664c:	6973      	ldr	r3, [r6, #20]
   1664e:	2b00      	cmp	r3, #0
   16650:	d158      	bne.n	16704 <EccPoint_mult.constprop.0+0x2d0>
   16652:	69b3      	ldr	r3, [r6, #24]
   16654:	2b00      	cmp	r3, #0
   16656:	d155      	bne.n	16704 <EccPoint_mult.constprop.0+0x2d0>
   16658:	69f1      	ldr	r1, [r6, #28]
   1665a:	2900      	cmp	r1, #0
   1665c:	d152      	bne.n	16704 <EccPoint_mult.constprop.0+0x2d0>
        vli[i] = 0;
   1665e:	2220      	movs	r2, #32
   16660:	4630      	mov	r0, r6
   16662:	f00a fef3 	bl	2144c <memset>
    vli_mult(product, left, right);
   16666:	9a01      	ldr	r2, [sp, #4]
   16668:	4631      	mov	r1, r6
   1666a:	a834      	add	r0, sp, #208	; 0xd0
   1666c:	f7fe fb00 	bl	14c70 <vli_mult>
    vli_mmod_fast(result, product);
   16670:	a934      	add	r1, sp, #208	; 0xd0
   16672:	4630      	mov	r0, r6
   16674:	f7fe ff94 	bl	155a0 <vli_mmod_fast>
    vli_mult(product, left, right);
   16678:	463a      	mov	r2, r7
   1667a:	4631      	mov	r1, r6
   1667c:	a834      	add	r0, sp, #208	; 0xd0
   1667e:	f7fe faf7 	bl	14c70 <vli_mult>
    vli_mmod_fast(result, product);
   16682:	a934      	add	r1, sp, #208	; 0xd0
   16684:	4630      	mov	r0, r6
   16686:	f7fe ff8b 	bl	155a0 <vli_mmod_fast>
    vli_modInv(z, z, curve_p);          /* 1 / (xP * Yb * (X1 - X0)) */
    vli_modMult_fast(z, z, point->y); /* yP / (xP * Yb * (X1 - X0)) */
    vli_modMult_fast(z, z, Rx[1 - nb]); /* Xb * yP / (xP * Yb * (X1 - X0)) */
    /* End 1/Z calculation */

    XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb]);
   1668a:	4623      	mov	r3, r4
   1668c:	463a      	mov	r2, r7
   1668e:	4629      	mov	r1, r5
   16690:	4640      	mov	r0, r8
   16692:	f7ff fb95 	bl	15dc0 <XYcZ_add>
    vli_square(product, left);
   16696:	4631      	mov	r1, r6
   16698:	a834      	add	r0, sp, #208	; 0xd0
   1669a:	f7fe fdc5 	bl	15228 <vli_square>
    vli_mmod_fast(result, product);
   1669e:	a934      	add	r1, sp, #208	; 0xd0
   166a0:	a80c      	add	r0, sp, #48	; 0x30
   166a2:	f7fe ff7d 	bl	155a0 <vli_mmod_fast>
    vli_mult(product, left, right);
   166a6:	aa0c      	add	r2, sp, #48	; 0x30
   166a8:	a914      	add	r1, sp, #80	; 0x50
   166aa:	a834      	add	r0, sp, #208	; 0xd0
   166ac:	f7fe fae0 	bl	14c70 <vli_mult>
    vli_mmod_fast(result, product);
   166b0:	a934      	add	r1, sp, #208	; 0xd0
   166b2:	a814      	add	r0, sp, #80	; 0x50
   166b4:	f7fe ff74 	bl	155a0 <vli_mmod_fast>
    vli_mult(product, left, right);
   166b8:	4632      	mov	r2, r6
   166ba:	a90c      	add	r1, sp, #48	; 0x30
   166bc:	a834      	add	r0, sp, #208	; 0xd0
   166be:	f7fe fad7 	bl	14c70 <vli_mult>
    vli_mmod_fast(result, product);
   166c2:	a934      	add	r1, sp, #208	; 0xd0
   166c4:	a80c      	add	r0, sp, #48	; 0x30
   166c6:	f7fe ff6b 	bl	155a0 <vli_mmod_fast>
    vli_mult(product, left, right);
   166ca:	aa0c      	add	r2, sp, #48	; 0x30
   166cc:	a924      	add	r1, sp, #144	; 0x90
   166ce:	a834      	add	r0, sp, #208	; 0xd0
   166d0:	f7fe face 	bl	14c70 <vli_mult>
        dest[i] = src[i];
   166d4:	af14      	add	r7, sp, #80	; 0x50
    vli_mmod_fast(result, product);
   166d6:	a934      	add	r1, sp, #208	; 0xd0
   166d8:	a824      	add	r0, sp, #144	; 0x90
   166da:	f7fe ff61 	bl	155a0 <vli_mmod_fast>
        dest[i] = src[i];
   166de:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   166e0:	9c02      	ldr	r4, [sp, #8]
   166e2:	f104 0520 	add.w	r5, r4, #32
   166e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   166e8:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   166ec:	ae24      	add	r6, sp, #144	; 0x90
   166ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   166f2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   166f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   166f6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   166fa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    apply_z(Rx[0], Ry[0], z);

    vli_set(result->x, Rx[0]);
    vli_set(result->y, Ry[0]);
}
   166fe:	b045      	add	sp, #276	; 0x114
   16700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16704:	4a0e      	ldr	r2, [pc, #56]	; (16740 <EccPoint_mult.constprop.0+0x30c>)
   16706:	4631      	mov	r1, r6
   16708:	4630      	mov	r0, r6
   1670a:	f7ff f82f 	bl	1576c <vli_modInv.part.0>
   1670e:	e7aa      	b.n	16666 <EccPoint_mult.constprop.0+0x232>
   16710:	a92c      	add	r1, sp, #176	; 0xb0
   16712:	4632      	mov	r2, r6
   16714:	a81c      	add	r0, sp, #112	; 0x70
   16716:	f7ff fd05 	bl	16124 <EccPoint_double_jacobian.part.0>
   1671a:	e706      	b.n	1652a <EccPoint_mult.constprop.0+0xf6>
        vli_add(result, result, mod);
   1671c:	4a08      	ldr	r2, [pc, #32]	; (16740 <EccPoint_mult.constprop.0+0x30c>)
   1671e:	4631      	mov	r1, r6
   16720:	4630      	mov	r0, r6
   16722:	f7fe fa1d 	bl	14b60 <vli_add>
   16726:	e770      	b.n	1660a <EccPoint_mult.constprop.0+0x1d6>
        vli[i] = 0;
   16728:	ae04      	add	r6, sp, #16
        z[0] = 1;
   1672a:	2301      	movs	r3, #1
        vli[i] = 0;
   1672c:	e9cd 4405 	strd	r4, r4, [sp, #20]
   16730:	e9cd 4407 	strd	r4, r4, [sp, #28]
   16734:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   16738:	940b      	str	r4, [sp, #44]	; 0x2c
        z[0] = 1;
   1673a:	6033      	str	r3, [r6, #0]
   1673c:	e6a0      	b.n	16480 <EccPoint_mult.constprop.0+0x4c>
   1673e:	bf00      	nop
   16740:	00024790 	.word	0x00024790

00016744 <EccPoint_compute_public_key>:

static int EccPoint_compute_public_key(EccPoint *result, uECC_word_t *private) {
   16744:	b5f0      	push	{r4, r5, r6, r7, lr}
        if (vli[i]) {
   16746:	680b      	ldr	r3, [r1, #0]
static int EccPoint_compute_public_key(EccPoint *result, uECC_word_t *private) {
   16748:	b093      	sub	sp, #76	; 0x4c
#if (uECC_CURVE != uECC_secp160r1)
    uECC_word_t tmp1[uECC_WORDS];
    uECC_word_t tmp2[uECC_WORDS];
    uECC_word_t *p2[2] = {tmp1, tmp2};
   1674a:	ae02      	add	r6, sp, #8
   1674c:	af0a      	add	r7, sp, #40	; 0x28
   1674e:	e9cd 6700 	strd	r6, r7, [sp]
static int EccPoint_compute_public_key(EccPoint *result, uECC_word_t *private) {
   16752:	4605      	mov	r5, r0
        if (vli[i]) {
   16754:	b98b      	cbnz	r3, 1677a <EccPoint_compute_public_key+0x36>
   16756:	684a      	ldr	r2, [r1, #4]
   16758:	b97a      	cbnz	r2, 1677a <EccPoint_compute_public_key+0x36>
   1675a:	688a      	ldr	r2, [r1, #8]
   1675c:	b96a      	cbnz	r2, 1677a <EccPoint_compute_public_key+0x36>
   1675e:	68ca      	ldr	r2, [r1, #12]
   16760:	b95a      	cbnz	r2, 1677a <EccPoint_compute_public_key+0x36>
   16762:	690a      	ldr	r2, [r1, #16]
   16764:	b94a      	cbnz	r2, 1677a <EccPoint_compute_public_key+0x36>
   16766:	694a      	ldr	r2, [r1, #20]
   16768:	b93a      	cbnz	r2, 1677a <EccPoint_compute_public_key+0x36>
   1676a:	698b      	ldr	r3, [r1, #24]
   1676c:	2b00      	cmp	r3, #0
   1676e:	d168      	bne.n	16842 <EccPoint_compute_public_key+0xfe>
   16770:	69cb      	ldr	r3, [r1, #28]
   16772:	bb5b      	cbnz	r3, 167cc <EccPoint_compute_public_key+0x88>
    uECC_word_t carry;
#endif

    /* Make sure the private key is in the range [1, n-1]. */
    if (vli_isZero(private)) {
        return 0;
   16774:	2000      	movs	r0, #0

    if (EccPoint_isZero(result)) {
        return 0;
    }
    return 1;
}
   16776:	b013      	add	sp, #76	; 0x4c
   16778:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (left[i] > right[i]) {
   1677a:	69ca      	ldr	r2, [r1, #28]
   1677c:	3201      	adds	r2, #1
   1677e:	d125      	bne.n	167cc <EccPoint_compute_public_key+0x88>
        } else if (left[i] < right[i]) {
   16780:	698a      	ldr	r2, [r1, #24]
   16782:	2a00      	cmp	r2, #0
   16784:	d1f6      	bne.n	16774 <EccPoint_compute_public_key+0x30>
   16786:	694a      	ldr	r2, [r1, #20]
        if (left[i] > right[i]) {
   16788:	3201      	adds	r2, #1
   1678a:	d11f      	bne.n	167cc <EccPoint_compute_public_key+0x88>
   1678c:	690a      	ldr	r2, [r1, #16]
   1678e:	3201      	adds	r2, #1
   16790:	d11c      	bne.n	167cc <EccPoint_compute_public_key+0x88>
   16792:	68ca      	ldr	r2, [r1, #12]
   16794:	482d      	ldr	r0, [pc, #180]	; (1684c <EccPoint_compute_public_key+0x108>)
   16796:	4282      	cmp	r2, r0
   16798:	d918      	bls.n	167cc <EccPoint_compute_public_key+0x88>
        } else if (left[i] < right[i]) {
   1679a:	3001      	adds	r0, #1
   1679c:	4282      	cmp	r2, r0
   1679e:	d1e9      	bne.n	16774 <EccPoint_compute_public_key+0x30>
        if (left[i] > right[i]) {
   167a0:	f1a0 50ae 	sub.w	r0, r0, #364904448	; 0x15c00000
   167a4:	688a      	ldr	r2, [r1, #8]
   167a6:	f5a0 2075 	sub.w	r0, r0, #1003520	; 0xf5000
   167aa:	f6a0 402a 	subw	r0, r0, #3114	; 0xc2a
   167ae:	4282      	cmp	r2, r0
   167b0:	d90c      	bls.n	167cc <EccPoint_compute_public_key+0x88>
        } else if (left[i] < right[i]) {
   167b2:	3001      	adds	r0, #1
   167b4:	4282      	cmp	r2, r0
   167b6:	d1dd      	bne.n	16774 <EccPoint_compute_public_key+0x30>
        if (left[i] > right[i]) {
   167b8:	684a      	ldr	r2, [r1, #4]
   167ba:	4825      	ldr	r0, [pc, #148]	; (16850 <EccPoint_compute_public_key+0x10c>)
   167bc:	4282      	cmp	r2, r0
   167be:	d905      	bls.n	167cc <EccPoint_compute_public_key+0x88>
        } else if (left[i] < right[i]) {
   167c0:	3001      	adds	r0, #1
   167c2:	4282      	cmp	r2, r0
   167c4:	d1d6      	bne.n	16774 <EccPoint_compute_public_key+0x30>
        if (left[i] > right[i]) {
   167c6:	4a23      	ldr	r2, [pc, #140]	; (16854 <EccPoint_compute_public_key+0x110>)
   167c8:	4293      	cmp	r3, r2
   167ca:	d8d3      	bhi.n	16774 <EccPoint_compute_public_key+0x30>
    carry = vli_add(tmp1, private, curve_n);
   167cc:	4a22      	ldr	r2, [pc, #136]	; (16858 <EccPoint_compute_public_key+0x114>)
   167ce:	4630      	mov	r0, r6
   167d0:	f7fe f9c6 	bl	14b60 <vli_add>
    vli_add(tmp2, tmp1, curve_n);
   167d4:	4a20      	ldr	r2, [pc, #128]	; (16858 <EccPoint_compute_public_key+0x114>)
    carry = vli_add(tmp1, private, curve_n);
   167d6:	4604      	mov	r4, r0
    vli_add(tmp2, tmp1, curve_n);
   167d8:	4631      	mov	r1, r6
   167da:	4638      	mov	r0, r7
   167dc:	f7fe f9c0 	bl	14b60 <vli_add>
    EccPoint_mult(result, &curve_G, p2[!carry], 0, (uECC_BYTES * 8) + 1);
   167e0:	fab4 f384 	clz	r3, r4
   167e4:	aa12      	add	r2, sp, #72	; 0x48
   167e6:	095b      	lsrs	r3, r3, #5
   167e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   167ec:	491b      	ldr	r1, [pc, #108]	; (1685c <EccPoint_compute_public_key+0x118>)
   167ee:	f853 2c48 	ldr.w	r2, [r3, #-72]
   167f2:	4628      	mov	r0, r5
   167f4:	2300      	movs	r3, #0
   167f6:	f7ff fe1d 	bl	16434 <EccPoint_mult.constprop.0>
        if (vli[i]) {
   167fa:	682b      	ldr	r3, [r5, #0]
   167fc:	b9f3      	cbnz	r3, 1683c <EccPoint_compute_public_key+0xf8>
   167fe:	686b      	ldr	r3, [r5, #4]
   16800:	b9e3      	cbnz	r3, 1683c <EccPoint_compute_public_key+0xf8>
   16802:	68ab      	ldr	r3, [r5, #8]
   16804:	b9d3      	cbnz	r3, 1683c <EccPoint_compute_public_key+0xf8>
   16806:	68eb      	ldr	r3, [r5, #12]
   16808:	b9c3      	cbnz	r3, 1683c <EccPoint_compute_public_key+0xf8>
   1680a:	692b      	ldr	r3, [r5, #16]
   1680c:	b9b3      	cbnz	r3, 1683c <EccPoint_compute_public_key+0xf8>
   1680e:	696b      	ldr	r3, [r5, #20]
   16810:	b9a3      	cbnz	r3, 1683c <EccPoint_compute_public_key+0xf8>
   16812:	69ab      	ldr	r3, [r5, #24]
   16814:	b993      	cbnz	r3, 1683c <EccPoint_compute_public_key+0xf8>
   16816:	69eb      	ldr	r3, [r5, #28]
   16818:	b983      	cbnz	r3, 1683c <EccPoint_compute_public_key+0xf8>
   1681a:	6a2b      	ldr	r3, [r5, #32]
   1681c:	b973      	cbnz	r3, 1683c <EccPoint_compute_public_key+0xf8>
   1681e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   16820:	b963      	cbnz	r3, 1683c <EccPoint_compute_public_key+0xf8>
   16822:	6aab      	ldr	r3, [r5, #40]	; 0x28
   16824:	b953      	cbnz	r3, 1683c <EccPoint_compute_public_key+0xf8>
   16826:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   16828:	b943      	cbnz	r3, 1683c <EccPoint_compute_public_key+0xf8>
   1682a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   1682c:	b933      	cbnz	r3, 1683c <EccPoint_compute_public_key+0xf8>
   1682e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   16830:	b923      	cbnz	r3, 1683c <EccPoint_compute_public_key+0xf8>
   16832:	6bab      	ldr	r3, [r5, #56]	; 0x38
   16834:	b913      	cbnz	r3, 1683c <EccPoint_compute_public_key+0xf8>
   16836:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   16838:	2b00      	cmp	r3, #0
   1683a:	d09b      	beq.n	16774 <EccPoint_compute_public_key+0x30>
    return 1;
   1683c:	2001      	movs	r0, #1
}
   1683e:	b013      	add	sp, #76	; 0x4c
   16840:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (left[i] > right[i]) {
   16842:	69cb      	ldr	r3, [r1, #28]
   16844:	3301      	adds	r3, #1
   16846:	d1c1      	bne.n	167cc <EccPoint_compute_public_key+0x88>
   16848:	e794      	b.n	16774 <EccPoint_compute_public_key+0x30>
   1684a:	bf00      	nop
   1684c:	bce6faac 	.word	0xbce6faac
   16850:	f3b9cac1 	.word	0xf3b9cac1
   16854:	fc632550 	.word	0xfc632550
   16858:	00024770 	.word	0x00024770
   1685c:	00024710 	.word	0x00024710

00016860 <uECC_set_rng>:
    g_rng_function = rng_function;
   16860:	4b01      	ldr	r3, [pc, #4]	; (16868 <uECC_set_rng+0x8>)
   16862:	6018      	str	r0, [r3, #0]
}
   16864:	4770      	bx	lr
   16866:	bf00      	nop
   16868:	10002b90 	.word	0x10002b90

0001686c <uECC_make_key>:
    }
}

#endif /* uECC_WORD_SIZE */

int uECC_make_key(uint8_t public_key[uECC_BYTES*2], uint8_t private_key[uECC_BYTES]) {
   1686c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1686e:	4e81      	ldr	r6, [pc, #516]	; (16a74 <uECC_make_key+0x208>)
   16870:	b099      	sub	sp, #100	; 0x64
   16872:	4605      	mov	r5, r0
   16874:	460f      	mov	r7, r1
   16876:	2440      	movs	r4, #64	; 0x40
   16878:	e002      	b.n	16880 <uECC_make_key+0x14>
    uECC_word_t private[uECC_WORDS];
    EccPoint public;
    uECC_word_t tries;
    for (tries = 0; tries < MAX_TRIES; ++tries) {
   1687a:	3c01      	subs	r4, #1
   1687c:	f000 80f6 	beq.w	16a6c <uECC_make_key+0x200>
        if (g_rng_function((uint8_t *)private, sizeof(private)) &&
   16880:	6833      	ldr	r3, [r6, #0]
   16882:	2120      	movs	r1, #32
   16884:	4668      	mov	r0, sp
   16886:	4798      	blx	r3
   16888:	2800      	cmp	r0, #0
   1688a:	d0f6      	beq.n	1687a <uECC_make_key+0xe>
                EccPoint_compute_public_key(&public, private)) {
   1688c:	4669      	mov	r1, sp
   1688e:	a808      	add	r0, sp, #32
   16890:	f7ff ff58 	bl	16744 <EccPoint_compute_public_key>
        if (g_rng_function((uint8_t *)private, sizeof(private)) &&
   16894:	2800      	cmp	r0, #0
   16896:	d0f0      	beq.n	1687a <uECC_make_key+0xe>
        digit[0] = (uint8_t)(native[i] >> 24);
   16898:	e9dd 3400 	ldrd	r3, r4, [sp]
   1689c:	0e1a      	lsrs	r2, r3, #24
   1689e:	773a      	strb	r2, [r7, #28]
        digit[1] = (uint8_t)(native[i] >> 16);
   168a0:	0c1a      	lsrs	r2, r3, #16
        digit[0] = (uint8_t)(native[i] >> 24);
   168a2:	9802      	ldr	r0, [sp, #8]
        digit[1] = (uint8_t)(native[i] >> 16);
   168a4:	777a      	strb	r2, [r7, #29]
        digit[2] = (uint8_t)(native[i] >> 8);
   168a6:	0a1a      	lsrs	r2, r3, #8
   168a8:	77ba      	strb	r2, [r7, #30]
        digit[3] = (uint8_t)(native[i]);
   168aa:	76fc      	strb	r4, [r7, #27]
        digit[0] = (uint8_t)(native[i] >> 24);
   168ac:	0e22      	lsrs	r2, r4, #24
        digit[1] = (uint8_t)(native[i] >> 16);
   168ae:	0c26      	lsrs	r6, r4, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   168b0:	0a24      	lsrs	r4, r4, #8
        digit[0] = (uint8_t)(native[i] >> 24);
   168b2:	9903      	ldr	r1, [sp, #12]
        digit[2] = (uint8_t)(native[i] >> 8);
   168b4:	76bc      	strb	r4, [r7, #26]
        digit[0] = (uint8_t)(native[i] >> 24);
   168b6:	0e04      	lsrs	r4, r0, #24
        digit[3] = (uint8_t)(native[i]);
   168b8:	75f8      	strb	r0, [r7, #23]
        digit[0] = (uint8_t)(native[i] >> 24);
   168ba:	753c      	strb	r4, [r7, #20]
        digit[1] = (uint8_t)(native[i] >> 16);
   168bc:	0c04      	lsrs	r4, r0, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   168be:	0a00      	lsrs	r0, r0, #8
        digit[0] = (uint8_t)(native[i] >> 24);
   168c0:	763a      	strb	r2, [r7, #24]
        digit[2] = (uint8_t)(native[i] >> 8);
   168c2:	75b8      	strb	r0, [r7, #22]
        digit[0] = (uint8_t)(native[i] >> 24);
   168c4:	9a04      	ldr	r2, [sp, #16]
        digit[3] = (uint8_t)(native[i]);
   168c6:	74f9      	strb	r1, [r7, #19]
        digit[0] = (uint8_t)(native[i] >> 24);
   168c8:	0e08      	lsrs	r0, r1, #24
   168ca:	7438      	strb	r0, [r7, #16]
        digit[1] = (uint8_t)(native[i] >> 16);
   168cc:	0c08      	lsrs	r0, r1, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   168ce:	0a09      	lsrs	r1, r1, #8
        digit[3] = (uint8_t)(native[i]);
   168d0:	77fb      	strb	r3, [r7, #31]
        digit[2] = (uint8_t)(native[i] >> 8);
   168d2:	74b9      	strb	r1, [r7, #18]
        digit[0] = (uint8_t)(native[i] >> 24);
   168d4:	9b05      	ldr	r3, [sp, #20]
        digit[3] = (uint8_t)(native[i]);
   168d6:	73fa      	strb	r2, [r7, #15]
        digit[0] = (uint8_t)(native[i] >> 24);
   168d8:	0e11      	lsrs	r1, r2, #24
   168da:	7339      	strb	r1, [r7, #12]
        digit[1] = (uint8_t)(native[i] >> 16);
   168dc:	0c11      	lsrs	r1, r2, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   168de:	0a12      	lsrs	r2, r2, #8
        digit[0] = (uint8_t)(native[i] >> 24);
   168e0:	f8dd c018 	ldr.w	ip, [sp, #24]
        digit[2] = (uint8_t)(native[i] >> 8);
   168e4:	73ba      	strb	r2, [r7, #14]
        digit[0] = (uint8_t)(native[i] >> 24);
   168e6:	0e1a      	lsrs	r2, r3, #24
        digit[3] = (uint8_t)(native[i]);
   168e8:	72fb      	strb	r3, [r7, #11]
        digit[0] = (uint8_t)(native[i] >> 24);
   168ea:	723a      	strb	r2, [r7, #8]
        digit[1] = (uint8_t)(native[i] >> 16);
   168ec:	0c1a      	lsrs	r2, r3, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   168ee:	0a1b      	lsrs	r3, r3, #8
        digit[1] = (uint8_t)(native[i] >> 16);
   168f0:	727a      	strb	r2, [r7, #9]
        digit[2] = (uint8_t)(native[i] >> 8);
   168f2:	72bb      	strb	r3, [r7, #10]
        digit[0] = (uint8_t)(native[i] >> 24);
   168f4:	ea4f 621c 	mov.w	r2, ip, lsr #24
        digit[1] = (uint8_t)(native[i] >> 16);
   168f8:	ea4f 431c 	mov.w	r3, ip, lsr #16
   168fc:	767e      	strb	r6, [r7, #25]
   168fe:	757c      	strb	r4, [r7, #21]
   16900:	7478      	strb	r0, [r7, #17]
   16902:	7379      	strb	r1, [r7, #13]
        digit[0] = (uint8_t)(native[i] >> 24);
   16904:	713a      	strb	r2, [r7, #4]
        digit[1] = (uint8_t)(native[i] >> 16);
   16906:	717b      	strb	r3, [r7, #5]
        digit[0] = (uint8_t)(native[i] >> 24);
   16908:	9e07      	ldr	r6, [sp, #28]
   1690a:	9c08      	ldr	r4, [sp, #32]
        digit[3] = (uint8_t)(native[i]);
   1690c:	f887 c007 	strb.w	ip, [r7, #7]
        digit[2] = (uint8_t)(native[i] >> 8);
   16910:	ea4f 231c 	mov.w	r3, ip, lsr #8
   16914:	71bb      	strb	r3, [r7, #6]
        digit[3] = (uint8_t)(native[i]);
   16916:	70fe      	strb	r6, [r7, #3]
        digit[0] = (uint8_t)(native[i] >> 24);
   16918:	e9dd 0109 	ldrd	r0, r1, [sp, #36]	; 0x24
   1691c:	0e33      	lsrs	r3, r6, #24
        digit[1] = (uint8_t)(native[i] >> 16);
   1691e:	ea4f 4c16 	mov.w	ip, r6, lsr #16
        digit[2] = (uint8_t)(native[i] >> 8);
   16922:	0a36      	lsrs	r6, r6, #8
   16924:	70be      	strb	r6, [r7, #2]
        digit[0] = (uint8_t)(native[i] >> 24);
   16926:	0e26      	lsrs	r6, r4, #24
   16928:	703b      	strb	r3, [r7, #0]
        digit[1] = (uint8_t)(native[i] >> 16);
   1692a:	f887 c001 	strb.w	ip, [r7, #1]
        digit[3] = (uint8_t)(native[i]);
   1692e:	77ec      	strb	r4, [r5, #31]
        digit[0] = (uint8_t)(native[i] >> 24);
   16930:	772e      	strb	r6, [r5, #28]
        digit[1] = (uint8_t)(native[i] >> 16);
   16932:	0c26      	lsrs	r6, r4, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   16934:	0a24      	lsrs	r4, r4, #8
   16936:	77ac      	strb	r4, [r5, #30]
        digit[0] = (uint8_t)(native[i] >> 24);
   16938:	0e04      	lsrs	r4, r0, #24
   1693a:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
        digit[3] = (uint8_t)(native[i]);
   1693e:	76e8      	strb	r0, [r5, #27]
        digit[0] = (uint8_t)(native[i] >> 24);
   16940:	762c      	strb	r4, [r5, #24]
        digit[1] = (uint8_t)(native[i] >> 16);
   16942:	0c04      	lsrs	r4, r0, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   16944:	0a00      	lsrs	r0, r0, #8
   16946:	76a8      	strb	r0, [r5, #26]
        digit[0] = (uint8_t)(native[i] >> 24);
   16948:	0e08      	lsrs	r0, r1, #24
   1694a:	7528      	strb	r0, [r5, #20]
        digit[1] = (uint8_t)(native[i] >> 16);
   1694c:	0c08      	lsrs	r0, r1, #16
   1694e:	7568      	strb	r0, [r5, #21]
        digit[0] = (uint8_t)(native[i] >> 24);
   16950:	0e10      	lsrs	r0, r2, #24
        digit[3] = (uint8_t)(native[i]);
   16952:	75e9      	strb	r1, [r5, #23]
   16954:	74ea      	strb	r2, [r5, #19]
        digit[0] = (uint8_t)(native[i] >> 24);
   16956:	7428      	strb	r0, [r5, #16]
        digit[2] = (uint8_t)(native[i] >> 8);
   16958:	0a09      	lsrs	r1, r1, #8
        digit[1] = (uint8_t)(native[i] >> 16);
   1695a:	0c10      	lsrs	r0, r2, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   1695c:	0a12      	lsrs	r2, r2, #8
        digit[3] = (uint8_t)(native[i]);
   1695e:	73eb      	strb	r3, [r5, #15]
        digit[2] = (uint8_t)(native[i] >> 8);
   16960:	75a9      	strb	r1, [r5, #22]
   16962:	74aa      	strb	r2, [r5, #18]
        digit[0] = (uint8_t)(native[i] >> 24);
   16964:	0e19      	lsrs	r1, r3, #24
        digit[1] = (uint8_t)(native[i] >> 16);
   16966:	0c1a      	lsrs	r2, r3, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   16968:	0a1b      	lsrs	r3, r3, #8
        digit[1] = (uint8_t)(native[i] >> 16);
   1696a:	776e      	strb	r6, [r5, #29]
   1696c:	7468      	strb	r0, [r5, #17]
        digit[0] = (uint8_t)(native[i] >> 24);
   1696e:	7329      	strb	r1, [r5, #12]
        digit[1] = (uint8_t)(native[i] >> 16);
   16970:	736a      	strb	r2, [r5, #13]
   16972:	766c      	strb	r4, [r5, #25]
        digit[2] = (uint8_t)(native[i] >> 8);
   16974:	73ab      	strb	r3, [r5, #14]
        digit[0] = (uint8_t)(native[i] >> 24);
   16976:	e9dd 340d 	ldrd	r3, r4, [sp, #52]	; 0x34
   1697a:	0e1a      	lsrs	r2, r3, #24
   1697c:	722a      	strb	r2, [r5, #8]
        digit[1] = (uint8_t)(native[i] >> 16);
   1697e:	0c1a      	lsrs	r2, r3, #16
        digit[0] = (uint8_t)(native[i] >> 24);
   16980:	980f      	ldr	r0, [sp, #60]	; 0x3c
        digit[1] = (uint8_t)(native[i] >> 16);
   16982:	726a      	strb	r2, [r5, #9]
        digit[2] = (uint8_t)(native[i] >> 8);
   16984:	0a1a      	lsrs	r2, r3, #8
   16986:	72aa      	strb	r2, [r5, #10]
        digit[3] = (uint8_t)(native[i]);
   16988:	71ec      	strb	r4, [r5, #7]
        digit[0] = (uint8_t)(native[i] >> 24);
   1698a:	0e22      	lsrs	r2, r4, #24
        digit[1] = (uint8_t)(native[i] >> 16);
   1698c:	0c27      	lsrs	r7, r4, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   1698e:	0a24      	lsrs	r4, r4, #8
        digit[0] = (uint8_t)(native[i] >> 24);
   16990:	9910      	ldr	r1, [sp, #64]	; 0x40
        digit[2] = (uint8_t)(native[i] >> 8);
   16992:	71ac      	strb	r4, [r5, #6]
        digit[0] = (uint8_t)(native[i] >> 24);
   16994:	0e04      	lsrs	r4, r0, #24
        digit[3] = (uint8_t)(native[i]);
   16996:	70e8      	strb	r0, [r5, #3]
        digit[0] = (uint8_t)(native[i] >> 24);
   16998:	702c      	strb	r4, [r5, #0]
        digit[1] = (uint8_t)(native[i] >> 16);
   1699a:	0c04      	lsrs	r4, r0, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   1699c:	0a00      	lsrs	r0, r0, #8
        digit[0] = (uint8_t)(native[i] >> 24);
   1699e:	712a      	strb	r2, [r5, #4]
        digit[2] = (uint8_t)(native[i] >> 8);
   169a0:	70a8      	strb	r0, [r5, #2]
        digit[0] = (uint8_t)(native[i] >> 24);
   169a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
        digit[3] = (uint8_t)(native[i]);
   169a4:	f885 103f 	strb.w	r1, [r5, #63]	; 0x3f
        digit[0] = (uint8_t)(native[i] >> 24);
   169a8:	0e08      	lsrs	r0, r1, #24
   169aa:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
        digit[1] = (uint8_t)(native[i] >> 16);
   169ae:	0c08      	lsrs	r0, r1, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   169b0:	0a09      	lsrs	r1, r1, #8
        digit[3] = (uint8_t)(native[i]);
   169b2:	72eb      	strb	r3, [r5, #11]
        digit[2] = (uint8_t)(native[i] >> 8);
   169b4:	f885 103e 	strb.w	r1, [r5, #62]	; 0x3e
        digit[0] = (uint8_t)(native[i] >> 24);
   169b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   169ba:	9e13      	ldr	r6, [sp, #76]	; 0x4c
        digit[3] = (uint8_t)(native[i]);
   169bc:	f885 203b 	strb.w	r2, [r5, #59]	; 0x3b
        digit[0] = (uint8_t)(native[i] >> 24);
   169c0:	0e11      	lsrs	r1, r2, #24
   169c2:	f885 1038 	strb.w	r1, [r5, #56]	; 0x38
        digit[1] = (uint8_t)(native[i] >> 16);
   169c6:	0c11      	lsrs	r1, r2, #16
   169c8:	f885 1039 	strb.w	r1, [r5, #57]	; 0x39
        digit[0] = (uint8_t)(native[i] >> 24);
   169cc:	0e19      	lsrs	r1, r3, #24
        digit[3] = (uint8_t)(native[i]);
   169ce:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
        digit[0] = (uint8_t)(native[i] >> 24);
   169d2:	f885 1034 	strb.w	r1, [r5, #52]	; 0x34
        digit[2] = (uint8_t)(native[i] >> 8);
   169d6:	0a12      	lsrs	r2, r2, #8
        digit[1] = (uint8_t)(native[i] >> 16);
   169d8:	0c19      	lsrs	r1, r3, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   169da:	0a1b      	lsrs	r3, r3, #8
   169dc:	f885 203a 	strb.w	r2, [r5, #58]	; 0x3a
   169e0:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
        digit[0] = (uint8_t)(native[i] >> 24);
   169e4:	0e32      	lsrs	r2, r6, #24
        digit[1] = (uint8_t)(native[i] >> 16);
   169e6:	0c33      	lsrs	r3, r6, #16
   169e8:	706c      	strb	r4, [r5, #1]
   169ea:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
   169ee:	f885 1035 	strb.w	r1, [r5, #53]	; 0x35
        digit[0] = (uint8_t)(native[i] >> 24);
   169f2:	f885 2030 	strb.w	r2, [r5, #48]	; 0x30
        digit[1] = (uint8_t)(native[i] >> 16);
   169f6:	716f      	strb	r7, [r5, #5]
   169f8:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
        digit[0] = (uint8_t)(native[i] >> 24);
   169fc:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
        digit[2] = (uint8_t)(native[i] >> 8);
   16a00:	0a33      	lsrs	r3, r6, #8
        digit[1] = (uint8_t)(native[i] >> 16);
   16a02:	0c04      	lsrs	r4, r0, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   16a04:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
        digit[3] = (uint8_t)(native[i]);
   16a08:	f885 002f 	strb.w	r0, [r5, #47]	; 0x2f
        digit[0] = (uint8_t)(native[i] >> 24);
   16a0c:	0e03      	lsrs	r3, r0, #24
        digit[2] = (uint8_t)(native[i] >> 8);
   16a0e:	0a00      	lsrs	r0, r0, #8
        digit[0] = (uint8_t)(native[i] >> 24);
   16a10:	9a16      	ldr	r2, [sp, #88]	; 0x58
        digit[2] = (uint8_t)(native[i] >> 8);
   16a12:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
        digit[0] = (uint8_t)(native[i] >> 24);
   16a16:	0e08      	lsrs	r0, r1, #24
   16a18:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
        digit[1] = (uint8_t)(native[i] >> 16);
   16a1c:	0c08      	lsrs	r0, r1, #16
        digit[0] = (uint8_t)(native[i] >> 24);
   16a1e:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
        digit[1] = (uint8_t)(native[i] >> 16);
   16a22:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
        digit[0] = (uint8_t)(native[i] >> 24);
   16a26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
        digit[3] = (uint8_t)(native[i]);
   16a28:	f885 102b 	strb.w	r1, [r5, #43]	; 0x2b
        digit[0] = (uint8_t)(native[i] >> 24);
   16a2c:	0e10      	lsrs	r0, r2, #24
        digit[3] = (uint8_t)(native[i]);
   16a2e:	f885 2027 	strb.w	r2, [r5, #39]	; 0x27
        digit[2] = (uint8_t)(native[i] >> 8);
   16a32:	0a09      	lsrs	r1, r1, #8
        digit[0] = (uint8_t)(native[i] >> 24);
   16a34:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
        digit[1] = (uint8_t)(native[i] >> 16);
   16a38:	0c10      	lsrs	r0, r2, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   16a3a:	0a12      	lsrs	r2, r2, #8
        digit[3] = (uint8_t)(native[i]);
   16a3c:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
        digit[2] = (uint8_t)(native[i] >> 8);
   16a40:	f885 102a 	strb.w	r1, [r5, #42]	; 0x2a
        digit[1] = (uint8_t)(native[i] >> 16);
   16a44:	f885 0025 	strb.w	r0, [r5, #37]	; 0x25
        digit[0] = (uint8_t)(native[i] >> 24);
   16a48:	0e19      	lsrs	r1, r3, #24
        digit[2] = (uint8_t)(native[i] >> 8);
   16a4a:	f885 2026 	strb.w	r2, [r5, #38]	; 0x26
            vli_nativeToBytes(private_key, private);
            vli_nativeToBytes(public_key, public.x);
            vli_nativeToBytes(public_key + uECC_BYTES, public.y);
            return 1;
   16a4e:	2001      	movs	r0, #1
        digit[1] = (uint8_t)(native[i] >> 16);
   16a50:	0c1a      	lsrs	r2, r3, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   16a52:	0a1b      	lsrs	r3, r3, #8
        digit[3] = (uint8_t)(native[i]);
   16a54:	f885 6033 	strb.w	r6, [r5, #51]	; 0x33
        digit[1] = (uint8_t)(native[i] >> 16);
   16a58:	f885 402d 	strb.w	r4, [r5, #45]	; 0x2d
        digit[0] = (uint8_t)(native[i] >> 24);
   16a5c:	f885 1020 	strb.w	r1, [r5, #32]
        digit[1] = (uint8_t)(native[i] >> 16);
   16a60:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
        digit[2] = (uint8_t)(native[i] >> 8);
   16a64:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
        }
    }
    return 0;
}
   16a68:	b019      	add	sp, #100	; 0x64
   16a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 0;
   16a6c:	4620      	mov	r0, r4
}
   16a6e:	b019      	add	sp, #100	; 0x64
   16a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16a72:	bf00      	nop
   16a74:	10002b90 	.word	0x10002b90

00016a78 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t public_key[uECC_BYTES*2],
                       const uint8_t private_key[uECC_BYTES],
                       uint8_t secret[uECC_BYTES]) {
   16a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16a7c:	b0bc      	sub	sp, #240	; 0xf0
    uECC_word_t random[uECC_WORDS];
    uECC_word_t *initial_Z = 0;
    uECC_word_t tries;
#if (uECC_CURVE != uECC_secp160r1)
    uECC_word_t tmp[uECC_WORDS];
    uECC_word_t *p2[2] = {private, tmp};
   16a7e:	f10d 0810 	add.w	r8, sp, #16
   16a82:	f10d 0950 	add.w	r9, sp, #80	; 0x50
   16a86:	e9cd 8902 	strd	r8, r9, [sp, #8]
#endif

    // Try to get a random initial Z value to improve protection against side-channel
    // attacks. If the RNG fails every time (eg it was not defined), we continue so that
    // uECC_shared_secret() can still work without an RNG defined.
    for (tries = 0; tries < MAX_TRIES; ++tries) {
   16a8a:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 16c74 <uECC_shared_secret+0x1fc>
                       uint8_t secret[uECC_BYTES]) {
   16a8e:	4606      	mov	r6, r0
   16a90:	460f      	mov	r7, r1
   16a92:	4615      	mov	r5, r2
    uECC_word_t *p2[2] = {private, tmp};
   16a94:	2440      	movs	r4, #64	; 0x40
   16a96:	e001      	b.n	16a9c <uECC_shared_secret+0x24>
    for (tries = 0; tries < MAX_TRIES; ++tries) {
   16a98:	3c01      	subs	r4, #1
   16a9a:	d018      	beq.n	16ace <uECC_shared_secret+0x56>
        if (g_rng_function((uint8_t *)random, sizeof(random)) && !vli_isZero(random)) {
   16a9c:	f8da 3000 	ldr.w	r3, [sl]
   16aa0:	2120      	movs	r1, #32
   16aa2:	a80c      	add	r0, sp, #48	; 0x30
   16aa4:	4798      	blx	r3
   16aa6:	2800      	cmp	r0, #0
   16aa8:	d0f6      	beq.n	16a98 <uECC_shared_secret+0x20>
        if (vli[i]) {
   16aaa:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
   16aae:	980c      	ldr	r0, [sp, #48]	; 0x30
   16ab0:	990f      	ldr	r1, [sp, #60]	; 0x3c
   16ab2:	4303      	orrs	r3, r0
   16ab4:	431a      	orrs	r2, r3
   16ab6:	9810      	ldr	r0, [sp, #64]	; 0x40
   16ab8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   16aba:	4311      	orrs	r1, r2
   16abc:	4308      	orrs	r0, r1
   16abe:	4318      	orrs	r0, r3
   16ac0:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   16ac4:	4310      	orrs	r0, r2
   16ac6:	4303      	orrs	r3, r0
   16ac8:	d0e6      	beq.n	16a98 <uECC_shared_secret+0x20>
            initial_Z = random;
   16aca:	ab0c      	add	r3, sp, #48	; 0x30
   16acc:	e000      	b.n	16ad0 <uECC_shared_secret+0x58>
    uECC_word_t *initial_Z = 0;
   16ace:	4623      	mov	r3, r4
        native[i] = ((uint32_t)digit[0] << 24) | ((uint32_t)digit[1] << 16) |
   16ad0:	69fa      	ldr	r2, [r7, #28]
   16ad2:	6879      	ldr	r1, [r7, #4]
   16ad4:	9301      	str	r3, [sp, #4]
   16ad6:	ba12      	rev	r2, r2
   16ad8:	9204      	str	r2, [sp, #16]
   16ada:	69ba      	ldr	r2, [r7, #24]
   16adc:	ba12      	rev	r2, r2
   16ade:	9205      	str	r2, [sp, #20]
   16ae0:	697a      	ldr	r2, [r7, #20]
   16ae2:	ba12      	rev	r2, r2
   16ae4:	9206      	str	r2, [sp, #24]
   16ae6:	693a      	ldr	r2, [r7, #16]
   16ae8:	ba12      	rev	r2, r2
   16aea:	9207      	str	r2, [sp, #28]
   16aec:	68fa      	ldr	r2, [r7, #12]
   16aee:	ba12      	rev	r2, r2
   16af0:	9208      	str	r2, [sp, #32]
   16af2:	68ba      	ldr	r2, [r7, #8]
   16af4:	ba12      	rev	r2, r2
   16af6:	9209      	str	r2, [sp, #36]	; 0x24
   16af8:	683a      	ldr	r2, [r7, #0]
   16afa:	ba12      	rev	r2, r2
   16afc:	920b      	str	r2, [sp, #44]	; 0x2c
   16afe:	69f2      	ldr	r2, [r6, #28]
   16b00:	ba12      	rev	r2, r2
   16b02:	921c      	str	r2, [sp, #112]	; 0x70
   16b04:	69b2      	ldr	r2, [r6, #24]
   16b06:	ba12      	rev	r2, r2
   16b08:	921d      	str	r2, [sp, #116]	; 0x74
   16b0a:	6972      	ldr	r2, [r6, #20]
   16b0c:	ba12      	rev	r2, r2
   16b0e:	921e      	str	r2, [sp, #120]	; 0x78
   16b10:	6932      	ldr	r2, [r6, #16]
   16b12:	ba12      	rev	r2, r2
   16b14:	921f      	str	r2, [sp, #124]	; 0x7c
   16b16:	68f2      	ldr	r2, [r6, #12]
   16b18:	ba12      	rev	r2, r2
   16b1a:	9220      	str	r2, [sp, #128]	; 0x80
   16b1c:	68b2      	ldr	r2, [r6, #8]
   16b1e:	ba12      	rev	r2, r2
   16b20:	9221      	str	r2, [sp, #132]	; 0x84
   16b22:	6872      	ldr	r2, [r6, #4]
   16b24:	ba12      	rev	r2, r2
   16b26:	9222      	str	r2, [sp, #136]	; 0x88
   16b28:	6832      	ldr	r2, [r6, #0]
   16b2a:	ba09      	rev	r1, r1
   16b2c:	ba12      	rev	r2, r2
   16b2e:	910a      	str	r1, [sp, #40]	; 0x28
   16b30:	9223      	str	r2, [sp, #140]	; 0x8c
   16b32:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
   16b34:	6a71      	ldr	r1, [r6, #36]	; 0x24
   16b36:	ba12      	rev	r2, r2
   16b38:	9224      	str	r2, [sp, #144]	; 0x90
   16b3a:	6bb2      	ldr	r2, [r6, #56]	; 0x38
   16b3c:	ba12      	rev	r2, r2
   16b3e:	9225      	str	r2, [sp, #148]	; 0x94
   16b40:	6b72      	ldr	r2, [r6, #52]	; 0x34
   16b42:	ba12      	rev	r2, r2
   16b44:	9226      	str	r2, [sp, #152]	; 0x98
   16b46:	6b32      	ldr	r2, [r6, #48]	; 0x30
   16b48:	ba12      	rev	r2, r2
   16b4a:	9227      	str	r2, [sp, #156]	; 0x9c
   16b4c:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   16b4e:	ba12      	rev	r2, r2
   16b50:	9228      	str	r2, [sp, #160]	; 0xa0
   16b52:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   16b54:	ba12      	rev	r2, r2
   16b56:	9229      	str	r2, [sp, #164]	; 0xa4
   16b58:	6a32      	ldr	r2, [r6, #32]
   16b5a:	ba09      	rev	r1, r1
   16b5c:	ba12      	rev	r2, r2
   16b5e:	912a      	str	r1, [sp, #168]	; 0xa8
   16b60:	922b      	str	r2, [sp, #172]	; 0xac
    // Don't regularize the bitcount for secp160r1.
    EccPoint_mult(&product, &public, private, initial_Z, vli_numBits(private, uECC_WORDS));
#else
    // Regularize the bitcount for the private key so that attackers cannot use a side channel
    // attack to learn the number of leading zeros.
    carry = vli_add(private, private, curve_n);
   16b62:	4641      	mov	r1, r8
   16b64:	4a42      	ldr	r2, [pc, #264]	; (16c70 <uECC_shared_secret+0x1f8>)
   16b66:	4640      	mov	r0, r8
   16b68:	f7fd fffa 	bl	14b60 <vli_add>
    vli_add(tmp, private, curve_n);
   16b6c:	4a40      	ldr	r2, [pc, #256]	; (16c70 <uECC_shared_secret+0x1f8>)
    carry = vli_add(private, private, curve_n);
   16b6e:	4604      	mov	r4, r0
    vli_add(tmp, private, curve_n);
   16b70:	4641      	mov	r1, r8
   16b72:	4648      	mov	r0, r9
   16b74:	f7fd fff4 	bl	14b60 <vli_add>
    EccPoint_mult(&product, &public, p2[!carry], initial_Z, (uECC_BYTES * 8) + 1);
   16b78:	fab4 f284 	clz	r2, r4
   16b7c:	ab3c      	add	r3, sp, #240	; 0xf0
   16b7e:	0952      	lsrs	r2, r2, #5
   16b80:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   16b84:	a91c      	add	r1, sp, #112	; 0x70
   16b86:	9b01      	ldr	r3, [sp, #4]
   16b88:	f852 2ce8 	ldr.w	r2, [r2, #-232]
   16b8c:	a82c      	add	r0, sp, #176	; 0xb0
   16b8e:	f7ff fc51 	bl	16434 <EccPoint_mult.constprop.0>
        digit[0] = (uint8_t)(native[i] >> 24);
   16b92:	e9dd 322c 	ldrd	r3, r2, [sp, #176]	; 0xb0
   16b96:	0e18      	lsrs	r0, r3, #24
   16b98:	7728      	strb	r0, [r5, #28]
        digit[1] = (uint8_t)(native[i] >> 16);
   16b9a:	0c18      	lsrs	r0, r3, #16
   16b9c:	7768      	strb	r0, [r5, #29]
        digit[2] = (uint8_t)(native[i] >> 8);
   16b9e:	0a18      	lsrs	r0, r3, #8
   16ba0:	77a8      	strb	r0, [r5, #30]
        digit[0] = (uint8_t)(native[i] >> 24);
   16ba2:	0e10      	lsrs	r0, r2, #24
   16ba4:	992e      	ldr	r1, [sp, #184]	; 0xb8
   16ba6:	7628      	strb	r0, [r5, #24]
        digit[1] = (uint8_t)(native[i] >> 16);
   16ba8:	0c10      	lsrs	r0, r2, #16
   16baa:	7668      	strb	r0, [r5, #25]
        digit[2] = (uint8_t)(native[i] >> 8);
   16bac:	0a10      	lsrs	r0, r2, #8
   16bae:	76a8      	strb	r0, [r5, #26]
        digit[0] = (uint8_t)(native[i] >> 24);
   16bb0:	0e08      	lsrs	r0, r1, #24
   16bb2:	7528      	strb	r0, [r5, #20]
        digit[1] = (uint8_t)(native[i] >> 16);
   16bb4:	0c08      	lsrs	r0, r1, #16
   16bb6:	7568      	strb	r0, [r5, #21]
        digit[2] = (uint8_t)(native[i] >> 8);
   16bb8:	0a08      	lsrs	r0, r1, #8
   16bba:	75a8      	strb	r0, [r5, #22]
        digit[0] = (uint8_t)(native[i] >> 24);
   16bbc:	982f      	ldr	r0, [sp, #188]	; 0xbc
   16bbe:	9c30      	ldr	r4, [sp, #192]	; 0xc0
   16bc0:	9e31      	ldr	r6, [sp, #196]	; 0xc4
   16bc2:	f8dd c0c8 	ldr.w	ip, [sp, #200]	; 0xc8
        digit[3] = (uint8_t)(native[i]);
   16bc6:	77eb      	strb	r3, [r5, #31]
        digit[0] = (uint8_t)(native[i] >> 24);
   16bc8:	0e07      	lsrs	r7, r0, #24
   16bca:	742f      	strb	r7, [r5, #16]
        digit[1] = (uint8_t)(native[i] >> 16);
   16bcc:	0c07      	lsrs	r7, r0, #16
   16bce:	746f      	strb	r7, [r5, #17]
        digit[2] = (uint8_t)(native[i] >> 8);
   16bd0:	0a07      	lsrs	r7, r0, #8
   16bd2:	74af      	strb	r7, [r5, #18]
        digit[0] = (uint8_t)(native[i] >> 24);
   16bd4:	0e27      	lsrs	r7, r4, #24
   16bd6:	732f      	strb	r7, [r5, #12]
        digit[1] = (uint8_t)(native[i] >> 16);
   16bd8:	0c27      	lsrs	r7, r4, #16
   16bda:	736f      	strb	r7, [r5, #13]
        digit[2] = (uint8_t)(native[i] >> 8);
   16bdc:	0a27      	lsrs	r7, r4, #8
   16bde:	73af      	strb	r7, [r5, #14]
        digit[0] = (uint8_t)(native[i] >> 24);
   16be0:	0e37      	lsrs	r7, r6, #24
   16be2:	722f      	strb	r7, [r5, #8]
        digit[1] = (uint8_t)(native[i] >> 16);
   16be4:	0c37      	lsrs	r7, r6, #16
   16be6:	726f      	strb	r7, [r5, #9]
        digit[2] = (uint8_t)(native[i] >> 8);
   16be8:	0a37      	lsrs	r7, r6, #8
   16bea:	72af      	strb	r7, [r5, #10]
        digit[0] = (uint8_t)(native[i] >> 24);
   16bec:	ea4f 671c 	mov.w	r7, ip, lsr #24
   16bf0:	712f      	strb	r7, [r5, #4]
        digit[1] = (uint8_t)(native[i] >> 16);
   16bf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
        digit[3] = (uint8_t)(native[i]);
   16bf6:	76ea      	strb	r2, [r5, #27]
   16bf8:	75e9      	strb	r1, [r5, #23]
   16bfa:	74e8      	strb	r0, [r5, #19]
   16bfc:	73ec      	strb	r4, [r5, #15]
   16bfe:	72ee      	strb	r6, [r5, #11]
        digit[1] = (uint8_t)(native[i] >> 16);
   16c00:	716f      	strb	r7, [r5, #5]
        digit[0] = (uint8_t)(native[i] >> 24);
   16c02:	9f33      	ldr	r7, [sp, #204]	; 0xcc
        digit[3] = (uint8_t)(native[i]);
   16c04:	f885 c007 	strb.w	ip, [r5, #7]
        digit[2] = (uint8_t)(native[i] >> 8);
   16c08:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
   16c0c:	f885 e006 	strb.w	lr, [r5, #6]
        digit[0] = (uint8_t)(native[i] >> 24);
   16c10:	ea4f 6e17 	mov.w	lr, r7, lsr #24
   16c14:	f885 e000 	strb.w	lr, [r5]
        digit[1] = (uint8_t)(native[i] >> 16);
   16c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   16c1c:	f885 e001 	strb.w	lr, [r5, #1]
        digit[2] = (uint8_t)(native[i] >> 8);
   16c20:	ea4f 2e17 	mov.w	lr, r7, lsr #8
        digit[3] = (uint8_t)(native[i]);
   16c24:	70ef      	strb	r7, [r5, #3]
        digit[2] = (uint8_t)(native[i] >> 8);
   16c26:	f885 e002 	strb.w	lr, [r5, #2]
        if (vli[i]) {
   16c2a:	b9eb      	cbnz	r3, 16c68 <uECC_shared_secret+0x1f0>
   16c2c:	b9e2      	cbnz	r2, 16c68 <uECC_shared_secret+0x1f0>
   16c2e:	b9d9      	cbnz	r1, 16c68 <uECC_shared_secret+0x1f0>
   16c30:	b9d0      	cbnz	r0, 16c68 <uECC_shared_secret+0x1f0>
   16c32:	b9cc      	cbnz	r4, 16c68 <uECC_shared_secret+0x1f0>
   16c34:	b9c6      	cbnz	r6, 16c68 <uECC_shared_secret+0x1f0>
   16c36:	f1bc 0f00 	cmp.w	ip, #0
   16c3a:	d115      	bne.n	16c68 <uECC_shared_secret+0x1f0>
   16c3c:	b9a7      	cbnz	r7, 16c68 <uECC_shared_secret+0x1f0>
   16c3e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
   16c40:	b993      	cbnz	r3, 16c68 <uECC_shared_secret+0x1f0>
   16c42:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   16c44:	b983      	cbnz	r3, 16c68 <uECC_shared_secret+0x1f0>
   16c46:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   16c48:	b973      	cbnz	r3, 16c68 <uECC_shared_secret+0x1f0>
   16c4a:	9b37      	ldr	r3, [sp, #220]	; 0xdc
   16c4c:	b963      	cbnz	r3, 16c68 <uECC_shared_secret+0x1f0>
   16c4e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
   16c50:	b953      	cbnz	r3, 16c68 <uECC_shared_secret+0x1f0>
   16c52:	9b39      	ldr	r3, [sp, #228]	; 0xe4
   16c54:	b943      	cbnz	r3, 16c68 <uECC_shared_secret+0x1f0>
   16c56:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
   16c58:	b933      	cbnz	r3, 16c68 <uECC_shared_secret+0x1f0>
   16c5a:	983b      	ldr	r0, [sp, #236]	; 0xec
   16c5c:	3800      	subs	r0, #0
   16c5e:	bf18      	it	ne
   16c60:	2001      	movne	r0, #1
#endif

    vli_nativeToBytes(secret, product.x);
    return !EccPoint_isZero(&product);
}
   16c62:	b03c      	add	sp, #240	; 0xf0
   16c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16c68:	2001      	movs	r0, #1
   16c6a:	b03c      	add	sp, #240	; 0xf0
   16c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16c70:	00024770 	.word	0x00024770
   16c74:	10002b90 	.word	0x10002b90

00016c78 <uECC_valid_public_key>:

    vli_nativeToBytes(public_key, point.x);
    vli_nativeToBytes(public_key + uECC_BYTES, point.y);
}

int uECC_valid_public_key(const uint8_t public_key[uECC_BYTES*2]) {
   16c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c7c:	6887      	ldr	r7, [r0, #8]
   16c7e:	f8d0 8034 	ldr.w	r8, [r0, #52]	; 0x34
   16c82:	69c1      	ldr	r1, [r0, #28]
   16c84:	6984      	ldr	r4, [r0, #24]
   16c86:	6945      	ldr	r5, [r0, #20]
   16c88:	6903      	ldr	r3, [r0, #16]
   16c8a:	68c6      	ldr	r6, [r0, #12]
   16c8c:	6842      	ldr	r2, [r0, #4]
   16c8e:	f8d0 c000 	ldr.w	ip, [r0]
   16c92:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
   16c96:	f8d0 9038 	ldr.w	r9, [r0, #56]	; 0x38
   16c9a:	f8d0 a02c 	ldr.w	sl, [r0, #44]	; 0x2c
   16c9e:	f8d0 b028 	ldr.w	fp, [r0, #40]	; 0x28
   16ca2:	b0bd      	sub	sp, #244	; 0xf4
        native[i] = ((uint32_t)digit[0] << 24) | ((uint32_t)digit[1] << 16) |
   16ca4:	ba3f      	rev	r7, r7
   16ca6:	9701      	str	r7, [sp, #4]
   16ca8:	9721      	str	r7, [sp, #132]	; 0x84
   16caa:	fa98 f788 	rev.w	r7, r8
   16cae:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
   16cb2:	9702      	str	r7, [sp, #8]
   16cb4:	fa9a fa8a 	rev.w	sl, sl
   16cb8:	ba09      	rev	r1, r1
   16cba:	ba24      	rev	r4, r4
   16cbc:	ba2d      	rev	r5, r5
   16cbe:	ba1b      	rev	r3, r3
   16cc0:	ba36      	rev	r6, r6
   16cc2:	ba12      	rev	r2, r2
   16cc4:	fa9c fc8c 	rev.w	ip, ip
   16cc8:	fa9e fe8e 	rev.w	lr, lr
   16ccc:	fa99 f989 	rev.w	r9, r9
   16cd0:	fa98 f888 	rev.w	r8, r8
   16cd4:	fa9b fb8b 	rev.w	fp, fp
   16cd8:	e9cd 141c 	strd	r1, r4, [sp, #112]	; 0x70
   16cdc:	e9cd 531e 	strd	r5, r3, [sp, #120]	; 0x78
   16ce0:	9620      	str	r6, [sp, #128]	; 0x80
   16ce2:	9222      	str	r2, [sp, #136]	; 0x88
   16ce4:	f8cd c08c 	str.w	ip, [sp, #140]	; 0x8c
   16ce8:	f8cd e090 	str.w	lr, [sp, #144]	; 0x90
   16cec:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   16cf0:	9726      	str	r7, [sp, #152]	; 0x98
   16cf2:	f8cd 809c 	str.w	r8, [sp, #156]	; 0x9c
   16cf6:	f8cd a00c 	str.w	sl, [sp, #12]
   16cfa:	f8cd a0a0 	str.w	sl, [sp, #160]	; 0xa0
   16cfe:	f8cd b0a4 	str.w	fp, [sp, #164]	; 0xa4
   16d02:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
   16d06:	6a00      	ldr	r0, [r0, #32]
   16d08:	fa9a fa8a 	rev.w	sl, sl
   16d0c:	ba00      	rev	r0, r0
   16d0e:	e9cd a02a 	strd	sl, r0, [sp, #168]	; 0xa8
        if (vli[i]) {
   16d12:	bb19      	cbnz	r1, 16d5c <uECC_valid_public_key+0xe4>
   16d14:	bb14      	cbnz	r4, 16d5c <uECC_valid_public_key+0xe4>
   16d16:	bb0d      	cbnz	r5, 16d5c <uECC_valid_public_key+0xe4>
   16d18:	bb03      	cbnz	r3, 16d5c <uECC_valid_public_key+0xe4>
   16d1a:	b9fe      	cbnz	r6, 16d5c <uECC_valid_public_key+0xe4>
   16d1c:	9f01      	ldr	r7, [sp, #4]
   16d1e:	b9ef      	cbnz	r7, 16d5c <uECC_valid_public_key+0xe4>
   16d20:	2a00      	cmp	r2, #0
   16d22:	f040 80c6 	bne.w	16eb2 <uECC_valid_public_key+0x23a>
   16d26:	f1bc 0f00 	cmp.w	ip, #0
   16d2a:	d12d      	bne.n	16d88 <uECC_valid_public_key+0x110>
   16d2c:	f1be 0f00 	cmp.w	lr, #0
   16d30:	d12a      	bne.n	16d88 <uECC_valid_public_key+0x110>
   16d32:	f1b9 0f00 	cmp.w	r9, #0
   16d36:	d127      	bne.n	16d88 <uECC_valid_public_key+0x110>
   16d38:	9f02      	ldr	r7, [sp, #8]
   16d3a:	bb2f      	cbnz	r7, 16d88 <uECC_valid_public_key+0x110>
   16d3c:	f1b8 0f00 	cmp.w	r8, #0
   16d40:	d122      	bne.n	16d88 <uECC_valid_public_key+0x110>
   16d42:	9f03      	ldr	r7, [sp, #12]
   16d44:	bb07      	cbnz	r7, 16d88 <uECC_valid_public_key+0x110>
   16d46:	f1bb 0f00 	cmp.w	fp, #0
   16d4a:	d11d      	bne.n	16d88 <uECC_valid_public_key+0x110>
   16d4c:	f1ba 0f00 	cmp.w	sl, #0
   16d50:	d137      	bne.n	16dc2 <uECC_valid_public_key+0x14a>
   16d52:	2800      	cmp	r0, #0
   16d54:	d137      	bne.n	16dc6 <uECC_valid_public_key+0x14e>
    vli_modSquare_fast(tmp1, public.y); /* tmp1 = y^2 */
    curve_x_side(tmp2, public.x); /* tmp2 = x^3 + ax + b */

    /* Make sure that y^2 == x^3 + ax + b */
    return (vli_cmp(tmp1, tmp2) == 0);
}
   16d56:	b03d      	add	sp, #244	; 0xf4
   16d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (left[i] > right[i]) {
   16d5c:	f1bc 3fff 	cmp.w	ip, #4294967295
   16d60:	d112      	bne.n	16d88 <uECC_valid_public_key+0x110>
   16d62:	b18a      	cbz	r2, 16d88 <uECC_valid_public_key+0x110>
        } else if (left[i] < right[i]) {
   16d64:	2a01      	cmp	r2, #1
   16d66:	d828      	bhi.n	16dba <uECC_valid_public_key+0x142>
   16d68:	9a01      	ldr	r2, [sp, #4]
   16d6a:	bb32      	cbnz	r2, 16dba <uECC_valid_public_key+0x142>
   16d6c:	2e00      	cmp	r6, #0
   16d6e:	f040 80af 	bne.w	16ed0 <uECC_valid_public_key+0x258>
   16d72:	bb13      	cbnz	r3, 16dba <uECC_valid_public_key+0x142>
        if (left[i] > right[i]) {
   16d74:	3501      	adds	r5, #1
   16d76:	d107      	bne.n	16d88 <uECC_valid_public_key+0x110>
   16d78:	3401      	adds	r4, #1
   16d7a:	d105      	bne.n	16d88 <uECC_valid_public_key+0x110>
   16d7c:	3101      	adds	r1, #1
   16d7e:	d103      	bne.n	16d88 <uECC_valid_public_key+0x110>
   16d80:	4618      	mov	r0, r3
}
   16d82:	b03d      	add	sp, #244	; 0xf4
   16d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (left[i] > right[i]) {
   16d88:	3001      	adds	r0, #1
   16d8a:	d11c      	bne.n	16dc6 <uECC_valid_public_key+0x14e>
   16d8c:	f1ba 0f00 	cmp.w	sl, #0
   16d90:	d019      	beq.n	16dc6 <uECC_valid_public_key+0x14e>
        } else if (left[i] < right[i]) {
   16d92:	f1ba 0f01 	cmp.w	sl, #1
   16d96:	d110      	bne.n	16dba <uECC_valid_public_key+0x142>
   16d98:	f1bb 0f00 	cmp.w	fp, #0
   16d9c:	d10d      	bne.n	16dba <uECC_valid_public_key+0x142>
   16d9e:	9b03      	ldr	r3, [sp, #12]
   16da0:	b95b      	cbnz	r3, 16dba <uECC_valid_public_key+0x142>
   16da2:	f1b8 0f00 	cmp.w	r8, #0
   16da6:	d1eb      	bne.n	16d80 <uECC_valid_public_key+0x108>
        if (left[i] > right[i]) {
   16da8:	9b02      	ldr	r3, [sp, #8]
   16daa:	3301      	adds	r3, #1
   16dac:	d10b      	bne.n	16dc6 <uECC_valid_public_key+0x14e>
   16dae:	f1b9 3fff 	cmp.w	r9, #4294967295
   16db2:	d108      	bne.n	16dc6 <uECC_valid_public_key+0x14e>
   16db4:	f1be 3fff 	cmp.w	lr, #4294967295
   16db8:	d105      	bne.n	16dc6 <uECC_valid_public_key+0x14e>
        return 0;
   16dba:	2000      	movs	r0, #0
}
   16dbc:	b03d      	add	sp, #244	; 0xf4
   16dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (left[i] > right[i]) {
   16dc2:	3001      	adds	r0, #1
   16dc4:	d0e5      	beq.n	16d92 <uECC_valid_public_key+0x11a>
    vli_square(product, left);
   16dc6:	a82c      	add	r0, sp, #176	; 0xb0
   16dc8:	a924      	add	r1, sp, #144	; 0x90
   16dca:	f7fe fa2d 	bl	15228 <vli_square>
    vli_mmod_fast(result, product);
   16dce:	a92c      	add	r1, sp, #176	; 0xb0
   16dd0:	a804      	add	r0, sp, #16
   16dd2:	f7fe fbe5 	bl	155a0 <vli_mmod_fast>
    uECC_word_t _3[uECC_WORDS] = {3}; /* -a = 3 */
   16dd6:	2300      	movs	r3, #0
   16dd8:	2203      	movs	r2, #3
    vli_square(product, left);
   16dda:	a91c      	add	r1, sp, #112	; 0x70
   16ddc:	a82c      	add	r0, sp, #176	; 0xb0
    uECC_word_t _3[uECC_WORDS] = {3}; /* -a = 3 */
   16dde:	9214      	str	r2, [sp, #80]	; 0x50
   16de0:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
   16de4:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
   16de8:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   16dec:	931b      	str	r3, [sp, #108]	; 0x6c
    vli_square(product, left);
   16dee:	f7fe fa1b 	bl	15228 <vli_square>
    vli_mmod_fast(result, product);
   16df2:	a92c      	add	r1, sp, #176	; 0xb0
   16df4:	a80c      	add	r0, sp, #48	; 0x30
   16df6:	f7fe fbd3 	bl	155a0 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   16dfa:	a90c      	add	r1, sp, #48	; 0x30
   16dfc:	aa14      	add	r2, sp, #80	; 0x50
   16dfe:	4608      	mov	r0, r1
   16e00:	f7fd feee 	bl	14be0 <vli_sub>
    if (l_borrow) {
   16e04:	2800      	cmp	r0, #0
   16e06:	d15d      	bne.n	16ec4 <uECC_valid_public_key+0x24c>
    vli_mult(product, left, right);
   16e08:	aa1c      	add	r2, sp, #112	; 0x70
   16e0a:	a90c      	add	r1, sp, #48	; 0x30
   16e0c:	a82c      	add	r0, sp, #176	; 0xb0
   16e0e:	f7fd ff2f 	bl	14c70 <vli_mult>
    vli_mmod_fast(result, product);
   16e12:	a92c      	add	r1, sp, #176	; 0xb0
   16e14:	a80c      	add	r0, sp, #48	; 0x30
   16e16:	f7fe fbc3 	bl	155a0 <vli_mmod_fast>
    uECC_word_t carry = vli_add(result, left, right);
   16e1a:	a90c      	add	r1, sp, #48	; 0x30
   16e1c:	4a2d      	ldr	r2, [pc, #180]	; (16ed4 <uECC_valid_public_key+0x25c>)
   16e1e:	4608      	mov	r0, r1
   16e20:	f7fd fe9e 	bl	14b60 <vli_add>
    if (carry || vli_cmp(result, mod) >= 0) {
   16e24:	b9a8      	cbnz	r0, 16e52 <uECC_valid_public_key+0x1da>
        } else if (left[i] < right[i]) {
   16e26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   16e28:	1c5a      	adds	r2, r3, #1
   16e2a:	d118      	bne.n	16e5e <uECC_valid_public_key+0x1e6>
        if (left[i] > right[i]) {
   16e2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   16e2e:	2a01      	cmp	r2, #1
   16e30:	d80f      	bhi.n	16e52 <uECC_valid_public_key+0x1da>
        } else if (left[i] < right[i]) {
   16e32:	b1a2      	cbz	r2, 16e5e <uECC_valid_public_key+0x1e6>
        if (left[i] > right[i]) {
   16e34:	9a11      	ldr	r2, [sp, #68]	; 0x44
   16e36:	b962      	cbnz	r2, 16e52 <uECC_valid_public_key+0x1da>
   16e38:	9a10      	ldr	r2, [sp, #64]	; 0x40
   16e3a:	b952      	cbnz	r2, 16e52 <uECC_valid_public_key+0x1da>
   16e3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   16e3e:	b942      	cbnz	r2, 16e52 <uECC_valid_public_key+0x1da>
        } else if (left[i] < right[i]) {
   16e40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16e42:	3201      	adds	r2, #1
   16e44:	d10b      	bne.n	16e5e <uECC_valid_public_key+0x1e6>
   16e46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   16e48:	3201      	adds	r2, #1
   16e4a:	d108      	bne.n	16e5e <uECC_valid_public_key+0x1e6>
   16e4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16e4e:	3201      	adds	r2, #1
   16e50:	d105      	bne.n	16e5e <uECC_valid_public_key+0x1e6>
        vli_sub(result, result, mod);
   16e52:	a90c      	add	r1, sp, #48	; 0x30
   16e54:	4a20      	ldr	r2, [pc, #128]	; (16ed8 <uECC_valid_public_key+0x260>)
   16e56:	4608      	mov	r0, r1
   16e58:	f7fd fec2 	bl	14be0 <vli_sub>
   16e5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
        if (left[i] > right[i]) {
   16e5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   16e60:	429a      	cmp	r2, r3
   16e62:	d8aa      	bhi.n	16dba <uECC_valid_public_key+0x142>
        } else if (left[i] < right[i]) {
   16e64:	d3a9      	bcc.n	16dba <uECC_valid_public_key+0x142>
        if (left[i] > right[i]) {
   16e66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16e68:	9a12      	ldr	r2, [sp, #72]	; 0x48
   16e6a:	429a      	cmp	r2, r3
   16e6c:	d3a5      	bcc.n	16dba <uECC_valid_public_key+0x142>
        } else if (left[i] < right[i]) {
   16e6e:	d8a4      	bhi.n	16dba <uECC_valid_public_key+0x142>
        if (left[i] > right[i]) {
   16e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16e72:	9a11      	ldr	r2, [sp, #68]	; 0x44
   16e74:	429a      	cmp	r2, r3
   16e76:	d3a0      	bcc.n	16dba <uECC_valid_public_key+0x142>
        } else if (left[i] < right[i]) {
   16e78:	d89f      	bhi.n	16dba <uECC_valid_public_key+0x142>
        if (left[i] > right[i]) {
   16e7a:	9b08      	ldr	r3, [sp, #32]
   16e7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   16e7e:	429a      	cmp	r2, r3
   16e80:	d39b      	bcc.n	16dba <uECC_valid_public_key+0x142>
        } else if (left[i] < right[i]) {
   16e82:	d89a      	bhi.n	16dba <uECC_valid_public_key+0x142>
        if (left[i] > right[i]) {
   16e84:	9b07      	ldr	r3, [sp, #28]
   16e86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   16e88:	429a      	cmp	r2, r3
   16e8a:	d396      	bcc.n	16dba <uECC_valid_public_key+0x142>
        } else if (left[i] < right[i]) {
   16e8c:	d895      	bhi.n	16dba <uECC_valid_public_key+0x142>
        if (left[i] > right[i]) {
   16e8e:	9b06      	ldr	r3, [sp, #24]
   16e90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16e92:	429a      	cmp	r2, r3
   16e94:	d391      	bcc.n	16dba <uECC_valid_public_key+0x142>
        } else if (left[i] < right[i]) {
   16e96:	d890      	bhi.n	16dba <uECC_valid_public_key+0x142>
        if (left[i] > right[i]) {
   16e98:	9b05      	ldr	r3, [sp, #20]
   16e9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   16e9c:	429a      	cmp	r2, r3
   16e9e:	d38c      	bcc.n	16dba <uECC_valid_public_key+0x142>
        } else if (left[i] < right[i]) {
   16ea0:	d88b      	bhi.n	16dba <uECC_valid_public_key+0x142>
        if (left[i] > right[i]) {
   16ea2:	9a04      	ldr	r2, [sp, #16]
   16ea4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16ea6:	429a      	cmp	r2, r3
   16ea8:	d887      	bhi.n	16dba <uECC_valid_public_key+0x142>
        } else if (left[i] < right[i]) {
   16eaa:	bf2c      	ite	cs
   16eac:	2001      	movcs	r0, #1
   16eae:	2000      	movcc	r0, #0
   16eb0:	e751      	b.n	16d56 <uECC_valid_public_key+0xde>
        if (left[i] > right[i]) {
   16eb2:	f1bc 3fff 	cmp.w	ip, #4294967295
   16eb6:	f47f af67 	bne.w	16d88 <uECC_valid_public_key+0x110>
        } else if (left[i] < right[i]) {
   16eba:	2a01      	cmp	r2, #1
   16ebc:	f67f af64 	bls.w	16d88 <uECC_valid_public_key+0x110>
   16ec0:	4638      	mov	r0, r7
   16ec2:	e748      	b.n	16d56 <uECC_valid_public_key+0xde>
        vli_add(result, result, mod);
   16ec4:	a90c      	add	r1, sp, #48	; 0x30
   16ec6:	4a04      	ldr	r2, [pc, #16]	; (16ed8 <uECC_valid_public_key+0x260>)
   16ec8:	4608      	mov	r0, r1
   16eca:	f7fd fe49 	bl	14b60 <vli_add>
   16ece:	e79b      	b.n	16e08 <uECC_valid_public_key+0x190>
   16ed0:	4610      	mov	r0, r2
   16ed2:	e740      	b.n	16d56 <uECC_valid_public_key+0xde>
   16ed4:	00024750 	.word	0x00024750
   16ed8:	00024790 	.word	0x00024790

00016edc <HciDrvRadioBoot>:
// Boot the radio.
//
//*****************************************************************************
uint32_t
HciDrvRadioBoot(bool bColdBoot)
{
   16edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t ui32NumXtalRetries = 0;


    g_ui32NumBytes     = 0;
   16ee0:	4968      	ldr	r1, [pc, #416]	; (17084 <HciDrvRadioBoot+0x1a8>)
   16ee2:	4d69      	ldr	r5, [pc, #420]	; (17088 <HciDrvRadioBoot+0x1ac>)
    g_consumed_bytes   = 0;
   16ee4:	4a69      	ldr	r2, [pc, #420]	; (1708c <HciDrvRadioBoot+0x1b0>)
            //
            // If the radio is running, we can exit this loop.
            //
            break;
        }
        else if (ui32Status == AM_HAL_BLE_32K_CLOCK_UNSTABLE)
   16ee6:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 170c0 <HciDrvRadioBoot+0x1e4>
    g_ui32NumBytes     = 0;
   16eea:	2300      	movs	r3, #0
   16eec:	600b      	str	r3, [r1, #0]
{
   16eee:	b090      	sub	sp, #64	; 0x40
        ERROR_CHECK(am_hal_ble_initialize(0, &BLE));
   16ef0:	4629      	mov	r1, r5
{
   16ef2:	4607      	mov	r7, r0
        ERROR_CHECK(am_hal_ble_initialize(0, &BLE));
   16ef4:	2000      	movs	r0, #0
    g_consumed_bytes   = 0;
   16ef6:	6013      	str	r3, [r2, #0]
        ERROR_CHECK(am_hal_ble_initialize(0, &BLE));
   16ef8:	f00a fd68 	bl	219cc <am_hal_ble_initialize>
    while (ui32Status != AM_HAL_STATUS_SUCCESS)
   16efc:	260b      	movs	r6, #11
        ERROR_CHECK(am_hal_ble_initialize(0, &BLE));
   16efe:	4601      	mov	r1, r0
   16f00:	2800      	cmp	r0, #0
   16f02:	d13b      	bne.n	16f7c <HciDrvRadioBoot+0xa0>
        ERROR_CHECK(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_ACTIVE));
   16f04:	6828      	ldr	r0, [r5, #0]
   16f06:	f00a fe43 	bl	21b90 <am_hal_ble_power_control>
   16f0a:	4604      	mov	r4, r0
   16f0c:	2800      	cmp	r0, #0
   16f0e:	d174      	bne.n	16ffa <HciDrvRadioBoot+0x11e>
        am_hal_ble_config_t sBleConfig =
   16f10:	4c5f      	ldr	r4, [pc, #380]	; (17090 <HciDrvRadioBoot+0x1b4>)
   16f12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   16f14:	f10d 0c0c 	add.w	ip, sp, #12
   16f18:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   16f1c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   16f20:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        ERROR_CHECK(am_hal_ble_config(BLE, &sBleConfig));
   16f24:	6828      	ldr	r0, [r5, #0]
   16f26:	a903      	add	r1, sp, #12
   16f28:	f00a fda6 	bl	21a78 <am_hal_ble_config>
   16f2c:	4604      	mov	r4, r0
   16f2e:	2800      	cmp	r0, #0
   16f30:	d16d      	bne.n	1700e <HciDrvRadioBoot+0x132>
        if ( bColdBoot )
   16f32:	2f00      	cmp	r7, #0
   16f34:	d131      	bne.n	16f9a <HciDrvRadioBoot+0xbe>
        ui32Status = am_hal_ble_boot(BLE);
   16f36:	6828      	ldr	r0, [r5, #0]
   16f38:	f00b fc98 	bl	2286c <am_hal_ble_boot>
        if (ui32Status == AM_HAL_STATUS_SUCCESS)
   16f3c:	4604      	mov	r4, r0
   16f3e:	2800      	cmp	r0, #0
   16f40:	d030      	beq.n	16fa4 <HciDrvRadioBoot+0xc8>
        else if (ui32Status == AM_HAL_BLE_32K_CLOCK_UNSTABLE)
   16f42:	4544      	cmp	r4, r8
        {
            //
            // If the radio is running, but the clock looks bad, we can try to
            // restart.
            //
            ERROR_CHECK(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
   16f44:	6828      	ldr	r0, [r5, #0]
   16f46:	f04f 0101 	mov.w	r1, #1
        else if (ui32Status == AM_HAL_BLE_32K_CLOCK_UNSTABLE)
   16f4a:	d168      	bne.n	1701e <HciDrvRadioBoot+0x142>
            ERROR_CHECK(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
   16f4c:	f00a fe20 	bl	21b90 <am_hal_ble_power_control>
   16f50:	4604      	mov	r4, r0
   16f52:	2800      	cmp	r0, #0
   16f54:	d176      	bne.n	17044 <HciDrvRadioBoot+0x168>
            ERROR_CHECK(am_hal_ble_deinitialize(BLE));
   16f56:	6828      	ldr	r0, [r5, #0]
   16f58:	f00a fd6e 	bl	21a38 <am_hal_ble_deinitialize>
   16f5c:	4604      	mov	r4, r0
   16f5e:	2800      	cmp	r0, #0
   16f60:	d178      	bne.n	17054 <HciDrvRadioBoot+0x178>

            //
            // We won't restart forever. After we hit the maximum number of
            // retries, we'll just return with failure.
            //
            if (ui32NumXtalRetries++ < HCI_DRV_MAX_XTAL_RETRIES)
   16f62:	3e01      	subs	r6, #1
   16f64:	d014      	beq.n	16f90 <HciDrvRadioBoot+0xb4>
            {
                am_util_delay_ms(1000);
   16f66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   16f6a:	f005 feeb 	bl	1cd44 <am_util_delay_ms>
        ERROR_CHECK(am_hal_ble_initialize(0, &BLE));
   16f6e:	4629      	mov	r1, r5
   16f70:	2000      	movs	r0, #0
   16f72:	f00a fd2b 	bl	219cc <am_hal_ble_initialize>
   16f76:	4601      	mov	r1, r0
   16f78:	2800      	cmp	r0, #0
   16f7a:	d0c3      	beq.n	16f04 <HciDrvRadioBoot+0x28>
   16f7c:	4845      	ldr	r0, [pc, #276]	; (17094 <HciDrvRadioBoot+0x1b8>)
   16f7e:	9101      	str	r1, [sp, #4]
   16f80:	f006 fcdc 	bl	1d93c <am_util_stdio_printf>
        if (g_hciDrvErrorHandler)
   16f84:	4b44      	ldr	r3, [pc, #272]	; (17098 <HciDrvRadioBoot+0x1bc>)
   16f86:	681b      	ldr	r3, [r3, #0]
   16f88:	b113      	cbz	r3, 16f90 <HciDrvRadioBoot+0xb4>
            g_hciDrvErrorHandler(g_ui32FailingStatus);
   16f8a:	9901      	ldr	r1, [sp, #4]
   16f8c:	4608      	mov	r0, r1
   16f8e:	4798      	blx	r3
        ERROR_CHECK(am_hal_ble_initialize(0, &BLE));
   16f90:	2401      	movs	r4, #1
        g_BLEMacAddress[4] = (sDevice.ui32ChipID0 >> 8) & 0xFF;
        g_BLEMacAddress[5] = (sDevice.ui32ChipID0 >> 16) & 0xFF;
    }

    return AM_HAL_STATUS_SUCCESS;
}
   16f92:	4620      	mov	r0, r4
   16f94:	b010      	add	sp, #64	; 0x40
   16f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            am_util_delay_ms(1000);
   16f9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   16f9e:	f005 fed1 	bl	1cd44 <am_util_delay_ms>
   16fa2:	e7c8      	b.n	16f36 <HciDrvRadioBoot+0x5a>
    am_hal_ble_tx_power_set(BLE, 0x8);
   16fa4:	6828      	ldr	r0, [r5, #0]
   16fa6:	2108      	movs	r1, #8
   16fa8:	f00b fce0 	bl	2296c <am_hal_ble_tx_power_set>
    am_hal_ble_int_clear(BLE, (AM_HAL_BLE_INT_CMDCMP |
   16fac:	6828      	ldr	r0, [r5, #0]
   16fae:	f240 2181 	movw	r1, #641	; 0x281
   16fb2:	f00b f9e5 	bl	22380 <am_hal_ble_int_clear>
    am_hal_ble_int_enable(BLE, (AM_HAL_BLE_INT_CMDCMP |
   16fb6:	6828      	ldr	r0, [r5, #0]
   16fb8:	f240 2181 	movw	r1, #641	; 0x281
   16fbc:	f00b f9b2 	bl	22324 <am_hal_ble_int_enable>
   16fc0:	4b36      	ldr	r3, [pc, #216]	; (1709c <HciDrvRadioBoot+0x1c0>)
   16fc2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   16fc6:	601a      	str	r2, [r3, #0]
    am_hal_queue_from_array(&g_sWriteQueue, g_psWriteBuffers);
   16fc8:	f44f 6302 	mov.w	r3, #2080	; 0x820
   16fcc:	4934      	ldr	r1, [pc, #208]	; (170a0 <HciDrvRadioBoot+0x1c4>)
   16fce:	4835      	ldr	r0, [pc, #212]	; (170a4 <HciDrvRadioBoot+0x1c8>)
   16fd0:	f44f 7282 	mov.w	r2, #260	; 0x104
   16fd4:	f00c fba0 	bl	23718 <am_hal_queue_init>
    g_ui32InterruptsSeen = 0;
   16fd8:	4b33      	ldr	r3, [pc, #204]	; (170a8 <HciDrvRadioBoot+0x1cc>)
   16fda:	601c      	str	r4, [r3, #0]
    if (bColdBoot)
   16fdc:	2f00      	cmp	r7, #0
   16fde:	d0d8      	beq.n	16f92 <HciDrvRadioBoot+0xb6>
        am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_DEVICEID, &sDevice);
   16fe0:	a903      	add	r1, sp, #12
   16fe2:	2001      	movs	r0, #1
   16fe4:	f00c f9c8 	bl	23378 <am_hal_mcuctrl_info_get>
        g_BLEMacAddress[4] = (sDevice.ui32ChipID0 >> 8) & 0xFF;
   16fe8:	9b04      	ldr	r3, [sp, #16]
        memcpy(g_BLEMacAddress, &sDevice.ui32ChipID1, sizeof(sDevice.ui32ChipID1));
   16fea:	4a30      	ldr	r2, [pc, #192]	; (170ac <HciDrvRadioBoot+0x1d0>)
   16fec:	9805      	ldr	r0, [sp, #20]
   16fee:	6010      	str	r0, [r2, #0]
        g_BLEMacAddress[4] = (sDevice.ui32ChipID0 >> 8) & 0xFF;
   16ff0:	0a19      	lsrs	r1, r3, #8
        g_BLEMacAddress[5] = (sDevice.ui32ChipID0 >> 16) & 0xFF;
   16ff2:	0c1b      	lsrs	r3, r3, #16
        g_BLEMacAddress[4] = (sDevice.ui32ChipID0 >> 8) & 0xFF;
   16ff4:	7111      	strb	r1, [r2, #4]
        g_BLEMacAddress[5] = (sDevice.ui32ChipID0 >> 16) & 0xFF;
   16ff6:	7153      	strb	r3, [r2, #5]
   16ff8:	e7cb      	b.n	16f92 <HciDrvRadioBoot+0xb6>
        ERROR_CHECK(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_ACTIVE));
   16ffa:	482d      	ldr	r0, [pc, #180]	; (170b0 <HciDrvRadioBoot+0x1d4>)
   16ffc:	f006 fc9e 	bl	1d93c <am_util_stdio_printf>
        if (g_hciDrvErrorHandler)
   17000:	4b25      	ldr	r3, [pc, #148]	; (17098 <HciDrvRadioBoot+0x1bc>)
   17002:	681b      	ldr	r3, [r3, #0]
   17004:	2b00      	cmp	r3, #0
   17006:	d0c3      	beq.n	16f90 <HciDrvRadioBoot+0xb4>
            g_hciDrvErrorHandler(g_ui32FailingStatus);
   17008:	4620      	mov	r0, r4
   1700a:	4798      	blx	r3
   1700c:	e7c0      	b.n	16f90 <HciDrvRadioBoot+0xb4>
        ERROR_CHECK(am_hal_ble_config(BLE, &sBleConfig));
   1700e:	4829      	ldr	r0, [pc, #164]	; (170b4 <HciDrvRadioBoot+0x1d8>)
   17010:	f006 fc94 	bl	1d93c <am_util_stdio_printf>
        if (g_hciDrvErrorHandler)
   17014:	4b20      	ldr	r3, [pc, #128]	; (17098 <HciDrvRadioBoot+0x1bc>)
   17016:	681b      	ldr	r3, [r3, #0]
   17018:	2b00      	cmp	r3, #0
   1701a:	d1f5      	bne.n	17008 <HciDrvRadioBoot+0x12c>
   1701c:	e7b8      	b.n	16f90 <HciDrvRadioBoot+0xb4>
            ERROR_CHECK(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
   1701e:	f00a fdb7 	bl	21b90 <am_hal_ble_power_control>
   17022:	4606      	mov	r6, r0
   17024:	bb18      	cbnz	r0, 1706e <HciDrvRadioBoot+0x192>
            ERROR_CHECK(am_hal_ble_deinitialize(BLE));
   17026:	6828      	ldr	r0, [r5, #0]
   17028:	f00a fd06 	bl	21a38 <am_hal_ble_deinitialize>
   1702c:	4605      	mov	r5, r0
   1702e:	b1c8      	cbz	r0, 17064 <HciDrvRadioBoot+0x188>
   17030:	4821      	ldr	r0, [pc, #132]	; (170b8 <HciDrvRadioBoot+0x1dc>)
   17032:	f006 fc83 	bl	1d93c <am_util_stdio_printf>
        if (g_hciDrvErrorHandler)
   17036:	4b18      	ldr	r3, [pc, #96]	; (17098 <HciDrvRadioBoot+0x1bc>)
   17038:	681b      	ldr	r3, [r3, #0]
   1703a:	2b00      	cmp	r3, #0
   1703c:	d0a8      	beq.n	16f90 <HciDrvRadioBoot+0xb4>
            g_hciDrvErrorHandler(g_ui32FailingStatus);
   1703e:	4628      	mov	r0, r5
   17040:	4798      	blx	r3
   17042:	e7a5      	b.n	16f90 <HciDrvRadioBoot+0xb4>
            ERROR_CHECK(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
   17044:	481d      	ldr	r0, [pc, #116]	; (170bc <HciDrvRadioBoot+0x1e0>)
   17046:	f006 fc79 	bl	1d93c <am_util_stdio_printf>
        if (g_hciDrvErrorHandler)
   1704a:	4b13      	ldr	r3, [pc, #76]	; (17098 <HciDrvRadioBoot+0x1bc>)
   1704c:	681b      	ldr	r3, [r3, #0]
   1704e:	2b00      	cmp	r3, #0
   17050:	d1da      	bne.n	17008 <HciDrvRadioBoot+0x12c>
   17052:	e79d      	b.n	16f90 <HciDrvRadioBoot+0xb4>
            ERROR_CHECK(am_hal_ble_deinitialize(BLE));
   17054:	4818      	ldr	r0, [pc, #96]	; (170b8 <HciDrvRadioBoot+0x1dc>)
   17056:	f006 fc71 	bl	1d93c <am_util_stdio_printf>
        if (g_hciDrvErrorHandler)
   1705a:	4b0f      	ldr	r3, [pc, #60]	; (17098 <HciDrvRadioBoot+0x1bc>)
   1705c:	681b      	ldr	r3, [r3, #0]
   1705e:	2b00      	cmp	r3, #0
   17060:	d1d2      	bne.n	17008 <HciDrvRadioBoot+0x12c>
   17062:	e795      	b.n	16f90 <HciDrvRadioBoot+0xb4>
   17064:	4b0c      	ldr	r3, [pc, #48]	; (17098 <HciDrvRadioBoot+0x1bc>)
   17066:	681b      	ldr	r3, [r3, #0]
   17068:	2b00      	cmp	r3, #0
   1706a:	d1cd      	bne.n	17008 <HciDrvRadioBoot+0x12c>
   1706c:	e790      	b.n	16f90 <HciDrvRadioBoot+0xb4>
            ERROR_CHECK(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
   1706e:	4813      	ldr	r0, [pc, #76]	; (170bc <HciDrvRadioBoot+0x1e0>)
   17070:	f006 fc64 	bl	1d93c <am_util_stdio_printf>
        if (g_hciDrvErrorHandler)
   17074:	4b08      	ldr	r3, [pc, #32]	; (17098 <HciDrvRadioBoot+0x1bc>)
   17076:	681b      	ldr	r3, [r3, #0]
   17078:	2b00      	cmp	r3, #0
   1707a:	d089      	beq.n	16f90 <HciDrvRadioBoot+0xb4>
            g_hciDrvErrorHandler(g_ui32FailingStatus);
   1707c:	4630      	mov	r0, r6
   1707e:	4798      	blx	r3
   17080:	e786      	b.n	16f90 <HciDrvRadioBoot+0xb4>
   17082:	bf00      	nop
   17084:	100059f0 	.word	0x100059f0
   17088:	10005080 	.word	0x10005080
   1708c:	100050ac 	.word	0x100050ac
   17090:	00023bac 	.word	0x00023bac
   17094:	000247b0 	.word	0x000247b0
   17098:	100050b0 	.word	0x100050b0
   1709c:	e000e100 	.word	0xe000e100
   170a0:	100050b4 	.word	0x100050b4
   170a4:	100059d4 	.word	0x100059d4
   170a8:	100059ec 	.word	0x100059ec
   170ac:	10005084 	.word	0x10005084
   170b0:	000247dc 	.word	0x000247dc
   170b4:	00024820 	.word	0x00024820
   170b8:	00024898 	.word	0x00024898
   170bc:	00024854 	.word	0x00024854
   170c0:	0800000b 	.word	0x0800000b

000170c4 <HciDrvRadioShutdown>:
// Shut down the BLE core.
//
//*****************************************************************************
void
HciDrvRadioShutdown(void)
{
   170c4:	b570      	push	{r4, r5, r6, lr}
    BLE_HEARTBEAT_STOP();
   170c6:	4814      	ldr	r0, [pc, #80]	; (17118 <HciDrvRadioShutdown+0x54>)
   170c8:	f7fc fe84 	bl	13dd4 <WsfTimerStop>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   170cc:	4b13      	ldr	r3, [pc, #76]	; (1711c <HciDrvRadioShutdown+0x58>)
   170ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   170d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   170d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   170da:	f3bf 8f6f 	isb	sy

    NVIC_DisableIRQ(BLE_IRQn);

    am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF);
   170de:	4e10      	ldr	r6, [pc, #64]	; (17120 <HciDrvRadioShutdown+0x5c>)

    // wait for 1s at max
    WHILE_TIMEOUT_MS_BREAK(PWRCTRL->DEVPWREN_b.PWRBLEL, 1000, 0);
   170e0:	4d10      	ldr	r5, [pc, #64]	; (17124 <HciDrvRadioShutdown+0x60>)
    am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF);
   170e2:	6830      	ldr	r0, [r6, #0]
   170e4:	2101      	movs	r1, #1
   170e6:	f00a fd53 	bl	21b90 <am_hal_ble_power_control>
    WHILE_TIMEOUT_MS_BREAK(PWRCTRL->DEVPWREN_b.PWRBLEL, 1000, 0);
   170ea:	68ab      	ldr	r3, [r5, #8]
   170ec:	049a      	lsls	r2, r3, #18
   170ee:	d509      	bpl.n	17104 <HciDrvRadioShutdown+0x40>
   170f0:	4c0d      	ldr	r4, [pc, #52]	; (17128 <HciDrvRadioShutdown+0x64>)
   170f2:	e001      	b.n	170f8 <HciDrvRadioShutdown+0x34>
   170f4:	3c01      	subs	r4, #1
   170f6:	d005      	beq.n	17104 <HciDrvRadioShutdown+0x40>
   170f8:	2010      	movs	r0, #16
   170fa:	f00b ff27 	bl	22f4c <am_hal_flash_delay>
   170fe:	68ab      	ldr	r3, [r5, #8]
   17100:	049b      	lsls	r3, r3, #18
   17102:	d4f7      	bmi.n	170f4 <HciDrvRadioShutdown+0x30>

    am_hal_ble_deinitialize(BLE);
   17104:	6830      	ldr	r0, [r6, #0]
   17106:	f00a fc97 	bl	21a38 <am_hal_ble_deinitialize>

    g_ui32NumBytes   = 0;
   1710a:	4908      	ldr	r1, [pc, #32]	; (1712c <HciDrvRadioShutdown+0x68>)
    g_consumed_bytes = 0;
   1710c:	4a08      	ldr	r2, [pc, #32]	; (17130 <HciDrvRadioShutdown+0x6c>)
    g_ui32NumBytes   = 0;
   1710e:	2300      	movs	r3, #0
   17110:	600b      	str	r3, [r1, #0]
    g_consumed_bytes = 0;
   17112:	6013      	str	r3, [r2, #0]
}
   17114:	bd70      	pop	{r4, r5, r6, pc}
   17116:	bf00      	nop
   17118:	1000508c 	.word	0x1000508c
   1711c:	e000e100 	.word	0xe000e100
   17120:	10005080 	.word	0x10005080
   17124:	40021000 	.word	0x40021000
   17128:	000f4240 	.word	0x000f4240
   1712c:	100059f0 	.word	0x100059f0
   17130:	100050ac 	.word	0x100050ac

00017134 <hciDrvWrite>:
// Internally, the Cordio BLE stack will allocate memory for an HCI message,
//
//*****************************************************************************
uint16_t
hciDrvWrite(uint8_t type, uint16_t len, uint8_t *pData)
{
   17134:	b538      	push	{r3, r4, r5, lr}


    //
    // Check to see if we still have buffer space.
    //
    if (am_hal_queue_full(&g_sWriteQueue))
   17136:	4d2c      	ldr	r5, [pc, #176]	; (171e8 <hciDrvWrite+0xb4>)
{
   17138:	460c      	mov	r4, r1
    if (am_hal_queue_full(&g_sWriteQueue))
   1713a:	68ab      	ldr	r3, [r5, #8]
   1713c:	68e9      	ldr	r1, [r5, #12]
   1713e:	428b      	cmp	r3, r1
   17140:	d04a      	beq.n	171d8 <hciDrvWrite+0xa4>
    {
        CRITICAL_PRINT("ERROR: Ran out of HCI transmit queue slots.\n");
        ERROR_RETURN(HCI_DRV_TRANSMIT_QUEUE_FULL, len);
    }

    if (len > (HCI_DRV_MAX_TX_PACKET-1))  // comparison compensates for the type byte at index 0.
   17142:	2cff      	cmp	r4, #255	; 0xff
   17144:	d837      	bhi.n	171b6 <hciDrvWrite+0x82>
    }

    //
    // Get a pointer to the next item in the queue.
    //
    psWriteBuffer = am_hal_queue_next_slot(&g_sWriteQueue);
   17146:	696b      	ldr	r3, [r5, #20]
   17148:	682d      	ldr	r5, [r5, #0]

    //
    // Set all of the fields in the hci write structure.
    //
    psWriteBuffer->ui32Length = len + 1;
   1714a:	1c61      	adds	r1, r4, #1
   1714c:	b289      	uxth	r1, r1
   1714e:	5159      	str	r1, [r3, r5]
    psWriteBuffer = am_hal_queue_next_slot(&g_sWriteQueue);
   17150:	442b      	add	r3, r5

    pui8Wptr = (uint8_t *) psWriteBuffer->pui32Data;

    *pui8Wptr++ = type;
   17152:	1d5d      	adds	r5, r3, #5
   17154:	7118      	strb	r0, [r3, #4]

    for (uint32_t i = 0; i < len; i++)
   17156:	b314      	cbz	r4, 1719e <hciDrvWrite+0x6a>
   17158:	1c51      	adds	r1, r2, #1
   1715a:	1a69      	subs	r1, r5, r1
   1715c:	2902      	cmp	r1, #2
   1715e:	d932      	bls.n	171c6 <hciDrvWrite+0x92>
   17160:	1e61      	subs	r1, r4, #1
   17162:	2907      	cmp	r1, #7
   17164:	d92f      	bls.n	171c6 <hciDrvWrite+0x92>
   17166:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   1716a:	4613      	mov	r3, r2
   1716c:	4629      	mov	r1, r5
   1716e:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
    {
        pui8Wptr[i] = pData[i];
   17172:	f853 0b04 	ldr.w	r0, [r3], #4
   17176:	f841 0b04 	str.w	r0, [r1], #4
    for (uint32_t i = 0; i < len; i++)
   1717a:	4563      	cmp	r3, ip
   1717c:	d1f9      	bne.n	17172 <hciDrvWrite+0x3e>
   1717e:	f024 0303 	bic.w	r3, r4, #3
   17182:	429c      	cmp	r4, r3
   17184:	d00b      	beq.n	1719e <hciDrvWrite+0x6a>
        pui8Wptr[i] = pData[i];
   17186:	5cd1      	ldrb	r1, [r2, r3]
   17188:	54e9      	strb	r1, [r5, r3]
    for (uint32_t i = 0; i < len; i++)
   1718a:	1c59      	adds	r1, r3, #1
   1718c:	428c      	cmp	r4, r1
   1718e:	d906      	bls.n	1719e <hciDrvWrite+0x6a>
   17190:	3302      	adds	r3, #2
        pui8Wptr[i] = pData[i];
   17192:	5c50      	ldrb	r0, [r2, r1]
   17194:	5468      	strb	r0, [r5, r1]
    for (uint32_t i = 0; i < len; i++)
   17196:	429c      	cmp	r4, r3
   17198:	d901      	bls.n	1719e <hciDrvWrite+0x6a>
        pui8Wptr[i] = pData[i];
   1719a:	5cd2      	ldrb	r2, [r2, r3]
   1719c:	54ea      	strb	r2, [r5, r3]
    }

    //
    // Advance the queue.
    //
    am_hal_queue_item_add(&g_sWriteQueue, 0, 1);
   1719e:	2100      	movs	r1, #0
   171a0:	4811      	ldr	r0, [pc, #68]	; (171e8 <hciDrvWrite+0xb4>)
   171a2:	2201      	movs	r2, #1
   171a4:	f00c fac4 	bl	23730 <am_hal_queue_item_add>

#else
    //
    // Send an event to the BLE transfer handler function.
    //
    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   171a8:	4b10      	ldr	r3, [pc, #64]	; (171ec <hciDrvWrite+0xb8>)
   171aa:	2101      	movs	r1, #1
   171ac:	7818      	ldrb	r0, [r3, #0]
   171ae:	f7fc fb87 	bl	138c0 <WsfSetEvent>
#endif
    return len;
}
   171b2:	4620      	mov	r0, r4
   171b4:	bd38      	pop	{r3, r4, r5, pc}
        if (g_hciDrvErrorHandler)
   171b6:	4b0e      	ldr	r3, [pc, #56]	; (171f0 <hciDrvWrite+0xbc>)
   171b8:	681b      	ldr	r3, [r3, #0]
   171ba:	2b00      	cmp	r3, #0
   171bc:	d0f9      	beq.n	171b2 <hciDrvWrite+0x7e>
            g_hciDrvErrorHandler(g_ui32FailingStatus);
   171be:	480d      	ldr	r0, [pc, #52]	; (171f4 <hciDrvWrite+0xc0>)
   171c0:	4798      	blx	r3
}
   171c2:	4620      	mov	r0, r4
   171c4:	bd38      	pop	{r3, r4, r5, pc}
   171c6:	3304      	adds	r3, #4
   171c8:	1910      	adds	r0, r2, r4
        pui8Wptr[i] = pData[i];
   171ca:	f812 1b01 	ldrb.w	r1, [r2], #1
   171ce:	f803 1f01 	strb.w	r1, [r3, #1]!
    for (uint32_t i = 0; i < len; i++)
   171d2:	4282      	cmp	r2, r0
   171d4:	d1f9      	bne.n	171ca <hciDrvWrite+0x96>
   171d6:	e7e2      	b.n	1719e <hciDrvWrite+0x6a>
        if (g_hciDrvErrorHandler)
   171d8:	4b05      	ldr	r3, [pc, #20]	; (171f0 <hciDrvWrite+0xbc>)
   171da:	681b      	ldr	r3, [r3, #0]
   171dc:	2b00      	cmp	r3, #0
   171de:	d0e8      	beq.n	171b2 <hciDrvWrite+0x7e>
            g_hciDrvErrorHandler(g_ui32FailingStatus);
   171e0:	f04f 6010 	mov.w	r0, #150994944	; 0x9000000
   171e4:	4798      	blx	r3
   171e6:	e7e4      	b.n	171b2 <hciDrvWrite+0x7e>
   171e8:	100059d4 	.word	0x100059d4
   171ec:	1000508a 	.word	0x1000508a
   171f0:	100050b0 	.word	0x100050b0
   171f4:	09000001 	.word	0x09000001

000171f8 <HciDrvHandlerInit>:
void
HciDrvHandlerInit(wsfHandlerId_t handlerId)
{
    g_HciDrvHandleID = handlerId;

    g_HeartBeatTimer.handlerId = handlerId;
   171f8:	4a06      	ldr	r2, [pc, #24]	; (17214 <HciDrvHandlerInit+0x1c>)
    g_HeartBeatTimer.msg.event = BLE_HEARTBEAT_EVENT;

    g_WakeTimer.handlerId = handlerId;
   171fa:	4b07      	ldr	r3, [pc, #28]	; (17218 <HciDrvHandlerInit+0x20>)
    g_HeartBeatTimer.msg.event = BLE_HEARTBEAT_EVENT;
   171fc:	2102      	movs	r1, #2
{
   171fe:	b410      	push	{r4}
    g_HciDrvHandleID = handlerId;
   17200:	4c06      	ldr	r4, [pc, #24]	; (1721c <HciDrvHandlerInit+0x24>)
    g_HeartBeatTimer.handlerId = handlerId;
   17202:	7310      	strb	r0, [r2, #12]
    g_HeartBeatTimer.msg.event = BLE_HEARTBEAT_EVENT;
   17204:	7291      	strb	r1, [r2, #10]
    g_WakeTimer.msg.event = BLE_SET_WAKEUP;
   17206:	2203      	movs	r2, #3
    g_WakeTimer.handlerId = handlerId;
   17208:	7318      	strb	r0, [r3, #12]
    g_WakeTimer.msg.event = BLE_SET_WAKEUP;
   1720a:	729a      	strb	r2, [r3, #10]
    g_HciDrvHandleID = handlerId;
   1720c:	7020      	strb	r0, [r4, #0]
}
   1720e:	f85d 4b04 	ldr.w	r4, [sp], #4
   17212:	4770      	bx	lr
   17214:	1000508c 	.word	0x1000508c
   17218:	1000509c 	.word	0x1000509c
   1721c:	1000508a 	.word	0x1000508a

00017220 <HciDrvIntService>:
//     HciDrvHandler(handlerId);
//
//*****************************************************************************
void
HciDrvIntService(void)
{
   17220:	b510      	push	{r4, lr}
#endif

    //
    // Read and clear the interrupt status.
    //
    uint32_t ui32Status = am_hal_ble_int_status(BLE, true);
   17222:	4c0a      	ldr	r4, [pc, #40]	; (1724c <HciDrvIntService+0x2c>)
   17224:	2101      	movs	r1, #1
   17226:	6820      	ldr	r0, [r4, #0]
   17228:	f00b f89c 	bl	22364 <am_hal_ble_int_status>
   1722c:	4601      	mov	r1, r0
    am_hal_ble_int_clear(BLE, ui32Status);
   1722e:	6820      	ldr	r0, [r4, #0]
   17230:	f00b f8a6 	bl	22380 <am_hal_ble_int_clear>
#else
    //
    // Advance an event counter to make sure we're keeping track of edges
    // correctly.
    //
    g_ui32InterruptsSeen++;
   17234:	4a06      	ldr	r2, [pc, #24]	; (17250 <HciDrvIntService+0x30>)

    //
    // Send an event to get processed in the HCI handler.
    //
    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   17236:	4907      	ldr	r1, [pc, #28]	; (17254 <HciDrvIntService+0x34>)
    g_ui32InterruptsSeen++;
   17238:	6813      	ldr	r3, [r2, #0]
    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   1723a:	7808      	ldrb	r0, [r1, #0]
    g_ui32InterruptsSeen++;
   1723c:	3301      	adds	r3, #1

#if AM_DEBUG_BLE_TIMING
    am_hal_gpio_state_write(11, AM_HAL_GPIO_OUTPUT_CLEAR);
#endif

}
   1723e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   17242:	2101      	movs	r1, #1
    g_ui32InterruptsSeen++;
   17244:	6013      	str	r3, [r2, #0]
    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   17246:	f7fc bb3b 	b.w	138c0 <WsfSetEvent>
   1724a:	bf00      	nop
   1724c:	10005080 	.word	0x10005080
   17250:	100059ec 	.word	0x100059ec
   17254:	1000508a 	.word	0x1000508a

00017258 <HciDrvHandler>:
// correct order.
//
//*****************************************************************************
void
HciDrvHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   17258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // handle this command without issue. If it doesn't acknowledge the
    // command, we will eventually get an HCI command timeout error, which will
    // alert us to the fact that the BLE core has become unresponsive in
    // general.
    //
    if (pMsg->event == BLE_HEARTBEAT_EVENT)
   1725c:	788b      	ldrb	r3, [r1, #2]
   1725e:	2b02      	cmp	r3, #2
{
   17260:	b083      	sub	sp, #12
    if (pMsg->event == BLE_HEARTBEAT_EVENT)
   17262:	f000 80c3 	beq.w	173ec <HciDrvHandler+0x194>

    //
    // Check to see if we read any bytes over the HCI interface that we haven't
    // already sent to the BLE stack.
    //
    if (g_ui32NumBytes > g_consumed_bytes)
   17266:	4b98      	ldr	r3, [pc, #608]	; (174c8 <HciDrvHandler+0x270>)
   17268:	4a98      	ldr	r2, [pc, #608]	; (174cc <HciDrvHandler+0x274>)
   1726a:	681b      	ldr	r3, [r3, #0]
   1726c:	6812      	ldr	r2, [r2, #0]
   1726e:	4293      	cmp	r3, r2
   17270:	f200 809f 	bhi.w	173b2 <HciDrvHandler+0x15a>
   17274:	2300      	movs	r3, #0
    while (ui32NumHciTransactions++ < HCI_DRV_MAX_HCI_TRANSACTIONS)
    {
        //
        // Figure out what kind of transfer the BLE core will accept.
        //
        if ( BLE_IRQ_CHECK() )
   17276:	4c96      	ldr	r4, [pc, #600]	; (174d0 <HciDrvHandler+0x278>)
                // from the queue and send it.
                //
                am_hal_debug_gpio_set(BLE_DEBUG_TRACE_07);
                hci_drv_write_t *psWriteBuffer = am_hal_queue_peek(&g_sWriteQueue);

                ui32ErrorStatus = am_hal_ble_blocking_hci_write(BLE,
   17278:	f8df 928c 	ldr.w	r9, [pc, #652]	; 17508 <HciDrvHandler+0x2b0>
   1727c:	9300      	str	r3, [sp, #0]
   1727e:	2601      	movs	r6, #1
   17280:	461d      	mov	r5, r3
   17282:	e00a      	b.n	1729a <HciDrvHandler+0x42>
                {
                    //
                    // If we fail too many times in a row, we should throw an
                    // error to avoid a lock-up.
                    //
                    ui32TxRetries++;
   17284:	3501      	adds	r5, #1

                    if (ui32TxRetries > HCI_DRV_MAX_TX_RETRIES)
   17286:	f242 7310 	movw	r3, #10000	; 0x2710
   1728a:	429d      	cmp	r5, r3
   1728c:	d87a      	bhi.n	17384 <HciDrvHandler+0x12c>
   1728e:	46b2      	mov	sl, r6
    while (ui32NumHciTransactions++ < HCI_DRV_MAX_HCI_TRANSACTIONS)
   17290:	f5ba 7f7a 	cmp.w	sl, #1000	; 0x3e8
   17294:	f106 0601 	add.w	r6, r6, #1
   17298:	d279      	bcs.n	1738e <HciDrvHandler+0x136>
        if ( BLE_IRQ_CHECK() )
   1729a:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   1729e:	0619      	lsls	r1, r3, #24
   172a0:	f100 8084 	bmi.w	173ac <HciDrvHandler+0x154>
   172a4:	4f8b      	ldr	r7, [pc, #556]	; (174d4 <HciDrvHandler+0x27c>)
                    BLE_HEARTBEAT_RESTART();
   172a6:	f8df 8234 	ldr.w	r8, [pc, #564]	; 174dc <HciDrvHandler+0x284>
            if (am_hal_queue_empty(&g_sWriteQueue))
   172aa:	68bb      	ldr	r3, [r7, #8]
                ui32ErrorStatus = am_hal_ble_blocking_hci_write(BLE,
   172ac:	2100      	movs	r1, #0
            if (am_hal_queue_empty(&g_sWriteQueue))
   172ae:	2b00      	cmp	r3, #0
   172b0:	d06d      	beq.n	1738e <HciDrvHandler+0x136>
                hci_drv_write_t *psWriteBuffer = am_hal_queue_peek(&g_sWriteQueue);
   172b2:	697a      	ldr	r2, [r7, #20]
   172b4:	687b      	ldr	r3, [r7, #4]
                ui32ErrorStatus = am_hal_ble_blocking_hci_write(BLE,
   172b6:	f8d9 0000 	ldr.w	r0, [r9]
                hci_drv_write_t *psWriteBuffer = am_hal_queue_peek(&g_sWriteQueue);
   172ba:	eb02 0c03 	add.w	ip, r2, r3
                ui32ErrorStatus = am_hal_ble_blocking_hci_write(BLE,
   172be:	58d3      	ldr	r3, [r2, r3]
   172c0:	f10c 0204 	add.w	r2, ip, #4
   172c4:	f00a ffac 	bl	22220 <am_hal_ble_blocking_hci_write>
   172c8:	46cb      	mov	fp, r9
                if (ui32ErrorStatus == AM_HAL_STATUS_SUCCESS)
   172ca:	4682      	mov	sl, r0
   172cc:	2800      	cmp	r0, #0
   172ce:	d1d9      	bne.n	17284 <HciDrvHandler+0x2c>
                    BLE_HEARTBEAT_RESTART();
   172d0:	4640      	mov	r0, r8
   172d2:	f7fc fd7f 	bl	13dd4 <WsfTimerStop>
   172d6:	4640      	mov	r0, r8
   172d8:	f242 7110 	movw	r1, #10000	; 0x2710
   172dc:	f7fc fd36 	bl	13d4c <WsfTimerStartMs>
                    am_hal_queue_item_get(&g_sWriteQueue, 0, 1);
   172e0:	2201      	movs	r2, #1
   172e2:	4651      	mov	r1, sl
   172e4:	4638      	mov	r0, r7
   172e6:	f00c fa61 	bl	237ac <am_hal_queue_item_get>
        if ( BLE_IRQ_CHECK() )
   172ea:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   172ee:	0618      	lsls	r0, r3, #24
    while (ui32NumHciTransactions++ < HCI_DRV_MAX_HCI_TRANSACTIONS)
   172f0:	f04f 0601 	mov.w	r6, #1
        if ( BLE_IRQ_CHECK() )
   172f4:	f3c3 15c0 	ubfx	r5, r3, #7, #1
   172f8:	d5d7      	bpl.n	172aa <HciDrvHandler+0x52>
                    ui32TxRetries = 0;
   172fa:	4655      	mov	r5, sl
    while (ui32NumHciTransactions++ < HCI_DRV_MAX_HCI_TRANSACTIONS)
   172fc:	46b2      	mov	sl, r6
            uint32_t ui32OldInterruptsSeen = g_ui32InterruptsSeen;
   172fe:	4b76      	ldr	r3, [pc, #472]	; (174d8 <HciDrvHandler+0x280>)
            BLE_HEARTBEAT_RESTART();
   17300:	4876      	ldr	r0, [pc, #472]	; (174dc <HciDrvHandler+0x284>)
            uint32_t ui32OldInterruptsSeen = g_ui32InterruptsSeen;
   17302:	f8d3 8000 	ldr.w	r8, [r3]
            BLE_HEARTBEAT_RESTART();
   17306:	f7fc fd65 	bl	13dd4 <WsfTimerStop>
   1730a:	4874      	ldr	r0, [pc, #464]	; (174dc <HciDrvHandler+0x284>)
   1730c:	f242 7110 	movw	r1, #10000	; 0x2710
   17310:	f7fc fd1c 	bl	13d4c <WsfTimerStartMs>
            ui32ErrorStatus = am_hal_ble_blocking_hci_read(BLE, (uint32_t*)g_pui32ReadBuffer, &g_ui32NumBytes);
   17314:	4a6c      	ldr	r2, [pc, #432]	; (174c8 <HciDrvHandler+0x270>)
   17316:	4972      	ldr	r1, [pc, #456]	; (174e0 <HciDrvHandler+0x288>)
   17318:	f8db 0000 	ldr.w	r0, [fp]
            g_ui32NumBytes = 0;
   1731c:	4617      	mov	r7, r2
   1731e:	2300      	movs	r3, #0
   17320:	6013      	str	r3, [r2, #0]
            ui32ErrorStatus = am_hal_ble_blocking_hci_read(BLE, (uint32_t*)g_pui32ReadBuffer, &g_ui32NumBytes);
   17322:	f00a ffa7 	bl	22274 <am_hal_ble_blocking_hci_read>
            if (g_ui32NumBytes > HCI_DRV_MAX_RX_PACKET)
   17326:	683a      	ldr	r2, [r7, #0]
   17328:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
            ui32ErrorStatus = am_hal_ble_blocking_hci_read(BLE, (uint32_t*)g_pui32ReadBuffer, &g_ui32NumBytes);
   1732c:	4603      	mov	r3, r0
            if (g_ui32NumBytes > HCI_DRV_MAX_RX_PACKET)
   1732e:	d834      	bhi.n	1739a <HciDrvHandler+0x142>
            if ( ui32ErrorStatus == AM_HAL_STATUS_SUCCESS)
   17330:	2b00      	cmp	r3, #0
   17332:	f040 80a3 	bne.w	1747c <HciDrvHandler+0x224>
   17336:	f44f 6bfa 	mov.w	fp, #2000	; 0x7d0
   1733a:	e008      	b.n	1734e <HciDrvHandler+0xf6>
                    if (BLE_IRQ_CHECK() == 0 || g_ui32InterruptsSeen != ui32OldInterruptsSeen)
   1733c:	4b66      	ldr	r3, [pc, #408]	; (174d8 <HciDrvHandler+0x280>)
   1733e:	681b      	ldr	r3, [r3, #0]
   17340:	4543      	cmp	r3, r8
   17342:	d10a      	bne.n	1735a <HciDrvHandler+0x102>
                    am_util_delay_us(1);
   17344:	f005 fd12 	bl	1cd6c <am_util_delay_us>
                for (ui32IRQRetries = 0; ui32IRQRetries < HCI_DRV_MAX_IRQ_TIMEOUT; ui32IRQRetries++)
   17348:	f1bb 0b01 	subs.w	fp, fp, #1
   1734c:	d005      	beq.n	1735a <HciDrvHandler+0x102>
                    if (BLE_IRQ_CHECK() == 0 || g_ui32InterruptsSeen != ui32OldInterruptsSeen)
   1734e:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   17352:	061b      	lsls	r3, r3, #24
                    am_util_delay_us(1);
   17354:	f04f 0001 	mov.w	r0, #1
                    if (BLE_IRQ_CHECK() == 0 || g_ui32InterruptsSeen != ui32OldInterruptsSeen)
   17358:	d4f0      	bmi.n	1733c <HciDrvHandler+0xe4>
                g_consumed_bytes = hciTrSerialRxIncoming(g_pui8ReadBuffer, g_ui32NumBytes);
   1735a:	4b62      	ldr	r3, [pc, #392]	; (174e4 <HciDrvHandler+0x28c>)
   1735c:	4f5a      	ldr	r7, [pc, #360]	; (174c8 <HciDrvHandler+0x270>)
   1735e:	6818      	ldr	r0, [r3, #0]
   17360:	8839      	ldrh	r1, [r7, #0]
   17362:	f7fc f8ad 	bl	134c0 <hciTrSerialRxIncoming>
                if (g_consumed_bytes != g_ui32NumBytes)
   17366:	683b      	ldr	r3, [r7, #0]
                g_consumed_bytes = hciTrSerialRxIncoming(g_pui8ReadBuffer, g_ui32NumBytes);
   17368:	4a58      	ldr	r2, [pc, #352]	; (174cc <HciDrvHandler+0x274>)
                if (g_consumed_bytes != g_ui32NumBytes)
   1736a:	4298      	cmp	r0, r3
                g_consumed_bytes = hciTrSerialRxIncoming(g_pui8ReadBuffer, g_ui32NumBytes);
   1736c:	6010      	str	r0, [r2, #0]
                if (g_consumed_bytes != g_ui32NumBytes)
   1736e:	d109      	bne.n	17384 <HciDrvHandler+0x12c>
                read_hci_packet_count++;
   17370:	9a00      	ldr	r2, [sp, #0]
                g_ui32NumBytes   = 0;
   17372:	4955      	ldr	r1, [pc, #340]	; (174c8 <HciDrvHandler+0x270>)
   17374:	2300      	movs	r3, #0
                read_hci_packet_count++;
   17376:	3201      	adds	r2, #1
                g_ui32NumBytes   = 0;
   17378:	600b      	str	r3, [r1, #0]
                g_consumed_bytes = 0;
   1737a:	4954      	ldr	r1, [pc, #336]	; (174cc <HciDrvHandler+0x274>)
                read_hci_packet_count++;
   1737c:	9200      	str	r2, [sp, #0]
            if (read_hci_packet_count >= HCI_DRV_MAX_READ_PACKET)
   1737e:	2a03      	cmp	r2, #3
                g_consumed_bytes = 0;
   17380:	600b      	str	r3, [r1, #0]
            if (read_hci_packet_count >= HCI_DRV_MAX_READ_PACKET)
   17382:	d985      	bls.n	17290 <HciDrvHandler+0x38>
                    {
                        // we need to come back again later.
                        WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   17384:	4b58      	ldr	r3, [pc, #352]	; (174e8 <HciDrvHandler+0x290>)
   17386:	2101      	movs	r1, #1
   17388:	7818      	ldrb	r0, [r3, #0]
   1738a:	f7fc fa99 	bl	138c0 <WsfSetEvent>

            }
        }
    }

    if (ui32NumHciTransactions == HCI_DRV_MAX_HCI_TRANSACTIONS)
   1738e:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
   17392:	d035      	beq.n	17400 <HciDrvHandler+0x1a8>
        CRITICAL_PRINT("ERROR: Maximum number of successive HCI transactions exceeded.\n");
        ERROR_RECOVER(HCI_DRV_TOO_MANY_PACKETS);
    }

    am_hal_debug_gpio_clear(BLE_DEBUG_TRACE_01);
}
   17394:	b003      	add	sp, #12
   17396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (g_hciDrvErrorHandler)
   1739a:	4a54      	ldr	r2, [pc, #336]	; (174ec <HciDrvHandler+0x294>)
   1739c:	6812      	ldr	r2, [r2, #0]
   1739e:	2a00      	cmp	r2, #0
   173a0:	d0c6      	beq.n	17330 <HciDrvHandler+0xd8>
   173a2:	9001      	str	r0, [sp, #4]
            g_hciDrvErrorHandler(g_ui32FailingStatus);
   173a4:	4852      	ldr	r0, [pc, #328]	; (174f0 <HciDrvHandler+0x298>)
   173a6:	4790      	blx	r2
   173a8:	9b01      	ldr	r3, [sp, #4]
   173aa:	e7c1      	b.n	17330 <HciDrvHandler+0xd8>
        if ( BLE_IRQ_CHECK() )
   173ac:	46b2      	mov	sl, r6
   173ae:	46cb      	mov	fp, r9
   173b0:	e7a5      	b.n	172fe <HciDrvHandler+0xa6>
        g_consumed_bytes += hciTrSerialRxIncoming(g_pui8ReadBuffer + g_consumed_bytes,
   173b2:	494c      	ldr	r1, [pc, #304]	; (174e4 <HciDrvHandler+0x28c>)
   173b4:	6808      	ldr	r0, [r1, #0]
   173b6:	1a9b      	subs	r3, r3, r2
   173b8:	b299      	uxth	r1, r3
   173ba:	4410      	add	r0, r2
   173bc:	f7fc f880 	bl	134c0 <hciTrSerialRxIncoming>
   173c0:	4942      	ldr	r1, [pc, #264]	; (174cc <HciDrvHandler+0x274>)
        if (g_consumed_bytes != g_ui32NumBytes)
   173c2:	4b41      	ldr	r3, [pc, #260]	; (174c8 <HciDrvHandler+0x270>)
        g_consumed_bytes += hciTrSerialRxIncoming(g_pui8ReadBuffer + g_consumed_bytes,
   173c4:	680a      	ldr	r2, [r1, #0]
        if (g_consumed_bytes != g_ui32NumBytes)
   173c6:	681b      	ldr	r3, [r3, #0]
        g_consumed_bytes += hciTrSerialRxIncoming(g_pui8ReadBuffer + g_consumed_bytes,
   173c8:	4410      	add	r0, r2
        if (g_consumed_bytes != g_ui32NumBytes)
   173ca:	4298      	cmp	r0, r3
        g_consumed_bytes += hciTrSerialRxIncoming(g_pui8ReadBuffer + g_consumed_bytes,
   173cc:	6008      	str	r0, [r1, #0]
        if (g_consumed_bytes != g_ui32NumBytes)
   173ce:	d105      	bne.n	173dc <HciDrvHandler+0x184>
            g_ui32NumBytes   = 0;
   173d0:	4a3d      	ldr	r2, [pc, #244]	; (174c8 <HciDrvHandler+0x270>)
   173d2:	2300      	movs	r3, #0
   173d4:	6013      	str	r3, [r2, #0]
            g_consumed_bytes = 0;
   173d6:	4a3d      	ldr	r2, [pc, #244]	; (174cc <HciDrvHandler+0x274>)
   173d8:	6013      	str	r3, [r2, #0]
    while (ui32NumHciTransactions++ < HCI_DRV_MAX_HCI_TRANSACTIONS)
   173da:	e74b      	b.n	17274 <HciDrvHandler+0x1c>
            WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   173dc:	4b42      	ldr	r3, [pc, #264]	; (174e8 <HciDrvHandler+0x290>)
   173de:	7818      	ldrb	r0, [r3, #0]
   173e0:	2101      	movs	r1, #1
}
   173e2:	b003      	add	sp, #12
   173e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   173e8:	f7fc ba6a 	b.w	138c0 <WsfSetEvent>
        HciReadLocalVerInfoCmd();
   173ec:	f7fa f940 	bl	11670 <HciReadLocalVerInfoCmd>
        BLE_HEARTBEAT_START();
   173f0:	483a      	ldr	r0, [pc, #232]	; (174dc <HciDrvHandler+0x284>)
   173f2:	f242 7110 	movw	r1, #10000	; 0x2710
}
   173f6:	b003      	add	sp, #12
   173f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        BLE_HEARTBEAT_START();
   173fc:	f7fc bca6 	b.w	13d4c <WsfTimerStartMs>
        if (g_hciDrvErrorHandler)
   17400:	4b3a      	ldr	r3, [pc, #232]	; (174ec <HciDrvHandler+0x294>)
   17402:	681b      	ldr	r3, [r3, #0]
   17404:	b10b      	cbz	r3, 1740a <HciDrvHandler+0x1b2>
            g_hciDrvErrorHandler(g_ui32FailingStatus);
   17406:	483b      	ldr	r0, [pc, #236]	; (174f4 <HciDrvHandler+0x29c>)
   17408:	4798      	blx	r3
    BLE_HEARTBEAT_STOP();
   1740a:	4834      	ldr	r0, [pc, #208]	; (174dc <HciDrvHandler+0x284>)
   1740c:	f7fc fce2 	bl	13dd4 <WsfTimerStop>
   17410:	4b39      	ldr	r3, [pc, #228]	; (174f8 <HciDrvHandler+0x2a0>)
   17412:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   17416:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   1741a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1741e:	f3bf 8f6f 	isb	sy
    am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF);
   17422:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 17508 <HciDrvHandler+0x2b0>
    WHILE_TIMEOUT_MS_BREAK(PWRCTRL->DEVPWREN_b.PWRBLEL, 1000, 0);
   17426:	4d35      	ldr	r5, [pc, #212]	; (174fc <HciDrvHandler+0x2a4>)
    am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF);
   17428:	f8db 0000 	ldr.w	r0, [fp]
   1742c:	2101      	movs	r1, #1
   1742e:	f00a fbaf 	bl	21b90 <am_hal_ble_power_control>
    WHILE_TIMEOUT_MS_BREAK(PWRCTRL->DEVPWREN_b.PWRBLEL, 1000, 0);
   17432:	68ab      	ldr	r3, [r5, #8]
   17434:	049a      	lsls	r2, r3, #18
   17436:	d509      	bpl.n	1744c <HciDrvHandler+0x1f4>
   17438:	4c31      	ldr	r4, [pc, #196]	; (17500 <HciDrvHandler+0x2a8>)
   1743a:	e001      	b.n	17440 <HciDrvHandler+0x1e8>
   1743c:	3c01      	subs	r4, #1
   1743e:	d005      	beq.n	1744c <HciDrvHandler+0x1f4>
   17440:	2010      	movs	r0, #16
   17442:	f00b fd83 	bl	22f4c <am_hal_flash_delay>
   17446:	68ab      	ldr	r3, [r5, #8]
   17448:	049b      	lsls	r3, r3, #18
   1744a:	d4f7      	bmi.n	1743c <HciDrvHandler+0x1e4>
    am_hal_ble_deinitialize(BLE);
   1744c:	f8db 0000 	ldr.w	r0, [fp]
   17450:	f00a faf2 	bl	21a38 <am_hal_ble_deinitialize>
    g_ui32NumBytes   = 0;
   17454:	4b1c      	ldr	r3, [pc, #112]	; (174c8 <HciDrvHandler+0x270>)
   17456:	2000      	movs	r0, #0
   17458:	6018      	str	r0, [r3, #0]
    g_consumed_bytes = 0;
   1745a:	4b1c      	ldr	r3, [pc, #112]	; (174cc <HciDrvHandler+0x274>)
   1745c:	6018      	str	r0, [r3, #0]
        ERROR_RECOVER(HCI_DRV_TOO_MANY_PACKETS);
   1745e:	f7ff fd3d 	bl	16edc <HciDrvRadioBoot>
//
//*****************************************************************************
void
HciDrvEmptyWriteQueue(void)
{
    am_hal_queue_from_array(&g_sWriteQueue, g_psWriteBuffers);
   17462:	4928      	ldr	r1, [pc, #160]	; (17504 <HciDrvHandler+0x2ac>)
   17464:	481b      	ldr	r0, [pc, #108]	; (174d4 <HciDrvHandler+0x27c>)
   17466:	f44f 6302 	mov.w	r3, #2080	; 0x820
   1746a:	f44f 7282 	mov.w	r2, #260	; 0x104
   1746e:	f00c f953 	bl	23718 <am_hal_queue_init>
}
   17472:	b003      	add	sp, #12
   17474:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        ERROR_RECOVER(HCI_DRV_TOO_MANY_PACKETS);
   17478:	f001 bbec 	b.w	18c54 <DmDevReset>
        if (g_hciDrvErrorHandler)
   1747c:	4a1b      	ldr	r2, [pc, #108]	; (174ec <HciDrvHandler+0x294>)
   1747e:	6812      	ldr	r2, [r2, #0]
   17480:	b10a      	cbz	r2, 17486 <HciDrvHandler+0x22e>
            g_hciDrvErrorHandler(g_ui32FailingStatus);
   17482:	4618      	mov	r0, r3
   17484:	4790      	blx	r2
    BLE_HEARTBEAT_STOP();
   17486:	4815      	ldr	r0, [pc, #84]	; (174dc <HciDrvHandler+0x284>)
   17488:	f7fc fca4 	bl	13dd4 <WsfTimerStop>
   1748c:	4b1a      	ldr	r3, [pc, #104]	; (174f8 <HciDrvHandler+0x2a0>)
   1748e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   17492:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   17496:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1749a:	f3bf 8f6f 	isb	sy
    WHILE_TIMEOUT_MS_BREAK(PWRCTRL->DEVPWREN_b.PWRBLEL, 1000, 0);
   1749e:	4d17      	ldr	r5, [pc, #92]	; (174fc <HciDrvHandler+0x2a4>)
    am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF);
   174a0:	f8db 0000 	ldr.w	r0, [fp]
   174a4:	2101      	movs	r1, #1
   174a6:	f00a fb73 	bl	21b90 <am_hal_ble_power_control>
    WHILE_TIMEOUT_MS_BREAK(PWRCTRL->DEVPWREN_b.PWRBLEL, 1000, 0);
   174aa:	68ab      	ldr	r3, [r5, #8]
   174ac:	049f      	lsls	r7, r3, #18
   174ae:	d5cd      	bpl.n	1744c <HciDrvHandler+0x1f4>
   174b0:	4c13      	ldr	r4, [pc, #76]	; (17500 <HciDrvHandler+0x2a8>)
   174b2:	e001      	b.n	174b8 <HciDrvHandler+0x260>
   174b4:	3c01      	subs	r4, #1
   174b6:	d0c9      	beq.n	1744c <HciDrvHandler+0x1f4>
   174b8:	2010      	movs	r0, #16
   174ba:	f00b fd47 	bl	22f4c <am_hal_flash_delay>
   174be:	68ab      	ldr	r3, [r5, #8]
   174c0:	049e      	lsls	r6, r3, #18
   174c2:	d4f7      	bmi.n	174b4 <HciDrvHandler+0x25c>
   174c4:	e7c2      	b.n	1744c <HciDrvHandler+0x1f4>
   174c6:	bf00      	nop
   174c8:	100059f0 	.word	0x100059f0
   174cc:	100050ac 	.word	0x100050ac
   174d0:	5000c000 	.word	0x5000c000
   174d4:	100059d4 	.word	0x100059d4
   174d8:	100059ec 	.word	0x100059ec
   174dc:	1000508c 	.word	0x1000508c
   174e0:	100058d4 	.word	0x100058d4
   174e4:	10002b94 	.word	0x10002b94
   174e8:	1000508a 	.word	0x1000508a
   174ec:	100050b0 	.word	0x100050b0
   174f0:	09000002 	.word	0x09000002
   174f4:	09000006 	.word	0x09000006
   174f8:	e000e100 	.word	0xe000e100
   174fc:	40021000 	.word	0x40021000
   17500:	000f4240 	.word	0x000f4240
   17504:	100050b4 	.word	0x100050b4
   17508:	10005080 	.word	0x10005080

0001750c <HciVscUpdateBDAddress>:
    HciVendorSpecificCmd(0xFC32, 6, g_BLEMacAddress);
   1750c:	4a02      	ldr	r2, [pc, #8]	; (17518 <HciVscUpdateBDAddress+0xc>)
   1750e:	2106      	movs	r1, #6
   17510:	f64f 4032 	movw	r0, #64562	; 0xfc32
   17514:	f7fa bb64 	b.w	11be0 <HciVendorSpecificCmd>
   17518:	10005084 	.word	0x10005084

0001751c <hciCoreResetStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreResetStart(void)
{
   1751c:	b508      	push	{r3, lr}
  /* send an HCI Reset command to start the sequence */
  HciResetCmd();
   1751e:	f7fa f90d 	bl	1173c <HciResetCmd>

  // update Bluetooth Address to controller
  HciVscUpdateBDAddress();        

}
   17522:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HciVscUpdateBDAddress();        
   17526:	f7ff bff1 	b.w	1750c <HciVscUpdateBDAddress>
   1752a:	bf00      	nop

0001752c <hciCoreResetSequence>:
  uint16_t       opcode;
  wsfMsgHdr_t    hdr;
  static uint8_t randCnt;

  /* if event is a command complete event */
  if (*pMsg == HCI_CMD_CMPL_EVT)
   1752c:	7803      	ldrb	r3, [r0, #0]
   1752e:	2b0e      	cmp	r3, #14
   17530:	d000      	beq.n	17534 <hciCoreResetSequence+0x8>
   17532:	4770      	bx	lr
  {
    /* parse parameters */
    pMsg += HCI_EVT_HDR_LEN;
    pMsg++;                   /* skip num packets */
    BSTREAM_TO_UINT16(opcode, pMsg);
   17534:	7902      	ldrb	r2, [r0, #4]
   17536:	78c1      	ldrb	r1, [r0, #3]
   17538:	eb01 2102 	add.w	r1, r1, r2, lsl #8
    pMsg++;                   /* skip status */

    /* decode opcode */
    switch (opcode)
   1753c:	f242 034a 	movw	r3, #8266	; 0x204a
    BSTREAM_TO_UINT16(opcode, pMsg);
   17540:	b289      	uxth	r1, r1
    switch (opcode)
   17542:	4299      	cmp	r1, r3
    pMsg++;                   /* skip status */
   17544:	f100 0206 	add.w	r2, r0, #6
    switch (opcode)
   17548:	d8f3      	bhi.n	17532 <hciCoreResetSequence+0x6>
{
   1754a:	b500      	push	{lr}
    switch (opcode)
   1754c:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
{
   17550:	b083      	sub	sp, #12
    switch (opcode)
   17552:	d962      	bls.n	1761a <hciCoreResetSequence+0xee>
   17554:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
   17558:	3b01      	subs	r3, #1
   1755a:	2b49      	cmp	r3, #73	; 0x49
   1755c:	d85a      	bhi.n	17614 <hciCoreResetSequence+0xe8>
   1755e:	e8df f013 	tbh	[pc, r3, lsl #1]
   17562:	0094      	.short	0x0094
   17564:	00db009a 	.word	0x00db009a
   17568:	00590059 	.word	0x00590059
   1756c:	00590059 	.word	0x00590059
   17570:	00590059 	.word	0x00590059
   17574:	00590059 	.word	0x00590059
   17578:	00590059 	.word	0x00590059
   1757c:	00ed0059 	.word	0x00ed0059
   17580:	00590059 	.word	0x00590059
   17584:	00590059 	.word	0x00590059
   17588:	00590059 	.word	0x00590059
   1758c:	00590059 	.word	0x00590059
   17590:	0059004a 	.word	0x0059004a
   17594:	00590059 	.word	0x00590059
   17598:	005900f6 	.word	0x005900f6
   1759c:	00590059 	.word	0x00590059
   175a0:	00590059 	.word	0x00590059
   175a4:	00590059 	.word	0x00590059
   175a8:	005900c3 	.word	0x005900c3
   175ac:	00590059 	.word	0x00590059
   175b0:	00590059 	.word	0x00590059
   175b4:	005900cb 	.word	0x005900cb
   175b8:	00590059 	.word	0x00590059
   175bc:	00b40059 	.word	0x00b40059
   175c0:	00590059 	.word	0x00590059
   175c4:	00590059 	.word	0x00590059
   175c8:	00590059 	.word	0x00590059
   175cc:	00590059 	.word	0x00590059
   175d0:	00590059 	.word	0x00590059
   175d4:	008a008a 	.word	0x008a008a
   175d8:	00590059 	.word	0x00590059
   175dc:	00590059 	.word	0x00590059
   175e0:	00590059 	.word	0x00590059
   175e4:	00590059 	.word	0x00590059
   175e8:	00590059 	.word	0x00590059
   175ec:	00590059 	.word	0x00590059
   175f0:	00590059 	.word	0x00590059
   175f4:	008a      	.short	0x008a
        }
        break;

      case HCI_OPCODE_LE_RAND:
        /* check if need to send second rand command */
        if (randCnt < (HCI_RESET_RAND_CNT-1))
   175f6:	4a66      	ldr	r2, [pc, #408]	; (17790 <hciCoreResetSequence+0x264>)
   175f8:	7813      	ldrb	r3, [r2, #0]
   175fa:	2b02      	cmp	r3, #2
   175fc:	f240 80bb 	bls.w	17776 <hciCoreResetSequence+0x24a>
          HciLeRandCmd();
        }
        else
        {
          /* last command in sequence; set resetting state and call callback */
          hciCb.resetting = FALSE;
   17600:	4a64      	ldr	r2, [pc, #400]	; (17794 <hciCoreResetSequence+0x268>)
   17602:	2300      	movs	r3, #0
          hdr.param = 0;
          hdr.event = HCI_RESET_SEQ_CMPL_CBACK_EVT;
          (*hciCb.evtCback)((hciEvt_t *) &hdr);
   17604:	6891      	ldr	r1, [r2, #8]
          hciCb.resetting = FALSE;
   17606:	7653      	strb	r3, [r2, #25]
          hdr.param = 0;
   17608:	f8ad 3004 	strh.w	r3, [sp, #4]
          hdr.event = HCI_RESET_SEQ_CMPL_CBACK_EVT;
   1760c:	f88d 3006 	strb.w	r3, [sp, #6]
          (*hciCb.evtCback)((hciEvt_t *) &hdr);
   17610:	a801      	add	r0, sp, #4
   17612:	4788      	blx	r1

      default:
        break;
    }
  }
}
   17614:	b003      	add	sp, #12
   17616:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (opcode)
   1761a:	f640 4363 	movw	r3, #3171	; 0xc63
   1761e:	4299      	cmp	r1, r3
   17620:	f000 809f 	beq.w	17762 <hciCoreResetSequence+0x236>
   17624:	d910      	bls.n	17648 <hciCoreResetSequence+0x11c>
   17626:	f241 0301 	movw	r3, #4097	; 0x1001
   1762a:	4299      	cmp	r1, r3
   1762c:	d023      	beq.n	17676 <hciCoreResetSequence+0x14a>
   1762e:	f241 0309 	movw	r3, #4105	; 0x1009
   17632:	4299      	cmp	r1, r3
   17634:	d1ee      	bne.n	17614 <hciCoreResetSequence+0xe8>
        BdaCpy(hciCoreCb.bdAddr, pMsg);
   17636:	4858      	ldr	r0, [pc, #352]	; (17798 <hciCoreResetSequence+0x26c>)
   17638:	4611      	mov	r1, r2
   1763a:	f004 fe8b 	bl	1c354 <BdaCpy>
}
   1763e:	b003      	add	sp, #12
   17640:	f85d eb04 	ldr.w	lr, [sp], #4
        HciLeReadBufSizeCmd();
   17644:	f7f9 bd56 	b.w	110f4 <HciLeReadBufSizeCmd>
    switch (opcode)
   17648:	f640 4301 	movw	r3, #3073	; 0xc01
   1764c:	4299      	cmp	r1, r3
   1764e:	d00c      	beq.n	1766a <hciCoreResetSequence+0x13e>
   17650:	f640 4303 	movw	r3, #3075	; 0xc03
   17654:	4299      	cmp	r1, r3
   17656:	d1dd      	bne.n	17614 <hciCoreResetSequence+0xe8>
        randCnt = 0;
   17658:	4b4d      	ldr	r3, [pc, #308]	; (17790 <hciCoreResetSequence+0x264>)
        HciSetEventMaskCmd((uint8_t *) hciEventMask);
   1765a:	4850      	ldr	r0, [pc, #320]	; (1779c <hciCoreResetSequence+0x270>)
        randCnt = 0;
   1765c:	2200      	movs	r2, #0
   1765e:	701a      	strb	r2, [r3, #0]
}
   17660:	b003      	add	sp, #12
   17662:	f85d eb04 	ldr.w	lr, [sp], #4
        HciSetEventMaskCmd((uint8_t *) hciEventMask);
   17666:	f7fa b8b1 	b.w	117cc <HciSetEventMaskCmd>
        HciLeSetEventMaskCmd((uint8_t *) hciLeEventMask);
   1766a:	484d      	ldr	r0, [pc, #308]	; (177a0 <hciCoreResetSequence+0x274>)
}
   1766c:	b003      	add	sp, #12
   1766e:	f85d eb04 	ldr.w	lr, [sp], #4
        HciLeSetEventMaskCmd((uint8_t *) hciLeEventMask);
   17672:	f7f9 bf05 	b.w	11480 <HciLeSetEventMaskCmd>
        if (hciCoreCb.extResetSeq)
   17676:	4b4b      	ldr	r3, [pc, #300]	; (177a4 <hciCoreResetSequence+0x278>)
   17678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   1767c:	2b00      	cmp	r3, #0
   1767e:	d0c9      	beq.n	17614 <hciCoreResetSequence+0xe8>
          (*hciCoreCb.extResetSeq)(pMsg, opcode);
   17680:	4610      	mov	r0, r2
}
   17682:	b003      	add	sp, #12
   17684:	f85d eb04 	ldr.w	lr, [sp], #4
          (*hciCoreCb.extResetSeq)(pMsg, opcode);
   17688:	4718      	bx	r3
        HciSetEventMaskPage2Cmd((uint8_t *) hciEventMaskPage2);
   1768a:	4847      	ldr	r0, [pc, #284]	; (177a8 <hciCoreResetSequence+0x27c>)
}
   1768c:	b003      	add	sp, #12
   1768e:	f85d eb04 	ldr.w	lr, [sp], #4
        HciSetEventMaskPage2Cmd((uint8_t *) hciEventMaskPage2);
   17692:	f7fa b8d3 	b.w	1183c <HciSetEventMaskPage2Cmd>
        BSTREAM_TO_UINT16(hciCoreCb.bufSize, pMsg);
   17696:	79c1      	ldrb	r1, [r0, #7]
   17698:	7982      	ldrb	r2, [r0, #6]
   1769a:	4b42      	ldr	r3, [pc, #264]	; (177a4 <hciCoreResetSequence+0x278>)
   1769c:	eb02 2201 	add.w	r2, r2, r1, lsl #8
   176a0:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        BSTREAM_TO_UINT8(hciCoreCb.numBufs, pMsg);
   176a4:	7a02      	ldrb	r2, [r0, #8]
        if (!APOLLO3_GE_B0)
   176a6:	4941      	ldr	r1, [pc, #260]	; (177ac <hciCoreResetSequence+0x280>)
        BSTREAM_TO_UINT8(hciCoreCb.numBufs, pMsg);
   176a8:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
        if (!APOLLO3_GE_B0)
   176ac:	68c9      	ldr	r1, [r1, #12]
   176ae:	b2c9      	uxtb	r1, r1
   176b0:	2920      	cmp	r1, #32
   176b2:	d803      	bhi.n	176bc <hciCoreResetSequence+0x190>
          hciCoreCb.numBufs--;
   176b4:	3a01      	subs	r2, #1
   176b6:	b2d2      	uxtb	r2, r2
   176b8:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
        hciCoreCb.availBufs = hciCoreCb.numBufs;
   176bc:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
}
   176c0:	b003      	add	sp, #12
   176c2:	f85d eb04 	ldr.w	lr, [sp], #4
        HciLeReadSupStatesCmd();
   176c6:	f7f9 bdab 	b.w	11220 <HciLeReadSupStatesCmd>
          BSTREAM_TO_UINT16(maxTxTime, pMsg);
   176ca:	7a42      	ldrb	r2, [r0, #9]
   176cc:	7a01      	ldrb	r1, [r0, #8]
          BSTREAM_TO_UINT16(maxTxOctets, pMsg);
   176ce:	79c3      	ldrb	r3, [r0, #7]
   176d0:	7980      	ldrb	r0, [r0, #6]
          BSTREAM_TO_UINT16(maxTxTime, pMsg);
   176d2:	eb01 2102 	add.w	r1, r1, r2, lsl #8
          BSTREAM_TO_UINT16(maxTxOctets, pMsg);
   176d6:	eb00 2003 	add.w	r0, r0, r3, lsl #8
          HciLeWriteDefDataLen(maxTxOctets, maxTxTime);
   176da:	b289      	uxth	r1, r1
   176dc:	b280      	uxth	r0, r0
}
   176de:	b003      	add	sp, #12
   176e0:	f85d eb04 	ldr.w	lr, [sp], #4
          HciLeWriteDefDataLen(maxTxOctets, maxTxTime);
   176e4:	f7f9 bba6 	b.w	10e34 <HciLeWriteDefDataLen>
        if (hciCoreCb.extResetSeq)
   176e8:	492e      	ldr	r1, [pc, #184]	; (177a4 <hciCoreResetSequence+0x278>)
   176ea:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
   176ee:	2b00      	cmp	r3, #0
   176f0:	d049      	beq.n	17786 <hciCoreResetSequence+0x25a>
          (*hciCoreCb.extResetSeq)(pMsg, opcode);
   176f2:	f242 0124 	movw	r1, #8228	; 0x2024
   176f6:	e7c3      	b.n	17680 <hciCoreResetSequence+0x154>
        BSTREAM_TO_UINT8(hciCoreCb.resListSize, pMsg);
   176f8:	4b2a      	ldr	r3, [pc, #168]	; (177a4 <hciCoreResetSequence+0x278>)
   176fa:	7981      	ldrb	r1, [r0, #6]
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_DATA_LEN_EXT) &&
   176fc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
        BSTREAM_TO_UINT8(hciCoreCb.resListSize, pMsg);
   176fe:	f883 1081 	strb.w	r1, [r3, #129]	; 0x81
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_DATA_LEN_EXT) &&
   17702:	0693      	lsls	r3, r2, #26
   17704:	d503      	bpl.n	1770e <hciCoreResetSequence+0x1e2>
      (hciLeSupFeatCfg & HCI_LE_SUP_FEAT_DATA_LEN_EXT))
   17706:	4b2a      	ldr	r3, [pc, #168]	; (177b0 <hciCoreResetSequence+0x284>)
   17708:	681b      	ldr	r3, [r3, #0]
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_DATA_LEN_EXT) &&
   1770a:	069a      	lsls	r2, r3, #26
   1770c:	d42e      	bmi.n	1776c <hciCoreResetSequence+0x240>
}
   1770e:	b003      	add	sp, #12
   17710:	f85d eb04 	ldr.w	lr, [sp], #4
          HciLeRandCmd();
   17714:	f7f9 bcbe 	b.w	11094 <HciLeRandCmd>
        BSTREAM_TO_UINT16(hciCoreCb.leSupFeat, pMsg);
   17718:	79c1      	ldrb	r1, [r0, #7]
   1771a:	7982      	ldrb	r2, [r0, #6]
   1771c:	4b21      	ldr	r3, [pc, #132]	; (177a4 <hciCoreResetSequence+0x278>)
   1771e:	eb02 2201 	add.w	r2, r2, r1, lsl #8
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_PRIVACY) &&
   17722:	0651      	lsls	r1, r2, #25
        BSTREAM_TO_UINT16(hciCoreCb.leSupFeat, pMsg);
   17724:	67da      	str	r2, [r3, #124]	; 0x7c
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_PRIVACY) &&
   17726:	d503      	bpl.n	17730 <hciCoreResetSequence+0x204>
      (hciLeSupFeatCfg & HCI_LE_SUP_FEAT_PRIVACY))
   17728:	4921      	ldr	r1, [pc, #132]	; (177b0 <hciCoreResetSequence+0x284>)
   1772a:	6809      	ldr	r1, [r1, #0]
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_PRIVACY) &&
   1772c:	0648      	lsls	r0, r1, #25
   1772e:	d425      	bmi.n	1777c <hciCoreResetSequence+0x250>
    hciCoreCb.resListSize = 0;
   17730:	2100      	movs	r1, #0
   17732:	f883 1081 	strb.w	r1, [r3, #129]	; 0x81
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_DATA_LEN_EXT) &&
   17736:	0691      	lsls	r1, r2, #26
   17738:	d5e9      	bpl.n	1770e <hciCoreResetSequence+0x1e2>
   1773a:	e7e4      	b.n	17706 <hciCoreResetSequence+0x1da>
        BSTREAM_TO_UINT8(hciCoreCb.whiteListSize, pMsg);
   1773c:	4b19      	ldr	r3, [pc, #100]	; (177a4 <hciCoreResetSequence+0x278>)
   1773e:	7982      	ldrb	r2, [r0, #6]
   17740:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
}
   17744:	b003      	add	sp, #12
   17746:	f85d eb04 	ldr.w	lr, [sp], #4
        HciLeReadLocalSupFeatCmd();
   1774a:	f7f9 bd03 	b.w	11154 <HciLeReadLocalSupFeatCmd>
        memcpy(hciCoreCb.leStates, pMsg, HCI_LE_STATES_LEN);
   1774e:	f8d0 0006 	ldr.w	r0, [r0, #6]
   17752:	6851      	ldr	r1, [r2, #4]
   17754:	4b17      	ldr	r3, [pc, #92]	; (177b4 <hciCoreResetSequence+0x288>)
   17756:	c303      	stmia	r3!, {r0, r1}
}
   17758:	b003      	add	sp, #12
   1775a:	f85d eb04 	ldr.w	lr, [sp], #4
        HciLeReadWhiteListSizeCmd();
   1775e:	f7f9 bd8f 	b.w	11280 <HciLeReadWhiteListSizeCmd>
}
   17762:	b003      	add	sp, #12
   17764:	f85d eb04 	ldr.w	lr, [sp], #4
        HciReadBdAddrCmd();
   17768:	f7f9 bf52 	b.w	11610 <HciReadBdAddrCmd>
}
   1776c:	b003      	add	sp, #12
   1776e:	f85d eb04 	ldr.w	lr, [sp], #4
    HciLeReadMaxDataLen();
   17772:	f7f9 bb99 	b.w	10ea8 <HciLeReadMaxDataLen>
          randCnt++;
   17776:	3301      	adds	r3, #1
   17778:	7013      	strb	r3, [r2, #0]
   1777a:	e7c8      	b.n	1770e <hciCoreResetSequence+0x1e2>
}
   1777c:	b003      	add	sp, #12
   1777e:	f85d eb04 	ldr.w	lr, [sp], #4
    HciLeReadResolvingListSize();
   17782:	f7fa b98d 	b.w	11aa0 <HciLeReadResolvingListSize>
          hciCoreCb.maxAdvDataLen = 0;
   17786:	f8a1 3082 	strh.w	r3, [r1, #130]	; 0x82
          hciCoreCb.numSupAdvSets = 0;
   1778a:	f8a1 3084 	strh.w	r3, [r1, #132]	; 0x84
          HciLeRandCmd();
   1778e:	e7be      	b.n	1770e <hciCoreResetSequence+0x1e2>
   17790:	100059f4 	.word	0x100059f4
   17794:	10004c50 	.word	0x10004c50
   17798:	10004d24 	.word	0x10004d24
   1779c:	00024110 	.word	0x00024110
   177a0:	00024120 	.word	0x00024120
   177a4:	10004cc8 	.word	0x10004cc8
   177a8:	00024118 	.word	0x00024118
   177ac:	40020000 	.word	0x40020000
   177b0:	10002b78 	.word	0x10002b78
   177b4:	10004d1c 	.word	0x10004d1c

000177b8 <hciCoreVsCmdCmplRcvd>:
 */
/*************************************************************************************************/
uint8_t hciCoreVsCmdCmplRcvd(uint16_t opcode, uint8_t *pMsg, uint8_t len)
{
  return HCI_VENDOR_SPEC_CMD_CMPL_CBACK_EVT;
}
   177b8:	2012      	movs	r0, #18
   177ba:	4770      	bx	lr

000177bc <HciVsInit>:
 */
/*************************************************************************************************/
void HciVsInit(uint8_t param)
{

}
   177bc:	4770      	bx	lr
   177be:	bf00      	nop

000177c0 <dmAdvInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvInit(void)
{
   177c0:	b410      	push	{r4}
  dmAdvCb.intervalMin[advHandle] = DM_GAP_ADV_SLOW_INT_MIN;
   177c2:	4b09      	ldr	r3, [pc, #36]	; (177e8 <dmAdvInit+0x28>)
  dmCb.advFiltPolicy[advHandle] = HCI_ADV_FILT_NONE;
   177c4:	4a09      	ldr	r2, [pc, #36]	; (177ec <dmAdvInit+0x2c>)
  dmAdvCb.intervalMin[advHandle] = DM_GAP_ADV_SLOW_INT_MIN;
   177c6:	4c0a      	ldr	r4, [pc, #40]	; (177f0 <dmAdvInit+0x30>)
   177c8:	480a      	ldr	r0, [pc, #40]	; (177f4 <dmAdvInit+0x34>)
  dmCb.advFiltPolicy[advHandle] = HCI_ADV_FILT_NONE;
   177ca:	2100      	movs	r1, #0
  dmAdvCb.intervalMin[advHandle] = DM_GAP_ADV_SLOW_INT_MIN;
   177cc:	e9c3 4004 	strd	r4, r0, [r3, #16]
  dmAdvCb.advType[advHandle] = DM_ADV_NONE;
   177d0:	4c09      	ldr	r4, [pc, #36]	; (177f8 <dmAdvInit+0x38>)
  for (i = 0; i < DM_NUM_ADV_SETS; i++)
  {
    dmAdvCbInit(i);
  }

  dmAdvCb.advTimer.handlerId = dmCb.handlerId;
   177d2:	7b10      	ldrb	r0, [r2, #12]
  dmAdvCb.advType[advHandle] = DM_ADV_NONE;
   177d4:	619c      	str	r4, [r3, #24]
  dmCb.advFiltPolicy[advHandle] = HCI_ADV_FILT_NONE;
   177d6:	f8a2 1011 	strh.w	r1, [r2, #17]
  dmAdvCb.advState[advHandle] = DM_ADV_STATE_IDLE;
   177da:	f8a3 101d 	strh.w	r1, [r3, #29]
  dmAdvCb.advTimer.handlerId = dmCb.handlerId;
   177de:	7318      	strb	r0, [r3, #12]
  dmCb.advAddrType = DM_ADDR_PUBLIC;
   177e0:	7391      	strb	r1, [r2, #14]
}
   177e2:	f85d 4b04 	ldr.w	r4, [sp], #4
   177e6:	4770      	bx	lr
   177e8:	100059f8 	.word	0x100059f8
   177ec:	10005b04 	.word	0x10005b04
   177f0:	06400640 	.word	0x06400640
   177f4:	07800780 	.word	0x07800780
   177f8:	0707ffff 	.word	0x0707ffff

000177fc <dmAdvGenConnCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvGenConnCmpl(uint8_t advHandle, uint8_t status)
{
   177fc:	b530      	push	{r4, r5, lr}
   177fe:	b08b      	sub	sp, #44	; 0x2c
   17800:	460d      	mov	r5, r1
   17802:	4604      	mov	r4, r0
  hciLeConnCmplEvt_t  leConnCmpl;

  /* generate enhanced connection complete event */
  memset(&leConnCmpl, 0, sizeof(leConnCmpl));
   17804:	2224      	movs	r2, #36	; 0x24
   17806:	2100      	movs	r1, #0
   17808:	a801      	add	r0, sp, #4
   1780a:	f009 fe1f 	bl	2144c <memset>

  leConnCmpl.hdr.event = HCI_LE_ENHANCED_CONN_CMPL_CBACK_EVT;
  leConnCmpl.hdr.status = leConnCmpl.status = status;
  leConnCmpl.role = DM_ROLE_SLAVE;
  leConnCmpl.addrType = dmAdvCb.peerAddrType[advHandle];
   1780e:	4b0e      	ldr	r3, [pc, #56]	; (17848 <dmAdvGenConnCmpl+0x4c>)
  leConnCmpl.hdr.status = leConnCmpl.status = status;
   17810:	f88d 5008 	strb.w	r5, [sp, #8]
  leConnCmpl.hdr.event = HCI_LE_ENHANCED_CONN_CMPL_CBACK_EVT;
   17814:	2202      	movs	r2, #2
   17816:	f88d 2006 	strb.w	r2, [sp, #6]
  leConnCmpl.role = DM_ROLE_SLAVE;
   1781a:	2201      	movs	r2, #1
   1781c:	f88d 200c 	strb.w	r2, [sp, #12]
  BdaCpy(leConnCmpl.peerAddr, dmAdvCb.peerAddr[advHandle]);
   17820:	2106      	movs	r1, #6
  leConnCmpl.addrType = dmAdvCb.peerAddrType[advHandle];
   17822:	191a      	adds	r2, r3, r4
  BdaCpy(leConnCmpl.peerAddr, dmAdvCb.peerAddr[advHandle]);
   17824:	fb01 3104 	mla	r1, r1, r4, r3
   17828:	3125      	adds	r1, #37	; 0x25
  leConnCmpl.addrType = dmAdvCb.peerAddrType[advHandle];
   1782a:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
   1782e:	f88d 300d 	strb.w	r3, [sp, #13]
  BdaCpy(leConnCmpl.peerAddr, dmAdvCb.peerAddr[advHandle]);
   17832:	f10d 000e 	add.w	r0, sp, #14
  leConnCmpl.hdr.status = leConnCmpl.status = status;
   17836:	f88d 5007 	strb.w	r5, [sp, #7]
  BdaCpy(leConnCmpl.peerAddr, dmAdvCb.peerAddr[advHandle]);
   1783a:	f004 fd8b 	bl	1c354 <BdaCpy>

  /* pass connection complete event to DM connection management module */
  dmDevPassHciEvtToConn((hciEvt_t *) &leConnCmpl);
   1783e:	a801      	add	r0, sp, #4
   17840:	f001 fa74 	bl	18d2c <dmDevPassHciEvtToConn>
}
   17844:	b00b      	add	sp, #44	; 0x2c
   17846:	bd30      	pop	{r4, r5, pc}
   17848:	100059f8 	.word	0x100059f8

0001784c <DmAdvConfig>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmAdvConfig(uint8_t advHandle, uint8_t advType, uint8_t peerAddrType, uint8_t *pPeerAddr)
{
   1784c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17850:	4606      	mov	r6, r0
  dmAdvApiConfig_t *pMsg;

  WSF_ASSERT(advHandle < DM_NUM_ADV_SETS);

  if ((pMsg = WsfMsgAlloc(sizeof(dmAdvApiConfig_t))) != NULL)
   17852:	200e      	movs	r0, #14
{
   17854:	4688      	mov	r8, r1
   17856:	4615      	mov	r5, r2
   17858:	461f      	mov	r7, r3
  if ((pMsg = WsfMsgAlloc(sizeof(dmAdvApiConfig_t))) != NULL)
   1785a:	f7fb ffdb 	bl	13814 <WsfMsgAlloc>
   1785e:	b188      	cbz	r0, 17884 <DmAdvConfig+0x38>
  {
    pMsg->hdr.event = DM_ADV_MSG_API_CONFIG;
   17860:	4604      	mov	r4, r0
   17862:	2300      	movs	r3, #0
    pMsg->advType = advType;
   17864:	f880 8005 	strb.w	r8, [r0, #5]
    pMsg->advHandle = advHandle;
    pMsg->peerAddrType = peerAddrType;
    BdaCpy(pMsg->peerAddr, pPeerAddr);
   17868:	4639      	mov	r1, r7
    pMsg->hdr.event = DM_ADV_MSG_API_CONFIG;
   1786a:	70a3      	strb	r3, [r4, #2]
    BdaCpy(pMsg->peerAddr, pPeerAddr);
   1786c:	3007      	adds	r0, #7
    pMsg->advHandle = advHandle;
   1786e:	7126      	strb	r6, [r4, #4]
    pMsg->peerAddrType = peerAddrType;
   17870:	71a5      	strb	r5, [r4, #6]
    BdaCpy(pMsg->peerAddr, pPeerAddr);
   17872:	f004 fd6f 	bl	1c354 <BdaCpy>
    WsfMsgSend(dmCb.handlerId, pMsg);
   17876:	4b04      	ldr	r3, [pc, #16]	; (17888 <DmAdvConfig+0x3c>)
   17878:	4621      	mov	r1, r4
   1787a:	7b18      	ldrb	r0, [r3, #12]
  }
}
   1787c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
   17880:	f7fb bfd4 	b.w	1382c <WsfMsgSend>
}
   17884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17888:	10005b04 	.word	0x10005b04

0001788c <DmAdvSetData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmAdvSetData(uint8_t advHandle, uint8_t op, uint8_t location, uint8_t len, uint8_t *pData)
{
   1788c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17890:	4607      	mov	r7, r0
  dmAdvApiSetData_t *pMsg;

  WSF_ASSERT((location == DM_DATA_LOC_SCAN) || (location == DM_DATA_LOC_ADV));
  WSF_ASSERT(advHandle < DM_NUM_ADV_SETS);

  if ((pMsg = WsfMsgAlloc(sizeof(dmAdvApiSetData_t) + len)) != NULL)
   17892:	f103 0008 	add.w	r0, r3, #8
{
   17896:	f8dd 9020 	ldr.w	r9, [sp, #32]
   1789a:	461d      	mov	r5, r3
   1789c:	4688      	mov	r8, r1
   1789e:	4616      	mov	r6, r2
  if ((pMsg = WsfMsgAlloc(sizeof(dmAdvApiSetData_t) + len)) != NULL)
   178a0:	f7fb ffb8 	bl	13814 <WsfMsgAlloc>
   178a4:	b1c0      	cbz	r0, 178d8 <DmAdvSetData+0x4c>
  {
    pMsg->hdr.event = DM_ADV_MSG_API_SET_DATA;
    pMsg->advHandle = advHandle;
   178a6:	2300      	movs	r3, #0
   178a8:	f367 0307 	bfi	r3, r7, #0, #8
   178ac:	f368 230f 	bfi	r3, r8, #8, #8
   178b0:	f366 4317 	bfi	r3, r6, #16, #8
   178b4:	4604      	mov	r4, r0
   178b6:	f365 631f 	bfi	r3, r5, #24, #8
   178ba:	6043      	str	r3, [r0, #4]
    pMsg->hdr.event = DM_ADV_MSG_API_SET_DATA;
   178bc:	2301      	movs	r3, #1
    pMsg->op = op;
    pMsg->location = location;
    pMsg->len = len;
    memcpy(pMsg->pData, pData, len);
   178be:	4649      	mov	r1, r9
    pMsg->hdr.event = DM_ADV_MSG_API_SET_DATA;
   178c0:	70a3      	strb	r3, [r4, #2]
    memcpy(pMsg->pData, pData, len);
   178c2:	462a      	mov	r2, r5
   178c4:	3008      	adds	r0, #8
   178c6:	f7f4 fc1b 	bl	c100 <memcpy>
    WsfMsgSend(dmCb.handlerId, pMsg);
   178ca:	4b04      	ldr	r3, [pc, #16]	; (178dc <DmAdvSetData+0x50>)
   178cc:	4621      	mov	r1, r4
   178ce:	7b18      	ldrb	r0, [r3, #12]
  }
}
   178d0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
   178d4:	f7fb bfaa 	b.w	1382c <WsfMsgSend>
}
   178d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   178dc:	10005b04 	.word	0x10005b04

000178e0 <DmAdvStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmAdvStart(uint8_t numSets, uint8_t *pAdvHandles, uint16_t *pDuration, uint8_t *pMaxEaEvents)
{
   178e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   178e2:	4604      	mov	r4, r0
  uint8_t i;
  dmAdvApiStart_t *pMsg;

  WSF_ASSERT(numSets <= DM_NUM_ADV_SETS);

  if ((pMsg = WsfMsgAlloc(sizeof(dmAdvApiStart_t))) != NULL)
   178e4:	200e      	movs	r0, #14
{
   178e6:	460f      	mov	r7, r1
   178e8:	4616      	mov	r6, r2
   178ea:	461d      	mov	r5, r3
  if ((pMsg = WsfMsgAlloc(sizeof(dmAdvApiStart_t))) != NULL)
   178ec:	f7fb ff92 	bl	13814 <WsfMsgAlloc>
   178f0:	b1c0      	cbz	r0, 17924 <DmAdvStart+0x44>
  {
    pMsg->hdr.event = DM_ADV_MSG_API_START;
   178f2:	2302      	movs	r3, #2
   178f4:	4601      	mov	r1, r0
    pMsg->numSets = numSets;
   178f6:	7104      	strb	r4, [r0, #4]
    pMsg->hdr.event = DM_ADV_MSG_API_START;
   178f8:	7083      	strb	r3, [r0, #2]

    for (i = 0; i < numSets; i++)
   178fa:	b16c      	cbz	r4, 17918 <DmAdvStart+0x38>
    {
      pMsg->advHandle[i] = pAdvHandles[i];
   178fc:	783b      	ldrb	r3, [r7, #0]
   178fe:	7143      	strb	r3, [r0, #5]
      pMsg->duration[i] = pDuration[i];
   17900:	8833      	ldrh	r3, [r6, #0]
   17902:	8103      	strh	r3, [r0, #8]
      pMsg->maxEaEvents[i] = pMaxEaEvents[i];
   17904:	782b      	ldrb	r3, [r5, #0]
   17906:	7303      	strb	r3, [r0, #12]
    for (i = 0; i < numSets; i++)
   17908:	2c01      	cmp	r4, #1
   1790a:	d005      	beq.n	17918 <DmAdvStart+0x38>
      pMsg->advHandle[i] = pAdvHandles[i];
   1790c:	787b      	ldrb	r3, [r7, #1]
   1790e:	7183      	strb	r3, [r0, #6]
      pMsg->duration[i] = pDuration[i];
   17910:	8873      	ldrh	r3, [r6, #2]
   17912:	8143      	strh	r3, [r0, #10]
      pMsg->maxEaEvents[i] = pMaxEaEvents[i];
   17914:	786b      	ldrb	r3, [r5, #1]
   17916:	7343      	strb	r3, [r0, #13]
    }

    WsfMsgSend(dmCb.handlerId, pMsg);
   17918:	4b03      	ldr	r3, [pc, #12]	; (17928 <DmAdvStart+0x48>)
   1791a:	7b18      	ldrb	r0, [r3, #12]
  }
}
   1791c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
   17920:	f7fb bf84 	b.w	1382c <WsfMsgSend>
}
   17924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17926:	bf00      	nop
   17928:	10005b04 	.word	0x10005b04

0001792c <DmAdvStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmAdvStop(uint8_t numSets, uint8_t *pAdvHandles)
{
   1792c:	b538      	push	{r3, r4, r5, lr}
   1792e:	4604      	mov	r4, r0
  uint8_t i;
  dmAdvApiStop_t *pMsg;

  WSF_ASSERT(numSets <= DM_NUM_ADV_SETS);

  if ((pMsg = WsfMsgAlloc(sizeof(dmAdvApiStop_t))) != NULL)
   17930:	2008      	movs	r0, #8
{
   17932:	460d      	mov	r5, r1
  if ((pMsg = WsfMsgAlloc(sizeof(dmAdvApiStop_t))) != NULL)
   17934:	f7fb ff6e 	bl	13814 <WsfMsgAlloc>
   17938:	b310      	cbz	r0, 17980 <DmAdvStop+0x54>
  {
    pMsg->hdr.event = DM_ADV_MSG_API_STOP;
   1793a:	2303      	movs	r3, #3
   1793c:	7083      	strb	r3, [r0, #2]
    pMsg->numSets = numSets;
   1793e:	7104      	strb	r4, [r0, #4]

    for (i = 0; i < numSets; i++)
   17940:	b1bc      	cbz	r4, 17972 <DmAdvStop+0x46>
    {
      pMsg->advHandle[i] = pAdvHandles[i];
   17942:	782a      	ldrb	r2, [r5, #0]
   17944:	7142      	strb	r2, [r0, #5]
    for (i = 0; i < numSets; i++)
   17946:	2c01      	cmp	r4, #1
   17948:	d013      	beq.n	17972 <DmAdvStop+0x46>
      pMsg->advHandle[i] = pAdvHandles[i];
   1794a:	786a      	ldrb	r2, [r5, #1]
   1794c:	7182      	strb	r2, [r0, #6]
    for (i = 0; i < numSets; i++)
   1794e:	2c02      	cmp	r4, #2
   17950:	d00f      	beq.n	17972 <DmAdvStop+0x46>
      pMsg->advHandle[i] = pAdvHandles[i];
   17952:	78a9      	ldrb	r1, [r5, #2]
   17954:	71c1      	strb	r1, [r0, #7]
    for (i = 0; i < numSets; i++)
   17956:	429c      	cmp	r4, r3
      pMsg->advHandle[i] = pAdvHandles[i];
   17958:	f105 0202 	add.w	r2, r5, #2
    for (i = 0; i < numSets; i++)
   1795c:	d009      	beq.n	17972 <DmAdvStop+0x46>
   1795e:	f100 0108 	add.w	r1, r0, #8
   17962:	3301      	adds	r3, #1
   17964:	b2db      	uxtb	r3, r3
      pMsg->advHandle[i] = pAdvHandles[i];
   17966:	f812 5f01 	ldrb.w	r5, [r2, #1]!
   1796a:	f801 5b01 	strb.w	r5, [r1], #1
    for (i = 0; i < numSets; i++)
   1796e:	429c      	cmp	r4, r3
   17970:	d1f7      	bne.n	17962 <DmAdvStop+0x36>
    }

    WsfMsgSend(dmCb.handlerId, pMsg);
   17972:	4b04      	ldr	r3, [pc, #16]	; (17984 <DmAdvStop+0x58>)
   17974:	4601      	mov	r1, r0
   17976:	7b18      	ldrb	r0, [r3, #12]
  }
}
   17978:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
   1797c:	f7fb bf56 	b.w	1382c <WsfMsgSend>
}
   17980:	bd38      	pop	{r3, r4, r5, pc}
   17982:	bf00      	nop
   17984:	10005b04 	.word	0x10005b04

00017988 <DmAdvSetInterval>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmAdvSetInterval(uint8_t advHandle, uint16_t intervalMin, uint16_t intervalMax)
{
   17988:	b570      	push	{r4, r5, r6, lr}
   1798a:	4615      	mov	r5, r2
   1798c:	4604      	mov	r4, r0
   1798e:	460e      	mov	r6, r1
  WSF_ASSERT(advHandle < DM_NUM_ADV_SETS);

  WsfTaskLock();
   17990:	f7fb ff82 	bl	13898 <WsfTaskLock>
  dmAdvCb.intervalMin[advHandle] = intervalMin;
   17994:	4b05      	ldr	r3, [pc, #20]	; (179ac <DmAdvSetInterval+0x24>)
   17996:	f104 0008 	add.w	r0, r4, #8
  dmAdvCb.intervalMax[advHandle] = intervalMax;
   1799a:	eb03 0240 	add.w	r2, r3, r0, lsl #1
  dmAdvCb.intervalMin[advHandle] = intervalMin;
   1799e:	f823 6010 	strh.w	r6, [r3, r0, lsl #1]
  dmAdvCb.intervalMax[advHandle] = intervalMax;
   179a2:	8095      	strh	r5, [r2, #4]
  WsfTaskUnlock();
}
   179a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  WsfTaskUnlock();
   179a8:	f7fb bf80 	b.w	138ac <WsfTaskUnlock>
   179ac:	100059f8 	.word	0x100059f8

000179b0 <dmAdvActRemoveSet>:
 */
/*************************************************************************************************/
void dmAdvActRemoveSet(dmAdvMsg_t *pMsg)
{
  /* empty */
}
   179b0:	4770      	bx	lr
   179b2:	bf00      	nop

000179b4 <dmAdvMsgHandler>:
 */
/*************************************************************************************************/
void dmAdvMsgHandler(wsfMsgHdr_t *pMsg)
{
  /* execute action function */
  (*dmAdvAct[DM_MSG_MASK(pMsg->event)])((dmAdvMsg_t *)pMsg);
   179b4:	7883      	ldrb	r3, [r0, #2]
   179b6:	4a03      	ldr	r2, [pc, #12]	; (179c4 <dmAdvMsgHandler+0x10>)
   179b8:	f003 030f 	and.w	r3, r3, #15
   179bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   179c0:	4718      	bx	r3
   179c2:	bf00      	nop
   179c4:	00024a70 	.word	0x00024a70

000179c8 <dmAdvReset>:
{
   179c8:	b500      	push	{lr}
  if ((dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_STOPPING)     ||
   179ca:	4a0f      	ldr	r2, [pc, #60]	; (17a08 <dmAdvReset+0x40>)
   179cc:	7f53      	ldrb	r3, [r2, #29]
   179ce:	2b05      	cmp	r3, #5
{
   179d0:	b083      	sub	sp, #12
  if ((dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_STOPPING)     ||
   179d2:	d009      	beq.n	179e8 <dmAdvReset+0x20>
   179d4:	2b01      	cmp	r3, #1
   179d6:	d004      	beq.n	179e2 <dmAdvReset+0x1a>
  dmAdvInit();
   179d8:	f7ff fef2 	bl	177c0 <dmAdvInit>
}
   179dc:	b003      	add	sp, #12
   179de:	f85d fb04 	ldr.w	pc, [sp], #4
      ((dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_ADVERTISING) &&
   179e2:	7e13      	ldrb	r3, [r2, #24]
   179e4:	2b01      	cmp	r3, #1
   179e6:	d0f7      	beq.n	179d8 <dmAdvReset+0x10>
    WsfTimerStop(&dmAdvCb.advTimer);
   179e8:	4807      	ldr	r0, [pc, #28]	; (17a08 <dmAdvReset+0x40>)
   179ea:	f7fc f9f3 	bl	13dd4 <WsfTimerStop>
    (*dmCb.cback)((dmEvt_t *) &advStop);
   179ee:	4b07      	ldr	r3, [pc, #28]	; (17a0c <dmAdvReset+0x44>)
    advStop.event = DM_ADV_STOP_IND;
   179f0:	2222      	movs	r2, #34	; 0x22
    (*dmCb.cback)((dmEvt_t *) &advStop);
   179f2:	689b      	ldr	r3, [r3, #8]
    advStop.event = DM_ADV_STOP_IND;
   179f4:	f8ad 2006 	strh.w	r2, [sp, #6]
    (*dmCb.cback)((dmEvt_t *) &advStop);
   179f8:	a801      	add	r0, sp, #4
   179fa:	4798      	blx	r3
  dmAdvInit();
   179fc:	f7ff fee0 	bl	177c0 <dmAdvInit>
}
   17a00:	b003      	add	sp, #12
   17a02:	f85d fb04 	ldr.w	pc, [sp], #4
   17a06:	bf00      	nop
   17a08:	100059f8 	.word	0x100059f8
   17a0c:	10005b04 	.word	0x10005b04

00017a10 <dmAdvActConfig>:
{
   17a10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DM_TRACE_INFO1("dmAdvActConfig: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   17a14:	4c18      	ldr	r4, [pc, #96]	; (17a78 <dmAdvActConfig+0x68>)
{
   17a16:	b087      	sub	sp, #28
  DM_TRACE_INFO1("dmAdvActConfig: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   17a18:	7f61      	ldrb	r1, [r4, #29]
{
   17a1a:	4605      	mov	r5, r0
  DM_TRACE_INFO1("dmAdvActConfig: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   17a1c:	4817      	ldr	r0, [pc, #92]	; (17a7c <dmAdvActConfig+0x6c>)
   17a1e:	f7fc fa79 	bl	13f14 <WsfTrace>
  if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_IDLE)
   17a22:	7f63      	ldrb	r3, [r4, #29]
   17a24:	b9fb      	cbnz	r3, 17a66 <dmAdvActConfig+0x56>
    if ((dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] == DM_ADV_CONN_DIRECT) ||
   17a26:	7e23      	ldrb	r3, [r4, #24]
   17a28:	2b01      	cmp	r3, #1
   17a2a:	d01f      	beq.n	17a6c <dmAdvActConfig+0x5c>
   17a2c:	2b04      	cmp	r3, #4
   17a2e:	d01d      	beq.n	17a6c <dmAdvActConfig+0x5c>
  HciLeSetAdvParamCmd(dmAdvCb.intervalMin[DM_ADV_HANDLE_DEFAULT], /* advIntervalMin */
   17a30:	4f13      	ldr	r7, [pc, #76]	; (17a80 <dmAdvActConfig+0x70>)
   17a32:	8aa1      	ldrh	r1, [r4, #20]
   17a34:	7bb8      	ldrb	r0, [r7, #14]
    dmAdvConfig(pMsg->apiConfig.advType, pMsg->apiConfig.peerAddrType, pMsg->apiConfig.peerAddr);
   17a36:	796e      	ldrb	r6, [r5, #5]
   17a38:	f895 9006 	ldrb.w	r9, [r5, #6]
  HciLeSetAdvParamCmd(dmAdvCb.intervalMin[DM_ADV_HANDLE_DEFAULT], /* advIntervalMin */
   17a3c:	f8b4 8010 	ldrh.w	r8, [r4, #16]
   17a40:	9105      	str	r1, [sp, #20]
   17a42:	f001 f9bb 	bl	18dbc <DmLlAddrType>
   17a46:	7c7a      	ldrb	r2, [r7, #17]
   17a48:	9203      	str	r2, [sp, #12]
    dmAdvConfig(pMsg->apiConfig.advType, pMsg->apiConfig.peerAddrType, pMsg->apiConfig.peerAddr);
   17a4a:	3507      	adds	r5, #7
  HciLeSetAdvParamCmd(dmAdvCb.intervalMin[DM_ADV_HANDLE_DEFAULT], /* advIntervalMin */
   17a4c:	7ea2      	ldrb	r2, [r4, #26]
   17a4e:	9202      	str	r2, [sp, #8]
   17a50:	4603      	mov	r3, r0
   17a52:	9905      	ldr	r1, [sp, #20]
   17a54:	f8cd 9000 	str.w	r9, [sp]
   17a58:	9501      	str	r5, [sp, #4]
   17a5a:	4632      	mov	r2, r6
   17a5c:	4640      	mov	r0, r8
   17a5e:	f7f9 fcb5 	bl	113cc <HciLeSetAdvParamCmd>
  dmLegAdvCb.advType = advType;
   17a62:	4b08      	ldr	r3, [pc, #32]	; (17a84 <dmAdvActConfig+0x74>)
   17a64:	701e      	strb	r6, [r3, #0]
}
   17a66:	b007      	add	sp, #28
   17a68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      DM_TRACE_WARN0("DmAdvConfig during directed advertising!");
   17a6c:	4806      	ldr	r0, [pc, #24]	; (17a88 <dmAdvActConfig+0x78>)
}
   17a6e:	b007      	add	sp, #28
   17a70:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      DM_TRACE_WARN0("DmAdvConfig during directed advertising!");
   17a74:	f7fc ba4e 	b.w	13f14 <WsfTrace>
   17a78:	100059f8 	.word	0x100059f8
   17a7c:	000248c4 	.word	0x000248c4
   17a80:	10005b04 	.word	0x10005b04
   17a84:	10005a2c 	.word	0x10005a2c
   17a88:	000248e0 	.word	0x000248e0

00017a8c <dmAdvActSetData>:
{
   17a8c:	b538      	push	{r3, r4, r5, lr}
  DM_TRACE_INFO1("dmAdvActSetData: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   17a8e:	4d0b      	ldr	r5, [pc, #44]	; (17abc <dmAdvActSetData+0x30>)
{
   17a90:	4604      	mov	r4, r0
  DM_TRACE_INFO1("dmAdvActSetData: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   17a92:	7f69      	ldrb	r1, [r5, #29]
   17a94:	480a      	ldr	r0, [pc, #40]	; (17ac0 <dmAdvActSetData+0x34>)
   17a96:	f7fc fa3d 	bl	13f14 <WsfTrace>
  if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_IDLE)
   17a9a:	7f6b      	ldrb	r3, [r5, #29]
   17a9c:	b943      	cbnz	r3, 17ab0 <dmAdvActSetData+0x24>
    if (pMsg->apiSetData.location == DM_DATA_LOC_ADV)
   17a9e:	79a3      	ldrb	r3, [r4, #6]
      HciLeSetAdvDataCmd(pMsg->apiSetData.len, pMsg->apiSetData.pData);
   17aa0:	79e0      	ldrb	r0, [r4, #7]
   17aa2:	f104 0108 	add.w	r1, r4, #8
    if (pMsg->apiSetData.location == DM_DATA_LOC_ADV)
   17aa6:	b923      	cbnz	r3, 17ab2 <dmAdvActSetData+0x26>
}
   17aa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      HciLeSetAdvDataCmd(pMsg->apiSetData.len, pMsg->apiSetData.pData);
   17aac:	f7f9 bc4c 	b.w	11348 <HciLeSetAdvDataCmd>
}
   17ab0:	bd38      	pop	{r3, r4, r5, pc}
   17ab2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      HciLeSetScanRespDataCmd(pMsg->apiSetData.len, pMsg->apiSetData.pData);
   17ab6:	f7f9 bd1b 	b.w	114f0 <HciLeSetScanRespDataCmd>
   17aba:	bf00      	nop
   17abc:	100059f8 	.word	0x100059f8
   17ac0:	0002490c 	.word	0x0002490c

00017ac4 <dmAdvActStart>:
{
   17ac4:	b538      	push	{r3, r4, r5, lr}
  DM_TRACE_INFO1("dmAdvActStart: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   17ac6:	4c0e      	ldr	r4, [pc, #56]	; (17b00 <dmAdvActStart+0x3c>)
{
   17ac8:	4605      	mov	r5, r0
  DM_TRACE_INFO1("dmAdvActStart: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   17aca:	7f61      	ldrb	r1, [r4, #29]
   17acc:	480d      	ldr	r0, [pc, #52]	; (17b04 <dmAdvActStart+0x40>)
   17ace:	f7fc fa21 	bl	13f14 <WsfTrace>
   if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_IDLE)
   17ad2:	7f63      	ldrb	r3, [r4, #29]
   17ad4:	b96b      	cbnz	r3, 17af2 <dmAdvActStart+0x2e>
    if ((dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] == DM_ADV_CONN_DIRECT) ||
   17ad6:	7e23      	ldrb	r3, [r4, #24]
   17ad8:	2b01      	cmp	r3, #1
   17ada:	d00b      	beq.n	17af4 <dmAdvActStart+0x30>
   17adc:	2b04      	cmp	r3, #4
   17ade:	d009      	beq.n	17af4 <dmAdvActStart+0x30>
    dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_STARTING;
   17ae0:	2303      	movs	r3, #3
   17ae2:	7763      	strb	r3, [r4, #29]
    dmAdvCb.advDuration[DM_ADV_HANDLE_DEFAULT] = pMsg->apiStart.duration[DM_ADV_HANDLE_DEFAULT];
   17ae4:	892b      	ldrh	r3, [r5, #8]
   17ae6:	8423      	strh	r3, [r4, #32]
    HciLeSetAdvEnableCmd(TRUE);
   17ae8:	2001      	movs	r0, #1
}
   17aea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HciLeSetAdvEnableCmd(TRUE);
   17aee:	f7f9 bbf7 	b.w	112e0 <HciLeSetAdvEnableCmd>
}
   17af2:	bd38      	pop	{r3, r4, r5, pc}
   17af4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      DM_TRACE_WARN0("dmAdvActStart during directed advertising!");
   17af8:	4803      	ldr	r0, [pc, #12]	; (17b08 <dmAdvActStart+0x44>)
   17afa:	f7fc ba0b 	b.w	13f14 <WsfTrace>
   17afe:	bf00      	nop
   17b00:	100059f8 	.word	0x100059f8
   17b04:	00024928 	.word	0x00024928
   17b08:	00024944 	.word	0x00024944

00017b0c <dmAdvActStop>:
{
   17b0c:	b510      	push	{r4, lr}
  DM_TRACE_INFO1("dmAdvActStop: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   17b0e:	4c0d      	ldr	r4, [pc, #52]	; (17b44 <dmAdvActStop+0x38>)
   17b10:	480d      	ldr	r0, [pc, #52]	; (17b48 <dmAdvActStop+0x3c>)
   17b12:	7f61      	ldrb	r1, [r4, #29]
   17b14:	f7fc f9fe 	bl	13f14 <WsfTrace>
  if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_ADVERTISING)
   17b18:	7f63      	ldrb	r3, [r4, #29]
   17b1a:	2b01      	cmp	r3, #1
   17b1c:	d000      	beq.n	17b20 <dmAdvActStop+0x14>
}
   17b1e:	bd10      	pop	{r4, pc}
    if ((dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] == DM_ADV_CONN_DIRECT) ||
   17b20:	7e23      	ldrb	r3, [r4, #24]
   17b22:	2b01      	cmp	r3, #1
   17b24:	d008      	beq.n	17b38 <dmAdvActStop+0x2c>
   17b26:	2b04      	cmp	r3, #4
   17b28:	d006      	beq.n	17b38 <dmAdvActStop+0x2c>
    dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_STOPPING;
   17b2a:	2305      	movs	r3, #5
   17b2c:	7763      	strb	r3, [r4, #29]
    HciLeSetAdvEnableCmd(FALSE);
   17b2e:	2000      	movs	r0, #0
}
   17b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HciLeSetAdvEnableCmd(FALSE);
   17b34:	f7f9 bbd4 	b.w	112e0 <HciLeSetAdvEnableCmd>
}
   17b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      DM_TRACE_WARN0("DmAdvStop during directed advertising!");
   17b3c:	4803      	ldr	r0, [pc, #12]	; (17b4c <dmAdvActStop+0x40>)
   17b3e:	f7fc b9e9 	b.w	13f14 <WsfTrace>
   17b42:	bf00      	nop
   17b44:	100059f8 	.word	0x100059f8
   17b48:	00024970 	.word	0x00024970
   17b4c:	00024988 	.word	0x00024988

00017b50 <dmAdvHciHandler>:
  if (pEvent->hdr.event == HCI_LE_ADV_ENABLE_CMD_CMPL_CBACK_EVT)
   17b50:	7883      	ldrb	r3, [r0, #2]
   17b52:	2b35      	cmp	r3, #53	; 0x35
   17b54:	d000      	beq.n	17b58 <dmAdvHciHandler+0x8>
   17b56:	4770      	bx	lr
{
   17b58:	b570      	push	{r4, r5, r6, lr}
    DM_TRACE_INFO1("HCI_LE_ADV_ENABLE_CMD_CMPL_CBACK_EVT: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   17b5a:	4d38      	ldr	r5, [pc, #224]	; (17c3c <dmAdvHciHandler+0xec>)
   17b5c:	4604      	mov	r4, r0
   17b5e:	7f69      	ldrb	r1, [r5, #29]
   17b60:	4837      	ldr	r0, [pc, #220]	; (17c40 <dmAdvHciHandler+0xf0>)
   17b62:	f7fc f9d7 	bl	13f14 <WsfTrace>
    switch (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT])
   17b66:	7f69      	ldrb	r1, [r5, #29]
   17b68:	2903      	cmp	r1, #3
   17b6a:	d910      	bls.n	17b8e <dmAdvHciHandler+0x3e>
   17b6c:	1f0b      	subs	r3, r1, #4
   17b6e:	2b01      	cmp	r3, #1
   17b70:	d80c      	bhi.n	17b8c <dmAdvHciHandler+0x3c>
      if (pEvent->hdr.status == HCI_SUCCESS)
   17b72:	78e6      	ldrb	r6, [r4, #3]
   17b74:	bb06      	cbnz	r6, 17bb8 <dmAdvHciHandler+0x68>
        if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_STOPPING)
   17b76:	2905      	cmp	r1, #5
   17b78:	d039      	beq.n	17bee <dmAdvHciHandler+0x9e>
        dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_ADV_STOP_IND, 0, 0);
   17b7a:	4633      	mov	r3, r6
   17b7c:	4632      	mov	r2, r6
   17b7e:	2122      	movs	r1, #34	; 0x22
   17b80:	2015      	movs	r0, #21
   17b82:	f001 f833 	bl	18bec <dmDevPassEvtToDevPriv>
        dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = DM_ADV_NONE;
   17b86:	23ff      	movs	r3, #255	; 0xff
   17b88:	762b      	strb	r3, [r5, #24]
        dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_IDLE;
   17b8a:	776e      	strb	r6, [r5, #29]
}
   17b8c:	bd70      	pop	{r4, r5, r6, pc}
    switch (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT])
   17b8e:	2901      	cmp	r1, #1
   17b90:	d9fc      	bls.n	17b8c <dmAdvHciHandler+0x3c>
      if (pEvent->hdr.status == HCI_SUCCESS)
   17b92:	78e3      	ldrb	r3, [r4, #3]
   17b94:	b96b      	cbnz	r3, 17bb2 <dmAdvHciHandler+0x62>
        if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_STARTING)
   17b96:	2903      	cmp	r1, #3
   17b98:	d011      	beq.n	17bbe <dmAdvHciHandler+0x6e>
   17b9a:	4e2a      	ldr	r6, [pc, #168]	; (17c44 <dmAdvHciHandler+0xf4>)
        dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_START, DM_ADV_START_IND, 0, 0);
   17b9c:	2300      	movs	r3, #0
   17b9e:	461a      	mov	r2, r3
   17ba0:	2121      	movs	r1, #33	; 0x21
   17ba2:	2014      	movs	r0, #20
   17ba4:	f001 f822 	bl	18bec <dmDevPassEvtToDevPriv>
        dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = dmLegAdvCb.advType;
   17ba8:	7832      	ldrb	r2, [r6, #0]
   17baa:	762a      	strb	r2, [r5, #24]
        dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_ADVERTISING;
   17bac:	2301      	movs	r3, #1
   17bae:	776b      	strb	r3, [r5, #29]
}
   17bb0:	bd70      	pop	{r4, r5, r6, pc}
        dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_IDLE;
   17bb2:	2300      	movs	r3, #0
   17bb4:	776b      	strb	r3, [r5, #29]
}
   17bb6:	bd70      	pop	{r4, r5, r6, pc}
        dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_ADVERTISING;
   17bb8:	2301      	movs	r3, #1
   17bba:	776b      	strb	r3, [r5, #29]
}
   17bbc:	bd70      	pop	{r4, r5, r6, pc}
          if (dmAdvCb.advDuration[DM_ADV_HANDLE_DEFAULT] > 0)
   17bbe:	8c29      	ldrh	r1, [r5, #32]
   17bc0:	bbb1      	cbnz	r1, 17c30 <dmAdvHciHandler+0xe0>
          if (dmLegAdvCb.advType != DM_ADV_CONN_DIRECT_LO_DUTY)
   17bc2:	4e20      	ldr	r6, [pc, #128]	; (17c44 <dmAdvHciHandler+0xf4>)
   17bc4:	7833      	ldrb	r3, [r6, #0]
   17bc6:	2b04      	cmp	r3, #4
   17bc8:	d0e8      	beq.n	17b9c <dmAdvHciHandler+0x4c>
        dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_START, DM_ADV_START_IND, 0, 0);
   17bca:	2300      	movs	r3, #0
   17bcc:	461a      	mov	r2, r3
   17bce:	2121      	movs	r1, #33	; 0x21
   17bd0:	2014      	movs	r0, #20
   17bd2:	f001 f80b 	bl	18bec <dmDevPassEvtToDevPriv>
        dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = dmLegAdvCb.advType;
   17bd6:	7832      	ldrb	r2, [r6, #0]
   17bd8:	762a      	strb	r2, [r5, #24]
        dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_ADVERTISING;
   17bda:	2301      	movs	r3, #1
   17bdc:	776b      	strb	r3, [r5, #29]
            cbackEvent = DM_ADV_START_IND;
   17bde:	2221      	movs	r2, #33	; 0x21
      (*dmCb.cback)((dmEvt_t *) pEvent);
   17be0:	4b19      	ldr	r3, [pc, #100]	; (17c48 <dmAdvHciHandler+0xf8>)
      pEvent->hdr.event = cbackEvent;
   17be2:	70a2      	strb	r2, [r4, #2]
      (*dmCb.cback)((dmEvt_t *) pEvent);
   17be4:	4620      	mov	r0, r4
   17be6:	689b      	ldr	r3, [r3, #8]
}
   17be8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      (*dmCb.cback)((dmEvt_t *) pEvent);
   17bec:	4718      	bx	r3
          WsfTimerStop(&dmAdvCb.advTimer);
   17bee:	4628      	mov	r0, r5
   17bf0:	f7fc f8f0 	bl	13dd4 <WsfTimerStop>
          if (dmLegAdvCb.advType == DM_ADV_CONN_DIRECT_LO_DUTY)
   17bf4:	4b13      	ldr	r3, [pc, #76]	; (17c44 <dmAdvHciHandler+0xf4>)
   17bf6:	781b      	ldrb	r3, [r3, #0]
   17bf8:	2b04      	cmp	r3, #4
   17bfa:	d00a      	beq.n	17c12 <dmAdvHciHandler+0xc2>
        dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_ADV_STOP_IND, 0, 0);
   17bfc:	4633      	mov	r3, r6
   17bfe:	4632      	mov	r2, r6
   17c00:	2122      	movs	r1, #34	; 0x22
   17c02:	2015      	movs	r0, #21
   17c04:	f000 fff2 	bl	18bec <dmDevPassEvtToDevPriv>
        dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = DM_ADV_NONE;
   17c08:	23ff      	movs	r3, #255	; 0xff
   17c0a:	762b      	strb	r3, [r5, #24]
        dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_IDLE;
   17c0c:	776e      	strb	r6, [r5, #29]
            cbackEvent = DM_ADV_STOP_IND;
   17c0e:	2222      	movs	r2, #34	; 0x22
   17c10:	e7e6      	b.n	17be0 <dmAdvHciHandler+0x90>
        dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_ADV_STOP_IND, 0, 0);
   17c12:	4633      	mov	r3, r6
   17c14:	2122      	movs	r1, #34	; 0x22
   17c16:	2015      	movs	r0, #21
   17c18:	4632      	mov	r2, r6
   17c1a:	f000 ffe7 	bl	18bec <dmDevPassEvtToDevPriv>
        dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = DM_ADV_NONE;
   17c1e:	23ff      	movs	r3, #255	; 0xff
      dmAdvGenConnCmpl(DM_ADV_HANDLE_DEFAULT, HCI_ERR_ADV_TIMEOUT);
   17c20:	4630      	mov	r0, r6
        dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = DM_ADV_NONE;
   17c22:	762b      	strb	r3, [r5, #24]
        dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_IDLE;
   17c24:	776e      	strb	r6, [r5, #29]
      dmAdvGenConnCmpl(DM_ADV_HANDLE_DEFAULT, HCI_ERR_ADV_TIMEOUT);
   17c26:	213c      	movs	r1, #60	; 0x3c
}
   17c28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      dmAdvGenConnCmpl(DM_ADV_HANDLE_DEFAULT, HCI_ERR_ADV_TIMEOUT);
   17c2c:	f7ff bde6 	b.w	177fc <dmAdvGenConnCmpl>
            dmAdvCb.advTimer.msg.event = DM_ADV_MSG_TIMEOUT;
   17c30:	2307      	movs	r3, #7
            WsfTimerStartMs(&dmAdvCb.advTimer, dmAdvCb.advDuration[DM_ADV_HANDLE_DEFAULT]);
   17c32:	4628      	mov	r0, r5
            dmAdvCb.advTimer.msg.event = DM_ADV_MSG_TIMEOUT;
   17c34:	72ab      	strb	r3, [r5, #10]
            WsfTimerStartMs(&dmAdvCb.advTimer, dmAdvCb.advDuration[DM_ADV_HANDLE_DEFAULT]);
   17c36:	f7fc f889 	bl	13d4c <WsfTimerStartMs>
   17c3a:	e7c2      	b.n	17bc2 <dmAdvHciHandler+0x72>
   17c3c:	100059f8 	.word	0x100059f8
   17c40:	000249b0 	.word	0x000249b0
   17c44:	10005a2c 	.word	0x10005a2c
   17c48:	10005b04 	.word	0x10005b04

00017c4c <dmAdvActClearSets>:
   17c4c:	4770      	bx	lr
   17c4e:	bf00      	nop

00017c50 <dmAdvActSetRandAddr>:
   17c50:	4770      	bx	lr
   17c52:	bf00      	nop

00017c54 <dmAdvActTimeout>:
{
   17c54:	b508      	push	{r3, lr}
  DM_TRACE_INFO0("dmAdvActTimeout!");
   17c56:	4807      	ldr	r0, [pc, #28]	; (17c74 <dmAdvActTimeout+0x20>)
   17c58:	f7fc f95c 	bl	13f14 <WsfTrace>
  if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_ADVERTISING)
   17c5c:	4b06      	ldr	r3, [pc, #24]	; (17c78 <dmAdvActTimeout+0x24>)
   17c5e:	7f5a      	ldrb	r2, [r3, #29]
   17c60:	2a01      	cmp	r2, #1
   17c62:	d000      	beq.n	17c66 <dmAdvActTimeout+0x12>
}
   17c64:	bd08      	pop	{r3, pc}
    dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_STOPPING;
   17c66:	2205      	movs	r2, #5
   17c68:	775a      	strb	r2, [r3, #29]
}
   17c6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HciLeSetAdvEnableCmd(FALSE);
   17c6e:	2000      	movs	r0, #0
   17c70:	f7f9 bb36 	b.w	112e0 <HciLeSetAdvEnableCmd>
   17c74:	000249e0 	.word	0x000249e0
   17c78:	100059f8 	.word	0x100059f8

00017c7c <dmAdvStartDirected>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvStartDirected(uint8_t advType, uint16_t duration, uint8_t addrType, uint8_t *pAddr)
{
   17c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  DM_TRACE_INFO1("dmAdvStartDirected: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   17c80:	4c0f      	ldr	r4, [pc, #60]	; (17cc0 <dmAdvStartDirected+0x44>)
{
   17c82:	4607      	mov	r7, r0
   17c84:	4688      	mov	r8, r1
  DM_TRACE_INFO1("dmAdvStartDirected: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   17c86:	480f      	ldr	r0, [pc, #60]	; (17cc4 <dmAdvStartDirected+0x48>)
   17c88:	7f61      	ldrb	r1, [r4, #29]
{
   17c8a:	461e      	mov	r6, r3
   17c8c:	4615      	mov	r5, r2
  DM_TRACE_INFO1("dmAdvStartDirected: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   17c8e:	f7fc f941 	bl	13f14 <WsfTrace>

  /* if not advertising */
  if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_IDLE)
   17c92:	7f63      	ldrb	r3, [r4, #29]
   17c94:	b10b      	cbz	r3, 17c9a <dmAdvStartDirected+0x1e>

    dmAdvCb.advDuration[DM_ADV_HANDLE_DEFAULT] = duration;
    BdaCpy(dmAdvCb.peerAddr[DM_ADV_HANDLE_DEFAULT], pAddr);
    dmAdvCb.peerAddrType[DM_ADV_HANDLE_DEFAULT] = addrType;
  }
}
   17c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HciLeSetAdvEnableCmd(TRUE);
   17c9a:	2001      	movs	r0, #1
   17c9c:	f7f9 fb20 	bl	112e0 <HciLeSetAdvEnableCmd>
    dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = (advType == DM_ADV_CONN_DIRECT) ? \
   17ca0:	2f01      	cmp	r7, #1
   17ca2:	bf0c      	ite	eq
   17ca4:	2302      	moveq	r3, #2
   17ca6:	2303      	movne	r3, #3
    BdaCpy(dmAdvCb.peerAddr[DM_ADV_HANDLE_DEFAULT], pAddr);
   17ca8:	4631      	mov	r1, r6
   17caa:	f104 0025 	add.w	r0, r4, #37	; 0x25
    dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = (advType == DM_ADV_CONN_DIRECT) ? \
   17cae:	7763      	strb	r3, [r4, #29]
    dmAdvCb.advDuration[DM_ADV_HANDLE_DEFAULT] = duration;
   17cb0:	f8a4 8020 	strh.w	r8, [r4, #32]
    BdaCpy(dmAdvCb.peerAddr[DM_ADV_HANDLE_DEFAULT], pAddr);
   17cb4:	f004 fb4e 	bl	1c354 <BdaCpy>
    dmAdvCb.peerAddrType[DM_ADV_HANDLE_DEFAULT] = addrType;
   17cb8:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
}
   17cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17cc0:	100059f8 	.word	0x100059f8
   17cc4:	000249f4 	.word	0x000249f4

00017cc8 <dmAdvStopDirected>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvStopDirected(void)
{
   17cc8:	b510      	push	{r4, lr}
  DM_TRACE_INFO1("dmAdvStopDirected: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   17cca:	4c0b      	ldr	r4, [pc, #44]	; (17cf8 <dmAdvStopDirected+0x30>)
   17ccc:	480b      	ldr	r0, [pc, #44]	; (17cfc <dmAdvStopDirected+0x34>)
   17cce:	7f61      	ldrb	r1, [r4, #29]
   17cd0:	f7fc f920 	bl	13f14 <WsfTrace>

  /* if advertising or starting advertising */
  if ((dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_ADVERTISING) ||
   17cd4:	7f63      	ldrb	r3, [r4, #29]
   17cd6:	3b01      	subs	r3, #1
   17cd8:	2b02      	cmp	r3, #2
   17cda:	d900      	bls.n	17cde <dmAdvStopDirected+0x16>
    /* disable advertising */
    dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = (dmLegAdvCb.advType == DM_ADV_CONN_DIRECT) ? \
                                              DM_ADV_STATE_STOPPING_DIRECTED : DM_ADV_STATE_STOPPING;
    HciLeSetAdvEnableCmd(FALSE);
  }
}
   17cdc:	bd10      	pop	{r4, pc}
    dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = (dmLegAdvCb.advType == DM_ADV_CONN_DIRECT) ? \
   17cde:	4b08      	ldr	r3, [pc, #32]	; (17d00 <dmAdvStopDirected+0x38>)
   17ce0:	781b      	ldrb	r3, [r3, #0]
   17ce2:	2b01      	cmp	r3, #1
   17ce4:	bf0c      	ite	eq
   17ce6:	2304      	moveq	r3, #4
   17ce8:	2305      	movne	r3, #5
   17cea:	7763      	strb	r3, [r4, #29]
    HciLeSetAdvEnableCmd(FALSE);
   17cec:	2000      	movs	r0, #0
}
   17cee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HciLeSetAdvEnableCmd(FALSE);
   17cf2:	f7f9 baf5 	b.w	112e0 <HciLeSetAdvEnableCmd>
   17cf6:	bf00      	nop
   17cf8:	100059f8 	.word	0x100059f8
   17cfc:	00024a14 	.word	0x00024a14
   17d00:	10005a2c 	.word	0x10005a2c

00017d04 <dmAdvConnected>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvConnected(void)
{
   17d04:	b510      	push	{r4, lr}
  DM_TRACE_INFO1("dmAdvConnected: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   17d06:	4c09      	ldr	r4, [pc, #36]	; (17d2c <dmAdvConnected+0x28>)
   17d08:	4809      	ldr	r0, [pc, #36]	; (17d30 <dmAdvConnected+0x2c>)
   17d0a:	7f61      	ldrb	r1, [r4, #29]
   17d0c:	f7fc f902 	bl	13f14 <WsfTrace>

  WsfTimerStop(&dmAdvCb.advTimer);
   17d10:	4620      	mov	r0, r4
   17d12:	f7fc f85f 	bl	13dd4 <WsfTimerStop>

  /* pass advertising stop event to dev priv */
  dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_ADV_STOP_IND, 0, 0);
   17d16:	2300      	movs	r3, #0
   17d18:	461a      	mov	r2, r3
   17d1a:	2122      	movs	r1, #34	; 0x22
   17d1c:	2015      	movs	r0, #21
   17d1e:	f000 ff65 	bl	18bec <dmDevPassEvtToDevPriv>

  dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = DM_ADV_NONE;
   17d22:	22ff      	movs	r2, #255	; 0xff
  dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_IDLE;
   17d24:	2300      	movs	r3, #0
  dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = DM_ADV_NONE;
   17d26:	7622      	strb	r2, [r4, #24]
  dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_IDLE;
   17d28:	7763      	strb	r3, [r4, #29]
}
   17d2a:	bd10      	pop	{r4, pc}
   17d2c:	100059f8 	.word	0x100059f8
   17d30:	00024a34 	.word	0x00024a34

00017d34 <dmAdvConnectFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvConnectFailed(void)
{
   17d34:	b510      	push	{r4, lr}
  DM_TRACE_INFO1("dmAdvConnectFailed: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   17d36:	4c09      	ldr	r4, [pc, #36]	; (17d5c <dmAdvConnectFailed+0x28>)
   17d38:	4809      	ldr	r0, [pc, #36]	; (17d60 <dmAdvConnectFailed+0x2c>)
   17d3a:	7f61      	ldrb	r1, [r4, #29]
   17d3c:	f7fc f8ea 	bl	13f14 <WsfTrace>

  WsfTimerStop(&dmAdvCb.advTimer);
   17d40:	4620      	mov	r0, r4
   17d42:	f7fc f847 	bl	13dd4 <WsfTimerStop>

  /* pass advertising stop event to dev priv */
  dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_ADV_STOP_IND, 0, 0);
   17d46:	2300      	movs	r3, #0
   17d48:	461a      	mov	r2, r3
   17d4a:	2122      	movs	r1, #34	; 0x22
   17d4c:	2015      	movs	r0, #21
   17d4e:	f000 ff4d 	bl	18bec <dmDevPassEvtToDevPriv>

  dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = DM_ADV_NONE;
   17d52:	22ff      	movs	r2, #255	; 0xff
  dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_IDLE;
   17d54:	2300      	movs	r3, #0
  dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = DM_ADV_NONE;
   17d56:	7622      	strb	r2, [r4, #24]
  dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_IDLE;
   17d58:	7763      	strb	r3, [r4, #29]
}
   17d5a:	bd10      	pop	{r4, pc}
   17d5c:	100059f8 	.word	0x100059f8
   17d60:	00024a50 	.word	0x00024a50

00017d64 <DmAdvInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmAdvInit(void)
{
   17d64:	b508      	push	{r3, lr}
  WsfTaskLock();
   17d66:	f7fb fd97 	bl	13898 <WsfTaskLock>

  /* set function interface table */
  dmFcnIfTbl[DM_ID_ADV] = (dmFcnIf_t *) &dmAdvFcnIf;
   17d6a:	4b07      	ldr	r3, [pc, #28]	; (17d88 <DmAdvInit+0x24>)
   17d6c:	4a07      	ldr	r2, [pc, #28]	; (17d8c <DmAdvInit+0x28>)
   17d6e:	601a      	str	r2, [r3, #0]

  /* initialize legacy adv module */
  dmAdvInit();
   17d70:	f7ff fd26 	bl	177c0 <dmAdvInit>

  /* clear set advertising set random address callback */
  dmDevCb.advSetRandAddrCback = NULL;
   17d74:	4b06      	ldr	r3, [pc, #24]	; (17d90 <DmAdvInit+0x2c>)
   17d76:	2000      	movs	r0, #0
   17d78:	6018      	str	r0, [r3, #0]

  /* initialize HCI VS module */
  HciVsInit(0);
   17d7a:	f7ff fd1f 	bl	177bc <HciVsInit>

  WsfTaskUnlock();
}
   17d7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  WsfTaskUnlock();
   17d82:	f7fb bd93 	b.w	138ac <WsfTaskUnlock>
   17d86:	bf00      	nop
   17d88:	10002b98 	.word	0x10002b98
   17d8c:	00024a90 	.word	0x00024a90
   17d90:	10005b00 	.word	0x10005b00

00017d94 <dmConnSmActNone>:
 */
/*************************************************************************************************/
void dmConnSmActNone(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
  return;
}
   17d94:	4770      	bx	lr
   17d96:	bf00      	nop

00017d98 <dmConnSmActHciUpdated>:
/*************************************************************************************************/
void dmConnSmActHciUpdated(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
  /* call callback */
  pMsg->hdr.event = DM_CONN_UPDATE_IND;
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) pMsg);
   17d98:	4b03      	ldr	r3, [pc, #12]	; (17da8 <dmConnSmActHciUpdated+0x10>)
  pMsg->hdr.event = DM_CONN_UPDATE_IND;
   17d9a:	2229      	movs	r2, #41	; 0x29
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) pMsg);
   17d9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
  pMsg->hdr.event = DM_CONN_UPDATE_IND;
   17da0:	708a      	strb	r2, [r1, #2]
{
   17da2:	4608      	mov	r0, r1
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) pMsg);
   17da4:	4718      	bx	r3
   17da6:	bf00      	nop
   17da8:	10005a30 	.word	0x10005a30

00017dac <dmConnSmActClose>:
  HciDisconnectCmd(pCcb->handle, pMsg->apiClose.reason);
   17dac:	8980      	ldrh	r0, [r0, #12]
   17dae:	7909      	ldrb	r1, [r1, #4]
   17db0:	f7f8 be76 	b.w	10aa0 <HciDisconnectCmd>

00017db4 <dmConnSmActConnFailed>:
{
   17db4:	b570      	push	{r4, r5, r6, lr}
   17db6:	4604      	mov	r4, r0
   17db8:	460d      	mov	r5, r1
  DM_TRACE_FREE1("dmConnCcbDealloc %d", pCcb->connId);
   17dba:	4817      	ldr	r0, [pc, #92]	; (17e18 <dmConnSmActConnFailed+0x64>)
   17dbc:	7c21      	ldrb	r1, [r4, #16]
   17dbe:	f7fc f8a9 	bl	13f14 <WsfTrace>
  if (pCcb->role == DM_ROLE_MASTER)
   17dc2:	7e63      	ldrb	r3, [r4, #25]
  pCcb->inUse = FALSE;
   17dc4:	2200      	movs	r2, #0
   17dc6:	75a2      	strb	r2, [r4, #22]
  if (pCcb->role == DM_ROLE_MASTER)
   17dc8:	b17b      	cbz	r3, 17dea <dmConnSmActConnFailed+0x36>
  pMsg->hdr.event = DM_CONN_CLOSE_IND;
   17dca:	4c14      	ldr	r4, [pc, #80]	; (17e1c <dmConnSmActConnFailed+0x68>)
  pMsg->hciLeConnCmpl.handle = pMsg->hciLeConnCmpl.role = 0;
   17dcc:	2300      	movs	r3, #0
  pMsg->hdr.event = DM_CONN_CLOSE_IND;
   17dce:	2228      	movs	r2, #40	; 0x28
   17dd0:	70aa      	strb	r2, [r5, #2]
  pMsg->hciLeConnCmpl.handle = pMsg->hciLeConnCmpl.role = 0;
   17dd2:	722b      	strb	r3, [r5, #8]
   17dd4:	80eb      	strh	r3, [r5, #6]
  for (i = 0; i < DM_CLIENT_ID_MAX; i++)
   17dd6:	f104 0614 	add.w	r6, r4, #20
    if (dmConnCb.connCback[i] != NULL)
   17dda:	f854 3b04 	ldr.w	r3, [r4], #4
      (*dmConnCb.connCback[i])((dmEvt_t *) pMsg);
   17dde:	4628      	mov	r0, r5
    if (dmConnCb.connCback[i] != NULL)
   17de0:	b103      	cbz	r3, 17de4 <dmConnSmActConnFailed+0x30>
      (*dmConnCb.connCback[i])((dmEvt_t *) pMsg);
   17de2:	4798      	blx	r3
  for (i = 0; i < DM_CLIENT_ID_MAX; i++)
   17de4:	42a6      	cmp	r6, r4
   17de6:	d1f8      	bne.n	17dda <dmConnSmActConnFailed+0x26>
}
   17de8:	bd70      	pop	{r4, r5, r6, pc}
    dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_CTRL, DM_DEV_PRIV_MSG_CONN_INIT_STOP, 0, 0);
   17dea:	461a      	mov	r2, r3
   17dec:	2101      	movs	r1, #1
   17dee:	2016      	movs	r0, #22
   17df0:	f000 fefc 	bl	18bec <dmDevPassEvtToDevPriv>
    if (pCcb->inUse)
   17df4:	4b0a      	ldr	r3, [pc, #40]	; (17e20 <dmConnSmActConnFailed+0x6c>)
   17df6:	7d9a      	ldrb	r2, [r3, #22]
   17df8:	2a00      	cmp	r2, #0
   17dfa:	d1e6      	bne.n	17dca <dmConnSmActConnFailed+0x16>
   17dfc:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
   17e00:	2a00      	cmp	r2, #0
   17e02:	d1e2      	bne.n	17dca <dmConnSmActConnFailed+0x16>
   17e04:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
   17e08:	2b00      	cmp	r3, #0
   17e0a:	d1de      	bne.n	17dca <dmConnSmActConnFailed+0x16>
      dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_CONN_CLOSE_IND, 0 , 0);
   17e0c:	461a      	mov	r2, r3
   17e0e:	2128      	movs	r1, #40	; 0x28
   17e10:	2015      	movs	r0, #21
   17e12:	f000 feeb 	bl	18bec <dmDevPassEvtToDevPriv>
   17e16:	e7d8      	b.n	17dca <dmConnSmActConnFailed+0x16>
   17e18:	00024a9c 	.word	0x00024a9c
   17e1c:	10005ac0 	.word	0x10005ac0
   17e20:	10005a30 	.word	0x10005a30

00017e24 <dmConnSmActConnOpened>:
{
   17e24:	b570      	push	{r4, r5, r6, lr}
   17e26:	460d      	mov	r5, r1
   17e28:	4604      	mov	r4, r0
  BdaCpy(pCcb->peerAddr, pMsg->hciLeConnCmpl.peerAddr);
   17e2a:	310a      	adds	r1, #10
   17e2c:	f004 fa92 	bl	1c354 <BdaCpy>
  pCcb->handle = pMsg->hciLeConnCmpl.handle;
   17e30:	88eb      	ldrh	r3, [r5, #6]
  pCcb->peerAddrType = DmHostAddrType(pMsg->hciLeConnCmpl.addrType);
   17e32:	7a68      	ldrb	r0, [r5, #9]
  pCcb->handle = pMsg->hciLeConnCmpl.handle;
   17e34:	81a3      	strh	r3, [r4, #12]
  pCcb->peerAddrType = DmHostAddrType(pMsg->hciLeConnCmpl.addrType);
   17e36:	f000 ffcd 	bl	18dd4 <DmHostAddrType>
   17e3a:	74e0      	strb	r0, [r4, #19]
  pCcb->role = pMsg->hciLeConnCmpl.role;
   17e3c:	7a2b      	ldrb	r3, [r5, #8]
   17e3e:	7663      	strb	r3, [r4, #25]
  if (pCcb->role == DM_ROLE_MASTER)
   17e40:	bb7b      	cbnz	r3, 17ea2 <dmConnSmActConnOpened+0x7e>
    pCcb->localAddrType = dmCb.connAddrType;
   17e42:	4b29      	ldr	r3, [pc, #164]	; (17ee8 <dmConnSmActConnOpened+0xc4>)
   17e44:	7b5b      	ldrb	r3, [r3, #13]
   17e46:	7523      	strb	r3, [r4, #20]
  if (pCcb->localAddrType == DM_ADDR_PUBLIC)
   17e48:	bb33      	cbnz	r3, 17e98 <dmConnSmActConnOpened+0x74>
    BdaCpy(pCcb->localAddr, HciGetBdAddr());
   17e4a:	f7fa fa83 	bl	12354 <HciGetBdAddr>
   17e4e:	4601      	mov	r1, r0
   17e50:	1da0      	adds	r0, r4, #6
   17e52:	f004 fa7f 	bl	1c354 <BdaCpy>
  BdaCpy(pCcb->localRpa, pMsg->hciLeConnCmpl.localRpa);
   17e56:	f105 0117 	add.w	r1, r5, #23
   17e5a:	f104 001a 	add.w	r0, r4, #26
   17e5e:	f004 fa79 	bl	1c354 <BdaCpy>
  BdaCpy(pCcb->peerRpa, pMsg->hciLeConnCmpl.peerRpa);
   17e62:	f105 011d 	add.w	r1, r5, #29
   17e66:	f104 0020 	add.w	r0, r4, #32
   17e6a:	f004 fa73 	bl	1c354 <BdaCpy>
  if (pCcb->role == DM_ROLE_MASTER)
   17e6e:	7e63      	ldrb	r3, [r4, #25]
  pCcb->idleMask = 0;
   17e70:	2200      	movs	r2, #0
   17e72:	81e2      	strh	r2, [r4, #14]
  if (pCcb->role == DM_ROLE_MASTER)
   17e74:	b1c3      	cbz	r3, 17ea8 <dmConnSmActConnOpened+0x84>
  dmDevPassEvtToConnCte(DM_CONN_OPEN_IND, pCcb->connId);
   17e76:	7c21      	ldrb	r1, [r4, #16]
   17e78:	4c1c      	ldr	r4, [pc, #112]	; (17eec <dmConnSmActConnOpened+0xc8>)
   17e7a:	2027      	movs	r0, #39	; 0x27
   17e7c:	f000 fed6 	bl	18c2c <dmDevPassEvtToConnCte>
  pMsg->hdr.event = DM_CONN_OPEN_IND;
   17e80:	2327      	movs	r3, #39	; 0x27
   17e82:	70ab      	strb	r3, [r5, #2]
  for (i = 0; i < DM_CLIENT_ID_MAX; i++)
   17e84:	f104 0614 	add.w	r6, r4, #20
    if (dmConnCb.connCback[i] != NULL)
   17e88:	f854 3b04 	ldr.w	r3, [r4], #4
      (*dmConnCb.connCback[i])((dmEvt_t *) pMsg);
   17e8c:	4628      	mov	r0, r5
    if (dmConnCb.connCback[i] != NULL)
   17e8e:	b103      	cbz	r3, 17e92 <dmConnSmActConnOpened+0x6e>
      (*dmConnCb.connCback[i])((dmEvt_t *) pMsg);
   17e90:	4798      	blx	r3
  for (i = 0; i < DM_CLIENT_ID_MAX; i++)
   17e92:	42a6      	cmp	r6, r4
   17e94:	d1f8      	bne.n	17e88 <dmConnSmActConnOpened+0x64>
}
   17e96:	bd70      	pop	{r4, r5, r6, pc}
    BdaCpy(pCcb->localAddr, dmCb.localAddr);
   17e98:	4913      	ldr	r1, [pc, #76]	; (17ee8 <dmConnSmActConnOpened+0xc4>)
   17e9a:	1da0      	adds	r0, r4, #6
   17e9c:	f004 fa5a 	bl	1c354 <BdaCpy>
   17ea0:	e7d9      	b.n	17e56 <dmConnSmActConnOpened+0x32>
    pCcb->localAddrType = dmCb.advAddrType;
   17ea2:	4b11      	ldr	r3, [pc, #68]	; (17ee8 <dmConnSmActConnOpened+0xc4>)
   17ea4:	7b9b      	ldrb	r3, [r3, #14]
   17ea6:	e7ce      	b.n	17e46 <dmConnSmActConnOpened+0x22>
    dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_CTRL, DM_DEV_PRIV_MSG_CONN_INIT_STOP, 0 , 0);
   17ea8:	461a      	mov	r2, r3
   17eaa:	2101      	movs	r1, #1
   17eac:	2016      	movs	r0, #22
   17eae:	f000 fe9d 	bl	18bec <dmDevPassEvtToDevPriv>
    if (pCcb->inUse)
   17eb2:	4b0f      	ldr	r3, [pc, #60]	; (17ef0 <dmConnSmActConnOpened+0xcc>)
   17eb4:	7d9a      	ldrb	r2, [r3, #22]
   17eb6:	b172      	cbz	r2, 17ed6 <dmConnSmActConnOpened+0xb2>
   17eb8:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
   17ebc:	2a00      	cmp	r2, #0
   17ebe:	d1da      	bne.n	17e76 <dmConnSmActConnOpened+0x52>
   17ec0:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
   17ec4:	2b00      	cmp	r3, #0
   17ec6:	d1d6      	bne.n	17e76 <dmConnSmActConnOpened+0x52>
      dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_START, DM_CONN_OPEN_IND, 0, 0);
   17ec8:	2300      	movs	r3, #0
   17eca:	461a      	mov	r2, r3
   17ecc:	2127      	movs	r1, #39	; 0x27
   17ece:	2014      	movs	r0, #20
   17ed0:	f000 fe8c 	bl	18bec <dmDevPassEvtToDevPriv>
   17ed4:	e7cf      	b.n	17e76 <dmConnSmActConnOpened+0x52>
    if (pCcb->inUse)
   17ed6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
   17eda:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
   17ede:	2a00      	cmp	r2, #0
   17ee0:	d1f0      	bne.n	17ec4 <dmConnSmActConnOpened+0xa0>
   17ee2:	2b00      	cmp	r3, #0
   17ee4:	d1f0      	bne.n	17ec8 <dmConnSmActConnOpened+0xa4>
   17ee6:	e7c6      	b.n	17e76 <dmConnSmActConnOpened+0x52>
   17ee8:	10005b04 	.word	0x10005b04
   17eec:	10005ac0 	.word	0x10005ac0
   17ef0:	10005a30 	.word	0x10005a30

00017ef4 <dmConnSmActConnClosed>:
{
   17ef4:	b570      	push	{r4, r5, r6, lr}
   17ef6:	4604      	mov	r4, r0
   17ef8:	460d      	mov	r5, r1
  dmDevPassEvtToConnCte(DM_CONN_CLOSE_IND, pCcb->connId);
   17efa:	2028      	movs	r0, #40	; 0x28
   17efc:	7c21      	ldrb	r1, [r4, #16]
   17efe:	f000 fe95 	bl	18c2c <dmDevPassEvtToConnCte>
  DM_TRACE_FREE1("dmConnCcbDealloc %d", pCcb->connId);
   17f02:	7c21      	ldrb	r1, [r4, #16]
   17f04:	4812      	ldr	r0, [pc, #72]	; (17f50 <dmConnSmActConnClosed+0x5c>)
   17f06:	f7fc f805 	bl	13f14 <WsfTrace>
  if ((pCcb->role == DM_ROLE_MASTER) && (dmConnNum() == 0))
   17f0a:	7e63      	ldrb	r3, [r4, #25]
  pCcb->inUse = FALSE;
   17f0c:	2200      	movs	r2, #0
   17f0e:	75a2      	strb	r2, [r4, #22]
  if ((pCcb->role == DM_ROLE_MASTER) && (dmConnNum() == 0))
   17f10:	b913      	cbnz	r3, 17f18 <dmConnSmActConnClosed+0x24>
    if (pCcb->inUse)
   17f12:	4b10      	ldr	r3, [pc, #64]	; (17f54 <dmConnSmActConnClosed+0x60>)
   17f14:	7d9a      	ldrb	r2, [r3, #22]
   17f16:	b162      	cbz	r2, 17f32 <dmConnSmActConnClosed+0x3e>
  pMsg->hdr.event = DM_CONN_CLOSE_IND;
   17f18:	4c0f      	ldr	r4, [pc, #60]	; (17f58 <dmConnSmActConnClosed+0x64>)
   17f1a:	2328      	movs	r3, #40	; 0x28
   17f1c:	70ab      	strb	r3, [r5, #2]
  for (i = 0; i < DM_CLIENT_ID_MAX; i++)
   17f1e:	f104 0614 	add.w	r6, r4, #20
    if (dmConnCb.connCback[i] != NULL)
   17f22:	f854 3b04 	ldr.w	r3, [r4], #4
      (*dmConnCb.connCback[i])((dmEvt_t *) pMsg);
   17f26:	4628      	mov	r0, r5
    if (dmConnCb.connCback[i] != NULL)
   17f28:	b103      	cbz	r3, 17f2c <dmConnSmActConnClosed+0x38>
      (*dmConnCb.connCback[i])((dmEvt_t *) pMsg);
   17f2a:	4798      	blx	r3
  for (i = 0; i < DM_CLIENT_ID_MAX; i++)
   17f2c:	42b4      	cmp	r4, r6
   17f2e:	d1f8      	bne.n	17f22 <dmConnSmActConnClosed+0x2e>
}
   17f30:	bd70      	pop	{r4, r5, r6, pc}
    if (pCcb->inUse)
   17f32:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
   17f36:	2a00      	cmp	r2, #0
   17f38:	d1ee      	bne.n	17f18 <dmConnSmActConnClosed+0x24>
   17f3a:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
   17f3e:	2b00      	cmp	r3, #0
   17f40:	d1ea      	bne.n	17f18 <dmConnSmActConnClosed+0x24>
    dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_CONN_CLOSE_IND, 0, 0);
   17f42:	461a      	mov	r2, r3
   17f44:	2128      	movs	r1, #40	; 0x28
   17f46:	2015      	movs	r0, #21
   17f48:	f000 fe50 	bl	18bec <dmDevPassEvtToDevPriv>
   17f4c:	e7e4      	b.n	17f18 <dmConnSmActConnClosed+0x24>
   17f4e:	bf00      	nop
   17f50:	00024a9c 	.word	0x00024a9c
   17f54:	10005a30 	.word	0x10005a30
   17f58:	10005ac0 	.word	0x10005ac0

00017f5c <dmConnMsgHandler>:
void dmConnMsgHandler(wsfMsgHdr_t *pMsg)
{
  dmConnCcb_t *pCcb;

  /* look up ccb from conn id */
  if ((pCcb = dmConnCcbById((dmConnId_t) pMsg->param)) != NULL)
   17f5c:	8803      	ldrh	r3, [r0, #0]
{
   17f5e:	b410      	push	{r4}
  connId--;
   17f60:	3b01      	subs	r3, #1
  if (dmConnCb.ccb[connId].inUse)
   17f62:	4c0a      	ldr	r4, [pc, #40]	; (17f8c <dmConnMsgHandler+0x30>)
  connId--;
   17f64:	b2db      	uxtb	r3, r3
  if (dmConnCb.ccb[connId].inUse)
   17f66:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   17f6a:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   17f6e:	7d92      	ldrb	r2, [r2, #22]
   17f70:	b142      	cbz	r2, 17f84 <dmConnMsgHandler+0x28>
    return &dmConnCb.ccb[connId];
   17f72:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   17f76:	4601      	mov	r1, r0
  {
    /* execute state machine */
    dmConnSmExecute(pCcb, (dmConnMsg_t *) pMsg);
   17f78:	eb04 1003 	add.w	r0, r4, r3, lsl #4
  }
}
   17f7c:	f85d 4b04 	ldr.w	r4, [sp], #4
    dmConnSmExecute(pCcb, (dmConnMsg_t *) pMsg);
   17f80:	f000 bdcc 	b.w	18b1c <dmConnSmExecute>
}
   17f84:	f85d 4b04 	ldr.w	r4, [sp], #4
   17f88:	4770      	bx	lr
   17f8a:	bf00      	nop
   17f8c:	10005a30 	.word	0x10005a30

00017f90 <dmConn2MsgHandler>:
void dmConn2MsgHandler(wsfMsgHdr_t *pMsg)
{
  dmConnCcb_t *pCcb;

  /* look up ccb from conn id */
  if ((pCcb = dmConnCcbById((dmConnId_t) pMsg->param)) != NULL)
   17f90:	8803      	ldrh	r3, [r0, #0]
{
   17f92:	b530      	push	{r4, r5, lr}
  connId--;
   17f94:	3b01      	subs	r3, #1
  if (dmConnCb.ccb[connId].inUse)
   17f96:	4c26      	ldr	r4, [pc, #152]	; (18030 <dmConn2MsgHandler+0xa0>)
   17f98:	b2db      	uxtb	r3, r3
   17f9a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   17f9e:	eb04 1202 	add.w	r2, r4, r2, lsl #4
{
   17fa2:	b085      	sub	sp, #20
  if (dmConnCb.ccb[connId].inUse)
   17fa4:	7d92      	ldrb	r2, [r2, #22]
   17fa6:	b1ca      	cbz	r2, 17fdc <dmConn2MsgHandler+0x4c>
   17fa8:	4601      	mov	r1, r0
   17faa:	0058      	lsls	r0, r3, #1
  {
    dmConn2Msg_t *pConn2Msg = (dmConn2Msg_t *) pMsg;

    /* handle incoming message */
    switch (pMsg->event)
   17fac:	788a      	ldrb	r2, [r1, #2]
   17fae:	3a41      	subs	r2, #65	; 0x41
   17fb0:	2a04      	cmp	r2, #4
   17fb2:	d813      	bhi.n	17fdc <dmConn2MsgHandler+0x4c>
   17fb4:	e8df f002 	tbb	[pc, r2]
   17fb8:	3127031e 	.word	0x3127031e
   17fbc:	14          	.byte	0x14
   17fbd:	00          	.byte	0x00

      case DM_CONN_MSG_API_REM_CONN_PARAM_REQ_REPLY:
        {
          hciConnSpec_t *pConnSpec = &pConn2Msg->apiRemConnParamReqReply.connSpec;

          HciLeRemoteConnParamReqReply(pCcb->handle, pConnSpec->connIntervalMin,
   17fbe:	4403      	add	r3, r0
   17fc0:	898a      	ldrh	r2, [r1, #12]
   17fc2:	89cd      	ldrh	r5, [r1, #14]
   17fc4:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   17fc8:	894c      	ldrh	r4, [r1, #10]
   17fca:	8998      	ldrh	r0, [r3, #12]
   17fcc:	e9cd 2501 	strd	r2, r5, [sp, #4]
   17fd0:	890b      	ldrh	r3, [r1, #8]
   17fd2:	88ca      	ldrh	r2, [r1, #6]
   17fd4:	8889      	ldrh	r1, [r1, #4]
   17fd6:	9400      	str	r4, [sp, #0]
   17fd8:	f7f8 fe5a 	bl	10c90 <HciLeRemoteConnParamReqReply>
      default:
        /* should never get here */
        break;
    }
  }
}
   17fdc:	b005      	add	sp, #20
   17fde:	bd30      	pop	{r4, r5, pc}
        HciWriteAuthPayloadTimeout(pCcb->handle, pConn2Msg->apiWriteAuthPayloadTo.timeout);
   17fe0:	4418      	add	r0, r3
   17fe2:	eb04 1300 	add.w	r3, r4, r0, lsl #4
   17fe6:	8889      	ldrh	r1, [r1, #4]
   17fe8:	8998      	ldrh	r0, [r3, #12]
}
   17fea:	b005      	add	sp, #20
   17fec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        HciWriteAuthPayloadTimeout(pCcb->handle, pConn2Msg->apiWriteAuthPayloadTo.timeout);
   17ff0:	f7f9 bc5c 	b.w	118ac <HciWriteAuthPayloadTimeout>
        HciReadRssiCmd(pCcb->handle);
   17ff4:	4403      	add	r3, r0
   17ff6:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   17ffa:	8998      	ldrh	r0, [r3, #12]
}
   17ffc:	b005      	add	sp, #20
   17ffe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        HciReadRssiCmd(pCcb->handle);
   18002:	f7f9 bb65 	b.w	116d0 <HciReadRssiCmd>
        HciLeRemoteConnParamReqNegReply(pCcb->handle, pConn2Msg->apiRemConnParamReqNegReply.reason);
   18006:	4403      	add	r3, r0
   18008:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   1800c:	7909      	ldrb	r1, [r1, #4]
   1800e:	8998      	ldrh	r0, [r3, #12]
}
   18010:	b005      	add	sp, #20
   18012:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        HciLeRemoteConnParamReqNegReply(pCcb->handle, pConn2Msg->apiRemConnParamReqNegReply.reason);
   18016:	f7f8 be97 	b.w	10d48 <HciLeRemoteConnParamReqNegReply>
          HciLeSetDataLen(pCcb->handle, pDataLen->txOctets, pDataLen->txTime);
   1801a:	4403      	add	r3, r0
   1801c:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   18020:	88ca      	ldrh	r2, [r1, #6]
   18022:	8998      	ldrh	r0, [r3, #12]
   18024:	8889      	ldrh	r1, [r1, #4]
}
   18026:	b005      	add	sp, #20
   18028:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
          HciLeSetDataLen(pCcb->handle, pDataLen->txOctets, pDataLen->txTime);
   1802c:	f7f8 bec4 	b.w	10db8 <HciLeSetDataLen>
   18030:	10005a30 	.word	0x10005a30

00018034 <dmConn2HciHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConn2HciHandler(hciEvt_t *pEvent)
{
   18034:	b510      	push	{r4, lr}
    if (pCcb->inUse && (pCcb->handle == handle))
   18036:	4c66      	ldr	r4, [pc, #408]	; (181d0 <dmConn2HciHandler+0x19c>)
  dmConnCcb_t *pCcb;

  /* look up ccb from conn handle */
  if ((pCcb = dmConnCcbByHandle(pEvent->hdr.param)) != NULL)
   18038:	8801      	ldrh	r1, [r0, #0]
    if (pCcb->inUse && (pCcb->handle == handle))
   1803a:	7da2      	ldrb	r2, [r4, #22]
{
   1803c:	b084      	sub	sp, #16
   1803e:	4603      	mov	r3, r0
    if (pCcb->inUse && (pCcb->handle == handle))
   18040:	b112      	cbz	r2, 18048 <dmConn2HciHandler+0x14>
   18042:	89a0      	ldrh	r0, [r4, #12]
   18044:	4281      	cmp	r1, r0
   18046:	d014      	beq.n	18072 <dmConn2HciHandler+0x3e>
   18048:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
   1804c:	b11a      	cbz	r2, 18056 <dmConn2HciHandler+0x22>
   1804e:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
   18050:	4281      	cmp	r1, r0
   18052:	f000 80b9 	beq.w	181c8 <dmConn2HciHandler+0x194>
   18056:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
   1805a:	b122      	cbz	r2, 18066 <dmConn2HciHandler+0x32>
   1805c:	f8b4 006c 	ldrh.w	r0, [r4, #108]	; 0x6c
   18060:	4281      	cmp	r1, r0
   18062:	f000 80b3 	beq.w	181cc <dmConn2HciHandler+0x198>
  DM_TRACE_WARN1("dmConnCcbByHandle not found 0x%04x", handle);
   18066:	485b      	ldr	r0, [pc, #364]	; (181d4 <dmConn2HciHandler+0x1a0>)
      default:
        /* should never get here */
        break;
    }
  }
}
   18068:	b004      	add	sp, #16
   1806a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  DM_TRACE_WARN1("dmConnCcbByHandle not found 0x%04x", handle);
   1806e:	f7fb bf51 	b.w	13f14 <WsfTrace>
  dmConnCcb_t   *pCcb = dmConnCb.ccb;
   18072:	4621      	mov	r1, r4
    switch (pEvent->hdr.event)
   18074:	789a      	ldrb	r2, [r3, #2]
   18076:	3a07      	subs	r2, #7
   18078:	2a21      	cmp	r2, #33	; 0x21
   1807a:	d82b      	bhi.n	180d4 <dmConn2HciHandler+0xa0>
   1807c:	e8df f002 	tbb	[pc, r2]
   18080:	752a2a8e 	.word	0x752a2a8e
   18084:	2a2a2a51 	.word	0x2a2a2a51
   18088:	2a2a2a2a 	.word	0x2a2a2a2a
   1808c:	2a2a2a2a 	.word	0x2a2a2a2a
   18090:	2a2a2a2a 	.word	0x2a2a2a2a
   18094:	2a2a2a2a 	.word	0x2a2a2a2a
   18098:	2a2a2a2a 	.word	0x2a2a2a2a
   1809c:	2a2a114c 	.word	0x2a2a114c
   180a0:	2c3a      	.short	0x2c3a
{
  hciLeDataLenChangeEvt_t evt;

  /* call callback */
  evt.hdr.event = DM_CONN_DATA_LEN_CHANGE_IND;
  evt.hdr.param = pCcb->connId;
   180a2:	7c09      	ldrb	r1, [r1, #16]
  evt.hdr.status = HCI_SUCCESS;
  evt.handle = pCcb->handle;
  evt.maxTxOctets = pEvent->leDataLenChange.maxTxOctets;
   180a4:	f8b3 c006 	ldrh.w	ip, [r3, #6]
  evt.hdr.event = DM_CONN_DATA_LEN_CHANGE_IND;
   180a8:	2241      	movs	r2, #65	; 0x41
   180aa:	f8ad 2002 	strh.w	r2, [sp, #2]
  evt.hdr.param = pCcb->connId;
   180ae:	f8ad 1000 	strh.w	r1, [sp]
  evt.handle = pCcb->handle;
   180b2:	f8ad 0004 	strh.w	r0, [sp, #4]
  evt.maxTxTime = pEvent->leDataLenChange.maxTxTime;
   180b6:	8918      	ldrh	r0, [r3, #8]
  evt.maxRxOctets = pEvent->leDataLenChange.maxRxOctets;
   180b8:	8959      	ldrh	r1, [r3, #10]
  evt.maxRxTime = pEvent->leDataLenChange.maxRxTime;
   180ba:	899b      	ldrh	r3, [r3, #12]

  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   180bc:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
  evt.maxTxTime = pEvent->leDataLenChange.maxTxTime;
   180c0:	f8ad 0008 	strh.w	r0, [sp, #8]
  evt.maxTxOctets = pEvent->leDataLenChange.maxTxOctets;
   180c4:	f8ad c006 	strh.w	ip, [sp, #6]
  evt.maxRxOctets = pEvent->leDataLenChange.maxRxOctets;
   180c8:	f8ad 100a 	strh.w	r1, [sp, #10]
  evt.maxRxTime = pEvent->leDataLenChange.maxRxTime;
   180cc:	f8ad 300c 	strh.w	r3, [sp, #12]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   180d0:	4668      	mov	r0, sp
   180d2:	4790      	blx	r2
}
   180d4:	b004      	add	sp, #16
   180d6:	bd10      	pop	{r4, pc}
{
  hciAuthPayloadToExpiredEvt_t evt;

  /* call callback */
  evt.hdr.event = DM_CONN_AUTH_TO_EXPIRED_IND;
  evt.hdr.param = pCcb->connId;
   180d8:	7c08      	ldrb	r0, [r1, #16]
  evt.hdr.status = HCI_SUCCESS;
  evt.handle = pEvent->authPayloadToExpired.handle;
   180da:	889a      	ldrh	r2, [r3, #4]
  evt.hdr.param = pCcb->connId;
   180dc:	f8ad 0000 	strh.w	r0, [sp]
  evt.hdr.event = DM_CONN_AUTH_TO_EXPIRED_IND;
   180e0:	2143      	movs	r1, #67	; 0x43

  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   180e2:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  evt.hdr.event = DM_CONN_AUTH_TO_EXPIRED_IND;
   180e6:	f8ad 1002 	strh.w	r1, [sp, #2]
  evt.handle = pEvent->authPayloadToExpired.handle;
   180ea:	f8ad 2004 	strh.w	r2, [sp, #4]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   180ee:	4668      	mov	r0, sp
   180f0:	4798      	blx	r3
}
   180f2:	e7ef      	b.n	180d4 <dmConn2HciHandler+0xa0>
  evt.hdr.param = pCcb->connId;
   180f4:	f891 c010 	ldrb.w	ip, [r1, #16]
  evt.status = pEvent->writeAuthPayloadToCmdCmpl.status;
   180f8:	791a      	ldrb	r2, [r3, #4]
  evt.handle = pEvent->writeAuthPayloadToCmdCmpl.handle;
   180fa:	88d9      	ldrh	r1, [r3, #6]
  evt.hdr.param = pCcb->connId;
   180fc:	f8ad c000 	strh.w	ip, [sp]
  evt.hdr.event = DM_CONN_WRITE_AUTH_TO_IND;
   18100:	2042      	movs	r0, #66	; 0x42
   18102:	f8ad 0002 	strh.w	r0, [sp, #2]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   18106:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  evt.handle = pEvent->writeAuthPayloadToCmdCmpl.handle;
   1810a:	f8ad 1006 	strh.w	r1, [sp, #6]
  evt.status = pEvent->writeAuthPayloadToCmdCmpl.status;
   1810e:	f88d 2004 	strb.w	r2, [sp, #4]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   18112:	4668      	mov	r0, sp
   18114:	4798      	blx	r3
}
   18116:	e7dd      	b.n	180d4 <dmConn2HciHandler+0xa0>
  evt.hdr.param = pCcb->connId;
   18118:	7c09      	ldrb	r1, [r1, #16]
  evt.intervalMin = pEvent->leRemConnParamReq.intervalMin;
   1811a:	f8b3 c006 	ldrh.w	ip, [r3, #6]
  evt.hdr.event = DM_REM_CONN_PARAM_REQ_IND;
   1811e:	2240      	movs	r2, #64	; 0x40
   18120:	e7c3      	b.n	180aa <dmConn2HciHandler+0x76>
static void dmConn2ActReadRemoteFeaturesCmpl(dmConnCcb_t *pCcb, hciEvt_t *pEvent)
{
  hciLeReadRemoteFeatCmplEvt_t evt;

  /* Save the features */
  BYTES_TO_UINT32(pCcb->features, pEvent->leReadRemoteFeatCmpl.features);
   18122:	7a9a      	ldrb	r2, [r3, #10]
   18124:	7a58      	ldrb	r0, [r3, #9]
   18126:	0412      	lsls	r2, r2, #16
   18128:	eb02 2200 	add.w	r2, r2, r0, lsl #8
   1812c:	7a18      	ldrb	r0, [r3, #8]
   1812e:	4402      	add	r2, r0
   18130:	7ad8      	ldrb	r0, [r3, #11]
   18132:	eb02 6200 	add.w	r2, r2, r0, lsl #24
  pCcb->featuresPresent = TRUE;
   18136:	2001      	movs	r0, #1
   18138:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
  BYTES_TO_UINT32(pCcb->features, pEvent->leReadRemoteFeatCmpl.features);
   1813c:	628a      	str	r2, [r1, #40]	; 0x28

  /* call callback */
  evt.hdr.event = DM_REMOTE_FEATURES_IND;
  evt.hdr.param = pCcb->connId;
   1813e:	7c0a      	ldrb	r2, [r1, #16]
  evt.hdr.status = HCI_SUCCESS;

  evt.status = pEvent->leReadRemoteFeatCmpl.status;
   18140:	f893 c004 	ldrb.w	ip, [r3, #4]
  evt.handle = pEvent->leReadRemoteFeatCmpl.handle;
  memcpy(evt.features, pEvent->leReadRemoteFeatCmpl.features, sizeof(evt.features));
   18144:	6898      	ldr	r0, [r3, #8]
   18146:	68d9      	ldr	r1, [r3, #12]
  evt.hdr.param = pCcb->connId;
   18148:	f8ad 2000 	strh.w	r2, [sp]
  evt.handle = pEvent->leReadRemoteFeatCmpl.handle;
   1814c:	88da      	ldrh	r2, [r3, #6]
   1814e:	f8ad 2006 	strh.w	r2, [sp, #6]
  evt.hdr.event = DM_REMOTE_FEATURES_IND;
   18152:	2357      	movs	r3, #87	; 0x57
   18154:	f8ad 3002 	strh.w	r3, [sp, #2]
  memcpy(evt.features, pEvent->leReadRemoteFeatCmpl.features, sizeof(evt.features));
   18158:	ab02      	add	r3, sp, #8
  evt.status = pEvent->leReadRemoteFeatCmpl.status;
   1815a:	f88d c004 	strb.w	ip, [sp, #4]

  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   1815e:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
  memcpy(evt.features, pEvent->leReadRemoteFeatCmpl.features, sizeof(evt.features));
   18162:	c303      	stmia	r3!, {r0, r1}
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   18164:	4668      	mov	r0, sp
   18166:	4790      	blx	r2
}
   18168:	e7b4      	b.n	180d4 <dmConn2HciHandler+0xa0>
{
  hciReadRemoteVerInfoCmplEvt_t evt;

  /* call callback */
  evt.hdr.event = DM_READ_REMOTE_VER_INFO_IND;
  evt.hdr.param = pCcb->connId;
   1816a:	f891 c010 	ldrb.w	ip, [r1, #16]
  evt.hdr.status = HCI_SUCCESS;

  evt.status = pEvent->readRemoteVerInfoCmpl.status;
   1816e:	7919      	ldrb	r1, [r3, #4]
  evt.handle = pEvent->readRemoteVerInfoCmpl.handle;
   18170:	88d8      	ldrh	r0, [r3, #6]
  evt.status = pEvent->readRemoteVerInfoCmpl.status;
   18172:	f88d 1004 	strb.w	r1, [sp, #4]
  evt.hdr.event = DM_READ_REMOTE_VER_INFO_IND;
   18176:	2258      	movs	r2, #88	; 0x58
  evt.version = pEvent->readRemoteVerInfoCmpl.version;
   18178:	7a19      	ldrb	r1, [r3, #8]
  evt.mfrName = pEvent->readRemoteVerInfoCmpl.mfrName;
   1817a:	f8d3 300a 	ldr.w	r3, [r3, #10]
  evt.hdr.event = DM_READ_REMOTE_VER_INFO_IND;
   1817e:	f8ad 2002 	strh.w	r2, [sp, #2]
  evt.handle = pEvent->readRemoteVerInfoCmpl.handle;
   18182:	f8ad 0006 	strh.w	r0, [sp, #6]
  evt.subversion = pEvent->readRemoteVerInfoCmpl.subversion;

  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   18186:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
  evt.hdr.param = pCcb->connId;
   1818a:	f8ad c000 	strh.w	ip, [sp]
  evt.version = pEvent->readRemoteVerInfoCmpl.version;
   1818e:	f88d 1008 	strb.w	r1, [sp, #8]
  evt.mfrName = pEvent->readRemoteVerInfoCmpl.mfrName;
   18192:	f8cd 300a 	str.w	r3, [sp, #10]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   18196:	4668      	mov	r0, sp
   18198:	4790      	blx	r2
}
   1819a:	e79b      	b.n	180d4 <dmConn2HciHandler+0xa0>
  evt.hdr.event = DM_CONN_READ_RSSI_IND;
   1819c:	2239      	movs	r2, #57	; 0x39
  evt.hdr.param = pCcb->connId;
   1819e:	f891 c010 	ldrb.w	ip, [r1, #16]
  evt.hdr.event = DM_CONN_READ_RSSI_IND;
   181a2:	f88d 2002 	strb.w	r2, [sp, #2]
  evt.status = evt.hdr.status = (uint8_t) pEvent->readRssiCmdCmpl.status;
   181a6:	791a      	ldrb	r2, [r3, #4]
  evt.rssi = pEvent->readRssiCmdCmpl.rssi;
   181a8:	7a1b      	ldrb	r3, [r3, #8]
  evt.handle = pCcb->handle;
   181aa:	f8ad 0006 	strh.w	r0, [sp, #6]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   181ae:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
  evt.hdr.param = pCcb->connId;
   181b2:	f8ad c000 	strh.w	ip, [sp]
  evt.status = evt.hdr.status = (uint8_t) pEvent->readRssiCmdCmpl.status;
   181b6:	f88d 2003 	strb.w	r2, [sp, #3]
   181ba:	f88d 2004 	strb.w	r2, [sp, #4]
  evt.rssi = pEvent->readRssiCmdCmpl.rssi;
   181be:	f88d 3008 	strb.w	r3, [sp, #8]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   181c2:	4668      	mov	r0, sp
   181c4:	4788      	blx	r1
}
   181c6:	e785      	b.n	180d4 <dmConn2HciHandler+0xa0>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   181c8:	4903      	ldr	r1, [pc, #12]	; (181d8 <dmConn2HciHandler+0x1a4>)
   181ca:	e753      	b.n	18074 <dmConn2HciHandler+0x40>
   181cc:	4903      	ldr	r1, [pc, #12]	; (181dc <dmConn2HciHandler+0x1a8>)
   181ce:	e751      	b.n	18074 <dmConn2HciHandler+0x40>
   181d0:	10005a30 	.word	0x10005a30
   181d4:	00024ab0 	.word	0x00024ab0
   181d8:	10005a60 	.word	0x10005a60
   181dc:	10005a90 	.word	0x10005a90

000181e0 <dmConnHciHandler>:
{
   181e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((pEvent->hdr.event == HCI_LE_CONN_CMPL_CBACK_EVT) ||
   181e2:	7883      	ldrb	r3, [r0, #2]
    if (pCcb->inUse && BdaCmp(pCcb->peerAddr, pAddr))
   181e4:	4d63      	ldr	r5, [pc, #396]	; (18374 <dmConnHciHandler+0x194>)
  if ((pEvent->hdr.event == HCI_LE_CONN_CMPL_CBACK_EVT) ||
   181e6:	1e5a      	subs	r2, r3, #1
   181e8:	2a01      	cmp	r2, #1
{
   181ea:	4604      	mov	r4, r0
  if ((pEvent->hdr.event == HCI_LE_CONN_CMPL_CBACK_EVT) ||
   181ec:	d919      	bls.n	18222 <dmConnHciHandler+0x42>
    if (pCcb->inUse && (pCcb->handle == handle))
   181ee:	7daa      	ldrb	r2, [r5, #22]
    pCcb = dmConnCcbByHandle(pEvent->hdr.param);
   181f0:	8801      	ldrh	r1, [r0, #0]
    if (pCcb->inUse && (pCcb->handle == handle))
   181f2:	b112      	cbz	r2, 181fa <dmConnHciHandler+0x1a>
   181f4:	89aa      	ldrh	r2, [r5, #12]
   181f6:	428a      	cmp	r2, r1
   181f8:	d077      	beq.n	182ea <dmConnHciHandler+0x10a>
   181fa:	f895 2046 	ldrb.w	r2, [r5, #70]	; 0x46
   181fe:	b112      	cbz	r2, 18206 <dmConnHciHandler+0x26>
   18200:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
   18202:	428a      	cmp	r2, r1
   18204:	d070      	beq.n	182e8 <dmConnHciHandler+0x108>
   18206:	f895 2076 	ldrb.w	r2, [r5, #118]	; 0x76
   1820a:	b11a      	cbz	r2, 18214 <dmConnHciHandler+0x34>
   1820c:	f8b5 206c 	ldrh.w	r2, [r5, #108]	; 0x6c
   18210:	428a      	cmp	r2, r1
   18212:	d06d      	beq.n	182f0 <dmConnHciHandler+0x110>
  DM_TRACE_WARN1("dmConnCcbByHandle not found 0x%04x", handle);
   18214:	4858      	ldr	r0, [pc, #352]	; (18378 <dmConnHciHandler+0x198>)
   18216:	f7fb fe7d 	bl	13f14 <WsfTrace>
    pEvent->hdr.event = DM_CONN_HCI_EVT_2_MSG(pEvent->hdr.event);
   1821a:	78a3      	ldrb	r3, [r4, #2]
   1821c:	3336      	adds	r3, #54	; 0x36
   1821e:	70a3      	strb	r3, [r4, #2]
}
   18220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pCcb->inUse && BdaCmp(pCcb->peerAddr, pAddr))
   18222:	7dab      	ldrb	r3, [r5, #22]
    if ((pCcb = dmConnCcbByBdAddr(pEvent->leConnCmpl.peerAddr)) == NULL)
   18224:	f100 060a 	add.w	r6, r0, #10
    if (pCcb->inUse && BdaCmp(pCcb->peerAddr, pAddr))
   18228:	2b00      	cmp	r3, #0
   1822a:	d143      	bne.n	182b4 <dmConnHciHandler+0xd4>
   1822c:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
   18230:	2b00      	cmp	r3, #0
   18232:	d149      	bne.n	182c8 <dmConnHciHandler+0xe8>
   18234:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
   18238:	2b00      	cmp	r3, #0
   1823a:	d14d      	bne.n	182d8 <dmConnHciHandler+0xf8>
  DM_TRACE_INFO0("dmConnIdByBdAddr not found");
   1823c:	484f      	ldr	r0, [pc, #316]	; (1837c <dmConnHciHandler+0x19c>)
   1823e:	f7fb fe69 	bl	13f14 <WsfTrace>
    if (pCcb->inUse &&
   18242:	7dab      	ldrb	r3, [r5, #22]
   18244:	b9d3      	cbnz	r3, 1827c <dmConnHciHandler+0x9c>
   18246:	f895 1046 	ldrb.w	r1, [r5, #70]	; 0x46
   1824a:	b129      	cbz	r1, 18258 <dmConnHciHandler+0x78>
        ((pCcb->state == DM_CONN_SM_ST_ACCEPTING) ||
   1824c:	f895 2045 	ldrb.w	r2, [r5, #69]	; 0x45
    if (pCcb->inUse &&
   18250:	2a02      	cmp	r2, #2
   18252:	d06d      	beq.n	18330 <dmConnHciHandler+0x150>
        ((pCcb->state == DM_CONN_SM_ST_ACCEPTING) ||
   18254:	2a04      	cmp	r2, #4
   18256:	d066      	beq.n	18326 <dmConnHciHandler+0x146>
    if (pCcb->inUse &&
   18258:	f895 2076 	ldrb.w	r2, [r5, #118]	; 0x76
   1825c:	b12a      	cbz	r2, 1826a <dmConnHciHandler+0x8a>
        ((pCcb->state == DM_CONN_SM_ST_ACCEPTING) ||
   1825e:	f895 0075 	ldrb.w	r0, [r5, #117]	; 0x75
    if (pCcb->inUse &&
   18262:	2802      	cmp	r0, #2
   18264:	d05d      	beq.n	18322 <dmConnHciHandler+0x142>
        ((pCcb->state == DM_CONN_SM_ST_ACCEPTING) ||
   18266:	2804      	cmp	r0, #4
   18268:	d055      	beq.n	18316 <dmConnHciHandler+0x136>
        if ((pEvent->hdr.status == HCI_SUCCESS) && (pEvent->leConnCmpl.role == HCI_ROLE_SLAVE))
   1826a:	78e0      	ldrb	r0, [r4, #3]
   1826c:	2800      	cmp	r0, #0
   1826e:	d14c      	bne.n	1830a <dmConnHciHandler+0x12a>
   18270:	7a27      	ldrb	r7, [r4, #8]
   18272:	2f01      	cmp	r7, #1
   18274:	d03e      	beq.n	182f4 <dmConnHciHandler+0x114>
      pEvent->hdr.event =  DM_CONN_MSG_HCI_LE_CONN_CMPL;
   18276:	2338      	movs	r3, #56	; 0x38
   18278:	70a3      	strb	r3, [r4, #2]
}
   1827a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ((pCcb->state == DM_CONN_SM_ST_ACCEPTING) ||
   1827c:	7d6a      	ldrb	r2, [r5, #21]
    if (pCcb->inUse &&
   1827e:	2a02      	cmp	r2, #2
   18280:	d006      	beq.n	18290 <dmConnHciHandler+0xb0>
        ((pCcb->state == DM_CONN_SM_ST_ACCEPTING) ||
   18282:	2a04      	cmp	r2, #4
   18284:	d1df      	bne.n	18246 <dmConnHciHandler+0x66>
         ((pCcb->state == DM_CONN_SM_ST_DISCONNECTING) && (pCcb->handle == DM_CONN_HCI_HANDLE_NONE))))
   18286:	89a9      	ldrh	r1, [r5, #12]
   18288:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1828c:	4291      	cmp	r1, r2
   1828e:	d1da      	bne.n	18246 <dmConnHciHandler+0x66>
  dmConnCcb_t   *pCcb = dmConnCb.ccb;
   18290:	4d38      	ldr	r5, [pc, #224]	; (18374 <dmConnHciHandler+0x194>)
      DM_TRACE_INFO1("dmConnCmplStates %d", pCcb->connId);
   18292:	7c29      	ldrb	r1, [r5, #16]
   18294:	483a      	ldr	r0, [pc, #232]	; (18380 <dmConnHciHandler+0x1a0>)
   18296:	f7fb fe3d 	bl	13f14 <WsfTrace>
    if (pEvent->hdr.status == HCI_SUCCESS)
   1829a:	78e3      	ldrb	r3, [r4, #3]
   1829c:	2b00      	cmp	r3, #0
   1829e:	d137      	bne.n	18310 <dmConnHciHandler+0x130>
      pEvent->hdr.event =  DM_CONN_MSG_HCI_LE_CONN_CMPL;
   182a0:	2338      	movs	r3, #56	; 0x38
   182a2:	70a3      	strb	r3, [r4, #2]
    pEvent->hdr.param = pCcb->connId;
   182a4:	7c2b      	ldrb	r3, [r5, #16]
   182a6:	8023      	strh	r3, [r4, #0]
    dmConnSmExecute(pCcb, (dmConnMsg_t *) pEvent);
   182a8:	4621      	mov	r1, r4
   182aa:	4628      	mov	r0, r5
}
   182ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    dmConnSmExecute(pCcb, (dmConnMsg_t *) pEvent);
   182b0:	f000 bc34 	b.w	18b1c <dmConnSmExecute>
    if (pCcb->inUse && BdaCmp(pCcb->peerAddr, pAddr))
   182b4:	4631      	mov	r1, r6
   182b6:	4628      	mov	r0, r5
   182b8:	f004 f852 	bl	1c360 <BdaCmp>
   182bc:	2800      	cmp	r0, #0
   182be:	d1ec      	bne.n	1829a <dmConnHciHandler+0xba>
   182c0:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
   182c4:	2b00      	cmp	r3, #0
   182c6:	d0b5      	beq.n	18234 <dmConnHciHandler+0x54>
   182c8:	482e      	ldr	r0, [pc, #184]	; (18384 <dmConnHciHandler+0x1a4>)
   182ca:	4631      	mov	r1, r6
   182cc:	f004 f848 	bl	1c360 <BdaCmp>
   182d0:	2800      	cmp	r0, #0
   182d2:	d0af      	beq.n	18234 <dmConnHciHandler+0x54>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   182d4:	4d2b      	ldr	r5, [pc, #172]	; (18384 <dmConnHciHandler+0x1a4>)
   182d6:	e7e0      	b.n	1829a <dmConnHciHandler+0xba>
    if (pCcb->inUse && BdaCmp(pCcb->peerAddr, pAddr))
   182d8:	482b      	ldr	r0, [pc, #172]	; (18388 <dmConnHciHandler+0x1a8>)
   182da:	4631      	mov	r1, r6
   182dc:	f004 f840 	bl	1c360 <BdaCmp>
   182e0:	2800      	cmp	r0, #0
   182e2:	d0ab      	beq.n	1823c <dmConnHciHandler+0x5c>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   182e4:	4d28      	ldr	r5, [pc, #160]	; (18388 <dmConnHciHandler+0x1a8>)
   182e6:	e7d8      	b.n	1829a <dmConnHciHandler+0xba>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   182e8:	4d26      	ldr	r5, [pc, #152]	; (18384 <dmConnHciHandler+0x1a4>)
    pEvent->hdr.event = DM_CONN_HCI_EVT_2_MSG(pEvent->hdr.event);
   182ea:	3336      	adds	r3, #54	; 0x36
   182ec:	70a3      	strb	r3, [r4, #2]
   182ee:	e7d9      	b.n	182a4 <dmConnHciHandler+0xc4>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   182f0:	4d25      	ldr	r5, [pc, #148]	; (18388 <dmConnHciHandler+0x1a8>)
   182f2:	e7fa      	b.n	182ea <dmConnHciHandler+0x10a>
    if (pCcb->inUse == FALSE)
   182f4:	2b00      	cmp	r3, #0
   182f6:	d037      	beq.n	18368 <dmConnHciHandler+0x188>
   182f8:	b1e1      	cbz	r1, 18334 <dmConnHciHandler+0x154>
   182fa:	2a00      	cmp	r2, #0
   182fc:	d037      	beq.n	1836e <dmConnHciHandler+0x18e>
  DM_TRACE_ERR0("dmConnCcbAlloc failed");
   182fe:	4823      	ldr	r0, [pc, #140]	; (1838c <dmConnHciHandler+0x1ac>)
   18300:	f7fb fe08 	bl	13f14 <WsfTrace>
    if (pEvent->hdr.status == HCI_SUCCESS)
   18304:	78e3      	ldrb	r3, [r4, #3]
   18306:	2b00      	cmp	r3, #0
   18308:	d0b5      	beq.n	18276 <dmConnHciHandler+0x96>
      pEvent->hdr.event = DM_CONN_MSG_HCI_LE_CONN_CMPL_FAIL;
   1830a:	2337      	movs	r3, #55	; 0x37
   1830c:	70a3      	strb	r3, [r4, #2]
}
   1830e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pEvent->hdr.event = DM_CONN_MSG_HCI_LE_CONN_CMPL_FAIL;
   18310:	2337      	movs	r3, #55	; 0x37
   18312:	70a3      	strb	r3, [r4, #2]
   18314:	e7c6      	b.n	182a4 <dmConnHciHandler+0xc4>
         ((pCcb->state == DM_CONN_SM_ST_DISCONNECTING) && (pCcb->handle == DM_CONN_HCI_HANDLE_NONE))))
   18316:	f8b5 506c 	ldrh.w	r5, [r5, #108]	; 0x6c
   1831a:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1831e:	4285      	cmp	r5, r0
   18320:	d1a3      	bne.n	1826a <dmConnHciHandler+0x8a>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   18322:	4d19      	ldr	r5, [pc, #100]	; (18388 <dmConnHciHandler+0x1a8>)
   18324:	e7b5      	b.n	18292 <dmConnHciHandler+0xb2>
         ((pCcb->state == DM_CONN_SM_ST_DISCONNECTING) && (pCcb->handle == DM_CONN_HCI_HANDLE_NONE))))
   18326:	8fa8      	ldrh	r0, [r5, #60]	; 0x3c
   18328:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1832c:	4290      	cmp	r0, r2
   1832e:	d193      	bne.n	18258 <dmConnHciHandler+0x78>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   18330:	4d14      	ldr	r5, [pc, #80]	; (18384 <dmConnHciHandler+0x1a4>)
   18332:	e7ae      	b.n	18292 <dmConnHciHandler+0xb2>
  for (i = 0; i < DM_CONN_MAX; i++, pCcb++)
   18334:	4d13      	ldr	r5, [pc, #76]	; (18384 <dmConnHciHandler+0x1a4>)
      memset(pCcb, 0, sizeof(dmConnCcb_t));
   18336:	2230      	movs	r2, #48	; 0x30
   18338:	4628      	mov	r0, r5
   1833a:	2100      	movs	r1, #0
   1833c:	f009 f886 	bl	2144c <memset>
      BdaCpy(pCcb->peerAddr, pAddr);
   18340:	4631      	mov	r1, r6
   18342:	4628      	mov	r0, r5
   18344:	f004 f806 	bl	1c354 <BdaCpy>
      pCcb->updating = FALSE;
   18348:	2300      	movs	r3, #0
      pCcb->connId = i + 1;
   1834a:	1c79      	adds	r1, r7, #1
   1834c:	b2c9      	uxtb	r1, r1
      pCcb->handle = DM_CONN_HCI_HANDLE_NONE;
   1834e:	f64f 72ff 	movw	r2, #65535	; 0xffff
      pCcb->updating = FALSE;
   18352:	746b      	strb	r3, [r5, #17]
      pCcb->featuresPresent = FALSE;
   18354:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
      pCcb->inUse = TRUE;
   18358:	2301      	movs	r3, #1
      DM_TRACE_ALLOC1("dmConnCcbAlloc %d", pCcb->connId);
   1835a:	480d      	ldr	r0, [pc, #52]	; (18390 <dmConnHciHandler+0x1b0>)
      pCcb->handle = DM_CONN_HCI_HANDLE_NONE;
   1835c:	81aa      	strh	r2, [r5, #12]
      pCcb->connId = i + 1;
   1835e:	7429      	strb	r1, [r5, #16]
      pCcb->inUse = TRUE;
   18360:	75ab      	strb	r3, [r5, #22]
      DM_TRACE_ALLOC1("dmConnCcbAlloc %d", pCcb->connId);
   18362:	f7fb fdd7 	bl	13f14 <WsfTrace>
      return pCcb;
   18366:	e798      	b.n	1829a <dmConnHciHandler+0xba>
  dmConnCcb_t   *pCcb = dmConnCb.ccb;
   18368:	4d02      	ldr	r5, [pc, #8]	; (18374 <dmConnHciHandler+0x194>)
  for (i = 0; i < DM_CONN_MAX; i++, pCcb++)
   1836a:	461f      	mov	r7, r3
   1836c:	e7e3      	b.n	18336 <dmConnHciHandler+0x156>
   1836e:	4d06      	ldr	r5, [pc, #24]	; (18388 <dmConnHciHandler+0x1a8>)
   18370:	2702      	movs	r7, #2
   18372:	e7e0      	b.n	18336 <dmConnHciHandler+0x156>
   18374:	10005a30 	.word	0x10005a30
   18378:	00024ab0 	.word	0x00024ab0
   1837c:	00024ad4 	.word	0x00024ad4
   18380:	00024af0 	.word	0x00024af0
   18384:	10005a60 	.word	0x10005a60
   18388:	10005a90 	.word	0x10005a90
   1838c:	00024b18 	.word	0x00024b18
   18390:	00024b04 	.word	0x00024b04

00018394 <dmConnReset>:
{
   18394:	b530      	push	{r4, r5, lr}
    if (pCcb->inUse)
   18396:	4d25      	ldr	r5, [pc, #148]	; (1842c <dmConnReset+0x98>)
{
   18398:	b085      	sub	sp, #20
    if (pCcb->inUse)
   1839a:	7dab      	ldrb	r3, [r5, #22]
  disconnectCmpl.hdr.status = disconnectCmpl.status = HCI_SUCCESS;
   1839c:	2000      	movs	r0, #0
  disconnectCmpl.hdr.event = HCI_DISCONNECT_CMPL_CBACK_EVT;
   1839e:	2103      	movs	r1, #3
  disconnectCmpl.reason = HCI_ERR_LOCAL_TERMINATED;
   183a0:	2216      	movs	r2, #22
  disconnectCmpl.hdr.status = disconnectCmpl.status = HCI_SUCCESS;
   183a2:	f88d 0008 	strb.w	r0, [sp, #8]
  disconnectCmpl.hdr.event = HCI_DISCONNECT_CMPL_CBACK_EVT;
   183a6:	f8ad 1006 	strh.w	r1, [sp, #6]
  disconnectCmpl.reason = HCI_ERR_LOCAL_TERMINATED;
   183aa:	f88d 200c 	strb.w	r2, [sp, #12]
    if (pCcb->inUse)
   183ae:	b9d3      	cbnz	r3, 183e6 <dmConnReset+0x52>
   183b0:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
   183b4:	bb1b      	cbnz	r3, 183fe <dmConnReset+0x6a>
   183b6:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
   183ba:	bb63      	cbnz	r3, 18416 <dmConnReset+0x82>
    dmConnCb.connSpec[i] = dmConnSpecDefaults;
   183bc:	4c1c      	ldr	r4, [pc, #112]	; (18430 <dmConnReset+0x9c>)
   183be:	4b1d      	ldr	r3, [pc, #116]	; (18434 <dmConnReset+0xa0>)
   183c0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   183c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    dmConnCb.scanInterval[i] = DM_GAP_SCAN_FAST_INT_MIN;
   183c8:	f04f 1230 	mov.w	r2, #3145776	; 0x300030
    dmConnCb.scanWindow[i] = DM_GAP_SCAN_FAST_WINDOW;
   183cc:	e9c5 222f 	strd	r2, r2, [r5, #188]	; 0xbc
    dmConnCb.connSpec[i] = dmConnSpecDefaults;
   183d0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   183d4:	330c      	adds	r3, #12
  dmCb.initFiltPolicy = HCI_FILT_NONE;
   183d6:	4c18      	ldr	r4, [pc, #96]	; (18438 <dmConnReset+0xa4>)
    dmConnCb.connSpec[i] = dmConnSpecDefaults;
   183d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  dmCb.initFiltPolicy = HCI_FILT_NONE;
   183dc:	2300      	movs	r3, #0
   183de:	7523      	strb	r3, [r4, #20]
  dmCb.connAddrType = DM_ADDR_PUBLIC;
   183e0:	7363      	strb	r3, [r4, #13]
}
   183e2:	b005      	add	sp, #20
   183e4:	bd30      	pop	{r4, r5, pc}
      disconnectCmpl.hdr.param = disconnectCmpl.handle = pCcb->handle;
   183e6:	89ab      	ldrh	r3, [r5, #12]
   183e8:	f8ad 300a 	strh.w	r3, [sp, #10]
      dmConnHciHandler((hciEvt_t *) &disconnectCmpl);
   183ec:	a801      	add	r0, sp, #4
      disconnectCmpl.hdr.param = disconnectCmpl.handle = pCcb->handle;
   183ee:	f8ad 3004 	strh.w	r3, [sp, #4]
      dmConnHciHandler((hciEvt_t *) &disconnectCmpl);
   183f2:	f7ff fef5 	bl	181e0 <dmConnHciHandler>
    if (pCcb->inUse)
   183f6:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
   183fa:	2b00      	cmp	r3, #0
   183fc:	d0db      	beq.n	183b6 <dmConnReset+0x22>
      disconnectCmpl.hdr.param = disconnectCmpl.handle = pCcb->handle;
   183fe:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
   18400:	f8ad 300a 	strh.w	r3, [sp, #10]
      dmConnHciHandler((hciEvt_t *) &disconnectCmpl);
   18404:	a801      	add	r0, sp, #4
      disconnectCmpl.hdr.param = disconnectCmpl.handle = pCcb->handle;
   18406:	f8ad 3004 	strh.w	r3, [sp, #4]
      dmConnHciHandler((hciEvt_t *) &disconnectCmpl);
   1840a:	f7ff fee9 	bl	181e0 <dmConnHciHandler>
    if (pCcb->inUse)
   1840e:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
   18412:	2b00      	cmp	r3, #0
   18414:	d0d2      	beq.n	183bc <dmConnReset+0x28>
      disconnectCmpl.hdr.param = disconnectCmpl.handle = pCcb->handle;
   18416:	f8b5 306c 	ldrh.w	r3, [r5, #108]	; 0x6c
   1841a:	f8ad 300a 	strh.w	r3, [sp, #10]
      dmConnHciHandler((hciEvt_t *) &disconnectCmpl);
   1841e:	a801      	add	r0, sp, #4
      disconnectCmpl.hdr.param = disconnectCmpl.handle = pCcb->handle;
   18420:	f8ad 3004 	strh.w	r3, [sp, #4]
      dmConnHciHandler((hciEvt_t *) &disconnectCmpl);
   18424:	f7ff fedc 	bl	181e0 <dmConnHciHandler>
   18428:	e7c8      	b.n	183bc <dmConnReset+0x28>
   1842a:	bf00      	nop
   1842c:	10005a30 	.word	0x10005a30
   18430:	00024b7c 	.word	0x00024b7c
   18434:	10005ad4 	.word	0x10005ad4
   18438:	10005b04 	.word	0x10005b04

0001843c <dmConnCcbByHandle>:
{
   1843c:	b508      	push	{r3, lr}
    if (pCcb->inUse && (pCcb->handle == handle))
   1843e:	4b0f      	ldr	r3, [pc, #60]	; (1847c <dmConnCcbByHandle+0x40>)
   18440:	7d9a      	ldrb	r2, [r3, #22]
{
   18442:	4601      	mov	r1, r0
    if (pCcb->inUse && (pCcb->handle == handle))
   18444:	b112      	cbz	r2, 1844c <dmConnCcbByHandle+0x10>
   18446:	899a      	ldrh	r2, [r3, #12]
   18448:	4282      	cmp	r2, r0
   1844a:	d011      	beq.n	18470 <dmConnCcbByHandle+0x34>
   1844c:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
   18450:	b112      	cbz	r2, 18458 <dmConnCcbByHandle+0x1c>
   18452:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
   18454:	428a      	cmp	r2, r1
   18456:	d00d      	beq.n	18474 <dmConnCcbByHandle+0x38>
   18458:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
   1845c:	b11a      	cbz	r2, 18466 <dmConnCcbByHandle+0x2a>
   1845e:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
   18462:	428b      	cmp	r3, r1
   18464:	d008      	beq.n	18478 <dmConnCcbByHandle+0x3c>
  DM_TRACE_WARN1("dmConnCcbByHandle not found 0x%04x", handle);
   18466:	4806      	ldr	r0, [pc, #24]	; (18480 <dmConnCcbByHandle+0x44>)
   18468:	f7fb fd54 	bl	13f14 <WsfTrace>
  return NULL;
   1846c:	2000      	movs	r0, #0
}
   1846e:	bd08      	pop	{r3, pc}
  dmConnCcb_t   *pCcb = dmConnCb.ccb;
   18470:	4618      	mov	r0, r3
}
   18472:	bd08      	pop	{r3, pc}
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   18474:	4803      	ldr	r0, [pc, #12]	; (18484 <dmConnCcbByHandle+0x48>)
}
   18476:	bd08      	pop	{r3, pc}
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   18478:	4803      	ldr	r0, [pc, #12]	; (18488 <dmConnCcbByHandle+0x4c>)
}
   1847a:	bd08      	pop	{r3, pc}
   1847c:	10005a30 	.word	0x10005a30
   18480:	00024ab0 	.word	0x00024ab0
   18484:	10005a60 	.word	0x10005a60
   18488:	10005a90 	.word	0x10005a90

0001848c <dmConnCcbById>:
  connId--;
   1848c:	3801      	subs	r0, #1
   1848e:	b2c3      	uxtb	r3, r0
  if (dmConnCb.ccb[connId].inUse)
   18490:	4904      	ldr	r1, [pc, #16]	; (184a4 <dmConnCcbById+0x18>)
   18492:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   18496:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   1849a:	7d90      	ldrb	r0, [r2, #22]
   1849c:	b100      	cbz	r0, 184a0 <dmConnCcbById+0x14>
    return &dmConnCb.ccb[connId];
   1849e:	4610      	mov	r0, r2
}
   184a0:	4770      	bx	lr
   184a2:	bf00      	nop
   184a4:	10005a30 	.word	0x10005a30

000184a8 <dmConnOpenAccept>:
{
   184a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (pCcb->inUse && BdaCmp(pCcb->peerAddr, pAddr))
   184ac:	4c52      	ldr	r4, [pc, #328]	; (185f8 <dmConnOpenAccept+0x150>)
{
   184ae:	b085      	sub	sp, #20
   184b0:	461e      	mov	r6, r3
   184b2:	e9cd 0101 	strd	r0, r1, [sp, #4]
   184b6:	f8bd 9038 	ldrh.w	r9, [sp, #56]	; 0x38
   184ba:	f89d a03c 	ldrb.w	sl, [sp, #60]	; 0x3c
   184be:	f89d b040 	ldrb.w	fp, [sp, #64]	; 0x40
   184c2:	9f11      	ldr	r7, [sp, #68]	; 0x44
   184c4:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
   184c8:	9203      	str	r2, [sp, #12]
  WsfTaskLock();
   184ca:	f7fb f9e5 	bl	13898 <WsfTaskLock>
    if (pCcb->inUse && BdaCmp(pCcb->peerAddr, pAddr))
   184ce:	7da3      	ldrb	r3, [r4, #22]
   184d0:	b9f3      	cbnz	r3, 18510 <dmConnOpenAccept+0x68>
   184d2:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   184d6:	2b00      	cmp	r3, #0
   184d8:	d151      	bne.n	1857e <dmConnOpenAccept+0xd6>
   184da:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
   184de:	2b00      	cmp	r3, #0
   184e0:	d155      	bne.n	1858e <dmConnOpenAccept+0xe6>
  DM_TRACE_INFO0("dmConnIdByBdAddr not found");
   184e2:	4846      	ldr	r0, [pc, #280]	; (185fc <dmConnOpenAccept+0x154>)
   184e4:	f7fb fd16 	bl	13f14 <WsfTrace>
    if (pCcb->inUse == FALSE)
   184e8:	7da5      	ldrb	r5, [r4, #22]
   184ea:	2d00      	cmp	r5, #0
   184ec:	d064      	beq.n	185b8 <dmConnOpenAccept+0x110>
   184ee:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   184f2:	2b00      	cmp	r3, #0
   184f4:	d07a      	beq.n	185ec <dmConnOpenAccept+0x144>
   184f6:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
   184fa:	2b00      	cmp	r3, #0
   184fc:	d079      	beq.n	185f2 <dmConnOpenAccept+0x14a>
  DM_TRACE_ERR0("dmConnCcbAlloc failed");
   184fe:	4840      	ldr	r0, [pc, #256]	; (18600 <dmConnOpenAccept+0x158>)
   18500:	f7fb fd08 	bl	13f14 <WsfTrace>
  WsfTaskUnlock();
   18504:	f7fb f9d2 	bl	138ac <WsfTaskUnlock>
  return DM_CONN_ID_NONE;
   18508:	2000      	movs	r0, #0
}
   1850a:	b005      	add	sp, #20
   1850c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pCcb->inUse && BdaCmp(pCcb->peerAddr, pAddr))
   18510:	4639      	mov	r1, r7
   18512:	4620      	mov	r0, r4
   18514:	f003 ff24 	bl	1c360 <BdaCmp>
   18518:	2800      	cmp	r0, #0
   1851a:	d0da      	beq.n	184d2 <dmConnOpenAccept+0x2a>
  WsfTaskUnlock();
   1851c:	f7fb f9c6 	bl	138ac <WsfTaskUnlock>
    if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiOpen_t))) != NULL)
   18520:	2014      	movs	r0, #20
   18522:	f7fb f977 	bl	13814 <WsfMsgAlloc>
   18526:	4605      	mov	r5, r0
   18528:	2800      	cmp	r0, #0
   1852a:	d038      	beq.n	1859e <dmConnOpenAccept+0xf6>
      pMsg->hdr.param = pCcb->connId;
   1852c:	7c22      	ldrb	r2, [r4, #16]
      pMsg->initPhys = initPhys;
   1852e:	9b02      	ldr	r3, [sp, #8]
      pMsg->hdr.param = pCcb->connId;
   18530:	802a      	strh	r2, [r5, #0]
      pMsg->hdr.event = (role == DM_ROLE_MASTER) ?
   18532:	f1b8 0f00 	cmp.w	r8, #0
   18536:	bf0c      	ite	eq
   18538:	2230      	moveq	r2, #48	; 0x30
   1853a:	2232      	movne	r2, #50	; 0x32
      pMsg->initPhys = initPhys;
   1853c:	712b      	strb	r3, [r5, #4]
      pMsg->advHandle = advHandle;
   1853e:	9b03      	ldr	r3, [sp, #12]
   18540:	716b      	strb	r3, [r5, #5]
      BdaCpy(pMsg->peerAddr, pAddr);
   18542:	4639      	mov	r1, r7
      pMsg->hdr.event = (role == DM_ROLE_MASTER) ?
   18544:	70aa      	strb	r2, [r5, #2]
      BdaCpy(pMsg->peerAddr, pAddr);
   18546:	f105 000b 	add.w	r0, r5, #11
      pMsg->advType = advType;
   1854a:	71ae      	strb	r6, [r5, #6]
      pMsg->duration = duration;
   1854c:	f8a5 9008 	strh.w	r9, [r5, #8]
      pMsg->maxEaEvents = maxEaEvents;
   18550:	f885 a00a 	strb.w	sl, [r5, #10]
      BdaCpy(pMsg->peerAddr, pAddr);
   18554:	f003 fefe 	bl	1c354 <BdaCpy>
      WsfMsgSend(dmCb.handlerId, pMsg);
   18558:	4a2a      	ldr	r2, [pc, #168]	; (18604 <dmConnOpenAccept+0x15c>)
      pMsg->clientId = clientId;
   1855a:	9b01      	ldr	r3, [sp, #4]
      WsfMsgSend(dmCb.handlerId, pMsg);
   1855c:	7b10      	ldrb	r0, [r2, #12]
      pMsg->clientId = clientId;
   1855e:	74ab      	strb	r3, [r5, #18]
      WsfMsgSend(dmCb.handlerId, pMsg);
   18560:	4629      	mov	r1, r5
      pMsg->addrType = addrType;
   18562:	f885 b011 	strb.w	fp, [r5, #17]
      WsfMsgSend(dmCb.handlerId, pMsg);
   18566:	f7fb f961 	bl	1382c <WsfMsgSend>
      WsfTaskLock();
   1856a:	f7fb f995 	bl	13898 <WsfTaskLock>
      pCcb->role = role;
   1856e:	f884 8019 	strb.w	r8, [r4, #25]
      WsfTaskUnlock();
   18572:	f7fb f99b 	bl	138ac <WsfTaskUnlock>
      return pCcb->connId;
   18576:	7c20      	ldrb	r0, [r4, #16]
}
   18578:	b005      	add	sp, #20
   1857a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pCcb->inUse && BdaCmp(pCcb->peerAddr, pAddr))
   1857e:	4822      	ldr	r0, [pc, #136]	; (18608 <dmConnOpenAccept+0x160>)
   18580:	4639      	mov	r1, r7
   18582:	f003 feed 	bl	1c360 <BdaCmp>
   18586:	2800      	cmp	r0, #0
   18588:	d0a7      	beq.n	184da <dmConnOpenAccept+0x32>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   1858a:	4c1f      	ldr	r4, [pc, #124]	; (18608 <dmConnOpenAccept+0x160>)
   1858c:	e7c6      	b.n	1851c <dmConnOpenAccept+0x74>
    if (pCcb->inUse && BdaCmp(pCcb->peerAddr, pAddr))
   1858e:	481f      	ldr	r0, [pc, #124]	; (1860c <dmConnOpenAccept+0x164>)
   18590:	4639      	mov	r1, r7
   18592:	f003 fee5 	bl	1c360 <BdaCmp>
   18596:	2800      	cmp	r0, #0
   18598:	d0a3      	beq.n	184e2 <dmConnOpenAccept+0x3a>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   1859a:	4c1c      	ldr	r4, [pc, #112]	; (1860c <dmConnOpenAccept+0x164>)
   1859c:	e7be      	b.n	1851c <dmConnOpenAccept+0x74>
      WsfTaskLock();
   1859e:	f7fb f97b 	bl	13898 <WsfTaskLock>
  DM_TRACE_FREE1("dmConnCcbDealloc %d", pCcb->connId);
   185a2:	7c21      	ldrb	r1, [r4, #16]
   185a4:	481a      	ldr	r0, [pc, #104]	; (18610 <dmConnOpenAccept+0x168>)
   185a6:	f7fb fcb5 	bl	13f14 <WsfTrace>
  pCcb->inUse = FALSE;
   185aa:	75a5      	strb	r5, [r4, #22]
      WsfTaskUnlock();
   185ac:	f7fb f97e 	bl	138ac <WsfTaskUnlock>
  return DM_CONN_ID_NONE;
   185b0:	4628      	mov	r0, r5
}
   185b2:	b005      	add	sp, #20
   185b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  dmConnCcb_t   *pCcb = dmConnCb.ccb;
   185b8:	4c0f      	ldr	r4, [pc, #60]	; (185f8 <dmConnOpenAccept+0x150>)
      memset(pCcb, 0, sizeof(dmConnCcb_t));
   185ba:	2230      	movs	r2, #48	; 0x30
   185bc:	4620      	mov	r0, r4
   185be:	2100      	movs	r1, #0
   185c0:	f008 ff44 	bl	2144c <memset>
      BdaCpy(pCcb->peerAddr, pAddr);
   185c4:	4639      	mov	r1, r7
   185c6:	4620      	mov	r0, r4
   185c8:	f003 fec4 	bl	1c354 <BdaCpy>
      pCcb->connId = i + 1;
   185cc:	1c6b      	adds	r3, r5, #1
   185ce:	b2d9      	uxtb	r1, r3
      pCcb->updating = FALSE;
   185d0:	2300      	movs	r3, #0
   185d2:	7463      	strb	r3, [r4, #17]
      pCcb->featuresPresent = FALSE;
   185d4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
      pCcb->handle = DM_CONN_HCI_HANDLE_NONE;
   185d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   185dc:	81a3      	strh	r3, [r4, #12]
      DM_TRACE_ALLOC1("dmConnCcbAlloc %d", pCcb->connId);
   185de:	480d      	ldr	r0, [pc, #52]	; (18614 <dmConnOpenAccept+0x16c>)
      pCcb->connId = i + 1;
   185e0:	7421      	strb	r1, [r4, #16]
      pCcb->inUse = TRUE;
   185e2:	2301      	movs	r3, #1
   185e4:	75a3      	strb	r3, [r4, #22]
      DM_TRACE_ALLOC1("dmConnCcbAlloc %d", pCcb->connId);
   185e6:	f7fb fc95 	bl	13f14 <WsfTrace>
      return pCcb;
   185ea:	e797      	b.n	1851c <dmConnOpenAccept+0x74>
  for (i = 0; i < DM_CONN_MAX; i++, pCcb++)
   185ec:	4c06      	ldr	r4, [pc, #24]	; (18608 <dmConnOpenAccept+0x160>)
   185ee:	2501      	movs	r5, #1
   185f0:	e7e3      	b.n	185ba <dmConnOpenAccept+0x112>
   185f2:	4c06      	ldr	r4, [pc, #24]	; (1860c <dmConnOpenAccept+0x164>)
   185f4:	2502      	movs	r5, #2
   185f6:	e7e0      	b.n	185ba <dmConnOpenAccept+0x112>
   185f8:	10005a30 	.word	0x10005a30
   185fc:	00024ad4 	.word	0x00024ad4
   18600:	00024b18 	.word	0x00024b18
   18604:	10005b04 	.word	0x10005b04
   18608:	10005a60 	.word	0x10005a60
   1860c:	10005a90 	.word	0x10005a90
   18610:	00024a9c 	.word	0x00024a9c
   18614:	00024b04 	.word	0x00024b04

00018618 <DmConnInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmConnInit(void)
{
   18618:	b410      	push	{r4}
  dmFcnIfTbl[DM_ID_CONN] = (dmFcnIf_t *) &dmConnFcnIf;
   1861a:	4b05      	ldr	r3, [pc, #20]	; (18630 <DmConnInit+0x18>)
   1861c:	4c05      	ldr	r4, [pc, #20]	; (18634 <DmConnInit+0x1c>)
  dmFcnIfTbl[DM_ID_CONN_2] = (dmFcnIf_t *) &dmConn2FcnIf;
  dmConnActSet[DM_CONN_ACT_SET_MAIN] = (dmConnAct_t *) dmConnActSetMain;
   1861e:	4a06      	ldr	r2, [pc, #24]	; (18638 <DmConnInit+0x20>)
  dmFcnIfTbl[DM_ID_CONN_2] = (dmFcnIf_t *) &dmConn2FcnIf;
   18620:	4806      	ldr	r0, [pc, #24]	; (1863c <DmConnInit+0x24>)
  dmConnActSet[DM_CONN_ACT_SET_MAIN] = (dmConnAct_t *) dmConnActSetMain;
   18622:	4907      	ldr	r1, [pc, #28]	; (18640 <DmConnInit+0x28>)
   18624:	6011      	str	r1, [r2, #0]
  dmFcnIfTbl[DM_ID_CONN_2] = (dmFcnIf_t *) &dmConn2FcnIf;
   18626:	e9c3 4003 	strd	r4, r0, [r3, #12]
}
   1862a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1862e:	4770      	bx	lr
   18630:	10002b98 	.word	0x10002b98
   18634:	00024b70 	.word	0x00024b70
   18638:	10005af4 	.word	0x10005af4
   1863c:	00024b4c 	.word	0x00024b4c
   18640:	00024b58 	.word	0x00024b58

00018644 <DmConnRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmConnRegister(uint8_t clientId, dmCback_t cback)
{
   18644:	b538      	push	{r3, r4, r5, lr}
   18646:	4604      	mov	r4, r0
   18648:	460d      	mov	r5, r1
  WSF_ASSERT(clientId < DM_CLIENT_ID_MAX);

  /* store callback */
  WsfTaskLock();
  dmConnCb.connCback[clientId] = cback;
   1864a:	3424      	adds	r4, #36	; 0x24
  WsfTaskLock();
   1864c:	f7fb f924 	bl	13898 <WsfTaskLock>
  dmConnCb.connCback[clientId] = cback;
   18650:	4b03      	ldr	r3, [pc, #12]	; (18660 <DmConnRegister+0x1c>)
   18652:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
  WsfTaskUnlock();
}
   18656:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WsfTaskUnlock();
   1865a:	f7fb b927 	b.w	138ac <WsfTaskUnlock>
   1865e:	bf00      	nop
   18660:	10005a30 	.word	0x10005a30

00018664 <DmConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmConnClose(uint8_t clientId, dmConnId_t connId, uint8_t reason)
{
   18664:	b570      	push	{r4, r5, r6, lr}
   18666:	4606      	mov	r6, r0
  dmConnApiClose_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiClose_t))) != NULL)
   18668:	2006      	movs	r0, #6
{
   1866a:	460d      	mov	r5, r1
   1866c:	4614      	mov	r4, r2
  if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiClose_t))) != NULL)
   1866e:	f7fb f8d1 	bl	13814 <WsfMsgAlloc>
   18672:	b160      	cbz	r0, 1868e <DmConnClose+0x2a>
  {
    pMsg->hdr.event = DM_CONN_MSG_API_CLOSE;
   18674:	2231      	movs	r2, #49	; 0x31
   18676:	7082      	strb	r2, [r0, #2]
    pMsg->hdr.param = connId;
    pMsg->hdr.status = pMsg->reason = reason;
    pMsg->clientId = clientId;

    WsfMsgSend(dmCb.handlerId, pMsg);
   18678:	4a05      	ldr	r2, [pc, #20]	; (18690 <DmConnClose+0x2c>)
    pMsg->hdr.param = connId;
   1867a:	8005      	strh	r5, [r0, #0]
    pMsg->hdr.status = pMsg->reason = reason;
   1867c:	7104      	strb	r4, [r0, #4]
   1867e:	70c4      	strb	r4, [r0, #3]
    pMsg->clientId = clientId;
   18680:	7146      	strb	r6, [r0, #5]
    WsfMsgSend(dmCb.handlerId, pMsg);
   18682:	4601      	mov	r1, r0
  }
}
   18684:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
   18688:	7b10      	ldrb	r0, [r2, #12]
   1868a:	f7fb b8cf 	b.w	1382c <WsfMsgSend>
}
   1868e:	bd70      	pop	{r4, r5, r6, pc}
   18690:	10005b04 	.word	0x10005b04

00018694 <DmReadRemoteFeatures>:
  connId--;
   18694:	3801      	subs	r0, #1
  if (dmConnCb.ccb[connId].inUse)
   18696:	4a18      	ldr	r2, [pc, #96]	; (186f8 <DmReadRemoteFeatures+0x64>)
   18698:	b2c3      	uxtb	r3, r0
   1869a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1869e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   186a2:	7d99      	ldrb	r1, [r3, #22]
   186a4:	b319      	cbz	r1, 186ee <DmReadRemoteFeatures+0x5a>
  dmConnCcb_t *pCcb;

  /* look up ccb from conn handle */
  if ((pCcb = dmConnCcbById(connId)) != NULL)
  {
    if (pCcb->featuresPresent)
   186a6:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
   186aa:	b309      	cbz	r1, 186f0 <DmReadRemoteFeatures+0x5c>
{
   186ac:	b500      	push	{lr}
      evt.hdr.param = pCcb->connId;
      evt.hdr.status = HCI_SUCCESS;

      evt.status = HCI_SUCCESS;
      evt.handle = pCcb->handle;
      UINT32_TO_BSTREAM(p, pCcb->features);
   186ae:	6a99      	ldr	r1, [r3, #40]	; 0x28
   186b0:	f8b3 c028 	ldrh.w	ip, [r3, #40]	; 0x28
      evt.hdr.param = pCcb->connId;
   186b4:	f893 e010 	ldrb.w	lr, [r3, #16]
      evt.handle = pCcb->handle;
   186b8:	8998      	ldrh	r0, [r3, #12]
{
   186ba:	b085      	sub	sp, #20
      evt.hdr.event = DM_REMOTE_FEATURES_IND;
   186bc:	2357      	movs	r3, #87	; 0x57
   186be:	f8ad 3002 	strh.w	r3, [sp, #2]
      evt.handle = pCcb->handle;
   186c2:	f8ad 0006 	strh.w	r0, [sp, #6]

      (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   186c6:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
      evt.hdr.param = pCcb->connId;
   186ca:	f8ad e000 	strh.w	lr, [sp]
      UINT32_TO_BSTREAM(p, pCcb->features);
   186ce:	0c08      	lsrs	r0, r1, #16
      evt.status = HCI_SUCCESS;
   186d0:	2200      	movs	r2, #0
      UINT32_TO_BSTREAM(p, pCcb->features);
   186d2:	0e09      	lsrs	r1, r1, #24
   186d4:	f88d 000a 	strb.w	r0, [sp, #10]
   186d8:	f8ad c008 	strh.w	ip, [sp, #8]
   186dc:	f88d 100b 	strb.w	r1, [sp, #11]
      (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   186e0:	4668      	mov	r0, sp
      evt.status = HCI_SUCCESS;
   186e2:	f88d 2004 	strb.w	r2, [sp, #4]
      (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   186e6:	4798      	blx	r3
    {
      /* Request the remote features from the peer */
      HciLeReadRemoteFeatCmd(pCcb->handle);
    }
  }
}
   186e8:	b005      	add	sp, #20
   186ea:	f85d fb04 	ldr.w	pc, [sp], #4
   186ee:	4770      	bx	lr
      HciLeReadRemoteFeatCmd(pCcb->handle);
   186f0:	8998      	ldrh	r0, [r3, #12]
   186f2:	f7f8 bd5f 	b.w	111b4 <HciLeReadRemoteFeatCmd>
   186f6:	bf00      	nop
   186f8:	10005a30 	.word	0x10005a30

000186fc <DmConnUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmConnUpdate(dmConnId_t connId, hciConnSpec_t *pConnSpec)
{
   186fc:	b570      	push	{r4, r5, r6, lr}
   186fe:	4606      	mov	r6, r0
  dmConnApiUpdate_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiUpdate_t))) != NULL)
   18700:	2010      	movs	r0, #16
{
   18702:	460d      	mov	r5, r1
  if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiUpdate_t))) != NULL)
   18704:	f7fb f886 	bl	13814 <WsfMsgAlloc>
   18708:	b1e8      	cbz	r0, 18746 <DmConnUpdate+0x4a>
/*************************************************************************************************/
uint8_t DmConnRole(dmConnId_t connId)
{
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId-1].role;
   1870a:	4c0f      	ldr	r4, [pc, #60]	; (18748 <DmConnUpdate+0x4c>)
   1870c:	1e72      	subs	r2, r6, #1
   1870e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   18712:	eb04 1c02 	add.w	ip, r4, r2, lsl #4
    pMsg->hdr.param = connId;
   18716:	4602      	mov	r2, r0
    pMsg->hdr.event = (DmConnRole(connId) == DM_ROLE_MASTER) ?
   18718:	f89c 1019 	ldrb.w	r1, [ip, #25]
   1871c:	2900      	cmp	r1, #0
   1871e:	bf0c      	ite	eq
   18720:	2133      	moveq	r1, #51	; 0x33
   18722:	2134      	movne	r1, #52	; 0x34
   18724:	7081      	strb	r1, [r0, #2]
    pMsg->hdr.param = connId;
   18726:	f822 6b04 	strh.w	r6, [r2], #4
    memcpy(&pMsg->connSpec, pConnSpec, sizeof(hciConnSpec_t));
   1872a:	4603      	mov	r3, r0
   1872c:	6829      	ldr	r1, [r5, #0]
   1872e:	68a8      	ldr	r0, [r5, #8]
   18730:	686c      	ldr	r4, [r5, #4]
   18732:	6059      	str	r1, [r3, #4]
    WsfMsgSend(dmCb.handlerId, pMsg);
   18734:	4905      	ldr	r1, [pc, #20]	; (1874c <DmConnUpdate+0x50>)
    memcpy(&pMsg->connSpec, pConnSpec, sizeof(hciConnSpec_t));
   18736:	6054      	str	r4, [r2, #4]
   18738:	6090      	str	r0, [r2, #8]
    WsfMsgSend(dmCb.handlerId, pMsg);
   1873a:	7b08      	ldrb	r0, [r1, #12]
}
   1873c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
   18740:	4619      	mov	r1, r3
   18742:	f7fb b873 	b.w	1382c <WsfMsgSend>
}
   18746:	bd70      	pop	{r4, r5, r6, pc}
   18748:	10005a30 	.word	0x10005a30
   1874c:	10005b04 	.word	0x10005b04

00018750 <DmConnReadRssi>:
{
   18750:	b510      	push	{r4, lr}
   18752:	4604      	mov	r4, r0
  if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiReadRssi_t))) != NULL)
   18754:	2004      	movs	r0, #4
   18756:	f7fb f85d 	bl	13814 <WsfMsgAlloc>
   1875a:	b148      	cbz	r0, 18770 <DmConnReadRssi+0x20>
    WsfMsgSend(dmCb.handlerId, pMsg);
   1875c:	4b05      	ldr	r3, [pc, #20]	; (18774 <DmConnReadRssi+0x24>)
    pMsg->hdr.param = connId;
   1875e:	8004      	strh	r4, [r0, #0]
    pMsg->hdr.event = DM_CONN_MSG_API_READ_RSSI;
   18760:	2241      	movs	r2, #65	; 0x41
   18762:	7082      	strb	r2, [r0, #2]
    WsfMsgSend(dmCb.handlerId, pMsg);
   18764:	4601      	mov	r1, r0
}
   18766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
   1876a:	7b18      	ldrb	r0, [r3, #12]
   1876c:	f7fb b85e 	b.w	1382c <WsfMsgSend>
}
   18770:	bd10      	pop	{r4, pc}
   18772:	bf00      	nop
   18774:	10005b04 	.word	0x10005b04

00018778 <DmRemoteConnParamReqReply>:
{
   18778:	b538      	push	{r3, r4, r5, lr}
   1877a:	4605      	mov	r5, r0
  if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiRemConnParamReqReply_t))) != NULL)
   1877c:	2010      	movs	r0, #16
{
   1877e:	460c      	mov	r4, r1
  if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiRemConnParamReqReply_t))) != NULL)
   18780:	f7fb f848 	bl	13814 <WsfMsgAlloc>
   18784:	b190      	cbz	r0, 187ac <DmRemoteConnParamReqReply+0x34>
    pMsg->hdr.param = connId;
   18786:	4602      	mov	r2, r0
    pMsg->hdr.event = DM_CONN_MSG_API_REM_CONN_PARAM_REQ_REPLY;
   18788:	2142      	movs	r1, #66	; 0x42
   1878a:	7081      	strb	r1, [r0, #2]
    pMsg->hdr.param = connId;
   1878c:	f822 5b04 	strh.w	r5, [r2], #4
    memcpy(&pMsg->connSpec, pConnSpec, sizeof(hciConnSpec_t));
   18790:	4603      	mov	r3, r0
   18792:	6821      	ldr	r1, [r4, #0]
   18794:	68a0      	ldr	r0, [r4, #8]
   18796:	6865      	ldr	r5, [r4, #4]
   18798:	6059      	str	r1, [r3, #4]
    WsfMsgSend(dmCb.handlerId, pMsg);
   1879a:	4905      	ldr	r1, [pc, #20]	; (187b0 <DmRemoteConnParamReqReply+0x38>)
    memcpy(&pMsg->connSpec, pConnSpec, sizeof(hciConnSpec_t));
   1879c:	6055      	str	r5, [r2, #4]
   1879e:	6090      	str	r0, [r2, #8]
    WsfMsgSend(dmCb.handlerId, pMsg);
   187a0:	7b08      	ldrb	r0, [r1, #12]
   187a2:	4619      	mov	r1, r3
}
   187a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
   187a8:	f7fb b840 	b.w	1382c <WsfMsgSend>
}
   187ac:	bd38      	pop	{r3, r4, r5, pc}
   187ae:	bf00      	nop
   187b0:	10005b04 	.word	0x10005b04

000187b4 <DmRemoteConnParamReqNegReply>:
{
   187b4:	b538      	push	{r3, r4, r5, lr}
   187b6:	4605      	mov	r5, r0
  if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiRemConnParamReqNegReply_t))) != NULL)
   187b8:	2006      	movs	r0, #6
{
   187ba:	460c      	mov	r4, r1
  if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiRemConnParamReqNegReply_t))) != NULL)
   187bc:	f7fb f82a 	bl	13814 <WsfMsgAlloc>
   187c0:	b158      	cbz	r0, 187da <DmRemoteConnParamReqNegReply+0x26>
    pMsg->hdr.event = DM_CONN_MSG_API_REM_CONN_PARAM_REQ_NEG_REPLY;
   187c2:	2143      	movs	r1, #67	; 0x43
    WsfMsgSend(dmCb.handlerId, pMsg);
   187c4:	4a05      	ldr	r2, [pc, #20]	; (187dc <DmRemoteConnParamReqNegReply+0x28>)
    pMsg->hdr.event = DM_CONN_MSG_API_REM_CONN_PARAM_REQ_NEG_REPLY;
   187c6:	7081      	strb	r1, [r0, #2]
    pMsg->hdr.param = connId;
   187c8:	4603      	mov	r3, r0
   187ca:	8005      	strh	r5, [r0, #0]
    pMsg->reason = reason;
   187cc:	7104      	strb	r4, [r0, #4]
    WsfMsgSend(dmCb.handlerId, pMsg);
   187ce:	4619      	mov	r1, r3
   187d0:	7b10      	ldrb	r0, [r2, #12]
}
   187d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
   187d6:	f7fb b829 	b.w	1382c <WsfMsgSend>
}
   187da:	bd38      	pop	{r3, r4, r5, pc}
   187dc:	10005b04 	.word	0x10005b04

000187e0 <DmConnSetDataLen>:
{
   187e0:	b570      	push	{r4, r5, r6, lr}
   187e2:	4606      	mov	r6, r0
  if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiSetDataLen_t))) != NULL)
   187e4:	2008      	movs	r0, #8
{
   187e6:	460d      	mov	r5, r1
   187e8:	4614      	mov	r4, r2
  if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiSetDataLen_t))) != NULL)
   187ea:	f7fb f813 	bl	13814 <WsfMsgAlloc>
   187ee:	b158      	cbz	r0, 18808 <DmConnSetDataLen+0x28>
    pMsg->hdr.event = DM_CONN_MSG_API_SET_DATA_LEN;
   187f0:	2244      	movs	r2, #68	; 0x44
   187f2:	7082      	strb	r2, [r0, #2]
    WsfMsgSend(dmCb.handlerId, pMsg);
   187f4:	4a05      	ldr	r2, [pc, #20]	; (1880c <DmConnSetDataLen+0x2c>)
    pMsg->hdr.param = connId;
   187f6:	8006      	strh	r6, [r0, #0]
    pMsg->txOctets = txOctets;
   187f8:	8085      	strh	r5, [r0, #4]
    pMsg->txTime = txTime;
   187fa:	80c4      	strh	r4, [r0, #6]
    WsfMsgSend(dmCb.handlerId, pMsg);
   187fc:	4601      	mov	r1, r0
}
   187fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
   18802:	7b10      	ldrb	r0, [r2, #12]
   18804:	f7fb b812 	b.w	1382c <WsfMsgSend>
}
   18808:	bd70      	pop	{r4, r5, r6, pc}
   1880a:	bf00      	nop
   1880c:	10005b04 	.word	0x10005b04

00018810 <DmConnIdByHandle>:
    if (pCcb->inUse && (pCcb->handle == handle))
   18810:	4b0d      	ldr	r3, [pc, #52]	; (18848 <DmConnIdByHandle+0x38>)
   18812:	7d9a      	ldrb	r2, [r3, #22]
   18814:	b112      	cbz	r2, 1881c <DmConnIdByHandle+0xc>
   18816:	899a      	ldrh	r2, [r3, #12]
   18818:	4282      	cmp	r2, r0
   1881a:	d011      	beq.n	18840 <DmConnIdByHandle+0x30>
   1881c:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
   18820:	b112      	cbz	r2, 18828 <DmConnIdByHandle+0x18>
   18822:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
   18824:	4282      	cmp	r2, r0
   18826:	d00a      	beq.n	1883e <DmConnIdByHandle+0x2e>
   18828:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
   1882c:	b12a      	cbz	r2, 1883a <DmConnIdByHandle+0x2a>
   1882e:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
   18832:	4283      	cmp	r3, r0
  return DM_CONN_ID_NONE;
   18834:	bf18      	it	ne
   18836:	2200      	movne	r2, #0
    if (pCcb->inUse && (pCcb->handle == handle))
   18838:	d004      	beq.n	18844 <DmConnIdByHandle+0x34>
}
   1883a:	4610      	mov	r0, r2
   1883c:	4770      	bx	lr
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   1883e:	4b03      	ldr	r3, [pc, #12]	; (1884c <DmConnIdByHandle+0x3c>)
      return pCcb->connId;
   18840:	7c1a      	ldrb	r2, [r3, #16]
   18842:	e7fa      	b.n	1883a <DmConnIdByHandle+0x2a>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   18844:	4b02      	ldr	r3, [pc, #8]	; (18850 <DmConnIdByHandle+0x40>)
   18846:	e7fb      	b.n	18840 <DmConnIdByHandle+0x30>
   18848:	10005a30 	.word	0x10005a30
   1884c:	10005a60 	.word	0x10005a60
   18850:	10005a90 	.word	0x10005a90

00018854 <DmConnInUse>:
  return dmConnCb.ccb[connId-1].inUse;
   18854:	4b03      	ldr	r3, [pc, #12]	; (18864 <DmConnInUse+0x10>)
   18856:	3801      	subs	r0, #1
   18858:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1885c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
   18860:	7d80      	ldrb	r0, [r0, #22]
   18862:	4770      	bx	lr
   18864:	10005a30 	.word	0x10005a30

00018868 <DmConnPeerAddrType>:
  return dmConnCb.ccb[connId-1].peerAddrType;
   18868:	4b03      	ldr	r3, [pc, #12]	; (18878 <DmConnPeerAddrType+0x10>)
   1886a:	3801      	subs	r0, #1
   1886c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   18870:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
   18874:	7cc0      	ldrb	r0, [r0, #19]
   18876:	4770      	bx	lr
   18878:	10005a30 	.word	0x10005a30

0001887c <DmConnPeerAddr>:
  return dmConnCb.ccb[connId-1].peerAddr;
   1887c:	4b03      	ldr	r3, [pc, #12]	; (1888c <DmConnPeerAddr+0x10>)
   1887e:	3801      	subs	r0, #1
   18880:	eb00 0040 	add.w	r0, r0, r0, lsl #1
}
   18884:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   18888:	4770      	bx	lr
   1888a:	bf00      	nop
   1888c:	10005a30 	.word	0x10005a30

00018890 <DmConnLocalAddrType>:
  return dmConnCb.ccb[connId-1].localAddrType;
   18890:	4b03      	ldr	r3, [pc, #12]	; (188a0 <DmConnLocalAddrType+0x10>)
   18892:	3801      	subs	r0, #1
   18894:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   18898:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
   1889c:	7d00      	ldrb	r0, [r0, #20]
   1889e:	4770      	bx	lr
   188a0:	10005a30 	.word	0x10005a30

000188a4 <DmConnLocalAddr>:
  return dmConnCb.ccb[connId-1].localAddr;
   188a4:	4b03      	ldr	r3, [pc, #12]	; (188b4 <DmConnLocalAddr+0x10>)
   188a6:	3801      	subs	r0, #1
   188a8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   188ac:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
   188b0:	3006      	adds	r0, #6
   188b2:	4770      	bx	lr
   188b4:	10005a30 	.word	0x10005a30

000188b8 <DmConnPeerRpa>:
  return dmConnCb.ccb[connId - 1].peerRpa;
   188b8:	4b03      	ldr	r3, [pc, #12]	; (188c8 <DmConnPeerRpa+0x10>)
   188ba:	3801      	subs	r0, #1
   188bc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   188c0:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
   188c4:	3020      	adds	r0, #32
   188c6:	4770      	bx	lr
   188c8:	10005a30 	.word	0x10005a30

000188cc <DmConnLocalRpa>:
  return dmConnCb.ccb[connId - 1].localRpa;
   188cc:	4b03      	ldr	r3, [pc, #12]	; (188dc <DmConnLocalRpa+0x10>)
   188ce:	3801      	subs	r0, #1
   188d0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   188d4:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
   188d8:	301a      	adds	r0, #26
   188da:	4770      	bx	lr
   188dc:	10005a30 	.word	0x10005a30

000188e0 <DmConnSecLevel>:
  return dmConnCb.ccb[connId-1].secLevel;
   188e0:	4b03      	ldr	r3, [pc, #12]	; (188f0 <DmConnSecLevel+0x10>)
   188e2:	3801      	subs	r0, #1
   188e4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   188e8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
   188ec:	7dc0      	ldrb	r0, [r0, #23]
   188ee:	4770      	bx	lr
   188f0:	10005a30 	.word	0x10005a30

000188f4 <DmConnSetIdle>:
{
   188f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return dmConnCb.ccb[connId-1].inUse;
   188f8:	1e46      	subs	r6, r0, #1
   188fa:	4d13      	ldr	r5, [pc, #76]	; (18948 <DmConnSetIdle+0x54>)
{
   188fc:	4691      	mov	r9, r2
   188fe:	4604      	mov	r4, r0
   18900:	4688      	mov	r8, r1
  WsfTaskLock();
   18902:	f7fa ffc9 	bl	13898 <WsfTaskLock>
  return dmConnCb.ccb[connId-1].inUse;
   18906:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   1890a:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   1890e:	0077      	lsls	r7, r6, #1
  if (DmConnInUse(connId))
   18910:	7d9a      	ldrb	r2, [r3, #22]
   18912:	b13a      	cbz	r2, 18924 <DmConnSetIdle+0x30>
      dmConnCb.ccb[connId-1].idleMask &= ~idleMask;
   18914:	89d9      	ldrh	r1, [r3, #14]
    if (idle == DM_CONN_IDLE)
   18916:	f1b9 0f00 	cmp.w	r9, #0
   1891a:	d10f      	bne.n	1893c <DmConnSetIdle+0x48>
      dmConnCb.ccb[connId-1].idleMask &= ~idleMask;
   1891c:	ea21 0808 	bic.w	r8, r1, r8
   18920:	f8a3 800e 	strh.w	r8, [r3, #14]
  DM_TRACE_INFO2("connId=%d idleMask=0x%04x", connId, dmConnCb.ccb[connId-1].idleMask);
   18924:	443e      	add	r6, r7
   18926:	eb05 1506 	add.w	r5, r5, r6, lsl #4
  WsfTaskUnlock();
   1892a:	f7fa ffbf 	bl	138ac <WsfTaskUnlock>
  DM_TRACE_INFO2("connId=%d idleMask=0x%04x", connId, dmConnCb.ccb[connId-1].idleMask);
   1892e:	89ea      	ldrh	r2, [r5, #14]
   18930:	4806      	ldr	r0, [pc, #24]	; (1894c <DmConnSetIdle+0x58>)
   18932:	4621      	mov	r1, r4
}
   18934:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  DM_TRACE_INFO2("connId=%d idleMask=0x%04x", connId, dmConnCb.ccb[connId-1].idleMask);
   18938:	f7fb baec 	b.w	13f14 <WsfTrace>
      dmConnCb.ccb[connId-1].idleMask |= idleMask;
   1893c:	ea48 0801 	orr.w	r8, r8, r1
   18940:	f8a3 800e 	strh.w	r8, [r3, #14]
   18944:	e7ee      	b.n	18924 <DmConnSetIdle+0x30>
   18946:	bf00      	nop
   18948:	10005a30 	.word	0x10005a30
   1894c:	00024b30 	.word	0x00024b30

00018950 <DmConnCheckIdle>:
{
   18950:	b510      	push	{r4, lr}
   18952:	4604      	mov	r4, r0
   18954:	b082      	sub	sp, #8
  WsfTaskLock();
   18956:	f7fa ff9f 	bl	13898 <WsfTaskLock>
  idleMask = dmConnCb.ccb[connId-1].idleMask;
   1895a:	4b06      	ldr	r3, [pc, #24]	; (18974 <DmConnCheckIdle+0x24>)
   1895c:	1e60      	subs	r0, r4, #1
   1895e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   18962:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   18966:	89c0      	ldrh	r0, [r0, #14]
   18968:	9001      	str	r0, [sp, #4]
  WsfTaskUnlock();
   1896a:	f7fa ff9f 	bl	138ac <WsfTaskUnlock>
}
   1896e:	9801      	ldr	r0, [sp, #4]
   18970:	b002      	add	sp, #8
   18972:	bd10      	pop	{r4, pc}
   18974:	10005a30 	.word	0x10005a30

00018978 <DmConnRole>:
  return dmConnCb.ccb[connId-1].role;
   18978:	4b03      	ldr	r3, [pc, #12]	; (18988 <DmConnRole+0x10>)
   1897a:	3801      	subs	r0, #1
   1897c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   18980:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
   18984:	7e40      	ldrb	r0, [r0, #25]
   18986:	4770      	bx	lr
   18988:	10005a30 	.word	0x10005a30

0001898c <dmConnSmActUpdateSlave>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActUpdateSlave(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   1898c:	b530      	push	{r4, r5, lr}
  if ((pCcb->features & HCI_LE_SUP_FEAT_CONN_PARAM_REQ_PROC) &&
   1898e:	6a83      	ldr	r3, [r0, #40]	; 0x28
   18990:	079a      	lsls	r2, r3, #30
{
   18992:	b085      	sub	sp, #20
   18994:	4604      	mov	r4, r0
   18996:	460d      	mov	r5, r1
  if ((pCcb->features & HCI_LE_SUP_FEAT_CONN_PARAM_REQ_PROC) &&
   18998:	d415      	bmi.n	189c6 <dmConnSmActUpdateSlave+0x3a>
      (HciGetLeSupFeat() & HCI_LE_SUP_FEAT_CONN_PARAM_REQ_PROC))
  {
    HciLeConnUpdateCmd(pCcb->handle, &pMsg->apiUpdate.connSpec);
  }
  /* else if L2CAP connection update not already in progress */
  else if (!pCcb->updating)
   1899a:	7c63      	ldrb	r3, [r4, #17]
   1899c:	b1f3      	cbz	r3, 189dc <dmConnSmActUpdateSlave+0x50>
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   1899e:	4b14      	ldr	r3, [pc, #80]	; (189f0 <dmConnSmActUpdateSlave+0x64>)
  evt.hdr.param = pCcb->connId;
   189a0:	7c25      	ldrb	r5, [r4, #16]
  evt.handle = pCcb->handle;
   189a2:	89a2      	ldrh	r2, [r4, #12]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   189a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
  evt.hdr.param = pCcb->connId;
   189a8:	f8ad 5000 	strh.w	r5, [sp]
  evt.status = evt.hdr.status = status;
   189ac:	210c      	movs	r1, #12
  evt.hdr.event = DM_CONN_UPDATE_IND;
   189ae:	f640 4029 	movw	r0, #3113	; 0xc29
   189b2:	f8ad 0002 	strh.w	r0, [sp, #2]
  evt.status = evt.hdr.status = status;
   189b6:	f88d 1004 	strb.w	r1, [sp, #4]
  evt.handle = pCcb->handle;
   189ba:	f8ad 2006 	strh.w	r2, [sp, #6]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   189be:	4668      	mov	r0, sp
   189c0:	4798      	blx	r3
  else
  {
    /* call callback */
    dmConnUpdateCback(pCcb, (uint8_t) HCI_ERR_CMD_DISALLOWED);
  }
}
   189c2:	b005      	add	sp, #20
   189c4:	bd30      	pop	{r4, r5, pc}
      (HciGetLeSupFeat() & HCI_LE_SUP_FEAT_CONN_PARAM_REQ_PROC))
   189c6:	f7f9 fccf 	bl	12368 <HciGetLeSupFeat>
  if ((pCcb->features & HCI_LE_SUP_FEAT_CONN_PARAM_REQ_PROC) &&
   189ca:	0783      	lsls	r3, r0, #30
   189cc:	d5e5      	bpl.n	1899a <dmConnSmActUpdateSlave+0xe>
    HciLeConnUpdateCmd(pCcb->handle, &pMsg->apiUpdate.connSpec);
   189ce:	89a0      	ldrh	r0, [r4, #12]
   189d0:	1d29      	adds	r1, r5, #4
}
   189d2:	b005      	add	sp, #20
   189d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HciLeConnUpdateCmd(pCcb->handle, &pMsg->apiUpdate.connSpec);
   189d8:	f7f8 b904 	b.w	10be4 <HciLeConnUpdateCmd>
    L2cDmConnUpdateReq(pCcb->handle, &pMsg->apiUpdate.connSpec);
   189dc:	89a0      	ldrh	r0, [r4, #12]
    pCcb->updating = TRUE;
   189de:	2301      	movs	r3, #1
    L2cDmConnUpdateReq(pCcb->handle, &pMsg->apiUpdate.connSpec);
   189e0:	1d29      	adds	r1, r5, #4
    pCcb->updating = TRUE;
   189e2:	7463      	strb	r3, [r4, #17]
}
   189e4:	b005      	add	sp, #20
   189e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    L2cDmConnUpdateReq(pCcb->handle, &pMsg->apiUpdate.connSpec);
   189ea:	f7f7 bf85 	b.w	108f8 <L2cDmConnUpdateReq>
   189ee:	bf00      	nop
   189f0:	10005a30 	.word	0x10005a30

000189f4 <dmConnSmActL2cUpdateCnf>:
 */
/*************************************************************************************************/
void dmConnSmActL2cUpdateCnf(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
  /* if connection update in progress */
  if (pCcb->updating)
   189f4:	7c43      	ldrb	r3, [r0, #17]
   189f6:	b1e3      	cbz	r3, 18a32 <dmConnSmActL2cUpdateCnf+0x3e>
  {
    pCcb->updating = FALSE;
   189f8:	2300      	movs	r3, #0
   189fa:	7443      	strb	r3, [r0, #17]

    /* if reason indicates failure */
    if (pMsg->l2cUpdateCnf.result != L2C_CONN_PARAM_ACCEPTED)
   189fc:	888b      	ldrh	r3, [r1, #4]
   189fe:	b1c3      	cbz	r3, 18a32 <dmConnSmActL2cUpdateCnf+0x3e>
{
   18a00:	b500      	push	{lr}
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   18a02:	4a0c      	ldr	r2, [pc, #48]	; (18a34 <dmConnSmActL2cUpdateCnf+0x40>)
  evt.hdr.param = pCcb->connId;
   18a04:	f890 c010 	ldrb.w	ip, [r0, #16]
  evt.handle = pCcb->handle;
   18a08:	8981      	ldrh	r1, [r0, #12]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   18a0a:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
{
   18a0e:	b085      	sub	sp, #20
    {
      /* call callback */
      dmConnUpdateCback(pCcb, (uint8_t) pMsg->l2cUpdateCnf.result);
   18a10:	b2db      	uxtb	r3, r3
  evt.hdr.event = DM_CONN_UPDATE_IND;
   18a12:	2029      	movs	r0, #41	; 0x29
   18a14:	f88d 0002 	strb.w	r0, [sp, #2]
  evt.hdr.param = pCcb->connId;
   18a18:	f8ad c000 	strh.w	ip, [sp]
  evt.status = evt.hdr.status = status;
   18a1c:	f88d 3003 	strb.w	r3, [sp, #3]
   18a20:	f88d 3004 	strb.w	r3, [sp, #4]
  evt.handle = pCcb->handle;
   18a24:	f8ad 1006 	strh.w	r1, [sp, #6]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   18a28:	4668      	mov	r0, sp
   18a2a:	4790      	blx	r2
    }
  }
}
   18a2c:	b005      	add	sp, #20
   18a2e:	f85d fb04 	ldr.w	pc, [sp], #4
   18a32:	4770      	bx	lr
   18a34:	10005a30 	.word	0x10005a30

00018a38 <DmL2cConnUpdateCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmL2cConnUpdateCnf(uint16_t handle, uint16_t result)
{
   18a38:	b510      	push	{r4, lr}
   18a3a:	b082      	sub	sp, #8
   18a3c:	460c      	mov	r4, r1
  dmConnL2cUpdateCnf_t  updateCnf;
  dmConnCcb_t           *pCcb;

  if ((pCcb = dmConnCcbByHandle(handle)) != NULL)
   18a3e:	f7ff fcfd 	bl	1843c <dmConnCcbByHandle>
   18a42:	b138      	cbz	r0, 18a54 <DmL2cConnUpdateCnf+0x1c>
  {
    updateCnf.hdr.event = DM_CONN_MSG_L2C_UPDATE_CNF;
   18a44:	2336      	movs	r3, #54	; 0x36
    updateCnf.result = result;

    dmConnSmExecute(pCcb, (dmConnMsg_t *) &updateCnf);
   18a46:	4669      	mov	r1, sp
    updateCnf.hdr.event = DM_CONN_MSG_L2C_UPDATE_CNF;
   18a48:	f88d 3002 	strb.w	r3, [sp, #2]
    updateCnf.result = result;
   18a4c:	f8ad 4004 	strh.w	r4, [sp, #4]
    dmConnSmExecute(pCcb, (dmConnMsg_t *) &updateCnf);
   18a50:	f000 f864 	bl	18b1c <dmConnSmExecute>
  }
}
   18a54:	b002      	add	sp, #8
   18a56:	bd10      	pop	{r4, pc}

00018a58 <DmL2cCmdRejInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmL2cCmdRejInd(uint16_t handle, uint16_t result)
{
   18a58:	b500      	push	{lr}
  /* call callback */
  evt.hdr.event = DM_L2C_CMD_REJ_IND;
  evt.hdr.status = HCI_SUCCESS;
  evt.reason = result;
  evt.handle = handle;
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *)&evt);
   18a5a:	4b08      	ldr	r3, [pc, #32]	; (18a7c <DmL2cCmdRejInd+0x24>)
{
   18a5c:	b083      	sub	sp, #12
  evt.hdr.event = DM_L2C_CMD_REJ_IND;
   18a5e:	2264      	movs	r2, #100	; 0x64
  evt.handle = handle;
   18a60:	f8ad 0006 	strh.w	r0, [sp, #6]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *)&evt);
   18a64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
  evt.hdr.event = DM_L2C_CMD_REJ_IND;
   18a68:	f8ad 2002 	strh.w	r2, [sp, #2]
  evt.reason = result;
   18a6c:	f8ad 1004 	strh.w	r1, [sp, #4]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *)&evt);
   18a70:	4668      	mov	r0, sp
   18a72:	4798      	blx	r3
}
   18a74:	b003      	add	sp, #12
   18a76:	f85d fb04 	ldr.w	pc, [sp], #4
   18a7a:	bf00      	nop
   18a7c:	10005a30 	.word	0x10005a30

00018a80 <DmConnAccept>:
 *  \return Connection identifier.
 */
/*************************************************************************************************/
dmConnId_t DmConnAccept(uint8_t clientId, uint8_t advHandle, uint8_t advType, uint16_t duration,
                        uint8_t maxEaEvents, uint8_t addrType, uint8_t *pAddr)
{
   18a80:	b510      	push	{r4, lr}
   18a82:	b086      	sub	sp, #24
  return dmConnOpenAccept(clientId, 0, advHandle, advType, duration, maxEaEvents, addrType, pAddr,
   18a84:	2401      	movs	r4, #1
   18a86:	9300      	str	r3, [sp, #0]
{
   18a88:	f89d 3020 	ldrb.w	r3, [sp, #32]
  return dmConnOpenAccept(clientId, 0, advHandle, advType, duration, maxEaEvents, addrType, pAddr,
   18a8c:	9301      	str	r3, [sp, #4]
{
   18a8e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
  return dmConnOpenAccept(clientId, 0, advHandle, advType, duration, maxEaEvents, addrType, pAddr,
   18a92:	9302      	str	r3, [sp, #8]
{
   18a94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  return dmConnOpenAccept(clientId, 0, advHandle, advType, duration, maxEaEvents, addrType, pAddr,
   18a96:	e9cd 3403 	strd	r3, r4, [sp, #12]
   18a9a:	4613      	mov	r3, r2
   18a9c:	460a      	mov	r2, r1
   18a9e:	2100      	movs	r1, #0
   18aa0:	f7ff fd02 	bl	184a8 <dmConnOpenAccept>
                          DM_ROLE_SLAVE);
}
   18aa4:	b006      	add	sp, #24
   18aa6:	bd10      	pop	{r4, pc}

00018aa8 <dmConnSmActAccept>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActAccept(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   18aa8:	4608      	mov	r0, r1
  dmAdvStartDirected(pMsg->apiOpen.advType, pMsg->apiOpen.duration, pMsg->apiOpen.addrType,
   18aaa:	7c4a      	ldrb	r2, [r1, #17]
   18aac:	7980      	ldrb	r0, [r0, #6]
   18aae:	f101 030b 	add.w	r3, r1, #11
   18ab2:	8909      	ldrh	r1, [r1, #8]
   18ab4:	f7ff b8e2 	b.w	17c7c <dmAdvStartDirected>

00018ab8 <dmConnSmActCancelAccept>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActCancelAccept(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   18ab8:	b500      	push	{lr}
   18aba:	b083      	sub	sp, #12
   18abc:	e9cd 1000 	strd	r1, r0, [sp]
  dmAdvStopDirected();
   18ac0:	f7ff f902 	bl	17cc8 <dmAdvStopDirected>

  dmConnSmActConnFailed(pCcb, pMsg);
   18ac4:	e9dd 1000 	ldrd	r1, r0, [sp]
}
   18ac8:	b003      	add	sp, #12
   18aca:	f85d eb04 	ldr.w	lr, [sp], #4
  dmConnSmActConnFailed(pCcb, pMsg);
   18ace:	f7ff b971 	b.w	17db4 <dmConnSmActConnFailed>
   18ad2:	bf00      	nop

00018ad4 <dmConnSmActConnAccepted>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActConnAccepted(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   18ad4:	b500      	push	{lr}
   18ad6:	b083      	sub	sp, #12
   18ad8:	e9cd 1000 	strd	r1, r0, [sp]
  dmAdvConnected();
   18adc:	f7ff f912 	bl	17d04 <dmAdvConnected>

  dmConnSmActConnOpened(pCcb, pMsg);
   18ae0:	e9dd 1000 	ldrd	r1, r0, [sp]
}
   18ae4:	b003      	add	sp, #12
   18ae6:	f85d eb04 	ldr.w	lr, [sp], #4
  dmConnSmActConnOpened(pCcb, pMsg);
   18aea:	f7ff b99b 	b.w	17e24 <dmConnSmActConnOpened>
   18aee:	bf00      	nop

00018af0 <dmConnSmActAcceptFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActAcceptFailed(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   18af0:	b500      	push	{lr}
   18af2:	b083      	sub	sp, #12
   18af4:	e9cd 1000 	strd	r1, r0, [sp]
  dmAdvConnectFailed();
   18af8:	f7ff f91c 	bl	17d34 <dmAdvConnectFailed>

  dmConnSmActConnFailed(pCcb, pMsg);
   18afc:	e9dd 1000 	ldrd	r1, r0, [sp]
}
   18b00:	b003      	add	sp, #12
   18b02:	f85d eb04 	ldr.w	lr, [sp], #4
  dmConnSmActConnFailed(pCcb, pMsg);
   18b06:	f7ff b955 	b.w	17db4 <dmConnSmActConnFailed>
   18b0a:	bf00      	nop

00018b0c <DmConnSlaveInit>:
 *  \return None.
 */
/*************************************************************************************************/
void DmConnSlaveInit(void)
{
  dmConnActSet[DM_CONN_ACT_SET_SLAVE] = (dmConnAct_t *) dmConnActSetSlave;
   18b0c:	4b01      	ldr	r3, [pc, #4]	; (18b14 <DmConnSlaveInit+0x8>)
   18b0e:	4a02      	ldr	r2, [pc, #8]	; (18b18 <DmConnSlaveInit+0xc>)
   18b10:	609a      	str	r2, [r3, #8]
}
   18b12:	4770      	bx	lr
   18b14:	10005af4 	.word	0x10005af4
   18b18:	00024b88 	.word	0x00024b88

00018b1c <dmConnSmExecute>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmExecute(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   18b1c:	b570      	push	{r4, r5, r6, lr}
   18b1e:	4604      	mov	r4, r0
  dmConnAct_t       *actSet;
  uint8_t           action;
  uint8_t           event;

  DM_TRACE_INFO2("dmConnSmExecute event=%d state=%d", pMsg->hdr.event, pCcb->state);
   18b20:	7d42      	ldrb	r2, [r0, #21]
   18b22:	4814      	ldr	r0, [pc, #80]	; (18b74 <dmConnSmExecute+0x58>)
{
   18b24:	460d      	mov	r5, r1
  DM_TRACE_INFO2("dmConnSmExecute event=%d state=%d", pMsg->hdr.event, pCcb->state);
   18b26:	7889      	ldrb	r1, [r1, #2]
   18b28:	f7fb f9f4 	bl	13f14 <WsfTrace>

  /* get the event */
  event = DM_MSG_MASK(pMsg->hdr.event);

  /* get action */
  action = dmConnStateTbl[pCcb->state][event][DM_CONN_ACTION];
   18b2c:	7d63      	ldrb	r3, [r4, #21]
  event = DM_MSG_MASK(pMsg->hdr.event);
   18b2e:	78aa      	ldrb	r2, [r5, #2]
  action = dmConnStateTbl[pCcb->state][event][DM_CONN_ACTION];
   18b30:	4911      	ldr	r1, [pc, #68]	; (18b78 <dmConnSmExecute+0x5c>)
   18b32:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   18b36:	f002 020f 	and.w	r2, r2, #15
   18b3a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   18b3e:	4413      	add	r3, r2
   18b40:	eb01 0243 	add.w	r2, r1, r3, lsl #1

  /* set next state */
  pCcb->state = dmConnStateTbl[pCcb->state][event][DM_CONN_NEXT_STATE];
   18b44:	f811 1013 	ldrb.w	r1, [r1, r3, lsl #1]
  action = dmConnStateTbl[pCcb->state][event][DM_CONN_ACTION];
   18b48:	7853      	ldrb	r3, [r2, #1]
  pCcb->state = dmConnStateTbl[pCcb->state][event][DM_CONN_NEXT_STATE];
   18b4a:	7561      	strb	r1, [r4, #21]

  /* look up action set */
  actSet = dmConnActSet[DM_CONN_ACT_SET_ID(action)];
   18b4c:	4a0b      	ldr	r2, [pc, #44]	; (18b7c <dmConnSmExecute+0x60>)
   18b4e:	0919      	lsrs	r1, r3, #4
   18b50:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]

  /* if action set present */
  if (actSet != NULL)
   18b54:	b142      	cbz	r2, 18b68 <dmConnSmExecute+0x4c>
  {
    /* execute action function in action set */
    (*actSet[DM_CONN_ACT_ID(action)])(pCcb, pMsg);
   18b56:	f003 030f 	and.w	r3, r3, #15
   18b5a:	4629      	mov	r1, r5
   18b5c:	4620      	mov	r0, r4
   18b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  else
  {
     /* no action */
     dmConnSmActNone(pCcb, pMsg);
  }
}
   18b62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    (*actSet[DM_CONN_ACT_ID(action)])(pCcb, pMsg);
   18b66:	4718      	bx	r3
     dmConnSmActNone(pCcb, pMsg);
   18b68:	4629      	mov	r1, r5
   18b6a:	4620      	mov	r0, r4
}
   18b6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     dmConnSmActNone(pCcb, pMsg);
   18b70:	f7ff b910 	b.w	17d94 <dmConnSmActNone>
   18b74:	00024ba0 	.word	0x00024ba0
   18b78:	00024bc4 	.word	0x00024bc4
   18b7c:	10005af4 	.word	0x10005af4

00018b80 <dmDevHciHandler>:
 *  \return None.
 */
/*************************************************************************************************/
void dmDevHciHandler(hciEvt_t *pEvent)
{
  switch (pEvent->hdr.event)
   18b80:	7883      	ldrb	r3, [r0, #2]
   18b82:	2b13      	cmp	r3, #19
   18b84:	d80a      	bhi.n	18b9c <dmDevHciHandler+0x1c>
   18b86:	2b11      	cmp	r3, #17
   18b88:	d811      	bhi.n	18bae <dmDevHciHandler+0x2e>
   18b8a:	b973      	cbnz	r3, 18baa <dmDevHciHandler+0x2a>
  dmCb.resetting = FALSE;
   18b8c:	490a      	ldr	r1, [pc, #40]	; (18bb8 <dmDevHciHandler+0x38>)
  pEvent->hdr.event = DM_RESET_CMPL_IND;
   18b8e:	f04f 0c20 	mov.w	ip, #32
  dmCb.resetting = FALSE;
   18b92:	740b      	strb	r3, [r1, #16]
  (*dmCb.cback)((dmEvt_t *) pEvent);
   18b94:	688b      	ldr	r3, [r1, #8]
  pEvent->hdr.event = DM_RESET_CMPL_IND;
   18b96:	f880 c002 	strb.w	ip, [r0, #2]
  (*dmCb.cback)((dmEvt_t *) pEvent);
   18b9a:	4718      	bx	r3
  switch (pEvent->hdr.event)
   18b9c:	2b14      	cmp	r3, #20
   18b9e:	d105      	bne.n	18bac <dmDevHciHandler+0x2c>
  (*dmCb.cback)((dmEvt_t *) pEvent);
   18ba0:	4b05      	ldr	r3, [pc, #20]	; (18bb8 <dmDevHciHandler+0x38>)
  pEvent->hdr.event = DM_HW_ERROR_IND;
   18ba2:	2166      	movs	r1, #102	; 0x66
  (*dmCb.cback)((dmEvt_t *) pEvent);
   18ba4:	689b      	ldr	r3, [r3, #8]
  pEvent->hdr.event = DM_HW_ERROR_IND;
   18ba6:	7081      	strb	r1, [r0, #2]
  (*dmCb.cback)((dmEvt_t *) pEvent);
   18ba8:	4718      	bx	r3
   18baa:	4770      	bx	lr
   18bac:	4770      	bx	lr
  (*dmCb.cback)((dmEvt_t *) pEvent);
   18bae:	4b02      	ldr	r3, [pc, #8]	; (18bb8 <dmDevHciHandler+0x38>)
  pEvent->hdr.event = DM_VENDOR_SPEC_IND;
   18bb0:	2167      	movs	r1, #103	; 0x67
  (*dmCb.cback)((dmEvt_t *) pEvent);
   18bb2:	689b      	ldr	r3, [r3, #8]
  pEvent->hdr.event = DM_VENDOR_SPEC_IND;
   18bb4:	7081      	strb	r1, [r0, #2]
  (*dmCb.cback)((dmEvt_t *) pEvent);
   18bb6:	4718      	bx	r3
   18bb8:	10005b04 	.word	0x10005b04

00018bbc <dmDevMsgHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmDevMsgHandler(wsfMsgHdr_t *pMsg)
{
   18bbc:	b538      	push	{r3, r4, r5, lr}
  if (!dmCb.resetting)
   18bbe:	4b09      	ldr	r3, [pc, #36]	; (18be4 <dmDevMsgHandler+0x28>)
   18bc0:	7c1a      	ldrb	r2, [r3, #16]
   18bc2:	b972      	cbnz	r2, 18be2 <dmDevMsgHandler+0x26>
    dmCb.resetting = TRUE;
   18bc4:	4c08      	ldr	r4, [pc, #32]	; (18be8 <dmDevMsgHandler+0x2c>)
   18bc6:	2201      	movs	r2, #1
   18bc8:	741a      	strb	r2, [r3, #16]
    for (i = 0; i < DM_NUM_IDS; i++)
   18bca:	f104 0538 	add.w	r5, r4, #56	; 0x38
      (*(dmFcnIfTbl[i]->reset))();
   18bce:	f854 3f04 	ldr.w	r3, [r4, #4]!
   18bd2:	681b      	ldr	r3, [r3, #0]
   18bd4:	4798      	blx	r3
    for (i = 0; i < DM_NUM_IDS; i++)
   18bd6:	42ac      	cmp	r4, r5
   18bd8:	d1f9      	bne.n	18bce <dmDevMsgHandler+0x12>
  /* execute action function */
  (*dmDevAct[DM_MSG_MASK(pMsg->event)])(pMsg);
}
   18bda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HciResetSequence();
   18bde:	f7f9 ba85 	b.w	120ec <HciResetSequence>
}
   18be2:	bd38      	pop	{r3, r4, r5, pc}
   18be4:	10005b04 	.word	0x10005b04
   18be8:	10002b94 	.word	0x10002b94

00018bec <dmDevPassEvtToDevPriv>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmDevPassEvtToDevPriv(uint8_t event, uint8_t param, uint8_t advHandle, bool_t connectable)
{
   18bec:	b5f0      	push	{r4, r5, r6, r7, lr}
   18bee:	4606      	mov	r6, r0
   18bf0:	b083      	sub	sp, #12
   18bf2:	460d      	mov	r5, r1
   18bf4:	4614      	mov	r4, r2
   18bf6:	461f      	mov	r7, r3
  dmDevPrivMsg_t evt;

  DM_TRACE_INFO3("dmDevPassEvtToDevPriv: event: %d, param: %d, advHandle: %d", event, param, advHandle);
   18bf8:	480a      	ldr	r0, [pc, #40]	; (18c24 <dmDevPassEvtToDevPriv+0x38>)
   18bfa:	4613      	mov	r3, r2
   18bfc:	460a      	mov	r2, r1
   18bfe:	4631      	mov	r1, r6
   18c00:	f7fb f988 	bl	13f14 <WsfTrace>
  evt.hdr.param = param;
  evt.privCtrl.advHandle = advHandle;
  evt.privCtrl.connectable = connectable;

  /* pass event to device privacy */
  (*(dmFcnIfTbl[DM_ID_DEV_PRIV]->msgHandler))((wsfMsgHdr_t *) &evt);
   18c04:	4b08      	ldr	r3, [pc, #32]	; (18c28 <dmDevPassEvtToDevPriv+0x3c>)
  evt.hdr.event = event;
   18c06:	f88d 6002 	strb.w	r6, [sp, #2]
  (*(dmFcnIfTbl[DM_ID_DEV_PRIV]->msgHandler))((wsfMsgHdr_t *) &evt);
   18c0a:	685b      	ldr	r3, [r3, #4]
  evt.hdr.param = param;
   18c0c:	f8ad 5000 	strh.w	r5, [sp]
  (*(dmFcnIfTbl[DM_ID_DEV_PRIV]->msgHandler))((wsfMsgHdr_t *) &evt);
   18c10:	689b      	ldr	r3, [r3, #8]
  evt.privCtrl.advHandle = advHandle;
   18c12:	f88d 4004 	strb.w	r4, [sp, #4]
  evt.privCtrl.connectable = connectable;
   18c16:	f88d 7005 	strb.w	r7, [sp, #5]
  (*(dmFcnIfTbl[DM_ID_DEV_PRIV]->msgHandler))((wsfMsgHdr_t *) &evt);
   18c1a:	4668      	mov	r0, sp
   18c1c:	4798      	blx	r3
}
   18c1e:	b003      	add	sp, #12
   18c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18c22:	bf00      	nop
   18c24:	00024c48 	.word	0x00024c48
   18c28:	10002b98 	.word	0x10002b98

00018c2c <dmDevPassEvtToConnCte>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmDevPassEvtToConnCte(uint8_t state, dmConnId_t connId)
{
   18c2c:	b500      	push	{lr}
  evt.event = DM_CONN_CTE_MSG_STATE;
  evt.status = state;
  evt.param = connId;

  /* pass event to Connection CTE */
  (*(dmFcnIfTbl[DM_ID_CONN_CTE]->msgHandler))(&evt);
   18c2e:	4b08      	ldr	r3, [pc, #32]	; (18c50 <dmDevPassEvtToConnCte+0x24>)
{
   18c30:	b083      	sub	sp, #12
  (*(dmFcnIfTbl[DM_ID_CONN_CTE]->msgHandler))(&evt);
   18c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  evt.status = state;
   18c34:	f88d 0007 	strb.w	r0, [sp, #7]
  evt.event = DM_CONN_CTE_MSG_STATE;
   18c38:	22d7      	movs	r2, #215	; 0xd7
  (*(dmFcnIfTbl[DM_ID_CONN_CTE]->msgHandler))(&evt);
   18c3a:	689b      	ldr	r3, [r3, #8]
  evt.event = DM_CONN_CTE_MSG_STATE;
   18c3c:	f88d 2006 	strb.w	r2, [sp, #6]
  evt.param = connId;
   18c40:	f8ad 1004 	strh.w	r1, [sp, #4]
  (*(dmFcnIfTbl[DM_ID_CONN_CTE]->msgHandler))(&evt);
   18c44:	a801      	add	r0, sp, #4
   18c46:	4798      	blx	r3
}
   18c48:	b003      	add	sp, #12
   18c4a:	f85d fb04 	ldr.w	pc, [sp], #4
   18c4e:	bf00      	nop
   18c50:	10002b98 	.word	0x10002b98

00018c54 <DmDevReset>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmDevReset(void)
{
   18c54:	b508      	push	{r3, lr}
  wsfMsgHdr_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(wsfMsgHdr_t))) != NULL)
   18c56:	2004      	movs	r0, #4
   18c58:	f7fa fddc 	bl	13814 <WsfMsgAlloc>
   18c5c:	b140      	cbz	r0, 18c70 <DmDevReset+0x1c>
  {
    pMsg->event = DM_DEV_MSG_API_RESET;

    WsfMsgSend(dmCb.handlerId, pMsg);
   18c5e:	4b05      	ldr	r3, [pc, #20]	; (18c74 <DmDevReset+0x20>)
    pMsg->event = DM_DEV_MSG_API_RESET;
   18c60:	2270      	movs	r2, #112	; 0x70
   18c62:	7082      	strb	r2, [r0, #2]
    WsfMsgSend(dmCb.handlerId, pMsg);
   18c64:	4601      	mov	r1, r0
   18c66:	7b18      	ldrb	r0, [r3, #12]
  }
}
   18c68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
   18c6c:	f7fa bdde 	b.w	1382c <WsfMsgSend>
}
   18c70:	bd08      	pop	{r3, pc}
   18c72:	bf00      	nop
   18c74:	10005b04 	.word	0x10005b04

00018c78 <DmDevWhiteListAdd>:
 *  \return None.
 */
/*************************************************************************************************/
void DmDevWhiteListAdd(uint8_t addrType, uint8_t *pAddr)
{
  HciLeAddDevWhiteListCmd(addrType, pAddr);
   18c78:	f7f7 bf4a 	b.w	10b10 <HciLeAddDevWhiteListCmd>

00018c7c <DmDevWhiteListClear>:
 *  \return None.
 */
/*************************************************************************************************/
void DmDevWhiteListClear(void)
{
  HciLeClearWhiteListCmd();
   18c7c:	f7f7 bf82 	b.w	10b84 <HciLeClearWhiteListCmd>

00018c80 <DmDevSetFilterPolicy>:
/*************************************************************************************************/
bool_t dmDevSetFilterPolicy(uint8_t advHandle, uint8_t mode, uint8_t policy)
{
  bool_t policySet = FALSE;

  switch (mode)
   18c80:	2803      	cmp	r0, #3
   18c82:	d805      	bhi.n	18c90 <DmDevSetFilterPolicy+0x10>
   18c84:	e8df f000 	tbb	[pc, r0]
   18c88:	02060c11 	.word	0x02060c11
      }
      break;

    case DM_FILT_POLICY_MODE_SYNC:
      /* if Synchronization filter policy is valid */
      if (policy <= HCI_FILT_PER_ADV_LIST)
   18c8c:	2901      	cmp	r1, #1
   18c8e:	d912      	bls.n	18cb6 <DmDevSetFilterPolicy+0x36>
  bool_t policySet = FALSE;
   18c90:	2000      	movs	r0, #0
 */
/*************************************************************************************************/
bool_t DmDevSetFilterPolicy(uint8_t mode, uint8_t policy)
{
  return dmDevSetFilterPolicy(DM_ADV_HANDLE_DEFAULT, mode, policy);
}
   18c92:	4770      	bx	lr
      if (policy <= HCI_FILT_WHITE_LIST)
   18c94:	2901      	cmp	r1, #1
   18c96:	d8fb      	bhi.n	18c90 <DmDevSetFilterPolicy+0x10>
        dmCb.initFiltPolicy = policy;
   18c98:	4b0b      	ldr	r3, [pc, #44]	; (18cc8 <DmDevSetFilterPolicy+0x48>)
        policySet = TRUE;
   18c9a:	2001      	movs	r0, #1
        dmCb.initFiltPolicy = policy;
   18c9c:	7519      	strb	r1, [r3, #20]
        policySet = TRUE;
   18c9e:	4770      	bx	lr
      if (policy <= HCI_FILT_WHITE_LIST_RES_INIT)
   18ca0:	2903      	cmp	r1, #3
   18ca2:	d8f5      	bhi.n	18c90 <DmDevSetFilterPolicy+0x10>
        dmCb.scanFiltPolicy = policy;
   18ca4:	4b08      	ldr	r3, [pc, #32]	; (18cc8 <DmDevSetFilterPolicy+0x48>)
   18ca6:	74d9      	strb	r1, [r3, #19]
        policySet = TRUE;
   18ca8:	4770      	bx	lr
      if (policy <= HCI_ADV_FILT_ALL)
   18caa:	2903      	cmp	r1, #3
   18cac:	d8f1      	bhi.n	18c92 <DmDevSetFilterPolicy+0x12>
        dmCb.advFiltPolicy[advHandle] = policy;
   18cae:	4b06      	ldr	r3, [pc, #24]	; (18cc8 <DmDevSetFilterPolicy+0x48>)
        policySet = TRUE;
   18cb0:	2001      	movs	r0, #1
        dmCb.advFiltPolicy[advHandle] = policy;
   18cb2:	7459      	strb	r1, [r3, #17]
        policySet = TRUE;
   18cb4:	4770      	bx	lr
        dmCb.syncOptions |= policy;
   18cb6:	4a04      	ldr	r2, [pc, #16]	; (18cc8 <DmDevSetFilterPolicy+0x48>)
        dmCb.syncOptions &= ~HCI_OPTIONS_FILT_POLICY_BIT;
   18cb8:	7d53      	ldrb	r3, [r2, #21]
   18cba:	f023 0301 	bic.w	r3, r3, #1
        dmCb.syncOptions |= policy;
   18cbe:	4319      	orrs	r1, r3
   18cc0:	2001      	movs	r0, #1
   18cc2:	7551      	strb	r1, [r2, #21]
  return policySet;
   18cc4:	4770      	bx	lr
   18cc6:	bf00      	nop
   18cc8:	10005b04 	.word	0x10005b04

00018ccc <DmDevVsInit>:
 *  \return None.
 */
/*************************************************************************************************/
void DmDevVsInit(uint8_t param)
{
  HciVsInit(param);
   18ccc:	f7fe bd76 	b.w	177bc <HciVsInit>

00018cd0 <DmDevPrivStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmDevPrivStart(uint16_t changeInterval)
{
   18cd0:	b510      	push	{r4, lr}
   18cd2:	4604      	mov	r4, r0
  dmDevPrivApiStart_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmDevPrivApiStart_t))) != NULL)
   18cd4:	2006      	movs	r0, #6
   18cd6:	f7fa fd9d 	bl	13814 <WsfMsgAlloc>
   18cda:	b148      	cbz	r0, 18cf0 <DmDevPrivStart+0x20>
  {
    pMsg->hdr.event = DM_DEV_PRIV_MSG_API_START;
    pMsg->changeInterval = changeInterval;
    WsfMsgSend(dmCb.handlerId, pMsg);
   18cdc:	4b05      	ldr	r3, [pc, #20]	; (18cf4 <DmDevPrivStart+0x24>)
    pMsg->changeInterval = changeInterval;
   18cde:	8084      	strh	r4, [r0, #4]
    pMsg->hdr.event = DM_DEV_PRIV_MSG_API_START;
   18ce0:	2210      	movs	r2, #16
   18ce2:	7082      	strb	r2, [r0, #2]
    WsfMsgSend(dmCb.handlerId, pMsg);
   18ce4:	4601      	mov	r1, r0
  }
}
   18ce6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
   18cea:	7b18      	ldrb	r0, [r3, #12]
   18cec:	f7fa bd9e 	b.w	1382c <WsfMsgSend>
}
   18cf0:	bd10      	pop	{r4, pc}
   18cf2:	bf00      	nop
   18cf4:	10005b04 	.word	0x10005b04

00018cf8 <dmHciEvtCback>:
static void dmHciEvtCback(hciEvt_t *pEvent)
{
  WSF_ASSERT(pEvent->hdr.event <= HCI_LE_CONNLESS_IQ_REPORT_CBACK_EVT);

  /* if DM not resetting or resetting but incoming event is HCI reset sequence complete event */
  if (!dmCb.resetting || (pEvent->hdr.event == HCI_RESET_SEQ_CMPL_CBACK_EVT))
   18cf8:	4b07      	ldr	r3, [pc, #28]	; (18d18 <dmHciEvtCback+0x20>)
   18cfa:	7c1b      	ldrb	r3, [r3, #16]
   18cfc:	b93b      	cbnz	r3, 18d0e <dmHciEvtCback+0x16>
   18cfe:	7883      	ldrb	r3, [r0, #2]
  {
    /* route event to DM component handling function */
    (*(dmFcnIfTbl[dmHciToIdTbl[pEvent->hdr.event]]->hciHandler))(pEvent);
   18d00:	4906      	ldr	r1, [pc, #24]	; (18d1c <dmHciEvtCback+0x24>)
   18d02:	4a07      	ldr	r2, [pc, #28]	; (18d20 <dmHciEvtCback+0x28>)
   18d04:	5ccb      	ldrb	r3, [r1, r3]
   18d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   18d0a:	685b      	ldr	r3, [r3, #4]
   18d0c:	4718      	bx	r3
  if (!dmCb.resetting || (pEvent->hdr.event == HCI_RESET_SEQ_CMPL_CBACK_EVT))
   18d0e:	7883      	ldrb	r3, [r0, #2]
   18d10:	2b00      	cmp	r3, #0
   18d12:	d0f5      	beq.n	18d00 <dmHciEvtCback+0x8>
  }
}
   18d14:	4770      	bx	lr
   18d16:	bf00      	nop
   18d18:	10005b04 	.word	0x10005b04
   18d1c:	00024d2c 	.word	0x00024d2c
   18d20:	10002b98 	.word	0x10002b98

00018d24 <dmEmptyReset>:
 */
/*************************************************************************************************/
void dmEmptyReset(void)
{
  /* empty */
}
   18d24:	4770      	bx	lr
   18d26:	bf00      	nop

00018d28 <dmEmptyHandler>:
 */
/*************************************************************************************************/
void dmEmptyHandler(wsfMsgHdr_t *pMsg)
{
  return;
}
   18d28:	4770      	bx	lr
   18d2a:	bf00      	nop

00018d2c <dmDevPassHciEvtToConn>:
 */
/*************************************************************************************************/
void dmDevPassHciEvtToConn(hciEvt_t *pEvent)
{
  /* pass event to DM connection management module */
  (*(dmFcnIfTbl[DM_ID_CONN]->hciHandler))(pEvent);
   18d2c:	4b01      	ldr	r3, [pc, #4]	; (18d34 <dmDevPassHciEvtToConn+0x8>)
   18d2e:	68db      	ldr	r3, [r3, #12]
   18d30:	685b      	ldr	r3, [r3, #4]
   18d32:	4718      	bx	r3
   18d34:	10002b98 	.word	0x10002b98

00018d38 <DmRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmRegister(dmCback_t cback)
{
   18d38:	b510      	push	{r4, lr}
  dmCb.cback = cback;

  /* if LESC is enabled */
  if (dmFcnIfTbl[DM_ID_LESC] != &dmFcnDefault)
   18d3a:	4a09      	ldr	r2, [pc, #36]	; (18d60 <DmRegister+0x28>)
   18d3c:	4b09      	ldr	r3, [pc, #36]	; (18d64 <DmRegister+0x2c>)
   18d3e:	6a12      	ldr	r2, [r2, #32]
  dmCb.cback = cback;
   18d40:	4c09      	ldr	r4, [pc, #36]	; (18d68 <DmRegister+0x30>)
  if (dmFcnIfTbl[DM_ID_LESC] != &dmFcnDefault)
   18d42:	429a      	cmp	r2, r3
{
   18d44:	b09a      	sub	sp, #104	; 0x68
  dmCb.cback = cback;
   18d46:	60a0      	str	r0, [r4, #8]
  if (dmFcnIfTbl[DM_ID_LESC] != &dmFcnDefault)
   18d48:	d008      	beq.n	18d5c <DmRegister+0x24>
  {
    /* if largest LESC key length is larger than maximum RX PDU length */
    if (SMP_PUB_KEY_MSG_LEN > (HciGetMaxRxAclLen() - L2C_HDR_LEN))
   18d4a:	f7f9 fb15 	bl	12378 <HciGetMaxRxAclLen>
   18d4e:	2844      	cmp	r0, #68	; 0x44
   18d50:	d804      	bhi.n	18d5c <DmRegister+0x24>
    {
      dmEvt_t evt;

      evt.hdr.param = 0;
   18d52:	4a06      	ldr	r2, [pc, #24]	; (18d6c <DmRegister+0x34>)
      evt.hdr.event = DM_ERROR_IND;
      evt.hdr.status = DM_ERR_SMP_RX_PDU_LEN_EXCEEDED;

      (*dmCb.cback)(&evt);
   18d54:	68a3      	ldr	r3, [r4, #8]
      evt.hdr.param = 0;
   18d56:	9201      	str	r2, [sp, #4]
      (*dmCb.cback)(&evt);
   18d58:	a801      	add	r0, sp, #4
   18d5a:	4798      	blx	r3
    }
  }
}
   18d5c:	b01a      	add	sp, #104	; 0x68
   18d5e:	bd10      	pop	{r4, pc}
   18d60:	10002b98 	.word	0x10002b98
   18d64:	00024d20 	.word	0x00024d20
   18d68:	10005b04 	.word	0x10005b04
   18d6c:	01650000 	.word	0x01650000

00018d70 <DmHandlerInit>:
 */
/*************************************************************************************************/
void DmHandlerInit(wsfHandlerId_t handlerId)
{
  /* store handler ID */
  dmCb.handlerId = handlerId;
   18d70:	4b04      	ldr	r3, [pc, #16]	; (18d84 <DmHandlerInit+0x14>)
{
   18d72:	4601      	mov	r1, r0

  dmCb.llPrivEnabled = FALSE;
   18d74:	2200      	movs	r2, #0
  dmCb.resetting = FALSE;

  /* register with the HCI event interface */
  HciEvtRegister(dmHciEvtCback);
   18d76:	4804      	ldr	r0, [pc, #16]	; (18d88 <DmHandlerInit+0x18>)
  dmCb.handlerId = handlerId;
   18d78:	7319      	strb	r1, [r3, #12]
  dmCb.llPrivEnabled = FALSE;
   18d7a:	759a      	strb	r2, [r3, #22]
  dmCb.resetting = FALSE;
   18d7c:	741a      	strb	r2, [r3, #16]
  HciEvtRegister(dmHciEvtCback);
   18d7e:	f7f7 bbb9 	b.w	104f4 <HciEvtRegister>
   18d82:	bf00      	nop
   18d84:	10005b04 	.word	0x10005b04
   18d88:	00018cf9 	.word	0x00018cf9

00018d8c <DmHandler>:
 */
/*************************************************************************************************/
void DmHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
  /* Handle message */
  if (pMsg != NULL)
   18d8c:	b151      	cbz	r1, 18da4 <DmHandler+0x18>
  {
    WSF_ASSERT(DM_ID_FROM_MSG(pMsg->event) < DM_NUM_IDS);

    /* if DM not resetting */
    if (!dmCb.resetting)
   18d8e:	4b06      	ldr	r3, [pc, #24]	; (18da8 <DmHandler+0x1c>)
   18d90:	7c1b      	ldrb	r3, [r3, #16]
   18d92:	b93b      	cbnz	r3, 18da4 <DmHandler+0x18>
    {
      /* route message to DM component handling function */
      (*(dmFcnIfTbl[DM_ID_FROM_MSG(pMsg->event)]->msgHandler))(pMsg);
   18d94:	788b      	ldrb	r3, [r1, #2]
   18d96:	4a05      	ldr	r2, [pc, #20]	; (18dac <DmHandler+0x20>)
   18d98:	091b      	lsrs	r3, r3, #4
   18d9a:	4608      	mov	r0, r1
   18d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   18da0:	689b      	ldr	r3, [r3, #8]
   18da2:	4718      	bx	r3
  /* Handle events */
  else if (event)
  {

  }
}
   18da4:	4770      	bx	lr
   18da6:	bf00      	nop
   18da8:	10005b04 	.word	0x10005b04
   18dac:	10002b98 	.word	0x10002b98

00018db0 <DmLlPrivEnabled>:
 *  \return TRUE if LL Privacy is enabled. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t DmLlPrivEnabled(void)
{
  return dmCb.llPrivEnabled;
   18db0:	4b01      	ldr	r3, [pc, #4]	; (18db8 <DmLlPrivEnabled+0x8>)
}
   18db2:	7d98      	ldrb	r0, [r3, #22]
   18db4:	4770      	bx	lr
   18db6:	bf00      	nop
   18db8:	10005b04 	.word	0x10005b04

00018dbc <DmLlAddrType>:
uint8_t DmLlAddrType(uint8_t addrType)
{
  uint8_t llAddrType = addrType;

  /* if LL Privacy is enabled */
  if (dmCb.llPrivEnabled)
   18dbc:	4b04      	ldr	r3, [pc, #16]	; (18dd0 <DmLlAddrType+0x14>)
   18dbe:	7d9b      	ldrb	r3, [r3, #22]
   18dc0:	b12b      	cbz	r3, 18dce <DmLlAddrType+0x12>
  {
    if (addrType == DM_ADDR_PUBLIC)
   18dc2:	b118      	cbz	r0, 18dcc <DmLlAddrType+0x10>
    {
      llAddrType = DM_ADDR_PUBLIC_IDENTITY;
    }
    else if (addrType == DM_ADDR_RANDOM)
    {
      llAddrType = DM_ADDR_RANDOM_IDENTITY;
   18dc4:	2801      	cmp	r0, #1
   18dc6:	bf08      	it	eq
   18dc8:	2003      	moveq	r0, #3
   18dca:	4770      	bx	lr
      llAddrType = DM_ADDR_PUBLIC_IDENTITY;
   18dcc:	2002      	movs	r0, #2
    }
  }

  return llAddrType;
}
   18dce:	4770      	bx	lr
   18dd0:	10005b04 	.word	0x10005b04

00018dd4 <DmHostAddrType>:
uint8_t DmHostAddrType(uint8_t addrType)
{
  uint8_t hostAddrType = addrType;

  /* if LL Privacy is enabled */
  if (dmCb.llPrivEnabled)
   18dd4:	4b05      	ldr	r3, [pc, #20]	; (18dec <DmHostAddrType+0x18>)
   18dd6:	7d9b      	ldrb	r3, [r3, #22]
   18dd8:	b133      	cbz	r3, 18de8 <DmHostAddrType+0x14>
  {
    if (addrType == DM_ADDR_PUBLIC_IDENTITY)
   18dda:	2802      	cmp	r0, #2
   18ddc:	d003      	beq.n	18de6 <DmHostAddrType+0x12>
    {
      hostAddrType = DM_ADDR_PUBLIC;
    }
    else if (addrType == DM_ADDR_RANDOM_IDENTITY)
    {
      hostAddrType = DM_ADDR_RANDOM;
   18dde:	2803      	cmp	r0, #3
   18de0:	bf08      	it	eq
   18de2:	2001      	moveq	r0, #1
   18de4:	4770      	bx	lr
      hostAddrType = DM_ADDR_PUBLIC;
   18de6:	2000      	movs	r0, #0
    }
  }

  return hostAddrType;
}
   18de8:	4770      	bx	lr
   18dea:	bf00      	nop
   18dec:	10005b04 	.word	0x10005b04

00018df0 <DmSizeOfEvt>:
uint16_t DmSizeOfEvt(dmEvt_t *pDmEvt)
{
  uint16_t len;

  /* if a valid DM event ID */
  if ((pDmEvt->hdr.event >= DM_CBACK_START) && (pDmEvt->hdr.event <= DM_CBACK_END))
   18df0:	7883      	ldrb	r3, [r0, #2]
   18df2:	3b20      	subs	r3, #32
   18df4:	b2da      	uxtb	r2, r3
   18df6:	2a48      	cmp	r2, #72	; 0x48
  {
    len = dmEvtCbackLen[pDmEvt->hdr.event - DM_CBACK_START];
   18df8:	bf9a      	itte	ls
   18dfa:	4a02      	ldrls	r2, [pc, #8]	; (18e04 <DmSizeOfEvt+0x14>)
   18dfc:	f832 0013 	ldrhls.w	r0, [r2, r3, lsl #1]
  }
  else
  {
    len = sizeof(wsfMsgHdr_t);
   18e00:	2004      	movhi	r0, #4
  }

  return len;
}
   18e02:	4770      	bx	lr
   18e04:	00024c90 	.word	0x00024c90

00018e08 <dmPrivMsgHandler>:
 */
/*************************************************************************************************/
void dmPrivMsgHandler(wsfMsgHdr_t *pMsg)
{
  /* execute action function */
  (*dmPrivAct[DM_MSG_MASK(pMsg->event)])((dmPrivMsg_t *) pMsg);
   18e08:	7883      	ldrb	r3, [r0, #2]
   18e0a:	4a03      	ldr	r2, [pc, #12]	; (18e18 <dmPrivMsgHandler+0x10>)
   18e0c:	f003 030f 	and.w	r3, r3, #15
   18e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   18e14:	4718      	bx	r3
   18e16:	bf00      	nop
   18e18:	00024d74 	.word	0x00024d74

00018e1c <dmPrivReset>:
 */
/*************************************************************************************************/
void dmPrivReset(void)
{
  /* initialize control block */
  dmPrivCb.inProgress = 0;
   18e1c:	4902      	ldr	r1, [pc, #8]	; (18e28 <dmPrivReset+0xc>)
  dmCb.llPrivEnabled = FALSE;
   18e1e:	4a03      	ldr	r2, [pc, #12]	; (18e2c <dmPrivReset+0x10>)
  dmPrivCb.inProgress = 0;
   18e20:	2300      	movs	r3, #0
   18e22:	70cb      	strb	r3, [r1, #3]
  dmCb.llPrivEnabled = FALSE;
   18e24:	7593      	strb	r3, [r2, #22]
}
   18e26:	4770      	bx	lr
   18e28:	10005b1c 	.word	0x10005b1c
   18e2c:	10005b04 	.word	0x10005b04

00018e30 <dmPrivActGenAddrAesCmpl>:
  memcpy(pAddrEvt->addr, pMsg->aes.pCiphertext, DM_PRIV_HASH_LEN);
   18e30:	6842      	ldr	r2, [r0, #4]
   18e32:	8811      	ldrh	r1, [r2, #0]
   18e34:	7892      	ldrb	r2, [r2, #2]
   18e36:	7182      	strb	r2, [r0, #6]
  memcpy(pAddrEvt->addr + DM_PRIV_HASH_LEN, dmPrivCb.genAddrBuf, DM_PRIV_PRAND_LEN);
   18e38:	4a08      	ldr	r2, [pc, #32]	; (18e5c <dmPrivActGenAddrAesCmpl+0x2c>)
  memcpy(pAddrEvt->addr, pMsg->aes.pCiphertext, DM_PRIV_HASH_LEN);
   18e3a:	8081      	strh	r1, [r0, #4]
  memcpy(pAddrEvt->addr + DM_PRIV_HASH_LEN, dmPrivCb.genAddrBuf, DM_PRIV_PRAND_LEN);
   18e3c:	7b11      	ldrb	r1, [r2, #12]
   18e3e:	f8b2 c00a 	ldrh.w	ip, [r2, #10]
   18e42:	7241      	strb	r1, [r0, #9]
  dmPrivCb.inProgress &= ~DM_PRIV_INPROGRESS_GEN_ADDR;
   18e44:	78d1      	ldrb	r1, [r2, #3]
  memcpy(pAddrEvt->addr + DM_PRIV_HASH_LEN, dmPrivCb.genAddrBuf, DM_PRIV_PRAND_LEN);
   18e46:	f8a0 c007 	strh.w	ip, [r0, #7]
  dmPrivCb.inProgress &= ~DM_PRIV_INPROGRESS_GEN_ADDR;
   18e4a:	f021 0102 	bic.w	r1, r1, #2
   18e4e:	70d1      	strb	r1, [r2, #3]
  (*dmCb.cback)((dmEvt_t *) pAddrEvt);
   18e50:	4a03      	ldr	r2, [pc, #12]	; (18e60 <dmPrivActGenAddrAesCmpl+0x30>)
  pAddrEvt->hdr.event = DM_PRIV_GENERATE_ADDR_IND;
   18e52:	2138      	movs	r1, #56	; 0x38
   18e54:	8041      	strh	r1, [r0, #2]
  (*dmCb.cback)((dmEvt_t *) pAddrEvt);
   18e56:	6893      	ldr	r3, [r2, #8]
   18e58:	4718      	bx	r3
   18e5a:	bf00      	nop
   18e5c:	10005b1c 	.word	0x10005b1c
   18e60:	10005b04 	.word	0x10005b04

00018e64 <dmPrivActResAddrAesCmpl>:
{
   18e64:	b410      	push	{r4}
  if (memcmp(dmPrivCb.hash, pMsg->aes.pCiphertext, DM_PRIV_HASH_LEN) == 0)
   18e66:	4b0f      	ldr	r3, [pc, #60]	; (18ea4 <dmPrivActResAddrAesCmpl+0x40>)
   18e68:	6842      	ldr	r2, [r0, #4]
   18e6a:	781c      	ldrb	r4, [r3, #0]
   18e6c:	7811      	ldrb	r1, [r2, #0]
   18e6e:	428c      	cmp	r4, r1
   18e70:	d00c      	beq.n	18e8c <dmPrivActResAddrAesCmpl+0x28>
    pMsg->hdr.status = HCI_ERR_AUTH_FAILURE;
   18e72:	2205      	movs	r2, #5
   18e74:	70c2      	strb	r2, [r0, #3]
  dmPrivCb.inProgress &= ~DM_PRIV_INPROGRESS_RES_ADDR;
   18e76:	78da      	ldrb	r2, [r3, #3]
  (*dmCb.cback)((dmEvt_t *) pMsg);
   18e78:	4c0b      	ldr	r4, [pc, #44]	; (18ea8 <dmPrivActResAddrAesCmpl+0x44>)
  dmPrivCb.inProgress &= ~DM_PRIV_INPROGRESS_RES_ADDR;
   18e7a:	f022 0201 	bic.w	r2, r2, #1
   18e7e:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.event = DM_PRIV_RESOLVED_ADDR_IND;
   18e80:	2137      	movs	r1, #55	; 0x37
  (*dmCb.cback)((dmEvt_t *) pMsg);
   18e82:	68a3      	ldr	r3, [r4, #8]
}
   18e84:	f85d 4b04 	ldr.w	r4, [sp], #4
  pMsg->hdr.event = DM_PRIV_RESOLVED_ADDR_IND;
   18e88:	7081      	strb	r1, [r0, #2]
  (*dmCb.cback)((dmEvt_t *) pMsg);
   18e8a:	4718      	bx	r3
  if (memcmp(dmPrivCb.hash, pMsg->aes.pCiphertext, DM_PRIV_HASH_LEN) == 0)
   18e8c:	7851      	ldrb	r1, [r2, #1]
   18e8e:	785c      	ldrb	r4, [r3, #1]
   18e90:	428c      	cmp	r4, r1
   18e92:	f102 0201 	add.w	r2, r2, #1
   18e96:	d1ec      	bne.n	18e72 <dmPrivActResAddrAesCmpl+0xe>
   18e98:	7899      	ldrb	r1, [r3, #2]
   18e9a:	7852      	ldrb	r2, [r2, #1]
   18e9c:	4291      	cmp	r1, r2
   18e9e:	d1e8      	bne.n	18e72 <dmPrivActResAddrAesCmpl+0xe>
    pMsg->hdr.status = HCI_SUCCESS;
   18ea0:	2200      	movs	r2, #0
   18ea2:	e7e7      	b.n	18e74 <dmPrivActResAddrAesCmpl+0x10>
   18ea4:	10005b1c 	.word	0x10005b1c
   18ea8:	10005b04 	.word	0x10005b04

00018eac <dmPrivActAddDevToResList>:
  dmPrivCb.enableLlPriv = pDev->enableLlPriv;
   18eac:	4a07      	ldr	r2, [pc, #28]	; (18ecc <dmPrivActAddDevToResList+0x20>)
{
   18eae:	4601      	mov	r1, r0
  dmPrivCb.addDevToResListParam = pMsg->hdr.param;
   18eb0:	4603      	mov	r3, r0
  dmPrivCb.enableLlPriv = pDev->enableLlPriv;
   18eb2:	f890 002b 	ldrb.w	r0, [r0, #43]	; 0x2b
   18eb6:	7210      	strb	r0, [r2, #8]
  dmPrivCb.addDevToResListParam = pMsg->hdr.param;
   18eb8:	f833 0b1b 	ldrh.w	r0, [r3], #27
   18ebc:	8090      	strh	r0, [r2, #4]
  HciLeAddDeviceToResolvingListCmd(pDev->addrType, pDev->peerAddr, pDev->peerIrk, pDev->localIrk);
   18ebe:	7908      	ldrb	r0, [r1, #4]
   18ec0:	f101 020b 	add.w	r2, r1, #11
   18ec4:	3105      	adds	r1, #5
   18ec6:	f7f8 bd2b 	b.w	11920 <HciLeAddDeviceToResolvingListCmd>
   18eca:	bf00      	nop
   18ecc:	10005b1c 	.word	0x10005b1c

00018ed0 <dmPrivActRemDevFromResList>:
  dmPrivCb.remDevFromResListParam = pMsg->hdr.param;
   18ed0:	4601      	mov	r1, r0
   18ed2:	4b03      	ldr	r3, [pc, #12]	; (18ee0 <dmPrivActRemDevFromResList+0x10>)
   18ed4:	f831 2b05 	ldrh.w	r2, [r1], #5
   18ed8:	80da      	strh	r2, [r3, #6]
  HciLeRemoveDeviceFromResolvingList(pDev->addrType, pDev->peerAddr);
   18eda:	7900      	ldrb	r0, [r0, #4]
   18edc:	f7f8 bd76 	b.w	119cc <HciLeRemoveDeviceFromResolvingList>
   18ee0:	10005b1c 	.word	0x10005b1c

00018ee4 <dmPrivActClearResList>:
  HciLeClearResolvingList();
   18ee4:	f7f8 bdac 	b.w	11a40 <HciLeClearResolvingList>

00018ee8 <dmPrivActSetAddrResEnable>:
  dmPrivCb.addrResEnable = enable;
   18ee8:	4b02      	ldr	r3, [pc, #8]	; (18ef4 <dmPrivActSetAddrResEnable+0xc>)
  dmPrivSetAddrResEnable(pAddrRes->enable);
   18eea:	7900      	ldrb	r0, [r0, #4]
  dmPrivCb.addrResEnable = enable;
   18eec:	7258      	strb	r0, [r3, #9]
  HciLeSetAddrResolutionEnable(enable);
   18eee:	f7f8 be07 	b.w	11b00 <HciLeSetAddrResolutionEnable>
   18ef2:	bf00      	nop
   18ef4:	10005b1c 	.word	0x10005b1c

00018ef8 <dmPrivActSetPrivacyMode>:
  HciLeSetPrivacyModeCmd(pPrivacyMode->addrType, pPrivacyMode->peerAddr, pPrivacyMode->mode);
   18ef8:	7ac2      	ldrb	r2, [r0, #11]
   18efa:	1d41      	adds	r1, r0, #5
   18efc:	7900      	ldrb	r0, [r0, #4]
   18efe:	f7f8 be33 	b.w	11b68 <HciLeSetPrivacyModeCmd>
   18f02:	bf00      	nop

00018f04 <dmPrivHciHandler>:
  switch (pEvent->hdr.event)
   18f04:	7883      	ldrb	r3, [r0, #2]
   18f06:	3b15      	subs	r3, #21
{
   18f08:	b570      	push	{r4, r5, r6, lr}
   18f0a:	4604      	mov	r4, r0
  switch (pEvent->hdr.event)
   18f0c:	2b05      	cmp	r3, #5
   18f0e:	d858      	bhi.n	18fc2 <dmPrivHciHandler+0xbe>
   18f10:	e8df f003 	tbb	[pc, r3]
   18f14:	392b200e 	.word	0x392b200e
   18f18:	0341      	.short	0x0341
      if (pEvent->hdr.status == HCI_SUCCESS)
   18f1a:	78c3      	ldrb	r3, [r0, #3]
      pEvent->hdr.event = DM_PRIV_SET_ADDR_RES_ENABLE_IND;
   18f1c:	223f      	movs	r2, #63	; 0x3f
   18f1e:	7082      	strb	r2, [r0, #2]
      if (pEvent->hdr.status == HCI_SUCCESS)
   18f20:	2b00      	cmp	r3, #0
   18f22:	d040      	beq.n	18fa6 <dmPrivHciHandler+0xa2>
   18f24:	4d27      	ldr	r5, [pc, #156]	; (18fc4 <dmPrivHciHandler+0xc0>)
  (*dmCb.cback)((dmEvt_t *)pEvent);
   18f26:	68ab      	ldr	r3, [r5, #8]
   18f28:	4620      	mov	r0, r4
}
   18f2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  (*dmCb.cback)((dmEvt_t *)pEvent);
   18f2e:	4718      	bx	r3
      pEvent->hdr.param = dmPrivCb.addDevToResListParam;
   18f30:	4b25      	ldr	r3, [pc, #148]	; (18fc8 <dmPrivHciHandler+0xc4>)
      if ((pEvent->hdr.status == HCI_SUCCESS) && dmPrivCb.enableLlPriv && !dmCb.llPrivEnabled)
   18f32:	4d24      	ldr	r5, [pc, #144]	; (18fc4 <dmPrivHciHandler+0xc0>)
      pEvent->hdr.param = dmPrivCb.addDevToResListParam;
   18f34:	889a      	ldrh	r2, [r3, #4]
   18f36:	8002      	strh	r2, [r0, #0]
      pEvent->hdr.event = DM_PRIV_ADD_DEV_TO_RES_LIST_IND;
   18f38:	213a      	movs	r1, #58	; 0x3a
   18f3a:	7081      	strb	r1, [r0, #2]
      if ((pEvent->hdr.status == HCI_SUCCESS) && dmPrivCb.enableLlPriv && !dmCb.llPrivEnabled)
   18f3c:	7a1a      	ldrb	r2, [r3, #8]
   18f3e:	2a00      	cmp	r2, #0
   18f40:	d0f1      	beq.n	18f26 <dmPrivHciHandler+0x22>
   18f42:	78c1      	ldrb	r1, [r0, #3]
   18f44:	7daa      	ldrb	r2, [r5, #22]
   18f46:	430a      	orrs	r2, r1
   18f48:	d1ed      	bne.n	18f26 <dmPrivHciHandler+0x22>
  dmPrivCb.addrResEnable = enable;
   18f4a:	2001      	movs	r0, #1
   18f4c:	7258      	strb	r0, [r3, #9]
  HciLeSetAddrResolutionEnable(enable);
   18f4e:	f7f8 fdd7 	bl	11b00 <HciLeSetAddrResolutionEnable>
}
   18f52:	e7e8      	b.n	18f26 <dmPrivHciHandler+0x22>
      pEvent->hdr.param = dmPrivCb.remDevFromResListParam;
   18f54:	4b1c      	ldr	r3, [pc, #112]	; (18fc8 <dmPrivHciHandler+0xc4>)
   18f56:	4d1b      	ldr	r5, [pc, #108]	; (18fc4 <dmPrivHciHandler+0xc0>)
   18f58:	88db      	ldrh	r3, [r3, #6]
   18f5a:	8003      	strh	r3, [r0, #0]
      pEvent->hdr.event = DM_PRIV_REM_DEV_FROM_RES_LIST_IND;
   18f5c:	223b      	movs	r2, #59	; 0x3b
  (*dmCb.cback)((dmEvt_t *)pEvent);
   18f5e:	68ab      	ldr	r3, [r5, #8]
      pEvent->hdr.event = DM_PRIV_REM_DEV_FROM_RES_LIST_IND;
   18f60:	7082      	strb	r2, [r0, #2]
  (*dmCb.cback)((dmEvt_t *)pEvent);
   18f62:	4620      	mov	r0, r4
}
   18f64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  (*dmCb.cback)((dmEvt_t *)pEvent);
   18f68:	4718      	bx	r3
      if ((pEvent->hdr.status == HCI_SUCCESS) && dmCb.llPrivEnabled)
   18f6a:	78c0      	ldrb	r0, [r0, #3]
   18f6c:	4d15      	ldr	r5, [pc, #84]	; (18fc4 <dmPrivHciHandler+0xc0>)
      pEvent->hdr.event = DM_PRIV_CLEAR_RES_LIST_IND;
   18f6e:	233c      	movs	r3, #60	; 0x3c
   18f70:	70a3      	strb	r3, [r4, #2]
      if ((pEvent->hdr.status == HCI_SUCCESS) && dmCb.llPrivEnabled)
   18f72:	2800      	cmp	r0, #0
   18f74:	d1d7      	bne.n	18f26 <dmPrivHciHandler+0x22>
   18f76:	7dab      	ldrb	r3, [r5, #22]
   18f78:	2b00      	cmp	r3, #0
   18f7a:	d0d4      	beq.n	18f26 <dmPrivHciHandler+0x22>
  dmPrivCb.addrResEnable = enable;
   18f7c:	4b12      	ldr	r3, [pc, #72]	; (18fc8 <dmPrivHciHandler+0xc4>)
   18f7e:	7258      	strb	r0, [r3, #9]
  HciLeSetAddrResolutionEnable(enable);
   18f80:	f7f8 fdbe 	bl	11b00 <HciLeSetAddrResolutionEnable>
}
   18f84:	e7cf      	b.n	18f26 <dmPrivHciHandler+0x22>
      pEvent->hdr.event = DM_PRIV_READ_PEER_RES_ADDR_IND;
   18f86:	4d0f      	ldr	r5, [pc, #60]	; (18fc4 <dmPrivHciHandler+0xc0>)
   18f88:	233d      	movs	r3, #61	; 0x3d
   18f8a:	7083      	strb	r3, [r0, #2]
  (*dmCb.cback)((dmEvt_t *)pEvent);
   18f8c:	68ab      	ldr	r3, [r5, #8]
   18f8e:	4620      	mov	r0, r4
}
   18f90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  (*dmCb.cback)((dmEvt_t *)pEvent);
   18f94:	4718      	bx	r3
      pEvent->hdr.event = DM_PRIV_READ_LOCAL_RES_ADDR_IND;
   18f96:	4d0b      	ldr	r5, [pc, #44]	; (18fc4 <dmPrivHciHandler+0xc0>)
   18f98:	233e      	movs	r3, #62	; 0x3e
   18f9a:	7083      	strb	r3, [r0, #2]
  (*dmCb.cback)((dmEvt_t *)pEvent);
   18f9c:	68ab      	ldr	r3, [r5, #8]
   18f9e:	4620      	mov	r0, r4
}
   18fa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  (*dmCb.cback)((dmEvt_t *)pEvent);
   18fa4:	4718      	bx	r3
        dmCb.llPrivEnabled = dmPrivCb.addrResEnable;
   18fa6:	4a08      	ldr	r2, [pc, #32]	; (18fc8 <dmPrivHciHandler+0xc4>)
   18fa8:	4d06      	ldr	r5, [pc, #24]	; (18fc4 <dmPrivHciHandler+0xc0>)
   18faa:	7a51      	ldrb	r1, [r2, #9]
   18fac:	75a9      	strb	r1, [r5, #22]
        dmDevPassEvtToDevPriv(dmCb.llPrivEnabled ? DM_DEV_PRIV_MSG_RPA_STOP : DM_DEV_PRIV_MSG_RPA_START,
   18fae:	2900      	cmp	r1, #0
   18fb0:	461a      	mov	r2, r3
   18fb2:	bf15      	itete	ne
   18fb4:	2101      	movne	r1, #1
   18fb6:	2100      	moveq	r1, #0
   18fb8:	2015      	movne	r0, #21
   18fba:	2014      	moveq	r0, #20
   18fbc:	f7ff fe16 	bl	18bec <dmDevPassEvtToDevPriv>
   18fc0:	e7b1      	b.n	18f26 <dmPrivHciHandler+0x22>
}
   18fc2:	bd70      	pop	{r4, r5, r6, pc}
   18fc4:	10005b04 	.word	0x10005b04
   18fc8:	10005b1c 	.word	0x10005b1c

00018fcc <dmPrivActResolveAddr>:
{
   18fcc:	b510      	push	{r4, lr}
  if ((dmPrivCb.inProgress & DM_PRIV_INPROGRESS_RES_ADDR) == 0)
   18fce:	4c18      	ldr	r4, [pc, #96]	; (19030 <dmPrivActResolveAddr+0x64>)
   18fd0:	78e3      	ldrb	r3, [r4, #3]
   18fd2:	f013 0c01 	ands.w	ip, r3, #1
{
   18fd6:	b086      	sub	sp, #24
   18fd8:	4601      	mov	r1, r0
  if ((dmPrivCb.inProgress & DM_PRIV_INPROGRESS_RES_ADDR) == 0)
   18fda:	d008      	beq.n	18fee <dmPrivActResolveAddr+0x22>
    (*dmCb.cback)((dmEvt_t *) pMsg);
   18fdc:	4b15      	ldr	r3, [pc, #84]	; (19034 <dmPrivActResolveAddr+0x68>)
   18fde:	689b      	ldr	r3, [r3, #8]
    pMsg->hdr.event = DM_PRIV_RESOLVED_ADDR_IND;
   18fe0:	f240 7237 	movw	r2, #1847	; 0x737
   18fe4:	8042      	strh	r2, [r0, #2]
}
   18fe6:	b006      	add	sp, #24
   18fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    (*dmCb.cback)((dmEvt_t *) pMsg);
   18fec:	4718      	bx	r3
    dmPrivCb.inProgress |= DM_PRIV_INPROGRESS_RES_ADDR;
   18fee:	f043 0301 	orr.w	r3, r3, #1
   18ff2:	70e3      	strb	r3, [r4, #3]
    SecAes(pMsg->apiResolveAddr.irk, buf, dmCb.handlerId,
   18ff4:	4b0f      	ldr	r3, [pc, #60]	; (19034 <dmPrivActResolveAddr+0x68>)
    memcpy(dmPrivCb.hash, pMsg->apiResolveAddr.addr, DM_PRIV_HASH_LEN);
   18ff6:	8a82      	ldrh	r2, [r0, #20]
   18ff8:	8022      	strh	r2, [r4, #0]
    SecAes(pMsg->apiResolveAddr.irk, buf, dmCb.handlerId,
   18ffa:	7b1a      	ldrb	r2, [r3, #12]
    memcpy(dmPrivCb.hash, pMsg->apiResolveAddr.addr, DM_PRIV_HASH_LEN);
   18ffc:	7d83      	ldrb	r3, [r0, #22]
   18ffe:	70a3      	strb	r3, [r4, #2]
    SecAes(pMsg->apiResolveAddr.irk, buf, dmCb.handlerId,
   19000:	2461      	movs	r4, #97	; 0x61
   19002:	f830 3b04 	ldrh.w	r3, [r0], #4
   19006:	9400      	str	r4, [sp, #0]
    memcpy(buf, &pMsg->apiResolveAddr.addr[3], DM_PRIV_PRAND_LEN);
   19008:	f8b1 4017 	ldrh.w	r4, [r1, #23]
   1900c:	7e49      	ldrb	r1, [r1, #25]
   1900e:	f88d 100a 	strb.w	r1, [sp, #10]
    SecAes(pMsg->apiResolveAddr.irk, buf, dmCb.handlerId,
   19012:	a902      	add	r1, sp, #8
    memset(buf + DM_PRIV_PRAND_LEN, 0, (DM_PRIV_PLAINTEXT_LEN - DM_PRIV_PRAND_LEN));
   19014:	f8cd c00b 	str.w	ip, [sp, #11]
   19018:	f8cd c00f 	str.w	ip, [sp, #15]
   1901c:	f8cd c013 	str.w	ip, [sp, #19]
   19020:	f88d c017 	strb.w	ip, [sp, #23]
    memcpy(buf, &pMsg->apiResolveAddr.addr[3], DM_PRIV_PRAND_LEN);
   19024:	f8ad 4008 	strh.w	r4, [sp, #8]
    SecAes(pMsg->apiResolveAddr.irk, buf, dmCb.handlerId,
   19028:	f7f6 fdce 	bl	fbc8 <SecAes>
}
   1902c:	b006      	add	sp, #24
   1902e:	bd10      	pop	{r4, pc}
   19030:	10005b1c 	.word	0x10005b1c
   19034:	10005b04 	.word	0x10005b04

00019038 <dmPrivActGenAddr>:
{
   19038:	b570      	push	{r4, r5, r6, lr}
  if ((dmPrivCb.inProgress & DM_PRIV_INPROGRESS_GEN_ADDR) == 0)
   1903a:	4c1a      	ldr	r4, [pc, #104]	; (190a4 <dmPrivActGenAddr+0x6c>)
   1903c:	78e3      	ldrb	r3, [r4, #3]
   1903e:	f013 0602 	ands.w	r6, r3, #2
{
   19042:	b082      	sub	sp, #8
   19044:	4605      	mov	r5, r0
  if ((dmPrivCb.inProgress & DM_PRIV_INPROGRESS_GEN_ADDR) == 0)
   19046:	d008      	beq.n	1905a <dmPrivActGenAddr+0x22>
    (*dmCb.cback)((dmEvt_t *) pMsg);
   19048:	4b17      	ldr	r3, [pc, #92]	; (190a8 <dmPrivActGenAddr+0x70>)
   1904a:	689b      	ldr	r3, [r3, #8]
    pMsg->hdr.event = DM_PRIV_GENERATE_ADDR_IND;
   1904c:	f44f 62e7 	mov.w	r2, #1848	; 0x738
   19050:	8042      	strh	r2, [r0, #2]
}
   19052:	b002      	add	sp, #8
   19054:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    (*dmCb.cback)((dmEvt_t *) pMsg);
   19058:	4718      	bx	r3
    SecRand(dmPrivCb.genAddrBuf, DM_PRIV_PRAND_LEN);
   1905a:	f104 000a 	add.w	r0, r4, #10
   1905e:	2103      	movs	r1, #3
   19060:	f7f7 f816 	bl	10090 <SecRand>
    dmPrivCb.genAddrBuf[2] = (dmPrivCb.genAddrBuf[2] & 0x3F) | DM_RAND_ADDR_RESOLV;
   19064:	7b23      	ldrb	r3, [r4, #12]
    dmPrivCb.inProgress |= DM_PRIV_INPROGRESS_GEN_ADDR;
   19066:	78e2      	ldrb	r2, [r4, #3]
    memset(dmPrivCb.genAddrBuf + DM_PRIV_PRAND_LEN, 0, (DM_PRIV_PLAINTEXT_LEN - DM_PRIV_PRAND_LEN));
   19068:	f8c4 600d 	str.w	r6, [r4, #13]
    dmPrivCb.inProgress |= DM_PRIV_INPROGRESS_GEN_ADDR;
   1906c:	f042 0202 	orr.w	r2, r2, #2
    dmPrivCb.genAddrBuf[2] = (dmPrivCb.genAddrBuf[2] & 0x3F) | DM_RAND_ADDR_RESOLV;
   19070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    dmPrivCb.inProgress |= DM_PRIV_INPROGRESS_GEN_ADDR;
   19074:	70e2      	strb	r2, [r4, #3]
    SecAes(pMsg->apiGenerateAddr.irk, dmPrivCb.genAddrBuf, dmCb.handlerId,
   19076:	4628      	mov	r0, r5
    dmPrivCb.genAddrBuf[2] = (dmPrivCb.genAddrBuf[2] & 0x3F) | DM_RAND_ADDR_RESOLV;
   19078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    SecAes(pMsg->apiGenerateAddr.irk, dmPrivCb.genAddrBuf, dmCb.handlerId,
   1907c:	4a0a      	ldr	r2, [pc, #40]	; (190a8 <dmPrivActGenAddr+0x70>)
    memset(dmPrivCb.genAddrBuf + DM_PRIV_PRAND_LEN, 0, (DM_PRIV_PLAINTEXT_LEN - DM_PRIV_PRAND_LEN));
   1907e:	f8c4 6011 	str.w	r6, [r4, #17]
   19082:	f8c4 6015 	str.w	r6, [r4, #21]
   19086:	7666      	strb	r6, [r4, #25]
    dmPrivCb.genAddrBuf[2] = (dmPrivCb.genAddrBuf[2] & 0x3F) | DM_RAND_ADDR_RESOLV;
   19088:	7323      	strb	r3, [r4, #12]
    memset(dmPrivCb.genAddrBuf + DM_PRIV_PRAND_LEN, 0, (DM_PRIV_PLAINTEXT_LEN - DM_PRIV_PRAND_LEN));
   1908a:	f104 010d 	add.w	r1, r4, #13
    SecAes(pMsg->apiGenerateAddr.irk, dmPrivCb.genAddrBuf, dmCb.handlerId,
   1908e:	2468      	movs	r4, #104	; 0x68
   19090:	f830 3b04 	ldrh.w	r3, [r0], #4
   19094:	7b12      	ldrb	r2, [r2, #12]
   19096:	9400      	str	r4, [sp, #0]
   19098:	3903      	subs	r1, #3
   1909a:	f7f6 fd95 	bl	fbc8 <SecAes>
}
   1909e:	b002      	add	sp, #8
   190a0:	bd70      	pop	{r4, r5, r6, pc}
   190a2:	bf00      	nop
   190a4:	10005b1c 	.word	0x10005b1c
   190a8:	10005b04 	.word	0x10005b04

000190ac <DmPrivInit>:
 *  \return None.
 */
/*************************************************************************************************/
void DmPrivInit(void)
{
  dmFcnIfTbl[DM_ID_PRIV] = (dmFcnIf_t *) &dmPrivFcnIf;
   190ac:	4b01      	ldr	r3, [pc, #4]	; (190b4 <DmPrivInit+0x8>)
   190ae:	4a02      	ldr	r2, [pc, #8]	; (190b8 <DmPrivInit+0xc>)
   190b0:	619a      	str	r2, [r3, #24]
}
   190b2:	4770      	bx	lr
   190b4:	10002b98 	.word	0x10002b98
   190b8:	00024d98 	.word	0x00024d98

000190bc <DmPrivResolveAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmPrivResolveAddr(uint8_t *pAddr, uint8_t *pIrk, uint16_t param)
{
   190bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   190be:	4607      	mov	r7, r0
  dmPrivApiResolveAddr_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmPrivApiResolveAddr_t))) != NULL)
   190c0:	201a      	movs	r0, #26
{
   190c2:	460e      	mov	r6, r1
   190c4:	4615      	mov	r5, r2
  if ((pMsg = WsfMsgAlloc(sizeof(dmPrivApiResolveAddr_t))) != NULL)
   190c6:	f7fa fba5 	bl	13814 <WsfMsgAlloc>
   190ca:	b198      	cbz	r0, 190f4 <DmPrivResolveAddr+0x38>
  {
    pMsg->hdr.event = DM_PRIV_MSG_API_RESOLVE_ADDR;
   190cc:	2360      	movs	r3, #96	; 0x60
   190ce:	4604      	mov	r4, r0
   190d0:	7083      	strb	r3, [r0, #2]
    pMsg->hdr.param = param;
    Calc128Cpy(pMsg->irk, pIrk);
   190d2:	4631      	mov	r1, r6
    pMsg->hdr.param = param;
   190d4:	f820 5b04 	strh.w	r5, [r0], #4
    Calc128Cpy(pMsg->irk, pIrk);
   190d8:	f003 f960 	bl	1c39c <Calc128Cpy>
    BdaCpy(pMsg->addr, pAddr);
   190dc:	4639      	mov	r1, r7
   190de:	f104 0014 	add.w	r0, r4, #20
   190e2:	f003 f937 	bl	1c354 <BdaCpy>
    WsfMsgSend(dmCb.handlerId, pMsg);
   190e6:	4b04      	ldr	r3, [pc, #16]	; (190f8 <DmPrivResolveAddr+0x3c>)
   190e8:	4621      	mov	r1, r4
   190ea:	7b18      	ldrb	r0, [r3, #12]
  }
}
   190ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
   190f0:	f7fa bb9c 	b.w	1382c <WsfMsgSend>
}
   190f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   190f6:	bf00      	nop
   190f8:	10005b04 	.word	0x10005b04

000190fc <DmPrivAddDevToResList>:
 *          to resolving list to enable address resolution in the Controller.
 */
/*************************************************************************************************/
void DmPrivAddDevToResList(uint8_t addrType, const uint8_t *pIdentityAddr, uint8_t *pPeerIrk,
                           uint8_t *pLocalIrk, bool_t enableLlPriv, uint16_t param)
{
   190fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19100:	4607      	mov	r7, r0
  dmPrivApiAddDevToResList_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmPrivApiAddDevToResList_t))) != NULL)
   19102:	202c      	movs	r0, #44	; 0x2c
{
   19104:	f89d 8020 	ldrb.w	r8, [sp, #32]
   19108:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
   1910c:	4689      	mov	r9, r1
   1910e:	4616      	mov	r6, r2
   19110:	461d      	mov	r5, r3
  if ((pMsg = WsfMsgAlloc(sizeof(dmPrivApiAddDevToResList_t))) != NULL)
   19112:	f7fa fb7f 	bl	13814 <WsfMsgAlloc>
   19116:	b1e0      	cbz	r0, 19152 <DmPrivAddDevToResList+0x56>
  {
    pMsg->hdr.event = DM_PRIV_MSG_API_ADD_DEV_TO_RES_LIST;
   19118:	2362      	movs	r3, #98	; 0x62
   1911a:	4604      	mov	r4, r0
   1911c:	7083      	strb	r3, [r0, #2]
    pMsg->hdr.param = param;
   1911e:	f8a0 a000 	strh.w	sl, [r0]
    pMsg->addrType = addrType;
   19122:	7107      	strb	r7, [r0, #4]
    BdaCpy(pMsg->peerAddr, pIdentityAddr);
   19124:	4649      	mov	r1, r9
   19126:	3005      	adds	r0, #5
   19128:	f003 f914 	bl	1c354 <BdaCpy>
    Calc128Cpy(pMsg->peerIrk, pPeerIrk);
   1912c:	4631      	mov	r1, r6
   1912e:	f104 000b 	add.w	r0, r4, #11
   19132:	f003 f933 	bl	1c39c <Calc128Cpy>
    Calc128Cpy(pMsg->localIrk, pLocalIrk);
   19136:	4629      	mov	r1, r5
   19138:	f104 001b 	add.w	r0, r4, #27
   1913c:	f003 f92e 	bl	1c39c <Calc128Cpy>
    pMsg->enableLlPriv = enableLlPriv;
    WsfMsgSend(dmCb.handlerId, pMsg);
   19140:	4b05      	ldr	r3, [pc, #20]	; (19158 <DmPrivAddDevToResList+0x5c>)
    pMsg->enableLlPriv = enableLlPriv;
   19142:	f884 802b 	strb.w	r8, [r4, #43]	; 0x2b
    WsfMsgSend(dmCb.handlerId, pMsg);
   19146:	4621      	mov	r1, r4
   19148:	7b18      	ldrb	r0, [r3, #12]
  }
}
   1914a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
   1914e:	f7fa bb6d 	b.w	1382c <WsfMsgSend>
}
   19152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19156:	bf00      	nop
   19158:	10005b04 	.word	0x10005b04

0001915c <DmPrivClearResList>:
 *  \Note   Address resolution in the Controller will be disabled when resolving list's cleared
 *          successfully.
 */
/*************************************************************************************************/
void DmPrivClearResList(void)
{
   1915c:	b508      	push	{r3, lr}
  dmPrivMsg_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmPrivMsg_t))) != NULL)
   1915e:	202c      	movs	r0, #44	; 0x2c
   19160:	f7fa fb58 	bl	13814 <WsfMsgAlloc>
   19164:	b140      	cbz	r0, 19178 <DmPrivClearResList+0x1c>
  {
    pMsg->hdr.event = DM_PRIV_MSG_API_CLEAR_RES_LIST;
    WsfMsgSend(dmCb.handlerId, pMsg);
   19166:	4b05      	ldr	r3, [pc, #20]	; (1917c <DmPrivClearResList+0x20>)
    pMsg->hdr.event = DM_PRIV_MSG_API_CLEAR_RES_LIST;
   19168:	2264      	movs	r2, #100	; 0x64
   1916a:	7082      	strb	r2, [r0, #2]
    WsfMsgSend(dmCb.handlerId, pMsg);
   1916c:	4601      	mov	r1, r0
   1916e:	7b18      	ldrb	r0, [r3, #12]
  }
}
   19170:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
   19174:	f7fa bb5a 	b.w	1382c <WsfMsgSend>
}
   19178:	bd08      	pop	{r3, pc}
   1917a:	bf00      	nop
   1917c:	10005b04 	.word	0x10005b04

00019180 <DmPrivSetAddrResEnable>:
 *          - Scanning is enabled, or
 *          - (Extended) Create connection or Create Sync command is outstanding.
 */
/*************************************************************************************************/
void DmPrivSetAddrResEnable(bool_t enable)
{
   19180:	b510      	push	{r4, lr}
   19182:	4604      	mov	r4, r0
  dmPrivApiSetAddrResEnable_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmPrivMsg_t))) != NULL)
   19184:	202c      	movs	r0, #44	; 0x2c
   19186:	f7fa fb45 	bl	13814 <WsfMsgAlloc>
   1918a:	b158      	cbz	r0, 191a4 <DmPrivSetAddrResEnable+0x24>
  {
    pMsg->hdr.event = DM_PRIV_MSG_API_SET_ADDR_RES_ENABLE;
   1918c:	4601      	mov	r1, r0
    pMsg->hdr.param = 0;
    pMsg->enable = enable;
    WsfMsgSend(dmCb.handlerId, pMsg);
   1918e:	4b06      	ldr	r3, [pc, #24]	; (191a8 <DmPrivSetAddrResEnable+0x28>)
    pMsg->enable = enable;
   19190:	710c      	strb	r4, [r1, #4]
    pMsg->hdr.event = DM_PRIV_MSG_API_SET_ADDR_RES_ENABLE;
   19192:	2065      	movs	r0, #101	; 0x65
    pMsg->hdr.param = 0;
   19194:	2200      	movs	r2, #0
    pMsg->hdr.event = DM_PRIV_MSG_API_SET_ADDR_RES_ENABLE;
   19196:	7088      	strb	r0, [r1, #2]
    pMsg->hdr.param = 0;
   19198:	800a      	strh	r2, [r1, #0]
  }
}
   1919a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
   1919e:	7b18      	ldrb	r0, [r3, #12]
   191a0:	f7fa bb44 	b.w	1382c <WsfMsgSend>
}
   191a4:	bd10      	pop	{r4, pc}
   191a6:	bf00      	nop
   191a8:	10005b04 	.word	0x10005b04

000191ac <DmPrivSetPrivacyMode>:
 *          - Scanning is enabled, or
 *          - (Extended) Create connection or Create Sync command is outstanding.
 */
/*************************************************************************************************/
void DmPrivSetPrivacyMode(uint8_t addrType, const uint8_t *pIdentityAddr, uint8_t mode)
{
   191ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   191ae:	4606      	mov	r6, r0
  dmPrivApiSetPrivacyMode_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmPrivApiSetPrivacyMode_t))) != NULL)
   191b0:	200c      	movs	r0, #12
{
   191b2:	460f      	mov	r7, r1
   191b4:	4615      	mov	r5, r2
  if ((pMsg = WsfMsgAlloc(sizeof(dmPrivApiSetPrivacyMode_t))) != NULL)
   191b6:	f7fa fb2d 	bl	13814 <WsfMsgAlloc>
   191ba:	b178      	cbz	r0, 191dc <DmPrivSetPrivacyMode+0x30>
  {
    pMsg->hdr.event = DM_PRIV_MSG_API_SET_PRIVACY_MODE;
   191bc:	4604      	mov	r4, r0
   191be:	2366      	movs	r3, #102	; 0x66
   191c0:	7083      	strb	r3, [r0, #2]
    pMsg->addrType = addrType;
    BdaCpy(pMsg->peerAddr, pIdentityAddr);
   191c2:	4639      	mov	r1, r7
   191c4:	3005      	adds	r0, #5
    pMsg->addrType = addrType;
   191c6:	7126      	strb	r6, [r4, #4]
    BdaCpy(pMsg->peerAddr, pIdentityAddr);
   191c8:	f003 f8c4 	bl	1c354 <BdaCpy>
    pMsg->mode = mode;
    WsfMsgSend(dmCb.handlerId, pMsg);
   191cc:	4b04      	ldr	r3, [pc, #16]	; (191e0 <DmPrivSetPrivacyMode+0x34>)
    pMsg->mode = mode;
   191ce:	72e5      	strb	r5, [r4, #11]
    WsfMsgSend(dmCb.handlerId, pMsg);
   191d0:	7b18      	ldrb	r0, [r3, #12]
   191d2:	4621      	mov	r1, r4
  }
}
   191d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
   191d8:	f7fa bb28 	b.w	1382c <WsfMsgSend>
}
   191dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   191de:	bf00      	nop
   191e0:	10005b04 	.word	0x10005b04

000191e4 <dmSecMsgHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmSecMsgHandler(dmSecMsg_t *pMsg)
{
   191e4:	b570      	push	{r4, r5, r6, lr}
   191e6:	4604      	mov	r4, r0
  dmConnCcb_t *pCcb;

  /* look up ccb */
  if ((pCcb = dmConnCcbById((dmConnId_t) pMsg->hdr.param)) != NULL)
   191e8:	7800      	ldrb	r0, [r0, #0]
   191ea:	f7ff f94f 	bl	1848c <dmConnCcbById>
   191ee:	b128      	cbz	r0, 191fc <dmSecMsgHandler+0x18>
  {
    /* process API encrypt req */
    switch (pMsg->hdr.event)
   191f0:	78a3      	ldrb	r3, [r4, #2]
   191f2:	2b50      	cmp	r3, #80	; 0x50
   191f4:	4605      	mov	r5, r0
   191f6:	d00c      	beq.n	19212 <dmSecMsgHandler+0x2e>
   191f8:	2b51      	cmp	r3, #81	; 0x51
   191fa:	d000      	beq.n	191fe <dmSecMsgHandler+0x1a>

    default:
      break;
    }
  }
}
   191fc:	bd70      	pop	{r4, r5, r6, pc}
      if (pMsg->ltkRsp.keyFound)
   191fe:	7d22      	ldrb	r2, [r4, #20]
   19200:	b1ca      	cbz	r2, 19236 <dmSecMsgHandler+0x52>
        pCcb->tmpSecLevel = pMsg->ltkRsp.secLevel;
   19202:	7d63      	ldrb	r3, [r4, #21]
        HciLeLtkReqReplCmd(pCcb->handle, pMsg->ltkRsp.key);
   19204:	8980      	ldrh	r0, [r0, #12]
        pCcb->tmpSecLevel = pMsg->ltkRsp.secLevel;
   19206:	762b      	strb	r3, [r5, #24]
        HciLeLtkReqReplCmd(pCcb->handle, pMsg->ltkRsp.key);
   19208:	1d21      	adds	r1, r4, #4
}
   1920a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        HciLeLtkReqReplCmd(pCcb->handle, pMsg->ltkRsp.key);
   1920e:	f7f7 befd 	b.w	1100c <HciLeLtkReqReplCmd>
      DmConnSetIdle(pCcb->connId, DM_IDLE_DM_ENC, DM_CONN_BUSY);
   19212:	7c00      	ldrb	r0, [r0, #16]
   19214:	2201      	movs	r2, #1
   19216:	2102      	movs	r1, #2
   19218:	f7ff fb6c 	bl	188f4 <DmConnSetIdle>
      pCcb->tmpSecLevel = pMsg->encryptReq.secLevel;
   1921c:	7fa2      	ldrb	r2, [r4, #30]
   1921e:	762a      	strb	r2, [r5, #24]
      pCcb->usingLtk = TRUE;
   19220:	2301      	movs	r3, #1
   19222:	74ab      	strb	r3, [r5, #18]
      HciLeStartEncryptionCmd(pCcb->handle, pMsg->encryptReq.ltk.rand,
   19224:	8ba2      	ldrh	r2, [r4, #28]
   19226:	89a8      	ldrh	r0, [r5, #12]
   19228:	1d23      	adds	r3, r4, #4
   1922a:	f104 0114 	add.w	r1, r4, #20
}
   1922e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HciLeStartEncryptionCmd(pCcb->handle, pMsg->encryptReq.ltk.rand,
   19232:	f7f8 b99f 	b.w	11574 <HciLeStartEncryptionCmd>
        DmConnSetIdle(pCcb->connId, DM_IDLE_DM_ENC, DM_CONN_IDLE);
   19236:	7c00      	ldrb	r0, [r0, #16]
   19238:	2102      	movs	r1, #2
   1923a:	f7ff fb5b 	bl	188f4 <DmConnSetIdle>
        HciLeLtkReqNegReplCmd(pCcb->handle);
   1923e:	89a8      	ldrh	r0, [r5, #12]
}
   19240:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        HciLeLtkReqNegReplCmd(pCcb->handle);
   19244:	f7f7 beac 	b.w	10fa0 <HciLeLtkReqNegReplCmd>

00019248 <dmSecReset>:
 */
/*************************************************************************************************/
void dmSecReset(void)
{
  /* initialize smp database */
  SmpDbInit();
   19248:	f001 bb04 	b.w	1a854 <SmpDbInit>

0001924c <dmSecHciHandler>:
{
   1924c:	b570      	push	{r4, r5, r6, lr}
   1924e:	4604      	mov	r4, r0
   19250:	b084      	sub	sp, #16
  if ((pCcb = dmConnCcbByHandle(pEvent->hdr.param)) != NULL)
   19252:	8800      	ldrh	r0, [r0, #0]
   19254:	f7ff f8f2 	bl	1843c <dmConnCcbByHandle>
   19258:	b130      	cbz	r0, 19268 <dmSecHciHandler+0x1c>
    if (pEvent->hdr.event == HCI_LE_LTK_REQ_CBACK_EVT)
   1925a:	78a3      	ldrb	r3, [r4, #2]
   1925c:	2b10      	cmp	r3, #16
   1925e:	4605      	mov	r5, r0
   19260:	d004      	beq.n	1926c <dmSecHciHandler+0x20>
    else if (pEvent->hdr.event == HCI_ENC_KEY_REFRESH_CMPL_CBACK_EVT ||
   19262:	3b0e      	subs	r3, #14
   19264:	2b01      	cmp	r3, #1
   19266:	d922      	bls.n	192ae <dmSecHciHandler+0x62>
}
   19268:	b004      	add	sp, #16
   1926a:	bd70      	pop	{r4, r5, r6, pc}
      if ((pEvent->leLtkReq.encDiversifier == 0) &&
   1926c:	89e3      	ldrh	r3, [r4, #14]
   1926e:	b96b      	cbnz	r3, 1928c <dmSecHciHandler+0x40>
          (memcmp(pEvent->leLtkReq.randNum, calc128Zeros, HCI_RAND_LEN) == 0))
   19270:	492b      	ldr	r1, [pc, #172]	; (19320 <dmSecHciHandler+0xd4>)
   19272:	2208      	movs	r2, #8
   19274:	1da0      	adds	r0, r4, #6
   19276:	f008 f8b7 	bl	213e8 <memcmp>
      if ((pEvent->leLtkReq.encDiversifier == 0) &&
   1927a:	4606      	mov	r6, r0
   1927c:	b930      	cbnz	r0, 1928c <dmSecHciHandler+0x40>
        if ((pKey = SmpDmGetStk(pCcb->connId, &secLevel)) != NULL)
   1927e:	a902      	add	r1, sp, #8
   19280:	7c28      	ldrb	r0, [r5, #16]
   19282:	f001 ffdb 	bl	1b23c <SmpDmGetStk>
   19286:	4601      	mov	r1, r0
   19288:	2800      	cmp	r0, #0
   1928a:	d141      	bne.n	19310 <dmSecHciHandler+0xc4>
      DmConnSetIdle(pCcb->connId, DM_IDLE_DM_ENC, DM_CONN_BUSY);
   1928c:	7c28      	ldrb	r0, [r5, #16]
   1928e:	2201      	movs	r2, #1
   19290:	2102      	movs	r1, #2
   19292:	f7ff fb2f 	bl	188f4 <DmConnSetIdle>
      pCcb->usingLtk = TRUE;
   19296:	2201      	movs	r2, #1
      (*dmCb.cback)((dmEvt_t *) pEvent);
   19298:	4b22      	ldr	r3, [pc, #136]	; (19324 <dmSecHciHandler+0xd8>)
      pCcb->usingLtk = TRUE;
   1929a:	74aa      	strb	r2, [r5, #18]
      pEvent->hdr.param = pCcb->connId;
   1929c:	7c29      	ldrb	r1, [r5, #16]
      (*dmCb.cback)((dmEvt_t *) pEvent);
   1929e:	689b      	ldr	r3, [r3, #8]
      pEvent->hdr.param = pCcb->connId;
   192a0:	8021      	strh	r1, [r4, #0]
      pEvent->hdr.event = DM_SEC_LTK_REQ_IND;
   192a2:	2230      	movs	r2, #48	; 0x30
   192a4:	70a2      	strb	r2, [r4, #2]
      (*dmCb.cback)((dmEvt_t *) pEvent);
   192a6:	4620      	mov	r0, r4
   192a8:	4798      	blx	r3
}
   192aa:	b004      	add	sp, #16
   192ac:	bd70      	pop	{r4, r5, r6, pc}
      DmConnSetIdle(pCcb->connId, DM_IDLE_DM_ENC, DM_CONN_IDLE);
   192ae:	2200      	movs	r2, #0
   192b0:	7c00      	ldrb	r0, [r0, #16]
   192b2:	2102      	movs	r1, #2
   192b4:	f7ff fb1e 	bl	188f4 <DmConnSetIdle>
      encryptInd.hdr.status = pEvent->hdr.status;
   192b8:	78e3      	ldrb	r3, [r4, #3]
      encryptInd.hdr.param = pCcb->connId;
   192ba:	7c2a      	ldrb	r2, [r5, #16]
   192bc:	f8ad 2008 	strh.w	r2, [sp, #8]
      encryptInd.hdr.status = pEvent->hdr.status;
   192c0:	f88d 300b 	strb.w	r3, [sp, #11]
      if (encryptInd.hdr.status == HCI_SUCCESS)
   192c4:	b193      	cbz	r3, 192ec <dmSecHciHandler+0xa0>
   192c6:	232d      	movs	r3, #45	; 0x2d
   192c8:	f88d 300a 	strb.w	r3, [sp, #10]
  if (pDmEvt->hdr.event == DM_SEC_PAIR_CMPL_IND ||
   192cc:	a802      	add	r0, sp, #8
  (*dmCb.cback)(pDmEvt);
   192ce:	4b15      	ldr	r3, [pc, #84]	; (19324 <dmSecHciHandler+0xd8>)
   192d0:	9001      	str	r0, [sp, #4]
   192d2:	689b      	ldr	r3, [r3, #8]
   192d4:	4798      	blx	r3
      encryptInd.hdr.param = pCcb->connId;
   192d6:	7c2a      	ldrb	r2, [r5, #16]
      encryptInd.hdr.status = pEvent->hdr.status;
   192d8:	78e3      	ldrb	r3, [r4, #3]
      SmpDmEncryptInd((wsfMsgHdr_t *) &encryptInd);
   192da:	9801      	ldr	r0, [sp, #4]
      encryptInd.hdr.param = pCcb->connId;
   192dc:	f8ad 2008 	strh.w	r2, [sp, #8]
      encryptInd.hdr.status = pEvent->hdr.status;
   192e0:	f88d 300b 	strb.w	r3, [sp, #11]
      SmpDmEncryptInd((wsfMsgHdr_t *) &encryptInd);
   192e4:	f001 ff80 	bl	1b1e8 <SmpDmEncryptInd>
}
   192e8:	b004      	add	sp, #16
   192ea:	bd70      	pop	{r4, r5, r6, pc}
        pCcb->secLevel = pCcb->tmpSecLevel;
   192ec:	7e2a      	ldrb	r2, [r5, #24]
    if (dmConnCb.connCback[DM_CLIENT_ID_ATT] != NULL)
   192ee:	4b0e      	ldr	r3, [pc, #56]	; (19328 <dmSecHciHandler+0xdc>)
        pCcb->secLevel = pCcb->tmpSecLevel;
   192f0:	75ea      	strb	r2, [r5, #23]
    if (dmConnCb.connCback[DM_CLIENT_ID_ATT] != NULL)
   192f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
        encryptInd.usingLtk = pCcb->usingLtk;
   192f6:	7ca9      	ldrb	r1, [r5, #18]
   192f8:	f88d 100c 	strb.w	r1, [sp, #12]
   192fc:	222c      	movs	r2, #44	; 0x2c
   192fe:	f88d 200a 	strb.w	r2, [sp, #10]
      (*dmConnCb.connCback[DM_CLIENT_ID_ATT])(pDmEvt);
   19302:	a802      	add	r0, sp, #8
    if (dmConnCb.connCback[DM_CLIENT_ID_ATT] != NULL)
   19304:	2b00      	cmp	r3, #0
   19306:	d0e2      	beq.n	192ce <dmSecHciHandler+0x82>
      (*dmConnCb.connCback[DM_CLIENT_ID_ATT])(pDmEvt);
   19308:	9001      	str	r0, [sp, #4]
   1930a:	4798      	blx	r3
   1930c:	9801      	ldr	r0, [sp, #4]
   1930e:	e7de      	b.n	192ce <dmSecHciHandler+0x82>
          pCcb->tmpSecLevel = secLevel;
   19310:	f89d 3008 	ldrb.w	r3, [sp, #8]
   19314:	762b      	strb	r3, [r5, #24]
          pCcb->usingLtk = FALSE;
   19316:	74ae      	strb	r6, [r5, #18]
          HciLeLtkReqReplCmd(pEvent->hdr.param, pKey);
   19318:	8820      	ldrh	r0, [r4, #0]
   1931a:	f7f7 fe77 	bl	1100c <HciLeLtkReqReplCmd>
          return;
   1931e:	e7a3      	b.n	19268 <dmSecHciHandler+0x1c>
   19320:	0002558c 	.word	0x0002558c
   19324:	10005b04 	.word	0x10005b04
   19328:	10005a30 	.word	0x10005a30

0001932c <DmSmpCbackExec>:
  if (pDmEvt->hdr.event == DM_SEC_PAIR_CMPL_IND ||
   1932c:	7883      	ldrb	r3, [r0, #2]
   1932e:	2b2a      	cmp	r3, #42	; 0x2a
{
   19330:	b510      	push	{r4, lr}
   19332:	4604      	mov	r4, r0
  if (pDmEvt->hdr.event == DM_SEC_PAIR_CMPL_IND ||
   19334:	d007      	beq.n	19346 <DmSmpCbackExec+0x1a>
   19336:	2b2c      	cmp	r3, #44	; 0x2c
   19338:	d005      	beq.n	19346 <DmSmpCbackExec+0x1a>
  (*dmCb.cback)(pDmEvt);
   1933a:	4b07      	ldr	r3, [pc, #28]	; (19358 <DmSmpCbackExec+0x2c>)
   1933c:	4620      	mov	r0, r4
   1933e:	689b      	ldr	r3, [r3, #8]
}
   19340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (*dmCb.cback)(pDmEvt);
   19344:	4718      	bx	r3
    if (dmConnCb.connCback[DM_CLIENT_ID_ATT] != NULL)
   19346:	4b05      	ldr	r3, [pc, #20]	; (1935c <DmSmpCbackExec+0x30>)
   19348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   1934c:	2b00      	cmp	r3, #0
   1934e:	d0f4      	beq.n	1933a <DmSmpCbackExec+0xe>
      (*dmConnCb.connCback[DM_CLIENT_ID_ATT])(pDmEvt);
   19350:	4620      	mov	r0, r4
   19352:	4798      	blx	r3
   19354:	e7f1      	b.n	1933a <DmSmpCbackExec+0xe>
   19356:	bf00      	nop
   19358:	10005b04 	.word	0x10005b04
   1935c:	10005a30 	.word	0x10005a30

00019360 <DmSecCancelReq>:
{
   19360:	b538      	push	{r3, r4, r5, lr}
   19362:	4605      	mov	r5, r0
  if ((pMsg = WsfMsgAlloc(sizeof(wsfMsgHdr_t))) != NULL)
   19364:	2004      	movs	r0, #4
{
   19366:	460c      	mov	r4, r1
  if ((pMsg = WsfMsgAlloc(sizeof(wsfMsgHdr_t))) != NULL)
   19368:	f7fa fa54 	bl	13814 <WsfMsgAlloc>
   1936c:	b138      	cbz	r0, 1937e <DmSecCancelReq+0x1e>
    pMsg->event = SMP_MSG_API_CANCEL_REQ;
   1936e:	2203      	movs	r2, #3
   19370:	7082      	strb	r2, [r0, #2]
    pMsg->status = reason;
   19372:	70c4      	strb	r4, [r0, #3]
    pMsg->param = connId;
   19374:	8005      	strh	r5, [r0, #0]
}
   19376:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    SmpDmMsgSend((smpDmMsg_t *) pMsg);
   1937a:	f001 bf2d 	b.w	1b1d8 <SmpDmMsgSend>
}
   1937e:	bd38      	pop	{r3, r4, r5, pc}

00019380 <DmSecAuthRsp>:
{
   19380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19382:	4607      	mov	r7, r0
  if ((pMsg = WsfMsgAlloc(sizeof(smpDmAuthRsp_t))) != NULL)
   19384:	2016      	movs	r0, #22
{
   19386:	460e      	mov	r6, r1
   19388:	4615      	mov	r5, r2
  if ((pMsg = WsfMsgAlloc(sizeof(smpDmAuthRsp_t))) != NULL)
   1938a:	f7fa fa43 	bl	13814 <WsfMsgAlloc>
   1938e:	b178      	cbz	r0, 193b0 <DmSecAuthRsp+0x30>
    pMsg->hdr.event = SMP_MSG_API_AUTH_RSP;
   19390:	2304      	movs	r3, #4
   19392:	4604      	mov	r4, r0
   19394:	7083      	strb	r3, [r0, #2]
    pMsg->hdr.param = connId;
   19396:	8007      	strh	r7, [r0, #0]
    pMsg->authDataLen = authDataLen;
   19398:	7506      	strb	r6, [r0, #20]
    if (pAuthData != NULL)
   1939a:	b125      	cbz	r5, 193a6 <DmSecAuthRsp+0x26>
      memcpy(pMsg->authData, pAuthData, authDataLen);
   1939c:	4632      	mov	r2, r6
   1939e:	4629      	mov	r1, r5
   193a0:	4418      	add	r0, r3
   193a2:	f7f2 fead 	bl	c100 <memcpy>
    SmpDmMsgSend((smpDmMsg_t *) pMsg);
   193a6:	4620      	mov	r0, r4
}
   193a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    SmpDmMsgSend((smpDmMsg_t *) pMsg);
   193ac:	f001 bf14 	b.w	1b1d8 <SmpDmMsgSend>
}
   193b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   193b2:	bf00      	nop

000193b4 <DmSecInit>:
  dmSecCb.pCsrk = dmSecCb.pIrk = (uint8_t *) calc128Zeros;
   193b4:	4b03      	ldr	r3, [pc, #12]	; (193c4 <DmSecInit+0x10>)
  dmFcnIfTbl[DM_ID_SEC] = (dmFcnIf_t *) &dmSecFcnIf;
   193b6:	4904      	ldr	r1, [pc, #16]	; (193c8 <DmSecInit+0x14>)
  dmSecCb.pCsrk = dmSecCb.pIrk = (uint8_t *) calc128Zeros;
   193b8:	4a04      	ldr	r2, [pc, #16]	; (193cc <DmSecInit+0x18>)
  dmFcnIfTbl[DM_ID_SEC] = (dmFcnIf_t *) &dmSecFcnIf;
   193ba:	4805      	ldr	r0, [pc, #20]	; (193d0 <DmSecInit+0x1c>)
   193bc:	6148      	str	r0, [r1, #20]
  dmSecCb.pCsrk = dmSecCb.pIrk = (uint8_t *) calc128Zeros;
   193be:	e9c3 2200 	strd	r2, r2, [r3]
}
   193c2:	4770      	bx	lr
   193c4:	10005b38 	.word	0x10005b38
   193c8:	10002b98 	.word	0x10002b98
   193cc:	0002558c 	.word	0x0002558c
   193d0:	00024da4 	.word	0x00024da4

000193d4 <DmSecSetLocalIrk>:
{
   193d4:	b510      	push	{r4, lr}
   193d6:	4604      	mov	r4, r0
  WsfTaskLock();
   193d8:	f7fa fa5e 	bl	13898 <WsfTaskLock>
  dmSecCb.pIrk = pIrk;
   193dc:	4b02      	ldr	r3, [pc, #8]	; (193e8 <DmSecSetLocalIrk+0x14>)
   193de:	601c      	str	r4, [r3, #0]
}
   193e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  WsfTaskUnlock();
   193e4:	f7fa ba62 	b.w	138ac <WsfTaskUnlock>
   193e8:	10005b38 	.word	0x10005b38

000193ec <DmSecGetLocalCsrk>:
  return dmSecCb.pCsrk;
   193ec:	4b01      	ldr	r3, [pc, #4]	; (193f4 <DmSecGetLocalCsrk+0x8>)
}
   193ee:	6858      	ldr	r0, [r3, #4]
   193f0:	4770      	bx	lr
   193f2:	bf00      	nop
   193f4:	10005b38 	.word	0x10005b38

000193f8 <DmSecGetLocalIrk>:
  return dmSecCb.pIrk;
   193f8:	4b01      	ldr	r3, [pc, #4]	; (19400 <DmSecGetLocalIrk+0x8>)
}
   193fa:	6818      	ldr	r0, [r3, #0]
   193fc:	4770      	bx	lr
   193fe:	bf00      	nop
   19400:	10005b38 	.word	0x10005b38

00019404 <dmSecLescMsgHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmSecLescMsgHandler(dmSecMsg_t *pMsg)
{
   19404:	b530      	push	{r4, r5, lr}
  if (pMsg->hdr.event == DM_SEC_MSG_ECC_KEY_CNF)
   19406:	7883      	ldrb	r3, [r0, #2]
   19408:	2b81      	cmp	r3, #129	; 0x81
{
   1940a:	b08b      	sub	sp, #44	; 0x2c
   1940c:	4604      	mov	r4, r0
  if (pMsg->hdr.event == DM_SEC_MSG_ECC_KEY_CNF)
   1940e:	d003      	beq.n	19418 <dmSecLescMsgHandler+0x14>
  {
    pMsg->hdr.event = DM_SEC_ECC_KEY_IND;
    (*dmCb.cback)((dmEvt_t *) pMsg);
  }
  else if (pMsg->hdr.event == DM_SEC_MSG_CALC_OOB_CNF)
   19410:	2b80      	cmp	r3, #128	; 0x80
   19412:	d009      	beq.n	19428 <dmSecLescMsgHandler+0x24>

    WsfBufFree(dmSecOobRand);

    (*dmCb.cback)((dmEvt_t *) &oobEvt);
  }
}
   19414:	b00b      	add	sp, #44	; 0x2c
   19416:	bd30      	pop	{r4, r5, pc}
    (*dmCb.cback)((dmEvt_t *) pMsg);
   19418:	4b0f      	ldr	r3, [pc, #60]	; (19458 <dmSecLescMsgHandler+0x54>)
   1941a:	689b      	ldr	r3, [r3, #8]
    pMsg->hdr.event = DM_SEC_ECC_KEY_IND;
   1941c:	2234      	movs	r2, #52	; 0x34
   1941e:	7082      	strb	r2, [r0, #2]
}
   19420:	b00b      	add	sp, #44	; 0x2c
   19422:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    (*dmCb.cback)((dmEvt_t *) pMsg);
   19426:	4718      	bx	r3
    Calc128Cpy(oobEvt.random, dmSecOobRand);
   19428:	4d0c      	ldr	r5, [pc, #48]	; (1945c <dmSecLescMsgHandler+0x58>)
    WsfBufFree(pCmacMsg->pPlainText);
   1942a:	6880      	ldr	r0, [r0, #8]
   1942c:	f7fa f9c2 	bl	137b4 <WsfBufFree>
    oobEvt.hdr.event = DM_SEC_CALC_OOB_IND;
   19430:	2333      	movs	r3, #51	; 0x33
    Calc128Cpy(oobEvt.confirm, ((secAes_t *) pMsg)->pCiphertext);
   19432:	6861      	ldr	r1, [r4, #4]
    oobEvt.hdr.event = DM_SEC_CALC_OOB_IND;
   19434:	f8ad 3006 	strh.w	r3, [sp, #6]
    Calc128Cpy(oobEvt.confirm, ((secAes_t *) pMsg)->pCiphertext);
   19438:	a802      	add	r0, sp, #8
   1943a:	f002 ffaf 	bl	1c39c <Calc128Cpy>
    Calc128Cpy(oobEvt.random, dmSecOobRand);
   1943e:	6829      	ldr	r1, [r5, #0]
   19440:	a806      	add	r0, sp, #24
   19442:	f002 ffab 	bl	1c39c <Calc128Cpy>
    WsfBufFree(dmSecOobRand);
   19446:	6828      	ldr	r0, [r5, #0]
   19448:	f7fa f9b4 	bl	137b4 <WsfBufFree>
    (*dmCb.cback)((dmEvt_t *) &oobEvt);
   1944c:	4b02      	ldr	r3, [pc, #8]	; (19458 <dmSecLescMsgHandler+0x54>)
   1944e:	a801      	add	r0, sp, #4
   19450:	689b      	ldr	r3, [r3, #8]
   19452:	4798      	blx	r3
}
   19454:	b00b      	add	sp, #44	; 0x2c
   19456:	bd30      	pop	{r4, r5, pc}
   19458:	10005b04 	.word	0x10005b04
   1945c:	10005b40 	.word	0x10005b40

00019460 <DmSecGenerateEccKeyReq>:
 *  \return None.
 */
/*************************************************************************************************/
void DmSecGenerateEccKeyReq()
{
  SecEccGenKey(dmCb.handlerId, 0, DM_SEC_MSG_ECC_KEY_CNF);
   19460:	4b02      	ldr	r3, [pc, #8]	; (1946c <DmSecGenerateEccKeyReq+0xc>)
   19462:	2281      	movs	r2, #129	; 0x81
   19464:	7b18      	ldrb	r0, [r3, #12]
   19466:	2100      	movs	r1, #0
   19468:	f7f7 b868 	b.w	1053c <SecEccGenKey>
   1946c:	10005b04 	.word	0x10005b04

00019470 <DmSecSetEccKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSecSetEccKey(secEccKey_t *pKey)
{
   19470:	b508      	push	{r3, lr}
   19472:	4601      	mov	r1, r0
  memcpy(&localEccKey, pKey, sizeof(secEccKey_t));
   19474:	2260      	movs	r2, #96	; 0x60
   19476:	4802      	ldr	r0, [pc, #8]	; (19480 <DmSecSetEccKey+0x10>)
   19478:	f7f2 fe42 	bl	c100 <memcpy>
}
   1947c:	bd08      	pop	{r3, pc}
   1947e:	bf00      	nop
   19480:	10005b44 	.word	0x10005b44

00019484 <DmSecGetEccKey>:
 */
/*************************************************************************************************/
secEccKey_t *DmSecGetEccKey(void)
{
  return &localEccKey;
}
   19484:	4800      	ldr	r0, [pc, #0]	; (19488 <DmSecGetEccKey+0x4>)
   19486:	4770      	bx	lr
   19488:	10005b44 	.word	0x10005b44

0001948c <DmSecCompareRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSecCompareRsp(dmConnId_t connId, bool_t valid)
{
   1948c:	b570      	push	{r4, r5, r6, lr}
   1948e:	4605      	mov	r5, r0
  smpDmMsg_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(smpDmMsg_t))) != NULL)
   19490:	2016      	movs	r0, #22
{
   19492:	460e      	mov	r6, r1
  if ((pMsg = WsfMsgAlloc(sizeof(smpDmMsg_t))) != NULL)
   19494:	f7fa f9be 	bl	13814 <WsfMsgAlloc>
   19498:	b198      	cbz	r0, 194c2 <DmSecCompareRsp+0x36>
  {
    /* Execution an an SMP state machine event to send the compare response */
    pMsg->hdr.param = connId;
   1949a:	4604      	mov	r4, r0
   1949c:	8005      	strh	r5, [r0, #0]

    if (valid)
   1949e:	b136      	cbz	r6, 194ae <DmSecCompareRsp+0x22>
    {
      pMsg->hdr.event = SMP_MSG_API_USER_CONFIRM;
   194a0:	2316      	movs	r3, #22
   194a2:	7083      	strb	r3, [r0, #2]
    else
    {
      SmpScGetCancelMsgWithReattempt(connId, (wsfMsgHdr_t *) pMsg, SMP_ERR_NUMERIC_COMPARISON);
    }

    SmpDmMsgSend((smpDmMsg_t *) pMsg);
   194a4:	4620      	mov	r0, r4
  }
}
   194a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    SmpDmMsgSend((smpDmMsg_t *) pMsg);
   194aa:	f001 be95 	b.w	1b1d8 <SmpDmMsgSend>
      SmpScGetCancelMsgWithReattempt(connId, (wsfMsgHdr_t *) pMsg, SMP_ERR_NUMERIC_COMPARISON);
   194ae:	4601      	mov	r1, r0
   194b0:	220c      	movs	r2, #12
   194b2:	4628      	mov	r0, r5
   194b4:	f002 fe8c 	bl	1c1d0 <SmpScGetCancelMsgWithReattempt>
    SmpDmMsgSend((smpDmMsg_t *) pMsg);
   194b8:	4620      	mov	r0, r4
}
   194ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    SmpDmMsgSend((smpDmMsg_t *) pMsg);
   194be:	f001 be8b 	b.w	1b1d8 <SmpDmMsgSend>
}
   194c2:	bd70      	pop	{r4, r5, r6, pc}

000194c4 <DmSecGetCompareValue>:
/*************************************************************************************************/
uint32_t DmSecGetCompareValue(uint8_t *pConfirm)
{
  uint32_t compare = ((uint32_t) pConfirm[15]        +
                     ((uint32_t) pConfirm[14] << 8)  +
                     ((uint32_t) pConfirm[13] << 16) +
   194c4:	7b43      	ldrb	r3, [r0, #13]
                     ((uint32_t) pConfirm[14] << 8)  +
   194c6:	f890 c00e 	ldrb.w	ip, [r0, #14]
  uint32_t compare = ((uint32_t) pConfirm[15]        +
   194ca:	7bc1      	ldrb	r1, [r0, #15]
                     ((uint32_t) pConfirm[12] << 24));
   194cc:	7b00      	ldrb	r0, [r0, #12]

  /* return the least significant six digits */
  return compare % 1000000;
   194ce:	4a07      	ldr	r2, [pc, #28]	; (194ec <DmSecGetCompareValue+0x28>)
                     ((uint32_t) pConfirm[13] << 16) +
   194d0:	041b      	lsls	r3, r3, #16
                     ((uint32_t) pConfirm[14] << 8)  +
   194d2:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   194d6:	440b      	add	r3, r1
  uint32_t compare = ((uint32_t) pConfirm[15]        +
   194d8:	eb03 6300 	add.w	r3, r3, r0, lsl #24
  return compare % 1000000;
   194dc:	fba2 1203 	umull	r1, r2, r2, r3
   194e0:	4803      	ldr	r0, [pc, #12]	; (194f0 <DmSecGetCompareValue+0x2c>)
   194e2:	0c92      	lsrs	r2, r2, #18
}
   194e4:	fb00 3012 	mls	r0, r0, r2, r3
   194e8:	4770      	bx	lr
   194ea:	bf00      	nop
   194ec:	431bde83 	.word	0x431bde83
   194f0:	000f4240 	.word	0x000f4240

000194f4 <DmSecLescInit>:
 *  \return None.
 */
/*************************************************************************************************/
void DmSecLescInit(void)
{
  dmFcnIfTbl[DM_ID_LESC] = (dmFcnIf_t *) &dmSecLescFcnIf;
   194f4:	4b01      	ldr	r3, [pc, #4]	; (194fc <DmSecLescInit+0x8>)
   194f6:	4a02      	ldr	r2, [pc, #8]	; (19500 <DmSecLescInit+0xc>)
   194f8:	621a      	str	r2, [r3, #32]
}
   194fa:	4770      	bx	lr
   194fc:	10002b98 	.word	0x10002b98
   19500:	00024db0 	.word	0x00024db0

00019504 <DmSecPairRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSecPairRsp(dmConnId_t connId, uint8_t oob, uint8_t auth, uint8_t iKeyDist, uint8_t rKeyDist)
{
   19504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19508:	4680      	mov	r8, r0
  smpDmPair_t  *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(smpDmPair_t))) != NULL)
   1950a:	2008      	movs	r0, #8
{
   1950c:	f89d 7018 	ldrb.w	r7, [sp, #24]
   19510:	460e      	mov	r6, r1
   19512:	4615      	mov	r5, r2
   19514:	461c      	mov	r4, r3
  if ((pMsg = WsfMsgAlloc(sizeof(smpDmPair_t))) != NULL)
   19516:	f7fa f97d 	bl	13814 <WsfMsgAlloc>
   1951a:	b178      	cbz	r0, 1953c <DmSecPairRsp+0x38>
    pMsg->hdr.param = connId;
    pMsg->oob = oob;
    pMsg->auth = auth;

    /* clear any erroneous key dist bits set by app */
    pMsg->iKeyDist = iKeyDist & SMP_KEY_DIST_MASK;
   1951c:	f004 0307 	and.w	r3, r4, #7
    pMsg->rKeyDist = rKeyDist & SMP_KEY_DIST_MASK;
   19520:	f007 0707 	and.w	r7, r7, #7
    pMsg->iKeyDist = iKeyDist & SMP_KEY_DIST_MASK;
   19524:	7183      	strb	r3, [r0, #6]
    pMsg->hdr.event = SMP_MSG_API_PAIR_RSP;
   19526:	2302      	movs	r3, #2
    pMsg->oob = oob;
   19528:	7106      	strb	r6, [r0, #4]
    pMsg->auth = auth;
   1952a:	7145      	strb	r5, [r0, #5]
    pMsg->rKeyDist = rKeyDist & SMP_KEY_DIST_MASK;
   1952c:	71c7      	strb	r7, [r0, #7]
    pMsg->hdr.event = SMP_MSG_API_PAIR_RSP;
   1952e:	7083      	strb	r3, [r0, #2]
    pMsg->hdr.param = connId;
   19530:	f8a0 8000 	strh.w	r8, [r0]

    /* note we're sending this to SMP */
    SmpDmMsgSend((smpDmMsg_t *) pMsg);
  }
}
   19534:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    SmpDmMsgSend((smpDmMsg_t *) pMsg);
   19538:	f001 be4e 	b.w	1b1d8 <SmpDmMsgSend>
}
   1953c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019540 <DmSecSlaveReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSecSlaveReq(dmConnId_t connId, uint8_t auth)
{
   19540:	b538      	push	{r3, r4, r5, lr}
   19542:	4605      	mov	r5, r0
  smpDmSecurityReq_t  *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(smpDmSecurityReq_t))) != NULL)
   19544:	2006      	movs	r0, #6
{
   19546:	460c      	mov	r4, r1
  if ((pMsg = WsfMsgAlloc(sizeof(smpDmSecurityReq_t))) != NULL)
   19548:	f7fa f964 	bl	13814 <WsfMsgAlloc>
   1954c:	b138      	cbz	r0, 1955e <DmSecSlaveReq+0x1e>
  {
    pMsg->hdr.event = SMP_MSG_API_SECURITY_REQ;
   1954e:	2205      	movs	r2, #5
   19550:	7082      	strb	r2, [r0, #2]
    pMsg->hdr.param = connId;
    pMsg->auth = auth;
   19552:	7104      	strb	r4, [r0, #4]
    pMsg->hdr.param = connId;
   19554:	8005      	strh	r5, [r0, #0]

    /* note we're sending this to SMP */
    SmpDmMsgSend((smpDmMsg_t *) pMsg);
  }
}
   19556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    SmpDmMsgSend((smpDmMsg_t *) pMsg);
   1955a:	f001 be3d 	b.w	1b1d8 <SmpDmMsgSend>
}
   1955e:	bd38      	pop	{r3, r4, r5, pc}

00019560 <DmSecLtkRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSecLtkRsp(dmConnId_t connId, bool_t keyFound, uint8_t secLevel, uint8_t *pKey)
{
   19560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19564:	4607      	mov	r7, r0
  dmSecApiLtkRsp_t  *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmSecApiLtkRsp_t))) != NULL)
   19566:	2016      	movs	r0, #22
{
   19568:	460d      	mov	r5, r1
   1956a:	4616      	mov	r6, r2
   1956c:	4698      	mov	r8, r3
  if ((pMsg = WsfMsgAlloc(sizeof(dmSecApiLtkRsp_t))) != NULL)
   1956e:	f7fa f951 	bl	13814 <WsfMsgAlloc>
   19572:	b190      	cbz	r0, 1959a <DmSecLtkRsp+0x3a>
  {
    pMsg->hdr.event = DM_SEC_MSG_API_LTK_RSP;
   19574:	2351      	movs	r3, #81	; 0x51
   19576:	4604      	mov	r4, r0
    pMsg->hdr.param = connId;
   19578:	8007      	strh	r7, [r0, #0]
    pMsg->keyFound = keyFound;
   1957a:	7505      	strb	r5, [r0, #20]
    pMsg->secLevel = secLevel;
   1957c:	7546      	strb	r6, [r0, #21]
    pMsg->hdr.event = DM_SEC_MSG_API_LTK_RSP;
   1957e:	7083      	strb	r3, [r0, #2]
    if (keyFound)
   19580:	b935      	cbnz	r5, 19590 <DmSecLtkRsp+0x30>
    {
      Calc128Cpy(pMsg->key, pKey);
    }

    WsfMsgSend(dmCb.handlerId, pMsg);
   19582:	4b07      	ldr	r3, [pc, #28]	; (195a0 <DmSecLtkRsp+0x40>)
   19584:	4621      	mov	r1, r4
   19586:	7b18      	ldrb	r0, [r3, #12]
  }
}
   19588:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
   1958c:	f7fa b94e 	b.w	1382c <WsfMsgSend>
      Calc128Cpy(pMsg->key, pKey);
   19590:	4641      	mov	r1, r8
   19592:	3004      	adds	r0, #4
   19594:	f002 ff02 	bl	1c39c <Calc128Cpy>
   19598:	e7f3      	b.n	19582 <DmSecLtkRsp+0x22>
}
   1959a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1959e:	bf00      	nop
   195a0:	10005b04 	.word	0x10005b04

000195a4 <smprActSendSecurityReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActSendSecurityReq(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   195a4:	b538      	push	{r3, r4, r5, lr}
   195a6:	4604      	mov	r4, r0
   195a8:	460d      	mov	r5, r1
  uint8_t   *pPkt;
  uint8_t   *p;

  /* start smp response timer */
  smpStartRspTimer(pCcb);
   195aa:	f000 fccf 	bl	19f4c <smpStartRspTimer>

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_SECURITY_REQ_LEN + L2C_PAYLOAD_START)) != NULL)
   195ae:	200a      	movs	r0, #10
   195b0:	f001 fe0e 	bl	1b1d0 <smpMsgAlloc>
   195b4:	b148      	cbz	r0, 195ca <smprActSendSecurityReq+0x26>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, SMP_CMD_SECURITY_REQ);
   195b6:	230b      	movs	r3, #11
   195b8:	7203      	strb	r3, [r0, #8]
    UINT8_TO_BSTREAM(p, pMsg->dm.securityReq.auth);
   195ba:	792b      	ldrb	r3, [r5, #4]
   195bc:	7243      	strb	r3, [r0, #9]
   195be:	4601      	mov	r1, r0

    /* send packet */
    smpSendPkt(pCcb, pPkt);
   195c0:	4620      	mov	r0, r4
  }
}
   195c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    smpSendPkt(pCcb, pPkt);
   195c6:	f001 bde3 	b.w	1b190 <smpSendPkt>
}
   195ca:	bd38      	pop	{r3, r4, r5, pc}

000195cc <smprActProcPairReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActProcPairReq(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   195cc:	b530      	push	{r4, r5, lr}
  dmSecPairIndEvt_t   pairInd;
  uint8_t             *p;

  /* allocate scratch buffer */
  if (pCcb->pScr == NULL)
   195ce:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
   195d0:	b083      	sub	sp, #12
   195d2:	4604      	mov	r4, r0
   195d4:	460d      	mov	r5, r1
  if (pCcb->pScr == NULL)
   195d6:	b343      	cbz	r3, 1962a <smprActProcPairReq+0x5e>
    }
  }
  else
  {
    /* should not happen */
    SMP_TRACE_ERR0("pScr already allocated");
   195d8:	481c      	ldr	r0, [pc, #112]	; (1964c <smprActProcPairReq+0x80>)
   195da:	f7fa fc9b 	bl	13f14 <WsfTrace>
  }

  /* set connection busy */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
   195de:	2201      	movs	r2, #1
   195e0:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
   195e4:	4611      	mov	r1, r2
   195e6:	f7ff f985 	bl	188f4 <DmConnSetIdle>

  p = pMsg->data.pPacket + L2C_PAYLOAD_START;
   195ea:	686b      	ldr	r3, [r5, #4]
  p++;    /* skip max key len */
  BSTREAM_TO_UINT8(pairInd.iKeyDist, p);
  BSTREAM_TO_UINT8(pairInd.rKeyDist, p);

  /* call app callback */
  pairInd.hdr.param = pCcb->connId;
   195ec:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  memcpy(pCcb->pairReq, p, SMP_PAIR_REQ_LEN);
   195f0:	6899      	ldr	r1, [r3, #8]
   195f2:	6221      	str	r1, [r4, #32]
   195f4:	8999      	ldrh	r1, [r3, #12]
   195f6:	7b98      	ldrb	r0, [r3, #14]
   195f8:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
   195fc:	84a1      	strh	r1, [r4, #36]	; 0x24
  BSTREAM_TO_UINT8(pairInd.auth, p);
   195fe:	7ad8      	ldrb	r0, [r3, #11]
  BSTREAM_TO_UINT8(pairInd.oob, p);
   19600:	7a9d      	ldrb	r5, [r3, #10]
  BSTREAM_TO_UINT8(pairInd.iKeyDist, p);
   19602:	7b5c      	ldrb	r4, [r3, #13]
  BSTREAM_TO_UINT8(pairInd.rKeyDist, p);
   19604:	7b99      	ldrb	r1, [r3, #14]
  BSTREAM_TO_UINT8(pairInd.auth, p);
   19606:	f88d 0004 	strb.w	r0, [sp, #4]
  pairInd.hdr.event = DM_SEC_PAIR_IND;
   1960a:	2331      	movs	r3, #49	; 0x31
  DmSmpCbackExec((dmEvt_t *) &pairInd);
   1960c:	4668      	mov	r0, sp
  BSTREAM_TO_UINT8(pairInd.oob, p);
   1960e:	f88d 5005 	strb.w	r5, [sp, #5]
  BSTREAM_TO_UINT8(pairInd.iKeyDist, p);
   19612:	f88d 4006 	strb.w	r4, [sp, #6]
  BSTREAM_TO_UINT8(pairInd.rKeyDist, p);
   19616:	f88d 1007 	strb.w	r1, [sp, #7]
  pairInd.hdr.param = pCcb->connId;
   1961a:	f8ad 2000 	strh.w	r2, [sp]
  pairInd.hdr.event = DM_SEC_PAIR_IND;
   1961e:	f88d 3002 	strb.w	r3, [sp, #2]
  DmSmpCbackExec((dmEvt_t *) &pairInd);
   19622:	f7ff fe83 	bl	1932c <DmSmpCbackExec>
}
   19626:	b003      	add	sp, #12
   19628:	bd30      	pop	{r4, r5, pc}
    if ((pCcb->pScr = WsfBufAlloc(sizeof(smpScratch_t))) == NULL)
   1962a:	2040      	movs	r0, #64	; 0x40
   1962c:	f7fa f892 	bl	13754 <WsfBufAlloc>
   19630:	6320      	str	r0, [r4, #48]	; 0x30
   19632:	2800      	cmp	r0, #0
   19634:	d1d3      	bne.n	195de <smprActProcPairReq+0x12>
      pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   19636:	f640 0303 	movw	r3, #2051	; 0x803
      smpSmExecute(pCcb, pMsg);
   1963a:	4629      	mov	r1, r5
   1963c:	4620      	mov	r0, r4
      pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   1963e:	806b      	strh	r3, [r5, #2]
}
   19640:	b003      	add	sp, #12
   19642:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      smpSmExecute(pCcb, pMsg);
   19646:	f000 bfab 	b.w	1a5a0 <smpSmExecute>
   1964a:	bf00      	nop
   1964c:	00024dbc 	.word	0x00024dbc

00019650 <smprActSendPairRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActSendPairRsp(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   19650:	b570      	push	{r4, r5, r6, lr}
  uint8_t   display;

  /* build packet to pairing response buffer in ccb */
  p = pCcb->pairRsp;
  UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_RSP);
  UINT8_TO_BSTREAM(p, pSmpCfg->ioCap);
   19652:	4b26      	ldr	r3, [pc, #152]	; (196ec <smprActSendPairRsp+0x9c>)
  UINT8_TO_BSTREAM(p, pSmpCfg->maxKeyLen);
  UINT8_TO_BSTREAM(p, pMsg->dm.pair.iKeyDist);
  UINT8_TO_BSTREAM(p, pMsg->dm.pair.rKeyDist);

  /* process pairing request and response data */
  if (smpCb.procPairing(pCcb, &oob, &display))
   19654:	4e26      	ldr	r6, [pc, #152]	; (196f0 <smprActSendPairRsp+0xa0>)
  UINT8_TO_BSTREAM(p, pSmpCfg->ioCap);
   19656:	681b      	ldr	r3, [r3, #0]
  UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_RSP);
   19658:	2202      	movs	r2, #2
   1965a:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
  UINT8_TO_BSTREAM(p, pSmpCfg->ioCap);
   1965e:	791a      	ldrb	r2, [r3, #4]
   19660:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
  UINT8_TO_BSTREAM(p, pMsg->dm.pair.oob);
   19664:	790a      	ldrb	r2, [r1, #4]
   19666:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
  UINT8_TO_BSTREAM(p, pMsg->dm.pair.auth);
   1966a:	794a      	ldrb	r2, [r1, #5]
   1966c:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
  UINT8_TO_BSTREAM(p, pSmpCfg->maxKeyLen);
   19670:	799b      	ldrb	r3, [r3, #6]
   19672:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
  UINT8_TO_BSTREAM(p, pMsg->dm.pair.iKeyDist);
   19676:	798b      	ldrb	r3, [r1, #6]
   19678:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  UINT8_TO_BSTREAM(p, pMsg->dm.pair.rKeyDist);
   1967c:	79cb      	ldrb	r3, [r1, #7]
   1967e:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
{
   19682:	b082      	sub	sp, #8
   19684:	460d      	mov	r5, r1
  if (smpCb.procPairing(pCcb, &oob, &display))
   19686:	f8d6 30e4 	ldr.w	r3, [r6, #228]	; 0xe4
   1968a:	f10d 0207 	add.w	r2, sp, #7
   1968e:	f10d 0106 	add.w	r1, sp, #6
{
   19692:	4604      	mov	r4, r0
  if (smpCb.procPairing(pCcb, &oob, &display))
   19694:	4798      	blx	r3
   19696:	b330      	cbz	r0, 196e6 <smprActSendPairRsp+0x96>
  {
    /* set next expected packet */
    if ((pCcb->pairReq[SMP_AUTHREQ_POS] & pMsg->dm.pair.auth & SMP_AUTH_SC_FLAG) == SMP_AUTH_SC_FLAG)
   19698:	796a      	ldrb	r2, [r5, #5]
   1969a:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1969e:	4013      	ands	r3, r2
    {
      pCcb->nextCmdCode = SMP_CMD_PUBLIC_KEY;
    }
    else
    {
      pCcb->nextCmdCode = SMP_CMD_PAIR_CNF;
   196a0:	f013 0f08 	tst.w	r3, #8
   196a4:	bf14      	ite	ne
   196a6:	230c      	movne	r3, #12
   196a8:	2303      	moveq	r3, #3
    }

    /* start smp response timer */
    smpStartRspTimer(pCcb);
   196aa:	4620      	mov	r0, r4
   196ac:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
   196b0:	f000 fc4c 	bl	19f4c <smpStartRspTimer>

    /* send pairing response; allocate packet buffer */
    if ((pPkt = smpMsgAlloc(SMP_PAIR_RSP_LEN + L2C_PAYLOAD_START)) != NULL)
   196b4:	200f      	movs	r0, #15
   196b6:	f001 fd8b 	bl	1b1d0 <smpMsgAlloc>
   196ba:	4601      	mov	r1, r0
   196bc:	b158      	cbz	r0, 196d6 <smprActSendPairRsp+0x86>
    {
      /* build packet from pairing response buffer */
      memcpy(pPkt + L2C_PAYLOAD_START, pCcb->pairRsp, SMP_PAIR_RSP_LEN);
   196be:	f8d4 3027 	ldr.w	r3, [r4, #39]	; 0x27
   196c2:	6083      	str	r3, [r0, #8]
   196c4:	f8b4 302b 	ldrh.w	r3, [r4, #43]	; 0x2b
   196c8:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   196cc:	7382      	strb	r2, [r0, #14]
   196ce:	8183      	strh	r3, [r0, #12]

      /* send packet */
      smpSendPkt(pCcb, pPkt);
   196d0:	4620      	mov	r0, r4
   196d2:	f001 fd5d 	bl	1b190 <smpSendPkt>
    }

    /* request authentication data */
    smpCb.procAuthReq(pCcb, oob, display);
   196d6:	f8d6 30e8 	ldr.w	r3, [r6, #232]	; 0xe8
   196da:	f89d 2007 	ldrb.w	r2, [sp, #7]
   196de:	f89d 1006 	ldrb.w	r1, [sp, #6]
   196e2:	4620      	mov	r0, r4
   196e4:	4798      	blx	r3
  }
}
   196e6:	b002      	add	sp, #8
   196e8:	bd70      	pop	{r4, r5, r6, pc}
   196ea:	bf00      	nop
   196ec:	10002b04 	.word	0x10002b04
   196f0:	10005bfc 	.word	0x10005bfc

000196f4 <smprActProcPairCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActProcPairCnf(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   196f4:	b500      	push	{lr}
  uint8_t   *p;

  /* go to start of packet */
  p = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   196f6:	684a      	ldr	r2, [r1, #4]

  /* store confirm value */
  memcpy(pCcb->pScr->buf.b3, p, SMP_CONFIRM_LEN);
   196f8:	6b03      	ldr	r3, [r0, #48]	; 0x30
   196fa:	f8d2 e009 	ldr.w	lr, [r2, #9]
   196fe:	f8d2 c00d 	ldr.w	ip, [r2, #13]
   19702:	f8d2 1011 	ldr.w	r1, [r2, #17]
   19706:	f8d2 2015 	ldr.w	r2, [r2, #21]
   1970a:	62da      	str	r2, [r3, #44]	; 0x2c
   1970c:	f8c3 e020 	str.w	lr, [r3, #32]

  /* discard any packets received erroneously at this point */
  pCcb->nextCmdCode = 0;
   19710:	2200      	movs	r2, #0
  memcpy(pCcb->pScr->buf.b3, p, SMP_CONFIRM_LEN);
   19712:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
   19716:	6299      	str	r1, [r3, #40]	; 0x28
  pCcb->nextCmdCode = 0;
   19718:	f880 203f 	strb.w	r2, [r0, #63]	; 0x3f
}
   1971c:	f85d fb04 	ldr.w	pc, [sp], #4

00019720 <smprActProcPairCnfCalc1>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActProcPairCnfCalc1(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   19720:	b510      	push	{r4, lr}
  p = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   19722:	684a      	ldr	r2, [r1, #4]
  memcpy(pCcb->pScr->buf.b3, p, SMP_CONFIRM_LEN);
   19724:	6b03      	ldr	r3, [r0, #48]	; 0x30
   19726:	f8d2 1011 	ldr.w	r1, [r2, #17]
   1972a:	f8d2 c009 	ldr.w	ip, [r2, #9]
{
   1972e:	4604      	mov	r4, r0
  memcpy(pCcb->pScr->buf.b3, p, SMP_CONFIRM_LEN);
   19730:	f8d2 000d 	ldr.w	r0, [r2, #13]
   19734:	f8d2 2015 	ldr.w	r2, [r2, #21]
   19738:	62da      	str	r2, [r3, #44]	; 0x2c
   1973a:	6299      	str	r1, [r3, #40]	; 0x28
   1973c:	f8c3 c020 	str.w	ip, [r3, #32]
   19740:	6258      	str	r0, [r3, #36]	; 0x24
  smprActProcPairCnf(pCcb, pMsg);

  /* get random number to scratchpad */
  SecRand(pCcb->pScr->buf.b4, SMP_RAND_LEN);
   19742:	6b20      	ldr	r0, [r4, #48]	; 0x30
  pCcb->nextCmdCode = 0;
   19744:	2300      	movs	r3, #0
  SecRand(pCcb->pScr->buf.b4, SMP_RAND_LEN);
   19746:	2110      	movs	r1, #16
   19748:	3030      	adds	r0, #48	; 0x30
  pCcb->nextCmdCode = 0;
   1974a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  SecRand(pCcb->pScr->buf.b4, SMP_RAND_LEN);
   1974e:	f7f6 fc9f 	bl	10090 <SecRand>

  /* execute calculation */
  smpCalcC1Part1(pCcb, pCcb->pScr->buf.b1, pCcb->pScr->buf.b4);
   19752:	6b21      	ldr	r1, [r4, #48]	; 0x30
   19754:	4620      	mov	r0, r4
   19756:	f101 0230 	add.w	r2, r1, #48	; 0x30
}
   1975a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  smpCalcC1Part1(pCcb, pCcb->pScr->buf.b1, pCcb->pScr->buf.b4);
   1975e:	f001 bb2b 	b.w	1adb8 <smpCalcC1Part1>
   19762:	bf00      	nop

00019764 <smprActCnfVerify>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActCnfVerify(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   19764:	b570      	push	{r4, r5, r6, lr}
  /* compare calculated confirm value with value received earlier */
  if (memcmp(pMsg->aes.pCiphertext, pCcb->pScr->buf.b3, SMP_CONFIRM_LEN) != 0)
   19766:	6b06      	ldr	r6, [r0, #48]	; 0x30
{
   19768:	460d      	mov	r5, r1
   1976a:	4604      	mov	r4, r0
  if (memcmp(pMsg->aes.pCiphertext, pCcb->pScr->buf.b3, SMP_CONFIRM_LEN) != 0)
   1976c:	2210      	movs	r2, #16
   1976e:	6868      	ldr	r0, [r5, #4]
   19770:	f106 0120 	add.w	r1, r6, #32
   19774:	f007 fe38 	bl	213e8 <memcmp>
   19778:	b948      	cbnz	r0, 1978e <smprActCnfVerify+0x2a>
    smpSmExecute(pCcb, pMsg);
    return;
  }

  /* do STK calculation: key, responder rand, initiator rand */
  smpCalcS1(pCcb, pCcb->pScr->buf.b1, pCcb->pScr->buf.b4, pCcb->pScr->buf.b2);
   1977a:	f106 0310 	add.w	r3, r6, #16
   1977e:	f106 0230 	add.w	r2, r6, #48	; 0x30
   19782:	4631      	mov	r1, r6
   19784:	4620      	mov	r0, r4
}
   19786:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  smpCalcS1(pCcb, pCcb->pScr->buf.b1, pCcb->pScr->buf.b4, pCcb->pScr->buf.b2);
   1978a:	f001 bca7 	b.w	1b0dc <smpCalcS1>
    pCcb->attempts++;
   1978e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    SmpDbPairingFailed(pCcb->connId);
   19792:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    pCcb->attempts++;
   19796:	3301      	adds	r3, #1
   19798:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    SmpDbPairingFailed(pCcb->connId);
   1979c:	f001 f8ea 	bl	1a974 <SmpDbPairingFailed>
    if (pCcb->attempts == pSmpCfg->maxAttempts)
   197a0:	4a08      	ldr	r2, [pc, #32]	; (197c4 <smprActCnfVerify+0x60>)
    pMsg->hdr.status = SMP_ERR_CONFIRM_VALUE;
   197a2:	2304      	movs	r3, #4
    if (pCcb->attempts == pSmpCfg->maxAttempts)
   197a4:	6812      	ldr	r2, [r2, #0]
    pMsg->hdr.status = SMP_ERR_CONFIRM_VALUE;
   197a6:	70eb      	strb	r3, [r5, #3]
    if (pCcb->attempts == pSmpCfg->maxAttempts)
   197a8:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   197ac:	79d2      	ldrb	r2, [r2, #7]
      pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   197ae:	4293      	cmp	r3, r2
   197b0:	bf0c      	ite	eq
   197b2:	230d      	moveq	r3, #13
   197b4:	2303      	movne	r3, #3
    smpSmExecute(pCcb, pMsg);
   197b6:	4629      	mov	r1, r5
   197b8:	70ab      	strb	r3, [r5, #2]
   197ba:	4620      	mov	r0, r4
}
   197bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    smpSmExecute(pCcb, pMsg);
   197c0:	f000 beee 	b.w	1a5a0 <smpSmExecute>
   197c4:	10002b04 	.word	0x10002b04

000197c8 <smprActSendPairRandom>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActSendPairRandom(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   197c8:	b538      	push	{r3, r4, r5, lr}
  uint8_t   *pPkt;
  uint8_t   *p;
  uint8_t   encKeyLen;

  /* get max STK length */
  encKeyLen = (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
   197ca:	f890 502b 	ldrb.w	r5, [r0, #43]	; 0x2b
   197ce:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
               pCcb->pairReq[SMP_MAXKEY_POS] : pCcb->pairRsp[SMP_MAXKEY_POS];

  /* store STK and adjust based on max key length */
  memcpy(pCcb->pScr->buf.b3, pMsg->aes.pCiphertext, encKeyLen);
   197d2:	6849      	ldr	r1, [r1, #4]
  encKeyLen = (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
   197d4:	429d      	cmp	r5, r3
{
   197d6:	4604      	mov	r4, r0
  memcpy(pCcb->pScr->buf.b3, pMsg->aes.pCiphertext, encKeyLen);
   197d8:	6b00      	ldr	r0, [r0, #48]	; 0x30
  encKeyLen = (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
   197da:	bf28      	it	cs
   197dc:	461d      	movcs	r5, r3
  memcpy(pCcb->pScr->buf.b3, pMsg->aes.pCiphertext, encKeyLen);
   197de:	462a      	mov	r2, r5
   197e0:	3020      	adds	r0, #32
   197e2:	f7f2 fc8d 	bl	c100 <memcpy>
  memset((pCcb->pScr->buf.b3 + encKeyLen), 0, (SMP_KEY_LEN - encKeyLen));
   197e6:	6b20      	ldr	r0, [r4, #48]	; 0x30
   197e8:	3020      	adds	r0, #32
   197ea:	f1c5 0210 	rsb	r2, r5, #16
   197ee:	2100      	movs	r1, #0
   197f0:	4428      	add	r0, r5
   197f2:	f007 fe2b 	bl	2144c <memset>

  /* start smp response timer */
  smpStartRspTimer(pCcb);
   197f6:	4620      	mov	r0, r4
   197f8:	f000 fba8 	bl	19f4c <smpStartRspTimer>

  /* allocate packet buffer and send pairing random packet */
  if ((pPkt = smpMsgAlloc(SMP_PAIR_RAND_LEN + L2C_PAYLOAD_START)) != NULL)
   197fc:	2019      	movs	r0, #25
   197fe:	f001 fce7 	bl	1b1d0 <smpMsgAlloc>
   19802:	b1a0      	cbz	r0, 1982e <smprActSendPairRandom+0x66>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_RAND);
   19804:	2304      	movs	r3, #4
   19806:	7203      	strb	r3, [r0, #8]
    memcpy(p, pCcb->pScr->buf.b4, SMP_RAND_LEN);
   19808:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1980a:	4601      	mov	r1, r0
   1980c:	6b1d      	ldr	r5, [r3, #48]	; 0x30
   1980e:	6b9a      	ldr	r2, [r3, #56]	; 0x38

    /* send packet */
    smpSendPkt(pCcb, pPkt);
   19810:	4620      	mov	r0, r4
    memcpy(p, pCcb->pScr->buf.b4, SMP_RAND_LEN);
   19812:	6b5c      	ldr	r4, [r3, #52]	; 0x34
   19814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   19816:	f8c1 3015 	str.w	r3, [r1, #21]
   1981a:	f8c1 5009 	str.w	r5, [r1, #9]
   1981e:	f8c1 400d 	str.w	r4, [r1, #13]
   19822:	f8c1 2011 	str.w	r2, [r1, #17]
  }
}
   19826:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    smpSendPkt(pCcb, pPkt);
   1982a:	f001 bcb1 	b.w	1b190 <smpSendPkt>
}
   1982e:	bd38      	pop	{r3, r4, r5, pc}

00019830 <smprActSetupKeyDist>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActSetupKeyDist(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   19830:	b570      	push	{r4, r5, r6, lr}
  /* don't receive anything yet */
  pCcb->nextCmdCode = 0;
   19832:	2300      	movs	r3, #0
{
   19834:	4604      	mov	r4, r0
  pCcb->nextCmdCode = 0;
   19836:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
{
   1983a:	460d      	mov	r5, r1

  /* start smp response timer once for entire key distribution phase */
  smpStartRspTimer(pCcb);
   1983c:	f000 fb86 	bl	19f4c <smpStartRspTimer>

  /* initialize parameters in key ind struct */
  pCcb->pScr->keyInd.hdr.param = pCcb->connId;
   19840:	6b23      	ldr	r3, [r4, #48]	; 0x30
   19842:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
   19846:	801a      	strh	r2, [r3, #0]
  pCcb->pScr->keyInd.secLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ?
   19848:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   1984c:	f012 0f04 	tst.w	r2, #4
   19850:	bf14      	ite	ne
   19852:	2202      	movne	r2, #2
   19854:	2201      	moveq	r2, #1
   19856:	77da      	strb	r2, [r3, #31]
                                DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
  pCcb->pScr->keyInd.encKeyLen =
    (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
     pCcb->pairReq[SMP_MAXKEY_POS] : pCcb->pairRsp[SMP_MAXKEY_POS];
   19858:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
   1985c:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
   19860:	428a      	cmp	r2, r1
   19862:	bf28      	it	cs
   19864:	460a      	movcs	r2, r1
  pCcb->pScr->keyInd.encKeyLen =
   19866:	f883 2020 	strb.w	r2, [r3, #32]

  /* get responder key distribution */
  keyDist = pCcb->pairReq[SMP_RKEYDIST_POS] & pCcb->pairRsp[SMP_RKEYDIST_POS];

  /* send next key; if done sending keys set up to receive keys */
  if ((pCcb->nextCmdCode == 0) && smpSendKey(pCcb, keyDist))
   1986a:	f894 603f 	ldrb.w	r6, [r4, #63]	; 0x3f
   1986e:	b106      	cbz	r6, 19872 <smprActSetupKeyDist+0x42>
}
   19870:	bd70      	pop	{r4, r5, r6, pc}
  keyDist = pCcb->pairReq[SMP_RKEYDIST_POS] & pCcb->pairRsp[SMP_RKEYDIST_POS];
   19872:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
   19876:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
  if ((pCcb->nextCmdCode == 0) && smpSendKey(pCcb, keyDist))
   1987a:	4620      	mov	r0, r4
   1987c:	4019      	ands	r1, r3
   1987e:	f000 fc83 	bl	1a188 <smpSendKey>
   19882:	2800      	cmp	r0, #0
   19884:	d0f4      	beq.n	19870 <smprActSetupKeyDist+0x40>
  {
    pCcb->nextCmdCode = 0;

    /* get initiator key distribution */
    keyDist = pCcb->pairReq[SMP_IKEYDIST_POS] & pCcb->pairRsp[SMP_IKEYDIST_POS];
   19886:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   1988a:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    pCcb->nextCmdCode = 0;
   1988e:	f884 603f 	strb.w	r6, [r4, #63]	; 0x3f
    keyDist = pCcb->pairReq[SMP_IKEYDIST_POS] & pCcb->pairRsp[SMP_IKEYDIST_POS];
   19892:	4013      	ands	r3, r2

    /* set up to receive first key distribution packet */
    if (keyDist & SMP_KEY_DIST_ENC)
   19894:	07d8      	lsls	r0, r3, #31
   19896:	d514      	bpl.n	198c2 <smprActSetupKeyDist+0x92>
    {
      if (smpCb.lescSupported && pCcb->pScCcb->lescEnabled)
   19898:	4a10      	ldr	r2, [pc, #64]	; (198dc <smprActSetupKeyDist+0xac>)
   1989a:	f892 20ec 	ldrb.w	r2, [r2, #236]	; 0xec
   1989e:	b162      	cbz	r2, 198ba <smprActSetupKeyDist+0x8a>
   198a0:	6c62      	ldr	r2, [r4, #68]	; 0x44
   198a2:	7812      	ldrb	r2, [r2, #0]
   198a4:	b14a      	cbz	r2, 198ba <smprActSetupKeyDist+0x8a>
      {
        if (keyDist & SMP_KEY_DIST_ID)
   198a6:	0799      	lsls	r1, r3, #30
   198a8:	d413      	bmi.n	198d2 <smprActSetupKeyDist+0xa2>
    }

    if (pCcb->nextCmdCode == 0)
    {
      /* no keys to receive; send ourselves pairing complete msg */
      pMsg->hdr.event = SMP_MSG_INT_PAIRING_CMPL;
   198aa:	230e      	movs	r3, #14
   198ac:	70ab      	strb	r3, [r5, #2]
      smpSmExecute(pCcb, pMsg);
   198ae:	4629      	mov	r1, r5
   198b0:	4620      	mov	r0, r4
}
   198b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      smpSmExecute(pCcb, pMsg);
   198b6:	f000 be73 	b.w	1a5a0 <smpSmExecute>
        pCcb->nextCmdCode = SMP_CMD_ENC_INFO;
   198ba:	2306      	movs	r3, #6
   198bc:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
}
   198c0:	bd70      	pop	{r4, r5, r6, pc}
    else if (keyDist & SMP_KEY_DIST_ID)
   198c2:	079a      	lsls	r2, r3, #30
   198c4:	d405      	bmi.n	198d2 <smprActSetupKeyDist+0xa2>
    else if (keyDist & SMP_KEY_DIST_SIGN)
   198c6:	075b      	lsls	r3, r3, #29
   198c8:	d5ef      	bpl.n	198aa <smprActSetupKeyDist+0x7a>
      pCcb->nextCmdCode = SMP_CMD_SIGN_INFO;
   198ca:	230a      	movs	r3, #10
   198cc:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
}
   198d0:	bd70      	pop	{r4, r5, r6, pc}
          pCcb->nextCmdCode = SMP_CMD_ID_INFO;
   198d2:	2308      	movs	r3, #8
   198d4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
}
   198d8:	bd70      	pop	{r4, r5, r6, pc}
   198da:	bf00      	nop
   198dc:	10005bfc 	.word	0x10005bfc

000198e0 <smprActSendKey>:
{
   198e0:	b570      	push	{r4, r5, r6, lr}
  if ((pCcb->nextCmdCode == 0) && smpSendKey(pCcb, keyDist))
   198e2:	f890 503f 	ldrb.w	r5, [r0, #63]	; 0x3f
   198e6:	b105      	cbz	r5, 198ea <smprActSendKey+0xa>
    }
  }
}
   198e8:	bd70      	pop	{r4, r5, r6, pc}
  keyDist = pCcb->pairReq[SMP_RKEYDIST_POS] & pCcb->pairRsp[SMP_RKEYDIST_POS];
   198ea:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   198ee:	460e      	mov	r6, r1
   198f0:	f890 1026 	ldrb.w	r1, [r0, #38]	; 0x26
  if ((pCcb->nextCmdCode == 0) && smpSendKey(pCcb, keyDist))
   198f4:	4019      	ands	r1, r3
   198f6:	4604      	mov	r4, r0
   198f8:	f000 fc46 	bl	1a188 <smpSendKey>
   198fc:	2800      	cmp	r0, #0
   198fe:	d0f3      	beq.n	198e8 <smprActSendKey+0x8>
    keyDist = pCcb->pairReq[SMP_IKEYDIST_POS] & pCcb->pairRsp[SMP_IKEYDIST_POS];
   19900:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   19904:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    pCcb->nextCmdCode = 0;
   19908:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
    keyDist = pCcb->pairReq[SMP_IKEYDIST_POS] & pCcb->pairRsp[SMP_IKEYDIST_POS];
   1990c:	4013      	ands	r3, r2
    if (keyDist & SMP_KEY_DIST_ENC)
   1990e:	07d8      	lsls	r0, r3, #31
   19910:	d514      	bpl.n	1993c <smprActSendKey+0x5c>
      if (smpCb.lescSupported && pCcb->pScCcb->lescEnabled)
   19912:	4a10      	ldr	r2, [pc, #64]	; (19954 <smprActSendKey+0x74>)
   19914:	f892 20ec 	ldrb.w	r2, [r2, #236]	; 0xec
   19918:	b162      	cbz	r2, 19934 <smprActSendKey+0x54>
   1991a:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1991c:	7812      	ldrb	r2, [r2, #0]
   1991e:	b14a      	cbz	r2, 19934 <smprActSendKey+0x54>
        if (keyDist & SMP_KEY_DIST_ID)
   19920:	0799      	lsls	r1, r3, #30
   19922:	d413      	bmi.n	1994c <smprActSendKey+0x6c>
      pMsg->hdr.event = SMP_MSG_INT_PAIRING_CMPL;
   19924:	230e      	movs	r3, #14
   19926:	70b3      	strb	r3, [r6, #2]
      smpSmExecute(pCcb, pMsg);
   19928:	4631      	mov	r1, r6
   1992a:	4620      	mov	r0, r4
}
   1992c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      smpSmExecute(pCcb, pMsg);
   19930:	f000 be36 	b.w	1a5a0 <smpSmExecute>
        pCcb->nextCmdCode = SMP_CMD_ENC_INFO;
   19934:	2306      	movs	r3, #6
   19936:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
}
   1993a:	bd70      	pop	{r4, r5, r6, pc}
    else if (keyDist & SMP_KEY_DIST_ID)
   1993c:	079a      	lsls	r2, r3, #30
   1993e:	d405      	bmi.n	1994c <smprActSendKey+0x6c>
    else if (keyDist & SMP_KEY_DIST_SIGN)
   19940:	075b      	lsls	r3, r3, #29
   19942:	d5ef      	bpl.n	19924 <smprActSendKey+0x44>
      pCcb->nextCmdCode = SMP_CMD_SIGN_INFO;
   19944:	230a      	movs	r3, #10
   19946:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
}
   1994a:	bd70      	pop	{r4, r5, r6, pc}
          pCcb->nextCmdCode = SMP_CMD_ID_INFO;
   1994c:	2308      	movs	r3, #8
   1994e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
}
   19952:	bd70      	pop	{r4, r5, r6, pc}
   19954:	10005bfc 	.word	0x10005bfc

00019958 <smprActRcvKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActRcvKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   19958:	b538      	push	{r3, r4, r5, lr}
  uint8_t   keyDist;

  /* get initiator key distribution */
  keyDist = pCcb->pairReq[SMP_IKEYDIST_POS] & pCcb->pairRsp[SMP_IKEYDIST_POS];
   1995a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
   1995e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
   19962:	460d      	mov	r5, r1

  /* process received key */
  if (smpProcRcvKey(pCcb, &pCcb->pScr->keyInd, pMsg->data.pPacket, keyDist))
   19964:	4013      	ands	r3, r2
   19966:	684a      	ldr	r2, [r1, #4]
   19968:	6b01      	ldr	r1, [r0, #48]	; 0x30
{
   1996a:	4604      	mov	r4, r0
  if (smpProcRcvKey(pCcb, &pCcb->pScr->keyInd, pMsg->data.pPacket, keyDist))
   1996c:	f000 fcea 	bl	1a344 <smpProcRcvKey>
   19970:	b900      	cbnz	r0, 19974 <smprActRcvKey+0x1c>
  {
    /* no more keys to receive; send ourselves pairing complete msg */
    pMsg->hdr.event = SMP_MSG_INT_PAIRING_CMPL;
    smpSmExecute(pCcb, pMsg);
  }
}
   19972:	bd38      	pop	{r3, r4, r5, pc}
    pMsg->hdr.event = SMP_MSG_INT_PAIRING_CMPL;
   19974:	230e      	movs	r3, #14
   19976:	70ab      	strb	r3, [r5, #2]
    smpSmExecute(pCcb, pMsg);
   19978:	4629      	mov	r1, r5
   1997a:	4620      	mov	r0, r4
}
   1997c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    smpSmExecute(pCcb, pMsg);
   19980:	f000 be0e 	b.w	1a5a0 <smpSmExecute>

00019984 <smprScActStoreLescPin>:
 *  \return None.
 */
/*************************************************************************************************/
void smprScActStoreLescPin(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  if (pCcb->pScCcb->authType == SMP_AUTH_TYPE_PASSKEY)
   19984:	6c43      	ldr	r3, [r0, #68]	; 0x44
   19986:	785a      	ldrb	r2, [r3, #1]
   19988:	2a03      	cmp	r2, #3
   1998a:	d000      	beq.n	1998e <smprScActStoreLescPin+0xa>
   1998c:	4770      	bx	lr
{
   1998e:	b530      	push	{r4, r5, lr}
   19990:	4604      	mov	r4, r0
  {
    /* Store the pin */
    Calc128Cpy(pCcb->pScCcb->pScratch->Ra, (uint8_t *)calc128Zeros);
   19992:	6958      	ldr	r0, [r3, #20]
{
   19994:	b083      	sub	sp, #12
   19996:	460d      	mov	r5, r1
    Calc128Cpy(pCcb->pScCcb->pScratch->Ra, (uint8_t *)calc128Zeros);
   19998:	3020      	adds	r0, #32
   1999a:	490f      	ldr	r1, [pc, #60]	; (199d8 <smprScActStoreLescPin+0x54>)
   1999c:	f002 fcfe 	bl	1c39c <Calc128Cpy>
    Calc128Cpy(pCcb->pScCcb->pScratch->Rb, (uint8_t *)calc128Zeros);
   199a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
   199a2:	490d      	ldr	r1, [pc, #52]	; (199d8 <smprScActStoreLescPin+0x54>)
   199a4:	6958      	ldr	r0, [r3, #20]
   199a6:	3030      	adds	r0, #48	; 0x30
   199a8:	f002 fcf8 	bl	1c39c <Calc128Cpy>

    if (pMsg->dm.authRsp.authDataLen <= 3)
   199ac:	7d2a      	ldrb	r2, [r5, #20]
   199ae:	2a03      	cmp	r2, #3
   199b0:	d901      	bls.n	199b6 <smprScActStoreLescPin+0x32>
    {
      WStrReverseCpy(&pCcb->pScCcb->pScratch->Ra[13], pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
      WStrReverseCpy(&pCcb->pScCcb->pScratch->Rb[13], pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
    }
  }
}
   199b2:	b003      	add	sp, #12
   199b4:	bd30      	pop	{r4, r5, pc}
      WStrReverseCpy(&pCcb->pScCcb->pScratch->Ra[13], pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
   199b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   199b8:	6958      	ldr	r0, [r3, #20]
   199ba:	1d29      	adds	r1, r5, #4
   199bc:	302d      	adds	r0, #45	; 0x2d
   199be:	9101      	str	r1, [sp, #4]
   199c0:	f002 fd66 	bl	1c490 <WStrReverseCpy>
      WStrReverseCpy(&pCcb->pScCcb->pScratch->Rb[13], pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
   199c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   199c6:	7d2a      	ldrb	r2, [r5, #20]
   199c8:	6958      	ldr	r0, [r3, #20]
   199ca:	9901      	ldr	r1, [sp, #4]
   199cc:	303d      	adds	r0, #61	; 0x3d
}
   199ce:	b003      	add	sp, #12
   199d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      WStrReverseCpy(&pCcb->pScCcb->pScratch->Rb[13], pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
   199d4:	f002 bd5c 	b.w	1c490 <WStrReverseCpy>
   199d8:	0002558c 	.word	0x0002558c

000199dc <smprScActSendPubKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActSendPubKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   199dc:	b538      	push	{r3, r4, r5, lr}
   199de:	4604      	mov	r4, r0
   199e0:	460d      	mov	r5, r1
  /* Execute Common Auth Select actions */
  smpScActAuthSelect(pCcb, pMsg);
   199e2:	f001 ff2b 	bl	1b83c <smpScActAuthSelect>

  /* Send our public key */
  smpScSendPubKey(pCcb, pMsg);
   199e6:	4629      	mov	r1, r5
   199e8:	4620      	mov	r0, r4
}
   199ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpScSendPubKey(pCcb, pMsg);
   199ee:	f002 bb35 	b.w	1c05c <smpScSendPubKey>
   199f2:	bf00      	nop

000199f4 <smprScActJwncSetup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActJwncSetup(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   199f4:	b538      	push	{r3, r4, r5, lr}
  /* Select Random Na (128-bits) */
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   199f6:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   199f8:	4604      	mov	r4, r0
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   199fa:	6958      	ldr	r0, [r3, #20]
{
   199fc:	460d      	mov	r5, r1
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   199fe:	2110      	movs	r1, #16
   19a00:	4408      	add	r0, r1
   19a02:	f7f6 fb45 	bl	10090 <SecRand>

  SMP_TRACE_128("Rand Nb", pCcb->pScCcb->pScratch->Nb_Eb);
   19a06:	6c63      	ldr	r3, [r4, #68]	; 0x44
   19a08:	480d      	ldr	r0, [pc, #52]	; (19a40 <smprScActJwncSetup+0x4c>)
   19a0a:	6959      	ldr	r1, [r3, #20]
   19a0c:	2210      	movs	r2, #16
   19a0e:	4411      	add	r1, r2
   19a10:	f002 fc34 	bl	1c27c <smpLogByteArray>

  /* Set Ra and Rb to zero */
  Calc128Cpy(pCcb->pScCcb->pScratch->Ra, (uint8_t*) calc128Zeros);
   19a14:	6c63      	ldr	r3, [r4, #68]	; 0x44
   19a16:	490b      	ldr	r1, [pc, #44]	; (19a44 <smprScActJwncSetup+0x50>)
   19a18:	6958      	ldr	r0, [r3, #20]
   19a1a:	3020      	adds	r0, #32
   19a1c:	f002 fcbe 	bl	1c39c <Calc128Cpy>
  Calc128Cpy(pCcb->pScCcb->pScratch->Rb, (uint8_t*) calc128Zeros);
   19a20:	6c63      	ldr	r3, [r4, #68]	; 0x44
   19a22:	4908      	ldr	r1, [pc, #32]	; (19a44 <smprScActJwncSetup+0x50>)
   19a24:	6958      	ldr	r0, [r3, #20]
   19a26:	3030      	adds	r0, #48	; 0x30
   19a28:	f002 fcb8 	bl	1c39c <Calc128Cpy>

  /* Next command is a Pair Rand from Initiator */
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;
   19a2c:	2304      	movs	r3, #4
   19a2e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f

  /* Perform F4 Calculation of Cb */
  smpScActJwncCalcF4(pCcb, pMsg);
   19a32:	4629      	mov	r1, r5
   19a34:	4620      	mov	r0, r4
}
   19a36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpScActJwncCalcF4(pCcb, pMsg);
   19a3a:	f001 bf59 	b.w	1b8f0 <smpScActJwncCalcF4>
   19a3e:	bf00      	nop
   19a40:	00024dd4 	.word	0x00024dd4
   19a44:	0002558c 	.word	0x0002558c

00019a48 <smprScActJwncSendCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActJwncSendCnf(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   19a48:	b538      	push	{r3, r4, r5, lr}
   19a4a:	460c      	mov	r4, r1
   19a4c:	4605      	mov	r5, r0
  SMP_TRACE_128("JWNC Confirm", pMsg->aes.pCiphertext);
   19a4e:	6849      	ldr	r1, [r1, #4]
   19a50:	4805      	ldr	r0, [pc, #20]	; (19a68 <smprScActJwncSendCnf+0x20>)
   19a52:	2210      	movs	r2, #16
   19a54:	f002 fc12 	bl	1c27c <smpLogByteArray>

  smpScSendPairCnf(pCcb, pMsg, pMsg->aes.pCiphertext);
   19a58:	6862      	ldr	r2, [r4, #4]
   19a5a:	4621      	mov	r1, r4
   19a5c:	4628      	mov	r0, r5
}
   19a5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpScSendPairCnf(pCcb, pMsg, pMsg->aes.pCiphertext);
   19a62:	f002 bb7b 	b.w	1c15c <smpScSendPairCnf>
   19a66:	bf00      	nop
   19a68:	00024ddc 	.word	0x00024ddc

00019a6c <smprScActJwncCalcG2>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActJwncCalcG2(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   19a6c:	b538      	push	{r3, r4, r5, lr}
  uint8_t *pNa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;

  /* Na from initiator is in Random Cmd from initiator */
  WStrReverseCpy(pCcb->pScCcb->pScratch->Na_Ea, pNa, SMP_RAND_LEN);
   19a6e:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   19a70:	460d      	mov	r5, r1
  uint8_t *pNa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   19a72:	6849      	ldr	r1, [r1, #4]
{
   19a74:	4604      	mov	r4, r0
  WStrReverseCpy(pCcb->pScCcb->pScratch->Na_Ea, pNa, SMP_RAND_LEN);
   19a76:	3109      	adds	r1, #9
   19a78:	6958      	ldr	r0, [r3, #20]
   19a7a:	2210      	movs	r2, #16
   19a7c:	f002 fd08 	bl	1c490 <WStrReverseCpy>

  /* Calculate Vb using G2 */
  smpScActJwncCalcG2(pCcb, pMsg);
   19a80:	4629      	mov	r1, r5
   19a82:	4620      	mov	r0, r4
}
   19a84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpScActJwncCalcG2(pCcb, pMsg);
   19a88:	f001 bf80 	b.w	1b98c <smpScActJwncCalcG2>

00019a8c <smprScActJwncDisplay>:
*
*  \return None.
*/
/*************************************************************************************************/
void smprScActJwncDisplay(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   19a8c:	b538      	push	{r3, r4, r5, lr}
  /* Next command is a DH Key Check  */
  pCcb->nextCmdCode = SMP_CMD_DHKEY_CHECK;
   19a8e:	220d      	movs	r2, #13

  /* Send Pair Rand Nb to the Initiator */
  smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
   19a90:	6c43      	ldr	r3, [r0, #68]	; 0x44
  pCcb->nextCmdCode = SMP_CMD_DHKEY_CHECK;
   19a92:	f880 203f 	strb.w	r2, [r0, #63]	; 0x3f
  smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
   19a96:	695a      	ldr	r2, [r3, #20]
{
   19a98:	4604      	mov	r4, r0
   19a9a:	460d      	mov	r5, r1
  smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
   19a9c:	3210      	adds	r2, #16
   19a9e:	f002 fb35 	bl	1c10c <smpScSendRand>

  /* Send Numeric Comparison to application, if applicable */
  smpScActJwncDisplay(pCcb, pMsg);
   19aa2:	4629      	mov	r1, r5
   19aa4:	4620      	mov	r0, r4
}
   19aa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpScActJwncDisplay(pCcb, pMsg);
   19aaa:	f001 bfa1 	b.w	1b9f0 <smpScActJwncDisplay>
   19aae:	bf00      	nop

00019ab0 <smprScActPkStoreCnf>:
void smprScActPkStoreCnf(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  uint8_t *pCa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;

  /* Store the Cai from the initiator */
  WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pCa, SMP_CONFIRM_LEN);
   19ab0:	6c43      	ldr	r3, [r0, #68]	; 0x44
  uint8_t *pCa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   19ab2:	6849      	ldr	r1, [r1, #4]
  WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pCa, SMP_CONFIRM_LEN);
   19ab4:	6958      	ldr	r0, [r3, #20]
   19ab6:	2210      	movs	r2, #16
   19ab8:	3109      	adds	r1, #9
   19aba:	3050      	adds	r0, #80	; 0x50
   19abc:	f002 bce8 	b.w	1c490 <WStrReverseCpy>

00019ac0 <smprScActPkStoreCnfAndCalcCb>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActPkStoreCnfAndCalcCb(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   19ac0:	b570      	push	{r4, r5, r6, lr}
  WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pCa, SMP_CONFIRM_LEN);
   19ac2:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   19ac4:	4604      	mov	r4, r0
   19ac6:	460d      	mov	r5, r1
  WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pCa, SMP_CONFIRM_LEN);
   19ac8:	6958      	ldr	r0, [r3, #20]
  uint8_t *pCa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   19aca:	6849      	ldr	r1, [r1, #4]
{
   19acc:	b084      	sub	sp, #16
  WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pCa, SMP_CONFIRM_LEN);
   19ace:	2210      	movs	r2, #16
   19ad0:	3109      	adds	r1, #9
   19ad2:	3050      	adds	r0, #80	; 0x50
   19ad4:	f002 fcdc 	bl	1c490 <WStrReverseCpy>
 */
/*************************************************************************************************/
void smprScActPkCalcCb(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  /* Get random Nbi */
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   19ad8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   19ada:	6958      	ldr	r0, [r3, #20]
   19adc:	2110      	movs	r1, #16
   19ade:	4408      	add	r0, r1
   19ae0:	f7f6 fad6 	bl	10090 <SecRand>

  SMP_TRACE_128("Rand Nb", pCcb->pScCcb->pScratch->Nb_Eb);
   19ae4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   19ae6:	480f      	ldr	r0, [pc, #60]	; (19b24 <smprScActPkStoreCnfAndCalcCb+0x64>)
   19ae8:	6959      	ldr	r1, [r3, #20]
   19aea:	2210      	movs	r2, #16
   19aec:	4411      	add	r1, r2
   19aee:	f002 fbc5 	bl	1c27c <smpLogByteArray>
  /* Next command is the Pair Random */
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;

  /* Cb = f4(PKbx, PKax, Nbi, Rbi) where f4(U, V, x, Z) = AES-CMACx (U || V || Z) */
  SmpScCalcF4(pCcb, pMsg,
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   19af2:	6c63      	ldr	r3, [r4, #68]	; 0x44
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;
   19af4:	2204      	movs	r2, #4
   19af6:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   19afa:	68da      	ldr	r2, [r3, #12]
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   19afc:	689b      	ldr	r3, [r3, #8]
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   19afe:	9203      	str	r2, [sp, #12]
  SmpScCalcF4(pCcb, pMsg,
   19b00:	4620      	mov	r0, r4
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   19b02:	9302      	str	r3, [sp, #8]
  SmpScCalcF4(pCcb, pMsg,
   19b04:	f002 fb52 	bl	1c1ac <smpGetPkBit>
   19b08:	4629      	mov	r1, r5
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Nb_Eb);
   19b0a:	6c65      	ldr	r5, [r4, #68]	; 0x44
  SmpScCalcF4(pCcb, pMsg,
   19b0c:	4606      	mov	r6, r0
   19b0e:	4620      	mov	r0, r4
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Nb_Eb);
   19b10:	696c      	ldr	r4, [r5, #20]
  SmpScCalcF4(pCcb, pMsg,
   19b12:	9600      	str	r6, [sp, #0]
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Nb_Eb);
   19b14:	3410      	adds	r4, #16
  SmpScCalcF4(pCcb, pMsg,
   19b16:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   19b1a:	9401      	str	r4, [sp, #4]
   19b1c:	f002 fa18 	bl	1bf50 <SmpScCalcF4>
}
   19b20:	b004      	add	sp, #16
   19b22:	bd70      	pop	{r4, r5, r6, pc}
   19b24:	00024dd4 	.word	0x00024dd4

00019b28 <smprScActPkStorePinAndCalcCb>:
{
   19b28:	b570      	push	{r4, r5, r6, lr}
  if (pCcb->pScCcb->authType == SMP_AUTH_TYPE_PASSKEY)
   19b2a:	6c43      	ldr	r3, [r0, #68]	; 0x44
   19b2c:	785a      	ldrb	r2, [r3, #1]
   19b2e:	2a03      	cmp	r2, #3
{
   19b30:	b084      	sub	sp, #16
   19b32:	4604      	mov	r4, r0
   19b34:	460d      	mov	r5, r1
  if (pCcb->pScCcb->authType == SMP_AUTH_TYPE_PASSKEY)
   19b36:	d024      	beq.n	19b82 <smprScActPkStorePinAndCalcCb+0x5a>
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   19b38:	6958      	ldr	r0, [r3, #20]
   19b3a:	2110      	movs	r1, #16
   19b3c:	4408      	add	r0, r1
   19b3e:	f7f6 faa7 	bl	10090 <SecRand>
  SMP_TRACE_128("Rand Nb", pCcb->pScCcb->pScratch->Nb_Eb);
   19b42:	6c63      	ldr	r3, [r4, #68]	; 0x44
   19b44:	481e      	ldr	r0, [pc, #120]	; (19bc0 <smprScActPkStorePinAndCalcCb+0x98>)
   19b46:	6959      	ldr	r1, [r3, #20]
   19b48:	2210      	movs	r2, #16
   19b4a:	4411      	add	r1, r2
   19b4c:	f002 fb96 	bl	1c27c <smpLogByteArray>
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   19b50:	6c63      	ldr	r3, [r4, #68]	; 0x44
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;
   19b52:	2204      	movs	r2, #4
   19b54:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   19b58:	68da      	ldr	r2, [r3, #12]
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   19b5a:	689b      	ldr	r3, [r3, #8]
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   19b5c:	9203      	str	r2, [sp, #12]
  SmpScCalcF4(pCcb, pMsg,
   19b5e:	4620      	mov	r0, r4
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   19b60:	9302      	str	r3, [sp, #8]
  SmpScCalcF4(pCcb, pMsg,
   19b62:	f002 fb23 	bl	1c1ac <smpGetPkBit>
   19b66:	4629      	mov	r1, r5
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Nb_Eb);
   19b68:	6c65      	ldr	r5, [r4, #68]	; 0x44
  SmpScCalcF4(pCcb, pMsg,
   19b6a:	4606      	mov	r6, r0
   19b6c:	4620      	mov	r0, r4
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Nb_Eb);
   19b6e:	696c      	ldr	r4, [r5, #20]
  SmpScCalcF4(pCcb, pMsg,
   19b70:	9600      	str	r6, [sp, #0]
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Nb_Eb);
   19b72:	3410      	adds	r4, #16
  SmpScCalcF4(pCcb, pMsg,
   19b74:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   19b78:	9401      	str	r4, [sp, #4]
   19b7a:	f002 f9e9 	bl	1bf50 <SmpScCalcF4>
}
   19b7e:	b004      	add	sp, #16
   19b80:	bd70      	pop	{r4, r5, r6, pc}
    Calc128Cpy(pCcb->pScCcb->pScratch->Ra, (uint8_t *)calc128Zeros);
   19b82:	6958      	ldr	r0, [r3, #20]
   19b84:	490f      	ldr	r1, [pc, #60]	; (19bc4 <smprScActPkStorePinAndCalcCb+0x9c>)
   19b86:	3020      	adds	r0, #32
   19b88:	f002 fc08 	bl	1c39c <Calc128Cpy>
    Calc128Cpy(pCcb->pScCcb->pScratch->Rb, (uint8_t *)calc128Zeros);
   19b8c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   19b8e:	490d      	ldr	r1, [pc, #52]	; (19bc4 <smprScActPkStorePinAndCalcCb+0x9c>)
   19b90:	6958      	ldr	r0, [r3, #20]
   19b92:	3030      	adds	r0, #48	; 0x30
   19b94:	f002 fc02 	bl	1c39c <Calc128Cpy>
    if (pMsg->dm.authRsp.authDataLen <= 3)
   19b98:	7d2a      	ldrb	r2, [r5, #20]
      WStrReverseCpy(&pCcb->pScCcb->pScratch->Ra[13], pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
   19b9a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    if (pMsg->dm.authRsp.authDataLen <= 3)
   19b9c:	2a03      	cmp	r2, #3
   19b9e:	d8cb      	bhi.n	19b38 <smprScActPkStorePinAndCalcCb+0x10>
      WStrReverseCpy(&pCcb->pScCcb->pScratch->Ra[13], pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
   19ba0:	6958      	ldr	r0, [r3, #20]
   19ba2:	1d29      	adds	r1, r5, #4
   19ba4:	302d      	adds	r0, #45	; 0x2d
   19ba6:	9102      	str	r1, [sp, #8]
   19ba8:	f002 fc72 	bl	1c490 <WStrReverseCpy>
      WStrReverseCpy(&pCcb->pScCcb->pScratch->Rb[13], pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
   19bac:	6c63      	ldr	r3, [r4, #68]	; 0x44
   19bae:	7d2a      	ldrb	r2, [r5, #20]
   19bb0:	6958      	ldr	r0, [r3, #20]
   19bb2:	9902      	ldr	r1, [sp, #8]
   19bb4:	303d      	adds	r0, #61	; 0x3d
   19bb6:	f002 fc6b 	bl	1c490 <WStrReverseCpy>
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   19bba:	6c63      	ldr	r3, [r4, #68]	; 0x44
   19bbc:	e7bc      	b.n	19b38 <smprScActPkStorePinAndCalcCb+0x10>
   19bbe:	bf00      	nop
   19bc0:	00024dd4 	.word	0x00024dd4
   19bc4:	0002558c 	.word	0x0002558c

00019bc8 <smprScActPkCalcCb>:
{
   19bc8:	b570      	push	{r4, r5, r6, lr}
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   19bca:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   19bcc:	4604      	mov	r4, r0
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   19bce:	6958      	ldr	r0, [r3, #20]
{
   19bd0:	460d      	mov	r5, r1
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   19bd2:	2110      	movs	r1, #16
{
   19bd4:	b084      	sub	sp, #16
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   19bd6:	4408      	add	r0, r1
   19bd8:	f7f6 fa5a 	bl	10090 <SecRand>
  SMP_TRACE_128("Rand Nb", pCcb->pScCcb->pScratch->Nb_Eb);
   19bdc:	6c63      	ldr	r3, [r4, #68]	; 0x44
   19bde:	480f      	ldr	r0, [pc, #60]	; (19c1c <smprScActPkCalcCb+0x54>)
   19be0:	6959      	ldr	r1, [r3, #20]
   19be2:	2210      	movs	r2, #16
   19be4:	4411      	add	r1, r2
   19be6:	f002 fb49 	bl	1c27c <smpLogByteArray>
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   19bea:	6c63      	ldr	r3, [r4, #68]	; 0x44
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;
   19bec:	2204      	movs	r2, #4
   19bee:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   19bf2:	68da      	ldr	r2, [r3, #12]
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   19bf4:	689b      	ldr	r3, [r3, #8]
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   19bf6:	9203      	str	r2, [sp, #12]
  SmpScCalcF4(pCcb, pMsg,
   19bf8:	4620      	mov	r0, r4
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   19bfa:	9302      	str	r3, [sp, #8]
  SmpScCalcF4(pCcb, pMsg,
   19bfc:	f002 fad6 	bl	1c1ac <smpGetPkBit>
   19c00:	4629      	mov	r1, r5
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Nb_Eb);
   19c02:	6c65      	ldr	r5, [r4, #68]	; 0x44
  SmpScCalcF4(pCcb, pMsg,
   19c04:	4606      	mov	r6, r0
   19c06:	4620      	mov	r0, r4
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Nb_Eb);
   19c08:	696c      	ldr	r4, [r5, #20]
  SmpScCalcF4(pCcb, pMsg,
   19c0a:	9600      	str	r6, [sp, #0]
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Nb_Eb);
   19c0c:	3410      	adds	r4, #16
  SmpScCalcF4(pCcb, pMsg,
   19c0e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   19c12:	9401      	str	r4, [sp, #4]
   19c14:	f002 f99c 	bl	1bf50 <SmpScCalcF4>
}
   19c18:	b004      	add	sp, #16
   19c1a:	bd70      	pop	{r4, r5, r6, pc}
   19c1c:	00024dd4 	.word	0x00024dd4

00019c20 <smprScActPkSendCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActPkSendCnf(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   19c20:	b538      	push	{r3, r4, r5, lr}
   19c22:	460c      	mov	r4, r1
   19c24:	4605      	mov	r5, r0
  SMP_TRACE_128("Cbi", pMsg->aes.pCiphertext);
   19c26:	6849      	ldr	r1, [r1, #4]
   19c28:	4805      	ldr	r0, [pc, #20]	; (19c40 <smprScActPkSendCnf+0x20>)
   19c2a:	2210      	movs	r2, #16
   19c2c:	f002 fb26 	bl	1c27c <smpLogByteArray>

  /* Send the Cbi to the peer */
  smpScSendPairCnf(pCcb, pMsg, pMsg->aes.pCiphertext);
   19c30:	6862      	ldr	r2, [r4, #4]
   19c32:	4621      	mov	r1, r4
   19c34:	4628      	mov	r0, r5
}
   19c36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpScSendPairCnf(pCcb, pMsg, pMsg->aes.pCiphertext);
   19c3a:	f002 ba8f 	b.w	1c15c <smpScSendPairCnf>
   19c3e:	bf00      	nop
   19c40:	00024dec 	.word	0x00024dec

00019c44 <smprScActPkCalcCa>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActPkCalcCa(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   19c44:	b570      	push	{r4, r5, r6, lr}
  uint8_t *pNa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;

  /* Copy the Nai from the initiator */
  WStrReverseCpy(pCcb->pScCcb->pScratch->Na_Ea, pNa, SMP_RAND_LEN);
   19c46:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   19c48:	460d      	mov	r5, r1
  uint8_t *pNa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   19c4a:	6849      	ldr	r1, [r1, #4]
{
   19c4c:	4604      	mov	r4, r0
   19c4e:	b084      	sub	sp, #16
  WStrReverseCpy(pCcb->pScCcb->pScratch->Na_Ea, pNa, SMP_RAND_LEN);
   19c50:	6958      	ldr	r0, [r3, #20]
   19c52:	3109      	adds	r1, #9
   19c54:	2210      	movs	r2, #16
   19c56:	f002 fc1b 	bl	1c490 <WStrReverseCpy>

  /* Cai = f4(PKax, PKbx, Nbi, Rbi) where f4(U, V, x, Z) = AES-CMACx (U || V || Z) */
  SmpScCalcF4(pCcb, pMsg,
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   19c5a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  SmpScCalcF4(pCcb, pMsg,
   19c5c:	4620      	mov	r0, r4
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   19c5e:	689a      	ldr	r2, [r3, #8]
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   19c60:	68db      	ldr	r3, [r3, #12]
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   19c62:	9203      	str	r2, [sp, #12]
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   19c64:	9302      	str	r3, [sp, #8]
  SmpScCalcF4(pCcb, pMsg,
   19c66:	f002 faa1 	bl	1c1ac <smpGetPkBit>
   19c6a:	4629      	mov	r1, r5
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Na_Ea);
   19c6c:	6c65      	ldr	r5, [r4, #68]	; 0x44
  SmpScCalcF4(pCcb, pMsg,
   19c6e:	4606      	mov	r6, r0
   19c70:	4620      	mov	r0, r4
   19c72:	696c      	ldr	r4, [r5, #20]
   19c74:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   19c78:	e9cd 6400 	strd	r6, r4, [sp]
   19c7c:	f002 f968 	bl	1bf50 <SmpScCalcF4>
}
   19c80:	b004      	add	sp, #16
   19c82:	bd70      	pop	{r4, r5, r6, pc}

00019c84 <smprScActPkSendRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActPkSendRand(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   19c84:	b5f0      	push	{r4, r5, r6, r7, lr}
   19c86:	4604      	mov	r4, r0
   19c88:	b083      	sub	sp, #12
  SMP_TRACE_128("Ca", pMsg->aes.pCiphertext);
   19c8a:	481e      	ldr	r0, [pc, #120]	; (19d04 <smprScActPkSendRand+0x80>)
{
   19c8c:	460d      	mov	r5, r1
  SMP_TRACE_128("Ca", pMsg->aes.pCiphertext);
   19c8e:	2210      	movs	r2, #16
   19c90:	6849      	ldr	r1, [r1, #4]
   19c92:	f002 faf3 	bl	1c27c <smpLogByteArray>
  SMP_TRACE_128("Ca Peer", pCcb->pScCcb->pScratch->PeerCa_Ea);
   19c96:	6c63      	ldr	r3, [r4, #68]	; 0x44
   19c98:	481b      	ldr	r0, [pc, #108]	; (19d08 <smprScActPkSendRand+0x84>)
   19c9a:	6959      	ldr	r1, [r3, #20]
   19c9c:	2210      	movs	r2, #16
   19c9e:	3150      	adds	r1, #80	; 0x50
   19ca0:	f002 faec 	bl	1c27c <smpLogByteArray>

  /* Verify the Calculated Cai to previously received Cai */
  if (memcmp(pCcb->pScCcb->pScratch->PeerCa_Ea, pMsg->aes.pCiphertext, SMP_RAND_LEN))
   19ca4:	6c66      	ldr	r6, [r4, #68]	; 0x44
   19ca6:	6869      	ldr	r1, [r5, #4]
   19ca8:	6977      	ldr	r7, [r6, #20]
   19caa:	2210      	movs	r2, #16
   19cac:	f107 0050 	add.w	r0, r7, #80	; 0x50
   19cb0:	f007 fb9a 	bl	213e8 <memcmp>
   19cb4:	b9f8      	cbnz	r0, 19cf6 <smprScActPkSendRand+0x72>
  else
  {
     wsfMsgHdr_t hdr;

    /* Increment the bit position */
    if (++pCcb->pScCcb->pkPos >= SMP_PK_BIT_COUNT)
   19cb6:	78f3      	ldrb	r3, [r6, #3]
   19cb8:	3301      	adds	r3, #1
   19cba:	b2db      	uxtb	r3, r3
   19cbc:	2b13      	cmp	r3, #19
   19cbe:	70f3      	strb	r3, [r6, #3]
   19cc0:	d90c      	bls.n	19cdc <smprScActPkSendRand+0x58>
    {
      hdr.event = SMP_MSG_INT_PK_CMPL;
   19cc2:	231b      	movs	r3, #27
   19cc4:	f88d 3006 	strb.w	r3, [sp, #6]
      /* Send the Nbi */
      smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
    }

    /* Post an event to move to the next passkey confirm or complete the process */
    hdr.param = pCcb->connId;
   19cc8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
   19ccc:	f8ad 3004 	strh.w	r3, [sp, #4]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   19cd0:	a901      	add	r1, sp, #4
   19cd2:	4620      	mov	r0, r4
   19cd4:	f000 fc64 	bl	1a5a0 <smpSmExecute>
  }
}
   19cd8:	b003      	add	sp, #12
   19cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pCcb->nextCmdCode = SMP_CMD_PAIR_CNF;
   19cdc:	2203      	movs	r2, #3
      hdr.event = SMP_MSG_INT_PK_NEXT;
   19cde:	231a      	movs	r3, #26
      pCcb->nextCmdCode = SMP_CMD_PAIR_CNF;
   19ce0:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
      smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
   19ce4:	4629      	mov	r1, r5
   19ce6:	f107 0210 	add.w	r2, r7, #16
   19cea:	4620      	mov	r0, r4
      hdr.event = SMP_MSG_INT_PK_NEXT;
   19cec:	f88d 3006 	strb.w	r3, [sp, #6]
      smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
   19cf0:	f002 fa0c 	bl	1c10c <smpScSendRand>
   19cf4:	e7e8      	b.n	19cc8 <smprScActPkSendRand+0x44>
    smpScFailWithReattempt(pCcb);
   19cf6:	4620      	mov	r0, r4
}
   19cf8:	b003      	add	sp, #12
   19cfa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    smpScFailWithReattempt(pCcb);
   19cfe:	f002 ba8d 	b.w	1c21c <smpScFailWithReattempt>
   19d02:	bf00      	nop
   19d04:	00024df0 	.word	0x00024df0
   19d08:	00024df4 	.word	0x00024df4

00019d0c <smprScActOobSetup>:
 */
/*************************************************************************************************/
void smprScActOobSetup(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  /* The next command is the Pair Rand from the initiator */
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;
   19d0c:	2304      	movs	r3, #4
   19d0e:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
}
   19d12:	4770      	bx	lr

00019d14 <smprScActOobCalcCa>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActOobCalcCa(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   19d14:	b530      	push	{r4, r5, lr}
  uint8_t *pNa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;

  /* Copy the Na from the initiator */
  WStrReverseCpy(pCcb->pScCcb->pScratch->Na_Ea, pNa, SMP_CONFIRM_LEN);
   19d16:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   19d18:	460d      	mov	r5, r1
  uint8_t *pNa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   19d1a:	6849      	ldr	r1, [r1, #4]
{
   19d1c:	4604      	mov	r4, r0
   19d1e:	b087      	sub	sp, #28
  WStrReverseCpy(pCcb->pScCcb->pScratch->Na_Ea, pNa, SMP_CONFIRM_LEN);
   19d20:	6958      	ldr	r0, [r3, #20]
   19d22:	2210      	movs	r2, #16
   19d24:	3109      	adds	r1, #9
   19d26:	f002 fbb3 	bl	1c490 <WStrReverseCpy>

  /* If the peer device's OOB data flag does not indicate remote OOB data has been received,
     clear Rb. */
  if (pCcb->pairReq[SMP_OOB_POS] != SMP_OOB_DATA_PRESENT)
   19d2a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   19d2e:	2b01      	cmp	r3, #1
   19d30:	d005      	beq.n	19d3e <smprScActOobCalcCa+0x2a>
  {
    Calc128Cpy(pCcb->pScCcb->pScratch->Rb, (uint8_t*) calc128Zeros);
   19d32:	6c63      	ldr	r3, [r4, #68]	; 0x44
   19d34:	4915      	ldr	r1, [pc, #84]	; (19d8c <smprScActOobCalcCa+0x78>)
   19d36:	6958      	ldr	r0, [r3, #20]
   19d38:	3030      	adds	r0, #48	; 0x30
   19d3a:	f002 fb2f 	bl	1c39c <Calc128Cpy>
  }

  /* If we indicated the presence of remote OOB data has been received, calculate Ca. */
  if (pCcb->pairRsp[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT)
   19d3e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   19d42:	2b01      	cmp	r3, #1
  {
    /* Calculate Ca using Toolkit function F4 */
    SmpScCalcF4(pCcb, pMsg,
                pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   19d44:	6c63      	ldr	r3, [r4, #68]	; 0x44
  if (pCcb->pairRsp[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT)
   19d46:	d013      	beq.n	19d70 <smprScActOobCalcCa+0x5c>
  else
  {
    /* Simulate the ca calculation is complete and clear ra */
    secCmacMsg_t msg;

    Calc128Cpy(pCcb->pScCcb->pScratch->Ra, (uint8_t*)calc128Zeros);
   19d48:	6958      	ldr	r0, [r3, #20]
   19d4a:	4910      	ldr	r1, [pc, #64]	; (19d8c <smprScActOobCalcCa+0x78>)
   19d4c:	3020      	adds	r0, #32
   19d4e:	f002 fb25 	bl	1c39c <Calc128Cpy>

    msg.hdr.param = pCcb->connId;
   19d52:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
   19d56:	f8ad 500c 	strh.w	r5, [sp, #12]
    msg.hdr.event = SMP_MSG_WSF_CMAC_CMPL;
   19d5a:	221c      	movs	r2, #28
    msg.pPlainText = NULL;
   19d5c:	2300      	movs	r3, #0

    smpSmExecute(pCcb, (smpMsg_t *) &msg);
   19d5e:	a903      	add	r1, sp, #12
   19d60:	4620      	mov	r0, r4
    msg.hdr.event = SMP_MSG_WSF_CMAC_CMPL;
   19d62:	f88d 200e 	strb.w	r2, [sp, #14]
    msg.pPlainText = NULL;
   19d66:	9305      	str	r3, [sp, #20]
    smpSmExecute(pCcb, (smpMsg_t *) &msg);
   19d68:	f000 fc1a 	bl	1a5a0 <smpSmExecute>
  }
}
   19d6c:	b007      	add	sp, #28
   19d6e:	bd30      	pop	{r4, r5, pc}
                0, pCcb->pScCcb->pScratch->Ra);
   19d70:	695a      	ldr	r2, [r3, #20]
                pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   19d72:	689b      	ldr	r3, [r3, #8]
                0, pCcb->pScCcb->pScratch->Ra);
   19d74:	3220      	adds	r2, #32
    SmpScCalcF4(pCcb, pMsg,
   19d76:	2000      	movs	r0, #0
   19d78:	e9cd 0200 	strd	r0, r2, [sp]
   19d7c:	4629      	mov	r1, r5
   19d7e:	461a      	mov	r2, r3
   19d80:	4620      	mov	r0, r4
   19d82:	f002 f8e5 	bl	1bf50 <SmpScCalcF4>
}
   19d86:	b007      	add	sp, #28
   19d88:	bd30      	pop	{r4, r5, pc}
   19d8a:	bf00      	nop
   19d8c:	0002558c 	.word	0x0002558c

00019d90 <smprScActOobSendRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActOobSendRand(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   19d90:	b570      	push	{r4, r5, r6, lr}
  /* Only compare Ca if we indicated that we received OOB data. */
  if (pCcb->pairRsp[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT)
   19d92:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   19d96:	2b01      	cmp	r3, #1
{
   19d98:	4604      	mov	r4, r0
   19d9a:	460d      	mov	r5, r1
  if (pCcb->pairRsp[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT)
   19d9c:	d018      	beq.n	19dd0 <smprScActOobSendRand+0x40>

  /* Next command is a DK Key Check from initiator */
  pCcb->nextCmdCode = SMP_CMD_DHKEY_CHECK;

  /* Get a random Nb */
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   19d9e:	6c43      	ldr	r3, [r0, #68]	; 0x44
   19da0:	695e      	ldr	r6, [r3, #20]
  pCcb->nextCmdCode = SMP_CMD_DHKEY_CHECK;
   19da2:	230d      	movs	r3, #13
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   19da4:	2110      	movs	r1, #16
   19da6:	1870      	adds	r0, r6, r1
  pCcb->nextCmdCode = SMP_CMD_DHKEY_CHECK;
   19da8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   19dac:	f7f6 f970 	bl	10090 <SecRand>

  SMP_TRACE_128("Rand Nb", pCcb->pScCcb->pScratch->Nb_Eb);
   19db0:	6c63      	ldr	r3, [r4, #68]	; 0x44
   19db2:	4811      	ldr	r0, [pc, #68]	; (19df8 <smprScActOobSendRand+0x68>)
   19db4:	6959      	ldr	r1, [r3, #20]
   19db6:	2210      	movs	r2, #16
   19db8:	4411      	add	r1, r2
   19dba:	f002 fa5f 	bl	1c27c <smpLogByteArray>

  /* Send the rand Nb to the initiator */
  smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
   19dbe:	6c63      	ldr	r3, [r4, #68]	; 0x44
   19dc0:	695a      	ldr	r2, [r3, #20]
   19dc2:	4629      	mov	r1, r5
   19dc4:	4620      	mov	r0, r4
   19dc6:	3210      	adds	r2, #16
}
   19dc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
   19dcc:	f002 b99e 	b.w	1c10c <smpScSendRand>
    SMP_TRACE_128("Ca", pMsg->aes.pCiphertext);
   19dd0:	6849      	ldr	r1, [r1, #4]
   19dd2:	480a      	ldr	r0, [pc, #40]	; (19dfc <smprScActOobSendRand+0x6c>)
   19dd4:	2210      	movs	r2, #16
   19dd6:	f002 fa51 	bl	1c27c <smpLogByteArray>
    if (memcmp(pCcb->pScCcb->pScratch->PeerCa_Ea, pMsg->aes.pCiphertext, SMP_CONFIRM_LEN))
   19dda:	6c63      	ldr	r3, [r4, #68]	; 0x44
   19ddc:	6869      	ldr	r1, [r5, #4]
   19dde:	695e      	ldr	r6, [r3, #20]
   19de0:	2210      	movs	r2, #16
   19de2:	f106 0050 	add.w	r0, r6, #80	; 0x50
   19de6:	f007 faff 	bl	213e8 <memcmp>
   19dea:	2800      	cmp	r0, #0
   19dec:	d0d9      	beq.n	19da2 <smprScActOobSendRand+0x12>
      smpScFailWithReattempt(pCcb);
   19dee:	4620      	mov	r0, r4
}
   19df0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      smpScFailWithReattempt(pCcb);
   19df4:	f002 ba12 	b.w	1c21c <smpScFailWithReattempt>
   19df8:	00024dd4 	.word	0x00024dd4
   19dfc:	00024df0 	.word	0x00024df0

00019e00 <smprScActStoreDhCheck>:
void smprScActStoreDhCheck(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  uint8_t *pEa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;

  /* Signal that not further commands are expected until Key Distribution phase (if applicable) */
  pCcb->nextCmdCode = SMP_CMD_MAX;
   19e00:	220f      	movs	r2, #15

  /* The Ea from the peer is in the cmd message (copy as MSB First) */
  WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pEa, SMP_CONFIRM_LEN);
   19e02:	6c43      	ldr	r3, [r0, #68]	; 0x44
  uint8_t *pEa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   19e04:	6849      	ldr	r1, [r1, #4]
  pCcb->nextCmdCode = SMP_CMD_MAX;
   19e06:	f880 203f 	strb.w	r2, [r0, #63]	; 0x3f
  WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pEa, SMP_CONFIRM_LEN);
   19e0a:	6958      	ldr	r0, [r3, #20]
   19e0c:	2210      	movs	r2, #16
   19e0e:	3109      	adds	r1, #9
   19e10:	3050      	adds	r0, #80	; 0x50
   19e12:	f002 bb3d 	b.w	1c490 <WStrReverseCpy>
   19e16:	bf00      	nop

00019e18 <smprScActWaitDhCheck>:
void smprScActWaitDhCheck(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  /* Next command is a DH Key Check */
  pCcb->nextCmdCode = SMP_CMD_DHKEY_CHECK;

  if (pCcb->pScCcb->authType == SMP_AUTH_TYPE_PASSKEY)
   19e18:	6c42      	ldr	r2, [r0, #68]	; 0x44
  pCcb->nextCmdCode = SMP_CMD_DHKEY_CHECK;
   19e1a:	f04f 0c0d 	mov.w	ip, #13
   19e1e:	f880 c03f 	strb.w	ip, [r0, #63]	; 0x3f
  if (pCcb->pScCcb->authType == SMP_AUTH_TYPE_PASSKEY)
   19e22:	7853      	ldrb	r3, [r2, #1]
   19e24:	2b03      	cmp	r3, #3
   19e26:	d000      	beq.n	19e2a <smprScActWaitDhCheck+0x12>
  {
    /* Send the Pair Rand Nb */
    smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
  }
}
   19e28:	4770      	bx	lr
    smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
   19e2a:	6952      	ldr	r2, [r2, #20]
   19e2c:	3210      	adds	r2, #16
   19e2e:	f002 b96d 	b.w	1c10c <smpScSendRand>
   19e32:	bf00      	nop

00019e34 <smprScActCalcDHKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActCalcDHKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   19e34:	b538      	push	{r3, r4, r5, lr}
  if (pCcb->nextCmdCode == SMP_CMD_DHKEY_CHECK)
   19e36:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
   19e3a:	2b0d      	cmp	r3, #13
{
   19e3c:	4604      	mov	r4, r0
   19e3e:	460d      	mov	r5, r1
  if (pCcb->nextCmdCode == SMP_CMD_DHKEY_CHECK)
   19e40:	d005      	beq.n	19e4e <smprScActCalcDHKey+0x1a>
    /* The Ea from the peer is in the cmd message (copy as MSB First) */
    WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pEa, SMP_CONFIRM_LEN);
  }

  /* Complete the calculation */
  smpScActCalcSharedSecret(pCcb, pMsg);
   19e42:	4629      	mov	r1, r5
   19e44:	4620      	mov	r0, r4
}
   19e46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpScActCalcSharedSecret(pCcb, pMsg);
   19e4a:	f001 be41 	b.w	1bad0 <smpScActCalcSharedSecret>
    WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pEa, SMP_CONFIRM_LEN);
   19e4e:	6c43      	ldr	r3, [r0, #68]	; 0x44
    uint8_t *pEa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   19e50:	6849      	ldr	r1, [r1, #4]
    WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pEa, SMP_CONFIRM_LEN);
   19e52:	6958      	ldr	r0, [r3, #20]
   19e54:	3109      	adds	r1, #9
   19e56:	3050      	adds	r0, #80	; 0x50
   19e58:	2210      	movs	r2, #16
   19e5a:	f002 fb19 	bl	1c490 <WStrReverseCpy>
  smpScActCalcSharedSecret(pCcb, pMsg);
   19e5e:	4629      	mov	r1, r5
   19e60:	4620      	mov	r0, r4
}
   19e62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpScActCalcSharedSecret(pCcb, pMsg);
   19e66:	f001 be33 	b.w	1bad0 <smpScActCalcSharedSecret>
   19e6a:	bf00      	nop

00019e6c <smprScActDHKeyCheckSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActDHKeyCheckSend(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   19e6c:	b570      	push	{r4, r5, r6, lr}
   19e6e:	4604      	mov	r4, r0
   19e70:	b082      	sub	sp, #8
  SMP_TRACE_128("DHKey Eb", pMsg->aes.pCiphertext);
   19e72:	2210      	movs	r2, #16
   19e74:	4825      	ldr	r0, [pc, #148]	; (19f0c <smprScActDHKeyCheckSend+0xa0>)
{
   19e76:	460d      	mov	r5, r1
  SMP_TRACE_128("DHKey Eb", pMsg->aes.pCiphertext);
   19e78:	6849      	ldr	r1, [r1, #4]
   19e7a:	f002 f9ff 	bl	1c27c <smpLogByteArray>

  /* The Eb from the CMAC calculation */
  Calc128Cpy(pCcb->pScCcb->pScratch->Nb_Eb, pMsg->aes.pCiphertext);
   19e7e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   19e80:	6869      	ldr	r1, [r5, #4]
   19e82:	6958      	ldr	r0, [r3, #20]
   19e84:	3010      	adds	r0, #16
   19e86:	f002 fa89 	bl	1c39c <Calc128Cpy>

  /* Verify the DH Key Check Ea with the value received from the initiator */
  if (memcmp(pCcb->pScCcb->pScratch->PeerCa_Ea, pCcb->pScCcb->pScratch->Na_Ea, SMP_RAND_LEN) == 0)
   19e8a:	6c66      	ldr	r6, [r4, #68]	; 0x44
   19e8c:	6971      	ldr	r1, [r6, #20]
   19e8e:	2210      	movs	r2, #16
   19e90:	f101 0050 	add.w	r0, r1, #80	; 0x50
   19e94:	f007 faa8 	bl	213e8 <memcmp>
   19e98:	b9c8      	cbnz	r0, 19ece <smprScActDHKeyCheckSend+0x62>
  {
    /* Adjust key based on max key length */
    uint8_t  encKeyLen = (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
                          pCcb->pairReq[SMP_MAXKEY_POS] : pCcb->pairRsp[SMP_MAXKEY_POS];

    memset((pCcb->pScCcb->pLtk->ltk_t + encKeyLen), 0, (SMP_KEY_LEN - encKeyLen));
   19e9a:	69b3      	ldr	r3, [r6, #24]
    uint8_t  encKeyLen = (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
   19e9c:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
    memset((pCcb->pScCcb->pLtk->ltk_t + encKeyLen), 0, (SMP_KEY_LEN - encKeyLen));
   19ea0:	4601      	mov	r1, r0
   19ea2:	f103 0010 	add.w	r0, r3, #16
    uint8_t  encKeyLen = (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
   19ea6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   19eaa:	429a      	cmp	r2, r3
   19eac:	bf28      	it	cs
   19eae:	461a      	movcs	r2, r3
    memset((pCcb->pScCcb->pLtk->ltk_t + encKeyLen), 0, (SMP_KEY_LEN - encKeyLen));
   19eb0:	4410      	add	r0, r2
   19eb2:	f1c2 0210 	rsb	r2, r2, #16
   19eb6:	f007 fac9 	bl	2144c <memset>

    /* Send the DH Key check Eb to the initiator */
    smpScSendDHKeyCheck(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
   19eba:	6c63      	ldr	r3, [r4, #68]	; 0x44
   19ebc:	695a      	ldr	r2, [r3, #20]
   19ebe:	4629      	mov	r1, r5
   19ec0:	4620      	mov	r0, r4
   19ec2:	3210      	adds	r2, #16
      hdr.event = SMP_MSG_DH_CHECK_FAILURE;
    }

    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
  }
}
   19ec4:	b002      	add	sp, #8
   19ec6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    smpScSendDHKeyCheck(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
   19eca:	f002 b8f7 	b.w	1c0bc <smpScSendDHKeyCheck>
    pCcb->attempts++;
   19ece:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    hdr.param = pCcb->connId;
   19ed2:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
   19ed6:	f8ad 0004 	strh.w	r0, [sp, #4]
    pCcb->attempts++;
   19eda:	3301      	adds	r3, #1
    hdr.status = SMP_ERR_DH_KEY_CHECK;
   19edc:	220b      	movs	r2, #11
    pCcb->attempts++;
   19ede:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hdr.status = SMP_ERR_DH_KEY_CHECK;
   19ee2:	f88d 2007 	strb.w	r2, [sp, #7]
    SmpDbPairingFailed(pCcb->connId);
   19ee6:	f000 fd45 	bl	1a974 <SmpDbPairingFailed>
    if (pCcb->attempts == pSmpCfg->maxAttempts)
   19eea:	4a09      	ldr	r2, [pc, #36]	; (19f10 <smprScActDHKeyCheckSend+0xa4>)
   19eec:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   19ef0:	6812      	ldr	r2, [r2, #0]
   19ef2:	79d2      	ldrb	r2, [r2, #7]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   19ef4:	a901      	add	r1, sp, #4
      hdr.event = SMP_MSG_DH_CHECK_FAILURE;
   19ef6:	4293      	cmp	r3, r2
   19ef8:	bf0c      	ite	eq
   19efa:	230d      	moveq	r3, #13
   19efc:	231d      	movne	r3, #29
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   19efe:	4620      	mov	r0, r4
   19f00:	f88d 3006 	strb.w	r3, [sp, #6]
   19f04:	f000 fb4c 	bl	1a5a0 <smpSmExecute>
}
   19f08:	b002      	add	sp, #8
   19f0a:	bd70      	pop	{r4, r5, r6, pc}
   19f0c:	00024dfc 	.word	0x00024dfc
   19f10:	10002b04 	.word	0x10002b04

00019f14 <SmprScInit>:
 */
/*************************************************************************************************/
void SmprScInit(void)
{
  /* set up callback interface */
  smpCb.pSlave = &smprScSmIf;
   19f14:	4b02      	ldr	r3, [pc, #8]	; (19f20 <SmprScInit+0xc>)
   19f16:	4a03      	ldr	r2, [pc, #12]	; (19f24 <SmprScInit+0x10>)
   19f18:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* General SMP LESC Initialization */
  SmpScInit();
   19f1c:	f002 b870 	b.w	1c000 <SmpScInit>
   19f20:	10005bfc 	.word	0x10005bfc
   19f24:	00024ee0 	.word	0x00024ee0

00019f28 <SmprInit>:
 */
/*************************************************************************************************/
void SmprInit(void)
{
  /* set up state machine interface */
  smpCb.pSlave = &smprSmIf;
   19f28:	4b04      	ldr	r3, [pc, #16]	; (19f3c <SmprInit+0x14>)
  smpCb.procPairing = smpProcPairing;
   19f2a:	4905      	ldr	r1, [pc, #20]	; (19f40 <SmprInit+0x18>)
  smpCb.procAuthReq = smpAuthReq;
   19f2c:	4a05      	ldr	r2, [pc, #20]	; (19f44 <SmprInit+0x1c>)
  smpCb.pSlave = &smprSmIf;
   19f2e:	4806      	ldr	r0, [pc, #24]	; (19f48 <SmprInit+0x20>)
   19f30:	f8c3 00d8 	str.w	r0, [r3, #216]	; 0xd8
  smpCb.procAuthReq = smpAuthReq;
   19f34:	e9c3 1239 	strd	r1, r2, [r3, #228]	; 0xe4
}
   19f38:	4770      	bx	lr
   19f3a:	bf00      	nop
   19f3c:	10005bfc 	.word	0x10005bfc
   19f40:	0001a615 	.word	0x0001a615
   19f44:	0001a731 	.word	0x0001a731
   19f48:	000251c4 	.word	0x000251c4

00019f4c <smpStartRspTimer>:
 */
/*************************************************************************************************/
void smpStartRspTimer(smpCcb_t *pCcb)
{
  /* start smp response timer */
  pCcb->rspTimer.msg.event = SMP_MSG_INT_RSP_TIMEOUT;
   19f4c:	f24e 130f 	movw	r3, #57615	; 0xe10f
   19f50:	8143      	strh	r3, [r0, #10]
  pCcb->rspTimer.msg.status = SMP_ERR_TIMEOUT;
  WsfTimerStartSec(&pCcb->rspTimer, SMP_TIMEOUT);
   19f52:	211e      	movs	r1, #30
   19f54:	f7f9 beb8 	b.w	13cc8 <WsfTimerStartSec>

00019f58 <smpActNone>:
 */
/*************************************************************************************************/
void smpActNone(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  return;
}
   19f58:	4770      	bx	lr
   19f5a:	bf00      	nop

00019f5c <smpActCleanup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActCleanup(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   19f5c:	b510      	push	{r4, lr}
   19f5e:	4604      	mov	r4, r0
  if (pCcb->pScr != NULL)
   19f60:	6b00      	ldr	r0, [r0, #48]	; 0x30
   19f62:	b118      	cbz	r0, 19f6c <smpActCleanup+0x10>
    WsfBufFree(pCcb->pScr);
   19f64:	f7f9 fc26 	bl	137b4 <WsfBufFree>
    pCcb->pScr = NULL;
   19f68:	2300      	movs	r3, #0
   19f6a:	6323      	str	r3, [r4, #48]	; 0x30
  WsfTimerStop(&pCcb->rspTimer);
   19f6c:	4620      	mov	r0, r4
   19f6e:	f7f9 ff31 	bl	13dd4 <WsfTimerStop>
  WsfTimerStop(&pCcb->waitTimer);
   19f72:	f104 0010 	add.w	r0, r4, #16
   19f76:	f7f9 ff2d 	bl	13dd4 <WsfTimerStop>
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   19f7a:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
  pCcb->secReq = FALSE;
   19f7e:	2300      	movs	r3, #0
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   19f80:	429a      	cmp	r2, r3
   19f82:	bf14      	ite	ne
   19f84:	220b      	movne	r2, #11
   19f86:	2201      	moveq	r2, #1
  pCcb->secReq = FALSE;
   19f88:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   19f8c:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
  pCcb->lastSentKey = 0;
   19f90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  smpCleanup(pCcb);
}
   19f94:	bd10      	pop	{r4, pc}
   19f96:	bf00      	nop

00019f98 <smpSendPairingFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpSendPairingFailed(smpCcb_t *pCcb, uint8_t reason)
{
   19f98:	b538      	push	{r3, r4, r5, lr}
   19f9a:	4604      	mov	r4, r0
  uint8_t *pPacket;
  uint8_t *p;

  if ((pPacket = smpMsgAlloc(L2C_PAYLOAD_START + SMP_PAIR_FAIL_LEN)) != NULL)
   19f9c:	200a      	movs	r0, #10
{
   19f9e:	460d      	mov	r5, r1
  if ((pPacket = smpMsgAlloc(L2C_PAYLOAD_START + SMP_PAIR_FAIL_LEN)) != NULL)
   19fa0:	f001 f916 	bl	1b1d0 <smpMsgAlloc>
   19fa4:	b140      	cbz	r0, 19fb8 <smpSendPairingFailed+0x20>
  {
    p = pPacket + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_FAIL);
   19fa6:	2305      	movs	r3, #5
   19fa8:	7203      	strb	r3, [r0, #8]
    UINT8_TO_BSTREAM(p, reason);
   19faa:	7245      	strb	r5, [r0, #9]
   19fac:	4601      	mov	r1, r0

    smpSendPkt(pCcb, pPacket);
   19fae:	4620      	mov	r0, r4
  }
}
   19fb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    smpSendPkt(pCcb, pPacket);
   19fb4:	f001 b8ec 	b.w	1b190 <smpSendPkt>
}
   19fb8:	bd38      	pop	{r3, r4, r5, pc}
   19fba:	bf00      	nop

00019fbc <smpActPairingFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairingFailed(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   19fbc:	b538      	push	{r3, r4, r5, lr}
   19fbe:	4604      	mov	r4, r0
  if (pCcb->pScr != NULL)
   19fc0:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
   19fc2:	460d      	mov	r5, r1
  if (pCcb->pScr != NULL)
   19fc4:	b118      	cbz	r0, 19fce <smpActPairingFailed+0x12>
    WsfBufFree(pCcb->pScr);
   19fc6:	f7f9 fbf5 	bl	137b4 <WsfBufFree>
    pCcb->pScr = NULL;
   19fca:	2300      	movs	r3, #0
   19fcc:	6323      	str	r3, [r4, #48]	; 0x30
  WsfTimerStop(&pCcb->rspTimer);
   19fce:	4620      	mov	r0, r4
   19fd0:	f7f9 ff00 	bl	13dd4 <WsfTimerStop>
  WsfTimerStop(&pCcb->waitTimer);
   19fd4:	f104 0010 	add.w	r0, r4, #16
   19fd8:	f7f9 fefc 	bl	13dd4 <WsfTimerStop>
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   19fdc:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
  /* clean up */
  smpCleanup(pCcb);

  /* set connection idle */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_IDLE);
   19fe0:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  pCcb->secReq = FALSE;
   19fe4:	2200      	movs	r2, #0
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   19fe6:	4293      	cmp	r3, r2
   19fe8:	bf14      	ite	ne
   19fea:	230b      	movne	r3, #11
   19fec:	2301      	moveq	r3, #1
   19fee:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  pCcb->secReq = FALSE;
   19ff2:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  pCcb->lastSentKey = 0;
   19ff6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_IDLE);
   19ffa:	2101      	movs	r1, #1
   19ffc:	f7fe fc7a 	bl	188f4 <DmConnSetIdle>

  /* notify DM of pairing failure */
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
   1a000:	232b      	movs	r3, #43	; 0x2b
   1a002:	70ab      	strb	r3, [r5, #2]
  DmSmpCbackExec((dmEvt_t *) pMsg);
   1a004:	4628      	mov	r0, r5
}
   1a006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  DmSmpCbackExec((dmEvt_t *) pMsg);
   1a00a:	f7ff b98f 	b.w	1932c <DmSmpCbackExec>
   1a00e:	bf00      	nop

0001a010 <smpActPairingCancel>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairingCancel(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a010:	b570      	push	{r4, r5, r6, lr}
   1a012:	4604      	mov	r4, r0
  if ((pPacket = smpMsgAlloc(L2C_PAYLOAD_START + SMP_PAIR_FAIL_LEN)) != NULL)
   1a014:	200a      	movs	r0, #10
  /* send pairing failed packet */
  smpSendPairingFailed(pCcb, pMsg->hdr.status);
   1a016:	78ce      	ldrb	r6, [r1, #3]
{
   1a018:	460d      	mov	r5, r1
  if ((pPacket = smpMsgAlloc(L2C_PAYLOAD_START + SMP_PAIR_FAIL_LEN)) != NULL)
   1a01a:	f001 f8d9 	bl	1b1d0 <smpMsgAlloc>
   1a01e:	b130      	cbz	r0, 1a02e <smpActPairingCancel+0x1e>
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_FAIL);
   1a020:	2305      	movs	r3, #5
   1a022:	4601      	mov	r1, r0
   1a024:	7203      	strb	r3, [r0, #8]
    UINT8_TO_BSTREAM(p, reason);
   1a026:	7246      	strb	r6, [r0, #9]
    smpSendPkt(pCcb, pPacket);
   1a028:	4620      	mov	r0, r4
   1a02a:	f001 f8b1 	bl	1b190 <smpSendPkt>
  if (pCcb->pScr != NULL)
   1a02e:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1a030:	b118      	cbz	r0, 1a03a <smpActPairingCancel+0x2a>
    WsfBufFree(pCcb->pScr);
   1a032:	f7f9 fbbf 	bl	137b4 <WsfBufFree>
    pCcb->pScr = NULL;
   1a036:	2300      	movs	r3, #0
   1a038:	6323      	str	r3, [r4, #48]	; 0x30
  WsfTimerStop(&pCcb->rspTimer);
   1a03a:	4620      	mov	r0, r4
   1a03c:	f7f9 feca 	bl	13dd4 <WsfTimerStop>
  WsfTimerStop(&pCcb->waitTimer);
   1a040:	f104 0010 	add.w	r0, r4, #16
   1a044:	f7f9 fec6 	bl	13dd4 <WsfTimerStop>
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   1a048:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_IDLE);
   1a04c:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  pCcb->secReq = FALSE;
   1a050:	2200      	movs	r2, #0
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   1a052:	4293      	cmp	r3, r2
   1a054:	bf14      	ite	ne
   1a056:	230b      	movne	r3, #11
   1a058:	2301      	moveq	r3, #1
   1a05a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  pCcb->secReq = FALSE;
   1a05e:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  pCcb->lastSentKey = 0;
   1a062:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_IDLE);
   1a066:	2101      	movs	r1, #1
   1a068:	f7fe fc44 	bl	188f4 <DmConnSetIdle>
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
   1a06c:	232b      	movs	r3, #43	; 0x2b
   1a06e:	70ab      	strb	r3, [r5, #2]
  DmSmpCbackExec((dmEvt_t *) pMsg);
   1a070:	4628      	mov	r0, r5

  smpActPairingFailed(pCcb, pMsg);
}
   1a072:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  DmSmpCbackExec((dmEvt_t *) pMsg);
   1a076:	f7ff b959 	b.w	1932c <DmSmpCbackExec>
   1a07a:	bf00      	nop

0001a07c <smpActStorePin>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActStorePin(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a07c:	b538      	push	{r3, r4, r5, lr}
   1a07e:	460c      	mov	r4, r1
  /* copy authentication data to scratchpad */
  memcpy(pCcb->pScr->buf.b1, pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
   1a080:	7d0a      	ldrb	r2, [r1, #20]
{
   1a082:	4605      	mov	r5, r0
  memcpy(pCcb->pScr->buf.b1, pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
   1a084:	3104      	adds	r1, #4
   1a086:	6b00      	ldr	r0, [r0, #48]	; 0x30
   1a088:	f7f2 f83a 	bl	c100 <memcpy>

  /* zero out unused pin data */
  if (pMsg->dm.authRsp.authDataLen == SMP_PIN_LEN)
   1a08c:	7d23      	ldrb	r3, [r4, #20]
   1a08e:	2b03      	cmp	r3, #3
   1a090:	d000      	beq.n	1a094 <smpActStorePin+0x18>
  {
    memset(&pCcb->pScr->buf.b1[SMP_PIN_LEN], 0, SMP_OOB_LEN - SMP_PIN_LEN);
  }
}
   1a092:	bd38      	pop	{r3, r4, r5, pc}
    memset(&pCcb->pScr->buf.b1[SMP_PIN_LEN], 0, SMP_OOB_LEN - SMP_PIN_LEN);
   1a094:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   1a096:	2300      	movs	r3, #0
   1a098:	f8c2 3003 	str.w	r3, [r2, #3]
   1a09c:	f8c2 3007 	str.w	r3, [r2, #7]
   1a0a0:	f8c2 300b 	str.w	r3, [r2, #11]
   1a0a4:	73d3      	strb	r3, [r2, #15]
}
   1a0a6:	bd38      	pop	{r3, r4, r5, pc}

0001a0a8 <smpActPairCnfCalc1>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairCnfCalc1(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a0a8:	b538      	push	{r3, r4, r5, lr}
   1a0aa:	460d      	mov	r5, r1
  memcpy(pCcb->pScr->buf.b1, pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
   1a0ac:	7d0a      	ldrb	r2, [r1, #20]
{
   1a0ae:	4604      	mov	r4, r0
  memcpy(pCcb->pScr->buf.b1, pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
   1a0b0:	3104      	adds	r1, #4
   1a0b2:	6b00      	ldr	r0, [r0, #48]	; 0x30
   1a0b4:	f7f2 f824 	bl	c100 <memcpy>
  if (pMsg->dm.authRsp.authDataLen == SMP_PIN_LEN)
   1a0b8:	7d2b      	ldrb	r3, [r5, #20]
   1a0ba:	2b03      	cmp	r3, #3
   1a0bc:	d00c      	beq.n	1a0d8 <smpActPairCnfCalc1+0x30>
  /* store authentication data */
  smpActStorePin(pCcb, pMsg);

  /* get random number to scratchpad */
  SecRand(pCcb->pScr->buf.b4, SMP_RAND_LEN);
   1a0be:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1a0c0:	2110      	movs	r1, #16
   1a0c2:	3030      	adds	r0, #48	; 0x30
   1a0c4:	f7f5 ffe4 	bl	10090 <SecRand>

  /* execute calculation */
  smpCalcC1Part1(pCcb, pCcb->pScr->buf.b1, pCcb->pScr->buf.b4);
   1a0c8:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1a0ca:	4620      	mov	r0, r4
   1a0cc:	f101 0230 	add.w	r2, r1, #48	; 0x30
}
   1a0d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpCalcC1Part1(pCcb, pCcb->pScr->buf.b1, pCcb->pScr->buf.b4);
   1a0d4:	f000 be70 	b.w	1adb8 <smpCalcC1Part1>
    memset(&pCcb->pScr->buf.b1[SMP_PIN_LEN], 0, SMP_OOB_LEN - SMP_PIN_LEN);
   1a0d8:	6b22      	ldr	r2, [r4, #48]	; 0x30
   1a0da:	2300      	movs	r3, #0
   1a0dc:	f8c2 3003 	str.w	r3, [r2, #3]
   1a0e0:	f8c2 3007 	str.w	r3, [r2, #7]
   1a0e4:	f8c2 300b 	str.w	r3, [r2, #11]
   1a0e8:	73d3      	strb	r3, [r2, #15]
   1a0ea:	e7e8      	b.n	1a0be <smpActPairCnfCalc1+0x16>

0001a0ec <smpActPairCnfCalc2>:
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairCnfCalc2(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  smpCalcC1Part2(pCcb, pCcb->pScr->buf.b1, pMsg->aes.pCiphertext);
   1a0ec:	684a      	ldr	r2, [r1, #4]
   1a0ee:	6b01      	ldr	r1, [r0, #48]	; 0x30
   1a0f0:	f000 bf06 	b.w	1af00 <smpCalcC1Part2>

0001a0f4 <smpActSendPairCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActSendPairCnf(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a0f4:	b538      	push	{r3, r4, r5, lr}
  uint8_t   *pPkt;
  uint8_t   *p;

  /* set next expected packet */
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_PAIR_CNF : SMP_CMD_PAIR_RAND;
   1a0f6:	f890 503a 	ldrb.w	r5, [r0, #58]	; 0x3a
   1a0fa:	2d00      	cmp	r5, #0
{
   1a0fc:	460b      	mov	r3, r1
  pCcb->rspTimer.msg.event = SMP_MSG_INT_RSP_TIMEOUT;
   1a0fe:	f24e 120f 	movw	r2, #57615	; 0xe10f
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_PAIR_CNF : SMP_CMD_PAIR_RAND;
   1a102:	bf14      	ite	ne
   1a104:	2103      	movne	r1, #3
   1a106:	2104      	moveq	r1, #4
   1a108:	f880 103f 	strb.w	r1, [r0, #63]	; 0x3f
  pCcb->rspTimer.msg.event = SMP_MSG_INT_RSP_TIMEOUT;
   1a10c:	8142      	strh	r2, [r0, #10]
  WsfTimerStartSec(&pCcb->rspTimer, SMP_TIMEOUT);
   1a10e:	211e      	movs	r1, #30
{
   1a110:	4604      	mov	r4, r0
   1a112:	461d      	mov	r5, r3
  WsfTimerStartSec(&pCcb->rspTimer, SMP_TIMEOUT);
   1a114:	f7f9 fdd8 	bl	13cc8 <WsfTimerStartSec>

  /* start smp response timer */
  smpStartRspTimer(pCcb);

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_PAIR_CNF_LEN + L2C_PAYLOAD_START)) != NULL)
   1a118:	2019      	movs	r0, #25
   1a11a:	f001 f859 	bl	1b1d0 <smpMsgAlloc>
   1a11e:	b1a8      	cbz	r0, 1a14c <smpActSendPairCnf+0x58>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_CNF);
   1a120:	2203      	movs	r2, #3
   1a122:	7202      	strb	r2, [r0, #8]
    memcpy(p, pMsg->aes.pCiphertext, SMP_CONFIRM_LEN);
   1a124:	686a      	ldr	r2, [r5, #4]
   1a126:	4603      	mov	r3, r0
   1a128:	6815      	ldr	r5, [r2, #0]
   1a12a:	6891      	ldr	r1, [r2, #8]

    /* send packet */
    smpSendPkt(pCcb, pPkt);
   1a12c:	4620      	mov	r0, r4
    memcpy(p, pMsg->aes.pCiphertext, SMP_CONFIRM_LEN);
   1a12e:	6854      	ldr	r4, [r2, #4]
   1a130:	68d2      	ldr	r2, [r2, #12]
   1a132:	f8c3 2015 	str.w	r2, [r3, #21]
   1a136:	f8c3 1011 	str.w	r1, [r3, #17]
   1a13a:	f8c3 5009 	str.w	r5, [r3, #9]
   1a13e:	f8c3 400d 	str.w	r4, [r3, #13]
    smpSendPkt(pCcb, pPkt);
   1a142:	4619      	mov	r1, r3
  }
}
   1a144:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    smpSendPkt(pCcb, pPkt);
   1a148:	f001 b822 	b.w	1b190 <smpSendPkt>
}
   1a14c:	bd38      	pop	{r3, r4, r5, pc}
   1a14e:	bf00      	nop

0001a150 <smpActPairCnfVerCalc1>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairCnfVerCalc1(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a150:	b530      	push	{r4, r5, lr}
  uint8_t   *p;

  /* go to start of received pairing random packet */
  p = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   1a152:	684a      	ldr	r2, [r1, #4]

  /* store random value */
  memcpy(pCcb->pScr->buf.b2, p, SMP_RAND_LEN);
   1a154:	6b01      	ldr	r1, [r0, #48]	; 0x30
   1a156:	f8d2 4009 	ldr.w	r4, [r2, #9]
   1a15a:	f8d2 e00d 	ldr.w	lr, [r2, #13]
   1a15e:	f8d2 5015 	ldr.w	r5, [r2, #21]
   1a162:	f8d2 c011 	ldr.w	ip, [r2, #17]
   1a166:	f8c1 c018 	str.w	ip, [r1, #24]
   1a16a:	61cd      	str	r5, [r1, #28]
   1a16c:	610c      	str	r4, [r1, #16]
   1a16e:	f8c1 e014 	str.w	lr, [r1, #20]

  /* execute calculation */
  smpCalcC1Part1(pCcb, pCcb->pScr->buf.b1, p);
}
   1a172:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  smpCalcC1Part1(pCcb, pCcb->pScr->buf.b1, p);
   1a176:	6b01      	ldr	r1, [r0, #48]	; 0x30
   1a178:	3209      	adds	r2, #9
   1a17a:	f000 be1d 	b.w	1adb8 <smpCalcC1Part1>
   1a17e:	bf00      	nop

0001a180 <smpActPairCnfVerCalc2>:
   1a180:	684a      	ldr	r2, [r1, #4]
   1a182:	6b01      	ldr	r1, [r0, #48]	; 0x30
   1a184:	f000 bebc 	b.w	1af00 <smpCalcC1Part2>

0001a188 <smpSendKey>:
 *
 *  \return TRUE if done sending keys, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t smpSendKey(smpCcb_t *pCcb, uint8_t keyDist)
{
   1a188:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t     *pPkt;
  uint8_t     *p;
  wsfMsgHdr_t *pHdr;

  if (smpCb.lescSupported && pCcb->pScCcb->lescEnabled && pCcb->lastSentKey == 0)
   1a18a:	4e6c      	ldr	r6, [pc, #432]	; (1a33c <smpSendKey+0x1b4>)
   1a18c:	f896 30ec 	ldrb.w	r3, [r6, #236]	; 0xec
{
   1a190:	b08b      	sub	sp, #44	; 0x2c
   1a192:	4605      	mov	r5, r0
   1a194:	460c      	mov	r4, r1
  if (smpCb.lescSupported && pCcb->pScCcb->lescEnabled && pCcb->lastSentKey == 0)
   1a196:	b11b      	cbz	r3, 1a1a0 <smpSendKey+0x18>
   1a198:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1a19a:	781b      	ldrb	r3, [r3, #0]
   1a19c:	2b00      	cmp	r3, #0
   1a19e:	d156      	bne.n	1a24e <smpSendKey+0xc6>

    pCcb->lastSentKey = SMP_CMD_MASTER_ID;
  }

  /* check if we're done sending keys */
  if ((keyDist == 0) ||
   1a1a0:	2c00      	cmp	r4, #0
   1a1a2:	d050      	beq.n	1a246 <smpSendKey+0xbe>
   1a1a4:	2c01      	cmp	r4, #1
      (keyDist == SMP_KEY_DIST_ENC && pCcb->lastSentKey == SMP_CMD_MASTER_ID) ||
   1a1a6:	f895 3043 	ldrb.w	r3, [r5, #67]	; 0x43
  if ((keyDist == 0) ||
   1a1aa:	d048      	beq.n	1a23e <smpSendKey+0xb6>
      (keyDist == SMP_KEY_DIST_ENC && pCcb->lastSentKey == SMP_CMD_MASTER_ID) ||
   1a1ac:	2c03      	cmp	r4, #3
   1a1ae:	d948      	bls.n	1a242 <smpSendKey+0xba>
      (keyDist <= (SMP_KEY_DIST_ENC | SMP_KEY_DIST_ID) && pCcb->lastSentKey == SMP_CMD_ID_ADDR_INFO) ||
   1a1b0:	2b0a      	cmp	r3, #10
   1a1b2:	d048      	beq.n	1a246 <smpSendKey+0xbe>
  {
      return TRUE;
  }

  /* if flow disabled return */
  if (pCcb->flowDisabled)
   1a1b4:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   1a1b8:	2b00      	cmp	r3, #0
   1a1ba:	d173      	bne.n	1a2a4 <smpSendKey+0x11c>
  {
    return FALSE;
  }

  /* allocate packet buffer for largest packet size */
  if ((pPkt = smpMsgAlloc(SMP_ENC_INFO_LEN + L2C_PAYLOAD_START)) != NULL)
   1a1bc:	2019      	movs	r0, #25
   1a1be:	f001 f807 	bl	1b1d0 <smpMsgAlloc>
   1a1c2:	4607      	mov	r7, r0
   1a1c4:	2800      	cmp	r0, #0
   1a1c6:	d06d      	beq.n	1a2a4 <smpSendKey+0x11c>
  {
    p = pPkt + L2C_PAYLOAD_START;

    /* determine next key to send */
    if (pCcb->lastSentKey == 0 && (keyDist & SMP_KEY_DIST_ENC))
   1a1c8:	f895 3043 	ldrb.w	r3, [r5, #67]	; 0x43
   1a1cc:	2b00      	cmp	r3, #0
   1a1ce:	d16d      	bne.n	1a2ac <smpSendKey+0x124>
   1a1d0:	07e1      	lsls	r1, r4, #31
   1a1d2:	f100 808f 	bmi.w	1a2f4 <smpSendKey+0x16c>
      /* send second part of LTK */
      UINT8_TO_BSTREAM(p, SMP_CMD_MASTER_ID);
      UINT16_TO_BSTREAM(p, pCcb->pScr->keyInd.keyData.ltk.ediv);
      memcpy(p, pCcb->pScr->keyInd.keyData.ltk.rand, SMP_RAND8_LEN);
    }
    else if ((keyDist & SMP_KEY_DIST_ID) &&
   1a1d6:	07a2      	lsls	r2, r4, #30
   1a1d8:	f100 8099 	bmi.w	1a30e <smpSendKey+0x186>
      UINT8_TO_BSTREAM(p, SMP_CMD_ID_ADDR_INFO);
      UINT8_TO_BSTREAM(p, DM_ADDR_PUBLIC);
      BDA_TO_BSTREAM(p, HciGetBdAddr());

    }
    else if ((keyDist & SMP_KEY_DIST_SIGN) &&
   1a1dc:	0762      	lsls	r2, r4, #29
   1a1de:	f140 80a1 	bpl.w	1a324 <smpSendKey+0x19c>
   1a1e2:	2b09      	cmp	r3, #9
   1a1e4:	f200 809e 	bhi.w	1a324 <smpSendKey+0x19c>
   1a1e8:	f240 2281 	movw	r2, #641	; 0x281
   1a1ec:	fa22 f303 	lsr.w	r3, r2, r3
   1a1f0:	07d8      	lsls	r0, r3, #31
   1a1f2:	f140 8097 	bpl.w	1a324 <smpSendKey+0x19c>
             (pCcb->lastSentKey == 0 || pCcb->lastSentKey == SMP_CMD_ID_ADDR_INFO ||
              pCcb->lastSentKey == SMP_CMD_MASTER_ID))
    {
      /* send SRK */
      UINT8_TO_BSTREAM(p, SMP_CMD_SIGN_INFO);
   1a1f6:	230a      	movs	r3, #10
   1a1f8:	723b      	strb	r3, [r7, #8]
      Calc128Cpy(p, DmSecGetLocalCsrk());
   1a1fa:	f7ff f8f7 	bl	193ec <DmSecGetLocalCsrk>
   1a1fe:	4601      	mov	r1, r0
   1a200:	f107 0009 	add.w	r0, r7, #9
   1a204:	f002 f8ca 	bl	1c39c <Calc128Cpy>
      SMP_TRACE_WARN2("smpSendKey unexpected state keyDist:%d lastSentKey:%d", keyDist, pCcb->lastSentKey);
      return TRUE;
    }

    /* set last sent key to command code */
    pCcb->lastSentKey = pPkt[L2C_PAYLOAD_START];
   1a208:	7a3b      	ldrb	r3, [r7, #8]
   1a20a:	f885 3043 	strb.w	r3, [r5, #67]	; 0x43

    /* send command packet */
    smpSendPkt(pCcb, pPkt);
   1a20e:	4639      	mov	r1, r7
   1a210:	4628      	mov	r0, r5
   1a212:	f000 ffbd 	bl	1b190 <smpSendPkt>

    /* if flow not disabled set up to send next key */
    if (!pCcb->flowDisabled)
   1a216:	f895 403c 	ldrb.w	r4, [r5, #60]	; 0x3c
   1a21a:	2c00      	cmp	r4, #0
   1a21c:	d142      	bne.n	1a2a4 <smpSendKey+0x11c>
    {
      if ((pHdr = WsfMsgAlloc(sizeof(wsfMsgHdr_t))) != NULL)
   1a21e:	2004      	movs	r0, #4
   1a220:	f7f9 faf8 	bl	13814 <WsfMsgAlloc>
   1a224:	4601      	mov	r1, r0
   1a226:	2800      	cmp	r0, #0
   1a228:	d03c      	beq.n	1a2a4 <smpSendKey+0x11c>
      {
        pHdr->event = SMP_MSG_INT_SEND_NEXT_KEY;
   1a22a:	230c      	movs	r3, #12
   1a22c:	7083      	strb	r3, [r0, #2]
        pHdr->param = pCcb->connId;
   1a22e:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
   1a232:	8003      	strh	r3, [r0, #0]
        WsfMsgSend(smpCb.handlerId, pHdr);
   1a234:	f896 00e0 	ldrb.w	r0, [r6, #224]	; 0xe0
   1a238:	f7f9 faf8 	bl	1382c <WsfMsgSend>
   1a23c:	e004      	b.n	1a248 <smpSendKey+0xc0>
      (keyDist == SMP_KEY_DIST_ENC && pCcb->lastSentKey == SMP_CMD_MASTER_ID) ||
   1a23e:	2b07      	cmp	r3, #7
   1a240:	d002      	beq.n	1a248 <smpSendKey+0xc0>
      (keyDist <= (SMP_KEY_DIST_ENC | SMP_KEY_DIST_ID) && pCcb->lastSentKey == SMP_CMD_ID_ADDR_INFO) ||
   1a242:	2b09      	cmp	r3, #9
   1a244:	d1b4      	bne.n	1a1b0 <smpSendKey+0x28>
      return TRUE;
   1a246:	2401      	movs	r4, #1
      }
    }
  }

  return FALSE;
}
   1a248:	4620      	mov	r0, r4
   1a24a:	b00b      	add	sp, #44	; 0x2c
   1a24c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (smpCb.lescSupported && pCcb->pScCcb->lescEnabled && pCcb->lastSentKey == 0)
   1a24e:	f890 7043 	ldrb.w	r7, [r0, #67]	; 0x43
   1a252:	2f00      	cmp	r7, #0
   1a254:	d1a4      	bne.n	1a1a0 <smpSendKey+0x18>
    if (DmConnRole(pCcb->connId) == DM_ROLE_MASTER)
   1a256:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
   1a25a:	f7fe fb8d 	bl	18978 <DmConnRole>
      keyInd.type = DM_KEY_LOCAL_LTK;
   1a25e:	2800      	cmp	r0, #0
   1a260:	bf0c      	ite	eq
   1a262:	2302      	moveq	r3, #2
   1a264:	2301      	movne	r3, #1
   1a266:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    keyInd.hdr.event = DM_SEC_KEY_IND;
   1a26a:	232f      	movs	r3, #47	; 0x2f
   1a26c:	f88d 3006 	strb.w	r3, [sp, #6]
    keyInd.secLevel = smpGetScSecLevel(pCcb);
   1a270:	4628      	mov	r0, r5
    keyInd.hdr.param = pCcb->connId;
   1a272:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
   1a276:	f8ad 3004 	strh.w	r3, [sp, #4]
    keyInd.secLevel = smpGetScSecLevel(pCcb);
   1a27a:	f000 ffcd 	bl	1b218 <smpGetScSecLevel>
    memset(keyInd.keyData.ltk.rand, 0, SMP_RAND8_LEN);
   1a27e:	e9cd 7706 	strd	r7, r7, [sp, #24]
    Calc128Cpy(keyInd.keyData.ltk.key, pCcb->pScCcb->pLtk->ltk_t);
   1a282:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    keyInd.secLevel = smpGetScSecLevel(pCcb);
   1a284:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    Calc128Cpy(keyInd.keyData.ltk.key, pCcb->pScCcb->pLtk->ltk_t);
   1a288:	6999      	ldr	r1, [r3, #24]
    keyInd.keyData.ltk.ediv = 0;
   1a28a:	f8ad 7020 	strh.w	r7, [sp, #32]
    Calc128Cpy(keyInd.keyData.ltk.key, pCcb->pScCcb->pLtk->ltk_t);
   1a28e:	3110      	adds	r1, #16
   1a290:	a802      	add	r0, sp, #8
   1a292:	f002 f883 	bl	1c39c <Calc128Cpy>
    DmSmpCbackExec((dmEvt_t *)&keyInd);
   1a296:	a801      	add	r0, sp, #4
   1a298:	f7ff f848 	bl	1932c <DmSmpCbackExec>
    pCcb->lastSentKey = SMP_CMD_MASTER_ID;
   1a29c:	2307      	movs	r3, #7
   1a29e:	f885 3043 	strb.w	r3, [r5, #67]	; 0x43
   1a2a2:	e77d      	b.n	1a1a0 <smpSendKey+0x18>
    return FALSE;
   1a2a4:	2400      	movs	r4, #0
}
   1a2a6:	4620      	mov	r0, r4
   1a2a8:	b00b      	add	sp, #44	; 0x2c
   1a2aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (pCcb->lastSentKey == SMP_CMD_ENC_INFO)
   1a2ac:	2b06      	cmp	r3, #6
   1a2ae:	d010      	beq.n	1a2d2 <smpSendKey+0x14a>
    else if ((keyDist & SMP_KEY_DIST_ID) &&
   1a2b0:	07a1      	lsls	r1, r4, #30
   1a2b2:	d501      	bpl.n	1a2b8 <smpSendKey+0x130>
             (pCcb->lastSentKey == 0 || pCcb->lastSentKey == SMP_CMD_MASTER_ID))
   1a2b4:	2b07      	cmp	r3, #7
   1a2b6:	d02a      	beq.n	1a30e <smpSendKey+0x186>
    else if (pCcb->lastSentKey == SMP_CMD_ID_INFO)
   1a2b8:	2b08      	cmp	r3, #8
   1a2ba:	d18f      	bne.n	1a1dc <smpSendKey+0x54>
      UINT8_TO_BSTREAM(p, SMP_CMD_ID_ADDR_INFO);
   1a2bc:	2309      	movs	r3, #9
   1a2be:	813b      	strh	r3, [r7, #8]
      BDA_TO_BSTREAM(p, HciGetBdAddr());
   1a2c0:	f7f8 f848 	bl	12354 <HciGetBdAddr>
   1a2c4:	4601      	mov	r1, r0
   1a2c6:	f107 000a 	add.w	r0, r7, #10
   1a2ca:	f002 f843 	bl	1c354 <BdaCpy>
    pCcb->lastSentKey = pPkt[L2C_PAYLOAD_START];
   1a2ce:	7a3b      	ldrb	r3, [r7, #8]
   1a2d0:	e79b      	b.n	1a20a <smpSendKey+0x82>
      UINT8_TO_BSTREAM(p, SMP_CMD_MASTER_ID);
   1a2d2:	2307      	movs	r3, #7
   1a2d4:	7203      	strb	r3, [r0, #8]
      UINT16_TO_BSTREAM(p, pCcb->pScr->keyInd.keyData.ltk.ediv);
   1a2d6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   1a2d8:	8b92      	ldrh	r2, [r2, #28]
   1a2da:	7242      	strb	r2, [r0, #9]
   1a2dc:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   1a2de:	8b92      	ldrh	r2, [r2, #28]
   1a2e0:	0a12      	lsrs	r2, r2, #8
   1a2e2:	7282      	strb	r2, [r0, #10]
      memcpy(p, pCcb->pScr->keyInd.keyData.ltk.rand, SMP_RAND8_LEN);
   1a2e4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   1a2e6:	6951      	ldr	r1, [r2, #20]
   1a2e8:	6992      	ldr	r2, [r2, #24]
   1a2ea:	f8c0 200f 	str.w	r2, [r0, #15]
   1a2ee:	f8c0 100b 	str.w	r1, [r0, #11]
   1a2f2:	e78a      	b.n	1a20a <smpSendKey+0x82>
      smpGenerateLtk(pCcb);
   1a2f4:	4628      	mov	r0, r5
   1a2f6:	f000 ff1b 	bl	1b130 <smpGenerateLtk>
      UINT8_TO_BSTREAM(p, SMP_CMD_ENC_INFO);
   1a2fa:	2306      	movs	r3, #6
   1a2fc:	723b      	strb	r3, [r7, #8]
      Calc128Cpy(p, pCcb->pScr->keyInd.keyData.ltk.key);
   1a2fe:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1a300:	f107 0009 	add.w	r0, r7, #9
   1a304:	3104      	adds	r1, #4
   1a306:	f002 f849 	bl	1c39c <Calc128Cpy>
    pCcb->lastSentKey = pPkt[L2C_PAYLOAD_START];
   1a30a:	7a3b      	ldrb	r3, [r7, #8]
      Calc128Cpy(p, pCcb->pScr->keyInd.keyData.ltk.key);
   1a30c:	e77d      	b.n	1a20a <smpSendKey+0x82>
      UINT8_TO_BSTREAM(p, SMP_CMD_ID_INFO);
   1a30e:	2308      	movs	r3, #8
   1a310:	723b      	strb	r3, [r7, #8]
      Calc128Cpy(p, DmSecGetLocalIrk());
   1a312:	f7ff f871 	bl	193f8 <DmSecGetLocalIrk>
   1a316:	4601      	mov	r1, r0
   1a318:	f107 0009 	add.w	r0, r7, #9
   1a31c:	f002 f83e 	bl	1c39c <Calc128Cpy>
    pCcb->lastSentKey = pPkt[L2C_PAYLOAD_START];
   1a320:	7a3b      	ldrb	r3, [r7, #8]
      Calc128Cpy(p, DmSecGetLocalIrk());
   1a322:	e772      	b.n	1a20a <smpSendKey+0x82>
      WsfMsgFree(pPkt);
   1a324:	4638      	mov	r0, r7
   1a326:	f7f9 fa7d 	bl	13824 <WsfMsgFree>
      SMP_TRACE_WARN2("smpSendKey unexpected state keyDist:%d lastSentKey:%d", keyDist, pCcb->lastSentKey);
   1a32a:	4621      	mov	r1, r4
   1a32c:	f895 2043 	ldrb.w	r2, [r5, #67]	; 0x43
   1a330:	4803      	ldr	r0, [pc, #12]	; (1a340 <smpSendKey+0x1b8>)
   1a332:	f7f9 fdef 	bl	13f14 <WsfTrace>
      return TRUE;
   1a336:	2401      	movs	r4, #1
   1a338:	e786      	b.n	1a248 <smpSendKey+0xc0>
   1a33a:	bf00      	nop
   1a33c:	10005bfc 	.word	0x10005bfc
   1a340:	000252e8 	.word	0x000252e8

0001a344 <smpProcRcvKey>:
 *
 *  \return TRUE if done receiving keys, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t smpProcRcvKey(smpCcb_t *pCcb, dmSecKeyIndEvt_t *pKeyInd, uint8_t *pBuf, uint8_t keyDist)
{
   1a344:	b570      	push	{r4, r5, r6, lr}
  bool_t    done = FALSE;
  uint8_t   cmdCode;

  /* go to start of packet */
  pBuf += L2C_PAYLOAD_START;
  cmdCode = *pBuf++;
   1a346:	f892 c008 	ldrb.w	ip, [r2, #8]

  if (cmdCode == SMP_CMD_ENC_INFO)
   1a34a:	f1bc 0f06 	cmp.w	ip, #6
{
   1a34e:	460c      	mov	r4, r1
   1a350:	4605      	mov	r5, r0
   1a352:	461e      	mov	r6, r3
  cmdCode = *pBuf++;
   1a354:	f102 0109 	add.w	r1, r2, #9
  if (cmdCode == SMP_CMD_ENC_INFO)
   1a358:	d02b      	beq.n	1a3b2 <smpProcRcvKey+0x6e>
  {
    /* parse encryption information packet */
    Calc128Cpy(pKeyInd->keyData.ltk.key, pBuf);
  }
  else if (cmdCode == SMP_CMD_MASTER_ID)
   1a35a:	f1bc 0f07 	cmp.w	ip, #7
   1a35e:	d047      	beq.n	1a3f0 <smpProcRcvKey+0xac>
    memcpy(pKeyInd->keyData.ltk.rand, pBuf, SMP_RAND8_LEN);
    pKeyInd->secLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ? DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
    pKeyInd->type = DM_KEY_PEER_LTK;
    keyIndReady = TRUE;
  }
  else if (cmdCode == SMP_CMD_ID_INFO)
   1a360:	f1bc 0f08 	cmp.w	ip, #8
   1a364:	d025      	beq.n	1a3b2 <smpProcRcvKey+0x6e>
  {
    /* parse identity information packet */
    Calc128Cpy(pKeyInd->keyData.irk.key, pBuf);
  }
  else if (cmdCode == SMP_CMD_ID_ADDR_INFO)
   1a366:	f1bc 0f09 	cmp.w	ip, #9
   1a36a:	d030      	beq.n	1a3ce <smpProcRcvKey+0x8a>
    BSTREAM_TO_UINT8(pKeyInd->keyData.irk.addrType, pBuf);
    BSTREAM_TO_BDA(pKeyInd->keyData.irk.bdAddr, pBuf);
    pKeyInd->type = DM_KEY_IRK;
    keyIndReady = TRUE;
  }
  else if (cmdCode == SMP_CMD_SIGN_INFO)
   1a36c:	f1bc 0f0a 	cmp.w	ip, #10
   1a370:	d055      	beq.n	1a41e <smpProcRcvKey+0xda>
  bool_t    keyIndReady = FALSE;
   1a372:	2300      	movs	r3, #0
  }

  /* set up to receive next key */

  /* if just got first part of LTK or IRK */
  if (pCcb->nextCmdCode == SMP_CMD_ENC_INFO || pCcb->nextCmdCode == SMP_CMD_ID_INFO)
   1a374:	f895 203f 	ldrb.w	r2, [r5, #63]	; 0x3f
   1a378:	2a06      	cmp	r2, #6
   1a37a:	d00d      	beq.n	1a398 <smpProcRcvKey+0x54>
   1a37c:	2a08      	cmp	r2, #8
   1a37e:	d00b      	beq.n	1a398 <smpProcRcvKey+0x54>
  {
    /* wait for second part of LTK or IRK info */
    pCcb->nextCmdCode++;
  }
  /* else if got LTK and need IRK */
  else if ((keyDist & SMP_KEY_DIST_ID) && (pCcb->nextCmdCode == SMP_CMD_MASTER_ID))
   1a380:	07b1      	lsls	r1, r6, #30
   1a382:	d51b      	bpl.n	1a3bc <smpProcRcvKey+0x78>
   1a384:	2a07      	cmp	r2, #7
   1a386:	d02e      	beq.n	1a3e6 <smpProcRcvKey+0xa2>
  {
    /* wait for first part of IRK */
    pCcb->nextCmdCode = SMP_CMD_ID_INFO;
  }
  /* else if got LTK or IRK and need SRK */
  else if ((keyDist & SMP_KEY_DIST_SIGN) &&
   1a388:	0771      	lsls	r1, r6, #29
   1a38a:	d501      	bpl.n	1a390 <smpProcRcvKey+0x4c>
           (pCcb->nextCmdCode == SMP_CMD_MASTER_ID || pCcb->nextCmdCode == SMP_CMD_ID_ADDR_INFO))
   1a38c:	2a09      	cmp	r2, #9
   1a38e:	d019      	beq.n	1a3c4 <smpProcRcvKey+0x80>
    pCcb->nextCmdCode = SMP_CMD_SIGN_INFO;
  }
  else
  {
    /* done receiving keys */
    done = TRUE;
   1a390:	2501      	movs	r5, #1
  }

  /* call callback if key ready */
  if (keyIndReady)
   1a392:	b93b      	cbnz	r3, 1a3a4 <smpProcRcvKey+0x60>
    pKeyInd->hdr.event = DM_SEC_KEY_IND;
    DmSmpCbackExec((dmEvt_t *) pKeyInd);
  }

  return done;
}
   1a394:	4628      	mov	r0, r5
   1a396:	bd70      	pop	{r4, r5, r6, pc}
    pCcb->nextCmdCode++;
   1a398:	3201      	adds	r2, #1
   1a39a:	f885 203f 	strb.w	r2, [r5, #63]	; 0x3f
  bool_t    done = FALSE;
   1a39e:	2500      	movs	r5, #0
  if (keyIndReady)
   1a3a0:	2b00      	cmp	r3, #0
   1a3a2:	d0f7      	beq.n	1a394 <smpProcRcvKey+0x50>
    pKeyInd->hdr.event = DM_SEC_KEY_IND;
   1a3a4:	232f      	movs	r3, #47	; 0x2f
    DmSmpCbackExec((dmEvt_t *) pKeyInd);
   1a3a6:	4620      	mov	r0, r4
    pKeyInd->hdr.event = DM_SEC_KEY_IND;
   1a3a8:	70a3      	strb	r3, [r4, #2]
    DmSmpCbackExec((dmEvt_t *) pKeyInd);
   1a3aa:	f7fe ffbf 	bl	1932c <DmSmpCbackExec>
}
   1a3ae:	4628      	mov	r0, r5
   1a3b0:	bd70      	pop	{r4, r5, r6, pc}
    Calc128Cpy(pKeyInd->keyData.irk.key, pBuf);
   1a3b2:	1d20      	adds	r0, r4, #4
   1a3b4:	f001 fff2 	bl	1c39c <Calc128Cpy>
  bool_t    keyIndReady = FALSE;
   1a3b8:	2300      	movs	r3, #0
   1a3ba:	e7db      	b.n	1a374 <smpProcRcvKey+0x30>
  else if ((keyDist & SMP_KEY_DIST_SIGN) &&
   1a3bc:	0770      	lsls	r0, r6, #29
   1a3be:	d5e7      	bpl.n	1a390 <smpProcRcvKey+0x4c>
   1a3c0:	2a07      	cmp	r2, #7
   1a3c2:	d1e3      	bne.n	1a38c <smpProcRcvKey+0x48>
    pCcb->nextCmdCode = SMP_CMD_SIGN_INFO;
   1a3c4:	220a      	movs	r2, #10
   1a3c6:	f885 203f 	strb.w	r2, [r5, #63]	; 0x3f
  bool_t    done = FALSE;
   1a3ca:	2500      	movs	r5, #0
    pCcb->nextCmdCode = SMP_CMD_SIGN_INFO;
   1a3cc:	e7e1      	b.n	1a392 <smpProcRcvKey+0x4e>
    BSTREAM_TO_UINT8(pKeyInd->keyData.irk.addrType, pBuf);
   1a3ce:	7a53      	ldrb	r3, [r2, #9]
   1a3d0:	76a3      	strb	r3, [r4, #26]
    BSTREAM_TO_BDA(pKeyInd->keyData.irk.bdAddr, pBuf);
   1a3d2:	f102 010a 	add.w	r1, r2, #10
   1a3d6:	f104 0014 	add.w	r0, r4, #20
   1a3da:	f001 ffbb 	bl	1c354 <BdaCpy>
    pKeyInd->type = DM_KEY_IRK;
   1a3de:	2304      	movs	r3, #4
   1a3e0:	77a3      	strb	r3, [r4, #30]
    keyIndReady = TRUE;
   1a3e2:	2301      	movs	r3, #1
   1a3e4:	e7c6      	b.n	1a374 <smpProcRcvKey+0x30>
    pCcb->nextCmdCode = SMP_CMD_ID_INFO;
   1a3e6:	2208      	movs	r2, #8
   1a3e8:	f885 203f 	strb.w	r2, [r5, #63]	; 0x3f
  bool_t    done = FALSE;
   1a3ec:	2500      	movs	r5, #0
    pCcb->nextCmdCode = SMP_CMD_ID_INFO;
   1a3ee:	e7d0      	b.n	1a392 <smpProcRcvKey+0x4e>
    BSTREAM_TO_UINT16(pKeyInd->keyData.ltk.ediv, pBuf);
   1a3f0:	7a91      	ldrb	r1, [r2, #10]
   1a3f2:	7a53      	ldrb	r3, [r2, #9]
   1a3f4:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   1a3f8:	83a3      	strh	r3, [r4, #28]
    memcpy(pKeyInd->keyData.ltk.rand, pBuf, SMP_RAND8_LEN);
   1a3fa:	f8d2 300b 	ldr.w	r3, [r2, #11]
   1a3fe:	f8d2 200f 	ldr.w	r2, [r2, #15]
   1a402:	61a2      	str	r2, [r4, #24]
   1a404:	6163      	str	r3, [r4, #20]
    pKeyInd->secLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ? DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
   1a406:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
    pKeyInd->type = DM_KEY_PEER_LTK;
   1a40a:	2302      	movs	r3, #2
    pKeyInd->secLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ? DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
   1a40c:	f012 0f04 	tst.w	r2, #4
   1a410:	bf14      	ite	ne
   1a412:	461a      	movne	r2, r3
   1a414:	2201      	moveq	r2, #1
    pKeyInd->type = DM_KEY_PEER_LTK;
   1a416:	77a3      	strb	r3, [r4, #30]
    pKeyInd->secLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ? DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
   1a418:	77e2      	strb	r2, [r4, #31]
    keyIndReady = TRUE;
   1a41a:	2301      	movs	r3, #1
   1a41c:	e7aa      	b.n	1a374 <smpProcRcvKey+0x30>
    Calc128Cpy(pKeyInd->keyData.csrk.key, pBuf);
   1a41e:	1d20      	adds	r0, r4, #4
   1a420:	f001 ffbc 	bl	1c39c <Calc128Cpy>
    pKeyInd->type = DM_KEY_CSRK;
   1a424:	2308      	movs	r3, #8
   1a426:	77a3      	strb	r3, [r4, #30]
    keyIndReady = TRUE;
   1a428:	2301      	movs	r3, #1
   1a42a:	e7a3      	b.n	1a374 <smpProcRcvKey+0x30>

0001a42c <smpActMaxAttempts>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActMaxAttempts(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a42e:	4604      	mov	r4, r0
  if ((pPacket = smpMsgAlloc(L2C_PAYLOAD_START + SMP_PAIR_FAIL_LEN)) != NULL)
   1a430:	200a      	movs	r0, #10
  smpSendPairingFailed(pCcb, pMsg->hdr.status);
   1a432:	78ce      	ldrb	r6, [r1, #3]
{
   1a434:	460d      	mov	r5, r1
  if ((pPacket = smpMsgAlloc(L2C_PAYLOAD_START + SMP_PAIR_FAIL_LEN)) != NULL)
   1a436:	f000 fecb 	bl	1b1d0 <smpMsgAlloc>
   1a43a:	b130      	cbz	r0, 1a44a <smpActMaxAttempts+0x1e>
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_FAIL);
   1a43c:	2305      	movs	r3, #5
   1a43e:	4601      	mov	r1, r0
   1a440:	7203      	strb	r3, [r0, #8]
    UINT8_TO_BSTREAM(p, reason);
   1a442:	7246      	strb	r6, [r0, #9]
    smpSendPkt(pCcb, pPacket);
   1a444:	4620      	mov	r0, r4
   1a446:	f000 fea3 	bl	1b190 <smpSendPkt>
  if (pCcb->pScr != NULL)
   1a44a:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1a44c:	b118      	cbz	r0, 1a456 <smpActMaxAttempts+0x2a>
    WsfBufFree(pCcb->pScr);
   1a44e:	f7f9 f9b1 	bl	137b4 <WsfBufFree>
    pCcb->pScr = NULL;
   1a452:	2300      	movs	r3, #0
   1a454:	6323      	str	r3, [r4, #48]	; 0x30
  WsfTimerStop(&pCcb->rspTimer);
   1a456:	4620      	mov	r0, r4
  WsfTimerStop(&pCcb->waitTimer);
   1a458:	f104 0710 	add.w	r7, r4, #16
  WsfTimerStop(&pCcb->rspTimer);
   1a45c:	f7f9 fcba 	bl	13dd4 <WsfTimerStop>
  WsfTimerStop(&pCcb->waitTimer);
   1a460:	4638      	mov	r0, r7
   1a462:	f7f9 fcb7 	bl	13dd4 <WsfTimerStop>
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   1a466:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_IDLE);
   1a46a:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  pCcb->secReq = FALSE;
   1a46e:	2600      	movs	r6, #0
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   1a470:	42b3      	cmp	r3, r6
   1a472:	bf14      	ite	ne
   1a474:	230b      	movne	r3, #11
   1a476:	2301      	moveq	r3, #1
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_IDLE);
   1a478:	4632      	mov	r2, r6
   1a47a:	2101      	movs	r1, #1
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   1a47c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  pCcb->secReq = FALSE;
   1a480:	f884 603b 	strb.w	r6, [r4, #59]	; 0x3b
  pCcb->lastSentKey = 0;
   1a484:	f884 6043 	strb.w	r6, [r4, #67]	; 0x43
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_IDLE);
   1a488:	f7fe fa34 	bl	188f4 <DmConnSetIdle>
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
   1a48c:	232b      	movs	r3, #43	; 0x2b
   1a48e:	70ab      	strb	r3, [r5, #2]
  DmSmpCbackExec((dmEvt_t *) pMsg);
   1a490:	4628      	mov	r0, r5
   1a492:	f7fe ff4b 	bl	1932c <DmSmpCbackExec>

  /* send paring failed packet; note this stops the timer so call this first */
  smpActPairingCancel(pCcb, pMsg);

  /* Check SMP device DB to determine time to wait before pairing can happen again */
  timeout = SmpDbMaxAttemptReached(pCcb->connId);
   1a496:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
   1a49a:	f000 fa33 	bl	1a904 <SmpDbMaxAttemptReached>

  /* start wait interval timer */
  pCcb->waitTimer.msg.event = SMP_MSG_INT_WI_TIMEOUT;
   1a49e:	2310      	movs	r3, #16
  timeout = SmpDbMaxAttemptReached(pCcb->connId);
   1a4a0:	4601      	mov	r1, r0
  pCcb->waitTimer.msg.event = SMP_MSG_INT_WI_TIMEOUT;
   1a4a2:	76a3      	strb	r3, [r4, #26]
  WsfTimerStartMs(&pCcb->waitTimer, timeout);
   1a4a4:	4638      	mov	r0, r7
   1a4a6:	f7f9 fc51 	bl	13d4c <WsfTimerStartMs>

  /* clear attempts count */
  pCcb->attempts = 0;
   1a4aa:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
}
   1a4ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a4b0 <smpActAttemptRcvd>:
 */
/*************************************************************************************************/
void smpActAttemptRcvd(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  /* set that attempt was received */
  pCcb->attempts = 1;
   1a4b0:	2301      	movs	r3, #1
   1a4b2:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
}
   1a4b6:	4770      	bx	lr

0001a4b8 <smpActNotifyDmAttemptsFailure>:
/*************************************************************************************************/
void smpActNotifyDmAttemptsFailure(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  /* notify DM of pairing failure */
  pMsg->hdr.status = SMP_ERR_ATTEMPTS;
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
   1a4b8:	f640 132b 	movw	r3, #2347	; 0x92b
{
   1a4bc:	4608      	mov	r0, r1
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
   1a4be:	804b      	strh	r3, [r1, #2]
  DmSmpCbackExec((dmEvt_t *) pMsg);
   1a4c0:	f7fe bf34 	b.w	1932c <DmSmpCbackExec>

0001a4c4 <smpActNotifyDmRspToFailure>:
/*************************************************************************************************/
void smpActNotifyDmRspToFailure(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  /* notify DM of pairing failure */
  pMsg->hdr.status = SMP_ERR_TIMEOUT;
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
   1a4c4:	f24e 132b 	movw	r3, #57643	; 0xe12b
{
   1a4c8:	4608      	mov	r0, r1
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
   1a4ca:	804b      	strh	r3, [r1, #2]
  DmSmpCbackExec((dmEvt_t *) pMsg);
   1a4cc:	f7fe bf2e 	b.w	1932c <DmSmpCbackExec>

0001a4d0 <smpActCheckAttempts>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActCheckAttempts(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a4d0:	b538      	push	{r3, r4, r5, lr}
  /* check if attempt was received */
  if (pCcb->attempts)
   1a4d2:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
   1a4d6:	b903      	cbnz	r3, 1a4da <smpActCheckAttempts+0xa>
    /* notify DM of pairing failure */
    smpActNotifyDmAttemptsFailure(pCcb, pMsg);

    smpCleanup(pCcb);
  }
}
   1a4d8:	bd38      	pop	{r3, r4, r5, pc}
    pCcb->attempts = 0;
   1a4da:	2300      	movs	r3, #0
   1a4dc:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    smpSendPairingFailed(pCcb, SMP_ERR_ATTEMPTS);
   1a4e0:	4604      	mov	r4, r0
  if ((pPacket = smpMsgAlloc(L2C_PAYLOAD_START + SMP_PAIR_FAIL_LEN)) != NULL)
   1a4e2:	200a      	movs	r0, #10
   1a4e4:	460d      	mov	r5, r1
   1a4e6:	f000 fe73 	bl	1b1d0 <smpMsgAlloc>
   1a4ea:	4601      	mov	r1, r0
   1a4ec:	b128      	cbz	r0, 1a4fa <smpActCheckAttempts+0x2a>
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_FAIL);
   1a4ee:	f640 1305 	movw	r3, #2309	; 0x905
   1a4f2:	8103      	strh	r3, [r0, #8]
    smpSendPkt(pCcb, pPacket);
   1a4f4:	4620      	mov	r0, r4
   1a4f6:	f000 fe4b 	bl	1b190 <smpSendPkt>
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
   1a4fa:	f640 132b 	movw	r3, #2347	; 0x92b
  DmSmpCbackExec((dmEvt_t *) pMsg);
   1a4fe:	4628      	mov	r0, r5
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
   1a500:	806b      	strh	r3, [r5, #2]
  DmSmpCbackExec((dmEvt_t *) pMsg);
   1a502:	f7fe ff13 	bl	1932c <DmSmpCbackExec>
  if (pCcb->pScr != NULL)
   1a506:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1a508:	b118      	cbz	r0, 1a512 <smpActCheckAttempts+0x42>
    WsfBufFree(pCcb->pScr);
   1a50a:	f7f9 f953 	bl	137b4 <WsfBufFree>
    pCcb->pScr = NULL;
   1a50e:	2300      	movs	r3, #0
   1a510:	6323      	str	r3, [r4, #48]	; 0x30
  WsfTimerStop(&pCcb->rspTimer);
   1a512:	4620      	mov	r0, r4
   1a514:	f7f9 fc5e 	bl	13dd4 <WsfTimerStop>
  WsfTimerStop(&pCcb->waitTimer);
   1a518:	f104 0010 	add.w	r0, r4, #16
   1a51c:	f7f9 fc5a 	bl	13dd4 <WsfTimerStop>
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   1a520:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
  pCcb->secReq = FALSE;
   1a524:	2300      	movs	r3, #0
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   1a526:	429a      	cmp	r2, r3
   1a528:	bf14      	ite	ne
   1a52a:	220b      	movne	r2, #11
   1a52c:	2201      	moveq	r2, #1
  pCcb->secReq = FALSE;
   1a52e:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   1a532:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
  pCcb->lastSentKey = 0;
   1a536:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
}
   1a53a:	bd38      	pop	{r3, r4, r5, pc}

0001a53c <smpActPairingCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairingCmpl(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a53c:	b510      	push	{r4, lr}
   1a53e:	4604      	mov	r4, r0
  if (pCcb->pScr != NULL)
   1a540:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
   1a542:	b082      	sub	sp, #8
  if (pCcb->pScr != NULL)
   1a544:	b118      	cbz	r0, 1a54e <smpActPairingCmpl+0x12>
    WsfBufFree(pCcb->pScr);
   1a546:	f7f9 f935 	bl	137b4 <WsfBufFree>
    pCcb->pScr = NULL;
   1a54a:	2300      	movs	r3, #0
   1a54c:	6323      	str	r3, [r4, #48]	; 0x30
  WsfTimerStop(&pCcb->rspTimer);
   1a54e:	4620      	mov	r0, r4
   1a550:	f7f9 fc40 	bl	13dd4 <WsfTimerStop>
  WsfTimerStop(&pCcb->waitTimer);
   1a554:	f104 0010 	add.w	r0, r4, #16
   1a558:	f7f9 fc3c 	bl	13dd4 <WsfTimerStop>
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   1a55c:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
  dmSecPairCmplIndEvt_t pairCmpl;

  smpCleanup(pCcb);

  /* set connection idle */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_IDLE);
   1a560:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  pCcb->secReq = FALSE;
   1a564:	2200      	movs	r2, #0
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   1a566:	4293      	cmp	r3, r2
   1a568:	bf14      	ite	ne
   1a56a:	230b      	movne	r3, #11
   1a56c:	2301      	moveq	r3, #1
  pCcb->secReq = FALSE;
   1a56e:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   1a572:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  pCcb->lastSentKey = 0;
   1a576:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_IDLE);
   1a57a:	2101      	movs	r1, #1
   1a57c:	f7fe f9ba 	bl	188f4 <DmConnSetIdle>

  pairCmpl.auth = pCcb->auth;
   1a580:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
  pairCmpl.hdr.param = pCcb->connId;
   1a584:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  pairCmpl.auth = pCcb->auth;
   1a588:	f88d 1004 	strb.w	r1, [sp, #4]
  pairCmpl.hdr.event = DM_SEC_PAIR_CMPL_IND;
   1a58c:	232a      	movs	r3, #42	; 0x2a
  DmSmpCbackExec((dmEvt_t *) &pairCmpl);
   1a58e:	4668      	mov	r0, sp
  pairCmpl.hdr.param = pCcb->connId;
   1a590:	f8ad 2000 	strh.w	r2, [sp]
  pairCmpl.hdr.event = DM_SEC_PAIR_CMPL_IND;
   1a594:	f88d 3002 	strb.w	r3, [sp, #2]
  DmSmpCbackExec((dmEvt_t *) &pairCmpl);
   1a598:	f7fe fec8 	bl	1932c <DmSmpCbackExec>
}
   1a59c:	b002      	add	sp, #8
   1a59e:	bd10      	pop	{r4, pc}

0001a5a0 <smpSmExecute>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpSmExecute(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a5a0:	b570      	push	{r4, r5, r6, lr}
   1a5a2:	4604      	mov	r4, r0
#if SMP_EXTRA_TRACE == TRUE
  if (smpCb.lescSupported)
    SMP_TRACE_INFO2("SMP Exe: evt=%s st=%s", smpEventStr(pMsg->hdr.event), smpStateStr(pCcb->state));
  else
#endif
    SMP_TRACE_INFO2("smpSmExecute event=%d state=%d", pMsg->hdr.event, pCcb->state);
   1a5a4:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
   1a5a8:	4818      	ldr	r0, [pc, #96]	; (1a60c <smpSmExecute+0x6c>)
{
   1a5aa:	460d      	mov	r5, r1
    SMP_TRACE_INFO2("smpSmExecute event=%d state=%d", pMsg->hdr.event, pCcb->state);
   1a5ac:	7889      	ldrb	r1, [r1, #2]
   1a5ae:	f7f9 fcb1 	bl	13f14 <WsfTrace>

  /* look up state table for state */
  pSmIf = DmConnRole(pCcb->connId) == DM_ROLE_SLAVE? smpCb.pSlave : smpCb.pMaster;
   1a5b2:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
   1a5b6:	f7fe f9df 	bl	18978 <DmConnRole>
   1a5ba:	4b15      	ldr	r3, [pc, #84]	; (1a610 <smpSmExecute+0x70>)
  pTblEntry = pSmIf->pStateTbl[pCcb->state];
   1a5bc:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  {
    /* look for event match and execute action */
    do
    {
      /* if match */
      if ((*pTblEntry)[SMP_SM_POS_EVENT] == pMsg->hdr.event)
   1a5c0:	f895 c002 	ldrb.w	ip, [r5, #2]
  pSmIf = DmConnRole(pCcb->connId) == DM_ROLE_SLAVE? smpCb.pSlave : smpCb.pMaster;
   1a5c4:	e9d3 1336 	ldrd	r1, r3, [r3, #216]	; 0xd8
   1a5c8:	2801      	cmp	r0, #1
   1a5ca:	bf18      	it	ne
   1a5cc:	4619      	movne	r1, r3
  pTblEntry = pSmIf->pStateTbl[pCcb->state];
   1a5ce:	680b      	ldr	r3, [r1, #0]
   1a5d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1a5d4:	e002      	b.n	1a5dc <smpSmExecute+0x3c>

      /* next entry */
      pTblEntry++;

      /* while not at end */
    } while ((*pTblEntry)[SMP_SM_POS_EVENT] != 0);
   1a5d6:	f813 2f03 	ldrb.w	r2, [r3, #3]!
   1a5da:	b172      	cbz	r2, 1a5fa <smpSmExecute+0x5a>
      if ((*pTblEntry)[SMP_SM_POS_EVENT] == pMsg->hdr.event)
   1a5dc:	781a      	ldrb	r2, [r3, #0]
   1a5de:	4562      	cmp	r2, ip
   1a5e0:	d1f9      	bne.n	1a5d6 <smpSmExecute+0x36>
        pCcb->state = (*pTblEntry)[SMP_SM_POS_NEXT_STATE];
   1a5e2:	785a      	ldrb	r2, [r3, #1]
   1a5e4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        (*pSmIf->pActionTbl[(*pTblEntry)[SMP_SM_POS_ACTION]])(pCcb, pMsg);
   1a5e8:	789a      	ldrb	r2, [r3, #2]
   1a5ea:	684b      	ldr	r3, [r1, #4]
   1a5ec:	4620      	mov	r0, r4
   1a5ee:	4629      	mov	r1, r5
   1a5f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    {
      /* set it up */
      pTblEntry = pSmIf->pCommonTbl;
    }
  }
}
   1a5f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        (*pSmIf->pActionTbl[(*pTblEntry)[SMP_SM_POS_ACTION]])(pCcb, pMsg);
   1a5f8:	4718      	bx	r3
    if (pTblEntry == (pSmIf->pCommonTbl + SMP_STATE_TBL_COMMON_MAX - 1))
   1a5fa:	688a      	ldr	r2, [r1, #8]
   1a5fc:	f102 000c 	add.w	r0, r2, #12
   1a600:	4283      	cmp	r3, r0
   1a602:	d001      	beq.n	1a608 <smpSmExecute+0x68>
      pTblEntry = pSmIf->pCommonTbl;
   1a604:	4613      	mov	r3, r2
   1a606:	e7e9      	b.n	1a5dc <smpSmExecute+0x3c>
}
   1a608:	bd70      	pop	{r4, r5, r6, pc}
   1a60a:	bf00      	nop
   1a60c:	00025320 	.word	0x00025320
   1a610:	10005bfc 	.word	0x10005bfc

0001a614 <smpProcPairing>:
{
   1a614:	b500      	push	{lr}
  *pDisplay = FALSE;
   1a616:	2300      	movs	r3, #0
   1a618:	7013      	strb	r3, [r2, #0]
  *pOob = FALSE;
   1a61a:	700b      	strb	r3, [r1, #0]
  if (pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT &&
   1a61c:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   1a620:	2b01      	cmp	r3, #1
{
   1a622:	b083      	sub	sp, #12
  if (pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT &&
   1a624:	d064      	beq.n	1a6f0 <smpProcPairing+0xdc>
  else if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG) ||
   1a626:	f890 1023 	ldrb.w	r1, [r0, #35]	; 0x23
   1a62a:	074b      	lsls	r3, r1, #29
   1a62c:	d423      	bmi.n	1a676 <smpProcPairing+0x62>
           (pCcb->pairRsp[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG))
   1a62e:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
  else if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG) ||
   1a632:	f013 0f04 	tst.w	r3, #4
   1a636:	d11e      	bne.n	1a676 <smpProcPairing+0x62>
    pCcb->auth = pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS] & ~SMP_AUTH_MITM_FLAG;
   1a638:	ea01 0c03 	and.w	ip, r1, r3
  if (justWorks && (pSmpCfg->auth & localAuth & SMP_AUTH_MITM_FLAG))
   1a63c:	4a3b      	ldr	r2, [pc, #236]	; (1a72c <smpProcPairing+0x118>)
    pCcb->auth = pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS] & ~SMP_AUTH_MITM_FLAG;
   1a63e:	f02c 0c04 	bic.w	ip, ip, #4
   1a642:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
  if (justWorks && (pSmpCfg->auth & localAuth & SMP_AUTH_MITM_FLAG))
   1a646:	6812      	ldr	r2, [r2, #0]
  localAuth = (pCcb->initiator) ? pCcb->pairReq[SMP_AUTHREQ_POS] : pCcb->pairRsp[SMP_AUTHREQ_POS];
   1a648:	f890 c03a 	ldrb.w	ip, [r0, #58]	; 0x3a
   1a64c:	f1bc 0f00 	cmp.w	ip, #0
   1a650:	bf18      	it	ne
   1a652:	460b      	movne	r3, r1
  if (justWorks && (pSmpCfg->auth & localAuth & SMP_AUTH_MITM_FLAG))
   1a654:	7a11      	ldrb	r1, [r2, #8]
   1a656:	400b      	ands	r3, r1
   1a658:	075b      	lsls	r3, r3, #29
   1a65a:	d455      	bmi.n	1a708 <smpProcPairing+0xf4>
  if (pCcb->pairReq[SMP_MAXKEY_POS] < pSmpCfg->minKeyLen ||
   1a65c:	7953      	ldrb	r3, [r2, #5]
   1a65e:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   1a662:	429a      	cmp	r2, r3
   1a664:	d332      	bcc.n	1a6cc <smpProcPairing+0xb8>
   1a666:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
   1a66a:	429a      	cmp	r2, r3
   1a66c:	d32e      	bcc.n	1a6cc <smpProcPairing+0xb8>
  return TRUE;
   1a66e:	2001      	movs	r0, #1
}
   1a670:	b003      	add	sp, #12
   1a672:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((pCcb->pairReq[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* initiator has i/o and */
   1a676:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
   1a67a:	2b03      	cmp	r3, #3
   1a67c:	d035      	beq.n	1a6ea <smpProcPairing+0xd6>
        (pCcb->pairRsp[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* responder has i/o and */
   1a67e:	f890 c028 	ldrb.w	ip, [r0, #40]	; 0x28
    if ((pCcb->pairReq[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* initiator has i/o and */
   1a682:	f1bc 0f03 	cmp.w	ip, #3
   1a686:	d030      	beq.n	1a6ea <smpProcPairing+0xd6>
        (pCcb->pairRsp[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* responder has i/o and */
   1a688:	2b01      	cmp	r3, #1
   1a68a:	d937      	bls.n	1a6fc <smpProcPairing+0xe8>
         (pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO) ||   /* initiator is display y/n  or */
   1a68c:	2b04      	cmp	r3, #4
   1a68e:	d045      	beq.n	1a71c <smpProcPairing+0x108>
   1a690:	2300      	movs	r3, #0
   1a692:	4619      	mov	r1, r3
      *pDisplay =
   1a694:	7011      	strb	r1, [r2, #0]
      if (!(pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY &&
   1a696:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
   1a69a:	2902      	cmp	r1, #2
   1a69c:	d039      	beq.n	1a712 <smpProcPairing+0xfe>
        *pDisplay ^= !pCcb->initiator;
   1a69e:	f890 103a 	ldrb.w	r1, [r0, #58]	; 0x3a
   1a6a2:	2900      	cmp	r1, #0
   1a6a4:	bf08      	it	eq
   1a6a6:	f083 0301 	eoreq.w	r3, r3, #1
   1a6aa:	7013      	strb	r3, [r2, #0]
    pCcb->auth = (pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS]) | SMP_AUTH_MITM_FLAG;
   1a6ac:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
   1a6b0:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
  if (justWorks && (pSmpCfg->auth & localAuth & SMP_AUTH_MITM_FLAG))
   1a6b4:	4a1d      	ldr	r2, [pc, #116]	; (1a72c <smpProcPairing+0x118>)
    pCcb->auth = (pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS]) | SMP_AUTH_MITM_FLAG;
   1a6b6:	400b      	ands	r3, r1
  if (justWorks && (pSmpCfg->auth & localAuth & SMP_AUTH_MITM_FLAG))
   1a6b8:	6812      	ldr	r2, [r2, #0]
    pCcb->auth = (pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS]) | SMP_AUTH_MITM_FLAG;
   1a6ba:	f043 0304 	orr.w	r3, r3, #4
   1a6be:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (pCcb->pairReq[SMP_MAXKEY_POS] < pSmpCfg->minKeyLen ||
   1a6c2:	7953      	ldrb	r3, [r2, #5]
   1a6c4:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   1a6c8:	429a      	cmp	r2, r3
   1a6ca:	d2cc      	bcs.n	1a666 <smpProcPairing+0x52>
    hdr.param = pCcb->connId;
   1a6cc:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   1a6d0:	f240 6303 	movw	r3, #1539	; 0x603
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1a6d4:	a901      	add	r1, sp, #4
    hdr.param = pCcb->connId;
   1a6d6:	f8ad 2004 	strh.w	r2, [sp, #4]
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   1a6da:	f8ad 3006 	strh.w	r3, [sp, #6]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1a6de:	f7ff ff5f 	bl	1a5a0 <smpSmExecute>
    return FALSE;
   1a6e2:	2000      	movs	r0, #0
}
   1a6e4:	b003      	add	sp, #12
   1a6e6:	f85d fb04 	ldr.w	pc, [sp], #4
           (pCcb->pairRsp[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG))
   1a6ea:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   1a6ee:	e7a3      	b.n	1a638 <smpProcPairing+0x24>
  if (pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT &&
   1a6f0:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   1a6f4:	2b01      	cmp	r3, #1
   1a6f6:	d196      	bne.n	1a626 <smpProcPairing+0x12>
    *pOob = SMP_OOB_DATA_PRESENT;
   1a6f8:	700b      	strb	r3, [r1, #0]
  if (!justWorks)
   1a6fa:	e7d7      	b.n	1a6ac <smpProcPairing+0x98>
        !(((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||     /* both don't have display only */
   1a6fc:	f1bc 0f01 	cmp.w	ip, #1
   1a700:	d9f3      	bls.n	1a6ea <smpProcPairing+0xd6>
   1a702:	2301      	movs	r3, #1
   1a704:	4619      	mov	r1, r3
   1a706:	e7c5      	b.n	1a694 <smpProcPairing+0x80>
    hdr.param = pCcb->connId;
   1a708:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   1a70c:	f240 3303 	movw	r3, #771	; 0x303
   1a710:	e7e0      	b.n	1a6d4 <smpProcPairing+0xc0>
      if (!(pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY &&
   1a712:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
   1a716:	2902      	cmp	r1, #2
   1a718:	d1c1      	bne.n	1a69e <smpProcPairing+0x8a>
   1a71a:	e7c7      	b.n	1a6ac <smpProcPairing+0x98>
         ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_DISP) &&     /* initiator is key/display and */
   1a71c:	f1bc 0f02 	cmp.w	ip, #2
   1a720:	d0ef      	beq.n	1a702 <smpProcPairing+0xee>
          (pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY ||      /* responder is key only or key/display */
   1a722:	f1bc 0f04 	cmp.w	ip, #4
   1a726:	d1b3      	bne.n	1a690 <smpProcPairing+0x7c>
   1a728:	e7eb      	b.n	1a702 <smpProcPairing+0xee>
   1a72a:	bf00      	nop
   1a72c:	10002b04 	.word	0x10002b04

0001a730 <smpAuthReq>:
{
   1a730:	b500      	push	{lr}
  if (pCcb->auth & SMP_AUTH_MITM_FLAG)
   1a732:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    buf.authReq.hdr.param = pCcb->connId;
   1a736:	f890 c03d 	ldrb.w	ip, [r0, #61]	; 0x3d
  if (pCcb->auth & SMP_AUTH_MITM_FLAG)
   1a73a:	f013 0304 	ands.w	r3, r3, #4
{
   1a73e:	b087      	sub	sp, #28
  if (pCcb->auth & SMP_AUTH_MITM_FLAG)
   1a740:	d00e      	beq.n	1a760 <smpAuthReq+0x30>
    buf.authReq.hdr.event = DM_SEC_AUTH_REQ_IND;
   1a742:	232e      	movs	r3, #46	; 0x2e
    DmSmpCbackExec((dmEvt_t *) &buf.authReq);
   1a744:	4668      	mov	r0, sp
    buf.authReq.hdr.param = pCcb->connId;
   1a746:	f8ad c000 	strh.w	ip, [sp]
    buf.authReq.hdr.event = DM_SEC_AUTH_REQ_IND;
   1a74a:	f88d 3002 	strb.w	r3, [sp, #2]
    buf.authReq.oob = oob;
   1a74e:	f88d 1004 	strb.w	r1, [sp, #4]
    buf.authReq.display = display;
   1a752:	f88d 2005 	strb.w	r2, [sp, #5]
    DmSmpCbackExec((dmEvt_t *) &buf.authReq);
   1a756:	f7fe fde9 	bl	1932c <DmSmpCbackExec>
}
   1a75a:	b007      	add	sp, #28
   1a75c:	f85d fb04 	ldr.w	pc, [sp], #4
    buf.authRsp.hdr.event = SMP_MSG_API_AUTH_RSP;
   1a760:	2104      	movs	r1, #4
    buf.authRsp.authDataLen = SMP_PIN_LEN;
   1a762:	2203      	movs	r2, #3
    buf.authRsp.hdr.event = SMP_MSG_API_AUTH_RSP;
   1a764:	f88d 1002 	strb.w	r1, [sp, #2]
    smpSmExecute(pCcb, (smpMsg_t *) &buf.authRsp);
   1a768:	4669      	mov	r1, sp
    buf.authRsp.hdr.param = pCcb->connId;
   1a76a:	f8ad c000 	strh.w	ip, [sp]
    buf.authRsp.authData[0] = 0;
   1a76e:	f8ad 3004 	strh.w	r3, [sp, #4]
    buf.authRsp.authData[2] = 0;
   1a772:	f88d 3006 	strb.w	r3, [sp, #6]
    buf.authRsp.authDataLen = SMP_PIN_LEN;
   1a776:	f88d 2014 	strb.w	r2, [sp, #20]
    smpSmExecute(pCcb, (smpMsg_t *) &buf.authRsp);
   1a77a:	f7ff ff11 	bl	1a5a0 <smpSmExecute>
}
   1a77e:	b007      	add	sp, #28
   1a780:	f85d fb04 	ldr.w	pc, [sp], #4

0001a784 <smpDbGetRecord>:
 *
 *  \return Pointer to the record associated with the connection or the common record.
 */
/*************************************************************************************************/
static smpDbDevice_t *smpDbGetRecord(dmConnId_t connId)
{
   1a784:	b570      	push	{r4, r5, r6, lr}
   1a786:	4604      	mov	r4, r0
  smpDbDevice_t *pRec = &smpDbCb.db[SMP_DB_FIRST_REC];
  uint8_t addrType = DmHostAddrType(DmConnPeerAddrType(connId));
   1a788:	f7fe f86e 	bl	18868 <DmConnPeerAddrType>
   1a78c:	f7fe fb22 	bl	18dd4 <DmHostAddrType>
   1a790:	4605      	mov	r5, r0
  uint8_t *pAddr = DmConnPeerAddr(connId);
   1a792:	4620      	mov	r0, r4
   1a794:	f7fe f872 	bl	1887c <DmConnPeerAddr>
  uint8_t i;

  SMP_TRACE_INFO2("smpDbGetRecord: connId: %d type: %d", connId, addrType);
   1a798:	4621      	mov	r1, r4
  if (pRec->failCount > 0)
   1a79a:	4c28      	ldr	r4, [pc, #160]	; (1a83c <smpDbGetRecord+0xb8>)
  SMP_TRACE_INFO2("smpDbGetRecord: connId: %d type: %d", connId, addrType);
   1a79c:	462a      	mov	r2, r5
  uint8_t *pAddr = DmConnPeerAddr(connId);
   1a79e:	4606      	mov	r6, r0
  SMP_TRACE_INFO2("smpDbGetRecord: connId: %d type: %d", connId, addrType);
   1a7a0:	4827      	ldr	r0, [pc, #156]	; (1a840 <smpDbGetRecord+0xbc>)
   1a7a2:	f7f9 fbb7 	bl	13f14 <WsfTrace>
  if (pRec->failCount > 0)
   1a7a6:	7fe3      	ldrb	r3, [r4, #31]
   1a7a8:	b91b      	cbnz	r3, 1a7b2 <smpDbGetRecord+0x2e>
  if (pRec->lockMs > 0)
   1a7aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a7ac:	b90b      	cbnz	r3, 1a7b2 <smpDbGetRecord+0x2e>
  if (pRec->attemptMult > 0)
   1a7ae:	8c23      	ldrh	r3, [r4, #32]
   1a7b0:	b113      	cbz	r3, 1a7b8 <smpDbGetRecord+0x34>

  for (i = SMP_DB_FIRST_REC; i < SMP_DB_MAX_DEVICES; i++, pRec++)
  {
    if (smpDbRecordInUse(pRec) && (pRec->addrType == addrType) && BdaCmp(pRec->peerAddr, pAddr))
   1a7b2:	7fa3      	ldrb	r3, [r4, #30]
   1a7b4:	42ab      	cmp	r3, r5
   1a7b6:	d031      	beq.n	1a81c <smpDbGetRecord+0x98>
  if (pRec->failCount > 0)
   1a7b8:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
   1a7bc:	b91b      	cbnz	r3, 1a7c6 <smpDbGetRecord+0x42>
  if (pRec->lockMs > 0)
   1a7be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1a7c0:	b90b      	cbnz	r3, 1a7c6 <smpDbGetRecord+0x42>
  if (pRec->attemptMult > 0)
   1a7c2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   1a7c4:	b11b      	cbz	r3, 1a7ce <smpDbGetRecord+0x4a>
    if (smpDbRecordInUse(pRec) && (pRec->addrType == addrType) && BdaCmp(pRec->peerAddr, pAddr))
   1a7c6:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   1a7ca:	42ab      	cmp	r3, r5
   1a7cc:	d02e      	beq.n	1a82c <smpDbGetRecord+0xa8>
  SMP_TRACE_INFO0("smpDbAddDevice");
   1a7ce:	481d      	ldr	r0, [pc, #116]	; (1a844 <smpDbGetRecord+0xc0>)
   1a7d0:	f7f9 fba0 	bl	13f14 <WsfTrace>
  if (pRec->failCount > 0)
   1a7d4:	7fe3      	ldrb	r3, [r4, #31]
   1a7d6:	b993      	cbnz	r3, 1a7fe <smpDbGetRecord+0x7a>
  if (pRec->lockMs > 0)
   1a7d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a7da:	b983      	cbnz	r3, 1a7fe <smpDbGetRecord+0x7a>
  if (pRec->attemptMult > 0)
   1a7dc:	8c23      	ldrh	r3, [r4, #32]
   1a7de:	b973      	cbnz	r3, 1a7fe <smpDbGetRecord+0x7a>
  smpDbDevice_t *pRec = &smpDbCb.db[SMP_DB_FIRST_REC];
   1a7e0:	4c19      	ldr	r4, [pc, #100]	; (1a848 <smpDbGetRecord+0xc4>)
      memset(pRec, 0, sizeof(smpDbDevice_t));
   1a7e2:	2300      	movs	r3, #0
   1a7e4:	e9c4 3300 	strd	r3, r3, [r4]
      BdaCpy(pRec->peerAddr, pAddr);
   1a7e8:	4620      	mov	r0, r4
      memset(pRec, 0, sizeof(smpDbDevice_t));
   1a7ea:	e9c4 3302 	strd	r3, r3, [r4, #8]
   1a7ee:	e9c4 3304 	strd	r3, r3, [r4, #16]
      BdaCpy(pRec->peerAddr, pAddr);
   1a7f2:	4631      	mov	r1, r6
      pRec->addrType = addrType;
   1a7f4:	71a5      	strb	r5, [r4, #6]
      BdaCpy(pRec->peerAddr, pAddr);
   1a7f6:	f001 fdad 	bl	1c354 <BdaCpy>
    /* Database is full, use the common record. */
    pRec = &smpDbCb.db[SMP_DB_COMMON_REC];
  }

  return pRec;
}
   1a7fa:	4620      	mov	r0, r4
   1a7fc:	bd70      	pop	{r4, r5, r6, pc}
  if (pRec->failCount > 0)
   1a7fe:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
   1a802:	b92b      	cbnz	r3, 1a810 <smpDbGetRecord+0x8c>
  if (pRec->lockMs > 0)
   1a804:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1a806:	b91b      	cbnz	r3, 1a810 <smpDbGetRecord+0x8c>
  if (pRec->attemptMult > 0)
   1a808:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   1a80a:	b90b      	cbnz	r3, 1a810 <smpDbGetRecord+0x8c>
  for (i = SMP_DB_FIRST_REC; i < SMP_DB_MAX_DEVICES; i++, pRec++)
   1a80c:	4c0f      	ldr	r4, [pc, #60]	; (1a84c <smpDbGetRecord+0xc8>)
   1a80e:	e7e8      	b.n	1a7e2 <smpDbGetRecord+0x5e>
    SMP_TRACE_INFO0("smpDbGetRecord: common record");
   1a810:	480f      	ldr	r0, [pc, #60]	; (1a850 <smpDbGetRecord+0xcc>)
    pRec = &smpDbCb.db[SMP_DB_COMMON_REC];
   1a812:	4c0a      	ldr	r4, [pc, #40]	; (1a83c <smpDbGetRecord+0xb8>)
    SMP_TRACE_INFO0("smpDbGetRecord: common record");
   1a814:	f7f9 fb7e 	bl	13f14 <WsfTrace>
}
   1a818:	4620      	mov	r0, r4
   1a81a:	bd70      	pop	{r4, r5, r6, pc}
    if (smpDbRecordInUse(pRec) && (pRec->addrType == addrType) && BdaCmp(pRec->peerAddr, pAddr))
   1a81c:	480a      	ldr	r0, [pc, #40]	; (1a848 <smpDbGetRecord+0xc4>)
   1a81e:	4631      	mov	r1, r6
   1a820:	f001 fd9e 	bl	1c360 <BdaCmp>
   1a824:	2800      	cmp	r0, #0
   1a826:	d0c7      	beq.n	1a7b8 <smpDbGetRecord+0x34>
  smpDbDevice_t *pRec = &smpDbCb.db[SMP_DB_FIRST_REC];
   1a828:	4c07      	ldr	r4, [pc, #28]	; (1a848 <smpDbGetRecord+0xc4>)
   1a82a:	e7f5      	b.n	1a818 <smpDbGetRecord+0x94>
    if (smpDbRecordInUse(pRec) && (pRec->addrType == addrType) && BdaCmp(pRec->peerAddr, pAddr))
   1a82c:	4807      	ldr	r0, [pc, #28]	; (1a84c <smpDbGetRecord+0xc8>)
   1a82e:	4631      	mov	r1, r6
   1a830:	f001 fd96 	bl	1c360 <BdaCmp>
   1a834:	2800      	cmp	r0, #0
   1a836:	d0ca      	beq.n	1a7ce <smpDbGetRecord+0x4a>
  for (i = SMP_DB_FIRST_REC; i < SMP_DB_MAX_DEVICES; i++, pRec++)
   1a838:	4c04      	ldr	r4, [pc, #16]	; (1a84c <smpDbGetRecord+0xc8>)
   1a83a:	e7ed      	b.n	1a818 <smpDbGetRecord+0x94>
   1a83c:	10005ba4 	.word	0x10005ba4
   1a840:	00025340 	.word	0x00025340
   1a844:	00025364 	.word	0x00025364
   1a848:	10005bbc 	.word	0x10005bbc
   1a84c:	10005bd4 	.word	0x10005bd4
   1a850:	00025374 	.word	0x00025374

0001a854 <SmpDbInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpDbInit(void)
{
   1a854:	b510      	push	{r4, lr}
  /* Stop active service timer. */
  if (smpDbCb.serviceTimer.isStarted == TRUE)
   1a856:	4c0c      	ldr	r4, [pc, #48]	; (1a888 <SmpDbInit+0x34>)
   1a858:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
   1a85c:	2b01      	cmp	r3, #1
   1a85e:	d00d      	beq.n	1a87c <SmpDbInit+0x28>
  {
    WsfTimerStop(&smpDbCb.serviceTimer);
  }

  /* Reset control block. */
  memset(&smpDbCb, 0, sizeof(smpDbCb));
   1a860:	2258      	movs	r2, #88	; 0x58
   1a862:	4809      	ldr	r0, [pc, #36]	; (1a888 <SmpDbInit+0x34>)
   1a864:	2100      	movs	r1, #0
   1a866:	f006 fdf1 	bl	2144c <memset>

  /* Setup service timer. */
  smpDbCb.serviceTimer.handlerId = smpCb.handlerId;
   1a86a:	4a08      	ldr	r2, [pc, #32]	; (1a88c <SmpDbInit+0x38>)
  smpDbCb.serviceTimer.msg.event = SMP_DB_SERVICE_IND;
   1a86c:	231f      	movs	r3, #31
  smpDbCb.serviceTimer.handlerId = smpCb.handlerId;
   1a86e:	f892 20e0 	ldrb.w	r2, [r2, #224]	; 0xe0
   1a872:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
  smpDbCb.serviceTimer.msg.event = SMP_DB_SERVICE_IND;
   1a876:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
}
   1a87a:	bd10      	pop	{r4, pc}
    WsfTimerStop(&smpDbCb.serviceTimer);
   1a87c:	f104 0048 	add.w	r0, r4, #72	; 0x48
   1a880:	f7f9 faa8 	bl	13dd4 <WsfTimerStop>
   1a884:	e7ec      	b.n	1a860 <SmpDbInit+0xc>
   1a886:	bf00      	nop
   1a888:	10005ba4 	.word	0x10005ba4
   1a88c:	10005bfc 	.word	0x10005bfc

0001a890 <SmpDbGetPairingDisabledTime>:
 *
 *  \return Time pairing is disabled (msec), or zero if pairing isn't disabled.
 */
/*************************************************************************************************/
uint32_t SmpDbGetPairingDisabledTime(dmConnId_t connId)
{
   1a890:	b510      	push	{r4, lr}
   1a892:	b082      	sub	sp, #8
   1a894:	9001      	str	r0, [sp, #4]
  smpDbDevice_t *pRec = smpDbGetRecord(connId);
   1a896:	f7ff ff75 	bl	1a784 <smpDbGetRecord>
   1a89a:	4604      	mov	r4, r0

  SMP_TRACE_INFO3("SmpDbGetPairingDisabledTime: connId: %d period: %d attemptMult: %d",
   1a89c:	9901      	ldr	r1, [sp, #4]
   1a89e:	4804      	ldr	r0, [pc, #16]	; (1a8b0 <SmpDbGetPairingDisabledTime+0x20>)
   1a8a0:	8923      	ldrh	r3, [r4, #8]
   1a8a2:	68e2      	ldr	r2, [r4, #12]
   1a8a4:	f7f9 fb36 	bl	13f14 <WsfTrace>
                  connId, pRec->lockMs, pRec->attemptMult);

  return pRec->lockMs;
}
   1a8a8:	68e0      	ldr	r0, [r4, #12]
   1a8aa:	b002      	add	sp, #8
   1a8ac:	bd10      	pop	{r4, pc}
   1a8ae:	bf00      	nop
   1a8b0:	00025394 	.word	0x00025394

0001a8b4 <SmpDbSetFailureCount>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpDbSetFailureCount(dmConnId_t connId, uint8_t count)
{
   1a8b4:	b530      	push	{r4, r5, lr}
   1a8b6:	b083      	sub	sp, #12
   1a8b8:	460c      	mov	r4, r1
   1a8ba:	9001      	str	r0, [sp, #4]
  smpDbDevice_t *pRec = smpDbGetRecord(connId);
   1a8bc:	f7ff ff62 	bl	1a784 <smpDbGetRecord>
   1a8c0:	4605      	mov	r5, r0

  SMP_TRACE_INFO2("SmpDbSetFailureCount: connId: %d count: %d", connId, count);
   1a8c2:	9901      	ldr	r1, [sp, #4]
   1a8c4:	4805      	ldr	r0, [pc, #20]	; (1a8dc <SmpDbSetFailureCount+0x28>)
   1a8c6:	4622      	mov	r2, r4
   1a8c8:	f7f9 fb24 	bl	13f14 <WsfTrace>

  pRec->failCount = count;
   1a8cc:	71ec      	strb	r4, [r5, #7]

  if (count != 0)
   1a8ce:	b11c      	cbz	r4, 1a8d8 <SmpDbSetFailureCount+0x24>
  {
    pRec->failCountToMs = pSmpCfg->maxAttemptTimeout;
   1a8d0:	4b03      	ldr	r3, [pc, #12]	; (1a8e0 <SmpDbSetFailureCount+0x2c>)
   1a8d2:	681b      	ldr	r3, [r3, #0]
   1a8d4:	68db      	ldr	r3, [r3, #12]
   1a8d6:	616b      	str	r3, [r5, #20]
  }
}
   1a8d8:	b003      	add	sp, #12
   1a8da:	bd30      	pop	{r4, r5, pc}
   1a8dc:	000253d8 	.word	0x000253d8
   1a8e0:	10002b04 	.word	0x10002b04

0001a8e4 <SmpDbGetFailureCount>:
 *
 *  \return The failure count.
 */
/*************************************************************************************************/
uint8_t SmpDbGetFailureCount(dmConnId_t connId)
{
   1a8e4:	b510      	push	{r4, lr}
   1a8e6:	b082      	sub	sp, #8
   1a8e8:	9001      	str	r0, [sp, #4]
  smpDbDevice_t *pRec = smpDbGetRecord(connId);
   1a8ea:	f7ff ff4b 	bl	1a784 <smpDbGetRecord>
   1a8ee:	4604      	mov	r4, r0

  SMP_TRACE_INFO2("SmpDbGetFailureCount: connId: %d count: %d", connId, pRec->failCount);
   1a8f0:	9901      	ldr	r1, [sp, #4]
   1a8f2:	4803      	ldr	r0, [pc, #12]	; (1a900 <SmpDbGetFailureCount+0x1c>)
   1a8f4:	79e2      	ldrb	r2, [r4, #7]
   1a8f6:	f7f9 fb0d 	bl	13f14 <WsfTrace>

  return pRec->failCount;
}
   1a8fa:	79e0      	ldrb	r0, [r4, #7]
   1a8fc:	b002      	add	sp, #8
   1a8fe:	bd10      	pop	{r4, pc}
   1a900:	00025404 	.word	0x00025404

0001a904 <SmpDbMaxAttemptReached>:
 *
 *  \return Time until device can retry pairing.
 */
/*************************************************************************************************/
uint32_t SmpDbMaxAttemptReached(dmConnId_t connId)
{
   1a904:	b510      	push	{r4, lr}
   1a906:	b082      	sub	sp, #8
   1a908:	9001      	str	r0, [sp, #4]
  smpDbDevice_t *pRec = smpDbGetRecord(connId);
   1a90a:	f7ff ff3b 	bl	1a784 <smpDbGetRecord>
   1a90e:	4604      	mov	r4, r0
  uint16_t multiplier;

  SMP_TRACE_INFO1("SmpDbMaxAttemptReached: connId: %d", connId);
   1a910:	9901      	ldr	r1, [sp, #4]
   1a912:	4815      	ldr	r0, [pc, #84]	; (1a968 <SmpDbMaxAttemptReached+0x64>)
   1a914:	f7f9 fafe 	bl	13f14 <WsfTrace>

  if (pRec->attemptMult == 0)
   1a918:	8923      	ldrh	r3, [r4, #8]
    /* Due to a disconnection, a record exists but the attempt multipier hasn't been set. */
    multiplier = 1;
  }
  else
  {
    multiplier = (pRec->attemptMult * pSmpCfg->attemptExp);
   1a91a:	4a14      	ldr	r2, [pc, #80]	; (1a96c <SmpDbMaxAttemptReached+0x68>)
  if (pRec->attemptMult == 0)
   1a91c:	b9a3      	cbnz	r3, 1a948 <SmpDbMaxAttemptReached+0x44>
    multiplier = (pRec->attemptMult * pSmpCfg->attemptExp);
   1a91e:	2301      	movs	r3, #1
   1a920:	6812      	ldr	r2, [r2, #0]
    multiplier = 1;
   1a922:	4619      	mov	r1, r3
  }

  if ((pSmpCfg->attemptTimeout * multiplier) <= pSmpCfg->maxAttemptTimeout)
   1a924:	6810      	ldr	r0, [r2, #0]
   1a926:	fb00 f303 	mul.w	r3, r0, r3
   1a92a:	68d0      	ldr	r0, [r2, #12]
  {
    /* Exponential increase is greater than max timeout. */
    pRec->lockMs = pSmpCfg->maxAttemptTimeout;
  }

  pRec->expDecrementMs = pSmpCfg->attemptDecTimeout;
   1a92c:	6912      	ldr	r2, [r2, #16]
  if ((pSmpCfg->attemptTimeout * multiplier) <= pSmpCfg->maxAttemptTimeout)
   1a92e:	4283      	cmp	r3, r0
    pRec->attemptMult = multiplier;
   1a930:	bf98      	it	ls
   1a932:	4618      	movls	r0, r3
  pRec->expDecrementMs = pSmpCfg->attemptDecTimeout;
   1a934:	e9c4 0203 	strd	r0, r2, [r4, #12]
  if (smpDbCb.serviceTimer.isStarted == FALSE)
   1a938:	4b0d      	ldr	r3, [pc, #52]	; (1a970 <SmpDbMaxAttemptReached+0x6c>)
    pRec->attemptMult = multiplier;
   1a93a:	bf98      	it	ls
   1a93c:	8121      	strhls	r1, [r4, #8]
  if (smpDbCb.serviceTimer.isStarted == FALSE)
   1a93e:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
   1a942:	b142      	cbz	r2, 1a956 <SmpDbMaxAttemptReached+0x52>

  /* Ensure the service timer is running. */
  smpDbStartServiceTimer();

  return pRec->lockMs;
}
   1a944:	b002      	add	sp, #8
   1a946:	bd10      	pop	{r4, pc}
    multiplier = (pRec->attemptMult * pSmpCfg->attemptExp);
   1a948:	6812      	ldr	r2, [r2, #0]
   1a94a:	8a91      	ldrh	r1, [r2, #20]
   1a94c:	fb11 f103 	smulbb	r1, r1, r3
   1a950:	b289      	uxth	r1, r1
  if ((pSmpCfg->attemptTimeout * multiplier) <= pSmpCfg->maxAttemptTimeout)
   1a952:	460b      	mov	r3, r1
   1a954:	e7e6      	b.n	1a924 <SmpDbMaxAttemptReached+0x20>
    WsfTimerStartMs(&smpDbCb.serviceTimer, SMP_DB_SRV_MS);
   1a956:	f103 0048 	add.w	r0, r3, #72	; 0x48
   1a95a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1a95e:	f7f9 f9f5 	bl	13d4c <WsfTimerStartMs>
  return pRec->lockMs;
   1a962:	68e0      	ldr	r0, [r4, #12]
}
   1a964:	b002      	add	sp, #8
   1a966:	bd10      	pop	{r4, pc}
   1a968:	00025430 	.word	0x00025430
   1a96c:	10002b04 	.word	0x10002b04
   1a970:	10005ba4 	.word	0x10005ba4

0001a974 <SmpDbPairingFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpDbPairingFailed(dmConnId_t connId)
{
   1a974:	b510      	push	{r4, lr}
   1a976:	b082      	sub	sp, #8
   1a978:	9001      	str	r0, [sp, #4]
  smpDbDevice_t *pRec = smpDbGetRecord(connId);
   1a97a:	f7ff ff03 	bl	1a784 <smpDbGetRecord>

  SMP_TRACE_INFO1("SmpDbPairingFailed: connId: %d", connId);
   1a97e:	9901      	ldr	r1, [sp, #4]
  smpDbDevice_t *pRec = smpDbGetRecord(connId);
   1a980:	4604      	mov	r4, r0
  SMP_TRACE_INFO1("SmpDbPairingFailed: connId: %d", connId);
   1a982:	4804      	ldr	r0, [pc, #16]	; (1a994 <SmpDbPairingFailed+0x20>)
   1a984:	f7f9 fac6 	bl	13f14 <WsfTrace>

  /* Reset exponent decrement timer. */
  pRec->expDecrementMs = pSmpCfg->attemptDecTimeout;
   1a988:	4b03      	ldr	r3, [pc, #12]	; (1a998 <SmpDbPairingFailed+0x24>)
   1a98a:	681b      	ldr	r3, [r3, #0]
   1a98c:	691b      	ldr	r3, [r3, #16]
   1a98e:	6123      	str	r3, [r4, #16]
}
   1a990:	b002      	add	sp, #8
   1a992:	bd10      	pop	{r4, pc}
   1a994:	00025454 	.word	0x00025454
   1a998:	10002b04 	.word	0x10002b04

0001a99c <SmpDbService>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpDbService(void)
{
   1a99c:	b538      	push	{r3, r4, r5, lr}
  if (pRec->failCount > 0)
   1a99e:	4c75      	ldr	r4, [pc, #468]	; (1ab74 <SmpDbService+0x1d8>)
   1a9a0:	79e0      	ldrb	r0, [r4, #7]
   1a9a2:	b9b8      	cbnz	r0, 1a9d4 <SmpDbService+0x38>
   1a9a4:	68e3      	ldr	r3, [r4, #12]
  if (pRec->lockMs > 0)
   1a9a6:	b9b3      	cbnz	r3, 1a9d6 <SmpDbService+0x3a>
  if (pRec->attemptMult > 0)
   1a9a8:	8922      	ldrh	r2, [r4, #8]
   1a9aa:	b9a2      	cbnz	r2, 1a9d6 <SmpDbService+0x3a>
  if (pRec->failCount > 0)
   1a9ac:	7fe0      	ldrb	r0, [r4, #31]
   1a9ae:	2800      	cmp	r0, #0
   1a9b0:	d14b      	bne.n	1aa4a <SmpDbService+0xae>
   1a9b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (pRec->lockMs > 0)
   1a9b4:	2b00      	cmp	r3, #0
   1a9b6:	d149      	bne.n	1aa4c <SmpDbService+0xb0>
  if (pRec->attemptMult > 0)
   1a9b8:	8c22      	ldrh	r2, [r4, #32]
   1a9ba:	2a00      	cmp	r2, #0
   1a9bc:	d146      	bne.n	1aa4c <SmpDbService+0xb0>
  if (pRec->failCount > 0)
   1a9be:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
   1a9c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1a9c4:	2800      	cmp	r0, #0
   1a9c6:	d17c      	bne.n	1aac2 <SmpDbService+0x126>
  if (pRec->lockMs > 0)
   1a9c8:	2b00      	cmp	r3, #0
   1a9ca:	d17a      	bne.n	1aac2 <SmpDbService+0x126>
  if (pRec->attemptMult > 0)
   1a9cc:	8f22      	ldrh	r2, [r4, #56]	; 0x38
   1a9ce:	2a00      	cmp	r2, #0
   1a9d0:	d177      	bne.n	1aac2 <SmpDbService+0x126>
      {
        smpDbStartServiceTimer();
      }
    }
  }
}
   1a9d2:	bd38      	pop	{r3, r4, r5, pc}
   1a9d4:	68e3      	ldr	r3, [r4, #12]
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
   1a9d6:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
      SMP_DB_DEC_TIMER(pRec->expDecrementMs);
   1a9da:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
   1a9de:	bf38      	it	cc
   1a9e0:	f44f 717a 	movcc.w	r1, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->lockMs);
   1a9e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1a9e8:	bf38      	it	cc
   1a9ea:	f44f 737a 	movcc.w	r3, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
   1a9ee:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
   1a9f2:	bf38      	it	cc
   1a9f4:	f44f 727a 	movcc.w	r2, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->expDecrementMs);
   1a9f8:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->lockMs);
   1a9fc:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
   1aa00:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->lockMs);
   1aa04:	e9c4 3103 	strd	r3, r1, [r4, #12]
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
   1aa08:	6162      	str	r2, [r4, #20]
      if (pRec->expDecrementMs == 0)
   1aa0a:	b961      	cbnz	r1, 1aa26 <SmpDbService+0x8a>
        pRec->attemptMult /= pSmpCfg->attemptExp;
   1aa0c:	495a      	ldr	r1, [pc, #360]	; (1ab78 <SmpDbService+0x1dc>)
   1aa0e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
   1aa12:	680d      	ldr	r5, [r1, #0]
   1aa14:	8aa9      	ldrh	r1, [r5, #20]
   1aa16:	fbbc fef1 	udiv	lr, ip, r1
        if (pRec->attemptMult)
   1aa1a:	458c      	cmp	ip, r1
        pRec->attemptMult /= pSmpCfg->attemptExp;
   1aa1c:	f8a4 e008 	strh.w	lr, [r4, #8]
        if (pRec->attemptMult)
   1aa20:	d301      	bcc.n	1aa26 <SmpDbService+0x8a>
          pRec->expDecrementMs =  pSmpCfg->attemptDecTimeout;
   1aa22:	6929      	ldr	r1, [r5, #16]
   1aa24:	6121      	str	r1, [r4, #16]
      if (pRec->failCountToMs == 0)
   1aa26:	2a00      	cmp	r2, #0
   1aa28:	f000 8088 	beq.w	1ab3c <SmpDbService+0x1a0>
  if (pRec->failCount > 0)
   1aa2c:	2800      	cmp	r0, #0
   1aa2e:	f000 8086 	beq.w	1ab3e <SmpDbService+0x1a2>
  if (smpDbCb.serviceTimer.isStarted == FALSE)
   1aa32:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
   1aa36:	2b00      	cmp	r3, #0
   1aa38:	d1b8      	bne.n	1a9ac <SmpDbService+0x10>
    WsfTimerStartMs(&smpDbCb.serviceTimer, SMP_DB_SRV_MS);
   1aa3a:	4850      	ldr	r0, [pc, #320]	; (1ab7c <SmpDbService+0x1e0>)
   1aa3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1aa40:	f7f9 f984 	bl	13d4c <WsfTimerStartMs>
  if (pRec->failCount > 0)
   1aa44:	7fe0      	ldrb	r0, [r4, #31]
   1aa46:	2800      	cmp	r0, #0
   1aa48:	d0b3      	beq.n	1a9b2 <SmpDbService+0x16>
   1aa4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
   1aa4c:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
      SMP_DB_DEC_TIMER(pRec->expDecrementMs);
   1aa50:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
   1aa54:	bf38      	it	cc
   1aa56:	f44f 717a 	movcc.w	r1, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->lockMs);
   1aa5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1aa5e:	bf38      	it	cc
   1aa60:	f44f 737a 	movcc.w	r3, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
   1aa64:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
   1aa68:	bf38      	it	cc
   1aa6a:	f44f 727a 	movcc.w	r2, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->expDecrementMs);
   1aa6e:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->lockMs);
   1aa72:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
   1aa76:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->lockMs);
   1aa7a:	e9c4 3109 	strd	r3, r1, [r4, #36]	; 0x24
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
   1aa7e:	62e2      	str	r2, [r4, #44]	; 0x2c
      if (pRec->expDecrementMs == 0)
   1aa80:	b951      	cbnz	r1, 1aa98 <SmpDbService+0xfc>
        pRec->attemptMult /= pSmpCfg->attemptExp;
   1aa82:	493d      	ldr	r1, [pc, #244]	; (1ab78 <SmpDbService+0x1dc>)
   1aa84:	f8b4 c020 	ldrh.w	ip, [r4, #32]
   1aa88:	680d      	ldr	r5, [r1, #0]
   1aa8a:	8aa9      	ldrh	r1, [r5, #20]
   1aa8c:	fbbc fef1 	udiv	lr, ip, r1
        if (pRec->attemptMult)
   1aa90:	458c      	cmp	ip, r1
        pRec->attemptMult /= pSmpCfg->attemptExp;
   1aa92:	f8a4 e020 	strh.w	lr, [r4, #32]
        if (pRec->attemptMult)
   1aa96:	d26a      	bcs.n	1ab6e <SmpDbService+0x1d2>
      if (pRec->failCountToMs == 0)
   1aa98:	2a00      	cmp	r2, #0
   1aa9a:	d158      	bne.n	1ab4e <SmpDbService+0x1b2>
        pRec->failCount = 0;
   1aa9c:	77e2      	strb	r2, [r4, #31]
  if (pRec->lockMs > 0)
   1aa9e:	b913      	cbnz	r3, 1aaa6 <SmpDbService+0x10a>
  if (pRec->attemptMult > 0)
   1aaa0:	8c23      	ldrh	r3, [r4, #32]
   1aaa2:	2b00      	cmp	r3, #0
   1aaa4:	d08b      	beq.n	1a9be <SmpDbService+0x22>
  if (smpDbCb.serviceTimer.isStarted == FALSE)
   1aaa6:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
   1aaaa:	2b00      	cmp	r3, #0
   1aaac:	d187      	bne.n	1a9be <SmpDbService+0x22>
    WsfTimerStartMs(&smpDbCb.serviceTimer, SMP_DB_SRV_MS);
   1aaae:	4833      	ldr	r0, [pc, #204]	; (1ab7c <SmpDbService+0x1e0>)
   1aab0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1aab4:	f7f9 f94a 	bl	13d4c <WsfTimerStartMs>
  if (pRec->failCount > 0)
   1aab8:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
   1aabc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1aabe:	2800      	cmp	r0, #0
   1aac0:	d082      	beq.n	1a9c8 <SmpDbService+0x2c>
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
   1aac2:	e9d4 1210 	ldrd	r1, r2, [r4, #64]	; 0x40
      SMP_DB_DEC_TIMER(pRec->expDecrementMs);
   1aac6:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
   1aaca:	bf38      	it	cc
   1aacc:	f44f 717a 	movcc.w	r1, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->lockMs);
   1aad0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1aad4:	bf38      	it	cc
   1aad6:	f44f 737a 	movcc.w	r3, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
   1aada:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
   1aade:	bf38      	it	cc
   1aae0:	f44f 727a 	movcc.w	r2, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->expDecrementMs);
   1aae4:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->lockMs);
   1aae8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
   1aaec:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->lockMs);
   1aaf0:	e9c4 310f 	strd	r3, r1, [r4, #60]	; 0x3c
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
   1aaf4:	6462      	str	r2, [r4, #68]	; 0x44
      if (pRec->expDecrementMs == 0)
   1aaf6:	b969      	cbnz	r1, 1ab14 <SmpDbService+0x178>
        pRec->attemptMult /= pSmpCfg->attemptExp;
   1aaf8:	491f      	ldr	r1, [pc, #124]	; (1ab78 <SmpDbService+0x1dc>)
   1aafa:	f8b4 c038 	ldrh.w	ip, [r4, #56]	; 0x38
   1aafe:	680d      	ldr	r5, [r1, #0]
   1ab00:	8aa9      	ldrh	r1, [r5, #20]
   1ab02:	fbbc fef1 	udiv	lr, ip, r1
        if (pRec->attemptMult)
   1ab06:	458c      	cmp	ip, r1
          pRec->expDecrementMs =  pSmpCfg->attemptDecTimeout;
   1ab08:	bf28      	it	cs
   1ab0a:	6929      	ldrcs	r1, [r5, #16]
        pRec->attemptMult /= pSmpCfg->attemptExp;
   1ab0c:	f8a4 e038 	strh.w	lr, [r4, #56]	; 0x38
          pRec->expDecrementMs =  pSmpCfg->attemptDecTimeout;
   1ab10:	bf28      	it	cs
   1ab12:	6421      	strcs	r1, [r4, #64]	; 0x40
      if (pRec->failCountToMs == 0)
   1ab14:	bb1a      	cbnz	r2, 1ab5e <SmpDbService+0x1c2>
        pRec->failCount = 0;
   1ab16:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
  if (pRec->lockMs > 0)
   1ab1a:	b91b      	cbnz	r3, 1ab24 <SmpDbService+0x188>
  if (pRec->attemptMult > 0)
   1ab1c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   1ab1e:	2b00      	cmp	r3, #0
   1ab20:	f43f af57 	beq.w	1a9d2 <SmpDbService+0x36>
  if (smpDbCb.serviceTimer.isStarted == FALSE)
   1ab24:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
   1ab28:	2b00      	cmp	r3, #0
   1ab2a:	f47f af52 	bne.w	1a9d2 <SmpDbService+0x36>
}
   1ab2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    WsfTimerStartMs(&smpDbCb.serviceTimer, SMP_DB_SRV_MS);
   1ab32:	4812      	ldr	r0, [pc, #72]	; (1ab7c <SmpDbService+0x1e0>)
   1ab34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1ab38:	f7f9 b908 	b.w	13d4c <WsfTimerStartMs>
        pRec->failCount = 0;
   1ab3c:	71e2      	strb	r2, [r4, #7]
  if (pRec->lockMs > 0)
   1ab3e:	2b00      	cmp	r3, #0
   1ab40:	f47f af77 	bne.w	1aa32 <SmpDbService+0x96>
  if (pRec->attemptMult > 0)
   1ab44:	8923      	ldrh	r3, [r4, #8]
   1ab46:	2b00      	cmp	r3, #0
   1ab48:	f43f af30 	beq.w	1a9ac <SmpDbService+0x10>
   1ab4c:	e771      	b.n	1aa32 <SmpDbService+0x96>
  if (pRec->failCount > 0)
   1ab4e:	2800      	cmp	r0, #0
   1ab50:	d0a5      	beq.n	1aa9e <SmpDbService+0x102>
  if (smpDbCb.serviceTimer.isStarted == FALSE)
   1ab52:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
   1ab56:	2b00      	cmp	r3, #0
   1ab58:	f47f af31 	bne.w	1a9be <SmpDbService+0x22>
   1ab5c:	e7a7      	b.n	1aaae <SmpDbService+0x112>
  if (pRec->failCount > 0)
   1ab5e:	2800      	cmp	r0, #0
   1ab60:	d0db      	beq.n	1ab1a <SmpDbService+0x17e>
  if (smpDbCb.serviceTimer.isStarted == FALSE)
   1ab62:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
   1ab66:	2b00      	cmp	r3, #0
   1ab68:	f47f af33 	bne.w	1a9d2 <SmpDbService+0x36>
   1ab6c:	e7df      	b.n	1ab2e <SmpDbService+0x192>
          pRec->expDecrementMs =  pSmpCfg->attemptDecTimeout;
   1ab6e:	6929      	ldr	r1, [r5, #16]
   1ab70:	62a1      	str	r1, [r4, #40]	; 0x28
   1ab72:	e791      	b.n	1aa98 <SmpDbService+0xfc>
   1ab74:	10005ba4 	.word	0x10005ba4
   1ab78:	10002b04 	.word	0x10002b04
   1ab7c:	10005bec 	.word	0x10005bec

0001ab80 <smpL2cDataCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void smpL2cDataCback(uint16_t handle, uint16_t len, uint8_t *pPacket)
{
   1ab80:	b530      	push	{r4, r5, lr}
   1ab82:	b087      	sub	sp, #28
   1ab84:	460d      	mov	r5, r1
   1ab86:	4614      	mov	r4, r2
/*************************************************************************************************/
smpCcb_t *smpCcbByHandle(uint16_t handle)
{
  dmConnId_t  connId;

  if ((connId = DmConnIdByHandle(handle)) != DM_CONN_ID_NONE)
   1ab88:	f7fd fe42 	bl	18810 <DmConnIdByHandle>
   1ab8c:	2800      	cmp	r0, #0
   1ab8e:	d039      	beq.n	1ac04 <smpL2cDataCback+0x84>
  cmdCode = *(pPacket + L2C_PAYLOAD_START);
   1ab90:	f894 c008 	ldrb.w	ip, [r4, #8]
  if ((cmdCode >= SMP_CMD_PAIR_REQ && cmdCode < SMP_CMD_MAX) &&
   1ab94:	f10c 33ff 	add.w	r3, ip, #4294967295
   1ab98:	2b0d      	cmp	r3, #13
  {
    return &smpCb.ccb[connId - 1];
   1ab9a:	f100 30ff 	add.w	r0, r0, #4294967295
  if ((cmdCode >= SMP_CMD_PAIR_REQ && cmdCode < SMP_CMD_MAX) &&
   1ab9e:	d804      	bhi.n	1abaa <smpL2cDataCback+0x2a>
      (len == smpPktLenTbl[cmdCode]) &&
   1aba0:	4b1c      	ldr	r3, [pc, #112]	; (1ac14 <smpL2cDataCback+0x94>)
  if ((cmdCode >= SMP_CMD_PAIR_REQ && cmdCode < SMP_CMD_MAX) &&
   1aba2:	f813 300c 	ldrb.w	r3, [r3, ip]
   1aba6:	42ab      	cmp	r3, r5
   1aba8:	d00e      	beq.n	1abc8 <smpL2cDataCback+0x48>
      ((cmdCode == pCcb->nextCmdCode) || (cmdCode == SMP_CMD_PAIR_FAIL)))
   1abaa:	4b1b      	ldr	r3, [pc, #108]	; (1ac18 <smpL2cDataCback+0x98>)
   1abac:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   1abb0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1abb4:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
    SMP_TRACE_WARN3("unexpected packet cmd:%d len:%d, expected:%d", cmdCode, len, pCcb->nextCmdCode);
   1abb8:	4818      	ldr	r0, [pc, #96]	; (1ac1c <smpL2cDataCback+0x9c>)
   1abba:	462a      	mov	r2, r5
   1abbc:	4661      	mov	r1, ip
}
   1abbe:	b007      	add	sp, #28
   1abc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    SMP_TRACE_WARN3("unexpected packet cmd:%d len:%d, expected:%d", cmdCode, len, pCcb->nextCmdCode);
   1abc4:	f7f9 b9a6 	b.w	13f14 <WsfTrace>
      ((cmdCode == pCcb->nextCmdCode) || (cmdCode == SMP_CMD_PAIR_FAIL)))
   1abc8:	4a13      	ldr	r2, [pc, #76]	; (1ac18 <smpL2cDataCback+0x98>)
   1abca:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
   1abce:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1abd2:	00c1      	lsls	r1, r0, #3
   1abd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
      (len == smpPktLenTbl[cmdCode]) &&
   1abd8:	4563      	cmp	r3, ip
   1abda:	d015      	beq.n	1ac08 <smpL2cDataCback+0x88>
      ((cmdCode == pCcb->nextCmdCode) || (cmdCode == SMP_CMD_PAIR_FAIL)))
   1abdc:	f1bc 0f05 	cmp.w	ip, #5
   1abe0:	d1ea      	bne.n	1abb8 <smpL2cDataCback+0x38>
      msg.hdr.status = *(pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN);
   1abe2:	7a63      	ldrb	r3, [r4, #9]
   1abe4:	f88d 3003 	strb.w	r3, [sp, #3]
      msg.hdr.event = SMP_MSG_CMD_PAIRING_FAILED;
   1abe8:	2507      	movs	r5, #7
    msg.hdr.param = pCcb->connId;
   1abea:	4408      	add	r0, r1
   1abec:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    smpSmExecute(pCcb, &msg);
   1abf0:	4669      	mov	r1, sp
    msg.hdr.param = pCcb->connId;
   1abf2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
   1abf6:	f88d 5002 	strb.w	r5, [sp, #2]
   1abfa:	f8ad 3000 	strh.w	r3, [sp]
    msg.data.pPacket = pPacket;
   1abfe:	9401      	str	r4, [sp, #4]
    smpSmExecute(pCcb, &msg);
   1ac00:	f7ff fcce 	bl	1a5a0 <smpSmExecute>
}
   1ac04:	b007      	add	sp, #28
   1ac06:	bd30      	pop	{r4, r5, pc}
    if (cmdCode == SMP_CMD_PAIR_FAIL)
   1ac08:	2b05      	cmp	r3, #5
      msg.hdr.event = SMP_MSG_CMD_PKT;
   1ac0a:	bf18      	it	ne
   1ac0c:	2506      	movne	r5, #6
    if (cmdCode == SMP_CMD_PAIR_FAIL)
   1ac0e:	d1ec      	bne.n	1abea <smpL2cDataCback+0x6a>
   1ac10:	e7e7      	b.n	1abe2 <smpL2cDataCback+0x62>
   1ac12:	bf00      	nop
   1ac14:	000254e4 	.word	0x000254e4
   1ac18:	10005bfc 	.word	0x10005bfc
   1ac1c:	00025474 	.word	0x00025474

0001ac20 <smpDmConnCback>:
{
   1ac20:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ac22:	4605      	mov	r5, r0
  pCcb = smpCcbByConnId((dmConnId_t) pDmEvt->hdr.param);
   1ac24:	7800      	ldrb	r0, [r0, #0]
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   1ac26:	78ab      	ldrb	r3, [r5, #2]
   1ac28:	2b27      	cmp	r3, #39	; 0x27
{
   1ac2a:	b083      	sub	sp, #12
/*************************************************************************************************/
smpCcb_t *smpCcbByConnId(dmConnId_t connId)
{
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return &smpCb.ccb[connId - 1];
   1ac2c:	f100 34ff 	add.w	r4, r0, #4294967295
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   1ac30:	d00b      	beq.n	1ac4a <smpDmConnCback+0x2a>
  else if (pCcb->connId != DM_CONN_ID_NONE)
   1ac32:	4a40      	ldr	r2, [pc, #256]	; (1ad34 <smpDmConnCback+0x114>)
   1ac34:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   1ac38:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
   1ac3c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
   1ac40:	b10a      	cbz	r2, 1ac46 <smpDmConnCback+0x26>
    if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
   1ac42:	2b28      	cmp	r3, #40	; 0x28
   1ac44:	d04c      	beq.n	1ace0 <smpDmConnCback+0xc0>
}
   1ac46:	b003      	add	sp, #12
   1ac48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (DmConnRole((dmConnId_t) pDmEvt->hdr.param) == DM_ROLE_MASTER)
   1ac4a:	f7fd fe95 	bl	18978 <DmConnRole>
   1ac4e:	4f39      	ldr	r7, [pc, #228]	; (1ad34 <smpDmConnCback+0x114>)
    pCcb->handle = pDmEvt->connOpen.handle;
   1ac50:	88eb      	ldrh	r3, [r5, #6]
   1ac52:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   1ac56:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
      pCcb->nextCmdCode = SMP_CMD_PAIR_REQ;
   1ac5a:	2800      	cmp	r0, #0
    pCcb->secReq = FALSE;
   1ac5c:	f04f 0600 	mov.w	r6, #0
    pCcb->connId = (dmConnId_t) pDmEvt->hdr.param;
   1ac60:	7828      	ldrb	r0, [r5, #0]
    pCcb->handle = pDmEvt->connOpen.handle;
   1ac62:	8723      	strh	r3, [r4, #56]	; 0x38
      pCcb->nextCmdCode = SMP_CMD_PAIR_REQ;
   1ac64:	bf0b      	itete	eq
   1ac66:	220b      	moveq	r2, #11
   1ac68:	2201      	movne	r2, #1
   1ac6a:	2301      	moveq	r3, #1
   1ac6c:	4633      	movne	r3, r6
   1ac6e:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
   1ac72:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    pCcb->connId = (dmConnId_t) pDmEvt->hdr.param;
   1ac76:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    pCcb->secReq = FALSE;
   1ac7a:	f884 603b 	strb.w	r6, [r4, #59]	; 0x3b
    pCcb->flowDisabled = FALSE;
   1ac7e:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
    pCcb->attempts = SmpDbGetFailureCount((dmConnId_t) pDmEvt->hdr.param);
   1ac82:	f7ff fe2f 	bl	1a8e4 <SmpDbGetFailureCount>
    smpResumeAttemptsState((dmConnId_t) pDmEvt->hdr.param);
   1ac86:	782d      	ldrb	r5, [r5, #0]
    pCcb->attempts = SmpDbGetFailureCount((dmConnId_t) pDmEvt->hdr.param);
   1ac88:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    pCcb->lastSentKey = 0;
   1ac8c:	f884 6043 	strb.w	r6, [r4, #67]	; 0x43
    pCcb->state = 0;
   1ac90:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
  uint32_t timeMs = SmpDbGetPairingDisabledTime(connId);
   1ac94:	4628      	mov	r0, r5
   1ac96:	f7ff fdfb 	bl	1a890 <SmpDbGetPairingDisabledTime>
  if (timeMs)
   1ac9a:	4604      	mov	r4, r0
   1ac9c:	2800      	cmp	r0, #0
   1ac9e:	d0d2      	beq.n	1ac46 <smpDmConnCback+0x26>
    if (smpCb.lescSupported)
   1aca0:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
  return &smpCb.ccb[connId - 1];
   1aca4:	1e6e      	subs	r6, r5, #1
      pCcb->state = DmConnRole(connId) == DM_ROLE_SLAVE? SMPR_SC_SM_ST_ATTEMPTS : SMPI_SC_SM_ST_ATTEMPTS;
   1aca6:	4628      	mov	r0, r5
    if (smpCb.lescSupported)
   1aca8:	2b00      	cmp	r3, #0
   1acaa:	d035      	beq.n	1ad18 <smpDmConnCback+0xf8>
      pCcb->state = DmConnRole(connId) == DM_ROLE_SLAVE? SMPR_SC_SM_ST_ATTEMPTS : SMPI_SC_SM_ST_ATTEMPTS;
   1acac:	f7fd fe64 	bl	18978 <DmConnRole>
   1acb0:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
   1acb4:	2801      	cmp	r0, #1
   1acb6:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   1acba:	bf0c      	ite	eq
   1acbc:	2226      	moveq	r2, #38	; 0x26
   1acbe:	2224      	movne	r2, #36	; 0x24
   1acc0:	00f0      	lsls	r0, r6, #3
   1acc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    pCcb->waitTimer.msg.event = SMP_MSG_INT_WI_TIMEOUT;
   1acc6:	4430      	add	r0, r6
   1acc8:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
   1accc:	2210      	movs	r2, #16
    WsfTimerStartMs(&pCcb->waitTimer, timeMs);
   1acce:	4618      	mov	r0, r3
   1acd0:	4621      	mov	r1, r4
   1acd2:	4410      	add	r0, r2
    pCcb->waitTimer.msg.event = SMP_MSG_INT_WI_TIMEOUT;
   1acd4:	769a      	strb	r2, [r3, #26]
}
   1acd6:	b003      	add	sp, #12
   1acd8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    WsfTimerStartMs(&pCcb->waitTimer, timeMs);
   1acdc:	f7f9 b836 	b.w	13d4c <WsfTimerStartMs>
      SmpDbSetFailureCount((dmConnId_t) pDmEvt->hdr.param, pCcb->attempts);
   1ace0:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
   1ace4:	f7ff fde6 	bl	1a8b4 <SmpDbSetFailureCount>
      hdr.status = pDmEvt->connClose.reason + DM_SEC_HCI_ERR_BASE;
   1ace8:	7a2b      	ldrb	r3, [r5, #8]
      hdr.param = pDmEvt->hdr.param;
   1acea:	8828      	ldrh	r0, [r5, #0]
   1acec:	f8ad 0004 	strh.w	r0, [sp, #4]
      hdr.status = pDmEvt->connClose.reason + DM_SEC_HCI_ERR_BASE;
   1acf0:	3320      	adds	r3, #32
      hdr.event = SMP_MSG_DM_CONN_CLOSE;
   1acf2:	220a      	movs	r2, #10
      smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1acf4:	4620      	mov	r0, r4
   1acf6:	a901      	add	r1, sp, #4
      hdr.event = SMP_MSG_DM_CONN_CLOSE;
   1acf8:	f88d 2006 	strb.w	r2, [sp, #6]
      hdr.status = pDmEvt->connClose.reason + DM_SEC_HCI_ERR_BASE;
   1acfc:	f88d 3007 	strb.w	r3, [sp, #7]
      smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1ad00:	f7ff fc4e 	bl	1a5a0 <smpSmExecute>
      if (pCcb->pQueued != NULL)
   1ad04:	6b60      	ldr	r0, [r4, #52]	; 0x34
      pCcb->connId = DM_CONN_ID_NONE;
   1ad06:	2500      	movs	r5, #0
   1ad08:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      if (pCcb->pQueued != NULL)
   1ad0c:	2800      	cmp	r0, #0
   1ad0e:	d09a      	beq.n	1ac46 <smpDmConnCback+0x26>
        WsfMsgFree(pCcb->pQueued);
   1ad10:	f7f8 fd88 	bl	13824 <WsfMsgFree>
        pCcb->pQueued = NULL;
   1ad14:	6365      	str	r5, [r4, #52]	; 0x34
}
   1ad16:	e796      	b.n	1ac46 <smpDmConnCback+0x26>
      pCcb->state = DmConnRole(connId) == DM_ROLE_SLAVE? SMPR_SM_ST_ATTEMPTS : SMPI_SM_ST_ATTEMPTS;
   1ad18:	f7fd fe2e 	bl	18978 <DmConnRole>
   1ad1c:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
   1ad20:	2801      	cmp	r0, #1
   1ad22:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   1ad26:	bf0c      	ite	eq
   1ad28:	220d      	moveq	r2, #13
   1ad2a:	220c      	movne	r2, #12
   1ad2c:	00f0      	lsls	r0, r6, #3
   1ad2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
   1ad32:	e7c8      	b.n	1acc6 <smpDmConnCback+0xa6>
   1ad34:	10005bfc 	.word	0x10005bfc

0001ad38 <smpL2cCtrlCback>:
{
   1ad38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return &smpCb.ccb[connId - 1];
   1ad3c:	7804      	ldrb	r4, [r0, #0]
  if (pCcb->connId != DM_CONN_ID_NONE)
   1ad3e:	4f17      	ldr	r7, [pc, #92]	; (1ad9c <smpL2cCtrlCback+0x64>)
  return &smpCb.ccb[connId - 1];
   1ad40:	3c01      	subs	r4, #1
  if (pCcb->connId != DM_CONN_ID_NONE)
   1ad42:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
   1ad46:	eb07 05c3 	add.w	r5, r7, r3, lsl #3
   1ad4a:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
   1ad4e:	b1db      	cbz	r3, 1ad88 <smpL2cCtrlCback+0x50>
    pCcb->flowDisabled = (pMsg->event == L2C_CTRL_FLOW_DISABLE_IND);
   1ad50:	7883      	ldrb	r3, [r0, #2]
   1ad52:	2b01      	cmp	r3, #1
   1ad54:	bf0c      	ite	eq
   1ad56:	2301      	moveq	r3, #1
   1ad58:	2300      	movne	r3, #0
   1ad5a:	4606      	mov	r6, r0
   1ad5c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if (!pCcb->flowDisabled)
   1ad60:	d012      	beq.n	1ad88 <smpL2cCtrlCback+0x50>
      if (pCcb->pQueued != NULL)
   1ad62:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1ad64:	ea4f 08c4 	mov.w	r8, r4, lsl #3
   1ad68:	b143      	cbz	r3, 1ad7c <smpL2cCtrlCback+0x44>
        pCcb->pQueued = NULL;
   1ad6a:	2200      	movs	r2, #0
   1ad6c:	636a      	str	r2, [r5, #52]	; 0x34
    pCcb->pQueued = pPkt;
  }
  /* else send it to L2CAP */
  else
  {
    L2cDataReq(L2C_CID_SMP, pCcb->handle, smpPktLenTbl[pPkt[L2C_PAYLOAD_START]], pPkt);
   1ad6e:	490c      	ldr	r1, [pc, #48]	; (1ada0 <smpL2cCtrlCback+0x68>)
   1ad70:	7a1a      	ldrb	r2, [r3, #8]
   1ad72:	2006      	movs	r0, #6
   1ad74:	5c8a      	ldrb	r2, [r1, r2]
   1ad76:	8f29      	ldrh	r1, [r5, #56]	; 0x38
   1ad78:	f7f5 fd3a 	bl	107f0 <L2cDataReq>
 *  \return TRUE if in idle state, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t smpStateIdle(smpCcb_t *pCcb)
{
  return (pCcb->state == 0);
   1ad7c:	4444      	add	r4, r8
   1ad7e:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
      if (!smpStateIdle(pCcb))
   1ad82:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
   1ad86:	b90b      	cbnz	r3, 1ad8c <smpL2cCtrlCback+0x54>
}
   1ad88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pMsg->event = SMP_MSG_INT_SEND_NEXT_KEY;
   1ad8c:	230c      	movs	r3, #12
   1ad8e:	70b3      	strb	r3, [r6, #2]
        smpSmExecute(pCcb, (smpMsg_t *) pMsg);
   1ad90:	4631      	mov	r1, r6
   1ad92:	4628      	mov	r0, r5
}
   1ad94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        smpSmExecute(pCcb, (smpMsg_t *) pMsg);
   1ad98:	f7ff bc02 	b.w	1a5a0 <smpSmExecute>
   1ad9c:	10005bfc 	.word	0x10005bfc
   1ada0:	000254e4 	.word	0x000254e4

0001ada4 <smpCcbByConnId>:
  return &smpCb.ccb[connId - 1];
   1ada4:	4b03      	ldr	r3, [pc, #12]	; (1adb4 <smpCcbByConnId+0x10>)
   1ada6:	3801      	subs	r0, #1
   1ada8:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
}
   1adac:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1adb0:	4770      	bx	lr
   1adb2:	bf00      	nop
   1adb4:	10005bfc 	.word	0x10005bfc

0001adb8 <smpCalcC1Part1>:
{
   1adb8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (pCcb->initiator)
   1adba:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
   1adbe:	4604      	mov	r4, r0
   1adc0:	b089      	sub	sp, #36	; 0x24
    if (!BdaIsZeros(DmConnLocalRpa(pCcb->connId)))
   1adc2:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
{
   1adc6:	460e      	mov	r6, r1
   1adc8:	4615      	mov	r5, r2
  if (pCcb->initiator)
   1adca:	b1a3      	cbz	r3, 1adf6 <smpCalcC1Part1+0x3e>
    if (!BdaIsZeros(DmConnLocalRpa(pCcb->connId)))
   1adcc:	f7fd fd7e 	bl	188cc <DmConnLocalRpa>
   1add0:	f001 fad4 	bl	1c37c <BdaIsZeros>
   1add4:	2800      	cmp	r0, #0
   1add6:	f040 808a 	bne.w	1aeee <smpCalcC1Part1+0x136>
      iAddrType = DM_ADDR_RANDOM;
   1adda:	2701      	movs	r7, #1
    if (!BdaIsZeros(DmConnPeerRpa(pCcb->connId)))
   1addc:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
   1ade0:	f7fd fd6a 	bl	188b8 <DmConnPeerRpa>
   1ade4:	f001 faca 	bl	1c37c <BdaIsZeros>
   1ade8:	b1a0      	cbz	r0, 1ae14 <smpCalcC1Part1+0x5c>
      rAddrType = DmConnPeerAddrType(pCcb->connId);
   1adea:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
   1adee:	f7fd fd3b 	bl	18868 <DmConnPeerAddrType>
   1adf2:	4686      	mov	lr, r0
   1adf4:	e010      	b.n	1ae18 <smpCalcC1Part1+0x60>
    if (!BdaIsZeros(DmConnPeerRpa(pCcb->connId)))
   1adf6:	f7fd fd5f 	bl	188b8 <DmConnPeerRpa>
   1adfa:	f001 fabf 	bl	1c37c <BdaIsZeros>
   1adfe:	2800      	cmp	r0, #0
   1ae00:	d162      	bne.n	1aec8 <smpCalcC1Part1+0x110>
    if (!BdaIsZeros(DmConnLocalRpa(pCcb->connId)))
   1ae02:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
      iAddrType = DM_ADDR_RANDOM;
   1ae06:	2701      	movs	r7, #1
    if (!BdaIsZeros(DmConnLocalRpa(pCcb->connId)))
   1ae08:	f7fd fd60 	bl	188cc <DmConnLocalRpa>
   1ae0c:	f001 fab6 	bl	1c37c <BdaIsZeros>
   1ae10:	2800      	cmp	r0, #0
   1ae12:	d166      	bne.n	1aee2 <smpCalcC1Part1+0x12a>
      rAddrType = DM_ADDR_RANDOM;
   1ae14:	f04f 0e01 	mov.w	lr, #1
  *p++ = iAddrType ^ *pRand++;
   1ae18:	7829      	ldrb	r1, [r5, #0]
  *p++ = rAddrType ^ *pRand++;
   1ae1a:	786b      	ldrb	r3, [r5, #1]
    *p++ = pCcb->pairReq[i] ^ *pRand++;
   1ae1c:	f8d5 c002 	ldr.w	ip, [r5, #2]
   1ae20:	6a22      	ldr	r2, [r4, #32]
  *p++ = iAddrType ^ *pRand++;
   1ae22:	404f      	eors	r7, r1
  *p++ = rAddrType ^ *pRand++;
   1ae24:	ea8e 0e03 	eor.w	lr, lr, r3
    *p++ = pCcb->pairReq[i] ^ *pRand++;
   1ae28:	79a9      	ldrb	r1, [r5, #6]
   1ae2a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  *p++ = iAddrType ^ *pRand++;
   1ae2e:	f88d 7010 	strb.w	r7, [sp, #16]
    *p++ = pCcb->pairReq[i] ^ *pRand++;
   1ae32:	ea8c 0c02 	eor.w	ip, ip, r2
   1ae36:	404b      	eors	r3, r1
   1ae38:	79ea      	ldrb	r2, [r5, #7]
   1ae3a:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
   1ae3e:	f88d 3016 	strb.w	r3, [sp, #22]
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
   1ae42:	4630      	mov	r0, r6
    *p++ = pCcb->pairRsp[i] ^ *pRand++;
   1ae44:	f8d5 3009 	ldr.w	r3, [r5, #9]
   1ae48:	f8d4 6027 	ldr.w	r6, [r4, #39]	; 0x27
    *p++ = pCcb->pairReq[i] ^ *pRand++;
   1ae4c:	7a2f      	ldrb	r7, [r5, #8]
  *p++ = rAddrType ^ *pRand++;
   1ae4e:	f88d e011 	strb.w	lr, [sp, #17]
    *p++ = pCcb->pairReq[i] ^ *pRand++;
   1ae52:	4051      	eors	r1, r2
   1ae54:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
    *p++ = pCcb->pairRsp[i] ^ *pRand++;
   1ae58:	f894 e02b 	ldrb.w	lr, [r4, #43]	; 0x2b
    *p++ = pCcb->pairReq[i] ^ *pRand++;
   1ae5c:	f8cd c012 	str.w	ip, [sp, #18]
    *p++ = pCcb->pairRsp[i] ^ *pRand++;
   1ae60:	4073      	eors	r3, r6
   1ae62:	7b6e      	ldrb	r6, [r5, #13]
   1ae64:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
   1ae68:	f8cd 3019 	str.w	r3, [sp, #25]
    *p++ = pCcb->pairReq[i] ^ *pRand++;
   1ae6c:	407a      	eors	r2, r7
    *p++ = pCcb->pairRsp[i] ^ *pRand++;
   1ae6e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    *p++ = pCcb->pairReq[i] ^ *pRand++;
   1ae72:	f88d 2018 	strb.w	r2, [sp, #24]
    *p++ = pCcb->pairRsp[i] ^ *pRand++;
   1ae76:	ea8e 0e06 	eor.w	lr, lr, r6
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
   1ae7a:	4a20      	ldr	r2, [pc, #128]	; (1aefc <smpCalcC1Part1+0x144>)
    *p++ = pCcb->pairRsp[i] ^ *pRand++;
   1ae7c:	7bae      	ldrb	r6, [r5, #14]
   1ae7e:	7bed      	ldrb	r5, [r5, #15]
    *p++ = pCcb->pairReq[i] ^ *pRand++;
   1ae80:	f88d 1017 	strb.w	r1, [sp, #23]
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
   1ae84:	210b      	movs	r1, #11
   1ae86:	f892 20e0 	ldrb.w	r2, [r2, #224]	; 0xe0
    *p++ = pCcb->pairRsp[i] ^ *pRand++;
   1ae8a:	f88d e01d 	strb.w	lr, [sp, #29]
   1ae8e:	ea8c 0c06 	eor.w	ip, ip, r6
   1ae92:	405d      	eors	r5, r3
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
   1ae94:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
   1ae98:	9100      	str	r1, [sp, #0]
   1ae9a:	a904      	add	r1, sp, #16
    *p++ = pCcb->pairRsp[i] ^ *pRand++;
   1ae9c:	f88d c01e 	strb.w	ip, [sp, #30]
   1aea0:	f88d 501f 	strb.w	r5, [sp, #31]
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
   1aea4:	f7f4 fe90 	bl	fbc8 <SecAes>
  if (pCcb->token == SEC_TOKEN_INVALID)
   1aea8:	28ff      	cmp	r0, #255	; 0xff
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
   1aeaa:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  if (pCcb->token == SEC_TOKEN_INVALID)
   1aeae:	d001      	beq.n	1aeb4 <smpCalcC1Part1+0xfc>
}
   1aeb0:	b009      	add	sp, #36	; 0x24
   1aeb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   1aeb4:	f640 0303 	movw	r3, #2051	; 0x803
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1aeb8:	a903      	add	r1, sp, #12
   1aeba:	4620      	mov	r0, r4
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   1aebc:	f8ad 300e 	strh.w	r3, [sp, #14]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1aec0:	f7ff fb6e 	bl	1a5a0 <smpSmExecute>
}
   1aec4:	b009      	add	sp, #36	; 0x24
   1aec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      iAddrType = DmConnPeerAddrType(pCcb->connId);
   1aec8:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
   1aecc:	f7fd fccc 	bl	18868 <DmConnPeerAddrType>
   1aed0:	4607      	mov	r7, r0
    if (!BdaIsZeros(DmConnLocalRpa(pCcb->connId)))
   1aed2:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
   1aed6:	f7fd fcf9 	bl	188cc <DmConnLocalRpa>
   1aeda:	f001 fa4f 	bl	1c37c <BdaIsZeros>
   1aede:	2800      	cmp	r0, #0
   1aee0:	d098      	beq.n	1ae14 <smpCalcC1Part1+0x5c>
      rAddrType = DmConnLocalAddrType(pCcb->connId);
   1aee2:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
   1aee6:	f7fd fcd3 	bl	18890 <DmConnLocalAddrType>
   1aeea:	4686      	mov	lr, r0
   1aeec:	e794      	b.n	1ae18 <smpCalcC1Part1+0x60>
      iAddrType = DmConnLocalAddrType(pCcb->connId);
   1aeee:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
   1aef2:	f7fd fccd 	bl	18890 <DmConnLocalAddrType>
   1aef6:	4607      	mov	r7, r0
   1aef8:	e770      	b.n	1addc <smpCalcC1Part1+0x24>
   1aefa:	bf00      	nop
   1aefc:	10005bfc 	.word	0x10005bfc

0001af00 <smpCalcC1Part2>:
{
   1af00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (pCcb->initiator)
   1af04:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
   1af08:	4607      	mov	r7, r0
   1af0a:	b089      	sub	sp, #36	; 0x24
    pIaddr = DmConnLocalRpa(pCcb->connId);
   1af0c:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
{
   1af10:	4688      	mov	r8, r1
   1af12:	4614      	mov	r4, r2
  if (pCcb->initiator)
   1af14:	2b00      	cmp	r3, #0
   1af16:	d04c      	beq.n	1afb2 <smpCalcC1Part2+0xb2>
    pIaddr = DmConnLocalRpa(pCcb->connId);
   1af18:	f7fd fcd8 	bl	188cc <DmConnLocalRpa>
   1af1c:	4605      	mov	r5, r0
    if (BdaIsZeros(pIaddr))
   1af1e:	f001 fa2d 	bl	1c37c <BdaIsZeros>
   1af22:	2800      	cmp	r0, #0
   1af24:	f040 80b2 	bne.w	1b08c <smpCalcC1Part2+0x18c>
    pRaddr = DmConnPeerRpa(pCcb->connId);
   1af28:	f897 003d 	ldrb.w	r0, [r7, #61]	; 0x3d
   1af2c:	f7fd fcc4 	bl	188b8 <DmConnPeerRpa>
   1af30:	4606      	mov	r6, r0
    if (BdaIsZeros(pRaddr))
   1af32:	f001 fa23 	bl	1c37c <BdaIsZeros>
   1af36:	2800      	cmp	r0, #0
   1af38:	f040 80b7 	bne.w	1b0aa <smpCalcC1Part2+0x1aa>
  for (i = BDA_ADDR_LEN; i > 0; i--)
   1af3c:	a904      	add	r1, sp, #16
   1af3e:	1c73      	adds	r3, r6, #1
   1af40:	1acb      	subs	r3, r1, r3
   1af42:	2b02      	cmp	r3, #2
   1af44:	d94f      	bls.n	1afe6 <smpCalcC1Part2+0xe6>
    *p++ = *pRaddr++ ^ *pPart1++;
   1af46:	6830      	ldr	r0, [r6, #0]
   1af48:	6823      	ldr	r3, [r4, #0]
   1af4a:	7932      	ldrb	r2, [r6, #4]
   1af4c:	4058      	eors	r0, r3
   1af4e:	9004      	str	r0, [sp, #16]
   1af50:	7920      	ldrb	r0, [r4, #4]
   1af52:	7973      	ldrb	r3, [r6, #5]
   1af54:	4042      	eors	r2, r0
   1af56:	7960      	ldrb	r0, [r4, #5]
   1af58:	f88d 2014 	strb.w	r2, [sp, #20]
   1af5c:	4043      	eors	r3, r0
   1af5e:	f88d 3015 	strb.w	r3, [sp, #21]
  for (i = BDA_ADDR_LEN; i > 0; i--)
   1af62:	ab08      	add	r3, sp, #32
   1af64:	1b5b      	subs	r3, r3, r5
   1af66:	3b0b      	subs	r3, #11
   1af68:	2b02      	cmp	r3, #2
   1af6a:	d965      	bls.n	1b038 <smpCalcC1Part2+0x138>
    *p++ = *pIaddr++ ^ *pPart1++;
   1af6c:	682b      	ldr	r3, [r5, #0]
   1af6e:	f8d4 2006 	ldr.w	r2, [r4, #6]
   1af72:	7aa0      	ldrb	r0, [r4, #10]
   1af74:	405a      	eors	r2, r3
   1af76:	f8cd 2016 	str.w	r2, [sp, #22]
   1af7a:	792b      	ldrb	r3, [r5, #4]
   1af7c:	7ae2      	ldrb	r2, [r4, #11]
   1af7e:	4043      	eors	r3, r0
   1af80:	f88d 301a 	strb.w	r3, [sp, #26]
   1af84:	796b      	ldrb	r3, [r5, #5]
   1af86:	4053      	eors	r3, r2
   1af88:	f88d 301b 	strb.w	r3, [sp, #27]
  *p++ = *pPart1++;
   1af8c:	68e3      	ldr	r3, [r4, #12]
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
   1af8e:	4a52      	ldr	r2, [pc, #328]	; (1b0d8 <smpCalcC1Part2+0x1d8>)
  *p++ = *pPart1++;
   1af90:	9307      	str	r3, [sp, #28]
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
   1af92:	230b      	movs	r3, #11
   1af94:	f892 20e0 	ldrb.w	r2, [r2, #224]	; 0xe0
   1af98:	9300      	str	r3, [sp, #0]
   1af9a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
   1af9e:	4640      	mov	r0, r8
   1afa0:	f7f4 fe12 	bl	fbc8 <SecAes>
  if (pCcb->token == SEC_TOKEN_INVALID)
   1afa4:	28ff      	cmp	r0, #255	; 0xff
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
   1afa6:	f887 0041 	strb.w	r0, [r7, #65]	; 0x41
  if (pCcb->token == SEC_TOKEN_INVALID)
   1afaa:	d064      	beq.n	1b076 <smpCalcC1Part2+0x176>
}
   1afac:	b009      	add	sp, #36	; 0x24
   1afae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    pIaddr = DmConnPeerRpa(pCcb->connId);
   1afb2:	f7fd fc81 	bl	188b8 <DmConnPeerRpa>
   1afb6:	4605      	mov	r5, r0
    if (BdaIsZeros(pIaddr))
   1afb8:	f001 f9e0 	bl	1c37c <BdaIsZeros>
   1afbc:	2800      	cmp	r0, #0
   1afbe:	d17a      	bne.n	1b0b6 <smpCalcC1Part2+0x1b6>
    pRaddr = DmConnLocalRpa(pCcb->connId);
   1afc0:	f897 003d 	ldrb.w	r0, [r7, #61]	; 0x3d
   1afc4:	f7fd fc82 	bl	188cc <DmConnLocalRpa>
   1afc8:	4606      	mov	r6, r0
    if (BdaIsZeros(pRaddr))
   1afca:	f001 f9d7 	bl	1c37c <BdaIsZeros>
   1afce:	2800      	cmp	r0, #0
   1afd0:	d0b4      	beq.n	1af3c <smpCalcC1Part2+0x3c>
      pRaddr = DmConnLocalAddr(pCcb->connId);
   1afd2:	f897 003d 	ldrb.w	r0, [r7, #61]	; 0x3d
   1afd6:	f7fd fc65 	bl	188a4 <DmConnLocalAddr>
   1afda:	4606      	mov	r6, r0
  for (i = BDA_ADDR_LEN; i > 0; i--)
   1afdc:	a904      	add	r1, sp, #16
   1afde:	1c73      	adds	r3, r6, #1
   1afe0:	1acb      	subs	r3, r1, r3
   1afe2:	2b02      	cmp	r3, #2
   1afe4:	d8af      	bhi.n	1af46 <smpCalcC1Part2+0x46>
    *p++ = *pRaddr++ ^ *pPart1++;
   1afe6:	f896 9000 	ldrb.w	r9, [r6]
   1afea:	f896 e001 	ldrb.w	lr, [r6, #1]
   1afee:	f896 c002 	ldrb.w	ip, [r6, #2]
   1aff2:	78f0      	ldrb	r0, [r6, #3]
   1aff4:	7932      	ldrb	r2, [r6, #4]
   1aff6:	7973      	ldrb	r3, [r6, #5]
   1aff8:	7826      	ldrb	r6, [r4, #0]
   1affa:	ea89 0606 	eor.w	r6, r9, r6
   1affe:	f88d 6010 	strb.w	r6, [sp, #16]
   1b002:	7866      	ldrb	r6, [r4, #1]
   1b004:	ea8e 0606 	eor.w	r6, lr, r6
   1b008:	f88d 6011 	strb.w	r6, [sp, #17]
   1b00c:	78a6      	ldrb	r6, [r4, #2]
   1b00e:	ea8c 0606 	eor.w	r6, ip, r6
   1b012:	f88d 6012 	strb.w	r6, [sp, #18]
   1b016:	78e6      	ldrb	r6, [r4, #3]
   1b018:	4070      	eors	r0, r6
   1b01a:	f88d 0013 	strb.w	r0, [sp, #19]
   1b01e:	7920      	ldrb	r0, [r4, #4]
   1b020:	4042      	eors	r2, r0
   1b022:	f88d 2014 	strb.w	r2, [sp, #20]
   1b026:	7962      	ldrb	r2, [r4, #5]
   1b028:	4053      	eors	r3, r2
   1b02a:	f88d 3015 	strb.w	r3, [sp, #21]
  for (i = BDA_ADDR_LEN; i > 0; i--)
   1b02e:	ab08      	add	r3, sp, #32
   1b030:	1b5b      	subs	r3, r3, r5
   1b032:	3b0b      	subs	r3, #11
   1b034:	2b02      	cmp	r3, #2
   1b036:	d899      	bhi.n	1af6c <smpCalcC1Part2+0x6c>
    *p++ = *pIaddr++ ^ *pPart1++;
   1b038:	782b      	ldrb	r3, [r5, #0]
   1b03a:	79a2      	ldrb	r2, [r4, #6]
   1b03c:	4053      	eors	r3, r2
   1b03e:	f88d 3016 	strb.w	r3, [sp, #22]
   1b042:	786a      	ldrb	r2, [r5, #1]
   1b044:	79e3      	ldrb	r3, [r4, #7]
   1b046:	4053      	eors	r3, r2
   1b048:	f88d 3017 	strb.w	r3, [sp, #23]
   1b04c:	78aa      	ldrb	r2, [r5, #2]
   1b04e:	7a23      	ldrb	r3, [r4, #8]
   1b050:	4053      	eors	r3, r2
   1b052:	f88d 3018 	strb.w	r3, [sp, #24]
   1b056:	78eb      	ldrb	r3, [r5, #3]
   1b058:	7a62      	ldrb	r2, [r4, #9]
   1b05a:	4053      	eors	r3, r2
   1b05c:	f88d 3019 	strb.w	r3, [sp, #25]
   1b060:	792b      	ldrb	r3, [r5, #4]
   1b062:	7aa2      	ldrb	r2, [r4, #10]
   1b064:	4053      	eors	r3, r2
   1b066:	f88d 301a 	strb.w	r3, [sp, #26]
   1b06a:	796a      	ldrb	r2, [r5, #5]
   1b06c:	7ae3      	ldrb	r3, [r4, #11]
   1b06e:	4053      	eors	r3, r2
   1b070:	f88d 301b 	strb.w	r3, [sp, #27]
  for (i = BDA_ADDR_LEN; i > 0; i--)
   1b074:	e78a      	b.n	1af8c <smpCalcC1Part2+0x8c>
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   1b076:	f640 0303 	movw	r3, #2051	; 0x803
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1b07a:	a903      	add	r1, sp, #12
   1b07c:	4638      	mov	r0, r7
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   1b07e:	f8ad 300e 	strh.w	r3, [sp, #14]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1b082:	f7ff fa8d 	bl	1a5a0 <smpSmExecute>
}
   1b086:	b009      	add	sp, #36	; 0x24
   1b088:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      pIaddr = DmConnLocalAddr(pCcb->connId);
   1b08c:	f897 003d 	ldrb.w	r0, [r7, #61]	; 0x3d
   1b090:	f7fd fc08 	bl	188a4 <DmConnLocalAddr>
   1b094:	4605      	mov	r5, r0
    pRaddr = DmConnPeerRpa(pCcb->connId);
   1b096:	f897 003d 	ldrb.w	r0, [r7, #61]	; 0x3d
   1b09a:	f7fd fc0d 	bl	188b8 <DmConnPeerRpa>
   1b09e:	4606      	mov	r6, r0
    if (BdaIsZeros(pRaddr))
   1b0a0:	f001 f96c 	bl	1c37c <BdaIsZeros>
   1b0a4:	2800      	cmp	r0, #0
   1b0a6:	f43f af49 	beq.w	1af3c <smpCalcC1Part2+0x3c>
      pRaddr = DmConnPeerAddr(pCcb->connId);
   1b0aa:	f897 003d 	ldrb.w	r0, [r7, #61]	; 0x3d
   1b0ae:	f7fd fbe5 	bl	1887c <DmConnPeerAddr>
   1b0b2:	4606      	mov	r6, r0
   1b0b4:	e742      	b.n	1af3c <smpCalcC1Part2+0x3c>
      pIaddr = DmConnPeerAddr(pCcb->connId);
   1b0b6:	f897 003d 	ldrb.w	r0, [r7, #61]	; 0x3d
   1b0ba:	f7fd fbdf 	bl	1887c <DmConnPeerAddr>
   1b0be:	4605      	mov	r5, r0
    pRaddr = DmConnLocalRpa(pCcb->connId);
   1b0c0:	f897 003d 	ldrb.w	r0, [r7, #61]	; 0x3d
   1b0c4:	f7fd fc02 	bl	188cc <DmConnLocalRpa>
   1b0c8:	4606      	mov	r6, r0
    if (BdaIsZeros(pRaddr))
   1b0ca:	f001 f957 	bl	1c37c <BdaIsZeros>
   1b0ce:	2800      	cmp	r0, #0
   1b0d0:	f43f af34 	beq.w	1af3c <smpCalcC1Part2+0x3c>
   1b0d4:	e77d      	b.n	1afd2 <smpCalcC1Part2+0xd2>
   1b0d6:	bf00      	nop
   1b0d8:	10005bfc 	.word	0x10005bfc

0001b0dc <smpCalcS1>:
{
   1b0dc:	b570      	push	{r4, r5, r6, lr}
   1b0de:	b088      	sub	sp, #32
   1b0e0:	4616      	mov	r6, r2
   1b0e2:	4604      	mov	r4, r0
   1b0e4:	460d      	mov	r5, r1
  Calc128Cpy64(buf, pRand2);
   1b0e6:	a804      	add	r0, sp, #16
   1b0e8:	4619      	mov	r1, r3
   1b0ea:	f001 f963 	bl	1c3b4 <Calc128Cpy64>
  Calc128Cpy64(&buf[SMP_RAND8_LEN], pRand1);
   1b0ee:	4631      	mov	r1, r6
   1b0f0:	a806      	add	r0, sp, #24
   1b0f2:	f001 f95f 	bl	1c3b4 <Calc128Cpy64>
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
   1b0f6:	4a0d      	ldr	r2, [pc, #52]	; (1b12c <smpCalcS1+0x50>)
   1b0f8:	230b      	movs	r3, #11
   1b0fa:	f892 20e0 	ldrb.w	r2, [r2, #224]	; 0xe0
   1b0fe:	9300      	str	r3, [sp, #0]
   1b100:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
   1b104:	a904      	add	r1, sp, #16
   1b106:	4628      	mov	r0, r5
   1b108:	f7f4 fd5e 	bl	fbc8 <SecAes>
  if (pCcb->token == SEC_TOKEN_INVALID)
   1b10c:	28ff      	cmp	r0, #255	; 0xff
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
   1b10e:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  if (pCcb->token == SEC_TOKEN_INVALID)
   1b112:	d001      	beq.n	1b118 <smpCalcS1+0x3c>
}
   1b114:	b008      	add	sp, #32
   1b116:	bd70      	pop	{r4, r5, r6, pc}
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   1b118:	f640 0303 	movw	r3, #2051	; 0x803
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1b11c:	a903      	add	r1, sp, #12
   1b11e:	4620      	mov	r0, r4
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   1b120:	f8ad 300e 	strh.w	r3, [sp, #14]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1b124:	f7ff fa3c 	bl	1a5a0 <smpSmExecute>
}
   1b128:	b008      	add	sp, #32
   1b12a:	bd70      	pop	{r4, r5, r6, pc}
   1b12c:	10005bfc 	.word	0x10005bfc

0001b130 <smpGenerateLtk>:
{
   1b130:	b570      	push	{r4, r5, r6, lr}
  smpScratch_t *pScr = pCcb->pScr;
   1b132:	6b04      	ldr	r4, [r0, #48]	; 0x30
  p = pScr->keyInd.keyData.ltk.key;
   1b134:	1d26      	adds	r6, r4, #4
  SecRand(p, pScr->keyInd.encKeyLen);
   1b136:	f894 1020 	ldrb.w	r1, [r4, #32]
{
   1b13a:	4605      	mov	r5, r0
  SecRand(p, pScr->keyInd.encKeyLen);
   1b13c:	4630      	mov	r0, r6
   1b13e:	f7f4 ffa7 	bl	10090 <SecRand>
  p += pScr->keyInd.encKeyLen;
   1b142:	f894 0020 	ldrb.w	r0, [r4, #32]
  memset(p, 0, (SMP_KEY_LEN - pScr->keyInd.encKeyLen));
   1b146:	2100      	movs	r1, #0
   1b148:	f1c0 0210 	rsb	r2, r0, #16
   1b14c:	4430      	add	r0, r6
   1b14e:	f006 f97d 	bl	2144c <memset>
  BYTES_TO_UINT16(pScr->keyInd.keyData.ltk.ediv, pScr->buf.b4);
   1b152:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
   1b156:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
  memcpy(pScr->keyInd.keyData.ltk.rand, &pScr->buf.b4[2], SMP_RAND8_LEN);
   1b15a:	f8d4 1032 	ldr.w	r1, [r4, #50]	; 0x32
   1b15e:	6161      	str	r1, [r4, #20]
  BYTES_TO_UINT16(pScr->keyInd.keyData.ltk.ediv, pScr->buf.b4);
   1b160:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  memcpy(pScr->keyInd.keyData.ltk.rand, &pScr->buf.b4[2], SMP_RAND8_LEN);
   1b164:	f8d4 1036 	ldr.w	r1, [r4, #54]	; 0x36
  BYTES_TO_UINT16(pScr->keyInd.keyData.ltk.ediv, pScr->buf.b4);
   1b168:	83a3      	strh	r3, [r4, #28]
  pScr->keyInd.type = DM_KEY_LOCAL_LTK;
   1b16a:	2201      	movs	r2, #1
  memcpy(pScr->keyInd.keyData.ltk.rand, &pScr->buf.b4[2], SMP_RAND8_LEN);
   1b16c:	61a1      	str	r1, [r4, #24]
  pScr->keyInd.type = DM_KEY_LOCAL_LTK;
   1b16e:	77a2      	strb	r2, [r4, #30]
  pScr->keyInd.secLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ? DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
   1b170:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
   1b174:	f012 0f04 	tst.w	r2, #4
  pScr->keyInd.hdr.event = DM_SEC_KEY_IND;
   1b178:	f04f 032f 	mov.w	r3, #47	; 0x2f
  pScr->keyInd.secLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ? DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
   1b17c:	bf14      	ite	ne
   1b17e:	2202      	movne	r2, #2
   1b180:	2201      	moveq	r2, #1
   1b182:	77e2      	strb	r2, [r4, #31]
  pScr->keyInd.hdr.event = DM_SEC_KEY_IND;
   1b184:	70a3      	strb	r3, [r4, #2]
  DmSmpCbackExec((dmEvt_t *) &pScr->keyInd);
   1b186:	4620      	mov	r0, r4
}
   1b188:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  DmSmpCbackExec((dmEvt_t *) &pScr->keyInd);
   1b18c:	f7fe b8ce 	b.w	1932c <DmSmpCbackExec>

0001b190 <smpSendPkt>:
{
   1b190:	b570      	push	{r4, r5, r6, lr}
  if (pCcb->flowDisabled)
   1b192:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
   1b196:	4604      	mov	r4, r0
   1b198:	460d      	mov	r5, r1
  if (pCcb->flowDisabled)
   1b19a:	b153      	cbz	r3, 1b1b2 <smpSendPkt+0x22>
    if (pCcb->pQueued != NULL)
   1b19c:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1b19e:	b133      	cbz	r3, 1b1ae <smpSendPkt+0x1e>
      SMP_TRACE_WARN1("smpSendPkt packet discarded cmd:%d", pCcb->pQueued[L2C_PAYLOAD_START]);
   1b1a0:	4809      	ldr	r0, [pc, #36]	; (1b1c8 <smpSendPkt+0x38>)
   1b1a2:	7a19      	ldrb	r1, [r3, #8]
   1b1a4:	f7f8 feb6 	bl	13f14 <WsfTrace>
      WsfMsgFree(pCcb->pQueued);
   1b1a8:	6b60      	ldr	r0, [r4, #52]	; 0x34
   1b1aa:	f7f8 fb3b 	bl	13824 <WsfMsgFree>
    pCcb->pQueued = pPkt;
   1b1ae:	6365      	str	r5, [r4, #52]	; 0x34
}
   1b1b0:	bd70      	pop	{r4, r5, r6, pc}
    L2cDataReq(L2C_CID_SMP, pCcb->handle, smpPktLenTbl[pPkt[L2C_PAYLOAD_START]], pPkt);
   1b1b2:	7a0b      	ldrb	r3, [r1, #8]
   1b1b4:	4a05      	ldr	r2, [pc, #20]	; (1b1cc <smpSendPkt+0x3c>)
   1b1b6:	8f01      	ldrh	r1, [r0, #56]	; 0x38
   1b1b8:	5cd2      	ldrb	r2, [r2, r3]
   1b1ba:	2006      	movs	r0, #6
   1b1bc:	462b      	mov	r3, r5
}
   1b1be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    L2cDataReq(L2C_CID_SMP, pCcb->handle, smpPktLenTbl[pPkt[L2C_PAYLOAD_START]], pPkt);
   1b1c2:	f7f5 bb15 	b.w	107f0 <L2cDataReq>
   1b1c6:	bf00      	nop
   1b1c8:	000254a4 	.word	0x000254a4
   1b1cc:	000254e4 	.word	0x000254e4

0001b1d0 <smpMsgAlloc>:
 *  \return Pointer to data message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *smpMsgAlloc(uint16_t len)
{
  return WsfMsgDataAlloc(len, HCI_TX_DATA_TAILROOM);
   1b1d0:	2100      	movs	r1, #0
   1b1d2:	f7f8 bb15 	b.w	13800 <WsfMsgDataAlloc>
   1b1d6:	bf00      	nop

0001b1d8 <SmpDmMsgSend>:
 *  \return None.
 */
/*************************************************************************************************/
void SmpDmMsgSend(smpDmMsg_t *pMsg)
{
  WsfMsgSend(smpCb.handlerId, pMsg);
   1b1d8:	4b02      	ldr	r3, [pc, #8]	; (1b1e4 <SmpDmMsgSend+0xc>)
{
   1b1da:	4601      	mov	r1, r0
  WsfMsgSend(smpCb.handlerId, pMsg);
   1b1dc:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
   1b1e0:	f7f8 bb24 	b.w	1382c <WsfMsgSend>
   1b1e4:	10005bfc 	.word	0x10005bfc

0001b1e8 <SmpDmEncryptInd>:
  return &smpCb.ccb[connId - 1];
   1b1e8:	7803      	ldrb	r3, [r0, #0]
 */
/*************************************************************************************************/
void SmpDmEncryptInd(wsfMsgHdr_t *pMsg)
{
  /* set event to SMP event type */
  pMsg->event = (pMsg->status == HCI_SUCCESS) ?
   1b1ea:	78c1      	ldrb	r1, [r0, #3]

      /* get connection control block */
      pCcb = smpCcbByConnId((dmConnId_t) pMsg->param);

      /* verify connection is open */
      if (pCcb->connId != DM_CONN_ID_NONE)
   1b1ec:	4a09      	ldr	r2, [pc, #36]	; (1b214 <SmpDmEncryptInd+0x2c>)
  return &smpCb.ccb[connId - 1];
   1b1ee:	3b01      	subs	r3, #1
  pMsg->event = (pMsg->status == HCI_SUCCESS) ?
   1b1f0:	2900      	cmp	r1, #0
      if (pCcb->connId != DM_CONN_ID_NONE)
   1b1f2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
  pMsg->event = (pMsg->status == HCI_SUCCESS) ?
   1b1f6:	bf0c      	ite	eq
   1b1f8:	2108      	moveq	r1, #8
   1b1fa:	2109      	movne	r1, #9
      if (pCcb->connId != DM_CONN_ID_NONE)
   1b1fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  pMsg->event = (pMsg->status == HCI_SUCCESS) ?
   1b200:	7081      	strb	r1, [r0, #2]
      if (pCcb->connId != DM_CONN_ID_NONE)
   1b202:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
   1b206:	b11a      	cbz	r2, 1b210 <SmpDmEncryptInd+0x28>
            }
        }
        else
        {
          /* send to state machine */
          smpSmExecute(pCcb, (smpMsg_t *) pMsg);
   1b208:	4601      	mov	r1, r0
   1b20a:	4618      	mov	r0, r3
   1b20c:	f7ff b9c8 	b.w	1a5a0 <smpSmExecute>
}
   1b210:	4770      	bx	lr
   1b212:	bf00      	nop
   1b214:	10005bfc 	.word	0x10005bfc

0001b218 <smpGetScSecLevel>:
  if (pCcb->auth & SMP_AUTH_MITM_FLAG)
   1b218:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   1b21c:	075b      	lsls	r3, r3, #29
   1b21e:	d50b      	bpl.n	1b238 <smpGetScSecLevel+0x20>
    if (WSF_MIN(pCcb->pairReq[SMP_MAXKEY_POS], pCcb->pairRsp[SMP_MAXKEY_POS]) == SMP_KEY_SIZE_MAX)
   1b220:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   1b224:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
   1b228:	4293      	cmp	r3, r2
   1b22a:	bf28      	it	cs
   1b22c:	4613      	movcs	r3, r2
      secLevel = DM_SEC_LEVEL_ENC_AUTH;
   1b22e:	2b10      	cmp	r3, #16
   1b230:	bf0c      	ite	eq
   1b232:	2003      	moveq	r0, #3
   1b234:	2002      	movne	r0, #2
   1b236:	4770      	bx	lr
    secLevel = DM_SEC_LEVEL_ENC;
   1b238:	2001      	movs	r0, #1
}
   1b23a:	4770      	bx	lr

0001b23c <SmpDmGetStk>:
{
   1b23c:	b430      	push	{r4, r5}
  if (smpCb.lescSupported && pCcb->pScCcb->lescEnabled && (pCcb->pScCcb->pLtk != NULL))
   1b23e:	4b1f      	ldr	r3, [pc, #124]	; (1b2bc <SmpDmGetStk+0x80>)
   1b240:	f893 20ec 	ldrb.w	r2, [r3, #236]	; 0xec
  return &smpCb.ccb[connId - 1];
   1b244:	3801      	subs	r0, #1
  if (smpCb.lescSupported && pCcb->pScCcb->lescEnabled && (pCcb->pScCcb->pLtk != NULL))
   1b246:	b98a      	cbnz	r2, 1b26c <SmpDmGetStk+0x30>
   1b248:	00c2      	lsls	r2, r0, #3
  else if (pCcb->pScr != NULL)
   1b24a:	4410      	add	r0, r2
   1b24c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   1b250:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1b252:	b148      	cbz	r0, 1b268 <SmpDmGetStk+0x2c>
    *pSecLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ? DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
   1b254:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   1b258:	f012 0f04 	tst.w	r2, #4
   1b25c:	bf14      	ite	ne
   1b25e:	2202      	movne	r2, #2
   1b260:	2201      	moveq	r2, #1
   1b262:	700a      	strb	r2, [r1, #0]
    return pCcb->pScr->buf.b3;
   1b264:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1b266:	3020      	adds	r0, #32
}
   1b268:	bc30      	pop	{r4, r5}
   1b26a:	4770      	bx	lr
  if (smpCb.lescSupported && pCcb->pScCcb->lescEnabled && (pCcb->pScCcb->pLtk != NULL))
   1b26c:	eb00 0cc0 	add.w	ip, r0, r0, lsl #3
   1b270:	eb03 0ccc 	add.w	ip, r3, ip, lsl #3
   1b274:	00c2      	lsls	r2, r0, #3
   1b276:	f8dc 4044 	ldr.w	r4, [ip, #68]	; 0x44
   1b27a:	7825      	ldrb	r5, [r4, #0]
   1b27c:	2d00      	cmp	r5, #0
   1b27e:	d0e4      	beq.n	1b24a <SmpDmGetStk+0xe>
   1b280:	69a4      	ldr	r4, [r4, #24]
   1b282:	2c00      	cmp	r4, #0
   1b284:	d0e1      	beq.n	1b24a <SmpDmGetStk+0xe>
  if (pCcb->auth & SMP_AUTH_MITM_FLAG)
   1b286:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
   1b28a:	0764      	lsls	r4, r4, #29
   1b28c:	d513      	bpl.n	1b2b6 <SmpDmGetStk+0x7a>
    if (WSF_MIN(pCcb->pairReq[SMP_MAXKEY_POS], pCcb->pairRsp[SMP_MAXKEY_POS]) == SMP_KEY_SIZE_MAX)
   1b28e:	f89c 4024 	ldrb.w	r4, [ip, #36]	; 0x24
   1b292:	f89c 502b 	ldrb.w	r5, [ip, #43]	; 0x2b
   1b296:	42ac      	cmp	r4, r5
   1b298:	bf28      	it	cs
   1b29a:	462c      	movcs	r4, r5
      secLevel = DM_SEC_LEVEL_ENC_AUTH;
   1b29c:	2c10      	cmp	r4, #16
   1b29e:	bf0c      	ite	eq
   1b2a0:	2403      	moveq	r4, #3
   1b2a2:	2402      	movne	r4, #2
    return pCcb->pScCcb->pLtk->ltk_t;
   1b2a4:	4410      	add	r0, r2
   1b2a6:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    *pSecLevel = smpGetScSecLevel(pCcb);
   1b2aa:	700c      	strb	r4, [r1, #0]
    return pCcb->pScCcb->pLtk->ltk_t;
   1b2ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1b2ae:	6998      	ldr	r0, [r3, #24]
}
   1b2b0:	bc30      	pop	{r4, r5}
    return pCcb->pScCcb->pLtk->ltk_t;
   1b2b2:	3010      	adds	r0, #16
}
   1b2b4:	4770      	bx	lr
    secLevel = DM_SEC_LEVEL_ENC;
   1b2b6:	2401      	movs	r4, #1
   1b2b8:	e7f4      	b.n	1b2a4 <SmpDmGetStk+0x68>
   1b2ba:	bf00      	nop
   1b2bc:	10005bfc 	.word	0x10005bfc

0001b2c0 <SmpHandlerInit>:
{
   1b2c0:	b570      	push	{r4, r5, r6, lr}
  smpCb.handlerId = handlerId;
   1b2c2:	4c14      	ldr	r4, [pc, #80]	; (1b314 <SmpHandlerInit+0x54>)
{
   1b2c4:	4605      	mov	r5, r0
  smpCb.handlerId = handlerId;
   1b2c6:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
  SmpDbInit();
   1b2ca:	f7ff fac3 	bl	1a854 <SmpDbInit>
    pCcb->rspTimer.msg.param = i + 1;  /* param stores the conn id */
   1b2ce:	2202      	movs	r2, #2
   1b2d0:	2601      	movs	r6, #1
   1b2d2:	2303      	movs	r3, #3
   1b2d4:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    pCcb->waitTimer.msg.param = i + 1;  /* param stores the conn id */
   1b2d8:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
  L2cRegister(L2C_CID_SMP, smpL2cDataCback, smpL2cCtrlCback);
   1b2dc:	490e      	ldr	r1, [pc, #56]	; (1b318 <SmpHandlerInit+0x58>)
   1b2de:	4a0f      	ldr	r2, [pc, #60]	; (1b31c <SmpHandlerInit+0x5c>)
    pCcb->rspTimer.handlerId = handlerId;
   1b2e0:	7325      	strb	r5, [r4, #12]
  L2cRegister(L2C_CID_SMP, smpL2cDataCback, smpL2cCtrlCback);
   1b2e2:	2006      	movs	r0, #6
    pCcb->rspTimer.msg.param = i + 1;  /* param stores the conn id */
   1b2e4:	8126      	strh	r6, [r4, #8]
    pCcb->waitTimer.handlerId = handlerId;
   1b2e6:	7725      	strb	r5, [r4, #28]
    pCcb->waitTimer.msg.param = i + 1;  /* param stores the conn id */
   1b2e8:	8326      	strh	r6, [r4, #24]
    pCcb->rspTimer.handlerId = handlerId;
   1b2ea:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
    pCcb->waitTimer.handlerId = handlerId;
   1b2ee:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
    pCcb->rspTimer.handlerId = handlerId;
   1b2f2:	f884 509c 	strb.w	r5, [r4, #156]	; 0x9c
    pCcb->rspTimer.msg.param = i + 1;  /* param stores the conn id */
   1b2f6:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    pCcb->waitTimer.handlerId = handlerId;
   1b2fa:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
    pCcb->waitTimer.msg.param = i + 1;  /* param stores the conn id */
   1b2fe:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
  L2cRegister(L2C_CID_SMP, smpL2cDataCback, smpL2cCtrlCback);
   1b302:	f7f5 fa6b 	bl	107dc <L2cRegister>
  DmConnRegister(DM_CLIENT_ID_SMP, smpDmConnCback);
   1b306:	4630      	mov	r0, r6
   1b308:	4905      	ldr	r1, [pc, #20]	; (1b320 <SmpHandlerInit+0x60>)
}
   1b30a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  DmConnRegister(DM_CLIENT_ID_SMP, smpDmConnCback);
   1b30e:	f7fd b999 	b.w	18644 <DmConnRegister>
   1b312:	bf00      	nop
   1b314:	10005bfc 	.word	0x10005bfc
   1b318:	0001ab81 	.word	0x0001ab81
   1b31c:	0001ad39 	.word	0x0001ad39
   1b320:	0001ac21 	.word	0x0001ac21

0001b324 <SmpHandler>:
  if (pMsg != NULL)
   1b324:	2900      	cmp	r1, #0
   1b326:	d046      	beq.n	1b3b6 <SmpHandler+0x92>
    if (pMsg->event == SMP_DB_SERVICE_IND)
   1b328:	788b      	ldrb	r3, [r1, #2]
   1b32a:	2b1f      	cmp	r3, #31
   1b32c:	d041      	beq.n	1b3b2 <SmpHandler+0x8e>
{
   1b32e:	b510      	push	{r4, lr}
      if (pMsg->event == SMP_MSG_WSF_CMAC_CMPL)
   1b330:	2b1c      	cmp	r3, #28
{
   1b332:	b084      	sub	sp, #16
      if (pMsg->event == SMP_MSG_WSF_CMAC_CMPL)
   1b334:	d035      	beq.n	1b3a2 <SmpHandler+0x7e>
  return &smpCb.ccb[connId - 1];
   1b336:	7808      	ldrb	r0, [r1, #0]
   1b338:	4b1f      	ldr	r3, [pc, #124]	; (1b3b8 <SmpHandler+0x94>)
   1b33a:	3801      	subs	r0, #1
   1b33c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   1b340:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
      if (pCcb->connId != DM_CONN_ID_NONE)
   1b344:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
   1b348:	b1cb      	cbz	r3, 1b37e <SmpHandler+0x5a>
        if (pMsg->event == SMP_MSG_WSF_AES_CMPL && pCcb->token != pMsg->status)
   1b34a:	788b      	ldrb	r3, [r1, #2]
   1b34c:	2b0b      	cmp	r3, #11
   1b34e:	d123      	bne.n	1b398 <SmpHandler+0x74>
   1b350:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
   1b354:	78ca      	ldrb	r2, [r1, #3]
   1b356:	4293      	cmp	r3, r2
   1b358:	d01e      	beq.n	1b398 <SmpHandler+0x74>
            wsfHandlerId_t  handlerId = 0;
   1b35a:	2400      	movs	r4, #0
            SMP_TRACE_WARN2("AES token mismatch: %d %d", pCcb->token, pMsg->status);
   1b35c:	4817      	ldr	r0, [pc, #92]	; (1b3bc <SmpHandler+0x98>)
            wsfHandlerId_t  handlerId = 0;
   1b35e:	f88d 400f 	strb.w	r4, [sp, #15]
            SMP_TRACE_WARN2("AES token mismatch: %d %d", pCcb->token, pMsg->status);
   1b362:	4619      	mov	r1, r3
            while((pBuf=WsfMsgDeq(&secCb.aesEncQueue, &handlerId))!=NULL)
   1b364:	4c16      	ldr	r4, [pc, #88]	; (1b3c0 <SmpHandler+0x9c>)
            SMP_TRACE_WARN2("AES token mismatch: %d %d", pCcb->token, pMsg->status);
   1b366:	f7f8 fdd5 	bl	13f14 <WsfTrace>
            while((pBuf=WsfMsgDeq(&secCb.aesEncQueue, &handlerId))!=NULL)
   1b36a:	e001      	b.n	1b370 <SmpHandler+0x4c>
                WsfMsgFree(pBuf);
   1b36c:	f7f8 fa5a 	bl	13824 <WsfMsgFree>
            while((pBuf=WsfMsgDeq(&secCb.aesEncQueue, &handlerId))!=NULL)
   1b370:	f10d 010f 	add.w	r1, sp, #15
   1b374:	4620      	mov	r0, r4
   1b376:	f7f8 fa71 	bl	1385c <WsfMsgDeq>
   1b37a:	2800      	cmp	r0, #0
   1b37c:	d1f6      	bne.n	1b36c <SmpHandler+0x48>
  /* Handle events */
  else if (event)
  {

  }
}
   1b37e:	b004      	add	sp, #16
   1b380:	bd10      	pop	{r4, pc}
  return &smpCb.ccb[connId - 1];
   1b382:	780b      	ldrb	r3, [r1, #0]
      if (pCcb->connId != DM_CONN_ID_NONE)
   1b384:	480c      	ldr	r0, [pc, #48]	; (1b3b8 <SmpHandler+0x94>)
  return &smpCb.ccb[connId - 1];
   1b386:	3b01      	subs	r3, #1
      if (pCcb->connId != DM_CONN_ID_NONE)
   1b388:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1b38c:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1b390:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
   1b394:	2b00      	cmp	r3, #0
   1b396:	d0f2      	beq.n	1b37e <SmpHandler+0x5a>
}
   1b398:	b004      	add	sp, #16
   1b39a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          smpSmExecute(pCcb, (smpMsg_t *) pMsg);
   1b39e:	f7ff b8ff 	b.w	1a5a0 <smpSmExecute>
        if (pCmac->pPlainText)
   1b3a2:	6888      	ldr	r0, [r1, #8]
   1b3a4:	2800      	cmp	r0, #0
   1b3a6:	d0ec      	beq.n	1b382 <SmpHandler+0x5e>
   1b3a8:	9101      	str	r1, [sp, #4]
          WsfBufFree(pCmac->pPlainText);
   1b3aa:	f7f8 fa03 	bl	137b4 <WsfBufFree>
   1b3ae:	9901      	ldr	r1, [sp, #4]
   1b3b0:	e7c1      	b.n	1b336 <SmpHandler+0x12>
      SmpDbService();
   1b3b2:	f7ff baf3 	b.w	1a99c <SmpDbService>
   1b3b6:	4770      	bx	lr
   1b3b8:	10005bfc 	.word	0x10005bfc
   1b3bc:	000254c8 	.word	0x000254c8
   1b3c0:	10004070 	.word	0x10004070

0001b3c4 <smpScCatInitiatorBdAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static uint8_t *smpScCatInitiatorBdAddr(smpCcb_t *pCcb, uint8_t *pBuf)
{
   1b3c4:	b570      	push	{r4, r5, r6, lr}
   1b3c6:	4606      	mov	r6, r0
  dmConnCcb_t *pDmCcb = dmConnCcbById(pCcb->connId);
   1b3c8:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
{
   1b3cc:	460c      	mov	r4, r1
  dmConnCcb_t *pDmCcb = dmConnCcbById(pCcb->connId);
   1b3ce:	f7fd f85d 	bl	1848c <dmConnCcbById>

  if (pDmCcb)
   1b3d2:	b318      	cbz	r0, 1b41c <smpScCatInitiatorBdAddr+0x58>
  {
    if (pCcb->initiator)
   1b3d4:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
   1b3d8:	4605      	mov	r5, r0
   1b3da:	b17b      	cbz	r3, 1b3fc <smpScCatInitiatorBdAddr+0x38>
    {
      /* if local device's using RPA */
      if (!BdaIsZeros(pDmCcb->localRpa))
   1b3dc:	f100 061a 	add.w	r6, r0, #26
   1b3e0:	4630      	mov	r0, r6
   1b3e2:	f000 ffcb 	bl	1c37c <BdaIsZeros>
   1b3e6:	b9d8      	cbnz	r0, 1b420 <smpScCatInitiatorBdAddr+0x5c>
    else
    {
      /* if peer device's using RPA */
      if (!BdaIsZeros(pDmCcb->peerRpa))
      {
        *pBuf++ = DM_ADDR_RANDOM;
   1b3e8:	2301      	movs	r3, #1
   1b3ea:	f804 3b01 	strb.w	r3, [r4], #1
        WStrReverseCpy(pBuf, pDmCcb->peerRpa, BDA_ADDR_LEN);
   1b3ee:	2206      	movs	r2, #6
   1b3f0:	4631      	mov	r1, r6
   1b3f2:	4620      	mov	r0, r4
   1b3f4:	f001 f84c 	bl	1c490 <WStrReverseCpy>
        *pBuf++ = pDmCcb->peerAddrType;
        WStrReverseCpy(pBuf, pDmCcb->peerAddr, BDA_ADDR_LEN);
      }
    }

    pBuf += BDA_ADDR_LEN;
   1b3f8:	1da0      	adds	r0, r4, #6
  }

  return pBuf;
}
   1b3fa:	bd70      	pop	{r4, r5, r6, pc}
      if (!BdaIsZeros(pDmCcb->peerRpa))
   1b3fc:	f100 0620 	add.w	r6, r0, #32
   1b400:	4630      	mov	r0, r6
   1b402:	f000 ffbb 	bl	1c37c <BdaIsZeros>
   1b406:	2800      	cmp	r0, #0
   1b408:	d0ee      	beq.n	1b3e8 <smpScCatInitiatorBdAddr+0x24>
        *pBuf++ = pDmCcb->peerAddrType;
   1b40a:	7ceb      	ldrb	r3, [r5, #19]
   1b40c:	f804 3b01 	strb.w	r3, [r4], #1
        WStrReverseCpy(pBuf, pDmCcb->peerAddr, BDA_ADDR_LEN);
   1b410:	2206      	movs	r2, #6
   1b412:	4629      	mov	r1, r5
   1b414:	4620      	mov	r0, r4
   1b416:	f001 f83b 	bl	1c490 <WStrReverseCpy>
   1b41a:	e7ed      	b.n	1b3f8 <smpScCatInitiatorBdAddr+0x34>
   1b41c:	4620      	mov	r0, r4
}
   1b41e:	bd70      	pop	{r4, r5, r6, pc}
        *pBuf++ = pDmCcb->localAddrType;
   1b420:	7d2b      	ldrb	r3, [r5, #20]
   1b422:	f804 3b01 	strb.w	r3, [r4], #1
        WStrReverseCpy(pBuf, pDmCcb->localAddr, BDA_ADDR_LEN);
   1b426:	2206      	movs	r2, #6
   1b428:	18a9      	adds	r1, r5, r2
   1b42a:	4620      	mov	r0, r4
   1b42c:	f001 f830 	bl	1c490 <WStrReverseCpy>
   1b430:	e7e2      	b.n	1b3f8 <smpScCatInitiatorBdAddr+0x34>
   1b432:	bf00      	nop

0001b434 <smpScCatResponderBdAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static uint8_t *smpScCatResponderBdAddr(smpCcb_t *pCcb, uint8_t *pBuf)
{
   1b434:	b570      	push	{r4, r5, r6, lr}
   1b436:	4606      	mov	r6, r0
  dmConnCcb_t *pDmCcb = dmConnCcbById(pCcb->connId);
   1b438:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
{
   1b43c:	460c      	mov	r4, r1
  dmConnCcb_t *pDmCcb = dmConnCcbById(pCcb->connId);
   1b43e:	f7fd f825 	bl	1848c <dmConnCcbById>

  if (pDmCcb)
   1b442:	b318      	cbz	r0, 1b48c <smpScCatResponderBdAddr+0x58>
  {
    if (pCcb->initiator)
   1b444:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
   1b448:	4605      	mov	r5, r0
   1b44a:	b17b      	cbz	r3, 1b46c <smpScCatResponderBdAddr+0x38>
    {
      /* if peer device's using RPA */
      if (!BdaIsZeros(pDmCcb->peerRpa))
   1b44c:	f100 0620 	add.w	r6, r0, #32
   1b450:	4630      	mov	r0, r6
   1b452:	f000 ff93 	bl	1c37c <BdaIsZeros>
   1b456:	b9d8      	cbnz	r0, 1b490 <smpScCatResponderBdAddr+0x5c>
    else
    {
      /* if local device's using RPA */
      if (!BdaIsZeros(pDmCcb->localRpa))
      {
        *pBuf++ = DM_ADDR_RANDOM;
   1b458:	2301      	movs	r3, #1
   1b45a:	f804 3b01 	strb.w	r3, [r4], #1
        WStrReverseCpy(pBuf, pDmCcb->localRpa, BDA_ADDR_LEN);
   1b45e:	2206      	movs	r2, #6
   1b460:	4631      	mov	r1, r6
   1b462:	4620      	mov	r0, r4
   1b464:	f001 f814 	bl	1c490 <WStrReverseCpy>
        *pBuf++ = pDmCcb->localAddrType;
        WStrReverseCpy(pBuf, pDmCcb->localAddr, BDA_ADDR_LEN);
      }
    }

    pBuf += BDA_ADDR_LEN;
   1b468:	1da0      	adds	r0, r4, #6
  }

  return pBuf;
}
   1b46a:	bd70      	pop	{r4, r5, r6, pc}
      if (!BdaIsZeros(pDmCcb->localRpa))
   1b46c:	f100 061a 	add.w	r6, r0, #26
   1b470:	4630      	mov	r0, r6
   1b472:	f000 ff83 	bl	1c37c <BdaIsZeros>
   1b476:	2800      	cmp	r0, #0
   1b478:	d0ee      	beq.n	1b458 <smpScCatResponderBdAddr+0x24>
        *pBuf++ = pDmCcb->localAddrType;
   1b47a:	7d2b      	ldrb	r3, [r5, #20]
   1b47c:	f804 3b01 	strb.w	r3, [r4], #1
        WStrReverseCpy(pBuf, pDmCcb->localAddr, BDA_ADDR_LEN);
   1b480:	2206      	movs	r2, #6
   1b482:	18a9      	adds	r1, r5, r2
   1b484:	4620      	mov	r0, r4
   1b486:	f001 f803 	bl	1c490 <WStrReverseCpy>
   1b48a:	e7ed      	b.n	1b468 <smpScCatResponderBdAddr+0x34>
   1b48c:	4620      	mov	r0, r4
}
   1b48e:	bd70      	pop	{r4, r5, r6, pc}
        *pBuf++ = pDmCcb->peerAddrType;
   1b490:	7ceb      	ldrb	r3, [r5, #19]
   1b492:	f804 3b01 	strb.w	r3, [r4], #1
        WStrReverseCpy(pBuf, pDmCcb->peerAddr, BDA_ADDR_LEN);
   1b496:	2206      	movs	r2, #6
   1b498:	4629      	mov	r1, r5
   1b49a:	4620      	mov	r0, r4
   1b49c:	f000 fff8 	bl	1c490 <WStrReverseCpy>
   1b4a0:	e7e2      	b.n	1b468 <smpScCatResponderBdAddr+0x34>
   1b4a2:	bf00      	nop

0001b4a4 <smpScProcPairing>:
 *
 *  \return TRUE on success, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t smpScProcPairing(smpCcb_t *pCcb, uint8_t *pOob, uint8_t *pDisplay)
{
   1b4a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool_t          justWorks = TRUE;
  uint8_t         localAuth;
  wsfMsgHdr_t     hdr;

  *pDisplay = FALSE;
   1b4a6:	2300      	movs	r3, #0
   1b4a8:	7013      	strb	r3, [r2, #0]
  *pOob = SMP_OOB_DATA_NONE;
   1b4aa:	700b      	strb	r3, [r1, #0]

  /* check for LE Secure Connections */
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
   1b4ac:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
{
   1b4b0:	4604      	mov	r4, r0
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
   1b4b2:	f013 0008 	ands.w	r0, r3, #8
{
   1b4b6:	b085      	sub	sp, #20
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
   1b4b8:	d076      	beq.n	1b5a8 <smpScProcPairing+0x104>
   1b4ba:	f894 502a 	ldrb.w	r5, [r4, #42]	; 0x2a
   1b4be:	072d      	lsls	r5, r5, #28
   1b4c0:	d572      	bpl.n	1b5a8 <smpScProcPairing+0x104>
      (pCcb->pairRsp[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG))
  {
    /* if one or both devices have OOB authentication data */
    if ((pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT) ||
   1b4c2:	f894 5022 	ldrb.w	r5, [r4, #34]	; 0x22
   1b4c6:	2d01      	cmp	r5, #1
   1b4c8:	f000 80ab 	beq.w	1b622 <smpScProcPairing+0x17e>
   1b4cc:	f894 5029 	ldrb.w	r5, [r4, #41]	; 0x29
   1b4d0:	2d01      	cmp	r5, #1
   1b4d2:	f000 80a6 	beq.w	1b622 <smpScProcPairing+0x17e>
      justWorks = FALSE;
    }
  }

  /* if OOB authentication data not present and either device has set MITM option */
  if ((*pOob == SMP_OOB_DATA_NONE)                           &&
   1b4d6:	075d      	lsls	r5, r3, #29
   1b4d8:	d56c      	bpl.n	1b5b4 <smpScProcPairing+0x110>
      ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG) ||
       (pCcb->pairRsp[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG)))
  {
    /* check for compatible I/O settings */
    if ((pCcb->pairReq[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* initiator has i/o and */
   1b4da:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
   1b4de:	2d03      	cmp	r5, #3
   1b4e0:	d06c      	beq.n	1b5bc <smpScProcPairing+0x118>
        (pCcb->pairRsp[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* responder has i/o and */
   1b4e2:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
    if ((pCcb->pairReq[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* initiator has i/o and */
   1b4e6:	2e03      	cmp	r6, #3
   1b4e8:	d068      	beq.n	1b5bc <smpScProcPairing+0x118>
        (pCcb->pairRsp[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* responder has i/o and */
   1b4ea:	2d01      	cmp	r5, #1
   1b4ec:	f240 80c7 	bls.w	1b67e <smpScProcPairing+0x1da>
      justWorks = FALSE;

      /* check if pin should be displayed (as initiator) */
      *pDisplay =
        ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||     /* initiator is display only or */
         (pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO) ||   /* initiator is display y/n  or */
   1b4f0:	2d04      	cmp	r5, #4
   1b4f2:	f000 8128 	beq.w	1b746 <smpScProcPairing+0x2a2>
   1b4f6:	2300      	movs	r3, #0
   1b4f8:	4618      	mov	r0, r3
      *pDisplay =
   1b4fa:	7010      	strb	r0, [r2, #0]
         ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_DISP) &&     /* initiator is key/display and */
          (pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY ||      /* responder is key only or key/display */
           pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_DISP)));

      /* invert display setting if we are not initiator and both are not key only */
      if (!(pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY &&
   1b4fc:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
   1b500:	2802      	cmp	r0, #2
   1b502:	f000 811a 	beq.w	1b73a <smpScProcPairing+0x296>
            pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_ONLY))
      {
        *pDisplay ^= !pCcb->initiator;
   1b506:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   1b50a:	2800      	cmp	r0, #0
   1b50c:	bf08      	it	eq
   1b50e:	f083 0301 	eoreq.w	r3, r3, #1
   1b512:	7013      	strb	r3, [r2, #0]
      }
    }
  }

  /* Check for Secure Connections */
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
   1b514:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
      justWorks = FALSE;
   1b518:	2500      	movs	r5, #0
   1b51a:	f003 0008 	and.w	r0, r3, #8
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
   1b51e:	2800      	cmp	r0, #0
   1b520:	d04f      	beq.n	1b5c2 <smpScProcPairing+0x11e>
      (pCcb->pairRsp[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG))
   1b522:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
   1b526:	0706      	lsls	r6, r0, #28
   1b528:	d54b      	bpl.n	1b5c2 <smpScProcPairing+0x11e>
  {
    if (smpCb.lescSupported == FALSE)
   1b52a:	4e94      	ldr	r6, [pc, #592]	; (1b77c <smpScProcPairing+0x2d8>)
   1b52c:	f896 60ec 	ldrb.w	r6, [r6, #236]	; 0xec
   1b530:	2e00      	cmp	r6, #0
   1b532:	d07e      	beq.n	1b632 <smpScProcPairing+0x18e>
      smpSmExecute(pCcb, (smpMsg_t *) &hdr);
      return FALSE;
    }
    else
    {
      pCcb->pScCcb->lescEnabled = TRUE;
   1b534:	6c66      	ldr	r6, [r4, #68]	; 0x44
   1b536:	f240 1c01 	movw	ip, #257	; 0x101
   1b53a:	f8a6 c000 	strh.w	ip, [r6]
      pCcb->pScCcb->authType = SMP_AUTH_TYPE_JUST_WORKS;
      pCcb->pScCcb->display = *pDisplay;
   1b53e:	7812      	ldrb	r2, [r2, #0]
   1b540:	7132      	strb	r2, [r6, #4]

      if (*pOob)
   1b542:	780a      	ldrb	r2, [r1, #0]
   1b544:	2a00      	cmp	r2, #0
   1b546:	f000 8088 	beq.w	1b65a <smpScProcPairing+0x1b6>
      {
        pCcb->pScCcb->authType = SMP_AUTH_TYPE_OOB;
   1b54a:	2302      	movs	r3, #2
   1b54c:	7073      	strb	r3, [r6, #1]
        }

      }
    }

    hdr.param = pCcb->connId;
   1b54e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
   1b552:	f8ad 300c 	strh.w	r3, [sp, #12]

    /* Allocate a scratch pad for Peer Key and CMAC calculations */
    if (SmpScAllocScratchBuffers(pCcb))
   1b556:	4620      	mov	r0, r4
   1b558:	f000 fc5e 	bl	1be18 <SmpScAllocScratchBuffers>
   1b55c:	2800      	cmp	r0, #0
   1b55e:	f040 8093 	bne.w	1b688 <smpScProcPairing+0x1e4>
      hdr.event = SMP_MSG_INT_LESC;
    }
    else
    {
      hdr.status = SMP_ERR_UNSPECIFIED;
      hdr.event = SMP_MSG_API_CANCEL_REQ;
   1b562:	f640 0303 	movw	r3, #2051	; 0x803
   1b566:	f8ad 300e 	strh.w	r3, [sp, #14]
    }

    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1b56a:	a903      	add	r1, sp, #12
   1b56c:	4620      	mov	r0, r4
   1b56e:	9101      	str	r1, [sp, #4]
   1b570:	4e83      	ldr	r6, [pc, #524]	; (1b780 <smpScProcPairing+0x2dc>)
   1b572:	f7ff f815 	bl	1a5a0 <smpSmExecute>
   1b576:	9901      	ldr	r1, [sp, #4]
    hdr.param = pCcb->connId;
    hdr.event = SMP_MSG_INT_LEGACY;
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
  }

  if (!justWorks)
   1b578:	2d00      	cmp	r5, #0
   1b57a:	d139      	bne.n	1b5f0 <smpScProcPairing+0x14c>
  {
    /* set auth flags with mitm bit set */
    pCcb->auth = (pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS]) | SMP_AUTH_MITM_FLAG;
   1b57c:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1b580:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    pCcb->auth = pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS] & ~SMP_AUTH_MITM_FLAG;
  }

  /* if we ended up with 'just works' but the device configuration requires authentication */
  localAuth = (pCcb->initiator) ? pCcb->pairReq[SMP_AUTHREQ_POS] : pCcb->pairRsp[SMP_AUTHREQ_POS];
  if (justWorks && (pSmpCfg->auth & localAuth & SMP_AUTH_MITM_FLAG))
   1b584:	6832      	ldr	r2, [r6, #0]
    pCcb->auth = (pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS]) | SMP_AUTH_MITM_FLAG;
   1b586:	4003      	ands	r3, r0
   1b588:	f043 0304 	orr.w	r3, r3, #4
   1b58c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    return FALSE;
  }

  /* if max encryption key is less than our minimum */
  if (pCcb->pairReq[SMP_MAXKEY_POS] < pSmpCfg->minKeyLen ||
   1b590:	7953      	ldrb	r3, [r2, #5]
   1b592:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   1b596:	429a      	cmp	r2, r3
   1b598:	d35a      	bcc.n	1b650 <smpScProcPairing+0x1ac>
   1b59a:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
   1b59e:	429a      	cmp	r2, r3
   1b5a0:	d356      	bcc.n	1b650 <smpScProcPairing+0x1ac>
    hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    return FALSE;
  }

  return TRUE;
   1b5a2:	2001      	movs	r0, #1
}
   1b5a4:	b005      	add	sp, #20
   1b5a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT) &&
   1b5a8:	f894 5022 	ldrb.w	r5, [r4, #34]	; 0x22
   1b5ac:	2d01      	cmp	r5, #1
   1b5ae:	d08d      	beq.n	1b4cc <smpScProcPairing+0x28>
  if ((*pOob == SMP_OOB_DATA_NONE)                           &&
   1b5b0:	075d      	lsls	r5, r3, #29
   1b5b2:	d492      	bmi.n	1b4da <smpScProcPairing+0x36>
      ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG) ||
   1b5b4:	f894 502a 	ldrb.w	r5, [r4, #42]	; 0x2a
   1b5b8:	076f      	lsls	r7, r5, #29
   1b5ba:	d48e      	bmi.n	1b4da <smpScProcPairing+0x36>
   1b5bc:	2501      	movs	r5, #1
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
   1b5be:	2800      	cmp	r0, #0
   1b5c0:	d1af      	bne.n	1b522 <smpScProcPairing+0x7e>
  else if ((pSmpCfg->auth & SMP_AUTH_SC_FLAG) != 0)
   1b5c2:	4e6f      	ldr	r6, [pc, #444]	; (1b780 <smpScProcPairing+0x2dc>)
   1b5c4:	6833      	ldr	r3, [r6, #0]
   1b5c6:	7a1b      	ldrb	r3, [r3, #8]
   1b5c8:	f013 0308 	ands.w	r3, r3, #8
   1b5cc:	d131      	bne.n	1b632 <smpScProcPairing+0x18e>
    pCcb->pScCcb->lescEnabled = FALSE;
   1b5ce:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1b5d0:	7013      	strb	r3, [r2, #0]
    hdr.param = pCcb->connId;
   1b5d2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
   1b5d6:	f8ad 300c 	strh.w	r3, [sp, #12]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1b5da:	a903      	add	r1, sp, #12
    hdr.event = SMP_MSG_INT_LEGACY;
   1b5dc:	2312      	movs	r3, #18
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1b5de:	4620      	mov	r0, r4
   1b5e0:	9101      	str	r1, [sp, #4]
    hdr.event = SMP_MSG_INT_LEGACY;
   1b5e2:	f88d 300e 	strb.w	r3, [sp, #14]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1b5e6:	f7fe ffdb 	bl	1a5a0 <smpSmExecute>
   1b5ea:	9901      	ldr	r1, [sp, #4]
  if (!justWorks)
   1b5ec:	2d00      	cmp	r5, #0
   1b5ee:	d0c5      	beq.n	1b57c <smpScProcPairing+0xd8>
    pCcb->auth = pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS] & ~SMP_AUTH_MITM_FLAG;
   1b5f0:	f894 5023 	ldrb.w	r5, [r4, #35]	; 0x23
   1b5f4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  if (justWorks && (pSmpCfg->auth & localAuth & SMP_AUTH_MITM_FLAG))
   1b5f8:	6832      	ldr	r2, [r6, #0]
    pCcb->auth = pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS] & ~SMP_AUTH_MITM_FLAG;
   1b5fa:	ea05 0003 	and.w	r0, r5, r3
   1b5fe:	f020 0004 	bic.w	r0, r0, #4
   1b602:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  localAuth = (pCcb->initiator) ? pCcb->pairReq[SMP_AUTHREQ_POS] : pCcb->pairRsp[SMP_AUTHREQ_POS];
   1b606:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   1b60a:	2800      	cmp	r0, #0
   1b60c:	bf18      	it	ne
   1b60e:	462b      	movne	r3, r5
  if (justWorks && (pSmpCfg->auth & localAuth & SMP_AUTH_MITM_FLAG))
   1b610:	7a10      	ldrb	r0, [r2, #8]
   1b612:	4003      	ands	r3, r0
   1b614:	075e      	lsls	r6, r3, #29
   1b616:	d5bb      	bpl.n	1b590 <smpScProcPairing+0xec>
    hdr.param = pCcb->connId;
   1b618:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   1b61c:	f240 3303 	movw	r3, #771	; 0x303
   1b620:	e00c      	b.n	1b63c <smpScProcPairing+0x198>
      *pOob = SMP_OOB_DATA_PRESENT;
   1b622:	2301      	movs	r3, #1
   1b624:	700b      	strb	r3, [r1, #0]
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
   1b626:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1b62a:	2500      	movs	r5, #0
   1b62c:	f003 0008 	and.w	r0, r3, #8
   1b630:	e775      	b.n	1b51e <smpScProcPairing+0x7a>
      hdr.param = pCcb->connId;
   1b632:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
      hdr.event = SMP_MSG_API_CANCEL_REQ;
   1b636:	f240 3303 	movw	r3, #771	; 0x303
      smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1b63a:	a903      	add	r1, sp, #12
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1b63c:	4620      	mov	r0, r4
    hdr.param = pCcb->connId;
   1b63e:	f8ad 200c 	strh.w	r2, [sp, #12]
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   1b642:	f8ad 300e 	strh.w	r3, [sp, #14]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1b646:	f7fe ffab 	bl	1a5a0 <smpSmExecute>
    return FALSE;
   1b64a:	2000      	movs	r0, #0
}
   1b64c:	b005      	add	sp, #20
   1b64e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdr.param = pCcb->connId;
   1b650:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   1b654:	f240 6303 	movw	r3, #1539	; 0x603
   1b658:	e7f0      	b.n	1b63c <smpScProcPairing+0x198>
      else if (justWorks == FALSE)
   1b65a:	2d00      	cmp	r5, #0
   1b65c:	d160      	bne.n	1b720 <smpScProcPairing+0x27c>
        pCcb->pScCcb->authType = SMP_AUTH_TYPE_PASSKEY;
   1b65e:	2203      	movs	r2, #3
   1b660:	7072      	strb	r2, [r6, #1]
        if (((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_DISP) &&
   1b662:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   1b666:	2a04      	cmp	r2, #4
   1b668:	d07b      	beq.n	1b762 <smpScProcPairing+0x2be>
              (pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_DISP))) ||
   1b66a:	2a01      	cmp	r2, #1
   1b66c:	f000 8082 	beq.w	1b774 <smpScProcPairing+0x2d0>
        else if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_KP_FLAG) &&
   1b670:	06db      	lsls	r3, r3, #27
   1b672:	d560      	bpl.n	1b736 <smpScProcPairing+0x292>
   1b674:	06c7      	lsls	r7, r0, #27
   1b676:	d55e      	bpl.n	1b736 <smpScProcPairing+0x292>
          pCcb->pScCcb->kpNotify = TRUE;
   1b678:	2301      	movs	r3, #1
   1b67a:	70b3      	strb	r3, [r6, #2]
   1b67c:	e767      	b.n	1b54e <smpScProcPairing+0xaa>
        !(((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||     /* both don't have display only */
   1b67e:	2e01      	cmp	r6, #1
   1b680:	d99c      	bls.n	1b5bc <smpScProcPairing+0x118>
   1b682:	2301      	movs	r3, #1
   1b684:	4618      	mov	r0, r3
   1b686:	e738      	b.n	1b4fa <smpScProcPairing+0x56>
      memcpy(pCcb->pScCcb->pLocalPublicKey->pubKeyX, DmSecGetEccKey()->pubKey_x, SMP_PUB_KEY_LEN);
   1b688:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1b68a:	68de      	ldr	r6, [r3, #12]
   1b68c:	f7fd fefa 	bl	19484 <DmSecGetEccKey>
   1b690:	6801      	ldr	r1, [r0, #0]
   1b692:	6842      	ldr	r2, [r0, #4]
   1b694:	6883      	ldr	r3, [r0, #8]
   1b696:	f8d0 c00c 	ldr.w	ip, [r0, #12]
   1b69a:	f8c6 c00c 	str.w	ip, [r6, #12]
   1b69e:	6031      	str	r1, [r6, #0]
   1b6a0:	6072      	str	r2, [r6, #4]
   1b6a2:	60b3      	str	r3, [r6, #8]
   1b6a4:	6901      	ldr	r1, [r0, #16]
   1b6a6:	6942      	ldr	r2, [r0, #20]
   1b6a8:	6983      	ldr	r3, [r0, #24]
   1b6aa:	f8d0 c01c 	ldr.w	ip, [r0, #28]
   1b6ae:	f8c6 c01c 	str.w	ip, [r6, #28]
   1b6b2:	6131      	str	r1, [r6, #16]
   1b6b4:	6172      	str	r2, [r6, #20]
   1b6b6:	61b3      	str	r3, [r6, #24]
      memcpy(pCcb->pScCcb->pLocalPublicKey->pubKeyY, DmSecGetEccKey()->pubKey_y, SMP_PUB_KEY_LEN);
   1b6b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1b6ba:	68df      	ldr	r7, [r3, #12]
   1b6bc:	f7fd fee2 	bl	19484 <DmSecGetEccKey>
   1b6c0:	6a06      	ldr	r6, [r0, #32]
   1b6c2:	6a41      	ldr	r1, [r0, #36]	; 0x24
   1b6c4:	6a82      	ldr	r2, [r0, #40]	; 0x28
   1b6c6:	f8d0 c02c 	ldr.w	ip, [r0, #44]	; 0x2c
   1b6ca:	f8c7 c02c 	str.w	ip, [r7, #44]	; 0x2c
   1b6ce:	623e      	str	r6, [r7, #32]
   1b6d0:	6279      	str	r1, [r7, #36]	; 0x24
   1b6d2:	62ba      	str	r2, [r7, #40]	; 0x28
   1b6d4:	6b06      	ldr	r6, [r0, #48]	; 0x30
   1b6d6:	6b41      	ldr	r1, [r0, #52]	; 0x34
   1b6d8:	6b82      	ldr	r2, [r0, #56]	; 0x38
   1b6da:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
   1b6de:	f8c7 c03c 	str.w	ip, [r7, #60]	; 0x3c
   1b6e2:	6379      	str	r1, [r7, #52]	; 0x34
   1b6e4:	63ba      	str	r2, [r7, #56]	; 0x38
   1b6e6:	633e      	str	r6, [r7, #48]	; 0x30
      memcpy(pCcb->pScCcb->pPrivateKey, DmSecGetEccKey()->privKey, SMP_PRIVATE_KEY_LEN);
   1b6e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1b6ea:	691e      	ldr	r6, [r3, #16]
   1b6ec:	f7fd feca 	bl	19484 <DmSecGetEccKey>
   1b6f0:	6c01      	ldr	r1, [r0, #64]	; 0x40
   1b6f2:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1b6f4:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1b6f6:	f8d0 c04c 	ldr.w	ip, [r0, #76]	; 0x4c
   1b6fa:	f8c6 c00c 	str.w	ip, [r6, #12]
   1b6fe:	6031      	str	r1, [r6, #0]
   1b700:	6072      	str	r2, [r6, #4]
   1b702:	60b3      	str	r3, [r6, #8]
   1b704:	6d42      	ldr	r2, [r0, #84]	; 0x54
   1b706:	6d01      	ldr	r1, [r0, #80]	; 0x50
   1b708:	6d83      	ldr	r3, [r0, #88]	; 0x58
   1b70a:	f8d0 c05c 	ldr.w	ip, [r0, #92]	; 0x5c
   1b70e:	6172      	str	r2, [r6, #20]
      hdr.event = SMP_MSG_INT_LESC;
   1b710:	2211      	movs	r2, #17
      memcpy(pCcb->pScCcb->pPrivateKey, DmSecGetEccKey()->privKey, SMP_PRIVATE_KEY_LEN);
   1b712:	f8c6 c01c 	str.w	ip, [r6, #28]
   1b716:	6131      	str	r1, [r6, #16]
   1b718:	61b3      	str	r3, [r6, #24]
      hdr.event = SMP_MSG_INT_LESC;
   1b71a:	f88d 200e 	strb.w	r2, [sp, #14]
   1b71e:	e724      	b.n	1b56a <smpScProcPairing+0xc6>
        if ((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_YES_NO) &&
   1b720:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1b724:	2b01      	cmp	r3, #1
   1b726:	d014      	beq.n	1b752 <smpScProcPairing+0x2ae>
        else if((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_NO_IN_NO_OUT) ||
   1b728:	2b03      	cmp	r3, #3
   1b72a:	d004      	beq.n	1b736 <smpScProcPairing+0x292>
             ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO) ||
   1b72c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
        else if((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_NO_IN_NO_OUT) ||
   1b730:	2b03      	cmp	r3, #3
   1b732:	f47f af0c 	bne.w	1b54e <smpScProcPairing+0xaa>
          justWorks = FALSE;
   1b736:	2500      	movs	r5, #0
   1b738:	e709      	b.n	1b54e <smpScProcPairing+0xaa>
      if (!(pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY &&
   1b73a:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
   1b73e:	2802      	cmp	r0, #2
   1b740:	f47f aee1 	bne.w	1b506 <smpScProcPairing+0x62>
   1b744:	e6e6      	b.n	1b514 <smpScProcPairing+0x70>
         ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_DISP) &&     /* initiator is key/display and */
   1b746:	2e02      	cmp	r6, #2
   1b748:	d09b      	beq.n	1b682 <smpScProcPairing+0x1de>
          (pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY ||      /* responder is key only or key/display */
   1b74a:	2e04      	cmp	r6, #4
   1b74c:	f47f aed3 	bne.w	1b4f6 <smpScProcPairing+0x52>
   1b750:	e797      	b.n	1b682 <smpScProcPairing+0x1de>
            (pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO))
   1b752:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
        if ((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_YES_NO) &&
   1b756:	2b01      	cmp	r3, #1
   1b758:	d1ea      	bne.n	1b730 <smpScProcPairing+0x28c>
          pCcb->pScCcb->authType = SMP_AUTH_TYPE_NUM_COMP;
   1b75a:	2304      	movs	r3, #4
   1b75c:	7073      	strb	r3, [r6, #1]
          justWorks = FALSE;
   1b75e:	4615      	mov	r5, r2
   1b760:	e6f5      	b.n	1b54e <smpScProcPairing+0xaa>
             ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO) ||
   1b762:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
        if (((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_DISP) &&
   1b766:	2a01      	cmp	r2, #1
   1b768:	d001      	beq.n	1b76e <smpScProcPairing+0x2ca>
            ((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_YES_NO) &&
   1b76a:	2a04      	cmp	r2, #4
   1b76c:	d180      	bne.n	1b670 <smpScProcPairing+0x1cc>
          pCcb->pScCcb->authType = SMP_AUTH_TYPE_NUM_COMP;
   1b76e:	2304      	movs	r3, #4
   1b770:	7073      	strb	r3, [r6, #1]
   1b772:	e6ec      	b.n	1b54e <smpScProcPairing+0xaa>
            ((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_YES_NO) &&
   1b774:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   1b778:	e7f7      	b.n	1b76a <smpScProcPairing+0x2c6>
   1b77a:	bf00      	nop
   1b77c:	10005bfc 	.word	0x10005bfc
   1b780:	10002b04 	.word	0x10002b04

0001b784 <smpScAuthReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScAuthReq(smpCcb_t *pCcb, uint8_t oob, uint8_t display)
{
   1b784:	b510      	push	{r4, lr}
    smpDmAuthRsp_t        authRsp;
    dmSecAuthReqIndEvt_t  authReq;
  } buf;

  /* if authenticated pairing */
  if (((!pCcb->pScCcb->lescEnabled) && (pCcb->auth & SMP_AUTH_MITM_FLAG )) ||
   1b786:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1b788:	781c      	ldrb	r4, [r3, #0]
{
   1b78a:	b086      	sub	sp, #24
  if (((!pCcb->pScCcb->lescEnabled) && (pCcb->auth & SMP_AUTH_MITM_FLAG )) ||
   1b78c:	b9bc      	cbnz	r4, 1b7be <smpScAuthReq+0x3a>
   1b78e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   1b792:	075b      	lsls	r3, r3, #29
   1b794:	d416      	bmi.n	1b7c4 <smpScAuthReq+0x40>
  }
  else
  {
    /* else use just works; send ourselves a auth rsp with all zero pin */
    buf.authRsp.hdr.param = pCcb->connId;
    buf.authRsp.hdr.event = SMP_MSG_API_AUTH_RSP;
   1b796:	2104      	movs	r1, #4
    buf.authRsp.authData[0] = 0;
   1b798:	2300      	movs	r3, #0
    buf.authRsp.hdr.param = pCcb->connId;
   1b79a:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
    buf.authRsp.hdr.event = SMP_MSG_API_AUTH_RSP;
   1b79e:	f88d 1002 	strb.w	r1, [sp, #2]
    buf.authRsp.authData[1] = 0;
    buf.authRsp.authData[2] = 0;
    buf.authRsp.authDataLen = SMP_PIN_LEN;
   1b7a2:	2203      	movs	r2, #3
    smpSmExecute(pCcb, (smpMsg_t *) &buf.authRsp);
   1b7a4:	4669      	mov	r1, sp
    buf.authRsp.hdr.param = pCcb->connId;
   1b7a6:	f8ad 4000 	strh.w	r4, [sp]
    buf.authRsp.authData[0] = 0;
   1b7aa:	f8ad 3004 	strh.w	r3, [sp, #4]
    buf.authRsp.authData[2] = 0;
   1b7ae:	f88d 3006 	strb.w	r3, [sp, #6]
    buf.authRsp.authDataLen = SMP_PIN_LEN;
   1b7b2:	f88d 2014 	strb.w	r2, [sp, #20]
    smpSmExecute(pCcb, (smpMsg_t *) &buf.authRsp);
   1b7b6:	f7fe fef3 	bl	1a5a0 <smpSmExecute>
  }
}
   1b7ba:	b006      	add	sp, #24
   1b7bc:	bd10      	pop	{r4, pc}
      ((pCcb->pScCcb->lescEnabled) && (pCcb->pScCcb->authType == SMP_AUTH_TYPE_OOB)))
   1b7be:	785b      	ldrb	r3, [r3, #1]
   1b7c0:	2b02      	cmp	r3, #2
   1b7c2:	d1e8      	bne.n	1b796 <smpScAuthReq+0x12>
    buf.authReq.hdr.param = pCcb->connId;
   1b7c4:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
   1b7c8:	f8ad 4000 	strh.w	r4, [sp]
    buf.authReq.hdr.event = DM_SEC_AUTH_REQ_IND;
   1b7cc:	232e      	movs	r3, #46	; 0x2e
    DmSmpCbackExec((dmEvt_t *) &buf.authReq);
   1b7ce:	4668      	mov	r0, sp
    buf.authReq.hdr.event = DM_SEC_AUTH_REQ_IND;
   1b7d0:	f88d 3002 	strb.w	r3, [sp, #2]
    buf.authReq.oob = oob;
   1b7d4:	f88d 1004 	strb.w	r1, [sp, #4]
    buf.authReq.display = display;
   1b7d8:	f88d 2005 	strb.w	r2, [sp, #5]
    DmSmpCbackExec((dmEvt_t *) &buf.authReq);
   1b7dc:	f7fd fda6 	bl	1932c <DmSmpCbackExec>
}
   1b7e0:	b006      	add	sp, #24
   1b7e2:	bd10      	pop	{r4, pc}

0001b7e4 <smpScActCleanup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActCleanup(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1b7e4:	b510      	push	{r4, lr}
   1b7e6:	4604      	mov	r4, r0
  smpActCleanup(pCcb, pMsg);
   1b7e8:	f7fe fbb8 	bl	19f5c <smpActCleanup>

  /* Free scratch buffers */
  SmpScFreeScratchBuffers(pCcb);
   1b7ec:	4620      	mov	r0, r4
}
   1b7ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SmpScFreeScratchBuffers(pCcb);
   1b7f2:	f000 bb51 	b.w	1be98 <SmpScFreeScratchBuffers>
   1b7f6:	bf00      	nop

0001b7f8 <smpScActPairingFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActPairingFailed(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1b7f8:	b538      	push	{r3, r4, r5, lr}
   1b7fa:	4604      	mov	r4, r0
   1b7fc:	460d      	mov	r5, r1
  smpActCleanup(pCcb, pMsg);
   1b7fe:	f7fe fbad 	bl	19f5c <smpActCleanup>
  SmpScFreeScratchBuffers(pCcb);
   1b802:	4620      	mov	r0, r4
   1b804:	f000 fb48 	bl	1be98 <SmpScFreeScratchBuffers>
  /* Perform LESC Cleanup */
  smpScActCleanup(pCcb, pMsg);

  /* Process failure */
  smpActPairingFailed(pCcb, pMsg);
   1b808:	4629      	mov	r1, r5
   1b80a:	4620      	mov	r0, r4
}
   1b80c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpActPairingFailed(pCcb, pMsg);
   1b810:	f7fe bbd4 	b.w	19fbc <smpActPairingFailed>

0001b814 <smpScActPairingCancel>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActPairingCancel(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1b814:	b538      	push	{r3, r4, r5, lr}
   1b816:	4604      	mov	r4, r0
   1b818:	460d      	mov	r5, r1
  /* send pairing failed packet */
  smpSendPairingFailed(pCcb, pMsg->hdr.status);
   1b81a:	78c9      	ldrb	r1, [r1, #3]
   1b81c:	f7fe fbbc 	bl	19f98 <smpSendPairingFailed>
  smpActCleanup(pCcb, pMsg);
   1b820:	4629      	mov	r1, r5
   1b822:	4620      	mov	r0, r4
   1b824:	f7fe fb9a 	bl	19f5c <smpActCleanup>
  SmpScFreeScratchBuffers(pCcb);
   1b828:	4620      	mov	r0, r4
   1b82a:	f000 fb35 	bl	1be98 <SmpScFreeScratchBuffers>
  smpActPairingFailed(pCcb, pMsg);
   1b82e:	4629      	mov	r1, r5
   1b830:	4620      	mov	r0, r4

  smpScActPairingFailed(pCcb, pMsg);
}
   1b832:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpActPairingFailed(pCcb, pMsg);
   1b836:	f7fe bbc1 	b.w	19fbc <smpActPairingFailed>
   1b83a:	bf00      	nop

0001b83c <smpScActAuthSelect>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActAuthSelect(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1b83c:	b530      	push	{r4, r5, lr}
  wsfMsgHdr_t hdr;
  uint8_t *pPacket = pMsg->data.pPacket + L2C_PAYLOAD_START;

  /* Process public key from peer (store in MSB first format) */
  WStrReverseCpy(pCcb->pScCcb->pPeerPublicKey->pubKeyX, &pPacket[SMP_PUB_KEY_X_POS], SMP_PUB_KEY_LEN);
   1b83e:	6c43      	ldr	r3, [r0, #68]	; 0x44
  uint8_t *pPacket = pMsg->data.pPacket + L2C_PAYLOAD_START;
   1b840:	684d      	ldr	r5, [r1, #4]
{
   1b842:	4604      	mov	r4, r0
   1b844:	b083      	sub	sp, #12
  WStrReverseCpy(pCcb->pScCcb->pPeerPublicKey->pubKeyX, &pPacket[SMP_PUB_KEY_X_POS], SMP_PUB_KEY_LEN);
   1b846:	6898      	ldr	r0, [r3, #8]
   1b848:	2220      	movs	r2, #32
   1b84a:	f105 0109 	add.w	r1, r5, #9
   1b84e:	f000 fe1f 	bl	1c490 <WStrReverseCpy>
  WStrReverseCpy(pCcb->pScCcb->pPeerPublicKey->pubKeyY, &pPacket[SMP_PUB_KEY_Y_POS], SMP_PUB_KEY_LEN);
   1b852:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1b854:	6898      	ldr	r0, [r3, #8]
   1b856:	2220      	movs	r2, #32
   1b858:	4410      	add	r0, r2
   1b85a:	f105 0129 	add.w	r1, r5, #41	; 0x29
   1b85e:	f000 fe17 	bl	1c490 <WStrReverseCpy>

  /* Message state machine indicating authorization mode (JW, OOB, or passkey) */
  hdr.param = pCcb->connId;
   1b862:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d

  switch(pCcb->pScCcb->authType)
   1b866:	6c63      	ldr	r3, [r4, #68]	; 0x44
  hdr.param = pCcb->connId;
   1b868:	f8ad 2004 	strh.w	r2, [sp, #4]
  switch(pCcb->pScCcb->authType)
   1b86c:	785b      	ldrb	r3, [r3, #1]
   1b86e:	3b01      	subs	r3, #1
   1b870:	2b03      	cmp	r3, #3
   1b872:	d81e      	bhi.n	1b8b2 <smpScActAuthSelect+0x76>
   1b874:	e8df f003 	tbb	[pc, r3]
   1b878:	020b1402 	.word	0x020b1402
  {
  case SMP_AUTH_TYPE_NUM_COMP:
  case SMP_AUTH_TYPE_JUST_WORKS:
    hdr.event = SMP_MSG_INT_JW_NC;
   1b87c:	2313      	movs	r3, #19
   1b87e:	f88d 3006 	strb.w	r3, [sp, #6]
    hdr.status = SMP_ERR_UNSPECIFIED;
    hdr.event = SMP_MSG_API_CANCEL_REQ;
    break;
  }

  smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1b882:	a901      	add	r1, sp, #4
   1b884:	4620      	mov	r0, r4
   1b886:	f7fe fe8b 	bl	1a5a0 <smpSmExecute>
}
   1b88a:	b003      	add	sp, #12
   1b88c:	bd30      	pop	{r4, r5, pc}
    hdr.event = SMP_MSG_INT_PASSKEY;
   1b88e:	2314      	movs	r3, #20
  smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1b890:	a901      	add	r1, sp, #4
   1b892:	4620      	mov	r0, r4
    hdr.event = SMP_MSG_INT_PASSKEY;
   1b894:	f88d 3006 	strb.w	r3, [sp, #6]
  smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1b898:	f7fe fe82 	bl	1a5a0 <smpSmExecute>
}
   1b89c:	b003      	add	sp, #12
   1b89e:	bd30      	pop	{r4, r5, pc}
    hdr.event = SMP_MSG_INT_OOB;
   1b8a0:	2315      	movs	r3, #21
  smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1b8a2:	a901      	add	r1, sp, #4
   1b8a4:	4620      	mov	r0, r4
    hdr.event = SMP_MSG_INT_OOB;
   1b8a6:	f88d 3006 	strb.w	r3, [sp, #6]
  smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1b8aa:	f7fe fe79 	bl	1a5a0 <smpSmExecute>
}
   1b8ae:	b003      	add	sp, #12
   1b8b0:	bd30      	pop	{r4, r5, pc}
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   1b8b2:	f640 0303 	movw	r3, #2051	; 0x803
   1b8b6:	f8ad 3006 	strh.w	r3, [sp, #6]
    break;
   1b8ba:	e7e2      	b.n	1b882 <smpScActAuthSelect+0x46>

0001b8bc <smpScActPkSetup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActPkSetup(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1b8bc:	b500      	push	{lr}
  {
    smpDmAuthRsp_t        authRsp;
    dmSecAuthReqIndEvt_t  authReq;
  } buf;

  pCcb->pScCcb->pkPos = 0;
   1b8be:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   1b8c0:	b087      	sub	sp, #28
  pCcb->pScCcb->pkPos = 0;
   1b8c2:	2200      	movs	r2, #0

  /* Next command is the Pair Confirm */
  pCcb->nextCmdCode = SMP_CMD_PAIR_CNF;
   1b8c4:	2103      	movs	r1, #3
  pCcb->pScCcb->pkPos = 0;
   1b8c6:	70da      	strb	r2, [r3, #3]
  pCcb->nextCmdCode = SMP_CMD_PAIR_CNF;
   1b8c8:	f880 103f 	strb.w	r1, [r0, #63]	; 0x3f

  /* request pin or oob from user */
  buf.authReq.hdr.param = pCcb->connId;
  buf.authReq.hdr.event = DM_SEC_AUTH_REQ_IND;
  buf.authReq.oob = FALSE;
   1b8cc:	f88d 2004 	strb.w	r2, [sp, #4]
  buf.authReq.hdr.param = pCcb->connId;
   1b8d0:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
  buf.authReq.display = pCcb->pScCcb->display;
   1b8d4:	791b      	ldrb	r3, [r3, #4]
  buf.authReq.hdr.param = pCcb->connId;
   1b8d6:	f8ad 1000 	strh.w	r1, [sp]
  buf.authReq.hdr.event = DM_SEC_AUTH_REQ_IND;
   1b8da:	222e      	movs	r2, #46	; 0x2e
  DmSmpCbackExec((dmEvt_t *)&buf.authReq);
   1b8dc:	4668      	mov	r0, sp
  buf.authReq.hdr.event = DM_SEC_AUTH_REQ_IND;
   1b8de:	f88d 2002 	strb.w	r2, [sp, #2]
  buf.authReq.display = pCcb->pScCcb->display;
   1b8e2:	f88d 3005 	strb.w	r3, [sp, #5]
  DmSmpCbackExec((dmEvt_t *)&buf.authReq);
   1b8e6:	f7fd fd21 	bl	1932c <DmSmpCbackExec>
}
   1b8ea:	b007      	add	sp, #28
   1b8ec:	f85d fb04 	ldr.w	pc, [sp], #4

0001b8f0 <smpScActJwncCalcF4>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActJwncCalcF4(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1b8f0:	b570      	push	{r4, r5, r6, lr}
  /* Cb = f4(PKbx, PKax, Nb, 0x00) where f4(U, V, x, Z) = AES-CMACx (U || V || Z) */
  if (pCcb->initiator)
   1b8f2:	f890 603a 	ldrb.w	r6, [r0, #58]	; 0x3a
  {
    SMP_TRACE_256("F4 PKb", pCcb->pScCcb->pPeerPublicKey->pubKeyX);
   1b8f6:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   1b8f8:	b082      	sub	sp, #8
   1b8fa:	4604      	mov	r4, r0
   1b8fc:	460d      	mov	r5, r1
  if (pCcb->initiator)
   1b8fe:	b1fe      	cbz	r6, 1b940 <smpScActJwncCalcF4+0x50>
    SMP_TRACE_256("F4 PKb", pCcb->pScCcb->pPeerPublicKey->pubKeyX);
   1b900:	6899      	ldr	r1, [r3, #8]
   1b902:	481f      	ldr	r0, [pc, #124]	; (1b980 <smpScActJwncCalcF4+0x90>)
   1b904:	2220      	movs	r2, #32
   1b906:	f000 fcb9 	bl	1c27c <smpLogByteArray>
    SMP_TRACE_256("F4 PKa", pCcb->pScCcb->pLocalPublicKey->pubKeyX);
   1b90a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1b90c:	481d      	ldr	r0, [pc, #116]	; (1b984 <smpScActJwncCalcF4+0x94>)
   1b90e:	68d9      	ldr	r1, [r3, #12]
   1b910:	2220      	movs	r2, #32
   1b912:	f000 fcb3 	bl	1c27c <smpLogByteArray>
    SMP_TRACE_128("F4 Nb", pCcb->pScCcb->pScratch->Nb_Eb);
   1b916:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1b918:	481b      	ldr	r0, [pc, #108]	; (1b988 <smpScActJwncCalcF4+0x98>)
   1b91a:	6959      	ldr	r1, [r3, #20]
   1b91c:	2210      	movs	r2, #16
   1b91e:	4411      	add	r1, r2
   1b920:	f000 fcac 	bl	1c27c <smpLogByteArray>

    SmpScCalcF4(pCcb, pMsg,
                pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   1b924:	6c60      	ldr	r0, [r4, #68]	; 0x44
    SmpScCalcF4(pCcb, pMsg,
   1b926:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
                pCcb->pScCcb->pLocalPublicKey->pubKeyX,
                0, pCcb->pScCcb->pScratch->Nb_Eb);
   1b92a:	6940      	ldr	r0, [r0, #20]
   1b92c:	3010      	adds	r0, #16
    SmpScCalcF4(pCcb, pMsg,
   1b92e:	9001      	str	r0, [sp, #4]
   1b930:	2000      	movs	r0, #0
   1b932:	9000      	str	r0, [sp, #0]
   1b934:	4629      	mov	r1, r5
   1b936:	4620      	mov	r0, r4
   1b938:	f000 fb0a 	bl	1bf50 <SmpScCalcF4>
    SmpScCalcF4(pCcb, pMsg,
                pCcb->pScCcb->pLocalPublicKey->pubKeyX,
                pCcb->pScCcb->pPeerPublicKey->pubKeyX,
                0, pCcb->pScCcb->pScratch->Nb_Eb);
  }
}
   1b93c:	b002      	add	sp, #8
   1b93e:	bd70      	pop	{r4, r5, r6, pc}
    SMP_TRACE_256("F4 PKb",  pCcb->pScCcb->pLocalPublicKey->pubKeyX);
   1b940:	68d9      	ldr	r1, [r3, #12]
   1b942:	480f      	ldr	r0, [pc, #60]	; (1b980 <smpScActJwncCalcF4+0x90>)
   1b944:	2220      	movs	r2, #32
   1b946:	f000 fc99 	bl	1c27c <smpLogByteArray>
    SMP_TRACE_256("F4 PKa", pCcb->pScCcb->pPeerPublicKey->pubKeyX);
   1b94a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1b94c:	480d      	ldr	r0, [pc, #52]	; (1b984 <smpScActJwncCalcF4+0x94>)
   1b94e:	6899      	ldr	r1, [r3, #8]
   1b950:	2220      	movs	r2, #32
   1b952:	f000 fc93 	bl	1c27c <smpLogByteArray>
    SMP_TRACE_128("F4 Nb", pCcb->pScCcb->pScratch->Nb_Eb);
   1b956:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1b958:	480b      	ldr	r0, [pc, #44]	; (1b988 <smpScActJwncCalcF4+0x98>)
   1b95a:	6959      	ldr	r1, [r3, #20]
   1b95c:	2210      	movs	r2, #16
   1b95e:	4411      	add	r1, r2
   1b960:	f000 fc8c 	bl	1c27c <smpLogByteArray>
                pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   1b964:	6c62      	ldr	r2, [r4, #68]	; 0x44
    SmpScCalcF4(pCcb, pMsg,
   1b966:	4620      	mov	r0, r4
                0, pCcb->pScCcb->pScratch->Nb_Eb);
   1b968:	6954      	ldr	r4, [r2, #20]
    SmpScCalcF4(pCcb, pMsg,
   1b96a:	6893      	ldr	r3, [r2, #8]
   1b96c:	68d2      	ldr	r2, [r2, #12]
   1b96e:	9600      	str	r6, [sp, #0]
                0, pCcb->pScCcb->pScratch->Nb_Eb);
   1b970:	3410      	adds	r4, #16
    SmpScCalcF4(pCcb, pMsg,
   1b972:	4629      	mov	r1, r5
   1b974:	9401      	str	r4, [sp, #4]
   1b976:	f000 faeb 	bl	1bf50 <SmpScCalcF4>
}
   1b97a:	b002      	add	sp, #8
   1b97c:	bd70      	pop	{r4, r5, r6, pc}
   1b97e:	bf00      	nop
   1b980:	000254f4 	.word	0x000254f4
   1b984:	000254fc 	.word	0x000254fc
   1b988:	00025504 	.word	0x00025504

0001b98c <smpScActJwncCalcG2>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActJwncCalcG2(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1b98c:	b570      	push	{r4, r5, r6, lr}
  uint8_t *pCmacText;

  /* g2(PKax, PKbx, Na, Nb) where g2(U, V, X, Z) = AES-CMACx (U || V || Z) mod 2^32 */
  if ((pCmacText = SmpScAlloc(SMP_G2_TEXT_LEN, pCcb, pMsg)) !=  NULL)
   1b98e:	460a      	mov	r2, r1
{
   1b990:	b082      	sub	sp, #8
   1b992:	4604      	mov	r4, r0
   1b994:	460e      	mov	r6, r1
  if ((pCmacText = SmpScAlloc(SMP_G2_TEXT_LEN, pCcb, pMsg)) !=  NULL)
   1b996:	4601      	mov	r1, r0
   1b998:	2050      	movs	r0, #80	; 0x50
   1b99a:	f000 fac7 	bl	1bf2c <SmpScAlloc>
   1b99e:	b1d0      	cbz	r0, 1b9d6 <smpScActJwncCalcG2+0x4a>
  {
    uint8_t *pCatBuf = pCmacText;

    /* Concatinate PKax, PKbx, Nb */
    if (pCcb->initiator)
   1b9a0:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   1b9a4:	4605      	mov	r5, r0
   1b9a6:	b9c3      	cbnz	r3, 1b9da <smpScActJwncCalcG2+0x4e>
      pCatBuf = SmpScCat(pCatBuf, pCcb->pScCcb->pLocalPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
      pCatBuf = SmpScCat(pCatBuf, pCcb->pScCcb->pPeerPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
    }
    else
    {
      pCatBuf = SmpScCat(pCatBuf, pCcb->pScCcb->pPeerPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
   1b9a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1b9aa:	2220      	movs	r2, #32
   1b9ac:	6899      	ldr	r1, [r3, #8]
   1b9ae:	f000 fb45 	bl	1c03c <SmpScCat>
      pCatBuf = SmpScCat(pCatBuf, pCcb->pScCcb->pLocalPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
   1b9b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1b9b4:	2220      	movs	r2, #32
   1b9b6:	68d9      	ldr	r1, [r3, #12]
   1b9b8:	f000 fb40 	bl	1c03c <SmpScCat>
    }

    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Nb_Eb);
   1b9bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1b9be:	6959      	ldr	r1, [r3, #20]
   1b9c0:	3110      	adds	r1, #16
   1b9c2:	f000 fb43 	bl	1c04c <SmpScCat128>

    /* Execute CMAC with Na as the key */
    SmpScCmac(pCcb->pScCcb->pScratch->Na_Ea, pCmacText, SMP_G2_TEXT_LEN, pCcb, pMsg);
   1b9c6:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1b9c8:	4623      	mov	r3, r4
   1b9ca:	6950      	ldr	r0, [r2, #20]
   1b9cc:	9600      	str	r6, [sp, #0]
   1b9ce:	2250      	movs	r2, #80	; 0x50
   1b9d0:	4629      	mov	r1, r5
   1b9d2:	f000 fa89 	bl	1bee8 <SmpScCmac>
  }
}
   1b9d6:	b002      	add	sp, #8
   1b9d8:	bd70      	pop	{r4, r5, r6, pc}
      pCatBuf = SmpScCat(pCatBuf, pCcb->pScCcb->pLocalPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
   1b9da:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1b9dc:	2220      	movs	r2, #32
   1b9de:	68d9      	ldr	r1, [r3, #12]
   1b9e0:	f000 fb2c 	bl	1c03c <SmpScCat>
      pCatBuf = SmpScCat(pCatBuf, pCcb->pScCcb->pPeerPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
   1b9e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1b9e6:	2220      	movs	r2, #32
   1b9e8:	6899      	ldr	r1, [r3, #8]
   1b9ea:	f000 fb27 	bl	1c03c <SmpScCat>
   1b9ee:	e7e5      	b.n	1b9bc <smpScActJwncCalcG2+0x30>

0001b9f0 <smpScActJwncDisplay>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActJwncDisplay(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1b9f0:	b530      	push	{r4, r5, lr}
  if (pCcb->pScCcb->authType == SMP_AUTH_TYPE_NUM_COMP)
   1b9f2:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1b9f4:	785b      	ldrb	r3, [r3, #1]
   1b9f6:	2b04      	cmp	r3, #4
{
   1b9f8:	b087      	sub	sp, #28
   1b9fa:	4604      	mov	r4, r0
  if (pCcb->pScCcb->authType == SMP_AUTH_TYPE_NUM_COMP)
   1b9fc:	d00b      	beq.n	1ba16 <smpScActJwncDisplay+0x26>
  else
  {
    /* Just Works always reports success */
    wsfMsgHdr_t hdr;

    hdr.param = pCcb->connId;
   1b9fe:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
   1ba02:	f8ad 2004 	strh.w	r2, [sp, #4]
    hdr.event = SMP_MSG_API_USER_CONFIRM;
   1ba06:	2316      	movs	r3, #22
    hdr.status = HCI_SUCCESS;
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1ba08:	a901      	add	r1, sp, #4
    hdr.event = SMP_MSG_API_USER_CONFIRM;
   1ba0a:	f8ad 3006 	strh.w	r3, [sp, #6]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1ba0e:	f7fe fdc7 	bl	1a5a0 <smpSmExecute>
  }
}
   1ba12:	b007      	add	sp, #28
   1ba14:	bd30      	pop	{r4, r5, pc}
    SMP_TRACE_128("JWNC Display Cnf", pMsg->aes.pCiphertext);
   1ba16:	460d      	mov	r5, r1
   1ba18:	2210      	movs	r2, #16
   1ba1a:	6849      	ldr	r1, [r1, #4]
   1ba1c:	4809      	ldr	r0, [pc, #36]	; (1ba44 <smpScActJwncDisplay+0x54>)
   1ba1e:	f000 fc2d 	bl	1c27c <smpLogByteArray>
    Calc128Cpy(cnfEvt.confirm, pMsg->aes.pCiphertext);
   1ba22:	6869      	ldr	r1, [r5, #4]
   1ba24:	a802      	add	r0, sp, #8
   1ba26:	f000 fcb9 	bl	1c39c <Calc128Cpy>
    cnfEvt.hdr.param = pCcb->connId;
   1ba2a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
   1ba2e:	f8ad 2004 	strh.w	r2, [sp, #4]
    cnfEvt.hdr.event = DM_SEC_COMPARE_IND;
   1ba32:	2335      	movs	r3, #53	; 0x35
    DmSmpCbackExec((dmEvt_t *) &cnfEvt);
   1ba34:	a801      	add	r0, sp, #4
    cnfEvt.hdr.event = DM_SEC_COMPARE_IND;
   1ba36:	f8ad 3006 	strh.w	r3, [sp, #6]
    DmSmpCbackExec((dmEvt_t *) &cnfEvt);
   1ba3a:	f7fd fc77 	bl	1932c <DmSmpCbackExec>
}
   1ba3e:	b007      	add	sp, #28
   1ba40:	bd30      	pop	{r4, r5, pc}
   1ba42:	bf00      	nop
   1ba44:	0002550c 	.word	0x0002550c

0001ba48 <smpScActPkKeypress>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActPkKeypress(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1ba48:	b510      	push	{r4, lr}
  uint8_t *pCmd = pMsg->data.pPacket + L2C_PAYLOAD_START;
   1ba4a:	684c      	ldr	r4, [r1, #4]
  uint8_t *pPacket = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;

  if (*pCmd == SMP_CMD_KEYPRESS)
   1ba4c:	f894 c008 	ldrb.w	ip, [r4, #8]
   1ba50:	f1bc 0f0e 	cmp.w	ip, #14
{
   1ba54:	b082      	sub	sp, #8
  if (*pCmd == SMP_CMD_KEYPRESS)
   1ba56:	d004      	beq.n	1ba62 <smpScActPkKeypress+0x1a>
    keypressEvt.hdr.event = DM_SEC_KEYPRESS_IND;
    keypressEvt.hdr.status = HCI_SUCCESS;

    DmSmpCbackExec((dmEvt_t *) &keypressEvt);
  }
  else if (*pCmd == SMP_CMD_PAIR_CNF)
   1ba58:	f1bc 0f03 	cmp.w	ip, #3
   1ba5c:	d010      	beq.n	1ba80 <smpScActPkKeypress+0x38>
  }
  else
  {
    /* Unexpected command */
  }
}
   1ba5e:	b002      	add	sp, #8
   1ba60:	bd10      	pop	{r4, pc}
    keypressEvt.hdr.param = pCcb->connId;
   1ba62:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
    keypressEvt.notificationType = *pPacket;
   1ba66:	7a61      	ldrb	r1, [r4, #9]
   1ba68:	f88d 1004 	strb.w	r1, [sp, #4]
    keypressEvt.hdr.event = DM_SEC_KEYPRESS_IND;
   1ba6c:	2336      	movs	r3, #54	; 0x36
    DmSmpCbackExec((dmEvt_t *) &keypressEvt);
   1ba6e:	4668      	mov	r0, sp
    keypressEvt.hdr.param = pCcb->connId;
   1ba70:	f8ad 2000 	strh.w	r2, [sp]
    keypressEvt.hdr.event = DM_SEC_KEYPRESS_IND;
   1ba74:	f8ad 3002 	strh.w	r3, [sp, #2]
    DmSmpCbackExec((dmEvt_t *) &keypressEvt);
   1ba78:	f7fd fc58 	bl	1932c <DmSmpCbackExec>
}
   1ba7c:	b002      	add	sp, #8
   1ba7e:	bd10      	pop	{r4, pc}
    pMsg->hdr.event = SMP_MSG_EARLY_CNF;
   1ba80:	221e      	movs	r2, #30
   1ba82:	804a      	strh	r2, [r1, #2]
}
   1ba84:	b002      	add	sp, #8
   1ba86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    smpSmExecute(pCcb, pMsg);
   1ba8a:	f7fe bd89 	b.w	1a5a0 <smpSmExecute>
   1ba8e:	bf00      	nop

0001ba90 <smpScActPkSendKeypress>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActPkSendKeypress(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1ba90:	b538      	push	{r3, r4, r5, lr}
  /* Send keypress notification to the peer */
  smpDmKeypress_t *pKeypress = (smpDmKeypress_t *) pMsg;
  uint8_t         *pPkt;
  uint8_t         *p;

  if (pCcb->pScCcb->kpNotify)
   1ba92:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1ba94:	789b      	ldrb	r3, [r3, #2]
   1ba96:	b903      	cbnz	r3, 1ba9a <smpScActPkSendKeypress+0xa>
      pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
      pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
      smpSmExecute(pCcb, pMsg);
    }
  }
}
   1ba98:	bd38      	pop	{r3, r4, r5, pc}
    smpStartRspTimer(pCcb);
   1ba9a:	460d      	mov	r5, r1
   1ba9c:	4604      	mov	r4, r0
   1ba9e:	f7fe fa55 	bl	19f4c <smpStartRspTimer>
    if ((pPkt = smpMsgAlloc(SMP_KEYPRESS_MSG_LEN + L2C_PAYLOAD_START)) != NULL)
   1baa2:	200a      	movs	r0, #10
   1baa4:	f7ff fb94 	bl	1b1d0 <smpMsgAlloc>
   1baa8:	4601      	mov	r1, r0
   1baaa:	b140      	cbz	r0, 1babe <smpScActPkSendKeypress+0x2e>
      UINT8_TO_BSTREAM(p, SMP_CMD_KEYPRESS);
   1baac:	230e      	movs	r3, #14
   1baae:	7203      	strb	r3, [r0, #8]
      *p = pKeypress->keypress;
   1bab0:	792b      	ldrb	r3, [r5, #4]
   1bab2:	7243      	strb	r3, [r0, #9]
      smpSendPkt(pCcb, pPkt);
   1bab4:	4620      	mov	r0, r4
}
   1bab6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      smpSendPkt(pCcb, pPkt);
   1baba:	f7ff bb69 	b.w	1b190 <smpSendPkt>
      pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   1babe:	f640 0303 	movw	r3, #2051	; 0x803
   1bac2:	806b      	strh	r3, [r5, #2]
      smpSmExecute(pCcb, pMsg);
   1bac4:	4629      	mov	r1, r5
   1bac6:	4620      	mov	r0, r4
}
   1bac8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      smpSmExecute(pCcb, pMsg);
   1bacc:	f7fe bd68 	b.w	1a5a0 <smpSmExecute>

0001bad0 <smpScActCalcSharedSecret>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActCalcSharedSecret(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1bad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    }
  }
#endif

  /* Use local private key and peer public key to generate the shared secret */
  memcpy(key.privKey,  pCcb->pScCcb->pPrivateKey, SMP_PRIVATE_KEY_LEN);
   1bad4:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
  memcpy(key.pubKey_x, pCcb->pScCcb->pPeerPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
  memcpy(key.pubKey_y, pCcb->pScCcb->pPeerPublicKey->pubKeyY, SMP_PUB_KEY_LEN);

  /* Generate the shared secret */
  if (SecEccGenSharedSecret(&key, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_ECC_CMPL) == FALSE)
   1bad8:	f8df 908c 	ldr.w	r9, [pc, #140]	; 1bb68 <smpScActCalcSharedSecret+0x98>
  memcpy(key.privKey,  pCcb->pScCcb->pPrivateKey, SMP_PRIVATE_KEY_LEN);
   1badc:	f8d8 5010 	ldr.w	r5, [r8, #16]
{
   1bae0:	b099      	sub	sp, #100	; 0x64
  memcpy(key.privKey,  pCcb->pScCcb->pPrivateKey, SMP_PRIVATE_KEY_LEN);
   1bae2:	68aa      	ldr	r2, [r5, #8]
   1bae4:	68eb      	ldr	r3, [r5, #12]
{
   1bae6:	4606      	mov	r6, r0
   1bae8:	460f      	mov	r7, r1
  memcpy(key.privKey,  pCcb->pScCcb->pPrivateKey, SMP_PRIVATE_KEY_LEN);
   1baea:	6828      	ldr	r0, [r5, #0]
   1baec:	6869      	ldr	r1, [r5, #4]
   1baee:	ac10      	add	r4, sp, #64	; 0x40
   1baf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1baf2:	6928      	ldr	r0, [r5, #16]
   1baf4:	6969      	ldr	r1, [r5, #20]
   1baf6:	69aa      	ldr	r2, [r5, #24]
   1baf8:	69eb      	ldr	r3, [r5, #28]
   1bafa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  memcpy(key.pubKey_x, pCcb->pScCcb->pPeerPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
   1bafc:	f8d8 4008 	ldr.w	r4, [r8, #8]
   1bb00:	6820      	ldr	r0, [r4, #0]
   1bb02:	6861      	ldr	r1, [r4, #4]
   1bb04:	68a2      	ldr	r2, [r4, #8]
   1bb06:	68e3      	ldr	r3, [r4, #12]
   1bb08:	46ee      	mov	lr, sp
   1bb0a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1bb0e:	6920      	ldr	r0, [r4, #16]
   1bb10:	6961      	ldr	r1, [r4, #20]
   1bb12:	69a2      	ldr	r2, [r4, #24]
   1bb14:	69e3      	ldr	r3, [r4, #28]
   1bb16:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  memcpy(key.pubKey_y, pCcb->pScCcb->pPeerPublicKey->pubKeyY, SMP_PUB_KEY_LEN);
   1bb1a:	f8d8 4008 	ldr.w	r4, [r8, #8]
   1bb1e:	6a20      	ldr	r0, [r4, #32]
   1bb20:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1bb22:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   1bb24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1bb26:	f10d 0c20 	add.w	ip, sp, #32
   1bb2a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1bb2e:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1bb30:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1bb32:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   1bb34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1bb36:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
  if (SecEccGenSharedSecret(&key, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_ECC_CMPL) == FALSE)
   1bb3a:	f896 203d 	ldrb.w	r2, [r6, #61]	; 0x3d
   1bb3e:	f899 10e0 	ldrb.w	r1, [r9, #224]	; 0xe0
   1bb42:	2319      	movs	r3, #25
   1bb44:	4668      	mov	r0, sp
   1bb46:	f7f4 fd13 	bl	10570 <SecEccGenSharedSecret>
   1bb4a:	b110      	cbz	r0, 1bb52 <smpScActCalcSharedSecret+0x82>
  {
    pMsg->hdr.status = SMP_ERR_MEMORY;
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, pMsg);
  }
}
   1bb4c:	b019      	add	sp, #100	; 0x64
   1bb4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   1bb52:	f24e 0303 	movw	r3, #57347	; 0xe003
   1bb56:	807b      	strh	r3, [r7, #2]
    smpSmExecute(pCcb, pMsg);
   1bb58:	4639      	mov	r1, r7
   1bb5a:	4630      	mov	r0, r6
   1bb5c:	f7fe fd20 	bl	1a5a0 <smpSmExecute>
}
   1bb60:	b019      	add	sp, #100	; 0x64
   1bb62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1bb66:	bf00      	nop
   1bb68:	10005bfc 	.word	0x10005bfc

0001bb6c <smpScActCalcF5TKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActCalcF5TKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1bb6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  secEccMsg_t *pSecretMsg = (secEccMsg_t*) pMsg;
  uint8_t *pCmacText;

  if (pMsg->hdr.status == HCI_SUCCESS)
   1bb70:	78cb      	ldrb	r3, [r1, #3]
{
   1bb72:	b086      	sub	sp, #24
   1bb74:	460c      	mov	r4, r1
   1bb76:	4605      	mov	r5, r0
  if (pMsg->hdr.status == HCI_SUCCESS)
   1bb78:	bbd3      	cbnz	r3, 1bbf0 <smpScActCalcF5TKey+0x84>
  {
    /* The shared secret is the DH Key */
    SMP_TRACE_256("DHKey (Shared Secret)", pSecretMsg->data.sharedSecret.secret);
   1bb7a:	1d0e      	adds	r6, r1, #4
   1bb7c:	4822      	ldr	r0, [pc, #136]	; (1bc08 <smpScActCalcF5TKey+0x9c>)
   1bb7e:	2220      	movs	r2, #32
   1bb80:	4631      	mov	r1, r6
   1bb82:	f000 fb7b 	bl	1c27c <smpLogByteArray>

    if ((pCmacText = SmpScAlloc(SMP_F5_TKEY_TEXT_LEN, pCcb, pMsg)) !=  NULL)
   1bb86:	4622      	mov	r2, r4
   1bb88:	4629      	mov	r1, r5
   1bb8a:	2020      	movs	r0, #32
   1bb8c:	f000 f9ce 	bl	1bf2c <SmpScAlloc>
   1bb90:	4684      	mov	ip, r0
   1bb92:	b350      	cbz	r0, 1bbea <smpScActCalcF5TKey+0x7e>
    {
      const uint8_t salt[] = {0x6C, 0x88, 0x83, 0x91, 0xAA, 0xF5, 0xA5, 0x38,
   1bb94:	4b1d      	ldr	r3, [pc, #116]	; (1bc0c <smpScActCalcF5TKey+0xa0>)
                              0x60, 0x37, 0x0B, 0xDB, 0x5A, 0x60, 0x83, 0xBE};

      /* T = AES-CMACsalt (DHKey) */
      memcpy(pCmacText, pSecretMsg->data.sharedSecret.secret, SMP_DHKEY_LEN);
   1bb96:	f8d4 9004 	ldr.w	r9, [r4, #4]
   1bb9a:	f8d4 8008 	ldr.w	r8, [r4, #8]
   1bb9e:	68e7      	ldr	r7, [r4, #12]
   1bba0:	f8d4 a010 	ldr.w	sl, [r4, #16]
      const uint8_t salt[] = {0x6C, 0x88, 0x83, 0x91, 0xAA, 0xF5, 0xA5, 0x38,
   1bba4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1bba6:	f10d 0e08 	add.w	lr, sp, #8
   1bbaa:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
      memcpy(pCmacText, pSecretMsg->data.sharedSecret.secret, SMP_DHKEY_LEN);
   1bbae:	f8cc 9000 	str.w	r9, [ip]
   1bbb2:	f8cc 8004 	str.w	r8, [ip, #4]
   1bbb6:	f8cc 7008 	str.w	r7, [ip, #8]
   1bbba:	f8cc a00c 	str.w	sl, [ip, #12]
   1bbbe:	f8d4 9014 	ldr.w	r9, [r4, #20]
   1bbc2:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1bbc6:	69e7      	ldr	r7, [r4, #28]
   1bbc8:	f8d4 a020 	ldr.w	sl, [r4, #32]
   1bbcc:	f8cc a01c 	str.w	sl, [ip, #28]
   1bbd0:	f8cc 9010 	str.w	r9, [ip, #16]
   1bbd4:	f8cc 8014 	str.w	r8, [ip, #20]
   1bbd8:	f8cc 7018 	str.w	r7, [ip, #24]

      /* Execute CMAC with salt as the key */
      SmpScCmac(salt, pCmacText, SMP_F5_TKEY_TEXT_LEN, pCcb, pMsg);
   1bbdc:	462b      	mov	r3, r5
   1bbde:	4670      	mov	r0, lr
   1bbe0:	2220      	movs	r2, #32
   1bbe2:	9400      	str	r4, [sp, #0]
   1bbe4:	4661      	mov	r1, ip
   1bbe6:	f000 f97f 	bl	1bee8 <SmpScCmac>
  else
  {
    SmpScGetCancelMsgWithReattempt(pCcb->connId, &pMsg->hdr, SMP_ERR_DH_KEY_CHECK);
    smpSmExecute(pCcb, pMsg);
  }
}
   1bbea:	b006      	add	sp, #24
   1bbec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    SmpScGetCancelMsgWithReattempt(pCcb->connId, &pMsg->hdr, SMP_ERR_DH_KEY_CHECK);
   1bbf0:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
   1bbf4:	220b      	movs	r2, #11
   1bbf6:	f000 faeb 	bl	1c1d0 <SmpScGetCancelMsgWithReattempt>
    smpSmExecute(pCcb, pMsg);
   1bbfa:	4621      	mov	r1, r4
   1bbfc:	4628      	mov	r0, r5
}
   1bbfe:	b006      	add	sp, #24
   1bc00:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    smpSmExecute(pCcb, pMsg);
   1bc04:	f7fe bccc 	b.w	1a5a0 <smpSmExecute>
   1bc08:	00025520 	.word	0x00025520
   1bc0c:	00025538 	.word	0x00025538

0001bc10 <smpScActCalcF5MacKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActCalcF5MacKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1bc10:	b570      	push	{r4, r5, r6, lr}
  secCmacMsg_t *pCmac = (secCmacMsg_t *) pMsg;
  uint8_t *pCmacText;

  /* Copy T from the previous step in the F5 Calculation */
  Calc128Cpy(pCcb->pScCcb->pLtk->ltk_t, pCmac->pCiphertext);
   1bc12:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   1bc14:	4604      	mov	r4, r0
  Calc128Cpy(pCcb->pScCcb->pLtk->ltk_t, pCmac->pCiphertext);
   1bc16:	6998      	ldr	r0, [r3, #24]
{
   1bc18:	b082      	sub	sp, #8
   1bc1a:	460d      	mov	r5, r1
  Calc128Cpy(pCcb->pScCcb->pLtk->ltk_t, pCmac->pCiphertext);
   1bc1c:	3010      	adds	r0, #16
   1bc1e:	6849      	ldr	r1, [r1, #4]
   1bc20:	f000 fbbc 	bl	1c39c <Calc128Cpy>

  SMP_TRACE_128("T", pCcb->pScCcb->pLtk->ltk_t);
   1bc24:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1bc26:	4819      	ldr	r0, [pc, #100]	; (1bc8c <smpScActCalcF5MacKey+0x7c>)
   1bc28:	6999      	ldr	r1, [r3, #24]
   1bc2a:	2210      	movs	r2, #16
   1bc2c:	4411      	add	r1, r2
   1bc2e:	f000 fb25 	bl	1c27c <smpLogByteArray>

  if ((pCmacText = SmpScAlloc(SMP_F5_TEXT_LEN, pCcb, pMsg)) !=  NULL)
   1bc32:	462a      	mov	r2, r5
   1bc34:	4621      	mov	r1, r4
   1bc36:	2035      	movs	r0, #53	; 0x35
   1bc38:	f000 f978 	bl	1bf2c <SmpScAlloc>
   1bc3c:	b318      	cbz	r0, 1bc86 <smpScActCalcF5MacKey+0x76>
  {
    uint8_t *pCatBuf = pCmacText;

    /* mackey || ltk = f5(W, N1, N2, A1, A2) */
    /* mackey = AES-CMACT (Counter = 0 || keyID ||N1 || N2|| A1|| A2|| Length = 256) */
    *pCatBuf++ = 0;
   1bc3e:	2300      	movs	r3, #0
    pCatBuf = SmpScCat(pCatBuf, smpScF5Key, 4);
   1bc40:	2204      	movs	r2, #4
   1bc42:	4606      	mov	r6, r0
   1bc44:	4912      	ldr	r1, [pc, #72]	; (1bc90 <smpScActCalcF5MacKey+0x80>)
    *pCatBuf++ = 0;
   1bc46:	f800 3b01 	strb.w	r3, [r0], #1
    pCatBuf = SmpScCat(pCatBuf, smpScF5Key, 4);
   1bc4a:	f000 f9f7 	bl	1c03c <SmpScCat>
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Na_Ea);
   1bc4e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1bc50:	6959      	ldr	r1, [r3, #20]
   1bc52:	f000 f9fb 	bl	1c04c <SmpScCat128>
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Nb_Eb);
   1bc56:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1bc58:	6959      	ldr	r1, [r3, #20]
   1bc5a:	3110      	adds	r1, #16
   1bc5c:	f000 f9f6 	bl	1c04c <SmpScCat128>
   1bc60:	4601      	mov	r1, r0
    pCatBuf = smpScCatInitiatorBdAddr(pCcb, pCatBuf);
   1bc62:	4620      	mov	r0, r4
   1bc64:	f7ff fbae 	bl	1b3c4 <smpScCatInitiatorBdAddr>
   1bc68:	4601      	mov	r1, r0
    pCatBuf = smpScCatResponderBdAddr(pCcb, pCatBuf);
   1bc6a:	4620      	mov	r0, r4
   1bc6c:	f7ff fbe2 	bl	1b434 <smpScCatResponderBdAddr>
    *pCatBuf++ = 1;
   1bc70:	2301      	movs	r3, #1
   1bc72:	8003      	strh	r3, [r0, #0]
    *pCatBuf++ = 0;

    /* Execute CMAC with T as the key */
    SmpScCmac(pCcb->pScCcb->pLtk->ltk_t, pCmacText, SMP_F5_TEXT_LEN, pCcb, pMsg);
   1bc74:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1bc76:	6990      	ldr	r0, [r2, #24]
   1bc78:	9500      	str	r5, [sp, #0]
   1bc7a:	4623      	mov	r3, r4
   1bc7c:	2235      	movs	r2, #53	; 0x35
   1bc7e:	4631      	mov	r1, r6
   1bc80:	3010      	adds	r0, #16
   1bc82:	f000 f931 	bl	1bee8 <SmpScCmac>
  }
}
   1bc86:	b002      	add	sp, #8
   1bc88:	bd70      	pop	{r4, r5, r6, pc}
   1bc8a:	bf00      	nop
   1bc8c:	0002554c 	.word	0x0002554c
   1bc90:	00025564 	.word	0x00025564

0001bc94 <smpScActCalcF5Ltk>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActCalcF5Ltk(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1bc94:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bc96:	4604      	mov	r4, r0
   1bc98:	b083      	sub	sp, #12
   1bc9a:	460e      	mov	r6, r1
  secCmacMsg_t *pCmac = (secCmacMsg_t *) pMsg;
  uint8_t *pCmacText;

  SMP_TRACE_128("MAC", pMsg->aes.pCiphertext);
   1bc9c:	2210      	movs	r2, #16
   1bc9e:	6849      	ldr	r1, [r1, #4]
   1bca0:	4819      	ldr	r0, [pc, #100]	; (1bd08 <smpScActCalcF5Ltk+0x74>)
   1bca2:	f000 faeb 	bl	1c27c <smpLogByteArray>

  /* Copy Mac Key from the previous step in the F5 Calculation */
  Calc128Cpy(pCcb->pScCcb->pLtk->mac, pCmac->pCiphertext);
   1bca6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1bca8:	6871      	ldr	r1, [r6, #4]
   1bcaa:	6998      	ldr	r0, [r3, #24]
   1bcac:	f000 fb76 	bl	1c39c <Calc128Cpy>

  if ((pCmacText = SmpScAlloc(SMP_F5_TEXT_LEN, pCcb, pMsg)) !=  NULL)
   1bcb0:	4632      	mov	r2, r6
   1bcb2:	4621      	mov	r1, r4
   1bcb4:	2035      	movs	r0, #53	; 0x35
   1bcb6:	f000 f939 	bl	1bf2c <SmpScAlloc>
   1bcba:	b310      	cbz	r0, 1bd02 <smpScActCalcF5Ltk+0x6e>
  {
    uint8_t *pCatBuf = pCmacText;

    /* mackey || ltk = f5(W, N1, N2, A1, A2) */
    /* ltk = AES-CMACT (Counter = 1 || keyID || N1 || N2|| A1|| A2 ||Length = 256) */
    *pCatBuf++ = 1;
   1bcbc:	2701      	movs	r7, #1
    pCatBuf = SmpScCat(pCatBuf, smpScF5Key, 4);
   1bcbe:	2204      	movs	r2, #4
   1bcc0:	4605      	mov	r5, r0
   1bcc2:	4912      	ldr	r1, [pc, #72]	; (1bd0c <smpScActCalcF5Ltk+0x78>)
    *pCatBuf++ = 1;
   1bcc4:	f800 7b01 	strb.w	r7, [r0], #1
    pCatBuf = SmpScCat(pCatBuf, smpScF5Key, 4);
   1bcc8:	f000 f9b8 	bl	1c03c <SmpScCat>
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Na_Ea);
   1bccc:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1bcce:	6959      	ldr	r1, [r3, #20]
   1bcd0:	f000 f9bc 	bl	1c04c <SmpScCat128>
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Nb_Eb);
   1bcd4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1bcd6:	6959      	ldr	r1, [r3, #20]
   1bcd8:	3110      	adds	r1, #16
   1bcda:	f000 f9b7 	bl	1c04c <SmpScCat128>
   1bcde:	4601      	mov	r1, r0
    pCatBuf = smpScCatInitiatorBdAddr(pCcb, pCatBuf);
   1bce0:	4620      	mov	r0, r4
   1bce2:	f7ff fb6f 	bl	1b3c4 <smpScCatInitiatorBdAddr>
   1bce6:	4601      	mov	r1, r0
    pCatBuf = smpScCatResponderBdAddr(pCcb, pCatBuf);
   1bce8:	4620      	mov	r0, r4
   1bcea:	f7ff fba3 	bl	1b434 <smpScCatResponderBdAddr>
    *pCatBuf++ = 1;
   1bcee:	8007      	strh	r7, [r0, #0]
    *pCatBuf++ = 0;

    /* Execute CMAC with T as the key */
    SmpScCmac(pCcb->pScCcb->pLtk->ltk_t, pCmacText, SMP_F5_TEXT_LEN, pCcb, pMsg);
   1bcf0:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1bcf2:	6990      	ldr	r0, [r2, #24]
   1bcf4:	9600      	str	r6, [sp, #0]
   1bcf6:	4629      	mov	r1, r5
   1bcf8:	4623      	mov	r3, r4
   1bcfa:	2235      	movs	r2, #53	; 0x35
   1bcfc:	3010      	adds	r0, #16
   1bcfe:	f000 f8f3 	bl	1bee8 <SmpScCmac>
  }
}
   1bd02:	b003      	add	sp, #12
   1bd04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bd06:	bf00      	nop
   1bd08:	00025550 	.word	0x00025550
   1bd0c:	00025564 	.word	0x00025564

0001bd10 <smpScActDHKeyCalcF6Ea>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActDHKeyCalcF6Ea(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1bd10:	b570      	push	{r4, r5, r6, lr}
   1bd12:	4604      	mov	r4, r0
   1bd14:	b082      	sub	sp, #8
   1bd16:	460d      	mov	r5, r1
  uint8_t *pCmacText;

  SMP_TRACE_128("LTK", pMsg->aes.pCiphertext);
   1bd18:	481d      	ldr	r0, [pc, #116]	; (1bd90 <smpScActDHKeyCalcF6Ea+0x80>)
   1bd1a:	6849      	ldr	r1, [r1, #4]
   1bd1c:	2210      	movs	r2, #16
   1bd1e:	f000 faad 	bl	1c27c <smpLogByteArray>

  /* Copy LTK from the previous state (smpScActCalcF5Ltk) */
  WStrReverseCpy(pCcb->pScCcb->pLtk->ltk_t, pMsg->aes.pCiphertext, 16);
   1bd22:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1bd24:	6869      	ldr	r1, [r5, #4]
   1bd26:	6998      	ldr	r0, [r3, #24]
   1bd28:	2210      	movs	r2, #16
   1bd2a:	4410      	add	r0, r2
   1bd2c:	f000 fbb0 	bl	1c490 <WStrReverseCpy>

  if ((pCmacText = SmpScAlloc(SMP_F6_TEXT_LEN, pCcb, pMsg)) !=  NULL)
   1bd30:	462a      	mov	r2, r5
   1bd32:	4621      	mov	r1, r4
   1bd34:	2041      	movs	r0, #65	; 0x41
   1bd36:	f000 f8f9 	bl	1bf2c <SmpScAlloc>
   1bd3a:	b338      	cbz	r0, 1bd8c <smpScActDHKeyCalcF6Ea+0x7c>
  {
    uint8_t *pCatBuf = pCmacText;

    /* f6(W, N1, N2, R, IOcap, A1, A2) = AES-CMACW (N1 || N2 || R || IOcap || A1 || A2) */
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Na_Ea);
   1bd3c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1bd3e:	6959      	ldr	r1, [r3, #20]
   1bd40:	4606      	mov	r6, r0
   1bd42:	f000 f983 	bl	1c04c <SmpScCat128>
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Nb_Eb);
   1bd46:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1bd48:	6959      	ldr	r1, [r3, #20]
   1bd4a:	3110      	adds	r1, #16
   1bd4c:	f000 f97e 	bl	1c04c <SmpScCat128>
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Rb);
   1bd50:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1bd52:	6959      	ldr	r1, [r3, #20]
   1bd54:	3130      	adds	r1, #48	; 0x30
   1bd56:	f000 f979 	bl	1c04c <SmpScCat128>

    *pCatBuf++ = pCcb->pairReq[SMP_AUTHREQ_POS]; /* AuthReq */
   1bd5a:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1bd5e:	7003      	strb	r3, [r0, #0]
    *pCatBuf++ = pCcb->pairReq[SMP_OOB_POS]; /* OOB Data Flag */
   1bd60:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   1bd64:	7043      	strb	r3, [r0, #1]
    *pCatBuf++ = pCcb->pairReq[SMP_IO_POS]; /* IO Capability Parameter */
   1bd66:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   1bd6a:	7083      	strb	r3, [r0, #2]

    pCatBuf = smpScCatInitiatorBdAddr(pCcb, pCatBuf);
   1bd6c:	1cc1      	adds	r1, r0, #3
   1bd6e:	4620      	mov	r0, r4
   1bd70:	f7ff fb28 	bl	1b3c4 <smpScCatInitiatorBdAddr>
   1bd74:	4601      	mov	r1, r0
    pCatBuf = smpScCatResponderBdAddr(pCcb, pCatBuf);
   1bd76:	4620      	mov	r0, r4
   1bd78:	f7ff fb5c 	bl	1b434 <smpScCatResponderBdAddr>

    /* Execute CMAC with MACKey as the key */
    SmpScCmac(pCcb->pScCcb->pLtk->mac, pCmacText, SMP_F6_TEXT_LEN, pCcb, pMsg);
   1bd7c:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1bd7e:	4623      	mov	r3, r4
   1bd80:	6990      	ldr	r0, [r2, #24]
   1bd82:	9500      	str	r5, [sp, #0]
   1bd84:	2241      	movs	r2, #65	; 0x41
   1bd86:	4631      	mov	r1, r6
   1bd88:	f000 f8ae 	bl	1bee8 <SmpScCmac>
  }
}
   1bd8c:	b002      	add	sp, #8
   1bd8e:	bd70      	pop	{r4, r5, r6, pc}
   1bd90:	00025554 	.word	0x00025554

0001bd94 <smpScActDHKeyCalcF6Eb>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActDHKeyCalcF6Eb(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1bd94:	b570      	push	{r4, r5, r6, lr}
  uint8_t *pCmacText;

  SMP_TRACE_128("DHKey Ea", pMsg->aes.pCiphertext);
   1bd96:	2210      	movs	r2, #16
{
   1bd98:	b082      	sub	sp, #8
   1bd9a:	460e      	mov	r6, r1
   1bd9c:	4604      	mov	r4, r0
  SMP_TRACE_128("DHKey Ea", pMsg->aes.pCiphertext);
   1bd9e:	6849      	ldr	r1, [r1, #4]
   1bda0:	481c      	ldr	r0, [pc, #112]	; (1be14 <smpScActDHKeyCalcF6Eb+0x80>)
   1bda2:	f000 fa6b 	bl	1c27c <smpLogByteArray>

  if ((pCmacText = SmpScAlloc(SMP_F6_TEXT_LEN, pCcb, pMsg)) !=  NULL)
   1bda6:	4632      	mov	r2, r6
   1bda8:	4621      	mov	r1, r4
   1bdaa:	2041      	movs	r0, #65	; 0x41
   1bdac:	f000 f8be 	bl	1bf2c <SmpScAlloc>
   1bdb0:	b338      	cbz	r0, 1be02 <smpScActDHKeyCalcF6Eb+0x6e>
  {
    uint8_t *pCatBuf = pCmacText;

    /* f6(W, N1, N2, R, IOcap, A1, A2) = AES-CMACW (N1 || N2 || R || IOcap || A1 || A2) */
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Nb_Eb);
   1bdb2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1bdb4:	6959      	ldr	r1, [r3, #20]
   1bdb6:	3110      	adds	r1, #16
   1bdb8:	4605      	mov	r5, r0
   1bdba:	f000 f947 	bl	1c04c <SmpScCat128>
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Na_Ea);
   1bdbe:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1bdc0:	6959      	ldr	r1, [r3, #20]
   1bdc2:	f000 f943 	bl	1c04c <SmpScCat128>
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Ra);
   1bdc6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1bdc8:	6959      	ldr	r1, [r3, #20]
   1bdca:	3120      	adds	r1, #32
   1bdcc:	f000 f93e 	bl	1c04c <SmpScCat128>

    *pCatBuf++ = pCcb->pairRsp[SMP_AUTHREQ_POS]; /* AuthReq */
   1bdd0:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   1bdd4:	7003      	strb	r3, [r0, #0]
    *pCatBuf++ = pCcb->pairRsp[SMP_OOB_POS]; /* OOB Data Flag */
   1bdd6:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1bdda:	7043      	strb	r3, [r0, #1]
    *pCatBuf++ = pCcb->pairRsp[SMP_IO_POS]; /* IO Capability Parameter */
   1bddc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1bde0:	7083      	strb	r3, [r0, #2]

    pCatBuf = smpScCatResponderBdAddr(pCcb, pCatBuf);
   1bde2:	1cc1      	adds	r1, r0, #3
   1bde4:	4620      	mov	r0, r4
   1bde6:	f7ff fb25 	bl	1b434 <smpScCatResponderBdAddr>
   1bdea:	4601      	mov	r1, r0
    pCatBuf = smpScCatInitiatorBdAddr(pCcb, pCatBuf);
   1bdec:	4620      	mov	r0, r4
   1bdee:	f7ff fae9 	bl	1b3c4 <smpScCatInitiatorBdAddr>

    /* Execute CMAC with MACKey as the key */
    SmpScCmac(pCcb->pScCcb->pLtk->mac, pCmacText, SMP_F6_TEXT_LEN, pCcb, pMsg);
   1bdf2:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1bdf4:	4623      	mov	r3, r4
   1bdf6:	6990      	ldr	r0, [r2, #24]
   1bdf8:	9600      	str	r6, [sp, #0]
   1bdfa:	4629      	mov	r1, r5
   1bdfc:	2241      	movs	r2, #65	; 0x41
   1bdfe:	f000 f873 	bl	1bee8 <SmpScCmac>
  }

  /* Copy Ea from the previous state (smpScActDHKeyCalcF6Ea) */
  Calc128Cpy(pCcb->pScCcb->pScratch->Na_Ea, pMsg->aes.pCiphertext);
   1be02:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1be04:	6871      	ldr	r1, [r6, #4]
   1be06:	6958      	ldr	r0, [r3, #20]
}
   1be08:	b002      	add	sp, #8
   1be0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Calc128Cpy(pCcb->pScCcb->pScratch->Na_Ea, pMsg->aes.pCiphertext);
   1be0e:	f000 bac5 	b.w	1c39c <Calc128Cpy>
   1be12:	bf00      	nop
   1be14:	00025558 	.word	0x00025558

0001be18 <SmpScAllocScratchBuffers>:
 *
 *  \return TRUE if success, else FALSE.
 */
/*************************************************************************************************/
bool_t SmpScAllocScratchBuffers(smpCcb_t *pCcb)
{
   1be18:	b538      	push	{r3, r4, r5, lr}
  if (pCcb->pScCcb->pScratch == NULL)
   1be1a:	6c44      	ldr	r4, [r0, #68]	; 0x44
   1be1c:	6963      	ldr	r3, [r4, #20]
{
   1be1e:	4605      	mov	r5, r0
  if (pCcb->pScCcb->pScratch == NULL)
   1be20:	b1db      	cbz	r3, 1be5a <SmpScAllocScratchBuffers+0x42>
  {
    pCcb->pScCcb->pScratch = WsfBufAlloc(sizeof(smpScScratch_t));
  }

  if (pCcb->pScCcb->pPeerPublicKey == NULL)
   1be22:	68a3      	ldr	r3, [r4, #8]
   1be24:	b30b      	cbz	r3, 1be6a <SmpScAllocScratchBuffers+0x52>
  {
    pCcb->pScCcb->pPeerPublicKey = WsfBufAlloc(sizeof(smpScPubKey_t));
  }

  if (pCcb->pScCcb->pLtk == NULL)
   1be26:	69a3      	ldr	r3, [r4, #24]
   1be28:	b33b      	cbz	r3, 1be7a <SmpScAllocScratchBuffers+0x62>
  {
    pCcb->pScCcb->pLtk = WsfBufAlloc(sizeof(smpScLtk_t));
  }

  if (pCcb->pScCcb->pLocalPublicKey == NULL)
   1be2a:	68e3      	ldr	r3, [r4, #12]
   1be2c:	2b00      	cmp	r3, #0
   1be2e:	d02c      	beq.n	1be8a <SmpScAllocScratchBuffers+0x72>
  {
    pCcb->pScCcb->pLocalPublicKey = WsfBufAlloc(sizeof(smpScPubKey_t));
  }

  if (pCcb->pScCcb->pPrivateKey == NULL)
   1be30:	6923      	ldr	r3, [r4, #16]
   1be32:	b163      	cbz	r3, 1be4e <SmpScAllocScratchBuffers+0x36>
  {
    pCcb->pScCcb->pPrivateKey = WsfBufAlloc(SMP_PRIVATE_KEY_LEN);
  }

  if (pCcb->pScCcb->pScratch && pCcb->pScCcb->pPeerPublicKey && pCcb->pScCcb->pLtk &&
   1be34:	6960      	ldr	r0, [r4, #20]
   1be36:	b148      	cbz	r0, 1be4c <SmpScAllocScratchBuffers+0x34>
   1be38:	68a0      	ldr	r0, [r4, #8]
   1be3a:	b138      	cbz	r0, 1be4c <SmpScAllocScratchBuffers+0x34>
   1be3c:	69a0      	ldr	r0, [r4, #24]
   1be3e:	b128      	cbz	r0, 1be4c <SmpScAllocScratchBuffers+0x34>
   1be40:	68e0      	ldr	r0, [r4, #12]
   1be42:	b118      	cbz	r0, 1be4c <SmpScAllocScratchBuffers+0x34>
      pCcb->pScCcb->pLocalPublicKey && pCcb->pScCcb->pPrivateKey)
   1be44:	6920      	ldr	r0, [r4, #16]
  {
    return TRUE;
   1be46:	3800      	subs	r0, #0
   1be48:	bf18      	it	ne
   1be4a:	2001      	movne	r0, #1
  }

  return FALSE;
}
   1be4c:	bd38      	pop	{r3, r4, r5, pc}
    pCcb->pScCcb->pPrivateKey = WsfBufAlloc(SMP_PRIVATE_KEY_LEN);
   1be4e:	2020      	movs	r0, #32
   1be50:	f7f7 fc80 	bl	13754 <WsfBufAlloc>
   1be54:	6120      	str	r0, [r4, #16]
  if (pCcb->pScCcb->pScratch && pCcb->pScCcb->pPeerPublicKey && pCcb->pScCcb->pLtk &&
   1be56:	6c6c      	ldr	r4, [r5, #68]	; 0x44
   1be58:	e7ec      	b.n	1be34 <SmpScAllocScratchBuffers+0x1c>
    pCcb->pScCcb->pScratch = WsfBufAlloc(sizeof(smpScScratch_t));
   1be5a:	2060      	movs	r0, #96	; 0x60
   1be5c:	f7f7 fc7a 	bl	13754 <WsfBufAlloc>
   1be60:	6160      	str	r0, [r4, #20]
  if (pCcb->pScCcb->pPeerPublicKey == NULL)
   1be62:	6c6c      	ldr	r4, [r5, #68]	; 0x44
   1be64:	68a3      	ldr	r3, [r4, #8]
   1be66:	2b00      	cmp	r3, #0
   1be68:	d1dd      	bne.n	1be26 <SmpScAllocScratchBuffers+0xe>
    pCcb->pScCcb->pPeerPublicKey = WsfBufAlloc(sizeof(smpScPubKey_t));
   1be6a:	2040      	movs	r0, #64	; 0x40
   1be6c:	f7f7 fc72 	bl	13754 <WsfBufAlloc>
   1be70:	60a0      	str	r0, [r4, #8]
  if (pCcb->pScCcb->pLtk == NULL)
   1be72:	6c6c      	ldr	r4, [r5, #68]	; 0x44
   1be74:	69a3      	ldr	r3, [r4, #24]
   1be76:	2b00      	cmp	r3, #0
   1be78:	d1d7      	bne.n	1be2a <SmpScAllocScratchBuffers+0x12>
    pCcb->pScCcb->pLtk = WsfBufAlloc(sizeof(smpScLtk_t));
   1be7a:	2020      	movs	r0, #32
   1be7c:	f7f7 fc6a 	bl	13754 <WsfBufAlloc>
   1be80:	61a0      	str	r0, [r4, #24]
  if (pCcb->pScCcb->pLocalPublicKey == NULL)
   1be82:	6c6c      	ldr	r4, [r5, #68]	; 0x44
   1be84:	68e3      	ldr	r3, [r4, #12]
   1be86:	2b00      	cmp	r3, #0
   1be88:	d1d2      	bne.n	1be30 <SmpScAllocScratchBuffers+0x18>
    pCcb->pScCcb->pLocalPublicKey = WsfBufAlloc(sizeof(smpScPubKey_t));
   1be8a:	2040      	movs	r0, #64	; 0x40
   1be8c:	f7f7 fc62 	bl	13754 <WsfBufAlloc>
   1be90:	60e0      	str	r0, [r4, #12]
  if (pCcb->pScCcb->pPrivateKey == NULL)
   1be92:	6c6c      	ldr	r4, [r5, #68]	; 0x44
   1be94:	e7cc      	b.n	1be30 <SmpScAllocScratchBuffers+0x18>
   1be96:	bf00      	nop

0001be98 <SmpScFreeScratchBuffers>:
 */
/*************************************************************************************************/
void SmpScFreeScratchBuffers(smpCcb_t *pCcb)
{
  /* free scratch buffer */
  if (pCcb->pScCcb->pScratch != NULL)
   1be98:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   1be9a:	b510      	push	{r4, lr}
   1be9c:	4604      	mov	r4, r0
  if (pCcb->pScCcb->pScratch != NULL)
   1be9e:	6958      	ldr	r0, [r3, #20]
   1bea0:	b120      	cbz	r0, 1beac <SmpScFreeScratchBuffers+0x14>
  {
    WsfBufFree(pCcb->pScCcb->pScratch);
   1bea2:	f7f7 fc87 	bl	137b4 <WsfBufFree>
    pCcb->pScCcb->pScratch = NULL;
   1bea6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1bea8:	2200      	movs	r2, #0
   1beaa:	615a      	str	r2, [r3, #20]
  }

  /* free scratch peer public key buffer */
  if (pCcb->pScCcb->pPeerPublicKey != NULL)
   1beac:	6898      	ldr	r0, [r3, #8]
   1beae:	b120      	cbz	r0, 1beba <SmpScFreeScratchBuffers+0x22>
  {
    WsfBufFree(pCcb->pScCcb->pPeerPublicKey);
   1beb0:	f7f7 fc80 	bl	137b4 <WsfBufFree>
    pCcb->pScCcb->pPeerPublicKey = NULL;
   1beb4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1beb6:	2200      	movs	r2, #0
   1beb8:	609a      	str	r2, [r3, #8]
  }

  /* free scratch LTK buffer */
  if (pCcb->pScCcb->pLtk != NULL)
   1beba:	6998      	ldr	r0, [r3, #24]
   1bebc:	b120      	cbz	r0, 1bec8 <SmpScFreeScratchBuffers+0x30>
  {
    WsfBufFree(pCcb->pScCcb->pLtk);
   1bebe:	f7f7 fc79 	bl	137b4 <WsfBufFree>
    pCcb->pScCcb->pLtk = NULL;
   1bec2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1bec4:	2200      	movs	r2, #0
   1bec6:	619a      	str	r2, [r3, #24]
  }

  /* free scratch local public key buffer */
  if (pCcb->pScCcb->pLocalPublicKey != NULL)
   1bec8:	68d8      	ldr	r0, [r3, #12]
   1beca:	b120      	cbz	r0, 1bed6 <SmpScFreeScratchBuffers+0x3e>
  {
    WsfBufFree(pCcb->pScCcb->pLocalPublicKey);
   1becc:	f7f7 fc72 	bl	137b4 <WsfBufFree>
    pCcb->pScCcb->pLocalPublicKey = NULL;
   1bed0:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1bed2:	2200      	movs	r2, #0
   1bed4:	60da      	str	r2, [r3, #12]
  }

  /* free scratch private key buffer */
  if (pCcb->pScCcb->pPrivateKey != NULL)
   1bed6:	6918      	ldr	r0, [r3, #16]
   1bed8:	b120      	cbz	r0, 1bee4 <SmpScFreeScratchBuffers+0x4c>
  {
    WsfBufFree(pCcb->pScCcb->pPrivateKey);
   1beda:	f7f7 fc6b 	bl	137b4 <WsfBufFree>
    pCcb->pScCcb->pPrivateKey = NULL;
   1bede:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1bee0:	2200      	movs	r2, #0
   1bee2:	611a      	str	r2, [r3, #16]
  }
}
   1bee4:	bd10      	pop	{r4, pc}
   1bee6:	bf00      	nop

0001bee8 <SmpScCmac>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpScCmac(const uint8_t *pKey, uint8_t *pText, uint8_t textLen, smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1bee8:	b570      	push	{r4, r5, r6, lr}
   1beea:	461c      	mov	r4, r3
   1beec:	b082      	sub	sp, #8
  if (SecCmac(pKey, pText, textLen, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_CMAC_CMPL) == FALSE)
   1beee:	4b0e      	ldr	r3, [pc, #56]	; (1bf28 <SmpScCmac+0x40>)
   1bef0:	f894 603d 	ldrb.w	r6, [r4, #61]	; 0x3d
   1bef4:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
   1bef8:	9600      	str	r6, [sp, #0]
   1befa:	261c      	movs	r6, #28
   1befc:	9601      	str	r6, [sp, #4]
{
   1befe:	460d      	mov	r5, r1
   1bf00:	9e06      	ldr	r6, [sp, #24]
  if (SecCmac(pKey, pText, textLen, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_CMAC_CMPL) == FALSE)
   1bf02:	f7f4 f80b 	bl	ff1c <SecCmac>
   1bf06:	b108      	cbz	r0, 1bf0c <SmpScCmac+0x24>
    WsfBufFree(pText);
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, pMsg);
  }
}
   1bf08:	b002      	add	sp, #8
   1bf0a:	bd70      	pop	{r4, r5, r6, pc}
    WsfBufFree(pText);
   1bf0c:	4628      	mov	r0, r5
   1bf0e:	f7f7 fc51 	bl	137b4 <WsfBufFree>
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   1bf12:	f640 0303 	movw	r3, #2051	; 0x803
    smpSmExecute(pCcb, pMsg);
   1bf16:	4631      	mov	r1, r6
   1bf18:	4620      	mov	r0, r4
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   1bf1a:	8073      	strh	r3, [r6, #2]
}
   1bf1c:	b002      	add	sp, #8
   1bf1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    smpSmExecute(pCcb, pMsg);
   1bf22:	f7fe bb3d 	b.w	1a5a0 <smpSmExecute>
   1bf26:	bf00      	nop
   1bf28:	10005bfc 	.word	0x10005bfc

0001bf2c <SmpScAlloc>:
 *
 *  \return Allocated buffer.
 */
/*************************************************************************************************/
uint8_t *SmpScAlloc(uint8_t size, smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1bf2c:	b570      	push	{r4, r5, r6, lr}
   1bf2e:	460e      	mov	r6, r1
   1bf30:	4615      	mov	r5, r2
  uint8_t *pBuf = WsfBufAlloc(size);
   1bf32:	f7f7 fc0f 	bl	13754 <WsfBufAlloc>

  if (pBuf == NULL)
   1bf36:	4604      	mov	r4, r0
   1bf38:	b108      	cbz	r0, 1bf3e <SmpScAlloc+0x12>
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, pMsg);
  }

  return pBuf;
}
   1bf3a:	4620      	mov	r0, r4
   1bf3c:	bd70      	pop	{r4, r5, r6, pc}
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   1bf3e:	f640 0303 	movw	r3, #2051	; 0x803
    smpSmExecute(pCcb, pMsg);
   1bf42:	4630      	mov	r0, r6
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   1bf44:	806b      	strh	r3, [r5, #2]
    smpSmExecute(pCcb, pMsg);
   1bf46:	4629      	mov	r1, r5
   1bf48:	f7fe fb2a 	bl	1a5a0 <smpSmExecute>
}
   1bf4c:	4620      	mov	r0, r4
   1bf4e:	bd70      	pop	{r4, r5, r6, pc}

0001bf50 <SmpScCalcF4>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpScCalcF4(smpCcb_t *pCcb, smpMsg_t *pMsg, uint8_t *pU, uint8_t *pV, uint8_t z, uint8_t *pX)
{
   1bf50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bf54:	b082      	sub	sp, #8
   1bf56:	4607      	mov	r7, r0
  uint8_t *pBuf = WsfBufAlloc(size);
   1bf58:	2041      	movs	r0, #65	; 0x41
{
   1bf5a:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   1bf5e:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   1bf62:	4688      	mov	r8, r1
   1bf64:	4616      	mov	r6, r2
   1bf66:	461d      	mov	r5, r3
  uint8_t *pBuf = WsfBufAlloc(size);
   1bf68:	f7f7 fbf4 	bl	13754 <WsfBufAlloc>
  if (pBuf == NULL)
   1bf6c:	b3d0      	cbz	r0, 1bfe4 <SmpScCalcF4+0x94>
  return pBuf;
   1bf6e:	4604      	mov	r4, r0
 *  \return Pointer to next byte after concatination.
 */
/*************************************************************************************************/
uint8_t *SmpScCat(uint8_t *pDst, const uint8_t *pSrc, uint8_t len)
{
  memcpy(pDst, pSrc, len);
   1bf70:	6831      	ldr	r1, [r6, #0]
   1bf72:	6872      	ldr	r2, [r6, #4]
   1bf74:	68b3      	ldr	r3, [r6, #8]
   1bf76:	f8d6 c00c 	ldr.w	ip, [r6, #12]
   1bf7a:	f8c4 c00c 	str.w	ip, [r4, #12]
   1bf7e:	6021      	str	r1, [r4, #0]
   1bf80:	6062      	str	r2, [r4, #4]
   1bf82:	60a3      	str	r3, [r4, #8]
   1bf84:	6931      	ldr	r1, [r6, #16]
   1bf86:	6972      	ldr	r2, [r6, #20]
   1bf88:	69b3      	ldr	r3, [r6, #24]
   1bf8a:	f8d6 c01c 	ldr.w	ip, [r6, #28]
   1bf8e:	f8c4 c01c 	str.w	ip, [r4, #28]
   1bf92:	6121      	str	r1, [r4, #16]
   1bf94:	6162      	str	r2, [r4, #20]
   1bf96:	61a3      	str	r3, [r4, #24]
   1bf98:	6829      	ldr	r1, [r5, #0]
   1bf9a:	686a      	ldr	r2, [r5, #4]
   1bf9c:	68ab      	ldr	r3, [r5, #8]
   1bf9e:	68ee      	ldr	r6, [r5, #12]
   1bfa0:	62e6      	str	r6, [r4, #44]	; 0x2c
   1bfa2:	6221      	str	r1, [r4, #32]
   1bfa4:	6262      	str	r2, [r4, #36]	; 0x24
   1bfa6:	62a3      	str	r3, [r4, #40]	; 0x28
   1bfa8:	69ab      	ldr	r3, [r5, #24]
   1bfaa:	6929      	ldr	r1, [r5, #16]
   1bfac:	696a      	ldr	r2, [r5, #20]
   1bfae:	69ee      	ldr	r6, [r5, #28]
   1bfb0:	63a3      	str	r3, [r4, #56]	; 0x38
  if (SecCmac(pKey, pText, textLen, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_CMAC_CMPL) == FALSE)
   1bfb2:	4b12      	ldr	r3, [pc, #72]	; (1bffc <SmpScCalcF4+0xac>)
  memcpy(pDst, pSrc, len);
   1bfb4:	6321      	str	r1, [r4, #48]	; 0x30
   1bfb6:	6362      	str	r2, [r4, #52]	; 0x34
   1bfb8:	63e6      	str	r6, [r4, #60]	; 0x3c
    *pCatBuf = z;
   1bfba:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
  if (SecCmac(pKey, pText, textLen, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_CMAC_CMPL) == FALSE)
   1bfbe:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
   1bfc2:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
   1bfc6:	9200      	str	r2, [sp, #0]
   1bfc8:	221c      	movs	r2, #28
   1bfca:	9201      	str	r2, [sp, #4]
   1bfcc:	4650      	mov	r0, sl
   1bfce:	2241      	movs	r2, #65	; 0x41
   1bfd0:	4621      	mov	r1, r4
   1bfd2:	f7f3 ffa3 	bl	ff1c <SecCmac>
   1bfd6:	b110      	cbz	r0, 1bfde <SmpScCalcF4+0x8e>
}
   1bfd8:	b002      	add	sp, #8
   1bfda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    WsfBufFree(pText);
   1bfde:	4620      	mov	r0, r4
   1bfe0:	f7f7 fbe8 	bl	137b4 <WsfBufFree>
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   1bfe4:	f640 0303 	movw	r3, #2051	; 0x803
    smpSmExecute(pCcb, pMsg);
   1bfe8:	4641      	mov	r1, r8
   1bfea:	4638      	mov	r0, r7
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   1bfec:	f8a8 3002 	strh.w	r3, [r8, #2]
}
   1bff0:	b002      	add	sp, #8
   1bff2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    smpSmExecute(pCcb, pMsg);
   1bff6:	f7fe bad3 	b.w	1a5a0 <smpSmExecute>
   1bffa:	bf00      	nop
   1bffc:	10005bfc 	.word	0x10005bfc

0001c000 <SmpScInit>:
    smpCb.ccb[i].pScCcb = &SMP_ScCcb[i];
   1c000:	4a0a      	ldr	r2, [pc, #40]	; (1c02c <SmpScInit+0x2c>)
   1c002:	4b0b      	ldr	r3, [pc, #44]	; (1c030 <SmpScInit+0x30>)
  smpCb.procAuthReq = smpScAuthReq;
   1c004:	480b      	ldr	r0, [pc, #44]	; (1c034 <SmpScInit+0x34>)
    smpCb.ccb[i].pScCcb = &SMP_ScCcb[i];
   1c006:	f102 011c 	add.w	r1, r2, #28
{
   1c00a:	b410      	push	{r4}
  smpCb.procPairing = smpScProcPairing;
   1c00c:	4c0a      	ldr	r4, [pc, #40]	; (1c038 <SmpScInit+0x38>)
    smpCb.ccb[i].pScCcb = &SMP_ScCcb[i];
   1c00e:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  smpCb.lescSupported = TRUE;
   1c012:	2101      	movs	r1, #1
    smpCb.ccb[i].pScCcb = &SMP_ScCcb[i];
   1c014:	645a      	str	r2, [r3, #68]	; 0x44
  smpCb.lescSupported = TRUE;
   1c016:	f883 10ec 	strb.w	r1, [r3, #236]	; 0xec
    smpCb.ccb[i].pScCcb = &SMP_ScCcb[i];
   1c01a:	3238      	adds	r2, #56	; 0x38
  smpCb.procAuthReq = smpScAuthReq;
   1c01c:	e9c3 4039 	strd	r4, r0, [r3, #228]	; 0xe4
    smpCb.ccb[i].pScCcb = &SMP_ScCcb[i];
   1c020:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
}
   1c024:	f85d 4b04 	ldr.w	r4, [sp], #4
   1c028:	4770      	bx	lr
   1c02a:	bf00      	nop
   1c02c:	10005cec 	.word	0x10005cec
   1c030:	10005bfc 	.word	0x10005bfc
   1c034:	0001b785 	.word	0x0001b785
   1c038:	0001b4a5 	.word	0x0001b4a5

0001c03c <SmpScCat>:
{
   1c03c:	b538      	push	{r3, r4, r5, lr}
   1c03e:	4605      	mov	r5, r0
   1c040:	4614      	mov	r4, r2
  memcpy(pDst, pSrc, len);
   1c042:	f7f0 f85d 	bl	c100 <memcpy>
  return pDst + len;
}
   1c046:	1928      	adds	r0, r5, r4
   1c048:	bd38      	pop	{r3, r4, r5, pc}
   1c04a:	bf00      	nop

0001c04c <SmpScCat128>:
 *
 *  \return Pointer to next byte after concatination.
 */
/*************************************************************************************************/
uint8_t *SmpScCat128(uint8_t *pDst, uint8_t *pSrc)
{
   1c04c:	b510      	push	{r4, lr}
   1c04e:	4604      	mov	r4, r0
  Calc128Cpy(pDst, pSrc);
   1c050:	f000 f9a4 	bl	1c39c <Calc128Cpy>
  return pDst + 16;
}
   1c054:	f104 0010 	add.w	r0, r4, #16
   1c058:	bd10      	pop	{r4, pc}
   1c05a:	bf00      	nop

0001c05c <smpScSendPubKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScSendPubKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1c05c:	b570      	push	{r4, r5, r6, lr}
  /* Transmit the public key */
  uint8_t   *pPkt;
  uint8_t   *p;

  /* set connection busy */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
   1c05e:	2201      	movs	r2, #1
{
   1c060:	4604      	mov	r4, r0
   1c062:	460e      	mov	r6, r1
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
   1c064:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
   1c068:	4611      	mov	r1, r2
   1c06a:	f7fc fc43 	bl	188f4 <DmConnSetIdle>

  /* start smp response timer */
  smpStartRspTimer(pCcb);
   1c06e:	4620      	mov	r0, r4
   1c070:	f7fd ff6c 	bl	19f4c <smpStartRspTimer>

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_PUB_KEY_MSG_LEN + L2C_PAYLOAD_START)) != NULL)
   1c074:	2049      	movs	r0, #73	; 0x49
   1c076:	f7ff f8ab 	bl	1b1d0 <smpMsgAlloc>
   1c07a:	b1b0      	cbz	r0, 1c0aa <smpScSendPubKey+0x4e>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, SMP_CMD_PUBLIC_KEY);
   1c07c:	230c      	movs	r3, #12
   1c07e:	7203      	strb	r3, [r0, #8]

    /* Store Public Key X data in LSB first format */
    WStrReverseCpy(p,  pCcb->pScCcb->pLocalPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
   1c080:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1c082:	4605      	mov	r5, r0
   1c084:	68d9      	ldr	r1, [r3, #12]
   1c086:	2220      	movs	r2, #32
   1c088:	3009      	adds	r0, #9
   1c08a:	f000 fa01 	bl	1c490 <WStrReverseCpy>

    /* Store Public Key Y data in LSB first format */
    WStrReverseCpy(p+SMP_PUB_KEY_LEN, pCcb->pScCcb->pLocalPublicKey->pubKeyY, SMP_PUB_KEY_LEN);
   1c08e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1c090:	68d9      	ldr	r1, [r3, #12]
   1c092:	2220      	movs	r2, #32
   1c094:	f105 0029 	add.w	r0, r5, #41	; 0x29
   1c098:	4411      	add	r1, r2
   1c09a:	f000 f9f9 	bl	1c490 <WStrReverseCpy>

    /* send packet */
    smpSendPkt(pCcb, pPkt);
   1c09e:	4629      	mov	r1, r5
   1c0a0:	4620      	mov	r0, r4
  {
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, pMsg);
  }
}
   1c0a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    smpSendPkt(pCcb, pPkt);
   1c0a6:	f7ff b873 	b.w	1b190 <smpSendPkt>
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   1c0aa:	f640 0303 	movw	r3, #2051	; 0x803
   1c0ae:	8073      	strh	r3, [r6, #2]
    smpSmExecute(pCcb, pMsg);
   1c0b0:	4631      	mov	r1, r6
   1c0b2:	4620      	mov	r0, r4
}
   1c0b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    smpSmExecute(pCcb, pMsg);
   1c0b8:	f7fe ba72 	b.w	1a5a0 <smpSmExecute>

0001c0bc <smpScSendDHKeyCheck>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScSendDHKeyCheck(smpCcb_t *pCcb, smpMsg_t *pMsg, uint8_t *pCheck)
{
   1c0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c0be:	4616      	mov	r6, r2
  uint8_t   *pPkt;
  uint8_t   *p;

  /* set connection busy */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
   1c0c0:	2201      	movs	r2, #1
{
   1c0c2:	4605      	mov	r5, r0
   1c0c4:	460f      	mov	r7, r1
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
   1c0c6:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
   1c0ca:	4611      	mov	r1, r2
   1c0cc:	f7fc fc12 	bl	188f4 <DmConnSetIdle>

  /* start smp response timer */
  smpStartRspTimer(pCcb);
   1c0d0:	4628      	mov	r0, r5
   1c0d2:	f7fd ff3b 	bl	19f4c <smpStartRspTimer>

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_DHKEY_CHECK_MSG_LEN + L2C_PAYLOAD_START)) != NULL)
   1c0d6:	2019      	movs	r0, #25
   1c0d8:	f7ff f87a 	bl	1b1d0 <smpMsgAlloc>
   1c0dc:	b168      	cbz	r0, 1c0fa <smpScSendDHKeyCheck+0x3e>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, SMP_CMD_DHKEY_CHECK);
   1c0de:	230d      	movs	r3, #13
   1c0e0:	7203      	strb	r3, [r0, #8]

    /* DH Key Check data is result of last CMAC operation (LSB first) */
    WStrReverseCpy(p, pCheck, SMP_DHKEY_CHECK_LEN);
   1c0e2:	4604      	mov	r4, r0
   1c0e4:	4631      	mov	r1, r6
   1c0e6:	3009      	adds	r0, #9
   1c0e8:	2210      	movs	r2, #16
   1c0ea:	f000 f9d1 	bl	1c490 <WStrReverseCpy>

    /* send packet */
    smpSendPkt(pCcb, pPkt);
   1c0ee:	4621      	mov	r1, r4
   1c0f0:	4628      	mov	r0, r5
  {
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, pMsg);
  }
}
   1c0f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    smpSendPkt(pCcb, pPkt);
   1c0f6:	f7ff b84b 	b.w	1b190 <smpSendPkt>
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   1c0fa:	f640 0303 	movw	r3, #2051	; 0x803
   1c0fe:	807b      	strh	r3, [r7, #2]
    smpSmExecute(pCcb, pMsg);
   1c100:	4639      	mov	r1, r7
   1c102:	4628      	mov	r0, r5
}
   1c104:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    smpSmExecute(pCcb, pMsg);
   1c108:	f7fe ba4a 	b.w	1a5a0 <smpSmExecute>

0001c10c <smpScSendRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScSendRand(smpCcb_t *pCcb, smpMsg_t *pMsg, uint8_t *pRand)
{
   1c10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c10e:	4616      	mov	r6, r2
  /* Transmit the Pair Rand */
  uint8_t   *pPkt;
  uint8_t   *p;

  /* set connection busy */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
   1c110:	2201      	movs	r2, #1
{
   1c112:	4605      	mov	r5, r0
   1c114:	460f      	mov	r7, r1
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
   1c116:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
   1c11a:	4611      	mov	r1, r2
   1c11c:	f7fc fbea 	bl	188f4 <DmConnSetIdle>

  /* start smp response timer */
  smpStartRspTimer(pCcb);
   1c120:	4628      	mov	r0, r5
   1c122:	f7fd ff13 	bl	19f4c <smpStartRspTimer>

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_PAIR_RAND_LEN + L2C_PAYLOAD_START)) != NULL)
   1c126:	2019      	movs	r0, #25
   1c128:	f7ff f852 	bl	1b1d0 <smpMsgAlloc>
   1c12c:	b168      	cbz	r0, 1c14a <smpScSendRand+0x3e>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_RAND);
   1c12e:	2304      	movs	r3, #4
   1c130:	7203      	strb	r3, [r0, #8]

    /* Store Random data (LSB first) */
    WStrReverseCpy(p, pRand, SMP_RAND_LEN);
   1c132:	4604      	mov	r4, r0
   1c134:	4631      	mov	r1, r6
   1c136:	3009      	adds	r0, #9
   1c138:	2210      	movs	r2, #16
   1c13a:	f000 f9a9 	bl	1c490 <WStrReverseCpy>

    /* send packet */
    smpSendPkt(pCcb, pPkt);
   1c13e:	4621      	mov	r1, r4
   1c140:	4628      	mov	r0, r5
  {
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, pMsg);
  }
}
   1c142:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    smpSendPkt(pCcb, pPkt);
   1c146:	f7ff b823 	b.w	1b190 <smpSendPkt>
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   1c14a:	f640 0303 	movw	r3, #2051	; 0x803
   1c14e:	807b      	strh	r3, [r7, #2]
    smpSmExecute(pCcb, pMsg);
   1c150:	4639      	mov	r1, r7
   1c152:	4628      	mov	r0, r5
}
   1c154:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    smpSmExecute(pCcb, pMsg);
   1c158:	f7fe ba22 	b.w	1a5a0 <smpSmExecute>

0001c15c <smpScSendPairCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScSendPairCnf(smpCcb_t *pCcb, smpMsg_t *pMsg, uint8_t *pCnf)
{
   1c15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c15e:	4616      	mov	r6, r2
  uint8_t   *pPkt;
  uint8_t   *p;

  /* set connection busy */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
   1c160:	2201      	movs	r2, #1
{
   1c162:	4605      	mov	r5, r0
   1c164:	460f      	mov	r7, r1
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
   1c166:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
   1c16a:	4611      	mov	r1, r2
   1c16c:	f7fc fbc2 	bl	188f4 <DmConnSetIdle>

  /* start smp response timer */
  smpStartRspTimer(pCcb);
   1c170:	4628      	mov	r0, r5
   1c172:	f7fd feeb 	bl	19f4c <smpStartRspTimer>

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_PAIR_CNF_LEN + L2C_PAYLOAD_START)) != NULL)
   1c176:	2019      	movs	r0, #25
   1c178:	f7ff f82a 	bl	1b1d0 <smpMsgAlloc>
   1c17c:	b168      	cbz	r0, 1c19a <smpScSendPairCnf+0x3e>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_CNF);
   1c17e:	2303      	movs	r3, #3
   1c180:	7203      	strb	r3, [r0, #8]

    /* Store Confirm data (LSB first) */
    WStrReverseCpy(p, pCnf, SMP_CONFIRM_LEN);
   1c182:	4604      	mov	r4, r0
   1c184:	4631      	mov	r1, r6
   1c186:	3009      	adds	r0, #9
   1c188:	2210      	movs	r2, #16
   1c18a:	f000 f981 	bl	1c490 <WStrReverseCpy>

    /* send packet */
    smpSendPkt(pCcb, pPkt);
   1c18e:	4621      	mov	r1, r4
   1c190:	4628      	mov	r0, r5
  {
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, pMsg);
  }
}
   1c192:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    smpSendPkt(pCcb, pPkt);
   1c196:	f7fe bffb 	b.w	1b190 <smpSendPkt>
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   1c19a:	f640 0303 	movw	r3, #2051	; 0x803
   1c19e:	807b      	strh	r3, [r7, #2]
    smpSmExecute(pCcb, pMsg);
   1c1a0:	4639      	mov	r1, r7
   1c1a2:	4628      	mov	r0, r5
}
   1c1a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    smpSmExecute(pCcb, pMsg);
   1c1a8:	f7fe b9fa 	b.w	1a5a0 <smpSmExecute>

0001c1ac <smpGetPkBit>:
 *  \return None.
 */
/*************************************************************************************************/
uint8_t smpGetPkBit(smpCcb_t *pCcb)
{
  smpScCcb_t *pScCb = pCcb->pScCcb;
   1c1ac:	6c43      	ldr	r3, [r0, #68]	; 0x44
  uint8_t indx = (SMP_RAND_LEN - 1) - pScCb->pkPos / 8;
   1c1ae:	78d8      	ldrb	r0, [r3, #3]
  uint8_t bit = pScCb->pkPos % 8;

  if (pScCb->pScratch->Ra[indx] & 1<<bit)
   1c1b0:	695a      	ldr	r2, [r3, #20]
  uint8_t indx = (SMP_RAND_LEN - 1) - pScCb->pkPos / 8;
   1c1b2:	08c3      	lsrs	r3, r0, #3
   1c1b4:	f1c3 030f 	rsb	r3, r3, #15
  if (pScCb->pScratch->Ra[indx] & 1<<bit)
   1c1b8:	fa52 f383 	uxtab	r3, r2, r3
   1c1bc:	f000 0207 	and.w	r2, r0, #7
   1c1c0:	f893 0020 	ldrb.w	r0, [r3, #32]
   1c1c4:	4110      	asrs	r0, r2
   1c1c6:	f000 0001 	and.w	r0, r0, #1
    return 0x81;

  return 0x80;
}
   1c1ca:	f040 0080 	orr.w	r0, r0, #128	; 0x80
   1c1ce:	4770      	bx	lr

0001c1d0 <SmpScGetCancelMsgWithReattempt>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SmpScGetCancelMsgWithReattempt(dmConnId_t connId, wsfMsgHdr_t *pHdr, uint8_t status)
{
   1c1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c1d2:	460d      	mov	r5, r1
   1c1d4:	4617      	mov	r7, r2
   1c1d6:	4606      	mov	r6, r0
  smpCcb_t *pCcb = smpCcbByConnId(connId);
   1c1d8:	f7fe fde4 	bl	1ada4 <smpCcbByConnId>
   1c1dc:	4604      	mov	r4, r0

  SMP_TRACE_INFO1("SmpScGetCancelMsgWithReattempt: %d", pCcb->attempts);
   1c1de:	f890 1042 	ldrb.w	r1, [r0, #66]	; 0x42
   1c1e2:	480c      	ldr	r0, [pc, #48]	; (1c214 <SmpScGetCancelMsgWithReattempt+0x44>)
   1c1e4:	f7f7 fe96 	bl	13f14 <WsfTrace>

  /* update repeated attempts count */
  pCcb->attempts++;
   1c1e8:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1c1ec:	3301      	adds	r3, #1
   1c1ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42

  pHdr->param = connId;
  pHdr->status = status;

  SmpDbPairingFailed(connId);
   1c1f2:	4630      	mov	r0, r6
  pHdr->param = connId;
   1c1f4:	802e      	strh	r6, [r5, #0]
  pHdr->status = status;
   1c1f6:	70ef      	strb	r7, [r5, #3]
  SmpDbPairingFailed(connId);
   1c1f8:	f7fe fbbc 	bl	1a974 <SmpDbPairingFailed>

  if (pCcb->attempts == pSmpCfg->maxAttempts)
   1c1fc:	4a06      	ldr	r2, [pc, #24]	; (1c218 <SmpScGetCancelMsgWithReattempt+0x48>)
   1c1fe:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1c202:	6812      	ldr	r2, [r2, #0]
   1c204:	79d2      	ldrb	r2, [r2, #7]
    pHdr->event = SMP_MSG_INT_MAX_ATTEMPTS;
  }
  else
  {
    /* else just fail */
    pHdr->event = SMP_MSG_API_CANCEL_REQ;
   1c206:	4293      	cmp	r3, r2
   1c208:	bf0c      	ite	eq
   1c20a:	230d      	moveq	r3, #13
   1c20c:	2303      	movne	r3, #3
   1c20e:	70ab      	strb	r3, [r5, #2]
  }
}
   1c210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c212:	bf00      	nop
   1c214:	00025568 	.word	0x00025568
   1c218:	10002b04 	.word	0x10002b04

0001c21c <smpScFailWithReattempt>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void smpScFailWithReattempt(smpCcb_t *pCcb)
{
   1c21c:	b570      	push	{r4, r5, r6, lr}
  wsfMsgHdr_t hdr;

  SmpScGetCancelMsgWithReattempt(pCcb->connId, &hdr, SMP_ERR_CONFIRM_VALUE);
   1c21e:	f890 603d 	ldrb.w	r6, [r0, #61]	; 0x3d
{
   1c222:	b082      	sub	sp, #8
   1c224:	4605      	mov	r5, r0
  smpCcb_t *pCcb = smpCcbByConnId(connId);
   1c226:	4630      	mov	r0, r6
   1c228:	f7fe fdbc 	bl	1ada4 <smpCcbByConnId>
   1c22c:	4604      	mov	r4, r0
  SMP_TRACE_INFO1("SmpScGetCancelMsgWithReattempt: %d", pCcb->attempts);
   1c22e:	4811      	ldr	r0, [pc, #68]	; (1c274 <smpScFailWithReattempt+0x58>)
   1c230:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
   1c234:	f7f7 fe6e 	bl	13f14 <WsfTrace>
  pCcb->attempts++;
   1c238:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  pHdr->param = connId;
   1c23c:	f8ad 6004 	strh.w	r6, [sp, #4]
  pCcb->attempts++;
   1c240:	3301      	adds	r3, #1
  SmpDbPairingFailed(connId);
   1c242:	4630      	mov	r0, r6
  pCcb->attempts++;
   1c244:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  pHdr->status = status;
   1c248:	2304      	movs	r3, #4
   1c24a:	f88d 3007 	strb.w	r3, [sp, #7]
  SmpDbPairingFailed(connId);
   1c24e:	f7fe fb91 	bl	1a974 <SmpDbPairingFailed>
  if (pCcb->attempts == pSmpCfg->maxAttempts)
   1c252:	4a09      	ldr	r2, [pc, #36]	; (1c278 <smpScFailWithReattempt+0x5c>)
   1c254:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1c258:	6812      	ldr	r2, [r2, #0]
   1c25a:	79d2      	ldrb	r2, [r2, #7]

  smpSmExecute(pCcb, (smpMsg_t *)&hdr);
   1c25c:	a901      	add	r1, sp, #4
    pHdr->event = SMP_MSG_API_CANCEL_REQ;
   1c25e:	4293      	cmp	r3, r2
   1c260:	bf0c      	ite	eq
   1c262:	230d      	moveq	r3, #13
   1c264:	2303      	movne	r3, #3
  smpSmExecute(pCcb, (smpMsg_t *)&hdr);
   1c266:	4628      	mov	r0, r5
   1c268:	f88d 3006 	strb.w	r3, [sp, #6]
   1c26c:	f7fe f998 	bl	1a5a0 <smpSmExecute>
}
   1c270:	b002      	add	sp, #8
   1c272:	bd70      	pop	{r4, r5, r6, pc}
   1c274:	00025568 	.word	0x00025568
   1c278:	10002b04 	.word	0x10002b04

0001c27c <smpLogByteArray>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpLogByteArray(char *str, uint8_t *pArray, uint8_t len)
{
   1c27c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c280:	4614      	mov	r4, r2
   1c282:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
   1c286:	460d      	mov	r5, r1
#if WSF_TOKEN_ENABLED == TRUE || WSF_TRACE_ENABLED == TRUE

  char buffer[512];
  int i, j=0, pos=0;

  SMP_TRACE_INFO0(str);
   1c288:	f7f7 fe44 	bl	13f14 <WsfTrace>

  while (j < len)
   1c28c:	2c00      	cmp	r4, #0
   1c28e:	d05c      	beq.n	1c34a <smpLogByteArray+0xce>
  int i, j=0, pos=0;
   1c290:	2600      	movs	r6, #0
   1c292:	46a0      	mov	r8, r4
    for (i=0; i<count; i++, j++)
    {
      uint8_t quad;

      if (i && i % 4 == 0)
        buffer[pos++] = ' ';
   1c294:	2720      	movs	r7, #32
    buffer[pos++] = '[';
   1c296:	235b      	movs	r3, #91	; 0x5b
    if (len-j < count)
   1c298:	f1b8 0f0f 	cmp.w	r8, #15
    buffer[pos++] = '[';
   1c29c:	f88d 3000 	strb.w	r3, [sp]
    if (len-j < count)
   1c2a0:	dd47      	ble.n	1c332 <smpLogByteArray+0xb6>
    int count = 16;
   1c2a2:	f04f 0810 	mov.w	r8, #16
      if (i && i % 4 == 0)
   1c2a6:	f106 3eff 	add.w	lr, r6, #4294967295
   1c2aa:	44ae      	add	lr, r5
    for (i=0; i<count; i++, j++)
   1c2ac:	2200      	movs	r2, #0
    buffer[pos++] = '[';
   1c2ae:	f04f 0c01 	mov.w	ip, #1
   1c2b2:	e005      	b.n	1c2c0 <smpLogByteArray+0x44>
      if (i && i % 4 == 0)
   1c2b4:	0793      	lsls	r3, r2, #30
        buffer[pos++] = ' ';
   1c2b6:	bf04      	itt	eq
   1c2b8:	f80d 700c 	strbeq.w	r7, [sp, ip]
   1c2bc:	f10c 0c01 	addeq.w	ip, ip, #1

      quad = (pArray[j] >> 4) & 0xf;
   1c2c0:	f81e 3f01 	ldrb.w	r3, [lr, #1]!

      if (quad < 10)
   1c2c4:	2b9f      	cmp	r3, #159	; 0x9f
      quad = (pArray[j] >> 4) & 0xf;
   1c2c6:	ea4f 1013 	mov.w	r0, r3, lsr #4
        buffer[pos++] = '0' + quad;
      else
        buffer[pos++] = 'a' + quad - 10;

      quad = pArray[j] & 0xf;
   1c2ca:	f003 030f 	and.w	r3, r3, #15
        buffer[pos++] = '0' + quad;
   1c2ce:	f10c 0101 	add.w	r1, ip, #1
   1c2d2:	bf92      	itee	ls
   1c2d4:	3030      	addls	r0, #48	; 0x30
        buffer[pos++] = 'a' + quad - 10;
   1c2d6:	f10c 0101 	addhi.w	r1, ip, #1
   1c2da:	3057      	addhi	r0, #87	; 0x57
    for (i=0; i<count; i++, j++)
   1c2dc:	3201      	adds	r2, #1

      if (quad < 10)
   1c2de:	2b09      	cmp	r3, #9
        buffer[pos++] = '0' + quad;
   1c2e0:	bf94      	ite	ls
   1c2e2:	3330      	addls	r3, #48	; 0x30
      else
        buffer[pos++] = 'a' + quad - 10;
   1c2e4:	3357      	addhi	r3, #87	; 0x57
    for (i=0; i<count; i++, j++)
   1c2e6:	4590      	cmp	r8, r2
   1c2e8:	f80d 000c 	strb.w	r0, [sp, ip]
      if (quad < 10)
   1c2ec:	f80d 3001 	strb.w	r3, [sp, r1]
        buffer[pos++] = '0' + quad;
   1c2f0:	f101 0c01 	add.w	ip, r1, #1
    for (i=0; i<count; i++, j++)
   1c2f4:	dcde      	bgt.n	1c2b4 <smpLogByteArray+0x38>
   1c2f6:	f1b8 0f00 	cmp.w	r8, #0
    }

    buffer[pos++] = ']';
    buffer[pos++] = '\0';
   1c2fa:	eb0d 030c 	add.w	r3, sp, ip
    for (i=0; i<count; i++, j++)
   1c2fe:	f108 38ff 	add.w	r8, r8, #4294967295
    buffer[pos++] = ']';
   1c302:	f04f 015d 	mov.w	r1, #93	; 0x5d
    for (i=0; i<count; i++, j++)
   1c306:	bfd8      	it	le
   1c308:	f04f 0800 	movle.w	r8, #0
    buffer[pos++] = '\0';
   1c30c:	2200      	movs	r2, #0
   1c30e:	3601      	adds	r6, #1
    buffer[pos++] = ']';
   1c310:	f80d 100c 	strb.w	r1, [sp, ip]
    for (i=0; i<count; i++, j++)
   1c314:	4446      	add	r6, r8
    SMP_TRACE_INFO0(buffer);
   1c316:	4668      	mov	r0, sp
    buffer[pos++] = '\0';
   1c318:	705a      	strb	r2, [r3, #1]
    SMP_TRACE_INFO0(buffer);
   1c31a:	f7f7 fdfb 	bl	13f14 <WsfTrace>
  while (j < len)
   1c31e:	42b4      	cmp	r4, r6
   1c320:	dd13      	ble.n	1c34a <smpLogByteArray+0xce>
   1c322:	eba4 0806 	sub.w	r8, r4, r6
    buffer[pos++] = '[';
   1c326:	235b      	movs	r3, #91	; 0x5b
    if (len-j < count)
   1c328:	f1b8 0f0f 	cmp.w	r8, #15
    buffer[pos++] = '[';
   1c32c:	f88d 3000 	strb.w	r3, [sp]
    if (len-j < count)
   1c330:	dcb7      	bgt.n	1c2a2 <smpLogByteArray+0x26>
    for (i=0; i<count; i++, j++)
   1c332:	b10e      	cbz	r6, 1c338 <smpLogByteArray+0xbc>
   1c334:	46b0      	mov	r8, r6
   1c336:	e7b6      	b.n	1c2a6 <smpLogByteArray+0x2a>
    buffer[pos++] = ']';
   1c338:	235d      	movs	r3, #93	; 0x5d
    SMP_TRACE_INFO0(buffer);
   1c33a:	4668      	mov	r0, sp
    buffer[pos++] = ']';
   1c33c:	f88d 3001 	strb.w	r3, [sp, #1]
    buffer[pos++] = '\0';
   1c340:	f88d 6002 	strb.w	r6, [sp, #2]
    SMP_TRACE_INFO0(buffer);
   1c344:	f7f7 fde6 	bl	13f14 <WsfTrace>
  while (j < len)
   1c348:	e7a5      	b.n	1c296 <smpLogByteArray+0x1a>
    buffer[pos++] = '\0';

    SMP_TRACE_INFO0(buffer);
  }
#endif
}
   1c34a:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   1c34e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c352:	bf00      	nop

0001c354 <BdaCpy>:
 *  \return None.
 */
/*************************************************************************************************/
void BdaCpy(uint8_t *pDst, const uint8_t *pSrc)
{
  memcpy(pDst, pSrc, BDA_ADDR_LEN);
   1c354:	680b      	ldr	r3, [r1, #0]
   1c356:	6003      	str	r3, [r0, #0]
   1c358:	888b      	ldrh	r3, [r1, #4]
   1c35a:	8083      	strh	r3, [r0, #4]
}
   1c35c:	4770      	bx	lr
   1c35e:	bf00      	nop

0001c360 <BdaCmp>:
 *
 *  \return TRUE if addresses match, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t BdaCmp(const uint8_t *pAddr1, const uint8_t *pAddr2)
{
   1c360:	b508      	push	{r3, lr}
  return (memcmp(pAddr1, pAddr2, BDA_ADDR_LEN) == 0);
   1c362:	2206      	movs	r2, #6
   1c364:	f005 f840 	bl	213e8 <memcmp>
}
   1c368:	fab0 f080 	clz	r0, r0
   1c36c:	0940      	lsrs	r0, r0, #5
   1c36e:	bd08      	pop	{r3, pc}

0001c370 <BdaClr>:
 *  \return pDst + BDA_ADDR_LEN
 */
/*************************************************************************************************/
uint8_t *BdaClr(uint8_t *pDst)
{
  memset(pDst, 0, BDA_ADDR_LEN);
   1c370:	2300      	movs	r3, #0
   1c372:	6003      	str	r3, [r0, #0]
   1c374:	8083      	strh	r3, [r0, #4]

  return (pDst + BDA_ADDR_LEN);
}
   1c376:	3006      	adds	r0, #6
   1c378:	4770      	bx	lr
   1c37a:	bf00      	nop

0001c37c <BdaIsZeros>:
*
*  \return TRUE if address is all zeros, FALSE otherwise.
*/
/*************************************************************************************************/
bool_t BdaIsZeros(const uint8_t *pAddr)
{
   1c37c:	b500      	push	{lr}
   1c37e:	b083      	sub	sp, #12
  uint8_t addrZeros[BDA_ADDR_LEN] = { 0 };
   1c380:	2300      	movs	r3, #0

  return (memcmp(pAddr, addrZeros, BDA_ADDR_LEN) == 0);
   1c382:	2206      	movs	r2, #6
   1c384:	4669      	mov	r1, sp
  uint8_t addrZeros[BDA_ADDR_LEN] = { 0 };
   1c386:	9300      	str	r3, [sp, #0]
   1c388:	f8ad 3004 	strh.w	r3, [sp, #4]
  return (memcmp(pAddr, addrZeros, BDA_ADDR_LEN) == 0);
   1c38c:	f005 f82c 	bl	213e8 <memcmp>
}
   1c390:	fab0 f080 	clz	r0, r0
   1c394:	0940      	lsrs	r0, r0, #5
   1c396:	b003      	add	sp, #12
   1c398:	f85d fb04 	ldr.w	pc, [sp], #4

0001c39c <Calc128Cpy>:
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Cpy(uint8_t *pDst, uint8_t *pSrc)
{
  memcpy(pDst, pSrc, CALC128_LEN);
   1c39c:	f8d1 c000 	ldr.w	ip, [r1]
   1c3a0:	684a      	ldr	r2, [r1, #4]
   1c3a2:	688b      	ldr	r3, [r1, #8]
   1c3a4:	68c9      	ldr	r1, [r1, #12]
   1c3a6:	60c1      	str	r1, [r0, #12]
   1c3a8:	f8c0 c000 	str.w	ip, [r0]
   1c3ac:	6042      	str	r2, [r0, #4]
   1c3ae:	6083      	str	r3, [r0, #8]
}
   1c3b0:	4770      	bx	lr
   1c3b2:	bf00      	nop

0001c3b4 <Calc128Cpy64>:
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Cpy64(uint8_t *pDst, uint8_t *pSrc)
{
  memcpy(pDst, pSrc, CALC128_LEN/2);
   1c3b4:	680b      	ldr	r3, [r1, #0]
   1c3b6:	684a      	ldr	r2, [r1, #4]
   1c3b8:	6042      	str	r2, [r0, #4]
   1c3ba:	6003      	str	r3, [r0, #0]
}
   1c3bc:	4770      	bx	lr
   1c3be:	bf00      	nop

0001c3c0 <Calc128Xor>:
/*************************************************************************************************/
void Calc128Xor(uint8_t *pDst, uint8_t *pSrc)
{
  uint8_t i;
  
  for (i = CALC128_LEN; i > 0; i--)
   1c3c0:	1c4b      	adds	r3, r1, #1
   1c3c2:	1ac3      	subs	r3, r0, r3
   1c3c4:	2b02      	cmp	r3, #2
   1c3c6:	d914      	bls.n	1c3f2 <Calc128Xor+0x32>
  {
    *pDst++ ^= *pSrc++;
   1c3c8:	680b      	ldr	r3, [r1, #0]
   1c3ca:	f8d0 c000 	ldr.w	ip, [r0]
   1c3ce:	6842      	ldr	r2, [r0, #4]
   1c3d0:	ea83 030c 	eor.w	r3, r3, ip
   1c3d4:	6003      	str	r3, [r0, #0]
   1c3d6:	684b      	ldr	r3, [r1, #4]
   1c3d8:	f8d0 c008 	ldr.w	ip, [r0, #8]
   1c3dc:	405a      	eors	r2, r3
   1c3de:	6042      	str	r2, [r0, #4]
   1c3e0:	688b      	ldr	r3, [r1, #8]
   1c3e2:	68c2      	ldr	r2, [r0, #12]
   1c3e4:	ea83 030c 	eor.w	r3, r3, ip
   1c3e8:	6083      	str	r3, [r0, #8]
   1c3ea:	68cb      	ldr	r3, [r1, #12]
   1c3ec:	4053      	eors	r3, r2
   1c3ee:	60c3      	str	r3, [r0, #12]
  for (i = CALC128_LEN; i > 0; i--)
   1c3f0:	4770      	bx	lr
    *pDst++ ^= *pSrc++;
   1c3f2:	f891 c000 	ldrb.w	ip, [r1]
   1c3f6:	7803      	ldrb	r3, [r0, #0]
   1c3f8:	7842      	ldrb	r2, [r0, #1]
   1c3fa:	ea83 030c 	eor.w	r3, r3, ip
   1c3fe:	7003      	strb	r3, [r0, #0]
   1c400:	784b      	ldrb	r3, [r1, #1]
   1c402:	f890 c002 	ldrb.w	ip, [r0, #2]
   1c406:	4053      	eors	r3, r2
   1c408:	7043      	strb	r3, [r0, #1]
   1c40a:	788b      	ldrb	r3, [r1, #2]
   1c40c:	78c2      	ldrb	r2, [r0, #3]
   1c40e:	ea83 030c 	eor.w	r3, r3, ip
   1c412:	7083      	strb	r3, [r0, #2]
   1c414:	78cb      	ldrb	r3, [r1, #3]
   1c416:	f890 c004 	ldrb.w	ip, [r0, #4]
   1c41a:	4053      	eors	r3, r2
   1c41c:	70c3      	strb	r3, [r0, #3]
   1c41e:	790b      	ldrb	r3, [r1, #4]
   1c420:	7942      	ldrb	r2, [r0, #5]
   1c422:	ea83 030c 	eor.w	r3, r3, ip
   1c426:	7103      	strb	r3, [r0, #4]
   1c428:	794b      	ldrb	r3, [r1, #5]
   1c42a:	f890 c006 	ldrb.w	ip, [r0, #6]
   1c42e:	4053      	eors	r3, r2
   1c430:	7143      	strb	r3, [r0, #5]
   1c432:	798b      	ldrb	r3, [r1, #6]
   1c434:	79c2      	ldrb	r2, [r0, #7]
   1c436:	ea83 030c 	eor.w	r3, r3, ip
   1c43a:	7183      	strb	r3, [r0, #6]
   1c43c:	79cb      	ldrb	r3, [r1, #7]
   1c43e:	f890 c008 	ldrb.w	ip, [r0, #8]
   1c442:	4053      	eors	r3, r2
   1c444:	71c3      	strb	r3, [r0, #7]
   1c446:	7a0b      	ldrb	r3, [r1, #8]
   1c448:	7a42      	ldrb	r2, [r0, #9]
   1c44a:	ea83 030c 	eor.w	r3, r3, ip
   1c44e:	7203      	strb	r3, [r0, #8]
   1c450:	7a4b      	ldrb	r3, [r1, #9]
   1c452:	4053      	eors	r3, r2
   1c454:	7243      	strb	r3, [r0, #9]
   1c456:	7a82      	ldrb	r2, [r0, #10]
   1c458:	7a8b      	ldrb	r3, [r1, #10]
   1c45a:	4053      	eors	r3, r2
   1c45c:	7283      	strb	r3, [r0, #10]
   1c45e:	7acb      	ldrb	r3, [r1, #11]
   1c460:	f890 c00b 	ldrb.w	ip, [r0, #11]
   1c464:	7b02      	ldrb	r2, [r0, #12]
   1c466:	ea83 030c 	eor.w	r3, r3, ip
   1c46a:	72c3      	strb	r3, [r0, #11]
   1c46c:	7b0b      	ldrb	r3, [r1, #12]
   1c46e:	f890 c00d 	ldrb.w	ip, [r0, #13]
   1c472:	4053      	eors	r3, r2
   1c474:	7303      	strb	r3, [r0, #12]
   1c476:	7b4b      	ldrb	r3, [r1, #13]
   1c478:	7b82      	ldrb	r2, [r0, #14]
   1c47a:	ea83 030c 	eor.w	r3, r3, ip
   1c47e:	7343      	strb	r3, [r0, #13]
   1c480:	7b8b      	ldrb	r3, [r1, #14]
   1c482:	4053      	eors	r3, r2
   1c484:	7383      	strb	r3, [r0, #14]
   1c486:	7bcb      	ldrb	r3, [r1, #15]
   1c488:	7bc2      	ldrb	r2, [r0, #15]
   1c48a:	4053      	eors	r3, r2
   1c48c:	73c3      	strb	r3, [r0, #15]
  }
}
   1c48e:	4770      	bx	lr

0001c490 <WStrReverseCpy>:
/*************************************************************************************************/
void WStrReverseCpy(uint8_t *pBuf1, const uint8_t *pBuf2, uint16_t len)
{
  int16_t i;

  for (i=0; i<len; i++)
   1c490:	b17a      	cbz	r2, 1c4b2 <WStrReverseCpy+0x22>
   1c492:	2300      	movs	r3, #0
{
   1c494:	b530      	push	{r4, r5, lr}
  for (i=0; i<len; i++)
   1c496:	469c      	mov	ip, r3
  {
    pBuf1[len-1-i] = pBuf2[i];
   1c498:	1e55      	subs	r5, r2, #1
   1c49a:	1c5c      	adds	r4, r3, #1
   1c49c:	f811 e003 	ldrb.w	lr, [r1, r3]
   1c4a0:	eba5 0c0c 	sub.w	ip, r5, ip
   1c4a4:	b223      	sxth	r3, r4
  for (i=0; i<len; i++)
   1c4a6:	4293      	cmp	r3, r2
    pBuf1[len-1-i] = pBuf2[i];
   1c4a8:	f800 e00c 	strb.w	lr, [r0, ip]
  for (i=0; i<len; i++)
   1c4ac:	469c      	mov	ip, r3
   1c4ae:	dbf4      	blt.n	1c49a <WStrReverseCpy+0xa>
  }
}
   1c4b0:	bd30      	pop	{r4, r5, pc}
   1c4b2:	4770      	bx	lr

0001c4b4 <WStrReverse>:
/*************************************************************************************************/
void WStrReverse(uint8_t *pBuf, uint8_t len)
{
  uint8_t i, temp;

  for (i=0; i<len/2; i++)
   1c4b4:	084b      	lsrs	r3, r1, #1
   1c4b6:	d00c      	beq.n	1c4d2 <WStrReverse+0x1e>
   1c4b8:	1e5a      	subs	r2, r3, #1
   1c4ba:	4401      	add	r1, r0
   1c4bc:	1e43      	subs	r3, r0, #1
   1c4be:	fa50 fc82 	uxtab	ip, r0, r2
  {
    temp = pBuf[len-i-1];
    pBuf[len-i-1] = pBuf[i];
   1c4c2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    temp = pBuf[len-i-1];
   1c4c6:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
    pBuf[len-i-1] = pBuf[i];
   1c4ca:	7008      	strb	r0, [r1, #0]
  for (i=0; i<len/2; i++)
   1c4cc:	4563      	cmp	r3, ip
    pBuf[i] = temp;
   1c4ce:	701a      	strb	r2, [r3, #0]
  for (i=0; i<len/2; i++)
   1c4d0:	d1f7      	bne.n	1c4c2 <WStrReverse+0xe>
  }
}
   1c4d2:	4770      	bx	lr

0001c4d4 <tagDiscCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void tagDiscCback(dmConnId_t connId, uint8_t status)
{
   1c4d4:	b530      	push	{r4, r5, lr}
   1c4d6:	4604      	mov	r4, r0
   1c4d8:	b083      	sub	sp, #12
  switch(status)
   1c4da:	2908      	cmp	r1, #8
   1c4dc:	d80e      	bhi.n	1c4fc <tagDiscCback+0x28>
   1c4de:	e8df f001 	tbb	[pc, r1]
   1c4e2:	1d16      	.short	0x1d16
   1c4e4:	4b302722 	.word	0x4b302722
   1c4e8:	0d05      	.short	0x0d05
   1c4ea:	0f          	.byte	0x0f
   1c4eb:	00          	.byte	0x00
      }
      break;

    case APP_DISC_CFG_START:
      /* start configuration */
      AppDiscConfigure(connId, APP_DISC_CFG_START, TAG_DISC_CFG_LIST_LEN,
   1c4ec:	4a34      	ldr	r2, [pc, #208]	; (1c5c0 <tagDiscCback+0xec>)
   1c4ee:	4b35      	ldr	r3, [pc, #212]	; (1c5c4 <tagDiscCback+0xf0>)
   1c4f0:	2106      	movs	r1, #6
   1c4f2:	e9cd 1200 	strd	r1, r2, [sp]
   1c4f6:	2203      	movs	r2, #3
   1c4f8:	f001 fd5a 	bl	1dfb0 <AppDiscConfigure>
      break;

    default:
      break;
  }
}
   1c4fc:	b003      	add	sp, #12
   1c4fe:	bd30      	pop	{r4, r5, pc}
      AppDiscComplete(connId, APP_DISC_CFG_CMPL);
   1c500:	2108      	movs	r1, #8
   1c502:	4620      	mov	r0, r4
}
   1c504:	b003      	add	sp, #12
   1c506:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      AppDiscComplete(connId, APP_DISC_CFG_CMPL);
   1c50a:	f001 bcc5 	b.w	1de98 <AppDiscComplete>
      AppDiscSetHdlList(connId, TAG_DISC_HDL_LIST_LEN, tagCb.hdlList);
   1c50e:	4a2c      	ldr	r2, [pc, #176]	; (1c5c0 <tagDiscCback+0xec>)
   1c510:	2106      	movs	r1, #6
}
   1c512:	b003      	add	sp, #12
   1c514:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      AppDiscSetHdlList(connId, TAG_DISC_HDL_LIST_LEN, tagCb.hdlList);
   1c518:	f001 bcb4 	b.w	1de84 <AppDiscSetHdlList>
}
   1c51c:	b003      	add	sp, #12
   1c51e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      AppDiscReadDatabaseHash(connId);
   1c522:	f001 bdbf 	b.w	1e0a4 <AppDiscReadDatabaseHash>
}
   1c526:	b003      	add	sp, #12
   1c528:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      AppSlaveSecurityReq(connId);
   1c52c:	f002 bf14 	b.w	1f358 <AppSlaveSecurityReq>
      tagCb.discState = TAG_DISC_IAS_SVC;
   1c530:	4923      	ldr	r1, [pc, #140]	; (1c5c0 <tagDiscCback+0xec>)
   1c532:	2300      	movs	r3, #0
   1c534:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b
}
   1c538:	b003      	add	sp, #12
   1c53a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      FmplIasDiscover(connId, pTagIasHdlList);
   1c53e:	f7f3 be01 	b.w	10144 <FmplIasDiscover>
        if (tagCb.discState == TAG_DISC_IAS_SVC)
   1c542:	4d1f      	ldr	r5, [pc, #124]	; (1c5c0 <tagDiscCback+0xec>)
   1c544:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
      tagCb.discState++;
   1c548:	3301      	adds	r3, #1
   1c54a:	b2db      	uxtb	r3, r3
      if (tagCb.discState == TAG_DISC_GATT_SVC)
   1c54c:	2b01      	cmp	r3, #1
      tagCb.discState++;
   1c54e:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
      if (tagCb.discState == TAG_DISC_GATT_SVC)
   1c552:	d024      	beq.n	1c59e <tagDiscCback+0xca>
      else if (tagCb.discState == TAG_DISC_GAP_SVC)
   1c554:	2b02      	cmp	r3, #2
   1c556:	d01b      	beq.n	1c590 <tagDiscCback+0xbc>
        AppDiscComplete(connId, APP_DISC_CMPL);
   1c558:	2104      	movs	r1, #4
   1c55a:	4620      	mov	r0, r4
   1c55c:	f001 fc9c 	bl	1de98 <AppDiscComplete>
  if ((pTagGapHdlList[GAP_RPAO_HDL_IDX] != ATT_HANDLE_NONE) &&
   1c560:	896b      	ldrh	r3, [r5, #10]
   1c562:	bb1b      	cbnz	r3, 1c5ac <tagDiscCback+0xd8>
        AppDiscConfigure(connId, APP_DISC_CFG_START, TAG_DISC_CFG_LIST_LEN,
   1c564:	2106      	movs	r1, #6
   1c566:	e9cd 1500 	strd	r1, r5, [sp]
   1c56a:	4b16      	ldr	r3, [pc, #88]	; (1c5c4 <tagDiscCback+0xf0>)
   1c56c:	2203      	movs	r2, #3
   1c56e:	4620      	mov	r0, r4
   1c570:	f001 fd1e 	bl	1dfb0 <AppDiscConfigure>
}
   1c574:	b003      	add	sp, #12
   1c576:	bd30      	pop	{r4, r5, pc}
      if (pAppCfg->abortDisc)
   1c578:	4b13      	ldr	r3, [pc, #76]	; (1c5c8 <tagDiscCback+0xf4>)
        if (tagCb.discState == TAG_DISC_IAS_SVC)
   1c57a:	4d11      	ldr	r5, [pc, #68]	; (1c5c0 <tagDiscCback+0xec>)
      if (pAppCfg->abortDisc)
   1c57c:	681b      	ldr	r3, [r3, #0]
   1c57e:	781b      	ldrb	r3, [r3, #0]
   1c580:	2b00      	cmp	r3, #0
   1c582:	d0df      	beq.n	1c544 <tagDiscCback+0x70>
        if (tagCb.discState == TAG_DISC_IAS_SVC)
   1c584:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   1c588:	2b00      	cmp	r3, #0
   1c58a:	d1dd      	bne.n	1c548 <tagDiscCback+0x74>
          AppDiscComplete(connId, APP_DISC_FAILED);
   1c58c:	2105      	movs	r1, #5
   1c58e:	e7b8      	b.n	1c502 <tagDiscCback+0x2e>
        GapDiscover(connId, pTagGapHdlList);
   1c590:	490e      	ldr	r1, [pc, #56]	; (1c5cc <tagDiscCback+0xf8>)
   1c592:	4620      	mov	r0, r4
}
   1c594:	b003      	add	sp, #12
   1c596:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        GapDiscover(connId, pTagGapHdlList);
   1c59a:	f7f4 ba11 	b.w	109c0 <GapDiscover>
        GattDiscover(connId, pTagGattHdlList);
   1c59e:	490c      	ldr	r1, [pc, #48]	; (1c5d0 <tagDiscCback+0xfc>)
   1c5a0:	4620      	mov	r0, r4
}
   1c5a2:	b003      	add	sp, #12
   1c5a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        GattDiscover(connId, pTagGattHdlList);
   1c5a8:	f7f8 ba5a 	b.w	14a60 <GattDiscover>
      ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE))
   1c5ac:	4620      	mov	r0, r4
   1c5ae:	f001 fe47 	bl	1e240 <AppDbGetHdl>
  if ((pTagGapHdlList[GAP_RPAO_HDL_IDX] != ATT_HANDLE_NONE) &&
   1c5b2:	2800      	cmp	r0, #0
   1c5b4:	d0d6      	beq.n	1c564 <tagDiscCback+0x90>
    AppDbSetPeerRpao(dbHdl, TRUE);
   1c5b6:	2101      	movs	r1, #1
   1c5b8:	f7f8 f96e 	bl	14898 <AppDbSetPeerRpao>
   1c5bc:	e7d2      	b.n	1c564 <tagDiscCback+0x90>
   1c5be:	bf00      	nop
   1c5c0:	10005d40 	.word	0x10005d40
   1c5c4:	00025680 	.word	0x00025680
   1c5c8:	10005f34 	.word	0x10005f34
   1c5cc:	10005d48 	.word	0x10005d48
   1c5d0:	10005d42 	.word	0x10005d42

0001c5d4 <tagCccCback>:
{
   1c5d4:	b538      	push	{r3, r4, r5, lr}
  if ((pEvt->handle != ATT_HANDLE_NONE) &&
   1c5d6:	8883      	ldrh	r3, [r0, #4]
{
   1c5d8:	4604      	mov	r4, r0
  if ((pEvt->handle != ATT_HANDLE_NONE) &&
   1c5da:	b993      	cbnz	r3, 1c602 <tagCccCback+0x2e>
  if ((pMsg = WsfMsgAlloc(sizeof(attsCccEvt_t))) != NULL)
   1c5dc:	200a      	movs	r0, #10
   1c5de:	f7f7 f919 	bl	13814 <WsfMsgAlloc>
   1c5e2:	4601      	mov	r1, r0
   1c5e4:	b160      	cbz	r0, 1c600 <tagCccCback+0x2c>
    memcpy(pMsg, pEvt, sizeof(attsCccEvt_t));
   1c5e6:	6823      	ldr	r3, [r4, #0]
   1c5e8:	6862      	ldr	r2, [r4, #4]
   1c5ea:	6042      	str	r2, [r0, #4]
   1c5ec:	6003      	str	r3, [r0, #0]
   1c5ee:	8922      	ldrh	r2, [r4, #8]
    WsfMsgSend(tagCb.handlerId, pMsg);
   1c5f0:	4b0c      	ldr	r3, [pc, #48]	; (1c624 <tagCccCback+0x50>)
    memcpy(pMsg, pEvt, sizeof(attsCccEvt_t));
   1c5f2:	8102      	strh	r2, [r0, #8]
    WsfMsgSend(tagCb.handlerId, pMsg);
   1c5f4:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
}
   1c5f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    WsfMsgSend(tagCb.handlerId, pMsg);
   1c5fc:	f7f7 b916 	b.w	1382c <WsfMsgSend>
}
   1c600:	bd38      	pop	{r3, r4, r5, pc}
      ((dbHdl = AppDbGetHdl((dmConnId_t) pEvt->hdr.param)) != APP_DB_HDL_NONE) &&
   1c602:	7800      	ldrb	r0, [r0, #0]
   1c604:	f001 fe1c 	bl	1e240 <AppDbGetHdl>
  if ((pEvt->handle != ATT_HANDLE_NONE) &&
   1c608:	4605      	mov	r5, r0
   1c60a:	2800      	cmp	r0, #0
   1c60c:	d0e6      	beq.n	1c5dc <tagCccCback+0x8>
      AppCheckBonded((dmConnId_t)pEvt->hdr.param))
   1c60e:	7820      	ldrb	r0, [r4, #0]
   1c610:	f001 fd8e 	bl	1e130 <AppCheckBonded>
      ((dbHdl = AppDbGetHdl((dmConnId_t) pEvt->hdr.param)) != APP_DB_HDL_NONE) &&
   1c614:	2800      	cmp	r0, #0
   1c616:	d0e1      	beq.n	1c5dc <tagCccCback+0x8>
    AppDbSetCccTblValue(dbHdl, pEvt->idx, pEvt->value);
   1c618:	88e2      	ldrh	r2, [r4, #6]
   1c61a:	7a21      	ldrb	r1, [r4, #8]
   1c61c:	4628      	mov	r0, r5
   1c61e:	f7f8 f8c1 	bl	147a4 <AppDbSetCccTblValue>
   1c622:	e7db      	b.n	1c5dc <tagCccCback+0x8>
   1c624:	10005d40 	.word	0x10005d40

0001c628 <tagAttCback>:
{
   1c628:	b538      	push	{r3, r4, r5, lr}
   1c62a:	4605      	mov	r5, r0
  if ((pMsg = WsfMsgAlloc(sizeof(attEvt_t) + pEvt->valueLen)) != NULL)
   1c62c:	8900      	ldrh	r0, [r0, #8]
   1c62e:	3010      	adds	r0, #16
   1c630:	b280      	uxth	r0, r0
   1c632:	f7f7 f8ef 	bl	13814 <WsfMsgAlloc>
   1c636:	b1a0      	cbz	r0, 1c662 <tagAttCback+0x3a>
    memcpy(pMsg, pEvt, sizeof(attEvt_t));
   1c638:	68e9      	ldr	r1, [r5, #12]
   1c63a:	682a      	ldr	r2, [r5, #0]
   1c63c:	68ab      	ldr	r3, [r5, #8]
   1c63e:	60c1      	str	r1, [r0, #12]
    pMsg->pValue = (uint8_t *) (pMsg + 1);
   1c640:	4604      	mov	r4, r0
   1c642:	3010      	adds	r0, #16
    memcpy(pMsg, pEvt, sizeof(attEvt_t));
   1c644:	60a3      	str	r3, [r4, #8]
   1c646:	6022      	str	r2, [r4, #0]
    pMsg->pValue = (uint8_t *) (pMsg + 1);
   1c648:	6060      	str	r0, [r4, #4]
    memcpy(pMsg->pValue, pEvt->pValue, pEvt->valueLen);
   1c64a:	6869      	ldr	r1, [r5, #4]
   1c64c:	892a      	ldrh	r2, [r5, #8]
   1c64e:	f7ef fd57 	bl	c100 <memcpy>
    WsfMsgSend(tagCb.handlerId, pMsg);
   1c652:	4b04      	ldr	r3, [pc, #16]	; (1c664 <tagAttCback+0x3c>)
   1c654:	4621      	mov	r1, r4
   1c656:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
}
   1c65a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    WsfMsgSend(tagCb.handlerId, pMsg);
   1c65e:	f7f7 b8e5 	b.w	1382c <WsfMsgSend>
}
   1c662:	bd38      	pop	{r3, r4, r5, pc}
   1c664:	10005d40 	.word	0x10005d40

0001c668 <tagBtnCback>:
{
   1c668:	b570      	push	{r4, r5, r6, lr}
   1c66a:	4604      	mov	r4, r0
  if ((connId = AppConnIsOpen()) != DM_CONN_ID_NONE)
   1c66c:	f001 fddc 	bl	1e228 <AppConnIsOpen>
   1c670:	b148      	cbz	r0, 1c686 <tagBtnCback+0x1e>
    switch (btn)
   1c672:	3c02      	subs	r4, #2
   1c674:	4605      	mov	r5, r0
   1c676:	2c06      	cmp	r4, #6
   1c678:	d814      	bhi.n	1c6a4 <tagBtnCback+0x3c>
   1c67a:	e8df f004 	tbb	[pc, r4]
   1c67e:	1b14      	.short	0x1b14
   1c680:	26131322 	.word	0x26131322
   1c684:	0e          	.byte	0x0e
   1c685:	00          	.byte	0x00
    switch (btn)
   1c686:	3c02      	subs	r4, #2
   1c688:	2c08      	cmp	r4, #8
   1c68a:	d80b      	bhi.n	1c6a4 <tagBtnCback+0x3c>
   1c68c:	e8df f004 	tbb	[pc, r4]
   1c690:	312a512c 	.word	0x312a512c
   1c694:	473f3b0a 	.word	0x473f3b0a
   1c698:	35          	.byte	0x35
   1c699:	00          	.byte	0x00
          uint8_t addrType = DmConnPeerAddrType(connId);
   1c69a:	f7fc f8e5 	bl	18868 <DmConnPeerAddrType>
          if (addrType == DM_ADDR_PUBLIC)
   1c69e:	4604      	mov	r4, r0
   1c6a0:	2800      	cmp	r0, #0
   1c6a2:	d064      	beq.n	1c76e <tagBtnCback+0x106>
}
   1c6a4:	bd70      	pop	{r4, r5, r6, pc}
        FmplSendAlert(connId, pTagIasHdlList[FMPL_IAS_AL_HDL_IDX], CH_ALERT_LVL_HIGH);
   1c6a6:	4b47      	ldr	r3, [pc, #284]	; (1c7c4 <tagBtnCback+0x15c>)
}
   1c6a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        FmplSendAlert(connId, pTagIasHdlList[FMPL_IAS_AL_HDL_IDX], CH_ALERT_LVL_HIGH);
   1c6ac:	8819      	ldrh	r1, [r3, #0]
   1c6ae:	2202      	movs	r2, #2
   1c6b0:	f7f3 bd5a 	b.w	10168 <FmplSendAlert>
        FmplSendAlert(connId, pTagIasHdlList[FMPL_IAS_AL_HDL_IDX], CH_ALERT_LVL_NONE);
   1c6b4:	4b43      	ldr	r3, [pc, #268]	; (1c7c4 <tagBtnCback+0x15c>)
}
   1c6b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        FmplSendAlert(connId, pTagIasHdlList[FMPL_IAS_AL_HDL_IDX], CH_ALERT_LVL_NONE);
   1c6ba:	8819      	ldrh	r1, [r3, #0]
   1c6bc:	2200      	movs	r2, #0
   1c6be:	f7f3 bd53 	b.w	10168 <FmplSendAlert>
}
   1c6c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        AppConnClose(connId);
   1c6c6:	f001 bda9 	b.w	1e21c <AppConnClose>
        if (tagCb.inProgress)
   1c6ca:	4c3e      	ldr	r4, [pc, #248]	; (1c7c4 <tagBtnCback+0x15c>)
   1c6cc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   1c6d0:	b3bb      	cbz	r3, 1c742 <tagBtnCback+0xda>
          tagCb.inProgress = FALSE;
   1c6d2:	2300      	movs	r3, #0
   1c6d4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          WsfTimerStop(&tagCb.rssiTimer);
   1c6d8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
}
   1c6dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          WsfTimerStop(&tagCb.rssiTimer);
   1c6e0:	f7f7 bb78 	b.w	13dd4 <WsfTimerStop>
        AppSlaveClearAllBondingInfo();
   1c6e4:	f002 fe58 	bl	1f398 <AppSlaveClearAllBondingInfo>
}
   1c6e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        AppAdvStart(APP_MODE_AUTO_INIT);
   1c6ec:	2002      	movs	r0, #2
   1c6ee:	f002 bf0f 	b.w	1f510 <AppAdvStart>
}
   1c6f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        SvcCoreGapAddRpaoCh();
   1c6f6:	f004 be27 	b.w	21348 <SvcCoreGapAddRpaoCh>
}
   1c6fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        DmDevPrivStart(15 * 60);
   1c6fe:	f44f 7061 	mov.w	r0, #900	; 0x384
   1c702:	f7fc bae5 	b.w	18cd0 <DmDevPrivStart>
}
   1c706:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        AppAdvStop();
   1c70a:	f002 bf31 	b.w	1f570 <AppAdvStop>
        DmDevWhiteListClear();
   1c70e:	f7fc fab5 	bl	18c7c <DmDevWhiteListClear>
        DmDevSetFilterPolicy(DM_FILT_POLICY_MODE_ADV, HCI_ADV_FILT_NONE);
   1c712:	2100      	movs	r1, #0
}
   1c714:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        DmDevSetFilterPolicy(DM_FILT_POLICY_MODE_ADV, HCI_ADV_FILT_NONE);
   1c718:	4608      	mov	r0, r1
   1c71a:	f7fc bab1 	b.w	18c80 <DmDevSetFilterPolicy>
        if (DmLlPrivEnabled() && DM_RAND_ADDR_RPA(tagCb.peerAddr, tagCb.addrType))
   1c71e:	f7fc fb47 	bl	18db0 <DmLlPrivEnabled>
   1c722:	b1d0      	cbz	r0, 1c75a <tagBtnCback+0xf2>
   1c724:	4c27      	ldr	r4, [pc, #156]	; (1c7c4 <tagBtnCback+0x15c>)
   1c726:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
   1c72a:	2901      	cmp	r1, #1
   1c72c:	d02c      	beq.n	1c788 <tagBtnCback+0x120>
        AppConnAccept(DM_ADV_CONN_DIRECT_LO_DUTY, tagCb.addrType, tagCb.peerAddr, tagCb.dbHdl);
   1c72e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1c730:	e017      	b.n	1c762 <tagBtnCback+0xfa>
        AppSetBondable(TRUE);
   1c732:	2001      	movs	r0, #1
   1c734:	f002 fe0a 	bl	1f34c <AppSetBondable>
}
   1c738:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        AppAdvStart(APP_MODE_DISCOVERABLE);
   1c73c:	2001      	movs	r0, #1
   1c73e:	f002 bee7 	b.w	1f510 <AppAdvStart>
          tagCb.inProgress = TRUE;
   1c742:	2301      	movs	r3, #1
   1c744:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          DmConnReadRssi(connId);
   1c748:	f7fc f802 	bl	18750 <DmConnReadRssi>
          WsfTimerStartSec(&tagCb.rssiTimer, TAG_READ_RSSI_INTERVAL);
   1c74c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1c750:	2103      	movs	r1, #3
}
   1c752:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          WsfTimerStartSec(&tagCb.rssiTimer, TAG_READ_RSSI_INTERVAL);
   1c756:	f7f7 bab7 	b.w	13cc8 <WsfTimerStartSec>
        AppConnAccept(DM_ADV_CONN_DIRECT_LO_DUTY, tagCb.addrType, tagCb.peerAddr, tagCb.dbHdl);
   1c75a:	4b1a      	ldr	r3, [pc, #104]	; (1c7c4 <tagBtnCback+0x15c>)
   1c75c:	f893 1043 	ldrb.w	r1, [r3, #67]	; 0x43
   1c760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c762:	4a19      	ldr	r2, [pc, #100]	; (1c7c8 <tagBtnCback+0x160>)
}
   1c764:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        AppConnAccept(DM_ADV_CONN_DIRECT_LO_DUTY, tagCb.addrType, tagCb.peerAddr, tagCb.dbHdl);
   1c768:	2004      	movs	r0, #4
   1c76a:	f002 bf2d 	b.w	1f5c8 <AppConnAccept>
            DmDevWhiteListAdd(addrType, DmConnPeerAddr(connId));
   1c76e:	4628      	mov	r0, r5
   1c770:	f7fc f884 	bl	1887c <DmConnPeerAddr>
   1c774:	4601      	mov	r1, r0
   1c776:	4620      	mov	r0, r4
   1c778:	f7fc fa7e 	bl	18c78 <DmDevWhiteListAdd>
            DmDevSetFilterPolicy(DM_FILT_POLICY_MODE_ADV, HCI_ADV_FILT_ALL);
   1c77c:	4620      	mov	r0, r4
   1c77e:	2103      	movs	r1, #3
}
   1c780:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            DmDevSetFilterPolicy(DM_FILT_POLICY_MODE_ADV, HCI_ADV_FILT_ALL);
   1c784:	f7fc ba7c 	b.w	18c80 <DmDevSetFilterPolicy>
        if (DmLlPrivEnabled() && DM_RAND_ADDR_RPA(tagCb.peerAddr, tagCb.addrType))
   1c788:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1c78c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1c790:	2b40      	cmp	r3, #64	; 0x40
          if ((pPeerKey = tagGetPeerKey(tagCb.dbHdl)) != NULL)
   1c792:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if (DmLlPrivEnabled() && DM_RAND_ADDR_RPA(tagCb.peerAddr, tagCb.addrType))
   1c794:	d1e5      	bne.n	1c762 <tagBtnCback+0xfa>
  if (dbHdl != APP_DB_HDL_NONE)
   1c796:	2b00      	cmp	r3, #0
   1c798:	d0e3      	beq.n	1c762 <tagBtnCback+0xfa>
    return AppDbGetKey(dbHdl, DM_KEY_IRK, NULL);
   1c79a:	2200      	movs	r2, #0
   1c79c:	2104      	movs	r1, #4
   1c79e:	4618      	mov	r0, r3
   1c7a0:	f7f7 ff58 	bl	14654 <AppDbGetKey>
          if ((pPeerKey = tagGetPeerKey(tagCb.dbHdl)) != NULL)
   1c7a4:	4605      	mov	r5, r0
   1c7a6:	b150      	cbz	r0, 1c7be <tagBtnCback+0x156>
            BdaCpy(tagCb.peerAddr, pPeerKey->irk.bdAddr);
   1c7a8:	f100 0110 	add.w	r1, r0, #16
   1c7ac:	f104 003d 	add.w	r0, r4, #61	; 0x3d
   1c7b0:	f7ff fdd0 	bl	1c354 <BdaCpy>
            tagCb.addrType = pPeerKey->irk.addrType;
   1c7b4:	7da9      	ldrb	r1, [r5, #22]
        AppConnAccept(DM_ADV_CONN_DIRECT_LO_DUTY, tagCb.addrType, tagCb.peerAddr, tagCb.dbHdl);
   1c7b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
            tagCb.addrType = pPeerKey->irk.addrType;
   1c7b8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   1c7bc:	e7d1      	b.n	1c762 <tagBtnCback+0xfa>
        AppConnAccept(DM_ADV_CONN_DIRECT_LO_DUTY, tagCb.addrType, tagCb.peerAddr, tagCb.dbHdl);
   1c7be:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
   1c7c2:	e7b4      	b.n	1c72e <tagBtnCback+0xc6>
   1c7c4:	10005d40 	.word	0x10005d40
   1c7c8:	10005d7d 	.word	0x10005d7d

0001c7cc <tagDmCback>:
  if (pDmEvt->hdr.event == DM_SEC_ECC_KEY_IND)
   1c7cc:	7883      	ldrb	r3, [r0, #2]
   1c7ce:	2b34      	cmp	r3, #52	; 0x34
{
   1c7d0:	b570      	push	{r4, r5, r6, lr}
   1c7d2:	4604      	mov	r4, r0
  if (pDmEvt->hdr.event == DM_SEC_ECC_KEY_IND)
   1c7d4:	d013      	beq.n	1c7fe <tagDmCback+0x32>
    len = DmSizeOfEvt(pDmEvt);
   1c7d6:	f7fc fb0b 	bl	18df0 <DmSizeOfEvt>
   1c7da:	4606      	mov	r6, r0
    if ((pMsg = WsfMsgAlloc(len)) != NULL)
   1c7dc:	f7f7 f81a 	bl	13814 <WsfMsgAlloc>
   1c7e0:	4605      	mov	r5, r0
   1c7e2:	b158      	cbz	r0, 1c7fc <tagDmCback+0x30>
      memcpy(pMsg, pDmEvt, len);
   1c7e4:	4621      	mov	r1, r4
   1c7e6:	4632      	mov	r2, r6
   1c7e8:	f7ef fc8a 	bl	c100 <memcpy>
      WsfMsgSend(tagCb.handlerId, pMsg);
   1c7ec:	4b06      	ldr	r3, [pc, #24]	; (1c808 <tagDmCback+0x3c>)
   1c7ee:	4629      	mov	r1, r5
   1c7f0:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
}
   1c7f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      WsfMsgSend(tagCb.handlerId, pMsg);
   1c7f8:	f7f7 b818 	b.w	1382c <WsfMsgSend>
}
   1c7fc:	bd70      	pop	{r4, r5, r6, pc}
   1c7fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    DmSecSetEccKey(&pDmEvt->eccMsg.data.key);
   1c802:	3004      	adds	r0, #4
   1c804:	f7fc be34 	b.w	19470 <DmSecSetEccKey>
   1c808:	10005d40 	.word	0x10005d40

0001c80c <tagIasWriteCback>:
{
   1c80c:	b538      	push	{r3, r4, r5, lr}
   1c80e:	f8bd 5010 	ldrh.w	r5, [sp, #16]
   1c812:	461c      	mov	r4, r3
  ATT_TRACE_INFO3("tagIasWriteCback connId:%d handle:0x%04x op:0x%02x",
   1c814:	4613      	mov	r3, r2
   1c816:	460a      	mov	r2, r1
   1c818:	4601      	mov	r1, r0
   1c81a:	4810      	ldr	r0, [pc, #64]	; (1c85c <tagIasWriteCback+0x50>)
   1c81c:	f7f7 fb7a 	bl	13f14 <WsfTrace>
  ATT_TRACE_INFO2("                 offset:0x%04x len:0x%04x", offset, len);
   1c820:	480f      	ldr	r0, [pc, #60]	; (1c860 <tagIasWriteCback+0x54>)
   1c822:	462a      	mov	r2, r5
   1c824:	4621      	mov	r1, r4
   1c826:	f7f7 fb75 	bl	13f14 <WsfTrace>
  tagAlert(*pValue);
   1c82a:	9b05      	ldr	r3, [sp, #20]
   1c82c:	781b      	ldrb	r3, [r3, #0]
  if (alert == CH_ALERT_LVL_NONE)
   1c82e:	b12b      	cbz	r3, 1c83c <tagIasWriteCback+0x30>
  else if (alert == CH_ALERT_LVL_MILD)
   1c830:	2b01      	cmp	r3, #1
   1c832:	d00d      	beq.n	1c850 <tagIasWriteCback+0x44>
  else if (alert == CH_ALERT_LVL_HIGH)
   1c834:	2b02      	cmp	r3, #2
   1c836:	d006      	beq.n	1c846 <tagIasWriteCback+0x3a>
}
   1c838:	2000      	movs	r0, #0
   1c83a:	bd38      	pop	{r3, r4, r5, pc}
    AppUiAction(APP_UI_ALERT_CANCEL);
   1c83c:	200f      	movs	r0, #15
   1c83e:	f7f8 f82f 	bl	148a0 <AppUiAction>
}
   1c842:	2000      	movs	r0, #0
   1c844:	bd38      	pop	{r3, r4, r5, pc}
    AppUiAction(APP_UI_ALERT_HIGH);
   1c846:	2011      	movs	r0, #17
   1c848:	f7f8 f82a 	bl	148a0 <AppUiAction>
}
   1c84c:	2000      	movs	r0, #0
   1c84e:	bd38      	pop	{r3, r4, r5, pc}
    AppUiAction(APP_UI_ALERT_LOW);
   1c850:	2010      	movs	r0, #16
   1c852:	f7f8 f825 	bl	148a0 <AppUiAction>
}
   1c856:	2000      	movs	r0, #0
   1c858:	bd38      	pop	{r3, r4, r5, pc}
   1c85a:	bf00      	nop
   1c85c:	0002559c 	.word	0x0002559c
   1c860:	000255d0 	.word	0x000255d0

0001c864 <TagHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void TagHandlerInit(wsfHandlerId_t handlerId)
{
   1c864:	b538      	push	{r3, r4, r5, lr}
   1c866:	4604      	mov	r4, r0
  APP_TRACE_INFO0("TagHandlerInit");
   1c868:	4816      	ldr	r0, [pc, #88]	; (1c8c4 <TagHandlerInit+0x60>)
  tagCb.inProgress = FALSE;

  /* Set configuration pointers */
  pAppSlaveCfg = (appSlaveCfg_t *) &tagSlaveCfg;
  pAppAdvCfg = (appAdvCfg_t *) &tagAdvCfg;
  pAppSecCfg = (appSecCfg_t *) &tagSecCfg;
   1c86a:	4d17      	ldr	r5, [pc, #92]	; (1c8c8 <TagHandlerInit+0x64>)
  APP_TRACE_INFO0("TagHandlerInit");
   1c86c:	f7f7 fb52 	bl	13f14 <WsfTrace>
  pAppSlaveCfg = (appSlaveCfg_t *) &tagSlaveCfg;
   1c870:	4a16      	ldr	r2, [pc, #88]	; (1c8cc <TagHandlerInit+0x68>)
  tagCb.handlerId = handlerId;
   1c872:	4b17      	ldr	r3, [pc, #92]	; (1c8d0 <TagHandlerInit+0x6c>)
  pAppAdvCfg = (appAdvCfg_t *) &tagAdvCfg;
   1c874:	4917      	ldr	r1, [pc, #92]	; (1c8d4 <TagHandlerInit+0x70>)
  pAppSlaveCfg = (appSlaveCfg_t *) &tagSlaveCfg;
   1c876:	4818      	ldr	r0, [pc, #96]	; (1c8d8 <TagHandlerInit+0x74>)
   1c878:	6010      	str	r0, [r2, #0]
  pAppAdvCfg = (appAdvCfg_t *) &tagAdvCfg;
   1c87a:	4818      	ldr	r0, [pc, #96]	; (1c8dc <TagHandlerInit+0x78>)
   1c87c:	6008      	str	r0, [r1, #0]
  tagCb.rssiTimer.msg.event = TAG_RSSI_TIMER_IND;
   1c87e:	22a0      	movs	r2, #160	; 0xa0
   1c880:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  pAppUpdateCfg = (appUpdateCfg_t *) &tagUpdateCfg;
   1c884:	4816      	ldr	r0, [pc, #88]	; (1c8e0 <TagHandlerInit+0x7c>)
  tagCb.handlerId = handlerId;
   1c886:	f883 402a 	strb.w	r4, [r3, #42]	; 0x2a
  tagCb.inProgress = FALSE;
   1c88a:	2200      	movs	r2, #0
  tagCb.rssiTimer.handlerId = handlerId;
   1c88c:	f883 4038 	strb.w	r4, [r3, #56]	; 0x38
  tagCb.inProgress = FALSE;
   1c890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  pAppUpdateCfg = (appUpdateCfg_t *) &tagUpdateCfg;
   1c894:	4c13      	ldr	r4, [pc, #76]	; (1c8e4 <TagHandlerInit+0x80>)
  pAppDiscCfg = (appDiscCfg_t *) &tagDiscCfg;
   1c896:	4a14      	ldr	r2, [pc, #80]	; (1c8e8 <TagHandlerInit+0x84>)
  pAppSecCfg = (appSecCfg_t *) &tagSecCfg;
   1c898:	4b14      	ldr	r3, [pc, #80]	; (1c8ec <TagHandlerInit+0x88>)
  pAppCfg = (appCfg_t *) &tagAppCfg;
   1c89a:	4915      	ldr	r1, [pc, #84]	; (1c8f0 <TagHandlerInit+0x8c>)
  pAppSecCfg = (appSecCfg_t *) &tagSecCfg;
   1c89c:	602b      	str	r3, [r5, #0]
  pAppUpdateCfg = (appUpdateCfg_t *) &tagUpdateCfg;
   1c89e:	6004      	str	r4, [r0, #0]

  /* Set stack configuration pointers */
  pSmpCfg = (smpCfg_t *)&tagSmpCfg;
   1c8a0:	4b14      	ldr	r3, [pc, #80]	; (1c8f4 <TagHandlerInit+0x90>)
  pAppDiscCfg = (appDiscCfg_t *) &tagDiscCfg;
   1c8a2:	4c15      	ldr	r4, [pc, #84]	; (1c8f8 <TagHandlerInit+0x94>)
  pAppCfg = (appCfg_t *) &tagAppCfg;
   1c8a4:	4815      	ldr	r0, [pc, #84]	; (1c8fc <TagHandlerInit+0x98>)
  pAppDiscCfg = (appDiscCfg_t *) &tagDiscCfg;
   1c8a6:	6014      	str	r4, [r2, #0]
  pSmpCfg = (smpCfg_t *)&tagSmpCfg;
   1c8a8:	4a15      	ldr	r2, [pc, #84]	; (1c900 <TagHandlerInit+0x9c>)
  pAppCfg = (appCfg_t *) &tagAppCfg;
   1c8aa:	6008      	str	r0, [r1, #0]
  pSmpCfg = (smpCfg_t *)&tagSmpCfg;
   1c8ac:	601a      	str	r2, [r3, #0]

  /* Initialize application framework */
  AppSlaveInit();
   1c8ae:	f001 ff57 	bl	1e760 <AppSlaveInit>
  AppDiscInit();
   1c8b2:	f001 fad5 	bl	1de60 <AppDiscInit>
  AppServerInit();
   1c8b6:	f001 fe13 	bl	1e4e0 <AppServerInit>

  /* Set IRK for the local device */
  DmSecSetLocalIrk(localIrk);
}
   1c8ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  DmSecSetLocalIrk(localIrk);
   1c8be:	4811      	ldr	r0, [pc, #68]	; (1c904 <TagHandlerInit+0xa0>)
   1c8c0:	f7fc bd88 	b.w	193d4 <DmSecSetLocalIrk>
   1c8c4:	000255fc 	.word	0x000255fc
   1c8c8:	10005f3c 	.word	0x10005f3c
   1c8cc:	10005f40 	.word	0x10005f40
   1c8d0:	10005d40 	.word	0x10005d40
   1c8d4:	10005f30 	.word	0x10005f30
   1c8d8:	000256ac 	.word	0x000256ac
   1c8dc:	00025654 	.word	0x00025654
   1c8e0:	10005f44 	.word	0x10005f44
   1c8e4:	000256c8 	.word	0x000256c8
   1c8e8:	10005f38 	.word	0x10005f38
   1c8ec:	000256a4 	.word	0x000256a4
   1c8f0:	10005f34 	.word	0x10005f34
   1c8f4:	10002b04 	.word	0x10002b04
   1c8f8:	0002567c 	.word	0x0002567c
   1c8fc:	0002566c 	.word	0x0002566c
   1c900:	000256b0 	.word	0x000256b0
   1c904:	10002bd0 	.word	0x10002bd0

0001c908 <TagHandler>:
 *  \return None.
 */
/*************************************************************************************************/
void TagHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
  if (pMsg != NULL)
   1c908:	b1a9      	cbz	r1, 1c936 <TagHandler+0x2e>
{
   1c90a:	b530      	push	{r4, r5, lr}
   1c90c:	460c      	mov	r4, r1
  {
    APP_TRACE_INFO1("Tag got evt %d", pMsg->event);
   1c90e:	48b6      	ldr	r0, [pc, #728]	; (1cbe8 <TagHandler+0x2e0>)
   1c910:	7889      	ldrb	r1, [r1, #2]
{
   1c912:	b085      	sub	sp, #20
    APP_TRACE_INFO1("Tag got evt %d", pMsg->event);
   1c914:	f7f7 fafe 	bl	13f14 <WsfTrace>

    /* process ATT messages */
    if (pMsg->event <= ATT_CBACK_END)
   1c918:	78a3      	ldrb	r3, [r4, #2]
   1c91a:	2b12      	cmp	r3, #18
   1c91c:	d90c      	bls.n	1c938 <TagHandler+0x30>

      /* process server-related ATT messages */
      AppServerProcAttMsg(pMsg);
    }
    /* process DM messages */
    else if (pMsg->event <= DM_CBACK_END)
   1c91e:	2b68      	cmp	r3, #104	; 0x68
   1c920:	f240 808c 	bls.w	1ca3c <TagHandler+0x134>
  switch(pMsg->hdr.event)
   1c924:	2ba0      	cmp	r3, #160	; 0xa0
   1c926:	d104      	bne.n	1c932 <TagHandler+0x2a>
  if ((connId = AppConnIsOpen()) != DM_CONN_ID_NONE)
   1c928:	f001 fc7e 	bl	1e228 <AppConnIsOpen>
   1c92c:	2800      	cmp	r0, #0
   1c92e:	f040 8142 	bne.w	1cbb6 <TagHandler+0x2ae>
    }

    /* perform profile and user interface-related operations */
    tagProcMsg((dmEvt_t *) pMsg);
  }
}
   1c932:	b005      	add	sp, #20
   1c934:	bd30      	pop	{r4, r5, pc}
   1c936:	4770      	bx	lr
      AppDiscProcAttMsg((attEvt_t *) pMsg);
   1c938:	4620      	mov	r0, r4
   1c93a:	f001 f99d 	bl	1dc78 <AppDiscProcAttMsg>
      AppServerProcAttMsg(pMsg);
   1c93e:	4620      	mov	r0, r4
   1c940:	f001 fd92 	bl	1e468 <AppServerProcAttMsg>
  switch(pMsg->hdr.event)
   1c944:	78a3      	ldrb	r3, [r4, #2]
   1c946:	2b3c      	cmp	r3, #60	; 0x3c
   1c948:	d8ec      	bhi.n	1c924 <TagHandler+0x1c>
   1c94a:	2b04      	cmp	r3, #4
   1c94c:	d9f1      	bls.n	1c932 <TagHandler+0x2a>
   1c94e:	3b05      	subs	r3, #5
   1c950:	2b37      	cmp	r3, #55	; 0x37
   1c952:	d8ee      	bhi.n	1c932 <TagHandler+0x2a>
   1c954:	a201      	add	r2, pc, #4	; (adr r2, 1c95c <TagHandler+0x54>)
   1c956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1c95a:	bf00      	nop
   1c95c:	0001ca53 	.word	0x0001ca53
   1c960:	0001c933 	.word	0x0001c933
   1c964:	0001c933 	.word	0x0001c933
   1c968:	0001c933 	.word	0x0001c933
   1c96c:	0001c933 	.word	0x0001c933
   1c970:	0001c933 	.word	0x0001c933
   1c974:	0001c933 	.word	0x0001c933
   1c978:	0001c933 	.word	0x0001c933
   1c97c:	0001c933 	.word	0x0001c933
   1c980:	0001ca53 	.word	0x0001ca53
   1c984:	0001c933 	.word	0x0001c933
   1c988:	0001c933 	.word	0x0001c933
   1c98c:	0001c933 	.word	0x0001c933
   1c990:	0001cba9 	.word	0x0001cba9
   1c994:	0001c933 	.word	0x0001c933
   1c998:	0001c933 	.word	0x0001c933
   1c99c:	0001c933 	.word	0x0001c933
   1c9a0:	0001c933 	.word	0x0001c933
   1c9a4:	0001c933 	.word	0x0001c933
   1c9a8:	0001c933 	.word	0x0001c933
   1c9ac:	0001c933 	.word	0x0001c933
   1c9b0:	0001c933 	.word	0x0001c933
   1c9b4:	0001c933 	.word	0x0001c933
   1c9b8:	0001c933 	.word	0x0001c933
   1c9bc:	0001c933 	.word	0x0001c933
   1c9c0:	0001c933 	.word	0x0001c933
   1c9c4:	0001c933 	.word	0x0001c933
   1c9c8:	0001cb6f 	.word	0x0001cb6f
   1c9cc:	0001cbaf 	.word	0x0001cbaf
   1c9d0:	0001cb4d 	.word	0x0001cb4d
   1c9d4:	0001c933 	.word	0x0001c933
   1c9d8:	0001c933 	.word	0x0001c933
   1c9dc:	0001c933 	.word	0x0001c933
   1c9e0:	0001c933 	.word	0x0001c933
   1c9e4:	0001cb51 	.word	0x0001cb51
   1c9e8:	0001cb27 	.word	0x0001cb27
   1c9ec:	0001c933 	.word	0x0001c933
   1c9f0:	0001cb15 	.word	0x0001cb15
   1c9f4:	0001cb0d 	.word	0x0001cb0d
   1c9f8:	0001cb01 	.word	0x0001cb01
   1c9fc:	0001cbb3 	.word	0x0001cbb3
   1ca00:	0001caf5 	.word	0x0001caf5
   1ca04:	0001c933 	.word	0x0001c933
   1ca08:	0001c933 	.word	0x0001c933
   1ca0c:	0001c933 	.word	0x0001c933
   1ca10:	0001c933 	.word	0x0001c933
   1ca14:	0001c933 	.word	0x0001c933
   1ca18:	0001c933 	.word	0x0001c933
   1ca1c:	0001cae9 	.word	0x0001cae9
   1ca20:	0001c933 	.word	0x0001c933
   1ca24:	0001c933 	.word	0x0001c933
   1ca28:	0001c933 	.word	0x0001c933
   1ca2c:	0001cad3 	.word	0x0001cad3
   1ca30:	0001caa9 	.word	0x0001caa9
   1ca34:	0001ca85 	.word	0x0001ca85
   1ca38:	0001ca77 	.word	0x0001ca77
      AppSlaveProcDmMsg((dmEvt_t *) pMsg);
   1ca3c:	4620      	mov	r0, r4
   1ca3e:	f001 feb1 	bl	1e7a4 <AppSlaveProcDmMsg>
      AppSlaveSecProcDmMsg((dmEvt_t *) pMsg);
   1ca42:	4620      	mov	r0, r4
   1ca44:	f002 fb34 	bl	1f0b0 <AppSlaveSecProcDmMsg>
      AppDiscProcDmMsg((dmEvt_t *) pMsg);
   1ca48:	4620      	mov	r0, r4
   1ca4a:	f001 f837 	bl	1dabc <AppDiscProcDmMsg>
  switch(pMsg->hdr.event)
   1ca4e:	78a3      	ldrb	r3, [r4, #2]
   1ca50:	e779      	b.n	1c946 <TagHandler+0x3e>
  if (pMsg->hdr.status == ATT_SUCCESS)
   1ca52:	78e3      	ldrb	r3, [r4, #3]
   1ca54:	2b00      	cmp	r3, #0
   1ca56:	f47f af6c 	bne.w	1c932 <TagHandler+0x2a>
    if (GattValueUpdate(pTagGattHdlList, pMsg) == ATT_SUCCESS)
   1ca5a:	4864      	ldr	r0, [pc, #400]	; (1cbec <TagHandler+0x2e4>)
   1ca5c:	4621      	mov	r1, r4
   1ca5e:	f7f8 f811 	bl	14a84 <GattValueUpdate>
   1ca62:	2800      	cmp	r0, #0
   1ca64:	f43f af65 	beq.w	1c932 <TagHandler+0x2a>
    if (GapValueUpdate(pTagGapHdlList, pMsg) == ATT_SUCCESS)
   1ca68:	4861      	ldr	r0, [pc, #388]	; (1cbf0 <TagHandler+0x2e8>)
   1ca6a:	4621      	mov	r1, r4
}
   1ca6c:	b005      	add	sp, #20
   1ca6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    if (GapValueUpdate(pTagGapHdlList, pMsg) == ATT_SUCCESS)
   1ca72:	f7f3 bfb5 	b.w	109e0 <GapValueUpdate>
      APP_TRACE_INFO1("Clear resolving list status 0x%02x", pMsg->hdr.status);
   1ca76:	78e1      	ldrb	r1, [r4, #3]
   1ca78:	485e      	ldr	r0, [pc, #376]	; (1cbf4 <TagHandler+0x2ec>)
}
   1ca7a:	b005      	add	sp, #20
   1ca7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      APP_TRACE_INFO1("Clear resolving list status 0x%02x", pMsg->hdr.status);
   1ca80:	f7f7 ba48 	b.w	13f14 <WsfTrace>
  if (pMsg->hdr.status == HCI_SUCCESS)
   1ca84:	78e5      	ldrb	r5, [r4, #3]
   1ca86:	2d00      	cmp	r5, #0
   1ca88:	f47f af53 	bne.w	1c932 <TagHandler+0x2a>
    if (AppDbGetHdl((dmConnId_t) pMsg->hdr.param) != APP_DB_HDL_NONE)
   1ca8c:	7820      	ldrb	r0, [r4, #0]
   1ca8e:	f001 fbd7 	bl	1e240 <AppDbGetHdl>
   1ca92:	2800      	cmp	r0, #0
   1ca94:	f43f af4d 	beq.w	1c932 <TagHandler+0x2a>
      AppSetAdvPeerAddr(HCI_ADDR_TYPE_PUBLIC, addrZeros);
   1ca98:	a902      	add	r1, sp, #8
   1ca9a:	4628      	mov	r0, r5
      uint8_t addrZeros[BDA_ADDR_LEN] = { 0 };
   1ca9c:	9502      	str	r5, [sp, #8]
   1ca9e:	f8ad 500c 	strh.w	r5, [sp, #12]
      AppSetAdvPeerAddr(HCI_ADDR_TYPE_PUBLIC, addrZeros);
   1caa2:	f002 fd87 	bl	1f5b4 <AppSetAdvPeerAddr>
   1caa6:	e744      	b.n	1c932 <TagHandler+0x2a>
  if ((pPeerKey = tagGetPeerKey(AppDbGetHdl((dmConnId_t) pMsg->hdr.param))) != NULL)
   1caa8:	7820      	ldrb	r0, [r4, #0]
   1caaa:	f001 fbc9 	bl	1e240 <AppDbGetHdl>
  if (dbHdl != APP_DB_HDL_NONE)
   1caae:	2800      	cmp	r0, #0
   1cab0:	f43f af3f 	beq.w	1c932 <TagHandler+0x2a>
    return AppDbGetKey(dbHdl, DM_KEY_IRK, NULL);
   1cab4:	2104      	movs	r1, #4
   1cab6:	2200      	movs	r2, #0
   1cab8:	f7f7 fdcc 	bl	14654 <AppDbGetKey>
  if ((pPeerKey = tagGetPeerKey(AppDbGetHdl((dmConnId_t) pMsg->hdr.param))) != NULL)
   1cabc:	4601      	mov	r1, r0
   1cabe:	2800      	cmp	r0, #0
   1cac0:	f43f af37 	beq.w	1c932 <TagHandler+0x2a>
    AppSetAdvPeerAddr(pPeerKey->irk.addrType, pPeerKey->irk.bdAddr);
   1cac4:	7d80      	ldrb	r0, [r0, #22]
   1cac6:	3110      	adds	r1, #16
}
   1cac8:	b005      	add	sp, #20
   1caca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    AppSetAdvPeerAddr(pPeerKey->irk.addrType, pPeerKey->irk.bdAddr);
   1cace:	f002 bd71 	b.w	1f5b4 <AppSetAdvPeerAddr>
      if (pMsg->hdr.status == HCI_SUCCESS)
   1cad2:	78e3      	ldrb	r3, [r4, #3]
   1cad4:	2b00      	cmp	r3, #0
   1cad6:	f47f af2c 	bne.w	1c932 <TagHandler+0x2a>
        AppUiDisplayRssi(pMsg->readRssi.rssi);
   1cada:	f994 0008 	ldrsb.w	r0, [r4, #8]
}
   1cade:	b005      	add	sp, #20
   1cae0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        AppUiDisplayRssi(pMsg->readRssi.rssi);
   1cae4:	f7f7 bf9c 	b.w	14a20 <AppUiDisplayRssi>
      AppHandleNumericComparison(&pMsg->cnfInd);
   1cae8:	4620      	mov	r0, r4
}
   1caea:	b005      	add	sp, #20
   1caec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      AppHandleNumericComparison(&pMsg->cnfInd);
   1caf0:	f001 bb86 	b.w	1e200 <AppHandleNumericComparison>
      AppHandlePasskey(&pMsg->authReq);
   1caf4:	4620      	mov	r0, r4
}
   1caf6:	b005      	add	sp, #20
   1caf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      AppHandlePasskey(&pMsg->authReq);
   1cafc:	f001 bb54 	b.w	1e1a8 <AppHandlePasskey>
      uiEvent = APP_UI_SEC_ENCRYPT;
   1cb00:	200c      	movs	r0, #12
}
   1cb02:	b005      	add	sp, #20
   1cb04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    AppUiAction(uiEvent);
   1cb08:	f7f7 beca 	b.w	148a0 <AppUiAction>
      DmSecGenerateEccKeyReq();
   1cb0c:	f7fc fca8 	bl	19460 <DmSecGenerateEccKeyReq>
      uiEvent = APP_UI_SEC_PAIR_FAIL;
   1cb10:	200b      	movs	r0, #11
   1cb12:	e7f6      	b.n	1cb02 <TagHandler+0x1fa>
  tagCb.dbHdl = AppDbGetHdl((dmConnId_t) pMsg->hdr.param);
   1cb14:	7820      	ldrb	r0, [r4, #0]
   1cb16:	f001 fb93 	bl	1e240 <AppDbGetHdl>
   1cb1a:	4b37      	ldr	r3, [pc, #220]	; (1cbf8 <TagHandler+0x2f0>)
   1cb1c:	6458      	str	r0, [r3, #68]	; 0x44
      DmSecGenerateEccKeyReq();
   1cb1e:	f7fc fc9f 	bl	19460 <DmSecGenerateEccKeyReq>
      uiEvent = APP_UI_SEC_PAIR_CMPL;
   1cb22:	200a      	movs	r0, #10
   1cb24:	e7ed      	b.n	1cb02 <TagHandler+0x1fa>
  if (AttsGetAttr(LLS_AL_HDL, &len, &pVal) == ATT_SUCCESS)
   1cb26:	aa02      	add	r2, sp, #8
   1cb28:	f10d 0106 	add.w	r1, sp, #6
   1cb2c:	2052      	movs	r0, #82	; 0x52
   1cb2e:	f7f1 fde1 	bl	e6f4 <AttsGetAttr>
   1cb32:	b920      	cbnz	r0, 1cb3e <TagHandler+0x236>
    if (*pVal == CH_ALERT_LVL_MILD || *pVal == CH_ALERT_LVL_HIGH)
   1cb34:	9b02      	ldr	r3, [sp, #8]
   1cb36:	781b      	ldrb	r3, [r3, #0]
   1cb38:	1e5a      	subs	r2, r3, #1
   1cb3a:	2a01      	cmp	r2, #1
   1cb3c:	d94c      	bls.n	1cbd8 <TagHandler+0x2d0>
  if (tagCb.inProgress)
   1cb3e:	4b2e      	ldr	r3, [pc, #184]	; (1cbf8 <TagHandler+0x2f0>)
   1cb40:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
   1cb44:	2a00      	cmp	r2, #0
   1cb46:	d13f      	bne.n	1cbc8 <TagHandler+0x2c0>
      uiEvent = APP_UI_CONN_CLOSE;
   1cb48:	2009      	movs	r0, #9
}
   1cb4a:	e7da      	b.n	1cb02 <TagHandler+0x1fa>
      uiEvent = APP_UI_ADV_STOP;
   1cb4c:	2004      	movs	r0, #4
   1cb4e:	e7d8      	b.n	1cb02 <TagHandler+0x1fa>
  tagCb.addrType = DmHostAddrType(pMsg->connOpen.addrType);
   1cb50:	7a60      	ldrb	r0, [r4, #9]
   1cb52:	f7fc f93f 	bl	18dd4 <DmHostAddrType>
   1cb56:	4b28      	ldr	r3, [pc, #160]	; (1cbf8 <TagHandler+0x2f0>)
   1cb58:	4602      	mov	r2, r0
  BdaCpy(tagCb.peerAddr, pMsg->connOpen.peerAddr);
   1cb5a:	f104 010a 	add.w	r1, r4, #10
   1cb5e:	f103 003d 	add.w	r0, r3, #61	; 0x3d
  tagCb.addrType = DmHostAddrType(pMsg->connOpen.addrType);
   1cb62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  BdaCpy(tagCb.peerAddr, pMsg->connOpen.peerAddr);
   1cb66:	f7ff fbf5 	bl	1c354 <BdaCpy>
      uiEvent = APP_UI_CONN_OPEN;
   1cb6a:	2008      	movs	r0, #8
}
   1cb6c:	e7c9      	b.n	1cb02 <TagHandler+0x1fa>
      AttsCalculateDbHash();
   1cb6e:	f7f1 fc89 	bl	e484 <AttsCalculateDbHash>
      DmSecGenerateEccKeyReq();
   1cb72:	f7fc fc75 	bl	19460 <DmSecGenerateEccKeyReq>
  AppAdvSetData(APP_ADV_DATA_DISCOVERABLE, sizeof(tagAdvDataDisc), (uint8_t *) tagAdvDataDisc);
   1cb76:	4a21      	ldr	r2, [pc, #132]	; (1cbfc <TagHandler+0x2f4>)
   1cb78:	210b      	movs	r1, #11
   1cb7a:	2002      	movs	r0, #2
   1cb7c:	f002 fc9e 	bl	1f4bc <AppAdvSetData>
  AppAdvSetData(APP_SCAN_DATA_DISCOVERABLE, sizeof(tagScanData), (uint8_t *) tagScanData);
   1cb80:	4a1f      	ldr	r2, [pc, #124]	; (1cc00 <TagHandler+0x2f8>)
   1cb82:	2108      	movs	r1, #8
   1cb84:	2003      	movs	r0, #3
   1cb86:	f002 fc99 	bl	1f4bc <AppAdvSetData>
  AppAdvSetData(APP_ADV_DATA_CONNECTABLE, 0, NULL);
   1cb8a:	2200      	movs	r2, #0
   1cb8c:	4611      	mov	r1, r2
   1cb8e:	4610      	mov	r0, r2
   1cb90:	f002 fc94 	bl	1f4bc <AppAdvSetData>
  AppAdvSetData(APP_SCAN_DATA_CONNECTABLE, sizeof(tagScanData), (uint8_t *) tagScanData);
   1cb94:	4a1a      	ldr	r2, [pc, #104]	; (1cc00 <TagHandler+0x2f8>)
   1cb96:	2108      	movs	r1, #8
   1cb98:	2001      	movs	r0, #1
   1cb9a:	f002 fc8f 	bl	1f4bc <AppAdvSetData>
  AppAdvStart(APP_MODE_AUTO_INIT);
   1cb9e:	2002      	movs	r0, #2
   1cba0:	f002 fcb6 	bl	1f510 <AppAdvStart>
      uiEvent = APP_UI_RESET_CMPL;
   1cba4:	2001      	movs	r0, #1
}
   1cba6:	e7ac      	b.n	1cb02 <TagHandler+0x1fa>
      APP_TRACE_INFO1("Negotiated MTU %d", ((attEvt_t *)pMsg)->mtu);
   1cba8:	89e1      	ldrh	r1, [r4, #14]
   1cbaa:	4816      	ldr	r0, [pc, #88]	; (1cc04 <TagHandler+0x2fc>)
   1cbac:	e765      	b.n	1ca7a <TagHandler+0x172>
      uiEvent = APP_UI_ADV_START;
   1cbae:	2003      	movs	r0, #3
   1cbb0:	e7a7      	b.n	1cb02 <TagHandler+0x1fa>
  switch(pMsg->hdr.event)
   1cbb2:	200d      	movs	r0, #13
   1cbb4:	e7a5      	b.n	1cb02 <TagHandler+0x1fa>
    DmConnReadRssi(connId);
   1cbb6:	f7fb fdcb 	bl	18750 <DmConnReadRssi>
    WsfTimerStartSec(&tagCb.rssiTimer, TAG_READ_RSSI_INTERVAL);
   1cbba:	4813      	ldr	r0, [pc, #76]	; (1cc08 <TagHandler+0x300>)
   1cbbc:	2103      	movs	r1, #3
}
   1cbbe:	b005      	add	sp, #20
   1cbc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    WsfTimerStartSec(&tagCb.rssiTimer, TAG_READ_RSSI_INTERVAL);
   1cbc4:	f7f7 b880 	b.w	13cc8 <WsfTimerStartSec>
    tagCb.inProgress = FALSE;
   1cbc8:	2200      	movs	r2, #0
    WsfTimerStop(&tagCb.rssiTimer);
   1cbca:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    tagCb.inProgress = FALSE;
   1cbce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    WsfTimerStop(&tagCb.rssiTimer);
   1cbd2:	f7f7 f8ff 	bl	13dd4 <WsfTimerStop>
   1cbd6:	e7b7      	b.n	1cb48 <TagHandler+0x240>
  else if (alert == CH_ALERT_LVL_MILD)
   1cbd8:	2b01      	cmp	r3, #1
    AppUiAction(APP_UI_ALERT_LOW);
   1cbda:	bf0c      	ite	eq
   1cbdc:	2010      	moveq	r0, #16
    AppUiAction(APP_UI_ALERT_HIGH);
   1cbde:	2011      	movne	r0, #17
   1cbe0:	f7f7 fe5e 	bl	148a0 <AppUiAction>
   1cbe4:	e7ab      	b.n	1cb3e <TagHandler+0x236>
   1cbe6:	bf00      	nop
   1cbe8:	0002560c 	.word	0x0002560c
   1cbec:	10005d42 	.word	0x10005d42
   1cbf0:	10005d48 	.word	0x10005d48
   1cbf4:	00025630 	.word	0x00025630
   1cbf8:	10005d40 	.word	0x10005d40
   1cbfc:	00025660 	.word	0x00025660
   1cc00:	0002569c 	.word	0x0002569c
   1cc04:	0002561c 	.word	0x0002561c
   1cc08:	10005d6c 	.word	0x10005d6c

0001cc0c <TagStart>:
 */
/*************************************************************************************************/
void TagStart(void)
{
  /* Register for stack callbacks */
  DmRegister(tagDmCback);
   1cc0c:	4916      	ldr	r1, [pc, #88]	; (1cc68 <TagStart+0x5c>)
{
   1cc0e:	b508      	push	{r3, lr}
  DmRegister(tagDmCback);
   1cc10:	4608      	mov	r0, r1
   1cc12:	f7fc f891 	bl	18d38 <DmRegister>
  DmConnRegister(DM_CLIENT_ID_APP, tagDmCback);
   1cc16:	4914      	ldr	r1, [pc, #80]	; (1cc68 <TagStart+0x5c>)
   1cc18:	2003      	movs	r0, #3
   1cc1a:	f7fb fd13 	bl	18644 <DmConnRegister>
  AttRegister(tagAttCback);
   1cc1e:	4813      	ldr	r0, [pc, #76]	; (1cc6c <TagStart+0x60>)
   1cc20:	f7f2 ff94 	bl	fb4c <AttRegister>
  AttConnRegister(AppServerConnCback);
   1cc24:	4812      	ldr	r0, [pc, #72]	; (1cc70 <TagStart+0x64>)
   1cc26:	f7f2 ffb1 	bl	fb8c <AttConnRegister>
  AttsCccRegister(TAG_NUM_CCC_IDX, (attsCccSet_t *) tagCccSet, tagCccCback);
   1cc2a:	4a12      	ldr	r2, [pc, #72]	; (1cc74 <TagStart+0x68>)
   1cc2c:	4912      	ldr	r1, [pc, #72]	; (1cc78 <TagStart+0x6c>)
   1cc2e:	2001      	movs	r0, #1
   1cc30:	f7f0 fe92 	bl	d958 <AttsCccRegister>

  /* Register for app framework button callbacks */
  AppUiBtnRegister(tagBtnCback);
   1cc34:	4811      	ldr	r0, [pc, #68]	; (1cc7c <TagStart+0x70>)
   1cc36:	f7f7 ff05 	bl	14a44 <AppUiBtnRegister>

  /* Register for app framework discovery callbacks */
  AppDiscRegister(tagDiscCback);
   1cc3a:	4811      	ldr	r0, [pc, #68]	; (1cc80 <TagStart+0x74>)
   1cc3c:	f001 f91c 	bl	1de78 <AppDiscRegister>

  /* Initialize attribute server database */
  SvcCoreGattCbackRegister(GattReadCback, GattWriteCback);
   1cc40:	4910      	ldr	r1, [pc, #64]	; (1cc84 <TagStart+0x78>)
   1cc42:	4811      	ldr	r0, [pc, #68]	; (1cc88 <TagStart+0x7c>)
   1cc44:	f004 fb74 	bl	21330 <SvcCoreGattCbackRegister>
  SvcCoreAddGroup();
   1cc48:	f004 fb64 	bl	21314 <SvcCoreAddGroup>
  SvcPxCbackRegister(NULL, tagIasWriteCback);
   1cc4c:	490f      	ldr	r1, [pc, #60]	; (1cc8c <TagStart+0x80>)
   1cc4e:	2000      	movs	r0, #0
   1cc50:	f004 fb8a 	bl	21368 <SvcPxCbackRegister>
  SvcPxAddGroup();
   1cc54:	f004 fb82 	bl	2135c <SvcPxAddGroup>

  /* Set Service Changed CCCD index. */
  GattSetSvcChangedIdx(TAG_GATT_SC_CCC_IDX);
   1cc58:	2000      	movs	r0, #0
   1cc5a:	f7f7 ff1f 	bl	14a9c <GattSetSvcChangedIdx>

  /* Reset the device */
  DmDevReset();
}
   1cc5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  DmDevReset();
   1cc62:	f7fb bff7 	b.w	18c54 <DmDevReset>
   1cc66:	bf00      	nop
   1cc68:	0001c7cd 	.word	0x0001c7cd
   1cc6c:	0001c629 	.word	0x0001c629
   1cc70:	0001e335 	.word	0x0001e335
   1cc74:	0001c5d5 	.word	0x0001c5d5
   1cc78:	00025670 	.word	0x00025670
   1cc7c:	0001c669 	.word	0x0001c669
   1cc80:	0001c4d5 	.word	0x0001c4d5
   1cc84:	00014b39 	.word	0x00014b39
   1cc88:	00014b11 	.word	0x00014b11
   1cc8c:	0001c80d 	.word	0x0001c80d

0001cc90 <am_devices_button_array_init>:
    uint32_t i;

    //
    // Loop through the list of buttons, configuring each one individually.
    //
    for ( i = 0; i < ui32NumButtons; i++ )
   1cc90:	b1b1      	cbz	r1, 1ccc0 <am_devices_button_array_init+0x30>
   1cc92:	4b0c      	ldr	r3, [pc, #48]	; (1ccc4 <am_devices_button_array_init+0x34>)
{
   1cc94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for ( i = 0; i < ui32NumButtons; i++ )
   1cc98:	2500      	movs	r5, #0
    am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_DISABLE);
   1cc9a:	f8d3 8000 	ldr.w	r8, [r3]
   1cc9e:	460f      	mov	r7, r1
   1cca0:	4604      	mov	r4, r0
    psButton->ui32Count = 0;
   1cca2:	462e      	mov	r6, r5
    am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_DISABLE);
   1cca4:	6820      	ldr	r0, [r4, #0]
   1cca6:	4641      	mov	r1, r8
    for ( i = 0; i < ui32NumButtons; i++ )
   1cca8:	3410      	adds	r4, #16
   1ccaa:	3501      	adds	r5, #1
    am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_DISABLE);
   1ccac:	f006 f9ac 	bl	23008 <am_hal_gpio_pinconfig>
    for ( i = 0; i < ui32NumButtons; i++ )
   1ccb0:	42af      	cmp	r7, r5
    psButton->ui32Count = 0;
   1ccb2:	f844 6c08 	str.w	r6, [r4, #-8]
    psButton->bPressed = false;
   1ccb6:	f824 6c04 	strh.w	r6, [r4, #-4]
    for ( i = 0; i < ui32NumButtons; i++ )
   1ccba:	d1f3      	bne.n	1cca4 <am_devices_button_array_init+0x14>
    {
        am_devices_button_init(psButtons + i);
    }
}
   1ccbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ccc0:	4770      	bx	lr
   1ccc2:	bf00      	nop
   1ccc4:	00027710 	.word	0x00027710

0001ccc8 <am_devices_button_array_tick>:
    uint32_t i;

    //
    // Run the "tick" function for each button in the list.
    //
    for ( i = 0; i < ui32NumButtons; i++ )
   1ccc8:	2900      	cmp	r1, #0
   1ccca:	d036      	beq.n	1cd3a <am_devices_button_array_tick+0x72>
{
   1cccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ccd0:	4b1a      	ldr	r3, [pc, #104]	; (1cd3c <am_devices_button_array_tick+0x74>)
   1ccd2:	4f1b      	ldr	r7, [pc, #108]	; (1cd40 <am_devices_button_array_tick+0x78>)
    am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_INPUT);
   1ccd4:	f8d3 8000 	ldr.w	r8, [r3]
    for ( i = 0; i < ui32NumButtons; i++ )
   1ccd8:	2500      	movs	r5, #0
{
   1ccda:	b083      	sub	sp, #12
   1ccdc:	460e      	mov	r6, r1
   1ccde:	4604      	mov	r4, r0
    am_hal_gpio_state_read(psButton->ui32GPIONumber, AM_HAL_GPIO_INPUT_READ, &ui32PinState);
   1cce0:	46a9      	mov	r9, r5
   1cce2:	e012      	b.n	1cd0a <am_devices_button_array_tick+0x42>
        psButton->ui32Count++;
   1cce4:	68a2      	ldr	r2, [r4, #8]
        psButton->bChanged = true;
   1cce6:	2101      	movs	r1, #1
        psButton->ui32Count++;
   1cce8:	440a      	add	r2, r1
    if ( psButton->ui32Count >= AM_DEVICES_BUTTON_DEBOUNCE_DELAY )
   1ccea:	2a03      	cmp	r2, #3
   1ccec:	60a2      	str	r2, [r4, #8]
        psButton->bPressed = bRawButtonPressed;
   1ccee:	bf86      	itte	hi
   1ccf0:	7323      	strbhi	r3, [r4, #12]
        psButton->ui32Count = 0;
   1ccf2:	f8c4 9008 	strhi.w	r9, [r4, #8]
        psButton->bChanged = false;
   1ccf6:	2100      	movls	r1, #0
   1ccf8:	7361      	strb	r1, [r4, #13]
    for ( i = 0; i < ui32NumButtons; i++ )
   1ccfa:	3501      	adds	r5, #1
    am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_DISABLE);
   1ccfc:	6839      	ldr	r1, [r7, #0]
   1ccfe:	f854 0b10 	ldr.w	r0, [r4], #16
   1cd02:	f006 f981 	bl	23008 <am_hal_gpio_pinconfig>
    for ( i = 0; i < ui32NumButtons; i++ )
   1cd06:	42ae      	cmp	r6, r5
   1cd08:	d014      	beq.n	1cd34 <am_devices_button_array_tick+0x6c>
    am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_INPUT);
   1cd0a:	4641      	mov	r1, r8
   1cd0c:	6820      	ldr	r0, [r4, #0]
   1cd0e:	f006 f97b 	bl	23008 <am_hal_gpio_pinconfig>
    am_hal_gpio_state_read(psButton->ui32GPIONumber, AM_HAL_GPIO_INPUT_READ, &ui32PinState);
   1cd12:	aa01      	add	r2, sp, #4
   1cd14:	2100      	movs	r1, #0
   1cd16:	6820      	ldr	r0, [r4, #0]
   1cd18:	f006 faac 	bl	23274 <am_hal_gpio_state_read>
    bRawButtonPressed = (ui32PinState != psButton->ui32Polarity);
   1cd1c:	6863      	ldr	r3, [r4, #4]
   1cd1e:	9901      	ldr	r1, [sp, #4]
    if ( bRawButtonPressed != psButton->bPressed )
   1cd20:	7b22      	ldrb	r2, [r4, #12]
    bRawButtonPressed = (ui32PinState != psButton->ui32Polarity);
   1cd22:	1a5b      	subs	r3, r3, r1
   1cd24:	bf18      	it	ne
   1cd26:	2301      	movne	r3, #1
    if ( bRawButtonPressed != psButton->bPressed )
   1cd28:	429a      	cmp	r2, r3
   1cd2a:	d1db      	bne.n	1cce4 <am_devices_button_array_tick+0x1c>
   1cd2c:	f8c4 9008 	str.w	r9, [r4, #8]
        psButton->bChanged = false;
   1cd30:	2100      	movs	r1, #0
   1cd32:	e7e1      	b.n	1ccf8 <am_devices_button_array_tick+0x30>
    {
        am_devices_button_tick(psButtons + i);
    }
}
   1cd34:	b003      	add	sp, #12
   1cd36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1cd3a:	4770      	bx	lr
   1cd3c:	00027714 	.word	0x00027714
   1cd40:	00027710 	.word	0x00027710

0001cd44 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
   1cd44:	b510      	push	{r4, lr}
   1cd46:	b084      	sub	sp, #16
   1cd48:	4604      	mov	r4, r0
    am_hal_delay_us( ui32MilliSeconds * 1000);
#else // AM_PART_APOLLO4
    uint32_t ui32Loops, ui32HFRC;
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
   1cd4a:	a801      	add	r0, sp, #4
   1cd4c:	f006 f898 	bl	22e80 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
   1cd50:	9b01      	ldr	r3, [sp, #4]
   1cd52:	4805      	ldr	r0, [pc, #20]	; (1cd68 <am_util_delay_ms+0x24>)
   1cd54:	fba0 2303 	umull	r2, r3, r0, r3
   1cd58:	099b      	lsrs	r3, r3, #6

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
   1cd5a:	fb04 f003 	mul.w	r0, r4, r3
   1cd5e:	f006 f8f5 	bl	22f4c <am_hal_flash_delay>
#endif // AM_PART_APOLLO4
}
   1cd62:	b004      	add	sp, #16
   1cd64:	bd10      	pop	{r4, pc}
   1cd66:	bf00      	nop
   1cd68:	057619f1 	.word	0x057619f1

0001cd6c <am_util_delay_us>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_us(uint32_t ui32MicroSeconds)
{
   1cd6c:	b510      	push	{r4, lr}
   1cd6e:	b084      	sub	sp, #16
   1cd70:	4604      	mov	r4, r0
#else // AM_PART_APOLLO4
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
   1cd72:	a801      	add	r0, sp, #4
   1cd74:	f006 f884 	bl	22e80 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MicroSeconds * (ui32HFRC / 3000000);
   1cd78:	9b01      	ldr	r3, [sp, #4]
   1cd7a:	4805      	ldr	r0, [pc, #20]	; (1cd90 <am_util_delay_us+0x24>)
   1cd7c:	fba0 2303 	umull	r2, r3, r0, r3
   1cd80:	0c9b      	lsrs	r3, r3, #18

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
   1cd82:	fb04 f003 	mul.w	r0, r4, r3
   1cd86:	f006 f8e1 	bl	22f4c <am_hal_flash_delay>
#endif // AM_PART_APOLLO4
}
   1cd8a:	b004      	add	sp, #16
   1cd8c:	bd10      	pop	{r4, pc}
   1cd8e:	bf00      	nop
   1cd90:	165e9f81 	.word	0x165e9f81

0001cd94 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
   1cd94:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
   1cd96:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
   1cd9a:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
   1cd9c:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
   1cda0:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
   1cda4:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
   1cda8:	f000 f806 	bl	1cdb8 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
   1cdac:	bd01      	pop	{r0, pc}
   1cdae:	bf00      	nop

0001cdb0 <getStackedReg>:
}

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
   1cdb0:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
   1cdb2:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
   1cdb4:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
   1cdb6:	4770      	bx	lr

0001cdb8 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
   1cdb8:	b510      	push	{r4, lr}
    volatile am_fault_t sFaultData;
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_t  sHalFaultData = {0};
#else
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
   1cdba:	2300      	movs	r3, #0
{
   1cdbc:	b092      	sub	sp, #72	; 0x48
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
   1cdbe:	e9cd 3300 	strd	r3, r3, [sp]
   1cdc2:	e9cd 3302 	strd	r3, r3, [sp, #8]
   1cdc6:	e9cd 3304 	strd	r3, r3, [sp, #16]
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
   1cdca:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
   1cdce:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
   1cdd0:	f8d2 3d28 	ldr.w	r3, [r2, #3368]	; 0xd28
   1cdd4:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
   1cdd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1cdd8:	b2db      	uxtb	r3, r3
   1cdda:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
   1cdde:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1cde0:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1cde4:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
   1cde8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1cdea:	0c1b      	lsrs	r3, r3, #16
   1cdec:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
   1cdf0:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
   1cdf4:	930f      	str	r3, [sp, #60]	; 0x3c

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
   1cdf6:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
   1cdfa:	079b      	lsls	r3, r3, #30
{
   1cdfc:	4604      	mov	r4, r0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
   1cdfe:	d437      	bmi.n	1ce70 <am_util_faultisr_collect_data+0xb8>
   1ce00:	f04f 33ff 	mov.w	r3, #4294967295

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
   1ce04:	4621      	mov	r1, r4
   1ce06:	2000      	movs	r0, #0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
   1ce08:	930e      	str	r3, [sp, #56]	; 0x38
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
   1ce0a:	f7ff ffd1 	bl	1cdb0 <getStackedReg>
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
   1ce0e:	4621      	mov	r1, r4
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
   1ce10:	4603      	mov	r3, r0
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
   1ce12:	2001      	movs	r0, #1
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
   1ce14:	9306      	str	r3, [sp, #24]
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
   1ce16:	f7ff ffcb 	bl	1cdb0 <getStackedReg>
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
   1ce1a:	4621      	mov	r1, r4
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
   1ce1c:	4603      	mov	r3, r0
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
   1ce1e:	2002      	movs	r0, #2
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
   1ce20:	9307      	str	r3, [sp, #28]
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
   1ce22:	f7ff ffc5 	bl	1cdb0 <getStackedReg>
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
   1ce26:	4621      	mov	r1, r4
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
   1ce28:	4603      	mov	r3, r0
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
   1ce2a:	2003      	movs	r0, #3
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
   1ce2c:	9308      	str	r3, [sp, #32]
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
   1ce2e:	f7ff ffbf 	bl	1cdb0 <getStackedReg>
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
   1ce32:	4621      	mov	r1, r4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
   1ce34:	4603      	mov	r3, r0
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
   1ce36:	2004      	movs	r0, #4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
   1ce38:	9309      	str	r3, [sp, #36]	; 0x24
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
   1ce3a:	f7ff ffb9 	bl	1cdb0 <getStackedReg>
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
   1ce3e:	4621      	mov	r1, r4
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
   1ce40:	4603      	mov	r3, r0
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
   1ce42:	2005      	movs	r0, #5
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
   1ce44:	930a      	str	r3, [sp, #40]	; 0x28
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
   1ce46:	f7ff ffb3 	bl	1cdb0 <getStackedReg>
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
   1ce4a:	4621      	mov	r1, r4
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
   1ce4c:	4603      	mov	r3, r0
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
   1ce4e:	2006      	movs	r0, #6
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
   1ce50:	930b      	str	r3, [sp, #44]	; 0x2c
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
   1ce52:	f7ff ffad 	bl	1cdb0 <getStackedReg>
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
   1ce56:	4621      	mov	r1, r4
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
   1ce58:	4603      	mov	r3, r0
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
   1ce5a:	2007      	movs	r0, #7
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
   1ce5c:	930c      	str	r3, [sp, #48]	; 0x30
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
   1ce5e:	f7ff ffa7 	bl	1cdb0 <getStackedReg>
    //
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_get(&sHalFaultData);
#else
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
   1ce62:	4669      	mov	r1, sp
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
   1ce64:	4603      	mov	r3, r0
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
   1ce66:	2002      	movs	r0, #2
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
   1ce68:	930d      	str	r3, [sp, #52]	; 0x34
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
   1ce6a:	f006 fa85 	bl	23378 <am_hal_mcuctrl_info_get>
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
   1ce6e:	e7fe      	b.n	1ce6e <am_util_faultisr_collect_data+0xb6>
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
   1ce70:	4601      	mov	r1, r0
   1ce72:	2006      	movs	r0, #6
   1ce74:	f7ff ff9c 	bl	1cdb0 <getStackedReg>
   1ce78:	4603      	mov	r3, r0
   1ce7a:	e7c3      	b.n	1ce04 <am_util_faultisr_collect_data+0x4c>

0001ce7c <divu64_10>:
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
   1ce7c:	2900      	cmp	r1, #0
   1ce7e:	d047      	beq.n	1cf10 <divu64_10+0x94>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
   1ce80:	0843      	lsrs	r3, r0, #1
   1ce82:	0882      	lsrs	r2, r0, #2
   1ce84:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
   1ce88:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
   1ce8c:	189b      	adds	r3, r3, r2
   1ce8e:	ea4f 0291 	mov.w	r2, r1, lsr #2
   1ce92:	eb42 0251 	adc.w	r2, r2, r1, lsr #1
        q64 += (q64 >> 4);
   1ce96:	ea4f 1c13 	mov.w	ip, r3, lsr #4
   1ce9a:	ea4c 7c02 	orr.w	ip, ip, r2, lsl #28
   1ce9e:	eb13 030c 	adds.w	r3, r3, ip
   1cea2:	eb42 1212 	adc.w	r2, r2, r2, lsr #4
        q64 += (q64 >> 8);
   1cea6:	ea4f 2c13 	mov.w	ip, r3, lsr #8
   1ceaa:	ea4c 6c02 	orr.w	ip, ip, r2, lsl #24
   1ceae:	eb13 030c 	adds.w	r3, r3, ip
   1ceb2:	eb42 2212 	adc.w	r2, r2, r2, lsr #8
        q64 += (q64 >> 16);
   1ceb6:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   1ceba:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
   1cebe:	eb13 030c 	adds.w	r3, r3, ip
   1cec2:	eb42 4212 	adc.w	r2, r2, r2, lsr #16
        q64 += (q64 >> 32);
   1cec6:	189b      	adds	r3, r3, r2
   1cec8:	f142 0200 	adc.w	r2, r2, #0
        q64 >>= 3;
   1cecc:	08db      	lsrs	r3, r3, #3
   1cece:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   1ced2:	08d2      	lsrs	r2, r2, #3
        r64 = ui64Val - q64*10;
        return q64 + ((r64 + 6) >> 4);
   1ced4:	3006      	adds	r0, #6
{
   1ced6:	b500      	push	{lr}
        r64 = ui64Val - q64*10;
   1ced8:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   1cedc:	ea4f 0e82 	mov.w	lr, r2, lsl #2
        return q64 + ((r64 + 6) >> 4);
   1cee0:	f141 0100 	adc.w	r1, r1, #0
        r64 = ui64Val - q64*10;
   1cee4:	ea4e 7e93 	orr.w	lr, lr, r3, lsr #30
   1cee8:	eb1c 0c03 	adds.w	ip, ip, r3
   1ceec:	eb42 0e0e 	adc.w	lr, r2, lr
   1cef0:	eb1c 0c0c 	adds.w	ip, ip, ip
   1cef4:	eb4e 0e0e 	adc.w	lr, lr, lr
        return q64 + ((r64 + 6) >> 4);
   1cef8:	ebb0 000c 	subs.w	r0, r0, ip
   1cefc:	eb61 010e 	sbc.w	r1, r1, lr
   1cf00:	0900      	lsrs	r0, r0, #4
   1cf02:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
   1cf06:	18c0      	adds	r0, r0, r3
   1cf08:	eb42 1111 	adc.w	r1, r2, r1, lsr #4
        q32 += (q32 >> 16);
        q32 >>= 3;
        r32 = ui32Val - q32*10;
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    }
}
   1cf0c:	f85d fb04 	ldr.w	pc, [sp], #4
        q32 = (ui32Val>>1) + (ui32Val>>2);
   1cf10:	0883      	lsrs	r3, r0, #2
   1cf12:	eb03 0350 	add.w	r3, r3, r0, lsr #1
        q32 += (q32 >> 4);
   1cf16:	eb03 1313 	add.w	r3, r3, r3, lsr #4
        q32 += (q32 >> 8);
   1cf1a:	eb03 2313 	add.w	r3, r3, r3, lsr #8
        q32 += (q32 >> 16);
   1cf1e:	eb03 4313 	add.w	r3, r3, r3, lsr #16
        q32 >>= 3;
   1cf22:	08db      	lsrs	r3, r3, #3
        r32 = ui32Val - q32*10;
   1cf24:	eb03 0283 	add.w	r2, r3, r3, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
   1cf28:	3006      	adds	r0, #6
   1cf2a:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
   1cf2e:	eb03 1010 	add.w	r0, r3, r0, lsr #4
}
   1cf32:	4770      	bx	lr

0001cf34 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
   1cf34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cf38:	b089      	sub	sp, #36	; 0x24
   1cf3a:	ad01      	add	r5, sp, #4
        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);

        tbuf[ix++] = uMod + '0';
   1cf3c:	46ae      	mov	lr, r5
   1cf3e:	2401      	movs	r4, #1
   1cf40:	e042      	b.n	1cfc8 <uint64_to_str+0x94>
        q64 = (ui64Val>>1) + (ui64Val>>2);
   1cf42:	19db      	adds	r3, r3, r7
   1cf44:	eb46 0651 	adc.w	r6, r6, r1, lsr #1
        q64 += (q64 >> 4);
   1cf48:	091f      	lsrs	r7, r3, #4
   1cf4a:	ea47 7706 	orr.w	r7, r7, r6, lsl #28
   1cf4e:	19db      	adds	r3, r3, r7
   1cf50:	eb46 1616 	adc.w	r6, r6, r6, lsr #4
        q64 += (q64 >> 8);
   1cf54:	0a1f      	lsrs	r7, r3, #8
   1cf56:	ea47 6706 	orr.w	r7, r7, r6, lsl #24
   1cf5a:	19db      	adds	r3, r3, r7
   1cf5c:	eb46 2616 	adc.w	r6, r6, r6, lsr #8
        q64 += (q64 >> 16);
   1cf60:	0c1f      	lsrs	r7, r3, #16
   1cf62:	ea47 4706 	orr.w	r7, r7, r6, lsl #16
   1cf66:	19db      	adds	r3, r3, r7
   1cf68:	eb46 4616 	adc.w	r6, r6, r6, lsr #16
        q64 += (q64 >> 32);
   1cf6c:	199b      	adds	r3, r3, r6
   1cf6e:	f146 0600 	adc.w	r6, r6, #0
        q64 >>= 3;
   1cf72:	08db      	lsrs	r3, r3, #3
   1cf74:	ea43 7346 	orr.w	r3, r3, r6, lsl #29
   1cf78:	08f6      	lsrs	r6, r6, #3
        return q64 + ((r64 + 6) >> 4);
   1cf7a:	1d87      	adds	r7, r0, #6
        r64 = ui64Val - q64*10;
   1cf7c:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   1cf80:	ea4f 0886 	mov.w	r8, r6, lsl #2
        return q64 + ((r64 + 6) >> 4);
   1cf84:	f141 0100 	adc.w	r1, r1, #0
        r64 = ui64Val - q64*10;
   1cf88:	ea48 7893 	orr.w	r8, r8, r3, lsr #30
   1cf8c:	eb1c 0c03 	adds.w	ip, ip, r3
   1cf90:	eb46 0808 	adc.w	r8, r6, r8
   1cf94:	eb1c 0c0c 	adds.w	ip, ip, ip
   1cf98:	eb48 0808 	adc.w	r8, r8, r8
        return q64 + ((r64 + 6) >> 4);
   1cf9c:	ebb7 070c 	subs.w	r7, r7, ip
   1cfa0:	eb61 0108 	sbc.w	r1, r1, r8
   1cfa4:	093f      	lsrs	r7, r7, #4
   1cfa6:	ea47 7701 	orr.w	r7, r7, r1, lsl #28
   1cfaa:	18fb      	adds	r3, r7, r3
        uMod = ui64Val - (u64Tmp * 10);
   1cfac:	eb03 0783 	add.w	r7, r3, r3, lsl #2
   1cfb0:	eba0 0047 	sub.w	r0, r0, r7, lsl #1
        tbuf[ix++] = uMod + '0';
   1cfb4:	f100 0030 	add.w	r0, r0, #48	; 0x30
   1cfb8:	f88e 0000 	strb.w	r0, [lr]
   1cfbc:	eb46 1111 	adc.w	r1, r6, r1, lsr #4
   1cfc0:	4618      	mov	r0, r3
   1cfc2:	3401      	adds	r4, #1
   1cfc4:	f10e 0e01 	add.w	lr, lr, #1
        q32 = (ui32Val>>1) + (ui32Val>>2);
   1cfc8:	ea4f 0c90 	mov.w	ip, r0, lsr #2
   1cfcc:	eb0c 0c50 	add.w	ip, ip, r0, lsr #1
        q32 += (q32 >> 4);
   1cfd0:	eb0c 1c1c 	add.w	ip, ip, ip, lsr #4
        q32 += (q32 >> 8);
   1cfd4:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
        q32 += (q32 >> 16);
   1cfd8:	eb0c 4c1c 	add.w	ip, ip, ip, lsr #16
        q32 >>= 3;
   1cfdc:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
        r32 = ui32Val - q32*10;
   1cfe0:	eb0c 098c 	add.w	r9, ip, ip, lsl #2
        q64 = (ui64Val>>1) + (ui64Val>>2);
   1cfe4:	0843      	lsrs	r3, r0, #1
   1cfe6:	0887      	lsrs	r7, r0, #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
   1cfe8:	f100 0806 	add.w	r8, r0, #6
   1cfec:	eba8 0849 	sub.w	r8, r8, r9, lsl #1
        q64 = (ui64Val>>1) + (ui64Val>>2);
   1cff0:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
   1cff4:	ea47 7781 	orr.w	r7, r7, r1, lsl #30
   1cff8:	088e      	lsrs	r6, r1, #2
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
   1cffa:	4681      	mov	r9, r0
    if ( ui64Val >> 32 )
   1cffc:	2900      	cmp	r1, #0
   1cffe:	d1a0      	bne.n	1cf42 <uint64_to_str+0xe>
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
   1d000:	eb0c 1018 	add.w	r0, ip, r8, lsr #4
        uMod = ui64Val - (u64Tmp * 10);
   1d004:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1d008:	eba9 0943 	sub.w	r9, r9, r3, lsl #1
        tbuf[ix++] = uMod + '0';
   1d00c:	f109 0930 	add.w	r9, r9, #48	; 0x30
   1d010:	f88e 9000 	strb.w	r9, [lr]
        ui64Val = u64Tmp;
    } while ( ui64Val );
   1d014:	2800      	cmp	r0, #0
   1d016:	d1d4      	bne.n	1cfc2 <uint64_to_str+0x8e>
    iNumDig = ix;

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
   1d018:	b14a      	cbz	r2, 1d02e <uint64_to_str+0xfa>
    {
        while ( ix-- )
   1d01a:	192b      	adds	r3, r5, r4
   1d01c:	1e51      	subs	r1, r2, #1
        {
            *pcBuf++ = tbuf[ix];
   1d01e:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   1d022:	f801 0f01 	strb.w	r0, [r1, #1]!
        while ( ix-- )
   1d026:	429d      	cmp	r5, r3
   1d028:	d1f9      	bne.n	1d01e <uint64_to_str+0xea>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
   1d02a:	2300      	movs	r3, #0
   1d02c:	5513      	strb	r3, [r2, r4]
    }

    return iNumDig;
}
   1d02e:	4620      	mov	r0, r4
   1d030:	b009      	add	sp, #36	; 0x24
   1d032:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d036:	bf00      	nop

0001d038 <am_util_stdio_printf_init>:
    g_pfnCharPrint = pfnCharPrint;
   1d038:	4b01      	ldr	r3, [pc, #4]	; (1d040 <am_util_stdio_printf_init+0x8>)
   1d03a:	6018      	str	r0, [r3, #0]
}
   1d03c:	4770      	bx	lr
   1d03e:	bf00      	nop
   1d040:	10005d8c 	.word	0x10005d8c

0001d044 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
   1d044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
   1d048:	780b      	ldrb	r3, [r1, #0]
{
   1d04a:	b089      	sub	sp, #36	; 0x24
   1d04c:	4605      	mov	r5, r0
    while ( *pcFmt != 0x0 )
   1d04e:	2b00      	cmp	r3, #0
   1d050:	f000 8097 	beq.w	1d182 <am_util_stdio_vsprintf+0x13e>
   1d054:	4617      	mov	r7, r2
    uint32_t ui32NumChars, ui32CharCnt = 0;
   1d056:	2600      	movs	r6, #0
   1d058:	e00b      	b.n	1d072 <am_util_stdio_vsprintf+0x2e>
        if ( *pcFmt != '%' )
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
   1d05a:	b125      	cbz	r5, 1d066 <am_util_stdio_vsprintf+0x22>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
   1d05c:	2b0a      	cmp	r3, #10
   1d05e:	f000 8085 	beq.w	1d16c <am_util_stdio_vsprintf+0x128>
                {
                    *pcBuf++ = '\r';
                    ++ui32CharCnt;
                }
                *pcBuf++ = *pcFmt;
   1d062:	f805 3b01 	strb.w	r3, [r5], #1
            }

            ++pcFmt;
   1d066:	3101      	adds	r1, #1
            ++ui32CharCnt;
   1d068:	3601      	adds	r6, #1
    while ( *pcFmt != 0x0 )
   1d06a:	780b      	ldrb	r3, [r1, #0]
   1d06c:	2b00      	cmp	r3, #0
   1d06e:	f000 8089 	beq.w	1d184 <am_util_stdio_vsprintf+0x140>
        if ( *pcFmt != '%' )
   1d072:	2b25      	cmp	r3, #37	; 0x25
   1d074:	d1f1      	bne.n	1d05a <am_util_stdio_vsprintf+0x16>
        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';

        if ( *pcFmt == '0' )
   1d076:	784b      	ldrb	r3, [r1, #1]
   1d078:	2b30      	cmp	r3, #48	; 0x30
   1d07a:	f000 8098 	beq.w	1d1ae <am_util_stdio_vsprintf+0x16a>
        ++pcFmt;
   1d07e:	f101 0e01 	add.w	lr, r1, #1
        ui8PadChar = ' ';
   1d082:	2220      	movs	r2, #32
    if ( *pcStr == '-')
   1d084:	2b2d      	cmp	r3, #45	; 0x2d
   1d086:	f000 8084 	beq.w	1d192 <am_util_stdio_vsprintf+0x14e>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1d08a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    uint32_t ui32Val = 0, uCnt = 0;
   1d08e:	f04f 0c00 	mov.w	ip, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1d092:	2909      	cmp	r1, #9
   1d094:	4674      	mov	r4, lr
    bool bNeg = false;
   1d096:	46e0      	mov	r8, ip
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1d098:	f200 8087 	bhi.w	1d1aa <am_util_stdio_vsprintf+0x166>
   1d09c:	f10c 0c01 	add.w	ip, ip, #1
   1d0a0:	ebac 0c04 	sub.w	ip, ip, r4
   1d0a4:	2100      	movs	r1, #0
        ui32Val *= 10;
   1d0a6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
        ui32Val += (*pcStr - '0');
   1d0aa:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   1d0ae:	eb04 090c 	add.w	r9, r4, ip
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1d0b2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1d0b6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1d0ba:	2809      	cmp	r0, #9
        ui32Val += (*pcStr - '0');
   1d0bc:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1d0c0:	d9f1      	bls.n	1d0a6 <am_util_stdio_vsprintf+0x62>
        pcFmt += ui32NumChars;

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
   1d0c2:	f81e 3009 	ldrb.w	r3, [lr, r9]
        pcFmt += ui32NumChars;
   1d0c6:	eb0e 0409 	add.w	r4, lr, r9
    return bNeg ? -ui32Val : ui32Val;
   1d0ca:	f1b8 0f00 	cmp.w	r8, #0
   1d0ce:	d000      	beq.n	1d0d2 <am_util_stdio_vsprintf+0x8e>
   1d0d0:	4249      	negs	r1, r1
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
   1d0d2:	2b73      	cmp	r3, #115	; 0x73
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
   1d0d4:	4608      	mov	r0, r1
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
   1d0d6:	f000 8125 	beq.w	1d324 <am_util_stdio_vsprintf+0x2e0>
   1d0da:	ea81 78e1 	eor.w	r8, r1, r1, asr #31
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
   1d0de:	2b2e      	cmp	r3, #46	; 0x2e
   1d0e0:	eba8 78e1 	sub.w	r8, r8, r1, asr #31
   1d0e4:	f000 80f2 	beq.w	1d2cc <am_util_stdio_vsprintf+0x288>
        iPrecision = 6;             // printf() default precision for %f is 6
   1d0e8:	f04f 0906 	mov.w	r9, #6
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
   1d0ec:	2b6c      	cmp	r3, #108	; 0x6c
   1d0ee:	d104      	bne.n	1d0fa <am_util_stdio_vsprintf+0xb6>
        {
            pcFmt++;
            if ( *pcFmt == 'l' )    // "ll" (long long)
   1d0f0:	7863      	ldrb	r3, [r4, #1]
   1d0f2:	2b6c      	cmp	r3, #108	; 0x6c
   1d0f4:	f000 8163 	beq.w	1d3be <am_util_stdio_vsprintf+0x37a>
            pcFmt++;
   1d0f8:	3401      	adds	r4, #1
                pcFmt++;
                bLongLong = true;
            }
        }

        switch ( *pcFmt )
   1d0fa:	f1a3 0046 	sub.w	r0, r3, #70	; 0x46
   1d0fe:	2832      	cmp	r0, #50	; 0x32
   1d100:	d85a      	bhi.n	1d1b8 <am_util_stdio_vsprintf+0x174>
   1d102:	e8df f010 	tbh	[pc, r0, lsl #1]
   1d106:	005f      	.short	0x005f
   1d108:	00590059 	.word	0x00590059
   1d10c:	00590059 	.word	0x00590059
   1d110:	00590059 	.word	0x00590059
   1d114:	00590059 	.word	0x00590059
   1d118:	00590059 	.word	0x00590059
   1d11c:	00590059 	.word	0x00590059
   1d120:	00590059 	.word	0x00590059
   1d124:	00590059 	.word	0x00590059
   1d128:	01dc0059 	.word	0x01dc0059
   1d12c:	00590059 	.word	0x00590059
   1d130:	00590059 	.word	0x00590059
   1d134:	00590059 	.word	0x00590059
   1d138:	00590059 	.word	0x00590059
   1d13c:	00590059 	.word	0x00590059
   1d140:	00b400c9 	.word	0x00b400c9
   1d144:	005f0059 	.word	0x005f0059
   1d148:	00590059 	.word	0x00590059
   1d14c:	005900b4 	.word	0x005900b4
   1d150:	00590059 	.word	0x00590059
   1d154:	00590059 	.word	0x00590059
   1d158:	00590059 	.word	0x00590059
   1d15c:	00590059 	.word	0x00590059
   1d160:	0059010e 	.word	0x0059010e
   1d164:	005900d2 	.word	0x005900d2
   1d168:	02fb0059 	.word	0x02fb0059
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
   1d16c:	4acc      	ldr	r2, [pc, #816]	; (1d4a0 <am_util_stdio_vsprintf+0x45c>)
   1d16e:	7812      	ldrb	r2, [r2, #0]
   1d170:	2a00      	cmp	r2, #0
   1d172:	f43f af76 	beq.w	1d062 <am_util_stdio_vsprintf+0x1e>
                    *pcBuf++ = '\r';
   1d176:	230d      	movs	r3, #13
   1d178:	f805 3b01 	strb.w	r3, [r5], #1
                    ++ui32CharCnt;
   1d17c:	3601      	adds	r6, #1
                *pcBuf++ = *pcFmt;
   1d17e:	780b      	ldrb	r3, [r1, #0]
   1d180:	e76f      	b.n	1d062 <am_util_stdio_vsprintf+0x1e>
    uint32_t ui32NumChars, ui32CharCnt = 0;
   1d182:	461e      	mov	r6, r3
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
   1d184:	b10d      	cbz	r5, 1d18a <am_util_stdio_vsprintf+0x146>
    {
        *pcBuf = 0x0;
   1d186:	2300      	movs	r3, #0
   1d188:	702b      	strb	r3, [r5, #0]
    }

    return (ui32CharCnt);
}
   1d18a:	4630      	mov	r0, r6
   1d18c:	b009      	add	sp, #36	; 0x24
   1d18e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1d192:	f89e 3001 	ldrb.w	r3, [lr, #1]
   1d196:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
        uCnt++;
   1d19a:	f04f 0c01 	mov.w	ip, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1d19e:	2909      	cmp	r1, #9
        pcStr++;
   1d1a0:	eb0e 040c 	add.w	r4, lr, ip
        bNeg = true;
   1d1a4:	46e0      	mov	r8, ip
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1d1a6:	f67f af79 	bls.w	1d09c <am_util_stdio_vsprintf+0x58>
   1d1aa:	2100      	movs	r1, #0
   1d1ac:	e78d      	b.n	1d0ca <am_util_stdio_vsprintf+0x86>
            ui8PadChar = '0';
   1d1ae:	461a      	mov	r2, r3
            ++pcFmt;
   1d1b0:	f101 0e02 	add.w	lr, r1, #2
    if ( *pcStr == '-')
   1d1b4:	788b      	ldrb	r3, [r1, #2]
   1d1b6:	e765      	b.n	1d084 <am_util_stdio_vsprintf+0x40>
                if ( pcBuf )
   1d1b8:	b10d      	cbz	r5, 1d1be <am_util_stdio_vsprintf+0x17a>
                    *pcBuf++ = *pcFmt;
   1d1ba:	f805 3b01 	strb.w	r3, [r5], #1
                ++ui32CharCnt;
   1d1be:	3601      	adds	r6, #1
        ++pcFmt;
   1d1c0:	1c61      	adds	r1, r4, #1
   1d1c2:	e752      	b.n	1d06a <am_util_stdio_vsprintf+0x26>
                if ( pcBuf )
   1d1c4:	2d00      	cmp	r5, #0
   1d1c6:	d0fb      	beq.n	1d1c0 <am_util_stdio_vsprintf+0x17c>
                    float fValue = va_arg(pArgs, double);
   1d1c8:	3707      	adds	r7, #7
   1d1ca:	f027 0707 	bic.w	r7, r7, #7
   1d1ce:	e8f7 0102 	ldrd	r0, r1, [r7], #8
   1d1d2:	f7ef f82f 	bl	c234 <__aeabi_d2f>
   1d1d6:	ee07 0a90 	vmov	s15, r0
    if (fValue == 0.0f)
   1d1da:	eef5 7a40 	vcmp.f32	s15, #0.0
                    *(uint32_t*)pcBuf = 20;
   1d1de:	2314      	movs	r3, #20
    if (fValue == 0.0f)
   1d1e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    *(uint32_t*)pcBuf = 20;
   1d1e4:	602b      	str	r3, [r5, #0]
    if (fValue == 0.0f)
   1d1e6:	f000 835d 	beq.w	1d8a4 <am_util_stdio_vsprintf+0x860>
    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
   1d1ea:	f3c0 51c7 	ubfx	r1, r0, #23, #8
   1d1ee:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
    unFloatValue.F = fValue;
   1d1f2:	4603      	mov	r3, r0
    if (iExp2 >= 31)
   1d1f4:	2a1e      	cmp	r2, #30
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
   1d1f6:	f3c0 0016 	ubfx	r0, r0, #0, #23
   1d1fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    if (iExp2 >= 31)
   1d1fe:	f300 837c 	bgt.w	1d8fa <am_util_stdio_vsprintf+0x8b6>
    else if (iExp2 < -23)
   1d202:	f112 0f17 	cmn.w	r2, #23
   1d206:	f2c0 8374 	blt.w	1d8f2 <am_util_stdio_vsprintf+0x8ae>
    else if (iExp2 >= 23)
   1d20a:	2a16      	cmp	r2, #22
   1d20c:	f340 8246 	ble.w	1d69c <am_util_stdio_vsprintf+0x658>
        i32IntPart = i32Significand << (iExp2 - 23);
   1d210:	3996      	subs	r1, #150	; 0x96
    if (unFloatValue.I32 < 0)
   1d212:	2b00      	cmp	r3, #0
        i32IntPart = i32Significand << (iExp2 - 23);
   1d214:	fa00 f001 	lsl.w	r0, r0, r1
    if (unFloatValue.I32 < 0)
   1d218:	f2c0 8287 	blt.w	1d72a <am_util_stdio_vsprintf+0x6e6>
   1d21c:	462b      	mov	r3, r5
    i32FracPart = 0;
   1d21e:	f04f 0800 	mov.w	r8, #0
    if (i32IntPart == 0)
   1d222:	2800      	cmp	r0, #0
   1d224:	f000 827c 	beq.w	1d720 <am_util_stdio_vsprintf+0x6dc>
            *pcBuf++ = '-';
   1d228:	461a      	mov	r2, r3
   1d22a:	bfde      	ittt	le
   1d22c:	232d      	movle	r3, #45	; 0x2d
   1d22e:	f802 3b01 	strble.w	r3, [r2], #1
            uint64_to_str(-i32IntPart, pcBuf);
   1d232:	4240      	negle	r0, r0
   1d234:	17c1      	asrs	r1, r0, #31
   1d236:	f7ff fe7d 	bl	1cf34 <uint64_to_str>
        while (*pcBuf)    // Get to end of new string
   1d23a:	7813      	ldrb	r3, [r2, #0]
   1d23c:	b11b      	cbz	r3, 1d246 <am_util_stdio_vsprintf+0x202>
   1d23e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   1d242:	2b00      	cmp	r3, #0
   1d244:	d1fb      	bne.n	1d23e <am_util_stdio_vsprintf+0x1fa>
    *pcBuf++ = '.';
   1d246:	232e      	movs	r3, #46	; 0x2e
   1d248:	7013      	strb	r3, [r2, #0]
    if (i32FracPart == 0)
   1d24a:	f1b8 0f00 	cmp.w	r8, #0
   1d24e:	f040 8291 	bne.w	1d774 <am_util_stdio_vsprintf+0x730>
        *pcBuf++ = '0';
   1d252:	1c90      	adds	r0, r2, #2
   1d254:	2330      	movs	r3, #48	; 0x30
   1d256:	7053      	strb	r3, [r2, #1]
    return (pcBuf - pcBufInitial);
   1d258:	1b41      	subs	r1, r0, r5
    *pcBuf = 0x00;
   1d25a:	2300      	movs	r3, #0
                    if ( iVal < 0 )
   1d25c:	4299      	cmp	r1, r3
    *pcBuf = 0x00;
   1d25e:	7003      	strb	r3, [r0, #0]
                    if ( iVal < 0 )
   1d260:	f2c0 82c3 	blt.w	1d7ea <am_util_stdio_vsprintf+0x7a6>
                    ui32CharCnt += iVal;
   1d264:	460b      	mov	r3, r1
   1d266:	441e      	add	r6, r3
                    pcBuf += iVal;
   1d268:	441d      	add	r5, r3
        ++pcFmt;
   1d26a:	1c61      	adds	r1, r4, #1
   1d26c:	e6fd      	b.n	1d06a <am_util_stdio_vsprintf+0x26>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
   1d26e:	f857 9b04 	ldr.w	r9, [r7], #4
   1d272:	ea4f 7ae9 	mov.w	sl, r9, asr #31
                if ( i64Val < 0 )
   1d276:	f1ba 0f00 	cmp.w	sl, #0
   1d27a:	f2c0 8113 	blt.w	1d4a4 <am_util_stdio_vsprintf+0x460>
                if ( iWidth )
   1d27e:	2900      	cmp	r1, #0
   1d280:	f040 82bd 	bne.w	1d7fe <am_util_stdio_vsprintf+0x7ba>
                iVal = uint64_to_str(ui64Val, pcBuf);
   1d284:	4648      	mov	r0, r9
   1d286:	4651      	mov	r1, sl
   1d288:	462a      	mov	r2, r5
   1d28a:	f7ff fe53 	bl	1cf34 <uint64_to_str>
                if ( pcBuf )
   1d28e:	b9d5      	cbnz	r5, 1d2c6 <am_util_stdio_vsprintf+0x282>
                ui32CharCnt += iVal;
   1d290:	2500      	movs	r5, #0
   1d292:	4406      	add	r6, r0
        ++pcFmt;
   1d294:	1c61      	adds	r1, r4, #1
   1d296:	e6e8      	b.n	1d06a <am_util_stdio_vsprintf+0x26>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
   1d298:	1d3b      	adds	r3, r7, #4
                if ( pcBuf )
   1d29a:	b115      	cbz	r5, 1d2a2 <am_util_stdio_vsprintf+0x25e>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
   1d29c:	683a      	ldr	r2, [r7, #0]
   1d29e:	f805 2b01 	strb.w	r2, [r5], #1
                ++ui32CharCnt;
   1d2a2:	3601      	adds	r6, #1
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
   1d2a4:	461f      	mov	r7, r3
        ++pcFmt;
   1d2a6:	1c61      	adds	r1, r4, #1
   1d2a8:	e6df      	b.n	1d06a <am_util_stdio_vsprintf+0x26>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   1d2aa:	f857 ab04 	ldr.w	sl, [r7], #4
   1d2ae:	f04f 0900 	mov.w	r9, #0
                if ( iWidth )
   1d2b2:	2900      	cmp	r1, #0
   1d2b4:	f040 81b0 	bne.w	1d618 <am_util_stdio_vsprintf+0x5d4>
                iVal = uint64_to_str(ui64Val, pcBuf);
   1d2b8:	4650      	mov	r0, sl
   1d2ba:	4649      	mov	r1, r9
   1d2bc:	462a      	mov	r2, r5
   1d2be:	f7ff fe39 	bl	1cf34 <uint64_to_str>
                if ( pcBuf )
   1d2c2:	2d00      	cmp	r5, #0
   1d2c4:	d0e4      	beq.n	1d290 <am_util_stdio_vsprintf+0x24c>
                    pcBuf += iVal;
   1d2c6:	4405      	add	r5, r0
                ui32CharCnt += iVal;
   1d2c8:	4406      	add	r6, r0
                break;
   1d2ca:	e7e3      	b.n	1d294 <am_util_stdio_vsprintf+0x250>
    if ( *pcStr == '-')
   1d2cc:	7860      	ldrb	r0, [r4, #1]
   1d2ce:	282d      	cmp	r0, #45	; 0x2d
            ++pcFmt;
   1d2d0:	f104 0c01 	add.w	ip, r4, #1
    if ( *pcStr == '-')
   1d2d4:	f000 8195 	beq.w	1d602 <am_util_stdio_vsprintf+0x5be>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1d2d8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1d2dc:	2b09      	cmp	r3, #9
   1d2de:	f200 82ea 	bhi.w	1d8b6 <am_util_stdio_vsprintf+0x872>
    uint32_t ui32Val = 0, uCnt = 0;
   1d2e2:	2300      	movs	r3, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1d2e4:	4664      	mov	r4, ip
    bool bNeg = false;
   1d2e6:	4699      	mov	r9, r3
   1d2e8:	3301      	adds	r3, #1
   1d2ea:	eba3 0e04 	sub.w	lr, r3, r4
   1d2ee:	2300      	movs	r3, #0
        ui32Val *= 10;
   1d2f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        ui32Val += (*pcStr - '0');
   1d2f4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   1d2f8:	eb04 0a0e 	add.w	sl, r4, lr
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1d2fc:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   1d300:	f1a0 0b30 	sub.w	fp, r0, #48	; 0x30
   1d304:	f1bb 0f09 	cmp.w	fp, #9
        ui32Val += (*pcStr - '0');
   1d308:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1d30c:	d9f0      	bls.n	1d2f0 <am_util_stdio_vsprintf+0x2ac>
    return bNeg ? -ui32Val : ui32Val;
   1d30e:	f1b9 0f00 	cmp.w	r9, #0
   1d312:	d000      	beq.n	1d316 <am_util_stdio_vsprintf+0x2d2>
   1d314:	425b      	negs	r3, r3
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
   1d316:	4699      	mov	r9, r3
            pcFmt += ui32NumChars;
   1d318:	eb0c 040a 	add.w	r4, ip, sl
        if ( *pcFmt == 'l' )
   1d31c:	f81c 300a 	ldrb.w	r3, [ip, sl]
   1d320:	e6e4      	b.n	1d0ec <am_util_stdio_vsprintf+0xa8>
        switch ( *pcFmt )
   1d322:	4640      	mov	r0, r8
                pcStr = va_arg(pArgs, char *);
   1d324:	46b9      	mov	r9, r7
   1d326:	f859 3b04 	ldr.w	r3, [r9], #4
    if ( !pcBuf )
   1d32a:	2b00      	cmp	r3, #0
   1d32c:	f000 81c6 	beq.w	1d6bc <am_util_stdio_vsprintf+0x678>
    while ( *pcBuf++ )
   1d330:	469c      	mov	ip, r3
   1d332:	f81c 1b01 	ldrb.w	r1, [ip], #1
   1d336:	2900      	cmp	r1, #0
   1d338:	f000 82c1 	beq.w	1d8be <am_util_stdio_vsprintf+0x87a>
    uint32_t ui32RetVal = 0;
   1d33c:	f04f 0e00 	mov.w	lr, #0
    while ( *pcBuf++ )
   1d340:	f81c 7b01 	ldrb.w	r7, [ip], #1
        ui32RetVal++;
   1d344:	f10e 0e01 	add.w	lr, lr, #1
    while ( *pcBuf++ )
   1d348:	2f00      	cmp	r7, #0
   1d34a:	d1f9      	bne.n	1d340 <am_util_stdio_vsprintf+0x2fc>
                if ( iWidth > 0 )
   1d34c:	2800      	cmp	r0, #0
   1d34e:	dd02      	ble.n	1d356 <am_util_stdio_vsprintf+0x312>
                    if ( ui32strlen < iWidth )
   1d350:	4570      	cmp	r0, lr
   1d352:	f200 81d6 	bhi.w	1d702 <am_util_stdio_vsprintf+0x6be>
   1d356:	f1c3 0801 	rsb	r8, r3, #1
                while (*pcStr != 0x0)
   1d35a:	46b2      	mov	sl, r6
   1d35c:	462f      	mov	r7, r5
   1d35e:	eb08 0c06 	add.w	ip, r8, r6
   1d362:	e000      	b.n	1d366 <am_util_stdio_vsprintf+0x322>
                        *pcBuf++ = *pcStr;
   1d364:	462f      	mov	r7, r5
   1d366:	eb0c 0603 	add.w	r6, ip, r3
                    if ( pcBuf )
   1d36a:	2d00      	cmp	r5, #0
   1d36c:	f000 8131 	beq.w	1d5d2 <am_util_stdio_vsprintf+0x58e>
                        *pcBuf++ = *pcStr;
   1d370:	7039      	strb	r1, [r7, #0]
                while (*pcStr != 0x0)
   1d372:	f813 1f01 	ldrb.w	r1, [r3, #1]!
                        *pcBuf++ = *pcStr;
   1d376:	3501      	adds	r5, #1
                while (*pcStr != 0x0)
   1d378:	2900      	cmp	r1, #0
   1d37a:	d1f3      	bne.n	1d364 <am_util_stdio_vsprintf+0x320>
                if ( iWidth )
   1d37c:	b1e0      	cbz	r0, 1d3b8 <am_util_stdio_vsprintf+0x374>
                    iWidth = -iWidth;
   1d37e:	f1c0 0800 	rsb	r8, r0, #0
                    if ( ui32strlen < iWidth )
   1d382:	45f0      	cmp	r8, lr
   1d384:	d918      	bls.n	1d3b8 <am_util_stdio_vsprintf+0x374>
                        iWidth -= ui32strlen;
   1d386:	eba8 030e 	sub.w	r3, r8, lr
    if ( i32NumChars <= 0 )
   1d38a:	2b00      	cmp	r3, #0
   1d38c:	f340 82b3 	ble.w	1d8f6 <am_util_stdio_vsprintf+0x8b2>
    while ( i32NumChars-- )
   1d390:	3b01      	subs	r3, #1
    int32_t i32Cnt = 0;
   1d392:	4694      	mov	ip, r2
   1d394:	2000      	movs	r0, #0
   1d396:	461a      	mov	r2, r3
   1d398:	462b      	mov	r3, r5
            *pcBuf++ = cPadChar;
   1d39a:	4619      	mov	r1, r3
        if ( pcBuf )
   1d39c:	2b00      	cmp	r3, #0
   1d39e:	f000 8129 	beq.w	1d5f4 <am_util_stdio_vsprintf+0x5b0>
            *pcBuf++ = cPadChar;
   1d3a2:	f801 cb01 	strb.w	ip, [r1], #1
   1d3a6:	4617      	mov	r7, r2
   1d3a8:	460b      	mov	r3, r1
        i32Cnt++;
   1d3aa:	3001      	adds	r0, #1
    while ( i32NumChars-- )
   1d3ac:	1e7a      	subs	r2, r7, #1
   1d3ae:	2f00      	cmp	r7, #0
   1d3b0:	d1f3      	bne.n	1d39a <am_util_stdio_vsprintf+0x356>
                        ui32CharCnt += iWidth;
   1d3b2:	4406      	add	r6, r0
                        pcBuf += pcBuf ? iWidth : 0;
   1d3b4:	b105      	cbz	r5, 1d3b8 <am_util_stdio_vsprintf+0x374>
   1d3b6:	4405      	add	r5, r0
                pcStr = va_arg(pArgs, char *);
   1d3b8:	464f      	mov	r7, r9
        ++pcFmt;
   1d3ba:	1c61      	adds	r1, r4, #1
   1d3bc:	e655      	b.n	1d06a <am_util_stdio_vsprintf+0x26>
        switch ( *pcFmt )
   1d3be:	78a3      	ldrb	r3, [r4, #2]
   1d3c0:	f1a3 0046 	sub.w	r0, r3, #70	; 0x46
                pcFmt++;
   1d3c4:	3402      	adds	r4, #2
        switch ( *pcFmt )
   1d3c6:	2832      	cmp	r0, #50	; 0x32
   1d3c8:	f63f aef6 	bhi.w	1d1b8 <am_util_stdio_vsprintf+0x174>
   1d3cc:	f20f 0c04 	addw	ip, pc, #4
   1d3d0:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
   1d3d4:	0001d1c5 	.word	0x0001d1c5
   1d3d8:	0001d1b9 	.word	0x0001d1b9
   1d3dc:	0001d1b9 	.word	0x0001d1b9
   1d3e0:	0001d1b9 	.word	0x0001d1b9
   1d3e4:	0001d1b9 	.word	0x0001d1b9
   1d3e8:	0001d1b9 	.word	0x0001d1b9
   1d3ec:	0001d1b9 	.word	0x0001d1b9
   1d3f0:	0001d1b9 	.word	0x0001d1b9
   1d3f4:	0001d1b9 	.word	0x0001d1b9
   1d3f8:	0001d1b9 	.word	0x0001d1b9
   1d3fc:	0001d1b9 	.word	0x0001d1b9
   1d400:	0001d1b9 	.word	0x0001d1b9
   1d404:	0001d1b9 	.word	0x0001d1b9
   1d408:	0001d1b9 	.word	0x0001d1b9
   1d40c:	0001d1b9 	.word	0x0001d1b9
   1d410:	0001d1b9 	.word	0x0001d1b9
   1d414:	0001d1b9 	.word	0x0001d1b9
   1d418:	0001d1b9 	.word	0x0001d1b9
   1d41c:	0001d74d 	.word	0x0001d74d
   1d420:	0001d1b9 	.word	0x0001d1b9
   1d424:	0001d1b9 	.word	0x0001d1b9
   1d428:	0001d1b9 	.word	0x0001d1b9
   1d42c:	0001d1b9 	.word	0x0001d1b9
   1d430:	0001d1b9 	.word	0x0001d1b9
   1d434:	0001d1b9 	.word	0x0001d1b9
   1d438:	0001d1b9 	.word	0x0001d1b9
   1d43c:	0001d1b9 	.word	0x0001d1b9
   1d440:	0001d1b9 	.word	0x0001d1b9
   1d444:	0001d1b9 	.word	0x0001d1b9
   1d448:	0001d299 	.word	0x0001d299
   1d44c:	0001d4ed 	.word	0x0001d4ed
   1d450:	0001d1b9 	.word	0x0001d1b9
   1d454:	0001d1c5 	.word	0x0001d1c5
   1d458:	0001d1b9 	.word	0x0001d1b9
   1d45c:	0001d1b9 	.word	0x0001d1b9
   1d460:	0001d4ed 	.word	0x0001d4ed
   1d464:	0001d1b9 	.word	0x0001d1b9
   1d468:	0001d1b9 	.word	0x0001d1b9
   1d46c:	0001d1b9 	.word	0x0001d1b9
   1d470:	0001d1b9 	.word	0x0001d1b9
   1d474:	0001d1b9 	.word	0x0001d1b9
   1d478:	0001d1b9 	.word	0x0001d1b9
   1d47c:	0001d1b9 	.word	0x0001d1b9
   1d480:	0001d1b9 	.word	0x0001d1b9
   1d484:	0001d1b9 	.word	0x0001d1b9
   1d488:	0001d323 	.word	0x0001d323
   1d48c:	0001d1b9 	.word	0x0001d1b9
   1d490:	0001d4fd 	.word	0x0001d4fd
   1d494:	0001d1b9 	.word	0x0001d1b9
   1d498:	0001d1b9 	.word	0x0001d1b9
   1d49c:	0001d761 	.word	0x0001d761
   1d4a0:	10005d88 	.word	0x10005d88
                    ui64Val = -i64Val;          // Get absolute value
   1d4a4:	f1d9 0900 	rsbs	r9, r9, #0
   1d4a8:	eb6a 0a4a 	sbc.w	sl, sl, sl, lsl #1
                if ( iWidth )
   1d4ac:	2900      	cmp	r1, #0
   1d4ae:	f040 81fd 	bne.w	1d8ac <am_util_stdio_vsprintf+0x868>
                        if ( pcBuf )
   1d4b2:	b115      	cbz	r5, 1d4ba <am_util_stdio_vsprintf+0x476>
                            *pcBuf++ = '-';
   1d4b4:	232d      	movs	r3, #45	; 0x2d
   1d4b6:	f805 3b01 	strb.w	r3, [r5], #1
                        ++ui32CharCnt;
   1d4ba:	3601      	adds	r6, #1
   1d4bc:	e6e2      	b.n	1d284 <am_util_stdio_vsprintf+0x240>
        bLower = bLongLong = false;
   1d4be:	f04f 0e00 	mov.w	lr, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   1d4c2:	f857 0b04 	ldr.w	r0, [r7], #4
   1d4c6:	f04f 0c00 	mov.w	ip, #0
                if ( iWidth )
   1d4ca:	b9f9      	cbnz	r1, 1d50c <am_util_stdio_vsprintf+0x4c8>
    if ( ui64Val == 0 )
   1d4cc:	ea50 030c 	orrs.w	r3, r0, ip
   1d4d0:	d14d      	bne.n	1d56e <am_util_stdio_vsprintf+0x52a>
    if (pcBuf)
   1d4d2:	2d00      	cmp	r5, #0
   1d4d4:	d079      	beq.n	1d5ca <am_util_stdio_vsprintf+0x586>
            *pcBuf++ = tbuf[ix];
   1d4d6:	462b      	mov	r3, r5
   1d4d8:	2230      	movs	r2, #48	; 0x30
   1d4da:	f803 2b01 	strb.w	r2, [r3], #1
   1d4de:	2201      	movs	r2, #1
   1d4e0:	461d      	mov	r5, r3
        *pcBuf = 0;
   1d4e2:	2100      	movs	r1, #0
   1d4e4:	7019      	strb	r1, [r3, #0]
                ui32CharCnt += iVal;
   1d4e6:	4416      	add	r6, r2
        ++pcFmt;
   1d4e8:	1c61      	adds	r1, r4, #1
   1d4ea:	e5be      	b.n	1d06a <am_util_stdio_vsprintf+0x26>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
   1d4ec:	3707      	adds	r7, #7
   1d4ee:	f027 0707 	bic.w	r7, r7, #7
   1d4f2:	f8d7 a004 	ldr.w	sl, [r7, #4]
   1d4f6:	f857 9b08 	ldr.w	r9, [r7], #8
   1d4fa:	e6bc      	b.n	1d276 <am_util_stdio_vsprintf+0x232>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   1d4fc:	3707      	adds	r7, #7
   1d4fe:	f027 0707 	bic.w	r7, r7, #7
   1d502:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1d506:	f857 ab08 	ldr.w	sl, [r7], #8
   1d50a:	e6d2      	b.n	1d2b2 <am_util_stdio_vsprintf+0x26e>
    int iDigits = ui64Val ? 0 : 1;
   1d50c:	ea50 030c 	orrs.w	r3, r0, ip
   1d510:	bf0c      	ite	eq
   1d512:	2101      	moveq	r1, #1
   1d514:	2100      	movne	r1, #0
    while ( ui64Val )
   1d516:	d00b      	beq.n	1d530 <am_util_stdio_vsprintf+0x4ec>
   1d518:	4603      	mov	r3, r0
   1d51a:	46e1      	mov	r9, ip
        ui64Val >>= 4;
   1d51c:	091b      	lsrs	r3, r3, #4
   1d51e:	ea43 7309 	orr.w	r3, r3, r9, lsl #28
   1d522:	ea4f 1919 	mov.w	r9, r9, lsr #4
    while ( ui64Val )
   1d526:	ea53 0a09 	orrs.w	sl, r3, r9
        ++iDigits;
   1d52a:	f101 0101 	add.w	r1, r1, #1
    while ( ui64Val )
   1d52e:	d1f5      	bne.n	1d51c <am_util_stdio_vsprintf+0x4d8>
                    iWidth -= ndigits_in_hex(ui64Val);
   1d530:	eba8 0301 	sub.w	r3, r8, r1
    if ( i32NumChars <= 0 )
   1d534:	2b00      	cmp	r3, #0
   1d536:	f340 81b2 	ble.w	1d89e <am_util_stdio_vsprintf+0x85a>
    while ( i32NumChars-- )
   1d53a:	3b01      	subs	r3, #1
    int32_t i32Cnt = 0;
   1d53c:	4691      	mov	r9, r2
   1d53e:	4682      	mov	sl, r0
   1d540:	f04f 0800 	mov.w	r8, #0
   1d544:	462a      	mov	r2, r5
   1d546:	4618      	mov	r0, r3
            *pcBuf++ = cPadChar;
   1d548:	4611      	mov	r1, r2
        if ( pcBuf )
   1d54a:	2a00      	cmp	r2, #0
   1d54c:	d04c      	beq.n	1d5e8 <am_util_stdio_vsprintf+0x5a4>
            *pcBuf++ = cPadChar;
   1d54e:	f801 9b01 	strb.w	r9, [r1], #1
   1d552:	4603      	mov	r3, r0
   1d554:	460a      	mov	r2, r1
        i32Cnt++;
   1d556:	f108 0801 	add.w	r8, r8, #1
    while ( i32NumChars-- )
   1d55a:	1e58      	subs	r0, r3, #1
   1d55c:	2b00      	cmp	r3, #0
   1d55e:	d1f3      	bne.n	1d548 <am_util_stdio_vsprintf+0x504>
                    ui32CharCnt += iWidth;
   1d560:	4650      	mov	r0, sl
   1d562:	4446      	add	r6, r8
                    pcBuf += pcBuf ? iWidth : 0;
   1d564:	b375      	cbz	r5, 1d5c4 <am_util_stdio_vsprintf+0x580>
    if ( ui64Val == 0 )
   1d566:	ea50 030c 	orrs.w	r3, r0, ip
                    pcBuf += pcBuf ? iWidth : 0;
   1d56a:	4445      	add	r5, r8
    if ( ui64Val == 0 )
   1d56c:	d0b3      	beq.n	1d4d6 <am_util_stdio_vsprintf+0x492>
   1d56e:	f1be 0f00 	cmp.w	lr, #0
   1d572:	f10d 080c 	add.w	r8, sp, #12
   1d576:	bf14      	ite	ne
   1d578:	f04f 0927 	movne.w	r9, #39	; 0x27
   1d57c:	f04f 0907 	moveq.w	r9, #7
   1d580:	4641      	mov	r1, r8
    int iNumDig, ix = 0;
   1d582:	2200      	movs	r2, #0
        cCh = ui64Val & 0xf;
   1d584:	f000 030f 	and.w	r3, r0, #15
        if ( cCh > 9 )
   1d588:	2b09      	cmp	r3, #9
            cCh += bLower ? 0x27 : 0x7;
   1d58a:	bf88      	it	hi
   1d58c:	444b      	addhi	r3, r9
        ui64Val >>= 4;
   1d58e:	ea4f 1e10 	mov.w	lr, r0, lsr #4
   1d592:	ea4e 700c 	orr.w	r0, lr, ip, lsl #28
        tbuf[ix++] = cCh + '0';
   1d596:	3330      	adds	r3, #48	; 0x30
        ui64Val >>= 4;
   1d598:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
        tbuf[ix++] = cCh + '0';
   1d59c:	f801 3b01 	strb.w	r3, [r1], #1
    while ( ui64Val )
   1d5a0:	ea50 030c 	orrs.w	r3, r0, ip
        tbuf[ix++] = cCh + '0';
   1d5a4:	f102 0201 	add.w	r2, r2, #1
    while ( ui64Val )
   1d5a8:	d1ec      	bne.n	1d584 <am_util_stdio_vsprintf+0x540>
    if (pcBuf)
   1d5aa:	b17d      	cbz	r5, 1d5cc <am_util_stdio_vsprintf+0x588>
   1d5ac:	eb08 0302 	add.w	r3, r8, r2
   1d5b0:	1e69      	subs	r1, r5, #1
            *pcBuf++ = tbuf[ix];
   1d5b2:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   1d5b6:	f801 0f01 	strb.w	r0, [r1, #1]!
        while (ix--)
   1d5ba:	4543      	cmp	r3, r8
   1d5bc:	d1f9      	bne.n	1d5b2 <am_util_stdio_vsprintf+0x56e>
            *pcBuf++ = tbuf[ix];
   1d5be:	18ab      	adds	r3, r5, r2
                    pcBuf += iVal;
   1d5c0:	461d      	mov	r5, r3
   1d5c2:	e78e      	b.n	1d4e2 <am_util_stdio_vsprintf+0x49e>
    if ( ui64Val == 0 )
   1d5c4:	ea50 030c 	orrs.w	r3, r0, ip
   1d5c8:	d1d1      	bne.n	1d56e <am_util_stdio_vsprintf+0x52a>
   1d5ca:	2201      	movs	r2, #1
                if ( pcBuf )
   1d5cc:	2500      	movs	r5, #0
                ui32CharCnt += iVal;
   1d5ce:	4416      	add	r6, r2
                break;
   1d5d0:	e78a      	b.n	1d4e8 <am_util_stdio_vsprintf+0x4a4>
   1d5d2:	eb08 010a 	add.w	r1, r8, sl
                    ++ui32CharCnt;
   1d5d6:	18ce      	adds	r6, r1, r3
                while (*pcStr != 0x0)
   1d5d8:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   1d5dc:	2f00      	cmp	r7, #0
   1d5de:	d1fa      	bne.n	1d5d6 <am_util_stdio_vsprintf+0x592>
                if ( iWidth )
   1d5e0:	2800      	cmp	r0, #0
   1d5e2:	f43f aee9 	beq.w	1d3b8 <am_util_stdio_vsprintf+0x374>
   1d5e6:	e6ca      	b.n	1d37e <am_util_stdio_vsprintf+0x33a>
    while ( i32NumChars-- )
   1d5e8:	1e43      	subs	r3, r0, #1
        i32Cnt++;
   1d5ea:	f108 0801 	add.w	r8, r8, #1
    while ( i32NumChars-- )
   1d5ee:	2800      	cmp	r0, #0
   1d5f0:	d1b1      	bne.n	1d556 <am_util_stdio_vsprintf+0x512>
   1d5f2:	e7b5      	b.n	1d560 <am_util_stdio_vsprintf+0x51c>
   1d5f4:	1e57      	subs	r7, r2, #1
        i32Cnt++;
   1d5f6:	3001      	adds	r0, #1
    while ( i32NumChars-- )
   1d5f8:	2a00      	cmp	r2, #0
   1d5fa:	f47f aed6 	bne.w	1d3aa <am_util_stdio_vsprintf+0x366>
                        ui32CharCnt += iWidth;
   1d5fe:	4406      	add	r6, r0
   1d600:	e6d8      	b.n	1d3b4 <am_util_stdio_vsprintf+0x370>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1d602:	78a0      	ldrb	r0, [r4, #2]
   1d604:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1d608:	2b09      	cmp	r3, #9
        pcStr++;
   1d60a:	f104 0402 	add.w	r4, r4, #2
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1d60e:	f200 8176 	bhi.w	1d8fe <am_util_stdio_vsprintf+0x8ba>
        uCnt++;
   1d612:	2301      	movs	r3, #1
        bNeg = true;
   1d614:	4699      	mov	r9, r3
   1d616:	e667      	b.n	1d2e8 <am_util_stdio_vsprintf+0x2a4>
    int iNDigits = ui64Val ? 0 : 1;
   1d618:	ea5a 0309 	orrs.w	r3, sl, r9
   1d61c:	bf0c      	ite	eq
   1d61e:	f04f 0b01 	moveq.w	fp, #1
   1d622:	f04f 0b00 	movne.w	fp, #0
    while ( ui64Val )
   1d626:	d012      	beq.n	1d64e <am_util_stdio_vsprintf+0x60a>
   1d628:	4649      	mov	r1, r9
   1d62a:	9400      	str	r4, [sp, #0]
   1d62c:	4650      	mov	r0, sl
   1d62e:	465c      	mov	r4, fp
   1d630:	46cb      	mov	fp, r9
   1d632:	46a9      	mov	r9, r5
   1d634:	4615      	mov	r5, r2
        ui64Val = divu64_10(ui64Val);
   1d636:	f7ff fc21 	bl	1ce7c <divu64_10>
    while ( ui64Val )
   1d63a:	ea50 0301 	orrs.w	r3, r0, r1
        ++iNDigits;
   1d63e:	f104 0401 	add.w	r4, r4, #1
    while ( ui64Val )
   1d642:	d1f8      	bne.n	1d636 <am_util_stdio_vsprintf+0x5f2>
   1d644:	462a      	mov	r2, r5
   1d646:	464d      	mov	r5, r9
   1d648:	46d9      	mov	r9, fp
   1d64a:	46a3      	mov	fp, r4
   1d64c:	9c00      	ldr	r4, [sp, #0]
                    iWidth -= ndigits_in_u64(ui64Val);
   1d64e:	eba8 030b 	sub.w	r3, r8, fp
    if ( i32NumChars <= 0 )
   1d652:	2b00      	cmp	r3, #0
   1d654:	f340 8149 	ble.w	1d8ea <am_util_stdio_vsprintf+0x8a6>
    while ( i32NumChars-- )
   1d658:	3b01      	subs	r3, #1
    int32_t i32Cnt = 0;
   1d65a:	4694      	mov	ip, r2
   1d65c:	46a6      	mov	lr, r4
   1d65e:	2000      	movs	r0, #0
   1d660:	462a      	mov	r2, r5
   1d662:	461c      	mov	r4, r3
            *pcBuf++ = cPadChar;
   1d664:	4611      	mov	r1, r2
        if ( pcBuf )
   1d666:	b1a2      	cbz	r2, 1d692 <am_util_stdio_vsprintf+0x64e>
            *pcBuf++ = cPadChar;
   1d668:	f801 cb01 	strb.w	ip, [r1], #1
   1d66c:	4623      	mov	r3, r4
   1d66e:	460a      	mov	r2, r1
        i32Cnt++;
   1d670:	3001      	adds	r0, #1
    while ( i32NumChars-- )
   1d672:	1e5c      	subs	r4, r3, #1
   1d674:	2b00      	cmp	r3, #0
   1d676:	d1f5      	bne.n	1d664 <am_util_stdio_vsprintf+0x620>
                    ui32CharCnt += iWidth;
   1d678:	4674      	mov	r4, lr
   1d67a:	4406      	add	r6, r0
                    pcBuf += pcBuf ? iWidth : 0;
   1d67c:	2d00      	cmp	r5, #0
   1d67e:	f000 8123 	beq.w	1d8c8 <am_util_stdio_vsprintf+0x884>
   1d682:	4405      	add	r5, r0
                iVal = uint64_to_str(ui64Val, pcBuf);
   1d684:	462a      	mov	r2, r5
   1d686:	4650      	mov	r0, sl
   1d688:	4649      	mov	r1, r9
   1d68a:	f7ff fc53 	bl	1cf34 <uint64_to_str>
                    pcBuf += iVal;
   1d68e:	4405      	add	r5, r0
   1d690:	e61a      	b.n	1d2c8 <am_util_stdio_vsprintf+0x284>
    while ( i32NumChars-- )
   1d692:	1e63      	subs	r3, r4, #1
        i32Cnt++;
   1d694:	3001      	adds	r0, #1
    while ( i32NumChars-- )
   1d696:	2c00      	cmp	r4, #0
   1d698:	d1ea      	bne.n	1d670 <am_util_stdio_vsprintf+0x62c>
   1d69a:	e7ed      	b.n	1d678 <am_util_stdio_vsprintf+0x634>
    else if (iExp2 >= 0)
   1d69c:	2a00      	cmp	r2, #0
   1d69e:	db36      	blt.n	1d70e <am_util_stdio_vsprintf+0x6ca>
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
   1d6a0:	f1a1 087e 	sub.w	r8, r1, #126	; 0x7e
   1d6a4:	fa00 f808 	lsl.w	r8, r0, r8
        i32IntPart = i32Significand >> (23 - iExp2);
   1d6a8:	f1c2 0217 	rsb	r2, r2, #23
    if (unFloatValue.I32 < 0)
   1d6ac:	2b00      	cmp	r3, #0
        i32IntPart = i32Significand >> (23 - iExp2);
   1d6ae:	fa40 f002 	asr.w	r0, r0, r2
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
   1d6b2:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    if (unFloatValue.I32 < 0)
   1d6b6:	db3a      	blt.n	1d72e <am_util_stdio_vsprintf+0x6ea>
   1d6b8:	462a      	mov	r2, r5
   1d6ba:	e5bb      	b.n	1d234 <am_util_stdio_vsprintf+0x1f0>
                if ( iWidth > 0 )
   1d6bc:	2800      	cmp	r0, #0
   1d6be:	dd3b      	ble.n	1d738 <am_util_stdio_vsprintf+0x6f4>
        return ui32RetVal;
   1d6c0:	469e      	mov	lr, r3
    int32_t i32Cnt = 0;
   1d6c2:	469c      	mov	ip, r3
    while ( i32NumChars-- )
   1d6c4:	f100 38ff 	add.w	r8, r0, #4294967295
    int32_t i32Cnt = 0;
   1d6c8:	2100      	movs	r1, #0
   1d6ca:	462b      	mov	r3, r5
            *pcBuf++ = cPadChar;
   1d6cc:	4618      	mov	r0, r3
        if ( pcBuf )
   1d6ce:	2b00      	cmp	r3, #0
   1d6d0:	d049      	beq.n	1d766 <am_util_stdio_vsprintf+0x722>
            *pcBuf++ = cPadChar;
   1d6d2:	f800 2b01 	strb.w	r2, [r0], #1
   1d6d6:	4647      	mov	r7, r8
   1d6d8:	4603      	mov	r3, r0
        i32Cnt++;
   1d6da:	3101      	adds	r1, #1
    while ( i32NumChars-- )
   1d6dc:	f107 38ff 	add.w	r8, r7, #4294967295
   1d6e0:	2f00      	cmp	r7, #0
   1d6e2:	d1f3      	bne.n	1d6cc <am_util_stdio_vsprintf+0x688>
                        ui32CharCnt += iWidth;
   1d6e4:	4608      	mov	r0, r1
   1d6e6:	440e      	add	r6, r1
                while (*pcStr != 0x0)
   1d6e8:	f89c 1000 	ldrb.w	r1, [ip]
                        ui32CharCnt += iWidth;
   1d6ec:	4663      	mov	r3, ip
                        pcBuf += pcBuf ? iWidth : 0;
   1d6ee:	b105      	cbz	r5, 1d6f2 <am_util_stdio_vsprintf+0x6ae>
   1d6f0:	4405      	add	r5, r0
                while (*pcStr != 0x0)
   1d6f2:	2900      	cmp	r1, #0
   1d6f4:	f43f ae60 	beq.w	1d3b8 <am_util_stdio_vsprintf+0x374>
                        iWidth = 0;
   1d6f8:	2000      	movs	r0, #0
   1d6fa:	e62c      	b.n	1d356 <am_util_stdio_vsprintf+0x312>
        switch ( *pcFmt )
   1d6fc:	f04f 0e01 	mov.w	lr, #1
   1d700:	e6df      	b.n	1d4c2 <am_util_stdio_vsprintf+0x47e>
                        iWidth -= ui32strlen;
   1d702:	eba0 000e 	sub.w	r0, r0, lr
    if ( i32NumChars <= 0 )
   1d706:	2800      	cmp	r0, #0
   1d708:	dcdb      	bgt.n	1d6c2 <am_util_stdio_vsprintf+0x67e>
   1d70a:	4638      	mov	r0, r7
   1d70c:	e7ef      	b.n	1d6ee <am_util_stdio_vsprintf+0x6aa>
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
   1d70e:	43d2      	mvns	r2, r2
    if (unFloatValue.I32 < 0)
   1d710:	2b00      	cmp	r3, #0
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
   1d712:	fa40 f802 	asr.w	r8, r0, r2
        *pcBuf++ = '-';
   1d716:	462b      	mov	r3, r5
    if (unFloatValue.I32 < 0)
   1d718:	da02      	bge.n	1d720 <am_util_stdio_vsprintf+0x6dc>
        *pcBuf++ = '-';
   1d71a:	222d      	movs	r2, #45	; 0x2d
   1d71c:	f803 2b01 	strb.w	r2, [r3], #1
        *pcBuf++ = '0';
   1d720:	461a      	mov	r2, r3
   1d722:	2330      	movs	r3, #48	; 0x30
   1d724:	f802 3b01 	strb.w	r3, [r2], #1
   1d728:	e58d      	b.n	1d246 <am_util_stdio_vsprintf+0x202>
    i32FracPart = 0;
   1d72a:	f04f 0800 	mov.w	r8, #0
        *pcBuf++ = '-';
   1d72e:	462b      	mov	r3, r5
   1d730:	222d      	movs	r2, #45	; 0x2d
   1d732:	f803 2b01 	strb.w	r2, [r3], #1
   1d736:	e574      	b.n	1d222 <am_util_stdio_vsprintf+0x1de>
    while ( *pcBuf++ )
   1d738:	7819      	ldrb	r1, [r3, #0]
                while (*pcStr != 0x0)
   1d73a:	469e      	mov	lr, r3
   1d73c:	2900      	cmp	r1, #0
   1d73e:	f47f ae0a 	bne.w	1d356 <am_util_stdio_vsprintf+0x312>
   1d742:	468e      	mov	lr, r1
                if ( iWidth )
   1d744:	2800      	cmp	r0, #0
   1d746:	f43f ae37 	beq.w	1d3b8 <am_util_stdio_vsprintf+0x374>
   1d74a:	e618      	b.n	1d37e <am_util_stdio_vsprintf+0x33a>
        bLower = bLongLong = false;
   1d74c:	f04f 0e00 	mov.w	lr, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   1d750:	3707      	adds	r7, #7
   1d752:	f027 0707 	bic.w	r7, r7, #7
   1d756:	f8d7 c004 	ldr.w	ip, [r7, #4]
   1d75a:	f857 0b08 	ldr.w	r0, [r7], #8
   1d75e:	e6b4      	b.n	1d4ca <am_util_stdio_vsprintf+0x486>
        switch ( *pcFmt )
   1d760:	f04f 0e01 	mov.w	lr, #1
   1d764:	e7f4      	b.n	1d750 <am_util_stdio_vsprintf+0x70c>
    while ( i32NumChars-- )
   1d766:	f108 37ff 	add.w	r7, r8, #4294967295
        i32Cnt++;
   1d76a:	3101      	adds	r1, #1
    while ( i32NumChars-- )
   1d76c:	f1b8 0f00 	cmp.w	r8, #0
   1d770:	d1b3      	bne.n	1d6da <am_util_stdio_vsprintf+0x696>
   1d772:	e7b7      	b.n	1d6e4 <am_util_stdio_vsprintf+0x6a0>
    *pcBuf++ = '.';
   1d774:	f102 0c01 	add.w	ip, r2, #1
        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
   1d778:	ebac 0105 	sub.w	r1, ip, r5
   1d77c:	f1c1 0313 	rsb	r3, r1, #19
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
   1d780:	454b      	cmp	r3, r9
   1d782:	bfa8      	it	ge
   1d784:	464b      	movge	r3, r9
        for (jx = 0; jx < iMax; jx++)
   1d786:	2b00      	cmp	r3, #0
   1d788:	f340 80ca 	ble.w	1d920 <am_util_stdio_vsprintf+0x8dc>
   1d78c:	1c58      	adds	r0, r3, #1
   1d78e:	4410      	add	r0, r2
            i32FracPart *= 10;
   1d790:	eb08 0888 	add.w	r8, r8, r8, lsl #2
            *pcBuf++ = (i32FracPart >> 24) + '0';
   1d794:	ea4f 51e8 	mov.w	r1, r8, asr #23
   1d798:	3130      	adds	r1, #48	; 0x30
   1d79a:	f80c 1b01 	strb.w	r1, [ip], #1
            i32FracPart *= 10;
   1d79e:	ea4f 0848 	mov.w	r8, r8, lsl #1
        for (jx = 0; jx < iMax; jx++)
   1d7a2:	4560      	cmp	r0, ip
            i32FracPart &= 0x00FFFFFF;
   1d7a4:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
        for (jx = 0; jx < iMax; jx++)
   1d7a8:	d1f2      	bne.n	1d790 <am_util_stdio_vsprintf+0x74c>
   1d7aa:	441a      	add	r2, r3
    return (pcBuf - pcBufInitial);
   1d7ac:	1b41      	subs	r1, r0, r5
        if ( ((i32FracPart * 10) >> 24) >= 5 )
   1d7ae:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   1d7b2:	f348 53c7 	sbfx	r3, r8, #23, #8
   1d7b6:	2b04      	cmp	r3, #4
   1d7b8:	f77f ad4f 	ble.w	1d25a <am_util_stdio_vsprintf+0x216>
            while ( pcBuftmp >= pcBufInitial )
   1d7bc:	4295      	cmp	r5, r2
   1d7be:	f63f ad4c 	bhi.w	1d25a <am_util_stdio_vsprintf+0x216>
   1d7c2:	4613      	mov	r3, r2
                    *pcBuftmp = '0';
   1d7c4:	f04f 0e30 	mov.w	lr, #48	; 0x30
   1d7c8:	e004      	b.n	1d7d4 <am_util_stdio_vsprintf+0x790>
   1d7ca:	f883 e001 	strb.w	lr, [r3, #1]
            while ( pcBuftmp >= pcBufInitial )
   1d7ce:	429d      	cmp	r5, r3
   1d7d0:	f63f ad43 	bhi.w	1d25a <am_util_stdio_vsprintf+0x216>
                    *pcBuftmp = '0';
   1d7d4:	469c      	mov	ip, r3
                if ( *pcBuftmp == '.' )
   1d7d6:	f813 2901 	ldrb.w	r2, [r3], #-1
   1d7da:	2a2e      	cmp	r2, #46	; 0x2e
   1d7dc:	d0f7      	beq.n	1d7ce <am_util_stdio_vsprintf+0x78a>
                else if ( *pcBuftmp == '9' )
   1d7de:	2a39      	cmp	r2, #57	; 0x39
   1d7e0:	d0f3      	beq.n	1d7ca <am_util_stdio_vsprintf+0x786>
                    *pcBuftmp += 1;
   1d7e2:	3201      	adds	r2, #1
   1d7e4:	f88c 2000 	strb.w	r2, [ip]
                    break;
   1d7e8:	e537      	b.n	1d25a <am_util_stdio_vsprintf+0x216>
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
   1d7ea:	1c4b      	adds	r3, r1, #1
   1d7ec:	f000 8081 	beq.w	1d8f2 <am_util_stdio_vsprintf+0x8ae>
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
   1d7f0:	3102      	adds	r1, #2
   1d7f2:	f000 8082 	beq.w	1d8fa <am_util_stdio_vsprintf+0x8b6>
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
   1d7f6:	4b4e      	ldr	r3, [pc, #312]	; (1d930 <am_util_stdio_vsprintf+0x8ec>)
                        *(uint32_t*)pcBuf = u32PrntErrVal;
   1d7f8:	602b      	str	r3, [r5, #0]
   1d7fa:	2303      	movs	r3, #3
   1d7fc:	e533      	b.n	1d266 <am_util_stdio_vsprintf+0x222>
    int iNDigits = ui64Val ? 0 : 1;
   1d7fe:	ea59 010a 	orrs.w	r1, r9, sl
   1d802:	bf0c      	ite	eq
   1d804:	f04f 0b01 	moveq.w	fp, #1
   1d808:	f04f 0b00 	movne.w	fp, #0
    while ( ui64Val )
   1d80c:	f000 808a 	beq.w	1d924 <am_util_stdio_vsprintf+0x8e0>
                    bNeg = false;
   1d810:	2300      	movs	r3, #0
   1d812:	9300      	str	r3, [sp, #0]
   1d814:	4648      	mov	r0, r9
   1d816:	4651      	mov	r1, sl
   1d818:	9401      	str	r4, [sp, #4]
   1d81a:	465c      	mov	r4, fp
   1d81c:	46d3      	mov	fp, sl
   1d81e:	46ca      	mov	sl, r9
   1d820:	46a9      	mov	r9, r5
   1d822:	4615      	mov	r5, r2
        ui64Val = divu64_10(ui64Val);
   1d824:	f7ff fb2a 	bl	1ce7c <divu64_10>
    while ( ui64Val )
   1d828:	ea50 0301 	orrs.w	r3, r0, r1
        ++iNDigits;
   1d82c:	f104 0401 	add.w	r4, r4, #1
    while ( ui64Val )
   1d830:	d1f8      	bne.n	1d824 <am_util_stdio_vsprintf+0x7e0>
                    if ( bNeg )
   1d832:	9900      	ldr	r1, [sp, #0]
                    iWidth -= ndigits_in_i64(ui64Val);
   1d834:	462a      	mov	r2, r5
   1d836:	464d      	mov	r5, r9
   1d838:	46d1      	mov	r9, sl
   1d83a:	46da      	mov	sl, fp
   1d83c:	46a3      	mov	fp, r4
   1d83e:	eba8 030b 	sub.w	r3, r8, fp
   1d842:	9c01      	ldr	r4, [sp, #4]
                    if ( bNeg )
   1d844:	b119      	cbz	r1, 1d84e <am_util_stdio_vsprintf+0x80a>
                        if ( ui8PadChar == '0' )
   1d846:	2a30      	cmp	r2, #48	; 0x30
                        --iWidth;
   1d848:	f103 33ff 	add.w	r3, r3, #4294967295
                        if ( ui8PadChar == '0' )
   1d84c:	d062      	beq.n	1d914 <am_util_stdio_vsprintf+0x8d0>
    if ( i32NumChars <= 0 )
   1d84e:	2b00      	cmp	r3, #0
   1d850:	dd4d      	ble.n	1d8ee <am_util_stdio_vsprintf+0x8aa>
    while ( i32NumChars-- )
   1d852:	3b01      	subs	r3, #1
    int32_t i32Cnt = 0;
   1d854:	4694      	mov	ip, r2
   1d856:	46a6      	mov	lr, r4
   1d858:	2000      	movs	r0, #0
   1d85a:	462a      	mov	r2, r5
   1d85c:	461c      	mov	r4, r3
            *pcBuf++ = cPadChar;
   1d85e:	4611      	mov	r1, r2
        if ( pcBuf )
   1d860:	b1c2      	cbz	r2, 1d894 <am_util_stdio_vsprintf+0x850>
            *pcBuf++ = cPadChar;
   1d862:	f801 cb01 	strb.w	ip, [r1], #1
   1d866:	4623      	mov	r3, r4
   1d868:	460a      	mov	r2, r1
        i32Cnt++;
   1d86a:	3001      	adds	r0, #1
    while ( i32NumChars-- )
   1d86c:	1e5c      	subs	r4, r3, #1
   1d86e:	2b00      	cmp	r3, #0
   1d870:	d1f5      	bne.n	1d85e <am_util_stdio_vsprintf+0x81a>
   1d872:	4674      	mov	r4, lr
   1d874:	4662      	mov	r2, ip
                    ui32CharCnt += iWidth;
   1d876:	4406      	add	r6, r0
                    pcBuf += pcBuf ? iWidth : 0;
   1d878:	b365      	cbz	r5, 1d8d4 <am_util_stdio_vsprintf+0x890>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
   1d87a:	9b00      	ldr	r3, [sp, #0]
                    pcBuf += pcBuf ? iWidth : 0;
   1d87c:	4405      	add	r5, r0
                    if ( bNeg  &&  (ui8PadChar == ' ') )
   1d87e:	b113      	cbz	r3, 1d886 <am_util_stdio_vsprintf+0x842>
   1d880:	2a20      	cmp	r2, #32
   1d882:	f43f ae17 	beq.w	1d4b4 <am_util_stdio_vsprintf+0x470>
                iVal = uint64_to_str(ui64Val, pcBuf);
   1d886:	462a      	mov	r2, r5
   1d888:	4648      	mov	r0, r9
   1d88a:	4651      	mov	r1, sl
   1d88c:	f7ff fb52 	bl	1cf34 <uint64_to_str>
                    pcBuf += iVal;
   1d890:	4405      	add	r5, r0
   1d892:	e519      	b.n	1d2c8 <am_util_stdio_vsprintf+0x284>
    while ( i32NumChars-- )
   1d894:	1e63      	subs	r3, r4, #1
        i32Cnt++;
   1d896:	3001      	adds	r0, #1
    while ( i32NumChars-- )
   1d898:	2c00      	cmp	r4, #0
   1d89a:	d1e6      	bne.n	1d86a <am_util_stdio_vsprintf+0x826>
   1d89c:	e7e9      	b.n	1d872 <am_util_stdio_vsprintf+0x82e>
   1d89e:	f04f 0800 	mov.w	r8, #0
   1d8a2:	e65f      	b.n	1d564 <am_util_stdio_vsprintf+0x520>
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
   1d8a4:	4b23      	ldr	r3, [pc, #140]	; (1d934 <am_util_stdio_vsprintf+0x8f0>)
   1d8a6:	602b      	str	r3, [r5, #0]
   1d8a8:	2303      	movs	r3, #3
   1d8aa:	e4dc      	b.n	1d266 <am_util_stdio_vsprintf+0x222>
                    bNeg = true;
   1d8ac:	2301      	movs	r3, #1
   1d8ae:	9300      	str	r3, [sp, #0]
    int iNDigits = ui64Val ? 0 : 1;
   1d8b0:	f04f 0b00 	mov.w	fp, #0
   1d8b4:	e7ae      	b.n	1d814 <am_util_stdio_vsprintf+0x7d0>
    uint32_t ui32Val = 0, uCnt = 0;
   1d8b6:	f04f 0a00 	mov.w	sl, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1d8ba:	4653      	mov	r3, sl
   1d8bc:	e52b      	b.n	1d316 <am_util_stdio_vsprintf+0x2d2>
                if ( iWidth > 0 )
   1d8be:	2800      	cmp	r0, #0
   1d8c0:	f77f af3f 	ble.w	1d742 <am_util_stdio_vsprintf+0x6fe>
    uint32_t ui32RetVal = 0;
   1d8c4:	468e      	mov	lr, r1
   1d8c6:	e6fc      	b.n	1d6c2 <am_util_stdio_vsprintf+0x67e>
                iVal = uint64_to_str(ui64Val, pcBuf);
   1d8c8:	462a      	mov	r2, r5
   1d8ca:	4650      	mov	r0, sl
   1d8cc:	4649      	mov	r1, r9
   1d8ce:	f7ff fb31 	bl	1cf34 <uint64_to_str>
                if ( pcBuf )
   1d8d2:	e4dd      	b.n	1d290 <am_util_stdio_vsprintf+0x24c>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
   1d8d4:	9b00      	ldr	r3, [sp, #0]
   1d8d6:	b1b3      	cbz	r3, 1d906 <am_util_stdio_vsprintf+0x8c2>
   1d8d8:	2a20      	cmp	r2, #32
   1d8da:	f43f adee 	beq.w	1d4ba <am_util_stdio_vsprintf+0x476>
                iVal = uint64_to_str(ui64Val, pcBuf);
   1d8de:	462a      	mov	r2, r5
   1d8e0:	4648      	mov	r0, r9
   1d8e2:	4651      	mov	r1, sl
   1d8e4:	f7ff fb26 	bl	1cf34 <uint64_to_str>
                if ( pcBuf )
   1d8e8:	e4d2      	b.n	1d290 <am_util_stdio_vsprintf+0x24c>
   1d8ea:	2000      	movs	r0, #0
   1d8ec:	e6c6      	b.n	1d67c <am_util_stdio_vsprintf+0x638>
   1d8ee:	2000      	movs	r0, #0
   1d8f0:	e7c2      	b.n	1d878 <am_util_stdio_vsprintf+0x834>
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
   1d8f2:	4b10      	ldr	r3, [pc, #64]	; (1d934 <am_util_stdio_vsprintf+0x8f0>)
   1d8f4:	e780      	b.n	1d7f8 <am_util_stdio_vsprintf+0x7b4>
   1d8f6:	2000      	movs	r0, #0
   1d8f8:	e55c      	b.n	1d3b4 <am_util_stdio_vsprintf+0x370>
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
   1d8fa:	4b0f      	ldr	r3, [pc, #60]	; (1d938 <am_util_stdio_vsprintf+0x8f4>)
   1d8fc:	e77c      	b.n	1d7f8 <am_util_stdio_vsprintf+0x7b4>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1d8fe:	2300      	movs	r3, #0
        uCnt++;
   1d900:	f04f 0a01 	mov.w	sl, #1
   1d904:	e506      	b.n	1d314 <am_util_stdio_vsprintf+0x2d0>
                iVal = uint64_to_str(ui64Val, pcBuf);
   1d906:	4648      	mov	r0, r9
   1d908:	4651      	mov	r1, sl
   1d90a:	462a      	mov	r2, r5
   1d90c:	f7ff fb12 	bl	1cf34 <uint64_to_str>
                ui32CharCnt += iVal;
   1d910:	4406      	add	r6, r0
                break;
   1d912:	e4bf      	b.n	1d294 <am_util_stdio_vsprintf+0x250>
                            if ( pcBuf )
   1d914:	b115      	cbz	r5, 1d91c <am_util_stdio_vsprintf+0x8d8>
                                *pcBuf++ = '-';
   1d916:	212d      	movs	r1, #45	; 0x2d
   1d918:	f805 1b01 	strb.w	r1, [r5], #1
                            ++ui32CharCnt;
   1d91c:	3601      	adds	r6, #1
   1d91e:	e796      	b.n	1d84e <am_util_stdio_vsprintf+0x80a>
    *pcBuf++ = '.';
   1d920:	4660      	mov	r0, ip
   1d922:	e744      	b.n	1d7ae <am_util_stdio_vsprintf+0x76a>
                    iWidth -= ndigits_in_i64(ui64Val);
   1d924:	eba8 030b 	sub.w	r3, r8, fp
                    bNeg = false;
   1d928:	468a      	mov	sl, r1
   1d92a:	9100      	str	r1, [sp, #0]
                    ui64Val = i64Val;
   1d92c:	4689      	mov	r9, r1
   1d92e:	e78e      	b.n	1d84e <am_util_stdio_vsprintf+0x80a>
   1d930:	003f2e3f 	.word	0x003f2e3f
   1d934:	00302e30 	.word	0x00302e30
   1d938:	00232e23 	.word	0x00232e23

0001d93c <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
   1d93c:	b40f      	push	{r0, r1, r2, r3}
   1d93e:	b530      	push	{r4, r5, lr}
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
   1d940:	4d09      	ldr	r5, [pc, #36]	; (1d968 <am_util_stdio_printf+0x2c>)
   1d942:	682c      	ldr	r4, [r5, #0]
{
   1d944:	b083      	sub	sp, #12
    if (!g_pfnCharPrint)
   1d946:	b14c      	cbz	r4, 1d95c <am_util_stdio_printf+0x20>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
   1d948:	aa07      	add	r2, sp, #28
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
   1d94a:	9906      	ldr	r1, [sp, #24]
   1d94c:	4807      	ldr	r0, [pc, #28]	; (1d96c <am_util_stdio_printf+0x30>)
    va_start(pArgs, pcFmt);
   1d94e:	9201      	str	r2, [sp, #4]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
   1d950:	f7ff fb78 	bl	1d044 <am_util_stdio_vsprintf>
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
   1d954:	682b      	ldr	r3, [r5, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
   1d956:	4604      	mov	r4, r0
    g_pfnCharPrint(g_prfbuf);
   1d958:	4804      	ldr	r0, [pc, #16]	; (1d96c <am_util_stdio_printf+0x30>)
   1d95a:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
}
   1d95c:	4620      	mov	r0, r4
   1d95e:	b003      	add	sp, #12
   1d960:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1d964:	b004      	add	sp, #16
   1d966:	4770      	bx	lr
   1d968:	10005d8c 	.word	0x10005d8c
   1d96c:	10005d90 	.word	0x10005d90

0001d970 <appDiscStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appDiscStart(dmConnId_t connId)
{
   1d970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  appDbHdl_t  hdl;
  uint8_t     status;
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];

  if (pAppDiscCb->inProgress == APP_DISC_IDLE)
   1d974:	4e30      	ldr	r6, [pc, #192]	; (1da38 <appDiscStart+0xc8>)
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   1d976:	1e43      	subs	r3, r0, #1
  if (pAppDiscCb->inProgress == APP_DISC_IDLE)
   1d978:	eb06 1403 	add.w	r4, r6, r3, lsl #4
   1d97c:	011f      	lsls	r7, r3, #4
   1d97e:	7ae3      	ldrb	r3, [r4, #11]
{
   1d980:	b083      	sub	sp, #12
  if (pAppDiscCb->inProgress == APP_DISC_IDLE)
   1d982:	b113      	cbz	r3, 1d98a <appDiscStart+0x1a>
      }

      appDiscCfgStart(connId, status);
    }
  }
}
   1d984:	b003      	add	sp, #12
   1d986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   1d98a:	4605      	mov	r5, r0
   1d98c:	f000 fc58 	bl	1e240 <AppDbGetHdl>
   1d990:	4680      	mov	r8, r0
   1d992:	b178      	cbz	r0, 1d9b4 <appDiscStart+0x44>
      status = AppDbGetDiscStatus(hdl);
   1d994:	f7f6 ff3e 	bl	14814 <AppDbGetDiscStatus>
   1d998:	4604      	mov	r4, r0
    if (status < APP_DISC_CMPL)
   1d99a:	2c03      	cmp	r4, #3
   1d99c:	d80d      	bhi.n	1d9ba <appDiscStart+0x4a>
      if ((!pAppDiscCb->alreadySecure) || (pAppDiscCb->alreadySecure && !AppCheckBonded(connId)))
   1d99e:	443e      	add	r6, r7
   1d9a0:	7b33      	ldrb	r3, [r6, #12]
   1d9a2:	bb7b      	cbnz	r3, 1da04 <appDiscStart+0x94>
        (*appDiscCback)(connId, APP_DISC_READ_DATABASE_HASH);
   1d9a4:	4b25      	ldr	r3, [pc, #148]	; (1da3c <appDiscStart+0xcc>)
   1d9a6:	2101      	movs	r1, #1
    (*appDiscCback)(connId, APP_DISC_CFG_CONN_START);
   1d9a8:	681b      	ldr	r3, [r3, #0]
   1d9aa:	4628      	mov	r0, r5
}
   1d9ac:	b003      	add	sp, #12
   1d9ae:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    (*appDiscCback)(connId, APP_DISC_CFG_CONN_START);
   1d9b2:	4718      	bx	r3
      status = pAppDiscCb->cmplStatus;
   1d9b4:	7a64      	ldrb	r4, [r4, #9]
    if (status < APP_DISC_CMPL)
   1d9b6:	2c03      	cmp	r4, #3
   1d9b8:	d9f1      	bls.n	1d99e <appDiscStart+0x2e>
    else if (status != APP_DISC_FAILED)
   1d9ba:	2c05      	cmp	r4, #5
   1d9bc:	d0e2      	beq.n	1d984 <appDiscStart+0x14>
      if (hdl != APP_DB_HDL_NONE && pAppDiscCb->pHdlList != NULL)
   1d9be:	f1b8 0f00 	cmp.w	r8, #0
   1d9c2:	d014      	beq.n	1d9ee <appDiscStart+0x7e>
   1d9c4:	eb06 0907 	add.w	r9, r6, r7
   1d9c8:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1d9cc:	b17b      	cbz	r3, 1d9ee <appDiscStart+0x7e>
        if (AppDbIsCacheCheckedByHash(hdl))
   1d9ce:	4640      	mov	r0, r8
   1d9d0:	f7f6 fede 	bl	14790 <AppDbIsCacheCheckedByHash>
   1d9d4:	bb08      	cbnz	r0, 1da1a <appDiscStart+0xaa>
          memcpy(pAppDiscCb->pHdlList, AppDbGetHdlList(hdl), (pAppDiscCb->hdlListLen * sizeof(uint16_t)));
   1d9d6:	4640      	mov	r0, r8
   1d9d8:	f8d9 8004 	ldr.w	r8, [r9, #4]
   1d9dc:	f7f6 ff22 	bl	14824 <AppDbGetHdlList>
   1d9e0:	f899 200a 	ldrb.w	r2, [r9, #10]
   1d9e4:	4601      	mov	r1, r0
   1d9e6:	0052      	lsls	r2, r2, #1
   1d9e8:	4640      	mov	r0, r8
   1d9ea:	f7ee fb89 	bl	c100 <memcpy>
  if (status < APP_DISC_CFG_CMPL)
   1d9ee:	2c07      	cmp	r4, #7
   1d9f0:	d910      	bls.n	1da14 <appDiscStart+0xa4>
  else if (status == APP_DISC_CFG_CMPL && pAppDiscCb->connCfgStatus == APP_DISC_INIT)
   1d9f2:	2c08      	cmp	r4, #8
   1d9f4:	d1c6      	bne.n	1d984 <appDiscStart+0x14>
   1d9f6:	443e      	add	r6, r7
   1d9f8:	7a33      	ldrb	r3, [r6, #8]
   1d9fa:	2b00      	cmp	r3, #0
   1d9fc:	d1c2      	bne.n	1d984 <appDiscStart+0x14>
    (*appDiscCback)(connId, APP_DISC_CFG_CONN_START);
   1d9fe:	4b0f      	ldr	r3, [pc, #60]	; (1da3c <appDiscStart+0xcc>)
   1da00:	2107      	movs	r1, #7
   1da02:	e7d1      	b.n	1d9a8 <appDiscStart+0x38>
      if ((!pAppDiscCb->alreadySecure) || (pAppDiscCb->alreadySecure && !AppCheckBonded(connId)))
   1da04:	4628      	mov	r0, r5
   1da06:	f000 fb93 	bl	1e130 <AppCheckBonded>
   1da0a:	2800      	cmp	r0, #0
   1da0c:	d0ca      	beq.n	1d9a4 <appDiscStart+0x34>
        (*appDiscCback)(connId, APP_DISC_START);
   1da0e:	4b0b      	ldr	r3, [pc, #44]	; (1da3c <appDiscStart+0xcc>)
   1da10:	2103      	movs	r1, #3
   1da12:	e7c9      	b.n	1d9a8 <appDiscStart+0x38>
    (*appDiscCback)(connId, APP_DISC_CFG_START);
   1da14:	4b09      	ldr	r3, [pc, #36]	; (1da3c <appDiscStart+0xcc>)
   1da16:	2106      	movs	r1, #6
   1da18:	e7c6      	b.n	1d9a8 <appDiscStart+0x38>
          AttcReadByTypeReq(connId, ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
   1da1a:	4b09      	ldr	r3, [pc, #36]	; (1da40 <appDiscStart+0xd0>)
   1da1c:	2200      	movs	r2, #0
          pAppDiscCb->inProgress = APP_DISC_READ_DBH_IN_PROGRESS;
   1da1e:	2103      	movs	r1, #3
          AttcReadByTypeReq(connId, ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
   1da20:	e9cd 3200 	strd	r3, r2, [sp]
   1da24:	4628      	mov	r0, r5
          pAppDiscCb->inProgress = APP_DISC_READ_DBH_IN_PROGRESS;
   1da26:	f889 100b 	strb.w	r1, [r9, #11]
          AttcReadByTypeReq(connId, ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
   1da2a:	2302      	movs	r3, #2
   1da2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1da30:	2101      	movs	r1, #1
   1da32:	f7ef fead 	bl	d790 <AttcReadByTypeReq>
          return;
   1da36:	e7a5      	b.n	1d984 <appDiscStart+0x14>
   1da38:	10005e90 	.word	0x10005e90
   1da3c:	10005ec0 	.word	0x10005ec0
   1da40:	00023ee0 	.word	0x00023ee0

0001da44 <appDiscRestartDiscovery>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appDiscRestartDiscovery(dmConnId_t connId)
{
   1da44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   1da48:	1e45      	subs	r5, r0, #1
  appDbHdl_t  dbHdl;

  /* otherwise initialize discovery and configuration status */
  pAppDiscCb->connCfgStatus = APP_DISC_INIT;
   1da4a:	012d      	lsls	r5, r5, #4
   1da4c:	4c19      	ldr	r4, [pc, #100]	; (1dab4 <appDiscRestartDiscovery+0x70>)
   1da4e:	f105 0308 	add.w	r3, r5, #8
   1da52:	2700      	movs	r7, #0
   1da54:	52e7      	strh	r7, [r4, r3]
  pAppDiscCb->cmplStatus = APP_DISC_INIT;
  pAppDiscCb->secRequired = FALSE;
   1da56:	4423      	add	r3, r4
  pAppDiscCb->scPending = FALSE;

  /* initialize handle list */
  if (pAppDiscCb->pHdlList != NULL)
   1da58:	eb04 0805 	add.w	r8, r4, r5
  pAppDiscCb->secRequired = FALSE;
   1da5c:	f8a3 7005 	strh.w	r7, [r3, #5]
{
   1da60:	4606      	mov	r6, r0
  if (pAppDiscCb->pHdlList != NULL)
   1da62:	f8d8 0004 	ldr.w	r0, [r8, #4]
   1da66:	b190      	cbz	r0, 1da8e <appDiscRestartDiscovery+0x4a>
  {
    memset(pAppDiscCb->pHdlList, 0, (pAppDiscCb->hdlListLen * sizeof(uint16_t)));
   1da68:	f898 200a 	ldrb.w	r2, [r8, #10]
   1da6c:	4639      	mov	r1, r7
   1da6e:	0052      	lsls	r2, r2, #1
   1da70:	f003 fcec 	bl	2144c <memset>

    /* clear stored discovery status and handle list */
    if ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   1da74:	4630      	mov	r0, r6
   1da76:	f000 fbe3 	bl	1e240 <AppDbGetHdl>
   1da7a:	4681      	mov	r9, r0
   1da7c:	b138      	cbz	r0, 1da8e <appDiscRestartDiscovery+0x4a>
    {
      AppDbSetDiscStatus(dbHdl, APP_DISC_INIT);
   1da7e:	4639      	mov	r1, r7
   1da80:	f7f6 fecc 	bl	1481c <AppDbSetDiscStatus>
      AppDbSetHdlList(dbHdl, pAppDiscCb->pHdlList);
   1da84:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1da88:	4648      	mov	r0, r9
   1da8a:	f7f6 fecd 	bl	14828 <AppDbSetHdlList>
    }
  }

  /* if configuration in progress */
  if (pAppDiscCb->inProgress == APP_DISC_CFG_IN_PROGRESS)
   1da8e:	442c      	add	r4, r5
   1da90:	7ae3      	ldrb	r3, [r4, #11]
   1da92:	2b02      	cmp	r3, #2
   1da94:	d00a      	beq.n	1daac <appDiscRestartDiscovery+0x68>
  {
    /* if not waiting for security or connection is already secure, then
    * initiate discovery now; otherwise discovery will be initiated after
    * security is done
    */
    if (!pAppDiscCfg->waitForSec || pAppDiscCb->alreadySecure)
   1da96:	4b08      	ldr	r3, [pc, #32]	; (1dab8 <appDiscRestartDiscovery+0x74>)
   1da98:	681b      	ldr	r3, [r3, #0]
   1da9a:	781b      	ldrb	r3, [r3, #0]
   1da9c:	b10b      	cbz	r3, 1daa2 <appDiscRestartDiscovery+0x5e>
   1da9e:	7b23      	ldrb	r3, [r4, #12]
   1daa0:	b133      	cbz	r3, 1dab0 <appDiscRestartDiscovery+0x6c>
    {
      appDiscStart(connId);
   1daa2:	4630      	mov	r0, r6
    }
  }
}
   1daa4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      appDiscStart(connId);
   1daa8:	f7ff bf62 	b.w	1d970 <appDiscStart>
    pAppDiscCb->scPending = TRUE;
   1daac:	2301      	movs	r3, #1
   1daae:	73a3      	strb	r3, [r4, #14]
}
   1dab0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1dab4:	10005e90 	.word	0x10005e90
   1dab8:	10005f38 	.word	0x10005f38

0001dabc <AppDiscProcDmMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscProcDmMsg(dmEvt_t *pMsg)
{
   1dabc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch(pMsg->hdr.event)
   1dac0:	7883      	ldrb	r3, [r0, #2]
   1dac2:	3b27      	subs	r3, #39	; 0x27
{
   1dac4:	b082      	sub	sp, #8
   1dac6:	4604      	mov	r4, r0
  switch(pMsg->hdr.event)
   1dac8:	2b05      	cmp	r3, #5
   1daca:	d818      	bhi.n	1dafe <AppDiscProcDmMsg+0x42>
   1dacc:	e8df f003 	tbb	[pc, r3]
   1dad0:	59170337 	.word	0x59170337
   1dad4:	1a9b      	.short	0x1a9b
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   1dad6:	7800      	ldrb	r0, [r0, #0]
  pAppDiscCb->inProgress = APP_DISC_IDLE;
   1dad8:	4d62      	ldr	r5, [pc, #392]	; (1dc64 <AppDiscProcDmMsg+0x1a8>)
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   1dada:	1e43      	subs	r3, r0, #1
  pAppDiscCb->inProgress = APP_DISC_IDLE;
   1dadc:	eb05 1203 	add.w	r2, r5, r3, lsl #4
   1dae0:	2600      	movs	r6, #0
   1dae2:	72d6      	strb	r6, [r2, #11]
   1dae4:	011c      	lsls	r4, r3, #4
  if ((hdl = AppDbGetHdl((dmConnId_t) pMsg->hdr.param)) != APP_DB_HDL_NONE)
   1dae6:	f000 fbab 	bl	1e240 <AppDbGetHdl>
   1daea:	b110      	cbz	r0, 1daf2 <AppDiscProcDmMsg+0x36>
    AppDbSetDiscStatus(hdl, APP_DISC_INIT);
   1daec:	4631      	mov	r1, r6
   1daee:	f7f6 fe95 	bl	1481c <AppDbSetDiscStatus>
  if (pAppDiscCb->pDiscCb != NULL)
   1daf2:	5928      	ldr	r0, [r5, r4]
   1daf4:	b118      	cbz	r0, 1dafe <AppDiscProcDmMsg+0x42>
    WsfBufFree(pAppDiscCb->pDiscCb);
   1daf6:	f7f5 fe5d 	bl	137b4 <WsfBufFree>
    pAppDiscCb->pDiscCb = NULL;
   1dafa:	2300      	movs	r3, #0
   1dafc:	512b      	str	r3, [r5, r4]
      break;

    default:
      break;
  }
}
   1dafe:	b002      	add	sp, #8
   1db00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pMsg->encryptInd.usingLtk)
   1db04:	7903      	ldrb	r3, [r0, #4]
   1db06:	2b00      	cmp	r3, #0
   1db08:	d0f9      	beq.n	1dafe <AppDiscProcDmMsg+0x42>
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   1db0a:	7800      	ldrb	r0, [r0, #0]
    if (pAppDiscCb->alreadySecure)
   1db0c:	4d55      	ldr	r5, [pc, #340]	; (1dc64 <AppDiscProcDmMsg+0x1a8>)
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   1db0e:	1e43      	subs	r3, r0, #1
    if (pAppDiscCb->alreadySecure)
   1db10:	eb05 1203 	add.w	r2, r5, r3, lsl #4
   1db14:	011c      	lsls	r4, r3, #4
   1db16:	7b13      	ldrb	r3, [r2, #12]
   1db18:	2b00      	cmp	r3, #0
   1db1a:	d1f0      	bne.n	1dafe <AppDiscProcDmMsg+0x42>
    if (pAppDiscCfg->waitForSec)
   1db1c:	4b52      	ldr	r3, [pc, #328]	; (1dc68 <AppDiscProcDmMsg+0x1ac>)
   1db1e:	681b      	ldr	r3, [r3, #0]
   1db20:	781b      	ldrb	r3, [r3, #0]
   1db22:	2b00      	cmp	r3, #0
   1db24:	f040 8093 	bne.w	1dc4e <AppDiscProcDmMsg+0x192>
    else if (pAppDiscCb->secRequired)
   1db28:	7b51      	ldrb	r1, [r2, #13]
   1db2a:	b121      	cbz	r1, 1db36 <AppDiscProcDmMsg+0x7a>
      if (pAppDiscCb->pDiscCb != NULL)
   1db2c:	5929      	ldr	r1, [r5, r4]
      pAppDiscCb->secRequired = FALSE;
   1db2e:	7353      	strb	r3, [r2, #13]
      if (pAppDiscCb->pDiscCb != NULL)
   1db30:	b109      	cbz	r1, 1db36 <AppDiscProcDmMsg+0x7a>
        AttcDiscConfigResume((dmConnId_t) pMsg->hdr.param, pAppDiscCb->pDiscCb);
   1db32:	f7ee fead 	bl	c890 <AttcDiscConfigResume>
    pAppDiscCb->alreadySecure = TRUE;
   1db36:	4425      	add	r5, r4
   1db38:	2301      	movs	r3, #1
   1db3a:	732b      	strb	r3, [r5, #12]
}
   1db3c:	e7df      	b.n	1dafe <AppDiscProcDmMsg+0x42>
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   1db3e:	7800      	ldrb	r0, [r0, #0]
  pAppDiscCb->connCfgStatus = APP_DISC_INIT;
   1db40:	4b48      	ldr	r3, [pc, #288]	; (1dc64 <AppDiscProcDmMsg+0x1a8>)
  (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_INIT);
   1db42:	4e4a      	ldr	r6, [pc, #296]	; (1dc6c <AppDiscProcDmMsg+0x1b0>)
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   1db44:	1e45      	subs	r5, r0, #1
  pAppDiscCb->connCfgStatus = APP_DISC_INIT;
   1db46:	012d      	lsls	r5, r5, #4
   1db48:	f105 0208 	add.w	r2, r5, #8
  pAppDiscCb->alreadySecure = FALSE;
   1db4c:	1899      	adds	r1, r3, r2
  pAppDiscCb->scPending = FALSE;
   1db4e:	441d      	add	r5, r3
  (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_INIT);
   1db50:	6837      	ldr	r7, [r6, #0]
  pAppDiscCb->connCfgStatus = APP_DISC_INIT;
   1db52:	2600      	movs	r6, #0
   1db54:	529e      	strh	r6, [r3, r2]
  pAppDiscCb->alreadySecure = FALSE;
   1db56:	808e      	strh	r6, [r1, #4]
  pAppDiscCb->scPending = FALSE;
   1db58:	73ae      	strb	r6, [r5, #14]
  (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_INIT);
   1db5a:	4631      	mov	r1, r6
   1db5c:	47b8      	blx	r7
  if (pAppDiscCb->pHdlList != NULL)
   1db5e:	6868      	ldr	r0, [r5, #4]
   1db60:	b120      	cbz	r0, 1db6c <AppDiscProcDmMsg+0xb0>
    memset(pAppDiscCb->pHdlList, 0, (pAppDiscCb->hdlListLen * sizeof(uint16_t)));
   1db62:	7aaa      	ldrb	r2, [r5, #10]
   1db64:	4631      	mov	r1, r6
   1db66:	0052      	lsls	r2, r2, #1
   1db68:	f003 fc70 	bl	2144c <memset>
  if (!pAppDiscCfg->waitForSec)
   1db6c:	4b3e      	ldr	r3, [pc, #248]	; (1dc68 <AppDiscProcDmMsg+0x1ac>)
   1db6e:	681b      	ldr	r3, [r3, #0]
   1db70:	781b      	ldrb	r3, [r3, #0]
   1db72:	2b00      	cmp	r3, #0
   1db74:	d1c3      	bne.n	1dafe <AppDiscProcDmMsg+0x42>
    appDiscStart((dmConnId_t) pMsg->hdr.param);
   1db76:	7820      	ldrb	r0, [r4, #0]
}
   1db78:	b002      	add	sp, #8
   1db7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    appDiscStart((dmConnId_t) pMsg->hdr.param);
   1db7e:	f7ff bef7 	b.w	1d970 <appDiscStart>
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   1db82:	7800      	ldrb	r0, [r0, #0]
  if (pAppDiscCb->alreadySecure)
   1db84:	4d37      	ldr	r5, [pc, #220]	; (1dc64 <AppDiscProcDmMsg+0x1a8>)
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   1db86:	1e43      	subs	r3, r0, #1
  if (pAppDiscCb->alreadySecure)
   1db88:	011e      	lsls	r6, r3, #4
   1db8a:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   1db8e:	f893 800c 	ldrb.w	r8, [r3, #12]
   1db92:	f1b8 0f00 	cmp.w	r8, #0
   1db96:	d1b2      	bne.n	1dafe <AppDiscProcDmMsg+0x42>
  if (((hdl = AppDbGetHdl((dmConnId_t)pMsg->hdr.param)) != APP_DB_HDL_NONE) &&
   1db98:	f000 fb52 	bl	1e240 <AppDbGetHdl>
   1db9c:	4607      	mov	r7, r0
   1db9e:	b180      	cbz	r0, 1dbc2 <AppDiscProcDmMsg+0x106>
      AppCheckBonded((dmConnId_t) pMsg->hdr.param) &&
   1dba0:	7820      	ldrb	r0, [r4, #0]
   1dba2:	f000 fac5 	bl	1e130 <AppCheckBonded>
  if (((hdl = AppDbGetHdl((dmConnId_t)pMsg->hdr.param)) != APP_DB_HDL_NONE) &&
   1dba6:	b160      	cbz	r0, 1dbc2 <AppDiscProcDmMsg+0x106>
      AppDbIsCacheCheckedByHash(hdl))
   1dba8:	4638      	mov	r0, r7
   1dbaa:	f7f6 fdf1 	bl	14790 <AppDbIsCacheCheckedByHash>
      AppCheckBonded((dmConnId_t) pMsg->hdr.param) &&
   1dbae:	b140      	cbz	r0, 1dbc2 <AppDiscProcDmMsg+0x106>
    AppDbSetCacheByHash(appConnCb[pMsg->hdr.param - 1].dbHdl, FALSE);
   1dbb0:	4b2f      	ldr	r3, [pc, #188]	; (1dc70 <AppDiscProcDmMsg+0x1b4>)
   1dbb2:	8822      	ldrh	r2, [r4, #0]
   1dbb4:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   1dbb8:	4641      	mov	r1, r8
   1dbba:	f853 0c20 	ldr.w	r0, [r3, #-32]
   1dbbe:	f7f6 fdeb 	bl	14798 <AppDbSetCacheByHash>
  if (AppCheckBonded((dmConnId_t) pMsg->hdr.param) && (pAppDiscCb->cmplStatus != APP_DISC_INIT))
   1dbc2:	7820      	ldrb	r0, [r4, #0]
   1dbc4:	f000 fab4 	bl	1e130 <AppCheckBonded>
   1dbc8:	2800      	cmp	r0, #0
   1dbca:	d037      	beq.n	1dc3c <AppDiscProcDmMsg+0x180>
   1dbcc:	eb05 0806 	add.w	r8, r5, r6
   1dbd0:	f898 1009 	ldrb.w	r1, [r8, #9]
   1dbd4:	b391      	cbz	r1, 1dc3c <AppDiscProcDmMsg+0x180>
    if (hdl != APP_DB_HDL_NONE)
   1dbd6:	b147      	cbz	r7, 1dbea <AppDiscProcDmMsg+0x12e>
      AppDbSetDiscStatus(hdl, pAppDiscCb->cmplStatus);
   1dbd8:	4638      	mov	r0, r7
   1dbda:	f7f6 fe1f 	bl	1481c <AppDbSetDiscStatus>
      if (pAppDiscCb->cmplStatus == APP_DISC_CMPL || pAppDiscCb->cmplStatus == APP_DISC_CFG_CMPL)
   1dbde:	f898 3009 	ldrb.w	r3, [r8, #9]
   1dbe2:	2b04      	cmp	r3, #4
   1dbe4:	d036      	beq.n	1dc54 <AppDiscProcDmMsg+0x198>
   1dbe6:	2b08      	cmp	r3, #8
   1dbe8:	d034      	beq.n	1dc54 <AppDiscProcDmMsg+0x198>
    if (pAppDiscCb->secRequired)
   1dbea:	19ab      	adds	r3, r5, r6
   1dbec:	7b5a      	ldrb	r2, [r3, #13]
   1dbee:	b132      	cbz	r2, 1dbfe <AppDiscProcDmMsg+0x142>
      if (pAppDiscCb->pDiscCb != NULL)
   1dbf0:	59a9      	ldr	r1, [r5, r6]
      pAppDiscCb->secRequired = FALSE;
   1dbf2:	2200      	movs	r2, #0
   1dbf4:	735a      	strb	r2, [r3, #13]
      if (pAppDiscCb->pDiscCb != NULL)
   1dbf6:	b111      	cbz	r1, 1dbfe <AppDiscProcDmMsg+0x142>
        AttcDiscConfigResume((dmConnId_t) pMsg->hdr.param, pAppDiscCb->pDiscCb);
   1dbf8:	7820      	ldrb	r0, [r4, #0]
   1dbfa:	f7ee fe49 	bl	c890 <AttcDiscConfigResume>
  pAppDiscCb->alreadySecure = TRUE;
   1dbfe:	4435      	add	r5, r6
   1dc00:	2301      	movs	r3, #1
   1dc02:	732b      	strb	r3, [r5, #12]
   1dc04:	e77b      	b.n	1dafe <AppDiscProcDmMsg+0x42>
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t)pMsg->hdr.param - 1];
   1dc06:	7800      	ldrb	r0, [r0, #0]
  if (pAppDiscCb->alreadySecure)
   1dc08:	4916      	ldr	r1, [pc, #88]	; (1dc64 <AppDiscProcDmMsg+0x1a8>)
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t)pMsg->hdr.param - 1];
   1dc0a:	1e43      	subs	r3, r0, #1
  if (pAppDiscCb->alreadySecure)
   1dc0c:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   1dc10:	7b0b      	ldrb	r3, [r1, #12]
   1dc12:	2b00      	cmp	r3, #0
   1dc14:	f47f af73 	bne.w	1dafe <AppDiscProcDmMsg+0x42>
  if (pAppDiscCfg->readDbHash)
   1dc18:	4a13      	ldr	r2, [pc, #76]	; (1dc68 <AppDiscProcDmMsg+0x1ac>)
   1dc1a:	6812      	ldr	r2, [r2, #0]
   1dc1c:	7852      	ldrb	r2, [r2, #1]
   1dc1e:	2a00      	cmp	r2, #0
   1dc20:	f43f af6d 	beq.w	1dafe <AppDiscProcDmMsg+0x42>
    AttcReadByTypeReq((dmConnId_t) pMsg->hdr.param, ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
   1dc24:	4a13      	ldr	r2, [pc, #76]	; (1dc74 <AppDiscProcDmMsg+0x1b8>)
    pAppDiscCb->inProgress = APP_DISC_READ_DBH_IN_PROGRESS;
   1dc26:	2403      	movs	r4, #3
    AttcReadByTypeReq((dmConnId_t) pMsg->hdr.param, ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
   1dc28:	e9cd 2300 	strd	r2, r3, [sp]
    pAppDiscCb->inProgress = APP_DISC_READ_DBH_IN_PROGRESS;
   1dc2c:	72cc      	strb	r4, [r1, #11]
    AttcReadByTypeReq((dmConnId_t) pMsg->hdr.param, ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
   1dc2e:	2302      	movs	r3, #2
   1dc30:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1dc34:	2101      	movs	r1, #1
   1dc36:	f7ef fdab 	bl	d790 <AttcReadByTypeReq>
   1dc3a:	e760      	b.n	1dafe <AppDiscProcDmMsg+0x42>
  if (pAppDiscCfg->waitForSec)
   1dc3c:	4b0a      	ldr	r3, [pc, #40]	; (1dc68 <AppDiscProcDmMsg+0x1ac>)
   1dc3e:	681b      	ldr	r3, [r3, #0]
   1dc40:	781b      	ldrb	r3, [r3, #0]
   1dc42:	2b00      	cmp	r3, #0
   1dc44:	d0db      	beq.n	1dbfe <AppDiscProcDmMsg+0x142>
    appDiscStart((dmConnId_t) pMsg->hdr.param);
   1dc46:	7820      	ldrb	r0, [r4, #0]
   1dc48:	f7ff fe92 	bl	1d970 <appDiscStart>
   1dc4c:	e7d7      	b.n	1dbfe <AppDiscProcDmMsg+0x142>
      appDiscStart((dmConnId_t) pMsg->hdr.param);
   1dc4e:	f7ff fe8f 	bl	1d970 <appDiscStart>
   1dc52:	e770      	b.n	1db36 <AppDiscProcDmMsg+0x7a>
        if (pAppDiscCb->pHdlList != NULL)
   1dc54:	19ab      	adds	r3, r5, r6
   1dc56:	6859      	ldr	r1, [r3, #4]
   1dc58:	2900      	cmp	r1, #0
   1dc5a:	d0c6      	beq.n	1dbea <AppDiscProcDmMsg+0x12e>
          AppDbSetHdlList(hdl, pAppDiscCb->pHdlList);
   1dc5c:	4638      	mov	r0, r7
   1dc5e:	f7f6 fde3 	bl	14828 <AppDbSetHdlList>
   1dc62:	e7c2      	b.n	1dbea <AppDiscProcDmMsg+0x12e>
   1dc64:	10005e90 	.word	0x10005e90
   1dc68:	10005f38 	.word	0x10005f38
   1dc6c:	10005ec0 	.word	0x10005ec0
   1dc70:	10005ecc 	.word	0x10005ecc
   1dc74:	00023ee0 	.word	0x00023ee0

0001dc78 <AppDiscProcAttMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscProcAttMsg(attEvt_t *pMsg)
{
   1dc78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dc7c:	4604      	mov	r4, r0
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t)pMsg->hdr.param - 1];
   1dc7e:	7800      	ldrb	r0, [r0, #0]
  uint8_t status;

  /* Check status */
  if (pMsg->hdr.status == ATT_ERR_DATABASE_OUT_OF_SYNC)
   1dc80:	78e3      	ldrb	r3, [r4, #3]
   1dc82:	2b12      	cmp	r3, #18
{
   1dc84:	b082      	sub	sp, #8
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t)pMsg->hdr.param - 1];
   1dc86:	f100 35ff 	add.w	r5, r0, #4294967295
  if (pMsg->hdr.status == ATT_ERR_DATABASE_OUT_OF_SYNC)
   1dc8a:	d032      	beq.n	1dcf2 <AppDiscProcAttMsg+0x7a>
  {
    /* Restart discovery as cached handle list is out of sync with server's database. */
    appDiscRestartDiscovery((dmConnId_t)pMsg->hdr.param);
  }

  if (pAppDiscCb->inProgress == APP_DISC_READ_DBH_IN_PROGRESS)
   1dc8c:	4e6e      	ldr	r6, [pc, #440]	; (1de48 <AppDiscProcAttMsg+0x1d0>)
   1dc8e:	012f      	lsls	r7, r5, #4
   1dc90:	eb06 1505 	add.w	r5, r6, r5, lsl #4
   1dc94:	7ae9      	ldrb	r1, [r5, #11]
   1dc96:	2903      	cmp	r1, #3
   1dc98:	d01c      	beq.n	1dcd4 <AppDiscProcAttMsg+0x5c>
          appDiscCfgStart(connId, status);
        }
      }
    }
  }
  else if (pAppDiscCb->inProgress == APP_DISC_SVC_DISC_IN_PROGRESS)
   1dc9a:	2901      	cmp	r1, #1
   1dc9c:	d004      	beq.n	1dca8 <AppDiscProcAttMsg+0x30>
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_FAILED);
      }
    }
  }
  /* characteristic configuration */
  else if ((pAppDiscCb->inProgress == APP_DISC_CFG_IN_PROGRESS) &&
   1dc9e:	2902      	cmp	r1, #2
   1dca0:	d031      	beq.n	1dd06 <AppDiscProcAttMsg+0x8e>
        /* notify application of config success */
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_CFG_CMPL);
      }
    }
  }
}
   1dca2:	b002      	add	sp, #8
   1dca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pMsg->hdr.event == ATTC_FIND_BY_TYPE_VALUE_RSP)
   1dca8:	78a3      	ldrb	r3, [r4, #2]
   1dcaa:	2b03      	cmp	r3, #3
   1dcac:	d049      	beq.n	1dd42 <AppDiscProcAttMsg+0xca>
    else if (pMsg->hdr.event == ATTC_READ_BY_TYPE_RSP ||
   1dcae:	2b04      	cmp	r3, #4
   1dcb0:	d001      	beq.n	1dcb6 <AppDiscProcAttMsg+0x3e>
   1dcb2:	2b02      	cmp	r3, #2
   1dcb4:	d1f5      	bne.n	1dca2 <AppDiscProcAttMsg+0x2a>
      status = AttcDiscCharCmpl(pAppDiscCb->pDiscCb, pMsg);
   1dcb6:	4621      	mov	r1, r4
   1dcb8:	59f0      	ldr	r0, [r6, r7]
   1dcba:	f7ee fbcf 	bl	c45c <AttcDiscCharCmpl>
   1dcbe:	4605      	mov	r5, r0
      APP_TRACE_INFO1("AttcDiscCharCmpl status 0x%02x", status);
   1dcc0:	4629      	mov	r1, r5
   1dcc2:	4862      	ldr	r0, [pc, #392]	; (1de4c <AppDiscProcAttMsg+0x1d4>)
   1dcc4:	f7f6 f926 	bl	13f14 <WsfTrace>
      if (status == ATT_SUCCESS)
   1dcc8:	b9b5      	cbnz	r5, 1dcf8 <AppDiscProcAttMsg+0x80>
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_CMPL);
   1dcca:	4b61      	ldr	r3, [pc, #388]	; (1de50 <AppDiscProcAttMsg+0x1d8>)
   1dccc:	7820      	ldrb	r0, [r4, #0]
   1dcce:	681b      	ldr	r3, [r3, #0]
   1dcd0:	2104      	movs	r1, #4
   1dcd2:	e00a      	b.n	1dcea <AppDiscProcAttMsg+0x72>
    if (pMsg->hdr.event == ATTC_READ_BY_TYPE_RSP)
   1dcd4:	78a3      	ldrb	r3, [r4, #2]
   1dcd6:	2b04      	cmp	r3, #4
   1dcd8:	d1e3      	bne.n	1dca2 <AppDiscProcAttMsg+0x2a>
      if (pMsg->hdr.status != ATT_SUCCESS)
   1dcda:	78e3      	ldrb	r3, [r4, #3]
      dmConnId_t connId = (dmConnId_t)pMsg->hdr.param;
   1dcdc:	f894 8000 	ldrb.w	r8, [r4]
      if (pMsg->hdr.status != ATT_SUCCESS)
   1dce0:	2b00      	cmp	r3, #0
   1dce2:	d04d      	beq.n	1dd80 <AppDiscProcAttMsg+0x108>
        (*appDiscCback)(connId, APP_DISC_START);
   1dce4:	4b5a      	ldr	r3, [pc, #360]	; (1de50 <AppDiscProcAttMsg+0x1d8>)
   1dce6:	681b      	ldr	r3, [r3, #0]
   1dce8:	4640      	mov	r0, r8
}
   1dcea:	b002      	add	sp, #8
   1dcec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_CFG_CMPL);
   1dcf0:	4718      	bx	r3
    appDiscRestartDiscovery((dmConnId_t)pMsg->hdr.param);
   1dcf2:	f7ff fea7 	bl	1da44 <appDiscRestartDiscovery>
   1dcf6:	e7c9      	b.n	1dc8c <AppDiscProcAttMsg+0x14>
      else if (status != ATT_CONTINUING)
   1dcf8:	2d78      	cmp	r5, #120	; 0x78
   1dcfa:	d0d2      	beq.n	1dca2 <AppDiscProcAttMsg+0x2a>
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_FAILED);
   1dcfc:	4b54      	ldr	r3, [pc, #336]	; (1de50 <AppDiscProcAttMsg+0x1d8>)
   1dcfe:	7820      	ldrb	r0, [r4, #0]
   1dd00:	681b      	ldr	r3, [r3, #0]
   1dd02:	2105      	movs	r1, #5
   1dd04:	e7f1      	b.n	1dcea <AppDiscProcAttMsg+0x72>
           (pMsg->hdr.event == ATTC_READ_RSP || pMsg->hdr.event == ATTC_WRITE_RSP))
   1dd06:	78a3      	ldrb	r3, [r4, #2]
  else if ((pAppDiscCb->inProgress == APP_DISC_CFG_IN_PROGRESS) &&
   1dd08:	2b05      	cmp	r3, #5
   1dd0a:	d001      	beq.n	1dd10 <AppDiscProcAttMsg+0x98>
           (pMsg->hdr.event == ATTC_READ_RSP || pMsg->hdr.event == ATTC_WRITE_RSP))
   1dd0c:	2b09      	cmp	r3, #9
   1dd0e:	d1c8      	bne.n	1dca2 <AppDiscProcAttMsg+0x2a>
    if (pAppDiscCb->scPending)
   1dd10:	19f3      	adds	r3, r6, r7
   1dd12:	7b9a      	ldrb	r2, [r3, #14]
   1dd14:	2a00      	cmp	r2, #0
   1dd16:	d151      	bne.n	1ddbc <AppDiscProcAttMsg+0x144>
    else if ((pMsg->hdr.status == ATT_ERR_AUTH || pMsg->hdr.status == ATT_ERR_ENC) &&
   1dd18:	78e3      	ldrb	r3, [r4, #3]
   1dd1a:	2b05      	cmp	r3, #5
   1dd1c:	d023      	beq.n	1dd66 <AppDiscProcAttMsg+0xee>
   1dd1e:	2b0f      	cmp	r3, #15
   1dd20:	d021      	beq.n	1dd66 <AppDiscProcAttMsg+0xee>
      status = AttcDiscConfigCmpl((dmConnId_t) pMsg->hdr.param, pAppDiscCb->pDiscCb);
   1dd22:	59f1      	ldr	r1, [r6, r7]
   1dd24:	7820      	ldrb	r0, [r4, #0]
   1dd26:	f7ee fd87 	bl	c838 <AttcDiscConfigCmpl>
   1dd2a:	4605      	mov	r5, r0
      APP_TRACE_INFO1("AttcDiscConfigCmpl status 0x%02x", status);
   1dd2c:	4629      	mov	r1, r5
   1dd2e:	4849      	ldr	r0, [pc, #292]	; (1de54 <AppDiscProcAttMsg+0x1dc>)
   1dd30:	f7f6 f8f0 	bl	13f14 <WsfTrace>
      if (status != ATT_CONTINUING)
   1dd34:	2d78      	cmp	r5, #120	; 0x78
   1dd36:	d0b4      	beq.n	1dca2 <AppDiscProcAttMsg+0x2a>
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_CFG_CMPL);
   1dd38:	4b45      	ldr	r3, [pc, #276]	; (1de50 <AppDiscProcAttMsg+0x1d8>)
   1dd3a:	7820      	ldrb	r0, [r4, #0]
   1dd3c:	681b      	ldr	r3, [r3, #0]
   1dd3e:	2108      	movs	r1, #8
   1dd40:	e7d3      	b.n	1dcea <AppDiscProcAttMsg+0x72>
      status = AttcDiscServiceCmpl(pAppDiscCb->pDiscCb, pMsg);
   1dd42:	4621      	mov	r1, r4
   1dd44:	59f0      	ldr	r0, [r6, r7]
   1dd46:	f7ee fb4b 	bl	c3e0 <AttcDiscServiceCmpl>
   1dd4a:	4605      	mov	r5, r0
      APP_TRACE_INFO1("AttcDiscServiceCmpl status 0x%02x", status);
   1dd4c:	4601      	mov	r1, r0
   1dd4e:	4842      	ldr	r0, [pc, #264]	; (1de58 <AppDiscProcAttMsg+0x1e0>)
   1dd50:	f7f6 f8e0 	bl	13f14 <WsfTrace>
      if (status == ATT_SUCCESS)
   1dd54:	2d00      	cmp	r5, #0
   1dd56:	d1cf      	bne.n	1dcf8 <AppDiscProcAttMsg+0x80>
        AttcDiscCharStart((dmConnId_t) pMsg->hdr.param, pAppDiscCb->pDiscCb);
   1dd58:	59f1      	ldr	r1, [r6, r7]
   1dd5a:	7820      	ldrb	r0, [r4, #0]
}
   1dd5c:	b002      	add	sp, #8
   1dd5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        AttcDiscCharStart((dmConnId_t) pMsg->hdr.param, pAppDiscCb->pDiscCb);
   1dd62:	f7ee bb67 	b.w	c434 <AttcDiscCharStart>
             (DmConnSecLevel((dmConnId_t) pMsg->hdr.param) == DM_SEC_LEVEL_NONE))
   1dd66:	7820      	ldrb	r0, [r4, #0]
   1dd68:	f7fa fdba 	bl	188e0 <DmConnSecLevel>
    else if ((pMsg->hdr.status == ATT_ERR_AUTH || pMsg->hdr.status == ATT_ERR_ENC) &&
   1dd6c:	2800      	cmp	r0, #0
   1dd6e:	d1d8      	bne.n	1dd22 <AppDiscProcAttMsg+0xaa>
      (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_SEC_REQUIRED);
   1dd70:	4b37      	ldr	r3, [pc, #220]	; (1de50 <AppDiscProcAttMsg+0x1d8>)
   1dd72:	7820      	ldrb	r0, [r4, #0]
   1dd74:	681b      	ldr	r3, [r3, #0]
      pAppDiscCb->secRequired = TRUE;
   1dd76:	443e      	add	r6, r7
   1dd78:	2201      	movs	r2, #1
   1dd7a:	7372      	strb	r2, [r6, #13]
      (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_SEC_REQUIRED);
   1dd7c:	2102      	movs	r1, #2
   1dd7e:	e7b4      	b.n	1dcea <AppDiscProcAttMsg+0x72>
        pAppDiscCb->inProgress = APP_DISC_IDLE;
   1dd80:	72eb      	strb	r3, [r5, #11]
        if ((hdl = AppDbGetHdl(connId)) == APP_DB_HDL_NONE)
   1dd82:	4640      	mov	r0, r8
   1dd84:	f000 fa5c 	bl	1e240 <AppDbGetHdl>
   1dd88:	4605      	mov	r5, r0
   1dd8a:	2800      	cmp	r0, #0
   1dd8c:	d043      	beq.n	1de16 <AppDiscProcAttMsg+0x19e>
        if (memcmp(AppDbGetPeerDbHash(hdl), pMsg->pValue + 3, ATT_DATABASE_HASH_LEN))
   1dd8e:	4628      	mov	r0, r5
   1dd90:	f7f6 fcee 	bl	14770 <AppDbGetPeerDbHash>
   1dd94:	6861      	ldr	r1, [r4, #4]
   1dd96:	2210      	movs	r2, #16
   1dd98:	3103      	adds	r1, #3
   1dd9a:	9101      	str	r1, [sp, #4]
   1dd9c:	f003 fb24 	bl	213e8 <memcmp>
   1dda0:	b1a8      	cbz	r0, 1ddce <AppDiscProcAttMsg+0x156>
          AppDbSetPeerDbHash(hdl, pMsg->pValue + 3);
   1dda2:	9901      	ldr	r1, [sp, #4]
   1dda4:	4628      	mov	r0, r5
   1dda6:	f7f6 fce5 	bl	14774 <AppDbSetPeerDbHash>
          AppDbSetCacheByHash(hdl, TRUE);
   1ddaa:	2101      	movs	r1, #1
   1ddac:	4628      	mov	r0, r5
   1ddae:	f7f6 fcf3 	bl	14798 <AppDbSetCacheByHash>
          (*appDiscCback)(connId, APP_DISC_START);
   1ddb2:	4b27      	ldr	r3, [pc, #156]	; (1de50 <AppDiscProcAttMsg+0x1d8>)
   1ddb4:	2103      	movs	r1, #3
   1ddb6:	681b      	ldr	r3, [r3, #0]
   1ddb8:	4640      	mov	r0, r8
   1ddba:	e796      	b.n	1dcea <AppDiscProcAttMsg+0x72>
      appDiscStart((dmConnId_t) pMsg->hdr.param);
   1ddbc:	7820      	ldrb	r0, [r4, #0]
      pAppDiscCb->scPending = FALSE;
   1ddbe:	2200      	movs	r2, #0
   1ddc0:	739a      	strb	r2, [r3, #14]
      pAppDiscCb->inProgress = APP_DISC_IDLE;
   1ddc2:	72da      	strb	r2, [r3, #11]
}
   1ddc4:	b002      	add	sp, #8
   1ddc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      appDiscStart((dmConnId_t) pMsg->hdr.param);
   1ddca:	f7ff bdd1 	b.w	1d970 <appDiscStart>
          memcpy(pAppDiscCb->pHdlList, AppDbGetHdlList(hdl),
   1ddce:	4437      	add	r7, r6
   1ddd0:	4628      	mov	r0, r5
   1ddd2:	687c      	ldr	r4, [r7, #4]
   1ddd4:	f7f6 fd26 	bl	14824 <AppDbGetHdlList>
   1ddd8:	7aba      	ldrb	r2, [r7, #10]
   1ddda:	4601      	mov	r1, r0
   1dddc:	0052      	lsls	r2, r2, #1
   1ddde:	4620      	mov	r0, r4
   1dde0:	f7ee f98e 	bl	c100 <memcpy>
          status = AppDbGetDiscStatus(hdl);
   1dde4:	4628      	mov	r0, r5
   1dde6:	f7f6 fd15 	bl	14814 <AppDbGetDiscStatus>
  if (status < APP_DISC_CFG_CMPL)
   1ddea:	2807      	cmp	r0, #7
   1ddec:	d804      	bhi.n	1ddf8 <AppDiscProcAttMsg+0x180>
    (*appDiscCback)(connId, APP_DISC_CFG_START);
   1ddee:	4b18      	ldr	r3, [pc, #96]	; (1de50 <AppDiscProcAttMsg+0x1d8>)
   1ddf0:	2106      	movs	r1, #6
   1ddf2:	681b      	ldr	r3, [r3, #0]
   1ddf4:	4640      	mov	r0, r8
   1ddf6:	e778      	b.n	1dcea <AppDiscProcAttMsg+0x72>
  else if (status == APP_DISC_CFG_CMPL && pAppDiscCb->connCfgStatus == APP_DISC_INIT)
   1ddf8:	2808      	cmp	r0, #8
   1ddfa:	f47f af52 	bne.w	1dca2 <AppDiscProcAttMsg+0x2a>
   1ddfe:	eb06 1608 	add.w	r6, r6, r8, lsl #4
   1de02:	f816 3c08 	ldrb.w	r3, [r6, #-8]
   1de06:	2b00      	cmp	r3, #0
   1de08:	f47f af4b 	bne.w	1dca2 <AppDiscProcAttMsg+0x2a>
    (*appDiscCback)(connId, APP_DISC_CFG_CONN_START);
   1de0c:	4b10      	ldr	r3, [pc, #64]	; (1de50 <AppDiscProcAttMsg+0x1d8>)
   1de0e:	2107      	movs	r1, #7
   1de10:	681b      	ldr	r3, [r3, #0]
   1de12:	4640      	mov	r0, r8
   1de14:	e769      	b.n	1dcea <AppDiscProcAttMsg+0x72>
          hdl = appConnCb[connId - 1].dbHdl = AppDbNewRecord(DmConnPeerAddrType(connId),
   1de16:	4640      	mov	r0, r8
   1de18:	f7fa fd26 	bl	18868 <DmConnPeerAddrType>
   1de1c:	4605      	mov	r5, r0
   1de1e:	4640      	mov	r0, r8
   1de20:	f7fa fd2c 	bl	1887c <DmConnPeerAddr>
   1de24:	9001      	str	r0, [sp, #4]
                                                             (DmConnRole(connId)==DM_ROLE_MASTER)?TRUE:FALSE);
   1de26:	4640      	mov	r0, r8
   1de28:	f7fa fda6 	bl	18978 <DmConnRole>
          hdl = appConnCb[connId - 1].dbHdl = AppDbNewRecord(DmConnPeerAddrType(connId),
   1de2c:	fab0 f280 	clz	r2, r0
   1de30:	9901      	ldr	r1, [sp, #4]
   1de32:	4628      	mov	r0, r5
   1de34:	0952      	lsrs	r2, r2, #5
   1de36:	f7f6 fafb 	bl	14430 <AppDbNewRecord>
   1de3a:	4b08      	ldr	r3, [pc, #32]	; (1de5c <AppDiscProcAttMsg+0x1e4>)
   1de3c:	eb03 1348 	add.w	r3, r3, r8, lsl #5
   1de40:	4605      	mov	r5, r0
   1de42:	f843 0c20 	str.w	r0, [r3, #-32]
   1de46:	e7a2      	b.n	1dd8e <AppDiscProcAttMsg+0x116>
   1de48:	10005e90 	.word	0x10005e90
   1de4c:	000256fc 	.word	0x000256fc
   1de50:	10005ec0 	.word	0x10005ec0
   1de54:	0002571c 	.word	0x0002571c
   1de58:	000256d8 	.word	0x000256d8
   1de5c:	10005ecc 	.word	0x10005ecc

0001de60 <AppDiscInit>:
{
  uint8_t i;

  for (i = 0; i < DM_CONN_MAX; i++)
  {
    appDiscCb[i].inProgress = APP_DISC_IDLE;
   1de60:	4b04      	ldr	r3, [pc, #16]	; (1de74 <AppDiscInit+0x14>)
   1de62:	2200      	movs	r2, #0
   1de64:	72da      	strb	r2, [r3, #11]
    appDiscCb[i].pDiscCb = NULL;
   1de66:	601a      	str	r2, [r3, #0]
    appDiscCb[i].inProgress = APP_DISC_IDLE;
   1de68:	76da      	strb	r2, [r3, #27]
    appDiscCb[i].pDiscCb = NULL;
   1de6a:	611a      	str	r2, [r3, #16]
    appDiscCb[i].inProgress = APP_DISC_IDLE;
   1de6c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    appDiscCb[i].pDiscCb = NULL;
   1de70:	621a      	str	r2, [r3, #32]
  }
}
   1de72:	4770      	bx	lr
   1de74:	10005e90 	.word	0x10005e90

0001de78 <AppDiscRegister>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscRegister(appDiscCback_t cback)
{
  appDiscCback = cback;
   1de78:	4b01      	ldr	r3, [pc, #4]	; (1de80 <AppDiscRegister+0x8>)
   1de7a:	6018      	str	r0, [r3, #0]
}
   1de7c:	4770      	bx	lr
   1de7e:	bf00      	nop
   1de80:	10005ec0 	.word	0x10005ec0

0001de84 <AppDiscSetHdlList>:
/*************************************************************************************************/
void AppDiscSetHdlList(dmConnId_t connId, uint8_t hdlListLen, uint16_t *pHdlList)
{
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];

  pAppDiscCb->hdlListLen = hdlListLen;
   1de84:	4b03      	ldr	r3, [pc, #12]	; (1de94 <AppDiscSetHdlList+0x10>)
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   1de86:	3801      	subs	r0, #1
  pAppDiscCb->hdlListLen = hdlListLen;
   1de88:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   1de8c:	7281      	strb	r1, [r0, #10]
  pAppDiscCb->pHdlList = pHdlList;
   1de8e:	6042      	str	r2, [r0, #4]
}
   1de90:	4770      	bx	lr
   1de92:	bf00      	nop
   1de94:	10005e90 	.word	0x10005e90

0001de98 <AppDiscComplete>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscComplete(dmConnId_t connId, uint8_t status)
{
   1de98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
  appDbHdl_t hdl;

  /* set connection as idle */
  DmConnSetIdle(connId, DM_IDLE_APP_DISC, DM_CONN_IDLE);
   1de9c:	2200      	movs	r2, #0
{
   1de9e:	460c      	mov	r4, r1
  DmConnSetIdle(connId, DM_IDLE_APP_DISC, DM_CONN_IDLE);
   1dea0:	2108      	movs	r1, #8
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   1dea2:	f100 38ff 	add.w	r8, r0, #4294967295
{
   1dea6:	4605      	mov	r5, r0
  DmConnSetIdle(connId, DM_IDLE_APP_DISC, DM_CONN_IDLE);
   1dea8:	f7fa fd24 	bl	188f4 <DmConnSetIdle>

  /* store status if not doing connection setup configuration */
  if (!(status == APP_DISC_CFG_CMPL && pAppDiscCb->connCfgStatus == APP_DISC_CFG_CONN_START))
   1deac:	2c08      	cmp	r4, #8
   1deae:	4e26      	ldr	r6, [pc, #152]	; (1df48 <AppDiscComplete+0xb0>)
   1deb0:	ea4f 1708 	mov.w	r7, r8, lsl #4
   1deb4:	d02a      	beq.n	1df0c <AppDiscComplete+0x74>
  {
    pAppDiscCb->cmplStatus = status;
   1deb6:	19f3      	adds	r3, r6, r7
   1deb8:	725c      	strb	r4, [r3, #9]
  }

  /* initialize control block */
  pAppDiscCb->inProgress = APP_DISC_IDLE;
   1deba:	19f3      	adds	r3, r6, r7
  if (pAppDiscCb->pDiscCb != NULL)
   1debc:	59f0      	ldr	r0, [r6, r7]
  pAppDiscCb->inProgress = APP_DISC_IDLE;
   1debe:	f04f 0800 	mov.w	r8, #0
   1dec2:	f883 800b 	strb.w	r8, [r3, #11]
  if (pAppDiscCb->pDiscCb != NULL)
   1dec6:	b118      	cbz	r0, 1ded0 <AppDiscComplete+0x38>
  {
    WsfBufFree(pAppDiscCb->pDiscCb);
   1dec8:	f7f5 fc74 	bl	137b4 <WsfBufFree>
    pAppDiscCb->pDiscCb = NULL;
   1decc:	f846 8007 	str.w	r8, [r6, r7]
  }

  if ((hdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   1ded0:	4628      	mov	r0, r5
   1ded2:	f000 f9b5 	bl	1e240 <AppDbGetHdl>
   1ded6:	4680      	mov	r8, r0
   1ded8:	b178      	cbz	r0, 1defa <AppDiscComplete+0x62>
  {
    /* Don't store configuration complete if not bonded - it must be re-done on reconnection. */
    uint8_t discComplete = AppCheckBonded(connId) ? APP_DISC_CFG_CMPL : APP_DISC_CMPL;
   1deda:	4628      	mov	r0, r5
   1dedc:	f000 f928 	bl	1e130 <AppCheckBonded>
   1dee0:	2800      	cmp	r0, #0
   1dee2:	bf14      	ite	ne
   1dee4:	2308      	movne	r3, #8
   1dee6:	2304      	moveq	r3, #4

    /* store discovery status if not doing connection setup configuration */
    if (!(status == APP_DISC_CFG_CMPL && pAppDiscCb->connCfgStatus == APP_DISC_CFG_CONN_START) && (status <= discComplete))
   1dee8:	2c08      	cmp	r4, #8
   1deea:	d016      	beq.n	1df1a <AppDiscComplete+0x82>
   1deec:	42a3      	cmp	r3, r4
   1deee:	d226      	bcs.n	1df3e <AppDiscComplete+0xa6>
    {
      AppDbSetDiscStatus(hdl, status);
    }

    if (pAppDiscCb->pHdlList != NULL)
   1def0:	19f3      	adds	r3, r6, r7
   1def2:	6859      	ldr	r1, [r3, #4]
   1def4:	b109      	cbz	r1, 1defa <AppDiscComplete+0x62>
    {
      /* if discovery complete store handles */
      if (status == APP_DISC_CMPL)
   1def6:	2c04      	cmp	r4, #4
   1def8:	d01d      	beq.n	1df36 <AppDiscComplete+0x9e>
  }

  /* set connection setup configuration status as complete if either discovery-initiated
   * configuration is complete or connection setup configuration is complete
   */
  if (status == APP_DISC_CFG_CMPL)
   1defa:	2c08      	cmp	r4, #8
   1defc:	d011      	beq.n	1df22 <AppDiscComplete+0x8a>
  {
    pAppDiscCb->connCfgStatus = APP_DISC_CFG_CMPL;
  }

  APP_TRACE_INFO2("AppDiscComplete connId:%d status:0x%02x", connId, status);
   1defe:	4622      	mov	r2, r4
   1df00:	4629      	mov	r1, r5
   1df02:	4812      	ldr	r0, [pc, #72]	; (1df4c <AppDiscComplete+0xb4>)
}
   1df04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  APP_TRACE_INFO2("AppDiscComplete connId:%d status:0x%02x", connId, status);
   1df08:	f7f6 b804 	b.w	13f14 <WsfTrace>
  if (!(status == APP_DISC_CFG_CMPL && pAppDiscCb->connCfgStatus == APP_DISC_CFG_CONN_START))
   1df0c:	eb06 1808 	add.w	r8, r6, r8, lsl #4
   1df10:	f898 3008 	ldrb.w	r3, [r8, #8]
   1df14:	2b07      	cmp	r3, #7
   1df16:	d1ce      	bne.n	1deb6 <AppDiscComplete+0x1e>
   1df18:	e7cf      	b.n	1deba <AppDiscComplete+0x22>
    if (!(status == APP_DISC_CFG_CMPL && pAppDiscCb->connCfgStatus == APP_DISC_CFG_CONN_START) && (status <= discComplete))
   1df1a:	19f2      	adds	r2, r6, r7
   1df1c:	7a12      	ldrb	r2, [r2, #8]
   1df1e:	2a07      	cmp	r2, #7
   1df20:	d1e4      	bne.n	1deec <AppDiscComplete+0x54>
    pAppDiscCb->connCfgStatus = APP_DISC_CFG_CMPL;
   1df22:	443e      	add	r6, r7
   1df24:	2308      	movs	r3, #8
   1df26:	7233      	strb	r3, [r6, #8]
  APP_TRACE_INFO2("AppDiscComplete connId:%d status:0x%02x", connId, status);
   1df28:	4622      	mov	r2, r4
   1df2a:	4629      	mov	r1, r5
   1df2c:	4807      	ldr	r0, [pc, #28]	; (1df4c <AppDiscComplete+0xb4>)
}
   1df2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  APP_TRACE_INFO2("AppDiscComplete connId:%d status:0x%02x", connId, status);
   1df32:	f7f5 bfef 	b.w	13f14 <WsfTrace>
        AppDbSetHdlList(hdl, pAppDiscCb->pHdlList);
   1df36:	4640      	mov	r0, r8
   1df38:	f7f6 fc76 	bl	14828 <AppDbSetHdlList>
  if (status == APP_DISC_CFG_CMPL)
   1df3c:	e7df      	b.n	1defe <AppDiscComplete+0x66>
      AppDbSetDiscStatus(hdl, status);
   1df3e:	4621      	mov	r1, r4
   1df40:	4640      	mov	r0, r8
   1df42:	f7f6 fc6b 	bl	1481c <AppDbSetDiscStatus>
   1df46:	e7d3      	b.n	1def0 <AppDiscComplete+0x58>
   1df48:	10005e90 	.word	0x10005e90
   1df4c:	00025740 	.word	0x00025740

0001df50 <AppDiscFindService>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscFindService(dmConnId_t connId, uint8_t uuidLen, uint8_t *pUuid, uint8_t listLen,
                        attcDiscChar_t **pCharList, uint16_t *pHdlList)
{
   1df50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   1df54:	1e44      	subs	r4, r0, #1

  if (pAppDiscCb->pDiscCb == NULL)
   1df56:	4e15      	ldr	r6, [pc, #84]	; (1dfac <AppDiscFindService+0x5c>)
   1df58:	0124      	lsls	r4, r4, #4
{
   1df5a:	b081      	sub	sp, #4
   1df5c:	4698      	mov	r8, r3
  if (pAppDiscCb->pDiscCb == NULL)
   1df5e:	5933      	ldr	r3, [r6, r4]
{
   1df60:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   1df64:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   1df68:	4605      	mov	r5, r0
   1df6a:	460f      	mov	r7, r1
   1df6c:	4693      	mov	fp, r2
  if (pAppDiscCb->pDiscCb == NULL)
   1df6e:	b1a3      	cbz	r3, 1df9a <AppDiscFindService+0x4a>
  }

  if (pAppDiscCb->pDiscCb != NULL)
  {
    /* set connection as busy */
    DmConnSetIdle(connId, DM_IDLE_APP_DISC, DM_CONN_BUSY);
   1df70:	4628      	mov	r0, r5
   1df72:	2201      	movs	r2, #1
   1df74:	2108      	movs	r1, #8
   1df76:	f7fa fcbd 	bl	188f4 <DmConnSetIdle>

    pAppDiscCb->inProgress = APP_DISC_SVC_DISC_IN_PROGRESS;

    pAppDiscCb->pDiscCb->pCharList = pCharList;
   1df7a:	5931      	ldr	r1, [r6, r4]
    pAppDiscCb->inProgress = APP_DISC_SVC_DISC_IN_PROGRESS;
   1df7c:	4434      	add	r4, r6
    pAppDiscCb->pDiscCb->pHdlList = pHdlList;
    pAppDiscCb->pDiscCb->charListLen = listLen;
    AttcDiscService(connId, pAppDiscCb->pDiscCb, uuidLen, pUuid);
   1df7e:	4628      	mov	r0, r5
   1df80:	465b      	mov	r3, fp
    pAppDiscCb->inProgress = APP_DISC_SVC_DISC_IN_PROGRESS;
   1df82:	2501      	movs	r5, #1
    AttcDiscService(connId, pAppDiscCb->pDiscCb, uuidLen, pUuid);
   1df84:	463a      	mov	r2, r7
    pAppDiscCb->inProgress = APP_DISC_SVC_DISC_IN_PROGRESS;
   1df86:	72e5      	strb	r5, [r4, #11]
    pAppDiscCb->pDiscCb->pHdlList = pHdlList;
   1df88:	e9c1 9a00 	strd	r9, sl, [r1]
    pAppDiscCb->pDiscCb->charListLen = listLen;
   1df8c:	f881 800c 	strb.w	r8, [r1, #12]
  }
}
   1df90:	b001      	add	sp, #4
   1df92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    AttcDiscService(connId, pAppDiscCb->pDiscCb, uuidLen, pUuid);
   1df96:	f7ee ba13 	b.w	c3c0 <AttcDiscService>
    pAppDiscCb->pDiscCb = WsfBufAlloc(sizeof(attcDiscCb_t));
   1df9a:	2014      	movs	r0, #20
   1df9c:	f7f5 fbda 	bl	13754 <WsfBufAlloc>
   1dfa0:	5130      	str	r0, [r6, r4]
  if (pAppDiscCb->pDiscCb != NULL)
   1dfa2:	2800      	cmp	r0, #0
   1dfa4:	d1e4      	bne.n	1df70 <AppDiscFindService+0x20>
}
   1dfa6:	b001      	add	sp, #4
   1dfa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dfac:	10005e90 	.word	0x10005e90

0001dfb0 <AppDiscConfigure>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscConfigure(dmConnId_t connId, uint8_t status, uint8_t cfgListLen,
                      attcDiscCfg_t *pCfgList, uint8_t hdlListLen, uint16_t *pHdlList)
{
   1dfb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   1dfb4:	1e44      	subs	r4, r0, #1
  uint8_t ret;

  if (pAppDiscCb->pDiscCb == NULL)
   1dfb6:	4f1b      	ldr	r7, [pc, #108]	; (1e024 <AppDiscConfigure+0x74>)
   1dfb8:	0124      	lsls	r4, r4, #4
{
   1dfba:	b081      	sub	sp, #4
   1dfbc:	4699      	mov	r9, r3
  if (pAppDiscCb->pDiscCb == NULL)
   1dfbe:	593b      	ldr	r3, [r7, r4]
{
   1dfc0:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   1dfc4:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   1dfc8:	4605      	mov	r5, r0
   1dfca:	460e      	mov	r6, r1
   1dfcc:	4690      	mov	r8, r2
  if (pAppDiscCb->pDiscCb == NULL)
   1dfce:	b1f3      	cbz	r3, 1e00e <AppDiscConfigure+0x5e>
  }

  if (pAppDiscCb->pDiscCb != NULL)
  {
    /* set connection as busy */
    DmConnSetIdle(connId, DM_IDLE_APP_DISC, DM_CONN_BUSY);
   1dfd0:	2201      	movs	r2, #1
   1dfd2:	2108      	movs	r1, #8
   1dfd4:	4628      	mov	r0, r5
   1dfd6:	f7fa fc8d 	bl	188f4 <DmConnSetIdle>

    pAppDiscCb->inProgress = APP_DISC_CFG_IN_PROGRESS;
   1dfda:	193b      	adds	r3, r7, r4
   1dfdc:	2202      	movs	r2, #2

    if (status == APP_DISC_CFG_CONN_START)
   1dfde:	2e07      	cmp	r6, #7
    pAppDiscCb->inProgress = APP_DISC_CFG_IN_PROGRESS;
   1dfe0:	72da      	strb	r2, [r3, #11]
    if (status == APP_DISC_CFG_CONN_START)
   1dfe2:	d01d      	beq.n	1e020 <AppDiscConfigure+0x70>
    {
      pAppDiscCb->connCfgStatus = APP_DISC_CFG_CONN_START;
    }

    /* start configuration */
    pAppDiscCb->pDiscCb->pCfgList = pCfgList;
   1dfe4:	5939      	ldr	r1, [r7, r4]
    pAppDiscCb->pDiscCb->cfgListLen = cfgListLen;
    pAppDiscCb->pDiscCb->pHdlList = pHdlList;
    pAppDiscCb->pDiscCb->charListLen = hdlListLen;
    ret = AttcDiscConfigStart(connId, pAppDiscCb->pDiscCb);
   1dfe6:	4628      	mov	r0, r5
    pAppDiscCb->pDiscCb->pCfgList = pCfgList;
   1dfe8:	f8c1 9008 	str.w	r9, [r1, #8]
    pAppDiscCb->pDiscCb->cfgListLen = cfgListLen;
   1dfec:	f881 800d 	strb.w	r8, [r1, #13]
    pAppDiscCb->pDiscCb->pHdlList = pHdlList;
   1dff0:	f8c1 b004 	str.w	fp, [r1, #4]
    pAppDiscCb->pDiscCb->charListLen = hdlListLen;
   1dff4:	f881 a00c 	strb.w	sl, [r1, #12]
    ret = AttcDiscConfigStart(connId, pAppDiscCb->pDiscCb);
   1dff8:	f7ee fbfa 	bl	c7f0 <AttcDiscConfigStart>

    /* nothing to configure; configuration complete */
    if (ret == ATT_SUCCESS)
   1dffc:	b968      	cbnz	r0, 1e01a <AppDiscConfigure+0x6a>
    {
      (*appDiscCback)(connId, APP_DISC_CFG_CMPL);
   1dffe:	4b0a      	ldr	r3, [pc, #40]	; (1e028 <AppDiscConfigure+0x78>)
   1e000:	681b      	ldr	r3, [r3, #0]
   1e002:	2108      	movs	r1, #8
   1e004:	4628      	mov	r0, r5
    }
  }
}
   1e006:	b001      	add	sp, #4
   1e008:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      (*appDiscCback)(connId, APP_DISC_CFG_CMPL);
   1e00c:	4718      	bx	r3
    pAppDiscCb->pDiscCb = WsfBufAlloc(sizeof(attcDiscCb_t));
   1e00e:	2014      	movs	r0, #20
   1e010:	f7f5 fba0 	bl	13754 <WsfBufAlloc>
   1e014:	5138      	str	r0, [r7, r4]
  if (pAppDiscCb->pDiscCb != NULL)
   1e016:	2800      	cmp	r0, #0
   1e018:	d1da      	bne.n	1dfd0 <AppDiscConfigure+0x20>
}
   1e01a:	b001      	add	sp, #4
   1e01c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pAppDiscCb->connCfgStatus = APP_DISC_CFG_CONN_START;
   1e020:	721e      	strb	r6, [r3, #8]
   1e022:	e7df      	b.n	1dfe4 <AppDiscConfigure+0x34>
   1e024:	10005e90 	.word	0x10005e90
   1e028:	10005ec0 	.word	0x10005ec0

0001e02c <AppDiscServiceChanged>:
  uint16_t    *pHdl;
  uint8_t     i;
  bool_t      foundHdl;

  /* verify characteristic length */
  if (pMsg->valueLen != CH_SC_LEN)
   1e02c:	8903      	ldrh	r3, [r0, #8]
   1e02e:	2b04      	cmp	r3, #4
   1e030:	d000      	beq.n	1e034 <AppDiscServiceChanged+0x8>
   1e032:	4770      	bx	lr
  {
    return;
  }

  /* parse and verify handles */
  p = pMsg->pValue;
   1e034:	6843      	ldr	r3, [r0, #4]
  BSTREAM_TO_UINT16(startHdl, p);
   1e036:	7859      	ldrb	r1, [r3, #1]
   1e038:	781a      	ldrb	r2, [r3, #0]
   1e03a:	eb02 2201 	add.w	r2, r2, r1, lsl #8
   1e03e:	b292      	uxth	r2, r2
  BSTREAM_TO_UINT16(endHdl, p);
  if (startHdl == 0 || endHdl < startHdl)
   1e040:	2a00      	cmp	r2, #0
   1e042:	d0f6      	beq.n	1e032 <AppDiscServiceChanged+0x6>
{
   1e044:	b530      	push	{r4, r5, lr}
  BSTREAM_TO_UINT16(endHdl, p);
   1e046:	78d9      	ldrb	r1, [r3, #3]
   1e048:	f893 e002 	ldrb.w	lr, [r3, #2]
   1e04c:	eb0e 2e01 	add.w	lr, lr, r1, lsl #8
   1e050:	fa1f fe8e 	uxth.w	lr, lr
  if (startHdl == 0 || endHdl < startHdl)
   1e054:	4572      	cmp	r2, lr
   1e056:	d818      	bhi.n	1e08a <AppDiscServiceChanged+0x5e>
  appDiscCb_t *pAppDiscCb = &appDiscCb[pMsg->hdr.param - 1];
   1e058:	8805      	ldrh	r5, [r0, #0]
    return;
  }

  /* if we don't have any stored handles within service changed handle range, ignore */
  foundHdl = FALSE;
  if (pAppDiscCb->pHdlList != NULL)
   1e05a:	4c11      	ldr	r4, [pc, #68]	; (1e0a0 <AppDiscServiceChanged+0x74>)
  appDiscCb_t *pAppDiscCb = &appDiscCb[pMsg->hdr.param - 1];
   1e05c:	1e6b      	subs	r3, r5, #1
  if (pAppDiscCb->pHdlList != NULL)
   1e05e:	eb04 1103 	add.w	r1, r4, r3, lsl #4
   1e062:	0118      	lsls	r0, r3, #4
   1e064:	684b      	ldr	r3, [r1, #4]
   1e066:	b183      	cbz	r3, 1e08a <AppDiscServiceChanged+0x5e>
  {
    pHdl = pAppDiscCb->pHdlList;
    for (i = pAppDiscCb->hdlListLen; i > 0; i--, pHdl++)
   1e068:	7a89      	ldrb	r1, [r1, #10]
   1e06a:	b171      	cbz	r1, 1e08a <AppDiscServiceChanged+0x5e>
   1e06c:	f101 3cff 	add.w	ip, r1, #4294967295
   1e070:	fa5f fc8c 	uxtb.w	ip, ip
   1e074:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
   1e078:	3b02      	subs	r3, #2
    {
      if (*pHdl >= startHdl && *pHdl <= endHdl)
   1e07a:	f833 1f02 	ldrh.w	r1, [r3, #2]!
   1e07e:	4291      	cmp	r1, r2
   1e080:	d301      	bcc.n	1e086 <AppDiscServiceChanged+0x5a>
   1e082:	4571      	cmp	r1, lr
   1e084:	d902      	bls.n	1e08c <AppDiscServiceChanged+0x60>
    for (i = pAppDiscCb->hdlListLen; i > 0; i--, pHdl++)
   1e086:	4563      	cmp	r3, ip
   1e088:	d1f7      	bne.n	1e07a <AppDiscServiceChanged+0x4e>
    return;
  }

  /* Prepare to restart service discovery*/
  appDiscRestartDiscovery((dmConnId_t) pMsg->hdr.param);
}
   1e08a:	bd30      	pop	{r4, r5, pc}
  if (pAppDiscCb->inProgress == APP_DISC_SVC_DISC_IN_PROGRESS)
   1e08c:	1823      	adds	r3, r4, r0
   1e08e:	7adb      	ldrb	r3, [r3, #11]
   1e090:	2b01      	cmp	r3, #1
   1e092:	d0fa      	beq.n	1e08a <AppDiscServiceChanged+0x5e>
  appDiscRestartDiscovery((dmConnId_t) pMsg->hdr.param);
   1e094:	b2e8      	uxtb	r0, r5
}
   1e096:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  appDiscRestartDiscovery((dmConnId_t) pMsg->hdr.param);
   1e09a:	f7ff bcd3 	b.w	1da44 <appDiscRestartDiscovery>
   1e09e:	bf00      	nop
   1e0a0:	10005e90 	.word	0x10005e90

0001e0a4 <AppDiscReadDatabaseHash>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscReadDatabaseHash(dmConnId_t connId)
{
   1e0a4:	b500      	push	{lr}
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];

  /* Security/bonding not used, rely on database hash for cached handles. */
  pAppDiscCb->inProgress = APP_DISC_READ_DBH_IN_PROGRESS;
   1e0a6:	490a      	ldr	r1, [pc, #40]	; (1e0d0 <AppDiscReadDatabaseHash+0x2c>)

  /* Read the database hash. */
  AttcReadByTypeReq(connId, ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
   1e0a8:	4a0a      	ldr	r2, [pc, #40]	; (1e0d4 <AppDiscReadDatabaseHash+0x30>)
  pAppDiscCb->inProgress = APP_DISC_READ_DBH_IN_PROGRESS;
   1e0aa:	eb01 1100 	add.w	r1, r1, r0, lsl #4
{
   1e0ae:	b083      	sub	sp, #12
  pAppDiscCb->inProgress = APP_DISC_READ_DBH_IN_PROGRESS;
   1e0b0:	f04f 0c03 	mov.w	ip, #3
  AttcReadByTypeReq(connId, ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
   1e0b4:	2300      	movs	r3, #0
   1e0b6:	e9cd 2300 	strd	r2, r3, [sp]
  pAppDiscCb->inProgress = APP_DISC_READ_DBH_IN_PROGRESS;
   1e0ba:	f801 cc05 	strb.w	ip, [r1, #-5]
  AttcReadByTypeReq(connId, ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
   1e0be:	2302      	movs	r3, #2
   1e0c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1e0c4:	2101      	movs	r1, #1
   1e0c6:	f7ef fb63 	bl	d790 <AttcReadByTypeReq>
                    (uint8_t *)attGattDbhChUuid, FALSE);
}
   1e0ca:	b003      	add	sp, #12
   1e0cc:	f85d fb04 	ldr.w	pc, [sp], #4
   1e0d0:	10005e90 	.word	0x10005e90
   1e0d4:	00023ee0 	.word	0x00023ee0

0001e0d8 <appNumConns>:
 *
 *  \return Number of connections.
 */
/*************************************************************************************************/
uint8_t appNumConns(uint8_t role)
{
   1e0d8:	b570      	push	{r4, r5, r6, lr}
  appConnCb_t   *pCcb = appConnCb;
  uint8_t       i, j;

  for (i = DM_CONN_MAX, j = 0; i > 0; i--, pCcb++)
  {
    if ((pCcb->connId != DM_CONN_ID_NONE) && (DmConnRole(pCcb->connId) == role))
   1e0da:	4d14      	ldr	r5, [pc, #80]	; (1e12c <appNumConns+0x54>)
   1e0dc:	792c      	ldrb	r4, [r5, #4]
{
   1e0de:	4606      	mov	r6, r0
    if ((pCcb->connId != DM_CONN_ID_NONE) && (DmConnRole(pCcb->connId) == role))
   1e0e0:	b93c      	cbnz	r4, 1e0f2 <appNumConns+0x1a>
   1e0e2:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
   1e0e6:	b978      	cbnz	r0, 1e108 <appNumConns+0x30>
   1e0e8:	f895 0044 	ldrb.w	r0, [r5, #68]	; 0x44
   1e0ec:	b9b0      	cbnz	r0, 1e11c <appNumConns+0x44>
      j++;
    }
  }

  return j;
}
   1e0ee:	4620      	mov	r0, r4
   1e0f0:	bd70      	pop	{r4, r5, r6, pc}
    if ((pCcb->connId != DM_CONN_ID_NONE) && (DmConnRole(pCcb->connId) == role))
   1e0f2:	4620      	mov	r0, r4
   1e0f4:	f7fa fc40 	bl	18978 <DmConnRole>
  for (i = DM_CONN_MAX, j = 0; i > 0; i--, pCcb++)
   1e0f8:	1a34      	subs	r4, r6, r0
    if ((pCcb->connId != DM_CONN_ID_NONE) && (DmConnRole(pCcb->connId) == role))
   1e0fa:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
  for (i = DM_CONN_MAX, j = 0; i > 0; i--, pCcb++)
   1e0fe:	fab4 f484 	clz	r4, r4
   1e102:	0964      	lsrs	r4, r4, #5
    if ((pCcb->connId != DM_CONN_ID_NONE) && (DmConnRole(pCcb->connId) == role))
   1e104:	2800      	cmp	r0, #0
   1e106:	d0ef      	beq.n	1e0e8 <appNumConns+0x10>
   1e108:	f7fa fc36 	bl	18978 <DmConnRole>
   1e10c:	4286      	cmp	r6, r0
   1e10e:	f895 0044 	ldrb.w	r0, [r5, #68]	; 0x44
      j++;
   1e112:	bf04      	itt	eq
   1e114:	3401      	addeq	r4, #1
   1e116:	b2e4      	uxtbeq	r4, r4
    if ((pCcb->connId != DM_CONN_ID_NONE) && (DmConnRole(pCcb->connId) == role))
   1e118:	2800      	cmp	r0, #0
   1e11a:	d0e8      	beq.n	1e0ee <appNumConns+0x16>
   1e11c:	f7fa fc2c 	bl	18978 <DmConnRole>
   1e120:	42b0      	cmp	r0, r6
      j++;
   1e122:	bf04      	itt	eq
   1e124:	3401      	addeq	r4, #1
   1e126:	b2e4      	uxtbeq	r4, r4
}
   1e128:	4620      	mov	r0, r4
   1e12a:	bd70      	pop	{r4, r5, r6, pc}
   1e12c:	10005ecc 	.word	0x10005ecc

0001e130 <AppCheckBonded>:
/*************************************************************************************************/
bool_t AppCheckBonded(dmConnId_t connId)
{
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return appConnCb[connId - 1].bonded;
   1e130:	4b02      	ldr	r3, [pc, #8]	; (1e13c <AppCheckBonded+0xc>)
   1e132:	eb03 1040 	add.w	r0, r3, r0, lsl #5
}
   1e136:	f810 0c1b 	ldrb.w	r0, [r0, #-27]
   1e13a:	4770      	bx	lr
   1e13c:	10005ecc 	.word	0x10005ecc

0001e140 <AppHandlerInit>:
 *  \return None.
 */
/*************************************************************************************************/
void AppHandlerInit(wsfHandlerId_t handlerId)
{
  appHandlerId = handlerId;
   1e140:	4b01      	ldr	r3, [pc, #4]	; (1e148 <AppHandlerInit+0x8>)
   1e142:	7018      	strb	r0, [r3, #0]

  AppDbInit();
   1e144:	f7f6 b972 	b.w	1442c <AppDbInit>
   1e148:	10005f2c 	.word	0x10005f2c

0001e14c <AppHandler>:
 *  \return None.
 */
/*************************************************************************************************/
void AppHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
  if (pMsg != NULL)
   1e14c:	b1b1      	cbz	r1, 1e17c <AppHandler+0x30>
{
   1e14e:	b510      	push	{r4, lr}
   1e150:	460c      	mov	r4, r1
  {
    APP_TRACE_INFO1("App got evt %d", pMsg->event);
   1e152:	4813      	ldr	r0, [pc, #76]	; (1e1a0 <AppHandler+0x54>)
   1e154:	7889      	ldrb	r1, [r1, #2]
   1e156:	f7f5 fedd 	bl	13f14 <WsfTrace>

    if (pMsg->event >= APP_MASTER_MSG_START)
   1e15a:	78a3      	ldrb	r3, [r4, #2]
   1e15c:	2b1f      	cmp	r3, #31
   1e15e:	d905      	bls.n	1e16c <AppHandler+0x20>
    {
      /* pass event to master handler */
      (*appCb.masterCback)(pMsg);
   1e160:	4b10      	ldr	r3, [pc, #64]	; (1e1a4 <AppHandler+0x58>)
   1e162:	4620      	mov	r0, r4
   1e164:	685b      	ldr	r3, [r3, #4]
    if (event & APP_BTN_DOWN_EVT)
    {
      AppUiBtnPressed();
    }
  }
}
   1e166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (*appCb.masterCback)(pMsg);
   1e16a:	4718      	bx	r3
    else if (pMsg->event >= APP_SLAVE_MSG_START)
   1e16c:	2b0f      	cmp	r3, #15
   1e16e:	d908      	bls.n	1e182 <AppHandler+0x36>
      (*appCb.slaveCback)(pMsg);
   1e170:	4b0c      	ldr	r3, [pc, #48]	; (1e1a4 <AppHandler+0x58>)
   1e172:	4620      	mov	r0, r4
   1e174:	681b      	ldr	r3, [r3, #0]
}
   1e176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (*appCb.slaveCback)(pMsg);
   1e17a:	4718      	bx	r3
    if (event & APP_BTN_DOWN_EVT)
   1e17c:	06c3      	lsls	r3, r0, #27
   1e17e:	d404      	bmi.n	1e18a <AppHandler+0x3e>
   1e180:	4770      	bx	lr
  switch(pMsg->event)
   1e182:	b14b      	cbz	r3, 1e198 <AppHandler+0x4c>
   1e184:	2b01      	cmp	r3, #1
   1e186:	d002      	beq.n	1e18e <AppHandler+0x42>
}
   1e188:	bd10      	pop	{r4, pc}
      AppUiBtnPressed();
   1e18a:	f7f6 bc59 	b.w	14a40 <AppUiBtnPressed>
      appUiTimerExpired(pMsg);
   1e18e:	4620      	mov	r0, r4
}
   1e190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      appUiTimerExpired(pMsg);
   1e194:	f7f6 bc4a 	b.w	14a2c <appUiTimerExpired>
}
   1e198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      appUiBtnPoll();
   1e19c:	f7f6 bc48 	b.w	14a30 <appUiBtnPoll>
   1e1a0:	00025768 	.word	0x00025768
   1e1a4:	10005ec4 	.word	0x10005ec4

0001e1a8 <AppHandlePasskey>:
void AppHandlePasskey(dmSecAuthReqIndEvt_t *pAuthReq)
{
  uint32_t passkey;
  uint8_t  buf[SMP_PIN_LEN];

  if (pAuthReq->display)
   1e1a8:	7943      	ldrb	r3, [r0, #5]
   1e1aa:	b30b      	cbz	r3, 1e1f0 <AppHandlePasskey+0x48>
{
   1e1ac:	b510      	push	{r4, lr}
   1e1ae:	b082      	sub	sp, #8
   1e1b0:	4604      	mov	r4, r0
  {
    /* generate random passkey, limit to 6 digit max */
    SecRand((uint8_t *) &passkey, sizeof(uint32_t));
   1e1b2:	2104      	movs	r1, #4
   1e1b4:	a801      	add	r0, sp, #4
   1e1b6:	f7f1 ff6b 	bl	10090 <SecRand>
    passkey %= 1000000;
   1e1ba:	9a01      	ldr	r2, [sp, #4]
   1e1bc:	4b0e      	ldr	r3, [pc, #56]	; (1e1f8 <AppHandlePasskey+0x50>)
   1e1be:	490f      	ldr	r1, [pc, #60]	; (1e1fc <AppHandlePasskey+0x54>)
   1e1c0:	fba3 0302 	umull	r0, r3, r3, r2
   1e1c4:	0c9b      	lsrs	r3, r3, #18
   1e1c6:	fb01 2313 	mls	r3, r1, r3, r2

    /* convert to byte buffer */
    buf[0] = UINT32_TO_BYTE0(passkey);
    buf[1] = UINT32_TO_BYTE1(passkey);
   1e1ca:	0a19      	lsrs	r1, r3, #8
    buf[2] = UINT32_TO_BYTE2(passkey);

    /* send authentication response to DM */
    DmSecAuthRsp((dmConnId_t) pAuthReq->hdr.param, SMP_PIN_LEN, buf);
   1e1cc:	7820      	ldrb	r0, [r4, #0]
    buf[1] = UINT32_TO_BYTE1(passkey);
   1e1ce:	f88d 1001 	strb.w	r1, [sp, #1]
    buf[2] = UINT32_TO_BYTE2(passkey);
   1e1d2:	0c1c      	lsrs	r4, r3, #16
    DmSecAuthRsp((dmConnId_t) pAuthReq->hdr.param, SMP_PIN_LEN, buf);
   1e1d4:	466a      	mov	r2, sp
   1e1d6:	2103      	movs	r1, #3
    passkey %= 1000000;
   1e1d8:	9301      	str	r3, [sp, #4]
    buf[0] = UINT32_TO_BYTE0(passkey);
   1e1da:	f88d 3000 	strb.w	r3, [sp]
    buf[2] = UINT32_TO_BYTE2(passkey);
   1e1de:	f88d 4002 	strb.w	r4, [sp, #2]
    DmSecAuthRsp((dmConnId_t) pAuthReq->hdr.param, SMP_PIN_LEN, buf);
   1e1e2:	f7fb f8cd 	bl	19380 <DmSecAuthRsp>

    /* display passkey */
    AppUiDisplayPasskey(passkey);
   1e1e6:	9801      	ldr	r0, [sp, #4]
   1e1e8:	f7f6 fc0e 	bl	14a08 <AppUiDisplayPasskey>
  else
  {
    /* prompt user to enter passkey */
    AppUiAction(APP_UI_PASSKEY_PROMPT);
  }
}
   1e1ec:	b002      	add	sp, #8
   1e1ee:	bd10      	pop	{r4, pc}
    AppUiAction(APP_UI_PASSKEY_PROMPT);
   1e1f0:	200e      	movs	r0, #14
   1e1f2:	f7f6 bb55 	b.w	148a0 <AppUiAction>
   1e1f6:	bf00      	nop
   1e1f8:	431bde83 	.word	0x431bde83
   1e1fc:	000f4240 	.word	0x000f4240

0001e200 <AppHandleNumericComparison>:
*
*  \return None.
*/
/*************************************************************************************************/
void AppHandleNumericComparison(dmSecCnfIndEvt_t *pCnfInd)
{
   1e200:	b510      	push	{r4, lr}
   1e202:	4604      	mov	r4, r0
  uint32_t confirm = DmSecGetCompareValue(pCnfInd->confirm);
   1e204:	3004      	adds	r0, #4
   1e206:	f7fb f95d 	bl	194c4 <DmSecGetCompareValue>

  /* display confirmation value */
  AppUiDisplayConfirmValue(confirm);
   1e20a:	f7f6 fc03 	bl	14a14 <AppUiDisplayConfirmValue>

  /* TODO: Verify that local and peer confirmation values match */
  DmSecCompareRsp((dmConnId_t)pCnfInd->hdr.param, TRUE);
   1e20e:	7820      	ldrb	r0, [r4, #0]
   1e210:	2101      	movs	r1, #1
}
   1e212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  DmSecCompareRsp((dmConnId_t)pCnfInd->hdr.param, TRUE);
   1e216:	f7fb b939 	b.w	1948c <DmSecCompareRsp>
   1e21a:	bf00      	nop

0001e21c <AppConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppConnClose(dmConnId_t connId)
{
   1e21c:	4601      	mov	r1, r0
  DmConnClose(DM_CLIENT_ID_APP, connId, HCI_ERR_REMOTE_TERMINATED);
   1e21e:	2213      	movs	r2, #19
   1e220:	2003      	movs	r0, #3
   1e222:	f7fa ba1f 	b.w	18664 <DmConnClose>
   1e226:	bf00      	nop

0001e228 <AppConnIsOpen>:
  appConnCb_t   *pCcb = appConnCb;
  uint8_t       i;

  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
  {
    if (pCcb->connId != DM_CONN_ID_NONE)
   1e228:	4b04      	ldr	r3, [pc, #16]	; (1e23c <AppConnIsOpen+0x14>)
   1e22a:	7918      	ldrb	r0, [r3, #4]
   1e22c:	b920      	cbnz	r0, 1e238 <AppConnIsOpen+0x10>
   1e22e:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
   1e232:	b908      	cbnz	r0, 1e238 <AppConnIsOpen+0x10>
   1e234:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
      return pCcb->connId;
    }
  }

  return DM_CONN_ID_NONE;
}
   1e238:	4770      	bx	lr
   1e23a:	bf00      	nop
   1e23c:	10005ecc 	.word	0x10005ecc

0001e240 <AppDbGetHdl>:
 *  \return Database record handle or APP_DB_HDL_NONE.
 */
/*************************************************************************************************/
appDbHdl_t AppDbGetHdl(dmConnId_t connId)
{
  return appConnCb[connId-1].dbHdl;
   1e240:	4b02      	ldr	r3, [pc, #8]	; (1e24c <AppDbGetHdl+0xc>)
   1e242:	eb03 1040 	add.w	r0, r3, r0, lsl #5
}
   1e246:	f850 0c20 	ldr.w	r0, [r0, #-32]
   1e24a:	4770      	bx	lr
   1e24c:	10005ecc 	.word	0x10005ecc

0001e250 <AppAddDevToResList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppAddDevToResList(dmEvt_t *pMsg, dmConnId_t connId)
{
   1e250:	b570      	push	{r4, r5, r6, lr}
  dmSecKey_t *pPeerKey;
  appDbHdl_t hdl = appConnCb[connId - 1].dbHdl;
   1e252:	4b12      	ldr	r3, [pc, #72]	; (1e29c <AppAddDevToResList+0x4c>)
   1e254:	eb03 1141 	add.w	r1, r3, r1, lsl #5
{
   1e258:	b082      	sub	sp, #8
  appDbHdl_t hdl = appConnCb[connId - 1].dbHdl;
   1e25a:	f851 5c20 	ldr.w	r5, [r1, #-32]
{
   1e25e:	4604      	mov	r4, r0

  /* if LL Privacy is supported and the peer device has distributed its IRK */
  if (HciLlPrivacySupported() && ((pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL))!= NULL))
   1e260:	f7f4 f890 	bl	12384 <HciLlPrivacySupported>
   1e264:	b908      	cbnz	r0, 1e26a <AppAddDevToResList+0x1a>
    /* add peer device to resolving list. If all-zero local or peer IRK is used then
       LL will only use or accept local or peer identity address respectively. */
    DmPrivAddDevToResList(pPeerKey->irk.addrType, pPeerKey->irk.bdAddr, pPeerKey->irk.key,
                          DmSecGetLocalIrk(), TRUE, pMsg->hdr.param);
  }
}
   1e266:	b002      	add	sp, #8
   1e268:	bd70      	pop	{r4, r5, r6, pc}
  if (HciLlPrivacySupported() && ((pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL))!= NULL))
   1e26a:	4628      	mov	r0, r5
   1e26c:	2200      	movs	r2, #0
   1e26e:	2104      	movs	r1, #4
   1e270:	f7f6 f9f0 	bl	14654 <AppDbGetKey>
   1e274:	4605      	mov	r5, r0
   1e276:	2800      	cmp	r0, #0
   1e278:	d0f5      	beq.n	1e266 <AppAddDevToResList+0x16>
    DmPrivAddDevToResList(pPeerKey->irk.addrType, pPeerKey->irk.bdAddr, pPeerKey->irk.key,
   1e27a:	7d86      	ldrb	r6, [r0, #22]
   1e27c:	f7fb f8bc 	bl	193f8 <DmSecGetLocalIrk>
   1e280:	8821      	ldrh	r1, [r4, #0]
   1e282:	2201      	movs	r2, #1
   1e284:	e9cd 2100 	strd	r2, r1, [sp]
   1e288:	4603      	mov	r3, r0
   1e28a:	462a      	mov	r2, r5
   1e28c:	f105 0110 	add.w	r1, r5, #16
   1e290:	4630      	mov	r0, r6
   1e292:	f7fa ff33 	bl	190fc <DmPrivAddDevToResList>
}
   1e296:	b002      	add	sp, #8
   1e298:	bd70      	pop	{r4, r5, r6, pc}
   1e29a:	bf00      	nop
   1e29c:	10005ecc 	.word	0x10005ecc

0001e2a0 <AppClearAllBondingInfo>:
 *
 *          Otherwise, clearing the resolving list in the Controller may fail.
 */
/*************************************************************************************************/
void AppClearAllBondingInfo(void)
{
   1e2a0:	b508      	push	{r3, lr}
  APP_TRACE_INFO0("Clear bonding info");
   1e2a2:	480b      	ldr	r0, [pc, #44]	; (1e2d0 <AppClearAllBondingInfo+0x30>)
   1e2a4:	f7f5 fe36 	bl	13f14 <WsfTrace>

  /* clear bonded device info */
  AppDbDeleteAllRecords();
   1e2a8:	f7f6 f94c 	bl	14544 <AppDbDeleteAllRecords>

  /* if LL Privacy is supported */
  if (HciLlPrivacySupported())
   1e2ac:	f7f4 f86a 	bl	12384 <HciLlPrivacySupported>
   1e2b0:	b900      	cbnz	r0, 1e2b4 <AppClearAllBondingInfo+0x14>
    }

    /* clear resolving list */
    DmPrivClearResList();
  }
}
   1e2b2:	bd08      	pop	{r3, pc}
    if (DmLlPrivEnabled())
   1e2b4:	f7fa fd7c 	bl	18db0 <DmLlPrivEnabled>
   1e2b8:	b918      	cbnz	r0, 1e2c2 <AppClearAllBondingInfo+0x22>
}
   1e2ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    DmPrivClearResList();
   1e2be:	f7fa bf4d 	b.w	1915c <DmPrivClearResList>
      DmPrivSetAddrResEnable(FALSE);
   1e2c2:	2000      	movs	r0, #0
   1e2c4:	f7fa ff5c 	bl	19180 <DmPrivSetAddrResEnable>
}
   1e2c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    DmPrivClearResList();
   1e2cc:	f7fa bf46 	b.w	1915c <DmPrivClearResList>
   1e2d0:	00025778 	.word	0x00025778

0001e2d4 <AppUpdatePrivacyMode>:
 */
/*************************************************************************************************/
void AppUpdatePrivacyMode(appDbHdl_t hdl)
{
  /* if peer device's been added to resolving list but RPA Only attribute not found on peer device */
  if ((hdl != APP_DB_HDL_NONE) && AppDbGetPeerAddedToRl(hdl) && !AppDbGetPeerRpao(hdl))
   1e2d4:	b128      	cbz	r0, 1e2e2 <AppUpdatePrivacyMode+0xe>
{
   1e2d6:	b538      	push	{r3, r4, r5, lr}
   1e2d8:	4604      	mov	r4, r0
  if ((hdl != APP_DB_HDL_NONE) && AppDbGetPeerAddedToRl(hdl) && !AppDbGetPeerRpao(hdl))
   1e2da:	f7f6 fad1 	bl	14880 <AppDbGetPeerAddedToRl>
   1e2de:	b908      	cbnz	r0, 1e2e4 <AppUpdatePrivacyMode+0x10>

      /* make sure resolving list flag cleared */
      AppDbSetPeerAddedToRl(hdl, FALSE);
    }
  }
}
   1e2e0:	bd38      	pop	{r3, r4, r5, pc}
   1e2e2:	4770      	bx	lr
  if ((hdl != APP_DB_HDL_NONE) && AppDbGetPeerAddedToRl(hdl) && !AppDbGetPeerRpao(hdl))
   1e2e4:	4620      	mov	r0, r4
   1e2e6:	f7f6 fad3 	bl	14890 <AppDbGetPeerRpao>
   1e2ea:	4605      	mov	r5, r0
   1e2ec:	2800      	cmp	r0, #0
   1e2ee:	d1f7      	bne.n	1e2e0 <AppUpdatePrivacyMode+0xc>
    dmSecKey_t *pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL);
   1e2f0:	4602      	mov	r2, r0
   1e2f2:	2104      	movs	r1, #4
   1e2f4:	4620      	mov	r0, r4
   1e2f6:	f7f6 f9ad 	bl	14654 <AppDbGetKey>
    if (pPeerKey != NULL)
   1e2fa:	2800      	cmp	r0, #0
   1e2fc:	d0f0      	beq.n	1e2e0 <AppUpdatePrivacyMode+0xc>
      DmPrivSetPrivacyMode(pPeerKey->irk.addrType, pPeerKey->irk.bdAddr, DM_PRIV_MODE_DEVICE);
   1e2fe:	f100 0110 	add.w	r1, r0, #16
   1e302:	2201      	movs	r2, #1
   1e304:	7d80      	ldrb	r0, [r0, #22]
   1e306:	f7fa ff51 	bl	191ac <DmPrivSetPrivacyMode>
      AppDbSetPeerAddedToRl(hdl, FALSE);
   1e30a:	4629      	mov	r1, r5
   1e30c:	4620      	mov	r0, r4
}
   1e30e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      AppDbSetPeerAddedToRl(hdl, FALSE);
   1e312:	f7f6 bab9 	b.w	14888 <AppDbSetPeerAddedToRl>
   1e316:	bf00      	nop

0001e318 <appServerCsfWriteCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appServerCsfWriteCback(dmConnId_t connId, uint8_t changeAwareState, uint8_t *pCsf)
{
   1e318:	b538      	push	{r3, r4, r5, lr}
   1e31a:	460c      	mov	r4, r1
   1e31c:	4615      	mov	r5, r2
  appDbHdl_t dbHdl;

  if ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   1e31e:	f7ff ff8f 	bl	1e240 <AppDbGetHdl>
   1e322:	b128      	cbz	r0, 1e330 <appServerCsfWriteCback+0x18>
  {
    /* store update in device database */
    AppDbSetCsfRecord(dbHdl,  changeAwareState, pCsf);
   1e324:	462a      	mov	r2, r5
   1e326:	4621      	mov	r1, r4
  }
}
   1e328:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    AppDbSetCsfRecord(dbHdl,  changeAwareState, pCsf);
   1e32c:	f7f6 ba46 	b.w	147bc <AppDbSetCsfRecord>
}
   1e330:	bd38      	pop	{r3, r4, r5, pc}
   1e332:	bf00      	nop

0001e334 <AppServerConnCback>:
{
   1e334:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   1e336:	7883      	ldrb	r3, [r0, #2]
  dmConnId_t  connId = (dmConnId_t) pDmEvt->hdr.param;
   1e338:	7804      	ldrb	r4, [r0, #0]
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   1e33a:	2b27      	cmp	r3, #39	; 0x27
{
   1e33c:	b083      	sub	sp, #12
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   1e33e:	d023      	beq.n	1e388 <AppServerConnCback+0x54>
  else if (pDmEvt->hdr.event == DM_SEC_PAIR_CMPL_IND)
   1e340:	2b2a      	cmp	r3, #42	; 0x2a
   1e342:	d003      	beq.n	1e34c <AppServerConnCback+0x18>
  else if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
   1e344:	2b28      	cmp	r3, #40	; 0x28
   1e346:	d042      	beq.n	1e3ce <AppServerConnCback+0x9a>
}
   1e348:	b003      	add	sp, #12
   1e34a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (bonded && (AppCheckBonded(connId) == FALSE) &&
   1e34c:	7903      	ldrb	r3, [r0, #4]
   1e34e:	07db      	lsls	r3, r3, #31
   1e350:	d450      	bmi.n	1e3f4 <AppServerConnCback+0xc0>
  if (((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE) &&
   1e352:	4620      	mov	r0, r4
   1e354:	f7ff ff74 	bl	1e240 <AppDbGetHdl>
   1e358:	4605      	mov	r5, r0
   1e35a:	2800      	cmp	r0, #0
   1e35c:	d0f4      	beq.n	1e348 <AppServerConnCback+0x14>
      ((pPeerKey = AppDbGetKey(dbHdl, DM_KEY_CSRK, NULL)) != NULL))
   1e35e:	2108      	movs	r1, #8
   1e360:	2200      	movs	r2, #0
   1e362:	f7f6 f977 	bl	14654 <AppDbGetKey>
  if (((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE) &&
   1e366:	4601      	mov	r1, r0
   1e368:	2800      	cmp	r0, #0
   1e36a:	d0ed      	beq.n	1e348 <AppServerConnCback+0x14>
    AttsSetCsrk(connId, pPeerKey->csrk.key, FALSE);
   1e36c:	2200      	movs	r2, #0
   1e36e:	4620      	mov	r0, r4
   1e370:	f7f1 f918 	bl	f5a4 <AttsSetCsrk>
    AttsSetSignCounter(connId, AppDbGetPeerSignCounter(dbHdl));
   1e374:	4628      	mov	r0, r5
   1e376:	f7f6 fa7b 	bl	14870 <AppDbGetPeerSignCounter>
   1e37a:	4601      	mov	r1, r0
   1e37c:	4620      	mov	r0, r4
}
   1e37e:	b003      	add	sp, #12
   1e380:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    AttsSetSignCounter(connId, AppDbGetPeerSignCounter(dbHdl));
   1e384:	f7f1 b918 	b.w	f5b8 <AttsSetSignCounter>
    if ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   1e388:	4620      	mov	r0, r4
   1e38a:	f7ff ff59 	bl	1e240 <AppDbGetHdl>
   1e38e:	4605      	mov	r5, r0
   1e390:	2800      	cmp	r0, #0
   1e392:	d050      	beq.n	1e436 <AppServerConnCback+0x102>
      AppDbGetCsfRecord(dbHdl, &changeAwareState, &pCsf);
   1e394:	aa01      	add	r2, sp, #4
   1e396:	f10d 0103 	add.w	r1, sp, #3
   1e39a:	f7f6 fa09 	bl	147b0 <AppDbGetCsfRecord>
      AttsCsfConnOpen(connId, changeAwareState, pCsf);
   1e39e:	9a01      	ldr	r2, [sp, #4]
   1e3a0:	f89d 1003 	ldrb.w	r1, [sp, #3]
   1e3a4:	4620      	mov	r0, r4
   1e3a6:	f7ef fc5b 	bl	dc60 <AttsCsfConnOpen>
      AttsCccInitTable(connId, AppDbGetCccTbl(dbHdl));
   1e3aa:	4628      	mov	r0, r5
   1e3ac:	f7f6 f9f8 	bl	147a0 <AppDbGetCccTbl>
   1e3b0:	4601      	mov	r1, r0
   1e3b2:	4620      	mov	r0, r4
   1e3b4:	f7ef fae2 	bl	d97c <AttsCccInitTable>
      if (changeAwareState == ATTS_CLIENT_CHANGE_UNAWARE)
   1e3b8:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1e3bc:	2b03      	cmp	r3, #3
   1e3be:	d1c8      	bne.n	1e352 <AppServerConnCback+0x1e>
        GattSendServiceChangedInd(connId, ATT_HANDLE_START, ATT_HANDLE_MAX);
   1e3c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1e3c4:	2101      	movs	r1, #1
   1e3c6:	4620      	mov	r0, r4
   1e3c8:	f7f6 fb70 	bl	14aac <GattSendServiceChangedInd>
   1e3cc:	e7c1      	b.n	1e352 <AppServerConnCback+0x1e>
    AttsCccClearTable(connId);
   1e3ce:	4620      	mov	r0, r4
   1e3d0:	f7ef fb2c 	bl	da2c <AttsCccClearTable>
    if ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   1e3d4:	4620      	mov	r0, r4
   1e3d6:	f7ff ff33 	bl	1e240 <AppDbGetHdl>
   1e3da:	4605      	mov	r5, r0
   1e3dc:	2800      	cmp	r0, #0
   1e3de:	d0b3      	beq.n	1e348 <AppServerConnCback+0x14>
      AppDbSetPeerSignCounter(dbHdl, AttsGetSignCounter(connId));
   1e3e0:	4620      	mov	r0, r4
   1e3e2:	f7f1 f8f1 	bl	f5c8 <AttsGetSignCounter>
   1e3e6:	4601      	mov	r1, r0
   1e3e8:	4628      	mov	r0, r5
}
   1e3ea:	b003      	add	sp, #12
   1e3ec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      AppDbSetPeerSignCounter(dbHdl, AttsGetSignCounter(connId));
   1e3f0:	f7f6 ba42 	b.w	14878 <AppDbSetPeerSignCounter>
    if (bonded && (AppCheckBonded(connId) == FALSE) &&
   1e3f4:	4620      	mov	r0, r4
   1e3f6:	f7ff fe9b 	bl	1e130 <AppCheckBonded>
   1e3fa:	4605      	mov	r5, r0
   1e3fc:	2800      	cmp	r0, #0
   1e3fe:	d1a8      	bne.n	1e352 <AppServerConnCback+0x1e>
        ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE))
   1e400:	4620      	mov	r0, r4
   1e402:	f7ff ff1d 	bl	1e240 <AppDbGetHdl>
    if (bonded && (AppCheckBonded(connId) == FALSE) &&
   1e406:	4607      	mov	r7, r0
   1e408:	2800      	cmp	r0, #0
   1e40a:	d0a2      	beq.n	1e352 <AppServerConnCback+0x1e>
      tableLen = AttsGetCccTableLen();
   1e40c:	f7ef fb48 	bl	daa0 <AttsGetCccTableLen>
      for (idx = 0; idx < tableLen; idx++)
   1e410:	4606      	mov	r6, r0
   1e412:	b1d0      	cbz	r0, 1e44a <AppServerConnCback+0x116>
   1e414:	4629      	mov	r1, r5
   1e416:	e003      	b.n	1e420 <AppServerConnCback+0xec>
   1e418:	3501      	adds	r5, #1
   1e41a:	b2e9      	uxtb	r1, r5
   1e41c:	428e      	cmp	r6, r1
   1e41e:	d914      	bls.n	1e44a <AppServerConnCback+0x116>
        if ((cccValue = AttsCccGet(connId, idx)) != 0)
   1e420:	4620      	mov	r0, r4
   1e422:	f7ef fb17 	bl	da54 <AttsCccGet>
   1e426:	2800      	cmp	r0, #0
   1e428:	d0f6      	beq.n	1e418 <AppServerConnCback+0xe4>
          AppDbSetCccTblValue(dbHdl, idx, cccValue);
   1e42a:	4602      	mov	r2, r0
   1e42c:	b2a9      	uxth	r1, r5
   1e42e:	4638      	mov	r0, r7
   1e430:	f7f6 f9b8 	bl	147a4 <AppDbSetCccTblValue>
   1e434:	e7f0      	b.n	1e418 <AppServerConnCback+0xe4>
      AttsCccInitTable(connId, NULL);
   1e436:	4601      	mov	r1, r0
   1e438:	4620      	mov	r0, r4
   1e43a:	f7ef fa9f 	bl	d97c <AttsCccInitTable>
      AttsCsfConnOpen(connId, TRUE, NULL);
   1e43e:	462a      	mov	r2, r5
   1e440:	2101      	movs	r1, #1
   1e442:	4620      	mov	r0, r4
   1e444:	f7ef fc0c 	bl	dc60 <AttsCsfConnOpen>
   1e448:	e783      	b.n	1e352 <AppServerConnCback+0x1e>
      AttsCsfGetFeatures(connId, csf, sizeof(csf));
   1e44a:	a901      	add	r1, sp, #4
   1e44c:	2201      	movs	r2, #1
   1e44e:	4620      	mov	r0, r4
   1e450:	f7ef fc44 	bl	dcdc <AttsCsfGetFeatures>
      AppDbSetCsfRecord(dbHdl, AttsCsfGetChangeAwareState(connId), csf);
   1e454:	4620      	mov	r0, r4
   1e456:	f7ef fc4f 	bl	dcf8 <AttsCsfGetChangeAwareState>
   1e45a:	aa01      	add	r2, sp, #4
   1e45c:	4601      	mov	r1, r0
   1e45e:	4638      	mov	r0, r7
   1e460:	f7f6 f9ac 	bl	147bc <AppDbSetCsfRecord>
   1e464:	e775      	b.n	1e352 <AppServerConnCback+0x1e>
   1e466:	bf00      	nop

0001e468 <AppServerProcAttMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppServerProcAttMsg(wsfMsgHdr_t *pMsg)
{
   1e468:	b510      	push	{r4, lr}
  switch(pMsg->event)
   1e46a:	7883      	ldrb	r3, [r0, #2]
   1e46c:	2b0f      	cmp	r3, #15
{
   1e46e:	4604      	mov	r4, r0
  switch(pMsg->event)
   1e470:	d021      	beq.n	1e4b6 <AppServerProcAttMsg+0x4e>
   1e472:	2b11      	cmp	r3, #17
   1e474:	d122      	bne.n	1e4bc <AppServerProcAttMsg+0x54>
  uint8_t *pCurrentHash = AppDbGetDbHash();
   1e476:	f7f6 f9b7 	bl	147e8 <AppDbGetDbHash>
    if (memcmp(pMsg->pValue, pCurrentHash, ATT_DATABASE_HASH_LEN))
   1e47a:	6864      	ldr	r4, [r4, #4]
  if (pCurrentHash != NULL)
   1e47c:	4601      	mov	r1, r0
   1e47e:	b120      	cbz	r0, 1e48a <AppServerProcAttMsg+0x22>
    if (memcmp(pMsg->pValue, pCurrentHash, ATT_DATABASE_HASH_LEN))
   1e480:	2210      	movs	r2, #16
   1e482:	4620      	mov	r0, r4
   1e484:	f002 ffb0 	bl	213e8 <memcmp>
   1e488:	b1c0      	cbz	r0, 1e4bc <AppServerProcAttMsg+0x54>
    AppDbSetDbHash(pMsg->pValue);
   1e48a:	4620      	mov	r0, r4
   1e48c:	f7f6 f9b0 	bl	147f0 <AppDbSetDbHash>
    AppDbSetClientsChangeAwareState(APP_DB_HDL_NONE, ATTS_CLIENT_CHANGE_UNAWARE);
   1e490:	2103      	movs	r1, #3
   1e492:	2000      	movs	r0, #0
   1e494:	f7f6 f99a 	bl	147cc <AppDbSetClientsChangeAwareState>
    AttsCsfSetClientsChangeAwarenessState(DM_CONN_ID_NONE, ATTS_CLIENT_CHANGE_UNAWARE);
   1e498:	2103      	movs	r1, #3
   1e49a:	2000      	movs	r0, #0
   1e49c:	f7ef fbbc 	bl	dc18 <AttsCsfSetClientsChangeAwarenessState>
    APP_TRACE_INFO0("Database hash updated");
   1e4a0:	480e      	ldr	r0, [pc, #56]	; (1e4dc <AppServerProcAttMsg+0x74>)
   1e4a2:	f7f5 fd37 	bl	13f14 <WsfTrace>
      break;

    default:
      break;
  }
}
   1e4a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    GattSendServiceChangedInd(DM_CONN_ID_NONE, ATT_HANDLE_START, ATT_HANDLE_MAX);
   1e4aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1e4ae:	2101      	movs	r1, #1
   1e4b0:	2000      	movs	r0, #0
   1e4b2:	f7f6 bafb 	b.w	14aac <GattSendServiceChangedInd>
  if (pMsg->handle == GATT_SC_HDL)
   1e4b6:	8943      	ldrh	r3, [r0, #10]
   1e4b8:	2b12      	cmp	r3, #18
   1e4ba:	d000      	beq.n	1e4be <AppServerProcAttMsg+0x56>
}
   1e4bc:	bd10      	pop	{r4, pc}
    dmConnId_t  connId = (dmConnId_t)pMsg->hdr.param;
   1e4be:	7804      	ldrb	r4, [r0, #0]
    if ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   1e4c0:	4620      	mov	r0, r4
   1e4c2:	f7ff febd 	bl	1e240 <AppDbGetHdl>
   1e4c6:	b110      	cbz	r0, 1e4ce <AppServerProcAttMsg+0x66>
      AppDbSetClientsChangeAwareState(dbHdl, ATTS_CLIENT_CHANGE_AWARE);
   1e4c8:	2100      	movs	r1, #0
   1e4ca:	f7f6 f97f 	bl	147cc <AppDbSetClientsChangeAwareState>
    AttsCsfSetClientsChangeAwarenessState(connId, ATTS_CLIENT_CHANGE_AWARE);
   1e4ce:	4620      	mov	r0, r4
   1e4d0:	2100      	movs	r1, #0
}
   1e4d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    AttsCsfSetClientsChangeAwarenessState(connId, ATTS_CLIENT_CHANGE_AWARE);
   1e4d6:	f7ef bb9f 	b.w	dc18 <AttsCsfSetClientsChangeAwarenessState>
   1e4da:	bf00      	nop
   1e4dc:	00025790 	.word	0x00025790

0001e4e0 <AppServerInit>:
 */
/*************************************************************************************************/
void AppServerInit(void)
{
  /* register callback with caching state machine */
  AttsCsfRegister(appServerCsfWriteCback);
   1e4e0:	4801      	ldr	r0, [pc, #4]	; (1e4e8 <AppServerInit+0x8>)
   1e4e2:	f7ef bbcd 	b.w	dc80 <AttsCsfRegister>
   1e4e6:	bf00      	nop
   1e4e8:	0001e319 	.word	0x0001e319

0001e4ec <appSetAdvScanDataFrag>:
  uint16_t remainLen;
  uint8_t  *pAdvData;
  bool_t   firstFrag = TRUE;

  /* get data pointer and remaining data length */
  pAdvData = appSlaveCb.pAdvData[advHandle][location];
   1e4ec:	eb01 0380 	add.w	r3, r1, r0, lsl #2
{
   1e4f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  remainLen = appSlaveCb.advDataLen[advHandle][location] - appSlaveCb.advDataOffset[advHandle][location];
   1e4f4:	f103 0210 	add.w	r2, r3, #16
  pAdvData = appSlaveCb.pAdvData[advHandle][location];
   1e4f8:	4e21      	ldr	r6, [pc, #132]	; (1e580 <appSetAdvScanDataFrag+0x94>)
  remainLen = appSlaveCb.advDataLen[advHandle][location] - appSlaveCb.advDataOffset[advHandle][location];
   1e4fa:	f103 0720 	add.w	r7, r3, #32
   1e4fe:	f836 4012 	ldrh.w	r4, [r6, r2, lsl #1]
  pAdvData = appSlaveCb.pAdvData[advHandle][location];
   1e502:	f856 9023 	ldr.w	r9, [r6, r3, lsl #2]
  remainLen = appSlaveCb.advDataLen[advHandle][location] - appSlaveCb.advDataOffset[advHandle][location];
   1e506:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]

  /* if remaing data length > max adv data length supported by Controller */
  if (remainLen > appSlaveCb.maxAdvDataLen[advHandle])
   1e50a:	f100 0228 	add.w	r2, r0, #40	; 0x28
  remainLen = appSlaveCb.advDataLen[advHandle][location] - appSlaveCb.advDataOffset[advHandle][location];
   1e50e:	1ae4      	subs	r4, r4, r3
   1e510:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
   1e514:	b2a4      	uxth	r4, r4
  if (remainLen > appSlaveCb.maxAdvDataLen[advHandle])
   1e516:	4294      	cmp	r4, r2
   1e518:	bf28      	it	cs
   1e51a:	4614      	movcs	r4, r2
{
   1e51c:	b082      	sub	sp, #8
  {
    remainLen = appSlaveCb.maxAdvDataLen[advHandle];
  }

  /* while there remains data to be sent */
  while (remainLen > 0)
   1e51e:	b364      	cbz	r4, 1e57a <appSetAdvScanDataFrag+0x8e>
  {
    /* if remaing data length > max length of extended advertising data (per set adv data command) */
    if (remainLen > HCI_EXT_ADV_DATA_LEN)
   1e520:	2cfb      	cmp	r4, #251	; 0xfb
   1e522:	d91d      	bls.n	1e560 <appSetAdvScanDataFrag+0x74>
   1e524:	4680      	mov	r8, r0
      fragLen = remainLen;
      op = firstFrag ? HCI_ADV_DATA_OP_COMP_FRAG : HCI_ADV_DATA_OP_FRAG_LAST;
    }

    /* send adv data */
    DmAdvSetData(advHandle, op, APP_LOC_2_DM_LOC(location), (uint8_t)fragLen,
   1e526:	f001 0a01 	and.w	sl, r1, #1
   1e52a:	2201      	movs	r2, #1
   1e52c:	4625      	mov	r5, r4
      op = firstFrag ? HCI_ADV_DATA_OP_FRAG_FIRST : HCI_ADV_DATA_OP_FRAG_INTER;
   1e52e:	4611      	mov	r1, r2
      fragLen = HCI_EXT_ADV_DATA_LEN;
   1e530:	24fb      	movs	r4, #251	; 0xfb
    DmAdvSetData(advHandle, op, APP_LOC_2_DM_LOC(location), (uint8_t)fragLen,
   1e532:	eb09 0203 	add.w	r2, r9, r3
   1e536:	9200      	str	r2, [sp, #0]
   1e538:	b2e3      	uxtb	r3, r4
   1e53a:	4652      	mov	r2, sl
   1e53c:	4640      	mov	r0, r8
   1e53e:	f7f9 f9a5 	bl	1788c <DmAdvSetData>
                 &(pAdvData[appSlaveCb.advDataOffset[advHandle][location]]));

    /* store adv data offset */
    appSlaveCb.advDataOffset[advHandle][location] += fragLen;
   1e542:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]

    /* update remaining data length */
    remainLen -= fragLen;
   1e546:	1b2d      	subs	r5, r5, r4
    appSlaveCb.advDataOffset[advHandle][location] += fragLen;
   1e548:	4423      	add	r3, r4
   1e54a:	b29b      	uxth	r3, r3
    remainLen -= fragLen;
   1e54c:	b2ac      	uxth	r4, r5
    appSlaveCb.advDataOffset[advHandle][location] += fragLen;
   1e54e:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    firstFrag = FALSE;
   1e552:	2200      	movs	r2, #0
      op = firstFrag ? HCI_ADV_DATA_OP_COMP_FRAG : HCI_ADV_DATA_OP_FRAG_LAST;
   1e554:	2102      	movs	r1, #2
  while (remainLen > 0)
   1e556:	b184      	cbz	r4, 1e57a <appSetAdvScanDataFrag+0x8e>
    if (remainLen > HCI_EXT_ADV_DATA_LEN)
   1e558:	2cfb      	cmp	r4, #251	; 0xfb
   1e55a:	d8e7      	bhi.n	1e52c <appSetAdvScanDataFrag+0x40>
   1e55c:	4625      	mov	r5, r4
   1e55e:	e7e8      	b.n	1e532 <appSetAdvScanDataFrag+0x46>
    DmAdvSetData(advHandle, op, APP_LOC_2_DM_LOC(location), (uint8_t)fragLen,
   1e560:	444b      	add	r3, r9
   1e562:	9300      	str	r3, [sp, #0]
   1e564:	f001 0201 	and.w	r2, r1, #1
   1e568:	b2e3      	uxtb	r3, r4
   1e56a:	2103      	movs	r1, #3
   1e56c:	f7f9 f98e 	bl	1788c <DmAdvSetData>
    appSlaveCb.advDataOffset[advHandle][location] += fragLen;
   1e570:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   1e574:	4423      	add	r3, r4
   1e576:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
  }
}
   1e57a:	b002      	add	sp, #8
   1e57c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e580:	10005f48 	.word	0x10005f48

0001e584 <appSetAdvScanData>:
{
  uint8_t advLoc;
  uint8_t scanLoc;

  /* get advertising/scan data location based on mode */
  advLoc = APP_MODE_2_ADV_LOC(mode);
   1e584:	0049      	lsls	r1, r1, #1
{
   1e586:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  advLoc = APP_MODE_2_ADV_LOC(mode);
   1e58a:	b2cc      	uxtb	r4, r1
  scanLoc = APP_MODE_2_SCAN_LOC(mode);

  /* set advertising data */
  if (appSlaveCb.advDataOffset[advHandle][advLoc] < appSlaveCb.advDataLen[advHandle][advLoc])
   1e58c:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   1e590:	4d28      	ldr	r5, [pc, #160]	; (1e634 <appSetAdvScanData+0xb0>)
   1e592:	f103 0a20 	add.w	sl, r3, #32
   1e596:	f103 0710 	add.w	r7, r3, #16
   1e59a:	f835 201a 	ldrh.w	r2, [r5, sl, lsl #1]
   1e59e:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
  scanLoc = APP_MODE_2_SCAN_LOC(mode);
   1e5a2:	f104 0801 	add.w	r8, r4, #1
  if (appSlaveCb.advDataOffset[advHandle][advLoc] < appSlaveCb.advDataLen[advHandle][advLoc])
   1e5a6:	429a      	cmp	r2, r3
{
   1e5a8:	4606      	mov	r6, r0
  scanLoc = APP_MODE_2_SCAN_LOC(mode);
   1e5aa:	fa5f f888 	uxtb.w	r8, r8
  if (appSlaveCb.advDataOffset[advHandle][advLoc] < appSlaveCb.advDataLen[advHandle][advLoc])
   1e5ae:	ea4f 0980 	mov.w	r9, r0, lsl #2
   1e5b2:	d325      	bcc.n	1e600 <appSetAdvScanData+0x7c>
  {
    appSetAdvScanDataFrag(advHandle, advLoc);
  }

  /* set scan data */
  if (appSlaveCb.advDataOffset[advHandle][scanLoc] < appSlaveCb.advDataLen[advHandle][scanLoc])
   1e5b4:	eb09 0308 	add.w	r3, r9, r8
   1e5b8:	f103 0220 	add.w	r2, r3, #32
   1e5bc:	3310      	adds	r3, #16
   1e5be:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
   1e5c2:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
   1e5c6:	429a      	cmp	r2, r3
   1e5c8:	d22e      	bcs.n	1e628 <appSetAdvScanData+0xa4>
  {
    appSetAdvScanDataFrag(advHandle, scanLoc);
  }

  /* if all advertising/scan data have been sent */
  if ((appSlaveCb.advDataOffset[advHandle][advLoc] >= appSlaveCb.advDataLen[advHandle][advLoc]) &&
   1e5ca:	444c      	add	r4, r9
    appSetAdvScanDataFrag(advHandle, scanLoc);
   1e5cc:	4641      	mov	r1, r8
   1e5ce:	4630      	mov	r0, r6
   1e5d0:	f7ff ff8c 	bl	1e4ec <appSetAdvScanDataFrag>
  if ((appSlaveCb.advDataOffset[advHandle][advLoc] >= appSlaveCb.advDataLen[advHandle][advLoc]) &&
   1e5d4:	f104 0320 	add.w	r3, r4, #32
   1e5d8:	3410      	adds	r4, #16
   1e5da:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
   1e5de:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   1e5e2:	429a      	cmp	r2, r3
   1e5e4:	d30a      	bcc.n	1e5fc <appSetAdvScanData+0x78>
      (appSlaveCb.advDataOffset[advHandle][scanLoc] >= appSlaveCb.advDataLen[advHandle][scanLoc]))
   1e5e6:	44c8      	add	r8, r9
   1e5e8:	f108 0320 	add.w	r3, r8, #32
   1e5ec:	f108 0810 	add.w	r8, r8, #16
  if ((appSlaveCb.advDataOffset[advHandle][advLoc] >= appSlaveCb.advDataLen[advHandle][advLoc]) &&
   1e5f0:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
   1e5f4:	f835 3018 	ldrh.w	r3, [r5, r8, lsl #1]
   1e5f8:	429a      	cmp	r2, r3
   1e5fa:	d215      	bcs.n	1e628 <appSetAdvScanData+0xa4>
  {
    appSlaveCb.advDataSynced[advHandle] = TRUE;
  }
}
   1e5fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    appSetAdvScanDataFrag(advHandle, advLoc);
   1e600:	4621      	mov	r1, r4
   1e602:	f7ff ff73 	bl	1e4ec <appSetAdvScanDataFrag>
  if (appSlaveCb.advDataOffset[advHandle][scanLoc] < appSlaveCb.advDataLen[advHandle][scanLoc])
   1e606:	eb09 0308 	add.w	r3, r9, r8
   1e60a:	f103 0220 	add.w	r2, r3, #32
   1e60e:	3310      	adds	r3, #16
   1e610:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
   1e614:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
   1e618:	429a      	cmp	r2, r3
   1e61a:	d3d6      	bcc.n	1e5ca <appSetAdvScanData+0x46>
  if ((appSlaveCb.advDataOffset[advHandle][advLoc] >= appSlaveCb.advDataLen[advHandle][advLoc]) &&
   1e61c:	f835 201a 	ldrh.w	r2, [r5, sl, lsl #1]
   1e620:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
   1e624:	429a      	cmp	r2, r3
   1e626:	d3e9      	bcc.n	1e5fc <appSetAdvScanData+0x78>
    appSlaveCb.advDataSynced[advHandle] = TRUE;
   1e628:	4435      	add	r5, r6
   1e62a:	2301      	movs	r3, #1
   1e62c:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
}
   1e630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e634:	10005f48 	.word	0x10005f48

0001e638 <appSlaveProcMsg>:
  appConnCb_t *pCb;

  /* look up app connection control block from DM connection ID */
  pCb = &appConnCb[pMsg->param - 1];

  switch(pMsg->event)
   1e638:	7883      	ldrb	r3, [r0, #2]
   1e63a:	2b10      	cmp	r3, #16
   1e63c:	d000      	beq.n	1e640 <appSlaveProcMsg+0x8>
   1e63e:	4770      	bx	lr
  pCb = &appConnCb[pMsg->param - 1];
   1e640:	8803      	ldrh	r3, [r0, #0]
{
   1e642:	b570      	push	{r4, r5, r6, lr}
  {
    case APP_CONN_UPDATE_TIMEOUT_IND:
      /* Check state to determine if read remote features is needed */
      if (pCb->updateState == APP_CU_STATE_UPDATING)
   1e644:	4e1e      	ldr	r6, [pc, #120]	; (1e6c0 <appSlaveProcMsg+0x88>)
  pCb = &appConnCb[pMsg->param - 1];
   1e646:	3b01      	subs	r3, #1
      if (pCb->updateState == APP_CU_STATE_UPDATING)
   1e648:	eb06 1543 	add.w	r5, r6, r3, lsl #5
   1e64c:	015c      	lsls	r4, r3, #5
   1e64e:	7b6b      	ldrb	r3, [r5, #13]
   1e650:	2b02      	cmp	r3, #2
{
   1e652:	b084      	sub	sp, #16
      if (pCb->updateState == APP_CU_STATE_UPDATING)
   1e654:	d003      	beq.n	1e65e <appSlaveProcMsg+0x26>
      {
        appSlaveConnUpdateTimeout(pMsg, pCb);
      }
      else
      {
        pCb->updateState = APP_CU_STATE_WAIT_FEATURES;
   1e656:	2301      	movs	r3, #1
   1e658:	736b      	strb	r3, [r5, #13]
      break;

    default:
      break;
  }
}
   1e65a:	b004      	add	sp, #16
   1e65c:	bd70      	pop	{r4, r5, r6, pc}
  idle = (DmConnCheckIdle(pCb->connId) == 0);
   1e65e:	7928      	ldrb	r0, [r5, #4]
   1e660:	f7fa f976 	bl	18950 <DmConnCheckIdle>
   1e664:	2800      	cmp	r0, #0
   1e666:	bf0c      	ite	eq
   1e668:	2101      	moveq	r1, #1
   1e66a:	2100      	movne	r1, #0
  if (idle && pCb->connWasIdle)
   1e66c:	d111      	bne.n	1e692 <appSlaveProcMsg+0x5a>
   1e66e:	7aab      	ldrb	r3, [r5, #10]
   1e670:	b17b      	cbz	r3, 1e692 <appSlaveProcMsg+0x5a>
    pCb->attempts++;
   1e672:	7b2b      	ldrb	r3, [r5, #12]
    connSpec.connIntervalMin = pAppUpdateCfg->connIntervalMin;
   1e674:	4a13      	ldr	r2, [pc, #76]	; (1e6c4 <appSlaveProcMsg+0x8c>)
    DmConnUpdate(pCb->connId, &connSpec);
   1e676:	7928      	ldrb	r0, [r5, #4]
    connSpec.connIntervalMin = pAppUpdateCfg->connIntervalMin;
   1e678:	6812      	ldr	r2, [r2, #0]
    pCb->attempts++;
   1e67a:	3301      	adds	r3, #1
   1e67c:	732b      	strb	r3, [r5, #12]
    connSpec.connIntervalMin = pAppUpdateCfg->connIntervalMin;
   1e67e:	e9d2 4201 	ldrd	r4, r2, [r2, #4]
    connSpec.minCeLen = 0;
   1e682:	4b11      	ldr	r3, [pc, #68]	; (1e6c8 <appSlaveProcMsg+0x90>)
   1e684:	9303      	str	r3, [sp, #12]
    DmConnUpdate(pCb->connId, &connSpec);
   1e686:	a901      	add	r1, sp, #4
    connSpec.connIntervalMin = pAppUpdateCfg->connIntervalMin;
   1e688:	e9cd 4201 	strd	r4, r2, [sp, #4]
    DmConnUpdate(pCb->connId, &connSpec);
   1e68c:	f7fa f836 	bl	186fc <DmConnUpdate>
}
   1e690:	e7e3      	b.n	1e65a <appSlaveProcMsg+0x22>
    pCb->connWasIdle = idle;
   1e692:	1933      	adds	r3, r6, r4
  pCb->updateTimer.handlerId = appHandlerId;
   1e694:	4c0d      	ldr	r4, [pc, #52]	; (1e6cc <appSlaveProcMsg+0x94>)
    appConnUpdateTimerStart(pCb->connId);
   1e696:	791a      	ldrb	r2, [r3, #4]
    pCb->connWasIdle = idle;
   1e698:	7299      	strb	r1, [r3, #10]
  appConnCb_t *pCb = &appConnCb[connId - 1];
   1e69a:	1e50      	subs	r0, r2, #1
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   1e69c:	4909      	ldr	r1, [pc, #36]	; (1e6c4 <appSlaveProcMsg+0x8c>)
  pCb->updateTimer.handlerId = appHandlerId;
   1e69e:	eb06 1340 	add.w	r3, r6, r0, lsl #5
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   1e6a2:	6809      	ldr	r1, [r1, #0]
  pCb->updateTimer.msg.param = connId;
   1e6a4:	831a      	strh	r2, [r3, #24]
  pCb->updateTimer.handlerId = appHandlerId;
   1e6a6:	7822      	ldrb	r2, [r4, #0]
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   1e6a8:	6809      	ldr	r1, [r1, #0]
  pCb->updateTimer.handlerId = appHandlerId;
   1e6aa:	771a      	strb	r2, [r3, #28]
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   1e6ac:	4618      	mov	r0, r3
  pCb->updateTimer.msg.event = APP_CONN_UPDATE_TIMEOUT_IND;
   1e6ae:	2210      	movs	r2, #16
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   1e6b0:	4410      	add	r0, r2
  pCb->updateTimer.msg.event = APP_CONN_UPDATE_TIMEOUT_IND;
   1e6b2:	769a      	strb	r2, [r3, #26]
}
   1e6b4:	b004      	add	sp, #16
   1e6b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   1e6ba:	f7f5 bb47 	b.w	13d4c <WsfTimerStartMs>
   1e6be:	bf00      	nop
   1e6c0:	10005ecc 	.word	0x10005ecc
   1e6c4:	10005f44 	.word	0x10005f44
   1e6c8:	ffff0000 	.word	0xffff0000
   1e6cc:	10005f2c 	.word	0x10005f2c

0001e6d0 <appSlaveSecConnOpen>:
{
   1e6d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  pCb->bondByLtk = FALSE;
   1e6d4:	2300      	movs	r3, #0
   1e6d6:	80cb      	strh	r3, [r1, #6]
  pCb->dbHdl = AppDbFindByAddr(pMsg->connOpen.addrType, pMsg->connOpen.peerAddr);
   1e6d8:	f100 060a 	add.w	r6, r0, #10
{
   1e6dc:	460d      	mov	r5, r1
   1e6de:	4604      	mov	r4, r0
  pCb->dbHdl = AppDbFindByAddr(pMsg->connOpen.addrType, pMsg->connOpen.peerAddr);
   1e6e0:	4631      	mov	r1, r6
   1e6e2:	7a40      	ldrb	r0, [r0, #9]
   1e6e4:	f7f5 ff3a 	bl	1455c <AppDbFindByAddr>
   1e6e8:	6028      	str	r0, [r5, #0]
  if ((pCb->dbHdl == NULL) && DM_RAND_ADDR_RPA(pMsg->connOpen.peerAddr, pMsg->connOpen.addrType))
   1e6ea:	b180      	cbz	r0, 1e70e <appSlaveSecConnOpen+0x3e>
  if (pAppSecCfg->initiateSec && AppDbCheckBonded())
   1e6ec:	4d1a      	ldr	r5, [pc, #104]	; (1e758 <appSlaveSecConnOpen+0x88>)
   1e6ee:	682b      	ldr	r3, [r5, #0]
   1e6f0:	791b      	ldrb	r3, [r3, #4]
   1e6f2:	b90b      	cbnz	r3, 1e6f8 <appSlaveSecConnOpen+0x28>
}
   1e6f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pAppSecCfg->initiateSec && AppDbCheckBonded())
   1e6f8:	f7f5 ff0a 	bl	14510 <AppDbCheckBonded>
   1e6fc:	2800      	cmp	r0, #0
   1e6fe:	d0f9      	beq.n	1e6f4 <appSlaveSecConnOpen+0x24>
    DmSecSlaveReq((dmConnId_t) pMsg->hdr.param, pAppSecCfg->auth);
   1e700:	682b      	ldr	r3, [r5, #0]
   1e702:	7820      	ldrb	r0, [r4, #0]
   1e704:	7819      	ldrb	r1, [r3, #0]
}
   1e706:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    DmSecSlaveReq((dmConnId_t) pMsg->hdr.param, pAppSecCfg->auth);
   1e70a:	f7fa bf19 	b.w	19540 <DmSecSlaveReq>
  if ((pCb->dbHdl == NULL) && DM_RAND_ADDR_RPA(pMsg->connOpen.peerAddr, pMsg->connOpen.addrType))
   1e70e:	7a65      	ldrb	r5, [r4, #9]
   1e710:	2d01      	cmp	r5, #1
   1e712:	d1eb      	bne.n	1e6ec <appSlaveSecConnOpen+0x1c>
   1e714:	7be3      	ldrb	r3, [r4, #15]
   1e716:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1e71a:	2b40      	cmp	r3, #64	; 0x40
   1e71c:	d1e6      	bne.n	1e6ec <appSlaveSecConnOpen+0x1c>
  if (appSlaveCb.inProgress)
   1e71e:	f8df 803c 	ldr.w	r8, [pc, #60]	; 1e75c <appSlaveSecConnOpen+0x8c>
   1e722:	f898 7074 	ldrb.w	r7, [r8, #116]	; 0x74
   1e726:	2f00      	cmp	r7, #0
   1e728:	d1e0      	bne.n	1e6ec <appSlaveSecConnOpen+0x1c>
  hdl = AppDbGetNextRecord(APP_DB_HDL_NONE);
   1e72a:	f7f5 feb9 	bl	144a0 <AppDbGetNextRecord>
  if ((hdl != APP_DB_HDL_NONE) && ((pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL)) != NULL))
   1e72e:	4681      	mov	r9, r0
   1e730:	2800      	cmp	r0, #0
   1e732:	d0db      	beq.n	1e6ec <appSlaveSecConnOpen+0x1c>
   1e734:	463a      	mov	r2, r7
   1e736:	2104      	movs	r1, #4
   1e738:	f7f5 ff8c 	bl	14654 <AppDbGetKey>
   1e73c:	2800      	cmp	r0, #0
   1e73e:	d0d5      	beq.n	1e6ec <appSlaveSecConnOpen+0x1c>
    DmPrivResolveAddr(pMsg->connOpen.peerAddr, pPeerKey->irk.key, pMsg->hdr.param);
   1e740:	4601      	mov	r1, r0
   1e742:	8822      	ldrh	r2, [r4, #0]
   1e744:	4630      	mov	r0, r6
   1e746:	f7fa fcb9 	bl	190bc <DmPrivResolveAddr>
    appSlaveCb.dbHdl = hdl;
   1e74a:	f8c8 9070 	str.w	r9, [r8, #112]	; 0x70
    appSlaveCb.inProgress = TRUE;
   1e74e:	f888 5074 	strb.w	r5, [r8, #116]	; 0x74
    appSlaveCb.findLtk = FALSE;
   1e752:	f888 706c 	strb.w	r7, [r8, #108]	; 0x6c
   1e756:	e7c9      	b.n	1e6ec <appSlaveSecConnOpen+0x1c>
   1e758:	10005f3c 	.word	0x10005f3c
   1e75c:	10005f48 	.word	0x10005f48

0001e760 <AppSlaveInit>:
    /* initialize advertising type changed flag */
    appSlaveCb.advTypeChanged[i] = FALSE;

    /* initialize peer address */
    appSlaveCb.peerAddrType[i] = HCI_ADDR_TYPE_PUBLIC;
    memset(appSlaveCb.peerAddr[i], 0, BDA_ADDR_LEN);
   1e760:	4b0d      	ldr	r3, [pc, #52]	; (1e798 <AppSlaveInit+0x38>)

  /* initialize address resolution */
  appSlaveCb.inProgress = FALSE;

  /* set up callback from main */
  appCb.slaveCback = appSlaveProcMsg;
   1e762:	480e      	ldr	r0, [pc, #56]	; (1e79c <AppSlaveInit+0x3c>)
    appSlaveCb.advState[i] = APP_ADV_STOPPED;
   1e764:	2103      	movs	r1, #3
    memset(appSlaveCb.peerAddr[i], 0, BDA_ADDR_LEN);
   1e766:	2200      	movs	r2, #0
    appSlaveCb.advState[i] = APP_ADV_STOPPED;
   1e768:	f883 1057 	strb.w	r1, [r3, #87]	; 0x57
   1e76c:	6599      	str	r1, [r3, #88]	; 0x58
    appSlaveCb.advTypeChanged[i] = FALSE;
   1e76e:	f44f 4c7f 	mov.w	ip, #65280	; 0xff00
  appCb.slaveCback = appSlaveProcMsg;
   1e772:	490b      	ldr	r1, [pc, #44]	; (1e7a0 <AppSlaveInit+0x40>)
    memset(appSlaveCb.peerAddr[i], 0, BDA_ADDR_LEN);
   1e774:	f8c3 205e 	str.w	r2, [r3, #94]	; 0x5e
  appSlaveCb.advRestartCback = NULL;
   1e778:	e9c3 221e 	strd	r2, r2, [r3, #120]	; 0x78
    memset(appSlaveCb.peerAddr[i], 0, BDA_ADDR_LEN);
   1e77c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    appSlaveCb.peerAddrType[i] = HCI_ADDR_TYPE_PUBLIC;
   1e780:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    memset(appSlaveCb.peerAddr[i], 0, BDA_ADDR_LEN);
   1e784:	665a      	str	r2, [r3, #100]	; 0x64
   1e786:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    appSlaveCb.advTypeChanged[i] = FALSE;
   1e78a:	f8a3 c05c 	strh.w	ip, [r3, #92]	; 0x5c
  appSlaveCb.inProgress = FALSE;
   1e78e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  appCb.slaveCback = appSlaveProcMsg;
   1e792:	6001      	str	r1, [r0, #0]
}
   1e794:	4770      	bx	lr
   1e796:	bf00      	nop
   1e798:	10005f48 	.word	0x10005f48
   1e79c:	10005ec4 	.word	0x10005ec4
   1e7a0:	0001e639 	.word	0x0001e639

0001e7a4 <AppSlaveProcDmMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSlaveProcDmMsg(dmEvt_t *pMsg)
{
   1e7a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  appConnCb_t *pCb = NULL;

  /* look up app connection control block from DM connection ID */
  if ((pMsg->hdr.event != DM_ADV_STOP_IND) &&
   1e7a6:	7883      	ldrb	r3, [r0, #2]
   1e7a8:	2b22      	cmp	r3, #34	; 0x22
{
   1e7aa:	b085      	sub	sp, #20
   1e7ac:	4604      	mov	r4, r0
  if ((pMsg->hdr.event != DM_ADV_STOP_IND) &&
   1e7ae:	d056      	beq.n	1e85e <AppSlaveProcDmMsg+0xba>
   1e7b0:	2b48      	cmp	r3, #72	; 0x48
   1e7b2:	d054      	beq.n	1e85e <AppSlaveProcDmMsg+0xba>
      (pMsg->hdr.event != DM_ADV_SET_STOP_IND))
  {
    pCb = &appConnCb[pMsg->hdr.param - 1];
   1e7b4:	8802      	ldrh	r2, [r0, #0]
  }

  switch (pMsg->hdr.event)
   1e7b6:	3b20      	subs	r3, #32
    pCb = &appConnCb[pMsg->hdr.param - 1];
   1e7b8:	1e51      	subs	r1, r2, #1
   1e7ba:	014d      	lsls	r5, r1, #5
  switch (pMsg->hdr.event)
   1e7bc:	2b46      	cmp	r3, #70	; 0x46
   1e7be:	d84c      	bhi.n	1e85a <AppSlaveProcDmMsg+0xb6>
   1e7c0:	e8df f013 	tbh	[pc, r3, lsl #1]
   1e7c4:	004b0047 	.word	0x004b0047
   1e7c8:	004b004d 	.word	0x004b004d
   1e7cc:	004b004b 	.word	0x004b004b
   1e7d0:	0056004b 	.word	0x0056004b
   1e7d4:	00a40086 	.word	0x00a40086
   1e7d8:	004b004b 	.word	0x004b004b
   1e7dc:	004b004b 	.word	0x004b004b
   1e7e0:	004b004b 	.word	0x004b004b
   1e7e4:	004b004b 	.word	0x004b004b
   1e7e8:	004b004b 	.word	0x004b004b
   1e7ec:	004b004b 	.word	0x004b004b
   1e7f0:	00c8004b 	.word	0x00c8004b
   1e7f4:	004b004b 	.word	0x004b004b
   1e7f8:	004b004b 	.word	0x004b004b
   1e7fc:	004b004b 	.word	0x004b004b
   1e800:	004b004b 	.word	0x004b004b
   1e804:	010400f3 	.word	0x010400f3
   1e808:	004b004b 	.word	0x004b004b
   1e80c:	004b004b 	.word	0x004b004b
   1e810:	004b004b 	.word	0x004b004b
   1e814:	004b004b 	.word	0x004b004b
   1e818:	004b004b 	.word	0x004b004b
   1e81c:	004b004b 	.word	0x004b004b
   1e820:	004b004b 	.word	0x004b004b
   1e824:	004b004b 	.word	0x004b004b
   1e828:	004b004b 	.word	0x004b004b
   1e82c:	004b004b 	.word	0x004b004b
   1e830:	0119004b 	.word	0x0119004b
   1e834:	004b004b 	.word	0x004b004b
   1e838:	004b004b 	.word	0x004b004b
   1e83c:	004b004b 	.word	0x004b004b
   1e840:	004b004b 	.word	0x004b004b
   1e844:	004b004b 	.word	0x004b004b
   1e848:	004b004b 	.word	0x004b004b
   1e84c:	004b004b 	.word	0x004b004b
   1e850:	012c      	.short	0x012c
  appSlaveCb.advStopCback = NULL;
   1e852:	4ba0      	ldr	r3, [pc, #640]	; (1ead4 <AppSlaveProcDmMsg+0x330>)
   1e854:	2200      	movs	r2, #0
  appSlaveCb.advRestartCback = NULL;
   1e856:	e9c3 221e 	strd	r2, r2, [r3, #120]	; 0x78
	  break;
      
    default:
      break;
  }
}
   1e85a:	b005      	add	sp, #20
   1e85c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (appSlaveCb.advStopCback != NULL)
   1e85e:	4b9d      	ldr	r3, [pc, #628]	; (1ead4 <AppSlaveProcDmMsg+0x330>)
   1e860:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   1e862:	2b00      	cmp	r3, #0
   1e864:	d0f9      	beq.n	1e85a <AppSlaveProcDmMsg+0xb6>
    (*appSlaveCb.advRestartCback)(pMsg);
   1e866:	4620      	mov	r0, r4
}
   1e868:	b005      	add	sp, #20
   1e86a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    (*appSlaveCb.advRestartCback)(pMsg);
   1e86e:	4718      	bx	r3
  pCb->connId = (dmConnId_t) pMsg->hdr.param;
   1e870:	4e99      	ldr	r6, [pc, #612]	; (1ead8 <AppSlaveProcDmMsg+0x334>)
   1e872:	1973      	adds	r3, r6, r5
   1e874:	b2d2      	uxtb	r2, r2
   1e876:	711a      	strb	r2, [r3, #4]
  if ((pAppUpdateCfg->idlePeriod != 0) &&
   1e878:	4b98      	ldr	r3, [pc, #608]	; (1eadc <AppSlaveProcDmMsg+0x338>)
   1e87a:	681b      	ldr	r3, [r3, #0]
   1e87c:	6819      	ldr	r1, [r3, #0]
   1e87e:	b1e1      	cbz	r1, 1e8ba <AppSlaveProcDmMsg+0x116>
      ((pMsg->connOpen.connInterval < pAppUpdateCfg->connIntervalMin) ||
   1e880:	8a00      	ldrh	r0, [r0, #16]
  if ((pAppUpdateCfg->idlePeriod != 0) &&
   1e882:	889f      	ldrh	r7, [r3, #4]
   1e884:	4287      	cmp	r7, r0
   1e886:	d807      	bhi.n	1e898 <AppSlaveProcDmMsg+0xf4>
      ((pMsg->connOpen.connInterval < pAppUpdateCfg->connIntervalMin) ||
   1e888:	88df      	ldrh	r7, [r3, #6]
   1e88a:	4287      	cmp	r7, r0
   1e88c:	d304      	bcc.n	1e898 <AppSlaveProcDmMsg+0xf4>
       (pMsg->connOpen.connInterval > pAppUpdateCfg->connIntervalMax) ||
   1e88e:	8a67      	ldrh	r7, [r4, #18]
   1e890:	8918      	ldrh	r0, [r3, #8]
   1e892:	4287      	cmp	r7, r0
   1e894:	f000 8154 	beq.w	1eb40 <AppSlaveProcDmMsg+0x39c>
  pCb->updateTimer.handlerId = appHandlerId;
   1e898:	4b91      	ldr	r3, [pc, #580]	; (1eae0 <AppSlaveProcDmMsg+0x33c>)
  appConnCb_t *pCb = &appConnCb[connId - 1];
   1e89a:	1e50      	subs	r0, r2, #1
  pCb->updateTimer.handlerId = appHandlerId;
   1e89c:	781f      	ldrb	r7, [r3, #0]
   1e89e:	eb06 1340 	add.w	r3, r6, r0, lsl #5
    pCb->connWasIdle = FALSE;
   1e8a2:	4435      	add	r5, r6
  pCb->updateTimer.msg.param = connId;
   1e8a4:	831a      	strh	r2, [r3, #24]
    pCb->connWasIdle = FALSE;
   1e8a6:	2200      	movs	r2, #0
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   1e8a8:	4618      	mov	r0, r3
    pCb->connWasIdle = FALSE;
   1e8aa:	72aa      	strb	r2, [r5, #10]
    pCb->attempts = 0;
   1e8ac:	732a      	strb	r2, [r5, #12]
  pCb->updateTimer.msg.event = APP_CONN_UPDATE_TIMEOUT_IND;
   1e8ae:	2210      	movs	r2, #16
  pCb->updateTimer.handlerId = appHandlerId;
   1e8b0:	771f      	strb	r7, [r3, #28]
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   1e8b2:	3010      	adds	r0, #16
  pCb->updateTimer.msg.event = APP_CONN_UPDATE_TIMEOUT_IND;
   1e8b4:	769a      	strb	r2, [r3, #26]
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   1e8b6:	f7f5 fa49 	bl	13d4c <WsfTimerStartMs>
  if (appSlaveCb.advRestartCback != NULL)
   1e8ba:	4b86      	ldr	r3, [pc, #536]	; (1ead4 <AppSlaveProcDmMsg+0x330>)
   1e8bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1e8be:	b10b      	cbz	r3, 1e8c4 <AppSlaveProcDmMsg+0x120>
    (*appSlaveCb.advRestartCback)(pMsg);
   1e8c0:	4620      	mov	r0, r4
   1e8c2:	4798      	blx	r3
  DmReadRemoteFeatures((dmConnId_t) pMsg->hdr.param);
   1e8c4:	7820      	ldrb	r0, [r4, #0]
}
   1e8c6:	b005      	add	sp, #20
   1e8c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  DmReadRemoteFeatures((dmConnId_t) pMsg->hdr.param);
   1e8cc:	f7f9 bee2 	b.w	18694 <DmReadRemoteFeatures>
  AppUpdatePrivacyMode(pCb->dbHdl);
   1e8d0:	4e81      	ldr	r6, [pc, #516]	; (1ead8 <AppSlaveProcDmMsg+0x334>)
   1e8d2:	5970      	ldr	r0, [r6, r5]
   1e8d4:	f7ff fcfe 	bl	1e2d4 <AppUpdatePrivacyMode>
  if (pAppUpdateCfg->idlePeriod != 0)
   1e8d8:	4b80      	ldr	r3, [pc, #512]	; (1eadc <AppSlaveProcDmMsg+0x338>)
   1e8da:	681b      	ldr	r3, [r3, #0]
   1e8dc:	681b      	ldr	r3, [r3, #0]
   1e8de:	2b00      	cmp	r3, #0
   1e8e0:	f040 80c2 	bne.w	1ea68 <AppSlaveProcDmMsg+0x2c4>
  pCb->connId = DM_CONN_ID_NONE;
   1e8e4:	1971      	adds	r1, r6, r5
  appSlaveCb.inProgress = FALSE;
   1e8e6:	4f7b      	ldr	r7, [pc, #492]	; (1ead4 <AppSlaveProcDmMsg+0x330>)
  if (pCb->setConnectable)
   1e8e8:	7a4a      	ldrb	r2, [r1, #9]
  pCb->connId = DM_CONN_ID_NONE;
   1e8ea:	2300      	movs	r3, #0
   1e8ec:	710b      	strb	r3, [r1, #4]
  pCb->updateState = APP_CU_STATE_NONE;
   1e8ee:	734b      	strb	r3, [r1, #13]
  appSlaveCb.inProgress = FALSE;
   1e8f0:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
  if (pCb->setConnectable)
   1e8f4:	b132      	cbz	r2, 1e904 <AppSlaveProcDmMsg+0x160>
    pCb->setConnectable = FALSE;
   1e8f6:	724b      	strb	r3, [r1, #9]
    appSlaveCb.discMode = APP_MODE_CONNECTABLE;
   1e8f8:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  appSlaveCb.advDataOffset[advHandle][advLoc] = 0;
   1e8fc:	643b      	str	r3, [r7, #64]	; 0x40
   1e8fe:	64bb      	str	r3, [r7, #72]	; 0x48
  appSlaveCb.advDataSynced[advHandle] = FALSE;
   1e900:	f8a7 3055 	strh.w	r3, [r7, #85]	; 0x55
  if (appSlaveCb.advRestartCback != NULL)
   1e904:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   1e906:	2b00      	cmp	r3, #0
   1e908:	d1ad      	bne.n	1e866 <AppSlaveProcDmMsg+0xc2>
   1e90a:	e7a6      	b.n	1e85a <AppSlaveProcDmMsg+0xb6>
  if (pAppUpdateCfg->idlePeriod != 0)
   1e90c:	4b73      	ldr	r3, [pc, #460]	; (1eadc <AppSlaveProcDmMsg+0x338>)
   1e90e:	681b      	ldr	r3, [r3, #0]
   1e910:	6819      	ldr	r1, [r3, #0]
   1e912:	2900      	cmp	r1, #0
   1e914:	d0a1      	beq.n	1e85a <AppSlaveProcDmMsg+0xb6>
    if (pMsg->hdr.status == HCI_SUCCESS)
   1e916:	78c2      	ldrb	r2, [r0, #3]
   1e918:	2a00      	cmp	r2, #0
   1e91a:	f040 80ab 	bne.w	1ea74 <AppSlaveProcDmMsg+0x2d0>
      if ((pAppUpdateCfg->connIntervalMin <= ((hciLeConnUpdateCmplEvt_t*)pMsg)->connInterval)
   1e91e:	8902      	ldrh	r2, [r0, #8]
   1e920:	8898      	ldrh	r0, [r3, #4]
   1e922:	4290      	cmp	r0, r2
   1e924:	d803      	bhi.n	1e92e <AppSlaveProcDmMsg+0x18a>
        &&(pAppUpdateCfg->connIntervalMax >= ((hciLeConnUpdateCmplEvt_t*)pMsg)->connInterval))
   1e926:	88db      	ldrh	r3, [r3, #6]
   1e928:	4293      	cmp	r3, r2
   1e92a:	f080 810f 	bcs.w	1eb4c <AppSlaveProcDmMsg+0x3a8>
        appConnUpdateTimerStart(pCb->connId);
   1e92e:	486a      	ldr	r0, [pc, #424]	; (1ead8 <AppSlaveProcDmMsg+0x334>)
   1e930:	4405      	add	r5, r0
   1e932:	792a      	ldrb	r2, [r5, #4]
  appConnCb_t *pCb = &appConnCb[connId - 1];
   1e934:	1e54      	subs	r4, r2, #1
  pCb->updateTimer.handlerId = appHandlerId;
   1e936:	eb00 1344 	add.w	r3, r0, r4, lsl #5
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   1e93a:	4618      	mov	r0, r3
  pCb->updateTimer.msg.param = connId;
   1e93c:	831a      	strh	r2, [r3, #24]
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   1e93e:	3010      	adds	r0, #16
  pCb->updateTimer.handlerId = appHandlerId;
   1e940:	4c67      	ldr	r4, [pc, #412]	; (1eae0 <AppSlaveProcDmMsg+0x33c>)
   1e942:	7824      	ldrb	r4, [r4, #0]
   1e944:	771c      	strb	r4, [r3, #28]
  pCb->updateTimer.msg.event = APP_CONN_UPDATE_TIMEOUT_IND;
   1e946:	2210      	movs	r2, #16
   1e948:	769a      	strb	r2, [r3, #26]
}
   1e94a:	b005      	add	sp, #20
   1e94c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   1e950:	f7f5 b9fc 	b.w	13d4c <WsfTimerStartMs>
  if (!appSlaveCb.inProgress)
   1e954:	4f5f      	ldr	r7, [pc, #380]	; (1ead4 <AppSlaveProcDmMsg+0x330>)
   1e956:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
   1e95a:	2b00      	cmp	r3, #0
   1e95c:	f43f af7d 	beq.w	1e85a <AppSlaveProcDmMsg+0xb6>
  if (pMsg->hdr.status == HCI_SUCCESS)
   1e960:	78c3      	ldrb	r3, [r0, #3]
   1e962:	2b00      	cmp	r3, #0
   1e964:	d16c      	bne.n	1ea40 <AppSlaveProcDmMsg+0x29c>
    pCb->dbHdl = appSlaveCb.dbHdl;
   1e966:	4e5c      	ldr	r6, [pc, #368]	; (1ead8 <AppSlaveProcDmMsg+0x334>)
    if (appSlaveCb.findLtk)
   1e968:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
    pCb->dbHdl = appSlaveCb.dbHdl;
   1e96c:	6f38      	ldr	r0, [r7, #112]	; 0x70
   1e96e:	5170      	str	r0, [r6, r5]
   1e970:	1974      	adds	r4, r6, r5
    if (appSlaveCb.findLtk)
   1e972:	2b00      	cmp	r3, #0
   1e974:	d066      	beq.n	1ea44 <AppSlaveProcDmMsg+0x2a0>
  if (pCb->dbHdl != APP_DB_HDL_NONE)
   1e976:	2800      	cmp	r0, #0
   1e978:	f000 80d9 	beq.w	1eb2e <AppSlaveProcDmMsg+0x38a>
    pKey = AppDbGetKey(pCb->dbHdl, DM_KEY_LOCAL_LTK, &secLevel);
   1e97c:	aa01      	add	r2, sp, #4
   1e97e:	2101      	movs	r1, #1
   1e980:	f7f5 fe68 	bl	14654 <AppDbGetKey>
  if (pKey != NULL)
   1e984:	2800      	cmp	r0, #0
   1e986:	f000 80d2 	beq.w	1eb2e <AppSlaveProcDmMsg+0x38a>
    pCb->bondByLtk = !pCb->bonded;
   1e98a:	7961      	ldrb	r1, [r4, #5]
    DmSecLtkRsp(pCb->connId, TRUE, secLevel, pKey->ltk.key);
   1e98c:	f89d 2004 	ldrb.w	r2, [sp, #4]
    pCb->bondByLtk = !pCb->bonded;
   1e990:	fab1 f181 	clz	r1, r1
   1e994:	0949      	lsrs	r1, r1, #5
    DmSecLtkRsp(pCb->connId, TRUE, secLevel, pKey->ltk.key);
   1e996:	4603      	mov	r3, r0
    pCb->bondByLtk = !pCb->bonded;
   1e998:	71a1      	strb	r1, [r4, #6]
    DmSecLtkRsp(pCb->connId, TRUE, secLevel, pKey->ltk.key);
   1e99a:	7920      	ldrb	r0, [r4, #4]
   1e99c:	2101      	movs	r1, #1
   1e99e:	f7fa fddf 	bl	19560 <DmSecLtkRsp>
      appSlaveCb.findLtk = FALSE;
   1e9a2:	2300      	movs	r3, #0
   1e9a4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
   1e9a8:	e04c      	b.n	1ea44 <AppSlaveProcDmMsg+0x2a0>
  if (pAppSlaveReqActCfg->remConnParamReqAct == APP_ACT_ACCEPT)
   1e9aa:	4b4e      	ldr	r3, [pc, #312]	; (1eae4 <AppSlaveProcDmMsg+0x340>)
   1e9ac:	681b      	ldr	r3, [r3, #0]
   1e9ae:	781b      	ldrb	r3, [r3, #0]
   1e9b0:	2b00      	cmp	r3, #0
   1e9b2:	d04b      	beq.n	1ea4c <AppSlaveProcDmMsg+0x2a8>
  else if (pAppSlaveReqActCfg->remConnParamReqAct == APP_ACT_REJECT)
   1e9b4:	2b01      	cmp	r3, #1
   1e9b6:	f47f af50 	bne.w	1e85a <AppSlaveProcDmMsg+0xb6>
    DmRemoteConnParamReqNegReply(pCb->connId, HCI_ERR_UNSUP_FEAT);
   1e9ba:	4b47      	ldr	r3, [pc, #284]	; (1ead8 <AppSlaveProcDmMsg+0x334>)
   1e9bc:	441d      	add	r5, r3
   1e9be:	2111      	movs	r1, #17
   1e9c0:	7928      	ldrb	r0, [r5, #4]
}
   1e9c2:	b005      	add	sp, #20
   1e9c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    DmRemoteConnParamReqNegReply(pCb->connId, HCI_ERR_UNSUP_FEAT);
   1e9c8:	f7f9 bef4 	b.w	187b4 <DmRemoteConnParamReqNegReply>
        APP_TRACE_INFO3("data length exchange, status= %d, maxRXLen= %d, maxTXlen= %d", pMsg->dataLenChange.hdr.status, pMsg->dataLenChange.maxRxOctets, pMsg->dataLenChange.maxTxOctets);
   1e9cc:	88c3      	ldrh	r3, [r0, #6]
   1e9ce:	8942      	ldrh	r2, [r0, #10]
   1e9d0:	78c1      	ldrb	r1, [r0, #3]
   1e9d2:	4845      	ldr	r0, [pc, #276]	; (1eae8 <AppSlaveProcDmMsg+0x344>)
   1e9d4:	f7f5 fa9e 	bl	13f14 <WsfTrace>
        if (AttGetMtu(pCb->connId) == ATT_DEFAULT_MTU)
   1e9d8:	493f      	ldr	r1, [pc, #252]	; (1ead8 <AppSlaveProcDmMsg+0x334>)
   1e9da:	440d      	add	r5, r1
   1e9dc:	7928      	ldrb	r0, [r5, #4]
   1e9de:	f7f1 f8db 	bl	fb98 <AttGetMtu>
   1e9e2:	2817      	cmp	r0, #23
   1e9e4:	f47f af39 	bne.w	1e85a <AppSlaveProcDmMsg+0xb6>
          AttcMtuReq(pCb->connId, MTU_REQ_SIZE);
   1e9e8:	7928      	ldrb	r0, [r5, #4]
   1e9ea:	21f7      	movs	r1, #247	; 0xf7
}
   1e9ec:	b005      	add	sp, #20
   1e9ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          AttcMtuReq(pCb->connId, MTU_REQ_SIZE);
   1e9f2:	f7ee bddb 	b.w	d5ac <AttcMtuReq>
        uint8_t data_len_ext = pEvent->leReadRemoteFeatCmpl.features[0]&HCI_LE_SUP_FEAT_DATA_LEN_EXT;
   1e9f6:	7a01      	ldrb	r1, [r0, #8]
        APP_TRACE_INFO2("remote feature: 0x%x,  DLE:0x%x", pEvent->leReadRemoteFeatCmpl.features[0],data_len_ext);
   1e9f8:	483c      	ldr	r0, [pc, #240]	; (1eaec <AppSlaveProcDmMsg+0x348>)
        uint8_t data_len_ext = pEvent->leReadRemoteFeatCmpl.features[0]&HCI_LE_SUP_FEAT_DATA_LEN_EXT;
   1e9fa:	f001 0620 	and.w	r6, r1, #32
        APP_TRACE_INFO2("remote feature: 0x%x,  DLE:0x%x", pEvent->leReadRemoteFeatCmpl.features[0],data_len_ext);
   1e9fe:	4632      	mov	r2, r6
   1ea00:	f7f5 fa88 	bl	13f14 <WsfTrace>
		if(data_len_ext == HCI_LE_SUP_FEAT_DATA_LEN_EXT)
   1ea04:	b996      	cbnz	r6, 1ea2c <AppSlaveProcDmMsg+0x288>
		   APP_TRACE_INFO0("Remote device doesn't support DLE"); 
   1ea06:	483a      	ldr	r0, [pc, #232]	; (1eaf0 <AppSlaveProcDmMsg+0x34c>)
   1ea08:	f7f5 fa84 	bl	13f14 <WsfTrace>
	  if (pCb->updateState == APP_CU_STATE_WAIT_FEATURES)
   1ea0c:	4e32      	ldr	r6, [pc, #200]	; (1ead8 <AppSlaveProcDmMsg+0x334>)
   1ea0e:	1974      	adds	r4, r6, r5
   1ea10:	7b63      	ldrb	r3, [r4, #13]
   1ea12:	2b01      	cmp	r3, #1
   1ea14:	d040      	beq.n	1ea98 <AppSlaveProcDmMsg+0x2f4>
        pCb->updateState = APP_CU_STATE_UPDATING;
   1ea16:	2302      	movs	r3, #2
   1ea18:	7363      	strb	r3, [r4, #13]
   1ea1a:	e71e      	b.n	1e85a <AppSlaveProcDmMsg+0xb6>
      HciDrvRadioBoot(0);
   1ea1c:	2000      	movs	r0, #0
   1ea1e:	f7f8 fa5d 	bl	16edc <HciDrvRadioBoot>
}
   1ea22:	b005      	add	sp, #20
   1ea24:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      DmDevReset();
   1ea28:	f7fa b914 	b.w	18c54 <DmDevReset>
		    APP_TRACE_INFO0("Remote device support DLE");
   1ea2c:	4831      	ldr	r0, [pc, #196]	; (1eaf4 <AppSlaveProcDmMsg+0x350>)
   1ea2e:	f7f5 fa71 	bl	13f14 <WsfTrace>
			DmConnSetDataLen(pMsg->hdr.param, LE_MAX_TX_SIZE, LE_MAX_TX_TIME);
   1ea32:	7820      	ldrb	r0, [r4, #0]
   1ea34:	f640 0248 	movw	r2, #2120	; 0x848
   1ea38:	21fb      	movs	r1, #251	; 0xfb
   1ea3a:	f7f9 fed1 	bl	187e0 <DmConnSetDataLen>
   1ea3e:	e7e5      	b.n	1ea0c <AppSlaveProcDmMsg+0x268>
  else if ((pMsg->hdr.status == HCI_ERR_AUTH_FAILURE) && (appSlaveCb.dbHdl != APP_DB_HDL_NONE))
   1ea40:	2b05      	cmp	r3, #5
   1ea42:	d059      	beq.n	1eaf8 <AppSlaveProcDmMsg+0x354>
  appSlaveCb.inProgress = FALSE;
   1ea44:	2300      	movs	r3, #0
   1ea46:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
   1ea4a:	e706      	b.n	1e85a <AppSlaveProcDmMsg+0xb6>
    connSpec.connIntervalMin = pMsg->remConnParamReq.intervalMin;
   1ea4c:	f8d4 2006 	ldr.w	r2, [r4, #6]
   1ea50:	9201      	str	r2, [sp, #4]
    DmRemoteConnParamReqReply(pCb->connId, &connSpec);
   1ea52:	4a21      	ldr	r2, [pc, #132]	; (1ead8 <AppSlaveProcDmMsg+0x334>)
    connSpec.connIntervalMin = pMsg->remConnParamReq.intervalMin;
   1ea54:	f8d0 000a 	ldr.w	r0, [r0, #10]
   1ea58:	9002      	str	r0, [sp, #8]
    DmRemoteConnParamReqReply(pCb->connId, &connSpec);
   1ea5a:	4415      	add	r5, r2
   1ea5c:	a901      	add	r1, sp, #4
   1ea5e:	7928      	ldrb	r0, [r5, #4]
    connSpec.minCeLen = connSpec.maxCeLen = 0;
   1ea60:	9303      	str	r3, [sp, #12]
    DmRemoteConnParamReqReply(pCb->connId, &connSpec);
   1ea62:	f7f9 fe89 	bl	18778 <DmRemoteConnParamReqReply>
   1ea66:	e6f8      	b.n	1e85a <AppSlaveProcDmMsg+0xb6>
    WsfTimerStop(&pCb->updateTimer);
   1ea68:	f105 0010 	add.w	r0, r5, #16
   1ea6c:	4430      	add	r0, r6
   1ea6e:	f7f5 f9b1 	bl	13dd4 <WsfTimerStop>
   1ea72:	e737      	b.n	1e8e4 <AppSlaveProcDmMsg+0x140>
    else if ((pMsg->hdr.status != HCI_ERR_CMD_DISALLOWED) && (pCb->attempts < pAppUpdateCfg->maxAttempts))
   1ea74:	2a0c      	cmp	r2, #12
   1ea76:	f43f aef0 	beq.w	1e85a <AppSlaveProcDmMsg+0xb6>
   1ea7a:	4a17      	ldr	r2, [pc, #92]	; (1ead8 <AppSlaveProcDmMsg+0x334>)
   1ea7c:	7b1b      	ldrb	r3, [r3, #12]
   1ea7e:	4415      	add	r5, r2
   1ea80:	7b28      	ldrb	r0, [r5, #12]
   1ea82:	4298      	cmp	r0, r3
   1ea84:	f4bf aee9 	bcs.w	1e85a <AppSlaveProcDmMsg+0xb6>
      appConnUpdateTimerStart(pCb->connId);
   1ea88:	7928      	ldrb	r0, [r5, #4]
  appConnCb_t *pCb = &appConnCb[connId - 1];
   1ea8a:	1e44      	subs	r4, r0, #1
  pCb->updateTimer.handlerId = appHandlerId;
   1ea8c:	eb02 1344 	add.w	r3, r2, r4, lsl #5
  pCb->updateTimer.msg.param = connId;
   1ea90:	8318      	strh	r0, [r3, #24]
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   1ea92:	f103 0010 	add.w	r0, r3, #16
   1ea96:	e753      	b.n	1e940 <AppSlaveProcDmMsg+0x19c>
  pCb->updateState = APP_CU_STATE_UPDATING;
   1ea98:	2302      	movs	r3, #2
   1ea9a:	7363      	strb	r3, [r4, #13]
  idle = (DmConnCheckIdle(pCb->connId) == 0);
   1ea9c:	7920      	ldrb	r0, [r4, #4]
   1ea9e:	f7f9 ff57 	bl	18950 <DmConnCheckIdle>
   1eaa2:	2800      	cmp	r0, #0
   1eaa4:	bf0c      	ite	eq
   1eaa6:	2301      	moveq	r3, #1
   1eaa8:	2300      	movne	r3, #0
  if (idle && pCb->connWasIdle)
   1eaaa:	d102      	bne.n	1eab2 <AppSlaveProcDmMsg+0x30e>
   1eaac:	7aa2      	ldrb	r2, [r4, #10]
   1eaae:	2a00      	cmp	r2, #0
   1eab0:	d153      	bne.n	1eb5a <AppSlaveProcDmMsg+0x3b6>
    pCb->connWasIdle = idle;
   1eab2:	1971      	adds	r1, r6, r5
  pCb->updateTimer.handlerId = appHandlerId;
   1eab4:	4c0a      	ldr	r4, [pc, #40]	; (1eae0 <AppSlaveProcDmMsg+0x33c>)
    appConnUpdateTimerStart(pCb->connId);
   1eab6:	790a      	ldrb	r2, [r1, #4]
    pCb->connWasIdle = idle;
   1eab8:	728b      	strb	r3, [r1, #10]
  appConnCb_t *pCb = &appConnCb[connId - 1];
   1eaba:	1e50      	subs	r0, r2, #1
  pCb->updateTimer.handlerId = appHandlerId;
   1eabc:	eb06 1340 	add.w	r3, r6, r0, lsl #5
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   1eac0:	4906      	ldr	r1, [pc, #24]	; (1eadc <AppSlaveProcDmMsg+0x338>)
  pCb->updateTimer.msg.param = connId;
   1eac2:	831a      	strh	r2, [r3, #24]
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   1eac4:	6809      	ldr	r1, [r1, #0]
  pCb->updateTimer.handlerId = appHandlerId;
   1eac6:	7822      	ldrb	r2, [r4, #0]
   1eac8:	771a      	strb	r2, [r3, #28]
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   1eaca:	4618      	mov	r0, r3
  pCb->updateTimer.msg.event = APP_CONN_UPDATE_TIMEOUT_IND;
   1eacc:	2210      	movs	r2, #16
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   1eace:	6809      	ldr	r1, [r1, #0]
   1ead0:	4410      	add	r0, r2
   1ead2:	e739      	b.n	1e948 <AppSlaveProcDmMsg+0x1a4>
   1ead4:	10005f48 	.word	0x10005f48
   1ead8:	10005ecc 	.word	0x10005ecc
   1eadc:	10005f44 	.word	0x10005f44
   1eae0:	10005f2c 	.word	0x10005f2c
   1eae4:	10002be0 	.word	0x10002be0
   1eae8:	00025808 	.word	0x00025808
   1eaec:	000257a8 	.word	0x000257a8
   1eaf0:	000257e4 	.word	0x000257e4
   1eaf4:	000257c8 	.word	0x000257c8
  else if ((pMsg->hdr.status == HCI_ERR_AUTH_FAILURE) && (appSlaveCb.dbHdl != APP_DB_HDL_NONE))
   1eaf8:	6f38      	ldr	r0, [r7, #112]	; 0x70
   1eafa:	2800      	cmp	r0, #0
   1eafc:	d0a2      	beq.n	1ea44 <AppSlaveProcDmMsg+0x2a0>
    appSlaveCb.dbHdl = AppDbGetNextRecord(appSlaveCb.dbHdl);
   1eafe:	f7f5 fccf 	bl	144a0 <AppDbGetNextRecord>
   1eb02:	6738      	str	r0, [r7, #112]	; 0x70
    if ((appSlaveCb.dbHdl != APP_DB_HDL_NONE) &&
   1eb04:	2800      	cmp	r0, #0
   1eb06:	d09d      	beq.n	1ea44 <AppSlaveProcDmMsg+0x2a0>
        ((pPeerKey = AppDbGetKey(appSlaveCb.dbHdl, DM_KEY_IRK, NULL)) != NULL))
   1eb08:	2200      	movs	r2, #0
   1eb0a:	2104      	movs	r1, #4
   1eb0c:	f7f5 fda2 	bl	14654 <AppDbGetKey>
    if ((appSlaveCb.dbHdl != APP_DB_HDL_NONE) &&
   1eb10:	4606      	mov	r6, r0
   1eb12:	2800      	cmp	r0, #0
   1eb14:	d096      	beq.n	1ea44 <AppSlaveProcDmMsg+0x2a0>
      DmPrivResolveAddr(DmConnPeerAddr(pCb->connId), pPeerKey->irk.key, pMsg->hdr.param);
   1eb16:	4919      	ldr	r1, [pc, #100]	; (1eb7c <AppSlaveProcDmMsg+0x3d8>)
   1eb18:	4429      	add	r1, r5
   1eb1a:	7908      	ldrb	r0, [r1, #4]
   1eb1c:	f7f9 feae 	bl	1887c <DmConnPeerAddr>
   1eb20:	8822      	ldrh	r2, [r4, #0]
   1eb22:	4631      	mov	r1, r6
}
   1eb24:	b005      	add	sp, #20
   1eb26:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      DmPrivResolveAddr(DmConnPeerAddr(pCb->connId), pPeerKey->irk.key, pMsg->hdr.param);
   1eb2a:	f7fa bac7 	b.w	190bc <DmPrivResolveAddr>
    pCb->bondByLtk = FALSE;
   1eb2e:	1971      	adds	r1, r6, r5
   1eb30:	2300      	movs	r3, #0
    DmSecLtkRsp(pCb->connId, FALSE, 0, NULL);
   1eb32:	7908      	ldrb	r0, [r1, #4]
    pCb->bondByLtk = FALSE;
   1eb34:	718b      	strb	r3, [r1, #6]
    DmSecLtkRsp(pCb->connId, FALSE, 0, NULL);
   1eb36:	461a      	mov	r2, r3
   1eb38:	4619      	mov	r1, r3
   1eb3a:	f7fa fd11 	bl	19560 <DmSecLtkRsp>
}
   1eb3e:	e730      	b.n	1e9a2 <AppSlaveProcDmMsg+0x1fe>
       (pMsg->connOpen.connLatency != pAppUpdateCfg->connLatency) ||
   1eb40:	895b      	ldrh	r3, [r3, #10]
   1eb42:	8aa0      	ldrh	r0, [r4, #20]
   1eb44:	4298      	cmp	r0, r3
   1eb46:	f47f aea7 	bne.w	1e898 <AppSlaveProcDmMsg+0xf4>
   1eb4a:	e6b6      	b.n	1e8ba <AppSlaveProcDmMsg+0x116>
    WsfTimerStop(&pCb->updateTimer);
   1eb4c:	480c      	ldr	r0, [pc, #48]	; (1eb80 <AppSlaveProcDmMsg+0x3dc>)
   1eb4e:	4428      	add	r0, r5
}
   1eb50:	b005      	add	sp, #20
   1eb52:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    WsfTimerStop(&pCb->updateTimer);
   1eb56:	f7f5 b93d 	b.w	13dd4 <WsfTimerStop>
    pCb->attempts++;
   1eb5a:	7b23      	ldrb	r3, [r4, #12]
    connSpec.connIntervalMin = pAppUpdateCfg->connIntervalMin;
   1eb5c:	4a09      	ldr	r2, [pc, #36]	; (1eb84 <AppSlaveProcDmMsg+0x3e0>)
    DmConnUpdate(pCb->connId, &connSpec);
   1eb5e:	7920      	ldrb	r0, [r4, #4]
    connSpec.connIntervalMin = pAppUpdateCfg->connIntervalMin;
   1eb60:	6812      	ldr	r2, [r2, #0]
    pCb->attempts++;
   1eb62:	3301      	adds	r3, #1
   1eb64:	7323      	strb	r3, [r4, #12]
    connSpec.connIntervalMin = pAppUpdateCfg->connIntervalMin;
   1eb66:	e9d2 2501 	ldrd	r2, r5, [r2, #4]
    connSpec.minCeLen = 0;
   1eb6a:	4b07      	ldr	r3, [pc, #28]	; (1eb88 <AppSlaveProcDmMsg+0x3e4>)
   1eb6c:	9303      	str	r3, [sp, #12]
    DmConnUpdate(pCb->connId, &connSpec);
   1eb6e:	a901      	add	r1, sp, #4
    connSpec.connIntervalMin = pAppUpdateCfg->connIntervalMin;
   1eb70:	e9cd 2501 	strd	r2, r5, [sp, #4]
    DmConnUpdate(pCb->connId, &connSpec);
   1eb74:	f7f9 fdc2 	bl	186fc <DmConnUpdate>
}
   1eb78:	e66f      	b.n	1e85a <AppSlaveProcDmMsg+0xb6>
   1eb7a:	bf00      	nop
   1eb7c:	10005ecc 	.word	0x10005ecc
   1eb80:	10005edc 	.word	0x10005edc
   1eb84:	10005f44 	.word	0x10005f44
   1eb88:	ffff0000 	.word	0xffff0000

0001eb8c <appAdvSetData>:
 *  \return None.
 */
/*************************************************************************************************/
void appAdvSetData(uint8_t advHandle, uint8_t location, uint16_t len, uint8_t *pData, uint16_t bufLen,
                   uint16_t maxLen)
{
   1eb8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* store data for location */
  appSlaveCb.pAdvData[advHandle][location] = pData;
   1eb90:	eb01 0c80 	add.w	ip, r1, r0, lsl #2
   1eb94:	4c18      	ldr	r4, [pc, #96]	; (1ebf8 <appAdvSetData+0x6c>)
{
   1eb96:	f8bd 8018 	ldrh.w	r8, [sp, #24]
  appSlaveCb.pAdvData[advHandle][location] = pData;
   1eb9a:	f844 302c 	str.w	r3, [r4, ip, lsl #2]
  appSlaveCb.advDataLen[advHandle][location] = len;
   1eb9e:	f10c 0310 	add.w	r3, ip, #16

  /* reset data offset */
  appSlaveCb.advDataOffset[advHandle][location] = 0;

  /* Set the data now if we are in the right mode and the data is complete (no fragmentation's required) */
  if ((appSlaveCb.advState[advHandle] != APP_ADV_STOPPED) &&
   1eba2:	1826      	adds	r6, r4, r0
  appSlaveCb.advDataLen[advHandle][location] = len;
   1eba4:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
  appSlaveCb.advDataBufLen[advHandle][location] = bufLen;
   1eba8:	f10c 0318 	add.w	r3, ip, #24
  appSlaveCb.maxAdvDataLen[advHandle] = maxLen;
   1ebac:	f100 0728 	add.w	r7, r0, #40	; 0x28
  if ((appSlaveCb.advState[advHandle] != APP_ADV_STOPPED) &&
   1ebb0:	f896 6057 	ldrb.w	r6, [r6, #87]	; 0x57
  appSlaveCb.advDataBufLen[advHandle][location] = bufLen;
   1ebb4:	f824 8013 	strh.w	r8, [r4, r3, lsl #1]
  appSlaveCb.advDataOffset[advHandle][location] = 0;
   1ebb8:	f10c 0c20 	add.w	ip, ip, #32
{
   1ebbc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
  appSlaveCb.maxAdvDataLen[advHandle] = maxLen;
   1ebc0:	f824 3017 	strh.w	r3, [r4, r7, lsl #1]
  if ((appSlaveCb.advState[advHandle] != APP_ADV_STOPPED) &&
   1ebc4:	2e03      	cmp	r6, #3
  appSlaveCb.advDataOffset[advHandle][location] = 0;
   1ebc6:	f04f 0700 	mov.w	r7, #0
   1ebca:	f824 701c 	strh.w	r7, [r4, ip, lsl #1]
{
   1ebce:	4686      	mov	lr, r0
  if ((appSlaveCb.advState[advHandle] != APP_ADV_STOPPED) &&
   1ebd0:	d004      	beq.n	1ebdc <appAdvSetData+0x50>
   1ebd2:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
   1ebd6:	ebb6 0f51 	cmp.w	r6, r1, lsr #1
   1ebda:	d005      	beq.n	1ebe8 <appAdvSetData+0x5c>
    appSetAdvScanDataFrag(advHandle, location);
  }
  /* Otherwise set it when advertising is started or mode changes */
  else
  {
    appSlaveCb.advDataSynced[advHandle] = FALSE;
   1ebdc:	4474      	add	r4, lr
   1ebde:	2300      	movs	r3, #0
   1ebe0:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
  }
}
   1ebe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      (APP_LOC_2_MODE(location) == appSlaveCb.discMode)   &&
   1ebe8:	2afb      	cmp	r2, #251	; 0xfb
   1ebea:	d8f7      	bhi.n	1ebdc <appAdvSetData+0x50>
      (len <= HCI_EXT_ADV_DATA_LEN)                       &&
   1ebec:	429a      	cmp	r2, r3
   1ebee:	d8f5      	bhi.n	1ebdc <appAdvSetData+0x50>
}
   1ebf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    appSetAdvScanDataFrag(advHandle, location);
   1ebf4:	f7ff bc7a 	b.w	1e4ec <appSetAdvScanDataFrag>
   1ebf8:	10005f48 	.word	0x10005f48

0001ebfc <appAdvStart>:
 *  \return None.
 */
/*************************************************************************************************/
void appAdvStart(uint8_t numSets, uint8_t *pAdvHandles, uint16_t *pInterval, uint16_t *pDuration,
                 uint8_t *pMaxEaEvents, bool_t cfgAdvParam)
{
   1ebfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ec00:	b083      	sub	sp, #12
   1ec02:	4617      	mov	r7, r2
   1ec04:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1ec06:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   1ec0a:	9400      	str	r4, [sp, #0]
   1ec0c:	4688      	mov	r8, r1
   1ec0e:	469a      	mov	sl, r3
  for (i = 0; i < numSets; i++)
   1ec10:	4681      	mov	r9, r0
   1ec12:	b338      	cbz	r0, 1ec64 <appAdvStart+0x68>
          ((appSlaveCb.advType[j] == DM_ADV_CONN_UNDIRECT)       ||
   1ec14:	4d65      	ldr	r5, [pc, #404]	; (1edac <appAdvStart+0x1b0>)
   1ec16:	f895 005a 	ldrb.w	r0, [r5, #90]	; 0x5a
   1ec1a:	f895 1059 	ldrb.w	r1, [r5, #89]	; 0x59
   1ec1e:	1f04      	subs	r4, r0, #4
   1ec20:	1f0b      	subs	r3, r1, #4
   1ec22:	2c01      	cmp	r4, #1
   1ec24:	b2db      	uxtb	r3, r3
   1ec26:	f108 34ff 	add.w	r4, r8, #4294967295
   1ec2a:	f109 36ff 	add.w	r6, r9, #4294967295
   1ec2e:	f240 8081 	bls.w	1ed34 <appAdvStart+0x138>
   1ec32:	2b01      	cmp	r3, #1
   1ec34:	d972      	bls.n	1ed1c <appAdvStart+0x120>
   1ec36:	2800      	cmp	r0, #0
   1ec38:	d064      	beq.n	1ed04 <appAdvStart+0x108>
   1ec3a:	2900      	cmp	r1, #0
   1ec3c:	d041      	beq.n	1ecc2 <appAdvStart+0xc6>
  /* start advertising if not connectable advertising or multiple connections supported */
  if (!appSlaveConnectableAdv(numSets, pAdvHandles) ||
      (appNumConns(DM_ROLE_SLAVE) < pAppSlaveCfg->connMax))
  {
    /* for each advertising set */
    for (i = 0; i < numSets; i++)
   1ec3e:	b9d2      	cbnz	r2, 1ec76 <appAdvStart+0x7a>
   1ec40:	fa58 f686 	uxtab	r6, r8, r6
   1ec44:	e001      	b.n	1ec4a <appAdvStart+0x4e>
   1ec46:	42a6      	cmp	r6, r4
   1ec48:	d00c      	beq.n	1ec64 <appAdvStart+0x68>
        DmAdvConfig(pAdvHandles[i], appSlaveCb.advType[pAdvHandles[i]],
                    appSlaveCb.peerAddrType[pAdvHandles[i]], appSlaveCb.peerAddr[pAdvHandles[i]]);
      }

      /* if adv data to be synced */
      if (!appSlaveCb.advDataSynced[pAdvHandles[i]])
   1ec4a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   1ec4e:	182b      	adds	r3, r5, r0
   1ec50:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
   1ec54:	2b00      	cmp	r3, #0
   1ec56:	d1f6      	bne.n	1ec46 <appAdvStart+0x4a>
      {
        /* set advertising or scan response data */
        appSetAdvScanData(pAdvHandles[i], appSlaveCb.discMode);
   1ec58:	f895 105d 	ldrb.w	r1, [r5, #93]	; 0x5d
   1ec5c:	f7ff fc92 	bl	1e584 <appSetAdvScanData>
    for (i = 0; i < numSets; i++)
   1ec60:	42a6      	cmp	r6, r4
   1ec62:	d1f2      	bne.n	1ec4a <appAdvStart+0x4e>
      }
    }

    /* start advertising */
    DmAdvStart(numSets, pAdvHandles, pDuration, pMaxEaEvents);
   1ec64:	9b00      	ldr	r3, [sp, #0]
   1ec66:	4652      	mov	r2, sl
   1ec68:	4641      	mov	r1, r8
   1ec6a:	4648      	mov	r0, r9
  /* done with all advertising states */
  for (i = 0; i < numSets; i++)
  {
    appSlaveCb.advState[pAdvHandles[i]] = APP_ADV_STOPPED;
  }
}
   1ec6c:	b003      	add	sp, #12
   1ec6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    DmAdvStart(numSets, pAdvHandles, pDuration, pMaxEaEvents);
   1ec72:	f7f8 be35 	b.w	178e0 <DmAdvStart>
   1ec76:	3f02      	subs	r7, #2
   1ec78:	fa58 f686 	uxtab	r6, r8, r6
                    appSlaveCb.peerAddrType[pAdvHandles[i]], appSlaveCb.peerAddr[pAdvHandles[i]]);
   1ec7c:	f04f 0b5e 	mov.w	fp, #94	; 0x5e
   1ec80:	e001      	b.n	1ec86 <appAdvStart+0x8a>
    for (i = 0; i < numSets; i++)
   1ec82:	42a6      	cmp	r6, r4
   1ec84:	d0ee      	beq.n	1ec64 <appAdvStart+0x68>
        DmAdvSetInterval(pAdvHandles[i], pInterval[i], pInterval[i]);
   1ec86:	f837 2f02 	ldrh.w	r2, [r7, #2]!
   1ec8a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   1ec8e:	4611      	mov	r1, r2
   1ec90:	f7f8 fe7a 	bl	17988 <DmAdvSetInterval>
        DmAdvConfig(pAdvHandles[i], appSlaveCb.advType[pAdvHandles[i]],
   1ec94:	7820      	ldrb	r0, [r4, #0]
                    appSlaveCb.peerAddrType[pAdvHandles[i]], appSlaveCb.peerAddr[pAdvHandles[i]]);
   1ec96:	2306      	movs	r3, #6
        DmAdvConfig(pAdvHandles[i], appSlaveCb.advType[pAdvHandles[i]],
   1ec98:	1829      	adds	r1, r5, r0
                    appSlaveCb.peerAddrType[pAdvHandles[i]], appSlaveCb.peerAddr[pAdvHandles[i]]);
   1ec9a:	fb13 b300 	smlabb	r3, r3, r0, fp
        DmAdvConfig(pAdvHandles[i], appSlaveCb.advType[pAdvHandles[i]],
   1ec9e:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
   1eca2:	f891 1059 	ldrb.w	r1, [r1, #89]	; 0x59
   1eca6:	442b      	add	r3, r5
   1eca8:	f7f8 fdd0 	bl	1784c <DmAdvConfig>
      if (!appSlaveCb.advDataSynced[pAdvHandles[i]])
   1ecac:	7820      	ldrb	r0, [r4, #0]
   1ecae:	182b      	adds	r3, r5, r0
   1ecb0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
   1ecb4:	2b00      	cmp	r3, #0
   1ecb6:	d1e4      	bne.n	1ec82 <appAdvStart+0x86>
        appSetAdvScanData(pAdvHandles[i], appSlaveCb.discMode);
   1ecb8:	f895 105d 	ldrb.w	r1, [r5, #93]	; 0x5d
   1ecbc:	f7ff fc62 	bl	1e584 <appSetAdvScanData>
   1ecc0:	e7df      	b.n	1ec82 <appAdvStart+0x86>
   1ecc2:	4623      	mov	r3, r4
   1ecc4:	fa58 f086 	uxtab	r0, r8, r6
   1ecc8:	e001      	b.n	1ecce <appAdvStart+0xd2>
  for (i = 0; i < numSets; i++)
   1ecca:	4283      	cmp	r3, r0
   1eccc:	d0b7      	beq.n	1ec3e <appAdvStart+0x42>
      if ((pAdvHandles[i] == j)                                  &&
   1ecce:	f813 1f01 	ldrb.w	r1, [r3, #1]!
   1ecd2:	2900      	cmp	r1, #0
   1ecd4:	d1f9      	bne.n	1ecca <appAdvStart+0xce>
      (appNumConns(DM_ROLE_SLAVE) < pAppSlaveCfg->connMax))
   1ecd6:	2001      	movs	r0, #1
   1ecd8:	9201      	str	r2, [sp, #4]
   1ecda:	f7ff f9fd 	bl	1e0d8 <appNumConns>
   1ecde:	4b34      	ldr	r3, [pc, #208]	; (1edb0 <appAdvStart+0x1b4>)
  if (!appSlaveConnectableAdv(numSets, pAdvHandles) ||
   1ece0:	9a01      	ldr	r2, [sp, #4]
      (appNumConns(DM_ROLE_SLAVE) < pAppSlaveCfg->connMax))
   1ece2:	681b      	ldr	r3, [r3, #0]
  if (!appSlaveConnectableAdv(numSets, pAdvHandles) ||
   1ece4:	781b      	ldrb	r3, [r3, #0]
   1ece6:	4283      	cmp	r3, r0
   1ece8:	d8a9      	bhi.n	1ec3e <appAdvStart+0x42>
   1ecea:	fa58 f686 	uxtab	r6, r8, r6
    appSlaveCb.advState[pAdvHandles[i]] = APP_ADV_STOPPED;
   1ecee:	2203      	movs	r2, #3
   1ecf0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1ecf4:	442b      	add	r3, r5
  for (i = 0; i < numSets; i++)
   1ecf6:	42b4      	cmp	r4, r6
    appSlaveCb.advState[pAdvHandles[i]] = APP_ADV_STOPPED;
   1ecf8:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
  for (i = 0; i < numSets; i++)
   1ecfc:	d1f8      	bne.n	1ecf0 <appAdvStart+0xf4>
}
   1ecfe:	b003      	add	sp, #12
   1ed00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ed04:	4623      	mov	r3, r4
   1ed06:	b321      	cbz	r1, 1ed52 <appAdvStart+0x156>
   1ed08:	fa58 f086 	uxtab	r0, r8, r6
   1ed0c:	e001      	b.n	1ed12 <appAdvStart+0x116>
  for (i = 0; i < numSets; i++)
   1ed0e:	4283      	cmp	r3, r0
   1ed10:	d095      	beq.n	1ec3e <appAdvStart+0x42>
      if ((pAdvHandles[i] == j)                                  &&
   1ed12:	f813 1f01 	ldrb.w	r1, [r3, #1]!
   1ed16:	2901      	cmp	r1, #1
   1ed18:	d0dd      	beq.n	1ecd6 <appAdvStart+0xda>
   1ed1a:	e7f8      	b.n	1ed0e <appAdvStart+0x112>
   1ed1c:	4623      	mov	r3, r4
   1ed1e:	b318      	cbz	r0, 1ed68 <appAdvStart+0x16c>
   1ed20:	fa58 f086 	uxtab	r0, r8, r6
   1ed24:	e001      	b.n	1ed2a <appAdvStart+0x12e>
  for (i = 0; i < numSets; i++)
   1ed26:	4283      	cmp	r3, r0
   1ed28:	d089      	beq.n	1ec3e <appAdvStart+0x42>
      if ((pAdvHandles[i] == j)                                  &&
   1ed2a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
   1ed2e:	2900      	cmp	r1, #0
   1ed30:	d1f9      	bne.n	1ed26 <appAdvStart+0x12a>
   1ed32:	e7d0      	b.n	1ecd6 <appAdvStart+0xda>
   1ed34:	2b01      	cmp	r3, #1
   1ed36:	4623      	mov	r3, r4
   1ed38:	d92c      	bls.n	1ed94 <appAdvStart+0x198>
   1ed3a:	b301      	cbz	r1, 1ed7e <appAdvStart+0x182>
   1ed3c:	fa58 f086 	uxtab	r0, r8, r6
   1ed40:	e002      	b.n	1ed48 <appAdvStart+0x14c>
  for (i = 0; i < numSets; i++)
   1ed42:	4283      	cmp	r3, r0
   1ed44:	f43f af7b 	beq.w	1ec3e <appAdvStart+0x42>
      if ((pAdvHandles[i] == j)                                  &&
   1ed48:	f813 1f01 	ldrb.w	r1, [r3, #1]!
   1ed4c:	2901      	cmp	r1, #1
   1ed4e:	d0c2      	beq.n	1ecd6 <appAdvStart+0xda>
   1ed50:	e7f7      	b.n	1ed42 <appAdvStart+0x146>
   1ed52:	fa58 f186 	uxtab	r1, r8, r6
   1ed56:	e002      	b.n	1ed5e <appAdvStart+0x162>
  for (i = 0; i < numSets; i++)
   1ed58:	428b      	cmp	r3, r1
   1ed5a:	f43f af70 	beq.w	1ec3e <appAdvStart+0x42>
      if ((pAdvHandles[i] == j)                                  &&
   1ed5e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   1ed62:	2801      	cmp	r0, #1
   1ed64:	d8f8      	bhi.n	1ed58 <appAdvStart+0x15c>
   1ed66:	e7b6      	b.n	1ecd6 <appAdvStart+0xda>
   1ed68:	fa58 f186 	uxtab	r1, r8, r6
   1ed6c:	e002      	b.n	1ed74 <appAdvStart+0x178>
  for (i = 0; i < numSets; i++)
   1ed6e:	428b      	cmp	r3, r1
   1ed70:	f43f af65 	beq.w	1ec3e <appAdvStart+0x42>
      if ((pAdvHandles[i] == j)                                  &&
   1ed74:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   1ed78:	2801      	cmp	r0, #1
   1ed7a:	d8f8      	bhi.n	1ed6e <appAdvStart+0x172>
   1ed7c:	e7ab      	b.n	1ecd6 <appAdvStart+0xda>
   1ed7e:	fa58 f186 	uxtab	r1, r8, r6
   1ed82:	e002      	b.n	1ed8a <appAdvStart+0x18e>
  for (i = 0; i < numSets; i++)
   1ed84:	428b      	cmp	r3, r1
   1ed86:	f43f af5a 	beq.w	1ec3e <appAdvStart+0x42>
      if ((pAdvHandles[i] == j)                                  &&
   1ed8a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   1ed8e:	2801      	cmp	r0, #1
   1ed90:	d8f8      	bhi.n	1ed84 <appAdvStart+0x188>
   1ed92:	e7a0      	b.n	1ecd6 <appAdvStart+0xda>
   1ed94:	fa58 f186 	uxtab	r1, r8, r6
   1ed98:	e002      	b.n	1eda0 <appAdvStart+0x1a4>
  for (i = 0; i < numSets; i++)
   1ed9a:	428b      	cmp	r3, r1
   1ed9c:	f43f af4f 	beq.w	1ec3e <appAdvStart+0x42>
      if ((pAdvHandles[i] == j)                                  &&
   1eda0:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   1eda4:	2801      	cmp	r0, #1
   1eda6:	d8f8      	bhi.n	1ed9a <appAdvStart+0x19e>
   1eda8:	e795      	b.n	1ecd6 <appAdvStart+0xda>
   1edaa:	bf00      	nop
   1edac:	10005f48 	.word	0x10005f48
   1edb0:	10005f40 	.word	0x10005f40

0001edb4 <appAdvStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appAdvStop(uint8_t numSets, uint8_t *pAdvHandles)
{
   1edb4:	b510      	push	{r4, lr}
  uint8_t i;

  /* if number of advertising sets is 0 */
  if (numSets == 0)
   1edb6:	b958      	cbnz	r0, 1edd0 <appAdvStop+0x1c>
  {
    /* stop all advertising sets */
    for (i = 0; i < DM_NUM_ADV_SETS; i++)
    {
      appSlaveCb.advState[i] = APP_ADV_STOPPED;
   1edb8:	4c11      	ldr	r4, [pc, #68]	; (1ee00 <appAdvStop+0x4c>)
   1edba:	f240 3303 	movw	r3, #771	; 0x303
   1edbe:	f8a4 3057 	strh.w	r3, [r4, #87]	; 0x57
  }

  /* if no advertising set is active */
  if (!AppSlaveIsAdvertising())
  {
    appSlaveCb.discMode = APP_MODE_NONE;
   1edc2:	23ff      	movs	r3, #255	; 0xff
   1edc4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  }

  DmAdvStop(numSets, pAdvHandles);
}
   1edc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  DmAdvStop(numSets, pAdvHandles);
   1edcc:	f7f8 bdae 	b.w	1792c <DmAdvStop>
   1edd0:	f100 3cff 	add.w	ip, r0, #4294967295
   1edd4:	4c0a      	ldr	r4, [pc, #40]	; (1ee00 <appAdvStop+0x4c>)
   1edd6:	1e4a      	subs	r2, r1, #1
   1edd8:	fa51 fc8c 	uxtab	ip, r1, ip
      appSlaveCb.advState[pAdvHandles[i]] = APP_ADV_STOPPED;
   1eddc:	f04f 0e03 	mov.w	lr, #3
   1ede0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   1ede4:	4423      	add	r3, r4
    for (i = 0; i < numSets; i++)
   1ede6:	4594      	cmp	ip, r2
      appSlaveCb.advState[pAdvHandles[i]] = APP_ADV_STOPPED;
   1ede8:	f883 e057 	strb.w	lr, [r3, #87]	; 0x57
    for (i = 0; i < numSets; i++)
   1edec:	d1f8      	bne.n	1ede0 <appAdvStop+0x2c>

  /* for each advertising set */
  for (i = 0; i < DM_NUM_ADV_SETS; i++)
  {
    /* if advertising */
    if (appSlaveCb.advState[i] < APP_ADV_STOPPED)
   1edee:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
   1edf2:	2b02      	cmp	r3, #2
   1edf4:	d9e8      	bls.n	1edc8 <appAdvStop+0x14>
   1edf6:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
   1edfa:	2b02      	cmp	r3, #2
   1edfc:	d8e1      	bhi.n	1edc2 <appAdvStop+0xe>
   1edfe:	e7e3      	b.n	1edc8 <appAdvStop+0x14>
   1ee00:	10005f48 	.word	0x10005f48

0001ee04 <appSlaveAdvStart>:
{
   1ee04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ee08:	b084      	sub	sp, #16
   1ee0a:	4607      	mov	r7, r0
   1ee0c:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
  uint8_t prevMode = appSlaveCb.discMode;
   1ee10:	4c24      	ldr	r4, [pc, #144]	; (1eea4 <appSlaveAdvStart+0xa0>)
{
   1ee12:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  uint8_t prevMode = appSlaveCb.discMode;
   1ee16:	f894 505d 	ldrb.w	r5, [r4, #93]	; 0x5d
  if (mode == APP_MODE_AUTO_INIT)
   1ee1a:	2802      	cmp	r0, #2
   1ee1c:	d02d      	beq.n	1ee7a <appSlaveAdvStart+0x76>
    appSlaveCb.discMode = mode;
   1ee1e:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
  if (prevMode != appSlaveCb.discMode)
   1ee22:	4285      	cmp	r5, r0
   1ee24:	d01f      	beq.n	1ee66 <appSlaveAdvStart+0x62>
    for (i = 0; i < numSets; i++)
   1ee26:	b1f7      	cbz	r7, 1ee66 <appSlaveAdvStart+0x62>
  advLoc = APP_MODE_2_ADV_LOC(mode);
   1ee28:	0040      	lsls	r0, r0, #1
   1ee2a:	b2c0      	uxtb	r0, r0
  scanLoc = APP_MODE_2_SCAN_LOC(mode);
   1ee2c:	f100 0a01 	add.w	sl, r0, #1
   1ee30:	f107 39ff 	add.w	r9, r7, #4294967295
  appSlaveCb.advDataOffset[advHandle][scanLoc] = 0;
   1ee34:	fa5f fa8a 	uxtb.w	sl, sl
   1ee38:	fa51 f989 	uxtab	r9, r1, r9
   1ee3c:	1e4e      	subs	r6, r1, #1
  appSlaveCb.advDataOffset[advHandle][advLoc] = 0;
   1ee3e:	2500      	movs	r5, #0
   1ee40:	f816 cf01 	ldrb.w	ip, [r6, #1]!
   1ee44:	eb00 0e8c 	add.w	lr, r0, ip, lsl #2
   1ee48:	f10e 0e20 	add.w	lr, lr, #32
    for (i = 0; i < numSets; i++)
   1ee4c:	45b1      	cmp	r9, r6
  appSlaveCb.advDataOffset[advHandle][advLoc] = 0;
   1ee4e:	f824 501e 	strh.w	r5, [r4, lr, lsl #1]
  appSlaveCb.advDataOffset[advHandle][scanLoc] = 0;
   1ee52:	eb0a 0e8c 	add.w	lr, sl, ip, lsl #2
   1ee56:	f10e 0e20 	add.w	lr, lr, #32
  appSlaveCb.advDataSynced[advHandle] = FALSE;
   1ee5a:	44a4      	add	ip, r4
  appSlaveCb.advDataOffset[advHandle][scanLoc] = 0;
   1ee5c:	f824 501e 	strh.w	r5, [r4, lr, lsl #1]
  appSlaveCb.advDataSynced[advHandle] = FALSE;
   1ee60:	f88c 5055 	strb.w	r5, [ip, #85]	; 0x55
    for (i = 0; i < numSets; i++)
   1ee64:	d1ec      	bne.n	1ee40 <appSlaveAdvStart+0x3c>
  appAdvStart(numSets, pAdvHandles, pInterval, pDuration, pMaxEaEvents, TRUE);
   1ee66:	2401      	movs	r4, #1
   1ee68:	4638      	mov	r0, r7
   1ee6a:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
   1ee6e:	940d      	str	r4, [sp, #52]	; 0x34
}
   1ee70:	b004      	add	sp, #16
   1ee72:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  appAdvStart(numSets, pAdvHandles, pInterval, pDuration, pMaxEaEvents, TRUE);
   1ee76:	f7ff bec1 	b.w	1ebfc <appAdvStart>
    if (AppDbCheckBonded() == FALSE)
   1ee7a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1ee7e:	9101      	str	r1, [sp, #4]
   1ee80:	f7f5 fb46 	bl	14510 <AppDbCheckBonded>
   1ee84:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
   1ee88:	9b03      	ldr	r3, [sp, #12]
   1ee8a:	b928      	cbnz	r0, 1ee98 <appSlaveAdvStart+0x94>
  appSlaveCb.bondable = bondable;
   1ee8c:	2001      	movs	r0, #1
   1ee8e:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
      appSlaveCb.discMode = APP_MODE_DISCOVERABLE;
   1ee92:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
   1ee96:	e7c4      	b.n	1ee22 <appSlaveAdvStart+0x1e>
  appSlaveCb.bondable = bondable;
   1ee98:	2000      	movs	r0, #0
   1ee9a:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
      appSlaveCb.discMode = APP_MODE_CONNECTABLE;
   1ee9e:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
   1eea2:	e7be      	b.n	1ee22 <appSlaveAdvStart+0x1e>
   1eea4:	10005f48 	.word	0x10005f48

0001eea8 <appConnAccept>:
{
   1eea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((appSlaveCb.advState[advHandle] >= APP_ADV_STOPPED) &&
   1eeac:	4f7f      	ldr	r7, [pc, #508]	; (1f0ac <appConnAccept+0x204>)
{
   1eeae:	461e      	mov	r6, r3
  if ((appSlaveCb.advState[advHandle] >= APP_ADV_STOPPED) &&
   1eeb0:	183b      	adds	r3, r7, r0
{
   1eeb2:	b08b      	sub	sp, #44	; 0x2c
  if ((appSlaveCb.advState[advHandle] >= APP_ADV_STOPPED) &&
   1eeb4:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
{
   1eeb8:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   1eebc:	f89d 8054 	ldrb.w	r8, [sp, #84]	; 0x54
   1eec0:	f89d b060 	ldrb.w	fp, [sp, #96]	; 0x60
  if ((appSlaveCb.advState[advHandle] >= APP_ADV_STOPPED) &&
   1eec4:	2b02      	cmp	r3, #2
{
   1eec6:	460d      	mov	r5, r1
   1eec8:	e9dd 9116 	ldrd	r9, r1, [sp, #88]	; 0x58
  if ((appSlaveCb.advState[advHandle] >= APP_ADV_STOPPED) &&
   1eecc:	d904      	bls.n	1eed8 <appConnAccept+0x30>
   1eece:	2d01      	cmp	r5, #1
   1eed0:	4604      	mov	r4, r0
   1eed2:	d007      	beq.n	1eee4 <appConnAccept+0x3c>
      ((advType == DM_ADV_CONN_DIRECT)                    ||
   1eed4:	2d04      	cmp	r5, #4
   1eed6:	d003      	beq.n	1eee0 <appConnAccept+0x38>
}
   1eed8:	2000      	movs	r0, #0
   1eeda:	b00b      	add	sp, #44	; 0x2c
   1eedc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((interval > 0) || (advType == DM_ADV_CONN_DIRECT))
   1eee0:	2a00      	cmp	r2, #0
   1eee2:	d0f9      	beq.n	1eed8 <appConnAccept+0x30>
      if (DmLlPrivEnabled() || DM_RAND_ADDR_RPA(pAddr, addrType))
   1eee4:	e9cd 2103 	strd	r2, r1, [sp, #12]
   1eee8:	f7f9 ff62 	bl	18db0 <DmLlPrivEnabled>
   1eeec:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
   1eef0:	b940      	cbnz	r0, 1ef04 <appConnAccept+0x5c>
   1eef2:	f1b8 0f01 	cmp.w	r8, #1
   1eef6:	d10e      	bne.n	1ef16 <appConnAccept+0x6e>
   1eef8:	f899 3005 	ldrb.w	r3, [r9, #5]
   1eefc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1ef00:	2b40      	cmp	r3, #64	; 0x40
   1ef02:	d108      	bne.n	1ef16 <appConnAccept+0x6e>
        if ((dbHdl == APP_DB_HDL_NONE) || !AppDbGetPeerAddrRes(dbHdl))
   1ef04:	9203      	str	r2, [sp, #12]
   1ef06:	2900      	cmp	r1, #0
   1ef08:	d0e6      	beq.n	1eed8 <appConnAccept+0x30>
   1ef0a:	4608      	mov	r0, r1
   1ef0c:	f7f5 fca8 	bl	14860 <AppDbGetPeerAddrRes>
   1ef10:	2800      	cmp	r0, #0
   1ef12:	d0e1      	beq.n	1eed8 <appConnAccept+0x30>
   1ef14:	9a03      	ldr	r2, [sp, #12]
      if (advType == DM_ADV_CONN_DIRECT)
   1ef16:	2d01      	cmp	r5, #1
   1ef18:	d120      	bne.n	1ef5c <appConnAccept+0xb4>
        if ((duration > HCI_ADV_DIRECTED_MAX_DURATION) || (duration == 0))
   1ef1a:	1e73      	subs	r3, r6, #1
   1ef1c:	b29b      	uxth	r3, r3
          duration = HCI_ADV_DIRECTED_MAX_DURATION;
   1ef1e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   1ef22:	bf28      	it	cs
   1ef24:	f44f 66a0 	movcs.w	r6, #1280	; 0x500
      DmAdvConfig(advHandle, advType, addrType, pAddr);
   1ef28:	464b      	mov	r3, r9
   1ef2a:	4642      	mov	r2, r8
   1ef2c:	4629      	mov	r1, r5
   1ef2e:	4620      	mov	r0, r4
   1ef30:	f7f8 fc8c 	bl	1784c <DmAdvConfig>
      if (cfgAdvData && !appSlaveCb.advDataSynced[advHandle])
   1ef34:	f1bb 0f00 	cmp.w	fp, #0
   1ef38:	d003      	beq.n	1ef42 <appConnAccept+0x9a>
   1ef3a:	193b      	adds	r3, r7, r4
   1ef3c:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
   1ef40:	b18a      	cbz	r2, 1ef66 <appConnAccept+0xbe>
      return DmConnAccept(DM_CLIENT_ID_APP, advHandle, advType, duration, maxEaEvents, addrType,
   1ef42:	4633      	mov	r3, r6
   1ef44:	462a      	mov	r2, r5
   1ef46:	4621      	mov	r1, r4
   1ef48:	2003      	movs	r0, #3
   1ef4a:	e9cd 8915 	strd	r8, r9, [sp, #84]	; 0x54
   1ef4e:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
}
   1ef52:	b00b      	add	sp, #44	; 0x2c
   1ef54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return DmConnAccept(DM_CLIENT_ID_APP, advHandle, advType, duration, maxEaEvents, addrType,
   1ef58:	f7f9 bd92 	b.w	18a80 <DmConnAccept>
        DmAdvSetInterval(advHandle, interval, interval);
   1ef5c:	4611      	mov	r1, r2
   1ef5e:	4620      	mov	r0, r4
   1ef60:	f7f8 fd12 	bl	17988 <DmAdvSetInterval>
   1ef64:	e7e0      	b.n	1ef28 <appConnAccept+0x80>
  if (appSlaveCb.advDataOffset[advHandle][advLoc] < appSlaveCb.advDataLen[advHandle][advLoc])
   1ef66:	f104 0308 	add.w	r3, r4, #8
   1ef6a:	1d21      	adds	r1, r4, #4
   1ef6c:	9305      	str	r3, [sp, #20]
   1ef6e:	9104      	str	r1, [sp, #16]
   1ef70:	f837 3033 	ldrh.w	r3, [r7, r3, lsl #3]
   1ef74:	f837 1031 	ldrh.w	r1, [r7, r1, lsl #3]
   1ef78:	428b      	cmp	r3, r1
   1ef7a:	d328      	bcc.n	1efce <appConnAccept+0x126>
  if (appSlaveCb.advDataOffset[advHandle][scanLoc] < appSlaveCb.advDataLen[advHandle][scanLoc])
   1ef7c:	eb07 02c4 	add.w	r2, r7, r4, lsl #3
   1ef80:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
   1ef84:	8c51      	ldrh	r1, [r2, #34]	; 0x22
   1ef86:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
   1ef8a:	4291      	cmp	r1, r2
   1ef8c:	d956      	bls.n	1f03c <appConnAccept+0x194>
   1ef8e:	f104 0328 	add.w	r3, r4, #40	; 0x28
   1ef92:	9303      	str	r3, [sp, #12]
    appSetAdvScanDataFrag(advHandle, scanLoc);
   1ef94:	2101      	movs	r1, #1
   1ef96:	4620      	mov	r0, r4
   1ef98:	f7ff faa8 	bl	1e4ec <appSetAdvScanDataFrag>
  if ((appSlaveCb.advDataOffset[advHandle][advLoc] >= appSlaveCb.advDataLen[advHandle][advLoc]) &&
   1ef9c:	9b05      	ldr	r3, [sp, #20]
   1ef9e:	9a04      	ldr	r2, [sp, #16]
   1efa0:	f837 3033 	ldrh.w	r3, [r7, r3, lsl #3]
   1efa4:	f837 2032 	ldrh.w	r2, [r7, r2, lsl #3]
   1efa8:	429a      	cmp	r2, r3
   1efaa:	d806      	bhi.n	1efba <appConnAccept+0x112>
      (appSlaveCb.advDataOffset[advHandle][scanLoc] >= appSlaveCb.advDataLen[advHandle][scanLoc]))
   1efac:	44bb      	add	fp, r7
  if ((appSlaveCb.advDataOffset[advHandle][advLoc] >= appSlaveCb.advDataLen[advHandle][advLoc]) &&
   1efae:	f8bb 1042 	ldrh.w	r1, [fp, #66]	; 0x42
   1efb2:	f8bb 2022 	ldrh.w	r2, [fp, #34]	; 0x22
   1efb6:	4291      	cmp	r1, r2
   1efb8:	d243      	bcs.n	1f042 <appConnAccept+0x19a>
        if (appSlaveCb.advDataOffset[advHandle][APP_MODE_2_ADV_LOC(APP_MODE_CONNECTABLE)] >=
   1efba:	9a03      	ldr	r2, [sp, #12]
   1efbc:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
   1efc0:	429a      	cmp	r2, r3
   1efc2:	d8be      	bhi.n	1ef42 <appConnAccept+0x9a>
          appSlaveCb.advDataSynced[advHandle] = TRUE;
   1efc4:	4427      	add	r7, r4
   1efc6:	2301      	movs	r3, #1
   1efc8:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
   1efcc:	e7b9      	b.n	1ef42 <appConnAccept+0x9a>
  if (remainLen > appSlaveCb.maxAdvDataLen[advHandle])
   1efce:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1efd2:	9003      	str	r0, [sp, #12]
  pAdvData = appSlaveCb.pAdvData[advHandle][location];
   1efd4:	0120      	lsls	r0, r4, #4
  remainLen = appSlaveCb.advDataLen[advHandle][location] - appSlaveCb.advDataOffset[advHandle][location];
   1efd6:	1ac9      	subs	r1, r1, r3
  pAdvData = appSlaveCb.pAdvData[advHandle][location];
   1efd8:	5838      	ldr	r0, [r7, r0]
   1efda:	9006      	str	r0, [sp, #24]
   1efdc:	9803      	ldr	r0, [sp, #12]
   1efde:	f837 0010 	ldrh.w	r0, [r7, r0, lsl #1]
  remainLen = appSlaveCb.advDataLen[advHandle][location] - appSlaveCb.advDataOffset[advHandle][location];
   1efe2:	b289      	uxth	r1, r1
  if (remainLen > appSlaveCb.maxAdvDataLen[advHandle])
   1efe4:	4288      	cmp	r0, r1
   1efe6:	4683      	mov	fp, r0
   1efe8:	bf28      	it	cs
   1efea:	468b      	movcs	fp, r1
  while (remainLen > 0)
   1efec:	f1bb 0f00 	cmp.w	fp, #0
   1eff0:	d051      	beq.n	1f096 <appConnAccept+0x1ee>
    if (remainLen > HCI_EXT_ADV_DATA_LEN)
   1eff2:	f1bb 0ffb 	cmp.w	fp, #251	; 0xfb
   1eff6:	d93d      	bls.n	1f074 <appConnAccept+0x1cc>
   1eff8:	e9cd 6808 	strd	r6, r8, [sp, #32]
   1effc:	9507      	str	r5, [sp, #28]
   1effe:	46a0      	mov	r8, r4
   1f000:	465d      	mov	r5, fp
   1f002:	e9dd b405 	ldrd	fp, r4, [sp, #20]
   1f006:	2101      	movs	r1, #1
    firstFrag = FALSE;
   1f008:	462e      	mov	r6, r5
      fragLen = HCI_EXT_ADV_DATA_LEN;
   1f00a:	25fb      	movs	r5, #251	; 0xfb
    DmAdvSetData(advHandle, op, APP_LOC_2_DM_LOC(location), (uint8_t)fragLen,
   1f00c:	4423      	add	r3, r4
   1f00e:	9300      	str	r3, [sp, #0]
   1f010:	2200      	movs	r2, #0
   1f012:	b2eb      	uxtb	r3, r5
   1f014:	4640      	mov	r0, r8
   1f016:	f7f8 fc39 	bl	1788c <DmAdvSetData>
    appSlaveCb.advDataOffset[advHandle][location] += fragLen;
   1f01a:	f837 303b 	ldrh.w	r3, [r7, fp, lsl #3]
    remainLen -= fragLen;
   1f01e:	1b76      	subs	r6, r6, r5
    appSlaveCb.advDataOffset[advHandle][location] += fragLen;
   1f020:	442b      	add	r3, r5
   1f022:	b29b      	uxth	r3, r3
    remainLen -= fragLen;
   1f024:	b2b5      	uxth	r5, r6
    appSlaveCb.advDataOffset[advHandle][location] += fragLen;
   1f026:	f827 303b 	strh.w	r3, [r7, fp, lsl #3]
  while (remainLen > 0)
   1f02a:	b17d      	cbz	r5, 1f04c <appConnAccept+0x1a4>
    if (remainLen > HCI_EXT_ADV_DATA_LEN)
   1f02c:	2dfb      	cmp	r5, #251	; 0xfb
      op = firstFrag ? HCI_ADV_DATA_OP_COMP_FRAG : HCI_ADV_DATA_OP_FRAG_LAST;
   1f02e:	f04f 0102 	mov.w	r1, #2
    if (remainLen > HCI_EXT_ADV_DATA_LEN)
   1f032:	d801      	bhi.n	1f038 <appConnAccept+0x190>
   1f034:	462e      	mov	r6, r5
   1f036:	e7e9      	b.n	1f00c <appConnAccept+0x164>
    firstFrag = FALSE;
   1f038:	2100      	movs	r1, #0
   1f03a:	e7e5      	b.n	1f008 <appConnAccept+0x160>
   1f03c:	f104 0228 	add.w	r2, r4, #40	; 0x28
   1f040:	9203      	str	r2, [sp, #12]
    appSlaveCb.advDataSynced[advHandle] = TRUE;
   1f042:	193a      	adds	r2, r7, r4
   1f044:	2101      	movs	r1, #1
   1f046:	f882 1055 	strb.w	r1, [r2, #85]	; 0x55
   1f04a:	e7b6      	b.n	1efba <appConnAccept+0x112>
   1f04c:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
   1f050:	4644      	mov	r4, r8
   1f052:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  if (appSlaveCb.advDataOffset[advHandle][scanLoc] < appSlaveCb.advDataLen[advHandle][scanLoc])
   1f056:	eb07 02c4 	add.w	r2, r7, r4, lsl #3
   1f05a:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
   1f05e:	f8b2 1042 	ldrh.w	r1, [r2, #66]	; 0x42
   1f062:	8c52      	ldrh	r2, [r2, #34]	; 0x22
   1f064:	4291      	cmp	r1, r2
   1f066:	d395      	bcc.n	1ef94 <appConnAccept+0xec>
  if ((appSlaveCb.advDataOffset[advHandle][advLoc] >= appSlaveCb.advDataLen[advHandle][advLoc]) &&
   1f068:	9a04      	ldr	r2, [sp, #16]
   1f06a:	f837 2032 	ldrh.w	r2, [r7, r2, lsl #3]
   1f06e:	429a      	cmp	r2, r3
   1f070:	d8a3      	bhi.n	1efba <appConnAccept+0x112>
   1f072:	e7e6      	b.n	1f042 <appConnAccept+0x19a>
    DmAdvSetData(advHandle, op, APP_LOC_2_DM_LOC(location), (uint8_t)fragLen,
   1f074:	9906      	ldr	r1, [sp, #24]
   1f076:	4419      	add	r1, r3
   1f078:	9100      	str	r1, [sp, #0]
   1f07a:	fa5f f38b 	uxtb.w	r3, fp
   1f07e:	2103      	movs	r1, #3
   1f080:	4620      	mov	r0, r4
   1f082:	f7f8 fc03 	bl	1788c <DmAdvSetData>
    appSlaveCb.advDataOffset[advHandle][location] += fragLen;
   1f086:	9a05      	ldr	r2, [sp, #20]
   1f088:	f837 3032 	ldrh.w	r3, [r7, r2, lsl #3]
   1f08c:	445b      	add	r3, fp
   1f08e:	b29b      	uxth	r3, r3
   1f090:	f827 3032 	strh.w	r3, [r7, r2, lsl #3]
  while (remainLen > 0)
   1f094:	e7df      	b.n	1f056 <appConnAccept+0x1ae>
  if (appSlaveCb.advDataOffset[advHandle][scanLoc] < appSlaveCb.advDataLen[advHandle][scanLoc])
   1f096:	eb07 02c4 	add.w	r2, r7, r4, lsl #3
   1f09a:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
   1f09e:	8c51      	ldrh	r1, [r2, #34]	; 0x22
   1f0a0:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
   1f0a4:	4291      	cmp	r1, r2
   1f0a6:	d988      	bls.n	1efba <appConnAccept+0x112>
   1f0a8:	e774      	b.n	1ef94 <appConnAccept+0xec>
   1f0aa:	bf00      	nop
   1f0ac:	10005f48 	.word	0x10005f48

0001f0b0 <AppSlaveSecProcDmMsg>:
{
   1f0b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  switch(pMsg->hdr.event)
   1f0b4:	7882      	ldrb	r2, [r0, #2]
  pCb = &appConnCb[pMsg->hdr.param - 1];
   1f0b6:	8803      	ldrh	r3, [r0, #0]
  switch(pMsg->hdr.event)
   1f0b8:	3a27      	subs	r2, #39	; 0x27
{
   1f0ba:	b087      	sub	sp, #28
   1f0bc:	4604      	mov	r4, r0
  pCb = &appConnCb[pMsg->hdr.param - 1];
   1f0be:	3b01      	subs	r3, #1
  switch(pMsg->hdr.event)
   1f0c0:	2a18      	cmp	r2, #24
   1f0c2:	d85e      	bhi.n	1f182 <AppSlaveSecProcDmMsg+0xd2>
   1f0c4:	e8df f012 	tbh	[pc, r2, lsl #1]
   1f0c8:	0072006a 	.word	0x0072006a
   1f0cc:	007c005d 	.word	0x007c005d
   1f0d0:	009f005d 	.word	0x009f005d
   1f0d4:	005d005d 	.word	0x005d005d
   1f0d8:	00c100ad 	.word	0x00c100ad
   1f0dc:	005d0019 	.word	0x005d0019
   1f0e0:	005d005d 	.word	0x005d005d
   1f0e4:	005d005d 	.word	0x005d005d
   1f0e8:	005d005d 	.word	0x005d005d
   1f0ec:	00da005d 	.word	0x00da005d
   1f0f0:	005d00e6 	.word	0x005d00e6
   1f0f4:	005d005d 	.word	0x005d005d
   1f0f8:	0060      	.short	0x0060
  if (appSlaveCb.bondable ||
   1f0fa:	4a90      	ldr	r2, [pc, #576]	; (1f33c <AppSlaveSecProcDmMsg+0x28c>)
   1f0fc:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
   1f100:	2a00      	cmp	r2, #0
   1f102:	f040 80df 	bne.w	1f2c4 <AppSlaveSecProcDmMsg+0x214>
      ((pMsg->pairInd.auth & DM_AUTH_BOND_FLAG) != DM_AUTH_BOND_FLAG) ||
   1f106:	7902      	ldrb	r2, [r0, #4]
   1f108:	4e8d      	ldr	r6, [pc, #564]	; (1f340 <AppSlaveSecProcDmMsg+0x290>)
  if (appSlaveCb.bondable ||
   1f10a:	07d1      	lsls	r1, r2, #31
   1f10c:	ea4f 1543 	mov.w	r5, r3, lsl #5
   1f110:	d50c      	bpl.n	1f12c <AppSlaveSecProcDmMsg+0x7c>
      (pCb->bonded && (DmConnSecLevel(pCb->connId) == DM_SEC_LEVEL_NONE)))
   1f112:	eb06 1343 	add.w	r3, r6, r3, lsl #5
      ((pMsg->pairInd.auth & DM_AUTH_BOND_FLAG) != DM_AUTH_BOND_FLAG) ||
   1f116:	795a      	ldrb	r2, [r3, #5]
   1f118:	2a00      	cmp	r2, #0
   1f11a:	f000 80f5 	beq.w	1f308 <AppSlaveSecProcDmMsg+0x258>
      (pCb->bonded && (DmConnSecLevel(pCb->connId) == DM_SEC_LEVEL_NONE)))
   1f11e:	7918      	ldrb	r0, [r3, #4]
   1f120:	f7f9 fbde 	bl	188e0 <DmConnSecLevel>
   1f124:	2800      	cmp	r0, #0
   1f126:	f040 80ef 	bne.w	1f308 <AppSlaveSecProcDmMsg+0x258>
    pCb->bondByPairing = (pMsg->pairInd.auth & pAppSecCfg->auth & DM_AUTH_BOND_FLAG) == DM_AUTH_BOND_FLAG;
   1f12a:	7922      	ldrb	r2, [r4, #4]
   1f12c:	4f85      	ldr	r7, [pc, #532]	; (1f344 <AppSlaveSecProcDmMsg+0x294>)
   1f12e:	6839      	ldr	r1, [r7, #0]
   1f130:	780b      	ldrb	r3, [r1, #0]
   1f132:	eb06 0805 	add.w	r8, r6, r5
   1f136:	4013      	ands	r3, r2
   1f138:	f003 0301 	and.w	r3, r3, #1
   1f13c:	f888 3007 	strb.w	r3, [r8, #7]
    if (pCb->bondByPairing && pCb->dbHdl == APP_DB_HDL_NONE)
   1f140:	b11b      	cbz	r3, 1f14a <AppSlaveSecProcDmMsg+0x9a>
   1f142:	5972      	ldr	r2, [r6, r5]
   1f144:	2a00      	cmp	r2, #0
   1f146:	f000 80e7 	beq.w	1f318 <AppSlaveSecProcDmMsg+0x268>
    pCb->rcvdKeys = 0;
   1f14a:	1973      	adds	r3, r6, r5
   1f14c:	2200      	movs	r2, #0
   1f14e:	72da      	strb	r2, [r3, #11]
    if (DmConnPeerAddrType(pCb->connId) == DM_ADDR_RANDOM)
   1f150:	7918      	ldrb	r0, [r3, #4]
    iKeyDist = pAppSecCfg->iKeyDist;
   1f152:	f891 9001 	ldrb.w	r9, [r1, #1]
    rKeyDist = pAppSecCfg->rKeyDist;
   1f156:	f891 8002 	ldrb.w	r8, [r1, #2]
    if (DmConnPeerAddrType(pCb->connId) == DM_ADDR_RANDOM)
   1f15a:	f7f9 fb85 	bl	18868 <DmConnPeerAddrType>
    DmSecPairRsp(pCb->connId, pAppSecCfg->oob, pAppSecCfg->auth, iKeyDist, rKeyDist);
   1f15e:	4435      	add	r5, r6
    if (DmConnPeerAddrType(pCb->connId) == DM_ADDR_RANDOM)
   1f160:	2801      	cmp	r0, #1
    DmSecPairRsp(pCb->connId, pAppSecCfg->oob, pAppSecCfg->auth, iKeyDist, rKeyDist);
   1f162:	7928      	ldrb	r0, [r5, #4]
    rKeyDist &= pMsg->pairInd.rKeyDist;
   1f164:	79e5      	ldrb	r5, [r4, #7]
    DmSecPairRsp(pCb->connId, pAppSecCfg->oob, pAppSecCfg->auth, iKeyDist, rKeyDist);
   1f166:	6839      	ldr	r1, [r7, #0]
    iKeyDist &= pMsg->pairInd.iKeyDist;
   1f168:	79a3      	ldrb	r3, [r4, #6]
    DmSecPairRsp(pCb->connId, pAppSecCfg->oob, pAppSecCfg->auth, iKeyDist, rKeyDist);
   1f16a:	780a      	ldrb	r2, [r1, #0]
   1f16c:	78c9      	ldrb	r1, [r1, #3]
      iKeyDist |= DM_KEY_DIST_IRK;
   1f16e:	bf08      	it	eq
   1f170:	f049 0902 	orreq.w	r9, r9, #2
    DmSecPairRsp(pCb->connId, pAppSecCfg->oob, pAppSecCfg->auth, iKeyDist, rKeyDist);
   1f174:	ea08 0505 	and.w	r5, r8, r5
   1f178:	ea09 0303 	and.w	r3, r9, r3
   1f17c:	9500      	str	r5, [sp, #0]
   1f17e:	f7fa f9c1 	bl	19504 <DmSecPairRsp>
}
   1f182:	b007      	add	sp, #28
   1f184:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (pMsg->hdr.status == HCI_SUCCESS)
   1f188:	78c3      	ldrb	r3, [r0, #3]
   1f18a:	2b00      	cmp	r3, #0
   1f18c:	d1f9      	bne.n	1f182 <AppSlaveSecProcDmMsg+0xd2>
    SvcCoreGapCentAddrResUpdate(DmLlPrivEnabled());
   1f18e:	f7f9 fe0f 	bl	18db0 <DmLlPrivEnabled>
}
   1f192:	b007      	add	sp, #28
   1f194:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    SvcCoreGapCentAddrResUpdate(DmLlPrivEnabled());
   1f198:	f002 b8d0 	b.w	2133c <SvcCoreGapCentAddrResUpdate>
  pCb = &appConnCb[pMsg->hdr.param - 1];
   1f19c:	4968      	ldr	r1, [pc, #416]	; (1f340 <AppSlaveSecProcDmMsg+0x290>)
      appSlaveSecConnOpen(pMsg, pCb);
   1f19e:	eb01 1143 	add.w	r1, r1, r3, lsl #5
}
   1f1a2:	b007      	add	sp, #28
   1f1a4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      appSlaveSecConnOpen(pMsg, pCb);
   1f1a8:	f7ff ba92 	b.w	1e6d0 <appSlaveSecConnOpen>
  if (pCb->dbHdl != APP_DB_HDL_NONE)
   1f1ac:	4a64      	ldr	r2, [pc, #400]	; (1f340 <AppSlaveSecProcDmMsg+0x290>)
   1f1ae:	015b      	lsls	r3, r3, #5
   1f1b0:	58d0      	ldr	r0, [r2, r3]
   1f1b2:	2800      	cmp	r0, #0
   1f1b4:	d0e5      	beq.n	1f182 <AppSlaveSecProcDmMsg+0xd2>
}
   1f1b6:	b007      	add	sp, #28
   1f1b8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    AppDbCheckValidRecord(pCb->dbHdl);
   1f1bc:	f7f5 b9a2 	b.w	14504 <AppDbCheckValidRecord>
  if (pCb->bondByPairing)
   1f1c0:	4e5f      	ldr	r6, [pc, #380]	; (1f340 <AppSlaveSecProcDmMsg+0x290>)
   1f1c2:	015d      	lsls	r5, r3, #5
   1f1c4:	eb06 1343 	add.w	r3, r6, r3, lsl #5
   1f1c8:	79da      	ldrb	r2, [r3, #7]
   1f1ca:	2a00      	cmp	r2, #0
   1f1cc:	d0d9      	beq.n	1f182 <AppSlaveSecProcDmMsg+0xd2>
    if (pCb->dbHdl != APP_DB_HDL_NONE)
   1f1ce:	5970      	ldr	r0, [r6, r5]
    pCb->bonded = TRUE;
   1f1d0:	2201      	movs	r2, #1
   1f1d2:	715a      	strb	r2, [r3, #5]
    if (pCb->dbHdl != APP_DB_HDL_NONE)
   1f1d4:	b110      	cbz	r0, 1f1dc <AppSlaveSecProcDmMsg+0x12c>
      AppDbValidateRecord(pCb->dbHdl, pCb->rcvdKeys);
   1f1d6:	7ad9      	ldrb	r1, [r3, #11]
   1f1d8:	f7f5 f98e 	bl	144f8 <AppDbValidateRecord>
  appSlaveCb.bondable = bondable;
   1f1dc:	4b57      	ldr	r3, [pc, #348]	; (1f33c <AppSlaveSecProcDmMsg+0x28c>)
   1f1de:	2200      	movs	r2, #0
   1f1e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    if (appSlaveCb.discMode == APP_MODE_DISCOVERABLE)
   1f1e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   1f1e8:	2b01      	cmp	r3, #1
      pCb->setConnectable = TRUE;
   1f1ea:	bf04      	itt	eq
   1f1ec:	1972      	addeq	r2, r6, r5
   1f1ee:	7253      	strbeq	r3, [r2, #9]
    if (pCb->dbHdl != APP_DB_HDL_NONE)
   1f1f0:	5973      	ldr	r3, [r6, r5]
   1f1f2:	4435      	add	r5, r6
   1f1f4:	2b00      	cmp	r3, #0
   1f1f6:	d0c4      	beq.n	1f182 <AppSlaveSecProcDmMsg+0xd2>
      AppAddDevToResList(pMsg, pCb->connId);
   1f1f8:	7929      	ldrb	r1, [r5, #4]
   1f1fa:	4620      	mov	r0, r4
}
   1f1fc:	b007      	add	sp, #28
   1f1fe:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      AppAddDevToResList(pMsg, pCb->connId);
   1f202:	f7ff b825 	b.w	1e250 <AppAddDevToResList>
  if (pCb->bondByLtk && pMsg->encryptInd.usingLtk)
   1f206:	4a4e      	ldr	r2, [pc, #312]	; (1f340 <AppSlaveSecProcDmMsg+0x290>)
   1f208:	0159      	lsls	r1, r3, #5
   1f20a:	eb02 1343 	add.w	r3, r2, r3, lsl #5
   1f20e:	799b      	ldrb	r3, [r3, #6]
   1f210:	2b00      	cmp	r3, #0
   1f212:	d0b6      	beq.n	1f182 <AppSlaveSecProcDmMsg+0xd2>
   1f214:	7903      	ldrb	r3, [r0, #4]
   1f216:	2b00      	cmp	r3, #0
   1f218:	d0b3      	beq.n	1f182 <AppSlaveSecProcDmMsg+0xd2>
    pCb->bonded = TRUE;
   1f21a:	3205      	adds	r2, #5
   1f21c:	2301      	movs	r3, #1
   1f21e:	528b      	strh	r3, [r1, r2]
   1f220:	e7af      	b.n	1f182 <AppSlaveSecProcDmMsg+0xd2>
  if (pCb->bondByPairing && pCb->dbHdl != APP_DB_HDL_NONE)
   1f222:	4a47      	ldr	r2, [pc, #284]	; (1f340 <AppSlaveSecProcDmMsg+0x290>)
   1f224:	0158      	lsls	r0, r3, #5
   1f226:	eb02 1343 	add.w	r3, r2, r3, lsl #5
   1f22a:	79d9      	ldrb	r1, [r3, #7]
   1f22c:	2900      	cmp	r1, #0
   1f22e:	d0a8      	beq.n	1f182 <AppSlaveSecProcDmMsg+0xd2>
   1f230:	5810      	ldr	r0, [r2, r0]
   1f232:	2800      	cmp	r0, #0
   1f234:	d0a5      	beq.n	1f182 <AppSlaveSecProcDmMsg+0xd2>
    pCb->rcvdKeys |= pMsg->keyInd.type;
   1f236:	7ada      	ldrb	r2, [r3, #11]
   1f238:	7fa5      	ldrb	r5, [r4, #30]
    AppDbSetKey(pCb->dbHdl, &pMsg->keyInd);
   1f23a:	4621      	mov	r1, r4
    pCb->rcvdKeys |= pMsg->keyInd.type;
   1f23c:	432a      	orrs	r2, r5
   1f23e:	72da      	strb	r2, [r3, #11]
}
   1f240:	b007      	add	sp, #28
   1f242:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    AppDbSetKey(pCb->dbHdl, &pMsg->keyInd);
   1f246:	f7f5 ba23 	b.w	14690 <AppDbSetKey>
  if (pCb->dbHdl == APP_DB_HDL_NONE)
   1f24a:	4e3d      	ldr	r6, [pc, #244]	; (1f340 <AppSlaveSecProcDmMsg+0x290>)
   1f24c:	015d      	lsls	r5, r3, #5
   1f24e:	5970      	ldr	r0, [r6, r5]
   1f250:	2800      	cmp	r0, #0
   1f252:	d03b      	beq.n	1f2cc <AppSlaveSecProcDmMsg+0x21c>
    pKey = AppDbGetKey(pCb->dbHdl, DM_KEY_LOCAL_LTK, &secLevel);
   1f254:	f10d 0217 	add.w	r2, sp, #23
   1f258:	2101      	movs	r1, #1
   1f25a:	f7f5 f9fb 	bl	14654 <AppDbGetKey>
  if (pKey != NULL)
   1f25e:	4603      	mov	r3, r0
   1f260:	b338      	cbz	r0, 1f2b2 <AppSlaveSecProcDmMsg+0x202>
    pCb->bondByLtk = !pCb->bonded;
   1f262:	4435      	add	r5, r6
    DmSecLtkRsp(pCb->connId, TRUE, secLevel, pKey->ltk.key);
   1f264:	f89d 2017 	ldrb.w	r2, [sp, #23]
    pCb->bondByLtk = !pCb->bonded;
   1f268:	796c      	ldrb	r4, [r5, #5]
    DmSecLtkRsp(pCb->connId, TRUE, secLevel, pKey->ltk.key);
   1f26a:	7928      	ldrb	r0, [r5, #4]
    pCb->bondByLtk = !pCb->bonded;
   1f26c:	fab4 f484 	clz	r4, r4
   1f270:	0964      	lsrs	r4, r4, #5
    DmSecLtkRsp(pCb->connId, TRUE, secLevel, pKey->ltk.key);
   1f272:	2101      	movs	r1, #1
    pCb->bondByLtk = !pCb->bonded;
   1f274:	71ac      	strb	r4, [r5, #6]
    DmSecLtkRsp(pCb->connId, TRUE, secLevel, pKey->ltk.key);
   1f276:	f7fa f973 	bl	19560 <DmSecLtkRsp>
}
   1f27a:	e782      	b.n	1f182 <AppSlaveSecProcDmMsg+0xd2>
  if ((pMsg->hdr.status == HCI_SUCCESS) && (pCb->dbHdl != APP_DB_HDL_NONE))
   1f27c:	78c2      	ldrb	r2, [r0, #3]
   1f27e:	2a00      	cmp	r2, #0
   1f280:	f47f af7f 	bne.w	1f182 <AppSlaveSecProcDmMsg+0xd2>
   1f284:	4a2e      	ldr	r2, [pc, #184]	; (1f340 <AppSlaveSecProcDmMsg+0x290>)
   1f286:	015b      	lsls	r3, r3, #5
   1f288:	58d0      	ldr	r0, [r2, r3]
   1f28a:	2800      	cmp	r0, #0
   1f28c:	f43f af79 	beq.w	1f182 <AppSlaveSecProcDmMsg+0xd2>
    AppDbSetPeerAddedToRl(pCb->dbHdl, TRUE);
   1f290:	2101      	movs	r1, #1
   1f292:	e009      	b.n	1f2a8 <AppSlaveSecProcDmMsg+0x1f8>
  if ((pMsg->hdr.status == HCI_SUCCESS) && (pCb->dbHdl != APP_DB_HDL_NONE))
   1f294:	78c1      	ldrb	r1, [r0, #3]
   1f296:	2900      	cmp	r1, #0
   1f298:	f47f af73 	bne.w	1f182 <AppSlaveSecProcDmMsg+0xd2>
   1f29c:	4a28      	ldr	r2, [pc, #160]	; (1f340 <AppSlaveSecProcDmMsg+0x290>)
   1f29e:	015b      	lsls	r3, r3, #5
   1f2a0:	58d0      	ldr	r0, [r2, r3]
   1f2a2:	2800      	cmp	r0, #0
   1f2a4:	f43f af6d 	beq.w	1f182 <AppSlaveSecProcDmMsg+0xd2>
}
   1f2a8:	b007      	add	sp, #28
   1f2aa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    AppDbSetPeerAddedToRl(pCb->dbHdl, FALSE);
   1f2ae:	f7f5 baeb 	b.w	14888 <AppDbSetPeerAddedToRl>
    pCb->bondByLtk = FALSE;
   1f2b2:	4435      	add	r5, r6
   1f2b4:	2300      	movs	r3, #0
    DmSecLtkRsp(pCb->connId, FALSE, 0, NULL);
   1f2b6:	7928      	ldrb	r0, [r5, #4]
    pCb->bondByLtk = FALSE;
   1f2b8:	71ab      	strb	r3, [r5, #6]
    DmSecLtkRsp(pCb->connId, FALSE, 0, NULL);
   1f2ba:	461a      	mov	r2, r3
   1f2bc:	4619      	mov	r1, r3
   1f2be:	f7fa f94f 	bl	19560 <DmSecLtkRsp>
}
   1f2c2:	e75e      	b.n	1f182 <AppSlaveSecProcDmMsg+0xd2>
    pCb->bondByPairing = (pMsg->pairInd.auth & pAppSecCfg->auth & DM_AUTH_BOND_FLAG) == DM_AUTH_BOND_FLAG;
   1f2c4:	7902      	ldrb	r2, [r0, #4]
   1f2c6:	4e1e      	ldr	r6, [pc, #120]	; (1f340 <AppSlaveSecProcDmMsg+0x290>)
   1f2c8:	015d      	lsls	r5, r3, #5
   1f2ca:	e72f      	b.n	1f12c <AppSlaveSecProcDmMsg+0x7c>
    if ((pMsg->ltkReqInd.encDiversifier != 0) ||
   1f2cc:	89e7      	ldrh	r7, [r4, #14]
   1f2ce:	3406      	adds	r4, #6
   1f2d0:	b977      	cbnz	r7, 1f2f0 <AppSlaveSecProcDmMsg+0x240>
        (memcmp(pMsg->ltkReqInd.randNum, calc128Zeros, SMP_RAND8_LEN) != 0))
   1f2d2:	491d      	ldr	r1, [pc, #116]	; (1f348 <AppSlaveSecProcDmMsg+0x298>)
   1f2d4:	2208      	movs	r2, #8
   1f2d6:	4620      	mov	r0, r4
   1f2d8:	f002 f886 	bl	213e8 <memcmp>
    if ((pMsg->ltkReqInd.encDiversifier != 0) ||
   1f2dc:	b940      	cbnz	r0, 1f2f0 <AppSlaveSecProcDmMsg+0x240>
    else if (appSlaveCb.inProgress)
   1f2de:	4b17      	ldr	r3, [pc, #92]	; (1f33c <AppSlaveSecProcDmMsg+0x28c>)
   1f2e0:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
   1f2e4:	2a00      	cmp	r2, #0
   1f2e6:	d0e4      	beq.n	1f2b2 <AppSlaveSecProcDmMsg+0x202>
      appSlaveCb.findLtk = TRUE;
   1f2e8:	2201      	movs	r2, #1
   1f2ea:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      return;
   1f2ee:	e748      	b.n	1f182 <AppSlaveSecProcDmMsg+0xd2>
      pCb->dbHdl = AppDbFindByLtkReq(pMsg->ltkReqInd.encDiversifier, pMsg->ltkReqInd.randNum);
   1f2f0:	4621      	mov	r1, r4
   1f2f2:	4638      	mov	r0, r7
   1f2f4:	f7f5 f96c 	bl	145d0 <AppDbFindByLtkReq>
   1f2f8:	5170      	str	r0, [r6, r5]
      if (pCb->dbHdl != APP_DB_HDL_NONE)
   1f2fa:	2800      	cmp	r0, #0
   1f2fc:	d0d9      	beq.n	1f2b2 <AppSlaveSecProcDmMsg+0x202>
        appSlaveCb.inProgress = FALSE;
   1f2fe:	4b0f      	ldr	r3, [pc, #60]	; (1f33c <AppSlaveSecProcDmMsg+0x28c>)
   1f300:	2200      	movs	r2, #0
   1f302:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
   1f306:	e7a5      	b.n	1f254 <AppSlaveSecProcDmMsg+0x1a4>
    DmSecCancelReq(pCb->connId, SMP_ERR_PAIRING_NOT_SUP);
   1f308:	4435      	add	r5, r6
   1f30a:	2105      	movs	r1, #5
   1f30c:	7928      	ldrb	r0, [r5, #4]
}
   1f30e:	b007      	add	sp, #28
   1f310:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    DmSecCancelReq(pCb->connId, SMP_ERR_PAIRING_NOT_SUP);
   1f314:	f7fa b824 	b.w	19360 <DmSecCancelReq>
      pCb->dbHdl = AppDbNewRecord(DmConnPeerAddrType(pCb->connId), DmConnPeerAddr(pCb->connId), FALSE);
   1f318:	f898 0004 	ldrb.w	r0, [r8, #4]
   1f31c:	9203      	str	r2, [sp, #12]
   1f31e:	f7f9 faa3 	bl	18868 <DmConnPeerAddrType>
   1f322:	4681      	mov	r9, r0
   1f324:	f898 0004 	ldrb.w	r0, [r8, #4]
   1f328:	f7f9 faa8 	bl	1887c <DmConnPeerAddr>
   1f32c:	9a03      	ldr	r2, [sp, #12]
   1f32e:	4601      	mov	r1, r0
   1f330:	4648      	mov	r0, r9
   1f332:	f7f5 f87d 	bl	14430 <AppDbNewRecord>
    rKeyDist = pAppSecCfg->rKeyDist;
   1f336:	6839      	ldr	r1, [r7, #0]
      pCb->dbHdl = AppDbNewRecord(DmConnPeerAddrType(pCb->connId), DmConnPeerAddr(pCb->connId), FALSE);
   1f338:	5170      	str	r0, [r6, r5]
   1f33a:	e706      	b.n	1f14a <AppSlaveSecProcDmMsg+0x9a>
   1f33c:	10005f48 	.word	0x10005f48
   1f340:	10005ecc 	.word	0x10005ecc
   1f344:	10005f3c 	.word	0x10005f3c
   1f348:	0002558c 	.word	0x0002558c

0001f34c <AppSetBondable>:
  appSlaveCb.bondable = bondable;
   1f34c:	4b01      	ldr	r3, [pc, #4]	; (1f354 <AppSetBondable+0x8>)
   1f34e:	f883 0054 	strb.w	r0, [r3, #84]	; 0x54
}
   1f352:	4770      	bx	lr
   1f354:	10005f48 	.word	0x10005f48

0001f358 <AppSlaveSecurityReq>:
{
   1f358:	b510      	push	{r4, lr}
   1f35a:	4604      	mov	r4, r0
  if (DmConnSecLevel(connId) == DM_SEC_LEVEL_NONE)
   1f35c:	f7f9 fac0 	bl	188e0 <DmConnSecLevel>
   1f360:	b100      	cbz	r0, 1f364 <AppSlaveSecurityReq+0xc>
}
   1f362:	bd10      	pop	{r4, pc}
    DmSecSlaveReq(connId, pAppSecCfg->auth);
   1f364:	4b03      	ldr	r3, [pc, #12]	; (1f374 <AppSlaveSecurityReq+0x1c>)
   1f366:	681b      	ldr	r3, [r3, #0]
   1f368:	4620      	mov	r0, r4
   1f36a:	7819      	ldrb	r1, [r3, #0]
}
   1f36c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    DmSecSlaveReq(connId, pAppSecCfg->auth);
   1f370:	f7fa b8e6 	b.w	19540 <DmSecSlaveReq>
   1f374:	10005f3c 	.word	0x10005f3c

0001f378 <AppSlaveIsAdvertising>:
    if (appSlaveCb.advState[i] < APP_ADV_STOPPED)
   1f378:	4b06      	ldr	r3, [pc, #24]	; (1f394 <AppSlaveIsAdvertising+0x1c>)
   1f37a:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
   1f37e:	2a02      	cmp	r2, #2
   1f380:	d906      	bls.n	1f390 <AppSlaveIsAdvertising+0x18>
   1f382:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
    {
      return TRUE;
   1f386:	2802      	cmp	r0, #2
   1f388:	bf8c      	ite	hi
   1f38a:	2000      	movhi	r0, #0
   1f38c:	2001      	movls	r0, #1
   1f38e:	4770      	bx	lr
   1f390:	2001      	movs	r0, #1
    }
  }

  return FALSE;
}
   1f392:	4770      	bx	lr
   1f394:	10005f48 	.word	0x10005f48

0001f398 <AppSlaveClearAllBondingInfo>:
 *  \Note   This API should not be used when Advertising (other than periodic advertising) is
 *          enabled. Otherwise, clearing the resolving list in the Controller may fail.
 */
/*************************************************************************************************/
void AppSlaveClearAllBondingInfo(void)
{
   1f398:	b508      	push	{r3, lr}
  /* clear all bonding info */
  AppClearAllBondingInfo();
   1f39a:	f7fe ff81 	bl	1e2a0 <AppClearAllBondingInfo>
  appSlaveCb.bondable = bondable;
   1f39e:	4b02      	ldr	r3, [pc, #8]	; (1f3a8 <AppSlaveClearAllBondingInfo+0x10>)
   1f3a0:	2201      	movs	r2, #1
   1f3a2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* make device bondable */
  AppSetBondable(TRUE);
}
   1f3a6:	bd08      	pop	{r3, pc}
   1f3a8:	10005f48 	.word	0x10005f48

0001f3ac <appSlaveLegAdvStop>:
 */
/*************************************************************************************************/
static void appSlaveLegAdvStop(dmEvt_t *pMsg)
{
  /* if legacy advertising PDUs are used with advertising extensions feature */
  if (pMsg->hdr.event == DM_ADV_SET_STOP_IND)
   1f3ac:	7883      	ldrb	r3, [r0, #2]
   1f3ae:	2b48      	cmp	r3, #72	; 0x48
   1f3b0:	d00f      	beq.n	1f3d2 <appSlaveLegAdvStop+0x26>
{
   1f3b2:	b530      	push	{r4, r5, lr}
      return;
    }
  }

  /* if advertising was stopped for change to advertising type */
  if (appSlaveCb.advTypeChanged[DM_ADV_HANDLE_DEFAULT])
   1f3b4:	4a21      	ldr	r2, [pc, #132]	; (1f43c <appSlaveLegAdvStop+0x90>)
   1f3b6:	f892 405b 	ldrb.w	r4, [r2, #91]	; 0x5b
{
   1f3ba:	b085      	sub	sp, #20
  if (appSlaveCb.advTypeChanged[DM_ADV_HANDLE_DEFAULT])
   1f3bc:	b96c      	cbnz	r4, 1f3da <appSlaveLegAdvStop+0x2e>
  appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]++;
   1f3be:	f892 3057 	ldrb.w	r3, [r2, #87]	; 0x57
   1f3c2:	3301      	adds	r3, #1
   1f3c4:	b2db      	uxtb	r3, r3
  if (appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] < APP_ADV_STOPPED)
   1f3c6:	2b02      	cmp	r3, #2
  appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]++;
   1f3c8:	f882 3057 	strb.w	r3, [r2, #87]	; 0x57
  if (appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] < APP_ADV_STOPPED)
   1f3cc:	d915      	bls.n	1f3fa <appSlaveLegAdvStop+0x4e>
  /* else advertising ended for another reason */
  else
  {
    appSlaveNextLegAdvState(pMsg);
  }
}
   1f3ce:	b005      	add	sp, #20
   1f3d0:	bd30      	pop	{r4, r5, pc}
    if (pMsg->advSetStop.status == HCI_SUCCESS)
   1f3d2:	7903      	ldrb	r3, [r0, #4]
   1f3d4:	2b00      	cmp	r3, #0
   1f3d6:	d1ec      	bne.n	1f3b2 <appSlaveLegAdvStop+0x6>
   1f3d8:	4770      	bx	lr
  interval = pAppAdvCfg->advInterval[appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]];
   1f3da:	4b19      	ldr	r3, [pc, #100]	; (1f440 <appSlaveLegAdvStop+0x94>)
  appSlaveCb.advTypeChanged[DM_ADV_HANDLE_DEFAULT] = FALSE;
   1f3dc:	2400      	movs	r4, #0
  interval = pAppAdvCfg->advInterval[appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]];
   1f3de:	681b      	ldr	r3, [r3, #0]
  appSlaveCb.advTypeChanged[DM_ADV_HANDLE_DEFAULT] = FALSE;
   1f3e0:	f882 405b 	strb.w	r4, [r2, #91]	; 0x5b
  appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STATE1;
   1f3e4:	f882 4057 	strb.w	r4, [r2, #87]	; 0x57
  interval = pAppAdvCfg->advInterval[appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]];
   1f3e8:	88d9      	ldrh	r1, [r3, #6]
   1f3ea:	f8ad 100e 	strh.w	r1, [sp, #14]
  if (interval > 0)
   1f3ee:	b9f9      	cbnz	r1, 1f430 <appSlaveLegAdvStop+0x84>
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STOPPED;
   1f3f0:	2303      	movs	r3, #3
   1f3f2:	f882 3057 	strb.w	r3, [r2, #87]	; 0x57
}
   1f3f6:	b005      	add	sp, #20
   1f3f8:	bd30      	pop	{r4, r5, pc}
  interval = pAppAdvCfg->advInterval[appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]];
   1f3fa:	4911      	ldr	r1, [pc, #68]	; (1f440 <appSlaveLegAdvStop+0x94>)
   1f3fc:	680d      	ldr	r5, [r1, #0]
   1f3fe:	eb05 0143 	add.w	r1, r5, r3, lsl #1
   1f402:	88c9      	ldrh	r1, [r1, #6]
   1f404:	f8ad 100e 	strh.w	r1, [sp, #14]
  if (interval > 0)
   1f408:	2900      	cmp	r1, #0
   1f40a:	d0f1      	beq.n	1f3f0 <appSlaveLegAdvStop+0x44>
    appAdvStart(1, &advHandle, &interval,
   1f40c:	2001      	movs	r0, #1
   1f40e:	f10d 020d 	add.w	r2, sp, #13
   1f412:	e9cd 2000 	strd	r2, r0, [sp]
   1f416:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   1f41a:	f10d 020e 	add.w	r2, sp, #14
   1f41e:	a903      	add	r1, sp, #12
    advHandle = DM_ADV_HANDLE_DEFAULT;
   1f420:	f88d 400c 	strb.w	r4, [sp, #12]
    maxEaEvents = 0;
   1f424:	f88d 400d 	strb.w	r4, [sp, #13]
    appAdvStart(1, &advHandle, &interval,
   1f428:	f7ff fbe8 	bl	1ebfc <appAdvStart>
}
   1f42c:	b005      	add	sp, #20
   1f42e:	bd30      	pop	{r4, r5, pc}
    appAdvStart(1, &advHandle, &interval,
   1f430:	2001      	movs	r0, #1
   1f432:	f10d 020d 	add.w	r2, sp, #13
   1f436:	e9cd 2000 	strd	r2, r0, [sp]
   1f43a:	e7ee      	b.n	1f41a <appSlaveLegAdvStop+0x6e>
   1f43c:	10005f48 	.word	0x10005f48
   1f440:	10005f30 	.word	0x10005f30

0001f444 <appSlaveLegAdvRestart>:
 */
/*************************************************************************************************/
static void appSlaveLegAdvRestart(dmEvt_t *pMsg)
{
  /* if connection closed */
  if (pMsg->hdr.event == DM_CONN_CLOSE_IND)
   1f444:	7883      	ldrb	r3, [r0, #2]
  {
    /* if connectable directed advertising failed to establish connection or was cancelled */
    if (appSlaveCb.advDirected)
   1f446:	4a1b      	ldr	r2, [pc, #108]	; (1f4b4 <appSlaveLegAdvRestart+0x70>)
  if (pMsg->hdr.event == DM_CONN_CLOSE_IND)
   1f448:	2b28      	cmp	r3, #40	; 0x28
   1f44a:	d01b      	beq.n	1f484 <appSlaveLegAdvRestart+0x40>
      appSlaveCb.advDirected = FALSE;
      return;
    }
  }
  /* else if connection opened */
  else if (pMsg->hdr.event == DM_CONN_OPEN_IND)
   1f44c:	2b27      	cmp	r3, #39	; 0x27
   1f44e:	d004      	beq.n	1f45a <appSlaveLegAdvRestart+0x16>
    /* advertising is stopped once a connection is opened */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STOPPED;
  }

  /* if advertising stopped restart advertising */
  if (appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] == APP_ADV_STOPPED)
   1f450:	f892 3057 	ldrb.w	r3, [r2, #87]	; 0x57
   1f454:	2b03      	cmp	r3, #3
   1f456:	d003      	beq.n	1f460 <appSlaveLegAdvRestart+0x1c>
   1f458:	4770      	bx	lr
    if (appSlaveCb.advDirected)
   1f45a:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   1f45e:	b9ab      	cbnz	r3, 1f48c <appSlaveLegAdvRestart+0x48>
{
   1f460:	b500      	push	{lr}
  interval = pAppAdvCfg->advInterval[appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]];
   1f462:	4b15      	ldr	r3, [pc, #84]	; (1f4b8 <appSlaveLegAdvRestart+0x74>)
  {
    /* set advertising state */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STATE1;
   1f464:	f04f 0c00 	mov.w	ip, #0
  interval = pAppAdvCfg->advInterval[appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]];
   1f468:	681b      	ldr	r3, [r3, #0]
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STATE1;
   1f46a:	f882 c057 	strb.w	ip, [r2, #87]	; 0x57
  interval = pAppAdvCfg->advInterval[appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]];
   1f46e:	88d9      	ldrh	r1, [r3, #6]
{
   1f470:	b085      	sub	sp, #20
  interval = pAppAdvCfg->advInterval[appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]];
   1f472:	f8ad 100e 	strh.w	r1, [sp, #14]
  if (interval > 0)
   1f476:	b969      	cbnz	r1, 1f494 <appSlaveLegAdvRestart+0x50>
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STOPPED;
   1f478:	2303      	movs	r3, #3
   1f47a:	f882 3057 	strb.w	r3, [r2, #87]	; 0x57

    /* start advertising */
    appSlaveLegAdvStart();
  }
}
   1f47e:	b005      	add	sp, #20
   1f480:	f85d fb04 	ldr.w	pc, [sp], #4
    if (appSlaveCb.advDirected)
   1f484:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   1f488:	2b00      	cmp	r3, #0
   1f48a:	d0e1      	beq.n	1f450 <appSlaveLegAdvRestart+0xc>
      appSlaveCb.advDirected = FALSE;
   1f48c:	2300      	movs	r3, #0
   1f48e:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
      return;
   1f492:	4770      	bx	lr
    appAdvStart(1, &advHandle, &interval,
   1f494:	f10d 020d 	add.w	r2, sp, #13
   1f498:	2001      	movs	r0, #1
   1f49a:	e9cd 2000 	strd	r2, r0, [sp]
   1f49e:	a903      	add	r1, sp, #12
   1f4a0:	f10d 020e 	add.w	r2, sp, #14
    advHandle = DM_ADV_HANDLE_DEFAULT;
   1f4a4:	f88d c00c 	strb.w	ip, [sp, #12]
    maxEaEvents = 0;
   1f4a8:	f88d c00d 	strb.w	ip, [sp, #13]
    appAdvStart(1, &advHandle, &interval,
   1f4ac:	f7ff fba6 	bl	1ebfc <appAdvStart>
   1f4b0:	e7e5      	b.n	1f47e <appSlaveLegAdvRestart+0x3a>
   1f4b2:	bf00      	nop
   1f4b4:	10005f48 	.word	0x10005f48
   1f4b8:	10005f30 	.word	0x10005f30

0001f4bc <AppAdvSetData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppAdvSetData(uint8_t location, uint8_t len, uint8_t *pData)
{
   1f4bc:	b510      	push	{r4, lr}
  if (appSlaveCb.advStopCback == NULL)
   1f4be:	4c10      	ldr	r4, [pc, #64]	; (1f500 <AppAdvSetData+0x44>)
   1f4c0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
{
   1f4c2:	b082      	sub	sp, #8
  if (appSlaveCb.advStopCback == NULL)
   1f4c4:	b143      	cbz	r3, 1f4d8 <AppAdvSetData+0x1c>
  if (appSlaveCb.advStopCback == appSlaveLegAdvStop)
   1f4c6:	4c0f      	ldr	r4, [pc, #60]	; (1f504 <AppAdvSetData+0x48>)
   1f4c8:	42a3      	cmp	r3, r4
   1f4ca:	d009      	beq.n	1f4e0 <AppAdvSetData+0x24>
  APP_TRACE_WARN0("Invalid DM advertising mode; mode configured as extended");
   1f4cc:	480e      	ldr	r0, [pc, #56]	; (1f508 <AppAdvSetData+0x4c>)
    }

    /* maximum advertising data length supported by Controller is 31 bytes */
    appAdvSetData(DM_ADV_HANDLE_DEFAULT, location, len, pData, HCI_ADV_DATA_LEN, HCI_ADV_DATA_LEN);
  }
}
   1f4ce:	b002      	add	sp, #8
   1f4d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  APP_TRACE_WARN0("Invalid DM advertising mode; mode configured as extended");
   1f4d4:	f7f4 bd1e 	b.w	13f14 <WsfTrace>
    appSlaveCb.advStopCback = appSlaveLegAdvStop;
   1f4d8:	4b0a      	ldr	r3, [pc, #40]	; (1f504 <AppAdvSetData+0x48>)
   1f4da:	67a3      	str	r3, [r4, #120]	; 0x78
    appSlaveCb.advRestartCback = appSlaveLegAdvRestart;
   1f4dc:	4b0b      	ldr	r3, [pc, #44]	; (1f50c <AppAdvSetData+0x50>)
   1f4de:	67e3      	str	r3, [r4, #124]	; 0x7c
    appAdvSetData(DM_ADV_HANDLE_DEFAULT, location, len, pData, HCI_ADV_DATA_LEN, HCI_ADV_DATA_LEN);
   1f4e0:	291f      	cmp	r1, #31
   1f4e2:	f04f 031f 	mov.w	r3, #31
   1f4e6:	e9cd 3300 	strd	r3, r3, [sp]
   1f4ea:	4613      	mov	r3, r2
   1f4ec:	460a      	mov	r2, r1
   1f4ee:	4601      	mov	r1, r0
   1f4f0:	bf28      	it	cs
   1f4f2:	221f      	movcs	r2, #31
   1f4f4:	2000      	movs	r0, #0
   1f4f6:	f7ff fb49 	bl	1eb8c <appAdvSetData>
}
   1f4fa:	b002      	add	sp, #8
   1f4fc:	bd10      	pop	{r4, pc}
   1f4fe:	bf00      	nop
   1f500:	10005f48 	.word	0x10005f48
   1f504:	0001f3ad 	.word	0x0001f3ad
   1f508:	00025848 	.word	0x00025848
   1f50c:	0001f445 	.word	0x0001f445

0001f510 <AppAdvStart>:
  if (appSlaveCb.advStopCback == NULL)
   1f510:	4a12      	ldr	r2, [pc, #72]	; (1f55c <AppAdvStart+0x4c>)
    appSlaveCb.advStopCback = appSlaveLegAdvStop;
   1f512:	4913      	ldr	r1, [pc, #76]	; (1f560 <AppAdvStart+0x50>)
  if (appSlaveCb.advStopCback == NULL)
   1f514:	6f93      	ldr	r3, [r2, #120]	; 0x78
   1f516:	b123      	cbz	r3, 1f522 <AppAdvStart+0x12>
  if (appSlaveCb.advStopCback == appSlaveLegAdvStop)
   1f518:	428b      	cmp	r3, r1
   1f51a:	d005      	beq.n	1f528 <AppAdvStart+0x18>
  APP_TRACE_WARN0("Invalid DM advertising mode; mode configured as extended");
   1f51c:	4811      	ldr	r0, [pc, #68]	; (1f564 <AppAdvStart+0x54>)
   1f51e:	f7f4 bcf9 	b.w	13f14 <WsfTrace>
    appSlaveCb.advRestartCback = appSlaveLegAdvRestart;
   1f522:	4b11      	ldr	r3, [pc, #68]	; (1f568 <AppAdvStart+0x58>)
   1f524:	e9c2 131e 	strd	r1, r3, [r2, #120]	; 0x78
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppAdvStart(uint8_t mode)
{
   1f528:	b530      	push	{r4, r5, lr}
    maxEaEvents = 0;

    /* initialize advertising state */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STATE1;

    appSlaveAdvStart(1, &advHandle, &(pAppAdvCfg->advInterval[APP_ADV_STATE1]),
   1f52a:	4b10      	ldr	r3, [pc, #64]	; (1f56c <AppAdvStart+0x5c>)
{
   1f52c:	b087      	sub	sp, #28
    appSlaveAdvStart(1, &advHandle, &(pAppAdvCfg->advInterval[APP_ADV_STATE1]),
   1f52e:	681b      	ldr	r3, [r3, #0]
   1f530:	9002      	str	r0, [sp, #8]
    advHandle = DM_ADV_HANDLE_DEFAULT;
   1f532:	2100      	movs	r1, #0
    appSlaveAdvStart(1, &advHandle, &(pAppAdvCfg->advInterval[APP_ADV_STATE1]),
   1f534:	2401      	movs	r4, #1
   1f536:	f10d 0517 	add.w	r5, sp, #23
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STATE1;
   1f53a:	f882 1057 	strb.w	r1, [r2, #87]	; 0x57
    advHandle = DM_ADV_HANDLE_DEFAULT;
   1f53e:	f88d 1016 	strb.w	r1, [sp, #22]
    maxEaEvents = 0;
   1f542:	f88d 1017 	strb.w	r1, [sp, #23]
    appSlaveAdvStart(1, &advHandle, &(pAppAdvCfg->advInterval[APP_ADV_STATE1]),
   1f546:	e9cd 5400 	strd	r5, r4, [sp]
   1f54a:	1d9a      	adds	r2, r3, #6
   1f54c:	4620      	mov	r0, r4
   1f54e:	f10d 0116 	add.w	r1, sp, #22
   1f552:	f7ff fc57 	bl	1ee04 <appSlaveAdvStart>
                     &(pAppAdvCfg->advDuration[APP_ADV_STATE1]), &maxEaEvents, TRUE, mode);
  }
}
   1f556:	b007      	add	sp, #28
   1f558:	bd30      	pop	{r4, r5, pc}
   1f55a:	bf00      	nop
   1f55c:	10005f48 	.word	0x10005f48
   1f560:	0001f3ad 	.word	0x0001f3ad
   1f564:	00025848 	.word	0x00025848
   1f568:	0001f445 	.word	0x0001f445
   1f56c:	10005f30 	.word	0x10005f30

0001f570 <AppAdvStop>:
  if (appSlaveCb.advStopCback == NULL)
   1f570:	4a0c      	ldr	r2, [pc, #48]	; (1f5a4 <AppAdvStop+0x34>)
   1f572:	6f93      	ldr	r3, [r2, #120]	; 0x78
   1f574:	b12b      	cbz	r3, 1f582 <AppAdvStop+0x12>
  if (appSlaveCb.advStopCback == appSlaveLegAdvStop)
   1f576:	4a0c      	ldr	r2, [pc, #48]	; (1f5a8 <AppAdvStop+0x38>)
   1f578:	4293      	cmp	r3, r2
   1f57a:	d006      	beq.n	1f58a <AppAdvStop+0x1a>
  APP_TRACE_WARN0("Invalid DM advertising mode; mode configured as extended");
   1f57c:	480b      	ldr	r0, [pc, #44]	; (1f5ac <AppAdvStop+0x3c>)
   1f57e:	f7f4 bcc9 	b.w	13f14 <WsfTrace>
    appSlaveCb.advStopCback = appSlaveLegAdvStop;
   1f582:	4909      	ldr	r1, [pc, #36]	; (1f5a8 <AppAdvStop+0x38>)
    appSlaveCb.advRestartCback = appSlaveLegAdvRestart;
   1f584:	4b0a      	ldr	r3, [pc, #40]	; (1f5b0 <AppAdvStop+0x40>)
   1f586:	e9c2 131e 	strd	r1, r3, [r2, #120]	; 0x78
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppAdvStop(void)
{
   1f58a:	b500      	push	{lr}
   1f58c:	b083      	sub	sp, #12
  uint8_t advHandle;

  if (appSlaveAdvMode())
  {
    advHandle = DM_ADV_HANDLE_DEFAULT;
   1f58e:	2300      	movs	r3, #0

    appAdvStop(1, &advHandle);
   1f590:	f10d 0107 	add.w	r1, sp, #7
   1f594:	2001      	movs	r0, #1
    advHandle = DM_ADV_HANDLE_DEFAULT;
   1f596:	f88d 3007 	strb.w	r3, [sp, #7]
    appAdvStop(1, &advHandle);
   1f59a:	f7ff fc0b 	bl	1edb4 <appAdvStop>
  }
}
   1f59e:	b003      	add	sp, #12
   1f5a0:	f85d fb04 	ldr.w	pc, [sp], #4
   1f5a4:	10005f48 	.word	0x10005f48
   1f5a8:	0001f3ad 	.word	0x0001f3ad
   1f5ac:	00025848 	.word	0x00025848
   1f5b0:	0001f445 	.word	0x0001f445

0001f5b4 <AppSetAdvPeerAddr>:
 *  \return None.
 */
/*************************************************************************************************/
void AppSetAdvPeerAddr(uint8_t peerAddrType, uint8_t *pPeerAddr)
{
  appSlaveCb.peerAddrType[DM_ADV_HANDLE_DEFAULT] = peerAddrType;
   1f5b4:	4b03      	ldr	r3, [pc, #12]	; (1f5c4 <AppSetAdvPeerAddr+0x10>)
{
   1f5b6:	4602      	mov	r2, r0
  appSlaveCb.peerAddrType[DM_ADV_HANDLE_DEFAULT] = peerAddrType;
   1f5b8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
  BdaCpy(appSlaveCb.peerAddr[DM_ADV_HANDLE_DEFAULT], pPeerAddr);
   1f5bc:	f103 005e 	add.w	r0, r3, #94	; 0x5e
   1f5c0:	f7fc bec8 	b.w	1c354 <BdaCpy>
   1f5c4:	10005f48 	.word	0x10005f48

0001f5c8 <AppConnAccept>:
 *
 *  \return Connection identifier.
 */
 /************************************************************************************************/
dmConnId_t AppConnAccept(uint8_t advType, uint8_t addrType, uint8_t *pAddr, appDbHdl_t dbHdl)
{
   1f5c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (appSlaveCb.advStopCback == NULL)
   1f5ca:	4e14      	ldr	r6, [pc, #80]	; (1f61c <AppConnAccept+0x54>)
   1f5cc:	6fb4      	ldr	r4, [r6, #120]	; 0x78
{
   1f5ce:	461d      	mov	r5, r3
   1f5d0:	b087      	sub	sp, #28
    appSlaveCb.advStopCback = appSlaveLegAdvStop;
   1f5d2:	4b13      	ldr	r3, [pc, #76]	; (1f620 <AppConnAccept+0x58>)
{
   1f5d4:	468c      	mov	ip, r1
   1f5d6:	4617      	mov	r7, r2
  if (appSlaveCb.advStopCback == NULL)
   1f5d8:	b13c      	cbz	r4, 1f5ea <AppConnAccept+0x22>
  if (appSlaveCb.advStopCback == appSlaveLegAdvStop)
   1f5da:	429c      	cmp	r4, r3
   1f5dc:	d008      	beq.n	1f5f0 <AppConnAccept+0x28>
  APP_TRACE_WARN0("Invalid DM advertising mode; mode configured as extended");
   1f5de:	4811      	ldr	r0, [pc, #68]	; (1f624 <AppConnAccept+0x5c>)
   1f5e0:	f7f4 fc98 	bl	13f14 <WsfTrace>
    }
  }
  else
  {
    /* wrong advertising mode */
    connId = DM_CONN_ID_NONE;
   1f5e4:	2000      	movs	r0, #0
  }

  return connId;
}
   1f5e6:	b007      	add	sp, #28
   1f5e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    appSlaveCb.advStopCback = appSlaveLegAdvStop;
   1f5ea:	67b3      	str	r3, [r6, #120]	; 0x78
    appSlaveCb.advRestartCback = appSlaveLegAdvRestart;
   1f5ec:	4b0e      	ldr	r3, [pc, #56]	; (1f628 <AppConnAccept+0x60>)
   1f5ee:	67f3      	str	r3, [r6, #124]	; 0x7c
    connId = appConnAccept(DM_ADV_HANDLE_DEFAULT, advType, pAppAdvCfg->advInterval[APP_ADV_STATE1],
   1f5f0:	4b0e      	ldr	r3, [pc, #56]	; (1f62c <AppConnAccept+0x64>)
   1f5f2:	681a      	ldr	r2, [r3, #0]
   1f5f4:	4601      	mov	r1, r0
   1f5f6:	2000      	movs	r0, #0
   1f5f8:	8813      	ldrh	r3, [r2, #0]
   1f5fa:	88d2      	ldrh	r2, [r2, #6]
   1f5fc:	f8cd c004 	str.w	ip, [sp, #4]
   1f600:	e9cd 7502 	strd	r7, r5, [sp, #8]
   1f604:	9004      	str	r0, [sp, #16]
   1f606:	9000      	str	r0, [sp, #0]
   1f608:	f7ff fc4e 	bl	1eea8 <appConnAccept>
    if (connId != DM_CONN_ID_NONE)
   1f60c:	2800      	cmp	r0, #0
   1f60e:	d0ea      	beq.n	1f5e6 <AppConnAccept+0x1e>
      appSlaveCb.advDirected = TRUE;
   1f610:	2301      	movs	r3, #1
   1f612:	f886 3075 	strb.w	r3, [r6, #117]	; 0x75
}
   1f616:	b007      	add	sp, #28
   1f618:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f61a:	bf00      	nop
   1f61c:	10005f48 	.word	0x10005f48
   1f620:	0001f3ad 	.word	0x0001f3ad
   1f624:	00025848 	.word	0x00025848
   1f628:	0001f445 	.word	0x0001f445
   1f62c:	10005f30 	.word	0x10005f30

0001f630 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   1f630:	b570      	push	{r4, r5, r6, lr}
   1f632:	4605      	mov	r5, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
   1f634:	f001 f8bc 	bl	207b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
   1f638:	4927      	ldr	r1, [pc, #156]	; (1f6d8 <pvPortMalloc+0xa8>)
   1f63a:	680a      	ldr	r2, [r1, #0]
   1f63c:	b972      	cbnz	r2, 1f65c <pvPortMalloc+0x2c>
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   1f63e:	4b27      	ldr	r3, [pc, #156]	; (1f6dc <pvPortMalloc+0xac>)

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
   1f640:	4827      	ldr	r0, [pc, #156]	; (1f6e0 <pvPortMalloc+0xb0>)
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   1f642:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
   1f646:	e9c0 3200 	strd	r3, r2, [r0]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
   1f64a:	4826      	ldr	r0, [pc, #152]	; (1f6e4 <pvPortMalloc+0xb4>)

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
   1f64c:	6018      	str	r0, [r3, #0]
	xEnd.pxNextFreeBlock = NULL;
   1f64e:	6002      	str	r2, [r0, #0]
			xHeapHasBeenInitialised = pdTRUE;
   1f650:	2201      	movs	r2, #1
   1f652:	600a      	str	r2, [r1, #0]
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
   1f654:	f643 72f8 	movw	r2, #16376	; 0x3ff8
   1f658:	6042      	str	r2, [r0, #4]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
   1f65a:	605a      	str	r2, [r3, #4]
		if( xWantedSize > 0 )
   1f65c:	b935      	cbnz	r5, 1f66c <pvPortMalloc+0x3c>
			vApplicationMallocFailedHook();
   1f65e:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
   1f660:	f001 f9ee 	bl	20a40 <xTaskResumeAll>
			vApplicationMallocFailedHook();
   1f664:	f7f0 ff2a 	bl	104bc <vApplicationMallocFailedHook>
}
   1f668:	4628      	mov	r0, r5
   1f66a:	bd70      	pop	{r4, r5, r6, pc}
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
   1f66c:	076b      	lsls	r3, r5, #29
			xWantedSize += heapSTRUCT_SIZE;
   1f66e:	f105 0408 	add.w	r4, r5, #8
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   1f672:	bf1c      	itt	ne
   1f674:	f024 0407 	bicne.w	r4, r4, #7
   1f678:	3408      	addne	r4, #8
		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
   1f67a:	1e62      	subs	r2, r4, #1
   1f67c:	f643 73f6 	movw	r3, #16374	; 0x3ff6
   1f680:	429a      	cmp	r2, r3
   1f682:	d8ec      	bhi.n	1f65e <pvPortMalloc+0x2e>
			pxBlock = xStart.pxNextFreeBlock;
   1f684:	4816      	ldr	r0, [pc, #88]	; (1f6e0 <pvPortMalloc+0xb0>)
   1f686:	6803      	ldr	r3, [r0, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   1f688:	e003      	b.n	1f692 <pvPortMalloc+0x62>
   1f68a:	681a      	ldr	r2, [r3, #0]
   1f68c:	b122      	cbz	r2, 1f698 <pvPortMalloc+0x68>
   1f68e:	4618      	mov	r0, r3
   1f690:	4613      	mov	r3, r2
   1f692:	6859      	ldr	r1, [r3, #4]
   1f694:	42a1      	cmp	r1, r4
   1f696:	d3f8      	bcc.n	1f68a <pvPortMalloc+0x5a>
			if( pxBlock != &xEnd )
   1f698:	4a12      	ldr	r2, [pc, #72]	; (1f6e4 <pvPortMalloc+0xb4>)
   1f69a:	4293      	cmp	r3, r2
   1f69c:	d0df      	beq.n	1f65e <pvPortMalloc+0x2e>
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   1f69e:	461d      	mov	r5, r3
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   1f6a0:	1b0a      	subs	r2, r1, r4
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   1f6a2:	f855 6b08 	ldr.w	r6, [r5], #8
   1f6a6:	6006      	str	r6, [r0, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   1f6a8:	2a10      	cmp	r2, #16
   1f6aa:	d90c      	bls.n	1f6c6 <pvPortMalloc+0x96>
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
   1f6ac:	191e      	adds	r6, r3, r4
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   1f6ae:	6072      	str	r2, [r6, #4]
					pxBlock->xBlockSize = xWantedSize;
   1f6b0:	605c      	str	r4, [r3, #4]
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   1f6b2:	6871      	ldr	r1, [r6, #4]
   1f6b4:	4b0a      	ldr	r3, [pc, #40]	; (1f6e0 <pvPortMalloc+0xb0>)
   1f6b6:	4618      	mov	r0, r3
   1f6b8:	681b      	ldr	r3, [r3, #0]
   1f6ba:	685a      	ldr	r2, [r3, #4]
   1f6bc:	428a      	cmp	r2, r1
   1f6be:	d3fa      	bcc.n	1f6b6 <pvPortMalloc+0x86>
   1f6c0:	6033      	str	r3, [r6, #0]
   1f6c2:	4621      	mov	r1, r4
   1f6c4:	6006      	str	r6, [r0, #0]
				xFreeBytesRemaining -= pxBlock->xBlockSize;
   1f6c6:	4a08      	ldr	r2, [pc, #32]	; (1f6e8 <pvPortMalloc+0xb8>)
   1f6c8:	6813      	ldr	r3, [r2, #0]
   1f6ca:	1a5b      	subs	r3, r3, r1
   1f6cc:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
   1f6ce:	f001 f9b7 	bl	20a40 <xTaskResumeAll>
}
   1f6d2:	4628      	mov	r0, r5
   1f6d4:	bd70      	pop	{r4, r5, r6, pc}
   1f6d6:	bf00      	nop
   1f6d8:	10009fd0 	.word	0x10009fd0
   1f6dc:	10005fd0 	.word	0x10005fd0
   1f6e0:	10009fd4 	.word	0x10009fd4
   1f6e4:	10009fc8 	.word	0x10009fc8
   1f6e8:	10002be4 	.word	0x10002be4

0001f6ec <vPortFree>:
	if( pv != NULL )
   1f6ec:	b1c0      	cbz	r0, 1f720 <vPortFree+0x34>
{
   1f6ee:	b538      	push	{r3, r4, r5, lr}
   1f6f0:	4604      	mov	r4, r0
		vTaskSuspendAll();
   1f6f2:	f001 f85d 	bl	207b0 <vTaskSuspendAll>
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
   1f6f6:	f854 1c04 	ldr.w	r1, [r4, #-4]
   1f6fa:	4b0a      	ldr	r3, [pc, #40]	; (1f724 <vPortFree+0x38>)
		puc -= heapSTRUCT_SIZE;
   1f6fc:	f1a4 0508 	sub.w	r5, r4, #8
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
   1f700:	4618      	mov	r0, r3
   1f702:	681b      	ldr	r3, [r3, #0]
   1f704:	685a      	ldr	r2, [r3, #4]
   1f706:	428a      	cmp	r2, r1
   1f708:	d3fa      	bcc.n	1f700 <vPortFree+0x14>
			xFreeBytesRemaining += pxLink->xBlockSize;
   1f70a:	4a07      	ldr	r2, [pc, #28]	; (1f728 <vPortFree+0x3c>)
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
   1f70c:	f844 3c08 	str.w	r3, [r4, #-8]
			xFreeBytesRemaining += pxLink->xBlockSize;
   1f710:	6813      	ldr	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
   1f712:	6005      	str	r5, [r0, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
   1f714:	440b      	add	r3, r1
   1f716:	6013      	str	r3, [r2, #0]
}
   1f718:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		( void ) xTaskResumeAll();
   1f71c:	f001 b990 	b.w	20a40 <xTaskResumeAll>
   1f720:	4770      	bx	lr
   1f722:	bf00      	nop
   1f724:	10009fd4 	.word	0x10009fd4
   1f728:	10002be4 	.word	0x10002be4

0001f72c <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
   1f72c:	b510      	push	{r4, lr}
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
   1f72e:	2018      	movs	r0, #24
   1f730:	f7ff ff7e 	bl	1f630 <pvPortMalloc>

		if( pxEventBits != NULL )
   1f734:	4604      	mov	r4, r0
   1f736:	b120      	cbz	r0, 1f742 <xEventGroupCreate+0x16>
		{
			pxEventBits->uxEventBits = 0;
   1f738:	2300      	movs	r3, #0
   1f73a:	f840 3b04 	str.w	r3, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
   1f73e:	f000 f8db 	bl	1f8f8 <vListInitialise>
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
	}
   1f742:	4620      	mov	r0, r4
   1f744:	bd10      	pop	{r4, pc}
   1f746:	bf00      	nop

0001f748 <xEventGroupWaitBits>:
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
   1f748:	b130      	cbz	r0, 1f758 <xEventGroupWaitBits+0x10>
{
   1f74a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
   1f74e:	f011 487f 	ands.w	r8, r1, #4278190080	; 0xff000000
   1f752:	460c      	mov	r4, r1
   1f754:	d001      	beq.n	1f75a <xEventGroupWaitBits+0x12>
   1f756:	e7fe      	b.n	1f756 <xEventGroupWaitBits+0xe>
	configASSERT( xEventGroup );
   1f758:	e7fe      	b.n	1f758 <xEventGroupWaitBits+0x10>
	configASSERT( uxBitsToWaitFor != 0 );
   1f75a:	b901      	cbnz	r1, 1f75e <xEventGroupWaitBits+0x16>
   1f75c:	e7fe      	b.n	1f75c <xEventGroupWaitBits+0x14>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1f75e:	4617      	mov	r7, r2
   1f760:	461e      	mov	r6, r3
   1f762:	4605      	mov	r5, r0
   1f764:	f001 fb9a 	bl	20e9c <xTaskGetSchedulerState>
   1f768:	b908      	cbnz	r0, 1f76e <xEventGroupWaitBits+0x26>
   1f76a:	9b08      	ldr	r3, [sp, #32]
   1f76c:	bb8b      	cbnz	r3, 1f7d2 <xEventGroupWaitBits+0x8a>
	}
	#endif

	vTaskSuspendAll();
   1f76e:	f001 f81f 	bl	207b0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
   1f772:	f8d5 9000 	ldr.w	r9, [r5]

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
   1f776:	b36e      	cbz	r6, 1f7d4 <xEventGroupWaitBits+0x8c>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
   1f778:	ea34 0309 	bics.w	r3, r4, r9
   1f77c:	d02d      	beq.n	1f7da <xEventGroupWaitBits+0x92>
		else if( xTicksToWait == ( TickType_t ) 0 )
   1f77e:	9b08      	ldr	r3, [sp, #32]
   1f780:	b393      	cbz	r3, 1f7e8 <xEventGroupWaitBits+0xa0>
			if( xClearOnExit != pdFALSE )
   1f782:	2f00      	cmp	r7, #0
   1f784:	bf16      	itet	ne
   1f786:	f04f 7880 	movne.w	r8, #16777216	; 0x1000000
   1f78a:	f04f 6180 	moveq.w	r1, #67108864	; 0x4000000
   1f78e:	f04f 61a0 	movne.w	r1, #83886080	; 0x5000000
			if( xWaitForAllBits != pdFALSE )
   1f792:	2e00      	cmp	r6, #0
   1f794:	bf08      	it	eq
   1f796:	4641      	moveq	r1, r8
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
   1f798:	4321      	orrs	r1, r4
   1f79a:	461a      	mov	r2, r3
   1f79c:	1d28      	adds	r0, r5, #4
   1f79e:	f001 fa07 	bl	20bb0 <vTaskPlaceOnUnorderedEventList>
	xAlreadyYielded = xTaskResumeAll();
   1f7a2:	f001 f94d 	bl	20a40 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
   1f7a6:	b948      	cbnz	r0, 1f7bc <xEventGroupWaitBits+0x74>
			portYIELD_WITHIN_API();
   1f7a8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1f7ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1f7b0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
   1f7b4:	f3bf 8f4f 	dsb	sy
   1f7b8:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
   1f7bc:	f001 fb7e 	bl	20ebc <uxTaskResetEventItemValue>
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
   1f7c0:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
		uxReturn = uxTaskResetEventItemValue();
   1f7c4:	4681      	mov	r9, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
   1f7c6:	d012      	beq.n	1f7ee <xEventGroupWaitBits+0xa6>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
   1f7c8:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
}
   1f7cc:	4648      	mov	r0, r9
   1f7ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1f7d2:	e7fe      	b.n	1f7d2 <xEventGroupWaitBits+0x8a>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
   1f7d4:	ea14 0f09 	tst.w	r4, r9
   1f7d8:	d0d1      	beq.n	1f77e <xEventGroupWaitBits+0x36>
			if( xClearOnExit != pdFALSE )
   1f7da:	b12f      	cbz	r7, 1f7e8 <xEventGroupWaitBits+0xa0>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
   1f7dc:	ea29 0404 	bic.w	r4, r9, r4
   1f7e0:	602c      	str	r4, [r5, #0]
	xAlreadyYielded = xTaskResumeAll();
   1f7e2:	f001 f92d 	bl	20a40 <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
   1f7e6:	e7f1      	b.n	1f7cc <xEventGroupWaitBits+0x84>
	xAlreadyYielded = xTaskResumeAll();
   1f7e8:	f001 f92a 	bl	20a40 <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
   1f7ec:	e7ee      	b.n	1f7cc <xEventGroupWaitBits+0x84>
			taskENTER_CRITICAL();
   1f7ee:	f7f4 fc11 	bl	14014 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
   1f7f2:	f8d5 9000 	ldr.w	r9, [r5]
	if( xWaitForAllBits == pdFALSE )
   1f7f6:	b94e      	cbnz	r6, 1f80c <xEventGroupWaitBits+0xc4>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
   1f7f8:	ea14 0f09 	tst.w	r4, r9
   1f7fc:	d003      	beq.n	1f806 <xEventGroupWaitBits+0xbe>
					if( xClearOnExit != pdFALSE )
   1f7fe:	b117      	cbz	r7, 1f806 <xEventGroupWaitBits+0xbe>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
   1f800:	ea29 0404 	bic.w	r4, r9, r4
   1f804:	602c      	str	r4, [r5, #0]
			taskEXIT_CRITICAL();
   1f806:	f7f4 fc1f 	bl	14048 <vPortExitCritical>
   1f80a:	e7dd      	b.n	1f7c8 <xEventGroupWaitBits+0x80>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
   1f80c:	ea34 0309 	bics.w	r3, r4, r9
   1f810:	d1f9      	bne.n	1f806 <xEventGroupWaitBits+0xbe>
   1f812:	e7f4      	b.n	1f7fe <xEventGroupWaitBits+0xb6>

0001f814 <xEventGroupSetBits>:
	configASSERT( xEventGroup );
   1f814:	b130      	cbz	r0, 1f824 <xEventGroupSetBits+0x10>
{
   1f816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
   1f81a:	f011 467f 	ands.w	r6, r1, #4278190080	; 0xff000000
   1f81e:	4688      	mov	r8, r1
   1f820:	d001      	beq.n	1f826 <xEventGroupSetBits+0x12>
   1f822:	e7fe      	b.n	1f822 <xEventGroupSetBits+0xe>
	configASSERT( xEventGroup );
   1f824:	e7fe      	b.n	1f824 <xEventGroupSetBits+0x10>
   1f826:	4605      	mov	r5, r0
	vTaskSuspendAll();
   1f828:	f000 ffc2 	bl	207b0 <vTaskSuspendAll>
		pxEventBits->uxEventBits |= uxBitsToSet;
   1f82c:	682b      	ldr	r3, [r5, #0]
		pxListItem = listGET_HEAD_ENTRY( pxList );
   1f82e:	692c      	ldr	r4, [r5, #16]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1f830:	f105 070c 	add.w	r7, r5, #12
		pxEventBits->uxEventBits |= uxBitsToSet;
   1f834:	ea48 0303 	orr.w	r3, r8, r3
		while( pxListItem != pxListEnd )
   1f838:	42a7      	cmp	r7, r4
		pxEventBits->uxEventBits |= uxBitsToSet;
   1f83a:	602b      	str	r3, [r5, #0]
		while( pxListItem != pxListEnd )
   1f83c:	d10c      	bne.n	1f858 <xEventGroupSetBits+0x44>
   1f83e:	e01c      	b.n	1f87a <xEventGroupSetBits+0x66>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
   1f840:	ea13 0f0c 	tst.w	r3, ip
   1f844:	d006      	beq.n	1f854 <xEventGroupSetBits+0x40>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
   1f846:	01d3      	lsls	r3, r2, #7
					uxBitsToClear |= uxBitsWaitedFor;
   1f848:	bf48      	it	mi
   1f84a:	ea46 060c 	orrmi.w	r6, r6, ip
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
   1f84e:	f001 fa8b 	bl	20d68 <vTaskRemoveFromUnorderedEventList>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
   1f852:	682b      	ldr	r3, [r5, #0]
		while( pxListItem != pxListEnd )
   1f854:	42a7      	cmp	r7, r4
   1f856:	d00e      	beq.n	1f876 <xEventGroupSetBits+0x62>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
   1f858:	4620      	mov	r0, r4
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
   1f85a:	f043 7100 	orr.w	r1, r3, #33554432	; 0x2000000
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
   1f85e:	6802      	ldr	r2, [r0, #0]
			pxNext = listGET_NEXT( pxListItem );
   1f860:	6864      	ldr	r4, [r4, #4]
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
   1f862:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
   1f866:	f022 4c7f 	bic.w	ip, r2, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
   1f86a:	d0e9      	beq.n	1f840 <xEventGroupSetBits+0x2c>
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
   1f86c:	ea3c 0e03 	bics.w	lr, ip, r3
   1f870:	d0e9      	beq.n	1f846 <xEventGroupSetBits+0x32>
		while( pxListItem != pxListEnd )
   1f872:	42a7      	cmp	r7, r4
   1f874:	d1f0      	bne.n	1f858 <xEventGroupSetBits+0x44>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
   1f876:	ea23 0306 	bic.w	r3, r3, r6
   1f87a:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
   1f87c:	f001 f8e0 	bl	20a40 <xTaskResumeAll>
}
   1f880:	6828      	ldr	r0, [r5, #0]
   1f882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f886:	bf00      	nop

0001f888 <vEventGroupSetBitsCallback>:
	configASSERT( xEventGroup );
   1f888:	b130      	cbz	r0, 1f898 <vEventGroupSetBitsCallback+0x10>
{
   1f88a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
   1f88e:	f011 467f 	ands.w	r6, r1, #4278190080	; 0xff000000
   1f892:	4688      	mov	r8, r1
   1f894:	d001      	beq.n	1f89a <vEventGroupSetBitsCallback+0x12>
   1f896:	e7fe      	b.n	1f896 <vEventGroupSetBitsCallback+0xe>
	configASSERT( xEventGroup );
   1f898:	e7fe      	b.n	1f898 <vEventGroupSetBitsCallback+0x10>
   1f89a:	4605      	mov	r5, r0
	vTaskSuspendAll();
   1f89c:	f000 ff88 	bl	207b0 <vTaskSuspendAll>
		pxEventBits->uxEventBits |= uxBitsToSet;
   1f8a0:	682b      	ldr	r3, [r5, #0]
		pxListItem = listGET_HEAD_ENTRY( pxList );
   1f8a2:	692c      	ldr	r4, [r5, #16]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1f8a4:	f105 070c 	add.w	r7, r5, #12
		pxEventBits->uxEventBits |= uxBitsToSet;
   1f8a8:	ea48 0303 	orr.w	r3, r8, r3
		while( pxListItem != pxListEnd )
   1f8ac:	42a7      	cmp	r7, r4
		pxEventBits->uxEventBits |= uxBitsToSet;
   1f8ae:	602b      	str	r3, [r5, #0]
		while( pxListItem != pxListEnd )
   1f8b0:	d10c      	bne.n	1f8cc <vEventGroupSetBitsCallback+0x44>
   1f8b2:	e01c      	b.n	1f8ee <vEventGroupSetBitsCallback+0x66>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
   1f8b4:	ea1c 0f03 	tst.w	ip, r3
   1f8b8:	d006      	beq.n	1f8c8 <vEventGroupSetBitsCallback+0x40>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
   1f8ba:	01d3      	lsls	r3, r2, #7
					uxBitsToClear |= uxBitsWaitedFor;
   1f8bc:	bf48      	it	mi
   1f8be:	ea46 060c 	orrmi.w	r6, r6, ip
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
   1f8c2:	f001 fa51 	bl	20d68 <vTaskRemoveFromUnorderedEventList>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
   1f8c6:	682b      	ldr	r3, [r5, #0]
		while( pxListItem != pxListEnd )
   1f8c8:	42a7      	cmp	r7, r4
   1f8ca:	d00e      	beq.n	1f8ea <vEventGroupSetBitsCallback+0x62>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
   1f8cc:	4620      	mov	r0, r4
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
   1f8ce:	f043 7100 	orr.w	r1, r3, #33554432	; 0x2000000
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
   1f8d2:	6802      	ldr	r2, [r0, #0]
			pxNext = listGET_NEXT( pxListItem );
   1f8d4:	6864      	ldr	r4, [r4, #4]
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
   1f8d6:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
   1f8da:	f022 4c7f 	bic.w	ip, r2, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
   1f8de:	d0e9      	beq.n	1f8b4 <vEventGroupSetBitsCallback+0x2c>
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
   1f8e0:	ea3c 0e03 	bics.w	lr, ip, r3
   1f8e4:	d0e9      	beq.n	1f8ba <vEventGroupSetBitsCallback+0x32>
		while( pxListItem != pxListEnd )
   1f8e6:	42a7      	cmp	r7, r4
   1f8e8:	d1f0      	bne.n	1f8cc <vEventGroupSetBitsCallback+0x44>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
   1f8ea:	ea23 0306 	bic.w	r3, r3, r6
   1f8ee:	602b      	str	r3, [r5, #0]
}
   1f8f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	( void ) xTaskResumeAll();
   1f8f4:	f001 b8a4 	b.w	20a40 <xTaskResumeAll>

0001f8f8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1f8f8:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1f8fc:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   1f900:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1f902:	e9c0 3101 	strd	r3, r1, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1f906:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   1f90a:	6002      	str	r2, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   1f90c:	4770      	bx	lr
   1f90e:	bf00      	nop

0001f910 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
   1f910:	2300      	movs	r3, #0
   1f912:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   1f914:	4770      	bx	lr
   1f916:	bf00      	nop

0001f918 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
   1f918:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   1f91a:	689a      	ldr	r2, [r3, #8]
   1f91c:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
   1f91e:	6802      	ldr	r2, [r0, #0]
{
   1f920:	b410      	push	{r4}
	pxIndex->pxPrevious->pxNext = pxNewListItem;
   1f922:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
   1f924:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
   1f926:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
   1f928:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
   1f92a:	6099      	str	r1, [r3, #8]
}
   1f92c:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
   1f930:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
   1f932:	6002      	str	r2, [r0, #0]
}
   1f934:	4770      	bx	lr
   1f936:	bf00      	nop

0001f938 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1f938:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   1f93a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   1f93c:	1c6b      	adds	r3, r5, #1
   1f93e:	d010      	beq.n	1f962 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
   1f940:	f100 0308 	add.w	r3, r0, #8
   1f944:	461c      	mov	r4, r3
   1f946:	685b      	ldr	r3, [r3, #4]
   1f948:	681a      	ldr	r2, [r3, #0]
   1f94a:	42aa      	cmp	r2, r5
   1f94c:	d9fa      	bls.n	1f944 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
   1f94e:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
   1f950:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
   1f952:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1f954:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   1f956:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
   1f958:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
   1f95a:	6108      	str	r0, [r1, #16]
}
   1f95c:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
   1f95e:	6002      	str	r2, [r0, #0]
}
   1f960:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
   1f962:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
   1f964:	6863      	ldr	r3, [r4, #4]
   1f966:	e7f2      	b.n	1f94e <vListInsert+0x16>

0001f968 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
   1f968:	6903      	ldr	r3, [r0, #16]
{
   1f96a:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1f96c:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   1f970:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1f972:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
   1f974:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   1f976:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   1f978:	bf08      	it	eq
   1f97a:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
   1f97c:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
   1f97e:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxContainer = NULL;
   1f982:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
   1f984:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
   1f986:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
   1f988:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
   1f98a:	6818      	ldr	r0, [r3, #0]
}
   1f98c:	4770      	bx	lr
   1f98e:	bf00      	nop

0001f990 <xQueueGenericCreate>:
	{
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1f990:	b358      	cbz	r0, 1f9ea <xQueueGenericCreate+0x5a>
	{
   1f992:	b570      	push	{r4, r5, r6, lr}
   1f994:	460e      	mov	r6, r1
   1f996:	4605      	mov	r5, r0

		if( uxItemSize == ( UBaseType_t ) 0 )
   1f998:	bb41      	cbnz	r1, 1f9ec <xQueueGenericCreate+0x5c>
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
   1f99a:	2048      	movs	r0, #72	; 0x48
   1f99c:	f7ff fe48 	bl	1f630 <pvPortMalloc>

		if( pxNewQueue != NULL )
   1f9a0:	4604      	mov	r4, r0
   1f9a2:	b370      	cbz	r0, 1fa02 <xQueueGenericCreate+0x72>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1f9a4:	6024      	str	r4, [r4, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
	pxNewQueue->uxItemSize = uxItemSize;
   1f9a6:	e9c4 560f 	strd	r5, r6, [r4, #60]	; 0x3c
	taskENTER_CRITICAL();
   1f9aa:	f7f4 fb33 	bl	14014 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   1f9ae:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
   1f9b2:	6821      	ldr	r1, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1f9b4:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   1f9b6:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   1f9ba:	1ad3      	subs	r3, r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   1f9bc:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   1f9be:	440b      	add	r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   1f9c0:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1f9c2:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
   1f9c4:	22ff      	movs	r2, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1f9c6:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   1f9c8:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1f9ca:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1f9ce:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
   1f9d2:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1f9d6:	f7ff ff8f 	bl	1f8f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1f9da:	f104 0024 	add.w	r0, r4, #36	; 0x24
   1f9de:	f7ff ff8b 	bl	1f8f8 <vListInitialise>
	taskEXIT_CRITICAL();
   1f9e2:	f7f4 fb31 	bl	14048 <vPortExitCritical>
	}
   1f9e6:	4620      	mov	r0, r4
   1f9e8:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1f9ea:	e7fe      	b.n	1f9ea <xQueueGenericCreate+0x5a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1f9ec:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
   1f9f0:	3048      	adds	r0, #72	; 0x48
   1f9f2:	f7ff fe1d 	bl	1f630 <pvPortMalloc>
		if( pxNewQueue != NULL )
   1f9f6:	4604      	mov	r4, r0
   1f9f8:	b118      	cbz	r0, 1fa02 <xQueueGenericCreate+0x72>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   1f9fa:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1f9fe:	6003      	str	r3, [r0, #0]
   1fa00:	e7d1      	b.n	1f9a6 <xQueueGenericCreate+0x16>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
   1fa02:	2400      	movs	r4, #0
	}
   1fa04:	4620      	mov	r0, r4
   1fa06:	bd70      	pop	{r4, r5, r6, pc}

0001fa08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1fa08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1fa0c:	b085      	sub	sp, #20
   1fa0e:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;

	configASSERT( pxQueue );
   1fa10:	b158      	cbz	r0, 1fa2a <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1fa12:	4688      	mov	r8, r1
   1fa14:	461f      	mov	r7, r3
   1fa16:	4604      	mov	r4, r0
   1fa18:	2900      	cmp	r1, #0
   1fa1a:	f000 808d 	beq.w	1fb38 <xQueueGenericSend+0x130>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1fa1e:	2f02      	cmp	r7, #2
   1fa20:	d104      	bne.n	1fa2c <xQueueGenericSend+0x24>
   1fa22:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1fa24:	2b01      	cmp	r3, #1
   1fa26:	d001      	beq.n	1fa2c <xQueueGenericSend+0x24>
   1fa28:	e7fe      	b.n	1fa28 <xQueueGenericSend+0x20>
	configASSERT( pxQueue );
   1fa2a:	e7fe      	b.n	1fa2a <xQueueGenericSend+0x22>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1fa2c:	f001 fa36 	bl	20e9c <xTaskGetSchedulerState>
   1fa30:	4605      	mov	r5, r0
   1fa32:	2800      	cmp	r0, #0
   1fa34:	f040 8086 	bne.w	1fb44 <xQueueGenericSend+0x13c>
   1fa38:	9b01      	ldr	r3, [sp, #4]
   1fa3a:	2b00      	cmp	r3, #0
   1fa3c:	f040 8081 	bne.w	1fb42 <xQueueGenericSend+0x13a>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1fa40:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskENTER_CRITICAL();
   1fa44:	f7f4 fae6 	bl	14014 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1fa48:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   1fa4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1fa4c:	429a      	cmp	r2, r3
   1fa4e:	f0c0 80ec 	bcc.w	1fc2a <xQueueGenericSend+0x222>
   1fa52:	2f02      	cmp	r7, #2
   1fa54:	f000 80d1 	beq.w	1fbfa <xQueueGenericSend+0x1f2>
				if( xTicksToWait == ( TickType_t ) 0 )
   1fa58:	9801      	ldr	r0, [sp, #4]
   1fa5a:	2800      	cmp	r0, #0
   1fa5c:	f000 80f4 	beq.w	1fc48 <xQueueGenericSend+0x240>
				else if( xEntryTimeSet == pdFALSE )
   1fa60:	2d00      	cmp	r5, #0
   1fa62:	f000 80c6 	beq.w	1fbf2 <xQueueGenericSend+0x1ea>
		taskEXIT_CRITICAL();
   1fa66:	f7f4 faef 	bl	14048 <vPortExitCritical>
		vTaskSuspendAll();
   1fa6a:	f000 fea1 	bl	207b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   1fa6e:	f7f4 fad1 	bl	14014 <vPortEnterCritical>
   1fa72:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   1fa76:	2bff      	cmp	r3, #255	; 0xff
   1fa78:	bf04      	itt	eq
   1fa7a:	2300      	moveq	r3, #0
   1fa7c:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
   1fa80:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   1fa84:	2bff      	cmp	r3, #255	; 0xff
   1fa86:	bf04      	itt	eq
   1fa88:	2300      	moveq	r3, #0
   1fa8a:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
   1fa8e:	f7f4 fadb 	bl	14048 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1fa92:	a901      	add	r1, sp, #4
   1fa94:	a802      	add	r0, sp, #8
   1fa96:	f001 f9a7 	bl	20de8 <xTaskCheckForTimeOut>
   1fa9a:	2800      	cmp	r0, #0
   1fa9c:	f040 80d9 	bne.w	1fc52 <xQueueGenericSend+0x24a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1faa0:	f7f4 fab8 	bl	14014 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1faa4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   1faa6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1faa8:	429a      	cmp	r2, r3
   1faaa:	d04d      	beq.n	1fb48 <xQueueGenericSend+0x140>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
   1faac:	f7f4 facc 	bl	14048 <vPortExitCritical>
	taskENTER_CRITICAL();
   1fab0:	f7f4 fab0 	bl	14014 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
   1fab4:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
   1fab8:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1faba:	2d00      	cmp	r5, #0
   1fabc:	dc04      	bgt.n	1fac8 <xQueueGenericSend+0xc0>
   1fabe:	e011      	b.n	1fae4 <xQueueGenericSend+0xdc>
			--cTxLock;
   1fac0:	1e6a      	subs	r2, r5, #1
   1fac2:	b2d3      	uxtb	r3, r2
   1fac4:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1fac6:	b16b      	cbz	r3, 1fae4 <xQueueGenericSend+0xdc>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1fac8:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1faca:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1facc:	b153      	cbz	r3, 1fae4 <xQueueGenericSend+0xdc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1face:	f001 f8f7 	bl	20cc0 <xTaskRemoveFromEventList>
   1fad2:	2800      	cmp	r0, #0
   1fad4:	d0f4      	beq.n	1fac0 <xQueueGenericSend+0xb8>
						vTaskMissedYield();
   1fad6:	f001 f9bf 	bl	20e58 <vTaskMissedYield>
			--cTxLock;
   1fada:	1e6a      	subs	r2, r5, #1
   1fadc:	b2d3      	uxtb	r3, r2
   1fade:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1fae0:	2b00      	cmp	r3, #0
   1fae2:	d1f1      	bne.n	1fac8 <xQueueGenericSend+0xc0>
		pxQueue->cTxLock = queueUNLOCKED;
   1fae4:	23ff      	movs	r3, #255	; 0xff
   1fae6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
   1faea:	f7f4 faad 	bl	14048 <vPortExitCritical>
	taskENTER_CRITICAL();
   1faee:	f7f4 fa91 	bl	14014 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
   1faf2:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   1faf6:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1faf8:	2d00      	cmp	r5, #0
   1fafa:	dd14      	ble.n	1fb26 <xQueueGenericSend+0x11e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1fafc:	f104 0910 	add.w	r9, r4, #16
   1fb00:	e003      	b.n	1fb0a <xQueueGenericSend+0x102>
				--cRxLock;
   1fb02:	1e6a      	subs	r2, r5, #1
   1fb04:	b2d3      	uxtb	r3, r2
   1fb06:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1fb08:	b16b      	cbz	r3, 1fb26 <xQueueGenericSend+0x11e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1fb0a:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1fb0c:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1fb0e:	b153      	cbz	r3, 1fb26 <xQueueGenericSend+0x11e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1fb10:	f001 f8d6 	bl	20cc0 <xTaskRemoveFromEventList>
   1fb14:	2800      	cmp	r0, #0
   1fb16:	d0f4      	beq.n	1fb02 <xQueueGenericSend+0xfa>
					vTaskMissedYield();
   1fb18:	f001 f99e 	bl	20e58 <vTaskMissedYield>
				--cRxLock;
   1fb1c:	1e6a      	subs	r2, r5, #1
   1fb1e:	b2d3      	uxtb	r3, r2
   1fb20:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1fb22:	2b00      	cmp	r3, #0
   1fb24:	d1f1      	bne.n	1fb0a <xQueueGenericSend+0x102>
		pxQueue->cRxLock = queueUNLOCKED;
   1fb26:	23ff      	movs	r3, #255	; 0xff
   1fb28:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
   1fb2c:	f7f4 fa8c 	bl	14048 <vPortExitCritical>
				( void ) xTaskResumeAll();
   1fb30:	f000 ff86 	bl	20a40 <xTaskResumeAll>
   1fb34:	2501      	movs	r5, #1
   1fb36:	e785      	b.n	1fa44 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1fb38:	6c03      	ldr	r3, [r0, #64]	; 0x40
   1fb3a:	2b00      	cmp	r3, #0
   1fb3c:	f43f af6f 	beq.w	1fa1e <xQueueGenericSend+0x16>
   1fb40:	e7fe      	b.n	1fb40 <xQueueGenericSend+0x138>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1fb42:	e7fe      	b.n	1fb42 <xQueueGenericSend+0x13a>
   1fb44:	2500      	movs	r5, #0
   1fb46:	e77b      	b.n	1fa40 <xQueueGenericSend+0x38>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1fb48:	f104 0910 	add.w	r9, r4, #16
	taskEXIT_CRITICAL();
   1fb4c:	f7f4 fa7c 	bl	14048 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1fb50:	9901      	ldr	r1, [sp, #4]
   1fb52:	4648      	mov	r0, r9
   1fb54:	f000 fff0 	bl	20b38 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
   1fb58:	f7f4 fa5c 	bl	14014 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
   1fb5c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   1fb60:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1fb62:	2d00      	cmp	r5, #0
   1fb64:	dc04      	bgt.n	1fb70 <xQueueGenericSend+0x168>
   1fb66:	e011      	b.n	1fb8c <xQueueGenericSend+0x184>
			--cTxLock;
   1fb68:	1e6b      	subs	r3, r5, #1
   1fb6a:	b2da      	uxtb	r2, r3
   1fb6c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1fb6e:	b16a      	cbz	r2, 1fb8c <xQueueGenericSend+0x184>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1fb70:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1fb72:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1fb74:	b153      	cbz	r3, 1fb8c <xQueueGenericSend+0x184>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1fb76:	f001 f8a3 	bl	20cc0 <xTaskRemoveFromEventList>
   1fb7a:	2800      	cmp	r0, #0
   1fb7c:	d0f4      	beq.n	1fb68 <xQueueGenericSend+0x160>
						vTaskMissedYield();
   1fb7e:	f001 f96b 	bl	20e58 <vTaskMissedYield>
			--cTxLock;
   1fb82:	1e6b      	subs	r3, r5, #1
   1fb84:	b2da      	uxtb	r2, r3
   1fb86:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1fb88:	2a00      	cmp	r2, #0
   1fb8a:	d1f1      	bne.n	1fb70 <xQueueGenericSend+0x168>
		pxQueue->cTxLock = queueUNLOCKED;
   1fb8c:	23ff      	movs	r3, #255	; 0xff
   1fb8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
   1fb92:	f7f4 fa59 	bl	14048 <vPortExitCritical>
	taskENTER_CRITICAL();
   1fb96:	f7f4 fa3d 	bl	14014 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
   1fb9a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   1fb9e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1fba0:	2d00      	cmp	r5, #0
   1fba2:	dc04      	bgt.n	1fbae <xQueueGenericSend+0x1a6>
   1fba4:	e011      	b.n	1fbca <xQueueGenericSend+0x1c2>
				--cRxLock;
   1fba6:	1e6b      	subs	r3, r5, #1
   1fba8:	b2da      	uxtb	r2, r3
   1fbaa:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1fbac:	b16a      	cbz	r2, 1fbca <xQueueGenericSend+0x1c2>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1fbae:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1fbb0:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1fbb2:	b153      	cbz	r3, 1fbca <xQueueGenericSend+0x1c2>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1fbb4:	f001 f884 	bl	20cc0 <xTaskRemoveFromEventList>
   1fbb8:	2800      	cmp	r0, #0
   1fbba:	d0f4      	beq.n	1fba6 <xQueueGenericSend+0x19e>
					vTaskMissedYield();
   1fbbc:	f001 f94c 	bl	20e58 <vTaskMissedYield>
				--cRxLock;
   1fbc0:	1e6b      	subs	r3, r5, #1
   1fbc2:	b2da      	uxtb	r2, r3
   1fbc4:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1fbc6:	2a00      	cmp	r2, #0
   1fbc8:	d1f1      	bne.n	1fbae <xQueueGenericSend+0x1a6>
		pxQueue->cRxLock = queueUNLOCKED;
   1fbca:	23ff      	movs	r3, #255	; 0xff
   1fbcc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
   1fbd0:	f7f4 fa3a 	bl	14048 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
   1fbd4:	f000 ff34 	bl	20a40 <xTaskResumeAll>
   1fbd8:	2800      	cmp	r0, #0
   1fbda:	d1ab      	bne.n	1fb34 <xQueueGenericSend+0x12c>
					portYIELD_WITHIN_API();
   1fbdc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1fbe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1fbe4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
   1fbe8:	f3bf 8f4f 	dsb	sy
   1fbec:	f3bf 8f6f 	isb	sy
   1fbf0:	e7a0      	b.n	1fb34 <xQueueGenericSend+0x12c>
					vTaskInternalSetTimeOutState( &xTimeOut );
   1fbf2:	a802      	add	r0, sp, #8
   1fbf4:	f001 f8ec 	bl	20dd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   1fbf8:	e735      	b.n	1fa66 <xQueueGenericSend+0x5e>
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1fbfa:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1fbfc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1fbfe:	b1c2      	cbz	r2, 1fc32 <xQueueGenericSend+0x22a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
   1fc00:	4641      	mov	r1, r8
   1fc02:	68e0      	ldr	r0, [r4, #12]
   1fc04:	f7ec fa7c 	bl	c100 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   1fc08:	6c22      	ldr	r2, [r4, #64]	; 0x40
   1fc0a:	68e3      	ldr	r3, [r4, #12]
   1fc0c:	4251      	negs	r1, r2
   1fc0e:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1fc10:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   1fc12:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1fc14:	4293      	cmp	r3, r2
   1fc16:	d204      	bcs.n	1fc22 <xQueueGenericSend+0x21a>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
   1fc18:	68a3      	ldr	r3, [r4, #8]
   1fc1a:	440b      	add	r3, r1
   1fc1c:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
   1fc1e:	2f02      	cmp	r7, #2
   1fc20:	d107      	bne.n	1fc32 <xQueueGenericSend+0x22a>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1fc22:	2d01      	cmp	r5, #1
   1fc24:	bf38      	it	cc
   1fc26:	2501      	movcc	r5, #1
   1fc28:	e004      	b.n	1fc34 <xQueueGenericSend+0x22c>
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1fc2a:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1fc2c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1fc2e:	2a00      	cmp	r2, #0
   1fc30:	d15e      	bne.n	1fcf0 <xQueueGenericSend+0x2e8>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1fc32:	3501      	adds	r5, #1
   1fc34:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1fc36:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1fc38:	2b00      	cmp	r3, #0
   1fc3a:	d148      	bne.n	1fcce <xQueueGenericSend+0x2c6>
				taskEXIT_CRITICAL();
   1fc3c:	f7f4 fa04 	bl	14048 <vPortExitCritical>
				return pdPASS;
   1fc40:	2001      	movs	r0, #1
}
   1fc42:	b005      	add	sp, #20
   1fc44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1fc48:	9000      	str	r0, [sp, #0]
					taskEXIT_CRITICAL();
   1fc4a:	f7f4 f9fd 	bl	14048 <vPortExitCritical>
					return errQUEUE_FULL;
   1fc4e:	9800      	ldr	r0, [sp, #0]
   1fc50:	e7f7      	b.n	1fc42 <xQueueGenericSend+0x23a>
	taskENTER_CRITICAL();
   1fc52:	f7f4 f9df 	bl	14014 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
   1fc56:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   1fc5a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1fc5c:	2d00      	cmp	r5, #0
   1fc5e:	dd10      	ble.n	1fc82 <xQueueGenericSend+0x27a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1fc60:	f104 0624 	add.w	r6, r4, #36	; 0x24
   1fc64:	e003      	b.n	1fc6e <xQueueGenericSend+0x266>
			--cTxLock;
   1fc66:	1e6b      	subs	r3, r5, #1
   1fc68:	b2da      	uxtb	r2, r3
   1fc6a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1fc6c:	b14a      	cbz	r2, 1fc82 <xQueueGenericSend+0x27a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1fc6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1fc70:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1fc72:	b133      	cbz	r3, 1fc82 <xQueueGenericSend+0x27a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1fc74:	f001 f824 	bl	20cc0 <xTaskRemoveFromEventList>
   1fc78:	2800      	cmp	r0, #0
   1fc7a:	d0f4      	beq.n	1fc66 <xQueueGenericSend+0x25e>
						vTaskMissedYield();
   1fc7c:	f001 f8ec 	bl	20e58 <vTaskMissedYield>
   1fc80:	e7f1      	b.n	1fc66 <xQueueGenericSend+0x25e>
		pxQueue->cTxLock = queueUNLOCKED;
   1fc82:	23ff      	movs	r3, #255	; 0xff
   1fc84:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
   1fc88:	f7f4 f9de 	bl	14048 <vPortExitCritical>
	taskENTER_CRITICAL();
   1fc8c:	f7f4 f9c2 	bl	14014 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
   1fc90:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   1fc94:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1fc96:	2d00      	cmp	r5, #0
   1fc98:	dd10      	ble.n	1fcbc <xQueueGenericSend+0x2b4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1fc9a:	f104 0610 	add.w	r6, r4, #16
   1fc9e:	e003      	b.n	1fca8 <xQueueGenericSend+0x2a0>
				--cRxLock;
   1fca0:	1e6b      	subs	r3, r5, #1
   1fca2:	b2da      	uxtb	r2, r3
   1fca4:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1fca6:	b14a      	cbz	r2, 1fcbc <xQueueGenericSend+0x2b4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1fca8:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1fcaa:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1fcac:	b133      	cbz	r3, 1fcbc <xQueueGenericSend+0x2b4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1fcae:	f001 f807 	bl	20cc0 <xTaskRemoveFromEventList>
   1fcb2:	2800      	cmp	r0, #0
   1fcb4:	d0f4      	beq.n	1fca0 <xQueueGenericSend+0x298>
					vTaskMissedYield();
   1fcb6:	f001 f8cf 	bl	20e58 <vTaskMissedYield>
   1fcba:	e7f1      	b.n	1fca0 <xQueueGenericSend+0x298>
		pxQueue->cRxLock = queueUNLOCKED;
   1fcbc:	23ff      	movs	r3, #255	; 0xff
   1fcbe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
   1fcc2:	f7f4 f9c1 	bl	14048 <vPortExitCritical>
			( void ) xTaskResumeAll();
   1fcc6:	f000 febb 	bl	20a40 <xTaskResumeAll>
			return errQUEUE_FULL;
   1fcca:	2000      	movs	r0, #0
   1fccc:	e7b9      	b.n	1fc42 <xQueueGenericSend+0x23a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1fcce:	f104 0024 	add.w	r0, r4, #36	; 0x24
   1fcd2:	f000 fff5 	bl	20cc0 <xTaskRemoveFromEventList>
   1fcd6:	2800      	cmp	r0, #0
   1fcd8:	d0b0      	beq.n	1fc3c <xQueueGenericSend+0x234>
							queueYIELD_IF_USING_PREEMPTION();
   1fcda:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1fcde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1fce2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
   1fce6:	f3bf 8f4f 	dsb	sy
   1fcea:	f3bf 8f6f 	isb	sy
   1fcee:	e7a5      	b.n	1fc3c <xQueueGenericSend+0x234>
	else if( xPosition == queueSEND_TO_BACK )
   1fcf0:	b977      	cbnz	r7, 1fd10 <xQueueGenericSend+0x308>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
   1fcf2:	4641      	mov	r1, r8
   1fcf4:	6860      	ldr	r0, [r4, #4]
   1fcf6:	f7ec fa03 	bl	c100 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   1fcfa:	6863      	ldr	r3, [r4, #4]
   1fcfc:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1fcfe:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   1fd00:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1fd02:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   1fd04:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1fd06:	d394      	bcc.n	1fc32 <xQueueGenericSend+0x22a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1fd08:	6823      	ldr	r3, [r4, #0]
   1fd0a:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1fd0c:	3501      	adds	r5, #1
   1fd0e:	e791      	b.n	1fc34 <xQueueGenericSend+0x22c>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
   1fd10:	4641      	mov	r1, r8
   1fd12:	68e0      	ldr	r0, [r4, #12]
   1fd14:	f7ec f9f4 	bl	c100 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   1fd18:	6c22      	ldr	r2, [r4, #64]	; 0x40
   1fd1a:	68e3      	ldr	r3, [r4, #12]
   1fd1c:	4251      	negs	r1, r2
   1fd1e:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1fd20:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   1fd22:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1fd24:	4293      	cmp	r3, r2
   1fd26:	f4bf af7a 	bcs.w	1fc1e <xQueueGenericSend+0x216>
   1fd2a:	e775      	b.n	1fc18 <xQueueGenericSend+0x210>

0001fd2c <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
   1fd2c:	b160      	cbz	r0, 1fd48 <xQueueGenericSendFromISR+0x1c>
{
   1fd2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1fd32:	460e      	mov	r6, r1
   1fd34:	4617      	mov	r7, r2
   1fd36:	461d      	mov	r5, r3
   1fd38:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1fd3a:	b1e9      	cbz	r1, 1fd78 <xQueueGenericSendFromISR+0x4c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1fd3c:	2d02      	cmp	r5, #2
   1fd3e:	d104      	bne.n	1fd4a <xQueueGenericSendFromISR+0x1e>
   1fd40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1fd42:	2b01      	cmp	r3, #1
   1fd44:	d001      	beq.n	1fd4a <xQueueGenericSendFromISR+0x1e>
   1fd46:	e7fe      	b.n	1fd46 <xQueueGenericSendFromISR+0x1a>
	configASSERT( pxQueue );
   1fd48:	e7fe      	b.n	1fd48 <xQueueGenericSendFromISR+0x1c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   1fd4a:	f7f4 f9d1 	bl	140f0 <vPortValidateInterruptPriority>
	__asm volatile
   1fd4e:	f3ef 8a11 	mrs	sl, BASEPRI
   1fd52:	f04f 0380 	mov.w	r3, #128	; 0x80
   1fd56:	f383 8811 	msr	BASEPRI, r3
   1fd5a:	f3bf 8f6f 	isb	sy
   1fd5e:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1fd62:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   1fd64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1fd66:	429a      	cmp	r2, r3
   1fd68:	d339      	bcc.n	1fdde <xQueueGenericSendFromISR+0xb2>
   1fd6a:	2d02      	cmp	r5, #2
   1fd6c:	d008      	beq.n	1fd80 <xQueueGenericSendFromISR+0x54>
			xReturn = errQUEUE_FULL;
   1fd6e:	2000      	movs	r0, #0
	__asm volatile
   1fd70:	f38a 8811 	msr	BASEPRI, sl
}
   1fd74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1fd78:	6c03      	ldr	r3, [r0, #64]	; 0x40
   1fd7a:	2b00      	cmp	r3, #0
   1fd7c:	d0de      	beq.n	1fd3c <xQueueGenericSendFromISR+0x10>
   1fd7e:	e7fe      	b.n	1fd7e <xQueueGenericSendFromISR+0x52>
			const int8_t cTxLock = pxQueue->cTxLock;
   1fd80:	f894 8045 	ldrb.w	r8, [r4, #69]	; 0x45
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1fd84:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1fd86:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
   1fd8a:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1fd8e:	b1b2      	cbz	r2, 1fdbe <xQueueGenericSendFromISR+0x92>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
   1fd90:	4631      	mov	r1, r6
   1fd92:	68e0      	ldr	r0, [r4, #12]
   1fd94:	f7ec f9b4 	bl	c100 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   1fd98:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1fd9a:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1fd9c:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   1fd9e:	1ad2      	subs	r2, r2, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1fda0:	428a      	cmp	r2, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   1fda2:	60e2      	str	r2, [r4, #12]
   1fda4:	f1c3 0300 	rsb	r3, r3, #0
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1fda8:	d204      	bcs.n	1fdb4 <xQueueGenericSendFromISR+0x88>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
   1fdaa:	68a2      	ldr	r2, [r4, #8]
   1fdac:	4413      	add	r3, r2
   1fdae:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
   1fdb0:	2d02      	cmp	r5, #2
   1fdb2:	d104      	bne.n	1fdbe <xQueueGenericSendFromISR+0x92>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1fdb4:	464b      	mov	r3, r9
   1fdb6:	2b01      	cmp	r3, #1
   1fdb8:	bf38      	it	cc
   1fdba:	2301      	movcc	r3, #1
   1fdbc:	e001      	b.n	1fdc2 <xQueueGenericSendFromISR+0x96>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1fdbe:	f109 0301 	add.w	r3, r9, #1
			if( cTxLock == queueUNLOCKED )
   1fdc2:	f1b8 3fff 	cmp.w	r8, #4294967295
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1fdc6:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
   1fdc8:	d023      	beq.n	1fe12 <xQueueGenericSendFromISR+0xe6>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1fdca:	f108 0301 	add.w	r3, r8, #1
   1fdce:	b25b      	sxtb	r3, r3
   1fdd0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
   1fdd4:	2001      	movs	r0, #1
   1fdd6:	f38a 8811 	msr	BASEPRI, sl
}
   1fdda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
   1fdde:	f894 8045 	ldrb.w	r8, [r4, #69]	; 0x45
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1fde2:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1fde4:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
   1fde8:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1fdec:	2a00      	cmp	r2, #0
   1fdee:	d0e6      	beq.n	1fdbe <xQueueGenericSendFromISR+0x92>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
   1fdf0:	4631      	mov	r1, r6
	else if( xPosition == queueSEND_TO_BACK )
   1fdf2:	b9e5      	cbnz	r5, 1fe2e <xQueueGenericSendFromISR+0x102>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
   1fdf4:	6860      	ldr	r0, [r4, #4]
   1fdf6:	f7ec f983 	bl	c100 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   1fdfa:	6863      	ldr	r3, [r4, #4]
   1fdfc:	6c22      	ldr	r2, [r4, #64]	; 0x40
   1fdfe:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1fe00:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   1fe02:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1fe04:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1fe06:	bf24      	itt	cs
   1fe08:	6822      	ldrcs	r2, [r4, #0]
   1fe0a:	6062      	strcs	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1fe0c:	f109 0301 	add.w	r3, r9, #1
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1fe10:	e7d7      	b.n	1fdc2 <xQueueGenericSendFromISR+0x96>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1fe12:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1fe14:	2b00      	cmp	r3, #0
   1fe16:	d0dd      	beq.n	1fdd4 <xQueueGenericSendFromISR+0xa8>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1fe18:	f104 0024 	add.w	r0, r4, #36	; 0x24
   1fe1c:	f000 ff50 	bl	20cc0 <xTaskRemoveFromEventList>
   1fe20:	2800      	cmp	r0, #0
   1fe22:	d0d7      	beq.n	1fdd4 <xQueueGenericSendFromISR+0xa8>
							if( pxHigherPriorityTaskWoken != NULL )
   1fe24:	2f00      	cmp	r7, #0
   1fe26:	d0d5      	beq.n	1fdd4 <xQueueGenericSendFromISR+0xa8>
								*pxHigherPriorityTaskWoken = pdTRUE;
   1fe28:	2001      	movs	r0, #1
   1fe2a:	6038      	str	r0, [r7, #0]
   1fe2c:	e7a0      	b.n	1fd70 <xQueueGenericSendFromISR+0x44>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
   1fe2e:	68e0      	ldr	r0, [r4, #12]
   1fe30:	f7ec f966 	bl	c100 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   1fe34:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1fe36:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1fe38:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   1fe3a:	1ad2      	subs	r2, r2, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1fe3c:	428a      	cmp	r2, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   1fe3e:	60e2      	str	r2, [r4, #12]
   1fe40:	f1c3 0300 	rsb	r3, r3, #0
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1fe44:	d2b4      	bcs.n	1fdb0 <xQueueGenericSendFromISR+0x84>
   1fe46:	e7b0      	b.n	1fdaa <xQueueGenericSendFromISR+0x7e>

0001fe48 <xQueueReceive>:
{
   1fe48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1fe4c:	b085      	sub	sp, #20
   1fe4e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
   1fe50:	2800      	cmp	r0, #0
   1fe52:	f000 8099 	beq.w	1ff88 <xQueueReceive+0x140>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1fe56:	460f      	mov	r7, r1
   1fe58:	4604      	mov	r4, r0
   1fe5a:	2900      	cmp	r1, #0
   1fe5c:	f000 8095 	beq.w	1ff8a <xQueueReceive+0x142>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1fe60:	f001 f81c 	bl	20e9c <xTaskGetSchedulerState>
   1fe64:	2800      	cmp	r0, #0
   1fe66:	f000 8095 	beq.w	1ff94 <xQueueReceive+0x14c>
		taskENTER_CRITICAL();
   1fe6a:	f7f4 f8d3 	bl	14014 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1fe6e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1fe70:	2d00      	cmp	r5, #0
   1fe72:	d172      	bne.n	1ff5a <xQueueReceive+0x112>
				if( xTicksToWait == ( TickType_t ) 0 )
   1fe74:	9b01      	ldr	r3, [sp, #4]
   1fe76:	2b00      	cmp	r3, #0
   1fe78:	f000 80e2 	beq.w	20040 <xQueueReceive+0x1f8>
					vTaskInternalSetTimeOutState( &xTimeOut );
   1fe7c:	a802      	add	r0, sp, #8
   1fe7e:	f000 ffa7 	bl	20dd0 <vTaskInternalSetTimeOutState>
		prvLockQueue( pxQueue );
   1fe82:	46a8      	mov	r8, r5
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1fe84:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskEXIT_CRITICAL();
   1fe88:	f7f4 f8de 	bl	14048 <vPortExitCritical>
		vTaskSuspendAll();
   1fe8c:	f000 fc90 	bl	207b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   1fe90:	f7f4 f8c0 	bl	14014 <vPortEnterCritical>
   1fe94:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   1fe98:	2bff      	cmp	r3, #255	; 0xff
   1fe9a:	bf08      	it	eq
   1fe9c:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
   1fea0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   1fea4:	2bff      	cmp	r3, #255	; 0xff
   1fea6:	bf08      	it	eq
   1fea8:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
   1feac:	f7f4 f8cc 	bl	14048 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1feb0:	a901      	add	r1, sp, #4
   1feb2:	a802      	add	r0, sp, #8
   1feb4:	f000 ff98 	bl	20de8 <xTaskCheckForTimeOut>
   1feb8:	2800      	cmp	r0, #0
   1feba:	d170      	bne.n	1ff9e <xQueueReceive+0x156>
	taskENTER_CRITICAL();
   1febc:	f7f4 f8aa 	bl	14014 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1fec0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1fec2:	2b00      	cmp	r3, #0
   1fec4:	f000 80c2 	beq.w	2004c <xQueueReceive+0x204>
	taskEXIT_CRITICAL();
   1fec8:	f7f4 f8be 	bl	14048 <vPortExitCritical>
	taskENTER_CRITICAL();
   1fecc:	f7f4 f8a2 	bl	14014 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
   1fed0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   1fed4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1fed6:	2d00      	cmp	r5, #0
   1fed8:	dc04      	bgt.n	1fee4 <xQueueReceive+0x9c>
   1feda:	e011      	b.n	1ff00 <xQueueReceive+0xb8>
			--cTxLock;
   1fedc:	1e6b      	subs	r3, r5, #1
   1fede:	b2da      	uxtb	r2, r3
   1fee0:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1fee2:	b16a      	cbz	r2, 1ff00 <xQueueReceive+0xb8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1fee4:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1fee6:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1fee8:	b153      	cbz	r3, 1ff00 <xQueueReceive+0xb8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1feea:	f000 fee9 	bl	20cc0 <xTaskRemoveFromEventList>
   1feee:	2800      	cmp	r0, #0
   1fef0:	d0f4      	beq.n	1fedc <xQueueReceive+0x94>
						vTaskMissedYield();
   1fef2:	f000 ffb1 	bl	20e58 <vTaskMissedYield>
			--cTxLock;
   1fef6:	1e6b      	subs	r3, r5, #1
   1fef8:	b2da      	uxtb	r2, r3
   1fefa:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1fefc:	2a00      	cmp	r2, #0
   1fefe:	d1f1      	bne.n	1fee4 <xQueueReceive+0x9c>
		pxQueue->cTxLock = queueUNLOCKED;
   1ff00:	23ff      	movs	r3, #255	; 0xff
   1ff02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
   1ff06:	f7f4 f89f 	bl	14048 <vPortExitCritical>
	taskENTER_CRITICAL();
   1ff0a:	f7f4 f883 	bl	14014 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
   1ff0e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   1ff12:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1ff14:	2d00      	cmp	r5, #0
   1ff16:	dd14      	ble.n	1ff42 <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1ff18:	f104 0910 	add.w	r9, r4, #16
   1ff1c:	e003      	b.n	1ff26 <xQueueReceive+0xde>
				--cRxLock;
   1ff1e:	1e6b      	subs	r3, r5, #1
   1ff20:	b2da      	uxtb	r2, r3
   1ff22:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1ff24:	b16a      	cbz	r2, 1ff42 <xQueueReceive+0xfa>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1ff26:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1ff28:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1ff2a:	b153      	cbz	r3, 1ff42 <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1ff2c:	f000 fec8 	bl	20cc0 <xTaskRemoveFromEventList>
   1ff30:	2800      	cmp	r0, #0
   1ff32:	d0f4      	beq.n	1ff1e <xQueueReceive+0xd6>
					vTaskMissedYield();
   1ff34:	f000 ff90 	bl	20e58 <vTaskMissedYield>
				--cRxLock;
   1ff38:	1e6b      	subs	r3, r5, #1
   1ff3a:	b2da      	uxtb	r2, r3
   1ff3c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1ff3e:	2a00      	cmp	r2, #0
   1ff40:	d1f1      	bne.n	1ff26 <xQueueReceive+0xde>
		pxQueue->cRxLock = queueUNLOCKED;
   1ff42:	23ff      	movs	r3, #255	; 0xff
   1ff44:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
   1ff48:	f7f4 f87e 	bl	14048 <vPortExitCritical>
				( void ) xTaskResumeAll();
   1ff4c:	f000 fd78 	bl	20a40 <xTaskResumeAll>
		taskENTER_CRITICAL();
   1ff50:	f7f4 f860 	bl	14014 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1ff54:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1ff56:	2d00      	cmp	r5, #0
   1ff58:	d06e      	beq.n	20038 <xQueueReceive+0x1f0>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1ff5a:	6c22      	ldr	r2, [r4, #64]	; 0x40
   1ff5c:	b152      	cbz	r2, 1ff74 <xQueueReceive+0x12c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   1ff5e:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1ff60:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   1ff62:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1ff64:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   1ff66:	60e1      	str	r1, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
   1ff68:	bf24      	itt	cs
   1ff6a:	6821      	ldrcs	r1, [r4, #0]
   1ff6c:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
   1ff6e:	4638      	mov	r0, r7
   1ff70:	f7ec f8c6 	bl	c100 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1ff74:	3d01      	subs	r5, #1
   1ff76:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1ff78:	6923      	ldr	r3, [r4, #16]
   1ff7a:	2b00      	cmp	r3, #0
   1ff7c:	f040 80bb 	bne.w	200f6 <xQueueReceive+0x2ae>
				taskEXIT_CRITICAL();
   1ff80:	f7f4 f862 	bl	14048 <vPortExitCritical>
				return pdPASS;
   1ff84:	2001      	movs	r0, #1
   1ff86:	e05e      	b.n	20046 <xQueueReceive+0x1fe>
	configASSERT( ( pxQueue ) );
   1ff88:	e7fe      	b.n	1ff88 <xQueueReceive+0x140>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1ff8a:	6c03      	ldr	r3, [r0, #64]	; 0x40
   1ff8c:	2b00      	cmp	r3, #0
   1ff8e:	f43f af67 	beq.w	1fe60 <xQueueReceive+0x18>
   1ff92:	e7fe      	b.n	1ff92 <xQueueReceive+0x14a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1ff94:	9b01      	ldr	r3, [sp, #4]
   1ff96:	2b00      	cmp	r3, #0
   1ff98:	f43f af67 	beq.w	1fe6a <xQueueReceive+0x22>
   1ff9c:	e7fe      	b.n	1ff9c <xQueueReceive+0x154>
	taskENTER_CRITICAL();
   1ff9e:	f7f4 f839 	bl	14014 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
   1ffa2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   1ffa6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1ffa8:	2d00      	cmp	r5, #0
   1ffaa:	dc04      	bgt.n	1ffb6 <xQueueReceive+0x16e>
   1ffac:	e011      	b.n	1ffd2 <xQueueReceive+0x18a>
			--cTxLock;
   1ffae:	1e6b      	subs	r3, r5, #1
   1ffb0:	b2da      	uxtb	r2, r3
   1ffb2:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1ffb4:	b16a      	cbz	r2, 1ffd2 <xQueueReceive+0x18a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1ffb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1ffb8:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1ffba:	b153      	cbz	r3, 1ffd2 <xQueueReceive+0x18a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1ffbc:	f000 fe80 	bl	20cc0 <xTaskRemoveFromEventList>
   1ffc0:	2800      	cmp	r0, #0
   1ffc2:	d0f4      	beq.n	1ffae <xQueueReceive+0x166>
						vTaskMissedYield();
   1ffc4:	f000 ff48 	bl	20e58 <vTaskMissedYield>
			--cTxLock;
   1ffc8:	1e6b      	subs	r3, r5, #1
   1ffca:	b2da      	uxtb	r2, r3
   1ffcc:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1ffce:	2a00      	cmp	r2, #0
   1ffd0:	d1f1      	bne.n	1ffb6 <xQueueReceive+0x16e>
		pxQueue->cTxLock = queueUNLOCKED;
   1ffd2:	23ff      	movs	r3, #255	; 0xff
   1ffd4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
   1ffd8:	f7f4 f836 	bl	14048 <vPortExitCritical>
	taskENTER_CRITICAL();
   1ffdc:	f7f4 f81a 	bl	14014 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
   1ffe0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   1ffe4:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1ffe6:	2d00      	cmp	r5, #0
   1ffe8:	dd14      	ble.n	20014 <xQueueReceive+0x1cc>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1ffea:	f104 0910 	add.w	r9, r4, #16
   1ffee:	e003      	b.n	1fff8 <xQueueReceive+0x1b0>
				--cRxLock;
   1fff0:	1e6b      	subs	r3, r5, #1
   1fff2:	b2da      	uxtb	r2, r3
   1fff4:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1fff6:	b16a      	cbz	r2, 20014 <xQueueReceive+0x1cc>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1fff8:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1fffa:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1fffc:	b153      	cbz	r3, 20014 <xQueueReceive+0x1cc>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1fffe:	f000 fe5f 	bl	20cc0 <xTaskRemoveFromEventList>
   20002:	2800      	cmp	r0, #0
   20004:	d0f4      	beq.n	1fff0 <xQueueReceive+0x1a8>
					vTaskMissedYield();
   20006:	f000 ff27 	bl	20e58 <vTaskMissedYield>
				--cRxLock;
   2000a:	1e6b      	subs	r3, r5, #1
   2000c:	b2da      	uxtb	r2, r3
   2000e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   20010:	2a00      	cmp	r2, #0
   20012:	d1f1      	bne.n	1fff8 <xQueueReceive+0x1b0>
		pxQueue->cRxLock = queueUNLOCKED;
   20014:	23ff      	movs	r3, #255	; 0xff
   20016:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
   2001a:	f7f4 f815 	bl	14048 <vPortExitCritical>
			( void ) xTaskResumeAll();
   2001e:	f000 fd0f 	bl	20a40 <xTaskResumeAll>
	taskENTER_CRITICAL();
   20022:	f7f3 fff7 	bl	14014 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   20026:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   20028:	b153      	cbz	r3, 20040 <xQueueReceive+0x1f8>
	taskEXIT_CRITICAL();
   2002a:	f7f4 f80d 	bl	14048 <vPortExitCritical>
		taskENTER_CRITICAL();
   2002e:	f7f3 fff1 	bl	14014 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   20032:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   20034:	2d00      	cmp	r5, #0
   20036:	d190      	bne.n	1ff5a <xQueueReceive+0x112>
				if( xTicksToWait == ( TickType_t ) 0 )
   20038:	9b01      	ldr	r3, [sp, #4]
   2003a:	2b00      	cmp	r3, #0
   2003c:	f47f af24 	bne.w	1fe88 <xQueueReceive+0x40>
					taskEXIT_CRITICAL();
   20040:	f7f4 f802 	bl	14048 <vPortExitCritical>
					return errQUEUE_EMPTY;
   20044:	2000      	movs	r0, #0
}
   20046:	b005      	add	sp, #20
   20048:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
   2004c:	f7f3 fffc 	bl	14048 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   20050:	9901      	ldr	r1, [sp, #4]
   20052:	4630      	mov	r0, r6
   20054:	f000 fd70 	bl	20b38 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
   20058:	f7f3 ffdc 	bl	14014 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
   2005c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   20060:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   20062:	2d00      	cmp	r5, #0
   20064:	dc04      	bgt.n	20070 <xQueueReceive+0x228>
   20066:	e011      	b.n	2008c <xQueueReceive+0x244>
			--cTxLock;
   20068:	1e6b      	subs	r3, r5, #1
   2006a:	b2da      	uxtb	r2, r3
   2006c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   2006e:	b16a      	cbz	r2, 2008c <xQueueReceive+0x244>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   20070:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   20072:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   20074:	b153      	cbz	r3, 2008c <xQueueReceive+0x244>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   20076:	f000 fe23 	bl	20cc0 <xTaskRemoveFromEventList>
   2007a:	2800      	cmp	r0, #0
   2007c:	d0f4      	beq.n	20068 <xQueueReceive+0x220>
						vTaskMissedYield();
   2007e:	f000 feeb 	bl	20e58 <vTaskMissedYield>
			--cTxLock;
   20082:	1e6b      	subs	r3, r5, #1
   20084:	b2da      	uxtb	r2, r3
   20086:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   20088:	2a00      	cmp	r2, #0
   2008a:	d1f1      	bne.n	20070 <xQueueReceive+0x228>
		pxQueue->cTxLock = queueUNLOCKED;
   2008c:	23ff      	movs	r3, #255	; 0xff
   2008e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
   20092:	f7f3 ffd9 	bl	14048 <vPortExitCritical>
	taskENTER_CRITICAL();
   20096:	f7f3 ffbd 	bl	14014 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
   2009a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   2009e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   200a0:	2d00      	cmp	r5, #0
   200a2:	dd14      	ble.n	200ce <xQueueReceive+0x286>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   200a4:	f104 0910 	add.w	r9, r4, #16
   200a8:	e003      	b.n	200b2 <xQueueReceive+0x26a>
				--cRxLock;
   200aa:	1e6b      	subs	r3, r5, #1
   200ac:	b2da      	uxtb	r2, r3
   200ae:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   200b0:	b16a      	cbz	r2, 200ce <xQueueReceive+0x286>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   200b2:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   200b4:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   200b6:	b153      	cbz	r3, 200ce <xQueueReceive+0x286>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   200b8:	f000 fe02 	bl	20cc0 <xTaskRemoveFromEventList>
   200bc:	2800      	cmp	r0, #0
   200be:	d0f4      	beq.n	200aa <xQueueReceive+0x262>
					vTaskMissedYield();
   200c0:	f000 feca 	bl	20e58 <vTaskMissedYield>
				--cRxLock;
   200c4:	1e6b      	subs	r3, r5, #1
   200c6:	b2da      	uxtb	r2, r3
   200c8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   200ca:	2a00      	cmp	r2, #0
   200cc:	d1f1      	bne.n	200b2 <xQueueReceive+0x26a>
		pxQueue->cRxLock = queueUNLOCKED;
   200ce:	23ff      	movs	r3, #255	; 0xff
   200d0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
   200d4:	f7f3 ffb8 	bl	14048 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
   200d8:	f000 fcb2 	bl	20a40 <xTaskResumeAll>
   200dc:	2800      	cmp	r0, #0
   200de:	d1a6      	bne.n	2002e <xQueueReceive+0x1e6>
					portYIELD_WITHIN_API();
   200e0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   200e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   200e8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
   200ec:	f3bf 8f4f 	dsb	sy
   200f0:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
   200f4:	e79b      	b.n	2002e <xQueueReceive+0x1e6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   200f6:	f104 0010 	add.w	r0, r4, #16
   200fa:	f000 fde1 	bl	20cc0 <xTaskRemoveFromEventList>
   200fe:	2800      	cmp	r0, #0
   20100:	f43f af3e 	beq.w	1ff80 <xQueueReceive+0x138>
						queueYIELD_IF_USING_PREEMPTION();
   20104:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   20108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   2010c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
   20110:	f3bf 8f4f 	dsb	sy
   20114:	f3bf 8f6f 	isb	sy
   20118:	e732      	b.n	1ff80 <xQueueReceive+0x138>
   2011a:	bf00      	nop

0002011c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   2011c:	b570      	push	{r4, r5, r6, lr}
   2011e:	4605      	mov	r5, r0
   20120:	460e      	mov	r6, r1
   20122:	4614      	mov	r4, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   20124:	f7f3 ff76 	bl	14014 <vPortEnterCritical>
   20128:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
   2012c:	2bff      	cmp	r3, #255	; 0xff
   2012e:	bf04      	itt	eq
   20130:	2300      	moveq	r3, #0
   20132:	f885 3044 	strbeq.w	r3, [r5, #68]	; 0x44
   20136:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
   2013a:	2bff      	cmp	r3, #255	; 0xff
   2013c:	bf04      	itt	eq
   2013e:	2300      	moveq	r3, #0
   20140:	f885 3045 	strbeq.w	r3, [r5, #69]	; 0x45
   20144:	f7f3 ff80 	bl	14048 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   20148:	6bab      	ldr	r3, [r5, #56]	; 0x38
   2014a:	2b00      	cmp	r3, #0
   2014c:	d043      	beq.n	201d6 <vQueueWaitForMessageRestricted+0xba>
	taskENTER_CRITICAL();
   2014e:	f7f3 ff61 	bl	14014 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
   20152:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
   20156:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   20158:	2c00      	cmp	r4, #0
   2015a:	dd14      	ble.n	20186 <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   2015c:	f105 0624 	add.w	r6, r5, #36	; 0x24
   20160:	e003      	b.n	2016a <vQueueWaitForMessageRestricted+0x4e>
			--cTxLock;
   20162:	1e63      	subs	r3, r4, #1
   20164:	b2da      	uxtb	r2, r3
   20166:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   20168:	b16a      	cbz	r2, 20186 <vQueueWaitForMessageRestricted+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   2016a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   2016c:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   2016e:	b153      	cbz	r3, 20186 <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   20170:	f000 fda6 	bl	20cc0 <xTaskRemoveFromEventList>
   20174:	2800      	cmp	r0, #0
   20176:	d0f4      	beq.n	20162 <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
   20178:	f000 fe6e 	bl	20e58 <vTaskMissedYield>
			--cTxLock;
   2017c:	1e63      	subs	r3, r4, #1
   2017e:	b2da      	uxtb	r2, r3
   20180:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   20182:	2a00      	cmp	r2, #0
   20184:	d1f1      	bne.n	2016a <vQueueWaitForMessageRestricted+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
   20186:	23ff      	movs	r3, #255	; 0xff
   20188:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
   2018c:	f7f3 ff5c 	bl	14048 <vPortExitCritical>
	taskENTER_CRITICAL();
   20190:	f7f3 ff40 	bl	14014 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
   20194:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
   20198:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   2019a:	2c00      	cmp	r4, #0
   2019c:	dd14      	ble.n	201c8 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   2019e:	f105 0610 	add.w	r6, r5, #16
   201a2:	e003      	b.n	201ac <vQueueWaitForMessageRestricted+0x90>
				--cRxLock;
   201a4:	1e63      	subs	r3, r4, #1
   201a6:	b2da      	uxtb	r2, r3
   201a8:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   201aa:	b16a      	cbz	r2, 201c8 <vQueueWaitForMessageRestricted+0xac>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   201ac:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   201ae:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   201b0:	b153      	cbz	r3, 201c8 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   201b2:	f000 fd85 	bl	20cc0 <xTaskRemoveFromEventList>
   201b6:	2800      	cmp	r0, #0
   201b8:	d0f4      	beq.n	201a4 <vQueueWaitForMessageRestricted+0x88>
					vTaskMissedYield();
   201ba:	f000 fe4d 	bl	20e58 <vTaskMissedYield>
				--cRxLock;
   201be:	1e63      	subs	r3, r4, #1
   201c0:	b2da      	uxtb	r2, r3
   201c2:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   201c4:	2a00      	cmp	r2, #0
   201c6:	d1f1      	bne.n	201ac <vQueueWaitForMessageRestricted+0x90>
		pxQueue->cRxLock = queueUNLOCKED;
   201c8:	23ff      	movs	r3, #255	; 0xff
   201ca:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
   201ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
   201d2:	f7f3 bf39 	b.w	14048 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   201d6:	4622      	mov	r2, r4
   201d8:	4631      	mov	r1, r6
   201da:	f105 0024 	add.w	r0, r5, #36	; 0x24
   201de:	f000 fd2d 	bl	20c3c <vTaskPlaceOnEventListRestricted>
   201e2:	e7b4      	b.n	2014e <vQueueWaitForMessageRestricted+0x32>

000201e4 <vTaskSwitchContext.part.0>:
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
   201e4:	4b2b      	ldr	r3, [pc, #172]	; (20294 <vTaskSwitchContext.part.0+0xb0>)
void vTaskSwitchContext( void )
   201e6:	b570      	push	{r4, r5, r6, lr}
		xYieldPending = pdFALSE;
   201e8:	2200      	movs	r2, #0
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
   201ea:	4c2b      	ldr	r4, [pc, #172]	; (20298 <vTaskSwitchContext.part.0+0xb4>)
		xYieldPending = pdFALSE;
   201ec:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   201ee:	6823      	ldr	r3, [r4, #0]
   201f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   201f2:	681a      	ldr	r2, [r3, #0]
   201f4:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
   201f8:	d103      	bne.n	20202 <vTaskSwitchContext.part.0+0x1e>
   201fa:	685a      	ldr	r2, [r3, #4]
   201fc:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
   20200:	d03f      	beq.n	20282 <vTaskSwitchContext.part.0+0x9e>
   20202:	6820      	ldr	r0, [r4, #0]
   20204:	6821      	ldr	r1, [r4, #0]
   20206:	3134      	adds	r1, #52	; 0x34
   20208:	f7f0 f95a 	bl	104c0 <vApplicationStackOverflowHook>
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   2020c:	4d23      	ldr	r5, [pc, #140]	; (2029c <vTaskSwitchContext.part.0+0xb8>)
   2020e:	4a24      	ldr	r2, [pc, #144]	; (202a0 <vTaskSwitchContext.part.0+0xbc>)
   20210:	682b      	ldr	r3, [r5, #0]
   20212:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   20216:	0080      	lsls	r0, r0, #2
   20218:	0099      	lsls	r1, r3, #2
   2021a:	5810      	ldr	r0, [r2, r0]
   2021c:	bb08      	cbnz	r0, 20262 <vTaskSwitchContext.part.0+0x7e>
   2021e:	b1f3      	cbz	r3, 2025e <vTaskSwitchContext.part.0+0x7a>
   20220:	1e58      	subs	r0, r3, #1
   20222:	eb00 0180 	add.w	r1, r0, r0, lsl #2
   20226:	0089      	lsls	r1, r1, #2
   20228:	5856      	ldr	r6, [r2, r1]
   2022a:	0081      	lsls	r1, r0, #2
   2022c:	b9c6      	cbnz	r6, 20260 <vTaskSwitchContext.part.0+0x7c>
   2022e:	b1b0      	cbz	r0, 2025e <vTaskSwitchContext.part.0+0x7a>
   20230:	1e98      	subs	r0, r3, #2
   20232:	eb00 0180 	add.w	r1, r0, r0, lsl #2
   20236:	0089      	lsls	r1, r1, #2
   20238:	5856      	ldr	r6, [r2, r1]
   2023a:	0081      	lsls	r1, r0, #2
   2023c:	b986      	cbnz	r6, 20260 <vTaskSwitchContext.part.0+0x7c>
   2023e:	b170      	cbz	r0, 2025e <vTaskSwitchContext.part.0+0x7a>
   20240:	1ed8      	subs	r0, r3, #3
   20242:	eb00 0180 	add.w	r1, r0, r0, lsl #2
   20246:	0089      	lsls	r1, r1, #2
   20248:	5856      	ldr	r6, [r2, r1]
   2024a:	0081      	lsls	r1, r0, #2
   2024c:	b946      	cbnz	r6, 20260 <vTaskSwitchContext.part.0+0x7c>
   2024e:	b130      	cbz	r0, 2025e <vTaskSwitchContext.part.0+0x7a>
   20250:	3b04      	subs	r3, #4
   20252:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   20256:	0080      	lsls	r0, r0, #2
   20258:	0099      	lsls	r1, r3, #2
   2025a:	5810      	ldr	r0, [r2, r0]
   2025c:	b908      	cbnz	r0, 20262 <vTaskSwitchContext.part.0+0x7e>
   2025e:	e7fe      	b.n	2025e <vTaskSwitchContext.part.0+0x7a>
   20260:	4603      	mov	r3, r0
   20262:	4419      	add	r1, r3
   20264:	eb02 0081 	add.w	r0, r2, r1, lsl #2
   20268:	4602      	mov	r2, r0
   2026a:	6841      	ldr	r1, [r0, #4]
   2026c:	6849      	ldr	r1, [r1, #4]
   2026e:	6041      	str	r1, [r0, #4]
   20270:	3208      	adds	r2, #8
   20272:	4291      	cmp	r1, r2
   20274:	bf04      	itt	eq
   20276:	6849      	ldreq	r1, [r1, #4]
   20278:	6041      	streq	r1, [r0, #4]
   2027a:	68ca      	ldr	r2, [r1, #12]
   2027c:	6022      	str	r2, [r4, #0]
   2027e:	602b      	str	r3, [r5, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   20280:	bd70      	pop	{r4, r5, r6, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
   20282:	689a      	ldr	r2, [r3, #8]
   20284:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
   20288:	d1bb      	bne.n	20202 <vTaskSwitchContext.part.0+0x1e>
   2028a:	68db      	ldr	r3, [r3, #12]
   2028c:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
   20290:	d1b7      	bne.n	20202 <vTaskSwitchContext.part.0+0x1e>
   20292:	e7bb      	b.n	2020c <vTaskSwitchContext.part.0+0x28>
   20294:	1000a0b0 	.word	0x1000a0b0
   20298:	10009fdc 	.word	0x10009fdc
   2029c:	1000a048 	.word	0x1000a048
   202a0:	10009fe8 	.word	0x10009fe8

000202a4 <xTaskCreate>:
	{
   202a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
   202a8:	ea4f 0882 	mov.w	r8, r2, lsl #2
	{
   202ac:	4607      	mov	r7, r0
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
   202ae:	4640      	mov	r0, r8
	{
   202b0:	460c      	mov	r4, r1
   202b2:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
   202b4:	f7ff f9bc 	bl	1f630 <pvPortMalloc>
			if( pxStack != NULL )
   202b8:	2800      	cmp	r0, #0
   202ba:	f000 80c3 	beq.w	20444 <xTaskCreate+0x1a0>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
   202be:	4606      	mov	r6, r0
   202c0:	204c      	movs	r0, #76	; 0x4c
   202c2:	f7ff f9b5 	bl	1f630 <pvPortMalloc>
				if( pxNewTCB != NULL )
   202c6:	4605      	mov	r5, r0
   202c8:	2800      	cmp	r0, #0
   202ca:	f000 80c0 	beq.w	2044e <xTaskCreate+0x1aa>
					pxNewTCB->pxStack = pxStack;
   202ce:	6306      	str	r6, [r0, #48]	; 0x30
	configASSERT( pcName );
   202d0:	2c00      	cmp	r4, #0
   202d2:	f000 80bb 	beq.w	2044c <xTaskCreate+0x1a8>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   202d6:	4642      	mov	r2, r8
   202d8:	4630      	mov	r0, r6
   202da:	21a5      	movs	r1, #165	; 0xa5
   202dc:	f001 f8b6 	bl	2144c <memset>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   202e0:	7823      	ldrb	r3, [r4, #0]
   202e2:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
   202e6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   202e8:	f1a8 0204 	sub.w	r2, r8, #4
   202ec:	4413      	add	r3, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
   202ee:	f023 0a07 	bic.w	sl, r3, #7
		if( pcName[ x ] == ( char ) 0x00 )
   202f2:	7823      	ldrb	r3, [r4, #0]
   202f4:	2b00      	cmp	r3, #0
   202f6:	d04d      	beq.n	20394 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   202f8:	7863      	ldrb	r3, [r4, #1]
   202fa:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
		if( pcName[ x ] == ( char ) 0x00 )
   202fe:	7863      	ldrb	r3, [r4, #1]
   20300:	2b00      	cmp	r3, #0
   20302:	d047      	beq.n	20394 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   20304:	78a3      	ldrb	r3, [r4, #2]
   20306:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
		if( pcName[ x ] == ( char ) 0x00 )
   2030a:	78a3      	ldrb	r3, [r4, #2]
   2030c:	2b00      	cmp	r3, #0
   2030e:	d041      	beq.n	20394 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   20310:	78e3      	ldrb	r3, [r4, #3]
   20312:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
		if( pcName[ x ] == ( char ) 0x00 )
   20316:	78e3      	ldrb	r3, [r4, #3]
   20318:	2b00      	cmp	r3, #0
   2031a:	d03b      	beq.n	20394 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   2031c:	7923      	ldrb	r3, [r4, #4]
   2031e:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
		if( pcName[ x ] == ( char ) 0x00 )
   20322:	7923      	ldrb	r3, [r4, #4]
   20324:	2b00      	cmp	r3, #0
   20326:	d035      	beq.n	20394 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   20328:	7963      	ldrb	r3, [r4, #5]
   2032a:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
		if( pcName[ x ] == ( char ) 0x00 )
   2032e:	7963      	ldrb	r3, [r4, #5]
   20330:	2b00      	cmp	r3, #0
   20332:	d02f      	beq.n	20394 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   20334:	79a3      	ldrb	r3, [r4, #6]
   20336:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
		if( pcName[ x ] == ( char ) 0x00 )
   2033a:	79a3      	ldrb	r3, [r4, #6]
   2033c:	b353      	cbz	r3, 20394 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   2033e:	79e3      	ldrb	r3, [r4, #7]
   20340:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
		if( pcName[ x ] == ( char ) 0x00 )
   20344:	79e3      	ldrb	r3, [r4, #7]
   20346:	b32b      	cbz	r3, 20394 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   20348:	7a23      	ldrb	r3, [r4, #8]
   2034a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
		if( pcName[ x ] == ( char ) 0x00 )
   2034e:	7a23      	ldrb	r3, [r4, #8]
   20350:	b303      	cbz	r3, 20394 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   20352:	7a63      	ldrb	r3, [r4, #9]
   20354:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
		if( pcName[ x ] == ( char ) 0x00 )
   20358:	7a63      	ldrb	r3, [r4, #9]
   2035a:	b1db      	cbz	r3, 20394 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   2035c:	7aa3      	ldrb	r3, [r4, #10]
   2035e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
		if( pcName[ x ] == ( char ) 0x00 )
   20362:	7aa3      	ldrb	r3, [r4, #10]
   20364:	b1b3      	cbz	r3, 20394 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   20366:	7ae3      	ldrb	r3, [r4, #11]
   20368:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
		if( pcName[ x ] == ( char ) 0x00 )
   2036c:	7ae3      	ldrb	r3, [r4, #11]
   2036e:	b18b      	cbz	r3, 20394 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   20370:	7b23      	ldrb	r3, [r4, #12]
   20372:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
		if( pcName[ x ] == ( char ) 0x00 )
   20376:	7b23      	ldrb	r3, [r4, #12]
   20378:	b163      	cbz	r3, 20394 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   2037a:	7b63      	ldrb	r3, [r4, #13]
   2037c:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
		if( pcName[ x ] == ( char ) 0x00 )
   20380:	7b63      	ldrb	r3, [r4, #13]
   20382:	b13b      	cbz	r3, 20394 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   20384:	7ba3      	ldrb	r3, [r4, #14]
   20386:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
		if( pcName[ x ] == ( char ) 0x00 )
   2038a:	7ba3      	ldrb	r3, [r4, #14]
   2038c:	b113      	cbz	r3, 20394 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   2038e:	7be3      	ldrb	r3, [r4, #15]
   20390:	f885 3043 	strb.w	r3, [r5, #67]	; 0x43
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   20394:	9c08      	ldr	r4, [sp, #32]
   20396:	2c03      	cmp	r4, #3
   20398:	bf28      	it	cs
   2039a:	2403      	movcs	r4, #3
   2039c:	f04f 0800 	mov.w	r8, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   203a0:	1d2e      	adds	r6, r5, #4
	pxNewTCB->uxPriority = uxPriority;
   203a2:	62ec      	str	r4, [r5, #44]	; 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   203a4:	4630      	mov	r0, r6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   203a6:	f885 8043 	strb.w	r8, [r5, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   203aa:	f7ff fab1 	bl	1f910 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   203ae:	f1c4 0404 	rsb	r4, r4, #4
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   203b2:	f105 0018 	add.w	r0, r5, #24
   203b6:	f7ff faab 	bl	1f910 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
   203ba:	f8c5 8044 	str.w	r8, [r5, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   203be:	61ac      	str	r4, [r5, #24]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   203c0:	f885 8048 	strb.w	r8, [r5, #72]	; 0x48
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   203c4:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   203c6:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   203c8:	464a      	mov	r2, r9
   203ca:	4639      	mov	r1, r7
   203cc:	4650      	mov	r0, sl
   203ce:	f7f3 fdf7 	bl	13fc0 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
   203d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   203d4:	6028      	str	r0, [r5, #0]
	if( pxCreatedTask != NULL )
   203d6:	b103      	cbz	r3, 203da <xTaskCreate+0x136>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   203d8:	601d      	str	r5, [r3, #0]
	taskENTER_CRITICAL();
   203da:	f7f3 fe1b 	bl	14014 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
   203de:	4a3a      	ldr	r2, [pc, #232]	; (204c8 <xTaskCreate+0x224>)
		if( pxCurrentTCB == NULL )
   203e0:	4c3a      	ldr	r4, [pc, #232]	; (204cc <xTaskCreate+0x228>)
		uxCurrentNumberOfTasks++;
   203e2:	6813      	ldr	r3, [r2, #0]
   203e4:	3301      	adds	r3, #1
   203e6:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
   203e8:	6823      	ldr	r3, [r4, #0]
   203ea:	2b00      	cmp	r3, #0
   203ec:	d03f      	beq.n	2046e <xTaskCreate+0x1ca>
			if( xSchedulerRunning == pdFALSE )
   203ee:	4f38      	ldr	r7, [pc, #224]	; (204d0 <xTaskCreate+0x22c>)
   203f0:	683b      	ldr	r3, [r7, #0]
   203f2:	2b00      	cmp	r3, #0
   203f4:	d034      	beq.n	20460 <xTaskCreate+0x1bc>
		prvAddTaskToReadyList( pxNewTCB );
   203f6:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
		uxTaskNumber++;
   203f8:	4a36      	ldr	r2, [pc, #216]	; (204d4 <xTaskCreate+0x230>)
		prvAddTaskToReadyList( pxNewTCB );
   203fa:	4937      	ldr	r1, [pc, #220]	; (204d8 <xTaskCreate+0x234>)
		uxTaskNumber++;
   203fc:	6813      	ldr	r3, [r2, #0]
   203fe:	3301      	adds	r3, #1
   20400:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
   20402:	680b      	ldr	r3, [r1, #0]
   20404:	4283      	cmp	r3, r0
   20406:	4b35      	ldr	r3, [pc, #212]	; (204dc <xTaskCreate+0x238>)
   20408:	bf38      	it	cc
   2040a:	6008      	strcc	r0, [r1, #0]
   2040c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   20410:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   20414:	4631      	mov	r1, r6
   20416:	f7ff fa7f 	bl	1f918 <vListInsertEnd>
	taskEXIT_CRITICAL();
   2041a:	f7f3 fe15 	bl	14048 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
   2041e:	683b      	ldr	r3, [r7, #0]
   20420:	b1db      	cbz	r3, 2045a <xTaskCreate+0x1b6>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   20422:	6822      	ldr	r2, [r4, #0]
   20424:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   20426:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   20428:	429a      	cmp	r2, r3
   2042a:	d216      	bcs.n	2045a <xTaskCreate+0x1b6>
			taskYIELD_IF_USING_PREEMPTION();
   2042c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   20430:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   20434:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
   20438:	f3bf 8f4f 	dsb	sy
   2043c:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
   20440:	2001      	movs	r0, #1
   20442:	e001      	b.n	20448 <xTaskCreate+0x1a4>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   20444:	f04f 30ff 	mov.w	r0, #4294967295
	}
   20448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	configASSERT( pcName );
   2044c:	e7fe      	b.n	2044c <xTaskCreate+0x1a8>
					vPortFree( pxStack );
   2044e:	4630      	mov	r0, r6
   20450:	f7ff f94c 	bl	1f6ec <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   20454:	f04f 30ff 	mov.w	r0, #4294967295
   20458:	e7f6      	b.n	20448 <xTaskCreate+0x1a4>
			xReturn = pdPASS;
   2045a:	2001      	movs	r0, #1
	}
   2045c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   20460:	6823      	ldr	r3, [r4, #0]
   20462:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   20464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20466:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
   20468:	bf98      	it	ls
   2046a:	6025      	strls	r5, [r4, #0]
   2046c:	e7c4      	b.n	203f8 <xTaskCreate+0x154>
			pxCurrentTCB = pxNewTCB;
   2046e:	6025      	str	r5, [r4, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   20470:	6813      	ldr	r3, [r2, #0]
   20472:	2b01      	cmp	r3, #1
   20474:	d002      	beq.n	2047c <xTaskCreate+0x1d8>
		prvAddTaskToReadyList( pxNewTCB );
   20476:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   20478:	4f15      	ldr	r7, [pc, #84]	; (204d0 <xTaskCreate+0x22c>)
   2047a:	e7bd      	b.n	203f8 <xTaskCreate+0x154>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   2047c:	4817      	ldr	r0, [pc, #92]	; (204dc <xTaskCreate+0x238>)
	}

	vListInitialise( &xDelayedTaskList1 );
   2047e:	f8df 907c 	ldr.w	r9, [pc, #124]	; 204fc <xTaskCreate+0x258>
	vListInitialise( &xDelayedTaskList2 );
   20482:	f8df 807c 	ldr.w	r8, [pc, #124]	; 20500 <xTaskCreate+0x25c>
   20486:	4f12      	ldr	r7, [pc, #72]	; (204d0 <xTaskCreate+0x22c>)
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   20488:	f7ff fa36 	bl	1f8f8 <vListInitialise>
   2048c:	4814      	ldr	r0, [pc, #80]	; (204e0 <xTaskCreate+0x23c>)
   2048e:	f7ff fa33 	bl	1f8f8 <vListInitialise>
   20492:	4814      	ldr	r0, [pc, #80]	; (204e4 <xTaskCreate+0x240>)
   20494:	f7ff fa30 	bl	1f8f8 <vListInitialise>
   20498:	4813      	ldr	r0, [pc, #76]	; (204e8 <xTaskCreate+0x244>)
   2049a:	f7ff fa2d 	bl	1f8f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
   2049e:	4648      	mov	r0, r9
   204a0:	f7ff fa2a 	bl	1f8f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
   204a4:	4640      	mov	r0, r8
   204a6:	f7ff fa27 	bl	1f8f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
   204aa:	4810      	ldr	r0, [pc, #64]	; (204ec <xTaskCreate+0x248>)
   204ac:	f7ff fa24 	bl	1f8f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   204b0:	480f      	ldr	r0, [pc, #60]	; (204f0 <xTaskCreate+0x24c>)
   204b2:	f7ff fa21 	bl	1f8f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   204b6:	4b0f      	ldr	r3, [pc, #60]	; (204f4 <xTaskCreate+0x250>)
		prvAddTaskToReadyList( pxNewTCB );
   204b8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
   204ba:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   204be:	4b0e      	ldr	r3, [pc, #56]	; (204f8 <xTaskCreate+0x254>)
   204c0:	f8c3 8000 	str.w	r8, [r3]
}
   204c4:	e798      	b.n	203f8 <xTaskCreate+0x154>
   204c6:	bf00      	nop
   204c8:	1000a038 	.word	0x1000a038
   204cc:	10009fdc 	.word	0x10009fdc
   204d0:	1000a094 	.word	0x1000a094
   204d4:	1000a044 	.word	0x1000a044
   204d8:	1000a048 	.word	0x1000a048
   204dc:	10009fe8 	.word	0x10009fe8
   204e0:	10009ffc 	.word	0x10009ffc
   204e4:	1000a010 	.word	0x1000a010
   204e8:	1000a024 	.word	0x1000a024
   204ec:	1000a080 	.word	0x1000a080
   204f0:	1000a098 	.word	0x1000a098
   204f4:	10009fe0 	.word	0x10009fe0
   204f8:	10009fe4 	.word	0x10009fe4
   204fc:	1000a04c 	.word	0x1000a04c
   20500:	1000a060 	.word	0x1000a060

00020504 <vTaskSuspend>:
	{
   20504:	b570      	push	{r4, r5, r6, lr}
   20506:	4604      	mov	r4, r0
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   20508:	4e2e      	ldr	r6, [pc, #184]	; (205c4 <vTaskSuspend+0xc0>)
		taskENTER_CRITICAL();
   2050a:	f7f3 fd83 	bl	14014 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   2050e:	2c00      	cmp	r4, #0
   20510:	d03d      	beq.n	2058e <vTaskSuspend+0x8a>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   20512:	1d25      	adds	r5, r4, #4
   20514:	4628      	mov	r0, r5
   20516:	f7ff fa27 	bl	1f968 <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   2051a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2051c:	b11b      	cbz	r3, 20526 <vTaskSuspend+0x22>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   2051e:	f104 0018 	add.w	r0, r4, #24
   20522:	f7ff fa21 	bl	1f968 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   20526:	4629      	mov	r1, r5
   20528:	4827      	ldr	r0, [pc, #156]	; (205c8 <vTaskSuspend+0xc4>)
		if( xSchedulerRunning != pdFALSE )
   2052a:	4d28      	ldr	r5, [pc, #160]	; (205cc <vTaskSuspend+0xc8>)
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   2052c:	f7ff f9f4 	bl	1f918 <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   20530:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   20534:	2b01      	cmp	r3, #1
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   20536:	bf04      	itt	eq
   20538:	2300      	moveq	r3, #0
   2053a:	f884 3048 	strbeq.w	r3, [r4, #72]	; 0x48
		taskEXIT_CRITICAL();
   2053e:	f7f3 fd83 	bl	14048 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
   20542:	682b      	ldr	r3, [r5, #0]
   20544:	b9a3      	cbnz	r3, 20570 <vTaskSuspend+0x6c>
		if( pxTCB == pxCurrentTCB )
   20546:	6833      	ldr	r3, [r6, #0]
   20548:	42a3      	cmp	r3, r4
   2054a:	d000      	beq.n	2054e <vTaskSuspend+0x4a>
	}
   2054c:	bd70      	pop	{r4, r5, r6, pc}
			if( xSchedulerRunning != pdFALSE )
   2054e:	682b      	ldr	r3, [r5, #0]
   20550:	b323      	cbz	r3, 2059c <vTaskSuspend+0x98>
				configASSERT( uxSchedulerSuspended == 0 );
   20552:	4b1f      	ldr	r3, [pc, #124]	; (205d0 <vTaskSuspend+0xcc>)
   20554:	681b      	ldr	r3, [r3, #0]
   20556:	2b00      	cmp	r3, #0
   20558:	d12d      	bne.n	205b6 <vTaskSuspend+0xb2>
				portYIELD_WITHIN_API();
   2055a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   2055e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   20562:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
   20566:	f3bf 8f4f 	dsb	sy
   2056a:	f3bf 8f6f 	isb	sy
	}
   2056e:	bd70      	pop	{r4, r5, r6, pc}
			taskENTER_CRITICAL();
   20570:	f7f3 fd50 	bl	14014 <vPortEnterCritical>

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   20574:	4b17      	ldr	r3, [pc, #92]	; (205d4 <vTaskSuspend+0xd0>)
   20576:	681a      	ldr	r2, [r3, #0]
   20578:	6812      	ldr	r2, [r2, #0]
   2057a:	b152      	cbz	r2, 20592 <vTaskSuspend+0x8e>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   2057c:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   2057e:	4b16      	ldr	r3, [pc, #88]	; (205d8 <vTaskSuspend+0xd4>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   20580:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   20582:	68d2      	ldr	r2, [r2, #12]
   20584:	6852      	ldr	r2, [r2, #4]
   20586:	601a      	str	r2, [r3, #0]
			taskEXIT_CRITICAL();
   20588:	f7f3 fd5e 	bl	14048 <vPortExitCritical>
   2058c:	e7db      	b.n	20546 <vTaskSuspend+0x42>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   2058e:	6834      	ldr	r4, [r6, #0]
   20590:	e7bf      	b.n	20512 <vTaskSuspend+0xe>
		xNextTaskUnblockTime = portMAX_DELAY;
   20592:	4b11      	ldr	r3, [pc, #68]	; (205d8 <vTaskSuspend+0xd4>)
   20594:	f04f 32ff 	mov.w	r2, #4294967295
   20598:	601a      	str	r2, [r3, #0]
   2059a:	e7f5      	b.n	20588 <vTaskSuspend+0x84>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
   2059c:	490a      	ldr	r1, [pc, #40]	; (205c8 <vTaskSuspend+0xc4>)
   2059e:	4a0f      	ldr	r2, [pc, #60]	; (205dc <vTaskSuspend+0xd8>)
   205a0:	6809      	ldr	r1, [r1, #0]
   205a2:	6812      	ldr	r2, [r2, #0]
   205a4:	4291      	cmp	r1, r2
   205a6:	d007      	beq.n	205b8 <vTaskSuspend+0xb4>
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   205a8:	4b09      	ldr	r3, [pc, #36]	; (205d0 <vTaskSuspend+0xcc>)
   205aa:	681b      	ldr	r3, [r3, #0]
   205ac:	b133      	cbz	r3, 205bc <vTaskSuspend+0xb8>
		xYieldPending = pdTRUE;
   205ae:	4b0c      	ldr	r3, [pc, #48]	; (205e0 <vTaskSuspend+0xdc>)
   205b0:	2201      	movs	r2, #1
   205b2:	601a      	str	r2, [r3, #0]
	}
   205b4:	bd70      	pop	{r4, r5, r6, pc}
				configASSERT( uxSchedulerSuspended == 0 );
   205b6:	e7fe      	b.n	205b6 <vTaskSuspend+0xb2>
					pxCurrentTCB = NULL;
   205b8:	6033      	str	r3, [r6, #0]
	}
   205ba:	bd70      	pop	{r4, r5, r6, pc}
   205bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   205c0:	f7ff be10 	b.w	201e4 <vTaskSwitchContext.part.0>
   205c4:	10009fdc 	.word	0x10009fdc
   205c8:	1000a098 	.word	0x1000a098
   205cc:	1000a094 	.word	0x1000a094
   205d0:	1000a040 	.word	0x1000a040
   205d4:	10009fe0 	.word	0x10009fe0
   205d8:	1000a078 	.word	0x1000a078
   205dc:	1000a038 	.word	0x1000a038
   205e0:	1000a0b0 	.word	0x1000a0b0

000205e4 <vTaskStartScheduler>:
{
   205e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
   205e8:	f44f 6080 	mov.w	r0, #1024	; 0x400
   205ec:	f7ff f820 	bl	1f630 <pvPortMalloc>
			if( pxStack != NULL )
   205f0:	2800      	cmp	r0, #0
   205f2:	d06d      	beq.n	206d0 <vTaskStartScheduler+0xec>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
   205f4:	4605      	mov	r5, r0
   205f6:	204c      	movs	r0, #76	; 0x4c
   205f8:	f7ff f81a 	bl	1f630 <pvPortMalloc>
				if( pxNewTCB != NULL )
   205fc:	4604      	mov	r4, r0
   205fe:	2800      	cmp	r0, #0
   20600:	d063      	beq.n	206ca <vTaskStartScheduler+0xe6>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   20602:	f44f 6280 	mov.w	r2, #1024	; 0x400
   20606:	21a5      	movs	r1, #165	; 0xa5
					pxNewTCB->pxStack = pxStack;
   20608:	6305      	str	r5, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   2060a:	4628      	mov	r0, r5
   2060c:	f000 ff1e 	bl	2144c <memset>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   20610:	2500      	movs	r5, #0
   20612:	4b53      	ldr	r3, [pc, #332]	; (20760 <vTaskStartScheduler+0x17c>)
   20614:	6363      	str	r3, [r4, #52]	; 0x34
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   20616:	1d27      	adds	r7, r4, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
   20618:	6b26      	ldr	r6, [r4, #48]	; 0x30
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   2061a:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   2061e:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   20620:	f884 5043 	strb.w	r5, [r4, #67]	; 0x43
	pxNewTCB->uxPriority = uxPriority;
   20624:	62e5      	str	r5, [r4, #44]	; 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   20626:	f7ff f973 	bl	1f910 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   2062a:	f104 0018 	add.w	r0, r4, #24
   2062e:	f7ff f96f 	bl	1f910 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   20632:	2304      	movs	r3, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
   20634:	f506 707f 	add.w	r0, r6, #1020	; 0x3fc
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   20638:	462a      	mov	r2, r5
		pxNewTCB->ulNotifiedValue = 0;
   2063a:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   2063c:	4949      	ldr	r1, [pc, #292]	; (20764 <vTaskStartScheduler+0x180>)
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   2063e:	61a3      	str	r3, [r4, #24]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   20640:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   20644:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   20646:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   20648:	f020 0007 	bic.w	r0, r0, #7
   2064c:	f7f3 fcb8 	bl	13fc0 <pxPortInitialiseStack>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   20650:	4b45      	ldr	r3, [pc, #276]	; (20768 <vTaskStartScheduler+0x184>)
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   20652:	6020      	str	r0, [r4, #0]
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   20654:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
   20656:	f7f3 fcdd 	bl	14014 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
   2065a:	4a44      	ldr	r2, [pc, #272]	; (2076c <vTaskStartScheduler+0x188>)
		if( pxCurrentTCB == NULL )
   2065c:	4d44      	ldr	r5, [pc, #272]	; (20770 <vTaskStartScheduler+0x18c>)
		uxCurrentNumberOfTasks++;
   2065e:	6813      	ldr	r3, [r2, #0]
   20660:	3301      	adds	r3, #1
   20662:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
   20664:	682b      	ldr	r3, [r5, #0]
   20666:	2b00      	cmp	r3, #0
   20668:	d04e      	beq.n	20708 <vTaskStartScheduler+0x124>
			if( xSchedulerRunning == pdFALSE )
   2066a:	4e42      	ldr	r6, [pc, #264]	; (20774 <vTaskStartScheduler+0x190>)
   2066c:	6833      	ldr	r3, [r6, #0]
   2066e:	b383      	cbz	r3, 206d2 <vTaskStartScheduler+0xee>
		prvAddTaskToReadyList( pxNewTCB );
   20670:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
		uxTaskNumber++;
   20672:	4a41      	ldr	r2, [pc, #260]	; (20778 <vTaskStartScheduler+0x194>)
		prvAddTaskToReadyList( pxNewTCB );
   20674:	4941      	ldr	r1, [pc, #260]	; (2077c <vTaskStartScheduler+0x198>)
		uxTaskNumber++;
   20676:	6813      	ldr	r3, [r2, #0]
   20678:	3301      	adds	r3, #1
   2067a:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
   2067c:	680b      	ldr	r3, [r1, #0]
   2067e:	4298      	cmp	r0, r3
   20680:	d900      	bls.n	20684 <vTaskStartScheduler+0xa0>
   20682:	6008      	str	r0, [r1, #0]
   20684:	4b3e      	ldr	r3, [pc, #248]	; (20780 <vTaskStartScheduler+0x19c>)
   20686:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   2068a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   2068e:	4639      	mov	r1, r7
   20690:	f7ff f942 	bl	1f918 <vListInsertEnd>
	taskEXIT_CRITICAL();
   20694:	f7f3 fcd8 	bl	14048 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
   20698:	6833      	ldr	r3, [r6, #0]
   2069a:	b173      	cbz	r3, 206ba <vTaskStartScheduler+0xd6>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   2069c:	682a      	ldr	r2, [r5, #0]
   2069e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   206a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   206a2:	429a      	cmp	r2, r3
   206a4:	d209      	bcs.n	206ba <vTaskStartScheduler+0xd6>
			taskYIELD_IF_USING_PREEMPTION();
   206a6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   206aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   206ae:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
   206b2:	f3bf 8f4f 	dsb	sy
   206b6:	f3bf 8f6f 	isb	sy
			xReturn = xTimerCreateTimerTask();
   206ba:	f000 fd63 	bl	21184 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
   206be:	2801      	cmp	r0, #1
   206c0:	d00e      	beq.n	206e0 <vTaskStartScheduler+0xfc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   206c2:	3001      	adds	r0, #1
   206c4:	d004      	beq.n	206d0 <vTaskStartScheduler+0xec>
}
   206c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
   206ca:	4628      	mov	r0, r5
   206cc:	f7ff f80e 	bl	1f6ec <vPortFree>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   206d0:	e7fe      	b.n	206d0 <vTaskStartScheduler+0xec>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   206d2:	682b      	ldr	r3, [r5, #0]
   206d4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   206d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   206d8:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
   206da:	bf98      	it	ls
   206dc:	602c      	strls	r4, [r5, #0]
   206de:	e7c8      	b.n	20672 <vTaskStartScheduler+0x8e>
	__asm volatile
   206e0:	f04f 0380 	mov.w	r3, #128	; 0x80
   206e4:	f383 8811 	msr	BASEPRI, r3
   206e8:	f3bf 8f6f 	isb	sy
   206ec:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
   206f0:	4a24      	ldr	r2, [pc, #144]	; (20784 <vTaskStartScheduler+0x1a0>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
   206f2:	4b25      	ldr	r3, [pc, #148]	; (20788 <vTaskStartScheduler+0x1a4>)
		xNextTaskUnblockTime = portMAX_DELAY;
   206f4:	f04f 31ff 	mov.w	r1, #4294967295
   206f8:	6011      	str	r1, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
   206fa:	2200      	movs	r2, #0
		xSchedulerRunning = pdTRUE;
   206fc:	6030      	str	r0, [r6, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
   206fe:	601a      	str	r2, [r3, #0]
}
   20700:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		if( xPortStartScheduler() != pdFALSE )
   20704:	f7f3 be16 	b.w	14334 <xPortStartScheduler>
			pxCurrentTCB = pxNewTCB;
   20708:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   2070a:	6813      	ldr	r3, [r2, #0]
   2070c:	2b01      	cmp	r3, #1
   2070e:	d002      	beq.n	20716 <vTaskStartScheduler+0x132>
		prvAddTaskToReadyList( pxNewTCB );
   20710:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   20712:	4e18      	ldr	r6, [pc, #96]	; (20774 <vTaskStartScheduler+0x190>)
   20714:	e7ad      	b.n	20672 <vTaskStartScheduler+0x8e>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   20716:	481a      	ldr	r0, [pc, #104]	; (20780 <vTaskStartScheduler+0x19c>)
	vListInitialise( &xDelayedTaskList1 );
   20718:	f8df 808c 	ldr.w	r8, [pc, #140]	; 207a8 <vTaskStartScheduler+0x1c4>
	vListInitialise( &xDelayedTaskList2 );
   2071c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 207ac <vTaskStartScheduler+0x1c8>
   20720:	4e14      	ldr	r6, [pc, #80]	; (20774 <vTaskStartScheduler+0x190>)
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   20722:	f7ff f8e9 	bl	1f8f8 <vListInitialise>
   20726:	4819      	ldr	r0, [pc, #100]	; (2078c <vTaskStartScheduler+0x1a8>)
   20728:	f7ff f8e6 	bl	1f8f8 <vListInitialise>
   2072c:	4818      	ldr	r0, [pc, #96]	; (20790 <vTaskStartScheduler+0x1ac>)
   2072e:	f7ff f8e3 	bl	1f8f8 <vListInitialise>
   20732:	4818      	ldr	r0, [pc, #96]	; (20794 <vTaskStartScheduler+0x1b0>)
   20734:	f7ff f8e0 	bl	1f8f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
   20738:	4640      	mov	r0, r8
   2073a:	f7ff f8dd 	bl	1f8f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
   2073e:	4648      	mov	r0, r9
   20740:	f7ff f8da 	bl	1f8f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
   20744:	4814      	ldr	r0, [pc, #80]	; (20798 <vTaskStartScheduler+0x1b4>)
   20746:	f7ff f8d7 	bl	1f8f8 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
   2074a:	4814      	ldr	r0, [pc, #80]	; (2079c <vTaskStartScheduler+0x1b8>)
   2074c:	f7ff f8d4 	bl	1f8f8 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
   20750:	4a13      	ldr	r2, [pc, #76]	; (207a0 <vTaskStartScheduler+0x1bc>)
		prvAddTaskToReadyList( pxNewTCB );
   20752:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
   20754:	f8c2 8000 	str.w	r8, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   20758:	4a12      	ldr	r2, [pc, #72]	; (207a4 <vTaskStartScheduler+0x1c0>)
   2075a:	f8c2 9000 	str.w	r9, [r2]
}
   2075e:	e788      	b.n	20672 <vTaskStartScheduler+0x8e>
   20760:	454c4449 	.word	0x454c4449
   20764:	00020a51 	.word	0x00020a51
   20768:	1000a074 	.word	0x1000a074
   2076c:	1000a038 	.word	0x1000a038
   20770:	10009fdc 	.word	0x10009fdc
   20774:	1000a094 	.word	0x1000a094
   20778:	1000a044 	.word	0x1000a044
   2077c:	1000a048 	.word	0x1000a048
   20780:	10009fe8 	.word	0x10009fe8
   20784:	1000a078 	.word	0x1000a078
   20788:	1000a0ac 	.word	0x1000a0ac
   2078c:	10009ffc 	.word	0x10009ffc
   20790:	1000a010 	.word	0x1000a010
   20794:	1000a024 	.word	0x1000a024
   20798:	1000a080 	.word	0x1000a080
   2079c:	1000a098 	.word	0x1000a098
   207a0:	10009fe0 	.word	0x10009fe0
   207a4:	10009fe4 	.word	0x10009fe4
   207a8:	1000a04c 	.word	0x1000a04c
   207ac:	1000a060 	.word	0x1000a060

000207b0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
   207b0:	4a02      	ldr	r2, [pc, #8]	; (207bc <vTaskSuspendAll+0xc>)
   207b2:	6813      	ldr	r3, [r2, #0]
   207b4:	3301      	adds	r3, #1
   207b6:	6013      	str	r3, [r2, #0]
}
   207b8:	4770      	bx	lr
   207ba:	bf00      	nop
   207bc:	1000a040 	.word	0x1000a040

000207c0 <xTaskGetTickCount>:
		xTicks = xTickCount;
   207c0:	4b01      	ldr	r3, [pc, #4]	; (207c8 <xTaskGetTickCount+0x8>)
   207c2:	6818      	ldr	r0, [r3, #0]
}
   207c4:	4770      	bx	lr
   207c6:	bf00      	nop
   207c8:	1000a0ac 	.word	0x1000a0ac

000207cc <vTaskStepTick>:
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
   207cc:	4a05      	ldr	r2, [pc, #20]	; (207e4 <vTaskStepTick+0x18>)
   207ce:	4906      	ldr	r1, [pc, #24]	; (207e8 <vTaskStepTick+0x1c>)
   207d0:	6813      	ldr	r3, [r2, #0]
   207d2:	6809      	ldr	r1, [r1, #0]
   207d4:	4403      	add	r3, r0
   207d6:	428b      	cmp	r3, r1
   207d8:	d803      	bhi.n	207e2 <vTaskStepTick+0x16>
		xTickCount += xTicksToJump;
   207da:	6813      	ldr	r3, [r2, #0]
   207dc:	4418      	add	r0, r3
   207de:	6010      	str	r0, [r2, #0]
	}
   207e0:	4770      	bx	lr
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
   207e2:	e7fe      	b.n	207e2 <vTaskStepTick+0x16>
   207e4:	1000a0ac 	.word	0x1000a0ac
   207e8:	1000a078 	.word	0x1000a078

000207ec <xTaskIncrementTick>:
{
   207ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   207f0:	4b40      	ldr	r3, [pc, #256]	; (208f4 <xTaskIncrementTick+0x108>)
   207f2:	681b      	ldr	r3, [r3, #0]
{
   207f4:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   207f6:	2b00      	cmp	r3, #0
   207f8:	d146      	bne.n	20888 <xTaskIncrementTick+0x9c>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   207fa:	4b3f      	ldr	r3, [pc, #252]	; (208f8 <xTaskIncrementTick+0x10c>)
   207fc:	681e      	ldr	r6, [r3, #0]
   207fe:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
   20800:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   20802:	2e00      	cmp	r6, #0
   20804:	d04e      	beq.n	208a4 <xTaskIncrementTick+0xb8>
   20806:	f8df b108 	ldr.w	fp, [pc, #264]	; 20910 <xTaskIncrementTick+0x124>
		if( xConstTickCount >= xNextTaskUnblockTime )
   2080a:	f8db 3000 	ldr.w	r3, [fp]
   2080e:	42b3      	cmp	r3, r6
   20810:	d860      	bhi.n	208d4 <xTaskIncrementTick+0xe8>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   20812:	4f3a      	ldr	r7, [pc, #232]	; (208fc <xTaskIncrementTick+0x110>)
   20814:	683b      	ldr	r3, [r7, #0]
   20816:	681d      	ldr	r5, [r3, #0]
   20818:	2d00      	cmp	r5, #0
   2081a:	d05d      	beq.n	208d8 <xTaskIncrementTick+0xec>
					prvAddTaskToReadyList( pxTCB );
   2081c:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 20914 <xTaskIncrementTick+0x128>
   20820:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 20918 <xTaskIncrementTick+0x12c>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   20824:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 2091c <xTaskIncrementTick+0x130>
BaseType_t xSwitchRequired = pdFALSE;
   20828:	2500      	movs	r5, #0
   2082a:	e022      	b.n	20872 <xTaskIncrementTick+0x86>
   2082c:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   2082e:	f7ff f89b 	bl	1f968 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   20832:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   20834:	9901      	ldr	r1, [sp, #4]
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   20836:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   2083a:	b113      	cbz	r3, 20842 <xTaskIncrementTick+0x56>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   2083c:	f7ff f894 	bl	1f968 <uxListRemove>
   20840:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
   20842:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   20844:	f8d8 3000 	ldr.w	r3, [r8]
   20848:	4298      	cmp	r0, r3
   2084a:	bf88      	it	hi
   2084c:	f8c8 0000 	strhi.w	r0, [r8]
   20850:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   20854:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
   20858:	f7ff f85e 	bl	1f918 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   2085c:	f8d9 3000 	ldr.w	r3, [r9]
   20860:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   20862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
   20864:	429a      	cmp	r2, r3
   20866:	bf28      	it	cs
   20868:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   2086a:	683b      	ldr	r3, [r7, #0]
   2086c:	681b      	ldr	r3, [r3, #0]
   2086e:	2b00      	cmp	r3, #0
   20870:	d032      	beq.n	208d8 <xTaskIncrementTick+0xec>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   20872:	683b      	ldr	r3, [r7, #0]
   20874:	68db      	ldr	r3, [r3, #12]
   20876:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   20878:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   2087a:	1d21      	adds	r1, r4, #4
					if( xConstTickCount < xItemValue )
   2087c:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   2087e:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
   20880:	d2d4      	bcs.n	2082c <xTaskIncrementTick+0x40>
						xNextTaskUnblockTime = xItemValue;
   20882:	f8cb 3000 	str.w	r3, [fp]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
   20886:	e004      	b.n	20892 <xTaskIncrementTick+0xa6>
		++uxPendedTicks;
   20888:	4a1d      	ldr	r2, [pc, #116]	; (20900 <xTaskIncrementTick+0x114>)
   2088a:	6813      	ldr	r3, [r2, #0]
   2088c:	3301      	adds	r3, #1
BaseType_t xSwitchRequired = pdFALSE;
   2088e:	2500      	movs	r5, #0
		++uxPendedTicks;
   20890:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
   20892:	4b1c      	ldr	r3, [pc, #112]	; (20904 <xTaskIncrementTick+0x118>)
   20894:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
   20896:	2b00      	cmp	r3, #0
}
   20898:	bf0c      	ite	eq
   2089a:	4628      	moveq	r0, r5
   2089c:	2001      	movne	r0, #1
   2089e:	b003      	add	sp, #12
   208a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
   208a4:	4b15      	ldr	r3, [pc, #84]	; (208fc <xTaskIncrementTick+0x110>)
   208a6:	681a      	ldr	r2, [r3, #0]
   208a8:	6812      	ldr	r2, [r2, #0]
   208aa:	b992      	cbnz	r2, 208d2 <xTaskIncrementTick+0xe6>
   208ac:	4a16      	ldr	r2, [pc, #88]	; (20908 <xTaskIncrementTick+0x11c>)
   208ae:	6818      	ldr	r0, [r3, #0]
   208b0:	6811      	ldr	r1, [r2, #0]
   208b2:	6019      	str	r1, [r3, #0]
   208b4:	4915      	ldr	r1, [pc, #84]	; (2090c <xTaskIncrementTick+0x120>)
   208b6:	6010      	str	r0, [r2, #0]
   208b8:	680a      	ldr	r2, [r1, #0]
   208ba:	3201      	adds	r2, #1
   208bc:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   208be:	681a      	ldr	r2, [r3, #0]
   208c0:	6812      	ldr	r2, [r2, #0]
   208c2:	b972      	cbnz	r2, 208e2 <xTaskIncrementTick+0xf6>
		xNextTaskUnblockTime = portMAX_DELAY;
   208c4:	f8df b048 	ldr.w	fp, [pc, #72]	; 20910 <xTaskIncrementTick+0x124>
   208c8:	f04f 33ff 	mov.w	r3, #4294967295
   208cc:	f8cb 3000 	str.w	r3, [fp]
   208d0:	e79b      	b.n	2080a <xTaskIncrementTick+0x1e>
			taskSWITCH_DELAYED_LISTS();
   208d2:	e7fe      	b.n	208d2 <xTaskIncrementTick+0xe6>
BaseType_t xSwitchRequired = pdFALSE;
   208d4:	2500      	movs	r5, #0
   208d6:	e7dc      	b.n	20892 <xTaskIncrementTick+0xa6>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   208d8:	f04f 33ff 	mov.w	r3, #4294967295
   208dc:	f8cb 3000 	str.w	r3, [fp]
					break;
   208e0:	e7d7      	b.n	20892 <xTaskIncrementTick+0xa6>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   208e2:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   208e4:	f8df b028 	ldr.w	fp, [pc, #40]	; 20910 <xTaskIncrementTick+0x124>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   208e8:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   208ea:	68db      	ldr	r3, [r3, #12]
   208ec:	685b      	ldr	r3, [r3, #4]
   208ee:	f8cb 3000 	str.w	r3, [fp]
	}
}
   208f2:	e78a      	b.n	2080a <xTaskIncrementTick+0x1e>
   208f4:	1000a040 	.word	0x1000a040
   208f8:	1000a0ac 	.word	0x1000a0ac
   208fc:	10009fe0 	.word	0x10009fe0
   20900:	1000a03c 	.word	0x1000a03c
   20904:	1000a0b0 	.word	0x1000a0b0
   20908:	10009fe4 	.word	0x10009fe4
   2090c:	1000a07c 	.word	0x1000a07c
   20910:	1000a078 	.word	0x1000a078
   20914:	1000a048 	.word	0x1000a048
   20918:	10009fe8 	.word	0x10009fe8
   2091c:	10009fdc 	.word	0x10009fdc

00020920 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
   20920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20924:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
   20926:	f7f3 fb75 	bl	14014 <vPortEnterCritical>
		--uxSchedulerSuspended;
   2092a:	4b3b      	ldr	r3, [pc, #236]	; (20a18 <xTaskResumeAll.part.0+0xf8>)
   2092c:	681a      	ldr	r2, [r3, #0]
   2092e:	3a01      	subs	r2, #1
   20930:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   20932:	681b      	ldr	r3, [r3, #0]
   20934:	2b00      	cmp	r3, #0
   20936:	d156      	bne.n	209e6 <xTaskResumeAll.part.0+0xc6>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   20938:	4b38      	ldr	r3, [pc, #224]	; (20a1c <xTaskResumeAll.part.0+0xfc>)
   2093a:	681b      	ldr	r3, [r3, #0]
   2093c:	2b00      	cmp	r3, #0
   2093e:	d052      	beq.n	209e6 <xTaskResumeAll.part.0+0xc6>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   20940:	4d37      	ldr	r5, [pc, #220]	; (20a20 <xTaskResumeAll.part.0+0x100>)
   20942:	682b      	ldr	r3, [r5, #0]
   20944:	2b00      	cmp	r3, #0
   20946:	d063      	beq.n	20a10 <xTaskResumeAll.part.0+0xf0>
   20948:	4e36      	ldr	r6, [pc, #216]	; (20a24 <xTaskResumeAll.part.0+0x104>)
   2094a:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 20a38 <xTaskResumeAll.part.0+0x118>
   2094e:	4f36      	ldr	r7, [pc, #216]	; (20a28 <xTaskResumeAll.part.0+0x108>)
   20950:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 20a3c <xTaskResumeAll.part.0+0x11c>
						xYieldPending = pdTRUE;
   20954:	f04f 0a01 	mov.w	sl, #1
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   20958:	68eb      	ldr	r3, [r5, #12]
   2095a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   2095c:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   20960:	f104 0018 	add.w	r0, r4, #24
   20964:	f7ff f800 	bl	1f968 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   20968:	4658      	mov	r0, fp
   2096a:	f7fe fffd 	bl	1f968 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
   2096e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   20970:	6832      	ldr	r2, [r6, #0]
   20972:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   20976:	4293      	cmp	r3, r2
   20978:	4659      	mov	r1, fp
   2097a:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   2097e:	bf88      	it	hi
   20980:	6033      	strhi	r3, [r6, #0]
   20982:	f7fe ffc9 	bl	1f918 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   20986:	683b      	ldr	r3, [r7, #0]
   20988:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   2098a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2098c:	429a      	cmp	r2, r3
   2098e:	d332      	bcc.n	209f6 <xTaskResumeAll.part.0+0xd6>
						xYieldPending = pdTRUE;
   20990:	f8c9 a000 	str.w	sl, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   20994:	682b      	ldr	r3, [r5, #0]
   20996:	2b00      	cmp	r3, #0
   20998:	d1de      	bne.n	20958 <xTaskResumeAll.part.0+0x38>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   2099a:	4b24      	ldr	r3, [pc, #144]	; (20a2c <xTaskResumeAll.part.0+0x10c>)
   2099c:	681a      	ldr	r2, [r3, #0]
   2099e:	6812      	ldr	r2, [r2, #0]
   209a0:	2a00      	cmp	r2, #0
   209a2:	d030      	beq.n	20a06 <xTaskResumeAll.part.0+0xe6>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   209a4:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   209a6:	4b22      	ldr	r3, [pc, #136]	; (20a30 <xTaskResumeAll.part.0+0x110>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   209a8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   209aa:	68d2      	ldr	r2, [r2, #12]
   209ac:	6852      	ldr	r2, [r2, #4]
   209ae:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   209b0:	4e20      	ldr	r6, [pc, #128]	; (20a34 <xTaskResumeAll.part.0+0x114>)
   209b2:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
   209b4:	b144      	cbz	r4, 209c8 <xTaskResumeAll.part.0+0xa8>
								xYieldPending = pdTRUE;
   209b6:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
   209b8:	f7ff ff18 	bl	207ec <xTaskIncrementTick>
   209bc:	b108      	cbz	r0, 209c2 <xTaskResumeAll.part.0+0xa2>
								xYieldPending = pdTRUE;
   209be:	f8c9 5000 	str.w	r5, [r9]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   209c2:	3c01      	subs	r4, #1
   209c4:	d1f8      	bne.n	209b8 <xTaskResumeAll.part.0+0x98>
						uxPendedTicks = 0;
   209c6:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
   209c8:	f8d9 3000 	ldr.w	r3, [r9]
   209cc:	b15b      	cbz	r3, 209e6 <xTaskResumeAll.part.0+0xc6>
					taskYIELD_IF_USING_PREEMPTION();
   209ce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   209d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   209d6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
   209da:	f3bf 8f4f 	dsb	sy
   209de:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
   209e2:	2001      	movs	r0, #1
   209e4:	e000      	b.n	209e8 <xTaskResumeAll.part.0+0xc8>
BaseType_t xAlreadyYielded = pdFALSE;
   209e6:	2000      	movs	r0, #0
   209e8:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
   209ea:	f7f3 fb2d 	bl	14048 <vPortExitCritical>
}
   209ee:	9801      	ldr	r0, [sp, #4]
   209f0:	b003      	add	sp, #12
   209f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   209f6:	682b      	ldr	r3, [r5, #0]
   209f8:	2b00      	cmp	r3, #0
   209fa:	d1ad      	bne.n	20958 <xTaskResumeAll.part.0+0x38>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   209fc:	4b0b      	ldr	r3, [pc, #44]	; (20a2c <xTaskResumeAll.part.0+0x10c>)
   209fe:	681a      	ldr	r2, [r3, #0]
   20a00:	6812      	ldr	r2, [r2, #0]
   20a02:	2a00      	cmp	r2, #0
   20a04:	d1ce      	bne.n	209a4 <xTaskResumeAll.part.0+0x84>
		xNextTaskUnblockTime = portMAX_DELAY;
   20a06:	4b0a      	ldr	r3, [pc, #40]	; (20a30 <xTaskResumeAll.part.0+0x110>)
   20a08:	f04f 32ff 	mov.w	r2, #4294967295
   20a0c:	601a      	str	r2, [r3, #0]
   20a0e:	e7cf      	b.n	209b0 <xTaskResumeAll.part.0+0x90>
   20a10:	f8df 9028 	ldr.w	r9, [pc, #40]	; 20a3c <xTaskResumeAll.part.0+0x11c>
   20a14:	e7cc      	b.n	209b0 <xTaskResumeAll.part.0+0x90>
   20a16:	bf00      	nop
   20a18:	1000a040 	.word	0x1000a040
   20a1c:	1000a038 	.word	0x1000a038
   20a20:	1000a080 	.word	0x1000a080
   20a24:	1000a048 	.word	0x1000a048
   20a28:	10009fdc 	.word	0x10009fdc
   20a2c:	10009fe0 	.word	0x10009fe0
   20a30:	1000a078 	.word	0x1000a078
   20a34:	1000a03c 	.word	0x1000a03c
   20a38:	10009fe8 	.word	0x10009fe8
   20a3c:	1000a0b0 	.word	0x1000a0b0

00020a40 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
   20a40:	4b02      	ldr	r3, [pc, #8]	; (20a4c <xTaskResumeAll+0xc>)
   20a42:	681b      	ldr	r3, [r3, #0]
   20a44:	b903      	cbnz	r3, 20a48 <xTaskResumeAll+0x8>
   20a46:	e7fe      	b.n	20a46 <xTaskResumeAll+0x6>
   20a48:	f7ff bf6a 	b.w	20920 <xTaskResumeAll.part.0>
   20a4c:	1000a040 	.word	0x1000a040

00020a50 <prvIdleTask>:
{
   20a50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20a54:	4c2b      	ldr	r4, [pc, #172]	; (20b04 <prvIdleTask+0xb4>)
   20a56:	4e2c      	ldr	r6, [pc, #176]	; (20b08 <prvIdleTask+0xb8>)
   20a58:	4d2c      	ldr	r5, [pc, #176]	; (20b0c <prvIdleTask+0xbc>)
   20a5a:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 20b10 <prvIdleTask+0xc0>
   20a5e:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 20b14 <prvIdleTask+0xc4>
   20a62:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 20b18 <prvIdleTask+0xc8>
				taskYIELD();
   20a66:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
   20a6a:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   20a6e:	6823      	ldr	r3, [r4, #0]
   20a70:	2b01      	cmp	r3, #1
   20a72:	d905      	bls.n	20a80 <prvIdleTask+0x30>
				taskYIELD();
   20a74:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
   20a78:	f3bf 8f4f 	dsb	sy
   20a7c:	f3bf 8f6f 	isb	sy
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
   20a80:	6833      	ldr	r3, [r6, #0]
   20a82:	bb13      	cbnz	r3, 20aca <prvIdleTask+0x7a>
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
   20a84:	682b      	ldr	r3, [r5, #0]
   20a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20a88:	2b00      	cmp	r3, #0
   20a8a:	d1f0      	bne.n	20a6e <prvIdleTask+0x1e>
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
   20a8c:	6823      	ldr	r3, [r4, #0]
   20a8e:	2b01      	cmp	r3, #1
   20a90:	d8ed      	bhi.n	20a6e <prvIdleTask+0x1e>
			xReturn = xNextTaskUnblockTime - xTickCount;
   20a92:	f8db 3000 	ldr.w	r3, [fp]
   20a96:	f8da 2000 	ldr.w	r2, [sl]
   20a9a:	1a9b      	subs	r3, r3, r2
			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
   20a9c:	2b01      	cmp	r3, #1
   20a9e:	d9e6      	bls.n	20a6e <prvIdleTask+0x1e>
	++uxSchedulerSuspended;
   20aa0:	f8d9 3000 	ldr.w	r3, [r9]
   20aa4:	3301      	adds	r3, #1
   20aa6:	f8c9 3000 	str.w	r3, [r9]
					configASSERT( xNextTaskUnblockTime >= xTickCount );
   20aaa:	f8db 2000 	ldr.w	r2, [fp]
   20aae:	f8da 3000 	ldr.w	r3, [sl]
   20ab2:	429a      	cmp	r2, r3
   20ab4:	d308      	bcc.n	20ac8 <prvIdleTask+0x78>
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
   20ab6:	6833      	ldr	r3, [r6, #0]
   20ab8:	b16b      	cbz	r3, 20ad6 <prvIdleTask+0x86>
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
   20aba:	682b      	ldr	r3, [r5, #0]
   20abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20abe:	b1f3      	cbz	r3, 20afe <prvIdleTask+0xae>
	configASSERT( uxSchedulerSuspended );
   20ac0:	f8d9 3000 	ldr.w	r3, [r9]
   20ac4:	b9c3      	cbnz	r3, 20af8 <prvIdleTask+0xa8>
   20ac6:	e7fe      	b.n	20ac6 <prvIdleTask+0x76>
					configASSERT( xNextTaskUnblockTime >= xTickCount );
   20ac8:	e7fe      	b.n	20ac8 <prvIdleTask+0x78>
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
   20aca:	682b      	ldr	r3, [r5, #0]
   20acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20ace:	2b00      	cmp	r3, #0
   20ad0:	d1cd      	bne.n	20a6e <prvIdleTask+0x1e>
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
   20ad2:	6823      	ldr	r3, [r4, #0]
   20ad4:	e7cb      	b.n	20a6e <prvIdleTask+0x1e>
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
   20ad6:	682b      	ldr	r3, [r5, #0]
   20ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20ada:	2b00      	cmp	r3, #0
   20adc:	d1f0      	bne.n	20ac0 <prvIdleTask+0x70>
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
   20ade:	6823      	ldr	r3, [r4, #0]
   20ae0:	2b01      	cmp	r3, #1
   20ae2:	d8ed      	bhi.n	20ac0 <prvIdleTask+0x70>
			xReturn = xNextTaskUnblockTime - xTickCount;
   20ae4:	f8db 0000 	ldr.w	r0, [fp]
   20ae8:	f8da 3000 	ldr.w	r3, [sl]
   20aec:	1ac0      	subs	r0, r0, r3
					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
   20aee:	2801      	cmp	r0, #1
   20af0:	d9e6      	bls.n	20ac0 <prvIdleTask+0x70>
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
   20af2:	f7f3 fb1b 	bl	1412c <vPortSuppressTicksAndSleep>
						traceLOW_POWER_IDLE_END();
   20af6:	e7e3      	b.n	20ac0 <prvIdleTask+0x70>
   20af8:	f7ff ff12 	bl	20920 <xTaskResumeAll.part.0>
   20afc:	e7b7      	b.n	20a6e <prvIdleTask+0x1e>
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
   20afe:	6823      	ldr	r3, [r4, #0]
   20b00:	e7de      	b.n	20ac0 <prvIdleTask+0x70>
   20b02:	bf00      	nop
   20b04:	10009fe8 	.word	0x10009fe8
   20b08:	1000a048 	.word	0x1000a048
   20b0c:	10009fdc 	.word	0x10009fdc
   20b10:	1000a078 	.word	0x1000a078
   20b14:	1000a0ac 	.word	0x1000a0ac
   20b18:	1000a040 	.word	0x1000a040

00020b1c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   20b1c:	4b04      	ldr	r3, [pc, #16]	; (20b30 <vTaskSwitchContext+0x14>)
   20b1e:	681b      	ldr	r3, [r3, #0]
   20b20:	b11b      	cbz	r3, 20b2a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
   20b22:	4b04      	ldr	r3, [pc, #16]	; (20b34 <vTaskSwitchContext+0x18>)
   20b24:	2201      	movs	r2, #1
   20b26:	601a      	str	r2, [r3, #0]
}
   20b28:	4770      	bx	lr
   20b2a:	f7ff bb5b 	b.w	201e4 <vTaskSwitchContext.part.0>
   20b2e:	bf00      	nop
   20b30:	1000a040 	.word	0x1000a040
   20b34:	1000a0b0 	.word	0x1000a0b0

00020b38 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
   20b38:	b1d0      	cbz	r0, 20b70 <vTaskPlaceOnEventList+0x38>
{
   20b3a:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   20b3c:	4d16      	ldr	r5, [pc, #88]	; (20b98 <vTaskPlaceOnEventList+0x60>)
   20b3e:	460c      	mov	r4, r1
   20b40:	6829      	ldr	r1, [r5, #0]
   20b42:	3118      	adds	r1, #24
   20b44:	f7fe fef8 	bl	1f938 <vListInsert>


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   20b48:	4b14      	ldr	r3, [pc, #80]	; (20b9c <vTaskPlaceOnEventList+0x64>)
   20b4a:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   20b4c:	6828      	ldr	r0, [r5, #0]
   20b4e:	3004      	adds	r0, #4
   20b50:	f7fe ff0a 	bl	1f968 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   20b54:	1c63      	adds	r3, r4, #1
   20b56:	d00c      	beq.n	20b72 <vTaskPlaceOnEventList+0x3a>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   20b58:	682b      	ldr	r3, [r5, #0]
   20b5a:	19a4      	adds	r4, r4, r6
   20b5c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
   20b5e:	d30f      	bcc.n	20b80 <vTaskPlaceOnEventList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   20b60:	4b0f      	ldr	r3, [pc, #60]	; (20ba0 <vTaskPlaceOnEventList+0x68>)
   20b62:	6818      	ldr	r0, [r3, #0]
   20b64:	6829      	ldr	r1, [r5, #0]
}
   20b66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   20b6a:	3104      	adds	r1, #4
   20b6c:	f7fe bee4 	b.w	1f938 <vListInsert>
	configASSERT( pxEventList );
   20b70:	e7fe      	b.n	20b70 <vTaskPlaceOnEventList+0x38>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   20b72:	6829      	ldr	r1, [r5, #0]
   20b74:	480b      	ldr	r0, [pc, #44]	; (20ba4 <vTaskPlaceOnEventList+0x6c>)
}
   20b76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   20b7a:	3104      	adds	r1, #4
   20b7c:	f7fe becc 	b.w	1f918 <vListInsertEnd>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   20b80:	4b09      	ldr	r3, [pc, #36]	; (20ba8 <vTaskPlaceOnEventList+0x70>)
   20b82:	6818      	ldr	r0, [r3, #0]
   20b84:	6829      	ldr	r1, [r5, #0]
   20b86:	3104      	adds	r1, #4
   20b88:	f7fe fed6 	bl	1f938 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
   20b8c:	4b07      	ldr	r3, [pc, #28]	; (20bac <vTaskPlaceOnEventList+0x74>)
   20b8e:	681a      	ldr	r2, [r3, #0]
   20b90:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
   20b92:	bf38      	it	cc
   20b94:	601c      	strcc	r4, [r3, #0]
}
   20b96:	bd70      	pop	{r4, r5, r6, pc}
   20b98:	10009fdc 	.word	0x10009fdc
   20b9c:	1000a0ac 	.word	0x1000a0ac
   20ba0:	10009fe4 	.word	0x10009fe4
   20ba4:	1000a098 	.word	0x1000a098
   20ba8:	10009fe0 	.word	0x10009fe0
   20bac:	1000a078 	.word	0x1000a078

00020bb0 <vTaskPlaceOnUnorderedEventList>:
	configASSERT( pxEventList );
   20bb0:	b118      	cbz	r0, 20bba <vTaskPlaceOnUnorderedEventList+0xa>
	configASSERT( uxSchedulerSuspended != 0 );
   20bb2:	4b1b      	ldr	r3, [pc, #108]	; (20c20 <vTaskPlaceOnUnorderedEventList+0x70>)
   20bb4:	681b      	ldr	r3, [r3, #0]
   20bb6:	b90b      	cbnz	r3, 20bbc <vTaskPlaceOnUnorderedEventList+0xc>
   20bb8:	e7fe      	b.n	20bb8 <vTaskPlaceOnUnorderedEventList+0x8>
	configASSERT( pxEventList );
   20bba:	e7fe      	b.n	20bba <vTaskPlaceOnUnorderedEventList+0xa>
{
   20bbc:	b570      	push	{r4, r5, r6, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
   20bbe:	4d19      	ldr	r5, [pc, #100]	; (20c24 <vTaskPlaceOnUnorderedEventList+0x74>)
   20bc0:	682b      	ldr	r3, [r5, #0]
   20bc2:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
   20bc6:	6199      	str	r1, [r3, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   20bc8:	6829      	ldr	r1, [r5, #0]
   20bca:	3118      	adds	r1, #24
   20bcc:	4614      	mov	r4, r2
   20bce:	f7fe fea3 	bl	1f918 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
   20bd2:	4b15      	ldr	r3, [pc, #84]	; (20c28 <vTaskPlaceOnUnorderedEventList+0x78>)
   20bd4:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   20bd6:	6828      	ldr	r0, [r5, #0]
   20bd8:	3004      	adds	r0, #4
   20bda:	f7fe fec5 	bl	1f968 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   20bde:	1c63      	adds	r3, r4, #1
   20be0:	d00b      	beq.n	20bfa <vTaskPlaceOnUnorderedEventList+0x4a>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   20be2:	682b      	ldr	r3, [r5, #0]
   20be4:	19a4      	adds	r4, r4, r6
   20be6:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   20be8:	d30e      	bcc.n	20c08 <vTaskPlaceOnUnorderedEventList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   20bea:	4b10      	ldr	r3, [pc, #64]	; (20c2c <vTaskPlaceOnUnorderedEventList+0x7c>)
   20bec:	6818      	ldr	r0, [r3, #0]
   20bee:	6829      	ldr	r1, [r5, #0]
}
   20bf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   20bf4:	3104      	adds	r1, #4
   20bf6:	f7fe be9f 	b.w	1f938 <vListInsert>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   20bfa:	6829      	ldr	r1, [r5, #0]
   20bfc:	480c      	ldr	r0, [pc, #48]	; (20c30 <vTaskPlaceOnUnorderedEventList+0x80>)
}
   20bfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   20c02:	3104      	adds	r1, #4
   20c04:	f7fe be88 	b.w	1f918 <vListInsertEnd>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   20c08:	4b0a      	ldr	r3, [pc, #40]	; (20c34 <vTaskPlaceOnUnorderedEventList+0x84>)
   20c0a:	6818      	ldr	r0, [r3, #0]
   20c0c:	6829      	ldr	r1, [r5, #0]
   20c0e:	3104      	adds	r1, #4
   20c10:	f7fe fe92 	bl	1f938 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
   20c14:	4b08      	ldr	r3, [pc, #32]	; (20c38 <vTaskPlaceOnUnorderedEventList+0x88>)
   20c16:	681a      	ldr	r2, [r3, #0]
   20c18:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
   20c1a:	bf38      	it	cc
   20c1c:	601c      	strcc	r4, [r3, #0]
}
   20c1e:	bd70      	pop	{r4, r5, r6, pc}
   20c20:	1000a040 	.word	0x1000a040
   20c24:	10009fdc 	.word	0x10009fdc
   20c28:	1000a0ac 	.word	0x1000a0ac
   20c2c:	10009fe4 	.word	0x10009fe4
   20c30:	1000a098 	.word	0x1000a098
   20c34:	10009fe0 	.word	0x10009fe0
   20c38:	1000a078 	.word	0x1000a078

00020c3c <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
   20c3c:	b1d0      	cbz	r0, 20c74 <vTaskPlaceOnEventListRestricted+0x38>
	{
   20c3e:	b570      	push	{r4, r5, r6, lr}
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   20c40:	4e19      	ldr	r6, [pc, #100]	; (20ca8 <vTaskPlaceOnEventListRestricted+0x6c>)
   20c42:	460c      	mov	r4, r1
   20c44:	6831      	ldr	r1, [r6, #0]
   20c46:	4615      	mov	r5, r2
   20c48:	3118      	adds	r1, #24
   20c4a:	f7fe fe65 	bl	1f918 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
   20c4e:	4b17      	ldr	r3, [pc, #92]	; (20cac <vTaskPlaceOnEventListRestricted+0x70>)
		if( xWaitIndefinitely != pdFALSE )
   20c50:	b98d      	cbnz	r5, 20c76 <vTaskPlaceOnEventListRestricted+0x3a>
const TickType_t xConstTickCount = xTickCount;
   20c52:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   20c54:	6830      	ldr	r0, [r6, #0]
   20c56:	3004      	adds	r0, #4
   20c58:	f7fe fe86 	bl	1f968 <uxListRemove>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   20c5c:	6833      	ldr	r3, [r6, #0]
   20c5e:	1964      	adds	r4, r4, r5
   20c60:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   20c62:	d314      	bcc.n	20c8e <vTaskPlaceOnEventListRestricted+0x52>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   20c64:	4b12      	ldr	r3, [pc, #72]	; (20cb0 <vTaskPlaceOnEventListRestricted+0x74>)
   20c66:	6818      	ldr	r0, [r3, #0]
   20c68:	6831      	ldr	r1, [r6, #0]
	}
   20c6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   20c6e:	3104      	adds	r1, #4
   20c70:	f7fe be62 	b.w	1f938 <vListInsert>
		configASSERT( pxEventList );
   20c74:	e7fe      	b.n	20c74 <vTaskPlaceOnEventListRestricted+0x38>
const TickType_t xConstTickCount = xTickCount;
   20c76:	681b      	ldr	r3, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   20c78:	6830      	ldr	r0, [r6, #0]
   20c7a:	3004      	adds	r0, #4
   20c7c:	f7fe fe74 	bl	1f968 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   20c80:	6831      	ldr	r1, [r6, #0]
   20c82:	480c      	ldr	r0, [pc, #48]	; (20cb4 <vTaskPlaceOnEventListRestricted+0x78>)
	}
   20c84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   20c88:	3104      	adds	r1, #4
   20c8a:	f7fe be45 	b.w	1f918 <vListInsertEnd>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   20c8e:	4b0a      	ldr	r3, [pc, #40]	; (20cb8 <vTaskPlaceOnEventListRestricted+0x7c>)
   20c90:	6818      	ldr	r0, [r3, #0]
   20c92:	6831      	ldr	r1, [r6, #0]
   20c94:	3104      	adds	r1, #4
   20c96:	f7fe fe4f 	bl	1f938 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
   20c9a:	4b08      	ldr	r3, [pc, #32]	; (20cbc <vTaskPlaceOnEventListRestricted+0x80>)
   20c9c:	681a      	ldr	r2, [r3, #0]
   20c9e:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
   20ca0:	bf38      	it	cc
   20ca2:	601c      	strcc	r4, [r3, #0]
	}
   20ca4:	bd70      	pop	{r4, r5, r6, pc}
   20ca6:	bf00      	nop
   20ca8:	10009fdc 	.word	0x10009fdc
   20cac:	1000a0ac 	.word	0x1000a0ac
   20cb0:	10009fe4 	.word	0x10009fe4
   20cb4:	1000a098 	.word	0x1000a098
   20cb8:	10009fe0 	.word	0x10009fe0
   20cbc:	1000a078 	.word	0x1000a078

00020cc0 <xTaskRemoveFromEventList>:
{
   20cc0:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   20cc2:	68c3      	ldr	r3, [r0, #12]
   20cc4:	68dc      	ldr	r4, [r3, #12]
{
   20cc6:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
   20cc8:	b304      	cbz	r4, 20d0c <xTaskRemoveFromEventList+0x4c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   20cca:	f104 0518 	add.w	r5, r4, #24
   20cce:	4628      	mov	r0, r5
   20cd0:	f7fe fe4a 	bl	1f968 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   20cd4:	4b1c      	ldr	r3, [pc, #112]	; (20d48 <xTaskRemoveFromEventList+0x88>)
   20cd6:	681b      	ldr	r3, [r3, #0]
   20cd8:	b1cb      	cbz	r3, 20d0e <xTaskRemoveFromEventList+0x4e>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   20cda:	481c      	ldr	r0, [pc, #112]	; (20d4c <xTaskRemoveFromEventList+0x8c>)
   20cdc:	4629      	mov	r1, r5
   20cde:	f7fe fe1b 	bl	1f918 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   20ce2:	4b1b      	ldr	r3, [pc, #108]	; (20d50 <xTaskRemoveFromEventList+0x90>)
   20ce4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   20ce6:	681b      	ldr	r3, [r3, #0]
   20ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20cea:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
   20cec:	bf82      	ittt	hi
   20cee:	4b19      	ldrhi	r3, [pc, #100]	; (20d54 <xTaskRemoveFromEventList+0x94>)
   20cf0:	2001      	movhi	r0, #1
   20cf2:	6018      	strhi	r0, [r3, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   20cf4:	4b18      	ldr	r3, [pc, #96]	; (20d58 <xTaskRemoveFromEventList+0x98>)
   20cf6:	681a      	ldr	r2, [r3, #0]
   20cf8:	6812      	ldr	r2, [r2, #0]
		xReturn = pdFALSE;
   20cfa:	bf98      	it	ls
   20cfc:	2000      	movls	r0, #0
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   20cfe:	b9d2      	cbnz	r2, 20d36 <xTaskRemoveFromEventList+0x76>
		xNextTaskUnblockTime = portMAX_DELAY;
   20d00:	4b16      	ldr	r3, [pc, #88]	; (20d5c <xTaskRemoveFromEventList+0x9c>)
   20d02:	f04f 32ff 	mov.w	r2, #4294967295
   20d06:	601a      	str	r2, [r3, #0]
}
   20d08:	b003      	add	sp, #12
   20d0a:	bd30      	pop	{r4, r5, pc}
	configASSERT( pxUnblockedTCB );
   20d0c:	e7fe      	b.n	20d0c <xTaskRemoveFromEventList+0x4c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   20d0e:	1d21      	adds	r1, r4, #4
   20d10:	4608      	mov	r0, r1
   20d12:	9101      	str	r1, [sp, #4]
   20d14:	f7fe fe28 	bl	1f968 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
   20d18:	4a11      	ldr	r2, [pc, #68]	; (20d60 <xTaskRemoveFromEventList+0xa0>)
   20d1a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   20d1c:	6810      	ldr	r0, [r2, #0]
   20d1e:	9901      	ldr	r1, [sp, #4]
   20d20:	4283      	cmp	r3, r0
   20d22:	4810      	ldr	r0, [pc, #64]	; (20d64 <xTaskRemoveFromEventList+0xa4>)
   20d24:	bf88      	it	hi
   20d26:	6013      	strhi	r3, [r2, #0]
   20d28:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   20d2c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   20d30:	f7fe fdf2 	bl	1f918 <vListInsertEnd>
   20d34:	e7d5      	b.n	20ce2 <xTaskRemoveFromEventList+0x22>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   20d36:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   20d38:	4b08      	ldr	r3, [pc, #32]	; (20d5c <xTaskRemoveFromEventList+0x9c>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   20d3a:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   20d3c:	68d2      	ldr	r2, [r2, #12]
   20d3e:	6852      	ldr	r2, [r2, #4]
   20d40:	601a      	str	r2, [r3, #0]
}
   20d42:	b003      	add	sp, #12
   20d44:	bd30      	pop	{r4, r5, pc}
   20d46:	bf00      	nop
   20d48:	1000a040 	.word	0x1000a040
   20d4c:	1000a080 	.word	0x1000a080
   20d50:	10009fdc 	.word	0x10009fdc
   20d54:	1000a0b0 	.word	0x1000a0b0
   20d58:	10009fe0 	.word	0x10009fe0
   20d5c:	1000a078 	.word	0x1000a078
   20d60:	1000a048 	.word	0x1000a048
   20d64:	10009fe8 	.word	0x10009fe8

00020d68 <vTaskRemoveFromUnorderedEventList>:
{
   20d68:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
   20d6a:	4b14      	ldr	r3, [pc, #80]	; (20dbc <vTaskRemoveFromUnorderedEventList+0x54>)
   20d6c:	681a      	ldr	r2, [r3, #0]
   20d6e:	b312      	cbz	r2, 20db6 <vTaskRemoveFromUnorderedEventList+0x4e>
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   20d70:	68c4      	ldr	r4, [r0, #12]
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
   20d72:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
   20d76:	6001      	str	r1, [r0, #0]
	configASSERT( pxUnblockedTCB );
   20d78:	b1f4      	cbz	r4, 20db8 <vTaskRemoveFromUnorderedEventList+0x50>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   20d7a:	1d25      	adds	r5, r4, #4
	( void ) uxListRemove( pxEventListItem );
   20d7c:	f7fe fdf4 	bl	1f968 <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   20d80:	4628      	mov	r0, r5
   20d82:	f7fe fdf1 	bl	1f968 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
   20d86:	4a0e      	ldr	r2, [pc, #56]	; (20dc0 <vTaskRemoveFromUnorderedEventList+0x58>)
   20d88:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   20d8a:	6811      	ldr	r1, [r2, #0]
   20d8c:	480d      	ldr	r0, [pc, #52]	; (20dc4 <vTaskRemoveFromUnorderedEventList+0x5c>)
   20d8e:	428b      	cmp	r3, r1
   20d90:	bf88      	it	hi
   20d92:	6013      	strhi	r3, [r2, #0]
   20d94:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   20d98:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   20d9c:	4629      	mov	r1, r5
   20d9e:	f7fe fdbb 	bl	1f918 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   20da2:	4b09      	ldr	r3, [pc, #36]	; (20dc8 <vTaskRemoveFromUnorderedEventList+0x60>)
   20da4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   20da6:	681b      	ldr	r3, [r3, #0]
   20da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20daa:	429a      	cmp	r2, r3
   20dac:	d902      	bls.n	20db4 <vTaskRemoveFromUnorderedEventList+0x4c>
		xYieldPending = pdTRUE;
   20dae:	4b07      	ldr	r3, [pc, #28]	; (20dcc <vTaskRemoveFromUnorderedEventList+0x64>)
   20db0:	2201      	movs	r2, #1
   20db2:	601a      	str	r2, [r3, #0]
}
   20db4:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( uxSchedulerSuspended != pdFALSE );
   20db6:	e7fe      	b.n	20db6 <vTaskRemoveFromUnorderedEventList+0x4e>
	configASSERT( pxUnblockedTCB );
   20db8:	e7fe      	b.n	20db8 <vTaskRemoveFromUnorderedEventList+0x50>
   20dba:	bf00      	nop
   20dbc:	1000a040 	.word	0x1000a040
   20dc0:	1000a048 	.word	0x1000a048
   20dc4:	10009fe8 	.word	0x10009fe8
   20dc8:	10009fdc 	.word	0x10009fdc
   20dcc:	1000a0b0 	.word	0x1000a0b0

00020dd0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   20dd0:	4a03      	ldr	r2, [pc, #12]	; (20de0 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
   20dd2:	4b04      	ldr	r3, [pc, #16]	; (20de4 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   20dd4:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   20dd6:	681b      	ldr	r3, [r3, #0]
   20dd8:	e9c0 2300 	strd	r2, r3, [r0]
}
   20ddc:	4770      	bx	lr
   20dde:	bf00      	nop
   20de0:	1000a07c 	.word	0x1000a07c
   20de4:	1000a0ac 	.word	0x1000a0ac

00020de8 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
   20de8:	b1e8      	cbz	r0, 20e26 <xTaskCheckForTimeOut+0x3e>
{
   20dea:	b5f0      	push	{r4, r5, r6, r7, lr}
   20dec:	460d      	mov	r5, r1
   20dee:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
   20df0:	b1c1      	cbz	r1, 20e24 <xTaskCheckForTimeOut+0x3c>
   20df2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
   20df4:	f7f3 f90e 	bl	14014 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
   20df8:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
   20dfa:	4a15      	ldr	r2, [pc, #84]	; (20e50 <xTaskCheckForTimeOut+0x68>)
			if( *pxTicksToWait == portMAX_DELAY )
   20dfc:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
   20dfe:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
   20e00:	d020      	beq.n	20e44 <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   20e02:	f8df c050 	ldr.w	ip, [pc, #80]	; 20e54 <xTaskCheckForTimeOut+0x6c>
   20e06:	e9d4 6000 	ldrd	r6, r0, [r4]
   20e0a:	f8dc 7000 	ldr.w	r7, [ip]
   20e0e:	42be      	cmp	r6, r7
   20e10:	d00a      	beq.n	20e28 <xTaskCheckForTimeOut+0x40>
   20e12:	4288      	cmp	r0, r1
   20e14:	d808      	bhi.n	20e28 <xTaskCheckForTimeOut+0x40>
			xReturn = pdTRUE;
   20e16:	2001      	movs	r0, #1
   20e18:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
   20e1a:	f7f3 f915 	bl	14048 <vPortExitCritical>
}
   20e1e:	9801      	ldr	r0, [sp, #4]
   20e20:	b003      	add	sp, #12
   20e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxTicksToWait );
   20e24:	e7fe      	b.n	20e24 <xTaskCheckForTimeOut+0x3c>
	configASSERT( pxTimeOut );
   20e26:	e7fe      	b.n	20e26 <xTaskCheckForTimeOut+0x3e>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   20e28:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   20e2c:	4573      	cmp	r3, lr
   20e2e:	d90b      	bls.n	20e48 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= xElapsedTime;
   20e30:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   20e32:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
   20e36:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
   20e38:	4403      	add	r3, r0
   20e3a:	602b      	str	r3, [r5, #0]
			xReturn = pdFALSE;
   20e3c:	2000      	movs	r0, #0
	pxTimeOut->xTimeOnEntering = xTickCount;
   20e3e:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
   20e42:	e7e9      	b.n	20e18 <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
   20e44:	2000      	movs	r0, #0
   20e46:	e7e7      	b.n	20e18 <xTaskCheckForTimeOut+0x30>
			*pxTicksToWait = 0;
   20e48:	2300      	movs	r3, #0
   20e4a:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
   20e4c:	2001      	movs	r0, #1
   20e4e:	e7e3      	b.n	20e18 <xTaskCheckForTimeOut+0x30>
   20e50:	1000a0ac 	.word	0x1000a0ac
   20e54:	1000a07c 	.word	0x1000a07c

00020e58 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
   20e58:	4b01      	ldr	r3, [pc, #4]	; (20e60 <vTaskMissedYield+0x8>)
   20e5a:	2201      	movs	r2, #1
   20e5c:	601a      	str	r2, [r3, #0]
}
   20e5e:	4770      	bx	lr
   20e60:	1000a0b0 	.word	0x1000a0b0

00020e64 <eTaskConfirmSleepModeStatus>:
		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
   20e64:	4b09      	ldr	r3, [pc, #36]	; (20e8c <eTaskConfirmSleepModeStatus+0x28>)
   20e66:	6818      	ldr	r0, [r3, #0]
   20e68:	b918      	cbnz	r0, 20e72 <eTaskConfirmSleepModeStatus+0xe>
		else if( xYieldPending != pdFALSE )
   20e6a:	4b09      	ldr	r3, [pc, #36]	; (20e90 <eTaskConfirmSleepModeStatus+0x2c>)
   20e6c:	681b      	ldr	r3, [r3, #0]
   20e6e:	b113      	cbz	r3, 20e76 <eTaskConfirmSleepModeStatus+0x12>
	}
   20e70:	4770      	bx	lr
			eReturn = eAbortSleep;
   20e72:	2000      	movs	r0, #0
	}
   20e74:	4770      	bx	lr
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
   20e76:	4a07      	ldr	r2, [pc, #28]	; (20e94 <eTaskConfirmSleepModeStatus+0x30>)
   20e78:	4b07      	ldr	r3, [pc, #28]	; (20e98 <eTaskConfirmSleepModeStatus+0x34>)
   20e7a:	6810      	ldr	r0, [r2, #0]
   20e7c:	681b      	ldr	r3, [r3, #0]
   20e7e:	3b01      	subs	r3, #1
				eReturn = eNoTasksWaitingTimeout;
   20e80:	4298      	cmp	r0, r3
   20e82:	bf14      	ite	ne
   20e84:	2001      	movne	r0, #1
   20e86:	2002      	moveq	r0, #2
   20e88:	4770      	bx	lr
   20e8a:	bf00      	nop
   20e8c:	1000a080 	.word	0x1000a080
   20e90:	1000a0b0 	.word	0x1000a0b0
   20e94:	1000a098 	.word	0x1000a098
   20e98:	1000a038 	.word	0x1000a038

00020e9c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
   20e9c:	4b05      	ldr	r3, [pc, #20]	; (20eb4 <xTaskGetSchedulerState+0x18>)
   20e9e:	681b      	ldr	r3, [r3, #0]
   20ea0:	b133      	cbz	r3, 20eb0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   20ea2:	4b05      	ldr	r3, [pc, #20]	; (20eb8 <xTaskGetSchedulerState+0x1c>)
   20ea4:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
   20ea6:	2b00      	cmp	r3, #0
   20ea8:	bf0c      	ite	eq
   20eaa:	2002      	moveq	r0, #2
   20eac:	2000      	movne	r0, #0
   20eae:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
   20eb0:	2001      	movs	r0, #1
	}
   20eb2:	4770      	bx	lr
   20eb4:	1000a094 	.word	0x1000a094
   20eb8:	1000a040 	.word	0x1000a040

00020ebc <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
   20ebc:	4a04      	ldr	r2, [pc, #16]	; (20ed0 <uxTaskResetEventItemValue+0x14>)
   20ebe:	6811      	ldr	r1, [r2, #0]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   20ec0:	6813      	ldr	r3, [r2, #0]
   20ec2:	6812      	ldr	r2, [r2, #0]
   20ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
   20ec6:	6988      	ldr	r0, [r1, #24]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   20ec8:	f1c3 0304 	rsb	r3, r3, #4
   20ecc:	6193      	str	r3, [r2, #24]
}
   20ece:	4770      	bx	lr
   20ed0:	10009fdc 	.word	0x10009fdc

00020ed4 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   20ed4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20ed8:	4e1d      	ldr	r6, [pc, #116]	; (20f50 <prvSwitchTimerLists+0x7c>)
	if( xTimerQueue != NULL )
   20eda:	f8df 907c 	ldr.w	r9, [pc, #124]	; 20f58 <prvSwitchTimerLists+0x84>
{
   20ede:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
   20ee0:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   20ee4:	e00c      	b.n	20f00 <prvSwitchTimerLists+0x2c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   20ee6:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   20ee8:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   20eea:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   20eec:	1d25      	adds	r5, r4, #4
   20eee:	4628      	mov	r0, r5
   20ef0:	f7fe fd3a 	bl	1f968 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   20ef4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   20ef6:	4620      	mov	r0, r4
   20ef8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   20efa:	69e3      	ldr	r3, [r4, #28]
   20efc:	2b01      	cmp	r3, #1
   20efe:	d00a      	beq.n	20f16 <prvSwitchTimerLists+0x42>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   20f00:	6833      	ldr	r3, [r6, #0]
   20f02:	681a      	ldr	r2, [r3, #0]
   20f04:	2a00      	cmp	r2, #0
   20f06:	d1ee      	bne.n	20ee6 <prvSwitchTimerLists+0x12>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   20f08:	4a12      	ldr	r2, [pc, #72]	; (20f54 <prvSwitchTimerLists+0x80>)
   20f0a:	6811      	ldr	r1, [r2, #0]
   20f0c:	6031      	str	r1, [r6, #0]
	pxOverflowTimerList = pxTemp;
   20f0e:	6013      	str	r3, [r2, #0]
}
   20f10:	b005      	add	sp, #20
   20f12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   20f16:	69a3      	ldr	r3, [r4, #24]
   20f18:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
   20f1a:	429f      	cmp	r7, r3
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   20f1c:	4629      	mov	r1, r5
			if( xReloadTime > xNextExpireTime )
   20f1e:	d205      	bcs.n	20f2c <prvSwitchTimerLists+0x58>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   20f20:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   20f22:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   20f24:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   20f26:	f7fe fd07 	bl	1f938 <vListInsert>
   20f2a:	e7e9      	b.n	20f00 <prvSwitchTimerLists+0x2c>
	if( xTimerQueue != NULL )
   20f2c:	f8d9 3000 	ldr.w	r3, [r9]
   20f30:	b16b      	cbz	r3, 20f4e <prvSwitchTimerLists+0x7a>
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   20f32:	e9cd 8700 	strd	r8, r7, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
   20f36:	9402      	str	r4, [sp, #8]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   20f38:	f7ff ffb0 	bl	20e9c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   20f3c:	2300      	movs	r3, #0
   20f3e:	f8d9 0000 	ldr.w	r0, [r9]
   20f42:	461a      	mov	r2, r3
   20f44:	4669      	mov	r1, sp
   20f46:	f7fe fd5f 	bl	1fa08 <xQueueGenericSend>
				configASSERT( xResult );
   20f4a:	2800      	cmp	r0, #0
   20f4c:	d1d8      	bne.n	20f00 <prvSwitchTimerLists+0x2c>
   20f4e:	e7fe      	b.n	20f4e <prvSwitchTimerLists+0x7a>
   20f50:	1000a0b4 	.word	0x1000a0b4
   20f54:	1000a0b8 	.word	0x1000a0b8
   20f58:	1000a0e8 	.word	0x1000a0e8

00020f5c <prvTimerTask>:
{
   20f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20f60:	4e84      	ldr	r6, [pc, #528]	; (21174 <prvTimerTask+0x218>)
   20f62:	4d85      	ldr	r5, [pc, #532]	; (21178 <prvTimerTask+0x21c>)
   20f64:	4c85      	ldr	r4, [pc, #532]	; (2117c <prvTimerTask+0x220>)
   20f66:	b08b      	sub	sp, #44	; 0x2c
					portYIELD_WITHIN_API();
   20f68:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   20f6c:	6833      	ldr	r3, [r6, #0]
   20f6e:	f8d3 a000 	ldr.w	sl, [r3]
   20f72:	f1ba 0f00 	cmp.w	sl, #0
   20f76:	f000 8098 	beq.w	210aa <prvTimerTask+0x14e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   20f7a:	68db      	ldr	r3, [r3, #12]
   20f7c:	f8d3 a000 	ldr.w	sl, [r3]
	vTaskSuspendAll();
   20f80:	f7ff fc16 	bl	207b0 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
   20f84:	f7ff fc1c 	bl	207c0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
   20f88:	682a      	ldr	r2, [r5, #0]
   20f8a:	4282      	cmp	r2, r0
	xTimeNow = xTaskGetTickCount();
   20f8c:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
   20f8e:	f200 809d 	bhi.w	210cc <prvTimerTask+0x170>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   20f92:	4582      	cmp	sl, r0
	xLastTime = xTimeNow;
   20f94:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   20f96:	f240 80ac 	bls.w	210f2 <prvTimerTask+0x196>
   20f9a:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   20f9c:	6820      	ldr	r0, [r4, #0]
   20f9e:	ebaa 0108 	sub.w	r1, sl, r8
   20fa2:	f7ff f8bb 	bl	2011c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
   20fa6:	f7ff fd4b 	bl	20a40 <xTaskResumeAll>
   20faa:	b938      	cbnz	r0, 20fbc <prvTimerTask+0x60>
					portYIELD_WITHIN_API();
   20fac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   20fb0:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
   20fb4:	f3bf 8f4f 	dsb	sy
   20fb8:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   20fbc:	6820      	ldr	r0, [r4, #0]
   20fbe:	2200      	movs	r2, #0
   20fc0:	a902      	add	r1, sp, #8
   20fc2:	f7fe ff41 	bl	1fe48 <xQueueReceive>
   20fc6:	2800      	cmp	r0, #0
   20fc8:	d0d0      	beq.n	20f6c <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
   20fca:	9b02      	ldr	r3, [sp, #8]
   20fcc:	2b00      	cmp	r3, #0
   20fce:	db64      	blt.n	2109a <prvTimerTask+0x13e>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   20fd0:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   20fd2:	697b      	ldr	r3, [r7, #20]
   20fd4:	b113      	cbz	r3, 20fdc <prvTimerTask+0x80>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   20fd6:	1d38      	adds	r0, r7, #4
   20fd8:	f7fe fcc6 	bl	1f968 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
   20fdc:	f7ff fbf0 	bl	207c0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
   20fe0:	682b      	ldr	r3, [r5, #0]
   20fe2:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
   20fe4:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
   20fe6:	d378      	bcc.n	210da <prvTimerTask+0x17e>
			switch( xMessage.xMessageID )
   20fe8:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
   20fea:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
   20fee:	2b09      	cmp	r3, #9
   20ff0:	d8e4      	bhi.n	20fbc <prvTimerTask+0x60>
   20ff2:	a201      	add	r2, pc, #4	; (adr r2, 20ff8 <prvTimerTask+0x9c>)
   20ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   20ff8:	00021021 	.word	0x00021021
   20ffc:	00021021 	.word	0x00021021
   21000:	00021021 	.word	0x00021021
   21004:	00020fbd 	.word	0x00020fbd
   21008:	00021075 	.word	0x00021075
   2100c:	00021093 	.word	0x00021093
   21010:	00021021 	.word	0x00021021
   21014:	00021021 	.word	0x00021021
   21018:	00020fbd 	.word	0x00020fbd
   2101c:	00021075 	.word	0x00021075
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   21020:	9b03      	ldr	r3, [sp, #12]
   21022:	69ba      	ldr	r2, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   21024:	613f      	str	r7, [r7, #16]
   21026:	1899      	adds	r1, r3, r2
   21028:	bf2c      	ite	cs
   2102a:	2001      	movcs	r0, #1
   2102c:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
   2102e:	4541      	cmp	r1, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   21030:	6079      	str	r1, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
   21032:	d855      	bhi.n	210e0 <prvTimerTask+0x184>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   21034:	eba8 0303 	sub.w	r3, r8, r3
   21038:	429a      	cmp	r2, r3
   2103a:	d823      	bhi.n	21084 <prvTimerTask+0x128>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   2103c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2103e:	4638      	mov	r0, r7
   21040:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   21042:	69fb      	ldr	r3, [r7, #28]
   21044:	2b01      	cmp	r3, #1
   21046:	d1b9      	bne.n	20fbc <prvTimerTask+0x60>
	if( xTimerQueue != NULL )
   21048:	6823      	ldr	r3, [r4, #0]
   2104a:	2b00      	cmp	r3, #0
   2104c:	f000 808c 	beq.w	21168 <prvTimerTask+0x20c>
		xMessage.xMessageID = xCommandID;
   21050:	2300      	movs	r3, #0
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   21052:	69ba      	ldr	r2, [r7, #24]
		xMessage.xMessageID = xCommandID;
   21054:	9306      	str	r3, [sp, #24]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   21056:	9b03      	ldr	r3, [sp, #12]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
   21058:	9708      	str	r7, [sp, #32]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   2105a:	4413      	add	r3, r2
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   2105c:	9307      	str	r3, [sp, #28]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   2105e:	f7ff ff1d 	bl	20e9c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   21062:	2300      	movs	r3, #0
   21064:	6820      	ldr	r0, [r4, #0]
   21066:	461a      	mov	r2, r3
   21068:	a906      	add	r1, sp, #24
   2106a:	f7fe fccd 	bl	1fa08 <xQueueGenericSend>
							configASSERT( xResult );
   2106e:	2800      	cmp	r0, #0
   21070:	d1a4      	bne.n	20fbc <prvTimerTask+0x60>
   21072:	e7fe      	b.n	21072 <prvTimerTask+0x116>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   21074:	9b03      	ldr	r3, [sp, #12]
   21076:	61bb      	str	r3, [r7, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   21078:	b153      	cbz	r3, 21090 <prvTimerTask+0x134>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   2107a:	4443      	add	r3, r8
	if( xNextExpiryTime <= xTimeNow )
   2107c:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   2107e:	607b      	str	r3, [r7, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   21080:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
   21082:	d831      	bhi.n	210e8 <prvTimerTask+0x18c>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   21084:	4b3e      	ldr	r3, [pc, #248]	; (21180 <prvTimerTask+0x224>)
   21086:	1d39      	adds	r1, r7, #4
   21088:	6818      	ldr	r0, [r3, #0]
   2108a:	f7fe fc55 	bl	1f938 <vListInsert>
	return xProcessTimerNow;
   2108e:	e795      	b.n	20fbc <prvTimerTask+0x60>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   21090:	e7fe      	b.n	21090 <prvTimerTask+0x134>
						vPortFree( pxTimer );
   21092:	4638      	mov	r0, r7
   21094:	f7fe fb2a 	bl	1f6ec <vPortFree>
					break;
   21098:	e790      	b.n	20fbc <prvTimerTask+0x60>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
   2109a:	9b03      	ldr	r3, [sp, #12]
   2109c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   210a0:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   210a2:	9b02      	ldr	r3, [sp, #8]
   210a4:	2b00      	cmp	r3, #0
   210a6:	db89      	blt.n	20fbc <prvTimerTask+0x60>
   210a8:	e792      	b.n	20fd0 <prvTimerTask+0x74>
	vTaskSuspendAll();
   210aa:	f7ff fb81 	bl	207b0 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
   210ae:	f7ff fb87 	bl	207c0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
   210b2:	682a      	ldr	r2, [r5, #0]
   210b4:	4282      	cmp	r2, r0
	xTimeNow = xTaskGetTickCount();
   210b6:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
   210b8:	d808      	bhi.n	210cc <prvTimerTask+0x170>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   210ba:	4b31      	ldr	r3, [pc, #196]	; (21180 <prvTimerTask+0x224>)
	xLastTime = xTimeNow;
   210bc:	f8c5 8000 	str.w	r8, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   210c0:	681a      	ldr	r2, [r3, #0]
   210c2:	6812      	ldr	r2, [r2, #0]
   210c4:	fab2 f282 	clz	r2, r2
   210c8:	0952      	lsrs	r2, r2, #5
   210ca:	e767      	b.n	20f9c <prvTimerTask+0x40>
		prvSwitchTimerLists();
   210cc:	f7ff ff02 	bl	20ed4 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
   210d0:	f8c5 8000 	str.w	r8, [r5]
			( void ) xTaskResumeAll();
   210d4:	f7ff fcb4 	bl	20a40 <xTaskResumeAll>
   210d8:	e770      	b.n	20fbc <prvTimerTask+0x60>
		prvSwitchTimerLists();
   210da:	f7ff fefb 	bl	20ed4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
   210de:	e783      	b.n	20fe8 <prvTimerTask+0x8c>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   210e0:	4543      	cmp	r3, r8
   210e2:	d901      	bls.n	210e8 <prvTimerTask+0x18c>
   210e4:	2800      	cmp	r0, #0
   210e6:	d0a9      	beq.n	2103c <prvTimerTask+0xe0>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   210e8:	6830      	ldr	r0, [r6, #0]
   210ea:	1d39      	adds	r1, r7, #4
   210ec:	f7fe fc24 	bl	1f938 <vListInsert>
   210f0:	e764      	b.n	20fbc <prvTimerTask+0x60>
				( void ) xTaskResumeAll();
   210f2:	f7ff fca5 	bl	20a40 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   210f6:	6832      	ldr	r2, [r6, #0]
   210f8:	68d2      	ldr	r2, [r2, #12]
   210fa:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   210fe:	f10b 0104 	add.w	r1, fp, #4
   21102:	4608      	mov	r0, r1
   21104:	9101      	str	r1, [sp, #4]
   21106:	f7fe fc2f 	bl	1f968 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   2110a:	f8db 001c 	ldr.w	r0, [fp, #28]
   2110e:	9901      	ldr	r1, [sp, #4]
   21110:	2801      	cmp	r0, #1
   21112:	d004      	beq.n	2111e <prvTimerTask+0x1c2>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   21114:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   21118:	4658      	mov	r0, fp
   2111a:	4798      	blx	r3
}
   2111c:	e74e      	b.n	20fbc <prvTimerTask+0x60>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   2111e:	f8db 0018 	ldr.w	r0, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   21122:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   21126:	eb0a 0300 	add.w	r3, sl, r0
	if( xNextExpiryTime <= xTimeNow )
   2112a:	4598      	cmp	r8, r3
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   2112c:	f8cb 3004 	str.w	r3, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
   21130:	d203      	bcs.n	2113a <prvTimerTask+0x1de>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   21132:	6830      	ldr	r0, [r6, #0]
   21134:	f7fe fc00 	bl	1f938 <vListInsert>
	return xProcessTimerNow;
   21138:	e7ec      	b.n	21114 <prvTimerTask+0x1b8>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   2113a:	eba8 030a 	sub.w	r3, r8, sl
   2113e:	4298      	cmp	r0, r3
   21140:	d813      	bhi.n	2116a <prvTimerTask+0x20e>
	if( xTimerQueue != NULL )
   21142:	6823      	ldr	r3, [r4, #0]
   21144:	b17b      	cbz	r3, 21166 <prvTimerTask+0x20a>
		xMessage.xMessageID = xCommandID;
   21146:	2300      	movs	r3, #0
   21148:	9306      	str	r3, [sp, #24]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   2114a:	f8cd a01c 	str.w	sl, [sp, #28]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
   2114e:	f8cd b020 	str.w	fp, [sp, #32]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   21152:	f7ff fea3 	bl	20e9c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   21156:	2300      	movs	r3, #0
   21158:	6820      	ldr	r0, [r4, #0]
   2115a:	461a      	mov	r2, r3
   2115c:	a906      	add	r1, sp, #24
   2115e:	f7fe fc53 	bl	1fa08 <xQueueGenericSend>
			configASSERT( xResult );
   21162:	2800      	cmp	r0, #0
   21164:	d1d6      	bne.n	21114 <prvTimerTask+0x1b8>
   21166:	e7fe      	b.n	21166 <prvTimerTask+0x20a>
							configASSERT( xResult );
   21168:	e783      	b.n	21072 <prvTimerTask+0x116>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   2116a:	4b05      	ldr	r3, [pc, #20]	; (21180 <prvTimerTask+0x224>)
   2116c:	6818      	ldr	r0, [r3, #0]
   2116e:	f7fe fbe3 	bl	1f938 <vListInsert>
	return xProcessTimerNow;
   21172:	e7cf      	b.n	21114 <prvTimerTask+0x1b8>
   21174:	1000a0b4 	.word	0x1000a0b4
   21178:	1000a0e4 	.word	0x1000a0e4
   2117c:	1000a0e8 	.word	0x1000a0e8
   21180:	1000a0b8 	.word	0x1000a0b8

00021184 <xTimerCreateTimerTask>:
{
   21184:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
   21186:	4c16      	ldr	r4, [pc, #88]	; (211e0 <xTimerCreateTimerTask+0x5c>)
{
   21188:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
   2118a:	f7f2 ff43 	bl	14014 <vPortEnterCritical>
		if( xTimerQueue == NULL )
   2118e:	6825      	ldr	r5, [r4, #0]
   21190:	b195      	cbz	r5, 211b8 <xTimerCreateTimerTask+0x34>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   21192:	f7f2 ff59 	bl	14048 <vPortExitCritical>
	if( xTimerQueue != NULL )
   21196:	6823      	ldr	r3, [r4, #0]
   21198:	b15b      	cbz	r3, 211b2 <xTimerCreateTimerTask+0x2e>
			xReturn = xTaskCreate(	prvTimerTask,
   2119a:	4a12      	ldr	r2, [pc, #72]	; (211e4 <xTimerCreateTimerTask+0x60>)
   2119c:	4912      	ldr	r1, [pc, #72]	; (211e8 <xTimerCreateTimerTask+0x64>)
   2119e:	4813      	ldr	r0, [pc, #76]	; (211ec <xTimerCreateTimerTask+0x68>)
   211a0:	2303      	movs	r3, #3
   211a2:	e9cd 3200 	strd	r3, r2, [sp]
   211a6:	2300      	movs	r3, #0
   211a8:	f44f 7280 	mov.w	r2, #256	; 0x100
   211ac:	f7ff f87a 	bl	202a4 <xTaskCreate>
	configASSERT( xReturn );
   211b0:	b900      	cbnz	r0, 211b4 <xTimerCreateTimerTask+0x30>
   211b2:	e7fe      	b.n	211b2 <xTimerCreateTimerTask+0x2e>
}
   211b4:	b003      	add	sp, #12
   211b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			vListInitialise( &xActiveTimerList1 );
   211b8:	4f0d      	ldr	r7, [pc, #52]	; (211f0 <xTimerCreateTimerTask+0x6c>)
			vListInitialise( &xActiveTimerList2 );
   211ba:	4e0e      	ldr	r6, [pc, #56]	; (211f4 <xTimerCreateTimerTask+0x70>)
			vListInitialise( &xActiveTimerList1 );
   211bc:	4638      	mov	r0, r7
   211be:	f7fe fb9b 	bl	1f8f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
   211c2:	4630      	mov	r0, r6
   211c4:	f7fe fb98 	bl	1f8f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
   211c8:	4b0b      	ldr	r3, [pc, #44]	; (211f8 <xTimerCreateTimerTask+0x74>)
   211ca:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   211cc:	4b0b      	ldr	r3, [pc, #44]	; (211fc <xTimerCreateTimerTask+0x78>)
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   211ce:	462a      	mov	r2, r5
   211d0:	2110      	movs	r1, #16
   211d2:	2005      	movs	r0, #5
			pxOverflowTimerList = &xActiveTimerList2;
   211d4:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   211d6:	f7fe fbdb 	bl	1f990 <xQueueGenericCreate>
   211da:	6020      	str	r0, [r4, #0]
   211dc:	e7d9      	b.n	21192 <xTimerCreateTimerTask+0xe>
   211de:	bf00      	nop
   211e0:	1000a0e8 	.word	0x1000a0e8
   211e4:	1000a0ec 	.word	0x1000a0ec
   211e8:	00025884 	.word	0x00025884
   211ec:	00020f5d 	.word	0x00020f5d
   211f0:	1000a0bc 	.word	0x1000a0bc
   211f4:	1000a0d0 	.word	0x1000a0d0
   211f8:	1000a0b4 	.word	0x1000a0b4
   211fc:	1000a0b8 	.word	0x1000a0b8

00021200 <xTimerCreate>:
	{
   21200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21204:	4680      	mov	r8, r0
   21206:	b083      	sub	sp, #12
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
   21208:	2028      	movs	r0, #40	; 0x28
	{
   2120a:	460d      	mov	r5, r1
   2120c:	4617      	mov	r7, r2
   2120e:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
   21210:	f7fe fa0e 	bl	1f630 <pvPortMalloc>
		if( pxNewTimer != NULL )
   21214:	4604      	mov	r4, r0
   21216:	b198      	cbz	r0, 21240 <xTimerCreate+0x40>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
   21218:	b1b5      	cbz	r5, 21248 <xTimerCreate+0x48>
		if( xTimerQueue == NULL )
   2121a:	f8df a068 	ldr.w	sl, [pc, #104]	; 21284 <xTimerCreate+0x84>
	taskENTER_CRITICAL();
   2121e:	f7f2 fef9 	bl	14014 <vPortEnterCritical>
		if( xTimerQueue == NULL )
   21222:	f8da 2000 	ldr.w	r2, [sl]
   21226:	b182      	cbz	r2, 2124a <xTimerCreate+0x4a>
	taskEXIT_CRITICAL();
   21228:	f7f2 ff0e 	bl	14048 <vPortExitCritical>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
   2122c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		pxNewTimer->pcTimerName = pcTimerName;
   2122e:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->uxAutoReload = uxAutoReload;
   21232:	e9c4 5706 	strd	r5, r7, [r4, #24]
		pxNewTimer->pvTimerID = pvTimerID;
   21236:	6226      	str	r6, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
   21238:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
   2123a:	1d20      	adds	r0, r4, #4
   2123c:	f7fe fb68 	bl	1f910 <vListInitialiseItem>
	}
   21240:	4620      	mov	r0, r4
   21242:	b003      	add	sp, #12
   21244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
   21248:	e7fe      	b.n	21248 <xTimerCreate+0x48>
			vListInitialise( &xActiveTimerList1 );
   2124a:	f8df b03c 	ldr.w	fp, [pc, #60]	; 21288 <xTimerCreate+0x88>
			vListInitialise( &xActiveTimerList2 );
   2124e:	f8df 903c 	ldr.w	r9, [pc, #60]	; 2128c <xTimerCreate+0x8c>
   21252:	9201      	str	r2, [sp, #4]
			vListInitialise( &xActiveTimerList1 );
   21254:	4658      	mov	r0, fp
   21256:	f7fe fb4f 	bl	1f8f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
   2125a:	4648      	mov	r0, r9
   2125c:	f7fe fb4c 	bl	1f8f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
   21260:	4806      	ldr	r0, [pc, #24]	; (2127c <xTimerCreate+0x7c>)
			pxOverflowTimerList = &xActiveTimerList2;
   21262:	4907      	ldr	r1, [pc, #28]	; (21280 <xTimerCreate+0x80>)
			pxCurrentTimerList = &xActiveTimerList1;
   21264:	f8c0 b000 	str.w	fp, [r0]
			pxOverflowTimerList = &xActiveTimerList2;
   21268:	f8c1 9000 	str.w	r9, [r1]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   2126c:	9a01      	ldr	r2, [sp, #4]
   2126e:	2110      	movs	r1, #16
   21270:	2005      	movs	r0, #5
   21272:	f7fe fb8d 	bl	1f990 <xQueueGenericCreate>
   21276:	f8ca 0000 	str.w	r0, [sl]
   2127a:	e7d5      	b.n	21228 <xTimerCreate+0x28>
   2127c:	1000a0b4 	.word	0x1000a0b4
   21280:	1000a0b8 	.word	0x1000a0b8
   21284:	1000a0e8 	.word	0x1000a0e8
   21288:	1000a0bc 	.word	0x1000a0bc
   2128c:	1000a0d0 	.word	0x1000a0d0

00021290 <xTimerGenericCommand>:
	configASSERT( xTimer );
   21290:	b1a8      	cbz	r0, 212be <xTimerGenericCommand+0x2e>
{
   21292:	b530      	push	{r4, r5, lr}
	if( xTimerQueue != NULL )
   21294:	4d14      	ldr	r5, [pc, #80]	; (212e8 <xTimerGenericCommand+0x58>)
   21296:	682c      	ldr	r4, [r5, #0]
{
   21298:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
   2129a:	b18c      	cbz	r4, 212c0 <xTimerGenericCommand+0x30>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   2129c:	2905      	cmp	r1, #5
		xMessage.xMessageID = xCommandID;
   2129e:	e9cd 1200 	strd	r1, r2, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
   212a2:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   212a4:	dc0f      	bgt.n	212c6 <xTimerGenericCommand+0x36>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   212a6:	f7ff fdf9 	bl	20e9c <xTaskGetSchedulerState>
   212aa:	2802      	cmp	r0, #2
   212ac:	d014      	beq.n	212d8 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   212ae:	2300      	movs	r3, #0
   212b0:	6828      	ldr	r0, [r5, #0]
   212b2:	461a      	mov	r2, r3
   212b4:	4669      	mov	r1, sp
   212b6:	f7fe fba7 	bl	1fa08 <xQueueGenericSend>
}
   212ba:	b005      	add	sp, #20
   212bc:	bd30      	pop	{r4, r5, pc}
	configASSERT( xTimer );
   212be:	e7fe      	b.n	212be <xTimerGenericCommand+0x2e>
BaseType_t xReturn = pdFAIL;
   212c0:	4620      	mov	r0, r4
}
   212c2:	b005      	add	sp, #20
   212c4:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   212c6:	469c      	mov	ip, r3
   212c8:	4662      	mov	r2, ip
   212ca:	2300      	movs	r3, #0
   212cc:	4669      	mov	r1, sp
   212ce:	4620      	mov	r0, r4
   212d0:	f7fe fd2c 	bl	1fd2c <xQueueGenericSendFromISR>
}
   212d4:	b005      	add	sp, #20
   212d6:	bd30      	pop	{r4, r5, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   212d8:	6828      	ldr	r0, [r5, #0]
   212da:	9a08      	ldr	r2, [sp, #32]
   212dc:	2300      	movs	r3, #0
   212de:	4669      	mov	r1, sp
   212e0:	f7fe fb92 	bl	1fa08 <xQueueGenericSend>
   212e4:	e7ed      	b.n	212c2 <xTimerGenericCommand+0x32>
   212e6:	bf00      	nop
   212e8:	1000a0e8 	.word	0x1000a0e8

000212ec <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
   212ec:	b530      	push	{r4, r5, lr}
   212ee:	4614      	mov	r4, r2
   212f0:	b085      	sub	sp, #20
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   212f2:	461a      	mov	r2, r3
   212f4:	4b06      	ldr	r3, [pc, #24]	; (21310 <xTimerPendFunctionCallFromISR+0x24>)
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
   212f6:	9001      	str	r0, [sp, #4]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
   212f8:	9102      	str	r1, [sp, #8]
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   212fa:	6818      	ldr	r0, [r3, #0]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
   212fc:	9403      	str	r4, [sp, #12]
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
   212fe:	f06f 0501 	mvn.w	r5, #1
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   21302:	2300      	movs	r3, #0
   21304:	4669      	mov	r1, sp
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
   21306:	9500      	str	r5, [sp, #0]
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   21308:	f7fe fd10 	bl	1fd2c <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
   2130c:	b005      	add	sp, #20
   2130e:	bd30      	pop	{r4, r5, pc}
   21310:	1000a0e8 	.word	0x1000a0e8

00021314 <SvcCoreAddGroup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcCoreAddGroup(void)
{
   21314:	b508      	push	{r3, lr}
  AttsAddGroup(&svcGapGroup);
   21316:	4804      	ldr	r0, [pc, #16]	; (21328 <SvcCoreAddGroup+0x14>)
   21318:	f7ed f9ca 	bl	e6b0 <AttsAddGroup>
  AttsAddGroup(&svcGattGroup);
}
   2131c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  AttsAddGroup(&svcGattGroup);
   21320:	4802      	ldr	r0, [pc, #8]	; (2132c <SvcCoreAddGroup+0x18>)
   21322:	f7ed b9c5 	b.w	e6b0 <AttsAddGroup>
   21326:	bf00      	nop
   21328:	10002be8 	.word	0x10002be8
   2132c:	10002bfc 	.word	0x10002bfc

00021330 <SvcCoreGattCbackRegister>:
 *  \return None.
 */
/*************************************************************************************************/
void SvcCoreGattCbackRegister(attsReadCback_t readCback, attsWriteCback_t writeCback)
{
  svcGattGroup.readCback = readCback;
   21330:	4b01      	ldr	r3, [pc, #4]	; (21338 <SvcCoreGattCbackRegister+0x8>)
  svcGattGroup.writeCback = writeCback;
   21332:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   21336:	4770      	bx	lr
   21338:	10002bfc 	.word	0x10002bfc

0002133c <SvcCoreGapCentAddrResUpdate>:
 *  \return None.
 */
/*************************************************************************************************/
void SvcCoreGapCentAddrResUpdate(bool_t value)
{
  gapValCar[0] = value;
   2133c:	4b01      	ldr	r3, [pc, #4]	; (21344 <SvcCoreGapCentAddrResUpdate+0x8>)
   2133e:	7018      	strb	r0, [r3, #0]
}
   21340:	4770      	bx	lr
   21342:	bf00      	nop
   21344:	1000a0f4 	.word	0x1000a0f4

00021348 <SvcCoreGapAddRpaoCh>:
 */
/*************************************************************************************************/
void SvcCoreGapAddRpaoCh(void)
{
  /* if RPAO characteristic not already in GAP service */
  if (svcGapGroup.endHandle < GAP_RPAO_HDL)
   21348:	4b03      	ldr	r3, [pc, #12]	; (21358 <SvcCoreGapAddRpaoCh+0x10>)
   2134a:	8a5a      	ldrh	r2, [r3, #18]
   2134c:	2a08      	cmp	r2, #8
  {
    svcGapGroup.endHandle = GAP_RPAO_HDL;
   2134e:	bf9c      	itt	ls
   21350:	2209      	movls	r2, #9
   21352:	825a      	strhls	r2, [r3, #18]
  }
}
   21354:	4770      	bx	lr
   21356:	bf00      	nop
   21358:	10002be8 	.word	0x10002be8

0002135c <SvcPxAddGroup>:
 */
/*************************************************************************************************/
void SvcPxAddGroup(void)
{
  /* add services */
  AttsAddGroup(&svcPxGroup);
   2135c:	4801      	ldr	r0, [pc, #4]	; (21364 <SvcPxAddGroup+0x8>)
   2135e:	f7ed b9a7 	b.w	e6b0 <AttsAddGroup>
   21362:	bf00      	nop
   21364:	10002c10 	.word	0x10002c10

00021368 <SvcPxCbackRegister>:
 *  \return None.
 */
/*************************************************************************************************/
void SvcPxCbackRegister(attsReadCback_t readCback, attsWriteCback_t writeCback)
{
  svcPxGroup.readCback = readCback;
   21368:	4b01      	ldr	r3, [pc, #4]	; (21370 <SvcPxCbackRegister+0x8>)
  svcPxGroup.writeCback = writeCback;
   2136a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   2136e:	4770      	bx	lr
   21370:	10002c10 	.word	0x10002c10

00021374 <NMI_Handler>:
NMI_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
   21374:	e7fe      	b.n	21374 <NMI_Handler>
   21376:	bf00      	nop

00021378 <BusFault_Handler>:
HardFault_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
   21378:	e7fe      	b.n	21378 <BusFault_Handler>
   2137a:	bf00      	nop

0002137c <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
   2137c:	e7fe      	b.n	2137c <DebugMon_Handler>
   2137e:	bf00      	nop

00021380 <Reset_Handler>:
    __asm("    ldr    r0, =0xE000ED08\n"
   21380:	4811      	ldr	r0, [pc, #68]	; (213c8 <zero_loop+0x12>)
   21382:	4912      	ldr	r1, [pc, #72]	; (213cc <zero_loop+0x16>)
   21384:	6001      	str	r1, [r0, #0]
    __asm("    ldr    sp, [r1]");
   21386:	f8d1 d000 	ldr.w	sp, [r1]
    __asm("ldr  r0, =0xE000ED88\n"
   2138a:	4811      	ldr	r0, [pc, #68]	; (213d0 <zero_loop+0x1a>)
   2138c:	6801      	ldr	r1, [r0, #0]
   2138e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   21392:	6001      	str	r1, [r0, #0]
   21394:	f3bf 8f4f 	dsb	sy
   21398:	f3bf 8f6f 	isb	sy
    __asm("    ldr     r0, =_init_data\n"
   2139c:	480d      	ldr	r0, [pc, #52]	; (213d4 <zero_loop+0x1e>)
   2139e:	490e      	ldr	r1, [pc, #56]	; (213d8 <zero_loop+0x22>)
   213a0:	4a0e      	ldr	r2, [pc, #56]	; (213dc <zero_loop+0x26>)

000213a2 <copy_loop>:
   213a2:	f850 3b04 	ldr.w	r3, [r0], #4
   213a6:	f841 3b04 	str.w	r3, [r1], #4
   213aa:	4291      	cmp	r1, r2
   213ac:	dbf9      	blt.n	213a2 <copy_loop>
    __asm("    ldr     r0, =_sbss\n"
   213ae:	480c      	ldr	r0, [pc, #48]	; (213e0 <zero_loop+0x2a>)
   213b0:	490c      	ldr	r1, [pc, #48]	; (213e4 <zero_loop+0x2e>)
   213b2:	f04f 0200 	mov.w	r2, #0

000213b6 <zero_loop>:
   213b6:	4288      	cmp	r0, r1
   213b8:	bfb8      	it	lt
   213ba:	f840 2b04 	strlt.w	r2, [r0], #4
   213be:	dbfa      	blt.n	213b6 <zero_loop>
    main();
   213c0:	f7ee fee0 	bl	10184 <main>
    __asm("    bkpt     ");
   213c4:	be00      	bkpt	0x0000
}
   213c6:	0000      	.short	0x0000
   213c8:	e000ed08 	.word	0xe000ed08
   213cc:	0000c000 	.word	0x0000c000
   213d0:	e000ed88 	.word	0xe000ed88
   213d4:	000279b8 	.word	0x000279b8
   213d8:	10002b00 	.word	0x10002b00
   213dc:	10003e4c 	.word	0x10003e4c
   213e0:	10003e50 	.word	0x10003e50
   213e4:	1000a278 	.word	0x1000a278

000213e8 <memcmp>:
   213e8:	2a03      	cmp	r2, #3
   213ea:	b570      	push	{r4, r5, r6, lr}
   213ec:	d915      	bls.n	2141a <memcmp+0x32>
   213ee:	ea40 0c01 	orr.w	ip, r0, r1
   213f2:	f01c 0f03 	tst.w	ip, #3
   213f6:	4604      	mov	r4, r0
   213f8:	460b      	mov	r3, r1
   213fa:	d121      	bne.n	21440 <memcmp+0x58>
   213fc:	4619      	mov	r1, r3
   213fe:	4620      	mov	r0, r4
   21400:	680e      	ldr	r6, [r1, #0]
   21402:	6805      	ldr	r5, [r0, #0]
   21404:	42b5      	cmp	r5, r6
   21406:	f104 0404 	add.w	r4, r4, #4
   2140a:	f103 0304 	add.w	r3, r3, #4
   2140e:	d117      	bne.n	21440 <memcmp+0x58>
   21410:	3a04      	subs	r2, #4
   21412:	2a03      	cmp	r2, #3
   21414:	4620      	mov	r0, r4
   21416:	4619      	mov	r1, r3
   21418:	d8f0      	bhi.n	213fc <memcmp+0x14>
   2141a:	1e54      	subs	r4, r2, #1
   2141c:	b1a2      	cbz	r2, 21448 <memcmp+0x60>
   2141e:	f100 3cff 	add.w	ip, r0, #4294967295
   21422:	3901      	subs	r1, #1
   21424:	e001      	b.n	2142a <memcmp+0x42>
   21426:	18c3      	adds	r3, r0, r3
   21428:	d00c      	beq.n	21444 <memcmp+0x5c>
   2142a:	f81c ef01 	ldrb.w	lr, [ip, #1]!
   2142e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   21432:	4596      	cmp	lr, r2
   21434:	eba4 030c 	sub.w	r3, r4, ip
   21438:	d0f5      	beq.n	21426 <memcmp+0x3e>
   2143a:	ebae 0002 	sub.w	r0, lr, r2
   2143e:	bd70      	pop	{r4, r5, r6, pc}
   21440:	1e54      	subs	r4, r2, #1
   21442:	e7ec      	b.n	2141e <memcmp+0x36>
   21444:	4618      	mov	r0, r3
   21446:	bd70      	pop	{r4, r5, r6, pc}
   21448:	4610      	mov	r0, r2
   2144a:	bd70      	pop	{r4, r5, r6, pc}

0002144c <memset>:
   2144c:	0783      	lsls	r3, r0, #30
   2144e:	b530      	push	{r4, r5, lr}
   21450:	d048      	beq.n	214e4 <memset+0x98>
   21452:	1e54      	subs	r4, r2, #1
   21454:	2a00      	cmp	r2, #0
   21456:	d03f      	beq.n	214d8 <memset+0x8c>
   21458:	b2ca      	uxtb	r2, r1
   2145a:	4603      	mov	r3, r0
   2145c:	e001      	b.n	21462 <memset+0x16>
   2145e:	3c01      	subs	r4, #1
   21460:	d33a      	bcc.n	214d8 <memset+0x8c>
   21462:	f803 2b01 	strb.w	r2, [r3], #1
   21466:	079d      	lsls	r5, r3, #30
   21468:	d1f9      	bne.n	2145e <memset+0x12>
   2146a:	2c03      	cmp	r4, #3
   2146c:	d92d      	bls.n	214ca <memset+0x7e>
   2146e:	b2cd      	uxtb	r5, r1
   21470:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   21474:	2c0f      	cmp	r4, #15
   21476:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   2147a:	d936      	bls.n	214ea <memset+0x9e>
   2147c:	f1a4 0210 	sub.w	r2, r4, #16
   21480:	f022 0c0f 	bic.w	ip, r2, #15
   21484:	f103 0e20 	add.w	lr, r3, #32
   21488:	44e6      	add	lr, ip
   2148a:	ea4f 1c12 	mov.w	ip, r2, lsr #4
   2148e:	f103 0210 	add.w	r2, r3, #16
   21492:	e942 5504 	strd	r5, r5, [r2, #-16]
   21496:	e942 5502 	strd	r5, r5, [r2, #-8]
   2149a:	3210      	adds	r2, #16
   2149c:	4572      	cmp	r2, lr
   2149e:	d1f8      	bne.n	21492 <memset+0x46>
   214a0:	f10c 0201 	add.w	r2, ip, #1
   214a4:	f014 0f0c 	tst.w	r4, #12
   214a8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   214ac:	f004 0c0f 	and.w	ip, r4, #15
   214b0:	d013      	beq.n	214da <memset+0x8e>
   214b2:	f1ac 0304 	sub.w	r3, ip, #4
   214b6:	f023 0303 	bic.w	r3, r3, #3
   214ba:	3304      	adds	r3, #4
   214bc:	4413      	add	r3, r2
   214be:	f842 5b04 	str.w	r5, [r2], #4
   214c2:	4293      	cmp	r3, r2
   214c4:	d1fb      	bne.n	214be <memset+0x72>
   214c6:	f00c 0403 	and.w	r4, ip, #3
   214ca:	b12c      	cbz	r4, 214d8 <memset+0x8c>
   214cc:	b2ca      	uxtb	r2, r1
   214ce:	441c      	add	r4, r3
   214d0:	f803 2b01 	strb.w	r2, [r3], #1
   214d4:	429c      	cmp	r4, r3
   214d6:	d1fb      	bne.n	214d0 <memset+0x84>
   214d8:	bd30      	pop	{r4, r5, pc}
   214da:	4664      	mov	r4, ip
   214dc:	4613      	mov	r3, r2
   214de:	2c00      	cmp	r4, #0
   214e0:	d1f4      	bne.n	214cc <memset+0x80>
   214e2:	e7f9      	b.n	214d8 <memset+0x8c>
   214e4:	4603      	mov	r3, r0
   214e6:	4614      	mov	r4, r2
   214e8:	e7bf      	b.n	2146a <memset+0x1e>
   214ea:	461a      	mov	r2, r3
   214ec:	46a4      	mov	ip, r4
   214ee:	e7e0      	b.n	214b2 <memset+0x66>

000214f0 <am_hal_ble_blocking_transfer.part.0>:
   214f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   214f4:	4dbc      	ldr	r5, [pc, #752]	; (217e8 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
   214f6:	f8d5 8220 	ldr.w	r8, [r5, #544]	; 0x220
   214fa:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   214fe:	f36f 13c7 	bfc	r3, #7, #1
   21502:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   21506:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   2150a:	f36f 2308 	bfc	r3, #8, #1
   2150e:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   21512:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   21516:	f36f 0300 	bfc	r3, #0, #1
   2151a:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   2151e:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   21522:	f36f 0341 	bfc	r3, #1, #1
   21526:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   2152a:	f8d5 3228 	ldr.w	r3, [r5, #552]	; 0x228
   2152e:	f043 0301 	orr.w	r3, r3, #1
   21532:	f8c5 3228 	str.w	r3, [r5, #552]	; 0x228
   21536:	f8d5 3228 	ldr.w	r3, [r5, #552]	; 0x228
   2153a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   2153e:	f8c5 3228 	str.w	r3, [r5, #552]	; 0x228
   21542:	7a8b      	ldrb	r3, [r1, #10]
   21544:	2b01      	cmp	r3, #1
   21546:	b085      	sub	sp, #20
   21548:	460e      	mov	r6, r1
   2154a:	4604      	mov	r4, r0
   2154c:	d03c      	beq.n	215c8 <am_hal_ble_blocking_transfer.part.0+0xd8>
   2154e:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   21552:	061a      	lsls	r2, r3, #24
   21554:	d532      	bpl.n	215bc <am_hal_ble_blocking_transfer.part.0+0xcc>
   21556:	f001 ff07 	bl	23368 <am_hal_interrupt_master_disable>
   2155a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   2155e:	9003      	str	r0, [sp, #12]
   21560:	9803      	ldr	r0, [sp, #12]
   21562:	2b00      	cmp	r3, #0
   21564:	d151      	bne.n	2160a <am_hal_ble_blocking_transfer.part.0+0x11a>
   21566:	2301      	movs	r3, #1
   21568:	6463      	str	r3, [r4, #68]	; 0x44
   2156a:	f001 ff01 	bl	23370 <am_hal_interrupt_master_set>
   2156e:	7b33      	ldrb	r3, [r6, #12]
   21570:	b113      	cbz	r3, 21578 <am_hal_ble_blocking_transfer.part.0+0x88>
   21572:	2301      	movs	r3, #1
   21574:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
   21578:	6833      	ldr	r3, [r6, #0]
   2157a:	6872      	ldr	r2, [r6, #4]
   2157c:	68b1      	ldr	r1, [r6, #8]
   2157e:	68f0      	ldr	r0, [r6, #12]
   21580:	61a0      	str	r0, [r4, #24]
   21582:	60e3      	str	r3, [r4, #12]
   21584:	6122      	str	r2, [r4, #16]
   21586:	6161      	str	r1, [r4, #20]
   21588:	6933      	ldr	r3, [r6, #16]
   2158a:	6972      	ldr	r2, [r6, #20]
   2158c:	6222      	str	r2, [r4, #32]
   2158e:	61e3      	str	r3, [r4, #28]
   21590:	f001 feea 	bl	23368 <am_hal_interrupt_master_disable>
   21594:	6823      	ldr	r3, [r4, #0]
   21596:	4a95      	ldr	r2, [pc, #596]	; (217ec <am_hal_ble_blocking_transfer.part.0+0x2fc>)
   21598:	9001      	str	r0, [sp, #4]
   2159a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2159e:	4293      	cmp	r3, r2
   215a0:	f104 070c 	add.w	r7, r4, #12
   215a4:	f040 8156 	bne.w	21854 <am_hal_ble_blocking_transfer.part.0+0x364>
   215a8:	79f2      	ldrb	r2, [r6, #7]
   215aa:	2a03      	cmp	r2, #3
   215ac:	f200 8152 	bhi.w	21854 <am_hal_ble_blocking_transfer.part.0+0x364>
   215b0:	e8df f012 	tbh	[pc, r2, lsl #1]
   215b4:	01040071 	.word	0x01040071
   215b8:	010900ff 	.word	0x010900ff
   215bc:	488c      	ldr	r0, [pc, #560]	; (217f0 <am_hal_ble_blocking_transfer.part.0+0x300>)
   215be:	f8c5 8220 	str.w	r8, [r5, #544]	; 0x220
   215c2:	b005      	add	sp, #20
   215c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   215c8:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
   215cc:	b333      	cbz	r3, 2161c <am_hal_ble_blocking_transfer.part.0+0x12c>
   215ce:	f890 5040 	ldrb.w	r5, [r0, #64]	; 0x40
   215d2:	2d00      	cmp	r5, #0
   215d4:	f000 81c4 	beq.w	21960 <am_hal_ble_blocking_transfer.part.0+0x470>
   215d8:	2300      	movs	r3, #0
   215da:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
   215de:	4f82      	ldr	r7, [pc, #520]	; (217e8 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
   215e0:	f240 152d 	movw	r5, #301	; 0x12d
   215e4:	f04f 0900 	mov.w	r9, #0
   215e8:	e008      	b.n	215fc <am_hal_ble_blocking_transfer.part.0+0x10c>
   215ea:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   215ee:	071b      	lsls	r3, r3, #28
   215f0:	d518      	bpl.n	21624 <am_hal_ble_blocking_transfer.part.0+0x134>
   215f2:	20a0      	movs	r0, #160	; 0xa0
   215f4:	f001 fcaa 	bl	22f4c <am_hal_flash_delay>
   215f8:	3d01      	subs	r5, #1
   215fa:	d013      	beq.n	21624 <am_hal_ble_blocking_transfer.part.0+0x134>
   215fc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   21600:	2b00      	cmp	r3, #0
   21602:	d0f2      	beq.n	215ea <am_hal_ble_blocking_transfer.part.0+0xfa>
   21604:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
   21608:	e7f3      	b.n	215f2 <am_hal_ble_blocking_transfer.part.0+0x102>
   2160a:	f001 feb1 	bl	23370 <am_hal_interrupt_master_set>
   2160e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   21612:	f8c5 8220 	str.w	r8, [r5, #544]	; 0x220
   21616:	b005      	add	sp, #20
   21618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2161c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   21620:	2b00      	cmp	r3, #0
   21622:	d1dc      	bne.n	215de <am_hal_ble_blocking_transfer.part.0+0xee>
   21624:	4d70      	ldr	r5, [pc, #448]	; (217e8 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
   21626:	f8d5 3410 	ldr.w	r3, [r5, #1040]	; 0x410
   2162a:	f043 0302 	orr.w	r3, r3, #2
   2162e:	f8c5 3410 	str.w	r3, [r5, #1040]	; 0x410
   21632:	2050      	movs	r0, #80	; 0x50
   21634:	f001 fc8a 	bl	22f4c <am_hal_flash_delay>
   21638:	6823      	ldr	r3, [r4, #0]
   2163a:	4a6c      	ldr	r2, [pc, #432]	; (217ec <am_hal_ble_blocking_transfer.part.0+0x2fc>)
   2163c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21640:	4293      	cmp	r3, r2
   21642:	d105      	bne.n	21650 <am_hal_ble_blocking_transfer.part.0+0x160>
   21644:	f8b5 3304 	ldrh.w	r3, [r5, #772]	; 0x304
   21648:	f043 030c 	orr.w	r3, r3, #12
   2164c:	f8a5 3304 	strh.w	r3, [r5, #772]	; 0x304
   21650:	2500      	movs	r5, #0
   21652:	4f65      	ldr	r7, [pc, #404]	; (217e8 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
   21654:	46a9      	mov	r9, r5
   21656:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   2165a:	2b00      	cmp	r3, #0
   2165c:	f040 80ba 	bne.w	217d4 <am_hal_ble_blocking_transfer.part.0+0x2e4>
   21660:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   21664:	0718      	lsls	r0, r3, #28
   21666:	f140 80c7 	bpl.w	217f8 <am_hal_ble_blocking_transfer.part.0+0x308>
   2166a:	f001 fe7d 	bl	23368 <am_hal_interrupt_master_disable>
   2166e:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
   21672:	9002      	str	r0, [sp, #8]
   21674:	9802      	ldr	r0, [sp, #8]
   21676:	f1ba 0f00 	cmp.w	sl, #0
   2167a:	f040 80ae 	bne.w	217da <am_hal_ble_blocking_transfer.part.0+0x2ea>
   2167e:	2301      	movs	r3, #1
   21680:	6463      	str	r3, [r4, #68]	; 0x44
   21682:	f001 fe75 	bl	23370 <am_hal_interrupt_master_set>
   21686:	4b58      	ldr	r3, [pc, #352]	; (217e8 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
   21688:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   2168c:	f36a 0241 	bfi	r2, sl, #1, #1
   21690:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   21694:	e76b      	b.n	2156e <am_hal_ble_blocking_transfer.part.0+0x7e>
   21696:	2500      	movs	r5, #0
   21698:	46a9      	mov	r9, r5
   2169a:	f896 e00a 	ldrb.w	lr, [r6, #10]
   2169e:	f896 c00c 	ldrb.w	ip, [r6, #12]
   216a2:	8930      	ldrh	r0, [r6, #8]
   216a4:	4b53      	ldr	r3, [pc, #332]	; (217f4 <am_hal_ble_blocking_transfer.part.0+0x304>)
   216a6:	0151      	lsls	r1, r2, #5
   216a8:	ea03 2a00 	and.w	sl, r3, r0, lsl #8
   216ac:	f001 0b60 	and.w	fp, r1, #96	; 0x60
   216b0:	ea4e 13cc 	orr.w	r3, lr, ip, lsl #7
   216b4:	ea43 030b 	orr.w	r3, r3, fp
   216b8:	ea43 030a 	orr.w	r3, r3, sl
   216bc:	ea43 0309 	orr.w	r3, r3, r9
   216c0:	f8df 9124 	ldr.w	r9, [pc, #292]	; 217e8 <am_hal_ble_blocking_transfer.part.0+0x2f8>
   216c4:	f1be 0f01 	cmp.w	lr, #1
   216c8:	f8c9 5214 	str.w	r5, [r9, #532]	; 0x214
   216cc:	f8c9 320c 	str.w	r3, [r9, #524]	; 0x20c
   216d0:	f000 8131 	beq.w	21936 <am_hal_ble_blocking_transfer.part.0+0x446>
   216d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   216d6:	f8b4 c014 	ldrh.w	ip, [r4, #20]
   216da:	f8df e110 	ldr.w	lr, [pc, #272]	; 217ec <am_hal_ble_blocking_transfer.part.0+0x2fc>
   216de:	4a42      	ldr	r2, [pc, #264]	; (217e8 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
   216e0:	2500      	movs	r5, #0
   216e2:	459c      	cmp	ip, r3
   216e4:	d924      	bls.n	21730 <am_hal_ble_blocking_transfer.part.0+0x240>
   216e6:	6821      	ldr	r1, [r4, #0]
   216e8:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
   216ec:	4571      	cmp	r1, lr
   216ee:	d1fd      	bne.n	216ec <am_hal_ble_blocking_transfer.part.0+0x1fc>
   216f0:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
   216f4:	f3c1 4107 	ubfx	r1, r1, #16, #8
   216f8:	2903      	cmp	r1, #3
   216fa:	d9f2      	bls.n	216e2 <am_hal_ble_blocking_transfer.part.0+0x1f2>
   216fc:	4561      	cmp	r1, ip
   216fe:	f080 80a3 	bcs.w	21848 <am_hal_ble_blocking_transfer.part.0+0x358>
   21702:	68e0      	ldr	r0, [r4, #12]
   21704:	f021 0103 	bic.w	r1, r1, #3
   21708:	f023 0303 	bic.w	r3, r3, #3
   2170c:	eb00 0903 	add.w	r9, r0, r3
   21710:	464b      	mov	r3, r9
   21712:	f8d2 0108 	ldr.w	r0, [r2, #264]	; 0x108
   21716:	f843 0b04 	str.w	r0, [r3], #4
   2171a:	eba3 0009 	sub.w	r0, r3, r9
   2171e:	4288      	cmp	r0, r1
   21720:	f8c2 5108 	str.w	r5, [r2, #264]	; 0x108
   21724:	d3f5      	bcc.n	21712 <am_hal_ble_blocking_transfer.part.0+0x222>
   21726:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   21728:	440b      	add	r3, r1
   2172a:	459c      	cmp	ip, r3
   2172c:	63e3      	str	r3, [r4, #60]	; 0x3c
   2172e:	d8da      	bhi.n	216e6 <am_hal_ble_blocking_transfer.part.0+0x1f6>
   21730:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 217e8 <am_hal_ble_blocking_transfer.part.0+0x2f8>
   21734:	9801      	ldr	r0, [sp, #4]
   21736:	f001 fe1b 	bl	23370 <am_hal_interrupt_master_set>
   2173a:	f8d9 3224 	ldr.w	r3, [r9, #548]	; 0x224
   2173e:	07da      	lsls	r2, r3, #31
   21740:	bf58      	it	pl
   21742:	f242 7510 	movwpl	r5, #10000	; 0x2710
   21746:	d503      	bpl.n	21750 <am_hal_ble_blocking_transfer.part.0+0x260>
   21748:	e009      	b.n	2175e <am_hal_ble_blocking_transfer.part.0+0x26e>
   2174a:	3d01      	subs	r5, #1
   2174c:	f000 80fc 	beq.w	21948 <am_hal_ble_blocking_transfer.part.0+0x458>
   21750:	2010      	movs	r0, #16
   21752:	f001 fbfb 	bl	22f4c <am_hal_flash_delay>
   21756:	f8d9 3224 	ldr.w	r3, [r9, #548]	; 0x224
   2175a:	07db      	lsls	r3, r3, #31
   2175c:	d5f5      	bpl.n	2174a <am_hal_ble_blocking_transfer.part.0+0x25a>
   2175e:	4a22      	ldr	r2, [pc, #136]	; (217e8 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
   21760:	f8d2 1228 	ldr.w	r1, [r2, #552]	; 0x228
   21764:	f041 0101 	orr.w	r1, r1, #1
   21768:	f8c2 1228 	str.w	r1, [r2, #552]	; 0x228
   2176c:	f8d2 1228 	ldr.w	r1, [r2, #552]	; 0x228
   21770:	2300      	movs	r3, #0
   21772:	f041 0102 	orr.w	r1, r1, #2
   21776:	f8c2 1228 	str.w	r1, [r2, #552]	; 0x228
   2177a:	60e3      	str	r3, [r4, #12]
   2177c:	607b      	str	r3, [r7, #4]
   2177e:	60bb      	str	r3, [r7, #8]
   21780:	60fb      	str	r3, [r7, #12]
   21782:	613b      	str	r3, [r7, #16]
   21784:	617b      	str	r3, [r7, #20]
   21786:	63e3      	str	r3, [r4, #60]	; 0x3c
   21788:	7ab1      	ldrb	r1, [r6, #10]
   2178a:	2901      	cmp	r1, #1
   2178c:	f000 80c2 	beq.w	21914 <am_hal_ble_blocking_transfer.part.0+0x424>
   21790:	2902      	cmp	r1, #2
   21792:	d104      	bne.n	2179e <am_hal_ble_blocking_transfer.part.0+0x2ae>
   21794:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   21798:	b10a      	cbz	r2, 2179e <am_hal_ble_blocking_transfer.part.0+0x2ae>
   2179a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   2179e:	2300      	movs	r3, #0
   217a0:	4a11      	ldr	r2, [pc, #68]	; (217e8 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
   217a2:	4618      	mov	r0, r3
   217a4:	f8c2 8220 	str.w	r8, [r2, #544]	; 0x220
   217a8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
   217ac:	b005      	add	sp, #20
   217ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   217b2:	7973      	ldrb	r3, [r6, #5]
   217b4:	7935      	ldrb	r5, [r6, #4]
   217b6:	ea4f 6903 	mov.w	r9, r3, lsl #24
   217ba:	e76e      	b.n	2169a <am_hal_ble_blocking_transfer.part.0+0x1aa>
   217bc:	7933      	ldrb	r3, [r6, #4]
   217be:	2500      	movs	r5, #0
   217c0:	ea4f 6903 	mov.w	r9, r3, lsl #24
   217c4:	e769      	b.n	2169a <am_hal_ble_blocking_transfer.part.0+0x1aa>
   217c6:	88b5      	ldrh	r5, [r6, #4]
   217c8:	79b3      	ldrb	r3, [r6, #6]
   217ca:	ba6d      	rev16	r5, r5
   217cc:	b2ad      	uxth	r5, r5
   217ce:	ea4f 6903 	mov.w	r9, r3, lsl #24
   217d2:	e762      	b.n	2169a <am_hal_ble_blocking_transfer.part.0+0x1aa>
   217d4:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
   217d8:	e747      	b.n	2166a <am_hal_ble_blocking_transfer.part.0+0x17a>
   217da:	f001 fdc9 	bl	23370 <am_hal_interrupt_master_set>
   217de:	20a0      	movs	r0, #160	; 0xa0
   217e0:	3501      	adds	r5, #1
   217e2:	f001 fbb3 	bl	22f4c <am_hal_flash_delay>
   217e6:	e736      	b.n	21656 <am_hal_ble_blocking_transfer.part.0+0x166>
   217e8:	5000c000 	.word	0x5000c000
   217ec:	01775230 	.word	0x01775230
   217f0:	08000001 	.word	0x08000001
   217f4:	000fff00 	.word	0x000fff00
   217f8:	f5b5 7f96 	cmp.w	r5, #300	; 0x12c
   217fc:	d203      	bcs.n	21806 <am_hal_ble_blocking_transfer.part.0+0x316>
   217fe:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   21802:	0619      	lsls	r1, r3, #24
   21804:	d5eb      	bpl.n	217de <am_hal_ble_blocking_transfer.part.0+0x2ee>
   21806:	6823      	ldr	r3, [r4, #0]
   21808:	4a6a      	ldr	r2, [pc, #424]	; (219b4 <am_hal_ble_blocking_transfer.part.0+0x4c4>)
   2180a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2180e:	4293      	cmp	r3, r2
   21810:	4b69      	ldr	r3, [pc, #420]	; (219b8 <am_hal_ble_blocking_transfer.part.0+0x4c8>)
   21812:	f040 809b 	bne.w	2194c <am_hal_ble_blocking_transfer.part.0+0x45c>
   21816:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   2181a:	4868      	ldr	r0, [pc, #416]	; (219bc <am_hal_ble_blocking_transfer.part.0+0x4cc>)
   2181c:	2102      	movs	r1, #2
   2181e:	f361 0283 	bfi	r2, r1, #2, #2
   21822:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   21826:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   2182a:	f36f 0241 	bfc	r2, #1, #1
   2182e:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   21832:	f8c3 8220 	str.w	r8, [r3, #544]	; 0x220
   21836:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   2183a:	f361 0283 	bfi	r2, r1, #2, #2
   2183e:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   21842:	b005      	add	sp, #20
   21844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21848:	ebac 0103 	sub.w	r1, ip, r3
   2184c:	68e0      	ldr	r0, [r4, #12]
   2184e:	f023 0303 	bic.w	r3, r3, #3
   21852:	e75b      	b.n	2170c <am_hal_ble_blocking_transfer.part.0+0x21c>
   21854:	7ab3      	ldrb	r3, [r6, #10]
   21856:	2b01      	cmp	r3, #1
   21858:	f47f af3c 	bne.w	216d4 <am_hal_ble_blocking_transfer.part.0+0x1e4>
   2185c:	f8b4 9014 	ldrh.w	r9, [r4, #20]
   21860:	68e5      	ldr	r5, [r4, #12]
   21862:	f8df b154 	ldr.w	fp, [pc, #340]	; 219b8 <am_hal_ble_blocking_transfer.part.0+0x4c8>
   21866:	f1b9 0f00 	cmp.w	r9, #0
   2186a:	d019      	beq.n	218a0 <am_hal_ble_blocking_transfer.part.0+0x3b0>
   2186c:	f8db 3100 	ldr.w	r3, [fp, #256]	; 0x100
   21870:	f3c3 2307 	ubfx	r3, r3, #8, #8
   21874:	2b03      	cmp	r3, #3
   21876:	d835      	bhi.n	218e4 <am_hal_ble_blocking_transfer.part.0+0x3f4>
   21878:	f8df a14c 	ldr.w	sl, [pc, #332]	; 219c8 <am_hal_ble_blocking_transfer.part.0+0x4d8>
   2187c:	e00a      	b.n	21894 <am_hal_ble_blocking_transfer.part.0+0x3a4>
   2187e:	f1ba 0a01 	subs.w	sl, sl, #1
   21882:	d00d      	beq.n	218a0 <am_hal_ble_blocking_transfer.part.0+0x3b0>
   21884:	f001 fb62 	bl	22f4c <am_hal_flash_delay>
   21888:	f8db 3100 	ldr.w	r3, [fp, #256]	; 0x100
   2188c:	f3c3 2307 	ubfx	r3, r3, #8, #8
   21890:	2b03      	cmp	r3, #3
   21892:	d827      	bhi.n	218e4 <am_hal_ble_blocking_transfer.part.0+0x3f4>
   21894:	f8db 3224 	ldr.w	r3, [fp, #548]	; 0x224
   21898:	07db      	lsls	r3, r3, #31
   2189a:	f04f 0010 	mov.w	r0, #16
   2189e:	d5ee      	bpl.n	2187e <am_hal_ble_blocking_transfer.part.0+0x38e>
   218a0:	f8df 9114 	ldr.w	r9, [pc, #276]	; 219b8 <am_hal_ble_blocking_transfer.part.0+0x4c8>
   218a4:	f8d9 3224 	ldr.w	r3, [r9, #548]	; 0x224
   218a8:	07d8      	lsls	r0, r3, #31
   218aa:	bf58      	it	pl
   218ac:	f44f 65fa 	movpl.w	r5, #2000	; 0x7d0
   218b0:	d408      	bmi.n	218c4 <am_hal_ble_blocking_transfer.part.0+0x3d4>
   218b2:	2010      	movs	r0, #16
   218b4:	f001 fb4a 	bl	22f4c <am_hal_flash_delay>
   218b8:	f8d9 3224 	ldr.w	r3, [r9, #548]	; 0x224
   218bc:	07d9      	lsls	r1, r3, #31
   218be:	d401      	bmi.n	218c4 <am_hal_ble_blocking_transfer.part.0+0x3d4>
   218c0:	3d01      	subs	r5, #1
   218c2:	d1f6      	bne.n	218b2 <am_hal_ble_blocking_transfer.part.0+0x3c2>
   218c4:	6823      	ldr	r3, [r4, #0]
   218c6:	4a3b      	ldr	r2, [pc, #236]	; (219b4 <am_hal_ble_blocking_transfer.part.0+0x4c4>)
   218c8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   218cc:	4293      	cmp	r3, r2
   218ce:	f47f af2f 	bne.w	21730 <am_hal_ble_blocking_transfer.part.0+0x240>
   218d2:	4b39      	ldr	r3, [pc, #228]	; (219b8 <am_hal_ble_blocking_transfer.part.0+0x4c8>)
   218d4:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   218d8:	2102      	movs	r1, #2
   218da:	f361 0283 	bfi	r2, r1, #2, #2
   218de:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   218e2:	e725      	b.n	21730 <am_hal_ble_blocking_transfer.part.0+0x240>
   218e4:	f009 0003 	and.w	r0, r9, #3
   218e8:	462a      	mov	r2, r5
   218ea:	f852 1b04 	ldr.w	r1, [r2], #4
   218ee:	f8cb 110c 	str.w	r1, [fp, #268]	; 0x10c
   218f2:	4581      	cmp	r9, r0
   218f4:	eba5 0102 	sub.w	r1, r5, r2
   218f8:	4419      	add	r1, r3
   218fa:	f1a9 0904 	sub.w	r9, r9, #4
   218fe:	d005      	beq.n	2190c <am_hal_ble_blocking_transfer.part.0+0x41c>
   21900:	2903      	cmp	r1, #3
   21902:	d905      	bls.n	21910 <am_hal_ble_blocking_transfer.part.0+0x420>
   21904:	f1b9 0f00 	cmp.w	r9, #0
   21908:	d1ef      	bne.n	218ea <am_hal_ble_blocking_transfer.part.0+0x3fa>
   2190a:	e7c9      	b.n	218a0 <am_hal_ble_blocking_transfer.part.0+0x3b0>
   2190c:	f04f 0900 	mov.w	r9, #0
   21910:	4615      	mov	r5, r2
   21912:	e7a8      	b.n	21866 <am_hal_ble_blocking_transfer.part.0+0x376>
   21914:	6823      	ldr	r3, [r4, #0]
   21916:	4927      	ldr	r1, [pc, #156]	; (219b4 <am_hal_ble_blocking_transfer.part.0+0x4c4>)
   21918:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2191c:	428b      	cmp	r3, r1
   2191e:	d106      	bne.n	2192e <am_hal_ble_blocking_transfer.part.0+0x43e>
   21920:	f8b2 3304 	ldrh.w	r3, [r2, #772]	; 0x304
   21924:	2102      	movs	r1, #2
   21926:	f361 0383 	bfi	r3, r1, #2, #2
   2192a:	f8a2 3304 	strh.w	r3, [r2, #772]	; 0x304
   2192e:	2301      	movs	r3, #1
   21930:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   21934:	e733      	b.n	2179e <am_hal_ble_blocking_transfer.part.0+0x2ae>
   21936:	f8b4 9014 	ldrh.w	r9, [r4, #20]
   2193a:	68e5      	ldr	r5, [r4, #12]
   2193c:	2a03      	cmp	r2, #3
   2193e:	d890      	bhi.n	21862 <am_hal_ble_blocking_transfer.part.0+0x372>
   21940:	e8df f002 	tbb	[pc, r2]
   21944:	2a303417 	.word	0x2a303417
   21948:	481d      	ldr	r0, [pc, #116]	; (219c0 <am_hal_ble_blocking_transfer.part.0+0x4d0>)
   2194a:	e63a      	b.n	215c2 <am_hal_ble_blocking_transfer.part.0+0xd2>
   2194c:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   21950:	481a      	ldr	r0, [pc, #104]	; (219bc <am_hal_ble_blocking_transfer.part.0+0x4cc>)
   21952:	f36f 0241 	bfc	r2, #1, #1
   21956:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   2195a:	f8c3 8220 	str.w	r8, [r3, #544]	; 0x220
   2195e:	e630      	b.n	215c2 <am_hal_ble_blocking_transfer.part.0+0xd2>
   21960:	f64b 3080 	movw	r0, #48000	; 0xbb80
   21964:	f001 faf2 	bl	22f4c <am_hal_flash_delay>
   21968:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   2196c:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
   21970:	e656      	b.n	21620 <am_hal_ble_blocking_transfer.part.0+0x130>
   21972:	2200      	movs	r2, #0
   21974:	4613      	mov	r3, r2
   21976:	f001 0160 	and.w	r1, r1, #96	; 0x60
   2197a:	ea43 13cc 	orr.w	r3, r3, ip, lsl #7
   2197e:	430b      	orrs	r3, r1
   21980:	4910      	ldr	r1, [pc, #64]	; (219c4 <am_hal_ble_blocking_transfer.part.0+0x4d4>)
   21982:	ea01 2000 	and.w	r0, r1, r0, lsl #8
   21986:	4303      	orrs	r3, r0
   21988:	490b      	ldr	r1, [pc, #44]	; (219b8 <am_hal_ble_blocking_transfer.part.0+0x4c8>)
   2198a:	f043 0301 	orr.w	r3, r3, #1
   2198e:	f8c1 2214 	str.w	r2, [r1, #532]	; 0x214
   21992:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
   21996:	e764      	b.n	21862 <am_hal_ble_blocking_transfer.part.0+0x372>
   21998:	88b2      	ldrh	r2, [r6, #4]
   2199a:	79b3      	ldrb	r3, [r6, #6]
   2199c:	ba52      	rev16	r2, r2
   2199e:	b292      	uxth	r2, r2
   219a0:	061b      	lsls	r3, r3, #24
   219a2:	e7e8      	b.n	21976 <am_hal_ble_blocking_transfer.part.0+0x486>
   219a4:	7973      	ldrb	r3, [r6, #5]
   219a6:	7932      	ldrb	r2, [r6, #4]
   219a8:	061b      	lsls	r3, r3, #24
   219aa:	e7e4      	b.n	21976 <am_hal_ble_blocking_transfer.part.0+0x486>
   219ac:	7933      	ldrb	r3, [r6, #4]
   219ae:	2200      	movs	r2, #0
   219b0:	061b      	lsls	r3, r3, #24
   219b2:	e7e0      	b.n	21976 <am_hal_ble_blocking_transfer.part.0+0x486>
   219b4:	01775230 	.word	0x01775230
   219b8:	5000c000 	.word	0x5000c000
   219bc:	08000002 	.word	0x08000002
   219c0:	08000009 	.word	0x08000009
   219c4:	000fff00 	.word	0x000fff00
   219c8:	0007a121 	.word	0x0007a121

000219cc <am_hal_ble_initialize>:
   219cc:	bb58      	cbnz	r0, 21a26 <am_hal_ble_initialize+0x5a>
   219ce:	b361      	cbz	r1, 21a2a <am_hal_ble_initialize+0x5e>
   219d0:	4b17      	ldr	r3, [pc, #92]	; (21a30 <am_hal_ble_initialize+0x64>)
   219d2:	78d8      	ldrb	r0, [r3, #3]
   219d4:	b410      	push	{r4}
   219d6:	f3c0 0400 	ubfx	r4, r0, #0, #1
   219da:	f010 0001 	ands.w	r0, r0, #1
   219de:	d11e      	bne.n	21a1e <am_hal_ble_initialize+0x52>
   219e0:	681a      	ldr	r2, [r3, #0]
   219e2:	f883 4047 	strb.w	r4, [r3, #71]	; 0x47
   219e6:	e9c3 0004 	strd	r0, r0, [r3, #16]
   219ea:	e9c3 0006 	strd	r0, r0, [r3, #24]
   219ee:	e9c3 000a 	strd	r0, r0, [r3, #40]	; 0x28
   219f2:	e9c3 000c 	strd	r0, r0, [r3, #48]	; 0x30
   219f6:	721c      	strb	r4, [r3, #8]
   219f8:	4c0e      	ldr	r4, [pc, #56]	; (21a34 <am_hal_ble_initialize+0x68>)
   219fa:	60d8      	str	r0, [r3, #12]
   219fc:	f002 427e 	and.w	r2, r2, #4261412864	; 0xfe000000
   21a00:	6258      	str	r0, [r3, #36]	; 0x24
   21a02:	6218      	str	r0, [r3, #32]
   21a04:	4314      	orrs	r4, r2
   21a06:	6398      	str	r0, [r3, #56]	; 0x38
   21a08:	601c      	str	r4, [r3, #0]
   21a0a:	63d8      	str	r0, [r3, #60]	; 0x3c
   21a0c:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
   21a10:	f8c3 0043 	str.w	r0, [r3, #67]	; 0x43
   21a14:	6058      	str	r0, [r3, #4]
   21a16:	f85d 4b04 	ldr.w	r4, [sp], #4
   21a1a:	600b      	str	r3, [r1, #0]
   21a1c:	4770      	bx	lr
   21a1e:	2007      	movs	r0, #7
   21a20:	f85d 4b04 	ldr.w	r4, [sp], #4
   21a24:	4770      	bx	lr
   21a26:	2005      	movs	r0, #5
   21a28:	4770      	bx	lr
   21a2a:	2006      	movs	r0, #6
   21a2c:	4770      	bx	lr
   21a2e:	bf00      	nop
   21a30:	1000a1a4 	.word	0x1000a1a4
   21a34:	01775230 	.word	0x01775230

00021a38 <am_hal_ble_deinitialize>:
   21a38:	b128      	cbz	r0, 21a46 <am_hal_ble_deinitialize+0xe>
   21a3a:	6803      	ldr	r3, [r0, #0]
   21a3c:	4a0d      	ldr	r2, [pc, #52]	; (21a74 <am_hal_ble_deinitialize+0x3c>)
   21a3e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21a42:	4293      	cmp	r3, r2
   21a44:	d001      	beq.n	21a4a <am_hal_ble_deinitialize+0x12>
   21a46:	2002      	movs	r0, #2
   21a48:	4770      	bx	lr
   21a4a:	6802      	ldr	r2, [r0, #0]
   21a4c:	2300      	movs	r3, #0
   21a4e:	f002 427e 	and.w	r2, r2, #4261412864	; 0xfe000000
   21a52:	e9c0 2300 	strd	r2, r3, [r0]
   21a56:	60c3      	str	r3, [r0, #12]
   21a58:	6103      	str	r3, [r0, #16]
   21a5a:	6143      	str	r3, [r0, #20]
   21a5c:	6183      	str	r3, [r0, #24]
   21a5e:	61c3      	str	r3, [r0, #28]
   21a60:	6203      	str	r3, [r0, #32]
   21a62:	63c3      	str	r3, [r0, #60]	; 0x3c
   21a64:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
   21a68:	f8c0 3043 	str.w	r3, [r0, #67]	; 0x43
   21a6c:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
   21a70:	4618      	mov	r0, r3
   21a72:	4770      	bx	lr
   21a74:	01775230 	.word	0x01775230

00021a78 <am_hal_ble_config>:
   21a78:	2800      	cmp	r0, #0
   21a7a:	d04e      	beq.n	21b1a <am_hal_ble_config+0xa2>
   21a7c:	6803      	ldr	r3, [r0, #0]
   21a7e:	4a3e      	ldr	r2, [pc, #248]	; (21b78 <am_hal_ble_config+0x100>)
   21a80:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21a84:	4293      	cmp	r3, r2
   21a86:	d148      	bne.n	21b1a <am_hal_ble_config+0xa2>
   21a88:	b470      	push	{r4, r5, r6}
   21a8a:	4b3c      	ldr	r3, [pc, #240]	; (21b7c <am_hal_ble_config+0x104>)
   21a8c:	6844      	ldr	r4, [r0, #4]
   21a8e:	2203      	movs	r2, #3
   21a90:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   21a94:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   21a98:	f36f 4251 	bfc	r2, #17, #1
   21a9c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   21aa0:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   21aa4:	f36f 4210 	bfc	r2, #16, #1
   21aa8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   21aac:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   21ab0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   21ab4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   21ab8:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
   21abc:	6888      	ldr	r0, [r1, #8]
   21abe:	f360 220d 	bfi	r2, r0, #8, #6
   21ac2:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
   21ac6:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
   21aca:	6848      	ldr	r0, [r1, #4]
   21acc:	f360 0205 	bfi	r2, r0, #0, #6
   21ad0:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
   21ad4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   21ad8:	f042 0201 	orr.w	r2, r2, #1
   21adc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   21ae0:	680b      	ldr	r3, [r1, #0]
   21ae2:	68c8      	ldr	r0, [r1, #12]
   21ae4:	4a25      	ldr	r2, [pc, #148]	; (21b7c <am_hal_ble_config+0x104>)
   21ae6:	021b      	lsls	r3, r3, #8
   21ae8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   21aec:	2802      	cmp	r0, #2
   21aee:	bf08      	it	eq
   21af0:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
   21af4:	f043 0301 	orr.w	r3, r3, #1
   21af8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
   21afc:	4b20      	ldr	r3, [pc, #128]	; (21b80 <am_hal_ble_config+0x108>)
   21afe:	68db      	ldr	r3, [r3, #12]
   21b00:	b2db      	uxtb	r3, r3
   21b02:	2b12      	cmp	r3, #18
   21b04:	d00b      	beq.n	21b1e <am_hal_ble_config+0xa6>
   21b06:	4b1f      	ldr	r3, [pc, #124]	; (21b84 <am_hal_ble_config+0x10c>)
   21b08:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   21b0c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   21b10:	7e8b      	ldrb	r3, [r1, #26]
   21b12:	7223      	strb	r3, [r4, #8]
   21b14:	2000      	movs	r0, #0
   21b16:	bc70      	pop	{r4, r5, r6}
   21b18:	4770      	bx	lr
   21b1a:	2002      	movs	r0, #2
   21b1c:	4770      	bx	lr
   21b1e:	4e1a      	ldr	r6, [pc, #104]	; (21b88 <am_hal_ble_config+0x110>)
   21b20:	68f2      	ldr	r2, [r6, #12]
   21b22:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
   21b26:	690b      	ldr	r3, [r1, #16]
   21b28:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
   21b2c:	690b      	ldr	r3, [r1, #16]
   21b2e:	0a1b      	lsrs	r3, r3, #8
   21b30:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
   21b34:	694b      	ldr	r3, [r1, #20]
   21b36:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
   21b3a:	694b      	ldr	r3, [r1, #20]
   21b3c:	0a1b      	lsrs	r3, r3, #8
   21b3e:	f882 3027 	strb.w	r3, [r2, #39]	; 0x27
   21b42:	7e4b      	ldrb	r3, [r1, #25]
   21b44:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
   21b48:	7e0b      	ldrb	r3, [r1, #24]
   21b4a:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
   21b4e:	6873      	ldr	r3, [r6, #4]
   21b50:	b183      	cbz	r3, 21b74 <am_hal_ble_config+0xfc>
   21b52:	3b01      	subs	r3, #1
   21b54:	4d0d      	ldr	r5, [pc, #52]	; (21b8c <am_hal_ble_config+0x114>)
   21b56:	eb02 0c03 	add.w	ip, r2, r3
   21b5a:	3a01      	subs	r2, #1
   21b5c:	2300      	movs	r3, #0
   21b5e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   21b62:	ea80 2013 	eor.w	r0, r0, r3, lsr #8
   21b66:	4562      	cmp	r2, ip
   21b68:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
   21b6c:	ea80 2303 	eor.w	r3, r0, r3, lsl #8
   21b70:	b29b      	uxth	r3, r3
   21b72:	d1f4      	bne.n	21b5e <am_hal_ble_config+0xe6>
   21b74:	60b3      	str	r3, [r6, #8]
   21b76:	e7c6      	b.n	21b06 <am_hal_ble_config+0x8e>
   21b78:	01775230 	.word	0x01775230
   21b7c:	5000c000 	.word	0x5000c000
   21b80:	40020000 	.word	0x40020000
   21b84:	1000a1a4 	.word	0x1000a1a4
   21b88:	10002cf4 	.word	0x10002cf4
   21b8c:	00025aa0 	.word	0x00025aa0

00021b90 <am_hal_ble_power_control>:
   21b90:	b538      	push	{r3, r4, r5, lr}
   21b92:	2800      	cmp	r0, #0
   21b94:	f000 8086 	beq.w	21ca4 <am_hal_ble_power_control+0x114>
   21b98:	6803      	ldr	r3, [r0, #0]
   21b9a:	4a50      	ldr	r2, [pc, #320]	; (21cdc <am_hal_ble_power_control+0x14c>)
   21b9c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21ba0:	4293      	cmp	r3, r2
   21ba2:	d17f      	bne.n	21ca4 <am_hal_ble_power_control+0x114>
   21ba4:	2900      	cmp	r1, #0
   21ba6:	d154      	bne.n	21c52 <am_hal_ble_power_control+0xc2>
   21ba8:	4b4d      	ldr	r3, [pc, #308]	; (21ce0 <am_hal_ble_power_control+0x150>)
   21baa:	699b      	ldr	r3, [r3, #24]
   21bac:	05db      	lsls	r3, r3, #23
   21bae:	d44d      	bmi.n	21c4c <am_hal_ble_power_control+0xbc>
   21bb0:	4d4c      	ldr	r5, [pc, #304]	; (21ce4 <am_hal_ble_power_control+0x154>)
   21bb2:	69ab      	ldr	r3, [r5, #24]
   21bb4:	f043 0301 	orr.w	r3, r3, #1
   21bb8:	61ab      	str	r3, [r5, #24]
   21bba:	69ab      	ldr	r3, [r5, #24]
   21bbc:	f003 0307 	and.w	r3, r3, #7
   21bc0:	2b07      	cmp	r3, #7
   21bc2:	d00c      	beq.n	21bde <am_hal_ble_power_control+0x4e>
   21bc4:	4c48      	ldr	r4, [pc, #288]	; (21ce8 <am_hal_ble_power_control+0x158>)
   21bc6:	e002      	b.n	21bce <am_hal_ble_power_control+0x3e>
   21bc8:	3c01      	subs	r4, #1
   21bca:	f000 8083 	beq.w	21cd4 <am_hal_ble_power_control+0x144>
   21bce:	2010      	movs	r0, #16
   21bd0:	f001 f9bc 	bl	22f4c <am_hal_flash_delay>
   21bd4:	69ab      	ldr	r3, [r5, #24]
   21bd6:	f003 0307 	and.w	r3, r3, #7
   21bda:	2b07      	cmp	r3, #7
   21bdc:	d1f4      	bne.n	21bc8 <am_hal_ble_power_control+0x38>
   21bde:	200e      	movs	r0, #14
   21be0:	f001 fc66 	bl	234b0 <am_hal_pwrctrl_periph_enable>
   21be4:	2800      	cmp	r0, #0
   21be6:	d173      	bne.n	21cd0 <am_hal_ble_power_control+0x140>
   21be8:	4b40      	ldr	r3, [pc, #256]	; (21cec <am_hal_ble_power_control+0x15c>)
   21bea:	f44f 6200 	mov.w	r2, #2048	; 0x800
   21bee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   21bf2:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
   21bf6:	4a3b      	ldr	r2, [pc, #236]	; (21ce4 <am_hal_ble_power_control+0x154>)
   21bf8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   21bfc:	f360 01df 	bfi	r1, r0, #3, #29
   21c00:	f8c3 1410 	str.w	r1, [r3, #1040]	; 0x410
   21c04:	68d3      	ldr	r3, [r2, #12]
   21c06:	b2db      	uxtb	r3, r3
   21c08:	2b11      	cmp	r3, #17
   21c0a:	d85a      	bhi.n	21cc2 <am_hal_ble_power_control+0x132>
   21c0c:	2304      	movs	r3, #4
   21c0e:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
   21c12:	4d36      	ldr	r5, [pc, #216]	; (21cec <am_hal_ble_power_control+0x15c>)
   21c14:	4836      	ldr	r0, [pc, #216]	; (21cf0 <am_hal_ble_power_control+0x160>)
   21c16:	f001 f999 	bl	22f4c <am_hal_flash_delay>
   21c1a:	f8b5 3304 	ldrh.w	r3, [r5, #772]	; 0x304
   21c1e:	f043 0301 	orr.w	r3, r3, #1
   21c22:	f8a5 3304 	strh.w	r3, [r5, #772]	; 0x304
   21c26:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   21c2a:	f3c3 2302 	ubfx	r3, r3, #8, #3
   21c2e:	2b03      	cmp	r3, #3
   21c30:	d00c      	beq.n	21c4c <am_hal_ble_power_control+0xbc>
   21c32:	4c30      	ldr	r4, [pc, #192]	; (21cf4 <am_hal_ble_power_control+0x164>)
   21c34:	e001      	b.n	21c3a <am_hal_ble_power_control+0xaa>
   21c36:	3c01      	subs	r4, #1
   21c38:	d04e      	beq.n	21cd8 <am_hal_ble_power_control+0x148>
   21c3a:	2010      	movs	r0, #16
   21c3c:	f001 f986 	bl	22f4c <am_hal_flash_delay>
   21c40:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   21c44:	f3c3 2302 	ubfx	r3, r3, #8, #3
   21c48:	2b03      	cmp	r3, #3
   21c4a:	d1f4      	bne.n	21c36 <am_hal_ble_power_control+0xa6>
   21c4c:	2400      	movs	r4, #0
   21c4e:	4620      	mov	r0, r4
   21c50:	bd38      	pop	{r3, r4, r5, pc}
   21c52:	2901      	cmp	r1, #1
   21c54:	d129      	bne.n	21caa <am_hal_ble_power_control+0x11a>
   21c56:	4b25      	ldr	r3, [pc, #148]	; (21cec <am_hal_ble_power_control+0x15c>)
   21c58:	4a22      	ldr	r2, [pc, #136]	; (21ce4 <am_hal_ble_power_control+0x154>)
   21c5a:	2100      	movs	r1, #0
   21c5c:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
   21c60:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
   21c64:	f361 00df 	bfi	r0, r1, #3, #29
   21c68:	f8c3 0410 	str.w	r0, [r3, #1040]	; 0x410
   21c6c:	68d3      	ldr	r3, [r2, #12]
   21c6e:	b2db      	uxtb	r3, r3
   21c70:	2b11      	cmp	r3, #17
   21c72:	d91d      	bls.n	21cb0 <am_hal_ble_power_control+0x120>
   21c74:	f892 3198 	ldrb.w	r3, [r2, #408]	; 0x198
   21c78:	f361 1345 	bfi	r3, r1, #5, #1
   21c7c:	f882 3198 	strb.w	r3, [r2, #408]	; 0x198
   21c80:	4b1a      	ldr	r3, [pc, #104]	; (21cec <am_hal_ble_power_control+0x15c>)
   21c82:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   21c86:	f36f 0200 	bfc	r2, #0, #1
   21c8a:	200e      	movs	r0, #14
   21c8c:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   21c90:	f001 fc38 	bl	23504 <am_hal_pwrctrl_periph_disable>
   21c94:	4604      	mov	r4, r0
   21c96:	b990      	cbnz	r0, 21cbe <am_hal_ble_power_control+0x12e>
   21c98:	f44f 60c8 	mov.w	r0, #1600	; 0x640
   21c9c:	f001 f956 	bl	22f4c <am_hal_flash_delay>
   21ca0:	4620      	mov	r0, r4
   21ca2:	bd38      	pop	{r3, r4, r5, pc}
   21ca4:	2402      	movs	r4, #2
   21ca6:	4620      	mov	r0, r4
   21ca8:	bd38      	pop	{r3, r4, r5, pc}
   21caa:	2407      	movs	r4, #7
   21cac:	4620      	mov	r0, r4
   21cae:	bd38      	pop	{r3, r4, r5, pc}
   21cb0:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
   21cb4:	f023 0304 	bic.w	r3, r3, #4
   21cb8:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
   21cbc:	e7e0      	b.n	21c80 <am_hal_ble_power_control+0xf0>
   21cbe:	4c0e      	ldr	r4, [pc, #56]	; (21cf8 <am_hal_ble_power_control+0x168>)
   21cc0:	e7c5      	b.n	21c4e <am_hal_ble_power_control+0xbe>
   21cc2:	f892 3198 	ldrb.w	r3, [r2, #408]	; 0x198
   21cc6:	f043 0320 	orr.w	r3, r3, #32
   21cca:	f882 3198 	strb.w	r3, [r2, #408]	; 0x198
   21cce:	e7a0      	b.n	21c12 <am_hal_ble_power_control+0x82>
   21cd0:	4c0a      	ldr	r4, [pc, #40]	; (21cfc <am_hal_ble_power_control+0x16c>)
   21cd2:	e7bc      	b.n	21c4e <am_hal_ble_power_control+0xbe>
   21cd4:	4c0a      	ldr	r4, [pc, #40]	; (21d00 <am_hal_ble_power_control+0x170>)
   21cd6:	e7ba      	b.n	21c4e <am_hal_ble_power_control+0xbe>
   21cd8:	4c0a      	ldr	r4, [pc, #40]	; (21d04 <am_hal_ble_power_control+0x174>)
   21cda:	e7b8      	b.n	21c4e <am_hal_ble_power_control+0xbe>
   21cdc:	01775230 	.word	0x01775230
   21ce0:	40021000 	.word	0x40021000
   21ce4:	40020000 	.word	0x40020000
   21ce8:	000186a0 	.word	0x000186a0
   21cec:	5000c000 	.word	0x5000c000
   21cf0:	00013880 	.word	0x00013880
   21cf4:	000f4240 	.word	0x000f4240
   21cf8:	08000006 	.word	0x08000006
   21cfc:	08000007 	.word	0x08000007
   21d00:	08000005 	.word	0x08000005
   21d04:	08000008 	.word	0x08000008

00021d08 <am_hal_ble_patch_apply>:
   21d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21d0c:	b093      	sub	sp, #76	; 0x4c
   21d0e:	2800      	cmp	r0, #0
   21d10:	d05c      	beq.n	21dcc <am_hal_ble_patch_apply+0xc4>
   21d12:	6803      	ldr	r3, [r0, #0]
   21d14:	4ab7      	ldr	r2, [pc, #732]	; (21ff4 <am_hal_ble_patch_apply+0x2ec>)
   21d16:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21d1a:	4293      	cmp	r3, r2
   21d1c:	4605      	mov	r5, r0
   21d1e:	d155      	bne.n	21dcc <am_hal_ble_patch_apply+0xc4>
   21d20:	4688      	mov	r8, r1
   21d22:	6809      	ldr	r1, [r1, #0]
   21d24:	f8b8 2004 	ldrh.w	r2, [r8, #4]
   21d28:	f88d 1009 	strb.w	r1, [sp, #9]
   21d2c:	2001      	movs	r0, #1
   21d2e:	f240 21f1 	movw	r1, #753	; 0x2f1
   21d32:	f8df a2d4 	ldr.w	sl, [pc, #724]	; 22008 <am_hal_ble_patch_apply+0x300>
   21d36:	f88d 0008 	strb.w	r0, [sp, #8]
   21d3a:	f8ad 100a 	strh.w	r1, [sp, #10]
   21d3e:	f8ad 200c 	strh.w	r2, [sp, #12]
   21d42:	f241 3788 	movw	r7, #5000	; 0x1388
   21d46:	2400      	movs	r4, #0
   21d48:	4699      	mov	r9, r3
   21d4a:	aa02      	add	r2, sp, #8
   21d4c:	454b      	cmp	r3, r9
   21d4e:	e9cd 240c 	strd	r2, r4, [sp, #48]	; 0x30
   21d52:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
   21d56:	a90c      	add	r1, sp, #48	; 0x30
   21d58:	4628      	mov	r0, r5
   21d5a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
   21d5e:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
   21d62:	d014      	beq.n	21d8e <am_hal_ble_patch_apply+0x86>
   21d64:	4ba4      	ldr	r3, [pc, #656]	; (21ff8 <am_hal_ble_patch_apply+0x2f0>)
   21d66:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   21d6a:	061b      	lsls	r3, r3, #24
   21d6c:	d41a      	bmi.n	21da4 <am_hal_ble_patch_apply+0x9c>
   21d6e:	4ea3      	ldr	r6, [pc, #652]	; (21ffc <am_hal_ble_patch_apply+0x2f4>)
   21d70:	4ca1      	ldr	r4, [pc, #644]	; (21ff8 <am_hal_ble_patch_apply+0x2f0>)
   21d72:	2010      	movs	r0, #16
   21d74:	f001 f8ea 	bl	22f4c <am_hal_flash_delay>
   21d78:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   21d7c:	061f      	lsls	r7, r3, #24
   21d7e:	d411      	bmi.n	21da4 <am_hal_ble_patch_apply+0x9c>
   21d80:	3e01      	subs	r6, #1
   21d82:	d1f6      	bne.n	21d72 <am_hal_ble_patch_apply+0x6a>
   21d84:	4e9e      	ldr	r6, [pc, #632]	; (22000 <am_hal_ble_patch_apply+0x2f8>)
   21d86:	4630      	mov	r0, r6
   21d88:	b013      	add	sp, #76	; 0x4c
   21d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21d8e:	f7ff fbaf 	bl	214f0 <am_hal_ble_blocking_transfer.part.0>
   21d92:	4606      	mov	r6, r0
   21d94:	2800      	cmp	r0, #0
   21d96:	d0e5      	beq.n	21d64 <am_hal_ble_patch_apply+0x5c>
   21d98:	3f01      	subs	r7, #1
   21d9a:	d0f4      	beq.n	21d86 <am_hal_ble_patch_apply+0x7e>
   21d9c:	682b      	ldr	r3, [r5, #0]
   21d9e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21da2:	e7d2      	b.n	21d4a <am_hal_ble_patch_apply+0x42>
   21da4:	2300      	movs	r3, #0
   21da6:	e9cd 3307 	strd	r3, r3, [sp, #28]
   21daa:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   21dae:	930b      	str	r3, [sp, #44]	; 0x2c
   21db0:	2302      	movs	r3, #2
   21db2:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   21db6:	2305      	movs	r3, #5
   21db8:	f8ad 3020 	strh.w	r3, [sp, #32]
   21dbc:	682b      	ldr	r3, [r5, #0]
   21dbe:	f023 4b7e 	bic.w	fp, r3, #4261412864	; 0xfe000000
   21dc2:	4b8c      	ldr	r3, [pc, #560]	; (21ff4 <am_hal_ble_patch_apply+0x2ec>)
   21dc4:	aa02      	add	r2, sp, #8
   21dc6:	459b      	cmp	fp, r3
   21dc8:	9206      	str	r2, [sp, #24]
   21dca:	d004      	beq.n	21dd6 <am_hal_ble_patch_apply+0xce>
   21dcc:	2602      	movs	r6, #2
   21dce:	4630      	mov	r0, r6
   21dd0:	b013      	add	sp, #76	; 0x4c
   21dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21dd6:	a906      	add	r1, sp, #24
   21dd8:	4628      	mov	r0, r5
   21dda:	f7ff fb89 	bl	214f0 <am_hal_ble_blocking_transfer.part.0>
   21dde:	4606      	mov	r6, r0
   21de0:	2800      	cmp	r0, #0
   21de2:	d1d0      	bne.n	21d86 <am_hal_ble_patch_apply+0x7e>
   21de4:	f89d 1008 	ldrb.w	r1, [sp, #8]
   21de8:	f8d8 3000 	ldr.w	r3, [r8]
   21dec:	2904      	cmp	r1, #4
   21dee:	b2da      	uxtb	r2, r3
   21df0:	f040 80fb 	bne.w	21fea <am_hal_ble_patch_apply+0x2e2>
   21df4:	f89d 1009 	ldrb.w	r1, [sp, #9]
   21df8:	4291      	cmp	r1, r2
   21dfa:	f040 80f6 	bne.w	21fea <am_hal_ble_patch_apply+0x2e2>
   21dfe:	f89d 100a 	ldrb.w	r1, [sp, #10]
   21e02:	29f1      	cmp	r1, #241	; 0xf1
   21e04:	f040 80f1 	bne.w	21fea <am_hal_ble_patch_apply+0x2e2>
   21e08:	f89d 100b 	ldrb.w	r1, [sp, #11]
   21e0c:	2901      	cmp	r1, #1
   21e0e:	f040 80ec 	bne.w	21fea <am_hal_ble_patch_apply+0x2e2>
   21e12:	f89d 100c 	ldrb.w	r1, [sp, #12]
   21e16:	2900      	cmp	r1, #0
   21e18:	f040 80e7 	bne.w	21fea <am_hal_ble_patch_apply+0x2e2>
   21e1c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   21e20:	9101      	str	r1, [sp, #4]
   21e22:	2900      	cmp	r1, #0
   21e24:	d07d      	beq.n	21f22 <am_hal_ble_patch_apply+0x21a>
   21e26:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 2200c <am_hal_ble_patch_apply+0x304>
   21e2a:	4f73      	ldr	r7, [pc, #460]	; (21ff8 <am_hal_ble_patch_apply+0x2f0>)
   21e2c:	f88a 3001 	strb.w	r3, [sl, #1]
   21e30:	9b01      	ldr	r3, [sp, #4]
   21e32:	f8d8 100c 	ldr.w	r1, [r8, #12]
   21e36:	4873      	ldr	r0, [pc, #460]	; (22004 <am_hal_ble_patch_apply+0x2fc>)
   21e38:	f8cd a018 	str.w	sl, [sp, #24]
   21e3c:	2b80      	cmp	r3, #128	; 0x80
   21e3e:	bf28      	it	cs
   21e40:	2380      	movcs	r3, #128	; 0x80
   21e42:	4699      	mov	r9, r3
   21e44:	f88a 3003 	strb.w	r3, [sl, #3]
   21e48:	f026 0303 	bic.w	r3, r6, #3
   21e4c:	4419      	add	r1, r3
   21e4e:	2300      	movs	r3, #0
   21e50:	e9cd 3307 	strd	r3, r3, [sp, #28]
   21e54:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   21e58:	930b      	str	r3, [sp, #44]	; 0x2c
   21e5a:	2301      	movs	r3, #1
   21e5c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   21e60:	f88a 3000 	strb.w	r3, [sl]
   21e64:	f109 0304 	add.w	r3, r9, #4
   21e68:	f8ad 3020 	strh.w	r3, [sp, #32]
   21e6c:	23f2      	movs	r3, #242	; 0xf2
   21e6e:	f88a 3002 	strb.w	r3, [sl, #2]
   21e72:	464a      	mov	r2, r9
   21e74:	f7ea f944 	bl	c100 <memcpy>
   21e78:	682b      	ldr	r3, [r5, #0]
   21e7a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21e7e:	455b      	cmp	r3, fp
   21e80:	d1a4      	bne.n	21dcc <am_hal_ble_patch_apply+0xc4>
   21e82:	a906      	add	r1, sp, #24
   21e84:	4628      	mov	r0, r5
   21e86:	f7ff fb33 	bl	214f0 <am_hal_ble_blocking_transfer.part.0>
   21e8a:	2800      	cmp	r0, #0
   21e8c:	f040 80cc 	bne.w	22028 <am_hal_ble_patch_apply+0x320>
   21e90:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   21e94:	061c      	lsls	r4, r3, #24
   21e96:	d40b      	bmi.n	21eb0 <am_hal_ble_patch_apply+0x1a8>
   21e98:	4c58      	ldr	r4, [pc, #352]	; (21ffc <am_hal_ble_patch_apply+0x2f4>)
   21e9a:	e002      	b.n	21ea2 <am_hal_ble_patch_apply+0x19a>
   21e9c:	3c01      	subs	r4, #1
   21e9e:	f43f af71 	beq.w	21d84 <am_hal_ble_patch_apply+0x7c>
   21ea2:	2010      	movs	r0, #16
   21ea4:	f001 f852 	bl	22f4c <am_hal_flash_delay>
   21ea8:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   21eac:	0618      	lsls	r0, r3, #24
   21eae:	d5f5      	bpl.n	21e9c <am_hal_ble_patch_apply+0x194>
   21eb0:	ab02      	add	r3, sp, #8
   21eb2:	9306      	str	r3, [sp, #24]
   21eb4:	682b      	ldr	r3, [r5, #0]
   21eb6:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
   21eba:	2300      	movs	r3, #0
   21ebc:	e9cd 3307 	strd	r3, r3, [sp, #28]
   21ec0:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   21ec4:	930b      	str	r3, [sp, #44]	; 0x2c
   21ec6:	2302      	movs	r3, #2
   21ec8:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   21ecc:	455a      	cmp	r2, fp
   21ece:	f04f 0305 	mov.w	r3, #5
   21ed2:	f8ad 3020 	strh.w	r3, [sp, #32]
   21ed6:	f47f af79 	bne.w	21dcc <am_hal_ble_patch_apply+0xc4>
   21eda:	a906      	add	r1, sp, #24
   21edc:	4628      	mov	r0, r5
   21ede:	f7ff fb07 	bl	214f0 <am_hal_ble_blocking_transfer.part.0>
   21ee2:	2800      	cmp	r0, #0
   21ee4:	f040 80a0 	bne.w	22028 <am_hal_ble_patch_apply+0x320>
   21ee8:	f89d 1008 	ldrb.w	r1, [sp, #8]
   21eec:	f8d8 3000 	ldr.w	r3, [r8]
   21ef0:	2904      	cmp	r1, #4
   21ef2:	b2da      	uxtb	r2, r3
   21ef4:	d179      	bne.n	21fea <am_hal_ble_patch_apply+0x2e2>
   21ef6:	f89d 1009 	ldrb.w	r1, [sp, #9]
   21efa:	4291      	cmp	r1, r2
   21efc:	d175      	bne.n	21fea <am_hal_ble_patch_apply+0x2e2>
   21efe:	f89d 100a 	ldrb.w	r1, [sp, #10]
   21f02:	29f2      	cmp	r1, #242	; 0xf2
   21f04:	d171      	bne.n	21fea <am_hal_ble_patch_apply+0x2e2>
   21f06:	f89d 100b 	ldrb.w	r1, [sp, #11]
   21f0a:	2901      	cmp	r1, #1
   21f0c:	d16d      	bne.n	21fea <am_hal_ble_patch_apply+0x2e2>
   21f0e:	f89d 100c 	ldrb.w	r1, [sp, #12]
   21f12:	2900      	cmp	r1, #0
   21f14:	d169      	bne.n	21fea <am_hal_ble_patch_apply+0x2e2>
   21f16:	9901      	ldr	r1, [sp, #4]
   21f18:	ebb1 0109 	subs.w	r1, r1, r9
   21f1c:	444e      	add	r6, r9
   21f1e:	9101      	str	r1, [sp, #4]
   21f20:	d184      	bne.n	21e2c <am_hal_ble_patch_apply+0x124>
   21f22:	f88d 2009 	strb.w	r2, [sp, #9]
   21f26:	2200      	movs	r2, #0
   21f28:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
   21f2c:	920d      	str	r2, [sp, #52]	; 0x34
   21f2e:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
   21f32:	f8b8 2008 	ldrh.w	r2, [r8, #8]
   21f36:	f8ad 200c 	strh.w	r2, [sp, #12]
   21f3a:	ab02      	add	r3, sp, #8
   21f3c:	4a32      	ldr	r2, [pc, #200]	; (22008 <am_hal_ble_patch_apply+0x300>)
   21f3e:	930c      	str	r3, [sp, #48]	; 0x30
   21f40:	920e      	str	r2, [sp, #56]	; 0x38
   21f42:	682b      	ldr	r3, [r5, #0]
   21f44:	492b      	ldr	r1, [pc, #172]	; (21ff4 <am_hal_ble_patch_apply+0x2ec>)
   21f46:	2201      	movs	r2, #1
   21f48:	f88d 2008 	strb.w	r2, [sp, #8]
   21f4c:	f240 22f3 	movw	r2, #755	; 0x2f3
   21f50:	f8ad 200a 	strh.w	r2, [sp, #10]
   21f54:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
   21f58:	428a      	cmp	r2, r1
   21f5a:	d059      	beq.n	22010 <am_hal_ble_patch_apply+0x308>
   21f5c:	4a26      	ldr	r2, [pc, #152]	; (21ff8 <am_hal_ble_patch_apply+0x2f0>)
   21f5e:	f8d2 230c 	ldr.w	r2, [r2, #780]	; 0x30c
   21f62:	0611      	lsls	r1, r2, #24
   21f64:	d40d      	bmi.n	21f82 <am_hal_ble_patch_apply+0x27a>
   21f66:	4c25      	ldr	r4, [pc, #148]	; (21ffc <am_hal_ble_patch_apply+0x2f4>)
   21f68:	4e23      	ldr	r6, [pc, #140]	; (21ff8 <am_hal_ble_patch_apply+0x2f0>)
   21f6a:	e002      	b.n	21f72 <am_hal_ble_patch_apply+0x26a>
   21f6c:	3c01      	subs	r4, #1
   21f6e:	f43f af09 	beq.w	21d84 <am_hal_ble_patch_apply+0x7c>
   21f72:	2010      	movs	r0, #16
   21f74:	f000 ffea 	bl	22f4c <am_hal_flash_delay>
   21f78:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   21f7c:	061b      	lsls	r3, r3, #24
   21f7e:	d5f5      	bpl.n	21f6c <am_hal_ble_patch_apply+0x264>
   21f80:	682b      	ldr	r3, [r5, #0]
   21f82:	491c      	ldr	r1, [pc, #112]	; (21ff4 <am_hal_ble_patch_apply+0x2ec>)
   21f84:	aa02      	add	r2, sp, #8
   21f86:	9206      	str	r2, [sp, #24]
   21f88:	2200      	movs	r2, #0
   21f8a:	e9cd 2207 	strd	r2, r2, [sp, #28]
   21f8e:	e9cd 2209 	strd	r2, r2, [sp, #36]	; 0x24
   21f92:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21f96:	920b      	str	r2, [sp, #44]	; 0x2c
   21f98:	2202      	movs	r2, #2
   21f9a:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   21f9e:	428b      	cmp	r3, r1
   21fa0:	f04f 0205 	mov.w	r2, #5
   21fa4:	f8ad 2020 	strh.w	r2, [sp, #32]
   21fa8:	f47f af10 	bne.w	21dcc <am_hal_ble_patch_apply+0xc4>
   21fac:	a906      	add	r1, sp, #24
   21fae:	4628      	mov	r0, r5
   21fb0:	f7ff fa9e 	bl	214f0 <am_hal_ble_blocking_transfer.part.0>
   21fb4:	4606      	mov	r6, r0
   21fb6:	2800      	cmp	r0, #0
   21fb8:	f47f aee5 	bne.w	21d86 <am_hal_ble_patch_apply+0x7e>
   21fbc:	f89d 2008 	ldrb.w	r2, [sp, #8]
   21fc0:	f898 3000 	ldrb.w	r3, [r8]
   21fc4:	2a04      	cmp	r2, #4
   21fc6:	d110      	bne.n	21fea <am_hal_ble_patch_apply+0x2e2>
   21fc8:	f89d 2009 	ldrb.w	r2, [sp, #9]
   21fcc:	429a      	cmp	r2, r3
   21fce:	d10c      	bne.n	21fea <am_hal_ble_patch_apply+0x2e2>
   21fd0:	f89d 300a 	ldrb.w	r3, [sp, #10]
   21fd4:	2bf3      	cmp	r3, #243	; 0xf3
   21fd6:	d108      	bne.n	21fea <am_hal_ble_patch_apply+0x2e2>
   21fd8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   21fdc:	2b01      	cmp	r3, #1
   21fde:	d104      	bne.n	21fea <am_hal_ble_patch_apply+0x2e2>
   21fe0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   21fe4:	2b00      	cmp	r3, #0
   21fe6:	f43f aece 	beq.w	21d86 <am_hal_ble_patch_apply+0x7e>
   21fea:	2601      	movs	r6, #1
   21fec:	4630      	mov	r0, r6
   21fee:	b013      	add	sp, #76	; 0x4c
   21ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21ff4:	01775230 	.word	0x01775230
   21ff8:	5000c000 	.word	0x5000c000
   21ffc:	000f4240 	.word	0x000f4240
   22000:	08000004 	.word	0x08000004
   22004:	1000a124 	.word	0x1000a124
   22008:	00010006 	.word	0x00010006
   2200c:	1000a120 	.word	0x1000a120
   22010:	a90c      	add	r1, sp, #48	; 0x30
   22012:	4628      	mov	r0, r5
   22014:	f7ff fa6c 	bl	214f0 <am_hal_ble_blocking_transfer.part.0>
   22018:	2800      	cmp	r0, #0
   2201a:	d1e6      	bne.n	21fea <am_hal_ble_patch_apply+0x2e2>
   2201c:	4b03      	ldr	r3, [pc, #12]	; (2202c <am_hal_ble_patch_apply+0x324>)
   2201e:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   22022:	061a      	lsls	r2, r3, #24
   22024:	d59f      	bpl.n	21f66 <am_hal_ble_patch_apply+0x25e>
   22026:	e7ab      	b.n	21f80 <am_hal_ble_patch_apply+0x278>
   22028:	4606      	mov	r6, r0
   2202a:	e6ac      	b.n	21d86 <am_hal_ble_patch_apply+0x7e>
   2202c:	5000c000 	.word	0x5000c000

00022030 <am_hal_ble_patch_copy_end_apply>:
   22030:	2800      	cmp	r0, #0
   22032:	d076      	beq.n	22122 <am_hal_ble_patch_copy_end_apply+0xf2>
   22034:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22038:	6803      	ldr	r3, [r0, #0]
   2203a:	4a3c      	ldr	r2, [pc, #240]	; (2212c <am_hal_ble_patch_copy_end_apply+0xfc>)
   2203c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   22040:	4293      	cmp	r3, r2
   22042:	b08b      	sub	sp, #44	; 0x2c
   22044:	4606      	mov	r6, r0
   22046:	d168      	bne.n	2211a <am_hal_ble_patch_copy_end_apply+0xea>
   22048:	4a39      	ldr	r2, [pc, #228]	; (22130 <am_hal_ble_patch_copy_end_apply+0x100>)
   2204a:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 22140 <am_hal_ble_patch_copy_end_apply+0x110>
   2204e:	9200      	str	r2, [sp, #0]
   22050:	2400      	movs	r4, #0
   22052:	f8ad 4004 	strh.w	r4, [sp, #4]
   22056:	f241 3588 	movw	r5, #5000	; 0x1388
   2205a:	4698      	mov	r8, r3
   2205c:	af04      	add	r7, sp, #16
   2205e:	4543      	cmp	r3, r8
   22060:	e9cd 4905 	strd	r4, r9, [sp, #20]
   22064:	e9cd 4408 	strd	r4, r4, [sp, #32]
   22068:	4639      	mov	r1, r7
   2206a:	4630      	mov	r0, r6
   2206c:	f8cd d010 	str.w	sp, [sp, #16]
   22070:	f88d 401c 	strb.w	r4, [sp, #28]
   22074:	d013      	beq.n	2209e <am_hal_ble_patch_copy_end_apply+0x6e>
   22076:	4b2f      	ldr	r3, [pc, #188]	; (22134 <am_hal_ble_patch_copy_end_apply+0x104>)
   22078:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   2207c:	061a      	lsls	r2, r3, #24
   2207e:	d419      	bmi.n	220b4 <am_hal_ble_patch_copy_end_apply+0x84>
   22080:	4d2d      	ldr	r5, [pc, #180]	; (22138 <am_hal_ble_patch_copy_end_apply+0x108>)
   22082:	4c2c      	ldr	r4, [pc, #176]	; (22134 <am_hal_ble_patch_copy_end_apply+0x104>)
   22084:	2010      	movs	r0, #16
   22086:	f000 ff61 	bl	22f4c <am_hal_flash_delay>
   2208a:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   2208e:	061b      	lsls	r3, r3, #24
   22090:	d40f      	bmi.n	220b2 <am_hal_ble_patch_copy_end_apply+0x82>
   22092:	3d01      	subs	r5, #1
   22094:	d1f6      	bne.n	22084 <am_hal_ble_patch_copy_end_apply+0x54>
   22096:	4829      	ldr	r0, [pc, #164]	; (2213c <am_hal_ble_patch_copy_end_apply+0x10c>)
   22098:	b00b      	add	sp, #44	; 0x2c
   2209a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2209e:	f7ff fa27 	bl	214f0 <am_hal_ble_blocking_transfer.part.0>
   220a2:	2800      	cmp	r0, #0
   220a4:	d0e7      	beq.n	22076 <am_hal_ble_patch_copy_end_apply+0x46>
   220a6:	3d01      	subs	r5, #1
   220a8:	d0f6      	beq.n	22098 <am_hal_ble_patch_copy_end_apply+0x68>
   220aa:	6833      	ldr	r3, [r6, #0]
   220ac:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   220b0:	e7d4      	b.n	2205c <am_hal_ble_patch_copy_end_apply+0x2c>
   220b2:	af04      	add	r7, sp, #16
   220b4:	6832      	ldr	r2, [r6, #0]
   220b6:	491d      	ldr	r1, [pc, #116]	; (2212c <am_hal_ble_patch_copy_end_apply+0xfc>)
   220b8:	f8cd d010 	str.w	sp, [sp, #16]
   220bc:	2300      	movs	r3, #0
   220be:	e9cd 3305 	strd	r3, r3, [sp, #20]
   220c2:	e9cd 3307 	strd	r3, r3, [sp, #28]
   220c6:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   220ca:	9309      	str	r3, [sp, #36]	; 0x24
   220cc:	2302      	movs	r3, #2
   220ce:	f88d 301a 	strb.w	r3, [sp, #26]
   220d2:	428a      	cmp	r2, r1
   220d4:	f04f 0305 	mov.w	r3, #5
   220d8:	f8ad 3018 	strh.w	r3, [sp, #24]
   220dc:	d11d      	bne.n	2211a <am_hal_ble_patch_copy_end_apply+0xea>
   220de:	4639      	mov	r1, r7
   220e0:	4630      	mov	r0, r6
   220e2:	f7ff fa05 	bl	214f0 <am_hal_ble_blocking_transfer.part.0>
   220e6:	2800      	cmp	r0, #0
   220e8:	d1d6      	bne.n	22098 <am_hal_ble_patch_copy_end_apply+0x68>
   220ea:	f89d 3000 	ldrb.w	r3, [sp]
   220ee:	2b04      	cmp	r3, #4
   220f0:	d119      	bne.n	22126 <am_hal_ble_patch_copy_end_apply+0xf6>
   220f2:	f89d 3001 	ldrb.w	r3, [sp, #1]
   220f6:	2bee      	cmp	r3, #238	; 0xee
   220f8:	d115      	bne.n	22126 <am_hal_ble_patch_copy_end_apply+0xf6>
   220fa:	f89d 3002 	ldrb.w	r3, [sp, #2]
   220fe:	2bf1      	cmp	r3, #241	; 0xf1
   22100:	d111      	bne.n	22126 <am_hal_ble_patch_copy_end_apply+0xf6>
   22102:	f89d 3003 	ldrb.w	r3, [sp, #3]
   22106:	2b01      	cmp	r3, #1
   22108:	d10d      	bne.n	22126 <am_hal_ble_patch_copy_end_apply+0xf6>
   2210a:	f89d 0004 	ldrb.w	r0, [sp, #4]
   2210e:	3800      	subs	r0, #0
   22110:	bf18      	it	ne
   22112:	2001      	movne	r0, #1
   22114:	b00b      	add	sp, #44	; 0x2c
   22116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2211a:	2002      	movs	r0, #2
   2211c:	b00b      	add	sp, #44	; 0x2c
   2211e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22122:	2002      	movs	r0, #2
   22124:	4770      	bx	lr
   22126:	2001      	movs	r0, #1
   22128:	e7b6      	b.n	22098 <am_hal_ble_patch_copy_end_apply+0x68>
   2212a:	bf00      	nop
   2212c:	01775230 	.word	0x01775230
   22130:	02f1ee01 	.word	0x02f1ee01
   22134:	5000c000 	.word	0x5000c000
   22138:	000f4240 	.word	0x000f4240
   2213c:	08000004 	.word	0x08000004
   22140:	00010006 	.word	0x00010006

00022144 <am_hal_ble_default_patch_apply>:
   22144:	4a1c      	ldr	r2, [pc, #112]	; (221b8 <am_hal_ble_default_patch_apply+0x74>)
   22146:	68d3      	ldr	r3, [r2, #12]
   22148:	b2db      	uxtb	r3, r3
   2214a:	2b11      	cmp	r3, #17
   2214c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22150:	4605      	mov	r5, r0
   22152:	d02c      	beq.n	221ae <am_hal_ble_default_patch_apply+0x6a>
   22154:	68d3      	ldr	r3, [r2, #12]
   22156:	b2db      	uxtb	r3, r3
   22158:	2b12      	cmp	r3, #18
   2215a:	d028      	beq.n	221ae <am_hal_ble_default_patch_apply+0x6a>
   2215c:	4a17      	ldr	r2, [pc, #92]	; (221bc <am_hal_ble_default_patch_apply+0x78>)
   2215e:	4b18      	ldr	r3, [pc, #96]	; (221c0 <am_hal_ble_default_patch_apply+0x7c>)
   22160:	6816      	ldr	r6, [r2, #0]
   22162:	681b      	ldr	r3, [r3, #0]
   22164:	b306      	cbz	r6, 221a8 <am_hal_ble_default_patch_apply+0x64>
   22166:	4c17      	ldr	r4, [pc, #92]	; (221c4 <am_hal_ble_default_patch_apply+0x80>)
   22168:	f1a3 0804 	sub.w	r8, r3, #4
   2216c:	2700      	movs	r7, #0
   2216e:	f858 1f04 	ldr.w	r1, [r8, #4]!
   22172:	684b      	ldr	r3, [r1, #4]
   22174:	68ca      	ldr	r2, [r1, #12]
   22176:	b17b      	cbz	r3, 22198 <am_hal_ble_default_patch_apply+0x54>
   22178:	3b01      	subs	r3, #1
   2217a:	eb02 0c03 	add.w	ip, r2, r3
   2217e:	1e50      	subs	r0, r2, #1
   22180:	2300      	movs	r3, #0
   22182:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   22186:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
   2218a:	4584      	cmp	ip, r0
   2218c:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
   22190:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
   22194:	b29b      	uxth	r3, r3
   22196:	d1f4      	bne.n	22182 <am_hal_ble_default_patch_apply+0x3e>
   22198:	608b      	str	r3, [r1, #8]
   2219a:	4628      	mov	r0, r5
   2219c:	f7ff fdb4 	bl	21d08 <am_hal_ble_patch_apply>
   221a0:	b918      	cbnz	r0, 221aa <am_hal_ble_default_patch_apply+0x66>
   221a2:	3701      	adds	r7, #1
   221a4:	42be      	cmp	r6, r7
   221a6:	d1e2      	bne.n	2216e <am_hal_ble_default_patch_apply+0x2a>
   221a8:	2000      	movs	r0, #0
   221aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   221ae:	4a06      	ldr	r2, [pc, #24]	; (221c8 <am_hal_ble_default_patch_apply+0x84>)
   221b0:	4b06      	ldr	r3, [pc, #24]	; (221cc <am_hal_ble_default_patch_apply+0x88>)
   221b2:	6816      	ldr	r6, [r2, #0]
   221b4:	681b      	ldr	r3, [r3, #0]
   221b6:	e7d5      	b.n	22164 <am_hal_ble_default_patch_apply+0x20>
   221b8:	40020000 	.word	0x40020000
   221bc:	00027708 	.word	0x00027708
   221c0:	10003de4 	.word	0x10003de4
   221c4:	00025aa0 	.word	0x00025aa0
   221c8:	000272ec 	.word	0x000272ec
   221cc:	10002e3c 	.word	0x10002e3c

000221d0 <am_hal_ble_default_trim_set_ramcode>:
   221d0:	4b0f      	ldr	r3, [pc, #60]	; (22210 <am_hal_ble_default_trim_set_ramcode+0x40>)
   221d2:	68db      	ldr	r3, [r3, #12]
   221d4:	b2db      	uxtb	r3, r3
   221d6:	2b21      	cmp	r3, #33	; 0x21
   221d8:	bf0c      	ite	eq
   221da:	4b0e      	ldreq	r3, [pc, #56]	; (22214 <am_hal_ble_default_trim_set_ramcode+0x44>)
   221dc:	4b0e      	ldrne	r3, [pc, #56]	; (22218 <am_hal_ble_default_trim_set_ramcode+0x48>)
   221de:	68da      	ldr	r2, [r3, #12]
   221e0:	4b0e      	ldr	r3, [pc, #56]	; (2221c <am_hal_ble_default_trim_set_ramcode+0x4c>)
   221e2:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
   221e6:	ba19      	rev	r1, r3
   221e8:	3301      	adds	r3, #1
   221ea:	4b0c      	ldr	r3, [pc, #48]	; (2221c <am_hal_ble_default_trim_set_ramcode+0x4c>)
   221ec:	bf18      	it	ne
   221ee:	6091      	strne	r1, [r2, #8]
   221f0:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   221f4:	1c59      	adds	r1, r3, #1
   221f6:	d009      	beq.n	2220c <am_hal_ble_default_trim_set_ramcode+0x3c>
   221f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   221fc:	ba19      	rev	r1, r3
   221fe:	3301      	adds	r3, #1
   22200:	d004      	beq.n	2220c <am_hal_ble_default_trim_set_ramcode+0x3c>
   22202:	68d3      	ldr	r3, [r2, #12]
   22204:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
   22208:	430b      	orrs	r3, r1
   2220a:	60d3      	str	r3, [r2, #12]
   2220c:	2000      	movs	r0, #0
   2220e:	4770      	bx	lr
   22210:	40020000 	.word	0x40020000
   22214:	10002f28 	.word	0x10002f28
   22218:	10002d14 	.word	0x10002d14
   2221c:	50023000 	.word	0x50023000

00022220 <am_hal_ble_blocking_hci_write>:
   22220:	b530      	push	{r4, r5, lr}
   22222:	b087      	sub	sp, #28
   22224:	2400      	movs	r4, #0
   22226:	e9cd 4404 	strd	r4, r4, [sp, #16]
   2222a:	b29b      	uxth	r3, r3
   2222c:	f88d 4005 	strb.w	r4, [sp, #5]
   22230:	f8ad 4006 	strh.w	r4, [sp, #6]
   22234:	f88d 400c 	strb.w	r4, [sp, #12]
   22238:	2401      	movs	r4, #1
   2223a:	9200      	str	r2, [sp, #0]
   2223c:	f88d 1004 	strb.w	r1, [sp, #4]
   22240:	f8ad 3008 	strh.w	r3, [sp, #8]
   22244:	f8ad 400a 	strh.w	r4, [sp, #10]
   22248:	b128      	cbz	r0, 22256 <am_hal_ble_blocking_hci_write+0x36>
   2224a:	6802      	ldr	r2, [r0, #0]
   2224c:	4d08      	ldr	r5, [pc, #32]	; (22270 <am_hal_ble_blocking_hci_write+0x50>)
   2224e:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   22252:	42aa      	cmp	r2, r5
   22254:	d002      	beq.n	2225c <am_hal_ble_blocking_hci_write+0x3c>
   22256:	2000      	movs	r0, #0
   22258:	b007      	add	sp, #28
   2225a:	bd30      	pop	{r4, r5, pc}
   2225c:	b109      	cbz	r1, 22262 <am_hal_ble_blocking_hci_write+0x42>
   2225e:	f88d 4007 	strb.w	r4, [sp, #7]
   22262:	2b00      	cmp	r3, #0
   22264:	d0f7      	beq.n	22256 <am_hal_ble_blocking_hci_write+0x36>
   22266:	4669      	mov	r1, sp
   22268:	f7ff f942 	bl	214f0 <am_hal_ble_blocking_transfer.part.0>
   2226c:	b007      	add	sp, #28
   2226e:	bd30      	pop	{r4, r5, pc}
   22270:	01775230 	.word	0x01775230

00022274 <am_hal_ble_blocking_hci_read>:
   22274:	b5f0      	push	{r4, r5, r6, r7, lr}
   22276:	b089      	sub	sp, #36	; 0x24
   22278:	ab01      	add	r3, sp, #4
   2227a:	9302      	str	r3, [sp, #8]
   2227c:	4b26      	ldr	r3, [pc, #152]	; (22318 <am_hal_ble_blocking_hci_read+0xa4>)
   2227e:	681b      	ldr	r3, [r3, #0]
   22280:	f8ad 300c 	strh.w	r3, [sp, #12]
   22284:	0c1b      	lsrs	r3, r3, #16
   22286:	f88d 300e 	strb.w	r3, [sp, #14]
   2228a:	2300      	movs	r3, #0
   2228c:	e9cd 3306 	strd	r3, r3, [sp, #24]
   22290:	f88d 300f 	strb.w	r3, [sp, #15]
   22294:	f88d 3014 	strb.w	r3, [sp, #20]
   22298:	f04f 1302 	mov.w	r3, #131074	; 0x20002
   2229c:	9304      	str	r3, [sp, #16]
   2229e:	b130      	cbz	r0, 222ae <am_hal_ble_blocking_hci_read+0x3a>
   222a0:	6805      	ldr	r5, [r0, #0]
   222a2:	4b1e      	ldr	r3, [pc, #120]	; (2231c <am_hal_ble_blocking_hci_read+0xa8>)
   222a4:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
   222a8:	429d      	cmp	r5, r3
   222aa:	4604      	mov	r4, r0
   222ac:	d002      	beq.n	222b4 <am_hal_ble_blocking_hci_read+0x40>
   222ae:	2000      	movs	r0, #0
   222b0:	b009      	add	sp, #36	; 0x24
   222b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   222b4:	4b1a      	ldr	r3, [pc, #104]	; (22320 <am_hal_ble_blocking_hci_read+0xac>)
   222b6:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   222ba:	460e      	mov	r6, r1
   222bc:	f3c3 11c0 	ubfx	r1, r3, #7, #1
   222c0:	061b      	lsls	r3, r3, #24
   222c2:	4617      	mov	r7, r2
   222c4:	d403      	bmi.n	222ce <am_hal_ble_blocking_hci_read+0x5a>
   222c6:	2f00      	cmp	r7, #0
   222c8:	d0f1      	beq.n	222ae <am_hal_ble_blocking_hci_read+0x3a>
   222ca:	6039      	str	r1, [r7, #0]
   222cc:	e7ef      	b.n	222ae <am_hal_ble_blocking_hci_read+0x3a>
   222ce:	a902      	add	r1, sp, #8
   222d0:	f7ff f90e 	bl	214f0 <am_hal_ble_blocking_transfer.part.0>
   222d4:	2800      	cmp	r0, #0
   222d6:	d1eb      	bne.n	222b0 <am_hal_ble_blocking_hci_read+0x3c>
   222d8:	f89d 1005 	ldrb.w	r1, [sp, #5]
   222dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
   222e0:	9602      	str	r6, [sp, #8]
   222e2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   222e6:	b29b      	uxth	r3, r3
   222e8:	f8ad 3010 	strh.w	r3, [sp, #16]
   222ec:	3b01      	subs	r3, #1
   222ee:	2bff      	cmp	r3, #255	; 0xff
   222f0:	d80f      	bhi.n	22312 <am_hal_ble_blocking_hci_read+0x9e>
   222f2:	6823      	ldr	r3, [r4, #0]
   222f4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   222f8:	42ab      	cmp	r3, r5
   222fa:	d108      	bne.n	2230e <am_hal_ble_blocking_hci_read+0x9a>
   222fc:	a902      	add	r1, sp, #8
   222fe:	4620      	mov	r0, r4
   22300:	f7ff f8f6 	bl	214f0 <am_hal_ble_blocking_transfer.part.0>
   22304:	2800      	cmp	r0, #0
   22306:	d1d3      	bne.n	222b0 <am_hal_ble_blocking_hci_read+0x3c>
   22308:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   2230c:	e7db      	b.n	222c6 <am_hal_ble_blocking_hci_read+0x52>
   2230e:	2002      	movs	r0, #2
   22310:	e7ce      	b.n	222b0 <am_hal_ble_blocking_hci_read+0x3c>
   22312:	2005      	movs	r0, #5
   22314:	e7cc      	b.n	222b0 <am_hal_ble_blocking_hci_read+0x3c>
   22316:	bf00      	nop
   22318:	00023bc8 	.word	0x00023bc8
   2231c:	01775230 	.word	0x01775230
   22320:	5000c000 	.word	0x5000c000

00022324 <am_hal_ble_int_enable>:
   22324:	b128      	cbz	r0, 22332 <am_hal_ble_int_enable+0xe>
   22326:	6803      	ldr	r3, [r0, #0]
   22328:	4a0c      	ldr	r2, [pc, #48]	; (2235c <am_hal_ble_int_enable+0x38>)
   2232a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2232e:	4293      	cmp	r3, r2
   22330:	d001      	beq.n	22336 <am_hal_ble_int_enable+0x12>
   22332:	2002      	movs	r0, #2
   22334:	4770      	bx	lr
   22336:	b510      	push	{r4, lr}
   22338:	b082      	sub	sp, #8
   2233a:	460c      	mov	r4, r1
   2233c:	f001 f814 	bl	23368 <am_hal_interrupt_master_disable>
   22340:	4b07      	ldr	r3, [pc, #28]	; (22360 <am_hal_ble_int_enable+0x3c>)
   22342:	9001      	str	r0, [sp, #4]
   22344:	f8d3 1220 	ldr.w	r1, [r3, #544]	; 0x220
   22348:	4321      	orrs	r1, r4
   2234a:	f8c3 1220 	str.w	r1, [r3, #544]	; 0x220
   2234e:	9801      	ldr	r0, [sp, #4]
   22350:	f001 f80e 	bl	23370 <am_hal_interrupt_master_set>
   22354:	2000      	movs	r0, #0
   22356:	b002      	add	sp, #8
   22358:	bd10      	pop	{r4, pc}
   2235a:	bf00      	nop
   2235c:	01775230 	.word	0x01775230
   22360:	5000c000 	.word	0x5000c000

00022364 <am_hal_ble_int_status>:
   22364:	4b05      	ldr	r3, [pc, #20]	; (2237c <am_hal_ble_int_status+0x18>)
   22366:	b129      	cbz	r1, 22374 <am_hal_ble_int_status+0x10>
   22368:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
   2236c:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
   22370:	4010      	ands	r0, r2
   22372:	4770      	bx	lr
   22374:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
   22378:	4770      	bx	lr
   2237a:	bf00      	nop
   2237c:	5000c000 	.word	0x5000c000

00022380 <am_hal_ble_int_clear>:
   22380:	b150      	cbz	r0, 22398 <am_hal_ble_int_clear+0x18>
   22382:	6803      	ldr	r3, [r0, #0]
   22384:	4a05      	ldr	r2, [pc, #20]	; (2239c <am_hal_ble_int_clear+0x1c>)
   22386:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2238a:	4293      	cmp	r3, r2
   2238c:	d104      	bne.n	22398 <am_hal_ble_int_clear+0x18>
   2238e:	4b04      	ldr	r3, [pc, #16]	; (223a0 <am_hal_ble_int_clear+0x20>)
   22390:	2000      	movs	r0, #0
   22392:	f8c3 1228 	str.w	r1, [r3, #552]	; 0x228
   22396:	4770      	bx	lr
   22398:	2002      	movs	r0, #2
   2239a:	4770      	bx	lr
   2239c:	01775230 	.word	0x01775230
   223a0:	5000c000 	.word	0x5000c000
   223a4:	00000000 	.word	0x00000000

000223a8 <am_hal_ble_plf_reg_read>:
   223a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   223ac:	b092      	sub	sp, #72	; 0x48
   223ae:	0a0c      	lsrs	r4, r1, #8
   223b0:	f88d 1004 	strb.w	r1, [sp, #4]
   223b4:	0c0b      	lsrs	r3, r1, #16
   223b6:	0e09      	lsrs	r1, r1, #24
   223b8:	f88d 3006 	strb.w	r3, [sp, #6]
   223bc:	f88d 1007 	strb.w	r1, [sp, #7]
   223c0:	f88d 4005 	strb.w	r4, [sp, #5]
   223c4:	9c01      	ldr	r4, [sp, #4]
   223c6:	4d2c      	ldr	r5, [pc, #176]	; (22478 <am_hal_ble_plf_reg_read+0xd0>)
   223c8:	492c      	ldr	r1, [pc, #176]	; (2247c <am_hal_ble_plf_reg_read+0xd4>)
   223ca:	e9cd 5402 	strd	r5, r4, [sp, #8]
   223ce:	ed9f 7b28 	vldr	d7, [pc, #160]	; 22470 <am_hal_ble_plf_reg_read+0xc8>
   223d2:	4617      	mov	r7, r2
   223d4:	4a2a      	ldr	r2, [pc, #168]	; (22480 <am_hal_ble_plf_reg_read+0xd8>)
   223d6:	f8d1 8220 	ldr.w	r8, [r1, #544]	; 0x220
   223da:	2300      	movs	r3, #0
   223dc:	ac02      	add	r4, sp, #8
   223de:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
   223e2:	930c      	str	r3, [sp, #48]	; 0x30
   223e4:	4606      	mov	r6, r0
   223e6:	f8c1 3220 	str.w	r3, [r1, #544]	; 0x220
   223ea:	e9cd 3205 	strd	r3, r2, [sp, #20]
   223ee:	e9cd 3308 	strd	r3, r3, [sp, #32]
   223f2:	9404      	str	r4, [sp, #16]
   223f4:	f88d 301c 	strb.w	r3, [sp, #28]
   223f8:	b128      	cbz	r0, 22406 <am_hal_ble_plf_reg_read+0x5e>
   223fa:	6803      	ldr	r3, [r0, #0]
   223fc:	4a21      	ldr	r2, [pc, #132]	; (22484 <am_hal_ble_plf_reg_read+0xdc>)
   223fe:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   22402:	4293      	cmp	r3, r2
   22404:	d029      	beq.n	2245a <am_hal_ble_plf_reg_read+0xb2>
   22406:	4d1d      	ldr	r5, [pc, #116]	; (2247c <am_hal_ble_plf_reg_read+0xd4>)
   22408:	f8d5 3410 	ldr.w	r3, [r5, #1040]	; 0x410
   2240c:	f043 0302 	orr.w	r3, r3, #2
   22410:	f8c5 3410 	str.w	r3, [r5, #1040]	; 0x410
   22414:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   22418:	061a      	lsls	r2, r3, #24
   2241a:	d40a      	bmi.n	22432 <am_hal_ble_plf_reg_read+0x8a>
   2241c:	4c1a      	ldr	r4, [pc, #104]	; (22488 <am_hal_ble_plf_reg_read+0xe0>)
   2241e:	e001      	b.n	22424 <am_hal_ble_plf_reg_read+0x7c>
   22420:	3c01      	subs	r4, #1
   22422:	d01e      	beq.n	22462 <am_hal_ble_plf_reg_read+0xba>
   22424:	2010      	movs	r0, #16
   22426:	f000 fd91 	bl	22f4c <am_hal_flash_delay>
   2242a:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   2242e:	061b      	lsls	r3, r3, #24
   22430:	d5f6      	bpl.n	22420 <am_hal_ble_plf_reg_read+0x78>
   22432:	a90a      	add	r1, sp, #40	; 0x28
   22434:	2200      	movs	r2, #0
   22436:	4630      	mov	r0, r6
   22438:	f7ff ff1c 	bl	22274 <am_hal_ble_blocking_hci_read>
   2243c:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   22440:	990c      	ldr	r1, [sp, #48]	; 0x30
   22442:	4a0e      	ldr	r2, [pc, #56]	; (2247c <am_hal_ble_plf_reg_read+0xd4>)
   22444:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   22448:	2000      	movs	r0, #0
   2244a:	603b      	str	r3, [r7, #0]
   2244c:	f8c2 8228 	str.w	r8, [r2, #552]	; 0x228
   22450:	f8c2 8220 	str.w	r8, [r2, #544]	; 0x220
   22454:	b012      	add	sp, #72	; 0x48
   22456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2245a:	a904      	add	r1, sp, #16
   2245c:	f7ff f848 	bl	214f0 <am_hal_ble_blocking_transfer.part.0>
   22460:	e7d1      	b.n	22406 <am_hal_ble_plf_reg_read+0x5e>
   22462:	480a      	ldr	r0, [pc, #40]	; (2248c <am_hal_ble_plf_reg_read+0xe4>)
   22464:	b012      	add	sp, #72	; 0x48
   22466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2246a:	bf00      	nop
   2246c:	f3af 8000 	nop.w
	...
   22478:	04fd0201 	.word	0x04fd0201
   2247c:	5000c000 	.word	0x5000c000
   22480:	00010008 	.word	0x00010008
   22484:	01775230 	.word	0x01775230
   22488:	0007a120 	.word	0x0007a120
   2248c:	08000004 	.word	0x08000004

00022490 <am_hal_ble_plf_reg_write>:
   22490:	b5f0      	push	{r4, r5, r6, r7, lr}
   22492:	b08d      	sub	sp, #52	; 0x34
   22494:	0a0c      	lsrs	r4, r1, #8
   22496:	0c0b      	lsrs	r3, r1, #16
   22498:	f88d 1004 	strb.w	r1, [sp, #4]
   2249c:	f88d 4005 	strb.w	r4, [sp, #5]
   224a0:	f88d 3006 	strb.w	r3, [sp, #6]
   224a4:	f88d 2008 	strb.w	r2, [sp, #8]
   224a8:	0a14      	lsrs	r4, r2, #8
   224aa:	0c13      	lsrs	r3, r2, #16
   224ac:	0e09      	lsrs	r1, r1, #24
   224ae:	0e12      	lsrs	r2, r2, #24
   224b0:	f88d 4009 	strb.w	r4, [sp, #9]
   224b4:	f88d 300a 	strb.w	r3, [sp, #10]
   224b8:	f88d 200b 	strb.w	r2, [sp, #11]
   224bc:	f88d 1007 	strb.w	r1, [sp, #7]
   224c0:	ab01      	add	r3, sp, #4
   224c2:	4606      	mov	r6, r0
   224c4:	e893 0003 	ldmia.w	r3, {r0, r1}
   224c8:	ab04      	add	r3, sp, #16
   224ca:	e883 0003 	stmia.w	r3, {r0, r1}
   224ce:	4a22      	ldr	r2, [pc, #136]	; (22558 <am_hal_ble_plf_reg_write+0xc8>)
   224d0:	4c22      	ldr	r4, [pc, #136]	; (2255c <am_hal_ble_plf_reg_write+0xcc>)
   224d2:	9403      	str	r4, [sp, #12]
   224d4:	2300      	movs	r3, #0
   224d6:	4922      	ldr	r1, [pc, #136]	; (22560 <am_hal_ble_plf_reg_write+0xd0>)
   224d8:	f8d2 7220 	ldr.w	r7, [r2, #544]	; 0x220
   224dc:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
   224e0:	a803      	add	r0, sp, #12
   224e2:	e9cd 0306 	strd	r0, r3, [sp, #24]
   224e6:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   224ea:	9108      	str	r1, [sp, #32]
   224ec:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   224f0:	b12e      	cbz	r6, 224fe <am_hal_ble_plf_reg_write+0x6e>
   224f2:	6833      	ldr	r3, [r6, #0]
   224f4:	4a1b      	ldr	r2, [pc, #108]	; (22564 <am_hal_ble_plf_reg_write+0xd4>)
   224f6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   224fa:	4293      	cmp	r3, r2
   224fc:	d024      	beq.n	22548 <am_hal_ble_plf_reg_write+0xb8>
   224fe:	4d16      	ldr	r5, [pc, #88]	; (22558 <am_hal_ble_plf_reg_write+0xc8>)
   22500:	f8d5 3410 	ldr.w	r3, [r5, #1040]	; 0x410
   22504:	f043 0302 	orr.w	r3, r3, #2
   22508:	f8c5 3410 	str.w	r3, [r5, #1040]	; 0x410
   2250c:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   22510:	061a      	lsls	r2, r3, #24
   22512:	bf58      	it	pl
   22514:	f24c 3450 	movwpl	r4, #50000	; 0xc350
   22518:	d502      	bpl.n	22520 <am_hal_ble_plf_reg_write+0x90>
   2251a:	e008      	b.n	2252e <am_hal_ble_plf_reg_write+0x9e>
   2251c:	3c01      	subs	r4, #1
   2251e:	d018      	beq.n	22552 <am_hal_ble_plf_reg_write+0xc2>
   22520:	2010      	movs	r0, #16
   22522:	f000 fd13 	bl	22f4c <am_hal_flash_delay>
   22526:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   2252a:	061b      	lsls	r3, r3, #24
   2252c:	d5f6      	bpl.n	2251c <am_hal_ble_plf_reg_write+0x8c>
   2252e:	2200      	movs	r2, #0
   22530:	a906      	add	r1, sp, #24
   22532:	4630      	mov	r0, r6
   22534:	f7ff fe9e 	bl	22274 <am_hal_ble_blocking_hci_read>
   22538:	4b07      	ldr	r3, [pc, #28]	; (22558 <am_hal_ble_plf_reg_write+0xc8>)
   2253a:	2000      	movs	r0, #0
   2253c:	f8c3 7228 	str.w	r7, [r3, #552]	; 0x228
   22540:	f8c3 7220 	str.w	r7, [r3, #544]	; 0x220
   22544:	b00d      	add	sp, #52	; 0x34
   22546:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22548:	a906      	add	r1, sp, #24
   2254a:	4630      	mov	r0, r6
   2254c:	f7fe ffd0 	bl	214f0 <am_hal_ble_blocking_transfer.part.0>
   22550:	e7d5      	b.n	224fe <am_hal_ble_plf_reg_write+0x6e>
   22552:	4805      	ldr	r0, [pc, #20]	; (22568 <am_hal_ble_plf_reg_write+0xd8>)
   22554:	b00d      	add	sp, #52	; 0x34
   22556:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22558:	5000c000 	.word	0x5000c000
   2255c:	08fd0301 	.word	0x08fd0301
   22560:	0001000c 	.word	0x0001000c
   22564:	01775230 	.word	0x01775230
   22568:	08000004 	.word	0x08000004

0002256c <am_hal_ble_transmitter_modex_set>:
   2256c:	b530      	push	{r4, r5, lr}
   2256e:	b085      	sub	sp, #20
   22570:	4604      	mov	r4, r0
   22572:	2300      	movs	r3, #0
   22574:	466a      	mov	r2, sp
   22576:	460d      	mov	r5, r1
   22578:	4927      	ldr	r1, [pc, #156]	; (22618 <am_hal_ble_transmitter_modex_set+0xac>)
   2257a:	9303      	str	r3, [sp, #12]
   2257c:	f7ff ff14 	bl	223a8 <am_hal_ble_plf_reg_read>
   22580:	4925      	ldr	r1, [pc, #148]	; (22618 <am_hal_ble_transmitter_modex_set+0xac>)
   22582:	f04f 32ff 	mov.w	r2, #4294967295
   22586:	4620      	mov	r0, r4
   22588:	f7ff ff82 	bl	22490 <am_hal_ble_plf_reg_write>
   2258c:	aa03      	add	r2, sp, #12
   2258e:	4923      	ldr	r1, [pc, #140]	; (2261c <am_hal_ble_transmitter_modex_set+0xb0>)
   22590:	4620      	mov	r0, r4
   22592:	f7ff ff09 	bl	223a8 <am_hal_ble_plf_reg_read>
   22596:	9b03      	ldr	r3, [sp, #12]
   22598:	aa02      	add	r2, sp, #8
   2259a:	f043 0308 	orr.w	r3, r3, #8
   2259e:	f04f 41a4 	mov.w	r1, #1375731712	; 0x52000000
   225a2:	4620      	mov	r0, r4
   225a4:	9303      	str	r3, [sp, #12]
   225a6:	f7ff feff 	bl	223a8 <am_hal_ble_plf_reg_read>
   225aa:	9a02      	ldr	r2, [sp, #8]
   225ac:	f04f 41a4 	mov.w	r1, #1375731712	; 0x52000000
   225b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   225b4:	4620      	mov	r0, r4
   225b6:	9202      	str	r2, [sp, #8]
   225b8:	f7ff ff6a 	bl	22490 <am_hal_ble_plf_reg_write>
   225bc:	aa01      	add	r2, sp, #4
   225be:	4918      	ldr	r1, [pc, #96]	; (22620 <am_hal_ble_transmitter_modex_set+0xb4>)
   225c0:	4620      	mov	r0, r4
   225c2:	f7ff fef1 	bl	223a8 <am_hal_ble_plf_reg_read>
   225c6:	9a01      	ldr	r2, [sp, #4]
   225c8:	4915      	ldr	r1, [pc, #84]	; (22620 <am_hal_ble_transmitter_modex_set+0xb4>)
   225ca:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   225ce:	f042 0208 	orr.w	r2, r2, #8
   225d2:	4620      	mov	r0, r4
   225d4:	f7ff ff5c 	bl	22490 <am_hal_ble_plf_reg_write>
   225d8:	006a      	lsls	r2, r5, #1
   225da:	4912      	ldr	r1, [pc, #72]	; (22624 <am_hal_ble_transmitter_modex_set+0xb8>)
   225dc:	f042 0201 	orr.w	r2, r2, #1
   225e0:	4620      	mov	r0, r4
   225e2:	f7ff ff55 	bl	22490 <am_hal_ble_plf_reg_write>
   225e6:	490d      	ldr	r1, [pc, #52]	; (2261c <am_hal_ble_transmitter_modex_set+0xb0>)
   225e8:	9a03      	ldr	r2, [sp, #12]
   225ea:	4620      	mov	r0, r4
   225ec:	f7ff ff50 	bl	22490 <am_hal_ble_plf_reg_write>
   225f0:	4b0d      	ldr	r3, [pc, #52]	; (22628 <am_hal_ble_transmitter_modex_set+0xbc>)
   225f2:	68db      	ldr	r3, [r3, #12]
   225f4:	b2db      	uxtb	r3, r3
   225f6:	2b21      	cmp	r3, #33	; 0x21
   225f8:	bf0c      	ite	eq
   225fa:	490c      	ldreq	r1, [pc, #48]	; (2262c <am_hal_ble_transmitter_modex_set+0xc0>)
   225fc:	490c      	ldrne	r1, [pc, #48]	; (22630 <am_hal_ble_transmitter_modex_set+0xc4>)
   225fe:	462a      	mov	r2, r5
   22600:	4620      	mov	r0, r4
   22602:	f7ff ff45 	bl	22490 <am_hal_ble_plf_reg_write>
   22606:	9a00      	ldr	r2, [sp, #0]
   22608:	4903      	ldr	r1, [pc, #12]	; (22618 <am_hal_ble_transmitter_modex_set+0xac>)
   2260a:	4620      	mov	r0, r4
   2260c:	f7ff ff40 	bl	22490 <am_hal_ble_plf_reg_write>
   22610:	2000      	movs	r0, #0
   22612:	b005      	add	sp, #20
   22614:	bd30      	pop	{r4, r5, pc}
   22616:	bf00      	nop
   22618:	43000004 	.word	0x43000004
   2261c:	52000008 	.word	0x52000008
   22620:	45800070 	.word	0x45800070
   22624:	52000014 	.word	0x52000014
   22628:	40020000 	.word	0x40020000
   2262c:	20006874 	.word	0x20006874
   22630:	20006070 	.word	0x20006070

00022634 <am_hal_ble_patch_complete.part.0>:
   22634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22638:	b08c      	sub	sp, #48	; 0x30
   2263a:	2300      	movs	r3, #0
   2263c:	2201      	movs	r2, #1
   2263e:	e9cd 3307 	strd	r3, r3, [sp, #28]
   22642:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   22646:	930b      	str	r3, [sp, #44]	; 0x2c
   22648:	f8ad 3004 	strh.w	r3, [sp, #4]
   2264c:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   22650:	4b7e      	ldr	r3, [pc, #504]	; (2284c <am_hal_ble_patch_complete.part.0+0x218>)
   22652:	f8cd d018 	str.w	sp, [sp, #24]
   22656:	2206      	movs	r2, #6
   22658:	f8ad 2020 	strh.w	r2, [sp, #32]
   2265c:	9300      	str	r3, [sp, #0]
   2265e:	4604      	mov	r4, r0
   22660:	2800      	cmp	r0, #0
   22662:	f000 80ec 	beq.w	2283e <am_hal_ble_patch_complete.part.0+0x20a>
   22666:	4e7a      	ldr	r6, [pc, #488]	; (22850 <am_hal_ble_patch_complete.part.0+0x21c>)
   22668:	f241 3588 	movw	r5, #5000	; 0x1388
   2266c:	6823      	ldr	r3, [r4, #0]
   2266e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   22672:	42b3      	cmp	r3, r6
   22674:	a906      	add	r1, sp, #24
   22676:	4620      	mov	r0, r4
   22678:	d107      	bne.n	2268a <am_hal_ble_patch_complete.part.0+0x56>
   2267a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   2267e:	b123      	cbz	r3, 2268a <am_hal_ble_patch_complete.part.0+0x56>
   22680:	f7fe ff36 	bl	214f0 <am_hal_ble_blocking_transfer.part.0>
   22684:	b108      	cbz	r0, 2268a <am_hal_ble_patch_complete.part.0+0x56>
   22686:	3d01      	subs	r5, #1
   22688:	d1f0      	bne.n	2266c <am_hal_ble_patch_complete.part.0+0x38>
   2268a:	4b72      	ldr	r3, [pc, #456]	; (22854 <am_hal_ble_patch_complete.part.0+0x220>)
   2268c:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   22690:	061b      	lsls	r3, r3, #24
   22692:	d458      	bmi.n	22746 <am_hal_ble_patch_complete.part.0+0x112>
   22694:	4d70      	ldr	r5, [pc, #448]	; (22858 <am_hal_ble_patch_complete.part.0+0x224>)
   22696:	4e6f      	ldr	r6, [pc, #444]	; (22854 <am_hal_ble_patch_complete.part.0+0x220>)
   22698:	2010      	movs	r0, #16
   2269a:	f000 fc57 	bl	22f4c <am_hal_flash_delay>
   2269e:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   226a2:	061f      	lsls	r7, r3, #24
   226a4:	d406      	bmi.n	226b4 <am_hal_ble_patch_complete.part.0+0x80>
   226a6:	3d01      	subs	r5, #1
   226a8:	d1f6      	bne.n	22698 <am_hal_ble_patch_complete.part.0+0x64>
   226aa:	4d6c      	ldr	r5, [pc, #432]	; (2285c <am_hal_ble_patch_complete.part.0+0x228>)
   226ac:	4628      	mov	r0, r5
   226ae:	b00c      	add	sp, #48	; 0x30
   226b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   226b4:	2302      	movs	r3, #2
   226b6:	f10d 080c 	add.w	r8, sp, #12
   226ba:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   226be:	f8cd 8018 	str.w	r8, [sp, #24]
   226c2:	f8ad 3020 	strh.w	r3, [sp, #32]
   226c6:	2c00      	cmp	r4, #0
   226c8:	d038      	beq.n	2273c <am_hal_ble_patch_complete.part.0+0x108>
   226ca:	6826      	ldr	r6, [r4, #0]
   226cc:	4b60      	ldr	r3, [pc, #384]	; (22850 <am_hal_ble_patch_complete.part.0+0x21c>)
   226ce:	f026 467e 	bic.w	r6, r6, #4261412864	; 0xfe000000
   226d2:	429e      	cmp	r6, r3
   226d4:	d132      	bne.n	2273c <am_hal_ble_patch_complete.part.0+0x108>
   226d6:	a906      	add	r1, sp, #24
   226d8:	4620      	mov	r0, r4
   226da:	f7fe ff09 	bl	214f0 <am_hal_ble_blocking_transfer.part.0>
   226de:	4605      	mov	r5, r0
   226e0:	bb68      	cbnz	r0, 2273e <am_hal_ble_patch_complete.part.0+0x10a>
   226e2:	f89d 200d 	ldrb.w	r2, [sp, #13]
   226e6:	2aee      	cmp	r2, #238	; 0xee
   226e8:	d037      	beq.n	2275a <am_hal_ble_patch_complete.part.0+0x126>
   226ea:	f89d 300c 	ldrb.w	r3, [sp, #12]
   226ee:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   226f2:	6822      	ldr	r2, [r4, #0]
   226f4:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   226f8:	b29b      	uxth	r3, r3
   226fa:	42b2      	cmp	r2, r6
   226fc:	f8ad 3020 	strh.w	r3, [sp, #32]
   22700:	d11c      	bne.n	2273c <am_hal_ble_patch_complete.part.0+0x108>
   22702:	b133      	cbz	r3, 22712 <am_hal_ble_patch_complete.part.0+0xde>
   22704:	a906      	add	r1, sp, #24
   22706:	4620      	mov	r0, r4
   22708:	f7fe fef2 	bl	214f0 <am_hal_ble_blocking_transfer.part.0>
   2270c:	2800      	cmp	r0, #0
   2270e:	f040 8094 	bne.w	2283a <am_hal_ble_patch_complete.part.0+0x206>
   22712:	2301      	movs	r3, #1
   22714:	4628      	mov	r0, r5
   22716:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
   2271a:	b00c      	add	sp, #48	; 0x30
   2271c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22720:	6826      	ldr	r6, [r4, #0]
   22722:	4b4b      	ldr	r3, [pc, #300]	; (22850 <am_hal_ble_patch_complete.part.0+0x21c>)
   22724:	f8cd 8018 	str.w	r8, [sp, #24]
   22728:	f026 467e 	bic.w	r6, r6, #4261412864	; 0xfe000000
   2272c:	2702      	movs	r7, #2
   2272e:	2209      	movs	r2, #9
   22730:	429e      	cmp	r6, r3
   22732:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
   22736:	f8ad 2020 	strh.w	r2, [sp, #32]
   2273a:	d054      	beq.n	227e6 <am_hal_ble_patch_complete.part.0+0x1b2>
   2273c:	2502      	movs	r5, #2
   2273e:	4628      	mov	r0, r5
   22740:	b00c      	add	sp, #48	; 0x30
   22742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22746:	2302      	movs	r3, #2
   22748:	f10d 080c 	add.w	r8, sp, #12
   2274c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   22750:	f8cd 8018 	str.w	r8, [sp, #24]
   22754:	f8ad 3020 	strh.w	r3, [sp, #32]
   22758:	e7b7      	b.n	226ca <am_hal_ble_patch_complete.part.0+0x96>
   2275a:	6827      	ldr	r7, [r4, #0]
   2275c:	f027 477e 	bic.w	r7, r7, #4261412864	; 0xfe000000
   22760:	2303      	movs	r3, #3
   22762:	42b7      	cmp	r7, r6
   22764:	f8ad 3020 	strh.w	r3, [sp, #32]
   22768:	d1e8      	bne.n	2273c <am_hal_ble_patch_complete.part.0+0x108>
   2276a:	a906      	add	r1, sp, #24
   2276c:	4620      	mov	r0, r4
   2276e:	f7fe febf 	bl	214f0 <am_hal_ble_blocking_transfer.part.0>
   22772:	4605      	mov	r5, r0
   22774:	2800      	cmp	r0, #0
   22776:	d1e2      	bne.n	2273e <am_hal_ble_patch_complete.part.0+0x10a>
   22778:	2301      	movs	r3, #1
   2277a:	e9cd 0007 	strd	r0, r0, [sp, #28]
   2277e:	f88d 3004 	strb.w	r3, [sp, #4]
   22782:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   22786:	f103 73fe 	add.w	r3, r3, #33292288	; 0x1fc0000
   2278a:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
   2278e:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
   22792:	9300      	str	r3, [sp, #0]
   22794:	2305      	movs	r3, #5
   22796:	f8cd d018 	str.w	sp, [sp, #24]
   2279a:	900b      	str	r0, [sp, #44]	; 0x2c
   2279c:	f241 3688 	movw	r6, #5000	; 0x1388
   227a0:	f8ad 3020 	strh.w	r3, [sp, #32]
   227a4:	6823      	ldr	r3, [r4, #0]
   227a6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   227aa:	42bb      	cmp	r3, r7
   227ac:	a906      	add	r1, sp, #24
   227ae:	4620      	mov	r0, r4
   227b0:	d1c4      	bne.n	2273c <am_hal_ble_patch_complete.part.0+0x108>
   227b2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   227b6:	b133      	cbz	r3, 227c6 <am_hal_ble_patch_complete.part.0+0x192>
   227b8:	f7fe fe9a 	bl	214f0 <am_hal_ble_blocking_transfer.part.0>
   227bc:	4605      	mov	r5, r0
   227be:	b110      	cbz	r0, 227c6 <am_hal_ble_patch_complete.part.0+0x192>
   227c0:	3e01      	subs	r6, #1
   227c2:	d1ef      	bne.n	227a4 <am_hal_ble_patch_complete.part.0+0x170>
   227c4:	e7bb      	b.n	2273e <am_hal_ble_patch_complete.part.0+0x10a>
   227c6:	4e23      	ldr	r6, [pc, #140]	; (22854 <am_hal_ble_patch_complete.part.0+0x220>)
   227c8:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   227cc:	0618      	lsls	r0, r3, #24
   227ce:	d4a7      	bmi.n	22720 <am_hal_ble_patch_complete.part.0+0xec>
   227d0:	4d21      	ldr	r5, [pc, #132]	; (22858 <am_hal_ble_patch_complete.part.0+0x224>)
   227d2:	2010      	movs	r0, #16
   227d4:	f000 fbba 	bl	22f4c <am_hal_flash_delay>
   227d8:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   227dc:	0619      	lsls	r1, r3, #24
   227de:	d49f      	bmi.n	22720 <am_hal_ble_patch_complete.part.0+0xec>
   227e0:	3d01      	subs	r5, #1
   227e2:	d1f6      	bne.n	227d2 <am_hal_ble_patch_complete.part.0+0x19e>
   227e4:	e761      	b.n	226aa <am_hal_ble_patch_complete.part.0+0x76>
   227e6:	a906      	add	r1, sp, #24
   227e8:	4620      	mov	r0, r4
   227ea:	f7fe fe81 	bl	214f0 <am_hal_ble_blocking_transfer.part.0>
   227ee:	4605      	mov	r5, r0
   227f0:	2800      	cmp	r0, #0
   227f2:	d1a4      	bne.n	2273e <am_hal_ble_patch_complete.part.0+0x10a>
   227f4:	6823      	ldr	r3, [r4, #0]
   227f6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   227fa:	42b3      	cmp	r3, r6
   227fc:	d106      	bne.n	2280c <am_hal_ble_patch_complete.part.0+0x1d8>
   227fe:	4b15      	ldr	r3, [pc, #84]	; (22854 <am_hal_ble_patch_complete.part.0+0x220>)
   22800:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   22804:	f367 0283 	bfi	r2, r7, #2, #2
   22808:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   2280c:	2301      	movs	r3, #1
   2280e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
   22812:	4813      	ldr	r0, [pc, #76]	; (22860 <am_hal_ble_patch_complete.part.0+0x22c>)
   22814:	f000 fb9a 	bl	22f4c <am_hal_flash_delay>
   22818:	4b12      	ldr	r3, [pc, #72]	; (22864 <am_hal_ble_patch_complete.part.0+0x230>)
   2281a:	4a13      	ldr	r2, [pc, #76]	; (22868 <am_hal_ble_patch_complete.part.0+0x234>)
   2281c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
   22820:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
   22824:	4291      	cmp	r1, r2
   22826:	d18a      	bne.n	2273e <am_hal_ble_patch_complete.part.0+0x10a>
   22828:	b2d9      	uxtb	r1, r3
   2282a:	f1a1 0320 	sub.w	r3, r1, #32
   2282e:	2b30      	cmp	r3, #48	; 0x30
   22830:	d885      	bhi.n	2273e <am_hal_ble_patch_complete.part.0+0x10a>
   22832:	4620      	mov	r0, r4
   22834:	f7ff fe9a 	bl	2256c <am_hal_ble_transmitter_modex_set>
   22838:	e781      	b.n	2273e <am_hal_ble_patch_complete.part.0+0x10a>
   2283a:	4605      	mov	r5, r0
   2283c:	e77f      	b.n	2273e <am_hal_ble_patch_complete.part.0+0x10a>
   2283e:	4b05      	ldr	r3, [pc, #20]	; (22854 <am_hal_ble_patch_complete.part.0+0x220>)
   22840:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   22844:	061a      	lsls	r2, r3, #24
   22846:	f57f af25 	bpl.w	22694 <am_hal_ble_patch_complete.part.0+0x60>
   2284a:	e777      	b.n	2273c <am_hal_ble_patch_complete.part.0+0x108>
   2284c:	02f1ee01 	.word	0x02f1ee01
   22850:	01775230 	.word	0x01775230
   22854:	5000c000 	.word	0x5000c000
   22858:	000186a0 	.word	0x000186a0
   2285c:	08000004 	.word	0x08000004
   22860:	007a1200 	.word	0x007a1200
   22864:	50023000 	.word	0x50023000
   22868:	18240600 	.word	0x18240600

0002286c <am_hal_ble_boot>:
   2286c:	2800      	cmp	r0, #0
   2286e:	d06c      	beq.n	2294a <am_hal_ble_boot+0xde>
   22870:	b530      	push	{r4, r5, lr}
   22872:	6803      	ldr	r3, [r0, #0]
   22874:	4a36      	ldr	r2, [pc, #216]	; (22950 <am_hal_ble_boot+0xe4>)
   22876:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2287a:	4293      	cmp	r3, r2
   2287c:	b083      	sub	sp, #12
   2287e:	4604      	mov	r4, r0
   22880:	d137      	bne.n	228f2 <am_hal_ble_boot+0x86>
   22882:	7a03      	ldrb	r3, [r0, #8]
   22884:	b1f3      	cbz	r3, 228c4 <am_hal_ble_boot+0x58>
   22886:	4a33      	ldr	r2, [pc, #204]	; (22954 <am_hal_ble_boot+0xe8>)
   22888:	68d3      	ldr	r3, [r2, #12]
   2288a:	b2db      	uxtb	r3, r3
   2288c:	2b11      	cmp	r3, #17
   2288e:	d039      	beq.n	22904 <am_hal_ble_boot+0x98>
   22890:	68d3      	ldr	r3, [r2, #12]
   22892:	b2db      	uxtb	r3, r3
   22894:	2b12      	cmp	r3, #18
   22896:	d035      	beq.n	22904 <am_hal_ble_boot+0x98>
   22898:	4620      	mov	r0, r4
   2289a:	f7ff fc99 	bl	221d0 <am_hal_ble_default_trim_set_ramcode>
   2289e:	b108      	cbz	r0, 228a4 <am_hal_ble_boot+0x38>
   228a0:	b003      	add	sp, #12
   228a2:	bd30      	pop	{r4, r5, pc}
   228a4:	4620      	mov	r0, r4
   228a6:	f7ff fc4d 	bl	22144 <am_hal_ble_default_patch_apply>
   228aa:	2800      	cmp	r0, #0
   228ac:	d1f8      	bne.n	228a0 <am_hal_ble_boot+0x34>
   228ae:	6823      	ldr	r3, [r4, #0]
   228b0:	4a27      	ldr	r2, [pc, #156]	; (22950 <am_hal_ble_boot+0xe4>)
   228b2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   228b6:	4293      	cmp	r3, r2
   228b8:	d11b      	bne.n	228f2 <am_hal_ble_boot+0x86>
   228ba:	4620      	mov	r0, r4
   228bc:	f7ff feba 	bl	22634 <am_hal_ble_patch_complete.part.0>
   228c0:	2800      	cmp	r0, #0
   228c2:	d1ed      	bne.n	228a0 <am_hal_ble_boot+0x34>
   228c4:	4b23      	ldr	r3, [pc, #140]	; (22954 <am_hal_ble_boot+0xe8>)
   228c6:	f04f 32ff 	mov.w	r2, #4294967295
   228ca:	9201      	str	r2, [sp, #4]
   228cc:	68db      	ldr	r3, [r3, #12]
   228ce:	b2db      	uxtb	r3, r3
   228d0:	2b21      	cmp	r3, #33	; 0x21
   228d2:	d011      	beq.n	228f8 <am_hal_ble_boot+0x8c>
   228d4:	4920      	ldr	r1, [pc, #128]	; (22958 <am_hal_ble_boot+0xec>)
   228d6:	aa01      	add	r2, sp, #4
   228d8:	4620      	mov	r0, r4
   228da:	f7ff fd65 	bl	223a8 <am_hal_ble_plf_reg_read>
   228de:	9b01      	ldr	r3, [sp, #4]
   228e0:	481e      	ldr	r0, [pc, #120]	; (2295c <am_hal_ble_boot+0xf0>)
   228e2:	f5a3 43f6 	sub.w	r3, r3, #31488	; 0x7b00
   228e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   228ea:	bf98      	it	ls
   228ec:	2000      	movls	r0, #0
   228ee:	b003      	add	sp, #12
   228f0:	bd30      	pop	{r4, r5, pc}
   228f2:	2002      	movs	r0, #2
   228f4:	b003      	add	sp, #12
   228f6:	bd30      	pop	{r4, r5, pc}
   228f8:	4919      	ldr	r1, [pc, #100]	; (22960 <am_hal_ble_boot+0xf4>)
   228fa:	aa01      	add	r2, sp, #4
   228fc:	4620      	mov	r0, r4
   228fe:	f7ff fd53 	bl	223a8 <am_hal_ble_plf_reg_read>
   22902:	e7ec      	b.n	228de <am_hal_ble_boot+0x72>
   22904:	4b17      	ldr	r3, [pc, #92]	; (22964 <am_hal_ble_boot+0xf8>)
   22906:	681b      	ldr	r3, [r3, #0]
   22908:	6819      	ldr	r1, [r3, #0]
   2290a:	684b      	ldr	r3, [r1, #4]
   2290c:	68ca      	ldr	r2, [r1, #12]
   2290e:	b183      	cbz	r3, 22932 <am_hal_ble_boot+0xc6>
   22910:	3b01      	subs	r3, #1
   22912:	4d15      	ldr	r5, [pc, #84]	; (22968 <am_hal_ble_boot+0xfc>)
   22914:	eb02 0c03 	add.w	ip, r2, r3
   22918:	1e50      	subs	r0, r2, #1
   2291a:	2300      	movs	r3, #0
   2291c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   22920:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
   22924:	4560      	cmp	r0, ip
   22926:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
   2292a:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
   2292e:	b29b      	uxth	r3, r3
   22930:	d1f4      	bne.n	2291c <am_hal_ble_boot+0xb0>
   22932:	608b      	str	r3, [r1, #8]
   22934:	4620      	mov	r0, r4
   22936:	f7ff f9e7 	bl	21d08 <am_hal_ble_patch_apply>
   2293a:	2800      	cmp	r0, #0
   2293c:	d1b0      	bne.n	228a0 <am_hal_ble_boot+0x34>
   2293e:	4620      	mov	r0, r4
   22940:	f7ff fb76 	bl	22030 <am_hal_ble_patch_copy_end_apply>
   22944:	2800      	cmp	r0, #0
   22946:	d0a7      	beq.n	22898 <am_hal_ble_boot+0x2c>
   22948:	e7aa      	b.n	228a0 <am_hal_ble_boot+0x34>
   2294a:	2002      	movs	r0, #2
   2294c:	4770      	bx	lr
   2294e:	bf00      	nop
   22950:	01775230 	.word	0x01775230
   22954:	40020000 	.word	0x40020000
   22958:	20006054 	.word	0x20006054
   2295c:	0800000b 	.word	0x0800000b
   22960:	20006858 	.word	0x20006858
   22964:	10002e2c 	.word	0x10002e2c
   22968:	00025aa0 	.word	0x00025aa0

0002296c <am_hal_ble_tx_power_set>:
   2296c:	b530      	push	{r4, r5, lr}
   2296e:	b083      	sub	sp, #12
   22970:	4604      	mov	r4, r0
   22972:	2300      	movs	r3, #0
   22974:	460d      	mov	r5, r1
   22976:	466a      	mov	r2, sp
   22978:	491a      	ldr	r1, [pc, #104]	; (229e4 <am_hal_ble_tx_power_set+0x78>)
   2297a:	9301      	str	r3, [sp, #4]
   2297c:	f7ff fd14 	bl	223a8 <am_hal_ble_plf_reg_read>
   22980:	4918      	ldr	r1, [pc, #96]	; (229e4 <am_hal_ble_tx_power_set+0x78>)
   22982:	f04f 32ff 	mov.w	r2, #4294967295
   22986:	4620      	mov	r0, r4
   22988:	f7ff fd82 	bl	22490 <am_hal_ble_plf_reg_write>
   2298c:	042a      	lsls	r2, r5, #16
   2298e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   22992:	4915      	ldr	r1, [pc, #84]	; (229e8 <am_hal_ble_tx_power_set+0x7c>)
   22994:	f042 0208 	orr.w	r2, r2, #8
   22998:	4620      	mov	r0, r4
   2299a:	f7ff fd79 	bl	22490 <am_hal_ble_plf_reg_write>
   2299e:	4911      	ldr	r1, [pc, #68]	; (229e4 <am_hal_ble_tx_power_set+0x78>)
   229a0:	9a00      	ldr	r2, [sp, #0]
   229a2:	4620      	mov	r0, r4
   229a4:	f7ff fd74 	bl	22490 <am_hal_ble_plf_reg_write>
   229a8:	4b10      	ldr	r3, [pc, #64]	; (229ec <am_hal_ble_tx_power_set+0x80>)
   229aa:	68db      	ldr	r3, [r3, #12]
   229ac:	b2db      	uxtb	r3, r3
   229ae:	2b21      	cmp	r3, #33	; 0x21
   229b0:	bf0c      	ite	eq
   229b2:	490f      	ldreq	r1, [pc, #60]	; (229f0 <am_hal_ble_tx_power_set+0x84>)
   229b4:	490f      	ldrne	r1, [pc, #60]	; (229f4 <am_hal_ble_tx_power_set+0x88>)
   229b6:	aa01      	add	r2, sp, #4
   229b8:	4620      	mov	r0, r4
   229ba:	f7ff fcf5 	bl	223a8 <am_hal_ble_plf_reg_read>
   229be:	9b01      	ldr	r3, [sp, #4]
   229c0:	490a      	ldr	r1, [pc, #40]	; (229ec <am_hal_ble_tx_power_set+0x80>)
   229c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   229c6:	ea43 0205 	orr.w	r2, r3, r5
   229ca:	9201      	str	r2, [sp, #4]
   229cc:	68cb      	ldr	r3, [r1, #12]
   229ce:	b2db      	uxtb	r3, r3
   229d0:	2b21      	cmp	r3, #33	; 0x21
   229d2:	bf0c      	ite	eq
   229d4:	4906      	ldreq	r1, [pc, #24]	; (229f0 <am_hal_ble_tx_power_set+0x84>)
   229d6:	4907      	ldrne	r1, [pc, #28]	; (229f4 <am_hal_ble_tx_power_set+0x88>)
   229d8:	4620      	mov	r0, r4
   229da:	f7ff fd59 	bl	22490 <am_hal_ble_plf_reg_write>
   229de:	2000      	movs	r0, #0
   229e0:	b003      	add	sp, #12
   229e2:	bd30      	pop	{r4, r5, pc}
   229e4:	43000004 	.word	0x43000004
   229e8:	52400018 	.word	0x52400018
   229ec:	40020000 	.word	0x40020000
   229f0:	20006838 	.word	0x20006838
   229f4:	20006038 	.word	0x20006038

000229f8 <am_hal_cachectrl_config>:
   229f8:	b530      	push	{r4, r5, lr}
   229fa:	b083      	sub	sp, #12
   229fc:	4604      	mov	r4, r0
   229fe:	f000 fcb3 	bl	23368 <am_hal_interrupt_master_disable>
   22a02:	4d0e      	ldr	r5, [pc, #56]	; (22a3c <am_hal_cachectrl_config+0x44>)
   22a04:	9001      	str	r0, [sp, #4]
   22a06:	682b      	ldr	r3, [r5, #0]
   22a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   22a0c:	602b      	str	r3, [r5, #0]
   22a0e:	9801      	ldr	r0, [sp, #4]
   22a10:	f000 fcae 	bl	23370 <am_hal_interrupt_master_set>
   22a14:	7863      	ldrb	r3, [r4, #1]
   22a16:	7822      	ldrb	r2, [r4, #0]
   22a18:	78a1      	ldrb	r1, [r4, #2]
   22a1a:	021b      	lsls	r3, r3, #8
   22a1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
   22a20:	0112      	lsls	r2, r2, #4
   22a22:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
   22a26:	b2d2      	uxtb	r2, r2
   22a28:	4313      	orrs	r3, r2
   22a2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   22a2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   22a32:	2000      	movs	r0, #0
   22a34:	602b      	str	r3, [r5, #0]
   22a36:	b003      	add	sp, #12
   22a38:	bd30      	pop	{r4, r5, pc}
   22a3a:	bf00      	nop
   22a3c:	40018000 	.word	0x40018000

00022a40 <am_hal_cachectrl_enable>:
   22a40:	4a03      	ldr	r2, [pc, #12]	; (22a50 <am_hal_cachectrl_enable+0x10>)
   22a42:	6813      	ldr	r3, [r2, #0]
   22a44:	f043 0301 	orr.w	r3, r3, #1
   22a48:	2000      	movs	r0, #0
   22a4a:	6013      	str	r3, [r2, #0]
   22a4c:	4770      	bx	lr
   22a4e:	bf00      	nop
   22a50:	40018000 	.word	0x40018000

00022a54 <am_hal_cachectrl_control>:
   22a54:	b510      	push	{r4, lr}
   22a56:	3801      	subs	r0, #1
   22a58:	b08e      	sub	sp, #56	; 0x38
   22a5a:	2810      	cmp	r0, #16
   22a5c:	f200 815e 	bhi.w	22d1c <am_hal_cachectrl_control+0x2c8>
   22a60:	e8df f010 	tbh	[pc, r0, lsl #1]
   22a64:	00360018 	.word	0x00360018
   22a68:	0040003d 	.word	0x0040003d
   22a6c:	00450043 	.word	0x00450043
   22a70:	0011001a 	.word	0x0011001a
   22a74:	00540047 	.word	0x00540047
   22a78:	009a0061 	.word	0x009a0061
   22a7c:	010c00d3 	.word	0x010c00d3
   22a80:	013f0126 	.word	0x013f0126
   22a84:	001d      	.short	0x001d
   22a86:	f44f 7300 	mov.w	r3, #512	; 0x200
   22a8a:	4aac      	ldr	r2, [pc, #688]	; (22d3c <am_hal_cachectrl_control+0x2e8>)
   22a8c:	2000      	movs	r0, #0
   22a8e:	6093      	str	r3, [r2, #8]
   22a90:	b00e      	add	sp, #56	; 0x38
   22a92:	bd10      	pop	{r4, pc}
   22a94:	2301      	movs	r3, #1
   22a96:	e7f8      	b.n	22a8a <am_hal_cachectrl_control+0x36>
   22a98:	f44f 6380 	mov.w	r3, #1024	; 0x400
   22a9c:	e7f5      	b.n	22a8a <am_hal_cachectrl_control+0x36>
   22a9e:	2900      	cmp	r1, #0
   22aa0:	f000 813c 	beq.w	22d1c <am_hal_cachectrl_control+0x2c8>
   22aa4:	684a      	ldr	r2, [r1, #4]
   22aa6:	48a6      	ldr	r0, [pc, #664]	; (22d40 <am_hal_cachectrl_control+0x2ec>)
   22aa8:	4202      	tst	r2, r0
   22aaa:	f040 8137 	bne.w	22d1c <am_hal_cachectrl_control+0x2c8>
   22aae:	688b      	ldr	r3, [r1, #8]
   22ab0:	4018      	ands	r0, r3
   22ab2:	f040 8133 	bne.w	22d1c <am_hal_cachectrl_control+0x2c8>
   22ab6:	780c      	ldrb	r4, [r1, #0]
   22ab8:	2c00      	cmp	r4, #0
   22aba:	f040 8133 	bne.w	22d24 <am_hal_cachectrl_control+0x2d0>
   22abe:	4c9f      	ldr	r4, [pc, #636]	; (22d3c <am_hal_cachectrl_control+0x2e8>)
   22ac0:	7849      	ldrb	r1, [r1, #1]
   22ac2:	6122      	str	r2, [r4, #16]
   22ac4:	6163      	str	r3, [r4, #20]
   22ac6:	6823      	ldr	r3, [r4, #0]
   22ac8:	f361 0382 	bfi	r3, r1, #2, #1
   22acc:	6023      	str	r3, [r4, #0]
   22ace:	e7df      	b.n	22a90 <am_hal_cachectrl_control+0x3c>
   22ad0:	4b9a      	ldr	r3, [pc, #616]	; (22d3c <am_hal_cachectrl_control+0x2e8>)
   22ad2:	681b      	ldr	r3, [r3, #0]
   22ad4:	01db      	lsls	r3, r3, #7
   22ad6:	f140 811f 	bpl.w	22d18 <am_hal_cachectrl_control+0x2c4>
   22ada:	2302      	movs	r3, #2
   22adc:	e7d5      	b.n	22a8a <am_hal_cachectrl_control+0x36>
   22ade:	f44f 6388 	mov.w	r3, #1088	; 0x440
   22ae2:	e7d2      	b.n	22a8a <am_hal_cachectrl_control+0x36>
   22ae4:	f44f 7308 	mov.w	r3, #544	; 0x220
   22ae8:	e7cf      	b.n	22a8a <am_hal_cachectrl_control+0x36>
   22aea:	2340      	movs	r3, #64	; 0x40
   22aec:	e7cd      	b.n	22a8a <am_hal_cachectrl_control+0x36>
   22aee:	2320      	movs	r3, #32
   22af0:	e7cb      	b.n	22a8a <am_hal_cachectrl_control+0x36>
   22af2:	f000 fc39 	bl	23368 <am_hal_interrupt_master_disable>
   22af6:	4a91      	ldr	r2, [pc, #580]	; (22d3c <am_hal_cachectrl_control+0x2e8>)
   22af8:	9000      	str	r0, [sp, #0]
   22afa:	6813      	ldr	r3, [r2, #0]
   22afc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   22b00:	6013      	str	r3, [r2, #0]
   22b02:	9800      	ldr	r0, [sp, #0]
   22b04:	f000 fc34 	bl	23370 <am_hal_interrupt_master_set>
   22b08:	2000      	movs	r0, #0
   22b0a:	e7c1      	b.n	22a90 <am_hal_cachectrl_control+0x3c>
   22b0c:	f000 fc2c 	bl	23368 <am_hal_interrupt_master_disable>
   22b10:	4a8a      	ldr	r2, [pc, #552]	; (22d3c <am_hal_cachectrl_control+0x2e8>)
   22b12:	9001      	str	r0, [sp, #4]
   22b14:	6813      	ldr	r3, [r2, #0]
   22b16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   22b1a:	6013      	str	r3, [r2, #0]
   22b1c:	9801      	ldr	r0, [sp, #4]
   22b1e:	f000 fc27 	bl	23370 <am_hal_interrupt_master_set>
   22b22:	2000      	movs	r0, #0
   22b24:	e7b4      	b.n	22a90 <am_hal_cachectrl_control+0x3c>
   22b26:	f000 fc1f 	bl	23368 <am_hal_interrupt_master_disable>
   22b2a:	4603      	mov	r3, r0
   22b2c:	4885      	ldr	r0, [pc, #532]	; (22d44 <am_hal_cachectrl_control+0x2f0>)
   22b2e:	9302      	str	r3, [sp, #8]
   22b30:	f000 fa52 	bl	22fd8 <am_hal_flash_load_ui32>
   22b34:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
   22b38:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
   22b3c:	4881      	ldr	r0, [pc, #516]	; (22d44 <am_hal_cachectrl_control+0x2f0>)
   22b3e:	f000 fa4f 	bl	22fe0 <am_hal_flash_store_ui32>
   22b42:	9802      	ldr	r0, [sp, #8]
   22b44:	f000 fc14 	bl	23370 <am_hal_interrupt_master_set>
   22b48:	f000 fc0e 	bl	23368 <am_hal_interrupt_master_disable>
   22b4c:	4603      	mov	r3, r0
   22b4e:	487d      	ldr	r0, [pc, #500]	; (22d44 <am_hal_cachectrl_control+0x2f0>)
   22b50:	9303      	str	r3, [sp, #12]
   22b52:	f000 fa41 	bl	22fd8 <am_hal_flash_load_ui32>
   22b56:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
   22b5a:	f440 61ee 	orr.w	r1, r0, #1904	; 0x770
   22b5e:	4879      	ldr	r0, [pc, #484]	; (22d44 <am_hal_cachectrl_control+0x2f0>)
   22b60:	f000 fa3e 	bl	22fe0 <am_hal_flash_store_ui32>
   22b64:	9803      	ldr	r0, [sp, #12]
   22b66:	f000 fc03 	bl	23370 <am_hal_interrupt_master_set>
   22b6a:	f000 fbfd 	bl	23368 <am_hal_interrupt_master_disable>
   22b6e:	4603      	mov	r3, r0
   22b70:	4874      	ldr	r0, [pc, #464]	; (22d44 <am_hal_cachectrl_control+0x2f0>)
   22b72:	9304      	str	r3, [sp, #16]
   22b74:	f000 fa30 	bl	22fd8 <am_hal_flash_load_ui32>
   22b78:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
   22b7c:	f020 000f 	bic.w	r0, r0, #15
   22b80:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
   22b84:	f041 0103 	orr.w	r1, r1, #3
   22b88:	486e      	ldr	r0, [pc, #440]	; (22d44 <am_hal_cachectrl_control+0x2f0>)
   22b8a:	f000 fa29 	bl	22fe0 <am_hal_flash_store_ui32>
   22b8e:	9804      	ldr	r0, [sp, #16]
   22b90:	f000 fbee 	bl	23370 <am_hal_interrupt_master_set>
   22b94:	2000      	movs	r0, #0
   22b96:	e77b      	b.n	22a90 <am_hal_cachectrl_control+0x3c>
   22b98:	f000 fbe6 	bl	23368 <am_hal_interrupt_master_disable>
   22b9c:	4603      	mov	r3, r0
   22b9e:	4869      	ldr	r0, [pc, #420]	; (22d44 <am_hal_cachectrl_control+0x2f0>)
   22ba0:	9305      	str	r3, [sp, #20]
   22ba2:	f000 fa19 	bl	22fd8 <am_hal_flash_load_ui32>
   22ba6:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
   22baa:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
   22bae:	4865      	ldr	r0, [pc, #404]	; (22d44 <am_hal_cachectrl_control+0x2f0>)
   22bb0:	f000 fa16 	bl	22fe0 <am_hal_flash_store_ui32>
   22bb4:	9805      	ldr	r0, [sp, #20]
   22bb6:	f000 fbdb 	bl	23370 <am_hal_interrupt_master_set>
   22bba:	f000 fbd5 	bl	23368 <am_hal_interrupt_master_disable>
   22bbe:	4603      	mov	r3, r0
   22bc0:	4860      	ldr	r0, [pc, #384]	; (22d44 <am_hal_cachectrl_control+0x2f0>)
   22bc2:	9306      	str	r3, [sp, #24]
   22bc4:	f000 fa08 	bl	22fd8 <am_hal_flash_load_ui32>
   22bc8:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
   22bcc:	f440 61ea 	orr.w	r1, r0, #1872	; 0x750
   22bd0:	485c      	ldr	r0, [pc, #368]	; (22d44 <am_hal_cachectrl_control+0x2f0>)
   22bd2:	f000 fa05 	bl	22fe0 <am_hal_flash_store_ui32>
   22bd6:	9806      	ldr	r0, [sp, #24]
   22bd8:	f000 fbca 	bl	23370 <am_hal_interrupt_master_set>
   22bdc:	f000 fbc4 	bl	23368 <am_hal_interrupt_master_disable>
   22be0:	4603      	mov	r3, r0
   22be2:	4858      	ldr	r0, [pc, #352]	; (22d44 <am_hal_cachectrl_control+0x2f0>)
   22be4:	9307      	str	r3, [sp, #28]
   22be6:	f000 f9f7 	bl	22fd8 <am_hal_flash_load_ui32>
   22bea:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
   22bee:	f020 000f 	bic.w	r0, r0, #15
   22bf2:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
   22bf6:	f041 0101 	orr.w	r1, r1, #1
   22bfa:	4852      	ldr	r0, [pc, #328]	; (22d44 <am_hal_cachectrl_control+0x2f0>)
   22bfc:	f000 f9f0 	bl	22fe0 <am_hal_flash_store_ui32>
   22c00:	9807      	ldr	r0, [sp, #28]
   22c02:	f000 fbb5 	bl	23370 <am_hal_interrupt_master_set>
   22c06:	2000      	movs	r0, #0
   22c08:	e742      	b.n	22a90 <am_hal_cachectrl_control+0x3c>
   22c0a:	f000 fbad 	bl	23368 <am_hal_interrupt_master_disable>
   22c0e:	4603      	mov	r3, r0
   22c10:	484c      	ldr	r0, [pc, #304]	; (22d44 <am_hal_cachectrl_control+0x2f0>)
   22c12:	9308      	str	r3, [sp, #32]
   22c14:	f000 f9e0 	bl	22fd8 <am_hal_flash_load_ui32>
   22c18:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
   22c1c:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
   22c20:	4848      	ldr	r0, [pc, #288]	; (22d44 <am_hal_cachectrl_control+0x2f0>)
   22c22:	f000 f9dd 	bl	22fe0 <am_hal_flash_store_ui32>
   22c26:	9808      	ldr	r0, [sp, #32]
   22c28:	f000 fba2 	bl	23370 <am_hal_interrupt_master_set>
   22c2c:	f000 fb9c 	bl	23368 <am_hal_interrupt_master_disable>
   22c30:	4603      	mov	r3, r0
   22c32:	4844      	ldr	r0, [pc, #272]	; (22d44 <am_hal_cachectrl_control+0x2f0>)
   22c34:	9309      	str	r3, [sp, #36]	; 0x24
   22c36:	f000 f9cf 	bl	22fd8 <am_hal_flash_load_ui32>
   22c3a:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
   22c3e:	f440 61ec 	orr.w	r1, r0, #1888	; 0x760
   22c42:	4840      	ldr	r0, [pc, #256]	; (22d44 <am_hal_cachectrl_control+0x2f0>)
   22c44:	f000 f9cc 	bl	22fe0 <am_hal_flash_store_ui32>
   22c48:	9809      	ldr	r0, [sp, #36]	; 0x24
   22c4a:	f000 fb91 	bl	23370 <am_hal_interrupt_master_set>
   22c4e:	f000 fb8b 	bl	23368 <am_hal_interrupt_master_disable>
   22c52:	4603      	mov	r3, r0
   22c54:	483b      	ldr	r0, [pc, #236]	; (22d44 <am_hal_cachectrl_control+0x2f0>)
   22c56:	930a      	str	r3, [sp, #40]	; 0x28
   22c58:	f000 f9be 	bl	22fd8 <am_hal_flash_load_ui32>
   22c5c:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
   22c60:	f020 000f 	bic.w	r0, r0, #15
   22c64:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
   22c68:	f041 0101 	orr.w	r1, r1, #1
   22c6c:	4835      	ldr	r0, [pc, #212]	; (22d44 <am_hal_cachectrl_control+0x2f0>)
   22c6e:	f000 f9b7 	bl	22fe0 <am_hal_flash_store_ui32>
   22c72:	980a      	ldr	r0, [sp, #40]	; 0x28
   22c74:	f000 fb7c 	bl	23370 <am_hal_interrupt_master_set>
   22c78:	2000      	movs	r0, #0
   22c7a:	e709      	b.n	22a90 <am_hal_cachectrl_control+0x3c>
   22c7c:	2900      	cmp	r1, #0
   22c7e:	d04d      	beq.n	22d1c <am_hal_cachectrl_control+0x2c8>
   22c80:	680c      	ldr	r4, [r1, #0]
   22c82:	2c03      	cmp	r4, #3
   22c84:	d84c      	bhi.n	22d20 <am_hal_cachectrl_control+0x2cc>
   22c86:	f000 fb6f 	bl	23368 <am_hal_interrupt_master_disable>
   22c8a:	4603      	mov	r3, r0
   22c8c:	482d      	ldr	r0, [pc, #180]	; (22d44 <am_hal_cachectrl_control+0x2f0>)
   22c8e:	930b      	str	r3, [sp, #44]	; 0x2c
   22c90:	f000 f9a2 	bl	22fd8 <am_hal_flash_load_ui32>
   22c94:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
   22c98:	ea40 3104 	orr.w	r1, r0, r4, lsl #12
   22c9c:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   22ca0:	4828      	ldr	r0, [pc, #160]	; (22d44 <am_hal_cachectrl_control+0x2f0>)
   22ca2:	f000 f99d 	bl	22fe0 <am_hal_flash_store_ui32>
   22ca6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   22ca8:	f000 fb62 	bl	23370 <am_hal_interrupt_master_set>
   22cac:	2000      	movs	r0, #0
   22cae:	e6ef      	b.n	22a90 <am_hal_cachectrl_control+0x3c>
   22cb0:	b3a1      	cbz	r1, 22d1c <am_hal_cachectrl_control+0x2c8>
   22cb2:	680c      	ldr	r4, [r1, #0]
   22cb4:	2c07      	cmp	r4, #7
   22cb6:	d833      	bhi.n	22d20 <am_hal_cachectrl_control+0x2cc>
   22cb8:	f000 fb56 	bl	23368 <am_hal_interrupt_master_disable>
   22cbc:	4603      	mov	r3, r0
   22cbe:	4821      	ldr	r0, [pc, #132]	; (22d44 <am_hal_cachectrl_control+0x2f0>)
   22cc0:	930c      	str	r3, [sp, #48]	; 0x30
   22cc2:	f000 f989 	bl	22fd8 <am_hal_flash_load_ui32>
   22cc6:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
   22cca:	ea40 1104 	orr.w	r1, r0, r4, lsl #4
   22cce:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   22cd2:	481c      	ldr	r0, [pc, #112]	; (22d44 <am_hal_cachectrl_control+0x2f0>)
   22cd4:	f000 f984 	bl	22fe0 <am_hal_flash_store_ui32>
   22cd8:	980c      	ldr	r0, [sp, #48]	; 0x30
   22cda:	f000 fb49 	bl	23370 <am_hal_interrupt_master_set>
   22cde:	2000      	movs	r0, #0
   22ce0:	e6d6      	b.n	22a90 <am_hal_cachectrl_control+0x3c>
   22ce2:	b1d9      	cbz	r1, 22d1c <am_hal_cachectrl_control+0x2c8>
   22ce4:	680c      	ldr	r4, [r1, #0]
   22ce6:	2c0f      	cmp	r4, #15
   22ce8:	d81a      	bhi.n	22d20 <am_hal_cachectrl_control+0x2cc>
   22cea:	f000 fb3d 	bl	23368 <am_hal_interrupt_master_disable>
   22cee:	4603      	mov	r3, r0
   22cf0:	4814      	ldr	r0, [pc, #80]	; (22d44 <am_hal_cachectrl_control+0x2f0>)
   22cf2:	930d      	str	r3, [sp, #52]	; 0x34
   22cf4:	f000 f970 	bl	22fd8 <am_hal_flash_load_ui32>
   22cf8:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
   22cfc:	f020 000f 	bic.w	r0, r0, #15
   22d00:	ea40 0104 	orr.w	r1, r0, r4
   22d04:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   22d08:	480e      	ldr	r0, [pc, #56]	; (22d44 <am_hal_cachectrl_control+0x2f0>)
   22d0a:	f000 f969 	bl	22fe0 <am_hal_flash_store_ui32>
   22d0e:	980d      	ldr	r0, [sp, #52]	; 0x34
   22d10:	f000 fb2e 	bl	23370 <am_hal_interrupt_master_set>
   22d14:	2000      	movs	r0, #0
   22d16:	e6bb      	b.n	22a90 <am_hal_cachectrl_control+0x3c>
   22d18:	2007      	movs	r0, #7
   22d1a:	e6b9      	b.n	22a90 <am_hal_cachectrl_control+0x3c>
   22d1c:	2006      	movs	r0, #6
   22d1e:	e6b7      	b.n	22a90 <am_hal_cachectrl_control+0x3c>
   22d20:	2001      	movs	r0, #1
   22d22:	e6b5      	b.n	22a90 <am_hal_cachectrl_control+0x3c>
   22d24:	2c01      	cmp	r4, #1
   22d26:	d1f9      	bne.n	22d1c <am_hal_cachectrl_control+0x2c8>
   22d28:	4c04      	ldr	r4, [pc, #16]	; (22d3c <am_hal_cachectrl_control+0x2e8>)
   22d2a:	7849      	ldrb	r1, [r1, #1]
   22d2c:	61a2      	str	r2, [r4, #24]
   22d2e:	61e3      	str	r3, [r4, #28]
   22d30:	6823      	ldr	r3, [r4, #0]
   22d32:	f361 03c3 	bfi	r3, r1, #3, #1
   22d36:	6023      	str	r3, [r4, #0]
   22d38:	e6aa      	b.n	22a90 <am_hal_cachectrl_control+0x3c>
   22d3a:	bf00      	nop
   22d3c:	40018000 	.word	0x40018000
   22d40:	f800000f 	.word	0xf800000f
   22d44:	40018004 	.word	0x40018004

00022d48 <am_hal_clkgen_control>:
   22d48:	4b49      	ldr	r3, [pc, #292]	; (22e70 <am_hal_clkgen_control+0x128>)
   22d4a:	681a      	ldr	r2, [r3, #0]
   22d4c:	b912      	cbnz	r2, 22d54 <am_hal_clkgen_control+0xc>
   22d4e:	4a49      	ldr	r2, [pc, #292]	; (22e74 <am_hal_clkgen_control+0x12c>)
   22d50:	6812      	ldr	r2, [r2, #0]
   22d52:	601a      	str	r2, [r3, #0]
   22d54:	2809      	cmp	r0, #9
   22d56:	f200 8089 	bhi.w	22e6c <am_hal_clkgen_control+0x124>
   22d5a:	e8df f000 	tbb	[pc, r0]
   22d5e:	160d      	.short	0x160d
   22d60:	423a261e 	.word	0x423a261e
   22d64:	055c544c 	.word	0x055c544c
   22d68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   22d6c:	2000      	movs	r0, #0
   22d6e:	6a1a      	ldr	r2, [r3, #32]
   22d70:	f36f 0200 	bfc	r2, #0, #1
   22d74:	621a      	str	r2, [r3, #32]
   22d76:	4770      	bx	lr
   22d78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   22d7c:	2200      	movs	r2, #0
   22d7e:	2147      	movs	r1, #71	; 0x47
   22d80:	6159      	str	r1, [r3, #20]
   22d82:	4610      	mov	r0, r2
   22d84:	619a      	str	r2, [r3, #24]
   22d86:	615a      	str	r2, [r3, #20]
   22d88:	4770      	bx	lr
   22d8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   22d8e:	2000      	movs	r0, #0
   22d90:	899a      	ldrh	r2, [r3, #12]
   22d92:	f36f 0200 	bfc	r2, #0, #1
   22d96:	819a      	strh	r2, [r3, #12]
   22d98:	4770      	bx	lr
   22d9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   22d9e:	2000      	movs	r0, #0
   22da0:	899a      	ldrh	r2, [r3, #12]
   22da2:	f36f 0241 	bfc	r2, #1, #1
   22da6:	819a      	strh	r2, [r3, #12]
   22da8:	4770      	bx	lr
   22daa:	4a33      	ldr	r2, [pc, #204]	; (22e78 <am_hal_clkgen_control+0x130>)
   22dac:	68d3      	ldr	r3, [r2, #12]
   22dae:	b2db      	uxtb	r3, r3
   22db0:	2b21      	cmp	r3, #33	; 0x21
   22db2:	d106      	bne.n	22dc2 <am_hal_clkgen_control+0x7a>
   22db4:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
   22db8:	2101      	movs	r1, #1
   22dba:	f361 2309 	bfi	r3, r1, #8, #2
   22dbe:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
   22dc2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   22dc6:	2000      	movs	r0, #0
   22dc8:	8993      	ldrh	r3, [r2, #12]
   22dca:	f043 0301 	orr.w	r3, r3, #1
   22dce:	8193      	strh	r3, [r2, #12]
   22dd0:	4770      	bx	lr
   22dd2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   22dd6:	2000      	movs	r0, #0
   22dd8:	8993      	ldrh	r3, [r2, #12]
   22dda:	f043 0302 	orr.w	r3, r3, #2
   22dde:	8193      	strh	r3, [r2, #12]
   22de0:	4770      	bx	lr
   22de2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   22de6:	2200      	movs	r2, #0
   22de8:	2047      	movs	r0, #71	; 0x47
   22dea:	2101      	movs	r1, #1
   22dec:	6158      	str	r0, [r3, #20]
   22dee:	6199      	str	r1, [r3, #24]
   22df0:	4610      	mov	r0, r2
   22df2:	615a      	str	r2, [r3, #20]
   22df4:	4770      	bx	lr
   22df6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   22dfa:	2000      	movs	r0, #0
   22dfc:	899a      	ldrh	r2, [r3, #12]
   22dfe:	f36f 12c7 	bfc	r2, #7, #1
   22e02:	819a      	strh	r2, [r3, #12]
   22e04:	4770      	bx	lr
   22e06:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   22e0a:	2000      	movs	r0, #0
   22e0c:	8993      	ldrh	r3, [r2, #12]
   22e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   22e12:	8193      	strh	r3, [r2, #12]
   22e14:	4770      	bx	lr
   22e16:	4a18      	ldr	r2, [pc, #96]	; (22e78 <am_hal_clkgen_control+0x130>)
   22e18:	68d3      	ldr	r3, [r2, #12]
   22e1a:	b2db      	uxtb	r3, r3
   22e1c:	2b21      	cmp	r3, #33	; 0x21
   22e1e:	d00a      	beq.n	22e36 <am_hal_clkgen_control+0xee>
   22e20:	b139      	cbz	r1, 22e32 <am_hal_clkgen_control+0xea>
   22e22:	680b      	ldr	r3, [r1, #0]
   22e24:	f043 0301 	orr.w	r3, r3, #1
   22e28:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   22e2c:	2000      	movs	r0, #0
   22e2e:	6213      	str	r3, [r2, #32]
   22e30:	4770      	bx	lr
   22e32:	4b12      	ldr	r3, [pc, #72]	; (22e7c <am_hal_clkgen_control+0x134>)
   22e34:	e7f8      	b.n	22e28 <am_hal_clkgen_control+0xe0>
   22e36:	b500      	push	{lr}
   22e38:	b083      	sub	sp, #12
   22e3a:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
   22e3e:	9101      	str	r1, [sp, #4]
   22e40:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
   22e44:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   22e48:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
   22e4c:	f000 f87e 	bl	22f4c <am_hal_flash_delay>
   22e50:	9901      	ldr	r1, [sp, #4]
   22e52:	b149      	cbz	r1, 22e68 <am_hal_clkgen_control+0x120>
   22e54:	680b      	ldr	r3, [r1, #0]
   22e56:	f043 0301 	orr.w	r3, r3, #1
   22e5a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   22e5e:	2000      	movs	r0, #0
   22e60:	6213      	str	r3, [r2, #32]
   22e62:	b003      	add	sp, #12
   22e64:	f85d fb04 	ldr.w	pc, [sp], #4
   22e68:	4b04      	ldr	r3, [pc, #16]	; (22e7c <am_hal_clkgen_control+0x134>)
   22e6a:	e7f6      	b.n	22e5a <am_hal_clkgen_control+0x112>
   22e6c:	2006      	movs	r0, #6
   22e6e:	4770      	bx	lr
   22e70:	1000a26c 	.word	0x1000a26c
   22e74:	4ffff000 	.word	0x4ffff000
   22e78:	40020000 	.word	0x40020000
   22e7c:	0025b801 	.word	0x0025b801

00022e80 <am_hal_clkgen_status_get>:
   22e80:	b1b0      	cbz	r0, 22eb0 <am_hal_clkgen_status_get+0x30>
   22e82:	b410      	push	{r4}
   22e84:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
   22e88:	4603      	mov	r3, r0
   22e8a:	698c      	ldr	r4, [r1, #24]
   22e8c:	4809      	ldr	r0, [pc, #36]	; (22eb4 <am_hal_clkgen_status_get+0x34>)
   22e8e:	4a0a      	ldr	r2, [pc, #40]	; (22eb8 <am_hal_clkgen_status_get+0x38>)
   22e90:	f014 0f01 	tst.w	r4, #1
   22e94:	bf08      	it	eq
   22e96:	4602      	moveq	r2, r0
   22e98:	601a      	str	r2, [r3, #0]
   22e9a:	69ca      	ldr	r2, [r1, #28]
   22e9c:	f85d 4b04 	ldr.w	r4, [sp], #4
   22ea0:	f002 0101 	and.w	r1, r2, #1
   22ea4:	f3c2 0240 	ubfx	r2, r2, #1, #1
   22ea8:	2000      	movs	r0, #0
   22eaa:	6059      	str	r1, [r3, #4]
   22eac:	721a      	strb	r2, [r3, #8]
   22eae:	4770      	bx	lr
   22eb0:	2006      	movs	r0, #6
   22eb2:	4770      	bx	lr
   22eb4:	02dc6c00 	.word	0x02dc6c00
   22eb8:	016e3600 	.word	0x016e3600

00022ebc <am_hal_ctimer_int_service>:
   22ebc:	b198      	cbz	r0, 22ee6 <am_hal_ctimer_int_service+0x2a>
   22ebe:	b570      	push	{r4, r5, r6, lr}
   22ec0:	4e09      	ldr	r6, [pc, #36]	; (22ee8 <am_hal_ctimer_int_service+0x2c>)
   22ec2:	4604      	mov	r4, r0
   22ec4:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   22ec8:	fab4 f384 	clz	r3, r4
   22ecc:	f1c3 021f 	rsb	r2, r3, #31
   22ed0:	fa25 f303 	lsr.w	r3, r5, r3
   22ed4:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
   22ed8:	ea24 0403 	bic.w	r4, r4, r3
   22edc:	b102      	cbz	r2, 22ee0 <am_hal_ctimer_int_service+0x24>
   22ede:	4790      	blx	r2
   22ee0:	2c00      	cmp	r4, #0
   22ee2:	d1f1      	bne.n	22ec8 <am_hal_ctimer_int_service+0xc>
   22ee4:	bd70      	pop	{r4, r5, r6, pc}
   22ee6:	4770      	bx	lr
   22ee8:	1000a1ec 	.word	0x1000a1ec

00022eec <am_hal_ctimer_int_clear>:
   22eec:	b510      	push	{r4, lr}
   22eee:	b082      	sub	sp, #8
   22ef0:	4604      	mov	r4, r0
   22ef2:	f000 fa39 	bl	23368 <am_hal_interrupt_master_disable>
   22ef6:	4b05      	ldr	r3, [pc, #20]	; (22f0c <am_hal_ctimer_int_clear+0x20>)
   22ef8:	9001      	str	r0, [sp, #4]
   22efa:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
   22efe:	9801      	ldr	r0, [sp, #4]
   22f00:	b002      	add	sp, #8
   22f02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22f06:	f000 ba33 	b.w	23370 <am_hal_interrupt_master_set>
   22f0a:	bf00      	nop
   22f0c:	40008000 	.word	0x40008000

00022f10 <am_hal_ctimer_int_status_get>:
   22f10:	b510      	push	{r4, lr}
   22f12:	b082      	sub	sp, #8
   22f14:	4604      	mov	r4, r0
   22f16:	f000 fa27 	bl	23368 <am_hal_interrupt_master_disable>
   22f1a:	4b0b      	ldr	r3, [pc, #44]	; (22f48 <am_hal_ctimer_int_status_get+0x38>)
   22f1c:	9001      	str	r0, [sp, #4]
   22f1e:	b154      	cbz	r4, 22f36 <am_hal_ctimer_int_status_get+0x26>
   22f20:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
   22f24:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   22f28:	9801      	ldr	r0, [sp, #4]
   22f2a:	401c      	ands	r4, r3
   22f2c:	f000 fa20 	bl	23370 <am_hal_interrupt_master_set>
   22f30:	4620      	mov	r0, r4
   22f32:	b002      	add	sp, #8
   22f34:	bd10      	pop	{r4, pc}
   22f36:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
   22f3a:	9801      	ldr	r0, [sp, #4]
   22f3c:	f000 fa18 	bl	23370 <am_hal_interrupt_master_set>
   22f40:	4620      	mov	r0, r4
   22f42:	b002      	add	sp, #8
   22f44:	bd10      	pop	{r4, pc}
   22f46:	bf00      	nop
   22f48:	40008000 	.word	0x40008000

00022f4c <am_hal_flash_delay>:
   22f4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   22f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   22f52:	075b      	lsls	r3, r3, #29
   22f54:	bf46      	itte	mi
   22f56:	0040      	lslmi	r0, r0, #1
   22f58:	230e      	movmi	r3, #14
   22f5a:	230b      	movpl	r3, #11
   22f5c:	4298      	cmp	r0, r3
   22f5e:	d902      	bls.n	22f66 <am_hal_flash_delay+0x1a>
   22f60:	4a01      	ldr	r2, [pc, #4]	; (22f68 <am_hal_flash_delay+0x1c>)
   22f62:	1ac0      	subs	r0, r0, r3
   22f64:	4710      	bx	r2
   22f66:	4770      	bx	lr
   22f68:	0800009d 	.word	0x0800009d

00022f6c <am_hal_flash_delay_status_check>:
   22f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22f70:	f89d c020 	ldrb.w	ip, [sp, #32]
   22f74:	f8df 805c 	ldr.w	r8, [pc, #92]	; 22fd4 <am_hal_flash_delay_status_check+0x68>
   22f78:	4604      	mov	r4, r0
   22f7a:	460d      	mov	r5, r1
   22f7c:	4616      	mov	r6, r2
   22f7e:	461f      	mov	r7, r3
   22f80:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
   22f84:	f1bc 0f00 	cmp.w	ip, #0
   22f88:	d00a      	beq.n	22fa0 <am_hal_flash_delay_status_check+0x34>
   22f8a:	e01a      	b.n	22fc2 <am_hal_flash_delay_status_check+0x56>
   22f8c:	b1f4      	cbz	r4, 22fcc <am_hal_flash_delay_status_check+0x60>
   22f8e:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
   22f92:	f013 0f04 	tst.w	r3, #4
   22f96:	bf0c      	ite	eq
   22f98:	2005      	moveq	r0, #5
   22f9a:	2012      	movne	r0, #18
   22f9c:	3c01      	subs	r4, #1
   22f9e:	47c0      	blx	r8
   22fa0:	6828      	ldr	r0, [r5, #0]
   22fa2:	4030      	ands	r0, r6
   22fa4:	42b8      	cmp	r0, r7
   22fa6:	d0f1      	beq.n	22f8c <am_hal_flash_delay_status_check+0x20>
   22fa8:	2000      	movs	r0, #0
   22faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22fae:	b16c      	cbz	r4, 22fcc <am_hal_flash_delay_status_check+0x60>
   22fb0:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
   22fb4:	f013 0f04 	tst.w	r3, #4
   22fb8:	bf0c      	ite	eq
   22fba:	2005      	moveq	r0, #5
   22fbc:	2012      	movne	r0, #18
   22fbe:	3c01      	subs	r4, #1
   22fc0:	47c0      	blx	r8
   22fc2:	6828      	ldr	r0, [r5, #0]
   22fc4:	4030      	ands	r0, r6
   22fc6:	42b8      	cmp	r0, r7
   22fc8:	d1f1      	bne.n	22fae <am_hal_flash_delay_status_check+0x42>
   22fca:	e7ed      	b.n	22fa8 <am_hal_flash_delay_status_check+0x3c>
   22fcc:	2004      	movs	r0, #4
   22fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22fd2:	bf00      	nop
   22fd4:	0800009d 	.word	0x0800009d

00022fd8 <am_hal_flash_load_ui32>:
   22fd8:	4b00      	ldr	r3, [pc, #0]	; (22fdc <am_hal_flash_load_ui32+0x4>)
   22fda:	4718      	bx	r3
   22fdc:	08000075 	.word	0x08000075

00022fe0 <am_hal_flash_store_ui32>:
   22fe0:	4b01      	ldr	r3, [pc, #4]	; (22fe8 <am_hal_flash_store_ui32+0x8>)
   22fe2:	f043 0301 	orr.w	r3, r3, #1
   22fe6:	4718      	bx	r3
   22fe8:	10003de8 	.word	0x10003de8

00022fec <am_hal_triple_read>:
   22fec:	b412      	push	{r1, r4}
   22fee:	f3ef 8410 	mrs	r4, PRIMASK
   22ff2:	b672      	cpsid	i
   22ff4:	6801      	ldr	r1, [r0, #0]
   22ff6:	6802      	ldr	r2, [r0, #0]
   22ff8:	6803      	ldr	r3, [r0, #0]
   22ffa:	f384 8810 	msr	PRIMASK, r4
   22ffe:	bc11      	pop	{r0, r4}
   23000:	6001      	str	r1, [r0, #0]
   23002:	6042      	str	r2, [r0, #4]
   23004:	6083      	str	r3, [r0, #8]
   23006:	4770      	bx	lr

00023008 <am_hal_gpio_pinconfig>:
   23008:	2831      	cmp	r0, #49	; 0x31
   2300a:	f200 80c3 	bhi.w	23194 <am_hal_gpio_pinconfig+0x18c>
   2300e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23012:	4604      	mov	r4, r0
   23014:	f011 07e0 	ands.w	r7, r1, #224	; 0xe0
   23018:	f001 0007 	and.w	r0, r1, #7
   2301c:	b085      	sub	sp, #20
   2301e:	f3c1 03c1 	ubfx	r3, r1, #3, #2
   23022:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   23026:	d00f      	beq.n	23048 <am_hal_gpio_pinconfig+0x40>
   23028:	f3c1 1642 	ubfx	r6, r1, #5, #3
   2302c:	1db5      	adds	r5, r6, #6
   2302e:	f005 0507 	and.w	r5, r5, #7
   23032:	2d03      	cmp	r5, #3
   23034:	f042 0201 	orr.w	r2, r2, #1
   23038:	f240 80ae 	bls.w	23198 <am_hal_gpio_pinconfig+0x190>
   2303c:	2fc0      	cmp	r7, #192	; 0xc0
   2303e:	f000 80e1 	beq.w	23204 <am_hal_gpio_pinconfig+0x1fc>
   23042:	2f20      	cmp	r7, #32
   23044:	f000 80e3 	beq.w	2320e <am_hal_gpio_pinconfig+0x206>
   23048:	b163      	cbz	r3, 23064 <am_hal_gpio_pinconfig+0x5c>
   2304a:	2b01      	cmp	r3, #1
   2304c:	f000 80d3 	beq.w	231f6 <am_hal_gpio_pinconfig+0x1ee>
   23050:	2b02      	cmp	r3, #2
   23052:	f040 80c9 	bne.w	231e8 <am_hal_gpio_pinconfig+0x1e0>
   23056:	4b79      	ldr	r3, [pc, #484]	; (2323c <am_hal_gpio_pinconfig+0x234>)
   23058:	5d1b      	ldrb	r3, [r3, r4]
   2305a:	075b      	lsls	r3, r3, #29
   2305c:	f140 80c4 	bpl.w	231e8 <am_hal_gpio_pinconfig+0x1e0>
   23060:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   23064:	4b76      	ldr	r3, [pc, #472]	; (23240 <am_hal_gpio_pinconfig+0x238>)
   23066:	5d1b      	ldrb	r3, [r3, r4]
   23068:	4103      	asrs	r3, r0
   2306a:	005b      	lsls	r3, r3, #1
   2306c:	f003 0302 	and.w	r3, r3, #2
   23070:	4313      	orrs	r3, r2
   23072:	4a74      	ldr	r2, [pc, #464]	; (23244 <am_hal_gpio_pinconfig+0x23c>)
   23074:	5d12      	ldrb	r2, [r2, r4]
   23076:	4282      	cmp	r2, r0
   23078:	f000 8099 	beq.w	231ae <am_hal_gpio_pinconfig+0x1a6>
   2307c:	f3c1 3000 	ubfx	r0, r1, #12, #1
   23080:	f3c1 2581 	ubfx	r5, r1, #10, #2
   23084:	f3c1 3280 	ubfx	r2, r1, #14, #1
   23088:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
   2308c:	0a88      	lsrs	r0, r1, #10
   2308e:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
   23092:	f000 0008 	and.w	r0, r0, #8
   23096:	4302      	orrs	r2, r0
   23098:	f3c1 2007 	ubfx	r0, r1, #8, #8
   2309c:	f000 050c 	and.w	r5, r0, #12
   230a0:	2d04      	cmp	r5, #4
   230a2:	f000 80a5 	beq.w	231f0 <am_hal_gpio_pinconfig+0x1e8>
   230a6:	4d68      	ldr	r5, [pc, #416]	; (23248 <am_hal_gpio_pinconfig+0x240>)
   230a8:	682d      	ldr	r5, [r5, #0]
   230aa:	eba1 0805 	sub.w	r8, r1, r5
   230ae:	fab8 f888 	clz	r8, r8
   230b2:	ea4f 1858 	mov.w	r8, r8, lsr #5
   230b6:	f010 0f60 	tst.w	r0, #96	; 0x60
   230ba:	bf04      	itt	eq
   230bc:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
   230c0:	f360 0200 	bfieq	r2, r0, #0, #1
   230c4:	00a0      	lsls	r0, r4, #2
   230c6:	f3c1 2101 	ubfx	r1, r1, #8, #2
   230ca:	2902      	cmp	r1, #2
   230cc:	d05c      	beq.n	23188 <am_hal_gpio_pinconfig+0x180>
   230ce:	2903      	cmp	r1, #3
   230d0:	d058      	beq.n	23184 <am_hal_gpio_pinconfig+0x17c>
   230d2:	2901      	cmp	r1, #1
   230d4:	ea4f 01c4 	mov.w	r1, r4, lsl #3
   230d8:	bf08      	it	eq
   230da:	f043 0304 	orreq.w	r3, r3, #4
   230de:	f001 0118 	and.w	r1, r1, #24
   230e2:	2700      	movs	r7, #0
   230e4:	f000 001c 	and.w	r0, r0, #28
   230e8:	fa02 f600 	lsl.w	r6, r2, r0
   230ec:	220f      	movs	r2, #15
   230ee:	4082      	lsls	r2, r0
   230f0:	43d2      	mvns	r2, r2
   230f2:	f04f 09ff 	mov.w	r9, #255	; 0xff
   230f6:	fa03 f501 	lsl.w	r5, r3, r1
   230fa:	fa09 f901 	lsl.w	r9, r9, r1
   230fe:	9201      	str	r2, [sp, #4]
   23100:	f000 f932 	bl	23368 <am_hal_interrupt_master_disable>
   23104:	f024 0a03 	bic.w	sl, r4, #3
   23108:	ea4f 0b54 	mov.w	fp, r4, lsr #1
   2310c:	f10a 4c80 	add.w	ip, sl, #1073741824	; 0x40000000
   23110:	4b4e      	ldr	r3, [pc, #312]	; (2324c <am_hal_gpio_pinconfig+0x244>)
   23112:	494f      	ldr	r1, [pc, #316]	; (23250 <am_hal_gpio_pinconfig+0x248>)
   23114:	9a01      	ldr	r2, [sp, #4]
   23116:	9003      	str	r0, [sp, #12]
   23118:	ea6f 0909 	mvn.w	r9, r9
   2311c:	f02b 0b03 	bic.w	fp, fp, #3
   23120:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
   23124:	f1b8 0f00 	cmp.w	r8, #0
   23128:	d00b      	beq.n	23142 <am_hal_gpio_pinconfig+0x13a>
   2312a:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
   2312e:	f004 081f 	and.w	r8, r4, #31
   23132:	4848      	ldr	r0, [pc, #288]	; (23254 <am_hal_gpio_pinconfig+0x24c>)
   23134:	f00e 0e04 	and.w	lr, lr, #4
   23138:	2401      	movs	r4, #1
   2313a:	fa04 f408 	lsl.w	r4, r4, r8
   2313e:	f84e 4000 	str.w	r4, [lr, r0]
   23142:	4845      	ldr	r0, [pc, #276]	; (23258 <am_hal_gpio_pinconfig+0x250>)
   23144:	2473      	movs	r4, #115	; 0x73
   23146:	6604      	str	r4, [r0, #96]	; 0x60
   23148:	f8dc 4000 	ldr.w	r4, [ip]
   2314c:	ea04 0409 	and.w	r4, r4, r9
   23150:	4325      	orrs	r5, r4
   23152:	f8cc 5000 	str.w	r5, [ip]
   23156:	f85b 4003 	ldr.w	r4, [fp, r3]
   2315a:	4022      	ands	r2, r4
   2315c:	4332      	orrs	r2, r6
   2315e:	f84b 2003 	str.w	r2, [fp, r3]
   23162:	f85a 3001 	ldr.w	r3, [sl, r1]
   23166:	ea03 0909 	and.w	r9, r3, r9
   2316a:	2400      	movs	r4, #0
   2316c:	ea49 0707 	orr.w	r7, r9, r7
   23170:	f84a 7001 	str.w	r7, [sl, r1]
   23174:	6604      	str	r4, [r0, #96]	; 0x60
   23176:	9803      	ldr	r0, [sp, #12]
   23178:	f000 f8fa 	bl	23370 <am_hal_interrupt_master_set>
   2317c:	4620      	mov	r0, r4
   2317e:	b005      	add	sp, #20
   23180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23184:	f043 0304 	orr.w	r3, r3, #4
   23188:	00e1      	lsls	r1, r4, #3
   2318a:	f001 0118 	and.w	r1, r1, #24
   2318e:	2701      	movs	r7, #1
   23190:	408f      	lsls	r7, r1
   23192:	e7a7      	b.n	230e4 <am_hal_gpio_pinconfig+0xdc>
   23194:	2006      	movs	r0, #6
   23196:	4770      	bx	lr
   23198:	4d28      	ldr	r5, [pc, #160]	; (2323c <am_hal_gpio_pinconfig+0x234>)
   2319a:	5d2d      	ldrb	r5, [r5, r4]
   2319c:	3e02      	subs	r6, #2
   2319e:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
   231a2:	07ee      	lsls	r6, r5, #31
   231a4:	d536      	bpl.n	23214 <am_hal_gpio_pinconfig+0x20c>
   231a6:	2b00      	cmp	r3, #0
   231a8:	f43f af5c 	beq.w	23064 <am_hal_gpio_pinconfig+0x5c>
   231ac:	e74d      	b.n	2304a <am_hal_gpio_pinconfig+0x42>
   231ae:	f3c1 4202 	ubfx	r2, r1, #16, #3
   231b2:	2a07      	cmp	r2, #7
   231b4:	d030      	beq.n	23218 <am_hal_gpio_pinconfig+0x210>
   231b6:	4d29      	ldr	r5, [pc, #164]	; (2325c <am_hal_gpio_pinconfig+0x254>)
   231b8:	f3c1 40c1 	ubfx	r0, r1, #19, #2
   231bc:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   231c0:	f815 0024 	ldrb.w	r0, [r5, r4, lsl #2]
   231c4:	4290      	cmp	r0, r2
   231c6:	d029      	beq.n	2321c <am_hal_gpio_pinconfig+0x214>
   231c8:	eb05 0584 	add.w	r5, r5, r4, lsl #2
   231cc:	00a0      	lsls	r0, r4, #2
   231ce:	786e      	ldrb	r6, [r5, #1]
   231d0:	4296      	cmp	r6, r2
   231d2:	d02d      	beq.n	23230 <am_hal_gpio_pinconfig+0x228>
   231d4:	78ae      	ldrb	r6, [r5, #2]
   231d6:	4296      	cmp	r6, r2
   231d8:	d02c      	beq.n	23234 <am_hal_gpio_pinconfig+0x22c>
   231da:	78ed      	ldrb	r5, [r5, #3]
   231dc:	4295      	cmp	r5, r2
   231de:	d02b      	beq.n	23238 <am_hal_gpio_pinconfig+0x230>
   231e0:	481f      	ldr	r0, [pc, #124]	; (23260 <am_hal_gpio_pinconfig+0x258>)
   231e2:	b005      	add	sp, #20
   231e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   231e8:	481e      	ldr	r0, [pc, #120]	; (23264 <am_hal_gpio_pinconfig+0x25c>)
   231ea:	b005      	add	sp, #20
   231ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   231f0:	f04f 0801 	mov.w	r8, #1
   231f4:	e75f      	b.n	230b6 <am_hal_gpio_pinconfig+0xae>
   231f6:	4b11      	ldr	r3, [pc, #68]	; (2323c <am_hal_gpio_pinconfig+0x234>)
   231f8:	5d1b      	ldrb	r3, [r3, r4]
   231fa:	079d      	lsls	r5, r3, #30
   231fc:	d5f4      	bpl.n	231e8 <am_hal_gpio_pinconfig+0x1e0>
   231fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   23202:	e72f      	b.n	23064 <am_hal_gpio_pinconfig+0x5c>
   23204:	2c14      	cmp	r4, #20
   23206:	f43f af1f 	beq.w	23048 <am_hal_gpio_pinconfig+0x40>
   2320a:	4817      	ldr	r0, [pc, #92]	; (23268 <am_hal_gpio_pinconfig+0x260>)
   2320c:	e7b7      	b.n	2317e <am_hal_gpio_pinconfig+0x176>
   2320e:	2c14      	cmp	r4, #20
   23210:	f47f af1a 	bne.w	23048 <am_hal_gpio_pinconfig+0x40>
   23214:	4815      	ldr	r0, [pc, #84]	; (2326c <am_hal_gpio_pinconfig+0x264>)
   23216:	e7b2      	b.n	2317e <am_hal_gpio_pinconfig+0x176>
   23218:	4815      	ldr	r0, [pc, #84]	; (23270 <am_hal_gpio_pinconfig+0x268>)
   2321a:	e7b0      	b.n	2317e <am_hal_gpio_pinconfig+0x176>
   2321c:	2200      	movs	r2, #0
   2321e:	00a0      	lsls	r0, r4, #2
   23220:	0052      	lsls	r2, r2, #1
   23222:	f3c1 5540 	ubfx	r5, r1, #21, #1
   23226:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
   2322a:	f04f 0800 	mov.w	r8, #0
   2322e:	e74a      	b.n	230c6 <am_hal_gpio_pinconfig+0xbe>
   23230:	2201      	movs	r2, #1
   23232:	e7f5      	b.n	23220 <am_hal_gpio_pinconfig+0x218>
   23234:	2202      	movs	r2, #2
   23236:	e7f3      	b.n	23220 <am_hal_gpio_pinconfig+0x218>
   23238:	2203      	movs	r2, #3
   2323a:	e7f1      	b.n	23220 <am_hal_gpio_pinconfig+0x218>
   2323c:	0002771c 	.word	0x0002771c
   23240:	00027750 	.word	0x00027750
   23244:	0002784c 	.word	0x0002784c
   23248:	00027710 	.word	0x00027710
   2324c:	40010040 	.word	0x40010040
   23250:	400100e0 	.word	0x400100e0
   23254:	400100b4 	.word	0x400100b4
   23258:	40010000 	.word	0x40010000
   2325c:	00027784 	.word	0x00027784
   23260:	08000104 	.word	0x08000104
   23264:	08000102 	.word	0x08000102
   23268:	08000101 	.word	0x08000101
   2326c:	08000100 	.word	0x08000100
   23270:	08000103 	.word	0x08000103

00023274 <am_hal_gpio_state_read>:
   23274:	b15a      	cbz	r2, 2328e <am_hal_gpio_state_read+0x1a>
   23276:	2831      	cmp	r0, #49	; 0x31
   23278:	d81d      	bhi.n	232b6 <am_hal_gpio_state_read+0x42>
   2327a:	08c3      	lsrs	r3, r0, #3
   2327c:	2901      	cmp	r1, #1
   2327e:	f003 0304 	and.w	r3, r3, #4
   23282:	f000 001f 	and.w	r0, r0, #31
   23286:	d01b      	beq.n	232c0 <am_hal_gpio_state_read+0x4c>
   23288:	2902      	cmp	r1, #2
   2328a:	d00b      	beq.n	232a4 <am_hal_gpio_state_read+0x30>
   2328c:	b109      	cbz	r1, 23292 <am_hal_gpio_state_read+0x1e>
   2328e:	2006      	movs	r0, #6
   23290:	4770      	bx	lr
   23292:	4910      	ldr	r1, [pc, #64]	; (232d4 <am_hal_gpio_state_read+0x60>)
   23294:	585b      	ldr	r3, [r3, r1]
   23296:	fa23 f000 	lsr.w	r0, r3, r0
   2329a:	f000 0001 	and.w	r0, r0, #1
   2329e:	6010      	str	r0, [r2, #0]
   232a0:	2000      	movs	r0, #0
   232a2:	4770      	bx	lr
   232a4:	490c      	ldr	r1, [pc, #48]	; (232d8 <am_hal_gpio_state_read+0x64>)
   232a6:	585b      	ldr	r3, [r3, r1]
   232a8:	fa23 f000 	lsr.w	r0, r3, r0
   232ac:	f000 0001 	and.w	r0, r0, #1
   232b0:	6010      	str	r0, [r2, #0]
   232b2:	2000      	movs	r0, #0
   232b4:	4770      	bx	lr
   232b6:	f04f 33ff 	mov.w	r3, #4294967295
   232ba:	6013      	str	r3, [r2, #0]
   232bc:	2005      	movs	r0, #5
   232be:	4770      	bx	lr
   232c0:	4906      	ldr	r1, [pc, #24]	; (232dc <am_hal_gpio_state_read+0x68>)
   232c2:	585b      	ldr	r3, [r3, r1]
   232c4:	fa23 f000 	lsr.w	r0, r3, r0
   232c8:	f000 0001 	and.w	r0, r0, #1
   232cc:	6010      	str	r0, [r2, #0]
   232ce:	2000      	movs	r0, #0
   232d0:	4770      	bx	lr
   232d2:	bf00      	nop
   232d4:	40010080 	.word	0x40010080
   232d8:	400100a0 	.word	0x400100a0
   232dc:	40010088 	.word	0x40010088

000232e0 <am_hal_gpio_state_write>:
   232e0:	2831      	cmp	r0, #49	; 0x31
   232e2:	d81a      	bhi.n	2331a <am_hal_gpio_state_write+0x3a>
   232e4:	b570      	push	{r4, r5, r6, lr}
   232e6:	2905      	cmp	r1, #5
   232e8:	b082      	sub	sp, #8
   232ea:	460d      	mov	r5, r1
   232ec:	d812      	bhi.n	23314 <am_hal_gpio_state_write+0x34>
   232ee:	f000 031f 	and.w	r3, r0, #31
   232f2:	2201      	movs	r2, #1
   232f4:	08c0      	lsrs	r0, r0, #3
   232f6:	fa02 f603 	lsl.w	r6, r2, r3
   232fa:	f000 0404 	and.w	r4, r0, #4
   232fe:	f000 f833 	bl	23368 <am_hal_interrupt_master_disable>
   23302:	3d01      	subs	r5, #1
   23304:	9001      	str	r0, [sp, #4]
   23306:	2d04      	cmp	r5, #4
   23308:	d821      	bhi.n	2334e <am_hal_gpio_state_write+0x6e>
   2330a:	e8df f005 	tbb	[pc, r5]
   2330e:	1512      	.short	0x1512
   23310:	1d1a      	.short	0x1d1a
   23312:	08          	.byte	0x08
   23313:	00          	.byte	0x00
   23314:	2006      	movs	r0, #6
   23316:	b002      	add	sp, #8
   23318:	bd70      	pop	{r4, r5, r6, pc}
   2331a:	2005      	movs	r0, #5
   2331c:	4770      	bx	lr
   2331e:	4a0d      	ldr	r2, [pc, #52]	; (23354 <am_hal_gpio_state_write+0x74>)
   23320:	58a3      	ldr	r3, [r4, r2]
   23322:	4073      	eors	r3, r6
   23324:	50a3      	str	r3, [r4, r2]
   23326:	9801      	ldr	r0, [sp, #4]
   23328:	f000 f822 	bl	23370 <am_hal_interrupt_master_set>
   2332c:	2000      	movs	r0, #0
   2332e:	b002      	add	sp, #8
   23330:	bd70      	pop	{r4, r5, r6, pc}
   23332:	4b09      	ldr	r3, [pc, #36]	; (23358 <am_hal_gpio_state_write+0x78>)
   23334:	50e6      	str	r6, [r4, r3]
   23336:	e7f6      	b.n	23326 <am_hal_gpio_state_write+0x46>
   23338:	4a08      	ldr	r2, [pc, #32]	; (2335c <am_hal_gpio_state_write+0x7c>)
   2333a:	58a3      	ldr	r3, [r4, r2]
   2333c:	4073      	eors	r3, r6
   2333e:	50a3      	str	r3, [r4, r2]
   23340:	e7f1      	b.n	23326 <am_hal_gpio_state_write+0x46>
   23342:	4b04      	ldr	r3, [pc, #16]	; (23354 <am_hal_gpio_state_write+0x74>)
   23344:	50e6      	str	r6, [r4, r3]
   23346:	e7ee      	b.n	23326 <am_hal_gpio_state_write+0x46>
   23348:	4b05      	ldr	r3, [pc, #20]	; (23360 <am_hal_gpio_state_write+0x80>)
   2334a:	50e6      	str	r6, [r4, r3]
   2334c:	e7eb      	b.n	23326 <am_hal_gpio_state_write+0x46>
   2334e:	4b05      	ldr	r3, [pc, #20]	; (23364 <am_hal_gpio_state_write+0x84>)
   23350:	50e6      	str	r6, [r4, r3]
   23352:	e7e8      	b.n	23326 <am_hal_gpio_state_write+0x46>
   23354:	400100b4 	.word	0x400100b4
   23358:	40010090 	.word	0x40010090
   2335c:	40010088 	.word	0x40010088
   23360:	400100a8 	.word	0x400100a8
   23364:	40010098 	.word	0x40010098

00023368 <am_hal_interrupt_master_disable>:
   23368:	f3ef 8010 	mrs	r0, PRIMASK
   2336c:	b672      	cpsid	i
   2336e:	4770      	bx	lr

00023370 <am_hal_interrupt_master_set>:
   23370:	f380 8810 	msr	PRIMASK, r0
   23374:	4770      	bx	lr
   23376:	bf00      	nop

00023378 <am_hal_mcuctrl_info_get>:
   23378:	2900      	cmp	r1, #0
   2337a:	f000 808f 	beq.w	2349c <am_hal_mcuctrl_info_get+0x124>
   2337e:	2801      	cmp	r0, #1
   23380:	b430      	push	{r4, r5}
   23382:	d006      	beq.n	23392 <am_hal_mcuctrl_info_get+0x1a>
   23384:	2802      	cmp	r0, #2
   23386:	d06d      	beq.n	23464 <am_hal_mcuctrl_info_get+0xec>
   23388:	2800      	cmp	r0, #0
   2338a:	d055      	beq.n	23438 <am_hal_mcuctrl_info_get+0xc0>
   2338c:	2006      	movs	r0, #6
   2338e:	bc30      	pop	{r4, r5}
   23390:	4770      	bx	lr
   23392:	4a43      	ldr	r2, [pc, #268]	; (234a0 <am_hal_mcuctrl_info_get+0x128>)
   23394:	4843      	ldr	r0, [pc, #268]	; (234a4 <am_hal_mcuctrl_info_get+0x12c>)
   23396:	6813      	ldr	r3, [r2, #0]
   23398:	600b      	str	r3, [r1, #0]
   2339a:	6854      	ldr	r4, [r2, #4]
   2339c:	604c      	str	r4, [r1, #4]
   2339e:	6894      	ldr	r4, [r2, #8]
   233a0:	608c      	str	r4, [r1, #8]
   233a2:	68d4      	ldr	r4, [r2, #12]
   233a4:	60cc      	str	r4, [r1, #12]
   233a6:	f3c3 5503 	ubfx	r5, r3, #20, #4
   233aa:	6914      	ldr	r4, [r2, #16]
   233ac:	610c      	str	r4, [r1, #16]
   233ae:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
   233b2:	4c3d      	ldr	r4, [pc, #244]	; (234a8 <am_hal_mcuctrl_info_get+0x130>)
   233b4:	6950      	ldr	r0, [r2, #20]
   233b6:	6148      	str	r0, [r1, #20]
   233b8:	f003 0201 	and.w	r2, r3, #1
   233bc:	f3c3 4303 	ubfx	r3, r3, #16, #4
   233c0:	e9c1 2506 	strd	r2, r5, [r1, #24]
   233c4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
   233c8:	4a38      	ldr	r2, [pc, #224]	; (234ac <am_hal_mcuctrl_info_get+0x134>)
   233ca:	620b      	str	r3, [r1, #32]
   233cc:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   233d0:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
   233d4:	b2db      	uxtb	r3, r3
   233d6:	f000 000f 	and.w	r0, r0, #15
   233da:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   233de:	624b      	str	r3, [r1, #36]	; 0x24
   233e0:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
   233e4:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
   233e8:	f3c3 1303 	ubfx	r3, r3, #4, #4
   233ec:	f000 000f 	and.w	r0, r0, #15
   233f0:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
   233f4:	628b      	str	r3, [r1, #40]	; 0x28
   233f6:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
   233fa:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
   233fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   23402:	f3c0 1003 	ubfx	r0, r0, #4, #4
   23406:	4303      	orrs	r3, r0
   23408:	62cb      	str	r3, [r1, #44]	; 0x2c
   2340a:	f8d2 40fc 	ldr.w	r4, [r2, #252]	; 0xfc
   2340e:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
   23412:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
   23416:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
   2341a:	b2db      	uxtb	r3, r3
   2341c:	041b      	lsls	r3, r3, #16
   2341e:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   23422:	fa5f fc82 	uxtb.w	ip, r2
   23426:	ea43 030c 	orr.w	r3, r3, ip
   2342a:	b2c2      	uxtb	r2, r0
   2342c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   23430:	630b      	str	r3, [r1, #48]	; 0x30
   23432:	2000      	movs	r0, #0
   23434:	bc30      	pop	{r4, r5}
   23436:	4770      	bx	lr
   23438:	4a19      	ldr	r2, [pc, #100]	; (234a0 <am_hal_mcuctrl_info_get+0x128>)
   2343a:	6993      	ldr	r3, [r2, #24]
   2343c:	f3c3 1480 	ubfx	r4, r3, #6, #1
   23440:	700c      	strb	r4, [r1, #0]
   23442:	f8d2 41a0 	ldr.w	r4, [r2, #416]	; 0x1a0
   23446:	f3c3 0380 	ubfx	r3, r3, #2, #1
   2344a:	704b      	strb	r3, [r1, #1]
   2344c:	f3c4 6381 	ubfx	r3, r4, #26, #2
   23450:	710b      	strb	r3, [r1, #4]
   23452:	6953      	ldr	r3, [r2, #20]
   23454:	f3c3 0240 	ubfx	r2, r3, #1, #1
   23458:	f003 0301 	and.w	r3, r3, #1
   2345c:	bc30      	pop	{r4, r5}
   2345e:	708a      	strb	r2, [r1, #2]
   23460:	70cb      	strb	r3, [r1, #3]
   23462:	4770      	bx	lr
   23464:	4a0e      	ldr	r2, [pc, #56]	; (234a0 <am_hal_mcuctrl_info_get+0x128>)
   23466:	6848      	ldr	r0, [r1, #4]
   23468:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
   2346c:	f003 0401 	and.w	r4, r3, #1
   23470:	700c      	strb	r4, [r1, #0]
   23472:	f3c3 0440 	ubfx	r4, r3, #1, #1
   23476:	720c      	strb	r4, [r1, #8]
   23478:	f8d2 41c4 	ldr.w	r4, [r2, #452]	; 0x1c4
   2347c:	60cc      	str	r4, [r1, #12]
   2347e:	f8d2 41c0 	ldr.w	r4, [r2, #448]	; 0x1c0
   23482:	4320      	orrs	r0, r4
   23484:	f3c3 0380 	ubfx	r3, r3, #2, #1
   23488:	6048      	str	r0, [r1, #4]
   2348a:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
   2348e:	740b      	strb	r3, [r1, #16]
   23490:	694b      	ldr	r3, [r1, #20]
   23492:	4313      	orrs	r3, r2
   23494:	2000      	movs	r0, #0
   23496:	bc30      	pop	{r4, r5}
   23498:	614b      	str	r3, [r1, #20]
   2349a:	4770      	bx	lr
   2349c:	2006      	movs	r0, #6
   2349e:	4770      	bx	lr
   234a0:	40020000 	.word	0x40020000
   234a4:	00027880 	.word	0x00027880
   234a8:	000278c0 	.word	0x000278c0
   234ac:	f0000f00 	.word	0xf0000f00

000234b0 <am_hal_pwrctrl_periph_enable>:
   234b0:	b570      	push	{r4, r5, r6, lr}
   234b2:	b082      	sub	sp, #8
   234b4:	4604      	mov	r4, r0
   234b6:	f7ff ff57 	bl	23368 <am_hal_interrupt_master_disable>
   234ba:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   234be:	4e0f      	ldr	r6, [pc, #60]	; (234fc <am_hal_pwrctrl_periph_enable+0x4c>)
   234c0:	4d0f      	ldr	r5, [pc, #60]	; (23500 <am_hal_pwrctrl_periph_enable+0x50>)
   234c2:	9001      	str	r0, [sp, #4]
   234c4:	00a4      	lsls	r4, r4, #2
   234c6:	68b3      	ldr	r3, [r6, #8]
   234c8:	592a      	ldr	r2, [r5, r4]
   234ca:	4313      	orrs	r3, r2
   234cc:	60b3      	str	r3, [r6, #8]
   234ce:	9801      	ldr	r0, [sp, #4]
   234d0:	442c      	add	r4, r5
   234d2:	f7ff ff4d 	bl	23370 <am_hal_interrupt_master_set>
   234d6:	20a0      	movs	r0, #160	; 0xa0
   234d8:	f7ff fd38 	bl	22f4c <am_hal_flash_delay>
   234dc:	69b3      	ldr	r3, [r6, #24]
   234de:	6864      	ldr	r4, [r4, #4]
   234e0:	4223      	tst	r3, r4
   234e2:	d103      	bne.n	234ec <am_hal_pwrctrl_periph_enable+0x3c>
   234e4:	20a0      	movs	r0, #160	; 0xa0
   234e6:	f7ff fd31 	bl	22f4c <am_hal_flash_delay>
   234ea:	69b3      	ldr	r3, [r6, #24]
   234ec:	4b03      	ldr	r3, [pc, #12]	; (234fc <am_hal_pwrctrl_periph_enable+0x4c>)
   234ee:	699b      	ldr	r3, [r3, #24]
   234f0:	4223      	tst	r3, r4
   234f2:	bf0c      	ite	eq
   234f4:	2001      	moveq	r0, #1
   234f6:	2000      	movne	r0, #0
   234f8:	b002      	add	sp, #8
   234fa:	bd70      	pop	{r4, r5, r6, pc}
   234fc:	40021000 	.word	0x40021000
   23500:	00027900 	.word	0x00027900

00023504 <am_hal_pwrctrl_periph_disable>:
   23504:	b570      	push	{r4, r5, r6, lr}
   23506:	b082      	sub	sp, #8
   23508:	4604      	mov	r4, r0
   2350a:	f7ff ff2d 	bl	23368 <am_hal_interrupt_master_disable>
   2350e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   23512:	4e10      	ldr	r6, [pc, #64]	; (23554 <am_hal_pwrctrl_periph_disable+0x50>)
   23514:	4d10      	ldr	r5, [pc, #64]	; (23558 <am_hal_pwrctrl_periph_disable+0x54>)
   23516:	9001      	str	r0, [sp, #4]
   23518:	00a4      	lsls	r4, r4, #2
   2351a:	68b3      	ldr	r3, [r6, #8]
   2351c:	592a      	ldr	r2, [r5, r4]
   2351e:	ea23 0302 	bic.w	r3, r3, r2
   23522:	60b3      	str	r3, [r6, #8]
   23524:	9801      	ldr	r0, [sp, #4]
   23526:	442c      	add	r4, r5
   23528:	f7ff ff22 	bl	23370 <am_hal_interrupt_master_set>
   2352c:	20a0      	movs	r0, #160	; 0xa0
   2352e:	f7ff fd0d 	bl	22f4c <am_hal_flash_delay>
   23532:	69b3      	ldr	r3, [r6, #24]
   23534:	6864      	ldr	r4, [r4, #4]
   23536:	4223      	tst	r3, r4
   23538:	d003      	beq.n	23542 <am_hal_pwrctrl_periph_disable+0x3e>
   2353a:	20a0      	movs	r0, #160	; 0xa0
   2353c:	f7ff fd06 	bl	22f4c <am_hal_flash_delay>
   23540:	69b3      	ldr	r3, [r6, #24]
   23542:	4b04      	ldr	r3, [pc, #16]	; (23554 <am_hal_pwrctrl_periph_disable+0x50>)
   23544:	699b      	ldr	r3, [r3, #24]
   23546:	4223      	tst	r3, r4
   23548:	bf14      	ite	ne
   2354a:	2001      	movne	r0, #1
   2354c:	2000      	moveq	r0, #0
   2354e:	b002      	add	sp, #8
   23550:	bd70      	pop	{r4, r5, r6, pc}
   23552:	bf00      	nop
   23554:	40021000 	.word	0x40021000
   23558:	00027900 	.word	0x00027900

0002355c <am_hal_pwrctrl_low_power_init>:
   2355c:	b530      	push	{r4, r5, lr}
   2355e:	4b69      	ldr	r3, [pc, #420]	; (23704 <am_hal_pwrctrl_low_power_init+0x1a8>)
   23560:	681a      	ldr	r2, [r3, #0]
   23562:	b085      	sub	sp, #20
   23564:	b912      	cbnz	r2, 2356c <am_hal_pwrctrl_low_power_init+0x10>
   23566:	4a68      	ldr	r2, [pc, #416]	; (23708 <am_hal_pwrctrl_low_power_init+0x1ac>)
   23568:	6812      	ldr	r2, [r2, #0]
   2356a:	601a      	str	r2, [r3, #0]
   2356c:	4b67      	ldr	r3, [pc, #412]	; (2370c <am_hal_pwrctrl_low_power_init+0x1b0>)
   2356e:	68db      	ldr	r3, [r3, #12]
   23570:	b2db      	uxtb	r3, r3
   23572:	2b12      	cmp	r3, #18
   23574:	d104      	bne.n	23580 <am_hal_pwrctrl_low_power_init+0x24>
   23576:	4c66      	ldr	r4, [pc, #408]	; (23710 <am_hal_pwrctrl_low_power_init+0x1b4>)
   23578:	6863      	ldr	r3, [r4, #4]
   2357a:	07d8      	lsls	r0, r3, #31
   2357c:	f100 8088 	bmi.w	23690 <am_hal_pwrctrl_low_power_init+0x134>
   23580:	4b62      	ldr	r3, [pc, #392]	; (2370c <am_hal_pwrctrl_low_power_init+0x1b0>)
   23582:	68da      	ldr	r2, [r3, #12]
   23584:	b2d2      	uxtb	r2, r2
   23586:	2a20      	cmp	r2, #32
   23588:	d934      	bls.n	235f4 <am_hal_pwrctrl_low_power_init+0x98>
   2358a:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
   2358e:	2002      	movs	r0, #2
   23590:	f360 4213 	bfi	r2, r0, #16, #4
   23594:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
   23598:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
   2359c:	2203      	movs	r2, #3
   2359e:	f362 5117 	bfi	r1, r2, #20, #4
   235a2:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
   235a6:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   235aa:	2405      	movs	r4, #5
   235ac:	f364 0103 	bfi	r1, r4, #0, #4
   235b0:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   235b4:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   235b8:	f360 1107 	bfi	r1, r0, #4, #4
   235bc:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   235c0:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   235c4:	2406      	movs	r4, #6
   235c6:	f364 210b 	bfi	r1, r4, #8, #4
   235ca:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   235ce:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   235d2:	2001      	movs	r0, #1
   235d4:	f360 310f 	bfi	r1, r0, #12, #4
   235d8:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   235dc:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   235e0:	f362 61de 	bfi	r1, r2, #27, #4
   235e4:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   235e8:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
   235ec:	f362 0103 	bfi	r1, r2, #0, #4
   235f0:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
   235f4:	4a45      	ldr	r2, [pc, #276]	; (2370c <am_hal_pwrctrl_low_power_init+0x1b0>)
   235f6:	68d3      	ldr	r3, [r2, #12]
   235f8:	b2db      	uxtb	r3, r3
   235fa:	2b11      	cmp	r3, #17
   235fc:	d905      	bls.n	2360a <am_hal_pwrctrl_low_power_init+0xae>
   235fe:	f8d2 335c 	ldr.w	r3, [r2, #860]	; 0x35c
   23602:	f36f 6318 	bfc	r3, #24, #1
   23606:	f8c2 335c 	str.w	r3, [r2, #860]	; 0x35c
   2360a:	2100      	movs	r1, #0
   2360c:	200c      	movs	r0, #12
   2360e:	f7ff fa21 	bl	22a54 <am_hal_cachectrl_control>
   23612:	4b3f      	ldr	r3, [pc, #252]	; (23710 <am_hal_pwrctrl_low_power_init+0x1b4>)
   23614:	699b      	ldr	r3, [r3, #24]
   23616:	f3c3 2500 	ubfx	r5, r3, #8, #1
   2361a:	05db      	lsls	r3, r3, #23
   2361c:	d420      	bmi.n	23660 <am_hal_pwrctrl_low_power_init+0x104>
   2361e:	4c3b      	ldr	r4, [pc, #236]	; (2370c <am_hal_pwrctrl_low_power_init+0x1b0>)
   23620:	68e3      	ldr	r3, [r4, #12]
   23622:	b2db      	uxtb	r3, r3
   23624:	2b11      	cmp	r3, #17
   23626:	d84e      	bhi.n	236c6 <am_hal_pwrctrl_low_power_init+0x16a>
   23628:	4c38      	ldr	r4, [pc, #224]	; (2370c <am_hal_pwrctrl_low_power_init+0x1b0>)
   2362a:	493a      	ldr	r1, [pc, #232]	; (23714 <am_hal_pwrctrl_low_power_init+0x1b8>)
   2362c:	7e22      	ldrb	r2, [r4, #24]
   2362e:	2001      	movs	r0, #1
   23630:	4302      	orrs	r2, r0
   23632:	2307      	movs	r3, #7
   23634:	7622      	strb	r2, [r4, #24]
   23636:	9000      	str	r0, [sp, #0]
   23638:	461a      	mov	r2, r3
   2363a:	f242 7010 	movw	r0, #10000	; 0x2710
   2363e:	f7ff fc95 	bl	22f6c <am_hal_flash_delay_status_check>
   23642:	2800      	cmp	r0, #0
   23644:	d15a      	bne.n	236fc <am_hal_pwrctrl_low_power_init+0x1a0>
   23646:	4b32      	ldr	r3, [pc, #200]	; (23710 <am_hal_pwrctrl_low_power_init+0x1b4>)
   23648:	681a      	ldr	r2, [r3, #0]
   2364a:	f042 0201 	orr.w	r2, r2, #1
   2364e:	601a      	str	r2, [r3, #0]
   23650:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   23652:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   23656:	625a      	str	r2, [r3, #36]	; 0x24
   23658:	68e3      	ldr	r3, [r4, #12]
   2365a:	b2db      	uxtb	r3, r3
   2365c:	2b11      	cmp	r3, #17
   2365e:	d002      	beq.n	23666 <am_hal_pwrctrl_low_power_init+0x10a>
   23660:	2000      	movs	r0, #0
   23662:	b005      	add	sp, #20
   23664:	bd30      	pop	{r4, r5, pc}
   23666:	f8d4 335c 	ldr.w	r3, [r4, #860]	; 0x35c
   2366a:	f360 5356 	bfi	r3, r0, #21, #2
   2366e:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
   23672:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
   23676:	220f      	movs	r2, #15
   23678:	f362 138b 	bfi	r3, r2, #6, #6
   2367c:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
   23680:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
   23684:	f362 0305 	bfi	r3, r2, #0, #6
   23688:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
   2368c:	b005      	add	sp, #20
   2368e:	bd30      	pop	{r4, r5, pc}
   23690:	f7ff fe6a 	bl	23368 <am_hal_interrupt_master_disable>
   23694:	9002      	str	r0, [sp, #8]
   23696:	68a3      	ldr	r3, [r4, #8]
   23698:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   2369c:	60a3      	str	r3, [r4, #8]
   2369e:	9802      	ldr	r0, [sp, #8]
   236a0:	f7ff fe66 	bl	23370 <am_hal_interrupt_master_set>
   236a4:	20a0      	movs	r0, #160	; 0xa0
   236a6:	f7ff fc51 	bl	22f4c <am_hal_flash_delay>
   236aa:	69a3      	ldr	r3, [r4, #24]
   236ac:	0619      	lsls	r1, r3, #24
   236ae:	d403      	bmi.n	236b8 <am_hal_pwrctrl_low_power_init+0x15c>
   236b0:	20a0      	movs	r0, #160	; 0xa0
   236b2:	f7ff fc4b 	bl	22f4c <am_hal_flash_delay>
   236b6:	69a3      	ldr	r3, [r4, #24]
   236b8:	4b15      	ldr	r3, [pc, #84]	; (23710 <am_hal_pwrctrl_low_power_init+0x1b4>)
   236ba:	699b      	ldr	r3, [r3, #24]
   236bc:	061a      	lsls	r2, r3, #24
   236be:	f53f af5f 	bmi.w	23580 <am_hal_pwrctrl_low_power_init+0x24>
   236c2:	2001      	movs	r0, #1
   236c4:	e7cd      	b.n	23662 <am_hal_pwrctrl_low_power_init+0x106>
   236c6:	f7ff fe4f 	bl	23368 <am_hal_interrupt_master_disable>
   236ca:	9003      	str	r0, [sp, #12]
   236cc:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
   236d0:	2219      	movs	r2, #25
   236d2:	f362 138b 	bfi	r3, r2, #6, #6
   236d6:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
   236da:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
   236de:	210c      	movs	r1, #12
   236e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   236e4:	f361 0205 	bfi	r2, r1, #0, #6
   236e8:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
   236ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   236ee:	f365 5296 	bfi	r2, r5, #22, #1
   236f2:	63da      	str	r2, [r3, #60]	; 0x3c
   236f4:	9803      	ldr	r0, [sp, #12]
   236f6:	f7ff fe3b 	bl	23370 <am_hal_interrupt_master_set>
   236fa:	e795      	b.n	23628 <am_hal_pwrctrl_low_power_init+0xcc>
   236fc:	2004      	movs	r0, #4
   236fe:	b005      	add	sp, #20
   23700:	bd30      	pop	{r4, r5, pc}
   23702:	bf00      	nop
   23704:	1000a26c 	.word	0x1000a26c
   23708:	4ffff000 	.word	0x4ffff000
   2370c:	40020000 	.word	0x40020000
   23710:	40021000 	.word	0x40021000
   23714:	40020018 	.word	0x40020018

00023718 <am_hal_queue_init>:
   23718:	b410      	push	{r4}
   2371a:	2400      	movs	r4, #0
   2371c:	e9c0 4400 	strd	r4, r4, [r0]
   23720:	e9c0 4302 	strd	r4, r3, [r0, #8]
   23724:	e9c0 2104 	strd	r2, r1, [r0, #16]
   23728:	f85d 4b04 	ldr.w	r4, [sp], #4
   2372c:	4770      	bx	lr
   2372e:	bf00      	nop

00023730 <am_hal_queue_item_add>:
   23730:	b570      	push	{r4, r5, r6, lr}
   23732:	6905      	ldr	r5, [r0, #16]
   23734:	b082      	sub	sp, #8
   23736:	4604      	mov	r4, r0
   23738:	fb02 f505 	mul.w	r5, r2, r5
   2373c:	460e      	mov	r6, r1
   2373e:	f7ff fe13 	bl	23368 <am_hal_interrupt_master_disable>
   23742:	68e2      	ldr	r2, [r4, #12]
   23744:	9001      	str	r0, [sp, #4]
   23746:	68a0      	ldr	r0, [r4, #8]
   23748:	1a13      	subs	r3, r2, r0
   2374a:	42ab      	cmp	r3, r5
   2374c:	d31c      	bcc.n	23788 <am_hal_queue_item_add+0x58>
   2374e:	b195      	cbz	r5, 23776 <am_hal_queue_item_add+0x46>
   23750:	6823      	ldr	r3, [r4, #0]
   23752:	b306      	cbz	r6, 23796 <am_hal_queue_item_add+0x66>
   23754:	1e71      	subs	r1, r6, #1
   23756:	194e      	adds	r6, r1, r5
   23758:	6962      	ldr	r2, [r4, #20]
   2375a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   2375e:	54d0      	strb	r0, [r2, r3]
   23760:	6823      	ldr	r3, [r4, #0]
   23762:	68e0      	ldr	r0, [r4, #12]
   23764:	3301      	adds	r3, #1
   23766:	428e      	cmp	r6, r1
   23768:	fbb3 f2f0 	udiv	r2, r3, r0
   2376c:	fb00 3312 	mls	r3, r0, r2, r3
   23770:	6023      	str	r3, [r4, #0]
   23772:	d1f1      	bne.n	23758 <am_hal_queue_item_add+0x28>
   23774:	68a0      	ldr	r0, [r4, #8]
   23776:	4405      	add	r5, r0
   23778:	60a5      	str	r5, [r4, #8]
   2377a:	9801      	ldr	r0, [sp, #4]
   2377c:	f7ff fdf8 	bl	23370 <am_hal_interrupt_master_set>
   23780:	2401      	movs	r4, #1
   23782:	4620      	mov	r0, r4
   23784:	b002      	add	sp, #8
   23786:	bd70      	pop	{r4, r5, r6, pc}
   23788:	9801      	ldr	r0, [sp, #4]
   2378a:	f7ff fdf1 	bl	23370 <am_hal_interrupt_master_set>
   2378e:	2400      	movs	r4, #0
   23790:	4620      	mov	r0, r4
   23792:	b002      	add	sp, #8
   23794:	bd70      	pop	{r4, r5, r6, pc}
   23796:	4631      	mov	r1, r6
   23798:	3101      	adds	r1, #1
   2379a:	3301      	adds	r3, #1
   2379c:	428d      	cmp	r5, r1
   2379e:	fbb3 f6f2 	udiv	r6, r3, r2
   237a2:	fb02 3316 	mls	r3, r2, r6, r3
   237a6:	d1f7      	bne.n	23798 <am_hal_queue_item_add+0x68>
   237a8:	6023      	str	r3, [r4, #0]
   237aa:	e7e4      	b.n	23776 <am_hal_queue_item_add+0x46>

000237ac <am_hal_queue_item_get>:
   237ac:	b570      	push	{r4, r5, r6, lr}
   237ae:	6905      	ldr	r5, [r0, #16]
   237b0:	4604      	mov	r4, r0
   237b2:	b082      	sub	sp, #8
   237b4:	fb02 f505 	mul.w	r5, r2, r5
   237b8:	460e      	mov	r6, r1
   237ba:	f7ff fdd5 	bl	23368 <am_hal_interrupt_master_disable>
   237be:	68a2      	ldr	r2, [r4, #8]
   237c0:	9001      	str	r0, [sp, #4]
   237c2:	42aa      	cmp	r2, r5
   237c4:	d31c      	bcc.n	23800 <am_hal_queue_item_get+0x54>
   237c6:	b195      	cbz	r5, 237ee <am_hal_queue_item_get+0x42>
   237c8:	6863      	ldr	r3, [r4, #4]
   237ca:	b306      	cbz	r6, 2380e <am_hal_queue_item_get+0x62>
   237cc:	1e71      	subs	r1, r6, #1
   237ce:	194e      	adds	r6, r1, r5
   237d0:	6962      	ldr	r2, [r4, #20]
   237d2:	5cd3      	ldrb	r3, [r2, r3]
   237d4:	f801 3f01 	strb.w	r3, [r1, #1]!
   237d8:	6863      	ldr	r3, [r4, #4]
   237da:	68e0      	ldr	r0, [r4, #12]
   237dc:	3301      	adds	r3, #1
   237de:	428e      	cmp	r6, r1
   237e0:	fbb3 f2f0 	udiv	r2, r3, r0
   237e4:	fb00 3312 	mls	r3, r0, r2, r3
   237e8:	6063      	str	r3, [r4, #4]
   237ea:	d1f1      	bne.n	237d0 <am_hal_queue_item_get+0x24>
   237ec:	68a2      	ldr	r2, [r4, #8]
   237ee:	9801      	ldr	r0, [sp, #4]
   237f0:	1b52      	subs	r2, r2, r5
   237f2:	60a2      	str	r2, [r4, #8]
   237f4:	f7ff fdbc 	bl	23370 <am_hal_interrupt_master_set>
   237f8:	2401      	movs	r4, #1
   237fa:	4620      	mov	r0, r4
   237fc:	b002      	add	sp, #8
   237fe:	bd70      	pop	{r4, r5, r6, pc}
   23800:	9801      	ldr	r0, [sp, #4]
   23802:	f7ff fdb5 	bl	23370 <am_hal_interrupt_master_set>
   23806:	2400      	movs	r4, #0
   23808:	4620      	mov	r0, r4
   2380a:	b002      	add	sp, #8
   2380c:	bd70      	pop	{r4, r5, r6, pc}
   2380e:	68e0      	ldr	r0, [r4, #12]
   23810:	4631      	mov	r1, r6
   23812:	3101      	adds	r1, #1
   23814:	3301      	adds	r3, #1
   23816:	42a9      	cmp	r1, r5
   23818:	fbb3 f6f0 	udiv	r6, r3, r0
   2381c:	fb00 3316 	mls	r3, r0, r6, r3
   23820:	d1f7      	bne.n	23812 <am_hal_queue_item_get+0x66>
   23822:	6063      	str	r3, [r4, #4]
   23824:	e7e3      	b.n	237ee <am_hal_queue_item_get+0x42>
   23826:	bf00      	nop

00023828 <am_hal_stimer_config>:
   23828:	4a03      	ldr	r2, [pc, #12]	; (23838 <am_hal_stimer_config+0x10>)
   2382a:	4603      	mov	r3, r0
   2382c:	f8d2 0140 	ldr.w	r0, [r2, #320]	; 0x140
   23830:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
   23834:	4770      	bx	lr
   23836:	bf00      	nop
   23838:	40008000 	.word	0x40008000

0002383c <am_hal_stimer_counter_get>:
   2383c:	b500      	push	{lr}
   2383e:	b085      	sub	sp, #20
   23840:	4805      	ldr	r0, [pc, #20]	; (23858 <am_hal_stimer_counter_get+0x1c>)
   23842:	a901      	add	r1, sp, #4
   23844:	f7ff fbd2 	bl	22fec <am_hal_triple_read>
   23848:	e9dd 3001 	ldrd	r3, r0, [sp, #4]
   2384c:	4283      	cmp	r3, r0
   2384e:	bf18      	it	ne
   23850:	9803      	ldrne	r0, [sp, #12]
   23852:	b005      	add	sp, #20
   23854:	f85d fb04 	ldr.w	pc, [sp], #4
   23858:	40008144 	.word	0x40008144

0002385c <am_hal_stimer_compare_delta_set>:
   2385c:	2807      	cmp	r0, #7
   2385e:	d900      	bls.n	23862 <am_hal_stimer_compare_delta_set+0x6>
   23860:	4770      	bx	lr
   23862:	b530      	push	{r4, r5, lr}
   23864:	b083      	sub	sp, #12
   23866:	460c      	mov	r4, r1
   23868:	4605      	mov	r5, r0
   2386a:	f7ff fd7d 	bl	23368 <am_hal_interrupt_master_disable>
   2386e:	4a27      	ldr	r2, [pc, #156]	; (2390c <am_hal_stimer_compare_delta_set+0xb0>)
   23870:	9001      	str	r0, [sp, #4]
   23872:	4b27      	ldr	r3, [pc, #156]	; (23910 <am_hal_stimer_compare_delta_set+0xb4>)
   23874:	f8d2 1140 	ldr.w	r1, [r2, #320]	; 0x140
   23878:	f8d2 0140 	ldr.w	r0, [r2, #320]	; 0x140
   2387c:	f44f 7c80 	mov.w	ip, #256	; 0x100
   23880:	442b      	add	r3, r5
   23882:	fa0c f505 	lsl.w	r5, ip, r5
   23886:	009b      	lsls	r3, r3, #2
   23888:	ea20 0005 	bic.w	r0, r0, r5
   2388c:	f8c2 0140 	str.w	r0, [r2, #320]	; 0x140
   23890:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
   23894:	601c      	str	r4, [r3, #0]
   23896:	6818      	ldr	r0, [r3, #0]
   23898:	4422      	add	r2, r4
   2389a:	eba0 0c02 	sub.w	ip, r0, r2
   2389e:	f1bc 0f00 	cmp.w	ip, #0
   238a2:	db03      	blt.n	238ac <am_hal_stimer_compare_delta_set+0x50>
   238a4:	320a      	adds	r2, #10
   238a6:	1a82      	subs	r2, r0, r2
   238a8:	2a00      	cmp	r2, #0
   238aa:	dd22      	ble.n	238f2 <am_hal_stimer_compare_delta_set+0x96>
   238ac:	4a17      	ldr	r2, [pc, #92]	; (2390c <am_hal_stimer_compare_delta_set+0xb0>)
   238ae:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
   238b2:	601c      	str	r4, [r3, #0]
   238b4:	6818      	ldr	r0, [r3, #0]
   238b6:	4422      	add	r2, r4
   238b8:	eba0 0c02 	sub.w	ip, r0, r2
   238bc:	f1bc 0f00 	cmp.w	ip, #0
   238c0:	db03      	blt.n	238ca <am_hal_stimer_compare_delta_set+0x6e>
   238c2:	320a      	adds	r2, #10
   238c4:	1a82      	subs	r2, r0, r2
   238c6:	2a00      	cmp	r2, #0
   238c8:	dd13      	ble.n	238f2 <am_hal_stimer_compare_delta_set+0x96>
   238ca:	4a10      	ldr	r2, [pc, #64]	; (2390c <am_hal_stimer_compare_delta_set+0xb0>)
   238cc:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
   238d0:	601c      	str	r4, [r3, #0]
   238d2:	6818      	ldr	r0, [r3, #0]
   238d4:	4422      	add	r2, r4
   238d6:	eba0 0c02 	sub.w	ip, r0, r2
   238da:	f1bc 0f00 	cmp.w	ip, #0
   238de:	db03      	blt.n	238e8 <am_hal_stimer_compare_delta_set+0x8c>
   238e0:	320a      	adds	r2, #10
   238e2:	1a82      	subs	r2, r0, r2
   238e4:	2a00      	cmp	r2, #0
   238e6:	dd04      	ble.n	238f2 <am_hal_stimer_compare_delta_set+0x96>
   238e8:	4a08      	ldr	r2, [pc, #32]	; (2390c <am_hal_stimer_compare_delta_set+0xb0>)
   238ea:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
   238ee:	601c      	str	r4, [r3, #0]
   238f0:	681b      	ldr	r3, [r3, #0]
   238f2:	4b06      	ldr	r3, [pc, #24]	; (2390c <am_hal_stimer_compare_delta_set+0xb0>)
   238f4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   238f8:	400d      	ands	r5, r1
   238fa:	4315      	orrs	r5, r2
   238fc:	f8c3 5140 	str.w	r5, [r3, #320]	; 0x140
   23900:	9801      	ldr	r0, [sp, #4]
   23902:	b003      	add	sp, #12
   23904:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   23908:	f7ff bd32 	b.w	23370 <am_hal_interrupt_master_set>
   2390c:	40008000 	.word	0x40008000
   23910:	10002054 	.word	0x10002054

00023914 <am_hal_stimer_int_enable>:
   23914:	4a03      	ldr	r2, [pc, #12]	; (23924 <am_hal_stimer_int_enable+0x10>)
   23916:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
   2391a:	4318      	orrs	r0, r3
   2391c:	f8c2 0300 	str.w	r0, [r2, #768]	; 0x300
   23920:	4770      	bx	lr
   23922:	bf00      	nop
   23924:	40008000 	.word	0x40008000

00023928 <am_hal_stimer_int_clear>:
   23928:	4b01      	ldr	r3, [pc, #4]	; (23930 <am_hal_stimer_int_clear+0x8>)
   2392a:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   2392e:	4770      	bx	lr
   23930:	40008000 	.word	0x40008000

00023934 <am_hal_stimer_int_status_get>:
   23934:	4a04      	ldr	r2, [pc, #16]	; (23948 <am_hal_stimer_int_status_get+0x14>)
   23936:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
   2393a:	b110      	cbz	r0, 23942 <am_hal_stimer_int_status_get+0xe>
   2393c:	f8d2 2300 	ldr.w	r2, [r2, #768]	; 0x300
   23940:	4013      	ands	r3, r2
   23942:	4618      	mov	r0, r3
   23944:	4770      	bx	lr
   23946:	bf00      	nop
   23948:	40008000 	.word	0x40008000

0002394c <am_hal_sysctrl_sleep>:
   2394c:	b510      	push	{r4, lr}
   2394e:	b082      	sub	sp, #8
   23950:	4604      	mov	r4, r0
   23952:	f7ff fd09 	bl	23368 <am_hal_interrupt_master_disable>
   23956:	9001      	str	r0, [sp, #4]
   23958:	b124      	cbz	r4, 23964 <am_hal_sysctrl_sleep+0x18>
   2395a:	4b12      	ldr	r3, [pc, #72]	; (239a4 <am_hal_sysctrl_sleep+0x58>)
   2395c:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
   23960:	07db      	lsls	r3, r3, #31
   23962:	d513      	bpl.n	2398c <am_hal_sysctrl_sleep+0x40>
   23964:	4a10      	ldr	r2, [pc, #64]	; (239a8 <am_hal_sysctrl_sleep+0x5c>)
   23966:	6913      	ldr	r3, [r2, #16]
   23968:	f023 0304 	bic.w	r3, r3, #4
   2396c:	6113      	str	r3, [r2, #16]
   2396e:	f3bf 8f4f 	dsb	sy
   23972:	4a0e      	ldr	r2, [pc, #56]	; (239ac <am_hal_sysctrl_sleep+0x60>)
   23974:	4b0e      	ldr	r3, [pc, #56]	; (239b0 <am_hal_sysctrl_sleep+0x64>)
   23976:	6812      	ldr	r2, [r2, #0]
   23978:	601a      	str	r2, [r3, #0]
   2397a:	bf30      	wfi
   2397c:	f3bf 8f6f 	isb	sy
   23980:	9801      	ldr	r0, [sp, #4]
   23982:	b002      	add	sp, #8
   23984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23988:	f7ff bcf2 	b.w	23370 <am_hal_interrupt_master_set>
   2398c:	4b09      	ldr	r3, [pc, #36]	; (239b4 <am_hal_sysctrl_sleep+0x68>)
   2398e:	681a      	ldr	r2, [r3, #0]
   23990:	b912      	cbnz	r2, 23998 <am_hal_sysctrl_sleep+0x4c>
   23992:	4a09      	ldr	r2, [pc, #36]	; (239b8 <am_hal_sysctrl_sleep+0x6c>)
   23994:	6812      	ldr	r2, [r2, #0]
   23996:	601a      	str	r2, [r3, #0]
   23998:	4a03      	ldr	r2, [pc, #12]	; (239a8 <am_hal_sysctrl_sleep+0x5c>)
   2399a:	6913      	ldr	r3, [r2, #16]
   2399c:	f043 0304 	orr.w	r3, r3, #4
   239a0:	6113      	str	r3, [r2, #16]
   239a2:	e7e4      	b.n	2396e <am_hal_sysctrl_sleep+0x22>
   239a4:	40020000 	.word	0x40020000
   239a8:	e000ed00 	.word	0xe000ed00
   239ac:	5fff0000 	.word	0x5fff0000
   239b0:	1000a270 	.word	0x1000a270
   239b4:	1000a26c 	.word	0x1000a26c
   239b8:	4ffff000 	.word	0x4ffff000

000239bc <am_hal_sysctrl_fpu_enable>:
   239bc:	4b02      	ldr	r3, [pc, #8]	; (239c8 <am_hal_sysctrl_fpu_enable+0xc>)
   239be:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   239c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   239c6:	4770      	bx	lr
   239c8:	e000ed00 	.word	0xe000ed00

000239cc <am_hal_sysctrl_fpu_stacking_enable>:
   239cc:	b510      	push	{r4, lr}
   239ce:	b082      	sub	sp, #8
   239d0:	4604      	mov	r4, r0
   239d2:	f7ff fcc9 	bl	23368 <am_hal_interrupt_master_disable>
   239d6:	4909      	ldr	r1, [pc, #36]	; (239fc <am_hal_sysctrl_fpu_stacking_enable+0x30>)
   239d8:	9001      	str	r0, [sp, #4]
   239da:	6b4a      	ldr	r2, [r1, #52]	; 0x34
   239dc:	2c00      	cmp	r4, #0
   239de:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
   239e2:	bf14      	ite	ne
   239e4:	f04f 4340 	movne.w	r3, #3221225472	; 0xc0000000
   239e8:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
   239ec:	4313      	orrs	r3, r2
   239ee:	634b      	str	r3, [r1, #52]	; 0x34
   239f0:	9801      	ldr	r0, [sp, #4]
   239f2:	b002      	add	sp, #8
   239f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   239f8:	f7ff bcba 	b.w	23370 <am_hal_interrupt_master_set>
   239fc:	e000ef00 	.word	0xe000ef00

00023a00 <am_bsp_low_power_init>:
   23a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23a02:	f7ff fdab 	bl	2355c <am_hal_pwrctrl_low_power_init>
   23a06:	f000 f877 	bl	23af8 <am_hal_rtc_osc_disable>
   23a0a:	4b0b      	ldr	r3, [pc, #44]	; (23a38 <am_bsp_low_power_init+0x38>)
   23a0c:	4f0b      	ldr	r7, [pc, #44]	; (23a3c <am_bsp_low_power_init+0x3c>)
   23a0e:	681e      	ldr	r6, [r3, #0]
   23a10:	2400      	movs	r4, #0
   23a12:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
   23a16:	4631      	mov	r1, r6
   23a18:	4628      	mov	r0, r5
   23a1a:	f7ff faf5 	bl	23008 <am_hal_gpio_pinconfig>
   23a1e:	2103      	movs	r1, #3
   23a20:	4628      	mov	r0, r5
   23a22:	f7ff fc5d 	bl	232e0 <am_hal_gpio_state_write>
   23a26:	3401      	adds	r4, #1
   23a28:	2100      	movs	r1, #0
   23a2a:	4628      	mov	r0, r5
   23a2c:	f7ff fc58 	bl	232e0 <am_hal_gpio_state_write>
   23a30:	2c05      	cmp	r4, #5
   23a32:	d1ee      	bne.n	23a12 <am_bsp_low_power_init+0x12>
   23a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23a36:	bf00      	nop
   23a38:	00027718 	.word	0x00027718
   23a3c:	10003e24 	.word	0x10003e24

00023a40 <am_bsp_itm_printf_enable>:
   23a40:	b500      	push	{lr}
   23a42:	4b0b      	ldr	r3, [pc, #44]	; (23a70 <am_bsp_itm_printf_enable+0x30>)
   23a44:	b087      	sub	sp, #28
   23a46:	2201      	movs	r2, #1
   23a48:	601a      	str	r2, [r3, #0]
   23a4a:	f000 f819 	bl	23a80 <am_hal_itm_enable>
   23a4e:	4b09      	ldr	r3, [pc, #36]	; (23a74 <am_bsp_itm_printf_enable+0x34>)
   23a50:	9301      	str	r3, [sp, #4]
   23a52:	a801      	add	r0, sp, #4
   23a54:	f000 f85a 	bl	23b0c <am_hal_tpiu_enable>
   23a58:	4b07      	ldr	r3, [pc, #28]	; (23a78 <am_bsp_itm_printf_enable+0x38>)
   23a5a:	2029      	movs	r0, #41	; 0x29
   23a5c:	6819      	ldr	r1, [r3, #0]
   23a5e:	f7ff fad3 	bl	23008 <am_hal_gpio_pinconfig>
   23a62:	4806      	ldr	r0, [pc, #24]	; (23a7c <am_bsp_itm_printf_enable+0x3c>)
   23a64:	f7f9 fae8 	bl	1d038 <am_util_stdio_printf_init>
   23a68:	b007      	add	sp, #28
   23a6a:	f85d fb04 	ldr.w	pc, [sp], #4
   23a6e:	bf00      	nop
   23a70:	1000a274 	.word	0x1000a274
   23a74:	000f4240 	.word	0x000f4240
   23a78:	000279b4 	.word	0x000279b4
   23a7c:	00023ac9 	.word	0x00023ac9

00023a80 <am_hal_itm_enable>:
   23a80:	4a0e      	ldr	r2, [pc, #56]	; (23abc <am_hal_itm_enable+0x3c>)
   23a82:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   23a86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   23a8a:	b410      	push	{r4}
   23a8c:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
   23a90:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   23a94:	01db      	lsls	r3, r3, #7
   23a96:	d5fb      	bpl.n	23a90 <am_hal_itm_enable+0x10>
   23a98:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
   23a9c:	4c08      	ldr	r4, [pc, #32]	; (23ac0 <am_hal_itm_enable+0x40>)
   23a9e:	4a09      	ldr	r2, [pc, #36]	; (23ac4 <am_hal_itm_enable+0x44>)
   23aa0:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
   23aa4:	200f      	movs	r0, #15
   23aa6:	f04f 31ff 	mov.w	r1, #4294967295
   23aaa:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
   23aae:	f85d 4b04 	ldr.w	r4, [sp], #4
   23ab2:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
   23ab6:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
   23aba:	4770      	bx	lr
   23abc:	e000ed00 	.word	0xe000ed00
   23ac0:	c5acce55 	.word	0xc5acce55
   23ac4:	00150511 	.word	0x00150511

00023ac8 <am_hal_itm_print>:
   23ac8:	7803      	ldrb	r3, [r0, #0]
   23aca:	b1a3      	cbz	r3, 23af6 <am_hal_itm_print+0x2e>
   23acc:	4603      	mov	r3, r0
   23ace:	f1c0 0c01 	rsb	ip, r0, #1
   23ad2:	eb0c 0103 	add.w	r1, ip, r3
   23ad6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   23ada:	2a00      	cmp	r2, #0
   23adc:	d1f9      	bne.n	23ad2 <am_hal_itm_print+0xa>
   23ade:	4401      	add	r1, r0
   23ae0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   23ae4:	f810 cb01 	ldrb.w	ip, [r0], #1
   23ae8:	6813      	ldr	r3, [r2, #0]
   23aea:	2b00      	cmp	r3, #0
   23aec:	d0fc      	beq.n	23ae8 <am_hal_itm_print+0x20>
   23aee:	4288      	cmp	r0, r1
   23af0:	f882 c000 	strb.w	ip, [r2]
   23af4:	d1f6      	bne.n	23ae4 <am_hal_itm_print+0x1c>
   23af6:	4770      	bx	lr

00023af8 <am_hal_rtc_osc_disable>:
   23af8:	4a03      	ldr	r2, [pc, #12]	; (23b08 <am_hal_rtc_osc_disable+0x10>)
   23afa:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
   23afe:	f043 0310 	orr.w	r3, r3, #16
   23b02:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
   23b06:	4770      	bx	lr
   23b08:	40004200 	.word	0x40004200

00023b0c <am_hal_tpiu_enable>:
   23b0c:	b510      	push	{r4, lr}
   23b0e:	4b23      	ldr	r3, [pc, #140]	; (23b9c <am_hal_tpiu_enable+0x90>)
   23b10:	6804      	ldr	r4, [r0, #0]
   23b12:	2200      	movs	r2, #0
   23b14:	b084      	sub	sp, #16
   23b16:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   23b1a:	b334      	cbz	r4, 23b6a <am_hal_tpiu_enable+0x5e>
   23b1c:	4a20      	ldr	r2, [pc, #128]	; (23ba0 <am_hal_tpiu_enable+0x94>)
   23b1e:	4921      	ldr	r1, [pc, #132]	; (23ba4 <am_hal_tpiu_enable+0x98>)
   23b20:	2001      	movs	r0, #1
   23b22:	6058      	str	r0, [r3, #4]
   23b24:	f5a4 4361 	sub.w	r3, r4, #57600	; 0xe100
   23b28:	a801      	add	r0, sp, #4
   23b2a:	428b      	cmp	r3, r1
   23b2c:	bf88      	it	hi
   23b2e:	4614      	movhi	r4, r2
   23b30:	f7ff f9a6 	bl	22e80 <am_hal_clkgen_status_get>
   23b34:	9b01      	ldr	r3, [sp, #4]
   23b36:	1c5a      	adds	r2, r3, #1
   23b38:	d02d      	beq.n	23b96 <am_hal_tpiu_enable+0x8a>
   23b3a:	08db      	lsrs	r3, r3, #3
   23b3c:	fbb3 f4f4 	udiv	r4, r3, r4
   23b40:	3c01      	subs	r4, #1
   23b42:	b2a4      	uxth	r4, r4
   23b44:	4b15      	ldr	r3, [pc, #84]	; (23b9c <am_hal_tpiu_enable+0x90>)
   23b46:	4a18      	ldr	r2, [pc, #96]	; (23ba8 <am_hal_tpiu_enable+0x9c>)
   23b48:	611c      	str	r4, [r3, #16]
   23b4a:	2102      	movs	r1, #2
   23b4c:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
   23b50:	2000      	movs	r0, #0
   23b52:	f240 2101 	movw	r1, #513	; 0x201
   23b56:	f8c3 0f00 	str.w	r0, [r3, #3840]	; 0xf00
   23b5a:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
   23b5e:	f44f 7048 	mov.w	r0, #800	; 0x320
   23b62:	f7ff f9f3 	bl	22f4c <am_hal_flash_delay>
   23b66:	b004      	add	sp, #16
   23b68:	bd10      	pop	{r4, pc}
   23b6a:	6902      	ldr	r2, [r0, #16]
   23b6c:	611a      	str	r2, [r3, #16]
   23b6e:	6882      	ldr	r2, [r0, #8]
   23b70:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
   23b74:	68c1      	ldr	r1, [r0, #12]
   23b76:	2201      	movs	r2, #1
   23b78:	3901      	subs	r1, #1
   23b7a:	408a      	lsls	r2, r1
   23b7c:	605a      	str	r2, [r3, #4]
   23b7e:	f8c3 4f00 	str.w	r4, [r3, #3840]	; 0xf00
   23b82:	4a09      	ldr	r2, [pc, #36]	; (23ba8 <am_hal_tpiu_enable+0x9c>)
   23b84:	6843      	ldr	r3, [r0, #4]
   23b86:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
   23b8a:	f44f 7048 	mov.w	r0, #800	; 0x320
   23b8e:	f7ff f9dd 	bl	22f4c <am_hal_flash_delay>
   23b92:	b004      	add	sp, #16
   23b94:	bd10      	pop	{r4, pc}
   23b96:	2405      	movs	r4, #5
   23b98:	e7d4      	b.n	23b44 <am_hal_tpiu_enable+0x38>
   23b9a:	bf00      	nop
   23b9c:	e0040000 	.word	0xe0040000
   23ba0:	000f4240 	.word	0x000f4240
   23ba4:	001da380 	.word	0x001da380
   23ba8:	40020000 	.word	0x40020000
   23bac:	00000004 	.word	0x00000004
   23bb0:	00000020 	.word	0x00000020
   23bb4:	00000020 	.word	0x00000020
   23bb8:	00000002 	.word	0x00000002
   23bbc:	00000000 	.word	0x00000000
   23bc0:	00000032 	.word	0x00000032
   23bc4:	00010101 	.word	0x00010101
   23bc8:	00000000 	.word	0x00000000

00023bcc <attCfg>:
   23bcc:	0000000f 041e01e0                       ........

00023bd4 <smpCfg>:
   23bd4:	000001f4 01100703 00000000 0000fa00     ................
   23be4:	0000fa00 00000002 78656e75 74636570     ........unexpect
   23bf4:	63206465 626c6c61 206b6361 6e657665     ed callback even
   23c04:	64252074 00000000 6e756f66 65732064     t %d....found se
   23c14:	63697672 74732065 48747261 303d6c64     rvice startHdl=0
   23c24:	20782578 48646e65 303d6c64 00782578     x%x endHdl=0x%x.
   23c34:	72616863 65746361 74736972 66206369     characteristic f
   23c44:	646e756f 6e616820 3a656c64 78257830     ound handle:0x%x
   23c54:	00000000 61766e69 2064696c 646e6168     ....invalid hand
   23c64:	303a656c 00782578 63736564 74706972     le:0x%x.descript
   23c74:	6620726f 646e756f 6e616820 3a656c64     or found handle:
   23c84:	78257830 00000000 63747461 6b6e7520     0x%x....attc unk
   23c94:	6e776f6e 63706f20 2065646f 30257830     nown opcode 0x%0
   23ca4:	00007832 63747461 62636320 746f6e20     2x..attc ccb not
   23cb4:	206e6920 3a657375 00642520 2055544d      in use: %d.MTU 
   23cc4:	20716572 63736964 65647261 00000064     req discarded...

00023cd4 <attcFcnIf>:
   23cd4:	0000c91d 0000c971 0000cd6d 0000ca8d     ....q...m.......

00023ce4 <attcSendReqTbl>:
   23ce4:	00000000 0000ca25 0000ccc5 0000ccc5     ....%...........
   23cf4:	0000ccc5 0000c8e5 0000ccc5 0000c8e5     ................
   23d04:	0000ccc5 0000c8e5 0000c9c1 0000cc01     ................
   23d14:	0000c8e5                                ....

00023d18 <attcProcRspTbl>:
   23d18:	0000d069 0000d1ad 0000d099 0000d68d     i...............
   23d28:	0000d099 0000d1a1 0000d70d 0000d1a1     ................
   23d38:	0000d099 0000d1a5 00000000 0000d7e5     ................
   23d48:	0000d1a5 73747461 4d636343 436e6961     ....attsCccMainC
   23d58:	6b636162 6e6f6320 3d64496e 68206425     back connId=%d h
   23d68:	6c646e61 64253d65 00000000 73747441     andle=%d....Atts
   23d78:	49636343 5474696e 656c6261 6e6f6320     CccInitTable con
   23d88:	3d64496e 00006425 73747441 43636343     nId=%d..AttsCccC
   23d98:	7261656c 6c626154 6f632065 64496e6e     learTable connId
   23da8:	0064253d 61746144 65736162 73616820     =%d.Database has
   23db8:	61632068 6c75636c 6f697461 6f63206e     h calculation co
   23dc8:	656c706d 00006574 636c6143 74616c75     mplete..Calculat
   23dd8:	20676e69 61746164 65736162 73616820     ing database has
   23de8:	00000068 6e6e6f43 25206449 68632064     h...ConnId %d ch
   23df8:	65676e61 61776120 73206572 65746174     ange aware state
   23e08:	20736920 00006425 6e6e6f43 25206449      is %d..ConnId %
   23e18:	756f2064 666f2074 6e797320 50202c63     d out of sync, P
   23e28:	77205544 20687469 6f63706f 30206564     DU with opcode 0
   23e38:	32302578 67692078 65726f6e 00002164     x%02x ignored!..
   23e48:	6e6e6f63 25206449 70752064 65746164     connId %d update
   23e58:	73632064 6f742066 25783020 00783230     d csf to 0x%02x.
   23e68:	73747461 62636320 746f6e20 206e6920     atts ccb not in 
   23e78:	3a657375 00642520                       use: %d.

00023e80 <attsIndFcnIf>:
   23e80:	0000f955 0000debd 0000dd09 0000de2d     U...........-...

00023e90 <attsFcnIf>:
   23e90:	0000e125 0000e0d5 0000e32d 0000e0e1     %.......-.......

00023ea0 <attsMinPduLen>:
   23ea0:	07050300 05050305 05030305 01000002     ................
   23eb0:	0000000f                                ....

00023eb4 <attFcnDefault>:
   23eb4:	0000f955 0000f94d 0000f94d 0000f951     U...M...M...Q...

00023ec4 <attAlChUuid>:
   23ec4:	00002a06                                .*..

00023ec8 <attApChUuid>:
   23ec8:	00002a01                                .*..

00023ecc <attCarChUuid>:
   23ecc:	00002aa6                                .*..

00023ed0 <attChUuid>:
   23ed0:	00002803                                .(..

00023ed4 <attCliChCfgUuid>:
   23ed4:	00002902                                .)..

00023ed8 <attGapSvcUuid>:
   23ed8:	00001800                                ....

00023edc <attGattCsfChUuid>:
   23edc:	00002b29                                )+..

00023ee0 <attGattDbhChUuid>:
   23ee0:	00002b2a                                *+..

00023ee4 <attGattSvcUuid>:
   23ee4:	00001801                                ....

00023ee8 <attIasSvcUuid>:
   23ee8:	00001802                                ....

00023eec <attPrimSvcUuid>:
   23eec:	00002800                                .(..

00023ef0 <attRpaoChUuid>:
   23ef0:	00002ac9                                .*..

00023ef4 <attScChUuid>:
   23ef4:	00002a05                                .*..

00023ef8 <fmplIasAl>:
   23ef8:	00023ec4 00000002 65657246 534f5452     .>......FreeRTOS
   23f08:	776f5020 43207265 656c6379 61784520      Power Cycle Exa
   23f18:	656c706d 0000000a 20746f47 74747542     mple....Got Butt
   23f28:	30206e6f 65725020 000a7373 20746f47     on 0 Press..Got 
   23f38:	74747542 31206e6f 65725020 000a7373     Button 1 Press..
   23f48:	20746f47 74747542 32206e6f 65725020     Got Button 2 Pre
   23f58:	000a7373 65776f50 666f2072 70412066     ss..Power off Ap
   23f68:	6f6c6c6f 4c422033 6f632045 6f72746e     ollo3 BLE contro
   23f78:	72656c6c 0000000a 65776f50 6e6f2072     ller....Power on
   23f88:	6f704120 336f6c6c 454c4220 6e6f6320      Apollo3 BLE con
   23f98:	6c6f7274 0a72656c 00000000 6f6d654d     troller.....Memo
   23fa8:	70207972 206c6f6f 74207369 73206f6f     ry pool is too s
   23fb8:	6c6c616d 20796220 0a0d6425 00000000     mall by %d......
   23fc8:	69646152 7361546f 73203a6b 70757465     RadioTask: setup
   23fd8:	00000a0d 72617453 676e6974 63697720     ....Starting wic
   23fe8:	72746e65 74206369 65636172 000a0a3a     entric trace:...
   23ff8:	6e6e7552 20676e69 75746573 61742070     Running setup ta
   24008:	2e736b73 0a0d2e2e 00000000 69646152     sks.........Radi
   24018:	7361546f 0000006b 75746553 00000070     oTask...Setup...
   24028:	61766e49 2064696c 656c6f72 6e6f6320     Invalid role con
   24038:	75676966 69746172 203a6e6f 656c6f72     figuration: role
   24048:	0064253d 6e6b6e75 206e776f 3d646963     =%d.unknown cid=
   24058:	30257830 00007834 64766372 74616420     0x%04x..rcvd dat
   24068:	6e6f2061 65727520 74736967 64657265     a on uregistered
   24078:	64696320 00000000 676e656c 6d206874      cid....length m
   24088:	616d7369 3a686374 63326c20 2075253d     ismatch: l2c=%u 
   24098:	3d696368 00007525 61766e69 2064696c     hci=%u..invalid 
   240a8:	2067736d 65646f63 2064253a 3a6e656c     msg code:%d len:
   240b8:	6c206425 654c6332 64253a6e 00000000     %d l2cLen:%d....
   240c8:	6e6e6f63 64707520 20657461 20716572     conn update req 
   240d8:	656d6974 0074756f 746e6543 206c6172     timeout.Central 
   240e8:	72646461 20737365 6f736572 6974756c     address resoluti
   240f8:	203a6e6f 00006425                       on: %d..

00024100 <gapCar>:
   24100:	00023ecc 00000000                       .>......

00024108 <gapRpao>:
   24108:	00023ef0 00000000                       .>......

00024110 <hciEventMask>:
   24110:	02008890 20008000                       ....... 

00024118 <hciEventMaskPage2>:
   24118:	00800000 00000000                       ........

00024120 <hciLeEventMask>:
   24120:	007fffff 00000000 6d20454c 20617465     ........LE meta 
   24130:	20627573 6e657665 203d2074 78257830     sub event = 0x%x
   24140:	00000000 45696368 72507476 7365636f     ....hciEvtProces
   24150:	43654c73 496e6e6f 70655251 0074726f     sLeConnIQReport.
   24160:	20766372 4320654c 496e6e6f 65522051     rcv Le ConnIQ Re
   24170:	74726f70 002e2e2e 20657463 20716572     port....cte req 
   24180:	6c696166 2e2e6465 00002e2e 20766372     failed......rcv 
   24190:	4320654c 746e6e6f 7373656c 20514920     Le Conntless IQ 
   241a0:	6f706552 2e2e7472 0000002e              Report......

000241ac <hciEvtCbackLen>:
   241ac:	0a242404 0a1c060e 100e080e 0a080808     .$$.............
   241bc:	06080610 06060606 16060c0c 0a08080e     ................
   241cc:	0e0e0806 0826460e 0a060a06 0c0a0424     .....F&.....$...
   241dc:	04061016 04040404 04040404 08041c04     ................
   241ec:	00080808                                ....

000241f0 <hciEvtParseFcnTbl>:
   241f0:	00000000 000129d9 0001280d 00012399     .....)...(...#..
   24200:	000123b5 000123f9 00000000 0001240d     .#...#.......$..
   24210:	000129b5 00012429 0001243d 0001298d     .)..)$..=$...)..
   24220:	00012479 00012491 000124a9 000124c1     y$...$...$...$..
   24230:	0001295d 000124dd 00012941 00012939     ])...$..A)..9)..
   24240:	000124e9 000124f1 00012505 00012519     .$...$...%...%..
   24250:	000127f5 000127dd 0001252d 0001290d     .'...'..-%...)..
   24260:	000128f1 00012541 00012559 00012571     .(..A%..Y%..q%..
   24270:	00012591 000125a5 000125bd 000125f5     .%...%...%...%..
   24280:	00012635 000128bd 00012875 00012675     5&...(..u(..u&..
   24290:	0001268d 0001269d 000126c1 000126d5     .&...&...&...&..
   242a0:	00000000 000126f9 000126fd 000127cd     .....&...&...'..
   242b0:	00012791 00000000 00012785 00000000     .'.......'......
   242c0:	0001271d 0001271d 0001271d 0001271d     .'...'...'...'..
   242d0:	0001271d 00000000 00000000 00000000     .'..............
	...
   242ec:	00012725 0001273d 00012755 0001276d     %'..='..U'..m'..
   242fc:	42667357 6c416675 20636f6c 6c696166     WsfBufAlloc fail
   2430c:	6c206465 253a6e65 00000075 20465357     ed len:%u...WSF 
   2431c:	656d6954 00000072 58323025 00000020     Timer...%02X ...
   2432c:	00000a0a 2e2f2e2e 2e2e2f2e 2f2e2e2f     ....../../../../
   2433c:	742f2e2e 64726968 7261705f 632f7974     ../third_party/c
   2434c:	6964726f 73772f6f 6f732f66 65637275     ordio/wsf/source
   2435c:	6f702f73 662f7472 72656572 2f736f74     s/port/freertos/
   2436c:	5f667377 63617274 00632e65 203e3e3e     wsf_trace.c.>>> 
   2437c:	65736552 6f632074 656c706d 3c206574     Reset complete <
   2438c:	00003c3c 203e3e3e 65766441 73697472     <<..>>> Advertis
   2439c:	20676e69 72617473 20646574 003c3c3c     ing started <<<.
   243ac:	203e3e3e 65766441 73697472 20676e69     >>> Advertising 
   243bc:	706f7473 20646570 003c3c3c 203e3e3e     stopped <<<.>>> 
   243cc:	6e616353 676e696e 61747320 64657472     Scanning started
   243dc:	3c3c3c20 00000000 203e3e3e 6e616353      <<<....>>> Scan
   243ec:	676e696e 6f747320 64657070 3c3c3c20     ning stopped <<<
   243fc:	00000000 203e3e3e 6e616353 74616420     ....>>> Scan dat
   2440c:	65722061 76696563 66206465 206d6f72     a received from 
   2441c:	72656570 3c3c3c20 00000000 203e3e3e     peer <<<....>>> 
   2442c:	6e6e6f43 69746365 6f206e6f 656e6570     Connection opene
   2443c:	3c3c2064 0000003c 203e3e3e 6e6e6f43     d <<<...>>> Conn
   2444c:	69746365 63206e6f 65736f6c 3c3c2064     ection closed <<
   2445c:	0000003c 203e3e3e 72696150 20676e69     <...>>> Pairing 
   2446c:	706d6f63 6574656c 75732064 73656363     completed succes
   2447c:	6c756673 3c20796c 00003c3c 203e3e3e     sfully <<<..>>> 
   2448c:	72696150 20676e69 6c696166 3c206465     Pairing failed <
   2449c:	00003c3c 203e3e3e 6e6e6f43 69746365     <<..>>> Connecti
   244ac:	65206e6f 7972636e 64657470 3c3c3c20     on encrypted <<<
   244bc:	00000000 203e3e3e 72636e45 69747079     ....>>> Encrypti
   244cc:	66206e6f 656c6961 3c3c2064 0000003c     on failed <<<...
   244dc:	203e3e3e 6d6f7250 75207470 20726573     >>> Prompt user 
   244ec:	65206f74 7265746e 73617020 79656b73     to enter passkey
   244fc:	3c3c3c20 00000000 203e3e3e 636e6143      <<<....>>> Canc
   2450c:	61206c65 776f6c20 20726f20 68676968     el a low or high
   2451c:	656c6120 3c207472 00003c3c 203e3e3e      alert <<<..>>> 
   2452c:	20776f4c 72656c61 3c3c2074 0000003c     Low alert <<<...
   2453c:	203e3e3e 68676948 656c6120 3c207472     >>> High alert <
   2454c:	00003c3c 203e3e3e 65766441 73697472     <<..>>> Advertis
   2455c:	20676e69 73746573 61747320 64657472     ing sets started
   2456c:	3c3c3c20 00000000 203e3e3e 65766441      <<<....>>> Adve
   2457c:	73697472 20676e69 73746573 6f747320     rtising sets sto
   2458c:	64657070 3c3c3c20 00000000 203e3e3e     pped <<<....>>> 
   2459c:	6e616353 71657220 74736575 63657220     Scan request rec
   245ac:	65766965 3c3c2064 0000003c 203e3e3e     eived <<<...>>> 
   245bc:	65747845 6465646e 61637320 6e696e6e     Extended scannin
   245cc:	74732067 65747261 3c3c2064 0000003c     g started <<<...
   245dc:	203e3e3e 65747845 6465646e 61637320     >>> Extended sca
   245ec:	6e696e6e 74732067 6570706f 3c3c2064     nning stopped <<
   245fc:	0000003c 203e3e3e 69726550 6369646f     <...>>> Periodic
   2460c:	76646120 69747265 676e6973 74657320      advertising set
   2461c:	61747320 64657472 3c3c3c20 00000000      started <<<....
   2462c:	203e3e3e 69726550 6369646f 76646120     >>> Periodic adv
   2463c:	69747265 676e6973 74657320 6f747320     ertising set sto
   2464c:	64657070 3c3c3c20 00000000 203e3e3e     pped <<<....>>> 
   2465c:	69726550 6369646f 76646120 69747265     Periodic adverti
   2466c:	676e6973 6e797320 73652063 6c626174     sing sync establ
   2467c:	65687369 3c3c2064 0000003c 203e3e3e     ished <<<...>>> 
   2468c:	69726550 6369646f 76646120 69747265     Periodic adverti
   2469c:	676e6973 6e797320 6f6c2063 3c207473     sing sync lost <
   246ac:	00003c3c 203e3e3e 73736150 3a79656b     <<..>>> Passkey:
   246bc:	20642520 003c3c3c 203e3e3e 666e6f43      %d <<<.>>> Conf
   246cc:	206d7269 756c6156 25203a65 3c3c2064     irm Value: %d <<
   246dc:	0000003c 203e3e3e 49535352 6425203a     <...>>> RSSI: %d
   246ec:	6d426420 3c3c3c20 00000000               dBm <<<....

000246f8 <gattCsf>:
   246f8:	00023edc 00000000                       .>......

00024700 <gattSc>:
   24700:	00023ef4 00000000                       .>......

00024708 <gattScCcc>:
   24708:	00023ed4 00000004                       .>......

00024710 <curve_G>:
   24710:	d898c296 f4a13945 2deb33a0 77037d81     ....E9...3.-.}.w
   24720:	63a440f2 f8bce6e5 e12c4247 6b17d1f2     .@.c....GB,....k
   24730:	37bf51f5 cbb64068 6b315ece 2bce3357     .Q.7h@...^1kW3.+
   24740:	7c0f9e16 8ee7eb4a fe1a7f9b 4fe342e2     ...|J........B.O

00024750 <curve_b>:
   24750:	27d2604b 3bce3c3e cc53b0f6 651d06b0     K`.'><.;..S....e
   24760:	769886bc b3ebbd55 aa3a93e7 5ac635d8     ...vU.....:..5.Z

00024770 <curve_n>:
   24770:	fc632551 f3b9cac2 a7179e84 bce6faad     Q%c.............
   24780:	ffffffff ffffffff 00000000 ffffffff     ................

00024790 <curve_p>:
   24790:	ffffffff ffffffff ffffffff 00000000     ................
	...
   247a8:	00000001 ffffffff 4f525245 48435f52     ........ERROR_CH
   247b8:	204b4345 685f6d61 625f6c61 695f656c     ECK am_hal_ble_i
   247c8:	6974696e 7a696c61 2c302865 4c422620     nitialize(0, &BL
   247d8:	000a2945 4f525245 48435f52 204b4345     E)..ERROR_CHECK 
   247e8:	685f6d61 625f6c61 705f656c 7265776f     am_hal_ble_power
   247f8:	6e6f635f 6c6f7274 454c4228 4d41202c     _control(BLE, AM
   24808:	4c41485f 454c425f 574f505f 415f5245     _HAL_BLE_POWER_A
   24818:	56495443 000a2945 4f525245 48435f52     CTIVE)..ERROR_CH
   24828:	204b4345 685f6d61 625f6c61 635f656c     ECK am_hal_ble_c
   24838:	69666e6f 4c422867 26202c45 656c4273     onfig(BLE, &sBle
   24848:	666e6f43 0a296769 00000000 4f525245     Config).....ERRO
   24858:	48435f52 204b4345 685f6d61 625f6c61     R_CHECK am_hal_b
   24868:	705f656c 7265776f 6e6f635f 6c6f7274     le_power_control
   24878:	454c4228 4d41202c 4c41485f 454c425f     (BLE, AM_HAL_BLE
   24888:	574f505f 4f5f5245 0a294646 00000000     _POWER_OFF).....
   24898:	4f525245 48435f52 204b4345 685f6d61     ERROR_CHECK am_h
   248a8:	625f6c61 645f656c 696e6965 6c616974     al_ble_deinitial
   248b8:	28657a69 29454c42 0000000a 64416d64     ize(BLE)....dmAd
   248c8:	74634176 666e6f43 203a6769 74617473     vActConfig: stat
   248d8:	25203a65 00000064 64416d44 6e6f4376     e: %d...DmAdvCon
   248e8:	20676966 69727564 6420676e 63657269     fig during direc
   248f8:	20646574 65766461 73697472 21676e69     ted advertising!
   24908:	00000000 64416d64 74634176 44746553     ....dmAdvActSetD
   24918:	3a617461 61747320 203a6574 00006425     ata: state: %d..
   24928:	64416d64 74634176 72617453 73203a74     dmAdvActStart: s
   24938:	65746174 6425203a 00000000 64416d64     tate: %d....dmAd
   24948:	74634176 72617453 75642074 676e6972     vActStart during
   24958:	72696420 65746365 64612064 74726576      directed advert
   24968:	6e697369 00002167 64416d64 74634176     ising!..dmAdvAct
   24978:	706f7453 7473203a 3a657461 00642520     Stop: state: %d.
   24988:	64416d44 6f745376 75642070 676e6972     DmAdvStop during
   24998:	72696420 65746365 64612064 74726576      directed advert
   249a8:	6e697369 00002167 5f494348 415f454c     ising!..HCI_LE_A
   249b8:	455f5644 4c42414e 4d435f45 4d435f44     DV_ENABLE_CMD_CM
   249c8:	435f4c50 4b434142 5456455f 7473203a     PL_CBACK_EVT: st
   249d8:	3a657461 00642520 64416d64 74634176     ate: %d.dmAdvAct
   249e8:	656d6954 2174756f 00000000 64416d64     Timeout!....dmAd
   249f8:	61745376 69447472 74636572 203a6465     vStartDirected: 
   24a08:	74617473 25203a65 00000064 64416d64     state: %d...dmAd
   24a18:	6f745376 72694470 65746365 73203a64     vStopDirected: s
   24a28:	65746174 6425203a 00000000 64416d64     tate: %d....dmAd
   24a38:	6e6f4376 7463656e 203a6465 74617473     vConnected: stat
   24a48:	25203a65 00000064 64416d64 6e6f4376     e: %d...dmAdvCon
   24a58:	7463656e 6c696146 203a6465 74617473     nectFailed: stat
   24a68:	25203a65 00000064                       e: %d...

00024a70 <dmAdvAct>:
   24a70:	00017a11 00017a8d 00017ac5 00017b0d     .z...z...z...{..
   24a80:	000179b1 00017c4d 00017c51 00017c55     .y..M|..Q|..U|..

00024a90 <dmAdvFcnIf>:
   24a90:	000179c9 00017b51 000179b5 6f436d64     .y..Q{...y..dmCo
   24aa0:	63436e6e 61654462 636f6c6c 00642520     nnCcbDealloc %d.
   24ab0:	6f436d64 63436e6e 48794262 6c646e61     dmConnCcbByHandl
   24ac0:	6f6e2065 6f662074 20646e75 30257830     e not found 0x%0
   24ad0:	00007834 6f436d64 64496e6e 64427942     4x..dmConnIdByBd
   24ae0:	72646441 746f6e20 756f6620 0000646e     Addr not found..
   24af0:	6f436d64 6d436e6e 74536c70 73657461     dmConnCmplStates
   24b00:	00642520 6f436d64 63436e6e 6c6c4162      %d.dmConnCcbAll
   24b10:	2520636f 00000064 6f436d64 63436e6e     oc %d...dmConnCc
   24b20:	6c6c4162 6620636f 656c6961 00000064     bAlloc failed...
   24b30:	6e6e6f63 253d6449 64692064 614d656c     connId=%d idleMa
   24b40:	303d6b73 34302578 00000078              sk=0x%04x...

00024b4c <dmConn2FcnIf>:
   24b4c:	00018d25 00018035 00017f91              %...5.......

00024b58 <dmConnActSetMain>:
   24b58:	00017d95 00017dad 00017e25 00017db5     .}...}..%~...}..
   24b68:	00017ef5 00017d99                       .~...}..

00024b70 <dmConnFcnIf>:
   24b70:	00018395 000181e1 00017f5d              ........]...

00024b7c <dmConnSpecDefaults>:
   24b7c:	00280018 07d00000 00000000              ..(.........

00024b88 <dmConnActSetSlave>:
   24b88:	00018aa9 00018ab9 0001898d 00018ad5     ................
   24b98:	00018af1 000189f5 6f436d64 6d536e6e     ........dmConnSm
   24ba8:	63657845 20657475 6e657665 64253d74     Execute event=%d
   24bb8:	61747320 253d6574 00000064               state=%d...

00024bc4 <dmConnStateTbl>:
   24bc4:	00001001 00002002 00000000 00000000     ..... ..........
   24bd4:	00002303 00000000 00010000 00011104     .#..............
   24be4:	00010001 00010001 02030300 00010300     ................
   24bf4:	00010001 21000002 00020002 00020002     .......!........
   24c04:	24000002 24002303 00020002 00030002     ...$.#.$........
   24c14:	00030104 22031203 25031303 00030003     ......."...%....
   24c24:	05030400 05030003 00040004 00040004     ................
   24c34:	00040004 04000004 04000104 00040004     ................
   24c44:	00000004 65446d64 73615076 74764573     ....dmDevPassEvt
   24c54:	65446f54 69725076 65203a76 746e6576     ToDevPriv: event
   24c64:	6425203a 6170202c 3a6d6172 2c642520     : %d, param: %d,
   24c74:	76646120 646e6148 203a656c 00006425      advHandle: %d..

00024c84 <dmDevFcnIf>:
   24c84:	00018d25 00018b81 00018bbd              %...........

00024c90 <dmEvtCbackLen>:
   24c90:	00040004 000c0004 00040004 0024001c     ..............$.
   24ca0:	000e000a 00040006 00040006 00220006     ..............".
   24cb0:	00080010 00240006 00140064 00040006     ......$.d.......
   24cc0:	000a000a 00060006 000c0006 0006000c     ................
   24cd0:	000e000e 00060008 0006000a 0008000a     ................
   24ce0:	000c000a 00040004 00060024 00160006     ........$.......
   24cf0:	00060016 001a001a 00080008 00100010     ................
   24d00:	001c000e 0008001c 00080008 00080008     ................
   24d10:	00080008 000a0008 00040008 00060006     ................

00024d20 <dmFcnDefault>:
   24d20:	00018d25 00018d29 00018d29              %...)...)...

00024d2c <dmHciToIdTbl>:
   24d2c:	03030307 04020303 04040404 05050505     ................
   24d3c:	07070705 06060607 05060606 07040405     ................
   24d4c:	04070407 04050504 09090904 00000202     ................
   24d5c:	070b0b0b 00020002 0c0b010a 0d0d0d0c     ................
   24d6c:	0d0d0d0d 0d100f0f                       ........

00024d74 <dmPrivAct>:
   24d74:	00018fcd 00018e65 00018ead 00018ed1     ....e...........
   24d84:	00018ee5 00018ee9 00018ef9 00019039     ............9...
   24d94:	00018e31                                1...

00024d98 <dmPrivFcnIf>:
   24d98:	00018e1d 00018f05 00018e09              ............

00024da4 <dmSecFcnIf>:
   24da4:	00019249 0001924d 000191e5              I...M.......

00024db0 <dmSecLescFcnIf>:
   24db0:	00018d25 00018d29 00019405 72635370     %...).......pScr
   24dc0:	726c6120 79646165 6c6c6120 7461636f      already allocat
   24dd0:	00006465 646e6152 00624e20 434e574a     ed..Rand Nb.JWNC
   24de0:	6e6f4320 6d726966 00000000 00696243      Confirm....Cbi.
   24df0:	00006143 50206143 00726565 654b4844     Ca..Ca Peer.DHKe
   24e00:	62452079 00000000                       y Eb....

00024e08 <smprScActionTbl>:
   24e08:	00019f59 0001b7e5 0001b7f9 0001b815     Y...............
   24e18:	000199dd 0001a07d 00019985 0001a0a9     ....}...........
   24e28:	0001a0ed 0001a0f5 0001a151 0001a181     ........Q.......
   24e38:	0001a42d 0001a53d 0001a4d1 0001a4b9     -...=...........
   24e48:	0001a4c5 0001a4b1 000195a5 000195cd     ................
   24e58:	00019651 000196f5 000199f5 00019a49     Q...........I...
   24e68:	00019a6d 00019a8d 0001b8bd 0001ba49     m...........I...
   24e78:	0001ba91 00019ab1 00019ac1 00019b29     ............)...
   24e88:	00019bc9 00019c21 00019c45 00019c85     ....!...E.......
   24e98:	00019d0d 00019d15 00019d91 00019e01     ................
   24ea8:	00019e19 00019e35 0001bb6d 0001bc11     ....5...m.......
   24eb8:	0001bc95 0001bd11 0001bd95 00019e6d     ............m...
   24ec8:	00019721 00019765 000197c9 00019831     !...e.......1...
   24ed8:	00019959 000198e1                       Y.......

00024ee0 <smprScSmIf>:
   24ee0:	00024eec 00024e08 00024ff4              .N...N...O..

00024eec <smprScStateTbl>:
   24eec:	00025028 00024f8c 00024fa4 00025088     (P...O...O...P..
   24efc:	000250e8 00025080 00024fc4 00025048     .P...P...O..HP..
   24f0c:	00025050 00025040 00025058 00025064     PP..@P..XP..dP..
   24f1c:	000250a4 000250b4 000250e0 000250bc     .P...P...P...P..
   24f2c:	000250cc 000250c4 000250d4 00025094     .P...P...P...P..
   24f3c:	0002509c 00025110 00024fd0 00024fe8     .P...Q...O...O..
   24f4c:	00024fe0 00024fd8 00025004 0002500c     .O...O...P...P..
   24f5c:	00025144 00025150 0002511c 00025124     DQ..PQ...Q..$Q..
   24f6c:	0002513c 0002512c 00025134 00025104     <Q..,Q..4Q...Q..
   24f7c:	00025014 00025070 00024fac 000250f0     .P..pP...O...P..

00024f8c <smprScStateTblApiPairReq>:
   24f8c:	0601000a 00071302 01000302 09010008     ................
   24f9c:	00000100 00000000                       ........

00024fa4 <smprScStateTblApiPairRsp>:
   24fa4:	00140302 00000000                       ........

00024fac <smprScStateTblAttempts>:
   24fac:	0f0e0010 26060227 0f000511 0301000a     ....'..&........
   24fbc:	26070100 00000000                       ...&....

00024fc4 <smprScStateTblAuthSelect>:
   24fc4:	14160713 14151a0c 00000024              ........$...

00024fd0 <smprScStateTblCalcDHKey>:
   24fd0:	002a1719 00000000                       ..*.....

00024fd8 <smprScStateTblCalcF5LTK>:
   24fd8:	002d1a1c 00000000                       ..-.....

00024fe0 <smprScStateTblCalcF5MacKey>:
   24fe0:	002c191c 00000000                       ..,.....

00024fe8 <smprScStateTblCalcF5TKey>:
   24fe8:	0d2b181c 00000c26 00000000              ..+.&.......

00024ff4 <smprScStateTblCommon>:
   24ff4:	0702000a 00030200 02270f03 00000000     ..........'.....

00025004 <smprScStateTblDhCalcF6Ea>:
   25004:	002e1b1c 00000000                       ........

0002500c <smprScStateTblDhCalcF6Eb>:
   2500c:	002f241c 00000000                       .$/.....

00025014 <smprScStateTblEncrypt>:
   25014:	09332508 24030200 03001d00 000c260d     .%3....$.....&..
   25024:	00000000                                ....

00025028 <smprScStateTblIdle>:
   25028:	0a120105 02060100 00000713 0f010003     ................
	...

00025040 <smprScStateTblJwNcCalcG2>:
   25040:	00190a1c 00000000                       ........

00025048 <smprScStateTblJwNcSetup>:
   25048:	0017081c 00000000                       ........

00025050 <smprScStateTblJwNcWaitRand>:
   25050:	00180906 00000000                       ........

00025058 <smprScStateTblJwNcWaitUser>:
   25058:	06281516 260d270b 0000000c              ..(..'.&....

00025064 <smprScStateTblJwNcWaitUserDhCheckRcvd>:
   25064:	0d291616 00000c26 00000000              ..).&.......

00025070 <smprScStateTblKeyDist>:
   25070:	0c342506 000e3525 0025030d 00000000     .%4.%5....%.....

00025080 <smprScStateTblLescPin>:
   25080:	00060404 00000000                       ........

00025088 <smprScStateTblModeSelect>:
   25088:	12000511 0000001c 00000000              ............

00025094 <smprScStateTblOobSendRand>:
   25094:	0026151c 00000000                       ..&.....

0002509c <smprScStateTblOobWaitRand>:
   2509c:	00251306 00000000                       ..%.....

000250a4 <smprScStateTblPassKeyKeypress>:
   250a4:	1e1b0c06 0c171d0d 060e041c 00000000     ................

000250b4 <smprScStateTblPassWaitAuthRsp>:
   250b4:	001f0f04 00000000                       ........

000250bc <smprScStateTblPasskeyCalc>:
   250bc:	0021101c 00000000                       ..!.....

000250c4 <smprScStateTblPasskeyCheck>:
   250c4:	0023121c 00000000                       ..#.....

000250cc <smprScStateTblPasskeyRand>:
   250cc:	00221106 00000000                       ..".....

000250d4 <smprScStateTblPasskeyRepeat>:
   250d4:	1b000e1a 260d2815 0000000c              .....(.&....

000250e0 <smprScStateTblPasskeyWaitCnf>:
   250e0:	001e0f06 00000000                       ........

000250e8 <smprScStateTblPubKey>:
   250e8:	00040606 00000000                       ........

000250f0 <smprScStateTblRspTo>:
   250f0:	0701000a 27030027 00270f00 00102705     ....'..'..'..'..
   25100:	00000000                                ....

00025104 <smprScStateTblStkCalc>:
   25104:	0d32240b 00000c26 00000000              .$2.&.......

00025110 <smprScStateTblWaitDhCheck>:
   25110:	0d291606 00000c26 00000000              ..).&.......

0002511c <smprStateTblCnfCalc1>:
   2511c:	00081f0b 00000000                       ........

00025124 <smprStateTblCnfCalc2>:
   25124:	0009200b 00000000                       . ......

0002512c <smprStateTblCnfVerCalc1>:
   2512c:	000b220b 00000000                       ."......

00025134 <smprStateTblCnfVerCalc2>:
   25134:	0031230b 00000000                       .#1.....

0002513c <smprStateTblPairRand>:
   2513c:	000a2106 00000000                       .!......

00025144 <smprStateTblPinPair1>:
   25144:	06051d04 0000151d 00000000              ............

00025150 <smprStateTblPinPair2>:
   25150:	06071e04 0000301e 00000000              .....0......

0002515c <smprActionTbl>:
   2515c:	00019f59 00019f5d 00019fbd 0001a011     Y...]...........
   2516c:	0001a07d 0001a0a9 0001a0ed 0001a0f5     }...............
   2517c:	0001a151 0001a181 0001a42d 0001a4b1     Q.......-.......
   2518c:	0001a4d1 0001a4b9 0001a4c5 0001a53d     ............=...
   2519c:	000195a5 000195cd 00019651 000196f5     ........Q.......
   251ac:	00019721 00019765 000197c9 00019831     !...e.......1...
   251bc:	000198e1 00019959                       ....Y...

000251c4 <smprSmIf>:
   251c4:	000251d0 0002515c 00025264              .Q..\Q..dR..

000251d0 <smprStateTbl>:
   251d0:	00025280 0002520c 00025224 000252b0     .R...R..$R...R..
   251e0:	000252bc 00025244 0002524c 000252a8     .R..DR..LR...R..
   251f0:	00025254 0002525c 000252dc 00025274     TR..\R...R..tR..
   25200:	00025298 0002522c 000252c8              .R..,R...R..

0002520c <smprStateTblApiPairReq>:
   2520c:	0601000a 00071102 01000302 09010008     ................
   2521c:	00000100 00000000                       ........

00025224 <smprStateTblApiPairRsp>:
   25224:	00120302 00000000                       ........

0002522c <smprStateTblAttempts>:
   2522c:	0f0c0010 0d06020e 0d00050b 0301000a     ................
   2523c:	0d070100 00000000                       ........

00025244 <smprStateTblCnfCalc1>:
   25244:	0006060b 00000000                       ........

0002524c <smprStateTblCnfCalc2>:
   2524c:	0007070b 00000000                       ........

00025254 <smprStateTblCnfVerCalc1>:
   25254:	0009090b 00000000                       ........

0002525c <smprStateTblCnfVerCalc2>:
   2525c:	00150a0b 00000000                       ........

00025264 <smprStateTblCommon>:
   25264:	0702000a 00030200 020e0f03 00000000     ................

00025274 <smprStateTblEncrypt>:
   25274:	09170c08 0b030200 00000000              ............

00025280 <smprStateTblIdle>:
   25280:	0a100105 02060100 00000711 0f010003     ................
	...

00025298 <smprStateTblKeyDist>:
   25298:	06180c0c 000e190c 000c030f 00000000     ................

000252a8 <smprStateTblPairRand>:
   252a8:	00080806 00000000                       ........

000252b0 <smprStateTblPinPair1>:
   252b0:	06040404 00001304 00000000              ............

000252bc <smprStateTblPinPair2>:
   252bc:	06050504 00001405 00000000              ............

000252c8 <smprStateTblRspTo>:
   252c8:	0701000a 0e03000e 000e0f00 000e0e05     ................
   252d8:	00000000                                ....

000252dc <smprStateTblStkCalc>:
   252dc:	0d160b0b 00000a0d 00000000 53706d73     ............smpS
   252ec:	4b646e65 75207965 7078656e 65746365     endKey unexpecte
   252fc:	74732064 20657461 4479656b 3a747369     d state keyDist:
   2530c:	6c206425 53747361 4b746e65 253a7965     %d lastSentKey:%
   2531c:	00000064 53706d73 6578456d 65747563     d...smpSmExecute
   2532c:	65766520 253d746e 74732064 3d657461      event=%d state=
   2533c:	00006425 44706d73 74654762 6f636552     %d..smpDbGetReco
   2534c:	203a6472 6e6e6f63 203a6449 74206425     rd: connId: %d t
   2535c:	3a657079 00642520 44706d73 64644162     ype: %d.smpDbAdd
   2536c:	69766544 00006563 44706d73 74654762     Device..smpDbGet
   2537c:	6f636552 203a6472 6d6d6f63 72206e6f     Record: common r
   2538c:	726f6365 00000064 44706d53 74654762     ecord...SmpDbGet
   2539c:	72696150 44676e69 62617369 5464656c     PairingDisabledT
   253ac:	3a656d69 6e6f6320 3a64496e 20642520     ime: connId: %d 
   253bc:	69726570 203a646f 61206425 6d657474     period: %d attem
   253cc:	754d7470 203a746c 00006425 44706d53     ptMult: %d..SmpD
   253dc:	74655362 6c696146 43657275 746e756f     bSetFailureCount
   253ec:	6f63203a 64496e6e 6425203a 756f6320     : connId: %d cou
   253fc:	203a746e 00006425 44706d53 74654762     nt: %d..SmpDbGet
   2540c:	6c696146 43657275 746e756f 6f63203a     FailureCount: co
   2541c:	64496e6e 6425203a 756f6320 203a746e     nnId: %d count: 
   2542c:	00006425 44706d53 78614d62 65747441     %d..SmpDbMaxAtte
   2543c:	5274706d 68636165 203a6465 6e6e6f63     mptReached: conn
   2544c:	203a6449 00006425 44706d53 69615062     Id: %d..SmpDbPai
   2545c:	676e6972 6c696146 203a6465 6e6e6f63     ringFailed: conn
   2546c:	203a6449 00006425 78656e75 74636570     Id: %d..unexpect
   2547c:	70206465 656b6361 6d632074 64253a64     ed packet cmd:%d
   2548c:	6e656c20 2c64253a 70786520 65746365      len:%d, expecte
   2549c:	64253a64 00000000 53706d73 50646e65     d:%d....smpSendP
   254ac:	7020746b 656b6361 69642074 72616373     kt packet discar
   254bc:	20646564 3a646d63 00006425 20534541     ded cmd:%d..AES 
   254cc:	656b6f74 696d206e 74616d73 203a6863     token mismatch: 
   254dc:	25206425 00000064                       %d %d...

000254e4 <smpPktLenTbl>:
   254e4:	11070700 0b110211 02110811 00021141     ............A...
   254f4:	50203446 0000624b 50203446 0000614b     F4 PKb..F4 PKa..
   25504:	4e203446 00000062 434e574a 73694420     F4 Nb...JWNC Dis
   25514:	79616c70 666e4320 00000000 654b4844     play Cnf....DHKe
   25524:	53282079 65726168 65532064 74657263     y (Shared Secret
   25534:	00000029 9183886c 38a5f5aa db0b3760     )...l......8`7..
   25544:	be83605a 00000000 00000054 0043414d     Z`......T...MAC.
   25554:	004b544c 654b4844 61452079 00000000     LTK.DHKey Ea....

00025564 <smpScF5Key>:
   25564:	656c7462 53706d53 74654763 636e6143     btleSmpScGetCanc
   25574:	734d6c65 74695767 61655268 6d657474     elMsgWithReattem
   25584:	203a7470 00006425                       pt: %d..

0002558c <calc128Zeros>:
	...
   2559c:	49676174 72577361 43657469 6b636162     tagIasWriteCback
   255ac:	6e6f6320 3a64496e 68206425 6c646e61      connId:%d handl
   255bc:	78303a65 78343025 3a706f20 30257830     e:0x%04x op:0x%0
   255cc:	00007832 20202020 20202020 20202020     2x..            
   255dc:	20202020 66666f20 3a746573 30257830          offset:0x%0
   255ec:	6c207834 303a6e65 34302578 00000078     4x len:0x%04x...
   255fc:	48676154 6c646e61 6e497265 00007469     TagHandlerInit..
   2560c:	20676154 20746f67 20747665 00006425     Tag got evt %d..
   2561c:	6f67654e 74616974 4d206465 25205554     Negotiated MTU %
   2562c:	00000064 61656c43 65722072 766c6f73     d...Clear resolv
   2563c:	20676e69 7473696c 61747320 20737574     ing list status 
   2564c:	30257830 00007832                       0x%02x..

00025654 <tagAdvCfg>:
   25654:	afc83a98 00380000 07200280              .:....8... .

00025660 <tagAdvDataDisc>:
   25660:	02050102 0904000a 00676154              ........Tag.

0002566c <tagAppCfg>:
   2566c:	00000101                                ....

00025670 <tagCccSet>:
   25670:	00020013 00000001                       ........

00025678 <tagCsfVal>:
   25678:	00000001                                ....

0002567c <tagDiscCfg>:
   2567c:	00000000                                ....

00025680 <tagDiscCfgList>:
   25680:	00025698 00000202 00025678 00000301     .V......xV......
   25690:	00000000 00000400                       ........

00025698 <tagGattScCccVal>:
   25698:	00000002                                ....

0002569c <tagScanData>:
   2569c:	18030307 18041802                       ........

000256a4 <tagSecCfg>:
   256a4:	00030201 00000000                       ........

000256ac <tagSlaveCfg>:
   256ac:	00000001                                ....

000256b0 <tagSmpCfg>:
   256b0:	000001f4 01100703 00000000 0000fa00     ................
   256c0:	0000fa00 00000002                       ........

000256c8 <tagUpdateCfg>:
   256c8:	00001770 03200280 02580000 00000005     p..... ...X.....
   256d8:	63747441 63736944 76726553 43656369     AttcDiscServiceC
   256e8:	206c706d 74617473 30207375 32302578     mpl status 0x%02
   256f8:	00000078 63747441 63736944 72616843     x...AttcDiscChar
   25708:	6c706d43 61747320 20737574 30257830     Cmpl status 0x%0
   25718:	00007832 63747441 63736944 666e6f43     2x..AttcDiscConf
   25728:	6d436769 73206c70 75746174 78302073     igCmpl status 0x
   25738:	78323025 00000000 44707041 43637369     %02x....AppDiscC
   25748:	6c706d6f 20657465 6e6e6f63 253a6449     omplete connId:%
   25758:	74732064 73757461 2578303a 00783230     d status:0x%02x.
   25768:	20707041 20746f67 20747665 00006425     App got evt %d..
   25778:	61656c43 6f622072 6e69646e 6e692067     Clear bonding in
   25788:	00006f66                                fo..

0002578c <appReqActCfg>:
   2578c:	00000000 61746144 65736162 73616820     ....Database has
   2579c:	70752068 65746164 00000064 6f6d6572     h updated...remo
   257ac:	66206574 75746165 203a6572 78257830     te feature: 0x%x
   257bc:	4420202c 303a454c 00782578 6f6d6552     ,  DLE:0x%x.Remo
   257cc:	64206574 63697665 75732065 726f7070     te device suppor
   257dc:	4c442074 00000045 6f6d6552 64206574     t DLE...Remote d
   257ec:	63697665 6f642065 276e7365 75732074     evice doesn't su
   257fc:	726f7070 4c442074 00000045 61746164     pport DLE...data
   2580c:	6e656c20 20687467 68637865 65676e61      length exchange
   2581c:	7473202c 73757461 6425203d 616d202c     , status= %d, ma
   2582c:	4c585278 203d6e65 202c6425 5478616d     xRXLen= %d, maxT
   2583c:	6e656c58 6425203d 00000000 61766e49     Xlen= %d....Inva
   2584c:	2064696c 61204d44 72657664 69736974     lid DM advertisi
   2585c:	6d20676e 3b65646f 646f6d20 6f632065     ng mode; mode co
   2586c:	6769666e 64657275 20736120 65747865     nfigured as exte
   2587c:	6465646e 00000000 20726d54 00637653     nded....Tmr Svc.

0002588c <gapLenAp>:
   2588c:	                                         ..

0002588e <gapLenApCh>:
   2588e:	                                         ..

00025890 <gapLenCar>:
   25890:	                                         ..

00025892 <gapLenCarCh>:
   25892:	                                         ..

00025894 <gapLenRpao>:
   25894:	                                         ..

00025896 <gapLenRpaoCh>:
   25896:	                                         ..

00025898 <gapLenSvc>:
   25898:	00000002                                ....

0002589c <gapList>:
   2589c:	00023eec 00025924 00025898 01000002     .>..$Y...X......
   258ac:	00023ed0 0002590c 0002588e 01000005     .>...Y...X......
   258bc:	00023ec8 1000a0f0 0002588c 01000002     .>.......X......
   258cc:	00023ed0 00025914 00025892 01000005     .>...Y...X......
   258dc:	00023ecc 1000a0f4 00025890 01000001     .>.......X......
   258ec:	00023ed0 0002591c 00025896 01000005     .>...Y...X......
   258fc:	00023ef0 1000a0f8 00025894 01000001     .>.......X......

0002590c <gapValApCh>:
   2590c:	01000502 0000002a                       ....*...

00025914 <gapValCarCh>:
   25914:	a6000702 0000002a                       ....*...

0002591c <gapValRpaoCh>:
   2591c:	c9000902 0000002a                       ....*...

00025924 <gapValSvc>:
   25924:	                                         ..

00025926 <gattLenCsf>:
   25926:	                                         ..

00025928 <gattLenCsfCh>:
   25928:	                                         ..

0002592a <gattLenDbh>:
   2592a:	                                         ..

0002592c <gattLenDbhCh>:
   2592c:	                                         ..

0002592e <gattLenSc>:
   2592e:	                                         ..

00025930 <gattLenScCh>:
   25930:	                                         ..

00025932 <gattLenScChCcc>:
   25932:	                                         ..

00025934 <gattLenSvc>:
   25934:	00000002                                ....

00025938 <gattList>:
   25938:	00023eec 000259d4 00025934 01000002     .>...Y..4Y......
   25948:	00023ed0 000259cc 00025930 01000005     .>...Y..0Y......
   25958:	00023ef4 000259c8 0002592e 00000004     .>...Y...Y......
   25968:	00023ed4 1000a110 00025932 11200002     .>......2Y.... .
   25978:	00023ed0 000259b8 00025928 01000005     .>...Y..(Y......
   25988:	00023edc 1000a0fc 00025926 11060001     .>......&Y......
   25998:	00023ed0 000259c0 0002592c 01000005     .>...Y..,Y......
   259a8:	00023ee0 1000a100 0002592a 01040010     .>......*Y......

000259b8 <gattValCsfCh>:
   259b8:	29001502 0000002b                       ...)+...

000259c0 <gattValDbhCh>:
   259c0:	2a001702 0000002b                       ...*+...

000259c8 <gattValSc>:
   259c8:	ffff0001                                ....

000259cc <gattValScCh>:
   259cc:	05001220 0000002a                        ...*...

000259d4 <gattValSvc>:
   259d4:	                                         ..

000259d6 <iasLenAl>:
   259d6:	                                         ..

000259d8 <iasLenAlCh>:
   259d8:	                                         ..

000259da <iasLenSvc>:
   259da:	                                         ..

000259dc <iasValAlCh>:
   259dc:	06005504 0000002a                       .U..*...

000259e4 <iasValSvc>:
   259e4:	                                         ..

000259e6 <llsLenAl>:
   259e6:	                                         ..

000259e8 <llsLenAlCh>:
   259e8:	                                         ..

000259ea <llsLenSvc>:
   259ea:	                                         ..

000259ec <llsValAlCh>:
   259ec:	0600520a 0000002a                       .R..*...

000259f4 <llsValSvc>:
   259f4:	00001803                                ....

000259f8 <pxList>:
   259f8:	00023eec 000259f4 000259ea 01000002     .>...Y...Y......
   25a08:	00023ed0 000259ec 000259e8 01000005     .>...Y...Y......
   25a18:	00025a88 1000a118 000259e6 11000001     .Z.......Y......
   25a28:	00023eec 000259e4 000259da 01000002     .>...Y...Y......
   25a38:	00023ed0 000259dc 000259d8 01000005     .>...Y...Y......
   25a48:	00025a88 1000a114 000259d6 10020001     .Z.......Y......
   25a58:	00023eec 00025a94 00025a8e 01000002     .>...Z...Z......
   25a68:	00023ed0 00025a98 00025a92 01000005     .>...Z...Z......
   25a78:	00025a8c 1000a11c 00025a90 01000001     .Z.......Z......

00025a88 <svcAlLvlUuid>:
   25a88:	00002a06                                .*..

00025a8c <svcTxPwrUuid>:
   25a8c:	                                         .*

00025a8e <txsLenSvc>:
   25a8e:	                                         ..

00025a90 <txsLenTx>:
   25a90:	                                         ..

00025a92 <txsLenTxCh>:
   25a92:	                                         ..

00025a94 <txsValSvc>:
   25a94:	00001804                                ....

00025a98 <txsValTxCh>:
   25a98:	07005802 0000002a                       .X..*...

00025aa0 <ccitt_table>:
   25aa0:	80050000 000a800f 001e801b 80110014     ................
   25ab0:	00368033 8039003c 802d0028 00228027     3.6.<.9.(.-.'.".
   25ac0:	00668063 8069006c 807d0078 00728077     c.f.l.i.x.}.w.r.
   25ad0:	80550050 005a805f 004e804b 80410044     P.U._.Z.K.N.D.A.
   25ae0:	00c680c3 80c900cc 80dd00d8 00d280d7     ................
   25af0:	80f500f0 00fa80ff 00ee80eb 80e100e4     ................
   25b00:	80a500a0 00aa80af 00be80bb 80b100b4     ................
   25b10:	00968093 8099009c 808d0088 00828087     ................
   25b20:	01868183 8189018c 819d0198 01928197     ................
   25b30:	81b501b0 01ba81bf 01ae81ab 81a101a4     ................
   25b40:	81e501e0 01ea81ef 01fe81fb 81f101f4     ................
   25b50:	01d681d3 81d901dc 81cd01c8 01c281c7     ................
   25b60:	81450140 014a814f 015e815b 81510154     @.E.O.J.[.^.T.Q.
   25b70:	01768173 8179017c 816d0168 01628167     s.v.|.y.h.m.g.b.
   25b80:	01268123 8129012c 813d0138 01328137     #.&.,.).8.=.7.2.
   25b90:	81150110 011a811f 010e810b 81010104     ................
   25ba0:	03068303 8309030c 831d0318 03128317     ................
   25bb0:	83350330 033a833f 032e832b 83210324     0.5.?.:.+...$.!.
   25bc0:	83650360 036a836f 037e837b 83710374     `.e.o.j.{.~.t.q.
   25bd0:	03568353 8359035c 834d0348 03428347     S.V.\.Y.H.M.G.B.
   25be0:	83c503c0 03ca83cf 03de83db 83d103d4     ................
   25bf0:	03f683f3 83f903fc 83ed03e8 03e283e7     ................
   25c00:	03a683a3 83a903ac 83bd03b8 03b283b7     ................
   25c10:	83950390 039a839f 038e838b 83810384     ................
   25c20:	82850280 028a828f 029e829b 82910294     ................
   25c30:	02b682b3 82b902bc 82ad02a8 02a282a7     ................
   25c40:	02e682e3 82e902ec 82fd02f8 02f282f7     ................
   25c50:	82d502d0 02da82df 02ce82cb 82c102c4     ................
   25c60:	02468243 8249024c 825d0258 02528257     C.F.L.I.X.].W.R.
   25c70:	82750270 027a827f 026e826b 82610264     p.u...z.k.n.d.a.
   25c80:	82250220 022a822f 023e823b 82310234      .%./.*.;.>.4.1.
   25c90:	02168213 8219021c 820d0208 02028207     ................

00025ca0 <am_ble_buffer_patch_data>:
   25ca0:	0d382200 0000ffff 00093532 00093965     ."8.....25..e9..
   25cb0:	0009452b 000948a9 000953f7 00095c1a     +E...H...S...\..
   25cc0:	0009641c 00096afd 0009751a 00097bde     .d...j...u...{..
   25cd0:	0009854b 00098bb3 0009951f 00099c4f     K...........O...
   25ce0:	0009a2f5 0009ad1e 00000000 00000000     ................
	...
   25d1c:	47004800 20004841 bf00bf00 b005bf00     .H.GAH. ........
   25d2c:	0000bdf0 20006790 00002710 20001000     .....g. .'..... 
   25d3c:	00001388 20001018 000003ff b0ffb5ff     ....... ........
   25d4c:	4607b082 4616460c 48302500 99846006     ...F.F.F.%0H.`..
   25d5c:	28eed004 2003d002 bd707360 28f17c60     ...(... `sp.`|.(
   25d6c:	28f2d006 28f3d004 2002d002 bd707360     ...(...(... `sp.
   25d7c:	73602000 0000bd70 20001018 2000100a     . `sp...... ... 
   25d8c:	47004800 20004d81 28008870 2014d116     .H.G.M. p..(... 
   25d9c:	200b2101 fcc6f7ed 0000bd10 47004800     .!. .........H.G
   25dac:	20004e15 d0022800 28017808 7808d01a     .N. .(...x.(...x
   25dbc:	d0172802 d00e2800 d00c2801 fed9f7f0     .(...(...(......
   25dcc:	d0082800 f816f000 f7ef2032 f7f0f851     .(......2 ..Q...
   25ddc:	e000e180 e000e100 68014802 43912228     .........H.h(".C
   25dec:	47706001 52c00000 47004800 20004881     .`pG...R.H.G.H. 
   25dfc:	47706001 52c00000 68014802 43912250     .`pG...R.H.hP".C
   25e0c:	47706001 52c00000 47004800 200048a1     .`pG...R.H.G.H. 
   25e1c:	508040c0 460bb510 24024611 4350220c     .@.P...F.F.$."PC
   25e2c:	18804a06 d0062800 2a006842 4618d003     .J...(..Bh.*...F
   25e3c:	fb10f000 46204604 0000bd10 00015698     .....F F.....V..
   25e4c:	47084900 20004e99 fd5cf7f3 5b00207c     .I.G.N. ..\.| .[
   25e5c:	1940f80b 2900b2c1 3440d003 f7f98fa0     ..@....)..@4....
   25e6c:	bd70fd73 e7e12101 47084900 20005081     s.p..!...I.G.P. 
   25e7c:	8810f380 f7f34628 2100f94d 8810f381     ....(F..M..!....
   25e8c:	d00f2800 460a8881 2a463a0a 1c64d20c     .(.....F.:F*..d.
   25e9c:	03d20bd2 84c2430a f3802000 47708810     .....C... ....pG
   25eac:	00000466 50804440 47084900 200050ed     f...@D.P.I.G.P. 
   25ebc:	8f809011 9812900e 900d3008 30309812     .........0....00
   25ecc:	9812900c 900b3044 900a2000 980c2501     ....D0... ...%..
   25edc:	f8a4f007 d02d2800 bf00bf00 bf00bf00     .....(-.........
   25eec:	bf00bf00 bf00bf00 bf00bf00 9a0ce091     ................
   25efc:	232220ff 300a4611 fb9ef7fd 88617007     . "#.F.0.....pa.
   25f0c:	88a181c1 88e18201 892180c1 7aa18101     ..........!....z
   25f1c:	e02301c0 9802e077 01401a08 42900940     ..#.w.....@.@..B
   25f2c:	9802d91c 01401a40 42400940 9802e016     ....@.@.@.@B....
   25f3c:	bf00bf00 bf00bf00 bf00bf00 bf00bf00     ................
   25f4c:	2000bf00 9802e00a 01401a38 42900940     ... ....8.@.@..B
   25f5c:	607565c1 84b88960 20019a04 88607550     .eu``...... Pu`.
   25f6c:	9a0485f8 75107860 47004800 200048e1     ....`x.u.H.G.H. 
   25f7c:	0000bf00 8d3a8960 b2801e40 d1034282     ....`.:.@....B..
   25f8c:	43012008 71819803 bdf0b007 20006160     . .C...q....`a. 
	...
   25fac:	00000021 00000000 00000001 00000000     !...............
   25fbc:	ffffffff 000003ff 1f3c00ff 00000000     ..........<.....
   25fcc:	00002001 00007d89 00002002 000076fd     . ...}... ...v..
   25fdc:	8c001810 9b080bc0 42181e5b 9808d105     ........[..B....
   25fec:	47004800 200048c1 0000bf00 18d24b80     .H.G.H. .....K..
   25ffc:	20018450 8810f380 280068b8 2000d016     P.. .....h.(... 
   2600c:	d0192800 28006b38 2000d012 d0132800     .(..8k.(... .(..
   2601c:	1900fc9f 68594b06 088a1809 1b090094     .....KYh........
   2602c:	01416059 18801a08 0000bd10 2000602c     Y`A.........,`. 
   2603c:	200067b8 47084900 20005579 6a80217d     .g. .I.GyU. }!.j
   2604c:	42880209 1a40d302 e0002201 2a001a08     ...B..@..".....*
   2605c:	1a081929 f7ee4621 b288feb1 3028bd70     )...!F......p.(0
   2606c:	7e003060 b4104770 32404602 24068cd3     `0.~pG...F@2...$
   2607c:	8d144363 b29b18e3 30608493 46187541     cC........`0Au.F
   2608c:	4770bc10 30603028 28007d40 20002000     ..pG(0`0@}.(. . 
   2609c:	07007940 2004d502 e0347060 f0056928     @y..... `p4.(i..
   260ac:	2800fb51 2002d002 e02c7060 f0039803     Q..(... `p,.....
   260bc:	2804fe4d 4668d107 20027901 d0054388     M..(..hF.y. .C..
   260cc:	28002000 2000d004 e01c7060 e7f82001     . .(... `p... ..
   260dc:	20006758 50800040 200067b8 04000000     Xg. @..P.g. ....
   260ec:	200067c8 47084900 200055cd 207d6a81     .g. .I.G.U. .j} 
   260fc:	42810200 1a08d302 e0002201 2a001a40     ...B....."..@..*
   2610c:	4360d004 fca4f7eb e0031a20 f7eb4360     ..`C.... ...`C..
   2611c:	2400b5f8 7800481c d12d2800 68704e1b     ...$.H.x.(-..Nph
   2612c:	28004d1b 4f1bda09 200b2101 210147b8     .M.(...O.!. .G.!
   2613c:	47a8200b 28006870 2100dbf6 47a8200b     . .Gph.(...!. .G
   2614c:	200a4e15 270547b0 69f8073f 0d2d0505     .N. .G.'?..i..-.
   2615c:	d1042d00 68c04811 0e800580 2c64d00c     .-...H.h......d,
   2616c:	2014d20a 69f847b0 0d000500 d90442a8     ... .G.i.....B..
   2617c:	1c644605 d3f42c64 4903bdf8 70082001     .Fd.d,.....I. .p
   2618c:	70084907 0000bdf8 20001001 45800080     .I.p....... ...E
   2619c:	00002455 00002391 00003ba1 52c00000     U$...#...;.....R
   261ac:	20001000 4818b510 29406801 2140d201     ... ...H.h@)..@!
   261bc:	7a806001 d00107c0 bd102000 47804813     .`.z..... ...H.G
   261cc:	07002005 491269c0 d0040500 28017808     . ...i.I.....x.(
   261dc:	2802d014 7808d012 d0082800 d0062801     ...(...x.(...(..
   261ec:	d0042802 4780480b 2032490b 490b4788     .(...H.G.I2 .G.I
   261fc:	47882004 4780480a bd102000 20044909     . .G.H.G. ...I. 
   2620c:	20014788 0000bd10 200067b8 00009305     .G. .....g. ....
   2621c:	20001018 00014b25 00003ba1 00014441     ... %K...;..AD..
   2622c:	00014aaf 00014489 b08db5f0 496c4604     .J...D.......FlI
   2623c:	4788a804 5b00207c 25009003 90022000     ...G| .[...%. ..
   2624c:	f3802001 6c608810 f3812100 46268810     . ....`l.!....&F
   2625c:	28003660 4621d06b 910c3144 910b3928     `6.(k.!FD1..(9..
   2626c:	910a3164 00ca8881 1851495e 0bc98cc9     d1......^IQ.....
   2627c:	d05c2900 f3812101 68008810 495a9001     .)\..!.....h..ZI
   2628c:	4788980c 69e04607 d0032800 28002000     ...G.F.i.(... .(
   2629c:	e008d002 e7fa2001 980b4953 28004788     ..... ..SI...G.(
   262ac:	4952d001 20004788 8810f380 494d88b8     ..RI.G. ......MI
   262bc:	184000c0 0bd28cc2 84c203d2 280788b8     ..@............(
   262cc:	7e30d21e 76301e40 f3802001 6b208810     ..0~@.0v. .... k
   262dc:	d0132800 28002000 980ad005 798021fb     .(... .(.....!.y
   262ec:	990a4008 49417188 47884638 f3802000     .@...qAI8F.G. ..
   262fc:	4a3f8810 98037b39 e0154790 e7ea2001     ..?J9{...G... ..
   2630c:	d90f2809 184000c0 0a008d00 49399000     .(....@.......9I
   2631c:	47884638 d0072800 28009800 1c6dd004     8F.G.(.....(..m.
   2632c:	e001b2ed b2ed1c6d 28009801 9803d19a     ....m......(....
   2633c:	d00e2807 d00c2d00 f3802001 7e308810     .(...-... ....0~
   2634c:	76301b40 f3802000 4a2b8810 98034629     @.0v. ....+J)F..
   2635c:	20014790 8810f380 4f234828 47b89009     .G. ....(H#O...G
   2636c:	20004604 8810f380 d0360020 88e04e1f     .F. .... .6..N..
   2637c:	42889903 2807d112 7aa1d007 4f209100     ...B...(...z.. O
   2638c:	7b227ae3 47b88921 4b1ee005 89207921     .z"{!..G...K!y .
   2639c:	4798462a 46209002 e00347b0 46214a1a     *F.G.. F.G...J!F
   263ac:	4790a804 f3802001 490f8810 47889809     ...G. .....I...G
   263bc:	00204604 9804d10c d0032800 28002000     .F ......(... .(
   263cc:	e005d002 e7fa2001 a9044a10 47909809     ..... ...J.....G
   263dc:	f3802000 2c008810 9802d1c9 bdf0b00d     . .....,........
   263ec:	000038b5 50804440 00003945 000093a5     .8..@D.PE9......
   263fc:	0000b809 0000565d 0000b705 200061b8     ....]V.......a. 
   2640c:	0000b729 00012235 00003967 0000390f     )...5"..g9...9..
   2641c:	2400b5f1 4e164d15 f3802001 98008810     ...$.M.N. ......
   2642c:	210047a8 8810f381 d0172800 460a8881     .G.!.....(.....F
   2643c:	2a463a0a 00c9d214 8d091989 21010a0f     .:F*...........!
   2644c:	8810f381 4788490b d0032800 d0012f00     .....I.G.(.../..
   2645c:	b2e41c64 f3802000 e7dd8810 bdf84620     d.... ...... F..
   2646c:	29491fc9 4904d3d8 e7d54788 00003945     ..I)...I.G..E9..
   2647c:	50804440 0000565d 000093a5 b092b5f1     @D.P]V..........
   2648c:	30409812 8f809011 9812900e 900d3008     ..@0.........0..
   2649c:	30309812 9812900c 900b3044 900a2000     ..00....D0... ..
   264ac:	980c2501 2c006804 2000d003 d0022800     .%...h.,... .(..
   264bc:	2001e093 980ee7fa 48f900c1 90101808     ... .......H....
   264cc:	0bc08cc0 d06e2800 49f6980e 900f0080     .....(n....I....
   264dc:	30a05808 20017946 d5190771 d0172c00     .X.0Fy. q....,..
   264ec:	06b04ff1 7b20d507 078047b8 2000d401     .O.... {.G..... 
   264fc:	2001e006 7b20e004 07c047b8 2001d003     ... .. {.G..... 
   2650c:	d0022800 2000e004 6824e7fa d1e82c00     .(..... ..$h.,..
   2651c:	d0622800 22004be5 980c4621 68a64798     .(b..K."!F...G.h
   2652c:	a9094ae3 47904630 d1562800 4fdc88a0     .J..0F.G.(V....O
   2653c:	19c000c0 49df8d40 20001841 7912aa08     ....@..IA.. ...y
   2654c:	dd062a00 540a5c32 aa081c40 42907912     .*..2\.T@....y.B
   2655c:	49d9dbf8 478868a0 980f49d2 30a05808     ...I.h.G.I...X.0
   2656c:	07c07940 a908d003 1d007908 a8089009     @y.......y......
   2657c:	98107901 02098d02 430ab2d2 21038502     .y.........C...!
   2658c:	8d029810 430a438a 98118502 21008f80     .....C.C.......!
   2659c:	19c000c0 980b84c1 28006800 2000d004     .........h.(... 
   265ac:	d0032800 e018e010 e7f92001 88a1980b     .(....... ......
   265bc:	00ca6840 888049c1 00c01851 8cc219c0     @h...I..Q.......
   265cc:	03d20bd2 84c2430a 46214abd 4790980b     .....C...J!F...G
   265dc:	30609812 1c497e01 98117601 28078f80     ..`0.~I..v.....(
   265ec:	990ed208 49af008a 31a05889 07497949     .......I.X.1IyI.
   265fc:	2500d500 6809990d d01f2900 462a2100     ...%...h.)...!*F
   2660c:	d077438a d2762807 48ae49af 90094788     .Cw..(v..I.H.G..
   2661c:	90082000 8f809811 48a20081 30a05840     . .........H@X.0
   2662c:	07c07940 90070fc0 6806980d d0092e00     @y.........h....
   2663c:	6830990d 28006008 e003d002 e7de2101     ..0h.`.(.....!..
   2664c:	6048990d d07d2e00 90062000 90039812     ..H`..}.. ......
   2665c:	9004a806 9b099f07 25089705 20005f75     ...........%u_. 
   2666c:	90019002 90002001 8e429811 b2d44684     ..... ....B..F..
   2667c:	46292001 b2893109 2f009f05 1d09d001     . )F.1...../....
   2668c:	00c9b289 b2893108 8e3f4667 d205428f     .....1..gF?..B..
   2669c:	05793f50 42a20e0c b2d4d200 dd0142a5     P?y....B.....B..
   266ac:	00640864 1a6f4621 42971c62 1909db05     d.d.!Fo.b..B....
   266bc:	b2c01c40 42971a6f 4298daf9 2500d901     @...o..B...B...%
   266cc:	9904e034 4f817008 487e4981 46014788     4....p.O.I~H.G.F
   266dc:	28009800 2000d012 7ab09000 0f800780     ...(... ...z....
   266ec:	d0092801 72882002 88c268f0 88809202     .(... .r.h......
   266fc:	e0099001 e058e062 e7f42001 72882001     ....b.X.. ... .r
   2670c:	19009802 9002b280 dd0142a5 e00072cc     .........B...r..
   2671c:	980172cd 980280c8 1b288108 2d00b205     .r........(....-
   2672c:	2201dc22 98039b05 250147b8 d0202d00     "..".....G.%.- .
   2673c:	7e004668 18099908 9108b2c9 1a089909     hF.~............
   2674c:	e000b280 9009e035 69c09812 d01a2800     ....5......i.(..
   2675c:	6a009812 98126006 20006206 98086030     ...j.`...b. 0`..
   2676c:	d913280a e0242500 9b052200 47b89803     .(...%$..".....G
   2677c:	980de7aa 28006800 990dd101 6030604e     .....h.(....N`0`
   2678c:	6006980d 9812e015 e7e461c6 6806980d     ...`.....a.....h
   2679c:	d0062e00 6830990d 28006008 990dd101     ......0h.`.(....
   267ac:	2e006048 e74fd000 4a4ae003 980b990d     H`....O...JJ....
   267bc:	2d004790 4948d002 4788980d 6800980b     .G.-..HI...G...h
   267cc:	d0032800 28002000 e04bd002 e7fa2001     .(... .(..K.. ..
   267dc:	8f809811 d2452807 30809812 280478c0     .....(E....0.x.(
   267ec:	493bd140 47884837 d03b2800 21008882     @.;I7H.G.(;....!
   267fc:	00d24b2b 855118d2 00c98881 8d8a18c9     +K....Q.........
   2680c:	0c640454 858c2200 00c98881 8d0c18c9     T.d.."..........
   2681c:	850cb2e4 24018881 18c900c9 08ad8d0d     .......$........
   2682c:	432500ad 8881850d 18c900c9 0be48ccc     ..%C............
   2683c:	84cc03e4 8884990b 00e56849 88894c1f     ........Ih...L..
   2684c:	00c9192c 8ccb18c9 03db0bdb 84cb4323     ,...........#C..
   2685c:	6809990b d00d2900 6849990b 990b6008     ...h.)....Ih.`..
   2686c:	60026048 6800980b d0062800 29002100     H`.`...h.(...!.)
   2687c:	e03cd005 6008990b 2101e7f1 2800e7f7     ..<....`...!...(
   2688c:	4a07d00a 00c98881 8cc91889 29000bc9     ...J...........)
   2689c:	6800d024 d1f52800 d0262800 0000e027     $..h.(...(&.'...
   268ac:	50804440 20006160 0000af81 00003817     @D.P`a. .....8..
   268bc:	00010341 50804000 000093a5 00000466     A....@.P....f...
   268cc:	00003967 200061e4 000039bb 00010011     g9...a. .9......
   268dc:	00003945 0000390f 000038b5 00ca8881     E9...9...8......
   268ec:	18514907 910ab289 2000e7d6 990a900a     .IQ........ ....
   268fc:	225a980e 4a034350 84811880 bdf0b013     ..Z"PC.J........
   2690c:	00000466 50804080 2300b410 46022114     f....@.P...#.!.F
   2691c:	4911434a 6809247d 42a10224 1b09d902     JC.I}$.h$..B....
   2692c:	e0002301 43481a61 18410081 0c0c0a88     .#..a.HC..A.....
   2693c:	0c4c1900 0d4c1900 0e4c1900 0fc91900     ..L...L...L.....
   2694c:	08c01840 d0012b00 e0011810 1e401a10     @....+........@.
   2695c:	bc101e40 00004770 20006054 2300b4f0     @...pG..T`. ...#
   2696c:	6be54c18 227d4918 02126809 d3024291     .L.k.I}".h...B..
   2697c:	23011a8a 1a52e000 43564606 435113f2     ...#..R..FVC..QC
   2698c:	261e1a71 104f434e 118f19f6 124919f6     q..&NCO.......I.
   2699c:	13ce1871 d0012b00 e0001a80 19421810     q....+........B.
   269ac:	008d0891 2b001b52 0143d004 18401a18     ....R..+..C...@.
   269bc:	e0031b80 1a180143 19801840 bcf063e2     ....C...@....c..
   269cc:	00004770 20006780 20006054              pG...g. T`. 

000269d8 <am_ble_performance_copy_patch_data>:
   269d8:	006e1100 00000400 00000000 01c50101     ..n.............
   269e8:	00000039 00000000 00000000 00000000     9...............
   269f8:	00000000 ffffffff 2000b570 8849490c     ........p.. .II.
   26a08:	188b4a0c 490c881a 24001c9b 022d2513     .J.....I...$.%-.
   26a18:	1c40540c dbfb42a8 2a002000 5c1cdd04     .T@..B... .*...\
   26a28:	1c40540c dbfa4290 47804804 bd702000     .T@..B...H.G. p.
   26a38:	20004800 20004802 20003500 000133af     .H. .H. .5. .3..
   26a48:	b51f08a0 98002400 d243281d 44790001     .....$...(C...yD
   26a58:	18497909 130e448f 40251a40 40404040     .yI..D..@.%@@@@@
   26a68:	40404040 402a4040 2d404040 35403240     @@@@@@*@@@@-@2@5
   26a78:	00404038 b2c09801 fa07f000 9802e02c     8@@.........,...
   26a88:	9801b2c1 f000b2c0 e025f8b8 b2839806     ..........%.....
   26a98:	b2829803 b2c19802 b2c09801 f971f000     ..............q.
   26aa8:	9801e01a f000b2c0 e015f90a f829f000     ..............).
   26ab8:	9801e012 f000b280 e00df962 fb3bf000     ........b.....;.
   26ac8:	f000e00a e007fb94 b2c09801 fac7f000     ................
   26ad8:	e0014604 43e42400 b0044620 b403bd10     .F...$.C F......
   26ae8:	90014801 2739bd01 b4030000 90014801     .H....9'.....H..
   26af8:	2895bd01 b4030000 90014801 0101bd01     ...(.....H......
   26b08:	b4f00000 22432000 68510612 340124ff     ..... C"..Qh.$.4
   26b18:	60514321 03236851 60514319 05db23a3     !CQ`Qh#..CQ`.#..
   26b28:	08496819 60190049 6909492a 4d29b2ce     .hI.I..`*I.i..)M
   26b38:	88294f2a d30142b9 e00d2004 42b94f28     *O)..B... ..(O.B
   26b48:	2003d301 4f26e008 d30142b9 e0032002     ... ..&O.B... ..
   26b58:	42b94f25 2001d300 18394f24 7e093120     %O.B... $O9. 1.~
   26b68:	da0942b1 dd012800 b2401e40 7a091839     .B...(..@.@.9..z
   26b78:	19c00040 e00b8b00 da042804 42b15c39     @........(..9\.B
   26b88:	1c40db01 1839b240 00407a09 8b0019c0     ..@.@.9..z@.....
   26b98:	62314e17 08496819 60190049 6b314e15     .N1b.hI.I..`.N1k
   26ba8:	4327460f 62986337 633143a1 68518028     .F'C7c.b.C1c(.Qh
   26bb8:	438103b0 78004810 0fc007c0 43190503     ...C.H.x.......C
   26bc8:	68516051 43a10200 60514301 4770bcf0     Q`Qh...C.CQ`..pG
   26bd8:	00800000 604e4580 3ff62000 38f60000     .....EN`. .?...8
   26be8:	2df60000 09f60000 67fc0000 04802000     ...-.......g. ..
   26bf8:	004050c0 603a4580 b5f02000 2243b082     .P@..E:`. ....C"
   26c08:	68530612 04642401 60534323 0fd207ca     ..Sh.$d.#CS`....
   26c18:	078a4696 074a0fd3 070a0fd4 92010fd2     .F....J.........
   26c28:	0fd206ca 068a9200 46940fd2 0fd5064a     ...........FJ...
   26c38:	4a1f09ce 27036811 43b9057f 4f1d6912     ...J.h.'...C.i.O
   26c48:	2800403a 2801d006 2701d009 280205bf     :@.(...(...'...(
   26c58:	4339d003 d0062800 4339e01b 2701e7fa     ..9C.(....9C...'
   26c68:	4339057f 0330e7f6 016a4310 46624310     ..9C..0..Cj..CbF
   26c78:	431002d2 01d29a00 9a014310 43100192     ...C.....C.....C
   26c88:	431002a2 4310025a 02124672 4a084310     ...CZ..CrF...C.J
   26c98:	48076110 20436001 68410600 04522201     .a.H.`C ..Ah."R.
   26ca8:	4a054391 07d27812 43110b92 b0026041     .C.J.x.....CA`..
   26cb8:	0000bdf0 e00343c0 603affff b5f82000     .....C....:`. ..
   26cc8:	20432400 68410600 03bf2701 60414339     .$C ..Ah.'..9CA`
   26cd8:	00ba6841 60414311 68054821 430d1c51     Ah...CA`!H.hQ..C
   26ce8:	4e1f6005 47b020c8 6888491f 60884338     .`.N. .G.I.h8C.`
   26cf8:	68f0460e 0fc70400 2001491a 46204788     .F.h.....I. .G F
   26d08:	1c64491a d8014288 d0f22f00 40054818     .Id..B.../...H.@
   26d18:	60054813 03402001 68f160b0 40014815     .H.`. @..`.h.H.@
   26d28:	4a146870 43084010 68306070 0289213f     ph.J.@.Cp`0h?!..
   26d38:	60304388 06092143 2001684a 43820380     .C0`C!..Jh. ...C
   26d48:	7800480e 0fc007c0 431a0383 684a604a     .H.x.......CJ`Jh
   26d58:	041b2301 0400439a 604a4302 0000bdf8     .#...C...CJ`....
   26d68:	3ba15240 00000000 271051c0 fffe0000     @R.;.....Q.'....
   26d78:	3f3ffffe c0c00000 603affff 47702000     ..??......:`. pG
   26d88:	b5f00000 2508b083 2000493c 20437008     .......%<I. .pC 
   26d98:	68410600 431102aa 27296041 067f4938     ..Ah...CA`)'8I..
   26da8:	684160f9 43914b37 07db781b 43190c9b     .`Ah7K.C.x.....C
   26db8:	24256041 684101a4 60414311 10526841     A`%$..Ah.CA`AhR.
   26dc8:	60414311 210368f8 43880649 43060356     .CA`.h.!I..CV..C
   26dd8:	43060390 200168b8 fe81f7ff 20104621     ...C.h. ....!F. 
   26de8:	fe83f7ff 43060328 2d002400 60fed90c     ....(..C.$.-...`
   26df8:	20644925 68f84788 0a004669 55081c80     %Id .G.hiF.....U
   26e08:	b2e41c64 d3f242ac 79d0466a 18407991     d....B..jF.y.y@.
   26e18:	79127951 18401889 78d1466a 78901841     Qy.y..@.jF.xA..x
   26e28:	78501809 78101809 46291808 fe63f7ff     ..Px...x..)F..c.
   26e38:	b2c04912 68397008 02922201 60394311     .I...p9h."...C9`
   26e48:	1c400040 20006178 fe49f7ff 06092143     @.@.xa. ..I.C!..
   26e58:	2001684a 43820300 7800480a 0fc007c0     Jh. ...C.H.x....
   26e68:	431a0303 684a604a 035b2301 0340439a     ...CJ`Jh.#[..C@.
   26e78:	604a4302 bdf0b003 60700000 34cc2000     .CJ`......p`. .4
   26e88:	603a0263 3ba12000 b4700000 06092143     c.:`. .;..p.C!..
   26e98:	24016848 432004a4 20c46048 05d22287     Hh.$.. CH`. ."..
   26ea8:	485c6010 68486150 43a04a5c 07d27812     .`\HPaHh\J.C.x..
   26eb8:	04930fd2 60484318 4b58208b 634305c0     .....CH`. XK..Cc
   26ec8:	25014b58 250660dd 250560cd 688563c5     XK.%.`.%.`.%.c.h
   26ed8:	3df0086d 68c56085 355d086d 690560c5     m..=.`.hm.]5.`.i
   26ee8:	6105086d 086d6945 69856145 6185086d     m..aEim.Ea.im..a
   26ef8:	086d69c5 6a0561c5 6205086d 086d6a45     .im..a.jm..bEjm.
   26f08:	6a856245 6285086d 086d6ac5 250162c5     Eb.jm..b.jm..b.%
   26f18:	625d611d 4b43639d 4d43601d 6a1d615d     .a]b.cCK.`CM]a.j
   26f28:	621d086d 25016ac3 62c3432b 10a36848     m..b.j.%+C.bHh..
   26f38:	60484318 109b6848 60484318 4b3b483d     .CH`Hh...CH`=H;K
   26f48:	68836143 05ad253f 6083432b 60c32300     Ca.h?%..+C.`.#.`
   26f58:	61834b39 682b4d39 43b3261e 6a83602b     9K.a9M+h.&.C+`.j
   26f68:	43ab03f5 6283191b 10a36848 04134398     ...C...bHh...C..
   26f78:	60484318 11236848 03934398 60484318     .CH`Hh#..C...CH`
   26f88:	11636848 60484318 06402029 09246a04     Hhc..CH`) @..j$.
   26f98:	34080124 68486204 03534398 60484318     $..4.bHh.CS..CH`
   26fa8:	23016848 4318051b 24286048 05c020a3     Hh.#...CH`($. ..
   26fb8:	4d226004 6285882d 05126848 43104398     .`"M-..bHh...C.C
   26fc8:	481f6048 700121e6 4a1d7204 8310481e     H`.H.!.p.r.J.H..
   26fd8:	23e0481e 4c1a7603 706222d4 7262223c     .H.#.v.L."bp<"br
   26fe8:	83624a1b 22c87641 4d1570a2 72ac2446     .Jb.Av.".p.MF$.r
   26ff8:	83ac4c18 46297681 215070ca 72d1462a     .L...v)F.pP!*F.r
   27008:	83d14915 215a76c3 49137311 77038411     .I...vZ!.s.I...w
   27018:	4770bc70 7fff0000 603a0000 02492000     p.pG......:`. I.
   27028:	00400000 00804580 021e4580 00030000     ..@..E...E......
   27038:	0000003c 00085240 0000000f 604e51c0     <...@R.......QN`
   27048:	67fc2000 07f62000 681c0000 09f62000     . .g. .....h. ..
   27058:	2df60000 38f60000 3ff60000 b5f80000     ...-...8...?....
   27068:	6800482d d1542800 06122243 21016850     -H.h.(T.C"..Ph.!
   27078:	430803c9 4f286050 2501683c 06002003     ...CP`(O<h.%. ..
   27088:	60384320 49252600 4788201e 20014924      C8`.&%I. .G$I. 
   27098:	68784788 0fc007c0 4a214631 42911c76     .Gxh....1F!Jv..B
   270a8:	2800d801 481cd0f2 481e6881 20006001     ...(...H.h.H.`. 
   270b8:	2d002600 4b1cd011 25004632 41aa1acb     .&.-...K2F.%...A
   270c8:	1c40da14 4f184605 4633434d 1b7d2200     ..@..F.OMC3F."}.
   270d8:	1b4d419a dbf44193 4b14e008 d2054299     .AM..A.....K.B..
   270e8:	46021c40 1a9a434a d8f9428a 06092101     @..FJC...B...!..
   270f8:	0049438c 4908430c 2243600c 68510612     .CI..C.I.`C"..Qh
   27108:	03db2301 4b0a4399 07db781b 43190c1b     .#...C.K.x.....C
   27118:	bdf86051 605c0000 00002000 3ba14440     Q`....\`. ..@D.;
   27128:	27100000 60600000 20002000 d000bebc     ...'..``. . ....
   27138:	603a1312 b5702000 47804823 06242443     ..:`. p.#H.GC$$.
   27148:	68602101 43080489 481f6060 481f4780     .!`h...C``.H.G.H
   27158:	28aa7800 68a0d106 d1030780 4788491d     .x.(...h.....I.G
   27168:	6008491d 05c020a1 21026b02 430a438a     .I.`. ...k.!.C.C
   27178:	21016302 438a6b02 6302430a 26046b01     .c.!.k.C.C.c.k.&
   27188:	433143b1 4c146301 4d146860 d5040080     .C1C.c.L`h.M....
   27198:	47a82001 00806860 4c11d4fa 6060200f     . .G`h.....L. ``
   271a8:	47a82001 60602007 47a82004 60602006     . .G. ``. .G. ``
   271b8:	480c218b 600805c9 6901480c 61014331     .!.H...`.H.i1C.a
   271c8:	bd70bf30 37350000 9c390000 602c0000     0.p...57..9...,`
   271d8:	39d12000 60540000 00802000 3ba14580     . .9..T`. ...E.;
   271e8:	00400000 03264580 ed000000 b570e000     ..@..E&.......p.
   271f8:	200f4d2f 248b6068 682005e4 02492101     /M. h`.$.. h.!I.
   27208:	60204388 4780482b f3802001 48298810     .C `+H.G. ....)H
   27218:	49296840 d4060080 22086820 60204310     @h)I.... h.".C `
   27228:	47882001 2001e001 48244788 48244780     . .G... .G$H.G$H
   27238:	78004925 200d4788 48236068 20434780     %I.x.G. h`#H.GC 
   27248:	68410600 035b2301 60414319 4a1f2129     ..Ah.#[..CA`)!.J
   27258:	60ca0649 09126a0a 32080112 680a620a     I..`.j.....2.b.h
   27268:	432210dc 4a1a600a 00527812 614a1c52     .."C.`.J.xR.R.Ja
   27278:	49186842 7809439a 0fc907c9 431a034b     Bh.I.C.x....K..C
   27288:	68436042 431302a2 24286043 05db23a3     B`Ch...CC`($.#..
   27298:	4c11601c 629c8824 05096843 430b4393     .`.L$..bCh...C.C
   272a8:	20006043 8810f380 4780480d 0040bd70     C`. .....H.Gp.@.
   272b8:	3b854580 00800001 44894580 346d0001     .E.;.....E.D..m4
   272c8:	60400001 3ba12000 4d990000 34cc0001     ..@`. .;...M...4
   272d8:	60700463 603a2000 604e2000 34ad2000     c.p`. :`. N`. .4
   272e8:	00000001                                ....

000272ec <am_hal_ble_num_default_patches>:
   272ec:	00000003                                ....

000272f0 <am_ble_buffer_patch_data_b0>:
   272f0:	04182200 000003ff 00077584 00077d73     .".......u..s}..
   27300:	00078575 00078b17 000795a9 00079b18     u...............
   27310:	0007a32d 0007acc5 0007b2f4 0007b9ff     -...............
	...
   27350:	f7ec2021 2800fcf9 2000d00a 46039000     ! .....(... ...F
   27360:	46014602 20216824 47a03435 bd38bf00     .F.F$h! 54.G..8.
   27370:	fefbf7ef 2800490f 7808d002 d0122801     .....I.(...x.(..
   27380:	28027808 2800d00f 2801d006 f000d004     .x.(...(...(....
   27390:	20006e0c 04000000 20006e1c 47084900     .n. .....n. .I.G
   273a0:	20003e01 7cca4e23 6ac96875 d01d2a00     .>. #N.|uh.j.*..
   273b0:	0212227d d3024291 20011a8a 1a52e000     }"...B..... ..R.
   273c0:	d0052800 43504620 fa02f7ea e0041a20     .(.. FPC.... ...
   273d0:	f9def7ea 02011900 186900c2 18891812     ..........i.....
   273e0:	02530a4a 60711ac9 4348211e bd701880     J.S...q`.!HC..p.
   273f0:	2000682c 20006e0c 47084900 20003e31     ,h. .n. .I.G1>. 
   27400:	6ac07cc1 d0152900 0209217d d3024288     .|.j.)..}!...B..
   27410:	2004d502 e0347060 f0066928 2800f8b5     ... `p4.(i.....(
   27420:	2002d002 e02c7060 f0049803 2804fa1f     ... `p,........(
   27430:	4668d107 20027901 d0054388 28002000     ..hF.y. .C... .(
   27440:	bf00d004 e01c2000 e7f82001 900088f0     ..... ... ......
   27450:	00000021 00000000 00000001 00000000     !...............
   27460:	ffffffff 000003ff 1f3c00ff 00000000     ..........<.....
   27470:	00002001 0000848d 00002002 00007dcd     . ....... ...}..
   27480:	00002003 00007ed1 00002005 000084fd     . ...~... ......
   27490:	30286928 8d013040 1a409800 b280492a     (i(0@0....@.*I..
   274a0:	bf00bf00 22054628 30631c71 fdacf7f3     ....(F."q.c0....
   274b0:	99006928 fbdff001 70602001 2003e001     (i....... `p... 
   274c0:	2f007060 7860d139 d2362806 44790001     `p./9.`x.(6...yD
   274d0:	bf00bf00 22568931 46315351 fe3ef001     ....1.V"QS1F..>.
   274e0:	70602001 2003e001 2f007060 7860d167     . `p... `p./g.`x
   274f0:	d2642806 44790001 18497909 185f448f     .(d...yD.yI..D_.
   27500:	1207020c 98052128 fc54f7ff 213de057     ....(!....T.W.=!
   27510:	20006878 20006dac 50800040 00002017     xh. .m. @..P. ..
   27520:	00000801 5080407e 200068d8 47084900     ....~@.P.h. .I.G
   27530:	20003e91 78c34311 021b7882 0412431a     .>. .C.x.x...C..
   27540:	4c1a430a 79426062 02127901 79c34311     .C.Lb`By.y...C.y
   27550:	d01b2e13 550e21a1 46692202 724e720a     .....!.U."iF.rNr
   27560:	4308210f 46019001 f7fe4638 4669f909     .!.C...F8F....iF
   27570:	b2e87a0a f7ffa902 3440ff55 8aa220ff     .z......U.@4. ..
   27580:	30034639 bf00bf00 bdf0b003 21a12216     9F.0.........".!
   27590:	00808820 30405838 07c07f00 2500d005      ...8X@0.......%
   275a0:	8820e02f fd22f008 4668e02b 20017a01     /. ...".+.hF.z. 
   275b0:	d0034388 28002000 e001d108 e7fa2001     .C... .(..... ..
   275c0:	43882004 2000d004 d0032800 e018253a     . .C... .(..:%..
   275d0:	6b114a08 4b086b52 d9014298 47702000     .J.kRk.K.B... pG
   275e0:	43424341 0c900989 49041808 d9f64288     ACBC.......I.B..
   275f0:	47702000 20007ec0 001e8480 03938700     . pG.~. ........
   27600:	4913b410 4a136b89 d9024290 2000bc10     ...I.k.J.B..... 
   27610:	4a114770 6813247d 02242214 42a34342     pG.J}$.h."$.BC.B
   27620:	4341d903 18100c08 4341e002 1a100c08     ..AC......AC....
   27630:	4288490a 2000d902 4770bc10 d0002800     .I.B... ..pG.(..
   27640:	42a31e40 2800d2f8 bc10d0f6 47701e40     @..B...(....@.pG
   27650:	20007ec0 000186a0 20006858 00030d40     .~. ....Xh. @...
   27660:	f3efb4f0 b2cc8110 f3812101 78428810     .........!....Bx
   27670:	02127801 78c34311 021b7882 0412431a     .x...C.x.x...C..
   27680:	4d1d430a 7942606a 02127901 79c34311     .C.Mj`By.y...C.y
   27690:	021b7982 0412431a 60aa430a 7a017a42     .y...C...C.`Bz.z
   276a0:	43110212 7a827ac3 431a021b 430a0412     ...C.z.z...C...C
   276b0:	7b4260ea 02127b01 7bc34311 021b7b82     .`B{.{...C.{.{..
   276c0:	0412431a 612a430a 23103010 21004a0b     .C...C*a.0.#.J.!
   276d0:	54565c46 b2891c49 d3f94299 6168206e     F\VTI....B..n ha
   276e0:	60282001 21014806 f3847401 bcf08810     . (`.H.!.t......
   276f0:	20104904 00004708 508000c0 5080406e     .I. .G.....Pn@.P
   27700:	200068d8 000159a1                       .h. .Y..

00027708 <am_hal_ble_num_default_patches_b0>:
   27708:	00000003                                ....

0002770c <am_hal_cachectrl_defaults>:
   2770c:	00000308                                ....

00027710 <g_AM_HAL_GPIO_DISABLE>:
   27710:	00000003                                ....

00027714 <g_AM_HAL_GPIO_INPUT>:
   27714:	00001003                                ....

00027718 <g_AM_HAL_GPIO_OUTPUT>:
   27718:	00000403                                ....

0002771c <g_ui8Bit76Capabilities>:
   2771c:	02800101 80010180 80800101 80808080     ................
   2772c:	80808080 80808008 01800180 80808080     ................
   2773c:	80808080 01800402 01010401 80808080     ................
   2774c:	00000101                                ....

00027750 <g_ui8Inpen>:
   27750:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
   27760:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
   27770:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
   27780:	00003130                                01..

00027784 <g_ui8NCEtable>:
   27784:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   27794:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   277a4:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   277b4:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   277c4:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   277d4:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   277e4:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   277f4:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   27804:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   27814:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   27824:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   27834:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   27844:	32221202 43231303                       .."2..#C

0002784c <g_ui8nCEpins>:
   2784c:	02070707 00080802 01020202 01010101     ................
   2785c:	01010101 01010101 01010101 01010101     ................
   2786c:	01010101 08010101 01010008 01010101     ................
   2787c:	00000101                                ....

00027880 <g_am_hal_mcuctrl_flash_size>:
   27880:	00004000 00008000 00010000 00020000     .@..............
   27890:	00040000 00080000 00100000 00200000     .............. .
   278a0:	00180000 00000000 00000000 00000000     ................
	...

000278c0 <g_am_hal_mcuctrl_sram_size>:
   278c0:	00004000 00008000 00010000 00020000     .@..............
   278d0:	00040000 00080000 00100000 00060000     ................
   278e0:	000c0000 00000000 00000000 00000000     ................
	...

00027900 <am_hal_pwrctrl_peripheral_control>:
	...
   2790c:	00000001 00000004 00000004 00000002     ................
   2791c:	00000008 00000008 00000004 00000008     ................
   2792c:	00000008 00000008 00000008 00000008     ................
   2793c:	00000010 00000010 00000010 00000020     ............ ...
   2794c:	00000010 00000010 00000040 00000010     ........@.......
   2795c:	00000010 00000080 00000004 00000004     ................
   2796c:	00000100 00000004 00000004 00000200     ................
   2797c:	00000020 00000020 00000400 00000004      ... ...........
   2798c:	00000004 00000800 00000040 00000040     ........@...@...
   2799c:	00001000 00000080 00000080 00002000     ............. ..
   279ac:	00000100 00000100                       ........

000279b4 <g_AM_BSP_GPIO_ITM_SWO>:
   279b4:	00000002                                ....
