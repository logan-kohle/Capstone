
bin/hello_world.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 dd d3 00 00 45 d4 00 00 49 c3 00 00     ........E...I...
    c010:	47 d4 00 00 47 d4 00 00 47 d4 00 00 00 00 00 00     G...G...G.......
	...
    c02c:	49 d4 00 00 49 d4 00 00 00 00 00 00 49 d4 00 00     I...I.......I...
    c03c:	49 d4 00 00 49 d4 00 00 49 d4 00 00 49 d4 00 00     I...I...I...I...
    c04c:	49 d4 00 00 49 d4 00 00 49 d4 00 00 49 d4 00 00     I...I...I...I...
    c05c:	49 d4 00 00 49 d4 00 00 49 d4 00 00 49 d4 00 00     I...I...I...I...
    c06c:	49 d4 00 00 49 d4 00 00 49 d4 00 00 49 d4 00 00     I...I...I...I...
    c07c:	49 d4 00 00 49 d4 00 00 49 d4 00 00 49 d4 00 00     I...I...I...I...
    c08c:	49 d4 00 00 49 d4 00 00 49 d4 00 00 49 d4 00 00     I...I...I...I...
    c09c:	49 d4 00 00 49 d4 00 00 49 d4 00 00 49 d4 00 00     I...I...I...I...
    c0ac:	49 d4 00 00 49 d4 00 00 49 d4 00 00 49 d4 00 00     I...I...I...I...
    c0bc:	49 d4 00 00                                         I...

0000c0c0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <main>:
// Main
//
//*****************************************************************************
int
main(void)
{
    c1a0:	b530      	push	{r4, r5, lr}
    c1a2:	b0a5      	sub	sp, #148	; 0x94
    am_util_id_t sIdDevice;
    uint32_t ui32StrBuf;
    //
    // Set the clock frequency.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c1a4:	2100      	movs	r1, #0
    c1a6:	2000      	movs	r0, #0
    c1a8:	f001 fb6e 	bl	d888 <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c1ac:	484f      	ldr	r0, [pc, #316]	; (c2ec <main+0x14c>)
    c1ae:	f001 f9c3 	bl	d538 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c1b2:	f001 f9e5 	bl	d580 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    c1b6:	f001 f949 	bl	d44c <am_bsp_low_power_init>

    //
    // Initialize the printf interface for ITM output
    //
    am_bsp_itm_printf_enable();
    c1ba:	f001 f99d 	bl	d4f8 <am_bsp_itm_printf_enable>

    //
    // Print the banner.
    //
    am_util_stdio_terminal_clear();
    c1be:	f001 f905 	bl	d3cc <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Hello World!\n\n");
    c1c2:	484b      	ldr	r0, [pc, #300]	; (c2f0 <main+0x150>)
    c1c4:	f001 f8e2 	bl	d38c <am_util_stdio_printf>

    //
    // Print the device info.
    //
    am_util_id_device(&sIdDevice);
    c1c8:	ab12      	add	r3, sp, #72	; 0x48
    c1ca:	4618      	mov	r0, r3
    c1cc:	f000 f972 	bl	c4b4 <am_util_id_device>
    am_util_stdio_printf("Vendor Name: %s\n", sIdDevice.pui8VendorName);
    c1d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
    c1d2:	4619      	mov	r1, r3
    c1d4:	4847      	ldr	r0, [pc, #284]	; (c2f4 <main+0x154>)
    c1d6:	f001 f8d9 	bl	d38c <am_util_stdio_printf>
    am_util_stdio_printf("Device type: %s\n", sIdDevice.pui8DeviceName);
    c1da:	9b21      	ldr	r3, [sp, #132]	; 0x84
    c1dc:	4619      	mov	r1, r3
    c1de:	4846      	ldr	r0, [pc, #280]	; (c2f8 <main+0x158>)
    c1e0:	f001 f8d4 	bl	d38c <am_util_stdio_printf>


    am_util_stdio_printf("Qualified: %s\n",
                         sIdDevice.sMcuCtrlDevice.ui32Qualified ?
    c1e4:	9b18      	ldr	r3, [sp, #96]	; 0x60
    am_util_stdio_printf("Qualified: %s\n",
    c1e6:	2b00      	cmp	r3, #0
    c1e8:	d001      	beq.n	c1ee <main+0x4e>
    c1ea:	4b44      	ldr	r3, [pc, #272]	; (c2fc <main+0x15c>)
    c1ec:	e000      	b.n	c1f0 <main+0x50>
    c1ee:	4b44      	ldr	r3, [pc, #272]	; (c300 <main+0x160>)
    c1f0:	4619      	mov	r1, r3
    c1f2:	4844      	ldr	r0, [pc, #272]	; (c304 <main+0x164>)
    c1f4:	f001 f8ca 	bl	d38c <am_util_stdio_printf>
                         "Yes" : "No");

    am_util_stdio_printf("Device Info:\n"
    c1f8:	9912      	ldr	r1, [sp, #72]	; 0x48
    c1fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    c1fc:	9814      	ldr	r0, [sp, #80]	; 0x50
    c1fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
                         "\tRevision:    0x%08X (Rev%c%c)\n",
                         sIdDevice.sMcuCtrlDevice.ui32ChipPN,
                         sIdDevice.sMcuCtrlDevice.ui32ChipID0,
                         sIdDevice.sMcuCtrlDevice.ui32ChipID1,
                         sIdDevice.sMcuCtrlDevice.ui32ChipRev,
                         sIdDevice.ui8ChipRevMaj, sIdDevice.ui8ChipRevMin );
    c200:	f89d 4088 	ldrb.w	r4, [sp, #136]	; 0x88
    c204:	f89d 5089 	ldrb.w	r5, [sp, #137]	; 0x89
    am_util_stdio_printf("Device Info:\n"
    c208:	9502      	str	r5, [sp, #8]
    c20a:	9401      	str	r4, [sp, #4]
    c20c:	9300      	str	r3, [sp, #0]
    c20e:	4603      	mov	r3, r0
    c210:	483d      	ldr	r0, [pc, #244]	; (c308 <main+0x168>)
    c212:	f001 f8bb 	bl	d38c <am_util_stdio_printf>

    //
    // If not a multiple of 1024 bytes, append a plus sign to the KB.
    //
    ui32StrBuf = ( sIdDevice.sMcuCtrlDevice.ui32FlashSize % 1024 ) ? '+' : 0;
    c216:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c218:	f3c3 0309 	ubfx	r3, r3, #0, #10
    c21c:	2b00      	cmp	r3, #0
    c21e:	d001      	beq.n	c224 <main+0x84>
    c220:	232b      	movs	r3, #43	; 0x2b
    c222:	e000      	b.n	c226 <main+0x86>
    c224:	2300      	movs	r3, #0
    c226:	9311      	str	r3, [sp, #68]	; 0x44
    am_util_stdio_printf("\tFlash size:  %7d (%d KB%s)\n",
    c228:	9919      	ldr	r1, [sp, #100]	; 0x64
                         sIdDevice.sMcuCtrlDevice.ui32FlashSize,
                         sIdDevice.sMcuCtrlDevice.ui32FlashSize / 1024,
    c22a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    am_util_stdio_printf("\tFlash size:  %7d (%d KB%s)\n",
    c22c:	0a9a      	lsrs	r2, r3, #10
    c22e:	ab11      	add	r3, sp, #68	; 0x44
    c230:	4836      	ldr	r0, [pc, #216]	; (c30c <main+0x16c>)
    c232:	f001 f8ab 	bl	d38c <am_util_stdio_printf>
                         &ui32StrBuf);

    ui32StrBuf = ( sIdDevice.sMcuCtrlDevice.ui32SRAMSize % 1024 ) ? '+' : 0;
    c236:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    c238:	f3c3 0309 	ubfx	r3, r3, #0, #10
    c23c:	2b00      	cmp	r3, #0
    c23e:	d001      	beq.n	c244 <main+0xa4>
    c240:	232b      	movs	r3, #43	; 0x2b
    c242:	e000      	b.n	c246 <main+0xa6>
    c244:	2300      	movs	r3, #0
    c246:	9311      	str	r3, [sp, #68]	; 0x44
    am_util_stdio_printf("\tSRAM size:   %7d (%d KB%s)\n\n",
    c248:	991a      	ldr	r1, [sp, #104]	; 0x68
                         sIdDevice.sMcuCtrlDevice.ui32SRAMSize,
                         sIdDevice.sMcuCtrlDevice.ui32SRAMSize / 1024,
    c24a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    am_util_stdio_printf("\tSRAM size:   %7d (%d KB%s)\n\n",
    c24c:	0a9a      	lsrs	r2, r3, #10
    c24e:	ab11      	add	r3, sp, #68	; 0x44
    c250:	482f      	ldr	r0, [pc, #188]	; (c310 <main+0x170>)
    c252:	f001 f89b 	bl	d38c <am_util_stdio_printf>
                         &ui32StrBuf);
    //
    // Print the compiler version.
    //
    am_util_stdio_printf("App Compiler:    %s\n", COMPILER_VERSION);
    c256:	492f      	ldr	r1, [pc, #188]	; (c314 <main+0x174>)
    c258:	482f      	ldr	r0, [pc, #188]	; (c318 <main+0x178>)
    c25a:	f001 f897 	bl	d38c <am_util_stdio_printf>
#if defined(AM_PART_APOLLO3)  || defined(AM_PART_APOLLO3P)
    am_util_stdio_printf("HAL Compiler:    %s\n", g_ui8HALcompiler);
    c25e:	492f      	ldr	r1, [pc, #188]	; (c31c <main+0x17c>)
    c260:	482f      	ldr	r0, [pc, #188]	; (c320 <main+0x180>)
    c262:	f001 f893 	bl	d38c <am_util_stdio_printf>
    am_util_stdio_printf("HAL SDK version: %d.%d.%d\n",
                         g_ui32HALversion.s.Major,
    c266:	4b2f      	ldr	r3, [pc, #188]	; (c324 <main+0x184>)
    c268:	78db      	ldrb	r3, [r3, #3]
    am_util_stdio_printf("HAL SDK version: %d.%d.%d\n",
    c26a:	4619      	mov	r1, r3
                         g_ui32HALversion.s.Minor,
    c26c:	4b2d      	ldr	r3, [pc, #180]	; (c324 <main+0x184>)
    c26e:	789b      	ldrb	r3, [r3, #2]
    am_util_stdio_printf("HAL SDK version: %d.%d.%d\n",
    c270:	461a      	mov	r2, r3
                         g_ui32HALversion.s.Revision);
    c272:	4b2c      	ldr	r3, [pc, #176]	; (c324 <main+0x184>)
    c274:	785b      	ldrb	r3, [r3, #1]
    am_util_stdio_printf("HAL SDK version: %d.%d.%d\n",
    c276:	482c      	ldr	r0, [pc, #176]	; (c328 <main+0x188>)
    c278:	f001 f888 	bl	d38c <am_util_stdio_printf>
    am_util_stdio_printf("HAL compiled with %s-style registers\n",
                         g_ui32HALversion.s.bAMREGS ? "AM_REG" : "CMSIS");
    c27c:	4b29      	ldr	r3, [pc, #164]	; (c324 <main+0x184>)
    c27e:	781b      	ldrb	r3, [r3, #0]
    c280:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    c284:	b2db      	uxtb	r3, r3
    am_util_stdio_printf("HAL compiled with %s-style registers\n",
    c286:	2b00      	cmp	r3, #0
    c288:	d001      	beq.n	c28e <main+0xee>
    c28a:	4b28      	ldr	r3, [pc, #160]	; (c32c <main+0x18c>)
    c28c:	e000      	b.n	c290 <main+0xf0>
    c28e:	4b28      	ldr	r3, [pc, #160]	; (c330 <main+0x190>)
    c290:	4619      	mov	r1, r3
    c292:	4828      	ldr	r0, [pc, #160]	; (c334 <main+0x194>)
    c294:	f001 f87a 	bl	d38c <am_util_stdio_printf>

    am_hal_security_info_t secInfo;
    char sINFO[32];
    uint32_t ui32Status;
    ui32Status = am_hal_security_get_info(&secInfo);
    c298:	ab0d      	add	r3, sp, #52	; 0x34
    c29a:	4618      	mov	r0, r3
    c29c:	f001 fff0 	bl	e280 <am_hal_security_get_info>
    c2a0:	9023      	str	r0, [sp, #140]	; 0x8c
    if (ui32Status == AM_HAL_STATUS_SUCCESS)
    c2a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    c2a4:	2b00      	cmp	r3, #0
    c2a6:	d116      	bne.n	c2d6 <main+0x136>
    {
        if ( secInfo.bInfo0Valid )
    c2a8:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    c2ac:	2b00      	cmp	r3, #0
    c2ae:	d006      	beq.n	c2be <main+0x11e>
        {
            am_util_stdio_sprintf(sINFO, "INFO0 valid, ver 0x%X", secInfo.info0Version);
    c2b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c2b2:	ab05      	add	r3, sp, #20
    c2b4:	4920      	ldr	r1, [pc, #128]	; (c338 <main+0x198>)
    c2b6:	4618      	mov	r0, r3
    c2b8:	f001 f854 	bl	d364 <am_util_stdio_sprintf>
    c2bc:	e004      	b.n	c2c8 <main+0x128>
        }
        else
        {
            am_util_stdio_sprintf(sINFO, "INFO0 invalid");
    c2be:	ab05      	add	r3, sp, #20
    c2c0:	491e      	ldr	r1, [pc, #120]	; (c33c <main+0x19c>)
    c2c2:	4618      	mov	r0, r3
    c2c4:	f001 f84e 	bl	d364 <am_util_stdio_sprintf>
        }

        am_util_stdio_printf("SBL ver: 0x%x - 0x%x, %s\n",
    c2c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
    c2ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c2cc:	ab05      	add	r3, sp, #20
    c2ce:	481c      	ldr	r0, [pc, #112]	; (c340 <main+0x1a0>)
    c2d0:	f001 f85c 	bl	d38c <am_util_stdio_printf>
    c2d4:	e003      	b.n	c2de <main+0x13e>
            secInfo.sblVersion, secInfo.sblVersionAddInfo, sINFO);
    }
    else
    {
        am_util_stdio_printf("am_hal_security_get_info failed 0x%X\n", ui32Status);
    c2d6:	9923      	ldr	r1, [sp, #140]	; 0x8c
    c2d8:	481a      	ldr	r0, [pc, #104]	; (c344 <main+0x1a4>)
    c2da:	f001 f857 	bl	d38c <am_util_stdio_printf>

    //
    // We are done printing.
    // Disable debug printf messages on ITM.
    //
    am_bsp_debug_printf_disable();
    c2de:	f001 f8d5 	bl	d48c <am_bsp_debug_printf_disable>
    while (1)
    {
        //
        // Go to Deep Sleep.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c2e2:	2001      	movs	r0, #1
    c2e4:	f002 f82e 	bl	e344 <am_hal_sysctrl_sleep>
    c2e8:	e7fb      	b.n	c2e2 <main+0x142>
    c2ea:	bf00      	nop
    c2ec:	0000e83c 	.word	0x0000e83c
    c2f0:	0000e5bc 	.word	0x0000e5bc
    c2f4:	0000e5cc 	.word	0x0000e5cc
    c2f8:	0000e5e0 	.word	0x0000e5e0
    c2fc:	0000e5f4 	.word	0x0000e5f4
    c300:	0000e5f8 	.word	0x0000e5f8
    c304:	0000e5fc 	.word	0x0000e5fc
    c308:	0000e60c 	.word	0x0000e60c
    c30c:	0000e678 	.word	0x0000e678
    c310:	0000e698 	.word	0x0000e698
    c314:	0000e6b8 	.word	0x0000e6b8
    c318:	0000e6d8 	.word	0x0000e6d8
    c31c:	0000e844 	.word	0x0000e844
    c320:	0000e6f0 	.word	0x0000e6f0
    c324:	0000e840 	.word	0x0000e840
    c328:	0000e708 	.word	0x0000e708
    c32c:	0000e724 	.word	0x0000e724
    c330:	0000e72c 	.word	0x0000e72c
    c334:	0000e734 	.word	0x0000e734
    c338:	0000e75c 	.word	0x0000e75c
    c33c:	0000e774 	.word	0x0000e774
    c340:	0000e784 	.word	0x0000e784
    c344:	0000e7a0 	.word	0x0000e7a0

0000c348 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    c348:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    c34a:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    c34e:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    c350:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    c354:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    c358:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c35c:	f000 f80a 	bl	c374 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    c360:	bd01      	pop	{r0, pc}
}
    c362:	bf00      	nop
    c364:	4618      	mov	r0, r3

0000c366 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c366:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c368:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c36a:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c36c:	4770      	bx	lr
}
    c36e:	bf00      	nop
    c370:	4618      	mov	r0, r3
	...

0000c374 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c374:	b500      	push	{lr}
    c376:	b097      	sub	sp, #92	; 0x5c
    c378:	9001      	str	r0, [sp, #4]
    volatile am_fault_t sFaultData;
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_t  sHalFaultData = {0};
#else
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c37a:	ab03      	add	r3, sp, #12
    c37c:	2200      	movs	r2, #0
    c37e:	601a      	str	r2, [r3, #0]
    c380:	605a      	str	r2, [r3, #4]
    c382:	609a      	str	r2, [r3, #8]
    c384:	60da      	str	r2, [r3, #12]
    c386:	611a      	str	r2, [r3, #16]
    c388:	615a      	str	r2, [r3, #20]
#endif // if defined(AM_PART_APOLLO4)

    uint32_t u32Mask = 0;
    c38a:	2300      	movs	r3, #0
    c38c:	9315      	str	r3, [sp, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c38e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c390:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c392:	4b2e      	ldr	r3, [pc, #184]	; (c44c <am_util_faultisr_collect_data+0xd8>)
    c394:	681b      	ldr	r3, [r3, #0]
    c396:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c398:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c39a:	b2db      	uxtb	r3, r3
    c39c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c3a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c3a2:	0a1b      	lsrs	r3, r3, #8
    c3a4:	b2db      	uxtb	r3, r3
    c3a6:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c3aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c3ac:	0c1b      	lsrs	r3, r3, #16
    c3ae:	b29b      	uxth	r3, r3
    c3b0:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c3b4:	4b26      	ldr	r3, [pc, #152]	; (c450 <am_util_faultisr_collect_data+0xdc>)
    c3b6:	681b      	ldr	r3, [r3, #0]
    c3b8:	9312      	str	r3, [sp, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c3ba:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
    c3be:	b2db      	uxtb	r3, r3
    c3c0:	f003 0302 	and.w	r3, r3, #2
    c3c4:	2b00      	cmp	r3, #0
    c3c6:	d005      	beq.n	c3d4 <am_util_faultisr_collect_data+0x60>
    c3c8:	9901      	ldr	r1, [sp, #4]
    c3ca:	2006      	movs	r0, #6
    c3cc:	f7ff ffcb 	bl	c366 <getStackedReg>
    c3d0:	4603      	mov	r3, r0
    c3d2:	e001      	b.n	c3d8 <am_util_faultisr_collect_data+0x64>
    c3d4:	f04f 33ff 	mov.w	r3, #4294967295
    c3d8:	9311      	str	r3, [sp, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c3da:	9901      	ldr	r1, [sp, #4]
    c3dc:	2000      	movs	r0, #0
    c3de:	f7ff ffc2 	bl	c366 <getStackedReg>
    c3e2:	4603      	mov	r3, r0
    c3e4:	9309      	str	r3, [sp, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c3e6:	9901      	ldr	r1, [sp, #4]
    c3e8:	2001      	movs	r0, #1
    c3ea:	f7ff ffbc 	bl	c366 <getStackedReg>
    c3ee:	4603      	mov	r3, r0
    c3f0:	930a      	str	r3, [sp, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c3f2:	9901      	ldr	r1, [sp, #4]
    c3f4:	2002      	movs	r0, #2
    c3f6:	f7ff ffb6 	bl	c366 <getStackedReg>
    c3fa:	4603      	mov	r3, r0
    c3fc:	930b      	str	r3, [sp, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c3fe:	9901      	ldr	r1, [sp, #4]
    c400:	2003      	movs	r0, #3
    c402:	f7ff ffb0 	bl	c366 <getStackedReg>
    c406:	4603      	mov	r3, r0
    c408:	930c      	str	r3, [sp, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c40a:	9901      	ldr	r1, [sp, #4]
    c40c:	2004      	movs	r0, #4
    c40e:	f7ff ffaa 	bl	c366 <getStackedReg>
    c412:	4603      	mov	r3, r0
    c414:	930d      	str	r3, [sp, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c416:	9901      	ldr	r1, [sp, #4]
    c418:	2005      	movs	r0, #5
    c41a:	f7ff ffa4 	bl	c366 <getStackedReg>
    c41e:	4603      	mov	r3, r0
    c420:	930e      	str	r3, [sp, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c422:	9901      	ldr	r1, [sp, #4]
    c424:	2006      	movs	r0, #6
    c426:	f7ff ff9e 	bl	c366 <getStackedReg>
    c42a:	4603      	mov	r3, r0
    c42c:	930f      	str	r3, [sp, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c42e:	9901      	ldr	r1, [sp, #4]
    c430:	2007      	movs	r0, #7
    c432:	f7ff ff98 	bl	c366 <getStackedReg>
    c436:	4603      	mov	r3, r0
    c438:	9310      	str	r3, [sp, #64]	; 0x40
    //
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_get(&sHalFaultData);
#else
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c43a:	ab03      	add	r3, sp, #12
    c43c:	4619      	mov	r1, r3
    c43e:	2002      	movs	r0, #2
    c440:	f001 fd44 	bl	decc <am_hal_mcuctrl_info_get>
      am_util_stdio_printf("   SYS Fault Address: 0x%08X\n", sHalFaultData.ui32SYS);
    }

#endif

    u32Mask = 0;
    c444:	2300      	movs	r3, #0
    c446:	9315      	str	r3, [sp, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    c448:	e7fe      	b.n	c448 <am_util_faultisr_collect_data+0xd4>
    c44a:	bf00      	nop
    c44c:	e000ed28 	.word	0xe000ed28
    c450:	e000ed38 	.word	0xe000ed38

0000c454 <revmaj_get>:
// Return the major version of the chip rev.
// Returns: 'A', 'B', 'C', ...
//*****************************************************************************
static uint32_t
revmaj_get(uint32_t ui32ChipRev)
{
    c454:	b084      	sub	sp, #16
    c456:	9001      	str	r0, [sp, #4]
    uint32_t ui32ret;

#ifdef _FLD2VAL
    ui32ret = _FLD2VAL(MCUCTRL_CHIPREV_REVMAJ, ui32ChipRev);
    c458:	9b01      	ldr	r3, [sp, #4]
    c45a:	091b      	lsrs	r3, r3, #4
    c45c:	f003 030f 	and.w	r3, r3, #15
    c460:	9303      	str	r3, [sp, #12]

    //
    // Major revision is 1=A, 2=B, 3=C, ...
    // Convert to the expected return value.
    //
    return ui32ret + 'A' - 1;
    c462:	9b03      	ldr	r3, [sp, #12]
    c464:	3340      	adds	r3, #64	; 0x40

} // revmaj_get()
    c466:	4618      	mov	r0, r3
    c468:	b004      	add	sp, #16
    c46a:	4770      	bx	lr

0000c46c <chiprev_set>:
// Update the ID structure with the appropriate ChipRev letter.
// ui32minrevbase should be 0 for Apollo or Apollo2, 1 for Apollo3.
//*****************************************************************************
static void
chiprev_set(am_util_id_t *psIDDevice, uint32_t ui32minrevbase)
{
    c46c:	b084      	sub	sp, #16
    c46e:	9001      	str	r0, [sp, #4]
    c470:	9100      	str	r1, [sp, #0]
    uint32_t ui32maj, ui32min;

    ui32maj = ((psIDDevice->sMcuCtrlDevice.ui32ChipRev & 0xF0) >> 4);
    c472:	9b01      	ldr	r3, [sp, #4]
    c474:	68db      	ldr	r3, [r3, #12]
    c476:	091b      	lsrs	r3, r3, #4
    c478:	f003 030f 	and.w	r3, r3, #15
    c47c:	9303      	str	r3, [sp, #12]
    psIDDevice->ui8ChipRevMaj  = (uint8_t)('A' - 1 + ui32maj);
    c47e:	9b03      	ldr	r3, [sp, #12]
    c480:	b2db      	uxtb	r3, r3
    c482:	3340      	adds	r3, #64	; 0x40
    c484:	b2da      	uxtb	r2, r3
    c486:	9b01      	ldr	r3, [sp, #4]
    c488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    //
    // For Apollo and Apollo2:  rev0=0, rev1=1, ... (0-based)
    // For Apollo3:             rev0=1, rev1=2, ... (1-based)
    //
    ui32min = ((psIDDevice->sMcuCtrlDevice.ui32ChipRev & 0x0F) >> 0);
    c48c:	9b01      	ldr	r3, [sp, #4]
    c48e:	68db      	ldr	r3, [r3, #12]
    c490:	f003 030f 	and.w	r3, r3, #15
    c494:	9302      	str	r3, [sp, #8]
    psIDDevice->ui8ChipRevMin = (uint8_t)('0' + ui32min - ui32minrevbase);
    c496:	9b02      	ldr	r3, [sp, #8]
    c498:	b2da      	uxtb	r2, r3
    c49a:	9b00      	ldr	r3, [sp, #0]
    c49c:	b2db      	uxtb	r3, r3
    c49e:	1ad3      	subs	r3, r2, r3
    c4a0:	b2db      	uxtb	r3, r3
    c4a2:	3330      	adds	r3, #48	; 0x30
    c4a4:	b2da      	uxtb	r2, r3
    c4a6:	9b01      	ldr	r3, [sp, #4]
    c4a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

} // chiprev_set()
    c4ac:	bf00      	nop
    c4ae:	b004      	add	sp, #16
    c4b0:	4770      	bx	lr
	...

0000c4b4 <am_util_id_device>:
//! device type.
//
//*****************************************************************************
uint32_t
am_util_id_device(am_util_id_t *psIDDevice)
{
    c4b4:	b500      	push	{lr}
    c4b6:	b085      	sub	sp, #20
    c4b8:	9001      	str	r0, [sp, #4]

    //
    // Go get all the device (hardware) info from the HAL
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_DEVICEID, &psIDDevice->sMcuCtrlDevice);
    c4ba:	9b01      	ldr	r3, [sp, #4]
    c4bc:	4619      	mov	r1, r3
    c4be:	2001      	movs	r0, #1
    c4c0:	f001 fd04 	bl	decc <am_hal_mcuctrl_info_get>
#endif // AM_APOLLO3_MCUCTRL

    //
    // Device identification
    //
    ui32PN = psIDDevice->sMcuCtrlDevice.ui32ChipPN  &
    c4c4:	9b01      	ldr	r3, [sp, #4]
    c4c6:	681b      	ldr	r3, [r3, #0]
    c4c8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
    c4cc:	9303      	str	r3, [sp, #12]
             AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_PN_M;
    ui32ChipRev = psIDDevice->sMcuCtrlDevice.ui32ChipRev;
    c4ce:	9b01      	ldr	r3, [sp, #4]
    c4d0:	68db      	ldr	r3, [r3, #12]
    c4d2:	9302      	str	r3, [sp, #8]

    if ( (psIDDevice->sMcuCtrlDevice.ui32JedecCID   == 0xB105100D)          &&
    c4d4:	9b01      	ldr	r3, [sp, #4]
    c4d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    c4d8:	4a54      	ldr	r2, [pc, #336]	; (c62c <am_util_id_device+0x178>)
    c4da:	4293      	cmp	r3, r2
    c4dc:	d10e      	bne.n	c4fc <am_util_id_device+0x48>
         (psIDDevice->sMcuCtrlDevice.ui32JedecJEPID == 0x0000009B)          &&
    c4de:	9b01      	ldr	r3, [sp, #4]
    c4e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    if ( (psIDDevice->sMcuCtrlDevice.ui32JedecCID   == 0xB105100D)          &&
    c4e2:	2b9b      	cmp	r3, #155	; 0x9b
    c4e4:	d10a      	bne.n	c4fc <am_util_id_device+0x48>
         ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0xF00) != 0xE00) )
    c4e6:	9b01      	ldr	r3, [sp, #4]
    c4e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c4ea:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
         (psIDDevice->sMcuCtrlDevice.ui32JedecJEPID == 0x0000009B)          &&
    c4ee:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
    c4f2:	d003      	beq.n	c4fc <am_util_id_device+0x48>
    {
        //
        // It's Ambiq Micro, set up the VENDORID.
        //
        psIDDevice->pui8VendorName = g_ui8VendorNameAmbq;
    c4f4:	9b01      	ldr	r3, [sp, #4]
    c4f6:	4a4e      	ldr	r2, [pc, #312]	; (c630 <am_util_id_device+0x17c>)
    c4f8:	639a      	str	r2, [r3, #56]	; 0x38
    c4fa:	e002      	b.n	c502 <am_util_id_device+0x4e>
    else
    {
        //
        // For now, set it as unknown vendor, but we may change it later.
        //
        psIDDevice->pui8VendorName = g_ui8VendorNameUnknown;
    c4fc:	9b01      	ldr	r3, [sp, #4]
    c4fe:	4a4d      	ldr	r2, [pc, #308]	; (c634 <am_util_id_device+0x180>)
    c500:	639a      	str	r2, [r3, #56]	; 0x38
    }

    if ( psIDDevice->sMcuCtrlDevice.ui32VendorID ==
    c502:	9b01      	ldr	r3, [sp, #4]
    c504:	691b      	ldr	r3, [r3, #16]
    c506:	4a4c      	ldr	r2, [pc, #304]	; (c638 <am_util_id_device+0x184>)
    c508:	4293      	cmp	r3, r2
    c50a:	d102      	bne.n	c512 <am_util_id_device+0x5e>
         (('A' << 24) | ('M' << 16) | ('B' << 8) | ('Q' << 0)) )
    {
        //
        // VENDORID is AMBQ, so set the string pointer.
        //
        psIDDevice->pui8VendorName = g_ui8VendorNameAmbq;
    c50c:	9b01      	ldr	r3, [sp, #4]
    c50e:	4a48      	ldr	r2, [pc, #288]	; (c630 <am_util_id_device+0x17c>)
    c510:	639a      	str	r2, [r3, #56]	; 0x38
    }

    if ( ( ui32PN == AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_APOLLO )             &&
    c512:	9b03      	ldr	r3, [sp, #12]
    c514:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    c518:	d113      	bne.n	c542 <am_util_id_device+0x8e>
         ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0x0F0) == 0x0E0) )
    c51a:	9b01      	ldr	r3, [sp, #4]
    c51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c51e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ( ( ui32PN == AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_APOLLO )             &&
    c522:	2be0      	cmp	r3, #224	; 0xe0
    c524:	d10d      	bne.n	c542 <am_util_id_device+0x8e>
    {
        psIDDevice->ui32Device = AM_UTIL_ID_APOLLO;
    c526:	9b01      	ldr	r3, [sp, #4]
    c528:	2201      	movs	r2, #1
    c52a:	635a      	str	r2, [r3, #52]	; 0x34
        psIDDevice->pui8DeviceName = g_DeviceNameApollo;
    c52c:	9b01      	ldr	r3, [sp, #4]
    c52e:	4a43      	ldr	r2, [pc, #268]	; (c63c <am_util_id_device+0x188>)
    c530:	63da      	str	r2, [r3, #60]	; 0x3c
        chiprev_set(psIDDevice, 0);
    c532:	2100      	movs	r1, #0
    c534:	9801      	ldr	r0, [sp, #4]
    c536:	f7ff ff99 	bl	c46c <chiprev_set>

        //
        // Force the vendor name for Apollo, which did not support VENDORID.
        //
        psIDDevice->pui8VendorName = g_ui8VendorNameAmbq;
    c53a:	9b01      	ldr	r3, [sp, #4]
    c53c:	4a3c      	ldr	r2, [pc, #240]	; (c630 <am_util_id_device+0x17c>)
    c53e:	639a      	str	r2, [r3, #56]	; 0x38
    c540:	e06e      	b.n	c620 <am_util_id_device+0x16c>
    }
    else if ( ( ui32PN == AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_APOLLO2 )       &&
    c542:	9b03      	ldr	r3, [sp, #12]
    c544:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
    c548:	d110      	bne.n	c56c <am_util_id_device+0xb8>
              ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0x0F0) == 0x0D0) )
    c54a:	9b01      	ldr	r3, [sp, #4]
    c54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c54e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    else if ( ( ui32PN == AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_APOLLO2 )       &&
    c552:	2bd0      	cmp	r3, #208	; 0xd0
    c554:	d10a      	bne.n	c56c <am_util_id_device+0xb8>
    {
        psIDDevice->ui32Device = AM_UTIL_ID_APOLLO2;
    c556:	9b01      	ldr	r3, [sp, #4]
    c558:	2202      	movs	r2, #2
    c55a:	635a      	str	r2, [r3, #52]	; 0x34
        psIDDevice->pui8DeviceName = g_DeviceNameApollo2;
    c55c:	9b01      	ldr	r3, [sp, #4]
    c55e:	4a38      	ldr	r2, [pc, #224]	; (c640 <am_util_id_device+0x18c>)
    c560:	63da      	str	r2, [r3, #60]	; 0x3c
        chiprev_set(psIDDevice, 0);
    c562:	2100      	movs	r1, #0
    c564:	9801      	ldr	r0, [sp, #4]
    c566:	f7ff ff81 	bl	c46c <chiprev_set>
    c56a:	e059      	b.n	c620 <am_util_id_device+0x16c>
    }
    else if ( ( ui32PN == AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_APOLLO3 )       &&
    c56c:	9b03      	ldr	r3, [sp, #12]
    c56e:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    c572:	d116      	bne.n	c5a2 <am_util_id_device+0xee>
              ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0x0F0) == 0x0C0)   &&
    c574:	9b01      	ldr	r3, [sp, #4]
    c576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c578:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    else if ( ( ui32PN == AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_APOLLO3 )       &&
    c57c:	2bc0      	cmp	r3, #192	; 0xc0
    c57e:	d110      	bne.n	c5a2 <am_util_id_device+0xee>
              ( revmaj_get(ui32ChipRev) <= 'B' ) )
    c580:	9802      	ldr	r0, [sp, #8]
    c582:	f7ff ff67 	bl	c454 <revmaj_get>
    c586:	4603      	mov	r3, r0
              ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0x0F0) == 0x0C0)   &&
    c588:	2b42      	cmp	r3, #66	; 0x42
    c58a:	d80a      	bhi.n	c5a2 <am_util_id_device+0xee>
    {
        psIDDevice->ui32Device = AM_UTIL_ID_APOLLO3;
    c58c:	9b01      	ldr	r3, [sp, #4]
    c58e:	2203      	movs	r2, #3
    c590:	635a      	str	r2, [r3, #52]	; 0x34
        psIDDevice->pui8DeviceName = g_DeviceNameApollo3;
    c592:	9b01      	ldr	r3, [sp, #4]
    c594:	4a2b      	ldr	r2, [pc, #172]	; (c644 <am_util_id_device+0x190>)
    c596:	63da      	str	r2, [r3, #60]	; 0x3c
        chiprev_set(psIDDevice, 1);
    c598:	2101      	movs	r1, #1
    c59a:	9801      	ldr	r0, [sp, #4]
    c59c:	f7ff ff66 	bl	c46c <chiprev_set>
    c5a0:	e03e      	b.n	c620 <am_util_id_device+0x16c>
    }
    else if ( ( ui32PN == AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_APOLLO3P)       &&
    c5a2:	9b03      	ldr	r3, [sp, #12]
    c5a4:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
    c5a8:	d117      	bne.n	c5da <am_util_id_device+0x126>
              ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0x0F0) == 0x0C0)   &&
    c5aa:	9b01      	ldr	r3, [sp, #4]
    c5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c5ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    else if ( ( ui32PN == AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_APOLLO3P)       &&
    c5b2:	2bc0      	cmp	r3, #192	; 0xc0
    c5b4:	d111      	bne.n	c5da <am_util_id_device+0x126>
              ( revmaj_get(ui32ChipRev) == 'C' ) )
    c5b6:	9802      	ldr	r0, [sp, #8]
    c5b8:	f7ff ff4c 	bl	c454 <revmaj_get>
    c5bc:	4603      	mov	r3, r0
              ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0x0F0) == 0x0C0)   &&
    c5be:	2b43      	cmp	r3, #67	; 0x43
    c5c0:	d10b      	bne.n	c5da <am_util_id_device+0x126>
    {
        psIDDevice->ui32Device = AM_UTIL_ID_APOLLO3P;
    c5c2:	9b01      	ldr	r3, [sp, #4]
    c5c4:	f240 1203 	movw	r2, #259	; 0x103
    c5c8:	635a      	str	r2, [r3, #52]	; 0x34
        psIDDevice->pui8DeviceName = g_DeviceNameApollo3p;
    c5ca:	9b01      	ldr	r3, [sp, #4]
    c5cc:	4a1e      	ldr	r2, [pc, #120]	; (c648 <am_util_id_device+0x194>)
    c5ce:	63da      	str	r2, [r3, #60]	; 0x3c
        chiprev_set(psIDDevice, 1);
    c5d0:	2101      	movs	r1, #1
    c5d2:	9801      	ldr	r0, [sp, #4]
    c5d4:	f7ff ff4a 	bl	c46c <chiprev_set>
    c5d8:	e022      	b.n	c620 <am_util_id_device+0x16c>
    }
    else if ( ( ui32PN == AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_APOLLO4)        &&
    c5da:	9b03      	ldr	r3, [sp, #12]
    c5dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
    c5e0:	d110      	bne.n	c604 <am_util_id_device+0x150>
              ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0x0F0) == 0x0B0) )
    c5e2:	9b01      	ldr	r3, [sp, #4]
    c5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c5e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    else if ( ( ui32PN == AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_APOLLO4)        &&
    c5ea:	2bb0      	cmp	r3, #176	; 0xb0
    c5ec:	d10a      	bne.n	c604 <am_util_id_device+0x150>
    {
        psIDDevice->ui32Device = AM_UTIL_ID_APOLLO4;
    c5ee:	9b01      	ldr	r3, [sp, #4]
    c5f0:	2204      	movs	r2, #4
    c5f2:	635a      	str	r2, [r3, #52]	; 0x34
        psIDDevice->pui8DeviceName = g_DeviceNameApollo4;
    c5f4:	9b01      	ldr	r3, [sp, #4]
    c5f6:	4a15      	ldr	r2, [pc, #84]	; (c64c <am_util_id_device+0x198>)
    c5f8:	63da      	str	r2, [r3, #60]	; 0x3c
        chiprev_set(psIDDevice, 1);
    c5fa:	2101      	movs	r1, #1
    c5fc:	9801      	ldr	r0, [sp, #4]
    c5fe:	f7ff ff35 	bl	c46c <chiprev_set>
    c602:	e00d      	b.n	c620 <am_util_id_device+0x16c>
    }
    else
    {
        psIDDevice->ui32Device = AM_UTIL_ID_UNKNOWN;
    c604:	9b01      	ldr	r3, [sp, #4]
    c606:	2200      	movs	r2, #0
    c608:	635a      	str	r2, [r3, #52]	; 0x34
        psIDDevice->pui8DeviceName = g_ui8DeviceNameUnknown;
    c60a:	9b01      	ldr	r3, [sp, #4]
    c60c:	4a10      	ldr	r2, [pc, #64]	; (c650 <am_util_id_device+0x19c>)
    c60e:	63da      	str	r2, [r3, #60]	; 0x3c
        psIDDevice->ui8ChipRevMaj = (uint8_t)'?';
    c610:	9b01      	ldr	r3, [sp, #4]
    c612:	223f      	movs	r2, #63	; 0x3f
    c614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        psIDDevice->ui8ChipRevMin = (uint8_t)' ';
    c618:	9b01      	ldr	r3, [sp, #4]
    c61a:	2220      	movs	r2, #32
    c61c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }

    return psIDDevice->ui32Device;
    c620:	9b01      	ldr	r3, [sp, #4]
    c622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
    c624:	4618      	mov	r0, r3
    c626:	b005      	add	sp, #20
    c628:	f85d fb04 	ldr.w	pc, [sp], #4
    c62c:	b105100d 	.word	0xb105100d
    c630:	0000e818 	.word	0x0000e818
    c634:	0000e820 	.word	0x0000e820
    c638:	414d4251 	.word	0x414d4251
    c63c:	0000e7dc 	.word	0x0000e7dc
    c640:	0000e7e4 	.word	0x0000e7e4
    c644:	0000e7ec 	.word	0x0000e7ec
    c648:	0000e7fc 	.word	0x0000e7fc
    c64c:	0000e810 	.word	0x0000e810
    c650:	0000e828 	.word	0x0000e828

0000c654 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    c654:	b082      	sub	sp, #8
    c656:	9001      	str	r0, [sp, #4]
    g_pfnCharPrint = pfnCharPrint;
    c658:	4a02      	ldr	r2, [pc, #8]	; (c664 <am_util_stdio_printf_init+0x10>)
    c65a:	9b01      	ldr	r3, [sp, #4]
    c65c:	6013      	str	r3, [r2, #0]
}
    c65e:	bf00      	nop
    c660:	b002      	add	sp, #8
    c662:	4770      	bx	lr
    c664:	10001038 	.word	0x10001038

0000c668 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c668:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c66c:	b098      	sub	sp, #96	; 0x60
    c66e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c672:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c676:	f04f 0000 	mov.w	r0, #0
    c67a:	f04f 0100 	mov.w	r1, #0
    c67e:	0018      	movs	r0, r3
    c680:	2100      	movs	r1, #0
    c682:	ea50 0301 	orrs.w	r3, r0, r1
    c686:	f000 80b0 	beq.w	c7ea <divu64_10+0x182>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c68a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c68e:	f04f 0400 	mov.w	r4, #0
    c692:	f04f 0500 	mov.w	r5, #0
    c696:	0854      	lsrs	r4, r2, #1
    c698:	ea44 74c3 	orr.w	r4, r4, r3, lsl #31
    c69c:	085d      	lsrs	r5, r3, #1
    c69e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c6a2:	f04f 0000 	mov.w	r0, #0
    c6a6:	f04f 0100 	mov.w	r1, #0
    c6aa:	0890      	lsrs	r0, r2, #2
    c6ac:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
    c6b0:	0899      	lsrs	r1, r3, #2
    c6b2:	eb14 0a00 	adds.w	sl, r4, r0
    c6b6:	eb45 0b01 	adc.w	fp, r5, r1
    c6ba:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
        q64 += (q64 >> 4);
    c6be:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c6c2:	f04f 0000 	mov.w	r0, #0
    c6c6:	f04f 0100 	mov.w	r1, #0
    c6ca:	0910      	lsrs	r0, r2, #4
    c6cc:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
    c6d0:	0919      	lsrs	r1, r3, #4
    c6d2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c6d6:	1814      	adds	r4, r2, r0
    c6d8:	9402      	str	r4, [sp, #8]
    c6da:	414b      	adcs	r3, r1
    c6dc:	9303      	str	r3, [sp, #12]
    c6de:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    c6e2:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 8);
    c6e6:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c6ea:	f04f 0000 	mov.w	r0, #0
    c6ee:	f04f 0100 	mov.w	r1, #0
    c6f2:	0a10      	lsrs	r0, r2, #8
    c6f4:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
    c6f8:	0a19      	lsrs	r1, r3, #8
    c6fa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c6fe:	1814      	adds	r4, r2, r0
    c700:	9404      	str	r4, [sp, #16]
    c702:	414b      	adcs	r3, r1
    c704:	9305      	str	r3, [sp, #20]
    c706:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    c70a:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 16);
    c70e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c712:	f04f 0000 	mov.w	r0, #0
    c716:	f04f 0100 	mov.w	r1, #0
    c71a:	0c10      	lsrs	r0, r2, #16
    c71c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    c720:	0c19      	lsrs	r1, r3, #16
    c722:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c726:	1814      	adds	r4, r2, r0
    c728:	9406      	str	r4, [sp, #24]
    c72a:	414b      	adcs	r3, r1
    c72c:	9307      	str	r3, [sp, #28]
    c72e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
    c732:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 32);
    c736:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c73a:	f04f 0000 	mov.w	r0, #0
    c73e:	f04f 0100 	mov.w	r1, #0
    c742:	0018      	movs	r0, r3
    c744:	2100      	movs	r1, #0
    c746:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c74a:	1814      	adds	r4, r2, r0
    c74c:	9408      	str	r4, [sp, #32]
    c74e:	414b      	adcs	r3, r1
    c750:	9309      	str	r3, [sp, #36]	; 0x24
    c752:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
    c756:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 >>= 3;
    c75a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    c75e:	f04f 0200 	mov.w	r2, #0
    c762:	f04f 0300 	mov.w	r3, #0
    c766:	08c2      	lsrs	r2, r0, #3
    c768:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    c76c:	08cb      	lsrs	r3, r1, #3
    c76e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
        r64 = ui64Val - q64*10;
    c772:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
    c776:	4622      	mov	r2, r4
    c778:	462b      	mov	r3, r5
    c77a:	f04f 0000 	mov.w	r0, #0
    c77e:	f04f 0100 	mov.w	r1, #0
    c782:	0099      	lsls	r1, r3, #2
    c784:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
    c788:	0090      	lsls	r0, r2, #2
    c78a:	4602      	mov	r2, r0
    c78c:	460b      	mov	r3, r1
    c78e:	1916      	adds	r6, r2, r4
    c790:	eb43 0705 	adc.w	r7, r3, r5
    c794:	19b3      	adds	r3, r6, r6
    c796:	930a      	str	r3, [sp, #40]	; 0x28
    c798:	eb47 0307 	adc.w	r3, r7, r7
    c79c:	930b      	str	r3, [sp, #44]	; 0x2c
    c79e:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    c7a2:	4630      	mov	r0, r6
    c7a4:	4639      	mov	r1, r7
    c7a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c7aa:	1a14      	subs	r4, r2, r0
    c7ac:	940c      	str	r4, [sp, #48]	; 0x30
    c7ae:	eb63 0301 	sbc.w	r3, r3, r1
    c7b2:	930d      	str	r3, [sp, #52]	; 0x34
    c7b4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    c7b8:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
        return q64 + ((r64 + 6) >> 4);
    c7bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    c7c0:	f112 0806 	adds.w	r8, r2, #6
    c7c4:	f143 0900 	adc.w	r9, r3, #0
    c7c8:	f04f 0200 	mov.w	r2, #0
    c7cc:	f04f 0300 	mov.w	r3, #0
    c7d0:	ea4f 1218 	mov.w	r2, r8, lsr #4
    c7d4:	ea42 7209 	orr.w	r2, r2, r9, lsl #28
    c7d8:	ea4f 1319 	mov.w	r3, r9, lsr #4
    c7dc:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    c7e0:	1814      	adds	r4, r2, r0
    c7e2:	9400      	str	r4, [sp, #0]
    c7e4:	414b      	adcs	r3, r1
    c7e6:	9301      	str	r3, [sp, #4]
    c7e8:	e02a      	b.n	c840 <divu64_10+0x1d8>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    c7ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c7ec:	9317      	str	r3, [sp, #92]	; 0x5c
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c7ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c7f0:	085a      	lsrs	r2, r3, #1
    c7f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c7f4:	089b      	lsrs	r3, r3, #2
    c7f6:	4413      	add	r3, r2
    c7f8:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 4);
    c7fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c7fc:	091b      	lsrs	r3, r3, #4
    c7fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c800:	4413      	add	r3, r2
    c802:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 8);
    c804:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c806:	0a1b      	lsrs	r3, r3, #8
    c808:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c80a:	4413      	add	r3, r2
    c80c:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 16);
    c80e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c810:	0c1b      	lsrs	r3, r3, #16
    c812:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c814:	4413      	add	r3, r2
    c816:	9316      	str	r3, [sp, #88]	; 0x58
        q32 >>= 3;
    c818:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c81a:	08db      	lsrs	r3, r3, #3
    c81c:	9316      	str	r3, [sp, #88]	; 0x58
        r32 = ui32Val - q32*10;
    c81e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c820:	4613      	mov	r3, r2
    c822:	009b      	lsls	r3, r3, #2
    c824:	4413      	add	r3, r2
    c826:	005b      	lsls	r3, r3, #1
    c828:	461a      	mov	r2, r3
    c82a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c82c:	1a9b      	subs	r3, r3, r2
    c82e:	9315      	str	r3, [sp, #84]	; 0x54
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c830:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c832:	3306      	adds	r3, #6
    c834:	091a      	lsrs	r2, r3, #4
    c836:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c838:	4413      	add	r3, r2
    c83a:	2200      	movs	r2, #0
    c83c:	9300      	str	r3, [sp, #0]
    c83e:	9201      	str	r2, [sp, #4]
    }
}
    c840:	e9dd 2300 	ldrd	r2, r3, [sp]
    c844:	4610      	mov	r0, r2
    c846:	4619      	mov	r1, r3
    c848:	b018      	add	sp, #96	; 0x60
    c84a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c84e:	4770      	bx	lr

0000c850 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    c850:	b500      	push	{lr}
    c852:	b085      	sub	sp, #20
    c854:	e9cd 0100 	strd	r0, r1, [sp]
    int iNDigits = ui64Val ? 0 : 1;
    c858:	9a00      	ldr	r2, [sp, #0]
    c85a:	9b01      	ldr	r3, [sp, #4]
    c85c:	4313      	orrs	r3, r2
    c85e:	2b00      	cmp	r3, #0
    c860:	bf0c      	ite	eq
    c862:	2301      	moveq	r3, #1
    c864:	2300      	movne	r3, #0
    c866:	b2db      	uxtb	r3, r3
    c868:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    c86a:	e008      	b.n	c87e <ndigits_in_u64+0x2e>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    c86c:	e9dd 0100 	ldrd	r0, r1, [sp]
    c870:	f7ff fefa 	bl	c668 <divu64_10>
    c874:	e9cd 0100 	strd	r0, r1, [sp]
        ++iNDigits;
    c878:	9b03      	ldr	r3, [sp, #12]
    c87a:	3301      	adds	r3, #1
    c87c:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    c87e:	e9dd 2300 	ldrd	r2, r3, [sp]
    c882:	4313      	orrs	r3, r2
    c884:	d1f2      	bne.n	c86c <ndigits_in_u64+0x1c>
    }

    return iNDigits;
    c886:	9b03      	ldr	r3, [sp, #12]
}
    c888:	4618      	mov	r0, r3
    c88a:	b005      	add	sp, #20
    c88c:	f85d fb04 	ldr.w	pc, [sp], #4

0000c890 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    c890:	b530      	push	{r4, r5, lr}
    c892:	b083      	sub	sp, #12
    c894:	e9cd 0100 	strd	r0, r1, [sp]
    if ( i64Val < 0 )
    c898:	e9dd 2300 	ldrd	r2, r3, [sp]
    c89c:	2b00      	cmp	r3, #0
    c89e:	da07      	bge.n	c8b0 <ndigits_in_i64+0x20>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    c8a0:	e9dd 2300 	ldrd	r2, r3, [sp]
    c8a4:	2100      	movs	r1, #0
    c8a6:	4254      	negs	r4, r2
    c8a8:	eb61 0503 	sbc.w	r5, r1, r3
    c8ac:	e9cd 4500 	strd	r4, r5, [sp]
    }

    return ndigits_in_u64((uint64_t) i64Val);
    c8b0:	e9dd 2300 	ldrd	r2, r3, [sp]
    c8b4:	4610      	mov	r0, r2
    c8b6:	4619      	mov	r1, r3
    c8b8:	f7ff ffca 	bl	c850 <ndigits_in_u64>
    c8bc:	4603      	mov	r3, r0
}
    c8be:	4618      	mov	r0, r3
    c8c0:	b003      	add	sp, #12
    c8c2:	bd30      	pop	{r4, r5, pc}

0000c8c4 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    c8c4:	b084      	sub	sp, #16
    c8c6:	e9cd 0100 	strd	r0, r1, [sp]
    int iDigits = ui64Val ? 0 : 1;
    c8ca:	9a00      	ldr	r2, [sp, #0]
    c8cc:	9b01      	ldr	r3, [sp, #4]
    c8ce:	4313      	orrs	r3, r2
    c8d0:	2b00      	cmp	r3, #0
    c8d2:	bf0c      	ite	eq
    c8d4:	2301      	moveq	r3, #1
    c8d6:	2300      	movne	r3, #0
    c8d8:	b2db      	uxtb	r3, r3
    c8da:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    c8dc:	e00e      	b.n	c8fc <ndigits_in_hex+0x38>
    {
        ui64Val >>= 4;
    c8de:	e9dd 0100 	ldrd	r0, r1, [sp]
    c8e2:	f04f 0200 	mov.w	r2, #0
    c8e6:	f04f 0300 	mov.w	r3, #0
    c8ea:	0902      	lsrs	r2, r0, #4
    c8ec:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    c8f0:	090b      	lsrs	r3, r1, #4
    c8f2:	e9cd 2300 	strd	r2, r3, [sp]
        ++iDigits;
    c8f6:	9b03      	ldr	r3, [sp, #12]
    c8f8:	3301      	adds	r3, #1
    c8fa:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    c8fc:	e9dd 2300 	ldrd	r2, r3, [sp]
    c900:	4313      	orrs	r3, r2
    c902:	d1ec      	bne.n	c8de <ndigits_in_hex+0x1a>
    }

    return iDigits;
    c904:	9b03      	ldr	r3, [sp, #12]
}
    c906:	4618      	mov	r0, r3
    c908:	b004      	add	sp, #16
    c90a:	4770      	bx	lr

0000c90c <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    c90c:	b086      	sub	sp, #24
    c90e:	9001      	str	r0, [sp, #4]
    c910:	9100      	str	r1, [sp, #0]
    bool bNeg = false;
    c912:	2300      	movs	r3, #0
    c914:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    c918:	2300      	movs	r3, #0
    c91a:	9304      	str	r3, [sp, #16]
    c91c:	2300      	movs	r3, #0
    c91e:	9303      	str	r3, [sp, #12]

    if ( *pcStr == '-')
    c920:	9b01      	ldr	r3, [sp, #4]
    c922:	781b      	ldrb	r3, [r3, #0]
    c924:	2b2d      	cmp	r3, #45	; 0x2d
    c926:	d11c      	bne.n	c962 <decstr_to_int+0x56>
    {
        bNeg = true;
    c928:	2301      	movs	r3, #1
    c92a:	f88d 3017 	strb.w	r3, [sp, #23]
        pcStr++;
    c92e:	9b01      	ldr	r3, [sp, #4]
    c930:	3301      	adds	r3, #1
    c932:	9301      	str	r3, [sp, #4]
        uCnt++;
    c934:	9b03      	ldr	r3, [sp, #12]
    c936:	3301      	adds	r3, #1
    c938:	9303      	str	r3, [sp, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c93a:	e012      	b.n	c962 <decstr_to_int+0x56>
    {
        ++uCnt;
    c93c:	9b03      	ldr	r3, [sp, #12]
    c93e:	3301      	adds	r3, #1
    c940:	9303      	str	r3, [sp, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    c942:	9a04      	ldr	r2, [sp, #16]
    c944:	4613      	mov	r3, r2
    c946:	009b      	lsls	r3, r3, #2
    c948:	4413      	add	r3, r2
    c94a:	005b      	lsls	r3, r3, #1
    c94c:	9304      	str	r3, [sp, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    c94e:	9b01      	ldr	r3, [sp, #4]
    c950:	781b      	ldrb	r3, [r3, #0]
    c952:	461a      	mov	r2, r3
    c954:	9b04      	ldr	r3, [sp, #16]
    c956:	4413      	add	r3, r2
    c958:	3b30      	subs	r3, #48	; 0x30
    c95a:	9304      	str	r3, [sp, #16]
        pcStr++;
    c95c:	9b01      	ldr	r3, [sp, #4]
    c95e:	3301      	adds	r3, #1
    c960:	9301      	str	r3, [sp, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c962:	9b01      	ldr	r3, [sp, #4]
    c964:	781b      	ldrb	r3, [r3, #0]
    c966:	2b2f      	cmp	r3, #47	; 0x2f
    c968:	d903      	bls.n	c972 <decstr_to_int+0x66>
    c96a:	9b01      	ldr	r3, [sp, #4]
    c96c:	781b      	ldrb	r3, [r3, #0]
    c96e:	2b39      	cmp	r3, #57	; 0x39
    c970:	d9e4      	bls.n	c93c <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    c972:	9b00      	ldr	r3, [sp, #0]
    c974:	2b00      	cmp	r3, #0
    c976:	d002      	beq.n	c97e <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    c978:	9b00      	ldr	r3, [sp, #0]
    c97a:	9a03      	ldr	r2, [sp, #12]
    c97c:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    c97e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c982:	2b00      	cmp	r3, #0
    c984:	d002      	beq.n	c98c <decstr_to_int+0x80>
    c986:	9b04      	ldr	r3, [sp, #16]
    c988:	425b      	negs	r3, r3
    c98a:	e000      	b.n	c98e <decstr_to_int+0x82>
    c98c:	9b04      	ldr	r3, [sp, #16]
}
    c98e:	4618      	mov	r0, r3
    c990:	b006      	add	sp, #24
    c992:	4770      	bx	lr

0000c994 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c994:	b500      	push	{lr}
    c996:	b091      	sub	sp, #68	; 0x44
    c998:	e9cd 0102 	strd	r0, r1, [sp, #8]
    c99c:	9201      	str	r2, [sp, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    c99e:	2300      	movs	r3, #0
    c9a0:	930f      	str	r3, [sp, #60]	; 0x3c
    c9a2:	2300      	movs	r3, #0
    c9a4:	930e      	str	r3, [sp, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    c9a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c9aa:	f7ff fe5d 	bl	c668 <divu64_10>
    c9ae:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    c9b2:	9902      	ldr	r1, [sp, #8]
    c9b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c9b6:	4613      	mov	r3, r2
    c9b8:	009b      	lsls	r3, r3, #2
    c9ba:	4413      	add	r3, r2
    c9bc:	005b      	lsls	r3, r3, #1
    c9be:	1acb      	subs	r3, r1, r3
    c9c0:	930b      	str	r3, [sp, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    c9c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c9c4:	b2da      	uxtb	r2, r3
    c9c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c9c8:	1c59      	adds	r1, r3, #1
    c9ca:	910f      	str	r1, [sp, #60]	; 0x3c
    c9cc:	3230      	adds	r2, #48	; 0x30
    c9ce:	b2d2      	uxtb	r2, r2
    c9d0:	3340      	adds	r3, #64	; 0x40
    c9d2:	446b      	add	r3, sp
    c9d4:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    c9d8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    c9dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
    } while ( ui64Val );
    c9e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c9e4:	4313      	orrs	r3, r2
    c9e6:	d1de      	bne.n	c9a6 <uint64_to_str+0x12>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    c9e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c9ea:	930e      	str	r3, [sp, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c9ec:	9b01      	ldr	r3, [sp, #4]
    c9ee:	2b00      	cmp	r3, #0
    c9f0:	d010      	beq.n	ca14 <uint64_to_str+0x80>
    {
        while ( ix-- )
    c9f2:	e007      	b.n	ca04 <uint64_to_str+0x70>
        {
            *pcBuf++ = tbuf[ix];
    c9f4:	9b01      	ldr	r3, [sp, #4]
    c9f6:	1c5a      	adds	r2, r3, #1
    c9f8:	9201      	str	r2, [sp, #4]
    c9fa:	a904      	add	r1, sp, #16
    c9fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    c9fe:	440a      	add	r2, r1
    ca00:	7812      	ldrb	r2, [r2, #0]
    ca02:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    ca04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ca06:	1e5a      	subs	r2, r3, #1
    ca08:	920f      	str	r2, [sp, #60]	; 0x3c
    ca0a:	2b00      	cmp	r3, #0
    ca0c:	d1f2      	bne.n	c9f4 <uint64_to_str+0x60>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    ca0e:	9b01      	ldr	r3, [sp, #4]
    ca10:	2200      	movs	r2, #0
    ca12:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    ca14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
}
    ca16:	4618      	mov	r0, r3
    ca18:	b011      	add	sp, #68	; 0x44
    ca1a:	f85d fb04 	ldr.w	pc, [sp], #4

0000ca1e <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    ca1e:	b08c      	sub	sp, #48	; 0x30
    ca20:	e9cd 0102 	strd	r0, r1, [sp, #8]
    ca24:	9201      	str	r2, [sp, #4]
    ca26:	f88d 3003 	strb.w	r3, [sp, #3]
    int iNumDig, ix = 0;
    ca2a:	2300      	movs	r3, #0
    ca2c:	930b      	str	r3, [sp, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    ca2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ca32:	4313      	orrs	r3, r2
    ca34:	d135      	bne.n	caa2 <uint64_to_hexstr+0x84>
    {
        tbuf[ix++] = '0';   // Print a '0'
    ca36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca38:	1c5a      	adds	r2, r3, #1
    ca3a:	920b      	str	r2, [sp, #44]	; 0x2c
    ca3c:	3330      	adds	r3, #48	; 0x30
    ca3e:	446b      	add	r3, sp
    ca40:	2230      	movs	r2, #48	; 0x30
    ca42:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    ca46:	e02c      	b.n	caa2 <uint64_to_hexstr+0x84>
    {
        cCh = ui64Val & 0xf;
    ca48:	f89d 3008 	ldrb.w	r3, [sp, #8]
    ca4c:	f003 030f 	and.w	r3, r3, #15
    ca50:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    ca54:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    ca58:	2b09      	cmp	r3, #9
    ca5a:	d90b      	bls.n	ca74 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    ca5c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ca60:	2b00      	cmp	r3, #0
    ca62:	d001      	beq.n	ca68 <uint64_to_hexstr+0x4a>
    ca64:	2227      	movs	r2, #39	; 0x27
    ca66:	e000      	b.n	ca6a <uint64_to_hexstr+0x4c>
    ca68:	2207      	movs	r2, #7
    ca6a:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    ca6e:	4413      	add	r3, r2
    ca70:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    ca74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca76:	1c5a      	adds	r2, r3, #1
    ca78:	920b      	str	r2, [sp, #44]	; 0x2c
    ca7a:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    ca7e:	3230      	adds	r2, #48	; 0x30
    ca80:	b2d2      	uxtb	r2, r2
    ca82:	3330      	adds	r3, #48	; 0x30
    ca84:	446b      	add	r3, sp
    ca86:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    ca8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    ca8e:	f04f 0200 	mov.w	r2, #0
    ca92:	f04f 0300 	mov.w	r3, #0
    ca96:	0902      	lsrs	r2, r0, #4
    ca98:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    ca9c:	090b      	lsrs	r3, r1, #4
    ca9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    while ( ui64Val )
    caa2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    caa6:	4313      	orrs	r3, r2
    caa8:	d1ce      	bne.n	ca48 <uint64_to_hexstr+0x2a>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    caaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    caac:	9309      	str	r3, [sp, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    caae:	9b01      	ldr	r3, [sp, #4]
    cab0:	2b00      	cmp	r3, #0
    cab2:	d010      	beq.n	cad6 <uint64_to_hexstr+0xb8>
    {
        while (ix--)
    cab4:	e007      	b.n	cac6 <uint64_to_hexstr+0xa8>
        {
            *pcBuf++ = tbuf[ix];
    cab6:	9b01      	ldr	r3, [sp, #4]
    cab8:	1c5a      	adds	r2, r3, #1
    caba:	9201      	str	r2, [sp, #4]
    cabc:	a904      	add	r1, sp, #16
    cabe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cac0:	440a      	add	r2, r1
    cac2:	7812      	ldrb	r2, [r2, #0]
    cac4:	701a      	strb	r2, [r3, #0]
        while (ix--)
    cac6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cac8:	1e5a      	subs	r2, r3, #1
    caca:	920b      	str	r2, [sp, #44]	; 0x2c
    cacc:	2b00      	cmp	r3, #0
    cace:	d1f2      	bne.n	cab6 <uint64_to_hexstr+0x98>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    cad0:	9b01      	ldr	r3, [sp, #4]
    cad2:	2200      	movs	r2, #0
    cad4:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    cad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    cad8:	4618      	mov	r0, r3
    cada:	b00c      	add	sp, #48	; 0x30
    cadc:	4770      	bx	lr

0000cade <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    cade:	b084      	sub	sp, #16
    cae0:	9001      	str	r0, [sp, #4]
    uint32_t ui32RetVal = 0;
    cae2:	2300      	movs	r3, #0
    cae4:	9303      	str	r3, [sp, #12]
    if ( !pcBuf )
    cae6:	9b01      	ldr	r3, [sp, #4]
    cae8:	2b00      	cmp	r3, #0
    caea:	d104      	bne.n	caf6 <simple_strlen+0x18>
    {
        return ui32RetVal;
    caec:	9b03      	ldr	r3, [sp, #12]
    caee:	e009      	b.n	cb04 <simple_strlen+0x26>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    caf0:	9b03      	ldr	r3, [sp, #12]
    caf2:	3301      	adds	r3, #1
    caf4:	9303      	str	r3, [sp, #12]
    while ( *pcBuf++ )
    caf6:	9b01      	ldr	r3, [sp, #4]
    caf8:	1c5a      	adds	r2, r3, #1
    cafa:	9201      	str	r2, [sp, #4]
    cafc:	781b      	ldrb	r3, [r3, #0]
    cafe:	2b00      	cmp	r3, #0
    cb00:	d1f6      	bne.n	caf0 <simple_strlen+0x12>
    }
    return ui32RetVal;
    cb02:	9b03      	ldr	r3, [sp, #12]
}
    cb04:	4618      	mov	r0, r3
    cb06:	b004      	add	sp, #16
    cb08:	4770      	bx	lr

0000cb0a <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    cb0a:	b086      	sub	sp, #24
    cb0c:	9003      	str	r0, [sp, #12]
    cb0e:	460b      	mov	r3, r1
    cb10:	9201      	str	r2, [sp, #4]
    cb12:	f88d 300b 	strb.w	r3, [sp, #11]
    int32_t i32Cnt = 0;
    cb16:	2300      	movs	r3, #0
    cb18:	9305      	str	r3, [sp, #20]

    if ( i32NumChars <= 0 )
    cb1a:	9b01      	ldr	r3, [sp, #4]
    cb1c:	2b00      	cmp	r3, #0
    cb1e:	dc0d      	bgt.n	cb3c <padbuffer+0x32>
    {
        return i32Cnt;
    cb20:	9b05      	ldr	r3, [sp, #20]
    cb22:	e011      	b.n	cb48 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    cb24:	9b03      	ldr	r3, [sp, #12]
    cb26:	2b00      	cmp	r3, #0
    cb28:	d005      	beq.n	cb36 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    cb2a:	9b03      	ldr	r3, [sp, #12]
    cb2c:	1c5a      	adds	r2, r3, #1
    cb2e:	9203      	str	r2, [sp, #12]
    cb30:	f89d 200b 	ldrb.w	r2, [sp, #11]
    cb34:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    cb36:	9b05      	ldr	r3, [sp, #20]
    cb38:	3301      	adds	r3, #1
    cb3a:	9305      	str	r3, [sp, #20]
    while ( i32NumChars-- )
    cb3c:	9b01      	ldr	r3, [sp, #4]
    cb3e:	1e5a      	subs	r2, r3, #1
    cb40:	9201      	str	r2, [sp, #4]
    cb42:	2b00      	cmp	r3, #0
    cb44:	d1ee      	bne.n	cb24 <padbuffer+0x1a>
    }

    return i32Cnt;
    cb46:	9b05      	ldr	r3, [sp, #20]
}
    cb48:	4618      	mov	r0, r3
    cb4a:	b006      	add	sp, #24
    cb4c:	4770      	bx	lr
	...

0000cb50 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    cb50:	b5f0      	push	{r4, r5, r6, r7, lr}
    cb52:	b08f      	sub	sp, #60	; 0x3c
    cb54:	ed8d 0a03 	vstr	s0, [sp, #12]
    cb58:	9002      	str	r0, [sp, #8]
    cb5a:	9101      	str	r1, [sp, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    cb5c:	9b02      	ldr	r3, [sp, #8]
    cb5e:	681b      	ldr	r3, [r3, #0]
    cb60:	9309      	str	r3, [sp, #36]	; 0x24
    if (iBufSize < 4)
    cb62:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cb64:	2b03      	cmp	r3, #3
    cb66:	dc02      	bgt.n	cb6e <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    cb68:	f06f 0302 	mvn.w	r3, #2
    cb6c:	e0e9      	b.n	cd42 <ftoa+0x1f2>
    }

    if (fValue == 0.0f)
    cb6e:	eddd 7a03 	vldr	s15, [sp, #12]
    cb72:	eef5 7a40 	vcmp.f32	s15, #0.0
    cb76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cb7a:	d104      	bne.n	cb86 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    cb7c:	9b02      	ldr	r3, [sp, #8]
    cb7e:	4a72      	ldr	r2, [pc, #456]	; (cd48 <ftoa+0x1f8>)
    cb80:	601a      	str	r2, [r3, #0]
        return 3;
    cb82:	2303      	movs	r3, #3
    cb84:	e0dd      	b.n	cd42 <ftoa+0x1f2>
    }

    pcBufInitial = pcBuf;
    cb86:	9b02      	ldr	r3, [sp, #8]
    cb88:	9308      	str	r3, [sp, #32]

    unFloatValue.F = fValue;
    cb8a:	9b03      	ldr	r3, [sp, #12]
    cb8c:	9304      	str	r3, [sp, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    cb8e:	9b04      	ldr	r3, [sp, #16]
    cb90:	15db      	asrs	r3, r3, #23
    cb92:	b2db      	uxtb	r3, r3
    cb94:	3b7f      	subs	r3, #127	; 0x7f
    cb96:	9307      	str	r3, [sp, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    cb98:	9b04      	ldr	r3, [sp, #16]
    cb9a:	f3c3 0316 	ubfx	r3, r3, #0, #23
    cb9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    cba2:	9306      	str	r3, [sp, #24]
    i32FracPart = 0;
    cba4:	2300      	movs	r3, #0
    cba6:	930c      	str	r3, [sp, #48]	; 0x30
    i32IntPart = 0;
    cba8:	2300      	movs	r3, #0
    cbaa:	930d      	str	r3, [sp, #52]	; 0x34

    if (iExp2 >= 31)
    cbac:	9b07      	ldr	r3, [sp, #28]
    cbae:	2b1e      	cmp	r3, #30
    cbb0:	dd02      	ble.n	cbb8 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    cbb2:	f06f 0301 	mvn.w	r3, #1
    cbb6:	e0c4      	b.n	cd42 <ftoa+0x1f2>
    }
    else if (iExp2 < -23)
    cbb8:	9b07      	ldr	r3, [sp, #28]
    cbba:	f113 0f17 	cmn.w	r3, #23
    cbbe:	da02      	bge.n	cbc6 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    cbc0:	f04f 33ff 	mov.w	r3, #4294967295
    cbc4:	e0bd      	b.n	cd42 <ftoa+0x1f2>
    }
    else if (iExp2 >= 23)
    cbc6:	9b07      	ldr	r3, [sp, #28]
    cbc8:	2b16      	cmp	r3, #22
    cbca:	dd06      	ble.n	cbda <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    cbcc:	9b07      	ldr	r3, [sp, #28]
    cbce:	3b17      	subs	r3, #23
    cbd0:	9a06      	ldr	r2, [sp, #24]
    cbd2:	fa02 f303 	lsl.w	r3, r2, r3
    cbd6:	930d      	str	r3, [sp, #52]	; 0x34
    cbd8:	e01a      	b.n	cc10 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    cbda:	9b07      	ldr	r3, [sp, #28]
    cbdc:	2b00      	cmp	r3, #0
    cbde:	db0f      	blt.n	cc00 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    cbe0:	9b07      	ldr	r3, [sp, #28]
    cbe2:	f1c3 0317 	rsb	r3, r3, #23
    cbe6:	9a06      	ldr	r2, [sp, #24]
    cbe8:	fa42 f303 	asr.w	r3, r2, r3
    cbec:	930d      	str	r3, [sp, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    cbee:	9b07      	ldr	r3, [sp, #28]
    cbf0:	3301      	adds	r3, #1
    cbf2:	9a06      	ldr	r2, [sp, #24]
    cbf4:	fa02 f303 	lsl.w	r3, r2, r3
    cbf8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cbfc:	930c      	str	r3, [sp, #48]	; 0x30
    cbfe:	e007      	b.n	cc10 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    cc00:	9b06      	ldr	r3, [sp, #24]
    cc02:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    cc06:	9b07      	ldr	r3, [sp, #28]
    cc08:	43db      	mvns	r3, r3
    cc0a:	fa42 f303 	asr.w	r3, r2, r3
    cc0e:	930c      	str	r3, [sp, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    cc10:	9b04      	ldr	r3, [sp, #16]
    cc12:	2b00      	cmp	r3, #0
    cc14:	da04      	bge.n	cc20 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    cc16:	9b02      	ldr	r3, [sp, #8]
    cc18:	1c5a      	adds	r2, r3, #1
    cc1a:	9202      	str	r2, [sp, #8]
    cc1c:	222d      	movs	r2, #45	; 0x2d
    cc1e:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    cc20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cc22:	2b00      	cmp	r3, #0
    cc24:	d105      	bne.n	cc32 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    cc26:	9b02      	ldr	r3, [sp, #8]
    cc28:	1c5a      	adds	r2, r3, #1
    cc2a:	9202      	str	r2, [sp, #8]
    cc2c:	2230      	movs	r2, #48	; 0x30
    cc2e:	701a      	strb	r2, [r3, #0]
    cc30:	e023      	b.n	cc7a <ftoa+0x12a>
    }
    else
    {
        if (i32IntPart > 0)
    cc32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cc34:	2b00      	cmp	r3, #0
    cc36:	dd09      	ble.n	cc4c <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
    cc38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cc3a:	17da      	asrs	r2, r3, #31
    cc3c:	461e      	mov	r6, r3
    cc3e:	4617      	mov	r7, r2
    cc40:	9a02      	ldr	r2, [sp, #8]
    cc42:	4630      	mov	r0, r6
    cc44:	4639      	mov	r1, r7
    cc46:	f7ff fea5 	bl	c994 <uint64_to_str>
    cc4a:	e012      	b.n	cc72 <ftoa+0x122>
        }
        else
        {
            *pcBuf++ = '-';
    cc4c:	9b02      	ldr	r3, [sp, #8]
    cc4e:	1c5a      	adds	r2, r3, #1
    cc50:	9202      	str	r2, [sp, #8]
    cc52:	222d      	movs	r2, #45	; 0x2d
    cc54:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    cc56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cc58:	425b      	negs	r3, r3
    cc5a:	17da      	asrs	r2, r3, #31
    cc5c:	461c      	mov	r4, r3
    cc5e:	4615      	mov	r5, r2
    cc60:	9a02      	ldr	r2, [sp, #8]
    cc62:	4620      	mov	r0, r4
    cc64:	4629      	mov	r1, r5
    cc66:	f7ff fe95 	bl	c994 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    cc6a:	e002      	b.n	cc72 <ftoa+0x122>
        {
            pcBuf++;
    cc6c:	9b02      	ldr	r3, [sp, #8]
    cc6e:	3301      	adds	r3, #1
    cc70:	9302      	str	r3, [sp, #8]
        while (*pcBuf)    // Get to end of new string
    cc72:	9b02      	ldr	r3, [sp, #8]
    cc74:	781b      	ldrb	r3, [r3, #0]
    cc76:	2b00      	cmp	r3, #0
    cc78:	d1f8      	bne.n	cc6c <ftoa+0x11c>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    cc7a:	9b02      	ldr	r3, [sp, #8]
    cc7c:	1c5a      	adds	r2, r3, #1
    cc7e:	9202      	str	r2, [sp, #8]
    cc80:	222e      	movs	r2, #46	; 0x2e
    cc82:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    cc84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cc86:	2b00      	cmp	r3, #0
    cc88:	d105      	bne.n	cc96 <ftoa+0x146>
    {
        *pcBuf++ = '0';
    cc8a:	9b02      	ldr	r3, [sp, #8]
    cc8c:	1c5a      	adds	r2, r3, #1
    cc8e:	9202      	str	r2, [sp, #8]
    cc90:	2230      	movs	r2, #48	; 0x30
    cc92:	701a      	strb	r2, [r3, #0]
    cc94:	e04f      	b.n	cd36 <ftoa+0x1e6>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    cc96:	9a02      	ldr	r2, [sp, #8]
    cc98:	9b08      	ldr	r3, [sp, #32]
    cc9a:	1ad3      	subs	r3, r2, r3
    cc9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    cc9e:	1ad3      	subs	r3, r2, r3
    cca0:	3b01      	subs	r3, #1
    cca2:	9305      	str	r3, [sp, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    cca4:	9a05      	ldr	r2, [sp, #20]
    cca6:	9b01      	ldr	r3, [sp, #4]
    cca8:	4293      	cmp	r3, r2
    ccaa:	bfa8      	it	ge
    ccac:	4613      	movge	r3, r2
    ccae:	9305      	str	r3, [sp, #20]

        for (jx = 0; jx < iMax; jx++)
    ccb0:	2300      	movs	r3, #0
    ccb2:	930a      	str	r3, [sp, #40]	; 0x28
    ccb4:	e015      	b.n	cce2 <ftoa+0x192>
        {
            i32FracPart *= 10;
    ccb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ccb8:	4613      	mov	r3, r2
    ccba:	009b      	lsls	r3, r3, #2
    ccbc:	4413      	add	r3, r2
    ccbe:	005b      	lsls	r3, r3, #1
    ccc0:	930c      	str	r3, [sp, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    ccc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ccc4:	161b      	asrs	r3, r3, #24
    ccc6:	b2da      	uxtb	r2, r3
    ccc8:	9b02      	ldr	r3, [sp, #8]
    ccca:	1c59      	adds	r1, r3, #1
    cccc:	9102      	str	r1, [sp, #8]
    ccce:	3230      	adds	r2, #48	; 0x30
    ccd0:	b2d2      	uxtb	r2, r2
    ccd2:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    ccd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ccd6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ccda:	930c      	str	r3, [sp, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    ccdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ccde:	3301      	adds	r3, #1
    cce0:	930a      	str	r3, [sp, #40]	; 0x28
    cce2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    cce4:	9b05      	ldr	r3, [sp, #20]
    cce6:	429a      	cmp	r2, r3
    cce8:	dbe5      	blt.n	ccb6 <ftoa+0x166>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    ccea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ccec:	4613      	mov	r3, r2
    ccee:	009b      	lsls	r3, r3, #2
    ccf0:	4413      	add	r3, r2
    ccf2:	005b      	lsls	r3, r3, #1
    ccf4:	161b      	asrs	r3, r3, #24
    ccf6:	2b04      	cmp	r3, #4
    ccf8:	dd1d      	ble.n	cd36 <ftoa+0x1e6>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    ccfa:	9b02      	ldr	r3, [sp, #8]
    ccfc:	3b01      	subs	r3, #1
    ccfe:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cd00:	e015      	b.n	cd2e <ftoa+0x1de>
            {
                if ( *pcBuftmp == '.' )
    cd02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cd04:	781b      	ldrb	r3, [r3, #0]
    cd06:	2b2e      	cmp	r3, #46	; 0x2e
    cd08:	d00e      	beq.n	cd28 <ftoa+0x1d8>
                {
                }
                else if ( *pcBuftmp == '9' )
    cd0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cd0c:	781b      	ldrb	r3, [r3, #0]
    cd0e:	2b39      	cmp	r3, #57	; 0x39
    cd10:	d103      	bne.n	cd1a <ftoa+0x1ca>
                {
                    *pcBuftmp = '0';
    cd12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cd14:	2230      	movs	r2, #48	; 0x30
    cd16:	701a      	strb	r2, [r3, #0]
    cd18:	e006      	b.n	cd28 <ftoa+0x1d8>
                }
                else
                {
                    *pcBuftmp += 1;
    cd1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cd1c:	781b      	ldrb	r3, [r3, #0]
    cd1e:	3301      	adds	r3, #1
    cd20:	b2da      	uxtb	r2, r3
    cd22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cd24:	701a      	strb	r2, [r3, #0]
                    break;
    cd26:	e006      	b.n	cd36 <ftoa+0x1e6>
                }
                pcBuftmp--;
    cd28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cd2a:	3b01      	subs	r3, #1
    cd2c:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cd2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cd30:	9b08      	ldr	r3, [sp, #32]
    cd32:	429a      	cmp	r2, r3
    cd34:	d2e5      	bcs.n	cd02 <ftoa+0x1b2>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    cd36:	9b02      	ldr	r3, [sp, #8]
    cd38:	2200      	movs	r2, #0
    cd3a:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    cd3c:	9a02      	ldr	r2, [sp, #8]
    cd3e:	9b08      	ldr	r3, [sp, #32]
    cd40:	1ad3      	subs	r3, r2, r3
} // ftoa()
    cd42:	4618      	mov	r0, r3
    cd44:	b00f      	add	sp, #60	; 0x3c
    cd46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cd48:	00302e30 	.word	0x00302e30

0000cd4c <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    cd4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cd50:	b097      	sub	sp, #92	; 0x5c
    cd52:	9003      	str	r0, [sp, #12]
    cd54:	9102      	str	r1, [sp, #8]
    cd56:	9201      	str	r2, [sp, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    cd58:	2300      	movs	r3, #0
    cd5a:	9311      	str	r3, [sp, #68]	; 0x44
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    cd5c:	2300      	movs	r3, #0
    cd5e:	930b      	str	r3, [sp, #44]	; 0x2c

    while ( *pcFmt != 0x0 )
    cd60:	e2e9      	b.n	d336 <am_util_stdio_vsprintf+0x5ea>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    cd62:	2306      	movs	r3, #6
    cd64:	930e      	str	r3, [sp, #56]	; 0x38

        if ( *pcFmt != '%' )
    cd66:	9b02      	ldr	r3, [sp, #8]
    cd68:	781b      	ldrb	r3, [r3, #0]
    cd6a:	2b25      	cmp	r3, #37	; 0x25
    cd6c:	d01f      	beq.n	cdae <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    cd6e:	9b03      	ldr	r3, [sp, #12]
    cd70:	2b00      	cmp	r3, #0
    cd72:	d015      	beq.n	cda0 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    cd74:	9b02      	ldr	r3, [sp, #8]
    cd76:	781b      	ldrb	r3, [r3, #0]
    cd78:	2b0a      	cmp	r3, #10
    cd7a:	d10b      	bne.n	cd94 <am_util_stdio_vsprintf+0x48>
    cd7c:	4ba8      	ldr	r3, [pc, #672]	; (d020 <am_util_stdio_vsprintf+0x2d4>)
    cd7e:	781b      	ldrb	r3, [r3, #0]
    cd80:	2b00      	cmp	r3, #0
    cd82:	d007      	beq.n	cd94 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    cd84:	9b03      	ldr	r3, [sp, #12]
    cd86:	1c5a      	adds	r2, r3, #1
    cd88:	9203      	str	r2, [sp, #12]
    cd8a:	220d      	movs	r2, #13
    cd8c:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    cd8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cd90:	3301      	adds	r3, #1
    cd92:	9311      	str	r3, [sp, #68]	; 0x44
                }
                *pcBuf++ = *pcFmt;
    cd94:	9b03      	ldr	r3, [sp, #12]
    cd96:	1c5a      	adds	r2, r3, #1
    cd98:	9203      	str	r2, [sp, #12]
    cd9a:	9a02      	ldr	r2, [sp, #8]
    cd9c:	7812      	ldrb	r2, [r2, #0]
    cd9e:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    cda0:	9b02      	ldr	r3, [sp, #8]
    cda2:	3301      	adds	r3, #1
    cda4:	9302      	str	r3, [sp, #8]
            ++ui32CharCnt;
    cda6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cda8:	3301      	adds	r3, #1
    cdaa:	9311      	str	r3, [sp, #68]	; 0x44
            continue;
    cdac:	e2c3      	b.n	d336 <am_util_stdio_vsprintf+0x5ea>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    cdae:	9b02      	ldr	r3, [sp, #8]
    cdb0:	3301      	adds	r3, #1
    cdb2:	9302      	str	r3, [sp, #8]
        bLower = bLongLong = false;
    cdb4:	2300      	movs	r3, #0
    cdb6:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    cdba:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    cdbe:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    cdc2:	2320      	movs	r3, #32
    cdc4:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

        if ( *pcFmt == '0' )
    cdc8:	9b02      	ldr	r3, [sp, #8]
    cdca:	781b      	ldrb	r3, [r3, #0]
    cdcc:	2b30      	cmp	r3, #48	; 0x30
    cdce:	d105      	bne.n	cddc <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    cdd0:	2330      	movs	r3, #48	; 0x30
    cdd2:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
            ++pcFmt;
    cdd6:	9b02      	ldr	r3, [sp, #8]
    cdd8:	3301      	adds	r3, #1
    cdda:	9302      	str	r3, [sp, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    cddc:	ab05      	add	r3, sp, #20
    cdde:	4619      	mov	r1, r3
    cde0:	9802      	ldr	r0, [sp, #8]
    cde2:	f7ff fd93 	bl	c90c <decstr_to_int>
    cde6:	4603      	mov	r3, r0
    cde8:	9310      	str	r3, [sp, #64]	; 0x40
        pcFmt += ui32NumChars;
    cdea:	9b05      	ldr	r3, [sp, #20]
    cdec:	9a02      	ldr	r2, [sp, #8]
    cdee:	4413      	add	r3, r2
    cdf0:	9302      	str	r3, [sp, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    cdf2:	9b02      	ldr	r3, [sp, #8]
    cdf4:	781b      	ldrb	r3, [r3, #0]
    cdf6:	2b73      	cmp	r3, #115	; 0x73
    cdf8:	d005      	beq.n	ce06 <am_util_stdio_vsprintf+0xba>
    cdfa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cdfc:	2b00      	cmp	r3, #0
    cdfe:	da02      	bge.n	ce06 <am_util_stdio_vsprintf+0xba>
        {
            iWidth = -iWidth;
    ce00:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce02:	425b      	negs	r3, r3
    ce04:	9310      	str	r3, [sp, #64]	; 0x40
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    ce06:	9b02      	ldr	r3, [sp, #8]
    ce08:	781b      	ldrb	r3, [r3, #0]
    ce0a:	2b2e      	cmp	r3, #46	; 0x2e
    ce0c:	d10d      	bne.n	ce2a <am_util_stdio_vsprintf+0xde>
        {
            ++pcFmt;
    ce0e:	9b02      	ldr	r3, [sp, #8]
    ce10:	3301      	adds	r3, #1
    ce12:	9302      	str	r3, [sp, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    ce14:	ab05      	add	r3, sp, #20
    ce16:	4619      	mov	r1, r3
    ce18:	9802      	ldr	r0, [sp, #8]
    ce1a:	f7ff fd77 	bl	c90c <decstr_to_int>
    ce1e:	4603      	mov	r3, r0
    ce20:	930e      	str	r3, [sp, #56]	; 0x38
            pcFmt += ui32NumChars;
    ce22:	9b05      	ldr	r3, [sp, #20]
    ce24:	9a02      	ldr	r2, [sp, #8]
    ce26:	4413      	add	r3, r2
    ce28:	9302      	str	r3, [sp, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    ce2a:	9b02      	ldr	r3, [sp, #8]
    ce2c:	781b      	ldrb	r3, [r3, #0]
    ce2e:	2b6c      	cmp	r3, #108	; 0x6c
    ce30:	d10c      	bne.n	ce4c <am_util_stdio_vsprintf+0x100>
        {
            pcFmt++;
    ce32:	9b02      	ldr	r3, [sp, #8]
    ce34:	3301      	adds	r3, #1
    ce36:	9302      	str	r3, [sp, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    ce38:	9b02      	ldr	r3, [sp, #8]
    ce3a:	781b      	ldrb	r3, [r3, #0]
    ce3c:	2b6c      	cmp	r3, #108	; 0x6c
    ce3e:	d105      	bne.n	ce4c <am_util_stdio_vsprintf+0x100>
            {
                pcFmt++;
    ce40:	9b02      	ldr	r3, [sp, #8]
    ce42:	3301      	adds	r3, #1
    ce44:	9302      	str	r3, [sp, #8]
                bLongLong = true;
    ce46:	2301      	movs	r3, #1
    ce48:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
            }
        }

        switch ( *pcFmt )
    ce4c:	9b02      	ldr	r3, [sp, #8]
    ce4e:	781b      	ldrb	r3, [r3, #0]
    ce50:	3b46      	subs	r3, #70	; 0x46
    ce52:	2b32      	cmp	r3, #50	; 0x32
    ce54:	f200 825c 	bhi.w	d310 <am_util_stdio_vsprintf+0x5c4>
    ce58:	a201      	add	r2, pc, #4	; (adr r2, ce60 <am_util_stdio_vsprintf+0x114>)
    ce5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ce5e:	bf00      	nop
    ce60:	0000d297 	.word	0x0000d297
    ce64:	0000d311 	.word	0x0000d311
    ce68:	0000d311 	.word	0x0000d311
    ce6c:	0000d311 	.word	0x0000d311
    ce70:	0000d311 	.word	0x0000d311
    ce74:	0000d311 	.word	0x0000d311
    ce78:	0000d311 	.word	0x0000d311
    ce7c:	0000d311 	.word	0x0000d311
    ce80:	0000d311 	.word	0x0000d311
    ce84:	0000d311 	.word	0x0000d311
    ce88:	0000d311 	.word	0x0000d311
    ce8c:	0000d311 	.word	0x0000d311
    ce90:	0000d311 	.word	0x0000d311
    ce94:	0000d311 	.word	0x0000d311
    ce98:	0000d311 	.word	0x0000d311
    ce9c:	0000d311 	.word	0x0000d311
    cea0:	0000d311 	.word	0x0000d311
    cea4:	0000d311 	.word	0x0000d311
    cea8:	0000d02b 	.word	0x0000d02b
    ceac:	0000d311 	.word	0x0000d311
    ceb0:	0000d311 	.word	0x0000d311
    ceb4:	0000d311 	.word	0x0000d311
    ceb8:	0000d311 	.word	0x0000d311
    cebc:	0000d311 	.word	0x0000d311
    cec0:	0000d311 	.word	0x0000d311
    cec4:	0000d311 	.word	0x0000d311
    cec8:	0000d311 	.word	0x0000d311
    cecc:	0000d311 	.word	0x0000d311
    ced0:	0000d311 	.word	0x0000d311
    ced4:	0000cf2d 	.word	0x0000cf2d
    ced8:	0000d15b 	.word	0x0000d15b
    cedc:	0000d311 	.word	0x0000d311
    cee0:	0000d297 	.word	0x0000d297
    cee4:	0000d311 	.word	0x0000d311
    cee8:	0000d311 	.word	0x0000d311
    ceec:	0000d15b 	.word	0x0000d15b
    cef0:	0000d311 	.word	0x0000d311
    cef4:	0000d311 	.word	0x0000d311
    cef8:	0000d311 	.word	0x0000d311
    cefc:	0000d311 	.word	0x0000d311
    cf00:	0000d311 	.word	0x0000d311
    cf04:	0000d311 	.word	0x0000d311
    cf08:	0000d311 	.word	0x0000d311
    cf0c:	0000d311 	.word	0x0000d311
    cf10:	0000d311 	.word	0x0000d311
    cf14:	0000cf53 	.word	0x0000cf53
    cf18:	0000d311 	.word	0x0000d311
    cf1c:	0000d0c5 	.word	0x0000d0c5
    cf20:	0000d311 	.word	0x0000d311
    cf24:	0000d311 	.word	0x0000d311
    cf28:	0000d025 	.word	0x0000d025
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cf2c:	9b01      	ldr	r3, [sp, #4]
    cf2e:	1d1a      	adds	r2, r3, #4
    cf30:	9201      	str	r2, [sp, #4]
    cf32:	681b      	ldr	r3, [r3, #0]
    cf34:	f88d 301f 	strb.w	r3, [sp, #31]

                if ( pcBuf )
    cf38:	9b03      	ldr	r3, [sp, #12]
    cf3a:	2b00      	cmp	r3, #0
    cf3c:	d005      	beq.n	cf4a <am_util_stdio_vsprintf+0x1fe>
                {
                    *pcBuf++ = ui8CharSpecifier;
    cf3e:	9b03      	ldr	r3, [sp, #12]
    cf40:	1c5a      	adds	r2, r3, #1
    cf42:	9203      	str	r2, [sp, #12]
    cf44:	f89d 201f 	ldrb.w	r2, [sp, #31]
    cf48:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    cf4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cf4c:	3301      	adds	r3, #1
    cf4e:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    cf50:	e1ee      	b.n	d330 <am_util_stdio_vsprintf+0x5e4>

            case 's':
                pcStr = va_arg(pArgs, char *);
    cf52:	9b01      	ldr	r3, [sp, #4]
    cf54:	1d1a      	adds	r2, r3, #4
    cf56:	9201      	str	r2, [sp, #4]
    cf58:	681b      	ldr	r3, [r3, #0]
    cf5a:	9315      	str	r3, [sp, #84]	; 0x54
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    cf5c:	9815      	ldr	r0, [sp, #84]	; 0x54
    cf5e:	f7ff fdbe 	bl	cade <simple_strlen>
    cf62:	900b      	str	r0, [sp, #44]	; 0x2c
                if ( iWidth > 0 )
    cf64:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf66:	2b00      	cmp	r3, #0
    cf68:	dd2e      	ble.n	cfc8 <am_util_stdio_vsprintf+0x27c>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    cf6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cf6e:	429a      	cmp	r2, r3
    cf70:	d22a      	bcs.n	cfc8 <am_util_stdio_vsprintf+0x27c>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cf72:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cf74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cf76:	1ad3      	subs	r3, r2, r3
    cf78:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cf7a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cf7e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cf80:	4619      	mov	r1, r3
    cf82:	9803      	ldr	r0, [sp, #12]
    cf84:	f7ff fdc1 	bl	cb0a <padbuffer>
    cf88:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    cf8a:	9b03      	ldr	r3, [sp, #12]
    cf8c:	2b00      	cmp	r3, #0
    cf8e:	d001      	beq.n	cf94 <am_util_stdio_vsprintf+0x248>
    cf90:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf92:	e000      	b.n	cf96 <am_util_stdio_vsprintf+0x24a>
    cf94:	2300      	movs	r3, #0
    cf96:	9a03      	ldr	r2, [sp, #12]
    cf98:	4413      	add	r3, r2
    cf9a:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    cf9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cfa0:	4413      	add	r3, r2
    cfa2:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    cfa4:	2300      	movs	r3, #0
    cfa6:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }

                while (*pcStr != 0x0)
    cfa8:	e00e      	b.n	cfc8 <am_util_stdio_vsprintf+0x27c>
                {
                    if ( pcBuf )
    cfaa:	9b03      	ldr	r3, [sp, #12]
    cfac:	2b00      	cmp	r3, #0
    cfae:	d005      	beq.n	cfbc <am_util_stdio_vsprintf+0x270>
                    {
                        *pcBuf++ = *pcStr;
    cfb0:	9b03      	ldr	r3, [sp, #12]
    cfb2:	1c5a      	adds	r2, r3, #1
    cfb4:	9203      	str	r2, [sp, #12]
    cfb6:	9a15      	ldr	r2, [sp, #84]	; 0x54
    cfb8:	7812      	ldrb	r2, [r2, #0]
    cfba:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    cfbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cfbe:	3301      	adds	r3, #1
    cfc0:	9315      	str	r3, [sp, #84]	; 0x54
                    ++ui32CharCnt;
    cfc2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cfc4:	3301      	adds	r3, #1
    cfc6:	9311      	str	r3, [sp, #68]	; 0x44
                while (*pcStr != 0x0)
    cfc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cfca:	781b      	ldrb	r3, [r3, #0]
    cfcc:	2b00      	cmp	r3, #0
    cfce:	d1ec      	bne.n	cfaa <am_util_stdio_vsprintf+0x25e>
                }

                if ( iWidth )
    cfd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfd2:	2b00      	cmp	r3, #0
    cfd4:	f000 81a9 	beq.w	d32a <am_util_stdio_vsprintf+0x5de>
                {
                    iWidth = -iWidth;
    cfd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfda:	425b      	negs	r3, r3
    cfdc:	9310      	str	r3, [sp, #64]	; 0x40

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    cfde:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfe0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cfe2:	429a      	cmp	r2, r3
    cfe4:	f080 81a1 	bcs.w	d32a <am_util_stdio_vsprintf+0x5de>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cfe8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cfea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cfec:	1ad3      	subs	r3, r2, r3
    cfee:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cff0:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cff4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cff6:	4619      	mov	r1, r3
    cff8:	9803      	ldr	r0, [sp, #12]
    cffa:	f7ff fd86 	bl	cb0a <padbuffer>
    cffe:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    d000:	9b03      	ldr	r3, [sp, #12]
    d002:	2b00      	cmp	r3, #0
    d004:	d001      	beq.n	d00a <am_util_stdio_vsprintf+0x2be>
    d006:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d008:	e000      	b.n	d00c <am_util_stdio_vsprintf+0x2c0>
    d00a:	2300      	movs	r3, #0
    d00c:	9a03      	ldr	r2, [sp, #12]
    d00e:	4413      	add	r3, r2
    d010:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    d012:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d014:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d016:	4413      	add	r3, r2
    d018:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    d01a:	2300      	movs	r3, #0
    d01c:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }
                break;
    d01e:	e184      	b.n	d32a <am_util_stdio_vsprintf+0x5de>
    d020:	1000113c 	.word	0x1000113c

            case 'x':
                bLower = true;
    d024:	2301      	movs	r3, #1
    d026:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d02a:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d02e:	2b00      	cmp	r3, #0
    d030:	d009      	beq.n	d046 <am_util_stdio_vsprintf+0x2fa>
    d032:	9b01      	ldr	r3, [sp, #4]
    d034:	3307      	adds	r3, #7
    d036:	f023 0307 	bic.w	r3, r3, #7
    d03a:	f103 0208 	add.w	r2, r3, #8
    d03e:	9201      	str	r2, [sp, #4]
    d040:	e9d3 4500 	ldrd	r4, r5, [r3]
    d044:	e006      	b.n	d054 <am_util_stdio_vsprintf+0x308>
                                      va_arg(pArgs, uint32_t);
    d046:	9b01      	ldr	r3, [sp, #4]
    d048:	1d1a      	adds	r2, r3, #4
    d04a:	9201      	str	r2, [sp, #4]
    d04c:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d04e:	2200      	movs	r2, #0
    d050:	461c      	mov	r4, r3
    d052:	4615      	mov	r5, r2
    d054:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48

                if ( iWidth )
    d058:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d05a:	2b00      	cmp	r3, #0
    d05c:	d01e      	beq.n	d09c <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    d05e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d062:	f7ff fc2f 	bl	c8c4 <ndigits_in_hex>
    d066:	4602      	mov	r2, r0
    d068:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d06a:	1a9b      	subs	r3, r3, r2
    d06c:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d06e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d072:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d074:	4619      	mov	r1, r3
    d076:	9803      	ldr	r0, [sp, #12]
    d078:	f7ff fd47 	bl	cb0a <padbuffer>
    d07c:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d07e:	9b03      	ldr	r3, [sp, #12]
    d080:	2b00      	cmp	r3, #0
    d082:	d001      	beq.n	d088 <am_util_stdio_vsprintf+0x33c>
    d084:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d086:	e000      	b.n	d08a <am_util_stdio_vsprintf+0x33e>
    d088:	2300      	movs	r3, #0
    d08a:	9a03      	ldr	r2, [sp, #12]
    d08c:	4413      	add	r3, r2
    d08e:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d090:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d092:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d094:	4413      	add	r3, r2
    d096:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d098:	2300      	movs	r3, #0
    d09a:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    d09c:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    d0a0:	9a03      	ldr	r2, [sp, #12]
    d0a2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d0a6:	f7ff fcba 	bl	ca1e <uint64_to_hexstr>
    d0aa:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d0ac:	9b03      	ldr	r3, [sp, #12]
    d0ae:	2b00      	cmp	r3, #0
    d0b0:	d003      	beq.n	d0ba <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    d0b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d0b4:	9a03      	ldr	r2, [sp, #12]
    d0b6:	4413      	add	r3, r2
    d0b8:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d0ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d0bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d0be:	4413      	add	r3, r2
    d0c0:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d0c2:	e135      	b.n	d330 <am_util_stdio_vsprintf+0x5e4>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d0c4:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d0c8:	2b00      	cmp	r3, #0
    d0ca:	d009      	beq.n	d0e0 <am_util_stdio_vsprintf+0x394>
    d0cc:	9b01      	ldr	r3, [sp, #4]
    d0ce:	3307      	adds	r3, #7
    d0d0:	f023 0307 	bic.w	r3, r3, #7
    d0d4:	f103 0208 	add.w	r2, r3, #8
    d0d8:	9201      	str	r2, [sp, #4]
    d0da:	e9d3 6700 	ldrd	r6, r7, [r3]
    d0de:	e006      	b.n	d0ee <am_util_stdio_vsprintf+0x3a2>
                                      va_arg(pArgs, uint32_t);
    d0e0:	9b01      	ldr	r3, [sp, #4]
    d0e2:	1d1a      	adds	r2, r3, #4
    d0e4:	9201      	str	r2, [sp, #4]
    d0e6:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d0e8:	2200      	movs	r2, #0
    d0ea:	461e      	mov	r6, r3
    d0ec:	4617      	mov	r7, r2
    d0ee:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48

                if ( iWidth )
    d0f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d0f4:	2b00      	cmp	r3, #0
    d0f6:	d01e      	beq.n	d136 <am_util_stdio_vsprintf+0x3ea>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    d0f8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d0fc:	f7ff fba8 	bl	c850 <ndigits_in_u64>
    d100:	4602      	mov	r2, r0
    d102:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d104:	1a9b      	subs	r3, r3, r2
    d106:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d108:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d10c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d10e:	4619      	mov	r1, r3
    d110:	9803      	ldr	r0, [sp, #12]
    d112:	f7ff fcfa 	bl	cb0a <padbuffer>
    d116:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d118:	9b03      	ldr	r3, [sp, #12]
    d11a:	2b00      	cmp	r3, #0
    d11c:	d001      	beq.n	d122 <am_util_stdio_vsprintf+0x3d6>
    d11e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d120:	e000      	b.n	d124 <am_util_stdio_vsprintf+0x3d8>
    d122:	2300      	movs	r3, #0
    d124:	9a03      	ldr	r2, [sp, #12]
    d126:	4413      	add	r3, r2
    d128:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d12a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d12c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d12e:	4413      	add	r3, r2
    d130:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d132:	2300      	movs	r3, #0
    d134:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d136:	9a03      	ldr	r2, [sp, #12]
    d138:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d13c:	f7ff fc2a 	bl	c994 <uint64_to_str>
    d140:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d142:	9b03      	ldr	r3, [sp, #12]
    d144:	2b00      	cmp	r3, #0
    d146:	d003      	beq.n	d150 <am_util_stdio_vsprintf+0x404>
                {
                    pcBuf += iVal;
    d148:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d14a:	9a03      	ldr	r2, [sp, #12]
    d14c:	4413      	add	r3, r2
    d14e:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d150:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d152:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d154:	4413      	add	r3, r2
    d156:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d158:	e0ea      	b.n	d330 <am_util_stdio_vsprintf+0x5e4>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d15a:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d15e:	2b00      	cmp	r3, #0
    d160:	d009      	beq.n	d176 <am_util_stdio_vsprintf+0x42a>
    d162:	9b01      	ldr	r3, [sp, #4]
    d164:	3307      	adds	r3, #7
    d166:	f023 0307 	bic.w	r3, r3, #7
    d16a:	f103 0208 	add.w	r2, r3, #8
    d16e:	9201      	str	r2, [sp, #4]
    d170:	e9d3 8900 	ldrd	r8, r9, [r3]
    d174:	e006      	b.n	d184 <am_util_stdio_vsprintf+0x438>
                                     va_arg(pArgs, int32_t);
    d176:	9b01      	ldr	r3, [sp, #4]
    d178:	1d1a      	adds	r2, r3, #4
    d17a:	9201      	str	r2, [sp, #4]
    d17c:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d17e:	17da      	asrs	r2, r3, #31
    d180:	4698      	mov	r8, r3
    d182:	4691      	mov	r9, r2
    d184:	e9cd 8908 	strd	r8, r9, [sp, #32]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    d188:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d18c:	2b00      	cmp	r3, #0
    d18e:	da0c      	bge.n	d1aa <am_util_stdio_vsprintf+0x45e>
                {
                    ui64Val = -i64Val;          // Get absolute value
    d190:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d194:	2100      	movs	r1, #0
    d196:	f1d2 0a00 	rsbs	sl, r2, #0
    d19a:	eb61 0b03 	sbc.w	fp, r1, r3
    d19e:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
                    bNeg = true;
    d1a2:	2301      	movs	r3, #1
    d1a4:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    d1a8:	e006      	b.n	d1b8 <am_util_stdio_vsprintf+0x46c>
                }
                else
                {
                    ui64Val = i64Val;
    d1aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d1ae:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
                    bNeg = false;
    d1b2:	2300      	movs	r3, #0
    d1b4:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                }

                if ( iWidth )
    d1b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d1ba:	2b00      	cmp	r3, #0
    d1bc:	d04a      	beq.n	d254 <am_util_stdio_vsprintf+0x508>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    d1be:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    d1c2:	4610      	mov	r0, r2
    d1c4:	4619      	mov	r1, r3
    d1c6:	f7ff fb63 	bl	c890 <ndigits_in_i64>
    d1ca:	4602      	mov	r2, r0
    d1cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d1ce:	1a9b      	subs	r3, r3, r2
    d1d0:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg )
    d1d2:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d1d6:	2b00      	cmp	r3, #0
    d1d8:	d011      	beq.n	d1fe <am_util_stdio_vsprintf+0x4b2>
                    {
                        --iWidth;
    d1da:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d1dc:	3b01      	subs	r3, #1
    d1de:	9310      	str	r3, [sp, #64]	; 0x40

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    d1e0:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d1e4:	2b30      	cmp	r3, #48	; 0x30
    d1e6:	d10a      	bne.n	d1fe <am_util_stdio_vsprintf+0x4b2>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    d1e8:	9b03      	ldr	r3, [sp, #12]
    d1ea:	2b00      	cmp	r3, #0
    d1ec:	d004      	beq.n	d1f8 <am_util_stdio_vsprintf+0x4ac>
                            {
                                *pcBuf++ = '-';
    d1ee:	9b03      	ldr	r3, [sp, #12]
    d1f0:	1c5a      	adds	r2, r3, #1
    d1f2:	9203      	str	r2, [sp, #12]
    d1f4:	222d      	movs	r2, #45	; 0x2d
    d1f6:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    d1f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d1fa:	3301      	adds	r3, #1
    d1fc:	9311      	str	r3, [sp, #68]	; 0x44
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d1fe:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d202:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d204:	4619      	mov	r1, r3
    d206:	9803      	ldr	r0, [sp, #12]
    d208:	f7ff fc7f 	bl	cb0a <padbuffer>
    d20c:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d20e:	9b03      	ldr	r3, [sp, #12]
    d210:	2b00      	cmp	r3, #0
    d212:	d001      	beq.n	d218 <am_util_stdio_vsprintf+0x4cc>
    d214:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d216:	e000      	b.n	d21a <am_util_stdio_vsprintf+0x4ce>
    d218:	2300      	movs	r3, #0
    d21a:	9a03      	ldr	r2, [sp, #12]
    d21c:	4413      	add	r3, r2
    d21e:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d220:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d222:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d224:	4413      	add	r3, r2
    d226:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d228:	2300      	movs	r3, #0
    d22a:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d22c:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d230:	2b00      	cmp	r3, #0
    d232:	d01e      	beq.n	d272 <am_util_stdio_vsprintf+0x526>
    d234:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d238:	2b20      	cmp	r3, #32
    d23a:	d11a      	bne.n	d272 <am_util_stdio_vsprintf+0x526>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    d23c:	9b03      	ldr	r3, [sp, #12]
    d23e:	2b00      	cmp	r3, #0
    d240:	d004      	beq.n	d24c <am_util_stdio_vsprintf+0x500>
                        {
                            *pcBuf++ = '-';
    d242:	9b03      	ldr	r3, [sp, #12]
    d244:	1c5a      	adds	r2, r3, #1
    d246:	9203      	str	r2, [sp, #12]
    d248:	222d      	movs	r2, #45	; 0x2d
    d24a:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    d24c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d24e:	3301      	adds	r3, #1
    d250:	9311      	str	r3, [sp, #68]	; 0x44
    d252:	e00e      	b.n	d272 <am_util_stdio_vsprintf+0x526>
                    }
                }
                else
                {
                    if ( bNeg )
    d254:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d258:	2b00      	cmp	r3, #0
    d25a:	d00a      	beq.n	d272 <am_util_stdio_vsprintf+0x526>
                    {
                        if ( pcBuf )
    d25c:	9b03      	ldr	r3, [sp, #12]
    d25e:	2b00      	cmp	r3, #0
    d260:	d004      	beq.n	d26c <am_util_stdio_vsprintf+0x520>
                        {
                            *pcBuf++ = '-';
    d262:	9b03      	ldr	r3, [sp, #12]
    d264:	1c5a      	adds	r2, r3, #1
    d266:	9203      	str	r2, [sp, #12]
    d268:	222d      	movs	r2, #45	; 0x2d
    d26a:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    d26c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d26e:	3301      	adds	r3, #1
    d270:	9311      	str	r3, [sp, #68]	; 0x44
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d272:	9a03      	ldr	r2, [sp, #12]
    d274:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d278:	f7ff fb8c 	bl	c994 <uint64_to_str>
    d27c:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d27e:	9b03      	ldr	r3, [sp, #12]
    d280:	2b00      	cmp	r3, #0
    d282:	d003      	beq.n	d28c <am_util_stdio_vsprintf+0x540>
                {
                    pcBuf += iVal;
    d284:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d286:	9a03      	ldr	r2, [sp, #12]
    d288:	4413      	add	r3, r2
    d28a:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d28c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d28e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d290:	4413      	add	r3, r2
    d292:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d294:	e04c      	b.n	d330 <am_util_stdio_vsprintf+0x5e4>


            case 'f':
            case 'F':
                if ( pcBuf )
    d296:	9b03      	ldr	r3, [sp, #12]
    d298:	2b00      	cmp	r3, #0
    d29a:	d048      	beq.n	d32e <am_util_stdio_vsprintf+0x5e2>
                {
                    float fValue = va_arg(pArgs, double);
    d29c:	9b01      	ldr	r3, [sp, #4]
    d29e:	3307      	adds	r3, #7
    d2a0:	f023 0307 	bic.w	r3, r3, #7
    d2a4:	f103 0208 	add.w	r2, r3, #8
    d2a8:	9201      	str	r2, [sp, #4]
    d2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
    d2ae:	4610      	mov	r0, r2
    d2b0:	4619      	mov	r1, r3
    d2b2:	f7fe ff25 	bl	c100 <__aeabi_d2f>
    d2b6:	4603      	mov	r3, r0
    d2b8:	9306      	str	r3, [sp, #24]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    d2ba:	9b03      	ldr	r3, [sp, #12]
    d2bc:	2214      	movs	r2, #20
    d2be:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    d2c0:	990e      	ldr	r1, [sp, #56]	; 0x38
    d2c2:	9803      	ldr	r0, [sp, #12]
    d2c4:	ed9d 0a06 	vldr	s0, [sp, #24]
    d2c8:	f7ff fc42 	bl	cb50 <ftoa>
    d2cc:	900f      	str	r0, [sp, #60]	; 0x3c
                    if ( iVal < 0 )
    d2ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d2d0:	2b00      	cmp	r3, #0
    d2d2:	da14      	bge.n	d2fe <am_util_stdio_vsprintf+0x5b2>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d2d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d2d6:	f1b3 3fff 	cmp.w	r3, #4294967295
    d2da:	d102      	bne.n	d2e2 <am_util_stdio_vsprintf+0x596>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d2dc:	4b1e      	ldr	r3, [pc, #120]	; (d358 <am_util_stdio_vsprintf+0x60c>)
    d2de:	930c      	str	r3, [sp, #48]	; 0x30
    d2e0:	e008      	b.n	d2f4 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d2e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d2e4:	f113 0f02 	cmn.w	r3, #2
    d2e8:	d102      	bne.n	d2f0 <am_util_stdio_vsprintf+0x5a4>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d2ea:	4b1c      	ldr	r3, [pc, #112]	; (d35c <am_util_stdio_vsprintf+0x610>)
    d2ec:	930c      	str	r3, [sp, #48]	; 0x30
    d2ee:	e001      	b.n	d2f4 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d2f0:	4b1b      	ldr	r3, [pc, #108]	; (d360 <am_util_stdio_vsprintf+0x614>)
    d2f2:	930c      	str	r3, [sp, #48]	; 0x30
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d2f4:	9b03      	ldr	r3, [sp, #12]
    d2f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d2f8:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    d2fa:	2303      	movs	r3, #3
    d2fc:	930f      	str	r3, [sp, #60]	; 0x3c
                    }
                    ui32CharCnt += iVal;
    d2fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d300:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d302:	4413      	add	r3, r2
    d304:	9311      	str	r3, [sp, #68]	; 0x44
                    pcBuf += iVal;
    d306:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d308:	9a03      	ldr	r2, [sp, #12]
    d30a:	4413      	add	r3, r2
    d30c:	9303      	str	r3, [sp, #12]
                }
                break;
    d30e:	e00e      	b.n	d32e <am_util_stdio_vsprintf+0x5e2>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d310:	9b03      	ldr	r3, [sp, #12]
    d312:	2b00      	cmp	r3, #0
    d314:	d005      	beq.n	d322 <am_util_stdio_vsprintf+0x5d6>
                {
                    *pcBuf++ = *pcFmt;
    d316:	9b03      	ldr	r3, [sp, #12]
    d318:	1c5a      	adds	r2, r3, #1
    d31a:	9203      	str	r2, [sp, #12]
    d31c:	9a02      	ldr	r2, [sp, #8]
    d31e:	7812      	ldrb	r2, [r2, #0]
    d320:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d322:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d324:	3301      	adds	r3, #1
    d326:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d328:	e002      	b.n	d330 <am_util_stdio_vsprintf+0x5e4>
                break;
    d32a:	bf00      	nop
    d32c:	e000      	b.n	d330 <am_util_stdio_vsprintf+0x5e4>
                break;
    d32e:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d330:	9b02      	ldr	r3, [sp, #8]
    d332:	3301      	adds	r3, #1
    d334:	9302      	str	r3, [sp, #8]
    while ( *pcFmt != 0x0 )
    d336:	9b02      	ldr	r3, [sp, #8]
    d338:	781b      	ldrb	r3, [r3, #0]
    d33a:	2b00      	cmp	r3, #0
    d33c:	f47f ad11 	bne.w	cd62 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d340:	9b03      	ldr	r3, [sp, #12]
    d342:	2b00      	cmp	r3, #0
    d344:	d002      	beq.n	d34c <am_util_stdio_vsprintf+0x600>
    {
        *pcBuf = 0x0;
    d346:	9b03      	ldr	r3, [sp, #12]
    d348:	2200      	movs	r2, #0
    d34a:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d34c:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    d34e:	4618      	mov	r0, r3
    d350:	b017      	add	sp, #92	; 0x5c
    d352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d356:	bf00      	nop
    d358:	00302e30 	.word	0x00302e30
    d35c:	00232e23 	.word	0x00232e23
    d360:	003f2e3f 	.word	0x003f2e3f

0000d364 <am_util_stdio_sprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_sprintf(char *pcBuf, const char *pcFmt, ...)
{
    d364:	b40e      	push	{r1, r2, r3}
    d366:	b500      	push	{lr}
    d368:	b084      	sub	sp, #16
    d36a:	9001      	str	r0, [sp, #4]
    uint32_t ui32CharCnt;

    va_list pArgs;
    va_start(pArgs, pcFmt);
    d36c:	ab06      	add	r3, sp, #24
    d36e:	9302      	str	r3, [sp, #8]
    ui32CharCnt = am_util_stdio_vsprintf(pcBuf, pcFmt, pArgs);
    d370:	9a02      	ldr	r2, [sp, #8]
    d372:	9905      	ldr	r1, [sp, #20]
    d374:	9801      	ldr	r0, [sp, #4]
    d376:	f7ff fce9 	bl	cd4c <am_util_stdio_vsprintf>
    d37a:	9003      	str	r0, [sp, #12]
    va_end(pArgs);

    return ui32CharCnt;
    d37c:	9b03      	ldr	r3, [sp, #12]
}
    d37e:	4618      	mov	r0, r3
    d380:	b004      	add	sp, #16
    d382:	f85d eb04 	ldr.w	lr, [sp], #4
    d386:	b003      	add	sp, #12
    d388:	4770      	bx	lr
	...

0000d38c <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d38c:	b40f      	push	{r0, r1, r2, r3}
    d38e:	b500      	push	{lr}
    d390:	b083      	sub	sp, #12
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d392:	4b0c      	ldr	r3, [pc, #48]	; (d3c4 <am_util_stdio_printf+0x38>)
    d394:	681b      	ldr	r3, [r3, #0]
    d396:	2b00      	cmp	r3, #0
    d398:	d101      	bne.n	d39e <am_util_stdio_printf+0x12>
    {
        return 0;
    d39a:	2300      	movs	r3, #0
    d39c:	e00c      	b.n	d3b8 <am_util_stdio_printf+0x2c>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d39e:	ab05      	add	r3, sp, #20
    d3a0:	9300      	str	r3, [sp, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d3a2:	9a00      	ldr	r2, [sp, #0]
    d3a4:	9904      	ldr	r1, [sp, #16]
    d3a6:	4808      	ldr	r0, [pc, #32]	; (d3c8 <am_util_stdio_printf+0x3c>)
    d3a8:	f7ff fcd0 	bl	cd4c <am_util_stdio_vsprintf>
    d3ac:	9001      	str	r0, [sp, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d3ae:	4b05      	ldr	r3, [pc, #20]	; (d3c4 <am_util_stdio_printf+0x38>)
    d3b0:	681b      	ldr	r3, [r3, #0]
    d3b2:	4805      	ldr	r0, [pc, #20]	; (d3c8 <am_util_stdio_printf+0x3c>)
    d3b4:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d3b6:	9b01      	ldr	r3, [sp, #4]
}
    d3b8:	4618      	mov	r0, r3
    d3ba:	b003      	add	sp, #12
    d3bc:	f85d eb04 	ldr.w	lr, [sp], #4
    d3c0:	b004      	add	sp, #16
    d3c2:	4770      	bx	lr
    d3c4:	10001038 	.word	0x10001038
    d3c8:	1000103c 	.word	0x1000103c

0000d3cc <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    d3cc:	b508      	push	{r3, lr}
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d3ce:	4802      	ldr	r0, [pc, #8]	; (d3d8 <am_util_stdio_terminal_clear+0xc>)
    d3d0:	f7ff ffdc 	bl	d38c <am_util_stdio_printf>
}
    d3d4:	bf00      	nop
    d3d6:	bd08      	pop	{r3, pc}
    d3d8:	0000e7c8 	.word	0x0000e7c8

0000d3dc <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    d3dc:	4811      	ldr	r0, [pc, #68]	; (d424 <zero_loop+0x12>)
    d3de:	4912      	ldr	r1, [pc, #72]	; (d428 <zero_loop+0x16>)
    d3e0:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    d3e2:	f8d1 d000 	ldr.w	sp, [r1]

#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    d3e6:	4811      	ldr	r0, [pc, #68]	; (d42c <zero_loop+0x1a>)
    d3e8:	6801      	ldr	r1, [r0, #0]
    d3ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d3ee:	6001      	str	r1, [r0, #0]
    d3f0:	f3bf 8f4f 	dsb	sy
    d3f4:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    d3f8:	480d      	ldr	r0, [pc, #52]	; (d430 <zero_loop+0x1e>)
    d3fa:	490e      	ldr	r1, [pc, #56]	; (d434 <zero_loop+0x22>)
    d3fc:	4a0e      	ldr	r2, [pc, #56]	; (d438 <zero_loop+0x26>)

0000d3fe <copy_loop>:
    d3fe:	f850 3b04 	ldr.w	r3, [r0], #4
    d402:	f841 3b04 	str.w	r3, [r1], #4
    d406:	4291      	cmp	r1, r2
    d408:	dbf9      	blt.n	d3fe <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    d40a:	480c      	ldr	r0, [pc, #48]	; (d43c <zero_loop+0x2a>)
    d40c:	490c      	ldr	r1, [pc, #48]	; (d440 <zero_loop+0x2e>)
    d40e:	f04f 0200 	mov.w	r2, #0

0000d412 <zero_loop>:
    d412:	4288      	cmp	r0, r1
    d414:	bfb8      	it	lt
    d416:	f840 2b04 	strlt.w	r2, [r0], #4
    d41a:	dbfa      	blt.n	d412 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    d41c:	f7fe fec0 	bl	c1a0 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    d420:	be00      	bkpt	0x0000
}
    d422:	bf00      	nop
    d424:	e000ed08 	.word	0xe000ed08
    d428:	0000c000 	.word	0x0000c000
    d42c:	e000ed88 	.word	0xe000ed88
    d430:	0000eb04 	.word	0x0000eb04
    d434:	10001000 	.word	0x10001000
    d438:	10001038 	.word	0x10001038
    d43c:	10001038 	.word	0x10001038
    d440:	10001154 	.word	0x10001154

0000d444 <NMI_Handler>:
NMI_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d444:	e7fe      	b.n	d444 <NMI_Handler>

0000d446 <BusFault_Handler>:
HardFault_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d446:	e7fe      	b.n	d446 <BusFault_Handler>

0000d448 <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d448:	e7fe      	b.n	d448 <DebugMon_Handler>
	...

0000d44c <am_bsp_low_power_init>:
    d44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d44e:	f000 fe2f 	bl	e0b0 <am_hal_pwrctrl_low_power_init>
    d452:	f000 ff0b 	bl	e26c <am_hal_rtc_osc_disable>
    d456:	4b0b      	ldr	r3, [pc, #44]	; (d484 <am_bsp_low_power_init+0x38>)
    d458:	4f0b      	ldr	r7, [pc, #44]	; (d488 <am_bsp_low_power_init+0x3c>)
    d45a:	681e      	ldr	r6, [r3, #0]
    d45c:	2400      	movs	r4, #0
    d45e:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    d462:	4631      	mov	r1, r6
    d464:	4628      	mov	r0, r5
    d466:	f000 fb19 	bl	da9c <am_hal_gpio_pinconfig>
    d46a:	2103      	movs	r1, #3
    d46c:	4628      	mov	r0, r5
    d46e:	f000 fc4b 	bl	dd08 <am_hal_gpio_state_write>
    d472:	3401      	adds	r4, #1
    d474:	2100      	movs	r1, #0
    d476:	4628      	mov	r0, r5
    d478:	f000 fc46 	bl	dd08 <am_hal_gpio_state_write>
    d47c:	2c05      	cmp	r4, #5
    d47e:	d1ee      	bne.n	d45e <am_bsp_low_power_init+0x12>
    d480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d482:	bf00      	nop
    d484:	0000e868 	.word	0x0000e868
    d488:	10001000 	.word	0x10001000

0000d48c <am_bsp_debug_printf_disable>:
    d48c:	b538      	push	{r3, r4, r5, lr}
    d48e:	4b17      	ldr	r3, [pc, #92]	; (d4ec <am_bsp_debug_printf_disable+0x60>)
    d490:	681c      	ldr	r4, [r3, #0]
    d492:	2c01      	cmp	r4, #1
    d494:	d002      	beq.n	d49c <am_bsp_debug_printf_disable+0x10>
    d496:	2c02      	cmp	r4, #2
    d498:	d00c      	beq.n	d4b4 <am_bsp_debug_printf_disable+0x28>
    d49a:	bd38      	pop	{r3, r4, r5, pc}
    d49c:	f000 fca4 	bl	dde8 <am_hal_itm_disable>
    d4a0:	2000      	movs	r0, #0
    d4a2:	f7ff f8d7 	bl	c654 <am_util_stdio_printf_init>
    d4a6:	4b12      	ldr	r3, [pc, #72]	; (d4f0 <am_bsp_debug_printf_disable+0x64>)
    d4a8:	2029      	movs	r0, #41	; 0x29
    d4aa:	6819      	ldr	r1, [r3, #0]
    d4ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d4b0:	f000 baf4 	b.w	da9c <am_hal_gpio_pinconfig>
    d4b4:	4d0f      	ldr	r5, [pc, #60]	; (d4f4 <am_bsp_debug_printf_disable+0x68>)
    d4b6:	6828      	ldr	r0, [r5, #0]
    d4b8:	f001 f858 	bl	e56c <am_hal_uart_tx_flush>
    d4bc:	2000      	movs	r0, #0
    d4be:	f7ff f8c9 	bl	c654 <am_util_stdio_printf_init>
    d4c2:	4621      	mov	r1, r4
    d4c4:	2200      	movs	r2, #0
    d4c6:	6828      	ldr	r0, [r5, #0]
    d4c8:	f000 ffd8 	bl	e47c <am_hal_uart_power_control>
    d4cc:	6828      	ldr	r0, [r5, #0]
    d4ce:	f000 ffc1 	bl	e454 <am_hal_uart_deinitialize>
    d4d2:	4b07      	ldr	r3, [pc, #28]	; (d4f0 <am_bsp_debug_printf_disable+0x64>)
    d4d4:	681c      	ldr	r4, [r3, #0]
    d4d6:	2016      	movs	r0, #22
    d4d8:	4621      	mov	r1, r4
    d4da:	f000 fadf 	bl	da9c <am_hal_gpio_pinconfig>
    d4de:	4621      	mov	r1, r4
    d4e0:	2017      	movs	r0, #23
    d4e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d4e6:	f000 bad9 	b.w	da9c <am_hal_gpio_pinconfig>
    d4ea:	bf00      	nop
    d4ec:	10001144 	.word	0x10001144
    d4f0:	0000e864 	.word	0x0000e864
    d4f4:	10001140 	.word	0x10001140

0000d4f8 <am_bsp_itm_printf_enable>:
    d4f8:	b500      	push	{lr}
    d4fa:	4b0b      	ldr	r3, [pc, #44]	; (d528 <am_bsp_itm_printf_enable+0x30>)
    d4fc:	b087      	sub	sp, #28
    d4fe:	2201      	movs	r2, #1
    d500:	601a      	str	r2, [r3, #0]
    d502:	f000 fc4d 	bl	dda0 <am_hal_itm_enable>
    d506:	4b09      	ldr	r3, [pc, #36]	; (d52c <am_bsp_itm_printf_enable+0x34>)
    d508:	9301      	str	r3, [sp, #4]
    d50a:	a801      	add	r0, sp, #4
    d50c:	f000 ff52 	bl	e3b4 <am_hal_tpiu_enable>
    d510:	4b07      	ldr	r3, [pc, #28]	; (d530 <am_bsp_itm_printf_enable+0x38>)
    d512:	2029      	movs	r0, #41	; 0x29
    d514:	6819      	ldr	r1, [r3, #0]
    d516:	f000 fac1 	bl	da9c <am_hal_gpio_pinconfig>
    d51a:	4806      	ldr	r0, [pc, #24]	; (d534 <am_bsp_itm_printf_enable+0x3c>)
    d51c:	f7ff f89a 	bl	c654 <am_util_stdio_printf_init>
    d520:	b007      	add	sp, #28
    d522:	f85d fb04 	ldr.w	pc, [sp], #4
    d526:	bf00      	nop
    d528:	10001144 	.word	0x10001144
    d52c:	000f4240 	.word	0x000f4240
    d530:	0000e838 	.word	0x0000e838
    d534:	0000de9d 	.word	0x0000de9d

0000d538 <am_hal_cachectrl_config>:
    d538:	b530      	push	{r4, r5, lr}
    d53a:	b083      	sub	sp, #12
    d53c:	4604      	mov	r4, r0
    d53e:	f000 fc27 	bl	dd90 <am_hal_interrupt_master_disable>
    d542:	4d0e      	ldr	r5, [pc, #56]	; (d57c <am_hal_cachectrl_config+0x44>)
    d544:	9001      	str	r0, [sp, #4]
    d546:	682b      	ldr	r3, [r5, #0]
    d548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    d54c:	602b      	str	r3, [r5, #0]
    d54e:	9801      	ldr	r0, [sp, #4]
    d550:	f000 fc22 	bl	dd98 <am_hal_interrupt_master_set>
    d554:	7863      	ldrb	r3, [r4, #1]
    d556:	7822      	ldrb	r2, [r4, #0]
    d558:	78a1      	ldrb	r1, [r4, #2]
    d55a:	021b      	lsls	r3, r3, #8
    d55c:	f403 7340 	and.w	r3, r3, #768	; 0x300
    d560:	0112      	lsls	r2, r2, #4
    d562:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    d566:	b2d2      	uxtb	r2, r2
    d568:	4313      	orrs	r3, r2
    d56a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d56e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d572:	2000      	movs	r0, #0
    d574:	602b      	str	r3, [r5, #0]
    d576:	b003      	add	sp, #12
    d578:	bd30      	pop	{r4, r5, pc}
    d57a:	bf00      	nop
    d57c:	40018000 	.word	0x40018000

0000d580 <am_hal_cachectrl_enable>:
    d580:	4a03      	ldr	r2, [pc, #12]	; (d590 <am_hal_cachectrl_enable+0x10>)
    d582:	6813      	ldr	r3, [r2, #0]
    d584:	f043 0301 	orr.w	r3, r3, #1
    d588:	2000      	movs	r0, #0
    d58a:	6013      	str	r3, [r2, #0]
    d58c:	4770      	bx	lr
    d58e:	bf00      	nop
    d590:	40018000 	.word	0x40018000

0000d594 <am_hal_cachectrl_control>:
    d594:	b510      	push	{r4, lr}
    d596:	3801      	subs	r0, #1
    d598:	b08e      	sub	sp, #56	; 0x38
    d59a:	2810      	cmp	r0, #16
    d59c:	f200 815e 	bhi.w	d85c <am_hal_cachectrl_control+0x2c8>
    d5a0:	e8df f010 	tbh	[pc, r0, lsl #1]
    d5a4:	00360018 	.word	0x00360018
    d5a8:	0040003d 	.word	0x0040003d
    d5ac:	00450043 	.word	0x00450043
    d5b0:	0011001a 	.word	0x0011001a
    d5b4:	00540047 	.word	0x00540047
    d5b8:	009a0061 	.word	0x009a0061
    d5bc:	010c00d3 	.word	0x010c00d3
    d5c0:	013f0126 	.word	0x013f0126
    d5c4:	001d      	.short	0x001d
    d5c6:	f44f 7300 	mov.w	r3, #512	; 0x200
    d5ca:	4aac      	ldr	r2, [pc, #688]	; (d87c <am_hal_cachectrl_control+0x2e8>)
    d5cc:	2000      	movs	r0, #0
    d5ce:	6093      	str	r3, [r2, #8]
    d5d0:	b00e      	add	sp, #56	; 0x38
    d5d2:	bd10      	pop	{r4, pc}
    d5d4:	2301      	movs	r3, #1
    d5d6:	e7f8      	b.n	d5ca <am_hal_cachectrl_control+0x36>
    d5d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    d5dc:	e7f5      	b.n	d5ca <am_hal_cachectrl_control+0x36>
    d5de:	2900      	cmp	r1, #0
    d5e0:	f000 813c 	beq.w	d85c <am_hal_cachectrl_control+0x2c8>
    d5e4:	684a      	ldr	r2, [r1, #4]
    d5e6:	48a6      	ldr	r0, [pc, #664]	; (d880 <am_hal_cachectrl_control+0x2ec>)
    d5e8:	4202      	tst	r2, r0
    d5ea:	f040 8137 	bne.w	d85c <am_hal_cachectrl_control+0x2c8>
    d5ee:	688b      	ldr	r3, [r1, #8]
    d5f0:	4018      	ands	r0, r3
    d5f2:	f040 8133 	bne.w	d85c <am_hal_cachectrl_control+0x2c8>
    d5f6:	780c      	ldrb	r4, [r1, #0]
    d5f8:	2c00      	cmp	r4, #0
    d5fa:	f040 8133 	bne.w	d864 <am_hal_cachectrl_control+0x2d0>
    d5fe:	4c9f      	ldr	r4, [pc, #636]	; (d87c <am_hal_cachectrl_control+0x2e8>)
    d600:	7849      	ldrb	r1, [r1, #1]
    d602:	6122      	str	r2, [r4, #16]
    d604:	6163      	str	r3, [r4, #20]
    d606:	6823      	ldr	r3, [r4, #0]
    d608:	f361 0382 	bfi	r3, r1, #2, #1
    d60c:	6023      	str	r3, [r4, #0]
    d60e:	e7df      	b.n	d5d0 <am_hal_cachectrl_control+0x3c>
    d610:	4b9a      	ldr	r3, [pc, #616]	; (d87c <am_hal_cachectrl_control+0x2e8>)
    d612:	681b      	ldr	r3, [r3, #0]
    d614:	01db      	lsls	r3, r3, #7
    d616:	f140 811f 	bpl.w	d858 <am_hal_cachectrl_control+0x2c4>
    d61a:	2302      	movs	r3, #2
    d61c:	e7d5      	b.n	d5ca <am_hal_cachectrl_control+0x36>
    d61e:	f44f 6388 	mov.w	r3, #1088	; 0x440
    d622:	e7d2      	b.n	d5ca <am_hal_cachectrl_control+0x36>
    d624:	f44f 7308 	mov.w	r3, #544	; 0x220
    d628:	e7cf      	b.n	d5ca <am_hal_cachectrl_control+0x36>
    d62a:	2340      	movs	r3, #64	; 0x40
    d62c:	e7cd      	b.n	d5ca <am_hal_cachectrl_control+0x36>
    d62e:	2320      	movs	r3, #32
    d630:	e7cb      	b.n	d5ca <am_hal_cachectrl_control+0x36>
    d632:	f000 fbad 	bl	dd90 <am_hal_interrupt_master_disable>
    d636:	4a91      	ldr	r2, [pc, #580]	; (d87c <am_hal_cachectrl_control+0x2e8>)
    d638:	9000      	str	r0, [sp, #0]
    d63a:	6813      	ldr	r3, [r2, #0]
    d63c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    d640:	6013      	str	r3, [r2, #0]
    d642:	9800      	ldr	r0, [sp, #0]
    d644:	f000 fba8 	bl	dd98 <am_hal_interrupt_master_set>
    d648:	2000      	movs	r0, #0
    d64a:	e7c1      	b.n	d5d0 <am_hal_cachectrl_control+0x3c>
    d64c:	f000 fba0 	bl	dd90 <am_hal_interrupt_master_disable>
    d650:	4a8a      	ldr	r2, [pc, #552]	; (d87c <am_hal_cachectrl_control+0x2e8>)
    d652:	9001      	str	r0, [sp, #4]
    d654:	6813      	ldr	r3, [r2, #0]
    d656:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    d65a:	6013      	str	r3, [r2, #0]
    d65c:	9801      	ldr	r0, [sp, #4]
    d65e:	f000 fb9b 	bl	dd98 <am_hal_interrupt_master_set>
    d662:	2000      	movs	r0, #0
    d664:	e7b4      	b.n	d5d0 <am_hal_cachectrl_control+0x3c>
    d666:	f000 fb93 	bl	dd90 <am_hal_interrupt_master_disable>
    d66a:	4603      	mov	r3, r0
    d66c:	4885      	ldr	r0, [pc, #532]	; (d884 <am_hal_cachectrl_control+0x2f0>)
    d66e:	9302      	str	r3, [sp, #8]
    d670:	f000 fa0a 	bl	da88 <am_hal_flash_load_ui32>
    d674:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d678:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d67c:	4881      	ldr	r0, [pc, #516]	; (d884 <am_hal_cachectrl_control+0x2f0>)
    d67e:	f000 fa07 	bl	da90 <am_hal_flash_store_ui32>
    d682:	9802      	ldr	r0, [sp, #8]
    d684:	f000 fb88 	bl	dd98 <am_hal_interrupt_master_set>
    d688:	f000 fb82 	bl	dd90 <am_hal_interrupt_master_disable>
    d68c:	4603      	mov	r3, r0
    d68e:	487d      	ldr	r0, [pc, #500]	; (d884 <am_hal_cachectrl_control+0x2f0>)
    d690:	9303      	str	r3, [sp, #12]
    d692:	f000 f9f9 	bl	da88 <am_hal_flash_load_ui32>
    d696:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d69a:	f440 61ee 	orr.w	r1, r0, #1904	; 0x770
    d69e:	4879      	ldr	r0, [pc, #484]	; (d884 <am_hal_cachectrl_control+0x2f0>)
    d6a0:	f000 f9f6 	bl	da90 <am_hal_flash_store_ui32>
    d6a4:	9803      	ldr	r0, [sp, #12]
    d6a6:	f000 fb77 	bl	dd98 <am_hal_interrupt_master_set>
    d6aa:	f000 fb71 	bl	dd90 <am_hal_interrupt_master_disable>
    d6ae:	4603      	mov	r3, r0
    d6b0:	4874      	ldr	r0, [pc, #464]	; (d884 <am_hal_cachectrl_control+0x2f0>)
    d6b2:	9304      	str	r3, [sp, #16]
    d6b4:	f000 f9e8 	bl	da88 <am_hal_flash_load_ui32>
    d6b8:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d6bc:	f020 000f 	bic.w	r0, r0, #15
    d6c0:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d6c4:	f041 0103 	orr.w	r1, r1, #3
    d6c8:	486e      	ldr	r0, [pc, #440]	; (d884 <am_hal_cachectrl_control+0x2f0>)
    d6ca:	f000 f9e1 	bl	da90 <am_hal_flash_store_ui32>
    d6ce:	9804      	ldr	r0, [sp, #16]
    d6d0:	f000 fb62 	bl	dd98 <am_hal_interrupt_master_set>
    d6d4:	2000      	movs	r0, #0
    d6d6:	e77b      	b.n	d5d0 <am_hal_cachectrl_control+0x3c>
    d6d8:	f000 fb5a 	bl	dd90 <am_hal_interrupt_master_disable>
    d6dc:	4603      	mov	r3, r0
    d6de:	4869      	ldr	r0, [pc, #420]	; (d884 <am_hal_cachectrl_control+0x2f0>)
    d6e0:	9305      	str	r3, [sp, #20]
    d6e2:	f000 f9d1 	bl	da88 <am_hal_flash_load_ui32>
    d6e6:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d6ea:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    d6ee:	4865      	ldr	r0, [pc, #404]	; (d884 <am_hal_cachectrl_control+0x2f0>)
    d6f0:	f000 f9ce 	bl	da90 <am_hal_flash_store_ui32>
    d6f4:	9805      	ldr	r0, [sp, #20]
    d6f6:	f000 fb4f 	bl	dd98 <am_hal_interrupt_master_set>
    d6fa:	f000 fb49 	bl	dd90 <am_hal_interrupt_master_disable>
    d6fe:	4603      	mov	r3, r0
    d700:	4860      	ldr	r0, [pc, #384]	; (d884 <am_hal_cachectrl_control+0x2f0>)
    d702:	9306      	str	r3, [sp, #24]
    d704:	f000 f9c0 	bl	da88 <am_hal_flash_load_ui32>
    d708:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d70c:	f440 61ea 	orr.w	r1, r0, #1872	; 0x750
    d710:	485c      	ldr	r0, [pc, #368]	; (d884 <am_hal_cachectrl_control+0x2f0>)
    d712:	f000 f9bd 	bl	da90 <am_hal_flash_store_ui32>
    d716:	9806      	ldr	r0, [sp, #24]
    d718:	f000 fb3e 	bl	dd98 <am_hal_interrupt_master_set>
    d71c:	f000 fb38 	bl	dd90 <am_hal_interrupt_master_disable>
    d720:	4603      	mov	r3, r0
    d722:	4858      	ldr	r0, [pc, #352]	; (d884 <am_hal_cachectrl_control+0x2f0>)
    d724:	9307      	str	r3, [sp, #28]
    d726:	f000 f9af 	bl	da88 <am_hal_flash_load_ui32>
    d72a:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d72e:	f020 000f 	bic.w	r0, r0, #15
    d732:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d736:	f041 0101 	orr.w	r1, r1, #1
    d73a:	4852      	ldr	r0, [pc, #328]	; (d884 <am_hal_cachectrl_control+0x2f0>)
    d73c:	f000 f9a8 	bl	da90 <am_hal_flash_store_ui32>
    d740:	9807      	ldr	r0, [sp, #28]
    d742:	f000 fb29 	bl	dd98 <am_hal_interrupt_master_set>
    d746:	2000      	movs	r0, #0
    d748:	e742      	b.n	d5d0 <am_hal_cachectrl_control+0x3c>
    d74a:	f000 fb21 	bl	dd90 <am_hal_interrupt_master_disable>
    d74e:	4603      	mov	r3, r0
    d750:	484c      	ldr	r0, [pc, #304]	; (d884 <am_hal_cachectrl_control+0x2f0>)
    d752:	9308      	str	r3, [sp, #32]
    d754:	f000 f998 	bl	da88 <am_hal_flash_load_ui32>
    d758:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d75c:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    d760:	4848      	ldr	r0, [pc, #288]	; (d884 <am_hal_cachectrl_control+0x2f0>)
    d762:	f000 f995 	bl	da90 <am_hal_flash_store_ui32>
    d766:	9808      	ldr	r0, [sp, #32]
    d768:	f000 fb16 	bl	dd98 <am_hal_interrupt_master_set>
    d76c:	f000 fb10 	bl	dd90 <am_hal_interrupt_master_disable>
    d770:	4603      	mov	r3, r0
    d772:	4844      	ldr	r0, [pc, #272]	; (d884 <am_hal_cachectrl_control+0x2f0>)
    d774:	9309      	str	r3, [sp, #36]	; 0x24
    d776:	f000 f987 	bl	da88 <am_hal_flash_load_ui32>
    d77a:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d77e:	f440 61ec 	orr.w	r1, r0, #1888	; 0x760
    d782:	4840      	ldr	r0, [pc, #256]	; (d884 <am_hal_cachectrl_control+0x2f0>)
    d784:	f000 f984 	bl	da90 <am_hal_flash_store_ui32>
    d788:	9809      	ldr	r0, [sp, #36]	; 0x24
    d78a:	f000 fb05 	bl	dd98 <am_hal_interrupt_master_set>
    d78e:	f000 faff 	bl	dd90 <am_hal_interrupt_master_disable>
    d792:	4603      	mov	r3, r0
    d794:	483b      	ldr	r0, [pc, #236]	; (d884 <am_hal_cachectrl_control+0x2f0>)
    d796:	930a      	str	r3, [sp, #40]	; 0x28
    d798:	f000 f976 	bl	da88 <am_hal_flash_load_ui32>
    d79c:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d7a0:	f020 000f 	bic.w	r0, r0, #15
    d7a4:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d7a8:	f041 0101 	orr.w	r1, r1, #1
    d7ac:	4835      	ldr	r0, [pc, #212]	; (d884 <am_hal_cachectrl_control+0x2f0>)
    d7ae:	f000 f96f 	bl	da90 <am_hal_flash_store_ui32>
    d7b2:	980a      	ldr	r0, [sp, #40]	; 0x28
    d7b4:	f000 faf0 	bl	dd98 <am_hal_interrupt_master_set>
    d7b8:	2000      	movs	r0, #0
    d7ba:	e709      	b.n	d5d0 <am_hal_cachectrl_control+0x3c>
    d7bc:	2900      	cmp	r1, #0
    d7be:	d04d      	beq.n	d85c <am_hal_cachectrl_control+0x2c8>
    d7c0:	680c      	ldr	r4, [r1, #0]
    d7c2:	2c03      	cmp	r4, #3
    d7c4:	d84c      	bhi.n	d860 <am_hal_cachectrl_control+0x2cc>
    d7c6:	f000 fae3 	bl	dd90 <am_hal_interrupt_master_disable>
    d7ca:	4603      	mov	r3, r0
    d7cc:	482d      	ldr	r0, [pc, #180]	; (d884 <am_hal_cachectrl_control+0x2f0>)
    d7ce:	930b      	str	r3, [sp, #44]	; 0x2c
    d7d0:	f000 f95a 	bl	da88 <am_hal_flash_load_ui32>
    d7d4:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d7d8:	ea40 3104 	orr.w	r1, r0, r4, lsl #12
    d7dc:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d7e0:	4828      	ldr	r0, [pc, #160]	; (d884 <am_hal_cachectrl_control+0x2f0>)
    d7e2:	f000 f955 	bl	da90 <am_hal_flash_store_ui32>
    d7e6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d7e8:	f000 fad6 	bl	dd98 <am_hal_interrupt_master_set>
    d7ec:	2000      	movs	r0, #0
    d7ee:	e6ef      	b.n	d5d0 <am_hal_cachectrl_control+0x3c>
    d7f0:	b3a1      	cbz	r1, d85c <am_hal_cachectrl_control+0x2c8>
    d7f2:	680c      	ldr	r4, [r1, #0]
    d7f4:	2c07      	cmp	r4, #7
    d7f6:	d833      	bhi.n	d860 <am_hal_cachectrl_control+0x2cc>
    d7f8:	f000 faca 	bl	dd90 <am_hal_interrupt_master_disable>
    d7fc:	4603      	mov	r3, r0
    d7fe:	4821      	ldr	r0, [pc, #132]	; (d884 <am_hal_cachectrl_control+0x2f0>)
    d800:	930c      	str	r3, [sp, #48]	; 0x30
    d802:	f000 f941 	bl	da88 <am_hal_flash_load_ui32>
    d806:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d80a:	ea40 1104 	orr.w	r1, r0, r4, lsl #4
    d80e:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d812:	481c      	ldr	r0, [pc, #112]	; (d884 <am_hal_cachectrl_control+0x2f0>)
    d814:	f000 f93c 	bl	da90 <am_hal_flash_store_ui32>
    d818:	980c      	ldr	r0, [sp, #48]	; 0x30
    d81a:	f000 fabd 	bl	dd98 <am_hal_interrupt_master_set>
    d81e:	2000      	movs	r0, #0
    d820:	e6d6      	b.n	d5d0 <am_hal_cachectrl_control+0x3c>
    d822:	b1d9      	cbz	r1, d85c <am_hal_cachectrl_control+0x2c8>
    d824:	680c      	ldr	r4, [r1, #0]
    d826:	2c0f      	cmp	r4, #15
    d828:	d81a      	bhi.n	d860 <am_hal_cachectrl_control+0x2cc>
    d82a:	f000 fab1 	bl	dd90 <am_hal_interrupt_master_disable>
    d82e:	4603      	mov	r3, r0
    d830:	4814      	ldr	r0, [pc, #80]	; (d884 <am_hal_cachectrl_control+0x2f0>)
    d832:	930d      	str	r3, [sp, #52]	; 0x34
    d834:	f000 f928 	bl	da88 <am_hal_flash_load_ui32>
    d838:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d83c:	f020 000f 	bic.w	r0, r0, #15
    d840:	ea40 0104 	orr.w	r1, r0, r4
    d844:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d848:	480e      	ldr	r0, [pc, #56]	; (d884 <am_hal_cachectrl_control+0x2f0>)
    d84a:	f000 f921 	bl	da90 <am_hal_flash_store_ui32>
    d84e:	980d      	ldr	r0, [sp, #52]	; 0x34
    d850:	f000 faa2 	bl	dd98 <am_hal_interrupt_master_set>
    d854:	2000      	movs	r0, #0
    d856:	e6bb      	b.n	d5d0 <am_hal_cachectrl_control+0x3c>
    d858:	2007      	movs	r0, #7
    d85a:	e6b9      	b.n	d5d0 <am_hal_cachectrl_control+0x3c>
    d85c:	2006      	movs	r0, #6
    d85e:	e6b7      	b.n	d5d0 <am_hal_cachectrl_control+0x3c>
    d860:	2001      	movs	r0, #1
    d862:	e6b5      	b.n	d5d0 <am_hal_cachectrl_control+0x3c>
    d864:	2c01      	cmp	r4, #1
    d866:	d1f9      	bne.n	d85c <am_hal_cachectrl_control+0x2c8>
    d868:	4c04      	ldr	r4, [pc, #16]	; (d87c <am_hal_cachectrl_control+0x2e8>)
    d86a:	7849      	ldrb	r1, [r1, #1]
    d86c:	61a2      	str	r2, [r4, #24]
    d86e:	61e3      	str	r3, [r4, #28]
    d870:	6823      	ldr	r3, [r4, #0]
    d872:	f361 03c3 	bfi	r3, r1, #3, #1
    d876:	6023      	str	r3, [r4, #0]
    d878:	e6aa      	b.n	d5d0 <am_hal_cachectrl_control+0x3c>
    d87a:	bf00      	nop
    d87c:	40018000 	.word	0x40018000
    d880:	f800000f 	.word	0xf800000f
    d884:	40018004 	.word	0x40018004

0000d888 <am_hal_clkgen_control>:
    d888:	4b49      	ldr	r3, [pc, #292]	; (d9b0 <am_hal_clkgen_control+0x128>)
    d88a:	681a      	ldr	r2, [r3, #0]
    d88c:	b912      	cbnz	r2, d894 <am_hal_clkgen_control+0xc>
    d88e:	4a49      	ldr	r2, [pc, #292]	; (d9b4 <am_hal_clkgen_control+0x12c>)
    d890:	6812      	ldr	r2, [r2, #0]
    d892:	601a      	str	r2, [r3, #0]
    d894:	2809      	cmp	r0, #9
    d896:	f200 8089 	bhi.w	d9ac <am_hal_clkgen_control+0x124>
    d89a:	e8df f000 	tbb	[pc, r0]
    d89e:	160d      	.short	0x160d
    d8a0:	423a261e 	.word	0x423a261e
    d8a4:	055c544c 	.word	0x055c544c
    d8a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d8ac:	2000      	movs	r0, #0
    d8ae:	6a1a      	ldr	r2, [r3, #32]
    d8b0:	f36f 0200 	bfc	r2, #0, #1
    d8b4:	621a      	str	r2, [r3, #32]
    d8b6:	4770      	bx	lr
    d8b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d8bc:	2200      	movs	r2, #0
    d8be:	2147      	movs	r1, #71	; 0x47
    d8c0:	6159      	str	r1, [r3, #20]
    d8c2:	4610      	mov	r0, r2
    d8c4:	619a      	str	r2, [r3, #24]
    d8c6:	615a      	str	r2, [r3, #20]
    d8c8:	4770      	bx	lr
    d8ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d8ce:	2000      	movs	r0, #0
    d8d0:	899a      	ldrh	r2, [r3, #12]
    d8d2:	f36f 0200 	bfc	r2, #0, #1
    d8d6:	819a      	strh	r2, [r3, #12]
    d8d8:	4770      	bx	lr
    d8da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d8de:	2000      	movs	r0, #0
    d8e0:	899a      	ldrh	r2, [r3, #12]
    d8e2:	f36f 0241 	bfc	r2, #1, #1
    d8e6:	819a      	strh	r2, [r3, #12]
    d8e8:	4770      	bx	lr
    d8ea:	4a33      	ldr	r2, [pc, #204]	; (d9b8 <am_hal_clkgen_control+0x130>)
    d8ec:	68d3      	ldr	r3, [r2, #12]
    d8ee:	b2db      	uxtb	r3, r3
    d8f0:	2b21      	cmp	r3, #33	; 0x21
    d8f2:	d106      	bne.n	d902 <am_hal_clkgen_control+0x7a>
    d8f4:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    d8f8:	2101      	movs	r1, #1
    d8fa:	f361 2309 	bfi	r3, r1, #8, #2
    d8fe:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    d902:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d906:	2000      	movs	r0, #0
    d908:	8993      	ldrh	r3, [r2, #12]
    d90a:	f043 0301 	orr.w	r3, r3, #1
    d90e:	8193      	strh	r3, [r2, #12]
    d910:	4770      	bx	lr
    d912:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d916:	2000      	movs	r0, #0
    d918:	8993      	ldrh	r3, [r2, #12]
    d91a:	f043 0302 	orr.w	r3, r3, #2
    d91e:	8193      	strh	r3, [r2, #12]
    d920:	4770      	bx	lr
    d922:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d926:	2200      	movs	r2, #0
    d928:	2047      	movs	r0, #71	; 0x47
    d92a:	2101      	movs	r1, #1
    d92c:	6158      	str	r0, [r3, #20]
    d92e:	6199      	str	r1, [r3, #24]
    d930:	4610      	mov	r0, r2
    d932:	615a      	str	r2, [r3, #20]
    d934:	4770      	bx	lr
    d936:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d93a:	2000      	movs	r0, #0
    d93c:	899a      	ldrh	r2, [r3, #12]
    d93e:	f36f 12c7 	bfc	r2, #7, #1
    d942:	819a      	strh	r2, [r3, #12]
    d944:	4770      	bx	lr
    d946:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d94a:	2000      	movs	r0, #0
    d94c:	8993      	ldrh	r3, [r2, #12]
    d94e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d952:	8193      	strh	r3, [r2, #12]
    d954:	4770      	bx	lr
    d956:	4a18      	ldr	r2, [pc, #96]	; (d9b8 <am_hal_clkgen_control+0x130>)
    d958:	68d3      	ldr	r3, [r2, #12]
    d95a:	b2db      	uxtb	r3, r3
    d95c:	2b21      	cmp	r3, #33	; 0x21
    d95e:	d00a      	beq.n	d976 <am_hal_clkgen_control+0xee>
    d960:	b139      	cbz	r1, d972 <am_hal_clkgen_control+0xea>
    d962:	680b      	ldr	r3, [r1, #0]
    d964:	f043 0301 	orr.w	r3, r3, #1
    d968:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d96c:	2000      	movs	r0, #0
    d96e:	6213      	str	r3, [r2, #32]
    d970:	4770      	bx	lr
    d972:	4b12      	ldr	r3, [pc, #72]	; (d9bc <am_hal_clkgen_control+0x134>)
    d974:	e7f8      	b.n	d968 <am_hal_clkgen_control+0xe0>
    d976:	b500      	push	{lr}
    d978:	b083      	sub	sp, #12
    d97a:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    d97e:	9101      	str	r1, [sp, #4]
    d980:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    d984:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    d988:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    d98c:	f000 f836 	bl	d9fc <am_hal_flash_delay>
    d990:	9901      	ldr	r1, [sp, #4]
    d992:	b149      	cbz	r1, d9a8 <am_hal_clkgen_control+0x120>
    d994:	680b      	ldr	r3, [r1, #0]
    d996:	f043 0301 	orr.w	r3, r3, #1
    d99a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d99e:	2000      	movs	r0, #0
    d9a0:	6213      	str	r3, [r2, #32]
    d9a2:	b003      	add	sp, #12
    d9a4:	f85d fb04 	ldr.w	pc, [sp], #4
    d9a8:	4b04      	ldr	r3, [pc, #16]	; (d9bc <am_hal_clkgen_control+0x134>)
    d9aa:	e7f6      	b.n	d99a <am_hal_clkgen_control+0x112>
    d9ac:	2006      	movs	r0, #6
    d9ae:	4770      	bx	lr
    d9b0:	10001148 	.word	0x10001148
    d9b4:	4ffff000 	.word	0x4ffff000
    d9b8:	40020000 	.word	0x40020000
    d9bc:	0025b801 	.word	0x0025b801

0000d9c0 <am_hal_clkgen_status_get>:
    d9c0:	b1b0      	cbz	r0, d9f0 <am_hal_clkgen_status_get+0x30>
    d9c2:	b410      	push	{r4}
    d9c4:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    d9c8:	4603      	mov	r3, r0
    d9ca:	698c      	ldr	r4, [r1, #24]
    d9cc:	4809      	ldr	r0, [pc, #36]	; (d9f4 <am_hal_clkgen_status_get+0x34>)
    d9ce:	4a0a      	ldr	r2, [pc, #40]	; (d9f8 <am_hal_clkgen_status_get+0x38>)
    d9d0:	f014 0f01 	tst.w	r4, #1
    d9d4:	bf08      	it	eq
    d9d6:	4602      	moveq	r2, r0
    d9d8:	601a      	str	r2, [r3, #0]
    d9da:	69ca      	ldr	r2, [r1, #28]
    d9dc:	f85d 4b04 	ldr.w	r4, [sp], #4
    d9e0:	f002 0101 	and.w	r1, r2, #1
    d9e4:	f3c2 0240 	ubfx	r2, r2, #1, #1
    d9e8:	2000      	movs	r0, #0
    d9ea:	6059      	str	r1, [r3, #4]
    d9ec:	721a      	strb	r2, [r3, #8]
    d9ee:	4770      	bx	lr
    d9f0:	2006      	movs	r0, #6
    d9f2:	4770      	bx	lr
    d9f4:	02dc6c00 	.word	0x02dc6c00
    d9f8:	016e3600 	.word	0x016e3600

0000d9fc <am_hal_flash_delay>:
    d9fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    da00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    da02:	075b      	lsls	r3, r3, #29
    da04:	bf46      	itte	mi
    da06:	0040      	lslmi	r0, r0, #1
    da08:	230e      	movmi	r3, #14
    da0a:	230b      	movpl	r3, #11
    da0c:	4298      	cmp	r0, r3
    da0e:	d902      	bls.n	da16 <am_hal_flash_delay+0x1a>
    da10:	4a01      	ldr	r2, [pc, #4]	; (da18 <am_hal_flash_delay+0x1c>)
    da12:	1ac0      	subs	r0, r0, r3
    da14:	4710      	bx	r2
    da16:	4770      	bx	lr
    da18:	0800009d 	.word	0x0800009d

0000da1c <am_hal_flash_delay_status_check>:
    da1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    da20:	f89d c020 	ldrb.w	ip, [sp, #32]
    da24:	f8df 805c 	ldr.w	r8, [pc, #92]	; da84 <am_hal_flash_delay_status_check+0x68>
    da28:	4604      	mov	r4, r0
    da2a:	460d      	mov	r5, r1
    da2c:	4616      	mov	r6, r2
    da2e:	461f      	mov	r7, r3
    da30:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    da34:	f1bc 0f00 	cmp.w	ip, #0
    da38:	d00a      	beq.n	da50 <am_hal_flash_delay_status_check+0x34>
    da3a:	e01a      	b.n	da72 <am_hal_flash_delay_status_check+0x56>
    da3c:	b1f4      	cbz	r4, da7c <am_hal_flash_delay_status_check+0x60>
    da3e:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    da42:	f013 0f04 	tst.w	r3, #4
    da46:	bf0c      	ite	eq
    da48:	2005      	moveq	r0, #5
    da4a:	2012      	movne	r0, #18
    da4c:	3c01      	subs	r4, #1
    da4e:	47c0      	blx	r8
    da50:	6828      	ldr	r0, [r5, #0]
    da52:	4030      	ands	r0, r6
    da54:	42b8      	cmp	r0, r7
    da56:	d0f1      	beq.n	da3c <am_hal_flash_delay_status_check+0x20>
    da58:	2000      	movs	r0, #0
    da5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    da5e:	b16c      	cbz	r4, da7c <am_hal_flash_delay_status_check+0x60>
    da60:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    da64:	f013 0f04 	tst.w	r3, #4
    da68:	bf0c      	ite	eq
    da6a:	2005      	moveq	r0, #5
    da6c:	2012      	movne	r0, #18
    da6e:	3c01      	subs	r4, #1
    da70:	47c0      	blx	r8
    da72:	6828      	ldr	r0, [r5, #0]
    da74:	4030      	ands	r0, r6
    da76:	42b8      	cmp	r0, r7
    da78:	d1f1      	bne.n	da5e <am_hal_flash_delay_status_check+0x42>
    da7a:	e7ed      	b.n	da58 <am_hal_flash_delay_status_check+0x3c>
    da7c:	2004      	movs	r0, #4
    da7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    da82:	bf00      	nop
    da84:	0800009d 	.word	0x0800009d

0000da88 <am_hal_flash_load_ui32>:
    da88:	4b00      	ldr	r3, [pc, #0]	; (da8c <am_hal_flash_load_ui32+0x4>)
    da8a:	4718      	bx	r3
    da8c:	08000075 	.word	0x08000075

0000da90 <am_hal_flash_store_ui32>:
    da90:	4b01      	ldr	r3, [pc, #4]	; (da98 <am_hal_flash_store_ui32+0x8>)
    da92:	f043 0301 	orr.w	r3, r3, #1
    da96:	4718      	bx	r3
    da98:	10001028 	.word	0x10001028

0000da9c <am_hal_gpio_pinconfig>:
    da9c:	2831      	cmp	r0, #49	; 0x31
    da9e:	f200 80c3 	bhi.w	dc28 <am_hal_gpio_pinconfig+0x18c>
    daa2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    daa6:	4604      	mov	r4, r0
    daa8:	f011 07e0 	ands.w	r7, r1, #224	; 0xe0
    daac:	f001 0007 	and.w	r0, r1, #7
    dab0:	b085      	sub	sp, #20
    dab2:	f3c1 03c1 	ubfx	r3, r1, #3, #2
    dab6:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    daba:	d00f      	beq.n	dadc <am_hal_gpio_pinconfig+0x40>
    dabc:	f3c1 1642 	ubfx	r6, r1, #5, #3
    dac0:	1db5      	adds	r5, r6, #6
    dac2:	f005 0507 	and.w	r5, r5, #7
    dac6:	2d03      	cmp	r5, #3
    dac8:	f042 0201 	orr.w	r2, r2, #1
    dacc:	f240 80ae 	bls.w	dc2c <am_hal_gpio_pinconfig+0x190>
    dad0:	2fc0      	cmp	r7, #192	; 0xc0
    dad2:	f000 80e1 	beq.w	dc98 <am_hal_gpio_pinconfig+0x1fc>
    dad6:	2f20      	cmp	r7, #32
    dad8:	f000 80e3 	beq.w	dca2 <am_hal_gpio_pinconfig+0x206>
    dadc:	b163      	cbz	r3, daf8 <am_hal_gpio_pinconfig+0x5c>
    dade:	2b01      	cmp	r3, #1
    dae0:	f000 80d3 	beq.w	dc8a <am_hal_gpio_pinconfig+0x1ee>
    dae4:	2b02      	cmp	r3, #2
    dae6:	f040 80c9 	bne.w	dc7c <am_hal_gpio_pinconfig+0x1e0>
    daea:	4b79      	ldr	r3, [pc, #484]	; (dcd0 <am_hal_gpio_pinconfig+0x234>)
    daec:	5d1b      	ldrb	r3, [r3, r4]
    daee:	075b      	lsls	r3, r3, #29
    daf0:	f140 80c4 	bpl.w	dc7c <am_hal_gpio_pinconfig+0x1e0>
    daf4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    daf8:	4b76      	ldr	r3, [pc, #472]	; (dcd4 <am_hal_gpio_pinconfig+0x238>)
    dafa:	5d1b      	ldrb	r3, [r3, r4]
    dafc:	4103      	asrs	r3, r0
    dafe:	005b      	lsls	r3, r3, #1
    db00:	f003 0302 	and.w	r3, r3, #2
    db04:	4313      	orrs	r3, r2
    db06:	4a74      	ldr	r2, [pc, #464]	; (dcd8 <am_hal_gpio_pinconfig+0x23c>)
    db08:	5d12      	ldrb	r2, [r2, r4]
    db0a:	4282      	cmp	r2, r0
    db0c:	f000 8099 	beq.w	dc42 <am_hal_gpio_pinconfig+0x1a6>
    db10:	f3c1 3000 	ubfx	r0, r1, #12, #1
    db14:	f3c1 2581 	ubfx	r5, r1, #10, #2
    db18:	f3c1 3280 	ubfx	r2, r1, #14, #1
    db1c:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    db20:	0a88      	lsrs	r0, r1, #10
    db22:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    db26:	f000 0008 	and.w	r0, r0, #8
    db2a:	4302      	orrs	r2, r0
    db2c:	f3c1 2007 	ubfx	r0, r1, #8, #8
    db30:	f000 050c 	and.w	r5, r0, #12
    db34:	2d04      	cmp	r5, #4
    db36:	f000 80a5 	beq.w	dc84 <am_hal_gpio_pinconfig+0x1e8>
    db3a:	4d68      	ldr	r5, [pc, #416]	; (dcdc <am_hal_gpio_pinconfig+0x240>)
    db3c:	682d      	ldr	r5, [r5, #0]
    db3e:	eba1 0805 	sub.w	r8, r1, r5
    db42:	fab8 f888 	clz	r8, r8
    db46:	ea4f 1858 	mov.w	r8, r8, lsr #5
    db4a:	f010 0f60 	tst.w	r0, #96	; 0x60
    db4e:	bf04      	itt	eq
    db50:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
    db54:	f360 0200 	bfieq	r2, r0, #0, #1
    db58:	00a0      	lsls	r0, r4, #2
    db5a:	f3c1 2101 	ubfx	r1, r1, #8, #2
    db5e:	2902      	cmp	r1, #2
    db60:	d05c      	beq.n	dc1c <am_hal_gpio_pinconfig+0x180>
    db62:	2903      	cmp	r1, #3
    db64:	d058      	beq.n	dc18 <am_hal_gpio_pinconfig+0x17c>
    db66:	2901      	cmp	r1, #1
    db68:	ea4f 01c4 	mov.w	r1, r4, lsl #3
    db6c:	bf08      	it	eq
    db6e:	f043 0304 	orreq.w	r3, r3, #4
    db72:	f001 0118 	and.w	r1, r1, #24
    db76:	2700      	movs	r7, #0
    db78:	f000 001c 	and.w	r0, r0, #28
    db7c:	fa02 f600 	lsl.w	r6, r2, r0
    db80:	220f      	movs	r2, #15
    db82:	4082      	lsls	r2, r0
    db84:	43d2      	mvns	r2, r2
    db86:	f04f 09ff 	mov.w	r9, #255	; 0xff
    db8a:	fa03 f501 	lsl.w	r5, r3, r1
    db8e:	fa09 f901 	lsl.w	r9, r9, r1
    db92:	9201      	str	r2, [sp, #4]
    db94:	f000 f8fc 	bl	dd90 <am_hal_interrupt_master_disable>
    db98:	f024 0a03 	bic.w	sl, r4, #3
    db9c:	ea4f 0b54 	mov.w	fp, r4, lsr #1
    dba0:	f10a 4c80 	add.w	ip, sl, #1073741824	; 0x40000000
    dba4:	4b4e      	ldr	r3, [pc, #312]	; (dce0 <am_hal_gpio_pinconfig+0x244>)
    dba6:	494f      	ldr	r1, [pc, #316]	; (dce4 <am_hal_gpio_pinconfig+0x248>)
    dba8:	9a01      	ldr	r2, [sp, #4]
    dbaa:	9003      	str	r0, [sp, #12]
    dbac:	ea6f 0909 	mvn.w	r9, r9
    dbb0:	f02b 0b03 	bic.w	fp, fp, #3
    dbb4:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
    dbb8:	f1b8 0f00 	cmp.w	r8, #0
    dbbc:	d00b      	beq.n	dbd6 <am_hal_gpio_pinconfig+0x13a>
    dbbe:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
    dbc2:	f004 081f 	and.w	r8, r4, #31
    dbc6:	4848      	ldr	r0, [pc, #288]	; (dce8 <am_hal_gpio_pinconfig+0x24c>)
    dbc8:	f00e 0e04 	and.w	lr, lr, #4
    dbcc:	2401      	movs	r4, #1
    dbce:	fa04 f408 	lsl.w	r4, r4, r8
    dbd2:	f84e 4000 	str.w	r4, [lr, r0]
    dbd6:	4845      	ldr	r0, [pc, #276]	; (dcec <am_hal_gpio_pinconfig+0x250>)
    dbd8:	2473      	movs	r4, #115	; 0x73
    dbda:	6604      	str	r4, [r0, #96]	; 0x60
    dbdc:	f8dc 4000 	ldr.w	r4, [ip]
    dbe0:	ea04 0409 	and.w	r4, r4, r9
    dbe4:	4325      	orrs	r5, r4
    dbe6:	f8cc 5000 	str.w	r5, [ip]
    dbea:	f85b 4003 	ldr.w	r4, [fp, r3]
    dbee:	4022      	ands	r2, r4
    dbf0:	4332      	orrs	r2, r6
    dbf2:	f84b 2003 	str.w	r2, [fp, r3]
    dbf6:	f85a 3001 	ldr.w	r3, [sl, r1]
    dbfa:	ea03 0909 	and.w	r9, r3, r9
    dbfe:	2400      	movs	r4, #0
    dc00:	ea49 0707 	orr.w	r7, r9, r7
    dc04:	f84a 7001 	str.w	r7, [sl, r1]
    dc08:	6604      	str	r4, [r0, #96]	; 0x60
    dc0a:	9803      	ldr	r0, [sp, #12]
    dc0c:	f000 f8c4 	bl	dd98 <am_hal_interrupt_master_set>
    dc10:	4620      	mov	r0, r4
    dc12:	b005      	add	sp, #20
    dc14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dc18:	f043 0304 	orr.w	r3, r3, #4
    dc1c:	00e1      	lsls	r1, r4, #3
    dc1e:	f001 0118 	and.w	r1, r1, #24
    dc22:	2701      	movs	r7, #1
    dc24:	408f      	lsls	r7, r1
    dc26:	e7a7      	b.n	db78 <am_hal_gpio_pinconfig+0xdc>
    dc28:	2006      	movs	r0, #6
    dc2a:	4770      	bx	lr
    dc2c:	4d28      	ldr	r5, [pc, #160]	; (dcd0 <am_hal_gpio_pinconfig+0x234>)
    dc2e:	5d2d      	ldrb	r5, [r5, r4]
    dc30:	3e02      	subs	r6, #2
    dc32:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    dc36:	07ee      	lsls	r6, r5, #31
    dc38:	d536      	bpl.n	dca8 <am_hal_gpio_pinconfig+0x20c>
    dc3a:	2b00      	cmp	r3, #0
    dc3c:	f43f af5c 	beq.w	daf8 <am_hal_gpio_pinconfig+0x5c>
    dc40:	e74d      	b.n	dade <am_hal_gpio_pinconfig+0x42>
    dc42:	f3c1 4202 	ubfx	r2, r1, #16, #3
    dc46:	2a07      	cmp	r2, #7
    dc48:	d030      	beq.n	dcac <am_hal_gpio_pinconfig+0x210>
    dc4a:	4d29      	ldr	r5, [pc, #164]	; (dcf0 <am_hal_gpio_pinconfig+0x254>)
    dc4c:	f3c1 40c1 	ubfx	r0, r1, #19, #2
    dc50:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    dc54:	f815 0024 	ldrb.w	r0, [r5, r4, lsl #2]
    dc58:	4290      	cmp	r0, r2
    dc5a:	d029      	beq.n	dcb0 <am_hal_gpio_pinconfig+0x214>
    dc5c:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    dc60:	00a0      	lsls	r0, r4, #2
    dc62:	786e      	ldrb	r6, [r5, #1]
    dc64:	4296      	cmp	r6, r2
    dc66:	d02d      	beq.n	dcc4 <am_hal_gpio_pinconfig+0x228>
    dc68:	78ae      	ldrb	r6, [r5, #2]
    dc6a:	4296      	cmp	r6, r2
    dc6c:	d02c      	beq.n	dcc8 <am_hal_gpio_pinconfig+0x22c>
    dc6e:	78ed      	ldrb	r5, [r5, #3]
    dc70:	4295      	cmp	r5, r2
    dc72:	d02b      	beq.n	dccc <am_hal_gpio_pinconfig+0x230>
    dc74:	481f      	ldr	r0, [pc, #124]	; (dcf4 <am_hal_gpio_pinconfig+0x258>)
    dc76:	b005      	add	sp, #20
    dc78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dc7c:	481e      	ldr	r0, [pc, #120]	; (dcf8 <am_hal_gpio_pinconfig+0x25c>)
    dc7e:	b005      	add	sp, #20
    dc80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dc84:	f04f 0801 	mov.w	r8, #1
    dc88:	e75f      	b.n	db4a <am_hal_gpio_pinconfig+0xae>
    dc8a:	4b11      	ldr	r3, [pc, #68]	; (dcd0 <am_hal_gpio_pinconfig+0x234>)
    dc8c:	5d1b      	ldrb	r3, [r3, r4]
    dc8e:	079d      	lsls	r5, r3, #30
    dc90:	d5f4      	bpl.n	dc7c <am_hal_gpio_pinconfig+0x1e0>
    dc92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    dc96:	e72f      	b.n	daf8 <am_hal_gpio_pinconfig+0x5c>
    dc98:	2c14      	cmp	r4, #20
    dc9a:	f43f af1f 	beq.w	dadc <am_hal_gpio_pinconfig+0x40>
    dc9e:	4817      	ldr	r0, [pc, #92]	; (dcfc <am_hal_gpio_pinconfig+0x260>)
    dca0:	e7b7      	b.n	dc12 <am_hal_gpio_pinconfig+0x176>
    dca2:	2c14      	cmp	r4, #20
    dca4:	f47f af1a 	bne.w	dadc <am_hal_gpio_pinconfig+0x40>
    dca8:	4815      	ldr	r0, [pc, #84]	; (dd00 <am_hal_gpio_pinconfig+0x264>)
    dcaa:	e7b2      	b.n	dc12 <am_hal_gpio_pinconfig+0x176>
    dcac:	4815      	ldr	r0, [pc, #84]	; (dd04 <am_hal_gpio_pinconfig+0x268>)
    dcae:	e7b0      	b.n	dc12 <am_hal_gpio_pinconfig+0x176>
    dcb0:	2200      	movs	r2, #0
    dcb2:	00a0      	lsls	r0, r4, #2
    dcb4:	0052      	lsls	r2, r2, #1
    dcb6:	f3c1 5540 	ubfx	r5, r1, #21, #1
    dcba:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
    dcbe:	f04f 0800 	mov.w	r8, #0
    dcc2:	e74a      	b.n	db5a <am_hal_gpio_pinconfig+0xbe>
    dcc4:	2201      	movs	r2, #1
    dcc6:	e7f5      	b.n	dcb4 <am_hal_gpio_pinconfig+0x218>
    dcc8:	2202      	movs	r2, #2
    dcca:	e7f3      	b.n	dcb4 <am_hal_gpio_pinconfig+0x218>
    dccc:	2203      	movs	r2, #3
    dcce:	e7f1      	b.n	dcb4 <am_hal_gpio_pinconfig+0x218>
    dcd0:	0000e86c 	.word	0x0000e86c
    dcd4:	0000e8a0 	.word	0x0000e8a0
    dcd8:	0000e99c 	.word	0x0000e99c
    dcdc:	0000e864 	.word	0x0000e864
    dce0:	40010040 	.word	0x40010040
    dce4:	400100e0 	.word	0x400100e0
    dce8:	400100b4 	.word	0x400100b4
    dcec:	40010000 	.word	0x40010000
    dcf0:	0000e8d4 	.word	0x0000e8d4
    dcf4:	08000104 	.word	0x08000104
    dcf8:	08000102 	.word	0x08000102
    dcfc:	08000101 	.word	0x08000101
    dd00:	08000100 	.word	0x08000100
    dd04:	08000103 	.word	0x08000103

0000dd08 <am_hal_gpio_state_write>:
    dd08:	2831      	cmp	r0, #49	; 0x31
    dd0a:	d81a      	bhi.n	dd42 <am_hal_gpio_state_write+0x3a>
    dd0c:	b570      	push	{r4, r5, r6, lr}
    dd0e:	2905      	cmp	r1, #5
    dd10:	b082      	sub	sp, #8
    dd12:	460d      	mov	r5, r1
    dd14:	d812      	bhi.n	dd3c <am_hal_gpio_state_write+0x34>
    dd16:	f000 031f 	and.w	r3, r0, #31
    dd1a:	2201      	movs	r2, #1
    dd1c:	08c0      	lsrs	r0, r0, #3
    dd1e:	fa02 f603 	lsl.w	r6, r2, r3
    dd22:	f000 0404 	and.w	r4, r0, #4
    dd26:	f000 f833 	bl	dd90 <am_hal_interrupt_master_disable>
    dd2a:	3d01      	subs	r5, #1
    dd2c:	9001      	str	r0, [sp, #4]
    dd2e:	2d04      	cmp	r5, #4
    dd30:	d821      	bhi.n	dd76 <am_hal_gpio_state_write+0x6e>
    dd32:	e8df f005 	tbb	[pc, r5]
    dd36:	1512      	.short	0x1512
    dd38:	1d1a      	.short	0x1d1a
    dd3a:	08          	.byte	0x08
    dd3b:	00          	.byte	0x00
    dd3c:	2006      	movs	r0, #6
    dd3e:	b002      	add	sp, #8
    dd40:	bd70      	pop	{r4, r5, r6, pc}
    dd42:	2005      	movs	r0, #5
    dd44:	4770      	bx	lr
    dd46:	4a0d      	ldr	r2, [pc, #52]	; (dd7c <am_hal_gpio_state_write+0x74>)
    dd48:	58a3      	ldr	r3, [r4, r2]
    dd4a:	4073      	eors	r3, r6
    dd4c:	50a3      	str	r3, [r4, r2]
    dd4e:	9801      	ldr	r0, [sp, #4]
    dd50:	f000 f822 	bl	dd98 <am_hal_interrupt_master_set>
    dd54:	2000      	movs	r0, #0
    dd56:	b002      	add	sp, #8
    dd58:	bd70      	pop	{r4, r5, r6, pc}
    dd5a:	4b09      	ldr	r3, [pc, #36]	; (dd80 <am_hal_gpio_state_write+0x78>)
    dd5c:	50e6      	str	r6, [r4, r3]
    dd5e:	e7f6      	b.n	dd4e <am_hal_gpio_state_write+0x46>
    dd60:	4a08      	ldr	r2, [pc, #32]	; (dd84 <am_hal_gpio_state_write+0x7c>)
    dd62:	58a3      	ldr	r3, [r4, r2]
    dd64:	4073      	eors	r3, r6
    dd66:	50a3      	str	r3, [r4, r2]
    dd68:	e7f1      	b.n	dd4e <am_hal_gpio_state_write+0x46>
    dd6a:	4b04      	ldr	r3, [pc, #16]	; (dd7c <am_hal_gpio_state_write+0x74>)
    dd6c:	50e6      	str	r6, [r4, r3]
    dd6e:	e7ee      	b.n	dd4e <am_hal_gpio_state_write+0x46>
    dd70:	4b05      	ldr	r3, [pc, #20]	; (dd88 <am_hal_gpio_state_write+0x80>)
    dd72:	50e6      	str	r6, [r4, r3]
    dd74:	e7eb      	b.n	dd4e <am_hal_gpio_state_write+0x46>
    dd76:	4b05      	ldr	r3, [pc, #20]	; (dd8c <am_hal_gpio_state_write+0x84>)
    dd78:	50e6      	str	r6, [r4, r3]
    dd7a:	e7e8      	b.n	dd4e <am_hal_gpio_state_write+0x46>
    dd7c:	400100b4 	.word	0x400100b4
    dd80:	40010090 	.word	0x40010090
    dd84:	40010088 	.word	0x40010088
    dd88:	400100a8 	.word	0x400100a8
    dd8c:	40010098 	.word	0x40010098

0000dd90 <am_hal_interrupt_master_disable>:
    dd90:	f3ef 8010 	mrs	r0, PRIMASK
    dd94:	b672      	cpsid	i
    dd96:	4770      	bx	lr

0000dd98 <am_hal_interrupt_master_set>:
    dd98:	f380 8810 	msr	PRIMASK, r0
    dd9c:	4770      	bx	lr
    dd9e:	bf00      	nop

0000dda0 <am_hal_itm_enable>:
    dda0:	4a0e      	ldr	r2, [pc, #56]	; (dddc <am_hal_itm_enable+0x3c>)
    dda2:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    dda6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    ddaa:	b410      	push	{r4}
    ddac:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    ddb0:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    ddb4:	01db      	lsls	r3, r3, #7
    ddb6:	d5fb      	bpl.n	ddb0 <am_hal_itm_enable+0x10>
    ddb8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    ddbc:	4c08      	ldr	r4, [pc, #32]	; (dde0 <am_hal_itm_enable+0x40>)
    ddbe:	4a09      	ldr	r2, [pc, #36]	; (dde4 <am_hal_itm_enable+0x44>)
    ddc0:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    ddc4:	200f      	movs	r0, #15
    ddc6:	f04f 31ff 	mov.w	r1, #4294967295
    ddca:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    ddce:	f85d 4b04 	ldr.w	r4, [sp], #4
    ddd2:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    ddd6:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    ddda:	4770      	bx	lr
    dddc:	e000ed00 	.word	0xe000ed00
    dde0:	c5acce55 	.word	0xc5acce55
    dde4:	00150511 	.word	0x00150511

0000dde8 <am_hal_itm_disable>:
    dde8:	4b27      	ldr	r3, [pc, #156]	; (de88 <am_hal_itm_disable+0xa0>)
    ddea:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    ddee:	b510      	push	{r4, lr}
    ddf0:	b9cb      	cbnz	r3, de26 <am_hal_itm_disable+0x3e>
    ddf2:	4a26      	ldr	r2, [pc, #152]	; (de8c <am_hal_itm_disable+0xa4>)
    ddf4:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    ddf8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    ddfc:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    de00:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    de04:	01d9      	lsls	r1, r3, #7
    de06:	d5fb      	bpl.n	de00 <am_hal_itm_disable+0x18>
    de08:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    de0c:	4c20      	ldr	r4, [pc, #128]	; (de90 <am_hal_itm_disable+0xa8>)
    de0e:	4a21      	ldr	r2, [pc, #132]	; (de94 <am_hal_itm_disable+0xac>)
    de10:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    de14:	200f      	movs	r0, #15
    de16:	f04f 31ff 	mov.w	r1, #4294967295
    de1a:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    de1e:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    de22:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    de26:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    de2a:	f8d4 3e80 	ldr.w	r3, [r4, #3712]	; 0xe80
    de2e:	021b      	lsls	r3, r3, #8
    de30:	d4fb      	bmi.n	de2a <am_hal_itm_disable+0x42>
    de32:	f44f 7048 	mov.w	r0, #800	; 0x320
    de36:	f7ff fde1 	bl	d9fc <am_hal_flash_delay>
    de3a:	4b15      	ldr	r3, [pc, #84]	; (de90 <am_hal_itm_disable+0xa8>)
    de3c:	4916      	ldr	r1, [pc, #88]	; (de98 <am_hal_itm_disable+0xb0>)
    de3e:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
    de42:	2064      	movs	r0, #100	; 0x64
    de44:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    de48:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    de4c:	f023 0301 	bic.w	r3, r3, #1
    de50:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
    de54:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    de58:	420b      	tst	r3, r1
    de5a:	d1fb      	bne.n	de54 <am_hal_itm_disable+0x6c>
    de5c:	3801      	subs	r0, #1
    de5e:	d1f3      	bne.n	de48 <am_hal_itm_disable+0x60>
    de60:	4a0a      	ldr	r2, [pc, #40]	; (de8c <am_hal_itm_disable+0xa4>)
    de62:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    de66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    de6a:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    de6e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    de72:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    de76:	d1fa      	bne.n	de6e <am_hal_itm_disable+0x86>
    de78:	4a03      	ldr	r2, [pc, #12]	; (de88 <am_hal_itm_disable+0xa0>)
    de7a:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    de7e:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
    de82:	2b00      	cmp	r3, #0
    de84:	d1fb      	bne.n	de7e <am_hal_itm_disable+0x96>
    de86:	bd10      	pop	{r4, pc}
    de88:	40020000 	.word	0x40020000
    de8c:	e000ed00 	.word	0xe000ed00
    de90:	c5acce55 	.word	0xc5acce55
    de94:	00150511 	.word	0x00150511
    de98:	00800001 	.word	0x00800001

0000de9c <am_hal_itm_print>:
    de9c:	7803      	ldrb	r3, [r0, #0]
    de9e:	b1a3      	cbz	r3, deca <am_hal_itm_print+0x2e>
    dea0:	4603      	mov	r3, r0
    dea2:	f1c0 0c01 	rsb	ip, r0, #1
    dea6:	eb0c 0103 	add.w	r1, ip, r3
    deaa:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    deae:	2a00      	cmp	r2, #0
    deb0:	d1f9      	bne.n	dea6 <am_hal_itm_print+0xa>
    deb2:	4401      	add	r1, r0
    deb4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    deb8:	f810 cb01 	ldrb.w	ip, [r0], #1
    debc:	6813      	ldr	r3, [r2, #0]
    debe:	2b00      	cmp	r3, #0
    dec0:	d0fc      	beq.n	debc <am_hal_itm_print+0x20>
    dec2:	4288      	cmp	r0, r1
    dec4:	f882 c000 	strb.w	ip, [r2]
    dec8:	d1f6      	bne.n	deb8 <am_hal_itm_print+0x1c>
    deca:	4770      	bx	lr

0000decc <am_hal_mcuctrl_info_get>:
    decc:	2900      	cmp	r1, #0
    dece:	f000 808f 	beq.w	dff0 <am_hal_mcuctrl_info_get+0x124>
    ded2:	2801      	cmp	r0, #1
    ded4:	b430      	push	{r4, r5}
    ded6:	d006      	beq.n	dee6 <am_hal_mcuctrl_info_get+0x1a>
    ded8:	2802      	cmp	r0, #2
    deda:	d06d      	beq.n	dfb8 <am_hal_mcuctrl_info_get+0xec>
    dedc:	2800      	cmp	r0, #0
    dede:	d055      	beq.n	df8c <am_hal_mcuctrl_info_get+0xc0>
    dee0:	2006      	movs	r0, #6
    dee2:	bc30      	pop	{r4, r5}
    dee4:	4770      	bx	lr
    dee6:	4a43      	ldr	r2, [pc, #268]	; (dff4 <am_hal_mcuctrl_info_get+0x128>)
    dee8:	4843      	ldr	r0, [pc, #268]	; (dff8 <am_hal_mcuctrl_info_get+0x12c>)
    deea:	6813      	ldr	r3, [r2, #0]
    deec:	600b      	str	r3, [r1, #0]
    deee:	6854      	ldr	r4, [r2, #4]
    def0:	604c      	str	r4, [r1, #4]
    def2:	6894      	ldr	r4, [r2, #8]
    def4:	608c      	str	r4, [r1, #8]
    def6:	68d4      	ldr	r4, [r2, #12]
    def8:	60cc      	str	r4, [r1, #12]
    defa:	f3c3 5503 	ubfx	r5, r3, #20, #4
    defe:	6914      	ldr	r4, [r2, #16]
    df00:	610c      	str	r4, [r1, #16]
    df02:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    df06:	4c3d      	ldr	r4, [pc, #244]	; (dffc <am_hal_mcuctrl_info_get+0x130>)
    df08:	6950      	ldr	r0, [r2, #20]
    df0a:	6148      	str	r0, [r1, #20]
    df0c:	f003 0201 	and.w	r2, r3, #1
    df10:	f3c3 4303 	ubfx	r3, r3, #16, #4
    df14:	e9c1 2506 	strd	r2, r5, [r1, #24]
    df18:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    df1c:	4a38      	ldr	r2, [pc, #224]	; (e000 <am_hal_mcuctrl_info_get+0x134>)
    df1e:	620b      	str	r3, [r1, #32]
    df20:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    df24:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    df28:	b2db      	uxtb	r3, r3
    df2a:	f000 000f 	and.w	r0, r0, #15
    df2e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    df32:	624b      	str	r3, [r1, #36]	; 0x24
    df34:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    df38:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
    df3c:	f3c3 1303 	ubfx	r3, r3, #4, #4
    df40:	f000 000f 	and.w	r0, r0, #15
    df44:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
    df48:	628b      	str	r3, [r1, #40]	; 0x28
    df4a:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    df4e:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
    df52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    df56:	f3c0 1003 	ubfx	r0, r0, #4, #4
    df5a:	4303      	orrs	r3, r0
    df5c:	62cb      	str	r3, [r1, #44]	; 0x2c
    df5e:	f8d2 40fc 	ldr.w	r4, [r2, #252]	; 0xfc
    df62:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    df66:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    df6a:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    df6e:	b2db      	uxtb	r3, r3
    df70:	041b      	lsls	r3, r3, #16
    df72:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    df76:	fa5f fc82 	uxtb.w	ip, r2
    df7a:	ea43 030c 	orr.w	r3, r3, ip
    df7e:	b2c2      	uxtb	r2, r0
    df80:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    df84:	630b      	str	r3, [r1, #48]	; 0x30
    df86:	2000      	movs	r0, #0
    df88:	bc30      	pop	{r4, r5}
    df8a:	4770      	bx	lr
    df8c:	4a19      	ldr	r2, [pc, #100]	; (dff4 <am_hal_mcuctrl_info_get+0x128>)
    df8e:	6993      	ldr	r3, [r2, #24]
    df90:	f3c3 1480 	ubfx	r4, r3, #6, #1
    df94:	700c      	strb	r4, [r1, #0]
    df96:	f8d2 41a0 	ldr.w	r4, [r2, #416]	; 0x1a0
    df9a:	f3c3 0380 	ubfx	r3, r3, #2, #1
    df9e:	704b      	strb	r3, [r1, #1]
    dfa0:	f3c4 6381 	ubfx	r3, r4, #26, #2
    dfa4:	710b      	strb	r3, [r1, #4]
    dfa6:	6953      	ldr	r3, [r2, #20]
    dfa8:	f3c3 0240 	ubfx	r2, r3, #1, #1
    dfac:	f003 0301 	and.w	r3, r3, #1
    dfb0:	bc30      	pop	{r4, r5}
    dfb2:	708a      	strb	r2, [r1, #2]
    dfb4:	70cb      	strb	r3, [r1, #3]
    dfb6:	4770      	bx	lr
    dfb8:	4a0e      	ldr	r2, [pc, #56]	; (dff4 <am_hal_mcuctrl_info_get+0x128>)
    dfba:	6848      	ldr	r0, [r1, #4]
    dfbc:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    dfc0:	f003 0401 	and.w	r4, r3, #1
    dfc4:	700c      	strb	r4, [r1, #0]
    dfc6:	f3c3 0440 	ubfx	r4, r3, #1, #1
    dfca:	720c      	strb	r4, [r1, #8]
    dfcc:	f8d2 41c4 	ldr.w	r4, [r2, #452]	; 0x1c4
    dfd0:	60cc      	str	r4, [r1, #12]
    dfd2:	f8d2 41c0 	ldr.w	r4, [r2, #448]	; 0x1c0
    dfd6:	4320      	orrs	r0, r4
    dfd8:	f3c3 0380 	ubfx	r3, r3, #2, #1
    dfdc:	6048      	str	r0, [r1, #4]
    dfde:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    dfe2:	740b      	strb	r3, [r1, #16]
    dfe4:	694b      	ldr	r3, [r1, #20]
    dfe6:	4313      	orrs	r3, r2
    dfe8:	2000      	movs	r0, #0
    dfea:	bc30      	pop	{r4, r5}
    dfec:	614b      	str	r3, [r1, #20]
    dfee:	4770      	bx	lr
    dff0:	2006      	movs	r0, #6
    dff2:	4770      	bx	lr
    dff4:	40020000 	.word	0x40020000
    dff8:	0000e9d0 	.word	0x0000e9d0
    dffc:	0000ea10 	.word	0x0000ea10
    e000:	f0000f00 	.word	0xf0000f00

0000e004 <am_hal_pwrctrl_periph_enable>:
    e004:	b570      	push	{r4, r5, r6, lr}
    e006:	b082      	sub	sp, #8
    e008:	4604      	mov	r4, r0
    e00a:	f7ff fec1 	bl	dd90 <am_hal_interrupt_master_disable>
    e00e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e012:	4e0f      	ldr	r6, [pc, #60]	; (e050 <am_hal_pwrctrl_periph_enable+0x4c>)
    e014:	4d0f      	ldr	r5, [pc, #60]	; (e054 <am_hal_pwrctrl_periph_enable+0x50>)
    e016:	9001      	str	r0, [sp, #4]
    e018:	00a4      	lsls	r4, r4, #2
    e01a:	68b3      	ldr	r3, [r6, #8]
    e01c:	592a      	ldr	r2, [r5, r4]
    e01e:	4313      	orrs	r3, r2
    e020:	60b3      	str	r3, [r6, #8]
    e022:	9801      	ldr	r0, [sp, #4]
    e024:	442c      	add	r4, r5
    e026:	f7ff feb7 	bl	dd98 <am_hal_interrupt_master_set>
    e02a:	20a0      	movs	r0, #160	; 0xa0
    e02c:	f7ff fce6 	bl	d9fc <am_hal_flash_delay>
    e030:	69b3      	ldr	r3, [r6, #24]
    e032:	6864      	ldr	r4, [r4, #4]
    e034:	4223      	tst	r3, r4
    e036:	d103      	bne.n	e040 <am_hal_pwrctrl_periph_enable+0x3c>
    e038:	20a0      	movs	r0, #160	; 0xa0
    e03a:	f7ff fcdf 	bl	d9fc <am_hal_flash_delay>
    e03e:	69b3      	ldr	r3, [r6, #24]
    e040:	4b03      	ldr	r3, [pc, #12]	; (e050 <am_hal_pwrctrl_periph_enable+0x4c>)
    e042:	699b      	ldr	r3, [r3, #24]
    e044:	4223      	tst	r3, r4
    e046:	bf0c      	ite	eq
    e048:	2001      	moveq	r0, #1
    e04a:	2000      	movne	r0, #0
    e04c:	b002      	add	sp, #8
    e04e:	bd70      	pop	{r4, r5, r6, pc}
    e050:	40021000 	.word	0x40021000
    e054:	0000ea50 	.word	0x0000ea50

0000e058 <am_hal_pwrctrl_periph_disable>:
    e058:	b570      	push	{r4, r5, r6, lr}
    e05a:	b082      	sub	sp, #8
    e05c:	4604      	mov	r4, r0
    e05e:	f7ff fe97 	bl	dd90 <am_hal_interrupt_master_disable>
    e062:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e066:	4e10      	ldr	r6, [pc, #64]	; (e0a8 <am_hal_pwrctrl_periph_disable+0x50>)
    e068:	4d10      	ldr	r5, [pc, #64]	; (e0ac <am_hal_pwrctrl_periph_disable+0x54>)
    e06a:	9001      	str	r0, [sp, #4]
    e06c:	00a4      	lsls	r4, r4, #2
    e06e:	68b3      	ldr	r3, [r6, #8]
    e070:	592a      	ldr	r2, [r5, r4]
    e072:	ea23 0302 	bic.w	r3, r3, r2
    e076:	60b3      	str	r3, [r6, #8]
    e078:	9801      	ldr	r0, [sp, #4]
    e07a:	442c      	add	r4, r5
    e07c:	f7ff fe8c 	bl	dd98 <am_hal_interrupt_master_set>
    e080:	20a0      	movs	r0, #160	; 0xa0
    e082:	f7ff fcbb 	bl	d9fc <am_hal_flash_delay>
    e086:	69b3      	ldr	r3, [r6, #24]
    e088:	6864      	ldr	r4, [r4, #4]
    e08a:	4223      	tst	r3, r4
    e08c:	d003      	beq.n	e096 <am_hal_pwrctrl_periph_disable+0x3e>
    e08e:	20a0      	movs	r0, #160	; 0xa0
    e090:	f7ff fcb4 	bl	d9fc <am_hal_flash_delay>
    e094:	69b3      	ldr	r3, [r6, #24]
    e096:	4b04      	ldr	r3, [pc, #16]	; (e0a8 <am_hal_pwrctrl_periph_disable+0x50>)
    e098:	699b      	ldr	r3, [r3, #24]
    e09a:	4223      	tst	r3, r4
    e09c:	bf14      	ite	ne
    e09e:	2001      	movne	r0, #1
    e0a0:	2000      	moveq	r0, #0
    e0a2:	b002      	add	sp, #8
    e0a4:	bd70      	pop	{r4, r5, r6, pc}
    e0a6:	bf00      	nop
    e0a8:	40021000 	.word	0x40021000
    e0ac:	0000ea50 	.word	0x0000ea50

0000e0b0 <am_hal_pwrctrl_low_power_init>:
    e0b0:	b530      	push	{r4, r5, lr}
    e0b2:	4b69      	ldr	r3, [pc, #420]	; (e258 <am_hal_pwrctrl_low_power_init+0x1a8>)
    e0b4:	681a      	ldr	r2, [r3, #0]
    e0b6:	b085      	sub	sp, #20
    e0b8:	b912      	cbnz	r2, e0c0 <am_hal_pwrctrl_low_power_init+0x10>
    e0ba:	4a68      	ldr	r2, [pc, #416]	; (e25c <am_hal_pwrctrl_low_power_init+0x1ac>)
    e0bc:	6812      	ldr	r2, [r2, #0]
    e0be:	601a      	str	r2, [r3, #0]
    e0c0:	4b67      	ldr	r3, [pc, #412]	; (e260 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e0c2:	68db      	ldr	r3, [r3, #12]
    e0c4:	b2db      	uxtb	r3, r3
    e0c6:	2b12      	cmp	r3, #18
    e0c8:	d104      	bne.n	e0d4 <am_hal_pwrctrl_low_power_init+0x24>
    e0ca:	4c66      	ldr	r4, [pc, #408]	; (e264 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e0cc:	6863      	ldr	r3, [r4, #4]
    e0ce:	07d8      	lsls	r0, r3, #31
    e0d0:	f100 8088 	bmi.w	e1e4 <am_hal_pwrctrl_low_power_init+0x134>
    e0d4:	4b62      	ldr	r3, [pc, #392]	; (e260 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e0d6:	68da      	ldr	r2, [r3, #12]
    e0d8:	b2d2      	uxtb	r2, r2
    e0da:	2a20      	cmp	r2, #32
    e0dc:	d934      	bls.n	e148 <am_hal_pwrctrl_low_power_init+0x98>
    e0de:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
    e0e2:	2002      	movs	r0, #2
    e0e4:	f360 4213 	bfi	r2, r0, #16, #4
    e0e8:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    e0ec:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
    e0f0:	2203      	movs	r2, #3
    e0f2:	f362 5117 	bfi	r1, r2, #20, #4
    e0f6:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
    e0fa:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e0fe:	2405      	movs	r4, #5
    e100:	f364 0103 	bfi	r1, r4, #0, #4
    e104:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e108:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e10c:	f360 1107 	bfi	r1, r0, #4, #4
    e110:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e114:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e118:	2406      	movs	r4, #6
    e11a:	f364 210b 	bfi	r1, r4, #8, #4
    e11e:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e122:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e126:	2001      	movs	r0, #1
    e128:	f360 310f 	bfi	r1, r0, #12, #4
    e12c:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e130:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e134:	f362 61de 	bfi	r1, r2, #27, #4
    e138:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e13c:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
    e140:	f362 0103 	bfi	r1, r2, #0, #4
    e144:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
    e148:	4a45      	ldr	r2, [pc, #276]	; (e260 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e14a:	68d3      	ldr	r3, [r2, #12]
    e14c:	b2db      	uxtb	r3, r3
    e14e:	2b11      	cmp	r3, #17
    e150:	d905      	bls.n	e15e <am_hal_pwrctrl_low_power_init+0xae>
    e152:	f8d2 335c 	ldr.w	r3, [r2, #860]	; 0x35c
    e156:	f36f 6318 	bfc	r3, #24, #1
    e15a:	f8c2 335c 	str.w	r3, [r2, #860]	; 0x35c
    e15e:	2100      	movs	r1, #0
    e160:	200c      	movs	r0, #12
    e162:	f7ff fa17 	bl	d594 <am_hal_cachectrl_control>
    e166:	4b3f      	ldr	r3, [pc, #252]	; (e264 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e168:	699b      	ldr	r3, [r3, #24]
    e16a:	f3c3 2500 	ubfx	r5, r3, #8, #1
    e16e:	05db      	lsls	r3, r3, #23
    e170:	d420      	bmi.n	e1b4 <am_hal_pwrctrl_low_power_init+0x104>
    e172:	4c3b      	ldr	r4, [pc, #236]	; (e260 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e174:	68e3      	ldr	r3, [r4, #12]
    e176:	b2db      	uxtb	r3, r3
    e178:	2b11      	cmp	r3, #17
    e17a:	d84e      	bhi.n	e21a <am_hal_pwrctrl_low_power_init+0x16a>
    e17c:	4c38      	ldr	r4, [pc, #224]	; (e260 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e17e:	493a      	ldr	r1, [pc, #232]	; (e268 <am_hal_pwrctrl_low_power_init+0x1b8>)
    e180:	7e22      	ldrb	r2, [r4, #24]
    e182:	2001      	movs	r0, #1
    e184:	4302      	orrs	r2, r0
    e186:	2307      	movs	r3, #7
    e188:	7622      	strb	r2, [r4, #24]
    e18a:	9000      	str	r0, [sp, #0]
    e18c:	461a      	mov	r2, r3
    e18e:	f242 7010 	movw	r0, #10000	; 0x2710
    e192:	f7ff fc43 	bl	da1c <am_hal_flash_delay_status_check>
    e196:	2800      	cmp	r0, #0
    e198:	d15a      	bne.n	e250 <am_hal_pwrctrl_low_power_init+0x1a0>
    e19a:	4b32      	ldr	r3, [pc, #200]	; (e264 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e19c:	681a      	ldr	r2, [r3, #0]
    e19e:	f042 0201 	orr.w	r2, r2, #1
    e1a2:	601a      	str	r2, [r3, #0]
    e1a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    e1a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    e1aa:	625a      	str	r2, [r3, #36]	; 0x24
    e1ac:	68e3      	ldr	r3, [r4, #12]
    e1ae:	b2db      	uxtb	r3, r3
    e1b0:	2b11      	cmp	r3, #17
    e1b2:	d002      	beq.n	e1ba <am_hal_pwrctrl_low_power_init+0x10a>
    e1b4:	2000      	movs	r0, #0
    e1b6:	b005      	add	sp, #20
    e1b8:	bd30      	pop	{r4, r5, pc}
    e1ba:	f8d4 335c 	ldr.w	r3, [r4, #860]	; 0x35c
    e1be:	f360 5356 	bfi	r3, r0, #21, #2
    e1c2:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
    e1c6:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e1ca:	220f      	movs	r2, #15
    e1cc:	f362 138b 	bfi	r3, r2, #6, #6
    e1d0:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e1d4:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e1d8:	f362 0305 	bfi	r3, r2, #0, #6
    e1dc:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e1e0:	b005      	add	sp, #20
    e1e2:	bd30      	pop	{r4, r5, pc}
    e1e4:	f7ff fdd4 	bl	dd90 <am_hal_interrupt_master_disable>
    e1e8:	9002      	str	r0, [sp, #8]
    e1ea:	68a3      	ldr	r3, [r4, #8]
    e1ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    e1f0:	60a3      	str	r3, [r4, #8]
    e1f2:	9802      	ldr	r0, [sp, #8]
    e1f4:	f7ff fdd0 	bl	dd98 <am_hal_interrupt_master_set>
    e1f8:	20a0      	movs	r0, #160	; 0xa0
    e1fa:	f7ff fbff 	bl	d9fc <am_hal_flash_delay>
    e1fe:	69a3      	ldr	r3, [r4, #24]
    e200:	0619      	lsls	r1, r3, #24
    e202:	d403      	bmi.n	e20c <am_hal_pwrctrl_low_power_init+0x15c>
    e204:	20a0      	movs	r0, #160	; 0xa0
    e206:	f7ff fbf9 	bl	d9fc <am_hal_flash_delay>
    e20a:	69a3      	ldr	r3, [r4, #24]
    e20c:	4b15      	ldr	r3, [pc, #84]	; (e264 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e20e:	699b      	ldr	r3, [r3, #24]
    e210:	061a      	lsls	r2, r3, #24
    e212:	f53f af5f 	bmi.w	e0d4 <am_hal_pwrctrl_low_power_init+0x24>
    e216:	2001      	movs	r0, #1
    e218:	e7cd      	b.n	e1b6 <am_hal_pwrctrl_low_power_init+0x106>
    e21a:	f7ff fdb9 	bl	dd90 <am_hal_interrupt_master_disable>
    e21e:	9003      	str	r0, [sp, #12]
    e220:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e224:	2219      	movs	r2, #25
    e226:	f362 138b 	bfi	r3, r2, #6, #6
    e22a:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e22e:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
    e232:	210c      	movs	r1, #12
    e234:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e238:	f361 0205 	bfi	r2, r1, #0, #6
    e23c:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
    e240:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    e242:	f365 5296 	bfi	r2, r5, #22, #1
    e246:	63da      	str	r2, [r3, #60]	; 0x3c
    e248:	9803      	ldr	r0, [sp, #12]
    e24a:	f7ff fda5 	bl	dd98 <am_hal_interrupt_master_set>
    e24e:	e795      	b.n	e17c <am_hal_pwrctrl_low_power_init+0xcc>
    e250:	2004      	movs	r0, #4
    e252:	b005      	add	sp, #20
    e254:	bd30      	pop	{r4, r5, pc}
    e256:	bf00      	nop
    e258:	10001148 	.word	0x10001148
    e25c:	4ffff000 	.word	0x4ffff000
    e260:	40020000 	.word	0x40020000
    e264:	40021000 	.word	0x40021000
    e268:	40020018 	.word	0x40020018

0000e26c <am_hal_rtc_osc_disable>:
    e26c:	4a03      	ldr	r2, [pc, #12]	; (e27c <am_hal_rtc_osc_disable+0x10>)
    e26e:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    e272:	f043 0310 	orr.w	r3, r3, #16
    e276:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    e27a:	4770      	bx	lr
    e27c:	40004200 	.word	0x40004200

0000e280 <am_hal_security_get_info>:
    e280:	2800      	cmp	r0, #0
    e282:	d039      	beq.n	e2f8 <am_hal_security_get_info+0x78>
    e284:	b510      	push	{r4, lr}
    e286:	4b25      	ldr	r3, [pc, #148]	; (e31c <am_hal_security_get_info+0x9c>)
    e288:	4a25      	ldr	r2, [pc, #148]	; (e320 <am_hal_security_get_info+0xa0>)
    e28a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e28c:	6043      	str	r3, [r0, #4]
    e28e:	f8d2 31a4 	ldr.w	r3, [r2, #420]	; 0x1a4
    e292:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e296:	7003      	strb	r3, [r0, #0]
    e298:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
    e29c:	f013 6f40 	tst.w	r3, #201326592	; 0xc000000
    e2a0:	b082      	sub	sp, #8
    e2a2:	4604      	mov	r4, r0
    e2a4:	d008      	beq.n	e2b8 <am_hal_security_get_info+0x38>
    e2a6:	4b1f      	ldr	r3, [pc, #124]	; (e324 <am_hal_security_get_info+0xa4>)
    e2a8:	4a1f      	ldr	r2, [pc, #124]	; (e328 <am_hal_security_get_info+0xa8>)
    e2aa:	681b      	ldr	r3, [r3, #0]
    e2ac:	6812      	ldr	r2, [r2, #0]
    e2ae:	681b      	ldr	r3, [r3, #0]
    e2b0:	6811      	ldr	r1, [r2, #0]
    e2b2:	0e1a      	lsrs	r2, r3, #24
    e2b4:	2aa3      	cmp	r2, #163	; 0xa3
    e2b6:	d002      	beq.n	e2be <am_hal_security_get_info+0x3e>
    e2b8:	2001      	movs	r0, #1
    e2ba:	b002      	add	sp, #8
    e2bc:	bd10      	pop	{r4, pc}
    e2be:	4a1b      	ldr	r2, [pc, #108]	; (e32c <am_hal_security_get_info+0xac>)
    e2c0:	4293      	cmp	r3, r2
    e2c2:	d012      	beq.n	e2ea <am_hal_security_get_info+0x6a>
    e2c4:	4a1a      	ldr	r2, [pc, #104]	; (e330 <am_hal_security_get_info+0xb0>)
    e2c6:	4293      	cmp	r3, r2
    e2c8:	d118      	bne.n	e2fc <am_hal_security_get_info+0x7c>
    e2ca:	4b1a      	ldr	r3, [pc, #104]	; (e334 <am_hal_security_get_info+0xb4>)
    e2cc:	4299      	cmp	r1, r3
    e2ce:	d020      	beq.n	e312 <am_hal_security_get_info+0x92>
    e2d0:	a801      	add	r0, sp, #4
    e2d2:	f240 13d1 	movw	r3, #465	; 0x1d1
    e2d6:	4798      	blx	r3
    e2d8:	2800      	cmp	r0, #0
    e2da:	d1ee      	bne.n	e2ba <am_hal_security_get_info+0x3a>
    e2dc:	9b01      	ldr	r3, [sp, #4]
    e2de:	f3c3 020e 	ubfx	r2, r3, #0, #15
    e2e2:	0bdb      	lsrs	r3, r3, #15
    e2e4:	e9c4 2302 	strd	r2, r3, [r4, #8]
    e2e8:	e7e7      	b.n	e2ba <am_hal_security_get_info+0x3a>
    e2ea:	4b13      	ldr	r3, [pc, #76]	; (e338 <am_hal_security_get_info+0xb8>)
    e2ec:	4299      	cmp	r1, r3
    e2ee:	d1ef      	bne.n	e2d0 <am_hal_security_get_info+0x50>
    e2f0:	2000      	movs	r0, #0
    e2f2:	e9c4 0002 	strd	r0, r0, [r4, #8]
    e2f6:	e7e0      	b.n	e2ba <am_hal_security_get_info+0x3a>
    e2f8:	2006      	movs	r0, #6
    e2fa:	4770      	bx	lr
    e2fc:	4a0f      	ldr	r2, [pc, #60]	; (e33c <am_hal_security_get_info+0xbc>)
    e2fe:	4293      	cmp	r3, r2
    e300:	d1e6      	bne.n	e2d0 <am_hal_security_get_info+0x50>
    e302:	4b0f      	ldr	r3, [pc, #60]	; (e340 <am_hal_security_get_info+0xc0>)
    e304:	4299      	cmp	r1, r3
    e306:	d1e3      	bne.n	e2d0 <am_hal_security_get_info+0x50>
    e308:	2000      	movs	r0, #0
    e30a:	2302      	movs	r3, #2
    e30c:	e9c4 3002 	strd	r3, r0, [r4, #8]
    e310:	e7d3      	b.n	e2ba <am_hal_security_get_info+0x3a>
    e312:	2000      	movs	r0, #0
    e314:	2301      	movs	r3, #1
    e316:	e9c4 3002 	strd	r3, r0, [r4, #8]
    e31a:	e7ce      	b.n	e2ba <am_hal_security_get_info+0x3a>
    e31c:	50020000 	.word	0x50020000
    e320:	40020000 	.word	0x40020000
    e324:	1000114c 	.word	0x1000114c
    e328:	10001034 	.word	0x10001034
    e32c:	a3007860 	.word	0xa3007860
    e330:	a3007e14 	.word	0xa3007e14
    e334:	5ee4e461 	.word	0x5ee4e461
    e338:	2e2638fb 	.word	0x2e2638fb
    e33c:	a3008290 	.word	0xa3008290
    e340:	b49cecd5 	.word	0xb49cecd5

0000e344 <am_hal_sysctrl_sleep>:
    e344:	b510      	push	{r4, lr}
    e346:	b082      	sub	sp, #8
    e348:	4604      	mov	r4, r0
    e34a:	f7ff fd21 	bl	dd90 <am_hal_interrupt_master_disable>
    e34e:	9001      	str	r0, [sp, #4]
    e350:	b124      	cbz	r4, e35c <am_hal_sysctrl_sleep+0x18>
    e352:	4b12      	ldr	r3, [pc, #72]	; (e39c <am_hal_sysctrl_sleep+0x58>)
    e354:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    e358:	07db      	lsls	r3, r3, #31
    e35a:	d513      	bpl.n	e384 <am_hal_sysctrl_sleep+0x40>
    e35c:	4a10      	ldr	r2, [pc, #64]	; (e3a0 <am_hal_sysctrl_sleep+0x5c>)
    e35e:	6913      	ldr	r3, [r2, #16]
    e360:	f023 0304 	bic.w	r3, r3, #4
    e364:	6113      	str	r3, [r2, #16]
    e366:	f3bf 8f4f 	dsb	sy
    e36a:	4a0e      	ldr	r2, [pc, #56]	; (e3a4 <am_hal_sysctrl_sleep+0x60>)
    e36c:	4b0e      	ldr	r3, [pc, #56]	; (e3a8 <am_hal_sysctrl_sleep+0x64>)
    e36e:	6812      	ldr	r2, [r2, #0]
    e370:	601a      	str	r2, [r3, #0]
    e372:	bf30      	wfi
    e374:	f3bf 8f6f 	isb	sy
    e378:	9801      	ldr	r0, [sp, #4]
    e37a:	b002      	add	sp, #8
    e37c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e380:	f7ff bd0a 	b.w	dd98 <am_hal_interrupt_master_set>
    e384:	4b09      	ldr	r3, [pc, #36]	; (e3ac <am_hal_sysctrl_sleep+0x68>)
    e386:	681a      	ldr	r2, [r3, #0]
    e388:	b912      	cbnz	r2, e390 <am_hal_sysctrl_sleep+0x4c>
    e38a:	4a09      	ldr	r2, [pc, #36]	; (e3b0 <am_hal_sysctrl_sleep+0x6c>)
    e38c:	6812      	ldr	r2, [r2, #0]
    e38e:	601a      	str	r2, [r3, #0]
    e390:	4a03      	ldr	r2, [pc, #12]	; (e3a0 <am_hal_sysctrl_sleep+0x5c>)
    e392:	6913      	ldr	r3, [r2, #16]
    e394:	f043 0304 	orr.w	r3, r3, #4
    e398:	6113      	str	r3, [r2, #16]
    e39a:	e7e4      	b.n	e366 <am_hal_sysctrl_sleep+0x22>
    e39c:	40020000 	.word	0x40020000
    e3a0:	e000ed00 	.word	0xe000ed00
    e3a4:	5fff0000 	.word	0x5fff0000
    e3a8:	10001150 	.word	0x10001150
    e3ac:	10001148 	.word	0x10001148
    e3b0:	4ffff000 	.word	0x4ffff000

0000e3b4 <am_hal_tpiu_enable>:
    e3b4:	b510      	push	{r4, lr}
    e3b6:	4b23      	ldr	r3, [pc, #140]	; (e444 <am_hal_tpiu_enable+0x90>)
    e3b8:	6804      	ldr	r4, [r0, #0]
    e3ba:	2200      	movs	r2, #0
    e3bc:	b084      	sub	sp, #16
    e3be:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    e3c2:	b334      	cbz	r4, e412 <am_hal_tpiu_enable+0x5e>
    e3c4:	4a20      	ldr	r2, [pc, #128]	; (e448 <am_hal_tpiu_enable+0x94>)
    e3c6:	4921      	ldr	r1, [pc, #132]	; (e44c <am_hal_tpiu_enable+0x98>)
    e3c8:	2001      	movs	r0, #1
    e3ca:	6058      	str	r0, [r3, #4]
    e3cc:	f5a4 4361 	sub.w	r3, r4, #57600	; 0xe100
    e3d0:	a801      	add	r0, sp, #4
    e3d2:	428b      	cmp	r3, r1
    e3d4:	bf88      	it	hi
    e3d6:	4614      	movhi	r4, r2
    e3d8:	f7ff faf2 	bl	d9c0 <am_hal_clkgen_status_get>
    e3dc:	9b01      	ldr	r3, [sp, #4]
    e3de:	1c5a      	adds	r2, r3, #1
    e3e0:	d02d      	beq.n	e43e <am_hal_tpiu_enable+0x8a>
    e3e2:	08db      	lsrs	r3, r3, #3
    e3e4:	fbb3 f4f4 	udiv	r4, r3, r4
    e3e8:	3c01      	subs	r4, #1
    e3ea:	b2a4      	uxth	r4, r4
    e3ec:	4b15      	ldr	r3, [pc, #84]	; (e444 <am_hal_tpiu_enable+0x90>)
    e3ee:	4a18      	ldr	r2, [pc, #96]	; (e450 <am_hal_tpiu_enable+0x9c>)
    e3f0:	611c      	str	r4, [r3, #16]
    e3f2:	2102      	movs	r1, #2
    e3f4:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
    e3f8:	2000      	movs	r0, #0
    e3fa:	f240 2101 	movw	r1, #513	; 0x201
    e3fe:	f8c3 0f00 	str.w	r0, [r3, #3840]	; 0xf00
    e402:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
    e406:	f44f 7048 	mov.w	r0, #800	; 0x320
    e40a:	f7ff faf7 	bl	d9fc <am_hal_flash_delay>
    e40e:	b004      	add	sp, #16
    e410:	bd10      	pop	{r4, pc}
    e412:	6902      	ldr	r2, [r0, #16]
    e414:	611a      	str	r2, [r3, #16]
    e416:	6882      	ldr	r2, [r0, #8]
    e418:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    e41c:	68c1      	ldr	r1, [r0, #12]
    e41e:	2201      	movs	r2, #1
    e420:	3901      	subs	r1, #1
    e422:	408a      	lsls	r2, r1
    e424:	605a      	str	r2, [r3, #4]
    e426:	f8c3 4f00 	str.w	r4, [r3, #3840]	; 0xf00
    e42a:	4a09      	ldr	r2, [pc, #36]	; (e450 <am_hal_tpiu_enable+0x9c>)
    e42c:	6843      	ldr	r3, [r0, #4]
    e42e:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    e432:	f44f 7048 	mov.w	r0, #800	; 0x320
    e436:	f7ff fae1 	bl	d9fc <am_hal_flash_delay>
    e43a:	b004      	add	sp, #16
    e43c:	bd10      	pop	{r4, pc}
    e43e:	2405      	movs	r4, #5
    e440:	e7d4      	b.n	e3ec <am_hal_tpiu_enable+0x38>
    e442:	bf00      	nop
    e444:	e0040000 	.word	0xe0040000
    e448:	000f4240 	.word	0x000f4240
    e44c:	001da380 	.word	0x001da380
    e450:	40020000 	.word	0x40020000

0000e454 <am_hal_uart_deinitialize>:
    e454:	b170      	cbz	r0, e474 <am_hal_uart_deinitialize+0x20>
    e456:	6803      	ldr	r3, [r0, #0]
    e458:	4a07      	ldr	r2, [pc, #28]	; (e478 <am_hal_uart_deinitialize+0x24>)
    e45a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e45e:	4293      	cmp	r3, r2
    e460:	d108      	bne.n	e474 <am_hal_uart_deinitialize+0x20>
    e462:	78c2      	ldrb	r2, [r0, #3]
    e464:	2300      	movs	r3, #0
    e466:	f36f 0200 	bfc	r2, #0, #1
    e46a:	70c2      	strb	r2, [r0, #3]
    e46c:	6243      	str	r3, [r0, #36]	; 0x24
    e46e:	7103      	strb	r3, [r0, #4]
    e470:	4618      	mov	r0, r3
    e472:	4770      	bx	lr
    e474:	2002      	movs	r0, #2
    e476:	4770      	bx	lr
    e478:	01ea9e06 	.word	0x01ea9e06

0000e47c <am_hal_uart_power_control>:
    e47c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e47e:	4604      	mov	r4, r0
    e480:	6800      	ldr	r0, [r0, #0]
    e482:	4b39      	ldr	r3, [pc, #228]	; (e568 <am_hal_uart_power_control+0xec>)
    e484:	f020 467e 	bic.w	r6, r0, #4261412864	; 0xfe000000
    e488:	429e      	cmp	r6, r3
    e48a:	b085      	sub	sp, #20
    e48c:	d13f      	bne.n	e50e <am_hal_uart_power_control+0x92>
    e48e:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e490:	f105 0008 	add.w	r0, r5, #8
    e494:	b2c7      	uxtb	r7, r0
    e496:	b189      	cbz	r1, e4bc <am_hal_uart_power_control+0x40>
    e498:	3901      	subs	r1, #1
    e49a:	2901      	cmp	r1, #1
    e49c:	d834      	bhi.n	e508 <am_hal_uart_power_control+0x8c>
    e49e:	2a00      	cmp	r2, #0
    e4a0:	d138      	bne.n	e514 <am_hal_uart_power_control+0x98>
    e4a2:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e4a6:	351c      	adds	r5, #28
    e4a8:	032d      	lsls	r5, r5, #12
    e4aa:	f04f 33ff 	mov.w	r3, #4294967295
    e4ae:	646b      	str	r3, [r5, #68]	; 0x44
    e4b0:	4638      	mov	r0, r7
    e4b2:	f7ff fdd1 	bl	e058 <am_hal_pwrctrl_periph_disable>
    e4b6:	2000      	movs	r0, #0
    e4b8:	b005      	add	sp, #20
    e4ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e4bc:	2a00      	cmp	r2, #0
    e4be:	d04a      	beq.n	e556 <am_hal_uart_power_control+0xda>
    e4c0:	7923      	ldrb	r3, [r4, #4]
    e4c2:	2b00      	cmp	r3, #0
    e4c4:	d04e      	beq.n	e564 <am_hal_uart_power_control+0xe8>
    e4c6:	4638      	mov	r0, r7
    e4c8:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e4cc:	9101      	str	r1, [sp, #4]
    e4ce:	351c      	adds	r5, #28
    e4d0:	f7ff fd98 	bl	e004 <am_hal_pwrctrl_periph_enable>
    e4d4:	f7ff fc5c 	bl	dd90 <am_hal_interrupt_master_disable>
    e4d8:	032d      	lsls	r5, r5, #12
    e4da:	68a3      	ldr	r3, [r4, #8]
    e4dc:	9002      	str	r0, [sp, #8]
    e4de:	622b      	str	r3, [r5, #32]
    e4e0:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    e4e4:	626a      	str	r2, [r5, #36]	; 0x24
    e4e6:	62ab      	str	r3, [r5, #40]	; 0x28
    e4e8:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
    e4ec:	62ea      	str	r2, [r5, #44]	; 0x2c
    e4ee:	632b      	str	r3, [r5, #48]	; 0x30
    e4f0:	e9d4 2307 	ldrd	r2, r3, [r4, #28]
    e4f4:	9901      	ldr	r1, [sp, #4]
    e4f6:	636a      	str	r2, [r5, #52]	; 0x34
    e4f8:	63ab      	str	r3, [r5, #56]	; 0x38
    e4fa:	9802      	ldr	r0, [sp, #8]
    e4fc:	7121      	strb	r1, [r4, #4]
    e4fe:	f7ff fc4b 	bl	dd98 <am_hal_interrupt_master_set>
    e502:	9901      	ldr	r1, [sp, #4]
    e504:	4608      	mov	r0, r1
    e506:	e000      	b.n	e50a <am_hal_uart_power_control+0x8e>
    e508:	2006      	movs	r0, #6
    e50a:	b005      	add	sp, #20
    e50c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e50e:	2002      	movs	r0, #2
    e510:	b005      	add	sp, #20
    e512:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e514:	f7ff fc3c 	bl	dd90 <am_hal_interrupt_master_disable>
    e518:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e51c:	351c      	adds	r5, #28
    e51e:	032d      	lsls	r5, r5, #12
    e520:	9003      	str	r0, [sp, #12]
    e522:	6a2b      	ldr	r3, [r5, #32]
    e524:	60a3      	str	r3, [r4, #8]
    e526:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e528:	60e3      	str	r3, [r4, #12]
    e52a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e52c:	6123      	str	r3, [r4, #16]
    e52e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    e530:	6163      	str	r3, [r4, #20]
    e532:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    e534:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    e536:	61a3      	str	r3, [r4, #24]
    e538:	6bab      	ldr	r3, [r5, #56]	; 0x38
    e53a:	61e2      	str	r2, [r4, #28]
    e53c:	2201      	movs	r2, #1
    e53e:	6223      	str	r3, [r4, #32]
    e540:	9803      	ldr	r0, [sp, #12]
    e542:	7122      	strb	r2, [r4, #4]
    e544:	f7ff fc28 	bl	dd98 <am_hal_interrupt_master_set>
    e548:	6823      	ldr	r3, [r4, #0]
    e54a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e54e:	42b3      	cmp	r3, r6
    e550:	d1ae      	bne.n	e4b0 <am_hal_uart_power_control+0x34>
    e552:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e554:	e7a5      	b.n	e4a2 <am_hal_uart_power_control+0x26>
    e556:	4638      	mov	r0, r7
    e558:	9201      	str	r2, [sp, #4]
    e55a:	f7ff fd53 	bl	e004 <am_hal_pwrctrl_periph_enable>
    e55e:	9a01      	ldr	r2, [sp, #4]
    e560:	4610      	mov	r0, r2
    e562:	e7d2      	b.n	e50a <am_hal_uart_power_control+0x8e>
    e564:	2007      	movs	r0, #7
    e566:	e7d0      	b.n	e50a <am_hal_uart_power_control+0x8e>
    e568:	01ea9e06 	.word	0x01ea9e06

0000e56c <am_hal_uart_tx_flush>:
    e56c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    e570:	b570      	push	{r4, r5, r6, lr}
    e572:	6a45      	ldr	r5, [r0, #36]	; 0x24
    e574:	4604      	mov	r4, r0
    e576:	b15b      	cbz	r3, e590 <am_hal_uart_tx_flush+0x24>
    e578:	6b43      	ldr	r3, [r0, #52]	; 0x34
    e57a:	b14b      	cbz	r3, e590 <am_hal_uart_tx_flush+0x24>
    e57c:	4e0e      	ldr	r6, [pc, #56]	; (e5b8 <am_hal_uart_tx_flush+0x4c>)
    e57e:	6e20      	ldr	r0, [r4, #96]	; 0x60
    e580:	fbb6 f0f0 	udiv	r0, r6, r0
    e584:	0100      	lsls	r0, r0, #4
    e586:	f7ff fa39 	bl	d9fc <am_hal_flash_delay>
    e58a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e58c:	2b00      	cmp	r3, #0
    e58e:	d1f6      	bne.n	e57e <am_hal_uart_tx_flush+0x12>
    e590:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e594:	351c      	adds	r5, #28
    e596:	032d      	lsls	r5, r5, #12
    e598:	69ab      	ldr	r3, [r5, #24]
    e59a:	071a      	lsls	r2, r3, #28
    e59c:	d509      	bpl.n	e5b2 <am_hal_uart_tx_flush+0x46>
    e59e:	4e06      	ldr	r6, [pc, #24]	; (e5b8 <am_hal_uart_tx_flush+0x4c>)
    e5a0:	6e23      	ldr	r3, [r4, #96]	; 0x60
    e5a2:	fbb6 f3f3 	udiv	r3, r6, r3
    e5a6:	0118      	lsls	r0, r3, #4
    e5a8:	f7ff fa28 	bl	d9fc <am_hal_flash_delay>
    e5ac:	69ab      	ldr	r3, [r5, #24]
    e5ae:	071b      	lsls	r3, r3, #28
    e5b0:	d4f6      	bmi.n	e5a0 <am_hal_uart_tx_flush+0x34>
    e5b2:	2000      	movs	r0, #0
    e5b4:	bd70      	pop	{r4, r5, r6, pc}
    e5b6:	bf00      	nop
    e5b8:	00b71b00 	.word	0x00b71b00
    e5bc:	6c6c6548 	.word	0x6c6c6548
    e5c0:	6f57206f 	.word	0x6f57206f
    e5c4:	21646c72 	.word	0x21646c72
    e5c8:	00000a0a 	.word	0x00000a0a
    e5cc:	646e6556 	.word	0x646e6556
    e5d0:	4e20726f 	.word	0x4e20726f
    e5d4:	3a656d61 	.word	0x3a656d61
    e5d8:	0a732520 	.word	0x0a732520
    e5dc:	00000000 	.word	0x00000000
    e5e0:	69766544 	.word	0x69766544
    e5e4:	74206563 	.word	0x74206563
    e5e8:	3a657079 	.word	0x3a657079
    e5ec:	0a732520 	.word	0x0a732520
    e5f0:	00000000 	.word	0x00000000
    e5f4:	00736559 	.word	0x00736559
    e5f8:	00006f4e 	.word	0x00006f4e
    e5fc:	6c617551 	.word	0x6c617551
    e600:	65696669 	.word	0x65696669
    e604:	25203a64 	.word	0x25203a64
    e608:	00000a73 	.word	0x00000a73
    e60c:	69766544 	.word	0x69766544
    e610:	49206563 	.word	0x49206563
    e614:	3a6f666e 	.word	0x3a6f666e
    e618:	6150090a 	.word	0x6150090a
    e61c:	6e207472 	.word	0x6e207472
    e620:	65626d75 	.word	0x65626d75
    e624:	30203a72 	.word	0x30203a72
    e628:	38302578 	.word	0x38302578
    e62c:	43090a58 	.word	0x43090a58
    e630:	20706968 	.word	0x20706968
    e634:	3a304449 	.word	0x3a304449
    e638:	20202020 	.word	0x20202020
    e63c:	30257830 	.word	0x30257830
    e640:	090a5838 	.word	0x090a5838
    e644:	70696843 	.word	0x70696843
    e648:	31444920 	.word	0x31444920
    e64c:	2020203a 	.word	0x2020203a
    e650:	25783020 	.word	0x25783020
    e654:	0a583830 	.word	0x0a583830
    e658:	76655209 	.word	0x76655209
    e65c:	6f697369 	.word	0x6f697369
    e660:	20203a6e 	.word	0x20203a6e
    e664:	78302020 	.word	0x78302020
    e668:	58383025 	.word	0x58383025
    e66c:	65522820 	.word	0x65522820
    e670:	25632576 	.word	0x25632576
    e674:	000a2963 	.word	0x000a2963
    e678:	616c4609 	.word	0x616c4609
    e67c:	73206873 	.word	0x73206873
    e680:	3a657a69 	.word	0x3a657a69
    e684:	37252020 	.word	0x37252020
    e688:	25282064 	.word	0x25282064
    e68c:	424b2064 	.word	0x424b2064
    e690:	0a297325 	.word	0x0a297325
    e694:	00000000 	.word	0x00000000
    e698:	41525309 	.word	0x41525309
    e69c:	6973204d 	.word	0x6973204d
    e6a0:	203a657a 	.word	0x203a657a
    e6a4:	37252020 	.word	0x37252020
    e6a8:	25282064 	.word	0x25282064
    e6ac:	424b2064 	.word	0x424b2064
    e6b0:	0a297325 	.word	0x0a297325
    e6b4:	0000000a 	.word	0x0000000a
    e6b8:	20434347 	.word	0x20434347
    e6bc:	332e3031 	.word	0x332e3031
    e6c0:	3220312e 	.word	0x3220312e
    e6c4:	30313230 	.word	0x30313230
    e6c8:	20343238 	.word	0x20343238
    e6cc:	6c657228 	.word	0x6c657228
    e6d0:	65736165 	.word	0x65736165
    e6d4:	00000029 	.word	0x00000029
    e6d8:	20707041 	.word	0x20707041
    e6dc:	706d6f43 	.word	0x706d6f43
    e6e0:	72656c69 	.word	0x72656c69
    e6e4:	2020203a 	.word	0x2020203a
    e6e8:	0a732520 	.word	0x0a732520
    e6ec:	00000000 	.word	0x00000000
    e6f0:	204c4148 	.word	0x204c4148
    e6f4:	706d6f43 	.word	0x706d6f43
    e6f8:	72656c69 	.word	0x72656c69
    e6fc:	2020203a 	.word	0x2020203a
    e700:	0a732520 	.word	0x0a732520
    e704:	00000000 	.word	0x00000000
    e708:	204c4148 	.word	0x204c4148
    e70c:	204b4453 	.word	0x204b4453
    e710:	73726576 	.word	0x73726576
    e714:	3a6e6f69 	.word	0x3a6e6f69
    e718:	2e642520 	.word	0x2e642520
    e71c:	252e6425 	.word	0x252e6425
    e720:	00000a64 	.word	0x00000a64
    e724:	525f4d41 	.word	0x525f4d41
    e728:	00004745 	.word	0x00004745
    e72c:	49534d43 	.word	0x49534d43
    e730:	00000053 	.word	0x00000053
    e734:	204c4148 	.word	0x204c4148
    e738:	706d6f63 	.word	0x706d6f63
    e73c:	64656c69 	.word	0x64656c69
    e740:	74697720 	.word	0x74697720
    e744:	73252068 	.word	0x73252068
    e748:	7974732d 	.word	0x7974732d
    e74c:	7220656c 	.word	0x7220656c
    e750:	73696765 	.word	0x73696765
    e754:	73726574 	.word	0x73726574
    e758:	0000000a 	.word	0x0000000a
    e75c:	4f464e49 	.word	0x4f464e49
    e760:	61762030 	.word	0x61762030
    e764:	2c64696c 	.word	0x2c64696c
    e768:	72657620 	.word	0x72657620
    e76c:	25783020 	.word	0x25783020
    e770:	00000058 	.word	0x00000058
    e774:	4f464e49 	.word	0x4f464e49
    e778:	6e692030 	.word	0x6e692030
    e77c:	696c6176 	.word	0x696c6176
    e780:	00000064 	.word	0x00000064
    e784:	204c4253 	.word	0x204c4253
    e788:	3a726576 	.word	0x3a726576
    e78c:	25783020 	.word	0x25783020
    e790:	202d2078 	.word	0x202d2078
    e794:	78257830 	.word	0x78257830
    e798:	7325202c 	.word	0x7325202c
    e79c:	0000000a 	.word	0x0000000a
    e7a0:	685f6d61 	.word	0x685f6d61
    e7a4:	735f6c61 	.word	0x735f6c61
    e7a8:	72756365 	.word	0x72756365
    e7ac:	5f797469 	.word	0x5f797469
    e7b0:	5f746567 	.word	0x5f746567
    e7b4:	6f666e69 	.word	0x6f666e69
    e7b8:	69616620 	.word	0x69616620
    e7bc:	2064656c 	.word	0x2064656c
    e7c0:	58257830 	.word	0x58257830
    e7c4:	0000000a 	.word	0x0000000a
    e7c8:	0a0a0a0a 	.word	0x0a0a0a0a
    e7cc:	0a0a0a0a 	.word	0x0a0a0a0a
    e7d0:	0a0a0a0a 	.word	0x0a0a0a0a
    e7d4:	0a0a0a0a 	.word	0x0a0a0a0a
    e7d8:	00000a0a 	.word	0x00000a0a

0000e7dc <g_DeviceNameApollo>:
    e7dc:	6c6f7041 00006f6c                       Apollo..

0000e7e4 <g_DeviceNameApollo2>:
    e7e4:	6c6f7041 00326f6c                       Apollo2.

0000e7ec <g_DeviceNameApollo3>:
    e7ec:	6c6f7041 20336f6c 65756c42 00000000     Apollo3 Blue....

0000e7fc <g_DeviceNameApollo3p>:
    e7fc:	6c6f7041 20336f6c 65756c42 756c5020     Apollo3 Blue Plu
    e80c:	00000073                                s...

0000e810 <g_DeviceNameApollo4>:
    e810:	6c6f7041 00346f6c                       Apollo4.

0000e818 <g_ui8VendorNameAmbq>:
    e818:	51424d41 00000000                       AMBQ....

0000e820 <g_ui8VendorNameUnknown>:
    e820:	3f3f3f3f 00000000                       ????....

0000e828 <g_ui8DeviceNameUnknown>:
    e828:	6e6b6e55 206e776f 69766564 00006563     Unknown device..

0000e838 <g_AM_BSP_GPIO_ITM_SWO>:
    e838:	00000002                                ....

0000e83c <am_hal_cachectrl_defaults>:
    e83c:	00000308                                ....

0000e840 <g_ui32HALversion>:
    e840:	02050000                                ....

0000e844 <g_ui8HALcompiler>:
    e844:	20434347 332e3031 3220312e 30313230     GCC 10.3.1 20210
    e854:	20343238 6c657228 65736165 00000029     824 (release)...

0000e864 <g_AM_HAL_GPIO_DISABLE>:
    e864:	00000003                                ....

0000e868 <g_AM_HAL_GPIO_OUTPUT>:
    e868:	00000403                                ....

0000e86c <g_ui8Bit76Capabilities>:
    e86c:	02800101 80010180 80800101 80808080     ................
    e87c:	80808080 80808008 01800180 80808080     ................
    e88c:	80808080 01800402 01010401 80808080     ................
    e89c:	00000101                                ....

0000e8a0 <g_ui8Inpen>:
    e8a0:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
    e8b0:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
    e8c0:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
    e8d0:	00003130                                01..

0000e8d4 <g_ui8NCEtable>:
    e8d4:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    e8e4:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    e8f4:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    e904:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    e914:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    e924:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    e934:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    e944:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    e954:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    e964:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    e974:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    e984:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    e994:	32221202 43231303                       .."2..#C

0000e99c <g_ui8nCEpins>:
    e99c:	02070707 00080802 01020202 01010101     ................
    e9ac:	01010101 01010101 01010101 01010101     ................
    e9bc:	01010101 08010101 01010008 01010101     ................
    e9cc:	00000101                                ....

0000e9d0 <g_am_hal_mcuctrl_flash_size>:
    e9d0:	00004000 00008000 00010000 00020000     .@..............
    e9e0:	00040000 00080000 00100000 00200000     .............. .
    e9f0:	00180000 00000000 00000000 00000000     ................
	...

0000ea10 <g_am_hal_mcuctrl_sram_size>:
    ea10:	00004000 00008000 00010000 00020000     .@..............
    ea20:	00040000 00080000 00100000 00060000     ................
    ea30:	000c0000 00000000 00000000 00000000     ................
	...

0000ea50 <am_hal_pwrctrl_peripheral_control>:
	...
    ea5c:	00000001 00000004 00000004 00000002     ................
    ea6c:	00000008 00000008 00000004 00000008     ................
    ea7c:	00000008 00000008 00000008 00000008     ................
    ea8c:	00000010 00000010 00000010 00000020     ............ ...
    ea9c:	00000010 00000010 00000040 00000010     ........@.......
    eaac:	00000010 00000080 00000004 00000004     ................
    eabc:	00000100 00000004 00000004 00000200     ................
    eacc:	00000020 00000020 00000400 00000004      ... ...........
    eadc:	00000004 00000800 00000040 00000040     ........@...@...
    eaec:	00001000 00000080 00000080 00002000     ............. ..
    eafc:	00000100 00000100                       ........
