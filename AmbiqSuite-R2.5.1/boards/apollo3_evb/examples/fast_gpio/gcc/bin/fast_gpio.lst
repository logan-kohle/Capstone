
bin/fast_gpio.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 49 d1 00 00 3d d1 00 00 55 c5 00 00     ....I...=...U...
    c010:	41 d1 00 00 41 d1 00 00 41 d1 00 00 00 00 00 00     A...A...A.......
	...
    c02c:	45 d1 00 00 45 d1 00 00 00 00 00 00 45 d1 00 00     E...E.......E...
    c03c:	45 d1 00 00 45 d1 00 00 45 d1 00 00 45 d1 00 00     E...E...E...E...
    c04c:	45 d1 00 00 45 d1 00 00 45 d1 00 00 45 d1 00 00     E...E...E...E...
    c05c:	45 d1 00 00 45 d1 00 00 45 d1 00 00 45 d1 00 00     E...E...E...E...
    c06c:	45 d1 00 00 45 d1 00 00 45 d1 00 00 45 d1 00 00     E...E...E...E...
    c07c:	45 d1 00 00 45 d1 00 00 45 d1 00 00 45 d1 00 00     E...E...E...E...
    c08c:	45 d1 00 00 45 d1 00 00 45 d1 00 00 45 d1 00 00     E...E...E...E...
    c09c:	45 d1 00 00 45 d1 00 00 45 d1 00 00 45 d1 00 00     E...E...E...E...
    c0ac:	45 d1 00 00 45 d1 00 00 45 d1 00 00 45 d1 00 00     E...E...E...E...
    c0bc:	45 d1 00 00                                         E...

0000c0c0 <__Patchable>:
	...

0000c100 <memcpy>:
    c100:	4684      	mov	ip, r0
    c102:	ea41 0300 	orr.w	r3, r1, r0
    c106:	f013 0303 	ands.w	r3, r3, #3
    c10a:	d16d      	bne.n	c1e8 <memcpy+0xe8>
    c10c:	3a40      	subs	r2, #64	; 0x40
    c10e:	d341      	bcc.n	c194 <memcpy+0x94>
    c110:	f851 3b04 	ldr.w	r3, [r1], #4
    c114:	f840 3b04 	str.w	r3, [r0], #4
    c118:	f851 3b04 	ldr.w	r3, [r1], #4
    c11c:	f840 3b04 	str.w	r3, [r0], #4
    c120:	f851 3b04 	ldr.w	r3, [r1], #4
    c124:	f840 3b04 	str.w	r3, [r0], #4
    c128:	f851 3b04 	ldr.w	r3, [r1], #4
    c12c:	f840 3b04 	str.w	r3, [r0], #4
    c130:	f851 3b04 	ldr.w	r3, [r1], #4
    c134:	f840 3b04 	str.w	r3, [r0], #4
    c138:	f851 3b04 	ldr.w	r3, [r1], #4
    c13c:	f840 3b04 	str.w	r3, [r0], #4
    c140:	f851 3b04 	ldr.w	r3, [r1], #4
    c144:	f840 3b04 	str.w	r3, [r0], #4
    c148:	f851 3b04 	ldr.w	r3, [r1], #4
    c14c:	f840 3b04 	str.w	r3, [r0], #4
    c150:	f851 3b04 	ldr.w	r3, [r1], #4
    c154:	f840 3b04 	str.w	r3, [r0], #4
    c158:	f851 3b04 	ldr.w	r3, [r1], #4
    c15c:	f840 3b04 	str.w	r3, [r0], #4
    c160:	f851 3b04 	ldr.w	r3, [r1], #4
    c164:	f840 3b04 	str.w	r3, [r0], #4
    c168:	f851 3b04 	ldr.w	r3, [r1], #4
    c16c:	f840 3b04 	str.w	r3, [r0], #4
    c170:	f851 3b04 	ldr.w	r3, [r1], #4
    c174:	f840 3b04 	str.w	r3, [r0], #4
    c178:	f851 3b04 	ldr.w	r3, [r1], #4
    c17c:	f840 3b04 	str.w	r3, [r0], #4
    c180:	f851 3b04 	ldr.w	r3, [r1], #4
    c184:	f840 3b04 	str.w	r3, [r0], #4
    c188:	f851 3b04 	ldr.w	r3, [r1], #4
    c18c:	f840 3b04 	str.w	r3, [r0], #4
    c190:	3a40      	subs	r2, #64	; 0x40
    c192:	d2bd      	bcs.n	c110 <memcpy+0x10>
    c194:	3230      	adds	r2, #48	; 0x30
    c196:	d311      	bcc.n	c1bc <memcpy+0xbc>
    c198:	f851 3b04 	ldr.w	r3, [r1], #4
    c19c:	f840 3b04 	str.w	r3, [r0], #4
    c1a0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1a4:	f840 3b04 	str.w	r3, [r0], #4
    c1a8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1ac:	f840 3b04 	str.w	r3, [r0], #4
    c1b0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1b4:	f840 3b04 	str.w	r3, [r0], #4
    c1b8:	3a10      	subs	r2, #16
    c1ba:	d2ed      	bcs.n	c198 <memcpy+0x98>
    c1bc:	320c      	adds	r2, #12
    c1be:	d305      	bcc.n	c1cc <memcpy+0xcc>
    c1c0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1c4:	f840 3b04 	str.w	r3, [r0], #4
    c1c8:	3a04      	subs	r2, #4
    c1ca:	d2f9      	bcs.n	c1c0 <memcpy+0xc0>
    c1cc:	3204      	adds	r2, #4
    c1ce:	d008      	beq.n	c1e2 <memcpy+0xe2>
    c1d0:	07d2      	lsls	r2, r2, #31
    c1d2:	bf1c      	itt	ne
    c1d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c1d8:	f800 3b01 	strbne.w	r3, [r0], #1
    c1dc:	d301      	bcc.n	c1e2 <memcpy+0xe2>
    c1de:	880b      	ldrh	r3, [r1, #0]
    c1e0:	8003      	strh	r3, [r0, #0]
    c1e2:	4660      	mov	r0, ip
    c1e4:	4770      	bx	lr
    c1e6:	bf00      	nop
    c1e8:	2a08      	cmp	r2, #8
    c1ea:	d313      	bcc.n	c214 <memcpy+0x114>
    c1ec:	078b      	lsls	r3, r1, #30
    c1ee:	d08d      	beq.n	c10c <memcpy+0xc>
    c1f0:	f010 0303 	ands.w	r3, r0, #3
    c1f4:	d08a      	beq.n	c10c <memcpy+0xc>
    c1f6:	f1c3 0304 	rsb	r3, r3, #4
    c1fa:	1ad2      	subs	r2, r2, r3
    c1fc:	07db      	lsls	r3, r3, #31
    c1fe:	bf1c      	itt	ne
    c200:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c204:	f800 3b01 	strbne.w	r3, [r0], #1
    c208:	d380      	bcc.n	c10c <memcpy+0xc>
    c20a:	f831 3b02 	ldrh.w	r3, [r1], #2
    c20e:	f820 3b02 	strh.w	r3, [r0], #2
    c212:	e77b      	b.n	c10c <memcpy+0xc>
    c214:	3a04      	subs	r2, #4
    c216:	d3d9      	bcc.n	c1cc <memcpy+0xcc>
    c218:	3a01      	subs	r2, #1
    c21a:	f811 3b01 	ldrb.w	r3, [r1], #1
    c21e:	f800 3b01 	strb.w	r3, [r0], #1
    c222:	d2f9      	bcs.n	c218 <memcpy+0x118>
    c224:	780b      	ldrb	r3, [r1, #0]
    c226:	7003      	strb	r3, [r0, #0]
    c228:	784b      	ldrb	r3, [r1, #1]
    c22a:	7043      	strb	r3, [r0, #1]
    c22c:	788b      	ldrb	r3, [r1, #2]
    c22e:	7083      	strb	r3, [r0, #2]
    c230:	4660      	mov	r0, ip
    c232:	4770      	bx	lr

0000c234 <__aeabi_d2f>:
    c234:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c238:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c23c:	bf24      	itt	cs
    c23e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c242:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c246:	d90d      	bls.n	c264 <__aeabi_d2f+0x30>
    c248:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c24c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c250:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c254:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c258:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c25c:	bf08      	it	eq
    c25e:	f020 0001 	biceq.w	r0, r0, #1
    c262:	4770      	bx	lr
    c264:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c268:	d121      	bne.n	c2ae <__aeabi_d2f+0x7a>
    c26a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c26e:	bfbc      	itt	lt
    c270:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c274:	4770      	bxlt	lr
    c276:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c27a:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c27e:	f1c2 0218 	rsb	r2, r2, #24
    c282:	f1c2 0c20 	rsb	ip, r2, #32
    c286:	fa10 f30c 	lsls.w	r3, r0, ip
    c28a:	fa20 f002 	lsr.w	r0, r0, r2
    c28e:	bf18      	it	ne
    c290:	f040 0001 	orrne.w	r0, r0, #1
    c294:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c298:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c29c:	fa03 fc0c 	lsl.w	ip, r3, ip
    c2a0:	ea40 000c 	orr.w	r0, r0, ip
    c2a4:	fa23 f302 	lsr.w	r3, r3, r2
    c2a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c2ac:	e7cc      	b.n	c248 <__aeabi_d2f+0x14>
    c2ae:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c2b2:	d107      	bne.n	c2c4 <__aeabi_d2f+0x90>
    c2b4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c2b8:	bf1e      	ittt	ne
    c2ba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c2be:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c2c2:	4770      	bxne	lr
    c2c4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c2c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c2cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c2d0:	4770      	bx	lr
    c2d2:	bf00      	nop

0000c2d4 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
    c2d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t ui32Ret, ux;

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c2d8:	2100      	movs	r1, #0
{
    c2da:	b0cc      	sub	sp, #304	; 0x130
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c2dc:	4608      	mov	r0, r1
    c2de:	f001 f985 	bl	d5ec <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c2e2:	4881      	ldr	r0, [pc, #516]	; (c4e8 <main+0x214>)
    // Configure the pins that are to be used for Fast GPIO.
    //
    am_hal_gpio_fastgpio_disable(FASTGPIO_PIN_B);
    am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    AM_HAL_GPIO_MASKCREATE(sFastGpioMask);
    ui32Ret = am_hal_gpio_fast_pinconfig(AM_HAL_GPIO_MASKBIT(psFastGpioMask, FASTGPIO_PIN_B),
    c2e4:	4e81      	ldr	r6, [pc, #516]	; (c4ec <main+0x218>)
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c2e6:	f000 ffd9 	bl	d29c <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c2ea:	f000 fffb 	bl	d2e4 <am_hal_cachectrl_enable>
    am_bsp_low_power_init();
    c2ee:	f000 ff5f 	bl	d1b0 <am_bsp_low_power_init>
    am_bsp_itm_printf_enable();
    c2f2:	f000 ffb3 	bl	d25c <am_bsp_itm_printf_enable>
    am_util_stdio_terminal_clear();
    c2f6:	f000 ff1b 	bl	d130 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Fast GPIO Example\n");
    c2fa:	487d      	ldr	r0, [pc, #500]	; (c4f0 <main+0x21c>)
    c2fc:	f000 fefe 	bl	d0fc <am_util_stdio_printf>
    am_util_stdio_printf("When run on an Apollo3 EVB:\n");
    c300:	487c      	ldr	r0, [pc, #496]	; (c4f4 <main+0x220>)
    c302:	f000 fefb 	bl	d0fc <am_util_stdio_printf>
    am_util_stdio_printf(" - An ~24MHz waveform (after instructions have cached) is output on Pin %d.\n", FASTGPIO_PIN_B);
    c306:	2101      	movs	r1, #1
    c308:	487b      	ldr	r0, [pc, #492]	; (c4f8 <main+0x224>)
    c30a:	f000 fef7 	bl	d0fc <am_util_stdio_printf>
    am_util_stdio_printf(" - Then the Apollo3 EVB LEDs display a short pattern.\n");
    c30e:	487b      	ldr	r0, [pc, #492]	; (c4fc <main+0x228>)
    c310:	f000 fef4 	bl	d0fc <am_util_stdio_printf>
    am_util_stdio_printf(" - LED0=pin %d, LED1=%d, LED2=%d, LED3=%d, LED4=%d.\n", AM_BSP_GPIO_LED0, AM_BSP_GPIO_LED1,
    c314:	2411      	movs	r4, #17
    c316:	200e      	movs	r0, #14
    c318:	230f      	movs	r3, #15
    c31a:	e9cd 0400 	strd	r0, r4, [sp]
    c31e:	221e      	movs	r2, #30
    c320:	210a      	movs	r1, #10
    c322:	4877      	ldr	r0, [pc, #476]	; (c500 <main+0x22c>)
    c324:	f000 feea 	bl	d0fc <am_util_stdio_printf>
    am_util_stdio_printf(" - Note that LED1 and LED3 of the EVB are located on the same Fast GPIO row (%d and %d).\n",
    c328:	2206      	movs	r2, #6
    c32a:	4611      	mov	r1, r2
    c32c:	4875      	ldr	r0, [pc, #468]	; (c504 <main+0x230>)
    c32e:	f000 fee5 	bl	d0fc <am_util_stdio_printf>
    am_util_stdio_printf("   Because of that, LED3 is disabled during the walk sequence and is thus skipped in the\n");
    c332:	4875      	ldr	r0, [pc, #468]	; (c508 <main+0x234>)
    c334:	f000 fee2 	bl	d0fc <am_util_stdio_printf>
    am_util_stdio_printf("   sequence. Then it is enabled during the all-blink and blinks along with LED1.\n");
    c338:	4874      	ldr	r0, [pc, #464]	; (c50c <main+0x238>)
    c33a:	f000 fedf 	bl	d0fc <am_util_stdio_printf>
    am_util_stdio_printf("\n");
    c33e:	4874      	ldr	r0, [pc, #464]	; (c510 <main+0x23c>)
    c340:	f000 fedc 	bl	d0fc <am_util_stdio_printf>
    am_util_delay_ms(100);
    c344:	2064      	movs	r0, #100	; 0x64
    c346:	f000 f8f1 	bl	c52c <am_util_delay_ms>
    am_hal_gpio_fastgpio_disable(FASTGPIO_PIN_B);
    c34a:	4a72      	ldr	r2, [pc, #456]	; (c514 <main+0x240>)
    am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c34c:	4b72      	ldr	r3, [pc, #456]	; (c518 <main+0x244>)
    am_hal_gpio_fastgpio_disable(FASTGPIO_PIN_B);
    c34e:	2002      	movs	r0, #2
    am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c350:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    am_hal_gpio_fastgpio_disable(FASTGPIO_PIN_B);
    c354:	f8c2 00b4 	str.w	r0, [r2, #180]	; 0xb4
    am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c358:	6059      	str	r1, [r3, #4]
    ui32Ret = am_hal_gpio_fast_pinconfig(AM_HAL_GPIO_MASKBIT(psFastGpioMask, FASTGPIO_PIN_B),
    c35a:	6832      	ldr	r2, [r6, #0]
    c35c:	2300      	movs	r3, #0
    c35e:	2002      	movs	r0, #2
    c360:	2100      	movs	r1, #0
    c362:	f001 fb83 	bl	da6c <am_hal_gpio_fast_pinconfig>
                                         g_AM_HAL_GPIO_OUTPUT_12, 0);
    if ( ui32Ret )
    c366:	2800      	cmp	r0, #0
    c368:	f040 80b3 	bne.w	c4d2 <main+0x1fe>
    }

    //
    // We are done printing. Disable debug printf messages on ITM.
    //
    am_bsp_debug_printf_disable();
    c36c:	f000 ff40 	bl	d1f0 <am_bsp_debug_printf_disable>
    {
        //
        // Do 20 iterations in a loop so we can achieve a 24MHz waveform.
        // With -O3, each macro call compiles into a single instruction.
        //
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 0
    c370:	4969      	ldr	r1, [pc, #420]	; (c518 <main+0x244>)
    am_bsp_debug_printf_disable();
    c372:	250a      	movs	r5, #10
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 0
    c374:	2402      	movs	r4, #2
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c376:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    while (ux--)
    c37a:	3d01      	subs	r5, #1
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 0
    c37c:	604c      	str	r4, [r1, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c37e:	6048      	str	r0, [r1, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 1
    c380:	604c      	str	r4, [r1, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c382:	6048      	str	r0, [r1, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 2
    c384:	604c      	str	r4, [r1, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c386:	6048      	str	r0, [r1, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 3
    c388:	604c      	str	r4, [r1, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c38a:	6048      	str	r0, [r1, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 4
    c38c:	604c      	str	r4, [r1, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c38e:	6048      	str	r0, [r1, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 5
    c390:	604c      	str	r4, [r1, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c392:	6048      	str	r0, [r1, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 6
    c394:	604c      	str	r4, [r1, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c396:	6048      	str	r0, [r1, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 7
    c398:	604c      	str	r4, [r1, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c39a:	6048      	str	r0, [r1, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 8
    c39c:	604c      	str	r4, [r1, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c39e:	6048      	str	r0, [r1, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 9
    c3a0:	604c      	str	r4, [r1, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c3a2:	6048      	str	r0, [r1, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 10
    c3a4:	604c      	str	r4, [r1, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c3a6:	6048      	str	r0, [r1, #4]


        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 11
    c3a8:	604c      	str	r4, [r1, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c3aa:	6048      	str	r0, [r1, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 12
    c3ac:	604c      	str	r4, [r1, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c3ae:	6048      	str	r0, [r1, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 13
    c3b0:	604c      	str	r4, [r1, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c3b2:	6048      	str	r0, [r1, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 14
    c3b4:	604c      	str	r4, [r1, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c3b6:	6048      	str	r0, [r1, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 15
    c3b8:	604c      	str	r4, [r1, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c3ba:	6048      	str	r0, [r1, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 16
    c3bc:	604c      	str	r4, [r1, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c3be:	6048      	str	r0, [r1, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 17
    c3c0:	604c      	str	r4, [r1, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c3c2:	6048      	str	r0, [r1, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 18
    c3c4:	604c      	str	r4, [r1, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c3c6:	6048      	str	r0, [r1, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 19
    c3c8:	604c      	str	r4, [r1, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c3ca:	6048      	str	r0, [r1, #4]
    while (ux--)
    c3cc:	d1d5      	bne.n	c37a <main+0xa6>
    }

    APBDMA->BBSETCLEAR = _VAL2FLD(APBDMA_BBSETCLEAR_CLEAR, 0xff);

    am_hal_gpio_fastgpio_disable(FASTGPIO_PIN_B);
    c3ce:	4b51      	ldr	r3, [pc, #324]	; (c514 <main+0x240>)
    AM_HAL_GPIO_MASKBIT(psFastGpioMask, AM_BSP_GPIO_LED0);
    AM_HAL_GPIO_MASKBIT(psFastGpioMask, AM_BSP_GPIO_LED1);
    AM_HAL_GPIO_MASKBIT(psFastGpioMask, AM_BSP_GPIO_LED2);
    AM_HAL_GPIO_MASKBIT(psFastGpioMask, AM_BSP_GPIO_LED3);
    AM_HAL_GPIO_MASKBIT(psFastGpioMask, AM_BSP_GPIO_LED4);
    ui32Ret = am_hal_gpio_fast_pinconfig(psFastGpioMask,
    c3d0:	6832      	ldr	r2, [r6, #0]
    APBDMA->BBSETCLEAR = _VAL2FLD(APBDMA_BBSETCLEAR_CLEAR, 0xff);
    c3d2:	f44f 077f 	mov.w	r7, #16711680	; 0xff0000
    c3d6:	604f      	str	r7, [r1, #4]
    am_hal_gpio_fastgpio_disable(FASTGPIO_PIN_B);
    c3d8:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED0);
    c3dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c3e0:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED1);
    c3e4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    c3e8:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED2);
    c3ec:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    c3f0:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED3);
    c3f4:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    c3f8:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED4);
    c3fc:	f8c3 00b4 	str.w	r0, [r3, #180]	; 0xb4
    am_hal_gpio_fastgpio_clr(AM_BSP_GPIO_LED0);
    c400:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    c404:	604b      	str	r3, [r1, #4]
    am_hal_gpio_fastgpio_clr(AM_BSP_GPIO_LED1);
    c406:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
    am_hal_gpio_fastgpio_clr(AM_BSP_GPIO_LED2);
    c40a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    am_hal_gpio_fastgpio_clr(AM_BSP_GPIO_LED1);
    c40e:	604e      	str	r6, [r1, #4]
    am_hal_gpio_fastgpio_clr(AM_BSP_GPIO_LED2);
    c410:	604b      	str	r3, [r1, #4]
    am_hal_gpio_fastgpio_clr(AM_BSP_GPIO_LED3);
    c412:	604e      	str	r6, [r1, #4]
    ui32Ret = am_hal_gpio_fast_pinconfig(psFastGpioMask,
    c414:	462b      	mov	r3, r5
    am_hal_gpio_fastgpio_clr(AM_BSP_GPIO_LED4);
    c416:	6048      	str	r0, [r1, #4]
    ui32Ret = am_hal_gpio_fast_pinconfig(psFastGpioMask,
    c418:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    c41c:	2100      	movs	r1, #0
    c41e:	f001 fb25 	bl	da6c <am_hal_gpio_fast_pinconfig>
                                         g_AM_HAL_GPIO_OUTPUT_12, 0);
    if ( ui32Ret )
    c422:	2800      	cmp	r0, #0
    c424:	d15a      	bne.n	c4dc <main+0x208>
    // We know for Apollo3 EVB that LED1 and 3 are on the same row. Knowing
    // that, we can demonstrate how the 2 pins will display the same value.
    // For the 4 bit sequence, we'll disable LED3 so it doesn't turn on with
    // LED1.
    //
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED3);
    c426:	f8df 80ec 	ldr.w	r8, [pc, #236]	; c514 <main+0x240>

const uint32_t g_ui32LED_pattern[][2] =
    c42a:	493c      	ldr	r1, [pc, #240]	; (c51c <main+0x248>)
};

    ux = 0;
    while ( g_ui32LED_pattern[ux][0] != 0xFFFFFFFF )
    {
        if ( g_ui32LED_pattern[ux][0] == 0xA5000001 )
    c42c:	4f3c      	ldr	r7, [pc, #240]	; (c520 <main+0x24c>)
            am_hal_gpio_fastgpio_set(ui32Led);
    c42e:	4e3a      	ldr	r6, [pc, #232]	; (c518 <main+0x244>)
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED3);
    c430:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    c434:	f8c8 30b4 	str.w	r3, [r8, #180]	; 0xb4
const uint32_t g_ui32LED_pattern[][2] =
    c438:	f44f 7294 	mov.w	r2, #296	; 0x128
    c43c:	a802      	add	r0, sp, #8
    c43e:	f7ff fe5f 	bl	c100 <memcpy>
    while ( g_ui32LED_pattern[ux][0] != 0xFFFFFFFF )
    c442:	ac02      	add	r4, sp, #8
    c444:	e007      	b.n	c456 <main+0x182>
        {
            // Enable LED3. After this, it will react the same as LED1.
            am_hal_gpio_fastgpio_enable(AM_BSP_GPIO_LED3);
    c446:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    c44a:	f8c8 30a8 	str.w	r3, [r8, #168]	; 0xa8
    while ( g_ui32LED_pattern[ux][0] != 0xFFFFFFFF )
    c44e:	f854 5f08 	ldr.w	r5, [r4, #8]!
    c452:	1c6b      	adds	r3, r5, #1
    c454:	d020      	beq.n	c498 <main+0x1c4>
        if ( g_ui32LED_pattern[ux][0] == 0xA5000001 )
    c456:	42bd      	cmp	r5, r7
    c458:	d0f5      	beq.n	c446 <main+0x172>
        if ( ui32Value & 1 )
    c45a:	07ea      	lsls	r2, r5, #31
            am_hal_gpio_fastgpio_clr(ui32Led);
    c45c:	bf54      	ite	pl
    c45e:	f44f 2380 	movpl.w	r3, #262144	; 0x40000
            am_hal_gpio_fastgpio_set(ui32Led);
    c462:	2304      	movmi	r3, #4
        }
        else
        {
            set_leds(g_ui32LED_pattern[ux][0], g_ui32LED_pattern[ux][1]);
    c464:	6860      	ldr	r0, [r4, #4]
            am_hal_gpio_fastgpio_set(ui32Led);
    c466:	6073      	str	r3, [r6, #4]
        if ( ui32Value & 1 )
    c468:	07ab      	lsls	r3, r5, #30
            am_hal_gpio_fastgpio_clr(ui32Led);
    c46a:	bf54      	ite	pl
    c46c:	f44f 0380 	movpl.w	r3, #4194304	; 0x400000
            am_hal_gpio_fastgpio_set(ui32Led);
    c470:	2340      	movmi	r3, #64	; 0x40
        if ( ui32Value & 1 )
    c472:	0769      	lsls	r1, r5, #29
            am_hal_gpio_fastgpio_set(ui32Led);
    c474:	6073      	str	r3, [r6, #4]
            am_hal_gpio_fastgpio_clr(ui32Led);
    c476:	bf54      	ite	pl
    c478:	f44f 0300 	movpl.w	r3, #8388608	; 0x800000
            am_hal_gpio_fastgpio_set(ui32Led);
    c47c:	2380      	movmi	r3, #128	; 0x80
        if ( ui32Value & 1 )
    c47e:	072a      	lsls	r2, r5, #28
            am_hal_gpio_fastgpio_set(ui32Led);
    c480:	6073      	str	r3, [r6, #4]
            am_hal_gpio_fastgpio_clr(ui32Led);
    c482:	bf54      	ite	pl
    c484:	f44f 3300 	movpl.w	r3, #131072	; 0x20000
            am_hal_gpio_fastgpio_set(ui32Led);
    c488:	2302      	movmi	r3, #2
    c48a:	6073      	str	r3, [r6, #4]
    am_util_delay_ms(ui32delayms);
    c48c:	f000 f84e 	bl	c52c <am_util_delay_ms>
    while ( g_ui32LED_pattern[ux][0] != 0xFFFFFFFF )
    c490:	f854 5f08 	ldr.w	r5, [r4, #8]!
    c494:	1c6b      	adds	r3, r5, #1
    c496:	d1de      	bne.n	c456 <main+0x182>
    }

    //
    // Disable everything.
    //
    APBDMA->BBSETCLEAR = _VAL2FLD(APBDMA_BBSETCLEAR_CLEAR, 0xff);
    c498:	491f      	ldr	r1, [pc, #124]	; (c518 <main+0x244>)
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED0);
    c49a:	4b1e      	ldr	r3, [pc, #120]	; (c514 <main+0x240>)
    APBDMA->BBSETCLEAR = _VAL2FLD(APBDMA_BBSETCLEAR_CLEAR, 0xff);
    c49c:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
    c4a0:	6048      	str	r0, [r1, #4]
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED0);
    c4a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED1);
    c4a6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED2);
    c4aa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED0);
    c4ae:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED3);
    c4b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED1);
    c4b6:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED4);
    c4ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED2);
    c4be:	f8c3 00b4 	str.w	r0, [r3, #180]	; 0xb4
}
    c4c2:	2000      	movs	r0, #0
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED3);
    c4c4:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED4);
    c4c8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
    c4cc:	b04c      	add	sp, #304	; 0x130
    c4ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c4d2:	4601      	mov	r1, r0
        am_util_stdio_printf("Error returned from am_hal_gpio_fast_pinconfig() = .\n", ui32Ret);
    c4d4:	4813      	ldr	r0, [pc, #76]	; (c524 <main+0x250>)
    c4d6:	f000 fe11 	bl	d0fc <am_util_stdio_printf>
    c4da:	e747      	b.n	c36c <main+0x98>
        am_util_stdio_printf("Error returned from LED am_hal_gpio_fast_pinconfig() = 0x%X.\n", ui32Ret);
    c4dc:	4601      	mov	r1, r0
    c4de:	4812      	ldr	r0, [pc, #72]	; (c528 <main+0x254>)
    c4e0:	f000 fe0c 	bl	d0fc <am_util_stdio_printf>
    c4e4:	e79f      	b.n	c426 <main+0x152>
    c4e6:	bf00      	nop
    c4e8:	0000e6a8 	.word	0x0000e6a8
    c4ec:	0000e6b4 	.word	0x0000e6b4
    c4f0:	0000e418 	.word	0x0000e418
    c4f4:	0000e42c 	.word	0x0000e42c
    c4f8:	0000e44c 	.word	0x0000e44c
    c4fc:	0000e49c 	.word	0x0000e49c
    c500:	0000e4d4 	.word	0x0000e4d4
    c504:	0000e50c 	.word	0x0000e50c
    c508:	0000e568 	.word	0x0000e568
    c50c:	0000e5c4 	.word	0x0000e5c4
    c510:	0000e64c 	.word	0x0000e64c
    c514:	40010000 	.word	0x40010000
    c518:	40011000 	.word	0x40011000
    c51c:	0000e2f0 	.word	0x0000e2f0
    c520:	a5000001 	.word	0xa5000001
    c524:	0000e618 	.word	0x0000e618
    c528:	0000e650 	.word	0x0000e650

0000c52c <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    c52c:	b510      	push	{r4, lr}
    c52e:	b084      	sub	sp, #16
    c530:	4604      	mov	r4, r0
    am_hal_delay_us( ui32MilliSeconds * 1000);
#else // AM_PART_APOLLO4
    uint32_t ui32Loops, ui32HFRC;
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    c532:	a801      	add	r0, sp, #4
    c534:	f001 f8f6 	bl	d724 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    c538:	9b01      	ldr	r3, [sp, #4]
    c53a:	4805      	ldr	r0, [pc, #20]	; (c550 <am_util_delay_ms+0x24>)
    c53c:	fba0 2303 	umull	r2, r3, r0, r3
    c540:	099b      	lsrs	r3, r3, #6

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    c542:	fb04 f003 	mul.w	r0, r4, r3
    c546:	f001 f90b 	bl	d760 <am_hal_flash_delay>
#endif // AM_PART_APOLLO4
}
    c54a:	b004      	add	sp, #16
    c54c:	bd10      	pop	{r4, pc}
    c54e:	bf00      	nop
    c550:	057619f1 	.word	0x057619f1

0000c554 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    c554:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    c556:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    c55a:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    c55c:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    c560:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    c564:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c568:	f000 f806 	bl	c578 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    c56c:	bd01      	pop	{r0, pc}
    c56e:	bf00      	nop

0000c570 <getStackedReg>:
}

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c570:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c572:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c574:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c576:	4770      	bx	lr

0000c578 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c578:	b510      	push	{r4, lr}
    volatile am_fault_t sFaultData;
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_t  sHalFaultData = {0};
#else
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c57a:	2300      	movs	r3, #0
{
    c57c:	b092      	sub	sp, #72	; 0x48
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c57e:	e9cd 3300 	strd	r3, r3, [sp]
    c582:	e9cd 3302 	strd	r3, r3, [sp, #8]
    c586:	e9cd 3304 	strd	r3, r3, [sp, #16]
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c58a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c58e:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c590:	f8d2 3d28 	ldr.w	r3, [r2, #3368]	; 0xd28
    c594:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c596:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c598:	b2db      	uxtb	r3, r3
    c59a:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c59e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c5a0:	f3c3 2307 	ubfx	r3, r3, #8, #8
    c5a4:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c5a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c5aa:	0c1b      	lsrs	r3, r3, #16
    c5ac:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c5b0:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
    c5b4:	930f      	str	r3, [sp, #60]	; 0x3c

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c5b6:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
    c5ba:	079b      	lsls	r3, r3, #30
{
    c5bc:	4604      	mov	r4, r0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c5be:	d437      	bmi.n	c630 <am_util_faultisr_collect_data+0xb8>
    c5c0:	f04f 33ff 	mov.w	r3, #4294967295

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c5c4:	4621      	mov	r1, r4
    c5c6:	2000      	movs	r0, #0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c5c8:	930e      	str	r3, [sp, #56]	; 0x38
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c5ca:	f7ff ffd1 	bl	c570 <getStackedReg>
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c5ce:	4621      	mov	r1, r4
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c5d0:	4603      	mov	r3, r0
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c5d2:	2001      	movs	r0, #1
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c5d4:	9306      	str	r3, [sp, #24]
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c5d6:	f7ff ffcb 	bl	c570 <getStackedReg>
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c5da:	4621      	mov	r1, r4
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c5dc:	4603      	mov	r3, r0
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c5de:	2002      	movs	r0, #2
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c5e0:	9307      	str	r3, [sp, #28]
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c5e2:	f7ff ffc5 	bl	c570 <getStackedReg>
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c5e6:	4621      	mov	r1, r4
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c5e8:	4603      	mov	r3, r0
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c5ea:	2003      	movs	r0, #3
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c5ec:	9308      	str	r3, [sp, #32]
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c5ee:	f7ff ffbf 	bl	c570 <getStackedReg>
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c5f2:	4621      	mov	r1, r4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c5f4:	4603      	mov	r3, r0
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c5f6:	2004      	movs	r0, #4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c5f8:	9309      	str	r3, [sp, #36]	; 0x24
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c5fa:	f7ff ffb9 	bl	c570 <getStackedReg>
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c5fe:	4621      	mov	r1, r4
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c600:	4603      	mov	r3, r0
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c602:	2005      	movs	r0, #5
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c604:	930a      	str	r3, [sp, #40]	; 0x28
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c606:	f7ff ffb3 	bl	c570 <getStackedReg>
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c60a:	4621      	mov	r1, r4
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c60c:	4603      	mov	r3, r0
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c60e:	2006      	movs	r0, #6
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c610:	930b      	str	r3, [sp, #44]	; 0x2c
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c612:	f7ff ffad 	bl	c570 <getStackedReg>
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c616:	4621      	mov	r1, r4
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c618:	4603      	mov	r3, r0
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c61a:	2007      	movs	r0, #7
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c61c:	930c      	str	r3, [sp, #48]	; 0x30
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c61e:	f7ff ffa7 	bl	c570 <getStackedReg>
    //
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_get(&sHalFaultData);
#else
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c622:	4669      	mov	r1, sp
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c624:	4603      	mov	r3, r0
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c626:	2002      	movs	r0, #2
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c628:	930d      	str	r3, [sp, #52]	; 0x34
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c62a:	f001 fb83 	bl	dd34 <am_hal_mcuctrl_info_get>
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    c62e:	e7fe      	b.n	c62e <am_util_faultisr_collect_data+0xb6>
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c630:	4601      	mov	r1, r0
    c632:	2006      	movs	r0, #6
    c634:	f7ff ff9c 	bl	c570 <getStackedReg>
    c638:	4603      	mov	r3, r0
    c63a:	e7c3      	b.n	c5c4 <am_util_faultisr_collect_data+0x4c>

0000c63c <divu64_10>:
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c63c:	2900      	cmp	r1, #0
    c63e:	d047      	beq.n	c6d0 <divu64_10+0x94>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c640:	0843      	lsrs	r3, r0, #1
    c642:	0882      	lsrs	r2, r0, #2
    c644:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
    c648:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
    c64c:	189b      	adds	r3, r3, r2
    c64e:	ea4f 0291 	mov.w	r2, r1, lsr #2
    c652:	eb42 0251 	adc.w	r2, r2, r1, lsr #1
        q64 += (q64 >> 4);
    c656:	ea4f 1c13 	mov.w	ip, r3, lsr #4
    c65a:	ea4c 7c02 	orr.w	ip, ip, r2, lsl #28
    c65e:	eb13 030c 	adds.w	r3, r3, ip
    c662:	eb42 1212 	adc.w	r2, r2, r2, lsr #4
        q64 += (q64 >> 8);
    c666:	ea4f 2c13 	mov.w	ip, r3, lsr #8
    c66a:	ea4c 6c02 	orr.w	ip, ip, r2, lsl #24
    c66e:	eb13 030c 	adds.w	r3, r3, ip
    c672:	eb42 2212 	adc.w	r2, r2, r2, lsr #8
        q64 += (q64 >> 16);
    c676:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    c67a:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
    c67e:	eb13 030c 	adds.w	r3, r3, ip
    c682:	eb42 4212 	adc.w	r2, r2, r2, lsr #16
        q64 += (q64 >> 32);
    c686:	189b      	adds	r3, r3, r2
    c688:	f142 0200 	adc.w	r2, r2, #0
        q64 >>= 3;
    c68c:	08db      	lsrs	r3, r3, #3
    c68e:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    c692:	08d2      	lsrs	r2, r2, #3
        r64 = ui64Val - q64*10;
        return q64 + ((r64 + 6) >> 4);
    c694:	3006      	adds	r0, #6
{
    c696:	b500      	push	{lr}
        r64 = ui64Val - q64*10;
    c698:	ea4f 0c83 	mov.w	ip, r3, lsl #2
    c69c:	ea4f 0e82 	mov.w	lr, r2, lsl #2
        return q64 + ((r64 + 6) >> 4);
    c6a0:	f141 0100 	adc.w	r1, r1, #0
        r64 = ui64Val - q64*10;
    c6a4:	ea4e 7e93 	orr.w	lr, lr, r3, lsr #30
    c6a8:	eb1c 0c03 	adds.w	ip, ip, r3
    c6ac:	eb42 0e0e 	adc.w	lr, r2, lr
    c6b0:	eb1c 0c0c 	adds.w	ip, ip, ip
    c6b4:	eb4e 0e0e 	adc.w	lr, lr, lr
        return q64 + ((r64 + 6) >> 4);
    c6b8:	ebb0 000c 	subs.w	r0, r0, ip
    c6bc:	eb61 010e 	sbc.w	r1, r1, lr
    c6c0:	0900      	lsrs	r0, r0, #4
    c6c2:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
    c6c6:	18c0      	adds	r0, r0, r3
    c6c8:	eb42 1111 	adc.w	r1, r2, r1, lsr #4
        q32 += (q32 >> 16);
        q32 >>= 3;
        r32 = ui32Val - q32*10;
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    }
}
    c6cc:	f85d fb04 	ldr.w	pc, [sp], #4
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c6d0:	0883      	lsrs	r3, r0, #2
    c6d2:	eb03 0350 	add.w	r3, r3, r0, lsr #1
        q32 += (q32 >> 4);
    c6d6:	eb03 1313 	add.w	r3, r3, r3, lsr #4
        q32 += (q32 >> 8);
    c6da:	eb03 2313 	add.w	r3, r3, r3, lsr #8
        q32 += (q32 >> 16);
    c6de:	eb03 4313 	add.w	r3, r3, r3, lsr #16
        q32 >>= 3;
    c6e2:	08db      	lsrs	r3, r3, #3
        r32 = ui32Val - q32*10;
    c6e4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c6e8:	3006      	adds	r0, #6
    c6ea:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
    c6ee:	eb03 1010 	add.w	r0, r3, r0, lsr #4
}
    c6f2:	4770      	bx	lr

0000c6f4 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c6f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c6f8:	b089      	sub	sp, #36	; 0x24
    c6fa:	ad01      	add	r5, sp, #4
        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);

        tbuf[ix++] = uMod + '0';
    c6fc:	46ae      	mov	lr, r5
    c6fe:	2401      	movs	r4, #1
    c700:	e042      	b.n	c788 <uint64_to_str+0x94>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c702:	19db      	adds	r3, r3, r7
    c704:	eb46 0651 	adc.w	r6, r6, r1, lsr #1
        q64 += (q64 >> 4);
    c708:	091f      	lsrs	r7, r3, #4
    c70a:	ea47 7706 	orr.w	r7, r7, r6, lsl #28
    c70e:	19db      	adds	r3, r3, r7
    c710:	eb46 1616 	adc.w	r6, r6, r6, lsr #4
        q64 += (q64 >> 8);
    c714:	0a1f      	lsrs	r7, r3, #8
    c716:	ea47 6706 	orr.w	r7, r7, r6, lsl #24
    c71a:	19db      	adds	r3, r3, r7
    c71c:	eb46 2616 	adc.w	r6, r6, r6, lsr #8
        q64 += (q64 >> 16);
    c720:	0c1f      	lsrs	r7, r3, #16
    c722:	ea47 4706 	orr.w	r7, r7, r6, lsl #16
    c726:	19db      	adds	r3, r3, r7
    c728:	eb46 4616 	adc.w	r6, r6, r6, lsr #16
        q64 += (q64 >> 32);
    c72c:	199b      	adds	r3, r3, r6
    c72e:	f146 0600 	adc.w	r6, r6, #0
        q64 >>= 3;
    c732:	08db      	lsrs	r3, r3, #3
    c734:	ea43 7346 	orr.w	r3, r3, r6, lsl #29
    c738:	08f6      	lsrs	r6, r6, #3
        return q64 + ((r64 + 6) >> 4);
    c73a:	1d87      	adds	r7, r0, #6
        r64 = ui64Val - q64*10;
    c73c:	ea4f 0c83 	mov.w	ip, r3, lsl #2
    c740:	ea4f 0886 	mov.w	r8, r6, lsl #2
        return q64 + ((r64 + 6) >> 4);
    c744:	f141 0100 	adc.w	r1, r1, #0
        r64 = ui64Val - q64*10;
    c748:	ea48 7893 	orr.w	r8, r8, r3, lsr #30
    c74c:	eb1c 0c03 	adds.w	ip, ip, r3
    c750:	eb46 0808 	adc.w	r8, r6, r8
    c754:	eb1c 0c0c 	adds.w	ip, ip, ip
    c758:	eb48 0808 	adc.w	r8, r8, r8
        return q64 + ((r64 + 6) >> 4);
    c75c:	ebb7 070c 	subs.w	r7, r7, ip
    c760:	eb61 0108 	sbc.w	r1, r1, r8
    c764:	093f      	lsrs	r7, r7, #4
    c766:	ea47 7701 	orr.w	r7, r7, r1, lsl #28
    c76a:	18fb      	adds	r3, r7, r3
        uMod = ui64Val - (u64Tmp * 10);
    c76c:	eb03 0783 	add.w	r7, r3, r3, lsl #2
    c770:	eba0 0047 	sub.w	r0, r0, r7, lsl #1
        tbuf[ix++] = uMod + '0';
    c774:	f100 0030 	add.w	r0, r0, #48	; 0x30
    c778:	f88e 0000 	strb.w	r0, [lr]
    c77c:	eb46 1111 	adc.w	r1, r6, r1, lsr #4
    c780:	4618      	mov	r0, r3
    c782:	3401      	adds	r4, #1
    c784:	f10e 0e01 	add.w	lr, lr, #1
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c788:	ea4f 0c90 	mov.w	ip, r0, lsr #2
    c78c:	eb0c 0c50 	add.w	ip, ip, r0, lsr #1
        q32 += (q32 >> 4);
    c790:	eb0c 1c1c 	add.w	ip, ip, ip, lsr #4
        q32 += (q32 >> 8);
    c794:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
        q32 += (q32 >> 16);
    c798:	eb0c 4c1c 	add.w	ip, ip, ip, lsr #16
        q32 >>= 3;
    c79c:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
        r32 = ui32Val - q32*10;
    c7a0:	eb0c 098c 	add.w	r9, ip, ip, lsl #2
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c7a4:	0843      	lsrs	r3, r0, #1
    c7a6:	0887      	lsrs	r7, r0, #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c7a8:	f100 0806 	add.w	r8, r0, #6
    c7ac:	eba8 0849 	sub.w	r8, r8, r9, lsl #1
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c7b0:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
    c7b4:	ea47 7781 	orr.w	r7, r7, r1, lsl #30
    c7b8:	088e      	lsrs	r6, r1, #2
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    c7ba:	4681      	mov	r9, r0
    if ( ui64Val >> 32 )
    c7bc:	2900      	cmp	r1, #0
    c7be:	d1a0      	bne.n	c702 <uint64_to_str+0xe>
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c7c0:	eb0c 1018 	add.w	r0, ip, r8, lsr #4
        uMod = ui64Val - (u64Tmp * 10);
    c7c4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    c7c8:	eba9 0943 	sub.w	r9, r9, r3, lsl #1
        tbuf[ix++] = uMod + '0';
    c7cc:	f109 0930 	add.w	r9, r9, #48	; 0x30
    c7d0:	f88e 9000 	strb.w	r9, [lr]
        ui64Val = u64Tmp;
    } while ( ui64Val );
    c7d4:	2800      	cmp	r0, #0
    c7d6:	d1d4      	bne.n	c782 <uint64_to_str+0x8e>
    iNumDig = ix;

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c7d8:	b14a      	cbz	r2, c7ee <uint64_to_str+0xfa>
    {
        while ( ix-- )
    c7da:	192b      	adds	r3, r5, r4
    c7dc:	1e51      	subs	r1, r2, #1
        {
            *pcBuf++ = tbuf[ix];
    c7de:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
    c7e2:	f801 0f01 	strb.w	r0, [r1, #1]!
        while ( ix-- )
    c7e6:	429d      	cmp	r5, r3
    c7e8:	d1f9      	bne.n	c7de <uint64_to_str+0xea>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    c7ea:	2300      	movs	r3, #0
    c7ec:	5513      	strb	r3, [r2, r4]
    }

    return iNumDig;
}
    c7ee:	4620      	mov	r0, r4
    c7f0:	b009      	add	sp, #36	; 0x24
    c7f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c7f6:	bf00      	nop

0000c7f8 <am_util_stdio_printf_init>:
    g_pfnCharPrint = pfnCharPrint;
    c7f8:	4b01      	ldr	r3, [pc, #4]	; (c800 <am_util_stdio_printf_init+0x8>)
    c7fa:	6018      	str	r0, [r3, #0]
}
    c7fc:	4770      	bx	lr
    c7fe:	bf00      	nop
    c800:	10001038 	.word	0x10001038

0000c804 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    c804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    c808:	780b      	ldrb	r3, [r1, #0]
{
    c80a:	b089      	sub	sp, #36	; 0x24
    c80c:	4605      	mov	r5, r0
    while ( *pcFmt != 0x0 )
    c80e:	2b00      	cmp	r3, #0
    c810:	f000 8097 	beq.w	c942 <am_util_stdio_vsprintf+0x13e>
    c814:	4617      	mov	r7, r2
    uint32_t ui32NumChars, ui32CharCnt = 0;
    c816:	2600      	movs	r6, #0
    c818:	e00b      	b.n	c832 <am_util_stdio_vsprintf+0x2e>
        if ( *pcFmt != '%' )
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    c81a:	b125      	cbz	r5, c826 <am_util_stdio_vsprintf+0x22>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    c81c:	2b0a      	cmp	r3, #10
    c81e:	f000 8085 	beq.w	c92c <am_util_stdio_vsprintf+0x128>
                {
                    *pcBuf++ = '\r';
                    ++ui32CharCnt;
                }
                *pcBuf++ = *pcFmt;
    c822:	f805 3b01 	strb.w	r3, [r5], #1
            }

            ++pcFmt;
    c826:	3101      	adds	r1, #1
            ++ui32CharCnt;
    c828:	3601      	adds	r6, #1
    while ( *pcFmt != 0x0 )
    c82a:	780b      	ldrb	r3, [r1, #0]
    c82c:	2b00      	cmp	r3, #0
    c82e:	f000 8089 	beq.w	c944 <am_util_stdio_vsprintf+0x140>
        if ( *pcFmt != '%' )
    c832:	2b25      	cmp	r3, #37	; 0x25
    c834:	d1f1      	bne.n	c81a <am_util_stdio_vsprintf+0x16>
        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';

        if ( *pcFmt == '0' )
    c836:	784b      	ldrb	r3, [r1, #1]
    c838:	2b30      	cmp	r3, #48	; 0x30
    c83a:	f000 8098 	beq.w	c96e <am_util_stdio_vsprintf+0x16a>
        ++pcFmt;
    c83e:	f101 0e01 	add.w	lr, r1, #1
        ui8PadChar = ' ';
    c842:	2220      	movs	r2, #32
    if ( *pcStr == '-')
    c844:	2b2d      	cmp	r3, #45	; 0x2d
    c846:	f000 8084 	beq.w	c952 <am_util_stdio_vsprintf+0x14e>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c84a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    uint32_t ui32Val = 0, uCnt = 0;
    c84e:	f04f 0c00 	mov.w	ip, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c852:	2909      	cmp	r1, #9
    c854:	4674      	mov	r4, lr
    bool bNeg = false;
    c856:	46e0      	mov	r8, ip
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c858:	f200 8087 	bhi.w	c96a <am_util_stdio_vsprintf+0x166>
    c85c:	f10c 0c01 	add.w	ip, ip, #1
    c860:	ebac 0c04 	sub.w	ip, ip, r4
    c864:	2100      	movs	r1, #0
        ui32Val *= 10;
    c866:	eb01 0181 	add.w	r1, r1, r1, lsl #2
        ui32Val += (*pcStr - '0');
    c86a:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    c86e:	eb04 090c 	add.w	r9, r4, ip
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c872:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    c876:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    c87a:	2809      	cmp	r0, #9
        ui32Val += (*pcStr - '0');
    c87c:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c880:	d9f1      	bls.n	c866 <am_util_stdio_vsprintf+0x62>
        pcFmt += ui32NumChars;

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    c882:	f81e 3009 	ldrb.w	r3, [lr, r9]
        pcFmt += ui32NumChars;
    c886:	eb0e 0409 	add.w	r4, lr, r9
    return bNeg ? -ui32Val : ui32Val;
    c88a:	f1b8 0f00 	cmp.w	r8, #0
    c88e:	d000      	beq.n	c892 <am_util_stdio_vsprintf+0x8e>
    c890:	4249      	negs	r1, r1
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    c892:	2b73      	cmp	r3, #115	; 0x73
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    c894:	4608      	mov	r0, r1
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    c896:	f000 8125 	beq.w	cae4 <am_util_stdio_vsprintf+0x2e0>
    c89a:	ea81 78e1 	eor.w	r8, r1, r1, asr #31
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    c89e:	2b2e      	cmp	r3, #46	; 0x2e
    c8a0:	eba8 78e1 	sub.w	r8, r8, r1, asr #31
    c8a4:	f000 80f2 	beq.w	ca8c <am_util_stdio_vsprintf+0x288>
        iPrecision = 6;             // printf() default precision for %f is 6
    c8a8:	f04f 0906 	mov.w	r9, #6
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    c8ac:	2b6c      	cmp	r3, #108	; 0x6c
    c8ae:	d104      	bne.n	c8ba <am_util_stdio_vsprintf+0xb6>
        {
            pcFmt++;
            if ( *pcFmt == 'l' )    // "ll" (long long)
    c8b0:	7863      	ldrb	r3, [r4, #1]
    c8b2:	2b6c      	cmp	r3, #108	; 0x6c
    c8b4:	f000 8163 	beq.w	cb7e <am_util_stdio_vsprintf+0x37a>
            pcFmt++;
    c8b8:	3401      	adds	r4, #1
                pcFmt++;
                bLongLong = true;
            }
        }

        switch ( *pcFmt )
    c8ba:	f1a3 0046 	sub.w	r0, r3, #70	; 0x46
    c8be:	2832      	cmp	r0, #50	; 0x32
    c8c0:	d85a      	bhi.n	c978 <am_util_stdio_vsprintf+0x174>
    c8c2:	e8df f010 	tbh	[pc, r0, lsl #1]
    c8c6:	005f      	.short	0x005f
    c8c8:	00590059 	.word	0x00590059
    c8cc:	00590059 	.word	0x00590059
    c8d0:	00590059 	.word	0x00590059
    c8d4:	00590059 	.word	0x00590059
    c8d8:	00590059 	.word	0x00590059
    c8dc:	00590059 	.word	0x00590059
    c8e0:	00590059 	.word	0x00590059
    c8e4:	00590059 	.word	0x00590059
    c8e8:	01dc0059 	.word	0x01dc0059
    c8ec:	00590059 	.word	0x00590059
    c8f0:	00590059 	.word	0x00590059
    c8f4:	00590059 	.word	0x00590059
    c8f8:	00590059 	.word	0x00590059
    c8fc:	00590059 	.word	0x00590059
    c900:	00b400c9 	.word	0x00b400c9
    c904:	005f0059 	.word	0x005f0059
    c908:	00590059 	.word	0x00590059
    c90c:	005900b4 	.word	0x005900b4
    c910:	00590059 	.word	0x00590059
    c914:	00590059 	.word	0x00590059
    c918:	00590059 	.word	0x00590059
    c91c:	00590059 	.word	0x00590059
    c920:	0059010e 	.word	0x0059010e
    c924:	005900d2 	.word	0x005900d2
    c928:	02fb0059 	.word	0x02fb0059
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    c92c:	4acc      	ldr	r2, [pc, #816]	; (cc60 <am_util_stdio_vsprintf+0x45c>)
    c92e:	7812      	ldrb	r2, [r2, #0]
    c930:	2a00      	cmp	r2, #0
    c932:	f43f af76 	beq.w	c822 <am_util_stdio_vsprintf+0x1e>
                    *pcBuf++ = '\r';
    c936:	230d      	movs	r3, #13
    c938:	f805 3b01 	strb.w	r3, [r5], #1
                    ++ui32CharCnt;
    c93c:	3601      	adds	r6, #1
                *pcBuf++ = *pcFmt;
    c93e:	780b      	ldrb	r3, [r1, #0]
    c940:	e76f      	b.n	c822 <am_util_stdio_vsprintf+0x1e>
    uint32_t ui32NumChars, ui32CharCnt = 0;
    c942:	461e      	mov	r6, r3
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    c944:	b10d      	cbz	r5, c94a <am_util_stdio_vsprintf+0x146>
    {
        *pcBuf = 0x0;
    c946:	2300      	movs	r3, #0
    c948:	702b      	strb	r3, [r5, #0]
    }

    return (ui32CharCnt);
}
    c94a:	4630      	mov	r0, r6
    c94c:	b009      	add	sp, #36	; 0x24
    c94e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c952:	f89e 3001 	ldrb.w	r3, [lr, #1]
    c956:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
        uCnt++;
    c95a:	f04f 0c01 	mov.w	ip, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c95e:	2909      	cmp	r1, #9
        pcStr++;
    c960:	eb0e 040c 	add.w	r4, lr, ip
        bNeg = true;
    c964:	46e0      	mov	r8, ip
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c966:	f67f af79 	bls.w	c85c <am_util_stdio_vsprintf+0x58>
    c96a:	2100      	movs	r1, #0
    c96c:	e78d      	b.n	c88a <am_util_stdio_vsprintf+0x86>
            ui8PadChar = '0';
    c96e:	461a      	mov	r2, r3
            ++pcFmt;
    c970:	f101 0e02 	add.w	lr, r1, #2
    if ( *pcStr == '-')
    c974:	788b      	ldrb	r3, [r1, #2]
    c976:	e765      	b.n	c844 <am_util_stdio_vsprintf+0x40>
                if ( pcBuf )
    c978:	b10d      	cbz	r5, c97e <am_util_stdio_vsprintf+0x17a>
                    *pcBuf++ = *pcFmt;
    c97a:	f805 3b01 	strb.w	r3, [r5], #1
                ++ui32CharCnt;
    c97e:	3601      	adds	r6, #1
        ++pcFmt;
    c980:	1c61      	adds	r1, r4, #1
    c982:	e752      	b.n	c82a <am_util_stdio_vsprintf+0x26>
                if ( pcBuf )
    c984:	2d00      	cmp	r5, #0
    c986:	d0fb      	beq.n	c980 <am_util_stdio_vsprintf+0x17c>
                    float fValue = va_arg(pArgs, double);
    c988:	3707      	adds	r7, #7
    c98a:	f027 0707 	bic.w	r7, r7, #7
    c98e:	e8f7 0102 	ldrd	r0, r1, [r7], #8
    c992:	f7ff fc4f 	bl	c234 <__aeabi_d2f>
    c996:	ee07 0a90 	vmov	s15, r0
    if (fValue == 0.0f)
    c99a:	eef5 7a40 	vcmp.f32	s15, #0.0
                    *(uint32_t*)pcBuf = 20;
    c99e:	2314      	movs	r3, #20
    if (fValue == 0.0f)
    c9a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    *(uint32_t*)pcBuf = 20;
    c9a4:	602b      	str	r3, [r5, #0]
    if (fValue == 0.0f)
    c9a6:	f000 835d 	beq.w	d064 <am_util_stdio_vsprintf+0x860>
    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    c9aa:	f3c0 51c7 	ubfx	r1, r0, #23, #8
    c9ae:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
    unFloatValue.F = fValue;
    c9b2:	4603      	mov	r3, r0
    if (iExp2 >= 31)
    c9b4:	2a1e      	cmp	r2, #30
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    c9b6:	f3c0 0016 	ubfx	r0, r0, #0, #23
    c9ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    if (iExp2 >= 31)
    c9be:	f300 837c 	bgt.w	d0ba <am_util_stdio_vsprintf+0x8b6>
    else if (iExp2 < -23)
    c9c2:	f112 0f17 	cmn.w	r2, #23
    c9c6:	f2c0 8374 	blt.w	d0b2 <am_util_stdio_vsprintf+0x8ae>
    else if (iExp2 >= 23)
    c9ca:	2a16      	cmp	r2, #22
    c9cc:	f340 8246 	ble.w	ce5c <am_util_stdio_vsprintf+0x658>
        i32IntPart = i32Significand << (iExp2 - 23);
    c9d0:	3996      	subs	r1, #150	; 0x96
    if (unFloatValue.I32 < 0)
    c9d2:	2b00      	cmp	r3, #0
        i32IntPart = i32Significand << (iExp2 - 23);
    c9d4:	fa00 f001 	lsl.w	r0, r0, r1
    if (unFloatValue.I32 < 0)
    c9d8:	f2c0 8287 	blt.w	ceea <am_util_stdio_vsprintf+0x6e6>
    c9dc:	462b      	mov	r3, r5
    i32FracPart = 0;
    c9de:	f04f 0800 	mov.w	r8, #0
    if (i32IntPart == 0)
    c9e2:	2800      	cmp	r0, #0
    c9e4:	f000 827c 	beq.w	cee0 <am_util_stdio_vsprintf+0x6dc>
            *pcBuf++ = '-';
    c9e8:	461a      	mov	r2, r3
    c9ea:	bfde      	ittt	le
    c9ec:	232d      	movle	r3, #45	; 0x2d
    c9ee:	f802 3b01 	strble.w	r3, [r2], #1
            uint64_to_str(-i32IntPart, pcBuf);
    c9f2:	4240      	negle	r0, r0
    c9f4:	17c1      	asrs	r1, r0, #31
    c9f6:	f7ff fe7d 	bl	c6f4 <uint64_to_str>
        while (*pcBuf)    // Get to end of new string
    c9fa:	7813      	ldrb	r3, [r2, #0]
    c9fc:	b11b      	cbz	r3, ca06 <am_util_stdio_vsprintf+0x202>
    c9fe:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    ca02:	2b00      	cmp	r3, #0
    ca04:	d1fb      	bne.n	c9fe <am_util_stdio_vsprintf+0x1fa>
    *pcBuf++ = '.';
    ca06:	232e      	movs	r3, #46	; 0x2e
    ca08:	7013      	strb	r3, [r2, #0]
    if (i32FracPart == 0)
    ca0a:	f1b8 0f00 	cmp.w	r8, #0
    ca0e:	f040 8291 	bne.w	cf34 <am_util_stdio_vsprintf+0x730>
        *pcBuf++ = '0';
    ca12:	1c90      	adds	r0, r2, #2
    ca14:	2330      	movs	r3, #48	; 0x30
    ca16:	7053      	strb	r3, [r2, #1]
    return (pcBuf - pcBufInitial);
    ca18:	1b41      	subs	r1, r0, r5
    *pcBuf = 0x00;
    ca1a:	2300      	movs	r3, #0
                    if ( iVal < 0 )
    ca1c:	4299      	cmp	r1, r3
    *pcBuf = 0x00;
    ca1e:	7003      	strb	r3, [r0, #0]
                    if ( iVal < 0 )
    ca20:	f2c0 82c3 	blt.w	cfaa <am_util_stdio_vsprintf+0x7a6>
                    ui32CharCnt += iVal;
    ca24:	460b      	mov	r3, r1
    ca26:	441e      	add	r6, r3
                    pcBuf += iVal;
    ca28:	441d      	add	r5, r3
        ++pcFmt;
    ca2a:	1c61      	adds	r1, r4, #1
    ca2c:	e6fd      	b.n	c82a <am_util_stdio_vsprintf+0x26>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    ca2e:	f857 9b04 	ldr.w	r9, [r7], #4
    ca32:	ea4f 7ae9 	mov.w	sl, r9, asr #31
                if ( i64Val < 0 )
    ca36:	f1ba 0f00 	cmp.w	sl, #0
    ca3a:	f2c0 8113 	blt.w	cc64 <am_util_stdio_vsprintf+0x460>
                if ( iWidth )
    ca3e:	2900      	cmp	r1, #0
    ca40:	f040 82bd 	bne.w	cfbe <am_util_stdio_vsprintf+0x7ba>
                iVal = uint64_to_str(ui64Val, pcBuf);
    ca44:	4648      	mov	r0, r9
    ca46:	4651      	mov	r1, sl
    ca48:	462a      	mov	r2, r5
    ca4a:	f7ff fe53 	bl	c6f4 <uint64_to_str>
                if ( pcBuf )
    ca4e:	b9d5      	cbnz	r5, ca86 <am_util_stdio_vsprintf+0x282>
                ui32CharCnt += iVal;
    ca50:	2500      	movs	r5, #0
    ca52:	4406      	add	r6, r0
        ++pcFmt;
    ca54:	1c61      	adds	r1, r4, #1
    ca56:	e6e8      	b.n	c82a <am_util_stdio_vsprintf+0x26>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    ca58:	1d3b      	adds	r3, r7, #4
                if ( pcBuf )
    ca5a:	b115      	cbz	r5, ca62 <am_util_stdio_vsprintf+0x25e>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    ca5c:	683a      	ldr	r2, [r7, #0]
    ca5e:	f805 2b01 	strb.w	r2, [r5], #1
                ++ui32CharCnt;
    ca62:	3601      	adds	r6, #1
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    ca64:	461f      	mov	r7, r3
        ++pcFmt;
    ca66:	1c61      	adds	r1, r4, #1
    ca68:	e6df      	b.n	c82a <am_util_stdio_vsprintf+0x26>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    ca6a:	f857 ab04 	ldr.w	sl, [r7], #4
    ca6e:	f04f 0900 	mov.w	r9, #0
                if ( iWidth )
    ca72:	2900      	cmp	r1, #0
    ca74:	f040 81b0 	bne.w	cdd8 <am_util_stdio_vsprintf+0x5d4>
                iVal = uint64_to_str(ui64Val, pcBuf);
    ca78:	4650      	mov	r0, sl
    ca7a:	4649      	mov	r1, r9
    ca7c:	462a      	mov	r2, r5
    ca7e:	f7ff fe39 	bl	c6f4 <uint64_to_str>
                if ( pcBuf )
    ca82:	2d00      	cmp	r5, #0
    ca84:	d0e4      	beq.n	ca50 <am_util_stdio_vsprintf+0x24c>
                    pcBuf += iVal;
    ca86:	4405      	add	r5, r0
                ui32CharCnt += iVal;
    ca88:	4406      	add	r6, r0
                break;
    ca8a:	e7e3      	b.n	ca54 <am_util_stdio_vsprintf+0x250>
    if ( *pcStr == '-')
    ca8c:	7860      	ldrb	r0, [r4, #1]
    ca8e:	282d      	cmp	r0, #45	; 0x2d
            ++pcFmt;
    ca90:	f104 0c01 	add.w	ip, r4, #1
    if ( *pcStr == '-')
    ca94:	f000 8195 	beq.w	cdc2 <am_util_stdio_vsprintf+0x5be>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ca98:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    ca9c:	2b09      	cmp	r3, #9
    ca9e:	f200 82ea 	bhi.w	d076 <am_util_stdio_vsprintf+0x872>
    uint32_t ui32Val = 0, uCnt = 0;
    caa2:	2300      	movs	r3, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    caa4:	4664      	mov	r4, ip
    bool bNeg = false;
    caa6:	4699      	mov	r9, r3
    caa8:	3301      	adds	r3, #1
    caaa:	eba3 0e04 	sub.w	lr, r3, r4
    caae:	2300      	movs	r3, #0
        ui32Val *= 10;
    cab0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        ui32Val += (*pcStr - '0');
    cab4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    cab8:	eb04 0a0e 	add.w	sl, r4, lr
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cabc:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    cac0:	f1a0 0b30 	sub.w	fp, r0, #48	; 0x30
    cac4:	f1bb 0f09 	cmp.w	fp, #9
        ui32Val += (*pcStr - '0');
    cac8:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cacc:	d9f0      	bls.n	cab0 <am_util_stdio_vsprintf+0x2ac>
    return bNeg ? -ui32Val : ui32Val;
    cace:	f1b9 0f00 	cmp.w	r9, #0
    cad2:	d000      	beq.n	cad6 <am_util_stdio_vsprintf+0x2d2>
    cad4:	425b      	negs	r3, r3
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    cad6:	4699      	mov	r9, r3
            pcFmt += ui32NumChars;
    cad8:	eb0c 040a 	add.w	r4, ip, sl
        if ( *pcFmt == 'l' )
    cadc:	f81c 300a 	ldrb.w	r3, [ip, sl]
    cae0:	e6e4      	b.n	c8ac <am_util_stdio_vsprintf+0xa8>
        switch ( *pcFmt )
    cae2:	4640      	mov	r0, r8
                pcStr = va_arg(pArgs, char *);
    cae4:	46b9      	mov	r9, r7
    cae6:	f859 3b04 	ldr.w	r3, [r9], #4
    if ( !pcBuf )
    caea:	2b00      	cmp	r3, #0
    caec:	f000 81c6 	beq.w	ce7c <am_util_stdio_vsprintf+0x678>
    while ( *pcBuf++ )
    caf0:	469c      	mov	ip, r3
    caf2:	f81c 1b01 	ldrb.w	r1, [ip], #1
    caf6:	2900      	cmp	r1, #0
    caf8:	f000 82c1 	beq.w	d07e <am_util_stdio_vsprintf+0x87a>
    uint32_t ui32RetVal = 0;
    cafc:	f04f 0e00 	mov.w	lr, #0
    while ( *pcBuf++ )
    cb00:	f81c 7b01 	ldrb.w	r7, [ip], #1
        ui32RetVal++;
    cb04:	f10e 0e01 	add.w	lr, lr, #1
    while ( *pcBuf++ )
    cb08:	2f00      	cmp	r7, #0
    cb0a:	d1f9      	bne.n	cb00 <am_util_stdio_vsprintf+0x2fc>
                if ( iWidth > 0 )
    cb0c:	2800      	cmp	r0, #0
    cb0e:	dd02      	ble.n	cb16 <am_util_stdio_vsprintf+0x312>
                    if ( ui32strlen < iWidth )
    cb10:	4570      	cmp	r0, lr
    cb12:	f200 81d6 	bhi.w	cec2 <am_util_stdio_vsprintf+0x6be>
    cb16:	f1c3 0801 	rsb	r8, r3, #1
                while (*pcStr != 0x0)
    cb1a:	46b2      	mov	sl, r6
    cb1c:	462f      	mov	r7, r5
    cb1e:	eb08 0c06 	add.w	ip, r8, r6
    cb22:	e000      	b.n	cb26 <am_util_stdio_vsprintf+0x322>
                        *pcBuf++ = *pcStr;
    cb24:	462f      	mov	r7, r5
    cb26:	eb0c 0603 	add.w	r6, ip, r3
                    if ( pcBuf )
    cb2a:	2d00      	cmp	r5, #0
    cb2c:	f000 8131 	beq.w	cd92 <am_util_stdio_vsprintf+0x58e>
                        *pcBuf++ = *pcStr;
    cb30:	7039      	strb	r1, [r7, #0]
                while (*pcStr != 0x0)
    cb32:	f813 1f01 	ldrb.w	r1, [r3, #1]!
                        *pcBuf++ = *pcStr;
    cb36:	3501      	adds	r5, #1
                while (*pcStr != 0x0)
    cb38:	2900      	cmp	r1, #0
    cb3a:	d1f3      	bne.n	cb24 <am_util_stdio_vsprintf+0x320>
                if ( iWidth )
    cb3c:	b1e0      	cbz	r0, cb78 <am_util_stdio_vsprintf+0x374>
                    iWidth = -iWidth;
    cb3e:	f1c0 0800 	rsb	r8, r0, #0
                    if ( ui32strlen < iWidth )
    cb42:	45f0      	cmp	r8, lr
    cb44:	d918      	bls.n	cb78 <am_util_stdio_vsprintf+0x374>
                        iWidth -= ui32strlen;
    cb46:	eba8 030e 	sub.w	r3, r8, lr
    if ( i32NumChars <= 0 )
    cb4a:	2b00      	cmp	r3, #0
    cb4c:	f340 82b3 	ble.w	d0b6 <am_util_stdio_vsprintf+0x8b2>
    while ( i32NumChars-- )
    cb50:	3b01      	subs	r3, #1
    int32_t i32Cnt = 0;
    cb52:	4694      	mov	ip, r2
    cb54:	2000      	movs	r0, #0
    cb56:	461a      	mov	r2, r3
    cb58:	462b      	mov	r3, r5
            *pcBuf++ = cPadChar;
    cb5a:	4619      	mov	r1, r3
        if ( pcBuf )
    cb5c:	2b00      	cmp	r3, #0
    cb5e:	f000 8129 	beq.w	cdb4 <am_util_stdio_vsprintf+0x5b0>
            *pcBuf++ = cPadChar;
    cb62:	f801 cb01 	strb.w	ip, [r1], #1
    cb66:	4617      	mov	r7, r2
    cb68:	460b      	mov	r3, r1
        i32Cnt++;
    cb6a:	3001      	adds	r0, #1
    while ( i32NumChars-- )
    cb6c:	1e7a      	subs	r2, r7, #1
    cb6e:	2f00      	cmp	r7, #0
    cb70:	d1f3      	bne.n	cb5a <am_util_stdio_vsprintf+0x356>
                        ui32CharCnt += iWidth;
    cb72:	4406      	add	r6, r0
                        pcBuf += pcBuf ? iWidth : 0;
    cb74:	b105      	cbz	r5, cb78 <am_util_stdio_vsprintf+0x374>
    cb76:	4405      	add	r5, r0
                pcStr = va_arg(pArgs, char *);
    cb78:	464f      	mov	r7, r9
        ++pcFmt;
    cb7a:	1c61      	adds	r1, r4, #1
    cb7c:	e655      	b.n	c82a <am_util_stdio_vsprintf+0x26>
        switch ( *pcFmt )
    cb7e:	78a3      	ldrb	r3, [r4, #2]
    cb80:	f1a3 0046 	sub.w	r0, r3, #70	; 0x46
                pcFmt++;
    cb84:	3402      	adds	r4, #2
        switch ( *pcFmt )
    cb86:	2832      	cmp	r0, #50	; 0x32
    cb88:	f63f aef6 	bhi.w	c978 <am_util_stdio_vsprintf+0x174>
    cb8c:	f20f 0c04 	addw	ip, pc, #4
    cb90:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
    cb94:	0000c985 	.word	0x0000c985
    cb98:	0000c979 	.word	0x0000c979
    cb9c:	0000c979 	.word	0x0000c979
    cba0:	0000c979 	.word	0x0000c979
    cba4:	0000c979 	.word	0x0000c979
    cba8:	0000c979 	.word	0x0000c979
    cbac:	0000c979 	.word	0x0000c979
    cbb0:	0000c979 	.word	0x0000c979
    cbb4:	0000c979 	.word	0x0000c979
    cbb8:	0000c979 	.word	0x0000c979
    cbbc:	0000c979 	.word	0x0000c979
    cbc0:	0000c979 	.word	0x0000c979
    cbc4:	0000c979 	.word	0x0000c979
    cbc8:	0000c979 	.word	0x0000c979
    cbcc:	0000c979 	.word	0x0000c979
    cbd0:	0000c979 	.word	0x0000c979
    cbd4:	0000c979 	.word	0x0000c979
    cbd8:	0000c979 	.word	0x0000c979
    cbdc:	0000cf0d 	.word	0x0000cf0d
    cbe0:	0000c979 	.word	0x0000c979
    cbe4:	0000c979 	.word	0x0000c979
    cbe8:	0000c979 	.word	0x0000c979
    cbec:	0000c979 	.word	0x0000c979
    cbf0:	0000c979 	.word	0x0000c979
    cbf4:	0000c979 	.word	0x0000c979
    cbf8:	0000c979 	.word	0x0000c979
    cbfc:	0000c979 	.word	0x0000c979
    cc00:	0000c979 	.word	0x0000c979
    cc04:	0000c979 	.word	0x0000c979
    cc08:	0000ca59 	.word	0x0000ca59
    cc0c:	0000ccad 	.word	0x0000ccad
    cc10:	0000c979 	.word	0x0000c979
    cc14:	0000c985 	.word	0x0000c985
    cc18:	0000c979 	.word	0x0000c979
    cc1c:	0000c979 	.word	0x0000c979
    cc20:	0000ccad 	.word	0x0000ccad
    cc24:	0000c979 	.word	0x0000c979
    cc28:	0000c979 	.word	0x0000c979
    cc2c:	0000c979 	.word	0x0000c979
    cc30:	0000c979 	.word	0x0000c979
    cc34:	0000c979 	.word	0x0000c979
    cc38:	0000c979 	.word	0x0000c979
    cc3c:	0000c979 	.word	0x0000c979
    cc40:	0000c979 	.word	0x0000c979
    cc44:	0000c979 	.word	0x0000c979
    cc48:	0000cae3 	.word	0x0000cae3
    cc4c:	0000c979 	.word	0x0000c979
    cc50:	0000ccbd 	.word	0x0000ccbd
    cc54:	0000c979 	.word	0x0000c979
    cc58:	0000c979 	.word	0x0000c979
    cc5c:	0000cf21 	.word	0x0000cf21
    cc60:	10001034 	.word	0x10001034
                    ui64Val = -i64Val;          // Get absolute value
    cc64:	f1d9 0900 	rsbs	r9, r9, #0
    cc68:	eb6a 0a4a 	sbc.w	sl, sl, sl, lsl #1
                if ( iWidth )
    cc6c:	2900      	cmp	r1, #0
    cc6e:	f040 81fd 	bne.w	d06c <am_util_stdio_vsprintf+0x868>
                        if ( pcBuf )
    cc72:	b115      	cbz	r5, cc7a <am_util_stdio_vsprintf+0x476>
                            *pcBuf++ = '-';
    cc74:	232d      	movs	r3, #45	; 0x2d
    cc76:	f805 3b01 	strb.w	r3, [r5], #1
                        ++ui32CharCnt;
    cc7a:	3601      	adds	r6, #1
    cc7c:	e6e2      	b.n	ca44 <am_util_stdio_vsprintf+0x240>
        bLower = bLongLong = false;
    cc7e:	f04f 0e00 	mov.w	lr, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cc82:	f857 0b04 	ldr.w	r0, [r7], #4
    cc86:	f04f 0c00 	mov.w	ip, #0
                if ( iWidth )
    cc8a:	b9f9      	cbnz	r1, cccc <am_util_stdio_vsprintf+0x4c8>
    if ( ui64Val == 0 )
    cc8c:	ea50 030c 	orrs.w	r3, r0, ip
    cc90:	d14d      	bne.n	cd2e <am_util_stdio_vsprintf+0x52a>
    if (pcBuf)
    cc92:	2d00      	cmp	r5, #0
    cc94:	d079      	beq.n	cd8a <am_util_stdio_vsprintf+0x586>
            *pcBuf++ = tbuf[ix];
    cc96:	462b      	mov	r3, r5
    cc98:	2230      	movs	r2, #48	; 0x30
    cc9a:	f803 2b01 	strb.w	r2, [r3], #1
    cc9e:	2201      	movs	r2, #1
    cca0:	461d      	mov	r5, r3
        *pcBuf = 0;
    cca2:	2100      	movs	r1, #0
    cca4:	7019      	strb	r1, [r3, #0]
                ui32CharCnt += iVal;
    cca6:	4416      	add	r6, r2
        ++pcFmt;
    cca8:	1c61      	adds	r1, r4, #1
    ccaa:	e5be      	b.n	c82a <am_util_stdio_vsprintf+0x26>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    ccac:	3707      	adds	r7, #7
    ccae:	f027 0707 	bic.w	r7, r7, #7
    ccb2:	f8d7 a004 	ldr.w	sl, [r7, #4]
    ccb6:	f857 9b08 	ldr.w	r9, [r7], #8
    ccba:	e6bc      	b.n	ca36 <am_util_stdio_vsprintf+0x232>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    ccbc:	3707      	adds	r7, #7
    ccbe:	f027 0707 	bic.w	r7, r7, #7
    ccc2:	f8d7 9004 	ldr.w	r9, [r7, #4]
    ccc6:	f857 ab08 	ldr.w	sl, [r7], #8
    ccca:	e6d2      	b.n	ca72 <am_util_stdio_vsprintf+0x26e>
    int iDigits = ui64Val ? 0 : 1;
    cccc:	ea50 030c 	orrs.w	r3, r0, ip
    ccd0:	bf0c      	ite	eq
    ccd2:	2101      	moveq	r1, #1
    ccd4:	2100      	movne	r1, #0
    while ( ui64Val )
    ccd6:	d00b      	beq.n	ccf0 <am_util_stdio_vsprintf+0x4ec>
    ccd8:	4603      	mov	r3, r0
    ccda:	46e1      	mov	r9, ip
        ui64Val >>= 4;
    ccdc:	091b      	lsrs	r3, r3, #4
    ccde:	ea43 7309 	orr.w	r3, r3, r9, lsl #28
    cce2:	ea4f 1919 	mov.w	r9, r9, lsr #4
    while ( ui64Val )
    cce6:	ea53 0a09 	orrs.w	sl, r3, r9
        ++iDigits;
    ccea:	f101 0101 	add.w	r1, r1, #1
    while ( ui64Val )
    ccee:	d1f5      	bne.n	ccdc <am_util_stdio_vsprintf+0x4d8>
                    iWidth -= ndigits_in_hex(ui64Val);
    ccf0:	eba8 0301 	sub.w	r3, r8, r1
    if ( i32NumChars <= 0 )
    ccf4:	2b00      	cmp	r3, #0
    ccf6:	f340 81b2 	ble.w	d05e <am_util_stdio_vsprintf+0x85a>
    while ( i32NumChars-- )
    ccfa:	3b01      	subs	r3, #1
    int32_t i32Cnt = 0;
    ccfc:	4691      	mov	r9, r2
    ccfe:	4682      	mov	sl, r0
    cd00:	f04f 0800 	mov.w	r8, #0
    cd04:	462a      	mov	r2, r5
    cd06:	4618      	mov	r0, r3
            *pcBuf++ = cPadChar;
    cd08:	4611      	mov	r1, r2
        if ( pcBuf )
    cd0a:	2a00      	cmp	r2, #0
    cd0c:	d04c      	beq.n	cda8 <am_util_stdio_vsprintf+0x5a4>
            *pcBuf++ = cPadChar;
    cd0e:	f801 9b01 	strb.w	r9, [r1], #1
    cd12:	4603      	mov	r3, r0
    cd14:	460a      	mov	r2, r1
        i32Cnt++;
    cd16:	f108 0801 	add.w	r8, r8, #1
    while ( i32NumChars-- )
    cd1a:	1e58      	subs	r0, r3, #1
    cd1c:	2b00      	cmp	r3, #0
    cd1e:	d1f3      	bne.n	cd08 <am_util_stdio_vsprintf+0x504>
                    ui32CharCnt += iWidth;
    cd20:	4650      	mov	r0, sl
    cd22:	4446      	add	r6, r8
                    pcBuf += pcBuf ? iWidth : 0;
    cd24:	b375      	cbz	r5, cd84 <am_util_stdio_vsprintf+0x580>
    if ( ui64Val == 0 )
    cd26:	ea50 030c 	orrs.w	r3, r0, ip
                    pcBuf += pcBuf ? iWidth : 0;
    cd2a:	4445      	add	r5, r8
    if ( ui64Val == 0 )
    cd2c:	d0b3      	beq.n	cc96 <am_util_stdio_vsprintf+0x492>
    cd2e:	f1be 0f00 	cmp.w	lr, #0
    cd32:	f10d 080c 	add.w	r8, sp, #12
    cd36:	bf14      	ite	ne
    cd38:	f04f 0927 	movne.w	r9, #39	; 0x27
    cd3c:	f04f 0907 	moveq.w	r9, #7
    cd40:	4641      	mov	r1, r8
    int iNumDig, ix = 0;
    cd42:	2200      	movs	r2, #0
        cCh = ui64Val & 0xf;
    cd44:	f000 030f 	and.w	r3, r0, #15
        if ( cCh > 9 )
    cd48:	2b09      	cmp	r3, #9
            cCh += bLower ? 0x27 : 0x7;
    cd4a:	bf88      	it	hi
    cd4c:	444b      	addhi	r3, r9
        ui64Val >>= 4;
    cd4e:	ea4f 1e10 	mov.w	lr, r0, lsr #4
    cd52:	ea4e 700c 	orr.w	r0, lr, ip, lsl #28
        tbuf[ix++] = cCh + '0';
    cd56:	3330      	adds	r3, #48	; 0x30
        ui64Val >>= 4;
    cd58:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
        tbuf[ix++] = cCh + '0';
    cd5c:	f801 3b01 	strb.w	r3, [r1], #1
    while ( ui64Val )
    cd60:	ea50 030c 	orrs.w	r3, r0, ip
        tbuf[ix++] = cCh + '0';
    cd64:	f102 0201 	add.w	r2, r2, #1
    while ( ui64Val )
    cd68:	d1ec      	bne.n	cd44 <am_util_stdio_vsprintf+0x540>
    if (pcBuf)
    cd6a:	b17d      	cbz	r5, cd8c <am_util_stdio_vsprintf+0x588>
    cd6c:	eb08 0302 	add.w	r3, r8, r2
    cd70:	1e69      	subs	r1, r5, #1
            *pcBuf++ = tbuf[ix];
    cd72:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
    cd76:	f801 0f01 	strb.w	r0, [r1, #1]!
        while (ix--)
    cd7a:	4543      	cmp	r3, r8
    cd7c:	d1f9      	bne.n	cd72 <am_util_stdio_vsprintf+0x56e>
            *pcBuf++ = tbuf[ix];
    cd7e:	18ab      	adds	r3, r5, r2
                    pcBuf += iVal;
    cd80:	461d      	mov	r5, r3
    cd82:	e78e      	b.n	cca2 <am_util_stdio_vsprintf+0x49e>
    if ( ui64Val == 0 )
    cd84:	ea50 030c 	orrs.w	r3, r0, ip
    cd88:	d1d1      	bne.n	cd2e <am_util_stdio_vsprintf+0x52a>
    cd8a:	2201      	movs	r2, #1
                if ( pcBuf )
    cd8c:	2500      	movs	r5, #0
                ui32CharCnt += iVal;
    cd8e:	4416      	add	r6, r2
                break;
    cd90:	e78a      	b.n	cca8 <am_util_stdio_vsprintf+0x4a4>
    cd92:	eb08 010a 	add.w	r1, r8, sl
                    ++ui32CharCnt;
    cd96:	18ce      	adds	r6, r1, r3
                while (*pcStr != 0x0)
    cd98:	f813 7f01 	ldrb.w	r7, [r3, #1]!
    cd9c:	2f00      	cmp	r7, #0
    cd9e:	d1fa      	bne.n	cd96 <am_util_stdio_vsprintf+0x592>
                if ( iWidth )
    cda0:	2800      	cmp	r0, #0
    cda2:	f43f aee9 	beq.w	cb78 <am_util_stdio_vsprintf+0x374>
    cda6:	e6ca      	b.n	cb3e <am_util_stdio_vsprintf+0x33a>
    while ( i32NumChars-- )
    cda8:	1e43      	subs	r3, r0, #1
        i32Cnt++;
    cdaa:	f108 0801 	add.w	r8, r8, #1
    while ( i32NumChars-- )
    cdae:	2800      	cmp	r0, #0
    cdb0:	d1b1      	bne.n	cd16 <am_util_stdio_vsprintf+0x512>
    cdb2:	e7b5      	b.n	cd20 <am_util_stdio_vsprintf+0x51c>
    cdb4:	1e57      	subs	r7, r2, #1
        i32Cnt++;
    cdb6:	3001      	adds	r0, #1
    while ( i32NumChars-- )
    cdb8:	2a00      	cmp	r2, #0
    cdba:	f47f aed6 	bne.w	cb6a <am_util_stdio_vsprintf+0x366>
                        ui32CharCnt += iWidth;
    cdbe:	4406      	add	r6, r0
    cdc0:	e6d8      	b.n	cb74 <am_util_stdio_vsprintf+0x370>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cdc2:	78a0      	ldrb	r0, [r4, #2]
    cdc4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    cdc8:	2b09      	cmp	r3, #9
        pcStr++;
    cdca:	f104 0402 	add.w	r4, r4, #2
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cdce:	f200 8176 	bhi.w	d0be <am_util_stdio_vsprintf+0x8ba>
        uCnt++;
    cdd2:	2301      	movs	r3, #1
        bNeg = true;
    cdd4:	4699      	mov	r9, r3
    cdd6:	e667      	b.n	caa8 <am_util_stdio_vsprintf+0x2a4>
    int iNDigits = ui64Val ? 0 : 1;
    cdd8:	ea5a 0309 	orrs.w	r3, sl, r9
    cddc:	bf0c      	ite	eq
    cdde:	f04f 0b01 	moveq.w	fp, #1
    cde2:	f04f 0b00 	movne.w	fp, #0
    while ( ui64Val )
    cde6:	d012      	beq.n	ce0e <am_util_stdio_vsprintf+0x60a>
    cde8:	4649      	mov	r1, r9
    cdea:	9400      	str	r4, [sp, #0]
    cdec:	4650      	mov	r0, sl
    cdee:	465c      	mov	r4, fp
    cdf0:	46cb      	mov	fp, r9
    cdf2:	46a9      	mov	r9, r5
    cdf4:	4615      	mov	r5, r2
        ui64Val = divu64_10(ui64Val);
    cdf6:	f7ff fc21 	bl	c63c <divu64_10>
    while ( ui64Val )
    cdfa:	ea50 0301 	orrs.w	r3, r0, r1
        ++iNDigits;
    cdfe:	f104 0401 	add.w	r4, r4, #1
    while ( ui64Val )
    ce02:	d1f8      	bne.n	cdf6 <am_util_stdio_vsprintf+0x5f2>
    ce04:	462a      	mov	r2, r5
    ce06:	464d      	mov	r5, r9
    ce08:	46d9      	mov	r9, fp
    ce0a:	46a3      	mov	fp, r4
    ce0c:	9c00      	ldr	r4, [sp, #0]
                    iWidth -= ndigits_in_u64(ui64Val);
    ce0e:	eba8 030b 	sub.w	r3, r8, fp
    if ( i32NumChars <= 0 )
    ce12:	2b00      	cmp	r3, #0
    ce14:	f340 8149 	ble.w	d0aa <am_util_stdio_vsprintf+0x8a6>
    while ( i32NumChars-- )
    ce18:	3b01      	subs	r3, #1
    int32_t i32Cnt = 0;
    ce1a:	4694      	mov	ip, r2
    ce1c:	46a6      	mov	lr, r4
    ce1e:	2000      	movs	r0, #0
    ce20:	462a      	mov	r2, r5
    ce22:	461c      	mov	r4, r3
            *pcBuf++ = cPadChar;
    ce24:	4611      	mov	r1, r2
        if ( pcBuf )
    ce26:	b1a2      	cbz	r2, ce52 <am_util_stdio_vsprintf+0x64e>
            *pcBuf++ = cPadChar;
    ce28:	f801 cb01 	strb.w	ip, [r1], #1
    ce2c:	4623      	mov	r3, r4
    ce2e:	460a      	mov	r2, r1
        i32Cnt++;
    ce30:	3001      	adds	r0, #1
    while ( i32NumChars-- )
    ce32:	1e5c      	subs	r4, r3, #1
    ce34:	2b00      	cmp	r3, #0
    ce36:	d1f5      	bne.n	ce24 <am_util_stdio_vsprintf+0x620>
                    ui32CharCnt += iWidth;
    ce38:	4674      	mov	r4, lr
    ce3a:	4406      	add	r6, r0
                    pcBuf += pcBuf ? iWidth : 0;
    ce3c:	2d00      	cmp	r5, #0
    ce3e:	f000 8123 	beq.w	d088 <am_util_stdio_vsprintf+0x884>
    ce42:	4405      	add	r5, r0
                iVal = uint64_to_str(ui64Val, pcBuf);
    ce44:	462a      	mov	r2, r5
    ce46:	4650      	mov	r0, sl
    ce48:	4649      	mov	r1, r9
    ce4a:	f7ff fc53 	bl	c6f4 <uint64_to_str>
                    pcBuf += iVal;
    ce4e:	4405      	add	r5, r0
    ce50:	e61a      	b.n	ca88 <am_util_stdio_vsprintf+0x284>
    while ( i32NumChars-- )
    ce52:	1e63      	subs	r3, r4, #1
        i32Cnt++;
    ce54:	3001      	adds	r0, #1
    while ( i32NumChars-- )
    ce56:	2c00      	cmp	r4, #0
    ce58:	d1ea      	bne.n	ce30 <am_util_stdio_vsprintf+0x62c>
    ce5a:	e7ed      	b.n	ce38 <am_util_stdio_vsprintf+0x634>
    else if (iExp2 >= 0)
    ce5c:	2a00      	cmp	r2, #0
    ce5e:	db36      	blt.n	cece <am_util_stdio_vsprintf+0x6ca>
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    ce60:	f1a1 087e 	sub.w	r8, r1, #126	; 0x7e
    ce64:	fa00 f808 	lsl.w	r8, r0, r8
        i32IntPart = i32Significand >> (23 - iExp2);
    ce68:	f1c2 0217 	rsb	r2, r2, #23
    if (unFloatValue.I32 < 0)
    ce6c:	2b00      	cmp	r3, #0
        i32IntPart = i32Significand >> (23 - iExp2);
    ce6e:	fa40 f002 	asr.w	r0, r0, r2
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    ce72:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    if (unFloatValue.I32 < 0)
    ce76:	db3a      	blt.n	ceee <am_util_stdio_vsprintf+0x6ea>
    ce78:	462a      	mov	r2, r5
    ce7a:	e5bb      	b.n	c9f4 <am_util_stdio_vsprintf+0x1f0>
                if ( iWidth > 0 )
    ce7c:	2800      	cmp	r0, #0
    ce7e:	dd3b      	ble.n	cef8 <am_util_stdio_vsprintf+0x6f4>
        return ui32RetVal;
    ce80:	469e      	mov	lr, r3
    int32_t i32Cnt = 0;
    ce82:	469c      	mov	ip, r3
    while ( i32NumChars-- )
    ce84:	f100 38ff 	add.w	r8, r0, #4294967295
    int32_t i32Cnt = 0;
    ce88:	2100      	movs	r1, #0
    ce8a:	462b      	mov	r3, r5
            *pcBuf++ = cPadChar;
    ce8c:	4618      	mov	r0, r3
        if ( pcBuf )
    ce8e:	2b00      	cmp	r3, #0
    ce90:	d049      	beq.n	cf26 <am_util_stdio_vsprintf+0x722>
            *pcBuf++ = cPadChar;
    ce92:	f800 2b01 	strb.w	r2, [r0], #1
    ce96:	4647      	mov	r7, r8
    ce98:	4603      	mov	r3, r0
        i32Cnt++;
    ce9a:	3101      	adds	r1, #1
    while ( i32NumChars-- )
    ce9c:	f107 38ff 	add.w	r8, r7, #4294967295
    cea0:	2f00      	cmp	r7, #0
    cea2:	d1f3      	bne.n	ce8c <am_util_stdio_vsprintf+0x688>
                        ui32CharCnt += iWidth;
    cea4:	4608      	mov	r0, r1
    cea6:	440e      	add	r6, r1
                while (*pcStr != 0x0)
    cea8:	f89c 1000 	ldrb.w	r1, [ip]
                        ui32CharCnt += iWidth;
    ceac:	4663      	mov	r3, ip
                        pcBuf += pcBuf ? iWidth : 0;
    ceae:	b105      	cbz	r5, ceb2 <am_util_stdio_vsprintf+0x6ae>
    ceb0:	4405      	add	r5, r0
                while (*pcStr != 0x0)
    ceb2:	2900      	cmp	r1, #0
    ceb4:	f43f ae60 	beq.w	cb78 <am_util_stdio_vsprintf+0x374>
                        iWidth = 0;
    ceb8:	2000      	movs	r0, #0
    ceba:	e62c      	b.n	cb16 <am_util_stdio_vsprintf+0x312>
        switch ( *pcFmt )
    cebc:	f04f 0e01 	mov.w	lr, #1
    cec0:	e6df      	b.n	cc82 <am_util_stdio_vsprintf+0x47e>
                        iWidth -= ui32strlen;
    cec2:	eba0 000e 	sub.w	r0, r0, lr
    if ( i32NumChars <= 0 )
    cec6:	2800      	cmp	r0, #0
    cec8:	dcdb      	bgt.n	ce82 <am_util_stdio_vsprintf+0x67e>
    ceca:	4638      	mov	r0, r7
    cecc:	e7ef      	b.n	ceae <am_util_stdio_vsprintf+0x6aa>
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    cece:	43d2      	mvns	r2, r2
    if (unFloatValue.I32 < 0)
    ced0:	2b00      	cmp	r3, #0
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    ced2:	fa40 f802 	asr.w	r8, r0, r2
        *pcBuf++ = '-';
    ced6:	462b      	mov	r3, r5
    if (unFloatValue.I32 < 0)
    ced8:	da02      	bge.n	cee0 <am_util_stdio_vsprintf+0x6dc>
        *pcBuf++ = '-';
    ceda:	222d      	movs	r2, #45	; 0x2d
    cedc:	f803 2b01 	strb.w	r2, [r3], #1
        *pcBuf++ = '0';
    cee0:	461a      	mov	r2, r3
    cee2:	2330      	movs	r3, #48	; 0x30
    cee4:	f802 3b01 	strb.w	r3, [r2], #1
    cee8:	e58d      	b.n	ca06 <am_util_stdio_vsprintf+0x202>
    i32FracPart = 0;
    ceea:	f04f 0800 	mov.w	r8, #0
        *pcBuf++ = '-';
    ceee:	462b      	mov	r3, r5
    cef0:	222d      	movs	r2, #45	; 0x2d
    cef2:	f803 2b01 	strb.w	r2, [r3], #1
    cef6:	e574      	b.n	c9e2 <am_util_stdio_vsprintf+0x1de>
    while ( *pcBuf++ )
    cef8:	7819      	ldrb	r1, [r3, #0]
                while (*pcStr != 0x0)
    cefa:	469e      	mov	lr, r3
    cefc:	2900      	cmp	r1, #0
    cefe:	f47f ae0a 	bne.w	cb16 <am_util_stdio_vsprintf+0x312>
    cf02:	468e      	mov	lr, r1
                if ( iWidth )
    cf04:	2800      	cmp	r0, #0
    cf06:	f43f ae37 	beq.w	cb78 <am_util_stdio_vsprintf+0x374>
    cf0a:	e618      	b.n	cb3e <am_util_stdio_vsprintf+0x33a>
        bLower = bLongLong = false;
    cf0c:	f04f 0e00 	mov.w	lr, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cf10:	3707      	adds	r7, #7
    cf12:	f027 0707 	bic.w	r7, r7, #7
    cf16:	f8d7 c004 	ldr.w	ip, [r7, #4]
    cf1a:	f857 0b08 	ldr.w	r0, [r7], #8
    cf1e:	e6b4      	b.n	cc8a <am_util_stdio_vsprintf+0x486>
        switch ( *pcFmt )
    cf20:	f04f 0e01 	mov.w	lr, #1
    cf24:	e7f4      	b.n	cf10 <am_util_stdio_vsprintf+0x70c>
    while ( i32NumChars-- )
    cf26:	f108 37ff 	add.w	r7, r8, #4294967295
        i32Cnt++;
    cf2a:	3101      	adds	r1, #1
    while ( i32NumChars-- )
    cf2c:	f1b8 0f00 	cmp.w	r8, #0
    cf30:	d1b3      	bne.n	ce9a <am_util_stdio_vsprintf+0x696>
    cf32:	e7b7      	b.n	cea4 <am_util_stdio_vsprintf+0x6a0>
    *pcBuf++ = '.';
    cf34:	f102 0c01 	add.w	ip, r2, #1
        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    cf38:	ebac 0105 	sub.w	r1, ip, r5
    cf3c:	f1c1 0313 	rsb	r3, r1, #19
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    cf40:	454b      	cmp	r3, r9
    cf42:	bfa8      	it	ge
    cf44:	464b      	movge	r3, r9
        for (jx = 0; jx < iMax; jx++)
    cf46:	2b00      	cmp	r3, #0
    cf48:	f340 80ca 	ble.w	d0e0 <am_util_stdio_vsprintf+0x8dc>
    cf4c:	1c58      	adds	r0, r3, #1
    cf4e:	4410      	add	r0, r2
            i32FracPart *= 10;
    cf50:	eb08 0888 	add.w	r8, r8, r8, lsl #2
            *pcBuf++ = (i32FracPart >> 24) + '0';
    cf54:	ea4f 51e8 	mov.w	r1, r8, asr #23
    cf58:	3130      	adds	r1, #48	; 0x30
    cf5a:	f80c 1b01 	strb.w	r1, [ip], #1
            i32FracPart *= 10;
    cf5e:	ea4f 0848 	mov.w	r8, r8, lsl #1
        for (jx = 0; jx < iMax; jx++)
    cf62:	4560      	cmp	r0, ip
            i32FracPart &= 0x00FFFFFF;
    cf64:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
        for (jx = 0; jx < iMax; jx++)
    cf68:	d1f2      	bne.n	cf50 <am_util_stdio_vsprintf+0x74c>
    cf6a:	441a      	add	r2, r3
    return (pcBuf - pcBufInitial);
    cf6c:	1b41      	subs	r1, r0, r5
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    cf6e:	eb08 0888 	add.w	r8, r8, r8, lsl #2
    cf72:	f348 53c7 	sbfx	r3, r8, #23, #8
    cf76:	2b04      	cmp	r3, #4
    cf78:	f77f ad4f 	ble.w	ca1a <am_util_stdio_vsprintf+0x216>
            while ( pcBuftmp >= pcBufInitial )
    cf7c:	4295      	cmp	r5, r2
    cf7e:	f63f ad4c 	bhi.w	ca1a <am_util_stdio_vsprintf+0x216>
    cf82:	4613      	mov	r3, r2
                    *pcBuftmp = '0';
    cf84:	f04f 0e30 	mov.w	lr, #48	; 0x30
    cf88:	e004      	b.n	cf94 <am_util_stdio_vsprintf+0x790>
    cf8a:	f883 e001 	strb.w	lr, [r3, #1]
            while ( pcBuftmp >= pcBufInitial )
    cf8e:	429d      	cmp	r5, r3
    cf90:	f63f ad43 	bhi.w	ca1a <am_util_stdio_vsprintf+0x216>
                    *pcBuftmp = '0';
    cf94:	469c      	mov	ip, r3
                if ( *pcBuftmp == '.' )
    cf96:	f813 2901 	ldrb.w	r2, [r3], #-1
    cf9a:	2a2e      	cmp	r2, #46	; 0x2e
    cf9c:	d0f7      	beq.n	cf8e <am_util_stdio_vsprintf+0x78a>
                else if ( *pcBuftmp == '9' )
    cf9e:	2a39      	cmp	r2, #57	; 0x39
    cfa0:	d0f3      	beq.n	cf8a <am_util_stdio_vsprintf+0x786>
                    *pcBuftmp += 1;
    cfa2:	3201      	adds	r2, #1
    cfa4:	f88c 2000 	strb.w	r2, [ip]
                    break;
    cfa8:	e537      	b.n	ca1a <am_util_stdio_vsprintf+0x216>
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    cfaa:	1c4b      	adds	r3, r1, #1
    cfac:	f000 8081 	beq.w	d0b2 <am_util_stdio_vsprintf+0x8ae>
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    cfb0:	3102      	adds	r1, #2
    cfb2:	f000 8082 	beq.w	d0ba <am_util_stdio_vsprintf+0x8b6>
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    cfb6:	4b4e      	ldr	r3, [pc, #312]	; (d0f0 <am_util_stdio_vsprintf+0x8ec>)
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    cfb8:	602b      	str	r3, [r5, #0]
    cfba:	2303      	movs	r3, #3
    cfbc:	e533      	b.n	ca26 <am_util_stdio_vsprintf+0x222>
    int iNDigits = ui64Val ? 0 : 1;
    cfbe:	ea59 010a 	orrs.w	r1, r9, sl
    cfc2:	bf0c      	ite	eq
    cfc4:	f04f 0b01 	moveq.w	fp, #1
    cfc8:	f04f 0b00 	movne.w	fp, #0
    while ( ui64Val )
    cfcc:	f000 808a 	beq.w	d0e4 <am_util_stdio_vsprintf+0x8e0>
                    bNeg = false;
    cfd0:	2300      	movs	r3, #0
    cfd2:	9300      	str	r3, [sp, #0]
    cfd4:	4648      	mov	r0, r9
    cfd6:	4651      	mov	r1, sl
    cfd8:	9401      	str	r4, [sp, #4]
    cfda:	465c      	mov	r4, fp
    cfdc:	46d3      	mov	fp, sl
    cfde:	46ca      	mov	sl, r9
    cfe0:	46a9      	mov	r9, r5
    cfe2:	4615      	mov	r5, r2
        ui64Val = divu64_10(ui64Val);
    cfe4:	f7ff fb2a 	bl	c63c <divu64_10>
    while ( ui64Val )
    cfe8:	ea50 0301 	orrs.w	r3, r0, r1
        ++iNDigits;
    cfec:	f104 0401 	add.w	r4, r4, #1
    while ( ui64Val )
    cff0:	d1f8      	bne.n	cfe4 <am_util_stdio_vsprintf+0x7e0>
                    if ( bNeg )
    cff2:	9900      	ldr	r1, [sp, #0]
                    iWidth -= ndigits_in_i64(ui64Val);
    cff4:	462a      	mov	r2, r5
    cff6:	464d      	mov	r5, r9
    cff8:	46d1      	mov	r9, sl
    cffa:	46da      	mov	sl, fp
    cffc:	46a3      	mov	fp, r4
    cffe:	eba8 030b 	sub.w	r3, r8, fp
    d002:	9c01      	ldr	r4, [sp, #4]
                    if ( bNeg )
    d004:	b119      	cbz	r1, d00e <am_util_stdio_vsprintf+0x80a>
                        if ( ui8PadChar == '0' )
    d006:	2a30      	cmp	r2, #48	; 0x30
                        --iWidth;
    d008:	f103 33ff 	add.w	r3, r3, #4294967295
                        if ( ui8PadChar == '0' )
    d00c:	d062      	beq.n	d0d4 <am_util_stdio_vsprintf+0x8d0>
    if ( i32NumChars <= 0 )
    d00e:	2b00      	cmp	r3, #0
    d010:	dd4d      	ble.n	d0ae <am_util_stdio_vsprintf+0x8aa>
    while ( i32NumChars-- )
    d012:	3b01      	subs	r3, #1
    int32_t i32Cnt = 0;
    d014:	4694      	mov	ip, r2
    d016:	46a6      	mov	lr, r4
    d018:	2000      	movs	r0, #0
    d01a:	462a      	mov	r2, r5
    d01c:	461c      	mov	r4, r3
            *pcBuf++ = cPadChar;
    d01e:	4611      	mov	r1, r2
        if ( pcBuf )
    d020:	b1c2      	cbz	r2, d054 <am_util_stdio_vsprintf+0x850>
            *pcBuf++ = cPadChar;
    d022:	f801 cb01 	strb.w	ip, [r1], #1
    d026:	4623      	mov	r3, r4
    d028:	460a      	mov	r2, r1
        i32Cnt++;
    d02a:	3001      	adds	r0, #1
    while ( i32NumChars-- )
    d02c:	1e5c      	subs	r4, r3, #1
    d02e:	2b00      	cmp	r3, #0
    d030:	d1f5      	bne.n	d01e <am_util_stdio_vsprintf+0x81a>
    d032:	4674      	mov	r4, lr
    d034:	4662      	mov	r2, ip
                    ui32CharCnt += iWidth;
    d036:	4406      	add	r6, r0
                    pcBuf += pcBuf ? iWidth : 0;
    d038:	b365      	cbz	r5, d094 <am_util_stdio_vsprintf+0x890>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d03a:	9b00      	ldr	r3, [sp, #0]
                    pcBuf += pcBuf ? iWidth : 0;
    d03c:	4405      	add	r5, r0
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d03e:	b113      	cbz	r3, d046 <am_util_stdio_vsprintf+0x842>
    d040:	2a20      	cmp	r2, #32
    d042:	f43f ae17 	beq.w	cc74 <am_util_stdio_vsprintf+0x470>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d046:	462a      	mov	r2, r5
    d048:	4648      	mov	r0, r9
    d04a:	4651      	mov	r1, sl
    d04c:	f7ff fb52 	bl	c6f4 <uint64_to_str>
                    pcBuf += iVal;
    d050:	4405      	add	r5, r0
    d052:	e519      	b.n	ca88 <am_util_stdio_vsprintf+0x284>
    while ( i32NumChars-- )
    d054:	1e63      	subs	r3, r4, #1
        i32Cnt++;
    d056:	3001      	adds	r0, #1
    while ( i32NumChars-- )
    d058:	2c00      	cmp	r4, #0
    d05a:	d1e6      	bne.n	d02a <am_util_stdio_vsprintf+0x826>
    d05c:	e7e9      	b.n	d032 <am_util_stdio_vsprintf+0x82e>
    d05e:	f04f 0800 	mov.w	r8, #0
    d062:	e65f      	b.n	cd24 <am_util_stdio_vsprintf+0x520>
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    d064:	4b23      	ldr	r3, [pc, #140]	; (d0f4 <am_util_stdio_vsprintf+0x8f0>)
    d066:	602b      	str	r3, [r5, #0]
    d068:	2303      	movs	r3, #3
    d06a:	e4dc      	b.n	ca26 <am_util_stdio_vsprintf+0x222>
                    bNeg = true;
    d06c:	2301      	movs	r3, #1
    d06e:	9300      	str	r3, [sp, #0]
    int iNDigits = ui64Val ? 0 : 1;
    d070:	f04f 0b00 	mov.w	fp, #0
    d074:	e7ae      	b.n	cfd4 <am_util_stdio_vsprintf+0x7d0>
    uint32_t ui32Val = 0, uCnt = 0;
    d076:	f04f 0a00 	mov.w	sl, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d07a:	4653      	mov	r3, sl
    d07c:	e52b      	b.n	cad6 <am_util_stdio_vsprintf+0x2d2>
                if ( iWidth > 0 )
    d07e:	2800      	cmp	r0, #0
    d080:	f77f af3f 	ble.w	cf02 <am_util_stdio_vsprintf+0x6fe>
    uint32_t ui32RetVal = 0;
    d084:	468e      	mov	lr, r1
    d086:	e6fc      	b.n	ce82 <am_util_stdio_vsprintf+0x67e>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d088:	462a      	mov	r2, r5
    d08a:	4650      	mov	r0, sl
    d08c:	4649      	mov	r1, r9
    d08e:	f7ff fb31 	bl	c6f4 <uint64_to_str>
                if ( pcBuf )
    d092:	e4dd      	b.n	ca50 <am_util_stdio_vsprintf+0x24c>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d094:	9b00      	ldr	r3, [sp, #0]
    d096:	b1b3      	cbz	r3, d0c6 <am_util_stdio_vsprintf+0x8c2>
    d098:	2a20      	cmp	r2, #32
    d09a:	f43f adee 	beq.w	cc7a <am_util_stdio_vsprintf+0x476>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d09e:	462a      	mov	r2, r5
    d0a0:	4648      	mov	r0, r9
    d0a2:	4651      	mov	r1, sl
    d0a4:	f7ff fb26 	bl	c6f4 <uint64_to_str>
                if ( pcBuf )
    d0a8:	e4d2      	b.n	ca50 <am_util_stdio_vsprintf+0x24c>
    d0aa:	2000      	movs	r0, #0
    d0ac:	e6c6      	b.n	ce3c <am_util_stdio_vsprintf+0x638>
    d0ae:	2000      	movs	r0, #0
    d0b0:	e7c2      	b.n	d038 <am_util_stdio_vsprintf+0x834>
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d0b2:	4b10      	ldr	r3, [pc, #64]	; (d0f4 <am_util_stdio_vsprintf+0x8f0>)
    d0b4:	e780      	b.n	cfb8 <am_util_stdio_vsprintf+0x7b4>
    d0b6:	2000      	movs	r0, #0
    d0b8:	e55c      	b.n	cb74 <am_util_stdio_vsprintf+0x370>
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d0ba:	4b0f      	ldr	r3, [pc, #60]	; (d0f8 <am_util_stdio_vsprintf+0x8f4>)
    d0bc:	e77c      	b.n	cfb8 <am_util_stdio_vsprintf+0x7b4>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d0be:	2300      	movs	r3, #0
        uCnt++;
    d0c0:	f04f 0a01 	mov.w	sl, #1
    d0c4:	e506      	b.n	cad4 <am_util_stdio_vsprintf+0x2d0>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d0c6:	4648      	mov	r0, r9
    d0c8:	4651      	mov	r1, sl
    d0ca:	462a      	mov	r2, r5
    d0cc:	f7ff fb12 	bl	c6f4 <uint64_to_str>
                ui32CharCnt += iVal;
    d0d0:	4406      	add	r6, r0
                break;
    d0d2:	e4bf      	b.n	ca54 <am_util_stdio_vsprintf+0x250>
                            if ( pcBuf )
    d0d4:	b115      	cbz	r5, d0dc <am_util_stdio_vsprintf+0x8d8>
                                *pcBuf++ = '-';
    d0d6:	212d      	movs	r1, #45	; 0x2d
    d0d8:	f805 1b01 	strb.w	r1, [r5], #1
                            ++ui32CharCnt;
    d0dc:	3601      	adds	r6, #1
    d0de:	e796      	b.n	d00e <am_util_stdio_vsprintf+0x80a>
    *pcBuf++ = '.';
    d0e0:	4660      	mov	r0, ip
    d0e2:	e744      	b.n	cf6e <am_util_stdio_vsprintf+0x76a>
                    iWidth -= ndigits_in_i64(ui64Val);
    d0e4:	eba8 030b 	sub.w	r3, r8, fp
                    bNeg = false;
    d0e8:	468a      	mov	sl, r1
    d0ea:	9100      	str	r1, [sp, #0]
                    ui64Val = i64Val;
    d0ec:	4689      	mov	r9, r1
    d0ee:	e78e      	b.n	d00e <am_util_stdio_vsprintf+0x80a>
    d0f0:	003f2e3f 	.word	0x003f2e3f
    d0f4:	00302e30 	.word	0x00302e30
    d0f8:	00232e23 	.word	0x00232e23

0000d0fc <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d0fc:	b40f      	push	{r0, r1, r2, r3}
    d0fe:	b530      	push	{r4, r5, lr}
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d100:	4d09      	ldr	r5, [pc, #36]	; (d128 <am_util_stdio_printf+0x2c>)
    d102:	682c      	ldr	r4, [r5, #0]
{
    d104:	b083      	sub	sp, #12
    if (!g_pfnCharPrint)
    d106:	b14c      	cbz	r4, d11c <am_util_stdio_printf+0x20>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d108:	aa07      	add	r2, sp, #28
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d10a:	9906      	ldr	r1, [sp, #24]
    d10c:	4807      	ldr	r0, [pc, #28]	; (d12c <am_util_stdio_printf+0x30>)
    va_start(pArgs, pcFmt);
    d10e:	9201      	str	r2, [sp, #4]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d110:	f7ff fb78 	bl	c804 <am_util_stdio_vsprintf>
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d114:	682b      	ldr	r3, [r5, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d116:	4604      	mov	r4, r0
    g_pfnCharPrint(g_prfbuf);
    d118:	4804      	ldr	r0, [pc, #16]	; (d12c <am_util_stdio_printf+0x30>)
    d11a:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
}
    d11c:	4620      	mov	r0, r4
    d11e:	b003      	add	sp, #12
    d120:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    d124:	b004      	add	sp, #16
    d126:	4770      	bx	lr
    d128:	10001038 	.word	0x10001038
    d12c:	1000103c 	.word	0x1000103c

0000d130 <am_util_stdio_terminal_clear>:
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d130:	4801      	ldr	r0, [pc, #4]	; (d138 <am_util_stdio_terminal_clear+0x8>)
    d132:	f7ff bfe3 	b.w	d0fc <am_util_stdio_printf>
    d136:	bf00      	nop
    d138:	0000e690 	.word	0x0000e690

0000d13c <NMI_Handler>:
NMI_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d13c:	e7fe      	b.n	d13c <NMI_Handler>
    d13e:	bf00      	nop

0000d140 <BusFault_Handler>:
HardFault_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d140:	e7fe      	b.n	d140 <BusFault_Handler>
    d142:	bf00      	nop

0000d144 <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d144:	e7fe      	b.n	d144 <DebugMon_Handler>
    d146:	bf00      	nop

0000d148 <Reset_Handler>:
    __asm("    ldr    r0, =0xE000ED08\n"
    d148:	4811      	ldr	r0, [pc, #68]	; (d190 <zero_loop+0x12>)
    d14a:	4912      	ldr	r1, [pc, #72]	; (d194 <zero_loop+0x16>)
    d14c:	6001      	str	r1, [r0, #0]
    __asm("    ldr    sp, [r1]");
    d14e:	f8d1 d000 	ldr.w	sp, [r1]
    __asm("ldr  r0, =0xE000ED88\n"
    d152:	4811      	ldr	r0, [pc, #68]	; (d198 <zero_loop+0x1a>)
    d154:	6801      	ldr	r1, [r0, #0]
    d156:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d15a:	6001      	str	r1, [r0, #0]
    d15c:	f3bf 8f4f 	dsb	sy
    d160:	f3bf 8f6f 	isb	sy
    __asm("    ldr     r0, =_init_data\n"
    d164:	480d      	ldr	r0, [pc, #52]	; (d19c <zero_loop+0x1e>)
    d166:	490e      	ldr	r1, [pc, #56]	; (d1a0 <zero_loop+0x22>)
    d168:	4a0e      	ldr	r2, [pc, #56]	; (d1a4 <zero_loop+0x26>)

0000d16a <copy_loop>:
    d16a:	f850 3b04 	ldr.w	r3, [r0], #4
    d16e:	f841 3b04 	str.w	r3, [r1], #4
    d172:	4291      	cmp	r1, r2
    d174:	dbf9      	blt.n	d16a <copy_loop>
    __asm("    ldr     r0, =_sbss\n"
    d176:	480c      	ldr	r0, [pc, #48]	; (d1a8 <zero_loop+0x2a>)
    d178:	490c      	ldr	r1, [pc, #48]	; (d1ac <zero_loop+0x2e>)
    d17a:	f04f 0200 	mov.w	r2, #0

0000d17e <zero_loop>:
    d17e:	4288      	cmp	r0, r1
    d180:	bfb8      	it	lt
    d182:	f840 2b04 	strlt.w	r2, [r0], #4
    d186:	dbfa      	blt.n	d17e <zero_loop>
    main();
    d188:	f7ff f8a4 	bl	c2d4 <main>
    __asm("    bkpt     ");
    d18c:	be00      	bkpt	0x0000
}
    d18e:	0000      	.short	0x0000
    d190:	e000ed08 	.word	0xe000ed08
    d194:	0000c000 	.word	0x0000c000
    d198:	e000ed88 	.word	0xe000ed88
    d19c:	0000e950 	.word	0x0000e950
    d1a0:	10001000 	.word	0x10001000
    d1a4:	10001034 	.word	0x10001034
    d1a8:	10001034 	.word	0x10001034
    d1ac:	10001148 	.word	0x10001148

0000d1b0 <am_bsp_low_power_init>:
    d1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d1b2:	f000 feb1 	bl	df18 <am_hal_pwrctrl_low_power_init>
    d1b6:	f000 ff8d 	bl	e0d4 <am_hal_rtc_osc_disable>
    d1ba:	4b0b      	ldr	r3, [pc, #44]	; (d1e8 <am_bsp_low_power_init+0x38>)
    d1bc:	4f0b      	ldr	r7, [pc, #44]	; (d1ec <am_bsp_low_power_init+0x3c>)
    d1be:	681e      	ldr	r6, [r3, #0]
    d1c0:	2400      	movs	r4, #0
    d1c2:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    d1c6:	4631      	mov	r1, r6
    d1c8:	4628      	mov	r0, r5
    d1ca:	f000 fb19 	bl	d800 <am_hal_gpio_pinconfig>
    d1ce:	2103      	movs	r1, #3
    d1d0:	4628      	mov	r0, r5
    d1d2:	f000 fccd 	bl	db70 <am_hal_gpio_state_write>
    d1d6:	3401      	adds	r4, #1
    d1d8:	2100      	movs	r1, #0
    d1da:	4628      	mov	r0, r5
    d1dc:	f000 fcc8 	bl	db70 <am_hal_gpio_state_write>
    d1e0:	2c05      	cmp	r4, #5
    d1e2:	d1ee      	bne.n	d1c2 <am_bsp_low_power_init+0x12>
    d1e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d1e6:	bf00      	nop
    d1e8:	0000e6b0 	.word	0x0000e6b0
    d1ec:	10001000 	.word	0x10001000

0000d1f0 <am_bsp_debug_printf_disable>:
    d1f0:	b538      	push	{r3, r4, r5, lr}
    d1f2:	4b17      	ldr	r3, [pc, #92]	; (d250 <am_bsp_debug_printf_disable+0x60>)
    d1f4:	681c      	ldr	r4, [r3, #0]
    d1f6:	2c01      	cmp	r4, #1
    d1f8:	d002      	beq.n	d200 <am_bsp_debug_printf_disable+0x10>
    d1fa:	2c02      	cmp	r4, #2
    d1fc:	d00c      	beq.n	d218 <am_bsp_debug_printf_disable+0x28>
    d1fe:	bd38      	pop	{r3, r4, r5, pc}
    d200:	f000 fd26 	bl	dc50 <am_hal_itm_disable>
    d204:	2000      	movs	r0, #0
    d206:	f7ff faf7 	bl	c7f8 <am_util_stdio_printf_init>
    d20a:	4b12      	ldr	r3, [pc, #72]	; (d254 <am_bsp_debug_printf_disable+0x64>)
    d20c:	2029      	movs	r0, #41	; 0x29
    d20e:	6819      	ldr	r1, [r3, #0]
    d210:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d214:	f000 baf4 	b.w	d800 <am_hal_gpio_pinconfig>
    d218:	4d0f      	ldr	r5, [pc, #60]	; (d258 <am_bsp_debug_printf_disable+0x68>)
    d21a:	6828      	ldr	r0, [r5, #0]
    d21c:	f001 f840 	bl	e2a0 <am_hal_uart_tx_flush>
    d220:	2000      	movs	r0, #0
    d222:	f7ff fae9 	bl	c7f8 <am_util_stdio_printf_init>
    d226:	4621      	mov	r1, r4
    d228:	2200      	movs	r2, #0
    d22a:	6828      	ldr	r0, [r5, #0]
    d22c:	f000 ffc0 	bl	e1b0 <am_hal_uart_power_control>
    d230:	6828      	ldr	r0, [r5, #0]
    d232:	f000 ffa9 	bl	e188 <am_hal_uart_deinitialize>
    d236:	4b07      	ldr	r3, [pc, #28]	; (d254 <am_bsp_debug_printf_disable+0x64>)
    d238:	681c      	ldr	r4, [r3, #0]
    d23a:	2016      	movs	r0, #22
    d23c:	4621      	mov	r1, r4
    d23e:	f000 fadf 	bl	d800 <am_hal_gpio_pinconfig>
    d242:	4621      	mov	r1, r4
    d244:	2017      	movs	r0, #23
    d246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d24a:	f000 bad9 	b.w	d800 <am_hal_gpio_pinconfig>
    d24e:	bf00      	nop
    d250:	10001140 	.word	0x10001140
    d254:	0000e6ac 	.word	0x0000e6ac
    d258:	1000113c 	.word	0x1000113c

0000d25c <am_bsp_itm_printf_enable>:
    d25c:	b500      	push	{lr}
    d25e:	4b0b      	ldr	r3, [pc, #44]	; (d28c <am_bsp_itm_printf_enable+0x30>)
    d260:	b087      	sub	sp, #28
    d262:	2201      	movs	r2, #1
    d264:	601a      	str	r2, [r3, #0]
    d266:	f000 fccf 	bl	dc08 <am_hal_itm_enable>
    d26a:	4b09      	ldr	r3, [pc, #36]	; (d290 <am_bsp_itm_printf_enable+0x34>)
    d26c:	9301      	str	r3, [sp, #4]
    d26e:	a801      	add	r0, sp, #4
    d270:	f000 ff3a 	bl	e0e8 <am_hal_tpiu_enable>
    d274:	4b07      	ldr	r3, [pc, #28]	; (d294 <am_bsp_itm_printf_enable+0x38>)
    d276:	2029      	movs	r0, #41	; 0x29
    d278:	6819      	ldr	r1, [r3, #0]
    d27a:	f000 fac1 	bl	d800 <am_hal_gpio_pinconfig>
    d27e:	4806      	ldr	r0, [pc, #24]	; (d298 <am_bsp_itm_printf_enable+0x3c>)
    d280:	f7ff faba 	bl	c7f8 <am_util_stdio_printf_init>
    d284:	b007      	add	sp, #28
    d286:	f85d fb04 	ldr.w	pc, [sp], #4
    d28a:	bf00      	nop
    d28c:	10001140 	.word	0x10001140
    d290:	000f4240 	.word	0x000f4240
    d294:	0000e6a4 	.word	0x0000e6a4
    d298:	0000dd05 	.word	0x0000dd05

0000d29c <am_hal_cachectrl_config>:
    d29c:	b530      	push	{r4, r5, lr}
    d29e:	b083      	sub	sp, #12
    d2a0:	4604      	mov	r4, r0
    d2a2:	f000 fca9 	bl	dbf8 <am_hal_interrupt_master_disable>
    d2a6:	4d0e      	ldr	r5, [pc, #56]	; (d2e0 <am_hal_cachectrl_config+0x44>)
    d2a8:	9001      	str	r0, [sp, #4]
    d2aa:	682b      	ldr	r3, [r5, #0]
    d2ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    d2b0:	602b      	str	r3, [r5, #0]
    d2b2:	9801      	ldr	r0, [sp, #4]
    d2b4:	f000 fca4 	bl	dc00 <am_hal_interrupt_master_set>
    d2b8:	7863      	ldrb	r3, [r4, #1]
    d2ba:	7822      	ldrb	r2, [r4, #0]
    d2bc:	78a1      	ldrb	r1, [r4, #2]
    d2be:	021b      	lsls	r3, r3, #8
    d2c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
    d2c4:	0112      	lsls	r2, r2, #4
    d2c6:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    d2ca:	b2d2      	uxtb	r2, r2
    d2cc:	4313      	orrs	r3, r2
    d2ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d2d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d2d6:	2000      	movs	r0, #0
    d2d8:	602b      	str	r3, [r5, #0]
    d2da:	b003      	add	sp, #12
    d2dc:	bd30      	pop	{r4, r5, pc}
    d2de:	bf00      	nop
    d2e0:	40018000 	.word	0x40018000

0000d2e4 <am_hal_cachectrl_enable>:
    d2e4:	4a03      	ldr	r2, [pc, #12]	; (d2f4 <am_hal_cachectrl_enable+0x10>)
    d2e6:	6813      	ldr	r3, [r2, #0]
    d2e8:	f043 0301 	orr.w	r3, r3, #1
    d2ec:	2000      	movs	r0, #0
    d2ee:	6013      	str	r3, [r2, #0]
    d2f0:	4770      	bx	lr
    d2f2:	bf00      	nop
    d2f4:	40018000 	.word	0x40018000

0000d2f8 <am_hal_cachectrl_control>:
    d2f8:	b510      	push	{r4, lr}
    d2fa:	3801      	subs	r0, #1
    d2fc:	b08e      	sub	sp, #56	; 0x38
    d2fe:	2810      	cmp	r0, #16
    d300:	f200 815e 	bhi.w	d5c0 <am_hal_cachectrl_control+0x2c8>
    d304:	e8df f010 	tbh	[pc, r0, lsl #1]
    d308:	00360018 	.word	0x00360018
    d30c:	0040003d 	.word	0x0040003d
    d310:	00450043 	.word	0x00450043
    d314:	0011001a 	.word	0x0011001a
    d318:	00540047 	.word	0x00540047
    d31c:	009a0061 	.word	0x009a0061
    d320:	010c00d3 	.word	0x010c00d3
    d324:	013f0126 	.word	0x013f0126
    d328:	001d      	.short	0x001d
    d32a:	f44f 7300 	mov.w	r3, #512	; 0x200
    d32e:	4aac      	ldr	r2, [pc, #688]	; (d5e0 <am_hal_cachectrl_control+0x2e8>)
    d330:	2000      	movs	r0, #0
    d332:	6093      	str	r3, [r2, #8]
    d334:	b00e      	add	sp, #56	; 0x38
    d336:	bd10      	pop	{r4, pc}
    d338:	2301      	movs	r3, #1
    d33a:	e7f8      	b.n	d32e <am_hal_cachectrl_control+0x36>
    d33c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    d340:	e7f5      	b.n	d32e <am_hal_cachectrl_control+0x36>
    d342:	2900      	cmp	r1, #0
    d344:	f000 813c 	beq.w	d5c0 <am_hal_cachectrl_control+0x2c8>
    d348:	684a      	ldr	r2, [r1, #4]
    d34a:	48a6      	ldr	r0, [pc, #664]	; (d5e4 <am_hal_cachectrl_control+0x2ec>)
    d34c:	4202      	tst	r2, r0
    d34e:	f040 8137 	bne.w	d5c0 <am_hal_cachectrl_control+0x2c8>
    d352:	688b      	ldr	r3, [r1, #8]
    d354:	4018      	ands	r0, r3
    d356:	f040 8133 	bne.w	d5c0 <am_hal_cachectrl_control+0x2c8>
    d35a:	780c      	ldrb	r4, [r1, #0]
    d35c:	2c00      	cmp	r4, #0
    d35e:	f040 8133 	bne.w	d5c8 <am_hal_cachectrl_control+0x2d0>
    d362:	4c9f      	ldr	r4, [pc, #636]	; (d5e0 <am_hal_cachectrl_control+0x2e8>)
    d364:	7849      	ldrb	r1, [r1, #1]
    d366:	6122      	str	r2, [r4, #16]
    d368:	6163      	str	r3, [r4, #20]
    d36a:	6823      	ldr	r3, [r4, #0]
    d36c:	f361 0382 	bfi	r3, r1, #2, #1
    d370:	6023      	str	r3, [r4, #0]
    d372:	e7df      	b.n	d334 <am_hal_cachectrl_control+0x3c>
    d374:	4b9a      	ldr	r3, [pc, #616]	; (d5e0 <am_hal_cachectrl_control+0x2e8>)
    d376:	681b      	ldr	r3, [r3, #0]
    d378:	01db      	lsls	r3, r3, #7
    d37a:	f140 811f 	bpl.w	d5bc <am_hal_cachectrl_control+0x2c4>
    d37e:	2302      	movs	r3, #2
    d380:	e7d5      	b.n	d32e <am_hal_cachectrl_control+0x36>
    d382:	f44f 6388 	mov.w	r3, #1088	; 0x440
    d386:	e7d2      	b.n	d32e <am_hal_cachectrl_control+0x36>
    d388:	f44f 7308 	mov.w	r3, #544	; 0x220
    d38c:	e7cf      	b.n	d32e <am_hal_cachectrl_control+0x36>
    d38e:	2340      	movs	r3, #64	; 0x40
    d390:	e7cd      	b.n	d32e <am_hal_cachectrl_control+0x36>
    d392:	2320      	movs	r3, #32
    d394:	e7cb      	b.n	d32e <am_hal_cachectrl_control+0x36>
    d396:	f000 fc2f 	bl	dbf8 <am_hal_interrupt_master_disable>
    d39a:	4a91      	ldr	r2, [pc, #580]	; (d5e0 <am_hal_cachectrl_control+0x2e8>)
    d39c:	9000      	str	r0, [sp, #0]
    d39e:	6813      	ldr	r3, [r2, #0]
    d3a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    d3a4:	6013      	str	r3, [r2, #0]
    d3a6:	9800      	ldr	r0, [sp, #0]
    d3a8:	f000 fc2a 	bl	dc00 <am_hal_interrupt_master_set>
    d3ac:	2000      	movs	r0, #0
    d3ae:	e7c1      	b.n	d334 <am_hal_cachectrl_control+0x3c>
    d3b0:	f000 fc22 	bl	dbf8 <am_hal_interrupt_master_disable>
    d3b4:	4a8a      	ldr	r2, [pc, #552]	; (d5e0 <am_hal_cachectrl_control+0x2e8>)
    d3b6:	9001      	str	r0, [sp, #4]
    d3b8:	6813      	ldr	r3, [r2, #0]
    d3ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    d3be:	6013      	str	r3, [r2, #0]
    d3c0:	9801      	ldr	r0, [sp, #4]
    d3c2:	f000 fc1d 	bl	dc00 <am_hal_interrupt_master_set>
    d3c6:	2000      	movs	r0, #0
    d3c8:	e7b4      	b.n	d334 <am_hal_cachectrl_control+0x3c>
    d3ca:	f000 fc15 	bl	dbf8 <am_hal_interrupt_master_disable>
    d3ce:	4603      	mov	r3, r0
    d3d0:	4885      	ldr	r0, [pc, #532]	; (d5e8 <am_hal_cachectrl_control+0x2f0>)
    d3d2:	9302      	str	r3, [sp, #8]
    d3d4:	f000 fa0a 	bl	d7ec <am_hal_flash_load_ui32>
    d3d8:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d3dc:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d3e0:	4881      	ldr	r0, [pc, #516]	; (d5e8 <am_hal_cachectrl_control+0x2f0>)
    d3e2:	f000 fa07 	bl	d7f4 <am_hal_flash_store_ui32>
    d3e6:	9802      	ldr	r0, [sp, #8]
    d3e8:	f000 fc0a 	bl	dc00 <am_hal_interrupt_master_set>
    d3ec:	f000 fc04 	bl	dbf8 <am_hal_interrupt_master_disable>
    d3f0:	4603      	mov	r3, r0
    d3f2:	487d      	ldr	r0, [pc, #500]	; (d5e8 <am_hal_cachectrl_control+0x2f0>)
    d3f4:	9303      	str	r3, [sp, #12]
    d3f6:	f000 f9f9 	bl	d7ec <am_hal_flash_load_ui32>
    d3fa:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d3fe:	f440 61ee 	orr.w	r1, r0, #1904	; 0x770
    d402:	4879      	ldr	r0, [pc, #484]	; (d5e8 <am_hal_cachectrl_control+0x2f0>)
    d404:	f000 f9f6 	bl	d7f4 <am_hal_flash_store_ui32>
    d408:	9803      	ldr	r0, [sp, #12]
    d40a:	f000 fbf9 	bl	dc00 <am_hal_interrupt_master_set>
    d40e:	f000 fbf3 	bl	dbf8 <am_hal_interrupt_master_disable>
    d412:	4603      	mov	r3, r0
    d414:	4874      	ldr	r0, [pc, #464]	; (d5e8 <am_hal_cachectrl_control+0x2f0>)
    d416:	9304      	str	r3, [sp, #16]
    d418:	f000 f9e8 	bl	d7ec <am_hal_flash_load_ui32>
    d41c:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d420:	f020 000f 	bic.w	r0, r0, #15
    d424:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d428:	f041 0103 	orr.w	r1, r1, #3
    d42c:	486e      	ldr	r0, [pc, #440]	; (d5e8 <am_hal_cachectrl_control+0x2f0>)
    d42e:	f000 f9e1 	bl	d7f4 <am_hal_flash_store_ui32>
    d432:	9804      	ldr	r0, [sp, #16]
    d434:	f000 fbe4 	bl	dc00 <am_hal_interrupt_master_set>
    d438:	2000      	movs	r0, #0
    d43a:	e77b      	b.n	d334 <am_hal_cachectrl_control+0x3c>
    d43c:	f000 fbdc 	bl	dbf8 <am_hal_interrupt_master_disable>
    d440:	4603      	mov	r3, r0
    d442:	4869      	ldr	r0, [pc, #420]	; (d5e8 <am_hal_cachectrl_control+0x2f0>)
    d444:	9305      	str	r3, [sp, #20]
    d446:	f000 f9d1 	bl	d7ec <am_hal_flash_load_ui32>
    d44a:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d44e:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    d452:	4865      	ldr	r0, [pc, #404]	; (d5e8 <am_hal_cachectrl_control+0x2f0>)
    d454:	f000 f9ce 	bl	d7f4 <am_hal_flash_store_ui32>
    d458:	9805      	ldr	r0, [sp, #20]
    d45a:	f000 fbd1 	bl	dc00 <am_hal_interrupt_master_set>
    d45e:	f000 fbcb 	bl	dbf8 <am_hal_interrupt_master_disable>
    d462:	4603      	mov	r3, r0
    d464:	4860      	ldr	r0, [pc, #384]	; (d5e8 <am_hal_cachectrl_control+0x2f0>)
    d466:	9306      	str	r3, [sp, #24]
    d468:	f000 f9c0 	bl	d7ec <am_hal_flash_load_ui32>
    d46c:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d470:	f440 61ea 	orr.w	r1, r0, #1872	; 0x750
    d474:	485c      	ldr	r0, [pc, #368]	; (d5e8 <am_hal_cachectrl_control+0x2f0>)
    d476:	f000 f9bd 	bl	d7f4 <am_hal_flash_store_ui32>
    d47a:	9806      	ldr	r0, [sp, #24]
    d47c:	f000 fbc0 	bl	dc00 <am_hal_interrupt_master_set>
    d480:	f000 fbba 	bl	dbf8 <am_hal_interrupt_master_disable>
    d484:	4603      	mov	r3, r0
    d486:	4858      	ldr	r0, [pc, #352]	; (d5e8 <am_hal_cachectrl_control+0x2f0>)
    d488:	9307      	str	r3, [sp, #28]
    d48a:	f000 f9af 	bl	d7ec <am_hal_flash_load_ui32>
    d48e:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d492:	f020 000f 	bic.w	r0, r0, #15
    d496:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d49a:	f041 0101 	orr.w	r1, r1, #1
    d49e:	4852      	ldr	r0, [pc, #328]	; (d5e8 <am_hal_cachectrl_control+0x2f0>)
    d4a0:	f000 f9a8 	bl	d7f4 <am_hal_flash_store_ui32>
    d4a4:	9807      	ldr	r0, [sp, #28]
    d4a6:	f000 fbab 	bl	dc00 <am_hal_interrupt_master_set>
    d4aa:	2000      	movs	r0, #0
    d4ac:	e742      	b.n	d334 <am_hal_cachectrl_control+0x3c>
    d4ae:	f000 fba3 	bl	dbf8 <am_hal_interrupt_master_disable>
    d4b2:	4603      	mov	r3, r0
    d4b4:	484c      	ldr	r0, [pc, #304]	; (d5e8 <am_hal_cachectrl_control+0x2f0>)
    d4b6:	9308      	str	r3, [sp, #32]
    d4b8:	f000 f998 	bl	d7ec <am_hal_flash_load_ui32>
    d4bc:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d4c0:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    d4c4:	4848      	ldr	r0, [pc, #288]	; (d5e8 <am_hal_cachectrl_control+0x2f0>)
    d4c6:	f000 f995 	bl	d7f4 <am_hal_flash_store_ui32>
    d4ca:	9808      	ldr	r0, [sp, #32]
    d4cc:	f000 fb98 	bl	dc00 <am_hal_interrupt_master_set>
    d4d0:	f000 fb92 	bl	dbf8 <am_hal_interrupt_master_disable>
    d4d4:	4603      	mov	r3, r0
    d4d6:	4844      	ldr	r0, [pc, #272]	; (d5e8 <am_hal_cachectrl_control+0x2f0>)
    d4d8:	9309      	str	r3, [sp, #36]	; 0x24
    d4da:	f000 f987 	bl	d7ec <am_hal_flash_load_ui32>
    d4de:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d4e2:	f440 61ec 	orr.w	r1, r0, #1888	; 0x760
    d4e6:	4840      	ldr	r0, [pc, #256]	; (d5e8 <am_hal_cachectrl_control+0x2f0>)
    d4e8:	f000 f984 	bl	d7f4 <am_hal_flash_store_ui32>
    d4ec:	9809      	ldr	r0, [sp, #36]	; 0x24
    d4ee:	f000 fb87 	bl	dc00 <am_hal_interrupt_master_set>
    d4f2:	f000 fb81 	bl	dbf8 <am_hal_interrupt_master_disable>
    d4f6:	4603      	mov	r3, r0
    d4f8:	483b      	ldr	r0, [pc, #236]	; (d5e8 <am_hal_cachectrl_control+0x2f0>)
    d4fa:	930a      	str	r3, [sp, #40]	; 0x28
    d4fc:	f000 f976 	bl	d7ec <am_hal_flash_load_ui32>
    d500:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d504:	f020 000f 	bic.w	r0, r0, #15
    d508:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d50c:	f041 0101 	orr.w	r1, r1, #1
    d510:	4835      	ldr	r0, [pc, #212]	; (d5e8 <am_hal_cachectrl_control+0x2f0>)
    d512:	f000 f96f 	bl	d7f4 <am_hal_flash_store_ui32>
    d516:	980a      	ldr	r0, [sp, #40]	; 0x28
    d518:	f000 fb72 	bl	dc00 <am_hal_interrupt_master_set>
    d51c:	2000      	movs	r0, #0
    d51e:	e709      	b.n	d334 <am_hal_cachectrl_control+0x3c>
    d520:	2900      	cmp	r1, #0
    d522:	d04d      	beq.n	d5c0 <am_hal_cachectrl_control+0x2c8>
    d524:	680c      	ldr	r4, [r1, #0]
    d526:	2c03      	cmp	r4, #3
    d528:	d84c      	bhi.n	d5c4 <am_hal_cachectrl_control+0x2cc>
    d52a:	f000 fb65 	bl	dbf8 <am_hal_interrupt_master_disable>
    d52e:	4603      	mov	r3, r0
    d530:	482d      	ldr	r0, [pc, #180]	; (d5e8 <am_hal_cachectrl_control+0x2f0>)
    d532:	930b      	str	r3, [sp, #44]	; 0x2c
    d534:	f000 f95a 	bl	d7ec <am_hal_flash_load_ui32>
    d538:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d53c:	ea40 3104 	orr.w	r1, r0, r4, lsl #12
    d540:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d544:	4828      	ldr	r0, [pc, #160]	; (d5e8 <am_hal_cachectrl_control+0x2f0>)
    d546:	f000 f955 	bl	d7f4 <am_hal_flash_store_ui32>
    d54a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d54c:	f000 fb58 	bl	dc00 <am_hal_interrupt_master_set>
    d550:	2000      	movs	r0, #0
    d552:	e6ef      	b.n	d334 <am_hal_cachectrl_control+0x3c>
    d554:	b3a1      	cbz	r1, d5c0 <am_hal_cachectrl_control+0x2c8>
    d556:	680c      	ldr	r4, [r1, #0]
    d558:	2c07      	cmp	r4, #7
    d55a:	d833      	bhi.n	d5c4 <am_hal_cachectrl_control+0x2cc>
    d55c:	f000 fb4c 	bl	dbf8 <am_hal_interrupt_master_disable>
    d560:	4603      	mov	r3, r0
    d562:	4821      	ldr	r0, [pc, #132]	; (d5e8 <am_hal_cachectrl_control+0x2f0>)
    d564:	930c      	str	r3, [sp, #48]	; 0x30
    d566:	f000 f941 	bl	d7ec <am_hal_flash_load_ui32>
    d56a:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d56e:	ea40 1104 	orr.w	r1, r0, r4, lsl #4
    d572:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d576:	481c      	ldr	r0, [pc, #112]	; (d5e8 <am_hal_cachectrl_control+0x2f0>)
    d578:	f000 f93c 	bl	d7f4 <am_hal_flash_store_ui32>
    d57c:	980c      	ldr	r0, [sp, #48]	; 0x30
    d57e:	f000 fb3f 	bl	dc00 <am_hal_interrupt_master_set>
    d582:	2000      	movs	r0, #0
    d584:	e6d6      	b.n	d334 <am_hal_cachectrl_control+0x3c>
    d586:	b1d9      	cbz	r1, d5c0 <am_hal_cachectrl_control+0x2c8>
    d588:	680c      	ldr	r4, [r1, #0]
    d58a:	2c0f      	cmp	r4, #15
    d58c:	d81a      	bhi.n	d5c4 <am_hal_cachectrl_control+0x2cc>
    d58e:	f000 fb33 	bl	dbf8 <am_hal_interrupt_master_disable>
    d592:	4603      	mov	r3, r0
    d594:	4814      	ldr	r0, [pc, #80]	; (d5e8 <am_hal_cachectrl_control+0x2f0>)
    d596:	930d      	str	r3, [sp, #52]	; 0x34
    d598:	f000 f928 	bl	d7ec <am_hal_flash_load_ui32>
    d59c:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d5a0:	f020 000f 	bic.w	r0, r0, #15
    d5a4:	ea40 0104 	orr.w	r1, r0, r4
    d5a8:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d5ac:	480e      	ldr	r0, [pc, #56]	; (d5e8 <am_hal_cachectrl_control+0x2f0>)
    d5ae:	f000 f921 	bl	d7f4 <am_hal_flash_store_ui32>
    d5b2:	980d      	ldr	r0, [sp, #52]	; 0x34
    d5b4:	f000 fb24 	bl	dc00 <am_hal_interrupt_master_set>
    d5b8:	2000      	movs	r0, #0
    d5ba:	e6bb      	b.n	d334 <am_hal_cachectrl_control+0x3c>
    d5bc:	2007      	movs	r0, #7
    d5be:	e6b9      	b.n	d334 <am_hal_cachectrl_control+0x3c>
    d5c0:	2006      	movs	r0, #6
    d5c2:	e6b7      	b.n	d334 <am_hal_cachectrl_control+0x3c>
    d5c4:	2001      	movs	r0, #1
    d5c6:	e6b5      	b.n	d334 <am_hal_cachectrl_control+0x3c>
    d5c8:	2c01      	cmp	r4, #1
    d5ca:	d1f9      	bne.n	d5c0 <am_hal_cachectrl_control+0x2c8>
    d5cc:	4c04      	ldr	r4, [pc, #16]	; (d5e0 <am_hal_cachectrl_control+0x2e8>)
    d5ce:	7849      	ldrb	r1, [r1, #1]
    d5d0:	61a2      	str	r2, [r4, #24]
    d5d2:	61e3      	str	r3, [r4, #28]
    d5d4:	6823      	ldr	r3, [r4, #0]
    d5d6:	f361 03c3 	bfi	r3, r1, #3, #1
    d5da:	6023      	str	r3, [r4, #0]
    d5dc:	e6aa      	b.n	d334 <am_hal_cachectrl_control+0x3c>
    d5de:	bf00      	nop
    d5e0:	40018000 	.word	0x40018000
    d5e4:	f800000f 	.word	0xf800000f
    d5e8:	40018004 	.word	0x40018004

0000d5ec <am_hal_clkgen_control>:
    d5ec:	4b49      	ldr	r3, [pc, #292]	; (d714 <am_hal_clkgen_control+0x128>)
    d5ee:	681a      	ldr	r2, [r3, #0]
    d5f0:	b912      	cbnz	r2, d5f8 <am_hal_clkgen_control+0xc>
    d5f2:	4a49      	ldr	r2, [pc, #292]	; (d718 <am_hal_clkgen_control+0x12c>)
    d5f4:	6812      	ldr	r2, [r2, #0]
    d5f6:	601a      	str	r2, [r3, #0]
    d5f8:	2809      	cmp	r0, #9
    d5fa:	f200 8089 	bhi.w	d710 <am_hal_clkgen_control+0x124>
    d5fe:	e8df f000 	tbb	[pc, r0]
    d602:	160d      	.short	0x160d
    d604:	423a261e 	.word	0x423a261e
    d608:	055c544c 	.word	0x055c544c
    d60c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d610:	2000      	movs	r0, #0
    d612:	6a1a      	ldr	r2, [r3, #32]
    d614:	f36f 0200 	bfc	r2, #0, #1
    d618:	621a      	str	r2, [r3, #32]
    d61a:	4770      	bx	lr
    d61c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d620:	2200      	movs	r2, #0
    d622:	2147      	movs	r1, #71	; 0x47
    d624:	6159      	str	r1, [r3, #20]
    d626:	4610      	mov	r0, r2
    d628:	619a      	str	r2, [r3, #24]
    d62a:	615a      	str	r2, [r3, #20]
    d62c:	4770      	bx	lr
    d62e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d632:	2000      	movs	r0, #0
    d634:	899a      	ldrh	r2, [r3, #12]
    d636:	f36f 0200 	bfc	r2, #0, #1
    d63a:	819a      	strh	r2, [r3, #12]
    d63c:	4770      	bx	lr
    d63e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d642:	2000      	movs	r0, #0
    d644:	899a      	ldrh	r2, [r3, #12]
    d646:	f36f 0241 	bfc	r2, #1, #1
    d64a:	819a      	strh	r2, [r3, #12]
    d64c:	4770      	bx	lr
    d64e:	4a33      	ldr	r2, [pc, #204]	; (d71c <am_hal_clkgen_control+0x130>)
    d650:	68d3      	ldr	r3, [r2, #12]
    d652:	b2db      	uxtb	r3, r3
    d654:	2b21      	cmp	r3, #33	; 0x21
    d656:	d106      	bne.n	d666 <am_hal_clkgen_control+0x7a>
    d658:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    d65c:	2101      	movs	r1, #1
    d65e:	f361 2309 	bfi	r3, r1, #8, #2
    d662:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    d666:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d66a:	2000      	movs	r0, #0
    d66c:	8993      	ldrh	r3, [r2, #12]
    d66e:	f043 0301 	orr.w	r3, r3, #1
    d672:	8193      	strh	r3, [r2, #12]
    d674:	4770      	bx	lr
    d676:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d67a:	2000      	movs	r0, #0
    d67c:	8993      	ldrh	r3, [r2, #12]
    d67e:	f043 0302 	orr.w	r3, r3, #2
    d682:	8193      	strh	r3, [r2, #12]
    d684:	4770      	bx	lr
    d686:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d68a:	2200      	movs	r2, #0
    d68c:	2047      	movs	r0, #71	; 0x47
    d68e:	2101      	movs	r1, #1
    d690:	6158      	str	r0, [r3, #20]
    d692:	6199      	str	r1, [r3, #24]
    d694:	4610      	mov	r0, r2
    d696:	615a      	str	r2, [r3, #20]
    d698:	4770      	bx	lr
    d69a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d69e:	2000      	movs	r0, #0
    d6a0:	899a      	ldrh	r2, [r3, #12]
    d6a2:	f36f 12c7 	bfc	r2, #7, #1
    d6a6:	819a      	strh	r2, [r3, #12]
    d6a8:	4770      	bx	lr
    d6aa:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d6ae:	2000      	movs	r0, #0
    d6b0:	8993      	ldrh	r3, [r2, #12]
    d6b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d6b6:	8193      	strh	r3, [r2, #12]
    d6b8:	4770      	bx	lr
    d6ba:	4a18      	ldr	r2, [pc, #96]	; (d71c <am_hal_clkgen_control+0x130>)
    d6bc:	68d3      	ldr	r3, [r2, #12]
    d6be:	b2db      	uxtb	r3, r3
    d6c0:	2b21      	cmp	r3, #33	; 0x21
    d6c2:	d00a      	beq.n	d6da <am_hal_clkgen_control+0xee>
    d6c4:	b139      	cbz	r1, d6d6 <am_hal_clkgen_control+0xea>
    d6c6:	680b      	ldr	r3, [r1, #0]
    d6c8:	f043 0301 	orr.w	r3, r3, #1
    d6cc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d6d0:	2000      	movs	r0, #0
    d6d2:	6213      	str	r3, [r2, #32]
    d6d4:	4770      	bx	lr
    d6d6:	4b12      	ldr	r3, [pc, #72]	; (d720 <am_hal_clkgen_control+0x134>)
    d6d8:	e7f8      	b.n	d6cc <am_hal_clkgen_control+0xe0>
    d6da:	b500      	push	{lr}
    d6dc:	b083      	sub	sp, #12
    d6de:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    d6e2:	9101      	str	r1, [sp, #4]
    d6e4:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    d6e8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    d6ec:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    d6f0:	f000 f836 	bl	d760 <am_hal_flash_delay>
    d6f4:	9901      	ldr	r1, [sp, #4]
    d6f6:	b149      	cbz	r1, d70c <am_hal_clkgen_control+0x120>
    d6f8:	680b      	ldr	r3, [r1, #0]
    d6fa:	f043 0301 	orr.w	r3, r3, #1
    d6fe:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d702:	2000      	movs	r0, #0
    d704:	6213      	str	r3, [r2, #32]
    d706:	b003      	add	sp, #12
    d708:	f85d fb04 	ldr.w	pc, [sp], #4
    d70c:	4b04      	ldr	r3, [pc, #16]	; (d720 <am_hal_clkgen_control+0x134>)
    d70e:	e7f6      	b.n	d6fe <am_hal_clkgen_control+0x112>
    d710:	2006      	movs	r0, #6
    d712:	4770      	bx	lr
    d714:	10001144 	.word	0x10001144
    d718:	4ffff000 	.word	0x4ffff000
    d71c:	40020000 	.word	0x40020000
    d720:	0025b801 	.word	0x0025b801

0000d724 <am_hal_clkgen_status_get>:
    d724:	b1b0      	cbz	r0, d754 <am_hal_clkgen_status_get+0x30>
    d726:	b410      	push	{r4}
    d728:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    d72c:	4603      	mov	r3, r0
    d72e:	698c      	ldr	r4, [r1, #24]
    d730:	4809      	ldr	r0, [pc, #36]	; (d758 <am_hal_clkgen_status_get+0x34>)
    d732:	4a0a      	ldr	r2, [pc, #40]	; (d75c <am_hal_clkgen_status_get+0x38>)
    d734:	f014 0f01 	tst.w	r4, #1
    d738:	bf08      	it	eq
    d73a:	4602      	moveq	r2, r0
    d73c:	601a      	str	r2, [r3, #0]
    d73e:	69ca      	ldr	r2, [r1, #28]
    d740:	f85d 4b04 	ldr.w	r4, [sp], #4
    d744:	f002 0101 	and.w	r1, r2, #1
    d748:	f3c2 0240 	ubfx	r2, r2, #1, #1
    d74c:	2000      	movs	r0, #0
    d74e:	6059      	str	r1, [r3, #4]
    d750:	721a      	strb	r2, [r3, #8]
    d752:	4770      	bx	lr
    d754:	2006      	movs	r0, #6
    d756:	4770      	bx	lr
    d758:	02dc6c00 	.word	0x02dc6c00
    d75c:	016e3600 	.word	0x016e3600

0000d760 <am_hal_flash_delay>:
    d760:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    d766:	075b      	lsls	r3, r3, #29
    d768:	bf46      	itte	mi
    d76a:	0040      	lslmi	r0, r0, #1
    d76c:	230e      	movmi	r3, #14
    d76e:	230b      	movpl	r3, #11
    d770:	4298      	cmp	r0, r3
    d772:	d902      	bls.n	d77a <am_hal_flash_delay+0x1a>
    d774:	4a01      	ldr	r2, [pc, #4]	; (d77c <am_hal_flash_delay+0x1c>)
    d776:	1ac0      	subs	r0, r0, r3
    d778:	4710      	bx	r2
    d77a:	4770      	bx	lr
    d77c:	0800009d 	.word	0x0800009d

0000d780 <am_hal_flash_delay_status_check>:
    d780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d784:	f89d c020 	ldrb.w	ip, [sp, #32]
    d788:	f8df 805c 	ldr.w	r8, [pc, #92]	; d7e8 <am_hal_flash_delay_status_check+0x68>
    d78c:	4604      	mov	r4, r0
    d78e:	460d      	mov	r5, r1
    d790:	4616      	mov	r6, r2
    d792:	461f      	mov	r7, r3
    d794:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    d798:	f1bc 0f00 	cmp.w	ip, #0
    d79c:	d00a      	beq.n	d7b4 <am_hal_flash_delay_status_check+0x34>
    d79e:	e01a      	b.n	d7d6 <am_hal_flash_delay_status_check+0x56>
    d7a0:	b1f4      	cbz	r4, d7e0 <am_hal_flash_delay_status_check+0x60>
    d7a2:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    d7a6:	f013 0f04 	tst.w	r3, #4
    d7aa:	bf0c      	ite	eq
    d7ac:	2005      	moveq	r0, #5
    d7ae:	2012      	movne	r0, #18
    d7b0:	3c01      	subs	r4, #1
    d7b2:	47c0      	blx	r8
    d7b4:	6828      	ldr	r0, [r5, #0]
    d7b6:	4030      	ands	r0, r6
    d7b8:	42b8      	cmp	r0, r7
    d7ba:	d0f1      	beq.n	d7a0 <am_hal_flash_delay_status_check+0x20>
    d7bc:	2000      	movs	r0, #0
    d7be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d7c2:	b16c      	cbz	r4, d7e0 <am_hal_flash_delay_status_check+0x60>
    d7c4:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    d7c8:	f013 0f04 	tst.w	r3, #4
    d7cc:	bf0c      	ite	eq
    d7ce:	2005      	moveq	r0, #5
    d7d0:	2012      	movne	r0, #18
    d7d2:	3c01      	subs	r4, #1
    d7d4:	47c0      	blx	r8
    d7d6:	6828      	ldr	r0, [r5, #0]
    d7d8:	4030      	ands	r0, r6
    d7da:	42b8      	cmp	r0, r7
    d7dc:	d1f1      	bne.n	d7c2 <am_hal_flash_delay_status_check+0x42>
    d7de:	e7ed      	b.n	d7bc <am_hal_flash_delay_status_check+0x3c>
    d7e0:	2004      	movs	r0, #4
    d7e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d7e6:	bf00      	nop
    d7e8:	0800009d 	.word	0x0800009d

0000d7ec <am_hal_flash_load_ui32>:
    d7ec:	4b00      	ldr	r3, [pc, #0]	; (d7f0 <am_hal_flash_load_ui32+0x4>)
    d7ee:	4718      	bx	r3
    d7f0:	08000075 	.word	0x08000075

0000d7f4 <am_hal_flash_store_ui32>:
    d7f4:	4b01      	ldr	r3, [pc, #4]	; (d7fc <am_hal_flash_store_ui32+0x8>)
    d7f6:	f043 0301 	orr.w	r3, r3, #1
    d7fa:	4718      	bx	r3
    d7fc:	10001028 	.word	0x10001028

0000d800 <am_hal_gpio_pinconfig>:
    d800:	2831      	cmp	r0, #49	; 0x31
    d802:	f200 80c3 	bhi.w	d98c <am_hal_gpio_pinconfig+0x18c>
    d806:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d80a:	4604      	mov	r4, r0
    d80c:	f011 07e0 	ands.w	r7, r1, #224	; 0xe0
    d810:	f001 0007 	and.w	r0, r1, #7
    d814:	b085      	sub	sp, #20
    d816:	f3c1 03c1 	ubfx	r3, r1, #3, #2
    d81a:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    d81e:	d00f      	beq.n	d840 <am_hal_gpio_pinconfig+0x40>
    d820:	f3c1 1642 	ubfx	r6, r1, #5, #3
    d824:	1db5      	adds	r5, r6, #6
    d826:	f005 0507 	and.w	r5, r5, #7
    d82a:	2d03      	cmp	r5, #3
    d82c:	f042 0201 	orr.w	r2, r2, #1
    d830:	f240 80ae 	bls.w	d990 <am_hal_gpio_pinconfig+0x190>
    d834:	2fc0      	cmp	r7, #192	; 0xc0
    d836:	f000 80e1 	beq.w	d9fc <am_hal_gpio_pinconfig+0x1fc>
    d83a:	2f20      	cmp	r7, #32
    d83c:	f000 80e3 	beq.w	da06 <am_hal_gpio_pinconfig+0x206>
    d840:	b163      	cbz	r3, d85c <am_hal_gpio_pinconfig+0x5c>
    d842:	2b01      	cmp	r3, #1
    d844:	f000 80d3 	beq.w	d9ee <am_hal_gpio_pinconfig+0x1ee>
    d848:	2b02      	cmp	r3, #2
    d84a:	f040 80c9 	bne.w	d9e0 <am_hal_gpio_pinconfig+0x1e0>
    d84e:	4b79      	ldr	r3, [pc, #484]	; (da34 <am_hal_gpio_pinconfig+0x234>)
    d850:	5d1b      	ldrb	r3, [r3, r4]
    d852:	075b      	lsls	r3, r3, #29
    d854:	f140 80c4 	bpl.w	d9e0 <am_hal_gpio_pinconfig+0x1e0>
    d858:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    d85c:	4b76      	ldr	r3, [pc, #472]	; (da38 <am_hal_gpio_pinconfig+0x238>)
    d85e:	5d1b      	ldrb	r3, [r3, r4]
    d860:	4103      	asrs	r3, r0
    d862:	005b      	lsls	r3, r3, #1
    d864:	f003 0302 	and.w	r3, r3, #2
    d868:	4313      	orrs	r3, r2
    d86a:	4a74      	ldr	r2, [pc, #464]	; (da3c <am_hal_gpio_pinconfig+0x23c>)
    d86c:	5d12      	ldrb	r2, [r2, r4]
    d86e:	4282      	cmp	r2, r0
    d870:	f000 8099 	beq.w	d9a6 <am_hal_gpio_pinconfig+0x1a6>
    d874:	f3c1 3000 	ubfx	r0, r1, #12, #1
    d878:	f3c1 2581 	ubfx	r5, r1, #10, #2
    d87c:	f3c1 3280 	ubfx	r2, r1, #14, #1
    d880:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    d884:	0a88      	lsrs	r0, r1, #10
    d886:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    d88a:	f000 0008 	and.w	r0, r0, #8
    d88e:	4302      	orrs	r2, r0
    d890:	f3c1 2007 	ubfx	r0, r1, #8, #8
    d894:	f000 050c 	and.w	r5, r0, #12
    d898:	2d04      	cmp	r5, #4
    d89a:	f000 80a5 	beq.w	d9e8 <am_hal_gpio_pinconfig+0x1e8>
    d89e:	4d68      	ldr	r5, [pc, #416]	; (da40 <am_hal_gpio_pinconfig+0x240>)
    d8a0:	682d      	ldr	r5, [r5, #0]
    d8a2:	eba1 0805 	sub.w	r8, r1, r5
    d8a6:	fab8 f888 	clz	r8, r8
    d8aa:	ea4f 1858 	mov.w	r8, r8, lsr #5
    d8ae:	f010 0f60 	tst.w	r0, #96	; 0x60
    d8b2:	bf04      	itt	eq
    d8b4:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
    d8b8:	f360 0200 	bfieq	r2, r0, #0, #1
    d8bc:	00a0      	lsls	r0, r4, #2
    d8be:	f3c1 2101 	ubfx	r1, r1, #8, #2
    d8c2:	2902      	cmp	r1, #2
    d8c4:	d05c      	beq.n	d980 <am_hal_gpio_pinconfig+0x180>
    d8c6:	2903      	cmp	r1, #3
    d8c8:	d058      	beq.n	d97c <am_hal_gpio_pinconfig+0x17c>
    d8ca:	2901      	cmp	r1, #1
    d8cc:	ea4f 01c4 	mov.w	r1, r4, lsl #3
    d8d0:	bf08      	it	eq
    d8d2:	f043 0304 	orreq.w	r3, r3, #4
    d8d6:	f001 0118 	and.w	r1, r1, #24
    d8da:	2700      	movs	r7, #0
    d8dc:	f000 001c 	and.w	r0, r0, #28
    d8e0:	fa02 f600 	lsl.w	r6, r2, r0
    d8e4:	220f      	movs	r2, #15
    d8e6:	4082      	lsls	r2, r0
    d8e8:	43d2      	mvns	r2, r2
    d8ea:	f04f 09ff 	mov.w	r9, #255	; 0xff
    d8ee:	fa03 f501 	lsl.w	r5, r3, r1
    d8f2:	fa09 f901 	lsl.w	r9, r9, r1
    d8f6:	9201      	str	r2, [sp, #4]
    d8f8:	f000 f97e 	bl	dbf8 <am_hal_interrupt_master_disable>
    d8fc:	f024 0a03 	bic.w	sl, r4, #3
    d900:	ea4f 0b54 	mov.w	fp, r4, lsr #1
    d904:	f10a 4c80 	add.w	ip, sl, #1073741824	; 0x40000000
    d908:	4b4e      	ldr	r3, [pc, #312]	; (da44 <am_hal_gpio_pinconfig+0x244>)
    d90a:	494f      	ldr	r1, [pc, #316]	; (da48 <am_hal_gpio_pinconfig+0x248>)
    d90c:	9a01      	ldr	r2, [sp, #4]
    d90e:	9003      	str	r0, [sp, #12]
    d910:	ea6f 0909 	mvn.w	r9, r9
    d914:	f02b 0b03 	bic.w	fp, fp, #3
    d918:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
    d91c:	f1b8 0f00 	cmp.w	r8, #0
    d920:	d00b      	beq.n	d93a <am_hal_gpio_pinconfig+0x13a>
    d922:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
    d926:	f004 081f 	and.w	r8, r4, #31
    d92a:	4848      	ldr	r0, [pc, #288]	; (da4c <am_hal_gpio_pinconfig+0x24c>)
    d92c:	f00e 0e04 	and.w	lr, lr, #4
    d930:	2401      	movs	r4, #1
    d932:	fa04 f408 	lsl.w	r4, r4, r8
    d936:	f84e 4000 	str.w	r4, [lr, r0]
    d93a:	4845      	ldr	r0, [pc, #276]	; (da50 <am_hal_gpio_pinconfig+0x250>)
    d93c:	2473      	movs	r4, #115	; 0x73
    d93e:	6604      	str	r4, [r0, #96]	; 0x60
    d940:	f8dc 4000 	ldr.w	r4, [ip]
    d944:	ea04 0409 	and.w	r4, r4, r9
    d948:	4325      	orrs	r5, r4
    d94a:	f8cc 5000 	str.w	r5, [ip]
    d94e:	f85b 4003 	ldr.w	r4, [fp, r3]
    d952:	4022      	ands	r2, r4
    d954:	4332      	orrs	r2, r6
    d956:	f84b 2003 	str.w	r2, [fp, r3]
    d95a:	f85a 3001 	ldr.w	r3, [sl, r1]
    d95e:	ea03 0909 	and.w	r9, r3, r9
    d962:	2400      	movs	r4, #0
    d964:	ea49 0707 	orr.w	r7, r9, r7
    d968:	f84a 7001 	str.w	r7, [sl, r1]
    d96c:	6604      	str	r4, [r0, #96]	; 0x60
    d96e:	9803      	ldr	r0, [sp, #12]
    d970:	f000 f946 	bl	dc00 <am_hal_interrupt_master_set>
    d974:	4620      	mov	r0, r4
    d976:	b005      	add	sp, #20
    d978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d97c:	f043 0304 	orr.w	r3, r3, #4
    d980:	00e1      	lsls	r1, r4, #3
    d982:	f001 0118 	and.w	r1, r1, #24
    d986:	2701      	movs	r7, #1
    d988:	408f      	lsls	r7, r1
    d98a:	e7a7      	b.n	d8dc <am_hal_gpio_pinconfig+0xdc>
    d98c:	2006      	movs	r0, #6
    d98e:	4770      	bx	lr
    d990:	4d28      	ldr	r5, [pc, #160]	; (da34 <am_hal_gpio_pinconfig+0x234>)
    d992:	5d2d      	ldrb	r5, [r5, r4]
    d994:	3e02      	subs	r6, #2
    d996:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    d99a:	07ee      	lsls	r6, r5, #31
    d99c:	d536      	bpl.n	da0c <am_hal_gpio_pinconfig+0x20c>
    d99e:	2b00      	cmp	r3, #0
    d9a0:	f43f af5c 	beq.w	d85c <am_hal_gpio_pinconfig+0x5c>
    d9a4:	e74d      	b.n	d842 <am_hal_gpio_pinconfig+0x42>
    d9a6:	f3c1 4202 	ubfx	r2, r1, #16, #3
    d9aa:	2a07      	cmp	r2, #7
    d9ac:	d030      	beq.n	da10 <am_hal_gpio_pinconfig+0x210>
    d9ae:	4d29      	ldr	r5, [pc, #164]	; (da54 <am_hal_gpio_pinconfig+0x254>)
    d9b0:	f3c1 40c1 	ubfx	r0, r1, #19, #2
    d9b4:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    d9b8:	f815 0024 	ldrb.w	r0, [r5, r4, lsl #2]
    d9bc:	4290      	cmp	r0, r2
    d9be:	d029      	beq.n	da14 <am_hal_gpio_pinconfig+0x214>
    d9c0:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    d9c4:	00a0      	lsls	r0, r4, #2
    d9c6:	786e      	ldrb	r6, [r5, #1]
    d9c8:	4296      	cmp	r6, r2
    d9ca:	d02d      	beq.n	da28 <am_hal_gpio_pinconfig+0x228>
    d9cc:	78ae      	ldrb	r6, [r5, #2]
    d9ce:	4296      	cmp	r6, r2
    d9d0:	d02c      	beq.n	da2c <am_hal_gpio_pinconfig+0x22c>
    d9d2:	78ed      	ldrb	r5, [r5, #3]
    d9d4:	4295      	cmp	r5, r2
    d9d6:	d02b      	beq.n	da30 <am_hal_gpio_pinconfig+0x230>
    d9d8:	481f      	ldr	r0, [pc, #124]	; (da58 <am_hal_gpio_pinconfig+0x258>)
    d9da:	b005      	add	sp, #20
    d9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d9e0:	481e      	ldr	r0, [pc, #120]	; (da5c <am_hal_gpio_pinconfig+0x25c>)
    d9e2:	b005      	add	sp, #20
    d9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d9e8:	f04f 0801 	mov.w	r8, #1
    d9ec:	e75f      	b.n	d8ae <am_hal_gpio_pinconfig+0xae>
    d9ee:	4b11      	ldr	r3, [pc, #68]	; (da34 <am_hal_gpio_pinconfig+0x234>)
    d9f0:	5d1b      	ldrb	r3, [r3, r4]
    d9f2:	079d      	lsls	r5, r3, #30
    d9f4:	d5f4      	bpl.n	d9e0 <am_hal_gpio_pinconfig+0x1e0>
    d9f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    d9fa:	e72f      	b.n	d85c <am_hal_gpio_pinconfig+0x5c>
    d9fc:	2c14      	cmp	r4, #20
    d9fe:	f43f af1f 	beq.w	d840 <am_hal_gpio_pinconfig+0x40>
    da02:	4817      	ldr	r0, [pc, #92]	; (da60 <am_hal_gpio_pinconfig+0x260>)
    da04:	e7b7      	b.n	d976 <am_hal_gpio_pinconfig+0x176>
    da06:	2c14      	cmp	r4, #20
    da08:	f47f af1a 	bne.w	d840 <am_hal_gpio_pinconfig+0x40>
    da0c:	4815      	ldr	r0, [pc, #84]	; (da64 <am_hal_gpio_pinconfig+0x264>)
    da0e:	e7b2      	b.n	d976 <am_hal_gpio_pinconfig+0x176>
    da10:	4815      	ldr	r0, [pc, #84]	; (da68 <am_hal_gpio_pinconfig+0x268>)
    da12:	e7b0      	b.n	d976 <am_hal_gpio_pinconfig+0x176>
    da14:	2200      	movs	r2, #0
    da16:	00a0      	lsls	r0, r4, #2
    da18:	0052      	lsls	r2, r2, #1
    da1a:	f3c1 5540 	ubfx	r5, r1, #21, #1
    da1e:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
    da22:	f04f 0800 	mov.w	r8, #0
    da26:	e74a      	b.n	d8be <am_hal_gpio_pinconfig+0xbe>
    da28:	2201      	movs	r2, #1
    da2a:	e7f5      	b.n	da18 <am_hal_gpio_pinconfig+0x218>
    da2c:	2202      	movs	r2, #2
    da2e:	e7f3      	b.n	da18 <am_hal_gpio_pinconfig+0x218>
    da30:	2203      	movs	r2, #3
    da32:	e7f1      	b.n	da18 <am_hal_gpio_pinconfig+0x218>
    da34:	0000e6b8 	.word	0x0000e6b8
    da38:	0000e6ec 	.word	0x0000e6ec
    da3c:	0000e7e8 	.word	0x0000e7e8
    da40:	0000e6ac 	.word	0x0000e6ac
    da44:	40010040 	.word	0x40010040
    da48:	400100e0 	.word	0x400100e0
    da4c:	400100b4 	.word	0x400100b4
    da50:	40010000 	.word	0x40010000
    da54:	0000e720 	.word	0x0000e720
    da58:	08000104 	.word	0x08000104
    da5c:	08000102 	.word	0x08000102
    da60:	08000101 	.word	0x08000101
    da64:	08000100 	.word	0x08000100
    da68:	08000103 	.word	0x08000103

0000da6c <am_hal_gpio_fast_pinconfig>:
    da6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    da70:	0c8e      	lsrs	r6, r1, #18
    da72:	04b6      	lsls	r6, r6, #18
    da74:	2e00      	cmp	r6, #0
    da76:	d154      	bne.n	db22 <am_hal_gpio_fast_pinconfig+0xb6>
    da78:	461f      	mov	r7, r3
    da7a:	ea50 0301 	orrs.w	r3, r0, r1
    da7e:	460d      	mov	r5, r1
    da80:	4604      	mov	r4, r0
    da82:	4690      	mov	r8, r2
    da84:	d047      	beq.n	db16 <am_hal_gpio_fast_pinconfig+0xaa>
    da86:	4684      	mov	ip, r0
    da88:	46b6      	mov	lr, r6
    da8a:	4608      	mov	r0, r1
    da8c:	ea4f 065c 	mov.w	r6, ip, lsr #1
    da90:	f00c 0301 	and.w	r3, ip, #1
    da94:	ea46 7cc0 	orr.w	ip, r6, r0, lsl #31
    da98:	0840      	lsrs	r0, r0, #1
    da9a:	449e      	add	lr, r3
    da9c:	ea5c 0300 	orrs.w	r3, ip, r0
    daa0:	d1f4      	bne.n	da8c <am_hal_gpio_fast_pinconfig+0x20>
    daa2:	f1be 0f08 	cmp.w	lr, #8
    daa6:	d83c      	bhi.n	db22 <am_hal_gpio_fast_pinconfig+0xb6>
    daa8:	f3c8 2307 	ubfx	r3, r8, #8, #8
    daac:	f003 030c 	and.w	r3, r3, #12
    dab0:	2b0c      	cmp	r3, #12
    dab2:	d036      	beq.n	db22 <am_hal_gpio_fast_pinconfig+0xb6>
    dab4:	b3df      	cbz	r7, db2e <am_hal_gpio_fast_pinconfig+0xc2>
    dab6:	f04f 0900 	mov.w	r9, #0
    daba:	464e      	mov	r6, r9
    dabc:	46cb      	mov	fp, r9
    dabe:	f04f 0a01 	mov.w	sl, #1
    dac2:	e008      	b.n	dad6 <am_hal_gpio_fast_pinconfig+0x6a>
    dac4:	0864      	lsrs	r4, r4, #1
    dac6:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
    daca:	086d      	lsrs	r5, r5, #1
    dacc:	ea54 0305 	orrs.w	r3, r4, r5
    dad0:	f106 0601 	add.w	r6, r6, #1
    dad4:	d028      	beq.n	db28 <am_hal_gpio_fast_pinconfig+0xbc>
    dad6:	07e3      	lsls	r3, r4, #31
    dad8:	d5f4      	bpl.n	dac4 <am_hal_gpio_fast_pinconfig+0x58>
    dada:	4630      	mov	r0, r6
    dadc:	4641      	mov	r1, r8
    dade:	f7ff fe8f 	bl	d800 <am_hal_gpio_pinconfig>
    dae2:	f006 0207 	and.w	r2, r6, #7
    dae6:	fa0a f202 	lsl.w	r2, sl, r2
    daea:	ea49 0902 	orr.w	r9, r9, r2
    daee:	08f2      	lsrs	r2, r6, #3
    daf0:	f002 0204 	and.w	r2, r2, #4
    daf4:	b9b0      	cbnz	r0, db24 <am_hal_gpio_fast_pinconfig+0xb8>
    daf6:	4b1d      	ldr	r3, [pc, #116]	; (db6c <am_hal_gpio_fast_pinconfig+0x100>)
    daf8:	f006 011f 	and.w	r1, r6, #31
    dafc:	fa0a f101 	lsl.w	r1, sl, r1
    db00:	50d1      	str	r1, [r2, r3]
    db02:	eb07 028b 	add.w	r2, r7, fp, lsl #2
    db06:	ea4f 4109 	mov.w	r1, r9, lsl #16
    db0a:	f847 902b 	str.w	r9, [r7, fp, lsl #2]
    db0e:	f10b 0b02 	add.w	fp, fp, #2
    db12:	6051      	str	r1, [r2, #4]
    db14:	e7d6      	b.n	dac4 <am_hal_gpio_fast_pinconfig+0x58>
    db16:	f3c2 2307 	ubfx	r3, r2, #8, #8
    db1a:	f003 030c 	and.w	r3, r3, #12
    db1e:	2b0c      	cmp	r3, #12
    db20:	d102      	bne.n	db28 <am_hal_gpio_fast_pinconfig+0xbc>
    db22:	2006      	movs	r0, #6
    db24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    db28:	2000      	movs	r0, #0
    db2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    db2e:	4e0f      	ldr	r6, [pc, #60]	; (db6c <am_hal_gpio_fast_pinconfig+0x100>)
    db30:	f04f 0901 	mov.w	r9, #1
    db34:	e008      	b.n	db48 <am_hal_gpio_fast_pinconfig+0xdc>
    db36:	0864      	lsrs	r4, r4, #1
    db38:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
    db3c:	086d      	lsrs	r5, r5, #1
    db3e:	ea54 0305 	orrs.w	r3, r4, r5
    db42:	f107 0701 	add.w	r7, r7, #1
    db46:	d0ef      	beq.n	db28 <am_hal_gpio_fast_pinconfig+0xbc>
    db48:	07e2      	lsls	r2, r4, #31
    db4a:	d5f4      	bpl.n	db36 <am_hal_gpio_fast_pinconfig+0xca>
    db4c:	4638      	mov	r0, r7
    db4e:	4641      	mov	r1, r8
    db50:	f7ff fe56 	bl	d800 <am_hal_gpio_pinconfig>
    db54:	08fb      	lsrs	r3, r7, #3
    db56:	f007 021f 	and.w	r2, r7, #31
    db5a:	f003 0304 	and.w	r3, r3, #4
    db5e:	fa09 f202 	lsl.w	r2, r9, r2
    db62:	2800      	cmp	r0, #0
    db64:	d1de      	bne.n	db24 <am_hal_gpio_fast_pinconfig+0xb8>
    db66:	519a      	str	r2, [r3, r6]
    db68:	e7e5      	b.n	db36 <am_hal_gpio_fast_pinconfig+0xca>
    db6a:	bf00      	nop
    db6c:	400100a8 	.word	0x400100a8

0000db70 <am_hal_gpio_state_write>:
    db70:	2831      	cmp	r0, #49	; 0x31
    db72:	d81a      	bhi.n	dbaa <am_hal_gpio_state_write+0x3a>
    db74:	b570      	push	{r4, r5, r6, lr}
    db76:	2905      	cmp	r1, #5
    db78:	b082      	sub	sp, #8
    db7a:	460d      	mov	r5, r1
    db7c:	d812      	bhi.n	dba4 <am_hal_gpio_state_write+0x34>
    db7e:	f000 031f 	and.w	r3, r0, #31
    db82:	2201      	movs	r2, #1
    db84:	08c0      	lsrs	r0, r0, #3
    db86:	fa02 f603 	lsl.w	r6, r2, r3
    db8a:	f000 0404 	and.w	r4, r0, #4
    db8e:	f000 f833 	bl	dbf8 <am_hal_interrupt_master_disable>
    db92:	3d01      	subs	r5, #1
    db94:	9001      	str	r0, [sp, #4]
    db96:	2d04      	cmp	r5, #4
    db98:	d821      	bhi.n	dbde <am_hal_gpio_state_write+0x6e>
    db9a:	e8df f005 	tbb	[pc, r5]
    db9e:	1512      	.short	0x1512
    dba0:	1d1a      	.short	0x1d1a
    dba2:	08          	.byte	0x08
    dba3:	00          	.byte	0x00
    dba4:	2006      	movs	r0, #6
    dba6:	b002      	add	sp, #8
    dba8:	bd70      	pop	{r4, r5, r6, pc}
    dbaa:	2005      	movs	r0, #5
    dbac:	4770      	bx	lr
    dbae:	4a0d      	ldr	r2, [pc, #52]	; (dbe4 <am_hal_gpio_state_write+0x74>)
    dbb0:	58a3      	ldr	r3, [r4, r2]
    dbb2:	4073      	eors	r3, r6
    dbb4:	50a3      	str	r3, [r4, r2]
    dbb6:	9801      	ldr	r0, [sp, #4]
    dbb8:	f000 f822 	bl	dc00 <am_hal_interrupt_master_set>
    dbbc:	2000      	movs	r0, #0
    dbbe:	b002      	add	sp, #8
    dbc0:	bd70      	pop	{r4, r5, r6, pc}
    dbc2:	4b09      	ldr	r3, [pc, #36]	; (dbe8 <am_hal_gpio_state_write+0x78>)
    dbc4:	50e6      	str	r6, [r4, r3]
    dbc6:	e7f6      	b.n	dbb6 <am_hal_gpio_state_write+0x46>
    dbc8:	4a08      	ldr	r2, [pc, #32]	; (dbec <am_hal_gpio_state_write+0x7c>)
    dbca:	58a3      	ldr	r3, [r4, r2]
    dbcc:	4073      	eors	r3, r6
    dbce:	50a3      	str	r3, [r4, r2]
    dbd0:	e7f1      	b.n	dbb6 <am_hal_gpio_state_write+0x46>
    dbd2:	4b04      	ldr	r3, [pc, #16]	; (dbe4 <am_hal_gpio_state_write+0x74>)
    dbd4:	50e6      	str	r6, [r4, r3]
    dbd6:	e7ee      	b.n	dbb6 <am_hal_gpio_state_write+0x46>
    dbd8:	4b05      	ldr	r3, [pc, #20]	; (dbf0 <am_hal_gpio_state_write+0x80>)
    dbda:	50e6      	str	r6, [r4, r3]
    dbdc:	e7eb      	b.n	dbb6 <am_hal_gpio_state_write+0x46>
    dbde:	4b05      	ldr	r3, [pc, #20]	; (dbf4 <am_hal_gpio_state_write+0x84>)
    dbe0:	50e6      	str	r6, [r4, r3]
    dbe2:	e7e8      	b.n	dbb6 <am_hal_gpio_state_write+0x46>
    dbe4:	400100b4 	.word	0x400100b4
    dbe8:	40010090 	.word	0x40010090
    dbec:	40010088 	.word	0x40010088
    dbf0:	400100a8 	.word	0x400100a8
    dbf4:	40010098 	.word	0x40010098

0000dbf8 <am_hal_interrupt_master_disable>:
    dbf8:	f3ef 8010 	mrs	r0, PRIMASK
    dbfc:	b672      	cpsid	i
    dbfe:	4770      	bx	lr

0000dc00 <am_hal_interrupt_master_set>:
    dc00:	f380 8810 	msr	PRIMASK, r0
    dc04:	4770      	bx	lr
    dc06:	bf00      	nop

0000dc08 <am_hal_itm_enable>:
    dc08:	4a0e      	ldr	r2, [pc, #56]	; (dc44 <am_hal_itm_enable+0x3c>)
    dc0a:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    dc0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    dc12:	b410      	push	{r4}
    dc14:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    dc18:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    dc1c:	01db      	lsls	r3, r3, #7
    dc1e:	d5fb      	bpl.n	dc18 <am_hal_itm_enable+0x10>
    dc20:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    dc24:	4c08      	ldr	r4, [pc, #32]	; (dc48 <am_hal_itm_enable+0x40>)
    dc26:	4a09      	ldr	r2, [pc, #36]	; (dc4c <am_hal_itm_enable+0x44>)
    dc28:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    dc2c:	200f      	movs	r0, #15
    dc2e:	f04f 31ff 	mov.w	r1, #4294967295
    dc32:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    dc36:	f85d 4b04 	ldr.w	r4, [sp], #4
    dc3a:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    dc3e:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    dc42:	4770      	bx	lr
    dc44:	e000ed00 	.word	0xe000ed00
    dc48:	c5acce55 	.word	0xc5acce55
    dc4c:	00150511 	.word	0x00150511

0000dc50 <am_hal_itm_disable>:
    dc50:	4b27      	ldr	r3, [pc, #156]	; (dcf0 <am_hal_itm_disable+0xa0>)
    dc52:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    dc56:	b510      	push	{r4, lr}
    dc58:	b9cb      	cbnz	r3, dc8e <am_hal_itm_disable+0x3e>
    dc5a:	4a26      	ldr	r2, [pc, #152]	; (dcf4 <am_hal_itm_disable+0xa4>)
    dc5c:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    dc60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    dc64:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    dc68:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    dc6c:	01d9      	lsls	r1, r3, #7
    dc6e:	d5fb      	bpl.n	dc68 <am_hal_itm_disable+0x18>
    dc70:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    dc74:	4c20      	ldr	r4, [pc, #128]	; (dcf8 <am_hal_itm_disable+0xa8>)
    dc76:	4a21      	ldr	r2, [pc, #132]	; (dcfc <am_hal_itm_disable+0xac>)
    dc78:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    dc7c:	200f      	movs	r0, #15
    dc7e:	f04f 31ff 	mov.w	r1, #4294967295
    dc82:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    dc86:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    dc8a:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    dc8e:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    dc92:	f8d4 3e80 	ldr.w	r3, [r4, #3712]	; 0xe80
    dc96:	021b      	lsls	r3, r3, #8
    dc98:	d4fb      	bmi.n	dc92 <am_hal_itm_disable+0x42>
    dc9a:	f44f 7048 	mov.w	r0, #800	; 0x320
    dc9e:	f7ff fd5f 	bl	d760 <am_hal_flash_delay>
    dca2:	4b15      	ldr	r3, [pc, #84]	; (dcf8 <am_hal_itm_disable+0xa8>)
    dca4:	4916      	ldr	r1, [pc, #88]	; (dd00 <am_hal_itm_disable+0xb0>)
    dca6:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
    dcaa:	2064      	movs	r0, #100	; 0x64
    dcac:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    dcb0:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    dcb4:	f023 0301 	bic.w	r3, r3, #1
    dcb8:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
    dcbc:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    dcc0:	420b      	tst	r3, r1
    dcc2:	d1fb      	bne.n	dcbc <am_hal_itm_disable+0x6c>
    dcc4:	3801      	subs	r0, #1
    dcc6:	d1f3      	bne.n	dcb0 <am_hal_itm_disable+0x60>
    dcc8:	4a0a      	ldr	r2, [pc, #40]	; (dcf4 <am_hal_itm_disable+0xa4>)
    dcca:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    dcce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    dcd2:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    dcd6:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    dcda:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    dcde:	d1fa      	bne.n	dcd6 <am_hal_itm_disable+0x86>
    dce0:	4a03      	ldr	r2, [pc, #12]	; (dcf0 <am_hal_itm_disable+0xa0>)
    dce2:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    dce6:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
    dcea:	2b00      	cmp	r3, #0
    dcec:	d1fb      	bne.n	dce6 <am_hal_itm_disable+0x96>
    dcee:	bd10      	pop	{r4, pc}
    dcf0:	40020000 	.word	0x40020000
    dcf4:	e000ed00 	.word	0xe000ed00
    dcf8:	c5acce55 	.word	0xc5acce55
    dcfc:	00150511 	.word	0x00150511
    dd00:	00800001 	.word	0x00800001

0000dd04 <am_hal_itm_print>:
    dd04:	7803      	ldrb	r3, [r0, #0]
    dd06:	b1a3      	cbz	r3, dd32 <am_hal_itm_print+0x2e>
    dd08:	4603      	mov	r3, r0
    dd0a:	f1c0 0c01 	rsb	ip, r0, #1
    dd0e:	eb0c 0103 	add.w	r1, ip, r3
    dd12:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    dd16:	2a00      	cmp	r2, #0
    dd18:	d1f9      	bne.n	dd0e <am_hal_itm_print+0xa>
    dd1a:	4401      	add	r1, r0
    dd1c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    dd20:	f810 cb01 	ldrb.w	ip, [r0], #1
    dd24:	6813      	ldr	r3, [r2, #0]
    dd26:	2b00      	cmp	r3, #0
    dd28:	d0fc      	beq.n	dd24 <am_hal_itm_print+0x20>
    dd2a:	4288      	cmp	r0, r1
    dd2c:	f882 c000 	strb.w	ip, [r2]
    dd30:	d1f6      	bne.n	dd20 <am_hal_itm_print+0x1c>
    dd32:	4770      	bx	lr

0000dd34 <am_hal_mcuctrl_info_get>:
    dd34:	2900      	cmp	r1, #0
    dd36:	f000 808f 	beq.w	de58 <am_hal_mcuctrl_info_get+0x124>
    dd3a:	2801      	cmp	r0, #1
    dd3c:	b430      	push	{r4, r5}
    dd3e:	d006      	beq.n	dd4e <am_hal_mcuctrl_info_get+0x1a>
    dd40:	2802      	cmp	r0, #2
    dd42:	d06d      	beq.n	de20 <am_hal_mcuctrl_info_get+0xec>
    dd44:	2800      	cmp	r0, #0
    dd46:	d055      	beq.n	ddf4 <am_hal_mcuctrl_info_get+0xc0>
    dd48:	2006      	movs	r0, #6
    dd4a:	bc30      	pop	{r4, r5}
    dd4c:	4770      	bx	lr
    dd4e:	4a43      	ldr	r2, [pc, #268]	; (de5c <am_hal_mcuctrl_info_get+0x128>)
    dd50:	4843      	ldr	r0, [pc, #268]	; (de60 <am_hal_mcuctrl_info_get+0x12c>)
    dd52:	6813      	ldr	r3, [r2, #0]
    dd54:	600b      	str	r3, [r1, #0]
    dd56:	6854      	ldr	r4, [r2, #4]
    dd58:	604c      	str	r4, [r1, #4]
    dd5a:	6894      	ldr	r4, [r2, #8]
    dd5c:	608c      	str	r4, [r1, #8]
    dd5e:	68d4      	ldr	r4, [r2, #12]
    dd60:	60cc      	str	r4, [r1, #12]
    dd62:	f3c3 5503 	ubfx	r5, r3, #20, #4
    dd66:	6914      	ldr	r4, [r2, #16]
    dd68:	610c      	str	r4, [r1, #16]
    dd6a:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    dd6e:	4c3d      	ldr	r4, [pc, #244]	; (de64 <am_hal_mcuctrl_info_get+0x130>)
    dd70:	6950      	ldr	r0, [r2, #20]
    dd72:	6148      	str	r0, [r1, #20]
    dd74:	f003 0201 	and.w	r2, r3, #1
    dd78:	f3c3 4303 	ubfx	r3, r3, #16, #4
    dd7c:	e9c1 2506 	strd	r2, r5, [r1, #24]
    dd80:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    dd84:	4a38      	ldr	r2, [pc, #224]	; (de68 <am_hal_mcuctrl_info_get+0x134>)
    dd86:	620b      	str	r3, [r1, #32]
    dd88:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    dd8c:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    dd90:	b2db      	uxtb	r3, r3
    dd92:	f000 000f 	and.w	r0, r0, #15
    dd96:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    dd9a:	624b      	str	r3, [r1, #36]	; 0x24
    dd9c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    dda0:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
    dda4:	f3c3 1303 	ubfx	r3, r3, #4, #4
    dda8:	f000 000f 	and.w	r0, r0, #15
    ddac:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
    ddb0:	628b      	str	r3, [r1, #40]	; 0x28
    ddb2:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    ddb6:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
    ddba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    ddbe:	f3c0 1003 	ubfx	r0, r0, #4, #4
    ddc2:	4303      	orrs	r3, r0
    ddc4:	62cb      	str	r3, [r1, #44]	; 0x2c
    ddc6:	f8d2 40fc 	ldr.w	r4, [r2, #252]	; 0xfc
    ddca:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    ddce:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    ddd2:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    ddd6:	b2db      	uxtb	r3, r3
    ddd8:	041b      	lsls	r3, r3, #16
    ddda:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    ddde:	fa5f fc82 	uxtb.w	ip, r2
    dde2:	ea43 030c 	orr.w	r3, r3, ip
    dde6:	b2c2      	uxtb	r2, r0
    dde8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ddec:	630b      	str	r3, [r1, #48]	; 0x30
    ddee:	2000      	movs	r0, #0
    ddf0:	bc30      	pop	{r4, r5}
    ddf2:	4770      	bx	lr
    ddf4:	4a19      	ldr	r2, [pc, #100]	; (de5c <am_hal_mcuctrl_info_get+0x128>)
    ddf6:	6993      	ldr	r3, [r2, #24]
    ddf8:	f3c3 1480 	ubfx	r4, r3, #6, #1
    ddfc:	700c      	strb	r4, [r1, #0]
    ddfe:	f8d2 41a0 	ldr.w	r4, [r2, #416]	; 0x1a0
    de02:	f3c3 0380 	ubfx	r3, r3, #2, #1
    de06:	704b      	strb	r3, [r1, #1]
    de08:	f3c4 6381 	ubfx	r3, r4, #26, #2
    de0c:	710b      	strb	r3, [r1, #4]
    de0e:	6953      	ldr	r3, [r2, #20]
    de10:	f3c3 0240 	ubfx	r2, r3, #1, #1
    de14:	f003 0301 	and.w	r3, r3, #1
    de18:	bc30      	pop	{r4, r5}
    de1a:	708a      	strb	r2, [r1, #2]
    de1c:	70cb      	strb	r3, [r1, #3]
    de1e:	4770      	bx	lr
    de20:	4a0e      	ldr	r2, [pc, #56]	; (de5c <am_hal_mcuctrl_info_get+0x128>)
    de22:	6848      	ldr	r0, [r1, #4]
    de24:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    de28:	f003 0401 	and.w	r4, r3, #1
    de2c:	700c      	strb	r4, [r1, #0]
    de2e:	f3c3 0440 	ubfx	r4, r3, #1, #1
    de32:	720c      	strb	r4, [r1, #8]
    de34:	f8d2 41c4 	ldr.w	r4, [r2, #452]	; 0x1c4
    de38:	60cc      	str	r4, [r1, #12]
    de3a:	f8d2 41c0 	ldr.w	r4, [r2, #448]	; 0x1c0
    de3e:	4320      	orrs	r0, r4
    de40:	f3c3 0380 	ubfx	r3, r3, #2, #1
    de44:	6048      	str	r0, [r1, #4]
    de46:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    de4a:	740b      	strb	r3, [r1, #16]
    de4c:	694b      	ldr	r3, [r1, #20]
    de4e:	4313      	orrs	r3, r2
    de50:	2000      	movs	r0, #0
    de52:	bc30      	pop	{r4, r5}
    de54:	614b      	str	r3, [r1, #20]
    de56:	4770      	bx	lr
    de58:	2006      	movs	r0, #6
    de5a:	4770      	bx	lr
    de5c:	40020000 	.word	0x40020000
    de60:	0000e81c 	.word	0x0000e81c
    de64:	0000e85c 	.word	0x0000e85c
    de68:	f0000f00 	.word	0xf0000f00

0000de6c <am_hal_pwrctrl_periph_enable>:
    de6c:	b570      	push	{r4, r5, r6, lr}
    de6e:	b082      	sub	sp, #8
    de70:	4604      	mov	r4, r0
    de72:	f7ff fec1 	bl	dbf8 <am_hal_interrupt_master_disable>
    de76:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    de7a:	4e0f      	ldr	r6, [pc, #60]	; (deb8 <am_hal_pwrctrl_periph_enable+0x4c>)
    de7c:	4d0f      	ldr	r5, [pc, #60]	; (debc <am_hal_pwrctrl_periph_enable+0x50>)
    de7e:	9001      	str	r0, [sp, #4]
    de80:	00a4      	lsls	r4, r4, #2
    de82:	68b3      	ldr	r3, [r6, #8]
    de84:	592a      	ldr	r2, [r5, r4]
    de86:	4313      	orrs	r3, r2
    de88:	60b3      	str	r3, [r6, #8]
    de8a:	9801      	ldr	r0, [sp, #4]
    de8c:	442c      	add	r4, r5
    de8e:	f7ff feb7 	bl	dc00 <am_hal_interrupt_master_set>
    de92:	20a0      	movs	r0, #160	; 0xa0
    de94:	f7ff fc64 	bl	d760 <am_hal_flash_delay>
    de98:	69b3      	ldr	r3, [r6, #24]
    de9a:	6864      	ldr	r4, [r4, #4]
    de9c:	4223      	tst	r3, r4
    de9e:	d103      	bne.n	dea8 <am_hal_pwrctrl_periph_enable+0x3c>
    dea0:	20a0      	movs	r0, #160	; 0xa0
    dea2:	f7ff fc5d 	bl	d760 <am_hal_flash_delay>
    dea6:	69b3      	ldr	r3, [r6, #24]
    dea8:	4b03      	ldr	r3, [pc, #12]	; (deb8 <am_hal_pwrctrl_periph_enable+0x4c>)
    deaa:	699b      	ldr	r3, [r3, #24]
    deac:	4223      	tst	r3, r4
    deae:	bf0c      	ite	eq
    deb0:	2001      	moveq	r0, #1
    deb2:	2000      	movne	r0, #0
    deb4:	b002      	add	sp, #8
    deb6:	bd70      	pop	{r4, r5, r6, pc}
    deb8:	40021000 	.word	0x40021000
    debc:	0000e89c 	.word	0x0000e89c

0000dec0 <am_hal_pwrctrl_periph_disable>:
    dec0:	b570      	push	{r4, r5, r6, lr}
    dec2:	b082      	sub	sp, #8
    dec4:	4604      	mov	r4, r0
    dec6:	f7ff fe97 	bl	dbf8 <am_hal_interrupt_master_disable>
    deca:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    dece:	4e10      	ldr	r6, [pc, #64]	; (df10 <am_hal_pwrctrl_periph_disable+0x50>)
    ded0:	4d10      	ldr	r5, [pc, #64]	; (df14 <am_hal_pwrctrl_periph_disable+0x54>)
    ded2:	9001      	str	r0, [sp, #4]
    ded4:	00a4      	lsls	r4, r4, #2
    ded6:	68b3      	ldr	r3, [r6, #8]
    ded8:	592a      	ldr	r2, [r5, r4]
    deda:	ea23 0302 	bic.w	r3, r3, r2
    dede:	60b3      	str	r3, [r6, #8]
    dee0:	9801      	ldr	r0, [sp, #4]
    dee2:	442c      	add	r4, r5
    dee4:	f7ff fe8c 	bl	dc00 <am_hal_interrupt_master_set>
    dee8:	20a0      	movs	r0, #160	; 0xa0
    deea:	f7ff fc39 	bl	d760 <am_hal_flash_delay>
    deee:	69b3      	ldr	r3, [r6, #24]
    def0:	6864      	ldr	r4, [r4, #4]
    def2:	4223      	tst	r3, r4
    def4:	d003      	beq.n	defe <am_hal_pwrctrl_periph_disable+0x3e>
    def6:	20a0      	movs	r0, #160	; 0xa0
    def8:	f7ff fc32 	bl	d760 <am_hal_flash_delay>
    defc:	69b3      	ldr	r3, [r6, #24]
    defe:	4b04      	ldr	r3, [pc, #16]	; (df10 <am_hal_pwrctrl_periph_disable+0x50>)
    df00:	699b      	ldr	r3, [r3, #24]
    df02:	4223      	tst	r3, r4
    df04:	bf14      	ite	ne
    df06:	2001      	movne	r0, #1
    df08:	2000      	moveq	r0, #0
    df0a:	b002      	add	sp, #8
    df0c:	bd70      	pop	{r4, r5, r6, pc}
    df0e:	bf00      	nop
    df10:	40021000 	.word	0x40021000
    df14:	0000e89c 	.word	0x0000e89c

0000df18 <am_hal_pwrctrl_low_power_init>:
    df18:	b530      	push	{r4, r5, lr}
    df1a:	4b69      	ldr	r3, [pc, #420]	; (e0c0 <am_hal_pwrctrl_low_power_init+0x1a8>)
    df1c:	681a      	ldr	r2, [r3, #0]
    df1e:	b085      	sub	sp, #20
    df20:	b912      	cbnz	r2, df28 <am_hal_pwrctrl_low_power_init+0x10>
    df22:	4a68      	ldr	r2, [pc, #416]	; (e0c4 <am_hal_pwrctrl_low_power_init+0x1ac>)
    df24:	6812      	ldr	r2, [r2, #0]
    df26:	601a      	str	r2, [r3, #0]
    df28:	4b67      	ldr	r3, [pc, #412]	; (e0c8 <am_hal_pwrctrl_low_power_init+0x1b0>)
    df2a:	68db      	ldr	r3, [r3, #12]
    df2c:	b2db      	uxtb	r3, r3
    df2e:	2b12      	cmp	r3, #18
    df30:	d104      	bne.n	df3c <am_hal_pwrctrl_low_power_init+0x24>
    df32:	4c66      	ldr	r4, [pc, #408]	; (e0cc <am_hal_pwrctrl_low_power_init+0x1b4>)
    df34:	6863      	ldr	r3, [r4, #4]
    df36:	07d8      	lsls	r0, r3, #31
    df38:	f100 8088 	bmi.w	e04c <am_hal_pwrctrl_low_power_init+0x134>
    df3c:	4b62      	ldr	r3, [pc, #392]	; (e0c8 <am_hal_pwrctrl_low_power_init+0x1b0>)
    df3e:	68da      	ldr	r2, [r3, #12]
    df40:	b2d2      	uxtb	r2, r2
    df42:	2a20      	cmp	r2, #32
    df44:	d934      	bls.n	dfb0 <am_hal_pwrctrl_low_power_init+0x98>
    df46:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
    df4a:	2002      	movs	r0, #2
    df4c:	f360 4213 	bfi	r2, r0, #16, #4
    df50:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    df54:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
    df58:	2203      	movs	r2, #3
    df5a:	f362 5117 	bfi	r1, r2, #20, #4
    df5e:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
    df62:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    df66:	2405      	movs	r4, #5
    df68:	f364 0103 	bfi	r1, r4, #0, #4
    df6c:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    df70:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    df74:	f360 1107 	bfi	r1, r0, #4, #4
    df78:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    df7c:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    df80:	2406      	movs	r4, #6
    df82:	f364 210b 	bfi	r1, r4, #8, #4
    df86:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    df8a:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    df8e:	2001      	movs	r0, #1
    df90:	f360 310f 	bfi	r1, r0, #12, #4
    df94:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    df98:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    df9c:	f362 61de 	bfi	r1, r2, #27, #4
    dfa0:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    dfa4:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
    dfa8:	f362 0103 	bfi	r1, r2, #0, #4
    dfac:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
    dfb0:	4a45      	ldr	r2, [pc, #276]	; (e0c8 <am_hal_pwrctrl_low_power_init+0x1b0>)
    dfb2:	68d3      	ldr	r3, [r2, #12]
    dfb4:	b2db      	uxtb	r3, r3
    dfb6:	2b11      	cmp	r3, #17
    dfb8:	d905      	bls.n	dfc6 <am_hal_pwrctrl_low_power_init+0xae>
    dfba:	f8d2 335c 	ldr.w	r3, [r2, #860]	; 0x35c
    dfbe:	f36f 6318 	bfc	r3, #24, #1
    dfc2:	f8c2 335c 	str.w	r3, [r2, #860]	; 0x35c
    dfc6:	2100      	movs	r1, #0
    dfc8:	200c      	movs	r0, #12
    dfca:	f7ff f995 	bl	d2f8 <am_hal_cachectrl_control>
    dfce:	4b3f      	ldr	r3, [pc, #252]	; (e0cc <am_hal_pwrctrl_low_power_init+0x1b4>)
    dfd0:	699b      	ldr	r3, [r3, #24]
    dfd2:	f3c3 2500 	ubfx	r5, r3, #8, #1
    dfd6:	05db      	lsls	r3, r3, #23
    dfd8:	d420      	bmi.n	e01c <am_hal_pwrctrl_low_power_init+0x104>
    dfda:	4c3b      	ldr	r4, [pc, #236]	; (e0c8 <am_hal_pwrctrl_low_power_init+0x1b0>)
    dfdc:	68e3      	ldr	r3, [r4, #12]
    dfde:	b2db      	uxtb	r3, r3
    dfe0:	2b11      	cmp	r3, #17
    dfe2:	d84e      	bhi.n	e082 <am_hal_pwrctrl_low_power_init+0x16a>
    dfe4:	4c38      	ldr	r4, [pc, #224]	; (e0c8 <am_hal_pwrctrl_low_power_init+0x1b0>)
    dfe6:	493a      	ldr	r1, [pc, #232]	; (e0d0 <am_hal_pwrctrl_low_power_init+0x1b8>)
    dfe8:	7e22      	ldrb	r2, [r4, #24]
    dfea:	2001      	movs	r0, #1
    dfec:	4302      	orrs	r2, r0
    dfee:	2307      	movs	r3, #7
    dff0:	7622      	strb	r2, [r4, #24]
    dff2:	9000      	str	r0, [sp, #0]
    dff4:	461a      	mov	r2, r3
    dff6:	f242 7010 	movw	r0, #10000	; 0x2710
    dffa:	f7ff fbc1 	bl	d780 <am_hal_flash_delay_status_check>
    dffe:	2800      	cmp	r0, #0
    e000:	d15a      	bne.n	e0b8 <am_hal_pwrctrl_low_power_init+0x1a0>
    e002:	4b32      	ldr	r3, [pc, #200]	; (e0cc <am_hal_pwrctrl_low_power_init+0x1b4>)
    e004:	681a      	ldr	r2, [r3, #0]
    e006:	f042 0201 	orr.w	r2, r2, #1
    e00a:	601a      	str	r2, [r3, #0]
    e00c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    e00e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    e012:	625a      	str	r2, [r3, #36]	; 0x24
    e014:	68e3      	ldr	r3, [r4, #12]
    e016:	b2db      	uxtb	r3, r3
    e018:	2b11      	cmp	r3, #17
    e01a:	d002      	beq.n	e022 <am_hal_pwrctrl_low_power_init+0x10a>
    e01c:	2000      	movs	r0, #0
    e01e:	b005      	add	sp, #20
    e020:	bd30      	pop	{r4, r5, pc}
    e022:	f8d4 335c 	ldr.w	r3, [r4, #860]	; 0x35c
    e026:	f360 5356 	bfi	r3, r0, #21, #2
    e02a:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
    e02e:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e032:	220f      	movs	r2, #15
    e034:	f362 138b 	bfi	r3, r2, #6, #6
    e038:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e03c:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e040:	f362 0305 	bfi	r3, r2, #0, #6
    e044:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e048:	b005      	add	sp, #20
    e04a:	bd30      	pop	{r4, r5, pc}
    e04c:	f7ff fdd4 	bl	dbf8 <am_hal_interrupt_master_disable>
    e050:	9002      	str	r0, [sp, #8]
    e052:	68a3      	ldr	r3, [r4, #8]
    e054:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    e058:	60a3      	str	r3, [r4, #8]
    e05a:	9802      	ldr	r0, [sp, #8]
    e05c:	f7ff fdd0 	bl	dc00 <am_hal_interrupt_master_set>
    e060:	20a0      	movs	r0, #160	; 0xa0
    e062:	f7ff fb7d 	bl	d760 <am_hal_flash_delay>
    e066:	69a3      	ldr	r3, [r4, #24]
    e068:	0619      	lsls	r1, r3, #24
    e06a:	d403      	bmi.n	e074 <am_hal_pwrctrl_low_power_init+0x15c>
    e06c:	20a0      	movs	r0, #160	; 0xa0
    e06e:	f7ff fb77 	bl	d760 <am_hal_flash_delay>
    e072:	69a3      	ldr	r3, [r4, #24]
    e074:	4b15      	ldr	r3, [pc, #84]	; (e0cc <am_hal_pwrctrl_low_power_init+0x1b4>)
    e076:	699b      	ldr	r3, [r3, #24]
    e078:	061a      	lsls	r2, r3, #24
    e07a:	f53f af5f 	bmi.w	df3c <am_hal_pwrctrl_low_power_init+0x24>
    e07e:	2001      	movs	r0, #1
    e080:	e7cd      	b.n	e01e <am_hal_pwrctrl_low_power_init+0x106>
    e082:	f7ff fdb9 	bl	dbf8 <am_hal_interrupt_master_disable>
    e086:	9003      	str	r0, [sp, #12]
    e088:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e08c:	2219      	movs	r2, #25
    e08e:	f362 138b 	bfi	r3, r2, #6, #6
    e092:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e096:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
    e09a:	210c      	movs	r1, #12
    e09c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e0a0:	f361 0205 	bfi	r2, r1, #0, #6
    e0a4:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
    e0a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    e0aa:	f365 5296 	bfi	r2, r5, #22, #1
    e0ae:	63da      	str	r2, [r3, #60]	; 0x3c
    e0b0:	9803      	ldr	r0, [sp, #12]
    e0b2:	f7ff fda5 	bl	dc00 <am_hal_interrupt_master_set>
    e0b6:	e795      	b.n	dfe4 <am_hal_pwrctrl_low_power_init+0xcc>
    e0b8:	2004      	movs	r0, #4
    e0ba:	b005      	add	sp, #20
    e0bc:	bd30      	pop	{r4, r5, pc}
    e0be:	bf00      	nop
    e0c0:	10001144 	.word	0x10001144
    e0c4:	4ffff000 	.word	0x4ffff000
    e0c8:	40020000 	.word	0x40020000
    e0cc:	40021000 	.word	0x40021000
    e0d0:	40020018 	.word	0x40020018

0000e0d4 <am_hal_rtc_osc_disable>:
    e0d4:	4a03      	ldr	r2, [pc, #12]	; (e0e4 <am_hal_rtc_osc_disable+0x10>)
    e0d6:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    e0da:	f043 0310 	orr.w	r3, r3, #16
    e0de:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    e0e2:	4770      	bx	lr
    e0e4:	40004200 	.word	0x40004200

0000e0e8 <am_hal_tpiu_enable>:
    e0e8:	b510      	push	{r4, lr}
    e0ea:	4b23      	ldr	r3, [pc, #140]	; (e178 <am_hal_tpiu_enable+0x90>)
    e0ec:	6804      	ldr	r4, [r0, #0]
    e0ee:	2200      	movs	r2, #0
    e0f0:	b084      	sub	sp, #16
    e0f2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    e0f6:	b334      	cbz	r4, e146 <am_hal_tpiu_enable+0x5e>
    e0f8:	4a20      	ldr	r2, [pc, #128]	; (e17c <am_hal_tpiu_enable+0x94>)
    e0fa:	4921      	ldr	r1, [pc, #132]	; (e180 <am_hal_tpiu_enable+0x98>)
    e0fc:	2001      	movs	r0, #1
    e0fe:	6058      	str	r0, [r3, #4]
    e100:	f5a4 4361 	sub.w	r3, r4, #57600	; 0xe100
    e104:	a801      	add	r0, sp, #4
    e106:	428b      	cmp	r3, r1
    e108:	bf88      	it	hi
    e10a:	4614      	movhi	r4, r2
    e10c:	f7ff fb0a 	bl	d724 <am_hal_clkgen_status_get>
    e110:	9b01      	ldr	r3, [sp, #4]
    e112:	1c5a      	adds	r2, r3, #1
    e114:	d02d      	beq.n	e172 <am_hal_tpiu_enable+0x8a>
    e116:	08db      	lsrs	r3, r3, #3
    e118:	fbb3 f4f4 	udiv	r4, r3, r4
    e11c:	3c01      	subs	r4, #1
    e11e:	b2a4      	uxth	r4, r4
    e120:	4b15      	ldr	r3, [pc, #84]	; (e178 <am_hal_tpiu_enable+0x90>)
    e122:	4a18      	ldr	r2, [pc, #96]	; (e184 <am_hal_tpiu_enable+0x9c>)
    e124:	611c      	str	r4, [r3, #16]
    e126:	2102      	movs	r1, #2
    e128:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
    e12c:	2000      	movs	r0, #0
    e12e:	f240 2101 	movw	r1, #513	; 0x201
    e132:	f8c3 0f00 	str.w	r0, [r3, #3840]	; 0xf00
    e136:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
    e13a:	f44f 7048 	mov.w	r0, #800	; 0x320
    e13e:	f7ff fb0f 	bl	d760 <am_hal_flash_delay>
    e142:	b004      	add	sp, #16
    e144:	bd10      	pop	{r4, pc}
    e146:	6902      	ldr	r2, [r0, #16]
    e148:	611a      	str	r2, [r3, #16]
    e14a:	6882      	ldr	r2, [r0, #8]
    e14c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    e150:	68c1      	ldr	r1, [r0, #12]
    e152:	2201      	movs	r2, #1
    e154:	3901      	subs	r1, #1
    e156:	408a      	lsls	r2, r1
    e158:	605a      	str	r2, [r3, #4]
    e15a:	f8c3 4f00 	str.w	r4, [r3, #3840]	; 0xf00
    e15e:	4a09      	ldr	r2, [pc, #36]	; (e184 <am_hal_tpiu_enable+0x9c>)
    e160:	6843      	ldr	r3, [r0, #4]
    e162:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    e166:	f44f 7048 	mov.w	r0, #800	; 0x320
    e16a:	f7ff faf9 	bl	d760 <am_hal_flash_delay>
    e16e:	b004      	add	sp, #16
    e170:	bd10      	pop	{r4, pc}
    e172:	2405      	movs	r4, #5
    e174:	e7d4      	b.n	e120 <am_hal_tpiu_enable+0x38>
    e176:	bf00      	nop
    e178:	e0040000 	.word	0xe0040000
    e17c:	000f4240 	.word	0x000f4240
    e180:	001da380 	.word	0x001da380
    e184:	40020000 	.word	0x40020000

0000e188 <am_hal_uart_deinitialize>:
    e188:	b170      	cbz	r0, e1a8 <am_hal_uart_deinitialize+0x20>
    e18a:	6803      	ldr	r3, [r0, #0]
    e18c:	4a07      	ldr	r2, [pc, #28]	; (e1ac <am_hal_uart_deinitialize+0x24>)
    e18e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e192:	4293      	cmp	r3, r2
    e194:	d108      	bne.n	e1a8 <am_hal_uart_deinitialize+0x20>
    e196:	78c2      	ldrb	r2, [r0, #3]
    e198:	2300      	movs	r3, #0
    e19a:	f36f 0200 	bfc	r2, #0, #1
    e19e:	70c2      	strb	r2, [r0, #3]
    e1a0:	6243      	str	r3, [r0, #36]	; 0x24
    e1a2:	7103      	strb	r3, [r0, #4]
    e1a4:	4618      	mov	r0, r3
    e1a6:	4770      	bx	lr
    e1a8:	2002      	movs	r0, #2
    e1aa:	4770      	bx	lr
    e1ac:	01ea9e06 	.word	0x01ea9e06

0000e1b0 <am_hal_uart_power_control>:
    e1b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e1b2:	4604      	mov	r4, r0
    e1b4:	6800      	ldr	r0, [r0, #0]
    e1b6:	4b39      	ldr	r3, [pc, #228]	; (e29c <am_hal_uart_power_control+0xec>)
    e1b8:	f020 467e 	bic.w	r6, r0, #4261412864	; 0xfe000000
    e1bc:	429e      	cmp	r6, r3
    e1be:	b085      	sub	sp, #20
    e1c0:	d13f      	bne.n	e242 <am_hal_uart_power_control+0x92>
    e1c2:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e1c4:	f105 0008 	add.w	r0, r5, #8
    e1c8:	b2c7      	uxtb	r7, r0
    e1ca:	b189      	cbz	r1, e1f0 <am_hal_uart_power_control+0x40>
    e1cc:	3901      	subs	r1, #1
    e1ce:	2901      	cmp	r1, #1
    e1d0:	d834      	bhi.n	e23c <am_hal_uart_power_control+0x8c>
    e1d2:	2a00      	cmp	r2, #0
    e1d4:	d138      	bne.n	e248 <am_hal_uart_power_control+0x98>
    e1d6:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e1da:	351c      	adds	r5, #28
    e1dc:	032d      	lsls	r5, r5, #12
    e1de:	f04f 33ff 	mov.w	r3, #4294967295
    e1e2:	646b      	str	r3, [r5, #68]	; 0x44
    e1e4:	4638      	mov	r0, r7
    e1e6:	f7ff fe6b 	bl	dec0 <am_hal_pwrctrl_periph_disable>
    e1ea:	2000      	movs	r0, #0
    e1ec:	b005      	add	sp, #20
    e1ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e1f0:	2a00      	cmp	r2, #0
    e1f2:	d04a      	beq.n	e28a <am_hal_uart_power_control+0xda>
    e1f4:	7923      	ldrb	r3, [r4, #4]
    e1f6:	2b00      	cmp	r3, #0
    e1f8:	d04e      	beq.n	e298 <am_hal_uart_power_control+0xe8>
    e1fa:	4638      	mov	r0, r7
    e1fc:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e200:	9101      	str	r1, [sp, #4]
    e202:	351c      	adds	r5, #28
    e204:	f7ff fe32 	bl	de6c <am_hal_pwrctrl_periph_enable>
    e208:	f7ff fcf6 	bl	dbf8 <am_hal_interrupt_master_disable>
    e20c:	032d      	lsls	r5, r5, #12
    e20e:	68a3      	ldr	r3, [r4, #8]
    e210:	9002      	str	r0, [sp, #8]
    e212:	622b      	str	r3, [r5, #32]
    e214:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    e218:	626a      	str	r2, [r5, #36]	; 0x24
    e21a:	62ab      	str	r3, [r5, #40]	; 0x28
    e21c:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
    e220:	62ea      	str	r2, [r5, #44]	; 0x2c
    e222:	632b      	str	r3, [r5, #48]	; 0x30
    e224:	e9d4 2307 	ldrd	r2, r3, [r4, #28]
    e228:	9901      	ldr	r1, [sp, #4]
    e22a:	636a      	str	r2, [r5, #52]	; 0x34
    e22c:	63ab      	str	r3, [r5, #56]	; 0x38
    e22e:	9802      	ldr	r0, [sp, #8]
    e230:	7121      	strb	r1, [r4, #4]
    e232:	f7ff fce5 	bl	dc00 <am_hal_interrupt_master_set>
    e236:	9901      	ldr	r1, [sp, #4]
    e238:	4608      	mov	r0, r1
    e23a:	e000      	b.n	e23e <am_hal_uart_power_control+0x8e>
    e23c:	2006      	movs	r0, #6
    e23e:	b005      	add	sp, #20
    e240:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e242:	2002      	movs	r0, #2
    e244:	b005      	add	sp, #20
    e246:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e248:	f7ff fcd6 	bl	dbf8 <am_hal_interrupt_master_disable>
    e24c:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e250:	351c      	adds	r5, #28
    e252:	032d      	lsls	r5, r5, #12
    e254:	9003      	str	r0, [sp, #12]
    e256:	6a2b      	ldr	r3, [r5, #32]
    e258:	60a3      	str	r3, [r4, #8]
    e25a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e25c:	60e3      	str	r3, [r4, #12]
    e25e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e260:	6123      	str	r3, [r4, #16]
    e262:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    e264:	6163      	str	r3, [r4, #20]
    e266:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    e268:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    e26a:	61a3      	str	r3, [r4, #24]
    e26c:	6bab      	ldr	r3, [r5, #56]	; 0x38
    e26e:	61e2      	str	r2, [r4, #28]
    e270:	2201      	movs	r2, #1
    e272:	6223      	str	r3, [r4, #32]
    e274:	9803      	ldr	r0, [sp, #12]
    e276:	7122      	strb	r2, [r4, #4]
    e278:	f7ff fcc2 	bl	dc00 <am_hal_interrupt_master_set>
    e27c:	6823      	ldr	r3, [r4, #0]
    e27e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e282:	42b3      	cmp	r3, r6
    e284:	d1ae      	bne.n	e1e4 <am_hal_uart_power_control+0x34>
    e286:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e288:	e7a5      	b.n	e1d6 <am_hal_uart_power_control+0x26>
    e28a:	4638      	mov	r0, r7
    e28c:	9201      	str	r2, [sp, #4]
    e28e:	f7ff fded 	bl	de6c <am_hal_pwrctrl_periph_enable>
    e292:	9a01      	ldr	r2, [sp, #4]
    e294:	4610      	mov	r0, r2
    e296:	e7d2      	b.n	e23e <am_hal_uart_power_control+0x8e>
    e298:	2007      	movs	r0, #7
    e29a:	e7d0      	b.n	e23e <am_hal_uart_power_control+0x8e>
    e29c:	01ea9e06 	.word	0x01ea9e06

0000e2a0 <am_hal_uart_tx_flush>:
    e2a0:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    e2a4:	b570      	push	{r4, r5, r6, lr}
    e2a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
    e2a8:	4604      	mov	r4, r0
    e2aa:	b15b      	cbz	r3, e2c4 <am_hal_uart_tx_flush+0x24>
    e2ac:	6b43      	ldr	r3, [r0, #52]	; 0x34
    e2ae:	b14b      	cbz	r3, e2c4 <am_hal_uart_tx_flush+0x24>
    e2b0:	4e0e      	ldr	r6, [pc, #56]	; (e2ec <am_hal_uart_tx_flush+0x4c>)
    e2b2:	6e20      	ldr	r0, [r4, #96]	; 0x60
    e2b4:	fbb6 f0f0 	udiv	r0, r6, r0
    e2b8:	0100      	lsls	r0, r0, #4
    e2ba:	f7ff fa51 	bl	d760 <am_hal_flash_delay>
    e2be:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e2c0:	2b00      	cmp	r3, #0
    e2c2:	d1f6      	bne.n	e2b2 <am_hal_uart_tx_flush+0x12>
    e2c4:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e2c8:	351c      	adds	r5, #28
    e2ca:	032d      	lsls	r5, r5, #12
    e2cc:	69ab      	ldr	r3, [r5, #24]
    e2ce:	071a      	lsls	r2, r3, #28
    e2d0:	d509      	bpl.n	e2e6 <am_hal_uart_tx_flush+0x46>
    e2d2:	4e06      	ldr	r6, [pc, #24]	; (e2ec <am_hal_uart_tx_flush+0x4c>)
    e2d4:	6e23      	ldr	r3, [r4, #96]	; 0x60
    e2d6:	fbb6 f3f3 	udiv	r3, r6, r3
    e2da:	0118      	lsls	r0, r3, #4
    e2dc:	f7ff fa40 	bl	d760 <am_hal_flash_delay>
    e2e0:	69ab      	ldr	r3, [r5, #24]
    e2e2:	071b      	lsls	r3, r3, #28
    e2e4:	d4f6      	bmi.n	e2d4 <am_hal_uart_tx_flush+0x34>
    e2e6:	2000      	movs	r0, #0
    e2e8:	bd70      	pop	{r4, r5, r6, pc}
    e2ea:	bf00      	nop
    e2ec:	00b71b00 	.word	0x00b71b00
    e2f0:	00000000 	.word	0x00000000
    e2f4:	00000064 	.word	0x00000064
    e2f8:	00000001 	.word	0x00000001
    e2fc:	00000064 	.word	0x00000064
    e300:	00000000 	.word	0x00000000
    e304:	00000064 	.word	0x00000064
    e308:	00000001 	.word	0x00000001
    e30c:	00000064 	.word	0x00000064
    e310:	00000000 	.word	0x00000000
    e314:	00000064 	.word	0x00000064
    e318:	00000001 	.word	0x00000001
    e31c:	00000064 	.word	0x00000064
    e320:	00000000 	.word	0x00000000
    e324:	00000064 	.word	0x00000064
    e328:	00000001 	.word	0x00000001
    e32c:	00000064 	.word	0x00000064
    e330:	00000000 	.word	0x00000000
    e334:	00000064 	.word	0x00000064
    e338:	00000001 	.word	0x00000001
    e33c:	00000064 	.word	0x00000064
    e340:	00000000 	.word	0x00000000
    e344:	00000064 	.word	0x00000064
    e348:	00000001 	.word	0x00000001
    e34c:	00000064 	.word	0x00000064
    e350:	00000000 	.word	0x00000000
    e354:	00000064 	.word	0x00000064
    e358:	00000001 	.word	0x00000001
    e35c:	00000064 	.word	0x00000064
    e360:	00000000 	.word	0x00000000
    e364:	00000064 	.word	0x00000064
    e368:	00000001 	.word	0x00000001
    e36c:	00000064 	.word	0x00000064
    e370:	00000000 	.word	0x00000000
    e374:	00000064 	.word	0x00000064
    e378:	00000001 	.word	0x00000001
    e37c:	00000064 	.word	0x00000064
    e380:	00000000 	.word	0x00000000
    e384:	00000064 	.word	0x00000064
    e388:	00000001 	.word	0x00000001
    e38c:	00000064 	.word	0x00000064
    e390:	00000000 	.word	0x00000000
    e394:	000000c8 	.word	0x000000c8
    e398:	00000001 	.word	0x00000001
    e39c:	000000c8 	.word	0x000000c8
    e3a0:	00000002 	.word	0x00000002
    e3a4:	000000c8 	.word	0x000000c8
    e3a8:	00000004 	.word	0x00000004
    e3ac:	000000c8 	.word	0x000000c8
    e3b0:	00000008 	.word	0x00000008
    e3b4:	000000c8 	.word	0x000000c8
    e3b8:	00000008 	.word	0x00000008
    e3bc:	000000c8 	.word	0x000000c8
    e3c0:	00000004 	.word	0x00000004
    e3c4:	000000c8 	.word	0x000000c8
    e3c8:	00000002 	.word	0x00000002
    e3cc:	000000c8 	.word	0x000000c8
    e3d0:	00000001 	.word	0x00000001
    e3d4:	000000c8 	.word	0x000000c8
    e3d8:	a5000001 	.word	0xa5000001
    e3dc:	a5a5a5a5 	.word	0xa5a5a5a5
    e3e0:	0000000f 	.word	0x0000000f
    e3e4:	0000012c 	.word	0x0000012c
    e3e8:	00000000 	.word	0x00000000
    e3ec:	0000012c 	.word	0x0000012c
    e3f0:	0000000f 	.word	0x0000000f
    e3f4:	0000012c 	.word	0x0000012c
    e3f8:	00000000 	.word	0x00000000
    e3fc:	0000012c 	.word	0x0000012c
    e400:	0000000f 	.word	0x0000000f
    e404:	0000012c 	.word	0x0000012c
    e408:	00000000 	.word	0x00000000
    e40c:	0000012c 	.word	0x0000012c
    e410:	ffffffff 	.word	0xffffffff
    e414:	ffffffff 	.word	0xffffffff
    e418:	74736146 	.word	0x74736146
    e41c:	49504720 	.word	0x49504720
    e420:	7845204f 	.word	0x7845204f
    e424:	6c706d61 	.word	0x6c706d61
    e428:	00000a65 	.word	0x00000a65
    e42c:	6e656857 	.word	0x6e656857
    e430:	6e757220 	.word	0x6e757220
    e434:	206e6f20 	.word	0x206e6f20
    e438:	41206e61 	.word	0x41206e61
    e43c:	6c6c6f70 	.word	0x6c6c6f70
    e440:	4520336f 	.word	0x4520336f
    e444:	0a3a4256 	.word	0x0a3a4256
    e448:	00000000 	.word	0x00000000
    e44c:	41202d20 	.word	0x41202d20
    e450:	327e206e 	.word	0x327e206e
    e454:	7a484d34 	.word	0x7a484d34
    e458:	76617720 	.word	0x76617720
    e45c:	726f6665 	.word	0x726f6665
    e460:	6128206d 	.word	0x6128206d
    e464:	72657466 	.word	0x72657466
    e468:	736e6920 	.word	0x736e6920
    e46c:	63757274 	.word	0x63757274
    e470:	6e6f6974 	.word	0x6e6f6974
    e474:	61682073 	.word	0x61682073
    e478:	63206576 	.word	0x63206576
    e47c:	65686361 	.word	0x65686361
    e480:	69202964 	.word	0x69202964
    e484:	756f2073 	.word	0x756f2073
    e488:	74757074 	.word	0x74757074
    e48c:	206e6f20 	.word	0x206e6f20
    e490:	206e6950 	.word	0x206e6950
    e494:	0a2e6425 	.word	0x0a2e6425
    e498:	00000000 	.word	0x00000000
    e49c:	54202d20 	.word	0x54202d20
    e4a0:	206e6568 	.word	0x206e6568
    e4a4:	20656874 	.word	0x20656874
    e4a8:	6c6f7041 	.word	0x6c6f7041
    e4ac:	20336f6c 	.word	0x20336f6c
    e4b0:	20425645 	.word	0x20425645
    e4b4:	7344454c 	.word	0x7344454c
    e4b8:	73696420 	.word	0x73696420
    e4bc:	79616c70 	.word	0x79616c70
    e4c0:	73206120 	.word	0x73206120
    e4c4:	74726f68 	.word	0x74726f68
    e4c8:	74617020 	.word	0x74617020
    e4cc:	6e726574 	.word	0x6e726574
    e4d0:	00000a2e 	.word	0x00000a2e
    e4d4:	4c202d20 	.word	0x4c202d20
    e4d8:	3d304445 	.word	0x3d304445
    e4dc:	206e6970 	.word	0x206e6970
    e4e0:	202c6425 	.word	0x202c6425
    e4e4:	3144454c 	.word	0x3144454c
    e4e8:	2c64253d 	.word	0x2c64253d
    e4ec:	44454c20 	.word	0x44454c20
    e4f0:	64253d32 	.word	0x64253d32
    e4f4:	454c202c 	.word	0x454c202c
    e4f8:	253d3344 	.word	0x253d3344
    e4fc:	4c202c64 	.word	0x4c202c64
    e500:	3d344445 	.word	0x3d344445
    e504:	0a2e6425 	.word	0x0a2e6425
    e508:	00000000 	.word	0x00000000
    e50c:	4e202d20 	.word	0x4e202d20
    e510:	2065746f 	.word	0x2065746f
    e514:	74616874 	.word	0x74616874
    e518:	44454c20 	.word	0x44454c20
    e51c:	6e612031 	.word	0x6e612031
    e520:	454c2064 	.word	0x454c2064
    e524:	6f203344 	.word	0x6f203344
    e528:	68742066 	.word	0x68742066
    e52c:	56452065 	.word	0x56452065
    e530:	72612042 	.word	0x72612042
    e534:	6f6c2065 	.word	0x6f6c2065
    e538:	65746163 	.word	0x65746163
    e53c:	6e6f2064 	.word	0x6e6f2064
    e540:	65687420 	.word	0x65687420
    e544:	6d617320 	.word	0x6d617320
    e548:	61462065 	.word	0x61462065
    e54c:	47207473 	.word	0x47207473
    e550:	204f4950 	.word	0x204f4950
    e554:	20776f72 	.word	0x20776f72
    e558:	20642528 	.word	0x20642528
    e55c:	20646e61 	.word	0x20646e61
    e560:	2e296425 	.word	0x2e296425
    e564:	0000000a 	.word	0x0000000a
    e568:	42202020 	.word	0x42202020
    e56c:	75616365 	.word	0x75616365
    e570:	6f206573 	.word	0x6f206573
    e574:	68742066 	.word	0x68742066
    e578:	202c7461 	.word	0x202c7461
    e57c:	3344454c 	.word	0x3344454c
    e580:	20736920 	.word	0x20736920
    e584:	61736964 	.word	0x61736964
    e588:	64656c62 	.word	0x64656c62
    e58c:	72756420 	.word	0x72756420
    e590:	20676e69 	.word	0x20676e69
    e594:	20656874 	.word	0x20656874
    e598:	6b6c6177 	.word	0x6b6c6177
    e59c:	71657320 	.word	0x71657320
    e5a0:	636e6575 	.word	0x636e6575
    e5a4:	6e612065 	.word	0x6e612065
    e5a8:	73692064 	.word	0x73692064
    e5ac:	75687420 	.word	0x75687420
    e5b0:	6b732073 	.word	0x6b732073
    e5b4:	65707069 	.word	0x65707069
    e5b8:	6e692064 	.word	0x6e692064
    e5bc:	65687420 	.word	0x65687420
    e5c0:	0000000a 	.word	0x0000000a
    e5c4:	73202020 	.word	0x73202020
    e5c8:	65757165 	.word	0x65757165
    e5cc:	2e65636e 	.word	0x2e65636e
    e5d0:	65685420 	.word	0x65685420
    e5d4:	7469206e 	.word	0x7469206e
    e5d8:	20736920 	.word	0x20736920
    e5dc:	62616e65 	.word	0x62616e65
    e5e0:	2064656c 	.word	0x2064656c
    e5e4:	69727564 	.word	0x69727564
    e5e8:	7420676e 	.word	0x7420676e
    e5ec:	61206568 	.word	0x61206568
    e5f0:	622d6c6c 	.word	0x622d6c6c
    e5f4:	6b6e696c 	.word	0x6b6e696c
    e5f8:	646e6120 	.word	0x646e6120
    e5fc:	696c6220 	.word	0x696c6220
    e600:	20736b6e 	.word	0x20736b6e
    e604:	6e6f6c61 	.word	0x6e6f6c61
    e608:	69772067 	.word	0x69772067
    e60c:	4c206874 	.word	0x4c206874
    e610:	2e314445 	.word	0x2e314445
    e614:	0000000a 	.word	0x0000000a
    e618:	6f727245 	.word	0x6f727245
    e61c:	65722072 	.word	0x65722072
    e620:	6e727574 	.word	0x6e727574
    e624:	66206465 	.word	0x66206465
    e628:	206d6f72 	.word	0x206d6f72
    e62c:	685f6d61 	.word	0x685f6d61
    e630:	675f6c61 	.word	0x675f6c61
    e634:	5f6f6970 	.word	0x5f6f6970
    e638:	74736166 	.word	0x74736166
    e63c:	6e69705f 	.word	0x6e69705f
    e640:	666e6f63 	.word	0x666e6f63
    e644:	29286769 	.word	0x29286769
    e648:	2e203d20 	.word	0x2e203d20
    e64c:	0000000a 	.word	0x0000000a
    e650:	6f727245 	.word	0x6f727245
    e654:	65722072 	.word	0x65722072
    e658:	6e727574 	.word	0x6e727574
    e65c:	66206465 	.word	0x66206465
    e660:	206d6f72 	.word	0x206d6f72
    e664:	2044454c 	.word	0x2044454c
    e668:	685f6d61 	.word	0x685f6d61
    e66c:	675f6c61 	.word	0x675f6c61
    e670:	5f6f6970 	.word	0x5f6f6970
    e674:	74736166 	.word	0x74736166
    e678:	6e69705f 	.word	0x6e69705f
    e67c:	666e6f63 	.word	0x666e6f63
    e680:	29286769 	.word	0x29286769
    e684:	30203d20 	.word	0x30203d20
    e688:	2e582578 	.word	0x2e582578
    e68c:	0000000a 	.word	0x0000000a
    e690:	0a0a0a0a 	.word	0x0a0a0a0a
    e694:	0a0a0a0a 	.word	0x0a0a0a0a
    e698:	0a0a0a0a 	.word	0x0a0a0a0a
    e69c:	0a0a0a0a 	.word	0x0a0a0a0a
    e6a0:	00000a0a 	.word	0x00000a0a

0000e6a4 <g_AM_BSP_GPIO_ITM_SWO>:
    e6a4:	00000002                                ....

0000e6a8 <am_hal_cachectrl_defaults>:
    e6a8:	00000308                                ....

0000e6ac <g_AM_HAL_GPIO_DISABLE>:
    e6ac:	00000003                                ....

0000e6b0 <g_AM_HAL_GPIO_OUTPUT>:
    e6b0:	00000403                                ....

0000e6b4 <g_AM_HAL_GPIO_OUTPUT_12>:
    e6b4:	00000703                                ....

0000e6b8 <g_ui8Bit76Capabilities>:
    e6b8:	02800101 80010180 80800101 80808080     ................
    e6c8:	80808080 80808008 01800180 80808080     ................
    e6d8:	80808080 01800402 01010401 80808080     ................
    e6e8:	00000101                                ....

0000e6ec <g_ui8Inpen>:
    e6ec:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
    e6fc:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
    e70c:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
    e71c:	00003130                                01..

0000e720 <g_ui8NCEtable>:
    e720:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    e730:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    e740:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    e750:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    e760:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    e770:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    e780:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    e790:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    e7a0:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    e7b0:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    e7c0:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    e7d0:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    e7e0:	32221202 43231303                       .."2..#C

0000e7e8 <g_ui8nCEpins>:
    e7e8:	02070707 00080802 01020202 01010101     ................
    e7f8:	01010101 01010101 01010101 01010101     ................
    e808:	01010101 08010101 01010008 01010101     ................
    e818:	00000101                                ....

0000e81c <g_am_hal_mcuctrl_flash_size>:
    e81c:	00004000 00008000 00010000 00020000     .@..............
    e82c:	00040000 00080000 00100000 00200000     .............. .
    e83c:	00180000 00000000 00000000 00000000     ................
	...

0000e85c <g_am_hal_mcuctrl_sram_size>:
    e85c:	00004000 00008000 00010000 00020000     .@..............
    e86c:	00040000 00080000 00100000 00060000     ................
    e87c:	000c0000 00000000 00000000 00000000     ................
	...

0000e89c <am_hal_pwrctrl_peripheral_control>:
	...
    e8a8:	00000001 00000004 00000004 00000002     ................
    e8b8:	00000008 00000008 00000004 00000008     ................
    e8c8:	00000008 00000008 00000008 00000008     ................
    e8d8:	00000010 00000010 00000010 00000020     ............ ...
    e8e8:	00000010 00000010 00000040 00000010     ........@.......
    e8f8:	00000010 00000080 00000004 00000004     ................
    e908:	00000100 00000004 00000004 00000200     ................
    e918:	00000020 00000020 00000400 00000004      ... ...........
    e928:	00000004 00000800 00000040 00000040     ........@...@...
    e938:	00001000 00000080 00000080 00002000     ............. ..
    e948:	00000100 00000100                       ........
