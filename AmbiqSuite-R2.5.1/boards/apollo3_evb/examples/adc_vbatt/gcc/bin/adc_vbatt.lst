
bin/adc_vbatt.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 b5 db 00 00 1d dc 00 00 49 cd 00 00     ............I...
    c010:	1f dc 00 00 1f dc 00 00 1f dc 00 00 00 00 00 00     ................
	...
    c02c:	21 dc 00 00 21 dc 00 00 00 00 00 00 21 dc 00 00     !...!.......!...
    c03c:	21 dc 00 00 21 dc 00 00 21 dc 00 00 21 dc 00 00     !...!...!...!...
    c04c:	21 dc 00 00 21 dc 00 00 21 dc 00 00 21 dc 00 00     !...!...!...!...
    c05c:	21 dc 00 00 21 dc 00 00 21 dc 00 00 21 dc 00 00     !...!...!...!...
    c06c:	21 dc 00 00 21 dc 00 00 21 dc 00 00 21 dc 00 00     !...!...!...!...
    c07c:	21 dc 00 00 21 dc 00 00 21 dc 00 00 4d c5 00 00     !...!...!...M...
    c08c:	21 dc 00 00 21 dc 00 00 21 dc 00 00 21 dc 00 00     !...!...!...!...
    c09c:	21 dc 00 00 21 dc 00 00 21 dc 00 00 21 dc 00 00     !...!...!...!...
    c0ac:	21 dc 00 00 21 dc 00 00 21 dc 00 00 21 dc 00 00     !...!...!...!...
    c0bc:	21 dc 00 00                                         !...

0000c0c0 <__Patchable>:
	...

0000c100 <__aeabi_drsub>:
    c100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c104:	e002      	b.n	c10c <__adddf3>
    c106:	bf00      	nop

0000c108 <__aeabi_dsub>:
    c108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c10c <__adddf3>:
    c10c:	b530      	push	{r4, r5, lr}
    c10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c112:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c116:	ea94 0f05 	teq	r4, r5
    c11a:	bf08      	it	eq
    c11c:	ea90 0f02 	teqeq	r0, r2
    c120:	bf1f      	itttt	ne
    c122:	ea54 0c00 	orrsne.w	ip, r4, r0
    c126:	ea55 0c02 	orrsne.w	ip, r5, r2
    c12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c132:	f000 80e2 	beq.w	c2fa <__adddf3+0x1ee>
    c136:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c13e:	bfb8      	it	lt
    c140:	426d      	neglt	r5, r5
    c142:	dd0c      	ble.n	c15e <__adddf3+0x52>
    c144:	442c      	add	r4, r5
    c146:	ea80 0202 	eor.w	r2, r0, r2
    c14a:	ea81 0303 	eor.w	r3, r1, r3
    c14e:	ea82 0000 	eor.w	r0, r2, r0
    c152:	ea83 0101 	eor.w	r1, r3, r1
    c156:	ea80 0202 	eor.w	r2, r0, r2
    c15a:	ea81 0303 	eor.w	r3, r1, r3
    c15e:	2d36      	cmp	r5, #54	; 0x36
    c160:	bf88      	it	hi
    c162:	bd30      	pophi	{r4, r5, pc}
    c164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c168:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c174:	d002      	beq.n	c17c <__adddf3+0x70>
    c176:	4240      	negs	r0, r0
    c178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c180:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c188:	d002      	beq.n	c190 <__adddf3+0x84>
    c18a:	4252      	negs	r2, r2
    c18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c190:	ea94 0f05 	teq	r4, r5
    c194:	f000 80a7 	beq.w	c2e6 <__adddf3+0x1da>
    c198:	f1a4 0401 	sub.w	r4, r4, #1
    c19c:	f1d5 0e20 	rsbs	lr, r5, #32
    c1a0:	db0d      	blt.n	c1be <__adddf3+0xb2>
    c1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
    c1a6:	fa22 f205 	lsr.w	r2, r2, r5
    c1aa:	1880      	adds	r0, r0, r2
    c1ac:	f141 0100 	adc.w	r1, r1, #0
    c1b0:	fa03 f20e 	lsl.w	r2, r3, lr
    c1b4:	1880      	adds	r0, r0, r2
    c1b6:	fa43 f305 	asr.w	r3, r3, r5
    c1ba:	4159      	adcs	r1, r3
    c1bc:	e00e      	b.n	c1dc <__adddf3+0xd0>
    c1be:	f1a5 0520 	sub.w	r5, r5, #32
    c1c2:	f10e 0e20 	add.w	lr, lr, #32
    c1c6:	2a01      	cmp	r2, #1
    c1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
    c1cc:	bf28      	it	cs
    c1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
    c1d2:	fa43 f305 	asr.w	r3, r3, r5
    c1d6:	18c0      	adds	r0, r0, r3
    c1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c1e0:	d507      	bpl.n	c1f2 <__adddf3+0xe6>
    c1e2:	f04f 0e00 	mov.w	lr, #0
    c1e6:	f1dc 0c00 	rsbs	ip, ip, #0
    c1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
    c1ee:	eb6e 0101 	sbc.w	r1, lr, r1
    c1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c1f6:	d31b      	bcc.n	c230 <__adddf3+0x124>
    c1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c1fc:	d30c      	bcc.n	c218 <__adddf3+0x10c>
    c1fe:	0849      	lsrs	r1, r1, #1
    c200:	ea5f 0030 	movs.w	r0, r0, rrx
    c204:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c208:	f104 0401 	add.w	r4, r4, #1
    c20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c214:	f080 809a 	bcs.w	c34c <__adddf3+0x240>
    c218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c21c:	bf08      	it	eq
    c21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c222:	f150 0000 	adcs.w	r0, r0, #0
    c226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c22a:	ea41 0105 	orr.w	r1, r1, r5
    c22e:	bd30      	pop	{r4, r5, pc}
    c230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c234:	4140      	adcs	r0, r0
    c236:	eb41 0101 	adc.w	r1, r1, r1
    c23a:	3c01      	subs	r4, #1
    c23c:	bf28      	it	cs
    c23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    c242:	d2e9      	bcs.n	c218 <__adddf3+0x10c>
    c244:	f091 0f00 	teq	r1, #0
    c248:	bf04      	itt	eq
    c24a:	4601      	moveq	r1, r0
    c24c:	2000      	moveq	r0, #0
    c24e:	fab1 f381 	clz	r3, r1
    c252:	bf08      	it	eq
    c254:	3320      	addeq	r3, #32
    c256:	f1a3 030b 	sub.w	r3, r3, #11
    c25a:	f1b3 0220 	subs.w	r2, r3, #32
    c25e:	da0c      	bge.n	c27a <__adddf3+0x16e>
    c260:	320c      	adds	r2, #12
    c262:	dd08      	ble.n	c276 <__adddf3+0x16a>
    c264:	f102 0c14 	add.w	ip, r2, #20
    c268:	f1c2 020c 	rsb	r2, r2, #12
    c26c:	fa01 f00c 	lsl.w	r0, r1, ip
    c270:	fa21 f102 	lsr.w	r1, r1, r2
    c274:	e00c      	b.n	c290 <__adddf3+0x184>
    c276:	f102 0214 	add.w	r2, r2, #20
    c27a:	bfd8      	it	le
    c27c:	f1c2 0c20 	rsble	ip, r2, #32
    c280:	fa01 f102 	lsl.w	r1, r1, r2
    c284:	fa20 fc0c 	lsr.w	ip, r0, ip
    c288:	bfdc      	itt	le
    c28a:	ea41 010c 	orrle.w	r1, r1, ip
    c28e:	4090      	lslle	r0, r2
    c290:	1ae4      	subs	r4, r4, r3
    c292:	bfa2      	ittt	ge
    c294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c298:	4329      	orrge	r1, r5
    c29a:	bd30      	popge	{r4, r5, pc}
    c29c:	ea6f 0404 	mvn.w	r4, r4
    c2a0:	3c1f      	subs	r4, #31
    c2a2:	da1c      	bge.n	c2de <__adddf3+0x1d2>
    c2a4:	340c      	adds	r4, #12
    c2a6:	dc0e      	bgt.n	c2c6 <__adddf3+0x1ba>
    c2a8:	f104 0414 	add.w	r4, r4, #20
    c2ac:	f1c4 0220 	rsb	r2, r4, #32
    c2b0:	fa20 f004 	lsr.w	r0, r0, r4
    c2b4:	fa01 f302 	lsl.w	r3, r1, r2
    c2b8:	ea40 0003 	orr.w	r0, r0, r3
    c2bc:	fa21 f304 	lsr.w	r3, r1, r4
    c2c0:	ea45 0103 	orr.w	r1, r5, r3
    c2c4:	bd30      	pop	{r4, r5, pc}
    c2c6:	f1c4 040c 	rsb	r4, r4, #12
    c2ca:	f1c4 0220 	rsb	r2, r4, #32
    c2ce:	fa20 f002 	lsr.w	r0, r0, r2
    c2d2:	fa01 f304 	lsl.w	r3, r1, r4
    c2d6:	ea40 0003 	orr.w	r0, r0, r3
    c2da:	4629      	mov	r1, r5
    c2dc:	bd30      	pop	{r4, r5, pc}
    c2de:	fa21 f004 	lsr.w	r0, r1, r4
    c2e2:	4629      	mov	r1, r5
    c2e4:	bd30      	pop	{r4, r5, pc}
    c2e6:	f094 0f00 	teq	r4, #0
    c2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c2ee:	bf06      	itte	eq
    c2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c2f4:	3401      	addeq	r4, #1
    c2f6:	3d01      	subne	r5, #1
    c2f8:	e74e      	b.n	c198 <__adddf3+0x8c>
    c2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c2fe:	bf18      	it	ne
    c300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c304:	d029      	beq.n	c35a <__adddf3+0x24e>
    c306:	ea94 0f05 	teq	r4, r5
    c30a:	bf08      	it	eq
    c30c:	ea90 0f02 	teqeq	r0, r2
    c310:	d005      	beq.n	c31e <__adddf3+0x212>
    c312:	ea54 0c00 	orrs.w	ip, r4, r0
    c316:	bf04      	itt	eq
    c318:	4619      	moveq	r1, r3
    c31a:	4610      	moveq	r0, r2
    c31c:	bd30      	pop	{r4, r5, pc}
    c31e:	ea91 0f03 	teq	r1, r3
    c322:	bf1e      	ittt	ne
    c324:	2100      	movne	r1, #0
    c326:	2000      	movne	r0, #0
    c328:	bd30      	popne	{r4, r5, pc}
    c32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c32e:	d105      	bne.n	c33c <__adddf3+0x230>
    c330:	0040      	lsls	r0, r0, #1
    c332:	4149      	adcs	r1, r1
    c334:	bf28      	it	cs
    c336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c33a:	bd30      	pop	{r4, r5, pc}
    c33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c340:	bf3c      	itt	cc
    c342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c346:	bd30      	popcc	{r4, r5, pc}
    c348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c354:	f04f 0000 	mov.w	r0, #0
    c358:	bd30      	pop	{r4, r5, pc}
    c35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c35e:	bf1a      	itte	ne
    c360:	4619      	movne	r1, r3
    c362:	4610      	movne	r0, r2
    c364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c368:	bf1c      	itt	ne
    c36a:	460b      	movne	r3, r1
    c36c:	4602      	movne	r2, r0
    c36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c372:	bf06      	itte	eq
    c374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c378:	ea91 0f03 	teqeq	r1, r3
    c37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c380:	bd30      	pop	{r4, r5, pc}
    c382:	bf00      	nop

0000c384 <__aeabi_ui2d>:
    c384:	f090 0f00 	teq	r0, #0
    c388:	bf04      	itt	eq
    c38a:	2100      	moveq	r1, #0
    c38c:	4770      	bxeq	lr
    c38e:	b530      	push	{r4, r5, lr}
    c390:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c394:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c398:	f04f 0500 	mov.w	r5, #0
    c39c:	f04f 0100 	mov.w	r1, #0
    c3a0:	e750      	b.n	c244 <__adddf3+0x138>
    c3a2:	bf00      	nop

0000c3a4 <__aeabi_i2d>:
    c3a4:	f090 0f00 	teq	r0, #0
    c3a8:	bf04      	itt	eq
    c3aa:	2100      	moveq	r1, #0
    c3ac:	4770      	bxeq	lr
    c3ae:	b530      	push	{r4, r5, lr}
    c3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c3bc:	bf48      	it	mi
    c3be:	4240      	negmi	r0, r0
    c3c0:	f04f 0100 	mov.w	r1, #0
    c3c4:	e73e      	b.n	c244 <__adddf3+0x138>
    c3c6:	bf00      	nop

0000c3c8 <__aeabi_f2d>:
    c3c8:	0042      	lsls	r2, r0, #1
    c3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c3ce:	ea4f 0131 	mov.w	r1, r1, rrx
    c3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c3d6:	bf1f      	itttt	ne
    c3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c3e4:	4770      	bxne	lr
    c3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c3ea:	bf08      	it	eq
    c3ec:	4770      	bxeq	lr
    c3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c3f2:	bf04      	itt	eq
    c3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c3f8:	4770      	bxeq	lr
    c3fa:	b530      	push	{r4, r5, lr}
    c3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
    c400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c408:	e71c      	b.n	c244 <__adddf3+0x138>
    c40a:	bf00      	nop

0000c40c <__aeabi_ul2d>:
    c40c:	ea50 0201 	orrs.w	r2, r0, r1
    c410:	bf08      	it	eq
    c412:	4770      	bxeq	lr
    c414:	b530      	push	{r4, r5, lr}
    c416:	f04f 0500 	mov.w	r5, #0
    c41a:	e00a      	b.n	c432 <__aeabi_l2d+0x16>

0000c41c <__aeabi_l2d>:
    c41c:	ea50 0201 	orrs.w	r2, r0, r1
    c420:	bf08      	it	eq
    c422:	4770      	bxeq	lr
    c424:	b530      	push	{r4, r5, lr}
    c426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c42a:	d502      	bpl.n	c432 <__aeabi_l2d+0x16>
    c42c:	4240      	negs	r0, r0
    c42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c432:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c436:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c43e:	f43f aed8 	beq.w	c1f2 <__adddf3+0xe6>
    c442:	f04f 0203 	mov.w	r2, #3
    c446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c44a:	bf18      	it	ne
    c44c:	3203      	addne	r2, #3
    c44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c452:	bf18      	it	ne
    c454:	3203      	addne	r2, #3
    c456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c45a:	f1c2 0320 	rsb	r3, r2, #32
    c45e:	fa00 fc03 	lsl.w	ip, r0, r3
    c462:	fa20 f002 	lsr.w	r0, r0, r2
    c466:	fa01 fe03 	lsl.w	lr, r1, r3
    c46a:	ea40 000e 	orr.w	r0, r0, lr
    c46e:	fa21 f102 	lsr.w	r1, r1, r2
    c472:	4414      	add	r4, r2
    c474:	e6bd      	b.n	c1f2 <__adddf3+0xe6>
    c476:	bf00      	nop

0000c478 <__aeabi_d2f>:
    c478:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c47c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c480:	bf24      	itt	cs
    c482:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c486:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c48a:	d90d      	bls.n	c4a8 <__aeabi_d2f+0x30>
    c48c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c490:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c494:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c498:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c49c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c4a0:	bf08      	it	eq
    c4a2:	f020 0001 	biceq.w	r0, r0, #1
    c4a6:	4770      	bx	lr
    c4a8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c4ac:	d121      	bne.n	c4f2 <__aeabi_d2f+0x7a>
    c4ae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c4b2:	bfbc      	itt	lt
    c4b4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c4b8:	4770      	bxlt	lr
    c4ba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c4be:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c4c2:	f1c2 0218 	rsb	r2, r2, #24
    c4c6:	f1c2 0c20 	rsb	ip, r2, #32
    c4ca:	fa10 f30c 	lsls.w	r3, r0, ip
    c4ce:	fa20 f002 	lsr.w	r0, r0, r2
    c4d2:	bf18      	it	ne
    c4d4:	f040 0001 	orrne.w	r0, r0, #1
    c4d8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c4dc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c4e0:	fa03 fc0c 	lsl.w	ip, r3, ip
    c4e4:	ea40 000c 	orr.w	r0, r0, ip
    c4e8:	fa23 f302 	lsr.w	r3, r3, r2
    c4ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c4f0:	e7cc      	b.n	c48c <__aeabi_d2f+0x14>
    c4f2:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c4f6:	d107      	bne.n	c508 <__aeabi_d2f+0x90>
    c4f8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c4fc:	bf1e      	ittt	ne
    c4fe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c502:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c506:	4770      	bxne	lr
    c508:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c50c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c510:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c514:	4770      	bx	lr
    c516:	bf00      	nop

0000c518 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    c518:	b082      	sub	sp, #8
    c51a:	4603      	mov	r3, r0
    c51c:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
    c520:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c524:	2b00      	cmp	r3, #0
    c526:	db0c      	blt.n	c542 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c528:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c52c:	f003 021f 	and.w	r2, r3, #31
    c530:	4905      	ldr	r1, [pc, #20]	; (c548 <__NVIC_EnableIRQ+0x30>)
    c532:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c536:	095b      	lsrs	r3, r3, #5
    c538:	2001      	movs	r0, #1
    c53a:	fa00 f202 	lsl.w	r2, r0, r2
    c53e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
    c542:	bf00      	nop
    c544:	b002      	add	sp, #8
    c546:	4770      	bx	lr
    c548:	e000e100 	.word	0xe000e100

0000c54c <am_adc_isr>:
// ADC Interrupt Service Routine (ISR)
//
//*****************************************************************************
void
am_adc_isr(void)
{
    c54c:	b500      	push	{lr}
    c54e:	b087      	sub	sp, #28
    uint32_t ui32IntStatus;

    //
    // Clear timer 3 interrupt.
    //
    am_hal_adc_interrupt_status(g_ADCHandle, &ui32IntStatus, true);
    c550:	4b21      	ldr	r3, [pc, #132]	; (c5d8 <am_adc_isr+0x8c>)
    c552:	681b      	ldr	r3, [r3, #0]
    c554:	a905      	add	r1, sp, #20
    c556:	2201      	movs	r2, #1
    c558:	4618      	mov	r0, r3
    c55a:	f001 fd09 	bl	df70 <am_hal_adc_interrupt_status>
    am_hal_adc_interrupt_clear(g_ADCHandle, ui32IntStatus);
    c55e:	4b1e      	ldr	r3, [pc, #120]	; (c5d8 <am_adc_isr+0x8c>)
    c560:	681b      	ldr	r3, [r3, #0]
    c562:	9a05      	ldr	r2, [sp, #20]
    c564:	4611      	mov	r1, r2
    c566:	4618      	mov	r0, r3
    c568:	f001 fd26 	bl	dfb8 <am_hal_adc_interrupt_clear>

    //
    // Toggle LED 3.
    //
    am_devices_led_toggle(am_bsp_psLEDs, 3);
    c56c:	2103      	movs	r1, #3
    c56e:	481b      	ldr	r0, [pc, #108]	; (c5dc <am_adc_isr+0x90>)
    c570:	f000 fb9d 	bl	ccae <am_devices_led_toggle>
  uint32_t      ui32Slot;
} am_hal_adc_sample_t;

#endif

    uint32_t ui32NumSamples = 1;
    c574:	2301      	movs	r3, #1
    c576:	9304      	str	r3, [sp, #16]

#elif 1
    //
    // Emtpy the FIFO, we'll just look at the last one read.
    //
    while ( AM_HAL_ADC_FIFO_COUNT(ADC->FIFO) )
    c578:	e01e      	b.n	c5b8 <am_adc_isr+0x6c>
    {
      ui32NumSamples = 1;
    c57a:	2301      	movs	r3, #1
    c57c:	9304      	str	r3, [sp, #16]
      am_hal_adc_samples_read(g_ADCHandle, true, NULL, &ui32NumSamples, &sSample);
    c57e:	4b16      	ldr	r3, [pc, #88]	; (c5d8 <am_adc_isr+0x8c>)
    c580:	6818      	ldr	r0, [r3, #0]
    c582:	aa04      	add	r2, sp, #16
    c584:	ab02      	add	r3, sp, #8
    c586:	9300      	str	r3, [sp, #0]
    c588:	4613      	mov	r3, r2
    c58a:	2200      	movs	r2, #0
    c58c:	2101      	movs	r1, #1
    c58e:	f001 fd23 	bl	dfd8 <am_hal_adc_samples_read>
      
      //
      // Determine which slot it came from?
      //
      if (sSample.ui32Slot == 5 )
    c592:	9b03      	ldr	r3, [sp, #12]
    c594:	2b05      	cmp	r3, #5
    c596:	d108      	bne.n	c5aa <am_adc_isr+0x5e>
      {
        //
        // The returned ADC sample is for the battery voltage divider.
        //
        g_ui16ADCVDD_code = AM_HAL_ADC_FIFO_SAMPLE(sSample.ui32Sample);
    c598:	9b02      	ldr	r3, [sp, #8]
    c59a:	099b      	lsrs	r3, r3, #6
    c59c:	b29b      	uxth	r3, r3
    c59e:	f3c3 030d 	ubfx	r3, r3, #0, #14
    c5a2:	b29a      	uxth	r2, r3
    c5a4:	4b0e      	ldr	r3, [pc, #56]	; (c5e0 <am_adc_isr+0x94>)
    c5a6:	801a      	strh	r2, [r3, #0]
    c5a8:	e006      	b.n	c5b8 <am_adc_isr+0x6c>
      {
        //
        // The returned ADC sample is for the temperature sensor.
        // We need the integer part in the low 16-bits.
        //
        g_ui16ADCTEMP_code = sSample.ui32Sample & 0xFFC0;
    c5aa:	9b02      	ldr	r3, [sp, #8]
    c5ac:	b29b      	uxth	r3, r3
    c5ae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    c5b2:	b29a      	uxth	r2, r3
    c5b4:	4b0b      	ldr	r3, [pc, #44]	; (c5e4 <am_adc_isr+0x98>)
    c5b6:	801a      	strh	r2, [r3, #0]
    while ( AM_HAL_ADC_FIFO_COUNT(ADC->FIFO) )
    c5b8:	4b0b      	ldr	r3, [pc, #44]	; (c5e8 <am_adc_isr+0x9c>)
    c5ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    c5bc:	0d1b      	lsrs	r3, r3, #20
    c5be:	b2db      	uxtb	r3, r3
    c5c0:	2b00      	cmp	r3, #0
    c5c2:	d1da      	bne.n	c57a <am_adc_isr+0x2e>
#endif

    //
    // Signal interrupt arrival to base level.
    //
    g_ui32SampleCount++;
    c5c4:	4b09      	ldr	r3, [pc, #36]	; (c5ec <am_adc_isr+0xa0>)
    c5c6:	681b      	ldr	r3, [r3, #0]
    c5c8:	3301      	adds	r3, #1
    c5ca:	4a08      	ldr	r2, [pc, #32]	; (c5ec <am_adc_isr+0xa0>)
    c5cc:	6013      	str	r3, [r2, #0]
}
    c5ce:	bf00      	nop
    c5d0:	b007      	add	sp, #28
    c5d2:	f85d fb04 	ldr.w	pc, [sp], #4
    c5d6:	bf00      	nop
    c5d8:	10001050 	.word	0x10001050
    c5dc:	1000100c 	.word	0x1000100c
    c5e0:	10001058 	.word	0x10001058
    c5e4:	1000105a 	.word	0x1000105a
    c5e8:	50010000 	.word	0x50010000
    c5ec:	10001054 	.word	0x10001054

0000c5f0 <adc_init>:
// ADC INIT Function
//
//*****************************************************************************
void
adc_init(void)
{
    c5f0:	b500      	push	{lr}
    c5f2:	b083      	sub	sp, #12
    am_hal_adc_slot_config_t sSlotCfg;

    //
    // Initialize the ADC and get the handle.
    //
    if ( AM_HAL_STATUS_SUCCESS != am_hal_adc_initialize(0, &g_ADCHandle) )
    c5f4:	4948      	ldr	r1, [pc, #288]	; (c718 <adc_init+0x128>)
    c5f6:	2000      	movs	r0, #0
    c5f8:	f001 fb54 	bl	dca4 <am_hal_adc_initialize>
    c5fc:	4603      	mov	r3, r0
    c5fe:	2b00      	cmp	r3, #0
    c600:	d002      	beq.n	c608 <adc_init+0x18>
    {
        am_util_stdio_printf("Error - reservation of the ADC instance failed.\n");
    c602:	4846      	ldr	r0, [pc, #280]	; (c71c <adc_init+0x12c>)
    c604:	f001 faae 	bl	db64 <am_util_stdio_printf>
    }

    //
    // Power on the ADC.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_power_control(g_ADCHandle,
    c608:	4b43      	ldr	r3, [pc, #268]	; (c718 <adc_init+0x128>)
    c60a:	681b      	ldr	r3, [r3, #0]
    c60c:	2200      	movs	r2, #0
    c60e:	2100      	movs	r1, #0
    c610:	4618      	mov	r0, r3
    c612:	f001 fd51 	bl	e0b8 <am_hal_adc_power_control>
    c616:	4603      	mov	r3, r0
    c618:	2b00      	cmp	r3, #0
    c61a:	d002      	beq.n	c622 <adc_init+0x32>
                                                          AM_HAL_SYSCTRL_WAKE,
                                                          false) )
    {
        am_util_stdio_printf("Error - ADC power on failed.\n");
    c61c:	4840      	ldr	r0, [pc, #256]	; (c720 <adc_init+0x130>)
    c61e:	f001 faa1 	bl	db64 <am_util_stdio_printf>
    }

    //
    // Configure the ADC.
    //
    if ( am_hal_adc_configure(g_ADCHandle, (am_hal_adc_config_t*)&g_sADC_Cfg) != AM_HAL_STATUS_SUCCESS )
    c622:	4b3d      	ldr	r3, [pc, #244]	; (c718 <adc_init+0x128>)
    c624:	681b      	ldr	r3, [r3, #0]
    c626:	493f      	ldr	r1, [pc, #252]	; (c724 <adc_init+0x134>)
    c628:	4618      	mov	r0, r3
    c62a:	f001 fb8d 	bl	dd48 <am_hal_adc_configure>
    c62e:	4603      	mov	r3, r0
    c630:	2b00      	cmp	r3, #0
    c632:	d002      	beq.n	c63a <adc_init+0x4a>
    {
        am_util_stdio_printf("Error - configuring ADC failed.\n");
    c634:	483c      	ldr	r0, [pc, #240]	; (c728 <adc_init+0x138>)
    c636:	f001 fa95 	bl	db64 <am_util_stdio_printf>
    }

    sSlotCfg.bEnabled       = false;
    c63a:	2300      	movs	r3, #0
    c63c:	f88d 3004 	strb.w	r3, [sp, #4]
    sSlotCfg.bWindowCompare = false;
    c640:	2300      	movs	r3, #0
    c642:	f88d 3003 	strb.w	r3, [sp, #3]
    sSlotCfg.eChannel       = AM_HAL_ADC_SLOT_CHSEL_SE0;    // 0
    c646:	2300      	movs	r3, #0
    c648:	f88d 3002 	strb.w	r3, [sp, #2]
    sSlotCfg.eMeasToAvg     = AM_HAL_ADC_SLOT_AVG_1;        // 0
    c64c:	2300      	movs	r3, #0
    c64e:	f88d 3000 	strb.w	r3, [sp]
    sSlotCfg.ePrecisionMode = AM_HAL_ADC_SLOT_14BIT;        // 0
    c652:	2300      	movs	r3, #0
    c654:	f88d 3001 	strb.w	r3, [sp, #1]

    am_hal_adc_configure_slot(g_ADCHandle, 0, &sSlotCfg);   // Unused slot
    c658:	4b2f      	ldr	r3, [pc, #188]	; (c718 <adc_init+0x128>)
    c65a:	681b      	ldr	r3, [r3, #0]
    c65c:	466a      	mov	r2, sp
    c65e:	2100      	movs	r1, #0
    c660:	4618      	mov	r0, r3
    c662:	f001 fbad 	bl	ddc0 <am_hal_adc_configure_slot>
    am_hal_adc_configure_slot(g_ADCHandle, 1, &sSlotCfg);   // Unused slot
    c666:	4b2c      	ldr	r3, [pc, #176]	; (c718 <adc_init+0x128>)
    c668:	681b      	ldr	r3, [r3, #0]
    c66a:	466a      	mov	r2, sp
    c66c:	2101      	movs	r1, #1
    c66e:	4618      	mov	r0, r3
    c670:	f001 fba6 	bl	ddc0 <am_hal_adc_configure_slot>
    am_hal_adc_configure_slot(g_ADCHandle, 2, &sSlotCfg);   // Unused slot
    c674:	4b28      	ldr	r3, [pc, #160]	; (c718 <adc_init+0x128>)
    c676:	681b      	ldr	r3, [r3, #0]
    c678:	466a      	mov	r2, sp
    c67a:	2102      	movs	r1, #2
    c67c:	4618      	mov	r0, r3
    c67e:	f001 fb9f 	bl	ddc0 <am_hal_adc_configure_slot>
    am_hal_adc_configure_slot(g_ADCHandle, 3, &sSlotCfg);   // Unused slot
    c682:	4b25      	ldr	r3, [pc, #148]	; (c718 <adc_init+0x128>)
    c684:	681b      	ldr	r3, [r3, #0]
    c686:	466a      	mov	r2, sp
    c688:	2103      	movs	r1, #3
    c68a:	4618      	mov	r0, r3
    c68c:	f001 fb98 	bl	ddc0 <am_hal_adc_configure_slot>
    am_hal_adc_configure_slot(g_ADCHandle, 4, &sSlotCfg);   // Unused slot
    c690:	4b21      	ldr	r3, [pc, #132]	; (c718 <adc_init+0x128>)
    c692:	681b      	ldr	r3, [r3, #0]
    c694:	466a      	mov	r2, sp
    c696:	2104      	movs	r1, #4
    c698:	4618      	mov	r0, r3
    c69a:	f001 fb91 	bl	ddc0 <am_hal_adc_configure_slot>
    am_hal_adc_configure_slot(g_ADCHandle, 6, &sSlotCfg);   // Unused slot
    c69e:	4b1e      	ldr	r3, [pc, #120]	; (c718 <adc_init+0x128>)
    c6a0:	681b      	ldr	r3, [r3, #0]
    c6a2:	466a      	mov	r2, sp
    c6a4:	2106      	movs	r1, #6
    c6a6:	4618      	mov	r0, r3
    c6a8:	f001 fb8a 	bl	ddc0 <am_hal_adc_configure_slot>

    sSlotCfg.bEnabled       = true;
    c6ac:	2301      	movs	r3, #1
    c6ae:	f88d 3004 	strb.w	r3, [sp, #4]
    sSlotCfg.bWindowCompare = true;
    c6b2:	2301      	movs	r3, #1
    c6b4:	f88d 3003 	strb.w	r3, [sp, #3]
    sSlotCfg.eChannel       = AM_HAL_ADC_SLOT_CHSEL_BATT;
    c6b8:	230d      	movs	r3, #13
    c6ba:	f88d 3002 	strb.w	r3, [sp, #2]
    sSlotCfg.eMeasToAvg     = AM_HAL_ADC_SLOT_AVG_1;
    c6be:	2300      	movs	r3, #0
    c6c0:	f88d 3000 	strb.w	r3, [sp]
    sSlotCfg.ePrecisionMode = AM_HAL_ADC_SLOT_14BIT;
    c6c4:	2300      	movs	r3, #0
    c6c6:	f88d 3001 	strb.w	r3, [sp, #1]
    am_hal_adc_configure_slot(g_ADCHandle, 5, &sSlotCfg);   // BATT
    c6ca:	4b13      	ldr	r3, [pc, #76]	; (c718 <adc_init+0x128>)
    c6cc:	681b      	ldr	r3, [r3, #0]
    c6ce:	466a      	mov	r2, sp
    c6d0:	2105      	movs	r1, #5
    c6d2:	4618      	mov	r0, r3
    c6d4:	f001 fb74 	bl	ddc0 <am_hal_adc_configure_slot>

    sSlotCfg.bEnabled       = true;
    c6d8:	2301      	movs	r3, #1
    c6da:	f88d 3004 	strb.w	r3, [sp, #4]
    sSlotCfg.bWindowCompare = true;
    c6de:	2301      	movs	r3, #1
    c6e0:	f88d 3003 	strb.w	r3, [sp, #3]
    sSlotCfg.eChannel       = AM_HAL_ADC_SLOT_CHSEL_TEMP;
    c6e4:	230c      	movs	r3, #12
    c6e6:	f88d 3002 	strb.w	r3, [sp, #2]
    sSlotCfg.eMeasToAvg     = AM_HAL_ADC_SLOT_AVG_1;
    c6ea:	2300      	movs	r3, #0
    c6ec:	f88d 3000 	strb.w	r3, [sp]
    sSlotCfg.ePrecisionMode = AM_HAL_ADC_SLOT_10BIT;
    c6f0:	2302      	movs	r3, #2
    c6f2:	f88d 3001 	strb.w	r3, [sp, #1]
    am_hal_adc_configure_slot(g_ADCHandle, 7, &sSlotCfg);   // TEMP
    c6f6:	4b08      	ldr	r3, [pc, #32]	; (c718 <adc_init+0x128>)
    c6f8:	681b      	ldr	r3, [r3, #0]
    c6fa:	466a      	mov	r2, sp
    c6fc:	2107      	movs	r1, #7
    c6fe:	4618      	mov	r0, r3
    c700:	f001 fb5e 	bl	ddc0 <am_hal_adc_configure_slot>

    //
    // Enable the ADC.
    //
    am_hal_adc_enable(g_ADCHandle);
    c704:	4b04      	ldr	r3, [pc, #16]	; (c718 <adc_init+0x128>)
    c706:	681b      	ldr	r3, [r3, #0]
    c708:	4618      	mov	r0, r3
    c70a:	f001 fbff 	bl	df0c <am_hal_adc_enable>
}
    c70e:	bf00      	nop
    c710:	b003      	add	sp, #12
    c712:	f85d fb04 	ldr.w	pc, [sp], #4
    c716:	bf00      	nop
    c718:	10001050 	.word	0x10001050
    c71c:	0000f1c4 	.word	0x0000f1c4
    c720:	0000f1f8 	.word	0x0000f1f8
    c724:	0000f464 	.word	0x0000f464
    c728:	0000f218 	.word	0x0000f218

0000c72c <timer_init>:
// Enable the ADC INIT TIMER 3A function and set for 0.5 second period.
//
//*****************************************************************************
static void
timer_init(void)
{
    c72c:	b500      	push	{lr}
    c72e:	b083      	sub	sp, #12
//
// Only CTIMER 3 supports the ADC.
//
#define TIMERNUM    3
    uint32_t ui32Period = 2000; // Set for 2 second (2000ms) period
    c730:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    c734:	9301      	str	r3, [sp, #4]

    //
    // LFRC has to be turned on for this example because we are running this
    // timer off of the LFRC.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_LFRC_START, 0);
    c736:	2100      	movs	r1, #0
    c738:	2002      	movs	r0, #2
    c73a:	f001 fecf 	bl	e4dc <am_hal_clkgen_control>

    //
    // Set up timer 3A so start by clearing it.
    //
    am_hal_ctimer_clear(TIMERNUM, AM_HAL_CTIMER_TIMERA);
    c73e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c742:	2003      	movs	r0, #3
    c744:	f001 fff0 	bl	e728 <am_hal_ctimer_clear>

    //
    // Configure the timer to count 32Hz LFRC clocks but don't start it yet.
    //
    am_hal_ctimer_config(TIMERNUM, &g_sTimer3);
    c748:	490e      	ldr	r1, [pc, #56]	; (c784 <timer_init+0x58>)
    c74a:	2003      	movs	r0, #3
    c74c:	f001 ff80 	bl	e650 <am_hal_ctimer_config>

    //
    // Compute CMPR value needed for desired period based on a 32HZ clock.
    //
    ui32Period = ui32Period * 32 / 1000;
    c750:	9b01      	ldr	r3, [sp, #4]
    c752:	015b      	lsls	r3, r3, #5
    c754:	4a0c      	ldr	r2, [pc, #48]	; (c788 <timer_init+0x5c>)
    c756:	fba2 2303 	umull	r2, r3, r2, r3
    c75a:	099b      	lsrs	r3, r3, #6
    c75c:	9301      	str	r3, [sp, #4]
    am_hal_ctimer_period_set(TIMERNUM, AM_HAL_CTIMER_TIMERA,
    c75e:	9b01      	ldr	r3, [sp, #4]
    c760:	085b      	lsrs	r3, r3, #1
    c762:	9a01      	ldr	r2, [sp, #4]
    c764:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c768:	2003      	movs	r0, #3
    c76a:	f001 fff3 	bl	e754 <am_hal_ctimer_period_set>
#endif

    //
    // Set up timer 3A as the trigger source for the ADC.
    //
    am_hal_ctimer_adc_trigger_enable();
    c76e:	f002 f84b 	bl	e808 <am_hal_ctimer_adc_trigger_enable>
#endif

    //
    // Start timer 3A.
    //
    am_hal_ctimer_start(TIMERNUM, AM_HAL_CTIMER_TIMERA);
    c772:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c776:	2003      	movs	r0, #3
    c778:	f001 ffa8 	bl	e6cc <am_hal_ctimer_start>
} // timer_init()
    c77c:	bf00      	nop
    c77e:	b003      	add	sp, #12
    c780:	f85d fb04 	ldr.w	pc, [sp], #4
    c784:	10001000 	.word	0x10001000
    c788:	10624dd3 	.word	0x10624dd3

0000c78c <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
    c78c:	b500      	push	{lr}
    c78e:	b093      	sub	sp, #76	; 0x4c
    bool  bMeasured;
    float fTempF;
    int32_t i32BaseLevelCount;
    const float fReferenceVoltage = 1.5;
    c790:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    c794:	9310      	str	r3, [sp, #64]	; 0x40
    uint32_t ui32Retval;

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c796:	2100      	movs	r1, #0
    c798:	2000      	movs	r0, #0
    c79a:	f001 fe9f 	bl	e4dc <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c79e:	48ab      	ldr	r0, [pc, #684]	; (ca4c <main+0x2c0>)
    c7a0:	f001 fcf4 	bl	e18c <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c7a4:	f001 fd16 	bl	e1d4 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    c7a8:	f001 fa3c 	bl	dc24 <am_bsp_low_power_init>

    //
    // Initialize device drivers for the LEDs on the board.
    //
    am_devices_led_array_init(am_bsp_psLEDs, AM_BSP_NUM_LEDS);
    c7ac:	2105      	movs	r1, #5
    c7ae:	48a8      	ldr	r0, [pc, #672]	; (ca50 <main+0x2c4>)
    c7b0:	f000 f9e6 	bl	cb80 <am_devices_led_array_init>

    //
    // Configure the button pin.
    //
    am_hal_gpio_pinconfig(AM_BSP_GPIO_BUTTON0, g_AM_BSP_GPIO_BUTTON0);
    c7b4:	4ba7      	ldr	r3, [pc, #668]	; (ca54 <main+0x2c8>)
    c7b6:	6819      	ldr	r1, [r3, #0]
    c7b8:	2010      	movs	r0, #16
    c7ba:	f002 f887 	bl	e8cc <am_hal_gpio_pinconfig>

    //
    // Initialize the printf interface for ITM output
    //
    am_bsp_itm_printf_enable();
    c7be:	f001 fa51 	bl	dc64 <am_bsp_itm_printf_enable>

    //
    // Clear the terminal screen, and print a quick message to show that we're
    // alive.
    //
    am_util_stdio_terminal_clear();
    c7c2:	f001 f9ef 	bl	dba4 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("ADC VBATT and Temperature Sensing Example.\n");
    c7c6:	48a4      	ldr	r0, [pc, #656]	; (ca58 <main+0x2cc>)
    c7c8:	f001 f9cc 	bl	db64 <am_util_stdio_printf>

    //
    // Enable floating point.
    //
    am_hal_sysctrl_fpu_enable();
    c7cc:	f002 fc88 	bl	f0e0 <am_hal_sysctrl_fpu_enable>
    am_hal_sysctrl_fpu_stacking_enable(true);
    c7d0:	2001      	movs	r0, #1
    c7d2:	f002 fc8d 	bl	f0f0 <am_hal_sysctrl_fpu_stacking_enable>

    //
    // Initialize the ADC.
    //
    adc_init();
    c7d6:	f7ff ff0b 	bl	c5f0 <adc_init>

    //
    // Initialize CTIMER 3A to trigger the ADC every 0.5 seconds.
    //
    timer_init();
    c7da:	f7ff ffa7 	bl	c72c <timer_init>

    //
    // Print out ctimer initial register state.
    //
    am_util_stdio_printf("\n");
    c7de:	489f      	ldr	r0, [pc, #636]	; (ca5c <main+0x2d0>)
    c7e0:	f001 f9c0 	bl	db64 <am_util_stdio_printf>
    am_util_stdio_printf("CTIMER3=0x%08X @ 0x%08X\n",
    c7e4:	4b9e      	ldr	r3, [pc, #632]	; (ca60 <main+0x2d4>)
    c7e6:	681b      	ldr	r3, [r3, #0]
    c7e8:	4a9d      	ldr	r2, [pc, #628]	; (ca60 <main+0x2d4>)
    c7ea:	4619      	mov	r1, r3
    c7ec:	489d      	ldr	r0, [pc, #628]	; (ca64 <main+0x2d8>)
    c7ee:	f001 f9b9 	bl	db64 <am_util_stdio_printf>
                         AM_REGVAL(CTIMERADDRn(CTIMER, 3, TMR0)),
                         CTIMERADDRn(CTIMER, 3, TMR0));
    am_util_stdio_printf("CTIMER3=0x%08X @ 0x%08X\n",
    c7f2:	4b9d      	ldr	r3, [pc, #628]	; (ca68 <main+0x2dc>)
    c7f4:	681b      	ldr	r3, [r3, #0]
    c7f6:	4a9c      	ldr	r2, [pc, #624]	; (ca68 <main+0x2dc>)
    c7f8:	4619      	mov	r1, r3
    c7fa:	489a      	ldr	r0, [pc, #616]	; (ca64 <main+0x2d8>)
    c7fc:	f001 f9b2 	bl	db64 <am_util_stdio_printf>
                         AM_REGVAL(CTIMERADDRn(CTIMER, 3, CMPRA0)),
                         CTIMERADDRn(CTIMER, 3, CMPRA0));
    am_util_stdio_printf("CTIMER3=0x%08X @ 0x%08X\n",
    c800:	4b9a      	ldr	r3, [pc, #616]	; (ca6c <main+0x2e0>)
    c802:	681b      	ldr	r3, [r3, #0]
    c804:	4a99      	ldr	r2, [pc, #612]	; (ca6c <main+0x2e0>)
    c806:	4619      	mov	r1, r3
    c808:	4896      	ldr	r0, [pc, #600]	; (ca64 <main+0x2d8>)
    c80a:	f001 f9ab 	bl	db64 <am_util_stdio_printf>
                         AM_REGVAL(CTIMERADDRn(CTIMER, 3, CMPRB0)),
                         CTIMERADDRn(CTIMER, 3, CMPRB0));
    am_util_stdio_printf("CTIMER3=0x%08X @ 0x%08X\n",
    c80e:	4b98      	ldr	r3, [pc, #608]	; (ca70 <main+0x2e4>)
    c810:	681b      	ldr	r3, [r3, #0]
    c812:	4a97      	ldr	r2, [pc, #604]	; (ca70 <main+0x2e4>)
    c814:	4619      	mov	r1, r3
    c816:	4893      	ldr	r0, [pc, #588]	; (ca64 <main+0x2d8>)
    c818:	f001 f9a4 	bl	db64 <am_util_stdio_printf>
                         CTIMERADDRn(CTIMER, 3, CTRL0));

    //
    // Print out ADC initial register state.
    //
    am_util_stdio_printf("\n");
    c81c:	488f      	ldr	r0, [pc, #572]	; (ca5c <main+0x2d0>)
    c81e:	f001 f9a1 	bl	db64 <am_util_stdio_printf>
    am_util_stdio_printf("ADC REGISTERS @ 0x%08X\n", (uint32_t)REG_ADC_BASEADDR);
    c822:	4994      	ldr	r1, [pc, #592]	; (ca74 <main+0x2e8>)
    c824:	4894      	ldr	r0, [pc, #592]	; (ca78 <main+0x2ec>)
    c826:	f001 f99d 	bl	db64 <am_util_stdio_printf>
    am_util_stdio_printf("ADC CFG   = 0x%08X\n", ADC->CFG);
    c82a:	4b92      	ldr	r3, [pc, #584]	; (ca74 <main+0x2e8>)
    c82c:	681b      	ldr	r3, [r3, #0]
    c82e:	4619      	mov	r1, r3
    c830:	4892      	ldr	r0, [pc, #584]	; (ca7c <main+0x2f0>)
    c832:	f001 f997 	bl	db64 <am_util_stdio_printf>
    am_util_stdio_printf("ADC SLOT0 = 0x%08X\n", ADC->SL0CFG);
    c836:	4b8f      	ldr	r3, [pc, #572]	; (ca74 <main+0x2e8>)
    c838:	68db      	ldr	r3, [r3, #12]
    c83a:	4619      	mov	r1, r3
    c83c:	4890      	ldr	r0, [pc, #576]	; (ca80 <main+0x2f4>)
    c83e:	f001 f991 	bl	db64 <am_util_stdio_printf>
    am_util_stdio_printf("ADC SLOT1 = 0x%08X\n", ADC->SL1CFG);
    c842:	4b8c      	ldr	r3, [pc, #560]	; (ca74 <main+0x2e8>)
    c844:	691b      	ldr	r3, [r3, #16]
    c846:	4619      	mov	r1, r3
    c848:	488e      	ldr	r0, [pc, #568]	; (ca84 <main+0x2f8>)
    c84a:	f001 f98b 	bl	db64 <am_util_stdio_printf>
    am_util_stdio_printf("ADC SLOT2 = 0x%08X\n", ADC->SL2CFG);
    c84e:	4b89      	ldr	r3, [pc, #548]	; (ca74 <main+0x2e8>)
    c850:	695b      	ldr	r3, [r3, #20]
    c852:	4619      	mov	r1, r3
    c854:	488c      	ldr	r0, [pc, #560]	; (ca88 <main+0x2fc>)
    c856:	f001 f985 	bl	db64 <am_util_stdio_printf>
    am_util_stdio_printf("ADC SLOT3 = 0x%08X\n", ADC->SL3CFG);
    c85a:	4b86      	ldr	r3, [pc, #536]	; (ca74 <main+0x2e8>)
    c85c:	699b      	ldr	r3, [r3, #24]
    c85e:	4619      	mov	r1, r3
    c860:	488a      	ldr	r0, [pc, #552]	; (ca8c <main+0x300>)
    c862:	f001 f97f 	bl	db64 <am_util_stdio_printf>
    am_util_stdio_printf("ADC SLOT4 = 0x%08X\n", ADC->SL4CFG);
    c866:	4b83      	ldr	r3, [pc, #524]	; (ca74 <main+0x2e8>)
    c868:	69db      	ldr	r3, [r3, #28]
    c86a:	4619      	mov	r1, r3
    c86c:	4888      	ldr	r0, [pc, #544]	; (ca90 <main+0x304>)
    c86e:	f001 f979 	bl	db64 <am_util_stdio_printf>
    am_util_stdio_printf("ADC SLOT5 = 0x%08X\n", ADC->SL5CFG);
    c872:	4b80      	ldr	r3, [pc, #512]	; (ca74 <main+0x2e8>)
    c874:	6a1b      	ldr	r3, [r3, #32]
    c876:	4619      	mov	r1, r3
    c878:	4886      	ldr	r0, [pc, #536]	; (ca94 <main+0x308>)
    c87a:	f001 f973 	bl	db64 <am_util_stdio_printf>
    am_util_stdio_printf("ADC SLOT6 = 0x%08X\n", ADC->SL6CFG);
    c87e:	4b7d      	ldr	r3, [pc, #500]	; (ca74 <main+0x2e8>)
    c880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c882:	4619      	mov	r1, r3
    c884:	4884      	ldr	r0, [pc, #528]	; (ca98 <main+0x30c>)
    c886:	f001 f96d 	bl	db64 <am_util_stdio_printf>
    am_util_stdio_printf("ADC SLOT7 = 0x%08X\n", ADC->SL7CFG);
    c88a:	4b7a      	ldr	r3, [pc, #488]	; (ca74 <main+0x2e8>)
    c88c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c88e:	4619      	mov	r1, r3
    c890:	4882      	ldr	r0, [pc, #520]	; (ca9c <main+0x310>)
    c892:	f001 f967 	bl	db64 <am_util_stdio_printf>

    //
    // Print out the temperature trim values as recorded in OTP.
    //
    fTrims[0] = fTrims[1] = fTrims[2] = 0.0F;
    c896:	f04f 0300 	mov.w	r3, #0
    c89a:	9308      	str	r3, [sp, #32]
    c89c:	9b08      	ldr	r3, [sp, #32]
    c89e:	9307      	str	r3, [sp, #28]
    c8a0:	9b07      	ldr	r3, [sp, #28]
    c8a2:	9306      	str	r3, [sp, #24]
    fTrims[3] = -123.456f;
    c8a4:	4b7e      	ldr	r3, [pc, #504]	; (caa0 <main+0x314>)
    c8a6:	9309      	str	r3, [sp, #36]	; 0x24
    am_hal_adc_control(g_ADCHandle, AM_HAL_ADC_REQ_TEMP_TRIMS_GET, fTrims);
    c8a8:	4b7e      	ldr	r3, [pc, #504]	; (caa4 <main+0x318>)
    c8aa:	681b      	ldr	r3, [r3, #0]
    c8ac:	aa06      	add	r2, sp, #24
    c8ae:	2102      	movs	r1, #2
    c8b0:	4618      	mov	r0, r3
    c8b2:	f001 fabf 	bl	de34 <am_hal_adc_control>
    bMeasured = fTrims[3] ? true : false;
    c8b6:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
    c8ba:	eef5 7a40 	vcmp.f32	s15, #0.0
    c8be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c8c2:	bf14      	ite	ne
    c8c4:	2301      	movne	r3, #1
    c8c6:	2300      	moveq	r3, #0
    c8c8:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
    am_util_stdio_printf("\n");
    c8cc:	4863      	ldr	r0, [pc, #396]	; (ca5c <main+0x2d0>)
    c8ce:	f001 f949 	bl	db64 <am_util_stdio_printf>
    am_util_stdio_printf("TRIMMED TEMP    = %.3f\n", fTrims[0]);
    c8d2:	9b06      	ldr	r3, [sp, #24]
    c8d4:	4618      	mov	r0, r3
    c8d6:	f7ff fd77 	bl	c3c8 <__aeabi_f2d>
    c8da:	4602      	mov	r2, r0
    c8dc:	460b      	mov	r3, r1
    c8de:	4872      	ldr	r0, [pc, #456]	; (caa8 <main+0x31c>)
    c8e0:	f001 f940 	bl	db64 <am_util_stdio_printf>
    am_util_stdio_printf("TRIMMED VOLTAGE = %.3f\n", fTrims[1]);
    c8e4:	9b07      	ldr	r3, [sp, #28]
    c8e6:	4618      	mov	r0, r3
    c8e8:	f7ff fd6e 	bl	c3c8 <__aeabi_f2d>
    c8ec:	4602      	mov	r2, r0
    c8ee:	460b      	mov	r3, r1
    c8f0:	486e      	ldr	r0, [pc, #440]	; (caac <main+0x320>)
    c8f2:	f001 f937 	bl	db64 <am_util_stdio_printf>
    am_util_stdio_printf("TRIMMED Offset  = %.3f\n", fTrims[2]);
    c8f6:	9b08      	ldr	r3, [sp, #32]
    c8f8:	4618      	mov	r0, r3
    c8fa:	f7ff fd65 	bl	c3c8 <__aeabi_f2d>
    c8fe:	4602      	mov	r2, r0
    c900:	460b      	mov	r3, r1
    c902:	486b      	ldr	r0, [pc, #428]	; (cab0 <main+0x324>)
    c904:	f001 f92e 	bl	db64 <am_util_stdio_printf>
    am_util_stdio_printf("Note - these trim values are '%s' values.\n",
    c908:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
    c90c:	2b00      	cmp	r3, #0
    c90e:	d001      	beq.n	c914 <main+0x188>
    c910:	4b68      	ldr	r3, [pc, #416]	; (cab4 <main+0x328>)
    c912:	e000      	b.n	c916 <main+0x18a>
    c914:	4b68      	ldr	r3, [pc, #416]	; (cab8 <main+0x32c>)
    c916:	4619      	mov	r1, r3
    c918:	4868      	ldr	r0, [pc, #416]	; (cabc <main+0x330>)
    c91a:	f001 f923 	bl	db64 <am_util_stdio_printf>
                         bMeasured ? "calibrated" : "uncalibrated default");
    am_util_stdio_printf("\n");
    c91e:	484f      	ldr	r0, [pc, #316]	; (ca5c <main+0x2d0>)
    c920:	f001 f920 	bl	db64 <am_util_stdio_printf>

    //
    // Enable the ADC interrupt in the NVIC.
    //
    NVIC_EnableIRQ(ADC_IRQn);
    c924:	2012      	movs	r0, #18
    c926:	f7ff fdf7 	bl	c518 <__NVIC_EnableIRQ>
    am_hal_interrupt_master_enable();
    c92a:	f002 f97f 	bl	ec2c <am_hal_interrupt_master_enable>

    //
    // Enable the ADC interrupts in the ADC.
    //
    am_hal_adc_interrupt_enable(g_ADCHandle, AM_HAL_ADC_INT_WCINC       |
    c92e:	4b5d      	ldr	r3, [pc, #372]	; (caa4 <main+0x318>)
    c930:	681b      	ldr	r3, [r3, #0]
    c932:	213f      	movs	r1, #63	; 0x3f
    c934:	4618      	mov	r0, r3
    c936:	f001 fb07 	bl	df48 <am_hal_adc_interrupt_enable>
                                             AM_HAL_ADC_INT_CNVCMP);

    //
    // Reset the sample count which will be incremented by the ISR.
    //
    g_ui32SampleCount = 0;
    c93a:	4b61      	ldr	r3, [pc, #388]	; (cac0 <main+0x334>)
    c93c:	2200      	movs	r2, #0
    c93e:	601a      	str	r2, [r3, #0]

    //
    // Kick Start Timer 3 with an ADC software trigger in REPEAT used.
    //
    am_hal_adc_sw_trigger(g_ADCHandle);
    c940:	4b58      	ldr	r3, [pc, #352]	; (caa4 <main+0x318>)
    c942:	681b      	ldr	r3, [r3, #0]
    c944:	4618      	mov	r0, r3
    c946:	f001 fba5 	bl	e094 <am_hal_adc_sw_trigger>

    //
    // Track buffer depth for progress messages.
    //
    i32BaseLevelCount = g_ui32SampleCount;
    c94a:	4b5d      	ldr	r3, [pc, #372]	; (cac0 <main+0x334>)
    c94c:	681b      	ldr	r3, [r3, #0]
    c94e:	9311      	str	r3, [sp, #68]	; 0x44
    while (1)
    {
        //
        // Print the battery voltage and temperature for each interrupt
        //
        if (g_ui32SampleCount > i32BaseLevelCount)
    c950:	4b5b      	ldr	r3, [pc, #364]	; (cac0 <main+0x334>)
    c952:	681a      	ldr	r2, [r3, #0]
    c954:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c956:	429a      	cmp	r2, r3
    c958:	d96c      	bls.n	ca34 <main+0x2a8>
        {
            i32BaseLevelCount = g_ui32SampleCount;
    c95a:	4b59      	ldr	r3, [pc, #356]	; (cac0 <main+0x334>)
    c95c:	681b      	ldr	r3, [r3, #0]
    c95e:	9311      	str	r3, [sp, #68]	; 0x44

            //
            // Compute the voltage divider output.
            //
            fVBATT = ((float)g_ui16ADCVDD_code) * 3.0f * fReferenceVoltage / (1024.0f / 64.0f);
    c960:	4b58      	ldr	r3, [pc, #352]	; (cac4 <main+0x338>)
    c962:	881b      	ldrh	r3, [r3, #0]
    c964:	ee07 3a90 	vmov	s15, r3
    c968:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c96c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
    c970:	ee27 7a87 	vmul.f32	s14, s15, s14
    c974:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
    c978:	ee27 7a27 	vmul.f32	s14, s14, s15
    c97c:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
    c980:	eec7 7a26 	vdiv.f32	s15, s14, s13
    c984:	edcd 7a0e 	vstr	s15, [sp, #56]	; 0x38

            //
            // Print the voltage divider output.
            //
            am_util_stdio_printf("VBATT = <%.3f> (0x%04X) ",
    c988:	980e      	ldr	r0, [sp, #56]	; 0x38
    c98a:	f7ff fd1d 	bl	c3c8 <__aeabi_f2d>
    c98e:	4602      	mov	r2, r0
    c990:	460b      	mov	r3, r1
    c992:	494c      	ldr	r1, [pc, #304]	; (cac4 <main+0x338>)
    c994:	8809      	ldrh	r1, [r1, #0]
    c996:	9100      	str	r1, [sp, #0]
    c998:	484b      	ldr	r0, [pc, #300]	; (cac8 <main+0x33c>)
    c99a:	f001 f8e3 	bl	db64 <am_util_stdio_printf>
            // Convert and scale the temperature.
            // Temperatures are in Fahrenheit range -40 to 225 degrees.
            // Voltage range is 0.825V to 1.283V
            // First get the ADC voltage corresponding to temperature.
            //
            fADCTempVolts = ((float)g_ui16ADCTEMP_code) * fReferenceVoltage / (1024.0f * 64.0f);
    c99e:	4b4b      	ldr	r3, [pc, #300]	; (cacc <main+0x340>)
    c9a0:	881b      	ldrh	r3, [r3, #0]
    c9a2:	ee07 3a90 	vmov	s15, r3
    c9a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    c9aa:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
    c9ae:	ee27 7a27 	vmul.f32	s14, s14, s15
    c9b2:	eddf 6a47 	vldr	s13, [pc, #284]	; cad0 <main+0x344>
    c9b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
    c9ba:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34

            //
            // Now call the HAL routine to convert volts to degrees Celsius.
            //
            float fVT[3];
            fVT[0] = fADCTempVolts;
    c9be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c9c0:	9303      	str	r3, [sp, #12]
            fVT[1] = 0.0f;
    c9c2:	f04f 0300 	mov.w	r3, #0
    c9c6:	9304      	str	r3, [sp, #16]
            fVT[2] = -123.456;
    c9c8:	4b35      	ldr	r3, [pc, #212]	; (caa0 <main+0x314>)
    c9ca:	9305      	str	r3, [sp, #20]
//          fADCTempDegreesC = am_hal_adc_volts_to_celsius(fADCTempVolts);
            ui32Retval = am_hal_adc_control(g_ADCHandle, AM_HAL_ADC_REQ_TEMP_CELSIUS_GET, fVT);
    c9cc:	4b35      	ldr	r3, [pc, #212]	; (caa4 <main+0x318>)
    c9ce:	681b      	ldr	r3, [r3, #0]
    c9d0:	aa03      	add	r2, sp, #12
    c9d2:	2101      	movs	r1, #1
    c9d4:	4618      	mov	r0, r3
    c9d6:	f001 fa2d 	bl	de34 <am_hal_adc_control>
    c9da:	900c      	str	r0, [sp, #48]	; 0x30
            if ( ui32Retval == AM_HAL_STATUS_SUCCESS )
    c9dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c9de:	2b00      	cmp	r3, #0
    c9e0:	d121      	bne.n	ca26 <main+0x29a>
            {
                fADCTempDegreesC = fVT[1];  // Get the temperature
    c9e2:	9b04      	ldr	r3, [sp, #16]
    c9e4:	930b      	str	r3, [sp, #44]	; 0x2c

                //
                // print the temperature value in Celsius.
                //
                am_util_stdio_printf("TEMP = %.2f C (0x%04X) ",
    c9e6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c9e8:	f7ff fcee 	bl	c3c8 <__aeabi_f2d>
    c9ec:	4602      	mov	r2, r0
    c9ee:	460b      	mov	r3, r1
    c9f0:	4936      	ldr	r1, [pc, #216]	; (cacc <main+0x340>)
    c9f2:	8809      	ldrh	r1, [r1, #0]
    c9f4:	9100      	str	r1, [sp, #0]
    c9f6:	4837      	ldr	r0, [pc, #220]	; (cad4 <main+0x348>)
    c9f8:	f001 f8b4 	bl	db64 <am_util_stdio_printf>
                                     fADCTempDegreesC, g_ui16ADCTEMP_code);

                //
                // Print the temperature value in Fahrenheit.
                //
                fTempF = (fADCTempDegreesC * (180.0f / 100.0f)) + 32.0f;
    c9fc:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
    ca00:	ed9f 7a35 	vldr	s14, [pc, #212]	; cad8 <main+0x34c>
    ca04:	ee67 7a87 	vmul.f32	s15, s15, s14
    ca08:	ed9f 7a34 	vldr	s14, [pc, #208]	; cadc <main+0x350>
    ca0c:	ee77 7a87 	vadd.f32	s15, s15, s14
    ca10:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
                am_util_stdio_printf(" %.2f F", fTempF);
    ca14:	980a      	ldr	r0, [sp, #40]	; 0x28
    ca16:	f7ff fcd7 	bl	c3c8 <__aeabi_f2d>
    ca1a:	4602      	mov	r2, r0
    ca1c:	460b      	mov	r3, r1
    ca1e:	4830      	ldr	r0, [pc, #192]	; (cae0 <main+0x354>)
    ca20:	f001 f8a0 	bl	db64 <am_util_stdio_printf>
    ca24:	e003      	b.n	ca2e <main+0x2a2>
            }
            else
            {
                am_util_stdio_printf("Error: am_haL_adc_control returned %d\n", ui32Retval);
    ca26:	990c      	ldr	r1, [sp, #48]	; 0x30
    ca28:	482e      	ldr	r0, [pc, #184]	; (cae4 <main+0x358>)
    ca2a:	f001 f89b 	bl	db64 <am_util_stdio_printf>
                am_util_stdio_printf("\n");
                am_hal_adc_batt_load_disable();
                am_devices_led_off(am_bsp_psLEDs, 2);
            }
#else
            am_util_stdio_printf("\n");
    ca2e:	480b      	ldr	r0, [pc, #44]	; (ca5c <main+0x2d0>)
    ca30:	f001 f898 	bl	db64 <am_util_stdio_printf>
        }

        //
        // Sleep here until the next ADC interrupt comes along.
        //
        am_devices_led_off(am_bsp_psLEDs, 0);
    ca34:	2100      	movs	r1, #0
    ca36:	4806      	ldr	r0, [pc, #24]	; (ca50 <main+0x2c4>)
    ca38:	f000 f8fc 	bl	cc34 <am_devices_led_off>
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    ca3c:	2001      	movs	r0, #1
    ca3e:	f002 fb17 	bl	f070 <am_hal_sysctrl_sleep>
        am_devices_led_on(am_bsp_psLEDs, 0);
    ca42:	2100      	movs	r1, #0
    ca44:	4802      	ldr	r0, [pc, #8]	; (ca50 <main+0x2c4>)
    ca46:	f000 f8bb 	bl	cbc0 <am_devices_led_on>
        if (g_ui32SampleCount > i32BaseLevelCount)
    ca4a:	e781      	b.n	c950 <main+0x1c4>
    ca4c:	0000f474 	.word	0x0000f474
    ca50:	1000100c 	.word	0x1000100c
    ca54:	0000f46c 	.word	0x0000f46c
    ca58:	0000f23c 	.word	0x0000f23c
    ca5c:	0000f268 	.word	0x0000f268
    ca60:	40008060 	.word	0x40008060
    ca64:	0000f26c 	.word	0x0000f26c
    ca68:	40008064 	.word	0x40008064
    ca6c:	40008068 	.word	0x40008068
    ca70:	4000806c 	.word	0x4000806c
    ca74:	50010000 	.word	0x50010000
    ca78:	0000f288 	.word	0x0000f288
    ca7c:	0000f2a0 	.word	0x0000f2a0
    ca80:	0000f2b4 	.word	0x0000f2b4
    ca84:	0000f2c8 	.word	0x0000f2c8
    ca88:	0000f2dc 	.word	0x0000f2dc
    ca8c:	0000f2f0 	.word	0x0000f2f0
    ca90:	0000f304 	.word	0x0000f304
    ca94:	0000f318 	.word	0x0000f318
    ca98:	0000f32c 	.word	0x0000f32c
    ca9c:	0000f340 	.word	0x0000f340
    caa0:	c2f6e979 	.word	0xc2f6e979
    caa4:	10001050 	.word	0x10001050
    caa8:	0000f354 	.word	0x0000f354
    caac:	0000f36c 	.word	0x0000f36c
    cab0:	0000f384 	.word	0x0000f384
    cab4:	0000f39c 	.word	0x0000f39c
    cab8:	0000f3a8 	.word	0x0000f3a8
    cabc:	0000f3c0 	.word	0x0000f3c0
    cac0:	10001054 	.word	0x10001054
    cac4:	10001058 	.word	0x10001058
    cac8:	0000f3ec 	.word	0x0000f3ec
    cacc:	1000105a 	.word	0x1000105a
    cad0:	47800000 	.word	0x47800000
    cad4:	0000f408 	.word	0x0000f408
    cad8:	3fe66666 	.word	0x3fe66666
    cadc:	42000000 	.word	0x42000000
    cae0:	0000f420 	.word	0x0000f420
    cae4:	0000f428 	.word	0x0000f428

0000cae8 <am_devices_led_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_init(am_devices_led_t *psLED)
{
    cae8:	b500      	push	{lr}
    caea:	b083      	sub	sp, #12
    caec:	9001      	str	r0, [sp, #4]
    if ( (psLED == NULL)    ||
    caee:	9b01      	ldr	r3, [sp, #4]
    caf0:	2b00      	cmp	r3, #0
    caf2:	d03d      	beq.n	cb70 <am_devices_led_init+0x88>
         (psLED->ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    caf4:	9b01      	ldr	r3, [sp, #4]
    caf6:	681b      	ldr	r3, [r3, #0]
    if ( (psLED == NULL)    ||
    caf8:	2b31      	cmp	r3, #49	; 0x31
    cafa:	d839      	bhi.n	cb70 <am_devices_led_init+0x88>
#else
#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
    cafc:	9b01      	ldr	r3, [sp, #4]
    cafe:	685b      	ldr	r3, [r3, #4]
    cb00:	f003 0302 	and.w	r3, r3, #2
    cb04:	2b00      	cmp	r3, #0
    cb06:	d019      	beq.n	cb3c <am_devices_led_init+0x54>
    {
        //
        // Configure the pin as a push-pull GPIO output.
        //
        am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_OUTPUT);
    cb08:	9b01      	ldr	r3, [sp, #4]
    cb0a:	681b      	ldr	r3, [r3, #0]
    cb0c:	4a1a      	ldr	r2, [pc, #104]	; (cb78 <am_devices_led_init+0x90>)
    cb0e:	6811      	ldr	r1, [r2, #0]
    cb10:	4618      	mov	r0, r3
    cb12:	f001 fedb 	bl	e8cc <am_hal_gpio_pinconfig>
        // state.  Note that for Apollo3 GPIOs in push-pull mode, the output
        // enable, normally a tri-state control, instead functions as an enable
        // for Fast GPIO. Its state does not matter on previous chips, so for
        // normal GPIO usage on Apollo3, it must be disabled.
        //
        am_hal_gpio_state_write(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    cb16:	9b01      	ldr	r3, [sp, #4]
    cb18:	681b      	ldr	r3, [r3, #0]
    cb1a:	2103      	movs	r1, #3
    cb1c:	4618      	mov	r0, r3
    cb1e:	f002 f841 	bl	eba4 <am_hal_gpio_state_write>
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    cb22:	9b01      	ldr	r3, [sp, #4]
    cb24:	681a      	ldr	r2, [r3, #0]
                                psLED->ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    cb26:	9b01      	ldr	r3, [sp, #4]
    cb28:	685b      	ldr	r3, [r3, #4]
                                AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    cb2a:	b2db      	uxtb	r3, r3
    cb2c:	f003 0301 	and.w	r3, r3, #1
    cb30:	b2db      	uxtb	r3, r3
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    cb32:	4619      	mov	r1, r3
    cb34:	4610      	mov	r0, r2
    cb36:	f002 f835 	bl	eba4 <am_hal_gpio_state_write>
    cb3a:	e01a      	b.n	cb72 <am_devices_led_init+0x8a>
    else
    {
        //
        // Configure the pin as a tri-state GPIO.
        //
        am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_TRISTATE);
    cb3c:	9b01      	ldr	r3, [sp, #4]
    cb3e:	681b      	ldr	r3, [r3, #0]
    cb40:	4a0e      	ldr	r2, [pc, #56]	; (cb7c <am_devices_led_init+0x94>)
    cb42:	6811      	ldr	r1, [r2, #0]
    cb44:	4618      	mov	r0, r3
    cb46:	f001 fec1 	bl	e8cc <am_hal_gpio_pinconfig>

        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_state_write(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    cb4a:	9b01      	ldr	r3, [sp, #4]
    cb4c:	681b      	ldr	r3, [r3, #0]
    cb4e:	2103      	movs	r1, #3
    cb50:	4618      	mov	r0, r3
    cb52:	f002 f827 	bl	eba4 <am_hal_gpio_state_write>
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    cb56:	9b01      	ldr	r3, [sp, #4]
    cb58:	681a      	ldr	r2, [r3, #0]
                                psLED->ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    cb5a:	9b01      	ldr	r3, [sp, #4]
    cb5c:	685b      	ldr	r3, [r3, #4]
                                AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    cb5e:	b2db      	uxtb	r3, r3
    cb60:	f003 0301 	and.w	r3, r3, #1
    cb64:	b2db      	uxtb	r3, r3
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    cb66:	4619      	mov	r1, r3
    cb68:	4610      	mov	r0, r2
    cb6a:	f002 f81b 	bl	eba4 <am_hal_gpio_state_write>
    cb6e:	e000      	b.n	cb72 <am_devices_led_init+0x8a>
        return;
    cb70:	bf00      	nop
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
#endif // AM_APOLLO3_GPIO
#endif
}
    cb72:	b003      	add	sp, #12
    cb74:	f85d fb04 	ldr.w	pc, [sp], #4
    cb78:	0000f47c 	.word	0x0000f47c
    cb7c:	0000f480 	.word	0x0000f480

0000cb80 <am_devices_led_array_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_array_init(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
    cb80:	b500      	push	{lr}
    cb82:	b085      	sub	sp, #20
    cb84:	9001      	str	r0, [sp, #4]
    cb86:	9100      	str	r1, [sp, #0]
    uint32_t i;

    if ( (psLEDs == NULL)                       ||
    cb88:	9b01      	ldr	r3, [sp, #4]
    cb8a:	2b00      	cmp	r3, #0
    cb8c:	d014      	beq.n	cbb8 <am_devices_led_array_init+0x38>
    cb8e:	9b00      	ldr	r3, [sp, #0]
    cb90:	2b1f      	cmp	r3, #31
    cb92:	d811      	bhi.n	cbb8 <am_devices_led_array_init+0x38>
    }

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
    cb94:	2300      	movs	r3, #0
    cb96:	9303      	str	r3, [sp, #12]
    cb98:	e009      	b.n	cbae <am_devices_led_array_init+0x2e>
    {
        am_devices_led_init(psLEDs + i);
    cb9a:	9b03      	ldr	r3, [sp, #12]
    cb9c:	00db      	lsls	r3, r3, #3
    cb9e:	9a01      	ldr	r2, [sp, #4]
    cba0:	4413      	add	r3, r2
    cba2:	4618      	mov	r0, r3
    cba4:	f7ff ffa0 	bl	cae8 <am_devices_led_init>
    for ( i = 0; i < ui32NumLEDs; i++ )
    cba8:	9b03      	ldr	r3, [sp, #12]
    cbaa:	3301      	adds	r3, #1
    cbac:	9303      	str	r3, [sp, #12]
    cbae:	9a03      	ldr	r2, [sp, #12]
    cbb0:	9b00      	ldr	r3, [sp, #0]
    cbb2:	429a      	cmp	r2, r3
    cbb4:	d3f1      	bcc.n	cb9a <am_devices_led_array_init+0x1a>
    cbb6:	e000      	b.n	cbba <am_devices_led_array_init+0x3a>
        return;
    cbb8:	bf00      	nop
    }
}
    cbba:	b005      	add	sp, #20
    cbbc:	f85d fb04 	ldr.w	pc, [sp], #4

0000cbc0 <am_devices_led_on>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_on(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    cbc0:	b500      	push	{lr}
    cbc2:	b083      	sub	sp, #12
    cbc4:	9001      	str	r0, [sp, #4]
    cbc6:	9100      	str	r1, [sp, #0]
    if ( (psLEDs == NULL)                       ||
    cbc8:	9b01      	ldr	r3, [sp, #4]
    cbca:	2b00      	cmp	r3, #0
    cbcc:	d02e      	beq.n	cc2c <am_devices_led_on+0x6c>
    cbce:	9b00      	ldr	r3, [sp, #0]
    cbd0:	2b1e      	cmp	r3, #30
    cbd2:	d82b      	bhi.n	cc2c <am_devices_led_on+0x6c>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    cbd4:	9b00      	ldr	r3, [sp, #0]
    cbd6:	00db      	lsls	r3, r3, #3
    cbd8:	9a01      	ldr	r2, [sp, #4]
    cbda:	4413      	add	r3, r2
    cbdc:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
    cbde:	2b31      	cmp	r3, #49	; 0x31
    cbe0:	d824      	bhi.n	cc2c <am_devices_led_on+0x6c>
#else
#if (1 == AM_APOLLO3_GPIO)
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    cbe2:	9b00      	ldr	r3, [sp, #0]
    cbe4:	00db      	lsls	r3, r3, #3
    cbe6:	9a01      	ldr	r2, [sp, #4]
    cbe8:	4413      	add	r3, r2
    cbea:	685b      	ldr	r3, [r3, #4]
    cbec:	f003 0302 	and.w	r3, r3, #2
    cbf0:	2b00      	cmp	r3, #0
    cbf2:	d011      	beq.n	cc18 <am_devices_led_on+0x58>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    cbf4:	9b00      	ldr	r3, [sp, #0]
    cbf6:	00db      	lsls	r3, r3, #3
    cbf8:	9a01      	ldr	r2, [sp, #4]
    cbfa:	4413      	add	r3, r2
    cbfc:	6818      	ldr	r0, [r3, #0]
                                psLEDs[ui32LEDNum].ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    cbfe:	9b00      	ldr	r3, [sp, #0]
    cc00:	00db      	lsls	r3, r3, #3
    cc02:	9a01      	ldr	r2, [sp, #4]
    cc04:	4413      	add	r3, r2
    cc06:	685b      	ldr	r3, [r3, #4]
                                AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    cc08:	b2db      	uxtb	r3, r3
    cc0a:	f003 0301 	and.w	r3, r3, #1
    cc0e:	b2db      	uxtb	r3, r3
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    cc10:	4619      	mov	r1, r3
    cc12:	f001 ffc7 	bl	eba4 <am_hal_gpio_state_write>
    cc16:	e00a      	b.n	cc2e <am_devices_led_on+0x6e>
    else
    {
        //
        // Turn on the output driver for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    cc18:	9b00      	ldr	r3, [sp, #0]
    cc1a:	00db      	lsls	r3, r3, #3
    cc1c:	9a01      	ldr	r2, [sp, #4]
    cc1e:	4413      	add	r3, r2
    cc20:	681b      	ldr	r3, [r3, #0]
    cc22:	2104      	movs	r1, #4
    cc24:	4618      	mov	r0, r3
    cc26:	f001 ffbd 	bl	eba4 <am_hal_gpio_state_write>
    cc2a:	e000      	b.n	cc2e <am_devices_led_on+0x6e>
        return;
    cc2c:	bf00      	nop
        //
        am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
#endif // AM_APOLLO3_GPIO
#endif
}
    cc2e:	b003      	add	sp, #12
    cc30:	f85d fb04 	ldr.w	pc, [sp], #4

0000cc34 <am_devices_led_off>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_off(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    cc34:	b500      	push	{lr}
    cc36:	b083      	sub	sp, #12
    cc38:	9001      	str	r0, [sp, #4]
    cc3a:	9100      	str	r1, [sp, #0]
    if ( (psLEDs == NULL)                       ||
    cc3c:	9b01      	ldr	r3, [sp, #4]
    cc3e:	2b00      	cmp	r3, #0
    cc40:	d031      	beq.n	cca6 <am_devices_led_off+0x72>
    cc42:	9b00      	ldr	r3, [sp, #0]
    cc44:	2b1e      	cmp	r3, #30
    cc46:	d82e      	bhi.n	cca6 <am_devices_led_off+0x72>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    cc48:	9b00      	ldr	r3, [sp, #0]
    cc4a:	00db      	lsls	r3, r3, #3
    cc4c:	9a01      	ldr	r2, [sp, #4]
    cc4e:	4413      	add	r3, r2
    cc50:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
    cc52:	2b31      	cmp	r3, #49	; 0x31
    cc54:	d827      	bhi.n	cca6 <am_devices_led_off+0x72>
#else
#if (1 == AM_APOLLO3_GPIO)
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    cc56:	9b00      	ldr	r3, [sp, #0]
    cc58:	00db      	lsls	r3, r3, #3
    cc5a:	9a01      	ldr	r2, [sp, #4]
    cc5c:	4413      	add	r3, r2
    cc5e:	685b      	ldr	r3, [r3, #4]
    cc60:	f003 0302 	and.w	r3, r3, #2
    cc64:	2b00      	cmp	r3, #0
    cc66:	d014      	beq.n	cc92 <am_devices_led_off+0x5e>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    cc68:	9b00      	ldr	r3, [sp, #0]
    cc6a:	00db      	lsls	r3, r3, #3
    cc6c:	9a01      	ldr	r2, [sp, #4]
    cc6e:	4413      	add	r3, r2
    cc70:	6818      	ldr	r0, [r3, #0]
                                psLEDs[ui32LEDNum].ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    cc72:	9b00      	ldr	r3, [sp, #0]
    cc74:	00db      	lsls	r3, r3, #3
    cc76:	9a01      	ldr	r2, [sp, #4]
    cc78:	4413      	add	r3, r2
    cc7a:	685b      	ldr	r3, [r3, #4]
    cc7c:	f003 0301 	and.w	r3, r3, #1
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    cc80:	2b00      	cmp	r3, #0
    cc82:	bf0c      	ite	eq
    cc84:	2301      	moveq	r3, #1
    cc86:	2300      	movne	r3, #0
    cc88:	b2db      	uxtb	r3, r3
    cc8a:	4619      	mov	r1, r3
    cc8c:	f001 ff8a 	bl	eba4 <am_hal_gpio_state_write>
    cc90:	e00a      	b.n	cca8 <am_devices_led_off+0x74>
    else
    {
        //
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    cc92:	9b00      	ldr	r3, [sp, #0]
    cc94:	00db      	lsls	r3, r3, #3
    cc96:	9a01      	ldr	r2, [sp, #4]
    cc98:	4413      	add	r3, r2
    cc9a:	681b      	ldr	r3, [r3, #0]
    cc9c:	2103      	movs	r1, #3
    cc9e:	4618      	mov	r0, r3
    cca0:	f001 ff80 	bl	eba4 <am_hal_gpio_state_write>
    cca4:	e000      	b.n	cca8 <am_devices_led_off+0x74>
        return;
    cca6:	bf00      	nop
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
#endif // AM_APOLLO3_GPIO
#endif
}
    cca8:	b003      	add	sp, #12
    ccaa:	f85d fb04 	ldr.w	pc, [sp], #4

0000ccae <am_devices_led_toggle>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_toggle(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    ccae:	b500      	push	{lr}
    ccb0:	b085      	sub	sp, #20
    ccb2:	9001      	str	r0, [sp, #4]
    ccb4:	9100      	str	r1, [sp, #0]
    if ( (psLEDs == NULL)                       ||
    ccb6:	9b01      	ldr	r3, [sp, #4]
    ccb8:	2b00      	cmp	r3, #0
    ccba:	d041      	beq.n	cd40 <am_devices_led_toggle+0x92>
    ccbc:	9b00      	ldr	r3, [sp, #0]
    ccbe:	2b1e      	cmp	r3, #30
    ccc0:	d83e      	bhi.n	cd40 <am_devices_led_toggle+0x92>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    ccc2:	9b00      	ldr	r3, [sp, #0]
    ccc4:	00db      	lsls	r3, r3, #3
    ccc6:	9a01      	ldr	r2, [sp, #4]
    ccc8:	4413      	add	r3, r2
    ccca:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
    cccc:	2b31      	cmp	r3, #49	; 0x31
    ccce:	d837      	bhi.n	cd40 <am_devices_led_toggle+0x92>
#else
#if (1 == AM_APOLLO3_GPIO)
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    ccd0:	9b00      	ldr	r3, [sp, #0]
    ccd2:	00db      	lsls	r3, r3, #3
    ccd4:	9a01      	ldr	r2, [sp, #4]
    ccd6:	4413      	add	r3, r2
    ccd8:	685b      	ldr	r3, [r3, #4]
    ccda:	f003 0302 	and.w	r3, r3, #2
    ccde:	2b00      	cmp	r3, #0
    cce0:	d009      	beq.n	ccf6 <am_devices_led_toggle+0x48>
    {
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    cce2:	9b00      	ldr	r3, [sp, #0]
    cce4:	00db      	lsls	r3, r3, #3
    cce6:	9a01      	ldr	r2, [sp, #4]
    cce8:	4413      	add	r3, r2
    ccea:	681b      	ldr	r3, [r3, #0]
    ccec:	2102      	movs	r1, #2
    ccee:	4618      	mov	r0, r3
    ccf0:	f001 ff58 	bl	eba4 <am_hal_gpio_state_write>
    ccf4:	e025      	b.n	cd42 <am_devices_led_toggle+0x94>
        uint32_t ui32Ret, ui32Value;

        //
        // Check to see if the LED pin is enabled.
        //
        ui32Ret = am_hal_gpio_state_read(psLEDs[ui32LEDNum].ui32GPIONumber,
    ccf6:	9b00      	ldr	r3, [sp, #0]
    ccf8:	00db      	lsls	r3, r3, #3
    ccfa:	9a01      	ldr	r2, [sp, #4]
    ccfc:	4413      	add	r3, r2
    ccfe:	681b      	ldr	r3, [r3, #0]
    cd00:	aa02      	add	r2, sp, #8
    cd02:	2102      	movs	r1, #2
    cd04:	4618      	mov	r0, r3
    cd06:	f001 ff17 	bl	eb38 <am_hal_gpio_state_read>
    cd0a:	9003      	str	r0, [sp, #12]
                                         AM_HAL_GPIO_ENABLE_READ, &ui32Value);

        if ( ui32Ret == AM_HAL_STATUS_SUCCESS )
    cd0c:	9b03      	ldr	r3, [sp, #12]
    cd0e:	2b00      	cmp	r3, #0
    cd10:	d117      	bne.n	cd42 <am_devices_led_toggle+0x94>
        {
            if ( ui32Value )
    cd12:	9b02      	ldr	r3, [sp, #8]
    cd14:	2b00      	cmp	r3, #0
    cd16:	d009      	beq.n	cd2c <am_devices_led_toggle+0x7e>
            {
                //
                // If it was enabled, turn if off.
                //
                am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    cd18:	9b00      	ldr	r3, [sp, #0]
    cd1a:	00db      	lsls	r3, r3, #3
    cd1c:	9a01      	ldr	r2, [sp, #4]
    cd1e:	4413      	add	r3, r2
    cd20:	681b      	ldr	r3, [r3, #0]
    cd22:	2103      	movs	r1, #3
    cd24:	4618      	mov	r0, r3
    cd26:	f001 ff3d 	bl	eba4 <am_hal_gpio_state_write>
    cd2a:	e00a      	b.n	cd42 <am_devices_led_toggle+0x94>
            else
            {
                //
                // If it was not enabled, turn it on.
                //
                am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    cd2c:	9b00      	ldr	r3, [sp, #0]
    cd2e:	00db      	lsls	r3, r3, #3
    cd30:	9a01      	ldr	r2, [sp, #4]
    cd32:	4413      	add	r3, r2
    cd34:	681b      	ldr	r3, [r3, #0]
    cd36:	2104      	movs	r1, #4
    cd38:	4618      	mov	r0, r3
    cd3a:	f001 ff33 	bl	eba4 <am_hal_gpio_state_write>
    cd3e:	e000      	b.n	cd42 <am_devices_led_toggle+0x94>
        return;
    cd40:	bf00      	nop
            am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
        }
    }
#endif // AM_APOLLO3_GPIO
#endif
}
    cd42:	b005      	add	sp, #20
    cd44:	f85d fb04 	ldr.w	pc, [sp], #4

0000cd48 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    cd48:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    cd4a:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    cd4e:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    cd50:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    cd54:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    cd58:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    cd5c:	f000 f80a 	bl	cd74 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    cd60:	bd01      	pop	{r0, pc}
}
    cd62:	bf00      	nop
    cd64:	4618      	mov	r0, r3

0000cd66 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    cd66:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    cd68:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    cd6a:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    cd6c:	4770      	bx	lr
}
    cd6e:	bf00      	nop
    cd70:	4618      	mov	r0, r3
	...

0000cd74 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    cd74:	b500      	push	{lr}
    cd76:	b097      	sub	sp, #92	; 0x5c
    cd78:	9001      	str	r0, [sp, #4]
    volatile am_fault_t sFaultData;
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_t  sHalFaultData = {0};
#else
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    cd7a:	ab03      	add	r3, sp, #12
    cd7c:	2200      	movs	r2, #0
    cd7e:	601a      	str	r2, [r3, #0]
    cd80:	605a      	str	r2, [r3, #4]
    cd82:	609a      	str	r2, [r3, #8]
    cd84:	60da      	str	r2, [r3, #12]
    cd86:	611a      	str	r2, [r3, #16]
    cd88:	615a      	str	r2, [r3, #20]
#endif // if defined(AM_PART_APOLLO4)

    uint32_t u32Mask = 0;
    cd8a:	2300      	movs	r3, #0
    cd8c:	9315      	str	r3, [sp, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    cd8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cd90:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    cd92:	4b2e      	ldr	r3, [pc, #184]	; (ce4c <am_util_faultisr_collect_data+0xd8>)
    cd94:	681b      	ldr	r3, [r3, #0]
    cd96:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    cd98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    cd9a:	b2db      	uxtb	r3, r3
    cd9c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    cda0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    cda2:	0a1b      	lsrs	r3, r3, #8
    cda4:	b2db      	uxtb	r3, r3
    cda6:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    cdaa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    cdac:	0c1b      	lsrs	r3, r3, #16
    cdae:	b29b      	uxth	r3, r3
    cdb0:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    cdb4:	4b26      	ldr	r3, [pc, #152]	; (ce50 <am_util_faultisr_collect_data+0xdc>)
    cdb6:	681b      	ldr	r3, [r3, #0]
    cdb8:	9312      	str	r3, [sp, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    cdba:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
    cdbe:	b2db      	uxtb	r3, r3
    cdc0:	f003 0302 	and.w	r3, r3, #2
    cdc4:	2b00      	cmp	r3, #0
    cdc6:	d005      	beq.n	cdd4 <am_util_faultisr_collect_data+0x60>
    cdc8:	9901      	ldr	r1, [sp, #4]
    cdca:	2006      	movs	r0, #6
    cdcc:	f7ff ffcb 	bl	cd66 <getStackedReg>
    cdd0:	4603      	mov	r3, r0
    cdd2:	e001      	b.n	cdd8 <am_util_faultisr_collect_data+0x64>
    cdd4:	f04f 33ff 	mov.w	r3, #4294967295
    cdd8:	9311      	str	r3, [sp, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    cdda:	9901      	ldr	r1, [sp, #4]
    cddc:	2000      	movs	r0, #0
    cdde:	f7ff ffc2 	bl	cd66 <getStackedReg>
    cde2:	4603      	mov	r3, r0
    cde4:	9309      	str	r3, [sp, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    cde6:	9901      	ldr	r1, [sp, #4]
    cde8:	2001      	movs	r0, #1
    cdea:	f7ff ffbc 	bl	cd66 <getStackedReg>
    cdee:	4603      	mov	r3, r0
    cdf0:	930a      	str	r3, [sp, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    cdf2:	9901      	ldr	r1, [sp, #4]
    cdf4:	2002      	movs	r0, #2
    cdf6:	f7ff ffb6 	bl	cd66 <getStackedReg>
    cdfa:	4603      	mov	r3, r0
    cdfc:	930b      	str	r3, [sp, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    cdfe:	9901      	ldr	r1, [sp, #4]
    ce00:	2003      	movs	r0, #3
    ce02:	f7ff ffb0 	bl	cd66 <getStackedReg>
    ce06:	4603      	mov	r3, r0
    ce08:	930c      	str	r3, [sp, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    ce0a:	9901      	ldr	r1, [sp, #4]
    ce0c:	2004      	movs	r0, #4
    ce0e:	f7ff ffaa 	bl	cd66 <getStackedReg>
    ce12:	4603      	mov	r3, r0
    ce14:	930d      	str	r3, [sp, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    ce16:	9901      	ldr	r1, [sp, #4]
    ce18:	2005      	movs	r0, #5
    ce1a:	f7ff ffa4 	bl	cd66 <getStackedReg>
    ce1e:	4603      	mov	r3, r0
    ce20:	930e      	str	r3, [sp, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    ce22:	9901      	ldr	r1, [sp, #4]
    ce24:	2006      	movs	r0, #6
    ce26:	f7ff ff9e 	bl	cd66 <getStackedReg>
    ce2a:	4603      	mov	r3, r0
    ce2c:	930f      	str	r3, [sp, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    ce2e:	9901      	ldr	r1, [sp, #4]
    ce30:	2007      	movs	r0, #7
    ce32:	f7ff ff98 	bl	cd66 <getStackedReg>
    ce36:	4603      	mov	r3, r0
    ce38:	9310      	str	r3, [sp, #64]	; 0x40
    //
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_get(&sHalFaultData);
#else
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    ce3a:	ab03      	add	r3, sp, #12
    ce3c:	4619      	mov	r1, r3
    ce3e:	2002      	movs	r0, #2
    ce40:	f001 ff3c 	bl	ecbc <am_hal_mcuctrl_info_get>
      am_util_stdio_printf("   SYS Fault Address: 0x%08X\n", sHalFaultData.ui32SYS);
    }

#endif

    u32Mask = 0;
    ce44:	2300      	movs	r3, #0
    ce46:	9315      	str	r3, [sp, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    ce48:	e7fe      	b.n	ce48 <am_util_faultisr_collect_data+0xd4>
    ce4a:	bf00      	nop
    ce4c:	e000ed28 	.word	0xe000ed28
    ce50:	e000ed38 	.word	0xe000ed38

0000ce54 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    ce54:	b082      	sub	sp, #8
    ce56:	9001      	str	r0, [sp, #4]
    g_pfnCharPrint = pfnCharPrint;
    ce58:	4a02      	ldr	r2, [pc, #8]	; (ce64 <am_util_stdio_printf_init+0x10>)
    ce5a:	9b01      	ldr	r3, [sp, #4]
    ce5c:	6013      	str	r3, [r2, #0]
}
    ce5e:	bf00      	nop
    ce60:	b002      	add	sp, #8
    ce62:	4770      	bx	lr
    ce64:	1000105c 	.word	0x1000105c

0000ce68 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    ce68:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    ce6c:	b098      	sub	sp, #96	; 0x60
    ce6e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    ce72:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    ce76:	f04f 0000 	mov.w	r0, #0
    ce7a:	f04f 0100 	mov.w	r1, #0
    ce7e:	0018      	movs	r0, r3
    ce80:	2100      	movs	r1, #0
    ce82:	ea50 0301 	orrs.w	r3, r0, r1
    ce86:	f000 80b0 	beq.w	cfea <divu64_10+0x182>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    ce8a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    ce8e:	f04f 0400 	mov.w	r4, #0
    ce92:	f04f 0500 	mov.w	r5, #0
    ce96:	0854      	lsrs	r4, r2, #1
    ce98:	ea44 74c3 	orr.w	r4, r4, r3, lsl #31
    ce9c:	085d      	lsrs	r5, r3, #1
    ce9e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    cea2:	f04f 0000 	mov.w	r0, #0
    cea6:	f04f 0100 	mov.w	r1, #0
    ceaa:	0890      	lsrs	r0, r2, #2
    ceac:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
    ceb0:	0899      	lsrs	r1, r3, #2
    ceb2:	eb14 0a00 	adds.w	sl, r4, r0
    ceb6:	eb45 0b01 	adc.w	fp, r5, r1
    ceba:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
        q64 += (q64 >> 4);
    cebe:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cec2:	f04f 0000 	mov.w	r0, #0
    cec6:	f04f 0100 	mov.w	r1, #0
    ceca:	0910      	lsrs	r0, r2, #4
    cecc:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
    ced0:	0919      	lsrs	r1, r3, #4
    ced2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    ced6:	1814      	adds	r4, r2, r0
    ced8:	9402      	str	r4, [sp, #8]
    ceda:	414b      	adcs	r3, r1
    cedc:	9303      	str	r3, [sp, #12]
    cede:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    cee2:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 8);
    cee6:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    ceea:	f04f 0000 	mov.w	r0, #0
    ceee:	f04f 0100 	mov.w	r1, #0
    cef2:	0a10      	lsrs	r0, r2, #8
    cef4:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
    cef8:	0a19      	lsrs	r1, r3, #8
    cefa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cefe:	1814      	adds	r4, r2, r0
    cf00:	9404      	str	r4, [sp, #16]
    cf02:	414b      	adcs	r3, r1
    cf04:	9305      	str	r3, [sp, #20]
    cf06:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    cf0a:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 16);
    cf0e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cf12:	f04f 0000 	mov.w	r0, #0
    cf16:	f04f 0100 	mov.w	r1, #0
    cf1a:	0c10      	lsrs	r0, r2, #16
    cf1c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    cf20:	0c19      	lsrs	r1, r3, #16
    cf22:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cf26:	1814      	adds	r4, r2, r0
    cf28:	9406      	str	r4, [sp, #24]
    cf2a:	414b      	adcs	r3, r1
    cf2c:	9307      	str	r3, [sp, #28]
    cf2e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
    cf32:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 32);
    cf36:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cf3a:	f04f 0000 	mov.w	r0, #0
    cf3e:	f04f 0100 	mov.w	r1, #0
    cf42:	0018      	movs	r0, r3
    cf44:	2100      	movs	r1, #0
    cf46:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cf4a:	1814      	adds	r4, r2, r0
    cf4c:	9408      	str	r4, [sp, #32]
    cf4e:	414b      	adcs	r3, r1
    cf50:	9309      	str	r3, [sp, #36]	; 0x24
    cf52:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
    cf56:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 >>= 3;
    cf5a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    cf5e:	f04f 0200 	mov.w	r2, #0
    cf62:	f04f 0300 	mov.w	r3, #0
    cf66:	08c2      	lsrs	r2, r0, #3
    cf68:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    cf6c:	08cb      	lsrs	r3, r1, #3
    cf6e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
        r64 = ui64Val - q64*10;
    cf72:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
    cf76:	4622      	mov	r2, r4
    cf78:	462b      	mov	r3, r5
    cf7a:	f04f 0000 	mov.w	r0, #0
    cf7e:	f04f 0100 	mov.w	r1, #0
    cf82:	0099      	lsls	r1, r3, #2
    cf84:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
    cf88:	0090      	lsls	r0, r2, #2
    cf8a:	4602      	mov	r2, r0
    cf8c:	460b      	mov	r3, r1
    cf8e:	1916      	adds	r6, r2, r4
    cf90:	eb43 0705 	adc.w	r7, r3, r5
    cf94:	19b3      	adds	r3, r6, r6
    cf96:	930a      	str	r3, [sp, #40]	; 0x28
    cf98:	eb47 0307 	adc.w	r3, r7, r7
    cf9c:	930b      	str	r3, [sp, #44]	; 0x2c
    cf9e:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    cfa2:	4630      	mov	r0, r6
    cfa4:	4639      	mov	r1, r7
    cfa6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    cfaa:	1a14      	subs	r4, r2, r0
    cfac:	940c      	str	r4, [sp, #48]	; 0x30
    cfae:	eb63 0301 	sbc.w	r3, r3, r1
    cfb2:	930d      	str	r3, [sp, #52]	; 0x34
    cfb4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    cfb8:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
        return q64 + ((r64 + 6) >> 4);
    cfbc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    cfc0:	f112 0806 	adds.w	r8, r2, #6
    cfc4:	f143 0900 	adc.w	r9, r3, #0
    cfc8:	f04f 0200 	mov.w	r2, #0
    cfcc:	f04f 0300 	mov.w	r3, #0
    cfd0:	ea4f 1218 	mov.w	r2, r8, lsr #4
    cfd4:	ea42 7209 	orr.w	r2, r2, r9, lsl #28
    cfd8:	ea4f 1319 	mov.w	r3, r9, lsr #4
    cfdc:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    cfe0:	1814      	adds	r4, r2, r0
    cfe2:	9400      	str	r4, [sp, #0]
    cfe4:	414b      	adcs	r3, r1
    cfe6:	9301      	str	r3, [sp, #4]
    cfe8:	e02a      	b.n	d040 <divu64_10+0x1d8>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    cfea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cfec:	9317      	str	r3, [sp, #92]	; 0x5c
        q32 = (ui32Val>>1) + (ui32Val>>2);
    cfee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    cff0:	085a      	lsrs	r2, r3, #1
    cff2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    cff4:	089b      	lsrs	r3, r3, #2
    cff6:	4413      	add	r3, r2
    cff8:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 4);
    cffa:	9b16      	ldr	r3, [sp, #88]	; 0x58
    cffc:	091b      	lsrs	r3, r3, #4
    cffe:	9a16      	ldr	r2, [sp, #88]	; 0x58
    d000:	4413      	add	r3, r2
    d002:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 8);
    d004:	9b16      	ldr	r3, [sp, #88]	; 0x58
    d006:	0a1b      	lsrs	r3, r3, #8
    d008:	9a16      	ldr	r2, [sp, #88]	; 0x58
    d00a:	4413      	add	r3, r2
    d00c:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 16);
    d00e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    d010:	0c1b      	lsrs	r3, r3, #16
    d012:	9a16      	ldr	r2, [sp, #88]	; 0x58
    d014:	4413      	add	r3, r2
    d016:	9316      	str	r3, [sp, #88]	; 0x58
        q32 >>= 3;
    d018:	9b16      	ldr	r3, [sp, #88]	; 0x58
    d01a:	08db      	lsrs	r3, r3, #3
    d01c:	9316      	str	r3, [sp, #88]	; 0x58
        r32 = ui32Val - q32*10;
    d01e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    d020:	4613      	mov	r3, r2
    d022:	009b      	lsls	r3, r3, #2
    d024:	4413      	add	r3, r2
    d026:	005b      	lsls	r3, r3, #1
    d028:	461a      	mov	r2, r3
    d02a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    d02c:	1a9b      	subs	r3, r3, r2
    d02e:	9315      	str	r3, [sp, #84]	; 0x54
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    d030:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d032:	3306      	adds	r3, #6
    d034:	091a      	lsrs	r2, r3, #4
    d036:	9b16      	ldr	r3, [sp, #88]	; 0x58
    d038:	4413      	add	r3, r2
    d03a:	2200      	movs	r2, #0
    d03c:	9300      	str	r3, [sp, #0]
    d03e:	9201      	str	r2, [sp, #4]
    }
}
    d040:	e9dd 2300 	ldrd	r2, r3, [sp]
    d044:	4610      	mov	r0, r2
    d046:	4619      	mov	r1, r3
    d048:	b018      	add	sp, #96	; 0x60
    d04a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    d04e:	4770      	bx	lr

0000d050 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    d050:	b500      	push	{lr}
    d052:	b085      	sub	sp, #20
    d054:	e9cd 0100 	strd	r0, r1, [sp]
    int iNDigits = ui64Val ? 0 : 1;
    d058:	9a00      	ldr	r2, [sp, #0]
    d05a:	9b01      	ldr	r3, [sp, #4]
    d05c:	4313      	orrs	r3, r2
    d05e:	2b00      	cmp	r3, #0
    d060:	bf0c      	ite	eq
    d062:	2301      	moveq	r3, #1
    d064:	2300      	movne	r3, #0
    d066:	b2db      	uxtb	r3, r3
    d068:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    d06a:	e008      	b.n	d07e <ndigits_in_u64+0x2e>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    d06c:	e9dd 0100 	ldrd	r0, r1, [sp]
    d070:	f7ff fefa 	bl	ce68 <divu64_10>
    d074:	e9cd 0100 	strd	r0, r1, [sp]
        ++iNDigits;
    d078:	9b03      	ldr	r3, [sp, #12]
    d07a:	3301      	adds	r3, #1
    d07c:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    d07e:	e9dd 2300 	ldrd	r2, r3, [sp]
    d082:	4313      	orrs	r3, r2
    d084:	d1f2      	bne.n	d06c <ndigits_in_u64+0x1c>
    }

    return iNDigits;
    d086:	9b03      	ldr	r3, [sp, #12]
}
    d088:	4618      	mov	r0, r3
    d08a:	b005      	add	sp, #20
    d08c:	f85d fb04 	ldr.w	pc, [sp], #4

0000d090 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    d090:	b530      	push	{r4, r5, lr}
    d092:	b083      	sub	sp, #12
    d094:	e9cd 0100 	strd	r0, r1, [sp]
    if ( i64Val < 0 )
    d098:	e9dd 2300 	ldrd	r2, r3, [sp]
    d09c:	2b00      	cmp	r3, #0
    d09e:	da07      	bge.n	d0b0 <ndigits_in_i64+0x20>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    d0a0:	e9dd 2300 	ldrd	r2, r3, [sp]
    d0a4:	2100      	movs	r1, #0
    d0a6:	4254      	negs	r4, r2
    d0a8:	eb61 0503 	sbc.w	r5, r1, r3
    d0ac:	e9cd 4500 	strd	r4, r5, [sp]
    }

    return ndigits_in_u64((uint64_t) i64Val);
    d0b0:	e9dd 2300 	ldrd	r2, r3, [sp]
    d0b4:	4610      	mov	r0, r2
    d0b6:	4619      	mov	r1, r3
    d0b8:	f7ff ffca 	bl	d050 <ndigits_in_u64>
    d0bc:	4603      	mov	r3, r0
}
    d0be:	4618      	mov	r0, r3
    d0c0:	b003      	add	sp, #12
    d0c2:	bd30      	pop	{r4, r5, pc}

0000d0c4 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    d0c4:	b084      	sub	sp, #16
    d0c6:	e9cd 0100 	strd	r0, r1, [sp]
    int iDigits = ui64Val ? 0 : 1;
    d0ca:	9a00      	ldr	r2, [sp, #0]
    d0cc:	9b01      	ldr	r3, [sp, #4]
    d0ce:	4313      	orrs	r3, r2
    d0d0:	2b00      	cmp	r3, #0
    d0d2:	bf0c      	ite	eq
    d0d4:	2301      	moveq	r3, #1
    d0d6:	2300      	movne	r3, #0
    d0d8:	b2db      	uxtb	r3, r3
    d0da:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    d0dc:	e00e      	b.n	d0fc <ndigits_in_hex+0x38>
    {
        ui64Val >>= 4;
    d0de:	e9dd 0100 	ldrd	r0, r1, [sp]
    d0e2:	f04f 0200 	mov.w	r2, #0
    d0e6:	f04f 0300 	mov.w	r3, #0
    d0ea:	0902      	lsrs	r2, r0, #4
    d0ec:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    d0f0:	090b      	lsrs	r3, r1, #4
    d0f2:	e9cd 2300 	strd	r2, r3, [sp]
        ++iDigits;
    d0f6:	9b03      	ldr	r3, [sp, #12]
    d0f8:	3301      	adds	r3, #1
    d0fa:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    d0fc:	e9dd 2300 	ldrd	r2, r3, [sp]
    d100:	4313      	orrs	r3, r2
    d102:	d1ec      	bne.n	d0de <ndigits_in_hex+0x1a>
    }

    return iDigits;
    d104:	9b03      	ldr	r3, [sp, #12]
}
    d106:	4618      	mov	r0, r3
    d108:	b004      	add	sp, #16
    d10a:	4770      	bx	lr

0000d10c <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    d10c:	b086      	sub	sp, #24
    d10e:	9001      	str	r0, [sp, #4]
    d110:	9100      	str	r1, [sp, #0]
    bool bNeg = false;
    d112:	2300      	movs	r3, #0
    d114:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    d118:	2300      	movs	r3, #0
    d11a:	9304      	str	r3, [sp, #16]
    d11c:	2300      	movs	r3, #0
    d11e:	9303      	str	r3, [sp, #12]

    if ( *pcStr == '-')
    d120:	9b01      	ldr	r3, [sp, #4]
    d122:	781b      	ldrb	r3, [r3, #0]
    d124:	2b2d      	cmp	r3, #45	; 0x2d
    d126:	d11c      	bne.n	d162 <decstr_to_int+0x56>
    {
        bNeg = true;
    d128:	2301      	movs	r3, #1
    d12a:	f88d 3017 	strb.w	r3, [sp, #23]
        pcStr++;
    d12e:	9b01      	ldr	r3, [sp, #4]
    d130:	3301      	adds	r3, #1
    d132:	9301      	str	r3, [sp, #4]
        uCnt++;
    d134:	9b03      	ldr	r3, [sp, #12]
    d136:	3301      	adds	r3, #1
    d138:	9303      	str	r3, [sp, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d13a:	e012      	b.n	d162 <decstr_to_int+0x56>
    {
        ++uCnt;
    d13c:	9b03      	ldr	r3, [sp, #12]
    d13e:	3301      	adds	r3, #1
    d140:	9303      	str	r3, [sp, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    d142:	9a04      	ldr	r2, [sp, #16]
    d144:	4613      	mov	r3, r2
    d146:	009b      	lsls	r3, r3, #2
    d148:	4413      	add	r3, r2
    d14a:	005b      	lsls	r3, r3, #1
    d14c:	9304      	str	r3, [sp, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    d14e:	9b01      	ldr	r3, [sp, #4]
    d150:	781b      	ldrb	r3, [r3, #0]
    d152:	461a      	mov	r2, r3
    d154:	9b04      	ldr	r3, [sp, #16]
    d156:	4413      	add	r3, r2
    d158:	3b30      	subs	r3, #48	; 0x30
    d15a:	9304      	str	r3, [sp, #16]
        pcStr++;
    d15c:	9b01      	ldr	r3, [sp, #4]
    d15e:	3301      	adds	r3, #1
    d160:	9301      	str	r3, [sp, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d162:	9b01      	ldr	r3, [sp, #4]
    d164:	781b      	ldrb	r3, [r3, #0]
    d166:	2b2f      	cmp	r3, #47	; 0x2f
    d168:	d903      	bls.n	d172 <decstr_to_int+0x66>
    d16a:	9b01      	ldr	r3, [sp, #4]
    d16c:	781b      	ldrb	r3, [r3, #0]
    d16e:	2b39      	cmp	r3, #57	; 0x39
    d170:	d9e4      	bls.n	d13c <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    d172:	9b00      	ldr	r3, [sp, #0]
    d174:	2b00      	cmp	r3, #0
    d176:	d002      	beq.n	d17e <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    d178:	9b00      	ldr	r3, [sp, #0]
    d17a:	9a03      	ldr	r2, [sp, #12]
    d17c:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    d17e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d182:	2b00      	cmp	r3, #0
    d184:	d002      	beq.n	d18c <decstr_to_int+0x80>
    d186:	9b04      	ldr	r3, [sp, #16]
    d188:	425b      	negs	r3, r3
    d18a:	e000      	b.n	d18e <decstr_to_int+0x82>
    d18c:	9b04      	ldr	r3, [sp, #16]
}
    d18e:	4618      	mov	r0, r3
    d190:	b006      	add	sp, #24
    d192:	4770      	bx	lr

0000d194 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    d194:	b500      	push	{lr}
    d196:	b091      	sub	sp, #68	; 0x44
    d198:	e9cd 0102 	strd	r0, r1, [sp, #8]
    d19c:	9201      	str	r2, [sp, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    d19e:	2300      	movs	r3, #0
    d1a0:	930f      	str	r3, [sp, #60]	; 0x3c
    d1a2:	2300      	movs	r3, #0
    d1a4:	930e      	str	r3, [sp, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    d1a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    d1aa:	f7ff fe5d 	bl	ce68 <divu64_10>
    d1ae:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    d1b2:	9902      	ldr	r1, [sp, #8]
    d1b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d1b6:	4613      	mov	r3, r2
    d1b8:	009b      	lsls	r3, r3, #2
    d1ba:	4413      	add	r3, r2
    d1bc:	005b      	lsls	r3, r3, #1
    d1be:	1acb      	subs	r3, r1, r3
    d1c0:	930b      	str	r3, [sp, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    d1c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d1c4:	b2da      	uxtb	r2, r3
    d1c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d1c8:	1c59      	adds	r1, r3, #1
    d1ca:	910f      	str	r1, [sp, #60]	; 0x3c
    d1cc:	3230      	adds	r2, #48	; 0x30
    d1ce:	b2d2      	uxtb	r2, r2
    d1d0:	3340      	adds	r3, #64	; 0x40
    d1d2:	446b      	add	r3, sp
    d1d4:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    d1d8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    d1dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
    } while ( ui64Val );
    d1e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    d1e4:	4313      	orrs	r3, r2
    d1e6:	d1de      	bne.n	d1a6 <uint64_to_str+0x12>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    d1e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d1ea:	930e      	str	r3, [sp, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    d1ec:	9b01      	ldr	r3, [sp, #4]
    d1ee:	2b00      	cmp	r3, #0
    d1f0:	d010      	beq.n	d214 <uint64_to_str+0x80>
    {
        while ( ix-- )
    d1f2:	e007      	b.n	d204 <uint64_to_str+0x70>
        {
            *pcBuf++ = tbuf[ix];
    d1f4:	9b01      	ldr	r3, [sp, #4]
    d1f6:	1c5a      	adds	r2, r3, #1
    d1f8:	9201      	str	r2, [sp, #4]
    d1fa:	a904      	add	r1, sp, #16
    d1fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    d1fe:	440a      	add	r2, r1
    d200:	7812      	ldrb	r2, [r2, #0]
    d202:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    d204:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d206:	1e5a      	subs	r2, r3, #1
    d208:	920f      	str	r2, [sp, #60]	; 0x3c
    d20a:	2b00      	cmp	r3, #0
    d20c:	d1f2      	bne.n	d1f4 <uint64_to_str+0x60>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    d20e:	9b01      	ldr	r3, [sp, #4]
    d210:	2200      	movs	r2, #0
    d212:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    d214:	9b0e      	ldr	r3, [sp, #56]	; 0x38
}
    d216:	4618      	mov	r0, r3
    d218:	b011      	add	sp, #68	; 0x44
    d21a:	f85d fb04 	ldr.w	pc, [sp], #4

0000d21e <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    d21e:	b08c      	sub	sp, #48	; 0x30
    d220:	e9cd 0102 	strd	r0, r1, [sp, #8]
    d224:	9201      	str	r2, [sp, #4]
    d226:	f88d 3003 	strb.w	r3, [sp, #3]
    int iNumDig, ix = 0;
    d22a:	2300      	movs	r3, #0
    d22c:	930b      	str	r3, [sp, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    d22e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    d232:	4313      	orrs	r3, r2
    d234:	d135      	bne.n	d2a2 <uint64_to_hexstr+0x84>
    {
        tbuf[ix++] = '0';   // Print a '0'
    d236:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d238:	1c5a      	adds	r2, r3, #1
    d23a:	920b      	str	r2, [sp, #44]	; 0x2c
    d23c:	3330      	adds	r3, #48	; 0x30
    d23e:	446b      	add	r3, sp
    d240:	2230      	movs	r2, #48	; 0x30
    d242:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    d246:	e02c      	b.n	d2a2 <uint64_to_hexstr+0x84>
    {
        cCh = ui64Val & 0xf;
    d248:	f89d 3008 	ldrb.w	r3, [sp, #8]
    d24c:	f003 030f 	and.w	r3, r3, #15
    d250:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    d254:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    d258:	2b09      	cmp	r3, #9
    d25a:	d90b      	bls.n	d274 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    d25c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d260:	2b00      	cmp	r3, #0
    d262:	d001      	beq.n	d268 <uint64_to_hexstr+0x4a>
    d264:	2227      	movs	r2, #39	; 0x27
    d266:	e000      	b.n	d26a <uint64_to_hexstr+0x4c>
    d268:	2207      	movs	r2, #7
    d26a:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    d26e:	4413      	add	r3, r2
    d270:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    d274:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d276:	1c5a      	adds	r2, r3, #1
    d278:	920b      	str	r2, [sp, #44]	; 0x2c
    d27a:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    d27e:	3230      	adds	r2, #48	; 0x30
    d280:	b2d2      	uxtb	r2, r2
    d282:	3330      	adds	r3, #48	; 0x30
    d284:	446b      	add	r3, sp
    d286:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    d28a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    d28e:	f04f 0200 	mov.w	r2, #0
    d292:	f04f 0300 	mov.w	r3, #0
    d296:	0902      	lsrs	r2, r0, #4
    d298:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    d29c:	090b      	lsrs	r3, r1, #4
    d29e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    while ( ui64Val )
    d2a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    d2a6:	4313      	orrs	r3, r2
    d2a8:	d1ce      	bne.n	d248 <uint64_to_hexstr+0x2a>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    d2aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d2ac:	9309      	str	r3, [sp, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    d2ae:	9b01      	ldr	r3, [sp, #4]
    d2b0:	2b00      	cmp	r3, #0
    d2b2:	d010      	beq.n	d2d6 <uint64_to_hexstr+0xb8>
    {
        while (ix--)
    d2b4:	e007      	b.n	d2c6 <uint64_to_hexstr+0xa8>
        {
            *pcBuf++ = tbuf[ix];
    d2b6:	9b01      	ldr	r3, [sp, #4]
    d2b8:	1c5a      	adds	r2, r3, #1
    d2ba:	9201      	str	r2, [sp, #4]
    d2bc:	a904      	add	r1, sp, #16
    d2be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d2c0:	440a      	add	r2, r1
    d2c2:	7812      	ldrb	r2, [r2, #0]
    d2c4:	701a      	strb	r2, [r3, #0]
        while (ix--)
    d2c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d2c8:	1e5a      	subs	r2, r3, #1
    d2ca:	920b      	str	r2, [sp, #44]	; 0x2c
    d2cc:	2b00      	cmp	r3, #0
    d2ce:	d1f2      	bne.n	d2b6 <uint64_to_hexstr+0x98>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    d2d0:	9b01      	ldr	r3, [sp, #4]
    d2d2:	2200      	movs	r2, #0
    d2d4:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    d2d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    d2d8:	4618      	mov	r0, r3
    d2da:	b00c      	add	sp, #48	; 0x30
    d2dc:	4770      	bx	lr

0000d2de <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    d2de:	b084      	sub	sp, #16
    d2e0:	9001      	str	r0, [sp, #4]
    uint32_t ui32RetVal = 0;
    d2e2:	2300      	movs	r3, #0
    d2e4:	9303      	str	r3, [sp, #12]
    if ( !pcBuf )
    d2e6:	9b01      	ldr	r3, [sp, #4]
    d2e8:	2b00      	cmp	r3, #0
    d2ea:	d104      	bne.n	d2f6 <simple_strlen+0x18>
    {
        return ui32RetVal;
    d2ec:	9b03      	ldr	r3, [sp, #12]
    d2ee:	e009      	b.n	d304 <simple_strlen+0x26>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    d2f0:	9b03      	ldr	r3, [sp, #12]
    d2f2:	3301      	adds	r3, #1
    d2f4:	9303      	str	r3, [sp, #12]
    while ( *pcBuf++ )
    d2f6:	9b01      	ldr	r3, [sp, #4]
    d2f8:	1c5a      	adds	r2, r3, #1
    d2fa:	9201      	str	r2, [sp, #4]
    d2fc:	781b      	ldrb	r3, [r3, #0]
    d2fe:	2b00      	cmp	r3, #0
    d300:	d1f6      	bne.n	d2f0 <simple_strlen+0x12>
    }
    return ui32RetVal;
    d302:	9b03      	ldr	r3, [sp, #12]
}
    d304:	4618      	mov	r0, r3
    d306:	b004      	add	sp, #16
    d308:	4770      	bx	lr

0000d30a <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    d30a:	b086      	sub	sp, #24
    d30c:	9003      	str	r0, [sp, #12]
    d30e:	460b      	mov	r3, r1
    d310:	9201      	str	r2, [sp, #4]
    d312:	f88d 300b 	strb.w	r3, [sp, #11]
    int32_t i32Cnt = 0;
    d316:	2300      	movs	r3, #0
    d318:	9305      	str	r3, [sp, #20]

    if ( i32NumChars <= 0 )
    d31a:	9b01      	ldr	r3, [sp, #4]
    d31c:	2b00      	cmp	r3, #0
    d31e:	dc0d      	bgt.n	d33c <padbuffer+0x32>
    {
        return i32Cnt;
    d320:	9b05      	ldr	r3, [sp, #20]
    d322:	e011      	b.n	d348 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    d324:	9b03      	ldr	r3, [sp, #12]
    d326:	2b00      	cmp	r3, #0
    d328:	d005      	beq.n	d336 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    d32a:	9b03      	ldr	r3, [sp, #12]
    d32c:	1c5a      	adds	r2, r3, #1
    d32e:	9203      	str	r2, [sp, #12]
    d330:	f89d 200b 	ldrb.w	r2, [sp, #11]
    d334:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    d336:	9b05      	ldr	r3, [sp, #20]
    d338:	3301      	adds	r3, #1
    d33a:	9305      	str	r3, [sp, #20]
    while ( i32NumChars-- )
    d33c:	9b01      	ldr	r3, [sp, #4]
    d33e:	1e5a      	subs	r2, r3, #1
    d340:	9201      	str	r2, [sp, #4]
    d342:	2b00      	cmp	r3, #0
    d344:	d1ee      	bne.n	d324 <padbuffer+0x1a>
    }

    return i32Cnt;
    d346:	9b05      	ldr	r3, [sp, #20]
}
    d348:	4618      	mov	r0, r3
    d34a:	b006      	add	sp, #24
    d34c:	4770      	bx	lr
	...

0000d350 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    d350:	b5f0      	push	{r4, r5, r6, r7, lr}
    d352:	b08f      	sub	sp, #60	; 0x3c
    d354:	ed8d 0a03 	vstr	s0, [sp, #12]
    d358:	9002      	str	r0, [sp, #8]
    d35a:	9101      	str	r1, [sp, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    d35c:	9b02      	ldr	r3, [sp, #8]
    d35e:	681b      	ldr	r3, [r3, #0]
    d360:	9309      	str	r3, [sp, #36]	; 0x24
    if (iBufSize < 4)
    d362:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d364:	2b03      	cmp	r3, #3
    d366:	dc02      	bgt.n	d36e <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    d368:	f06f 0302 	mvn.w	r3, #2
    d36c:	e0e9      	b.n	d542 <ftoa+0x1f2>
    }

    if (fValue == 0.0f)
    d36e:	eddd 7a03 	vldr	s15, [sp, #12]
    d372:	eef5 7a40 	vcmp.f32	s15, #0.0
    d376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d37a:	d104      	bne.n	d386 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    d37c:	9b02      	ldr	r3, [sp, #8]
    d37e:	4a72      	ldr	r2, [pc, #456]	; (d548 <ftoa+0x1f8>)
    d380:	601a      	str	r2, [r3, #0]
        return 3;
    d382:	2303      	movs	r3, #3
    d384:	e0dd      	b.n	d542 <ftoa+0x1f2>
    }

    pcBufInitial = pcBuf;
    d386:	9b02      	ldr	r3, [sp, #8]
    d388:	9308      	str	r3, [sp, #32]

    unFloatValue.F = fValue;
    d38a:	9b03      	ldr	r3, [sp, #12]
    d38c:	9304      	str	r3, [sp, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    d38e:	9b04      	ldr	r3, [sp, #16]
    d390:	15db      	asrs	r3, r3, #23
    d392:	b2db      	uxtb	r3, r3
    d394:	3b7f      	subs	r3, #127	; 0x7f
    d396:	9307      	str	r3, [sp, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    d398:	9b04      	ldr	r3, [sp, #16]
    d39a:	f3c3 0316 	ubfx	r3, r3, #0, #23
    d39e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    d3a2:	9306      	str	r3, [sp, #24]
    i32FracPart = 0;
    d3a4:	2300      	movs	r3, #0
    d3a6:	930c      	str	r3, [sp, #48]	; 0x30
    i32IntPart = 0;
    d3a8:	2300      	movs	r3, #0
    d3aa:	930d      	str	r3, [sp, #52]	; 0x34

    if (iExp2 >= 31)
    d3ac:	9b07      	ldr	r3, [sp, #28]
    d3ae:	2b1e      	cmp	r3, #30
    d3b0:	dd02      	ble.n	d3b8 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    d3b2:	f06f 0301 	mvn.w	r3, #1
    d3b6:	e0c4      	b.n	d542 <ftoa+0x1f2>
    }
    else if (iExp2 < -23)
    d3b8:	9b07      	ldr	r3, [sp, #28]
    d3ba:	f113 0f17 	cmn.w	r3, #23
    d3be:	da02      	bge.n	d3c6 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    d3c0:	f04f 33ff 	mov.w	r3, #4294967295
    d3c4:	e0bd      	b.n	d542 <ftoa+0x1f2>
    }
    else if (iExp2 >= 23)
    d3c6:	9b07      	ldr	r3, [sp, #28]
    d3c8:	2b16      	cmp	r3, #22
    d3ca:	dd06      	ble.n	d3da <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    d3cc:	9b07      	ldr	r3, [sp, #28]
    d3ce:	3b17      	subs	r3, #23
    d3d0:	9a06      	ldr	r2, [sp, #24]
    d3d2:	fa02 f303 	lsl.w	r3, r2, r3
    d3d6:	930d      	str	r3, [sp, #52]	; 0x34
    d3d8:	e01a      	b.n	d410 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    d3da:	9b07      	ldr	r3, [sp, #28]
    d3dc:	2b00      	cmp	r3, #0
    d3de:	db0f      	blt.n	d400 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    d3e0:	9b07      	ldr	r3, [sp, #28]
    d3e2:	f1c3 0317 	rsb	r3, r3, #23
    d3e6:	9a06      	ldr	r2, [sp, #24]
    d3e8:	fa42 f303 	asr.w	r3, r2, r3
    d3ec:	930d      	str	r3, [sp, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    d3ee:	9b07      	ldr	r3, [sp, #28]
    d3f0:	3301      	adds	r3, #1
    d3f2:	9a06      	ldr	r2, [sp, #24]
    d3f4:	fa02 f303 	lsl.w	r3, r2, r3
    d3f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    d3fc:	930c      	str	r3, [sp, #48]	; 0x30
    d3fe:	e007      	b.n	d410 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    d400:	9b06      	ldr	r3, [sp, #24]
    d402:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    d406:	9b07      	ldr	r3, [sp, #28]
    d408:	43db      	mvns	r3, r3
    d40a:	fa42 f303 	asr.w	r3, r2, r3
    d40e:	930c      	str	r3, [sp, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    d410:	9b04      	ldr	r3, [sp, #16]
    d412:	2b00      	cmp	r3, #0
    d414:	da04      	bge.n	d420 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    d416:	9b02      	ldr	r3, [sp, #8]
    d418:	1c5a      	adds	r2, r3, #1
    d41a:	9202      	str	r2, [sp, #8]
    d41c:	222d      	movs	r2, #45	; 0x2d
    d41e:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    d420:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d422:	2b00      	cmp	r3, #0
    d424:	d105      	bne.n	d432 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    d426:	9b02      	ldr	r3, [sp, #8]
    d428:	1c5a      	adds	r2, r3, #1
    d42a:	9202      	str	r2, [sp, #8]
    d42c:	2230      	movs	r2, #48	; 0x30
    d42e:	701a      	strb	r2, [r3, #0]
    d430:	e023      	b.n	d47a <ftoa+0x12a>
    }
    else
    {
        if (i32IntPart > 0)
    d432:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d434:	2b00      	cmp	r3, #0
    d436:	dd09      	ble.n	d44c <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
    d438:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d43a:	17da      	asrs	r2, r3, #31
    d43c:	461e      	mov	r6, r3
    d43e:	4617      	mov	r7, r2
    d440:	9a02      	ldr	r2, [sp, #8]
    d442:	4630      	mov	r0, r6
    d444:	4639      	mov	r1, r7
    d446:	f7ff fea5 	bl	d194 <uint64_to_str>
    d44a:	e012      	b.n	d472 <ftoa+0x122>
        }
        else
        {
            *pcBuf++ = '-';
    d44c:	9b02      	ldr	r3, [sp, #8]
    d44e:	1c5a      	adds	r2, r3, #1
    d450:	9202      	str	r2, [sp, #8]
    d452:	222d      	movs	r2, #45	; 0x2d
    d454:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    d456:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d458:	425b      	negs	r3, r3
    d45a:	17da      	asrs	r2, r3, #31
    d45c:	461c      	mov	r4, r3
    d45e:	4615      	mov	r5, r2
    d460:	9a02      	ldr	r2, [sp, #8]
    d462:	4620      	mov	r0, r4
    d464:	4629      	mov	r1, r5
    d466:	f7ff fe95 	bl	d194 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    d46a:	e002      	b.n	d472 <ftoa+0x122>
        {
            pcBuf++;
    d46c:	9b02      	ldr	r3, [sp, #8]
    d46e:	3301      	adds	r3, #1
    d470:	9302      	str	r3, [sp, #8]
        while (*pcBuf)    // Get to end of new string
    d472:	9b02      	ldr	r3, [sp, #8]
    d474:	781b      	ldrb	r3, [r3, #0]
    d476:	2b00      	cmp	r3, #0
    d478:	d1f8      	bne.n	d46c <ftoa+0x11c>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    d47a:	9b02      	ldr	r3, [sp, #8]
    d47c:	1c5a      	adds	r2, r3, #1
    d47e:	9202      	str	r2, [sp, #8]
    d480:	222e      	movs	r2, #46	; 0x2e
    d482:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    d484:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d486:	2b00      	cmp	r3, #0
    d488:	d105      	bne.n	d496 <ftoa+0x146>
    {
        *pcBuf++ = '0';
    d48a:	9b02      	ldr	r3, [sp, #8]
    d48c:	1c5a      	adds	r2, r3, #1
    d48e:	9202      	str	r2, [sp, #8]
    d490:	2230      	movs	r2, #48	; 0x30
    d492:	701a      	strb	r2, [r3, #0]
    d494:	e04f      	b.n	d536 <ftoa+0x1e6>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    d496:	9a02      	ldr	r2, [sp, #8]
    d498:	9b08      	ldr	r3, [sp, #32]
    d49a:	1ad3      	subs	r3, r2, r3
    d49c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d49e:	1ad3      	subs	r3, r2, r3
    d4a0:	3b01      	subs	r3, #1
    d4a2:	9305      	str	r3, [sp, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    d4a4:	9a05      	ldr	r2, [sp, #20]
    d4a6:	9b01      	ldr	r3, [sp, #4]
    d4a8:	4293      	cmp	r3, r2
    d4aa:	bfa8      	it	ge
    d4ac:	4613      	movge	r3, r2
    d4ae:	9305      	str	r3, [sp, #20]

        for (jx = 0; jx < iMax; jx++)
    d4b0:	2300      	movs	r3, #0
    d4b2:	930a      	str	r3, [sp, #40]	; 0x28
    d4b4:	e015      	b.n	d4e2 <ftoa+0x192>
        {
            i32FracPart *= 10;
    d4b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d4b8:	4613      	mov	r3, r2
    d4ba:	009b      	lsls	r3, r3, #2
    d4bc:	4413      	add	r3, r2
    d4be:	005b      	lsls	r3, r3, #1
    d4c0:	930c      	str	r3, [sp, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d4c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d4c4:	161b      	asrs	r3, r3, #24
    d4c6:	b2da      	uxtb	r2, r3
    d4c8:	9b02      	ldr	r3, [sp, #8]
    d4ca:	1c59      	adds	r1, r3, #1
    d4cc:	9102      	str	r1, [sp, #8]
    d4ce:	3230      	adds	r2, #48	; 0x30
    d4d0:	b2d2      	uxtb	r2, r2
    d4d2:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    d4d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d4d6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    d4da:	930c      	str	r3, [sp, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    d4dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d4de:	3301      	adds	r3, #1
    d4e0:	930a      	str	r3, [sp, #40]	; 0x28
    d4e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d4e4:	9b05      	ldr	r3, [sp, #20]
    d4e6:	429a      	cmp	r2, r3
    d4e8:	dbe5      	blt.n	d4b6 <ftoa+0x166>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    d4ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d4ec:	4613      	mov	r3, r2
    d4ee:	009b      	lsls	r3, r3, #2
    d4f0:	4413      	add	r3, r2
    d4f2:	005b      	lsls	r3, r3, #1
    d4f4:	161b      	asrs	r3, r3, #24
    d4f6:	2b04      	cmp	r3, #4
    d4f8:	dd1d      	ble.n	d536 <ftoa+0x1e6>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    d4fa:	9b02      	ldr	r3, [sp, #8]
    d4fc:	3b01      	subs	r3, #1
    d4fe:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    d500:	e015      	b.n	d52e <ftoa+0x1de>
            {
                if ( *pcBuftmp == '.' )
    d502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d504:	781b      	ldrb	r3, [r3, #0]
    d506:	2b2e      	cmp	r3, #46	; 0x2e
    d508:	d00e      	beq.n	d528 <ftoa+0x1d8>
                {
                }
                else if ( *pcBuftmp == '9' )
    d50a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d50c:	781b      	ldrb	r3, [r3, #0]
    d50e:	2b39      	cmp	r3, #57	; 0x39
    d510:	d103      	bne.n	d51a <ftoa+0x1ca>
                {
                    *pcBuftmp = '0';
    d512:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d514:	2230      	movs	r2, #48	; 0x30
    d516:	701a      	strb	r2, [r3, #0]
    d518:	e006      	b.n	d528 <ftoa+0x1d8>
                }
                else
                {
                    *pcBuftmp += 1;
    d51a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d51c:	781b      	ldrb	r3, [r3, #0]
    d51e:	3301      	adds	r3, #1
    d520:	b2da      	uxtb	r2, r3
    d522:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d524:	701a      	strb	r2, [r3, #0]
                    break;
    d526:	e006      	b.n	d536 <ftoa+0x1e6>
                }
                pcBuftmp--;
    d528:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d52a:	3b01      	subs	r3, #1
    d52c:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    d52e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d530:	9b08      	ldr	r3, [sp, #32]
    d532:	429a      	cmp	r2, r3
    d534:	d2e5      	bcs.n	d502 <ftoa+0x1b2>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    d536:	9b02      	ldr	r3, [sp, #8]
    d538:	2200      	movs	r2, #0
    d53a:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    d53c:	9a02      	ldr	r2, [sp, #8]
    d53e:	9b08      	ldr	r3, [sp, #32]
    d540:	1ad3      	subs	r3, r2, r3
} // ftoa()
    d542:	4618      	mov	r0, r3
    d544:	b00f      	add	sp, #60	; 0x3c
    d546:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d548:	00302e30 	.word	0x00302e30

0000d54c <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    d54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d550:	b097      	sub	sp, #92	; 0x5c
    d552:	9003      	str	r0, [sp, #12]
    d554:	9102      	str	r1, [sp, #8]
    d556:	9201      	str	r2, [sp, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    d558:	2300      	movs	r3, #0
    d55a:	9311      	str	r3, [sp, #68]	; 0x44
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    d55c:	2300      	movs	r3, #0
    d55e:	930b      	str	r3, [sp, #44]	; 0x2c

    while ( *pcFmt != 0x0 )
    d560:	e2e9      	b.n	db36 <am_util_stdio_vsprintf+0x5ea>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    d562:	2306      	movs	r3, #6
    d564:	930e      	str	r3, [sp, #56]	; 0x38

        if ( *pcFmt != '%' )
    d566:	9b02      	ldr	r3, [sp, #8]
    d568:	781b      	ldrb	r3, [r3, #0]
    d56a:	2b25      	cmp	r3, #37	; 0x25
    d56c:	d01f      	beq.n	d5ae <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    d56e:	9b03      	ldr	r3, [sp, #12]
    d570:	2b00      	cmp	r3, #0
    d572:	d015      	beq.n	d5a0 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    d574:	9b02      	ldr	r3, [sp, #8]
    d576:	781b      	ldrb	r3, [r3, #0]
    d578:	2b0a      	cmp	r3, #10
    d57a:	d10b      	bne.n	d594 <am_util_stdio_vsprintf+0x48>
    d57c:	4ba8      	ldr	r3, [pc, #672]	; (d820 <am_util_stdio_vsprintf+0x2d4>)
    d57e:	781b      	ldrb	r3, [r3, #0]
    d580:	2b00      	cmp	r3, #0
    d582:	d007      	beq.n	d594 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    d584:	9b03      	ldr	r3, [sp, #12]
    d586:	1c5a      	adds	r2, r3, #1
    d588:	9203      	str	r2, [sp, #12]
    d58a:	220d      	movs	r2, #13
    d58c:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    d58e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d590:	3301      	adds	r3, #1
    d592:	9311      	str	r3, [sp, #68]	; 0x44
                }
                *pcBuf++ = *pcFmt;
    d594:	9b03      	ldr	r3, [sp, #12]
    d596:	1c5a      	adds	r2, r3, #1
    d598:	9203      	str	r2, [sp, #12]
    d59a:	9a02      	ldr	r2, [sp, #8]
    d59c:	7812      	ldrb	r2, [r2, #0]
    d59e:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    d5a0:	9b02      	ldr	r3, [sp, #8]
    d5a2:	3301      	adds	r3, #1
    d5a4:	9302      	str	r3, [sp, #8]
            ++ui32CharCnt;
    d5a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d5a8:	3301      	adds	r3, #1
    d5aa:	9311      	str	r3, [sp, #68]	; 0x44
            continue;
    d5ac:	e2c3      	b.n	db36 <am_util_stdio_vsprintf+0x5ea>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    d5ae:	9b02      	ldr	r3, [sp, #8]
    d5b0:	3301      	adds	r3, #1
    d5b2:	9302      	str	r3, [sp, #8]
        bLower = bLongLong = false;
    d5b4:	2300      	movs	r3, #0
    d5b6:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    d5ba:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d5be:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    d5c2:	2320      	movs	r3, #32
    d5c4:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

        if ( *pcFmt == '0' )
    d5c8:	9b02      	ldr	r3, [sp, #8]
    d5ca:	781b      	ldrb	r3, [r3, #0]
    d5cc:	2b30      	cmp	r3, #48	; 0x30
    d5ce:	d105      	bne.n	d5dc <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    d5d0:	2330      	movs	r3, #48	; 0x30
    d5d2:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
            ++pcFmt;
    d5d6:	9b02      	ldr	r3, [sp, #8]
    d5d8:	3301      	adds	r3, #1
    d5da:	9302      	str	r3, [sp, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    d5dc:	ab05      	add	r3, sp, #20
    d5de:	4619      	mov	r1, r3
    d5e0:	9802      	ldr	r0, [sp, #8]
    d5e2:	f7ff fd93 	bl	d10c <decstr_to_int>
    d5e6:	4603      	mov	r3, r0
    d5e8:	9310      	str	r3, [sp, #64]	; 0x40
        pcFmt += ui32NumChars;
    d5ea:	9b05      	ldr	r3, [sp, #20]
    d5ec:	9a02      	ldr	r2, [sp, #8]
    d5ee:	4413      	add	r3, r2
    d5f0:	9302      	str	r3, [sp, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    d5f2:	9b02      	ldr	r3, [sp, #8]
    d5f4:	781b      	ldrb	r3, [r3, #0]
    d5f6:	2b73      	cmp	r3, #115	; 0x73
    d5f8:	d005      	beq.n	d606 <am_util_stdio_vsprintf+0xba>
    d5fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d5fc:	2b00      	cmp	r3, #0
    d5fe:	da02      	bge.n	d606 <am_util_stdio_vsprintf+0xba>
        {
            iWidth = -iWidth;
    d600:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d602:	425b      	negs	r3, r3
    d604:	9310      	str	r3, [sp, #64]	; 0x40
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    d606:	9b02      	ldr	r3, [sp, #8]
    d608:	781b      	ldrb	r3, [r3, #0]
    d60a:	2b2e      	cmp	r3, #46	; 0x2e
    d60c:	d10d      	bne.n	d62a <am_util_stdio_vsprintf+0xde>
        {
            ++pcFmt;
    d60e:	9b02      	ldr	r3, [sp, #8]
    d610:	3301      	adds	r3, #1
    d612:	9302      	str	r3, [sp, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    d614:	ab05      	add	r3, sp, #20
    d616:	4619      	mov	r1, r3
    d618:	9802      	ldr	r0, [sp, #8]
    d61a:	f7ff fd77 	bl	d10c <decstr_to_int>
    d61e:	4603      	mov	r3, r0
    d620:	930e      	str	r3, [sp, #56]	; 0x38
            pcFmt += ui32NumChars;
    d622:	9b05      	ldr	r3, [sp, #20]
    d624:	9a02      	ldr	r2, [sp, #8]
    d626:	4413      	add	r3, r2
    d628:	9302      	str	r3, [sp, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    d62a:	9b02      	ldr	r3, [sp, #8]
    d62c:	781b      	ldrb	r3, [r3, #0]
    d62e:	2b6c      	cmp	r3, #108	; 0x6c
    d630:	d10c      	bne.n	d64c <am_util_stdio_vsprintf+0x100>
        {
            pcFmt++;
    d632:	9b02      	ldr	r3, [sp, #8]
    d634:	3301      	adds	r3, #1
    d636:	9302      	str	r3, [sp, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    d638:	9b02      	ldr	r3, [sp, #8]
    d63a:	781b      	ldrb	r3, [r3, #0]
    d63c:	2b6c      	cmp	r3, #108	; 0x6c
    d63e:	d105      	bne.n	d64c <am_util_stdio_vsprintf+0x100>
            {
                pcFmt++;
    d640:	9b02      	ldr	r3, [sp, #8]
    d642:	3301      	adds	r3, #1
    d644:	9302      	str	r3, [sp, #8]
                bLongLong = true;
    d646:	2301      	movs	r3, #1
    d648:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
            }
        }

        switch ( *pcFmt )
    d64c:	9b02      	ldr	r3, [sp, #8]
    d64e:	781b      	ldrb	r3, [r3, #0]
    d650:	3b46      	subs	r3, #70	; 0x46
    d652:	2b32      	cmp	r3, #50	; 0x32
    d654:	f200 825c 	bhi.w	db10 <am_util_stdio_vsprintf+0x5c4>
    d658:	a201      	add	r2, pc, #4	; (adr r2, d660 <am_util_stdio_vsprintf+0x114>)
    d65a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d65e:	bf00      	nop
    d660:	0000da97 	.word	0x0000da97
    d664:	0000db11 	.word	0x0000db11
    d668:	0000db11 	.word	0x0000db11
    d66c:	0000db11 	.word	0x0000db11
    d670:	0000db11 	.word	0x0000db11
    d674:	0000db11 	.word	0x0000db11
    d678:	0000db11 	.word	0x0000db11
    d67c:	0000db11 	.word	0x0000db11
    d680:	0000db11 	.word	0x0000db11
    d684:	0000db11 	.word	0x0000db11
    d688:	0000db11 	.word	0x0000db11
    d68c:	0000db11 	.word	0x0000db11
    d690:	0000db11 	.word	0x0000db11
    d694:	0000db11 	.word	0x0000db11
    d698:	0000db11 	.word	0x0000db11
    d69c:	0000db11 	.word	0x0000db11
    d6a0:	0000db11 	.word	0x0000db11
    d6a4:	0000db11 	.word	0x0000db11
    d6a8:	0000d82b 	.word	0x0000d82b
    d6ac:	0000db11 	.word	0x0000db11
    d6b0:	0000db11 	.word	0x0000db11
    d6b4:	0000db11 	.word	0x0000db11
    d6b8:	0000db11 	.word	0x0000db11
    d6bc:	0000db11 	.word	0x0000db11
    d6c0:	0000db11 	.word	0x0000db11
    d6c4:	0000db11 	.word	0x0000db11
    d6c8:	0000db11 	.word	0x0000db11
    d6cc:	0000db11 	.word	0x0000db11
    d6d0:	0000db11 	.word	0x0000db11
    d6d4:	0000d72d 	.word	0x0000d72d
    d6d8:	0000d95b 	.word	0x0000d95b
    d6dc:	0000db11 	.word	0x0000db11
    d6e0:	0000da97 	.word	0x0000da97
    d6e4:	0000db11 	.word	0x0000db11
    d6e8:	0000db11 	.word	0x0000db11
    d6ec:	0000d95b 	.word	0x0000d95b
    d6f0:	0000db11 	.word	0x0000db11
    d6f4:	0000db11 	.word	0x0000db11
    d6f8:	0000db11 	.word	0x0000db11
    d6fc:	0000db11 	.word	0x0000db11
    d700:	0000db11 	.word	0x0000db11
    d704:	0000db11 	.word	0x0000db11
    d708:	0000db11 	.word	0x0000db11
    d70c:	0000db11 	.word	0x0000db11
    d710:	0000db11 	.word	0x0000db11
    d714:	0000d753 	.word	0x0000d753
    d718:	0000db11 	.word	0x0000db11
    d71c:	0000d8c5 	.word	0x0000d8c5
    d720:	0000db11 	.word	0x0000db11
    d724:	0000db11 	.word	0x0000db11
    d728:	0000d825 	.word	0x0000d825
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    d72c:	9b01      	ldr	r3, [sp, #4]
    d72e:	1d1a      	adds	r2, r3, #4
    d730:	9201      	str	r2, [sp, #4]
    d732:	681b      	ldr	r3, [r3, #0]
    d734:	f88d 301f 	strb.w	r3, [sp, #31]

                if ( pcBuf )
    d738:	9b03      	ldr	r3, [sp, #12]
    d73a:	2b00      	cmp	r3, #0
    d73c:	d005      	beq.n	d74a <am_util_stdio_vsprintf+0x1fe>
                {
                    *pcBuf++ = ui8CharSpecifier;
    d73e:	9b03      	ldr	r3, [sp, #12]
    d740:	1c5a      	adds	r2, r3, #1
    d742:	9203      	str	r2, [sp, #12]
    d744:	f89d 201f 	ldrb.w	r2, [sp, #31]
    d748:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d74a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d74c:	3301      	adds	r3, #1
    d74e:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d750:	e1ee      	b.n	db30 <am_util_stdio_vsprintf+0x5e4>

            case 's':
                pcStr = va_arg(pArgs, char *);
    d752:	9b01      	ldr	r3, [sp, #4]
    d754:	1d1a      	adds	r2, r3, #4
    d756:	9201      	str	r2, [sp, #4]
    d758:	681b      	ldr	r3, [r3, #0]
    d75a:	9315      	str	r3, [sp, #84]	; 0x54
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    d75c:	9815      	ldr	r0, [sp, #84]	; 0x54
    d75e:	f7ff fdbe 	bl	d2de <simple_strlen>
    d762:	900b      	str	r0, [sp, #44]	; 0x2c
                if ( iWidth > 0 )
    d764:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d766:	2b00      	cmp	r3, #0
    d768:	dd2e      	ble.n	d7c8 <am_util_stdio_vsprintf+0x27c>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    d76a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d76c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d76e:	429a      	cmp	r2, r3
    d770:	d22a      	bcs.n	d7c8 <am_util_stdio_vsprintf+0x27c>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    d772:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d774:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d776:	1ad3      	subs	r3, r2, r3
    d778:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d77a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d77e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d780:	4619      	mov	r1, r3
    d782:	9803      	ldr	r0, [sp, #12]
    d784:	f7ff fdc1 	bl	d30a <padbuffer>
    d788:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    d78a:	9b03      	ldr	r3, [sp, #12]
    d78c:	2b00      	cmp	r3, #0
    d78e:	d001      	beq.n	d794 <am_util_stdio_vsprintf+0x248>
    d790:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d792:	e000      	b.n	d796 <am_util_stdio_vsprintf+0x24a>
    d794:	2300      	movs	r3, #0
    d796:	9a03      	ldr	r2, [sp, #12]
    d798:	4413      	add	r3, r2
    d79a:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    d79c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d79e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d7a0:	4413      	add	r3, r2
    d7a2:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    d7a4:	2300      	movs	r3, #0
    d7a6:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }

                while (*pcStr != 0x0)
    d7a8:	e00e      	b.n	d7c8 <am_util_stdio_vsprintf+0x27c>
                {
                    if ( pcBuf )
    d7aa:	9b03      	ldr	r3, [sp, #12]
    d7ac:	2b00      	cmp	r3, #0
    d7ae:	d005      	beq.n	d7bc <am_util_stdio_vsprintf+0x270>
                    {
                        *pcBuf++ = *pcStr;
    d7b0:	9b03      	ldr	r3, [sp, #12]
    d7b2:	1c5a      	adds	r2, r3, #1
    d7b4:	9203      	str	r2, [sp, #12]
    d7b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
    d7b8:	7812      	ldrb	r2, [r2, #0]
    d7ba:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    d7bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d7be:	3301      	adds	r3, #1
    d7c0:	9315      	str	r3, [sp, #84]	; 0x54
                    ++ui32CharCnt;
    d7c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d7c4:	3301      	adds	r3, #1
    d7c6:	9311      	str	r3, [sp, #68]	; 0x44
                while (*pcStr != 0x0)
    d7c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d7ca:	781b      	ldrb	r3, [r3, #0]
    d7cc:	2b00      	cmp	r3, #0
    d7ce:	d1ec      	bne.n	d7aa <am_util_stdio_vsprintf+0x25e>
                }

                if ( iWidth )
    d7d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d7d2:	2b00      	cmp	r3, #0
    d7d4:	f000 81a9 	beq.w	db2a <am_util_stdio_vsprintf+0x5de>
                {
                    iWidth = -iWidth;
    d7d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d7da:	425b      	negs	r3, r3
    d7dc:	9310      	str	r3, [sp, #64]	; 0x40

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    d7de:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d7e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d7e2:	429a      	cmp	r2, r3
    d7e4:	f080 81a1 	bcs.w	db2a <am_util_stdio_vsprintf+0x5de>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    d7e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d7ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d7ec:	1ad3      	subs	r3, r2, r3
    d7ee:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d7f0:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d7f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d7f6:	4619      	mov	r1, r3
    d7f8:	9803      	ldr	r0, [sp, #12]
    d7fa:	f7ff fd86 	bl	d30a <padbuffer>
    d7fe:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    d800:	9b03      	ldr	r3, [sp, #12]
    d802:	2b00      	cmp	r3, #0
    d804:	d001      	beq.n	d80a <am_util_stdio_vsprintf+0x2be>
    d806:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d808:	e000      	b.n	d80c <am_util_stdio_vsprintf+0x2c0>
    d80a:	2300      	movs	r3, #0
    d80c:	9a03      	ldr	r2, [sp, #12]
    d80e:	4413      	add	r3, r2
    d810:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    d812:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d814:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d816:	4413      	add	r3, r2
    d818:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    d81a:	2300      	movs	r3, #0
    d81c:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }
                break;
    d81e:	e184      	b.n	db2a <am_util_stdio_vsprintf+0x5de>
    d820:	10001160 	.word	0x10001160

            case 'x':
                bLower = true;
    d824:	2301      	movs	r3, #1
    d826:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d82a:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d82e:	2b00      	cmp	r3, #0
    d830:	d009      	beq.n	d846 <am_util_stdio_vsprintf+0x2fa>
    d832:	9b01      	ldr	r3, [sp, #4]
    d834:	3307      	adds	r3, #7
    d836:	f023 0307 	bic.w	r3, r3, #7
    d83a:	f103 0208 	add.w	r2, r3, #8
    d83e:	9201      	str	r2, [sp, #4]
    d840:	e9d3 4500 	ldrd	r4, r5, [r3]
    d844:	e006      	b.n	d854 <am_util_stdio_vsprintf+0x308>
                                      va_arg(pArgs, uint32_t);
    d846:	9b01      	ldr	r3, [sp, #4]
    d848:	1d1a      	adds	r2, r3, #4
    d84a:	9201      	str	r2, [sp, #4]
    d84c:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d84e:	2200      	movs	r2, #0
    d850:	461c      	mov	r4, r3
    d852:	4615      	mov	r5, r2
    d854:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48

                if ( iWidth )
    d858:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d85a:	2b00      	cmp	r3, #0
    d85c:	d01e      	beq.n	d89c <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    d85e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d862:	f7ff fc2f 	bl	d0c4 <ndigits_in_hex>
    d866:	4602      	mov	r2, r0
    d868:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d86a:	1a9b      	subs	r3, r3, r2
    d86c:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d86e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d872:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d874:	4619      	mov	r1, r3
    d876:	9803      	ldr	r0, [sp, #12]
    d878:	f7ff fd47 	bl	d30a <padbuffer>
    d87c:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d87e:	9b03      	ldr	r3, [sp, #12]
    d880:	2b00      	cmp	r3, #0
    d882:	d001      	beq.n	d888 <am_util_stdio_vsprintf+0x33c>
    d884:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d886:	e000      	b.n	d88a <am_util_stdio_vsprintf+0x33e>
    d888:	2300      	movs	r3, #0
    d88a:	9a03      	ldr	r2, [sp, #12]
    d88c:	4413      	add	r3, r2
    d88e:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d890:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d892:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d894:	4413      	add	r3, r2
    d896:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d898:	2300      	movs	r3, #0
    d89a:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    d89c:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    d8a0:	9a03      	ldr	r2, [sp, #12]
    d8a2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d8a6:	f7ff fcba 	bl	d21e <uint64_to_hexstr>
    d8aa:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d8ac:	9b03      	ldr	r3, [sp, #12]
    d8ae:	2b00      	cmp	r3, #0
    d8b0:	d003      	beq.n	d8ba <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    d8b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d8b4:	9a03      	ldr	r2, [sp, #12]
    d8b6:	4413      	add	r3, r2
    d8b8:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d8ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d8bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d8be:	4413      	add	r3, r2
    d8c0:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d8c2:	e135      	b.n	db30 <am_util_stdio_vsprintf+0x5e4>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d8c4:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d8c8:	2b00      	cmp	r3, #0
    d8ca:	d009      	beq.n	d8e0 <am_util_stdio_vsprintf+0x394>
    d8cc:	9b01      	ldr	r3, [sp, #4]
    d8ce:	3307      	adds	r3, #7
    d8d0:	f023 0307 	bic.w	r3, r3, #7
    d8d4:	f103 0208 	add.w	r2, r3, #8
    d8d8:	9201      	str	r2, [sp, #4]
    d8da:	e9d3 6700 	ldrd	r6, r7, [r3]
    d8de:	e006      	b.n	d8ee <am_util_stdio_vsprintf+0x3a2>
                                      va_arg(pArgs, uint32_t);
    d8e0:	9b01      	ldr	r3, [sp, #4]
    d8e2:	1d1a      	adds	r2, r3, #4
    d8e4:	9201      	str	r2, [sp, #4]
    d8e6:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d8e8:	2200      	movs	r2, #0
    d8ea:	461e      	mov	r6, r3
    d8ec:	4617      	mov	r7, r2
    d8ee:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48

                if ( iWidth )
    d8f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d8f4:	2b00      	cmp	r3, #0
    d8f6:	d01e      	beq.n	d936 <am_util_stdio_vsprintf+0x3ea>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    d8f8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d8fc:	f7ff fba8 	bl	d050 <ndigits_in_u64>
    d900:	4602      	mov	r2, r0
    d902:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d904:	1a9b      	subs	r3, r3, r2
    d906:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d908:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d90c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d90e:	4619      	mov	r1, r3
    d910:	9803      	ldr	r0, [sp, #12]
    d912:	f7ff fcfa 	bl	d30a <padbuffer>
    d916:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d918:	9b03      	ldr	r3, [sp, #12]
    d91a:	2b00      	cmp	r3, #0
    d91c:	d001      	beq.n	d922 <am_util_stdio_vsprintf+0x3d6>
    d91e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d920:	e000      	b.n	d924 <am_util_stdio_vsprintf+0x3d8>
    d922:	2300      	movs	r3, #0
    d924:	9a03      	ldr	r2, [sp, #12]
    d926:	4413      	add	r3, r2
    d928:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d92a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d92c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d92e:	4413      	add	r3, r2
    d930:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d932:	2300      	movs	r3, #0
    d934:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d936:	9a03      	ldr	r2, [sp, #12]
    d938:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d93c:	f7ff fc2a 	bl	d194 <uint64_to_str>
    d940:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d942:	9b03      	ldr	r3, [sp, #12]
    d944:	2b00      	cmp	r3, #0
    d946:	d003      	beq.n	d950 <am_util_stdio_vsprintf+0x404>
                {
                    pcBuf += iVal;
    d948:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d94a:	9a03      	ldr	r2, [sp, #12]
    d94c:	4413      	add	r3, r2
    d94e:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d950:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d952:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d954:	4413      	add	r3, r2
    d956:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d958:	e0ea      	b.n	db30 <am_util_stdio_vsprintf+0x5e4>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d95a:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d95e:	2b00      	cmp	r3, #0
    d960:	d009      	beq.n	d976 <am_util_stdio_vsprintf+0x42a>
    d962:	9b01      	ldr	r3, [sp, #4]
    d964:	3307      	adds	r3, #7
    d966:	f023 0307 	bic.w	r3, r3, #7
    d96a:	f103 0208 	add.w	r2, r3, #8
    d96e:	9201      	str	r2, [sp, #4]
    d970:	e9d3 8900 	ldrd	r8, r9, [r3]
    d974:	e006      	b.n	d984 <am_util_stdio_vsprintf+0x438>
                                     va_arg(pArgs, int32_t);
    d976:	9b01      	ldr	r3, [sp, #4]
    d978:	1d1a      	adds	r2, r3, #4
    d97a:	9201      	str	r2, [sp, #4]
    d97c:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d97e:	17da      	asrs	r2, r3, #31
    d980:	4698      	mov	r8, r3
    d982:	4691      	mov	r9, r2
    d984:	e9cd 8908 	strd	r8, r9, [sp, #32]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    d988:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d98c:	2b00      	cmp	r3, #0
    d98e:	da0c      	bge.n	d9aa <am_util_stdio_vsprintf+0x45e>
                {
                    ui64Val = -i64Val;          // Get absolute value
    d990:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d994:	2100      	movs	r1, #0
    d996:	f1d2 0a00 	rsbs	sl, r2, #0
    d99a:	eb61 0b03 	sbc.w	fp, r1, r3
    d99e:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
                    bNeg = true;
    d9a2:	2301      	movs	r3, #1
    d9a4:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    d9a8:	e006      	b.n	d9b8 <am_util_stdio_vsprintf+0x46c>
                }
                else
                {
                    ui64Val = i64Val;
    d9aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d9ae:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
                    bNeg = false;
    d9b2:	2300      	movs	r3, #0
    d9b4:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                }

                if ( iWidth )
    d9b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d9ba:	2b00      	cmp	r3, #0
    d9bc:	d04a      	beq.n	da54 <am_util_stdio_vsprintf+0x508>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    d9be:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    d9c2:	4610      	mov	r0, r2
    d9c4:	4619      	mov	r1, r3
    d9c6:	f7ff fb63 	bl	d090 <ndigits_in_i64>
    d9ca:	4602      	mov	r2, r0
    d9cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d9ce:	1a9b      	subs	r3, r3, r2
    d9d0:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg )
    d9d2:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d9d6:	2b00      	cmp	r3, #0
    d9d8:	d011      	beq.n	d9fe <am_util_stdio_vsprintf+0x4b2>
                    {
                        --iWidth;
    d9da:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d9dc:	3b01      	subs	r3, #1
    d9de:	9310      	str	r3, [sp, #64]	; 0x40

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    d9e0:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d9e4:	2b30      	cmp	r3, #48	; 0x30
    d9e6:	d10a      	bne.n	d9fe <am_util_stdio_vsprintf+0x4b2>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    d9e8:	9b03      	ldr	r3, [sp, #12]
    d9ea:	2b00      	cmp	r3, #0
    d9ec:	d004      	beq.n	d9f8 <am_util_stdio_vsprintf+0x4ac>
                            {
                                *pcBuf++ = '-';
    d9ee:	9b03      	ldr	r3, [sp, #12]
    d9f0:	1c5a      	adds	r2, r3, #1
    d9f2:	9203      	str	r2, [sp, #12]
    d9f4:	222d      	movs	r2, #45	; 0x2d
    d9f6:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    d9f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d9fa:	3301      	adds	r3, #1
    d9fc:	9311      	str	r3, [sp, #68]	; 0x44
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d9fe:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    da02:	9a10      	ldr	r2, [sp, #64]	; 0x40
    da04:	4619      	mov	r1, r3
    da06:	9803      	ldr	r0, [sp, #12]
    da08:	f7ff fc7f 	bl	d30a <padbuffer>
    da0c:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    da0e:	9b03      	ldr	r3, [sp, #12]
    da10:	2b00      	cmp	r3, #0
    da12:	d001      	beq.n	da18 <am_util_stdio_vsprintf+0x4cc>
    da14:	9b10      	ldr	r3, [sp, #64]	; 0x40
    da16:	e000      	b.n	da1a <am_util_stdio_vsprintf+0x4ce>
    da18:	2300      	movs	r3, #0
    da1a:	9a03      	ldr	r2, [sp, #12]
    da1c:	4413      	add	r3, r2
    da1e:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    da20:	9b10      	ldr	r3, [sp, #64]	; 0x40
    da22:	9a11      	ldr	r2, [sp, #68]	; 0x44
    da24:	4413      	add	r3, r2
    da26:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    da28:	2300      	movs	r3, #0
    da2a:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    da2c:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    da30:	2b00      	cmp	r3, #0
    da32:	d01e      	beq.n	da72 <am_util_stdio_vsprintf+0x526>
    da34:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    da38:	2b20      	cmp	r3, #32
    da3a:	d11a      	bne.n	da72 <am_util_stdio_vsprintf+0x526>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    da3c:	9b03      	ldr	r3, [sp, #12]
    da3e:	2b00      	cmp	r3, #0
    da40:	d004      	beq.n	da4c <am_util_stdio_vsprintf+0x500>
                        {
                            *pcBuf++ = '-';
    da42:	9b03      	ldr	r3, [sp, #12]
    da44:	1c5a      	adds	r2, r3, #1
    da46:	9203      	str	r2, [sp, #12]
    da48:	222d      	movs	r2, #45	; 0x2d
    da4a:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    da4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    da4e:	3301      	adds	r3, #1
    da50:	9311      	str	r3, [sp, #68]	; 0x44
    da52:	e00e      	b.n	da72 <am_util_stdio_vsprintf+0x526>
                    }
                }
                else
                {
                    if ( bNeg )
    da54:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    da58:	2b00      	cmp	r3, #0
    da5a:	d00a      	beq.n	da72 <am_util_stdio_vsprintf+0x526>
                    {
                        if ( pcBuf )
    da5c:	9b03      	ldr	r3, [sp, #12]
    da5e:	2b00      	cmp	r3, #0
    da60:	d004      	beq.n	da6c <am_util_stdio_vsprintf+0x520>
                        {
                            *pcBuf++ = '-';
    da62:	9b03      	ldr	r3, [sp, #12]
    da64:	1c5a      	adds	r2, r3, #1
    da66:	9203      	str	r2, [sp, #12]
    da68:	222d      	movs	r2, #45	; 0x2d
    da6a:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    da6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    da6e:	3301      	adds	r3, #1
    da70:	9311      	str	r3, [sp, #68]	; 0x44
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    da72:	9a03      	ldr	r2, [sp, #12]
    da74:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    da78:	f7ff fb8c 	bl	d194 <uint64_to_str>
    da7c:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    da7e:	9b03      	ldr	r3, [sp, #12]
    da80:	2b00      	cmp	r3, #0
    da82:	d003      	beq.n	da8c <am_util_stdio_vsprintf+0x540>
                {
                    pcBuf += iVal;
    da84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    da86:	9a03      	ldr	r2, [sp, #12]
    da88:	4413      	add	r3, r2
    da8a:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    da8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    da8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    da90:	4413      	add	r3, r2
    da92:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    da94:	e04c      	b.n	db30 <am_util_stdio_vsprintf+0x5e4>


            case 'f':
            case 'F':
                if ( pcBuf )
    da96:	9b03      	ldr	r3, [sp, #12]
    da98:	2b00      	cmp	r3, #0
    da9a:	d048      	beq.n	db2e <am_util_stdio_vsprintf+0x5e2>
                {
                    float fValue = va_arg(pArgs, double);
    da9c:	9b01      	ldr	r3, [sp, #4]
    da9e:	3307      	adds	r3, #7
    daa0:	f023 0307 	bic.w	r3, r3, #7
    daa4:	f103 0208 	add.w	r2, r3, #8
    daa8:	9201      	str	r2, [sp, #4]
    daaa:	e9d3 2300 	ldrd	r2, r3, [r3]
    daae:	4610      	mov	r0, r2
    dab0:	4619      	mov	r1, r3
    dab2:	f7fe fce1 	bl	c478 <__aeabi_d2f>
    dab6:	4603      	mov	r3, r0
    dab8:	9306      	str	r3, [sp, #24]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    daba:	9b03      	ldr	r3, [sp, #12]
    dabc:	2214      	movs	r2, #20
    dabe:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    dac0:	990e      	ldr	r1, [sp, #56]	; 0x38
    dac2:	9803      	ldr	r0, [sp, #12]
    dac4:	ed9d 0a06 	vldr	s0, [sp, #24]
    dac8:	f7ff fc42 	bl	d350 <ftoa>
    dacc:	900f      	str	r0, [sp, #60]	; 0x3c
                    if ( iVal < 0 )
    dace:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    dad0:	2b00      	cmp	r3, #0
    dad2:	da14      	bge.n	dafe <am_util_stdio_vsprintf+0x5b2>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    dad4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    dad6:	f1b3 3fff 	cmp.w	r3, #4294967295
    dada:	d102      	bne.n	dae2 <am_util_stdio_vsprintf+0x596>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    dadc:	4b1e      	ldr	r3, [pc, #120]	; (db58 <am_util_stdio_vsprintf+0x60c>)
    dade:	930c      	str	r3, [sp, #48]	; 0x30
    dae0:	e008      	b.n	daf4 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    dae2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    dae4:	f113 0f02 	cmn.w	r3, #2
    dae8:	d102      	bne.n	daf0 <am_util_stdio_vsprintf+0x5a4>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    daea:	4b1c      	ldr	r3, [pc, #112]	; (db5c <am_util_stdio_vsprintf+0x610>)
    daec:	930c      	str	r3, [sp, #48]	; 0x30
    daee:	e001      	b.n	daf4 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    daf0:	4b1b      	ldr	r3, [pc, #108]	; (db60 <am_util_stdio_vsprintf+0x614>)
    daf2:	930c      	str	r3, [sp, #48]	; 0x30
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    daf4:	9b03      	ldr	r3, [sp, #12]
    daf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    daf8:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    dafa:	2303      	movs	r3, #3
    dafc:	930f      	str	r3, [sp, #60]	; 0x3c
                    }
                    ui32CharCnt += iVal;
    dafe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    db00:	9a11      	ldr	r2, [sp, #68]	; 0x44
    db02:	4413      	add	r3, r2
    db04:	9311      	str	r3, [sp, #68]	; 0x44
                    pcBuf += iVal;
    db06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    db08:	9a03      	ldr	r2, [sp, #12]
    db0a:	4413      	add	r3, r2
    db0c:	9303      	str	r3, [sp, #12]
                }
                break;
    db0e:	e00e      	b.n	db2e <am_util_stdio_vsprintf+0x5e2>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    db10:	9b03      	ldr	r3, [sp, #12]
    db12:	2b00      	cmp	r3, #0
    db14:	d005      	beq.n	db22 <am_util_stdio_vsprintf+0x5d6>
                {
                    *pcBuf++ = *pcFmt;
    db16:	9b03      	ldr	r3, [sp, #12]
    db18:	1c5a      	adds	r2, r3, #1
    db1a:	9203      	str	r2, [sp, #12]
    db1c:	9a02      	ldr	r2, [sp, #8]
    db1e:	7812      	ldrb	r2, [r2, #0]
    db20:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    db22:	9b11      	ldr	r3, [sp, #68]	; 0x44
    db24:	3301      	adds	r3, #1
    db26:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    db28:	e002      	b.n	db30 <am_util_stdio_vsprintf+0x5e4>
                break;
    db2a:	bf00      	nop
    db2c:	e000      	b.n	db30 <am_util_stdio_vsprintf+0x5e4>
                break;
    db2e:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    db30:	9b02      	ldr	r3, [sp, #8]
    db32:	3301      	adds	r3, #1
    db34:	9302      	str	r3, [sp, #8]
    while ( *pcFmt != 0x0 )
    db36:	9b02      	ldr	r3, [sp, #8]
    db38:	781b      	ldrb	r3, [r3, #0]
    db3a:	2b00      	cmp	r3, #0
    db3c:	f47f ad11 	bne.w	d562 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    db40:	9b03      	ldr	r3, [sp, #12]
    db42:	2b00      	cmp	r3, #0
    db44:	d002      	beq.n	db4c <am_util_stdio_vsprintf+0x600>
    {
        *pcBuf = 0x0;
    db46:	9b03      	ldr	r3, [sp, #12]
    db48:	2200      	movs	r2, #0
    db4a:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    db4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    db4e:	4618      	mov	r0, r3
    db50:	b017      	add	sp, #92	; 0x5c
    db52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    db56:	bf00      	nop
    db58:	00302e30 	.word	0x00302e30
    db5c:	00232e23 	.word	0x00232e23
    db60:	003f2e3f 	.word	0x003f2e3f

0000db64 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    db64:	b40f      	push	{r0, r1, r2, r3}
    db66:	b500      	push	{lr}
    db68:	b083      	sub	sp, #12
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    db6a:	4b0c      	ldr	r3, [pc, #48]	; (db9c <am_util_stdio_printf+0x38>)
    db6c:	681b      	ldr	r3, [r3, #0]
    db6e:	2b00      	cmp	r3, #0
    db70:	d101      	bne.n	db76 <am_util_stdio_printf+0x12>
    {
        return 0;
    db72:	2300      	movs	r3, #0
    db74:	e00c      	b.n	db90 <am_util_stdio_printf+0x2c>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    db76:	ab05      	add	r3, sp, #20
    db78:	9300      	str	r3, [sp, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    db7a:	9a00      	ldr	r2, [sp, #0]
    db7c:	9904      	ldr	r1, [sp, #16]
    db7e:	4808      	ldr	r0, [pc, #32]	; (dba0 <am_util_stdio_printf+0x3c>)
    db80:	f7ff fce4 	bl	d54c <am_util_stdio_vsprintf>
    db84:	9001      	str	r0, [sp, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    db86:	4b05      	ldr	r3, [pc, #20]	; (db9c <am_util_stdio_printf+0x38>)
    db88:	681b      	ldr	r3, [r3, #0]
    db8a:	4805      	ldr	r0, [pc, #20]	; (dba0 <am_util_stdio_printf+0x3c>)
    db8c:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    db8e:	9b01      	ldr	r3, [sp, #4]
}
    db90:	4618      	mov	r0, r3
    db92:	b003      	add	sp, #12
    db94:	f85d eb04 	ldr.w	lr, [sp], #4
    db98:	b004      	add	sp, #16
    db9a:	4770      	bx	lr
    db9c:	1000105c 	.word	0x1000105c
    dba0:	10001060 	.word	0x10001060

0000dba4 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    dba4:	b508      	push	{r3, lr}
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    dba6:	4802      	ldr	r0, [pc, #8]	; (dbb0 <am_util_stdio_terminal_clear+0xc>)
    dba8:	f7ff ffdc 	bl	db64 <am_util_stdio_printf>
}
    dbac:	bf00      	nop
    dbae:	bd08      	pop	{r3, pc}
    dbb0:	0000f450 	.word	0x0000f450

0000dbb4 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    dbb4:	4811      	ldr	r0, [pc, #68]	; (dbfc <zero_loop+0x12>)
    dbb6:	4912      	ldr	r1, [pc, #72]	; (dc00 <zero_loop+0x16>)
    dbb8:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    dbba:	f8d1 d000 	ldr.w	sp, [r1]

#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    dbbe:	4811      	ldr	r0, [pc, #68]	; (dc04 <zero_loop+0x1a>)
    dbc0:	6801      	ldr	r1, [r0, #0]
    dbc2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    dbc6:	6001      	str	r1, [r0, #0]
    dbc8:	f3bf 8f4f 	dsb	sy
    dbcc:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    dbd0:	480d      	ldr	r0, [pc, #52]	; (dc08 <zero_loop+0x1e>)
    dbd2:	490e      	ldr	r1, [pc, #56]	; (dc0c <zero_loop+0x22>)
    dbd4:	4a0e      	ldr	r2, [pc, #56]	; (dc10 <zero_loop+0x26>)

0000dbd6 <copy_loop>:
    dbd6:	f850 3b04 	ldr.w	r3, [r0], #4
    dbda:	f841 3b04 	str.w	r3, [r1], #4
    dbde:	4291      	cmp	r1, r2
    dbe0:	dbf9      	blt.n	dbd6 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    dbe2:	480c      	ldr	r0, [pc, #48]	; (dc14 <zero_loop+0x2a>)
    dbe4:	490c      	ldr	r1, [pc, #48]	; (dc18 <zero_loop+0x2e>)
    dbe6:	f04f 0200 	mov.w	r2, #0

0000dbea <zero_loop>:
    dbea:	4288      	cmp	r0, r1
    dbec:	bfb8      	it	lt
    dbee:	f840 2b04 	strlt.w	r2, [r0], #4
    dbf2:	dbfa      	blt.n	dbea <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    dbf4:	f7fe fdca 	bl	c78c <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    dbf8:	be00      	bkpt	0x0000
}
    dbfa:	bf00      	nop
    dbfc:	e000ed08 	.word	0xe000ed08
    dc00:	0000c000 	.word	0x0000c000
    dc04:	e000ed88 	.word	0xe000ed88
    dc08:	0000f71c 	.word	0x0000f71c
    dc0c:	10001000 	.word	0x10001000
    dc10:	10001050 	.word	0x10001050
    dc14:	10001050 	.word	0x10001050
    dc18:	100011c4 	.word	0x100011c4

0000dc1c <NMI_Handler>:
NMI_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    dc1c:	e7fe      	b.n	dc1c <NMI_Handler>

0000dc1e <BusFault_Handler>:
HardFault_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    dc1e:	e7fe      	b.n	dc1e <BusFault_Handler>

0000dc20 <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    dc20:	e7fe      	b.n	dc20 <DebugMon_Handler>
	...

0000dc24 <am_bsp_low_power_init>:
    dc24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dc26:	f001 f93b 	bl	eea0 <am_hal_pwrctrl_low_power_init>
    dc2a:	f001 fa17 	bl	f05c <am_hal_rtc_osc_disable>
    dc2e:	4b0b      	ldr	r3, [pc, #44]	; (dc5c <am_bsp_low_power_init+0x38>)
    dc30:	4f0b      	ldr	r7, [pc, #44]	; (dc60 <am_bsp_low_power_init+0x3c>)
    dc32:	681e      	ldr	r6, [r3, #0]
    dc34:	2400      	movs	r4, #0
    dc36:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    dc3a:	4631      	mov	r1, r6
    dc3c:	4628      	mov	r0, r5
    dc3e:	f000 fe45 	bl	e8cc <am_hal_gpio_pinconfig>
    dc42:	2103      	movs	r1, #3
    dc44:	4628      	mov	r0, r5
    dc46:	f000 ffad 	bl	eba4 <am_hal_gpio_state_write>
    dc4a:	3401      	adds	r4, #1
    dc4c:	2100      	movs	r1, #0
    dc4e:	4628      	mov	r0, r5
    dc50:	f000 ffa8 	bl	eba4 <am_hal_gpio_state_write>
    dc54:	2c05      	cmp	r4, #5
    dc56:	d1ee      	bne.n	dc36 <am_bsp_low_power_init+0x12>
    dc58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dc5a:	bf00      	nop
    dc5c:	0000f47c 	.word	0x0000f47c
    dc60:	1000100c 	.word	0x1000100c

0000dc64 <am_bsp_itm_printf_enable>:
    dc64:	b500      	push	{lr}
    dc66:	4b0b      	ldr	r3, [pc, #44]	; (dc94 <am_bsp_itm_printf_enable+0x30>)
    dc68:	b087      	sub	sp, #28
    dc6a:	2201      	movs	r2, #1
    dc6c:	601a      	str	r2, [r3, #0]
    dc6e:	f000 ffe9 	bl	ec44 <am_hal_itm_enable>
    dc72:	4b09      	ldr	r3, [pc, #36]	; (dc98 <am_bsp_itm_printf_enable+0x34>)
    dc74:	9301      	str	r3, [sp, #4]
    dc76:	a801      	add	r0, sp, #4
    dc78:	f001 fa54 	bl	f124 <am_hal_tpiu_enable>
    dc7c:	4b07      	ldr	r3, [pc, #28]	; (dc9c <am_bsp_itm_printf_enable+0x38>)
    dc7e:	2029      	movs	r0, #41	; 0x29
    dc80:	6819      	ldr	r1, [r3, #0]
    dc82:	f000 fe23 	bl	e8cc <am_hal_gpio_pinconfig>
    dc86:	4806      	ldr	r0, [pc, #24]	; (dca0 <am_bsp_itm_printf_enable+0x3c>)
    dc88:	f7ff f8e4 	bl	ce54 <am_util_stdio_printf_init>
    dc8c:	b007      	add	sp, #28
    dc8e:	f85d fb04 	ldr.w	pc, [sp], #4
    dc92:	bf00      	nop
    dc94:	10001164 	.word	0x10001164
    dc98:	000f4240 	.word	0x000f4240
    dc9c:	0000f470 	.word	0x0000f470
    dca0:	0000ec8d 	.word	0x0000ec8d

0000dca4 <am_hal_adc_initialize>:
    dca4:	2800      	cmp	r0, #0
    dca6:	d136      	bne.n	dd16 <am_hal_adc_initialize+0x72>
    dca8:	2900      	cmp	r1, #0
    dcaa:	d036      	beq.n	dd1a <am_hal_adc_initialize+0x76>
    dcac:	b538      	push	{r3, r4, r5, lr}
    dcae:	4b1c      	ldr	r3, [pc, #112]	; (dd20 <am_hal_adc_initialize+0x7c>)
    dcb0:	78d8      	ldrb	r0, [r3, #3]
    dcb2:	f010 0501 	ands.w	r5, r0, #1
    dcb6:	d123      	bne.n	dd00 <am_hal_adc_initialize+0x5c>
    dcb8:	681a      	ldr	r2, [r3, #0]
    dcba:	481a      	ldr	r0, [pc, #104]	; (dd24 <am_hal_adc_initialize+0x80>)
    dcbc:	4c1a      	ldr	r4, [pc, #104]	; (dd28 <am_hal_adc_initialize+0x84>)
    dcbe:	f002 427e 	and.w	r2, r2, #4261412864	; 0xfe000000
    dcc2:	4302      	orrs	r2, r0
    dcc4:	4819      	ldr	r0, [pc, #100]	; (dd2c <am_hal_adc_initialize+0x88>)
    dcc6:	e9c3 2500 	strd	r2, r5, [r3]
    dcca:	6005      	str	r5, [r0, #0]
    dccc:	600b      	str	r3, [r1, #0]
    dcce:	4818      	ldr	r0, [pc, #96]	; (dd30 <am_hal_adc_initialize+0x8c>)
    dcd0:	f000 fdf2 	bl	e8b8 <am_hal_flash_load_ui32>
    dcd4:	6020      	str	r0, [r4, #0]
    dcd6:	4817      	ldr	r0, [pc, #92]	; (dd34 <am_hal_adc_initialize+0x90>)
    dcd8:	f000 fdee 	bl	e8b8 <am_hal_flash_load_ui32>
    dcdc:	4603      	mov	r3, r0
    dcde:	4816      	ldr	r0, [pc, #88]	; (dd38 <am_hal_adc_initialize+0x94>)
    dce0:	6063      	str	r3, [r4, #4]
    dce2:	f000 fde9 	bl	e8b8 <am_hal_flash_load_ui32>
    dce6:	6823      	ldr	r3, [r4, #0]
    dce8:	60a0      	str	r0, [r4, #8]
    dcea:	3301      	adds	r3, #1
    dcec:	d00a      	beq.n	dd04 <am_hal_adc_initialize+0x60>
    dcee:	6863      	ldr	r3, [r4, #4]
    dcf0:	3301      	adds	r3, #1
    dcf2:	d007      	beq.n	dd04 <am_hal_adc_initialize+0x60>
    dcf4:	3001      	adds	r0, #1
    dcf6:	d005      	beq.n	dd04 <am_hal_adc_initialize+0x60>
    dcf8:	2301      	movs	r3, #1
    dcfa:	7323      	strb	r3, [r4, #12]
    dcfc:	4628      	mov	r0, r5
    dcfe:	bd38      	pop	{r3, r4, r5, pc}
    dd00:	2007      	movs	r0, #7
    dd02:	bd38      	pop	{r3, r4, r5, pc}
    dd04:	490d      	ldr	r1, [pc, #52]	; (dd3c <am_hal_adc_initialize+0x98>)
    dd06:	4a0e      	ldr	r2, [pc, #56]	; (dd40 <am_hal_adc_initialize+0x9c>)
    dd08:	4b0e      	ldr	r3, [pc, #56]	; (dd44 <am_hal_adc_initialize+0xa0>)
    dd0a:	6021      	str	r1, [r4, #0]
    dd0c:	2000      	movs	r0, #0
    dd0e:	6062      	str	r2, [r4, #4]
    dd10:	60a3      	str	r3, [r4, #8]
    dd12:	7320      	strb	r0, [r4, #12]
    dd14:	bd38      	pop	{r3, r4, r5, pc}
    dd16:	2005      	movs	r0, #5
    dd18:	4770      	bx	lr
    dd1a:	2006      	movs	r0, #6
    dd1c:	4770      	bx	lr
    dd1e:	bf00      	nop
    dd20:	1000116c 	.word	0x1000116c
    dd24:	01afafaf 	.word	0x01afafaf
    dd28:	100011ac 	.word	0x100011ac
    dd2c:	10001168 	.word	0x10001168
    dd30:	50023840 	.word	0x50023840
    dd34:	50023844 	.word	0x50023844
    dd38:	50023848 	.word	0x50023848
    dd3c:	4395c000 	.word	0x4395c000
    dd40:	3f839874 	.word	0x3f839874
    dd44:	bb8c47a1 	.word	0xbb8c47a1

0000dd48 <am_hal_adc_configure>:
    dd48:	6803      	ldr	r3, [r0, #0]
    dd4a:	4a1b      	ldr	r2, [pc, #108]	; (ddb8 <am_hal_adc_configure+0x70>)
    dd4c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dd50:	4293      	cmp	r3, r2
    dd52:	d12e      	bne.n	ddb2 <am_hal_adc_configure+0x6a>
    dd54:	b500      	push	{lr}
    dd56:	780b      	ldrb	r3, [r1, #0]
    dd58:	7988      	ldrb	r0, [r1, #6]
    dd5a:	784a      	ldrb	r2, [r1, #1]
    dd5c:	f891 e002 	ldrb.w	lr, [r1, #2]
    dd60:	f891 c003 	ldrb.w	ip, [r1, #3]
    dd64:	061b      	lsls	r3, r3, #24
    dd66:	0080      	lsls	r0, r0, #2
    dd68:	f000 0004 	and.w	r0, r0, #4
    dd6c:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
    dd70:	04d2      	lsls	r2, r2, #19
    dd72:	4303      	orrs	r3, r0
    dd74:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
    dd78:	7908      	ldrb	r0, [r1, #4]
    dd7a:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
    dd7e:	4313      	orrs	r3, r2
    dd80:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
    dd84:	794a      	ldrb	r2, [r1, #5]
    dd86:	f40e 21e0 	and.w	r1, lr, #458752	; 0x70000
    dd8a:	430b      	orrs	r3, r1
    dd8c:	f40c 7c40 	and.w	ip, ip, #768	; 0x300
    dd90:	0101      	lsls	r1, r0, #4
    dd92:	ea43 030c 	orr.w	r3, r3, ip
    dd96:	f001 0110 	and.w	r1, r1, #16
    dd9a:	00d2      	lsls	r2, r2, #3
    dd9c:	430b      	orrs	r3, r1
    dd9e:	f002 0208 	and.w	r2, r2, #8
    dda2:	4906      	ldr	r1, [pc, #24]	; (ddbc <am_hal_adc_configure+0x74>)
    dda4:	4313      	orrs	r3, r2
    dda6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    ddaa:	600b      	str	r3, [r1, #0]
    ddac:	2000      	movs	r0, #0
    ddae:	f85d fb04 	ldr.w	pc, [sp], #4
    ddb2:	2002      	movs	r0, #2
    ddb4:	4770      	bx	lr
    ddb6:	bf00      	nop
    ddb8:	01afafaf 	.word	0x01afafaf
    ddbc:	50010000 	.word	0x50010000

0000ddc0 <am_hal_adc_configure_slot>:
    ddc0:	6803      	ldr	r3, [r0, #0]
    ddc2:	b410      	push	{r4}
    ddc4:	4c18      	ldr	r4, [pc, #96]	; (de28 <am_hal_adc_configure_slot+0x68>)
    ddc6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ddca:	42a3      	cmp	r3, r4
    ddcc:	d123      	bne.n	de16 <am_hal_adc_configure_slot+0x56>
    ddce:	2907      	cmp	r1, #7
    ddd0:	d825      	bhi.n	de1e <am_hal_adc_configure_slot+0x5e>
    ddd2:	7810      	ldrb	r0, [r2, #0]
    ddd4:	78d4      	ldrb	r4, [r2, #3]
    ddd6:	7913      	ldrb	r3, [r2, #4]
    ddd8:	f892 c001 	ldrb.w	ip, [r2, #1]
    dddc:	0600      	lsls	r0, r0, #24
    ddde:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    dde2:	f000 60e0 	and.w	r0, r0, #117440512	; 0x7000000
    dde6:	4303      	orrs	r3, r0
    dde8:	7890      	ldrb	r0, [r2, #2]
    ddea:	4a10      	ldr	r2, [pc, #64]	; (de2c <am_hal_adc_configure_slot+0x6c>)
    ddec:	4c10      	ldr	r4, [pc, #64]	; (de30 <am_hal_adc_configure_slot+0x70>)
    ddee:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
    ddf2:	0200      	lsls	r0, r0, #8
    ddf4:	440a      	add	r2, r1
    ddf6:	f40c 3c40 	and.w	ip, ip, #196608	; 0x30000
    ddfa:	f400 6170 	and.w	r1, r0, #3840	; 0xf00
    ddfe:	ea43 030c 	orr.w	r3, r3, ip
    de02:	0092      	lsls	r2, r2, #2
    de04:	430b      	orrs	r3, r1
    de06:	6013      	str	r3, [r2, #0]
    de08:	6823      	ldr	r3, [r4, #0]
    de0a:	3301      	adds	r3, #1
    de0c:	2000      	movs	r0, #0
    de0e:	6023      	str	r3, [r4, #0]
    de10:	f85d 4b04 	ldr.w	r4, [sp], #4
    de14:	4770      	bx	lr
    de16:	2002      	movs	r0, #2
    de18:	f85d 4b04 	ldr.w	r4, [sp], #4
    de1c:	4770      	bx	lr
    de1e:	2005      	movs	r0, #5
    de20:	f85d 4b04 	ldr.w	r4, [sp], #4
    de24:	4770      	bx	lr
    de26:	bf00      	nop
    de28:	01afafaf 	.word	0x01afafaf
    de2c:	14004003 	.word	0x14004003
    de30:	10001168 	.word	0x10001168

0000de34 <am_hal_adc_control>:
    de34:	6803      	ldr	r3, [r0, #0]
    de36:	b430      	push	{r4, r5}
    de38:	4c2f      	ldr	r4, [pc, #188]	; (def8 <am_hal_adc_control+0xc4>)
    de3a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    de3e:	42a3      	cmp	r3, r4
    de40:	d107      	bne.n	de52 <am_hal_adc_control+0x1e>
    de42:	2901      	cmp	r1, #1
    de44:	d02e      	beq.n	dea4 <am_hal_adc_control+0x70>
    de46:	2902      	cmp	r1, #2
    de48:	d006      	beq.n	de58 <am_hal_adc_control+0x24>
    de4a:	b1e1      	cbz	r1, de86 <am_hal_adc_control+0x52>
    de4c:	2006      	movs	r0, #6
    de4e:	bc30      	pop	{r4, r5}
    de50:	4770      	bx	lr
    de52:	2002      	movs	r0, #2
    de54:	bc30      	pop	{r4, r5}
    de56:	4770      	bx	lr
    de58:	2a00      	cmp	r2, #0
    de5a:	d0f7      	beq.n	de4c <am_hal_adc_control+0x18>
    de5c:	eddf 7a27 	vldr	s15, [pc, #156]	; defc <am_hal_adc_control+0xc8>
    de60:	ed92 7a03 	vldr	s14, [r2, #12]
    de64:	eeb4 7a67 	vcmp.f32	s14, s15
    de68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    de6c:	d13f      	bne.n	deee <am_hal_adc_control+0xba>
    de6e:	4b24      	ldr	r3, [pc, #144]	; (df00 <am_hal_adc_control+0xcc>)
    de70:	6859      	ldr	r1, [r3, #4]
    de72:	681c      	ldr	r4, [r3, #0]
    de74:	6051      	str	r1, [r2, #4]
    de76:	6899      	ldr	r1, [r3, #8]
    de78:	7b1b      	ldrb	r3, [r3, #12]
    de7a:	6014      	str	r4, [r2, #0]
    de7c:	2000      	movs	r0, #0
    de7e:	bc30      	pop	{r4, r5}
    de80:	6091      	str	r1, [r2, #8]
    de82:	60d3      	str	r3, [r2, #12]
    de84:	4770      	bx	lr
    de86:	6853      	ldr	r3, [r2, #4]
    de88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    de8c:	d231      	bcs.n	def2 <am_hal_adc_control+0xbe>
    de8e:	6895      	ldr	r5, [r2, #8]
    de90:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    de94:	d22d      	bcs.n	def2 <am_hal_adc_control+0xbe>
    de96:	4c1b      	ldr	r4, [pc, #108]	; (df04 <am_hal_adc_control+0xd0>)
    de98:	7812      	ldrb	r2, [r2, #0]
    de9a:	62e3      	str	r3, [r4, #44]	; 0x2c
    de9c:	4608      	mov	r0, r1
    de9e:	6325      	str	r5, [r4, #48]	; 0x30
    dea0:	6362      	str	r2, [r4, #52]	; 0x34
    dea2:	e7d4      	b.n	de4e <am_hal_adc_control+0x1a>
    dea4:	2a00      	cmp	r2, #0
    dea6:	d0d1      	beq.n	de4c <am_hal_adc_control+0x18>
    dea8:	eddf 7a14 	vldr	s15, [pc, #80]	; defc <am_hal_adc_control+0xc8>
    deac:	ed92 7a02 	vldr	s14, [r2, #8]
    deb0:	eeb4 7a67 	vcmp.f32	s14, s15
    deb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    deb8:	d119      	bne.n	deee <am_hal_adc_control+0xba>
    deba:	4b11      	ldr	r3, [pc, #68]	; (df00 <am_hal_adc_control+0xcc>)
    debc:	edd2 7a00 	vldr	s15, [r2]
    dec0:	edd3 6a02 	vldr	s13, [r3, #8]
    dec4:	ed93 7a01 	vldr	s14, [r3, #4]
    dec8:	ed93 6a00 	vldr	s12, [r3]
    decc:	ee37 7a66 	vsub.f32	s14, s14, s13
    ded0:	ee77 7ae6 	vsub.f32	s15, s15, s13
    ded4:	eec6 6a07 	vdiv.f32	s13, s12, s14
    ded8:	2000      	movs	r0, #0
    deda:	bc30      	pop	{r4, r5}
    dedc:	ed9f 7a0a 	vldr	s14, [pc, #40]	; df08 <am_hal_adc_control+0xd4>
    dee0:	ee67 7aa6 	vmul.f32	s15, s15, s13
    dee4:	ee77 7ac7 	vsub.f32	s15, s15, s14
    dee8:	edc2 7a01 	vstr	s15, [r2, #4]
    deec:	4770      	bx	lr
    deee:	2007      	movs	r0, #7
    def0:	e7ad      	b.n	de4e <am_hal_adc_control+0x1a>
    def2:	2005      	movs	r0, #5
    def4:	e7ab      	b.n	de4e <am_hal_adc_control+0x1a>
    def6:	bf00      	nop
    def8:	01afafaf 	.word	0x01afafaf
    defc:	c2f6e979 	.word	0xc2f6e979
    df00:	100011ac 	.word	0x100011ac
    df04:	50010000 	.word	0x50010000
    df08:	43889333 	.word	0x43889333

0000df0c <am_hal_adc_enable>:
    df0c:	6802      	ldr	r2, [r0, #0]
    df0e:	490c      	ldr	r1, [pc, #48]	; (df40 <am_hal_adc_enable+0x34>)
    df10:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    df14:	428a      	cmp	r2, r1
    df16:	4603      	mov	r3, r0
    df18:	d10f      	bne.n	df3a <am_hal_adc_enable+0x2e>
    df1a:	78c0      	ldrb	r0, [r0, #3]
    df1c:	f010 0002 	ands.w	r0, r0, #2
    df20:	d109      	bne.n	df36 <am_hal_adc_enable+0x2a>
    df22:	4908      	ldr	r1, [pc, #32]	; (df44 <am_hal_adc_enable+0x38>)
    df24:	680a      	ldr	r2, [r1, #0]
    df26:	f042 0201 	orr.w	r2, r2, #1
    df2a:	600a      	str	r2, [r1, #0]
    df2c:	78da      	ldrb	r2, [r3, #3]
    df2e:	f042 0202 	orr.w	r2, r2, #2
    df32:	70da      	strb	r2, [r3, #3]
    df34:	4770      	bx	lr
    df36:	2000      	movs	r0, #0
    df38:	4770      	bx	lr
    df3a:	2002      	movs	r0, #2
    df3c:	4770      	bx	lr
    df3e:	bf00      	nop
    df40:	01afafaf 	.word	0x01afafaf
    df44:	50010000 	.word	0x50010000

0000df48 <am_hal_adc_interrupt_enable>:
    df48:	6803      	ldr	r3, [r0, #0]
    df4a:	4a07      	ldr	r2, [pc, #28]	; (df68 <am_hal_adc_interrupt_enable+0x20>)
    df4c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    df50:	4293      	cmp	r3, r2
    df52:	d107      	bne.n	df64 <am_hal_adc_interrupt_enable+0x1c>
    df54:	4a05      	ldr	r2, [pc, #20]	; (df6c <am_hal_adc_interrupt_enable+0x24>)
    df56:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    df5a:	4319      	orrs	r1, r3
    df5c:	2000      	movs	r0, #0
    df5e:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    df62:	4770      	bx	lr
    df64:	2002      	movs	r0, #2
    df66:	4770      	bx	lr
    df68:	01afafaf 	.word	0x01afafaf
    df6c:	50010000 	.word	0x50010000

0000df70 <am_hal_adc_interrupt_status>:
    df70:	6803      	ldr	r3, [r0, #0]
    df72:	b410      	push	{r4}
    df74:	4c0e      	ldr	r4, [pc, #56]	; (dfb0 <am_hal_adc_interrupt_status+0x40>)
    df76:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    df7a:	42a3      	cmp	r3, r4
    df7c:	d113      	bne.n	dfa6 <am_hal_adc_interrupt_status+0x36>
    df7e:	b93a      	cbnz	r2, df90 <am_hal_adc_interrupt_status+0x20>
    df80:	4b0c      	ldr	r3, [pc, #48]	; (dfb4 <am_hal_adc_interrupt_status+0x44>)
    df82:	f85d 4b04 	ldr.w	r4, [sp], #4
    df86:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    df8a:	600b      	str	r3, [r1, #0]
    df8c:	4610      	mov	r0, r2
    df8e:	4770      	bx	lr
    df90:	4a08      	ldr	r2, [pc, #32]	; (dfb4 <am_hal_adc_interrupt_status+0x44>)
    df92:	f8d2 4204 	ldr.w	r4, [r2, #516]	; 0x204
    df96:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    df9a:	4023      	ands	r3, r4
    df9c:	2000      	movs	r0, #0
    df9e:	f85d 4b04 	ldr.w	r4, [sp], #4
    dfa2:	600b      	str	r3, [r1, #0]
    dfa4:	4770      	bx	lr
    dfa6:	2002      	movs	r0, #2
    dfa8:	f85d 4b04 	ldr.w	r4, [sp], #4
    dfac:	4770      	bx	lr
    dfae:	bf00      	nop
    dfb0:	01afafaf 	.word	0x01afafaf
    dfb4:	50010000 	.word	0x50010000

0000dfb8 <am_hal_adc_interrupt_clear>:
    dfb8:	6803      	ldr	r3, [r0, #0]
    dfba:	4a05      	ldr	r2, [pc, #20]	; (dfd0 <am_hal_adc_interrupt_clear+0x18>)
    dfbc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dfc0:	4293      	cmp	r3, r2
    dfc2:	bf03      	ittte	eq
    dfc4:	4b03      	ldreq	r3, [pc, #12]	; (dfd4 <am_hal_adc_interrupt_clear+0x1c>)
    dfc6:	2000      	moveq	r0, #0
    dfc8:	f8c3 1208 	streq.w	r1, [r3, #520]	; 0x208
    dfcc:	2002      	movne	r0, #2
    dfce:	4770      	bx	lr
    dfd0:	01afafaf 	.word	0x01afafaf
    dfd4:	50010000 	.word	0x50010000

0000dfd8 <am_hal_adc_samples_read>:
    dfd8:	6800      	ldr	r0, [r0, #0]
    dfda:	b470      	push	{r4, r5, r6}
    dfdc:	4c2b      	ldr	r4, [pc, #172]	; (e08c <am_hal_adc_samples_read+0xb4>)
    dfde:	9d03      	ldr	r5, [sp, #12]
    dfe0:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
    dfe4:	42a0      	cmp	r0, r4
    dfe6:	d11c      	bne.n	e022 <am_hal_adc_samples_read+0x4a>
    dfe8:	2d00      	cmp	r5, #0
    dfea:	d04d      	beq.n	e088 <am_hal_adc_samples_read+0xb0>
    dfec:	2000      	movs	r0, #0
    dfee:	681c      	ldr	r4, [r3, #0]
    dff0:	6018      	str	r0, [r3, #0]
    dff2:	b1ca      	cbz	r2, e028 <am_hal_adc_samples_read+0x50>
    dff4:	f105 0108 	add.w	r1, r5, #8
    dff8:	1f10      	subs	r0, r2, #4
    dffa:	f850 2f04 	ldr.w	r2, [r0, #4]!
    dffe:	3108      	adds	r1, #8
    e000:	f3c2 7202 	ubfx	r2, r2, #28, #3
    e004:	f841 2c0c 	str.w	r2, [r1, #-12]
    e008:	6802      	ldr	r2, [r0, #0]
    e00a:	f3c2 128d 	ubfx	r2, r2, #6, #14
    e00e:	f841 2c10 	str.w	r2, [r1, #-16]
    e012:	681a      	ldr	r2, [r3, #0]
    e014:	3201      	adds	r2, #1
    e016:	42a2      	cmp	r2, r4
    e018:	601a      	str	r2, [r3, #0]
    e01a:	d3ee      	bcc.n	dffa <am_hal_adc_samples_read+0x22>
    e01c:	2000      	movs	r0, #0
    e01e:	bc70      	pop	{r4, r5, r6}
    e020:	4770      	bx	lr
    e022:	2002      	movs	r0, #2
    e024:	bc70      	pop	{r4, r5, r6}
    e026:	4770      	bx	lr
    e028:	4e19      	ldr	r6, [pc, #100]	; (e090 <am_hal_adc_samples_read+0xb8>)
    e02a:	b9b1      	cbnz	r1, e05a <am_hal_adc_samples_read+0x82>
    e02c:	f105 0108 	add.w	r1, r5, #8
    e030:	e001      	b.n	e036 <am_hal_adc_samples_read+0x5e>
    e032:	4294      	cmp	r4, r2
    e034:	d9f2      	bls.n	e01c <am_hal_adc_samples_read+0x44>
    e036:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
    e038:	3108      	adds	r1, #8
    e03a:	f3c0 7202 	ubfx	r2, r0, #28, #3
    e03e:	f841 2c0c 	str.w	r2, [r1, #-12]
    e042:	f3c0 128d 	ubfx	r2, r0, #6, #14
    e046:	f841 2c10 	str.w	r2, [r1, #-16]
    e04a:	681a      	ldr	r2, [r3, #0]
    e04c:	f010 6f7f 	tst.w	r0, #267386880	; 0xff00000
    e050:	f102 0201 	add.w	r2, r2, #1
    e054:	601a      	str	r2, [r3, #0]
    e056:	d1ec      	bne.n	e032 <am_hal_adc_samples_read+0x5a>
    e058:	e7e0      	b.n	e01c <am_hal_adc_samples_read+0x44>
    e05a:	f105 0108 	add.w	r1, r5, #8
    e05e:	e001      	b.n	e064 <am_hal_adc_samples_read+0x8c>
    e060:	42a2      	cmp	r2, r4
    e062:	d2db      	bcs.n	e01c <am_hal_adc_samples_read+0x44>
    e064:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
    e066:	3108      	adds	r1, #8
    e068:	f3c0 7202 	ubfx	r2, r0, #28, #3
    e06c:	f841 2c0c 	str.w	r2, [r1, #-12]
    e070:	f3c0 0213 	ubfx	r2, r0, #0, #20
    e074:	f841 2c10 	str.w	r2, [r1, #-16]
    e078:	681a      	ldr	r2, [r3, #0]
    e07a:	f010 6f7f 	tst.w	r0, #267386880	; 0xff00000
    e07e:	f102 0201 	add.w	r2, r2, #1
    e082:	601a      	str	r2, [r3, #0]
    e084:	d1ec      	bne.n	e060 <am_hal_adc_samples_read+0x88>
    e086:	e7c9      	b.n	e01c <am_hal_adc_samples_read+0x44>
    e088:	2006      	movs	r0, #6
    e08a:	e7c8      	b.n	e01e <am_hal_adc_samples_read+0x46>
    e08c:	01afafaf 	.word	0x01afafaf
    e090:	50010000 	.word	0x50010000

0000e094 <am_hal_adc_sw_trigger>:
    e094:	6803      	ldr	r3, [r0, #0]
    e096:	4a06      	ldr	r2, [pc, #24]	; (e0b0 <am_hal_adc_sw_trigger+0x1c>)
    e098:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e09c:	4293      	cmp	r3, r2
    e09e:	d104      	bne.n	e0aa <am_hal_adc_sw_trigger+0x16>
    e0a0:	4b04      	ldr	r3, [pc, #16]	; (e0b4 <am_hal_adc_sw_trigger+0x20>)
    e0a2:	2237      	movs	r2, #55	; 0x37
    e0a4:	609a      	str	r2, [r3, #8]
    e0a6:	2000      	movs	r0, #0
    e0a8:	4770      	bx	lr
    e0aa:	2002      	movs	r0, #2
    e0ac:	4770      	bx	lr
    e0ae:	bf00      	nop
    e0b0:	01afafaf 	.word	0x01afafaf
    e0b4:	50010000 	.word	0x50010000

0000e0b8 <am_hal_adc_power_control>:
    e0b8:	b510      	push	{r4, lr}
    e0ba:	4604      	mov	r4, r0
    e0bc:	4831      	ldr	r0, [pc, #196]	; (e184 <am_hal_adc_power_control+0xcc>)
    e0be:	6823      	ldr	r3, [r4, #0]
    e0c0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e0c4:	4283      	cmp	r3, r0
    e0c6:	b082      	sub	sp, #8
    e0c8:	d150      	bne.n	e16c <am_hal_adc_power_control+0xb4>
    e0ca:	b329      	cbz	r1, e118 <am_hal_adc_power_control+0x60>
    e0cc:	3901      	subs	r1, #1
    e0ce:	2901      	cmp	r1, #1
    e0d0:	d849      	bhi.n	e166 <am_hal_adc_power_control+0xae>
    e0d2:	b1da      	cbz	r2, e10c <am_hal_adc_power_control+0x54>
    e0d4:	4b2c      	ldr	r3, [pc, #176]	; (e188 <am_hal_adc_power_control+0xd0>)
    e0d6:	68d9      	ldr	r1, [r3, #12]
    e0d8:	6161      	str	r1, [r4, #20]
    e0da:	6919      	ldr	r1, [r3, #16]
    e0dc:	61a1      	str	r1, [r4, #24]
    e0de:	6959      	ldr	r1, [r3, #20]
    e0e0:	61e1      	str	r1, [r4, #28]
    e0e2:	6999      	ldr	r1, [r3, #24]
    e0e4:	6221      	str	r1, [r4, #32]
    e0e6:	69d9      	ldr	r1, [r3, #28]
    e0e8:	6261      	str	r1, [r4, #36]	; 0x24
    e0ea:	6a19      	ldr	r1, [r3, #32]
    e0ec:	62a1      	str	r1, [r4, #40]	; 0x28
    e0ee:	6a59      	ldr	r1, [r3, #36]	; 0x24
    e0f0:	62e1      	str	r1, [r4, #44]	; 0x2c
    e0f2:	6a99      	ldr	r1, [r3, #40]	; 0x28
    e0f4:	6321      	str	r1, [r4, #48]	; 0x30
    e0f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    e0f8:	6361      	str	r1, [r4, #52]	; 0x34
    e0fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
    e0fc:	63a1      	str	r1, [r4, #56]	; 0x38
    e0fe:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
    e102:	63e1      	str	r1, [r4, #60]	; 0x3c
    e104:	681b      	ldr	r3, [r3, #0]
    e106:	6123      	str	r3, [r4, #16]
    e108:	2201      	movs	r2, #1
    e10a:	7322      	strb	r2, [r4, #12]
    e10c:	200a      	movs	r0, #10
    e10e:	f000 fe9b 	bl	ee48 <am_hal_pwrctrl_periph_disable>
    e112:	2000      	movs	r0, #0
    e114:	b002      	add	sp, #8
    e116:	bd10      	pop	{r4, pc}
    e118:	2a00      	cmp	r2, #0
    e11a:	d02a      	beq.n	e172 <am_hal_adc_power_control+0xba>
    e11c:	7b23      	ldrb	r3, [r4, #12]
    e11e:	2b00      	cmp	r3, #0
    e120:	d02e      	beq.n	e180 <am_hal_adc_power_control+0xc8>
    e122:	200a      	movs	r0, #10
    e124:	9101      	str	r1, [sp, #4]
    e126:	f000 fe65 	bl	edf4 <am_hal_pwrctrl_periph_enable>
    e12a:	4b17      	ldr	r3, [pc, #92]	; (e188 <am_hal_adc_power_control+0xd0>)
    e12c:	6962      	ldr	r2, [r4, #20]
    e12e:	60da      	str	r2, [r3, #12]
    e130:	69a2      	ldr	r2, [r4, #24]
    e132:	611a      	str	r2, [r3, #16]
    e134:	69e2      	ldr	r2, [r4, #28]
    e136:	615a      	str	r2, [r3, #20]
    e138:	6a22      	ldr	r2, [r4, #32]
    e13a:	619a      	str	r2, [r3, #24]
    e13c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    e13e:	61da      	str	r2, [r3, #28]
    e140:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    e142:	621a      	str	r2, [r3, #32]
    e144:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    e146:	625a      	str	r2, [r3, #36]	; 0x24
    e148:	6b22      	ldr	r2, [r4, #48]	; 0x30
    e14a:	629a      	str	r2, [r3, #40]	; 0x28
    e14c:	6b62      	ldr	r2, [r4, #52]	; 0x34
    e14e:	62da      	str	r2, [r3, #44]	; 0x2c
    e150:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e152:	631a      	str	r2, [r3, #48]	; 0x30
    e154:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    e156:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    e15a:	9901      	ldr	r1, [sp, #4]
    e15c:	6922      	ldr	r2, [r4, #16]
    e15e:	601a      	str	r2, [r3, #0]
    e160:	4608      	mov	r0, r1
    e162:	7321      	strb	r1, [r4, #12]
    e164:	e000      	b.n	e168 <am_hal_adc_power_control+0xb0>
    e166:	2006      	movs	r0, #6
    e168:	b002      	add	sp, #8
    e16a:	bd10      	pop	{r4, pc}
    e16c:	2002      	movs	r0, #2
    e16e:	b002      	add	sp, #8
    e170:	bd10      	pop	{r4, pc}
    e172:	200a      	movs	r0, #10
    e174:	9201      	str	r2, [sp, #4]
    e176:	f000 fe3d 	bl	edf4 <am_hal_pwrctrl_periph_enable>
    e17a:	9a01      	ldr	r2, [sp, #4]
    e17c:	4610      	mov	r0, r2
    e17e:	e7f3      	b.n	e168 <am_hal_adc_power_control+0xb0>
    e180:	2007      	movs	r0, #7
    e182:	e7f1      	b.n	e168 <am_hal_adc_power_control+0xb0>
    e184:	01afafaf 	.word	0x01afafaf
    e188:	50010000 	.word	0x50010000

0000e18c <am_hal_cachectrl_config>:
    e18c:	b530      	push	{r4, r5, lr}
    e18e:	b083      	sub	sp, #12
    e190:	4604      	mov	r4, r0
    e192:	f000 fd4f 	bl	ec34 <am_hal_interrupt_master_disable>
    e196:	4d0e      	ldr	r5, [pc, #56]	; (e1d0 <am_hal_cachectrl_config+0x44>)
    e198:	9001      	str	r0, [sp, #4]
    e19a:	682b      	ldr	r3, [r5, #0]
    e19c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    e1a0:	602b      	str	r3, [r5, #0]
    e1a2:	9801      	ldr	r0, [sp, #4]
    e1a4:	f000 fd4a 	bl	ec3c <am_hal_interrupt_master_set>
    e1a8:	7863      	ldrb	r3, [r4, #1]
    e1aa:	7822      	ldrb	r2, [r4, #0]
    e1ac:	78a1      	ldrb	r1, [r4, #2]
    e1ae:	021b      	lsls	r3, r3, #8
    e1b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
    e1b4:	0112      	lsls	r2, r2, #4
    e1b6:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    e1ba:	b2d2      	uxtb	r2, r2
    e1bc:	4313      	orrs	r3, r2
    e1be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    e1c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    e1c6:	2000      	movs	r0, #0
    e1c8:	602b      	str	r3, [r5, #0]
    e1ca:	b003      	add	sp, #12
    e1cc:	bd30      	pop	{r4, r5, pc}
    e1ce:	bf00      	nop
    e1d0:	40018000 	.word	0x40018000

0000e1d4 <am_hal_cachectrl_enable>:
    e1d4:	4a03      	ldr	r2, [pc, #12]	; (e1e4 <am_hal_cachectrl_enable+0x10>)
    e1d6:	6813      	ldr	r3, [r2, #0]
    e1d8:	f043 0301 	orr.w	r3, r3, #1
    e1dc:	2000      	movs	r0, #0
    e1de:	6013      	str	r3, [r2, #0]
    e1e0:	4770      	bx	lr
    e1e2:	bf00      	nop
    e1e4:	40018000 	.word	0x40018000

0000e1e8 <am_hal_cachectrl_control>:
    e1e8:	b510      	push	{r4, lr}
    e1ea:	3801      	subs	r0, #1
    e1ec:	b08e      	sub	sp, #56	; 0x38
    e1ee:	2810      	cmp	r0, #16
    e1f0:	f200 815e 	bhi.w	e4b0 <am_hal_cachectrl_control+0x2c8>
    e1f4:	e8df f010 	tbh	[pc, r0, lsl #1]
    e1f8:	00360018 	.word	0x00360018
    e1fc:	0040003d 	.word	0x0040003d
    e200:	00450043 	.word	0x00450043
    e204:	0011001a 	.word	0x0011001a
    e208:	00540047 	.word	0x00540047
    e20c:	009a0061 	.word	0x009a0061
    e210:	010c00d3 	.word	0x010c00d3
    e214:	013f0126 	.word	0x013f0126
    e218:	001d      	.short	0x001d
    e21a:	f44f 7300 	mov.w	r3, #512	; 0x200
    e21e:	4aac      	ldr	r2, [pc, #688]	; (e4d0 <am_hal_cachectrl_control+0x2e8>)
    e220:	2000      	movs	r0, #0
    e222:	6093      	str	r3, [r2, #8]
    e224:	b00e      	add	sp, #56	; 0x38
    e226:	bd10      	pop	{r4, pc}
    e228:	2301      	movs	r3, #1
    e22a:	e7f8      	b.n	e21e <am_hal_cachectrl_control+0x36>
    e22c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    e230:	e7f5      	b.n	e21e <am_hal_cachectrl_control+0x36>
    e232:	2900      	cmp	r1, #0
    e234:	f000 813c 	beq.w	e4b0 <am_hal_cachectrl_control+0x2c8>
    e238:	684a      	ldr	r2, [r1, #4]
    e23a:	48a6      	ldr	r0, [pc, #664]	; (e4d4 <am_hal_cachectrl_control+0x2ec>)
    e23c:	4202      	tst	r2, r0
    e23e:	f040 8137 	bne.w	e4b0 <am_hal_cachectrl_control+0x2c8>
    e242:	688b      	ldr	r3, [r1, #8]
    e244:	4018      	ands	r0, r3
    e246:	f040 8133 	bne.w	e4b0 <am_hal_cachectrl_control+0x2c8>
    e24a:	780c      	ldrb	r4, [r1, #0]
    e24c:	2c00      	cmp	r4, #0
    e24e:	f040 8133 	bne.w	e4b8 <am_hal_cachectrl_control+0x2d0>
    e252:	4c9f      	ldr	r4, [pc, #636]	; (e4d0 <am_hal_cachectrl_control+0x2e8>)
    e254:	7849      	ldrb	r1, [r1, #1]
    e256:	6122      	str	r2, [r4, #16]
    e258:	6163      	str	r3, [r4, #20]
    e25a:	6823      	ldr	r3, [r4, #0]
    e25c:	f361 0382 	bfi	r3, r1, #2, #1
    e260:	6023      	str	r3, [r4, #0]
    e262:	e7df      	b.n	e224 <am_hal_cachectrl_control+0x3c>
    e264:	4b9a      	ldr	r3, [pc, #616]	; (e4d0 <am_hal_cachectrl_control+0x2e8>)
    e266:	681b      	ldr	r3, [r3, #0]
    e268:	01db      	lsls	r3, r3, #7
    e26a:	f140 811f 	bpl.w	e4ac <am_hal_cachectrl_control+0x2c4>
    e26e:	2302      	movs	r3, #2
    e270:	e7d5      	b.n	e21e <am_hal_cachectrl_control+0x36>
    e272:	f44f 6388 	mov.w	r3, #1088	; 0x440
    e276:	e7d2      	b.n	e21e <am_hal_cachectrl_control+0x36>
    e278:	f44f 7308 	mov.w	r3, #544	; 0x220
    e27c:	e7cf      	b.n	e21e <am_hal_cachectrl_control+0x36>
    e27e:	2340      	movs	r3, #64	; 0x40
    e280:	e7cd      	b.n	e21e <am_hal_cachectrl_control+0x36>
    e282:	2320      	movs	r3, #32
    e284:	e7cb      	b.n	e21e <am_hal_cachectrl_control+0x36>
    e286:	f000 fcd5 	bl	ec34 <am_hal_interrupt_master_disable>
    e28a:	4a91      	ldr	r2, [pc, #580]	; (e4d0 <am_hal_cachectrl_control+0x2e8>)
    e28c:	9000      	str	r0, [sp, #0]
    e28e:	6813      	ldr	r3, [r2, #0]
    e290:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    e294:	6013      	str	r3, [r2, #0]
    e296:	9800      	ldr	r0, [sp, #0]
    e298:	f000 fcd0 	bl	ec3c <am_hal_interrupt_master_set>
    e29c:	2000      	movs	r0, #0
    e29e:	e7c1      	b.n	e224 <am_hal_cachectrl_control+0x3c>
    e2a0:	f000 fcc8 	bl	ec34 <am_hal_interrupt_master_disable>
    e2a4:	4a8a      	ldr	r2, [pc, #552]	; (e4d0 <am_hal_cachectrl_control+0x2e8>)
    e2a6:	9001      	str	r0, [sp, #4]
    e2a8:	6813      	ldr	r3, [r2, #0]
    e2aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    e2ae:	6013      	str	r3, [r2, #0]
    e2b0:	9801      	ldr	r0, [sp, #4]
    e2b2:	f000 fcc3 	bl	ec3c <am_hal_interrupt_master_set>
    e2b6:	2000      	movs	r0, #0
    e2b8:	e7b4      	b.n	e224 <am_hal_cachectrl_control+0x3c>
    e2ba:	f000 fcbb 	bl	ec34 <am_hal_interrupt_master_disable>
    e2be:	4603      	mov	r3, r0
    e2c0:	4885      	ldr	r0, [pc, #532]	; (e4d8 <am_hal_cachectrl_control+0x2f0>)
    e2c2:	9302      	str	r3, [sp, #8]
    e2c4:	f000 faf8 	bl	e8b8 <am_hal_flash_load_ui32>
    e2c8:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    e2cc:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    e2d0:	4881      	ldr	r0, [pc, #516]	; (e4d8 <am_hal_cachectrl_control+0x2f0>)
    e2d2:	f000 faf5 	bl	e8c0 <am_hal_flash_store_ui32>
    e2d6:	9802      	ldr	r0, [sp, #8]
    e2d8:	f000 fcb0 	bl	ec3c <am_hal_interrupt_master_set>
    e2dc:	f000 fcaa 	bl	ec34 <am_hal_interrupt_master_disable>
    e2e0:	4603      	mov	r3, r0
    e2e2:	487d      	ldr	r0, [pc, #500]	; (e4d8 <am_hal_cachectrl_control+0x2f0>)
    e2e4:	9303      	str	r3, [sp, #12]
    e2e6:	f000 fae7 	bl	e8b8 <am_hal_flash_load_ui32>
    e2ea:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    e2ee:	f440 61ee 	orr.w	r1, r0, #1904	; 0x770
    e2f2:	4879      	ldr	r0, [pc, #484]	; (e4d8 <am_hal_cachectrl_control+0x2f0>)
    e2f4:	f000 fae4 	bl	e8c0 <am_hal_flash_store_ui32>
    e2f8:	9803      	ldr	r0, [sp, #12]
    e2fa:	f000 fc9f 	bl	ec3c <am_hal_interrupt_master_set>
    e2fe:	f000 fc99 	bl	ec34 <am_hal_interrupt_master_disable>
    e302:	4603      	mov	r3, r0
    e304:	4874      	ldr	r0, [pc, #464]	; (e4d8 <am_hal_cachectrl_control+0x2f0>)
    e306:	9304      	str	r3, [sp, #16]
    e308:	f000 fad6 	bl	e8b8 <am_hal_flash_load_ui32>
    e30c:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    e310:	f020 000f 	bic.w	r0, r0, #15
    e314:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    e318:	f041 0103 	orr.w	r1, r1, #3
    e31c:	486e      	ldr	r0, [pc, #440]	; (e4d8 <am_hal_cachectrl_control+0x2f0>)
    e31e:	f000 facf 	bl	e8c0 <am_hal_flash_store_ui32>
    e322:	9804      	ldr	r0, [sp, #16]
    e324:	f000 fc8a 	bl	ec3c <am_hal_interrupt_master_set>
    e328:	2000      	movs	r0, #0
    e32a:	e77b      	b.n	e224 <am_hal_cachectrl_control+0x3c>
    e32c:	f000 fc82 	bl	ec34 <am_hal_interrupt_master_disable>
    e330:	4603      	mov	r3, r0
    e332:	4869      	ldr	r0, [pc, #420]	; (e4d8 <am_hal_cachectrl_control+0x2f0>)
    e334:	9305      	str	r3, [sp, #20]
    e336:	f000 fabf 	bl	e8b8 <am_hal_flash_load_ui32>
    e33a:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    e33e:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    e342:	4865      	ldr	r0, [pc, #404]	; (e4d8 <am_hal_cachectrl_control+0x2f0>)
    e344:	f000 fabc 	bl	e8c0 <am_hal_flash_store_ui32>
    e348:	9805      	ldr	r0, [sp, #20]
    e34a:	f000 fc77 	bl	ec3c <am_hal_interrupt_master_set>
    e34e:	f000 fc71 	bl	ec34 <am_hal_interrupt_master_disable>
    e352:	4603      	mov	r3, r0
    e354:	4860      	ldr	r0, [pc, #384]	; (e4d8 <am_hal_cachectrl_control+0x2f0>)
    e356:	9306      	str	r3, [sp, #24]
    e358:	f000 faae 	bl	e8b8 <am_hal_flash_load_ui32>
    e35c:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    e360:	f440 61ea 	orr.w	r1, r0, #1872	; 0x750
    e364:	485c      	ldr	r0, [pc, #368]	; (e4d8 <am_hal_cachectrl_control+0x2f0>)
    e366:	f000 faab 	bl	e8c0 <am_hal_flash_store_ui32>
    e36a:	9806      	ldr	r0, [sp, #24]
    e36c:	f000 fc66 	bl	ec3c <am_hal_interrupt_master_set>
    e370:	f000 fc60 	bl	ec34 <am_hal_interrupt_master_disable>
    e374:	4603      	mov	r3, r0
    e376:	4858      	ldr	r0, [pc, #352]	; (e4d8 <am_hal_cachectrl_control+0x2f0>)
    e378:	9307      	str	r3, [sp, #28]
    e37a:	f000 fa9d 	bl	e8b8 <am_hal_flash_load_ui32>
    e37e:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    e382:	f020 000f 	bic.w	r0, r0, #15
    e386:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    e38a:	f041 0101 	orr.w	r1, r1, #1
    e38e:	4852      	ldr	r0, [pc, #328]	; (e4d8 <am_hal_cachectrl_control+0x2f0>)
    e390:	f000 fa96 	bl	e8c0 <am_hal_flash_store_ui32>
    e394:	9807      	ldr	r0, [sp, #28]
    e396:	f000 fc51 	bl	ec3c <am_hal_interrupt_master_set>
    e39a:	2000      	movs	r0, #0
    e39c:	e742      	b.n	e224 <am_hal_cachectrl_control+0x3c>
    e39e:	f000 fc49 	bl	ec34 <am_hal_interrupt_master_disable>
    e3a2:	4603      	mov	r3, r0
    e3a4:	484c      	ldr	r0, [pc, #304]	; (e4d8 <am_hal_cachectrl_control+0x2f0>)
    e3a6:	9308      	str	r3, [sp, #32]
    e3a8:	f000 fa86 	bl	e8b8 <am_hal_flash_load_ui32>
    e3ac:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    e3b0:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    e3b4:	4848      	ldr	r0, [pc, #288]	; (e4d8 <am_hal_cachectrl_control+0x2f0>)
    e3b6:	f000 fa83 	bl	e8c0 <am_hal_flash_store_ui32>
    e3ba:	9808      	ldr	r0, [sp, #32]
    e3bc:	f000 fc3e 	bl	ec3c <am_hal_interrupt_master_set>
    e3c0:	f000 fc38 	bl	ec34 <am_hal_interrupt_master_disable>
    e3c4:	4603      	mov	r3, r0
    e3c6:	4844      	ldr	r0, [pc, #272]	; (e4d8 <am_hal_cachectrl_control+0x2f0>)
    e3c8:	9309      	str	r3, [sp, #36]	; 0x24
    e3ca:	f000 fa75 	bl	e8b8 <am_hal_flash_load_ui32>
    e3ce:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    e3d2:	f440 61ec 	orr.w	r1, r0, #1888	; 0x760
    e3d6:	4840      	ldr	r0, [pc, #256]	; (e4d8 <am_hal_cachectrl_control+0x2f0>)
    e3d8:	f000 fa72 	bl	e8c0 <am_hal_flash_store_ui32>
    e3dc:	9809      	ldr	r0, [sp, #36]	; 0x24
    e3de:	f000 fc2d 	bl	ec3c <am_hal_interrupt_master_set>
    e3e2:	f000 fc27 	bl	ec34 <am_hal_interrupt_master_disable>
    e3e6:	4603      	mov	r3, r0
    e3e8:	483b      	ldr	r0, [pc, #236]	; (e4d8 <am_hal_cachectrl_control+0x2f0>)
    e3ea:	930a      	str	r3, [sp, #40]	; 0x28
    e3ec:	f000 fa64 	bl	e8b8 <am_hal_flash_load_ui32>
    e3f0:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    e3f4:	f020 000f 	bic.w	r0, r0, #15
    e3f8:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    e3fc:	f041 0101 	orr.w	r1, r1, #1
    e400:	4835      	ldr	r0, [pc, #212]	; (e4d8 <am_hal_cachectrl_control+0x2f0>)
    e402:	f000 fa5d 	bl	e8c0 <am_hal_flash_store_ui32>
    e406:	980a      	ldr	r0, [sp, #40]	; 0x28
    e408:	f000 fc18 	bl	ec3c <am_hal_interrupt_master_set>
    e40c:	2000      	movs	r0, #0
    e40e:	e709      	b.n	e224 <am_hal_cachectrl_control+0x3c>
    e410:	2900      	cmp	r1, #0
    e412:	d04d      	beq.n	e4b0 <am_hal_cachectrl_control+0x2c8>
    e414:	680c      	ldr	r4, [r1, #0]
    e416:	2c03      	cmp	r4, #3
    e418:	d84c      	bhi.n	e4b4 <am_hal_cachectrl_control+0x2cc>
    e41a:	f000 fc0b 	bl	ec34 <am_hal_interrupt_master_disable>
    e41e:	4603      	mov	r3, r0
    e420:	482d      	ldr	r0, [pc, #180]	; (e4d8 <am_hal_cachectrl_control+0x2f0>)
    e422:	930b      	str	r3, [sp, #44]	; 0x2c
    e424:	f000 fa48 	bl	e8b8 <am_hal_flash_load_ui32>
    e428:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    e42c:	ea40 3104 	orr.w	r1, r0, r4, lsl #12
    e430:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    e434:	4828      	ldr	r0, [pc, #160]	; (e4d8 <am_hal_cachectrl_control+0x2f0>)
    e436:	f000 fa43 	bl	e8c0 <am_hal_flash_store_ui32>
    e43a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    e43c:	f000 fbfe 	bl	ec3c <am_hal_interrupt_master_set>
    e440:	2000      	movs	r0, #0
    e442:	e6ef      	b.n	e224 <am_hal_cachectrl_control+0x3c>
    e444:	b3a1      	cbz	r1, e4b0 <am_hal_cachectrl_control+0x2c8>
    e446:	680c      	ldr	r4, [r1, #0]
    e448:	2c07      	cmp	r4, #7
    e44a:	d833      	bhi.n	e4b4 <am_hal_cachectrl_control+0x2cc>
    e44c:	f000 fbf2 	bl	ec34 <am_hal_interrupt_master_disable>
    e450:	4603      	mov	r3, r0
    e452:	4821      	ldr	r0, [pc, #132]	; (e4d8 <am_hal_cachectrl_control+0x2f0>)
    e454:	930c      	str	r3, [sp, #48]	; 0x30
    e456:	f000 fa2f 	bl	e8b8 <am_hal_flash_load_ui32>
    e45a:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    e45e:	ea40 1104 	orr.w	r1, r0, r4, lsl #4
    e462:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    e466:	481c      	ldr	r0, [pc, #112]	; (e4d8 <am_hal_cachectrl_control+0x2f0>)
    e468:	f000 fa2a 	bl	e8c0 <am_hal_flash_store_ui32>
    e46c:	980c      	ldr	r0, [sp, #48]	; 0x30
    e46e:	f000 fbe5 	bl	ec3c <am_hal_interrupt_master_set>
    e472:	2000      	movs	r0, #0
    e474:	e6d6      	b.n	e224 <am_hal_cachectrl_control+0x3c>
    e476:	b1d9      	cbz	r1, e4b0 <am_hal_cachectrl_control+0x2c8>
    e478:	680c      	ldr	r4, [r1, #0]
    e47a:	2c0f      	cmp	r4, #15
    e47c:	d81a      	bhi.n	e4b4 <am_hal_cachectrl_control+0x2cc>
    e47e:	f000 fbd9 	bl	ec34 <am_hal_interrupt_master_disable>
    e482:	4603      	mov	r3, r0
    e484:	4814      	ldr	r0, [pc, #80]	; (e4d8 <am_hal_cachectrl_control+0x2f0>)
    e486:	930d      	str	r3, [sp, #52]	; 0x34
    e488:	f000 fa16 	bl	e8b8 <am_hal_flash_load_ui32>
    e48c:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    e490:	f020 000f 	bic.w	r0, r0, #15
    e494:	ea40 0104 	orr.w	r1, r0, r4
    e498:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    e49c:	480e      	ldr	r0, [pc, #56]	; (e4d8 <am_hal_cachectrl_control+0x2f0>)
    e49e:	f000 fa0f 	bl	e8c0 <am_hal_flash_store_ui32>
    e4a2:	980d      	ldr	r0, [sp, #52]	; 0x34
    e4a4:	f000 fbca 	bl	ec3c <am_hal_interrupt_master_set>
    e4a8:	2000      	movs	r0, #0
    e4aa:	e6bb      	b.n	e224 <am_hal_cachectrl_control+0x3c>
    e4ac:	2007      	movs	r0, #7
    e4ae:	e6b9      	b.n	e224 <am_hal_cachectrl_control+0x3c>
    e4b0:	2006      	movs	r0, #6
    e4b2:	e6b7      	b.n	e224 <am_hal_cachectrl_control+0x3c>
    e4b4:	2001      	movs	r0, #1
    e4b6:	e6b5      	b.n	e224 <am_hal_cachectrl_control+0x3c>
    e4b8:	2c01      	cmp	r4, #1
    e4ba:	d1f9      	bne.n	e4b0 <am_hal_cachectrl_control+0x2c8>
    e4bc:	4c04      	ldr	r4, [pc, #16]	; (e4d0 <am_hal_cachectrl_control+0x2e8>)
    e4be:	7849      	ldrb	r1, [r1, #1]
    e4c0:	61a2      	str	r2, [r4, #24]
    e4c2:	61e3      	str	r3, [r4, #28]
    e4c4:	6823      	ldr	r3, [r4, #0]
    e4c6:	f361 03c3 	bfi	r3, r1, #3, #1
    e4ca:	6023      	str	r3, [r4, #0]
    e4cc:	e6aa      	b.n	e224 <am_hal_cachectrl_control+0x3c>
    e4ce:	bf00      	nop
    e4d0:	40018000 	.word	0x40018000
    e4d4:	f800000f 	.word	0xf800000f
    e4d8:	40018004 	.word	0x40018004

0000e4dc <am_hal_clkgen_control>:
    e4dc:	4b49      	ldr	r3, [pc, #292]	; (e604 <am_hal_clkgen_control+0x128>)
    e4de:	681a      	ldr	r2, [r3, #0]
    e4e0:	b912      	cbnz	r2, e4e8 <am_hal_clkgen_control+0xc>
    e4e2:	4a49      	ldr	r2, [pc, #292]	; (e608 <am_hal_clkgen_control+0x12c>)
    e4e4:	6812      	ldr	r2, [r2, #0]
    e4e6:	601a      	str	r2, [r3, #0]
    e4e8:	2809      	cmp	r0, #9
    e4ea:	f200 8089 	bhi.w	e600 <am_hal_clkgen_control+0x124>
    e4ee:	e8df f000 	tbb	[pc, r0]
    e4f2:	160d      	.short	0x160d
    e4f4:	423a261e 	.word	0x423a261e
    e4f8:	055c544c 	.word	0x055c544c
    e4fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e500:	2000      	movs	r0, #0
    e502:	6a1a      	ldr	r2, [r3, #32]
    e504:	f36f 0200 	bfc	r2, #0, #1
    e508:	621a      	str	r2, [r3, #32]
    e50a:	4770      	bx	lr
    e50c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e510:	2200      	movs	r2, #0
    e512:	2147      	movs	r1, #71	; 0x47
    e514:	6159      	str	r1, [r3, #20]
    e516:	4610      	mov	r0, r2
    e518:	619a      	str	r2, [r3, #24]
    e51a:	615a      	str	r2, [r3, #20]
    e51c:	4770      	bx	lr
    e51e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e522:	2000      	movs	r0, #0
    e524:	899a      	ldrh	r2, [r3, #12]
    e526:	f36f 0200 	bfc	r2, #0, #1
    e52a:	819a      	strh	r2, [r3, #12]
    e52c:	4770      	bx	lr
    e52e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e532:	2000      	movs	r0, #0
    e534:	899a      	ldrh	r2, [r3, #12]
    e536:	f36f 0241 	bfc	r2, #1, #1
    e53a:	819a      	strh	r2, [r3, #12]
    e53c:	4770      	bx	lr
    e53e:	4a33      	ldr	r2, [pc, #204]	; (e60c <am_hal_clkgen_control+0x130>)
    e540:	68d3      	ldr	r3, [r2, #12]
    e542:	b2db      	uxtb	r3, r3
    e544:	2b21      	cmp	r3, #33	; 0x21
    e546:	d106      	bne.n	e556 <am_hal_clkgen_control+0x7a>
    e548:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    e54c:	2101      	movs	r1, #1
    e54e:	f361 2309 	bfi	r3, r1, #8, #2
    e552:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    e556:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e55a:	2000      	movs	r0, #0
    e55c:	8993      	ldrh	r3, [r2, #12]
    e55e:	f043 0301 	orr.w	r3, r3, #1
    e562:	8193      	strh	r3, [r2, #12]
    e564:	4770      	bx	lr
    e566:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e56a:	2000      	movs	r0, #0
    e56c:	8993      	ldrh	r3, [r2, #12]
    e56e:	f043 0302 	orr.w	r3, r3, #2
    e572:	8193      	strh	r3, [r2, #12]
    e574:	4770      	bx	lr
    e576:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e57a:	2200      	movs	r2, #0
    e57c:	2047      	movs	r0, #71	; 0x47
    e57e:	2101      	movs	r1, #1
    e580:	6158      	str	r0, [r3, #20]
    e582:	6199      	str	r1, [r3, #24]
    e584:	4610      	mov	r0, r2
    e586:	615a      	str	r2, [r3, #20]
    e588:	4770      	bx	lr
    e58a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e58e:	2000      	movs	r0, #0
    e590:	899a      	ldrh	r2, [r3, #12]
    e592:	f36f 12c7 	bfc	r2, #7, #1
    e596:	819a      	strh	r2, [r3, #12]
    e598:	4770      	bx	lr
    e59a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e59e:	2000      	movs	r0, #0
    e5a0:	8993      	ldrh	r3, [r2, #12]
    e5a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e5a6:	8193      	strh	r3, [r2, #12]
    e5a8:	4770      	bx	lr
    e5aa:	4a18      	ldr	r2, [pc, #96]	; (e60c <am_hal_clkgen_control+0x130>)
    e5ac:	68d3      	ldr	r3, [r2, #12]
    e5ae:	b2db      	uxtb	r3, r3
    e5b0:	2b21      	cmp	r3, #33	; 0x21
    e5b2:	d00a      	beq.n	e5ca <am_hal_clkgen_control+0xee>
    e5b4:	b139      	cbz	r1, e5c6 <am_hal_clkgen_control+0xea>
    e5b6:	680b      	ldr	r3, [r1, #0]
    e5b8:	f043 0301 	orr.w	r3, r3, #1
    e5bc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e5c0:	2000      	movs	r0, #0
    e5c2:	6213      	str	r3, [r2, #32]
    e5c4:	4770      	bx	lr
    e5c6:	4b12      	ldr	r3, [pc, #72]	; (e610 <am_hal_clkgen_control+0x134>)
    e5c8:	e7f8      	b.n	e5bc <am_hal_clkgen_control+0xe0>
    e5ca:	b500      	push	{lr}
    e5cc:	b083      	sub	sp, #12
    e5ce:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    e5d2:	9101      	str	r1, [sp, #4]
    e5d4:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    e5d8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    e5dc:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    e5e0:	f000 f924 	bl	e82c <am_hal_flash_delay>
    e5e4:	9901      	ldr	r1, [sp, #4]
    e5e6:	b149      	cbz	r1, e5fc <am_hal_clkgen_control+0x120>
    e5e8:	680b      	ldr	r3, [r1, #0]
    e5ea:	f043 0301 	orr.w	r3, r3, #1
    e5ee:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e5f2:	2000      	movs	r0, #0
    e5f4:	6213      	str	r3, [r2, #32]
    e5f6:	b003      	add	sp, #12
    e5f8:	f85d fb04 	ldr.w	pc, [sp], #4
    e5fc:	4b04      	ldr	r3, [pc, #16]	; (e610 <am_hal_clkgen_control+0x134>)
    e5fe:	e7f6      	b.n	e5ee <am_hal_clkgen_control+0x112>
    e600:	2006      	movs	r0, #6
    e602:	4770      	bx	lr
    e604:	100011bc 	.word	0x100011bc
    e608:	4ffff000 	.word	0x4ffff000
    e60c:	40020000 	.word	0x40020000
    e610:	0025b801 	.word	0x0025b801

0000e614 <am_hal_clkgen_status_get>:
    e614:	b1b0      	cbz	r0, e644 <am_hal_clkgen_status_get+0x30>
    e616:	b410      	push	{r4}
    e618:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    e61c:	4603      	mov	r3, r0
    e61e:	698c      	ldr	r4, [r1, #24]
    e620:	4809      	ldr	r0, [pc, #36]	; (e648 <am_hal_clkgen_status_get+0x34>)
    e622:	4a0a      	ldr	r2, [pc, #40]	; (e64c <am_hal_clkgen_status_get+0x38>)
    e624:	f014 0f01 	tst.w	r4, #1
    e628:	bf08      	it	eq
    e62a:	4602      	moveq	r2, r0
    e62c:	601a      	str	r2, [r3, #0]
    e62e:	69ca      	ldr	r2, [r1, #28]
    e630:	f85d 4b04 	ldr.w	r4, [sp], #4
    e634:	f002 0101 	and.w	r1, r2, #1
    e638:	f3c2 0240 	ubfx	r2, r2, #1, #1
    e63c:	2000      	movs	r0, #0
    e63e:	6059      	str	r1, [r3, #4]
    e640:	721a      	strb	r2, [r3, #8]
    e642:	4770      	bx	lr
    e644:	2006      	movs	r0, #6
    e646:	4770      	bx	lr
    e648:	02dc6c00 	.word	0x02dc6c00
    e64c:	016e3600 	.word	0x016e3600

0000e650 <am_hal_ctimer_config>:
    e650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e654:	b082      	sub	sp, #8
    e656:	460c      	mov	r4, r1
    e658:	4606      	mov	r6, r0
    e65a:	f000 faeb 	bl	ec34 <am_hal_interrupt_master_disable>
    e65e:	4f19      	ldr	r7, [pc, #100]	; (e6c4 <am_hal_ctimer_config+0x74>)
    e660:	9001      	str	r0, [sp, #4]
    e662:	ea4f 1846 	mov.w	r8, r6, lsl #5
    e666:	f858 3007 	ldr.w	r3, [r8, r7]
    e66a:	f043 2308 	orr.w	r3, r3, #134219776	; 0x8000800
    e66e:	f848 3007 	str.w	r3, [r8, r7]
    e672:	9801      	ldr	r0, [sp, #4]
    e674:	f000 fae2 	bl	ec3c <am_hal_interrupt_master_set>
    e678:	e9d4 5301 	ldrd	r5, r3, [r4, #4]
    e67c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    e680:	6823      	ldr	r3, [r4, #0]
    e682:	b10b      	cbz	r3, e688 <am_hal_ctimer_config+0x38>
    e684:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    e688:	f000 fad4 	bl	ec34 <am_hal_interrupt_master_disable>
    e68c:	9000      	str	r0, [sp, #0]
    e68e:	f848 5007 	str.w	r5, [r8, r7]
    e692:	9800      	ldr	r0, [sp, #0]
    e694:	f000 fad2 	bl	ec3c <am_hal_interrupt_master_set>
    e698:	6863      	ldr	r3, [r4, #4]
    e69a:	b90b      	cbnz	r3, e6a0 <am_hal_ctimer_config+0x50>
    e69c:	6822      	ldr	r2, [r4, #0]
    e69e:	b14a      	cbz	r2, e6b4 <am_hal_ctimer_config+0x64>
    e6a0:	f3c3 0344 	ubfx	r3, r3, #1, #5
    e6a4:	2200      	movs	r2, #0
    e6a6:	4808      	ldr	r0, [pc, #32]	; (e6c8 <am_hal_ctimer_config+0x78>)
    e6a8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
    e6ac:	54b3      	strb	r3, [r6, r2]
    e6ae:	b002      	add	sp, #8
    e6b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e6b4:	68a3      	ldr	r3, [r4, #8]
    e6b6:	2b00      	cmp	r3, #0
    e6b8:	d0f9      	beq.n	e6ae <am_hal_ctimer_config+0x5e>
    e6ba:	f3c3 0344 	ubfx	r3, r3, #1, #5
    e6be:	2201      	movs	r2, #1
    e6c0:	e7f1      	b.n	e6a6 <am_hal_ctimer_config+0x56>
    e6c2:	bf00      	nop
    e6c4:	4000800c 	.word	0x4000800c
    e6c8:	10001034 	.word	0x10001034

0000e6cc <am_hal_ctimer_start>:
    e6cc:	b530      	push	{r4, r5, lr}
    e6ce:	b083      	sub	sp, #12
    e6d0:	460c      	mov	r4, r1
    e6d2:	4605      	mov	r5, r0
    e6d4:	f000 faae 	bl	ec34 <am_hal_interrupt_master_disable>
    e6d8:	ea4f 1c45 	mov.w	ip, r5, lsl #5
    e6dc:	4910      	ldr	r1, [pc, #64]	; (e720 <am_hal_ctimer_start+0x54>)
    e6de:	9001      	str	r0, [sp, #4]
    e6e0:	f85c 3001 	ldr.w	r3, [ip, r1]
    e6e4:	f004 2208 	and.w	r2, r4, #134219776	; 0x8000800
    e6e8:	ea23 0202 	bic.w	r2, r3, r2
    e6ec:	f004 1301 	and.w	r3, r4, #65537	; 0x10001
    e6f0:	4313      	orrs	r3, r2
    e6f2:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    e6f6:	f84c 3001 	str.w	r3, [ip, r1]
    e6fa:	bf0c      	ite	eq
    e6fc:	f3c3 4444 	ubfxeq	r4, r3, #17, #5
    e700:	f3c3 0444 	ubfxne	r4, r3, #1, #5
    e704:	4b07      	ldr	r3, [pc, #28]	; (e724 <am_hal_ctimer_start+0x58>)
    e706:	9801      	ldr	r0, [sp, #4]
    e708:	bf0c      	ite	eq
    e70a:	2201      	moveq	r2, #1
    e70c:	2200      	movne	r2, #0
    e70e:	eb03 0545 	add.w	r5, r3, r5, lsl #1
    e712:	54ac      	strb	r4, [r5, r2]
    e714:	b003      	add	sp, #12
    e716:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    e71a:	f000 ba8f 	b.w	ec3c <am_hal_interrupt_master_set>
    e71e:	bf00      	nop
    e720:	4000800c 	.word	0x4000800c
    e724:	10001034 	.word	0x10001034

0000e728 <am_hal_ctimer_clear>:
    e728:	b530      	push	{r4, r5, lr}
    e72a:	b083      	sub	sp, #12
    e72c:	0145      	lsls	r5, r0, #5
    e72e:	460c      	mov	r4, r1
    e730:	f000 fa80 	bl	ec34 <am_hal_interrupt_master_disable>
    e734:	4b06      	ldr	r3, [pc, #24]	; (e750 <am_hal_ctimer_clear+0x28>)
    e736:	9001      	str	r0, [sp, #4]
    e738:	58e9      	ldr	r1, [r5, r3]
    e73a:	f004 2408 	and.w	r4, r4, #134219776	; 0x8000800
    e73e:	430c      	orrs	r4, r1
    e740:	50ec      	str	r4, [r5, r3]
    e742:	9801      	ldr	r0, [sp, #4]
    e744:	b003      	add	sp, #12
    e746:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    e74a:	f000 ba77 	b.w	ec3c <am_hal_interrupt_master_set>
    e74e:	bf00      	nop
    e750:	4000800c 	.word	0x4000800c

0000e754 <am_hal_ctimer_period_set>:
    e754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e758:	b082      	sub	sp, #8
    e75a:	0145      	lsls	r5, r0, #5
    e75c:	460e      	mov	r6, r1
    e75e:	4614      	mov	r4, r2
    e760:	461f      	mov	r7, r3
    e762:	f000 fa67 	bl	ec34 <am_hal_interrupt_master_disable>
    e766:	f8df 809c 	ldr.w	r8, [pc, #156]	; e804 <am_hal_ctimer_period_set+0xb0>
    e76a:	9001      	str	r0, [sp, #4]
    e76c:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    e770:	f855 2008 	ldr.w	r2, [r5, r8]
    e774:	4821      	ldr	r0, [pc, #132]	; (e7fc <am_hal_ctimer_period_set+0xa8>)
    e776:	d02f      	beq.n	e7d8 <am_hal_ctimer_period_set+0x84>
    e778:	f402 72c0 	and.w	r2, r2, #384	; 0x180
    e77c:	2a80      	cmp	r2, #128	; 0x80
    e77e:	d019      	beq.n	e7b4 <am_hal_ctimer_period_set+0x60>
    e780:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e784:	2100      	movs	r1, #0
    e786:	4296      	cmp	r6, r2
    e788:	460b      	mov	r3, r1
    e78a:	d01c      	beq.n	e7c6 <am_hal_ctimer_period_set+0x72>
    e78c:	4a1c      	ldr	r2, [pc, #112]	; (e800 <am_hal_ctimer_period_set+0xac>)
    e78e:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    e792:	eb05 0702 	add.w	r7, r5, r2
    e796:	d027      	beq.n	e7e8 <am_hal_ctimer_period_set+0x94>
    e798:	0c1b      	lsrs	r3, r3, #16
    e79a:	041b      	lsls	r3, r3, #16
    e79c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
    e7a0:	b2a4      	uxth	r4, r4
    e7a2:	4321      	orrs	r1, r4
    e7a4:	5029      	str	r1, [r5, r0]
    e7a6:	50ab      	str	r3, [r5, r2]
    e7a8:	9801      	ldr	r0, [sp, #4]
    e7aa:	b002      	add	sp, #8
    e7ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e7b0:	f000 ba44 	b.w	ec3c <am_hal_interrupt_master_set>
    e7b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e7b8:	4296      	cmp	r6, r2
    e7ba:	ea4f 4104 	mov.w	r1, r4, lsl #16
    e7be:	4623      	mov	r3, r4
    e7c0:	eba4 0407 	sub.w	r4, r4, r7
    e7c4:	d1e2      	bne.n	e78c <am_hal_ctimer_period_set+0x38>
    e7c6:	b2a4      	uxth	r4, r4
    e7c8:	4321      	orrs	r1, r4
    e7ca:	5029      	str	r1, [r5, r0]
    e7cc:	9801      	ldr	r0, [sp, #4]
    e7ce:	b002      	add	sp, #8
    e7d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e7d4:	f000 ba32 	b.w	ec3c <am_hal_interrupt_master_set>
    e7d8:	0c12      	lsrs	r2, r2, #16
    e7da:	f402 72c0 	and.w	r2, r2, #384	; 0x180
    e7de:	2a80      	cmp	r2, #128	; 0x80
    e7e0:	d0e8      	beq.n	e7b4 <am_hal_ctimer_period_set+0x60>
    e7e2:	4f07      	ldr	r7, [pc, #28]	; (e800 <am_hal_ctimer_period_set+0xac>)
    e7e4:	2100      	movs	r1, #0
    e7e6:	442f      	add	r7, r5
    e7e8:	b2a4      	uxth	r4, r4
    e7ea:	4321      	orrs	r1, r4
    e7ec:	6039      	str	r1, [r7, #0]
    e7ee:	9801      	ldr	r0, [sp, #4]
    e7f0:	b002      	add	sp, #8
    e7f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e7f6:	f000 ba21 	b.w	ec3c <am_hal_interrupt_master_set>
    e7fa:	bf00      	nop
    e7fc:	40008004 	.word	0x40008004
    e800:	40008008 	.word	0x40008008
    e804:	4000800c 	.word	0x4000800c

0000e808 <am_hal_ctimer_adc_trigger_enable>:
    e808:	b500      	push	{lr}
    e80a:	b083      	sub	sp, #12
    e80c:	f000 fa12 	bl	ec34 <am_hal_interrupt_master_disable>
    e810:	4a05      	ldr	r2, [pc, #20]	; (e828 <am_hal_ctimer_adc_trigger_enable+0x20>)
    e812:	9001      	str	r0, [sp, #4]
    e814:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
    e816:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    e81a:	66d3      	str	r3, [r2, #108]	; 0x6c
    e81c:	9801      	ldr	r0, [sp, #4]
    e81e:	b003      	add	sp, #12
    e820:	f85d eb04 	ldr.w	lr, [sp], #4
    e824:	f000 ba0a 	b.w	ec3c <am_hal_interrupt_master_set>
    e828:	40008000 	.word	0x40008000

0000e82c <am_hal_flash_delay>:
    e82c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e832:	075b      	lsls	r3, r3, #29
    e834:	bf46      	itte	mi
    e836:	0040      	lslmi	r0, r0, #1
    e838:	230e      	movmi	r3, #14
    e83a:	230b      	movpl	r3, #11
    e83c:	4298      	cmp	r0, r3
    e83e:	d902      	bls.n	e846 <am_hal_flash_delay+0x1a>
    e840:	4a01      	ldr	r2, [pc, #4]	; (e848 <am_hal_flash_delay+0x1c>)
    e842:	1ac0      	subs	r0, r0, r3
    e844:	4710      	bx	r2
    e846:	4770      	bx	lr
    e848:	0800009d 	.word	0x0800009d

0000e84c <am_hal_flash_delay_status_check>:
    e84c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e850:	f89d c020 	ldrb.w	ip, [sp, #32]
    e854:	f8df 805c 	ldr.w	r8, [pc, #92]	; e8b4 <am_hal_flash_delay_status_check+0x68>
    e858:	4604      	mov	r4, r0
    e85a:	460d      	mov	r5, r1
    e85c:	4616      	mov	r6, r2
    e85e:	461f      	mov	r7, r3
    e860:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    e864:	f1bc 0f00 	cmp.w	ip, #0
    e868:	d00a      	beq.n	e880 <am_hal_flash_delay_status_check+0x34>
    e86a:	e01a      	b.n	e8a2 <am_hal_flash_delay_status_check+0x56>
    e86c:	b1f4      	cbz	r4, e8ac <am_hal_flash_delay_status_check+0x60>
    e86e:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    e872:	f013 0f04 	tst.w	r3, #4
    e876:	bf0c      	ite	eq
    e878:	2005      	moveq	r0, #5
    e87a:	2012      	movne	r0, #18
    e87c:	3c01      	subs	r4, #1
    e87e:	47c0      	blx	r8
    e880:	6828      	ldr	r0, [r5, #0]
    e882:	4030      	ands	r0, r6
    e884:	42b8      	cmp	r0, r7
    e886:	d0f1      	beq.n	e86c <am_hal_flash_delay_status_check+0x20>
    e888:	2000      	movs	r0, #0
    e88a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e88e:	b16c      	cbz	r4, e8ac <am_hal_flash_delay_status_check+0x60>
    e890:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    e894:	f013 0f04 	tst.w	r3, #4
    e898:	bf0c      	ite	eq
    e89a:	2005      	moveq	r0, #5
    e89c:	2012      	movne	r0, #18
    e89e:	3c01      	subs	r4, #1
    e8a0:	47c0      	blx	r8
    e8a2:	6828      	ldr	r0, [r5, #0]
    e8a4:	4030      	ands	r0, r6
    e8a6:	42b8      	cmp	r0, r7
    e8a8:	d1f1      	bne.n	e88e <am_hal_flash_delay_status_check+0x42>
    e8aa:	e7ed      	b.n	e888 <am_hal_flash_delay_status_check+0x3c>
    e8ac:	2004      	movs	r0, #4
    e8ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e8b2:	bf00      	nop
    e8b4:	0800009d 	.word	0x0800009d

0000e8b8 <am_hal_flash_load_ui32>:
    e8b8:	4b00      	ldr	r3, [pc, #0]	; (e8bc <am_hal_flash_load_ui32+0x4>)
    e8ba:	4718      	bx	r3
    e8bc:	08000075 	.word	0x08000075

0000e8c0 <am_hal_flash_store_ui32>:
    e8c0:	4b01      	ldr	r3, [pc, #4]	; (e8c8 <am_hal_flash_store_ui32+0x8>)
    e8c2:	f043 0301 	orr.w	r3, r3, #1
    e8c6:	4718      	bx	r3
    e8c8:	10001044 	.word	0x10001044

0000e8cc <am_hal_gpio_pinconfig>:
    e8cc:	2831      	cmp	r0, #49	; 0x31
    e8ce:	f200 80c3 	bhi.w	ea58 <am_hal_gpio_pinconfig+0x18c>
    e8d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e8d6:	4604      	mov	r4, r0
    e8d8:	f011 07e0 	ands.w	r7, r1, #224	; 0xe0
    e8dc:	f001 0007 	and.w	r0, r1, #7
    e8e0:	b085      	sub	sp, #20
    e8e2:	f3c1 03c1 	ubfx	r3, r1, #3, #2
    e8e6:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    e8ea:	d00f      	beq.n	e90c <am_hal_gpio_pinconfig+0x40>
    e8ec:	f3c1 1642 	ubfx	r6, r1, #5, #3
    e8f0:	1db5      	adds	r5, r6, #6
    e8f2:	f005 0507 	and.w	r5, r5, #7
    e8f6:	2d03      	cmp	r5, #3
    e8f8:	f042 0201 	orr.w	r2, r2, #1
    e8fc:	f240 80ae 	bls.w	ea5c <am_hal_gpio_pinconfig+0x190>
    e900:	2fc0      	cmp	r7, #192	; 0xc0
    e902:	f000 80e1 	beq.w	eac8 <am_hal_gpio_pinconfig+0x1fc>
    e906:	2f20      	cmp	r7, #32
    e908:	f000 80e3 	beq.w	ead2 <am_hal_gpio_pinconfig+0x206>
    e90c:	b163      	cbz	r3, e928 <am_hal_gpio_pinconfig+0x5c>
    e90e:	2b01      	cmp	r3, #1
    e910:	f000 80d3 	beq.w	eaba <am_hal_gpio_pinconfig+0x1ee>
    e914:	2b02      	cmp	r3, #2
    e916:	f040 80c9 	bne.w	eaac <am_hal_gpio_pinconfig+0x1e0>
    e91a:	4b79      	ldr	r3, [pc, #484]	; (eb00 <am_hal_gpio_pinconfig+0x234>)
    e91c:	5d1b      	ldrb	r3, [r3, r4]
    e91e:	075b      	lsls	r3, r3, #29
    e920:	f140 80c4 	bpl.w	eaac <am_hal_gpio_pinconfig+0x1e0>
    e924:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    e928:	4b76      	ldr	r3, [pc, #472]	; (eb04 <am_hal_gpio_pinconfig+0x238>)
    e92a:	5d1b      	ldrb	r3, [r3, r4]
    e92c:	4103      	asrs	r3, r0
    e92e:	005b      	lsls	r3, r3, #1
    e930:	f003 0302 	and.w	r3, r3, #2
    e934:	4313      	orrs	r3, r2
    e936:	4a74      	ldr	r2, [pc, #464]	; (eb08 <am_hal_gpio_pinconfig+0x23c>)
    e938:	5d12      	ldrb	r2, [r2, r4]
    e93a:	4282      	cmp	r2, r0
    e93c:	f000 8099 	beq.w	ea72 <am_hal_gpio_pinconfig+0x1a6>
    e940:	f3c1 3000 	ubfx	r0, r1, #12, #1
    e944:	f3c1 2581 	ubfx	r5, r1, #10, #2
    e948:	f3c1 3280 	ubfx	r2, r1, #14, #1
    e94c:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    e950:	0a88      	lsrs	r0, r1, #10
    e952:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    e956:	f000 0008 	and.w	r0, r0, #8
    e95a:	4302      	orrs	r2, r0
    e95c:	f3c1 2007 	ubfx	r0, r1, #8, #8
    e960:	f000 050c 	and.w	r5, r0, #12
    e964:	2d04      	cmp	r5, #4
    e966:	f000 80a5 	beq.w	eab4 <am_hal_gpio_pinconfig+0x1e8>
    e96a:	4d68      	ldr	r5, [pc, #416]	; (eb0c <am_hal_gpio_pinconfig+0x240>)
    e96c:	682d      	ldr	r5, [r5, #0]
    e96e:	eba1 0805 	sub.w	r8, r1, r5
    e972:	fab8 f888 	clz	r8, r8
    e976:	ea4f 1858 	mov.w	r8, r8, lsr #5
    e97a:	f010 0f60 	tst.w	r0, #96	; 0x60
    e97e:	bf04      	itt	eq
    e980:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
    e984:	f360 0200 	bfieq	r2, r0, #0, #1
    e988:	00a0      	lsls	r0, r4, #2
    e98a:	f3c1 2101 	ubfx	r1, r1, #8, #2
    e98e:	2902      	cmp	r1, #2
    e990:	d05c      	beq.n	ea4c <am_hal_gpio_pinconfig+0x180>
    e992:	2903      	cmp	r1, #3
    e994:	d058      	beq.n	ea48 <am_hal_gpio_pinconfig+0x17c>
    e996:	2901      	cmp	r1, #1
    e998:	ea4f 01c4 	mov.w	r1, r4, lsl #3
    e99c:	bf08      	it	eq
    e99e:	f043 0304 	orreq.w	r3, r3, #4
    e9a2:	f001 0118 	and.w	r1, r1, #24
    e9a6:	2700      	movs	r7, #0
    e9a8:	f000 001c 	and.w	r0, r0, #28
    e9ac:	fa02 f600 	lsl.w	r6, r2, r0
    e9b0:	220f      	movs	r2, #15
    e9b2:	4082      	lsls	r2, r0
    e9b4:	43d2      	mvns	r2, r2
    e9b6:	f04f 09ff 	mov.w	r9, #255	; 0xff
    e9ba:	fa03 f501 	lsl.w	r5, r3, r1
    e9be:	fa09 f901 	lsl.w	r9, r9, r1
    e9c2:	9201      	str	r2, [sp, #4]
    e9c4:	f000 f936 	bl	ec34 <am_hal_interrupt_master_disable>
    e9c8:	f024 0a03 	bic.w	sl, r4, #3
    e9cc:	ea4f 0b54 	mov.w	fp, r4, lsr #1
    e9d0:	f10a 4c80 	add.w	ip, sl, #1073741824	; 0x40000000
    e9d4:	4b4e      	ldr	r3, [pc, #312]	; (eb10 <am_hal_gpio_pinconfig+0x244>)
    e9d6:	494f      	ldr	r1, [pc, #316]	; (eb14 <am_hal_gpio_pinconfig+0x248>)
    e9d8:	9a01      	ldr	r2, [sp, #4]
    e9da:	9003      	str	r0, [sp, #12]
    e9dc:	ea6f 0909 	mvn.w	r9, r9
    e9e0:	f02b 0b03 	bic.w	fp, fp, #3
    e9e4:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
    e9e8:	f1b8 0f00 	cmp.w	r8, #0
    e9ec:	d00b      	beq.n	ea06 <am_hal_gpio_pinconfig+0x13a>
    e9ee:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
    e9f2:	f004 081f 	and.w	r8, r4, #31
    e9f6:	4848      	ldr	r0, [pc, #288]	; (eb18 <am_hal_gpio_pinconfig+0x24c>)
    e9f8:	f00e 0e04 	and.w	lr, lr, #4
    e9fc:	2401      	movs	r4, #1
    e9fe:	fa04 f408 	lsl.w	r4, r4, r8
    ea02:	f84e 4000 	str.w	r4, [lr, r0]
    ea06:	4845      	ldr	r0, [pc, #276]	; (eb1c <am_hal_gpio_pinconfig+0x250>)
    ea08:	2473      	movs	r4, #115	; 0x73
    ea0a:	6604      	str	r4, [r0, #96]	; 0x60
    ea0c:	f8dc 4000 	ldr.w	r4, [ip]
    ea10:	ea04 0409 	and.w	r4, r4, r9
    ea14:	4325      	orrs	r5, r4
    ea16:	f8cc 5000 	str.w	r5, [ip]
    ea1a:	f85b 4003 	ldr.w	r4, [fp, r3]
    ea1e:	4022      	ands	r2, r4
    ea20:	4332      	orrs	r2, r6
    ea22:	f84b 2003 	str.w	r2, [fp, r3]
    ea26:	f85a 3001 	ldr.w	r3, [sl, r1]
    ea2a:	ea03 0909 	and.w	r9, r3, r9
    ea2e:	2400      	movs	r4, #0
    ea30:	ea49 0707 	orr.w	r7, r9, r7
    ea34:	f84a 7001 	str.w	r7, [sl, r1]
    ea38:	6604      	str	r4, [r0, #96]	; 0x60
    ea3a:	9803      	ldr	r0, [sp, #12]
    ea3c:	f000 f8fe 	bl	ec3c <am_hal_interrupt_master_set>
    ea40:	4620      	mov	r0, r4
    ea42:	b005      	add	sp, #20
    ea44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ea48:	f043 0304 	orr.w	r3, r3, #4
    ea4c:	00e1      	lsls	r1, r4, #3
    ea4e:	f001 0118 	and.w	r1, r1, #24
    ea52:	2701      	movs	r7, #1
    ea54:	408f      	lsls	r7, r1
    ea56:	e7a7      	b.n	e9a8 <am_hal_gpio_pinconfig+0xdc>
    ea58:	2006      	movs	r0, #6
    ea5a:	4770      	bx	lr
    ea5c:	4d28      	ldr	r5, [pc, #160]	; (eb00 <am_hal_gpio_pinconfig+0x234>)
    ea5e:	5d2d      	ldrb	r5, [r5, r4]
    ea60:	3e02      	subs	r6, #2
    ea62:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    ea66:	07ee      	lsls	r6, r5, #31
    ea68:	d536      	bpl.n	ead8 <am_hal_gpio_pinconfig+0x20c>
    ea6a:	2b00      	cmp	r3, #0
    ea6c:	f43f af5c 	beq.w	e928 <am_hal_gpio_pinconfig+0x5c>
    ea70:	e74d      	b.n	e90e <am_hal_gpio_pinconfig+0x42>
    ea72:	f3c1 4202 	ubfx	r2, r1, #16, #3
    ea76:	2a07      	cmp	r2, #7
    ea78:	d030      	beq.n	eadc <am_hal_gpio_pinconfig+0x210>
    ea7a:	4d29      	ldr	r5, [pc, #164]	; (eb20 <am_hal_gpio_pinconfig+0x254>)
    ea7c:	f3c1 40c1 	ubfx	r0, r1, #19, #2
    ea80:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    ea84:	f815 0024 	ldrb.w	r0, [r5, r4, lsl #2]
    ea88:	4290      	cmp	r0, r2
    ea8a:	d029      	beq.n	eae0 <am_hal_gpio_pinconfig+0x214>
    ea8c:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    ea90:	00a0      	lsls	r0, r4, #2
    ea92:	786e      	ldrb	r6, [r5, #1]
    ea94:	4296      	cmp	r6, r2
    ea96:	d02d      	beq.n	eaf4 <am_hal_gpio_pinconfig+0x228>
    ea98:	78ae      	ldrb	r6, [r5, #2]
    ea9a:	4296      	cmp	r6, r2
    ea9c:	d02c      	beq.n	eaf8 <am_hal_gpio_pinconfig+0x22c>
    ea9e:	78ed      	ldrb	r5, [r5, #3]
    eaa0:	4295      	cmp	r5, r2
    eaa2:	d02b      	beq.n	eafc <am_hal_gpio_pinconfig+0x230>
    eaa4:	481f      	ldr	r0, [pc, #124]	; (eb24 <am_hal_gpio_pinconfig+0x258>)
    eaa6:	b005      	add	sp, #20
    eaa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eaac:	481e      	ldr	r0, [pc, #120]	; (eb28 <am_hal_gpio_pinconfig+0x25c>)
    eaae:	b005      	add	sp, #20
    eab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eab4:	f04f 0801 	mov.w	r8, #1
    eab8:	e75f      	b.n	e97a <am_hal_gpio_pinconfig+0xae>
    eaba:	4b11      	ldr	r3, [pc, #68]	; (eb00 <am_hal_gpio_pinconfig+0x234>)
    eabc:	5d1b      	ldrb	r3, [r3, r4]
    eabe:	079d      	lsls	r5, r3, #30
    eac0:	d5f4      	bpl.n	eaac <am_hal_gpio_pinconfig+0x1e0>
    eac2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    eac6:	e72f      	b.n	e928 <am_hal_gpio_pinconfig+0x5c>
    eac8:	2c14      	cmp	r4, #20
    eaca:	f43f af1f 	beq.w	e90c <am_hal_gpio_pinconfig+0x40>
    eace:	4817      	ldr	r0, [pc, #92]	; (eb2c <am_hal_gpio_pinconfig+0x260>)
    ead0:	e7b7      	b.n	ea42 <am_hal_gpio_pinconfig+0x176>
    ead2:	2c14      	cmp	r4, #20
    ead4:	f47f af1a 	bne.w	e90c <am_hal_gpio_pinconfig+0x40>
    ead8:	4815      	ldr	r0, [pc, #84]	; (eb30 <am_hal_gpio_pinconfig+0x264>)
    eada:	e7b2      	b.n	ea42 <am_hal_gpio_pinconfig+0x176>
    eadc:	4815      	ldr	r0, [pc, #84]	; (eb34 <am_hal_gpio_pinconfig+0x268>)
    eade:	e7b0      	b.n	ea42 <am_hal_gpio_pinconfig+0x176>
    eae0:	2200      	movs	r2, #0
    eae2:	00a0      	lsls	r0, r4, #2
    eae4:	0052      	lsls	r2, r2, #1
    eae6:	f3c1 5540 	ubfx	r5, r1, #21, #1
    eaea:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
    eaee:	f04f 0800 	mov.w	r8, #0
    eaf2:	e74a      	b.n	e98a <am_hal_gpio_pinconfig+0xbe>
    eaf4:	2201      	movs	r2, #1
    eaf6:	e7f5      	b.n	eae4 <am_hal_gpio_pinconfig+0x218>
    eaf8:	2202      	movs	r2, #2
    eafa:	e7f3      	b.n	eae4 <am_hal_gpio_pinconfig+0x218>
    eafc:	2203      	movs	r2, #3
    eafe:	e7f1      	b.n	eae4 <am_hal_gpio_pinconfig+0x218>
    eb00:	0000f484 	.word	0x0000f484
    eb04:	0000f4b8 	.word	0x0000f4b8
    eb08:	0000f5b4 	.word	0x0000f5b4
    eb0c:	0000f478 	.word	0x0000f478
    eb10:	40010040 	.word	0x40010040
    eb14:	400100e0 	.word	0x400100e0
    eb18:	400100b4 	.word	0x400100b4
    eb1c:	40010000 	.word	0x40010000
    eb20:	0000f4ec 	.word	0x0000f4ec
    eb24:	08000104 	.word	0x08000104
    eb28:	08000102 	.word	0x08000102
    eb2c:	08000101 	.word	0x08000101
    eb30:	08000100 	.word	0x08000100
    eb34:	08000103 	.word	0x08000103

0000eb38 <am_hal_gpio_state_read>:
    eb38:	b15a      	cbz	r2, eb52 <am_hal_gpio_state_read+0x1a>
    eb3a:	2831      	cmp	r0, #49	; 0x31
    eb3c:	d81d      	bhi.n	eb7a <am_hal_gpio_state_read+0x42>
    eb3e:	08c3      	lsrs	r3, r0, #3
    eb40:	2901      	cmp	r1, #1
    eb42:	f003 0304 	and.w	r3, r3, #4
    eb46:	f000 001f 	and.w	r0, r0, #31
    eb4a:	d01b      	beq.n	eb84 <am_hal_gpio_state_read+0x4c>
    eb4c:	2902      	cmp	r1, #2
    eb4e:	d00b      	beq.n	eb68 <am_hal_gpio_state_read+0x30>
    eb50:	b109      	cbz	r1, eb56 <am_hal_gpio_state_read+0x1e>
    eb52:	2006      	movs	r0, #6
    eb54:	4770      	bx	lr
    eb56:	4910      	ldr	r1, [pc, #64]	; (eb98 <am_hal_gpio_state_read+0x60>)
    eb58:	585b      	ldr	r3, [r3, r1]
    eb5a:	fa23 f000 	lsr.w	r0, r3, r0
    eb5e:	f000 0001 	and.w	r0, r0, #1
    eb62:	6010      	str	r0, [r2, #0]
    eb64:	2000      	movs	r0, #0
    eb66:	4770      	bx	lr
    eb68:	490c      	ldr	r1, [pc, #48]	; (eb9c <am_hal_gpio_state_read+0x64>)
    eb6a:	585b      	ldr	r3, [r3, r1]
    eb6c:	fa23 f000 	lsr.w	r0, r3, r0
    eb70:	f000 0001 	and.w	r0, r0, #1
    eb74:	6010      	str	r0, [r2, #0]
    eb76:	2000      	movs	r0, #0
    eb78:	4770      	bx	lr
    eb7a:	f04f 33ff 	mov.w	r3, #4294967295
    eb7e:	6013      	str	r3, [r2, #0]
    eb80:	2005      	movs	r0, #5
    eb82:	4770      	bx	lr
    eb84:	4906      	ldr	r1, [pc, #24]	; (eba0 <am_hal_gpio_state_read+0x68>)
    eb86:	585b      	ldr	r3, [r3, r1]
    eb88:	fa23 f000 	lsr.w	r0, r3, r0
    eb8c:	f000 0001 	and.w	r0, r0, #1
    eb90:	6010      	str	r0, [r2, #0]
    eb92:	2000      	movs	r0, #0
    eb94:	4770      	bx	lr
    eb96:	bf00      	nop
    eb98:	40010080 	.word	0x40010080
    eb9c:	400100a0 	.word	0x400100a0
    eba0:	40010088 	.word	0x40010088

0000eba4 <am_hal_gpio_state_write>:
    eba4:	2831      	cmp	r0, #49	; 0x31
    eba6:	d81a      	bhi.n	ebde <am_hal_gpio_state_write+0x3a>
    eba8:	b570      	push	{r4, r5, r6, lr}
    ebaa:	2905      	cmp	r1, #5
    ebac:	b082      	sub	sp, #8
    ebae:	460d      	mov	r5, r1
    ebb0:	d812      	bhi.n	ebd8 <am_hal_gpio_state_write+0x34>
    ebb2:	f000 031f 	and.w	r3, r0, #31
    ebb6:	2201      	movs	r2, #1
    ebb8:	08c0      	lsrs	r0, r0, #3
    ebba:	fa02 f603 	lsl.w	r6, r2, r3
    ebbe:	f000 0404 	and.w	r4, r0, #4
    ebc2:	f000 f837 	bl	ec34 <am_hal_interrupt_master_disable>
    ebc6:	3d01      	subs	r5, #1
    ebc8:	9001      	str	r0, [sp, #4]
    ebca:	2d04      	cmp	r5, #4
    ebcc:	d821      	bhi.n	ec12 <am_hal_gpio_state_write+0x6e>
    ebce:	e8df f005 	tbb	[pc, r5]
    ebd2:	1512      	.short	0x1512
    ebd4:	1d1a      	.short	0x1d1a
    ebd6:	08          	.byte	0x08
    ebd7:	00          	.byte	0x00
    ebd8:	2006      	movs	r0, #6
    ebda:	b002      	add	sp, #8
    ebdc:	bd70      	pop	{r4, r5, r6, pc}
    ebde:	2005      	movs	r0, #5
    ebe0:	4770      	bx	lr
    ebe2:	4a0d      	ldr	r2, [pc, #52]	; (ec18 <am_hal_gpio_state_write+0x74>)
    ebe4:	58a3      	ldr	r3, [r4, r2]
    ebe6:	4073      	eors	r3, r6
    ebe8:	50a3      	str	r3, [r4, r2]
    ebea:	9801      	ldr	r0, [sp, #4]
    ebec:	f000 f826 	bl	ec3c <am_hal_interrupt_master_set>
    ebf0:	2000      	movs	r0, #0
    ebf2:	b002      	add	sp, #8
    ebf4:	bd70      	pop	{r4, r5, r6, pc}
    ebf6:	4b09      	ldr	r3, [pc, #36]	; (ec1c <am_hal_gpio_state_write+0x78>)
    ebf8:	50e6      	str	r6, [r4, r3]
    ebfa:	e7f6      	b.n	ebea <am_hal_gpio_state_write+0x46>
    ebfc:	4a08      	ldr	r2, [pc, #32]	; (ec20 <am_hal_gpio_state_write+0x7c>)
    ebfe:	58a3      	ldr	r3, [r4, r2]
    ec00:	4073      	eors	r3, r6
    ec02:	50a3      	str	r3, [r4, r2]
    ec04:	e7f1      	b.n	ebea <am_hal_gpio_state_write+0x46>
    ec06:	4b04      	ldr	r3, [pc, #16]	; (ec18 <am_hal_gpio_state_write+0x74>)
    ec08:	50e6      	str	r6, [r4, r3]
    ec0a:	e7ee      	b.n	ebea <am_hal_gpio_state_write+0x46>
    ec0c:	4b05      	ldr	r3, [pc, #20]	; (ec24 <am_hal_gpio_state_write+0x80>)
    ec0e:	50e6      	str	r6, [r4, r3]
    ec10:	e7eb      	b.n	ebea <am_hal_gpio_state_write+0x46>
    ec12:	4b05      	ldr	r3, [pc, #20]	; (ec28 <am_hal_gpio_state_write+0x84>)
    ec14:	50e6      	str	r6, [r4, r3]
    ec16:	e7e8      	b.n	ebea <am_hal_gpio_state_write+0x46>
    ec18:	400100b4 	.word	0x400100b4
    ec1c:	40010090 	.word	0x40010090
    ec20:	40010088 	.word	0x40010088
    ec24:	400100a8 	.word	0x400100a8
    ec28:	40010098 	.word	0x40010098

0000ec2c <am_hal_interrupt_master_enable>:
    ec2c:	f3ef 8010 	mrs	r0, PRIMASK
    ec30:	b662      	cpsie	i
    ec32:	4770      	bx	lr

0000ec34 <am_hal_interrupt_master_disable>:
    ec34:	f3ef 8010 	mrs	r0, PRIMASK
    ec38:	b672      	cpsid	i
    ec3a:	4770      	bx	lr

0000ec3c <am_hal_interrupt_master_set>:
    ec3c:	f380 8810 	msr	PRIMASK, r0
    ec40:	4770      	bx	lr
    ec42:	bf00      	nop

0000ec44 <am_hal_itm_enable>:
    ec44:	4a0e      	ldr	r2, [pc, #56]	; (ec80 <am_hal_itm_enable+0x3c>)
    ec46:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    ec4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    ec4e:	b410      	push	{r4}
    ec50:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    ec54:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    ec58:	01db      	lsls	r3, r3, #7
    ec5a:	d5fb      	bpl.n	ec54 <am_hal_itm_enable+0x10>
    ec5c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    ec60:	4c08      	ldr	r4, [pc, #32]	; (ec84 <am_hal_itm_enable+0x40>)
    ec62:	4a09      	ldr	r2, [pc, #36]	; (ec88 <am_hal_itm_enable+0x44>)
    ec64:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    ec68:	200f      	movs	r0, #15
    ec6a:	f04f 31ff 	mov.w	r1, #4294967295
    ec6e:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    ec72:	f85d 4b04 	ldr.w	r4, [sp], #4
    ec76:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    ec7a:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    ec7e:	4770      	bx	lr
    ec80:	e000ed00 	.word	0xe000ed00
    ec84:	c5acce55 	.word	0xc5acce55
    ec88:	00150511 	.word	0x00150511

0000ec8c <am_hal_itm_print>:
    ec8c:	7803      	ldrb	r3, [r0, #0]
    ec8e:	b1a3      	cbz	r3, ecba <am_hal_itm_print+0x2e>
    ec90:	4603      	mov	r3, r0
    ec92:	f1c0 0c01 	rsb	ip, r0, #1
    ec96:	eb0c 0103 	add.w	r1, ip, r3
    ec9a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    ec9e:	2a00      	cmp	r2, #0
    eca0:	d1f9      	bne.n	ec96 <am_hal_itm_print+0xa>
    eca2:	4401      	add	r1, r0
    eca4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    eca8:	f810 cb01 	ldrb.w	ip, [r0], #1
    ecac:	6813      	ldr	r3, [r2, #0]
    ecae:	2b00      	cmp	r3, #0
    ecb0:	d0fc      	beq.n	ecac <am_hal_itm_print+0x20>
    ecb2:	4288      	cmp	r0, r1
    ecb4:	f882 c000 	strb.w	ip, [r2]
    ecb8:	d1f6      	bne.n	eca8 <am_hal_itm_print+0x1c>
    ecba:	4770      	bx	lr

0000ecbc <am_hal_mcuctrl_info_get>:
    ecbc:	2900      	cmp	r1, #0
    ecbe:	f000 808f 	beq.w	ede0 <am_hal_mcuctrl_info_get+0x124>
    ecc2:	2801      	cmp	r0, #1
    ecc4:	b430      	push	{r4, r5}
    ecc6:	d006      	beq.n	ecd6 <am_hal_mcuctrl_info_get+0x1a>
    ecc8:	2802      	cmp	r0, #2
    ecca:	d06d      	beq.n	eda8 <am_hal_mcuctrl_info_get+0xec>
    eccc:	2800      	cmp	r0, #0
    ecce:	d055      	beq.n	ed7c <am_hal_mcuctrl_info_get+0xc0>
    ecd0:	2006      	movs	r0, #6
    ecd2:	bc30      	pop	{r4, r5}
    ecd4:	4770      	bx	lr
    ecd6:	4a43      	ldr	r2, [pc, #268]	; (ede4 <am_hal_mcuctrl_info_get+0x128>)
    ecd8:	4843      	ldr	r0, [pc, #268]	; (ede8 <am_hal_mcuctrl_info_get+0x12c>)
    ecda:	6813      	ldr	r3, [r2, #0]
    ecdc:	600b      	str	r3, [r1, #0]
    ecde:	6854      	ldr	r4, [r2, #4]
    ece0:	604c      	str	r4, [r1, #4]
    ece2:	6894      	ldr	r4, [r2, #8]
    ece4:	608c      	str	r4, [r1, #8]
    ece6:	68d4      	ldr	r4, [r2, #12]
    ece8:	60cc      	str	r4, [r1, #12]
    ecea:	f3c3 5503 	ubfx	r5, r3, #20, #4
    ecee:	6914      	ldr	r4, [r2, #16]
    ecf0:	610c      	str	r4, [r1, #16]
    ecf2:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    ecf6:	4c3d      	ldr	r4, [pc, #244]	; (edec <am_hal_mcuctrl_info_get+0x130>)
    ecf8:	6950      	ldr	r0, [r2, #20]
    ecfa:	6148      	str	r0, [r1, #20]
    ecfc:	f003 0201 	and.w	r2, r3, #1
    ed00:	f3c3 4303 	ubfx	r3, r3, #16, #4
    ed04:	e9c1 2506 	strd	r2, r5, [r1, #24]
    ed08:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    ed0c:	4a38      	ldr	r2, [pc, #224]	; (edf0 <am_hal_mcuctrl_info_get+0x134>)
    ed0e:	620b      	str	r3, [r1, #32]
    ed10:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    ed14:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    ed18:	b2db      	uxtb	r3, r3
    ed1a:	f000 000f 	and.w	r0, r0, #15
    ed1e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    ed22:	624b      	str	r3, [r1, #36]	; 0x24
    ed24:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    ed28:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
    ed2c:	f3c3 1303 	ubfx	r3, r3, #4, #4
    ed30:	f000 000f 	and.w	r0, r0, #15
    ed34:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
    ed38:	628b      	str	r3, [r1, #40]	; 0x28
    ed3a:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    ed3e:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
    ed42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    ed46:	f3c0 1003 	ubfx	r0, r0, #4, #4
    ed4a:	4303      	orrs	r3, r0
    ed4c:	62cb      	str	r3, [r1, #44]	; 0x2c
    ed4e:	f8d2 40fc 	ldr.w	r4, [r2, #252]	; 0xfc
    ed52:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    ed56:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    ed5a:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    ed5e:	b2db      	uxtb	r3, r3
    ed60:	041b      	lsls	r3, r3, #16
    ed62:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    ed66:	fa5f fc82 	uxtb.w	ip, r2
    ed6a:	ea43 030c 	orr.w	r3, r3, ip
    ed6e:	b2c2      	uxtb	r2, r0
    ed70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ed74:	630b      	str	r3, [r1, #48]	; 0x30
    ed76:	2000      	movs	r0, #0
    ed78:	bc30      	pop	{r4, r5}
    ed7a:	4770      	bx	lr
    ed7c:	4a19      	ldr	r2, [pc, #100]	; (ede4 <am_hal_mcuctrl_info_get+0x128>)
    ed7e:	6993      	ldr	r3, [r2, #24]
    ed80:	f3c3 1480 	ubfx	r4, r3, #6, #1
    ed84:	700c      	strb	r4, [r1, #0]
    ed86:	f8d2 41a0 	ldr.w	r4, [r2, #416]	; 0x1a0
    ed8a:	f3c3 0380 	ubfx	r3, r3, #2, #1
    ed8e:	704b      	strb	r3, [r1, #1]
    ed90:	f3c4 6381 	ubfx	r3, r4, #26, #2
    ed94:	710b      	strb	r3, [r1, #4]
    ed96:	6953      	ldr	r3, [r2, #20]
    ed98:	f3c3 0240 	ubfx	r2, r3, #1, #1
    ed9c:	f003 0301 	and.w	r3, r3, #1
    eda0:	bc30      	pop	{r4, r5}
    eda2:	708a      	strb	r2, [r1, #2]
    eda4:	70cb      	strb	r3, [r1, #3]
    eda6:	4770      	bx	lr
    eda8:	4a0e      	ldr	r2, [pc, #56]	; (ede4 <am_hal_mcuctrl_info_get+0x128>)
    edaa:	6848      	ldr	r0, [r1, #4]
    edac:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    edb0:	f003 0401 	and.w	r4, r3, #1
    edb4:	700c      	strb	r4, [r1, #0]
    edb6:	f3c3 0440 	ubfx	r4, r3, #1, #1
    edba:	720c      	strb	r4, [r1, #8]
    edbc:	f8d2 41c4 	ldr.w	r4, [r2, #452]	; 0x1c4
    edc0:	60cc      	str	r4, [r1, #12]
    edc2:	f8d2 41c0 	ldr.w	r4, [r2, #448]	; 0x1c0
    edc6:	4320      	orrs	r0, r4
    edc8:	f3c3 0380 	ubfx	r3, r3, #2, #1
    edcc:	6048      	str	r0, [r1, #4]
    edce:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    edd2:	740b      	strb	r3, [r1, #16]
    edd4:	694b      	ldr	r3, [r1, #20]
    edd6:	4313      	orrs	r3, r2
    edd8:	2000      	movs	r0, #0
    edda:	bc30      	pop	{r4, r5}
    eddc:	614b      	str	r3, [r1, #20]
    edde:	4770      	bx	lr
    ede0:	2006      	movs	r0, #6
    ede2:	4770      	bx	lr
    ede4:	40020000 	.word	0x40020000
    ede8:	0000f5e8 	.word	0x0000f5e8
    edec:	0000f628 	.word	0x0000f628
    edf0:	f0000f00 	.word	0xf0000f00

0000edf4 <am_hal_pwrctrl_periph_enable>:
    edf4:	b570      	push	{r4, r5, r6, lr}
    edf6:	b082      	sub	sp, #8
    edf8:	4604      	mov	r4, r0
    edfa:	f7ff ff1b 	bl	ec34 <am_hal_interrupt_master_disable>
    edfe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    ee02:	4e0f      	ldr	r6, [pc, #60]	; (ee40 <am_hal_pwrctrl_periph_enable+0x4c>)
    ee04:	4d0f      	ldr	r5, [pc, #60]	; (ee44 <am_hal_pwrctrl_periph_enable+0x50>)
    ee06:	9001      	str	r0, [sp, #4]
    ee08:	00a4      	lsls	r4, r4, #2
    ee0a:	68b3      	ldr	r3, [r6, #8]
    ee0c:	592a      	ldr	r2, [r5, r4]
    ee0e:	4313      	orrs	r3, r2
    ee10:	60b3      	str	r3, [r6, #8]
    ee12:	9801      	ldr	r0, [sp, #4]
    ee14:	442c      	add	r4, r5
    ee16:	f7ff ff11 	bl	ec3c <am_hal_interrupt_master_set>
    ee1a:	20a0      	movs	r0, #160	; 0xa0
    ee1c:	f7ff fd06 	bl	e82c <am_hal_flash_delay>
    ee20:	69b3      	ldr	r3, [r6, #24]
    ee22:	6864      	ldr	r4, [r4, #4]
    ee24:	4223      	tst	r3, r4
    ee26:	d103      	bne.n	ee30 <am_hal_pwrctrl_periph_enable+0x3c>
    ee28:	20a0      	movs	r0, #160	; 0xa0
    ee2a:	f7ff fcff 	bl	e82c <am_hal_flash_delay>
    ee2e:	69b3      	ldr	r3, [r6, #24]
    ee30:	4b03      	ldr	r3, [pc, #12]	; (ee40 <am_hal_pwrctrl_periph_enable+0x4c>)
    ee32:	699b      	ldr	r3, [r3, #24]
    ee34:	4223      	tst	r3, r4
    ee36:	bf0c      	ite	eq
    ee38:	2001      	moveq	r0, #1
    ee3a:	2000      	movne	r0, #0
    ee3c:	b002      	add	sp, #8
    ee3e:	bd70      	pop	{r4, r5, r6, pc}
    ee40:	40021000 	.word	0x40021000
    ee44:	0000f668 	.word	0x0000f668

0000ee48 <am_hal_pwrctrl_periph_disable>:
    ee48:	b570      	push	{r4, r5, r6, lr}
    ee4a:	b082      	sub	sp, #8
    ee4c:	4604      	mov	r4, r0
    ee4e:	f7ff fef1 	bl	ec34 <am_hal_interrupt_master_disable>
    ee52:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    ee56:	4e10      	ldr	r6, [pc, #64]	; (ee98 <am_hal_pwrctrl_periph_disable+0x50>)
    ee58:	4d10      	ldr	r5, [pc, #64]	; (ee9c <am_hal_pwrctrl_periph_disable+0x54>)
    ee5a:	9001      	str	r0, [sp, #4]
    ee5c:	00a4      	lsls	r4, r4, #2
    ee5e:	68b3      	ldr	r3, [r6, #8]
    ee60:	592a      	ldr	r2, [r5, r4]
    ee62:	ea23 0302 	bic.w	r3, r3, r2
    ee66:	60b3      	str	r3, [r6, #8]
    ee68:	9801      	ldr	r0, [sp, #4]
    ee6a:	442c      	add	r4, r5
    ee6c:	f7ff fee6 	bl	ec3c <am_hal_interrupt_master_set>
    ee70:	20a0      	movs	r0, #160	; 0xa0
    ee72:	f7ff fcdb 	bl	e82c <am_hal_flash_delay>
    ee76:	69b3      	ldr	r3, [r6, #24]
    ee78:	6864      	ldr	r4, [r4, #4]
    ee7a:	4223      	tst	r3, r4
    ee7c:	d003      	beq.n	ee86 <am_hal_pwrctrl_periph_disable+0x3e>
    ee7e:	20a0      	movs	r0, #160	; 0xa0
    ee80:	f7ff fcd4 	bl	e82c <am_hal_flash_delay>
    ee84:	69b3      	ldr	r3, [r6, #24]
    ee86:	4b04      	ldr	r3, [pc, #16]	; (ee98 <am_hal_pwrctrl_periph_disable+0x50>)
    ee88:	699b      	ldr	r3, [r3, #24]
    ee8a:	4223      	tst	r3, r4
    ee8c:	bf14      	ite	ne
    ee8e:	2001      	movne	r0, #1
    ee90:	2000      	moveq	r0, #0
    ee92:	b002      	add	sp, #8
    ee94:	bd70      	pop	{r4, r5, r6, pc}
    ee96:	bf00      	nop
    ee98:	40021000 	.word	0x40021000
    ee9c:	0000f668 	.word	0x0000f668

0000eea0 <am_hal_pwrctrl_low_power_init>:
    eea0:	b530      	push	{r4, r5, lr}
    eea2:	4b69      	ldr	r3, [pc, #420]	; (f048 <am_hal_pwrctrl_low_power_init+0x1a8>)
    eea4:	681a      	ldr	r2, [r3, #0]
    eea6:	b085      	sub	sp, #20
    eea8:	b912      	cbnz	r2, eeb0 <am_hal_pwrctrl_low_power_init+0x10>
    eeaa:	4a68      	ldr	r2, [pc, #416]	; (f04c <am_hal_pwrctrl_low_power_init+0x1ac>)
    eeac:	6812      	ldr	r2, [r2, #0]
    eeae:	601a      	str	r2, [r3, #0]
    eeb0:	4b67      	ldr	r3, [pc, #412]	; (f050 <am_hal_pwrctrl_low_power_init+0x1b0>)
    eeb2:	68db      	ldr	r3, [r3, #12]
    eeb4:	b2db      	uxtb	r3, r3
    eeb6:	2b12      	cmp	r3, #18
    eeb8:	d104      	bne.n	eec4 <am_hal_pwrctrl_low_power_init+0x24>
    eeba:	4c66      	ldr	r4, [pc, #408]	; (f054 <am_hal_pwrctrl_low_power_init+0x1b4>)
    eebc:	6863      	ldr	r3, [r4, #4]
    eebe:	07d8      	lsls	r0, r3, #31
    eec0:	f100 8088 	bmi.w	efd4 <am_hal_pwrctrl_low_power_init+0x134>
    eec4:	4b62      	ldr	r3, [pc, #392]	; (f050 <am_hal_pwrctrl_low_power_init+0x1b0>)
    eec6:	68da      	ldr	r2, [r3, #12]
    eec8:	b2d2      	uxtb	r2, r2
    eeca:	2a20      	cmp	r2, #32
    eecc:	d934      	bls.n	ef38 <am_hal_pwrctrl_low_power_init+0x98>
    eece:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
    eed2:	2002      	movs	r0, #2
    eed4:	f360 4213 	bfi	r2, r0, #16, #4
    eed8:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    eedc:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
    eee0:	2203      	movs	r2, #3
    eee2:	f362 5117 	bfi	r1, r2, #20, #4
    eee6:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
    eeea:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    eeee:	2405      	movs	r4, #5
    eef0:	f364 0103 	bfi	r1, r4, #0, #4
    eef4:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    eef8:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    eefc:	f360 1107 	bfi	r1, r0, #4, #4
    ef00:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    ef04:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    ef08:	2406      	movs	r4, #6
    ef0a:	f364 210b 	bfi	r1, r4, #8, #4
    ef0e:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    ef12:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    ef16:	2001      	movs	r0, #1
    ef18:	f360 310f 	bfi	r1, r0, #12, #4
    ef1c:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    ef20:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    ef24:	f362 61de 	bfi	r1, r2, #27, #4
    ef28:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    ef2c:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
    ef30:	f362 0103 	bfi	r1, r2, #0, #4
    ef34:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
    ef38:	4a45      	ldr	r2, [pc, #276]	; (f050 <am_hal_pwrctrl_low_power_init+0x1b0>)
    ef3a:	68d3      	ldr	r3, [r2, #12]
    ef3c:	b2db      	uxtb	r3, r3
    ef3e:	2b11      	cmp	r3, #17
    ef40:	d905      	bls.n	ef4e <am_hal_pwrctrl_low_power_init+0xae>
    ef42:	f8d2 335c 	ldr.w	r3, [r2, #860]	; 0x35c
    ef46:	f36f 6318 	bfc	r3, #24, #1
    ef4a:	f8c2 335c 	str.w	r3, [r2, #860]	; 0x35c
    ef4e:	2100      	movs	r1, #0
    ef50:	200c      	movs	r0, #12
    ef52:	f7ff f949 	bl	e1e8 <am_hal_cachectrl_control>
    ef56:	4b3f      	ldr	r3, [pc, #252]	; (f054 <am_hal_pwrctrl_low_power_init+0x1b4>)
    ef58:	699b      	ldr	r3, [r3, #24]
    ef5a:	f3c3 2500 	ubfx	r5, r3, #8, #1
    ef5e:	05db      	lsls	r3, r3, #23
    ef60:	d420      	bmi.n	efa4 <am_hal_pwrctrl_low_power_init+0x104>
    ef62:	4c3b      	ldr	r4, [pc, #236]	; (f050 <am_hal_pwrctrl_low_power_init+0x1b0>)
    ef64:	68e3      	ldr	r3, [r4, #12]
    ef66:	b2db      	uxtb	r3, r3
    ef68:	2b11      	cmp	r3, #17
    ef6a:	d84e      	bhi.n	f00a <am_hal_pwrctrl_low_power_init+0x16a>
    ef6c:	4c38      	ldr	r4, [pc, #224]	; (f050 <am_hal_pwrctrl_low_power_init+0x1b0>)
    ef6e:	493a      	ldr	r1, [pc, #232]	; (f058 <am_hal_pwrctrl_low_power_init+0x1b8>)
    ef70:	7e22      	ldrb	r2, [r4, #24]
    ef72:	2001      	movs	r0, #1
    ef74:	4302      	orrs	r2, r0
    ef76:	2307      	movs	r3, #7
    ef78:	7622      	strb	r2, [r4, #24]
    ef7a:	9000      	str	r0, [sp, #0]
    ef7c:	461a      	mov	r2, r3
    ef7e:	f242 7010 	movw	r0, #10000	; 0x2710
    ef82:	f7ff fc63 	bl	e84c <am_hal_flash_delay_status_check>
    ef86:	2800      	cmp	r0, #0
    ef88:	d15a      	bne.n	f040 <am_hal_pwrctrl_low_power_init+0x1a0>
    ef8a:	4b32      	ldr	r3, [pc, #200]	; (f054 <am_hal_pwrctrl_low_power_init+0x1b4>)
    ef8c:	681a      	ldr	r2, [r3, #0]
    ef8e:	f042 0201 	orr.w	r2, r2, #1
    ef92:	601a      	str	r2, [r3, #0]
    ef94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    ef96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    ef9a:	625a      	str	r2, [r3, #36]	; 0x24
    ef9c:	68e3      	ldr	r3, [r4, #12]
    ef9e:	b2db      	uxtb	r3, r3
    efa0:	2b11      	cmp	r3, #17
    efa2:	d002      	beq.n	efaa <am_hal_pwrctrl_low_power_init+0x10a>
    efa4:	2000      	movs	r0, #0
    efa6:	b005      	add	sp, #20
    efa8:	bd30      	pop	{r4, r5, pc}
    efaa:	f8d4 335c 	ldr.w	r3, [r4, #860]	; 0x35c
    efae:	f360 5356 	bfi	r3, r0, #21, #2
    efb2:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
    efb6:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    efba:	220f      	movs	r2, #15
    efbc:	f362 138b 	bfi	r3, r2, #6, #6
    efc0:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    efc4:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    efc8:	f362 0305 	bfi	r3, r2, #0, #6
    efcc:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    efd0:	b005      	add	sp, #20
    efd2:	bd30      	pop	{r4, r5, pc}
    efd4:	f7ff fe2e 	bl	ec34 <am_hal_interrupt_master_disable>
    efd8:	9002      	str	r0, [sp, #8]
    efda:	68a3      	ldr	r3, [r4, #8]
    efdc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    efe0:	60a3      	str	r3, [r4, #8]
    efe2:	9802      	ldr	r0, [sp, #8]
    efe4:	f7ff fe2a 	bl	ec3c <am_hal_interrupt_master_set>
    efe8:	20a0      	movs	r0, #160	; 0xa0
    efea:	f7ff fc1f 	bl	e82c <am_hal_flash_delay>
    efee:	69a3      	ldr	r3, [r4, #24]
    eff0:	0619      	lsls	r1, r3, #24
    eff2:	d403      	bmi.n	effc <am_hal_pwrctrl_low_power_init+0x15c>
    eff4:	20a0      	movs	r0, #160	; 0xa0
    eff6:	f7ff fc19 	bl	e82c <am_hal_flash_delay>
    effa:	69a3      	ldr	r3, [r4, #24]
    effc:	4b15      	ldr	r3, [pc, #84]	; (f054 <am_hal_pwrctrl_low_power_init+0x1b4>)
    effe:	699b      	ldr	r3, [r3, #24]
    f000:	061a      	lsls	r2, r3, #24
    f002:	f53f af5f 	bmi.w	eec4 <am_hal_pwrctrl_low_power_init+0x24>
    f006:	2001      	movs	r0, #1
    f008:	e7cd      	b.n	efa6 <am_hal_pwrctrl_low_power_init+0x106>
    f00a:	f7ff fe13 	bl	ec34 <am_hal_interrupt_master_disable>
    f00e:	9003      	str	r0, [sp, #12]
    f010:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    f014:	2219      	movs	r2, #25
    f016:	f362 138b 	bfi	r3, r2, #6, #6
    f01a:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    f01e:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
    f022:	210c      	movs	r1, #12
    f024:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    f028:	f361 0205 	bfi	r2, r1, #0, #6
    f02c:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
    f030:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    f032:	f365 5296 	bfi	r2, r5, #22, #1
    f036:	63da      	str	r2, [r3, #60]	; 0x3c
    f038:	9803      	ldr	r0, [sp, #12]
    f03a:	f7ff fdff 	bl	ec3c <am_hal_interrupt_master_set>
    f03e:	e795      	b.n	ef6c <am_hal_pwrctrl_low_power_init+0xcc>
    f040:	2004      	movs	r0, #4
    f042:	b005      	add	sp, #20
    f044:	bd30      	pop	{r4, r5, pc}
    f046:	bf00      	nop
    f048:	100011bc 	.word	0x100011bc
    f04c:	4ffff000 	.word	0x4ffff000
    f050:	40020000 	.word	0x40020000
    f054:	40021000 	.word	0x40021000
    f058:	40020018 	.word	0x40020018

0000f05c <am_hal_rtc_osc_disable>:
    f05c:	4a03      	ldr	r2, [pc, #12]	; (f06c <am_hal_rtc_osc_disable+0x10>)
    f05e:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    f062:	f043 0310 	orr.w	r3, r3, #16
    f066:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    f06a:	4770      	bx	lr
    f06c:	40004200 	.word	0x40004200

0000f070 <am_hal_sysctrl_sleep>:
    f070:	b510      	push	{r4, lr}
    f072:	b082      	sub	sp, #8
    f074:	4604      	mov	r4, r0
    f076:	f7ff fddd 	bl	ec34 <am_hal_interrupt_master_disable>
    f07a:	9001      	str	r0, [sp, #4]
    f07c:	b124      	cbz	r4, f088 <am_hal_sysctrl_sleep+0x18>
    f07e:	4b12      	ldr	r3, [pc, #72]	; (f0c8 <am_hal_sysctrl_sleep+0x58>)
    f080:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    f084:	07db      	lsls	r3, r3, #31
    f086:	d513      	bpl.n	f0b0 <am_hal_sysctrl_sleep+0x40>
    f088:	4a10      	ldr	r2, [pc, #64]	; (f0cc <am_hal_sysctrl_sleep+0x5c>)
    f08a:	6913      	ldr	r3, [r2, #16]
    f08c:	f023 0304 	bic.w	r3, r3, #4
    f090:	6113      	str	r3, [r2, #16]
    f092:	f3bf 8f4f 	dsb	sy
    f096:	4a0e      	ldr	r2, [pc, #56]	; (f0d0 <am_hal_sysctrl_sleep+0x60>)
    f098:	4b0e      	ldr	r3, [pc, #56]	; (f0d4 <am_hal_sysctrl_sleep+0x64>)
    f09a:	6812      	ldr	r2, [r2, #0]
    f09c:	601a      	str	r2, [r3, #0]
    f09e:	bf30      	wfi
    f0a0:	f3bf 8f6f 	isb	sy
    f0a4:	9801      	ldr	r0, [sp, #4]
    f0a6:	b002      	add	sp, #8
    f0a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f0ac:	f7ff bdc6 	b.w	ec3c <am_hal_interrupt_master_set>
    f0b0:	4b09      	ldr	r3, [pc, #36]	; (f0d8 <am_hal_sysctrl_sleep+0x68>)
    f0b2:	681a      	ldr	r2, [r3, #0]
    f0b4:	b912      	cbnz	r2, f0bc <am_hal_sysctrl_sleep+0x4c>
    f0b6:	4a09      	ldr	r2, [pc, #36]	; (f0dc <am_hal_sysctrl_sleep+0x6c>)
    f0b8:	6812      	ldr	r2, [r2, #0]
    f0ba:	601a      	str	r2, [r3, #0]
    f0bc:	4a03      	ldr	r2, [pc, #12]	; (f0cc <am_hal_sysctrl_sleep+0x5c>)
    f0be:	6913      	ldr	r3, [r2, #16]
    f0c0:	f043 0304 	orr.w	r3, r3, #4
    f0c4:	6113      	str	r3, [r2, #16]
    f0c6:	e7e4      	b.n	f092 <am_hal_sysctrl_sleep+0x22>
    f0c8:	40020000 	.word	0x40020000
    f0cc:	e000ed00 	.word	0xe000ed00
    f0d0:	5fff0000 	.word	0x5fff0000
    f0d4:	100011c0 	.word	0x100011c0
    f0d8:	100011bc 	.word	0x100011bc
    f0dc:	4ffff000 	.word	0x4ffff000

0000f0e0 <am_hal_sysctrl_fpu_enable>:
    f0e0:	4b02      	ldr	r3, [pc, #8]	; (f0ec <am_hal_sysctrl_fpu_enable+0xc>)
    f0e2:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
    f0e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    f0ea:	4770      	bx	lr
    f0ec:	e000ed00 	.word	0xe000ed00

0000f0f0 <am_hal_sysctrl_fpu_stacking_enable>:
    f0f0:	b510      	push	{r4, lr}
    f0f2:	b082      	sub	sp, #8
    f0f4:	4604      	mov	r4, r0
    f0f6:	f7ff fd9d 	bl	ec34 <am_hal_interrupt_master_disable>
    f0fa:	4909      	ldr	r1, [pc, #36]	; (f120 <am_hal_sysctrl_fpu_stacking_enable+0x30>)
    f0fc:	9001      	str	r0, [sp, #4]
    f0fe:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    f100:	2c00      	cmp	r4, #0
    f102:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
    f106:	bf14      	ite	ne
    f108:	f04f 4340 	movne.w	r3, #3221225472	; 0xc0000000
    f10c:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
    f110:	4313      	orrs	r3, r2
    f112:	634b      	str	r3, [r1, #52]	; 0x34
    f114:	9801      	ldr	r0, [sp, #4]
    f116:	b002      	add	sp, #8
    f118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f11c:	f7ff bd8e 	b.w	ec3c <am_hal_interrupt_master_set>
    f120:	e000ef00 	.word	0xe000ef00

0000f124 <am_hal_tpiu_enable>:
    f124:	b510      	push	{r4, lr}
    f126:	4b23      	ldr	r3, [pc, #140]	; (f1b4 <am_hal_tpiu_enable+0x90>)
    f128:	6804      	ldr	r4, [r0, #0]
    f12a:	2200      	movs	r2, #0
    f12c:	b084      	sub	sp, #16
    f12e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    f132:	b334      	cbz	r4, f182 <am_hal_tpiu_enable+0x5e>
    f134:	4a20      	ldr	r2, [pc, #128]	; (f1b8 <am_hal_tpiu_enable+0x94>)
    f136:	4921      	ldr	r1, [pc, #132]	; (f1bc <am_hal_tpiu_enable+0x98>)
    f138:	2001      	movs	r0, #1
    f13a:	6058      	str	r0, [r3, #4]
    f13c:	f5a4 4361 	sub.w	r3, r4, #57600	; 0xe100
    f140:	a801      	add	r0, sp, #4
    f142:	428b      	cmp	r3, r1
    f144:	bf88      	it	hi
    f146:	4614      	movhi	r4, r2
    f148:	f7ff fa64 	bl	e614 <am_hal_clkgen_status_get>
    f14c:	9b01      	ldr	r3, [sp, #4]
    f14e:	1c5a      	adds	r2, r3, #1
    f150:	d02d      	beq.n	f1ae <am_hal_tpiu_enable+0x8a>
    f152:	08db      	lsrs	r3, r3, #3
    f154:	fbb3 f4f4 	udiv	r4, r3, r4
    f158:	3c01      	subs	r4, #1
    f15a:	b2a4      	uxth	r4, r4
    f15c:	4b15      	ldr	r3, [pc, #84]	; (f1b4 <am_hal_tpiu_enable+0x90>)
    f15e:	4a18      	ldr	r2, [pc, #96]	; (f1c0 <am_hal_tpiu_enable+0x9c>)
    f160:	611c      	str	r4, [r3, #16]
    f162:	2102      	movs	r1, #2
    f164:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
    f168:	2000      	movs	r0, #0
    f16a:	f240 2101 	movw	r1, #513	; 0x201
    f16e:	f8c3 0f00 	str.w	r0, [r3, #3840]	; 0xf00
    f172:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
    f176:	f44f 7048 	mov.w	r0, #800	; 0x320
    f17a:	f7ff fb57 	bl	e82c <am_hal_flash_delay>
    f17e:	b004      	add	sp, #16
    f180:	bd10      	pop	{r4, pc}
    f182:	6902      	ldr	r2, [r0, #16]
    f184:	611a      	str	r2, [r3, #16]
    f186:	6882      	ldr	r2, [r0, #8]
    f188:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    f18c:	68c1      	ldr	r1, [r0, #12]
    f18e:	2201      	movs	r2, #1
    f190:	3901      	subs	r1, #1
    f192:	408a      	lsls	r2, r1
    f194:	605a      	str	r2, [r3, #4]
    f196:	f8c3 4f00 	str.w	r4, [r3, #3840]	; 0xf00
    f19a:	4a09      	ldr	r2, [pc, #36]	; (f1c0 <am_hal_tpiu_enable+0x9c>)
    f19c:	6843      	ldr	r3, [r0, #4]
    f19e:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    f1a2:	f44f 7048 	mov.w	r0, #800	; 0x320
    f1a6:	f7ff fb41 	bl	e82c <am_hal_flash_delay>
    f1aa:	b004      	add	sp, #16
    f1ac:	bd10      	pop	{r4, pc}
    f1ae:	2405      	movs	r4, #5
    f1b0:	e7d4      	b.n	f15c <am_hal_tpiu_enable+0x38>
    f1b2:	bf00      	nop
    f1b4:	e0040000 	.word	0xe0040000
    f1b8:	000f4240 	.word	0x000f4240
    f1bc:	001da380 	.word	0x001da380
    f1c0:	40020000 	.word	0x40020000
    f1c4:	6f727245 	.word	0x6f727245
    f1c8:	202d2072 	.word	0x202d2072
    f1cc:	65736572 	.word	0x65736572
    f1d0:	74617672 	.word	0x74617672
    f1d4:	206e6f69 	.word	0x206e6f69
    f1d8:	7420666f 	.word	0x7420666f
    f1dc:	41206568 	.word	0x41206568
    f1e0:	69204344 	.word	0x69204344
    f1e4:	6174736e 	.word	0x6174736e
    f1e8:	2065636e 	.word	0x2065636e
    f1ec:	6c696166 	.word	0x6c696166
    f1f0:	0a2e6465 	.word	0x0a2e6465
    f1f4:	00000000 	.word	0x00000000
    f1f8:	6f727245 	.word	0x6f727245
    f1fc:	202d2072 	.word	0x202d2072
    f200:	20434441 	.word	0x20434441
    f204:	65776f70 	.word	0x65776f70
    f208:	6e6f2072 	.word	0x6e6f2072
    f20c:	69616620 	.word	0x69616620
    f210:	2e64656c 	.word	0x2e64656c
    f214:	0000000a 	.word	0x0000000a
    f218:	6f727245 	.word	0x6f727245
    f21c:	202d2072 	.word	0x202d2072
    f220:	666e6f63 	.word	0x666e6f63
    f224:	72756769 	.word	0x72756769
    f228:	20676e69 	.word	0x20676e69
    f22c:	20434441 	.word	0x20434441
    f230:	6c696166 	.word	0x6c696166
    f234:	0a2e6465 	.word	0x0a2e6465
    f238:	00000000 	.word	0x00000000
    f23c:	20434441 	.word	0x20434441
    f240:	54414256 	.word	0x54414256
    f244:	6e612054 	.word	0x6e612054
    f248:	65542064 	.word	0x65542064
    f24c:	7265706d 	.word	0x7265706d
    f250:	72757461 	.word	0x72757461
    f254:	65532065 	.word	0x65532065
    f258:	6e69736e 	.word	0x6e69736e
    f25c:	78452067 	.word	0x78452067
    f260:	6c706d61 	.word	0x6c706d61
    f264:	000a2e65 	.word	0x000a2e65
    f268:	0000000a 	.word	0x0000000a
    f26c:	4d495443 	.word	0x4d495443
    f270:	3d335245 	.word	0x3d335245
    f274:	30257830 	.word	0x30257830
    f278:	40205838 	.word	0x40205838
    f27c:	25783020 	.word	0x25783020
    f280:	0a583830 	.word	0x0a583830
    f284:	00000000 	.word	0x00000000
    f288:	20434441 	.word	0x20434441
    f28c:	49474552 	.word	0x49474552
    f290:	52455453 	.word	0x52455453
    f294:	20402053 	.word	0x20402053
    f298:	30257830 	.word	0x30257830
    f29c:	000a5838 	.word	0x000a5838
    f2a0:	20434441 	.word	0x20434441
    f2a4:	20474643 	.word	0x20474643
    f2a8:	203d2020 	.word	0x203d2020
    f2ac:	30257830 	.word	0x30257830
    f2b0:	000a5838 	.word	0x000a5838
    f2b4:	20434441 	.word	0x20434441
    f2b8:	544f4c53 	.word	0x544f4c53
    f2bc:	203d2030 	.word	0x203d2030
    f2c0:	30257830 	.word	0x30257830
    f2c4:	000a5838 	.word	0x000a5838
    f2c8:	20434441 	.word	0x20434441
    f2cc:	544f4c53 	.word	0x544f4c53
    f2d0:	203d2031 	.word	0x203d2031
    f2d4:	30257830 	.word	0x30257830
    f2d8:	000a5838 	.word	0x000a5838
    f2dc:	20434441 	.word	0x20434441
    f2e0:	544f4c53 	.word	0x544f4c53
    f2e4:	203d2032 	.word	0x203d2032
    f2e8:	30257830 	.word	0x30257830
    f2ec:	000a5838 	.word	0x000a5838
    f2f0:	20434441 	.word	0x20434441
    f2f4:	544f4c53 	.word	0x544f4c53
    f2f8:	203d2033 	.word	0x203d2033
    f2fc:	30257830 	.word	0x30257830
    f300:	000a5838 	.word	0x000a5838
    f304:	20434441 	.word	0x20434441
    f308:	544f4c53 	.word	0x544f4c53
    f30c:	203d2034 	.word	0x203d2034
    f310:	30257830 	.word	0x30257830
    f314:	000a5838 	.word	0x000a5838
    f318:	20434441 	.word	0x20434441
    f31c:	544f4c53 	.word	0x544f4c53
    f320:	203d2035 	.word	0x203d2035
    f324:	30257830 	.word	0x30257830
    f328:	000a5838 	.word	0x000a5838
    f32c:	20434441 	.word	0x20434441
    f330:	544f4c53 	.word	0x544f4c53
    f334:	203d2036 	.word	0x203d2036
    f338:	30257830 	.word	0x30257830
    f33c:	000a5838 	.word	0x000a5838
    f340:	20434441 	.word	0x20434441
    f344:	544f4c53 	.word	0x544f4c53
    f348:	203d2037 	.word	0x203d2037
    f34c:	30257830 	.word	0x30257830
    f350:	000a5838 	.word	0x000a5838
    f354:	4d495254 	.word	0x4d495254
    f358:	2044454d 	.word	0x2044454d
    f35c:	504d4554 	.word	0x504d4554
    f360:	20202020 	.word	0x20202020
    f364:	2e25203d 	.word	0x2e25203d
    f368:	000a6633 	.word	0x000a6633
    f36c:	4d495254 	.word	0x4d495254
    f370:	2044454d 	.word	0x2044454d
    f374:	544c4f56 	.word	0x544c4f56
    f378:	20454741 	.word	0x20454741
    f37c:	2e25203d 	.word	0x2e25203d
    f380:	000a6633 	.word	0x000a6633
    f384:	4d495254 	.word	0x4d495254
    f388:	2044454d 	.word	0x2044454d
    f38c:	7366664f 	.word	0x7366664f
    f390:	20207465 	.word	0x20207465
    f394:	2e25203d 	.word	0x2e25203d
    f398:	000a6633 	.word	0x000a6633
    f39c:	696c6163 	.word	0x696c6163
    f3a0:	74617262 	.word	0x74617262
    f3a4:	00006465 	.word	0x00006465
    f3a8:	61636e75 	.word	0x61636e75
    f3ac:	7262696c 	.word	0x7262696c
    f3b0:	64657461 	.word	0x64657461
    f3b4:	66656420 	.word	0x66656420
    f3b8:	746c7561 	.word	0x746c7561
    f3bc:	00000000 	.word	0x00000000
    f3c0:	65746f4e 	.word	0x65746f4e
    f3c4:	74202d20 	.word	0x74202d20
    f3c8:	65736568 	.word	0x65736568
    f3cc:	69727420 	.word	0x69727420
    f3d0:	6176206d 	.word	0x6176206d
    f3d4:	7365756c 	.word	0x7365756c
    f3d8:	65726120 	.word	0x65726120
    f3dc:	73252720 	.word	0x73252720
    f3e0:	61762027 	.word	0x61762027
    f3e4:	7365756c 	.word	0x7365756c
    f3e8:	00000a2e 	.word	0x00000a2e
    f3ec:	54414256 	.word	0x54414256
    f3f0:	203d2054 	.word	0x203d2054
    f3f4:	332e253c 	.word	0x332e253c
    f3f8:	28203e66 	.word	0x28203e66
    f3fc:	30257830 	.word	0x30257830
    f400:	20295834 	.word	0x20295834
    f404:	00000000 	.word	0x00000000
    f408:	504d4554 	.word	0x504d4554
    f40c:	25203d20 	.word	0x25203d20
    f410:	2066322e 	.word	0x2066322e
    f414:	30282043 	.word	0x30282043
    f418:	34302578 	.word	0x34302578
    f41c:	00202958 	.word	0x00202958
    f420:	322e2520 	.word	0x322e2520
    f424:	00462066 	.word	0x00462066
    f428:	6f727245 	.word	0x6f727245
    f42c:	61203a72 	.word	0x61203a72
    f430:	61685f6d 	.word	0x61685f6d
    f434:	64615f4c 	.word	0x64615f4c
    f438:	6f635f63 	.word	0x6f635f63
    f43c:	6f72746e 	.word	0x6f72746e
    f440:	6572206c 	.word	0x6572206c
    f444:	6e727574 	.word	0x6e727574
    f448:	25206465 	.word	0x25206465
    f44c:	00000a64 	.word	0x00000a64
    f450:	0a0a0a0a 	.word	0x0a0a0a0a
    f454:	0a0a0a0a 	.word	0x0a0a0a0a
    f458:	0a0a0a0a 	.word	0x0a0a0a0a
    f45c:	0a0a0a0a 	.word	0x0a0a0a0a
    f460:	00000a0a 	.word	0x00000a0a

0000f464 <g_sADC_Cfg>:
    f464:	01070002 00010100                       ........

0000f46c <g_AM_BSP_GPIO_BUTTON0>:
    f46c:	00001003                                ....

0000f470 <g_AM_BSP_GPIO_ITM_SWO>:
    f470:	00000002                                ....

0000f474 <am_hal_cachectrl_defaults>:
    f474:	00000308                                ....

0000f478 <g_AM_HAL_GPIO_DISABLE>:
    f478:	00000003                                ....

0000f47c <g_AM_HAL_GPIO_OUTPUT>:
    f47c:	00000403                                ....

0000f480 <g_AM_HAL_GPIO_TRISTATE>:
    f480:	00000c03                                ....

0000f484 <g_ui8Bit76Capabilities>:
    f484:	02800101 80010180 80800101 80808080     ................
    f494:	80808080 80808008 01800180 80808080     ................
    f4a4:	80808080 01800402 01010401 80808080     ................
    f4b4:	00000101                                ....

0000f4b8 <g_ui8Inpen>:
    f4b8:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
    f4c8:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
    f4d8:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
    f4e8:	00003130                                01..

0000f4ec <g_ui8NCEtable>:
    f4ec:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    f4fc:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    f50c:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    f51c:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    f52c:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    f53c:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    f54c:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    f55c:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    f56c:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    f57c:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    f58c:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    f59c:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    f5ac:	32221202 43231303                       .."2..#C

0000f5b4 <g_ui8nCEpins>:
    f5b4:	02070707 00080802 01020202 01010101     ................
    f5c4:	01010101 01010101 01010101 01010101     ................
    f5d4:	01010101 08010101 01010008 01010101     ................
    f5e4:	00000101                                ....

0000f5e8 <g_am_hal_mcuctrl_flash_size>:
    f5e8:	00004000 00008000 00010000 00020000     .@..............
    f5f8:	00040000 00080000 00100000 00200000     .............. .
    f608:	00180000 00000000 00000000 00000000     ................
	...

0000f628 <g_am_hal_mcuctrl_sram_size>:
    f628:	00004000 00008000 00010000 00020000     .@..............
    f638:	00040000 00080000 00100000 00060000     ................
    f648:	000c0000 00000000 00000000 00000000     ................
	...

0000f668 <am_hal_pwrctrl_peripheral_control>:
	...
    f674:	00000001 00000004 00000004 00000002     ................
    f684:	00000008 00000008 00000004 00000008     ................
    f694:	00000008 00000008 00000008 00000008     ................
    f6a4:	00000010 00000010 00000010 00000020     ............ ...
    f6b4:	00000010 00000010 00000040 00000010     ........@.......
    f6c4:	00000010 00000080 00000004 00000004     ................
    f6d4:	00000100 00000004 00000004 00000200     ................
    f6e4:	00000020 00000020 00000400 00000004      ... ...........
    f6f4:	00000004 00000800 00000040 00000040     ........@...@...
    f704:	00001000 00000080 00000080 00002000     ............. ..
    f714:	00000100 00000100                       ........
