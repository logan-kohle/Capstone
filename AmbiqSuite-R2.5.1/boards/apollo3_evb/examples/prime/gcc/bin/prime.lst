
bin/prime.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 c9 ce 00 00 bd ce 00 00 d5 c2 00 00     ................
    c010:	c1 ce 00 00 c1 ce 00 00 c1 ce 00 00 00 00 00 00     ................
	...
    c02c:	c5 ce 00 00 c5 ce 00 00 00 00 00 00 c5 ce 00 00     ................
    c03c:	c5 ce 00 00 c5 ce 00 00 c5 ce 00 00 c5 ce 00 00     ................
    c04c:	c5 ce 00 00 c5 ce 00 00 c5 ce 00 00 c5 ce 00 00     ................
    c05c:	c5 ce 00 00 c5 ce 00 00 c5 ce 00 00 c5 ce 00 00     ................
    c06c:	c5 ce 00 00 c5 ce 00 00 c5 ce 00 00 c5 ce 00 00     ................
    c07c:	c5 ce 00 00 c5 ce 00 00 c5 ce 00 00 c5 ce 00 00     ................
    c08c:	c5 ce 00 00 c5 ce 00 00 c5 ce 00 00 c5 ce 00 00     ................
    c09c:	c5 ce 00 00 c5 ce 00 00 c5 ce 00 00 c5 ce 00 00     ................
    c0ac:	c5 ce 00 00 c5 ce 00 00 c5 ce 00 00 c5 ce 00 00     ................
    c0bc:	c5 ce 00 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <prime_number>:
  int prime;
  int total;

  total = 0;

  for ( i = 2 + id; i <= n; i = i + p )
    c1a0:	f101 0c02 	add.w	ip, r1, #2
    c1a4:	4584      	cmp	ip, r0
{
    c1a6:	b500      	push	{lr}
  total = 0;
    c1a8:	f04f 0e00 	mov.w	lr, #0
  for ( i = 2 + id; i <= n; i = i + p )
    c1ac:	dc14      	bgt.n	c1d8 <prime_number+0x38>
  {
    prime = 1;
    for ( j = 2; j < i; j++ )
    c1ae:	f1bc 0f02 	cmp.w	ip, #2
    c1b2:	dd0c      	ble.n	c1ce <prime_number+0x2e>
    {
      if ( ( i % j ) == 0 )
    c1b4:	f01c 0f01 	tst.w	ip, #1
    c1b8:	d00b      	beq.n	c1d2 <prime_number+0x32>
    for ( j = 2; j < i; j++ )
    c1ba:	2302      	movs	r3, #2
    c1bc:	e004      	b.n	c1c8 <prime_number+0x28>
      if ( ( i % j ) == 0 )
    c1be:	fb9c f1f3 	sdiv	r1, ip, r3
    c1c2:	fb03 c111 	mls	r1, r3, r1, ip
    c1c6:	b121      	cbz	r1, c1d2 <prime_number+0x32>
    for ( j = 2; j < i; j++ )
    c1c8:	3301      	adds	r3, #1
    c1ca:	4563      	cmp	r3, ip
    c1cc:	d1f7      	bne.n	c1be <prime_number+0x1e>
      {
        prime = 0;
        break;
      }
    }
    total = total + prime;
    c1ce:	f10e 0e01 	add.w	lr, lr, #1
  for ( i = 2 + id; i <= n; i = i + p )
    c1d2:	4494      	add	ip, r2
    c1d4:	4560      	cmp	r0, ip
    c1d6:	daea      	bge.n	c1ae <prime_number+0xe>
  }
  return total;
}
    c1d8:	4670      	mov	r0, lr
    c1da:	f85d fb04 	ldr.w	pc, [sp], #4
    c1de:	bf00      	nop

0000c1e0 <main>:
    uint32_t ui32Result;

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c1e0:	2100      	movs	r1, #0
{
    c1e2:	b570      	push	{r4, r5, r6, lr}
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c1e4:	4608      	mov	r0, r1
    c1e6:	f001 f8e1 	bl	d3ac <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c1ea:	482b      	ldr	r0, [pc, #172]	; (c298 <main+0xb8>)
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c1ec:	4e2a      	ldr	r6, [pc, #168]	; (c298 <main+0xb8>)
    PWRCTRL->DEVPWREN = 0;
    c1ee:	4d2b      	ldr	r5, [pc, #172]	; (c29c <main+0xbc>)
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c1f0:	f000 ff34 	bl	d05c <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c1f4:	f000 ff56 	bl	d0a4 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    c1f8:	f000 fec0 	bl	cf7c <am_bsp_low_power_init>

#if (PRINT_UART == 1)
    am_bsp_uart_printf_enable();
    c1fc:	f000 fede 	bl	cfbc <am_bsp_uart_printf_enable>

    //
    // Clear the terminal and print the banner.
    //
    am_util_stdio_terminal_clear();
    c200:	f000 fe56 	bl	ceb0 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Ambiq Micro 'prime' example.\n\n");
    c204:	4826      	ldr	r0, [pc, #152]	; (c2a0 <main+0xc0>)
    c206:	f000 fe39 	bl	ce7c <am_util_stdio_printf>

    //
    // Brief description
    //
    am_util_stdio_printf("Used for measuring power while computing the number of prime numbers in a range.\n");
    c20a:	4826      	ldr	r0, [pc, #152]	; (c2a4 <main+0xc4>)
    c20c:	f000 fe36 	bl	ce7c <am_util_stdio_printf>

    //
    // Print the compiler version.
    //
    am_util_stdio_printf("App Compiler:    %s\n", COMPILER_VERSION);
    c210:	4925      	ldr	r1, [pc, #148]	; (c2a8 <main+0xc8>)
    c212:	4826      	ldr	r0, [pc, #152]	; (c2ac <main+0xcc>)
    c214:	f000 fe32 	bl	ce7c <am_util_stdio_printf>
    am_util_stdio_printf("HAL Compiler:    %s\n", g_ui8HALcompiler);
    c218:	4925      	ldr	r1, [pc, #148]	; (c2b0 <main+0xd0>)
    c21a:	4826      	ldr	r0, [pc, #152]	; (c2b4 <main+0xd4>)
    c21c:	f000 fe2e 	bl	ce7c <am_util_stdio_printf>
    am_util_stdio_printf("HAL SDK version: %d.%d.%d\n",
                         g_ui32HALversion.s.Major,
                         g_ui32HALversion.s.Minor,
                         g_ui32HALversion.s.Revision);
    c220:	4925      	ldr	r1, [pc, #148]	; (c2b8 <main+0xd8>)
    am_util_stdio_printf("HAL SDK version: %d.%d.%d\n",
    c222:	4826      	ldr	r0, [pc, #152]	; (c2bc <main+0xdc>)
    c224:	784b      	ldrb	r3, [r1, #1]
    c226:	788a      	ldrb	r2, [r1, #2]
    c228:	78c9      	ldrb	r1, [r1, #3]
    c22a:	f000 fe27 	bl	ce7c <am_util_stdio_printf>

    //
    // To minimize power during the run, disable the UART.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(10000));
    c22e:	4824      	ldr	r0, [pc, #144]	; (c2c0 <main+0xe0>)
    c230:	f001 f958 	bl	d4e4 <am_hal_flash_delay>
    am_bsp_uart_printf_disable();
    c234:	f000 fef0 	bl	d018 <am_bsp_uart_printf_disable>
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c238:	4630      	mov	r0, r6
    c23a:	f000 ff0f 	bl	d05c <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c23e:	f000 ff31 	bl	d0a4 <am_hal_cachectrl_enable>
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEM_FLASH_MIN);
    c242:	200e      	movs	r0, #14
    c244:	f001 fc12 	bl	da6c <am_hal_pwrctrl_memory_enable>
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEM_SRAM_8K_DTCM);
    c248:	2001      	movs	r0, #1
    c24a:	f001 fc0f 	bl	da6c <am_hal_pwrctrl_memory_enable>
    CLKGEN->OCTRL_b.OSEL = 1;
    c24e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    VCOMP->PWDKEY = _VAL2FLD(VCOMP_PWDKEY_PWDKEY, VCOMP_PWDKEY_PWDKEY_Key);
    c252:	481c      	ldr	r0, [pc, #112]	; (c2c4 <main+0xe4>)
    CLKGEN->OCTRL_b.OSEL = 1;
    c254:	8993      	ldrh	r3, [r2, #12]
    PWRCTRL->DEVPWREN = 0;
    c256:	2100      	movs	r1, #0
    CLKGEN->OCTRL_b.OSEL = 1;
    c258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    VCOMP->PWDKEY = _VAL2FLD(VCOMP_PWDKEY_PWDKEY, VCOMP_PWDKEY_PWDKEY_Key);
    c25c:	2437      	movs	r4, #55	; 0x37
    CLKGEN->OCTRL_b.OSEL = 1;
    c25e:	8193      	strh	r3, [r2, #12]
    VCOMP->PWDKEY = _VAL2FLD(VCOMP_PWDKEY_PWDKEY, VCOMP_PWDKEY_PWDKEY_Key);
    c260:	6084      	str	r4, [r0, #8]
        set_for_min_power();

        //
        // Determine the number of primes for the given value.
        //
        ui32Result = prime_number(NUM_OF_PRIMES_IN, 0, 1);
    c262:	2201      	movs	r2, #1
    PWRCTRL->DEVPWREN = 0;
    c264:	60a9      	str	r1, [r5, #8]
        ui32Result = prime_number(NUM_OF_PRIMES_IN, 0, 1);
    c266:	4818      	ldr	r0, [pc, #96]	; (c2c8 <main+0xe8>)
    c268:	f7ff ff9a 	bl	c1a0 <prime_number>
    c26c:	4604      	mov	r4, r0

#if (PRINT_UART == 1)
        //
        // Print the result
        //
        am_bsp_uart_printf_enable();
    c26e:	f000 fea5 	bl	cfbc <am_bsp_uart_printf_enable>

        if ( ui32Result == EXP_PRIMES )
    c272:	f242 5378 	movw	r3, #9592	; 0x2578
    c276:	429c      	cmp	r4, r3
        {
            am_util_stdio_printf("Pass: number of primes for %d is %d.\n", NUM_OF_PRIMES_IN, ui32Result);
    c278:	4913      	ldr	r1, [pc, #76]	; (c2c8 <main+0xe8>)
    c27a:	4814      	ldr	r0, [pc, #80]	; (c2cc <main+0xec>)
        }
        else
        {
            am_util_stdio_printf("ERROR: Invalid result. Expected %d, got %d.\n", NUM_OF_PRIMES_IN, ui32Result);
    c27c:	bf1c      	itt	ne
    c27e:	4912      	ldrne	r1, [pc, #72]	; (c2c8 <main+0xe8>)
    c280:	4813      	ldrne	r0, [pc, #76]	; (c2d0 <main+0xf0>)
            am_util_stdio_printf("Pass: number of primes for %d is %d.\n", NUM_OF_PRIMES_IN, ui32Result);
    c282:	4622      	mov	r2, r4
            am_util_stdio_printf("ERROR: Invalid result. Expected %d, got %d.\n", NUM_OF_PRIMES_IN, ui32Result);
    c284:	bf18      	it	ne
    c286:	4622      	movne	r2, r4
    c288:	f000 fdf8 	bl	ce7c <am_util_stdio_printf>
        }

        am_hal_flash_delay(FLASH_CYCLES_US(10000));
    c28c:	480c      	ldr	r0, [pc, #48]	; (c2c0 <main+0xe0>)
    c28e:	f001 f929 	bl	d4e4 <am_hal_flash_delay>
        am_bsp_uart_printf_disable();
    c292:	f000 fec1 	bl	d018 <am_bsp_uart_printf_disable>
        set_for_min_power();
    c296:	e7cf      	b.n	c238 <main+0x58>
    c298:	0000e714 	.word	0x0000e714
    c29c:	40021000 	.word	0x40021000
    c2a0:	0000e598 	.word	0x0000e598
    c2a4:	0000e5b8 	.word	0x0000e5b8
    c2a8:	0000e60c 	.word	0x0000e60c
    c2ac:	0000e62c 	.word	0x0000e62c
    c2b0:	0000e71c 	.word	0x0000e71c
    c2b4:	0000e644 	.word	0x0000e644
    c2b8:	0000e718 	.word	0x0000e718
    c2bc:	0000e65c 	.word	0x0000e65c
    c2c0:	00027100 	.word	0x00027100
    c2c4:	4000c000 	.word	0x4000c000
    c2c8:	000186a0 	.word	0x000186a0
    c2cc:	0000e678 	.word	0x0000e678
    c2d0:	0000e6a0 	.word	0x0000e6a0

0000c2d4 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    c2d4:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    c2d6:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    c2da:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    c2dc:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    c2e0:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    c2e4:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c2e8:	f000 f806 	bl	c2f8 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    c2ec:	bd01      	pop	{r0, pc}
    c2ee:	bf00      	nop

0000c2f0 <getStackedReg>:
}

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c2f0:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c2f2:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c2f4:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c2f6:	4770      	bx	lr

0000c2f8 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c2f8:	b510      	push	{r4, lr}
    volatile am_fault_t sFaultData;
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_t  sHalFaultData = {0};
#else
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c2fa:	2300      	movs	r3, #0
{
    c2fc:	b092      	sub	sp, #72	; 0x48
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c2fe:	e9cd 3300 	strd	r3, r3, [sp]
    c302:	e9cd 3302 	strd	r3, r3, [sp, #8]
    c306:	e9cd 3304 	strd	r3, r3, [sp, #16]
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c30a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c30e:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c310:	f8d2 3d28 	ldr.w	r3, [r2, #3368]	; 0xd28
    c314:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c316:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c318:	b2db      	uxtb	r3, r3
    c31a:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c31e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c320:	f3c3 2307 	ubfx	r3, r3, #8, #8
    c324:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c328:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c32a:	0c1b      	lsrs	r3, r3, #16
    c32c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c330:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
    c334:	930f      	str	r3, [sp, #60]	; 0x3c

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c336:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
    c33a:	079b      	lsls	r3, r3, #30
{
    c33c:	4604      	mov	r4, r0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c33e:	d437      	bmi.n	c3b0 <am_util_faultisr_collect_data+0xb8>
    c340:	f04f 33ff 	mov.w	r3, #4294967295

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c344:	4621      	mov	r1, r4
    c346:	2000      	movs	r0, #0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c348:	930e      	str	r3, [sp, #56]	; 0x38
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c34a:	f7ff ffd1 	bl	c2f0 <getStackedReg>
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c34e:	4621      	mov	r1, r4
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c350:	4603      	mov	r3, r0
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c352:	2001      	movs	r0, #1
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c354:	9306      	str	r3, [sp, #24]
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c356:	f7ff ffcb 	bl	c2f0 <getStackedReg>
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c35a:	4621      	mov	r1, r4
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c35c:	4603      	mov	r3, r0
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c35e:	2002      	movs	r0, #2
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c360:	9307      	str	r3, [sp, #28]
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c362:	f7ff ffc5 	bl	c2f0 <getStackedReg>
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c366:	4621      	mov	r1, r4
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c368:	4603      	mov	r3, r0
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c36a:	2003      	movs	r0, #3
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c36c:	9308      	str	r3, [sp, #32]
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c36e:	f7ff ffbf 	bl	c2f0 <getStackedReg>
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c372:	4621      	mov	r1, r4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c374:	4603      	mov	r3, r0
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c376:	2004      	movs	r0, #4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c378:	9309      	str	r3, [sp, #36]	; 0x24
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c37a:	f7ff ffb9 	bl	c2f0 <getStackedReg>
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c37e:	4621      	mov	r1, r4
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c380:	4603      	mov	r3, r0
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c382:	2005      	movs	r0, #5
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c384:	930a      	str	r3, [sp, #40]	; 0x28
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c386:	f7ff ffb3 	bl	c2f0 <getStackedReg>
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c38a:	4621      	mov	r1, r4
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c38c:	4603      	mov	r3, r0
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c38e:	2006      	movs	r0, #6
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c390:	930b      	str	r3, [sp, #44]	; 0x2c
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c392:	f7ff ffad 	bl	c2f0 <getStackedReg>
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c396:	4621      	mov	r1, r4
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c398:	4603      	mov	r3, r0
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c39a:	2007      	movs	r0, #7
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c39c:	930c      	str	r3, [sp, #48]	; 0x30
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c39e:	f7ff ffa7 	bl	c2f0 <getStackedReg>
    //
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_get(&sHalFaultData);
#else
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c3a2:	4669      	mov	r1, sp
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c3a4:	4603      	mov	r3, r0
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c3a6:	2002      	movs	r0, #2
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c3a8:	930d      	str	r3, [sp, #52]	; 0x34
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c3aa:	f001 fa6d 	bl	d888 <am_hal_mcuctrl_info_get>
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    c3ae:	e7fe      	b.n	c3ae <am_util_faultisr_collect_data+0xb6>
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c3b0:	4601      	mov	r1, r0
    c3b2:	2006      	movs	r0, #6
    c3b4:	f7ff ff9c 	bl	c2f0 <getStackedReg>
    c3b8:	4603      	mov	r3, r0
    c3ba:	e7c3      	b.n	c344 <am_util_faultisr_collect_data+0x4c>

0000c3bc <divu64_10>:
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c3bc:	2900      	cmp	r1, #0
    c3be:	d047      	beq.n	c450 <divu64_10+0x94>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c3c0:	0843      	lsrs	r3, r0, #1
    c3c2:	0882      	lsrs	r2, r0, #2
    c3c4:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
    c3c8:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
    c3cc:	189b      	adds	r3, r3, r2
    c3ce:	ea4f 0291 	mov.w	r2, r1, lsr #2
    c3d2:	eb42 0251 	adc.w	r2, r2, r1, lsr #1
        q64 += (q64 >> 4);
    c3d6:	ea4f 1c13 	mov.w	ip, r3, lsr #4
    c3da:	ea4c 7c02 	orr.w	ip, ip, r2, lsl #28
    c3de:	eb13 030c 	adds.w	r3, r3, ip
    c3e2:	eb42 1212 	adc.w	r2, r2, r2, lsr #4
        q64 += (q64 >> 8);
    c3e6:	ea4f 2c13 	mov.w	ip, r3, lsr #8
    c3ea:	ea4c 6c02 	orr.w	ip, ip, r2, lsl #24
    c3ee:	eb13 030c 	adds.w	r3, r3, ip
    c3f2:	eb42 2212 	adc.w	r2, r2, r2, lsr #8
        q64 += (q64 >> 16);
    c3f6:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    c3fa:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
    c3fe:	eb13 030c 	adds.w	r3, r3, ip
    c402:	eb42 4212 	adc.w	r2, r2, r2, lsr #16
        q64 += (q64 >> 32);
    c406:	189b      	adds	r3, r3, r2
    c408:	f142 0200 	adc.w	r2, r2, #0
        q64 >>= 3;
    c40c:	08db      	lsrs	r3, r3, #3
    c40e:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    c412:	08d2      	lsrs	r2, r2, #3
        r64 = ui64Val - q64*10;
        return q64 + ((r64 + 6) >> 4);
    c414:	3006      	adds	r0, #6
{
    c416:	b500      	push	{lr}
        r64 = ui64Val - q64*10;
    c418:	ea4f 0c83 	mov.w	ip, r3, lsl #2
    c41c:	ea4f 0e82 	mov.w	lr, r2, lsl #2
        return q64 + ((r64 + 6) >> 4);
    c420:	f141 0100 	adc.w	r1, r1, #0
        r64 = ui64Val - q64*10;
    c424:	ea4e 7e93 	orr.w	lr, lr, r3, lsr #30
    c428:	eb1c 0c03 	adds.w	ip, ip, r3
    c42c:	eb42 0e0e 	adc.w	lr, r2, lr
    c430:	eb1c 0c0c 	adds.w	ip, ip, ip
    c434:	eb4e 0e0e 	adc.w	lr, lr, lr
        return q64 + ((r64 + 6) >> 4);
    c438:	ebb0 000c 	subs.w	r0, r0, ip
    c43c:	eb61 010e 	sbc.w	r1, r1, lr
    c440:	0900      	lsrs	r0, r0, #4
    c442:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
    c446:	18c0      	adds	r0, r0, r3
    c448:	eb42 1111 	adc.w	r1, r2, r1, lsr #4
        q32 += (q32 >> 16);
        q32 >>= 3;
        r32 = ui32Val - q32*10;
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    }
}
    c44c:	f85d fb04 	ldr.w	pc, [sp], #4
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c450:	0883      	lsrs	r3, r0, #2
    c452:	eb03 0350 	add.w	r3, r3, r0, lsr #1
        q32 += (q32 >> 4);
    c456:	eb03 1313 	add.w	r3, r3, r3, lsr #4
        q32 += (q32 >> 8);
    c45a:	eb03 2313 	add.w	r3, r3, r3, lsr #8
        q32 += (q32 >> 16);
    c45e:	eb03 4313 	add.w	r3, r3, r3, lsr #16
        q32 >>= 3;
    c462:	08db      	lsrs	r3, r3, #3
        r32 = ui32Val - q32*10;
    c464:	eb03 0283 	add.w	r2, r3, r3, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c468:	3006      	adds	r0, #6
    c46a:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
    c46e:	eb03 1010 	add.w	r0, r3, r0, lsr #4
}
    c472:	4770      	bx	lr

0000c474 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c474:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c478:	b089      	sub	sp, #36	; 0x24
    c47a:	ad01      	add	r5, sp, #4
        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);

        tbuf[ix++] = uMod + '0';
    c47c:	46ae      	mov	lr, r5
    c47e:	2401      	movs	r4, #1
    c480:	e042      	b.n	c508 <uint64_to_str+0x94>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c482:	19db      	adds	r3, r3, r7
    c484:	eb46 0651 	adc.w	r6, r6, r1, lsr #1
        q64 += (q64 >> 4);
    c488:	091f      	lsrs	r7, r3, #4
    c48a:	ea47 7706 	orr.w	r7, r7, r6, lsl #28
    c48e:	19db      	adds	r3, r3, r7
    c490:	eb46 1616 	adc.w	r6, r6, r6, lsr #4
        q64 += (q64 >> 8);
    c494:	0a1f      	lsrs	r7, r3, #8
    c496:	ea47 6706 	orr.w	r7, r7, r6, lsl #24
    c49a:	19db      	adds	r3, r3, r7
    c49c:	eb46 2616 	adc.w	r6, r6, r6, lsr #8
        q64 += (q64 >> 16);
    c4a0:	0c1f      	lsrs	r7, r3, #16
    c4a2:	ea47 4706 	orr.w	r7, r7, r6, lsl #16
    c4a6:	19db      	adds	r3, r3, r7
    c4a8:	eb46 4616 	adc.w	r6, r6, r6, lsr #16
        q64 += (q64 >> 32);
    c4ac:	199b      	adds	r3, r3, r6
    c4ae:	f146 0600 	adc.w	r6, r6, #0
        q64 >>= 3;
    c4b2:	08db      	lsrs	r3, r3, #3
    c4b4:	ea43 7346 	orr.w	r3, r3, r6, lsl #29
    c4b8:	08f6      	lsrs	r6, r6, #3
        return q64 + ((r64 + 6) >> 4);
    c4ba:	1d87      	adds	r7, r0, #6
        r64 = ui64Val - q64*10;
    c4bc:	ea4f 0c83 	mov.w	ip, r3, lsl #2
    c4c0:	ea4f 0886 	mov.w	r8, r6, lsl #2
        return q64 + ((r64 + 6) >> 4);
    c4c4:	f141 0100 	adc.w	r1, r1, #0
        r64 = ui64Val - q64*10;
    c4c8:	ea48 7893 	orr.w	r8, r8, r3, lsr #30
    c4cc:	eb1c 0c03 	adds.w	ip, ip, r3
    c4d0:	eb46 0808 	adc.w	r8, r6, r8
    c4d4:	eb1c 0c0c 	adds.w	ip, ip, ip
    c4d8:	eb48 0808 	adc.w	r8, r8, r8
        return q64 + ((r64 + 6) >> 4);
    c4dc:	ebb7 070c 	subs.w	r7, r7, ip
    c4e0:	eb61 0108 	sbc.w	r1, r1, r8
    c4e4:	093f      	lsrs	r7, r7, #4
    c4e6:	ea47 7701 	orr.w	r7, r7, r1, lsl #28
    c4ea:	18fb      	adds	r3, r7, r3
        uMod = ui64Val - (u64Tmp * 10);
    c4ec:	eb03 0783 	add.w	r7, r3, r3, lsl #2
    c4f0:	eba0 0047 	sub.w	r0, r0, r7, lsl #1
        tbuf[ix++] = uMod + '0';
    c4f4:	f100 0030 	add.w	r0, r0, #48	; 0x30
    c4f8:	f88e 0000 	strb.w	r0, [lr]
    c4fc:	eb46 1111 	adc.w	r1, r6, r1, lsr #4
    c500:	4618      	mov	r0, r3
    c502:	3401      	adds	r4, #1
    c504:	f10e 0e01 	add.w	lr, lr, #1
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c508:	ea4f 0c90 	mov.w	ip, r0, lsr #2
    c50c:	eb0c 0c50 	add.w	ip, ip, r0, lsr #1
        q32 += (q32 >> 4);
    c510:	eb0c 1c1c 	add.w	ip, ip, ip, lsr #4
        q32 += (q32 >> 8);
    c514:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
        q32 += (q32 >> 16);
    c518:	eb0c 4c1c 	add.w	ip, ip, ip, lsr #16
        q32 >>= 3;
    c51c:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
        r32 = ui32Val - q32*10;
    c520:	eb0c 098c 	add.w	r9, ip, ip, lsl #2
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c524:	0843      	lsrs	r3, r0, #1
    c526:	0887      	lsrs	r7, r0, #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c528:	f100 0806 	add.w	r8, r0, #6
    c52c:	eba8 0849 	sub.w	r8, r8, r9, lsl #1
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c530:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
    c534:	ea47 7781 	orr.w	r7, r7, r1, lsl #30
    c538:	088e      	lsrs	r6, r1, #2
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    c53a:	4681      	mov	r9, r0
    if ( ui64Val >> 32 )
    c53c:	2900      	cmp	r1, #0
    c53e:	d1a0      	bne.n	c482 <uint64_to_str+0xe>
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c540:	eb0c 1018 	add.w	r0, ip, r8, lsr #4
        uMod = ui64Val - (u64Tmp * 10);
    c544:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    c548:	eba9 0943 	sub.w	r9, r9, r3, lsl #1
        tbuf[ix++] = uMod + '0';
    c54c:	f109 0930 	add.w	r9, r9, #48	; 0x30
    c550:	f88e 9000 	strb.w	r9, [lr]
        ui64Val = u64Tmp;
    } while ( ui64Val );
    c554:	2800      	cmp	r0, #0
    c556:	d1d4      	bne.n	c502 <uint64_to_str+0x8e>
    iNumDig = ix;

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c558:	b14a      	cbz	r2, c56e <uint64_to_str+0xfa>
    {
        while ( ix-- )
    c55a:	192b      	adds	r3, r5, r4
    c55c:	1e51      	subs	r1, r2, #1
        {
            *pcBuf++ = tbuf[ix];
    c55e:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
    c562:	f801 0f01 	strb.w	r0, [r1, #1]!
        while ( ix-- )
    c566:	429d      	cmp	r5, r3
    c568:	d1f9      	bne.n	c55e <uint64_to_str+0xea>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    c56a:	2300      	movs	r3, #0
    c56c:	5513      	strb	r3, [r2, r4]
    }

    return iNumDig;
}
    c56e:	4620      	mov	r0, r4
    c570:	b009      	add	sp, #36	; 0x24
    c572:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c576:	bf00      	nop

0000c578 <am_util_stdio_printf_init>:
    g_pfnCharPrint = pfnCharPrint;
    c578:	4b01      	ldr	r3, [pc, #4]	; (c580 <am_util_stdio_printf_init+0x8>)
    c57a:	6018      	str	r0, [r3, #0]
}
    c57c:	4770      	bx	lr
    c57e:	bf00      	nop
    c580:	10001038 	.word	0x10001038

0000c584 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    c584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    c588:	780b      	ldrb	r3, [r1, #0]
{
    c58a:	b089      	sub	sp, #36	; 0x24
    c58c:	4605      	mov	r5, r0
    while ( *pcFmt != 0x0 )
    c58e:	2b00      	cmp	r3, #0
    c590:	f000 8097 	beq.w	c6c2 <am_util_stdio_vsprintf+0x13e>
    c594:	4617      	mov	r7, r2
    uint32_t ui32NumChars, ui32CharCnt = 0;
    c596:	2600      	movs	r6, #0
    c598:	e00b      	b.n	c5b2 <am_util_stdio_vsprintf+0x2e>
        if ( *pcFmt != '%' )
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    c59a:	b125      	cbz	r5, c5a6 <am_util_stdio_vsprintf+0x22>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    c59c:	2b0a      	cmp	r3, #10
    c59e:	f000 8085 	beq.w	c6ac <am_util_stdio_vsprintf+0x128>
                {
                    *pcBuf++ = '\r';
                    ++ui32CharCnt;
                }
                *pcBuf++ = *pcFmt;
    c5a2:	f805 3b01 	strb.w	r3, [r5], #1
            }

            ++pcFmt;
    c5a6:	3101      	adds	r1, #1
            ++ui32CharCnt;
    c5a8:	3601      	adds	r6, #1
    while ( *pcFmt != 0x0 )
    c5aa:	780b      	ldrb	r3, [r1, #0]
    c5ac:	2b00      	cmp	r3, #0
    c5ae:	f000 8089 	beq.w	c6c4 <am_util_stdio_vsprintf+0x140>
        if ( *pcFmt != '%' )
    c5b2:	2b25      	cmp	r3, #37	; 0x25
    c5b4:	d1f1      	bne.n	c59a <am_util_stdio_vsprintf+0x16>
        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';

        if ( *pcFmt == '0' )
    c5b6:	784b      	ldrb	r3, [r1, #1]
    c5b8:	2b30      	cmp	r3, #48	; 0x30
    c5ba:	f000 8098 	beq.w	c6ee <am_util_stdio_vsprintf+0x16a>
        ++pcFmt;
    c5be:	f101 0e01 	add.w	lr, r1, #1
        ui8PadChar = ' ';
    c5c2:	2220      	movs	r2, #32
    if ( *pcStr == '-')
    c5c4:	2b2d      	cmp	r3, #45	; 0x2d
    c5c6:	f000 8084 	beq.w	c6d2 <am_util_stdio_vsprintf+0x14e>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c5ca:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    uint32_t ui32Val = 0, uCnt = 0;
    c5ce:	f04f 0c00 	mov.w	ip, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c5d2:	2909      	cmp	r1, #9
    c5d4:	4674      	mov	r4, lr
    bool bNeg = false;
    c5d6:	46e0      	mov	r8, ip
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c5d8:	f200 8087 	bhi.w	c6ea <am_util_stdio_vsprintf+0x166>
    c5dc:	f10c 0c01 	add.w	ip, ip, #1
    c5e0:	ebac 0c04 	sub.w	ip, ip, r4
    c5e4:	2100      	movs	r1, #0
        ui32Val *= 10;
    c5e6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
        ui32Val += (*pcStr - '0');
    c5ea:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    c5ee:	eb04 090c 	add.w	r9, r4, ip
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c5f2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    c5f6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    c5fa:	2809      	cmp	r0, #9
        ui32Val += (*pcStr - '0');
    c5fc:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c600:	d9f1      	bls.n	c5e6 <am_util_stdio_vsprintf+0x62>
        pcFmt += ui32NumChars;

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    c602:	f81e 3009 	ldrb.w	r3, [lr, r9]
        pcFmt += ui32NumChars;
    c606:	eb0e 0409 	add.w	r4, lr, r9
    return bNeg ? -ui32Val : ui32Val;
    c60a:	f1b8 0f00 	cmp.w	r8, #0
    c60e:	d000      	beq.n	c612 <am_util_stdio_vsprintf+0x8e>
    c610:	4249      	negs	r1, r1
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    c612:	2b73      	cmp	r3, #115	; 0x73
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    c614:	4608      	mov	r0, r1
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    c616:	f000 8125 	beq.w	c864 <am_util_stdio_vsprintf+0x2e0>
    c61a:	ea81 78e1 	eor.w	r8, r1, r1, asr #31
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    c61e:	2b2e      	cmp	r3, #46	; 0x2e
    c620:	eba8 78e1 	sub.w	r8, r8, r1, asr #31
    c624:	f000 80f2 	beq.w	c80c <am_util_stdio_vsprintf+0x288>
        iPrecision = 6;             // printf() default precision for %f is 6
    c628:	f04f 0906 	mov.w	r9, #6
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    c62c:	2b6c      	cmp	r3, #108	; 0x6c
    c62e:	d104      	bne.n	c63a <am_util_stdio_vsprintf+0xb6>
        {
            pcFmt++;
            if ( *pcFmt == 'l' )    // "ll" (long long)
    c630:	7863      	ldrb	r3, [r4, #1]
    c632:	2b6c      	cmp	r3, #108	; 0x6c
    c634:	f000 8163 	beq.w	c8fe <am_util_stdio_vsprintf+0x37a>
            pcFmt++;
    c638:	3401      	adds	r4, #1
                pcFmt++;
                bLongLong = true;
            }
        }

        switch ( *pcFmt )
    c63a:	f1a3 0046 	sub.w	r0, r3, #70	; 0x46
    c63e:	2832      	cmp	r0, #50	; 0x32
    c640:	d85a      	bhi.n	c6f8 <am_util_stdio_vsprintf+0x174>
    c642:	e8df f010 	tbh	[pc, r0, lsl #1]
    c646:	005f      	.short	0x005f
    c648:	00590059 	.word	0x00590059
    c64c:	00590059 	.word	0x00590059
    c650:	00590059 	.word	0x00590059
    c654:	00590059 	.word	0x00590059
    c658:	00590059 	.word	0x00590059
    c65c:	00590059 	.word	0x00590059
    c660:	00590059 	.word	0x00590059
    c664:	00590059 	.word	0x00590059
    c668:	01dc0059 	.word	0x01dc0059
    c66c:	00590059 	.word	0x00590059
    c670:	00590059 	.word	0x00590059
    c674:	00590059 	.word	0x00590059
    c678:	00590059 	.word	0x00590059
    c67c:	00590059 	.word	0x00590059
    c680:	00b400c9 	.word	0x00b400c9
    c684:	005f0059 	.word	0x005f0059
    c688:	00590059 	.word	0x00590059
    c68c:	005900b4 	.word	0x005900b4
    c690:	00590059 	.word	0x00590059
    c694:	00590059 	.word	0x00590059
    c698:	00590059 	.word	0x00590059
    c69c:	00590059 	.word	0x00590059
    c6a0:	0059010e 	.word	0x0059010e
    c6a4:	005900d2 	.word	0x005900d2
    c6a8:	02fb0059 	.word	0x02fb0059
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    c6ac:	4acc      	ldr	r2, [pc, #816]	; (c9e0 <am_util_stdio_vsprintf+0x45c>)
    c6ae:	7812      	ldrb	r2, [r2, #0]
    c6b0:	2a00      	cmp	r2, #0
    c6b2:	f43f af76 	beq.w	c5a2 <am_util_stdio_vsprintf+0x1e>
                    *pcBuf++ = '\r';
    c6b6:	230d      	movs	r3, #13
    c6b8:	f805 3b01 	strb.w	r3, [r5], #1
                    ++ui32CharCnt;
    c6bc:	3601      	adds	r6, #1
                *pcBuf++ = *pcFmt;
    c6be:	780b      	ldrb	r3, [r1, #0]
    c6c0:	e76f      	b.n	c5a2 <am_util_stdio_vsprintf+0x1e>
    uint32_t ui32NumChars, ui32CharCnt = 0;
    c6c2:	461e      	mov	r6, r3
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    c6c4:	b10d      	cbz	r5, c6ca <am_util_stdio_vsprintf+0x146>
    {
        *pcBuf = 0x0;
    c6c6:	2300      	movs	r3, #0
    c6c8:	702b      	strb	r3, [r5, #0]
    }

    return (ui32CharCnt);
}
    c6ca:	4630      	mov	r0, r6
    c6cc:	b009      	add	sp, #36	; 0x24
    c6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c6d2:	f89e 3001 	ldrb.w	r3, [lr, #1]
    c6d6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
        uCnt++;
    c6da:	f04f 0c01 	mov.w	ip, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c6de:	2909      	cmp	r1, #9
        pcStr++;
    c6e0:	eb0e 040c 	add.w	r4, lr, ip
        bNeg = true;
    c6e4:	46e0      	mov	r8, ip
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c6e6:	f67f af79 	bls.w	c5dc <am_util_stdio_vsprintf+0x58>
    c6ea:	2100      	movs	r1, #0
    c6ec:	e78d      	b.n	c60a <am_util_stdio_vsprintf+0x86>
            ui8PadChar = '0';
    c6ee:	461a      	mov	r2, r3
            ++pcFmt;
    c6f0:	f101 0e02 	add.w	lr, r1, #2
    if ( *pcStr == '-')
    c6f4:	788b      	ldrb	r3, [r1, #2]
    c6f6:	e765      	b.n	c5c4 <am_util_stdio_vsprintf+0x40>
                if ( pcBuf )
    c6f8:	b10d      	cbz	r5, c6fe <am_util_stdio_vsprintf+0x17a>
                    *pcBuf++ = *pcFmt;
    c6fa:	f805 3b01 	strb.w	r3, [r5], #1
                ++ui32CharCnt;
    c6fe:	3601      	adds	r6, #1
        ++pcFmt;
    c700:	1c61      	adds	r1, r4, #1
    c702:	e752      	b.n	c5aa <am_util_stdio_vsprintf+0x26>
                if ( pcBuf )
    c704:	2d00      	cmp	r5, #0
    c706:	d0fb      	beq.n	c700 <am_util_stdio_vsprintf+0x17c>
                    float fValue = va_arg(pArgs, double);
    c708:	3707      	adds	r7, #7
    c70a:	f027 0707 	bic.w	r7, r7, #7
    c70e:	e8f7 0102 	ldrd	r0, r1, [r7], #8
    c712:	f7ff fcf5 	bl	c100 <__aeabi_d2f>
    c716:	ee07 0a90 	vmov	s15, r0
    if (fValue == 0.0f)
    c71a:	eef5 7a40 	vcmp.f32	s15, #0.0
                    *(uint32_t*)pcBuf = 20;
    c71e:	2314      	movs	r3, #20
    if (fValue == 0.0f)
    c720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    *(uint32_t*)pcBuf = 20;
    c724:	602b      	str	r3, [r5, #0]
    if (fValue == 0.0f)
    c726:	f000 835d 	beq.w	cde4 <am_util_stdio_vsprintf+0x860>
    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    c72a:	f3c0 51c7 	ubfx	r1, r0, #23, #8
    c72e:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
    unFloatValue.F = fValue;
    c732:	4603      	mov	r3, r0
    if (iExp2 >= 31)
    c734:	2a1e      	cmp	r2, #30
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    c736:	f3c0 0016 	ubfx	r0, r0, #0, #23
    c73a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    if (iExp2 >= 31)
    c73e:	f300 837c 	bgt.w	ce3a <am_util_stdio_vsprintf+0x8b6>
    else if (iExp2 < -23)
    c742:	f112 0f17 	cmn.w	r2, #23
    c746:	f2c0 8374 	blt.w	ce32 <am_util_stdio_vsprintf+0x8ae>
    else if (iExp2 >= 23)
    c74a:	2a16      	cmp	r2, #22
    c74c:	f340 8246 	ble.w	cbdc <am_util_stdio_vsprintf+0x658>
        i32IntPart = i32Significand << (iExp2 - 23);
    c750:	3996      	subs	r1, #150	; 0x96
    if (unFloatValue.I32 < 0)
    c752:	2b00      	cmp	r3, #0
        i32IntPart = i32Significand << (iExp2 - 23);
    c754:	fa00 f001 	lsl.w	r0, r0, r1
    if (unFloatValue.I32 < 0)
    c758:	f2c0 8287 	blt.w	cc6a <am_util_stdio_vsprintf+0x6e6>
    c75c:	462b      	mov	r3, r5
    i32FracPart = 0;
    c75e:	f04f 0800 	mov.w	r8, #0
    if (i32IntPart == 0)
    c762:	2800      	cmp	r0, #0
    c764:	f000 827c 	beq.w	cc60 <am_util_stdio_vsprintf+0x6dc>
            *pcBuf++ = '-';
    c768:	461a      	mov	r2, r3
    c76a:	bfde      	ittt	le
    c76c:	232d      	movle	r3, #45	; 0x2d
    c76e:	f802 3b01 	strble.w	r3, [r2], #1
            uint64_to_str(-i32IntPart, pcBuf);
    c772:	4240      	negle	r0, r0
    c774:	17c1      	asrs	r1, r0, #31
    c776:	f7ff fe7d 	bl	c474 <uint64_to_str>
        while (*pcBuf)    // Get to end of new string
    c77a:	7813      	ldrb	r3, [r2, #0]
    c77c:	b11b      	cbz	r3, c786 <am_util_stdio_vsprintf+0x202>
    c77e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    c782:	2b00      	cmp	r3, #0
    c784:	d1fb      	bne.n	c77e <am_util_stdio_vsprintf+0x1fa>
    *pcBuf++ = '.';
    c786:	232e      	movs	r3, #46	; 0x2e
    c788:	7013      	strb	r3, [r2, #0]
    if (i32FracPart == 0)
    c78a:	f1b8 0f00 	cmp.w	r8, #0
    c78e:	f040 8291 	bne.w	ccb4 <am_util_stdio_vsprintf+0x730>
        *pcBuf++ = '0';
    c792:	1c90      	adds	r0, r2, #2
    c794:	2330      	movs	r3, #48	; 0x30
    c796:	7053      	strb	r3, [r2, #1]
    return (pcBuf - pcBufInitial);
    c798:	1b41      	subs	r1, r0, r5
    *pcBuf = 0x00;
    c79a:	2300      	movs	r3, #0
                    if ( iVal < 0 )
    c79c:	4299      	cmp	r1, r3
    *pcBuf = 0x00;
    c79e:	7003      	strb	r3, [r0, #0]
                    if ( iVal < 0 )
    c7a0:	f2c0 82c3 	blt.w	cd2a <am_util_stdio_vsprintf+0x7a6>
                    ui32CharCnt += iVal;
    c7a4:	460b      	mov	r3, r1
    c7a6:	441e      	add	r6, r3
                    pcBuf += iVal;
    c7a8:	441d      	add	r5, r3
        ++pcFmt;
    c7aa:	1c61      	adds	r1, r4, #1
    c7ac:	e6fd      	b.n	c5aa <am_util_stdio_vsprintf+0x26>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    c7ae:	f857 9b04 	ldr.w	r9, [r7], #4
    c7b2:	ea4f 7ae9 	mov.w	sl, r9, asr #31
                if ( i64Val < 0 )
    c7b6:	f1ba 0f00 	cmp.w	sl, #0
    c7ba:	f2c0 8113 	blt.w	c9e4 <am_util_stdio_vsprintf+0x460>
                if ( iWidth )
    c7be:	2900      	cmp	r1, #0
    c7c0:	f040 82bd 	bne.w	cd3e <am_util_stdio_vsprintf+0x7ba>
                iVal = uint64_to_str(ui64Val, pcBuf);
    c7c4:	4648      	mov	r0, r9
    c7c6:	4651      	mov	r1, sl
    c7c8:	462a      	mov	r2, r5
    c7ca:	f7ff fe53 	bl	c474 <uint64_to_str>
                if ( pcBuf )
    c7ce:	b9d5      	cbnz	r5, c806 <am_util_stdio_vsprintf+0x282>
                ui32CharCnt += iVal;
    c7d0:	2500      	movs	r5, #0
    c7d2:	4406      	add	r6, r0
        ++pcFmt;
    c7d4:	1c61      	adds	r1, r4, #1
    c7d6:	e6e8      	b.n	c5aa <am_util_stdio_vsprintf+0x26>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    c7d8:	1d3b      	adds	r3, r7, #4
                if ( pcBuf )
    c7da:	b115      	cbz	r5, c7e2 <am_util_stdio_vsprintf+0x25e>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    c7dc:	683a      	ldr	r2, [r7, #0]
    c7de:	f805 2b01 	strb.w	r2, [r5], #1
                ++ui32CharCnt;
    c7e2:	3601      	adds	r6, #1
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    c7e4:	461f      	mov	r7, r3
        ++pcFmt;
    c7e6:	1c61      	adds	r1, r4, #1
    c7e8:	e6df      	b.n	c5aa <am_util_stdio_vsprintf+0x26>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    c7ea:	f857 ab04 	ldr.w	sl, [r7], #4
    c7ee:	f04f 0900 	mov.w	r9, #0
                if ( iWidth )
    c7f2:	2900      	cmp	r1, #0
    c7f4:	f040 81b0 	bne.w	cb58 <am_util_stdio_vsprintf+0x5d4>
                iVal = uint64_to_str(ui64Val, pcBuf);
    c7f8:	4650      	mov	r0, sl
    c7fa:	4649      	mov	r1, r9
    c7fc:	462a      	mov	r2, r5
    c7fe:	f7ff fe39 	bl	c474 <uint64_to_str>
                if ( pcBuf )
    c802:	2d00      	cmp	r5, #0
    c804:	d0e4      	beq.n	c7d0 <am_util_stdio_vsprintf+0x24c>
                    pcBuf += iVal;
    c806:	4405      	add	r5, r0
                ui32CharCnt += iVal;
    c808:	4406      	add	r6, r0
                break;
    c80a:	e7e3      	b.n	c7d4 <am_util_stdio_vsprintf+0x250>
    if ( *pcStr == '-')
    c80c:	7860      	ldrb	r0, [r4, #1]
    c80e:	282d      	cmp	r0, #45	; 0x2d
            ++pcFmt;
    c810:	f104 0c01 	add.w	ip, r4, #1
    if ( *pcStr == '-')
    c814:	f000 8195 	beq.w	cb42 <am_util_stdio_vsprintf+0x5be>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c818:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    c81c:	2b09      	cmp	r3, #9
    c81e:	f200 82ea 	bhi.w	cdf6 <am_util_stdio_vsprintf+0x872>
    uint32_t ui32Val = 0, uCnt = 0;
    c822:	2300      	movs	r3, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c824:	4664      	mov	r4, ip
    bool bNeg = false;
    c826:	4699      	mov	r9, r3
    c828:	3301      	adds	r3, #1
    c82a:	eba3 0e04 	sub.w	lr, r3, r4
    c82e:	2300      	movs	r3, #0
        ui32Val *= 10;
    c830:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        ui32Val += (*pcStr - '0');
    c834:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    c838:	eb04 0a0e 	add.w	sl, r4, lr
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c83c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    c840:	f1a0 0b30 	sub.w	fp, r0, #48	; 0x30
    c844:	f1bb 0f09 	cmp.w	fp, #9
        ui32Val += (*pcStr - '0');
    c848:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c84c:	d9f0      	bls.n	c830 <am_util_stdio_vsprintf+0x2ac>
    return bNeg ? -ui32Val : ui32Val;
    c84e:	f1b9 0f00 	cmp.w	r9, #0
    c852:	d000      	beq.n	c856 <am_util_stdio_vsprintf+0x2d2>
    c854:	425b      	negs	r3, r3
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    c856:	4699      	mov	r9, r3
            pcFmt += ui32NumChars;
    c858:	eb0c 040a 	add.w	r4, ip, sl
        if ( *pcFmt == 'l' )
    c85c:	f81c 300a 	ldrb.w	r3, [ip, sl]
    c860:	e6e4      	b.n	c62c <am_util_stdio_vsprintf+0xa8>
        switch ( *pcFmt )
    c862:	4640      	mov	r0, r8
                pcStr = va_arg(pArgs, char *);
    c864:	46b9      	mov	r9, r7
    c866:	f859 3b04 	ldr.w	r3, [r9], #4
    if ( !pcBuf )
    c86a:	2b00      	cmp	r3, #0
    c86c:	f000 81c6 	beq.w	cbfc <am_util_stdio_vsprintf+0x678>
    while ( *pcBuf++ )
    c870:	469c      	mov	ip, r3
    c872:	f81c 1b01 	ldrb.w	r1, [ip], #1
    c876:	2900      	cmp	r1, #0
    c878:	f000 82c1 	beq.w	cdfe <am_util_stdio_vsprintf+0x87a>
    uint32_t ui32RetVal = 0;
    c87c:	f04f 0e00 	mov.w	lr, #0
    while ( *pcBuf++ )
    c880:	f81c 7b01 	ldrb.w	r7, [ip], #1
        ui32RetVal++;
    c884:	f10e 0e01 	add.w	lr, lr, #1
    while ( *pcBuf++ )
    c888:	2f00      	cmp	r7, #0
    c88a:	d1f9      	bne.n	c880 <am_util_stdio_vsprintf+0x2fc>
                if ( iWidth > 0 )
    c88c:	2800      	cmp	r0, #0
    c88e:	dd02      	ble.n	c896 <am_util_stdio_vsprintf+0x312>
                    if ( ui32strlen < iWidth )
    c890:	4570      	cmp	r0, lr
    c892:	f200 81d6 	bhi.w	cc42 <am_util_stdio_vsprintf+0x6be>
    c896:	f1c3 0801 	rsb	r8, r3, #1
                while (*pcStr != 0x0)
    c89a:	46b2      	mov	sl, r6
    c89c:	462f      	mov	r7, r5
    c89e:	eb08 0c06 	add.w	ip, r8, r6
    c8a2:	e000      	b.n	c8a6 <am_util_stdio_vsprintf+0x322>
                        *pcBuf++ = *pcStr;
    c8a4:	462f      	mov	r7, r5
    c8a6:	eb0c 0603 	add.w	r6, ip, r3
                    if ( pcBuf )
    c8aa:	2d00      	cmp	r5, #0
    c8ac:	f000 8131 	beq.w	cb12 <am_util_stdio_vsprintf+0x58e>
                        *pcBuf++ = *pcStr;
    c8b0:	7039      	strb	r1, [r7, #0]
                while (*pcStr != 0x0)
    c8b2:	f813 1f01 	ldrb.w	r1, [r3, #1]!
                        *pcBuf++ = *pcStr;
    c8b6:	3501      	adds	r5, #1
                while (*pcStr != 0x0)
    c8b8:	2900      	cmp	r1, #0
    c8ba:	d1f3      	bne.n	c8a4 <am_util_stdio_vsprintf+0x320>
                if ( iWidth )
    c8bc:	b1e0      	cbz	r0, c8f8 <am_util_stdio_vsprintf+0x374>
                    iWidth = -iWidth;
    c8be:	f1c0 0800 	rsb	r8, r0, #0
                    if ( ui32strlen < iWidth )
    c8c2:	45f0      	cmp	r8, lr
    c8c4:	d918      	bls.n	c8f8 <am_util_stdio_vsprintf+0x374>
                        iWidth -= ui32strlen;
    c8c6:	eba8 030e 	sub.w	r3, r8, lr
    if ( i32NumChars <= 0 )
    c8ca:	2b00      	cmp	r3, #0
    c8cc:	f340 82b3 	ble.w	ce36 <am_util_stdio_vsprintf+0x8b2>
    while ( i32NumChars-- )
    c8d0:	3b01      	subs	r3, #1
    int32_t i32Cnt = 0;
    c8d2:	4694      	mov	ip, r2
    c8d4:	2000      	movs	r0, #0
    c8d6:	461a      	mov	r2, r3
    c8d8:	462b      	mov	r3, r5
            *pcBuf++ = cPadChar;
    c8da:	4619      	mov	r1, r3
        if ( pcBuf )
    c8dc:	2b00      	cmp	r3, #0
    c8de:	f000 8129 	beq.w	cb34 <am_util_stdio_vsprintf+0x5b0>
            *pcBuf++ = cPadChar;
    c8e2:	f801 cb01 	strb.w	ip, [r1], #1
    c8e6:	4617      	mov	r7, r2
    c8e8:	460b      	mov	r3, r1
        i32Cnt++;
    c8ea:	3001      	adds	r0, #1
    while ( i32NumChars-- )
    c8ec:	1e7a      	subs	r2, r7, #1
    c8ee:	2f00      	cmp	r7, #0
    c8f0:	d1f3      	bne.n	c8da <am_util_stdio_vsprintf+0x356>
                        ui32CharCnt += iWidth;
    c8f2:	4406      	add	r6, r0
                        pcBuf += pcBuf ? iWidth : 0;
    c8f4:	b105      	cbz	r5, c8f8 <am_util_stdio_vsprintf+0x374>
    c8f6:	4405      	add	r5, r0
                pcStr = va_arg(pArgs, char *);
    c8f8:	464f      	mov	r7, r9
        ++pcFmt;
    c8fa:	1c61      	adds	r1, r4, #1
    c8fc:	e655      	b.n	c5aa <am_util_stdio_vsprintf+0x26>
        switch ( *pcFmt )
    c8fe:	78a3      	ldrb	r3, [r4, #2]
    c900:	f1a3 0046 	sub.w	r0, r3, #70	; 0x46
                pcFmt++;
    c904:	3402      	adds	r4, #2
        switch ( *pcFmt )
    c906:	2832      	cmp	r0, #50	; 0x32
    c908:	f63f aef6 	bhi.w	c6f8 <am_util_stdio_vsprintf+0x174>
    c90c:	f20f 0c04 	addw	ip, pc, #4
    c910:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
    c914:	0000c705 	.word	0x0000c705
    c918:	0000c6f9 	.word	0x0000c6f9
    c91c:	0000c6f9 	.word	0x0000c6f9
    c920:	0000c6f9 	.word	0x0000c6f9
    c924:	0000c6f9 	.word	0x0000c6f9
    c928:	0000c6f9 	.word	0x0000c6f9
    c92c:	0000c6f9 	.word	0x0000c6f9
    c930:	0000c6f9 	.word	0x0000c6f9
    c934:	0000c6f9 	.word	0x0000c6f9
    c938:	0000c6f9 	.word	0x0000c6f9
    c93c:	0000c6f9 	.word	0x0000c6f9
    c940:	0000c6f9 	.word	0x0000c6f9
    c944:	0000c6f9 	.word	0x0000c6f9
    c948:	0000c6f9 	.word	0x0000c6f9
    c94c:	0000c6f9 	.word	0x0000c6f9
    c950:	0000c6f9 	.word	0x0000c6f9
    c954:	0000c6f9 	.word	0x0000c6f9
    c958:	0000c6f9 	.word	0x0000c6f9
    c95c:	0000cc8d 	.word	0x0000cc8d
    c960:	0000c6f9 	.word	0x0000c6f9
    c964:	0000c6f9 	.word	0x0000c6f9
    c968:	0000c6f9 	.word	0x0000c6f9
    c96c:	0000c6f9 	.word	0x0000c6f9
    c970:	0000c6f9 	.word	0x0000c6f9
    c974:	0000c6f9 	.word	0x0000c6f9
    c978:	0000c6f9 	.word	0x0000c6f9
    c97c:	0000c6f9 	.word	0x0000c6f9
    c980:	0000c6f9 	.word	0x0000c6f9
    c984:	0000c6f9 	.word	0x0000c6f9
    c988:	0000c7d9 	.word	0x0000c7d9
    c98c:	0000ca2d 	.word	0x0000ca2d
    c990:	0000c6f9 	.word	0x0000c6f9
    c994:	0000c705 	.word	0x0000c705
    c998:	0000c6f9 	.word	0x0000c6f9
    c99c:	0000c6f9 	.word	0x0000c6f9
    c9a0:	0000ca2d 	.word	0x0000ca2d
    c9a4:	0000c6f9 	.word	0x0000c6f9
    c9a8:	0000c6f9 	.word	0x0000c6f9
    c9ac:	0000c6f9 	.word	0x0000c6f9
    c9b0:	0000c6f9 	.word	0x0000c6f9
    c9b4:	0000c6f9 	.word	0x0000c6f9
    c9b8:	0000c6f9 	.word	0x0000c6f9
    c9bc:	0000c6f9 	.word	0x0000c6f9
    c9c0:	0000c6f9 	.word	0x0000c6f9
    c9c4:	0000c6f9 	.word	0x0000c6f9
    c9c8:	0000c863 	.word	0x0000c863
    c9cc:	0000c6f9 	.word	0x0000c6f9
    c9d0:	0000ca3d 	.word	0x0000ca3d
    c9d4:	0000c6f9 	.word	0x0000c6f9
    c9d8:	0000c6f9 	.word	0x0000c6f9
    c9dc:	0000cca1 	.word	0x0000cca1
    c9e0:	10001034 	.word	0x10001034
                    ui64Val = -i64Val;          // Get absolute value
    c9e4:	f1d9 0900 	rsbs	r9, r9, #0
    c9e8:	eb6a 0a4a 	sbc.w	sl, sl, sl, lsl #1
                if ( iWidth )
    c9ec:	2900      	cmp	r1, #0
    c9ee:	f040 81fd 	bne.w	cdec <am_util_stdio_vsprintf+0x868>
                        if ( pcBuf )
    c9f2:	b115      	cbz	r5, c9fa <am_util_stdio_vsprintf+0x476>
                            *pcBuf++ = '-';
    c9f4:	232d      	movs	r3, #45	; 0x2d
    c9f6:	f805 3b01 	strb.w	r3, [r5], #1
                        ++ui32CharCnt;
    c9fa:	3601      	adds	r6, #1
    c9fc:	e6e2      	b.n	c7c4 <am_util_stdio_vsprintf+0x240>
        bLower = bLongLong = false;
    c9fe:	f04f 0e00 	mov.w	lr, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    ca02:	f857 0b04 	ldr.w	r0, [r7], #4
    ca06:	f04f 0c00 	mov.w	ip, #0
                if ( iWidth )
    ca0a:	b9f9      	cbnz	r1, ca4c <am_util_stdio_vsprintf+0x4c8>
    if ( ui64Val == 0 )
    ca0c:	ea50 030c 	orrs.w	r3, r0, ip
    ca10:	d14d      	bne.n	caae <am_util_stdio_vsprintf+0x52a>
    if (pcBuf)
    ca12:	2d00      	cmp	r5, #0
    ca14:	d079      	beq.n	cb0a <am_util_stdio_vsprintf+0x586>
            *pcBuf++ = tbuf[ix];
    ca16:	462b      	mov	r3, r5
    ca18:	2230      	movs	r2, #48	; 0x30
    ca1a:	f803 2b01 	strb.w	r2, [r3], #1
    ca1e:	2201      	movs	r2, #1
    ca20:	461d      	mov	r5, r3
        *pcBuf = 0;
    ca22:	2100      	movs	r1, #0
    ca24:	7019      	strb	r1, [r3, #0]
                ui32CharCnt += iVal;
    ca26:	4416      	add	r6, r2
        ++pcFmt;
    ca28:	1c61      	adds	r1, r4, #1
    ca2a:	e5be      	b.n	c5aa <am_util_stdio_vsprintf+0x26>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    ca2c:	3707      	adds	r7, #7
    ca2e:	f027 0707 	bic.w	r7, r7, #7
    ca32:	f8d7 a004 	ldr.w	sl, [r7, #4]
    ca36:	f857 9b08 	ldr.w	r9, [r7], #8
    ca3a:	e6bc      	b.n	c7b6 <am_util_stdio_vsprintf+0x232>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    ca3c:	3707      	adds	r7, #7
    ca3e:	f027 0707 	bic.w	r7, r7, #7
    ca42:	f8d7 9004 	ldr.w	r9, [r7, #4]
    ca46:	f857 ab08 	ldr.w	sl, [r7], #8
    ca4a:	e6d2      	b.n	c7f2 <am_util_stdio_vsprintf+0x26e>
    int iDigits = ui64Val ? 0 : 1;
    ca4c:	ea50 030c 	orrs.w	r3, r0, ip
    ca50:	bf0c      	ite	eq
    ca52:	2101      	moveq	r1, #1
    ca54:	2100      	movne	r1, #0
    while ( ui64Val )
    ca56:	d00b      	beq.n	ca70 <am_util_stdio_vsprintf+0x4ec>
    ca58:	4603      	mov	r3, r0
    ca5a:	46e1      	mov	r9, ip
        ui64Val >>= 4;
    ca5c:	091b      	lsrs	r3, r3, #4
    ca5e:	ea43 7309 	orr.w	r3, r3, r9, lsl #28
    ca62:	ea4f 1919 	mov.w	r9, r9, lsr #4
    while ( ui64Val )
    ca66:	ea53 0a09 	orrs.w	sl, r3, r9
        ++iDigits;
    ca6a:	f101 0101 	add.w	r1, r1, #1
    while ( ui64Val )
    ca6e:	d1f5      	bne.n	ca5c <am_util_stdio_vsprintf+0x4d8>
                    iWidth -= ndigits_in_hex(ui64Val);
    ca70:	eba8 0301 	sub.w	r3, r8, r1
    if ( i32NumChars <= 0 )
    ca74:	2b00      	cmp	r3, #0
    ca76:	f340 81b2 	ble.w	cdde <am_util_stdio_vsprintf+0x85a>
    while ( i32NumChars-- )
    ca7a:	3b01      	subs	r3, #1
    int32_t i32Cnt = 0;
    ca7c:	4691      	mov	r9, r2
    ca7e:	4682      	mov	sl, r0
    ca80:	f04f 0800 	mov.w	r8, #0
    ca84:	462a      	mov	r2, r5
    ca86:	4618      	mov	r0, r3
            *pcBuf++ = cPadChar;
    ca88:	4611      	mov	r1, r2
        if ( pcBuf )
    ca8a:	2a00      	cmp	r2, #0
    ca8c:	d04c      	beq.n	cb28 <am_util_stdio_vsprintf+0x5a4>
            *pcBuf++ = cPadChar;
    ca8e:	f801 9b01 	strb.w	r9, [r1], #1
    ca92:	4603      	mov	r3, r0
    ca94:	460a      	mov	r2, r1
        i32Cnt++;
    ca96:	f108 0801 	add.w	r8, r8, #1
    while ( i32NumChars-- )
    ca9a:	1e58      	subs	r0, r3, #1
    ca9c:	2b00      	cmp	r3, #0
    ca9e:	d1f3      	bne.n	ca88 <am_util_stdio_vsprintf+0x504>
                    ui32CharCnt += iWidth;
    caa0:	4650      	mov	r0, sl
    caa2:	4446      	add	r6, r8
                    pcBuf += pcBuf ? iWidth : 0;
    caa4:	b375      	cbz	r5, cb04 <am_util_stdio_vsprintf+0x580>
    if ( ui64Val == 0 )
    caa6:	ea50 030c 	orrs.w	r3, r0, ip
                    pcBuf += pcBuf ? iWidth : 0;
    caaa:	4445      	add	r5, r8
    if ( ui64Val == 0 )
    caac:	d0b3      	beq.n	ca16 <am_util_stdio_vsprintf+0x492>
    caae:	f1be 0f00 	cmp.w	lr, #0
    cab2:	f10d 080c 	add.w	r8, sp, #12
    cab6:	bf14      	ite	ne
    cab8:	f04f 0927 	movne.w	r9, #39	; 0x27
    cabc:	f04f 0907 	moveq.w	r9, #7
    cac0:	4641      	mov	r1, r8
    int iNumDig, ix = 0;
    cac2:	2200      	movs	r2, #0
        cCh = ui64Val & 0xf;
    cac4:	f000 030f 	and.w	r3, r0, #15
        if ( cCh > 9 )
    cac8:	2b09      	cmp	r3, #9
            cCh += bLower ? 0x27 : 0x7;
    caca:	bf88      	it	hi
    cacc:	444b      	addhi	r3, r9
        ui64Val >>= 4;
    cace:	ea4f 1e10 	mov.w	lr, r0, lsr #4
    cad2:	ea4e 700c 	orr.w	r0, lr, ip, lsl #28
        tbuf[ix++] = cCh + '0';
    cad6:	3330      	adds	r3, #48	; 0x30
        ui64Val >>= 4;
    cad8:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
        tbuf[ix++] = cCh + '0';
    cadc:	f801 3b01 	strb.w	r3, [r1], #1
    while ( ui64Val )
    cae0:	ea50 030c 	orrs.w	r3, r0, ip
        tbuf[ix++] = cCh + '0';
    cae4:	f102 0201 	add.w	r2, r2, #1
    while ( ui64Val )
    cae8:	d1ec      	bne.n	cac4 <am_util_stdio_vsprintf+0x540>
    if (pcBuf)
    caea:	b17d      	cbz	r5, cb0c <am_util_stdio_vsprintf+0x588>
    caec:	eb08 0302 	add.w	r3, r8, r2
    caf0:	1e69      	subs	r1, r5, #1
            *pcBuf++ = tbuf[ix];
    caf2:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
    caf6:	f801 0f01 	strb.w	r0, [r1, #1]!
        while (ix--)
    cafa:	4543      	cmp	r3, r8
    cafc:	d1f9      	bne.n	caf2 <am_util_stdio_vsprintf+0x56e>
            *pcBuf++ = tbuf[ix];
    cafe:	18ab      	adds	r3, r5, r2
                    pcBuf += iVal;
    cb00:	461d      	mov	r5, r3
    cb02:	e78e      	b.n	ca22 <am_util_stdio_vsprintf+0x49e>
    if ( ui64Val == 0 )
    cb04:	ea50 030c 	orrs.w	r3, r0, ip
    cb08:	d1d1      	bne.n	caae <am_util_stdio_vsprintf+0x52a>
    cb0a:	2201      	movs	r2, #1
                if ( pcBuf )
    cb0c:	2500      	movs	r5, #0
                ui32CharCnt += iVal;
    cb0e:	4416      	add	r6, r2
                break;
    cb10:	e78a      	b.n	ca28 <am_util_stdio_vsprintf+0x4a4>
    cb12:	eb08 010a 	add.w	r1, r8, sl
                    ++ui32CharCnt;
    cb16:	18ce      	adds	r6, r1, r3
                while (*pcStr != 0x0)
    cb18:	f813 7f01 	ldrb.w	r7, [r3, #1]!
    cb1c:	2f00      	cmp	r7, #0
    cb1e:	d1fa      	bne.n	cb16 <am_util_stdio_vsprintf+0x592>
                if ( iWidth )
    cb20:	2800      	cmp	r0, #0
    cb22:	f43f aee9 	beq.w	c8f8 <am_util_stdio_vsprintf+0x374>
    cb26:	e6ca      	b.n	c8be <am_util_stdio_vsprintf+0x33a>
    while ( i32NumChars-- )
    cb28:	1e43      	subs	r3, r0, #1
        i32Cnt++;
    cb2a:	f108 0801 	add.w	r8, r8, #1
    while ( i32NumChars-- )
    cb2e:	2800      	cmp	r0, #0
    cb30:	d1b1      	bne.n	ca96 <am_util_stdio_vsprintf+0x512>
    cb32:	e7b5      	b.n	caa0 <am_util_stdio_vsprintf+0x51c>
    cb34:	1e57      	subs	r7, r2, #1
        i32Cnt++;
    cb36:	3001      	adds	r0, #1
    while ( i32NumChars-- )
    cb38:	2a00      	cmp	r2, #0
    cb3a:	f47f aed6 	bne.w	c8ea <am_util_stdio_vsprintf+0x366>
                        ui32CharCnt += iWidth;
    cb3e:	4406      	add	r6, r0
    cb40:	e6d8      	b.n	c8f4 <am_util_stdio_vsprintf+0x370>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cb42:	78a0      	ldrb	r0, [r4, #2]
    cb44:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    cb48:	2b09      	cmp	r3, #9
        pcStr++;
    cb4a:	f104 0402 	add.w	r4, r4, #2
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cb4e:	f200 8176 	bhi.w	ce3e <am_util_stdio_vsprintf+0x8ba>
        uCnt++;
    cb52:	2301      	movs	r3, #1
        bNeg = true;
    cb54:	4699      	mov	r9, r3
    cb56:	e667      	b.n	c828 <am_util_stdio_vsprintf+0x2a4>
    int iNDigits = ui64Val ? 0 : 1;
    cb58:	ea5a 0309 	orrs.w	r3, sl, r9
    cb5c:	bf0c      	ite	eq
    cb5e:	f04f 0b01 	moveq.w	fp, #1
    cb62:	f04f 0b00 	movne.w	fp, #0
    while ( ui64Val )
    cb66:	d012      	beq.n	cb8e <am_util_stdio_vsprintf+0x60a>
    cb68:	4649      	mov	r1, r9
    cb6a:	9400      	str	r4, [sp, #0]
    cb6c:	4650      	mov	r0, sl
    cb6e:	465c      	mov	r4, fp
    cb70:	46cb      	mov	fp, r9
    cb72:	46a9      	mov	r9, r5
    cb74:	4615      	mov	r5, r2
        ui64Val = divu64_10(ui64Val);
    cb76:	f7ff fc21 	bl	c3bc <divu64_10>
    while ( ui64Val )
    cb7a:	ea50 0301 	orrs.w	r3, r0, r1
        ++iNDigits;
    cb7e:	f104 0401 	add.w	r4, r4, #1
    while ( ui64Val )
    cb82:	d1f8      	bne.n	cb76 <am_util_stdio_vsprintf+0x5f2>
    cb84:	462a      	mov	r2, r5
    cb86:	464d      	mov	r5, r9
    cb88:	46d9      	mov	r9, fp
    cb8a:	46a3      	mov	fp, r4
    cb8c:	9c00      	ldr	r4, [sp, #0]
                    iWidth -= ndigits_in_u64(ui64Val);
    cb8e:	eba8 030b 	sub.w	r3, r8, fp
    if ( i32NumChars <= 0 )
    cb92:	2b00      	cmp	r3, #0
    cb94:	f340 8149 	ble.w	ce2a <am_util_stdio_vsprintf+0x8a6>
    while ( i32NumChars-- )
    cb98:	3b01      	subs	r3, #1
    int32_t i32Cnt = 0;
    cb9a:	4694      	mov	ip, r2
    cb9c:	46a6      	mov	lr, r4
    cb9e:	2000      	movs	r0, #0
    cba0:	462a      	mov	r2, r5
    cba2:	461c      	mov	r4, r3
            *pcBuf++ = cPadChar;
    cba4:	4611      	mov	r1, r2
        if ( pcBuf )
    cba6:	b1a2      	cbz	r2, cbd2 <am_util_stdio_vsprintf+0x64e>
            *pcBuf++ = cPadChar;
    cba8:	f801 cb01 	strb.w	ip, [r1], #1
    cbac:	4623      	mov	r3, r4
    cbae:	460a      	mov	r2, r1
        i32Cnt++;
    cbb0:	3001      	adds	r0, #1
    while ( i32NumChars-- )
    cbb2:	1e5c      	subs	r4, r3, #1
    cbb4:	2b00      	cmp	r3, #0
    cbb6:	d1f5      	bne.n	cba4 <am_util_stdio_vsprintf+0x620>
                    ui32CharCnt += iWidth;
    cbb8:	4674      	mov	r4, lr
    cbba:	4406      	add	r6, r0
                    pcBuf += pcBuf ? iWidth : 0;
    cbbc:	2d00      	cmp	r5, #0
    cbbe:	f000 8123 	beq.w	ce08 <am_util_stdio_vsprintf+0x884>
    cbc2:	4405      	add	r5, r0
                iVal = uint64_to_str(ui64Val, pcBuf);
    cbc4:	462a      	mov	r2, r5
    cbc6:	4650      	mov	r0, sl
    cbc8:	4649      	mov	r1, r9
    cbca:	f7ff fc53 	bl	c474 <uint64_to_str>
                    pcBuf += iVal;
    cbce:	4405      	add	r5, r0
    cbd0:	e61a      	b.n	c808 <am_util_stdio_vsprintf+0x284>
    while ( i32NumChars-- )
    cbd2:	1e63      	subs	r3, r4, #1
        i32Cnt++;
    cbd4:	3001      	adds	r0, #1
    while ( i32NumChars-- )
    cbd6:	2c00      	cmp	r4, #0
    cbd8:	d1ea      	bne.n	cbb0 <am_util_stdio_vsprintf+0x62c>
    cbda:	e7ed      	b.n	cbb8 <am_util_stdio_vsprintf+0x634>
    else if (iExp2 >= 0)
    cbdc:	2a00      	cmp	r2, #0
    cbde:	db36      	blt.n	cc4e <am_util_stdio_vsprintf+0x6ca>
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    cbe0:	f1a1 087e 	sub.w	r8, r1, #126	; 0x7e
    cbe4:	fa00 f808 	lsl.w	r8, r0, r8
        i32IntPart = i32Significand >> (23 - iExp2);
    cbe8:	f1c2 0217 	rsb	r2, r2, #23
    if (unFloatValue.I32 < 0)
    cbec:	2b00      	cmp	r3, #0
        i32IntPart = i32Significand >> (23 - iExp2);
    cbee:	fa40 f002 	asr.w	r0, r0, r2
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    cbf2:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    if (unFloatValue.I32 < 0)
    cbf6:	db3a      	blt.n	cc6e <am_util_stdio_vsprintf+0x6ea>
    cbf8:	462a      	mov	r2, r5
    cbfa:	e5bb      	b.n	c774 <am_util_stdio_vsprintf+0x1f0>
                if ( iWidth > 0 )
    cbfc:	2800      	cmp	r0, #0
    cbfe:	dd3b      	ble.n	cc78 <am_util_stdio_vsprintf+0x6f4>
        return ui32RetVal;
    cc00:	469e      	mov	lr, r3
    int32_t i32Cnt = 0;
    cc02:	469c      	mov	ip, r3
    while ( i32NumChars-- )
    cc04:	f100 38ff 	add.w	r8, r0, #4294967295
    int32_t i32Cnt = 0;
    cc08:	2100      	movs	r1, #0
    cc0a:	462b      	mov	r3, r5
            *pcBuf++ = cPadChar;
    cc0c:	4618      	mov	r0, r3
        if ( pcBuf )
    cc0e:	2b00      	cmp	r3, #0
    cc10:	d049      	beq.n	cca6 <am_util_stdio_vsprintf+0x722>
            *pcBuf++ = cPadChar;
    cc12:	f800 2b01 	strb.w	r2, [r0], #1
    cc16:	4647      	mov	r7, r8
    cc18:	4603      	mov	r3, r0
        i32Cnt++;
    cc1a:	3101      	adds	r1, #1
    while ( i32NumChars-- )
    cc1c:	f107 38ff 	add.w	r8, r7, #4294967295
    cc20:	2f00      	cmp	r7, #0
    cc22:	d1f3      	bne.n	cc0c <am_util_stdio_vsprintf+0x688>
                        ui32CharCnt += iWidth;
    cc24:	4608      	mov	r0, r1
    cc26:	440e      	add	r6, r1
                while (*pcStr != 0x0)
    cc28:	f89c 1000 	ldrb.w	r1, [ip]
                        ui32CharCnt += iWidth;
    cc2c:	4663      	mov	r3, ip
                        pcBuf += pcBuf ? iWidth : 0;
    cc2e:	b105      	cbz	r5, cc32 <am_util_stdio_vsprintf+0x6ae>
    cc30:	4405      	add	r5, r0
                while (*pcStr != 0x0)
    cc32:	2900      	cmp	r1, #0
    cc34:	f43f ae60 	beq.w	c8f8 <am_util_stdio_vsprintf+0x374>
                        iWidth = 0;
    cc38:	2000      	movs	r0, #0
    cc3a:	e62c      	b.n	c896 <am_util_stdio_vsprintf+0x312>
        switch ( *pcFmt )
    cc3c:	f04f 0e01 	mov.w	lr, #1
    cc40:	e6df      	b.n	ca02 <am_util_stdio_vsprintf+0x47e>
                        iWidth -= ui32strlen;
    cc42:	eba0 000e 	sub.w	r0, r0, lr
    if ( i32NumChars <= 0 )
    cc46:	2800      	cmp	r0, #0
    cc48:	dcdb      	bgt.n	cc02 <am_util_stdio_vsprintf+0x67e>
    cc4a:	4638      	mov	r0, r7
    cc4c:	e7ef      	b.n	cc2e <am_util_stdio_vsprintf+0x6aa>
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    cc4e:	43d2      	mvns	r2, r2
    if (unFloatValue.I32 < 0)
    cc50:	2b00      	cmp	r3, #0
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    cc52:	fa40 f802 	asr.w	r8, r0, r2
        *pcBuf++ = '-';
    cc56:	462b      	mov	r3, r5
    if (unFloatValue.I32 < 0)
    cc58:	da02      	bge.n	cc60 <am_util_stdio_vsprintf+0x6dc>
        *pcBuf++ = '-';
    cc5a:	222d      	movs	r2, #45	; 0x2d
    cc5c:	f803 2b01 	strb.w	r2, [r3], #1
        *pcBuf++ = '0';
    cc60:	461a      	mov	r2, r3
    cc62:	2330      	movs	r3, #48	; 0x30
    cc64:	f802 3b01 	strb.w	r3, [r2], #1
    cc68:	e58d      	b.n	c786 <am_util_stdio_vsprintf+0x202>
    i32FracPart = 0;
    cc6a:	f04f 0800 	mov.w	r8, #0
        *pcBuf++ = '-';
    cc6e:	462b      	mov	r3, r5
    cc70:	222d      	movs	r2, #45	; 0x2d
    cc72:	f803 2b01 	strb.w	r2, [r3], #1
    cc76:	e574      	b.n	c762 <am_util_stdio_vsprintf+0x1de>
    while ( *pcBuf++ )
    cc78:	7819      	ldrb	r1, [r3, #0]
                while (*pcStr != 0x0)
    cc7a:	469e      	mov	lr, r3
    cc7c:	2900      	cmp	r1, #0
    cc7e:	f47f ae0a 	bne.w	c896 <am_util_stdio_vsprintf+0x312>
    cc82:	468e      	mov	lr, r1
                if ( iWidth )
    cc84:	2800      	cmp	r0, #0
    cc86:	f43f ae37 	beq.w	c8f8 <am_util_stdio_vsprintf+0x374>
    cc8a:	e618      	b.n	c8be <am_util_stdio_vsprintf+0x33a>
        bLower = bLongLong = false;
    cc8c:	f04f 0e00 	mov.w	lr, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cc90:	3707      	adds	r7, #7
    cc92:	f027 0707 	bic.w	r7, r7, #7
    cc96:	f8d7 c004 	ldr.w	ip, [r7, #4]
    cc9a:	f857 0b08 	ldr.w	r0, [r7], #8
    cc9e:	e6b4      	b.n	ca0a <am_util_stdio_vsprintf+0x486>
        switch ( *pcFmt )
    cca0:	f04f 0e01 	mov.w	lr, #1
    cca4:	e7f4      	b.n	cc90 <am_util_stdio_vsprintf+0x70c>
    while ( i32NumChars-- )
    cca6:	f108 37ff 	add.w	r7, r8, #4294967295
        i32Cnt++;
    ccaa:	3101      	adds	r1, #1
    while ( i32NumChars-- )
    ccac:	f1b8 0f00 	cmp.w	r8, #0
    ccb0:	d1b3      	bne.n	cc1a <am_util_stdio_vsprintf+0x696>
    ccb2:	e7b7      	b.n	cc24 <am_util_stdio_vsprintf+0x6a0>
    *pcBuf++ = '.';
    ccb4:	f102 0c01 	add.w	ip, r2, #1
        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    ccb8:	ebac 0105 	sub.w	r1, ip, r5
    ccbc:	f1c1 0313 	rsb	r3, r1, #19
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    ccc0:	454b      	cmp	r3, r9
    ccc2:	bfa8      	it	ge
    ccc4:	464b      	movge	r3, r9
        for (jx = 0; jx < iMax; jx++)
    ccc6:	2b00      	cmp	r3, #0
    ccc8:	f340 80ca 	ble.w	ce60 <am_util_stdio_vsprintf+0x8dc>
    cccc:	1c58      	adds	r0, r3, #1
    ccce:	4410      	add	r0, r2
            i32FracPart *= 10;
    ccd0:	eb08 0888 	add.w	r8, r8, r8, lsl #2
            *pcBuf++ = (i32FracPart >> 24) + '0';
    ccd4:	ea4f 51e8 	mov.w	r1, r8, asr #23
    ccd8:	3130      	adds	r1, #48	; 0x30
    ccda:	f80c 1b01 	strb.w	r1, [ip], #1
            i32FracPart *= 10;
    ccde:	ea4f 0848 	mov.w	r8, r8, lsl #1
        for (jx = 0; jx < iMax; jx++)
    cce2:	4560      	cmp	r0, ip
            i32FracPart &= 0x00FFFFFF;
    cce4:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
        for (jx = 0; jx < iMax; jx++)
    cce8:	d1f2      	bne.n	ccd0 <am_util_stdio_vsprintf+0x74c>
    ccea:	441a      	add	r2, r3
    return (pcBuf - pcBufInitial);
    ccec:	1b41      	subs	r1, r0, r5
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    ccee:	eb08 0888 	add.w	r8, r8, r8, lsl #2
    ccf2:	f348 53c7 	sbfx	r3, r8, #23, #8
    ccf6:	2b04      	cmp	r3, #4
    ccf8:	f77f ad4f 	ble.w	c79a <am_util_stdio_vsprintf+0x216>
            while ( pcBuftmp >= pcBufInitial )
    ccfc:	4295      	cmp	r5, r2
    ccfe:	f63f ad4c 	bhi.w	c79a <am_util_stdio_vsprintf+0x216>
    cd02:	4613      	mov	r3, r2
                    *pcBuftmp = '0';
    cd04:	f04f 0e30 	mov.w	lr, #48	; 0x30
    cd08:	e004      	b.n	cd14 <am_util_stdio_vsprintf+0x790>
    cd0a:	f883 e001 	strb.w	lr, [r3, #1]
            while ( pcBuftmp >= pcBufInitial )
    cd0e:	429d      	cmp	r5, r3
    cd10:	f63f ad43 	bhi.w	c79a <am_util_stdio_vsprintf+0x216>
                    *pcBuftmp = '0';
    cd14:	469c      	mov	ip, r3
                if ( *pcBuftmp == '.' )
    cd16:	f813 2901 	ldrb.w	r2, [r3], #-1
    cd1a:	2a2e      	cmp	r2, #46	; 0x2e
    cd1c:	d0f7      	beq.n	cd0e <am_util_stdio_vsprintf+0x78a>
                else if ( *pcBuftmp == '9' )
    cd1e:	2a39      	cmp	r2, #57	; 0x39
    cd20:	d0f3      	beq.n	cd0a <am_util_stdio_vsprintf+0x786>
                    *pcBuftmp += 1;
    cd22:	3201      	adds	r2, #1
    cd24:	f88c 2000 	strb.w	r2, [ip]
                    break;
    cd28:	e537      	b.n	c79a <am_util_stdio_vsprintf+0x216>
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    cd2a:	1c4b      	adds	r3, r1, #1
    cd2c:	f000 8081 	beq.w	ce32 <am_util_stdio_vsprintf+0x8ae>
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    cd30:	3102      	adds	r1, #2
    cd32:	f000 8082 	beq.w	ce3a <am_util_stdio_vsprintf+0x8b6>
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    cd36:	4b4e      	ldr	r3, [pc, #312]	; (ce70 <am_util_stdio_vsprintf+0x8ec>)
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    cd38:	602b      	str	r3, [r5, #0]
    cd3a:	2303      	movs	r3, #3
    cd3c:	e533      	b.n	c7a6 <am_util_stdio_vsprintf+0x222>
    int iNDigits = ui64Val ? 0 : 1;
    cd3e:	ea59 010a 	orrs.w	r1, r9, sl
    cd42:	bf0c      	ite	eq
    cd44:	f04f 0b01 	moveq.w	fp, #1
    cd48:	f04f 0b00 	movne.w	fp, #0
    while ( ui64Val )
    cd4c:	f000 808a 	beq.w	ce64 <am_util_stdio_vsprintf+0x8e0>
                    bNeg = false;
    cd50:	2300      	movs	r3, #0
    cd52:	9300      	str	r3, [sp, #0]
    cd54:	4648      	mov	r0, r9
    cd56:	4651      	mov	r1, sl
    cd58:	9401      	str	r4, [sp, #4]
    cd5a:	465c      	mov	r4, fp
    cd5c:	46d3      	mov	fp, sl
    cd5e:	46ca      	mov	sl, r9
    cd60:	46a9      	mov	r9, r5
    cd62:	4615      	mov	r5, r2
        ui64Val = divu64_10(ui64Val);
    cd64:	f7ff fb2a 	bl	c3bc <divu64_10>
    while ( ui64Val )
    cd68:	ea50 0301 	orrs.w	r3, r0, r1
        ++iNDigits;
    cd6c:	f104 0401 	add.w	r4, r4, #1
    while ( ui64Val )
    cd70:	d1f8      	bne.n	cd64 <am_util_stdio_vsprintf+0x7e0>
                    if ( bNeg )
    cd72:	9900      	ldr	r1, [sp, #0]
                    iWidth -= ndigits_in_i64(ui64Val);
    cd74:	462a      	mov	r2, r5
    cd76:	464d      	mov	r5, r9
    cd78:	46d1      	mov	r9, sl
    cd7a:	46da      	mov	sl, fp
    cd7c:	46a3      	mov	fp, r4
    cd7e:	eba8 030b 	sub.w	r3, r8, fp
    cd82:	9c01      	ldr	r4, [sp, #4]
                    if ( bNeg )
    cd84:	b119      	cbz	r1, cd8e <am_util_stdio_vsprintf+0x80a>
                        if ( ui8PadChar == '0' )
    cd86:	2a30      	cmp	r2, #48	; 0x30
                        --iWidth;
    cd88:	f103 33ff 	add.w	r3, r3, #4294967295
                        if ( ui8PadChar == '0' )
    cd8c:	d062      	beq.n	ce54 <am_util_stdio_vsprintf+0x8d0>
    if ( i32NumChars <= 0 )
    cd8e:	2b00      	cmp	r3, #0
    cd90:	dd4d      	ble.n	ce2e <am_util_stdio_vsprintf+0x8aa>
    while ( i32NumChars-- )
    cd92:	3b01      	subs	r3, #1
    int32_t i32Cnt = 0;
    cd94:	4694      	mov	ip, r2
    cd96:	46a6      	mov	lr, r4
    cd98:	2000      	movs	r0, #0
    cd9a:	462a      	mov	r2, r5
    cd9c:	461c      	mov	r4, r3
            *pcBuf++ = cPadChar;
    cd9e:	4611      	mov	r1, r2
        if ( pcBuf )
    cda0:	b1c2      	cbz	r2, cdd4 <am_util_stdio_vsprintf+0x850>
            *pcBuf++ = cPadChar;
    cda2:	f801 cb01 	strb.w	ip, [r1], #1
    cda6:	4623      	mov	r3, r4
    cda8:	460a      	mov	r2, r1
        i32Cnt++;
    cdaa:	3001      	adds	r0, #1
    while ( i32NumChars-- )
    cdac:	1e5c      	subs	r4, r3, #1
    cdae:	2b00      	cmp	r3, #0
    cdb0:	d1f5      	bne.n	cd9e <am_util_stdio_vsprintf+0x81a>
    cdb2:	4674      	mov	r4, lr
    cdb4:	4662      	mov	r2, ip
                    ui32CharCnt += iWidth;
    cdb6:	4406      	add	r6, r0
                    pcBuf += pcBuf ? iWidth : 0;
    cdb8:	b365      	cbz	r5, ce14 <am_util_stdio_vsprintf+0x890>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    cdba:	9b00      	ldr	r3, [sp, #0]
                    pcBuf += pcBuf ? iWidth : 0;
    cdbc:	4405      	add	r5, r0
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    cdbe:	b113      	cbz	r3, cdc6 <am_util_stdio_vsprintf+0x842>
    cdc0:	2a20      	cmp	r2, #32
    cdc2:	f43f ae17 	beq.w	c9f4 <am_util_stdio_vsprintf+0x470>
                iVal = uint64_to_str(ui64Val, pcBuf);
    cdc6:	462a      	mov	r2, r5
    cdc8:	4648      	mov	r0, r9
    cdca:	4651      	mov	r1, sl
    cdcc:	f7ff fb52 	bl	c474 <uint64_to_str>
                    pcBuf += iVal;
    cdd0:	4405      	add	r5, r0
    cdd2:	e519      	b.n	c808 <am_util_stdio_vsprintf+0x284>
    while ( i32NumChars-- )
    cdd4:	1e63      	subs	r3, r4, #1
        i32Cnt++;
    cdd6:	3001      	adds	r0, #1
    while ( i32NumChars-- )
    cdd8:	2c00      	cmp	r4, #0
    cdda:	d1e6      	bne.n	cdaa <am_util_stdio_vsprintf+0x826>
    cddc:	e7e9      	b.n	cdb2 <am_util_stdio_vsprintf+0x82e>
    cdde:	f04f 0800 	mov.w	r8, #0
    cde2:	e65f      	b.n	caa4 <am_util_stdio_vsprintf+0x520>
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    cde4:	4b23      	ldr	r3, [pc, #140]	; (ce74 <am_util_stdio_vsprintf+0x8f0>)
    cde6:	602b      	str	r3, [r5, #0]
    cde8:	2303      	movs	r3, #3
    cdea:	e4dc      	b.n	c7a6 <am_util_stdio_vsprintf+0x222>
                    bNeg = true;
    cdec:	2301      	movs	r3, #1
    cdee:	9300      	str	r3, [sp, #0]
    int iNDigits = ui64Val ? 0 : 1;
    cdf0:	f04f 0b00 	mov.w	fp, #0
    cdf4:	e7ae      	b.n	cd54 <am_util_stdio_vsprintf+0x7d0>
    uint32_t ui32Val = 0, uCnt = 0;
    cdf6:	f04f 0a00 	mov.w	sl, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cdfa:	4653      	mov	r3, sl
    cdfc:	e52b      	b.n	c856 <am_util_stdio_vsprintf+0x2d2>
                if ( iWidth > 0 )
    cdfe:	2800      	cmp	r0, #0
    ce00:	f77f af3f 	ble.w	cc82 <am_util_stdio_vsprintf+0x6fe>
    uint32_t ui32RetVal = 0;
    ce04:	468e      	mov	lr, r1
    ce06:	e6fc      	b.n	cc02 <am_util_stdio_vsprintf+0x67e>
                iVal = uint64_to_str(ui64Val, pcBuf);
    ce08:	462a      	mov	r2, r5
    ce0a:	4650      	mov	r0, sl
    ce0c:	4649      	mov	r1, r9
    ce0e:	f7ff fb31 	bl	c474 <uint64_to_str>
                if ( pcBuf )
    ce12:	e4dd      	b.n	c7d0 <am_util_stdio_vsprintf+0x24c>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    ce14:	9b00      	ldr	r3, [sp, #0]
    ce16:	b1b3      	cbz	r3, ce46 <am_util_stdio_vsprintf+0x8c2>
    ce18:	2a20      	cmp	r2, #32
    ce1a:	f43f adee 	beq.w	c9fa <am_util_stdio_vsprintf+0x476>
                iVal = uint64_to_str(ui64Val, pcBuf);
    ce1e:	462a      	mov	r2, r5
    ce20:	4648      	mov	r0, r9
    ce22:	4651      	mov	r1, sl
    ce24:	f7ff fb26 	bl	c474 <uint64_to_str>
                if ( pcBuf )
    ce28:	e4d2      	b.n	c7d0 <am_util_stdio_vsprintf+0x24c>
    ce2a:	2000      	movs	r0, #0
    ce2c:	e6c6      	b.n	cbbc <am_util_stdio_vsprintf+0x638>
    ce2e:	2000      	movs	r0, #0
    ce30:	e7c2      	b.n	cdb8 <am_util_stdio_vsprintf+0x834>
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    ce32:	4b10      	ldr	r3, [pc, #64]	; (ce74 <am_util_stdio_vsprintf+0x8f0>)
    ce34:	e780      	b.n	cd38 <am_util_stdio_vsprintf+0x7b4>
    ce36:	2000      	movs	r0, #0
    ce38:	e55c      	b.n	c8f4 <am_util_stdio_vsprintf+0x370>
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    ce3a:	4b0f      	ldr	r3, [pc, #60]	; (ce78 <am_util_stdio_vsprintf+0x8f4>)
    ce3c:	e77c      	b.n	cd38 <am_util_stdio_vsprintf+0x7b4>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ce3e:	2300      	movs	r3, #0
        uCnt++;
    ce40:	f04f 0a01 	mov.w	sl, #1
    ce44:	e506      	b.n	c854 <am_util_stdio_vsprintf+0x2d0>
                iVal = uint64_to_str(ui64Val, pcBuf);
    ce46:	4648      	mov	r0, r9
    ce48:	4651      	mov	r1, sl
    ce4a:	462a      	mov	r2, r5
    ce4c:	f7ff fb12 	bl	c474 <uint64_to_str>
                ui32CharCnt += iVal;
    ce50:	4406      	add	r6, r0
                break;
    ce52:	e4bf      	b.n	c7d4 <am_util_stdio_vsprintf+0x250>
                            if ( pcBuf )
    ce54:	b115      	cbz	r5, ce5c <am_util_stdio_vsprintf+0x8d8>
                                *pcBuf++ = '-';
    ce56:	212d      	movs	r1, #45	; 0x2d
    ce58:	f805 1b01 	strb.w	r1, [r5], #1
                            ++ui32CharCnt;
    ce5c:	3601      	adds	r6, #1
    ce5e:	e796      	b.n	cd8e <am_util_stdio_vsprintf+0x80a>
    *pcBuf++ = '.';
    ce60:	4660      	mov	r0, ip
    ce62:	e744      	b.n	ccee <am_util_stdio_vsprintf+0x76a>
                    iWidth -= ndigits_in_i64(ui64Val);
    ce64:	eba8 030b 	sub.w	r3, r8, fp
                    bNeg = false;
    ce68:	468a      	mov	sl, r1
    ce6a:	9100      	str	r1, [sp, #0]
                    ui64Val = i64Val;
    ce6c:	4689      	mov	r9, r1
    ce6e:	e78e      	b.n	cd8e <am_util_stdio_vsprintf+0x80a>
    ce70:	003f2e3f 	.word	0x003f2e3f
    ce74:	00302e30 	.word	0x00302e30
    ce78:	00232e23 	.word	0x00232e23

0000ce7c <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    ce7c:	b40f      	push	{r0, r1, r2, r3}
    ce7e:	b530      	push	{r4, r5, lr}
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    ce80:	4d09      	ldr	r5, [pc, #36]	; (cea8 <am_util_stdio_printf+0x2c>)
    ce82:	682c      	ldr	r4, [r5, #0]
{
    ce84:	b083      	sub	sp, #12
    if (!g_pfnCharPrint)
    ce86:	b14c      	cbz	r4, ce9c <am_util_stdio_printf+0x20>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    ce88:	aa07      	add	r2, sp, #28
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    ce8a:	9906      	ldr	r1, [sp, #24]
    ce8c:	4807      	ldr	r0, [pc, #28]	; (ceac <am_util_stdio_printf+0x30>)
    va_start(pArgs, pcFmt);
    ce8e:	9201      	str	r2, [sp, #4]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    ce90:	f7ff fb78 	bl	c584 <am_util_stdio_vsprintf>
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    ce94:	682b      	ldr	r3, [r5, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    ce96:	4604      	mov	r4, r0
    g_pfnCharPrint(g_prfbuf);
    ce98:	4804      	ldr	r0, [pc, #16]	; (ceac <am_util_stdio_printf+0x30>)
    ce9a:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
}
    ce9c:	4620      	mov	r0, r4
    ce9e:	b003      	add	sp, #12
    cea0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    cea4:	b004      	add	sp, #16
    cea6:	4770      	bx	lr
    cea8:	10001038 	.word	0x10001038
    ceac:	1000103c 	.word	0x1000103c

0000ceb0 <am_util_stdio_terminal_clear>:
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    ceb0:	4801      	ldr	r0, [pc, #4]	; (ceb8 <am_util_stdio_terminal_clear+0x8>)
    ceb2:	f7ff bfe3 	b.w	ce7c <am_util_stdio_printf>
    ceb6:	bf00      	nop
    ceb8:	0000e6d0 	.word	0x0000e6d0

0000cebc <NMI_Handler>:
NMI_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    cebc:	e7fe      	b.n	cebc <NMI_Handler>
    cebe:	bf00      	nop

0000cec0 <BusFault_Handler>:
HardFault_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    cec0:	e7fe      	b.n	cec0 <BusFault_Handler>
    cec2:	bf00      	nop

0000cec4 <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    cec4:	e7fe      	b.n	cec4 <DebugMon_Handler>
    cec6:	bf00      	nop

0000cec8 <Reset_Handler>:
    __asm("    ldr    r0, =0xE000ED08\n"
    cec8:	4811      	ldr	r0, [pc, #68]	; (cf10 <zero_loop+0x12>)
    ceca:	4912      	ldr	r1, [pc, #72]	; (cf14 <zero_loop+0x16>)
    cecc:	6001      	str	r1, [r0, #0]
    __asm("    ldr    sp, [r1]");
    cece:	f8d1 d000 	ldr.w	sp, [r1]
    __asm("ldr  r0, =0xE000ED88\n"
    ced2:	4811      	ldr	r0, [pc, #68]	; (cf18 <zero_loop+0x1a>)
    ced4:	6801      	ldr	r1, [r0, #0]
    ced6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    ceda:	6001      	str	r1, [r0, #0]
    cedc:	f3bf 8f4f 	dsb	sy
    cee0:	f3bf 8f6f 	isb	sy
    __asm("    ldr     r0, =_init_data\n"
    cee4:	480d      	ldr	r0, [pc, #52]	; (cf1c <zero_loop+0x1e>)
    cee6:	490e      	ldr	r1, [pc, #56]	; (cf20 <zero_loop+0x22>)
    cee8:	4a0e      	ldr	r2, [pc, #56]	; (cf24 <zero_loop+0x26>)

0000ceea <copy_loop>:
    ceea:	f850 3b04 	ldr.w	r3, [r0], #4
    ceee:	f841 3b04 	str.w	r3, [r1], #4
    cef2:	4291      	cmp	r1, r2
    cef4:	dbf9      	blt.n	ceea <copy_loop>
    __asm("    ldr     r0, =_sbss\n"
    cef6:	480c      	ldr	r0, [pc, #48]	; (cf28 <zero_loop+0x2a>)
    cef8:	490c      	ldr	r1, [pc, #48]	; (cf2c <zero_loop+0x2e>)
    cefa:	f04f 0200 	mov.w	r2, #0

0000cefe <zero_loop>:
    cefe:	4288      	cmp	r0, r1
    cf00:	bfb8      	it	lt
    cf02:	f840 2b04 	strlt.w	r2, [r0], #4
    cf06:	dbfa      	blt.n	cefe <zero_loop>
    main();
    cf08:	f7ff f96a 	bl	c1e0 <main>
    __asm("    bkpt     ");
    cf0c:	be00      	bkpt	0x0000
}
    cf0e:	0000      	.short	0x0000
    cf10:	e000ed08 	.word	0xe000ed08
    cf14:	0000c000 	.word	0x0000c000
    cf18:	e000ed88 	.word	0xe000ed88
    cf1c:	0000eb9c 	.word	0x0000eb9c
    cf20:	10001000 	.word	0x10001000
    cf24:	10001034 	.word	0x10001034
    cf28:	10001034 	.word	0x10001034
    cf2c:	10001210 	.word	0x10001210

0000cf30 <am_bsp_uart_string_print>:
    cf30:	b530      	push	{r4, r5, lr}
    cf32:	b087      	sub	sp, #28
    cf34:	7804      	ldrb	r4, [r0, #0]
    cf36:	2300      	movs	r3, #0
    cf38:	4605      	mov	r5, r0
    cf3a:	9300      	str	r3, [sp, #0]
    cf3c:	b13c      	cbz	r4, cf4e <am_bsp_uart_string_print+0x1e>
    cf3e:	4603      	mov	r3, r0
    cf40:	f1c0 0101 	rsb	r1, r0, #1
    cf44:	18cc      	adds	r4, r1, r3
    cf46:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    cf4a:	2a00      	cmp	r2, #0
    cf4c:	d1fa      	bne.n	cf44 <am_bsp_uart_string_print+0x14>
    cf4e:	4b0a      	ldr	r3, [pc, #40]	; (cf78 <am_bsp_uart_string_print+0x48>)
    cf50:	f8cd d014 	str.w	sp, [sp, #20]
    cf54:	6818      	ldr	r0, [r3, #0]
    cf56:	2200      	movs	r2, #0
    cf58:	f04f 33ff 	mov.w	r3, #4294967295
    cf5c:	a901      	add	r1, sp, #4
    cf5e:	e9cd 4303 	strd	r4, r3, [sp, #12]
    cf62:	e9cd 2501 	strd	r2, r5, [sp, #4]
    cf66:	f001 f867 	bl	e038 <am_hal_uart_transfer>
    cf6a:	9b00      	ldr	r3, [sp, #0]
    cf6c:	42a3      	cmp	r3, r4
    cf6e:	d000      	beq.n	cf72 <am_bsp_uart_string_print+0x42>
    cf70:	e7fe      	b.n	cf70 <am_bsp_uart_string_print+0x40>
    cf72:	b007      	add	sp, #28
    cf74:	bd30      	pop	{r4, r5, pc}
    cf76:	bf00      	nop
    cf78:	1000113c 	.word	0x1000113c

0000cf7c <am_bsp_low_power_init>:
    cf7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cf7e:	f000 fdc1 	bl	db04 <am_hal_pwrctrl_low_power_init>
    cf82:	f000 fe9d 	bl	dcc0 <am_hal_rtc_osc_disable>
    cf86:	4b0b      	ldr	r3, [pc, #44]	; (cfb4 <am_bsp_low_power_init+0x38>)
    cf88:	4f0b      	ldr	r7, [pc, #44]	; (cfb8 <am_bsp_low_power_init+0x3c>)
    cf8a:	681e      	ldr	r6, [r3, #0]
    cf8c:	2400      	movs	r4, #0
    cf8e:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    cf92:	4631      	mov	r1, r6
    cf94:	4628      	mov	r0, r5
    cf96:	f000 faf5 	bl	d584 <am_hal_gpio_pinconfig>
    cf9a:	2103      	movs	r1, #3
    cf9c:	4628      	mov	r0, r5
    cf9e:	f000 fc27 	bl	d7f0 <am_hal_gpio_state_write>
    cfa2:	3401      	adds	r4, #1
    cfa4:	2100      	movs	r1, #0
    cfa6:	4628      	mov	r0, r5
    cfa8:	f000 fc22 	bl	d7f0 <am_hal_gpio_state_write>
    cfac:	2c05      	cmp	r4, #5
    cfae:	d1ee      	bne.n	cf8e <am_bsp_low_power_init+0x12>
    cfb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cfb2:	bf00      	nop
    cfb4:	0000e740 	.word	0x0000e740
    cfb8:	10001000 	.word	0x10001000

0000cfbc <am_bsp_uart_printf_enable>:
    cfbc:	b510      	push	{r4, lr}
    cfbe:	4c10      	ldr	r4, [pc, #64]	; (d000 <am_bsp_uart_printf_enable+0x44>)
    cfc0:	4b10      	ldr	r3, [pc, #64]	; (d004 <am_bsp_uart_printf_enable+0x48>)
    cfc2:	4621      	mov	r1, r4
    cfc4:	2202      	movs	r2, #2
    cfc6:	2000      	movs	r0, #0
    cfc8:	601a      	str	r2, [r3, #0]
    cfca:	f000 fe83 	bl	dcd4 <am_hal_uart_initialize>
    cfce:	2200      	movs	r2, #0
    cfd0:	4611      	mov	r1, r2
    cfd2:	6820      	ldr	r0, [r4, #0]
    cfd4:	f000 feba 	bl	dd4c <am_hal_uart_power_control>
    cfd8:	490b      	ldr	r1, [pc, #44]	; (d008 <am_bsp_uart_printf_enable+0x4c>)
    cfda:	6820      	ldr	r0, [r4, #0]
    cfdc:	f000 ff2e 	bl	de3c <am_hal_uart_configure>
    cfe0:	4b0a      	ldr	r3, [pc, #40]	; (d00c <am_bsp_uart_printf_enable+0x50>)
    cfe2:	2016      	movs	r0, #22
    cfe4:	6819      	ldr	r1, [r3, #0]
    cfe6:	f000 facd 	bl	d584 <am_hal_gpio_pinconfig>
    cfea:	4b09      	ldr	r3, [pc, #36]	; (d010 <am_bsp_uart_printf_enable+0x54>)
    cfec:	2017      	movs	r0, #23
    cfee:	6819      	ldr	r1, [r3, #0]
    cff0:	f000 fac8 	bl	d584 <am_hal_gpio_pinconfig>
    cff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cff8:	4806      	ldr	r0, [pc, #24]	; (d014 <am_bsp_uart_printf_enable+0x58>)
    cffa:	f7ff babd 	b.w	c578 <am_util_stdio_printf_init>
    cffe:	bf00      	nop
    d000:	1000113c 	.word	0x1000113c
    d004:	10001140 	.word	0x10001140
    d008:	0000e6e4 	.word	0x0000e6e4
    d00c:	0000e710 	.word	0x0000e710
    d010:	0000e70c 	.word	0x0000e70c
    d014:	0000cf31 	.word	0x0000cf31

0000d018 <am_bsp_uart_printf_disable>:
    d018:	b510      	push	{r4, lr}
    d01a:	4c0e      	ldr	r4, [pc, #56]	; (d054 <am_bsp_uart_printf_disable+0x3c>)
    d01c:	b082      	sub	sp, #8
    d01e:	6820      	ldr	r0, [r4, #0]
    d020:	f001 fa0a 	bl	e438 <am_hal_uart_tx_flush>
    d024:	2000      	movs	r0, #0
    d026:	f7ff faa7 	bl	c578 <am_util_stdio_printf_init>
    d02a:	2200      	movs	r2, #0
    d02c:	2102      	movs	r1, #2
    d02e:	6820      	ldr	r0, [r4, #0]
    d030:	f000 fe8c 	bl	dd4c <am_hal_uart_power_control>
    d034:	6820      	ldr	r0, [r4, #0]
    d036:	f000 fe75 	bl	dd24 <am_hal_uart_deinitialize>
    d03a:	4b07      	ldr	r3, [pc, #28]	; (d058 <am_bsp_uart_printf_disable+0x40>)
    d03c:	2016      	movs	r0, #22
    d03e:	6819      	ldr	r1, [r3, #0]
    d040:	9101      	str	r1, [sp, #4]
    d042:	f000 fa9f 	bl	d584 <am_hal_gpio_pinconfig>
    d046:	9901      	ldr	r1, [sp, #4]
    d048:	2017      	movs	r0, #23
    d04a:	b002      	add	sp, #8
    d04c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d050:	f000 ba98 	b.w	d584 <am_hal_gpio_pinconfig>
    d054:	1000113c 	.word	0x1000113c
    d058:	0000e73c 	.word	0x0000e73c

0000d05c <am_hal_cachectrl_config>:
    d05c:	b530      	push	{r4, r5, lr}
    d05e:	b083      	sub	sp, #12
    d060:	4604      	mov	r4, r0
    d062:	f000 fc09 	bl	d878 <am_hal_interrupt_master_disable>
    d066:	4d0e      	ldr	r5, [pc, #56]	; (d0a0 <am_hal_cachectrl_config+0x44>)
    d068:	9001      	str	r0, [sp, #4]
    d06a:	682b      	ldr	r3, [r5, #0]
    d06c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    d070:	602b      	str	r3, [r5, #0]
    d072:	9801      	ldr	r0, [sp, #4]
    d074:	f000 fc04 	bl	d880 <am_hal_interrupt_master_set>
    d078:	7863      	ldrb	r3, [r4, #1]
    d07a:	7822      	ldrb	r2, [r4, #0]
    d07c:	78a1      	ldrb	r1, [r4, #2]
    d07e:	021b      	lsls	r3, r3, #8
    d080:	f403 7340 	and.w	r3, r3, #768	; 0x300
    d084:	0112      	lsls	r2, r2, #4
    d086:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    d08a:	b2d2      	uxtb	r2, r2
    d08c:	4313      	orrs	r3, r2
    d08e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d092:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d096:	2000      	movs	r0, #0
    d098:	602b      	str	r3, [r5, #0]
    d09a:	b003      	add	sp, #12
    d09c:	bd30      	pop	{r4, r5, pc}
    d09e:	bf00      	nop
    d0a0:	40018000 	.word	0x40018000

0000d0a4 <am_hal_cachectrl_enable>:
    d0a4:	4a03      	ldr	r2, [pc, #12]	; (d0b4 <am_hal_cachectrl_enable+0x10>)
    d0a6:	6813      	ldr	r3, [r2, #0]
    d0a8:	f043 0301 	orr.w	r3, r3, #1
    d0ac:	2000      	movs	r0, #0
    d0ae:	6013      	str	r3, [r2, #0]
    d0b0:	4770      	bx	lr
    d0b2:	bf00      	nop
    d0b4:	40018000 	.word	0x40018000

0000d0b8 <am_hal_cachectrl_control>:
    d0b8:	b510      	push	{r4, lr}
    d0ba:	3801      	subs	r0, #1
    d0bc:	b08e      	sub	sp, #56	; 0x38
    d0be:	2810      	cmp	r0, #16
    d0c0:	f200 815e 	bhi.w	d380 <am_hal_cachectrl_control+0x2c8>
    d0c4:	e8df f010 	tbh	[pc, r0, lsl #1]
    d0c8:	00360018 	.word	0x00360018
    d0cc:	0040003d 	.word	0x0040003d
    d0d0:	00450043 	.word	0x00450043
    d0d4:	0011001a 	.word	0x0011001a
    d0d8:	00540047 	.word	0x00540047
    d0dc:	009a0061 	.word	0x009a0061
    d0e0:	010c00d3 	.word	0x010c00d3
    d0e4:	013f0126 	.word	0x013f0126
    d0e8:	001d      	.short	0x001d
    d0ea:	f44f 7300 	mov.w	r3, #512	; 0x200
    d0ee:	4aac      	ldr	r2, [pc, #688]	; (d3a0 <am_hal_cachectrl_control+0x2e8>)
    d0f0:	2000      	movs	r0, #0
    d0f2:	6093      	str	r3, [r2, #8]
    d0f4:	b00e      	add	sp, #56	; 0x38
    d0f6:	bd10      	pop	{r4, pc}
    d0f8:	2301      	movs	r3, #1
    d0fa:	e7f8      	b.n	d0ee <am_hal_cachectrl_control+0x36>
    d0fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    d100:	e7f5      	b.n	d0ee <am_hal_cachectrl_control+0x36>
    d102:	2900      	cmp	r1, #0
    d104:	f000 813c 	beq.w	d380 <am_hal_cachectrl_control+0x2c8>
    d108:	684a      	ldr	r2, [r1, #4]
    d10a:	48a6      	ldr	r0, [pc, #664]	; (d3a4 <am_hal_cachectrl_control+0x2ec>)
    d10c:	4202      	tst	r2, r0
    d10e:	f040 8137 	bne.w	d380 <am_hal_cachectrl_control+0x2c8>
    d112:	688b      	ldr	r3, [r1, #8]
    d114:	4018      	ands	r0, r3
    d116:	f040 8133 	bne.w	d380 <am_hal_cachectrl_control+0x2c8>
    d11a:	780c      	ldrb	r4, [r1, #0]
    d11c:	2c00      	cmp	r4, #0
    d11e:	f040 8133 	bne.w	d388 <am_hal_cachectrl_control+0x2d0>
    d122:	4c9f      	ldr	r4, [pc, #636]	; (d3a0 <am_hal_cachectrl_control+0x2e8>)
    d124:	7849      	ldrb	r1, [r1, #1]
    d126:	6122      	str	r2, [r4, #16]
    d128:	6163      	str	r3, [r4, #20]
    d12a:	6823      	ldr	r3, [r4, #0]
    d12c:	f361 0382 	bfi	r3, r1, #2, #1
    d130:	6023      	str	r3, [r4, #0]
    d132:	e7df      	b.n	d0f4 <am_hal_cachectrl_control+0x3c>
    d134:	4b9a      	ldr	r3, [pc, #616]	; (d3a0 <am_hal_cachectrl_control+0x2e8>)
    d136:	681b      	ldr	r3, [r3, #0]
    d138:	01db      	lsls	r3, r3, #7
    d13a:	f140 811f 	bpl.w	d37c <am_hal_cachectrl_control+0x2c4>
    d13e:	2302      	movs	r3, #2
    d140:	e7d5      	b.n	d0ee <am_hal_cachectrl_control+0x36>
    d142:	f44f 6388 	mov.w	r3, #1088	; 0x440
    d146:	e7d2      	b.n	d0ee <am_hal_cachectrl_control+0x36>
    d148:	f44f 7308 	mov.w	r3, #544	; 0x220
    d14c:	e7cf      	b.n	d0ee <am_hal_cachectrl_control+0x36>
    d14e:	2340      	movs	r3, #64	; 0x40
    d150:	e7cd      	b.n	d0ee <am_hal_cachectrl_control+0x36>
    d152:	2320      	movs	r3, #32
    d154:	e7cb      	b.n	d0ee <am_hal_cachectrl_control+0x36>
    d156:	f000 fb8f 	bl	d878 <am_hal_interrupt_master_disable>
    d15a:	4a91      	ldr	r2, [pc, #580]	; (d3a0 <am_hal_cachectrl_control+0x2e8>)
    d15c:	9000      	str	r0, [sp, #0]
    d15e:	6813      	ldr	r3, [r2, #0]
    d160:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    d164:	6013      	str	r3, [r2, #0]
    d166:	9800      	ldr	r0, [sp, #0]
    d168:	f000 fb8a 	bl	d880 <am_hal_interrupt_master_set>
    d16c:	2000      	movs	r0, #0
    d16e:	e7c1      	b.n	d0f4 <am_hal_cachectrl_control+0x3c>
    d170:	f000 fb82 	bl	d878 <am_hal_interrupt_master_disable>
    d174:	4a8a      	ldr	r2, [pc, #552]	; (d3a0 <am_hal_cachectrl_control+0x2e8>)
    d176:	9001      	str	r0, [sp, #4]
    d178:	6813      	ldr	r3, [r2, #0]
    d17a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    d17e:	6013      	str	r3, [r2, #0]
    d180:	9801      	ldr	r0, [sp, #4]
    d182:	f000 fb7d 	bl	d880 <am_hal_interrupt_master_set>
    d186:	2000      	movs	r0, #0
    d188:	e7b4      	b.n	d0f4 <am_hal_cachectrl_control+0x3c>
    d18a:	f000 fb75 	bl	d878 <am_hal_interrupt_master_disable>
    d18e:	4603      	mov	r3, r0
    d190:	4885      	ldr	r0, [pc, #532]	; (d3a8 <am_hal_cachectrl_control+0x2f0>)
    d192:	9302      	str	r3, [sp, #8]
    d194:	f000 f9ec 	bl	d570 <am_hal_flash_load_ui32>
    d198:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d19c:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d1a0:	4881      	ldr	r0, [pc, #516]	; (d3a8 <am_hal_cachectrl_control+0x2f0>)
    d1a2:	f000 f9e9 	bl	d578 <am_hal_flash_store_ui32>
    d1a6:	9802      	ldr	r0, [sp, #8]
    d1a8:	f000 fb6a 	bl	d880 <am_hal_interrupt_master_set>
    d1ac:	f000 fb64 	bl	d878 <am_hal_interrupt_master_disable>
    d1b0:	4603      	mov	r3, r0
    d1b2:	487d      	ldr	r0, [pc, #500]	; (d3a8 <am_hal_cachectrl_control+0x2f0>)
    d1b4:	9303      	str	r3, [sp, #12]
    d1b6:	f000 f9db 	bl	d570 <am_hal_flash_load_ui32>
    d1ba:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d1be:	f440 61ee 	orr.w	r1, r0, #1904	; 0x770
    d1c2:	4879      	ldr	r0, [pc, #484]	; (d3a8 <am_hal_cachectrl_control+0x2f0>)
    d1c4:	f000 f9d8 	bl	d578 <am_hal_flash_store_ui32>
    d1c8:	9803      	ldr	r0, [sp, #12]
    d1ca:	f000 fb59 	bl	d880 <am_hal_interrupt_master_set>
    d1ce:	f000 fb53 	bl	d878 <am_hal_interrupt_master_disable>
    d1d2:	4603      	mov	r3, r0
    d1d4:	4874      	ldr	r0, [pc, #464]	; (d3a8 <am_hal_cachectrl_control+0x2f0>)
    d1d6:	9304      	str	r3, [sp, #16]
    d1d8:	f000 f9ca 	bl	d570 <am_hal_flash_load_ui32>
    d1dc:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d1e0:	f020 000f 	bic.w	r0, r0, #15
    d1e4:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d1e8:	f041 0103 	orr.w	r1, r1, #3
    d1ec:	486e      	ldr	r0, [pc, #440]	; (d3a8 <am_hal_cachectrl_control+0x2f0>)
    d1ee:	f000 f9c3 	bl	d578 <am_hal_flash_store_ui32>
    d1f2:	9804      	ldr	r0, [sp, #16]
    d1f4:	f000 fb44 	bl	d880 <am_hal_interrupt_master_set>
    d1f8:	2000      	movs	r0, #0
    d1fa:	e77b      	b.n	d0f4 <am_hal_cachectrl_control+0x3c>
    d1fc:	f000 fb3c 	bl	d878 <am_hal_interrupt_master_disable>
    d200:	4603      	mov	r3, r0
    d202:	4869      	ldr	r0, [pc, #420]	; (d3a8 <am_hal_cachectrl_control+0x2f0>)
    d204:	9305      	str	r3, [sp, #20]
    d206:	f000 f9b3 	bl	d570 <am_hal_flash_load_ui32>
    d20a:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d20e:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    d212:	4865      	ldr	r0, [pc, #404]	; (d3a8 <am_hal_cachectrl_control+0x2f0>)
    d214:	f000 f9b0 	bl	d578 <am_hal_flash_store_ui32>
    d218:	9805      	ldr	r0, [sp, #20]
    d21a:	f000 fb31 	bl	d880 <am_hal_interrupt_master_set>
    d21e:	f000 fb2b 	bl	d878 <am_hal_interrupt_master_disable>
    d222:	4603      	mov	r3, r0
    d224:	4860      	ldr	r0, [pc, #384]	; (d3a8 <am_hal_cachectrl_control+0x2f0>)
    d226:	9306      	str	r3, [sp, #24]
    d228:	f000 f9a2 	bl	d570 <am_hal_flash_load_ui32>
    d22c:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d230:	f440 61ea 	orr.w	r1, r0, #1872	; 0x750
    d234:	485c      	ldr	r0, [pc, #368]	; (d3a8 <am_hal_cachectrl_control+0x2f0>)
    d236:	f000 f99f 	bl	d578 <am_hal_flash_store_ui32>
    d23a:	9806      	ldr	r0, [sp, #24]
    d23c:	f000 fb20 	bl	d880 <am_hal_interrupt_master_set>
    d240:	f000 fb1a 	bl	d878 <am_hal_interrupt_master_disable>
    d244:	4603      	mov	r3, r0
    d246:	4858      	ldr	r0, [pc, #352]	; (d3a8 <am_hal_cachectrl_control+0x2f0>)
    d248:	9307      	str	r3, [sp, #28]
    d24a:	f000 f991 	bl	d570 <am_hal_flash_load_ui32>
    d24e:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d252:	f020 000f 	bic.w	r0, r0, #15
    d256:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d25a:	f041 0101 	orr.w	r1, r1, #1
    d25e:	4852      	ldr	r0, [pc, #328]	; (d3a8 <am_hal_cachectrl_control+0x2f0>)
    d260:	f000 f98a 	bl	d578 <am_hal_flash_store_ui32>
    d264:	9807      	ldr	r0, [sp, #28]
    d266:	f000 fb0b 	bl	d880 <am_hal_interrupt_master_set>
    d26a:	2000      	movs	r0, #0
    d26c:	e742      	b.n	d0f4 <am_hal_cachectrl_control+0x3c>
    d26e:	f000 fb03 	bl	d878 <am_hal_interrupt_master_disable>
    d272:	4603      	mov	r3, r0
    d274:	484c      	ldr	r0, [pc, #304]	; (d3a8 <am_hal_cachectrl_control+0x2f0>)
    d276:	9308      	str	r3, [sp, #32]
    d278:	f000 f97a 	bl	d570 <am_hal_flash_load_ui32>
    d27c:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d280:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    d284:	4848      	ldr	r0, [pc, #288]	; (d3a8 <am_hal_cachectrl_control+0x2f0>)
    d286:	f000 f977 	bl	d578 <am_hal_flash_store_ui32>
    d28a:	9808      	ldr	r0, [sp, #32]
    d28c:	f000 faf8 	bl	d880 <am_hal_interrupt_master_set>
    d290:	f000 faf2 	bl	d878 <am_hal_interrupt_master_disable>
    d294:	4603      	mov	r3, r0
    d296:	4844      	ldr	r0, [pc, #272]	; (d3a8 <am_hal_cachectrl_control+0x2f0>)
    d298:	9309      	str	r3, [sp, #36]	; 0x24
    d29a:	f000 f969 	bl	d570 <am_hal_flash_load_ui32>
    d29e:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d2a2:	f440 61ec 	orr.w	r1, r0, #1888	; 0x760
    d2a6:	4840      	ldr	r0, [pc, #256]	; (d3a8 <am_hal_cachectrl_control+0x2f0>)
    d2a8:	f000 f966 	bl	d578 <am_hal_flash_store_ui32>
    d2ac:	9809      	ldr	r0, [sp, #36]	; 0x24
    d2ae:	f000 fae7 	bl	d880 <am_hal_interrupt_master_set>
    d2b2:	f000 fae1 	bl	d878 <am_hal_interrupt_master_disable>
    d2b6:	4603      	mov	r3, r0
    d2b8:	483b      	ldr	r0, [pc, #236]	; (d3a8 <am_hal_cachectrl_control+0x2f0>)
    d2ba:	930a      	str	r3, [sp, #40]	; 0x28
    d2bc:	f000 f958 	bl	d570 <am_hal_flash_load_ui32>
    d2c0:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d2c4:	f020 000f 	bic.w	r0, r0, #15
    d2c8:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d2cc:	f041 0101 	orr.w	r1, r1, #1
    d2d0:	4835      	ldr	r0, [pc, #212]	; (d3a8 <am_hal_cachectrl_control+0x2f0>)
    d2d2:	f000 f951 	bl	d578 <am_hal_flash_store_ui32>
    d2d6:	980a      	ldr	r0, [sp, #40]	; 0x28
    d2d8:	f000 fad2 	bl	d880 <am_hal_interrupt_master_set>
    d2dc:	2000      	movs	r0, #0
    d2de:	e709      	b.n	d0f4 <am_hal_cachectrl_control+0x3c>
    d2e0:	2900      	cmp	r1, #0
    d2e2:	d04d      	beq.n	d380 <am_hal_cachectrl_control+0x2c8>
    d2e4:	680c      	ldr	r4, [r1, #0]
    d2e6:	2c03      	cmp	r4, #3
    d2e8:	d84c      	bhi.n	d384 <am_hal_cachectrl_control+0x2cc>
    d2ea:	f000 fac5 	bl	d878 <am_hal_interrupt_master_disable>
    d2ee:	4603      	mov	r3, r0
    d2f0:	482d      	ldr	r0, [pc, #180]	; (d3a8 <am_hal_cachectrl_control+0x2f0>)
    d2f2:	930b      	str	r3, [sp, #44]	; 0x2c
    d2f4:	f000 f93c 	bl	d570 <am_hal_flash_load_ui32>
    d2f8:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d2fc:	ea40 3104 	orr.w	r1, r0, r4, lsl #12
    d300:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d304:	4828      	ldr	r0, [pc, #160]	; (d3a8 <am_hal_cachectrl_control+0x2f0>)
    d306:	f000 f937 	bl	d578 <am_hal_flash_store_ui32>
    d30a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d30c:	f000 fab8 	bl	d880 <am_hal_interrupt_master_set>
    d310:	2000      	movs	r0, #0
    d312:	e6ef      	b.n	d0f4 <am_hal_cachectrl_control+0x3c>
    d314:	b3a1      	cbz	r1, d380 <am_hal_cachectrl_control+0x2c8>
    d316:	680c      	ldr	r4, [r1, #0]
    d318:	2c07      	cmp	r4, #7
    d31a:	d833      	bhi.n	d384 <am_hal_cachectrl_control+0x2cc>
    d31c:	f000 faac 	bl	d878 <am_hal_interrupt_master_disable>
    d320:	4603      	mov	r3, r0
    d322:	4821      	ldr	r0, [pc, #132]	; (d3a8 <am_hal_cachectrl_control+0x2f0>)
    d324:	930c      	str	r3, [sp, #48]	; 0x30
    d326:	f000 f923 	bl	d570 <am_hal_flash_load_ui32>
    d32a:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d32e:	ea40 1104 	orr.w	r1, r0, r4, lsl #4
    d332:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d336:	481c      	ldr	r0, [pc, #112]	; (d3a8 <am_hal_cachectrl_control+0x2f0>)
    d338:	f000 f91e 	bl	d578 <am_hal_flash_store_ui32>
    d33c:	980c      	ldr	r0, [sp, #48]	; 0x30
    d33e:	f000 fa9f 	bl	d880 <am_hal_interrupt_master_set>
    d342:	2000      	movs	r0, #0
    d344:	e6d6      	b.n	d0f4 <am_hal_cachectrl_control+0x3c>
    d346:	b1d9      	cbz	r1, d380 <am_hal_cachectrl_control+0x2c8>
    d348:	680c      	ldr	r4, [r1, #0]
    d34a:	2c0f      	cmp	r4, #15
    d34c:	d81a      	bhi.n	d384 <am_hal_cachectrl_control+0x2cc>
    d34e:	f000 fa93 	bl	d878 <am_hal_interrupt_master_disable>
    d352:	4603      	mov	r3, r0
    d354:	4814      	ldr	r0, [pc, #80]	; (d3a8 <am_hal_cachectrl_control+0x2f0>)
    d356:	930d      	str	r3, [sp, #52]	; 0x34
    d358:	f000 f90a 	bl	d570 <am_hal_flash_load_ui32>
    d35c:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d360:	f020 000f 	bic.w	r0, r0, #15
    d364:	ea40 0104 	orr.w	r1, r0, r4
    d368:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d36c:	480e      	ldr	r0, [pc, #56]	; (d3a8 <am_hal_cachectrl_control+0x2f0>)
    d36e:	f000 f903 	bl	d578 <am_hal_flash_store_ui32>
    d372:	980d      	ldr	r0, [sp, #52]	; 0x34
    d374:	f000 fa84 	bl	d880 <am_hal_interrupt_master_set>
    d378:	2000      	movs	r0, #0
    d37a:	e6bb      	b.n	d0f4 <am_hal_cachectrl_control+0x3c>
    d37c:	2007      	movs	r0, #7
    d37e:	e6b9      	b.n	d0f4 <am_hal_cachectrl_control+0x3c>
    d380:	2006      	movs	r0, #6
    d382:	e6b7      	b.n	d0f4 <am_hal_cachectrl_control+0x3c>
    d384:	2001      	movs	r0, #1
    d386:	e6b5      	b.n	d0f4 <am_hal_cachectrl_control+0x3c>
    d388:	2c01      	cmp	r4, #1
    d38a:	d1f9      	bne.n	d380 <am_hal_cachectrl_control+0x2c8>
    d38c:	4c04      	ldr	r4, [pc, #16]	; (d3a0 <am_hal_cachectrl_control+0x2e8>)
    d38e:	7849      	ldrb	r1, [r1, #1]
    d390:	61a2      	str	r2, [r4, #24]
    d392:	61e3      	str	r3, [r4, #28]
    d394:	6823      	ldr	r3, [r4, #0]
    d396:	f361 03c3 	bfi	r3, r1, #3, #1
    d39a:	6023      	str	r3, [r4, #0]
    d39c:	e6aa      	b.n	d0f4 <am_hal_cachectrl_control+0x3c>
    d39e:	bf00      	nop
    d3a0:	40018000 	.word	0x40018000
    d3a4:	f800000f 	.word	0xf800000f
    d3a8:	40018004 	.word	0x40018004

0000d3ac <am_hal_clkgen_control>:
    d3ac:	4b49      	ldr	r3, [pc, #292]	; (d4d4 <am_hal_clkgen_control+0x128>)
    d3ae:	681a      	ldr	r2, [r3, #0]
    d3b0:	b912      	cbnz	r2, d3b8 <am_hal_clkgen_control+0xc>
    d3b2:	4a49      	ldr	r2, [pc, #292]	; (d4d8 <am_hal_clkgen_control+0x12c>)
    d3b4:	6812      	ldr	r2, [r2, #0]
    d3b6:	601a      	str	r2, [r3, #0]
    d3b8:	2809      	cmp	r0, #9
    d3ba:	f200 8089 	bhi.w	d4d0 <am_hal_clkgen_control+0x124>
    d3be:	e8df f000 	tbb	[pc, r0]
    d3c2:	160d      	.short	0x160d
    d3c4:	423a261e 	.word	0x423a261e
    d3c8:	055c544c 	.word	0x055c544c
    d3cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d3d0:	2000      	movs	r0, #0
    d3d2:	6a1a      	ldr	r2, [r3, #32]
    d3d4:	f36f 0200 	bfc	r2, #0, #1
    d3d8:	621a      	str	r2, [r3, #32]
    d3da:	4770      	bx	lr
    d3dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d3e0:	2200      	movs	r2, #0
    d3e2:	2147      	movs	r1, #71	; 0x47
    d3e4:	6159      	str	r1, [r3, #20]
    d3e6:	4610      	mov	r0, r2
    d3e8:	619a      	str	r2, [r3, #24]
    d3ea:	615a      	str	r2, [r3, #20]
    d3ec:	4770      	bx	lr
    d3ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d3f2:	2000      	movs	r0, #0
    d3f4:	899a      	ldrh	r2, [r3, #12]
    d3f6:	f36f 0200 	bfc	r2, #0, #1
    d3fa:	819a      	strh	r2, [r3, #12]
    d3fc:	4770      	bx	lr
    d3fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d402:	2000      	movs	r0, #0
    d404:	899a      	ldrh	r2, [r3, #12]
    d406:	f36f 0241 	bfc	r2, #1, #1
    d40a:	819a      	strh	r2, [r3, #12]
    d40c:	4770      	bx	lr
    d40e:	4a33      	ldr	r2, [pc, #204]	; (d4dc <am_hal_clkgen_control+0x130>)
    d410:	68d3      	ldr	r3, [r2, #12]
    d412:	b2db      	uxtb	r3, r3
    d414:	2b21      	cmp	r3, #33	; 0x21
    d416:	d106      	bne.n	d426 <am_hal_clkgen_control+0x7a>
    d418:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    d41c:	2101      	movs	r1, #1
    d41e:	f361 2309 	bfi	r3, r1, #8, #2
    d422:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    d426:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d42a:	2000      	movs	r0, #0
    d42c:	8993      	ldrh	r3, [r2, #12]
    d42e:	f043 0301 	orr.w	r3, r3, #1
    d432:	8193      	strh	r3, [r2, #12]
    d434:	4770      	bx	lr
    d436:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d43a:	2000      	movs	r0, #0
    d43c:	8993      	ldrh	r3, [r2, #12]
    d43e:	f043 0302 	orr.w	r3, r3, #2
    d442:	8193      	strh	r3, [r2, #12]
    d444:	4770      	bx	lr
    d446:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d44a:	2200      	movs	r2, #0
    d44c:	2047      	movs	r0, #71	; 0x47
    d44e:	2101      	movs	r1, #1
    d450:	6158      	str	r0, [r3, #20]
    d452:	6199      	str	r1, [r3, #24]
    d454:	4610      	mov	r0, r2
    d456:	615a      	str	r2, [r3, #20]
    d458:	4770      	bx	lr
    d45a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d45e:	2000      	movs	r0, #0
    d460:	899a      	ldrh	r2, [r3, #12]
    d462:	f36f 12c7 	bfc	r2, #7, #1
    d466:	819a      	strh	r2, [r3, #12]
    d468:	4770      	bx	lr
    d46a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d46e:	2000      	movs	r0, #0
    d470:	8993      	ldrh	r3, [r2, #12]
    d472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d476:	8193      	strh	r3, [r2, #12]
    d478:	4770      	bx	lr
    d47a:	4a18      	ldr	r2, [pc, #96]	; (d4dc <am_hal_clkgen_control+0x130>)
    d47c:	68d3      	ldr	r3, [r2, #12]
    d47e:	b2db      	uxtb	r3, r3
    d480:	2b21      	cmp	r3, #33	; 0x21
    d482:	d00a      	beq.n	d49a <am_hal_clkgen_control+0xee>
    d484:	b139      	cbz	r1, d496 <am_hal_clkgen_control+0xea>
    d486:	680b      	ldr	r3, [r1, #0]
    d488:	f043 0301 	orr.w	r3, r3, #1
    d48c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d490:	2000      	movs	r0, #0
    d492:	6213      	str	r3, [r2, #32]
    d494:	4770      	bx	lr
    d496:	4b12      	ldr	r3, [pc, #72]	; (d4e0 <am_hal_clkgen_control+0x134>)
    d498:	e7f8      	b.n	d48c <am_hal_clkgen_control+0xe0>
    d49a:	b500      	push	{lr}
    d49c:	b083      	sub	sp, #12
    d49e:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    d4a2:	9101      	str	r1, [sp, #4]
    d4a4:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    d4a8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    d4ac:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    d4b0:	f000 f818 	bl	d4e4 <am_hal_flash_delay>
    d4b4:	9901      	ldr	r1, [sp, #4]
    d4b6:	b149      	cbz	r1, d4cc <am_hal_clkgen_control+0x120>
    d4b8:	680b      	ldr	r3, [r1, #0]
    d4ba:	f043 0301 	orr.w	r3, r3, #1
    d4be:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d4c2:	2000      	movs	r0, #0
    d4c4:	6213      	str	r3, [r2, #32]
    d4c6:	b003      	add	sp, #12
    d4c8:	f85d fb04 	ldr.w	pc, [sp], #4
    d4cc:	4b04      	ldr	r3, [pc, #16]	; (d4e0 <am_hal_clkgen_control+0x134>)
    d4ce:	e7f6      	b.n	d4be <am_hal_clkgen_control+0x112>
    d4d0:	2006      	movs	r0, #6
    d4d2:	4770      	bx	lr
    d4d4:	10001144 	.word	0x10001144
    d4d8:	4ffff000 	.word	0x4ffff000
    d4dc:	40020000 	.word	0x40020000
    d4e0:	0025b801 	.word	0x0025b801

0000d4e4 <am_hal_flash_delay>:
    d4e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d4e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    d4ea:	075b      	lsls	r3, r3, #29
    d4ec:	bf46      	itte	mi
    d4ee:	0040      	lslmi	r0, r0, #1
    d4f0:	230e      	movmi	r3, #14
    d4f2:	230b      	movpl	r3, #11
    d4f4:	4298      	cmp	r0, r3
    d4f6:	d902      	bls.n	d4fe <am_hal_flash_delay+0x1a>
    d4f8:	4a01      	ldr	r2, [pc, #4]	; (d500 <am_hal_flash_delay+0x1c>)
    d4fa:	1ac0      	subs	r0, r0, r3
    d4fc:	4710      	bx	r2
    d4fe:	4770      	bx	lr
    d500:	0800009d 	.word	0x0800009d

0000d504 <am_hal_flash_delay_status_check>:
    d504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d508:	f89d c020 	ldrb.w	ip, [sp, #32]
    d50c:	f8df 805c 	ldr.w	r8, [pc, #92]	; d56c <am_hal_flash_delay_status_check+0x68>
    d510:	4604      	mov	r4, r0
    d512:	460d      	mov	r5, r1
    d514:	4616      	mov	r6, r2
    d516:	461f      	mov	r7, r3
    d518:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    d51c:	f1bc 0f00 	cmp.w	ip, #0
    d520:	d00a      	beq.n	d538 <am_hal_flash_delay_status_check+0x34>
    d522:	e01a      	b.n	d55a <am_hal_flash_delay_status_check+0x56>
    d524:	b1f4      	cbz	r4, d564 <am_hal_flash_delay_status_check+0x60>
    d526:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    d52a:	f013 0f04 	tst.w	r3, #4
    d52e:	bf0c      	ite	eq
    d530:	2005      	moveq	r0, #5
    d532:	2012      	movne	r0, #18
    d534:	3c01      	subs	r4, #1
    d536:	47c0      	blx	r8
    d538:	6828      	ldr	r0, [r5, #0]
    d53a:	4030      	ands	r0, r6
    d53c:	42b8      	cmp	r0, r7
    d53e:	d0f1      	beq.n	d524 <am_hal_flash_delay_status_check+0x20>
    d540:	2000      	movs	r0, #0
    d542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d546:	b16c      	cbz	r4, d564 <am_hal_flash_delay_status_check+0x60>
    d548:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    d54c:	f013 0f04 	tst.w	r3, #4
    d550:	bf0c      	ite	eq
    d552:	2005      	moveq	r0, #5
    d554:	2012      	movne	r0, #18
    d556:	3c01      	subs	r4, #1
    d558:	47c0      	blx	r8
    d55a:	6828      	ldr	r0, [r5, #0]
    d55c:	4030      	ands	r0, r6
    d55e:	42b8      	cmp	r0, r7
    d560:	d1f1      	bne.n	d546 <am_hal_flash_delay_status_check+0x42>
    d562:	e7ed      	b.n	d540 <am_hal_flash_delay_status_check+0x3c>
    d564:	2004      	movs	r0, #4
    d566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d56a:	bf00      	nop
    d56c:	0800009d 	.word	0x0800009d

0000d570 <am_hal_flash_load_ui32>:
    d570:	4b00      	ldr	r3, [pc, #0]	; (d574 <am_hal_flash_load_ui32+0x4>)
    d572:	4718      	bx	r3
    d574:	08000075 	.word	0x08000075

0000d578 <am_hal_flash_store_ui32>:
    d578:	4b01      	ldr	r3, [pc, #4]	; (d580 <am_hal_flash_store_ui32+0x8>)
    d57a:	f043 0301 	orr.w	r3, r3, #1
    d57e:	4718      	bx	r3
    d580:	10001028 	.word	0x10001028

0000d584 <am_hal_gpio_pinconfig>:
    d584:	2831      	cmp	r0, #49	; 0x31
    d586:	f200 80c3 	bhi.w	d710 <am_hal_gpio_pinconfig+0x18c>
    d58a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d58e:	4604      	mov	r4, r0
    d590:	f011 07e0 	ands.w	r7, r1, #224	; 0xe0
    d594:	f001 0007 	and.w	r0, r1, #7
    d598:	b085      	sub	sp, #20
    d59a:	f3c1 03c1 	ubfx	r3, r1, #3, #2
    d59e:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    d5a2:	d00f      	beq.n	d5c4 <am_hal_gpio_pinconfig+0x40>
    d5a4:	f3c1 1642 	ubfx	r6, r1, #5, #3
    d5a8:	1db5      	adds	r5, r6, #6
    d5aa:	f005 0507 	and.w	r5, r5, #7
    d5ae:	2d03      	cmp	r5, #3
    d5b0:	f042 0201 	orr.w	r2, r2, #1
    d5b4:	f240 80ae 	bls.w	d714 <am_hal_gpio_pinconfig+0x190>
    d5b8:	2fc0      	cmp	r7, #192	; 0xc0
    d5ba:	f000 80e1 	beq.w	d780 <am_hal_gpio_pinconfig+0x1fc>
    d5be:	2f20      	cmp	r7, #32
    d5c0:	f000 80e3 	beq.w	d78a <am_hal_gpio_pinconfig+0x206>
    d5c4:	b163      	cbz	r3, d5e0 <am_hal_gpio_pinconfig+0x5c>
    d5c6:	2b01      	cmp	r3, #1
    d5c8:	f000 80d3 	beq.w	d772 <am_hal_gpio_pinconfig+0x1ee>
    d5cc:	2b02      	cmp	r3, #2
    d5ce:	f040 80c9 	bne.w	d764 <am_hal_gpio_pinconfig+0x1e0>
    d5d2:	4b79      	ldr	r3, [pc, #484]	; (d7b8 <am_hal_gpio_pinconfig+0x234>)
    d5d4:	5d1b      	ldrb	r3, [r3, r4]
    d5d6:	075b      	lsls	r3, r3, #29
    d5d8:	f140 80c4 	bpl.w	d764 <am_hal_gpio_pinconfig+0x1e0>
    d5dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    d5e0:	4b76      	ldr	r3, [pc, #472]	; (d7bc <am_hal_gpio_pinconfig+0x238>)
    d5e2:	5d1b      	ldrb	r3, [r3, r4]
    d5e4:	4103      	asrs	r3, r0
    d5e6:	005b      	lsls	r3, r3, #1
    d5e8:	f003 0302 	and.w	r3, r3, #2
    d5ec:	4313      	orrs	r3, r2
    d5ee:	4a74      	ldr	r2, [pc, #464]	; (d7c0 <am_hal_gpio_pinconfig+0x23c>)
    d5f0:	5d12      	ldrb	r2, [r2, r4]
    d5f2:	4282      	cmp	r2, r0
    d5f4:	f000 8099 	beq.w	d72a <am_hal_gpio_pinconfig+0x1a6>
    d5f8:	f3c1 3000 	ubfx	r0, r1, #12, #1
    d5fc:	f3c1 2581 	ubfx	r5, r1, #10, #2
    d600:	f3c1 3280 	ubfx	r2, r1, #14, #1
    d604:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    d608:	0a88      	lsrs	r0, r1, #10
    d60a:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    d60e:	f000 0008 	and.w	r0, r0, #8
    d612:	4302      	orrs	r2, r0
    d614:	f3c1 2007 	ubfx	r0, r1, #8, #8
    d618:	f000 050c 	and.w	r5, r0, #12
    d61c:	2d04      	cmp	r5, #4
    d61e:	f000 80a5 	beq.w	d76c <am_hal_gpio_pinconfig+0x1e8>
    d622:	4d68      	ldr	r5, [pc, #416]	; (d7c4 <am_hal_gpio_pinconfig+0x240>)
    d624:	682d      	ldr	r5, [r5, #0]
    d626:	eba1 0805 	sub.w	r8, r1, r5
    d62a:	fab8 f888 	clz	r8, r8
    d62e:	ea4f 1858 	mov.w	r8, r8, lsr #5
    d632:	f010 0f60 	tst.w	r0, #96	; 0x60
    d636:	bf04      	itt	eq
    d638:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
    d63c:	f360 0200 	bfieq	r2, r0, #0, #1
    d640:	00a0      	lsls	r0, r4, #2
    d642:	f3c1 2101 	ubfx	r1, r1, #8, #2
    d646:	2902      	cmp	r1, #2
    d648:	d05c      	beq.n	d704 <am_hal_gpio_pinconfig+0x180>
    d64a:	2903      	cmp	r1, #3
    d64c:	d058      	beq.n	d700 <am_hal_gpio_pinconfig+0x17c>
    d64e:	2901      	cmp	r1, #1
    d650:	ea4f 01c4 	mov.w	r1, r4, lsl #3
    d654:	bf08      	it	eq
    d656:	f043 0304 	orreq.w	r3, r3, #4
    d65a:	f001 0118 	and.w	r1, r1, #24
    d65e:	2700      	movs	r7, #0
    d660:	f000 001c 	and.w	r0, r0, #28
    d664:	fa02 f600 	lsl.w	r6, r2, r0
    d668:	220f      	movs	r2, #15
    d66a:	4082      	lsls	r2, r0
    d66c:	43d2      	mvns	r2, r2
    d66e:	f04f 09ff 	mov.w	r9, #255	; 0xff
    d672:	fa03 f501 	lsl.w	r5, r3, r1
    d676:	fa09 f901 	lsl.w	r9, r9, r1
    d67a:	9201      	str	r2, [sp, #4]
    d67c:	f000 f8fc 	bl	d878 <am_hal_interrupt_master_disable>
    d680:	f024 0a03 	bic.w	sl, r4, #3
    d684:	ea4f 0b54 	mov.w	fp, r4, lsr #1
    d688:	f10a 4c80 	add.w	ip, sl, #1073741824	; 0x40000000
    d68c:	4b4e      	ldr	r3, [pc, #312]	; (d7c8 <am_hal_gpio_pinconfig+0x244>)
    d68e:	494f      	ldr	r1, [pc, #316]	; (d7cc <am_hal_gpio_pinconfig+0x248>)
    d690:	9a01      	ldr	r2, [sp, #4]
    d692:	9003      	str	r0, [sp, #12]
    d694:	ea6f 0909 	mvn.w	r9, r9
    d698:	f02b 0b03 	bic.w	fp, fp, #3
    d69c:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
    d6a0:	f1b8 0f00 	cmp.w	r8, #0
    d6a4:	d00b      	beq.n	d6be <am_hal_gpio_pinconfig+0x13a>
    d6a6:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
    d6aa:	f004 081f 	and.w	r8, r4, #31
    d6ae:	4848      	ldr	r0, [pc, #288]	; (d7d0 <am_hal_gpio_pinconfig+0x24c>)
    d6b0:	f00e 0e04 	and.w	lr, lr, #4
    d6b4:	2401      	movs	r4, #1
    d6b6:	fa04 f408 	lsl.w	r4, r4, r8
    d6ba:	f84e 4000 	str.w	r4, [lr, r0]
    d6be:	4845      	ldr	r0, [pc, #276]	; (d7d4 <am_hal_gpio_pinconfig+0x250>)
    d6c0:	2473      	movs	r4, #115	; 0x73
    d6c2:	6604      	str	r4, [r0, #96]	; 0x60
    d6c4:	f8dc 4000 	ldr.w	r4, [ip]
    d6c8:	ea04 0409 	and.w	r4, r4, r9
    d6cc:	4325      	orrs	r5, r4
    d6ce:	f8cc 5000 	str.w	r5, [ip]
    d6d2:	f85b 4003 	ldr.w	r4, [fp, r3]
    d6d6:	4022      	ands	r2, r4
    d6d8:	4332      	orrs	r2, r6
    d6da:	f84b 2003 	str.w	r2, [fp, r3]
    d6de:	f85a 3001 	ldr.w	r3, [sl, r1]
    d6e2:	ea03 0909 	and.w	r9, r3, r9
    d6e6:	2400      	movs	r4, #0
    d6e8:	ea49 0707 	orr.w	r7, r9, r7
    d6ec:	f84a 7001 	str.w	r7, [sl, r1]
    d6f0:	6604      	str	r4, [r0, #96]	; 0x60
    d6f2:	9803      	ldr	r0, [sp, #12]
    d6f4:	f000 f8c4 	bl	d880 <am_hal_interrupt_master_set>
    d6f8:	4620      	mov	r0, r4
    d6fa:	b005      	add	sp, #20
    d6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d700:	f043 0304 	orr.w	r3, r3, #4
    d704:	00e1      	lsls	r1, r4, #3
    d706:	f001 0118 	and.w	r1, r1, #24
    d70a:	2701      	movs	r7, #1
    d70c:	408f      	lsls	r7, r1
    d70e:	e7a7      	b.n	d660 <am_hal_gpio_pinconfig+0xdc>
    d710:	2006      	movs	r0, #6
    d712:	4770      	bx	lr
    d714:	4d28      	ldr	r5, [pc, #160]	; (d7b8 <am_hal_gpio_pinconfig+0x234>)
    d716:	5d2d      	ldrb	r5, [r5, r4]
    d718:	3e02      	subs	r6, #2
    d71a:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    d71e:	07ee      	lsls	r6, r5, #31
    d720:	d536      	bpl.n	d790 <am_hal_gpio_pinconfig+0x20c>
    d722:	2b00      	cmp	r3, #0
    d724:	f43f af5c 	beq.w	d5e0 <am_hal_gpio_pinconfig+0x5c>
    d728:	e74d      	b.n	d5c6 <am_hal_gpio_pinconfig+0x42>
    d72a:	f3c1 4202 	ubfx	r2, r1, #16, #3
    d72e:	2a07      	cmp	r2, #7
    d730:	d030      	beq.n	d794 <am_hal_gpio_pinconfig+0x210>
    d732:	4d29      	ldr	r5, [pc, #164]	; (d7d8 <am_hal_gpio_pinconfig+0x254>)
    d734:	f3c1 40c1 	ubfx	r0, r1, #19, #2
    d738:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    d73c:	f815 0024 	ldrb.w	r0, [r5, r4, lsl #2]
    d740:	4290      	cmp	r0, r2
    d742:	d029      	beq.n	d798 <am_hal_gpio_pinconfig+0x214>
    d744:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    d748:	00a0      	lsls	r0, r4, #2
    d74a:	786e      	ldrb	r6, [r5, #1]
    d74c:	4296      	cmp	r6, r2
    d74e:	d02d      	beq.n	d7ac <am_hal_gpio_pinconfig+0x228>
    d750:	78ae      	ldrb	r6, [r5, #2]
    d752:	4296      	cmp	r6, r2
    d754:	d02c      	beq.n	d7b0 <am_hal_gpio_pinconfig+0x22c>
    d756:	78ed      	ldrb	r5, [r5, #3]
    d758:	4295      	cmp	r5, r2
    d75a:	d02b      	beq.n	d7b4 <am_hal_gpio_pinconfig+0x230>
    d75c:	481f      	ldr	r0, [pc, #124]	; (d7dc <am_hal_gpio_pinconfig+0x258>)
    d75e:	b005      	add	sp, #20
    d760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d764:	481e      	ldr	r0, [pc, #120]	; (d7e0 <am_hal_gpio_pinconfig+0x25c>)
    d766:	b005      	add	sp, #20
    d768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d76c:	f04f 0801 	mov.w	r8, #1
    d770:	e75f      	b.n	d632 <am_hal_gpio_pinconfig+0xae>
    d772:	4b11      	ldr	r3, [pc, #68]	; (d7b8 <am_hal_gpio_pinconfig+0x234>)
    d774:	5d1b      	ldrb	r3, [r3, r4]
    d776:	079d      	lsls	r5, r3, #30
    d778:	d5f4      	bpl.n	d764 <am_hal_gpio_pinconfig+0x1e0>
    d77a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    d77e:	e72f      	b.n	d5e0 <am_hal_gpio_pinconfig+0x5c>
    d780:	2c14      	cmp	r4, #20
    d782:	f43f af1f 	beq.w	d5c4 <am_hal_gpio_pinconfig+0x40>
    d786:	4817      	ldr	r0, [pc, #92]	; (d7e4 <am_hal_gpio_pinconfig+0x260>)
    d788:	e7b7      	b.n	d6fa <am_hal_gpio_pinconfig+0x176>
    d78a:	2c14      	cmp	r4, #20
    d78c:	f47f af1a 	bne.w	d5c4 <am_hal_gpio_pinconfig+0x40>
    d790:	4815      	ldr	r0, [pc, #84]	; (d7e8 <am_hal_gpio_pinconfig+0x264>)
    d792:	e7b2      	b.n	d6fa <am_hal_gpio_pinconfig+0x176>
    d794:	4815      	ldr	r0, [pc, #84]	; (d7ec <am_hal_gpio_pinconfig+0x268>)
    d796:	e7b0      	b.n	d6fa <am_hal_gpio_pinconfig+0x176>
    d798:	2200      	movs	r2, #0
    d79a:	00a0      	lsls	r0, r4, #2
    d79c:	0052      	lsls	r2, r2, #1
    d79e:	f3c1 5540 	ubfx	r5, r1, #21, #1
    d7a2:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
    d7a6:	f04f 0800 	mov.w	r8, #0
    d7aa:	e74a      	b.n	d642 <am_hal_gpio_pinconfig+0xbe>
    d7ac:	2201      	movs	r2, #1
    d7ae:	e7f5      	b.n	d79c <am_hal_gpio_pinconfig+0x218>
    d7b0:	2202      	movs	r2, #2
    d7b2:	e7f3      	b.n	d79c <am_hal_gpio_pinconfig+0x218>
    d7b4:	2203      	movs	r2, #3
    d7b6:	e7f1      	b.n	d79c <am_hal_gpio_pinconfig+0x218>
    d7b8:	0000e744 	.word	0x0000e744
    d7bc:	0000e778 	.word	0x0000e778
    d7c0:	0000e874 	.word	0x0000e874
    d7c4:	0000e73c 	.word	0x0000e73c
    d7c8:	40010040 	.word	0x40010040
    d7cc:	400100e0 	.word	0x400100e0
    d7d0:	400100b4 	.word	0x400100b4
    d7d4:	40010000 	.word	0x40010000
    d7d8:	0000e7ac 	.word	0x0000e7ac
    d7dc:	08000104 	.word	0x08000104
    d7e0:	08000102 	.word	0x08000102
    d7e4:	08000101 	.word	0x08000101
    d7e8:	08000100 	.word	0x08000100
    d7ec:	08000103 	.word	0x08000103

0000d7f0 <am_hal_gpio_state_write>:
    d7f0:	2831      	cmp	r0, #49	; 0x31
    d7f2:	d81a      	bhi.n	d82a <am_hal_gpio_state_write+0x3a>
    d7f4:	b570      	push	{r4, r5, r6, lr}
    d7f6:	2905      	cmp	r1, #5
    d7f8:	b082      	sub	sp, #8
    d7fa:	460d      	mov	r5, r1
    d7fc:	d812      	bhi.n	d824 <am_hal_gpio_state_write+0x34>
    d7fe:	f000 031f 	and.w	r3, r0, #31
    d802:	2201      	movs	r2, #1
    d804:	08c0      	lsrs	r0, r0, #3
    d806:	fa02 f603 	lsl.w	r6, r2, r3
    d80a:	f000 0404 	and.w	r4, r0, #4
    d80e:	f000 f833 	bl	d878 <am_hal_interrupt_master_disable>
    d812:	3d01      	subs	r5, #1
    d814:	9001      	str	r0, [sp, #4]
    d816:	2d04      	cmp	r5, #4
    d818:	d821      	bhi.n	d85e <am_hal_gpio_state_write+0x6e>
    d81a:	e8df f005 	tbb	[pc, r5]
    d81e:	1512      	.short	0x1512
    d820:	1d1a      	.short	0x1d1a
    d822:	08          	.byte	0x08
    d823:	00          	.byte	0x00
    d824:	2006      	movs	r0, #6
    d826:	b002      	add	sp, #8
    d828:	bd70      	pop	{r4, r5, r6, pc}
    d82a:	2005      	movs	r0, #5
    d82c:	4770      	bx	lr
    d82e:	4a0d      	ldr	r2, [pc, #52]	; (d864 <am_hal_gpio_state_write+0x74>)
    d830:	58a3      	ldr	r3, [r4, r2]
    d832:	4073      	eors	r3, r6
    d834:	50a3      	str	r3, [r4, r2]
    d836:	9801      	ldr	r0, [sp, #4]
    d838:	f000 f822 	bl	d880 <am_hal_interrupt_master_set>
    d83c:	2000      	movs	r0, #0
    d83e:	b002      	add	sp, #8
    d840:	bd70      	pop	{r4, r5, r6, pc}
    d842:	4b09      	ldr	r3, [pc, #36]	; (d868 <am_hal_gpio_state_write+0x78>)
    d844:	50e6      	str	r6, [r4, r3]
    d846:	e7f6      	b.n	d836 <am_hal_gpio_state_write+0x46>
    d848:	4a08      	ldr	r2, [pc, #32]	; (d86c <am_hal_gpio_state_write+0x7c>)
    d84a:	58a3      	ldr	r3, [r4, r2]
    d84c:	4073      	eors	r3, r6
    d84e:	50a3      	str	r3, [r4, r2]
    d850:	e7f1      	b.n	d836 <am_hal_gpio_state_write+0x46>
    d852:	4b04      	ldr	r3, [pc, #16]	; (d864 <am_hal_gpio_state_write+0x74>)
    d854:	50e6      	str	r6, [r4, r3]
    d856:	e7ee      	b.n	d836 <am_hal_gpio_state_write+0x46>
    d858:	4b05      	ldr	r3, [pc, #20]	; (d870 <am_hal_gpio_state_write+0x80>)
    d85a:	50e6      	str	r6, [r4, r3]
    d85c:	e7eb      	b.n	d836 <am_hal_gpio_state_write+0x46>
    d85e:	4b05      	ldr	r3, [pc, #20]	; (d874 <am_hal_gpio_state_write+0x84>)
    d860:	50e6      	str	r6, [r4, r3]
    d862:	e7e8      	b.n	d836 <am_hal_gpio_state_write+0x46>
    d864:	400100b4 	.word	0x400100b4
    d868:	40010090 	.word	0x40010090
    d86c:	40010088 	.word	0x40010088
    d870:	400100a8 	.word	0x400100a8
    d874:	40010098 	.word	0x40010098

0000d878 <am_hal_interrupt_master_disable>:
    d878:	f3ef 8010 	mrs	r0, PRIMASK
    d87c:	b672      	cpsid	i
    d87e:	4770      	bx	lr

0000d880 <am_hal_interrupt_master_set>:
    d880:	f380 8810 	msr	PRIMASK, r0
    d884:	4770      	bx	lr
    d886:	bf00      	nop

0000d888 <am_hal_mcuctrl_info_get>:
    d888:	2900      	cmp	r1, #0
    d88a:	f000 808f 	beq.w	d9ac <am_hal_mcuctrl_info_get+0x124>
    d88e:	2801      	cmp	r0, #1
    d890:	b430      	push	{r4, r5}
    d892:	d006      	beq.n	d8a2 <am_hal_mcuctrl_info_get+0x1a>
    d894:	2802      	cmp	r0, #2
    d896:	d06d      	beq.n	d974 <am_hal_mcuctrl_info_get+0xec>
    d898:	2800      	cmp	r0, #0
    d89a:	d055      	beq.n	d948 <am_hal_mcuctrl_info_get+0xc0>
    d89c:	2006      	movs	r0, #6
    d89e:	bc30      	pop	{r4, r5}
    d8a0:	4770      	bx	lr
    d8a2:	4a43      	ldr	r2, [pc, #268]	; (d9b0 <am_hal_mcuctrl_info_get+0x128>)
    d8a4:	4843      	ldr	r0, [pc, #268]	; (d9b4 <am_hal_mcuctrl_info_get+0x12c>)
    d8a6:	6813      	ldr	r3, [r2, #0]
    d8a8:	600b      	str	r3, [r1, #0]
    d8aa:	6854      	ldr	r4, [r2, #4]
    d8ac:	604c      	str	r4, [r1, #4]
    d8ae:	6894      	ldr	r4, [r2, #8]
    d8b0:	608c      	str	r4, [r1, #8]
    d8b2:	68d4      	ldr	r4, [r2, #12]
    d8b4:	60cc      	str	r4, [r1, #12]
    d8b6:	f3c3 5503 	ubfx	r5, r3, #20, #4
    d8ba:	6914      	ldr	r4, [r2, #16]
    d8bc:	610c      	str	r4, [r1, #16]
    d8be:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    d8c2:	4c3d      	ldr	r4, [pc, #244]	; (d9b8 <am_hal_mcuctrl_info_get+0x130>)
    d8c4:	6950      	ldr	r0, [r2, #20]
    d8c6:	6148      	str	r0, [r1, #20]
    d8c8:	f003 0201 	and.w	r2, r3, #1
    d8cc:	f3c3 4303 	ubfx	r3, r3, #16, #4
    d8d0:	e9c1 2506 	strd	r2, r5, [r1, #24]
    d8d4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    d8d8:	4a38      	ldr	r2, [pc, #224]	; (d9bc <am_hal_mcuctrl_info_get+0x134>)
    d8da:	620b      	str	r3, [r1, #32]
    d8dc:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    d8e0:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    d8e4:	b2db      	uxtb	r3, r3
    d8e6:	f000 000f 	and.w	r0, r0, #15
    d8ea:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    d8ee:	624b      	str	r3, [r1, #36]	; 0x24
    d8f0:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    d8f4:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
    d8f8:	f3c3 1303 	ubfx	r3, r3, #4, #4
    d8fc:	f000 000f 	and.w	r0, r0, #15
    d900:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
    d904:	628b      	str	r3, [r1, #40]	; 0x28
    d906:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    d90a:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
    d90e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    d912:	f3c0 1003 	ubfx	r0, r0, #4, #4
    d916:	4303      	orrs	r3, r0
    d918:	62cb      	str	r3, [r1, #44]	; 0x2c
    d91a:	f8d2 40fc 	ldr.w	r4, [r2, #252]	; 0xfc
    d91e:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    d922:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    d926:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    d92a:	b2db      	uxtb	r3, r3
    d92c:	041b      	lsls	r3, r3, #16
    d92e:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    d932:	fa5f fc82 	uxtb.w	ip, r2
    d936:	ea43 030c 	orr.w	r3, r3, ip
    d93a:	b2c2      	uxtb	r2, r0
    d93c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d940:	630b      	str	r3, [r1, #48]	; 0x30
    d942:	2000      	movs	r0, #0
    d944:	bc30      	pop	{r4, r5}
    d946:	4770      	bx	lr
    d948:	4a19      	ldr	r2, [pc, #100]	; (d9b0 <am_hal_mcuctrl_info_get+0x128>)
    d94a:	6993      	ldr	r3, [r2, #24]
    d94c:	f3c3 1480 	ubfx	r4, r3, #6, #1
    d950:	700c      	strb	r4, [r1, #0]
    d952:	f8d2 41a0 	ldr.w	r4, [r2, #416]	; 0x1a0
    d956:	f3c3 0380 	ubfx	r3, r3, #2, #1
    d95a:	704b      	strb	r3, [r1, #1]
    d95c:	f3c4 6381 	ubfx	r3, r4, #26, #2
    d960:	710b      	strb	r3, [r1, #4]
    d962:	6953      	ldr	r3, [r2, #20]
    d964:	f3c3 0240 	ubfx	r2, r3, #1, #1
    d968:	f003 0301 	and.w	r3, r3, #1
    d96c:	bc30      	pop	{r4, r5}
    d96e:	708a      	strb	r2, [r1, #2]
    d970:	70cb      	strb	r3, [r1, #3]
    d972:	4770      	bx	lr
    d974:	4a0e      	ldr	r2, [pc, #56]	; (d9b0 <am_hal_mcuctrl_info_get+0x128>)
    d976:	6848      	ldr	r0, [r1, #4]
    d978:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    d97c:	f003 0401 	and.w	r4, r3, #1
    d980:	700c      	strb	r4, [r1, #0]
    d982:	f3c3 0440 	ubfx	r4, r3, #1, #1
    d986:	720c      	strb	r4, [r1, #8]
    d988:	f8d2 41c4 	ldr.w	r4, [r2, #452]	; 0x1c4
    d98c:	60cc      	str	r4, [r1, #12]
    d98e:	f8d2 41c0 	ldr.w	r4, [r2, #448]	; 0x1c0
    d992:	4320      	orrs	r0, r4
    d994:	f3c3 0380 	ubfx	r3, r3, #2, #1
    d998:	6048      	str	r0, [r1, #4]
    d99a:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    d99e:	740b      	strb	r3, [r1, #16]
    d9a0:	694b      	ldr	r3, [r1, #20]
    d9a2:	4313      	orrs	r3, r2
    d9a4:	2000      	movs	r0, #0
    d9a6:	bc30      	pop	{r4, r5}
    d9a8:	614b      	str	r3, [r1, #20]
    d9aa:	4770      	bx	lr
    d9ac:	2006      	movs	r0, #6
    d9ae:	4770      	bx	lr
    d9b0:	40020000 	.word	0x40020000
    d9b4:	0000e8a8 	.word	0x0000e8a8
    d9b8:	0000e8e8 	.word	0x0000e8e8
    d9bc:	f0000f00 	.word	0xf0000f00

0000d9c0 <am_hal_pwrctrl_periph_enable>:
    d9c0:	b570      	push	{r4, r5, r6, lr}
    d9c2:	b082      	sub	sp, #8
    d9c4:	4604      	mov	r4, r0
    d9c6:	f7ff ff57 	bl	d878 <am_hal_interrupt_master_disable>
    d9ca:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    d9ce:	4e0f      	ldr	r6, [pc, #60]	; (da0c <am_hal_pwrctrl_periph_enable+0x4c>)
    d9d0:	4d0f      	ldr	r5, [pc, #60]	; (da10 <am_hal_pwrctrl_periph_enable+0x50>)
    d9d2:	9001      	str	r0, [sp, #4]
    d9d4:	00a4      	lsls	r4, r4, #2
    d9d6:	68b3      	ldr	r3, [r6, #8]
    d9d8:	592a      	ldr	r2, [r5, r4]
    d9da:	4313      	orrs	r3, r2
    d9dc:	60b3      	str	r3, [r6, #8]
    d9de:	9801      	ldr	r0, [sp, #4]
    d9e0:	442c      	add	r4, r5
    d9e2:	f7ff ff4d 	bl	d880 <am_hal_interrupt_master_set>
    d9e6:	20a0      	movs	r0, #160	; 0xa0
    d9e8:	f7ff fd7c 	bl	d4e4 <am_hal_flash_delay>
    d9ec:	69b3      	ldr	r3, [r6, #24]
    d9ee:	6864      	ldr	r4, [r4, #4]
    d9f0:	4223      	tst	r3, r4
    d9f2:	d103      	bne.n	d9fc <am_hal_pwrctrl_periph_enable+0x3c>
    d9f4:	20a0      	movs	r0, #160	; 0xa0
    d9f6:	f7ff fd75 	bl	d4e4 <am_hal_flash_delay>
    d9fa:	69b3      	ldr	r3, [r6, #24]
    d9fc:	4b03      	ldr	r3, [pc, #12]	; (da0c <am_hal_pwrctrl_periph_enable+0x4c>)
    d9fe:	699b      	ldr	r3, [r3, #24]
    da00:	4223      	tst	r3, r4
    da02:	bf0c      	ite	eq
    da04:	2001      	moveq	r0, #1
    da06:	2000      	movne	r0, #0
    da08:	b002      	add	sp, #8
    da0a:	bd70      	pop	{r4, r5, r6, pc}
    da0c:	40021000 	.word	0x40021000
    da10:	0000ead8 	.word	0x0000ead8

0000da14 <am_hal_pwrctrl_periph_disable>:
    da14:	b570      	push	{r4, r5, r6, lr}
    da16:	b082      	sub	sp, #8
    da18:	4604      	mov	r4, r0
    da1a:	f7ff ff2d 	bl	d878 <am_hal_interrupt_master_disable>
    da1e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    da22:	4e10      	ldr	r6, [pc, #64]	; (da64 <am_hal_pwrctrl_periph_disable+0x50>)
    da24:	4d10      	ldr	r5, [pc, #64]	; (da68 <am_hal_pwrctrl_periph_disable+0x54>)
    da26:	9001      	str	r0, [sp, #4]
    da28:	00a4      	lsls	r4, r4, #2
    da2a:	68b3      	ldr	r3, [r6, #8]
    da2c:	592a      	ldr	r2, [r5, r4]
    da2e:	ea23 0302 	bic.w	r3, r3, r2
    da32:	60b3      	str	r3, [r6, #8]
    da34:	9801      	ldr	r0, [sp, #4]
    da36:	442c      	add	r4, r5
    da38:	f7ff ff22 	bl	d880 <am_hal_interrupt_master_set>
    da3c:	20a0      	movs	r0, #160	; 0xa0
    da3e:	f7ff fd51 	bl	d4e4 <am_hal_flash_delay>
    da42:	69b3      	ldr	r3, [r6, #24]
    da44:	6864      	ldr	r4, [r4, #4]
    da46:	4223      	tst	r3, r4
    da48:	d003      	beq.n	da52 <am_hal_pwrctrl_periph_disable+0x3e>
    da4a:	20a0      	movs	r0, #160	; 0xa0
    da4c:	f7ff fd4a 	bl	d4e4 <am_hal_flash_delay>
    da50:	69b3      	ldr	r3, [r6, #24]
    da52:	4b04      	ldr	r3, [pc, #16]	; (da64 <am_hal_pwrctrl_periph_disable+0x50>)
    da54:	699b      	ldr	r3, [r3, #24]
    da56:	4223      	tst	r3, r4
    da58:	bf14      	ite	ne
    da5a:	2001      	movne	r0, #1
    da5c:	2000      	moveq	r0, #0
    da5e:	b002      	add	sp, #8
    da60:	bd70      	pop	{r4, r5, r6, pc}
    da62:	bf00      	nop
    da64:	40021000 	.word	0x40021000
    da68:	0000ead8 	.word	0x0000ead8

0000da6c <am_hal_pwrctrl_memory_enable>:
    da6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    da70:	4d22      	ldr	r5, [pc, #136]	; (dafc <am_hal_pwrctrl_memory_enable+0x90>)
    da72:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    da76:	eb05 09c3 	add.w	r9, r5, r3, lsl #3
    da7a:	f855 8033 	ldr.w	r8, [r5, r3, lsl #3]
    da7e:	f8d9 6010 	ldr.w	r6, [r9, #16]
    da82:	f1b8 3fff 	cmp.w	r8, #4294967295
    da86:	4604      	mov	r4, r0
    da88:	ea4f 0740 	mov.w	r7, r0, lsl #1
    da8c:	d120      	bne.n	dad0 <am_hal_pwrctrl_memory_enable+0x64>
    da8e:	f8df 9070 	ldr.w	r9, [pc, #112]	; db00 <am_hal_pwrctrl_memory_enable+0x94>
    da92:	f8d9 3010 	ldr.w	r3, [r9, #16]
    da96:	443c      	add	r4, r7
    da98:	ea43 0308 	orr.w	r3, r3, r8
    da9c:	f8c9 3010 	str.w	r3, [r9, #16]
    daa0:	20a0      	movs	r0, #160	; 0xa0
    daa2:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
    daa6:	f7ff fd1d 	bl	d4e4 <am_hal_flash_delay>
    daaa:	f8d9 3014 	ldr.w	r3, [r9, #20]
    daae:	686c      	ldr	r4, [r5, #4]
    dab0:	4033      	ands	r3, r6
    dab2:	42a3      	cmp	r3, r4
    dab4:	d004      	beq.n	dac0 <am_hal_pwrctrl_memory_enable+0x54>
    dab6:	20a0      	movs	r0, #160	; 0xa0
    dab8:	f7ff fd14 	bl	d4e4 <am_hal_flash_delay>
    dabc:	f8d9 3014 	ldr.w	r3, [r9, #20]
    dac0:	4b0f      	ldr	r3, [pc, #60]	; (db00 <am_hal_pwrctrl_memory_enable+0x94>)
    dac2:	6958      	ldr	r0, [r3, #20]
    dac4:	4030      	ands	r0, r6
    dac6:	1b00      	subs	r0, r0, r4
    dac8:	bf18      	it	ne
    daca:	2001      	movne	r0, #1
    dacc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dad0:	f8d9 300c 	ldr.w	r3, [r9, #12]
    dad4:	4a0a      	ldr	r2, [pc, #40]	; (db00 <am_hal_pwrctrl_memory_enable+0x94>)
    dad6:	ea68 0303 	orn	r3, r8, r3
    dada:	6911      	ldr	r1, [r2, #16]
    dadc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    dae0:	f043 0301 	orr.w	r3, r3, #1
    dae4:	400b      	ands	r3, r1
    dae6:	2010      	movs	r0, #16
    dae8:	6113      	str	r3, [r2, #16]
    daea:	f7ff fcfb 	bl	d4e4 <am_hal_flash_delay>
    daee:	f1b8 0f00 	cmp.w	r8, #0
    daf2:	d1cc      	bne.n	da8e <am_hal_pwrctrl_memory_enable+0x22>
    daf4:	f8d9 4004 	ldr.w	r4, [r9, #4]
    daf8:	e7e2      	b.n	dac0 <am_hal_pwrctrl_memory_enable+0x54>
    dafa:	bf00      	nop
    dafc:	0000e928 	.word	0x0000e928
    db00:	40021000 	.word	0x40021000

0000db04 <am_hal_pwrctrl_low_power_init>:
    db04:	b530      	push	{r4, r5, lr}
    db06:	4b69      	ldr	r3, [pc, #420]	; (dcac <am_hal_pwrctrl_low_power_init+0x1a8>)
    db08:	681a      	ldr	r2, [r3, #0]
    db0a:	b085      	sub	sp, #20
    db0c:	b912      	cbnz	r2, db14 <am_hal_pwrctrl_low_power_init+0x10>
    db0e:	4a68      	ldr	r2, [pc, #416]	; (dcb0 <am_hal_pwrctrl_low_power_init+0x1ac>)
    db10:	6812      	ldr	r2, [r2, #0]
    db12:	601a      	str	r2, [r3, #0]
    db14:	4b67      	ldr	r3, [pc, #412]	; (dcb4 <am_hal_pwrctrl_low_power_init+0x1b0>)
    db16:	68db      	ldr	r3, [r3, #12]
    db18:	b2db      	uxtb	r3, r3
    db1a:	2b12      	cmp	r3, #18
    db1c:	d104      	bne.n	db28 <am_hal_pwrctrl_low_power_init+0x24>
    db1e:	4c66      	ldr	r4, [pc, #408]	; (dcb8 <am_hal_pwrctrl_low_power_init+0x1b4>)
    db20:	6863      	ldr	r3, [r4, #4]
    db22:	07d8      	lsls	r0, r3, #31
    db24:	f100 8088 	bmi.w	dc38 <am_hal_pwrctrl_low_power_init+0x134>
    db28:	4b62      	ldr	r3, [pc, #392]	; (dcb4 <am_hal_pwrctrl_low_power_init+0x1b0>)
    db2a:	68da      	ldr	r2, [r3, #12]
    db2c:	b2d2      	uxtb	r2, r2
    db2e:	2a20      	cmp	r2, #32
    db30:	d934      	bls.n	db9c <am_hal_pwrctrl_low_power_init+0x98>
    db32:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
    db36:	2002      	movs	r0, #2
    db38:	f360 4213 	bfi	r2, r0, #16, #4
    db3c:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    db40:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
    db44:	2203      	movs	r2, #3
    db46:	f362 5117 	bfi	r1, r2, #20, #4
    db4a:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
    db4e:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    db52:	2405      	movs	r4, #5
    db54:	f364 0103 	bfi	r1, r4, #0, #4
    db58:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    db5c:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    db60:	f360 1107 	bfi	r1, r0, #4, #4
    db64:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    db68:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    db6c:	2406      	movs	r4, #6
    db6e:	f364 210b 	bfi	r1, r4, #8, #4
    db72:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    db76:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    db7a:	2001      	movs	r0, #1
    db7c:	f360 310f 	bfi	r1, r0, #12, #4
    db80:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    db84:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    db88:	f362 61de 	bfi	r1, r2, #27, #4
    db8c:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    db90:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
    db94:	f362 0103 	bfi	r1, r2, #0, #4
    db98:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
    db9c:	4a45      	ldr	r2, [pc, #276]	; (dcb4 <am_hal_pwrctrl_low_power_init+0x1b0>)
    db9e:	68d3      	ldr	r3, [r2, #12]
    dba0:	b2db      	uxtb	r3, r3
    dba2:	2b11      	cmp	r3, #17
    dba4:	d905      	bls.n	dbb2 <am_hal_pwrctrl_low_power_init+0xae>
    dba6:	f8d2 335c 	ldr.w	r3, [r2, #860]	; 0x35c
    dbaa:	f36f 6318 	bfc	r3, #24, #1
    dbae:	f8c2 335c 	str.w	r3, [r2, #860]	; 0x35c
    dbb2:	2100      	movs	r1, #0
    dbb4:	200c      	movs	r0, #12
    dbb6:	f7ff fa7f 	bl	d0b8 <am_hal_cachectrl_control>
    dbba:	4b3f      	ldr	r3, [pc, #252]	; (dcb8 <am_hal_pwrctrl_low_power_init+0x1b4>)
    dbbc:	699b      	ldr	r3, [r3, #24]
    dbbe:	f3c3 2500 	ubfx	r5, r3, #8, #1
    dbc2:	05db      	lsls	r3, r3, #23
    dbc4:	d420      	bmi.n	dc08 <am_hal_pwrctrl_low_power_init+0x104>
    dbc6:	4c3b      	ldr	r4, [pc, #236]	; (dcb4 <am_hal_pwrctrl_low_power_init+0x1b0>)
    dbc8:	68e3      	ldr	r3, [r4, #12]
    dbca:	b2db      	uxtb	r3, r3
    dbcc:	2b11      	cmp	r3, #17
    dbce:	d84e      	bhi.n	dc6e <am_hal_pwrctrl_low_power_init+0x16a>
    dbd0:	4c38      	ldr	r4, [pc, #224]	; (dcb4 <am_hal_pwrctrl_low_power_init+0x1b0>)
    dbd2:	493a      	ldr	r1, [pc, #232]	; (dcbc <am_hal_pwrctrl_low_power_init+0x1b8>)
    dbd4:	7e22      	ldrb	r2, [r4, #24]
    dbd6:	2001      	movs	r0, #1
    dbd8:	4302      	orrs	r2, r0
    dbda:	2307      	movs	r3, #7
    dbdc:	7622      	strb	r2, [r4, #24]
    dbde:	9000      	str	r0, [sp, #0]
    dbe0:	461a      	mov	r2, r3
    dbe2:	f242 7010 	movw	r0, #10000	; 0x2710
    dbe6:	f7ff fc8d 	bl	d504 <am_hal_flash_delay_status_check>
    dbea:	2800      	cmp	r0, #0
    dbec:	d15a      	bne.n	dca4 <am_hal_pwrctrl_low_power_init+0x1a0>
    dbee:	4b32      	ldr	r3, [pc, #200]	; (dcb8 <am_hal_pwrctrl_low_power_init+0x1b4>)
    dbf0:	681a      	ldr	r2, [r3, #0]
    dbf2:	f042 0201 	orr.w	r2, r2, #1
    dbf6:	601a      	str	r2, [r3, #0]
    dbf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    dbfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    dbfe:	625a      	str	r2, [r3, #36]	; 0x24
    dc00:	68e3      	ldr	r3, [r4, #12]
    dc02:	b2db      	uxtb	r3, r3
    dc04:	2b11      	cmp	r3, #17
    dc06:	d002      	beq.n	dc0e <am_hal_pwrctrl_low_power_init+0x10a>
    dc08:	2000      	movs	r0, #0
    dc0a:	b005      	add	sp, #20
    dc0c:	bd30      	pop	{r4, r5, pc}
    dc0e:	f8d4 335c 	ldr.w	r3, [r4, #860]	; 0x35c
    dc12:	f360 5356 	bfi	r3, r0, #21, #2
    dc16:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
    dc1a:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    dc1e:	220f      	movs	r2, #15
    dc20:	f362 138b 	bfi	r3, r2, #6, #6
    dc24:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    dc28:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    dc2c:	f362 0305 	bfi	r3, r2, #0, #6
    dc30:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    dc34:	b005      	add	sp, #20
    dc36:	bd30      	pop	{r4, r5, pc}
    dc38:	f7ff fe1e 	bl	d878 <am_hal_interrupt_master_disable>
    dc3c:	9002      	str	r0, [sp, #8]
    dc3e:	68a3      	ldr	r3, [r4, #8]
    dc40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    dc44:	60a3      	str	r3, [r4, #8]
    dc46:	9802      	ldr	r0, [sp, #8]
    dc48:	f7ff fe1a 	bl	d880 <am_hal_interrupt_master_set>
    dc4c:	20a0      	movs	r0, #160	; 0xa0
    dc4e:	f7ff fc49 	bl	d4e4 <am_hal_flash_delay>
    dc52:	69a3      	ldr	r3, [r4, #24]
    dc54:	0619      	lsls	r1, r3, #24
    dc56:	d403      	bmi.n	dc60 <am_hal_pwrctrl_low_power_init+0x15c>
    dc58:	20a0      	movs	r0, #160	; 0xa0
    dc5a:	f7ff fc43 	bl	d4e4 <am_hal_flash_delay>
    dc5e:	69a3      	ldr	r3, [r4, #24]
    dc60:	4b15      	ldr	r3, [pc, #84]	; (dcb8 <am_hal_pwrctrl_low_power_init+0x1b4>)
    dc62:	699b      	ldr	r3, [r3, #24]
    dc64:	061a      	lsls	r2, r3, #24
    dc66:	f53f af5f 	bmi.w	db28 <am_hal_pwrctrl_low_power_init+0x24>
    dc6a:	2001      	movs	r0, #1
    dc6c:	e7cd      	b.n	dc0a <am_hal_pwrctrl_low_power_init+0x106>
    dc6e:	f7ff fe03 	bl	d878 <am_hal_interrupt_master_disable>
    dc72:	9003      	str	r0, [sp, #12]
    dc74:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    dc78:	2219      	movs	r2, #25
    dc7a:	f362 138b 	bfi	r3, r2, #6, #6
    dc7e:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    dc82:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
    dc86:	210c      	movs	r1, #12
    dc88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dc8c:	f361 0205 	bfi	r2, r1, #0, #6
    dc90:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
    dc94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    dc96:	f365 5296 	bfi	r2, r5, #22, #1
    dc9a:	63da      	str	r2, [r3, #60]	; 0x3c
    dc9c:	9803      	ldr	r0, [sp, #12]
    dc9e:	f7ff fdef 	bl	d880 <am_hal_interrupt_master_set>
    dca2:	e795      	b.n	dbd0 <am_hal_pwrctrl_low_power_init+0xcc>
    dca4:	2004      	movs	r0, #4
    dca6:	b005      	add	sp, #20
    dca8:	bd30      	pop	{r4, r5, pc}
    dcaa:	bf00      	nop
    dcac:	10001144 	.word	0x10001144
    dcb0:	4ffff000 	.word	0x4ffff000
    dcb4:	40020000 	.word	0x40020000
    dcb8:	40021000 	.word	0x40021000
    dcbc:	40020018 	.word	0x40020018

0000dcc0 <am_hal_rtc_osc_disable>:
    dcc0:	4a03      	ldr	r2, [pc, #12]	; (dcd0 <am_hal_rtc_osc_disable+0x10>)
    dcc2:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    dcc6:	f043 0310 	orr.w	r3, r3, #16
    dcca:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    dcce:	4770      	bx	lr
    dcd0:	40004200 	.word	0x40004200

0000dcd4 <am_hal_uart_initialize>:
    dcd4:	2801      	cmp	r0, #1
    dcd6:	d81a      	bhi.n	dd0e <am_hal_uart_initialize+0x3a>
    dcd8:	b1e9      	cbz	r1, dd16 <am_hal_uart_initialize+0x42>
    dcda:	b530      	push	{r4, r5, lr}
    dcdc:	2264      	movs	r2, #100	; 0x64
    dcde:	4d0f      	ldr	r5, [pc, #60]	; (dd1c <am_hal_uart_initialize+0x48>)
    dce0:	fb00 f202 	mul.w	r2, r0, r2
    dce4:	18ac      	adds	r4, r5, r2
    dce6:	78e3      	ldrb	r3, [r4, #3]
    dce8:	f3c3 0e00 	ubfx	lr, r3, #0, #1
    dcec:	f013 0301 	ands.w	r3, r3, #1
    dcf0:	d10f      	bne.n	dd12 <am_hal_uart_initialize+0x3e>
    dcf2:	6260      	str	r0, [r4, #36]	; 0x24
    dcf4:	58a8      	ldr	r0, [r5, r2]
    dcf6:	f000 4c7e 	and.w	ip, r0, #4261412864	; 0xfe000000
    dcfa:	4809      	ldr	r0, [pc, #36]	; (dd20 <am_hal_uart_initialize+0x4c>)
    dcfc:	ea4c 0000 	orr.w	r0, ip, r0
    dd00:	50a8      	str	r0, [r5, r2]
    dd02:	f884 e004 	strb.w	lr, [r4, #4]
    dd06:	6623      	str	r3, [r4, #96]	; 0x60
    dd08:	4618      	mov	r0, r3
    dd0a:	600c      	str	r4, [r1, #0]
    dd0c:	bd30      	pop	{r4, r5, pc}
    dd0e:	2005      	movs	r0, #5
    dd10:	4770      	bx	lr
    dd12:	2007      	movs	r0, #7
    dd14:	bd30      	pop	{r4, r5, pc}
    dd16:	2006      	movs	r0, #6
    dd18:	4770      	bx	lr
    dd1a:	bf00      	nop
    dd1c:	10001148 	.word	0x10001148
    dd20:	01ea9e06 	.word	0x01ea9e06

0000dd24 <am_hal_uart_deinitialize>:
    dd24:	b170      	cbz	r0, dd44 <am_hal_uart_deinitialize+0x20>
    dd26:	6803      	ldr	r3, [r0, #0]
    dd28:	4a07      	ldr	r2, [pc, #28]	; (dd48 <am_hal_uart_deinitialize+0x24>)
    dd2a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dd2e:	4293      	cmp	r3, r2
    dd30:	d108      	bne.n	dd44 <am_hal_uart_deinitialize+0x20>
    dd32:	78c2      	ldrb	r2, [r0, #3]
    dd34:	2300      	movs	r3, #0
    dd36:	f36f 0200 	bfc	r2, #0, #1
    dd3a:	70c2      	strb	r2, [r0, #3]
    dd3c:	6243      	str	r3, [r0, #36]	; 0x24
    dd3e:	7103      	strb	r3, [r0, #4]
    dd40:	4618      	mov	r0, r3
    dd42:	4770      	bx	lr
    dd44:	2002      	movs	r0, #2
    dd46:	4770      	bx	lr
    dd48:	01ea9e06 	.word	0x01ea9e06

0000dd4c <am_hal_uart_power_control>:
    dd4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    dd4e:	4604      	mov	r4, r0
    dd50:	6800      	ldr	r0, [r0, #0]
    dd52:	4b39      	ldr	r3, [pc, #228]	; (de38 <am_hal_uart_power_control+0xec>)
    dd54:	f020 467e 	bic.w	r6, r0, #4261412864	; 0xfe000000
    dd58:	429e      	cmp	r6, r3
    dd5a:	b085      	sub	sp, #20
    dd5c:	d13f      	bne.n	ddde <am_hal_uart_power_control+0x92>
    dd5e:	6a65      	ldr	r5, [r4, #36]	; 0x24
    dd60:	f105 0008 	add.w	r0, r5, #8
    dd64:	b2c7      	uxtb	r7, r0
    dd66:	b189      	cbz	r1, dd8c <am_hal_uart_power_control+0x40>
    dd68:	3901      	subs	r1, #1
    dd6a:	2901      	cmp	r1, #1
    dd6c:	d834      	bhi.n	ddd8 <am_hal_uart_power_control+0x8c>
    dd6e:	2a00      	cmp	r2, #0
    dd70:	d138      	bne.n	dde4 <am_hal_uart_power_control+0x98>
    dd72:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    dd76:	351c      	adds	r5, #28
    dd78:	032d      	lsls	r5, r5, #12
    dd7a:	f04f 33ff 	mov.w	r3, #4294967295
    dd7e:	646b      	str	r3, [r5, #68]	; 0x44
    dd80:	4638      	mov	r0, r7
    dd82:	f7ff fe47 	bl	da14 <am_hal_pwrctrl_periph_disable>
    dd86:	2000      	movs	r0, #0
    dd88:	b005      	add	sp, #20
    dd8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dd8c:	2a00      	cmp	r2, #0
    dd8e:	d04a      	beq.n	de26 <am_hal_uart_power_control+0xda>
    dd90:	7923      	ldrb	r3, [r4, #4]
    dd92:	2b00      	cmp	r3, #0
    dd94:	d04e      	beq.n	de34 <am_hal_uart_power_control+0xe8>
    dd96:	4638      	mov	r0, r7
    dd98:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    dd9c:	9101      	str	r1, [sp, #4]
    dd9e:	351c      	adds	r5, #28
    dda0:	f7ff fe0e 	bl	d9c0 <am_hal_pwrctrl_periph_enable>
    dda4:	f7ff fd68 	bl	d878 <am_hal_interrupt_master_disable>
    dda8:	032d      	lsls	r5, r5, #12
    ddaa:	68a3      	ldr	r3, [r4, #8]
    ddac:	9002      	str	r0, [sp, #8]
    ddae:	622b      	str	r3, [r5, #32]
    ddb0:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    ddb4:	626a      	str	r2, [r5, #36]	; 0x24
    ddb6:	62ab      	str	r3, [r5, #40]	; 0x28
    ddb8:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
    ddbc:	62ea      	str	r2, [r5, #44]	; 0x2c
    ddbe:	632b      	str	r3, [r5, #48]	; 0x30
    ddc0:	e9d4 2307 	ldrd	r2, r3, [r4, #28]
    ddc4:	9901      	ldr	r1, [sp, #4]
    ddc6:	636a      	str	r2, [r5, #52]	; 0x34
    ddc8:	63ab      	str	r3, [r5, #56]	; 0x38
    ddca:	9802      	ldr	r0, [sp, #8]
    ddcc:	7121      	strb	r1, [r4, #4]
    ddce:	f7ff fd57 	bl	d880 <am_hal_interrupt_master_set>
    ddd2:	9901      	ldr	r1, [sp, #4]
    ddd4:	4608      	mov	r0, r1
    ddd6:	e000      	b.n	ddda <am_hal_uart_power_control+0x8e>
    ddd8:	2006      	movs	r0, #6
    ddda:	b005      	add	sp, #20
    dddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ddde:	2002      	movs	r0, #2
    dde0:	b005      	add	sp, #20
    dde2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dde4:	f7ff fd48 	bl	d878 <am_hal_interrupt_master_disable>
    dde8:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    ddec:	351c      	adds	r5, #28
    ddee:	032d      	lsls	r5, r5, #12
    ddf0:	9003      	str	r0, [sp, #12]
    ddf2:	6a2b      	ldr	r3, [r5, #32]
    ddf4:	60a3      	str	r3, [r4, #8]
    ddf6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ddf8:	60e3      	str	r3, [r4, #12]
    ddfa:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ddfc:	6123      	str	r3, [r4, #16]
    ddfe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    de00:	6163      	str	r3, [r4, #20]
    de02:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    de04:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    de06:	61a3      	str	r3, [r4, #24]
    de08:	6bab      	ldr	r3, [r5, #56]	; 0x38
    de0a:	61e2      	str	r2, [r4, #28]
    de0c:	2201      	movs	r2, #1
    de0e:	6223      	str	r3, [r4, #32]
    de10:	9803      	ldr	r0, [sp, #12]
    de12:	7122      	strb	r2, [r4, #4]
    de14:	f7ff fd34 	bl	d880 <am_hal_interrupt_master_set>
    de18:	6823      	ldr	r3, [r4, #0]
    de1a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    de1e:	42b3      	cmp	r3, r6
    de20:	d1ae      	bne.n	dd80 <am_hal_uart_power_control+0x34>
    de22:	6a65      	ldr	r5, [r4, #36]	; 0x24
    de24:	e7a5      	b.n	dd72 <am_hal_uart_power_control+0x26>
    de26:	4638      	mov	r0, r7
    de28:	9201      	str	r2, [sp, #4]
    de2a:	f7ff fdc9 	bl	d9c0 <am_hal_pwrctrl_periph_enable>
    de2e:	9a01      	ldr	r2, [sp, #4]
    de30:	4610      	mov	r0, r2
    de32:	e7d2      	b.n	ddda <am_hal_uart_power_control+0x8e>
    de34:	2007      	movs	r0, #7
    de36:	e7d0      	b.n	ddda <am_hal_uart_power_control+0x8e>
    de38:	01ea9e06 	.word	0x01ea9e06

0000de3c <am_hal_uart_configure>:
    de3c:	6803      	ldr	r3, [r0, #0]
    de3e:	4a78      	ldr	r2, [pc, #480]	; (e020 <am_hal_uart_configure+0x1e4>)
    de40:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    de44:	4293      	cmp	r3, r2
    de46:	d001      	beq.n	de4c <am_hal_uart_configure+0x10>
    de48:	2002      	movs	r0, #2
    de4a:	4770      	bx	lr
    de4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    de50:	6a44      	ldr	r4, [r0, #36]	; 0x24
    de52:	f504 2480 	add.w	r4, r4, #262144	; 0x40000
    de56:	341c      	adds	r4, #28
    de58:	0324      	lsls	r4, r4, #12
    de5a:	2700      	movs	r7, #0
    de5c:	b084      	sub	sp, #16
    de5e:	6327      	str	r7, [r4, #48]	; 0x30
    de60:	460e      	mov	r6, r1
    de62:	4605      	mov	r5, r0
    de64:	f7ff fd08 	bl	d878 <am_hal_interrupt_master_disable>
    de68:	9001      	str	r0, [sp, #4]
    de6a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    de6c:	f043 0308 	orr.w	r3, r3, #8
    de70:	8623      	strh	r3, [r4, #48]	; 0x30
    de72:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    de74:	2201      	movs	r2, #1
    de76:	f362 1306 	bfi	r3, r2, #4, #3
    de7a:	8623      	strh	r3, [r4, #48]	; 0x30
    de7c:	9801      	ldr	r0, [sp, #4]
    de7e:	f7ff fcff 	bl	d880 <am_hal_interrupt_master_set>
    de82:	f7ff fcf9 	bl	d878 <am_hal_interrupt_master_disable>
    de86:	9002      	str	r0, [sp, #8]
    de88:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    de8a:	f367 0300 	bfi	r3, r7, #0, #1
    de8e:	8623      	strh	r3, [r4, #48]	; 0x30
    de90:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    de92:	f367 2349 	bfi	r3, r7, #9, #1
    de96:	8623      	strh	r3, [r4, #48]	; 0x30
    de98:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    de9a:	f367 2308 	bfi	r3, r7, #8, #1
    de9e:	8623      	strh	r3, [r4, #48]	; 0x30
    dea0:	9802      	ldr	r0, [sp, #8]
    dea2:	f7ff fced 	bl	d880 <am_hal_interrupt_master_set>
    dea6:	4b5f      	ldr	r3, [pc, #380]	; (e024 <am_hal_uart_configure+0x1e8>)
    dea8:	6832      	ldr	r2, [r6, #0]
    deaa:	68db      	ldr	r3, [r3, #12]
    deac:	b2db      	uxtb	r3, r3
    deae:	2b12      	cmp	r3, #18
    deb0:	d076      	beq.n	dfa0 <am_hal_uart_configure+0x164>
    deb2:	4b5c      	ldr	r3, [pc, #368]	; (e024 <am_hal_uart_configure+0x1e8>)
    deb4:	68db      	ldr	r3, [r3, #12]
    deb6:	b2db      	uxtb	r3, r3
    deb8:	2b20      	cmp	r3, #32
    deba:	d902      	bls.n	dec2 <am_hal_uart_configure+0x86>
    debc:	4b5a      	ldr	r3, [pc, #360]	; (e028 <am_hal_uart_configure+0x1ec>)
    debe:	429a      	cmp	r2, r3
    dec0:	d871      	bhi.n	dfa6 <am_hal_uart_configure+0x16a>
    dec2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    dec4:	f3c3 1302 	ubfx	r3, r3, #4, #3
    dec8:	3b01      	subs	r3, #1
    deca:	b2db      	uxtb	r3, r3
    decc:	2b03      	cmp	r3, #3
    dece:	d86c      	bhi.n	dfaa <am_hal_uart_configure+0x16e>
    ded0:	4956      	ldr	r1, [pc, #344]	; (e02c <am_hal_uart_configure+0x1f0>)
    ded2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    ded6:	0112      	lsls	r2, r2, #4
    ded8:	4291      	cmp	r1, r2
    deda:	ea4f 1381 	mov.w	r3, r1, lsl #6
    dede:	fbb1 f0f2 	udiv	r0, r1, r2
    dee2:	fbb3 f3f2 	udiv	r3, r3, r2
    dee6:	eba3 1380 	sub.w	r3, r3, r0, lsl #6
    deea:	d364      	bcc.n	dfb6 <am_hal_uart_configure+0x17a>
    deec:	6260      	str	r0, [r4, #36]	; 0x24
    deee:	6260      	str	r0, [r4, #36]	; 0x24
    def0:	62a3      	str	r3, [r4, #40]	; 0x28
    def2:	089b      	lsrs	r3, r3, #2
    def4:	eb03 1300 	add.w	r3, r3, r0, lsl #4
    def8:	fbb1 f3f3 	udiv	r3, r1, r3
    defc:	662b      	str	r3, [r5, #96]	; 0x60
    defe:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    df00:	f36f 338e 	bfc	r3, #14, #1
    df04:	8623      	strh	r3, [r4, #48]	; 0x30
    df06:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    df08:	f36f 33cf 	bfc	r3, #15, #1
    df0c:	8623      	strh	r3, [r4, #48]	; 0x30
    df0e:	6933      	ldr	r3, [r6, #16]
    df10:	6b22      	ldr	r2, [r4, #48]	; 0x30
    df12:	6971      	ldr	r1, [r6, #20]
    df14:	431a      	orrs	r2, r3
    df16:	6873      	ldr	r3, [r6, #4]
    df18:	6322      	str	r2, [r4, #48]	; 0x30
    df1a:	68f2      	ldr	r2, [r6, #12]
    df1c:	6361      	str	r1, [r4, #52]	; 0x34
    df1e:	4313      	orrs	r3, r2
    df20:	68b2      	ldr	r2, [r6, #8]
    df22:	4313      	orrs	r3, r2
    df24:	f043 0310 	orr.w	r3, r3, #16
    df28:	62e3      	str	r3, [r4, #44]	; 0x2c
    df2a:	f7ff fca5 	bl	d878 <am_hal_interrupt_master_disable>
    df2e:	9003      	str	r0, [sp, #12]
    df30:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    df32:	f043 0301 	orr.w	r3, r3, #1
    df36:	8623      	strh	r3, [r4, #48]	; 0x30
    df38:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    df3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    df3e:	8623      	strh	r3, [r4, #48]	; 0x30
    df40:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    df42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    df46:	8623      	strh	r3, [r4, #48]	; 0x30
    df48:	9803      	ldr	r0, [sp, #12]
    df4a:	f7ff fc99 	bl	d880 <am_hal_interrupt_master_set>
    df4e:	682a      	ldr	r2, [r5, #0]
    df50:	4b33      	ldr	r3, [pc, #204]	; (e020 <am_hal_uart_configure+0x1e4>)
    df52:	f022 487e 	bic.w	r8, r2, #4261412864	; 0xfe000000
    df56:	4598      	cmp	r8, r3
    df58:	d11e      	bne.n	df98 <am_hal_uart_configure+0x15c>
    df5a:	69b1      	ldr	r1, [r6, #24]
    df5c:	e9d6 4708 	ldrd	r4, r7, [r6, #32]
    df60:	b109      	cbz	r1, df66 <am_hal_uart_configure+0x12a>
    df62:	69f3      	ldr	r3, [r6, #28]
    df64:	bb5b      	cbnz	r3, dfbe <am_hal_uart_configure+0x182>
    df66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    df68:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    df6c:	331c      	adds	r3, #28
    df6e:	031b      	lsls	r3, r3, #12
    df70:	2200      	movs	r2, #0
    df72:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
    df76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    df78:	f022 0220 	bic.w	r2, r2, #32
    df7c:	639a      	str	r2, [r3, #56]	; 0x38
    df7e:	b10c      	cbz	r4, df84 <am_hal_uart_configure+0x148>
    df80:	2f00      	cmp	r7, #0
    df82:	d132      	bne.n	dfea <am_hal_uart_configure+0x1ae>
    df84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    df86:	2000      	movs	r0, #0
    df88:	f022 0250 	bic.w	r2, r2, #80	; 0x50
    df8c:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
    df90:	639a      	str	r2, [r3, #56]	; 0x38
    df92:	b004      	add	sp, #16
    df94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    df98:	2000      	movs	r0, #0
    df9a:	b004      	add	sp, #16
    df9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dfa0:	f5b2 2f61 	cmp.w	r2, #921600	; 0xe1000
    dfa4:	d985      	bls.n	deb2 <am_hal_uart_configure+0x76>
    dfa6:	4822      	ldr	r0, [pc, #136]	; (e030 <am_hal_uart_configure+0x1f4>)
    dfa8:	e7f3      	b.n	df92 <am_hal_uart_configure+0x156>
    dfaa:	4822      	ldr	r0, [pc, #136]	; (e034 <am_hal_uart_configure+0x1f8>)
    dfac:	2300      	movs	r3, #0
    dfae:	662b      	str	r3, [r5, #96]	; 0x60
    dfb0:	b004      	add	sp, #16
    dfb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dfb6:	2300      	movs	r3, #0
    dfb8:	481d      	ldr	r0, [pc, #116]	; (e030 <am_hal_uart_configure+0x1f4>)
    dfba:	662b      	str	r3, [r5, #96]	; 0x60
    dfbc:	e7e9      	b.n	df92 <am_hal_uart_configure+0x156>
    dfbe:	2201      	movs	r2, #1
    dfc0:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
    dfc4:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    dfc8:	f000 fa5e 	bl	e488 <am_hal_queue_init>
    dfcc:	682b      	ldr	r3, [r5, #0]
    dfce:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dfd2:	4543      	cmp	r3, r8
    dfd4:	d1e0      	bne.n	df98 <am_hal_uart_configure+0x15c>
    dfd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    dfd8:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    dfdc:	331c      	adds	r3, #28
    dfde:	031b      	lsls	r3, r3, #12
    dfe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    dfe2:	f042 0220 	orr.w	r2, r2, #32
    dfe6:	639a      	str	r2, [r3, #56]	; 0x38
    dfe8:	e7c9      	b.n	df7e <am_hal_uart_configure+0x142>
    dfea:	2201      	movs	r2, #1
    dfec:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
    dff0:	463b      	mov	r3, r7
    dff2:	4621      	mov	r1, r4
    dff4:	f105 0048 	add.w	r0, r5, #72	; 0x48
    dff8:	f000 fa46 	bl	e488 <am_hal_queue_init>
    dffc:	682b      	ldr	r3, [r5, #0]
    dffe:	4a08      	ldr	r2, [pc, #32]	; (e020 <am_hal_uart_configure+0x1e4>)
    e000:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e004:	4293      	cmp	r3, r2
    e006:	d1c7      	bne.n	df98 <am_hal_uart_configure+0x15c>
    e008:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e00a:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e00e:	331c      	adds	r3, #28
    e010:	031b      	lsls	r3, r3, #12
    e012:	2000      	movs	r0, #0
    e014:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e016:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    e01a:	639a      	str	r2, [r3, #56]	; 0x38
    e01c:	e7b9      	b.n	df92 <am_hal_uart_configure+0x156>
    e01e:	bf00      	nop
    e020:	01ea9e06 	.word	0x01ea9e06
    e024:	40020000 	.word	0x40020000
    e028:	0016e360 	.word	0x0016e360
    e02c:	0000eb8c 	.word	0x0000eb8c
    e030:	08000003 	.word	0x08000003
    e034:	08000002 	.word	0x08000002

0000e038 <am_hal_uart_transfer>:
    e038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e03c:	ed2d 8b02 	vpush	{d8}
    e040:	680d      	ldr	r5, [r1, #0]
    e042:	b091      	sub	sp, #68	; 0x44
    e044:	4604      	mov	r4, r0
    e046:	b14d      	cbz	r5, e05c <am_hal_uart_transfer+0x24>
    e048:	2d01      	cmp	r5, #1
    e04a:	f000 808f 	beq.w	e16c <am_hal_uart_transfer+0x134>
    e04e:	2507      	movs	r5, #7
    e050:	4628      	mov	r0, r5
    e052:	b011      	add	sp, #68	; 0x44
    e054:	ecbd 8b02 	vpop	{d8}
    e058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e05c:	e9d1 b802 	ldrd	fp, r8, [r1, #8]
    e060:	684b      	ldr	r3, [r1, #4]
    e062:	690a      	ldr	r2, [r1, #16]
    e064:	9202      	str	r2, [sp, #8]
    e066:	4618      	mov	r0, r3
    e068:	f1b8 0f00 	cmp.w	r8, #0
    e06c:	f000 8111 	beq.w	e292 <am_hal_uart_transfer+0x25a>
    e070:	f1bb 0f00 	cmp.w	fp, #0
    e074:	f000 8172 	beq.w	e35c <am_hal_uart_transfer+0x324>
    e078:	2c00      	cmp	r4, #0
    e07a:	f000 8165 	beq.w	e348 <am_hal_uart_transfer+0x310>
    e07e:	46a9      	mov	r9, r5
    e080:	462f      	mov	r7, r5
    e082:	9501      	str	r5, [sp, #4]
    e084:	4625      	mov	r5, r4
    e086:	4619      	mov	r1, r3
    e088:	682a      	ldr	r2, [r5, #0]
    e08a:	461c      	mov	r4, r3
    e08c:	4bad      	ldr	r3, [pc, #692]	; (e344 <am_hal_uart_transfer+0x30c>)
    e08e:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e092:	429a      	cmp	r2, r3
    e094:	465e      	mov	r6, fp
    e096:	d12d      	bne.n	e0f4 <am_hal_uart_transfer+0xbc>
    e098:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    e09c:	bb7a      	cbnz	r2, e0fe <am_hal_uart_transfer+0xc6>
    e09e:	1e48      	subs	r0, r1, #1
    e0a0:	6a69      	ldr	r1, [r5, #36]	; 0x24
    e0a2:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    e0a6:	311c      	adds	r1, #28
    e0a8:	0309      	lsls	r1, r1, #12
    e0aa:	698b      	ldr	r3, [r1, #24]
    e0ac:	069b      	lsls	r3, r3, #26
    e0ae:	d405      	bmi.n	e0bc <am_hal_uart_transfer+0x84>
    e0b0:	3201      	adds	r2, #1
    e0b2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    e0b6:	600b      	str	r3, [r1, #0]
    e0b8:	4296      	cmp	r6, r2
    e0ba:	d8f6      	bhi.n	e0aa <am_hal_uart_transfer+0x72>
    e0bc:	4417      	add	r7, r2
    e0be:	1ab6      	subs	r6, r6, r2
    e0c0:	b936      	cbnz	r6, e0d0 <am_hal_uart_transfer+0x98>
    e0c2:	9d01      	ldr	r5, [sp, #4]
    e0c4:	9b02      	ldr	r3, [sp, #8]
    e0c6:	2b00      	cmp	r3, #0
    e0c8:	f000 808c 	beq.w	e1e4 <am_hal_uart_transfer+0x1ac>
    e0cc:	601f      	str	r7, [r3, #0]
    e0ce:	e7bf      	b.n	e050 <am_hal_uart_transfer+0x18>
    e0d0:	2010      	movs	r0, #16
    e0d2:	f7ff fa07 	bl	d4e4 <am_hal_flash_delay>
    e0d6:	f1b8 3fff 	cmp.w	r8, #4294967295
    e0da:	bf18      	it	ne
    e0dc:	f109 0901 	addne.w	r9, r9, #1
    e0e0:	45c8      	cmp	r8, r9
    e0e2:	d9ee      	bls.n	e0c2 <am_hal_uart_transfer+0x8a>
    e0e4:	682a      	ldr	r2, [r5, #0]
    e0e6:	4b97      	ldr	r3, [pc, #604]	; (e344 <am_hal_uart_transfer+0x30c>)
    e0e8:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e0ec:	429a      	cmp	r2, r3
    e0ee:	eb04 0107 	add.w	r1, r4, r7
    e0f2:	d0d1      	beq.n	e098 <am_hal_uart_transfer+0x60>
    e0f4:	9b02      	ldr	r3, [sp, #8]
    e0f6:	b103      	cbz	r3, e0fa <am_hal_uart_transfer+0xc2>
    e0f8:	601f      	str	r7, [r3, #0]
    e0fa:	2502      	movs	r5, #2
    e0fc:	e7a8      	b.n	e050 <am_hal_uart_transfer+0x18>
    e0fe:	e9d5 020d 	ldrd	r0, r2, [r5, #52]	; 0x34
    e102:	1a12      	subs	r2, r2, r0
    e104:	42b2      	cmp	r2, r6
    e106:	4613      	mov	r3, r2
    e108:	f105 0b2c 	add.w	fp, r5, #44	; 0x2c
    e10c:	bf28      	it	cs
    e10e:	4633      	movcs	r3, r6
    e110:	461a      	mov	r2, r3
    e112:	4658      	mov	r0, fp
    e114:	9303      	str	r3, [sp, #12]
    e116:	f000 f9c3 	bl	e4a0 <am_hal_queue_item_add>
    e11a:	f8d5 a024 	ldr.w	sl, [r5, #36]	; 0x24
    e11e:	f7ff fbab 	bl	d878 <am_hal_interrupt_master_disable>
    e122:	f50a 2a80 	add.w	sl, sl, #262144	; 0x40000
    e126:	f10a 0a1c 	add.w	sl, sl, #28
    e12a:	9008      	str	r0, [sp, #32]
    e12c:	ea4f 3a0a 	mov.w	sl, sl, lsl #12
    e130:	e00d      	b.n	e14e <am_hal_uart_transfer+0x116>
    e132:	f000 f9f3 	bl	e51c <am_hal_queue_item_get>
    e136:	b190      	cbz	r0, e15e <am_hal_uart_transfer+0x126>
    e138:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    e13a:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e13e:	321c      	adds	r2, #28
    e140:	0312      	lsls	r2, r2, #12
    e142:	6993      	ldr	r3, [r2, #24]
    e144:	0699      	lsls	r1, r3, #26
    e146:	bf5c      	itt	pl
    e148:	f89d 301c 	ldrbpl.w	r3, [sp, #28]
    e14c:	6013      	strpl	r3, [r2, #0]
    e14e:	f8da 3018 	ldr.w	r3, [sl, #24]
    e152:	069b      	lsls	r3, r3, #26
    e154:	f04f 0201 	mov.w	r2, #1
    e158:	a907      	add	r1, sp, #28
    e15a:	4658      	mov	r0, fp
    e15c:	d5e9      	bpl.n	e132 <am_hal_uart_transfer+0xfa>
    e15e:	9b03      	ldr	r3, [sp, #12]
    e160:	9808      	ldr	r0, [sp, #32]
    e162:	441f      	add	r7, r3
    e164:	1af6      	subs	r6, r6, r3
    e166:	f7ff fb8b 	bl	d880 <am_hal_interrupt_master_set>
    e16a:	e7a9      	b.n	e0c0 <am_hal_uart_transfer+0x88>
    e16c:	68cd      	ldr	r5, [r1, #12]
    e16e:	690b      	ldr	r3, [r1, #16]
    e170:	9301      	str	r3, [sp, #4]
    e172:	e9d1 b701 	ldrd	fp, r7, [r1, #4]
    e176:	2d00      	cmp	r5, #0
    e178:	f000 80b5 	beq.w	e2e6 <am_hal_uart_transfer+0x2ae>
    e17c:	2f00      	cmp	r7, #0
    e17e:	f000 811e 	beq.w	e3be <am_hal_uart_transfer+0x386>
    e182:	2800      	cmp	r0, #0
    e184:	f000 80e7 	beq.w	e356 <am_hal_uart_transfer+0x31e>
    e188:	6822      	ldr	r2, [r4, #0]
    e18a:	f8df a1b8 	ldr.w	sl, [pc, #440]	; e344 <am_hal_uart_transfer+0x30c>
    e18e:	f100 0348 	add.w	r3, r0, #72	; 0x48
    e192:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e196:	ee08 3a10 	vmov	s16, r3
    e19a:	f04f 0900 	mov.w	r9, #0
    e19e:	462b      	mov	r3, r5
    e1a0:	4552      	cmp	r2, sl
    e1a2:	46c8      	mov	r8, r9
    e1a4:	465d      	mov	r5, fp
    e1a6:	461e      	mov	r6, r3
    e1a8:	d133      	bne.n	e212 <am_hal_uart_transfer+0x1da>
    e1aa:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    e1ae:	2a00      	cmp	r2, #0
    e1b0:	d137      	bne.n	e222 <am_hal_uart_transfer+0x1ea>
    e1b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    e1b4:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    e1b8:	311c      	adds	r1, #28
    e1ba:	1e68      	subs	r0, r5, #1
    e1bc:	0309      	lsls	r1, r1, #12
    e1be:	698b      	ldr	r3, [r1, #24]
    e1c0:	06dd      	lsls	r5, r3, #27
    e1c2:	d408      	bmi.n	e1d6 <am_hal_uart_transfer+0x19e>
    e1c4:	680b      	ldr	r3, [r1, #0]
    e1c6:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    e1ca:	d15e      	bne.n	e28a <am_hal_uart_transfer+0x252>
    e1cc:	3201      	adds	r2, #1
    e1ce:	4297      	cmp	r7, r2
    e1d0:	f800 3f01 	strb.w	r3, [r0, #1]!
    e1d4:	d8f3      	bhi.n	e1be <am_hal_uart_transfer+0x186>
    e1d6:	4490      	add	r8, r2
    e1d8:	1abf      	subs	r7, r7, r2
    e1da:	b957      	cbnz	r7, e1f2 <am_hal_uart_transfer+0x1ba>
    e1dc:	9b01      	ldr	r3, [sp, #4]
    e1de:	b10b      	cbz	r3, e1e4 <am_hal_uart_transfer+0x1ac>
    e1e0:	f8c3 8000 	str.w	r8, [r3]
    e1e4:	2500      	movs	r5, #0
    e1e6:	4628      	mov	r0, r5
    e1e8:	b011      	add	sp, #68	; 0x44
    e1ea:	ecbd 8b02 	vpop	{d8}
    e1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e1f2:	2010      	movs	r0, #16
    e1f4:	f7ff f976 	bl	d4e4 <am_hal_flash_delay>
    e1f8:	1c73      	adds	r3, r6, #1
    e1fa:	bf18      	it	ne
    e1fc:	f109 0901 	addne.w	r9, r9, #1
    e200:	454e      	cmp	r6, r9
    e202:	d9eb      	bls.n	e1dc <am_hal_uart_transfer+0x1a4>
    e204:	6822      	ldr	r2, [r4, #0]
    e206:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e20a:	4552      	cmp	r2, sl
    e20c:	eb0b 0508 	add.w	r5, fp, r8
    e210:	d0cb      	beq.n	e1aa <am_hal_uart_transfer+0x172>
    e212:	2502      	movs	r5, #2
    e214:	9b01      	ldr	r3, [sp, #4]
    e216:	2b00      	cmp	r3, #0
    e218:	f43f af1a 	beq.w	e050 <am_hal_uart_transfer+0x18>
    e21c:	f8c3 8000 	str.w	r8, [r3]
    e220:	e716      	b.n	e050 <am_hal_uart_transfer+0x18>
    e222:	f7ff fb29 	bl	d878 <am_hal_interrupt_master_disable>
    e226:	9007      	str	r0, [sp, #28]
    e228:	6a60      	ldr	r0, [r4, #36]	; 0x24
    e22a:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    e22e:	301c      	adds	r0, #28
    e230:	0300      	lsls	r0, r0, #12
    e232:	f10d 0c20 	add.w	ip, sp, #32
    e236:	2200      	movs	r2, #0
    e238:	6983      	ldr	r3, [r0, #24]
    e23a:	06db      	lsls	r3, r3, #27
    e23c:	d409      	bmi.n	e252 <am_hal_uart_transfer+0x21a>
    e23e:	6803      	ldr	r3, [r0, #0]
    e240:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    e244:	f102 0201 	add.w	r2, r2, #1
    e248:	d119      	bne.n	e27e <am_hal_uart_transfer+0x246>
    e24a:	2a20      	cmp	r2, #32
    e24c:	f80c 3b01 	strb.w	r3, [ip], #1
    e250:	d1f2      	bne.n	e238 <am_hal_uart_transfer+0x200>
    e252:	ee18 0a10 	vmov	r0, s16
    e256:	a908      	add	r1, sp, #32
    e258:	f000 f922 	bl	e4a0 <am_hal_queue_item_add>
    e25c:	2800      	cmp	r0, #0
    e25e:	d075      	beq.n	e34c <am_hal_uart_transfer+0x314>
    e260:	9807      	ldr	r0, [sp, #28]
    e262:	f7ff fb0d 	bl	d880 <am_hal_interrupt_master_set>
    e266:	6d22      	ldr	r2, [r4, #80]	; 0x50
    e268:	42ba      	cmp	r2, r7
    e26a:	bf28      	it	cs
    e26c:	463a      	movcs	r2, r7
    e26e:	ee18 0a10 	vmov	r0, s16
    e272:	4629      	mov	r1, r5
    e274:	4490      	add	r8, r2
    e276:	1abf      	subs	r7, r7, r2
    e278:	f000 f950 	bl	e51c <am_hal_queue_item_get>
    e27c:	e7ad      	b.n	e1da <am_hal_uart_transfer+0x1a2>
    e27e:	9807      	ldr	r0, [sp, #28]
    e280:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    e284:	f7ff fafc 	bl	d880 <am_hal_interrupt_master_set>
    e288:	e7c4      	b.n	e214 <am_hal_uart_transfer+0x1dc>
    e28a:	4490      	add	r8, r2
    e28c:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    e290:	e7c0      	b.n	e214 <am_hal_uart_transfer+0x1dc>
    e292:	2c00      	cmp	r4, #0
    e294:	f43f af31 	beq.w	e0fa <am_hal_uart_transfer+0xc2>
    e298:	6822      	ldr	r2, [r4, #0]
    e29a:	492a      	ldr	r1, [pc, #168]	; (e344 <am_hal_uart_transfer+0x30c>)
    e29c:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e2a0:	428a      	cmp	r2, r1
    e2a2:	f47f af2a 	bne.w	e0fa <am_hal_uart_transfer+0xc2>
    e2a6:	9b02      	ldr	r3, [sp, #8]
    e2a8:	b10b      	cbz	r3, e2ae <am_hal_uart_transfer+0x276>
    e2aa:	f8c3 8000 	str.w	r8, [r3]
    e2ae:	f1bb 0f00 	cmp.w	fp, #0
    e2b2:	d097      	beq.n	e1e4 <am_hal_uart_transfer+0x1ac>
    e2b4:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
    e2b8:	2d00      	cmp	r5, #0
    e2ba:	d151      	bne.n	e360 <am_hal_uart_transfer+0x328>
    e2bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
    e2be:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    e2c2:	311c      	adds	r1, #28
    e2c4:	1e42      	subs	r2, r0, #1
    e2c6:	0309      	lsls	r1, r1, #12
    e2c8:	698b      	ldr	r3, [r1, #24]
    e2ca:	0698      	lsls	r0, r3, #26
    e2cc:	d405      	bmi.n	e2da <am_hal_uart_transfer+0x2a2>
    e2ce:	3501      	adds	r5, #1
    e2d0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    e2d4:	600b      	str	r3, [r1, #0]
    e2d6:	45ab      	cmp	fp, r5
    e2d8:	d1f6      	bne.n	e2c8 <am_hal_uart_transfer+0x290>
    e2da:	9b02      	ldr	r3, [sp, #8]
    e2dc:	2b00      	cmp	r3, #0
    e2de:	d081      	beq.n	e1e4 <am_hal_uart_transfer+0x1ac>
    e2e0:	601d      	str	r5, [r3, #0]
    e2e2:	2500      	movs	r5, #0
    e2e4:	e6b4      	b.n	e050 <am_hal_uart_transfer+0x18>
    e2e6:	2800      	cmp	r0, #0
    e2e8:	f43f af07 	beq.w	e0fa <am_hal_uart_transfer+0xc2>
    e2ec:	6802      	ldr	r2, [r0, #0]
    e2ee:	4915      	ldr	r1, [pc, #84]	; (e344 <am_hal_uart_transfer+0x30c>)
    e2f0:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e2f4:	428a      	cmp	r2, r1
    e2f6:	f47f af00 	bne.w	e0fa <am_hal_uart_transfer+0xc2>
    e2fa:	b103      	cbz	r3, e2fe <am_hal_uart_transfer+0x2c6>
    e2fc:	601d      	str	r5, [r3, #0]
    e2fe:	2f00      	cmp	r7, #0
    e300:	f43f af70 	beq.w	e1e4 <am_hal_uart_transfer+0x1ac>
    e304:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    e308:	2a00      	cmp	r2, #0
    e30a:	d15a      	bne.n	e3c2 <am_hal_uart_transfer+0x38a>
    e30c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    e30e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    e312:	311c      	adds	r1, #28
    e314:	f10b 33ff 	add.w	r3, fp, #4294967295
    e318:	0309      	lsls	r1, r1, #12
    e31a:	4614      	mov	r4, r2
    e31c:	698a      	ldr	r2, [r1, #24]
    e31e:	06d2      	lsls	r2, r2, #27
    e320:	d409      	bmi.n	e336 <am_hal_uart_transfer+0x2fe>
    e322:	680a      	ldr	r2, [r1, #0]
    e324:	f412 6070 	ands.w	r0, r2, #3840	; 0xf00
    e328:	d176      	bne.n	e418 <am_hal_uart_transfer+0x3e0>
    e32a:	3401      	adds	r4, #1
    e32c:	42a7      	cmp	r7, r4
    e32e:	f803 2f01 	strb.w	r2, [r3, #1]!
    e332:	d1f3      	bne.n	e31c <am_hal_uart_transfer+0x2e4>
    e334:	4605      	mov	r5, r0
    e336:	9b01      	ldr	r3, [sp, #4]
    e338:	2b00      	cmp	r3, #0
    e33a:	f43f ae89 	beq.w	e050 <am_hal_uart_transfer+0x18>
    e33e:	601c      	str	r4, [r3, #0]
    e340:	e686      	b.n	e050 <am_hal_uart_transfer+0x18>
    e342:	bf00      	nop
    e344:	01ea9e06 	.word	0x01ea9e06
    e348:	4627      	mov	r7, r4
    e34a:	e6d3      	b.n	e0f4 <am_hal_uart_transfer+0xbc>
    e34c:	9807      	ldr	r0, [sp, #28]
    e34e:	4d39      	ldr	r5, [pc, #228]	; (e434 <am_hal_uart_transfer+0x3fc>)
    e350:	f7ff fa96 	bl	d880 <am_hal_interrupt_master_set>
    e354:	e75e      	b.n	e214 <am_hal_uart_transfer+0x1dc>
    e356:	2502      	movs	r5, #2
    e358:	4680      	mov	r8, r0
    e35a:	e75b      	b.n	e214 <am_hal_uart_transfer+0x1dc>
    e35c:	462f      	mov	r7, r5
    e35e:	e6b1      	b.n	e0c4 <am_hal_uart_transfer+0x8c>
    e360:	6b65      	ldr	r5, [r4, #52]	; 0x34
    e362:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e364:	1b52      	subs	r2, r2, r5
    e366:	455a      	cmp	r2, fp
    e368:	f104 072c 	add.w	r7, r4, #44	; 0x2c
    e36c:	4601      	mov	r1, r0
    e36e:	bf28      	it	cs
    e370:	465a      	movcs	r2, fp
    e372:	4638      	mov	r0, r7
    e374:	4615      	mov	r5, r2
    e376:	f000 f893 	bl	e4a0 <am_hal_queue_item_add>
    e37a:	6a66      	ldr	r6, [r4, #36]	; 0x24
    e37c:	f7ff fa7c 	bl	d878 <am_hal_interrupt_master_disable>
    e380:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
    e384:	361c      	adds	r6, #28
    e386:	9005      	str	r0, [sp, #20]
    e388:	0336      	lsls	r6, r6, #12
    e38a:	e00f      	b.n	e3ac <am_hal_uart_transfer+0x374>
    e38c:	a908      	add	r1, sp, #32
    e38e:	4638      	mov	r0, r7
    e390:	f000 f8c4 	bl	e51c <am_hal_queue_item_get>
    e394:	b178      	cbz	r0, e3b6 <am_hal_uart_transfer+0x37e>
    e396:	6a62      	ldr	r2, [r4, #36]	; 0x24
    e398:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e39c:	321c      	adds	r2, #28
    e39e:	0312      	lsls	r2, r2, #12
    e3a0:	6993      	ldr	r3, [r2, #24]
    e3a2:	0699      	lsls	r1, r3, #26
    e3a4:	bf5c      	itt	pl
    e3a6:	f89d 3020 	ldrbpl.w	r3, [sp, #32]
    e3aa:	6013      	strpl	r3, [r2, #0]
    e3ac:	69b3      	ldr	r3, [r6, #24]
    e3ae:	069b      	lsls	r3, r3, #26
    e3b0:	f04f 0201 	mov.w	r2, #1
    e3b4:	d5ea      	bpl.n	e38c <am_hal_uart_transfer+0x354>
    e3b6:	9805      	ldr	r0, [sp, #20]
    e3b8:	f7ff fa62 	bl	d880 <am_hal_interrupt_master_set>
    e3bc:	e78d      	b.n	e2da <am_hal_uart_transfer+0x2a2>
    e3be:	46b8      	mov	r8, r7
    e3c0:	e70c      	b.n	e1dc <am_hal_uart_transfer+0x1a4>
    e3c2:	f7ff fa59 	bl	d878 <am_hal_interrupt_master_disable>
    e3c6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    e3c8:	9006      	str	r0, [sp, #24]
    e3ca:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    e3ce:	311c      	adds	r1, #28
    e3d0:	0309      	lsls	r1, r1, #12
    e3d2:	ae08      	add	r6, sp, #32
    e3d4:	2200      	movs	r2, #0
    e3d6:	698b      	ldr	r3, [r1, #24]
    e3d8:	06d8      	lsls	r0, r3, #27
    e3da:	d409      	bmi.n	e3f0 <am_hal_uart_transfer+0x3b8>
    e3dc:	680b      	ldr	r3, [r1, #0]
    e3de:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    e3e2:	f102 0201 	add.w	r2, r2, #1
    e3e6:	d11a      	bne.n	e41e <am_hal_uart_transfer+0x3e6>
    e3e8:	2a20      	cmp	r2, #32
    e3ea:	f806 3b01 	strb.w	r3, [r6], #1
    e3ee:	d1f2      	bne.n	e3d6 <am_hal_uart_transfer+0x39e>
    e3f0:	f104 0648 	add.w	r6, r4, #72	; 0x48
    e3f4:	a908      	add	r1, sp, #32
    e3f6:	4630      	mov	r0, r6
    e3f8:	f000 f852 	bl	e4a0 <am_hal_queue_item_add>
    e3fc:	b1a8      	cbz	r0, e42a <am_hal_uart_transfer+0x3f2>
    e3fe:	9806      	ldr	r0, [sp, #24]
    e400:	f7ff fa3e 	bl	d880 <am_hal_interrupt_master_set>
    e404:	6d24      	ldr	r4, [r4, #80]	; 0x50
    e406:	42bc      	cmp	r4, r7
    e408:	bf28      	it	cs
    e40a:	463c      	movcs	r4, r7
    e40c:	4659      	mov	r1, fp
    e40e:	4630      	mov	r0, r6
    e410:	4622      	mov	r2, r4
    e412:	f000 f883 	bl	e51c <am_hal_queue_item_get>
    e416:	e78e      	b.n	e336 <am_hal_uart_transfer+0x2fe>
    e418:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    e41c:	e78b      	b.n	e336 <am_hal_uart_transfer+0x2fe>
    e41e:	9806      	ldr	r0, [sp, #24]
    e420:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    e424:	f7ff fa2c 	bl	d880 <am_hal_interrupt_master_set>
    e428:	e612      	b.n	e050 <am_hal_uart_transfer+0x18>
    e42a:	9806      	ldr	r0, [sp, #24]
    e42c:	4d01      	ldr	r5, [pc, #4]	; (e434 <am_hal_uart_transfer+0x3fc>)
    e42e:	f7ff fa27 	bl	d880 <am_hal_interrupt_master_set>
    e432:	e60d      	b.n	e050 <am_hal_uart_transfer+0x18>
    e434:	08000001 	.word	0x08000001

0000e438 <am_hal_uart_tx_flush>:
    e438:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    e43c:	b570      	push	{r4, r5, r6, lr}
    e43e:	6a45      	ldr	r5, [r0, #36]	; 0x24
    e440:	4604      	mov	r4, r0
    e442:	b15b      	cbz	r3, e45c <am_hal_uart_tx_flush+0x24>
    e444:	6b43      	ldr	r3, [r0, #52]	; 0x34
    e446:	b14b      	cbz	r3, e45c <am_hal_uart_tx_flush+0x24>
    e448:	4e0e      	ldr	r6, [pc, #56]	; (e484 <am_hal_uart_tx_flush+0x4c>)
    e44a:	6e20      	ldr	r0, [r4, #96]	; 0x60
    e44c:	fbb6 f0f0 	udiv	r0, r6, r0
    e450:	0100      	lsls	r0, r0, #4
    e452:	f7ff f847 	bl	d4e4 <am_hal_flash_delay>
    e456:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e458:	2b00      	cmp	r3, #0
    e45a:	d1f6      	bne.n	e44a <am_hal_uart_tx_flush+0x12>
    e45c:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e460:	351c      	adds	r5, #28
    e462:	032d      	lsls	r5, r5, #12
    e464:	69ab      	ldr	r3, [r5, #24]
    e466:	071a      	lsls	r2, r3, #28
    e468:	d509      	bpl.n	e47e <am_hal_uart_tx_flush+0x46>
    e46a:	4e06      	ldr	r6, [pc, #24]	; (e484 <am_hal_uart_tx_flush+0x4c>)
    e46c:	6e23      	ldr	r3, [r4, #96]	; 0x60
    e46e:	fbb6 f3f3 	udiv	r3, r6, r3
    e472:	0118      	lsls	r0, r3, #4
    e474:	f7ff f836 	bl	d4e4 <am_hal_flash_delay>
    e478:	69ab      	ldr	r3, [r5, #24]
    e47a:	071b      	lsls	r3, r3, #28
    e47c:	d4f6      	bmi.n	e46c <am_hal_uart_tx_flush+0x34>
    e47e:	2000      	movs	r0, #0
    e480:	bd70      	pop	{r4, r5, r6, pc}
    e482:	bf00      	nop
    e484:	00b71b00 	.word	0x00b71b00

0000e488 <am_hal_queue_init>:
    e488:	b410      	push	{r4}
    e48a:	2400      	movs	r4, #0
    e48c:	e9c0 4400 	strd	r4, r4, [r0]
    e490:	e9c0 4302 	strd	r4, r3, [r0, #8]
    e494:	e9c0 2104 	strd	r2, r1, [r0, #16]
    e498:	f85d 4b04 	ldr.w	r4, [sp], #4
    e49c:	4770      	bx	lr
    e49e:	bf00      	nop

0000e4a0 <am_hal_queue_item_add>:
    e4a0:	b570      	push	{r4, r5, r6, lr}
    e4a2:	6905      	ldr	r5, [r0, #16]
    e4a4:	b082      	sub	sp, #8
    e4a6:	4604      	mov	r4, r0
    e4a8:	fb02 f505 	mul.w	r5, r2, r5
    e4ac:	460e      	mov	r6, r1
    e4ae:	f7ff f9e3 	bl	d878 <am_hal_interrupt_master_disable>
    e4b2:	68e2      	ldr	r2, [r4, #12]
    e4b4:	9001      	str	r0, [sp, #4]
    e4b6:	68a0      	ldr	r0, [r4, #8]
    e4b8:	1a13      	subs	r3, r2, r0
    e4ba:	42ab      	cmp	r3, r5
    e4bc:	d31c      	bcc.n	e4f8 <am_hal_queue_item_add+0x58>
    e4be:	b195      	cbz	r5, e4e6 <am_hal_queue_item_add+0x46>
    e4c0:	6823      	ldr	r3, [r4, #0]
    e4c2:	b306      	cbz	r6, e506 <am_hal_queue_item_add+0x66>
    e4c4:	1e71      	subs	r1, r6, #1
    e4c6:	194e      	adds	r6, r1, r5
    e4c8:	6962      	ldr	r2, [r4, #20]
    e4ca:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    e4ce:	54d0      	strb	r0, [r2, r3]
    e4d0:	6823      	ldr	r3, [r4, #0]
    e4d2:	68e0      	ldr	r0, [r4, #12]
    e4d4:	3301      	adds	r3, #1
    e4d6:	428e      	cmp	r6, r1
    e4d8:	fbb3 f2f0 	udiv	r2, r3, r0
    e4dc:	fb00 3312 	mls	r3, r0, r2, r3
    e4e0:	6023      	str	r3, [r4, #0]
    e4e2:	d1f1      	bne.n	e4c8 <am_hal_queue_item_add+0x28>
    e4e4:	68a0      	ldr	r0, [r4, #8]
    e4e6:	4405      	add	r5, r0
    e4e8:	60a5      	str	r5, [r4, #8]
    e4ea:	9801      	ldr	r0, [sp, #4]
    e4ec:	f7ff f9c8 	bl	d880 <am_hal_interrupt_master_set>
    e4f0:	2401      	movs	r4, #1
    e4f2:	4620      	mov	r0, r4
    e4f4:	b002      	add	sp, #8
    e4f6:	bd70      	pop	{r4, r5, r6, pc}
    e4f8:	9801      	ldr	r0, [sp, #4]
    e4fa:	f7ff f9c1 	bl	d880 <am_hal_interrupt_master_set>
    e4fe:	2400      	movs	r4, #0
    e500:	4620      	mov	r0, r4
    e502:	b002      	add	sp, #8
    e504:	bd70      	pop	{r4, r5, r6, pc}
    e506:	4631      	mov	r1, r6
    e508:	3101      	adds	r1, #1
    e50a:	3301      	adds	r3, #1
    e50c:	428d      	cmp	r5, r1
    e50e:	fbb3 f6f2 	udiv	r6, r3, r2
    e512:	fb02 3316 	mls	r3, r2, r6, r3
    e516:	d1f7      	bne.n	e508 <am_hal_queue_item_add+0x68>
    e518:	6023      	str	r3, [r4, #0]
    e51a:	e7e4      	b.n	e4e6 <am_hal_queue_item_add+0x46>

0000e51c <am_hal_queue_item_get>:
    e51c:	b570      	push	{r4, r5, r6, lr}
    e51e:	6905      	ldr	r5, [r0, #16]
    e520:	4604      	mov	r4, r0
    e522:	b082      	sub	sp, #8
    e524:	fb02 f505 	mul.w	r5, r2, r5
    e528:	460e      	mov	r6, r1
    e52a:	f7ff f9a5 	bl	d878 <am_hal_interrupt_master_disable>
    e52e:	68a2      	ldr	r2, [r4, #8]
    e530:	9001      	str	r0, [sp, #4]
    e532:	42aa      	cmp	r2, r5
    e534:	d31c      	bcc.n	e570 <am_hal_queue_item_get+0x54>
    e536:	b195      	cbz	r5, e55e <am_hal_queue_item_get+0x42>
    e538:	6863      	ldr	r3, [r4, #4]
    e53a:	b306      	cbz	r6, e57e <am_hal_queue_item_get+0x62>
    e53c:	1e71      	subs	r1, r6, #1
    e53e:	194e      	adds	r6, r1, r5
    e540:	6962      	ldr	r2, [r4, #20]
    e542:	5cd3      	ldrb	r3, [r2, r3]
    e544:	f801 3f01 	strb.w	r3, [r1, #1]!
    e548:	6863      	ldr	r3, [r4, #4]
    e54a:	68e0      	ldr	r0, [r4, #12]
    e54c:	3301      	adds	r3, #1
    e54e:	428e      	cmp	r6, r1
    e550:	fbb3 f2f0 	udiv	r2, r3, r0
    e554:	fb00 3312 	mls	r3, r0, r2, r3
    e558:	6063      	str	r3, [r4, #4]
    e55a:	d1f1      	bne.n	e540 <am_hal_queue_item_get+0x24>
    e55c:	68a2      	ldr	r2, [r4, #8]
    e55e:	9801      	ldr	r0, [sp, #4]
    e560:	1b52      	subs	r2, r2, r5
    e562:	60a2      	str	r2, [r4, #8]
    e564:	f7ff f98c 	bl	d880 <am_hal_interrupt_master_set>
    e568:	2401      	movs	r4, #1
    e56a:	4620      	mov	r0, r4
    e56c:	b002      	add	sp, #8
    e56e:	bd70      	pop	{r4, r5, r6, pc}
    e570:	9801      	ldr	r0, [sp, #4]
    e572:	f7ff f985 	bl	d880 <am_hal_interrupt_master_set>
    e576:	2400      	movs	r4, #0
    e578:	4620      	mov	r0, r4
    e57a:	b002      	add	sp, #8
    e57c:	bd70      	pop	{r4, r5, r6, pc}
    e57e:	68e0      	ldr	r0, [r4, #12]
    e580:	4631      	mov	r1, r6
    e582:	3101      	adds	r1, #1
    e584:	3301      	adds	r3, #1
    e586:	42a9      	cmp	r1, r5
    e588:	fbb3 f6f0 	udiv	r6, r3, r0
    e58c:	fb00 3316 	mls	r3, r0, r6, r3
    e590:	d1f7      	bne.n	e582 <am_hal_queue_item_get+0x66>
    e592:	6063      	str	r3, [r4, #4]
    e594:	e7e3      	b.n	e55e <am_hal_queue_item_get+0x42>
    e596:	bf00      	nop
    e598:	69626d41 	.word	0x69626d41
    e59c:	694d2071 	.word	0x694d2071
    e5a0:	206f7263 	.word	0x206f7263
    e5a4:	69727027 	.word	0x69727027
    e5a8:	2027656d 	.word	0x2027656d
    e5ac:	6d617865 	.word	0x6d617865
    e5b0:	2e656c70 	.word	0x2e656c70
    e5b4:	00000a0a 	.word	0x00000a0a
    e5b8:	64657355 	.word	0x64657355
    e5bc:	726f6620 	.word	0x726f6620
    e5c0:	61656d20 	.word	0x61656d20
    e5c4:	69727573 	.word	0x69727573
    e5c8:	7020676e 	.word	0x7020676e
    e5cc:	7265776f 	.word	0x7265776f
    e5d0:	69687720 	.word	0x69687720
    e5d4:	6320656c 	.word	0x6320656c
    e5d8:	75706d6f 	.word	0x75706d6f
    e5dc:	676e6974 	.word	0x676e6974
    e5e0:	65687420 	.word	0x65687420
    e5e4:	6d756e20 	.word	0x6d756e20
    e5e8:	20726562 	.word	0x20726562
    e5ec:	7020666f 	.word	0x7020666f
    e5f0:	656d6972 	.word	0x656d6972
    e5f4:	6d756e20 	.word	0x6d756e20
    e5f8:	73726562 	.word	0x73726562
    e5fc:	206e6920 	.word	0x206e6920
    e600:	61722061 	.word	0x61722061
    e604:	2e65676e 	.word	0x2e65676e
    e608:	0000000a 	.word	0x0000000a
    e60c:	20434347 	.word	0x20434347
    e610:	332e3031 	.word	0x332e3031
    e614:	3220312e 	.word	0x3220312e
    e618:	30313230 	.word	0x30313230
    e61c:	20343238 	.word	0x20343238
    e620:	6c657228 	.word	0x6c657228
    e624:	65736165 	.word	0x65736165
    e628:	00000029 	.word	0x00000029
    e62c:	20707041 	.word	0x20707041
    e630:	706d6f43 	.word	0x706d6f43
    e634:	72656c69 	.word	0x72656c69
    e638:	2020203a 	.word	0x2020203a
    e63c:	0a732520 	.word	0x0a732520
    e640:	00000000 	.word	0x00000000
    e644:	204c4148 	.word	0x204c4148
    e648:	706d6f43 	.word	0x706d6f43
    e64c:	72656c69 	.word	0x72656c69
    e650:	2020203a 	.word	0x2020203a
    e654:	0a732520 	.word	0x0a732520
    e658:	00000000 	.word	0x00000000
    e65c:	204c4148 	.word	0x204c4148
    e660:	204b4453 	.word	0x204b4453
    e664:	73726576 	.word	0x73726576
    e668:	3a6e6f69 	.word	0x3a6e6f69
    e66c:	2e642520 	.word	0x2e642520
    e670:	252e6425 	.word	0x252e6425
    e674:	00000a64 	.word	0x00000a64
    e678:	73736150 	.word	0x73736150
    e67c:	756e203a 	.word	0x756e203a
    e680:	7265626d 	.word	0x7265626d
    e684:	20666f20 	.word	0x20666f20
    e688:	6d697270 	.word	0x6d697270
    e68c:	66207365 	.word	0x66207365
    e690:	2520726f 	.word	0x2520726f
    e694:	73692064 	.word	0x73692064
    e698:	2e642520 	.word	0x2e642520
    e69c:	0000000a 	.word	0x0000000a
    e6a0:	4f525245 	.word	0x4f525245
    e6a4:	49203a52 	.word	0x49203a52
    e6a8:	6c61766e 	.word	0x6c61766e
    e6ac:	72206469 	.word	0x72206469
    e6b0:	6c757365 	.word	0x6c757365
    e6b4:	45202e74 	.word	0x45202e74
    e6b8:	63657078 	.word	0x63657078
    e6bc:	20646574 	.word	0x20646574
    e6c0:	202c6425 	.word	0x202c6425
    e6c4:	20746f67 	.word	0x20746f67
    e6c8:	0a2e6425 	.word	0x0a2e6425
    e6cc:	00000000 	.word	0x00000000
    e6d0:	0a0a0a0a 	.word	0x0a0a0a0a
    e6d4:	0a0a0a0a 	.word	0x0a0a0a0a
    e6d8:	0a0a0a0a 	.word	0x0a0a0a0a
    e6dc:	0a0a0a0a 	.word	0x0a0a0a0a
    e6e0:	00000a0a 	.word	0x00000a0a

0000e6e4 <g_sBspUartConfig>:
    e6e4:	0001c200 00000060 00000000 00000000     ....`...........
    e6f4:	00000000 00000012 00000000 00000000     ................
	...

0000e70c <g_AM_BSP_GPIO_COM_UART_RX>:
    e70c:	00000000                                ....

0000e710 <g_AM_BSP_GPIO_COM_UART_TX>:
    e710:	00000000                                ....

0000e714 <am_hal_cachectrl_defaults>:
    e714:	00000308                                ....

0000e718 <g_ui32HALversion>:
    e718:	02050000                                ....

0000e71c <g_ui8HALcompiler>:
    e71c:	20434347 332e3031 3220312e 30313230     GCC 10.3.1 20210
    e72c:	20343238 6c657228 65736165 00000029     824 (release)...

0000e73c <g_AM_HAL_GPIO_DISABLE>:
    e73c:	00000003                                ....

0000e740 <g_AM_HAL_GPIO_OUTPUT>:
    e740:	00000403                                ....

0000e744 <g_ui8Bit76Capabilities>:
    e744:	02800101 80010180 80800101 80808080     ................
    e754:	80808080 80808008 01800180 80808080     ................
    e764:	80808080 01800402 01010401 80808080     ................
    e774:	00000101                                ....

0000e778 <g_ui8Inpen>:
    e778:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
    e788:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
    e798:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
    e7a8:	00003130                                01..

0000e7ac <g_ui8NCEtable>:
    e7ac:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    e7bc:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    e7cc:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    e7dc:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    e7ec:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    e7fc:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    e80c:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    e81c:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    e82c:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    e83c:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    e84c:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    e85c:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    e86c:	32221202 43231303                       .."2..#C

0000e874 <g_ui8nCEpins>:
    e874:	02070707 00080802 01020202 01010101     ................
    e884:	01010101 01010101 01010101 01010101     ................
    e894:	01010101 08010101 01010008 01010101     ................
    e8a4:	00000101                                ....

0000e8a8 <g_am_hal_mcuctrl_flash_size>:
    e8a8:	00004000 00008000 00010000 00020000     .@..............
    e8b8:	00040000 00080000 00100000 00200000     .............. .
    e8c8:	00180000 00000000 00000000 00000000     ................
	...

0000e8e8 <g_am_hal_mcuctrl_sram_size>:
    e8e8:	00004000 00008000 00010000 00020000     .@..............
    e8f8:	00040000 00080000 00100000 00060000     ................
    e908:	000c0000 00000000 00000000 00000000     ................
	...

0000e928 <am_hal_pwrctrl_memory_control>:
	...
    e940:	00000001 00000001 00000001 00001fff     ................
    e950:	00001fff 00000001 00000003 00000003     ................
    e960:	00000003 00001fff 00001fff 00000003     ................
    e970:	00000007 00000007 00000007 00001fff     ................
    e980:	00001fff 00000007 0000000f 0000000f     ................
    e990:	0000000f 00001fff 00001fff 0000000f     ................
    e9a0:	0000001f 0000001f 0000001f 00001fff     ................
    e9b0:	00001fff 0000001f 0000003f 0000003f     ........?...?...
    e9c0:	0000003f 00001fff 00001fff 0000003f     ?...........?...
    e9d0:	0000007f 0000007f 0000007f 00001fff     ................
    e9e0:	00001fff 0000007f 000000ff 000000ff     ................
    e9f0:	000000ff 00001fff 00001fff 000000ff     ................
    ea00:	000001ff 000001ff 000001ff 00001fff     ................
    ea10:	00001fff 000001ff 000003ff 000003ff     ................
    ea20:	000003ff 00001fff 00001fff 000003ff     ................
    ea30:	000007ff 000007ff 000007ff 00001fff     ................
    ea40:	00001fff 000007ff 00000fff 00000fff     ................
    ea50:	00000fff 00001fff 00001fff 00000fff     ................
    ea60:	00001fff 00001fff 00001fff 00001fff     ................
    ea70:	00001fff 00001fff 00002000 00002000     ......... ... ..
    ea80:	00002000 00006000 00006000 00002000     . ...`...`... ..
    ea90:	00006000 00006000 00006000 00006000     .`...`...`...`..
    eaa0:	00006000 00006000 c0000000 00000000     .`...`..........
    eab0:	c0000000 c0000000 00000000 80000000     ................
    eac0:	c0007fff 00007fff c0007fff c0007fff     ................
    ead0:	00007fff 80007fff                       ........

0000ead8 <am_hal_pwrctrl_peripheral_control>:
	...
    eae4:	00000001 00000004 00000004 00000002     ................
    eaf4:	00000008 00000008 00000004 00000008     ................
    eb04:	00000008 00000008 00000008 00000008     ................
    eb14:	00000010 00000010 00000010 00000020     ............ ...
    eb24:	00000010 00000010 00000040 00000010     ........@.......
    eb34:	00000010 00000080 00000004 00000004     ................
    eb44:	00000100 00000004 00000004 00000200     ................
    eb54:	00000020 00000020 00000400 00000004      ... ...........
    eb64:	00000004 00000800 00000040 00000040     ........@...@...
    eb74:	00001000 00000080 00000080 00002000     ............. ..
    eb84:	00000100 00000100                       ........

0000eb8c <CSWTCH.20>:
    eb8c:	016e3600 00b71b00 005b8d80 002dc6c0     .6n.......[...-.
