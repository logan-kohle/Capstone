
bin/ios_lram_host.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 45 d8 00 00 ad d8 00 00 af d8 00 00     ....E...........
    c010:	af d8 00 00 af d8 00 00 af d8 00 00 00 00 00 00     ................
	...
    c02c:	b1 d8 00 00 b1 d8 00 00 00 00 00 00 b1 d8 00 00     ................
    c03c:	b1 d8 00 00 b1 d8 00 00 b1 d8 00 00 b1 d8 00 00     ................
    c04c:	b1 d8 00 00 b1 d8 00 00 b1 d8 00 00 75 c3 00 00     ............u...
    c05c:	b1 d8 00 00 b1 d8 00 00 b1 d8 00 00 b1 d8 00 00     ................
    c06c:	b1 d8 00 00 b1 d8 00 00 bd c3 00 00 b1 d8 00 00     ................
    c07c:	b1 d8 00 00 b1 d8 00 00 b1 d8 00 00 b1 d8 00 00     ................
    c08c:	b1 d8 00 00 b1 d8 00 00 b1 d8 00 00 b1 d8 00 00     ................
    c09c:	b1 d8 00 00 b1 d8 00 00 b1 d8 00 00 b1 d8 00 00     ................
    c0ac:	b1 d8 00 00 b1 d8 00 00 b1 d8 00 00 b1 d8 00 00     ................
    c0bc:	b1 d8 00 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <memcpy>:
    c100:	4684      	mov	ip, r0
    c102:	ea41 0300 	orr.w	r3, r1, r0
    c106:	f013 0303 	ands.w	r3, r3, #3
    c10a:	d16d      	bne.n	c1e8 <memcpy+0xe8>
    c10c:	3a40      	subs	r2, #64	; 0x40
    c10e:	d341      	bcc.n	c194 <memcpy+0x94>
    c110:	f851 3b04 	ldr.w	r3, [r1], #4
    c114:	f840 3b04 	str.w	r3, [r0], #4
    c118:	f851 3b04 	ldr.w	r3, [r1], #4
    c11c:	f840 3b04 	str.w	r3, [r0], #4
    c120:	f851 3b04 	ldr.w	r3, [r1], #4
    c124:	f840 3b04 	str.w	r3, [r0], #4
    c128:	f851 3b04 	ldr.w	r3, [r1], #4
    c12c:	f840 3b04 	str.w	r3, [r0], #4
    c130:	f851 3b04 	ldr.w	r3, [r1], #4
    c134:	f840 3b04 	str.w	r3, [r0], #4
    c138:	f851 3b04 	ldr.w	r3, [r1], #4
    c13c:	f840 3b04 	str.w	r3, [r0], #4
    c140:	f851 3b04 	ldr.w	r3, [r1], #4
    c144:	f840 3b04 	str.w	r3, [r0], #4
    c148:	f851 3b04 	ldr.w	r3, [r1], #4
    c14c:	f840 3b04 	str.w	r3, [r0], #4
    c150:	f851 3b04 	ldr.w	r3, [r1], #4
    c154:	f840 3b04 	str.w	r3, [r0], #4
    c158:	f851 3b04 	ldr.w	r3, [r1], #4
    c15c:	f840 3b04 	str.w	r3, [r0], #4
    c160:	f851 3b04 	ldr.w	r3, [r1], #4
    c164:	f840 3b04 	str.w	r3, [r0], #4
    c168:	f851 3b04 	ldr.w	r3, [r1], #4
    c16c:	f840 3b04 	str.w	r3, [r0], #4
    c170:	f851 3b04 	ldr.w	r3, [r1], #4
    c174:	f840 3b04 	str.w	r3, [r0], #4
    c178:	f851 3b04 	ldr.w	r3, [r1], #4
    c17c:	f840 3b04 	str.w	r3, [r0], #4
    c180:	f851 3b04 	ldr.w	r3, [r1], #4
    c184:	f840 3b04 	str.w	r3, [r0], #4
    c188:	f851 3b04 	ldr.w	r3, [r1], #4
    c18c:	f840 3b04 	str.w	r3, [r0], #4
    c190:	3a40      	subs	r2, #64	; 0x40
    c192:	d2bd      	bcs.n	c110 <memcpy+0x10>
    c194:	3230      	adds	r2, #48	; 0x30
    c196:	d311      	bcc.n	c1bc <memcpy+0xbc>
    c198:	f851 3b04 	ldr.w	r3, [r1], #4
    c19c:	f840 3b04 	str.w	r3, [r0], #4
    c1a0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1a4:	f840 3b04 	str.w	r3, [r0], #4
    c1a8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1ac:	f840 3b04 	str.w	r3, [r0], #4
    c1b0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1b4:	f840 3b04 	str.w	r3, [r0], #4
    c1b8:	3a10      	subs	r2, #16
    c1ba:	d2ed      	bcs.n	c198 <memcpy+0x98>
    c1bc:	320c      	adds	r2, #12
    c1be:	d305      	bcc.n	c1cc <memcpy+0xcc>
    c1c0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1c4:	f840 3b04 	str.w	r3, [r0], #4
    c1c8:	3a04      	subs	r2, #4
    c1ca:	d2f9      	bcs.n	c1c0 <memcpy+0xc0>
    c1cc:	3204      	adds	r2, #4
    c1ce:	d008      	beq.n	c1e2 <memcpy+0xe2>
    c1d0:	07d2      	lsls	r2, r2, #31
    c1d2:	bf1c      	itt	ne
    c1d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c1d8:	f800 3b01 	strbne.w	r3, [r0], #1
    c1dc:	d301      	bcc.n	c1e2 <memcpy+0xe2>
    c1de:	880b      	ldrh	r3, [r1, #0]
    c1e0:	8003      	strh	r3, [r0, #0]
    c1e2:	4660      	mov	r0, ip
    c1e4:	4770      	bx	lr
    c1e6:	bf00      	nop
    c1e8:	2a08      	cmp	r2, #8
    c1ea:	d313      	bcc.n	c214 <memcpy+0x114>
    c1ec:	078b      	lsls	r3, r1, #30
    c1ee:	d08d      	beq.n	c10c <memcpy+0xc>
    c1f0:	f010 0303 	ands.w	r3, r0, #3
    c1f4:	d08a      	beq.n	c10c <memcpy+0xc>
    c1f6:	f1c3 0304 	rsb	r3, r3, #4
    c1fa:	1ad2      	subs	r2, r2, r3
    c1fc:	07db      	lsls	r3, r3, #31
    c1fe:	bf1c      	itt	ne
    c200:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c204:	f800 3b01 	strbne.w	r3, [r0], #1
    c208:	d380      	bcc.n	c10c <memcpy+0xc>
    c20a:	f831 3b02 	ldrh.w	r3, [r1], #2
    c20e:	f820 3b02 	strh.w	r3, [r0], #2
    c212:	e77b      	b.n	c10c <memcpy+0xc>
    c214:	3a04      	subs	r2, #4
    c216:	d3d9      	bcc.n	c1cc <memcpy+0xcc>
    c218:	3a01      	subs	r2, #1
    c21a:	f811 3b01 	ldrb.w	r3, [r1], #1
    c21e:	f800 3b01 	strb.w	r3, [r0], #1
    c222:	d2f9      	bcs.n	c218 <memcpy+0x118>
    c224:	780b      	ldrb	r3, [r1, #0]
    c226:	7003      	strb	r3, [r0, #0]
    c228:	784b      	ldrb	r3, [r1, #1]
    c22a:	7043      	strb	r3, [r0, #1]
    c22c:	788b      	ldrb	r3, [r1, #2]
    c22e:	7083      	strb	r3, [r0, #2]
    c230:	4660      	mov	r0, ip
    c232:	4770      	bx	lr

0000c234 <__aeabi_d2f>:
    c234:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c238:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c23c:	bf24      	itt	cs
    c23e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c242:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c246:	d90d      	bls.n	c264 <__aeabi_d2f+0x30>
    c248:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c24c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c250:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c254:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c258:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c25c:	bf08      	it	eq
    c25e:	f020 0001 	biceq.w	r0, r0, #1
    c262:	4770      	bx	lr
    c264:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c268:	d121      	bne.n	c2ae <__aeabi_d2f+0x7a>
    c26a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c26e:	bfbc      	itt	lt
    c270:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c274:	4770      	bxlt	lr
    c276:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c27a:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c27e:	f1c2 0218 	rsb	r2, r2, #24
    c282:	f1c2 0c20 	rsb	ip, r2, #32
    c286:	fa10 f30c 	lsls.w	r3, r0, ip
    c28a:	fa20 f002 	lsr.w	r0, r0, r2
    c28e:	bf18      	it	ne
    c290:	f040 0001 	orrne.w	r0, r0, #1
    c294:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c298:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c29c:	fa03 fc0c 	lsl.w	ip, r3, ip
    c2a0:	ea40 000c 	orr.w	r0, r0, ip
    c2a4:	fa23 f302 	lsr.w	r3, r3, r2
    c2a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c2ac:	e7cc      	b.n	c248 <__aeabi_d2f+0x14>
    c2ae:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c2b2:	d107      	bne.n	c2c4 <__aeabi_d2f+0x90>
    c2b4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c2b8:	bf1e      	ittt	ne
    c2ba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c2be:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c2c2:	4770      	bxne	lr
    c2c4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c2c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c2cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c2d0:	4770      	bx	lr
    c2d2:	bf00      	nop

0000c2d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    c2d4:	b082      	sub	sp, #8
    c2d6:	4603      	mov	r3, r0
    c2d8:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
    c2dc:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c2e0:	2b00      	cmp	r3, #0
    c2e2:	db0c      	blt.n	c2fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c2e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c2e8:	f003 021f 	and.w	r2, r3, #31
    c2ec:	4905      	ldr	r1, [pc, #20]	; (c304 <__NVIC_EnableIRQ+0x30>)
    c2ee:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c2f2:	095b      	lsrs	r3, r3, #5
    c2f4:	2001      	movs	r0, #1
    c2f6:	fa00 f202 	lsl.w	r2, r0, r2
    c2fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
    c2fe:	bf00      	nop
    c300:	b002      	add	sp, #8
    c302:	4770      	bx	lr
    c304:	e000e100 	.word	0xe000e100

0000c308 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    c308:	b082      	sub	sp, #8
    c30a:	4603      	mov	r3, r0
    c30c:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
    c310:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c314:	2b00      	cmp	r3, #0
    c316:	db13      	blt.n	c340 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c318:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c31c:	f003 021f 	and.w	r2, r3, #31
    c320:	4909      	ldr	r1, [pc, #36]	; (c348 <__NVIC_DisableIRQ+0x40>)
    c322:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c326:	095b      	lsrs	r3, r3, #5
    c328:	2001      	movs	r0, #1
    c32a:	fa00 f202 	lsl.w	r2, r0, r2
    c32e:	3320      	adds	r3, #32
    c330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    c334:	f3bf 8f4f 	dsb	sy
}
    c338:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
    c33a:	f3bf 8f6f 	isb	sy
}
    c33e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
    c340:	bf00      	nop
    c342:	b002      	add	sp, #8
    c344:	4770      	bx	lr
    c346:	bf00      	nop
    c348:	e000e100 	.word	0xe000e100

0000c34c <hostint_handler>:
};

// ISR callback for the host IOINT
static void hostint_handler(void)
{
    bIosInt = true;
    c34c:	4b02      	ldr	r3, [pc, #8]	; (c358 <hostint_handler+0xc>)
    c34e:	2201      	movs	r2, #1
    c350:	701a      	strb	r2, [r3, #0]
}
    c352:	bf00      	nop
    c354:	4770      	bx	lr
    c356:	bf00      	nop
    c358:	1000105c 	.word	0x1000105c

0000c35c <pfnIOM_LRAM_Callback>:

static void pfnIOM_LRAM_Callback(void *pCallbackCtxt, uint32_t status)
{
    c35c:	b082      	sub	sp, #8
    c35e:	9001      	str	r0, [sp, #4]
    c360:	9100      	str	r1, [sp, #0]
    // Set the DMA complete flag.
    g_IOMDMAComplete = true;
    c362:	4b03      	ldr	r3, [pc, #12]	; (c370 <pfnIOM_LRAM_Callback+0x14>)
    c364:	2201      	movs	r2, #1
    c366:	701a      	strb	r2, [r3, #0]
}
    c368:	bf00      	nop
    c36a:	b002      	add	sp, #8
    c36c:	4770      	bx	lr
    c36e:	bf00      	nop
    c370:	10001154 	.word	0x10001154

0000c374 <am_iomaster0_isr>:
//
//! Take over default ISR for IOM 0. (Queue mode service)
//
void
am_iomaster0_isr(void)
{
    c374:	b500      	push	{lr}
    c376:	b083      	sub	sp, #12
    uint32_t ui32Status;

    if (!am_hal_iom_interrupt_status_get(g_IOMHandle, true, &ui32Status))
    c378:	4b0f      	ldr	r3, [pc, #60]	; (c3b8 <am_iomaster0_isr+0x44>)
    c37a:	681b      	ldr	r3, [r3, #0]
    c37c:	aa01      	add	r2, sp, #4
    c37e:	2101      	movs	r1, #1
    c380:	4618      	mov	r0, r3
    c382:	f002 f9cd 	bl	e720 <am_hal_iom_interrupt_status_get>
    c386:	4603      	mov	r3, r0
    c388:	2b00      	cmp	r3, #0
    c38a:	d110      	bne.n	c3ae <am_iomaster0_isr+0x3a>
    {
        if ( ui32Status )
    c38c:	9b01      	ldr	r3, [sp, #4]
    c38e:	2b00      	cmp	r3, #0
    c390:	d00d      	beq.n	c3ae <am_iomaster0_isr+0x3a>
        {
            am_hal_iom_interrupt_clear(g_IOMHandle, ui32Status);
    c392:	4b09      	ldr	r3, [pc, #36]	; (c3b8 <am_iomaster0_isr+0x44>)
    c394:	681b      	ldr	r3, [r3, #0]
    c396:	9a01      	ldr	r2, [sp, #4]
    c398:	4611      	mov	r1, r2
    c39a:	4618      	mov	r0, r3
    c39c:	f002 f9e4 	bl	e768 <am_hal_iom_interrupt_clear>
            am_hal_iom_interrupt_service(g_IOMHandle, ui32Status);
    c3a0:	4b05      	ldr	r3, [pc, #20]	; (c3b8 <am_iomaster0_isr+0x44>)
    c3a2:	681b      	ldr	r3, [r3, #0]
    c3a4:	9a01      	ldr	r2, [sp, #4]
    c3a6:	4611      	mov	r1, r2
    c3a8:	4618      	mov	r0, r3
    c3aa:	f002 f9f1 	bl	e790 <am_hal_iom_interrupt_service>
        }
    }
}
    c3ae:	bf00      	nop
    c3b0:	b003      	add	sp, #12
    c3b2:	f85d fb04 	ldr.w	pc, [sp], #4
    c3b6:	bf00      	nop
    c3b8:	10001150 	.word	0x10001150

0000c3bc <am_gpio_isr>:

void am_gpio_isr(void)
{
    c3bc:	b500      	push	{lr}
    c3be:	b083      	sub	sp, #12
    am_hal_gpio_interrupt_clear(pGpioIntStatusMask);
    am_hal_gpio_interrupt_service(pGpioIntStatusMask);
#elif defined(AM_PART_APOLLO3)
    uint64_t ui64Status;

    am_hal_gpio_interrupt_status_get(false, &ui64Status);
    c3c0:	466b      	mov	r3, sp
    c3c2:	4619      	mov	r1, r3
    c3c4:	2000      	movs	r0, #0
    c3c6:	f001 fefd 	bl	e1c4 <am_hal_gpio_interrupt_status_get>
    am_hal_gpio_interrupt_clear(ui64Status);
    c3ca:	e9dd 2300 	ldrd	r2, r3, [sp]
    c3ce:	4610      	mov	r0, r2
    c3d0:	4619      	mov	r1, r3
    c3d2:	f001 fedd 	bl	e190 <am_hal_gpio_interrupt_clear>
    am_hal_gpio_interrupt_service(ui64Status);
    c3d6:	e9dd 2300 	ldrd	r2, r3, [sp]
    c3da:	4610      	mov	r0, r2
    c3dc:	4619      	mov	r1, r3
    c3de:	f001 ff21 	bl	e224 <am_hal_gpio_interrupt_service>
#else
    #error Unknown device.
#endif
}
    c3e2:	bf00      	nop
    c3e4:	b003      	add	sp, #12
    c3e6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000c3ec <iom_slave_read>:

void iom_slave_read(bool bSpi, uint32_t offset, uint8_t *pBuf, uint32_t size)
{
    c3ec:	b500      	push	{lr}
    c3ee:	b08f      	sub	sp, #60	; 0x3c
    c3f0:	9102      	str	r1, [sp, #8]
    c3f2:	9201      	str	r2, [sp, #4]
    c3f4:	9300      	str	r3, [sp, #0]
    c3f6:	4603      	mov	r3, r0
    c3f8:	f88d 300f 	strb.w	r3, [sp, #15]
    am_hal_iom_transfer_t       Transaction;

    Transaction.ui8Priority     = 1;        // High priority for now.
    c3fc:	2301      	movs	r3, #1
    c3fe:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    Transaction.ui32InstrLen    = 1;
    c402:	2301      	movs	r3, #1
    c404:	9305      	str	r3, [sp, #20]
    Transaction.ui32Instr       = offset;
    c406:	9b02      	ldr	r3, [sp, #8]
    c408:	9306      	str	r3, [sp, #24]
    Transaction.eDirection      = AM_HAL_IOM_RX;
    c40a:	2301      	movs	r3, #1
    c40c:	f88d 3020 	strb.w	r3, [sp, #32]
    Transaction.ui32NumBytes    = size;
    c410:	9b00      	ldr	r3, [sp, #0]
    c412:	9307      	str	r3, [sp, #28]
    Transaction.pui32RxBuffer   = (uint32_t *)pBuf;
    c414:	9b01      	ldr	r3, [sp, #4]
    c416:	930a      	str	r3, [sp, #40]	; 0x28
    Transaction.bContinue       = false;
    c418:	2300      	movs	r3, #0
    c41a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    Transaction.ui8RepeatCount  = 0;
    c41e:	2300      	movs	r3, #0
    c420:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    Transaction.ui32PauseCondition = 0;
    c424:	2300      	movs	r3, #0
    c426:	930c      	str	r3, [sp, #48]	; 0x30
    Transaction.ui32StatusSetClr = 0;
    c428:	2300      	movs	r3, #0
    c42a:	930d      	str	r3, [sp, #52]	; 0x34

    if ( bSpi )
    c42c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c430:	2b00      	cmp	r3, #0
    c432:	d002      	beq.n	c43a <iom_slave_read+0x4e>
    {
        Transaction.uPeerInfo.ui32SpiChipSelect = AM_BSP_IOM0_CS_CHNL;
    c434:	2300      	movs	r3, #0
    c436:	9304      	str	r3, [sp, #16]
    c438:	e001      	b.n	c43e <iom_slave_read+0x52>
    }
    else
    {
        Transaction.uPeerInfo.ui32I2CDevAddr = I2C_ADDR;
    c43a:	2310      	movs	r3, #16
    c43c:	9304      	str	r3, [sp, #16]
    }
    g_IOMDMAComplete = false;
    c43e:	4b0c      	ldr	r3, [pc, #48]	; (c470 <iom_slave_read+0x84>)
    c440:	2200      	movs	r2, #0
    c442:	701a      	strb	r2, [r3, #0]
    am_hal_iom_nonblocking_transfer(g_IOMHandle, &Transaction, pfnIOM_LRAM_Callback, NULL);
    c444:	4b0b      	ldr	r3, [pc, #44]	; (c474 <iom_slave_read+0x88>)
    c446:	6818      	ldr	r0, [r3, #0]
    c448:	a904      	add	r1, sp, #16
    c44a:	2300      	movs	r3, #0
    c44c:	4a0a      	ldr	r2, [pc, #40]	; (c478 <iom_slave_read+0x8c>)
    c44e:	f002 fd37 	bl	eec0 <am_hal_iom_nonblocking_transfer>
    while (!g_IOMDMAComplete);
    c452:	bf00      	nop
    c454:	4b06      	ldr	r3, [pc, #24]	; (c470 <iom_slave_read+0x84>)
    c456:	781b      	ldrb	r3, [r3, #0]
    c458:	b2db      	uxtb	r3, r3
    c45a:	f083 0301 	eor.w	r3, r3, #1
    c45e:	b2db      	uxtb	r3, r3
    c460:	2b00      	cmp	r3, #0
    c462:	d1f7      	bne.n	c454 <iom_slave_read+0x68>
}
    c464:	bf00      	nop
    c466:	bf00      	nop
    c468:	b00f      	add	sp, #60	; 0x3c
    c46a:	f85d fb04 	ldr.w	pc, [sp], #4
    c46e:	bf00      	nop
    c470:	10001154 	.word	0x10001154
    c474:	10001150 	.word	0x10001150
    c478:	0000c35d 	.word	0x0000c35d

0000c47c <iom_slave_write>:

void iom_slave_write(bool bSpi, uint32_t offset, uint8_t *pBuf, uint32_t size)
{
    c47c:	b500      	push	{lr}
    c47e:	b08f      	sub	sp, #60	; 0x3c
    c480:	9102      	str	r1, [sp, #8]
    c482:	9201      	str	r2, [sp, #4]
    c484:	9300      	str	r3, [sp, #0]
    c486:	4603      	mov	r3, r0
    c488:	f88d 300f 	strb.w	r3, [sp, #15]
    am_hal_iom_transfer_t       Transaction;

    Transaction.ui8Priority     = 1;        // High priority for now.
    c48c:	2301      	movs	r3, #1
    c48e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    Transaction.ui32InstrLen    = 1;
    c492:	2301      	movs	r3, #1
    c494:	9305      	str	r3, [sp, #20]
    Transaction.ui32Instr       = (AM_IOSTEST_WRITE_CMD_BIT | offset);
    c496:	9b02      	ldr	r3, [sp, #8]
    c498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c49c:	9306      	str	r3, [sp, #24]
    Transaction.eDirection      = AM_HAL_IOM_TX;
    c49e:	2300      	movs	r3, #0
    c4a0:	f88d 3020 	strb.w	r3, [sp, #32]
    Transaction.ui32NumBytes    = size;
    c4a4:	9b00      	ldr	r3, [sp, #0]
    c4a6:	9307      	str	r3, [sp, #28]
    Transaction.pui32TxBuffer   = (uint32_t *)pBuf;
    c4a8:	9b01      	ldr	r3, [sp, #4]
    c4aa:	9309      	str	r3, [sp, #36]	; 0x24
    Transaction.bContinue       = false;
    c4ac:	2300      	movs	r3, #0
    c4ae:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    Transaction.ui8RepeatCount  = 0;
    c4b2:	2300      	movs	r3, #0
    c4b4:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    Transaction.ui32PauseCondition = 0;
    c4b8:	2300      	movs	r3, #0
    c4ba:	930c      	str	r3, [sp, #48]	; 0x30
    Transaction.ui32StatusSetClr = 0;
    c4bc:	2300      	movs	r3, #0
    c4be:	930d      	str	r3, [sp, #52]	; 0x34

    if ( bSpi )
    c4c0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c4c4:	2b00      	cmp	r3, #0
    c4c6:	d002      	beq.n	c4ce <iom_slave_write+0x52>
    {
        Transaction.uPeerInfo.ui32SpiChipSelect = AM_BSP_IOM0_CS_CHNL;
    c4c8:	2300      	movs	r3, #0
    c4ca:	9304      	str	r3, [sp, #16]
    c4cc:	e001      	b.n	c4d2 <iom_slave_write+0x56>
    }
    else
    {
        Transaction.uPeerInfo.ui32I2CDevAddr = I2C_ADDR;
    c4ce:	2310      	movs	r3, #16
    c4d0:	9304      	str	r3, [sp, #16]
    }
    g_IOMDMAComplete = false;
    c4d2:	4b0c      	ldr	r3, [pc, #48]	; (c504 <iom_slave_write+0x88>)
    c4d4:	2200      	movs	r2, #0
    c4d6:	701a      	strb	r2, [r3, #0]
    am_hal_iom_nonblocking_transfer(g_IOMHandle, &Transaction, pfnIOM_LRAM_Callback, NULL);
    c4d8:	4b0b      	ldr	r3, [pc, #44]	; (c508 <iom_slave_write+0x8c>)
    c4da:	6818      	ldr	r0, [r3, #0]
    c4dc:	a904      	add	r1, sp, #16
    c4de:	2300      	movs	r3, #0
    c4e0:	4a0a      	ldr	r2, [pc, #40]	; (c50c <iom_slave_write+0x90>)
    c4e2:	f002 fced 	bl	eec0 <am_hal_iom_nonblocking_transfer>
    while (!g_IOMDMAComplete);
    c4e6:	bf00      	nop
    c4e8:	4b06      	ldr	r3, [pc, #24]	; (c504 <iom_slave_write+0x88>)
    c4ea:	781b      	ldrb	r3, [r3, #0]
    c4ec:	b2db      	uxtb	r3, r3
    c4ee:	f083 0301 	eor.w	r3, r3, #1
    c4f2:	b2db      	uxtb	r3, r3
    c4f4:	2b00      	cmp	r3, #0
    c4f6:	d1f7      	bne.n	c4e8 <iom_slave_write+0x6c>
}
    c4f8:	bf00      	nop
    c4fa:	bf00      	nop
    c4fc:	b00f      	add	sp, #60	; 0x3c
    c4fe:	f85d fb04 	ldr.w	pc, [sp], #4
    c502:	bf00      	nop
    c504:	10001154 	.word	0x10001154
    c508:	10001150 	.word	0x10001150
    c50c:	0000c35d 	.word	0x0000c35d

0000c510 <iom_set_up>:

static void iom_set_up(uint32_t iomModule, bool bSpi)
{
    c510:	b500      	push	{lr}
    c512:	b087      	sub	sp, #28
    c514:	9001      	str	r0, [sp, #4]
    c516:	460b      	mov	r3, r1
    c518:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32_t ioIntEnable = HANDSHAKE_IOS_TO_IOM;
    c51c:	2302      	movs	r3, #2
    c51e:	9303      	str	r3, [sp, #12]

    //
    // Initialize the IOM.
    //
    am_hal_iom_initialize(iomModule, &g_IOMHandle);
    c520:	4931      	ldr	r1, [pc, #196]	; (c5e8 <iom_set_up+0xd8>)
    c522:	9801      	ldr	r0, [sp, #4]
    c524:	f002 f814 	bl	e550 <am_hal_iom_initialize>

    am_hal_iom_power_ctrl(g_IOMHandle, AM_HAL_SYSCTRL_WAKE, false);
    c528:	4b2f      	ldr	r3, [pc, #188]	; (c5e8 <iom_set_up+0xd8>)
    c52a:	681b      	ldr	r3, [r3, #0]
    c52c:	2200      	movs	r2, #0
    c52e:	2100      	movs	r1, #0
    c530:	4618      	mov	r0, r3
    c532:	f002 fa99 	bl	ea68 <am_hal_iom_power_ctrl>

    if ( bSpi )
    c536:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c53a:	2b00      	cmp	r3, #0
    c53c:	d00a      	beq.n	c554 <iom_set_up+0x44>
    {
        //
        // Set the required configuration settings for the IOM.
        //
        am_hal_iom_configure(g_IOMHandle, &g_sIOMSpiConfig);
    c53e:	4b2a      	ldr	r3, [pc, #168]	; (c5e8 <iom_set_up+0xd8>)
    c540:	681b      	ldr	r3, [r3, #0]
    c542:	492a      	ldr	r1, [pc, #168]	; (c5ec <iom_set_up+0xdc>)
    c544:	4618      	mov	r0, r3
    c546:	f002 fb67 	bl	ec18 <am_hal_iom_configure>

        //
        // Configure the IOM pins.
        //
        am_bsp_iom_pins_enable(iomModule, AM_HAL_IOM_SPI_MODE);
    c54a:	2100      	movs	r1, #0
    c54c:	9801      	ldr	r0, [sp, #4]
    c54e:	f003 f93b 	bl	f7c8 <am_bsp_iom_pins_enable>
    c552:	e009      	b.n	c568 <iom_set_up+0x58>
    else
    {
        //
        // Set the required configuration settings for the IOM.
        //
        am_hal_iom_configure(g_IOMHandle, &g_sIOMI2cConfig);
    c554:	4b24      	ldr	r3, [pc, #144]	; (c5e8 <iom_set_up+0xd8>)
    c556:	681b      	ldr	r3, [r3, #0]
    c558:	4925      	ldr	r1, [pc, #148]	; (c5f0 <iom_set_up+0xe0>)
    c55a:	4618      	mov	r0, r3
    c55c:	f002 fb5c 	bl	ec18 <am_hal_iom_configure>

        //
        // Configure the IOM pins.
        //
        am_bsp_iom_pins_enable(iomModule, AM_HAL_IOM_I2C_MODE);
    c560:	2101      	movs	r1, #1
    c562:	9801      	ldr	r0, [sp, #4]
    c564:	f003 f930 	bl	f7c8 <am_bsp_iom_pins_enable>
    }

    // Enable interrupts for NB send to work
    am_hal_iom_interrupt_enable(g_IOMHandle, 0xFF);
    c568:	4b1f      	ldr	r3, [pc, #124]	; (c5e8 <iom_set_up+0xd8>)
    c56a:	681b      	ldr	r3, [r3, #0]
    c56c:	21ff      	movs	r1, #255	; 0xff
    c56e:	4618      	mov	r0, r3
    c570:	f002 f8b8 	bl	e6e4 <am_hal_iom_interrupt_enable>
    NVIC_EnableIRQ(IOMSTR0_IRQn);
    c574:	2006      	movs	r0, #6
    c576:	f7ff fead 	bl	c2d4 <__NVIC_EnableIRQ>

    //
    // Enable the IOM.
    //
    am_hal_iom_enable(g_IOMHandle);
    c57a:	4b1b      	ldr	r3, [pc, #108]	; (c5e8 <iom_set_up+0xd8>)
    c57c:	681b      	ldr	r3, [r3, #0]
    c57e:	4618      	mov	r0, r3
    c580:	f002 f80e 	bl	e5a0 <am_hal_iom_enable>
    am_hal_gpio_pinconfig(HANDSHAKE_PIN, g_AM_BSP_GPIO_HANDSHAKE);
    c584:	4b1b      	ldr	r3, [pc, #108]	; (c5f4 <iom_set_up+0xe4>)
    c586:	6819      	ldr	r1, [r3, #0]
    c588:	200a      	movs	r0, #10
    c58a:	f001 fc45 	bl	de18 <am_hal_gpio_pinconfig>

    AM_HAL_GPIO_MASKCREATE(GpioIntMask);
    c58e:	f04f 0200 	mov.w	r2, #0
    c592:	f04f 0300 	mov.w	r3, #0
    c596:	e9cd 2304 	strd	r2, r3, [sp, #16]
    // Set up the host IO interrupt
    am_hal_gpio_interrupt_clear( AM_HAL_GPIO_MASKBIT(pGpioIntMask, HANDSHAKE_PIN));
    c59a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    c59e:	f04f 0300 	mov.w	r3, #0
    c5a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    c5a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    c5aa:	f001 fdf1 	bl	e190 <am_hal_gpio_interrupt_clear>
    // Register handler for IOS => IOM interrupt
    am_hal_gpio_interrupt_register(HANDSHAKE_PIN, hostint_handler);
    c5ae:	4912      	ldr	r1, [pc, #72]	; (c5f8 <iom_set_up+0xe8>)
    c5b0:	200a      	movs	r0, #10
    c5b2:	f001 fe27 	bl	e204 <am_hal_gpio_interrupt_register>
    am_hal_gpio_interrupt_enable(AM_HAL_GPIO_MASKBIT(pGpioIntMask, HANDSHAKE_PIN));
    c5b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    c5ba:	f04f 0300 	mov.w	r3, #0
    c5be:	e9cd 2304 	strd	r2, r3, [sp, #16]
    c5c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    c5c6:	f001 fda1 	bl	e10c <am_hal_gpio_interrupt_enable>
    NVIC_EnableIRQ(GPIO_IRQn);
    c5ca:	200d      	movs	r0, #13
    c5cc:	f7ff fe82 	bl	c2d4 <__NVIC_EnableIRQ>

    // Set up IOCTL interrupts
    // IOS ==> IOM
    iom_slave_write(bSpi, IOSOFFSET_INTEN, (uint8_t*)&ioIntEnable, 1);
    c5d0:	aa03      	add	r2, sp, #12
    c5d2:	f89d 0003 	ldrb.w	r0, [sp, #3]
    c5d6:	2301      	movs	r3, #1
    c5d8:	2178      	movs	r1, #120	; 0x78
    c5da:	f7ff ff4f 	bl	c47c <iom_slave_write>
}
    c5de:	bf00      	nop
    c5e0:	b007      	add	sp, #28
    c5e2:	f85d fb04 	ldr.w	pc, [sp], #4
    c5e6:	bf00      	nop
    c5e8:	10001150 	.word	0x10001150
    c5ec:	10001000 	.word	0x10001000
    c5f0:	10001014 	.word	0x10001014
    c5f4:	00011c2c 	.word	0x00011c2c
    c5f8:	0000c34d 	.word	0x0000c34d

0000c5fc <iom_clean_up>:

static void iom_clean_up(uint32_t iomModule, bool bSpi)
{
    c5fc:	b500      	push	{lr}
    c5fe:	b087      	sub	sp, #28
    c600:	9001      	str	r0, [sp, #4]
    c602:	460b      	mov	r3, r1
    c604:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32_t ioIntDisable = 0;
    c608:	2300      	movs	r3, #0
    c60a:	9303      	str	r3, [sp, #12]

    // Clean up IOCTL interrupts
    // IOS ==> IOM
    iom_slave_write(bSpi, IOSOFFSET_INTEN, (uint8_t*)&ioIntDisable, 1);
    c60c:	aa03      	add	r2, sp, #12
    c60e:	f89d 0003 	ldrb.w	r0, [sp, #3]
    c612:	2301      	movs	r3, #1
    c614:	2178      	movs	r1, #120	; 0x78
    c616:	f7ff ff31 	bl	c47c <iom_slave_write>

    //
    // Turn off the IOM for this operation.
    //
    am_hal_iom_disable(g_IOMHandle);
    c61a:	4b1c      	ldr	r3, [pc, #112]	; (c68c <iom_clean_up+0x90>)
    c61c:	681b      	ldr	r3, [r3, #0]
    c61e:	4618      	mov	r0, r3
    c620:	f002 f82a 	bl	e678 <am_hal_iom_disable>

    if (bSpi)
    c624:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c628:	2b00      	cmp	r3, #0
    c62a:	d004      	beq.n	c636 <iom_clean_up+0x3a>
    {
        //
        // Clean up IOM SPI pins. Attributes are set in am_bsp_gpio.h.
        //
        am_bsp_iom_pins_disable(iomModule, AM_HAL_IOM_SPI_MODE);
    c62c:	2100      	movs	r1, #0
    c62e:	9801      	ldr	r0, [sp, #4]
    c630:	f003 fa00 	bl	fa34 <am_bsp_iom_pins_disable>
    c634:	e003      	b.n	c63e <iom_clean_up+0x42>
    else
    {
        //
        // Clean up IOM I2C pins. Attributes are set in am_bsp_gpio.h.
        //
        am_bsp_iom_pins_disable(iomModule, AM_HAL_IOM_I2C_MODE);
    c636:	2101      	movs	r1, #1
    c638:	9801      	ldr	r0, [sp, #4]
    c63a:	f003 f9fb 	bl	fa34 <am_bsp_iom_pins_disable>
    }

    // Clean up the host IO interrupt
    am_hal_gpio_state_write(HANDSHAKE_PIN, AM_HAL_GPIO_OUTPUT_CLEAR);
    c63e:	2100      	movs	r1, #0
    c640:	200a      	movs	r0, #10
    c642:	f001 fd1f 	bl	e084 <am_hal_gpio_state_write>
    am_hal_gpio_pinconfig(HANDSHAKE_PIN, g_AM_BSP_GPIO_DISABLE);
    c646:	4b12      	ldr	r3, [pc, #72]	; (c690 <iom_clean_up+0x94>)
    c648:	6819      	ldr	r1, [r3, #0]
    c64a:	200a      	movs	r0, #10
    c64c:	f001 fbe4 	bl	de18 <am_hal_gpio_pinconfig>
    AM_HAL_GPIO_MASKCREATE(GpioIntMask);
    c650:	f04f 0200 	mov.w	r2, #0
    c654:	f04f 0300 	mov.w	r3, #0
    c658:	e9cd 2304 	strd	r2, r3, [sp, #16]
    am_hal_gpio_interrupt_disable(AM_HAL_GPIO_MASKBIT(pGpioIntMask, HANDSHAKE_PIN));
    c65c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    c660:	f04f 0300 	mov.w	r3, #0
    c664:	e9cd 2304 	strd	r2, r3, [sp, #16]
    c668:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    c66c:	f001 fd6e 	bl	e14c <am_hal_gpio_interrupt_disable>
    NVIC_DisableIRQ(GPIO_IRQn);
    c670:	200d      	movs	r0, #13
    c672:	f7ff fe49 	bl	c308 <__NVIC_DisableIRQ>

    //
    // Disable power to IOM.
    //
    am_hal_iom_power_ctrl(g_IOMHandle, AM_HAL_SYSCTRL_DEEPSLEEP, false);
    c676:	4b05      	ldr	r3, [pc, #20]	; (c68c <iom_clean_up+0x90>)
    c678:	681b      	ldr	r3, [r3, #0]
    c67a:	2200      	movs	r2, #0
    c67c:	2102      	movs	r1, #2
    c67e:	4618      	mov	r0, r3
    c680:	f002 f9f2 	bl	ea68 <am_hal_iom_power_ctrl>
}
    c684:	bf00      	nop
    c686:	b007      	add	sp, #28
    c688:	f85d fb04 	ldr.w	pc, [sp], #4
    c68c:	10001150 	.word	0x10001150
    c690:	00011c30 	.word	0x00011c30

0000c694 <verify_result>:

// Verify received data from IOS against the reference
static bool
verify_result(uint8_t length)
{
    c694:	b500      	push	{lr}
    c696:	b085      	sub	sp, #20
    c698:	4603      	mov	r3, r0
    c69a:	f88d 3007 	strb.w	r3, [sp, #7]
    if (g_pRefData[IOM_DATA_TAG] != g_pIomRecvBuf[IOM_DATA_TAG])
    c69e:	4b24      	ldr	r3, [pc, #144]	; (c730 <verify_result+0x9c>)
    c6a0:	781a      	ldrb	r2, [r3, #0]
    c6a2:	4b24      	ldr	r3, [pc, #144]	; (c734 <verify_result+0xa0>)
    c6a4:	781b      	ldrb	r3, [r3, #0]
    c6a6:	429a      	cmp	r2, r3
    c6a8:	d004      	beq.n	c6b4 <verify_result+0x20>
    {
        am_util_stdio_printf("Wrong Tag number!\n");
    c6aa:	4823      	ldr	r0, [pc, #140]	; (c738 <verify_result+0xa4>)
    c6ac:	f001 f8a2 	bl	d7f4 <am_util_stdio_printf>
        return false;
    c6b0:	2300      	movs	r3, #0
    c6b2:	e039      	b.n	c728 <verify_result+0x94>
    }

    if (g_pRefData[IOM_DATA_LENGTH] != g_pIomRecvBuf[IOM_DATA_LENGTH])
    c6b4:	4b1e      	ldr	r3, [pc, #120]	; (c730 <verify_result+0x9c>)
    c6b6:	785a      	ldrb	r2, [r3, #1]
    c6b8:	4b1e      	ldr	r3, [pc, #120]	; (c734 <verify_result+0xa0>)
    c6ba:	785b      	ldrb	r3, [r3, #1]
    c6bc:	429a      	cmp	r2, r3
    c6be:	d004      	beq.n	c6ca <verify_result+0x36>
    {
        am_util_stdio_printf("Wrong data length!\n");
    c6c0:	481e      	ldr	r0, [pc, #120]	; (c73c <verify_result+0xa8>)
    c6c2:	f001 f897 	bl	d7f4 <am_util_stdio_printf>
        return false;
    c6c6:	2300      	movs	r3, #0
    c6c8:	e02e      	b.n	c728 <verify_result+0x94>
    }
    for (uint8_t i = IOM_DATA_VALUE; i < length; i++)
    c6ca:	2302      	movs	r3, #2
    c6cc:	f88d 300f 	strb.w	r3, [sp, #15]
    c6d0:	e023      	b.n	c71a <verify_result+0x86>
    {
        if (g_pRefData[i] != (g_pIomRecvBuf[i] ^ TEST_XOR_BYTE))
    c6d2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c6d6:	4a16      	ldr	r2, [pc, #88]	; (c730 <verify_result+0x9c>)
    c6d8:	5cd2      	ldrb	r2, [r2, r3]
    c6da:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c6de:	4915      	ldr	r1, [pc, #84]	; (c734 <verify_result+0xa0>)
    c6e0:	5ccb      	ldrb	r3, [r1, r3]
    c6e2:	43db      	mvns	r3, r3
    c6e4:	b2db      	uxtb	r3, r3
    c6e6:	429a      	cmp	r2, r3
    c6e8:	d012      	beq.n	c710 <verify_result+0x7c>
        {
            am_util_stdio_printf("Buffer Validation failed @i=%d Rcvd 0x%x Expected 0x%x\n",
    c6ea:	f89d 100f 	ldrb.w	r1, [sp, #15]
                i, g_pIomRecvBuf[i], g_pRefData[i] ^ TEST_XOR_BYTE);
    c6ee:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c6f2:	4a10      	ldr	r2, [pc, #64]	; (c734 <verify_result+0xa0>)
    c6f4:	5cd3      	ldrb	r3, [r2, r3]
            am_util_stdio_printf("Buffer Validation failed @i=%d Rcvd 0x%x Expected 0x%x\n",
    c6f6:	4618      	mov	r0, r3
                i, g_pIomRecvBuf[i], g_pRefData[i] ^ TEST_XOR_BYTE);
    c6f8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c6fc:	4a0c      	ldr	r2, [pc, #48]	; (c730 <verify_result+0x9c>)
    c6fe:	5cd3      	ldrb	r3, [r2, r3]
            am_util_stdio_printf("Buffer Validation failed @i=%d Rcvd 0x%x Expected 0x%x\n",
    c700:	43db      	mvns	r3, r3
    c702:	b2db      	uxtb	r3, r3
    c704:	4602      	mov	r2, r0
    c706:	480e      	ldr	r0, [pc, #56]	; (c740 <verify_result+0xac>)
    c708:	f001 f874 	bl	d7f4 <am_util_stdio_printf>
            return false;
    c70c:	2300      	movs	r3, #0
    c70e:	e00b      	b.n	c728 <verify_result+0x94>
    for (uint8_t i = IOM_DATA_VALUE; i < length; i++)
    c710:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c714:	3301      	adds	r3, #1
    c716:	f88d 300f 	strb.w	r3, [sp, #15]
    c71a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    c71e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c722:	429a      	cmp	r2, r3
    c724:	d3d5      	bcc.n	c6d2 <verify_result+0x3e>
        }
    }
    return true;
    c726:	2301      	movs	r3, #1
}
    c728:	4618      	mov	r0, r3
    c72a:	b005      	add	sp, #20
    c72c:	f85d fb04 	ldr.w	pc, [sp], #4
    c730:	10001060 	.word	0x10001060
    c734:	100010d8 	.word	0x100010d8
    c738:	0000fd14 	.word	0x0000fd14
    c73c:	0000fd28 	.word	0x0000fd28
    c740:	0000fd3c 	.word	0x0000fd3c

0000c744 <main>:
//
// Main function.
//
//*****************************************************************************
int main(void)
{
    c744:	b500      	push	{lr}
    c746:	b089      	sub	sp, #36	; 0x24
    uint32_t iom = IOM_MODULE;
    c748:	2300      	movs	r3, #0
    c74a:	9304      	str	r3, [sp, #16]
    bool bSpi = USE_SPI;
    c74c:	2301      	movs	r3, #1
    c74e:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8_t data;
    uint8_t ui8Resp = 0;
    c752:	2300      	movs	r3, #0
    c754:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32_t i = 0;
    c758:	2300      	movs	r3, #0
    c75a:	9307      	str	r3, [sp, #28]
    uint32_t ui32Offset = 0;
    c75c:	2300      	movs	r3, #0
    c75e:	9306      	str	r3, [sp, #24]
    uint8_t ui8Tag = 1;
    c760:	2301      	movs	r3, #1
    c762:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8_t ui8Length = AM_IOS_LRAM_SIZE_MAX;
    c766:	2378      	movs	r3, #120	; 0x78
    c768:	f88d 3016 	strb.w	r3, [sp, #22]

    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c76c:	2100      	movs	r1, #0
    c76e:	2000      	movs	r0, #0
    c770:	f001 fa48 	bl	dc04 <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c774:	48b1      	ldr	r0, [pc, #708]	; (ca3c <main+0x2f8>)
    c776:	f001 f89d 	bl	d8b4 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c77a:	f001 f8bf 	bl	d8fc <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    c77e:	f002 ffe3 	bl	f748 <am_bsp_low_power_init>

    //
    // Enable the ITM print interface.
    //
    am_bsp_itm_printf_enable();
    c782:	f003 f801 	bl	f788 <am_bsp_itm_printf_enable>

    //
    // Clear the terminal and print the banner.
    //
    am_util_stdio_terminal_clear();
    c786:	f001 f855 	bl	d834 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("IOS Test Host.\n");
    c78a:	48ad      	ldr	r0, [pc, #692]	; (ca40 <main+0x2fc>)
    c78c:	f001 f832 	bl	d7f4 <am_util_stdio_printf>


    //
    // Allow time for all printing to finish.
    //
    am_util_delay_ms(10);
    c790:	200a      	movs	r0, #10
    c792:	f000 f96f 	bl	ca74 <am_util_delay_ms>

    // Initialize the Trigger GPIO.
    am_hal_gpio_pinconfig(IOM_TRIGGER_GPIO, g_AM_HAL_GPIO_OUTPUT);
    c796:	4bab      	ldr	r3, [pc, #684]	; (ca44 <main+0x300>)
    c798:	6819      	ldr	r1, [r3, #0]
    c79a:	2000      	movs	r0, #0
    c79c:	f001 fb3c 	bl	de18 <am_hal_gpio_pinconfig>

    //
    // Enable Interrupts.
    //
    am_hal_interrupt_master_enable();
    c7a0:	f001 fd9e 	bl	e2e0 <am_hal_interrupt_master_enable>
    //
#if defined(MIKROE_1032) || defined(MIKROE_2529)
    g_sIOMI2cConfig.ui32ClockFreq = AM_HAL_IOM_400KHZ;
#endif

    iom_set_up(iom, bSpi);
    c7a4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c7a8:	4619      	mov	r1, r3
    c7aa:	9804      	ldr	r0, [sp, #16]
    c7ac:	f7ff feb0 	bl	c510 <iom_set_up>

    // Make sure the print is complete
    am_util_delay_ms(100);
    c7b0:	2064      	movs	r0, #100	; 0x64
    c7b2:	f000 f95f 	bl	ca74 <am_util_delay_ms>

    // Init buffer
    for (i = 0; i < AM_IOS_LRAM_SIZE_MAX; i++)
    c7b6:	2300      	movs	r3, #0
    c7b8:	9307      	str	r3, [sp, #28]
    c7ba:	e00c      	b.n	c7d6 <main+0x92>
    {
        g_pIomRecvBuf[i] = INBUFFER_EMPTY;
    c7bc:	4aa2      	ldr	r2, [pc, #648]	; (ca48 <main+0x304>)
    c7be:	9b07      	ldr	r3, [sp, #28]
    c7c0:	4413      	add	r3, r2
    c7c2:	22ee      	movs	r2, #238	; 0xee
    c7c4:	701a      	strb	r2, [r3, #0]
        g_pRefData[i]    = INBUFFER_EMPTY;
    c7c6:	4aa1      	ldr	r2, [pc, #644]	; (ca4c <main+0x308>)
    c7c8:	9b07      	ldr	r3, [sp, #28]
    c7ca:	4413      	add	r3, r2
    c7cc:	22ee      	movs	r2, #238	; 0xee
    c7ce:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < AM_IOS_LRAM_SIZE_MAX; i++)
    c7d0:	9b07      	ldr	r3, [sp, #28]
    c7d2:	3301      	adds	r3, #1
    c7d4:	9307      	str	r3, [sp, #28]
    c7d6:	9b07      	ldr	r3, [sp, #28]
    c7d8:	2b77      	cmp	r3, #119	; 0x77
    c7da:	d9ef      	bls.n	c7bc <main+0x78>
    }

    // First handshake
    data = AM_IOSTEST_CMD_START_DATA;
    c7dc:	23fd      	movs	r3, #253	; 0xfd
    c7de:	f88d 3003 	strb.w	r3, [sp, #3]
    iom_slave_write(bSpi, IOSOFFSET_HANDSHAKE, &data, 1);
    c7e2:	f10d 0203 	add.w	r2, sp, #3
    c7e6:	f89d 000f 	ldrb.w	r0, [sp, #15]
    c7ea:	2301      	movs	r3, #1
    c7ec:	2100      	movs	r1, #0
    c7ee:	f7ff fe45 	bl	c47c <iom_slave_write>
    while (1)
    {
        //
        // Disable interrupt while we decide whether we're going to sleep.
        //
        uint32_t ui32IntStatus = am_hal_interrupt_master_disable();
    c7f2:	f001 fd79 	bl	e2e8 <am_hal_interrupt_master_disable>
    c7f6:	9002      	str	r0, [sp, #8]

        if ( bIosInt == true )
    c7f8:	4b95      	ldr	r3, [pc, #596]	; (ca50 <main+0x30c>)
    c7fa:	781b      	ldrb	r3, [r3, #0]
    c7fc:	b2db      	uxtb	r3, r3
    c7fe:	2b00      	cmp	r3, #0
    c800:	d05a      	beq.n	c8b8 <main+0x174>
        {
            //
            // Enable interrupts
            //
            am_hal_interrupt_master_set(ui32IntStatus);
    c802:	9802      	ldr	r0, [sp, #8]
    c804:	f001 fd74 	bl	e2f0 <am_hal_interrupt_master_set>
            bIosInt = false;
    c808:	4b91      	ldr	r3, [pc, #580]	; (ca50 <main+0x30c>)
    c80a:	2200      	movs	r2, #0
    c80c:	701a      	strb	r2, [r3, #0]
            // Read & Clear the IOINT status
            iom_slave_read(bSpi, IOSOFFSET_INTSTAT, &data, 1);
    c80e:	f10d 0203 	add.w	r2, sp, #3
    c812:	f89d 000f 	ldrb.w	r0, [sp, #15]
    c816:	2301      	movs	r3, #1
    c818:	2179      	movs	r1, #121	; 0x79
    c81a:	f7ff fde7 	bl	c3ec <iom_slave_read>
            if ( data & HANDSHAKE_IOS_TO_IOM )
    c81e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c822:	f003 0302 	and.w	r3, r3, #2
    c826:	2b00      	cmp	r3, #0
    c828:	d0e3      	beq.n	c7f2 <main+0xae>
            {   // We need to clear the bit by writing to IOS
                data = HANDSHAKE_IOS_TO_IOM;
    c82a:	2302      	movs	r3, #2
    c82c:	f88d 3003 	strb.w	r3, [sp, #3]
                iom_slave_write(bSpi, IOSOFFSET_INTCLR, &data, 1);
    c830:	f10d 0203 	add.w	r2, sp, #3
    c834:	f89d 000f 	ldrb.w	r0, [sp, #15]
    c838:	2301      	movs	r3, #1
    c83a:	217a      	movs	r1, #122	; 0x7a
    c83c:	f7ff fe1e 	bl	c47c <iom_slave_write>
                iom_slave_read(bSpi, IOSOFFSET_HANDSHAKE, &ui8Resp, 1);
    c840:	f10d 0202 	add.w	r2, sp, #2
    c844:	f89d 000f 	ldrb.w	r0, [sp, #15]
    c848:	2301      	movs	r3, #1
    c84a:	2100      	movs	r1, #0
    c84c:	f7ff fdce 	bl	c3ec <iom_slave_read>
                if (AM_IOSTEST_CMD_ACK_DATA == ui8Resp)
    c850:	f89d 3002 	ldrb.w	r3, [sp, #2]
    c854:	2bfe      	cmp	r3, #254	; 0xfe
    c856:	d120      	bne.n	c89a <main+0x156>
                {
                    am_util_stdio_printf("\nHandshake success!\n");
    c858:	487e      	ldr	r0, [pc, #504]	; (ca54 <main+0x310>)
    c85a:	f000 ffcb 	bl	d7f4 <am_util_stdio_printf>
                    g_pRefData[IOM_DATA_TAG] = ui8Tag;
    c85e:	4a7b      	ldr	r2, [pc, #492]	; (ca4c <main+0x308>)
    c860:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c864:	7013      	strb	r3, [r2, #0]
                    g_pRefData[IOM_DATA_LENGTH] = ui8Length;
    c866:	4a79      	ldr	r2, [pc, #484]	; (ca4c <main+0x308>)
    c868:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c86c:	7053      	strb	r3, [r2, #1]
                    memcpy(&g_pRefData[IOM_DATA_VALUE], &g_pui8TestArray[ui32Offset], ui8Length - AM_IOS_HEADER_SIZE);
    c86e:	9b06      	ldr	r3, [sp, #24]
    c870:	4a79      	ldr	r2, [pc, #484]	; (ca58 <main+0x314>)
    c872:	1899      	adds	r1, r3, r2
    c874:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c878:	3b02      	subs	r3, #2
    c87a:	461a      	mov	r2, r3
    c87c:	4877      	ldr	r0, [pc, #476]	; (ca5c <main+0x318>)
    c87e:	f7ff fc3f 	bl	c100 <memcpy>
                    iom_slave_write(bSpi, 0, g_pRefData, ui8Length);
    c882:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c886:	f89d 000f 	ldrb.w	r0, [sp, #15]
    c88a:	4a70      	ldr	r2, [pc, #448]	; (ca4c <main+0x308>)
    c88c:	2100      	movs	r1, #0
    c88e:	f7ff fdf5 	bl	c47c <iom_slave_write>
                    am_util_stdio_printf("\nStart data transmit!\n");
    c892:	4873      	ldr	r0, [pc, #460]	; (ca60 <main+0x31c>)
    c894:	f000 ffae 	bl	d7f4 <am_util_stdio_printf>
                    break;
    c898:	e015      	b.n	c8c6 <main+0x182>
                }
                else
                {   // Keep trying handshake
                    am_util_stdio_printf("\nHandshake fail, try again!\n");
    c89a:	4872      	ldr	r0, [pc, #456]	; (ca64 <main+0x320>)
    c89c:	f000 ffaa 	bl	d7f4 <am_util_stdio_printf>
                    data = AM_IOSTEST_CMD_START_DATA;
    c8a0:	23fd      	movs	r3, #253	; 0xfd
    c8a2:	f88d 3003 	strb.w	r3, [sp, #3]
                    iom_slave_write(bSpi, IOSOFFSET_HANDSHAKE, &data, 1);
    c8a6:	f10d 0203 	add.w	r2, sp, #3
    c8aa:	f89d 000f 	ldrb.w	r0, [sp, #15]
    c8ae:	2301      	movs	r3, #1
    c8b0:	2100      	movs	r1, #0
    c8b2:	f7ff fde3 	bl	c47c <iom_slave_write>
    c8b6:	e79c      	b.n	c7f2 <main+0xae>
                }
            }
        }
        else
        {
            am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c8b8:	2001      	movs	r0, #1
    c8ba:	f002 fcfd 	bl	f2b8 <am_hal_sysctrl_sleep>
            //
            // Enable interrupts
            //
            am_hal_interrupt_master_set(ui32IntStatus);
    c8be:	9802      	ldr	r0, [sp, #8]
    c8c0:	f001 fd16 	bl	e2f0 <am_hal_interrupt_master_set>
    {
    c8c4:	e795      	b.n	c7f2 <main+0xae>
    while (1)
    {
        //
        // Disable interrupt while we decide whether we're going to sleep.
        //
        uint32_t ui32IntStatus = am_hal_interrupt_master_disable();
    c8c6:	f001 fd0f 	bl	e2e8 <am_hal_interrupt_master_disable>
    c8ca:	9001      	str	r0, [sp, #4]

        if ( bIosInt == true )
    c8cc:	4b60      	ldr	r3, [pc, #384]	; (ca50 <main+0x30c>)
    c8ce:	781b      	ldrb	r3, [r3, #0]
    c8d0:	b2db      	uxtb	r3, r3
    c8d2:	2b00      	cmp	r3, #0
    c8d4:	f000 80a0 	beq.w	ca18 <main+0x2d4>
        {
            //
            // Enable interrupts
            //
            am_hal_interrupt_master_set(ui32IntStatus);
    c8d8:	9801      	ldr	r0, [sp, #4]
    c8da:	f001 fd09 	bl	e2f0 <am_hal_interrupt_master_set>
            bIosInt = false;
    c8de:	4b5c      	ldr	r3, [pc, #368]	; (ca50 <main+0x30c>)
    c8e0:	2200      	movs	r2, #0
    c8e2:	701a      	strb	r2, [r3, #0]
            // Read & Clear the IOINT status
            iom_slave_read(bSpi, IOSOFFSET_INTSTAT, &data, 1);
    c8e4:	f10d 0203 	add.w	r2, sp, #3
    c8e8:	f89d 000f 	ldrb.w	r0, [sp, #15]
    c8ec:	2301      	movs	r3, #1
    c8ee:	2179      	movs	r1, #121	; 0x79
    c8f0:	f7ff fd7c 	bl	c3ec <iom_slave_read>
            if ( data & HANDSHAKE_IOS_TO_IOM )
    c8f4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c8f8:	f003 0302 	and.w	r3, r3, #2
    c8fc:	2b00      	cmp	r3, #0
    c8fe:	d0e2      	beq.n	c8c6 <main+0x182>
            {   // We need to clear the bit by writing to IOS
                data = HANDSHAKE_IOS_TO_IOM;
    c900:	2302      	movs	r3, #2
    c902:	f88d 3003 	strb.w	r3, [sp, #3]
                iom_slave_write(bSpi, IOSOFFSET_INTCLR, &data, 1);
    c906:	f10d 0203 	add.w	r2, sp, #3
    c90a:	f89d 000f 	ldrb.w	r0, [sp, #15]
    c90e:	2301      	movs	r3, #1
    c910:	217a      	movs	r1, #122	; 0x7a
    c912:	f7ff fdb3 	bl	c47c <iom_slave_write>
                iom_slave_read(bSpi, 0, g_pIomRecvBuf, ui8Length);
    c916:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c91a:	f89d 000f 	ldrb.w	r0, [sp, #15]
    c91e:	4a4a      	ldr	r2, [pc, #296]	; (ca48 <main+0x304>)
    c920:	2100      	movs	r1, #0
    c922:	f7ff fd63 	bl	c3ec <iom_slave_read>
                // Wait for read complete
                am_util_delay_us(100);
    c926:	2064      	movs	r0, #100	; 0x64
    c928:	f000 f8c0 	bl	caac <am_util_delay_us>
                // Verify received data at IOM
                ui8Resp = verify_result(ui8Length);
    c92c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c930:	4618      	mov	r0, r3
    c932:	f7ff feaf 	bl	c694 <verify_result>
    c936:	4603      	mov	r3, r0
    c938:	f88d 3002 	strb.w	r3, [sp, #2]
                if (ui8Resp)
    c93c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    c940:	2b00      	cmp	r3, #0
    c942:	d065      	beq.n	ca10 <main+0x2cc>
                {
                    am_util_stdio_printf("\nTransmit success! Start address: 0x%x Data Size: 0x%x\n", ui32Offset, ui8Length - AM_IOS_HEADER_SIZE);
    c944:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c948:	3b02      	subs	r3, #2
    c94a:	461a      	mov	r2, r3
    c94c:	9906      	ldr	r1, [sp, #24]
    c94e:	4846      	ldr	r0, [pc, #280]	; (ca68 <main+0x324>)
    c950:	f000 ff50 	bl	d7f4 <am_util_stdio_printf>
                    // Reset the buffers
                    for (i = 0; i < AM_IOS_LRAM_SIZE_MAX; i++)
    c954:	2300      	movs	r3, #0
    c956:	9307      	str	r3, [sp, #28]
    c958:	e00c      	b.n	c974 <main+0x230>
                    {
                        g_pIomRecvBuf[i] = INBUFFER_EMPTY;
    c95a:	4a3b      	ldr	r2, [pc, #236]	; (ca48 <main+0x304>)
    c95c:	9b07      	ldr	r3, [sp, #28]
    c95e:	4413      	add	r3, r2
    c960:	22ee      	movs	r2, #238	; 0xee
    c962:	701a      	strb	r2, [r3, #0]
                        g_pRefData[i]    = INBUFFER_EMPTY;
    c964:	4a39      	ldr	r2, [pc, #228]	; (ca4c <main+0x308>)
    c966:	9b07      	ldr	r3, [sp, #28]
    c968:	4413      	add	r3, r2
    c96a:	22ee      	movs	r2, #238	; 0xee
    c96c:	701a      	strb	r2, [r3, #0]
                    for (i = 0; i < AM_IOS_LRAM_SIZE_MAX; i++)
    c96e:	9b07      	ldr	r3, [sp, #28]
    c970:	3301      	adds	r3, #1
    c972:	9307      	str	r3, [sp, #28]
    c974:	9b07      	ldr	r3, [sp, #28]
    c976:	2b77      	cmp	r3, #119	; 0x77
    c978:	d9ef      	bls.n	c95a <main+0x216>
                    }
                    ui32Offset += ui8Length - AM_IOS_HEADER_SIZE;
    c97a:	f89d 2016 	ldrb.w	r2, [sp, #22]
    c97e:	9b06      	ldr	r3, [sp, #24]
    c980:	4413      	add	r3, r2
    c982:	3b02      	subs	r3, #2
    c984:	9306      	str	r3, [sp, #24]
                    if (ui32Offset >= TEST_ARRAY_SIZE)
    c986:	9b06      	ldr	r3, [sp, #24]
    c988:	f641 52d7 	movw	r2, #7639	; 0x1dd7
    c98c:	4293      	cmp	r3, r2
    c98e:	d90e      	bls.n	c9ae <main+0x26a>
                    {
                        data = AM_IOSTEST_CMD_STOP_DATA;
    c990:	23ff      	movs	r3, #255	; 0xff
    c992:	f88d 3003 	strb.w	r3, [sp, #3]
                        iom_slave_write(bSpi, IOSOFFSET_HANDSHAKE, &data, 1);
    c996:	f10d 0203 	add.w	r2, sp, #3
    c99a:	f89d 000f 	ldrb.w	r0, [sp, #15]
    c99e:	2301      	movs	r3, #1
    c9a0:	2100      	movs	r1, #0
    c9a2:	f7ff fd6b 	bl	c47c <iom_slave_write>
                        am_util_stdio_printf("\nIOM transmit complete!\n");
    c9a6:	4831      	ldr	r0, [pc, #196]	; (ca6c <main+0x328>)
    c9a8:	f000 ff24 	bl	d7f4 <am_util_stdio_printf>
                        break;
    c9ac:	e03b      	b.n	ca26 <main+0x2e2>
                    }
                    else
                    {
                        if (TEST_ARRAY_SIZE - ui32Offset >= AM_IOS_MAX_DATA_SIZE)
    c9ae:	9b06      	ldr	r3, [sp, #24]
    c9b0:	f5c3 53ee 	rsb	r3, r3, #7616	; 0x1dc0
    c9b4:	3318      	adds	r3, #24
    c9b6:	2b75      	cmp	r3, #117	; 0x75
    c9b8:	d903      	bls.n	c9c2 <main+0x27e>
                        {
                            ui8Length = AM_IOS_LRAM_SIZE_MAX;
    c9ba:	2378      	movs	r3, #120	; 0x78
    c9bc:	f88d 3016 	strb.w	r3, [sp, #22]
    c9c0:	e006      	b.n	c9d0 <main+0x28c>
                        }
                        else
                        {
                            ui8Length = TEST_ARRAY_SIZE - ui32Offset + AM_IOS_HEADER_SIZE;
    c9c2:	9b06      	ldr	r3, [sp, #24]
    c9c4:	b2da      	uxtb	r2, r3
    c9c6:	f06f 0325 	mvn.w	r3, #37	; 0x25
    c9ca:	1a9b      	subs	r3, r3, r2
    c9cc:	f88d 3016 	strb.w	r3, [sp, #22]
                        }
                        ui8Tag++;
    c9d0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c9d4:	3301      	adds	r3, #1
    c9d6:	f88d 3017 	strb.w	r3, [sp, #23]
                        g_pRefData[IOM_DATA_TAG] = ui8Tag;
    c9da:	4a1c      	ldr	r2, [pc, #112]	; (ca4c <main+0x308>)
    c9dc:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c9e0:	7013      	strb	r3, [r2, #0]
                        g_pRefData[IOM_DATA_LENGTH] = ui8Length;
    c9e2:	4a1a      	ldr	r2, [pc, #104]	; (ca4c <main+0x308>)
    c9e4:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c9e8:	7053      	strb	r3, [r2, #1]
                        memcpy(&g_pRefData[IOM_DATA_VALUE], &g_pui8TestArray[ui32Offset], ui8Length - AM_IOS_HEADER_SIZE);
    c9ea:	9b06      	ldr	r3, [sp, #24]
    c9ec:	4a1a      	ldr	r2, [pc, #104]	; (ca58 <main+0x314>)
    c9ee:	1899      	adds	r1, r3, r2
    c9f0:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c9f4:	3b02      	subs	r3, #2
    c9f6:	461a      	mov	r2, r3
    c9f8:	4818      	ldr	r0, [pc, #96]	; (ca5c <main+0x318>)
    c9fa:	f7ff fb81 	bl	c100 <memcpy>
                        iom_slave_write(bSpi, 0, g_pRefData, ui8Length);
    c9fe:	f89d 3016 	ldrb.w	r3, [sp, #22]
    ca02:	f89d 000f 	ldrb.w	r0, [sp, #15]
    ca06:	4a11      	ldr	r2, [pc, #68]	; (ca4c <main+0x308>)
    ca08:	2100      	movs	r1, #0
    ca0a:	f7ff fd37 	bl	c47c <iom_slave_write>
    ca0e:	e75a      	b.n	c8c6 <main+0x182>
                    }
                }
                else
                {
                    am_util_stdio_printf("\nIOM transmit fail!\n");
    ca10:	4817      	ldr	r0, [pc, #92]	; (ca70 <main+0x32c>)
    ca12:	f000 feef 	bl	d7f4 <am_util_stdio_printf>
                    break;
    ca16:	e006      	b.n	ca26 <main+0x2e2>
                }
            }
        }
        else
        {
            am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    ca18:	2001      	movs	r0, #1
    ca1a:	f002 fc4d 	bl	f2b8 <am_hal_sysctrl_sleep>
            //
            // Enable interrupts
            //
            am_hal_interrupt_master_set(ui32IntStatus);
    ca1e:	9801      	ldr	r0, [sp, #4]
    ca20:	f001 fc66 	bl	e2f0 <am_hal_interrupt_master_set>
    {
    ca24:	e74f      	b.n	c8c6 <main+0x182>
        }
    }
    iom_clean_up(iom, bSpi);
    ca26:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ca2a:	4619      	mov	r1, r3
    ca2c:	9804      	ldr	r0, [sp, #16]
    ca2e:	f7ff fde5 	bl	c5fc <iom_clean_up>
    while (1)
    {
        //
        // Go to Deep Sleep.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    ca32:	2001      	movs	r0, #1
    ca34:	f002 fc40 	bl	f2b8 <am_hal_sysctrl_sleep>
    ca38:	e7fb      	b.n	ca32 <main+0x2ee>
    ca3a:	bf00      	nop
    ca3c:	00011c34 	.word	0x00011c34
    ca40:	0000fd74 	.word	0x0000fd74
    ca44:	00011c3c 	.word	0x00011c3c
    ca48:	100010d8 	.word	0x100010d8
    ca4c:	10001060 	.word	0x10001060
    ca50:	1000105c 	.word	0x1000105c
    ca54:	0000fd84 	.word	0x0000fd84
    ca58:	0000fe54 	.word	0x0000fe54
    ca5c:	10001062 	.word	0x10001062
    ca60:	0000fd9c 	.word	0x0000fd9c
    ca64:	0000fdb4 	.word	0x0000fdb4
    ca68:	0000fdd4 	.word	0x0000fdd4
    ca6c:	0000fe0c 	.word	0x0000fe0c
    ca70:	0000fe28 	.word	0x0000fe28

0000ca74 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    ca74:	b500      	push	{lr}
    ca76:	b089      	sub	sp, #36	; 0x24
    ca78:	9001      	str	r0, [sp, #4]
    am_hal_delay_us( ui32MilliSeconds * 1000);
#else // AM_PART_APOLLO4
    uint32_t ui32Loops, ui32HFRC;
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    ca7a:	ab03      	add	r3, sp, #12
    ca7c:	4618      	mov	r0, r3
    ca7e:	f001 f95d 	bl	dd3c <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
    ca82:	9b03      	ldr	r3, [sp, #12]
    ca84:	9307      	str	r3, [sp, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    ca86:	9b07      	ldr	r3, [sp, #28]
    ca88:	4a07      	ldr	r2, [pc, #28]	; (caa8 <am_util_delay_ms+0x34>)
    ca8a:	fba2 2303 	umull	r2, r3, r2, r3
    ca8e:	099a      	lsrs	r2, r3, #6
    ca90:	9b01      	ldr	r3, [sp, #4]
    ca92:	fb02 f303 	mul.w	r3, r2, r3
    ca96:	9306      	str	r3, [sp, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    ca98:	9806      	ldr	r0, [sp, #24]
    ca9a:	f001 f96d 	bl	dd78 <am_hal_flash_delay>
#endif // AM_PART_APOLLO4
}
    ca9e:	bf00      	nop
    caa0:	b009      	add	sp, #36	; 0x24
    caa2:	f85d fb04 	ldr.w	pc, [sp], #4
    caa6:	bf00      	nop
    caa8:	057619f1 	.word	0x057619f1

0000caac <am_util_delay_us>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_us(uint32_t ui32MicroSeconds)
{
    caac:	b500      	push	{lr}
    caae:	b089      	sub	sp, #36	; 0x24
    cab0:	9001      	str	r0, [sp, #4]
#else // AM_PART_APOLLO4
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    cab2:	ab03      	add	r3, sp, #12
    cab4:	4618      	mov	r0, r3
    cab6:	f001 f941 	bl	dd3c <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
    caba:	9b03      	ldr	r3, [sp, #12]
    cabc:	9307      	str	r3, [sp, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MicroSeconds * (ui32HFRC / 3000000);
    cabe:	9b07      	ldr	r3, [sp, #28]
    cac0:	4a07      	ldr	r2, [pc, #28]	; (cae0 <am_util_delay_us+0x34>)
    cac2:	fba2 2303 	umull	r2, r3, r2, r3
    cac6:	0c9a      	lsrs	r2, r3, #18
    cac8:	9b01      	ldr	r3, [sp, #4]
    caca:	fb02 f303 	mul.w	r3, r2, r3
    cace:	9306      	str	r3, [sp, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    cad0:	9806      	ldr	r0, [sp, #24]
    cad2:	f001 f951 	bl	dd78 <am_hal_flash_delay>
#endif // AM_PART_APOLLO4
}
    cad6:	bf00      	nop
    cad8:	b009      	add	sp, #36	; 0x24
    cada:	f85d fb04 	ldr.w	pc, [sp], #4
    cade:	bf00      	nop
    cae0:	165e9f81 	.word	0x165e9f81

0000cae4 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    cae4:	b082      	sub	sp, #8
    cae6:	9001      	str	r0, [sp, #4]
    g_pfnCharPrint = pfnCharPrint;
    cae8:	4a02      	ldr	r2, [pc, #8]	; (caf4 <am_util_stdio_printf_init+0x10>)
    caea:	9b01      	ldr	r3, [sp, #4]
    caec:	6013      	str	r3, [r2, #0]
}
    caee:	bf00      	nop
    caf0:	b002      	add	sp, #8
    caf2:	4770      	bx	lr
    caf4:	10002158 	.word	0x10002158

0000caf8 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    caf8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    cafc:	b098      	sub	sp, #96	; 0x60
    cafe:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    cb02:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    cb06:	f04f 0000 	mov.w	r0, #0
    cb0a:	f04f 0100 	mov.w	r1, #0
    cb0e:	0018      	movs	r0, r3
    cb10:	2100      	movs	r1, #0
    cb12:	ea50 0301 	orrs.w	r3, r0, r1
    cb16:	f000 80b0 	beq.w	cc7a <divu64_10+0x182>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    cb1a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    cb1e:	f04f 0400 	mov.w	r4, #0
    cb22:	f04f 0500 	mov.w	r5, #0
    cb26:	0854      	lsrs	r4, r2, #1
    cb28:	ea44 74c3 	orr.w	r4, r4, r3, lsl #31
    cb2c:	085d      	lsrs	r5, r3, #1
    cb2e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    cb32:	f04f 0000 	mov.w	r0, #0
    cb36:	f04f 0100 	mov.w	r1, #0
    cb3a:	0890      	lsrs	r0, r2, #2
    cb3c:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
    cb40:	0899      	lsrs	r1, r3, #2
    cb42:	eb14 0a00 	adds.w	sl, r4, r0
    cb46:	eb45 0b01 	adc.w	fp, r5, r1
    cb4a:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
        q64 += (q64 >> 4);
    cb4e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cb52:	f04f 0000 	mov.w	r0, #0
    cb56:	f04f 0100 	mov.w	r1, #0
    cb5a:	0910      	lsrs	r0, r2, #4
    cb5c:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
    cb60:	0919      	lsrs	r1, r3, #4
    cb62:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cb66:	1814      	adds	r4, r2, r0
    cb68:	9402      	str	r4, [sp, #8]
    cb6a:	414b      	adcs	r3, r1
    cb6c:	9303      	str	r3, [sp, #12]
    cb6e:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    cb72:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 8);
    cb76:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cb7a:	f04f 0000 	mov.w	r0, #0
    cb7e:	f04f 0100 	mov.w	r1, #0
    cb82:	0a10      	lsrs	r0, r2, #8
    cb84:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
    cb88:	0a19      	lsrs	r1, r3, #8
    cb8a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cb8e:	1814      	adds	r4, r2, r0
    cb90:	9404      	str	r4, [sp, #16]
    cb92:	414b      	adcs	r3, r1
    cb94:	9305      	str	r3, [sp, #20]
    cb96:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    cb9a:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 16);
    cb9e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cba2:	f04f 0000 	mov.w	r0, #0
    cba6:	f04f 0100 	mov.w	r1, #0
    cbaa:	0c10      	lsrs	r0, r2, #16
    cbac:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    cbb0:	0c19      	lsrs	r1, r3, #16
    cbb2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cbb6:	1814      	adds	r4, r2, r0
    cbb8:	9406      	str	r4, [sp, #24]
    cbba:	414b      	adcs	r3, r1
    cbbc:	9307      	str	r3, [sp, #28]
    cbbe:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
    cbc2:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 32);
    cbc6:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cbca:	f04f 0000 	mov.w	r0, #0
    cbce:	f04f 0100 	mov.w	r1, #0
    cbd2:	0018      	movs	r0, r3
    cbd4:	2100      	movs	r1, #0
    cbd6:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cbda:	1814      	adds	r4, r2, r0
    cbdc:	9408      	str	r4, [sp, #32]
    cbde:	414b      	adcs	r3, r1
    cbe0:	9309      	str	r3, [sp, #36]	; 0x24
    cbe2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
    cbe6:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 >>= 3;
    cbea:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    cbee:	f04f 0200 	mov.w	r2, #0
    cbf2:	f04f 0300 	mov.w	r3, #0
    cbf6:	08c2      	lsrs	r2, r0, #3
    cbf8:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    cbfc:	08cb      	lsrs	r3, r1, #3
    cbfe:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
        r64 = ui64Val - q64*10;
    cc02:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
    cc06:	4622      	mov	r2, r4
    cc08:	462b      	mov	r3, r5
    cc0a:	f04f 0000 	mov.w	r0, #0
    cc0e:	f04f 0100 	mov.w	r1, #0
    cc12:	0099      	lsls	r1, r3, #2
    cc14:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
    cc18:	0090      	lsls	r0, r2, #2
    cc1a:	4602      	mov	r2, r0
    cc1c:	460b      	mov	r3, r1
    cc1e:	1916      	adds	r6, r2, r4
    cc20:	eb43 0705 	adc.w	r7, r3, r5
    cc24:	19b3      	adds	r3, r6, r6
    cc26:	930a      	str	r3, [sp, #40]	; 0x28
    cc28:	eb47 0307 	adc.w	r3, r7, r7
    cc2c:	930b      	str	r3, [sp, #44]	; 0x2c
    cc2e:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    cc32:	4630      	mov	r0, r6
    cc34:	4639      	mov	r1, r7
    cc36:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    cc3a:	1a14      	subs	r4, r2, r0
    cc3c:	940c      	str	r4, [sp, #48]	; 0x30
    cc3e:	eb63 0301 	sbc.w	r3, r3, r1
    cc42:	930d      	str	r3, [sp, #52]	; 0x34
    cc44:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    cc48:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
        return q64 + ((r64 + 6) >> 4);
    cc4c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    cc50:	f112 0806 	adds.w	r8, r2, #6
    cc54:	f143 0900 	adc.w	r9, r3, #0
    cc58:	f04f 0200 	mov.w	r2, #0
    cc5c:	f04f 0300 	mov.w	r3, #0
    cc60:	ea4f 1218 	mov.w	r2, r8, lsr #4
    cc64:	ea42 7209 	orr.w	r2, r2, r9, lsl #28
    cc68:	ea4f 1319 	mov.w	r3, r9, lsr #4
    cc6c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    cc70:	1814      	adds	r4, r2, r0
    cc72:	9400      	str	r4, [sp, #0]
    cc74:	414b      	adcs	r3, r1
    cc76:	9301      	str	r3, [sp, #4]
    cc78:	e02a      	b.n	ccd0 <divu64_10+0x1d8>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    cc7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cc7c:	9317      	str	r3, [sp, #92]	; 0x5c
        q32 = (ui32Val>>1) + (ui32Val>>2);
    cc7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    cc80:	085a      	lsrs	r2, r3, #1
    cc82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    cc84:	089b      	lsrs	r3, r3, #2
    cc86:	4413      	add	r3, r2
    cc88:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 4);
    cc8a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    cc8c:	091b      	lsrs	r3, r3, #4
    cc8e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    cc90:	4413      	add	r3, r2
    cc92:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 8);
    cc94:	9b16      	ldr	r3, [sp, #88]	; 0x58
    cc96:	0a1b      	lsrs	r3, r3, #8
    cc98:	9a16      	ldr	r2, [sp, #88]	; 0x58
    cc9a:	4413      	add	r3, r2
    cc9c:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 16);
    cc9e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    cca0:	0c1b      	lsrs	r3, r3, #16
    cca2:	9a16      	ldr	r2, [sp, #88]	; 0x58
    cca4:	4413      	add	r3, r2
    cca6:	9316      	str	r3, [sp, #88]	; 0x58
        q32 >>= 3;
    cca8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    ccaa:	08db      	lsrs	r3, r3, #3
    ccac:	9316      	str	r3, [sp, #88]	; 0x58
        r32 = ui32Val - q32*10;
    ccae:	9a16      	ldr	r2, [sp, #88]	; 0x58
    ccb0:	4613      	mov	r3, r2
    ccb2:	009b      	lsls	r3, r3, #2
    ccb4:	4413      	add	r3, r2
    ccb6:	005b      	lsls	r3, r3, #1
    ccb8:	461a      	mov	r2, r3
    ccba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ccbc:	1a9b      	subs	r3, r3, r2
    ccbe:	9315      	str	r3, [sp, #84]	; 0x54
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    ccc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ccc2:	3306      	adds	r3, #6
    ccc4:	091a      	lsrs	r2, r3, #4
    ccc6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    ccc8:	4413      	add	r3, r2
    ccca:	2200      	movs	r2, #0
    cccc:	9300      	str	r3, [sp, #0]
    ccce:	9201      	str	r2, [sp, #4]
    }
}
    ccd0:	e9dd 2300 	ldrd	r2, r3, [sp]
    ccd4:	4610      	mov	r0, r2
    ccd6:	4619      	mov	r1, r3
    ccd8:	b018      	add	sp, #96	; 0x60
    ccda:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    ccde:	4770      	bx	lr

0000cce0 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    cce0:	b500      	push	{lr}
    cce2:	b085      	sub	sp, #20
    cce4:	e9cd 0100 	strd	r0, r1, [sp]
    int iNDigits = ui64Val ? 0 : 1;
    cce8:	9a00      	ldr	r2, [sp, #0]
    ccea:	9b01      	ldr	r3, [sp, #4]
    ccec:	4313      	orrs	r3, r2
    ccee:	2b00      	cmp	r3, #0
    ccf0:	bf0c      	ite	eq
    ccf2:	2301      	moveq	r3, #1
    ccf4:	2300      	movne	r3, #0
    ccf6:	b2db      	uxtb	r3, r3
    ccf8:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    ccfa:	e008      	b.n	cd0e <ndigits_in_u64+0x2e>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    ccfc:	e9dd 0100 	ldrd	r0, r1, [sp]
    cd00:	f7ff fefa 	bl	caf8 <divu64_10>
    cd04:	e9cd 0100 	strd	r0, r1, [sp]
        ++iNDigits;
    cd08:	9b03      	ldr	r3, [sp, #12]
    cd0a:	3301      	adds	r3, #1
    cd0c:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    cd0e:	e9dd 2300 	ldrd	r2, r3, [sp]
    cd12:	4313      	orrs	r3, r2
    cd14:	d1f2      	bne.n	ccfc <ndigits_in_u64+0x1c>
    }

    return iNDigits;
    cd16:	9b03      	ldr	r3, [sp, #12]
}
    cd18:	4618      	mov	r0, r3
    cd1a:	b005      	add	sp, #20
    cd1c:	f85d fb04 	ldr.w	pc, [sp], #4

0000cd20 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    cd20:	b530      	push	{r4, r5, lr}
    cd22:	b083      	sub	sp, #12
    cd24:	e9cd 0100 	strd	r0, r1, [sp]
    if ( i64Val < 0 )
    cd28:	e9dd 2300 	ldrd	r2, r3, [sp]
    cd2c:	2b00      	cmp	r3, #0
    cd2e:	da07      	bge.n	cd40 <ndigits_in_i64+0x20>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    cd30:	e9dd 2300 	ldrd	r2, r3, [sp]
    cd34:	2100      	movs	r1, #0
    cd36:	4254      	negs	r4, r2
    cd38:	eb61 0503 	sbc.w	r5, r1, r3
    cd3c:	e9cd 4500 	strd	r4, r5, [sp]
    }

    return ndigits_in_u64((uint64_t) i64Val);
    cd40:	e9dd 2300 	ldrd	r2, r3, [sp]
    cd44:	4610      	mov	r0, r2
    cd46:	4619      	mov	r1, r3
    cd48:	f7ff ffca 	bl	cce0 <ndigits_in_u64>
    cd4c:	4603      	mov	r3, r0
}
    cd4e:	4618      	mov	r0, r3
    cd50:	b003      	add	sp, #12
    cd52:	bd30      	pop	{r4, r5, pc}

0000cd54 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    cd54:	b084      	sub	sp, #16
    cd56:	e9cd 0100 	strd	r0, r1, [sp]
    int iDigits = ui64Val ? 0 : 1;
    cd5a:	9a00      	ldr	r2, [sp, #0]
    cd5c:	9b01      	ldr	r3, [sp, #4]
    cd5e:	4313      	orrs	r3, r2
    cd60:	2b00      	cmp	r3, #0
    cd62:	bf0c      	ite	eq
    cd64:	2301      	moveq	r3, #1
    cd66:	2300      	movne	r3, #0
    cd68:	b2db      	uxtb	r3, r3
    cd6a:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    cd6c:	e00e      	b.n	cd8c <ndigits_in_hex+0x38>
    {
        ui64Val >>= 4;
    cd6e:	e9dd 0100 	ldrd	r0, r1, [sp]
    cd72:	f04f 0200 	mov.w	r2, #0
    cd76:	f04f 0300 	mov.w	r3, #0
    cd7a:	0902      	lsrs	r2, r0, #4
    cd7c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    cd80:	090b      	lsrs	r3, r1, #4
    cd82:	e9cd 2300 	strd	r2, r3, [sp]
        ++iDigits;
    cd86:	9b03      	ldr	r3, [sp, #12]
    cd88:	3301      	adds	r3, #1
    cd8a:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    cd8c:	e9dd 2300 	ldrd	r2, r3, [sp]
    cd90:	4313      	orrs	r3, r2
    cd92:	d1ec      	bne.n	cd6e <ndigits_in_hex+0x1a>
    }

    return iDigits;
    cd94:	9b03      	ldr	r3, [sp, #12]
}
    cd96:	4618      	mov	r0, r3
    cd98:	b004      	add	sp, #16
    cd9a:	4770      	bx	lr

0000cd9c <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    cd9c:	b086      	sub	sp, #24
    cd9e:	9001      	str	r0, [sp, #4]
    cda0:	9100      	str	r1, [sp, #0]
    bool bNeg = false;
    cda2:	2300      	movs	r3, #0
    cda4:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    cda8:	2300      	movs	r3, #0
    cdaa:	9304      	str	r3, [sp, #16]
    cdac:	2300      	movs	r3, #0
    cdae:	9303      	str	r3, [sp, #12]

    if ( *pcStr == '-')
    cdb0:	9b01      	ldr	r3, [sp, #4]
    cdb2:	781b      	ldrb	r3, [r3, #0]
    cdb4:	2b2d      	cmp	r3, #45	; 0x2d
    cdb6:	d11c      	bne.n	cdf2 <decstr_to_int+0x56>
    {
        bNeg = true;
    cdb8:	2301      	movs	r3, #1
    cdba:	f88d 3017 	strb.w	r3, [sp, #23]
        pcStr++;
    cdbe:	9b01      	ldr	r3, [sp, #4]
    cdc0:	3301      	adds	r3, #1
    cdc2:	9301      	str	r3, [sp, #4]
        uCnt++;
    cdc4:	9b03      	ldr	r3, [sp, #12]
    cdc6:	3301      	adds	r3, #1
    cdc8:	9303      	str	r3, [sp, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cdca:	e012      	b.n	cdf2 <decstr_to_int+0x56>
    {
        ++uCnt;
    cdcc:	9b03      	ldr	r3, [sp, #12]
    cdce:	3301      	adds	r3, #1
    cdd0:	9303      	str	r3, [sp, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    cdd2:	9a04      	ldr	r2, [sp, #16]
    cdd4:	4613      	mov	r3, r2
    cdd6:	009b      	lsls	r3, r3, #2
    cdd8:	4413      	add	r3, r2
    cdda:	005b      	lsls	r3, r3, #1
    cddc:	9304      	str	r3, [sp, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    cdde:	9b01      	ldr	r3, [sp, #4]
    cde0:	781b      	ldrb	r3, [r3, #0]
    cde2:	461a      	mov	r2, r3
    cde4:	9b04      	ldr	r3, [sp, #16]
    cde6:	4413      	add	r3, r2
    cde8:	3b30      	subs	r3, #48	; 0x30
    cdea:	9304      	str	r3, [sp, #16]
        pcStr++;
    cdec:	9b01      	ldr	r3, [sp, #4]
    cdee:	3301      	adds	r3, #1
    cdf0:	9301      	str	r3, [sp, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cdf2:	9b01      	ldr	r3, [sp, #4]
    cdf4:	781b      	ldrb	r3, [r3, #0]
    cdf6:	2b2f      	cmp	r3, #47	; 0x2f
    cdf8:	d903      	bls.n	ce02 <decstr_to_int+0x66>
    cdfa:	9b01      	ldr	r3, [sp, #4]
    cdfc:	781b      	ldrb	r3, [r3, #0]
    cdfe:	2b39      	cmp	r3, #57	; 0x39
    ce00:	d9e4      	bls.n	cdcc <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    ce02:	9b00      	ldr	r3, [sp, #0]
    ce04:	2b00      	cmp	r3, #0
    ce06:	d002      	beq.n	ce0e <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    ce08:	9b00      	ldr	r3, [sp, #0]
    ce0a:	9a03      	ldr	r2, [sp, #12]
    ce0c:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    ce0e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ce12:	2b00      	cmp	r3, #0
    ce14:	d002      	beq.n	ce1c <decstr_to_int+0x80>
    ce16:	9b04      	ldr	r3, [sp, #16]
    ce18:	425b      	negs	r3, r3
    ce1a:	e000      	b.n	ce1e <decstr_to_int+0x82>
    ce1c:	9b04      	ldr	r3, [sp, #16]
}
    ce1e:	4618      	mov	r0, r3
    ce20:	b006      	add	sp, #24
    ce22:	4770      	bx	lr

0000ce24 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    ce24:	b500      	push	{lr}
    ce26:	b091      	sub	sp, #68	; 0x44
    ce28:	e9cd 0102 	strd	r0, r1, [sp, #8]
    ce2c:	9201      	str	r2, [sp, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    ce2e:	2300      	movs	r3, #0
    ce30:	930f      	str	r3, [sp, #60]	; 0x3c
    ce32:	2300      	movs	r3, #0
    ce34:	930e      	str	r3, [sp, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    ce36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    ce3a:	f7ff fe5d 	bl	caf8 <divu64_10>
    ce3e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    ce42:	9902      	ldr	r1, [sp, #8]
    ce44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ce46:	4613      	mov	r3, r2
    ce48:	009b      	lsls	r3, r3, #2
    ce4a:	4413      	add	r3, r2
    ce4c:	005b      	lsls	r3, r3, #1
    ce4e:	1acb      	subs	r3, r1, r3
    ce50:	930b      	str	r3, [sp, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    ce52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ce54:	b2da      	uxtb	r2, r3
    ce56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ce58:	1c59      	adds	r1, r3, #1
    ce5a:	910f      	str	r1, [sp, #60]	; 0x3c
    ce5c:	3230      	adds	r2, #48	; 0x30
    ce5e:	b2d2      	uxtb	r2, r2
    ce60:	3340      	adds	r3, #64	; 0x40
    ce62:	446b      	add	r3, sp
    ce64:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    ce68:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    ce6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    } while ( ui64Val );
    ce70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ce74:	4313      	orrs	r3, r2
    ce76:	d1de      	bne.n	ce36 <uint64_to_str+0x12>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    ce78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ce7a:	930e      	str	r3, [sp, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    ce7c:	9b01      	ldr	r3, [sp, #4]
    ce7e:	2b00      	cmp	r3, #0
    ce80:	d010      	beq.n	cea4 <uint64_to_str+0x80>
    {
        while ( ix-- )
    ce82:	e007      	b.n	ce94 <uint64_to_str+0x70>
        {
            *pcBuf++ = tbuf[ix];
    ce84:	9b01      	ldr	r3, [sp, #4]
    ce86:	1c5a      	adds	r2, r3, #1
    ce88:	9201      	str	r2, [sp, #4]
    ce8a:	a904      	add	r1, sp, #16
    ce8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    ce8e:	440a      	add	r2, r1
    ce90:	7812      	ldrb	r2, [r2, #0]
    ce92:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    ce94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ce96:	1e5a      	subs	r2, r3, #1
    ce98:	920f      	str	r2, [sp, #60]	; 0x3c
    ce9a:	2b00      	cmp	r3, #0
    ce9c:	d1f2      	bne.n	ce84 <uint64_to_str+0x60>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    ce9e:	9b01      	ldr	r3, [sp, #4]
    cea0:	2200      	movs	r2, #0
    cea2:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    cea4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
}
    cea6:	4618      	mov	r0, r3
    cea8:	b011      	add	sp, #68	; 0x44
    ceaa:	f85d fb04 	ldr.w	pc, [sp], #4

0000ceae <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    ceae:	b08c      	sub	sp, #48	; 0x30
    ceb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
    ceb4:	9201      	str	r2, [sp, #4]
    ceb6:	f88d 3003 	strb.w	r3, [sp, #3]
    int iNumDig, ix = 0;
    ceba:	2300      	movs	r3, #0
    cebc:	930b      	str	r3, [sp, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    cebe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cec2:	4313      	orrs	r3, r2
    cec4:	d135      	bne.n	cf32 <uint64_to_hexstr+0x84>
    {
        tbuf[ix++] = '0';   // Print a '0'
    cec6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cec8:	1c5a      	adds	r2, r3, #1
    ceca:	920b      	str	r2, [sp, #44]	; 0x2c
    cecc:	3330      	adds	r3, #48	; 0x30
    cece:	446b      	add	r3, sp
    ced0:	2230      	movs	r2, #48	; 0x30
    ced2:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    ced6:	e02c      	b.n	cf32 <uint64_to_hexstr+0x84>
    {
        cCh = ui64Val & 0xf;
    ced8:	f89d 3008 	ldrb.w	r3, [sp, #8]
    cedc:	f003 030f 	and.w	r3, r3, #15
    cee0:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    cee4:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    cee8:	2b09      	cmp	r3, #9
    ceea:	d90b      	bls.n	cf04 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    ceec:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cef0:	2b00      	cmp	r3, #0
    cef2:	d001      	beq.n	cef8 <uint64_to_hexstr+0x4a>
    cef4:	2227      	movs	r2, #39	; 0x27
    cef6:	e000      	b.n	cefa <uint64_to_hexstr+0x4c>
    cef8:	2207      	movs	r2, #7
    cefa:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    cefe:	4413      	add	r3, r2
    cf00:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    cf04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cf06:	1c5a      	adds	r2, r3, #1
    cf08:	920b      	str	r2, [sp, #44]	; 0x2c
    cf0a:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    cf0e:	3230      	adds	r2, #48	; 0x30
    cf10:	b2d2      	uxtb	r2, r2
    cf12:	3330      	adds	r3, #48	; 0x30
    cf14:	446b      	add	r3, sp
    cf16:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    cf1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    cf1e:	f04f 0200 	mov.w	r2, #0
    cf22:	f04f 0300 	mov.w	r3, #0
    cf26:	0902      	lsrs	r2, r0, #4
    cf28:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    cf2c:	090b      	lsrs	r3, r1, #4
    cf2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    while ( ui64Val )
    cf32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cf36:	4313      	orrs	r3, r2
    cf38:	d1ce      	bne.n	ced8 <uint64_to_hexstr+0x2a>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    cf3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cf3c:	9309      	str	r3, [sp, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    cf3e:	9b01      	ldr	r3, [sp, #4]
    cf40:	2b00      	cmp	r3, #0
    cf42:	d010      	beq.n	cf66 <uint64_to_hexstr+0xb8>
    {
        while (ix--)
    cf44:	e007      	b.n	cf56 <uint64_to_hexstr+0xa8>
        {
            *pcBuf++ = tbuf[ix];
    cf46:	9b01      	ldr	r3, [sp, #4]
    cf48:	1c5a      	adds	r2, r3, #1
    cf4a:	9201      	str	r2, [sp, #4]
    cf4c:	a904      	add	r1, sp, #16
    cf4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cf50:	440a      	add	r2, r1
    cf52:	7812      	ldrb	r2, [r2, #0]
    cf54:	701a      	strb	r2, [r3, #0]
        while (ix--)
    cf56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cf58:	1e5a      	subs	r2, r3, #1
    cf5a:	920b      	str	r2, [sp, #44]	; 0x2c
    cf5c:	2b00      	cmp	r3, #0
    cf5e:	d1f2      	bne.n	cf46 <uint64_to_hexstr+0x98>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    cf60:	9b01      	ldr	r3, [sp, #4]
    cf62:	2200      	movs	r2, #0
    cf64:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    cf66:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    cf68:	4618      	mov	r0, r3
    cf6a:	b00c      	add	sp, #48	; 0x30
    cf6c:	4770      	bx	lr

0000cf6e <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    cf6e:	b084      	sub	sp, #16
    cf70:	9001      	str	r0, [sp, #4]
    uint32_t ui32RetVal = 0;
    cf72:	2300      	movs	r3, #0
    cf74:	9303      	str	r3, [sp, #12]
    if ( !pcBuf )
    cf76:	9b01      	ldr	r3, [sp, #4]
    cf78:	2b00      	cmp	r3, #0
    cf7a:	d104      	bne.n	cf86 <simple_strlen+0x18>
    {
        return ui32RetVal;
    cf7c:	9b03      	ldr	r3, [sp, #12]
    cf7e:	e009      	b.n	cf94 <simple_strlen+0x26>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    cf80:	9b03      	ldr	r3, [sp, #12]
    cf82:	3301      	adds	r3, #1
    cf84:	9303      	str	r3, [sp, #12]
    while ( *pcBuf++ )
    cf86:	9b01      	ldr	r3, [sp, #4]
    cf88:	1c5a      	adds	r2, r3, #1
    cf8a:	9201      	str	r2, [sp, #4]
    cf8c:	781b      	ldrb	r3, [r3, #0]
    cf8e:	2b00      	cmp	r3, #0
    cf90:	d1f6      	bne.n	cf80 <simple_strlen+0x12>
    }
    return ui32RetVal;
    cf92:	9b03      	ldr	r3, [sp, #12]
}
    cf94:	4618      	mov	r0, r3
    cf96:	b004      	add	sp, #16
    cf98:	4770      	bx	lr

0000cf9a <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    cf9a:	b086      	sub	sp, #24
    cf9c:	9003      	str	r0, [sp, #12]
    cf9e:	460b      	mov	r3, r1
    cfa0:	9201      	str	r2, [sp, #4]
    cfa2:	f88d 300b 	strb.w	r3, [sp, #11]
    int32_t i32Cnt = 0;
    cfa6:	2300      	movs	r3, #0
    cfa8:	9305      	str	r3, [sp, #20]

    if ( i32NumChars <= 0 )
    cfaa:	9b01      	ldr	r3, [sp, #4]
    cfac:	2b00      	cmp	r3, #0
    cfae:	dc0d      	bgt.n	cfcc <padbuffer+0x32>
    {
        return i32Cnt;
    cfb0:	9b05      	ldr	r3, [sp, #20]
    cfb2:	e011      	b.n	cfd8 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    cfb4:	9b03      	ldr	r3, [sp, #12]
    cfb6:	2b00      	cmp	r3, #0
    cfb8:	d005      	beq.n	cfc6 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    cfba:	9b03      	ldr	r3, [sp, #12]
    cfbc:	1c5a      	adds	r2, r3, #1
    cfbe:	9203      	str	r2, [sp, #12]
    cfc0:	f89d 200b 	ldrb.w	r2, [sp, #11]
    cfc4:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    cfc6:	9b05      	ldr	r3, [sp, #20]
    cfc8:	3301      	adds	r3, #1
    cfca:	9305      	str	r3, [sp, #20]
    while ( i32NumChars-- )
    cfcc:	9b01      	ldr	r3, [sp, #4]
    cfce:	1e5a      	subs	r2, r3, #1
    cfd0:	9201      	str	r2, [sp, #4]
    cfd2:	2b00      	cmp	r3, #0
    cfd4:	d1ee      	bne.n	cfb4 <padbuffer+0x1a>
    }

    return i32Cnt;
    cfd6:	9b05      	ldr	r3, [sp, #20]
}
    cfd8:	4618      	mov	r0, r3
    cfda:	b006      	add	sp, #24
    cfdc:	4770      	bx	lr
	...

0000cfe0 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    cfe0:	b5f0      	push	{r4, r5, r6, r7, lr}
    cfe2:	b08f      	sub	sp, #60	; 0x3c
    cfe4:	ed8d 0a03 	vstr	s0, [sp, #12]
    cfe8:	9002      	str	r0, [sp, #8]
    cfea:	9101      	str	r1, [sp, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    cfec:	9b02      	ldr	r3, [sp, #8]
    cfee:	681b      	ldr	r3, [r3, #0]
    cff0:	9309      	str	r3, [sp, #36]	; 0x24
    if (iBufSize < 4)
    cff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cff4:	2b03      	cmp	r3, #3
    cff6:	dc02      	bgt.n	cffe <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    cff8:	f06f 0302 	mvn.w	r3, #2
    cffc:	e0e9      	b.n	d1d2 <ftoa+0x1f2>
    }

    if (fValue == 0.0f)
    cffe:	eddd 7a03 	vldr	s15, [sp, #12]
    d002:	eef5 7a40 	vcmp.f32	s15, #0.0
    d006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d00a:	d104      	bne.n	d016 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    d00c:	9b02      	ldr	r3, [sp, #8]
    d00e:	4a72      	ldr	r2, [pc, #456]	; (d1d8 <ftoa+0x1f8>)
    d010:	601a      	str	r2, [r3, #0]
        return 3;
    d012:	2303      	movs	r3, #3
    d014:	e0dd      	b.n	d1d2 <ftoa+0x1f2>
    }

    pcBufInitial = pcBuf;
    d016:	9b02      	ldr	r3, [sp, #8]
    d018:	9308      	str	r3, [sp, #32]

    unFloatValue.F = fValue;
    d01a:	9b03      	ldr	r3, [sp, #12]
    d01c:	9304      	str	r3, [sp, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    d01e:	9b04      	ldr	r3, [sp, #16]
    d020:	15db      	asrs	r3, r3, #23
    d022:	b2db      	uxtb	r3, r3
    d024:	3b7f      	subs	r3, #127	; 0x7f
    d026:	9307      	str	r3, [sp, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    d028:	9b04      	ldr	r3, [sp, #16]
    d02a:	f3c3 0316 	ubfx	r3, r3, #0, #23
    d02e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    d032:	9306      	str	r3, [sp, #24]
    i32FracPart = 0;
    d034:	2300      	movs	r3, #0
    d036:	930c      	str	r3, [sp, #48]	; 0x30
    i32IntPart = 0;
    d038:	2300      	movs	r3, #0
    d03a:	930d      	str	r3, [sp, #52]	; 0x34

    if (iExp2 >= 31)
    d03c:	9b07      	ldr	r3, [sp, #28]
    d03e:	2b1e      	cmp	r3, #30
    d040:	dd02      	ble.n	d048 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    d042:	f06f 0301 	mvn.w	r3, #1
    d046:	e0c4      	b.n	d1d2 <ftoa+0x1f2>
    }
    else if (iExp2 < -23)
    d048:	9b07      	ldr	r3, [sp, #28]
    d04a:	f113 0f17 	cmn.w	r3, #23
    d04e:	da02      	bge.n	d056 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    d050:	f04f 33ff 	mov.w	r3, #4294967295
    d054:	e0bd      	b.n	d1d2 <ftoa+0x1f2>
    }
    else if (iExp2 >= 23)
    d056:	9b07      	ldr	r3, [sp, #28]
    d058:	2b16      	cmp	r3, #22
    d05a:	dd06      	ble.n	d06a <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    d05c:	9b07      	ldr	r3, [sp, #28]
    d05e:	3b17      	subs	r3, #23
    d060:	9a06      	ldr	r2, [sp, #24]
    d062:	fa02 f303 	lsl.w	r3, r2, r3
    d066:	930d      	str	r3, [sp, #52]	; 0x34
    d068:	e01a      	b.n	d0a0 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    d06a:	9b07      	ldr	r3, [sp, #28]
    d06c:	2b00      	cmp	r3, #0
    d06e:	db0f      	blt.n	d090 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    d070:	9b07      	ldr	r3, [sp, #28]
    d072:	f1c3 0317 	rsb	r3, r3, #23
    d076:	9a06      	ldr	r2, [sp, #24]
    d078:	fa42 f303 	asr.w	r3, r2, r3
    d07c:	930d      	str	r3, [sp, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    d07e:	9b07      	ldr	r3, [sp, #28]
    d080:	3301      	adds	r3, #1
    d082:	9a06      	ldr	r2, [sp, #24]
    d084:	fa02 f303 	lsl.w	r3, r2, r3
    d088:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    d08c:	930c      	str	r3, [sp, #48]	; 0x30
    d08e:	e007      	b.n	d0a0 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    d090:	9b06      	ldr	r3, [sp, #24]
    d092:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    d096:	9b07      	ldr	r3, [sp, #28]
    d098:	43db      	mvns	r3, r3
    d09a:	fa42 f303 	asr.w	r3, r2, r3
    d09e:	930c      	str	r3, [sp, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    d0a0:	9b04      	ldr	r3, [sp, #16]
    d0a2:	2b00      	cmp	r3, #0
    d0a4:	da04      	bge.n	d0b0 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    d0a6:	9b02      	ldr	r3, [sp, #8]
    d0a8:	1c5a      	adds	r2, r3, #1
    d0aa:	9202      	str	r2, [sp, #8]
    d0ac:	222d      	movs	r2, #45	; 0x2d
    d0ae:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    d0b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d0b2:	2b00      	cmp	r3, #0
    d0b4:	d105      	bne.n	d0c2 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    d0b6:	9b02      	ldr	r3, [sp, #8]
    d0b8:	1c5a      	adds	r2, r3, #1
    d0ba:	9202      	str	r2, [sp, #8]
    d0bc:	2230      	movs	r2, #48	; 0x30
    d0be:	701a      	strb	r2, [r3, #0]
    d0c0:	e023      	b.n	d10a <ftoa+0x12a>
    }
    else
    {
        if (i32IntPart > 0)
    d0c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d0c4:	2b00      	cmp	r3, #0
    d0c6:	dd09      	ble.n	d0dc <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
    d0c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d0ca:	17da      	asrs	r2, r3, #31
    d0cc:	461e      	mov	r6, r3
    d0ce:	4617      	mov	r7, r2
    d0d0:	9a02      	ldr	r2, [sp, #8]
    d0d2:	4630      	mov	r0, r6
    d0d4:	4639      	mov	r1, r7
    d0d6:	f7ff fea5 	bl	ce24 <uint64_to_str>
    d0da:	e012      	b.n	d102 <ftoa+0x122>
        }
        else
        {
            *pcBuf++ = '-';
    d0dc:	9b02      	ldr	r3, [sp, #8]
    d0de:	1c5a      	adds	r2, r3, #1
    d0e0:	9202      	str	r2, [sp, #8]
    d0e2:	222d      	movs	r2, #45	; 0x2d
    d0e4:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    d0e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d0e8:	425b      	negs	r3, r3
    d0ea:	17da      	asrs	r2, r3, #31
    d0ec:	461c      	mov	r4, r3
    d0ee:	4615      	mov	r5, r2
    d0f0:	9a02      	ldr	r2, [sp, #8]
    d0f2:	4620      	mov	r0, r4
    d0f4:	4629      	mov	r1, r5
    d0f6:	f7ff fe95 	bl	ce24 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    d0fa:	e002      	b.n	d102 <ftoa+0x122>
        {
            pcBuf++;
    d0fc:	9b02      	ldr	r3, [sp, #8]
    d0fe:	3301      	adds	r3, #1
    d100:	9302      	str	r3, [sp, #8]
        while (*pcBuf)    // Get to end of new string
    d102:	9b02      	ldr	r3, [sp, #8]
    d104:	781b      	ldrb	r3, [r3, #0]
    d106:	2b00      	cmp	r3, #0
    d108:	d1f8      	bne.n	d0fc <ftoa+0x11c>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    d10a:	9b02      	ldr	r3, [sp, #8]
    d10c:	1c5a      	adds	r2, r3, #1
    d10e:	9202      	str	r2, [sp, #8]
    d110:	222e      	movs	r2, #46	; 0x2e
    d112:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    d114:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d116:	2b00      	cmp	r3, #0
    d118:	d105      	bne.n	d126 <ftoa+0x146>
    {
        *pcBuf++ = '0';
    d11a:	9b02      	ldr	r3, [sp, #8]
    d11c:	1c5a      	adds	r2, r3, #1
    d11e:	9202      	str	r2, [sp, #8]
    d120:	2230      	movs	r2, #48	; 0x30
    d122:	701a      	strb	r2, [r3, #0]
    d124:	e04f      	b.n	d1c6 <ftoa+0x1e6>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    d126:	9a02      	ldr	r2, [sp, #8]
    d128:	9b08      	ldr	r3, [sp, #32]
    d12a:	1ad3      	subs	r3, r2, r3
    d12c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d12e:	1ad3      	subs	r3, r2, r3
    d130:	3b01      	subs	r3, #1
    d132:	9305      	str	r3, [sp, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    d134:	9a05      	ldr	r2, [sp, #20]
    d136:	9b01      	ldr	r3, [sp, #4]
    d138:	4293      	cmp	r3, r2
    d13a:	bfa8      	it	ge
    d13c:	4613      	movge	r3, r2
    d13e:	9305      	str	r3, [sp, #20]

        for (jx = 0; jx < iMax; jx++)
    d140:	2300      	movs	r3, #0
    d142:	930a      	str	r3, [sp, #40]	; 0x28
    d144:	e015      	b.n	d172 <ftoa+0x192>
        {
            i32FracPart *= 10;
    d146:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d148:	4613      	mov	r3, r2
    d14a:	009b      	lsls	r3, r3, #2
    d14c:	4413      	add	r3, r2
    d14e:	005b      	lsls	r3, r3, #1
    d150:	930c      	str	r3, [sp, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d152:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d154:	161b      	asrs	r3, r3, #24
    d156:	b2da      	uxtb	r2, r3
    d158:	9b02      	ldr	r3, [sp, #8]
    d15a:	1c59      	adds	r1, r3, #1
    d15c:	9102      	str	r1, [sp, #8]
    d15e:	3230      	adds	r2, #48	; 0x30
    d160:	b2d2      	uxtb	r2, r2
    d162:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    d164:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d166:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    d16a:	930c      	str	r3, [sp, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    d16c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d16e:	3301      	adds	r3, #1
    d170:	930a      	str	r3, [sp, #40]	; 0x28
    d172:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d174:	9b05      	ldr	r3, [sp, #20]
    d176:	429a      	cmp	r2, r3
    d178:	dbe5      	blt.n	d146 <ftoa+0x166>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    d17a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d17c:	4613      	mov	r3, r2
    d17e:	009b      	lsls	r3, r3, #2
    d180:	4413      	add	r3, r2
    d182:	005b      	lsls	r3, r3, #1
    d184:	161b      	asrs	r3, r3, #24
    d186:	2b04      	cmp	r3, #4
    d188:	dd1d      	ble.n	d1c6 <ftoa+0x1e6>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    d18a:	9b02      	ldr	r3, [sp, #8]
    d18c:	3b01      	subs	r3, #1
    d18e:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    d190:	e015      	b.n	d1be <ftoa+0x1de>
            {
                if ( *pcBuftmp == '.' )
    d192:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d194:	781b      	ldrb	r3, [r3, #0]
    d196:	2b2e      	cmp	r3, #46	; 0x2e
    d198:	d00e      	beq.n	d1b8 <ftoa+0x1d8>
                {
                }
                else if ( *pcBuftmp == '9' )
    d19a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d19c:	781b      	ldrb	r3, [r3, #0]
    d19e:	2b39      	cmp	r3, #57	; 0x39
    d1a0:	d103      	bne.n	d1aa <ftoa+0x1ca>
                {
                    *pcBuftmp = '0';
    d1a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d1a4:	2230      	movs	r2, #48	; 0x30
    d1a6:	701a      	strb	r2, [r3, #0]
    d1a8:	e006      	b.n	d1b8 <ftoa+0x1d8>
                }
                else
                {
                    *pcBuftmp += 1;
    d1aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d1ac:	781b      	ldrb	r3, [r3, #0]
    d1ae:	3301      	adds	r3, #1
    d1b0:	b2da      	uxtb	r2, r3
    d1b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d1b4:	701a      	strb	r2, [r3, #0]
                    break;
    d1b6:	e006      	b.n	d1c6 <ftoa+0x1e6>
                }
                pcBuftmp--;
    d1b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d1ba:	3b01      	subs	r3, #1
    d1bc:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    d1be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d1c0:	9b08      	ldr	r3, [sp, #32]
    d1c2:	429a      	cmp	r2, r3
    d1c4:	d2e5      	bcs.n	d192 <ftoa+0x1b2>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    d1c6:	9b02      	ldr	r3, [sp, #8]
    d1c8:	2200      	movs	r2, #0
    d1ca:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    d1cc:	9a02      	ldr	r2, [sp, #8]
    d1ce:	9b08      	ldr	r3, [sp, #32]
    d1d0:	1ad3      	subs	r3, r2, r3
} // ftoa()
    d1d2:	4618      	mov	r0, r3
    d1d4:	b00f      	add	sp, #60	; 0x3c
    d1d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d1d8:	00302e30 	.word	0x00302e30

0000d1dc <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    d1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d1e0:	b097      	sub	sp, #92	; 0x5c
    d1e2:	9003      	str	r0, [sp, #12]
    d1e4:	9102      	str	r1, [sp, #8]
    d1e6:	9201      	str	r2, [sp, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    d1e8:	2300      	movs	r3, #0
    d1ea:	9311      	str	r3, [sp, #68]	; 0x44
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    d1ec:	2300      	movs	r3, #0
    d1ee:	930b      	str	r3, [sp, #44]	; 0x2c

    while ( *pcFmt != 0x0 )
    d1f0:	e2e9      	b.n	d7c6 <am_util_stdio_vsprintf+0x5ea>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    d1f2:	2306      	movs	r3, #6
    d1f4:	930e      	str	r3, [sp, #56]	; 0x38

        if ( *pcFmt != '%' )
    d1f6:	9b02      	ldr	r3, [sp, #8]
    d1f8:	781b      	ldrb	r3, [r3, #0]
    d1fa:	2b25      	cmp	r3, #37	; 0x25
    d1fc:	d01f      	beq.n	d23e <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    d1fe:	9b03      	ldr	r3, [sp, #12]
    d200:	2b00      	cmp	r3, #0
    d202:	d015      	beq.n	d230 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    d204:	9b02      	ldr	r3, [sp, #8]
    d206:	781b      	ldrb	r3, [r3, #0]
    d208:	2b0a      	cmp	r3, #10
    d20a:	d10b      	bne.n	d224 <am_util_stdio_vsprintf+0x48>
    d20c:	4ba8      	ldr	r3, [pc, #672]	; (d4b0 <am_util_stdio_vsprintf+0x2d4>)
    d20e:	781b      	ldrb	r3, [r3, #0]
    d210:	2b00      	cmp	r3, #0
    d212:	d007      	beq.n	d224 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    d214:	9b03      	ldr	r3, [sp, #12]
    d216:	1c5a      	adds	r2, r3, #1
    d218:	9203      	str	r2, [sp, #12]
    d21a:	220d      	movs	r2, #13
    d21c:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    d21e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d220:	3301      	adds	r3, #1
    d222:	9311      	str	r3, [sp, #68]	; 0x44
                }
                *pcBuf++ = *pcFmt;
    d224:	9b03      	ldr	r3, [sp, #12]
    d226:	1c5a      	adds	r2, r3, #1
    d228:	9203      	str	r2, [sp, #12]
    d22a:	9a02      	ldr	r2, [sp, #8]
    d22c:	7812      	ldrb	r2, [r2, #0]
    d22e:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    d230:	9b02      	ldr	r3, [sp, #8]
    d232:	3301      	adds	r3, #1
    d234:	9302      	str	r3, [sp, #8]
            ++ui32CharCnt;
    d236:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d238:	3301      	adds	r3, #1
    d23a:	9311      	str	r3, [sp, #68]	; 0x44
            continue;
    d23c:	e2c3      	b.n	d7c6 <am_util_stdio_vsprintf+0x5ea>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    d23e:	9b02      	ldr	r3, [sp, #8]
    d240:	3301      	adds	r3, #1
    d242:	9302      	str	r3, [sp, #8]
        bLower = bLongLong = false;
    d244:	2300      	movs	r3, #0
    d246:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    d24a:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d24e:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    d252:	2320      	movs	r3, #32
    d254:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

        if ( *pcFmt == '0' )
    d258:	9b02      	ldr	r3, [sp, #8]
    d25a:	781b      	ldrb	r3, [r3, #0]
    d25c:	2b30      	cmp	r3, #48	; 0x30
    d25e:	d105      	bne.n	d26c <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    d260:	2330      	movs	r3, #48	; 0x30
    d262:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
            ++pcFmt;
    d266:	9b02      	ldr	r3, [sp, #8]
    d268:	3301      	adds	r3, #1
    d26a:	9302      	str	r3, [sp, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    d26c:	ab05      	add	r3, sp, #20
    d26e:	4619      	mov	r1, r3
    d270:	9802      	ldr	r0, [sp, #8]
    d272:	f7ff fd93 	bl	cd9c <decstr_to_int>
    d276:	4603      	mov	r3, r0
    d278:	9310      	str	r3, [sp, #64]	; 0x40
        pcFmt += ui32NumChars;
    d27a:	9b05      	ldr	r3, [sp, #20]
    d27c:	9a02      	ldr	r2, [sp, #8]
    d27e:	4413      	add	r3, r2
    d280:	9302      	str	r3, [sp, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    d282:	9b02      	ldr	r3, [sp, #8]
    d284:	781b      	ldrb	r3, [r3, #0]
    d286:	2b73      	cmp	r3, #115	; 0x73
    d288:	d005      	beq.n	d296 <am_util_stdio_vsprintf+0xba>
    d28a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d28c:	2b00      	cmp	r3, #0
    d28e:	da02      	bge.n	d296 <am_util_stdio_vsprintf+0xba>
        {
            iWidth = -iWidth;
    d290:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d292:	425b      	negs	r3, r3
    d294:	9310      	str	r3, [sp, #64]	; 0x40
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    d296:	9b02      	ldr	r3, [sp, #8]
    d298:	781b      	ldrb	r3, [r3, #0]
    d29a:	2b2e      	cmp	r3, #46	; 0x2e
    d29c:	d10d      	bne.n	d2ba <am_util_stdio_vsprintf+0xde>
        {
            ++pcFmt;
    d29e:	9b02      	ldr	r3, [sp, #8]
    d2a0:	3301      	adds	r3, #1
    d2a2:	9302      	str	r3, [sp, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    d2a4:	ab05      	add	r3, sp, #20
    d2a6:	4619      	mov	r1, r3
    d2a8:	9802      	ldr	r0, [sp, #8]
    d2aa:	f7ff fd77 	bl	cd9c <decstr_to_int>
    d2ae:	4603      	mov	r3, r0
    d2b0:	930e      	str	r3, [sp, #56]	; 0x38
            pcFmt += ui32NumChars;
    d2b2:	9b05      	ldr	r3, [sp, #20]
    d2b4:	9a02      	ldr	r2, [sp, #8]
    d2b6:	4413      	add	r3, r2
    d2b8:	9302      	str	r3, [sp, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    d2ba:	9b02      	ldr	r3, [sp, #8]
    d2bc:	781b      	ldrb	r3, [r3, #0]
    d2be:	2b6c      	cmp	r3, #108	; 0x6c
    d2c0:	d10c      	bne.n	d2dc <am_util_stdio_vsprintf+0x100>
        {
            pcFmt++;
    d2c2:	9b02      	ldr	r3, [sp, #8]
    d2c4:	3301      	adds	r3, #1
    d2c6:	9302      	str	r3, [sp, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    d2c8:	9b02      	ldr	r3, [sp, #8]
    d2ca:	781b      	ldrb	r3, [r3, #0]
    d2cc:	2b6c      	cmp	r3, #108	; 0x6c
    d2ce:	d105      	bne.n	d2dc <am_util_stdio_vsprintf+0x100>
            {
                pcFmt++;
    d2d0:	9b02      	ldr	r3, [sp, #8]
    d2d2:	3301      	adds	r3, #1
    d2d4:	9302      	str	r3, [sp, #8]
                bLongLong = true;
    d2d6:	2301      	movs	r3, #1
    d2d8:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
            }
        }

        switch ( *pcFmt )
    d2dc:	9b02      	ldr	r3, [sp, #8]
    d2de:	781b      	ldrb	r3, [r3, #0]
    d2e0:	3b46      	subs	r3, #70	; 0x46
    d2e2:	2b32      	cmp	r3, #50	; 0x32
    d2e4:	f200 825c 	bhi.w	d7a0 <am_util_stdio_vsprintf+0x5c4>
    d2e8:	a201      	add	r2, pc, #4	; (adr r2, d2f0 <am_util_stdio_vsprintf+0x114>)
    d2ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d2ee:	bf00      	nop
    d2f0:	0000d727 	.word	0x0000d727
    d2f4:	0000d7a1 	.word	0x0000d7a1
    d2f8:	0000d7a1 	.word	0x0000d7a1
    d2fc:	0000d7a1 	.word	0x0000d7a1
    d300:	0000d7a1 	.word	0x0000d7a1
    d304:	0000d7a1 	.word	0x0000d7a1
    d308:	0000d7a1 	.word	0x0000d7a1
    d30c:	0000d7a1 	.word	0x0000d7a1
    d310:	0000d7a1 	.word	0x0000d7a1
    d314:	0000d7a1 	.word	0x0000d7a1
    d318:	0000d7a1 	.word	0x0000d7a1
    d31c:	0000d7a1 	.word	0x0000d7a1
    d320:	0000d7a1 	.word	0x0000d7a1
    d324:	0000d7a1 	.word	0x0000d7a1
    d328:	0000d7a1 	.word	0x0000d7a1
    d32c:	0000d7a1 	.word	0x0000d7a1
    d330:	0000d7a1 	.word	0x0000d7a1
    d334:	0000d7a1 	.word	0x0000d7a1
    d338:	0000d4bb 	.word	0x0000d4bb
    d33c:	0000d7a1 	.word	0x0000d7a1
    d340:	0000d7a1 	.word	0x0000d7a1
    d344:	0000d7a1 	.word	0x0000d7a1
    d348:	0000d7a1 	.word	0x0000d7a1
    d34c:	0000d7a1 	.word	0x0000d7a1
    d350:	0000d7a1 	.word	0x0000d7a1
    d354:	0000d7a1 	.word	0x0000d7a1
    d358:	0000d7a1 	.word	0x0000d7a1
    d35c:	0000d7a1 	.word	0x0000d7a1
    d360:	0000d7a1 	.word	0x0000d7a1
    d364:	0000d3bd 	.word	0x0000d3bd
    d368:	0000d5eb 	.word	0x0000d5eb
    d36c:	0000d7a1 	.word	0x0000d7a1
    d370:	0000d727 	.word	0x0000d727
    d374:	0000d7a1 	.word	0x0000d7a1
    d378:	0000d7a1 	.word	0x0000d7a1
    d37c:	0000d5eb 	.word	0x0000d5eb
    d380:	0000d7a1 	.word	0x0000d7a1
    d384:	0000d7a1 	.word	0x0000d7a1
    d388:	0000d7a1 	.word	0x0000d7a1
    d38c:	0000d7a1 	.word	0x0000d7a1
    d390:	0000d7a1 	.word	0x0000d7a1
    d394:	0000d7a1 	.word	0x0000d7a1
    d398:	0000d7a1 	.word	0x0000d7a1
    d39c:	0000d7a1 	.word	0x0000d7a1
    d3a0:	0000d7a1 	.word	0x0000d7a1
    d3a4:	0000d3e3 	.word	0x0000d3e3
    d3a8:	0000d7a1 	.word	0x0000d7a1
    d3ac:	0000d555 	.word	0x0000d555
    d3b0:	0000d7a1 	.word	0x0000d7a1
    d3b4:	0000d7a1 	.word	0x0000d7a1
    d3b8:	0000d4b5 	.word	0x0000d4b5
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    d3bc:	9b01      	ldr	r3, [sp, #4]
    d3be:	1d1a      	adds	r2, r3, #4
    d3c0:	9201      	str	r2, [sp, #4]
    d3c2:	681b      	ldr	r3, [r3, #0]
    d3c4:	f88d 301f 	strb.w	r3, [sp, #31]

                if ( pcBuf )
    d3c8:	9b03      	ldr	r3, [sp, #12]
    d3ca:	2b00      	cmp	r3, #0
    d3cc:	d005      	beq.n	d3da <am_util_stdio_vsprintf+0x1fe>
                {
                    *pcBuf++ = ui8CharSpecifier;
    d3ce:	9b03      	ldr	r3, [sp, #12]
    d3d0:	1c5a      	adds	r2, r3, #1
    d3d2:	9203      	str	r2, [sp, #12]
    d3d4:	f89d 201f 	ldrb.w	r2, [sp, #31]
    d3d8:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d3da:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d3dc:	3301      	adds	r3, #1
    d3de:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d3e0:	e1ee      	b.n	d7c0 <am_util_stdio_vsprintf+0x5e4>

            case 's':
                pcStr = va_arg(pArgs, char *);
    d3e2:	9b01      	ldr	r3, [sp, #4]
    d3e4:	1d1a      	adds	r2, r3, #4
    d3e6:	9201      	str	r2, [sp, #4]
    d3e8:	681b      	ldr	r3, [r3, #0]
    d3ea:	9315      	str	r3, [sp, #84]	; 0x54
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    d3ec:	9815      	ldr	r0, [sp, #84]	; 0x54
    d3ee:	f7ff fdbe 	bl	cf6e <simple_strlen>
    d3f2:	900b      	str	r0, [sp, #44]	; 0x2c
                if ( iWidth > 0 )
    d3f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d3f6:	2b00      	cmp	r3, #0
    d3f8:	dd2e      	ble.n	d458 <am_util_stdio_vsprintf+0x27c>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    d3fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d3fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d3fe:	429a      	cmp	r2, r3
    d400:	d22a      	bcs.n	d458 <am_util_stdio_vsprintf+0x27c>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    d402:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d404:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d406:	1ad3      	subs	r3, r2, r3
    d408:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d40a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d40e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d410:	4619      	mov	r1, r3
    d412:	9803      	ldr	r0, [sp, #12]
    d414:	f7ff fdc1 	bl	cf9a <padbuffer>
    d418:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    d41a:	9b03      	ldr	r3, [sp, #12]
    d41c:	2b00      	cmp	r3, #0
    d41e:	d001      	beq.n	d424 <am_util_stdio_vsprintf+0x248>
    d420:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d422:	e000      	b.n	d426 <am_util_stdio_vsprintf+0x24a>
    d424:	2300      	movs	r3, #0
    d426:	9a03      	ldr	r2, [sp, #12]
    d428:	4413      	add	r3, r2
    d42a:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    d42c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d42e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d430:	4413      	add	r3, r2
    d432:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    d434:	2300      	movs	r3, #0
    d436:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }

                while (*pcStr != 0x0)
    d438:	e00e      	b.n	d458 <am_util_stdio_vsprintf+0x27c>
                {
                    if ( pcBuf )
    d43a:	9b03      	ldr	r3, [sp, #12]
    d43c:	2b00      	cmp	r3, #0
    d43e:	d005      	beq.n	d44c <am_util_stdio_vsprintf+0x270>
                    {
                        *pcBuf++ = *pcStr;
    d440:	9b03      	ldr	r3, [sp, #12]
    d442:	1c5a      	adds	r2, r3, #1
    d444:	9203      	str	r2, [sp, #12]
    d446:	9a15      	ldr	r2, [sp, #84]	; 0x54
    d448:	7812      	ldrb	r2, [r2, #0]
    d44a:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    d44c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d44e:	3301      	adds	r3, #1
    d450:	9315      	str	r3, [sp, #84]	; 0x54
                    ++ui32CharCnt;
    d452:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d454:	3301      	adds	r3, #1
    d456:	9311      	str	r3, [sp, #68]	; 0x44
                while (*pcStr != 0x0)
    d458:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d45a:	781b      	ldrb	r3, [r3, #0]
    d45c:	2b00      	cmp	r3, #0
    d45e:	d1ec      	bne.n	d43a <am_util_stdio_vsprintf+0x25e>
                }

                if ( iWidth )
    d460:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d462:	2b00      	cmp	r3, #0
    d464:	f000 81a9 	beq.w	d7ba <am_util_stdio_vsprintf+0x5de>
                {
                    iWidth = -iWidth;
    d468:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d46a:	425b      	negs	r3, r3
    d46c:	9310      	str	r3, [sp, #64]	; 0x40

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    d46e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d470:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d472:	429a      	cmp	r2, r3
    d474:	f080 81a1 	bcs.w	d7ba <am_util_stdio_vsprintf+0x5de>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    d478:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d47a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d47c:	1ad3      	subs	r3, r2, r3
    d47e:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d480:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d484:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d486:	4619      	mov	r1, r3
    d488:	9803      	ldr	r0, [sp, #12]
    d48a:	f7ff fd86 	bl	cf9a <padbuffer>
    d48e:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    d490:	9b03      	ldr	r3, [sp, #12]
    d492:	2b00      	cmp	r3, #0
    d494:	d001      	beq.n	d49a <am_util_stdio_vsprintf+0x2be>
    d496:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d498:	e000      	b.n	d49c <am_util_stdio_vsprintf+0x2c0>
    d49a:	2300      	movs	r3, #0
    d49c:	9a03      	ldr	r2, [sp, #12]
    d49e:	4413      	add	r3, r2
    d4a0:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    d4a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d4a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d4a6:	4413      	add	r3, r2
    d4a8:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    d4aa:	2300      	movs	r3, #0
    d4ac:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }
                break;
    d4ae:	e184      	b.n	d7ba <am_util_stdio_vsprintf+0x5de>
    d4b0:	1000225c 	.word	0x1000225c

            case 'x':
                bLower = true;
    d4b4:	2301      	movs	r3, #1
    d4b6:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d4ba:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d4be:	2b00      	cmp	r3, #0
    d4c0:	d009      	beq.n	d4d6 <am_util_stdio_vsprintf+0x2fa>
    d4c2:	9b01      	ldr	r3, [sp, #4]
    d4c4:	3307      	adds	r3, #7
    d4c6:	f023 0307 	bic.w	r3, r3, #7
    d4ca:	f103 0208 	add.w	r2, r3, #8
    d4ce:	9201      	str	r2, [sp, #4]
    d4d0:	e9d3 4500 	ldrd	r4, r5, [r3]
    d4d4:	e006      	b.n	d4e4 <am_util_stdio_vsprintf+0x308>
                                      va_arg(pArgs, uint32_t);
    d4d6:	9b01      	ldr	r3, [sp, #4]
    d4d8:	1d1a      	adds	r2, r3, #4
    d4da:	9201      	str	r2, [sp, #4]
    d4dc:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d4de:	2200      	movs	r2, #0
    d4e0:	461c      	mov	r4, r3
    d4e2:	4615      	mov	r5, r2
    d4e4:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48

                if ( iWidth )
    d4e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d4ea:	2b00      	cmp	r3, #0
    d4ec:	d01e      	beq.n	d52c <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    d4ee:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d4f2:	f7ff fc2f 	bl	cd54 <ndigits_in_hex>
    d4f6:	4602      	mov	r2, r0
    d4f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d4fa:	1a9b      	subs	r3, r3, r2
    d4fc:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d4fe:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d502:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d504:	4619      	mov	r1, r3
    d506:	9803      	ldr	r0, [sp, #12]
    d508:	f7ff fd47 	bl	cf9a <padbuffer>
    d50c:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d50e:	9b03      	ldr	r3, [sp, #12]
    d510:	2b00      	cmp	r3, #0
    d512:	d001      	beq.n	d518 <am_util_stdio_vsprintf+0x33c>
    d514:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d516:	e000      	b.n	d51a <am_util_stdio_vsprintf+0x33e>
    d518:	2300      	movs	r3, #0
    d51a:	9a03      	ldr	r2, [sp, #12]
    d51c:	4413      	add	r3, r2
    d51e:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d520:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d522:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d524:	4413      	add	r3, r2
    d526:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d528:	2300      	movs	r3, #0
    d52a:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    d52c:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    d530:	9a03      	ldr	r2, [sp, #12]
    d532:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d536:	f7ff fcba 	bl	ceae <uint64_to_hexstr>
    d53a:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d53c:	9b03      	ldr	r3, [sp, #12]
    d53e:	2b00      	cmp	r3, #0
    d540:	d003      	beq.n	d54a <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    d542:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d544:	9a03      	ldr	r2, [sp, #12]
    d546:	4413      	add	r3, r2
    d548:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d54a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d54c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d54e:	4413      	add	r3, r2
    d550:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d552:	e135      	b.n	d7c0 <am_util_stdio_vsprintf+0x5e4>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d554:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d558:	2b00      	cmp	r3, #0
    d55a:	d009      	beq.n	d570 <am_util_stdio_vsprintf+0x394>
    d55c:	9b01      	ldr	r3, [sp, #4]
    d55e:	3307      	adds	r3, #7
    d560:	f023 0307 	bic.w	r3, r3, #7
    d564:	f103 0208 	add.w	r2, r3, #8
    d568:	9201      	str	r2, [sp, #4]
    d56a:	e9d3 6700 	ldrd	r6, r7, [r3]
    d56e:	e006      	b.n	d57e <am_util_stdio_vsprintf+0x3a2>
                                      va_arg(pArgs, uint32_t);
    d570:	9b01      	ldr	r3, [sp, #4]
    d572:	1d1a      	adds	r2, r3, #4
    d574:	9201      	str	r2, [sp, #4]
    d576:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d578:	2200      	movs	r2, #0
    d57a:	461e      	mov	r6, r3
    d57c:	4617      	mov	r7, r2
    d57e:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48

                if ( iWidth )
    d582:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d584:	2b00      	cmp	r3, #0
    d586:	d01e      	beq.n	d5c6 <am_util_stdio_vsprintf+0x3ea>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    d588:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d58c:	f7ff fba8 	bl	cce0 <ndigits_in_u64>
    d590:	4602      	mov	r2, r0
    d592:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d594:	1a9b      	subs	r3, r3, r2
    d596:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d598:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d59c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d59e:	4619      	mov	r1, r3
    d5a0:	9803      	ldr	r0, [sp, #12]
    d5a2:	f7ff fcfa 	bl	cf9a <padbuffer>
    d5a6:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d5a8:	9b03      	ldr	r3, [sp, #12]
    d5aa:	2b00      	cmp	r3, #0
    d5ac:	d001      	beq.n	d5b2 <am_util_stdio_vsprintf+0x3d6>
    d5ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d5b0:	e000      	b.n	d5b4 <am_util_stdio_vsprintf+0x3d8>
    d5b2:	2300      	movs	r3, #0
    d5b4:	9a03      	ldr	r2, [sp, #12]
    d5b6:	4413      	add	r3, r2
    d5b8:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d5ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d5bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d5be:	4413      	add	r3, r2
    d5c0:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d5c2:	2300      	movs	r3, #0
    d5c4:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d5c6:	9a03      	ldr	r2, [sp, #12]
    d5c8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d5cc:	f7ff fc2a 	bl	ce24 <uint64_to_str>
    d5d0:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d5d2:	9b03      	ldr	r3, [sp, #12]
    d5d4:	2b00      	cmp	r3, #0
    d5d6:	d003      	beq.n	d5e0 <am_util_stdio_vsprintf+0x404>
                {
                    pcBuf += iVal;
    d5d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d5da:	9a03      	ldr	r2, [sp, #12]
    d5dc:	4413      	add	r3, r2
    d5de:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d5e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d5e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d5e4:	4413      	add	r3, r2
    d5e6:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d5e8:	e0ea      	b.n	d7c0 <am_util_stdio_vsprintf+0x5e4>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d5ea:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d5ee:	2b00      	cmp	r3, #0
    d5f0:	d009      	beq.n	d606 <am_util_stdio_vsprintf+0x42a>
    d5f2:	9b01      	ldr	r3, [sp, #4]
    d5f4:	3307      	adds	r3, #7
    d5f6:	f023 0307 	bic.w	r3, r3, #7
    d5fa:	f103 0208 	add.w	r2, r3, #8
    d5fe:	9201      	str	r2, [sp, #4]
    d600:	e9d3 8900 	ldrd	r8, r9, [r3]
    d604:	e006      	b.n	d614 <am_util_stdio_vsprintf+0x438>
                                     va_arg(pArgs, int32_t);
    d606:	9b01      	ldr	r3, [sp, #4]
    d608:	1d1a      	adds	r2, r3, #4
    d60a:	9201      	str	r2, [sp, #4]
    d60c:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d60e:	17da      	asrs	r2, r3, #31
    d610:	4698      	mov	r8, r3
    d612:	4691      	mov	r9, r2
    d614:	e9cd 8908 	strd	r8, r9, [sp, #32]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    d618:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d61c:	2b00      	cmp	r3, #0
    d61e:	da0c      	bge.n	d63a <am_util_stdio_vsprintf+0x45e>
                {
                    ui64Val = -i64Val;          // Get absolute value
    d620:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d624:	2100      	movs	r1, #0
    d626:	f1d2 0a00 	rsbs	sl, r2, #0
    d62a:	eb61 0b03 	sbc.w	fp, r1, r3
    d62e:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
                    bNeg = true;
    d632:	2301      	movs	r3, #1
    d634:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    d638:	e006      	b.n	d648 <am_util_stdio_vsprintf+0x46c>
                }
                else
                {
                    ui64Val = i64Val;
    d63a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d63e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
                    bNeg = false;
    d642:	2300      	movs	r3, #0
    d644:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                }

                if ( iWidth )
    d648:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d64a:	2b00      	cmp	r3, #0
    d64c:	d04a      	beq.n	d6e4 <am_util_stdio_vsprintf+0x508>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    d64e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    d652:	4610      	mov	r0, r2
    d654:	4619      	mov	r1, r3
    d656:	f7ff fb63 	bl	cd20 <ndigits_in_i64>
    d65a:	4602      	mov	r2, r0
    d65c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d65e:	1a9b      	subs	r3, r3, r2
    d660:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg )
    d662:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d666:	2b00      	cmp	r3, #0
    d668:	d011      	beq.n	d68e <am_util_stdio_vsprintf+0x4b2>
                    {
                        --iWidth;
    d66a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d66c:	3b01      	subs	r3, #1
    d66e:	9310      	str	r3, [sp, #64]	; 0x40

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    d670:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d674:	2b30      	cmp	r3, #48	; 0x30
    d676:	d10a      	bne.n	d68e <am_util_stdio_vsprintf+0x4b2>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    d678:	9b03      	ldr	r3, [sp, #12]
    d67a:	2b00      	cmp	r3, #0
    d67c:	d004      	beq.n	d688 <am_util_stdio_vsprintf+0x4ac>
                            {
                                *pcBuf++ = '-';
    d67e:	9b03      	ldr	r3, [sp, #12]
    d680:	1c5a      	adds	r2, r3, #1
    d682:	9203      	str	r2, [sp, #12]
    d684:	222d      	movs	r2, #45	; 0x2d
    d686:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    d688:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d68a:	3301      	adds	r3, #1
    d68c:	9311      	str	r3, [sp, #68]	; 0x44
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d68e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d692:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d694:	4619      	mov	r1, r3
    d696:	9803      	ldr	r0, [sp, #12]
    d698:	f7ff fc7f 	bl	cf9a <padbuffer>
    d69c:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d69e:	9b03      	ldr	r3, [sp, #12]
    d6a0:	2b00      	cmp	r3, #0
    d6a2:	d001      	beq.n	d6a8 <am_util_stdio_vsprintf+0x4cc>
    d6a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d6a6:	e000      	b.n	d6aa <am_util_stdio_vsprintf+0x4ce>
    d6a8:	2300      	movs	r3, #0
    d6aa:	9a03      	ldr	r2, [sp, #12]
    d6ac:	4413      	add	r3, r2
    d6ae:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d6b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d6b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d6b4:	4413      	add	r3, r2
    d6b6:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d6b8:	2300      	movs	r3, #0
    d6ba:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d6bc:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d6c0:	2b00      	cmp	r3, #0
    d6c2:	d01e      	beq.n	d702 <am_util_stdio_vsprintf+0x526>
    d6c4:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d6c8:	2b20      	cmp	r3, #32
    d6ca:	d11a      	bne.n	d702 <am_util_stdio_vsprintf+0x526>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    d6cc:	9b03      	ldr	r3, [sp, #12]
    d6ce:	2b00      	cmp	r3, #0
    d6d0:	d004      	beq.n	d6dc <am_util_stdio_vsprintf+0x500>
                        {
                            *pcBuf++ = '-';
    d6d2:	9b03      	ldr	r3, [sp, #12]
    d6d4:	1c5a      	adds	r2, r3, #1
    d6d6:	9203      	str	r2, [sp, #12]
    d6d8:	222d      	movs	r2, #45	; 0x2d
    d6da:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    d6dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d6de:	3301      	adds	r3, #1
    d6e0:	9311      	str	r3, [sp, #68]	; 0x44
    d6e2:	e00e      	b.n	d702 <am_util_stdio_vsprintf+0x526>
                    }
                }
                else
                {
                    if ( bNeg )
    d6e4:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d6e8:	2b00      	cmp	r3, #0
    d6ea:	d00a      	beq.n	d702 <am_util_stdio_vsprintf+0x526>
                    {
                        if ( pcBuf )
    d6ec:	9b03      	ldr	r3, [sp, #12]
    d6ee:	2b00      	cmp	r3, #0
    d6f0:	d004      	beq.n	d6fc <am_util_stdio_vsprintf+0x520>
                        {
                            *pcBuf++ = '-';
    d6f2:	9b03      	ldr	r3, [sp, #12]
    d6f4:	1c5a      	adds	r2, r3, #1
    d6f6:	9203      	str	r2, [sp, #12]
    d6f8:	222d      	movs	r2, #45	; 0x2d
    d6fa:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    d6fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d6fe:	3301      	adds	r3, #1
    d700:	9311      	str	r3, [sp, #68]	; 0x44
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d702:	9a03      	ldr	r2, [sp, #12]
    d704:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d708:	f7ff fb8c 	bl	ce24 <uint64_to_str>
    d70c:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d70e:	9b03      	ldr	r3, [sp, #12]
    d710:	2b00      	cmp	r3, #0
    d712:	d003      	beq.n	d71c <am_util_stdio_vsprintf+0x540>
                {
                    pcBuf += iVal;
    d714:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d716:	9a03      	ldr	r2, [sp, #12]
    d718:	4413      	add	r3, r2
    d71a:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d71c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d71e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d720:	4413      	add	r3, r2
    d722:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d724:	e04c      	b.n	d7c0 <am_util_stdio_vsprintf+0x5e4>


            case 'f':
            case 'F':
                if ( pcBuf )
    d726:	9b03      	ldr	r3, [sp, #12]
    d728:	2b00      	cmp	r3, #0
    d72a:	d048      	beq.n	d7be <am_util_stdio_vsprintf+0x5e2>
                {
                    float fValue = va_arg(pArgs, double);
    d72c:	9b01      	ldr	r3, [sp, #4]
    d72e:	3307      	adds	r3, #7
    d730:	f023 0307 	bic.w	r3, r3, #7
    d734:	f103 0208 	add.w	r2, r3, #8
    d738:	9201      	str	r2, [sp, #4]
    d73a:	e9d3 2300 	ldrd	r2, r3, [r3]
    d73e:	4610      	mov	r0, r2
    d740:	4619      	mov	r1, r3
    d742:	f7fe fd77 	bl	c234 <__aeabi_d2f>
    d746:	4603      	mov	r3, r0
    d748:	9306      	str	r3, [sp, #24]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    d74a:	9b03      	ldr	r3, [sp, #12]
    d74c:	2214      	movs	r2, #20
    d74e:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    d750:	990e      	ldr	r1, [sp, #56]	; 0x38
    d752:	9803      	ldr	r0, [sp, #12]
    d754:	ed9d 0a06 	vldr	s0, [sp, #24]
    d758:	f7ff fc42 	bl	cfe0 <ftoa>
    d75c:	900f      	str	r0, [sp, #60]	; 0x3c
                    if ( iVal < 0 )
    d75e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d760:	2b00      	cmp	r3, #0
    d762:	da14      	bge.n	d78e <am_util_stdio_vsprintf+0x5b2>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d764:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d766:	f1b3 3fff 	cmp.w	r3, #4294967295
    d76a:	d102      	bne.n	d772 <am_util_stdio_vsprintf+0x596>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d76c:	4b1e      	ldr	r3, [pc, #120]	; (d7e8 <am_util_stdio_vsprintf+0x60c>)
    d76e:	930c      	str	r3, [sp, #48]	; 0x30
    d770:	e008      	b.n	d784 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d772:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d774:	f113 0f02 	cmn.w	r3, #2
    d778:	d102      	bne.n	d780 <am_util_stdio_vsprintf+0x5a4>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d77a:	4b1c      	ldr	r3, [pc, #112]	; (d7ec <am_util_stdio_vsprintf+0x610>)
    d77c:	930c      	str	r3, [sp, #48]	; 0x30
    d77e:	e001      	b.n	d784 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d780:	4b1b      	ldr	r3, [pc, #108]	; (d7f0 <am_util_stdio_vsprintf+0x614>)
    d782:	930c      	str	r3, [sp, #48]	; 0x30
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d784:	9b03      	ldr	r3, [sp, #12]
    d786:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d788:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    d78a:	2303      	movs	r3, #3
    d78c:	930f      	str	r3, [sp, #60]	; 0x3c
                    }
                    ui32CharCnt += iVal;
    d78e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d790:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d792:	4413      	add	r3, r2
    d794:	9311      	str	r3, [sp, #68]	; 0x44
                    pcBuf += iVal;
    d796:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d798:	9a03      	ldr	r2, [sp, #12]
    d79a:	4413      	add	r3, r2
    d79c:	9303      	str	r3, [sp, #12]
                }
                break;
    d79e:	e00e      	b.n	d7be <am_util_stdio_vsprintf+0x5e2>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d7a0:	9b03      	ldr	r3, [sp, #12]
    d7a2:	2b00      	cmp	r3, #0
    d7a4:	d005      	beq.n	d7b2 <am_util_stdio_vsprintf+0x5d6>
                {
                    *pcBuf++ = *pcFmt;
    d7a6:	9b03      	ldr	r3, [sp, #12]
    d7a8:	1c5a      	adds	r2, r3, #1
    d7aa:	9203      	str	r2, [sp, #12]
    d7ac:	9a02      	ldr	r2, [sp, #8]
    d7ae:	7812      	ldrb	r2, [r2, #0]
    d7b0:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d7b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d7b4:	3301      	adds	r3, #1
    d7b6:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d7b8:	e002      	b.n	d7c0 <am_util_stdio_vsprintf+0x5e4>
                break;
    d7ba:	bf00      	nop
    d7bc:	e000      	b.n	d7c0 <am_util_stdio_vsprintf+0x5e4>
                break;
    d7be:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d7c0:	9b02      	ldr	r3, [sp, #8]
    d7c2:	3301      	adds	r3, #1
    d7c4:	9302      	str	r3, [sp, #8]
    while ( *pcFmt != 0x0 )
    d7c6:	9b02      	ldr	r3, [sp, #8]
    d7c8:	781b      	ldrb	r3, [r3, #0]
    d7ca:	2b00      	cmp	r3, #0
    d7cc:	f47f ad11 	bne.w	d1f2 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d7d0:	9b03      	ldr	r3, [sp, #12]
    d7d2:	2b00      	cmp	r3, #0
    d7d4:	d002      	beq.n	d7dc <am_util_stdio_vsprintf+0x600>
    {
        *pcBuf = 0x0;
    d7d6:	9b03      	ldr	r3, [sp, #12]
    d7d8:	2200      	movs	r2, #0
    d7da:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d7dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    d7de:	4618      	mov	r0, r3
    d7e0:	b017      	add	sp, #92	; 0x5c
    d7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d7e6:	bf00      	nop
    d7e8:	00302e30 	.word	0x00302e30
    d7ec:	00232e23 	.word	0x00232e23
    d7f0:	003f2e3f 	.word	0x003f2e3f

0000d7f4 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d7f4:	b40f      	push	{r0, r1, r2, r3}
    d7f6:	b500      	push	{lr}
    d7f8:	b083      	sub	sp, #12
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d7fa:	4b0c      	ldr	r3, [pc, #48]	; (d82c <am_util_stdio_printf+0x38>)
    d7fc:	681b      	ldr	r3, [r3, #0]
    d7fe:	2b00      	cmp	r3, #0
    d800:	d101      	bne.n	d806 <am_util_stdio_printf+0x12>
    {
        return 0;
    d802:	2300      	movs	r3, #0
    d804:	e00c      	b.n	d820 <am_util_stdio_printf+0x2c>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d806:	ab05      	add	r3, sp, #20
    d808:	9300      	str	r3, [sp, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d80a:	9a00      	ldr	r2, [sp, #0]
    d80c:	9904      	ldr	r1, [sp, #16]
    d80e:	4808      	ldr	r0, [pc, #32]	; (d830 <am_util_stdio_printf+0x3c>)
    d810:	f7ff fce4 	bl	d1dc <am_util_stdio_vsprintf>
    d814:	9001      	str	r0, [sp, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d816:	4b05      	ldr	r3, [pc, #20]	; (d82c <am_util_stdio_printf+0x38>)
    d818:	681b      	ldr	r3, [r3, #0]
    d81a:	4805      	ldr	r0, [pc, #20]	; (d830 <am_util_stdio_printf+0x3c>)
    d81c:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d81e:	9b01      	ldr	r3, [sp, #4]
}
    d820:	4618      	mov	r0, r3
    d822:	b003      	add	sp, #12
    d824:	f85d eb04 	ldr.w	lr, [sp], #4
    d828:	b004      	add	sp, #16
    d82a:	4770      	bx	lr
    d82c:	10002158 	.word	0x10002158
    d830:	1000215c 	.word	0x1000215c

0000d834 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    d834:	b508      	push	{r3, lr}
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d836:	4802      	ldr	r0, [pc, #8]	; (d840 <am_util_stdio_terminal_clear+0xc>)
    d838:	f7ff ffdc 	bl	d7f4 <am_util_stdio_printf>
}
    d83c:	bf00      	nop
    d83e:	bd08      	pop	{r3, pc}
    d840:	0000fe40 	.word	0x0000fe40

0000d844 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    d844:	4811      	ldr	r0, [pc, #68]	; (d88c <zero_loop+0x12>)
    d846:	4912      	ldr	r1, [pc, #72]	; (d890 <zero_loop+0x16>)
    d848:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    d84a:	f8d1 d000 	ldr.w	sp, [r1]

#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    d84e:	4811      	ldr	r0, [pc, #68]	; (d894 <zero_loop+0x1a>)
    d850:	6801      	ldr	r1, [r0, #0]
    d852:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d856:	6001      	str	r1, [r0, #0]
    d858:	f3bf 8f4f 	dsb	sy
    d85c:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    d860:	480d      	ldr	r0, [pc, #52]	; (d898 <zero_loop+0x1e>)
    d862:	490e      	ldr	r1, [pc, #56]	; (d89c <zero_loop+0x22>)
    d864:	4a0e      	ldr	r2, [pc, #56]	; (d8a0 <zero_loop+0x26>)

0000d866 <copy_loop>:
    d866:	f850 3b04 	ldr.w	r3, [r0], #4
    d86a:	f841 3b04 	str.w	r3, [r1], #4
    d86e:	4291      	cmp	r1, r2
    d870:	dbf9      	blt.n	d866 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    d872:	480c      	ldr	r0, [pc, #48]	; (d8a4 <zero_loop+0x2a>)
    d874:	490c      	ldr	r1, [pc, #48]	; (d8a8 <zero_loop+0x2e>)
    d876:	f04f 0200 	mov.w	r2, #0

0000d87a <zero_loop>:
    d87a:	4288      	cmp	r0, r1
    d87c:	bfb8      	it	lt
    d87e:	f840 2b04 	strlt.w	r2, [r0], #4
    d882:	dbfa      	blt.n	d87a <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    d884:	f7fe ff5e 	bl	c744 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    d888:	be00      	bkpt	0x0000
}
    d88a:	bf00      	nop
    d88c:	e000ed08 	.word	0xe000ed08
    d890:	0000c000 	.word	0x0000c000
    d894:	e000ed88 	.word	0xe000ed88
    d898:	0001202c 	.word	0x0001202c
    d89c:	10001000 	.word	0x10001000
    d8a0:	1000105c 	.word	0x1000105c
    d8a4:	1000105c 	.word	0x1000105c
    d8a8:	10005934 	.word	0x10005934

0000d8ac <NMI_Handler>:
NMI_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d8ac:	e7fe      	b.n	d8ac <NMI_Handler>

0000d8ae <BusFault_Handler>:
HardFault_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d8ae:	e7fe      	b.n	d8ae <BusFault_Handler>

0000d8b0 <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d8b0:	e7fe      	b.n	d8b0 <DebugMon_Handler>
	...

0000d8b4 <am_hal_cachectrl_config>:
    d8b4:	b530      	push	{r4, r5, lr}
    d8b6:	b083      	sub	sp, #12
    d8b8:	4604      	mov	r4, r0
    d8ba:	f000 fd15 	bl	e2e8 <am_hal_interrupt_master_disable>
    d8be:	4d0e      	ldr	r5, [pc, #56]	; (d8f8 <am_hal_cachectrl_config+0x44>)
    d8c0:	9001      	str	r0, [sp, #4]
    d8c2:	682b      	ldr	r3, [r5, #0]
    d8c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    d8c8:	602b      	str	r3, [r5, #0]
    d8ca:	9801      	ldr	r0, [sp, #4]
    d8cc:	f000 fd10 	bl	e2f0 <am_hal_interrupt_master_set>
    d8d0:	7863      	ldrb	r3, [r4, #1]
    d8d2:	7822      	ldrb	r2, [r4, #0]
    d8d4:	78a1      	ldrb	r1, [r4, #2]
    d8d6:	021b      	lsls	r3, r3, #8
    d8d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
    d8dc:	0112      	lsls	r2, r2, #4
    d8de:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    d8e2:	b2d2      	uxtb	r2, r2
    d8e4:	4313      	orrs	r3, r2
    d8e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d8ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d8ee:	2000      	movs	r0, #0
    d8f0:	602b      	str	r3, [r5, #0]
    d8f2:	b003      	add	sp, #12
    d8f4:	bd30      	pop	{r4, r5, pc}
    d8f6:	bf00      	nop
    d8f8:	40018000 	.word	0x40018000

0000d8fc <am_hal_cachectrl_enable>:
    d8fc:	4a03      	ldr	r2, [pc, #12]	; (d90c <am_hal_cachectrl_enable+0x10>)
    d8fe:	6813      	ldr	r3, [r2, #0]
    d900:	f043 0301 	orr.w	r3, r3, #1
    d904:	2000      	movs	r0, #0
    d906:	6013      	str	r3, [r2, #0]
    d908:	4770      	bx	lr
    d90a:	bf00      	nop
    d90c:	40018000 	.word	0x40018000

0000d910 <am_hal_cachectrl_control>:
    d910:	b510      	push	{r4, lr}
    d912:	3801      	subs	r0, #1
    d914:	b08e      	sub	sp, #56	; 0x38
    d916:	2810      	cmp	r0, #16
    d918:	f200 815e 	bhi.w	dbd8 <am_hal_cachectrl_control+0x2c8>
    d91c:	e8df f010 	tbh	[pc, r0, lsl #1]
    d920:	00360018 	.word	0x00360018
    d924:	0040003d 	.word	0x0040003d
    d928:	00450043 	.word	0x00450043
    d92c:	0011001a 	.word	0x0011001a
    d930:	00540047 	.word	0x00540047
    d934:	009a0061 	.word	0x009a0061
    d938:	010c00d3 	.word	0x010c00d3
    d93c:	013f0126 	.word	0x013f0126
    d940:	001d      	.short	0x001d
    d942:	f44f 7300 	mov.w	r3, #512	; 0x200
    d946:	4aac      	ldr	r2, [pc, #688]	; (dbf8 <am_hal_cachectrl_control+0x2e8>)
    d948:	2000      	movs	r0, #0
    d94a:	6093      	str	r3, [r2, #8]
    d94c:	b00e      	add	sp, #56	; 0x38
    d94e:	bd10      	pop	{r4, pc}
    d950:	2301      	movs	r3, #1
    d952:	e7f8      	b.n	d946 <am_hal_cachectrl_control+0x36>
    d954:	f44f 6380 	mov.w	r3, #1024	; 0x400
    d958:	e7f5      	b.n	d946 <am_hal_cachectrl_control+0x36>
    d95a:	2900      	cmp	r1, #0
    d95c:	f000 813c 	beq.w	dbd8 <am_hal_cachectrl_control+0x2c8>
    d960:	684a      	ldr	r2, [r1, #4]
    d962:	48a6      	ldr	r0, [pc, #664]	; (dbfc <am_hal_cachectrl_control+0x2ec>)
    d964:	4202      	tst	r2, r0
    d966:	f040 8137 	bne.w	dbd8 <am_hal_cachectrl_control+0x2c8>
    d96a:	688b      	ldr	r3, [r1, #8]
    d96c:	4018      	ands	r0, r3
    d96e:	f040 8133 	bne.w	dbd8 <am_hal_cachectrl_control+0x2c8>
    d972:	780c      	ldrb	r4, [r1, #0]
    d974:	2c00      	cmp	r4, #0
    d976:	f040 8133 	bne.w	dbe0 <am_hal_cachectrl_control+0x2d0>
    d97a:	4c9f      	ldr	r4, [pc, #636]	; (dbf8 <am_hal_cachectrl_control+0x2e8>)
    d97c:	7849      	ldrb	r1, [r1, #1]
    d97e:	6122      	str	r2, [r4, #16]
    d980:	6163      	str	r3, [r4, #20]
    d982:	6823      	ldr	r3, [r4, #0]
    d984:	f361 0382 	bfi	r3, r1, #2, #1
    d988:	6023      	str	r3, [r4, #0]
    d98a:	e7df      	b.n	d94c <am_hal_cachectrl_control+0x3c>
    d98c:	4b9a      	ldr	r3, [pc, #616]	; (dbf8 <am_hal_cachectrl_control+0x2e8>)
    d98e:	681b      	ldr	r3, [r3, #0]
    d990:	01db      	lsls	r3, r3, #7
    d992:	f140 811f 	bpl.w	dbd4 <am_hal_cachectrl_control+0x2c4>
    d996:	2302      	movs	r3, #2
    d998:	e7d5      	b.n	d946 <am_hal_cachectrl_control+0x36>
    d99a:	f44f 6388 	mov.w	r3, #1088	; 0x440
    d99e:	e7d2      	b.n	d946 <am_hal_cachectrl_control+0x36>
    d9a0:	f44f 7308 	mov.w	r3, #544	; 0x220
    d9a4:	e7cf      	b.n	d946 <am_hal_cachectrl_control+0x36>
    d9a6:	2340      	movs	r3, #64	; 0x40
    d9a8:	e7cd      	b.n	d946 <am_hal_cachectrl_control+0x36>
    d9aa:	2320      	movs	r3, #32
    d9ac:	e7cb      	b.n	d946 <am_hal_cachectrl_control+0x36>
    d9ae:	f000 fc9b 	bl	e2e8 <am_hal_interrupt_master_disable>
    d9b2:	4a91      	ldr	r2, [pc, #580]	; (dbf8 <am_hal_cachectrl_control+0x2e8>)
    d9b4:	9000      	str	r0, [sp, #0]
    d9b6:	6813      	ldr	r3, [r2, #0]
    d9b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    d9bc:	6013      	str	r3, [r2, #0]
    d9be:	9800      	ldr	r0, [sp, #0]
    d9c0:	f000 fc96 	bl	e2f0 <am_hal_interrupt_master_set>
    d9c4:	2000      	movs	r0, #0
    d9c6:	e7c1      	b.n	d94c <am_hal_cachectrl_control+0x3c>
    d9c8:	f000 fc8e 	bl	e2e8 <am_hal_interrupt_master_disable>
    d9cc:	4a8a      	ldr	r2, [pc, #552]	; (dbf8 <am_hal_cachectrl_control+0x2e8>)
    d9ce:	9001      	str	r0, [sp, #4]
    d9d0:	6813      	ldr	r3, [r2, #0]
    d9d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    d9d6:	6013      	str	r3, [r2, #0]
    d9d8:	9801      	ldr	r0, [sp, #4]
    d9da:	f000 fc89 	bl	e2f0 <am_hal_interrupt_master_set>
    d9de:	2000      	movs	r0, #0
    d9e0:	e7b4      	b.n	d94c <am_hal_cachectrl_control+0x3c>
    d9e2:	f000 fc81 	bl	e2e8 <am_hal_interrupt_master_disable>
    d9e6:	4603      	mov	r3, r0
    d9e8:	4885      	ldr	r0, [pc, #532]	; (dc00 <am_hal_cachectrl_control+0x2f0>)
    d9ea:	9302      	str	r3, [sp, #8]
    d9ec:	f000 fa0a 	bl	de04 <am_hal_flash_load_ui32>
    d9f0:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d9f4:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d9f8:	4881      	ldr	r0, [pc, #516]	; (dc00 <am_hal_cachectrl_control+0x2f0>)
    d9fa:	f000 fa07 	bl	de0c <am_hal_flash_store_ui32>
    d9fe:	9802      	ldr	r0, [sp, #8]
    da00:	f000 fc76 	bl	e2f0 <am_hal_interrupt_master_set>
    da04:	f000 fc70 	bl	e2e8 <am_hal_interrupt_master_disable>
    da08:	4603      	mov	r3, r0
    da0a:	487d      	ldr	r0, [pc, #500]	; (dc00 <am_hal_cachectrl_control+0x2f0>)
    da0c:	9303      	str	r3, [sp, #12]
    da0e:	f000 f9f9 	bl	de04 <am_hal_flash_load_ui32>
    da12:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    da16:	f440 61ee 	orr.w	r1, r0, #1904	; 0x770
    da1a:	4879      	ldr	r0, [pc, #484]	; (dc00 <am_hal_cachectrl_control+0x2f0>)
    da1c:	f000 f9f6 	bl	de0c <am_hal_flash_store_ui32>
    da20:	9803      	ldr	r0, [sp, #12]
    da22:	f000 fc65 	bl	e2f0 <am_hal_interrupt_master_set>
    da26:	f000 fc5f 	bl	e2e8 <am_hal_interrupt_master_disable>
    da2a:	4603      	mov	r3, r0
    da2c:	4874      	ldr	r0, [pc, #464]	; (dc00 <am_hal_cachectrl_control+0x2f0>)
    da2e:	9304      	str	r3, [sp, #16]
    da30:	f000 f9e8 	bl	de04 <am_hal_flash_load_ui32>
    da34:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    da38:	f020 000f 	bic.w	r0, r0, #15
    da3c:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    da40:	f041 0103 	orr.w	r1, r1, #3
    da44:	486e      	ldr	r0, [pc, #440]	; (dc00 <am_hal_cachectrl_control+0x2f0>)
    da46:	f000 f9e1 	bl	de0c <am_hal_flash_store_ui32>
    da4a:	9804      	ldr	r0, [sp, #16]
    da4c:	f000 fc50 	bl	e2f0 <am_hal_interrupt_master_set>
    da50:	2000      	movs	r0, #0
    da52:	e77b      	b.n	d94c <am_hal_cachectrl_control+0x3c>
    da54:	f000 fc48 	bl	e2e8 <am_hal_interrupt_master_disable>
    da58:	4603      	mov	r3, r0
    da5a:	4869      	ldr	r0, [pc, #420]	; (dc00 <am_hal_cachectrl_control+0x2f0>)
    da5c:	9305      	str	r3, [sp, #20]
    da5e:	f000 f9d1 	bl	de04 <am_hal_flash_load_ui32>
    da62:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    da66:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    da6a:	4865      	ldr	r0, [pc, #404]	; (dc00 <am_hal_cachectrl_control+0x2f0>)
    da6c:	f000 f9ce 	bl	de0c <am_hal_flash_store_ui32>
    da70:	9805      	ldr	r0, [sp, #20]
    da72:	f000 fc3d 	bl	e2f0 <am_hal_interrupt_master_set>
    da76:	f000 fc37 	bl	e2e8 <am_hal_interrupt_master_disable>
    da7a:	4603      	mov	r3, r0
    da7c:	4860      	ldr	r0, [pc, #384]	; (dc00 <am_hal_cachectrl_control+0x2f0>)
    da7e:	9306      	str	r3, [sp, #24]
    da80:	f000 f9c0 	bl	de04 <am_hal_flash_load_ui32>
    da84:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    da88:	f440 61ea 	orr.w	r1, r0, #1872	; 0x750
    da8c:	485c      	ldr	r0, [pc, #368]	; (dc00 <am_hal_cachectrl_control+0x2f0>)
    da8e:	f000 f9bd 	bl	de0c <am_hal_flash_store_ui32>
    da92:	9806      	ldr	r0, [sp, #24]
    da94:	f000 fc2c 	bl	e2f0 <am_hal_interrupt_master_set>
    da98:	f000 fc26 	bl	e2e8 <am_hal_interrupt_master_disable>
    da9c:	4603      	mov	r3, r0
    da9e:	4858      	ldr	r0, [pc, #352]	; (dc00 <am_hal_cachectrl_control+0x2f0>)
    daa0:	9307      	str	r3, [sp, #28]
    daa2:	f000 f9af 	bl	de04 <am_hal_flash_load_ui32>
    daa6:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    daaa:	f020 000f 	bic.w	r0, r0, #15
    daae:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    dab2:	f041 0101 	orr.w	r1, r1, #1
    dab6:	4852      	ldr	r0, [pc, #328]	; (dc00 <am_hal_cachectrl_control+0x2f0>)
    dab8:	f000 f9a8 	bl	de0c <am_hal_flash_store_ui32>
    dabc:	9807      	ldr	r0, [sp, #28]
    dabe:	f000 fc17 	bl	e2f0 <am_hal_interrupt_master_set>
    dac2:	2000      	movs	r0, #0
    dac4:	e742      	b.n	d94c <am_hal_cachectrl_control+0x3c>
    dac6:	f000 fc0f 	bl	e2e8 <am_hal_interrupt_master_disable>
    daca:	4603      	mov	r3, r0
    dacc:	484c      	ldr	r0, [pc, #304]	; (dc00 <am_hal_cachectrl_control+0x2f0>)
    dace:	9308      	str	r3, [sp, #32]
    dad0:	f000 f998 	bl	de04 <am_hal_flash_load_ui32>
    dad4:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    dad8:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    dadc:	4848      	ldr	r0, [pc, #288]	; (dc00 <am_hal_cachectrl_control+0x2f0>)
    dade:	f000 f995 	bl	de0c <am_hal_flash_store_ui32>
    dae2:	9808      	ldr	r0, [sp, #32]
    dae4:	f000 fc04 	bl	e2f0 <am_hal_interrupt_master_set>
    dae8:	f000 fbfe 	bl	e2e8 <am_hal_interrupt_master_disable>
    daec:	4603      	mov	r3, r0
    daee:	4844      	ldr	r0, [pc, #272]	; (dc00 <am_hal_cachectrl_control+0x2f0>)
    daf0:	9309      	str	r3, [sp, #36]	; 0x24
    daf2:	f000 f987 	bl	de04 <am_hal_flash_load_ui32>
    daf6:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    dafa:	f440 61ec 	orr.w	r1, r0, #1888	; 0x760
    dafe:	4840      	ldr	r0, [pc, #256]	; (dc00 <am_hal_cachectrl_control+0x2f0>)
    db00:	f000 f984 	bl	de0c <am_hal_flash_store_ui32>
    db04:	9809      	ldr	r0, [sp, #36]	; 0x24
    db06:	f000 fbf3 	bl	e2f0 <am_hal_interrupt_master_set>
    db0a:	f000 fbed 	bl	e2e8 <am_hal_interrupt_master_disable>
    db0e:	4603      	mov	r3, r0
    db10:	483b      	ldr	r0, [pc, #236]	; (dc00 <am_hal_cachectrl_control+0x2f0>)
    db12:	930a      	str	r3, [sp, #40]	; 0x28
    db14:	f000 f976 	bl	de04 <am_hal_flash_load_ui32>
    db18:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    db1c:	f020 000f 	bic.w	r0, r0, #15
    db20:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    db24:	f041 0101 	orr.w	r1, r1, #1
    db28:	4835      	ldr	r0, [pc, #212]	; (dc00 <am_hal_cachectrl_control+0x2f0>)
    db2a:	f000 f96f 	bl	de0c <am_hal_flash_store_ui32>
    db2e:	980a      	ldr	r0, [sp, #40]	; 0x28
    db30:	f000 fbde 	bl	e2f0 <am_hal_interrupt_master_set>
    db34:	2000      	movs	r0, #0
    db36:	e709      	b.n	d94c <am_hal_cachectrl_control+0x3c>
    db38:	2900      	cmp	r1, #0
    db3a:	d04d      	beq.n	dbd8 <am_hal_cachectrl_control+0x2c8>
    db3c:	680c      	ldr	r4, [r1, #0]
    db3e:	2c03      	cmp	r4, #3
    db40:	d84c      	bhi.n	dbdc <am_hal_cachectrl_control+0x2cc>
    db42:	f000 fbd1 	bl	e2e8 <am_hal_interrupt_master_disable>
    db46:	4603      	mov	r3, r0
    db48:	482d      	ldr	r0, [pc, #180]	; (dc00 <am_hal_cachectrl_control+0x2f0>)
    db4a:	930b      	str	r3, [sp, #44]	; 0x2c
    db4c:	f000 f95a 	bl	de04 <am_hal_flash_load_ui32>
    db50:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    db54:	ea40 3104 	orr.w	r1, r0, r4, lsl #12
    db58:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    db5c:	4828      	ldr	r0, [pc, #160]	; (dc00 <am_hal_cachectrl_control+0x2f0>)
    db5e:	f000 f955 	bl	de0c <am_hal_flash_store_ui32>
    db62:	980b      	ldr	r0, [sp, #44]	; 0x2c
    db64:	f000 fbc4 	bl	e2f0 <am_hal_interrupt_master_set>
    db68:	2000      	movs	r0, #0
    db6a:	e6ef      	b.n	d94c <am_hal_cachectrl_control+0x3c>
    db6c:	b3a1      	cbz	r1, dbd8 <am_hal_cachectrl_control+0x2c8>
    db6e:	680c      	ldr	r4, [r1, #0]
    db70:	2c07      	cmp	r4, #7
    db72:	d833      	bhi.n	dbdc <am_hal_cachectrl_control+0x2cc>
    db74:	f000 fbb8 	bl	e2e8 <am_hal_interrupt_master_disable>
    db78:	4603      	mov	r3, r0
    db7a:	4821      	ldr	r0, [pc, #132]	; (dc00 <am_hal_cachectrl_control+0x2f0>)
    db7c:	930c      	str	r3, [sp, #48]	; 0x30
    db7e:	f000 f941 	bl	de04 <am_hal_flash_load_ui32>
    db82:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    db86:	ea40 1104 	orr.w	r1, r0, r4, lsl #4
    db8a:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    db8e:	481c      	ldr	r0, [pc, #112]	; (dc00 <am_hal_cachectrl_control+0x2f0>)
    db90:	f000 f93c 	bl	de0c <am_hal_flash_store_ui32>
    db94:	980c      	ldr	r0, [sp, #48]	; 0x30
    db96:	f000 fbab 	bl	e2f0 <am_hal_interrupt_master_set>
    db9a:	2000      	movs	r0, #0
    db9c:	e6d6      	b.n	d94c <am_hal_cachectrl_control+0x3c>
    db9e:	b1d9      	cbz	r1, dbd8 <am_hal_cachectrl_control+0x2c8>
    dba0:	680c      	ldr	r4, [r1, #0]
    dba2:	2c0f      	cmp	r4, #15
    dba4:	d81a      	bhi.n	dbdc <am_hal_cachectrl_control+0x2cc>
    dba6:	f000 fb9f 	bl	e2e8 <am_hal_interrupt_master_disable>
    dbaa:	4603      	mov	r3, r0
    dbac:	4814      	ldr	r0, [pc, #80]	; (dc00 <am_hal_cachectrl_control+0x2f0>)
    dbae:	930d      	str	r3, [sp, #52]	; 0x34
    dbb0:	f000 f928 	bl	de04 <am_hal_flash_load_ui32>
    dbb4:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    dbb8:	f020 000f 	bic.w	r0, r0, #15
    dbbc:	ea40 0104 	orr.w	r1, r0, r4
    dbc0:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    dbc4:	480e      	ldr	r0, [pc, #56]	; (dc00 <am_hal_cachectrl_control+0x2f0>)
    dbc6:	f000 f921 	bl	de0c <am_hal_flash_store_ui32>
    dbca:	980d      	ldr	r0, [sp, #52]	; 0x34
    dbcc:	f000 fb90 	bl	e2f0 <am_hal_interrupt_master_set>
    dbd0:	2000      	movs	r0, #0
    dbd2:	e6bb      	b.n	d94c <am_hal_cachectrl_control+0x3c>
    dbd4:	2007      	movs	r0, #7
    dbd6:	e6b9      	b.n	d94c <am_hal_cachectrl_control+0x3c>
    dbd8:	2006      	movs	r0, #6
    dbda:	e6b7      	b.n	d94c <am_hal_cachectrl_control+0x3c>
    dbdc:	2001      	movs	r0, #1
    dbde:	e6b5      	b.n	d94c <am_hal_cachectrl_control+0x3c>
    dbe0:	2c01      	cmp	r4, #1
    dbe2:	d1f9      	bne.n	dbd8 <am_hal_cachectrl_control+0x2c8>
    dbe4:	4c04      	ldr	r4, [pc, #16]	; (dbf8 <am_hal_cachectrl_control+0x2e8>)
    dbe6:	7849      	ldrb	r1, [r1, #1]
    dbe8:	61a2      	str	r2, [r4, #24]
    dbea:	61e3      	str	r3, [r4, #28]
    dbec:	6823      	ldr	r3, [r4, #0]
    dbee:	f361 03c3 	bfi	r3, r1, #3, #1
    dbf2:	6023      	str	r3, [r4, #0]
    dbf4:	e6aa      	b.n	d94c <am_hal_cachectrl_control+0x3c>
    dbf6:	bf00      	nop
    dbf8:	40018000 	.word	0x40018000
    dbfc:	f800000f 	.word	0xf800000f
    dc00:	40018004 	.word	0x40018004

0000dc04 <am_hal_clkgen_control>:
    dc04:	4b49      	ldr	r3, [pc, #292]	; (dd2c <am_hal_clkgen_control+0x128>)
    dc06:	681a      	ldr	r2, [r3, #0]
    dc08:	b912      	cbnz	r2, dc10 <am_hal_clkgen_control+0xc>
    dc0a:	4a49      	ldr	r2, [pc, #292]	; (dd30 <am_hal_clkgen_control+0x12c>)
    dc0c:	6812      	ldr	r2, [r2, #0]
    dc0e:	601a      	str	r2, [r3, #0]
    dc10:	2809      	cmp	r0, #9
    dc12:	f200 8089 	bhi.w	dd28 <am_hal_clkgen_control+0x124>
    dc16:	e8df f000 	tbb	[pc, r0]
    dc1a:	160d      	.short	0x160d
    dc1c:	423a261e 	.word	0x423a261e
    dc20:	055c544c 	.word	0x055c544c
    dc24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dc28:	2000      	movs	r0, #0
    dc2a:	6a1a      	ldr	r2, [r3, #32]
    dc2c:	f36f 0200 	bfc	r2, #0, #1
    dc30:	621a      	str	r2, [r3, #32]
    dc32:	4770      	bx	lr
    dc34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dc38:	2200      	movs	r2, #0
    dc3a:	2147      	movs	r1, #71	; 0x47
    dc3c:	6159      	str	r1, [r3, #20]
    dc3e:	4610      	mov	r0, r2
    dc40:	619a      	str	r2, [r3, #24]
    dc42:	615a      	str	r2, [r3, #20]
    dc44:	4770      	bx	lr
    dc46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dc4a:	2000      	movs	r0, #0
    dc4c:	899a      	ldrh	r2, [r3, #12]
    dc4e:	f36f 0200 	bfc	r2, #0, #1
    dc52:	819a      	strh	r2, [r3, #12]
    dc54:	4770      	bx	lr
    dc56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dc5a:	2000      	movs	r0, #0
    dc5c:	899a      	ldrh	r2, [r3, #12]
    dc5e:	f36f 0241 	bfc	r2, #1, #1
    dc62:	819a      	strh	r2, [r3, #12]
    dc64:	4770      	bx	lr
    dc66:	4a33      	ldr	r2, [pc, #204]	; (dd34 <am_hal_clkgen_control+0x130>)
    dc68:	68d3      	ldr	r3, [r2, #12]
    dc6a:	b2db      	uxtb	r3, r3
    dc6c:	2b21      	cmp	r3, #33	; 0x21
    dc6e:	d106      	bne.n	dc7e <am_hal_clkgen_control+0x7a>
    dc70:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    dc74:	2101      	movs	r1, #1
    dc76:	f361 2309 	bfi	r3, r1, #8, #2
    dc7a:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    dc7e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dc82:	2000      	movs	r0, #0
    dc84:	8993      	ldrh	r3, [r2, #12]
    dc86:	f043 0301 	orr.w	r3, r3, #1
    dc8a:	8193      	strh	r3, [r2, #12]
    dc8c:	4770      	bx	lr
    dc8e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dc92:	2000      	movs	r0, #0
    dc94:	8993      	ldrh	r3, [r2, #12]
    dc96:	f043 0302 	orr.w	r3, r3, #2
    dc9a:	8193      	strh	r3, [r2, #12]
    dc9c:	4770      	bx	lr
    dc9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dca2:	2200      	movs	r2, #0
    dca4:	2047      	movs	r0, #71	; 0x47
    dca6:	2101      	movs	r1, #1
    dca8:	6158      	str	r0, [r3, #20]
    dcaa:	6199      	str	r1, [r3, #24]
    dcac:	4610      	mov	r0, r2
    dcae:	615a      	str	r2, [r3, #20]
    dcb0:	4770      	bx	lr
    dcb2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dcb6:	2000      	movs	r0, #0
    dcb8:	899a      	ldrh	r2, [r3, #12]
    dcba:	f36f 12c7 	bfc	r2, #7, #1
    dcbe:	819a      	strh	r2, [r3, #12]
    dcc0:	4770      	bx	lr
    dcc2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dcc6:	2000      	movs	r0, #0
    dcc8:	8993      	ldrh	r3, [r2, #12]
    dcca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    dcce:	8193      	strh	r3, [r2, #12]
    dcd0:	4770      	bx	lr
    dcd2:	4a18      	ldr	r2, [pc, #96]	; (dd34 <am_hal_clkgen_control+0x130>)
    dcd4:	68d3      	ldr	r3, [r2, #12]
    dcd6:	b2db      	uxtb	r3, r3
    dcd8:	2b21      	cmp	r3, #33	; 0x21
    dcda:	d00a      	beq.n	dcf2 <am_hal_clkgen_control+0xee>
    dcdc:	b139      	cbz	r1, dcee <am_hal_clkgen_control+0xea>
    dcde:	680b      	ldr	r3, [r1, #0]
    dce0:	f043 0301 	orr.w	r3, r3, #1
    dce4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dce8:	2000      	movs	r0, #0
    dcea:	6213      	str	r3, [r2, #32]
    dcec:	4770      	bx	lr
    dcee:	4b12      	ldr	r3, [pc, #72]	; (dd38 <am_hal_clkgen_control+0x134>)
    dcf0:	e7f8      	b.n	dce4 <am_hal_clkgen_control+0xe0>
    dcf2:	b500      	push	{lr}
    dcf4:	b083      	sub	sp, #12
    dcf6:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    dcfa:	9101      	str	r1, [sp, #4]
    dcfc:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    dd00:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    dd04:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    dd08:	f000 f836 	bl	dd78 <am_hal_flash_delay>
    dd0c:	9901      	ldr	r1, [sp, #4]
    dd0e:	b149      	cbz	r1, dd24 <am_hal_clkgen_control+0x120>
    dd10:	680b      	ldr	r3, [r1, #0]
    dd12:	f043 0301 	orr.w	r3, r3, #1
    dd16:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dd1a:	2000      	movs	r0, #0
    dd1c:	6213      	str	r3, [r2, #32]
    dd1e:	b003      	add	sp, #12
    dd20:	f85d fb04 	ldr.w	pc, [sp], #4
    dd24:	4b04      	ldr	r3, [pc, #16]	; (dd38 <am_hal_clkgen_control+0x134>)
    dd26:	e7f6      	b.n	dd16 <am_hal_clkgen_control+0x112>
    dd28:	2006      	movs	r0, #6
    dd2a:	4770      	bx	lr
    dd2c:	100057c8 	.word	0x100057c8
    dd30:	4ffff000 	.word	0x4ffff000
    dd34:	40020000 	.word	0x40020000
    dd38:	0025b801 	.word	0x0025b801

0000dd3c <am_hal_clkgen_status_get>:
    dd3c:	b1b0      	cbz	r0, dd6c <am_hal_clkgen_status_get+0x30>
    dd3e:	b410      	push	{r4}
    dd40:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    dd44:	4603      	mov	r3, r0
    dd46:	698c      	ldr	r4, [r1, #24]
    dd48:	4809      	ldr	r0, [pc, #36]	; (dd70 <am_hal_clkgen_status_get+0x34>)
    dd4a:	4a0a      	ldr	r2, [pc, #40]	; (dd74 <am_hal_clkgen_status_get+0x38>)
    dd4c:	f014 0f01 	tst.w	r4, #1
    dd50:	bf08      	it	eq
    dd52:	4602      	moveq	r2, r0
    dd54:	601a      	str	r2, [r3, #0]
    dd56:	69ca      	ldr	r2, [r1, #28]
    dd58:	f85d 4b04 	ldr.w	r4, [sp], #4
    dd5c:	f002 0101 	and.w	r1, r2, #1
    dd60:	f3c2 0240 	ubfx	r2, r2, #1, #1
    dd64:	2000      	movs	r0, #0
    dd66:	6059      	str	r1, [r3, #4]
    dd68:	721a      	strb	r2, [r3, #8]
    dd6a:	4770      	bx	lr
    dd6c:	2006      	movs	r0, #6
    dd6e:	4770      	bx	lr
    dd70:	02dc6c00 	.word	0x02dc6c00
    dd74:	016e3600 	.word	0x016e3600

0000dd78 <am_hal_flash_delay>:
    dd78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dd7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    dd7e:	075b      	lsls	r3, r3, #29
    dd80:	bf46      	itte	mi
    dd82:	0040      	lslmi	r0, r0, #1
    dd84:	230e      	movmi	r3, #14
    dd86:	230b      	movpl	r3, #11
    dd88:	4298      	cmp	r0, r3
    dd8a:	d902      	bls.n	dd92 <am_hal_flash_delay+0x1a>
    dd8c:	4a01      	ldr	r2, [pc, #4]	; (dd94 <am_hal_flash_delay+0x1c>)
    dd8e:	1ac0      	subs	r0, r0, r3
    dd90:	4710      	bx	r2
    dd92:	4770      	bx	lr
    dd94:	0800009d 	.word	0x0800009d

0000dd98 <am_hal_flash_delay_status_check>:
    dd98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dd9c:	f89d c020 	ldrb.w	ip, [sp, #32]
    dda0:	f8df 805c 	ldr.w	r8, [pc, #92]	; de00 <am_hal_flash_delay_status_check+0x68>
    dda4:	4604      	mov	r4, r0
    dda6:	460d      	mov	r5, r1
    dda8:	4616      	mov	r6, r2
    ddaa:	461f      	mov	r7, r3
    ddac:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    ddb0:	f1bc 0f00 	cmp.w	ip, #0
    ddb4:	d00a      	beq.n	ddcc <am_hal_flash_delay_status_check+0x34>
    ddb6:	e01a      	b.n	ddee <am_hal_flash_delay_status_check+0x56>
    ddb8:	b1f4      	cbz	r4, ddf8 <am_hal_flash_delay_status_check+0x60>
    ddba:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    ddbe:	f013 0f04 	tst.w	r3, #4
    ddc2:	bf0c      	ite	eq
    ddc4:	2005      	moveq	r0, #5
    ddc6:	2012      	movne	r0, #18
    ddc8:	3c01      	subs	r4, #1
    ddca:	47c0      	blx	r8
    ddcc:	6828      	ldr	r0, [r5, #0]
    ddce:	4030      	ands	r0, r6
    ddd0:	42b8      	cmp	r0, r7
    ddd2:	d0f1      	beq.n	ddb8 <am_hal_flash_delay_status_check+0x20>
    ddd4:	2000      	movs	r0, #0
    ddd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ddda:	b16c      	cbz	r4, ddf8 <am_hal_flash_delay_status_check+0x60>
    dddc:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    dde0:	f013 0f04 	tst.w	r3, #4
    dde4:	bf0c      	ite	eq
    dde6:	2005      	moveq	r0, #5
    dde8:	2012      	movne	r0, #18
    ddea:	3c01      	subs	r4, #1
    ddec:	47c0      	blx	r8
    ddee:	6828      	ldr	r0, [r5, #0]
    ddf0:	4030      	ands	r0, r6
    ddf2:	42b8      	cmp	r0, r7
    ddf4:	d1f1      	bne.n	ddda <am_hal_flash_delay_status_check+0x42>
    ddf6:	e7ed      	b.n	ddd4 <am_hal_flash_delay_status_check+0x3c>
    ddf8:	2004      	movs	r0, #4
    ddfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ddfe:	bf00      	nop
    de00:	0800009d 	.word	0x0800009d

0000de04 <am_hal_flash_load_ui32>:
    de04:	4b00      	ldr	r3, [pc, #0]	; (de08 <am_hal_flash_load_ui32+0x4>)
    de06:	4718      	bx	r3
    de08:	08000075 	.word	0x08000075

0000de0c <am_hal_flash_store_ui32>:
    de0c:	4b01      	ldr	r3, [pc, #4]	; (de14 <am_hal_flash_store_ui32+0x8>)
    de0e:	f043 0301 	orr.w	r3, r3, #1
    de12:	4718      	bx	r3
    de14:	10001028 	.word	0x10001028

0000de18 <am_hal_gpio_pinconfig>:
    de18:	2831      	cmp	r0, #49	; 0x31
    de1a:	f200 80c3 	bhi.w	dfa4 <am_hal_gpio_pinconfig+0x18c>
    de1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    de22:	4604      	mov	r4, r0
    de24:	f011 07e0 	ands.w	r7, r1, #224	; 0xe0
    de28:	f001 0007 	and.w	r0, r1, #7
    de2c:	b085      	sub	sp, #20
    de2e:	f3c1 03c1 	ubfx	r3, r1, #3, #2
    de32:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    de36:	d00f      	beq.n	de58 <am_hal_gpio_pinconfig+0x40>
    de38:	f3c1 1642 	ubfx	r6, r1, #5, #3
    de3c:	1db5      	adds	r5, r6, #6
    de3e:	f005 0507 	and.w	r5, r5, #7
    de42:	2d03      	cmp	r5, #3
    de44:	f042 0201 	orr.w	r2, r2, #1
    de48:	f240 80ae 	bls.w	dfa8 <am_hal_gpio_pinconfig+0x190>
    de4c:	2fc0      	cmp	r7, #192	; 0xc0
    de4e:	f000 80e1 	beq.w	e014 <am_hal_gpio_pinconfig+0x1fc>
    de52:	2f20      	cmp	r7, #32
    de54:	f000 80e3 	beq.w	e01e <am_hal_gpio_pinconfig+0x206>
    de58:	b163      	cbz	r3, de74 <am_hal_gpio_pinconfig+0x5c>
    de5a:	2b01      	cmp	r3, #1
    de5c:	f000 80d3 	beq.w	e006 <am_hal_gpio_pinconfig+0x1ee>
    de60:	2b02      	cmp	r3, #2
    de62:	f040 80c9 	bne.w	dff8 <am_hal_gpio_pinconfig+0x1e0>
    de66:	4b79      	ldr	r3, [pc, #484]	; (e04c <am_hal_gpio_pinconfig+0x234>)
    de68:	5d1b      	ldrb	r3, [r3, r4]
    de6a:	075b      	lsls	r3, r3, #29
    de6c:	f140 80c4 	bpl.w	dff8 <am_hal_gpio_pinconfig+0x1e0>
    de70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    de74:	4b76      	ldr	r3, [pc, #472]	; (e050 <am_hal_gpio_pinconfig+0x238>)
    de76:	5d1b      	ldrb	r3, [r3, r4]
    de78:	4103      	asrs	r3, r0
    de7a:	005b      	lsls	r3, r3, #1
    de7c:	f003 0302 	and.w	r3, r3, #2
    de80:	4313      	orrs	r3, r2
    de82:	4a74      	ldr	r2, [pc, #464]	; (e054 <am_hal_gpio_pinconfig+0x23c>)
    de84:	5d12      	ldrb	r2, [r2, r4]
    de86:	4282      	cmp	r2, r0
    de88:	f000 8099 	beq.w	dfbe <am_hal_gpio_pinconfig+0x1a6>
    de8c:	f3c1 3000 	ubfx	r0, r1, #12, #1
    de90:	f3c1 2581 	ubfx	r5, r1, #10, #2
    de94:	f3c1 3280 	ubfx	r2, r1, #14, #1
    de98:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    de9c:	0a88      	lsrs	r0, r1, #10
    de9e:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    dea2:	f000 0008 	and.w	r0, r0, #8
    dea6:	4302      	orrs	r2, r0
    dea8:	f3c1 2007 	ubfx	r0, r1, #8, #8
    deac:	f000 050c 	and.w	r5, r0, #12
    deb0:	2d04      	cmp	r5, #4
    deb2:	f000 80a5 	beq.w	e000 <am_hal_gpio_pinconfig+0x1e8>
    deb6:	4d68      	ldr	r5, [pc, #416]	; (e058 <am_hal_gpio_pinconfig+0x240>)
    deb8:	682d      	ldr	r5, [r5, #0]
    deba:	eba1 0805 	sub.w	r8, r1, r5
    debe:	fab8 f888 	clz	r8, r8
    dec2:	ea4f 1858 	mov.w	r8, r8, lsr #5
    dec6:	f010 0f60 	tst.w	r0, #96	; 0x60
    deca:	bf04      	itt	eq
    decc:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
    ded0:	f360 0200 	bfieq	r2, r0, #0, #1
    ded4:	00a0      	lsls	r0, r4, #2
    ded6:	f3c1 2101 	ubfx	r1, r1, #8, #2
    deda:	2902      	cmp	r1, #2
    dedc:	d05c      	beq.n	df98 <am_hal_gpio_pinconfig+0x180>
    dede:	2903      	cmp	r1, #3
    dee0:	d058      	beq.n	df94 <am_hal_gpio_pinconfig+0x17c>
    dee2:	2901      	cmp	r1, #1
    dee4:	ea4f 01c4 	mov.w	r1, r4, lsl #3
    dee8:	bf08      	it	eq
    deea:	f043 0304 	orreq.w	r3, r3, #4
    deee:	f001 0118 	and.w	r1, r1, #24
    def2:	2700      	movs	r7, #0
    def4:	f000 001c 	and.w	r0, r0, #28
    def8:	fa02 f600 	lsl.w	r6, r2, r0
    defc:	220f      	movs	r2, #15
    defe:	4082      	lsls	r2, r0
    df00:	43d2      	mvns	r2, r2
    df02:	f04f 09ff 	mov.w	r9, #255	; 0xff
    df06:	fa03 f501 	lsl.w	r5, r3, r1
    df0a:	fa09 f901 	lsl.w	r9, r9, r1
    df0e:	9201      	str	r2, [sp, #4]
    df10:	f000 f9ea 	bl	e2e8 <am_hal_interrupt_master_disable>
    df14:	f024 0a03 	bic.w	sl, r4, #3
    df18:	ea4f 0b54 	mov.w	fp, r4, lsr #1
    df1c:	f10a 4c80 	add.w	ip, sl, #1073741824	; 0x40000000
    df20:	4b4e      	ldr	r3, [pc, #312]	; (e05c <am_hal_gpio_pinconfig+0x244>)
    df22:	494f      	ldr	r1, [pc, #316]	; (e060 <am_hal_gpio_pinconfig+0x248>)
    df24:	9a01      	ldr	r2, [sp, #4]
    df26:	9003      	str	r0, [sp, #12]
    df28:	ea6f 0909 	mvn.w	r9, r9
    df2c:	f02b 0b03 	bic.w	fp, fp, #3
    df30:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
    df34:	f1b8 0f00 	cmp.w	r8, #0
    df38:	d00b      	beq.n	df52 <am_hal_gpio_pinconfig+0x13a>
    df3a:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
    df3e:	f004 081f 	and.w	r8, r4, #31
    df42:	4848      	ldr	r0, [pc, #288]	; (e064 <am_hal_gpio_pinconfig+0x24c>)
    df44:	f00e 0e04 	and.w	lr, lr, #4
    df48:	2401      	movs	r4, #1
    df4a:	fa04 f408 	lsl.w	r4, r4, r8
    df4e:	f84e 4000 	str.w	r4, [lr, r0]
    df52:	4845      	ldr	r0, [pc, #276]	; (e068 <am_hal_gpio_pinconfig+0x250>)
    df54:	2473      	movs	r4, #115	; 0x73
    df56:	6604      	str	r4, [r0, #96]	; 0x60
    df58:	f8dc 4000 	ldr.w	r4, [ip]
    df5c:	ea04 0409 	and.w	r4, r4, r9
    df60:	4325      	orrs	r5, r4
    df62:	f8cc 5000 	str.w	r5, [ip]
    df66:	f85b 4003 	ldr.w	r4, [fp, r3]
    df6a:	4022      	ands	r2, r4
    df6c:	4332      	orrs	r2, r6
    df6e:	f84b 2003 	str.w	r2, [fp, r3]
    df72:	f85a 3001 	ldr.w	r3, [sl, r1]
    df76:	ea03 0909 	and.w	r9, r3, r9
    df7a:	2400      	movs	r4, #0
    df7c:	ea49 0707 	orr.w	r7, r9, r7
    df80:	f84a 7001 	str.w	r7, [sl, r1]
    df84:	6604      	str	r4, [r0, #96]	; 0x60
    df86:	9803      	ldr	r0, [sp, #12]
    df88:	f000 f9b2 	bl	e2f0 <am_hal_interrupt_master_set>
    df8c:	4620      	mov	r0, r4
    df8e:	b005      	add	sp, #20
    df90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df94:	f043 0304 	orr.w	r3, r3, #4
    df98:	00e1      	lsls	r1, r4, #3
    df9a:	f001 0118 	and.w	r1, r1, #24
    df9e:	2701      	movs	r7, #1
    dfa0:	408f      	lsls	r7, r1
    dfa2:	e7a7      	b.n	def4 <am_hal_gpio_pinconfig+0xdc>
    dfa4:	2006      	movs	r0, #6
    dfa6:	4770      	bx	lr
    dfa8:	4d28      	ldr	r5, [pc, #160]	; (e04c <am_hal_gpio_pinconfig+0x234>)
    dfaa:	5d2d      	ldrb	r5, [r5, r4]
    dfac:	3e02      	subs	r6, #2
    dfae:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    dfb2:	07ee      	lsls	r6, r5, #31
    dfb4:	d536      	bpl.n	e024 <am_hal_gpio_pinconfig+0x20c>
    dfb6:	2b00      	cmp	r3, #0
    dfb8:	f43f af5c 	beq.w	de74 <am_hal_gpio_pinconfig+0x5c>
    dfbc:	e74d      	b.n	de5a <am_hal_gpio_pinconfig+0x42>
    dfbe:	f3c1 4202 	ubfx	r2, r1, #16, #3
    dfc2:	2a07      	cmp	r2, #7
    dfc4:	d030      	beq.n	e028 <am_hal_gpio_pinconfig+0x210>
    dfc6:	4d29      	ldr	r5, [pc, #164]	; (e06c <am_hal_gpio_pinconfig+0x254>)
    dfc8:	f3c1 40c1 	ubfx	r0, r1, #19, #2
    dfcc:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    dfd0:	f815 0024 	ldrb.w	r0, [r5, r4, lsl #2]
    dfd4:	4290      	cmp	r0, r2
    dfd6:	d029      	beq.n	e02c <am_hal_gpio_pinconfig+0x214>
    dfd8:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    dfdc:	00a0      	lsls	r0, r4, #2
    dfde:	786e      	ldrb	r6, [r5, #1]
    dfe0:	4296      	cmp	r6, r2
    dfe2:	d02d      	beq.n	e040 <am_hal_gpio_pinconfig+0x228>
    dfe4:	78ae      	ldrb	r6, [r5, #2]
    dfe6:	4296      	cmp	r6, r2
    dfe8:	d02c      	beq.n	e044 <am_hal_gpio_pinconfig+0x22c>
    dfea:	78ed      	ldrb	r5, [r5, #3]
    dfec:	4295      	cmp	r5, r2
    dfee:	d02b      	beq.n	e048 <am_hal_gpio_pinconfig+0x230>
    dff0:	481f      	ldr	r0, [pc, #124]	; (e070 <am_hal_gpio_pinconfig+0x258>)
    dff2:	b005      	add	sp, #20
    dff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dff8:	481e      	ldr	r0, [pc, #120]	; (e074 <am_hal_gpio_pinconfig+0x25c>)
    dffa:	b005      	add	sp, #20
    dffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e000:	f04f 0801 	mov.w	r8, #1
    e004:	e75f      	b.n	dec6 <am_hal_gpio_pinconfig+0xae>
    e006:	4b11      	ldr	r3, [pc, #68]	; (e04c <am_hal_gpio_pinconfig+0x234>)
    e008:	5d1b      	ldrb	r3, [r3, r4]
    e00a:	079d      	lsls	r5, r3, #30
    e00c:	d5f4      	bpl.n	dff8 <am_hal_gpio_pinconfig+0x1e0>
    e00e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    e012:	e72f      	b.n	de74 <am_hal_gpio_pinconfig+0x5c>
    e014:	2c14      	cmp	r4, #20
    e016:	f43f af1f 	beq.w	de58 <am_hal_gpio_pinconfig+0x40>
    e01a:	4817      	ldr	r0, [pc, #92]	; (e078 <am_hal_gpio_pinconfig+0x260>)
    e01c:	e7b7      	b.n	df8e <am_hal_gpio_pinconfig+0x176>
    e01e:	2c14      	cmp	r4, #20
    e020:	f47f af1a 	bne.w	de58 <am_hal_gpio_pinconfig+0x40>
    e024:	4815      	ldr	r0, [pc, #84]	; (e07c <am_hal_gpio_pinconfig+0x264>)
    e026:	e7b2      	b.n	df8e <am_hal_gpio_pinconfig+0x176>
    e028:	4815      	ldr	r0, [pc, #84]	; (e080 <am_hal_gpio_pinconfig+0x268>)
    e02a:	e7b0      	b.n	df8e <am_hal_gpio_pinconfig+0x176>
    e02c:	2200      	movs	r2, #0
    e02e:	00a0      	lsls	r0, r4, #2
    e030:	0052      	lsls	r2, r2, #1
    e032:	f3c1 5540 	ubfx	r5, r1, #21, #1
    e036:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
    e03a:	f04f 0800 	mov.w	r8, #0
    e03e:	e74a      	b.n	ded6 <am_hal_gpio_pinconfig+0xbe>
    e040:	2201      	movs	r2, #1
    e042:	e7f5      	b.n	e030 <am_hal_gpio_pinconfig+0x218>
    e044:	2202      	movs	r2, #2
    e046:	e7f3      	b.n	e030 <am_hal_gpio_pinconfig+0x218>
    e048:	2203      	movs	r2, #3
    e04a:	e7f1      	b.n	e030 <am_hal_gpio_pinconfig+0x218>
    e04c:	00011c40 	.word	0x00011c40
    e050:	00011c74 	.word	0x00011c74
    e054:	00011d70 	.word	0x00011d70
    e058:	00011c38 	.word	0x00011c38
    e05c:	40010040 	.word	0x40010040
    e060:	400100e0 	.word	0x400100e0
    e064:	400100b4 	.word	0x400100b4
    e068:	40010000 	.word	0x40010000
    e06c:	00011ca8 	.word	0x00011ca8
    e070:	08000104 	.word	0x08000104
    e074:	08000102 	.word	0x08000102
    e078:	08000101 	.word	0x08000101
    e07c:	08000100 	.word	0x08000100
    e080:	08000103 	.word	0x08000103

0000e084 <am_hal_gpio_state_write>:
    e084:	2831      	cmp	r0, #49	; 0x31
    e086:	d81a      	bhi.n	e0be <am_hal_gpio_state_write+0x3a>
    e088:	b570      	push	{r4, r5, r6, lr}
    e08a:	2905      	cmp	r1, #5
    e08c:	b082      	sub	sp, #8
    e08e:	460d      	mov	r5, r1
    e090:	d812      	bhi.n	e0b8 <am_hal_gpio_state_write+0x34>
    e092:	f000 031f 	and.w	r3, r0, #31
    e096:	2201      	movs	r2, #1
    e098:	08c0      	lsrs	r0, r0, #3
    e09a:	fa02 f603 	lsl.w	r6, r2, r3
    e09e:	f000 0404 	and.w	r4, r0, #4
    e0a2:	f000 f921 	bl	e2e8 <am_hal_interrupt_master_disable>
    e0a6:	3d01      	subs	r5, #1
    e0a8:	9001      	str	r0, [sp, #4]
    e0aa:	2d04      	cmp	r5, #4
    e0ac:	d821      	bhi.n	e0f2 <am_hal_gpio_state_write+0x6e>
    e0ae:	e8df f005 	tbb	[pc, r5]
    e0b2:	1512      	.short	0x1512
    e0b4:	1d1a      	.short	0x1d1a
    e0b6:	08          	.byte	0x08
    e0b7:	00          	.byte	0x00
    e0b8:	2006      	movs	r0, #6
    e0ba:	b002      	add	sp, #8
    e0bc:	bd70      	pop	{r4, r5, r6, pc}
    e0be:	2005      	movs	r0, #5
    e0c0:	4770      	bx	lr
    e0c2:	4a0d      	ldr	r2, [pc, #52]	; (e0f8 <am_hal_gpio_state_write+0x74>)
    e0c4:	58a3      	ldr	r3, [r4, r2]
    e0c6:	4073      	eors	r3, r6
    e0c8:	50a3      	str	r3, [r4, r2]
    e0ca:	9801      	ldr	r0, [sp, #4]
    e0cc:	f000 f910 	bl	e2f0 <am_hal_interrupt_master_set>
    e0d0:	2000      	movs	r0, #0
    e0d2:	b002      	add	sp, #8
    e0d4:	bd70      	pop	{r4, r5, r6, pc}
    e0d6:	4b09      	ldr	r3, [pc, #36]	; (e0fc <am_hal_gpio_state_write+0x78>)
    e0d8:	50e6      	str	r6, [r4, r3]
    e0da:	e7f6      	b.n	e0ca <am_hal_gpio_state_write+0x46>
    e0dc:	4a08      	ldr	r2, [pc, #32]	; (e100 <am_hal_gpio_state_write+0x7c>)
    e0de:	58a3      	ldr	r3, [r4, r2]
    e0e0:	4073      	eors	r3, r6
    e0e2:	50a3      	str	r3, [r4, r2]
    e0e4:	e7f1      	b.n	e0ca <am_hal_gpio_state_write+0x46>
    e0e6:	4b04      	ldr	r3, [pc, #16]	; (e0f8 <am_hal_gpio_state_write+0x74>)
    e0e8:	50e6      	str	r6, [r4, r3]
    e0ea:	e7ee      	b.n	e0ca <am_hal_gpio_state_write+0x46>
    e0ec:	4b05      	ldr	r3, [pc, #20]	; (e104 <am_hal_gpio_state_write+0x80>)
    e0ee:	50e6      	str	r6, [r4, r3]
    e0f0:	e7eb      	b.n	e0ca <am_hal_gpio_state_write+0x46>
    e0f2:	4b05      	ldr	r3, [pc, #20]	; (e108 <am_hal_gpio_state_write+0x84>)
    e0f4:	50e6      	str	r6, [r4, r3]
    e0f6:	e7e8      	b.n	e0ca <am_hal_gpio_state_write+0x46>
    e0f8:	400100b4 	.word	0x400100b4
    e0fc:	40010090 	.word	0x40010090
    e100:	40010088 	.word	0x40010088
    e104:	400100a8 	.word	0x400100a8
    e108:	40010098 	.word	0x40010098

0000e10c <am_hal_gpio_interrupt_enable>:
    e10c:	b570      	push	{r4, r5, r6, lr}
    e10e:	0c8c      	lsrs	r4, r1, #18
    e110:	04a4      	lsls	r4, r4, #18
    e112:	b082      	sub	sp, #8
    e114:	b9ac      	cbnz	r4, e142 <am_hal_gpio_interrupt_enable+0x36>
    e116:	460d      	mov	r5, r1
    e118:	4606      	mov	r6, r0
    e11a:	f000 f8e5 	bl	e2e8 <am_hal_interrupt_master_disable>
    e11e:	4b0a      	ldr	r3, [pc, #40]	; (e148 <am_hal_gpio_interrupt_enable+0x3c>)
    e120:	9001      	str	r0, [sp, #4]
    e122:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
    e126:	4330      	orrs	r0, r6
    e128:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
    e12c:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
    e130:	430d      	orrs	r5, r1
    e132:	f8c3 5210 	str.w	r5, [r3, #528]	; 0x210
    e136:	9801      	ldr	r0, [sp, #4]
    e138:	f000 f8da 	bl	e2f0 <am_hal_interrupt_master_set>
    e13c:	4620      	mov	r0, r4
    e13e:	b002      	add	sp, #8
    e140:	bd70      	pop	{r4, r5, r6, pc}
    e142:	2005      	movs	r0, #5
    e144:	b002      	add	sp, #8
    e146:	bd70      	pop	{r4, r5, r6, pc}
    e148:	40010000 	.word	0x40010000

0000e14c <am_hal_gpio_interrupt_disable>:
    e14c:	b570      	push	{r4, r5, r6, lr}
    e14e:	0c8c      	lsrs	r4, r1, #18
    e150:	04a4      	lsls	r4, r4, #18
    e152:	b082      	sub	sp, #8
    e154:	b9bc      	cbnz	r4, e186 <am_hal_gpio_interrupt_disable+0x3a>
    e156:	460d      	mov	r5, r1
    e158:	4606      	mov	r6, r0
    e15a:	f000 f8c5 	bl	e2e8 <am_hal_interrupt_master_disable>
    e15e:	4b0b      	ldr	r3, [pc, #44]	; (e18c <am_hal_gpio_interrupt_disable+0x40>)
    e160:	9001      	str	r0, [sp, #4]
    e162:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
    e166:	ea20 0006 	bic.w	r0, r0, r6
    e16a:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
    e16e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
    e172:	ea21 0505 	bic.w	r5, r1, r5
    e176:	f8c3 5210 	str.w	r5, [r3, #528]	; 0x210
    e17a:	9801      	ldr	r0, [sp, #4]
    e17c:	f000 f8b8 	bl	e2f0 <am_hal_interrupt_master_set>
    e180:	4620      	mov	r0, r4
    e182:	b002      	add	sp, #8
    e184:	bd70      	pop	{r4, r5, r6, pc}
    e186:	2005      	movs	r0, #5
    e188:	b002      	add	sp, #8
    e18a:	bd70      	pop	{r4, r5, r6, pc}
    e18c:	40010000 	.word	0x40010000

0000e190 <am_hal_gpio_interrupt_clear>:
    e190:	b570      	push	{r4, r5, r6, lr}
    e192:	0c8c      	lsrs	r4, r1, #18
    e194:	04a4      	lsls	r4, r4, #18
    e196:	b082      	sub	sp, #8
    e198:	b97c      	cbnz	r4, e1ba <am_hal_gpio_interrupt_clear+0x2a>
    e19a:	460d      	mov	r5, r1
    e19c:	4606      	mov	r6, r0
    e19e:	f000 f8a3 	bl	e2e8 <am_hal_interrupt_master_disable>
    e1a2:	4b07      	ldr	r3, [pc, #28]	; (e1c0 <am_hal_gpio_interrupt_clear+0x30>)
    e1a4:	9001      	str	r0, [sp, #4]
    e1a6:	f8c3 6208 	str.w	r6, [r3, #520]	; 0x208
    e1aa:	f8c3 5218 	str.w	r5, [r3, #536]	; 0x218
    e1ae:	9801      	ldr	r0, [sp, #4]
    e1b0:	f000 f89e 	bl	e2f0 <am_hal_interrupt_master_set>
    e1b4:	4620      	mov	r0, r4
    e1b6:	b002      	add	sp, #8
    e1b8:	bd70      	pop	{r4, r5, r6, pc}
    e1ba:	2005      	movs	r0, #5
    e1bc:	b002      	add	sp, #8
    e1be:	bd70      	pop	{r4, r5, r6, pc}
    e1c0:	40010000 	.word	0x40010000

0000e1c4 <am_hal_gpio_interrupt_status_get>:
    e1c4:	b1d1      	cbz	r1, e1fc <am_hal_gpio_interrupt_status_get+0x38>
    e1c6:	b530      	push	{r4, r5, lr}
    e1c8:	b083      	sub	sp, #12
    e1ca:	460c      	mov	r4, r1
    e1cc:	4605      	mov	r5, r0
    e1ce:	f000 f88b 	bl	e2e8 <am_hal_interrupt_master_disable>
    e1d2:	4a0b      	ldr	r2, [pc, #44]	; (e200 <am_hal_gpio_interrupt_status_get+0x3c>)
    e1d4:	9001      	str	r0, [sp, #4]
    e1d6:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
    e1da:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
    e1de:	b12d      	cbz	r5, e1ec <am_hal_gpio_interrupt_status_get+0x28>
    e1e0:	f8d2 0210 	ldr.w	r0, [r2, #528]	; 0x210
    e1e4:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
    e1e8:	4003      	ands	r3, r0
    e1ea:	4011      	ands	r1, r2
    e1ec:	9801      	ldr	r0, [sp, #4]
    e1ee:	e9c4 1300 	strd	r1, r3, [r4]
    e1f2:	f000 f87d 	bl	e2f0 <am_hal_interrupt_master_set>
    e1f6:	2000      	movs	r0, #0
    e1f8:	b003      	add	sp, #12
    e1fa:	bd30      	pop	{r4, r5, pc}
    e1fc:	2006      	movs	r0, #6
    e1fe:	4770      	bx	lr
    e200:	40010000 	.word	0x40010000

0000e204 <am_hal_gpio_interrupt_register>:
    e204:	2831      	cmp	r0, #49	; 0x31
    e206:	4603      	mov	r3, r0
    e208:	d805      	bhi.n	e216 <am_hal_gpio_interrupt_register+0x12>
    e20a:	b131      	cbz	r1, e21a <am_hal_gpio_interrupt_register+0x16>
    e20c:	4a04      	ldr	r2, [pc, #16]	; (e220 <am_hal_gpio_interrupt_register+0x1c>)
    e20e:	2000      	movs	r0, #0
    e210:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    e214:	4770      	bx	lr
    e216:	2005      	movs	r0, #5
    e218:	4770      	bx	lr
    e21a:	2006      	movs	r0, #6
    e21c:	4770      	bx	lr
    e21e:	bf00      	nop
    e220:	10002328 	.word	0x10002328

0000e224 <am_hal_gpio_interrupt_service>:
    e224:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e228:	0c8b      	lsrs	r3, r1, #18
    e22a:	049b      	lsls	r3, r3, #18
    e22c:	2b00      	cmp	r3, #0
    e22e:	d14d      	bne.n	e2cc <am_hal_gpio_interrupt_service+0xa8>
    e230:	ea50 0201 	orrs.w	r2, r0, r1
    e234:	460e      	mov	r6, r1
    e236:	4607      	mov	r7, r0
    e238:	d043      	beq.n	e2c2 <am_hal_gpio_interrupt_service+0x9e>
    e23a:	4d27      	ldr	r5, [pc, #156]	; (e2d8 <am_hal_gpio_interrupt_service+0xb4>)
    e23c:	f8df 909c 	ldr.w	r9, [pc, #156]	; e2dc <am_hal_gpio_interrupt_service+0xb8>
    e240:	469b      	mov	fp, r3
    e242:	4698      	mov	r8, r3
    e244:	f1cb 0220 	rsb	r2, fp, #32
    e248:	fa06 f202 	lsl.w	r2, r6, r2
    e24c:	f1ab 0320 	sub.w	r3, fp, #32
    e250:	fa27 fa0b 	lsr.w	sl, r7, fp
    e254:	fa26 f303 	lsr.w	r3, r6, r3
    e258:	ea4a 0a02 	orr.w	sl, sl, r2
    e25c:	ea5a 0a03 	orrs.w	sl, sl, r3
    e260:	d01a      	beq.n	e298 <am_hal_gpio_interrupt_service+0x74>
    e262:	2401      	movs	r4, #1
    e264:	f1ca 0300 	rsb	r3, sl, #0
    e268:	ea03 030a 	and.w	r3, r3, sl
    e26c:	fab3 f383 	clz	r3, r3
    e270:	f1c3 031f 	rsb	r3, r3, #31
    e274:	eb03 010b 	add.w	r1, r3, fp
    e278:	fa04 f303 	lsl.w	r3, r4, r3
    e27c:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    e280:	ea2a 0a03 	bic.w	sl, sl, r3
    e284:	b1ba      	cbz	r2, e2b6 <am_hal_gpio_interrupt_service+0x92>
    e286:	f012 0f01 	tst.w	r2, #1
    e28a:	f042 0301 	orr.w	r3, r2, #1
    e28e:	d00b      	beq.n	e2a8 <am_hal_gpio_interrupt_service+0x84>
    e290:	4790      	blx	r2
    e292:	f1ba 0f00 	cmp.w	sl, #0
    e296:	d1e5      	bne.n	e264 <am_hal_gpio_interrupt_service+0x40>
    e298:	f10b 0b20 	add.w	fp, fp, #32
    e29c:	f1bb 0f40 	cmp.w	fp, #64	; 0x40
    e2a0:	d1d0      	bne.n	e244 <am_hal_gpio_interrupt_service+0x20>
    e2a2:	4640      	mov	r0, r8
    e2a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e2a8:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
    e2ac:	4798      	blx	r3
    e2ae:	f1ba 0f00 	cmp.w	sl, #0
    e2b2:	d1d7      	bne.n	e264 <am_hal_gpio_interrupt_service+0x40>
    e2b4:	e7f0      	b.n	e298 <am_hal_gpio_interrupt_service+0x74>
    e2b6:	f04f 0807 	mov.w	r8, #7
    e2ba:	f1ba 0f00 	cmp.w	sl, #0
    e2be:	d1d1      	bne.n	e264 <am_hal_gpio_interrupt_service+0x40>
    e2c0:	e7ea      	b.n	e298 <am_hal_gpio_interrupt_service+0x74>
    e2c2:	f04f 0801 	mov.w	r8, #1
    e2c6:	4640      	mov	r0, r8
    e2c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e2cc:	f04f 0805 	mov.w	r8, #5
    e2d0:	4640      	mov	r0, r8
    e2d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e2d6:	bf00      	nop
    e2d8:	10002328 	.word	0x10002328
    e2dc:	10002260 	.word	0x10002260

0000e2e0 <am_hal_interrupt_master_enable>:
    e2e0:	f3ef 8010 	mrs	r0, PRIMASK
    e2e4:	b662      	cpsie	i
    e2e6:	4770      	bx	lr

0000e2e8 <am_hal_interrupt_master_disable>:
    e2e8:	f3ef 8010 	mrs	r0, PRIMASK
    e2ec:	b672      	cpsid	i
    e2ee:	4770      	bx	lr

0000e2f0 <am_hal_interrupt_master_set>:
    e2f0:	f380 8810 	msr	PRIMASK, r0
    e2f4:	4770      	bx	lr
    e2f6:	bf00      	nop

0000e2f8 <iom_dummy_callback>:
    e2f8:	4770      	bx	lr
    e2fa:	bf00      	nop

0000e2fc <internal_iom_reset_on_error>:
    e2fc:	b570      	push	{r4, r5, r6, lr}
    e2fe:	6844      	ldr	r4, [r0, #4]
    e300:	f8d0 0864 	ldr.w	r0, [r0, #2148]	; 0x864
    e304:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
    e308:	3404      	adds	r4, #4
    e30a:	0324      	lsls	r4, r4, #12
    e30c:	2300      	movs	r3, #0
    e30e:	f8d4 5200 	ldr.w	r5, [r4, #512]	; 0x200
    e312:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    e316:	050b      	lsls	r3, r1, #20
    e318:	d52a      	bpl.n	e370 <internal_iom_reset_on_error+0x74>
    e31a:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
    e31e:	079e      	lsls	r6, r3, #30
    e320:	d457      	bmi.n	e3d2 <internal_iom_reset_on_error+0xd6>
    e322:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    e326:	079a      	lsls	r2, r3, #30
    e328:	d508      	bpl.n	e33c <internal_iom_reset_on_error+0x40>
    e32a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    e32e:	f3c3 4307 	ubfx	r3, r3, #16, #8
    e332:	2b03      	cmp	r3, #3
    e334:	d9f5      	bls.n	e322 <internal_iom_reset_on_error+0x26>
    e336:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e33a:	e7f6      	b.n	e32a <internal_iom_reset_on_error+0x2e>
    e33c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    e340:	f003 0306 	and.w	r3, r3, #6
    e344:	2b04      	cmp	r3, #4
    e346:	d1f9      	bne.n	e33c <internal_iom_reset_on_error+0x40>
    e348:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    e34c:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
    e350:	d00e      	beq.n	e370 <internal_iom_reset_on_error+0x74>
    e352:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    e356:	f3c3 4307 	ubfx	r3, r3, #16, #8
    e35a:	2b03      	cmp	r3, #3
    e35c:	d9f4      	bls.n	e348 <internal_iom_reset_on_error+0x4c>
    e35e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e362:	e7f6      	b.n	e352 <internal_iom_reset_on_error+0x56>
    e364:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    e368:	f003 0306 	and.w	r3, r3, #6
    e36c:	2b04      	cmp	r3, #4
    e36e:	d1f9      	bne.n	e364 <internal_iom_reset_on_error+0x68>
    e370:	06cb      	lsls	r3, r1, #27
    e372:	d406      	bmi.n	e382 <internal_iom_reset_on_error+0x86>
    e374:	f04f 33ff 	mov.w	r3, #4294967295
    e378:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    e37c:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    e380:	bd70      	pop	{r4, r5, r6, pc}
    e382:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    e386:	f003 0306 	and.w	r3, r3, #6
    e38a:	2b04      	cmp	r3, #4
    e38c:	d1f9      	bne.n	e382 <internal_iom_reset_on_error+0x86>
    e38e:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
    e392:	f36f 1304 	bfc	r3, #4, #1
    e396:	f884 3214 	strb.w	r3, [r4, #532]	; 0x214
    e39a:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
    e39e:	f36f 0341 	bfc	r3, #1, #1
    e3a2:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    e3a6:	0040      	lsls	r0, r0, #1
    e3a8:	f7ff fce6 	bl	dd78 <am_hal_flash_delay>
    e3ac:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
    e3b0:	f043 0302 	orr.w	r3, r3, #2
    e3b4:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    e3b8:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
    e3bc:	f043 0310 	orr.w	r3, r3, #16
    e3c0:	f884 3214 	strb.w	r3, [r4, #532]	; 0x214
    e3c4:	f04f 33ff 	mov.w	r3, #4294967295
    e3c8:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    e3cc:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    e3d0:	bd70      	pop	{r4, r5, r6, pc}
    e3d2:	f8d4 2288 	ldr.w	r2, [r4, #648]	; 0x288
    e3d6:	4e07      	ldr	r6, [pc, #28]	; (e3f4 <internal_iom_reset_on_error+0xf8>)
    e3d8:	2a00      	cmp	r2, #0
    e3da:	d0c3      	beq.n	e364 <internal_iom_reset_on_error+0x68>
    e3dc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    e3e0:	f3c3 2307 	ubfx	r3, r3, #8, #8
    e3e4:	2b03      	cmp	r3, #3
    e3e6:	d9f9      	bls.n	e3dc <internal_iom_reset_on_error+0xe0>
    e3e8:	2a04      	cmp	r2, #4
    e3ea:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
    e3ee:	d9b9      	bls.n	e364 <internal_iom_reset_on_error+0x68>
    e3f0:	3a04      	subs	r2, #4
    e3f2:	e7f1      	b.n	e3d8 <internal_iom_reset_on_error+0xdc>
    e3f4:	deadbeef 	.word	0xdeadbeef

0000e3f8 <am_hal_iom_CQAddTransaction>:
    e3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e3fc:	4606      	mov	r6, r0
    e3fe:	6a40      	ldr	r0, [r0, #36]	; 0x24
    e400:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    e404:	b083      	sub	sp, #12
    e406:	f000 808f 	beq.w	e528 <am_hal_iom_CQAddTransaction+0x130>
    e40a:	460d      	mov	r5, r1
    e40c:	4690      	mov	r8, r2
    e40e:	461f      	mov	r7, r3
    e410:	f8d6 0828 	ldr.w	r0, [r6, #2088]	; 0x828
    e414:	ab01      	add	r3, sp, #4
    e416:	466a      	mov	r2, sp
    e418:	210b      	movs	r1, #11
    e41a:	f001 f817 	bl	f44c <am_hal_cmdq_alloc_block>
    e41e:	2800      	cmp	r0, #0
    e420:	f040 8082 	bne.w	e528 <am_hal_iom_CQAddTransaction+0x130>
    e424:	6873      	ldr	r3, [r6, #4]
    e426:	f8d5 e008 	ldr.w	lr, [r5, #8]
    e42a:	9c00      	ldr	r4, [sp, #0]
    e42c:	7c2a      	ldrb	r2, [r5, #16]
    e42e:	f8d5 900c 	ldr.w	r9, [r5, #12]
    e432:	f503 2ca0 	add.w	ip, r3, #327680	; 0x50000
    e436:	f10c 0c04 	add.w	ip, ip, #4
    e43a:	ea4f 3c0c 	mov.w	ip, ip, lsl #12
    e43e:	f50c 7108 	add.w	r1, ip, #544	; 0x220
    e442:	682b      	ldr	r3, [r5, #0]
    e444:	6121      	str	r1, [r4, #16]
    e446:	f3ce 210f 	ubfx	r1, lr, #8, #16
    e44a:	6161      	str	r1, [r4, #20]
    e44c:	f20c 4104 	addw	r1, ip, #1028	; 0x404
    e450:	61a1      	str	r1, [r4, #24]
    e452:	f3c3 0109 	ubfx	r1, r3, #0, #10
    e456:	61e1      	str	r1, [r4, #28]
    e458:	f50c 7122 	add.w	r1, ip, #648	; 0x288
    e45c:	62a1      	str	r1, [r4, #40]	; 0x28
    e45e:	f50c 7a20 	add.w	sl, ip, #640	; 0x280
    e462:	f50c 7123 	add.w	r1, ip, #652	; 0x28c
    e466:	6260      	str	r0, [r4, #36]	; 0x24
    e468:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
    e46c:	f8c4 a020 	str.w	sl, [r4, #32]
    e470:	6321      	str	r1, [r4, #48]	; 0x30
    e472:	7fa9      	ldrb	r1, [r5, #30]
    e474:	0209      	lsls	r1, r1, #8
    e476:	f401 7180 	and.w	r1, r1, #256	; 0x100
    e47a:	2a00      	cmp	r2, #0
    e47c:	d15b      	bne.n	e536 <am_hal_iom_CQAddTransaction+0x13e>
    e47e:	f8d5 b014 	ldr.w	fp, [r5, #20]
    e482:	f041 0102 	orr.w	r1, r1, #2
    e486:	e9c4 ba0d 	strd	fp, sl, [r4, #52]	; 0x34
    e48a:	f1b9 0f00 	cmp.w	r9, #0
    e48e:	d001      	beq.n	e494 <am_hal_iom_CQAddTransaction+0x9c>
    e490:	f041 0101 	orr.w	r1, r1, #1
    e494:	63e1      	str	r1, [r4, #60]	; 0x3c
    e496:	f50c 7107 	add.w	r1, ip, #540	; 0x21c
    e49a:	6421      	str	r1, [r4, #64]	; 0x40
    e49c:	7a31      	ldrb	r1, [r6, #8]
    e49e:	2900      	cmp	r1, #0
    e4a0:	d146      	bne.n	e530 <am_hal_iom_CQAddTransaction+0x138>
    e4a2:	18f1      	adds	r1, r6, r3
    e4a4:	051b      	lsls	r3, r3, #20
    e4a6:	f891 18a0 	ldrb.w	r1, [r1, #2208]	; 0x8a0
    e4aa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    e4ae:	6461      	str	r1, [r4, #68]	; 0x44
    e4b0:	4926      	ldr	r1, [pc, #152]	; (e54c <am_hal_iom_CQAddTransaction+0x154>)
    e4b2:	ea01 2909 	and.w	r9, r1, r9, lsl #8
    e4b6:	ea49 0903 	orr.w	r9, r9, r3
    e4ba:	686b      	ldr	r3, [r5, #4]
    e4bc:	7f29      	ldrb	r1, [r5, #28]
    e4be:	015b      	lsls	r3, r3, #5
    e4c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
    e4c4:	2a01      	cmp	r2, #1
    e4c6:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
    e4ca:	bf0c      	ite	eq
    e4cc:	f049 0202 	orreq.w	r2, r9, #2
    e4d0:	f049 0201 	orrne.w	r2, r9, #1
    e4d4:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
    e4d8:	4313      	orrs	r3, r2
    e4da:	64e3      	str	r3, [r4, #76]	; 0x4c
    e4dc:	f8d6 2838 	ldr.w	r2, [r6, #2104]	; 0x838
    e4e0:	6a29      	ldr	r1, [r5, #32]
    e4e2:	f50c 732a 	add.w	r3, ip, #680	; 0x2a8
    e4e6:	60a3      	str	r3, [r4, #8]
    e4e8:	6023      	str	r3, [r4, #0]
    e4ea:	f50c 7306 	add.w	r3, ip, #536	; 0x218
    e4ee:	64a3      	str	r3, [r4, #72]	; 0x48
    e4f0:	2a01      	cmp	r2, #1
    e4f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    e4f6:	60e3      	str	r3, [r4, #12]
    e4f8:	d020      	beq.n	e53c <am_hal_iom_CQAddTransaction+0x144>
    e4fa:	2a02      	cmp	r2, #2
    e4fc:	d003      	beq.n	e506 <am_hal_iom_CQAddTransaction+0x10e>
    e4fe:	f441 4300 	orr.w	r3, r1, #32768	; 0x8000
    e502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e506:	f89d 1004 	ldrb.w	r1, [sp, #4]
    e50a:	6063      	str	r3, [r4, #4]
    e50c:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    e510:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e512:	6563      	str	r3, [r4, #84]	; 0x54
    e514:	f50c 7529 	add.w	r5, ip, #676	; 0x2a4
    e518:	6525      	str	r5, [r4, #80]	; 0x50
    e51a:	f8c1 8028 	str.w	r8, [r1, #40]	; 0x28
    e51e:	f8c1 7428 	str.w	r7, [r1, #1064]	; 0x428
    e522:	b003      	add	sp, #12
    e524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e528:	2005      	movs	r0, #5
    e52a:	b003      	add	sp, #12
    e52c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e530:	2300      	movs	r3, #0
    e532:	4619      	mov	r1, r3
    e534:	e7bb      	b.n	e4ae <am_hal_iom_CQAddTransaction+0xb6>
    e536:	f8d5 b018 	ldr.w	fp, [r5, #24]
    e53a:	e7a4      	b.n	e486 <am_hal_iom_CQAddTransaction+0x8e>
    e53c:	f441 4300 	orr.w	r3, r1, #32768	; 0x8000
    e540:	2202      	movs	r2, #2
    e542:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    e546:	f8c6 2838 	str.w	r2, [r6, #2104]	; 0x838
    e54a:	e7dc      	b.n	e506 <am_hal_iom_CQAddTransaction+0x10e>
    e54c:	000fff00 	.word	0x000fff00

0000e550 <am_hal_iom_initialize>:
    e550:	2805      	cmp	r0, #5
    e552:	d81a      	bhi.n	e58a <am_hal_iom_initialize+0x3a>
    e554:	b1e9      	cbz	r1, e592 <am_hal_iom_initialize+0x42>
    e556:	b530      	push	{r4, r5, lr}
    e558:	f640 0ca4 	movw	ip, #2212	; 0x8a4
    e55c:	4d0e      	ldr	r5, [pc, #56]	; (e598 <am_hal_iom_initialize+0x48>)
    e55e:	fb0c fc00 	mul.w	ip, ip, r0
    e562:	eb05 040c 	add.w	r4, r5, ip
    e566:	4602      	mov	r2, r0
    e568:	78e3      	ldrb	r3, [r4, #3]
    e56a:	f013 0301 	ands.w	r3, r3, #1
    e56e:	d10e      	bne.n	e58e <am_hal_iom_initialize+0x3e>
    e570:	4618      	mov	r0, r3
    e572:	f855 300c 	ldr.w	r3, [r5, ip]
    e576:	f003 4e7c 	and.w	lr, r3, #4227858432	; 0xfc000000
    e57a:	4b08      	ldr	r3, [pc, #32]	; (e59c <am_hal_iom_initialize+0x4c>)
    e57c:	ea4e 0303 	orr.w	r3, lr, r3
    e580:	f845 300c 	str.w	r3, [r5, ip]
    e584:	6062      	str	r2, [r4, #4]
    e586:	600c      	str	r4, [r1, #0]
    e588:	bd30      	pop	{r4, r5, pc}
    e58a:	2005      	movs	r0, #5
    e58c:	4770      	bx	lr
    e58e:	2007      	movs	r0, #7
    e590:	bd30      	pop	{r4, r5, pc}
    e592:	2006      	movs	r0, #6
    e594:	4770      	bx	lr
    e596:	bf00      	nop
    e598:	100023f0 	.word	0x100023f0
    e59c:	01123456 	.word	0x01123456

0000e5a0 <am_hal_iom_enable>:
    e5a0:	2800      	cmp	r0, #0
    e5a2:	d063      	beq.n	e66c <am_hal_iom_enable+0xcc>
    e5a4:	b530      	push	{r4, r5, lr}
    e5a6:	6803      	ldr	r3, [r0, #0]
    e5a8:	4a31      	ldr	r2, [pc, #196]	; (e670 <am_hal_iom_enable+0xd0>)
    e5aa:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e5ae:	4293      	cmp	r3, r2
    e5b0:	b085      	sub	sp, #20
    e5b2:	4604      	mov	r4, r0
    e5b4:	d150      	bne.n	e658 <am_hal_iom_enable+0xb8>
    e5b6:	78c3      	ldrb	r3, [r0, #3]
    e5b8:	079b      	lsls	r3, r3, #30
    e5ba:	d450      	bmi.n	e65e <am_hal_iom_enable+0xbe>
    e5bc:	6840      	ldr	r0, [r0, #4]
    e5be:	7a21      	ldrb	r1, [r4, #8]
    e5c0:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    e5c4:	3304      	adds	r3, #4
    e5c6:	031b      	lsls	r3, r3, #12
    e5c8:	3900      	subs	r1, #0
    e5ca:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
    e5ce:	bf18      	it	ne
    e5d0:	2101      	movne	r1, #1
    e5d2:	f3c2 0242 	ubfx	r2, r2, #1, #3
    e5d6:	4291      	cmp	r1, r2
    e5d8:	bf0c      	ite	eq
    e5da:	2201      	moveq	r2, #1
    e5dc:	2210      	movne	r2, #16
    e5de:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    e5e2:	68e2      	ldr	r2, [r4, #12]
    e5e4:	b38a      	cbz	r2, e64a <am_hal_iom_enable+0xaa>
    e5e6:	4923      	ldr	r1, [pc, #140]	; (e674 <am_hal_iom_enable+0xd4>)
    e5e8:	9202      	str	r2, [sp, #8]
    e5ea:	2200      	movs	r2, #0
    e5ec:	6262      	str	r2, [r4, #36]	; 0x24
    e5ee:	61e2      	str	r2, [r4, #28]
    e5f0:	f8c3 12a4 	str.w	r1, [r3, #676]	; 0x2a4
    e5f4:	6923      	ldr	r3, [r4, #16]
    e5f6:	f8c4 2854 	str.w	r2, [r4, #2132]	; 0x854
    e5fa:	f884 283c 	strb.w	r2, [r4, #2108]	; 0x83c
    e5fe:	f8c4 2838 	str.w	r2, [r4, #2104]	; 0x838
    e602:	f8c4 2844 	str.w	r2, [r4, #2116]	; 0x844
    e606:	f8c4 2840 	str.w	r2, [r4, #2112]	; 0x840
    e60a:	f8c4 2830 	str.w	r2, [r4, #2096]	; 0x830
    e60e:	f8c4 2828 	str.w	r2, [r4, #2088]	; 0x828
    e612:	6222      	str	r2, [r4, #32]
    e614:	f8c4 285c 	str.w	r2, [r4, #2140]	; 0x85c
    e618:	f44f 7580 	mov.w	r5, #256	; 0x100
    e61c:	2201      	movs	r2, #1
    e61e:	085b      	lsrs	r3, r3, #1
    e620:	f88d 200c 	strb.w	r2, [sp, #12]
    e624:	b2c0      	uxtb	r0, r0
    e626:	f604 0228 	addw	r2, r4, #2088	; 0x828
    e62a:	f8a4 582c 	strh.w	r5, [r4, #2092]	; 0x82c
    e62e:	a901      	add	r1, sp, #4
    e630:	9301      	str	r3, [sp, #4]
    e632:	f000 fe79 	bl	f328 <am_hal_cmdq_init>
    e636:	6863      	ldr	r3, [r4, #4]
    e638:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e63c:	3304      	adds	r3, #4
    e63e:	2202      	movs	r2, #2
    e640:	031b      	lsls	r3, r3, #12
    e642:	b978      	cbnz	r0, e664 <am_hal_iom_enable+0xc4>
    e644:	6225      	str	r5, [r4, #32]
    e646:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    e64a:	78e3      	ldrb	r3, [r4, #3]
    e64c:	2000      	movs	r0, #0
    e64e:	f043 0302 	orr.w	r3, r3, #2
    e652:	70e3      	strb	r3, [r4, #3]
    e654:	b005      	add	sp, #20
    e656:	bd30      	pop	{r4, r5, pc}
    e658:	2002      	movs	r0, #2
    e65a:	b005      	add	sp, #20
    e65c:	bd30      	pop	{r4, r5, pc}
    e65e:	2000      	movs	r0, #0
    e660:	b005      	add	sp, #20
    e662:	bd30      	pop	{r4, r5, pc}
    e664:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    e668:	b005      	add	sp, #20
    e66a:	bd30      	pop	{r4, r5, pc}
    e66c:	2002      	movs	r0, #2
    e66e:	4770      	bx	lr
    e670:	01123456 	.word	0x01123456
    e674:	00800040 	.word	0x00800040

0000e678 <am_hal_iom_disable>:
    e678:	b538      	push	{r3, r4, r5, lr}
    e67a:	b358      	cbz	r0, e6d4 <am_hal_iom_disable+0x5c>
    e67c:	6803      	ldr	r3, [r0, #0]
    e67e:	4a18      	ldr	r2, [pc, #96]	; (e6e0 <am_hal_iom_disable+0x68>)
    e680:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e684:	4293      	cmp	r3, r2
    e686:	4604      	mov	r4, r0
    e688:	d124      	bne.n	e6d4 <am_hal_iom_disable+0x5c>
    e68a:	78c5      	ldrb	r5, [r0, #3]
    e68c:	f015 0502 	ands.w	r5, r5, #2
    e690:	d01e      	beq.n	e6d0 <am_hal_iom_disable+0x58>
    e692:	6a45      	ldr	r5, [r0, #36]	; 0x24
    e694:	bb0d      	cbnz	r5, e6da <am_hal_iom_disable+0x62>
    e696:	6843      	ldr	r3, [r0, #4]
    e698:	f8d0 0828 	ldr.w	r0, [r0, #2088]	; 0x828
    e69c:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e6a0:	3304      	adds	r3, #4
    e6a2:	031b      	lsls	r3, r3, #12
    e6a4:	f893 2214 	ldrb.w	r2, [r3, #532]	; 0x214
    e6a8:	f365 0200 	bfi	r2, r5, #0, #1
    e6ac:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
    e6b0:	f893 2214 	ldrb.w	r2, [r3, #532]	; 0x214
    e6b4:	f365 1204 	bfi	r2, r5, #4, #1
    e6b8:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
    e6bc:	b120      	cbz	r0, e6c8 <am_hal_iom_disable+0x50>
    e6be:	2101      	movs	r1, #1
    e6c0:	f000 ffb8 	bl	f634 <am_hal_cmdq_term>
    e6c4:	f8c4 5828 	str.w	r5, [r4, #2088]	; 0x828
    e6c8:	78e3      	ldrb	r3, [r4, #3]
    e6ca:	f36f 0341 	bfc	r3, #1, #1
    e6ce:	70e3      	strb	r3, [r4, #3]
    e6d0:	4628      	mov	r0, r5
    e6d2:	bd38      	pop	{r3, r4, r5, pc}
    e6d4:	2502      	movs	r5, #2
    e6d6:	4628      	mov	r0, r5
    e6d8:	bd38      	pop	{r3, r4, r5, pc}
    e6da:	2503      	movs	r5, #3
    e6dc:	e7f8      	b.n	e6d0 <am_hal_iom_disable+0x58>
    e6de:	bf00      	nop
    e6e0:	01123456 	.word	0x01123456

0000e6e4 <am_hal_iom_interrupt_enable>:
    e6e4:	b1a0      	cbz	r0, e710 <am_hal_iom_interrupt_enable+0x2c>
    e6e6:	6803      	ldr	r3, [r0, #0]
    e6e8:	4a0c      	ldr	r2, [pc, #48]	; (e71c <am_hal_iom_interrupt_enable+0x38>)
    e6ea:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e6ee:	4293      	cmp	r3, r2
    e6f0:	d10e      	bne.n	e710 <am_hal_iom_interrupt_enable+0x2c>
    e6f2:	f011 0202 	ands.w	r2, r1, #2
    e6f6:	d10e      	bne.n	e716 <am_hal_iom_interrupt_enable+0x32>
    e6f8:	6843      	ldr	r3, [r0, #4]
    e6fa:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e6fe:	3304      	adds	r3, #4
    e700:	031b      	lsls	r3, r3, #12
    e702:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
    e706:	4301      	orrs	r1, r0
    e708:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    e70c:	4610      	mov	r0, r2
    e70e:	4770      	bx	lr
    e710:	2202      	movs	r2, #2
    e712:	4610      	mov	r0, r2
    e714:	4770      	bx	lr
    e716:	2206      	movs	r2, #6
    e718:	4610      	mov	r0, r2
    e71a:	4770      	bx	lr
    e71c:	01123456 	.word	0x01123456

0000e720 <am_hal_iom_interrupt_status_get>:
    e720:	b1e0      	cbz	r0, e75c <am_hal_iom_interrupt_status_get+0x3c>
    e722:	6803      	ldr	r3, [r0, #0]
    e724:	b410      	push	{r4}
    e726:	4c0f      	ldr	r4, [pc, #60]	; (e764 <am_hal_iom_interrupt_status_get+0x44>)
    e728:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e72c:	42a3      	cmp	r3, r4
    e72e:	d111      	bne.n	e754 <am_hal_iom_interrupt_status_get+0x34>
    e730:	b1b2      	cbz	r2, e760 <am_hal_iom_interrupt_status_get+0x40>
    e732:	6843      	ldr	r3, [r0, #4]
    e734:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e738:	3304      	adds	r3, #4
    e73a:	031b      	lsls	r3, r3, #12
    e73c:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
    e740:	b921      	cbnz	r1, e74c <am_hal_iom_interrupt_status_get+0x2c>
    e742:	6010      	str	r0, [r2, #0]
    e744:	2000      	movs	r0, #0
    e746:	f85d 4b04 	ldr.w	r4, [sp], #4
    e74a:	4770      	bx	lr
    e74c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    e750:	4018      	ands	r0, r3
    e752:	e7f6      	b.n	e742 <am_hal_iom_interrupt_status_get+0x22>
    e754:	2002      	movs	r0, #2
    e756:	f85d 4b04 	ldr.w	r4, [sp], #4
    e75a:	4770      	bx	lr
    e75c:	2002      	movs	r0, #2
    e75e:	4770      	bx	lr
    e760:	2006      	movs	r0, #6
    e762:	e7f0      	b.n	e746 <am_hal_iom_interrupt_status_get+0x26>
    e764:	01123456 	.word	0x01123456

0000e768 <am_hal_iom_interrupt_clear>:
    e768:	b170      	cbz	r0, e788 <am_hal_iom_interrupt_clear+0x20>
    e76a:	6803      	ldr	r3, [r0, #0]
    e76c:	4a07      	ldr	r2, [pc, #28]	; (e78c <am_hal_iom_interrupt_clear+0x24>)
    e76e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e772:	4293      	cmp	r3, r2
    e774:	d108      	bne.n	e788 <am_hal_iom_interrupt_clear+0x20>
    e776:	6843      	ldr	r3, [r0, #4]
    e778:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e77c:	3304      	adds	r3, #4
    e77e:	031b      	lsls	r3, r3, #12
    e780:	2000      	movs	r0, #0
    e782:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    e786:	4770      	bx	lr
    e788:	2002      	movs	r0, #2
    e78a:	4770      	bx	lr
    e78c:	01123456 	.word	0x01123456

0000e790 <am_hal_iom_interrupt_service>:
    e790:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e794:	b085      	sub	sp, #20
    e796:	2800      	cmp	r0, #0
    e798:	f000 80c2 	beq.w	e920 <am_hal_iom_interrupt_service+0x190>
    e79c:	6803      	ldr	r3, [r0, #0]
    e79e:	4aaf      	ldr	r2, [pc, #700]	; (ea5c <am_hal_iom_interrupt_service+0x2cc>)
    e7a0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e7a4:	4293      	cmp	r3, r2
    e7a6:	4604      	mov	r4, r0
    e7a8:	f040 80ba 	bne.w	e920 <am_hal_iom_interrupt_service+0x190>
    e7ac:	f890 383c 	ldrb.w	r3, [r0, #2108]	; 0x83c
    e7b0:	6847      	ldr	r7, [r0, #4]
    e7b2:	460e      	mov	r6, r1
    e7b4:	2b00      	cmp	r3, #0
    e7b6:	f040 809b 	bne.w	e8f0 <am_hal_iom_interrupt_service+0x160>
    e7ba:	6a43      	ldr	r3, [r0, #36]	; 0x24
    e7bc:	2b00      	cmp	r3, #0
    e7be:	f000 80aa 	beq.w	e916 <am_hal_iom_interrupt_service+0x186>
    e7c2:	f8d0 0828 	ldr.w	r0, [r0, #2088]	; 0x828
    e7c6:	2800      	cmp	r0, #0
    e7c8:	f000 8081 	beq.w	e8ce <am_hal_iom_interrupt_service+0x13e>
    e7cc:	4669      	mov	r1, sp
    e7ce:	f000 fedf 	bl	f590 <am_hal_cmdq_get_status>
    e7d2:	4605      	mov	r5, r0
    e7d4:	2800      	cmp	r0, #0
    e7d6:	d17b      	bne.n	e8d0 <am_hal_iom_interrupt_service+0x140>
    e7d8:	f884 0834 	strb.w	r0, [r4, #2100]	; 0x834
    e7dc:	9900      	ldr	r1, [sp, #0]
    e7de:	69e3      	ldr	r3, [r4, #28]
    e7e0:	e011      	b.n	e806 <am_hal_iom_interrupt_service+0x76>
    e7e2:	f894 2834 	ldrb.w	r2, [r4, #2100]	; 0x834
    e7e6:	f002 08ff 	and.w	r8, r2, #255	; 0xff
    e7ea:	b972      	cbnz	r2, e80a <am_hal_iom_interrupt_service+0x7a>
    e7ec:	3301      	adds	r3, #1
    e7ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
    e7f0:	61e3      	str	r3, [r4, #28]
    e7f2:	b2d8      	uxtb	r0, r3
    e7f4:	f100 050a 	add.w	r5, r0, #10
    e7f8:	3a01      	subs	r2, #1
    e7fa:	6262      	str	r2, [r4, #36]	; 0x24
    e7fc:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
    e800:	2a00      	cmp	r2, #0
    e802:	f040 8113 	bne.w	ea2c <am_hal_iom_interrupt_service+0x29c>
    e806:	4299      	cmp	r1, r3
    e808:	d1eb      	bne.n	e7e2 <am_hal_iom_interrupt_service+0x52>
    e80a:	f894 2834 	ldrb.w	r2, [r4, #2100]	; 0x834
    e80e:	2a00      	cmp	r2, #0
    e810:	d159      	bne.n	e8c6 <am_hal_iom_interrupt_service+0x136>
    e812:	f644 227c 	movw	r2, #19068	; 0x4a7c
    e816:	ea16 0902 	ands.w	r9, r6, r2
    e81a:	d054      	beq.n	e8c6 <am_hal_iom_interrupt_service+0x136>
    e81c:	3301      	adds	r3, #1
    e81e:	61e3      	str	r3, [r4, #28]
    e820:	b2db      	uxtb	r3, r3
    e822:	eb04 0583 	add.w	r5, r4, r3, lsl #2
    e826:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e828:	3b01      	subs	r3, #1
    e82a:	6263      	str	r3, [r4, #36]	; 0x24
    e82c:	f507 28a0 	add.w	r8, r7, #327680	; 0x50000
    e830:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e832:	f108 0804 	add.w	r8, r8, #4
    e836:	ea4f 3808 	mov.w	r8, r8, lsl #12
    e83a:	b1d3      	cbz	r3, e872 <am_hal_iom_interrupt_service+0xe2>
    e83c:	f8d8 2204 	ldr.w	r2, [r8, #516]	; 0x204
    e840:	f8d5 0428 	ldr.w	r0, [r5, #1064]	; 0x428
    e844:	4316      	orrs	r6, r2
    e846:	f016 0f6c 	tst.w	r6, #108	; 0x6c
    e84a:	f040 8100 	bne.w	ea4e <am_hal_iom_interrupt_service+0x2be>
    e84e:	05b2      	lsls	r2, r6, #22
    e850:	f100 8100 	bmi.w	ea54 <am_hal_iom_interrupt_service+0x2c4>
    e854:	06f2      	lsls	r2, r6, #27
    e856:	f100 80ff 	bmi.w	ea58 <am_hal_iom_interrupt_service+0x2c8>
    e85a:	f416 4f90 	tst.w	r6, #18432	; 0x4800
    e85e:	bf14      	ite	ne
    e860:	2101      	movne	r1, #1
    e862:	2100      	moveq	r1, #0
    e864:	4798      	blx	r3
    e866:	f894 382c 	ldrb.w	r3, [r4, #2092]	; 0x82c
    e86a:	2b02      	cmp	r3, #2
    e86c:	bf1c      	itt	ne
    e86e:	2300      	movne	r3, #0
    e870:	62ab      	strne	r3, [r5, #40]	; 0x28
    e872:	f898 3294 	ldrb.w	r3, [r8, #660]	; 0x294
    e876:	f36f 0300 	bfc	r3, #0, #1
    e87a:	f888 3294 	strb.w	r3, [r8, #660]	; 0x294
    e87e:	f8b8 3280 	ldrh.w	r3, [r8, #640]	; 0x280
    e882:	f36f 0300 	bfc	r3, #0, #1
    e886:	f8a8 3280 	strh.w	r3, [r8, #640]	; 0x280
    e88a:	2300      	movs	r3, #0
    e88c:	f8c8 3290 	str.w	r3, [r8, #656]	; 0x290
    e890:	4649      	mov	r1, r9
    e892:	4620      	mov	r0, r4
    e894:	f7ff fd32 	bl	e2fc <internal_iom_reset_on_error>
    e898:	f8d4 0828 	ldr.w	r0, [r4, #2088]	; 0x828
    e89c:	f000 ff0e 	bl	f6bc <am_hal_cmdq_error_resume>
    e8a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e8a2:	b183      	cbz	r3, e8c6 <am_hal_iom_interrupt_service+0x136>
    e8a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e8a6:	b953      	cbnz	r3, e8be <am_hal_iom_interrupt_service+0x12e>
    e8a8:	6863      	ldr	r3, [r4, #4]
    e8aa:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e8ae:	3304      	adds	r3, #4
    e8b0:	031b      	lsls	r3, r3, #12
    e8b2:	f503 7226 	add.w	r2, r3, #664	; 0x298
    e8b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
    e8ba:	e9c3 2300 	strd	r2, r3, [r3]
    e8be:	f8d4 0828 	ldr.w	r0, [r4, #2088]	; 0x828
    e8c2:	f000 fd89 	bl	f3d8 <am_hal_cmdq_enable>
    e8c6:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e8c8:	2d00      	cmp	r5, #0
    e8ca:	f000 80aa 	beq.w	ea22 <am_hal_iom_interrupt_service+0x292>
    e8ce:	2500      	movs	r5, #0
    e8d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e8d2:	bb0b      	cbnz	r3, e918 <am_hal_iom_interrupt_service+0x188>
    e8d4:	f507 27a0 	add.w	r7, r7, #327680	; 0x50000
    e8d8:	3704      	adds	r7, #4
    e8da:	033f      	lsls	r7, r7, #12
    e8dc:	6962      	ldr	r2, [r4, #20]
    e8de:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
    e8e2:	f04f 31ff 	mov.w	r1, #4294967295
    e8e6:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
    e8ea:	f8c7 2200 	str.w	r2, [r7, #512]	; 0x200
    e8ee:	e013      	b.n	e918 <am_hal_iom_interrupt_service+0x188>
    e8f0:	6981      	ldr	r1, [r0, #24]
    e8f2:	f640 0301 	movw	r3, #2049	; 0x801
    e8f6:	430e      	orrs	r6, r1
    e8f8:	421e      	tst	r6, r3
    e8fa:	6186      	str	r6, [r0, #24]
    e8fc:	d00b      	beq.n	e916 <am_hal_iom_interrupt_service+0x186>
    e8fe:	f507 27a0 	add.w	r7, r7, #327680	; 0x50000
    e902:	3704      	adds	r7, #4
    e904:	033f      	lsls	r7, r7, #12
    e906:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
    e90a:	07da      	lsls	r2, r3, #31
    e90c:	d50d      	bpl.n	e92a <am_hal_iom_interrupt_service+0x19a>
    e90e:	f644 637c 	movw	r3, #20092	; 0x4e7c
    e912:	421e      	tst	r6, r3
    e914:	d109      	bne.n	e92a <am_hal_iom_interrupt_service+0x19a>
    e916:	2500      	movs	r5, #0
    e918:	4628      	mov	r0, r5
    e91a:	b005      	add	sp, #20
    e91c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e920:	2502      	movs	r5, #2
    e922:	4628      	mov	r0, r5
    e924:	b005      	add	sp, #20
    e926:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e92a:	f8d4 2840 	ldr.w	r2, [r4, #2112]	; 0x840
    e92e:	f8d4 3850 	ldr.w	r3, [r4, #2128]	; 0x850
    e932:	f8d4 5854 	ldr.w	r5, [r4, #2132]	; 0x854
    e936:	3a01      	subs	r2, #1
    e938:	f8c4 2840 	str.w	r2, [r4, #2112]	; 0x840
    e93c:	f8d4 2848 	ldr.w	r2, [r4, #2120]	; 0x848
    e940:	3301      	adds	r3, #1
    e942:	f8c4 3850 	str.w	r3, [r4, #2128]	; 0x850
    e946:	fbb3 f1f2 	udiv	r1, r3, r2
    e94a:	fb02 3311 	mls	r3, r2, r1, r3
    e94e:	eb05 1543 	add.w	r5, r5, r3, lsl #5
    e952:	69aa      	ldr	r2, [r5, #24]
    e954:	b19a      	cbz	r2, e97e <am_hal_iom_interrupt_service+0x1ee>
    e956:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
    e95a:	69e8      	ldr	r0, [r5, #28]
    e95c:	431e      	orrs	r6, r3
    e95e:	f016 0f6c 	tst.w	r6, #108	; 0x6c
    e962:	d15b      	bne.n	ea1c <am_hal_iom_interrupt_service+0x28c>
    e964:	05b3      	lsls	r3, r6, #22
    e966:	d46e      	bmi.n	ea46 <am_hal_iom_interrupt_service+0x2b6>
    e968:	06f3      	lsls	r3, r6, #27
    e96a:	d46e      	bmi.n	ea4a <am_hal_iom_interrupt_service+0x2ba>
    e96c:	f416 4f90 	tst.w	r6, #18432	; 0x4800
    e970:	bf14      	ite	ne
    e972:	2101      	movne	r1, #1
    e974:	2100      	moveq	r1, #0
    e976:	4790      	blx	r2
    e978:	2300      	movs	r3, #0
    e97a:	69a6      	ldr	r6, [r4, #24]
    e97c:	61ab      	str	r3, [r5, #24]
    e97e:	f644 217c 	movw	r1, #19068	; 0x4a7c
    e982:	4031      	ands	r1, r6
    e984:	d13d      	bne.n	ea02 <am_hal_iom_interrupt_service+0x272>
    e986:	f8d4 5840 	ldr.w	r5, [r4, #2112]	; 0x840
    e98a:	b975      	cbnz	r5, e9aa <am_hal_iom_interrupt_service+0x21a>
    e98c:	f884 583c 	strb.w	r5, [r4, #2108]	; 0x83c
    e990:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
    e994:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    e998:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    e99c:	f023 0301 	bic.w	r3, r3, #1
    e9a0:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
    e9a4:	f8c7 22a4 	str.w	r2, [r7, #676]	; 0x2a4
    e9a8:	e7b6      	b.n	e918 <am_hal_iom_interrupt_service+0x188>
    e9aa:	f8d4 2850 	ldr.w	r2, [r4, #2128]	; 0x850
    e9ae:	f8d4 3848 	ldr.w	r3, [r4, #2120]	; 0x848
    e9b2:	3201      	adds	r2, #1
    e9b4:	fbb2 f1f3 	udiv	r1, r2, r3
    e9b8:	fb03 2211 	mls	r2, r3, r1, r2
    e9bc:	0151      	lsls	r1, r2, #5
    e9be:	f8d4 3854 	ldr.w	r3, [r4, #2132]	; 0x854
    e9c2:	5858      	ldr	r0, [r3, r1]
    e9c4:	eb03 1242 	add.w	r2, r3, r2, lsl #5
    e9c8:	6863      	ldr	r3, [r4, #4]
    e9ca:	6851      	ldr	r1, [r2, #4]
    e9cc:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e9d0:	3304      	adds	r3, #4
    e9d2:	031b      	lsls	r3, r3, #12
    e9d4:	2500      	movs	r5, #0
    e9d6:	f8c7 5290 	str.w	r5, [r7, #656]	; 0x290
    e9da:	61a5      	str	r5, [r4, #24]
    e9dc:	f8c3 0220 	str.w	r0, [r3, #544]	; 0x220
    e9e0:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
    e9e4:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
    e9e8:	f8c3 5280 	str.w	r5, [r3, #640]	; 0x280
    e9ec:	f8c3 0288 	str.w	r0, [r3, #648]	; 0x288
    e9f0:	f8c3 128c 	str.w	r1, [r3, #652]	; 0x28c
    e9f4:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
    e9f8:	f8c3 1280 	str.w	r1, [r3, #640]	; 0x280
    e9fc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
    ea00:	e78a      	b.n	e918 <am_hal_iom_interrupt_service+0x188>
    ea02:	f8b7 3280 	ldrh.w	r3, [r7, #640]	; 0x280
    ea06:	2200      	movs	r2, #0
    ea08:	f36f 0300 	bfc	r3, #0, #1
    ea0c:	f8a7 3280 	strh.w	r3, [r7, #640]	; 0x280
    ea10:	4620      	mov	r0, r4
    ea12:	f8c7 2290 	str.w	r2, [r7, #656]	; 0x290
    ea16:	f7ff fc71 	bl	e2fc <internal_iom_reset_on_error>
    ea1a:	e7b4      	b.n	e986 <am_hal_iom_interrupt_service+0x1f6>
    ea1c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    ea20:	e7a9      	b.n	e976 <am_hal_iom_interrupt_service+0x1e6>
    ea22:	f8d4 0828 	ldr.w	r0, [r4, #2088]	; 0x828
    ea26:	f000 fcf5 	bl	f414 <am_hal_cmdq_disable>
    ea2a:	e751      	b.n	e8d0 <am_hal_iom_interrupt_service+0x140>
    ea2c:	f500 7085 	add.w	r0, r0, #266	; 0x10a
    ea30:	4641      	mov	r1, r8
    ea32:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
    ea36:	4790      	blx	r2
    ea38:	f894 382c 	ldrb.w	r3, [r4, #2092]	; 0x82c
    ea3c:	2b02      	cmp	r3, #2
    ea3e:	bf18      	it	ne
    ea40:	f844 8025 	strne.w	r8, [r4, r5, lsl #2]
    ea44:	e6ca      	b.n	e7dc <am_hal_iom_interrupt_service+0x4c>
    ea46:	4906      	ldr	r1, [pc, #24]	; (ea60 <am_hal_iom_interrupt_service+0x2d0>)
    ea48:	e795      	b.n	e976 <am_hal_iom_interrupt_service+0x1e6>
    ea4a:	4906      	ldr	r1, [pc, #24]	; (ea64 <am_hal_iom_interrupt_service+0x2d4>)
    ea4c:	e793      	b.n	e976 <am_hal_iom_interrupt_service+0x1e6>
    ea4e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    ea52:	e707      	b.n	e864 <am_hal_iom_interrupt_service+0xd4>
    ea54:	4902      	ldr	r1, [pc, #8]	; (ea60 <am_hal_iom_interrupt_service+0x2d0>)
    ea56:	e705      	b.n	e864 <am_hal_iom_interrupt_service+0xd4>
    ea58:	4902      	ldr	r1, [pc, #8]	; (ea64 <am_hal_iom_interrupt_service+0x2d4>)
    ea5a:	e703      	b.n	e864 <am_hal_iom_interrupt_service+0xd4>
    ea5c:	01123456 	.word	0x01123456
    ea60:	08000001 	.word	0x08000001
    ea64:	08000002 	.word	0x08000002

0000ea68 <am_hal_iom_power_ctrl>:
    ea68:	b538      	push	{r3, r4, r5, lr}
    ea6a:	2800      	cmp	r0, #0
    ea6c:	d063      	beq.n	eb36 <am_hal_iom_power_ctrl+0xce>
    ea6e:	6803      	ldr	r3, [r0, #0]
    ea70:	4604      	mov	r4, r0
    ea72:	4868      	ldr	r0, [pc, #416]	; (ec14 <am_hal_iom_power_ctrl+0x1ac>)
    ea74:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ea78:	4283      	cmp	r3, r0
    ea7a:	d15c      	bne.n	eb36 <am_hal_iom_power_ctrl+0xce>
    ea7c:	2900      	cmp	r1, #0
    ea7e:	d060      	beq.n	eb42 <am_hal_iom_power_ctrl+0xda>
    ea80:	3901      	subs	r1, #1
    ea82:	2901      	cmp	r1, #1
    ea84:	d85a      	bhi.n	eb3c <am_hal_iom_power_ctrl+0xd4>
    ea86:	78e3      	ldrb	r3, [r4, #3]
    ea88:	6860      	ldr	r0, [r4, #4]
    ea8a:	079b      	lsls	r3, r3, #30
    ea8c:	d50e      	bpl.n	eaac <am_hal_iom_power_ctrl+0x44>
    ea8e:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    ea92:	3304      	adds	r3, #4
    ea94:	031b      	lsls	r3, r3, #12
    ea96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
    ea9a:	f003 0306 	and.w	r3, r3, #6
    ea9e:	2b04      	cmp	r3, #4
    eaa0:	f040 80b4 	bne.w	ec0c <am_hal_iom_power_ctrl+0x1a4>
    eaa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    eaa6:	2b00      	cmp	r3, #0
    eaa8:	f040 80b0 	bne.w	ec0c <am_hal_iom_power_ctrl+0x1a4>
    eaac:	b3d2      	cbz	r2, eb24 <am_hal_iom_power_ctrl+0xbc>
    eaae:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    eab2:	3304      	adds	r3, #4
    eab4:	031b      	lsls	r3, r3, #12
    eab6:	2201      	movs	r2, #1
    eab8:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    eabc:	f8c4 186c 	str.w	r1, [r4, #2156]	; 0x86c
    eac0:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
    eac4:	f8c4 1874 	str.w	r1, [r4, #2164]	; 0x874
    eac8:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
    eacc:	f8c4 1878 	str.w	r1, [r4, #2168]	; 0x878
    ead0:	f8d3 1294 	ldr.w	r1, [r3, #660]	; 0x294
    ead4:	f8c4 187c 	str.w	r1, [r4, #2172]	; 0x87c
    ead8:	f8d3 1298 	ldr.w	r1, [r3, #664]	; 0x298
    eadc:	f8c4 1880 	str.w	r1, [r4, #2176]	; 0x880
    eae0:	f8d3 12a0 	ldr.w	r1, [r3, #672]	; 0x2a0
    eae4:	f8c4 1884 	str.w	r1, [r4, #2180]	; 0x884
    eae8:	f8d3 12a8 	ldr.w	r1, [r3, #680]	; 0x2a8
    eaec:	f8c4 1888 	str.w	r1, [r4, #2184]	; 0x888
    eaf0:	f8d3 12ac 	ldr.w	r1, [r3, #684]	; 0x2ac
    eaf4:	f8c4 188c 	str.w	r1, [r4, #2188]	; 0x88c
    eaf8:	f8d3 12b0 	ldr.w	r1, [r3, #688]	; 0x2b0
    eafc:	f8c4 1890 	str.w	r1, [r4, #2192]	; 0x890
    eb00:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    eb04:	f8c4 1894 	str.w	r1, [r4, #2196]	; 0x894
    eb08:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    eb0c:	f8c4 1898 	str.w	r1, [r4, #2200]	; 0x898
    eb10:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
    eb14:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
    eb18:	f8c4 3870 	str.w	r3, [r4, #2160]	; 0x870
    eb1c:	f8c4 189c 	str.w	r1, [r4, #2204]	; 0x89c
    eb20:	f884 2868 	strb.w	r2, [r4, #2152]	; 0x868
    eb24:	3002      	adds	r0, #2
    eb26:	b2c0      	uxtb	r0, r0
    eb28:	f000 fabc 	bl	f0a4 <am_hal_pwrctrl_periph_disable>
    eb2c:	2800      	cmp	r0, #0
    eb2e:	d15e      	bne.n	ebee <am_hal_iom_power_ctrl+0x186>
    eb30:	2500      	movs	r5, #0
    eb32:	4628      	mov	r0, r5
    eb34:	bd38      	pop	{r3, r4, r5, pc}
    eb36:	2502      	movs	r5, #2
    eb38:	4628      	mov	r0, r5
    eb3a:	bd38      	pop	{r3, r4, r5, pc}
    eb3c:	2506      	movs	r5, #6
    eb3e:	4628      	mov	r0, r5
    eb40:	bd38      	pop	{r3, r4, r5, pc}
    eb42:	2a00      	cmp	r2, #0
    eb44:	d04c      	beq.n	ebe0 <am_hal_iom_power_ctrl+0x178>
    eb46:	f894 3868 	ldrb.w	r3, [r4, #2152]	; 0x868
    eb4a:	2b00      	cmp	r3, #0
    eb4c:	d060      	beq.n	ec10 <am_hal_iom_power_ctrl+0x1a8>
    eb4e:	6860      	ldr	r0, [r4, #4]
    eb50:	3002      	adds	r0, #2
    eb52:	b2c0      	uxtb	r0, r0
    eb54:	f000 fa7c 	bl	f050 <am_hal_pwrctrl_periph_enable>
    eb58:	4605      	mov	r5, r0
    eb5a:	2800      	cmp	r0, #0
    eb5c:	d147      	bne.n	ebee <am_hal_iom_power_ctrl+0x186>
    eb5e:	6863      	ldr	r3, [r4, #4]
    eb60:	f8d4 186c 	ldr.w	r1, [r4, #2156]	; 0x86c
    eb64:	f8d4 287c 	ldr.w	r2, [r4, #2172]	; 0x87c
    eb68:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    eb6c:	3304      	adds	r3, #4
    eb6e:	031b      	lsls	r3, r3, #12
    eb70:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    eb74:	f8d4 1874 	ldr.w	r1, [r4, #2164]	; 0x874
    eb78:	f8c3 1210 	str.w	r1, [r3, #528]	; 0x210
    eb7c:	f8d4 1878 	ldr.w	r1, [r4, #2168]	; 0x878
    eb80:	f8c3 1214 	str.w	r1, [r3, #532]	; 0x214
    eb84:	f8d4 1880 	ldr.w	r1, [r4, #2176]	; 0x880
    eb88:	f8c3 1298 	str.w	r1, [r3, #664]	; 0x298
    eb8c:	f8d4 1888 	ldr.w	r1, [r4, #2184]	; 0x888
    eb90:	f8c3 12a8 	str.w	r1, [r3, #680]	; 0x2a8
    eb94:	f8d4 188c 	ldr.w	r1, [r4, #2188]	; 0x88c
    eb98:	f8c3 12ac 	str.w	r1, [r3, #684]	; 0x2ac
    eb9c:	f8d4 1890 	ldr.w	r1, [r4, #2192]	; 0x890
    eba0:	f8c3 12b0 	str.w	r1, [r3, #688]	; 0x2b0
    eba4:	f8d4 1894 	ldr.w	r1, [r4, #2196]	; 0x894
    eba8:	f8c3 1300 	str.w	r1, [r3, #768]	; 0x300
    ebac:	f8d4 1898 	ldr.w	r1, [r4, #2200]	; 0x898
    ebb0:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
    ebb4:	f8d4 189c 	ldr.w	r1, [r4, #2204]	; 0x89c
    ebb8:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    ebbc:	f8d4 1870 	ldr.w	r1, [r4, #2160]	; 0x870
    ebc0:	f8c3 1240 	str.w	r1, [r3, #576]	; 0x240
    ebc4:	f894 1884 	ldrb.w	r1, [r4, #2180]	; 0x884
    ebc8:	f8c3 12a4 	str.w	r1, [r3, #676]	; 0x2a4
    ebcc:	f022 0101 	bic.w	r1, r2, #1
    ebd0:	07d2      	lsls	r2, r2, #31
    ebd2:	f8c3 1294 	str.w	r1, [r3, #660]	; 0x294
    ebd6:	d40c      	bmi.n	ebf2 <am_hal_iom_power_ctrl+0x18a>
    ebd8:	2300      	movs	r3, #0
    ebda:	f884 3868 	strb.w	r3, [r4, #2152]	; 0x868
    ebde:	e7ab      	b.n	eb38 <am_hal_iom_power_ctrl+0xd0>
    ebe0:	6860      	ldr	r0, [r4, #4]
    ebe2:	3002      	adds	r0, #2
    ebe4:	b2c0      	uxtb	r0, r0
    ebe6:	f000 fa33 	bl	f050 <am_hal_pwrctrl_periph_enable>
    ebea:	2800      	cmp	r0, #0
    ebec:	d0a0      	beq.n	eb30 <am_hal_iom_power_ctrl+0xc8>
    ebee:	2509      	movs	r5, #9
    ebf0:	e7a2      	b.n	eb38 <am_hal_iom_power_ctrl+0xd0>
    ebf2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    ebf4:	b92a      	cbnz	r2, ec02 <am_hal_iom_power_ctrl+0x19a>
    ebf6:	f8d3 2298 	ldr.w	r2, [r3, #664]	; 0x298
    ebfa:	f503 7326 	add.w	r3, r3, #664	; 0x298
    ebfe:	e9c2 3200 	strd	r3, r2, [r2]
    ec02:	f8d4 0828 	ldr.w	r0, [r4, #2088]	; 0x828
    ec06:	f000 fbe7 	bl	f3d8 <am_hal_cmdq_enable>
    ec0a:	e7e5      	b.n	ebd8 <am_hal_iom_power_ctrl+0x170>
    ec0c:	2503      	movs	r5, #3
    ec0e:	e793      	b.n	eb38 <am_hal_iom_power_ctrl+0xd0>
    ec10:	2507      	movs	r5, #7
    ec12:	e791      	b.n	eb38 <am_hal_iom_power_ctrl+0xd0>
    ec14:	01123456 	.word	0x01123456

0000ec18 <am_hal_iom_configure>:
    ec18:	b380      	cbz	r0, ec7c <am_hal_iom_configure+0x64>
    ec1a:	6803      	ldr	r3, [r0, #0]
    ec1c:	4a98      	ldr	r2, [pc, #608]	; (ee80 <am_hal_iom_configure+0x268>)
    ec1e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ec22:	4293      	cmp	r3, r2
    ec24:	d12a      	bne.n	ec7c <am_hal_iom_configure+0x64>
    ec26:	2900      	cmp	r1, #0
    ec28:	f000 80fb 	beq.w	ee22 <am_hal_iom_configure+0x20a>
    ec2c:	6843      	ldr	r3, [r0, #4]
    ec2e:	2b05      	cmp	r3, #5
    ec30:	f200 80f7 	bhi.w	ee22 <am_hal_iom_configure+0x20a>
    ec34:	78c2      	ldrb	r2, [r0, #3]
    ec36:	0792      	lsls	r2, r2, #30
    ec38:	f100 80f5 	bmi.w	ee26 <am_hal_iom_configure+0x20e>
    ec3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ec40:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ec44:	3304      	adds	r3, #4
    ec46:	780a      	ldrb	r2, [r1, #0]
    ec48:	7202      	strb	r2, [r0, #8]
    ec4a:	031b      	lsls	r3, r3, #12
    ec4c:	f241 0410 	movw	r4, #4112	; 0x1010
    ec50:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    ec54:	b1a2      	cbz	r2, ec80 <am_hal_iom_configure+0x68>
    ec56:	2a01      	cmp	r2, #1
    ec58:	f040 80e7 	bne.w	ee2a <am_hal_iom_configure+0x212>
    ec5c:	684a      	ldr	r2, [r1, #4]
    ec5e:	4c89      	ldr	r4, [pc, #548]	; (ee84 <am_hal_iom_configure+0x26c>)
    ec60:	42a2      	cmp	r2, r4
    ec62:	f000 8106 	beq.w	ee72 <am_hal_iom_configure+0x25a>
    ec66:	4c88      	ldr	r4, [pc, #544]	; (ee88 <am_hal_iom_configure+0x270>)
    ec68:	42a2      	cmp	r2, r4
    ec6a:	f000 80fc 	beq.w	ee66 <am_hal_iom_configure+0x24e>
    ec6e:	4c87      	ldr	r4, [pc, #540]	; (ee8c <am_hal_iom_configure+0x274>)
    ec70:	42a2      	cmp	r2, r4
    ec72:	f000 80ec 	beq.w	ee4e <am_hal_iom_configure+0x236>
    ec76:	2006      	movs	r0, #6
    ec78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ec7c:	2002      	movs	r0, #2
    ec7e:	4770      	bx	lr
    ec80:	7a0e      	ldrb	r6, [r1, #8]
    ec82:	2e03      	cmp	r6, #3
    ec84:	d8f7      	bhi.n	ec76 <am_hal_iom_configure+0x5e>
    ec86:	684c      	ldr	r4, [r1, #4]
    ec88:	4a81      	ldr	r2, [pc, #516]	; (ee90 <am_hal_iom_configure+0x278>)
    ec8a:	4294      	cmp	r4, r2
    ec8c:	d8f3      	bhi.n	ec76 <am_hal_iom_configure+0x5e>
    ec8e:	fbb2 f5f4 	udiv	r5, r2, r4
    ec92:	2c00      	cmp	r4, #0
    ec94:	f000 80d0 	beq.w	ee38 <am_hal_iom_configure+0x220>
    ec98:	fb04 2215 	mls	r2, r4, r5, r2
    ec9c:	2a00      	cmp	r2, #0
    ec9e:	bf0c      	ite	eq
    eca0:	46ac      	moveq	ip, r5
    eca2:	f105 0c01 	addne.w	ip, r5, #1
    eca6:	f1cc 0200 	rsb	r2, ip, #0
    ecaa:	ea02 020c 	and.w	r2, r2, ip
    ecae:	fab2 f282 	clz	r2, r2
    ecb2:	f1c2 021f 	rsb	r2, r2, #31
    ecb6:	2a06      	cmp	r2, #6
    ecb8:	bfa8      	it	ge
    ecba:	2206      	movge	r2, #6
    ecbc:	f5b4 6f37 	cmp.w	r4, #2928	; 0xb70
    ecc0:	f240 80b5 	bls.w	ee2e <am_hal_iom_configure+0x216>
    ecc4:	f8df e1e4 	ldr.w	lr, [pc, #484]	; eeac <am_hal_iom_configure+0x294>
    ecc8:	f5a4 0774 	sub.w	r7, r4, #15990784	; 0xf40000
    eccc:	f5a7 5710 	sub.w	r7, r7, #9216	; 0x2400
    ecd0:	4577      	cmp	r7, lr
    ecd2:	bf34      	ite	cc
    ecd4:	f04f 0902 	movcc.w	r9, #2
    ecd8:	f04f 0900 	movcs.w	r9, #0
    ecdc:	f109 0901 	add.w	r9, r9, #1
    ece0:	bf34      	ite	cc
    ece2:	f04f 0e01 	movcc.w	lr, #1
    ece6:	f04f 0e00 	movcs.w	lr, #0
    ecea:	fa09 f802 	lsl.w	r8, r9, r2
    ecee:	fbbc f7f8 	udiv	r7, ip, r8
    ecf2:	fb08 c817 	mls	r8, r8, r7, ip
    ecf6:	f1b8 0f00 	cmp.w	r8, #0
    ecfa:	bf18      	it	ne
    ecfc:	3701      	addne	r7, #1
    ecfe:	fab7 fa87 	clz	sl, r7
    ed02:	f1ca 081f 	rsb	r8, sl, #31
    ed06:	f1b8 0f07 	cmp.w	r8, #7
    ed0a:	f240 8097 	bls.w	ee3c <am_hal_iom_configure+0x224>
    ed0e:	3a07      	subs	r2, #7
    ed10:	4442      	add	r2, r8
    ed12:	f102 0801 	add.w	r8, r2, #1
    ed16:	f1b8 0f07 	cmp.w	r8, #7
    ed1a:	f200 808d 	bhi.w	ee38 <am_hal_iom_configure+0x220>
    ed1e:	f1ca 0a18 	rsb	sl, sl, #24
    ed22:	f04f 0b01 	mov.w	fp, #1
    ed26:	fa0b fb0a 	lsl.w	fp, fp, sl
    ed2a:	f10b 3bff 	add.w	fp, fp, #4294967295
    ed2e:	fa27 fa0a 	lsr.w	sl, r7, sl
    ed32:	ea0b 0b07 	and.w	fp, fp, r7
    ed36:	f1bb 0f00 	cmp.w	fp, #0
    ed3a:	bf0c      	ite	eq
    ed3c:	4657      	moveq	r7, sl
    ed3e:	f10a 0701 	addne.w	r7, sl, #1
    ed42:	f8df a16c 	ldr.w	sl, [pc, #364]	; eeb0 <am_hal_iom_configure+0x298>
    ed46:	4554      	cmp	r4, sl
    ed48:	d27b      	bcs.n	ee42 <am_hal_iom_configure+0x22a>
    ed4a:	2401      	movs	r4, #1
    ed4c:	4094      	lsls	r4, r2
    ed4e:	45a4      	cmp	ip, r4
    ed50:	d077      	beq.n	ee42 <am_hal_iom_configure+0x22a>
    ed52:	f107 3cff 	add.w	ip, r7, #4294967295
    ed56:	463c      	mov	r4, r7
    ed58:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
    ed5c:	ea4f 0b66 	mov.w	fp, r6, asr #1
    ed60:	f1bb 0f01 	cmp.w	fp, #1
    ed64:	fa09 f202 	lsl.w	r2, r9, r2
    ed68:	bf08      	it	eq
    ed6a:	3f02      	subeq	r7, #2
    ed6c:	fb04 f202 	mul.w	r2, r4, r2
    ed70:	ea4f 24ce 	mov.w	r4, lr, lsl #11
    ed74:	bf14      	ite	ne
    ed76:	ea4f 075c 	movne.w	r7, ip, lsr #1
    ed7a:	087f      	lsreq	r7, r7, #1
    ed7c:	ea44 2408 	orr.w	r4, r4, r8, lsl #8
    ed80:	ea44 040a 	orr.w	r4, r4, sl
    ed84:	043f      	lsls	r7, r7, #16
    ed86:	ea44 640c 	orr.w	r4, r4, ip, lsl #24
    ed8a:	f407 077f 	and.w	r7, r7, #16711680	; 0xff0000
    ed8e:	433c      	orrs	r4, r7
    ed90:	4f3f      	ldr	r7, [pc, #252]	; (ee90 <am_hal_iom_configure+0x278>)
    ed92:	f8df c120 	ldr.w	ip, [pc, #288]	; eeb4 <am_hal_iom_configure+0x29c>
    ed96:	fbb7 f9f2 	udiv	r9, r7, r2
    ed9a:	fb02 7e19 	mls	lr, r2, r9, r7
    ed9e:	0852      	lsrs	r2, r2, #1
    eda0:	4572      	cmp	r2, lr
    eda2:	bf2c      	ite	cs
    eda4:	464f      	movcs	r7, r9
    eda6:	f109 0701 	addcc.w	r7, r9, #1
    edaa:	f8df e10c 	ldr.w	lr, [pc, #268]	; eeb8 <am_hal_iom_configure+0x2a0>
    edae:	fbac c207 	umull	ip, r2, ip, r7
    edb2:	f8df c108 	ldr.w	ip, [pc, #264]	; eebc <am_hal_iom_configure+0x2a4>
    edb6:	0c12      	lsrs	r2, r2, #16
    edb8:	4577      	cmp	r7, lr
    edba:	ea4f 2808 	mov.w	r8, r8, lsl #8
    edbe:	fb0c 7c12 	mls	ip, ip, r2, r7
    edc2:	d906      	bls.n	edd2 <am_hal_iom_configure+0x1ba>
    edc4:	1e57      	subs	r7, r2, #1
    edc6:	403a      	ands	r2, r7
    edc8:	ea52 020c 	orrs.w	r2, r2, ip
    edcc:	d101      	bne.n	edd2 <am_hal_iom_configure+0x1ba>
    edce:	f448 6400 	orr.w	r4, r8, #2048	; 0x800
    edd2:	f044 0401 	orr.w	r4, r4, #1
    edd6:	f8c3 6300 	str.w	r6, [r3, #768]	; 0x300
    edda:	f8c3 4210 	str.w	r4, [r3, #528]	; 0x210
    edde:	e9d1 1303 	ldrd	r1, r3, [r1, #12]
    ede2:	f1a3 0208 	sub.w	r2, r3, #8
    ede6:	60c1      	str	r1, [r0, #12]
    ede8:	f246 015f 	movw	r1, #24671	; 0x605f
    edec:	ebb1 0f82 	cmp.w	r1, r2, lsl #2
    edf0:	6103      	str	r3, [r0, #16]
    edf2:	ea4f 0382 	mov.w	r3, r2, lsl #2
    edf6:	bf28      	it	cs
    edf8:	4a26      	ldrcs	r2, [pc, #152]	; (ee94 <am_hal_iom_configure+0x27c>)
    edfa:	f8c0 5864 	str.w	r5, [r0, #2148]	; 0x864
    edfe:	bf26      	itte	cs
    ee00:	fba2 2303 	umullcs	r2, r3, r2, r3
    ee04:	099b      	lsrcs	r3, r3, #6
    ee06:	f44f 7380 	movcc.w	r3, #256	; 0x100
    ee0a:	f8c0 3858 	str.w	r3, [r0, #2136]	; 0x858
    ee0e:	2300      	movs	r3, #0
    ee10:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    ee14:	f8c0 38a0 	str.w	r3, [r0, #2208]	; 0x8a0
    ee18:	f8c0 4860 	str.w	r4, [r0, #2144]	; 0x860
    ee1c:	4618      	mov	r0, r3
    ee1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ee22:	2006      	movs	r0, #6
    ee24:	4770      	bx	lr
    ee26:	2007      	movs	r0, #7
    ee28:	4770      	bx	lr
    ee2a:	2005      	movs	r0, #5
    ee2c:	e724      	b.n	ec78 <am_hal_iom_configure+0x60>
    ee2e:	f04f 0903 	mov.w	r9, #3
    ee32:	f04f 0e01 	mov.w	lr, #1
    ee36:	e758      	b.n	ecea <am_hal_iom_configure+0xd2>
    ee38:	2401      	movs	r4, #1
    ee3a:	e7cc      	b.n	edd6 <am_hal_iom_configure+0x1be>
    ee3c:	f102 0801 	add.w	r8, r2, #1
    ee40:	e77f      	b.n	ed42 <am_hal_iom_configure+0x12a>
    ee42:	f107 3cff 	add.w	ip, r7, #4294967295
    ee46:	2401      	movs	r4, #1
    ee48:	f04f 0a00 	mov.w	sl, #0
    ee4c:	e786      	b.n	ed5c <am_hal_iom_configure+0x144>
    ee4e:	f104 44ee 	add.w	r4, r4, #1996488704	; 0x77000000
    ee52:	4a11      	ldr	r2, [pc, #68]	; (ee98 <am_hal_iom_configure+0x280>)
    ee54:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    ee58:	f504 1466 	add.w	r4, r4, #3768320	; 0x398000
    ee5c:	f604 3461 	addw	r4, r4, #2913	; 0xb61
    ee60:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
    ee64:	e7b9      	b.n	edda <am_hal_iom_configure+0x1c2>
    ee66:	4a0d      	ldr	r2, [pc, #52]	; (ee9c <am_hal_iom_configure+0x284>)
    ee68:	4c0d      	ldr	r4, [pc, #52]	; (eea0 <am_hal_iom_configure+0x288>)
    ee6a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    ee6e:	2530      	movs	r5, #48	; 0x30
    ee70:	e7b3      	b.n	edda <am_hal_iom_configure+0x1c2>
    ee72:	4a0c      	ldr	r2, [pc, #48]	; (eea4 <am_hal_iom_configure+0x28c>)
    ee74:	4c0c      	ldr	r4, [pc, #48]	; (eea8 <am_hal_iom_configure+0x290>)
    ee76:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    ee7a:	2578      	movs	r5, #120	; 0x78
    ee7c:	e7ad      	b.n	edda <am_hal_iom_configure+0x1c2>
    ee7e:	bf00      	nop
    ee80:	01123456 	.word	0x01123456
    ee84:	00061a80 	.word	0x00061a80
    ee88:	000f4240 	.word	0x000f4240
    ee8c:	000186a0 	.word	0x000186a0
    ee90:	02dc6c00 	.word	0x02dc6c00
    ee94:	aaaaaaab 	.word	0xaaaaaaab
    ee98:	0003f070 	.word	0x0003f070
    ee9c:	00213040 	.word	0x00213040
    eea0:	06031301 	.word	0x06031301
    eea4:	0003f270 	.word	0x0003f270
    eea8:	1d0e1201 	.word	0x1d0e1201
    eeac:	007a1200 	.word	0x007a1200
    eeb0:	00b71b00 	.word	0x00b71b00
    eeb4:	431bde83 	.word	0x431bde83
    eeb8:	0003d08f 	.word	0x0003d08f
    eebc:	0003d090 	.word	0x0003d090

0000eec0 <am_hal_iom_nonblocking_transfer>:
    eec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eec4:	2800      	cmp	r0, #0
    eec6:	d06d      	beq.n	efa4 <am_hal_iom_nonblocking_transfer+0xe4>
    eec8:	4604      	mov	r4, r0
    eeca:	6800      	ldr	r0, [r0, #0]
    eecc:	4616      	mov	r6, r2
    eece:	4a5e      	ldr	r2, [pc, #376]	; (f048 <am_hal_iom_nonblocking_transfer+0x188>)
    eed0:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
    eed4:	4290      	cmp	r0, r2
    eed6:	d165      	bne.n	efa4 <am_hal_iom_nonblocking_transfer+0xe4>
    eed8:	2900      	cmp	r1, #0
    eeda:	d069      	beq.n	efb0 <am_hal_iom_nonblocking_transfer+0xf0>
    eedc:	7c0a      	ldrb	r2, [r1, #16]
    eede:	2a01      	cmp	r2, #1
    eee0:	d85c      	bhi.n	ef9c <am_hal_iom_nonblocking_transfer+0xdc>
    eee2:	68cf      	ldr	r7, [r1, #12]
    eee4:	2f00      	cmp	r7, #0
    eee6:	d067      	beq.n	efb8 <am_hal_iom_nonblocking_transfer+0xf8>
    eee8:	6848      	ldr	r0, [r1, #4]
    eeea:	2803      	cmp	r0, #3
    eeec:	d860      	bhi.n	efb0 <am_hal_iom_nonblocking_transfer+0xf0>
    eeee:	f04f 35ff 	mov.w	r5, #4294967295
    eef2:	00c0      	lsls	r0, r0, #3
    eef4:	fa05 f000 	lsl.w	r0, r5, r0
    eef8:	688d      	ldr	r5, [r1, #8]
    eefa:	4228      	tst	r0, r5
    eefc:	d158      	bne.n	efb0 <am_hal_iom_nonblocking_transfer+0xf0>
    eefe:	2f00      	cmp	r7, #0
    ef00:	d05d      	beq.n	efbe <am_hal_iom_nonblocking_transfer+0xfe>
    ef02:	2a00      	cmp	r2, #0
    ef04:	d06d      	beq.n	efe2 <am_hal_iom_nonblocking_transfer+0x122>
    ef06:	698a      	ldr	r2, [r1, #24]
    ef08:	2a00      	cmp	r2, #0
    ef0a:	d051      	beq.n	efb0 <am_hal_iom_nonblocking_transfer+0xf0>
    ef0c:	7a22      	ldrb	r2, [r4, #8]
    ef0e:	2a01      	cmp	r2, #1
    ef10:	d04c      	beq.n	efac <am_hal_iom_nonblocking_transfer+0xec>
    ef12:	b92a      	cbnz	r2, ef20 <am_hal_iom_nonblocking_transfer+0x60>
    ef14:	680a      	ldr	r2, [r1, #0]
    ef16:	2a03      	cmp	r2, #3
    ef18:	d84a      	bhi.n	efb0 <am_hal_iom_nonblocking_transfer+0xf0>
    ef1a:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
    ef1e:	d247      	bcs.n	efb0 <am_hal_iom_nonblocking_transfer+0xf0>
    ef20:	6a08      	ldr	r0, [r1, #32]
    ef22:	f010 0fe0 	tst.w	r0, #224	; 0xe0
    ef26:	d143      	bne.n	efb0 <am_hal_iom_nonblocking_transfer+0xf0>
    ef28:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    ef2a:	f002 32e0 	and.w	r2, r2, #3772834016	; 0xe0e0e0e0
    ef2e:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    ef32:	2a00      	cmp	r2, #0
    ef34:	d13c      	bne.n	efb0 <am_hal_iom_nonblocking_transfer+0xf0>
    ef36:	f8d4 2828 	ldr.w	r2, [r4, #2088]	; 0x828
    ef3a:	b37a      	cbz	r2, ef9c <am_hal_iom_nonblocking_transfer+0xdc>
    ef3c:	f894 282c 	ldrb.w	r2, [r4, #2092]	; 0x82c
    ef40:	2a02      	cmp	r2, #2
    ef42:	d02b      	beq.n	ef9c <am_hal_iom_nonblocking_transfer+0xdc>
    ef44:	f8d4 5838 	ldr.w	r5, [r4, #2104]	; 0x838
    ef48:	2d00      	cmp	r5, #0
    ef4a:	d03c      	beq.n	efc6 <am_hal_iom_nonblocking_transfer+0x106>
    ef4c:	bb30      	cbnz	r0, ef9c <am_hal_iom_nonblocking_transfer+0xdc>
    ef4e:	4637      	mov	r7, r6
    ef50:	463a      	mov	r2, r7
    ef52:	4620      	mov	r0, r4
    ef54:	f7ff fa50 	bl	e3f8 <am_hal_iom_CQAddTransaction>
    ef58:	4605      	mov	r5, r0
    ef5a:	bb00      	cbnz	r0, ef9e <am_hal_iom_nonblocking_transfer+0xde>
    ef5c:	f7ff f9c4 	bl	e2e8 <am_hal_interrupt_master_disable>
    ef60:	1e39      	subs	r1, r7, #0
    ef62:	bf18      	it	ne
    ef64:	2101      	movne	r1, #1
    ef66:	4680      	mov	r8, r0
    ef68:	f8d4 0828 	ldr.w	r0, [r4, #2088]	; 0x828
    ef6c:	f000 faee 	bl	f54c <am_hal_cmdq_post_block>
    ef70:	4605      	mov	r5, r0
    ef72:	2800      	cmp	r0, #0
    ef74:	d139      	bne.n	efea <am_hal_iom_nonblocking_transfer+0x12a>
    ef76:	f8d4 3830 	ldr.w	r3, [r4, #2096]	; 0x830
    ef7a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    ef7c:	3301      	adds	r3, #1
    ef7e:	f8c4 3830 	str.w	r3, [r4, #2096]	; 0x830
    ef82:	1c53      	adds	r3, r2, #1
    ef84:	6263      	str	r3, [r4, #36]	; 0x24
    ef86:	2e00      	cmp	r6, #0
    ef88:	d053      	beq.n	f032 <am_hal_iom_nonblocking_transfer+0x172>
    ef8a:	f884 082d 	strb.w	r0, [r4, #2093]	; 0x82d
    ef8e:	f8c4 085c 	str.w	r0, [r4, #2140]	; 0x85c
    ef92:	b37a      	cbz	r2, eff4 <am_hal_iom_nonblocking_transfer+0x134>
    ef94:	4640      	mov	r0, r8
    ef96:	f7ff f9ab 	bl	e2f0 <am_hal_interrupt_master_set>
    ef9a:	e000      	b.n	ef9e <am_hal_iom_nonblocking_transfer+0xde>
    ef9c:	2507      	movs	r5, #7
    ef9e:	4628      	mov	r0, r5
    efa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    efa4:	2502      	movs	r5, #2
    efa6:	4628      	mov	r0, r5
    efa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    efac:	2fff      	cmp	r7, #255	; 0xff
    efae:	d9b7      	bls.n	ef20 <am_hal_iom_nonblocking_transfer+0x60>
    efb0:	2506      	movs	r5, #6
    efb2:	4628      	mov	r0, r5
    efb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    efb8:	740f      	strb	r7, [r1, #16]
    efba:	463a      	mov	r2, r7
    efbc:	e794      	b.n	eee8 <am_hal_iom_nonblocking_transfer+0x28>
    efbe:	7a22      	ldrb	r2, [r4, #8]
    efc0:	2a01      	cmp	r2, #1
    efc2:	d1a6      	bne.n	ef12 <am_hal_iom_nonblocking_transfer+0x52>
    efc4:	e7ac      	b.n	ef20 <am_hal_iom_nonblocking_transfer+0x60>
    efc6:	2e00      	cmp	r6, #0
    efc8:	d1c1      	bne.n	ef4e <am_hal_iom_nonblocking_transfer+0x8e>
    efca:	2a00      	cmp	r2, #0
    efcc:	d1bf      	bne.n	ef4e <am_hal_iom_nonblocking_transfer+0x8e>
    efce:	f8d4 0858 	ldr.w	r0, [r4, #2136]	; 0x858
    efd2:	f8d4 285c 	ldr.w	r2, [r4, #2140]	; 0x85c
    efd6:	4f1d      	ldr	r7, [pc, #116]	; (f04c <am_hal_iom_nonblocking_transfer+0x18c>)
    efd8:	ebb2 0f50 	cmp.w	r2, r0, lsr #1
    efdc:	bf38      	it	cc
    efde:	2700      	movcc	r7, #0
    efe0:	e7b6      	b.n	ef50 <am_hal_iom_nonblocking_transfer+0x90>
    efe2:	694a      	ldr	r2, [r1, #20]
    efe4:	2a00      	cmp	r2, #0
    efe6:	d191      	bne.n	ef0c <am_hal_iom_nonblocking_transfer+0x4c>
    efe8:	e7e2      	b.n	efb0 <am_hal_iom_nonblocking_transfer+0xf0>
    efea:	f8d4 0828 	ldr.w	r0, [r4, #2088]	; 0x828
    efee:	f000 fa95 	bl	f51c <am_hal_cmdq_release_block>
    eff2:	e7cf      	b.n	ef94 <am_hal_iom_nonblocking_transfer+0xd4>
    eff4:	6863      	ldr	r3, [r4, #4]
    eff6:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    effa:	3304      	adds	r3, #4
    effc:	031b      	lsls	r3, r3, #12
    effe:	f04f 31ff 	mov.w	r1, #4294967295
    f002:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
    f006:	6160      	str	r0, [r4, #20]
    f008:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    f00c:	f646 227c 	movw	r2, #27260	; 0x6a7c
    f010:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    f014:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    f018:	6a62      	ldr	r2, [r4, #36]	; 0x24
    f01a:	b92a      	cbnz	r2, f028 <am_hal_iom_nonblocking_transfer+0x168>
    f01c:	f8d3 2298 	ldr.w	r2, [r3, #664]	; 0x298
    f020:	f503 7326 	add.w	r3, r3, #664	; 0x298
    f024:	e9c2 3200 	strd	r3, r2, [r2]
    f028:	f8d4 0828 	ldr.w	r0, [r4, #2088]	; 0x828
    f02c:	f000 f9d4 	bl	f3d8 <am_hal_cmdq_enable>
    f030:	e7b0      	b.n	ef94 <am_hal_iom_nonblocking_transfer+0xd4>
    f032:	b117      	cbz	r7, f03a <am_hal_iom_nonblocking_transfer+0x17a>
    f034:	f8c4 085c 	str.w	r0, [r4, #2140]	; 0x85c
    f038:	e7ab      	b.n	ef92 <am_hal_iom_nonblocking_transfer+0xd2>
    f03a:	f8d4 385c 	ldr.w	r3, [r4, #2140]	; 0x85c
    f03e:	3301      	adds	r3, #1
    f040:	f8c4 385c 	str.w	r3, [r4, #2140]	; 0x85c
    f044:	e7a5      	b.n	ef92 <am_hal_iom_nonblocking_transfer+0xd2>
    f046:	bf00      	nop
    f048:	01123456 	.word	0x01123456
    f04c:	0000e2f9 	.word	0x0000e2f9

0000f050 <am_hal_pwrctrl_periph_enable>:
    f050:	b570      	push	{r4, r5, r6, lr}
    f052:	b082      	sub	sp, #8
    f054:	4604      	mov	r4, r0
    f056:	f7ff f947 	bl	e2e8 <am_hal_interrupt_master_disable>
    f05a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f05e:	4e0f      	ldr	r6, [pc, #60]	; (f09c <am_hal_pwrctrl_periph_enable+0x4c>)
    f060:	4d0f      	ldr	r5, [pc, #60]	; (f0a0 <am_hal_pwrctrl_periph_enable+0x50>)
    f062:	9001      	str	r0, [sp, #4]
    f064:	00a4      	lsls	r4, r4, #2
    f066:	68b3      	ldr	r3, [r6, #8]
    f068:	592a      	ldr	r2, [r5, r4]
    f06a:	4313      	orrs	r3, r2
    f06c:	60b3      	str	r3, [r6, #8]
    f06e:	9801      	ldr	r0, [sp, #4]
    f070:	442c      	add	r4, r5
    f072:	f7ff f93d 	bl	e2f0 <am_hal_interrupt_master_set>
    f076:	20a0      	movs	r0, #160	; 0xa0
    f078:	f7fe fe7e 	bl	dd78 <am_hal_flash_delay>
    f07c:	69b3      	ldr	r3, [r6, #24]
    f07e:	6864      	ldr	r4, [r4, #4]
    f080:	4223      	tst	r3, r4
    f082:	d103      	bne.n	f08c <am_hal_pwrctrl_periph_enable+0x3c>
    f084:	20a0      	movs	r0, #160	; 0xa0
    f086:	f7fe fe77 	bl	dd78 <am_hal_flash_delay>
    f08a:	69b3      	ldr	r3, [r6, #24]
    f08c:	4b03      	ldr	r3, [pc, #12]	; (f09c <am_hal_pwrctrl_periph_enable+0x4c>)
    f08e:	699b      	ldr	r3, [r3, #24]
    f090:	4223      	tst	r3, r4
    f092:	bf0c      	ite	eq
    f094:	2001      	moveq	r0, #1
    f096:	2000      	movne	r0, #0
    f098:	b002      	add	sp, #8
    f09a:	bd70      	pop	{r4, r5, r6, pc}
    f09c:	40021000 	.word	0x40021000
    f0a0:	00011da4 	.word	0x00011da4

0000f0a4 <am_hal_pwrctrl_periph_disable>:
    f0a4:	b570      	push	{r4, r5, r6, lr}
    f0a6:	b082      	sub	sp, #8
    f0a8:	4604      	mov	r4, r0
    f0aa:	f7ff f91d 	bl	e2e8 <am_hal_interrupt_master_disable>
    f0ae:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f0b2:	4e10      	ldr	r6, [pc, #64]	; (f0f4 <am_hal_pwrctrl_periph_disable+0x50>)
    f0b4:	4d10      	ldr	r5, [pc, #64]	; (f0f8 <am_hal_pwrctrl_periph_disable+0x54>)
    f0b6:	9001      	str	r0, [sp, #4]
    f0b8:	00a4      	lsls	r4, r4, #2
    f0ba:	68b3      	ldr	r3, [r6, #8]
    f0bc:	592a      	ldr	r2, [r5, r4]
    f0be:	ea23 0302 	bic.w	r3, r3, r2
    f0c2:	60b3      	str	r3, [r6, #8]
    f0c4:	9801      	ldr	r0, [sp, #4]
    f0c6:	442c      	add	r4, r5
    f0c8:	f7ff f912 	bl	e2f0 <am_hal_interrupt_master_set>
    f0cc:	20a0      	movs	r0, #160	; 0xa0
    f0ce:	f7fe fe53 	bl	dd78 <am_hal_flash_delay>
    f0d2:	69b3      	ldr	r3, [r6, #24]
    f0d4:	6864      	ldr	r4, [r4, #4]
    f0d6:	4223      	tst	r3, r4
    f0d8:	d003      	beq.n	f0e2 <am_hal_pwrctrl_periph_disable+0x3e>
    f0da:	20a0      	movs	r0, #160	; 0xa0
    f0dc:	f7fe fe4c 	bl	dd78 <am_hal_flash_delay>
    f0e0:	69b3      	ldr	r3, [r6, #24]
    f0e2:	4b04      	ldr	r3, [pc, #16]	; (f0f4 <am_hal_pwrctrl_periph_disable+0x50>)
    f0e4:	699b      	ldr	r3, [r3, #24]
    f0e6:	4223      	tst	r3, r4
    f0e8:	bf14      	ite	ne
    f0ea:	2001      	movne	r0, #1
    f0ec:	2000      	moveq	r0, #0
    f0ee:	b002      	add	sp, #8
    f0f0:	bd70      	pop	{r4, r5, r6, pc}
    f0f2:	bf00      	nop
    f0f4:	40021000 	.word	0x40021000
    f0f8:	00011da4 	.word	0x00011da4

0000f0fc <am_hal_pwrctrl_low_power_init>:
    f0fc:	b530      	push	{r4, r5, lr}
    f0fe:	4b69      	ldr	r3, [pc, #420]	; (f2a4 <am_hal_pwrctrl_low_power_init+0x1a8>)
    f100:	681a      	ldr	r2, [r3, #0]
    f102:	b085      	sub	sp, #20
    f104:	b912      	cbnz	r2, f10c <am_hal_pwrctrl_low_power_init+0x10>
    f106:	4a68      	ldr	r2, [pc, #416]	; (f2a8 <am_hal_pwrctrl_low_power_init+0x1ac>)
    f108:	6812      	ldr	r2, [r2, #0]
    f10a:	601a      	str	r2, [r3, #0]
    f10c:	4b67      	ldr	r3, [pc, #412]	; (f2ac <am_hal_pwrctrl_low_power_init+0x1b0>)
    f10e:	68db      	ldr	r3, [r3, #12]
    f110:	b2db      	uxtb	r3, r3
    f112:	2b12      	cmp	r3, #18
    f114:	d104      	bne.n	f120 <am_hal_pwrctrl_low_power_init+0x24>
    f116:	4c66      	ldr	r4, [pc, #408]	; (f2b0 <am_hal_pwrctrl_low_power_init+0x1b4>)
    f118:	6863      	ldr	r3, [r4, #4]
    f11a:	07d8      	lsls	r0, r3, #31
    f11c:	f100 8088 	bmi.w	f230 <am_hal_pwrctrl_low_power_init+0x134>
    f120:	4b62      	ldr	r3, [pc, #392]	; (f2ac <am_hal_pwrctrl_low_power_init+0x1b0>)
    f122:	68da      	ldr	r2, [r3, #12]
    f124:	b2d2      	uxtb	r2, r2
    f126:	2a20      	cmp	r2, #32
    f128:	d934      	bls.n	f194 <am_hal_pwrctrl_low_power_init+0x98>
    f12a:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
    f12e:	2002      	movs	r0, #2
    f130:	f360 4213 	bfi	r2, r0, #16, #4
    f134:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    f138:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
    f13c:	2203      	movs	r2, #3
    f13e:	f362 5117 	bfi	r1, r2, #20, #4
    f142:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
    f146:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    f14a:	2405      	movs	r4, #5
    f14c:	f364 0103 	bfi	r1, r4, #0, #4
    f150:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    f154:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    f158:	f360 1107 	bfi	r1, r0, #4, #4
    f15c:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    f160:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    f164:	2406      	movs	r4, #6
    f166:	f364 210b 	bfi	r1, r4, #8, #4
    f16a:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    f16e:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    f172:	2001      	movs	r0, #1
    f174:	f360 310f 	bfi	r1, r0, #12, #4
    f178:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    f17c:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    f180:	f362 61de 	bfi	r1, r2, #27, #4
    f184:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    f188:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
    f18c:	f362 0103 	bfi	r1, r2, #0, #4
    f190:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
    f194:	4a45      	ldr	r2, [pc, #276]	; (f2ac <am_hal_pwrctrl_low_power_init+0x1b0>)
    f196:	68d3      	ldr	r3, [r2, #12]
    f198:	b2db      	uxtb	r3, r3
    f19a:	2b11      	cmp	r3, #17
    f19c:	d905      	bls.n	f1aa <am_hal_pwrctrl_low_power_init+0xae>
    f19e:	f8d2 335c 	ldr.w	r3, [r2, #860]	; 0x35c
    f1a2:	f36f 6318 	bfc	r3, #24, #1
    f1a6:	f8c2 335c 	str.w	r3, [r2, #860]	; 0x35c
    f1aa:	2100      	movs	r1, #0
    f1ac:	200c      	movs	r0, #12
    f1ae:	f7fe fbaf 	bl	d910 <am_hal_cachectrl_control>
    f1b2:	4b3f      	ldr	r3, [pc, #252]	; (f2b0 <am_hal_pwrctrl_low_power_init+0x1b4>)
    f1b4:	699b      	ldr	r3, [r3, #24]
    f1b6:	f3c3 2500 	ubfx	r5, r3, #8, #1
    f1ba:	05db      	lsls	r3, r3, #23
    f1bc:	d420      	bmi.n	f200 <am_hal_pwrctrl_low_power_init+0x104>
    f1be:	4c3b      	ldr	r4, [pc, #236]	; (f2ac <am_hal_pwrctrl_low_power_init+0x1b0>)
    f1c0:	68e3      	ldr	r3, [r4, #12]
    f1c2:	b2db      	uxtb	r3, r3
    f1c4:	2b11      	cmp	r3, #17
    f1c6:	d84e      	bhi.n	f266 <am_hal_pwrctrl_low_power_init+0x16a>
    f1c8:	4c38      	ldr	r4, [pc, #224]	; (f2ac <am_hal_pwrctrl_low_power_init+0x1b0>)
    f1ca:	493a      	ldr	r1, [pc, #232]	; (f2b4 <am_hal_pwrctrl_low_power_init+0x1b8>)
    f1cc:	7e22      	ldrb	r2, [r4, #24]
    f1ce:	2001      	movs	r0, #1
    f1d0:	4302      	orrs	r2, r0
    f1d2:	2307      	movs	r3, #7
    f1d4:	7622      	strb	r2, [r4, #24]
    f1d6:	9000      	str	r0, [sp, #0]
    f1d8:	461a      	mov	r2, r3
    f1da:	f242 7010 	movw	r0, #10000	; 0x2710
    f1de:	f7fe fddb 	bl	dd98 <am_hal_flash_delay_status_check>
    f1e2:	2800      	cmp	r0, #0
    f1e4:	d15a      	bne.n	f29c <am_hal_pwrctrl_low_power_init+0x1a0>
    f1e6:	4b32      	ldr	r3, [pc, #200]	; (f2b0 <am_hal_pwrctrl_low_power_init+0x1b4>)
    f1e8:	681a      	ldr	r2, [r3, #0]
    f1ea:	f042 0201 	orr.w	r2, r2, #1
    f1ee:	601a      	str	r2, [r3, #0]
    f1f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f1f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    f1f6:	625a      	str	r2, [r3, #36]	; 0x24
    f1f8:	68e3      	ldr	r3, [r4, #12]
    f1fa:	b2db      	uxtb	r3, r3
    f1fc:	2b11      	cmp	r3, #17
    f1fe:	d002      	beq.n	f206 <am_hal_pwrctrl_low_power_init+0x10a>
    f200:	2000      	movs	r0, #0
    f202:	b005      	add	sp, #20
    f204:	bd30      	pop	{r4, r5, pc}
    f206:	f8d4 335c 	ldr.w	r3, [r4, #860]	; 0x35c
    f20a:	f360 5356 	bfi	r3, r0, #21, #2
    f20e:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
    f212:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    f216:	220f      	movs	r2, #15
    f218:	f362 138b 	bfi	r3, r2, #6, #6
    f21c:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    f220:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    f224:	f362 0305 	bfi	r3, r2, #0, #6
    f228:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    f22c:	b005      	add	sp, #20
    f22e:	bd30      	pop	{r4, r5, pc}
    f230:	f7ff f85a 	bl	e2e8 <am_hal_interrupt_master_disable>
    f234:	9002      	str	r0, [sp, #8]
    f236:	68a3      	ldr	r3, [r4, #8]
    f238:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    f23c:	60a3      	str	r3, [r4, #8]
    f23e:	9802      	ldr	r0, [sp, #8]
    f240:	f7ff f856 	bl	e2f0 <am_hal_interrupt_master_set>
    f244:	20a0      	movs	r0, #160	; 0xa0
    f246:	f7fe fd97 	bl	dd78 <am_hal_flash_delay>
    f24a:	69a3      	ldr	r3, [r4, #24]
    f24c:	0619      	lsls	r1, r3, #24
    f24e:	d403      	bmi.n	f258 <am_hal_pwrctrl_low_power_init+0x15c>
    f250:	20a0      	movs	r0, #160	; 0xa0
    f252:	f7fe fd91 	bl	dd78 <am_hal_flash_delay>
    f256:	69a3      	ldr	r3, [r4, #24]
    f258:	4b15      	ldr	r3, [pc, #84]	; (f2b0 <am_hal_pwrctrl_low_power_init+0x1b4>)
    f25a:	699b      	ldr	r3, [r3, #24]
    f25c:	061a      	lsls	r2, r3, #24
    f25e:	f53f af5f 	bmi.w	f120 <am_hal_pwrctrl_low_power_init+0x24>
    f262:	2001      	movs	r0, #1
    f264:	e7cd      	b.n	f202 <am_hal_pwrctrl_low_power_init+0x106>
    f266:	f7ff f83f 	bl	e2e8 <am_hal_interrupt_master_disable>
    f26a:	9003      	str	r0, [sp, #12]
    f26c:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    f270:	2219      	movs	r2, #25
    f272:	f362 138b 	bfi	r3, r2, #6, #6
    f276:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    f27a:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
    f27e:	210c      	movs	r1, #12
    f280:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    f284:	f361 0205 	bfi	r2, r1, #0, #6
    f288:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
    f28c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    f28e:	f365 5296 	bfi	r2, r5, #22, #1
    f292:	63da      	str	r2, [r3, #60]	; 0x3c
    f294:	9803      	ldr	r0, [sp, #12]
    f296:	f7ff f82b 	bl	e2f0 <am_hal_interrupt_master_set>
    f29a:	e795      	b.n	f1c8 <am_hal_pwrctrl_low_power_init+0xcc>
    f29c:	2004      	movs	r0, #4
    f29e:	b005      	add	sp, #20
    f2a0:	bd30      	pop	{r4, r5, pc}
    f2a2:	bf00      	nop
    f2a4:	100057c8 	.word	0x100057c8
    f2a8:	4ffff000 	.word	0x4ffff000
    f2ac:	40020000 	.word	0x40020000
    f2b0:	40021000 	.word	0x40021000
    f2b4:	40020018 	.word	0x40020018

0000f2b8 <am_hal_sysctrl_sleep>:
    f2b8:	b510      	push	{r4, lr}
    f2ba:	b082      	sub	sp, #8
    f2bc:	4604      	mov	r4, r0
    f2be:	f7ff f813 	bl	e2e8 <am_hal_interrupt_master_disable>
    f2c2:	9001      	str	r0, [sp, #4]
    f2c4:	b124      	cbz	r4, f2d0 <am_hal_sysctrl_sleep+0x18>
    f2c6:	4b12      	ldr	r3, [pc, #72]	; (f310 <am_hal_sysctrl_sleep+0x58>)
    f2c8:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    f2cc:	07db      	lsls	r3, r3, #31
    f2ce:	d513      	bpl.n	f2f8 <am_hal_sysctrl_sleep+0x40>
    f2d0:	4a10      	ldr	r2, [pc, #64]	; (f314 <am_hal_sysctrl_sleep+0x5c>)
    f2d2:	6913      	ldr	r3, [r2, #16]
    f2d4:	f023 0304 	bic.w	r3, r3, #4
    f2d8:	6113      	str	r3, [r2, #16]
    f2da:	f3bf 8f4f 	dsb	sy
    f2de:	4a0e      	ldr	r2, [pc, #56]	; (f318 <am_hal_sysctrl_sleep+0x60>)
    f2e0:	4b0e      	ldr	r3, [pc, #56]	; (f31c <am_hal_sysctrl_sleep+0x64>)
    f2e2:	6812      	ldr	r2, [r2, #0]
    f2e4:	601a      	str	r2, [r3, #0]
    f2e6:	bf30      	wfi
    f2e8:	f3bf 8f6f 	isb	sy
    f2ec:	9801      	ldr	r0, [sp, #4]
    f2ee:	b002      	add	sp, #8
    f2f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f2f4:	f7fe bffc 	b.w	e2f0 <am_hal_interrupt_master_set>
    f2f8:	4b09      	ldr	r3, [pc, #36]	; (f320 <am_hal_sysctrl_sleep+0x68>)
    f2fa:	681a      	ldr	r2, [r3, #0]
    f2fc:	b912      	cbnz	r2, f304 <am_hal_sysctrl_sleep+0x4c>
    f2fe:	4a09      	ldr	r2, [pc, #36]	; (f324 <am_hal_sysctrl_sleep+0x6c>)
    f300:	6812      	ldr	r2, [r2, #0]
    f302:	601a      	str	r2, [r3, #0]
    f304:	4a03      	ldr	r2, [pc, #12]	; (f314 <am_hal_sysctrl_sleep+0x5c>)
    f306:	6913      	ldr	r3, [r2, #16]
    f308:	f043 0304 	orr.w	r3, r3, #4
    f30c:	6113      	str	r3, [r2, #16]
    f30e:	e7e4      	b.n	f2da <am_hal_sysctrl_sleep+0x22>
    f310:	40020000 	.word	0x40020000
    f314:	e000ed00 	.word	0xe000ed00
    f318:	5fff0000 	.word	0x5fff0000
    f31c:	100057cc 	.word	0x100057cc
    f320:	100057c8 	.word	0x100057c8
    f324:	4ffff000 	.word	0x4ffff000

0000f328 <am_hal_cmdq_init>:
    f328:	2807      	cmp	r0, #7
    f32a:	d849      	bhi.n	f3c0 <am_hal_cmdq_init+0x98>
    f32c:	2900      	cmp	r1, #0
    f32e:	d04b      	beq.n	f3c8 <am_hal_cmdq_init+0xa0>
    f330:	b5f0      	push	{r4, r5, r6, r7, lr}
    f332:	684e      	ldr	r6, [r1, #4]
    f334:	2e00      	cmp	r6, #0
    f336:	d041      	beq.n	f3bc <am_hal_cmdq_init+0x94>
    f338:	2a00      	cmp	r2, #0
    f33a:	d03f      	beq.n	f3bc <am_hal_cmdq_init+0x94>
    f33c:	680c      	ldr	r4, [r1, #0]
    f33e:	2c01      	cmp	r4, #1
    f340:	d93c      	bls.n	f3bc <am_hal_cmdq_init+0x94>
    f342:	4f22      	ldr	r7, [pc, #136]	; (f3cc <am_hal_cmdq_init+0xa4>)
    f344:	f04f 0e2c 	mov.w	lr, #44	; 0x2c
    f348:	fb0e fe00 	mul.w	lr, lr, r0
    f34c:	eb07 030e 	add.w	r3, r7, lr
    f350:	78dd      	ldrb	r5, [r3, #3]
    f352:	f015 0501 	ands.w	r5, r5, #1
    f356:	d135      	bne.n	f3c4 <am_hal_cmdq_init+0x9c>
    f358:	00e4      	lsls	r4, r4, #3
    f35a:	619c      	str	r4, [r3, #24]
    f35c:	4434      	add	r4, r6
    f35e:	e9c3 6401 	strd	r6, r4, [r3, #4]
    f362:	e9c3 6604 	strd	r6, r6, [r3, #16]
    f366:	60de      	str	r6, [r3, #12]
    f368:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
    f36c:	4818      	ldr	r0, [pc, #96]	; (f3d0 <am_hal_cmdq_init+0xa8>)
    f36e:	f857 400e 	ldr.w	r4, [r7, lr]
    f372:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
    f376:	f8df c05c 	ldr.w	ip, [pc, #92]	; f3d4 <am_hal_cmdq_init+0xac>
    f37a:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
    f37e:	ea44 040c 	orr.w	r4, r4, ip
    f382:	f847 400e 	str.w	r4, [r7, lr]
    f386:	6258      	str	r0, [r3, #36]	; 0x24
    f388:	6880      	ldr	r0, [r0, #8]
    f38a:	e9c3 5507 	strd	r5, r5, [r3, #28]
    f38e:	6005      	str	r5, [r0, #0]
    f390:	6a58      	ldr	r0, [r3, #36]	; 0x24
    f392:	68c0      	ldr	r0, [r0, #12]
    f394:	6005      	str	r5, [r0, #0]
    f396:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    f398:	4628      	mov	r0, r5
    f39a:	e9d4 5704 	ldrd	r5, r7, [r4, #16]
    f39e:	682c      	ldr	r4, [r5, #0]
    f3a0:	433c      	orrs	r4, r7
    f3a2:	602c      	str	r4, [r5, #0]
    f3a4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    f3a6:	6864      	ldr	r4, [r4, #4]
    f3a8:	6026      	str	r6, [r4, #0]
    f3aa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    f3ac:	7a09      	ldrb	r1, [r1, #8]
    f3ae:	6824      	ldr	r4, [r4, #0]
    f3b0:	0049      	lsls	r1, r1, #1
    f3b2:	f001 0102 	and.w	r1, r1, #2
    f3b6:	6021      	str	r1, [r4, #0]
    f3b8:	6013      	str	r3, [r2, #0]
    f3ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f3bc:	2006      	movs	r0, #6
    f3be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f3c0:	2005      	movs	r0, #5
    f3c2:	4770      	bx	lr
    f3c4:	2007      	movs	r0, #7
    f3c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f3c8:	2006      	movs	r0, #6
    f3ca:	4770      	bx	lr
    f3cc:	100057d0 	.word	0x100057d0
    f3d0:	00011e58 	.word	0x00011e58
    f3d4:	01cdcdcd 	.word	0x01cdcdcd

0000f3d8 <am_hal_cmdq_enable>:
    f3d8:	4603      	mov	r3, r0
    f3da:	b1a0      	cbz	r0, f406 <am_hal_cmdq_enable+0x2e>
    f3dc:	6802      	ldr	r2, [r0, #0]
    f3de:	490c      	ldr	r1, [pc, #48]	; (f410 <am_hal_cmdq_enable+0x38>)
    f3e0:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    f3e4:	428a      	cmp	r2, r1
    f3e6:	d10e      	bne.n	f406 <am_hal_cmdq_enable+0x2e>
    f3e8:	78c0      	ldrb	r0, [r0, #3]
    f3ea:	f010 0002 	ands.w	r0, r0, #2
    f3ee:	d10c      	bne.n	f40a <am_hal_cmdq_enable+0x32>
    f3f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f3f2:	6811      	ldr	r1, [r2, #0]
    f3f4:	680a      	ldr	r2, [r1, #0]
    f3f6:	f042 0201 	orr.w	r2, r2, #1
    f3fa:	600a      	str	r2, [r1, #0]
    f3fc:	78da      	ldrb	r2, [r3, #3]
    f3fe:	f042 0202 	orr.w	r2, r2, #2
    f402:	70da      	strb	r2, [r3, #3]
    f404:	4770      	bx	lr
    f406:	2002      	movs	r0, #2
    f408:	4770      	bx	lr
    f40a:	2000      	movs	r0, #0
    f40c:	4770      	bx	lr
    f40e:	bf00      	nop
    f410:	01cdcdcd 	.word	0x01cdcdcd

0000f414 <am_hal_cmdq_disable>:
    f414:	4603      	mov	r3, r0
    f416:	b1a8      	cbz	r0, f444 <am_hal_cmdq_disable+0x30>
    f418:	6802      	ldr	r2, [r0, #0]
    f41a:	490b      	ldr	r1, [pc, #44]	; (f448 <am_hal_cmdq_disable+0x34>)
    f41c:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    f420:	428a      	cmp	r2, r1
    f422:	d10f      	bne.n	f444 <am_hal_cmdq_disable+0x30>
    f424:	78c0      	ldrb	r0, [r0, #3]
    f426:	f010 0002 	ands.w	r0, r0, #2
    f42a:	d00c      	beq.n	f446 <am_hal_cmdq_disable+0x32>
    f42c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f42e:	6811      	ldr	r1, [r2, #0]
    f430:	680a      	ldr	r2, [r1, #0]
    f432:	f022 0201 	bic.w	r2, r2, #1
    f436:	600a      	str	r2, [r1, #0]
    f438:	78da      	ldrb	r2, [r3, #3]
    f43a:	f36f 0241 	bfc	r2, #1, #1
    f43e:	2000      	movs	r0, #0
    f440:	70da      	strb	r2, [r3, #3]
    f442:	4770      	bx	lr
    f444:	2002      	movs	r0, #2
    f446:	4770      	bx	lr
    f448:	01cdcdcd 	.word	0x01cdcdcd

0000f44c <am_hal_cmdq_alloc_block>:
    f44c:	2800      	cmp	r0, #0
    f44e:	d060      	beq.n	f512 <am_hal_cmdq_alloc_block+0xc6>
    f450:	b5f0      	push	{r4, r5, r6, r7, lr}
    f452:	4604      	mov	r4, r0
    f454:	6800      	ldr	r0, [r0, #0]
    f456:	461d      	mov	r5, r3
    f458:	4b2f      	ldr	r3, [pc, #188]	; (f518 <am_hal_cmdq_alloc_block+0xcc>)
    f45a:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
    f45e:	4298      	cmp	r0, r3
    f460:	b083      	sub	sp, #12
    f462:	d146      	bne.n	f4f2 <am_hal_cmdq_alloc_block+0xa6>
    f464:	4616      	mov	r6, r2
    f466:	2a00      	cmp	r2, #0
    f468:	d049      	beq.n	f4fe <am_hal_cmdq_alloc_block+0xb2>
    f46a:	2d00      	cmp	r5, #0
    f46c:	d047      	beq.n	f4fe <am_hal_cmdq_alloc_block+0xb2>
    f46e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    f472:	429a      	cmp	r2, r3
    f474:	d140      	bne.n	f4f8 <am_hal_cmdq_alloc_block+0xac>
    f476:	460f      	mov	r7, r1
    f478:	f7fe ff36 	bl	e2e8 <am_hal_interrupt_master_disable>
    f47c:	9001      	str	r0, [sp, #4]
    f47e:	e9d4 2008 	ldrd	r2, r0, [r4, #32]
    f482:	6883      	ldr	r3, [r0, #8]
    f484:	6819      	ldr	r1, [r3, #0]
    f486:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
    f48a:	b2c9      	uxtb	r1, r1
    f48c:	430b      	orrs	r3, r1
    f48e:	1ad2      	subs	r2, r2, r3
    f490:	2a00      	cmp	r2, #0
    f492:	bfb8      	it	lt
    f494:	f5a3 7380 	sublt.w	r3, r3, #256	; 0x100
    f498:	61e3      	str	r3, [r4, #28]
    f49a:	6843      	ldr	r3, [r0, #4]
    f49c:	681b      	ldr	r3, [r3, #0]
    f49e:	60e3      	str	r3, [r4, #12]
    f4a0:	9801      	ldr	r0, [sp, #4]
    f4a2:	f7fe ff25 	bl	e2f0 <am_hal_interrupt_master_set>
    f4a6:	e9d4 2307 	ldrd	r2, r3, [r4, #28]
    f4aa:	1ad2      	subs	r2, r2, r3
    f4ac:	f112 0ffe 	cmn.w	r2, #254	; 0xfe
    f4b0:	d42d      	bmi.n	f50e <am_hal_cmdq_alloc_block+0xc2>
    f4b2:	e9d4 c103 	ldrd	ip, r1, [r4, #12]
    f4b6:	4561      	cmp	r1, ip
    f4b8:	d324      	bcc.n	f504 <am_hal_cmdq_alloc_block+0xb8>
    f4ba:	1cba      	adds	r2, r7, #2
    f4bc:	68a0      	ldr	r0, [r4, #8]
    f4be:	eb01 0ec2 	add.w	lr, r1, r2, lsl #3
    f4c2:	4586      	cmp	lr, r0
    f4c4:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    f4c8:	d909      	bls.n	f4de <am_hal_cmdq_alloc_block+0x92>
    f4ca:	6860      	ldr	r0, [r4, #4]
    f4cc:	3a08      	subs	r2, #8
    f4ce:	4402      	add	r2, r0
    f4d0:	4594      	cmp	ip, r2
    f4d2:	d91c      	bls.n	f50e <am_hal_cmdq_alloc_block+0xc2>
    f4d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
    f4d6:	6852      	ldr	r2, [r2, #4]
    f4d8:	e9c1 2000 	strd	r2, r0, [r1]
    f4dc:	4601      	mov	r1, r0
    f4de:	6031      	str	r1, [r6, #0]
    f4e0:	3301      	adds	r3, #1
    f4e2:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
    f4e6:	2000      	movs	r0, #0
    f4e8:	6223      	str	r3, [r4, #32]
    f4ea:	602b      	str	r3, [r5, #0]
    f4ec:	6161      	str	r1, [r4, #20]
    f4ee:	b003      	add	sp, #12
    f4f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f4f2:	2002      	movs	r0, #2
    f4f4:	b003      	add	sp, #12
    f4f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f4f8:	2007      	movs	r0, #7
    f4fa:	b003      	add	sp, #12
    f4fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f4fe:	2006      	movs	r0, #6
    f500:	b003      	add	sp, #12
    f502:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f504:	1c7a      	adds	r2, r7, #1
    f506:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    f50a:	4594      	cmp	ip, r2
    f50c:	d8e7      	bhi.n	f4de <am_hal_cmdq_alloc_block+0x92>
    f50e:	2005      	movs	r0, #5
    f510:	e7f0      	b.n	f4f4 <am_hal_cmdq_alloc_block+0xa8>
    f512:	2002      	movs	r0, #2
    f514:	4770      	bx	lr
    f516:	bf00      	nop
    f518:	01cdcdcd 	.word	0x01cdcdcd

0000f51c <am_hal_cmdq_release_block>:
    f51c:	b178      	cbz	r0, f53e <am_hal_cmdq_release_block+0x22>
    f51e:	6803      	ldr	r3, [r0, #0]
    f520:	4a09      	ldr	r2, [pc, #36]	; (f548 <am_hal_cmdq_release_block+0x2c>)
    f522:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f526:	4293      	cmp	r3, r2
    f528:	d109      	bne.n	f53e <am_hal_cmdq_release_block+0x22>
    f52a:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    f52e:	429a      	cmp	r2, r3
    f530:	d007      	beq.n	f542 <am_hal_cmdq_release_block+0x26>
    f532:	6a03      	ldr	r3, [r0, #32]
    f534:	6142      	str	r2, [r0, #20]
    f536:	3b01      	subs	r3, #1
    f538:	6203      	str	r3, [r0, #32]
    f53a:	2000      	movs	r0, #0
    f53c:	4770      	bx	lr
    f53e:	2002      	movs	r0, #2
    f540:	4770      	bx	lr
    f542:	2007      	movs	r0, #7
    f544:	4770      	bx	lr
    f546:	bf00      	nop
    f548:	01cdcdcd 	.word	0x01cdcdcd

0000f54c <am_hal_cmdq_post_block>:
    f54c:	b1d0      	cbz	r0, f584 <am_hal_cmdq_post_block+0x38>
    f54e:	6803      	ldr	r3, [r0, #0]
    f550:	4a0e      	ldr	r2, [pc, #56]	; (f58c <am_hal_cmdq_post_block+0x40>)
    f552:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f556:	4293      	cmp	r3, r2
    f558:	d114      	bne.n	f584 <am_hal_cmdq_post_block+0x38>
    f55a:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    f55e:	429a      	cmp	r2, r3
    f560:	d012      	beq.n	f588 <am_hal_cmdq_post_block+0x3c>
    f562:	b410      	push	{r4}
    f564:	6a44      	ldr	r4, [r0, #36]	; 0x24
    f566:	e9d4 2402 	ldrd	r2, r4, [r4, #8]
    f56a:	4311      	orrs	r1, r2
    f56c:	6a02      	ldr	r2, [r0, #32]
    f56e:	e9c3 1200 	strd	r1, r2, [r3]
    f572:	3308      	adds	r3, #8
    f574:	b2d2      	uxtb	r2, r2
    f576:	e9c0 3304 	strd	r3, r3, [r0, #16]
    f57a:	2000      	movs	r0, #0
    f57c:	6022      	str	r2, [r4, #0]
    f57e:	f85d 4b04 	ldr.w	r4, [sp], #4
    f582:	4770      	bx	lr
    f584:	2002      	movs	r0, #2
    f586:	4770      	bx	lr
    f588:	2007      	movs	r0, #7
    f58a:	4770      	bx	lr
    f58c:	01cdcdcd 	.word	0x01cdcdcd

0000f590 <am_hal_cmdq_get_status>:
    f590:	2800      	cmp	r0, #0
    f592:	d04b      	beq.n	f62c <am_hal_cmdq_get_status+0x9c>
    f594:	b570      	push	{r4, r5, r6, lr}
    f596:	6803      	ldr	r3, [r0, #0]
    f598:	4a25      	ldr	r2, [pc, #148]	; (f630 <am_hal_cmdq_get_status+0xa0>)
    f59a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f59e:	4293      	cmp	r3, r2
    f5a0:	b082      	sub	sp, #8
    f5a2:	4604      	mov	r4, r0
    f5a4:	d13c      	bne.n	f620 <am_hal_cmdq_get_status+0x90>
    f5a6:	460d      	mov	r5, r1
    f5a8:	2900      	cmp	r1, #0
    f5aa:	d03c      	beq.n	f626 <am_hal_cmdq_get_status+0x96>
    f5ac:	f7fe fe9c 	bl	e2e8 <am_hal_interrupt_master_disable>
    f5b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
    f5b2:	9001      	str	r0, [sp, #4]
    f5b4:	68b3      	ldr	r3, [r6, #8]
    f5b6:	6a22      	ldr	r2, [r4, #32]
    f5b8:	6819      	ldr	r1, [r3, #0]
    f5ba:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
    f5be:	b2c9      	uxtb	r1, r1
    f5c0:	430b      	orrs	r3, r1
    f5c2:	1ad2      	subs	r2, r2, r3
    f5c4:	2a00      	cmp	r2, #0
    f5c6:	bfb8      	it	lt
    f5c8:	f5a3 7380 	sublt.w	r3, r3, #256	; 0x100
    f5cc:	61e3      	str	r3, [r4, #28]
    f5ce:	6873      	ldr	r3, [r6, #4]
    f5d0:	681b      	ldr	r3, [r3, #0]
    f5d2:	60e3      	str	r3, [r4, #12]
    f5d4:	9801      	ldr	r0, [sp, #4]
    f5d6:	f7fe fe8b 	bl	e2f0 <am_hal_interrupt_master_set>
    f5da:	e9d4 0604 	ldrd	r0, r6, [r4, #16]
    f5de:	6a22      	ldr	r2, [r4, #32]
    f5e0:	69e3      	ldr	r3, [r4, #28]
    f5e2:	602b      	str	r3, [r5, #0]
    f5e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f5e6:	4286      	cmp	r6, r0
    f5e8:	bf0c      	ite	eq
    f5ea:	4611      	moveq	r1, r2
    f5ec:	1e51      	subne	r1, r2, #1
    f5ee:	e9c5 1201 	strd	r1, r2, [r5, #4]
    f5f2:	e9d3 2006 	ldrd	r2, r0, [r3, #24]
    f5f6:	e9d3 3108 	ldrd	r3, r1, [r3, #32]
    f5fa:	6812      	ldr	r2, [r2, #0]
    f5fc:	4202      	tst	r2, r0
    f5fe:	bf14      	ite	ne
    f600:	2001      	movne	r0, #1
    f602:	2000      	moveq	r0, #0
    f604:	420a      	tst	r2, r1
    f606:	bf14      	ite	ne
    f608:	2101      	movne	r1, #1
    f60a:	2100      	moveq	r1, #0
    f60c:	421a      	tst	r2, r3
    f60e:	bf14      	ite	ne
    f610:	2301      	movne	r3, #1
    f612:	2300      	moveq	r3, #0
    f614:	7328      	strb	r0, [r5, #12]
    f616:	2000      	movs	r0, #0
    f618:	7369      	strb	r1, [r5, #13]
    f61a:	73ab      	strb	r3, [r5, #14]
    f61c:	b002      	add	sp, #8
    f61e:	bd70      	pop	{r4, r5, r6, pc}
    f620:	2002      	movs	r0, #2
    f622:	b002      	add	sp, #8
    f624:	bd70      	pop	{r4, r5, r6, pc}
    f626:	2006      	movs	r0, #6
    f628:	b002      	add	sp, #8
    f62a:	bd70      	pop	{r4, r5, r6, pc}
    f62c:	2002      	movs	r0, #2
    f62e:	4770      	bx	lr
    f630:	01cdcdcd 	.word	0x01cdcdcd

0000f634 <am_hal_cmdq_term>:
    f634:	2800      	cmp	r0, #0
    f636:	d03d      	beq.n	f6b4 <am_hal_cmdq_term+0x80>
    f638:	b570      	push	{r4, r5, r6, lr}
    f63a:	6803      	ldr	r3, [r0, #0]
    f63c:	4a1e      	ldr	r2, [pc, #120]	; (f6b8 <am_hal_cmdq_term+0x84>)
    f63e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f642:	4293      	cmp	r3, r2
    f644:	b082      	sub	sp, #8
    f646:	4604      	mov	r4, r0
    f648:	d002      	beq.n	f650 <am_hal_cmdq_term+0x1c>
    f64a:	2002      	movs	r0, #2
    f64c:	b002      	add	sp, #8
    f64e:	bd70      	pop	{r4, r5, r6, pc}
    f650:	460d      	mov	r5, r1
    f652:	f7fe fe49 	bl	e2e8 <am_hal_interrupt_master_disable>
    f656:	6a66      	ldr	r6, [r4, #36]	; 0x24
    f658:	9001      	str	r0, [sp, #4]
    f65a:	68b3      	ldr	r3, [r6, #8]
    f65c:	6a22      	ldr	r2, [r4, #32]
    f65e:	6819      	ldr	r1, [r3, #0]
    f660:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
    f664:	b2c9      	uxtb	r1, r1
    f666:	430b      	orrs	r3, r1
    f668:	1ad2      	subs	r2, r2, r3
    f66a:	2a00      	cmp	r2, #0
    f66c:	bfb8      	it	lt
    f66e:	f5a3 7380 	sublt.w	r3, r3, #256	; 0x100
    f672:	61e3      	str	r3, [r4, #28]
    f674:	6873      	ldr	r3, [r6, #4]
    f676:	681b      	ldr	r3, [r3, #0]
    f678:	60e3      	str	r3, [r4, #12]
    f67a:	9801      	ldr	r0, [sp, #4]
    f67c:	f7fe fe38 	bl	e2f0 <am_hal_interrupt_master_set>
    f680:	b91d      	cbnz	r5, f68a <am_hal_cmdq_term+0x56>
    f682:	e9d4 2307 	ldrd	r2, r3, [r4, #28]
    f686:	429a      	cmp	r2, r3
    f688:	d112      	bne.n	f6b0 <am_hal_cmdq_term+0x7c>
    f68a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    f68c:	78e3      	ldrb	r3, [r4, #3]
    f68e:	6810      	ldr	r0, [r2, #0]
    f690:	6911      	ldr	r1, [r2, #16]
    f692:	f36f 0300 	bfc	r3, #0, #1
    f696:	70e3      	strb	r3, [r4, #3]
    f698:	6803      	ldr	r3, [r0, #0]
    f69a:	f023 0301 	bic.w	r3, r3, #1
    f69e:	6003      	str	r3, [r0, #0]
    f6a0:	680b      	ldr	r3, [r1, #0]
    f6a2:	6952      	ldr	r2, [r2, #20]
    f6a4:	2000      	movs	r0, #0
    f6a6:	ea23 0302 	bic.w	r3, r3, r2
    f6aa:	600b      	str	r3, [r1, #0]
    f6ac:	b002      	add	sp, #8
    f6ae:	bd70      	pop	{r4, r5, r6, pc}
    f6b0:	2003      	movs	r0, #3
    f6b2:	e7cb      	b.n	f64c <am_hal_cmdq_term+0x18>
    f6b4:	2002      	movs	r0, #2
    f6b6:	4770      	bx	lr
    f6b8:	01cdcdcd 	.word	0x01cdcdcd

0000f6bc <am_hal_cmdq_error_resume>:
    f6bc:	2800      	cmp	r0, #0
    f6be:	d03c      	beq.n	f73a <am_hal_cmdq_error_resume+0x7e>
    f6c0:	6803      	ldr	r3, [r0, #0]
    f6c2:	4a20      	ldr	r2, [pc, #128]	; (f744 <am_hal_cmdq_error_resume+0x88>)
    f6c4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f6c8:	4293      	cmp	r3, r2
    f6ca:	4684      	mov	ip, r0
    f6cc:	d135      	bne.n	f73a <am_hal_cmdq_error_resume+0x7e>
    f6ce:	78c0      	ldrb	r0, [r0, #3]
    f6d0:	f010 0002 	ands.w	r0, r0, #2
    f6d4:	d030      	beq.n	f738 <am_hal_cmdq_error_resume+0x7c>
    f6d6:	f8dc 2024 	ldr.w	r2, [ip, #36]	; 0x24
    f6da:	e9d2 1000 	ldrd	r1, r0, [r2]
    f6de:	680b      	ldr	r3, [r1, #0]
    f6e0:	f023 0301 	bic.w	r3, r3, #1
    f6e4:	b430      	push	{r4, r5}
    f6e6:	6894      	ldr	r4, [r2, #8]
    f6e8:	600b      	str	r3, [r1, #0]
    f6ea:	6805      	ldr	r5, [r0, #0]
    f6ec:	682b      	ldr	r3, [r5, #0]
    f6ee:	f023 0101 	bic.w	r1, r3, #1
    f6f2:	42a1      	cmp	r1, r4
    f6f4:	462a      	mov	r2, r5
    f6f6:	d022      	beq.n	f73e <am_hal_cmdq_error_resume+0x82>
    f6f8:	4298      	cmp	r0, r3
    f6fa:	f102 0108 	add.w	r1, r2, #8
    f6fe:	d009      	beq.n	f714 <am_hal_cmdq_error_resume+0x58>
    f700:	6893      	ldr	r3, [r2, #8]
    f702:	f023 0201 	bic.w	r2, r3, #1
    f706:	42a2      	cmp	r2, r4
    f708:	d00a      	beq.n	f720 <am_hal_cmdq_error_resume+0x64>
    f70a:	460a      	mov	r2, r1
    f70c:	4298      	cmp	r0, r3
    f70e:	f102 0108 	add.w	r1, r2, #8
    f712:	d1f5      	bne.n	f700 <am_hal_cmdq_error_resume+0x44>
    f714:	6851      	ldr	r1, [r2, #4]
    f716:	680b      	ldr	r3, [r1, #0]
    f718:	f023 0201 	bic.w	r2, r3, #1
    f71c:	42a2      	cmp	r2, r4
    f71e:	d1f4      	bne.n	f70a <am_hal_cmdq_error_resume+0x4e>
    f720:	460d      	mov	r5, r1
    f722:	600c      	str	r4, [r1, #0]
    f724:	6005      	str	r5, [r0, #0]
    f726:	f89c 3003 	ldrb.w	r3, [ip, #3]
    f72a:	f36f 0341 	bfc	r3, #1, #1
    f72e:	2000      	movs	r0, #0
    f730:	bc30      	pop	{r4, r5}
    f732:	f88c 3003 	strb.w	r3, [ip, #3]
    f736:	4770      	bx	lr
    f738:	4770      	bx	lr
    f73a:	2002      	movs	r0, #2
    f73c:	4770      	bx	lr
    f73e:	4629      	mov	r1, r5
    f740:	e7ef      	b.n	f722 <am_hal_cmdq_error_resume+0x66>
    f742:	bf00      	nop
    f744:	01cdcdcd 	.word	0x01cdcdcd

0000f748 <am_bsp_low_power_init>:
    f748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f74a:	f7ff fcd7 	bl	f0fc <am_hal_pwrctrl_low_power_init>
    f74e:	f000 fa87 	bl	fc60 <am_hal_rtc_osc_disable>
    f752:	4b0b      	ldr	r3, [pc, #44]	; (f780 <am_bsp_low_power_init+0x38>)
    f754:	4f0b      	ldr	r7, [pc, #44]	; (f784 <am_bsp_low_power_init+0x3c>)
    f756:	681e      	ldr	r6, [r3, #0]
    f758:	2400      	movs	r4, #0
    f75a:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    f75e:	4631      	mov	r1, r6
    f760:	4628      	mov	r0, r5
    f762:	f7fe fb59 	bl	de18 <am_hal_gpio_pinconfig>
    f766:	2103      	movs	r1, #3
    f768:	4628      	mov	r0, r5
    f76a:	f7fe fc8b 	bl	e084 <am_hal_gpio_state_write>
    f76e:	3401      	adds	r4, #1
    f770:	2100      	movs	r1, #0
    f772:	4628      	mov	r0, r5
    f774:	f7fe fc86 	bl	e084 <am_hal_gpio_state_write>
    f778:	2c05      	cmp	r4, #5
    f77a:	d1ee      	bne.n	f75a <am_bsp_low_power_init+0x12>
    f77c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f77e:	bf00      	nop
    f780:	00011c3c 	.word	0x00011c3c
    f784:	10001034 	.word	0x10001034

0000f788 <am_bsp_itm_printf_enable>:
    f788:	b500      	push	{lr}
    f78a:	4b0b      	ldr	r3, [pc, #44]	; (f7b8 <am_bsp_itm_printf_enable+0x30>)
    f78c:	b087      	sub	sp, #28
    f78e:	2201      	movs	r2, #1
    f790:	601a      	str	r2, [r3, #0]
    f792:	f000 fa29 	bl	fbe8 <am_hal_itm_enable>
    f796:	4b09      	ldr	r3, [pc, #36]	; (f7bc <am_bsp_itm_printf_enable+0x34>)
    f798:	9301      	str	r3, [sp, #4]
    f79a:	a801      	add	r0, sp, #4
    f79c:	f000 fa6a 	bl	fc74 <am_hal_tpiu_enable>
    f7a0:	4b07      	ldr	r3, [pc, #28]	; (f7c0 <am_bsp_itm_printf_enable+0x38>)
    f7a2:	2029      	movs	r0, #41	; 0x29
    f7a4:	6819      	ldr	r1, [r3, #0]
    f7a6:	f7fe fb37 	bl	de18 <am_hal_gpio_pinconfig>
    f7aa:	4806      	ldr	r0, [pc, #24]	; (f7c4 <am_bsp_itm_printf_enable+0x3c>)
    f7ac:	f7fd f99a 	bl	cae4 <am_util_stdio_printf_init>
    f7b0:	b007      	add	sp, #28
    f7b2:	f85d fb04 	ldr.w	pc, [sp], #4
    f7b6:	bf00      	nop
    f7b8:	10005930 	.word	0x10005930
    f7bc:	000f4240 	.word	0x000f4240
    f7c0:	00012028 	.word	0x00012028
    f7c4:	0000fc31 	.word	0x0000fc31

0000f7c8 <am_bsp_iom_pins_enable>:
    f7c8:	2805      	cmp	r0, #5
    f7ca:	f200 80ea 	bhi.w	f9a2 <am_bsp_iom_pins_enable+0x1da>
    f7ce:	ea41 0180 	orr.w	r1, r1, r0, lsl #2
    f7d2:	b508      	push	{r3, lr}
    f7d4:	2915      	cmp	r1, #21
    f7d6:	d817      	bhi.n	f808 <am_bsp_iom_pins_enable+0x40>
    f7d8:	e8df f011 	tbh	[pc, r1, lsl #1]
    f7dc:	00390023 	.word	0x00390023
    f7e0:	00160016 	.word	0x00160016
    f7e4:	005b0045 	.word	0x005b0045
    f7e8:	00160016 	.word	0x00160016
    f7ec:	007d0067 	.word	0x007d0067
    f7f0:	00160016 	.word	0x00160016
    f7f4:	009f0089 	.word	0x009f0089
    f7f8:	00160016 	.word	0x00160016
    f7fc:	00c100ab 	.word	0x00c100ab
    f800:	00160016 	.word	0x00160016
    f804:	001700cd 	.word	0x001700cd
    f808:	bd08      	pop	{r3, pc}
    f80a:	4b66      	ldr	r3, [pc, #408]	; (f9a4 <am_bsp_iom_pins_enable+0x1dc>)
    f80c:	2030      	movs	r0, #48	; 0x30
    f80e:	6819      	ldr	r1, [r3, #0]
    f810:	f7fe fb02 	bl	de18 <am_hal_gpio_pinconfig>
    f814:	4b64      	ldr	r3, [pc, #400]	; (f9a8 <am_bsp_iom_pins_enable+0x1e0>)
    f816:	2031      	movs	r0, #49	; 0x31
    f818:	6819      	ldr	r1, [r3, #0]
    f81a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f81e:	f7fe bafb 	b.w	de18 <am_hal_gpio_pinconfig>
    f822:	4b62      	ldr	r3, [pc, #392]	; (f9ac <am_bsp_iom_pins_enable+0x1e4>)
    f824:	2005      	movs	r0, #5
    f826:	6819      	ldr	r1, [r3, #0]
    f828:	f7fe faf6 	bl	de18 <am_hal_gpio_pinconfig>
    f82c:	4b60      	ldr	r3, [pc, #384]	; (f9b0 <am_bsp_iom_pins_enable+0x1e8>)
    f82e:	2006      	movs	r0, #6
    f830:	6819      	ldr	r1, [r3, #0]
    f832:	f7fe faf1 	bl	de18 <am_hal_gpio_pinconfig>
    f836:	4b5f      	ldr	r3, [pc, #380]	; (f9b4 <am_bsp_iom_pins_enable+0x1ec>)
    f838:	2007      	movs	r0, #7
    f83a:	6819      	ldr	r1, [r3, #0]
    f83c:	f7fe faec 	bl	de18 <am_hal_gpio_pinconfig>
    f840:	4b5d      	ldr	r3, [pc, #372]	; (f9b8 <am_bsp_iom_pins_enable+0x1f0>)
    f842:	200b      	movs	r0, #11
    f844:	6819      	ldr	r1, [r3, #0]
    f846:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f84a:	f7fe bae5 	b.w	de18 <am_hal_gpio_pinconfig>
    f84e:	4b5b      	ldr	r3, [pc, #364]	; (f9bc <am_bsp_iom_pins_enable+0x1f4>)
    f850:	2005      	movs	r0, #5
    f852:	6819      	ldr	r1, [r3, #0]
    f854:	f7fe fae0 	bl	de18 <am_hal_gpio_pinconfig>
    f858:	4b59      	ldr	r3, [pc, #356]	; (f9c0 <am_bsp_iom_pins_enable+0x1f8>)
    f85a:	2006      	movs	r0, #6
    f85c:	6819      	ldr	r1, [r3, #0]
    f85e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f862:	f7fe bad9 	b.w	de18 <am_hal_gpio_pinconfig>
    f866:	4b57      	ldr	r3, [pc, #348]	; (f9c4 <am_bsp_iom_pins_enable+0x1fc>)
    f868:	2008      	movs	r0, #8
    f86a:	6819      	ldr	r1, [r3, #0]
    f86c:	f7fe fad4 	bl	de18 <am_hal_gpio_pinconfig>
    f870:	4b55      	ldr	r3, [pc, #340]	; (f9c8 <am_bsp_iom_pins_enable+0x200>)
    f872:	2009      	movs	r0, #9
    f874:	6819      	ldr	r1, [r3, #0]
    f876:	f7fe facf 	bl	de18 <am_hal_gpio_pinconfig>
    f87a:	4b54      	ldr	r3, [pc, #336]	; (f9cc <am_bsp_iom_pins_enable+0x204>)
    f87c:	200a      	movs	r0, #10
    f87e:	6819      	ldr	r1, [r3, #0]
    f880:	f7fe faca 	bl	de18 <am_hal_gpio_pinconfig>
    f884:	4b52      	ldr	r3, [pc, #328]	; (f9d0 <am_bsp_iom_pins_enable+0x208>)
    f886:	200e      	movs	r0, #14
    f888:	6819      	ldr	r1, [r3, #0]
    f88a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f88e:	f7fe bac3 	b.w	de18 <am_hal_gpio_pinconfig>
    f892:	4b50      	ldr	r3, [pc, #320]	; (f9d4 <am_bsp_iom_pins_enable+0x20c>)
    f894:	2008      	movs	r0, #8
    f896:	6819      	ldr	r1, [r3, #0]
    f898:	f7fe fabe 	bl	de18 <am_hal_gpio_pinconfig>
    f89c:	4b4e      	ldr	r3, [pc, #312]	; (f9d8 <am_bsp_iom_pins_enable+0x210>)
    f89e:	2009      	movs	r0, #9
    f8a0:	6819      	ldr	r1, [r3, #0]
    f8a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f8a6:	f7fe bab7 	b.w	de18 <am_hal_gpio_pinconfig>
    f8aa:	4b4c      	ldr	r3, [pc, #304]	; (f9dc <am_bsp_iom_pins_enable+0x214>)
    f8ac:	201b      	movs	r0, #27
    f8ae:	6819      	ldr	r1, [r3, #0]
    f8b0:	f7fe fab2 	bl	de18 <am_hal_gpio_pinconfig>
    f8b4:	4b4a      	ldr	r3, [pc, #296]	; (f9e0 <am_bsp_iom_pins_enable+0x218>)
    f8b6:	2019      	movs	r0, #25
    f8b8:	6819      	ldr	r1, [r3, #0]
    f8ba:	f7fe faad 	bl	de18 <am_hal_gpio_pinconfig>
    f8be:	4b49      	ldr	r3, [pc, #292]	; (f9e4 <am_bsp_iom_pins_enable+0x21c>)
    f8c0:	201c      	movs	r0, #28
    f8c2:	6819      	ldr	r1, [r3, #0]
    f8c4:	f7fe faa8 	bl	de18 <am_hal_gpio_pinconfig>
    f8c8:	4b47      	ldr	r3, [pc, #284]	; (f9e8 <am_bsp_iom_pins_enable+0x220>)
    f8ca:	200f      	movs	r0, #15
    f8cc:	6819      	ldr	r1, [r3, #0]
    f8ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f8d2:	f7fe baa1 	b.w	de18 <am_hal_gpio_pinconfig>
    f8d6:	4b45      	ldr	r3, [pc, #276]	; (f9ec <am_bsp_iom_pins_enable+0x224>)
    f8d8:	201b      	movs	r0, #27
    f8da:	6819      	ldr	r1, [r3, #0]
    f8dc:	f7fe fa9c 	bl	de18 <am_hal_gpio_pinconfig>
    f8e0:	4b43      	ldr	r3, [pc, #268]	; (f9f0 <am_bsp_iom_pins_enable+0x228>)
    f8e2:	2019      	movs	r0, #25
    f8e4:	6819      	ldr	r1, [r3, #0]
    f8e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f8ea:	f7fe ba95 	b.w	de18 <am_hal_gpio_pinconfig>
    f8ee:	4b41      	ldr	r3, [pc, #260]	; (f9f4 <am_bsp_iom_pins_enable+0x22c>)
    f8f0:	202a      	movs	r0, #42	; 0x2a
    f8f2:	6819      	ldr	r1, [r3, #0]
    f8f4:	f7fe fa90 	bl	de18 <am_hal_gpio_pinconfig>
    f8f8:	4b3f      	ldr	r3, [pc, #252]	; (f9f8 <am_bsp_iom_pins_enable+0x230>)
    f8fa:	202b      	movs	r0, #43	; 0x2b
    f8fc:	6819      	ldr	r1, [r3, #0]
    f8fe:	f7fe fa8b 	bl	de18 <am_hal_gpio_pinconfig>
    f902:	4b3e      	ldr	r3, [pc, #248]	; (f9fc <am_bsp_iom_pins_enable+0x234>)
    f904:	2026      	movs	r0, #38	; 0x26
    f906:	6819      	ldr	r1, [r3, #0]
    f908:	f7fe fa86 	bl	de18 <am_hal_gpio_pinconfig>
    f90c:	4b3c      	ldr	r3, [pc, #240]	; (fa00 <am_bsp_iom_pins_enable+0x238>)
    f90e:	200c      	movs	r0, #12
    f910:	6819      	ldr	r1, [r3, #0]
    f912:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f916:	f7fe ba7f 	b.w	de18 <am_hal_gpio_pinconfig>
    f91a:	4b3a      	ldr	r3, [pc, #232]	; (fa04 <am_bsp_iom_pins_enable+0x23c>)
    f91c:	202a      	movs	r0, #42	; 0x2a
    f91e:	6819      	ldr	r1, [r3, #0]
    f920:	f7fe fa7a 	bl	de18 <am_hal_gpio_pinconfig>
    f924:	4b38      	ldr	r3, [pc, #224]	; (fa08 <am_bsp_iom_pins_enable+0x240>)
    f926:	202b      	movs	r0, #43	; 0x2b
    f928:	6819      	ldr	r1, [r3, #0]
    f92a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f92e:	f7fe ba73 	b.w	de18 <am_hal_gpio_pinconfig>
    f932:	4b36      	ldr	r3, [pc, #216]	; (fa0c <am_bsp_iom_pins_enable+0x244>)
    f934:	2027      	movs	r0, #39	; 0x27
    f936:	6819      	ldr	r1, [r3, #0]
    f938:	f7fe fa6e 	bl	de18 <am_hal_gpio_pinconfig>
    f93c:	4b34      	ldr	r3, [pc, #208]	; (fa10 <am_bsp_iom_pins_enable+0x248>)
    f93e:	2028      	movs	r0, #40	; 0x28
    f940:	6819      	ldr	r1, [r3, #0]
    f942:	f7fe fa69 	bl	de18 <am_hal_gpio_pinconfig>
    f946:	4b33      	ldr	r3, [pc, #204]	; (fa14 <am_bsp_iom_pins_enable+0x24c>)
    f948:	202c      	movs	r0, #44	; 0x2c
    f94a:	6819      	ldr	r1, [r3, #0]
    f94c:	f7fe fa64 	bl	de18 <am_hal_gpio_pinconfig>
    f950:	4b31      	ldr	r3, [pc, #196]	; (fa18 <am_bsp_iom_pins_enable+0x250>)
    f952:	200d      	movs	r0, #13
    f954:	6819      	ldr	r1, [r3, #0]
    f956:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f95a:	f7fe ba5d 	b.w	de18 <am_hal_gpio_pinconfig>
    f95e:	4b2f      	ldr	r3, [pc, #188]	; (fa1c <am_bsp_iom_pins_enable+0x254>)
    f960:	2027      	movs	r0, #39	; 0x27
    f962:	6819      	ldr	r1, [r3, #0]
    f964:	f7fe fa58 	bl	de18 <am_hal_gpio_pinconfig>
    f968:	4b2d      	ldr	r3, [pc, #180]	; (fa20 <am_bsp_iom_pins_enable+0x258>)
    f96a:	2028      	movs	r0, #40	; 0x28
    f96c:	6819      	ldr	r1, [r3, #0]
    f96e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f972:	f7fe ba51 	b.w	de18 <am_hal_gpio_pinconfig>
    f976:	4b2b      	ldr	r3, [pc, #172]	; (fa24 <am_bsp_iom_pins_enable+0x25c>)
    f978:	2030      	movs	r0, #48	; 0x30
    f97a:	6819      	ldr	r1, [r3, #0]
    f97c:	f7fe fa4c 	bl	de18 <am_hal_gpio_pinconfig>
    f980:	4b29      	ldr	r3, [pc, #164]	; (fa28 <am_bsp_iom_pins_enable+0x260>)
    f982:	2031      	movs	r0, #49	; 0x31
    f984:	6819      	ldr	r1, [r3, #0]
    f986:	f7fe fa47 	bl	de18 <am_hal_gpio_pinconfig>
    f98a:	4b28      	ldr	r3, [pc, #160]	; (fa2c <am_bsp_iom_pins_enable+0x264>)
    f98c:	202f      	movs	r0, #47	; 0x2f
    f98e:	6819      	ldr	r1, [r3, #0]
    f990:	f7fe fa42 	bl	de18 <am_hal_gpio_pinconfig>
    f994:	4b26      	ldr	r3, [pc, #152]	; (fa30 <am_bsp_iom_pins_enable+0x268>)
    f996:	2010      	movs	r0, #16
    f998:	6819      	ldr	r1, [r3, #0]
    f99a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f99e:	f7fe ba3b 	b.w	de18 <am_hal_gpio_pinconfig>
    f9a2:	4770      	bx	lr
    f9a4:	00012020 	.word	0x00012020
    f9a8:	00012024 	.word	0x00012024
    f9ac:	00011fa4 	.word	0x00011fa4
    f9b0:	00011f9c 	.word	0x00011f9c
    f9b4:	00011fa0 	.word	0x00011fa0
    f9b8:	00011f98 	.word	0x00011f98
    f9bc:	00011fa8 	.word	0x00011fa8
    f9c0:	00011fac 	.word	0x00011fac
    f9c4:	00011fbc 	.word	0x00011fbc
    f9c8:	00011fb4 	.word	0x00011fb4
    f9cc:	00011fb8 	.word	0x00011fb8
    f9d0:	00011fb0 	.word	0x00011fb0
    f9d4:	00011fc0 	.word	0x00011fc0
    f9d8:	00011fc4 	.word	0x00011fc4
    f9dc:	00011fd4 	.word	0x00011fd4
    f9e0:	00011fcc 	.word	0x00011fcc
    f9e4:	00011fd0 	.word	0x00011fd0
    f9e8:	00011fc8 	.word	0x00011fc8
    f9ec:	00011fd8 	.word	0x00011fd8
    f9f0:	00011fdc 	.word	0x00011fdc
    f9f4:	00011fec 	.word	0x00011fec
    f9f8:	00011fe4 	.word	0x00011fe4
    f9fc:	00011fe8 	.word	0x00011fe8
    fa00:	00011fe0 	.word	0x00011fe0
    fa04:	00011ff0 	.word	0x00011ff0
    fa08:	00011ff4 	.word	0x00011ff4
    fa0c:	00012004 	.word	0x00012004
    fa10:	00011ffc 	.word	0x00011ffc
    fa14:	00012000 	.word	0x00012000
    fa18:	00011ff8 	.word	0x00011ff8
    fa1c:	00012008 	.word	0x00012008
    fa20:	0001200c 	.word	0x0001200c
    fa24:	0001201c 	.word	0x0001201c
    fa28:	00012014 	.word	0x00012014
    fa2c:	00012018 	.word	0x00012018
    fa30:	00012010 	.word	0x00012010

0000fa34 <am_bsp_iom_pins_disable>:
    fa34:	2805      	cmp	r0, #5
    fa36:	f200 80d3 	bhi.w	fbe0 <am_bsp_iom_pins_disable+0x1ac>
    fa3a:	ea41 0180 	orr.w	r1, r1, r0, lsl #2
    fa3e:	b510      	push	{r4, lr}
    fa40:	2915      	cmp	r1, #21
    fa42:	d80c      	bhi.n	fa5e <am_bsp_iom_pins_disable+0x2a>
    fa44:	e8df f001 	tbb	[pc, r1]
    fa48:	0b0b2c18 	.word	0x0b0b2c18
    fa4c:	0b0b4c38 	.word	0x0b0b4c38
    fa50:	0b0b6c58 	.word	0x0b0b6c58
    fa54:	0b0b8c78 	.word	0x0b0b8c78
    fa58:	0b0bac98 	.word	0x0b0bac98
    fa5c:	0cb8      	.short	0x0cb8
    fa5e:	bd10      	pop	{r4, pc}
    fa60:	4b60      	ldr	r3, [pc, #384]	; (fbe4 <am_bsp_iom_pins_disable+0x1b0>)
    fa62:	681c      	ldr	r4, [r3, #0]
    fa64:	2030      	movs	r0, #48	; 0x30
    fa66:	4621      	mov	r1, r4
    fa68:	f7fe f9d6 	bl	de18 <am_hal_gpio_pinconfig>
    fa6c:	4621      	mov	r1, r4
    fa6e:	2031      	movs	r0, #49	; 0x31
    fa70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fa74:	f7fe b9d0 	b.w	de18 <am_hal_gpio_pinconfig>
    fa78:	4b5a      	ldr	r3, [pc, #360]	; (fbe4 <am_bsp_iom_pins_disable+0x1b0>)
    fa7a:	681c      	ldr	r4, [r3, #0]
    fa7c:	2005      	movs	r0, #5
    fa7e:	4621      	mov	r1, r4
    fa80:	f7fe f9ca 	bl	de18 <am_hal_gpio_pinconfig>
    fa84:	4621      	mov	r1, r4
    fa86:	2006      	movs	r0, #6
    fa88:	f7fe f9c6 	bl	de18 <am_hal_gpio_pinconfig>
    fa8c:	4621      	mov	r1, r4
    fa8e:	2007      	movs	r0, #7
    fa90:	f7fe f9c2 	bl	de18 <am_hal_gpio_pinconfig>
    fa94:	4621      	mov	r1, r4
    fa96:	200b      	movs	r0, #11
    fa98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fa9c:	f7fe b9bc 	b.w	de18 <am_hal_gpio_pinconfig>
    faa0:	4b50      	ldr	r3, [pc, #320]	; (fbe4 <am_bsp_iom_pins_disable+0x1b0>)
    faa2:	681c      	ldr	r4, [r3, #0]
    faa4:	2005      	movs	r0, #5
    faa6:	4621      	mov	r1, r4
    faa8:	f7fe f9b6 	bl	de18 <am_hal_gpio_pinconfig>
    faac:	4621      	mov	r1, r4
    faae:	2006      	movs	r0, #6
    fab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fab4:	f7fe b9b0 	b.w	de18 <am_hal_gpio_pinconfig>
    fab8:	4b4a      	ldr	r3, [pc, #296]	; (fbe4 <am_bsp_iom_pins_disable+0x1b0>)
    faba:	681c      	ldr	r4, [r3, #0]
    fabc:	2008      	movs	r0, #8
    fabe:	4621      	mov	r1, r4
    fac0:	f7fe f9aa 	bl	de18 <am_hal_gpio_pinconfig>
    fac4:	4621      	mov	r1, r4
    fac6:	2009      	movs	r0, #9
    fac8:	f7fe f9a6 	bl	de18 <am_hal_gpio_pinconfig>
    facc:	4621      	mov	r1, r4
    face:	200a      	movs	r0, #10
    fad0:	f7fe f9a2 	bl	de18 <am_hal_gpio_pinconfig>
    fad4:	4621      	mov	r1, r4
    fad6:	200e      	movs	r0, #14
    fad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fadc:	f7fe b99c 	b.w	de18 <am_hal_gpio_pinconfig>
    fae0:	4b40      	ldr	r3, [pc, #256]	; (fbe4 <am_bsp_iom_pins_disable+0x1b0>)
    fae2:	681c      	ldr	r4, [r3, #0]
    fae4:	2008      	movs	r0, #8
    fae6:	4621      	mov	r1, r4
    fae8:	f7fe f996 	bl	de18 <am_hal_gpio_pinconfig>
    faec:	4621      	mov	r1, r4
    faee:	2009      	movs	r0, #9
    faf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    faf4:	f7fe b990 	b.w	de18 <am_hal_gpio_pinconfig>
    faf8:	4b3a      	ldr	r3, [pc, #232]	; (fbe4 <am_bsp_iom_pins_disable+0x1b0>)
    fafa:	681c      	ldr	r4, [r3, #0]
    fafc:	201b      	movs	r0, #27
    fafe:	4621      	mov	r1, r4
    fb00:	f7fe f98a 	bl	de18 <am_hal_gpio_pinconfig>
    fb04:	4621      	mov	r1, r4
    fb06:	2019      	movs	r0, #25
    fb08:	f7fe f986 	bl	de18 <am_hal_gpio_pinconfig>
    fb0c:	4621      	mov	r1, r4
    fb0e:	201c      	movs	r0, #28
    fb10:	f7fe f982 	bl	de18 <am_hal_gpio_pinconfig>
    fb14:	4621      	mov	r1, r4
    fb16:	200f      	movs	r0, #15
    fb18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fb1c:	f7fe b97c 	b.w	de18 <am_hal_gpio_pinconfig>
    fb20:	4b30      	ldr	r3, [pc, #192]	; (fbe4 <am_bsp_iom_pins_disable+0x1b0>)
    fb22:	681c      	ldr	r4, [r3, #0]
    fb24:	201b      	movs	r0, #27
    fb26:	4621      	mov	r1, r4
    fb28:	f7fe f976 	bl	de18 <am_hal_gpio_pinconfig>
    fb2c:	4621      	mov	r1, r4
    fb2e:	2019      	movs	r0, #25
    fb30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fb34:	f7fe b970 	b.w	de18 <am_hal_gpio_pinconfig>
    fb38:	4b2a      	ldr	r3, [pc, #168]	; (fbe4 <am_bsp_iom_pins_disable+0x1b0>)
    fb3a:	681c      	ldr	r4, [r3, #0]
    fb3c:	202a      	movs	r0, #42	; 0x2a
    fb3e:	4621      	mov	r1, r4
    fb40:	f7fe f96a 	bl	de18 <am_hal_gpio_pinconfig>
    fb44:	4621      	mov	r1, r4
    fb46:	202b      	movs	r0, #43	; 0x2b
    fb48:	f7fe f966 	bl	de18 <am_hal_gpio_pinconfig>
    fb4c:	4621      	mov	r1, r4
    fb4e:	2026      	movs	r0, #38	; 0x26
    fb50:	f7fe f962 	bl	de18 <am_hal_gpio_pinconfig>
    fb54:	4621      	mov	r1, r4
    fb56:	200c      	movs	r0, #12
    fb58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fb5c:	f7fe b95c 	b.w	de18 <am_hal_gpio_pinconfig>
    fb60:	4b20      	ldr	r3, [pc, #128]	; (fbe4 <am_bsp_iom_pins_disable+0x1b0>)
    fb62:	681c      	ldr	r4, [r3, #0]
    fb64:	202a      	movs	r0, #42	; 0x2a
    fb66:	4621      	mov	r1, r4
    fb68:	f7fe f956 	bl	de18 <am_hal_gpio_pinconfig>
    fb6c:	4621      	mov	r1, r4
    fb6e:	202b      	movs	r0, #43	; 0x2b
    fb70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fb74:	f7fe b950 	b.w	de18 <am_hal_gpio_pinconfig>
    fb78:	4b1a      	ldr	r3, [pc, #104]	; (fbe4 <am_bsp_iom_pins_disable+0x1b0>)
    fb7a:	681c      	ldr	r4, [r3, #0]
    fb7c:	2027      	movs	r0, #39	; 0x27
    fb7e:	4621      	mov	r1, r4
    fb80:	f7fe f94a 	bl	de18 <am_hal_gpio_pinconfig>
    fb84:	4621      	mov	r1, r4
    fb86:	2028      	movs	r0, #40	; 0x28
    fb88:	f7fe f946 	bl	de18 <am_hal_gpio_pinconfig>
    fb8c:	4621      	mov	r1, r4
    fb8e:	202c      	movs	r0, #44	; 0x2c
    fb90:	f7fe f942 	bl	de18 <am_hal_gpio_pinconfig>
    fb94:	4621      	mov	r1, r4
    fb96:	200d      	movs	r0, #13
    fb98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fb9c:	f7fe b93c 	b.w	de18 <am_hal_gpio_pinconfig>
    fba0:	4b10      	ldr	r3, [pc, #64]	; (fbe4 <am_bsp_iom_pins_disable+0x1b0>)
    fba2:	681c      	ldr	r4, [r3, #0]
    fba4:	2027      	movs	r0, #39	; 0x27
    fba6:	4621      	mov	r1, r4
    fba8:	f7fe f936 	bl	de18 <am_hal_gpio_pinconfig>
    fbac:	4621      	mov	r1, r4
    fbae:	2028      	movs	r0, #40	; 0x28
    fbb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fbb4:	f7fe b930 	b.w	de18 <am_hal_gpio_pinconfig>
    fbb8:	4b0a      	ldr	r3, [pc, #40]	; (fbe4 <am_bsp_iom_pins_disable+0x1b0>)
    fbba:	681c      	ldr	r4, [r3, #0]
    fbbc:	2030      	movs	r0, #48	; 0x30
    fbbe:	4621      	mov	r1, r4
    fbc0:	f7fe f92a 	bl	de18 <am_hal_gpio_pinconfig>
    fbc4:	4621      	mov	r1, r4
    fbc6:	2031      	movs	r0, #49	; 0x31
    fbc8:	f7fe f926 	bl	de18 <am_hal_gpio_pinconfig>
    fbcc:	4621      	mov	r1, r4
    fbce:	202f      	movs	r0, #47	; 0x2f
    fbd0:	f7fe f922 	bl	de18 <am_hal_gpio_pinconfig>
    fbd4:	4621      	mov	r1, r4
    fbd6:	2010      	movs	r0, #16
    fbd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fbdc:	f7fe b91c 	b.w	de18 <am_hal_gpio_pinconfig>
    fbe0:	4770      	bx	lr
    fbe2:	bf00      	nop
    fbe4:	00011c38 	.word	0x00011c38

0000fbe8 <am_hal_itm_enable>:
    fbe8:	4a0e      	ldr	r2, [pc, #56]	; (fc24 <am_hal_itm_enable+0x3c>)
    fbea:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    fbee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    fbf2:	b410      	push	{r4}
    fbf4:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    fbf8:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    fbfc:	01db      	lsls	r3, r3, #7
    fbfe:	d5fb      	bpl.n	fbf8 <am_hal_itm_enable+0x10>
    fc00:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    fc04:	4c08      	ldr	r4, [pc, #32]	; (fc28 <am_hal_itm_enable+0x40>)
    fc06:	4a09      	ldr	r2, [pc, #36]	; (fc2c <am_hal_itm_enable+0x44>)
    fc08:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    fc0c:	200f      	movs	r0, #15
    fc0e:	f04f 31ff 	mov.w	r1, #4294967295
    fc12:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    fc16:	f85d 4b04 	ldr.w	r4, [sp], #4
    fc1a:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    fc1e:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    fc22:	4770      	bx	lr
    fc24:	e000ed00 	.word	0xe000ed00
    fc28:	c5acce55 	.word	0xc5acce55
    fc2c:	00150511 	.word	0x00150511

0000fc30 <am_hal_itm_print>:
    fc30:	7803      	ldrb	r3, [r0, #0]
    fc32:	b1a3      	cbz	r3, fc5e <am_hal_itm_print+0x2e>
    fc34:	4603      	mov	r3, r0
    fc36:	f1c0 0c01 	rsb	ip, r0, #1
    fc3a:	eb0c 0103 	add.w	r1, ip, r3
    fc3e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    fc42:	2a00      	cmp	r2, #0
    fc44:	d1f9      	bne.n	fc3a <am_hal_itm_print+0xa>
    fc46:	4401      	add	r1, r0
    fc48:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    fc4c:	f810 cb01 	ldrb.w	ip, [r0], #1
    fc50:	6813      	ldr	r3, [r2, #0]
    fc52:	2b00      	cmp	r3, #0
    fc54:	d0fc      	beq.n	fc50 <am_hal_itm_print+0x20>
    fc56:	4288      	cmp	r0, r1
    fc58:	f882 c000 	strb.w	ip, [r2]
    fc5c:	d1f6      	bne.n	fc4c <am_hal_itm_print+0x1c>
    fc5e:	4770      	bx	lr

0000fc60 <am_hal_rtc_osc_disable>:
    fc60:	4a03      	ldr	r2, [pc, #12]	; (fc70 <am_hal_rtc_osc_disable+0x10>)
    fc62:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    fc66:	f043 0310 	orr.w	r3, r3, #16
    fc6a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    fc6e:	4770      	bx	lr
    fc70:	40004200 	.word	0x40004200

0000fc74 <am_hal_tpiu_enable>:
    fc74:	b510      	push	{r4, lr}
    fc76:	4b23      	ldr	r3, [pc, #140]	; (fd04 <am_hal_tpiu_enable+0x90>)
    fc78:	6804      	ldr	r4, [r0, #0]
    fc7a:	2200      	movs	r2, #0
    fc7c:	b084      	sub	sp, #16
    fc7e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    fc82:	b334      	cbz	r4, fcd2 <am_hal_tpiu_enable+0x5e>
    fc84:	4a20      	ldr	r2, [pc, #128]	; (fd08 <am_hal_tpiu_enable+0x94>)
    fc86:	4921      	ldr	r1, [pc, #132]	; (fd0c <am_hal_tpiu_enable+0x98>)
    fc88:	2001      	movs	r0, #1
    fc8a:	6058      	str	r0, [r3, #4]
    fc8c:	f5a4 4361 	sub.w	r3, r4, #57600	; 0xe100
    fc90:	a801      	add	r0, sp, #4
    fc92:	428b      	cmp	r3, r1
    fc94:	bf88      	it	hi
    fc96:	4614      	movhi	r4, r2
    fc98:	f7fe f850 	bl	dd3c <am_hal_clkgen_status_get>
    fc9c:	9b01      	ldr	r3, [sp, #4]
    fc9e:	1c5a      	adds	r2, r3, #1
    fca0:	d02d      	beq.n	fcfe <am_hal_tpiu_enable+0x8a>
    fca2:	08db      	lsrs	r3, r3, #3
    fca4:	fbb3 f4f4 	udiv	r4, r3, r4
    fca8:	3c01      	subs	r4, #1
    fcaa:	b2a4      	uxth	r4, r4
    fcac:	4b15      	ldr	r3, [pc, #84]	; (fd04 <am_hal_tpiu_enable+0x90>)
    fcae:	4a18      	ldr	r2, [pc, #96]	; (fd10 <am_hal_tpiu_enable+0x9c>)
    fcb0:	611c      	str	r4, [r3, #16]
    fcb2:	2102      	movs	r1, #2
    fcb4:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
    fcb8:	2000      	movs	r0, #0
    fcba:	f240 2101 	movw	r1, #513	; 0x201
    fcbe:	f8c3 0f00 	str.w	r0, [r3, #3840]	; 0xf00
    fcc2:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
    fcc6:	f44f 7048 	mov.w	r0, #800	; 0x320
    fcca:	f7fe f855 	bl	dd78 <am_hal_flash_delay>
    fcce:	b004      	add	sp, #16
    fcd0:	bd10      	pop	{r4, pc}
    fcd2:	6902      	ldr	r2, [r0, #16]
    fcd4:	611a      	str	r2, [r3, #16]
    fcd6:	6882      	ldr	r2, [r0, #8]
    fcd8:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    fcdc:	68c1      	ldr	r1, [r0, #12]
    fcde:	2201      	movs	r2, #1
    fce0:	3901      	subs	r1, #1
    fce2:	408a      	lsls	r2, r1
    fce4:	605a      	str	r2, [r3, #4]
    fce6:	f8c3 4f00 	str.w	r4, [r3, #3840]	; 0xf00
    fcea:	4a09      	ldr	r2, [pc, #36]	; (fd10 <am_hal_tpiu_enable+0x9c>)
    fcec:	6843      	ldr	r3, [r0, #4]
    fcee:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    fcf2:	f44f 7048 	mov.w	r0, #800	; 0x320
    fcf6:	f7fe f83f 	bl	dd78 <am_hal_flash_delay>
    fcfa:	b004      	add	sp, #16
    fcfc:	bd10      	pop	{r4, pc}
    fcfe:	2405      	movs	r4, #5
    fd00:	e7d4      	b.n	fcac <am_hal_tpiu_enable+0x38>
    fd02:	bf00      	nop
    fd04:	e0040000 	.word	0xe0040000
    fd08:	000f4240 	.word	0x000f4240
    fd0c:	001da380 	.word	0x001da380
    fd10:	40020000 	.word	0x40020000
    fd14:	6e6f7257 	.word	0x6e6f7257
    fd18:	61542067 	.word	0x61542067
    fd1c:	756e2067 	.word	0x756e2067
    fd20:	7265626d 	.word	0x7265626d
    fd24:	00000a21 	.word	0x00000a21
    fd28:	6e6f7257 	.word	0x6e6f7257
    fd2c:	61642067 	.word	0x61642067
    fd30:	6c206174 	.word	0x6c206174
    fd34:	74676e65 	.word	0x74676e65
    fd38:	000a2168 	.word	0x000a2168
    fd3c:	66667542 	.word	0x66667542
    fd40:	56207265 	.word	0x56207265
    fd44:	64696c61 	.word	0x64696c61
    fd48:	6f697461 	.word	0x6f697461
    fd4c:	6166206e 	.word	0x6166206e
    fd50:	64656c69 	.word	0x64656c69
    fd54:	3d694020 	.word	0x3d694020
    fd58:	52206425 	.word	0x52206425
    fd5c:	20647663 	.word	0x20647663
    fd60:	78257830 	.word	0x78257830
    fd64:	70784520 	.word	0x70784520
    fd68:	65746365 	.word	0x65746365
    fd6c:	78302064 	.word	0x78302064
    fd70:	000a7825 	.word	0x000a7825
    fd74:	20534f49 	.word	0x20534f49
    fd78:	74736554 	.word	0x74736554
    fd7c:	736f4820 	.word	0x736f4820
    fd80:	000a2e74 	.word	0x000a2e74
    fd84:	6e61480a 	.word	0x6e61480a
    fd88:	61687364 	.word	0x61687364
    fd8c:	7320656b 	.word	0x7320656b
    fd90:	65636375 	.word	0x65636375
    fd94:	0a217373 	.word	0x0a217373
    fd98:	00000000 	.word	0x00000000
    fd9c:	6174530a 	.word	0x6174530a
    fda0:	64207472 	.word	0x64207472
    fda4:	20617461 	.word	0x20617461
    fda8:	6e617274 	.word	0x6e617274
    fdac:	74696d73 	.word	0x74696d73
    fdb0:	00000a21 	.word	0x00000a21
    fdb4:	6e61480a 	.word	0x6e61480a
    fdb8:	61687364 	.word	0x61687364
    fdbc:	6620656b 	.word	0x6620656b
    fdc0:	2c6c6961 	.word	0x2c6c6961
    fdc4:	79727420 	.word	0x79727420
    fdc8:	61676120 	.word	0x61676120
    fdcc:	0a216e69 	.word	0x0a216e69
    fdd0:	00000000 	.word	0x00000000
    fdd4:	6172540a 	.word	0x6172540a
    fdd8:	696d736e 	.word	0x696d736e
    fddc:	75732074 	.word	0x75732074
    fde0:	73656363 	.word	0x73656363
    fde4:	53202173 	.word	0x53202173
    fde8:	74726174 	.word	0x74726174
    fdec:	64646120 	.word	0x64646120
    fdf0:	73736572 	.word	0x73736572
    fdf4:	7830203a 	.word	0x7830203a
    fdf8:	44207825 	.word	0x44207825
    fdfc:	20617461 	.word	0x20617461
    fe00:	657a6953 	.word	0x657a6953
    fe04:	7830203a 	.word	0x7830203a
    fe08:	000a7825 	.word	0x000a7825
    fe0c:	4d4f490a 	.word	0x4d4f490a
    fe10:	61727420 	.word	0x61727420
    fe14:	696d736e 	.word	0x696d736e
    fe18:	6f632074 	.word	0x6f632074
    fe1c:	656c706d 	.word	0x656c706d
    fe20:	0a216574 	.word	0x0a216574
    fe24:	00000000 	.word	0x00000000
    fe28:	4d4f490a 	.word	0x4d4f490a
    fe2c:	61727420 	.word	0x61727420
    fe30:	696d736e 	.word	0x696d736e
    fe34:	61662074 	.word	0x61662074
    fe38:	0a216c69 	.word	0x0a216c69
    fe3c:	00000000 	.word	0x00000000
    fe40:	0a0a0a0a 	.word	0x0a0a0a0a
    fe44:	0a0a0a0a 	.word	0x0a0a0a0a
    fe48:	0a0a0a0a 	.word	0x0a0a0a0a
    fe4c:	0a0a0a0a 	.word	0x0a0a0a0a
    fe50:	00000a0a 	.word	0x00000a0a

0000fe54 <g_pui8TestArray>:
    fe54:	10000200 000094c9 00009535 000081d5     ........5.......
	...
    fe6c:	0000953d 00000000 00000000 00000000     =...............
    fe7c:	00000000 0000953d 0000953d 00000000     ....=...=.......
    fe8c:	0000953d 0000953d 0000953d 0000953d     =...=...=...=...
    fe9c:	0000953d 0000953d 0000953d 0000953d     =...=...=...=...
    feac:	0000953d 0000953d 0000953d 0000953d     =...=...=...=...
    febc:	0000953d 0000953d 0000953d 00008105     =...=...=.......
    fecc:	0000953d 0000953d 0000953d 0000953d     =...=...=...=...
    fedc:	0000953d 0000953d 0000953d 0000953d     =...=...=...=...
    feec:	0000953d 0000953d 0000953d 0000953d     =...=...=...=...
    fefc:	0000953d 0000953d 0000953d 0000953d     =...=...=...=...
    ff0c:	0000953d 0000953d b082b580 2002af00     =...=.......... 
    ff1c:	fac8f001 f64f2000 f00171ff 2000fb49     ..... O..q..I.. 
    ff2c:	f0014909 2308facf 687b607b 2000085b     .I.....#{`{h[.. 
    ff3c:	71fff64f f001687a 2001fb45 fb8af001     O..qzh..E.. ....
    ff4c:	46bd3708 bf00bd80 10000200 af00b580     .7.F............
    ff5c:	f0012001 4b05fb7f 3301681b 60134a03     . .....K.h.3.J.`
    ff6c:	d9022b0f 22004b01 bd80601a 1000027c     .+...K.".`..|...
    ff7c:	af00b580 f0012000 f001fa6d 4820fa07     ..... ..m..... H
    ff8c:	f8c2f000 22734b1f 4b1f601a 68124a1e     .....Ks".`.K.J.h
    ff9c:	0270f022 4b1d601a 68124a1c 427ff422     ".p..`.K.J.h"..B
    ffac:	5280f442 4b17601a 601a2200 21044818     B..R.`.K.".`.H.!
    ffbc:	f88ef001 fba2f001 f9faf001 ff3af000     ..............:.
    ffcc:	f0004814 f7ffff19 2001ff9f fb3af001     .H......... ..:.
    ffdc:	f001201d f001fb4f 2000fb75 71fff64f     . ..O...u.. O..q
    ffec:	fad4f001 fa0cf001 f0012001 4b0afccd     ......... .....K
    fffc:	4807681b 461a2104 f964f001 bf00e7f4     .h.H.!.F..d.....
   1000c:	00009609 40010060 40010054 40010028     ....`..@T..@(..@
   1001c:	1000020c 00009ccc 1000027c 4668b580     ........|.....hF
   1002c:	f0003008 bd01f809 bf004618 18400080     .0.......F....@.
   1003c:	47706800 bf004618 b096b580 6078af00     .hpG.F........x`
   1004c:	657b2300 64fb6d7b 681b4b2d 6cfb64fb     .#{e{m.d-K.h.d.l
   1005c:	f887b2db 6cfb3050 b2db0a1b 3051f887     ....P0.l......Q0
   1006c:	0c1b6cfb f8a7b29b 4b263052 64bb681b     .l......R0&K.h.d
   1007c:	3051f897 f003b2db 2b000302 2006d005     ..Q0.......+... 
   1008c:	f7ff6879 4603ffd3 f04fe001 647b33ff     yh.....F..O..3{d
   1009c:	68792000 ffcaf7ff 627b4603 68792001     . yh.....F{b. yh
   100ac:	ffc4f7ff 62bb4603 68792002 ffbef7ff     .....F.b. yh....
   100bc:	62fb4603 68792003 ffb8f7ff 633b4603     .F.b. yh.....F;c
   100cc:	68792004 ffb2f7ff 637b4603 68792005     . yh.....F{c. yh
   100dc:	ffacf7ff 63bb4603 68792006 ffa6f7ff     .....F.c. yh....
   100ec:	63fb4603 68792007 ffa0f7ff 643b4603     .F.c. yh.....F;d
   100fc:	030cf107 f0014618 2300fb5b e7fe657b     .....F..[..#{e..
   1010c:	e000ed28 e000ed38 b083b480 6078af00     (...8.........x`
   1011c:	687a4b03 370c601a f85d46bd 47707b04     .Kzh.`.7.F]..{pG
   1012c:	10000388 0fb0e92d af00b097 010ce9c7     ....-...........
   1013c:	230ce9d7 2500001c 0005ea54 8094f000     ...#...%T.......
   1014c:	230ce9d7 ea4f0859 e9d70032 ea4f230c     ...#Y.O.2....#O.
   1015c:	ea480892 ea4f7883 eb100993 eb410208     ..H..xO.......A.
   1016c:	e9c70309 e9d72314 ea4f2314 ea4a1a12     .....#...#O...J.
   1017c:	ea4f7a03 e9d71b13 eb122314 eb43020a     .zO......#....C.
   1018c:	e9c7030b e9d72314 0a112314 6ab862b9     .....#...#...b.j
   1019c:	6003ea40 0a1962b8 e9d762f9 e9d72314     @..`.b...b...#..
   101ac:	1812010a 0301eb43 2314e9c7 2314e9d7     ....C......#...#
   101bc:	62390c11 ea406a38 62384003 62790c19     ..9b8j@..@8b..yb
   101cc:	2314e9d7 0108e9d7 eb431812 e9c70301     ...#......C.....
   101dc:	e9d72314 00192314 220061b9 e9d761fa     .#...#...a.".a..
   101ec:	e9d72314 18120106 0301eb43 2314e9c7     .#......C......#
   101fc:	2314e9d7 60b908d1 ea4068b8 60b87043     ...#...`.h@.Cp.`
   1020c:	60f908d9 2302e9d7 2314e9c7 2314e9d7     ...`...#...#...#
   1021c:	eb431892 00980303 68796078 7192ea41     ..C.....x`yhA..q
   1022c:	00906079 e9d76038 18120100 0301eb43     y`..8`......C...
   1023c:	010ce9d7 eb611a82 e9c70303 e9d72312     ......a......#..
   1024c:	32062312 0300f143 61390911 ea406938     .#.2C.....9a8i@.
   1025c:	61387003 61790919 2314e9d7 0104e9d7     .p8a..ya...#....
   1026c:	eb431812 e0290301 647b6b3b 085a6c7b     ..C...).;k{d{lZ.
   1027c:	089b6c7b 643b4413 091b6c3b 44136c3a     {l...D;d;l..:l.D
   1028c:	6c3b643b 6c3a0a1b 643b4413 0c1b6c3b     ;d;l..:l.D;d;l..
   1029c:	44136c3a 6c3b643b 643b08db 46136c3a     :l.D;d;l..;d:l.F
   102ac:	4413009b 6c7a005b 63fb1ad3 33066bfb     ...D[.zl...c.k.3
   102bc:	6c3b091a 461a4413 0300f04f 46194610     ..;l.D.FO....F.F
   102cc:	46bd375c 0fb0e8bd bf004770 b084b580     \7.F....pG......
   102dc:	e9c7af00 683a0100 4313687b bf142b00     ......:h{h.C.+..
   102ec:	23012300 60fbb2db e9d7e008 f7ff0100     .#.#...`........
   102fc:	e9c7ff19 68fb0100 60fb3301 2300e9d7     .......h.3.`...#
   1030c:	0103ea52 68fbd1f1 37104618 bd8046bd     R......h.F.7.F..
   1031c:	b082b580 e9c7af00 e9d70100 2a002300     .............#.*
   1032c:	0100f173 e9d7da06 42522300 0343eb63     s........#RBc.C.
   1033c:	2300e9c7 2300e9d7 46194610 ffc6f7ff     ...#...#.F.F....
   1034c:	46184603 46bd3708 bf00bd80 b085b480     .F.F.7.F........
   1035c:	e9c7af00 68380100 43016879 bf142900     ......8hyh.C.)..
   1036c:	21012100 60f9b2c9 e9d7e00a 09020100     .!.!...`........
   1037c:	7201ea42 e9c7090b 68f92300 60f93101     B..r.....#.h.1.`
   1038c:	0100e9d7 0c01ea50 68fbd1ef 37144618     ....P......h.F.7
   1039c:	f85d46bd 47707b04 b087b480 6078af00     .F]..{pG......x`
   103ac:	23006039 230075fb 2300613b 687b60fb     9`.#.u.#;a.#.`{h
   103bc:	2b2d781b 2301d108 687b75fb 607b3301     .x-+...#.u{h.3{`
   103cc:	330168fb e01360fb 68fbe012 60fb3301     .h.3.`.....h.3.`
   103dc:	4613693a 4413009b 613b005b 781b687b     :i.F...D[.;a{h.x
   103ec:	693b461a 3b304413 687b613b 607b3301     .F;i.D0;;a{h.3{`
   103fc:	781b687b d9032b2f 781b687b d9e42b39     {h.x/+..{h.x9+..
   1040c:	2b00683b 683bd002 601a68fa 2b007dfb     ;h.+..;h.h.`.}.+
   1041c:	693bd002 e000425b 4618693b 46bd371c     ..;i[B..;i.F.7.F
   1042c:	7b04f85d bf004770 b090b580 e9c7af00     ]..{pG..........
   1043c:	607a0102 63fb2300 63bb2300 0102e9d7     ..z`.#.c.#.c....
   1044c:	fe70f7ff 010ce9c7 6b3a68b9 009b4613     ..p......h:k.F..
   1045c:	005b4413 62fb1acb 1c5a6bfb 6afa63fa     .D[....b.kZ..c.j
   1046c:	3230b2d2 f107b2d2 440b0140 2c30f803     ..02....@..D..0,
   1047c:	230ce9d7 2302e9c7 2302e9d7 0103ea52     ...#...#...#R...
   1048c:	6bfbd1dc 687b63bb d0112b00 687be008     ...k.c{h.+....{h
   1049c:	607a1c5a 0110f107 440a6bfa 701a7812     Z.z`.....k.D.x.p
   104ac:	1e5a6bfb 2b0063fa 687bd1f1 701a2200     .kZ..c.+..{h.".p
   104bc:	46186bbb 46bd3740 bf00bd80 b08db4b0     .k.F@7.F........
   104cc:	e9c7af00 607a0102 230070fb e9d762fb     ......z`.p.#.b..
   104dc:	ea522302 d1090103 1c5a6afb f10762fa     .#R......jZ..b..
   104ec:	44130230 f8032230 e0282c20 7a3be027     0..D0".. ,(.'.;z
   104fc:	030ff003 302bf887 302bf897 d90a2b09     ......+0..+0.+..
   1050c:	2b0078fb 2327d001 2307e000 202bf897     .x.+..'#...#..+ 
   1051c:	f8874413 6afb302b 62fa1c5a 202bf897     .D..+0.jZ..b..+ 
   1052c:	b2d23230 0130f107 f803440b e9d72c20     02....0..D.. ,..
   1053c:	09142302 7403ea44 e9c7091d e9d74502     .#..D..t.....E..
   1054c:	ea522302 d1d20103 627b6afb 2b00687b     .#R......j{b{h.+
   1055c:	e008d011 1c5a687b f107607a 6afa0110     ....{hZ.z`.....j
   1056c:	7812440a 6afb701a 62fa1e5a d1f12b00     .D.x.p.jZ..b.+..
   1057c:	2200687b 6a7b701a 37344618 bcb046bd     {h.".p{j.F47.F..
   1058c:	bf004770 b085b480 6078af00 60fb2300     pG........x`.#.`
   1059c:	2b00687b 68fbd101 e002e00a 330168fb     {h.+...h.....h.3
   105ac:	687b60fb 607a1c5a 2b00781b 68fbd1f6     .`{hZ.z`.x.+...h
   105bc:	37144618 f85d46bd 47707b04 b087b480     .F.7.F]..{pG....
   105cc:	60f8af00 607a460b 230072fb 687b617b     ...`.Fz`.r.#{a{h
   105dc:	dc012b00 e011697b 68fbe00a d0042b00     .+..{i.....h.+..
   105ec:	1c5a68fb 7afa60fa 697b701a 617b3301     .hZ..`.z.p{i.3{a
   105fc:	1e5a687b 2b00607a 697bd1ef 371c4618     {hZ.z`.+..{i.F.7
   1060c:	f85d46bd 47707b04 b08eb580 60f8af00     .F]..{pG.......`
   1061c:	607a60b9 681b68bb 6abb62bb dc022b03     .`z`.h.h.b.j.+..
   1062c:	0302f06f edd7e0d6 eef57a03 eef17a40     o........z..@z..
   1063c:	d104fa10 4a6968bb 2303601a 68bbe0ca     .....hiJ.`.#...h
   1064c:	68fb627b 697b617b b2db15db 623b3b7f     {b.h{a{i.....;;b
   1065c:	f3c3697b f4430316 61fb0300 633b2300     {i....C....a.#;c
   1066c:	637b2300 2b1e6a3b f06fdd02 e0b10301     .#{c;j.+..o.....
   1067c:	f1136a3b da020f17 33fff04f 6a3be0aa     ;j......O..3..;j
   1068c:	dd062b16 3b176a3b fa0269fa 637bf303     .+..;j.;.i....{c
   1069c:	6a3be01a db0f2b00 f1c36a3b 69fa0317     ..;j.+..;j.....i
   106ac:	f303fa42 6a3b637b 69fa3301 f303fa02     B...{c;j.3.i....
   106bc:	437ff023 e007633b f02369fb 6a3b427f     #..C;c...i#..B;j
   106cc:	fa4243db 633bf303 2b00697b 68bbda04     .CB...;c{i.+...h
   106dc:	60ba1c5a 701a222d 2b006b7b 68bbd105     Z..`-".p{k.+...h
   106ec:	60ba1c5a 701a2230 6b7be023 dd092b00     Z..`0".p#.{k.+..
   106fc:	461a6b7b 73e2ea4f 46194610 f7ff68ba     {k.FO..s.F.F.h..
   1070c:	e012fe93 1c5a68bb 222d60ba 6b7b701a     .....hZ..`-".p{k
   1071c:	461a425b 73e2ea4f 46194610 f7ff68ba     [B.FO..s.F.F.h..
   1072c:	e002fe83 330168bb 68bb60bb 2b00781b     .....h.3.`.h.x.+
   1073c:	68bbd1f8 60ba1c5a 701a222e 2b006b3b     ...hZ..`.".p;k.+
   1074c:	68bbd105 60ba1c5a 701a2230 6a7ae03c     ...hZ..`0".p<.zj
   1075c:	1ad268bb 44136abb 61bb3b01 687b69ba     .h...j.D.;.a.i{h
   1076c:	bfb8429a 61bb4613 62fb2300 6b3ae015     .B...F.a.#.b..:k
   1077c:	009b4613 005b4413 68bb633b 60ba1c5a     .F...D[.;c.hZ..`
   1078c:	16126b3a 3230b2d2 701ab2d2 f0236b3b     :k....02...p;k#.
   1079c:	633b437f 33016afb 6afa62fb 429a69bb     .C;c.j.3.b.j.i.B
   107ac:	68bbdbe5 60bb3b01 68bbe002 60bb3b01     ...h.;.`...h.;.`
   107bc:	781b68bb d1042b30 3b0168bb 2b2e781b     .h.x0+...h.;.x.+
   107cc:	68bbd1f3 60bb3301 220068bb 68ba701a     ...h.3.`.h.".p.h
   107dc:	1ad36a7b 37384618 bd8046bd 00302e30     {j...F87.F..0.0.
   107ec:	b094b580 60f8af00 607a60b9 63fb2300     .......`.`z`.#.c
   107fc:	627b2300 2306e2e9 68bb633b 2b25781b     .#{b...#;c.h.x%+
   1080c:	68fbd01f d0152b00 781b68bb d10b2b0a     ...h.+...h.x.+..
   1081c:	781b4bb2 d0072b00 1c5a68fb 220d60fa     .K.x.+...hZ..`."
   1082c:	6bfb701a 63fb3301 1c5a68fb 68ba60fa     .p.k.3.c.hZ..`.h
   1083c:	701a7812 330168bb 6bfb60bb 63fb3301     .x.p.h.3.`.k.3.c
   1084c:	68bbe2c3 60bb3301 f8872300 f897302d     ...h.3.`.#..-0..
   1085c:	f887302d 2320302e 302ff887 781b68bb     -0...0 #../0.h.x
   1086c:	d1052b30 f8872330 68bb302f 60bb3301     0+..0#../0.h.3.`
   1087c:	0310f107 461968b8 fd8ef7ff 63bb4603     .....h.F.....F.c
   1088c:	68ba693b 60bb4413 781b68bb d0052b73     ;i.h.D.`.h.xs+..
   1089c:	2b006bbb 6bbbda02 63bb425b 781b68bb     .k.+...k[B.c.h.x
   108ac:	d10e2b2e 330168bb f10760bb 68b80310     .+...h.3.`.....h
   108bc:	f7ff4619 4603fd71 693b633b 441368ba     .F..q..F;c;i.h.D
   108cc:	68bb60bb 2b6c781b 68bbd10c 60bb3301     .`.h.xl+...h.3.`
   108dc:	781b68bb d1052b6c 330168bb 230160bb     .h.xl+...h.3.`.#
   108ec:	302df887 781b68bb 2b323b46 825df200     ..-0.h.xF;2+..].
   108fc:	f851a101 bf00f023 00008ee9 00008f63     ..Q.#.......c...
   1090c:	00008f63 00008f63 00008f63 00008f63     c...c...c...c...
   1091c:	00008f63 00008f63 00008f63 00008f63     c...c...c...c...
   1092c:	00008f63 00008f63 00008f63 00008f63     c...c...c...c...
   1093c:	00008f63 00008f63 00008f63 00008f63     c...c...c...c...
   1094c:	00008c77 00008f63 00008f63 00008f63     w...c...c...c...
   1095c:	00008f63 00008f63 00008f63 00008f63     c...c...c...c...
   1096c:	00008f63 00008f63 00008f63 00008b7d     c...c...c...}...
   1097c:	00008dad 00008f63 00008ee9 00008f63     ....c.......c...
   1098c:	00008f63 00008dad 00008f63 00008f63     c.......c...c...
   1099c:	00008f63 00008f63 00008f63 00008f63     c...c...c...c...
   109ac:	00008f63 00008f63 00008f63 00008ba3     c...c...c.......
   109bc:	00008f63 00008d17 00008f63 00008f63     c.......c...c...
   109cc:	00008c71 1d1a687b 681b607a 3023f887     q...{h..z`.h..#0
   109dc:	2b0068fb 68fbd005 60fa1c5a 2023f897     .h.+...hZ..`..# 
   109ec:	6bfb701a 63fb3301 687be1ec 607a1d1a     .p.k.3.c..{h..z`
   109fc:	64fb681b f7ff6cf8 6278fdc5 2b006bbb     .h.d.l....xb.k.+
   10a0c:	6bbadd1f 429a6a7b 6bbad91b 1ad36a7b     ...k{j.B...k{j..
   10a1c:	f89763bb 68f8302f 6bba4619 fdcef7ff     .c../0.h.F.k....
   10a2c:	68fb63b8 d0012b00 e0006bbb 68fa2300     .c.h.+...k...#.h
   10a3c:	60fb4413 6bfa6bbb 63fb4413 63bb2300     .D.`.k.k.D.c.#.c
   10a4c:	e00ee00f 2b0068fb 68fbd005 60fa1c5a     .....h.+...hZ..`
   10a5c:	78126cfa 6cfb701a 64fb3301 33016bfb     .l.x.p.l.3.d.k.3
   10a6c:	6cfb63fb 2b00781b 6bbbd1ec d0222b00     .c.l.x.+...k.+".
   10a7c:	425b6bbb 6bba63bb 429a6a7b 6bbad91b     .k[B.c.k{j.B...k
   10a8c:	1ad36a7b f89763bb 68f8302f 6bba4619     {j...c../0.h.F.k
   10a9c:	fd94f7ff 68fb63b8 d0012b00 e0006bbb     .....c.h.+...k..
   10aac:	68fa2300 60fb4413 6bfa6bbb 63fb4413     .#.h.D.`.k.k.D.c
   10abc:	63bb2300 e185e186 f8872301 f897302e     .#.c.....#...0..
   10acc:	2b00302d 687bd00c f0233307 f1030307     -0.+..{h.3#.....
   10adc:	607a0208 2300e9d3 bf00e009 10000380     ..z`...#........
   10aec:	1d1a687b 681b607a f04f461a e9c70300     {h..z`.h.FO.....
   10afc:	6bbb2310 d01e2b00 0110e9d7 fc26f7ff     .#.k.+........&.
   10b0c:	6bba4603 63bb1ad3 302ff897 461968f8     .F.k...c../0.h.F
   10b1c:	f7ff6bba 63b8fd53 2b0068fb 6bbbd001     .k..S..c.h.+...k
   10b2c:	2300e000 441368fa 6bbb60fb 44136bfa     ...#.h.D.`.k.k.D
   10b3c:	230063fb f89763bb e9d7302e 68fa0110     .c.#.c...0.....h
   10b4c:	fcbcf7ff 68fb6378 d0032b00 68fa6b7b     ....xc.h.+..{k.h
   10b5c:	60fb4413 6bfa6b7b 63fb4413 f897e132     .D.`{k.k.D.c2...
   10b6c:	2b00302d 687bd009 f0233307 f1030307     -0.+..{h.3#.....
   10b7c:	607a0208 2300e9d3 687be006 607a1d1a     ..z`...#..{h..z`
   10b8c:	461a681b 0300f04f 2310e9c7 2b006bbb     .h.FO......#.k.+
   10b9c:	e9d7d01e f7ff0110 4603fb99 1ad36bba     ...........F.k..
   10bac:	f89763bb 68f8302f 6bba4619 fd06f7ff     .c../0.h.F.k....
   10bbc:	68fb63b8 d0012b00 e0006bbb 68fa2300     .c.h.+...k...#.h
   10bcc:	60fb4413 6bfa6bbb 63fb4413 63bb2300     .D.`.k.k.D.c.#.c
   10bdc:	0110e9d7 f7ff68fa 6378fc27 2b0068fb     .....h..'.xc.h.+
   10bec:	6b7bd003 441368fa 6b7b60fb 44136bfa     ..{k.h.D.`{k.k.D
   10bfc:	e0e763fb 302df897 d0092b00 3307687b     .c....-0.+..{h.3
   10c0c:	0307f023 0208f103 e9d3607a e0062300     #.......z`...#..
   10c1c:	1d1a687b 681b607a ea4f461a e9c773e2     {h..z`.h.FO..s..
   10c2c:	e9d72306 2a002306 0100f173 e9d7da0a     .#...#.*s.......
   10c3c:	42522306 0343eb63 2310e9c7 f8872301     .#RBc.C....#.#..
   10c4c:	e006302c 2306e9d7 2310e9c7 f8872300     ,0.....#...#.#..
   10c5c:	6bbb302c d04a2b00 2310e9d7 46194610     ,0.k.+J....#.F.F
   10c6c:	fb56f7ff 6bba4603 63bb1ad3 302cf897     ..V..F.k...c..,0
   10c7c:	d0112b00 3b016bbb f89763bb 2b30302f     .+...k.;.c../00+
   10c8c:	68fbd10a d0042b00 1c5a68fb 222d60fa     ...h.+...hZ..`-"
   10c9c:	6bfb701a 63fb3301 302ff897 461968f8     .p.k.3.c../0.h.F
   10cac:	f7ff6bba 63b8fc8b 2b0068fb 6bbbd001     .k.....c.h.+...k
   10cbc:	2300e000 441368fa 6bbb60fb 44136bfa     ...#.h.D.`.k.k.D
   10ccc:	230063fb f89763bb 2b00302c f897d01e     .c.#.c..,0.+....
   10cdc:	2b20302f 68fbd11a d0042b00 1c5a68fb     /0 +...h.+...hZ.
   10cec:	222d60fa 6bfb701a 63fb3301 f897e00e     .`-".p.k.3.c....
   10cfc:	2b00302c 68fbd00a d0042b00 1c5a68fb     ,0.+...h.+...hZ.
   10d0c:	222d60fa 6bfb701a 63fb3301 0110e9d7     .`-".p.k.3.c....
   10d1c:	f7ff68fa 6378fb89 2b0068fb 6b7bd003     .h....xc.h.+..{k
   10d2c:	441368fa 6b7b60fb 44136bfa e04963fb     .h.D.`{k.k.D.cI.
   10d3c:	2b0068fb 687bd038 f0233307 f1030307     .h.+8.{h.3#.....
   10d4c:	607a0208 2300e9d3 46194610 fe92f000     ..z`...#.F.F....
   10d5c:	617b4603 221468fb 6978601a 6b3a68f9     .F{a.h.".`xi.h:k
   10d6c:	fc52f7ff 6b7b6378 da142b00 f1b36b7b     ..R.xc{k.+..{k..
   10d7c:	d1023fff 62bb4b1d 6b7be008 0f02f113     .?...K.b..{k....
   10d8c:	4b1bd102 e00162bb 62bb4b1a 6aba68fb     ...K.b...K.b.h.j
   10d9c:	2303601a 6b7b637b 44136bfa 6b7b63fb     .`.#{c{k.k.D.c{k
   10dac:	441368fa e00d60fb 68fbe00c d0052b00     .h.D.`.....h.+..
   10dbc:	1c5a68fb 68ba60fa 701a7812 33016bfb     .hZ..`.h.x.p.k.3
   10dcc:	bf0063fb 330168bb 68bb60bb 2b00781b     .c...h.3.`.h.x.+
   10ddc:	ad11f47f 2b0068fb 68fbd002 701a2200     .....h.+...h.".p
   10dec:	46186bfb 46bd3750 bf00bd80 00302e30     .k.FP7.F....0.0.
   10dfc:	00232e23 003f2e3f b580b40f af00b082     #.#.?.?.........
   10e0c:	0314f107 4809603b 683a6939 fce8f7ff     ....;`.H9i:h....
   10e1c:	4b076078 4805681b 687b4798 37084618     x`.K.h.H.G{h.F.7
   10e2c:	e8bd46bd b0044080 bf004770 10000280     .F...@..pG......
   10e3c:	10000388 af00b580 f7ff4803 4803ffdd     .........H.....H
   10e4c:	ffdaf7ff bf00bd80 00009ce4 00009d04     ................
   10e5c:	b082b490 6078af00 685b687b 0302f003     ......x`{h[h....
   10e6c:	f0002b00 687b8094 2b00681b e04dda00     .+....{h.h.+..M.
   10e7c:	22734b92 687b601a f003681b 085a03f8     .Ks".`{h.h....Z.
   10e8c:	44134b8f 687b461a f003681b 009b0307     .K.D.F{h.h......
   10e9c:	40992102 681b687b 03f8f003 4b880858     .!.@{h.h....X..K
   10eac:	68184403 681b687b 0307f003 2407009b     .D.h{h.h.......$
   10ebc:	f303fa04 400343db 6013430b 681b687b     .....C.@.C.`{h.h
   10ecc:	03fcf003 4380f103 3380f503 687b461a     .......C...3.F{h
   10edc:	f003681b 00db0303 40992118 681b687b     .h.......!.@{h.h
   10eec:	03fcf003 4380f103 3380f503 687b6818     .......C...3.h{h
   10efc:	f003681b 00db0303 fa0424ff 43dbf303     .h.......$.....C
   10f0c:	430b4003 4b6d6013 601a2200 681b687b     .@.C.`mK.".`{h.h
   10f1c:	0320f003 4b6b08da 687a4413 f0026812     .. ...kK.Dzh.h..
   10f2c:	2101021f f202fa01 687b601a f003681b     ...!.....`{h.h..
   10f3c:	08da0320 44134b64 687b461a f003685b      ...dK.D.F{h[h..
   10f4c:	2b000301 687bd010 f003681b 08d90320     ...+..{h.h.. ...
   10f5c:	440b4b5d 687b6819 f003681b 2001031f     ]K.D.h{h.h..... 
   10f6c:	f303fa00 e010430b 681b687b 0320f003     .....C..{h.h.. .
   10f7c:	4b5508d9 6819440b 681b687b 031ff003     ..UK.D.h{h.h....
   10f8c:	fa002001 43dbf303 6013400b 687be092     . .....C.@.`..{h
   10f9c:	2b00681b e04dda00 22734b48 687b601a     .h.+..M.HKs".`{h
   10fac:	f003681b 085a03f8 44134b45 687b461a     .h....Z.EK.D.F{h
   10fbc:	f003681b 009b0307 40992106 681b687b     .h.......!.@{h.h
   10fcc:	03f8f003 4b3e0858 68184403 681b687b     ....X.>K.D.h{h.h
   10fdc:	0307f003 2407009b f303fa04 400343db     .......$.....C.@
   10fec:	6013430b 681b687b 03fcf003 4380f103     .C.`{h.h.......C
   10ffc:	3380f503 687b461a f003681b 00db0303     ...3.F{h.h......
   1100c:	40992118 681b687b 03fcf003 4380f103     .!.@{h.h.......C
   1101c:	3380f503 687b6818 f003681b 00db0303     ...3.h{h.h......
   1102c:	fa0424ff 43dbf303 430b4003 4b236013     .$.....C.@.C.`#K
   1103c:	601a2200 681b687b 0320f003 4b2308da     .".`{h.h.. ...#K
   1104c:	687a4413 f0026812 2101021f f202fa01     .Dzh.h.....!....
   1105c:	687b601a f003681b 08da0320 44134b1a     .`{h.h.. ....K.D
   1106c:	687b461a f003685b 2b000301 687bd010     .F{h[h.....+..{h
   1107c:	f003681b 08d90320 440b4b13 687b6819     .h.. ....K.D.h{h
   1108c:	f003681b 2001031f f303fa00 e010430b     .h..... .....C..
   1109c:	681b687b 0320f003 4b0b08d9 6819440b     {h.h.. ....K.D.h
   110ac:	681b687b 031ff003 fa002001 43dbf303     {h.h..... .....C
   110bc:	6013400b 46bd3708 4770bc90 40010060     .@.`.7.F..pG`..@
   110cc:	40010040 400100a8 40010088 400100b4     @..@...@...@...@
   110dc:	b084b580 6078af00 23006039 e00960fb     ......x`9`.#.`..
   110ec:	00db68fb 4413687a f7ff4618 68fbfeb1     .h..zh.D.F.....h
   110fc:	60fb3301 683b68fa d3f1429a 46bd3710     .3.`.h;h.B...7.F
   1110c:	bf00bd80 b083b480 6078af00 683b6039     ..........x`9`;h
   1111c:	687a00db 685b4413 0302f003 d0432b00     ..zh.D[h.....+C.
   1112c:	00db683b 4413687a f003681b 08da0320     ;h..zh.D.h.. ...
   1113c:	44134b2a 683b461a 687900db 685b440b     *K.D.F;h..yh.D[h
   1114c:	0301f003 d0162b00 00db683b 440b6879     .....+..;h..yh.D
   1115c:	f003681b 08d90320 440b4b20 683b6819     .h.. ... K.D.h;h
   1116c:	687800db 681b4403 031ff003 fa002001     ..xh.D.h..... ..
   1117c:	430bf303 683be016 687900db 681b440b     ...C..;h..yh.D.h
   1118c:	0320f003 4b1508d9 6819440b 00db683b     .. ....K.D.h;h..
   1119c:	44036878 f003681b 2001031f f303fa00     xh.D.h..... ....
   111ac:	400b43db e0146013 00db683b 4413687a     .C.@.`..;h..zh.D
   111bc:	f003681b 08da0320 44134b09 00d2683a     .h.. ....K.D:h..
   111cc:	440a6879 f0026812 2101021f f202fa01     yh.D.h.....!....
   111dc:	370c601a f85d46bd 47707b04 40010088     .`.7.F]..{pG...@
   111ec:	400100a8 b083b480 6078af00 683b6039     ...@......x`9`;h
   111fc:	687a00db 685b4413 0302f003 d0432b00     ..zh.D[h.....+C.
   1120c:	00db683b 4413687a f003681b 08da0320     ;h..zh.D.h.. ...
   1121c:	44134b2a 683b461a 687900db 685b440b     *K.D.F;h..yh.D[h
   1122c:	0301f003 d1162b00 00db683b 440b6879     .....+..;h..yh.D
   1123c:	f003681b 08d90320 440b4b20 683b6819     .h.. ... K.D.h;h
   1124c:	687800db 681b4403 031ff003 fa002001     ..xh.D.h..... ..
   1125c:	430bf303 683be016 687900db 681b440b     ...C..;h..yh.D.h
   1126c:	0320f003 4b1508d9 6819440b 00db683b     .. ....K.D.h;h..
   1127c:	44036878 f003681b 2001031f f303fa00     xh.D.h..... ....
   1128c:	400b43db e0146013 00db683b 4413687a     .C.@.`..;h..zh.D
   1129c:	f003681b 08da0320 44134b09 00d2683a     .h.. ....K.D:h..
   112ac:	440a6879 f0026812 2101021f f202fa01     yh.D.h.....!....
   112bc:	370c601a f85d46bd 47707b04 40010088     .`.7.F]..{pG...@
   112cc:	400100b4 b086b580 60f8af00 607a60b9     ...@.......`.`z`
   112dc:	617b2300 697be014 fa022201 461af303     .#{a..{i.".....F
   112ec:	4013687b d0042b00 697968f8 ff0af7ff     {h.@.+...hyi....
   112fc:	68f8e003 f7ff6979 697bff75 617b3301     ...hyi..u.{i.3{a
   1130c:	68bb697a d3e6429a 46bd3718 bf00bd80     zi.h.B...7.F....
   1131c:	49134812 f8d16001 4812d000 f4416801     .H.I.`.....H.hA.
   1132c:	60010170 8f4ff3bf 8f6ff3bf 490f480e     p..`..O...o..H.I
   1133c:	f8504a0f f8413b04 42913b04 aff9f77f     .JP..;A..;.B....
   1134c:	490d480c 0200f04f bfb84288 2b04f840     .H.IO....B..@..+
   1135c:	affaf6ff fe0cf7fe 0000be00 e000ed08     ................
   1136c:	00008000 e000ed88 00009d5c 10000200     ........\.......
   1137c:	1000027c 1000027c 1000038c af00b480     |...|...........
   1138c:	bf00e7fe af00b480 bf00e7fe f000b508     ................
   1139c:	f000fa33 f000fad7 2001fb67 fadef000     3.......g.. ....
   113ac:	f0002001 e8bdf887 f0004008 bf00bae5     . .......@......
   113bc:	681b4b0d f013b510 d1140401 4a0c4b0b     .K.h.........K.J
   113cc:	f000601a 4b0bfb15 4a0c490b 60182073     .`.....K.I.Js .`
   113dc:	f0206808 60080070 f4216811 f441417f     .h .p..`.h!..AA.
   113ec:	60115180 bd10601c 10000384 e0000e80     .Q.`.`..........
   113fc:	00150511 40010060 40010054 40010028     ....`..@T..@(..@
   1140c:	681b4b0f f013b510 d0000401 f000bd10     .K.h............
   1141c:	4b0cf9a1 4a0d490c 60182073 f0206808     ...K.I.Js .`.h .
   1142c:	f0400070 60080020 f4216811 f441417f     p.@. ..`.h!..AA.
   1143c:	601151c0 e8bd601c f0004010 bf00bb0f     .Q.`.`...@......
   1144c:	10000384 40010060 40010054 40010028     ....`..@T..@(..@
   1145c:	b996f000 4604b510 4806b120 21354a06     .......F ..H.J5!
   1146c:	f8fef000 49064b05 22002047 600c6018     .....K.IG .".`.`
   1147c:	bd10601a 00009d0c 00009d24 40004014     .`......$....@.@
   1148c:	40004018 48054b04 4b05681a 0f01f012     .@.@.K.H.h.K....
   1149c:	4618bf08 bf004770 40004018 016e3600     ...FpG...@.@.6n.
   114ac:	02dc6c00 681a4b02 0000ea22 47706018     .l...K.h"....`pG
   114bc:	4000400c 681a4b02 60184310 bf004770     .@.@.K.h.C.`pG..
   114cc:	4000400c 680cb430 6849688d 4b2a4a29     .@.@0..h.hIh)J*K
   114dc:	bf0c2c00 f04f2400 01004400 4105ea41     .,...$O..D..A..A
   114ec:	50814321 f0016819 2901010f 681bd03a     !C.P.h.....):..h
   114fc:	030ff003 d0352b02 f3c36813 3a010244     .....+5..h..D..:
   1150c:	f3c32a04 d92d4344 2b043b01 4b1bd92a     .*..DC-..;.+*..K
   1151c:	f3c3681b 3a010244 f3c32a04 d9214344     .h..D..:.*..DC!.
   1152c:	2b043b01 4b16d91e f3c3681b 3a010244     .;.+...K.h..D..:
   1153c:	f3c32a04 d9154344 2b043b01 4b11d912     .*..DC...;.+...K
   1154c:	f3c3681b 3a010244 f3c32a04 d9094344     .h..D..:.*..DC..
   1155c:	2b043b01 4b0cd906 f042681a 601a0204     .;.+...K.hB....`
   1156c:	4770bc30 681a4b08 0204f022 bc30601a     0.pG.K.h"....`0.
   1157c:	bf004770 4000800c 40008100 4000801c     pG.....@...@...@
   1158c:	4000802c 4000803c 40021020 4b070100     ,..@<..@ ..@...K
   1159c:	b41058c2 2408f001 0204ea22 1101f001     .X.....$".......
   115ac:	50c14311 4b04f85d bf004770 4000800c     .C.P]..KpG.....@
   115bc:	4b030100 f00158c2 430a2108 477050c2     ...K.X...!.C.PpG
   115cc:	4000800c 0100b4f0 59044c1b 3f80f511     ...@.....L.Y...?
   115dc:	0c24bf08 74c0f404 d0162c80 75fff64f     ..$....t.,..O..u
   115ec:	42a92400 4f154626 c054f8df f511d019     .$.B&F.O..T.....
   115fc:	d01b3f80 b2910c33 430c041b 4212ea43     .?..3......CC..B
   1160c:	f84051c4 bcf0200c f64f4770 42a975ff     .Q@.. ..pGO..u.B
   1161c:	4402ea4f 4f094616 c024f8df 0202ebc3     O..D.F.O..$.....
   1162c:	b292d1e5 51c44314 4770bcf0 4314b292     .....C.Q..pG...C
   1163c:	400cf840 4770bcf0 4000800c 40008004     @..@..pG...@...@
   1164c:	40008008 681a4b02 60184310 bf004770     ...@.K.h.C.`pG..
   1165c:	40008200 60184b01 bf004770 40008208     ...@.K.`pG.....@
   1166c:	bf00e7fe 4b02b508 47986b5b bf00bd08     .......K[k.G....
   1167c:	1000022c d80b280f d0122805 d0162806     ,....(...(...(..
   1168c:	d1042804 681a4b0d 3280f442 4770601a     .(...K.hB..2.`pG
   1169c:	f0003810 2201001f fa024b09 6018f000     .8.....".K.....`
   116ac:	4b064770 f442681a 601a3200 4b034770     pG.K.hB..2.`pG.K
   116bc:	f442681a 601a2280 bf004770 e000ed24     .hB..".`pG..$...
   116cc:	e000e100 8010f3ef 4770b662 8010f3ef     ........b.pG....
   116dc:	4770b672 8810f380 bf004770 4604b510     r.pG....pG.....F
   116ec:	fed0f7ff fba34b04 0c802000 f000fb04     .....K... ......
   116fc:	4010e8bd bfb6f7ff 165e9f81 681b4b0d     ...@......^..K.h
   1170c:	b43007da 4a0cd414 f0436813 60137380     ..0....J.hC..s.`
   1171c:	01db6813 4809d5fc 4c0a4d09 4b0b490a     .h.....H.M.L.I.K
   1172c:	4a0b6005 f04f250f 602530ff 601a6008     .`.J.%O..0%`.`.`
   1173c:	4770bc30 10000384 e000edfc e0000fb0     0.pG............
   1174c:	c5acce55 e0000e40 e0000e00 e0000e80     U...@...........
   1175c:	00150511 4a08b508 021b6813 f7ffd4fc     .......J.h......
   1176c:	4b06fe91 2000fba3 23320c80 f000fb03     ...K... ..2#....
   1177c:	4008e8bd bf76f7ff e0000e80 165e9f81     ...@..v.......^.
   1178c:	b4307803 4602b193 f8122300 33011f01     .x0....F.#.....3
   1179c:	d1fa2900 4260f04f 461418c5 1b01f810     .)..O.`B...F....
   117ac:	2b006813 42a8d0fc d1f77021 4770bc30     .h.+...B!p..0.pG
   117bc:	490e4b0d 4a0e681b 60c16809 6841b470     .K.I.h.J.h.`p.Ah
   117cc:	4c0c6815 43296942 68246041 0601f003     .h.LBi)CA`$h....
   117dc:	0140f3c3 f3c34322 70060380 74037201     ..@."C.....p.r.t
   117ec:	bc706142 bf004770 400201cc 400201c4     Bap.pG.....@...@
   117fc:	400201c0 400201c8 681a4b21 b4f00792     ...@...@!K.h....
   1180c:	681bd502 d43507db 681b4b1e 03f0f003     ...h..5..K.h....
   1181c:	d0312b10 4a1a4b1c f0416819 60190102     .+1..K.J.hA....`
   1182c:	f0416819 60190101 f0036813 2b030303     .hA....`.h.....+
   1183c:	4b14d1fa f003681b 2b1003f0 4b13d11a     ...K.h.....+...K
   1184c:	4a144913 4814681f 680b681e 68056814     .I.J.h.H.h.h.h.h
   1185c:	737ff423 0709f3c7 4609f3c6 0303f023     #..s.......F#...
   1186c:	347cf424 ea44433b f0253406 60050501     $.|4;CD..4%....`
   1187c:	6014600b 4770bcf0 22c14b07 e7c9601a     .`.`..pG.K.".`..
   1188c:	40021004 4002000c 40021000 50023000     ...@...@...@.0.P
   1189c:	40020080 40020088 40020060 681a4b23     ...@...@`..@#K.h
   118ac:	b4700791 681bd402 d51207da 681b4b20     ..p....h.... K.h
   118bc:	03f0f003 d00e2b10 4a1c4b1e f0216819     .....+...K.J.h!.
   118cc:	60190102 f0216819 60190101 079b6813     ...`.h!....`.h..
   118dc:	bc70d1fc 4b184770 48194a18 681d4913     ..p.pG.K.J.H.I.h
   118ec:	6816681c 680b6800 d50d079b 737ff426     .h.h.h.h....&..s
   118fc:	6c04f851 0509f3c5 0303f023 f026432b     Q..l....#...+C&.
   1190c:	f8410502 60135c04 681b4b08 d5d307da     ..A..\.`.K.h....
   1191c:	4a0b4b08 f420681d f3c4307c ea404109     .K.J.h .|0...A@.
   1192c:	f0253101 60180001 e7c56011 40021004     .1%....`.`.....@
   1193c:	4002000c 40021000 50023004 40020080     ...@...@.0.P...@
   1194c:	40020088 681a4b04 0206f042 681a601a     ...@.K.hB....`.h
   1195c:	0204f022 4770601a 40021018 681a4b05     "....`pG...@.K.h
   1196c:	f022b918 601a0280 f0424770 601a0280     .."....`pGB....`
   1197c:	bf004770 4000400c 681a4b02 0210f042     pG...@.@.K.hB...
   1198c:	4770601a 40004050 4604b530 f7ffb083     .`pGP@.@0..F....
   1199c:	b11cfe9d 681b4b13 d50a07db 681a4b12     .....K.h.....K.h
   119ac:	0204f022 bf30601a e8bdb003 f7ff4030     "....`0.....0@..
   119bc:	4a0dbe91 68114b0d 0104f041 681c6011     ...J.K.hA....`.h
   119cc:	9001681b 0501f003 ff68f7ff f014bf30     .h........h.0...
   119dc:	98010f02 2d00d101 9001d0e6 ff0cf7ff     .......-........
   119ec:	e7e19801 40020250 e000ed10 40021000     ....P..@.......@
   119fc:	4912b538 20004b12 60082201 f7ff601a     8..I.K. .".`.`..
   11a0c:	4b10fd41 d0154298 42984b0f 480fd00e     A..K.B...K.B...H
   11a1c:	49104b0f 24002502 2201f240 600c6005     .K.I.%.$@..".`.`
   11a2c:	601a2032 4038e8bd be58f7ff 22024b0a     2 .`..8@..X..K."
   11a3c:	e7ec601a 22054b08 e7e8601a e0040304     .`...K.".`......
   11a4c:	e0040004 02dc6c00 016e3600 e00400f0     .....l...6n.....
   11a5c:	40020250 e0040f00 e0040010 22004b01     P..@.........K."
   11a6c:	4770601a 40020250 22374b01 4770601a     .`pGP..@.K7".`pG
   11a7c:	4000c008 0241ea4f 43e0f1b2 f5b3bf24     ...@O.A....C$...
   11a8c:	f1dc1c00 d90d5cfe 4c00f001 02c0ea4f     .....\.....LO...
   11a9c:	7050ea4c 4f00f1b2 0083eb40 f020bf08     L.Pp...O@..... .
   11aac:	47700001 4f80f011 f113d121 bfbc7238     ..pG...O!...8r..
   11abc:	4000f001 f4414770 ea4f1180 f1c25252     ...@pGA...O.RR..
   11acc:	f1c20218 fa100c20 fa20f30c bf18f002     .... ..... .....
   11adc:	0001f040 23c1ea4f 23d3ea4f fc0cfa03     @...O..#O..#....
   11aec:	000cea40 f302fa23 0343ea4f ea7fe7cc     @...#...O.C.....
   11afc:	d1075362 3301ea50 f04fbf1e f44040fe     bS..P..3..O..@@.
   11b0c:	47700040 4000f001 40fef040 0000f440     @.pG...@@..@@...
   11b1c:	bf004770 616e6942 43207972 746e756f     pG..Binary Count
   11b2c:	45207265 706d6178 000a656c 20202020     er Example..    
   11b3c:	20202020 20202020 20202020 20202020                     
   11b4c:	20202020 20202020 00002020 4a325b1b               ...[2J
   11b5c:	00485b1b 2e2f2e2e 5f6d612f 5f6c6168     .[H..././am_hal_
   11b6c:	676b6c63 632e6e65 00000000 685f6d61     clkgen.c....am_h
   11b7c:	635f6c61 65676b6c 79735f6e 6b6c6373     al_clkgen_sysclk
   11b8c:	6c65735f 28746365 69203a29 6c61766e     _select(): inval
   11b9c:	63206469 6b636f6c 74657320 676e6974     id clock setting
   11bac:	0000002e 00000000 00000256 00000000     ........V.......
   11bbc:	0000002e 00000000 0000002f 00000000     ......../.......
   11bcc:	00000030 00000000 00000031 00000000     0.......1.......
   11bdc:	0800004d 08000051 08000055 08000059     M...Q...U...Y...
   11bec:	0800006d 08000071 0800007d 08000081     m...q...}.......
   11bfc:	08000089 08000091 08000099 08000075     ............u...
   11c0c:	08000079 0800009d 0800005d 08000061     y.......]...a...
   11c1c:	08000065 08000069 08000085 0800008d     e...i...........

00011c2c <g_AM_BSP_GPIO_HANDSHAKE>:
   11c2c:	00001003                                ....

00011c30 <g_AM_BSP_GPIO_DISABLE>:
   11c30:	00000003                                ....

00011c34 <am_hal_cachectrl_defaults>:
   11c34:	00000308                                ....

00011c38 <g_AM_HAL_GPIO_DISABLE>:
   11c38:	00000003                                ....

00011c3c <g_AM_HAL_GPIO_OUTPUT>:
   11c3c:	00000403                                ....

00011c40 <g_ui8Bit76Capabilities>:
   11c40:	02800101 80010180 80800101 80808080     ................
   11c50:	80808080 80808008 01800180 80808080     ................
   11c60:	80808080 01800402 01010401 80808080     ................
   11c70:	00000101                                ....

00011c74 <g_ui8Inpen>:
   11c74:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
   11c84:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
   11c94:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
   11ca4:	00003130                                01..

00011ca8 <g_ui8NCEtable>:
   11ca8:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   11cb8:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   11cc8:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   11cd8:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   11ce8:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   11cf8:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   11d08:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   11d18:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   11d28:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   11d38:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   11d48:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   11d58:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   11d68:	32221202 43231303                       .."2..#C

00011d70 <g_ui8nCEpins>:
   11d70:	02070707 00080802 01020202 01010101     ................
   11d80:	01010101 01010101 01010101 01010101     ................
   11d90:	01010101 08010101 01010008 01010101     ................
   11da0:	00000101                                ....

00011da4 <am_hal_pwrctrl_peripheral_control>:
	...
   11db0:	00000001 00000004 00000004 00000002     ................
   11dc0:	00000008 00000008 00000004 00000008     ................
   11dd0:	00000008 00000008 00000008 00000008     ................
   11de0:	00000010 00000010 00000010 00000020     ............ ...
   11df0:	00000010 00000010 00000040 00000010     ........@.......
   11e00:	00000010 00000080 00000004 00000004     ................
   11e10:	00000100 00000004 00000004 00000200     ................
   11e20:	00000020 00000020 00000400 00000004      ... ...........
   11e30:	00000004 00000800 00000040 00000040     ........@...@...
   11e40:	00001000 00000080 00000080 00002000     ............. ..
   11e50:	00000100 00000100                       ........

00011e58 <gAmHalCmdQReg>:
   11e58:	50004294 50004298 500042ac 500042b0     .B.P.B.P.B.P.B.P
   11e68:	500042a8 00008000 5000429c 00000001     .B.P.....B.P....
   11e78:	00000004 00000002 50005294 50005298     .........R.P.R.P
   11e88:	500052ac 500052b0 500052a8 00008000     .R.P.R.P.R.P....
   11e98:	5000529c 00000001 00000004 00000002     .R.P............
   11ea8:	50006294 50006298 500062ac 500062b0     .b.P.b.P.b.P.b.P
   11eb8:	500062a8 00008000 5000629c 00000001     .b.P.....b.P....
   11ec8:	00000004 00000002 50007294 50007298     .........r.P.r.P
   11ed8:	500072ac 500072b0 500072a8 00008000     .r.P.r.P.r.P....
   11ee8:	5000729c 00000001 00000004 00000002     .r.P............
   11ef8:	50008294 50008298 500082ac 500082b0     ...P...P...P...P
   11f08:	500082a8 00008000 5000829c 00000001     ...P.......P....
   11f18:	00000004 00000002 50009294 50009298     ...........P...P
   11f28:	500092ac 500092b0 500092a8 00008000     ...P...P...P....
   11f38:	5000929c 00000001 00000004 00000002     ...P............
   11f48:	500142a0 500142a8 500142c0 500142c4     .B.P.B.P.B.P.B.P
   11f58:	500142b8 00004000 500142ac 00000001     .B.P.@...B.P....
   11f68:	00000004 00000008 5000c248 5000c24c     ........H..PL..P
   11f78:	5000c260 5000c264 5000c25c 00008000     `..Pd..P\..P....
   11f88:	5000c250 00000001 00000004 00000002     P..P............

00011f98 <g_AM_BSP_GPIO_IOM0_CS>:
   11f98:	00000701                                ....

00011f9c <g_AM_BSP_GPIO_IOM0_MISO>:
   11f9c:	00000001                                ....

00011fa0 <g_AM_BSP_GPIO_IOM0_MOSI>:
   11fa0:	00000301                                ....

00011fa4 <g_AM_BSP_GPIO_IOM0_SCK>:
   11fa4:	00000301                                ....

00011fa8 <g_AM_BSP_GPIO_IOM0_SCL>:
   11fa8:	00000b40                                @...

00011fac <g_AM_BSP_GPIO_IOM0_SDA>:
   11fac:	00000b40                                @...

00011fb0 <g_AM_BSP_GPIO_IOM1_CS>:
   11fb0:	00110701                                ....

00011fb4 <g_AM_BSP_GPIO_IOM1_MISO>:
   11fb4:	00010001                                ....

00011fb8 <g_AM_BSP_GPIO_IOM1_MOSI>:
   11fb8:	00010301                                ....

00011fbc <g_AM_BSP_GPIO_IOM1_SCK>:
   11fbc:	00010301                                ....

00011fc0 <g_AM_BSP_GPIO_IOM1_SCL>:
   11fc0:	00010b40                                @...

00011fc4 <g_AM_BSP_GPIO_IOM1_SDA>:
   11fc4:	00010b40                                @...

00011fc8 <g_AM_BSP_GPIO_IOM2_CS>:
   11fc8:	001a0701                                ....

00011fcc <g_AM_BSP_GPIO_IOM2_MISO>:
   11fcc:	00020005                                ....

00011fd0 <g_AM_BSP_GPIO_IOM2_MOSI>:
   11fd0:	00020305                                ....

00011fd4 <g_AM_BSP_GPIO_IOM2_SCK>:
   11fd4:	00020305                                ....

00011fd8 <g_AM_BSP_GPIO_IOM2_SCL>:
   11fd8:	00020b44                                D...

00011fdc <g_AM_BSP_GPIO_IOM2_SDA>:
   11fdc:	00020b44                                D...

00011fe0 <g_AM_BSP_GPIO_IOM3_CS>:
   11fe0:	00030701                                ....

00011fe4 <g_AM_BSP_GPIO_IOM3_MISO>:
   11fe4:	00030005                                ....

00011fe8 <g_AM_BSP_GPIO_IOM3_MOSI>:
   11fe8:	00030305                                ....

00011fec <g_AM_BSP_GPIO_IOM3_SCK>:
   11fec:	00030305                                ....

00011ff0 <g_AM_BSP_GPIO_IOM3_SCL>:
   11ff0:	00030b44                                D...

00011ff4 <g_AM_BSP_GPIO_IOM3_SDA>:
   11ff4:	00030b44                                D...

00011ff8 <g_AM_BSP_GPIO_IOM4_CS>:
   11ff8:	000c0701                                ....

00011ffc <g_AM_BSP_GPIO_IOM4_MISO>:
   11ffc:	00040005                                ....

00012000 <g_AM_BSP_GPIO_IOM4_MOSI>:
   12000:	00040305                                ....

00012004 <g_AM_BSP_GPIO_IOM4_SCK>:
   12004:	00040305                                ....

00012008 <g_AM_BSP_GPIO_IOM4_SCL>:
   12008:	00040b44                                D...

0001200c <g_AM_BSP_GPIO_IOM4_SDA>:
   1200c:	00040b44                                D...

00012010 <g_AM_BSP_GPIO_IOM5_CS>:
   12010:	00050701                                ....

00012014 <g_AM_BSP_GPIO_IOM5_MISO>:
   12014:	00050005                                ....

00012018 <g_AM_BSP_GPIO_IOM5_MOSI>:
   12018:	00050305                                ....

0001201c <g_AM_BSP_GPIO_IOM5_SCK>:
   1201c:	00050305                                ....

00012020 <g_AM_BSP_GPIO_IOM5_SCL>:
   12020:	00050b44                                D...

00012024 <g_AM_BSP_GPIO_IOM5_SDA>:
   12024:	00050b44                                D...

00012028 <g_AM_BSP_GPIO_ITM_SWO>:
   12028:	00000002                                ....
