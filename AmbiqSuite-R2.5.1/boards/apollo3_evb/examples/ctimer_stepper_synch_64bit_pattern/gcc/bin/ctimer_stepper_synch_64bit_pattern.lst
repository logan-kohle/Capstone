
bin/ctimer_stepper_synch_64bit_pattern.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 b5 d1 00 00 1d d2 00 00 49 c3 00 00     ............I...
    c010:	1f d2 00 00 1f d2 00 00 1f d2 00 00 00 00 00 00     ................
	...
    c02c:	21 d2 00 00 21 d2 00 00 00 00 00 00 21 d2 00 00     !...!.......!...
    c03c:	21 d2 00 00 21 d2 00 00 21 d2 00 00 21 d2 00 00     !...!...!...!...
    c04c:	21 d2 00 00 21 d2 00 00 21 d2 00 00 21 d2 00 00     !...!...!...!...
    c05c:	21 d2 00 00 21 d2 00 00 21 d2 00 00 21 d2 00 00     !...!...!...!...
    c06c:	21 d2 00 00 21 d2 00 00 21 d2 00 00 21 d2 00 00     !...!...!...!...
    c07c:	21 d2 00 00 21 d2 00 00 21 d2 00 00 21 d2 00 00     !...!...!...!...
    c08c:	21 d2 00 00 21 d2 00 00 21 d2 00 00 21 d2 00 00     !...!...!...!...
    c09c:	21 d2 00 00 21 d2 00 00 21 d2 00 00 21 d2 00 00     !...!...!...!...
    c0ac:	21 d2 00 00 21 d2 00 00 21 d2 00 00 21 d2 00 00     !...!...!...!...
    c0bc:	21 d2 00 00                                         !...

0000c0c0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <initialize_trigger_counter>:
// Stepper Pattern helper functions.
//
//*****************************************************************************
void
initialize_trigger_counter(void)
{
    c1a0:	b500      	push	{lr}
    c1a2:	b083      	sub	sp, #12
    //
    // Set up timer A0.
    //
    am_hal_ctimer_clear(0, AM_HAL_CTIMER_TIMERA);
    c1a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c1a8:	2000      	movs	r0, #0
    c1aa:	f001 fba9 	bl	d900 <am_hal_ctimer_clear>
    am_hal_ctimer_config_single(0, AM_HAL_CTIMER_TIMERA,
    c1ae:	2256      	movs	r2, #86	; 0x56
    c1b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c1b4:	2000      	movs	r0, #0
    c1b6:	f001 fb0d 	bl	d7d4 <am_hal_ctimer_config_single>
                               AM_HAL_CTIMER_LFRC_32HZ) );

    //
    // Set the A0 Timer period to /32 or 1Hz.
    //
    am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, 32, 0);
    c1ba:	2300      	movs	r3, #0
    c1bc:	2220      	movs	r2, #32
    c1be:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c1c2:	2000      	movs	r0, #0
    c1c4:	f001 fd70 	bl	dca8 <am_hal_ctimer_period_set>
    //
    // Configure timer A0 output on pin #12.
    //
    am_hal_ctimer_output_config(0, AM_HAL_CTIMER_TIMERA, TRIG_GPIO, 
    c1c8:	2303      	movs	r3, #3
    c1ca:	9300      	str	r3, [sp, #0]
    c1cc:	2300      	movs	r3, #0
    c1ce:	220c      	movs	r2, #12
    c1d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c1d4:	2000      	movs	r0, #0
    c1d6:	f001 fba9 	bl	d92c <am_hal_ctimer_output_config>
                              AM_HAL_GPIO_PIN_DRIVESTRENGTH_12MA);

    //
    // Start the timer.
    //
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
    c1da:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c1de:	2000      	movs	r0, #0
    c1e0:	f001 fb60 	bl	d8a4 <am_hal_ctimer_start>
}
    c1e4:	bf00      	nop
    c1e6:	b003      	add	sp, #12
    c1e8:	f85d fb04 	ldr.w	pc, [sp], #4

0000c1ec <initialize_pattern_counter>:
                           uint64_t ui64Pattern,
                           uint32_t ui32PatternLen,
                           uint32_t ui32Trigger,
                           uint32_t ui32OutputPin,
                           uint32_t ui32PatternClock)
{
    c1ec:	b500      	push	{lr}
    c1ee:	b087      	sub	sp, #28
    c1f0:	9005      	str	r0, [sp, #20]
    c1f2:	9104      	str	r1, [sp, #16]
    c1f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    //
    // Set up timer.
    //
    am_hal_ctimer_clear(ui32TimerNumber, ui32TimerSegment);
    c1f8:	9904      	ldr	r1, [sp, #16]
    c1fa:	9805      	ldr	r0, [sp, #20]
    c1fc:	f001 fb80 	bl	d900 <am_hal_ctimer_clear>

    am_hal_ctimer_config_single(ui32TimerNumber, ui32TimerSegment,
    c200:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    c206:	461a      	mov	r2, r3
    c208:	9904      	ldr	r1, [sp, #16]
    c20a:	9805      	ldr	r0, [sp, #20]
    c20c:	f001 fae2 	bl	d7d4 <am_hal_ctimer_config_single>
                               ui32PatternClock) );

    //
    // Set the pattern in the CMPR registers.
    //
    am_hal_ctimer_compare_set(ui32TimerNumber, ui32TimerSegment, 0, 
    c210:	9b02      	ldr	r3, [sp, #8]
    c212:	b29b      	uxth	r3, r3
    c214:	2200      	movs	r2, #0
    c216:	9904      	ldr	r1, [sp, #16]
    c218:	9805      	ldr	r0, [sp, #20]
    c21a:	f001 fcc1 	bl	dba0 <am_hal_ctimer_compare_set>
                            (uint32_t)(ui64Pattern & 0xFFFF));
    am_hal_ctimer_compare_set(ui32TimerNumber, ui32TimerSegment, 1, 
                            (uint32_t)((ui64Pattern >> 16) & 0xFFFF));
    c21e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c222:	f04f 0200 	mov.w	r2, #0
    c226:	f04f 0300 	mov.w	r3, #0
    c22a:	0c02      	lsrs	r2, r0, #16
    c22c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    c230:	0c0b      	lsrs	r3, r1, #16
    am_hal_ctimer_compare_set(ui32TimerNumber, ui32TimerSegment, 1, 
    c232:	4613      	mov	r3, r2
    c234:	b29b      	uxth	r3, r3
    c236:	2201      	movs	r2, #1
    c238:	9904      	ldr	r1, [sp, #16]
    c23a:	9805      	ldr	r0, [sp, #20]
    c23c:	f001 fcb0 	bl	dba0 <am_hal_ctimer_compare_set>
    am_hal_ctimer_aux_compare_set(ui32TimerNumber, ui32TimerSegment, 0, 
                            (uint32_t)((ui64Pattern >> 32) & 0xFFFF));
    c240:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c244:	f04f 0200 	mov.w	r2, #0
    c248:	f04f 0300 	mov.w	r3, #0
    c24c:	000a      	movs	r2, r1
    c24e:	2300      	movs	r3, #0
    am_hal_ctimer_aux_compare_set(ui32TimerNumber, ui32TimerSegment, 0, 
    c250:	4613      	mov	r3, r2
    c252:	b29b      	uxth	r3, r3
    c254:	2200      	movs	r2, #0
    c256:	9904      	ldr	r1, [sp, #16]
    c258:	9805      	ldr	r0, [sp, #20]
    c25a:	f001 fce3 	bl	dc24 <am_hal_ctimer_aux_compare_set>
    am_hal_ctimer_aux_compare_set(ui32TimerNumber, ui32TimerSegment, 1, 
                            (uint32_t)((ui64Pattern >> 48) & 0xFFFF));
    c25e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c262:	f04f 0200 	mov.w	r2, #0
    c266:	f04f 0300 	mov.w	r3, #0
    c26a:	0c0a      	lsrs	r2, r1, #16
    c26c:	2300      	movs	r3, #0
    am_hal_ctimer_aux_compare_set(ui32TimerNumber, ui32TimerSegment, 1, 
    c26e:	4613      	mov	r3, r2
    c270:	b29b      	uxth	r3, r3
    c272:	2201      	movs	r2, #1
    c274:	9904      	ldr	r1, [sp, #16]
    c276:	9805      	ldr	r0, [sp, #20]
    c278:	f001 fcd4 	bl	dc24 <am_hal_ctimer_aux_compare_set>
    //
    // Set the timer trigger and pattern length.
    //
    am_hal_ctimer_config_trigger(ui32TimerNumber, ui32TimerSegment,
                               ( (ui32PatternLen << CTIMER_AUX0_TMRA0LMT_Pos) |
                                 ( ui32Trigger << CTIMER_AUX0_TMRA0TRIG_Pos) ) );
    c27c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c27e:	01da      	lsls	r2, r3, #7
    am_hal_ctimer_config_trigger(ui32TimerNumber, ui32TimerSegment,
    c280:	9b08      	ldr	r3, [sp, #32]
    c282:	4313      	orrs	r3, r2
    c284:	461a      	mov	r2, r3
    c286:	9904      	ldr	r1, [sp, #16]
    c288:	9805      	ldr	r0, [sp, #20]
    c28a:	f001 faf1 	bl	d870 <am_hal_ctimer_config_trigger>

    //
    // Configure timer output pin.
    //
    am_hal_ctimer_output_config(ui32TimerNumber, ui32TimerSegment, ui32OutputPin, 
    c28e:	2303      	movs	r3, #3
    c290:	9300      	str	r3, [sp, #0]
    c292:	2300      	movs	r3, #0
    c294:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c296:	9904      	ldr	r1, [sp, #16]
    c298:	9805      	ldr	r0, [sp, #20]
    c29a:	f001 fb47 	bl	d92c <am_hal_ctimer_output_config>
                              AM_HAL_GPIO_PIN_DRIVESTRENGTH_12MA);

    //
    // Start the timer.
    //
    am_hal_ctimer_start(ui32TimerNumber, ui32TimerSegment);
    c29e:	9904      	ldr	r1, [sp, #16]
    c2a0:	9805      	ldr	r0, [sp, #20]
    c2a2:	f001 faff 	bl	d8a4 <am_hal_ctimer_start>
}
    c2a6:	bf00      	nop
    c2a8:	b007      	add	sp, #28
    c2aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000c2b0 <global_disable>:

void
global_disable(void)
{
    CTIMER->GLOBEN = 0x0;
    c2b0:	4b02      	ldr	r3, [pc, #8]	; (c2bc <global_disable+0xc>)
    c2b2:	2200      	movs	r2, #0
    c2b4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    c2b8:	bf00      	nop
    c2ba:	4770      	bx	lr
    c2bc:	40008000 	.word	0x40008000

0000c2c0 <global_enable>:

void
global_enable(void)
{
    CTIMER->GLOBEN = 0xffff;
    c2c0:	4b03      	ldr	r3, [pc, #12]	; (c2d0 <global_enable+0x10>)
    c2c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    c2c6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    c2ca:	bf00      	nop
    c2cc:	4770      	bx	lr
    c2ce:	bf00      	nop
    c2d0:	40008000 	.word	0x40008000

0000c2d4 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
    c2d4:	b500      	push	{lr}
    c2d6:	b085      	sub	sp, #20
    //
    // Set the clock frequency.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c2d8:	2100      	movs	r1, #0
    c2da:	2000      	movs	r0, #0
    c2dc:	f001 f9c0 	bl	d660 <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c2e0:	4817      	ldr	r0, [pc, #92]	; (c340 <main+0x6c>)
    c2e2:	f001 f815 	bl	d310 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c2e6:	f001 f837 	bl	d358 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    c2ea:	f000 ff9b 	bl	d224 <am_bsp_low_power_init>

    //
    // Among other things, am_bsp_low_power_init() stops the XT oscillator,
    // which is needed for this example.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_LFRC_START, 0);
    c2ee:	2100      	movs	r1, #0
    c2f0:	2002      	movs	r0, #2
    c2f2:	f001 f9b5 	bl	d660 <am_hal_clkgen_control>

    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_bsp_itm_printf_enable();
    c2f6:	f000 ffeb 	bl	d2d0 <am_bsp_itm_printf_enable>

    //
    // Clear the terminal and print the banner.
    //
    am_util_stdio_terminal_clear();
    c2fa:	f000 ff53 	bl	d1a4 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("CTimer 64 bits pattern example\n");
    c2fe:	4811      	ldr	r0, [pc, #68]	; (c344 <main+0x70>)
    c300:	f000 ff30 	bl	d164 <am_util_stdio_printf>

    //
    // We are done printing. Disable debug printf messages on ITM.
    //
    am_bsp_debug_printf_disable();
    c304:	f000 ffae 	bl	d264 <am_bsp_debug_printf_disable>

    //
    // Disable all the counters.
    //
    global_disable();
    c308:	f7ff ffd2 	bl	c2b0 <global_disable>

    //
    // Set up the base counter controlling the pattern overall period (1Hz).
    //
    initialize_trigger_counter();
    c30c:	f7ff ff48 	bl	c1a0 <initialize_trigger_counter>

    initialize_pattern_counter(1, AM_HAL_CTIMER_TIMERA, 0x2222222222222222, 
    c310:	2314      	movs	r3, #20
    c312:	9303      	str	r3, [sp, #12]
    c314:	2312      	movs	r3, #18
    c316:	9302      	str	r3, [sp, #8]
    c318:	2304      	movs	r3, #4
    c31a:	9301      	str	r3, [sp, #4]
    c31c:	233f      	movs	r3, #63	; 0x3f
    c31e:	9300      	str	r3, [sp, #0]
    c320:	f04f 3222 	mov.w	r2, #572662306	; 0x22222222
    c324:	f04f 3322 	mov.w	r3, #572662306	; 0x22222222
    c328:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c32c:	2001      	movs	r0, #1
    c32e:	f7ff ff5d 	bl	c1ec <initialize_pattern_counter>
                               63, CTIMER_AUX1_TMRA1TRIG_A0OUT, PATTERN_GPIO,
                               AM_HAL_CTIMER_LFRC_512HZ);
    //
    // Enable all the counters.
    //
    global_enable();
    c332:	f7ff ffc5 	bl	c2c0 <global_enable>
    while (1)
    {
        //
        // Go to Deep Sleep.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c336:	2001      	movs	r0, #1
    c338:	f002 f952 	bl	e5e0 <am_hal_sysctrl_sleep>
    c33c:	e7fb      	b.n	c336 <main+0x62>
    c33e:	bf00      	nop
    c340:	0000e890 	.word	0x0000e890
    c344:	0000e858 	.word	0x0000e858

0000c348 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    c348:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    c34a:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    c34e:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    c350:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    c354:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    c358:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c35c:	f000 f80a 	bl	c374 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    c360:	bd01      	pop	{r0, pc}
}
    c362:	bf00      	nop
    c364:	4618      	mov	r0, r3

0000c366 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c366:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c368:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c36a:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c36c:	4770      	bx	lr
}
    c36e:	bf00      	nop
    c370:	4618      	mov	r0, r3
	...

0000c374 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c374:	b500      	push	{lr}
    c376:	b097      	sub	sp, #92	; 0x5c
    c378:	9001      	str	r0, [sp, #4]
    volatile am_fault_t sFaultData;
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_t  sHalFaultData = {0};
#else
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c37a:	ab03      	add	r3, sp, #12
    c37c:	2200      	movs	r2, #0
    c37e:	601a      	str	r2, [r3, #0]
    c380:	605a      	str	r2, [r3, #4]
    c382:	609a      	str	r2, [r3, #8]
    c384:	60da      	str	r2, [r3, #12]
    c386:	611a      	str	r2, [r3, #16]
    c388:	615a      	str	r2, [r3, #20]
#endif // if defined(AM_PART_APOLLO4)

    uint32_t u32Mask = 0;
    c38a:	2300      	movs	r3, #0
    c38c:	9315      	str	r3, [sp, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c38e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c390:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c392:	4b2e      	ldr	r3, [pc, #184]	; (c44c <am_util_faultisr_collect_data+0xd8>)
    c394:	681b      	ldr	r3, [r3, #0]
    c396:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c398:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c39a:	b2db      	uxtb	r3, r3
    c39c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c3a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c3a2:	0a1b      	lsrs	r3, r3, #8
    c3a4:	b2db      	uxtb	r3, r3
    c3a6:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c3aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c3ac:	0c1b      	lsrs	r3, r3, #16
    c3ae:	b29b      	uxth	r3, r3
    c3b0:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c3b4:	4b26      	ldr	r3, [pc, #152]	; (c450 <am_util_faultisr_collect_data+0xdc>)
    c3b6:	681b      	ldr	r3, [r3, #0]
    c3b8:	9312      	str	r3, [sp, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c3ba:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
    c3be:	b2db      	uxtb	r3, r3
    c3c0:	f003 0302 	and.w	r3, r3, #2
    c3c4:	2b00      	cmp	r3, #0
    c3c6:	d005      	beq.n	c3d4 <am_util_faultisr_collect_data+0x60>
    c3c8:	9901      	ldr	r1, [sp, #4]
    c3ca:	2006      	movs	r0, #6
    c3cc:	f7ff ffcb 	bl	c366 <getStackedReg>
    c3d0:	4603      	mov	r3, r0
    c3d2:	e001      	b.n	c3d8 <am_util_faultisr_collect_data+0x64>
    c3d4:	f04f 33ff 	mov.w	r3, #4294967295
    c3d8:	9311      	str	r3, [sp, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c3da:	9901      	ldr	r1, [sp, #4]
    c3dc:	2000      	movs	r0, #0
    c3de:	f7ff ffc2 	bl	c366 <getStackedReg>
    c3e2:	4603      	mov	r3, r0
    c3e4:	9309      	str	r3, [sp, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c3e6:	9901      	ldr	r1, [sp, #4]
    c3e8:	2001      	movs	r0, #1
    c3ea:	f7ff ffbc 	bl	c366 <getStackedReg>
    c3ee:	4603      	mov	r3, r0
    c3f0:	930a      	str	r3, [sp, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c3f2:	9901      	ldr	r1, [sp, #4]
    c3f4:	2002      	movs	r0, #2
    c3f6:	f7ff ffb6 	bl	c366 <getStackedReg>
    c3fa:	4603      	mov	r3, r0
    c3fc:	930b      	str	r3, [sp, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c3fe:	9901      	ldr	r1, [sp, #4]
    c400:	2003      	movs	r0, #3
    c402:	f7ff ffb0 	bl	c366 <getStackedReg>
    c406:	4603      	mov	r3, r0
    c408:	930c      	str	r3, [sp, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c40a:	9901      	ldr	r1, [sp, #4]
    c40c:	2004      	movs	r0, #4
    c40e:	f7ff ffaa 	bl	c366 <getStackedReg>
    c412:	4603      	mov	r3, r0
    c414:	930d      	str	r3, [sp, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c416:	9901      	ldr	r1, [sp, #4]
    c418:	2005      	movs	r0, #5
    c41a:	f7ff ffa4 	bl	c366 <getStackedReg>
    c41e:	4603      	mov	r3, r0
    c420:	930e      	str	r3, [sp, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c422:	9901      	ldr	r1, [sp, #4]
    c424:	2006      	movs	r0, #6
    c426:	f7ff ff9e 	bl	c366 <getStackedReg>
    c42a:	4603      	mov	r3, r0
    c42c:	930f      	str	r3, [sp, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c42e:	9901      	ldr	r1, [sp, #4]
    c430:	2007      	movs	r0, #7
    c432:	f7ff ff98 	bl	c366 <getStackedReg>
    c436:	4603      	mov	r3, r0
    c438:	9310      	str	r3, [sp, #64]	; 0x40
    //
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_get(&sHalFaultData);
#else
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c43a:	ab03      	add	r3, sp, #12
    c43c:	4619      	mov	r1, r3
    c43e:	2002      	movs	r0, #2
    c440:	f001 fef4 	bl	e22c <am_hal_mcuctrl_info_get>
      am_util_stdio_printf("   SYS Fault Address: 0x%08X\n", sHalFaultData.ui32SYS);
    }

#endif

    u32Mask = 0;
    c444:	2300      	movs	r3, #0
    c446:	9315      	str	r3, [sp, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    c448:	e7fe      	b.n	c448 <am_util_faultisr_collect_data+0xd4>
    c44a:	bf00      	nop
    c44c:	e000ed28 	.word	0xe000ed28
    c450:	e000ed38 	.word	0xe000ed38

0000c454 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    c454:	b082      	sub	sp, #8
    c456:	9001      	str	r0, [sp, #4]
    g_pfnCharPrint = pfnCharPrint;
    c458:	4a02      	ldr	r2, [pc, #8]	; (c464 <am_util_stdio_printf_init+0x10>)
    c45a:	9b01      	ldr	r3, [sp, #4]
    c45c:	6013      	str	r3, [r2, #0]
}
    c45e:	bf00      	nop
    c460:	b002      	add	sp, #8
    c462:	4770      	bx	lr
    c464:	10001044 	.word	0x10001044

0000c468 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c468:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c46c:	b098      	sub	sp, #96	; 0x60
    c46e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c472:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c476:	f04f 0000 	mov.w	r0, #0
    c47a:	f04f 0100 	mov.w	r1, #0
    c47e:	0018      	movs	r0, r3
    c480:	2100      	movs	r1, #0
    c482:	ea50 0301 	orrs.w	r3, r0, r1
    c486:	f000 80b0 	beq.w	c5ea <divu64_10+0x182>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c48a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c48e:	f04f 0400 	mov.w	r4, #0
    c492:	f04f 0500 	mov.w	r5, #0
    c496:	0854      	lsrs	r4, r2, #1
    c498:	ea44 74c3 	orr.w	r4, r4, r3, lsl #31
    c49c:	085d      	lsrs	r5, r3, #1
    c49e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c4a2:	f04f 0000 	mov.w	r0, #0
    c4a6:	f04f 0100 	mov.w	r1, #0
    c4aa:	0890      	lsrs	r0, r2, #2
    c4ac:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
    c4b0:	0899      	lsrs	r1, r3, #2
    c4b2:	eb14 0a00 	adds.w	sl, r4, r0
    c4b6:	eb45 0b01 	adc.w	fp, r5, r1
    c4ba:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
        q64 += (q64 >> 4);
    c4be:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c4c2:	f04f 0000 	mov.w	r0, #0
    c4c6:	f04f 0100 	mov.w	r1, #0
    c4ca:	0910      	lsrs	r0, r2, #4
    c4cc:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
    c4d0:	0919      	lsrs	r1, r3, #4
    c4d2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c4d6:	1814      	adds	r4, r2, r0
    c4d8:	9402      	str	r4, [sp, #8]
    c4da:	414b      	adcs	r3, r1
    c4dc:	9303      	str	r3, [sp, #12]
    c4de:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    c4e2:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 8);
    c4e6:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c4ea:	f04f 0000 	mov.w	r0, #0
    c4ee:	f04f 0100 	mov.w	r1, #0
    c4f2:	0a10      	lsrs	r0, r2, #8
    c4f4:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
    c4f8:	0a19      	lsrs	r1, r3, #8
    c4fa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c4fe:	1814      	adds	r4, r2, r0
    c500:	9404      	str	r4, [sp, #16]
    c502:	414b      	adcs	r3, r1
    c504:	9305      	str	r3, [sp, #20]
    c506:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    c50a:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 16);
    c50e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c512:	f04f 0000 	mov.w	r0, #0
    c516:	f04f 0100 	mov.w	r1, #0
    c51a:	0c10      	lsrs	r0, r2, #16
    c51c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    c520:	0c19      	lsrs	r1, r3, #16
    c522:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c526:	1814      	adds	r4, r2, r0
    c528:	9406      	str	r4, [sp, #24]
    c52a:	414b      	adcs	r3, r1
    c52c:	9307      	str	r3, [sp, #28]
    c52e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
    c532:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 32);
    c536:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c53a:	f04f 0000 	mov.w	r0, #0
    c53e:	f04f 0100 	mov.w	r1, #0
    c542:	0018      	movs	r0, r3
    c544:	2100      	movs	r1, #0
    c546:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c54a:	1814      	adds	r4, r2, r0
    c54c:	9408      	str	r4, [sp, #32]
    c54e:	414b      	adcs	r3, r1
    c550:	9309      	str	r3, [sp, #36]	; 0x24
    c552:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
    c556:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 >>= 3;
    c55a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    c55e:	f04f 0200 	mov.w	r2, #0
    c562:	f04f 0300 	mov.w	r3, #0
    c566:	08c2      	lsrs	r2, r0, #3
    c568:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    c56c:	08cb      	lsrs	r3, r1, #3
    c56e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
        r64 = ui64Val - q64*10;
    c572:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
    c576:	4622      	mov	r2, r4
    c578:	462b      	mov	r3, r5
    c57a:	f04f 0000 	mov.w	r0, #0
    c57e:	f04f 0100 	mov.w	r1, #0
    c582:	0099      	lsls	r1, r3, #2
    c584:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
    c588:	0090      	lsls	r0, r2, #2
    c58a:	4602      	mov	r2, r0
    c58c:	460b      	mov	r3, r1
    c58e:	1916      	adds	r6, r2, r4
    c590:	eb43 0705 	adc.w	r7, r3, r5
    c594:	19b3      	adds	r3, r6, r6
    c596:	930a      	str	r3, [sp, #40]	; 0x28
    c598:	eb47 0307 	adc.w	r3, r7, r7
    c59c:	930b      	str	r3, [sp, #44]	; 0x2c
    c59e:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    c5a2:	4630      	mov	r0, r6
    c5a4:	4639      	mov	r1, r7
    c5a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c5aa:	1a14      	subs	r4, r2, r0
    c5ac:	940c      	str	r4, [sp, #48]	; 0x30
    c5ae:	eb63 0301 	sbc.w	r3, r3, r1
    c5b2:	930d      	str	r3, [sp, #52]	; 0x34
    c5b4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    c5b8:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
        return q64 + ((r64 + 6) >> 4);
    c5bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    c5c0:	f112 0806 	adds.w	r8, r2, #6
    c5c4:	f143 0900 	adc.w	r9, r3, #0
    c5c8:	f04f 0200 	mov.w	r2, #0
    c5cc:	f04f 0300 	mov.w	r3, #0
    c5d0:	ea4f 1218 	mov.w	r2, r8, lsr #4
    c5d4:	ea42 7209 	orr.w	r2, r2, r9, lsl #28
    c5d8:	ea4f 1319 	mov.w	r3, r9, lsr #4
    c5dc:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    c5e0:	1814      	adds	r4, r2, r0
    c5e2:	9400      	str	r4, [sp, #0]
    c5e4:	414b      	adcs	r3, r1
    c5e6:	9301      	str	r3, [sp, #4]
    c5e8:	e02a      	b.n	c640 <divu64_10+0x1d8>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    c5ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c5ec:	9317      	str	r3, [sp, #92]	; 0x5c
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c5ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c5f0:	085a      	lsrs	r2, r3, #1
    c5f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c5f4:	089b      	lsrs	r3, r3, #2
    c5f6:	4413      	add	r3, r2
    c5f8:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 4);
    c5fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c5fc:	091b      	lsrs	r3, r3, #4
    c5fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c600:	4413      	add	r3, r2
    c602:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 8);
    c604:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c606:	0a1b      	lsrs	r3, r3, #8
    c608:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c60a:	4413      	add	r3, r2
    c60c:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 16);
    c60e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c610:	0c1b      	lsrs	r3, r3, #16
    c612:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c614:	4413      	add	r3, r2
    c616:	9316      	str	r3, [sp, #88]	; 0x58
        q32 >>= 3;
    c618:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c61a:	08db      	lsrs	r3, r3, #3
    c61c:	9316      	str	r3, [sp, #88]	; 0x58
        r32 = ui32Val - q32*10;
    c61e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c620:	4613      	mov	r3, r2
    c622:	009b      	lsls	r3, r3, #2
    c624:	4413      	add	r3, r2
    c626:	005b      	lsls	r3, r3, #1
    c628:	461a      	mov	r2, r3
    c62a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c62c:	1a9b      	subs	r3, r3, r2
    c62e:	9315      	str	r3, [sp, #84]	; 0x54
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c630:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c632:	3306      	adds	r3, #6
    c634:	091a      	lsrs	r2, r3, #4
    c636:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c638:	4413      	add	r3, r2
    c63a:	2200      	movs	r2, #0
    c63c:	9300      	str	r3, [sp, #0]
    c63e:	9201      	str	r2, [sp, #4]
    }
}
    c640:	e9dd 2300 	ldrd	r2, r3, [sp]
    c644:	4610      	mov	r0, r2
    c646:	4619      	mov	r1, r3
    c648:	b018      	add	sp, #96	; 0x60
    c64a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c64e:	4770      	bx	lr

0000c650 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    c650:	b500      	push	{lr}
    c652:	b085      	sub	sp, #20
    c654:	e9cd 0100 	strd	r0, r1, [sp]
    int iNDigits = ui64Val ? 0 : 1;
    c658:	9a00      	ldr	r2, [sp, #0]
    c65a:	9b01      	ldr	r3, [sp, #4]
    c65c:	4313      	orrs	r3, r2
    c65e:	2b00      	cmp	r3, #0
    c660:	bf0c      	ite	eq
    c662:	2301      	moveq	r3, #1
    c664:	2300      	movne	r3, #0
    c666:	b2db      	uxtb	r3, r3
    c668:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    c66a:	e008      	b.n	c67e <ndigits_in_u64+0x2e>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    c66c:	e9dd 0100 	ldrd	r0, r1, [sp]
    c670:	f7ff fefa 	bl	c468 <divu64_10>
    c674:	e9cd 0100 	strd	r0, r1, [sp]
        ++iNDigits;
    c678:	9b03      	ldr	r3, [sp, #12]
    c67a:	3301      	adds	r3, #1
    c67c:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    c67e:	e9dd 2300 	ldrd	r2, r3, [sp]
    c682:	4313      	orrs	r3, r2
    c684:	d1f2      	bne.n	c66c <ndigits_in_u64+0x1c>
    }

    return iNDigits;
    c686:	9b03      	ldr	r3, [sp, #12]
}
    c688:	4618      	mov	r0, r3
    c68a:	b005      	add	sp, #20
    c68c:	f85d fb04 	ldr.w	pc, [sp], #4

0000c690 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    c690:	b530      	push	{r4, r5, lr}
    c692:	b083      	sub	sp, #12
    c694:	e9cd 0100 	strd	r0, r1, [sp]
    if ( i64Val < 0 )
    c698:	e9dd 2300 	ldrd	r2, r3, [sp]
    c69c:	2b00      	cmp	r3, #0
    c69e:	da07      	bge.n	c6b0 <ndigits_in_i64+0x20>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    c6a0:	e9dd 2300 	ldrd	r2, r3, [sp]
    c6a4:	2100      	movs	r1, #0
    c6a6:	4254      	negs	r4, r2
    c6a8:	eb61 0503 	sbc.w	r5, r1, r3
    c6ac:	e9cd 4500 	strd	r4, r5, [sp]
    }

    return ndigits_in_u64((uint64_t) i64Val);
    c6b0:	e9dd 2300 	ldrd	r2, r3, [sp]
    c6b4:	4610      	mov	r0, r2
    c6b6:	4619      	mov	r1, r3
    c6b8:	f7ff ffca 	bl	c650 <ndigits_in_u64>
    c6bc:	4603      	mov	r3, r0
}
    c6be:	4618      	mov	r0, r3
    c6c0:	b003      	add	sp, #12
    c6c2:	bd30      	pop	{r4, r5, pc}

0000c6c4 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    c6c4:	b084      	sub	sp, #16
    c6c6:	e9cd 0100 	strd	r0, r1, [sp]
    int iDigits = ui64Val ? 0 : 1;
    c6ca:	9a00      	ldr	r2, [sp, #0]
    c6cc:	9b01      	ldr	r3, [sp, #4]
    c6ce:	4313      	orrs	r3, r2
    c6d0:	2b00      	cmp	r3, #0
    c6d2:	bf0c      	ite	eq
    c6d4:	2301      	moveq	r3, #1
    c6d6:	2300      	movne	r3, #0
    c6d8:	b2db      	uxtb	r3, r3
    c6da:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    c6dc:	e00e      	b.n	c6fc <ndigits_in_hex+0x38>
    {
        ui64Val >>= 4;
    c6de:	e9dd 0100 	ldrd	r0, r1, [sp]
    c6e2:	f04f 0200 	mov.w	r2, #0
    c6e6:	f04f 0300 	mov.w	r3, #0
    c6ea:	0902      	lsrs	r2, r0, #4
    c6ec:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    c6f0:	090b      	lsrs	r3, r1, #4
    c6f2:	e9cd 2300 	strd	r2, r3, [sp]
        ++iDigits;
    c6f6:	9b03      	ldr	r3, [sp, #12]
    c6f8:	3301      	adds	r3, #1
    c6fa:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    c6fc:	e9dd 2300 	ldrd	r2, r3, [sp]
    c700:	4313      	orrs	r3, r2
    c702:	d1ec      	bne.n	c6de <ndigits_in_hex+0x1a>
    }

    return iDigits;
    c704:	9b03      	ldr	r3, [sp, #12]
}
    c706:	4618      	mov	r0, r3
    c708:	b004      	add	sp, #16
    c70a:	4770      	bx	lr

0000c70c <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    c70c:	b086      	sub	sp, #24
    c70e:	9001      	str	r0, [sp, #4]
    c710:	9100      	str	r1, [sp, #0]
    bool bNeg = false;
    c712:	2300      	movs	r3, #0
    c714:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    c718:	2300      	movs	r3, #0
    c71a:	9304      	str	r3, [sp, #16]
    c71c:	2300      	movs	r3, #0
    c71e:	9303      	str	r3, [sp, #12]

    if ( *pcStr == '-')
    c720:	9b01      	ldr	r3, [sp, #4]
    c722:	781b      	ldrb	r3, [r3, #0]
    c724:	2b2d      	cmp	r3, #45	; 0x2d
    c726:	d11c      	bne.n	c762 <decstr_to_int+0x56>
    {
        bNeg = true;
    c728:	2301      	movs	r3, #1
    c72a:	f88d 3017 	strb.w	r3, [sp, #23]
        pcStr++;
    c72e:	9b01      	ldr	r3, [sp, #4]
    c730:	3301      	adds	r3, #1
    c732:	9301      	str	r3, [sp, #4]
        uCnt++;
    c734:	9b03      	ldr	r3, [sp, #12]
    c736:	3301      	adds	r3, #1
    c738:	9303      	str	r3, [sp, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c73a:	e012      	b.n	c762 <decstr_to_int+0x56>
    {
        ++uCnt;
    c73c:	9b03      	ldr	r3, [sp, #12]
    c73e:	3301      	adds	r3, #1
    c740:	9303      	str	r3, [sp, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    c742:	9a04      	ldr	r2, [sp, #16]
    c744:	4613      	mov	r3, r2
    c746:	009b      	lsls	r3, r3, #2
    c748:	4413      	add	r3, r2
    c74a:	005b      	lsls	r3, r3, #1
    c74c:	9304      	str	r3, [sp, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    c74e:	9b01      	ldr	r3, [sp, #4]
    c750:	781b      	ldrb	r3, [r3, #0]
    c752:	461a      	mov	r2, r3
    c754:	9b04      	ldr	r3, [sp, #16]
    c756:	4413      	add	r3, r2
    c758:	3b30      	subs	r3, #48	; 0x30
    c75a:	9304      	str	r3, [sp, #16]
        pcStr++;
    c75c:	9b01      	ldr	r3, [sp, #4]
    c75e:	3301      	adds	r3, #1
    c760:	9301      	str	r3, [sp, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c762:	9b01      	ldr	r3, [sp, #4]
    c764:	781b      	ldrb	r3, [r3, #0]
    c766:	2b2f      	cmp	r3, #47	; 0x2f
    c768:	d903      	bls.n	c772 <decstr_to_int+0x66>
    c76a:	9b01      	ldr	r3, [sp, #4]
    c76c:	781b      	ldrb	r3, [r3, #0]
    c76e:	2b39      	cmp	r3, #57	; 0x39
    c770:	d9e4      	bls.n	c73c <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    c772:	9b00      	ldr	r3, [sp, #0]
    c774:	2b00      	cmp	r3, #0
    c776:	d002      	beq.n	c77e <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    c778:	9b00      	ldr	r3, [sp, #0]
    c77a:	9a03      	ldr	r2, [sp, #12]
    c77c:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    c77e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c782:	2b00      	cmp	r3, #0
    c784:	d002      	beq.n	c78c <decstr_to_int+0x80>
    c786:	9b04      	ldr	r3, [sp, #16]
    c788:	425b      	negs	r3, r3
    c78a:	e000      	b.n	c78e <decstr_to_int+0x82>
    c78c:	9b04      	ldr	r3, [sp, #16]
}
    c78e:	4618      	mov	r0, r3
    c790:	b006      	add	sp, #24
    c792:	4770      	bx	lr

0000c794 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c794:	b500      	push	{lr}
    c796:	b091      	sub	sp, #68	; 0x44
    c798:	e9cd 0102 	strd	r0, r1, [sp, #8]
    c79c:	9201      	str	r2, [sp, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    c79e:	2300      	movs	r3, #0
    c7a0:	930f      	str	r3, [sp, #60]	; 0x3c
    c7a2:	2300      	movs	r3, #0
    c7a4:	930e      	str	r3, [sp, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    c7a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c7aa:	f7ff fe5d 	bl	c468 <divu64_10>
    c7ae:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    c7b2:	9902      	ldr	r1, [sp, #8]
    c7b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c7b6:	4613      	mov	r3, r2
    c7b8:	009b      	lsls	r3, r3, #2
    c7ba:	4413      	add	r3, r2
    c7bc:	005b      	lsls	r3, r3, #1
    c7be:	1acb      	subs	r3, r1, r3
    c7c0:	930b      	str	r3, [sp, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    c7c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c7c4:	b2da      	uxtb	r2, r3
    c7c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c7c8:	1c59      	adds	r1, r3, #1
    c7ca:	910f      	str	r1, [sp, #60]	; 0x3c
    c7cc:	3230      	adds	r2, #48	; 0x30
    c7ce:	b2d2      	uxtb	r2, r2
    c7d0:	3340      	adds	r3, #64	; 0x40
    c7d2:	446b      	add	r3, sp
    c7d4:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    c7d8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    c7dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
    } while ( ui64Val );
    c7e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c7e4:	4313      	orrs	r3, r2
    c7e6:	d1de      	bne.n	c7a6 <uint64_to_str+0x12>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    c7e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c7ea:	930e      	str	r3, [sp, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c7ec:	9b01      	ldr	r3, [sp, #4]
    c7ee:	2b00      	cmp	r3, #0
    c7f0:	d010      	beq.n	c814 <uint64_to_str+0x80>
    {
        while ( ix-- )
    c7f2:	e007      	b.n	c804 <uint64_to_str+0x70>
        {
            *pcBuf++ = tbuf[ix];
    c7f4:	9b01      	ldr	r3, [sp, #4]
    c7f6:	1c5a      	adds	r2, r3, #1
    c7f8:	9201      	str	r2, [sp, #4]
    c7fa:	a904      	add	r1, sp, #16
    c7fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    c7fe:	440a      	add	r2, r1
    c800:	7812      	ldrb	r2, [r2, #0]
    c802:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    c804:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c806:	1e5a      	subs	r2, r3, #1
    c808:	920f      	str	r2, [sp, #60]	; 0x3c
    c80a:	2b00      	cmp	r3, #0
    c80c:	d1f2      	bne.n	c7f4 <uint64_to_str+0x60>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    c80e:	9b01      	ldr	r3, [sp, #4]
    c810:	2200      	movs	r2, #0
    c812:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    c814:	9b0e      	ldr	r3, [sp, #56]	; 0x38
}
    c816:	4618      	mov	r0, r3
    c818:	b011      	add	sp, #68	; 0x44
    c81a:	f85d fb04 	ldr.w	pc, [sp], #4

0000c81e <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    c81e:	b08c      	sub	sp, #48	; 0x30
    c820:	e9cd 0102 	strd	r0, r1, [sp, #8]
    c824:	9201      	str	r2, [sp, #4]
    c826:	f88d 3003 	strb.w	r3, [sp, #3]
    int iNumDig, ix = 0;
    c82a:	2300      	movs	r3, #0
    c82c:	930b      	str	r3, [sp, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    c82e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c832:	4313      	orrs	r3, r2
    c834:	d135      	bne.n	c8a2 <uint64_to_hexstr+0x84>
    {
        tbuf[ix++] = '0';   // Print a '0'
    c836:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c838:	1c5a      	adds	r2, r3, #1
    c83a:	920b      	str	r2, [sp, #44]	; 0x2c
    c83c:	3330      	adds	r3, #48	; 0x30
    c83e:	446b      	add	r3, sp
    c840:	2230      	movs	r2, #48	; 0x30
    c842:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    c846:	e02c      	b.n	c8a2 <uint64_to_hexstr+0x84>
    {
        cCh = ui64Val & 0xf;
    c848:	f89d 3008 	ldrb.w	r3, [sp, #8]
    c84c:	f003 030f 	and.w	r3, r3, #15
    c850:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    c854:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    c858:	2b09      	cmp	r3, #9
    c85a:	d90b      	bls.n	c874 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    c85c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c860:	2b00      	cmp	r3, #0
    c862:	d001      	beq.n	c868 <uint64_to_hexstr+0x4a>
    c864:	2227      	movs	r2, #39	; 0x27
    c866:	e000      	b.n	c86a <uint64_to_hexstr+0x4c>
    c868:	2207      	movs	r2, #7
    c86a:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    c86e:	4413      	add	r3, r2
    c870:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    c874:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c876:	1c5a      	adds	r2, r3, #1
    c878:	920b      	str	r2, [sp, #44]	; 0x2c
    c87a:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    c87e:	3230      	adds	r2, #48	; 0x30
    c880:	b2d2      	uxtb	r2, r2
    c882:	3330      	adds	r3, #48	; 0x30
    c884:	446b      	add	r3, sp
    c886:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    c88a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c88e:	f04f 0200 	mov.w	r2, #0
    c892:	f04f 0300 	mov.w	r3, #0
    c896:	0902      	lsrs	r2, r0, #4
    c898:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    c89c:	090b      	lsrs	r3, r1, #4
    c89e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    while ( ui64Val )
    c8a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c8a6:	4313      	orrs	r3, r2
    c8a8:	d1ce      	bne.n	c848 <uint64_to_hexstr+0x2a>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    c8aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c8ac:	9309      	str	r3, [sp, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    c8ae:	9b01      	ldr	r3, [sp, #4]
    c8b0:	2b00      	cmp	r3, #0
    c8b2:	d010      	beq.n	c8d6 <uint64_to_hexstr+0xb8>
    {
        while (ix--)
    c8b4:	e007      	b.n	c8c6 <uint64_to_hexstr+0xa8>
        {
            *pcBuf++ = tbuf[ix];
    c8b6:	9b01      	ldr	r3, [sp, #4]
    c8b8:	1c5a      	adds	r2, r3, #1
    c8ba:	9201      	str	r2, [sp, #4]
    c8bc:	a904      	add	r1, sp, #16
    c8be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c8c0:	440a      	add	r2, r1
    c8c2:	7812      	ldrb	r2, [r2, #0]
    c8c4:	701a      	strb	r2, [r3, #0]
        while (ix--)
    c8c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c8c8:	1e5a      	subs	r2, r3, #1
    c8ca:	920b      	str	r2, [sp, #44]	; 0x2c
    c8cc:	2b00      	cmp	r3, #0
    c8ce:	d1f2      	bne.n	c8b6 <uint64_to_hexstr+0x98>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    c8d0:	9b01      	ldr	r3, [sp, #4]
    c8d2:	2200      	movs	r2, #0
    c8d4:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    c8d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    c8d8:	4618      	mov	r0, r3
    c8da:	b00c      	add	sp, #48	; 0x30
    c8dc:	4770      	bx	lr

0000c8de <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    c8de:	b084      	sub	sp, #16
    c8e0:	9001      	str	r0, [sp, #4]
    uint32_t ui32RetVal = 0;
    c8e2:	2300      	movs	r3, #0
    c8e4:	9303      	str	r3, [sp, #12]
    if ( !pcBuf )
    c8e6:	9b01      	ldr	r3, [sp, #4]
    c8e8:	2b00      	cmp	r3, #0
    c8ea:	d104      	bne.n	c8f6 <simple_strlen+0x18>
    {
        return ui32RetVal;
    c8ec:	9b03      	ldr	r3, [sp, #12]
    c8ee:	e009      	b.n	c904 <simple_strlen+0x26>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    c8f0:	9b03      	ldr	r3, [sp, #12]
    c8f2:	3301      	adds	r3, #1
    c8f4:	9303      	str	r3, [sp, #12]
    while ( *pcBuf++ )
    c8f6:	9b01      	ldr	r3, [sp, #4]
    c8f8:	1c5a      	adds	r2, r3, #1
    c8fa:	9201      	str	r2, [sp, #4]
    c8fc:	781b      	ldrb	r3, [r3, #0]
    c8fe:	2b00      	cmp	r3, #0
    c900:	d1f6      	bne.n	c8f0 <simple_strlen+0x12>
    }
    return ui32RetVal;
    c902:	9b03      	ldr	r3, [sp, #12]
}
    c904:	4618      	mov	r0, r3
    c906:	b004      	add	sp, #16
    c908:	4770      	bx	lr

0000c90a <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    c90a:	b086      	sub	sp, #24
    c90c:	9003      	str	r0, [sp, #12]
    c90e:	460b      	mov	r3, r1
    c910:	9201      	str	r2, [sp, #4]
    c912:	f88d 300b 	strb.w	r3, [sp, #11]
    int32_t i32Cnt = 0;
    c916:	2300      	movs	r3, #0
    c918:	9305      	str	r3, [sp, #20]

    if ( i32NumChars <= 0 )
    c91a:	9b01      	ldr	r3, [sp, #4]
    c91c:	2b00      	cmp	r3, #0
    c91e:	dc0d      	bgt.n	c93c <padbuffer+0x32>
    {
        return i32Cnt;
    c920:	9b05      	ldr	r3, [sp, #20]
    c922:	e011      	b.n	c948 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    c924:	9b03      	ldr	r3, [sp, #12]
    c926:	2b00      	cmp	r3, #0
    c928:	d005      	beq.n	c936 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    c92a:	9b03      	ldr	r3, [sp, #12]
    c92c:	1c5a      	adds	r2, r3, #1
    c92e:	9203      	str	r2, [sp, #12]
    c930:	f89d 200b 	ldrb.w	r2, [sp, #11]
    c934:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    c936:	9b05      	ldr	r3, [sp, #20]
    c938:	3301      	adds	r3, #1
    c93a:	9305      	str	r3, [sp, #20]
    while ( i32NumChars-- )
    c93c:	9b01      	ldr	r3, [sp, #4]
    c93e:	1e5a      	subs	r2, r3, #1
    c940:	9201      	str	r2, [sp, #4]
    c942:	2b00      	cmp	r3, #0
    c944:	d1ee      	bne.n	c924 <padbuffer+0x1a>
    }

    return i32Cnt;
    c946:	9b05      	ldr	r3, [sp, #20]
}
    c948:	4618      	mov	r0, r3
    c94a:	b006      	add	sp, #24
    c94c:	4770      	bx	lr
	...

0000c950 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    c950:	b5f0      	push	{r4, r5, r6, r7, lr}
    c952:	b08f      	sub	sp, #60	; 0x3c
    c954:	ed8d 0a03 	vstr	s0, [sp, #12]
    c958:	9002      	str	r0, [sp, #8]
    c95a:	9101      	str	r1, [sp, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    c95c:	9b02      	ldr	r3, [sp, #8]
    c95e:	681b      	ldr	r3, [r3, #0]
    c960:	9309      	str	r3, [sp, #36]	; 0x24
    if (iBufSize < 4)
    c962:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c964:	2b03      	cmp	r3, #3
    c966:	dc02      	bgt.n	c96e <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    c968:	f06f 0302 	mvn.w	r3, #2
    c96c:	e0e9      	b.n	cb42 <ftoa+0x1f2>
    }

    if (fValue == 0.0f)
    c96e:	eddd 7a03 	vldr	s15, [sp, #12]
    c972:	eef5 7a40 	vcmp.f32	s15, #0.0
    c976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c97a:	d104      	bne.n	c986 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    c97c:	9b02      	ldr	r3, [sp, #8]
    c97e:	4a72      	ldr	r2, [pc, #456]	; (cb48 <ftoa+0x1f8>)
    c980:	601a      	str	r2, [r3, #0]
        return 3;
    c982:	2303      	movs	r3, #3
    c984:	e0dd      	b.n	cb42 <ftoa+0x1f2>
    }

    pcBufInitial = pcBuf;
    c986:	9b02      	ldr	r3, [sp, #8]
    c988:	9308      	str	r3, [sp, #32]

    unFloatValue.F = fValue;
    c98a:	9b03      	ldr	r3, [sp, #12]
    c98c:	9304      	str	r3, [sp, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    c98e:	9b04      	ldr	r3, [sp, #16]
    c990:	15db      	asrs	r3, r3, #23
    c992:	b2db      	uxtb	r3, r3
    c994:	3b7f      	subs	r3, #127	; 0x7f
    c996:	9307      	str	r3, [sp, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    c998:	9b04      	ldr	r3, [sp, #16]
    c99a:	f3c3 0316 	ubfx	r3, r3, #0, #23
    c99e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    c9a2:	9306      	str	r3, [sp, #24]
    i32FracPart = 0;
    c9a4:	2300      	movs	r3, #0
    c9a6:	930c      	str	r3, [sp, #48]	; 0x30
    i32IntPart = 0;
    c9a8:	2300      	movs	r3, #0
    c9aa:	930d      	str	r3, [sp, #52]	; 0x34

    if (iExp2 >= 31)
    c9ac:	9b07      	ldr	r3, [sp, #28]
    c9ae:	2b1e      	cmp	r3, #30
    c9b0:	dd02      	ble.n	c9b8 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    c9b2:	f06f 0301 	mvn.w	r3, #1
    c9b6:	e0c4      	b.n	cb42 <ftoa+0x1f2>
    }
    else if (iExp2 < -23)
    c9b8:	9b07      	ldr	r3, [sp, #28]
    c9ba:	f113 0f17 	cmn.w	r3, #23
    c9be:	da02      	bge.n	c9c6 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    c9c0:	f04f 33ff 	mov.w	r3, #4294967295
    c9c4:	e0bd      	b.n	cb42 <ftoa+0x1f2>
    }
    else if (iExp2 >= 23)
    c9c6:	9b07      	ldr	r3, [sp, #28]
    c9c8:	2b16      	cmp	r3, #22
    c9ca:	dd06      	ble.n	c9da <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    c9cc:	9b07      	ldr	r3, [sp, #28]
    c9ce:	3b17      	subs	r3, #23
    c9d0:	9a06      	ldr	r2, [sp, #24]
    c9d2:	fa02 f303 	lsl.w	r3, r2, r3
    c9d6:	930d      	str	r3, [sp, #52]	; 0x34
    c9d8:	e01a      	b.n	ca10 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    c9da:	9b07      	ldr	r3, [sp, #28]
    c9dc:	2b00      	cmp	r3, #0
    c9de:	db0f      	blt.n	ca00 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    c9e0:	9b07      	ldr	r3, [sp, #28]
    c9e2:	f1c3 0317 	rsb	r3, r3, #23
    c9e6:	9a06      	ldr	r2, [sp, #24]
    c9e8:	fa42 f303 	asr.w	r3, r2, r3
    c9ec:	930d      	str	r3, [sp, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    c9ee:	9b07      	ldr	r3, [sp, #28]
    c9f0:	3301      	adds	r3, #1
    c9f2:	9a06      	ldr	r2, [sp, #24]
    c9f4:	fa02 f303 	lsl.w	r3, r2, r3
    c9f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c9fc:	930c      	str	r3, [sp, #48]	; 0x30
    c9fe:	e007      	b.n	ca10 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    ca00:	9b06      	ldr	r3, [sp, #24]
    ca02:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    ca06:	9b07      	ldr	r3, [sp, #28]
    ca08:	43db      	mvns	r3, r3
    ca0a:	fa42 f303 	asr.w	r3, r2, r3
    ca0e:	930c      	str	r3, [sp, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    ca10:	9b04      	ldr	r3, [sp, #16]
    ca12:	2b00      	cmp	r3, #0
    ca14:	da04      	bge.n	ca20 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    ca16:	9b02      	ldr	r3, [sp, #8]
    ca18:	1c5a      	adds	r2, r3, #1
    ca1a:	9202      	str	r2, [sp, #8]
    ca1c:	222d      	movs	r2, #45	; 0x2d
    ca1e:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    ca20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ca22:	2b00      	cmp	r3, #0
    ca24:	d105      	bne.n	ca32 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    ca26:	9b02      	ldr	r3, [sp, #8]
    ca28:	1c5a      	adds	r2, r3, #1
    ca2a:	9202      	str	r2, [sp, #8]
    ca2c:	2230      	movs	r2, #48	; 0x30
    ca2e:	701a      	strb	r2, [r3, #0]
    ca30:	e023      	b.n	ca7a <ftoa+0x12a>
    }
    else
    {
        if (i32IntPart > 0)
    ca32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ca34:	2b00      	cmp	r3, #0
    ca36:	dd09      	ble.n	ca4c <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
    ca38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ca3a:	17da      	asrs	r2, r3, #31
    ca3c:	461e      	mov	r6, r3
    ca3e:	4617      	mov	r7, r2
    ca40:	9a02      	ldr	r2, [sp, #8]
    ca42:	4630      	mov	r0, r6
    ca44:	4639      	mov	r1, r7
    ca46:	f7ff fea5 	bl	c794 <uint64_to_str>
    ca4a:	e012      	b.n	ca72 <ftoa+0x122>
        }
        else
        {
            *pcBuf++ = '-';
    ca4c:	9b02      	ldr	r3, [sp, #8]
    ca4e:	1c5a      	adds	r2, r3, #1
    ca50:	9202      	str	r2, [sp, #8]
    ca52:	222d      	movs	r2, #45	; 0x2d
    ca54:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    ca56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ca58:	425b      	negs	r3, r3
    ca5a:	17da      	asrs	r2, r3, #31
    ca5c:	461c      	mov	r4, r3
    ca5e:	4615      	mov	r5, r2
    ca60:	9a02      	ldr	r2, [sp, #8]
    ca62:	4620      	mov	r0, r4
    ca64:	4629      	mov	r1, r5
    ca66:	f7ff fe95 	bl	c794 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    ca6a:	e002      	b.n	ca72 <ftoa+0x122>
        {
            pcBuf++;
    ca6c:	9b02      	ldr	r3, [sp, #8]
    ca6e:	3301      	adds	r3, #1
    ca70:	9302      	str	r3, [sp, #8]
        while (*pcBuf)    // Get to end of new string
    ca72:	9b02      	ldr	r3, [sp, #8]
    ca74:	781b      	ldrb	r3, [r3, #0]
    ca76:	2b00      	cmp	r3, #0
    ca78:	d1f8      	bne.n	ca6c <ftoa+0x11c>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    ca7a:	9b02      	ldr	r3, [sp, #8]
    ca7c:	1c5a      	adds	r2, r3, #1
    ca7e:	9202      	str	r2, [sp, #8]
    ca80:	222e      	movs	r2, #46	; 0x2e
    ca82:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    ca84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ca86:	2b00      	cmp	r3, #0
    ca88:	d105      	bne.n	ca96 <ftoa+0x146>
    {
        *pcBuf++ = '0';
    ca8a:	9b02      	ldr	r3, [sp, #8]
    ca8c:	1c5a      	adds	r2, r3, #1
    ca8e:	9202      	str	r2, [sp, #8]
    ca90:	2230      	movs	r2, #48	; 0x30
    ca92:	701a      	strb	r2, [r3, #0]
    ca94:	e04f      	b.n	cb36 <ftoa+0x1e6>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    ca96:	9a02      	ldr	r2, [sp, #8]
    ca98:	9b08      	ldr	r3, [sp, #32]
    ca9a:	1ad3      	subs	r3, r2, r3
    ca9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ca9e:	1ad3      	subs	r3, r2, r3
    caa0:	3b01      	subs	r3, #1
    caa2:	9305      	str	r3, [sp, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    caa4:	9a05      	ldr	r2, [sp, #20]
    caa6:	9b01      	ldr	r3, [sp, #4]
    caa8:	4293      	cmp	r3, r2
    caaa:	bfa8      	it	ge
    caac:	4613      	movge	r3, r2
    caae:	9305      	str	r3, [sp, #20]

        for (jx = 0; jx < iMax; jx++)
    cab0:	2300      	movs	r3, #0
    cab2:	930a      	str	r3, [sp, #40]	; 0x28
    cab4:	e015      	b.n	cae2 <ftoa+0x192>
        {
            i32FracPart *= 10;
    cab6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cab8:	4613      	mov	r3, r2
    caba:	009b      	lsls	r3, r3, #2
    cabc:	4413      	add	r3, r2
    cabe:	005b      	lsls	r3, r3, #1
    cac0:	930c      	str	r3, [sp, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    cac2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cac4:	161b      	asrs	r3, r3, #24
    cac6:	b2da      	uxtb	r2, r3
    cac8:	9b02      	ldr	r3, [sp, #8]
    caca:	1c59      	adds	r1, r3, #1
    cacc:	9102      	str	r1, [sp, #8]
    cace:	3230      	adds	r2, #48	; 0x30
    cad0:	b2d2      	uxtb	r2, r2
    cad2:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    cad4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cad6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cada:	930c      	str	r3, [sp, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    cadc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cade:	3301      	adds	r3, #1
    cae0:	930a      	str	r3, [sp, #40]	; 0x28
    cae2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    cae4:	9b05      	ldr	r3, [sp, #20]
    cae6:	429a      	cmp	r2, r3
    cae8:	dbe5      	blt.n	cab6 <ftoa+0x166>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    caea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    caec:	4613      	mov	r3, r2
    caee:	009b      	lsls	r3, r3, #2
    caf0:	4413      	add	r3, r2
    caf2:	005b      	lsls	r3, r3, #1
    caf4:	161b      	asrs	r3, r3, #24
    caf6:	2b04      	cmp	r3, #4
    caf8:	dd1d      	ble.n	cb36 <ftoa+0x1e6>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    cafa:	9b02      	ldr	r3, [sp, #8]
    cafc:	3b01      	subs	r3, #1
    cafe:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cb00:	e015      	b.n	cb2e <ftoa+0x1de>
            {
                if ( *pcBuftmp == '.' )
    cb02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb04:	781b      	ldrb	r3, [r3, #0]
    cb06:	2b2e      	cmp	r3, #46	; 0x2e
    cb08:	d00e      	beq.n	cb28 <ftoa+0x1d8>
                {
                }
                else if ( *pcBuftmp == '9' )
    cb0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb0c:	781b      	ldrb	r3, [r3, #0]
    cb0e:	2b39      	cmp	r3, #57	; 0x39
    cb10:	d103      	bne.n	cb1a <ftoa+0x1ca>
                {
                    *pcBuftmp = '0';
    cb12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb14:	2230      	movs	r2, #48	; 0x30
    cb16:	701a      	strb	r2, [r3, #0]
    cb18:	e006      	b.n	cb28 <ftoa+0x1d8>
                }
                else
                {
                    *pcBuftmp += 1;
    cb1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb1c:	781b      	ldrb	r3, [r3, #0]
    cb1e:	3301      	adds	r3, #1
    cb20:	b2da      	uxtb	r2, r3
    cb22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb24:	701a      	strb	r2, [r3, #0]
                    break;
    cb26:	e006      	b.n	cb36 <ftoa+0x1e6>
                }
                pcBuftmp--;
    cb28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb2a:	3b01      	subs	r3, #1
    cb2c:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cb2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cb30:	9b08      	ldr	r3, [sp, #32]
    cb32:	429a      	cmp	r2, r3
    cb34:	d2e5      	bcs.n	cb02 <ftoa+0x1b2>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    cb36:	9b02      	ldr	r3, [sp, #8]
    cb38:	2200      	movs	r2, #0
    cb3a:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    cb3c:	9a02      	ldr	r2, [sp, #8]
    cb3e:	9b08      	ldr	r3, [sp, #32]
    cb40:	1ad3      	subs	r3, r2, r3
} // ftoa()
    cb42:	4618      	mov	r0, r3
    cb44:	b00f      	add	sp, #60	; 0x3c
    cb46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cb48:	00302e30 	.word	0x00302e30

0000cb4c <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    cb4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cb50:	b097      	sub	sp, #92	; 0x5c
    cb52:	9003      	str	r0, [sp, #12]
    cb54:	9102      	str	r1, [sp, #8]
    cb56:	9201      	str	r2, [sp, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    cb58:	2300      	movs	r3, #0
    cb5a:	9311      	str	r3, [sp, #68]	; 0x44
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    cb5c:	2300      	movs	r3, #0
    cb5e:	930b      	str	r3, [sp, #44]	; 0x2c

    while ( *pcFmt != 0x0 )
    cb60:	e2e9      	b.n	d136 <am_util_stdio_vsprintf+0x5ea>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    cb62:	2306      	movs	r3, #6
    cb64:	930e      	str	r3, [sp, #56]	; 0x38

        if ( *pcFmt != '%' )
    cb66:	9b02      	ldr	r3, [sp, #8]
    cb68:	781b      	ldrb	r3, [r3, #0]
    cb6a:	2b25      	cmp	r3, #37	; 0x25
    cb6c:	d01f      	beq.n	cbae <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    cb6e:	9b03      	ldr	r3, [sp, #12]
    cb70:	2b00      	cmp	r3, #0
    cb72:	d015      	beq.n	cba0 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    cb74:	9b02      	ldr	r3, [sp, #8]
    cb76:	781b      	ldrb	r3, [r3, #0]
    cb78:	2b0a      	cmp	r3, #10
    cb7a:	d10b      	bne.n	cb94 <am_util_stdio_vsprintf+0x48>
    cb7c:	4ba8      	ldr	r3, [pc, #672]	; (ce20 <am_util_stdio_vsprintf+0x2d4>)
    cb7e:	781b      	ldrb	r3, [r3, #0]
    cb80:	2b00      	cmp	r3, #0
    cb82:	d007      	beq.n	cb94 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    cb84:	9b03      	ldr	r3, [sp, #12]
    cb86:	1c5a      	adds	r2, r3, #1
    cb88:	9203      	str	r2, [sp, #12]
    cb8a:	220d      	movs	r2, #13
    cb8c:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    cb8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cb90:	3301      	adds	r3, #1
    cb92:	9311      	str	r3, [sp, #68]	; 0x44
                }
                *pcBuf++ = *pcFmt;
    cb94:	9b03      	ldr	r3, [sp, #12]
    cb96:	1c5a      	adds	r2, r3, #1
    cb98:	9203      	str	r2, [sp, #12]
    cb9a:	9a02      	ldr	r2, [sp, #8]
    cb9c:	7812      	ldrb	r2, [r2, #0]
    cb9e:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    cba0:	9b02      	ldr	r3, [sp, #8]
    cba2:	3301      	adds	r3, #1
    cba4:	9302      	str	r3, [sp, #8]
            ++ui32CharCnt;
    cba6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cba8:	3301      	adds	r3, #1
    cbaa:	9311      	str	r3, [sp, #68]	; 0x44
            continue;
    cbac:	e2c3      	b.n	d136 <am_util_stdio_vsprintf+0x5ea>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    cbae:	9b02      	ldr	r3, [sp, #8]
    cbb0:	3301      	adds	r3, #1
    cbb2:	9302      	str	r3, [sp, #8]
        bLower = bLongLong = false;
    cbb4:	2300      	movs	r3, #0
    cbb6:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    cbba:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    cbbe:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    cbc2:	2320      	movs	r3, #32
    cbc4:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

        if ( *pcFmt == '0' )
    cbc8:	9b02      	ldr	r3, [sp, #8]
    cbca:	781b      	ldrb	r3, [r3, #0]
    cbcc:	2b30      	cmp	r3, #48	; 0x30
    cbce:	d105      	bne.n	cbdc <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    cbd0:	2330      	movs	r3, #48	; 0x30
    cbd2:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
            ++pcFmt;
    cbd6:	9b02      	ldr	r3, [sp, #8]
    cbd8:	3301      	adds	r3, #1
    cbda:	9302      	str	r3, [sp, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    cbdc:	ab05      	add	r3, sp, #20
    cbde:	4619      	mov	r1, r3
    cbe0:	9802      	ldr	r0, [sp, #8]
    cbe2:	f7ff fd93 	bl	c70c <decstr_to_int>
    cbe6:	4603      	mov	r3, r0
    cbe8:	9310      	str	r3, [sp, #64]	; 0x40
        pcFmt += ui32NumChars;
    cbea:	9b05      	ldr	r3, [sp, #20]
    cbec:	9a02      	ldr	r2, [sp, #8]
    cbee:	4413      	add	r3, r2
    cbf0:	9302      	str	r3, [sp, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    cbf2:	9b02      	ldr	r3, [sp, #8]
    cbf4:	781b      	ldrb	r3, [r3, #0]
    cbf6:	2b73      	cmp	r3, #115	; 0x73
    cbf8:	d005      	beq.n	cc06 <am_util_stdio_vsprintf+0xba>
    cbfa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cbfc:	2b00      	cmp	r3, #0
    cbfe:	da02      	bge.n	cc06 <am_util_stdio_vsprintf+0xba>
        {
            iWidth = -iWidth;
    cc00:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cc02:	425b      	negs	r3, r3
    cc04:	9310      	str	r3, [sp, #64]	; 0x40
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    cc06:	9b02      	ldr	r3, [sp, #8]
    cc08:	781b      	ldrb	r3, [r3, #0]
    cc0a:	2b2e      	cmp	r3, #46	; 0x2e
    cc0c:	d10d      	bne.n	cc2a <am_util_stdio_vsprintf+0xde>
        {
            ++pcFmt;
    cc0e:	9b02      	ldr	r3, [sp, #8]
    cc10:	3301      	adds	r3, #1
    cc12:	9302      	str	r3, [sp, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    cc14:	ab05      	add	r3, sp, #20
    cc16:	4619      	mov	r1, r3
    cc18:	9802      	ldr	r0, [sp, #8]
    cc1a:	f7ff fd77 	bl	c70c <decstr_to_int>
    cc1e:	4603      	mov	r3, r0
    cc20:	930e      	str	r3, [sp, #56]	; 0x38
            pcFmt += ui32NumChars;
    cc22:	9b05      	ldr	r3, [sp, #20]
    cc24:	9a02      	ldr	r2, [sp, #8]
    cc26:	4413      	add	r3, r2
    cc28:	9302      	str	r3, [sp, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    cc2a:	9b02      	ldr	r3, [sp, #8]
    cc2c:	781b      	ldrb	r3, [r3, #0]
    cc2e:	2b6c      	cmp	r3, #108	; 0x6c
    cc30:	d10c      	bne.n	cc4c <am_util_stdio_vsprintf+0x100>
        {
            pcFmt++;
    cc32:	9b02      	ldr	r3, [sp, #8]
    cc34:	3301      	adds	r3, #1
    cc36:	9302      	str	r3, [sp, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    cc38:	9b02      	ldr	r3, [sp, #8]
    cc3a:	781b      	ldrb	r3, [r3, #0]
    cc3c:	2b6c      	cmp	r3, #108	; 0x6c
    cc3e:	d105      	bne.n	cc4c <am_util_stdio_vsprintf+0x100>
            {
                pcFmt++;
    cc40:	9b02      	ldr	r3, [sp, #8]
    cc42:	3301      	adds	r3, #1
    cc44:	9302      	str	r3, [sp, #8]
                bLongLong = true;
    cc46:	2301      	movs	r3, #1
    cc48:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
            }
        }

        switch ( *pcFmt )
    cc4c:	9b02      	ldr	r3, [sp, #8]
    cc4e:	781b      	ldrb	r3, [r3, #0]
    cc50:	3b46      	subs	r3, #70	; 0x46
    cc52:	2b32      	cmp	r3, #50	; 0x32
    cc54:	f200 825c 	bhi.w	d110 <am_util_stdio_vsprintf+0x5c4>
    cc58:	a201      	add	r2, pc, #4	; (adr r2, cc60 <am_util_stdio_vsprintf+0x114>)
    cc5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cc5e:	bf00      	nop
    cc60:	0000d097 	.word	0x0000d097
    cc64:	0000d111 	.word	0x0000d111
    cc68:	0000d111 	.word	0x0000d111
    cc6c:	0000d111 	.word	0x0000d111
    cc70:	0000d111 	.word	0x0000d111
    cc74:	0000d111 	.word	0x0000d111
    cc78:	0000d111 	.word	0x0000d111
    cc7c:	0000d111 	.word	0x0000d111
    cc80:	0000d111 	.word	0x0000d111
    cc84:	0000d111 	.word	0x0000d111
    cc88:	0000d111 	.word	0x0000d111
    cc8c:	0000d111 	.word	0x0000d111
    cc90:	0000d111 	.word	0x0000d111
    cc94:	0000d111 	.word	0x0000d111
    cc98:	0000d111 	.word	0x0000d111
    cc9c:	0000d111 	.word	0x0000d111
    cca0:	0000d111 	.word	0x0000d111
    cca4:	0000d111 	.word	0x0000d111
    cca8:	0000ce2b 	.word	0x0000ce2b
    ccac:	0000d111 	.word	0x0000d111
    ccb0:	0000d111 	.word	0x0000d111
    ccb4:	0000d111 	.word	0x0000d111
    ccb8:	0000d111 	.word	0x0000d111
    ccbc:	0000d111 	.word	0x0000d111
    ccc0:	0000d111 	.word	0x0000d111
    ccc4:	0000d111 	.word	0x0000d111
    ccc8:	0000d111 	.word	0x0000d111
    cccc:	0000d111 	.word	0x0000d111
    ccd0:	0000d111 	.word	0x0000d111
    ccd4:	0000cd2d 	.word	0x0000cd2d
    ccd8:	0000cf5b 	.word	0x0000cf5b
    ccdc:	0000d111 	.word	0x0000d111
    cce0:	0000d097 	.word	0x0000d097
    cce4:	0000d111 	.word	0x0000d111
    cce8:	0000d111 	.word	0x0000d111
    ccec:	0000cf5b 	.word	0x0000cf5b
    ccf0:	0000d111 	.word	0x0000d111
    ccf4:	0000d111 	.word	0x0000d111
    ccf8:	0000d111 	.word	0x0000d111
    ccfc:	0000d111 	.word	0x0000d111
    cd00:	0000d111 	.word	0x0000d111
    cd04:	0000d111 	.word	0x0000d111
    cd08:	0000d111 	.word	0x0000d111
    cd0c:	0000d111 	.word	0x0000d111
    cd10:	0000d111 	.word	0x0000d111
    cd14:	0000cd53 	.word	0x0000cd53
    cd18:	0000d111 	.word	0x0000d111
    cd1c:	0000cec5 	.word	0x0000cec5
    cd20:	0000d111 	.word	0x0000d111
    cd24:	0000d111 	.word	0x0000d111
    cd28:	0000ce25 	.word	0x0000ce25
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cd2c:	9b01      	ldr	r3, [sp, #4]
    cd2e:	1d1a      	adds	r2, r3, #4
    cd30:	9201      	str	r2, [sp, #4]
    cd32:	681b      	ldr	r3, [r3, #0]
    cd34:	f88d 301f 	strb.w	r3, [sp, #31]

                if ( pcBuf )
    cd38:	9b03      	ldr	r3, [sp, #12]
    cd3a:	2b00      	cmp	r3, #0
    cd3c:	d005      	beq.n	cd4a <am_util_stdio_vsprintf+0x1fe>
                {
                    *pcBuf++ = ui8CharSpecifier;
    cd3e:	9b03      	ldr	r3, [sp, #12]
    cd40:	1c5a      	adds	r2, r3, #1
    cd42:	9203      	str	r2, [sp, #12]
    cd44:	f89d 201f 	ldrb.w	r2, [sp, #31]
    cd48:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    cd4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cd4c:	3301      	adds	r3, #1
    cd4e:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    cd50:	e1ee      	b.n	d130 <am_util_stdio_vsprintf+0x5e4>

            case 's':
                pcStr = va_arg(pArgs, char *);
    cd52:	9b01      	ldr	r3, [sp, #4]
    cd54:	1d1a      	adds	r2, r3, #4
    cd56:	9201      	str	r2, [sp, #4]
    cd58:	681b      	ldr	r3, [r3, #0]
    cd5a:	9315      	str	r3, [sp, #84]	; 0x54
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    cd5c:	9815      	ldr	r0, [sp, #84]	; 0x54
    cd5e:	f7ff fdbe 	bl	c8de <simple_strlen>
    cd62:	900b      	str	r0, [sp, #44]	; 0x2c
                if ( iWidth > 0 )
    cd64:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cd66:	2b00      	cmp	r3, #0
    cd68:	dd2e      	ble.n	cdc8 <am_util_stdio_vsprintf+0x27c>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    cd6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cd6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cd6e:	429a      	cmp	r2, r3
    cd70:	d22a      	bcs.n	cdc8 <am_util_stdio_vsprintf+0x27c>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cd72:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cd74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cd76:	1ad3      	subs	r3, r2, r3
    cd78:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cd7a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cd7e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cd80:	4619      	mov	r1, r3
    cd82:	9803      	ldr	r0, [sp, #12]
    cd84:	f7ff fdc1 	bl	c90a <padbuffer>
    cd88:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    cd8a:	9b03      	ldr	r3, [sp, #12]
    cd8c:	2b00      	cmp	r3, #0
    cd8e:	d001      	beq.n	cd94 <am_util_stdio_vsprintf+0x248>
    cd90:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cd92:	e000      	b.n	cd96 <am_util_stdio_vsprintf+0x24a>
    cd94:	2300      	movs	r3, #0
    cd96:	9a03      	ldr	r2, [sp, #12]
    cd98:	4413      	add	r3, r2
    cd9a:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    cd9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cd9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cda0:	4413      	add	r3, r2
    cda2:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    cda4:	2300      	movs	r3, #0
    cda6:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }

                while (*pcStr != 0x0)
    cda8:	e00e      	b.n	cdc8 <am_util_stdio_vsprintf+0x27c>
                {
                    if ( pcBuf )
    cdaa:	9b03      	ldr	r3, [sp, #12]
    cdac:	2b00      	cmp	r3, #0
    cdae:	d005      	beq.n	cdbc <am_util_stdio_vsprintf+0x270>
                    {
                        *pcBuf++ = *pcStr;
    cdb0:	9b03      	ldr	r3, [sp, #12]
    cdb2:	1c5a      	adds	r2, r3, #1
    cdb4:	9203      	str	r2, [sp, #12]
    cdb6:	9a15      	ldr	r2, [sp, #84]	; 0x54
    cdb8:	7812      	ldrb	r2, [r2, #0]
    cdba:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    cdbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cdbe:	3301      	adds	r3, #1
    cdc0:	9315      	str	r3, [sp, #84]	; 0x54
                    ++ui32CharCnt;
    cdc2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cdc4:	3301      	adds	r3, #1
    cdc6:	9311      	str	r3, [sp, #68]	; 0x44
                while (*pcStr != 0x0)
    cdc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cdca:	781b      	ldrb	r3, [r3, #0]
    cdcc:	2b00      	cmp	r3, #0
    cdce:	d1ec      	bne.n	cdaa <am_util_stdio_vsprintf+0x25e>
                }

                if ( iWidth )
    cdd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cdd2:	2b00      	cmp	r3, #0
    cdd4:	f000 81a9 	beq.w	d12a <am_util_stdio_vsprintf+0x5de>
                {
                    iWidth = -iWidth;
    cdd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cdda:	425b      	negs	r3, r3
    cddc:	9310      	str	r3, [sp, #64]	; 0x40

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    cdde:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cde0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cde2:	429a      	cmp	r2, r3
    cde4:	f080 81a1 	bcs.w	d12a <am_util_stdio_vsprintf+0x5de>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cde8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cdea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cdec:	1ad3      	subs	r3, r2, r3
    cdee:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cdf0:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cdf4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cdf6:	4619      	mov	r1, r3
    cdf8:	9803      	ldr	r0, [sp, #12]
    cdfa:	f7ff fd86 	bl	c90a <padbuffer>
    cdfe:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    ce00:	9b03      	ldr	r3, [sp, #12]
    ce02:	2b00      	cmp	r3, #0
    ce04:	d001      	beq.n	ce0a <am_util_stdio_vsprintf+0x2be>
    ce06:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce08:	e000      	b.n	ce0c <am_util_stdio_vsprintf+0x2c0>
    ce0a:	2300      	movs	r3, #0
    ce0c:	9a03      	ldr	r2, [sp, #12]
    ce0e:	4413      	add	r3, r2
    ce10:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    ce12:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce14:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ce16:	4413      	add	r3, r2
    ce18:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    ce1a:	2300      	movs	r3, #0
    ce1c:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }
                break;
    ce1e:	e184      	b.n	d12a <am_util_stdio_vsprintf+0x5de>
    ce20:	10001148 	.word	0x10001148

            case 'x':
                bLower = true;
    ce24:	2301      	movs	r3, #1
    ce26:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    ce2a:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    ce2e:	2b00      	cmp	r3, #0
    ce30:	d009      	beq.n	ce46 <am_util_stdio_vsprintf+0x2fa>
    ce32:	9b01      	ldr	r3, [sp, #4]
    ce34:	3307      	adds	r3, #7
    ce36:	f023 0307 	bic.w	r3, r3, #7
    ce3a:	f103 0208 	add.w	r2, r3, #8
    ce3e:	9201      	str	r2, [sp, #4]
    ce40:	e9d3 4500 	ldrd	r4, r5, [r3]
    ce44:	e006      	b.n	ce54 <am_util_stdio_vsprintf+0x308>
                                      va_arg(pArgs, uint32_t);
    ce46:	9b01      	ldr	r3, [sp, #4]
    ce48:	1d1a      	adds	r2, r3, #4
    ce4a:	9201      	str	r2, [sp, #4]
    ce4c:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    ce4e:	2200      	movs	r2, #0
    ce50:	461c      	mov	r4, r3
    ce52:	4615      	mov	r5, r2
    ce54:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48

                if ( iWidth )
    ce58:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce5a:	2b00      	cmp	r3, #0
    ce5c:	d01e      	beq.n	ce9c <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    ce5e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    ce62:	f7ff fc2f 	bl	c6c4 <ndigits_in_hex>
    ce66:	4602      	mov	r2, r0
    ce68:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce6a:	1a9b      	subs	r3, r3, r2
    ce6c:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    ce6e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    ce72:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ce74:	4619      	mov	r1, r3
    ce76:	9803      	ldr	r0, [sp, #12]
    ce78:	f7ff fd47 	bl	c90a <padbuffer>
    ce7c:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    ce7e:	9b03      	ldr	r3, [sp, #12]
    ce80:	2b00      	cmp	r3, #0
    ce82:	d001      	beq.n	ce88 <am_util_stdio_vsprintf+0x33c>
    ce84:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce86:	e000      	b.n	ce8a <am_util_stdio_vsprintf+0x33e>
    ce88:	2300      	movs	r3, #0
    ce8a:	9a03      	ldr	r2, [sp, #12]
    ce8c:	4413      	add	r3, r2
    ce8e:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    ce90:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce92:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ce94:	4413      	add	r3, r2
    ce96:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    ce98:	2300      	movs	r3, #0
    ce9a:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    ce9c:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    cea0:	9a03      	ldr	r2, [sp, #12]
    cea2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    cea6:	f7ff fcba 	bl	c81e <uint64_to_hexstr>
    ceaa:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    ceac:	9b03      	ldr	r3, [sp, #12]
    ceae:	2b00      	cmp	r3, #0
    ceb0:	d003      	beq.n	ceba <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    ceb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ceb4:	9a03      	ldr	r2, [sp, #12]
    ceb6:	4413      	add	r3, r2
    ceb8:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    ceba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cebc:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cebe:	4413      	add	r3, r2
    cec0:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    cec2:	e135      	b.n	d130 <am_util_stdio_vsprintf+0x5e4>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cec4:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    cec8:	2b00      	cmp	r3, #0
    ceca:	d009      	beq.n	cee0 <am_util_stdio_vsprintf+0x394>
    cecc:	9b01      	ldr	r3, [sp, #4]
    cece:	3307      	adds	r3, #7
    ced0:	f023 0307 	bic.w	r3, r3, #7
    ced4:	f103 0208 	add.w	r2, r3, #8
    ced8:	9201      	str	r2, [sp, #4]
    ceda:	e9d3 6700 	ldrd	r6, r7, [r3]
    cede:	e006      	b.n	ceee <am_util_stdio_vsprintf+0x3a2>
                                      va_arg(pArgs, uint32_t);
    cee0:	9b01      	ldr	r3, [sp, #4]
    cee2:	1d1a      	adds	r2, r3, #4
    cee4:	9201      	str	r2, [sp, #4]
    cee6:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cee8:	2200      	movs	r2, #0
    ceea:	461e      	mov	r6, r3
    ceec:	4617      	mov	r7, r2
    ceee:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48

                if ( iWidth )
    cef2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cef4:	2b00      	cmp	r3, #0
    cef6:	d01e      	beq.n	cf36 <am_util_stdio_vsprintf+0x3ea>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    cef8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    cefc:	f7ff fba8 	bl	c650 <ndigits_in_u64>
    cf00:	4602      	mov	r2, r0
    cf02:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf04:	1a9b      	subs	r3, r3, r2
    cf06:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cf08:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cf0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cf0e:	4619      	mov	r1, r3
    cf10:	9803      	ldr	r0, [sp, #12]
    cf12:	f7ff fcfa 	bl	c90a <padbuffer>
    cf16:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    cf18:	9b03      	ldr	r3, [sp, #12]
    cf1a:	2b00      	cmp	r3, #0
    cf1c:	d001      	beq.n	cf22 <am_util_stdio_vsprintf+0x3d6>
    cf1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf20:	e000      	b.n	cf24 <am_util_stdio_vsprintf+0x3d8>
    cf22:	2300      	movs	r3, #0
    cf24:	9a03      	ldr	r2, [sp, #12]
    cf26:	4413      	add	r3, r2
    cf28:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    cf2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cf2e:	4413      	add	r3, r2
    cf30:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    cf32:	2300      	movs	r3, #0
    cf34:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    cf36:	9a03      	ldr	r2, [sp, #12]
    cf38:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    cf3c:	f7ff fc2a 	bl	c794 <uint64_to_str>
    cf40:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    cf42:	9b03      	ldr	r3, [sp, #12]
    cf44:	2b00      	cmp	r3, #0
    cf46:	d003      	beq.n	cf50 <am_util_stdio_vsprintf+0x404>
                {
                    pcBuf += iVal;
    cf48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cf4a:	9a03      	ldr	r2, [sp, #12]
    cf4c:	4413      	add	r3, r2
    cf4e:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    cf50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cf52:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cf54:	4413      	add	r3, r2
    cf56:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    cf58:	e0ea      	b.n	d130 <am_util_stdio_vsprintf+0x5e4>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cf5a:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    cf5e:	2b00      	cmp	r3, #0
    cf60:	d009      	beq.n	cf76 <am_util_stdio_vsprintf+0x42a>
    cf62:	9b01      	ldr	r3, [sp, #4]
    cf64:	3307      	adds	r3, #7
    cf66:	f023 0307 	bic.w	r3, r3, #7
    cf6a:	f103 0208 	add.w	r2, r3, #8
    cf6e:	9201      	str	r2, [sp, #4]
    cf70:	e9d3 8900 	ldrd	r8, r9, [r3]
    cf74:	e006      	b.n	cf84 <am_util_stdio_vsprintf+0x438>
                                     va_arg(pArgs, int32_t);
    cf76:	9b01      	ldr	r3, [sp, #4]
    cf78:	1d1a      	adds	r2, r3, #4
    cf7a:	9201      	str	r2, [sp, #4]
    cf7c:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cf7e:	17da      	asrs	r2, r3, #31
    cf80:	4698      	mov	r8, r3
    cf82:	4691      	mov	r9, r2
    cf84:	e9cd 8908 	strd	r8, r9, [sp, #32]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    cf88:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    cf8c:	2b00      	cmp	r3, #0
    cf8e:	da0c      	bge.n	cfaa <am_util_stdio_vsprintf+0x45e>
                {
                    ui64Val = -i64Val;          // Get absolute value
    cf90:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    cf94:	2100      	movs	r1, #0
    cf96:	f1d2 0a00 	rsbs	sl, r2, #0
    cf9a:	eb61 0b03 	sbc.w	fp, r1, r3
    cf9e:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
                    bNeg = true;
    cfa2:	2301      	movs	r3, #1
    cfa4:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    cfa8:	e006      	b.n	cfb8 <am_util_stdio_vsprintf+0x46c>
                }
                else
                {
                    ui64Val = i64Val;
    cfaa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    cfae:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
                    bNeg = false;
    cfb2:	2300      	movs	r3, #0
    cfb4:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                }

                if ( iWidth )
    cfb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfba:	2b00      	cmp	r3, #0
    cfbc:	d04a      	beq.n	d054 <am_util_stdio_vsprintf+0x508>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    cfbe:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cfc2:	4610      	mov	r0, r2
    cfc4:	4619      	mov	r1, r3
    cfc6:	f7ff fb63 	bl	c690 <ndigits_in_i64>
    cfca:	4602      	mov	r2, r0
    cfcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfce:	1a9b      	subs	r3, r3, r2
    cfd0:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg )
    cfd2:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    cfd6:	2b00      	cmp	r3, #0
    cfd8:	d011      	beq.n	cffe <am_util_stdio_vsprintf+0x4b2>
                    {
                        --iWidth;
    cfda:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfdc:	3b01      	subs	r3, #1
    cfde:	9310      	str	r3, [sp, #64]	; 0x40

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    cfe0:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cfe4:	2b30      	cmp	r3, #48	; 0x30
    cfe6:	d10a      	bne.n	cffe <am_util_stdio_vsprintf+0x4b2>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    cfe8:	9b03      	ldr	r3, [sp, #12]
    cfea:	2b00      	cmp	r3, #0
    cfec:	d004      	beq.n	cff8 <am_util_stdio_vsprintf+0x4ac>
                            {
                                *pcBuf++ = '-';
    cfee:	9b03      	ldr	r3, [sp, #12]
    cff0:	1c5a      	adds	r2, r3, #1
    cff2:	9203      	str	r2, [sp, #12]
    cff4:	222d      	movs	r2, #45	; 0x2d
    cff6:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    cff8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cffa:	3301      	adds	r3, #1
    cffc:	9311      	str	r3, [sp, #68]	; 0x44
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cffe:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d002:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d004:	4619      	mov	r1, r3
    d006:	9803      	ldr	r0, [sp, #12]
    d008:	f7ff fc7f 	bl	c90a <padbuffer>
    d00c:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d00e:	9b03      	ldr	r3, [sp, #12]
    d010:	2b00      	cmp	r3, #0
    d012:	d001      	beq.n	d018 <am_util_stdio_vsprintf+0x4cc>
    d014:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d016:	e000      	b.n	d01a <am_util_stdio_vsprintf+0x4ce>
    d018:	2300      	movs	r3, #0
    d01a:	9a03      	ldr	r2, [sp, #12]
    d01c:	4413      	add	r3, r2
    d01e:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d020:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d022:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d024:	4413      	add	r3, r2
    d026:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d028:	2300      	movs	r3, #0
    d02a:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d02c:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d030:	2b00      	cmp	r3, #0
    d032:	d01e      	beq.n	d072 <am_util_stdio_vsprintf+0x526>
    d034:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d038:	2b20      	cmp	r3, #32
    d03a:	d11a      	bne.n	d072 <am_util_stdio_vsprintf+0x526>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    d03c:	9b03      	ldr	r3, [sp, #12]
    d03e:	2b00      	cmp	r3, #0
    d040:	d004      	beq.n	d04c <am_util_stdio_vsprintf+0x500>
                        {
                            *pcBuf++ = '-';
    d042:	9b03      	ldr	r3, [sp, #12]
    d044:	1c5a      	adds	r2, r3, #1
    d046:	9203      	str	r2, [sp, #12]
    d048:	222d      	movs	r2, #45	; 0x2d
    d04a:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    d04c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d04e:	3301      	adds	r3, #1
    d050:	9311      	str	r3, [sp, #68]	; 0x44
    d052:	e00e      	b.n	d072 <am_util_stdio_vsprintf+0x526>
                    }
                }
                else
                {
                    if ( bNeg )
    d054:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d058:	2b00      	cmp	r3, #0
    d05a:	d00a      	beq.n	d072 <am_util_stdio_vsprintf+0x526>
                    {
                        if ( pcBuf )
    d05c:	9b03      	ldr	r3, [sp, #12]
    d05e:	2b00      	cmp	r3, #0
    d060:	d004      	beq.n	d06c <am_util_stdio_vsprintf+0x520>
                        {
                            *pcBuf++ = '-';
    d062:	9b03      	ldr	r3, [sp, #12]
    d064:	1c5a      	adds	r2, r3, #1
    d066:	9203      	str	r2, [sp, #12]
    d068:	222d      	movs	r2, #45	; 0x2d
    d06a:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    d06c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d06e:	3301      	adds	r3, #1
    d070:	9311      	str	r3, [sp, #68]	; 0x44
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d072:	9a03      	ldr	r2, [sp, #12]
    d074:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d078:	f7ff fb8c 	bl	c794 <uint64_to_str>
    d07c:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d07e:	9b03      	ldr	r3, [sp, #12]
    d080:	2b00      	cmp	r3, #0
    d082:	d003      	beq.n	d08c <am_util_stdio_vsprintf+0x540>
                {
                    pcBuf += iVal;
    d084:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d086:	9a03      	ldr	r2, [sp, #12]
    d088:	4413      	add	r3, r2
    d08a:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d08c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d08e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d090:	4413      	add	r3, r2
    d092:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d094:	e04c      	b.n	d130 <am_util_stdio_vsprintf+0x5e4>


            case 'f':
            case 'F':
                if ( pcBuf )
    d096:	9b03      	ldr	r3, [sp, #12]
    d098:	2b00      	cmp	r3, #0
    d09a:	d048      	beq.n	d12e <am_util_stdio_vsprintf+0x5e2>
                {
                    float fValue = va_arg(pArgs, double);
    d09c:	9b01      	ldr	r3, [sp, #4]
    d09e:	3307      	adds	r3, #7
    d0a0:	f023 0307 	bic.w	r3, r3, #7
    d0a4:	f103 0208 	add.w	r2, r3, #8
    d0a8:	9201      	str	r2, [sp, #4]
    d0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
    d0ae:	4610      	mov	r0, r2
    d0b0:	4619      	mov	r1, r3
    d0b2:	f7ff f825 	bl	c100 <__aeabi_d2f>
    d0b6:	4603      	mov	r3, r0
    d0b8:	9306      	str	r3, [sp, #24]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    d0ba:	9b03      	ldr	r3, [sp, #12]
    d0bc:	2214      	movs	r2, #20
    d0be:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    d0c0:	990e      	ldr	r1, [sp, #56]	; 0x38
    d0c2:	9803      	ldr	r0, [sp, #12]
    d0c4:	ed9d 0a06 	vldr	s0, [sp, #24]
    d0c8:	f7ff fc42 	bl	c950 <ftoa>
    d0cc:	900f      	str	r0, [sp, #60]	; 0x3c
                    if ( iVal < 0 )
    d0ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d0d0:	2b00      	cmp	r3, #0
    d0d2:	da14      	bge.n	d0fe <am_util_stdio_vsprintf+0x5b2>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d0d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d0d6:	f1b3 3fff 	cmp.w	r3, #4294967295
    d0da:	d102      	bne.n	d0e2 <am_util_stdio_vsprintf+0x596>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d0dc:	4b1e      	ldr	r3, [pc, #120]	; (d158 <am_util_stdio_vsprintf+0x60c>)
    d0de:	930c      	str	r3, [sp, #48]	; 0x30
    d0e0:	e008      	b.n	d0f4 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d0e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d0e4:	f113 0f02 	cmn.w	r3, #2
    d0e8:	d102      	bne.n	d0f0 <am_util_stdio_vsprintf+0x5a4>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d0ea:	4b1c      	ldr	r3, [pc, #112]	; (d15c <am_util_stdio_vsprintf+0x610>)
    d0ec:	930c      	str	r3, [sp, #48]	; 0x30
    d0ee:	e001      	b.n	d0f4 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d0f0:	4b1b      	ldr	r3, [pc, #108]	; (d160 <am_util_stdio_vsprintf+0x614>)
    d0f2:	930c      	str	r3, [sp, #48]	; 0x30
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d0f4:	9b03      	ldr	r3, [sp, #12]
    d0f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d0f8:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    d0fa:	2303      	movs	r3, #3
    d0fc:	930f      	str	r3, [sp, #60]	; 0x3c
                    }
                    ui32CharCnt += iVal;
    d0fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d100:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d102:	4413      	add	r3, r2
    d104:	9311      	str	r3, [sp, #68]	; 0x44
                    pcBuf += iVal;
    d106:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d108:	9a03      	ldr	r2, [sp, #12]
    d10a:	4413      	add	r3, r2
    d10c:	9303      	str	r3, [sp, #12]
                }
                break;
    d10e:	e00e      	b.n	d12e <am_util_stdio_vsprintf+0x5e2>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d110:	9b03      	ldr	r3, [sp, #12]
    d112:	2b00      	cmp	r3, #0
    d114:	d005      	beq.n	d122 <am_util_stdio_vsprintf+0x5d6>
                {
                    *pcBuf++ = *pcFmt;
    d116:	9b03      	ldr	r3, [sp, #12]
    d118:	1c5a      	adds	r2, r3, #1
    d11a:	9203      	str	r2, [sp, #12]
    d11c:	9a02      	ldr	r2, [sp, #8]
    d11e:	7812      	ldrb	r2, [r2, #0]
    d120:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d122:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d124:	3301      	adds	r3, #1
    d126:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d128:	e002      	b.n	d130 <am_util_stdio_vsprintf+0x5e4>
                break;
    d12a:	bf00      	nop
    d12c:	e000      	b.n	d130 <am_util_stdio_vsprintf+0x5e4>
                break;
    d12e:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d130:	9b02      	ldr	r3, [sp, #8]
    d132:	3301      	adds	r3, #1
    d134:	9302      	str	r3, [sp, #8]
    while ( *pcFmt != 0x0 )
    d136:	9b02      	ldr	r3, [sp, #8]
    d138:	781b      	ldrb	r3, [r3, #0]
    d13a:	2b00      	cmp	r3, #0
    d13c:	f47f ad11 	bne.w	cb62 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d140:	9b03      	ldr	r3, [sp, #12]
    d142:	2b00      	cmp	r3, #0
    d144:	d002      	beq.n	d14c <am_util_stdio_vsprintf+0x600>
    {
        *pcBuf = 0x0;
    d146:	9b03      	ldr	r3, [sp, #12]
    d148:	2200      	movs	r2, #0
    d14a:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d14c:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    d14e:	4618      	mov	r0, r3
    d150:	b017      	add	sp, #92	; 0x5c
    d152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d156:	bf00      	nop
    d158:	00302e30 	.word	0x00302e30
    d15c:	00232e23 	.word	0x00232e23
    d160:	003f2e3f 	.word	0x003f2e3f

0000d164 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d164:	b40f      	push	{r0, r1, r2, r3}
    d166:	b500      	push	{lr}
    d168:	b083      	sub	sp, #12
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d16a:	4b0c      	ldr	r3, [pc, #48]	; (d19c <am_util_stdio_printf+0x38>)
    d16c:	681b      	ldr	r3, [r3, #0]
    d16e:	2b00      	cmp	r3, #0
    d170:	d101      	bne.n	d176 <am_util_stdio_printf+0x12>
    {
        return 0;
    d172:	2300      	movs	r3, #0
    d174:	e00c      	b.n	d190 <am_util_stdio_printf+0x2c>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d176:	ab05      	add	r3, sp, #20
    d178:	9300      	str	r3, [sp, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d17a:	9a00      	ldr	r2, [sp, #0]
    d17c:	9904      	ldr	r1, [sp, #16]
    d17e:	4808      	ldr	r0, [pc, #32]	; (d1a0 <am_util_stdio_printf+0x3c>)
    d180:	f7ff fce4 	bl	cb4c <am_util_stdio_vsprintf>
    d184:	9001      	str	r0, [sp, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d186:	4b05      	ldr	r3, [pc, #20]	; (d19c <am_util_stdio_printf+0x38>)
    d188:	681b      	ldr	r3, [r3, #0]
    d18a:	4805      	ldr	r0, [pc, #20]	; (d1a0 <am_util_stdio_printf+0x3c>)
    d18c:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d18e:	9b01      	ldr	r3, [sp, #4]
}
    d190:	4618      	mov	r0, r3
    d192:	b003      	add	sp, #12
    d194:	f85d eb04 	ldr.w	lr, [sp], #4
    d198:	b004      	add	sp, #16
    d19a:	4770      	bx	lr
    d19c:	10001044 	.word	0x10001044
    d1a0:	10001048 	.word	0x10001048

0000d1a4 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    d1a4:	b508      	push	{r3, lr}
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d1a6:	4802      	ldr	r0, [pc, #8]	; (d1b0 <am_util_stdio_terminal_clear+0xc>)
    d1a8:	f7ff ffdc 	bl	d164 <am_util_stdio_printf>
}
    d1ac:	bf00      	nop
    d1ae:	bd08      	pop	{r3, pc}
    d1b0:	0000e878 	.word	0x0000e878

0000d1b4 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    d1b4:	4811      	ldr	r0, [pc, #68]	; (d1fc <zero_loop+0x12>)
    d1b6:	4912      	ldr	r1, [pc, #72]	; (d200 <zero_loop+0x16>)
    d1b8:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    d1ba:	f8d1 d000 	ldr.w	sp, [r1]

#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    d1be:	4811      	ldr	r0, [pc, #68]	; (d204 <zero_loop+0x1a>)
    d1c0:	6801      	ldr	r1, [r0, #0]
    d1c2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d1c6:	6001      	str	r1, [r0, #0]
    d1c8:	f3bf 8f4f 	dsb	sy
    d1cc:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    d1d0:	480d      	ldr	r0, [pc, #52]	; (d208 <zero_loop+0x1e>)
    d1d2:	490e      	ldr	r1, [pc, #56]	; (d20c <zero_loop+0x22>)
    d1d4:	4a0e      	ldr	r2, [pc, #56]	; (d210 <zero_loop+0x26>)

0000d1d6 <copy_loop>:
    d1d6:	f850 3b04 	ldr.w	r3, [r0], #4
    d1da:	f841 3b04 	str.w	r3, [r1], #4
    d1de:	4291      	cmp	r1, r2
    d1e0:	dbf9      	blt.n	d1d6 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    d1e2:	480c      	ldr	r0, [pc, #48]	; (d214 <zero_loop+0x2a>)
    d1e4:	490c      	ldr	r1, [pc, #48]	; (d218 <zero_loop+0x2e>)
    d1e6:	f04f 0200 	mov.w	r2, #0

0000d1ea <zero_loop>:
    d1ea:	4288      	cmp	r0, r1
    d1ec:	bfb8      	it	lt
    d1ee:	f840 2b04 	strlt.w	r2, [r0], #4
    d1f2:	dbfa      	blt.n	d1ea <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    d1f4:	f7ff f86e 	bl	c2d4 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    d1f8:	be00      	bkpt	0x0000
}
    d1fa:	bf00      	nop
    d1fc:	e000ed08 	.word	0xe000ed08
    d200:	0000c000 	.word	0x0000c000
    d204:	e000ed88 	.word	0xe000ed88
    d208:	0000ebf4 	.word	0x0000ebf4
    d20c:	10001000 	.word	0x10001000
    d210:	10001044 	.word	0x10001044
    d214:	10001044 	.word	0x10001044
    d218:	1000115c 	.word	0x1000115c

0000d21c <NMI_Handler>:
NMI_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d21c:	e7fe      	b.n	d21c <NMI_Handler>

0000d21e <BusFault_Handler>:
HardFault_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d21e:	e7fe      	b.n	d21e <BusFault_Handler>

0000d220 <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d220:	e7fe      	b.n	d220 <DebugMon_Handler>
	...

0000d224 <am_bsp_low_power_init>:
    d224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d226:	f001 f8f3 	bl	e410 <am_hal_pwrctrl_low_power_init>
    d22a:	f001 f9cf 	bl	e5cc <am_hal_rtc_osc_disable>
    d22e:	4b0b      	ldr	r3, [pc, #44]	; (d25c <am_bsp_low_power_init+0x38>)
    d230:	4f0b      	ldr	r7, [pc, #44]	; (d260 <am_bsp_low_power_init+0x3c>)
    d232:	681e      	ldr	r6, [r3, #0]
    d234:	2400      	movs	r4, #0
    d236:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    d23a:	4631      	mov	r1, r6
    d23c:	4628      	mov	r0, r5
    d23e:	f000 fddd 	bl	ddfc <am_hal_gpio_pinconfig>
    d242:	2103      	movs	r1, #3
    d244:	4628      	mov	r0, r5
    d246:	f000 ff0f 	bl	e068 <am_hal_gpio_state_write>
    d24a:	3401      	adds	r4, #1
    d24c:	2100      	movs	r1, #0
    d24e:	4628      	mov	r0, r5
    d250:	f000 ff0a 	bl	e068 <am_hal_gpio_state_write>
    d254:	2c05      	cmp	r4, #5
    d256:	d1ee      	bne.n	d236 <am_bsp_low_power_init+0x12>
    d258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d25a:	bf00      	nop
    d25c:	0000e958 	.word	0x0000e958
    d260:	10001000 	.word	0x10001000

0000d264 <am_bsp_debug_printf_disable>:
    d264:	b538      	push	{r3, r4, r5, lr}
    d266:	4b17      	ldr	r3, [pc, #92]	; (d2c4 <am_bsp_debug_printf_disable+0x60>)
    d268:	681c      	ldr	r4, [r3, #0]
    d26a:	2c01      	cmp	r4, #1
    d26c:	d002      	beq.n	d274 <am_bsp_debug_printf_disable+0x10>
    d26e:	2c02      	cmp	r4, #2
    d270:	d00c      	beq.n	d28c <am_bsp_debug_printf_disable+0x28>
    d272:	bd38      	pop	{r3, r4, r5, pc}
    d274:	f000 ff68 	bl	e148 <am_hal_itm_disable>
    d278:	2000      	movs	r0, #0
    d27a:	f7ff f8eb 	bl	c454 <am_util_stdio_printf_init>
    d27e:	4b12      	ldr	r3, [pc, #72]	; (d2c8 <am_bsp_debug_printf_disable+0x64>)
    d280:	2029      	movs	r0, #41	; 0x29
    d282:	6819      	ldr	r1, [r3, #0]
    d284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d288:	f000 bdb8 	b.w	ddfc <am_hal_gpio_pinconfig>
    d28c:	4d0f      	ldr	r5, [pc, #60]	; (d2cc <am_bsp_debug_printf_disable+0x68>)
    d28e:	6828      	ldr	r0, [r5, #0]
    d290:	f001 faba 	bl	e808 <am_hal_uart_tx_flush>
    d294:	2000      	movs	r0, #0
    d296:	f7ff f8dd 	bl	c454 <am_util_stdio_printf_init>
    d29a:	4621      	mov	r1, r4
    d29c:	2200      	movs	r2, #0
    d29e:	6828      	ldr	r0, [r5, #0]
    d2a0:	f001 fa3a 	bl	e718 <am_hal_uart_power_control>
    d2a4:	6828      	ldr	r0, [r5, #0]
    d2a6:	f001 fa23 	bl	e6f0 <am_hal_uart_deinitialize>
    d2aa:	4b07      	ldr	r3, [pc, #28]	; (d2c8 <am_bsp_debug_printf_disable+0x64>)
    d2ac:	681c      	ldr	r4, [r3, #0]
    d2ae:	2016      	movs	r0, #22
    d2b0:	4621      	mov	r1, r4
    d2b2:	f000 fda3 	bl	ddfc <am_hal_gpio_pinconfig>
    d2b6:	4621      	mov	r1, r4
    d2b8:	2017      	movs	r0, #23
    d2ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d2be:	f000 bd9d 	b.w	ddfc <am_hal_gpio_pinconfig>
    d2c2:	bf00      	nop
    d2c4:	10001150 	.word	0x10001150
    d2c8:	0000e954 	.word	0x0000e954
    d2cc:	1000114c 	.word	0x1000114c

0000d2d0 <am_bsp_itm_printf_enable>:
    d2d0:	b500      	push	{lr}
    d2d2:	4b0b      	ldr	r3, [pc, #44]	; (d300 <am_bsp_itm_printf_enable+0x30>)
    d2d4:	b087      	sub	sp, #28
    d2d6:	2201      	movs	r2, #1
    d2d8:	601a      	str	r2, [r3, #0]
    d2da:	f000 ff11 	bl	e100 <am_hal_itm_enable>
    d2de:	4b09      	ldr	r3, [pc, #36]	; (d304 <am_bsp_itm_printf_enable+0x34>)
    d2e0:	9301      	str	r3, [sp, #4]
    d2e2:	a801      	add	r0, sp, #4
    d2e4:	f001 f9b4 	bl	e650 <am_hal_tpiu_enable>
    d2e8:	4b07      	ldr	r3, [pc, #28]	; (d308 <am_bsp_itm_printf_enable+0x38>)
    d2ea:	2029      	movs	r0, #41	; 0x29
    d2ec:	6819      	ldr	r1, [r3, #0]
    d2ee:	f000 fd85 	bl	ddfc <am_hal_gpio_pinconfig>
    d2f2:	4806      	ldr	r0, [pc, #24]	; (d30c <am_bsp_itm_printf_enable+0x3c>)
    d2f4:	f7ff f8ae 	bl	c454 <am_util_stdio_printf_init>
    d2f8:	b007      	add	sp, #28
    d2fa:	f85d fb04 	ldr.w	pc, [sp], #4
    d2fe:	bf00      	nop
    d300:	10001150 	.word	0x10001150
    d304:	000f4240 	.word	0x000f4240
    d308:	0000e88c 	.word	0x0000e88c
    d30c:	0000e1fd 	.word	0x0000e1fd

0000d310 <am_hal_cachectrl_config>:
    d310:	b530      	push	{r4, r5, lr}
    d312:	b083      	sub	sp, #12
    d314:	4604      	mov	r4, r0
    d316:	f000 feeb 	bl	e0f0 <am_hal_interrupt_master_disable>
    d31a:	4d0e      	ldr	r5, [pc, #56]	; (d354 <am_hal_cachectrl_config+0x44>)
    d31c:	9001      	str	r0, [sp, #4]
    d31e:	682b      	ldr	r3, [r5, #0]
    d320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    d324:	602b      	str	r3, [r5, #0]
    d326:	9801      	ldr	r0, [sp, #4]
    d328:	f000 fee6 	bl	e0f8 <am_hal_interrupt_master_set>
    d32c:	7863      	ldrb	r3, [r4, #1]
    d32e:	7822      	ldrb	r2, [r4, #0]
    d330:	78a1      	ldrb	r1, [r4, #2]
    d332:	021b      	lsls	r3, r3, #8
    d334:	f403 7340 	and.w	r3, r3, #768	; 0x300
    d338:	0112      	lsls	r2, r2, #4
    d33a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    d33e:	b2d2      	uxtb	r2, r2
    d340:	4313      	orrs	r3, r2
    d342:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d346:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d34a:	2000      	movs	r0, #0
    d34c:	602b      	str	r3, [r5, #0]
    d34e:	b003      	add	sp, #12
    d350:	bd30      	pop	{r4, r5, pc}
    d352:	bf00      	nop
    d354:	40018000 	.word	0x40018000

0000d358 <am_hal_cachectrl_enable>:
    d358:	4a03      	ldr	r2, [pc, #12]	; (d368 <am_hal_cachectrl_enable+0x10>)
    d35a:	6813      	ldr	r3, [r2, #0]
    d35c:	f043 0301 	orr.w	r3, r3, #1
    d360:	2000      	movs	r0, #0
    d362:	6013      	str	r3, [r2, #0]
    d364:	4770      	bx	lr
    d366:	bf00      	nop
    d368:	40018000 	.word	0x40018000

0000d36c <am_hal_cachectrl_control>:
    d36c:	b510      	push	{r4, lr}
    d36e:	3801      	subs	r0, #1
    d370:	b08e      	sub	sp, #56	; 0x38
    d372:	2810      	cmp	r0, #16
    d374:	f200 815e 	bhi.w	d634 <am_hal_cachectrl_control+0x2c8>
    d378:	e8df f010 	tbh	[pc, r0, lsl #1]
    d37c:	00360018 	.word	0x00360018
    d380:	0040003d 	.word	0x0040003d
    d384:	00450043 	.word	0x00450043
    d388:	0011001a 	.word	0x0011001a
    d38c:	00540047 	.word	0x00540047
    d390:	009a0061 	.word	0x009a0061
    d394:	010c00d3 	.word	0x010c00d3
    d398:	013f0126 	.word	0x013f0126
    d39c:	001d      	.short	0x001d
    d39e:	f44f 7300 	mov.w	r3, #512	; 0x200
    d3a2:	4aac      	ldr	r2, [pc, #688]	; (d654 <am_hal_cachectrl_control+0x2e8>)
    d3a4:	2000      	movs	r0, #0
    d3a6:	6093      	str	r3, [r2, #8]
    d3a8:	b00e      	add	sp, #56	; 0x38
    d3aa:	bd10      	pop	{r4, pc}
    d3ac:	2301      	movs	r3, #1
    d3ae:	e7f8      	b.n	d3a2 <am_hal_cachectrl_control+0x36>
    d3b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    d3b4:	e7f5      	b.n	d3a2 <am_hal_cachectrl_control+0x36>
    d3b6:	2900      	cmp	r1, #0
    d3b8:	f000 813c 	beq.w	d634 <am_hal_cachectrl_control+0x2c8>
    d3bc:	684a      	ldr	r2, [r1, #4]
    d3be:	48a6      	ldr	r0, [pc, #664]	; (d658 <am_hal_cachectrl_control+0x2ec>)
    d3c0:	4202      	tst	r2, r0
    d3c2:	f040 8137 	bne.w	d634 <am_hal_cachectrl_control+0x2c8>
    d3c6:	688b      	ldr	r3, [r1, #8]
    d3c8:	4018      	ands	r0, r3
    d3ca:	f040 8133 	bne.w	d634 <am_hal_cachectrl_control+0x2c8>
    d3ce:	780c      	ldrb	r4, [r1, #0]
    d3d0:	2c00      	cmp	r4, #0
    d3d2:	f040 8133 	bne.w	d63c <am_hal_cachectrl_control+0x2d0>
    d3d6:	4c9f      	ldr	r4, [pc, #636]	; (d654 <am_hal_cachectrl_control+0x2e8>)
    d3d8:	7849      	ldrb	r1, [r1, #1]
    d3da:	6122      	str	r2, [r4, #16]
    d3dc:	6163      	str	r3, [r4, #20]
    d3de:	6823      	ldr	r3, [r4, #0]
    d3e0:	f361 0382 	bfi	r3, r1, #2, #1
    d3e4:	6023      	str	r3, [r4, #0]
    d3e6:	e7df      	b.n	d3a8 <am_hal_cachectrl_control+0x3c>
    d3e8:	4b9a      	ldr	r3, [pc, #616]	; (d654 <am_hal_cachectrl_control+0x2e8>)
    d3ea:	681b      	ldr	r3, [r3, #0]
    d3ec:	01db      	lsls	r3, r3, #7
    d3ee:	f140 811f 	bpl.w	d630 <am_hal_cachectrl_control+0x2c4>
    d3f2:	2302      	movs	r3, #2
    d3f4:	e7d5      	b.n	d3a2 <am_hal_cachectrl_control+0x36>
    d3f6:	f44f 6388 	mov.w	r3, #1088	; 0x440
    d3fa:	e7d2      	b.n	d3a2 <am_hal_cachectrl_control+0x36>
    d3fc:	f44f 7308 	mov.w	r3, #544	; 0x220
    d400:	e7cf      	b.n	d3a2 <am_hal_cachectrl_control+0x36>
    d402:	2340      	movs	r3, #64	; 0x40
    d404:	e7cd      	b.n	d3a2 <am_hal_cachectrl_control+0x36>
    d406:	2320      	movs	r3, #32
    d408:	e7cb      	b.n	d3a2 <am_hal_cachectrl_control+0x36>
    d40a:	f000 fe71 	bl	e0f0 <am_hal_interrupt_master_disable>
    d40e:	4a91      	ldr	r2, [pc, #580]	; (d654 <am_hal_cachectrl_control+0x2e8>)
    d410:	9000      	str	r0, [sp, #0]
    d412:	6813      	ldr	r3, [r2, #0]
    d414:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    d418:	6013      	str	r3, [r2, #0]
    d41a:	9800      	ldr	r0, [sp, #0]
    d41c:	f000 fe6c 	bl	e0f8 <am_hal_interrupt_master_set>
    d420:	2000      	movs	r0, #0
    d422:	e7c1      	b.n	d3a8 <am_hal_cachectrl_control+0x3c>
    d424:	f000 fe64 	bl	e0f0 <am_hal_interrupt_master_disable>
    d428:	4a8a      	ldr	r2, [pc, #552]	; (d654 <am_hal_cachectrl_control+0x2e8>)
    d42a:	9001      	str	r0, [sp, #4]
    d42c:	6813      	ldr	r3, [r2, #0]
    d42e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    d432:	6013      	str	r3, [r2, #0]
    d434:	9801      	ldr	r0, [sp, #4]
    d436:	f000 fe5f 	bl	e0f8 <am_hal_interrupt_master_set>
    d43a:	2000      	movs	r0, #0
    d43c:	e7b4      	b.n	d3a8 <am_hal_cachectrl_control+0x3c>
    d43e:	f000 fe57 	bl	e0f0 <am_hal_interrupt_master_disable>
    d442:	4603      	mov	r3, r0
    d444:	4885      	ldr	r0, [pc, #532]	; (d65c <am_hal_cachectrl_control+0x2f0>)
    d446:	9302      	str	r3, [sp, #8]
    d448:	f000 fcce 	bl	dde8 <am_hal_flash_load_ui32>
    d44c:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d450:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d454:	4881      	ldr	r0, [pc, #516]	; (d65c <am_hal_cachectrl_control+0x2f0>)
    d456:	f000 fccb 	bl	ddf0 <am_hal_flash_store_ui32>
    d45a:	9802      	ldr	r0, [sp, #8]
    d45c:	f000 fe4c 	bl	e0f8 <am_hal_interrupt_master_set>
    d460:	f000 fe46 	bl	e0f0 <am_hal_interrupt_master_disable>
    d464:	4603      	mov	r3, r0
    d466:	487d      	ldr	r0, [pc, #500]	; (d65c <am_hal_cachectrl_control+0x2f0>)
    d468:	9303      	str	r3, [sp, #12]
    d46a:	f000 fcbd 	bl	dde8 <am_hal_flash_load_ui32>
    d46e:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d472:	f440 61ee 	orr.w	r1, r0, #1904	; 0x770
    d476:	4879      	ldr	r0, [pc, #484]	; (d65c <am_hal_cachectrl_control+0x2f0>)
    d478:	f000 fcba 	bl	ddf0 <am_hal_flash_store_ui32>
    d47c:	9803      	ldr	r0, [sp, #12]
    d47e:	f000 fe3b 	bl	e0f8 <am_hal_interrupt_master_set>
    d482:	f000 fe35 	bl	e0f0 <am_hal_interrupt_master_disable>
    d486:	4603      	mov	r3, r0
    d488:	4874      	ldr	r0, [pc, #464]	; (d65c <am_hal_cachectrl_control+0x2f0>)
    d48a:	9304      	str	r3, [sp, #16]
    d48c:	f000 fcac 	bl	dde8 <am_hal_flash_load_ui32>
    d490:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d494:	f020 000f 	bic.w	r0, r0, #15
    d498:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d49c:	f041 0103 	orr.w	r1, r1, #3
    d4a0:	486e      	ldr	r0, [pc, #440]	; (d65c <am_hal_cachectrl_control+0x2f0>)
    d4a2:	f000 fca5 	bl	ddf0 <am_hal_flash_store_ui32>
    d4a6:	9804      	ldr	r0, [sp, #16]
    d4a8:	f000 fe26 	bl	e0f8 <am_hal_interrupt_master_set>
    d4ac:	2000      	movs	r0, #0
    d4ae:	e77b      	b.n	d3a8 <am_hal_cachectrl_control+0x3c>
    d4b0:	f000 fe1e 	bl	e0f0 <am_hal_interrupt_master_disable>
    d4b4:	4603      	mov	r3, r0
    d4b6:	4869      	ldr	r0, [pc, #420]	; (d65c <am_hal_cachectrl_control+0x2f0>)
    d4b8:	9305      	str	r3, [sp, #20]
    d4ba:	f000 fc95 	bl	dde8 <am_hal_flash_load_ui32>
    d4be:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d4c2:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    d4c6:	4865      	ldr	r0, [pc, #404]	; (d65c <am_hal_cachectrl_control+0x2f0>)
    d4c8:	f000 fc92 	bl	ddf0 <am_hal_flash_store_ui32>
    d4cc:	9805      	ldr	r0, [sp, #20]
    d4ce:	f000 fe13 	bl	e0f8 <am_hal_interrupt_master_set>
    d4d2:	f000 fe0d 	bl	e0f0 <am_hal_interrupt_master_disable>
    d4d6:	4603      	mov	r3, r0
    d4d8:	4860      	ldr	r0, [pc, #384]	; (d65c <am_hal_cachectrl_control+0x2f0>)
    d4da:	9306      	str	r3, [sp, #24]
    d4dc:	f000 fc84 	bl	dde8 <am_hal_flash_load_ui32>
    d4e0:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d4e4:	f440 61ea 	orr.w	r1, r0, #1872	; 0x750
    d4e8:	485c      	ldr	r0, [pc, #368]	; (d65c <am_hal_cachectrl_control+0x2f0>)
    d4ea:	f000 fc81 	bl	ddf0 <am_hal_flash_store_ui32>
    d4ee:	9806      	ldr	r0, [sp, #24]
    d4f0:	f000 fe02 	bl	e0f8 <am_hal_interrupt_master_set>
    d4f4:	f000 fdfc 	bl	e0f0 <am_hal_interrupt_master_disable>
    d4f8:	4603      	mov	r3, r0
    d4fa:	4858      	ldr	r0, [pc, #352]	; (d65c <am_hal_cachectrl_control+0x2f0>)
    d4fc:	9307      	str	r3, [sp, #28]
    d4fe:	f000 fc73 	bl	dde8 <am_hal_flash_load_ui32>
    d502:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d506:	f020 000f 	bic.w	r0, r0, #15
    d50a:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d50e:	f041 0101 	orr.w	r1, r1, #1
    d512:	4852      	ldr	r0, [pc, #328]	; (d65c <am_hal_cachectrl_control+0x2f0>)
    d514:	f000 fc6c 	bl	ddf0 <am_hal_flash_store_ui32>
    d518:	9807      	ldr	r0, [sp, #28]
    d51a:	f000 fded 	bl	e0f8 <am_hal_interrupt_master_set>
    d51e:	2000      	movs	r0, #0
    d520:	e742      	b.n	d3a8 <am_hal_cachectrl_control+0x3c>
    d522:	f000 fde5 	bl	e0f0 <am_hal_interrupt_master_disable>
    d526:	4603      	mov	r3, r0
    d528:	484c      	ldr	r0, [pc, #304]	; (d65c <am_hal_cachectrl_control+0x2f0>)
    d52a:	9308      	str	r3, [sp, #32]
    d52c:	f000 fc5c 	bl	dde8 <am_hal_flash_load_ui32>
    d530:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d534:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    d538:	4848      	ldr	r0, [pc, #288]	; (d65c <am_hal_cachectrl_control+0x2f0>)
    d53a:	f000 fc59 	bl	ddf0 <am_hal_flash_store_ui32>
    d53e:	9808      	ldr	r0, [sp, #32]
    d540:	f000 fdda 	bl	e0f8 <am_hal_interrupt_master_set>
    d544:	f000 fdd4 	bl	e0f0 <am_hal_interrupt_master_disable>
    d548:	4603      	mov	r3, r0
    d54a:	4844      	ldr	r0, [pc, #272]	; (d65c <am_hal_cachectrl_control+0x2f0>)
    d54c:	9309      	str	r3, [sp, #36]	; 0x24
    d54e:	f000 fc4b 	bl	dde8 <am_hal_flash_load_ui32>
    d552:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d556:	f440 61ec 	orr.w	r1, r0, #1888	; 0x760
    d55a:	4840      	ldr	r0, [pc, #256]	; (d65c <am_hal_cachectrl_control+0x2f0>)
    d55c:	f000 fc48 	bl	ddf0 <am_hal_flash_store_ui32>
    d560:	9809      	ldr	r0, [sp, #36]	; 0x24
    d562:	f000 fdc9 	bl	e0f8 <am_hal_interrupt_master_set>
    d566:	f000 fdc3 	bl	e0f0 <am_hal_interrupt_master_disable>
    d56a:	4603      	mov	r3, r0
    d56c:	483b      	ldr	r0, [pc, #236]	; (d65c <am_hal_cachectrl_control+0x2f0>)
    d56e:	930a      	str	r3, [sp, #40]	; 0x28
    d570:	f000 fc3a 	bl	dde8 <am_hal_flash_load_ui32>
    d574:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d578:	f020 000f 	bic.w	r0, r0, #15
    d57c:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d580:	f041 0101 	orr.w	r1, r1, #1
    d584:	4835      	ldr	r0, [pc, #212]	; (d65c <am_hal_cachectrl_control+0x2f0>)
    d586:	f000 fc33 	bl	ddf0 <am_hal_flash_store_ui32>
    d58a:	980a      	ldr	r0, [sp, #40]	; 0x28
    d58c:	f000 fdb4 	bl	e0f8 <am_hal_interrupt_master_set>
    d590:	2000      	movs	r0, #0
    d592:	e709      	b.n	d3a8 <am_hal_cachectrl_control+0x3c>
    d594:	2900      	cmp	r1, #0
    d596:	d04d      	beq.n	d634 <am_hal_cachectrl_control+0x2c8>
    d598:	680c      	ldr	r4, [r1, #0]
    d59a:	2c03      	cmp	r4, #3
    d59c:	d84c      	bhi.n	d638 <am_hal_cachectrl_control+0x2cc>
    d59e:	f000 fda7 	bl	e0f0 <am_hal_interrupt_master_disable>
    d5a2:	4603      	mov	r3, r0
    d5a4:	482d      	ldr	r0, [pc, #180]	; (d65c <am_hal_cachectrl_control+0x2f0>)
    d5a6:	930b      	str	r3, [sp, #44]	; 0x2c
    d5a8:	f000 fc1e 	bl	dde8 <am_hal_flash_load_ui32>
    d5ac:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d5b0:	ea40 3104 	orr.w	r1, r0, r4, lsl #12
    d5b4:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d5b8:	4828      	ldr	r0, [pc, #160]	; (d65c <am_hal_cachectrl_control+0x2f0>)
    d5ba:	f000 fc19 	bl	ddf0 <am_hal_flash_store_ui32>
    d5be:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d5c0:	f000 fd9a 	bl	e0f8 <am_hal_interrupt_master_set>
    d5c4:	2000      	movs	r0, #0
    d5c6:	e6ef      	b.n	d3a8 <am_hal_cachectrl_control+0x3c>
    d5c8:	b3a1      	cbz	r1, d634 <am_hal_cachectrl_control+0x2c8>
    d5ca:	680c      	ldr	r4, [r1, #0]
    d5cc:	2c07      	cmp	r4, #7
    d5ce:	d833      	bhi.n	d638 <am_hal_cachectrl_control+0x2cc>
    d5d0:	f000 fd8e 	bl	e0f0 <am_hal_interrupt_master_disable>
    d5d4:	4603      	mov	r3, r0
    d5d6:	4821      	ldr	r0, [pc, #132]	; (d65c <am_hal_cachectrl_control+0x2f0>)
    d5d8:	930c      	str	r3, [sp, #48]	; 0x30
    d5da:	f000 fc05 	bl	dde8 <am_hal_flash_load_ui32>
    d5de:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d5e2:	ea40 1104 	orr.w	r1, r0, r4, lsl #4
    d5e6:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d5ea:	481c      	ldr	r0, [pc, #112]	; (d65c <am_hal_cachectrl_control+0x2f0>)
    d5ec:	f000 fc00 	bl	ddf0 <am_hal_flash_store_ui32>
    d5f0:	980c      	ldr	r0, [sp, #48]	; 0x30
    d5f2:	f000 fd81 	bl	e0f8 <am_hal_interrupt_master_set>
    d5f6:	2000      	movs	r0, #0
    d5f8:	e6d6      	b.n	d3a8 <am_hal_cachectrl_control+0x3c>
    d5fa:	b1d9      	cbz	r1, d634 <am_hal_cachectrl_control+0x2c8>
    d5fc:	680c      	ldr	r4, [r1, #0]
    d5fe:	2c0f      	cmp	r4, #15
    d600:	d81a      	bhi.n	d638 <am_hal_cachectrl_control+0x2cc>
    d602:	f000 fd75 	bl	e0f0 <am_hal_interrupt_master_disable>
    d606:	4603      	mov	r3, r0
    d608:	4814      	ldr	r0, [pc, #80]	; (d65c <am_hal_cachectrl_control+0x2f0>)
    d60a:	930d      	str	r3, [sp, #52]	; 0x34
    d60c:	f000 fbec 	bl	dde8 <am_hal_flash_load_ui32>
    d610:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d614:	f020 000f 	bic.w	r0, r0, #15
    d618:	ea40 0104 	orr.w	r1, r0, r4
    d61c:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d620:	480e      	ldr	r0, [pc, #56]	; (d65c <am_hal_cachectrl_control+0x2f0>)
    d622:	f000 fbe5 	bl	ddf0 <am_hal_flash_store_ui32>
    d626:	980d      	ldr	r0, [sp, #52]	; 0x34
    d628:	f000 fd66 	bl	e0f8 <am_hal_interrupt_master_set>
    d62c:	2000      	movs	r0, #0
    d62e:	e6bb      	b.n	d3a8 <am_hal_cachectrl_control+0x3c>
    d630:	2007      	movs	r0, #7
    d632:	e6b9      	b.n	d3a8 <am_hal_cachectrl_control+0x3c>
    d634:	2006      	movs	r0, #6
    d636:	e6b7      	b.n	d3a8 <am_hal_cachectrl_control+0x3c>
    d638:	2001      	movs	r0, #1
    d63a:	e6b5      	b.n	d3a8 <am_hal_cachectrl_control+0x3c>
    d63c:	2c01      	cmp	r4, #1
    d63e:	d1f9      	bne.n	d634 <am_hal_cachectrl_control+0x2c8>
    d640:	4c04      	ldr	r4, [pc, #16]	; (d654 <am_hal_cachectrl_control+0x2e8>)
    d642:	7849      	ldrb	r1, [r1, #1]
    d644:	61a2      	str	r2, [r4, #24]
    d646:	61e3      	str	r3, [r4, #28]
    d648:	6823      	ldr	r3, [r4, #0]
    d64a:	f361 03c3 	bfi	r3, r1, #3, #1
    d64e:	6023      	str	r3, [r4, #0]
    d650:	e6aa      	b.n	d3a8 <am_hal_cachectrl_control+0x3c>
    d652:	bf00      	nop
    d654:	40018000 	.word	0x40018000
    d658:	f800000f 	.word	0xf800000f
    d65c:	40018004 	.word	0x40018004

0000d660 <am_hal_clkgen_control>:
    d660:	4b49      	ldr	r3, [pc, #292]	; (d788 <am_hal_clkgen_control+0x128>)
    d662:	681a      	ldr	r2, [r3, #0]
    d664:	b912      	cbnz	r2, d66c <am_hal_clkgen_control+0xc>
    d666:	4a49      	ldr	r2, [pc, #292]	; (d78c <am_hal_clkgen_control+0x12c>)
    d668:	6812      	ldr	r2, [r2, #0]
    d66a:	601a      	str	r2, [r3, #0]
    d66c:	2809      	cmp	r0, #9
    d66e:	f200 8089 	bhi.w	d784 <am_hal_clkgen_control+0x124>
    d672:	e8df f000 	tbb	[pc, r0]
    d676:	160d      	.short	0x160d
    d678:	423a261e 	.word	0x423a261e
    d67c:	055c544c 	.word	0x055c544c
    d680:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d684:	2000      	movs	r0, #0
    d686:	6a1a      	ldr	r2, [r3, #32]
    d688:	f36f 0200 	bfc	r2, #0, #1
    d68c:	621a      	str	r2, [r3, #32]
    d68e:	4770      	bx	lr
    d690:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d694:	2200      	movs	r2, #0
    d696:	2147      	movs	r1, #71	; 0x47
    d698:	6159      	str	r1, [r3, #20]
    d69a:	4610      	mov	r0, r2
    d69c:	619a      	str	r2, [r3, #24]
    d69e:	615a      	str	r2, [r3, #20]
    d6a0:	4770      	bx	lr
    d6a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d6a6:	2000      	movs	r0, #0
    d6a8:	899a      	ldrh	r2, [r3, #12]
    d6aa:	f36f 0200 	bfc	r2, #0, #1
    d6ae:	819a      	strh	r2, [r3, #12]
    d6b0:	4770      	bx	lr
    d6b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d6b6:	2000      	movs	r0, #0
    d6b8:	899a      	ldrh	r2, [r3, #12]
    d6ba:	f36f 0241 	bfc	r2, #1, #1
    d6be:	819a      	strh	r2, [r3, #12]
    d6c0:	4770      	bx	lr
    d6c2:	4a33      	ldr	r2, [pc, #204]	; (d790 <am_hal_clkgen_control+0x130>)
    d6c4:	68d3      	ldr	r3, [r2, #12]
    d6c6:	b2db      	uxtb	r3, r3
    d6c8:	2b21      	cmp	r3, #33	; 0x21
    d6ca:	d106      	bne.n	d6da <am_hal_clkgen_control+0x7a>
    d6cc:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    d6d0:	2101      	movs	r1, #1
    d6d2:	f361 2309 	bfi	r3, r1, #8, #2
    d6d6:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    d6da:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d6de:	2000      	movs	r0, #0
    d6e0:	8993      	ldrh	r3, [r2, #12]
    d6e2:	f043 0301 	orr.w	r3, r3, #1
    d6e6:	8193      	strh	r3, [r2, #12]
    d6e8:	4770      	bx	lr
    d6ea:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d6ee:	2000      	movs	r0, #0
    d6f0:	8993      	ldrh	r3, [r2, #12]
    d6f2:	f043 0302 	orr.w	r3, r3, #2
    d6f6:	8193      	strh	r3, [r2, #12]
    d6f8:	4770      	bx	lr
    d6fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d6fe:	2200      	movs	r2, #0
    d700:	2047      	movs	r0, #71	; 0x47
    d702:	2101      	movs	r1, #1
    d704:	6158      	str	r0, [r3, #20]
    d706:	6199      	str	r1, [r3, #24]
    d708:	4610      	mov	r0, r2
    d70a:	615a      	str	r2, [r3, #20]
    d70c:	4770      	bx	lr
    d70e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d712:	2000      	movs	r0, #0
    d714:	899a      	ldrh	r2, [r3, #12]
    d716:	f36f 12c7 	bfc	r2, #7, #1
    d71a:	819a      	strh	r2, [r3, #12]
    d71c:	4770      	bx	lr
    d71e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d722:	2000      	movs	r0, #0
    d724:	8993      	ldrh	r3, [r2, #12]
    d726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d72a:	8193      	strh	r3, [r2, #12]
    d72c:	4770      	bx	lr
    d72e:	4a18      	ldr	r2, [pc, #96]	; (d790 <am_hal_clkgen_control+0x130>)
    d730:	68d3      	ldr	r3, [r2, #12]
    d732:	b2db      	uxtb	r3, r3
    d734:	2b21      	cmp	r3, #33	; 0x21
    d736:	d00a      	beq.n	d74e <am_hal_clkgen_control+0xee>
    d738:	b139      	cbz	r1, d74a <am_hal_clkgen_control+0xea>
    d73a:	680b      	ldr	r3, [r1, #0]
    d73c:	f043 0301 	orr.w	r3, r3, #1
    d740:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d744:	2000      	movs	r0, #0
    d746:	6213      	str	r3, [r2, #32]
    d748:	4770      	bx	lr
    d74a:	4b12      	ldr	r3, [pc, #72]	; (d794 <am_hal_clkgen_control+0x134>)
    d74c:	e7f8      	b.n	d740 <am_hal_clkgen_control+0xe0>
    d74e:	b500      	push	{lr}
    d750:	b083      	sub	sp, #12
    d752:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    d756:	9101      	str	r1, [sp, #4]
    d758:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    d75c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    d760:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    d764:	f000 fafa 	bl	dd5c <am_hal_flash_delay>
    d768:	9901      	ldr	r1, [sp, #4]
    d76a:	b149      	cbz	r1, d780 <am_hal_clkgen_control+0x120>
    d76c:	680b      	ldr	r3, [r1, #0]
    d76e:	f043 0301 	orr.w	r3, r3, #1
    d772:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d776:	2000      	movs	r0, #0
    d778:	6213      	str	r3, [r2, #32]
    d77a:	b003      	add	sp, #12
    d77c:	f85d fb04 	ldr.w	pc, [sp], #4
    d780:	4b04      	ldr	r3, [pc, #16]	; (d794 <am_hal_clkgen_control+0x134>)
    d782:	e7f6      	b.n	d772 <am_hal_clkgen_control+0x112>
    d784:	2006      	movs	r0, #6
    d786:	4770      	bx	lr
    d788:	10001154 	.word	0x10001154
    d78c:	4ffff000 	.word	0x4ffff000
    d790:	40020000 	.word	0x40020000
    d794:	0025b801 	.word	0x0025b801

0000d798 <am_hal_clkgen_status_get>:
    d798:	b1b0      	cbz	r0, d7c8 <am_hal_clkgen_status_get+0x30>
    d79a:	b410      	push	{r4}
    d79c:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    d7a0:	4603      	mov	r3, r0
    d7a2:	698c      	ldr	r4, [r1, #24]
    d7a4:	4809      	ldr	r0, [pc, #36]	; (d7cc <am_hal_clkgen_status_get+0x34>)
    d7a6:	4a0a      	ldr	r2, [pc, #40]	; (d7d0 <am_hal_clkgen_status_get+0x38>)
    d7a8:	f014 0f01 	tst.w	r4, #1
    d7ac:	bf08      	it	eq
    d7ae:	4602      	moveq	r2, r0
    d7b0:	601a      	str	r2, [r3, #0]
    d7b2:	69ca      	ldr	r2, [r1, #28]
    d7b4:	f85d 4b04 	ldr.w	r4, [sp], #4
    d7b8:	f002 0101 	and.w	r1, r2, #1
    d7bc:	f3c2 0240 	ubfx	r2, r2, #1, #1
    d7c0:	2000      	movs	r0, #0
    d7c2:	6059      	str	r1, [r3, #4]
    d7c4:	721a      	strb	r2, [r3, #8]
    d7c6:	4770      	bx	lr
    d7c8:	2006      	movs	r0, #6
    d7ca:	4770      	bx	lr
    d7cc:	02dc6c00 	.word	0x02dc6c00
    d7d0:	016e3600 	.word	0x016e3600

0000d7d4 <am_hal_ctimer_config_single>:
    d7d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d7d8:	b082      	sub	sp, #8
    d7da:	460e      	mov	r6, r1
    d7dc:	4605      	mov	r5, r0
    d7de:	4614      	mov	r4, r2
    d7e0:	f000 fc86 	bl	e0f0 <am_hal_interrupt_master_disable>
    d7e4:	4f20      	ldr	r7, [pc, #128]	; (d868 <am_hal_ctimer_config_single+0x94>)
    d7e6:	9001      	str	r0, [sp, #4]
    d7e8:	ea4f 1845 	mov.w	r8, r5, lsl #5
    d7ec:	f006 2308 	and.w	r3, r6, #134219776	; 0x8000800
    d7f0:	f858 2007 	ldr.w	r2, [r8, r7]
    d7f4:	4313      	orrs	r3, r2
    d7f6:	f848 3007 	str.w	r3, [r8, r7]
    d7fa:	9801      	ldr	r0, [sp, #4]
    d7fc:	f000 fc7c 	bl	e0f8 <am_hal_interrupt_master_set>
    d800:	f000 fc76 	bl	e0f0 <am_hal_interrupt_master_disable>
    d804:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    d808:	9000      	str	r0, [sp, #0]
    d80a:	f858 3007 	ldr.w	r3, [r8, r7]
    d80e:	d021      	beq.n	d854 <am_hal_ctimer_config_single+0x80>
    d810:	ea23 0306 	bic.w	r3, r3, r6
    d814:	1c72      	adds	r2, r6, #1
    d816:	ea43 0304 	orr.w	r3, r3, r4
    d81a:	d110      	bne.n	d83e <am_hal_ctimer_config_single+0x6a>
    d81c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d820:	f848 3007 	str.w	r3, [r8, r7]
    d824:	9800      	ldr	r0, [sp, #0]
    d826:	f000 fc67 	bl	e0f8 <am_hal_interrupt_master_set>
    d82a:	2300      	movs	r3, #0
    d82c:	480f      	ldr	r0, [pc, #60]	; (d86c <am_hal_ctimer_config_single+0x98>)
    d82e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
    d832:	f3c4 0444 	ubfx	r4, r4, #1, #5
    d836:	54ec      	strb	r4, [r5, r3]
    d838:	b002      	add	sp, #8
    d83a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d83e:	f848 3007 	str.w	r3, [r8, r7]
    d842:	9800      	ldr	r0, [sp, #0]
    d844:	f000 fc58 	bl	e0f8 <am_hal_interrupt_master_set>
    d848:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d84c:	429e      	cmp	r6, r3
    d84e:	d1f3      	bne.n	d838 <am_hal_ctimer_config_single+0x64>
    d850:	2300      	movs	r3, #0
    d852:	e7eb      	b.n	d82c <am_hal_ctimer_config_single+0x58>
    d854:	b29b      	uxth	r3, r3
    d856:	0424      	lsls	r4, r4, #16
    d858:	4323      	orrs	r3, r4
    d85a:	f848 3007 	str.w	r3, [r8, r7]
    d85e:	9800      	ldr	r0, [sp, #0]
    d860:	f000 fc4a 	bl	e0f8 <am_hal_interrupt_master_set>
    d864:	2301      	movs	r3, #1
    d866:	e7e1      	b.n	d82c <am_hal_ctimer_config_single+0x58>
    d868:	4000800c 	.word	0x4000800c
    d86c:	10001028 	.word	0x10001028

0000d870 <am_hal_ctimer_config_trigger>:
    d870:	b5f0      	push	{r4, r5, r6, r7, lr}
    d872:	b083      	sub	sp, #12
    d874:	460d      	mov	r5, r1
    d876:	0144      	lsls	r4, r0, #5
    d878:	4616      	mov	r6, r2
    d87a:	f000 fc39 	bl	e0f0 <am_hal_interrupt_master_disable>
    d87e:	4f08      	ldr	r7, [pc, #32]	; (d8a0 <am_hal_ctimer_config_trigger+0x30>)
    d880:	9001      	str	r0, [sp, #4]
    d882:	59e1      	ldr	r1, [r4, r7]
    d884:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
    d888:	bf08      	it	eq
    d88a:	0436      	lsleq	r6, r6, #16
    d88c:	ea21 0105 	bic.w	r1, r1, r5
    d890:	4331      	orrs	r1, r6
    d892:	51e1      	str	r1, [r4, r7]
    d894:	9801      	ldr	r0, [sp, #4]
    d896:	b003      	add	sp, #12
    d898:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    d89c:	f000 bc2c 	b.w	e0f8 <am_hal_interrupt_master_set>
    d8a0:	4000801c 	.word	0x4000801c

0000d8a4 <am_hal_ctimer_start>:
    d8a4:	b530      	push	{r4, r5, lr}
    d8a6:	b083      	sub	sp, #12
    d8a8:	460c      	mov	r4, r1
    d8aa:	4605      	mov	r5, r0
    d8ac:	f000 fc20 	bl	e0f0 <am_hal_interrupt_master_disable>
    d8b0:	ea4f 1c45 	mov.w	ip, r5, lsl #5
    d8b4:	4910      	ldr	r1, [pc, #64]	; (d8f8 <am_hal_ctimer_start+0x54>)
    d8b6:	9001      	str	r0, [sp, #4]
    d8b8:	f85c 3001 	ldr.w	r3, [ip, r1]
    d8bc:	f004 2208 	and.w	r2, r4, #134219776	; 0x8000800
    d8c0:	ea23 0202 	bic.w	r2, r3, r2
    d8c4:	f004 1301 	and.w	r3, r4, #65537	; 0x10001
    d8c8:	4313      	orrs	r3, r2
    d8ca:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    d8ce:	f84c 3001 	str.w	r3, [ip, r1]
    d8d2:	bf0c      	ite	eq
    d8d4:	f3c3 4444 	ubfxeq	r4, r3, #17, #5
    d8d8:	f3c3 0444 	ubfxne	r4, r3, #1, #5
    d8dc:	4b07      	ldr	r3, [pc, #28]	; (d8fc <am_hal_ctimer_start+0x58>)
    d8de:	9801      	ldr	r0, [sp, #4]
    d8e0:	bf0c      	ite	eq
    d8e2:	2201      	moveq	r2, #1
    d8e4:	2200      	movne	r2, #0
    d8e6:	eb03 0545 	add.w	r5, r3, r5, lsl #1
    d8ea:	54ac      	strb	r4, [r5, r2]
    d8ec:	b003      	add	sp, #12
    d8ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    d8f2:	f000 bc01 	b.w	e0f8 <am_hal_interrupt_master_set>
    d8f6:	bf00      	nop
    d8f8:	4000800c 	.word	0x4000800c
    d8fc:	10001028 	.word	0x10001028

0000d900 <am_hal_ctimer_clear>:
    d900:	b530      	push	{r4, r5, lr}
    d902:	b083      	sub	sp, #12
    d904:	0145      	lsls	r5, r0, #5
    d906:	460c      	mov	r4, r1
    d908:	f000 fbf2 	bl	e0f0 <am_hal_interrupt_master_disable>
    d90c:	4b06      	ldr	r3, [pc, #24]	; (d928 <am_hal_ctimer_clear+0x28>)
    d90e:	9001      	str	r0, [sp, #4]
    d910:	58e9      	ldr	r1, [r5, r3]
    d912:	f004 2408 	and.w	r4, r4, #134219776	; 0x8000800
    d916:	430c      	orrs	r4, r1
    d918:	50ec      	str	r4, [r5, r3]
    d91a:	9801      	ldr	r0, [sp, #4]
    d91c:	b003      	add	sp, #12
    d91e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    d922:	f000 bbe9 	b.w	e0f8 <am_hal_interrupt_master_set>
    d926:	bf00      	nop
    d928:	4000800c 	.word	0x4000800c

0000d92c <am_hal_ctimer_output_config>:
    d92c:	2a32      	cmp	r2, #50	; 0x32
    d92e:	d84d      	bhi.n	d9cc <am_hal_ctimer_output_config+0xa0>
    d930:	2807      	cmp	r0, #7
    d932:	d84b      	bhi.n	d9cc <am_hal_ctimer_output_config+0xa0>
    d934:	2b03      	cmp	r3, #3
    d936:	d849      	bhi.n	d9cc <am_hal_ctimer_output_config+0xa0>
    d938:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d93c:	f64f 74ff 	movw	r4, #65535	; 0xffff
    d940:	42a1      	cmp	r1, r4
    d942:	b083      	sub	sp, #12
    d944:	f04f 0800 	mov.w	r8, #0
    d948:	d005      	beq.n	d956 <am_hal_ctimer_output_config+0x2a>
    d94a:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    d94e:	d002      	beq.n	d956 <am_hal_ctimer_output_config+0x2a>
    d950:	1c4c      	adds	r4, r1, #1
    d952:	f040 80a7 	bne.w	daa4 <am_hal_ctimer_output_config+0x178>
    d956:	4f8d      	ldr	r7, [pc, #564]	; (db8c <am_hal_ctimer_output_config+0x260>)
    d958:	2400      	movs	r4, #0
    d95a:	e003      	b.n	d964 <am_hal_ctimer_output_config+0x38>
    d95c:	3401      	adds	r4, #1
    d95e:	2c20      	cmp	r4, #32
    d960:	f000 80ac 	beq.w	dabc <am_hal_ctimer_output_config+0x190>
    d964:	f837 5b02 	ldrh.w	r5, [r7], #2
    d968:	f005 063f 	and.w	r6, r5, #63	; 0x3f
    d96c:	42b2      	cmp	r2, r6
    d96e:	d1f5      	bne.n	d95c <am_hal_ctimer_output_config+0x30>
    d970:	2e32      	cmp	r6, #50	; 0x32
    d972:	f000 80a3 	beq.w	dabc <am_hal_ctimer_output_config+0x190>
    d976:	2805      	cmp	r0, #5
    d978:	d92a      	bls.n	d9d0 <am_hal_ctimer_output_config+0xa4>
    d97a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d97e:	4291      	cmp	r1, r2
    d980:	d126      	bne.n	d9d0 <am_hal_ctimer_output_config+0xa4>
    d982:	2b01      	cmp	r3, #1
    d984:	d027      	beq.n	d9d6 <am_hal_ctimer_output_config+0xaa>
    d986:	d825      	bhi.n	d9d4 <am_hal_ctimer_output_config+0xa8>
    d988:	4a81      	ldr	r2, [pc, #516]	; (db90 <am_hal_ctimer_output_config+0x264>)
    d98a:	f812 1024 	ldrb.w	r1, [r2, r4, lsl #2]
    d98e:	f001 0707 	and.w	r7, r1, #7
    d992:	42b8      	cmp	r0, r7
    d994:	f000 80ed 	beq.w	db72 <am_hal_ctimer_output_config+0x246>
    d998:	eb02 0184 	add.w	r1, r2, r4, lsl #2
    d99c:	784f      	ldrb	r7, [r1, #1]
    d99e:	f007 0c07 	and.w	ip, r7, #7
    d9a2:	4560      	cmp	r0, ip
    d9a4:	ea4f 0184 	mov.w	r1, r4, lsl #2
    d9a8:	f000 80d8 	beq.w	db5c <am_hal_ctimer_output_config+0x230>
    d9ac:	1857      	adds	r7, r2, r1
    d9ae:	78bf      	ldrb	r7, [r7, #2]
    d9b0:	f007 0c07 	and.w	ip, r7, #7
    d9b4:	4560      	cmp	r0, ip
    d9b6:	f000 80c6 	beq.w	db46 <am_hal_ctimer_output_config+0x21a>
    d9ba:	440a      	add	r2, r1
    d9bc:	78d2      	ldrb	r2, [r2, #3]
    d9be:	f002 0107 	and.w	r1, r2, #7
    d9c2:	4288      	cmp	r0, r1
    d9c4:	f000 80b4 	beq.w	db30 <am_hal_ctimer_output_config+0x204>
    d9c8:	2007      	movs	r0, #7
    d9ca:	e03e      	b.n	da4a <am_hal_ctimer_output_config+0x11e>
    d9cc:	2006      	movs	r0, #6
    d9ce:	4770      	bx	lr
    d9d0:	2b01      	cmp	r3, #1
    d9d2:	d93d      	bls.n	da50 <am_hal_ctimer_output_config+0x124>
    d9d4:	1e98      	subs	r0, r3, #2
    d9d6:	4b6f      	ldr	r3, [pc, #444]	; (db94 <am_hal_ctimer_output_config+0x268>)
    d9d8:	fba3 2304 	umull	r2, r3, r3, r4
    d9dc:	08db      	lsrs	r3, r3, #3
    d9de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    d9e2:	eba4 0343 	sub.w	r3, r4, r3, lsl #1
    d9e6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    d9ea:	2b04      	cmp	r3, #4
    d9ec:	bf88      	it	hi
    d9ee:	3201      	addhi	r2, #1
    d9f0:	f04f 0907 	mov.w	r9, #7
    d9f4:	fa00 f702 	lsl.w	r7, r0, r2
    d9f8:	fa09 f902 	lsl.w	r9, r9, r2
    d9fc:	f000 fb78 	bl	e0f0 <am_hal_interrupt_master_disable>
    da00:	2c09      	cmp	r4, #9
    da02:	4b65      	ldr	r3, [pc, #404]	; (db98 <am_hal_ctimer_output_config+0x26c>)
    da04:	9001      	str	r0, [sp, #4]
    da06:	d84f      	bhi.n	daa8 <am_hal_ctimer_output_config+0x17c>
    da08:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    da0c:	ea22 0209 	bic.w	r2, r2, r9
    da10:	433a      	orrs	r2, r7
    da12:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    da16:	4a61      	ldr	r2, [pc, #388]	; (db9c <am_hal_ctimer_output_config+0x270>)
    da18:	2301      	movs	r3, #1
    da1a:	40a3      	lsls	r3, r4
    da1c:	f8d2 4118 	ldr.w	r4, [r2, #280]	; 0x118
    da20:	ea24 0403 	bic.w	r4, r4, r3
    da24:	f8c2 4118 	str.w	r4, [r2, #280]	; 0x118
    da28:	9801      	ldr	r0, [sp, #4]
    da2a:	f000 fb65 	bl	e0f8 <am_hal_interrupt_master_set>
    da2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    da30:	f3c5 2502 	ubfx	r5, r5, #8, #3
    da34:	f003 0303 	and.w	r3, r3, #3
    da38:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    da3c:	f365 080f 	bfi	r8, r5, #0, #16
    da40:	4641      	mov	r1, r8
    da42:	4630      	mov	r0, r6
    da44:	f000 f9da 	bl	ddfc <am_hal_gpio_pinconfig>
    da48:	2000      	movs	r0, #0
    da4a:	b003      	add	sp, #12
    da4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    da50:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    da54:	d152      	bne.n	dafc <am_hal_ctimer_output_config+0x1d0>
    da56:	4a4e      	ldr	r2, [pc, #312]	; (db90 <am_hal_ctimer_output_config+0x264>)
    da58:	f812 1024 	ldrb.w	r1, [r2, r4, lsl #2]
    da5c:	f001 0707 	and.w	r7, r1, #7
    da60:	42b8      	cmp	r0, r7
    da62:	d041      	beq.n	dae8 <am_hal_ctimer_output_config+0x1bc>
    da64:	eb02 0184 	add.w	r1, r2, r4, lsl #2
    da68:	784f      	ldrb	r7, [r1, #1]
    da6a:	f007 0c07 	and.w	ip, r7, #7
    da6e:	4560      	cmp	r0, ip
    da70:	ea4f 0184 	mov.w	r1, r4, lsl #2
    da74:	d052      	beq.n	db1c <am_hal_ctimer_output_config+0x1f0>
    da76:	1857      	adds	r7, r2, r1
    da78:	78bf      	ldrb	r7, [r7, #2]
    da7a:	f007 0c07 	and.w	ip, r7, #7
    da7e:	4560      	cmp	r0, ip
    da80:	d042      	beq.n	db08 <am_hal_ctimer_output_config+0x1dc>
    da82:	440a      	add	r2, r1
    da84:	78d2      	ldrb	r2, [r2, #3]
    da86:	f002 0107 	and.w	r1, r2, #7
    da8a:	4288      	cmp	r0, r1
    da8c:	d19c      	bne.n	d9c8 <am_hal_ctimer_output_config+0x9c>
    da8e:	f3c2 1100 	ubfx	r1, r2, #4, #1
    da92:	0712      	lsls	r2, r2, #28
    da94:	f003 0301 	and.w	r3, r3, #1
    da98:	d596      	bpl.n	d9c8 <am_hal_ctimer_output_config+0x9c>
    da9a:	4299      	cmp	r1, r3
    da9c:	d194      	bne.n	d9c8 <am_hal_ctimer_output_config+0x9c>
    da9e:	2003      	movs	r0, #3
    daa0:	3002      	adds	r0, #2
    daa2:	e798      	b.n	d9d6 <am_hal_ctimer_output_config+0xaa>
    daa4:	2006      	movs	r0, #6
    daa6:	e7d0      	b.n	da4a <am_hal_ctimer_output_config+0x11e>
    daa8:	2c13      	cmp	r4, #19
    daaa:	d80b      	bhi.n	dac4 <am_hal_ctimer_output_config+0x198>
    daac:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    dab0:	ea22 0209 	bic.w	r2, r2, r9
    dab4:	433a      	orrs	r2, r7
    dab6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    daba:	e7ac      	b.n	da16 <am_hal_ctimer_output_config+0xea>
    dabc:	2005      	movs	r0, #5
    dabe:	b003      	add	sp, #12
    dac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    dac4:	2c1d      	cmp	r4, #29
    dac6:	d807      	bhi.n	dad8 <am_hal_ctimer_output_config+0x1ac>
    dac8:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    dacc:	ea22 0209 	bic.w	r2, r2, r9
    dad0:	433a      	orrs	r2, r7
    dad2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    dad6:	e79e      	b.n	da16 <am_hal_ctimer_output_config+0xea>
    dad8:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    dadc:	ea22 0209 	bic.w	r2, r2, r9
    dae0:	433a      	orrs	r2, r7
    dae2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    dae6:	e796      	b.n	da16 <am_hal_ctimer_output_config+0xea>
    dae8:	f3c1 1c00 	ubfx	ip, r1, #4, #1
    daec:	0709      	lsls	r1, r1, #28
    daee:	f003 0701 	and.w	r7, r3, #1
    daf2:	d5b7      	bpl.n	da64 <am_hal_ctimer_output_config+0x138>
    daf4:	45bc      	cmp	ip, r7
    daf6:	d1b5      	bne.n	da64 <am_hal_ctimer_output_config+0x138>
    daf8:	2000      	movs	r0, #0
    dafa:	e7d1      	b.n	daa0 <am_hal_ctimer_output_config+0x174>
    dafc:	f64f 72ff 	movw	r2, #65535	; 0xffff
    db00:	4291      	cmp	r1, r2
    db02:	f47f af61 	bne.w	d9c8 <am_hal_ctimer_output_config+0x9c>
    db06:	e73f      	b.n	d988 <am_hal_ctimer_output_config+0x5c>
    db08:	f3c7 1e00 	ubfx	lr, r7, #4, #1
    db0c:	073f      	lsls	r7, r7, #28
    db0e:	f003 0c01 	and.w	ip, r3, #1
    db12:	d5b6      	bpl.n	da82 <am_hal_ctimer_output_config+0x156>
    db14:	45e6      	cmp	lr, ip
    db16:	d1b4      	bne.n	da82 <am_hal_ctimer_output_config+0x156>
    db18:	2002      	movs	r0, #2
    db1a:	e7c1      	b.n	daa0 <am_hal_ctimer_output_config+0x174>
    db1c:	f3c7 1e00 	ubfx	lr, r7, #4, #1
    db20:	073f      	lsls	r7, r7, #28
    db22:	f003 0c01 	and.w	ip, r3, #1
    db26:	d5a6      	bpl.n	da76 <am_hal_ctimer_output_config+0x14a>
    db28:	45e6      	cmp	lr, ip
    db2a:	d1a4      	bne.n	da76 <am_hal_ctimer_output_config+0x14a>
    db2c:	2001      	movs	r0, #1
    db2e:	e7b7      	b.n	daa0 <am_hal_ctimer_output_config+0x174>
    db30:	0710      	lsls	r0, r2, #28
    db32:	f003 0301 	and.w	r3, r3, #1
    db36:	f3c2 1100 	ubfx	r1, r2, #4, #1
    db3a:	f53f af45 	bmi.w	d9c8 <am_hal_ctimer_output_config+0x9c>
    db3e:	428b      	cmp	r3, r1
    db40:	f47f af42 	bne.w	d9c8 <am_hal_ctimer_output_config+0x9c>
    db44:	e7ab      	b.n	da9e <am_hal_ctimer_output_config+0x172>
    db46:	f3c7 1e00 	ubfx	lr, r7, #4, #1
    db4a:	073f      	lsls	r7, r7, #28
    db4c:	f003 0c01 	and.w	ip, r3, #1
    db50:	f53f af33 	bmi.w	d9ba <am_hal_ctimer_output_config+0x8e>
    db54:	45e6      	cmp	lr, ip
    db56:	f47f af30 	bne.w	d9ba <am_hal_ctimer_output_config+0x8e>
    db5a:	e7dd      	b.n	db18 <am_hal_ctimer_output_config+0x1ec>
    db5c:	f3c7 1e00 	ubfx	lr, r7, #4, #1
    db60:	073f      	lsls	r7, r7, #28
    db62:	f003 0c01 	and.w	ip, r3, #1
    db66:	f53f af21 	bmi.w	d9ac <am_hal_ctimer_output_config+0x80>
    db6a:	45e6      	cmp	lr, ip
    db6c:	f47f af1e 	bne.w	d9ac <am_hal_ctimer_output_config+0x80>
    db70:	e7dc      	b.n	db2c <am_hal_ctimer_output_config+0x200>
    db72:	f3c1 1c00 	ubfx	ip, r1, #4, #1
    db76:	f011 0108 	ands.w	r1, r1, #8
    db7a:	f003 0701 	and.w	r7, r3, #1
    db7e:	f47f af0b 	bne.w	d998 <am_hal_ctimer_output_config+0x6c>
    db82:	45bc      	cmp	ip, r7
    db84:	f47f af08 	bne.w	d998 <am_hal_ctimer_output_config+0x6c>
    db88:	e7b6      	b.n	daf8 <am_hal_ctimer_output_config+0x1cc>
    db8a:	bf00      	nop
    db8c:	0000e894 	.word	0x0000e894
    db90:	0000e8d4 	.word	0x0000e8d4
    db94:	cccccccd 	.word	0xcccccccd
    db98:	40008000 	.word	0x40008000
    db9c:	40010000 	.word	0x40010000

0000dba0 <am_hal_ctimer_compare_set>:
    dba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dba4:	460e      	mov	r6, r1
    dba6:	b082      	sub	sp, #8
    dba8:	3101      	adds	r1, #1
    dbaa:	ea4f 1540 	mov.w	r5, r0, lsl #5
    dbae:	bf0c      	ite	eq
    dbb0:	0c1f      	lsreq	r7, r3, #16
    dbb2:	b29f      	uxthne	r7, r3
    dbb4:	4692      	mov	sl, r2
    dbb6:	461c      	mov	r4, r3
    dbb8:	f000 fa9a 	bl	e0f0 <am_hal_interrupt_master_disable>
    dbbc:	f8df 805c 	ldr.w	r8, [pc, #92]	; dc1c <am_hal_ctimer_compare_set+0x7c>
    dbc0:	f8df 905c 	ldr.w	r9, [pc, #92]	; dc20 <am_hal_ctimer_compare_set+0x80>
    dbc4:	9001      	str	r0, [sp, #4]
    dbc6:	f1ba 0f01 	cmp.w	sl, #1
    dbca:	f855 3008 	ldr.w	r3, [r5, r8]
    dbce:	f855 1009 	ldr.w	r1, [r5, r9]
    dbd2:	d01a      	beq.n	dc0a <am_hal_ctimer_compare_set+0x6a>
    dbd4:	4a10      	ldr	r2, [pc, #64]	; (dc18 <am_hal_ctimer_compare_set+0x78>)
    dbd6:	b2a4      	uxth	r4, r4
    dbd8:	4013      	ands	r3, r2
    dbda:	4011      	ands	r1, r2
    dbdc:	431c      	orrs	r4, r3
    dbde:	4339      	orrs	r1, r7
    dbe0:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    dbe4:	d009      	beq.n	dbfa <am_hal_ctimer_compare_set+0x5a>
    dbe6:	3601      	adds	r6, #1
    dbe8:	f845 4008 	str.w	r4, [r5, r8]
    dbec:	d005      	beq.n	dbfa <am_hal_ctimer_compare_set+0x5a>
    dbee:	9801      	ldr	r0, [sp, #4]
    dbf0:	b002      	add	sp, #8
    dbf2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dbf6:	f000 ba7f 	b.w	e0f8 <am_hal_interrupt_master_set>
    dbfa:	f845 1009 	str.w	r1, [r5, r9]
    dbfe:	9801      	ldr	r0, [sp, #4]
    dc00:	b002      	add	sp, #8
    dc02:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dc06:	f000 ba77 	b.w	e0f8 <am_hal_interrupt_master_set>
    dc0a:	b29b      	uxth	r3, r3
    dc0c:	b289      	uxth	r1, r1
    dc0e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    dc12:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
    dc16:	e7e3      	b.n	dbe0 <am_hal_ctimer_compare_set+0x40>
    dc18:	ffff0000 	.word	0xffff0000
    dc1c:	40008004 	.word	0x40008004
    dc20:	40008008 	.word	0x40008008

0000dc24 <am_hal_ctimer_aux_compare_set>:
    dc24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dc28:	460e      	mov	r6, r1
    dc2a:	b082      	sub	sp, #8
    dc2c:	3101      	adds	r1, #1
    dc2e:	ea4f 1540 	mov.w	r5, r0, lsl #5
    dc32:	bf0c      	ite	eq
    dc34:	0c1f      	lsreq	r7, r3, #16
    dc36:	b29f      	uxthne	r7, r3
    dc38:	4692      	mov	sl, r2
    dc3a:	461c      	mov	r4, r3
    dc3c:	f000 fa58 	bl	e0f0 <am_hal_interrupt_master_disable>
    dc40:	f8df 805c 	ldr.w	r8, [pc, #92]	; dca0 <am_hal_ctimer_aux_compare_set+0x7c>
    dc44:	f8df 905c 	ldr.w	r9, [pc, #92]	; dca4 <am_hal_ctimer_aux_compare_set+0x80>
    dc48:	9001      	str	r0, [sp, #4]
    dc4a:	f1ba 0f01 	cmp.w	sl, #1
    dc4e:	f855 3008 	ldr.w	r3, [r5, r8]
    dc52:	f855 1009 	ldr.w	r1, [r5, r9]
    dc56:	d01a      	beq.n	dc8e <am_hal_ctimer_aux_compare_set+0x6a>
    dc58:	4a10      	ldr	r2, [pc, #64]	; (dc9c <am_hal_ctimer_aux_compare_set+0x78>)
    dc5a:	b2a4      	uxth	r4, r4
    dc5c:	4013      	ands	r3, r2
    dc5e:	4011      	ands	r1, r2
    dc60:	431c      	orrs	r4, r3
    dc62:	4339      	orrs	r1, r7
    dc64:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    dc68:	d009      	beq.n	dc7e <am_hal_ctimer_aux_compare_set+0x5a>
    dc6a:	3601      	adds	r6, #1
    dc6c:	f845 4008 	str.w	r4, [r5, r8]
    dc70:	d005      	beq.n	dc7e <am_hal_ctimer_aux_compare_set+0x5a>
    dc72:	9801      	ldr	r0, [sp, #4]
    dc74:	b002      	add	sp, #8
    dc76:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dc7a:	f000 ba3d 	b.w	e0f8 <am_hal_interrupt_master_set>
    dc7e:	f845 1009 	str.w	r1, [r5, r9]
    dc82:	9801      	ldr	r0, [sp, #4]
    dc84:	b002      	add	sp, #8
    dc86:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dc8a:	f000 ba35 	b.w	e0f8 <am_hal_interrupt_master_set>
    dc8e:	b29b      	uxth	r3, r3
    dc90:	b289      	uxth	r1, r1
    dc92:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    dc96:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
    dc9a:	e7e3      	b.n	dc64 <am_hal_ctimer_aux_compare_set+0x40>
    dc9c:	ffff0000 	.word	0xffff0000
    dca0:	40008014 	.word	0x40008014
    dca4:	40008018 	.word	0x40008018

0000dca8 <am_hal_ctimer_period_set>:
    dca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dcac:	b082      	sub	sp, #8
    dcae:	0145      	lsls	r5, r0, #5
    dcb0:	460e      	mov	r6, r1
    dcb2:	4614      	mov	r4, r2
    dcb4:	461f      	mov	r7, r3
    dcb6:	f000 fa1b 	bl	e0f0 <am_hal_interrupt_master_disable>
    dcba:	f8df 809c 	ldr.w	r8, [pc, #156]	; dd58 <am_hal_ctimer_period_set+0xb0>
    dcbe:	9001      	str	r0, [sp, #4]
    dcc0:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    dcc4:	f855 2008 	ldr.w	r2, [r5, r8]
    dcc8:	4821      	ldr	r0, [pc, #132]	; (dd50 <am_hal_ctimer_period_set+0xa8>)
    dcca:	d02f      	beq.n	dd2c <am_hal_ctimer_period_set+0x84>
    dccc:	f402 72c0 	and.w	r2, r2, #384	; 0x180
    dcd0:	2a80      	cmp	r2, #128	; 0x80
    dcd2:	d019      	beq.n	dd08 <am_hal_ctimer_period_set+0x60>
    dcd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    dcd8:	2100      	movs	r1, #0
    dcda:	4296      	cmp	r6, r2
    dcdc:	460b      	mov	r3, r1
    dcde:	d01c      	beq.n	dd1a <am_hal_ctimer_period_set+0x72>
    dce0:	4a1c      	ldr	r2, [pc, #112]	; (dd54 <am_hal_ctimer_period_set+0xac>)
    dce2:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    dce6:	eb05 0702 	add.w	r7, r5, r2
    dcea:	d027      	beq.n	dd3c <am_hal_ctimer_period_set+0x94>
    dcec:	0c1b      	lsrs	r3, r3, #16
    dcee:	041b      	lsls	r3, r3, #16
    dcf0:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
    dcf4:	b2a4      	uxth	r4, r4
    dcf6:	4321      	orrs	r1, r4
    dcf8:	5029      	str	r1, [r5, r0]
    dcfa:	50ab      	str	r3, [r5, r2]
    dcfc:	9801      	ldr	r0, [sp, #4]
    dcfe:	b002      	add	sp, #8
    dd00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    dd04:	f000 b9f8 	b.w	e0f8 <am_hal_interrupt_master_set>
    dd08:	f64f 72ff 	movw	r2, #65535	; 0xffff
    dd0c:	4296      	cmp	r6, r2
    dd0e:	ea4f 4104 	mov.w	r1, r4, lsl #16
    dd12:	4623      	mov	r3, r4
    dd14:	eba4 0407 	sub.w	r4, r4, r7
    dd18:	d1e2      	bne.n	dce0 <am_hal_ctimer_period_set+0x38>
    dd1a:	b2a4      	uxth	r4, r4
    dd1c:	4321      	orrs	r1, r4
    dd1e:	5029      	str	r1, [r5, r0]
    dd20:	9801      	ldr	r0, [sp, #4]
    dd22:	b002      	add	sp, #8
    dd24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    dd28:	f000 b9e6 	b.w	e0f8 <am_hal_interrupt_master_set>
    dd2c:	0c12      	lsrs	r2, r2, #16
    dd2e:	f402 72c0 	and.w	r2, r2, #384	; 0x180
    dd32:	2a80      	cmp	r2, #128	; 0x80
    dd34:	d0e8      	beq.n	dd08 <am_hal_ctimer_period_set+0x60>
    dd36:	4f07      	ldr	r7, [pc, #28]	; (dd54 <am_hal_ctimer_period_set+0xac>)
    dd38:	2100      	movs	r1, #0
    dd3a:	442f      	add	r7, r5
    dd3c:	b2a4      	uxth	r4, r4
    dd3e:	4321      	orrs	r1, r4
    dd40:	6039      	str	r1, [r7, #0]
    dd42:	9801      	ldr	r0, [sp, #4]
    dd44:	b002      	add	sp, #8
    dd46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    dd4a:	f000 b9d5 	b.w	e0f8 <am_hal_interrupt_master_set>
    dd4e:	bf00      	nop
    dd50:	40008004 	.word	0x40008004
    dd54:	40008008 	.word	0x40008008
    dd58:	4000800c 	.word	0x4000800c

0000dd5c <am_hal_flash_delay>:
    dd5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dd60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    dd62:	075b      	lsls	r3, r3, #29
    dd64:	bf46      	itte	mi
    dd66:	0040      	lslmi	r0, r0, #1
    dd68:	230e      	movmi	r3, #14
    dd6a:	230b      	movpl	r3, #11
    dd6c:	4298      	cmp	r0, r3
    dd6e:	d902      	bls.n	dd76 <am_hal_flash_delay+0x1a>
    dd70:	4a01      	ldr	r2, [pc, #4]	; (dd78 <am_hal_flash_delay+0x1c>)
    dd72:	1ac0      	subs	r0, r0, r3
    dd74:	4710      	bx	r2
    dd76:	4770      	bx	lr
    dd78:	0800009d 	.word	0x0800009d

0000dd7c <am_hal_flash_delay_status_check>:
    dd7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dd80:	f89d c020 	ldrb.w	ip, [sp, #32]
    dd84:	f8df 805c 	ldr.w	r8, [pc, #92]	; dde4 <am_hal_flash_delay_status_check+0x68>
    dd88:	4604      	mov	r4, r0
    dd8a:	460d      	mov	r5, r1
    dd8c:	4616      	mov	r6, r2
    dd8e:	461f      	mov	r7, r3
    dd90:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    dd94:	f1bc 0f00 	cmp.w	ip, #0
    dd98:	d00a      	beq.n	ddb0 <am_hal_flash_delay_status_check+0x34>
    dd9a:	e01a      	b.n	ddd2 <am_hal_flash_delay_status_check+0x56>
    dd9c:	b1f4      	cbz	r4, dddc <am_hal_flash_delay_status_check+0x60>
    dd9e:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    dda2:	f013 0f04 	tst.w	r3, #4
    dda6:	bf0c      	ite	eq
    dda8:	2005      	moveq	r0, #5
    ddaa:	2012      	movne	r0, #18
    ddac:	3c01      	subs	r4, #1
    ddae:	47c0      	blx	r8
    ddb0:	6828      	ldr	r0, [r5, #0]
    ddb2:	4030      	ands	r0, r6
    ddb4:	42b8      	cmp	r0, r7
    ddb6:	d0f1      	beq.n	dd9c <am_hal_flash_delay_status_check+0x20>
    ddb8:	2000      	movs	r0, #0
    ddba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ddbe:	b16c      	cbz	r4, dddc <am_hal_flash_delay_status_check+0x60>
    ddc0:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    ddc4:	f013 0f04 	tst.w	r3, #4
    ddc8:	bf0c      	ite	eq
    ddca:	2005      	moveq	r0, #5
    ddcc:	2012      	movne	r0, #18
    ddce:	3c01      	subs	r4, #1
    ddd0:	47c0      	blx	r8
    ddd2:	6828      	ldr	r0, [r5, #0]
    ddd4:	4030      	ands	r0, r6
    ddd6:	42b8      	cmp	r0, r7
    ddd8:	d1f1      	bne.n	ddbe <am_hal_flash_delay_status_check+0x42>
    ddda:	e7ed      	b.n	ddb8 <am_hal_flash_delay_status_check+0x3c>
    dddc:	2004      	movs	r0, #4
    ddde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dde2:	bf00      	nop
    dde4:	0800009d 	.word	0x0800009d

0000dde8 <am_hal_flash_load_ui32>:
    dde8:	4b00      	ldr	r3, [pc, #0]	; (ddec <am_hal_flash_load_ui32+0x4>)
    ddea:	4718      	bx	r3
    ddec:	08000075 	.word	0x08000075

0000ddf0 <am_hal_flash_store_ui32>:
    ddf0:	4b01      	ldr	r3, [pc, #4]	; (ddf8 <am_hal_flash_store_ui32+0x8>)
    ddf2:	f043 0301 	orr.w	r3, r3, #1
    ddf6:	4718      	bx	r3
    ddf8:	10001038 	.word	0x10001038

0000ddfc <am_hal_gpio_pinconfig>:
    ddfc:	2831      	cmp	r0, #49	; 0x31
    ddfe:	f200 80c3 	bhi.w	df88 <am_hal_gpio_pinconfig+0x18c>
    de02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    de06:	4604      	mov	r4, r0
    de08:	f011 07e0 	ands.w	r7, r1, #224	; 0xe0
    de0c:	f001 0007 	and.w	r0, r1, #7
    de10:	b085      	sub	sp, #20
    de12:	f3c1 03c1 	ubfx	r3, r1, #3, #2
    de16:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    de1a:	d00f      	beq.n	de3c <am_hal_gpio_pinconfig+0x40>
    de1c:	f3c1 1642 	ubfx	r6, r1, #5, #3
    de20:	1db5      	adds	r5, r6, #6
    de22:	f005 0507 	and.w	r5, r5, #7
    de26:	2d03      	cmp	r5, #3
    de28:	f042 0201 	orr.w	r2, r2, #1
    de2c:	f240 80ae 	bls.w	df8c <am_hal_gpio_pinconfig+0x190>
    de30:	2fc0      	cmp	r7, #192	; 0xc0
    de32:	f000 80e1 	beq.w	dff8 <am_hal_gpio_pinconfig+0x1fc>
    de36:	2f20      	cmp	r7, #32
    de38:	f000 80e3 	beq.w	e002 <am_hal_gpio_pinconfig+0x206>
    de3c:	b163      	cbz	r3, de58 <am_hal_gpio_pinconfig+0x5c>
    de3e:	2b01      	cmp	r3, #1
    de40:	f000 80d3 	beq.w	dfea <am_hal_gpio_pinconfig+0x1ee>
    de44:	2b02      	cmp	r3, #2
    de46:	f040 80c9 	bne.w	dfdc <am_hal_gpio_pinconfig+0x1e0>
    de4a:	4b79      	ldr	r3, [pc, #484]	; (e030 <am_hal_gpio_pinconfig+0x234>)
    de4c:	5d1b      	ldrb	r3, [r3, r4]
    de4e:	075b      	lsls	r3, r3, #29
    de50:	f140 80c4 	bpl.w	dfdc <am_hal_gpio_pinconfig+0x1e0>
    de54:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    de58:	4b76      	ldr	r3, [pc, #472]	; (e034 <am_hal_gpio_pinconfig+0x238>)
    de5a:	5d1b      	ldrb	r3, [r3, r4]
    de5c:	4103      	asrs	r3, r0
    de5e:	005b      	lsls	r3, r3, #1
    de60:	f003 0302 	and.w	r3, r3, #2
    de64:	4313      	orrs	r3, r2
    de66:	4a74      	ldr	r2, [pc, #464]	; (e038 <am_hal_gpio_pinconfig+0x23c>)
    de68:	5d12      	ldrb	r2, [r2, r4]
    de6a:	4282      	cmp	r2, r0
    de6c:	f000 8099 	beq.w	dfa2 <am_hal_gpio_pinconfig+0x1a6>
    de70:	f3c1 3000 	ubfx	r0, r1, #12, #1
    de74:	f3c1 2581 	ubfx	r5, r1, #10, #2
    de78:	f3c1 3280 	ubfx	r2, r1, #14, #1
    de7c:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    de80:	0a88      	lsrs	r0, r1, #10
    de82:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    de86:	f000 0008 	and.w	r0, r0, #8
    de8a:	4302      	orrs	r2, r0
    de8c:	f3c1 2007 	ubfx	r0, r1, #8, #8
    de90:	f000 050c 	and.w	r5, r0, #12
    de94:	2d04      	cmp	r5, #4
    de96:	f000 80a5 	beq.w	dfe4 <am_hal_gpio_pinconfig+0x1e8>
    de9a:	4d68      	ldr	r5, [pc, #416]	; (e03c <am_hal_gpio_pinconfig+0x240>)
    de9c:	682d      	ldr	r5, [r5, #0]
    de9e:	eba1 0805 	sub.w	r8, r1, r5
    dea2:	fab8 f888 	clz	r8, r8
    dea6:	ea4f 1858 	mov.w	r8, r8, lsr #5
    deaa:	f010 0f60 	tst.w	r0, #96	; 0x60
    deae:	bf04      	itt	eq
    deb0:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
    deb4:	f360 0200 	bfieq	r2, r0, #0, #1
    deb8:	00a0      	lsls	r0, r4, #2
    deba:	f3c1 2101 	ubfx	r1, r1, #8, #2
    debe:	2902      	cmp	r1, #2
    dec0:	d05c      	beq.n	df7c <am_hal_gpio_pinconfig+0x180>
    dec2:	2903      	cmp	r1, #3
    dec4:	d058      	beq.n	df78 <am_hal_gpio_pinconfig+0x17c>
    dec6:	2901      	cmp	r1, #1
    dec8:	ea4f 01c4 	mov.w	r1, r4, lsl #3
    decc:	bf08      	it	eq
    dece:	f043 0304 	orreq.w	r3, r3, #4
    ded2:	f001 0118 	and.w	r1, r1, #24
    ded6:	2700      	movs	r7, #0
    ded8:	f000 001c 	and.w	r0, r0, #28
    dedc:	fa02 f600 	lsl.w	r6, r2, r0
    dee0:	220f      	movs	r2, #15
    dee2:	4082      	lsls	r2, r0
    dee4:	43d2      	mvns	r2, r2
    dee6:	f04f 09ff 	mov.w	r9, #255	; 0xff
    deea:	fa03 f501 	lsl.w	r5, r3, r1
    deee:	fa09 f901 	lsl.w	r9, r9, r1
    def2:	9201      	str	r2, [sp, #4]
    def4:	f000 f8fc 	bl	e0f0 <am_hal_interrupt_master_disable>
    def8:	f024 0a03 	bic.w	sl, r4, #3
    defc:	ea4f 0b54 	mov.w	fp, r4, lsr #1
    df00:	f10a 4c80 	add.w	ip, sl, #1073741824	; 0x40000000
    df04:	4b4e      	ldr	r3, [pc, #312]	; (e040 <am_hal_gpio_pinconfig+0x244>)
    df06:	494f      	ldr	r1, [pc, #316]	; (e044 <am_hal_gpio_pinconfig+0x248>)
    df08:	9a01      	ldr	r2, [sp, #4]
    df0a:	9003      	str	r0, [sp, #12]
    df0c:	ea6f 0909 	mvn.w	r9, r9
    df10:	f02b 0b03 	bic.w	fp, fp, #3
    df14:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
    df18:	f1b8 0f00 	cmp.w	r8, #0
    df1c:	d00b      	beq.n	df36 <am_hal_gpio_pinconfig+0x13a>
    df1e:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
    df22:	f004 081f 	and.w	r8, r4, #31
    df26:	4848      	ldr	r0, [pc, #288]	; (e048 <am_hal_gpio_pinconfig+0x24c>)
    df28:	f00e 0e04 	and.w	lr, lr, #4
    df2c:	2401      	movs	r4, #1
    df2e:	fa04 f408 	lsl.w	r4, r4, r8
    df32:	f84e 4000 	str.w	r4, [lr, r0]
    df36:	4845      	ldr	r0, [pc, #276]	; (e04c <am_hal_gpio_pinconfig+0x250>)
    df38:	2473      	movs	r4, #115	; 0x73
    df3a:	6604      	str	r4, [r0, #96]	; 0x60
    df3c:	f8dc 4000 	ldr.w	r4, [ip]
    df40:	ea04 0409 	and.w	r4, r4, r9
    df44:	4325      	orrs	r5, r4
    df46:	f8cc 5000 	str.w	r5, [ip]
    df4a:	f85b 4003 	ldr.w	r4, [fp, r3]
    df4e:	4022      	ands	r2, r4
    df50:	4332      	orrs	r2, r6
    df52:	f84b 2003 	str.w	r2, [fp, r3]
    df56:	f85a 3001 	ldr.w	r3, [sl, r1]
    df5a:	ea03 0909 	and.w	r9, r3, r9
    df5e:	2400      	movs	r4, #0
    df60:	ea49 0707 	orr.w	r7, r9, r7
    df64:	f84a 7001 	str.w	r7, [sl, r1]
    df68:	6604      	str	r4, [r0, #96]	; 0x60
    df6a:	9803      	ldr	r0, [sp, #12]
    df6c:	f000 f8c4 	bl	e0f8 <am_hal_interrupt_master_set>
    df70:	4620      	mov	r0, r4
    df72:	b005      	add	sp, #20
    df74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df78:	f043 0304 	orr.w	r3, r3, #4
    df7c:	00e1      	lsls	r1, r4, #3
    df7e:	f001 0118 	and.w	r1, r1, #24
    df82:	2701      	movs	r7, #1
    df84:	408f      	lsls	r7, r1
    df86:	e7a7      	b.n	ded8 <am_hal_gpio_pinconfig+0xdc>
    df88:	2006      	movs	r0, #6
    df8a:	4770      	bx	lr
    df8c:	4d28      	ldr	r5, [pc, #160]	; (e030 <am_hal_gpio_pinconfig+0x234>)
    df8e:	5d2d      	ldrb	r5, [r5, r4]
    df90:	3e02      	subs	r6, #2
    df92:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    df96:	07ee      	lsls	r6, r5, #31
    df98:	d536      	bpl.n	e008 <am_hal_gpio_pinconfig+0x20c>
    df9a:	2b00      	cmp	r3, #0
    df9c:	f43f af5c 	beq.w	de58 <am_hal_gpio_pinconfig+0x5c>
    dfa0:	e74d      	b.n	de3e <am_hal_gpio_pinconfig+0x42>
    dfa2:	f3c1 4202 	ubfx	r2, r1, #16, #3
    dfa6:	2a07      	cmp	r2, #7
    dfa8:	d030      	beq.n	e00c <am_hal_gpio_pinconfig+0x210>
    dfaa:	4d29      	ldr	r5, [pc, #164]	; (e050 <am_hal_gpio_pinconfig+0x254>)
    dfac:	f3c1 40c1 	ubfx	r0, r1, #19, #2
    dfb0:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    dfb4:	f815 0024 	ldrb.w	r0, [r5, r4, lsl #2]
    dfb8:	4290      	cmp	r0, r2
    dfba:	d029      	beq.n	e010 <am_hal_gpio_pinconfig+0x214>
    dfbc:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    dfc0:	00a0      	lsls	r0, r4, #2
    dfc2:	786e      	ldrb	r6, [r5, #1]
    dfc4:	4296      	cmp	r6, r2
    dfc6:	d02d      	beq.n	e024 <am_hal_gpio_pinconfig+0x228>
    dfc8:	78ae      	ldrb	r6, [r5, #2]
    dfca:	4296      	cmp	r6, r2
    dfcc:	d02c      	beq.n	e028 <am_hal_gpio_pinconfig+0x22c>
    dfce:	78ed      	ldrb	r5, [r5, #3]
    dfd0:	4295      	cmp	r5, r2
    dfd2:	d02b      	beq.n	e02c <am_hal_gpio_pinconfig+0x230>
    dfd4:	481f      	ldr	r0, [pc, #124]	; (e054 <am_hal_gpio_pinconfig+0x258>)
    dfd6:	b005      	add	sp, #20
    dfd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dfdc:	481e      	ldr	r0, [pc, #120]	; (e058 <am_hal_gpio_pinconfig+0x25c>)
    dfde:	b005      	add	sp, #20
    dfe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dfe4:	f04f 0801 	mov.w	r8, #1
    dfe8:	e75f      	b.n	deaa <am_hal_gpio_pinconfig+0xae>
    dfea:	4b11      	ldr	r3, [pc, #68]	; (e030 <am_hal_gpio_pinconfig+0x234>)
    dfec:	5d1b      	ldrb	r3, [r3, r4]
    dfee:	079d      	lsls	r5, r3, #30
    dff0:	d5f4      	bpl.n	dfdc <am_hal_gpio_pinconfig+0x1e0>
    dff2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    dff6:	e72f      	b.n	de58 <am_hal_gpio_pinconfig+0x5c>
    dff8:	2c14      	cmp	r4, #20
    dffa:	f43f af1f 	beq.w	de3c <am_hal_gpio_pinconfig+0x40>
    dffe:	4817      	ldr	r0, [pc, #92]	; (e05c <am_hal_gpio_pinconfig+0x260>)
    e000:	e7b7      	b.n	df72 <am_hal_gpio_pinconfig+0x176>
    e002:	2c14      	cmp	r4, #20
    e004:	f47f af1a 	bne.w	de3c <am_hal_gpio_pinconfig+0x40>
    e008:	4815      	ldr	r0, [pc, #84]	; (e060 <am_hal_gpio_pinconfig+0x264>)
    e00a:	e7b2      	b.n	df72 <am_hal_gpio_pinconfig+0x176>
    e00c:	4815      	ldr	r0, [pc, #84]	; (e064 <am_hal_gpio_pinconfig+0x268>)
    e00e:	e7b0      	b.n	df72 <am_hal_gpio_pinconfig+0x176>
    e010:	2200      	movs	r2, #0
    e012:	00a0      	lsls	r0, r4, #2
    e014:	0052      	lsls	r2, r2, #1
    e016:	f3c1 5540 	ubfx	r5, r1, #21, #1
    e01a:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
    e01e:	f04f 0800 	mov.w	r8, #0
    e022:	e74a      	b.n	deba <am_hal_gpio_pinconfig+0xbe>
    e024:	2201      	movs	r2, #1
    e026:	e7f5      	b.n	e014 <am_hal_gpio_pinconfig+0x218>
    e028:	2202      	movs	r2, #2
    e02a:	e7f3      	b.n	e014 <am_hal_gpio_pinconfig+0x218>
    e02c:	2203      	movs	r2, #3
    e02e:	e7f1      	b.n	e014 <am_hal_gpio_pinconfig+0x218>
    e030:	0000e95c 	.word	0x0000e95c
    e034:	0000e990 	.word	0x0000e990
    e038:	0000ea8c 	.word	0x0000ea8c
    e03c:	0000e954 	.word	0x0000e954
    e040:	40010040 	.word	0x40010040
    e044:	400100e0 	.word	0x400100e0
    e048:	400100b4 	.word	0x400100b4
    e04c:	40010000 	.word	0x40010000
    e050:	0000e9c4 	.word	0x0000e9c4
    e054:	08000104 	.word	0x08000104
    e058:	08000102 	.word	0x08000102
    e05c:	08000101 	.word	0x08000101
    e060:	08000100 	.word	0x08000100
    e064:	08000103 	.word	0x08000103

0000e068 <am_hal_gpio_state_write>:
    e068:	2831      	cmp	r0, #49	; 0x31
    e06a:	d81a      	bhi.n	e0a2 <am_hal_gpio_state_write+0x3a>
    e06c:	b570      	push	{r4, r5, r6, lr}
    e06e:	2905      	cmp	r1, #5
    e070:	b082      	sub	sp, #8
    e072:	460d      	mov	r5, r1
    e074:	d812      	bhi.n	e09c <am_hal_gpio_state_write+0x34>
    e076:	f000 031f 	and.w	r3, r0, #31
    e07a:	2201      	movs	r2, #1
    e07c:	08c0      	lsrs	r0, r0, #3
    e07e:	fa02 f603 	lsl.w	r6, r2, r3
    e082:	f000 0404 	and.w	r4, r0, #4
    e086:	f000 f833 	bl	e0f0 <am_hal_interrupt_master_disable>
    e08a:	3d01      	subs	r5, #1
    e08c:	9001      	str	r0, [sp, #4]
    e08e:	2d04      	cmp	r5, #4
    e090:	d821      	bhi.n	e0d6 <am_hal_gpio_state_write+0x6e>
    e092:	e8df f005 	tbb	[pc, r5]
    e096:	1512      	.short	0x1512
    e098:	1d1a      	.short	0x1d1a
    e09a:	08          	.byte	0x08
    e09b:	00          	.byte	0x00
    e09c:	2006      	movs	r0, #6
    e09e:	b002      	add	sp, #8
    e0a0:	bd70      	pop	{r4, r5, r6, pc}
    e0a2:	2005      	movs	r0, #5
    e0a4:	4770      	bx	lr
    e0a6:	4a0d      	ldr	r2, [pc, #52]	; (e0dc <am_hal_gpio_state_write+0x74>)
    e0a8:	58a3      	ldr	r3, [r4, r2]
    e0aa:	4073      	eors	r3, r6
    e0ac:	50a3      	str	r3, [r4, r2]
    e0ae:	9801      	ldr	r0, [sp, #4]
    e0b0:	f000 f822 	bl	e0f8 <am_hal_interrupt_master_set>
    e0b4:	2000      	movs	r0, #0
    e0b6:	b002      	add	sp, #8
    e0b8:	bd70      	pop	{r4, r5, r6, pc}
    e0ba:	4b09      	ldr	r3, [pc, #36]	; (e0e0 <am_hal_gpio_state_write+0x78>)
    e0bc:	50e6      	str	r6, [r4, r3]
    e0be:	e7f6      	b.n	e0ae <am_hal_gpio_state_write+0x46>
    e0c0:	4a08      	ldr	r2, [pc, #32]	; (e0e4 <am_hal_gpio_state_write+0x7c>)
    e0c2:	58a3      	ldr	r3, [r4, r2]
    e0c4:	4073      	eors	r3, r6
    e0c6:	50a3      	str	r3, [r4, r2]
    e0c8:	e7f1      	b.n	e0ae <am_hal_gpio_state_write+0x46>
    e0ca:	4b04      	ldr	r3, [pc, #16]	; (e0dc <am_hal_gpio_state_write+0x74>)
    e0cc:	50e6      	str	r6, [r4, r3]
    e0ce:	e7ee      	b.n	e0ae <am_hal_gpio_state_write+0x46>
    e0d0:	4b05      	ldr	r3, [pc, #20]	; (e0e8 <am_hal_gpio_state_write+0x80>)
    e0d2:	50e6      	str	r6, [r4, r3]
    e0d4:	e7eb      	b.n	e0ae <am_hal_gpio_state_write+0x46>
    e0d6:	4b05      	ldr	r3, [pc, #20]	; (e0ec <am_hal_gpio_state_write+0x84>)
    e0d8:	50e6      	str	r6, [r4, r3]
    e0da:	e7e8      	b.n	e0ae <am_hal_gpio_state_write+0x46>
    e0dc:	400100b4 	.word	0x400100b4
    e0e0:	40010090 	.word	0x40010090
    e0e4:	40010088 	.word	0x40010088
    e0e8:	400100a8 	.word	0x400100a8
    e0ec:	40010098 	.word	0x40010098

0000e0f0 <am_hal_interrupt_master_disable>:
    e0f0:	f3ef 8010 	mrs	r0, PRIMASK
    e0f4:	b672      	cpsid	i
    e0f6:	4770      	bx	lr

0000e0f8 <am_hal_interrupt_master_set>:
    e0f8:	f380 8810 	msr	PRIMASK, r0
    e0fc:	4770      	bx	lr
    e0fe:	bf00      	nop

0000e100 <am_hal_itm_enable>:
    e100:	4a0e      	ldr	r2, [pc, #56]	; (e13c <am_hal_itm_enable+0x3c>)
    e102:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e106:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    e10a:	b410      	push	{r4}
    e10c:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    e110:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e114:	01db      	lsls	r3, r3, #7
    e116:	d5fb      	bpl.n	e110 <am_hal_itm_enable+0x10>
    e118:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    e11c:	4c08      	ldr	r4, [pc, #32]	; (e140 <am_hal_itm_enable+0x40>)
    e11e:	4a09      	ldr	r2, [pc, #36]	; (e144 <am_hal_itm_enable+0x44>)
    e120:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    e124:	200f      	movs	r0, #15
    e126:	f04f 31ff 	mov.w	r1, #4294967295
    e12a:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    e12e:	f85d 4b04 	ldr.w	r4, [sp], #4
    e132:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    e136:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    e13a:	4770      	bx	lr
    e13c:	e000ed00 	.word	0xe000ed00
    e140:	c5acce55 	.word	0xc5acce55
    e144:	00150511 	.word	0x00150511

0000e148 <am_hal_itm_disable>:
    e148:	4b27      	ldr	r3, [pc, #156]	; (e1e8 <am_hal_itm_disable+0xa0>)
    e14a:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    e14e:	b510      	push	{r4, lr}
    e150:	b9cb      	cbnz	r3, e186 <am_hal_itm_disable+0x3e>
    e152:	4a26      	ldr	r2, [pc, #152]	; (e1ec <am_hal_itm_disable+0xa4>)
    e154:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e158:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    e15c:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    e160:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e164:	01d9      	lsls	r1, r3, #7
    e166:	d5fb      	bpl.n	e160 <am_hal_itm_disable+0x18>
    e168:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    e16c:	4c20      	ldr	r4, [pc, #128]	; (e1f0 <am_hal_itm_disable+0xa8>)
    e16e:	4a21      	ldr	r2, [pc, #132]	; (e1f4 <am_hal_itm_disable+0xac>)
    e170:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    e174:	200f      	movs	r0, #15
    e176:	f04f 31ff 	mov.w	r1, #4294967295
    e17a:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    e17e:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    e182:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    e186:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    e18a:	f8d4 3e80 	ldr.w	r3, [r4, #3712]	; 0xe80
    e18e:	021b      	lsls	r3, r3, #8
    e190:	d4fb      	bmi.n	e18a <am_hal_itm_disable+0x42>
    e192:	f44f 7048 	mov.w	r0, #800	; 0x320
    e196:	f7ff fde1 	bl	dd5c <am_hal_flash_delay>
    e19a:	4b15      	ldr	r3, [pc, #84]	; (e1f0 <am_hal_itm_disable+0xa8>)
    e19c:	4916      	ldr	r1, [pc, #88]	; (e1f8 <am_hal_itm_disable+0xb0>)
    e19e:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
    e1a2:	2064      	movs	r0, #100	; 0x64
    e1a4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    e1a8:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    e1ac:	f023 0301 	bic.w	r3, r3, #1
    e1b0:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
    e1b4:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    e1b8:	420b      	tst	r3, r1
    e1ba:	d1fb      	bne.n	e1b4 <am_hal_itm_disable+0x6c>
    e1bc:	3801      	subs	r0, #1
    e1be:	d1f3      	bne.n	e1a8 <am_hal_itm_disable+0x60>
    e1c0:	4a0a      	ldr	r2, [pc, #40]	; (e1ec <am_hal_itm_disable+0xa4>)
    e1c2:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e1c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    e1ca:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    e1ce:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e1d2:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    e1d6:	d1fa      	bne.n	e1ce <am_hal_itm_disable+0x86>
    e1d8:	4a03      	ldr	r2, [pc, #12]	; (e1e8 <am_hal_itm_disable+0xa0>)
    e1da:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    e1de:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
    e1e2:	2b00      	cmp	r3, #0
    e1e4:	d1fb      	bne.n	e1de <am_hal_itm_disable+0x96>
    e1e6:	bd10      	pop	{r4, pc}
    e1e8:	40020000 	.word	0x40020000
    e1ec:	e000ed00 	.word	0xe000ed00
    e1f0:	c5acce55 	.word	0xc5acce55
    e1f4:	00150511 	.word	0x00150511
    e1f8:	00800001 	.word	0x00800001

0000e1fc <am_hal_itm_print>:
    e1fc:	7803      	ldrb	r3, [r0, #0]
    e1fe:	b1a3      	cbz	r3, e22a <am_hal_itm_print+0x2e>
    e200:	4603      	mov	r3, r0
    e202:	f1c0 0c01 	rsb	ip, r0, #1
    e206:	eb0c 0103 	add.w	r1, ip, r3
    e20a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    e20e:	2a00      	cmp	r2, #0
    e210:	d1f9      	bne.n	e206 <am_hal_itm_print+0xa>
    e212:	4401      	add	r1, r0
    e214:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    e218:	f810 cb01 	ldrb.w	ip, [r0], #1
    e21c:	6813      	ldr	r3, [r2, #0]
    e21e:	2b00      	cmp	r3, #0
    e220:	d0fc      	beq.n	e21c <am_hal_itm_print+0x20>
    e222:	4288      	cmp	r0, r1
    e224:	f882 c000 	strb.w	ip, [r2]
    e228:	d1f6      	bne.n	e218 <am_hal_itm_print+0x1c>
    e22a:	4770      	bx	lr

0000e22c <am_hal_mcuctrl_info_get>:
    e22c:	2900      	cmp	r1, #0
    e22e:	f000 808f 	beq.w	e350 <am_hal_mcuctrl_info_get+0x124>
    e232:	2801      	cmp	r0, #1
    e234:	b430      	push	{r4, r5}
    e236:	d006      	beq.n	e246 <am_hal_mcuctrl_info_get+0x1a>
    e238:	2802      	cmp	r0, #2
    e23a:	d06d      	beq.n	e318 <am_hal_mcuctrl_info_get+0xec>
    e23c:	2800      	cmp	r0, #0
    e23e:	d055      	beq.n	e2ec <am_hal_mcuctrl_info_get+0xc0>
    e240:	2006      	movs	r0, #6
    e242:	bc30      	pop	{r4, r5}
    e244:	4770      	bx	lr
    e246:	4a43      	ldr	r2, [pc, #268]	; (e354 <am_hal_mcuctrl_info_get+0x128>)
    e248:	4843      	ldr	r0, [pc, #268]	; (e358 <am_hal_mcuctrl_info_get+0x12c>)
    e24a:	6813      	ldr	r3, [r2, #0]
    e24c:	600b      	str	r3, [r1, #0]
    e24e:	6854      	ldr	r4, [r2, #4]
    e250:	604c      	str	r4, [r1, #4]
    e252:	6894      	ldr	r4, [r2, #8]
    e254:	608c      	str	r4, [r1, #8]
    e256:	68d4      	ldr	r4, [r2, #12]
    e258:	60cc      	str	r4, [r1, #12]
    e25a:	f3c3 5503 	ubfx	r5, r3, #20, #4
    e25e:	6914      	ldr	r4, [r2, #16]
    e260:	610c      	str	r4, [r1, #16]
    e262:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    e266:	4c3d      	ldr	r4, [pc, #244]	; (e35c <am_hal_mcuctrl_info_get+0x130>)
    e268:	6950      	ldr	r0, [r2, #20]
    e26a:	6148      	str	r0, [r1, #20]
    e26c:	f003 0201 	and.w	r2, r3, #1
    e270:	f3c3 4303 	ubfx	r3, r3, #16, #4
    e274:	e9c1 2506 	strd	r2, r5, [r1, #24]
    e278:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    e27c:	4a38      	ldr	r2, [pc, #224]	; (e360 <am_hal_mcuctrl_info_get+0x134>)
    e27e:	620b      	str	r3, [r1, #32]
    e280:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    e284:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    e288:	b2db      	uxtb	r3, r3
    e28a:	f000 000f 	and.w	r0, r0, #15
    e28e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    e292:	624b      	str	r3, [r1, #36]	; 0x24
    e294:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    e298:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
    e29c:	f3c3 1303 	ubfx	r3, r3, #4, #4
    e2a0:	f000 000f 	and.w	r0, r0, #15
    e2a4:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
    e2a8:	628b      	str	r3, [r1, #40]	; 0x28
    e2aa:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    e2ae:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
    e2b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    e2b6:	f3c0 1003 	ubfx	r0, r0, #4, #4
    e2ba:	4303      	orrs	r3, r0
    e2bc:	62cb      	str	r3, [r1, #44]	; 0x2c
    e2be:	f8d2 40fc 	ldr.w	r4, [r2, #252]	; 0xfc
    e2c2:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    e2c6:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    e2ca:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    e2ce:	b2db      	uxtb	r3, r3
    e2d0:	041b      	lsls	r3, r3, #16
    e2d2:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    e2d6:	fa5f fc82 	uxtb.w	ip, r2
    e2da:	ea43 030c 	orr.w	r3, r3, ip
    e2de:	b2c2      	uxtb	r2, r0
    e2e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e2e4:	630b      	str	r3, [r1, #48]	; 0x30
    e2e6:	2000      	movs	r0, #0
    e2e8:	bc30      	pop	{r4, r5}
    e2ea:	4770      	bx	lr
    e2ec:	4a19      	ldr	r2, [pc, #100]	; (e354 <am_hal_mcuctrl_info_get+0x128>)
    e2ee:	6993      	ldr	r3, [r2, #24]
    e2f0:	f3c3 1480 	ubfx	r4, r3, #6, #1
    e2f4:	700c      	strb	r4, [r1, #0]
    e2f6:	f8d2 41a0 	ldr.w	r4, [r2, #416]	; 0x1a0
    e2fa:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e2fe:	704b      	strb	r3, [r1, #1]
    e300:	f3c4 6381 	ubfx	r3, r4, #26, #2
    e304:	710b      	strb	r3, [r1, #4]
    e306:	6953      	ldr	r3, [r2, #20]
    e308:	f3c3 0240 	ubfx	r2, r3, #1, #1
    e30c:	f003 0301 	and.w	r3, r3, #1
    e310:	bc30      	pop	{r4, r5}
    e312:	708a      	strb	r2, [r1, #2]
    e314:	70cb      	strb	r3, [r1, #3]
    e316:	4770      	bx	lr
    e318:	4a0e      	ldr	r2, [pc, #56]	; (e354 <am_hal_mcuctrl_info_get+0x128>)
    e31a:	6848      	ldr	r0, [r1, #4]
    e31c:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    e320:	f003 0401 	and.w	r4, r3, #1
    e324:	700c      	strb	r4, [r1, #0]
    e326:	f3c3 0440 	ubfx	r4, r3, #1, #1
    e32a:	720c      	strb	r4, [r1, #8]
    e32c:	f8d2 41c4 	ldr.w	r4, [r2, #452]	; 0x1c4
    e330:	60cc      	str	r4, [r1, #12]
    e332:	f8d2 41c0 	ldr.w	r4, [r2, #448]	; 0x1c0
    e336:	4320      	orrs	r0, r4
    e338:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e33c:	6048      	str	r0, [r1, #4]
    e33e:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    e342:	740b      	strb	r3, [r1, #16]
    e344:	694b      	ldr	r3, [r1, #20]
    e346:	4313      	orrs	r3, r2
    e348:	2000      	movs	r0, #0
    e34a:	bc30      	pop	{r4, r5}
    e34c:	614b      	str	r3, [r1, #20]
    e34e:	4770      	bx	lr
    e350:	2006      	movs	r0, #6
    e352:	4770      	bx	lr
    e354:	40020000 	.word	0x40020000
    e358:	0000eac0 	.word	0x0000eac0
    e35c:	0000eb00 	.word	0x0000eb00
    e360:	f0000f00 	.word	0xf0000f00

0000e364 <am_hal_pwrctrl_periph_enable>:
    e364:	b570      	push	{r4, r5, r6, lr}
    e366:	b082      	sub	sp, #8
    e368:	4604      	mov	r4, r0
    e36a:	f7ff fec1 	bl	e0f0 <am_hal_interrupt_master_disable>
    e36e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e372:	4e0f      	ldr	r6, [pc, #60]	; (e3b0 <am_hal_pwrctrl_periph_enable+0x4c>)
    e374:	4d0f      	ldr	r5, [pc, #60]	; (e3b4 <am_hal_pwrctrl_periph_enable+0x50>)
    e376:	9001      	str	r0, [sp, #4]
    e378:	00a4      	lsls	r4, r4, #2
    e37a:	68b3      	ldr	r3, [r6, #8]
    e37c:	592a      	ldr	r2, [r5, r4]
    e37e:	4313      	orrs	r3, r2
    e380:	60b3      	str	r3, [r6, #8]
    e382:	9801      	ldr	r0, [sp, #4]
    e384:	442c      	add	r4, r5
    e386:	f7ff feb7 	bl	e0f8 <am_hal_interrupt_master_set>
    e38a:	20a0      	movs	r0, #160	; 0xa0
    e38c:	f7ff fce6 	bl	dd5c <am_hal_flash_delay>
    e390:	69b3      	ldr	r3, [r6, #24]
    e392:	6864      	ldr	r4, [r4, #4]
    e394:	4223      	tst	r3, r4
    e396:	d103      	bne.n	e3a0 <am_hal_pwrctrl_periph_enable+0x3c>
    e398:	20a0      	movs	r0, #160	; 0xa0
    e39a:	f7ff fcdf 	bl	dd5c <am_hal_flash_delay>
    e39e:	69b3      	ldr	r3, [r6, #24]
    e3a0:	4b03      	ldr	r3, [pc, #12]	; (e3b0 <am_hal_pwrctrl_periph_enable+0x4c>)
    e3a2:	699b      	ldr	r3, [r3, #24]
    e3a4:	4223      	tst	r3, r4
    e3a6:	bf0c      	ite	eq
    e3a8:	2001      	moveq	r0, #1
    e3aa:	2000      	movne	r0, #0
    e3ac:	b002      	add	sp, #8
    e3ae:	bd70      	pop	{r4, r5, r6, pc}
    e3b0:	40021000 	.word	0x40021000
    e3b4:	0000eb40 	.word	0x0000eb40

0000e3b8 <am_hal_pwrctrl_periph_disable>:
    e3b8:	b570      	push	{r4, r5, r6, lr}
    e3ba:	b082      	sub	sp, #8
    e3bc:	4604      	mov	r4, r0
    e3be:	f7ff fe97 	bl	e0f0 <am_hal_interrupt_master_disable>
    e3c2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e3c6:	4e10      	ldr	r6, [pc, #64]	; (e408 <am_hal_pwrctrl_periph_disable+0x50>)
    e3c8:	4d10      	ldr	r5, [pc, #64]	; (e40c <am_hal_pwrctrl_periph_disable+0x54>)
    e3ca:	9001      	str	r0, [sp, #4]
    e3cc:	00a4      	lsls	r4, r4, #2
    e3ce:	68b3      	ldr	r3, [r6, #8]
    e3d0:	592a      	ldr	r2, [r5, r4]
    e3d2:	ea23 0302 	bic.w	r3, r3, r2
    e3d6:	60b3      	str	r3, [r6, #8]
    e3d8:	9801      	ldr	r0, [sp, #4]
    e3da:	442c      	add	r4, r5
    e3dc:	f7ff fe8c 	bl	e0f8 <am_hal_interrupt_master_set>
    e3e0:	20a0      	movs	r0, #160	; 0xa0
    e3e2:	f7ff fcbb 	bl	dd5c <am_hal_flash_delay>
    e3e6:	69b3      	ldr	r3, [r6, #24]
    e3e8:	6864      	ldr	r4, [r4, #4]
    e3ea:	4223      	tst	r3, r4
    e3ec:	d003      	beq.n	e3f6 <am_hal_pwrctrl_periph_disable+0x3e>
    e3ee:	20a0      	movs	r0, #160	; 0xa0
    e3f0:	f7ff fcb4 	bl	dd5c <am_hal_flash_delay>
    e3f4:	69b3      	ldr	r3, [r6, #24]
    e3f6:	4b04      	ldr	r3, [pc, #16]	; (e408 <am_hal_pwrctrl_periph_disable+0x50>)
    e3f8:	699b      	ldr	r3, [r3, #24]
    e3fa:	4223      	tst	r3, r4
    e3fc:	bf14      	ite	ne
    e3fe:	2001      	movne	r0, #1
    e400:	2000      	moveq	r0, #0
    e402:	b002      	add	sp, #8
    e404:	bd70      	pop	{r4, r5, r6, pc}
    e406:	bf00      	nop
    e408:	40021000 	.word	0x40021000
    e40c:	0000eb40 	.word	0x0000eb40

0000e410 <am_hal_pwrctrl_low_power_init>:
    e410:	b530      	push	{r4, r5, lr}
    e412:	4b69      	ldr	r3, [pc, #420]	; (e5b8 <am_hal_pwrctrl_low_power_init+0x1a8>)
    e414:	681a      	ldr	r2, [r3, #0]
    e416:	b085      	sub	sp, #20
    e418:	b912      	cbnz	r2, e420 <am_hal_pwrctrl_low_power_init+0x10>
    e41a:	4a68      	ldr	r2, [pc, #416]	; (e5bc <am_hal_pwrctrl_low_power_init+0x1ac>)
    e41c:	6812      	ldr	r2, [r2, #0]
    e41e:	601a      	str	r2, [r3, #0]
    e420:	4b67      	ldr	r3, [pc, #412]	; (e5c0 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e422:	68db      	ldr	r3, [r3, #12]
    e424:	b2db      	uxtb	r3, r3
    e426:	2b12      	cmp	r3, #18
    e428:	d104      	bne.n	e434 <am_hal_pwrctrl_low_power_init+0x24>
    e42a:	4c66      	ldr	r4, [pc, #408]	; (e5c4 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e42c:	6863      	ldr	r3, [r4, #4]
    e42e:	07d8      	lsls	r0, r3, #31
    e430:	f100 8088 	bmi.w	e544 <am_hal_pwrctrl_low_power_init+0x134>
    e434:	4b62      	ldr	r3, [pc, #392]	; (e5c0 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e436:	68da      	ldr	r2, [r3, #12]
    e438:	b2d2      	uxtb	r2, r2
    e43a:	2a20      	cmp	r2, #32
    e43c:	d934      	bls.n	e4a8 <am_hal_pwrctrl_low_power_init+0x98>
    e43e:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
    e442:	2002      	movs	r0, #2
    e444:	f360 4213 	bfi	r2, r0, #16, #4
    e448:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    e44c:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
    e450:	2203      	movs	r2, #3
    e452:	f362 5117 	bfi	r1, r2, #20, #4
    e456:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
    e45a:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e45e:	2405      	movs	r4, #5
    e460:	f364 0103 	bfi	r1, r4, #0, #4
    e464:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e468:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e46c:	f360 1107 	bfi	r1, r0, #4, #4
    e470:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e474:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e478:	2406      	movs	r4, #6
    e47a:	f364 210b 	bfi	r1, r4, #8, #4
    e47e:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e482:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e486:	2001      	movs	r0, #1
    e488:	f360 310f 	bfi	r1, r0, #12, #4
    e48c:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e490:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e494:	f362 61de 	bfi	r1, r2, #27, #4
    e498:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e49c:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
    e4a0:	f362 0103 	bfi	r1, r2, #0, #4
    e4a4:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
    e4a8:	4a45      	ldr	r2, [pc, #276]	; (e5c0 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e4aa:	68d3      	ldr	r3, [r2, #12]
    e4ac:	b2db      	uxtb	r3, r3
    e4ae:	2b11      	cmp	r3, #17
    e4b0:	d905      	bls.n	e4be <am_hal_pwrctrl_low_power_init+0xae>
    e4b2:	f8d2 335c 	ldr.w	r3, [r2, #860]	; 0x35c
    e4b6:	f36f 6318 	bfc	r3, #24, #1
    e4ba:	f8c2 335c 	str.w	r3, [r2, #860]	; 0x35c
    e4be:	2100      	movs	r1, #0
    e4c0:	200c      	movs	r0, #12
    e4c2:	f7fe ff53 	bl	d36c <am_hal_cachectrl_control>
    e4c6:	4b3f      	ldr	r3, [pc, #252]	; (e5c4 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e4c8:	699b      	ldr	r3, [r3, #24]
    e4ca:	f3c3 2500 	ubfx	r5, r3, #8, #1
    e4ce:	05db      	lsls	r3, r3, #23
    e4d0:	d420      	bmi.n	e514 <am_hal_pwrctrl_low_power_init+0x104>
    e4d2:	4c3b      	ldr	r4, [pc, #236]	; (e5c0 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e4d4:	68e3      	ldr	r3, [r4, #12]
    e4d6:	b2db      	uxtb	r3, r3
    e4d8:	2b11      	cmp	r3, #17
    e4da:	d84e      	bhi.n	e57a <am_hal_pwrctrl_low_power_init+0x16a>
    e4dc:	4c38      	ldr	r4, [pc, #224]	; (e5c0 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e4de:	493a      	ldr	r1, [pc, #232]	; (e5c8 <am_hal_pwrctrl_low_power_init+0x1b8>)
    e4e0:	7e22      	ldrb	r2, [r4, #24]
    e4e2:	2001      	movs	r0, #1
    e4e4:	4302      	orrs	r2, r0
    e4e6:	2307      	movs	r3, #7
    e4e8:	7622      	strb	r2, [r4, #24]
    e4ea:	9000      	str	r0, [sp, #0]
    e4ec:	461a      	mov	r2, r3
    e4ee:	f242 7010 	movw	r0, #10000	; 0x2710
    e4f2:	f7ff fc43 	bl	dd7c <am_hal_flash_delay_status_check>
    e4f6:	2800      	cmp	r0, #0
    e4f8:	d15a      	bne.n	e5b0 <am_hal_pwrctrl_low_power_init+0x1a0>
    e4fa:	4b32      	ldr	r3, [pc, #200]	; (e5c4 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e4fc:	681a      	ldr	r2, [r3, #0]
    e4fe:	f042 0201 	orr.w	r2, r2, #1
    e502:	601a      	str	r2, [r3, #0]
    e504:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    e506:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    e50a:	625a      	str	r2, [r3, #36]	; 0x24
    e50c:	68e3      	ldr	r3, [r4, #12]
    e50e:	b2db      	uxtb	r3, r3
    e510:	2b11      	cmp	r3, #17
    e512:	d002      	beq.n	e51a <am_hal_pwrctrl_low_power_init+0x10a>
    e514:	2000      	movs	r0, #0
    e516:	b005      	add	sp, #20
    e518:	bd30      	pop	{r4, r5, pc}
    e51a:	f8d4 335c 	ldr.w	r3, [r4, #860]	; 0x35c
    e51e:	f360 5356 	bfi	r3, r0, #21, #2
    e522:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
    e526:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e52a:	220f      	movs	r2, #15
    e52c:	f362 138b 	bfi	r3, r2, #6, #6
    e530:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e534:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e538:	f362 0305 	bfi	r3, r2, #0, #6
    e53c:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e540:	b005      	add	sp, #20
    e542:	bd30      	pop	{r4, r5, pc}
    e544:	f7ff fdd4 	bl	e0f0 <am_hal_interrupt_master_disable>
    e548:	9002      	str	r0, [sp, #8]
    e54a:	68a3      	ldr	r3, [r4, #8]
    e54c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    e550:	60a3      	str	r3, [r4, #8]
    e552:	9802      	ldr	r0, [sp, #8]
    e554:	f7ff fdd0 	bl	e0f8 <am_hal_interrupt_master_set>
    e558:	20a0      	movs	r0, #160	; 0xa0
    e55a:	f7ff fbff 	bl	dd5c <am_hal_flash_delay>
    e55e:	69a3      	ldr	r3, [r4, #24]
    e560:	0619      	lsls	r1, r3, #24
    e562:	d403      	bmi.n	e56c <am_hal_pwrctrl_low_power_init+0x15c>
    e564:	20a0      	movs	r0, #160	; 0xa0
    e566:	f7ff fbf9 	bl	dd5c <am_hal_flash_delay>
    e56a:	69a3      	ldr	r3, [r4, #24]
    e56c:	4b15      	ldr	r3, [pc, #84]	; (e5c4 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e56e:	699b      	ldr	r3, [r3, #24]
    e570:	061a      	lsls	r2, r3, #24
    e572:	f53f af5f 	bmi.w	e434 <am_hal_pwrctrl_low_power_init+0x24>
    e576:	2001      	movs	r0, #1
    e578:	e7cd      	b.n	e516 <am_hal_pwrctrl_low_power_init+0x106>
    e57a:	f7ff fdb9 	bl	e0f0 <am_hal_interrupt_master_disable>
    e57e:	9003      	str	r0, [sp, #12]
    e580:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e584:	2219      	movs	r2, #25
    e586:	f362 138b 	bfi	r3, r2, #6, #6
    e58a:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e58e:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
    e592:	210c      	movs	r1, #12
    e594:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e598:	f361 0205 	bfi	r2, r1, #0, #6
    e59c:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
    e5a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    e5a2:	f365 5296 	bfi	r2, r5, #22, #1
    e5a6:	63da      	str	r2, [r3, #60]	; 0x3c
    e5a8:	9803      	ldr	r0, [sp, #12]
    e5aa:	f7ff fda5 	bl	e0f8 <am_hal_interrupt_master_set>
    e5ae:	e795      	b.n	e4dc <am_hal_pwrctrl_low_power_init+0xcc>
    e5b0:	2004      	movs	r0, #4
    e5b2:	b005      	add	sp, #20
    e5b4:	bd30      	pop	{r4, r5, pc}
    e5b6:	bf00      	nop
    e5b8:	10001154 	.word	0x10001154
    e5bc:	4ffff000 	.word	0x4ffff000
    e5c0:	40020000 	.word	0x40020000
    e5c4:	40021000 	.word	0x40021000
    e5c8:	40020018 	.word	0x40020018

0000e5cc <am_hal_rtc_osc_disable>:
    e5cc:	4a03      	ldr	r2, [pc, #12]	; (e5dc <am_hal_rtc_osc_disable+0x10>)
    e5ce:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    e5d2:	f043 0310 	orr.w	r3, r3, #16
    e5d6:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    e5da:	4770      	bx	lr
    e5dc:	40004200 	.word	0x40004200

0000e5e0 <am_hal_sysctrl_sleep>:
    e5e0:	b510      	push	{r4, lr}
    e5e2:	b082      	sub	sp, #8
    e5e4:	4604      	mov	r4, r0
    e5e6:	f7ff fd83 	bl	e0f0 <am_hal_interrupt_master_disable>
    e5ea:	9001      	str	r0, [sp, #4]
    e5ec:	b124      	cbz	r4, e5f8 <am_hal_sysctrl_sleep+0x18>
    e5ee:	4b12      	ldr	r3, [pc, #72]	; (e638 <am_hal_sysctrl_sleep+0x58>)
    e5f0:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    e5f4:	07db      	lsls	r3, r3, #31
    e5f6:	d513      	bpl.n	e620 <am_hal_sysctrl_sleep+0x40>
    e5f8:	4a10      	ldr	r2, [pc, #64]	; (e63c <am_hal_sysctrl_sleep+0x5c>)
    e5fa:	6913      	ldr	r3, [r2, #16]
    e5fc:	f023 0304 	bic.w	r3, r3, #4
    e600:	6113      	str	r3, [r2, #16]
    e602:	f3bf 8f4f 	dsb	sy
    e606:	4a0e      	ldr	r2, [pc, #56]	; (e640 <am_hal_sysctrl_sleep+0x60>)
    e608:	4b0e      	ldr	r3, [pc, #56]	; (e644 <am_hal_sysctrl_sleep+0x64>)
    e60a:	6812      	ldr	r2, [r2, #0]
    e60c:	601a      	str	r2, [r3, #0]
    e60e:	bf30      	wfi
    e610:	f3bf 8f6f 	isb	sy
    e614:	9801      	ldr	r0, [sp, #4]
    e616:	b002      	add	sp, #8
    e618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e61c:	f7ff bd6c 	b.w	e0f8 <am_hal_interrupt_master_set>
    e620:	4b09      	ldr	r3, [pc, #36]	; (e648 <am_hal_sysctrl_sleep+0x68>)
    e622:	681a      	ldr	r2, [r3, #0]
    e624:	b912      	cbnz	r2, e62c <am_hal_sysctrl_sleep+0x4c>
    e626:	4a09      	ldr	r2, [pc, #36]	; (e64c <am_hal_sysctrl_sleep+0x6c>)
    e628:	6812      	ldr	r2, [r2, #0]
    e62a:	601a      	str	r2, [r3, #0]
    e62c:	4a03      	ldr	r2, [pc, #12]	; (e63c <am_hal_sysctrl_sleep+0x5c>)
    e62e:	6913      	ldr	r3, [r2, #16]
    e630:	f043 0304 	orr.w	r3, r3, #4
    e634:	6113      	str	r3, [r2, #16]
    e636:	e7e4      	b.n	e602 <am_hal_sysctrl_sleep+0x22>
    e638:	40020000 	.word	0x40020000
    e63c:	e000ed00 	.word	0xe000ed00
    e640:	5fff0000 	.word	0x5fff0000
    e644:	10001158 	.word	0x10001158
    e648:	10001154 	.word	0x10001154
    e64c:	4ffff000 	.word	0x4ffff000

0000e650 <am_hal_tpiu_enable>:
    e650:	b510      	push	{r4, lr}
    e652:	4b23      	ldr	r3, [pc, #140]	; (e6e0 <am_hal_tpiu_enable+0x90>)
    e654:	6804      	ldr	r4, [r0, #0]
    e656:	2200      	movs	r2, #0
    e658:	b084      	sub	sp, #16
    e65a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    e65e:	b334      	cbz	r4, e6ae <am_hal_tpiu_enable+0x5e>
    e660:	4a20      	ldr	r2, [pc, #128]	; (e6e4 <am_hal_tpiu_enable+0x94>)
    e662:	4921      	ldr	r1, [pc, #132]	; (e6e8 <am_hal_tpiu_enable+0x98>)
    e664:	2001      	movs	r0, #1
    e666:	6058      	str	r0, [r3, #4]
    e668:	f5a4 4361 	sub.w	r3, r4, #57600	; 0xe100
    e66c:	a801      	add	r0, sp, #4
    e66e:	428b      	cmp	r3, r1
    e670:	bf88      	it	hi
    e672:	4614      	movhi	r4, r2
    e674:	f7ff f890 	bl	d798 <am_hal_clkgen_status_get>
    e678:	9b01      	ldr	r3, [sp, #4]
    e67a:	1c5a      	adds	r2, r3, #1
    e67c:	d02d      	beq.n	e6da <am_hal_tpiu_enable+0x8a>
    e67e:	08db      	lsrs	r3, r3, #3
    e680:	fbb3 f4f4 	udiv	r4, r3, r4
    e684:	3c01      	subs	r4, #1
    e686:	b2a4      	uxth	r4, r4
    e688:	4b15      	ldr	r3, [pc, #84]	; (e6e0 <am_hal_tpiu_enable+0x90>)
    e68a:	4a18      	ldr	r2, [pc, #96]	; (e6ec <am_hal_tpiu_enable+0x9c>)
    e68c:	611c      	str	r4, [r3, #16]
    e68e:	2102      	movs	r1, #2
    e690:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
    e694:	2000      	movs	r0, #0
    e696:	f240 2101 	movw	r1, #513	; 0x201
    e69a:	f8c3 0f00 	str.w	r0, [r3, #3840]	; 0xf00
    e69e:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
    e6a2:	f44f 7048 	mov.w	r0, #800	; 0x320
    e6a6:	f7ff fb59 	bl	dd5c <am_hal_flash_delay>
    e6aa:	b004      	add	sp, #16
    e6ac:	bd10      	pop	{r4, pc}
    e6ae:	6902      	ldr	r2, [r0, #16]
    e6b0:	611a      	str	r2, [r3, #16]
    e6b2:	6882      	ldr	r2, [r0, #8]
    e6b4:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    e6b8:	68c1      	ldr	r1, [r0, #12]
    e6ba:	2201      	movs	r2, #1
    e6bc:	3901      	subs	r1, #1
    e6be:	408a      	lsls	r2, r1
    e6c0:	605a      	str	r2, [r3, #4]
    e6c2:	f8c3 4f00 	str.w	r4, [r3, #3840]	; 0xf00
    e6c6:	4a09      	ldr	r2, [pc, #36]	; (e6ec <am_hal_tpiu_enable+0x9c>)
    e6c8:	6843      	ldr	r3, [r0, #4]
    e6ca:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    e6ce:	f44f 7048 	mov.w	r0, #800	; 0x320
    e6d2:	f7ff fb43 	bl	dd5c <am_hal_flash_delay>
    e6d6:	b004      	add	sp, #16
    e6d8:	bd10      	pop	{r4, pc}
    e6da:	2405      	movs	r4, #5
    e6dc:	e7d4      	b.n	e688 <am_hal_tpiu_enable+0x38>
    e6de:	bf00      	nop
    e6e0:	e0040000 	.word	0xe0040000
    e6e4:	000f4240 	.word	0x000f4240
    e6e8:	001da380 	.word	0x001da380
    e6ec:	40020000 	.word	0x40020000

0000e6f0 <am_hal_uart_deinitialize>:
    e6f0:	b170      	cbz	r0, e710 <am_hal_uart_deinitialize+0x20>
    e6f2:	6803      	ldr	r3, [r0, #0]
    e6f4:	4a07      	ldr	r2, [pc, #28]	; (e714 <am_hal_uart_deinitialize+0x24>)
    e6f6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e6fa:	4293      	cmp	r3, r2
    e6fc:	d108      	bne.n	e710 <am_hal_uart_deinitialize+0x20>
    e6fe:	78c2      	ldrb	r2, [r0, #3]
    e700:	2300      	movs	r3, #0
    e702:	f36f 0200 	bfc	r2, #0, #1
    e706:	70c2      	strb	r2, [r0, #3]
    e708:	6243      	str	r3, [r0, #36]	; 0x24
    e70a:	7103      	strb	r3, [r0, #4]
    e70c:	4618      	mov	r0, r3
    e70e:	4770      	bx	lr
    e710:	2002      	movs	r0, #2
    e712:	4770      	bx	lr
    e714:	01ea9e06 	.word	0x01ea9e06

0000e718 <am_hal_uart_power_control>:
    e718:	b5f0      	push	{r4, r5, r6, r7, lr}
    e71a:	4604      	mov	r4, r0
    e71c:	6800      	ldr	r0, [r0, #0]
    e71e:	4b39      	ldr	r3, [pc, #228]	; (e804 <am_hal_uart_power_control+0xec>)
    e720:	f020 467e 	bic.w	r6, r0, #4261412864	; 0xfe000000
    e724:	429e      	cmp	r6, r3
    e726:	b085      	sub	sp, #20
    e728:	d13f      	bne.n	e7aa <am_hal_uart_power_control+0x92>
    e72a:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e72c:	f105 0008 	add.w	r0, r5, #8
    e730:	b2c7      	uxtb	r7, r0
    e732:	b189      	cbz	r1, e758 <am_hal_uart_power_control+0x40>
    e734:	3901      	subs	r1, #1
    e736:	2901      	cmp	r1, #1
    e738:	d834      	bhi.n	e7a4 <am_hal_uart_power_control+0x8c>
    e73a:	2a00      	cmp	r2, #0
    e73c:	d138      	bne.n	e7b0 <am_hal_uart_power_control+0x98>
    e73e:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e742:	351c      	adds	r5, #28
    e744:	032d      	lsls	r5, r5, #12
    e746:	f04f 33ff 	mov.w	r3, #4294967295
    e74a:	646b      	str	r3, [r5, #68]	; 0x44
    e74c:	4638      	mov	r0, r7
    e74e:	f7ff fe33 	bl	e3b8 <am_hal_pwrctrl_periph_disable>
    e752:	2000      	movs	r0, #0
    e754:	b005      	add	sp, #20
    e756:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e758:	2a00      	cmp	r2, #0
    e75a:	d04a      	beq.n	e7f2 <am_hal_uart_power_control+0xda>
    e75c:	7923      	ldrb	r3, [r4, #4]
    e75e:	2b00      	cmp	r3, #0
    e760:	d04e      	beq.n	e800 <am_hal_uart_power_control+0xe8>
    e762:	4638      	mov	r0, r7
    e764:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e768:	9101      	str	r1, [sp, #4]
    e76a:	351c      	adds	r5, #28
    e76c:	f7ff fdfa 	bl	e364 <am_hal_pwrctrl_periph_enable>
    e770:	f7ff fcbe 	bl	e0f0 <am_hal_interrupt_master_disable>
    e774:	032d      	lsls	r5, r5, #12
    e776:	68a3      	ldr	r3, [r4, #8]
    e778:	9002      	str	r0, [sp, #8]
    e77a:	622b      	str	r3, [r5, #32]
    e77c:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    e780:	626a      	str	r2, [r5, #36]	; 0x24
    e782:	62ab      	str	r3, [r5, #40]	; 0x28
    e784:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
    e788:	62ea      	str	r2, [r5, #44]	; 0x2c
    e78a:	632b      	str	r3, [r5, #48]	; 0x30
    e78c:	e9d4 2307 	ldrd	r2, r3, [r4, #28]
    e790:	9901      	ldr	r1, [sp, #4]
    e792:	636a      	str	r2, [r5, #52]	; 0x34
    e794:	63ab      	str	r3, [r5, #56]	; 0x38
    e796:	9802      	ldr	r0, [sp, #8]
    e798:	7121      	strb	r1, [r4, #4]
    e79a:	f7ff fcad 	bl	e0f8 <am_hal_interrupt_master_set>
    e79e:	9901      	ldr	r1, [sp, #4]
    e7a0:	4608      	mov	r0, r1
    e7a2:	e000      	b.n	e7a6 <am_hal_uart_power_control+0x8e>
    e7a4:	2006      	movs	r0, #6
    e7a6:	b005      	add	sp, #20
    e7a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e7aa:	2002      	movs	r0, #2
    e7ac:	b005      	add	sp, #20
    e7ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e7b0:	f7ff fc9e 	bl	e0f0 <am_hal_interrupt_master_disable>
    e7b4:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e7b8:	351c      	adds	r5, #28
    e7ba:	032d      	lsls	r5, r5, #12
    e7bc:	9003      	str	r0, [sp, #12]
    e7be:	6a2b      	ldr	r3, [r5, #32]
    e7c0:	60a3      	str	r3, [r4, #8]
    e7c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e7c4:	60e3      	str	r3, [r4, #12]
    e7c6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e7c8:	6123      	str	r3, [r4, #16]
    e7ca:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    e7cc:	6163      	str	r3, [r4, #20]
    e7ce:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    e7d0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    e7d2:	61a3      	str	r3, [r4, #24]
    e7d4:	6bab      	ldr	r3, [r5, #56]	; 0x38
    e7d6:	61e2      	str	r2, [r4, #28]
    e7d8:	2201      	movs	r2, #1
    e7da:	6223      	str	r3, [r4, #32]
    e7dc:	9803      	ldr	r0, [sp, #12]
    e7de:	7122      	strb	r2, [r4, #4]
    e7e0:	f7ff fc8a 	bl	e0f8 <am_hal_interrupt_master_set>
    e7e4:	6823      	ldr	r3, [r4, #0]
    e7e6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e7ea:	42b3      	cmp	r3, r6
    e7ec:	d1ae      	bne.n	e74c <am_hal_uart_power_control+0x34>
    e7ee:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e7f0:	e7a5      	b.n	e73e <am_hal_uart_power_control+0x26>
    e7f2:	4638      	mov	r0, r7
    e7f4:	9201      	str	r2, [sp, #4]
    e7f6:	f7ff fdb5 	bl	e364 <am_hal_pwrctrl_periph_enable>
    e7fa:	9a01      	ldr	r2, [sp, #4]
    e7fc:	4610      	mov	r0, r2
    e7fe:	e7d2      	b.n	e7a6 <am_hal_uart_power_control+0x8e>
    e800:	2007      	movs	r0, #7
    e802:	e7d0      	b.n	e7a6 <am_hal_uart_power_control+0x8e>
    e804:	01ea9e06 	.word	0x01ea9e06

0000e808 <am_hal_uart_tx_flush>:
    e808:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    e80c:	b570      	push	{r4, r5, r6, lr}
    e80e:	6a45      	ldr	r5, [r0, #36]	; 0x24
    e810:	4604      	mov	r4, r0
    e812:	b15b      	cbz	r3, e82c <am_hal_uart_tx_flush+0x24>
    e814:	6b43      	ldr	r3, [r0, #52]	; 0x34
    e816:	b14b      	cbz	r3, e82c <am_hal_uart_tx_flush+0x24>
    e818:	4e0e      	ldr	r6, [pc, #56]	; (e854 <am_hal_uart_tx_flush+0x4c>)
    e81a:	6e20      	ldr	r0, [r4, #96]	; 0x60
    e81c:	fbb6 f0f0 	udiv	r0, r6, r0
    e820:	0100      	lsls	r0, r0, #4
    e822:	f7ff fa9b 	bl	dd5c <am_hal_flash_delay>
    e826:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e828:	2b00      	cmp	r3, #0
    e82a:	d1f6      	bne.n	e81a <am_hal_uart_tx_flush+0x12>
    e82c:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e830:	351c      	adds	r5, #28
    e832:	032d      	lsls	r5, r5, #12
    e834:	69ab      	ldr	r3, [r5, #24]
    e836:	071a      	lsls	r2, r3, #28
    e838:	d509      	bpl.n	e84e <am_hal_uart_tx_flush+0x46>
    e83a:	4e06      	ldr	r6, [pc, #24]	; (e854 <am_hal_uart_tx_flush+0x4c>)
    e83c:	6e23      	ldr	r3, [r4, #96]	; 0x60
    e83e:	fbb6 f3f3 	udiv	r3, r6, r3
    e842:	0118      	lsls	r0, r3, #4
    e844:	f7ff fa8a 	bl	dd5c <am_hal_flash_delay>
    e848:	69ab      	ldr	r3, [r5, #24]
    e84a:	071b      	lsls	r3, r3, #28
    e84c:	d4f6      	bmi.n	e83c <am_hal_uart_tx_flush+0x34>
    e84e:	2000      	movs	r0, #0
    e850:	bd70      	pop	{r4, r5, r6, pc}
    e852:	bf00      	nop
    e854:	00b71b00 	.word	0x00b71b00
    e858:	6d695443 	.word	0x6d695443
    e85c:	36207265 	.word	0x36207265
    e860:	69622034 	.word	0x69622034
    e864:	70207374 	.word	0x70207374
    e868:	65747461 	.word	0x65747461
    e86c:	65206e72 	.word	0x65206e72
    e870:	706d6178 	.word	0x706d6178
    e874:	000a656c 	.word	0x000a656c
    e878:	0a0a0a0a 	.word	0x0a0a0a0a
    e87c:	0a0a0a0a 	.word	0x0a0a0a0a
    e880:	0a0a0a0a 	.word	0x0a0a0a0a
    e884:	0a0a0a0a 	.word	0x0a0a0a0a
    e888:	00000a0a 	.word	0x00000a0a

0000e88c <g_AM_BSP_GPIO_ITM_SWO>:
    e88c:	00000002                                ....

0000e890 <am_hal_cachectrl_defaults>:
    e890:	00000308                                ....

0000e894 <CTx_tbl>:
    e894:	0219020c 021a020d 021b0212 021c0213     ................
    e8a4:	021d0705 021e0506 021f0216 02200217     .............. .
    e8b4:	0604022a 0707022b 0518022c 0621022d     *...+...,...-.!.
    e8c4:	0227022e 0523022f 07250230 020b0231     ..'./.#.0.%.1...

0000e8d4 <outcfg_tbl>:
    e8d4:	06151a00 1f050010 071e1908 06010818     ................
    e8e4:	0d151201 070e0111 0f1d0109 070d0919     ................
    e8f4:	0e141302 08040212 061c1b0a 1d0c0a1a     ................
    e904:	1e180903 1c060313 071f090b 14070b1b     ................
    e914:	1b100004 11040f14 1300080c 190c021c     ................
    e924:	1a110105 100d0115 1201060d 1805071d     ................
    e934:	19010206 12060a1c 11050a0e 1a0e011e     ................
    e944:	18150307 1307011d 10140b0f 1b0f061f     ................

0000e954 <g_AM_HAL_GPIO_DISABLE>:
    e954:	00000003                                ....

0000e958 <g_AM_HAL_GPIO_OUTPUT>:
    e958:	00000403                                ....

0000e95c <g_ui8Bit76Capabilities>:
    e95c:	02800101 80010180 80800101 80808080     ................
    e96c:	80808080 80808008 01800180 80808080     ................
    e97c:	80808080 01800402 01010401 80808080     ................
    e98c:	00000101                                ....

0000e990 <g_ui8Inpen>:
    e990:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
    e9a0:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
    e9b0:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
    e9c0:	00003130                                01..

0000e9c4 <g_ui8NCEtable>:
    e9c4:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    e9d4:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    e9e4:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    e9f4:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    ea04:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    ea14:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    ea24:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    ea34:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    ea44:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    ea54:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    ea64:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    ea74:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    ea84:	32221202 43231303                       .."2..#C

0000ea8c <g_ui8nCEpins>:
    ea8c:	02070707 00080802 01020202 01010101     ................
    ea9c:	01010101 01010101 01010101 01010101     ................
    eaac:	01010101 08010101 01010008 01010101     ................
    eabc:	00000101                                ....

0000eac0 <g_am_hal_mcuctrl_flash_size>:
    eac0:	00004000 00008000 00010000 00020000     .@..............
    ead0:	00040000 00080000 00100000 00200000     .............. .
    eae0:	00180000 00000000 00000000 00000000     ................
	...

0000eb00 <g_am_hal_mcuctrl_sram_size>:
    eb00:	00004000 00008000 00010000 00020000     .@..............
    eb10:	00040000 00080000 00100000 00060000     ................
    eb20:	000c0000 00000000 00000000 00000000     ................
	...

0000eb40 <am_hal_pwrctrl_peripheral_control>:
	...
    eb4c:	00000001 00000004 00000004 00000002     ................
    eb5c:	00000008 00000008 00000004 00000008     ................
    eb6c:	00000008 00000008 00000008 00000008     ................
    eb7c:	00000010 00000010 00000010 00000020     ............ ...
    eb8c:	00000010 00000010 00000040 00000010     ........@.......
    eb9c:	00000010 00000080 00000004 00000004     ................
    ebac:	00000100 00000004 00000004 00000200     ................
    ebbc:	00000020 00000020 00000400 00000004      ... ...........
    ebcc:	00000004 00000800 00000040 00000040     ........@...@...
    ebdc:	00001000 00000080 00000080 00002000     ............. ..
    ebec:	00000100 00000100                       ........
