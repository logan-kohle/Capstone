
bin/ctimer_pwm_output.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 49 d1 00 00 b1 d1 00 00 dd c2 00 00     ....I...........
    c010:	b3 d1 00 00 b3 d1 00 00 b3 d1 00 00 00 00 00 00     ................
	...
    c02c:	b5 d1 00 00 b5 d1 00 00 00 00 00 00 b5 d1 00 00     ................
    c03c:	b5 d1 00 00 b5 d1 00 00 b5 d1 00 00 b5 d1 00 00     ................
    c04c:	b5 d1 00 00 b5 d1 00 00 b5 d1 00 00 b5 d1 00 00     ................
    c05c:	b5 d1 00 00 b5 d1 00 00 b5 d1 00 00 b5 d1 00 00     ................
    c06c:	b5 d1 00 00 b5 d1 00 00 b5 d1 00 00 d5 c1 00 00     ................
    c07c:	b5 d1 00 00 b5 d1 00 00 b5 d1 00 00 b5 d1 00 00     ................
    c08c:	b5 d1 00 00 b5 d1 00 00 b5 d1 00 00 b5 d1 00 00     ................
    c09c:	b5 d1 00 00 b5 d1 00 00 b5 d1 00 00 b5 d1 00 00     ................
    c0ac:	b5 d1 00 00 b5 d1 00 00 b5 d1 00 00 b5 d1 00 00     ................
    c0bc:	b5 d1 00 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    c1a0:	b082      	sub	sp, #8
    c1a2:	4603      	mov	r3, r0
    c1a4:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
    c1a8:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c1ac:	2b00      	cmp	r3, #0
    c1ae:	db0c      	blt.n	c1ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c1b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c1b4:	f003 021f 	and.w	r2, r3, #31
    c1b8:	4905      	ldr	r1, [pc, #20]	; (c1d0 <__NVIC_EnableIRQ+0x30>)
    c1ba:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c1be:	095b      	lsrs	r3, r3, #5
    c1c0:	2001      	movs	r0, #1
    c1c2:	fa00 f202 	lsl.w	r2, r0, r2
    c1c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
    c1ca:	bf00      	nop
    c1cc:	b002      	add	sp, #8
    c1ce:	4770      	bx	lr
    c1d0:	e000e100 	.word	0xe000e100

0000c1d4 <am_ctimer_isr>:
// Timer Interrupt Serive Routine (ISR)
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
    c1d4:	b500      	push	{lr}
    c1d6:	b083      	sub	sp, #12
    uint32_t ui32OnTime;

    //
    // Clear the interrupt that got us here.
    //
    am_hal_ctimer_int_clear(AM_BSP_PWM_LED_TIMER_INT);
    c1d8:	2020      	movs	r0, #32
    c1da:	f001 fccd 	bl	db78 <am_hal_ctimer_int_clear>

    ui32OnTime = g_pui8Brightness[g_ui32Index];
    c1de:	4b11      	ldr	r3, [pc, #68]	; (c224 <am_ctimer_isr+0x50>)
    c1e0:	681b      	ldr	r3, [r3, #0]
    c1e2:	4a11      	ldr	r2, [pc, #68]	; (c228 <am_ctimer_isr+0x54>)
    c1e4:	5cd3      	ldrb	r3, [r2, r3]
    c1e6:	9301      	str	r3, [sp, #4]

    if ( !(g_ui32Index & 1) )
    c1e8:	4b0e      	ldr	r3, [pc, #56]	; (c224 <am_ctimer_isr+0x50>)
    c1ea:	681b      	ldr	r3, [r3, #0]
    c1ec:	f003 0301 	and.w	r3, r3, #1
    c1f0:	2b00      	cmp	r3, #0
    c1f2:	d106      	bne.n	c202 <am_ctimer_isr+0x2e>
    {
        // This is a CMPR0 interrupt.
        // The CMPR2 interrupt will come later, but while we're here go ahead
        // and update the CMPR0 period.
        //
        am_hal_ctimer_period_set(AM_BSP_PWM_LED_TIMER, AM_BSP_PWM_LED_TIMER_SEG,
    c1f4:	9b01      	ldr	r3, [sp, #4]
    c1f6:	2240      	movs	r2, #64	; 0x40
    c1f8:	490c      	ldr	r1, [pc, #48]	; (c22c <am_ctimer_isr+0x58>)
    c1fa:	2002      	movs	r0, #2
    c1fc:	f001 fbf4 	bl	d9e8 <am_hal_ctimer_period_set>
    c200:	e005      	b.n	c20e <am_ctimer_isr+0x3a>
    else
    {
        //
        // This is a CMPR2 interrupt.  Update the CMPR2 period.
        //
        am_hal_ctimer_aux_period_set(AM_BSP_PWM_LED_TIMER, AM_BSP_PWM_LED_TIMER_SEG,
    c202:	9b01      	ldr	r3, [sp, #4]
    c204:	2240      	movs	r2, #64	; 0x40
    c206:	4909      	ldr	r1, [pc, #36]	; (c22c <am_ctimer_isr+0x58>)
    c208:	2002      	movs	r0, #2
    c20a:	f001 fc47 	bl	da9c <am_hal_ctimer_aux_period_set>
    }

    //
    // Set up the LED duty cycle for the next pulse.
    //
    g_ui32Index = (g_ui32Index + 1) % PERIOD;
    c20e:	4b05      	ldr	r3, [pc, #20]	; (c224 <am_ctimer_isr+0x50>)
    c210:	681b      	ldr	r3, [r3, #0]
    c212:	3301      	adds	r3, #1
    c214:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c218:	4a02      	ldr	r2, [pc, #8]	; (c224 <am_ctimer_isr+0x50>)
    c21a:	6013      	str	r3, [r2, #0]

} // am_ctimer_isr()
    c21c:	bf00      	nop
    c21e:	b003      	add	sp, #12
    c220:	f85d fb04 	ldr.w	pc, [sp], #4
    c224:	10001044 	.word	0x10001044
    c228:	0000e7e8 	.word	0x0000e7e8
    c22c:	ffff0000 	.word	0xffff0000

0000c230 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
    c230:	b500      	push	{lr}
    c232:	b083      	sub	sp, #12
    //
    // Set the clock frequency.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c234:	2100      	movs	r1, #0
    c236:	2000      	movs	r0, #0
    c238:	f001 f966 	bl	d508 <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c23c:	4822      	ldr	r0, [pc, #136]	; (c2c8 <main+0x98>)
    c23e:	f000 ffbb 	bl	d1b8 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c242:	f000 ffdd 	bl	d200 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    c246:	f001 ff53 	bl	e0f0 <am_bsp_low_power_init>
    //
    // Among other things, am_bsp_low_power_init() stops the XT oscillator,
    // which is needed for this example.
    //
#if USE_XTAL
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_XTAL_START, 0);
    c24a:	2100      	movs	r1, #0
    c24c:	2001      	movs	r0, #1
    c24e:	f001 f95b 	bl	d508 <am_hal_clkgen_control>
#endif

    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_bsp_itm_printf_enable();
    c252:	f001 ffa3 	bl	e19c <am_bsp_itm_printf_enable>

    //
    // Clear the terminal and print the banner.
    //
    am_util_stdio_terminal_clear();
    c256:	f000 ff6f 	bl	d138 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("CTimer PWM Output example\n");
    c25a:	481c      	ldr	r0, [pc, #112]	; (c2cc <main+0x9c>)
    c25c:	f000 ff4c 	bl	d0f8 <am_util_stdio_printf>
    am_util_stdio_printf("Clock source is:" BC_CLKSRC ".\n");
    c260:	481b      	ldr	r0, [pc, #108]	; (c2d0 <main+0xa0>)
    c262:	f000 ff49 	bl	d0f8 <am_util_stdio_printf>
    am_util_stdio_printf("LED on pin: %d\n\n", AM_BSP_PIN_PWM_LED);
    c266:	211e      	movs	r1, #30
    c268:	481a      	ldr	r0, [pc, #104]	; (c2d4 <main+0xa4>)
    c26a:	f000 ff45 	bl	d0f8 <am_util_stdio_printf>

    //
    // We are done printing. Disable debug printf messages on ITM.
    //
    am_bsp_debug_printf_disable();
    c26e:	f001 ff5f 	bl	e130 <am_bsp_debug_printf_disable>

    //
    // Configure the output pin.
    //
    am_hal_ctimer_output_config(AM_BSP_PWM_LED_TIMER,
    c272:	2303      	movs	r3, #3
    c274:	9300      	str	r3, [sp, #0]
    c276:	2300      	movs	r3, #0
    c278:	221e      	movs	r2, #30
    c27a:	4917      	ldr	r1, [pc, #92]	; (c2d8 <main+0xa8>)
    c27c:	2002      	movs	r0, #2
    c27e:	f001 fa79 	bl	d774 <am_hal_ctimer_output_config>
                                AM_HAL_GPIO_PIN_DRIVESTRENGTH_12MA);

    //
    // Configure a timer to drive the LED.
    //
    am_hal_ctimer_config_single(AM_BSP_PWM_LED_TIMER,               // ui32TimerNumber
    c282:	f44f 7234 	mov.w	r2, #720	; 0x2d0
    c286:	4914      	ldr	r1, [pc, #80]	; (c2d8 <main+0xa8>)
    c288:	2002      	movs	r0, #2
    c28a:	f001 f9f7 	bl	d67c <am_hal_ctimer_config_single>
                                 AM_HAL_CTIMER_INT_ENABLE) );

    //
    // Set up initial timer periods.
    //
    am_hal_ctimer_period_set(AM_BSP_PWM_LED_TIMER,
    c28e:	2301      	movs	r3, #1
    c290:	2240      	movs	r2, #64	; 0x40
    c292:	4911      	ldr	r1, [pc, #68]	; (c2d8 <main+0xa8>)
    c294:	2002      	movs	r0, #2
    c296:	f001 fba7 	bl	d9e8 <am_hal_ctimer_period_set>
                             AM_BSP_PWM_LED_TIMER_SEG, PERIOD, 1);
    am_hal_ctimer_aux_period_set(AM_BSP_PWM_LED_TIMER,
    c29a:	2301      	movs	r3, #1
    c29c:	2240      	movs	r2, #64	; 0x40
    c29e:	490e      	ldr	r1, [pc, #56]	; (c2d8 <main+0xa8>)
    c2a0:	2002      	movs	r0, #2
    c2a2:	f001 fbfb 	bl	da9c <am_hal_ctimer_aux_period_set>
                                 AM_BSP_PWM_LED_TIMER_SEG, PERIOD, 1);

    //
    // Enable interrupts for the Timer we are using on this board.
    //
    am_hal_ctimer_int_enable(AM_BSP_PWM_LED_TIMER_INT);
    c2a6:	2020      	movs	r0, #32
    c2a8:	f001 fc52 	bl	db50 <am_hal_ctimer_int_enable>
    NVIC_EnableIRQ(CTIMER_IRQn);
    c2ac:	200e      	movs	r0, #14
    c2ae:	f7ff ff77 	bl	c1a0 <__NVIC_EnableIRQ>
    am_hal_interrupt_master_enable();
    c2b2:	f001 fe3d 	bl	df30 <am_hal_interrupt_master_enable>

    //
    // Start the timer.
    //
    am_hal_ctimer_start(AM_BSP_PWM_LED_TIMER, AM_BSP_PWM_LED_TIMER_SEG);
    c2b6:	4908      	ldr	r1, [pc, #32]	; (c2d8 <main+0xa8>)
    c2b8:	2002      	movs	r0, #2
    c2ba:	f001 fa2d 	bl	d718 <am_hal_ctimer_start>
    while (1)
    {
        //
        // Go to Deep Sleep.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c2be:	2001      	movs	r0, #1
    c2c0:	f001 fede 	bl	e080 <am_hal_sysctrl_sleep>
    c2c4:	e7fb      	b.n	c2be <main+0x8e>
    c2c6:	bf00      	nop
    c2c8:	0000e828 	.word	0x0000e828
    c2cc:	0000e78c 	.word	0x0000e78c
    c2d0:	0000e7a8 	.word	0x0000e7a8
    c2d4:	0000e7c0 	.word	0x0000e7c0
    c2d8:	ffff0000 	.word	0xffff0000

0000c2dc <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    c2dc:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    c2de:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    c2e2:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    c2e4:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    c2e8:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    c2ec:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c2f0:	f000 f80a 	bl	c308 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    c2f4:	bd01      	pop	{r0, pc}
}
    c2f6:	bf00      	nop
    c2f8:	4618      	mov	r0, r3

0000c2fa <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c2fa:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c2fc:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c2fe:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c300:	4770      	bx	lr
}
    c302:	bf00      	nop
    c304:	4618      	mov	r0, r3
	...

0000c308 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c308:	b500      	push	{lr}
    c30a:	b097      	sub	sp, #92	; 0x5c
    c30c:	9001      	str	r0, [sp, #4]
    volatile am_fault_t sFaultData;
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_t  sHalFaultData = {0};
#else
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c30e:	ab03      	add	r3, sp, #12
    c310:	2200      	movs	r2, #0
    c312:	601a      	str	r2, [r3, #0]
    c314:	605a      	str	r2, [r3, #4]
    c316:	609a      	str	r2, [r3, #8]
    c318:	60da      	str	r2, [r3, #12]
    c31a:	611a      	str	r2, [r3, #16]
    c31c:	615a      	str	r2, [r3, #20]
#endif // if defined(AM_PART_APOLLO4)

    uint32_t u32Mask = 0;
    c31e:	2300      	movs	r3, #0
    c320:	9315      	str	r3, [sp, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c322:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c324:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c326:	4b2e      	ldr	r3, [pc, #184]	; (c3e0 <am_util_faultisr_collect_data+0xd8>)
    c328:	681b      	ldr	r3, [r3, #0]
    c32a:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c32c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c32e:	b2db      	uxtb	r3, r3
    c330:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c334:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c336:	0a1b      	lsrs	r3, r3, #8
    c338:	b2db      	uxtb	r3, r3
    c33a:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c33e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c340:	0c1b      	lsrs	r3, r3, #16
    c342:	b29b      	uxth	r3, r3
    c344:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c348:	4b26      	ldr	r3, [pc, #152]	; (c3e4 <am_util_faultisr_collect_data+0xdc>)
    c34a:	681b      	ldr	r3, [r3, #0]
    c34c:	9312      	str	r3, [sp, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c34e:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
    c352:	b2db      	uxtb	r3, r3
    c354:	f003 0302 	and.w	r3, r3, #2
    c358:	2b00      	cmp	r3, #0
    c35a:	d005      	beq.n	c368 <am_util_faultisr_collect_data+0x60>
    c35c:	9901      	ldr	r1, [sp, #4]
    c35e:	2006      	movs	r0, #6
    c360:	f7ff ffcb 	bl	c2fa <getStackedReg>
    c364:	4603      	mov	r3, r0
    c366:	e001      	b.n	c36c <am_util_faultisr_collect_data+0x64>
    c368:	f04f 33ff 	mov.w	r3, #4294967295
    c36c:	9311      	str	r3, [sp, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c36e:	9901      	ldr	r1, [sp, #4]
    c370:	2000      	movs	r0, #0
    c372:	f7ff ffc2 	bl	c2fa <getStackedReg>
    c376:	4603      	mov	r3, r0
    c378:	9309      	str	r3, [sp, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c37a:	9901      	ldr	r1, [sp, #4]
    c37c:	2001      	movs	r0, #1
    c37e:	f7ff ffbc 	bl	c2fa <getStackedReg>
    c382:	4603      	mov	r3, r0
    c384:	930a      	str	r3, [sp, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c386:	9901      	ldr	r1, [sp, #4]
    c388:	2002      	movs	r0, #2
    c38a:	f7ff ffb6 	bl	c2fa <getStackedReg>
    c38e:	4603      	mov	r3, r0
    c390:	930b      	str	r3, [sp, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c392:	9901      	ldr	r1, [sp, #4]
    c394:	2003      	movs	r0, #3
    c396:	f7ff ffb0 	bl	c2fa <getStackedReg>
    c39a:	4603      	mov	r3, r0
    c39c:	930c      	str	r3, [sp, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c39e:	9901      	ldr	r1, [sp, #4]
    c3a0:	2004      	movs	r0, #4
    c3a2:	f7ff ffaa 	bl	c2fa <getStackedReg>
    c3a6:	4603      	mov	r3, r0
    c3a8:	930d      	str	r3, [sp, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c3aa:	9901      	ldr	r1, [sp, #4]
    c3ac:	2005      	movs	r0, #5
    c3ae:	f7ff ffa4 	bl	c2fa <getStackedReg>
    c3b2:	4603      	mov	r3, r0
    c3b4:	930e      	str	r3, [sp, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c3b6:	9901      	ldr	r1, [sp, #4]
    c3b8:	2006      	movs	r0, #6
    c3ba:	f7ff ff9e 	bl	c2fa <getStackedReg>
    c3be:	4603      	mov	r3, r0
    c3c0:	930f      	str	r3, [sp, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c3c2:	9901      	ldr	r1, [sp, #4]
    c3c4:	2007      	movs	r0, #7
    c3c6:	f7ff ff98 	bl	c2fa <getStackedReg>
    c3ca:	4603      	mov	r3, r0
    c3cc:	9310      	str	r3, [sp, #64]	; 0x40
    //
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_get(&sHalFaultData);
#else
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c3ce:	ab03      	add	r3, sp, #12
    c3d0:	4619      	mov	r1, r3
    c3d2:	2002      	movs	r0, #2
    c3d4:	f001 fdb8 	bl	df48 <am_hal_mcuctrl_info_get>
      am_util_stdio_printf("   SYS Fault Address: 0x%08X\n", sHalFaultData.ui32SYS);
    }

#endif

    u32Mask = 0;
    c3d8:	2300      	movs	r3, #0
    c3da:	9315      	str	r3, [sp, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    c3dc:	e7fe      	b.n	c3dc <am_util_faultisr_collect_data+0xd4>
    c3de:	bf00      	nop
    c3e0:	e000ed28 	.word	0xe000ed28
    c3e4:	e000ed38 	.word	0xe000ed38

0000c3e8 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    c3e8:	b082      	sub	sp, #8
    c3ea:	9001      	str	r0, [sp, #4]
    g_pfnCharPrint = pfnCharPrint;
    c3ec:	4a02      	ldr	r2, [pc, #8]	; (c3f8 <am_util_stdio_printf_init+0x10>)
    c3ee:	9b01      	ldr	r3, [sp, #4]
    c3f0:	6013      	str	r3, [r2, #0]
}
    c3f2:	bf00      	nop
    c3f4:	b002      	add	sp, #8
    c3f6:	4770      	bx	lr
    c3f8:	10001048 	.word	0x10001048

0000c3fc <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c3fc:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c400:	b098      	sub	sp, #96	; 0x60
    c402:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c406:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c40a:	f04f 0000 	mov.w	r0, #0
    c40e:	f04f 0100 	mov.w	r1, #0
    c412:	0018      	movs	r0, r3
    c414:	2100      	movs	r1, #0
    c416:	ea50 0301 	orrs.w	r3, r0, r1
    c41a:	f000 80b0 	beq.w	c57e <divu64_10+0x182>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c41e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c422:	f04f 0400 	mov.w	r4, #0
    c426:	f04f 0500 	mov.w	r5, #0
    c42a:	0854      	lsrs	r4, r2, #1
    c42c:	ea44 74c3 	orr.w	r4, r4, r3, lsl #31
    c430:	085d      	lsrs	r5, r3, #1
    c432:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c436:	f04f 0000 	mov.w	r0, #0
    c43a:	f04f 0100 	mov.w	r1, #0
    c43e:	0890      	lsrs	r0, r2, #2
    c440:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
    c444:	0899      	lsrs	r1, r3, #2
    c446:	eb14 0a00 	adds.w	sl, r4, r0
    c44a:	eb45 0b01 	adc.w	fp, r5, r1
    c44e:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
        q64 += (q64 >> 4);
    c452:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c456:	f04f 0000 	mov.w	r0, #0
    c45a:	f04f 0100 	mov.w	r1, #0
    c45e:	0910      	lsrs	r0, r2, #4
    c460:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
    c464:	0919      	lsrs	r1, r3, #4
    c466:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c46a:	1814      	adds	r4, r2, r0
    c46c:	9402      	str	r4, [sp, #8]
    c46e:	414b      	adcs	r3, r1
    c470:	9303      	str	r3, [sp, #12]
    c472:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    c476:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 8);
    c47a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c47e:	f04f 0000 	mov.w	r0, #0
    c482:	f04f 0100 	mov.w	r1, #0
    c486:	0a10      	lsrs	r0, r2, #8
    c488:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
    c48c:	0a19      	lsrs	r1, r3, #8
    c48e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c492:	1814      	adds	r4, r2, r0
    c494:	9404      	str	r4, [sp, #16]
    c496:	414b      	adcs	r3, r1
    c498:	9305      	str	r3, [sp, #20]
    c49a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    c49e:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 16);
    c4a2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c4a6:	f04f 0000 	mov.w	r0, #0
    c4aa:	f04f 0100 	mov.w	r1, #0
    c4ae:	0c10      	lsrs	r0, r2, #16
    c4b0:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    c4b4:	0c19      	lsrs	r1, r3, #16
    c4b6:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c4ba:	1814      	adds	r4, r2, r0
    c4bc:	9406      	str	r4, [sp, #24]
    c4be:	414b      	adcs	r3, r1
    c4c0:	9307      	str	r3, [sp, #28]
    c4c2:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
    c4c6:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 32);
    c4ca:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c4ce:	f04f 0000 	mov.w	r0, #0
    c4d2:	f04f 0100 	mov.w	r1, #0
    c4d6:	0018      	movs	r0, r3
    c4d8:	2100      	movs	r1, #0
    c4da:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c4de:	1814      	adds	r4, r2, r0
    c4e0:	9408      	str	r4, [sp, #32]
    c4e2:	414b      	adcs	r3, r1
    c4e4:	9309      	str	r3, [sp, #36]	; 0x24
    c4e6:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
    c4ea:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 >>= 3;
    c4ee:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    c4f2:	f04f 0200 	mov.w	r2, #0
    c4f6:	f04f 0300 	mov.w	r3, #0
    c4fa:	08c2      	lsrs	r2, r0, #3
    c4fc:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    c500:	08cb      	lsrs	r3, r1, #3
    c502:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
        r64 = ui64Val - q64*10;
    c506:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
    c50a:	4622      	mov	r2, r4
    c50c:	462b      	mov	r3, r5
    c50e:	f04f 0000 	mov.w	r0, #0
    c512:	f04f 0100 	mov.w	r1, #0
    c516:	0099      	lsls	r1, r3, #2
    c518:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
    c51c:	0090      	lsls	r0, r2, #2
    c51e:	4602      	mov	r2, r0
    c520:	460b      	mov	r3, r1
    c522:	1916      	adds	r6, r2, r4
    c524:	eb43 0705 	adc.w	r7, r3, r5
    c528:	19b3      	adds	r3, r6, r6
    c52a:	930a      	str	r3, [sp, #40]	; 0x28
    c52c:	eb47 0307 	adc.w	r3, r7, r7
    c530:	930b      	str	r3, [sp, #44]	; 0x2c
    c532:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    c536:	4630      	mov	r0, r6
    c538:	4639      	mov	r1, r7
    c53a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c53e:	1a14      	subs	r4, r2, r0
    c540:	940c      	str	r4, [sp, #48]	; 0x30
    c542:	eb63 0301 	sbc.w	r3, r3, r1
    c546:	930d      	str	r3, [sp, #52]	; 0x34
    c548:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    c54c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
        return q64 + ((r64 + 6) >> 4);
    c550:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    c554:	f112 0806 	adds.w	r8, r2, #6
    c558:	f143 0900 	adc.w	r9, r3, #0
    c55c:	f04f 0200 	mov.w	r2, #0
    c560:	f04f 0300 	mov.w	r3, #0
    c564:	ea4f 1218 	mov.w	r2, r8, lsr #4
    c568:	ea42 7209 	orr.w	r2, r2, r9, lsl #28
    c56c:	ea4f 1319 	mov.w	r3, r9, lsr #4
    c570:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    c574:	1814      	adds	r4, r2, r0
    c576:	9400      	str	r4, [sp, #0]
    c578:	414b      	adcs	r3, r1
    c57a:	9301      	str	r3, [sp, #4]
    c57c:	e02a      	b.n	c5d4 <divu64_10+0x1d8>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    c57e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c580:	9317      	str	r3, [sp, #92]	; 0x5c
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c582:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c584:	085a      	lsrs	r2, r3, #1
    c586:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c588:	089b      	lsrs	r3, r3, #2
    c58a:	4413      	add	r3, r2
    c58c:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 4);
    c58e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c590:	091b      	lsrs	r3, r3, #4
    c592:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c594:	4413      	add	r3, r2
    c596:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 8);
    c598:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c59a:	0a1b      	lsrs	r3, r3, #8
    c59c:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c59e:	4413      	add	r3, r2
    c5a0:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 16);
    c5a2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c5a4:	0c1b      	lsrs	r3, r3, #16
    c5a6:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c5a8:	4413      	add	r3, r2
    c5aa:	9316      	str	r3, [sp, #88]	; 0x58
        q32 >>= 3;
    c5ac:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c5ae:	08db      	lsrs	r3, r3, #3
    c5b0:	9316      	str	r3, [sp, #88]	; 0x58
        r32 = ui32Val - q32*10;
    c5b2:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c5b4:	4613      	mov	r3, r2
    c5b6:	009b      	lsls	r3, r3, #2
    c5b8:	4413      	add	r3, r2
    c5ba:	005b      	lsls	r3, r3, #1
    c5bc:	461a      	mov	r2, r3
    c5be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c5c0:	1a9b      	subs	r3, r3, r2
    c5c2:	9315      	str	r3, [sp, #84]	; 0x54
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c5c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c5c6:	3306      	adds	r3, #6
    c5c8:	091a      	lsrs	r2, r3, #4
    c5ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c5cc:	4413      	add	r3, r2
    c5ce:	2200      	movs	r2, #0
    c5d0:	9300      	str	r3, [sp, #0]
    c5d2:	9201      	str	r2, [sp, #4]
    }
}
    c5d4:	e9dd 2300 	ldrd	r2, r3, [sp]
    c5d8:	4610      	mov	r0, r2
    c5da:	4619      	mov	r1, r3
    c5dc:	b018      	add	sp, #96	; 0x60
    c5de:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c5e2:	4770      	bx	lr

0000c5e4 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    c5e4:	b500      	push	{lr}
    c5e6:	b085      	sub	sp, #20
    c5e8:	e9cd 0100 	strd	r0, r1, [sp]
    int iNDigits = ui64Val ? 0 : 1;
    c5ec:	9a00      	ldr	r2, [sp, #0]
    c5ee:	9b01      	ldr	r3, [sp, #4]
    c5f0:	4313      	orrs	r3, r2
    c5f2:	2b00      	cmp	r3, #0
    c5f4:	bf0c      	ite	eq
    c5f6:	2301      	moveq	r3, #1
    c5f8:	2300      	movne	r3, #0
    c5fa:	b2db      	uxtb	r3, r3
    c5fc:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    c5fe:	e008      	b.n	c612 <ndigits_in_u64+0x2e>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    c600:	e9dd 0100 	ldrd	r0, r1, [sp]
    c604:	f7ff fefa 	bl	c3fc <divu64_10>
    c608:	e9cd 0100 	strd	r0, r1, [sp]
        ++iNDigits;
    c60c:	9b03      	ldr	r3, [sp, #12]
    c60e:	3301      	adds	r3, #1
    c610:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    c612:	e9dd 2300 	ldrd	r2, r3, [sp]
    c616:	4313      	orrs	r3, r2
    c618:	d1f2      	bne.n	c600 <ndigits_in_u64+0x1c>
    }

    return iNDigits;
    c61a:	9b03      	ldr	r3, [sp, #12]
}
    c61c:	4618      	mov	r0, r3
    c61e:	b005      	add	sp, #20
    c620:	f85d fb04 	ldr.w	pc, [sp], #4

0000c624 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    c624:	b530      	push	{r4, r5, lr}
    c626:	b083      	sub	sp, #12
    c628:	e9cd 0100 	strd	r0, r1, [sp]
    if ( i64Val < 0 )
    c62c:	e9dd 2300 	ldrd	r2, r3, [sp]
    c630:	2b00      	cmp	r3, #0
    c632:	da07      	bge.n	c644 <ndigits_in_i64+0x20>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    c634:	e9dd 2300 	ldrd	r2, r3, [sp]
    c638:	2100      	movs	r1, #0
    c63a:	4254      	negs	r4, r2
    c63c:	eb61 0503 	sbc.w	r5, r1, r3
    c640:	e9cd 4500 	strd	r4, r5, [sp]
    }

    return ndigits_in_u64((uint64_t) i64Val);
    c644:	e9dd 2300 	ldrd	r2, r3, [sp]
    c648:	4610      	mov	r0, r2
    c64a:	4619      	mov	r1, r3
    c64c:	f7ff ffca 	bl	c5e4 <ndigits_in_u64>
    c650:	4603      	mov	r3, r0
}
    c652:	4618      	mov	r0, r3
    c654:	b003      	add	sp, #12
    c656:	bd30      	pop	{r4, r5, pc}

0000c658 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    c658:	b084      	sub	sp, #16
    c65a:	e9cd 0100 	strd	r0, r1, [sp]
    int iDigits = ui64Val ? 0 : 1;
    c65e:	9a00      	ldr	r2, [sp, #0]
    c660:	9b01      	ldr	r3, [sp, #4]
    c662:	4313      	orrs	r3, r2
    c664:	2b00      	cmp	r3, #0
    c666:	bf0c      	ite	eq
    c668:	2301      	moveq	r3, #1
    c66a:	2300      	movne	r3, #0
    c66c:	b2db      	uxtb	r3, r3
    c66e:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    c670:	e00e      	b.n	c690 <ndigits_in_hex+0x38>
    {
        ui64Val >>= 4;
    c672:	e9dd 0100 	ldrd	r0, r1, [sp]
    c676:	f04f 0200 	mov.w	r2, #0
    c67a:	f04f 0300 	mov.w	r3, #0
    c67e:	0902      	lsrs	r2, r0, #4
    c680:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    c684:	090b      	lsrs	r3, r1, #4
    c686:	e9cd 2300 	strd	r2, r3, [sp]
        ++iDigits;
    c68a:	9b03      	ldr	r3, [sp, #12]
    c68c:	3301      	adds	r3, #1
    c68e:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    c690:	e9dd 2300 	ldrd	r2, r3, [sp]
    c694:	4313      	orrs	r3, r2
    c696:	d1ec      	bne.n	c672 <ndigits_in_hex+0x1a>
    }

    return iDigits;
    c698:	9b03      	ldr	r3, [sp, #12]
}
    c69a:	4618      	mov	r0, r3
    c69c:	b004      	add	sp, #16
    c69e:	4770      	bx	lr

0000c6a0 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    c6a0:	b086      	sub	sp, #24
    c6a2:	9001      	str	r0, [sp, #4]
    c6a4:	9100      	str	r1, [sp, #0]
    bool bNeg = false;
    c6a6:	2300      	movs	r3, #0
    c6a8:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    c6ac:	2300      	movs	r3, #0
    c6ae:	9304      	str	r3, [sp, #16]
    c6b0:	2300      	movs	r3, #0
    c6b2:	9303      	str	r3, [sp, #12]

    if ( *pcStr == '-')
    c6b4:	9b01      	ldr	r3, [sp, #4]
    c6b6:	781b      	ldrb	r3, [r3, #0]
    c6b8:	2b2d      	cmp	r3, #45	; 0x2d
    c6ba:	d11c      	bne.n	c6f6 <decstr_to_int+0x56>
    {
        bNeg = true;
    c6bc:	2301      	movs	r3, #1
    c6be:	f88d 3017 	strb.w	r3, [sp, #23]
        pcStr++;
    c6c2:	9b01      	ldr	r3, [sp, #4]
    c6c4:	3301      	adds	r3, #1
    c6c6:	9301      	str	r3, [sp, #4]
        uCnt++;
    c6c8:	9b03      	ldr	r3, [sp, #12]
    c6ca:	3301      	adds	r3, #1
    c6cc:	9303      	str	r3, [sp, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c6ce:	e012      	b.n	c6f6 <decstr_to_int+0x56>
    {
        ++uCnt;
    c6d0:	9b03      	ldr	r3, [sp, #12]
    c6d2:	3301      	adds	r3, #1
    c6d4:	9303      	str	r3, [sp, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    c6d6:	9a04      	ldr	r2, [sp, #16]
    c6d8:	4613      	mov	r3, r2
    c6da:	009b      	lsls	r3, r3, #2
    c6dc:	4413      	add	r3, r2
    c6de:	005b      	lsls	r3, r3, #1
    c6e0:	9304      	str	r3, [sp, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    c6e2:	9b01      	ldr	r3, [sp, #4]
    c6e4:	781b      	ldrb	r3, [r3, #0]
    c6e6:	461a      	mov	r2, r3
    c6e8:	9b04      	ldr	r3, [sp, #16]
    c6ea:	4413      	add	r3, r2
    c6ec:	3b30      	subs	r3, #48	; 0x30
    c6ee:	9304      	str	r3, [sp, #16]
        pcStr++;
    c6f0:	9b01      	ldr	r3, [sp, #4]
    c6f2:	3301      	adds	r3, #1
    c6f4:	9301      	str	r3, [sp, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c6f6:	9b01      	ldr	r3, [sp, #4]
    c6f8:	781b      	ldrb	r3, [r3, #0]
    c6fa:	2b2f      	cmp	r3, #47	; 0x2f
    c6fc:	d903      	bls.n	c706 <decstr_to_int+0x66>
    c6fe:	9b01      	ldr	r3, [sp, #4]
    c700:	781b      	ldrb	r3, [r3, #0]
    c702:	2b39      	cmp	r3, #57	; 0x39
    c704:	d9e4      	bls.n	c6d0 <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    c706:	9b00      	ldr	r3, [sp, #0]
    c708:	2b00      	cmp	r3, #0
    c70a:	d002      	beq.n	c712 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    c70c:	9b00      	ldr	r3, [sp, #0]
    c70e:	9a03      	ldr	r2, [sp, #12]
    c710:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    c712:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c716:	2b00      	cmp	r3, #0
    c718:	d002      	beq.n	c720 <decstr_to_int+0x80>
    c71a:	9b04      	ldr	r3, [sp, #16]
    c71c:	425b      	negs	r3, r3
    c71e:	e000      	b.n	c722 <decstr_to_int+0x82>
    c720:	9b04      	ldr	r3, [sp, #16]
}
    c722:	4618      	mov	r0, r3
    c724:	b006      	add	sp, #24
    c726:	4770      	bx	lr

0000c728 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c728:	b500      	push	{lr}
    c72a:	b091      	sub	sp, #68	; 0x44
    c72c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    c730:	9201      	str	r2, [sp, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    c732:	2300      	movs	r3, #0
    c734:	930f      	str	r3, [sp, #60]	; 0x3c
    c736:	2300      	movs	r3, #0
    c738:	930e      	str	r3, [sp, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    c73a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c73e:	f7ff fe5d 	bl	c3fc <divu64_10>
    c742:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    c746:	9902      	ldr	r1, [sp, #8]
    c748:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c74a:	4613      	mov	r3, r2
    c74c:	009b      	lsls	r3, r3, #2
    c74e:	4413      	add	r3, r2
    c750:	005b      	lsls	r3, r3, #1
    c752:	1acb      	subs	r3, r1, r3
    c754:	930b      	str	r3, [sp, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    c756:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c758:	b2da      	uxtb	r2, r3
    c75a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c75c:	1c59      	adds	r1, r3, #1
    c75e:	910f      	str	r1, [sp, #60]	; 0x3c
    c760:	3230      	adds	r2, #48	; 0x30
    c762:	b2d2      	uxtb	r2, r2
    c764:	3340      	adds	r3, #64	; 0x40
    c766:	446b      	add	r3, sp
    c768:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    c76c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    c770:	e9cd 2302 	strd	r2, r3, [sp, #8]
    } while ( ui64Val );
    c774:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c778:	4313      	orrs	r3, r2
    c77a:	d1de      	bne.n	c73a <uint64_to_str+0x12>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    c77c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c77e:	930e      	str	r3, [sp, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c780:	9b01      	ldr	r3, [sp, #4]
    c782:	2b00      	cmp	r3, #0
    c784:	d010      	beq.n	c7a8 <uint64_to_str+0x80>
    {
        while ( ix-- )
    c786:	e007      	b.n	c798 <uint64_to_str+0x70>
        {
            *pcBuf++ = tbuf[ix];
    c788:	9b01      	ldr	r3, [sp, #4]
    c78a:	1c5a      	adds	r2, r3, #1
    c78c:	9201      	str	r2, [sp, #4]
    c78e:	a904      	add	r1, sp, #16
    c790:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    c792:	440a      	add	r2, r1
    c794:	7812      	ldrb	r2, [r2, #0]
    c796:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    c798:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c79a:	1e5a      	subs	r2, r3, #1
    c79c:	920f      	str	r2, [sp, #60]	; 0x3c
    c79e:	2b00      	cmp	r3, #0
    c7a0:	d1f2      	bne.n	c788 <uint64_to_str+0x60>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    c7a2:	9b01      	ldr	r3, [sp, #4]
    c7a4:	2200      	movs	r2, #0
    c7a6:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    c7a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
}
    c7aa:	4618      	mov	r0, r3
    c7ac:	b011      	add	sp, #68	; 0x44
    c7ae:	f85d fb04 	ldr.w	pc, [sp], #4

0000c7b2 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    c7b2:	b08c      	sub	sp, #48	; 0x30
    c7b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
    c7b8:	9201      	str	r2, [sp, #4]
    c7ba:	f88d 3003 	strb.w	r3, [sp, #3]
    int iNumDig, ix = 0;
    c7be:	2300      	movs	r3, #0
    c7c0:	930b      	str	r3, [sp, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    c7c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c7c6:	4313      	orrs	r3, r2
    c7c8:	d135      	bne.n	c836 <uint64_to_hexstr+0x84>
    {
        tbuf[ix++] = '0';   // Print a '0'
    c7ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c7cc:	1c5a      	adds	r2, r3, #1
    c7ce:	920b      	str	r2, [sp, #44]	; 0x2c
    c7d0:	3330      	adds	r3, #48	; 0x30
    c7d2:	446b      	add	r3, sp
    c7d4:	2230      	movs	r2, #48	; 0x30
    c7d6:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    c7da:	e02c      	b.n	c836 <uint64_to_hexstr+0x84>
    {
        cCh = ui64Val & 0xf;
    c7dc:	f89d 3008 	ldrb.w	r3, [sp, #8]
    c7e0:	f003 030f 	and.w	r3, r3, #15
    c7e4:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    c7e8:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    c7ec:	2b09      	cmp	r3, #9
    c7ee:	d90b      	bls.n	c808 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    c7f0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c7f4:	2b00      	cmp	r3, #0
    c7f6:	d001      	beq.n	c7fc <uint64_to_hexstr+0x4a>
    c7f8:	2227      	movs	r2, #39	; 0x27
    c7fa:	e000      	b.n	c7fe <uint64_to_hexstr+0x4c>
    c7fc:	2207      	movs	r2, #7
    c7fe:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    c802:	4413      	add	r3, r2
    c804:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    c808:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c80a:	1c5a      	adds	r2, r3, #1
    c80c:	920b      	str	r2, [sp, #44]	; 0x2c
    c80e:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    c812:	3230      	adds	r2, #48	; 0x30
    c814:	b2d2      	uxtb	r2, r2
    c816:	3330      	adds	r3, #48	; 0x30
    c818:	446b      	add	r3, sp
    c81a:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    c81e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c822:	f04f 0200 	mov.w	r2, #0
    c826:	f04f 0300 	mov.w	r3, #0
    c82a:	0902      	lsrs	r2, r0, #4
    c82c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    c830:	090b      	lsrs	r3, r1, #4
    c832:	e9cd 2302 	strd	r2, r3, [sp, #8]
    while ( ui64Val )
    c836:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c83a:	4313      	orrs	r3, r2
    c83c:	d1ce      	bne.n	c7dc <uint64_to_hexstr+0x2a>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    c83e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c840:	9309      	str	r3, [sp, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    c842:	9b01      	ldr	r3, [sp, #4]
    c844:	2b00      	cmp	r3, #0
    c846:	d010      	beq.n	c86a <uint64_to_hexstr+0xb8>
    {
        while (ix--)
    c848:	e007      	b.n	c85a <uint64_to_hexstr+0xa8>
        {
            *pcBuf++ = tbuf[ix];
    c84a:	9b01      	ldr	r3, [sp, #4]
    c84c:	1c5a      	adds	r2, r3, #1
    c84e:	9201      	str	r2, [sp, #4]
    c850:	a904      	add	r1, sp, #16
    c852:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c854:	440a      	add	r2, r1
    c856:	7812      	ldrb	r2, [r2, #0]
    c858:	701a      	strb	r2, [r3, #0]
        while (ix--)
    c85a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c85c:	1e5a      	subs	r2, r3, #1
    c85e:	920b      	str	r2, [sp, #44]	; 0x2c
    c860:	2b00      	cmp	r3, #0
    c862:	d1f2      	bne.n	c84a <uint64_to_hexstr+0x98>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    c864:	9b01      	ldr	r3, [sp, #4]
    c866:	2200      	movs	r2, #0
    c868:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    c86a:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    c86c:	4618      	mov	r0, r3
    c86e:	b00c      	add	sp, #48	; 0x30
    c870:	4770      	bx	lr

0000c872 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    c872:	b084      	sub	sp, #16
    c874:	9001      	str	r0, [sp, #4]
    uint32_t ui32RetVal = 0;
    c876:	2300      	movs	r3, #0
    c878:	9303      	str	r3, [sp, #12]
    if ( !pcBuf )
    c87a:	9b01      	ldr	r3, [sp, #4]
    c87c:	2b00      	cmp	r3, #0
    c87e:	d104      	bne.n	c88a <simple_strlen+0x18>
    {
        return ui32RetVal;
    c880:	9b03      	ldr	r3, [sp, #12]
    c882:	e009      	b.n	c898 <simple_strlen+0x26>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    c884:	9b03      	ldr	r3, [sp, #12]
    c886:	3301      	adds	r3, #1
    c888:	9303      	str	r3, [sp, #12]
    while ( *pcBuf++ )
    c88a:	9b01      	ldr	r3, [sp, #4]
    c88c:	1c5a      	adds	r2, r3, #1
    c88e:	9201      	str	r2, [sp, #4]
    c890:	781b      	ldrb	r3, [r3, #0]
    c892:	2b00      	cmp	r3, #0
    c894:	d1f6      	bne.n	c884 <simple_strlen+0x12>
    }
    return ui32RetVal;
    c896:	9b03      	ldr	r3, [sp, #12]
}
    c898:	4618      	mov	r0, r3
    c89a:	b004      	add	sp, #16
    c89c:	4770      	bx	lr

0000c89e <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    c89e:	b086      	sub	sp, #24
    c8a0:	9003      	str	r0, [sp, #12]
    c8a2:	460b      	mov	r3, r1
    c8a4:	9201      	str	r2, [sp, #4]
    c8a6:	f88d 300b 	strb.w	r3, [sp, #11]
    int32_t i32Cnt = 0;
    c8aa:	2300      	movs	r3, #0
    c8ac:	9305      	str	r3, [sp, #20]

    if ( i32NumChars <= 0 )
    c8ae:	9b01      	ldr	r3, [sp, #4]
    c8b0:	2b00      	cmp	r3, #0
    c8b2:	dc0d      	bgt.n	c8d0 <padbuffer+0x32>
    {
        return i32Cnt;
    c8b4:	9b05      	ldr	r3, [sp, #20]
    c8b6:	e011      	b.n	c8dc <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    c8b8:	9b03      	ldr	r3, [sp, #12]
    c8ba:	2b00      	cmp	r3, #0
    c8bc:	d005      	beq.n	c8ca <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    c8be:	9b03      	ldr	r3, [sp, #12]
    c8c0:	1c5a      	adds	r2, r3, #1
    c8c2:	9203      	str	r2, [sp, #12]
    c8c4:	f89d 200b 	ldrb.w	r2, [sp, #11]
    c8c8:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    c8ca:	9b05      	ldr	r3, [sp, #20]
    c8cc:	3301      	adds	r3, #1
    c8ce:	9305      	str	r3, [sp, #20]
    while ( i32NumChars-- )
    c8d0:	9b01      	ldr	r3, [sp, #4]
    c8d2:	1e5a      	subs	r2, r3, #1
    c8d4:	9201      	str	r2, [sp, #4]
    c8d6:	2b00      	cmp	r3, #0
    c8d8:	d1ee      	bne.n	c8b8 <padbuffer+0x1a>
    }

    return i32Cnt;
    c8da:	9b05      	ldr	r3, [sp, #20]
}
    c8dc:	4618      	mov	r0, r3
    c8de:	b006      	add	sp, #24
    c8e0:	4770      	bx	lr
	...

0000c8e4 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    c8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c8e6:	b08f      	sub	sp, #60	; 0x3c
    c8e8:	ed8d 0a03 	vstr	s0, [sp, #12]
    c8ec:	9002      	str	r0, [sp, #8]
    c8ee:	9101      	str	r1, [sp, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    c8f0:	9b02      	ldr	r3, [sp, #8]
    c8f2:	681b      	ldr	r3, [r3, #0]
    c8f4:	9309      	str	r3, [sp, #36]	; 0x24
    if (iBufSize < 4)
    c8f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c8f8:	2b03      	cmp	r3, #3
    c8fa:	dc02      	bgt.n	c902 <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    c8fc:	f06f 0302 	mvn.w	r3, #2
    c900:	e0e9      	b.n	cad6 <ftoa+0x1f2>
    }

    if (fValue == 0.0f)
    c902:	eddd 7a03 	vldr	s15, [sp, #12]
    c906:	eef5 7a40 	vcmp.f32	s15, #0.0
    c90a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c90e:	d104      	bne.n	c91a <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    c910:	9b02      	ldr	r3, [sp, #8]
    c912:	4a72      	ldr	r2, [pc, #456]	; (cadc <ftoa+0x1f8>)
    c914:	601a      	str	r2, [r3, #0]
        return 3;
    c916:	2303      	movs	r3, #3
    c918:	e0dd      	b.n	cad6 <ftoa+0x1f2>
    }

    pcBufInitial = pcBuf;
    c91a:	9b02      	ldr	r3, [sp, #8]
    c91c:	9308      	str	r3, [sp, #32]

    unFloatValue.F = fValue;
    c91e:	9b03      	ldr	r3, [sp, #12]
    c920:	9304      	str	r3, [sp, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    c922:	9b04      	ldr	r3, [sp, #16]
    c924:	15db      	asrs	r3, r3, #23
    c926:	b2db      	uxtb	r3, r3
    c928:	3b7f      	subs	r3, #127	; 0x7f
    c92a:	9307      	str	r3, [sp, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    c92c:	9b04      	ldr	r3, [sp, #16]
    c92e:	f3c3 0316 	ubfx	r3, r3, #0, #23
    c932:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    c936:	9306      	str	r3, [sp, #24]
    i32FracPart = 0;
    c938:	2300      	movs	r3, #0
    c93a:	930c      	str	r3, [sp, #48]	; 0x30
    i32IntPart = 0;
    c93c:	2300      	movs	r3, #0
    c93e:	930d      	str	r3, [sp, #52]	; 0x34

    if (iExp2 >= 31)
    c940:	9b07      	ldr	r3, [sp, #28]
    c942:	2b1e      	cmp	r3, #30
    c944:	dd02      	ble.n	c94c <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    c946:	f06f 0301 	mvn.w	r3, #1
    c94a:	e0c4      	b.n	cad6 <ftoa+0x1f2>
    }
    else if (iExp2 < -23)
    c94c:	9b07      	ldr	r3, [sp, #28]
    c94e:	f113 0f17 	cmn.w	r3, #23
    c952:	da02      	bge.n	c95a <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    c954:	f04f 33ff 	mov.w	r3, #4294967295
    c958:	e0bd      	b.n	cad6 <ftoa+0x1f2>
    }
    else if (iExp2 >= 23)
    c95a:	9b07      	ldr	r3, [sp, #28]
    c95c:	2b16      	cmp	r3, #22
    c95e:	dd06      	ble.n	c96e <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    c960:	9b07      	ldr	r3, [sp, #28]
    c962:	3b17      	subs	r3, #23
    c964:	9a06      	ldr	r2, [sp, #24]
    c966:	fa02 f303 	lsl.w	r3, r2, r3
    c96a:	930d      	str	r3, [sp, #52]	; 0x34
    c96c:	e01a      	b.n	c9a4 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    c96e:	9b07      	ldr	r3, [sp, #28]
    c970:	2b00      	cmp	r3, #0
    c972:	db0f      	blt.n	c994 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    c974:	9b07      	ldr	r3, [sp, #28]
    c976:	f1c3 0317 	rsb	r3, r3, #23
    c97a:	9a06      	ldr	r2, [sp, #24]
    c97c:	fa42 f303 	asr.w	r3, r2, r3
    c980:	930d      	str	r3, [sp, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    c982:	9b07      	ldr	r3, [sp, #28]
    c984:	3301      	adds	r3, #1
    c986:	9a06      	ldr	r2, [sp, #24]
    c988:	fa02 f303 	lsl.w	r3, r2, r3
    c98c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c990:	930c      	str	r3, [sp, #48]	; 0x30
    c992:	e007      	b.n	c9a4 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    c994:	9b06      	ldr	r3, [sp, #24]
    c996:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    c99a:	9b07      	ldr	r3, [sp, #28]
    c99c:	43db      	mvns	r3, r3
    c99e:	fa42 f303 	asr.w	r3, r2, r3
    c9a2:	930c      	str	r3, [sp, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    c9a4:	9b04      	ldr	r3, [sp, #16]
    c9a6:	2b00      	cmp	r3, #0
    c9a8:	da04      	bge.n	c9b4 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    c9aa:	9b02      	ldr	r3, [sp, #8]
    c9ac:	1c5a      	adds	r2, r3, #1
    c9ae:	9202      	str	r2, [sp, #8]
    c9b0:	222d      	movs	r2, #45	; 0x2d
    c9b2:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    c9b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c9b6:	2b00      	cmp	r3, #0
    c9b8:	d105      	bne.n	c9c6 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    c9ba:	9b02      	ldr	r3, [sp, #8]
    c9bc:	1c5a      	adds	r2, r3, #1
    c9be:	9202      	str	r2, [sp, #8]
    c9c0:	2230      	movs	r2, #48	; 0x30
    c9c2:	701a      	strb	r2, [r3, #0]
    c9c4:	e023      	b.n	ca0e <ftoa+0x12a>
    }
    else
    {
        if (i32IntPart > 0)
    c9c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c9c8:	2b00      	cmp	r3, #0
    c9ca:	dd09      	ble.n	c9e0 <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
    c9cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c9ce:	17da      	asrs	r2, r3, #31
    c9d0:	461e      	mov	r6, r3
    c9d2:	4617      	mov	r7, r2
    c9d4:	9a02      	ldr	r2, [sp, #8]
    c9d6:	4630      	mov	r0, r6
    c9d8:	4639      	mov	r1, r7
    c9da:	f7ff fea5 	bl	c728 <uint64_to_str>
    c9de:	e012      	b.n	ca06 <ftoa+0x122>
        }
        else
        {
            *pcBuf++ = '-';
    c9e0:	9b02      	ldr	r3, [sp, #8]
    c9e2:	1c5a      	adds	r2, r3, #1
    c9e4:	9202      	str	r2, [sp, #8]
    c9e6:	222d      	movs	r2, #45	; 0x2d
    c9e8:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    c9ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c9ec:	425b      	negs	r3, r3
    c9ee:	17da      	asrs	r2, r3, #31
    c9f0:	461c      	mov	r4, r3
    c9f2:	4615      	mov	r5, r2
    c9f4:	9a02      	ldr	r2, [sp, #8]
    c9f6:	4620      	mov	r0, r4
    c9f8:	4629      	mov	r1, r5
    c9fa:	f7ff fe95 	bl	c728 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    c9fe:	e002      	b.n	ca06 <ftoa+0x122>
        {
            pcBuf++;
    ca00:	9b02      	ldr	r3, [sp, #8]
    ca02:	3301      	adds	r3, #1
    ca04:	9302      	str	r3, [sp, #8]
        while (*pcBuf)    // Get to end of new string
    ca06:	9b02      	ldr	r3, [sp, #8]
    ca08:	781b      	ldrb	r3, [r3, #0]
    ca0a:	2b00      	cmp	r3, #0
    ca0c:	d1f8      	bne.n	ca00 <ftoa+0x11c>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    ca0e:	9b02      	ldr	r3, [sp, #8]
    ca10:	1c5a      	adds	r2, r3, #1
    ca12:	9202      	str	r2, [sp, #8]
    ca14:	222e      	movs	r2, #46	; 0x2e
    ca16:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    ca18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ca1a:	2b00      	cmp	r3, #0
    ca1c:	d105      	bne.n	ca2a <ftoa+0x146>
    {
        *pcBuf++ = '0';
    ca1e:	9b02      	ldr	r3, [sp, #8]
    ca20:	1c5a      	adds	r2, r3, #1
    ca22:	9202      	str	r2, [sp, #8]
    ca24:	2230      	movs	r2, #48	; 0x30
    ca26:	701a      	strb	r2, [r3, #0]
    ca28:	e04f      	b.n	caca <ftoa+0x1e6>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    ca2a:	9a02      	ldr	r2, [sp, #8]
    ca2c:	9b08      	ldr	r3, [sp, #32]
    ca2e:	1ad3      	subs	r3, r2, r3
    ca30:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ca32:	1ad3      	subs	r3, r2, r3
    ca34:	3b01      	subs	r3, #1
    ca36:	9305      	str	r3, [sp, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    ca38:	9a05      	ldr	r2, [sp, #20]
    ca3a:	9b01      	ldr	r3, [sp, #4]
    ca3c:	4293      	cmp	r3, r2
    ca3e:	bfa8      	it	ge
    ca40:	4613      	movge	r3, r2
    ca42:	9305      	str	r3, [sp, #20]

        for (jx = 0; jx < iMax; jx++)
    ca44:	2300      	movs	r3, #0
    ca46:	930a      	str	r3, [sp, #40]	; 0x28
    ca48:	e015      	b.n	ca76 <ftoa+0x192>
        {
            i32FracPart *= 10;
    ca4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ca4c:	4613      	mov	r3, r2
    ca4e:	009b      	lsls	r3, r3, #2
    ca50:	4413      	add	r3, r2
    ca52:	005b      	lsls	r3, r3, #1
    ca54:	930c      	str	r3, [sp, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    ca56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ca58:	161b      	asrs	r3, r3, #24
    ca5a:	b2da      	uxtb	r2, r3
    ca5c:	9b02      	ldr	r3, [sp, #8]
    ca5e:	1c59      	adds	r1, r3, #1
    ca60:	9102      	str	r1, [sp, #8]
    ca62:	3230      	adds	r2, #48	; 0x30
    ca64:	b2d2      	uxtb	r2, r2
    ca66:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    ca68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ca6a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ca6e:	930c      	str	r3, [sp, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    ca70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ca72:	3301      	adds	r3, #1
    ca74:	930a      	str	r3, [sp, #40]	; 0x28
    ca76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ca78:	9b05      	ldr	r3, [sp, #20]
    ca7a:	429a      	cmp	r2, r3
    ca7c:	dbe5      	blt.n	ca4a <ftoa+0x166>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    ca7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ca80:	4613      	mov	r3, r2
    ca82:	009b      	lsls	r3, r3, #2
    ca84:	4413      	add	r3, r2
    ca86:	005b      	lsls	r3, r3, #1
    ca88:	161b      	asrs	r3, r3, #24
    ca8a:	2b04      	cmp	r3, #4
    ca8c:	dd1d      	ble.n	caca <ftoa+0x1e6>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    ca8e:	9b02      	ldr	r3, [sp, #8]
    ca90:	3b01      	subs	r3, #1
    ca92:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    ca94:	e015      	b.n	cac2 <ftoa+0x1de>
            {
                if ( *pcBuftmp == '.' )
    ca96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca98:	781b      	ldrb	r3, [r3, #0]
    ca9a:	2b2e      	cmp	r3, #46	; 0x2e
    ca9c:	d00e      	beq.n	cabc <ftoa+0x1d8>
                {
                }
                else if ( *pcBuftmp == '9' )
    ca9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    caa0:	781b      	ldrb	r3, [r3, #0]
    caa2:	2b39      	cmp	r3, #57	; 0x39
    caa4:	d103      	bne.n	caae <ftoa+0x1ca>
                {
                    *pcBuftmp = '0';
    caa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    caa8:	2230      	movs	r2, #48	; 0x30
    caaa:	701a      	strb	r2, [r3, #0]
    caac:	e006      	b.n	cabc <ftoa+0x1d8>
                }
                else
                {
                    *pcBuftmp += 1;
    caae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cab0:	781b      	ldrb	r3, [r3, #0]
    cab2:	3301      	adds	r3, #1
    cab4:	b2da      	uxtb	r2, r3
    cab6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cab8:	701a      	strb	r2, [r3, #0]
                    break;
    caba:	e006      	b.n	caca <ftoa+0x1e6>
                }
                pcBuftmp--;
    cabc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cabe:	3b01      	subs	r3, #1
    cac0:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cac2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cac4:	9b08      	ldr	r3, [sp, #32]
    cac6:	429a      	cmp	r2, r3
    cac8:	d2e5      	bcs.n	ca96 <ftoa+0x1b2>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    caca:	9b02      	ldr	r3, [sp, #8]
    cacc:	2200      	movs	r2, #0
    cace:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    cad0:	9a02      	ldr	r2, [sp, #8]
    cad2:	9b08      	ldr	r3, [sp, #32]
    cad4:	1ad3      	subs	r3, r2, r3
} // ftoa()
    cad6:	4618      	mov	r0, r3
    cad8:	b00f      	add	sp, #60	; 0x3c
    cada:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cadc:	00302e30 	.word	0x00302e30

0000cae0 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    cae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cae4:	b097      	sub	sp, #92	; 0x5c
    cae6:	9003      	str	r0, [sp, #12]
    cae8:	9102      	str	r1, [sp, #8]
    caea:	9201      	str	r2, [sp, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    caec:	2300      	movs	r3, #0
    caee:	9311      	str	r3, [sp, #68]	; 0x44
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    caf0:	2300      	movs	r3, #0
    caf2:	930b      	str	r3, [sp, #44]	; 0x2c

    while ( *pcFmt != 0x0 )
    caf4:	e2e9      	b.n	d0ca <am_util_stdio_vsprintf+0x5ea>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    caf6:	2306      	movs	r3, #6
    caf8:	930e      	str	r3, [sp, #56]	; 0x38

        if ( *pcFmt != '%' )
    cafa:	9b02      	ldr	r3, [sp, #8]
    cafc:	781b      	ldrb	r3, [r3, #0]
    cafe:	2b25      	cmp	r3, #37	; 0x25
    cb00:	d01f      	beq.n	cb42 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    cb02:	9b03      	ldr	r3, [sp, #12]
    cb04:	2b00      	cmp	r3, #0
    cb06:	d015      	beq.n	cb34 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    cb08:	9b02      	ldr	r3, [sp, #8]
    cb0a:	781b      	ldrb	r3, [r3, #0]
    cb0c:	2b0a      	cmp	r3, #10
    cb0e:	d10b      	bne.n	cb28 <am_util_stdio_vsprintf+0x48>
    cb10:	4ba8      	ldr	r3, [pc, #672]	; (cdb4 <am_util_stdio_vsprintf+0x2d4>)
    cb12:	781b      	ldrb	r3, [r3, #0]
    cb14:	2b00      	cmp	r3, #0
    cb16:	d007      	beq.n	cb28 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    cb18:	9b03      	ldr	r3, [sp, #12]
    cb1a:	1c5a      	adds	r2, r3, #1
    cb1c:	9203      	str	r2, [sp, #12]
    cb1e:	220d      	movs	r2, #13
    cb20:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    cb22:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cb24:	3301      	adds	r3, #1
    cb26:	9311      	str	r3, [sp, #68]	; 0x44
                }
                *pcBuf++ = *pcFmt;
    cb28:	9b03      	ldr	r3, [sp, #12]
    cb2a:	1c5a      	adds	r2, r3, #1
    cb2c:	9203      	str	r2, [sp, #12]
    cb2e:	9a02      	ldr	r2, [sp, #8]
    cb30:	7812      	ldrb	r2, [r2, #0]
    cb32:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    cb34:	9b02      	ldr	r3, [sp, #8]
    cb36:	3301      	adds	r3, #1
    cb38:	9302      	str	r3, [sp, #8]
            ++ui32CharCnt;
    cb3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cb3c:	3301      	adds	r3, #1
    cb3e:	9311      	str	r3, [sp, #68]	; 0x44
            continue;
    cb40:	e2c3      	b.n	d0ca <am_util_stdio_vsprintf+0x5ea>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    cb42:	9b02      	ldr	r3, [sp, #8]
    cb44:	3301      	adds	r3, #1
    cb46:	9302      	str	r3, [sp, #8]
        bLower = bLongLong = false;
    cb48:	2300      	movs	r3, #0
    cb4a:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    cb4e:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    cb52:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    cb56:	2320      	movs	r3, #32
    cb58:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

        if ( *pcFmt == '0' )
    cb5c:	9b02      	ldr	r3, [sp, #8]
    cb5e:	781b      	ldrb	r3, [r3, #0]
    cb60:	2b30      	cmp	r3, #48	; 0x30
    cb62:	d105      	bne.n	cb70 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    cb64:	2330      	movs	r3, #48	; 0x30
    cb66:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
            ++pcFmt;
    cb6a:	9b02      	ldr	r3, [sp, #8]
    cb6c:	3301      	adds	r3, #1
    cb6e:	9302      	str	r3, [sp, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    cb70:	ab05      	add	r3, sp, #20
    cb72:	4619      	mov	r1, r3
    cb74:	9802      	ldr	r0, [sp, #8]
    cb76:	f7ff fd93 	bl	c6a0 <decstr_to_int>
    cb7a:	4603      	mov	r3, r0
    cb7c:	9310      	str	r3, [sp, #64]	; 0x40
        pcFmt += ui32NumChars;
    cb7e:	9b05      	ldr	r3, [sp, #20]
    cb80:	9a02      	ldr	r2, [sp, #8]
    cb82:	4413      	add	r3, r2
    cb84:	9302      	str	r3, [sp, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    cb86:	9b02      	ldr	r3, [sp, #8]
    cb88:	781b      	ldrb	r3, [r3, #0]
    cb8a:	2b73      	cmp	r3, #115	; 0x73
    cb8c:	d005      	beq.n	cb9a <am_util_stdio_vsprintf+0xba>
    cb8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cb90:	2b00      	cmp	r3, #0
    cb92:	da02      	bge.n	cb9a <am_util_stdio_vsprintf+0xba>
        {
            iWidth = -iWidth;
    cb94:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cb96:	425b      	negs	r3, r3
    cb98:	9310      	str	r3, [sp, #64]	; 0x40
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    cb9a:	9b02      	ldr	r3, [sp, #8]
    cb9c:	781b      	ldrb	r3, [r3, #0]
    cb9e:	2b2e      	cmp	r3, #46	; 0x2e
    cba0:	d10d      	bne.n	cbbe <am_util_stdio_vsprintf+0xde>
        {
            ++pcFmt;
    cba2:	9b02      	ldr	r3, [sp, #8]
    cba4:	3301      	adds	r3, #1
    cba6:	9302      	str	r3, [sp, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    cba8:	ab05      	add	r3, sp, #20
    cbaa:	4619      	mov	r1, r3
    cbac:	9802      	ldr	r0, [sp, #8]
    cbae:	f7ff fd77 	bl	c6a0 <decstr_to_int>
    cbb2:	4603      	mov	r3, r0
    cbb4:	930e      	str	r3, [sp, #56]	; 0x38
            pcFmt += ui32NumChars;
    cbb6:	9b05      	ldr	r3, [sp, #20]
    cbb8:	9a02      	ldr	r2, [sp, #8]
    cbba:	4413      	add	r3, r2
    cbbc:	9302      	str	r3, [sp, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    cbbe:	9b02      	ldr	r3, [sp, #8]
    cbc0:	781b      	ldrb	r3, [r3, #0]
    cbc2:	2b6c      	cmp	r3, #108	; 0x6c
    cbc4:	d10c      	bne.n	cbe0 <am_util_stdio_vsprintf+0x100>
        {
            pcFmt++;
    cbc6:	9b02      	ldr	r3, [sp, #8]
    cbc8:	3301      	adds	r3, #1
    cbca:	9302      	str	r3, [sp, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    cbcc:	9b02      	ldr	r3, [sp, #8]
    cbce:	781b      	ldrb	r3, [r3, #0]
    cbd0:	2b6c      	cmp	r3, #108	; 0x6c
    cbd2:	d105      	bne.n	cbe0 <am_util_stdio_vsprintf+0x100>
            {
                pcFmt++;
    cbd4:	9b02      	ldr	r3, [sp, #8]
    cbd6:	3301      	adds	r3, #1
    cbd8:	9302      	str	r3, [sp, #8]
                bLongLong = true;
    cbda:	2301      	movs	r3, #1
    cbdc:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
            }
        }

        switch ( *pcFmt )
    cbe0:	9b02      	ldr	r3, [sp, #8]
    cbe2:	781b      	ldrb	r3, [r3, #0]
    cbe4:	3b46      	subs	r3, #70	; 0x46
    cbe6:	2b32      	cmp	r3, #50	; 0x32
    cbe8:	f200 825c 	bhi.w	d0a4 <am_util_stdio_vsprintf+0x5c4>
    cbec:	a201      	add	r2, pc, #4	; (adr r2, cbf4 <am_util_stdio_vsprintf+0x114>)
    cbee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cbf2:	bf00      	nop
    cbf4:	0000d02b 	.word	0x0000d02b
    cbf8:	0000d0a5 	.word	0x0000d0a5
    cbfc:	0000d0a5 	.word	0x0000d0a5
    cc00:	0000d0a5 	.word	0x0000d0a5
    cc04:	0000d0a5 	.word	0x0000d0a5
    cc08:	0000d0a5 	.word	0x0000d0a5
    cc0c:	0000d0a5 	.word	0x0000d0a5
    cc10:	0000d0a5 	.word	0x0000d0a5
    cc14:	0000d0a5 	.word	0x0000d0a5
    cc18:	0000d0a5 	.word	0x0000d0a5
    cc1c:	0000d0a5 	.word	0x0000d0a5
    cc20:	0000d0a5 	.word	0x0000d0a5
    cc24:	0000d0a5 	.word	0x0000d0a5
    cc28:	0000d0a5 	.word	0x0000d0a5
    cc2c:	0000d0a5 	.word	0x0000d0a5
    cc30:	0000d0a5 	.word	0x0000d0a5
    cc34:	0000d0a5 	.word	0x0000d0a5
    cc38:	0000d0a5 	.word	0x0000d0a5
    cc3c:	0000cdbf 	.word	0x0000cdbf
    cc40:	0000d0a5 	.word	0x0000d0a5
    cc44:	0000d0a5 	.word	0x0000d0a5
    cc48:	0000d0a5 	.word	0x0000d0a5
    cc4c:	0000d0a5 	.word	0x0000d0a5
    cc50:	0000d0a5 	.word	0x0000d0a5
    cc54:	0000d0a5 	.word	0x0000d0a5
    cc58:	0000d0a5 	.word	0x0000d0a5
    cc5c:	0000d0a5 	.word	0x0000d0a5
    cc60:	0000d0a5 	.word	0x0000d0a5
    cc64:	0000d0a5 	.word	0x0000d0a5
    cc68:	0000ccc1 	.word	0x0000ccc1
    cc6c:	0000ceef 	.word	0x0000ceef
    cc70:	0000d0a5 	.word	0x0000d0a5
    cc74:	0000d02b 	.word	0x0000d02b
    cc78:	0000d0a5 	.word	0x0000d0a5
    cc7c:	0000d0a5 	.word	0x0000d0a5
    cc80:	0000ceef 	.word	0x0000ceef
    cc84:	0000d0a5 	.word	0x0000d0a5
    cc88:	0000d0a5 	.word	0x0000d0a5
    cc8c:	0000d0a5 	.word	0x0000d0a5
    cc90:	0000d0a5 	.word	0x0000d0a5
    cc94:	0000d0a5 	.word	0x0000d0a5
    cc98:	0000d0a5 	.word	0x0000d0a5
    cc9c:	0000d0a5 	.word	0x0000d0a5
    cca0:	0000d0a5 	.word	0x0000d0a5
    cca4:	0000d0a5 	.word	0x0000d0a5
    cca8:	0000cce7 	.word	0x0000cce7
    ccac:	0000d0a5 	.word	0x0000d0a5
    ccb0:	0000ce59 	.word	0x0000ce59
    ccb4:	0000d0a5 	.word	0x0000d0a5
    ccb8:	0000d0a5 	.word	0x0000d0a5
    ccbc:	0000cdb9 	.word	0x0000cdb9
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    ccc0:	9b01      	ldr	r3, [sp, #4]
    ccc2:	1d1a      	adds	r2, r3, #4
    ccc4:	9201      	str	r2, [sp, #4]
    ccc6:	681b      	ldr	r3, [r3, #0]
    ccc8:	f88d 301f 	strb.w	r3, [sp, #31]

                if ( pcBuf )
    cccc:	9b03      	ldr	r3, [sp, #12]
    ccce:	2b00      	cmp	r3, #0
    ccd0:	d005      	beq.n	ccde <am_util_stdio_vsprintf+0x1fe>
                {
                    *pcBuf++ = ui8CharSpecifier;
    ccd2:	9b03      	ldr	r3, [sp, #12]
    ccd4:	1c5a      	adds	r2, r3, #1
    ccd6:	9203      	str	r2, [sp, #12]
    ccd8:	f89d 201f 	ldrb.w	r2, [sp, #31]
    ccdc:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    ccde:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cce0:	3301      	adds	r3, #1
    cce2:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    cce4:	e1ee      	b.n	d0c4 <am_util_stdio_vsprintf+0x5e4>

            case 's':
                pcStr = va_arg(pArgs, char *);
    cce6:	9b01      	ldr	r3, [sp, #4]
    cce8:	1d1a      	adds	r2, r3, #4
    ccea:	9201      	str	r2, [sp, #4]
    ccec:	681b      	ldr	r3, [r3, #0]
    ccee:	9315      	str	r3, [sp, #84]	; 0x54
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    ccf0:	9815      	ldr	r0, [sp, #84]	; 0x54
    ccf2:	f7ff fdbe 	bl	c872 <simple_strlen>
    ccf6:	900b      	str	r0, [sp, #44]	; 0x2c
                if ( iWidth > 0 )
    ccf8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ccfa:	2b00      	cmp	r3, #0
    ccfc:	dd2e      	ble.n	cd5c <am_util_stdio_vsprintf+0x27c>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    ccfe:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cd00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cd02:	429a      	cmp	r2, r3
    cd04:	d22a      	bcs.n	cd5c <am_util_stdio_vsprintf+0x27c>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cd06:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cd08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cd0a:	1ad3      	subs	r3, r2, r3
    cd0c:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cd0e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cd12:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cd14:	4619      	mov	r1, r3
    cd16:	9803      	ldr	r0, [sp, #12]
    cd18:	f7ff fdc1 	bl	c89e <padbuffer>
    cd1c:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    cd1e:	9b03      	ldr	r3, [sp, #12]
    cd20:	2b00      	cmp	r3, #0
    cd22:	d001      	beq.n	cd28 <am_util_stdio_vsprintf+0x248>
    cd24:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cd26:	e000      	b.n	cd2a <am_util_stdio_vsprintf+0x24a>
    cd28:	2300      	movs	r3, #0
    cd2a:	9a03      	ldr	r2, [sp, #12]
    cd2c:	4413      	add	r3, r2
    cd2e:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    cd30:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cd32:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cd34:	4413      	add	r3, r2
    cd36:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    cd38:	2300      	movs	r3, #0
    cd3a:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }

                while (*pcStr != 0x0)
    cd3c:	e00e      	b.n	cd5c <am_util_stdio_vsprintf+0x27c>
                {
                    if ( pcBuf )
    cd3e:	9b03      	ldr	r3, [sp, #12]
    cd40:	2b00      	cmp	r3, #0
    cd42:	d005      	beq.n	cd50 <am_util_stdio_vsprintf+0x270>
                    {
                        *pcBuf++ = *pcStr;
    cd44:	9b03      	ldr	r3, [sp, #12]
    cd46:	1c5a      	adds	r2, r3, #1
    cd48:	9203      	str	r2, [sp, #12]
    cd4a:	9a15      	ldr	r2, [sp, #84]	; 0x54
    cd4c:	7812      	ldrb	r2, [r2, #0]
    cd4e:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    cd50:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cd52:	3301      	adds	r3, #1
    cd54:	9315      	str	r3, [sp, #84]	; 0x54
                    ++ui32CharCnt;
    cd56:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cd58:	3301      	adds	r3, #1
    cd5a:	9311      	str	r3, [sp, #68]	; 0x44
                while (*pcStr != 0x0)
    cd5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cd5e:	781b      	ldrb	r3, [r3, #0]
    cd60:	2b00      	cmp	r3, #0
    cd62:	d1ec      	bne.n	cd3e <am_util_stdio_vsprintf+0x25e>
                }

                if ( iWidth )
    cd64:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cd66:	2b00      	cmp	r3, #0
    cd68:	f000 81a9 	beq.w	d0be <am_util_stdio_vsprintf+0x5de>
                {
                    iWidth = -iWidth;
    cd6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cd6e:	425b      	negs	r3, r3
    cd70:	9310      	str	r3, [sp, #64]	; 0x40

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    cd72:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cd74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cd76:	429a      	cmp	r2, r3
    cd78:	f080 81a1 	bcs.w	d0be <am_util_stdio_vsprintf+0x5de>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cd7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cd7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cd80:	1ad3      	subs	r3, r2, r3
    cd82:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cd84:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cd88:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cd8a:	4619      	mov	r1, r3
    cd8c:	9803      	ldr	r0, [sp, #12]
    cd8e:	f7ff fd86 	bl	c89e <padbuffer>
    cd92:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    cd94:	9b03      	ldr	r3, [sp, #12]
    cd96:	2b00      	cmp	r3, #0
    cd98:	d001      	beq.n	cd9e <am_util_stdio_vsprintf+0x2be>
    cd9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cd9c:	e000      	b.n	cda0 <am_util_stdio_vsprintf+0x2c0>
    cd9e:	2300      	movs	r3, #0
    cda0:	9a03      	ldr	r2, [sp, #12]
    cda2:	4413      	add	r3, r2
    cda4:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    cda6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cda8:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cdaa:	4413      	add	r3, r2
    cdac:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    cdae:	2300      	movs	r3, #0
    cdb0:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }
                break;
    cdb2:	e184      	b.n	d0be <am_util_stdio_vsprintf+0x5de>
    cdb4:	1000114c 	.word	0x1000114c

            case 'x':
                bLower = true;
    cdb8:	2301      	movs	r3, #1
    cdba:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cdbe:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    cdc2:	2b00      	cmp	r3, #0
    cdc4:	d009      	beq.n	cdda <am_util_stdio_vsprintf+0x2fa>
    cdc6:	9b01      	ldr	r3, [sp, #4]
    cdc8:	3307      	adds	r3, #7
    cdca:	f023 0307 	bic.w	r3, r3, #7
    cdce:	f103 0208 	add.w	r2, r3, #8
    cdd2:	9201      	str	r2, [sp, #4]
    cdd4:	e9d3 4500 	ldrd	r4, r5, [r3]
    cdd8:	e006      	b.n	cde8 <am_util_stdio_vsprintf+0x308>
                                      va_arg(pArgs, uint32_t);
    cdda:	9b01      	ldr	r3, [sp, #4]
    cddc:	1d1a      	adds	r2, r3, #4
    cdde:	9201      	str	r2, [sp, #4]
    cde0:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cde2:	2200      	movs	r2, #0
    cde4:	461c      	mov	r4, r3
    cde6:	4615      	mov	r5, r2
    cde8:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48

                if ( iWidth )
    cdec:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cdee:	2b00      	cmp	r3, #0
    cdf0:	d01e      	beq.n	ce30 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    cdf2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    cdf6:	f7ff fc2f 	bl	c658 <ndigits_in_hex>
    cdfa:	4602      	mov	r2, r0
    cdfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cdfe:	1a9b      	subs	r3, r3, r2
    ce00:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    ce02:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    ce06:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ce08:	4619      	mov	r1, r3
    ce0a:	9803      	ldr	r0, [sp, #12]
    ce0c:	f7ff fd47 	bl	c89e <padbuffer>
    ce10:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    ce12:	9b03      	ldr	r3, [sp, #12]
    ce14:	2b00      	cmp	r3, #0
    ce16:	d001      	beq.n	ce1c <am_util_stdio_vsprintf+0x33c>
    ce18:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce1a:	e000      	b.n	ce1e <am_util_stdio_vsprintf+0x33e>
    ce1c:	2300      	movs	r3, #0
    ce1e:	9a03      	ldr	r2, [sp, #12]
    ce20:	4413      	add	r3, r2
    ce22:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    ce24:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce26:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ce28:	4413      	add	r3, r2
    ce2a:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    ce2c:	2300      	movs	r3, #0
    ce2e:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    ce30:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    ce34:	9a03      	ldr	r2, [sp, #12]
    ce36:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    ce3a:	f7ff fcba 	bl	c7b2 <uint64_to_hexstr>
    ce3e:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    ce40:	9b03      	ldr	r3, [sp, #12]
    ce42:	2b00      	cmp	r3, #0
    ce44:	d003      	beq.n	ce4e <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    ce46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ce48:	9a03      	ldr	r2, [sp, #12]
    ce4a:	4413      	add	r3, r2
    ce4c:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    ce4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ce50:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ce52:	4413      	add	r3, r2
    ce54:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    ce56:	e135      	b.n	d0c4 <am_util_stdio_vsprintf+0x5e4>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    ce58:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    ce5c:	2b00      	cmp	r3, #0
    ce5e:	d009      	beq.n	ce74 <am_util_stdio_vsprintf+0x394>
    ce60:	9b01      	ldr	r3, [sp, #4]
    ce62:	3307      	adds	r3, #7
    ce64:	f023 0307 	bic.w	r3, r3, #7
    ce68:	f103 0208 	add.w	r2, r3, #8
    ce6c:	9201      	str	r2, [sp, #4]
    ce6e:	e9d3 6700 	ldrd	r6, r7, [r3]
    ce72:	e006      	b.n	ce82 <am_util_stdio_vsprintf+0x3a2>
                                      va_arg(pArgs, uint32_t);
    ce74:	9b01      	ldr	r3, [sp, #4]
    ce76:	1d1a      	adds	r2, r3, #4
    ce78:	9201      	str	r2, [sp, #4]
    ce7a:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    ce7c:	2200      	movs	r2, #0
    ce7e:	461e      	mov	r6, r3
    ce80:	4617      	mov	r7, r2
    ce82:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48

                if ( iWidth )
    ce86:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce88:	2b00      	cmp	r3, #0
    ce8a:	d01e      	beq.n	ceca <am_util_stdio_vsprintf+0x3ea>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    ce8c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    ce90:	f7ff fba8 	bl	c5e4 <ndigits_in_u64>
    ce94:	4602      	mov	r2, r0
    ce96:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce98:	1a9b      	subs	r3, r3, r2
    ce9a:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    ce9c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cea0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cea2:	4619      	mov	r1, r3
    cea4:	9803      	ldr	r0, [sp, #12]
    cea6:	f7ff fcfa 	bl	c89e <padbuffer>
    ceaa:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    ceac:	9b03      	ldr	r3, [sp, #12]
    ceae:	2b00      	cmp	r3, #0
    ceb0:	d001      	beq.n	ceb6 <am_util_stdio_vsprintf+0x3d6>
    ceb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ceb4:	e000      	b.n	ceb8 <am_util_stdio_vsprintf+0x3d8>
    ceb6:	2300      	movs	r3, #0
    ceb8:	9a03      	ldr	r2, [sp, #12]
    ceba:	4413      	add	r3, r2
    cebc:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    cebe:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cec0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cec2:	4413      	add	r3, r2
    cec4:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    cec6:	2300      	movs	r3, #0
    cec8:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    ceca:	9a03      	ldr	r2, [sp, #12]
    cecc:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    ced0:	f7ff fc2a 	bl	c728 <uint64_to_str>
    ced4:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    ced6:	9b03      	ldr	r3, [sp, #12]
    ced8:	2b00      	cmp	r3, #0
    ceda:	d003      	beq.n	cee4 <am_util_stdio_vsprintf+0x404>
                {
                    pcBuf += iVal;
    cedc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cede:	9a03      	ldr	r2, [sp, #12]
    cee0:	4413      	add	r3, r2
    cee2:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    cee4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cee6:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cee8:	4413      	add	r3, r2
    ceea:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    ceec:	e0ea      	b.n	d0c4 <am_util_stdio_vsprintf+0x5e4>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    ceee:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    cef2:	2b00      	cmp	r3, #0
    cef4:	d009      	beq.n	cf0a <am_util_stdio_vsprintf+0x42a>
    cef6:	9b01      	ldr	r3, [sp, #4]
    cef8:	3307      	adds	r3, #7
    cefa:	f023 0307 	bic.w	r3, r3, #7
    cefe:	f103 0208 	add.w	r2, r3, #8
    cf02:	9201      	str	r2, [sp, #4]
    cf04:	e9d3 8900 	ldrd	r8, r9, [r3]
    cf08:	e006      	b.n	cf18 <am_util_stdio_vsprintf+0x438>
                                     va_arg(pArgs, int32_t);
    cf0a:	9b01      	ldr	r3, [sp, #4]
    cf0c:	1d1a      	adds	r2, r3, #4
    cf0e:	9201      	str	r2, [sp, #4]
    cf10:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cf12:	17da      	asrs	r2, r3, #31
    cf14:	4698      	mov	r8, r3
    cf16:	4691      	mov	r9, r2
    cf18:	e9cd 8908 	strd	r8, r9, [sp, #32]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    cf1c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    cf20:	2b00      	cmp	r3, #0
    cf22:	da0c      	bge.n	cf3e <am_util_stdio_vsprintf+0x45e>
                {
                    ui64Val = -i64Val;          // Get absolute value
    cf24:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    cf28:	2100      	movs	r1, #0
    cf2a:	f1d2 0a00 	rsbs	sl, r2, #0
    cf2e:	eb61 0b03 	sbc.w	fp, r1, r3
    cf32:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
                    bNeg = true;
    cf36:	2301      	movs	r3, #1
    cf38:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    cf3c:	e006      	b.n	cf4c <am_util_stdio_vsprintf+0x46c>
                }
                else
                {
                    ui64Val = i64Val;
    cf3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    cf42:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
                    bNeg = false;
    cf46:	2300      	movs	r3, #0
    cf48:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                }

                if ( iWidth )
    cf4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf4e:	2b00      	cmp	r3, #0
    cf50:	d04a      	beq.n	cfe8 <am_util_stdio_vsprintf+0x508>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    cf52:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cf56:	4610      	mov	r0, r2
    cf58:	4619      	mov	r1, r3
    cf5a:	f7ff fb63 	bl	c624 <ndigits_in_i64>
    cf5e:	4602      	mov	r2, r0
    cf60:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf62:	1a9b      	subs	r3, r3, r2
    cf64:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg )
    cf66:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    cf6a:	2b00      	cmp	r3, #0
    cf6c:	d011      	beq.n	cf92 <am_util_stdio_vsprintf+0x4b2>
                    {
                        --iWidth;
    cf6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf70:	3b01      	subs	r3, #1
    cf72:	9310      	str	r3, [sp, #64]	; 0x40

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    cf74:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cf78:	2b30      	cmp	r3, #48	; 0x30
    cf7a:	d10a      	bne.n	cf92 <am_util_stdio_vsprintf+0x4b2>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    cf7c:	9b03      	ldr	r3, [sp, #12]
    cf7e:	2b00      	cmp	r3, #0
    cf80:	d004      	beq.n	cf8c <am_util_stdio_vsprintf+0x4ac>
                            {
                                *pcBuf++ = '-';
    cf82:	9b03      	ldr	r3, [sp, #12]
    cf84:	1c5a      	adds	r2, r3, #1
    cf86:	9203      	str	r2, [sp, #12]
    cf88:	222d      	movs	r2, #45	; 0x2d
    cf8a:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    cf8c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cf8e:	3301      	adds	r3, #1
    cf90:	9311      	str	r3, [sp, #68]	; 0x44
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cf92:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cf96:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cf98:	4619      	mov	r1, r3
    cf9a:	9803      	ldr	r0, [sp, #12]
    cf9c:	f7ff fc7f 	bl	c89e <padbuffer>
    cfa0:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    cfa2:	9b03      	ldr	r3, [sp, #12]
    cfa4:	2b00      	cmp	r3, #0
    cfa6:	d001      	beq.n	cfac <am_util_stdio_vsprintf+0x4cc>
    cfa8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfaa:	e000      	b.n	cfae <am_util_stdio_vsprintf+0x4ce>
    cfac:	2300      	movs	r3, #0
    cfae:	9a03      	ldr	r2, [sp, #12]
    cfb0:	4413      	add	r3, r2
    cfb2:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    cfb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfb6:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cfb8:	4413      	add	r3, r2
    cfba:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    cfbc:	2300      	movs	r3, #0
    cfbe:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    cfc0:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    cfc4:	2b00      	cmp	r3, #0
    cfc6:	d01e      	beq.n	d006 <am_util_stdio_vsprintf+0x526>
    cfc8:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cfcc:	2b20      	cmp	r3, #32
    cfce:	d11a      	bne.n	d006 <am_util_stdio_vsprintf+0x526>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    cfd0:	9b03      	ldr	r3, [sp, #12]
    cfd2:	2b00      	cmp	r3, #0
    cfd4:	d004      	beq.n	cfe0 <am_util_stdio_vsprintf+0x500>
                        {
                            *pcBuf++ = '-';
    cfd6:	9b03      	ldr	r3, [sp, #12]
    cfd8:	1c5a      	adds	r2, r3, #1
    cfda:	9203      	str	r2, [sp, #12]
    cfdc:	222d      	movs	r2, #45	; 0x2d
    cfde:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    cfe0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cfe2:	3301      	adds	r3, #1
    cfe4:	9311      	str	r3, [sp, #68]	; 0x44
    cfe6:	e00e      	b.n	d006 <am_util_stdio_vsprintf+0x526>
                    }
                }
                else
                {
                    if ( bNeg )
    cfe8:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    cfec:	2b00      	cmp	r3, #0
    cfee:	d00a      	beq.n	d006 <am_util_stdio_vsprintf+0x526>
                    {
                        if ( pcBuf )
    cff0:	9b03      	ldr	r3, [sp, #12]
    cff2:	2b00      	cmp	r3, #0
    cff4:	d004      	beq.n	d000 <am_util_stdio_vsprintf+0x520>
                        {
                            *pcBuf++ = '-';
    cff6:	9b03      	ldr	r3, [sp, #12]
    cff8:	1c5a      	adds	r2, r3, #1
    cffa:	9203      	str	r2, [sp, #12]
    cffc:	222d      	movs	r2, #45	; 0x2d
    cffe:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    d000:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d002:	3301      	adds	r3, #1
    d004:	9311      	str	r3, [sp, #68]	; 0x44
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d006:	9a03      	ldr	r2, [sp, #12]
    d008:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d00c:	f7ff fb8c 	bl	c728 <uint64_to_str>
    d010:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d012:	9b03      	ldr	r3, [sp, #12]
    d014:	2b00      	cmp	r3, #0
    d016:	d003      	beq.n	d020 <am_util_stdio_vsprintf+0x540>
                {
                    pcBuf += iVal;
    d018:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d01a:	9a03      	ldr	r2, [sp, #12]
    d01c:	4413      	add	r3, r2
    d01e:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d020:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d022:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d024:	4413      	add	r3, r2
    d026:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d028:	e04c      	b.n	d0c4 <am_util_stdio_vsprintf+0x5e4>


            case 'f':
            case 'F':
                if ( pcBuf )
    d02a:	9b03      	ldr	r3, [sp, #12]
    d02c:	2b00      	cmp	r3, #0
    d02e:	d048      	beq.n	d0c2 <am_util_stdio_vsprintf+0x5e2>
                {
                    float fValue = va_arg(pArgs, double);
    d030:	9b01      	ldr	r3, [sp, #4]
    d032:	3307      	adds	r3, #7
    d034:	f023 0307 	bic.w	r3, r3, #7
    d038:	f103 0208 	add.w	r2, r3, #8
    d03c:	9201      	str	r2, [sp, #4]
    d03e:	e9d3 2300 	ldrd	r2, r3, [r3]
    d042:	4610      	mov	r0, r2
    d044:	4619      	mov	r1, r3
    d046:	f7ff f85b 	bl	c100 <__aeabi_d2f>
    d04a:	4603      	mov	r3, r0
    d04c:	9306      	str	r3, [sp, #24]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    d04e:	9b03      	ldr	r3, [sp, #12]
    d050:	2214      	movs	r2, #20
    d052:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    d054:	990e      	ldr	r1, [sp, #56]	; 0x38
    d056:	9803      	ldr	r0, [sp, #12]
    d058:	ed9d 0a06 	vldr	s0, [sp, #24]
    d05c:	f7ff fc42 	bl	c8e4 <ftoa>
    d060:	900f      	str	r0, [sp, #60]	; 0x3c
                    if ( iVal < 0 )
    d062:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d064:	2b00      	cmp	r3, #0
    d066:	da14      	bge.n	d092 <am_util_stdio_vsprintf+0x5b2>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d068:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d06a:	f1b3 3fff 	cmp.w	r3, #4294967295
    d06e:	d102      	bne.n	d076 <am_util_stdio_vsprintf+0x596>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d070:	4b1e      	ldr	r3, [pc, #120]	; (d0ec <am_util_stdio_vsprintf+0x60c>)
    d072:	930c      	str	r3, [sp, #48]	; 0x30
    d074:	e008      	b.n	d088 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d076:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d078:	f113 0f02 	cmn.w	r3, #2
    d07c:	d102      	bne.n	d084 <am_util_stdio_vsprintf+0x5a4>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d07e:	4b1c      	ldr	r3, [pc, #112]	; (d0f0 <am_util_stdio_vsprintf+0x610>)
    d080:	930c      	str	r3, [sp, #48]	; 0x30
    d082:	e001      	b.n	d088 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d084:	4b1b      	ldr	r3, [pc, #108]	; (d0f4 <am_util_stdio_vsprintf+0x614>)
    d086:	930c      	str	r3, [sp, #48]	; 0x30
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d088:	9b03      	ldr	r3, [sp, #12]
    d08a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d08c:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    d08e:	2303      	movs	r3, #3
    d090:	930f      	str	r3, [sp, #60]	; 0x3c
                    }
                    ui32CharCnt += iVal;
    d092:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d094:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d096:	4413      	add	r3, r2
    d098:	9311      	str	r3, [sp, #68]	; 0x44
                    pcBuf += iVal;
    d09a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d09c:	9a03      	ldr	r2, [sp, #12]
    d09e:	4413      	add	r3, r2
    d0a0:	9303      	str	r3, [sp, #12]
                }
                break;
    d0a2:	e00e      	b.n	d0c2 <am_util_stdio_vsprintf+0x5e2>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d0a4:	9b03      	ldr	r3, [sp, #12]
    d0a6:	2b00      	cmp	r3, #0
    d0a8:	d005      	beq.n	d0b6 <am_util_stdio_vsprintf+0x5d6>
                {
                    *pcBuf++ = *pcFmt;
    d0aa:	9b03      	ldr	r3, [sp, #12]
    d0ac:	1c5a      	adds	r2, r3, #1
    d0ae:	9203      	str	r2, [sp, #12]
    d0b0:	9a02      	ldr	r2, [sp, #8]
    d0b2:	7812      	ldrb	r2, [r2, #0]
    d0b4:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d0b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d0b8:	3301      	adds	r3, #1
    d0ba:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d0bc:	e002      	b.n	d0c4 <am_util_stdio_vsprintf+0x5e4>
                break;
    d0be:	bf00      	nop
    d0c0:	e000      	b.n	d0c4 <am_util_stdio_vsprintf+0x5e4>
                break;
    d0c2:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d0c4:	9b02      	ldr	r3, [sp, #8]
    d0c6:	3301      	adds	r3, #1
    d0c8:	9302      	str	r3, [sp, #8]
    while ( *pcFmt != 0x0 )
    d0ca:	9b02      	ldr	r3, [sp, #8]
    d0cc:	781b      	ldrb	r3, [r3, #0]
    d0ce:	2b00      	cmp	r3, #0
    d0d0:	f47f ad11 	bne.w	caf6 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d0d4:	9b03      	ldr	r3, [sp, #12]
    d0d6:	2b00      	cmp	r3, #0
    d0d8:	d002      	beq.n	d0e0 <am_util_stdio_vsprintf+0x600>
    {
        *pcBuf = 0x0;
    d0da:	9b03      	ldr	r3, [sp, #12]
    d0dc:	2200      	movs	r2, #0
    d0de:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d0e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    d0e2:	4618      	mov	r0, r3
    d0e4:	b017      	add	sp, #92	; 0x5c
    d0e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d0ea:	bf00      	nop
    d0ec:	00302e30 	.word	0x00302e30
    d0f0:	00232e23 	.word	0x00232e23
    d0f4:	003f2e3f 	.word	0x003f2e3f

0000d0f8 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d0f8:	b40f      	push	{r0, r1, r2, r3}
    d0fa:	b500      	push	{lr}
    d0fc:	b083      	sub	sp, #12
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d0fe:	4b0c      	ldr	r3, [pc, #48]	; (d130 <am_util_stdio_printf+0x38>)
    d100:	681b      	ldr	r3, [r3, #0]
    d102:	2b00      	cmp	r3, #0
    d104:	d101      	bne.n	d10a <am_util_stdio_printf+0x12>
    {
        return 0;
    d106:	2300      	movs	r3, #0
    d108:	e00c      	b.n	d124 <am_util_stdio_printf+0x2c>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d10a:	ab05      	add	r3, sp, #20
    d10c:	9300      	str	r3, [sp, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d10e:	9a00      	ldr	r2, [sp, #0]
    d110:	9904      	ldr	r1, [sp, #16]
    d112:	4808      	ldr	r0, [pc, #32]	; (d134 <am_util_stdio_printf+0x3c>)
    d114:	f7ff fce4 	bl	cae0 <am_util_stdio_vsprintf>
    d118:	9001      	str	r0, [sp, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d11a:	4b05      	ldr	r3, [pc, #20]	; (d130 <am_util_stdio_printf+0x38>)
    d11c:	681b      	ldr	r3, [r3, #0]
    d11e:	4805      	ldr	r0, [pc, #20]	; (d134 <am_util_stdio_printf+0x3c>)
    d120:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d122:	9b01      	ldr	r3, [sp, #4]
}
    d124:	4618      	mov	r0, r3
    d126:	b003      	add	sp, #12
    d128:	f85d eb04 	ldr.w	lr, [sp], #4
    d12c:	b004      	add	sp, #16
    d12e:	4770      	bx	lr
    d130:	10001048 	.word	0x10001048
    d134:	1000104c 	.word	0x1000104c

0000d138 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    d138:	b508      	push	{r3, lr}
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d13a:	4802      	ldr	r0, [pc, #8]	; (d144 <am_util_stdio_terminal_clear+0xc>)
    d13c:	f7ff ffdc 	bl	d0f8 <am_util_stdio_printf>
}
    d140:	bf00      	nop
    d142:	bd08      	pop	{r3, pc}
    d144:	0000e7d4 	.word	0x0000e7d4

0000d148 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    d148:	4811      	ldr	r0, [pc, #68]	; (d190 <zero_loop+0x12>)
    d14a:	4912      	ldr	r1, [pc, #72]	; (d194 <zero_loop+0x16>)
    d14c:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    d14e:	f8d1 d000 	ldr.w	sp, [r1]

#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    d152:	4811      	ldr	r0, [pc, #68]	; (d198 <zero_loop+0x1a>)
    d154:	6801      	ldr	r1, [r0, #0]
    d156:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d15a:	6001      	str	r1, [r0, #0]
    d15c:	f3bf 8f4f 	dsb	sy
    d160:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    d164:	480d      	ldr	r0, [pc, #52]	; (d19c <zero_loop+0x1e>)
    d166:	490e      	ldr	r1, [pc, #56]	; (d1a0 <zero_loop+0x22>)
    d168:	4a0e      	ldr	r2, [pc, #56]	; (d1a4 <zero_loop+0x26>)

0000d16a <copy_loop>:
    d16a:	f850 3b04 	ldr.w	r3, [r0], #4
    d16e:	f841 3b04 	str.w	r3, [r1], #4
    d172:	4291      	cmp	r1, r2
    d174:	dbf9      	blt.n	d16a <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    d176:	480c      	ldr	r0, [pc, #48]	; (d1a8 <zero_loop+0x2a>)
    d178:	490c      	ldr	r1, [pc, #48]	; (d1ac <zero_loop+0x2e>)
    d17a:	f04f 0200 	mov.w	r2, #0

0000d17e <zero_loop>:
    d17e:	4288      	cmp	r0, r1
    d180:	bfb8      	it	lt
    d182:	f840 2b04 	strlt.w	r2, [r0], #4
    d186:	dbfa      	blt.n	d17e <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    d188:	f7ff f852 	bl	c230 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    d18c:	be00      	bkpt	0x0000
}
    d18e:	bf00      	nop
    d190:	e000ed08 	.word	0xe000ed08
    d194:	0000c000 	.word	0x0000c000
    d198:	e000ed88 	.word	0xe000ed88
    d19c:	0000eb90 	.word	0x0000eb90
    d1a0:	10001000 	.word	0x10001000
    d1a4:	10001044 	.word	0x10001044
    d1a8:	10001044 	.word	0x10001044
    d1ac:	10001160 	.word	0x10001160

0000d1b0 <NMI_Handler>:
NMI_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d1b0:	e7fe      	b.n	d1b0 <NMI_Handler>

0000d1b2 <BusFault_Handler>:
HardFault_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d1b2:	e7fe      	b.n	d1b2 <BusFault_Handler>

0000d1b4 <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d1b4:	e7fe      	b.n	d1b4 <DebugMon_Handler>
	...

0000d1b8 <am_hal_cachectrl_config>:
    d1b8:	b530      	push	{r4, r5, lr}
    d1ba:	b083      	sub	sp, #12
    d1bc:	4604      	mov	r4, r0
    d1be:	f000 febb 	bl	df38 <am_hal_interrupt_master_disable>
    d1c2:	4d0e      	ldr	r5, [pc, #56]	; (d1fc <am_hal_cachectrl_config+0x44>)
    d1c4:	9001      	str	r0, [sp, #4]
    d1c6:	682b      	ldr	r3, [r5, #0]
    d1c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    d1cc:	602b      	str	r3, [r5, #0]
    d1ce:	9801      	ldr	r0, [sp, #4]
    d1d0:	f000 feb6 	bl	df40 <am_hal_interrupt_master_set>
    d1d4:	7863      	ldrb	r3, [r4, #1]
    d1d6:	7822      	ldrb	r2, [r4, #0]
    d1d8:	78a1      	ldrb	r1, [r4, #2]
    d1da:	021b      	lsls	r3, r3, #8
    d1dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
    d1e0:	0112      	lsls	r2, r2, #4
    d1e2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    d1e6:	b2d2      	uxtb	r2, r2
    d1e8:	4313      	orrs	r3, r2
    d1ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d1ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d1f2:	2000      	movs	r0, #0
    d1f4:	602b      	str	r3, [r5, #0]
    d1f6:	b003      	add	sp, #12
    d1f8:	bd30      	pop	{r4, r5, pc}
    d1fa:	bf00      	nop
    d1fc:	40018000 	.word	0x40018000

0000d200 <am_hal_cachectrl_enable>:
    d200:	4a03      	ldr	r2, [pc, #12]	; (d210 <am_hal_cachectrl_enable+0x10>)
    d202:	6813      	ldr	r3, [r2, #0]
    d204:	f043 0301 	orr.w	r3, r3, #1
    d208:	2000      	movs	r0, #0
    d20a:	6013      	str	r3, [r2, #0]
    d20c:	4770      	bx	lr
    d20e:	bf00      	nop
    d210:	40018000 	.word	0x40018000

0000d214 <am_hal_cachectrl_control>:
    d214:	b510      	push	{r4, lr}
    d216:	3801      	subs	r0, #1
    d218:	b08e      	sub	sp, #56	; 0x38
    d21a:	2810      	cmp	r0, #16
    d21c:	f200 815e 	bhi.w	d4dc <am_hal_cachectrl_control+0x2c8>
    d220:	e8df f010 	tbh	[pc, r0, lsl #1]
    d224:	00360018 	.word	0x00360018
    d228:	0040003d 	.word	0x0040003d
    d22c:	00450043 	.word	0x00450043
    d230:	0011001a 	.word	0x0011001a
    d234:	00540047 	.word	0x00540047
    d238:	009a0061 	.word	0x009a0061
    d23c:	010c00d3 	.word	0x010c00d3
    d240:	013f0126 	.word	0x013f0126
    d244:	001d      	.short	0x001d
    d246:	f44f 7300 	mov.w	r3, #512	; 0x200
    d24a:	4aac      	ldr	r2, [pc, #688]	; (d4fc <am_hal_cachectrl_control+0x2e8>)
    d24c:	2000      	movs	r0, #0
    d24e:	6093      	str	r3, [r2, #8]
    d250:	b00e      	add	sp, #56	; 0x38
    d252:	bd10      	pop	{r4, pc}
    d254:	2301      	movs	r3, #1
    d256:	e7f8      	b.n	d24a <am_hal_cachectrl_control+0x36>
    d258:	f44f 6380 	mov.w	r3, #1024	; 0x400
    d25c:	e7f5      	b.n	d24a <am_hal_cachectrl_control+0x36>
    d25e:	2900      	cmp	r1, #0
    d260:	f000 813c 	beq.w	d4dc <am_hal_cachectrl_control+0x2c8>
    d264:	684a      	ldr	r2, [r1, #4]
    d266:	48a6      	ldr	r0, [pc, #664]	; (d500 <am_hal_cachectrl_control+0x2ec>)
    d268:	4202      	tst	r2, r0
    d26a:	f040 8137 	bne.w	d4dc <am_hal_cachectrl_control+0x2c8>
    d26e:	688b      	ldr	r3, [r1, #8]
    d270:	4018      	ands	r0, r3
    d272:	f040 8133 	bne.w	d4dc <am_hal_cachectrl_control+0x2c8>
    d276:	780c      	ldrb	r4, [r1, #0]
    d278:	2c00      	cmp	r4, #0
    d27a:	f040 8133 	bne.w	d4e4 <am_hal_cachectrl_control+0x2d0>
    d27e:	4c9f      	ldr	r4, [pc, #636]	; (d4fc <am_hal_cachectrl_control+0x2e8>)
    d280:	7849      	ldrb	r1, [r1, #1]
    d282:	6122      	str	r2, [r4, #16]
    d284:	6163      	str	r3, [r4, #20]
    d286:	6823      	ldr	r3, [r4, #0]
    d288:	f361 0382 	bfi	r3, r1, #2, #1
    d28c:	6023      	str	r3, [r4, #0]
    d28e:	e7df      	b.n	d250 <am_hal_cachectrl_control+0x3c>
    d290:	4b9a      	ldr	r3, [pc, #616]	; (d4fc <am_hal_cachectrl_control+0x2e8>)
    d292:	681b      	ldr	r3, [r3, #0]
    d294:	01db      	lsls	r3, r3, #7
    d296:	f140 811f 	bpl.w	d4d8 <am_hal_cachectrl_control+0x2c4>
    d29a:	2302      	movs	r3, #2
    d29c:	e7d5      	b.n	d24a <am_hal_cachectrl_control+0x36>
    d29e:	f44f 6388 	mov.w	r3, #1088	; 0x440
    d2a2:	e7d2      	b.n	d24a <am_hal_cachectrl_control+0x36>
    d2a4:	f44f 7308 	mov.w	r3, #544	; 0x220
    d2a8:	e7cf      	b.n	d24a <am_hal_cachectrl_control+0x36>
    d2aa:	2340      	movs	r3, #64	; 0x40
    d2ac:	e7cd      	b.n	d24a <am_hal_cachectrl_control+0x36>
    d2ae:	2320      	movs	r3, #32
    d2b0:	e7cb      	b.n	d24a <am_hal_cachectrl_control+0x36>
    d2b2:	f000 fe41 	bl	df38 <am_hal_interrupt_master_disable>
    d2b6:	4a91      	ldr	r2, [pc, #580]	; (d4fc <am_hal_cachectrl_control+0x2e8>)
    d2b8:	9000      	str	r0, [sp, #0]
    d2ba:	6813      	ldr	r3, [r2, #0]
    d2bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    d2c0:	6013      	str	r3, [r2, #0]
    d2c2:	9800      	ldr	r0, [sp, #0]
    d2c4:	f000 fe3c 	bl	df40 <am_hal_interrupt_master_set>
    d2c8:	2000      	movs	r0, #0
    d2ca:	e7c1      	b.n	d250 <am_hal_cachectrl_control+0x3c>
    d2cc:	f000 fe34 	bl	df38 <am_hal_interrupt_master_disable>
    d2d0:	4a8a      	ldr	r2, [pc, #552]	; (d4fc <am_hal_cachectrl_control+0x2e8>)
    d2d2:	9001      	str	r0, [sp, #4]
    d2d4:	6813      	ldr	r3, [r2, #0]
    d2d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    d2da:	6013      	str	r3, [r2, #0]
    d2dc:	9801      	ldr	r0, [sp, #4]
    d2de:	f000 fe2f 	bl	df40 <am_hal_interrupt_master_set>
    d2e2:	2000      	movs	r0, #0
    d2e4:	e7b4      	b.n	d250 <am_hal_cachectrl_control+0x3c>
    d2e6:	f000 fe27 	bl	df38 <am_hal_interrupt_master_disable>
    d2ea:	4603      	mov	r3, r0
    d2ec:	4885      	ldr	r0, [pc, #532]	; (d504 <am_hal_cachectrl_control+0x2f0>)
    d2ee:	9302      	str	r3, [sp, #8]
    d2f0:	f000 fc9a 	bl	dc28 <am_hal_flash_load_ui32>
    d2f4:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d2f8:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d2fc:	4881      	ldr	r0, [pc, #516]	; (d504 <am_hal_cachectrl_control+0x2f0>)
    d2fe:	f000 fc97 	bl	dc30 <am_hal_flash_store_ui32>
    d302:	9802      	ldr	r0, [sp, #8]
    d304:	f000 fe1c 	bl	df40 <am_hal_interrupt_master_set>
    d308:	f000 fe16 	bl	df38 <am_hal_interrupt_master_disable>
    d30c:	4603      	mov	r3, r0
    d30e:	487d      	ldr	r0, [pc, #500]	; (d504 <am_hal_cachectrl_control+0x2f0>)
    d310:	9303      	str	r3, [sp, #12]
    d312:	f000 fc89 	bl	dc28 <am_hal_flash_load_ui32>
    d316:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d31a:	f440 61ee 	orr.w	r1, r0, #1904	; 0x770
    d31e:	4879      	ldr	r0, [pc, #484]	; (d504 <am_hal_cachectrl_control+0x2f0>)
    d320:	f000 fc86 	bl	dc30 <am_hal_flash_store_ui32>
    d324:	9803      	ldr	r0, [sp, #12]
    d326:	f000 fe0b 	bl	df40 <am_hal_interrupt_master_set>
    d32a:	f000 fe05 	bl	df38 <am_hal_interrupt_master_disable>
    d32e:	4603      	mov	r3, r0
    d330:	4874      	ldr	r0, [pc, #464]	; (d504 <am_hal_cachectrl_control+0x2f0>)
    d332:	9304      	str	r3, [sp, #16]
    d334:	f000 fc78 	bl	dc28 <am_hal_flash_load_ui32>
    d338:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d33c:	f020 000f 	bic.w	r0, r0, #15
    d340:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d344:	f041 0103 	orr.w	r1, r1, #3
    d348:	486e      	ldr	r0, [pc, #440]	; (d504 <am_hal_cachectrl_control+0x2f0>)
    d34a:	f000 fc71 	bl	dc30 <am_hal_flash_store_ui32>
    d34e:	9804      	ldr	r0, [sp, #16]
    d350:	f000 fdf6 	bl	df40 <am_hal_interrupt_master_set>
    d354:	2000      	movs	r0, #0
    d356:	e77b      	b.n	d250 <am_hal_cachectrl_control+0x3c>
    d358:	f000 fdee 	bl	df38 <am_hal_interrupt_master_disable>
    d35c:	4603      	mov	r3, r0
    d35e:	4869      	ldr	r0, [pc, #420]	; (d504 <am_hal_cachectrl_control+0x2f0>)
    d360:	9305      	str	r3, [sp, #20]
    d362:	f000 fc61 	bl	dc28 <am_hal_flash_load_ui32>
    d366:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d36a:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    d36e:	4865      	ldr	r0, [pc, #404]	; (d504 <am_hal_cachectrl_control+0x2f0>)
    d370:	f000 fc5e 	bl	dc30 <am_hal_flash_store_ui32>
    d374:	9805      	ldr	r0, [sp, #20]
    d376:	f000 fde3 	bl	df40 <am_hal_interrupt_master_set>
    d37a:	f000 fddd 	bl	df38 <am_hal_interrupt_master_disable>
    d37e:	4603      	mov	r3, r0
    d380:	4860      	ldr	r0, [pc, #384]	; (d504 <am_hal_cachectrl_control+0x2f0>)
    d382:	9306      	str	r3, [sp, #24]
    d384:	f000 fc50 	bl	dc28 <am_hal_flash_load_ui32>
    d388:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d38c:	f440 61ea 	orr.w	r1, r0, #1872	; 0x750
    d390:	485c      	ldr	r0, [pc, #368]	; (d504 <am_hal_cachectrl_control+0x2f0>)
    d392:	f000 fc4d 	bl	dc30 <am_hal_flash_store_ui32>
    d396:	9806      	ldr	r0, [sp, #24]
    d398:	f000 fdd2 	bl	df40 <am_hal_interrupt_master_set>
    d39c:	f000 fdcc 	bl	df38 <am_hal_interrupt_master_disable>
    d3a0:	4603      	mov	r3, r0
    d3a2:	4858      	ldr	r0, [pc, #352]	; (d504 <am_hal_cachectrl_control+0x2f0>)
    d3a4:	9307      	str	r3, [sp, #28]
    d3a6:	f000 fc3f 	bl	dc28 <am_hal_flash_load_ui32>
    d3aa:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d3ae:	f020 000f 	bic.w	r0, r0, #15
    d3b2:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d3b6:	f041 0101 	orr.w	r1, r1, #1
    d3ba:	4852      	ldr	r0, [pc, #328]	; (d504 <am_hal_cachectrl_control+0x2f0>)
    d3bc:	f000 fc38 	bl	dc30 <am_hal_flash_store_ui32>
    d3c0:	9807      	ldr	r0, [sp, #28]
    d3c2:	f000 fdbd 	bl	df40 <am_hal_interrupt_master_set>
    d3c6:	2000      	movs	r0, #0
    d3c8:	e742      	b.n	d250 <am_hal_cachectrl_control+0x3c>
    d3ca:	f000 fdb5 	bl	df38 <am_hal_interrupt_master_disable>
    d3ce:	4603      	mov	r3, r0
    d3d0:	484c      	ldr	r0, [pc, #304]	; (d504 <am_hal_cachectrl_control+0x2f0>)
    d3d2:	9308      	str	r3, [sp, #32]
    d3d4:	f000 fc28 	bl	dc28 <am_hal_flash_load_ui32>
    d3d8:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d3dc:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    d3e0:	4848      	ldr	r0, [pc, #288]	; (d504 <am_hal_cachectrl_control+0x2f0>)
    d3e2:	f000 fc25 	bl	dc30 <am_hal_flash_store_ui32>
    d3e6:	9808      	ldr	r0, [sp, #32]
    d3e8:	f000 fdaa 	bl	df40 <am_hal_interrupt_master_set>
    d3ec:	f000 fda4 	bl	df38 <am_hal_interrupt_master_disable>
    d3f0:	4603      	mov	r3, r0
    d3f2:	4844      	ldr	r0, [pc, #272]	; (d504 <am_hal_cachectrl_control+0x2f0>)
    d3f4:	9309      	str	r3, [sp, #36]	; 0x24
    d3f6:	f000 fc17 	bl	dc28 <am_hal_flash_load_ui32>
    d3fa:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d3fe:	f440 61ec 	orr.w	r1, r0, #1888	; 0x760
    d402:	4840      	ldr	r0, [pc, #256]	; (d504 <am_hal_cachectrl_control+0x2f0>)
    d404:	f000 fc14 	bl	dc30 <am_hal_flash_store_ui32>
    d408:	9809      	ldr	r0, [sp, #36]	; 0x24
    d40a:	f000 fd99 	bl	df40 <am_hal_interrupt_master_set>
    d40e:	f000 fd93 	bl	df38 <am_hal_interrupt_master_disable>
    d412:	4603      	mov	r3, r0
    d414:	483b      	ldr	r0, [pc, #236]	; (d504 <am_hal_cachectrl_control+0x2f0>)
    d416:	930a      	str	r3, [sp, #40]	; 0x28
    d418:	f000 fc06 	bl	dc28 <am_hal_flash_load_ui32>
    d41c:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d420:	f020 000f 	bic.w	r0, r0, #15
    d424:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d428:	f041 0101 	orr.w	r1, r1, #1
    d42c:	4835      	ldr	r0, [pc, #212]	; (d504 <am_hal_cachectrl_control+0x2f0>)
    d42e:	f000 fbff 	bl	dc30 <am_hal_flash_store_ui32>
    d432:	980a      	ldr	r0, [sp, #40]	; 0x28
    d434:	f000 fd84 	bl	df40 <am_hal_interrupt_master_set>
    d438:	2000      	movs	r0, #0
    d43a:	e709      	b.n	d250 <am_hal_cachectrl_control+0x3c>
    d43c:	2900      	cmp	r1, #0
    d43e:	d04d      	beq.n	d4dc <am_hal_cachectrl_control+0x2c8>
    d440:	680c      	ldr	r4, [r1, #0]
    d442:	2c03      	cmp	r4, #3
    d444:	d84c      	bhi.n	d4e0 <am_hal_cachectrl_control+0x2cc>
    d446:	f000 fd77 	bl	df38 <am_hal_interrupt_master_disable>
    d44a:	4603      	mov	r3, r0
    d44c:	482d      	ldr	r0, [pc, #180]	; (d504 <am_hal_cachectrl_control+0x2f0>)
    d44e:	930b      	str	r3, [sp, #44]	; 0x2c
    d450:	f000 fbea 	bl	dc28 <am_hal_flash_load_ui32>
    d454:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d458:	ea40 3104 	orr.w	r1, r0, r4, lsl #12
    d45c:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d460:	4828      	ldr	r0, [pc, #160]	; (d504 <am_hal_cachectrl_control+0x2f0>)
    d462:	f000 fbe5 	bl	dc30 <am_hal_flash_store_ui32>
    d466:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d468:	f000 fd6a 	bl	df40 <am_hal_interrupt_master_set>
    d46c:	2000      	movs	r0, #0
    d46e:	e6ef      	b.n	d250 <am_hal_cachectrl_control+0x3c>
    d470:	b3a1      	cbz	r1, d4dc <am_hal_cachectrl_control+0x2c8>
    d472:	680c      	ldr	r4, [r1, #0]
    d474:	2c07      	cmp	r4, #7
    d476:	d833      	bhi.n	d4e0 <am_hal_cachectrl_control+0x2cc>
    d478:	f000 fd5e 	bl	df38 <am_hal_interrupt_master_disable>
    d47c:	4603      	mov	r3, r0
    d47e:	4821      	ldr	r0, [pc, #132]	; (d504 <am_hal_cachectrl_control+0x2f0>)
    d480:	930c      	str	r3, [sp, #48]	; 0x30
    d482:	f000 fbd1 	bl	dc28 <am_hal_flash_load_ui32>
    d486:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d48a:	ea40 1104 	orr.w	r1, r0, r4, lsl #4
    d48e:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d492:	481c      	ldr	r0, [pc, #112]	; (d504 <am_hal_cachectrl_control+0x2f0>)
    d494:	f000 fbcc 	bl	dc30 <am_hal_flash_store_ui32>
    d498:	980c      	ldr	r0, [sp, #48]	; 0x30
    d49a:	f000 fd51 	bl	df40 <am_hal_interrupt_master_set>
    d49e:	2000      	movs	r0, #0
    d4a0:	e6d6      	b.n	d250 <am_hal_cachectrl_control+0x3c>
    d4a2:	b1d9      	cbz	r1, d4dc <am_hal_cachectrl_control+0x2c8>
    d4a4:	680c      	ldr	r4, [r1, #0]
    d4a6:	2c0f      	cmp	r4, #15
    d4a8:	d81a      	bhi.n	d4e0 <am_hal_cachectrl_control+0x2cc>
    d4aa:	f000 fd45 	bl	df38 <am_hal_interrupt_master_disable>
    d4ae:	4603      	mov	r3, r0
    d4b0:	4814      	ldr	r0, [pc, #80]	; (d504 <am_hal_cachectrl_control+0x2f0>)
    d4b2:	930d      	str	r3, [sp, #52]	; 0x34
    d4b4:	f000 fbb8 	bl	dc28 <am_hal_flash_load_ui32>
    d4b8:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d4bc:	f020 000f 	bic.w	r0, r0, #15
    d4c0:	ea40 0104 	orr.w	r1, r0, r4
    d4c4:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d4c8:	480e      	ldr	r0, [pc, #56]	; (d504 <am_hal_cachectrl_control+0x2f0>)
    d4ca:	f000 fbb1 	bl	dc30 <am_hal_flash_store_ui32>
    d4ce:	980d      	ldr	r0, [sp, #52]	; 0x34
    d4d0:	f000 fd36 	bl	df40 <am_hal_interrupt_master_set>
    d4d4:	2000      	movs	r0, #0
    d4d6:	e6bb      	b.n	d250 <am_hal_cachectrl_control+0x3c>
    d4d8:	2007      	movs	r0, #7
    d4da:	e6b9      	b.n	d250 <am_hal_cachectrl_control+0x3c>
    d4dc:	2006      	movs	r0, #6
    d4de:	e6b7      	b.n	d250 <am_hal_cachectrl_control+0x3c>
    d4e0:	2001      	movs	r0, #1
    d4e2:	e6b5      	b.n	d250 <am_hal_cachectrl_control+0x3c>
    d4e4:	2c01      	cmp	r4, #1
    d4e6:	d1f9      	bne.n	d4dc <am_hal_cachectrl_control+0x2c8>
    d4e8:	4c04      	ldr	r4, [pc, #16]	; (d4fc <am_hal_cachectrl_control+0x2e8>)
    d4ea:	7849      	ldrb	r1, [r1, #1]
    d4ec:	61a2      	str	r2, [r4, #24]
    d4ee:	61e3      	str	r3, [r4, #28]
    d4f0:	6823      	ldr	r3, [r4, #0]
    d4f2:	f361 03c3 	bfi	r3, r1, #3, #1
    d4f6:	6023      	str	r3, [r4, #0]
    d4f8:	e6aa      	b.n	d250 <am_hal_cachectrl_control+0x3c>
    d4fa:	bf00      	nop
    d4fc:	40018000 	.word	0x40018000
    d500:	f800000f 	.word	0xf800000f
    d504:	40018004 	.word	0x40018004

0000d508 <am_hal_clkgen_control>:
    d508:	4b49      	ldr	r3, [pc, #292]	; (d630 <am_hal_clkgen_control+0x128>)
    d50a:	681a      	ldr	r2, [r3, #0]
    d50c:	b912      	cbnz	r2, d514 <am_hal_clkgen_control+0xc>
    d50e:	4a49      	ldr	r2, [pc, #292]	; (d634 <am_hal_clkgen_control+0x12c>)
    d510:	6812      	ldr	r2, [r2, #0]
    d512:	601a      	str	r2, [r3, #0]
    d514:	2809      	cmp	r0, #9
    d516:	f200 8089 	bhi.w	d62c <am_hal_clkgen_control+0x124>
    d51a:	e8df f000 	tbb	[pc, r0]
    d51e:	160d      	.short	0x160d
    d520:	423a261e 	.word	0x423a261e
    d524:	055c544c 	.word	0x055c544c
    d528:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d52c:	2000      	movs	r0, #0
    d52e:	6a1a      	ldr	r2, [r3, #32]
    d530:	f36f 0200 	bfc	r2, #0, #1
    d534:	621a      	str	r2, [r3, #32]
    d536:	4770      	bx	lr
    d538:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d53c:	2200      	movs	r2, #0
    d53e:	2147      	movs	r1, #71	; 0x47
    d540:	6159      	str	r1, [r3, #20]
    d542:	4610      	mov	r0, r2
    d544:	619a      	str	r2, [r3, #24]
    d546:	615a      	str	r2, [r3, #20]
    d548:	4770      	bx	lr
    d54a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d54e:	2000      	movs	r0, #0
    d550:	899a      	ldrh	r2, [r3, #12]
    d552:	f36f 0200 	bfc	r2, #0, #1
    d556:	819a      	strh	r2, [r3, #12]
    d558:	4770      	bx	lr
    d55a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d55e:	2000      	movs	r0, #0
    d560:	899a      	ldrh	r2, [r3, #12]
    d562:	f36f 0241 	bfc	r2, #1, #1
    d566:	819a      	strh	r2, [r3, #12]
    d568:	4770      	bx	lr
    d56a:	4a33      	ldr	r2, [pc, #204]	; (d638 <am_hal_clkgen_control+0x130>)
    d56c:	68d3      	ldr	r3, [r2, #12]
    d56e:	b2db      	uxtb	r3, r3
    d570:	2b21      	cmp	r3, #33	; 0x21
    d572:	d106      	bne.n	d582 <am_hal_clkgen_control+0x7a>
    d574:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    d578:	2101      	movs	r1, #1
    d57a:	f361 2309 	bfi	r3, r1, #8, #2
    d57e:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    d582:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d586:	2000      	movs	r0, #0
    d588:	8993      	ldrh	r3, [r2, #12]
    d58a:	f043 0301 	orr.w	r3, r3, #1
    d58e:	8193      	strh	r3, [r2, #12]
    d590:	4770      	bx	lr
    d592:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d596:	2000      	movs	r0, #0
    d598:	8993      	ldrh	r3, [r2, #12]
    d59a:	f043 0302 	orr.w	r3, r3, #2
    d59e:	8193      	strh	r3, [r2, #12]
    d5a0:	4770      	bx	lr
    d5a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d5a6:	2200      	movs	r2, #0
    d5a8:	2047      	movs	r0, #71	; 0x47
    d5aa:	2101      	movs	r1, #1
    d5ac:	6158      	str	r0, [r3, #20]
    d5ae:	6199      	str	r1, [r3, #24]
    d5b0:	4610      	mov	r0, r2
    d5b2:	615a      	str	r2, [r3, #20]
    d5b4:	4770      	bx	lr
    d5b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d5ba:	2000      	movs	r0, #0
    d5bc:	899a      	ldrh	r2, [r3, #12]
    d5be:	f36f 12c7 	bfc	r2, #7, #1
    d5c2:	819a      	strh	r2, [r3, #12]
    d5c4:	4770      	bx	lr
    d5c6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d5ca:	2000      	movs	r0, #0
    d5cc:	8993      	ldrh	r3, [r2, #12]
    d5ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d5d2:	8193      	strh	r3, [r2, #12]
    d5d4:	4770      	bx	lr
    d5d6:	4a18      	ldr	r2, [pc, #96]	; (d638 <am_hal_clkgen_control+0x130>)
    d5d8:	68d3      	ldr	r3, [r2, #12]
    d5da:	b2db      	uxtb	r3, r3
    d5dc:	2b21      	cmp	r3, #33	; 0x21
    d5de:	d00a      	beq.n	d5f6 <am_hal_clkgen_control+0xee>
    d5e0:	b139      	cbz	r1, d5f2 <am_hal_clkgen_control+0xea>
    d5e2:	680b      	ldr	r3, [r1, #0]
    d5e4:	f043 0301 	orr.w	r3, r3, #1
    d5e8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d5ec:	2000      	movs	r0, #0
    d5ee:	6213      	str	r3, [r2, #32]
    d5f0:	4770      	bx	lr
    d5f2:	4b12      	ldr	r3, [pc, #72]	; (d63c <am_hal_clkgen_control+0x134>)
    d5f4:	e7f8      	b.n	d5e8 <am_hal_clkgen_control+0xe0>
    d5f6:	b500      	push	{lr}
    d5f8:	b083      	sub	sp, #12
    d5fa:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    d5fe:	9101      	str	r1, [sp, #4]
    d600:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    d604:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    d608:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    d60c:	f000 fac6 	bl	db9c <am_hal_flash_delay>
    d610:	9901      	ldr	r1, [sp, #4]
    d612:	b149      	cbz	r1, d628 <am_hal_clkgen_control+0x120>
    d614:	680b      	ldr	r3, [r1, #0]
    d616:	f043 0301 	orr.w	r3, r3, #1
    d61a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d61e:	2000      	movs	r0, #0
    d620:	6213      	str	r3, [r2, #32]
    d622:	b003      	add	sp, #12
    d624:	f85d fb04 	ldr.w	pc, [sp], #4
    d628:	4b04      	ldr	r3, [pc, #16]	; (d63c <am_hal_clkgen_control+0x134>)
    d62a:	e7f6      	b.n	d61a <am_hal_clkgen_control+0x112>
    d62c:	2006      	movs	r0, #6
    d62e:	4770      	bx	lr
    d630:	10001150 	.word	0x10001150
    d634:	4ffff000 	.word	0x4ffff000
    d638:	40020000 	.word	0x40020000
    d63c:	0025b801 	.word	0x0025b801

0000d640 <am_hal_clkgen_status_get>:
    d640:	b1b0      	cbz	r0, d670 <am_hal_clkgen_status_get+0x30>
    d642:	b410      	push	{r4}
    d644:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    d648:	4603      	mov	r3, r0
    d64a:	698c      	ldr	r4, [r1, #24]
    d64c:	4809      	ldr	r0, [pc, #36]	; (d674 <am_hal_clkgen_status_get+0x34>)
    d64e:	4a0a      	ldr	r2, [pc, #40]	; (d678 <am_hal_clkgen_status_get+0x38>)
    d650:	f014 0f01 	tst.w	r4, #1
    d654:	bf08      	it	eq
    d656:	4602      	moveq	r2, r0
    d658:	601a      	str	r2, [r3, #0]
    d65a:	69ca      	ldr	r2, [r1, #28]
    d65c:	f85d 4b04 	ldr.w	r4, [sp], #4
    d660:	f002 0101 	and.w	r1, r2, #1
    d664:	f3c2 0240 	ubfx	r2, r2, #1, #1
    d668:	2000      	movs	r0, #0
    d66a:	6059      	str	r1, [r3, #4]
    d66c:	721a      	strb	r2, [r3, #8]
    d66e:	4770      	bx	lr
    d670:	2006      	movs	r0, #6
    d672:	4770      	bx	lr
    d674:	02dc6c00 	.word	0x02dc6c00
    d678:	016e3600 	.word	0x016e3600

0000d67c <am_hal_ctimer_config_single>:
    d67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d680:	b082      	sub	sp, #8
    d682:	460e      	mov	r6, r1
    d684:	4605      	mov	r5, r0
    d686:	4614      	mov	r4, r2
    d688:	f000 fc56 	bl	df38 <am_hal_interrupt_master_disable>
    d68c:	4f20      	ldr	r7, [pc, #128]	; (d710 <am_hal_ctimer_config_single+0x94>)
    d68e:	9001      	str	r0, [sp, #4]
    d690:	ea4f 1845 	mov.w	r8, r5, lsl #5
    d694:	f006 2308 	and.w	r3, r6, #134219776	; 0x8000800
    d698:	f858 2007 	ldr.w	r2, [r8, r7]
    d69c:	4313      	orrs	r3, r2
    d69e:	f848 3007 	str.w	r3, [r8, r7]
    d6a2:	9801      	ldr	r0, [sp, #4]
    d6a4:	f000 fc4c 	bl	df40 <am_hal_interrupt_master_set>
    d6a8:	f000 fc46 	bl	df38 <am_hal_interrupt_master_disable>
    d6ac:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    d6b0:	9000      	str	r0, [sp, #0]
    d6b2:	f858 3007 	ldr.w	r3, [r8, r7]
    d6b6:	d021      	beq.n	d6fc <am_hal_ctimer_config_single+0x80>
    d6b8:	ea23 0306 	bic.w	r3, r3, r6
    d6bc:	1c72      	adds	r2, r6, #1
    d6be:	ea43 0304 	orr.w	r3, r3, r4
    d6c2:	d110      	bne.n	d6e6 <am_hal_ctimer_config_single+0x6a>
    d6c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d6c8:	f848 3007 	str.w	r3, [r8, r7]
    d6cc:	9800      	ldr	r0, [sp, #0]
    d6ce:	f000 fc37 	bl	df40 <am_hal_interrupt_master_set>
    d6d2:	2300      	movs	r3, #0
    d6d4:	480f      	ldr	r0, [pc, #60]	; (d714 <am_hal_ctimer_config_single+0x98>)
    d6d6:	eb00 0545 	add.w	r5, r0, r5, lsl #1
    d6da:	f3c4 0444 	ubfx	r4, r4, #1, #5
    d6de:	54ec      	strb	r4, [r5, r3]
    d6e0:	b002      	add	sp, #8
    d6e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d6e6:	f848 3007 	str.w	r3, [r8, r7]
    d6ea:	9800      	ldr	r0, [sp, #0]
    d6ec:	f000 fc28 	bl	df40 <am_hal_interrupt_master_set>
    d6f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d6f4:	429e      	cmp	r6, r3
    d6f6:	d1f3      	bne.n	d6e0 <am_hal_ctimer_config_single+0x64>
    d6f8:	2300      	movs	r3, #0
    d6fa:	e7eb      	b.n	d6d4 <am_hal_ctimer_config_single+0x58>
    d6fc:	b29b      	uxth	r3, r3
    d6fe:	0424      	lsls	r4, r4, #16
    d700:	4323      	orrs	r3, r4
    d702:	f848 3007 	str.w	r3, [r8, r7]
    d706:	9800      	ldr	r0, [sp, #0]
    d708:	f000 fc1a 	bl	df40 <am_hal_interrupt_master_set>
    d70c:	2301      	movs	r3, #1
    d70e:	e7e1      	b.n	d6d4 <am_hal_ctimer_config_single+0x58>
    d710:	4000800c 	.word	0x4000800c
    d714:	10001000 	.word	0x10001000

0000d718 <am_hal_ctimer_start>:
    d718:	b530      	push	{r4, r5, lr}
    d71a:	b083      	sub	sp, #12
    d71c:	460c      	mov	r4, r1
    d71e:	4605      	mov	r5, r0
    d720:	f000 fc0a 	bl	df38 <am_hal_interrupt_master_disable>
    d724:	ea4f 1c45 	mov.w	ip, r5, lsl #5
    d728:	4910      	ldr	r1, [pc, #64]	; (d76c <am_hal_ctimer_start+0x54>)
    d72a:	9001      	str	r0, [sp, #4]
    d72c:	f85c 3001 	ldr.w	r3, [ip, r1]
    d730:	f004 2208 	and.w	r2, r4, #134219776	; 0x8000800
    d734:	ea23 0202 	bic.w	r2, r3, r2
    d738:	f004 1301 	and.w	r3, r4, #65537	; 0x10001
    d73c:	4313      	orrs	r3, r2
    d73e:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    d742:	f84c 3001 	str.w	r3, [ip, r1]
    d746:	bf0c      	ite	eq
    d748:	f3c3 4444 	ubfxeq	r4, r3, #17, #5
    d74c:	f3c3 0444 	ubfxne	r4, r3, #1, #5
    d750:	4b07      	ldr	r3, [pc, #28]	; (d770 <am_hal_ctimer_start+0x58>)
    d752:	9801      	ldr	r0, [sp, #4]
    d754:	bf0c      	ite	eq
    d756:	2201      	moveq	r2, #1
    d758:	2200      	movne	r2, #0
    d75a:	eb03 0545 	add.w	r5, r3, r5, lsl #1
    d75e:	54ac      	strb	r4, [r5, r2]
    d760:	b003      	add	sp, #12
    d762:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    d766:	f000 bbeb 	b.w	df40 <am_hal_interrupt_master_set>
    d76a:	bf00      	nop
    d76c:	4000800c 	.word	0x4000800c
    d770:	10001000 	.word	0x10001000

0000d774 <am_hal_ctimer_output_config>:
    d774:	2a32      	cmp	r2, #50	; 0x32
    d776:	d84d      	bhi.n	d814 <am_hal_ctimer_output_config+0xa0>
    d778:	2807      	cmp	r0, #7
    d77a:	d84b      	bhi.n	d814 <am_hal_ctimer_output_config+0xa0>
    d77c:	2b03      	cmp	r3, #3
    d77e:	d849      	bhi.n	d814 <am_hal_ctimer_output_config+0xa0>
    d780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d784:	f64f 74ff 	movw	r4, #65535	; 0xffff
    d788:	42a1      	cmp	r1, r4
    d78a:	b083      	sub	sp, #12
    d78c:	f04f 0800 	mov.w	r8, #0
    d790:	d005      	beq.n	d79e <am_hal_ctimer_output_config+0x2a>
    d792:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    d796:	d002      	beq.n	d79e <am_hal_ctimer_output_config+0x2a>
    d798:	1c4c      	adds	r4, r1, #1
    d79a:	f040 80a7 	bne.w	d8ec <am_hal_ctimer_output_config+0x178>
    d79e:	4f8d      	ldr	r7, [pc, #564]	; (d9d4 <am_hal_ctimer_output_config+0x260>)
    d7a0:	2400      	movs	r4, #0
    d7a2:	e003      	b.n	d7ac <am_hal_ctimer_output_config+0x38>
    d7a4:	3401      	adds	r4, #1
    d7a6:	2c20      	cmp	r4, #32
    d7a8:	f000 80ac 	beq.w	d904 <am_hal_ctimer_output_config+0x190>
    d7ac:	f837 5b02 	ldrh.w	r5, [r7], #2
    d7b0:	f005 063f 	and.w	r6, r5, #63	; 0x3f
    d7b4:	42b2      	cmp	r2, r6
    d7b6:	d1f5      	bne.n	d7a4 <am_hal_ctimer_output_config+0x30>
    d7b8:	2e32      	cmp	r6, #50	; 0x32
    d7ba:	f000 80a3 	beq.w	d904 <am_hal_ctimer_output_config+0x190>
    d7be:	2805      	cmp	r0, #5
    d7c0:	d92a      	bls.n	d818 <am_hal_ctimer_output_config+0xa4>
    d7c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d7c6:	4291      	cmp	r1, r2
    d7c8:	d126      	bne.n	d818 <am_hal_ctimer_output_config+0xa4>
    d7ca:	2b01      	cmp	r3, #1
    d7cc:	d027      	beq.n	d81e <am_hal_ctimer_output_config+0xaa>
    d7ce:	d825      	bhi.n	d81c <am_hal_ctimer_output_config+0xa8>
    d7d0:	4a81      	ldr	r2, [pc, #516]	; (d9d8 <am_hal_ctimer_output_config+0x264>)
    d7d2:	f812 1024 	ldrb.w	r1, [r2, r4, lsl #2]
    d7d6:	f001 0707 	and.w	r7, r1, #7
    d7da:	42b8      	cmp	r0, r7
    d7dc:	f000 80ed 	beq.w	d9ba <am_hal_ctimer_output_config+0x246>
    d7e0:	eb02 0184 	add.w	r1, r2, r4, lsl #2
    d7e4:	784f      	ldrb	r7, [r1, #1]
    d7e6:	f007 0c07 	and.w	ip, r7, #7
    d7ea:	4560      	cmp	r0, ip
    d7ec:	ea4f 0184 	mov.w	r1, r4, lsl #2
    d7f0:	f000 80d8 	beq.w	d9a4 <am_hal_ctimer_output_config+0x230>
    d7f4:	1857      	adds	r7, r2, r1
    d7f6:	78bf      	ldrb	r7, [r7, #2]
    d7f8:	f007 0c07 	and.w	ip, r7, #7
    d7fc:	4560      	cmp	r0, ip
    d7fe:	f000 80c6 	beq.w	d98e <am_hal_ctimer_output_config+0x21a>
    d802:	440a      	add	r2, r1
    d804:	78d2      	ldrb	r2, [r2, #3]
    d806:	f002 0107 	and.w	r1, r2, #7
    d80a:	4288      	cmp	r0, r1
    d80c:	f000 80b4 	beq.w	d978 <am_hal_ctimer_output_config+0x204>
    d810:	2007      	movs	r0, #7
    d812:	e03e      	b.n	d892 <am_hal_ctimer_output_config+0x11e>
    d814:	2006      	movs	r0, #6
    d816:	4770      	bx	lr
    d818:	2b01      	cmp	r3, #1
    d81a:	d93d      	bls.n	d898 <am_hal_ctimer_output_config+0x124>
    d81c:	1e98      	subs	r0, r3, #2
    d81e:	4b6f      	ldr	r3, [pc, #444]	; (d9dc <am_hal_ctimer_output_config+0x268>)
    d820:	fba3 2304 	umull	r2, r3, r3, r4
    d824:	08db      	lsrs	r3, r3, #3
    d826:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    d82a:	eba4 0343 	sub.w	r3, r4, r3, lsl #1
    d82e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    d832:	2b04      	cmp	r3, #4
    d834:	bf88      	it	hi
    d836:	3201      	addhi	r2, #1
    d838:	f04f 0907 	mov.w	r9, #7
    d83c:	fa00 f702 	lsl.w	r7, r0, r2
    d840:	fa09 f902 	lsl.w	r9, r9, r2
    d844:	f000 fb78 	bl	df38 <am_hal_interrupt_master_disable>
    d848:	2c09      	cmp	r4, #9
    d84a:	4b65      	ldr	r3, [pc, #404]	; (d9e0 <am_hal_ctimer_output_config+0x26c>)
    d84c:	9001      	str	r0, [sp, #4]
    d84e:	d84f      	bhi.n	d8f0 <am_hal_ctimer_output_config+0x17c>
    d850:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    d854:	ea22 0209 	bic.w	r2, r2, r9
    d858:	433a      	orrs	r2, r7
    d85a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    d85e:	4a61      	ldr	r2, [pc, #388]	; (d9e4 <am_hal_ctimer_output_config+0x270>)
    d860:	2301      	movs	r3, #1
    d862:	40a3      	lsls	r3, r4
    d864:	f8d2 4118 	ldr.w	r4, [r2, #280]	; 0x118
    d868:	ea24 0403 	bic.w	r4, r4, r3
    d86c:	f8c2 4118 	str.w	r4, [r2, #280]	; 0x118
    d870:	9801      	ldr	r0, [sp, #4]
    d872:	f000 fb65 	bl	df40 <am_hal_interrupt_master_set>
    d876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d878:	f3c5 2502 	ubfx	r5, r5, #8, #3
    d87c:	f003 0303 	and.w	r3, r3, #3
    d880:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    d884:	f365 080f 	bfi	r8, r5, #0, #16
    d888:	4641      	mov	r1, r8
    d88a:	4630      	mov	r0, r6
    d88c:	f000 f9d6 	bl	dc3c <am_hal_gpio_pinconfig>
    d890:	2000      	movs	r0, #0
    d892:	b003      	add	sp, #12
    d894:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d898:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    d89c:	d152      	bne.n	d944 <am_hal_ctimer_output_config+0x1d0>
    d89e:	4a4e      	ldr	r2, [pc, #312]	; (d9d8 <am_hal_ctimer_output_config+0x264>)
    d8a0:	f812 1024 	ldrb.w	r1, [r2, r4, lsl #2]
    d8a4:	f001 0707 	and.w	r7, r1, #7
    d8a8:	42b8      	cmp	r0, r7
    d8aa:	d041      	beq.n	d930 <am_hal_ctimer_output_config+0x1bc>
    d8ac:	eb02 0184 	add.w	r1, r2, r4, lsl #2
    d8b0:	784f      	ldrb	r7, [r1, #1]
    d8b2:	f007 0c07 	and.w	ip, r7, #7
    d8b6:	4560      	cmp	r0, ip
    d8b8:	ea4f 0184 	mov.w	r1, r4, lsl #2
    d8bc:	d052      	beq.n	d964 <am_hal_ctimer_output_config+0x1f0>
    d8be:	1857      	adds	r7, r2, r1
    d8c0:	78bf      	ldrb	r7, [r7, #2]
    d8c2:	f007 0c07 	and.w	ip, r7, #7
    d8c6:	4560      	cmp	r0, ip
    d8c8:	d042      	beq.n	d950 <am_hal_ctimer_output_config+0x1dc>
    d8ca:	440a      	add	r2, r1
    d8cc:	78d2      	ldrb	r2, [r2, #3]
    d8ce:	f002 0107 	and.w	r1, r2, #7
    d8d2:	4288      	cmp	r0, r1
    d8d4:	d19c      	bne.n	d810 <am_hal_ctimer_output_config+0x9c>
    d8d6:	f3c2 1100 	ubfx	r1, r2, #4, #1
    d8da:	0712      	lsls	r2, r2, #28
    d8dc:	f003 0301 	and.w	r3, r3, #1
    d8e0:	d596      	bpl.n	d810 <am_hal_ctimer_output_config+0x9c>
    d8e2:	4299      	cmp	r1, r3
    d8e4:	d194      	bne.n	d810 <am_hal_ctimer_output_config+0x9c>
    d8e6:	2003      	movs	r0, #3
    d8e8:	3002      	adds	r0, #2
    d8ea:	e798      	b.n	d81e <am_hal_ctimer_output_config+0xaa>
    d8ec:	2006      	movs	r0, #6
    d8ee:	e7d0      	b.n	d892 <am_hal_ctimer_output_config+0x11e>
    d8f0:	2c13      	cmp	r4, #19
    d8f2:	d80b      	bhi.n	d90c <am_hal_ctimer_output_config+0x198>
    d8f4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    d8f8:	ea22 0209 	bic.w	r2, r2, r9
    d8fc:	433a      	orrs	r2, r7
    d8fe:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    d902:	e7ac      	b.n	d85e <am_hal_ctimer_output_config+0xea>
    d904:	2005      	movs	r0, #5
    d906:	b003      	add	sp, #12
    d908:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d90c:	2c1d      	cmp	r4, #29
    d90e:	d807      	bhi.n	d920 <am_hal_ctimer_output_config+0x1ac>
    d910:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    d914:	ea22 0209 	bic.w	r2, r2, r9
    d918:	433a      	orrs	r2, r7
    d91a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    d91e:	e79e      	b.n	d85e <am_hal_ctimer_output_config+0xea>
    d920:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    d924:	ea22 0209 	bic.w	r2, r2, r9
    d928:	433a      	orrs	r2, r7
    d92a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    d92e:	e796      	b.n	d85e <am_hal_ctimer_output_config+0xea>
    d930:	f3c1 1c00 	ubfx	ip, r1, #4, #1
    d934:	0709      	lsls	r1, r1, #28
    d936:	f003 0701 	and.w	r7, r3, #1
    d93a:	d5b7      	bpl.n	d8ac <am_hal_ctimer_output_config+0x138>
    d93c:	45bc      	cmp	ip, r7
    d93e:	d1b5      	bne.n	d8ac <am_hal_ctimer_output_config+0x138>
    d940:	2000      	movs	r0, #0
    d942:	e7d1      	b.n	d8e8 <am_hal_ctimer_output_config+0x174>
    d944:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d948:	4291      	cmp	r1, r2
    d94a:	f47f af61 	bne.w	d810 <am_hal_ctimer_output_config+0x9c>
    d94e:	e73f      	b.n	d7d0 <am_hal_ctimer_output_config+0x5c>
    d950:	f3c7 1e00 	ubfx	lr, r7, #4, #1
    d954:	073f      	lsls	r7, r7, #28
    d956:	f003 0c01 	and.w	ip, r3, #1
    d95a:	d5b6      	bpl.n	d8ca <am_hal_ctimer_output_config+0x156>
    d95c:	45e6      	cmp	lr, ip
    d95e:	d1b4      	bne.n	d8ca <am_hal_ctimer_output_config+0x156>
    d960:	2002      	movs	r0, #2
    d962:	e7c1      	b.n	d8e8 <am_hal_ctimer_output_config+0x174>
    d964:	f3c7 1e00 	ubfx	lr, r7, #4, #1
    d968:	073f      	lsls	r7, r7, #28
    d96a:	f003 0c01 	and.w	ip, r3, #1
    d96e:	d5a6      	bpl.n	d8be <am_hal_ctimer_output_config+0x14a>
    d970:	45e6      	cmp	lr, ip
    d972:	d1a4      	bne.n	d8be <am_hal_ctimer_output_config+0x14a>
    d974:	2001      	movs	r0, #1
    d976:	e7b7      	b.n	d8e8 <am_hal_ctimer_output_config+0x174>
    d978:	0710      	lsls	r0, r2, #28
    d97a:	f003 0301 	and.w	r3, r3, #1
    d97e:	f3c2 1100 	ubfx	r1, r2, #4, #1
    d982:	f53f af45 	bmi.w	d810 <am_hal_ctimer_output_config+0x9c>
    d986:	428b      	cmp	r3, r1
    d988:	f47f af42 	bne.w	d810 <am_hal_ctimer_output_config+0x9c>
    d98c:	e7ab      	b.n	d8e6 <am_hal_ctimer_output_config+0x172>
    d98e:	f3c7 1e00 	ubfx	lr, r7, #4, #1
    d992:	073f      	lsls	r7, r7, #28
    d994:	f003 0c01 	and.w	ip, r3, #1
    d998:	f53f af33 	bmi.w	d802 <am_hal_ctimer_output_config+0x8e>
    d99c:	45e6      	cmp	lr, ip
    d99e:	f47f af30 	bne.w	d802 <am_hal_ctimer_output_config+0x8e>
    d9a2:	e7dd      	b.n	d960 <am_hal_ctimer_output_config+0x1ec>
    d9a4:	f3c7 1e00 	ubfx	lr, r7, #4, #1
    d9a8:	073f      	lsls	r7, r7, #28
    d9aa:	f003 0c01 	and.w	ip, r3, #1
    d9ae:	f53f af21 	bmi.w	d7f4 <am_hal_ctimer_output_config+0x80>
    d9b2:	45e6      	cmp	lr, ip
    d9b4:	f47f af1e 	bne.w	d7f4 <am_hal_ctimer_output_config+0x80>
    d9b8:	e7dc      	b.n	d974 <am_hal_ctimer_output_config+0x200>
    d9ba:	f3c1 1c00 	ubfx	ip, r1, #4, #1
    d9be:	f011 0108 	ands.w	r1, r1, #8
    d9c2:	f003 0701 	and.w	r7, r3, #1
    d9c6:	f47f af0b 	bne.w	d7e0 <am_hal_ctimer_output_config+0x6c>
    d9ca:	45bc      	cmp	ip, r7
    d9cc:	f47f af08 	bne.w	d7e0 <am_hal_ctimer_output_config+0x6c>
    d9d0:	e7b6      	b.n	d940 <am_hal_ctimer_output_config+0x1cc>
    d9d2:	bf00      	nop
    d9d4:	0000e82c 	.word	0x0000e82c
    d9d8:	0000e86c 	.word	0x0000e86c
    d9dc:	cccccccd 	.word	0xcccccccd
    d9e0:	40008000 	.word	0x40008000
    d9e4:	40010000 	.word	0x40010000

0000d9e8 <am_hal_ctimer_period_set>:
    d9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d9ec:	b082      	sub	sp, #8
    d9ee:	0145      	lsls	r5, r0, #5
    d9f0:	460e      	mov	r6, r1
    d9f2:	4614      	mov	r4, r2
    d9f4:	461f      	mov	r7, r3
    d9f6:	f000 fa9f 	bl	df38 <am_hal_interrupt_master_disable>
    d9fa:	f8df 809c 	ldr.w	r8, [pc, #156]	; da98 <am_hal_ctimer_period_set+0xb0>
    d9fe:	9001      	str	r0, [sp, #4]
    da00:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    da04:	f855 2008 	ldr.w	r2, [r5, r8]
    da08:	4821      	ldr	r0, [pc, #132]	; (da90 <am_hal_ctimer_period_set+0xa8>)
    da0a:	d02f      	beq.n	da6c <am_hal_ctimer_period_set+0x84>
    da0c:	f402 72c0 	and.w	r2, r2, #384	; 0x180
    da10:	2a80      	cmp	r2, #128	; 0x80
    da12:	d019      	beq.n	da48 <am_hal_ctimer_period_set+0x60>
    da14:	f64f 72ff 	movw	r2, #65535	; 0xffff
    da18:	2100      	movs	r1, #0
    da1a:	4296      	cmp	r6, r2
    da1c:	460b      	mov	r3, r1
    da1e:	d01c      	beq.n	da5a <am_hal_ctimer_period_set+0x72>
    da20:	4a1c      	ldr	r2, [pc, #112]	; (da94 <am_hal_ctimer_period_set+0xac>)
    da22:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    da26:	eb05 0702 	add.w	r7, r5, r2
    da2a:	d027      	beq.n	da7c <am_hal_ctimer_period_set+0x94>
    da2c:	0c1b      	lsrs	r3, r3, #16
    da2e:	041b      	lsls	r3, r3, #16
    da30:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
    da34:	b2a4      	uxth	r4, r4
    da36:	4321      	orrs	r1, r4
    da38:	5029      	str	r1, [r5, r0]
    da3a:	50ab      	str	r3, [r5, r2]
    da3c:	9801      	ldr	r0, [sp, #4]
    da3e:	b002      	add	sp, #8
    da40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    da44:	f000 ba7c 	b.w	df40 <am_hal_interrupt_master_set>
    da48:	f64f 72ff 	movw	r2, #65535	; 0xffff
    da4c:	4296      	cmp	r6, r2
    da4e:	ea4f 4104 	mov.w	r1, r4, lsl #16
    da52:	4623      	mov	r3, r4
    da54:	eba4 0407 	sub.w	r4, r4, r7
    da58:	d1e2      	bne.n	da20 <am_hal_ctimer_period_set+0x38>
    da5a:	b2a4      	uxth	r4, r4
    da5c:	4321      	orrs	r1, r4
    da5e:	5029      	str	r1, [r5, r0]
    da60:	9801      	ldr	r0, [sp, #4]
    da62:	b002      	add	sp, #8
    da64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    da68:	f000 ba6a 	b.w	df40 <am_hal_interrupt_master_set>
    da6c:	0c12      	lsrs	r2, r2, #16
    da6e:	f402 72c0 	and.w	r2, r2, #384	; 0x180
    da72:	2a80      	cmp	r2, #128	; 0x80
    da74:	d0e8      	beq.n	da48 <am_hal_ctimer_period_set+0x60>
    da76:	4f07      	ldr	r7, [pc, #28]	; (da94 <am_hal_ctimer_period_set+0xac>)
    da78:	2100      	movs	r1, #0
    da7a:	442f      	add	r7, r5
    da7c:	b2a4      	uxth	r4, r4
    da7e:	4321      	orrs	r1, r4
    da80:	6039      	str	r1, [r7, #0]
    da82:	9801      	ldr	r0, [sp, #4]
    da84:	b002      	add	sp, #8
    da86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    da8a:	f000 ba59 	b.w	df40 <am_hal_interrupt_master_set>
    da8e:	bf00      	nop
    da90:	40008004 	.word	0x40008004
    da94:	40008008 	.word	0x40008008
    da98:	4000800c 	.word	0x4000800c

0000da9c <am_hal_ctimer_aux_period_set>:
    da9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    daa0:	b082      	sub	sp, #8
    daa2:	0145      	lsls	r5, r0, #5
    daa4:	460e      	mov	r6, r1
    daa6:	4614      	mov	r4, r2
    daa8:	461f      	mov	r7, r3
    daaa:	f000 fa45 	bl	df38 <am_hal_interrupt_master_disable>
    daae:	f8df 809c 	ldr.w	r8, [pc, #156]	; db4c <am_hal_ctimer_aux_period_set+0xb0>
    dab2:	9001      	str	r0, [sp, #4]
    dab4:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    dab8:	f855 2008 	ldr.w	r2, [r5, r8]
    dabc:	4821      	ldr	r0, [pc, #132]	; (db44 <am_hal_ctimer_aux_period_set+0xa8>)
    dabe:	d02f      	beq.n	db20 <am_hal_ctimer_aux_period_set+0x84>
    dac0:	f402 72c0 	and.w	r2, r2, #384	; 0x180
    dac4:	2a80      	cmp	r2, #128	; 0x80
    dac6:	d019      	beq.n	dafc <am_hal_ctimer_aux_period_set+0x60>
    dac8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    dacc:	2100      	movs	r1, #0
    dace:	4296      	cmp	r6, r2
    dad0:	460b      	mov	r3, r1
    dad2:	d01c      	beq.n	db0e <am_hal_ctimer_aux_period_set+0x72>
    dad4:	4a1c      	ldr	r2, [pc, #112]	; (db48 <am_hal_ctimer_aux_period_set+0xac>)
    dad6:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    dada:	eb05 0702 	add.w	r7, r5, r2
    dade:	d027      	beq.n	db30 <am_hal_ctimer_aux_period_set+0x94>
    dae0:	0c1b      	lsrs	r3, r3, #16
    dae2:	041b      	lsls	r3, r3, #16
    dae4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
    dae8:	b2a4      	uxth	r4, r4
    daea:	4321      	orrs	r1, r4
    daec:	5029      	str	r1, [r5, r0]
    daee:	50ab      	str	r3, [r5, r2]
    daf0:	9801      	ldr	r0, [sp, #4]
    daf2:	b002      	add	sp, #8
    daf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    daf8:	f000 ba22 	b.w	df40 <am_hal_interrupt_master_set>
    dafc:	f64f 72ff 	movw	r2, #65535	; 0xffff
    db00:	4296      	cmp	r6, r2
    db02:	ea4f 4104 	mov.w	r1, r4, lsl #16
    db06:	4623      	mov	r3, r4
    db08:	eba4 0407 	sub.w	r4, r4, r7
    db0c:	d1e2      	bne.n	dad4 <am_hal_ctimer_aux_period_set+0x38>
    db0e:	b2a4      	uxth	r4, r4
    db10:	4321      	orrs	r1, r4
    db12:	5029      	str	r1, [r5, r0]
    db14:	9801      	ldr	r0, [sp, #4]
    db16:	b002      	add	sp, #8
    db18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    db1c:	f000 ba10 	b.w	df40 <am_hal_interrupt_master_set>
    db20:	0c12      	lsrs	r2, r2, #16
    db22:	f402 72c0 	and.w	r2, r2, #384	; 0x180
    db26:	2a80      	cmp	r2, #128	; 0x80
    db28:	d0e8      	beq.n	dafc <am_hal_ctimer_aux_period_set+0x60>
    db2a:	4f07      	ldr	r7, [pc, #28]	; (db48 <am_hal_ctimer_aux_period_set+0xac>)
    db2c:	2100      	movs	r1, #0
    db2e:	442f      	add	r7, r5
    db30:	b2a4      	uxth	r4, r4
    db32:	4321      	orrs	r1, r4
    db34:	6039      	str	r1, [r7, #0]
    db36:	9801      	ldr	r0, [sp, #4]
    db38:	b002      	add	sp, #8
    db3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    db3e:	f000 b9ff 	b.w	df40 <am_hal_interrupt_master_set>
    db42:	bf00      	nop
    db44:	40008014 	.word	0x40008014
    db48:	40008018 	.word	0x40008018
    db4c:	4000800c 	.word	0x4000800c

0000db50 <am_hal_ctimer_int_enable>:
    db50:	b510      	push	{r4, lr}
    db52:	b082      	sub	sp, #8
    db54:	4604      	mov	r4, r0
    db56:	f000 f9ef 	bl	df38 <am_hal_interrupt_master_disable>
    db5a:	4a06      	ldr	r2, [pc, #24]	; (db74 <am_hal_ctimer_int_enable+0x24>)
    db5c:	9001      	str	r0, [sp, #4]
    db5e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    db62:	4323      	orrs	r3, r4
    db64:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    db68:	9801      	ldr	r0, [sp, #4]
    db6a:	b002      	add	sp, #8
    db6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    db70:	f000 b9e6 	b.w	df40 <am_hal_interrupt_master_set>
    db74:	40008000 	.word	0x40008000

0000db78 <am_hal_ctimer_int_clear>:
    db78:	b510      	push	{r4, lr}
    db7a:	b082      	sub	sp, #8
    db7c:	4604      	mov	r4, r0
    db7e:	f000 f9db 	bl	df38 <am_hal_interrupt_master_disable>
    db82:	4b05      	ldr	r3, [pc, #20]	; (db98 <am_hal_ctimer_int_clear+0x20>)
    db84:	9001      	str	r0, [sp, #4]
    db86:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
    db8a:	9801      	ldr	r0, [sp, #4]
    db8c:	b002      	add	sp, #8
    db8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    db92:	f000 b9d5 	b.w	df40 <am_hal_interrupt_master_set>
    db96:	bf00      	nop
    db98:	40008000 	.word	0x40008000

0000db9c <am_hal_flash_delay>:
    db9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    dba2:	075b      	lsls	r3, r3, #29
    dba4:	bf46      	itte	mi
    dba6:	0040      	lslmi	r0, r0, #1
    dba8:	230e      	movmi	r3, #14
    dbaa:	230b      	movpl	r3, #11
    dbac:	4298      	cmp	r0, r3
    dbae:	d902      	bls.n	dbb6 <am_hal_flash_delay+0x1a>
    dbb0:	4a01      	ldr	r2, [pc, #4]	; (dbb8 <am_hal_flash_delay+0x1c>)
    dbb2:	1ac0      	subs	r0, r0, r3
    dbb4:	4710      	bx	r2
    dbb6:	4770      	bx	lr
    dbb8:	0800009d 	.word	0x0800009d

0000dbbc <am_hal_flash_delay_status_check>:
    dbbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dbc0:	f89d c020 	ldrb.w	ip, [sp, #32]
    dbc4:	f8df 805c 	ldr.w	r8, [pc, #92]	; dc24 <am_hal_flash_delay_status_check+0x68>
    dbc8:	4604      	mov	r4, r0
    dbca:	460d      	mov	r5, r1
    dbcc:	4616      	mov	r6, r2
    dbce:	461f      	mov	r7, r3
    dbd0:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    dbd4:	f1bc 0f00 	cmp.w	ip, #0
    dbd8:	d00a      	beq.n	dbf0 <am_hal_flash_delay_status_check+0x34>
    dbda:	e01a      	b.n	dc12 <am_hal_flash_delay_status_check+0x56>
    dbdc:	b1f4      	cbz	r4, dc1c <am_hal_flash_delay_status_check+0x60>
    dbde:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    dbe2:	f013 0f04 	tst.w	r3, #4
    dbe6:	bf0c      	ite	eq
    dbe8:	2005      	moveq	r0, #5
    dbea:	2012      	movne	r0, #18
    dbec:	3c01      	subs	r4, #1
    dbee:	47c0      	blx	r8
    dbf0:	6828      	ldr	r0, [r5, #0]
    dbf2:	4030      	ands	r0, r6
    dbf4:	42b8      	cmp	r0, r7
    dbf6:	d0f1      	beq.n	dbdc <am_hal_flash_delay_status_check+0x20>
    dbf8:	2000      	movs	r0, #0
    dbfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dbfe:	b16c      	cbz	r4, dc1c <am_hal_flash_delay_status_check+0x60>
    dc00:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    dc04:	f013 0f04 	tst.w	r3, #4
    dc08:	bf0c      	ite	eq
    dc0a:	2005      	moveq	r0, #5
    dc0c:	2012      	movne	r0, #18
    dc0e:	3c01      	subs	r4, #1
    dc10:	47c0      	blx	r8
    dc12:	6828      	ldr	r0, [r5, #0]
    dc14:	4030      	ands	r0, r6
    dc16:	42b8      	cmp	r0, r7
    dc18:	d1f1      	bne.n	dbfe <am_hal_flash_delay_status_check+0x42>
    dc1a:	e7ed      	b.n	dbf8 <am_hal_flash_delay_status_check+0x3c>
    dc1c:	2004      	movs	r0, #4
    dc1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dc22:	bf00      	nop
    dc24:	0800009d 	.word	0x0800009d

0000dc28 <am_hal_flash_load_ui32>:
    dc28:	4b00      	ldr	r3, [pc, #0]	; (dc2c <am_hal_flash_load_ui32+0x4>)
    dc2a:	4718      	bx	r3
    dc2c:	08000075 	.word	0x08000075

0000dc30 <am_hal_flash_store_ui32>:
    dc30:	4b01      	ldr	r3, [pc, #4]	; (dc38 <am_hal_flash_store_ui32+0x8>)
    dc32:	f043 0301 	orr.w	r3, r3, #1
    dc36:	4718      	bx	r3
    dc38:	10001010 	.word	0x10001010

0000dc3c <am_hal_gpio_pinconfig>:
    dc3c:	2831      	cmp	r0, #49	; 0x31
    dc3e:	f200 80c3 	bhi.w	ddc8 <am_hal_gpio_pinconfig+0x18c>
    dc42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dc46:	4604      	mov	r4, r0
    dc48:	f011 07e0 	ands.w	r7, r1, #224	; 0xe0
    dc4c:	f001 0007 	and.w	r0, r1, #7
    dc50:	b085      	sub	sp, #20
    dc52:	f3c1 03c1 	ubfx	r3, r1, #3, #2
    dc56:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    dc5a:	d00f      	beq.n	dc7c <am_hal_gpio_pinconfig+0x40>
    dc5c:	f3c1 1642 	ubfx	r6, r1, #5, #3
    dc60:	1db5      	adds	r5, r6, #6
    dc62:	f005 0507 	and.w	r5, r5, #7
    dc66:	2d03      	cmp	r5, #3
    dc68:	f042 0201 	orr.w	r2, r2, #1
    dc6c:	f240 80ae 	bls.w	ddcc <am_hal_gpio_pinconfig+0x190>
    dc70:	2fc0      	cmp	r7, #192	; 0xc0
    dc72:	f000 80e1 	beq.w	de38 <am_hal_gpio_pinconfig+0x1fc>
    dc76:	2f20      	cmp	r7, #32
    dc78:	f000 80e3 	beq.w	de42 <am_hal_gpio_pinconfig+0x206>
    dc7c:	b163      	cbz	r3, dc98 <am_hal_gpio_pinconfig+0x5c>
    dc7e:	2b01      	cmp	r3, #1
    dc80:	f000 80d3 	beq.w	de2a <am_hal_gpio_pinconfig+0x1ee>
    dc84:	2b02      	cmp	r3, #2
    dc86:	f040 80c9 	bne.w	de1c <am_hal_gpio_pinconfig+0x1e0>
    dc8a:	4b79      	ldr	r3, [pc, #484]	; (de70 <am_hal_gpio_pinconfig+0x234>)
    dc8c:	5d1b      	ldrb	r3, [r3, r4]
    dc8e:	075b      	lsls	r3, r3, #29
    dc90:	f140 80c4 	bpl.w	de1c <am_hal_gpio_pinconfig+0x1e0>
    dc94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    dc98:	4b76      	ldr	r3, [pc, #472]	; (de74 <am_hal_gpio_pinconfig+0x238>)
    dc9a:	5d1b      	ldrb	r3, [r3, r4]
    dc9c:	4103      	asrs	r3, r0
    dc9e:	005b      	lsls	r3, r3, #1
    dca0:	f003 0302 	and.w	r3, r3, #2
    dca4:	4313      	orrs	r3, r2
    dca6:	4a74      	ldr	r2, [pc, #464]	; (de78 <am_hal_gpio_pinconfig+0x23c>)
    dca8:	5d12      	ldrb	r2, [r2, r4]
    dcaa:	4282      	cmp	r2, r0
    dcac:	f000 8099 	beq.w	dde2 <am_hal_gpio_pinconfig+0x1a6>
    dcb0:	f3c1 3000 	ubfx	r0, r1, #12, #1
    dcb4:	f3c1 2581 	ubfx	r5, r1, #10, #2
    dcb8:	f3c1 3280 	ubfx	r2, r1, #14, #1
    dcbc:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    dcc0:	0a88      	lsrs	r0, r1, #10
    dcc2:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    dcc6:	f000 0008 	and.w	r0, r0, #8
    dcca:	4302      	orrs	r2, r0
    dccc:	f3c1 2007 	ubfx	r0, r1, #8, #8
    dcd0:	f000 050c 	and.w	r5, r0, #12
    dcd4:	2d04      	cmp	r5, #4
    dcd6:	f000 80a5 	beq.w	de24 <am_hal_gpio_pinconfig+0x1e8>
    dcda:	4d68      	ldr	r5, [pc, #416]	; (de7c <am_hal_gpio_pinconfig+0x240>)
    dcdc:	682d      	ldr	r5, [r5, #0]
    dcde:	eba1 0805 	sub.w	r8, r1, r5
    dce2:	fab8 f888 	clz	r8, r8
    dce6:	ea4f 1858 	mov.w	r8, r8, lsr #5
    dcea:	f010 0f60 	tst.w	r0, #96	; 0x60
    dcee:	bf04      	itt	eq
    dcf0:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
    dcf4:	f360 0200 	bfieq	r2, r0, #0, #1
    dcf8:	00a0      	lsls	r0, r4, #2
    dcfa:	f3c1 2101 	ubfx	r1, r1, #8, #2
    dcfe:	2902      	cmp	r1, #2
    dd00:	d05c      	beq.n	ddbc <am_hal_gpio_pinconfig+0x180>
    dd02:	2903      	cmp	r1, #3
    dd04:	d058      	beq.n	ddb8 <am_hal_gpio_pinconfig+0x17c>
    dd06:	2901      	cmp	r1, #1
    dd08:	ea4f 01c4 	mov.w	r1, r4, lsl #3
    dd0c:	bf08      	it	eq
    dd0e:	f043 0304 	orreq.w	r3, r3, #4
    dd12:	f001 0118 	and.w	r1, r1, #24
    dd16:	2700      	movs	r7, #0
    dd18:	f000 001c 	and.w	r0, r0, #28
    dd1c:	fa02 f600 	lsl.w	r6, r2, r0
    dd20:	220f      	movs	r2, #15
    dd22:	4082      	lsls	r2, r0
    dd24:	43d2      	mvns	r2, r2
    dd26:	f04f 09ff 	mov.w	r9, #255	; 0xff
    dd2a:	fa03 f501 	lsl.w	r5, r3, r1
    dd2e:	fa09 f901 	lsl.w	r9, r9, r1
    dd32:	9201      	str	r2, [sp, #4]
    dd34:	f000 f900 	bl	df38 <am_hal_interrupt_master_disable>
    dd38:	f024 0a03 	bic.w	sl, r4, #3
    dd3c:	ea4f 0b54 	mov.w	fp, r4, lsr #1
    dd40:	f10a 4c80 	add.w	ip, sl, #1073741824	; 0x40000000
    dd44:	4b4e      	ldr	r3, [pc, #312]	; (de80 <am_hal_gpio_pinconfig+0x244>)
    dd46:	494f      	ldr	r1, [pc, #316]	; (de84 <am_hal_gpio_pinconfig+0x248>)
    dd48:	9a01      	ldr	r2, [sp, #4]
    dd4a:	9003      	str	r0, [sp, #12]
    dd4c:	ea6f 0909 	mvn.w	r9, r9
    dd50:	f02b 0b03 	bic.w	fp, fp, #3
    dd54:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
    dd58:	f1b8 0f00 	cmp.w	r8, #0
    dd5c:	d00b      	beq.n	dd76 <am_hal_gpio_pinconfig+0x13a>
    dd5e:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
    dd62:	f004 081f 	and.w	r8, r4, #31
    dd66:	4848      	ldr	r0, [pc, #288]	; (de88 <am_hal_gpio_pinconfig+0x24c>)
    dd68:	f00e 0e04 	and.w	lr, lr, #4
    dd6c:	2401      	movs	r4, #1
    dd6e:	fa04 f408 	lsl.w	r4, r4, r8
    dd72:	f84e 4000 	str.w	r4, [lr, r0]
    dd76:	4845      	ldr	r0, [pc, #276]	; (de8c <am_hal_gpio_pinconfig+0x250>)
    dd78:	2473      	movs	r4, #115	; 0x73
    dd7a:	6604      	str	r4, [r0, #96]	; 0x60
    dd7c:	f8dc 4000 	ldr.w	r4, [ip]
    dd80:	ea04 0409 	and.w	r4, r4, r9
    dd84:	4325      	orrs	r5, r4
    dd86:	f8cc 5000 	str.w	r5, [ip]
    dd8a:	f85b 4003 	ldr.w	r4, [fp, r3]
    dd8e:	4022      	ands	r2, r4
    dd90:	4332      	orrs	r2, r6
    dd92:	f84b 2003 	str.w	r2, [fp, r3]
    dd96:	f85a 3001 	ldr.w	r3, [sl, r1]
    dd9a:	ea03 0909 	and.w	r9, r3, r9
    dd9e:	2400      	movs	r4, #0
    dda0:	ea49 0707 	orr.w	r7, r9, r7
    dda4:	f84a 7001 	str.w	r7, [sl, r1]
    dda8:	6604      	str	r4, [r0, #96]	; 0x60
    ddaa:	9803      	ldr	r0, [sp, #12]
    ddac:	f000 f8c8 	bl	df40 <am_hal_interrupt_master_set>
    ddb0:	4620      	mov	r0, r4
    ddb2:	b005      	add	sp, #20
    ddb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ddb8:	f043 0304 	orr.w	r3, r3, #4
    ddbc:	00e1      	lsls	r1, r4, #3
    ddbe:	f001 0118 	and.w	r1, r1, #24
    ddc2:	2701      	movs	r7, #1
    ddc4:	408f      	lsls	r7, r1
    ddc6:	e7a7      	b.n	dd18 <am_hal_gpio_pinconfig+0xdc>
    ddc8:	2006      	movs	r0, #6
    ddca:	4770      	bx	lr
    ddcc:	4d28      	ldr	r5, [pc, #160]	; (de70 <am_hal_gpio_pinconfig+0x234>)
    ddce:	5d2d      	ldrb	r5, [r5, r4]
    ddd0:	3e02      	subs	r6, #2
    ddd2:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    ddd6:	07ee      	lsls	r6, r5, #31
    ddd8:	d536      	bpl.n	de48 <am_hal_gpio_pinconfig+0x20c>
    ddda:	2b00      	cmp	r3, #0
    dddc:	f43f af5c 	beq.w	dc98 <am_hal_gpio_pinconfig+0x5c>
    dde0:	e74d      	b.n	dc7e <am_hal_gpio_pinconfig+0x42>
    dde2:	f3c1 4202 	ubfx	r2, r1, #16, #3
    dde6:	2a07      	cmp	r2, #7
    dde8:	d030      	beq.n	de4c <am_hal_gpio_pinconfig+0x210>
    ddea:	4d29      	ldr	r5, [pc, #164]	; (de90 <am_hal_gpio_pinconfig+0x254>)
    ddec:	f3c1 40c1 	ubfx	r0, r1, #19, #2
    ddf0:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    ddf4:	f815 0024 	ldrb.w	r0, [r5, r4, lsl #2]
    ddf8:	4290      	cmp	r0, r2
    ddfa:	d029      	beq.n	de50 <am_hal_gpio_pinconfig+0x214>
    ddfc:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    de00:	00a0      	lsls	r0, r4, #2
    de02:	786e      	ldrb	r6, [r5, #1]
    de04:	4296      	cmp	r6, r2
    de06:	d02d      	beq.n	de64 <am_hal_gpio_pinconfig+0x228>
    de08:	78ae      	ldrb	r6, [r5, #2]
    de0a:	4296      	cmp	r6, r2
    de0c:	d02c      	beq.n	de68 <am_hal_gpio_pinconfig+0x22c>
    de0e:	78ed      	ldrb	r5, [r5, #3]
    de10:	4295      	cmp	r5, r2
    de12:	d02b      	beq.n	de6c <am_hal_gpio_pinconfig+0x230>
    de14:	481f      	ldr	r0, [pc, #124]	; (de94 <am_hal_gpio_pinconfig+0x258>)
    de16:	b005      	add	sp, #20
    de18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de1c:	481e      	ldr	r0, [pc, #120]	; (de98 <am_hal_gpio_pinconfig+0x25c>)
    de1e:	b005      	add	sp, #20
    de20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de24:	f04f 0801 	mov.w	r8, #1
    de28:	e75f      	b.n	dcea <am_hal_gpio_pinconfig+0xae>
    de2a:	4b11      	ldr	r3, [pc, #68]	; (de70 <am_hal_gpio_pinconfig+0x234>)
    de2c:	5d1b      	ldrb	r3, [r3, r4]
    de2e:	079d      	lsls	r5, r3, #30
    de30:	d5f4      	bpl.n	de1c <am_hal_gpio_pinconfig+0x1e0>
    de32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    de36:	e72f      	b.n	dc98 <am_hal_gpio_pinconfig+0x5c>
    de38:	2c14      	cmp	r4, #20
    de3a:	f43f af1f 	beq.w	dc7c <am_hal_gpio_pinconfig+0x40>
    de3e:	4817      	ldr	r0, [pc, #92]	; (de9c <am_hal_gpio_pinconfig+0x260>)
    de40:	e7b7      	b.n	ddb2 <am_hal_gpio_pinconfig+0x176>
    de42:	2c14      	cmp	r4, #20
    de44:	f47f af1a 	bne.w	dc7c <am_hal_gpio_pinconfig+0x40>
    de48:	4815      	ldr	r0, [pc, #84]	; (dea0 <am_hal_gpio_pinconfig+0x264>)
    de4a:	e7b2      	b.n	ddb2 <am_hal_gpio_pinconfig+0x176>
    de4c:	4815      	ldr	r0, [pc, #84]	; (dea4 <am_hal_gpio_pinconfig+0x268>)
    de4e:	e7b0      	b.n	ddb2 <am_hal_gpio_pinconfig+0x176>
    de50:	2200      	movs	r2, #0
    de52:	00a0      	lsls	r0, r4, #2
    de54:	0052      	lsls	r2, r2, #1
    de56:	f3c1 5540 	ubfx	r5, r1, #21, #1
    de5a:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
    de5e:	f04f 0800 	mov.w	r8, #0
    de62:	e74a      	b.n	dcfa <am_hal_gpio_pinconfig+0xbe>
    de64:	2201      	movs	r2, #1
    de66:	e7f5      	b.n	de54 <am_hal_gpio_pinconfig+0x218>
    de68:	2202      	movs	r2, #2
    de6a:	e7f3      	b.n	de54 <am_hal_gpio_pinconfig+0x218>
    de6c:	2203      	movs	r2, #3
    de6e:	e7f1      	b.n	de54 <am_hal_gpio_pinconfig+0x218>
    de70:	0000e8f4 	.word	0x0000e8f4
    de74:	0000e928 	.word	0x0000e928
    de78:	0000ea24 	.word	0x0000ea24
    de7c:	0000e8ec 	.word	0x0000e8ec
    de80:	40010040 	.word	0x40010040
    de84:	400100e0 	.word	0x400100e0
    de88:	400100b4 	.word	0x400100b4
    de8c:	40010000 	.word	0x40010000
    de90:	0000e95c 	.word	0x0000e95c
    de94:	08000104 	.word	0x08000104
    de98:	08000102 	.word	0x08000102
    de9c:	08000101 	.word	0x08000101
    dea0:	08000100 	.word	0x08000100
    dea4:	08000103 	.word	0x08000103

0000dea8 <am_hal_gpio_state_write>:
    dea8:	2831      	cmp	r0, #49	; 0x31
    deaa:	d81a      	bhi.n	dee2 <am_hal_gpio_state_write+0x3a>
    deac:	b570      	push	{r4, r5, r6, lr}
    deae:	2905      	cmp	r1, #5
    deb0:	b082      	sub	sp, #8
    deb2:	460d      	mov	r5, r1
    deb4:	d812      	bhi.n	dedc <am_hal_gpio_state_write+0x34>
    deb6:	f000 031f 	and.w	r3, r0, #31
    deba:	2201      	movs	r2, #1
    debc:	08c0      	lsrs	r0, r0, #3
    debe:	fa02 f603 	lsl.w	r6, r2, r3
    dec2:	f000 0404 	and.w	r4, r0, #4
    dec6:	f000 f837 	bl	df38 <am_hal_interrupt_master_disable>
    deca:	3d01      	subs	r5, #1
    decc:	9001      	str	r0, [sp, #4]
    dece:	2d04      	cmp	r5, #4
    ded0:	d821      	bhi.n	df16 <am_hal_gpio_state_write+0x6e>
    ded2:	e8df f005 	tbb	[pc, r5]
    ded6:	1512      	.short	0x1512
    ded8:	1d1a      	.short	0x1d1a
    deda:	08          	.byte	0x08
    dedb:	00          	.byte	0x00
    dedc:	2006      	movs	r0, #6
    dede:	b002      	add	sp, #8
    dee0:	bd70      	pop	{r4, r5, r6, pc}
    dee2:	2005      	movs	r0, #5
    dee4:	4770      	bx	lr
    dee6:	4a0d      	ldr	r2, [pc, #52]	; (df1c <am_hal_gpio_state_write+0x74>)
    dee8:	58a3      	ldr	r3, [r4, r2]
    deea:	4073      	eors	r3, r6
    deec:	50a3      	str	r3, [r4, r2]
    deee:	9801      	ldr	r0, [sp, #4]
    def0:	f000 f826 	bl	df40 <am_hal_interrupt_master_set>
    def4:	2000      	movs	r0, #0
    def6:	b002      	add	sp, #8
    def8:	bd70      	pop	{r4, r5, r6, pc}
    defa:	4b09      	ldr	r3, [pc, #36]	; (df20 <am_hal_gpio_state_write+0x78>)
    defc:	50e6      	str	r6, [r4, r3]
    defe:	e7f6      	b.n	deee <am_hal_gpio_state_write+0x46>
    df00:	4a08      	ldr	r2, [pc, #32]	; (df24 <am_hal_gpio_state_write+0x7c>)
    df02:	58a3      	ldr	r3, [r4, r2]
    df04:	4073      	eors	r3, r6
    df06:	50a3      	str	r3, [r4, r2]
    df08:	e7f1      	b.n	deee <am_hal_gpio_state_write+0x46>
    df0a:	4b04      	ldr	r3, [pc, #16]	; (df1c <am_hal_gpio_state_write+0x74>)
    df0c:	50e6      	str	r6, [r4, r3]
    df0e:	e7ee      	b.n	deee <am_hal_gpio_state_write+0x46>
    df10:	4b05      	ldr	r3, [pc, #20]	; (df28 <am_hal_gpio_state_write+0x80>)
    df12:	50e6      	str	r6, [r4, r3]
    df14:	e7eb      	b.n	deee <am_hal_gpio_state_write+0x46>
    df16:	4b05      	ldr	r3, [pc, #20]	; (df2c <am_hal_gpio_state_write+0x84>)
    df18:	50e6      	str	r6, [r4, r3]
    df1a:	e7e8      	b.n	deee <am_hal_gpio_state_write+0x46>
    df1c:	400100b4 	.word	0x400100b4
    df20:	40010090 	.word	0x40010090
    df24:	40010088 	.word	0x40010088
    df28:	400100a8 	.word	0x400100a8
    df2c:	40010098 	.word	0x40010098

0000df30 <am_hal_interrupt_master_enable>:
    df30:	f3ef 8010 	mrs	r0, PRIMASK
    df34:	b662      	cpsie	i
    df36:	4770      	bx	lr

0000df38 <am_hal_interrupt_master_disable>:
    df38:	f3ef 8010 	mrs	r0, PRIMASK
    df3c:	b672      	cpsid	i
    df3e:	4770      	bx	lr

0000df40 <am_hal_interrupt_master_set>:
    df40:	f380 8810 	msr	PRIMASK, r0
    df44:	4770      	bx	lr
    df46:	bf00      	nop

0000df48 <am_hal_mcuctrl_info_get>:
    df48:	2900      	cmp	r1, #0
    df4a:	f000 808f 	beq.w	e06c <am_hal_mcuctrl_info_get+0x124>
    df4e:	2801      	cmp	r0, #1
    df50:	b430      	push	{r4, r5}
    df52:	d006      	beq.n	df62 <am_hal_mcuctrl_info_get+0x1a>
    df54:	2802      	cmp	r0, #2
    df56:	d06d      	beq.n	e034 <am_hal_mcuctrl_info_get+0xec>
    df58:	2800      	cmp	r0, #0
    df5a:	d055      	beq.n	e008 <am_hal_mcuctrl_info_get+0xc0>
    df5c:	2006      	movs	r0, #6
    df5e:	bc30      	pop	{r4, r5}
    df60:	4770      	bx	lr
    df62:	4a43      	ldr	r2, [pc, #268]	; (e070 <am_hal_mcuctrl_info_get+0x128>)
    df64:	4843      	ldr	r0, [pc, #268]	; (e074 <am_hal_mcuctrl_info_get+0x12c>)
    df66:	6813      	ldr	r3, [r2, #0]
    df68:	600b      	str	r3, [r1, #0]
    df6a:	6854      	ldr	r4, [r2, #4]
    df6c:	604c      	str	r4, [r1, #4]
    df6e:	6894      	ldr	r4, [r2, #8]
    df70:	608c      	str	r4, [r1, #8]
    df72:	68d4      	ldr	r4, [r2, #12]
    df74:	60cc      	str	r4, [r1, #12]
    df76:	f3c3 5503 	ubfx	r5, r3, #20, #4
    df7a:	6914      	ldr	r4, [r2, #16]
    df7c:	610c      	str	r4, [r1, #16]
    df7e:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    df82:	4c3d      	ldr	r4, [pc, #244]	; (e078 <am_hal_mcuctrl_info_get+0x130>)
    df84:	6950      	ldr	r0, [r2, #20]
    df86:	6148      	str	r0, [r1, #20]
    df88:	f003 0201 	and.w	r2, r3, #1
    df8c:	f3c3 4303 	ubfx	r3, r3, #16, #4
    df90:	e9c1 2506 	strd	r2, r5, [r1, #24]
    df94:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    df98:	4a38      	ldr	r2, [pc, #224]	; (e07c <am_hal_mcuctrl_info_get+0x134>)
    df9a:	620b      	str	r3, [r1, #32]
    df9c:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    dfa0:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    dfa4:	b2db      	uxtb	r3, r3
    dfa6:	f000 000f 	and.w	r0, r0, #15
    dfaa:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    dfae:	624b      	str	r3, [r1, #36]	; 0x24
    dfb0:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    dfb4:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
    dfb8:	f3c3 1303 	ubfx	r3, r3, #4, #4
    dfbc:	f000 000f 	and.w	r0, r0, #15
    dfc0:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
    dfc4:	628b      	str	r3, [r1, #40]	; 0x28
    dfc6:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    dfca:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
    dfce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    dfd2:	f3c0 1003 	ubfx	r0, r0, #4, #4
    dfd6:	4303      	orrs	r3, r0
    dfd8:	62cb      	str	r3, [r1, #44]	; 0x2c
    dfda:	f8d2 40fc 	ldr.w	r4, [r2, #252]	; 0xfc
    dfde:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    dfe2:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    dfe6:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    dfea:	b2db      	uxtb	r3, r3
    dfec:	041b      	lsls	r3, r3, #16
    dfee:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    dff2:	fa5f fc82 	uxtb.w	ip, r2
    dff6:	ea43 030c 	orr.w	r3, r3, ip
    dffa:	b2c2      	uxtb	r2, r0
    dffc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e000:	630b      	str	r3, [r1, #48]	; 0x30
    e002:	2000      	movs	r0, #0
    e004:	bc30      	pop	{r4, r5}
    e006:	4770      	bx	lr
    e008:	4a19      	ldr	r2, [pc, #100]	; (e070 <am_hal_mcuctrl_info_get+0x128>)
    e00a:	6993      	ldr	r3, [r2, #24]
    e00c:	f3c3 1480 	ubfx	r4, r3, #6, #1
    e010:	700c      	strb	r4, [r1, #0]
    e012:	f8d2 41a0 	ldr.w	r4, [r2, #416]	; 0x1a0
    e016:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e01a:	704b      	strb	r3, [r1, #1]
    e01c:	f3c4 6381 	ubfx	r3, r4, #26, #2
    e020:	710b      	strb	r3, [r1, #4]
    e022:	6953      	ldr	r3, [r2, #20]
    e024:	f3c3 0240 	ubfx	r2, r3, #1, #1
    e028:	f003 0301 	and.w	r3, r3, #1
    e02c:	bc30      	pop	{r4, r5}
    e02e:	708a      	strb	r2, [r1, #2]
    e030:	70cb      	strb	r3, [r1, #3]
    e032:	4770      	bx	lr
    e034:	4a0e      	ldr	r2, [pc, #56]	; (e070 <am_hal_mcuctrl_info_get+0x128>)
    e036:	6848      	ldr	r0, [r1, #4]
    e038:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    e03c:	f003 0401 	and.w	r4, r3, #1
    e040:	700c      	strb	r4, [r1, #0]
    e042:	f3c3 0440 	ubfx	r4, r3, #1, #1
    e046:	720c      	strb	r4, [r1, #8]
    e048:	f8d2 41c4 	ldr.w	r4, [r2, #452]	; 0x1c4
    e04c:	60cc      	str	r4, [r1, #12]
    e04e:	f8d2 41c0 	ldr.w	r4, [r2, #448]	; 0x1c0
    e052:	4320      	orrs	r0, r4
    e054:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e058:	6048      	str	r0, [r1, #4]
    e05a:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    e05e:	740b      	strb	r3, [r1, #16]
    e060:	694b      	ldr	r3, [r1, #20]
    e062:	4313      	orrs	r3, r2
    e064:	2000      	movs	r0, #0
    e066:	bc30      	pop	{r4, r5}
    e068:	614b      	str	r3, [r1, #20]
    e06a:	4770      	bx	lr
    e06c:	2006      	movs	r0, #6
    e06e:	4770      	bx	lr
    e070:	40020000 	.word	0x40020000
    e074:	0000ea58 	.word	0x0000ea58
    e078:	0000ea98 	.word	0x0000ea98
    e07c:	f0000f00 	.word	0xf0000f00

0000e080 <am_hal_sysctrl_sleep>:
    e080:	b510      	push	{r4, lr}
    e082:	b082      	sub	sp, #8
    e084:	4604      	mov	r4, r0
    e086:	f7ff ff57 	bl	df38 <am_hal_interrupt_master_disable>
    e08a:	9001      	str	r0, [sp, #4]
    e08c:	b124      	cbz	r4, e098 <am_hal_sysctrl_sleep+0x18>
    e08e:	4b12      	ldr	r3, [pc, #72]	; (e0d8 <am_hal_sysctrl_sleep+0x58>)
    e090:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    e094:	07db      	lsls	r3, r3, #31
    e096:	d513      	bpl.n	e0c0 <am_hal_sysctrl_sleep+0x40>
    e098:	4a10      	ldr	r2, [pc, #64]	; (e0dc <am_hal_sysctrl_sleep+0x5c>)
    e09a:	6913      	ldr	r3, [r2, #16]
    e09c:	f023 0304 	bic.w	r3, r3, #4
    e0a0:	6113      	str	r3, [r2, #16]
    e0a2:	f3bf 8f4f 	dsb	sy
    e0a6:	4a0e      	ldr	r2, [pc, #56]	; (e0e0 <am_hal_sysctrl_sleep+0x60>)
    e0a8:	4b0e      	ldr	r3, [pc, #56]	; (e0e4 <am_hal_sysctrl_sleep+0x64>)
    e0aa:	6812      	ldr	r2, [r2, #0]
    e0ac:	601a      	str	r2, [r3, #0]
    e0ae:	bf30      	wfi
    e0b0:	f3bf 8f6f 	isb	sy
    e0b4:	9801      	ldr	r0, [sp, #4]
    e0b6:	b002      	add	sp, #8
    e0b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e0bc:	f7ff bf40 	b.w	df40 <am_hal_interrupt_master_set>
    e0c0:	4b09      	ldr	r3, [pc, #36]	; (e0e8 <am_hal_sysctrl_sleep+0x68>)
    e0c2:	681a      	ldr	r2, [r3, #0]
    e0c4:	b912      	cbnz	r2, e0cc <am_hal_sysctrl_sleep+0x4c>
    e0c6:	4a09      	ldr	r2, [pc, #36]	; (e0ec <am_hal_sysctrl_sleep+0x6c>)
    e0c8:	6812      	ldr	r2, [r2, #0]
    e0ca:	601a      	str	r2, [r3, #0]
    e0cc:	4a03      	ldr	r2, [pc, #12]	; (e0dc <am_hal_sysctrl_sleep+0x5c>)
    e0ce:	6913      	ldr	r3, [r2, #16]
    e0d0:	f043 0304 	orr.w	r3, r3, #4
    e0d4:	6113      	str	r3, [r2, #16]
    e0d6:	e7e4      	b.n	e0a2 <am_hal_sysctrl_sleep+0x22>
    e0d8:	40020000 	.word	0x40020000
    e0dc:	e000ed00 	.word	0xe000ed00
    e0e0:	5fff0000 	.word	0x5fff0000
    e0e4:	10001154 	.word	0x10001154
    e0e8:	10001150 	.word	0x10001150
    e0ec:	4ffff000 	.word	0x4ffff000

0000e0f0 <am_bsp_low_power_init>:
    e0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e0f2:	f000 f95f 	bl	e3b4 <am_hal_pwrctrl_low_power_init>
    e0f6:	f000 fa3b 	bl	e570 <am_hal_rtc_osc_disable>
    e0fa:	4b0b      	ldr	r3, [pc, #44]	; (e128 <am_bsp_low_power_init+0x38>)
    e0fc:	4f0b      	ldr	r7, [pc, #44]	; (e12c <am_bsp_low_power_init+0x3c>)
    e0fe:	681e      	ldr	r6, [r3, #0]
    e100:	2400      	movs	r4, #0
    e102:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    e106:	4631      	mov	r1, r6
    e108:	4628      	mov	r0, r5
    e10a:	f7ff fd97 	bl	dc3c <am_hal_gpio_pinconfig>
    e10e:	2103      	movs	r1, #3
    e110:	4628      	mov	r0, r5
    e112:	f7ff fec9 	bl	dea8 <am_hal_gpio_state_write>
    e116:	3401      	adds	r4, #1
    e118:	2100      	movs	r1, #0
    e11a:	4628      	mov	r0, r5
    e11c:	f7ff fec4 	bl	dea8 <am_hal_gpio_state_write>
    e120:	2c05      	cmp	r4, #5
    e122:	d1ee      	bne.n	e102 <am_bsp_low_power_init+0x12>
    e124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e126:	bf00      	nop
    e128:	0000e8f0 	.word	0x0000e8f0
    e12c:	1000101c 	.word	0x1000101c

0000e130 <am_bsp_debug_printf_disable>:
    e130:	b538      	push	{r3, r4, r5, lr}
    e132:	4b17      	ldr	r3, [pc, #92]	; (e190 <am_bsp_debug_printf_disable+0x60>)
    e134:	681c      	ldr	r4, [r3, #0]
    e136:	2c01      	cmp	r4, #1
    e138:	d002      	beq.n	e140 <am_bsp_debug_printf_disable+0x10>
    e13a:	2c02      	cmp	r4, #2
    e13c:	d00c      	beq.n	e158 <am_bsp_debug_printf_disable+0x28>
    e13e:	bd38      	pop	{r3, r4, r5, pc}
    e140:	f000 f870 	bl	e224 <am_hal_itm_disable>
    e144:	2000      	movs	r0, #0
    e146:	f7fe f94f 	bl	c3e8 <am_util_stdio_printf_init>
    e14a:	4b12      	ldr	r3, [pc, #72]	; (e194 <am_bsp_debug_printf_disable+0x64>)
    e14c:	2029      	movs	r0, #41	; 0x29
    e14e:	6819      	ldr	r1, [r3, #0]
    e150:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e154:	f7ff bd72 	b.w	dc3c <am_hal_gpio_pinconfig>
    e158:	4d0f      	ldr	r5, [pc, #60]	; (e198 <am_bsp_debug_printf_disable+0x68>)
    e15a:	6828      	ldr	r0, [r5, #0]
    e15c:	f000 faee 	bl	e73c <am_hal_uart_tx_flush>
    e160:	2000      	movs	r0, #0
    e162:	f7fe f941 	bl	c3e8 <am_util_stdio_printf_init>
    e166:	4621      	mov	r1, r4
    e168:	2200      	movs	r2, #0
    e16a:	6828      	ldr	r0, [r5, #0]
    e16c:	f000 fa6e 	bl	e64c <am_hal_uart_power_control>
    e170:	6828      	ldr	r0, [r5, #0]
    e172:	f000 fa57 	bl	e624 <am_hal_uart_deinitialize>
    e176:	4b07      	ldr	r3, [pc, #28]	; (e194 <am_bsp_debug_printf_disable+0x64>)
    e178:	681c      	ldr	r4, [r3, #0]
    e17a:	2016      	movs	r0, #22
    e17c:	4621      	mov	r1, r4
    e17e:	f7ff fd5d 	bl	dc3c <am_hal_gpio_pinconfig>
    e182:	4621      	mov	r1, r4
    e184:	2017      	movs	r0, #23
    e186:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e18a:	f7ff bd57 	b.w	dc3c <am_hal_gpio_pinconfig>
    e18e:	bf00      	nop
    e190:	1000115c 	.word	0x1000115c
    e194:	0000e8ec 	.word	0x0000e8ec
    e198:	10001158 	.word	0x10001158

0000e19c <am_bsp_itm_printf_enable>:
    e19c:	b500      	push	{lr}
    e19e:	4b0b      	ldr	r3, [pc, #44]	; (e1cc <am_bsp_itm_printf_enable+0x30>)
    e1a0:	b087      	sub	sp, #28
    e1a2:	2201      	movs	r2, #1
    e1a4:	601a      	str	r2, [r3, #0]
    e1a6:	f000 f819 	bl	e1dc <am_hal_itm_enable>
    e1aa:	4b09      	ldr	r3, [pc, #36]	; (e1d0 <am_bsp_itm_printf_enable+0x34>)
    e1ac:	9301      	str	r3, [sp, #4]
    e1ae:	a801      	add	r0, sp, #4
    e1b0:	f000 f9e8 	bl	e584 <am_hal_tpiu_enable>
    e1b4:	4b07      	ldr	r3, [pc, #28]	; (e1d4 <am_bsp_itm_printf_enable+0x38>)
    e1b6:	2029      	movs	r0, #41	; 0x29
    e1b8:	6819      	ldr	r1, [r3, #0]
    e1ba:	f7ff fd3f 	bl	dc3c <am_hal_gpio_pinconfig>
    e1be:	4806      	ldr	r0, [pc, #24]	; (e1d8 <am_bsp_itm_printf_enable+0x3c>)
    e1c0:	f7fe f912 	bl	c3e8 <am_util_stdio_printf_init>
    e1c4:	b007      	add	sp, #28
    e1c6:	f85d fb04 	ldr.w	pc, [sp], #4
    e1ca:	bf00      	nop
    e1cc:	1000115c 	.word	0x1000115c
    e1d0:	000f4240 	.word	0x000f4240
    e1d4:	0000ead8 	.word	0x0000ead8
    e1d8:	0000e2d9 	.word	0x0000e2d9

0000e1dc <am_hal_itm_enable>:
    e1dc:	4a0e      	ldr	r2, [pc, #56]	; (e218 <am_hal_itm_enable+0x3c>)
    e1de:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e1e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    e1e6:	b410      	push	{r4}
    e1e8:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    e1ec:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e1f0:	01db      	lsls	r3, r3, #7
    e1f2:	d5fb      	bpl.n	e1ec <am_hal_itm_enable+0x10>
    e1f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    e1f8:	4c08      	ldr	r4, [pc, #32]	; (e21c <am_hal_itm_enable+0x40>)
    e1fa:	4a09      	ldr	r2, [pc, #36]	; (e220 <am_hal_itm_enable+0x44>)
    e1fc:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    e200:	200f      	movs	r0, #15
    e202:	f04f 31ff 	mov.w	r1, #4294967295
    e206:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    e20a:	f85d 4b04 	ldr.w	r4, [sp], #4
    e20e:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    e212:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    e216:	4770      	bx	lr
    e218:	e000ed00 	.word	0xe000ed00
    e21c:	c5acce55 	.word	0xc5acce55
    e220:	00150511 	.word	0x00150511

0000e224 <am_hal_itm_disable>:
    e224:	4b27      	ldr	r3, [pc, #156]	; (e2c4 <am_hal_itm_disable+0xa0>)
    e226:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    e22a:	b510      	push	{r4, lr}
    e22c:	b9cb      	cbnz	r3, e262 <am_hal_itm_disable+0x3e>
    e22e:	4a26      	ldr	r2, [pc, #152]	; (e2c8 <am_hal_itm_disable+0xa4>)
    e230:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e234:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    e238:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    e23c:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e240:	01d9      	lsls	r1, r3, #7
    e242:	d5fb      	bpl.n	e23c <am_hal_itm_disable+0x18>
    e244:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    e248:	4c20      	ldr	r4, [pc, #128]	; (e2cc <am_hal_itm_disable+0xa8>)
    e24a:	4a21      	ldr	r2, [pc, #132]	; (e2d0 <am_hal_itm_disable+0xac>)
    e24c:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    e250:	200f      	movs	r0, #15
    e252:	f04f 31ff 	mov.w	r1, #4294967295
    e256:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    e25a:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    e25e:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    e262:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    e266:	f8d4 3e80 	ldr.w	r3, [r4, #3712]	; 0xe80
    e26a:	021b      	lsls	r3, r3, #8
    e26c:	d4fb      	bmi.n	e266 <am_hal_itm_disable+0x42>
    e26e:	f44f 7048 	mov.w	r0, #800	; 0x320
    e272:	f7ff fc93 	bl	db9c <am_hal_flash_delay>
    e276:	4b15      	ldr	r3, [pc, #84]	; (e2cc <am_hal_itm_disable+0xa8>)
    e278:	4916      	ldr	r1, [pc, #88]	; (e2d4 <am_hal_itm_disable+0xb0>)
    e27a:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
    e27e:	2064      	movs	r0, #100	; 0x64
    e280:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    e284:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    e288:	f023 0301 	bic.w	r3, r3, #1
    e28c:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
    e290:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    e294:	420b      	tst	r3, r1
    e296:	d1fb      	bne.n	e290 <am_hal_itm_disable+0x6c>
    e298:	3801      	subs	r0, #1
    e29a:	d1f3      	bne.n	e284 <am_hal_itm_disable+0x60>
    e29c:	4a0a      	ldr	r2, [pc, #40]	; (e2c8 <am_hal_itm_disable+0xa4>)
    e29e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e2a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    e2a6:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    e2aa:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e2ae:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    e2b2:	d1fa      	bne.n	e2aa <am_hal_itm_disable+0x86>
    e2b4:	4a03      	ldr	r2, [pc, #12]	; (e2c4 <am_hal_itm_disable+0xa0>)
    e2b6:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    e2ba:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
    e2be:	2b00      	cmp	r3, #0
    e2c0:	d1fb      	bne.n	e2ba <am_hal_itm_disable+0x96>
    e2c2:	bd10      	pop	{r4, pc}
    e2c4:	40020000 	.word	0x40020000
    e2c8:	e000ed00 	.word	0xe000ed00
    e2cc:	c5acce55 	.word	0xc5acce55
    e2d0:	00150511 	.word	0x00150511
    e2d4:	00800001 	.word	0x00800001

0000e2d8 <am_hal_itm_print>:
    e2d8:	7803      	ldrb	r3, [r0, #0]
    e2da:	b1a3      	cbz	r3, e306 <am_hal_itm_print+0x2e>
    e2dc:	4603      	mov	r3, r0
    e2de:	f1c0 0c01 	rsb	ip, r0, #1
    e2e2:	eb0c 0103 	add.w	r1, ip, r3
    e2e6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    e2ea:	2a00      	cmp	r2, #0
    e2ec:	d1f9      	bne.n	e2e2 <am_hal_itm_print+0xa>
    e2ee:	4401      	add	r1, r0
    e2f0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    e2f4:	f810 cb01 	ldrb.w	ip, [r0], #1
    e2f8:	6813      	ldr	r3, [r2, #0]
    e2fa:	2b00      	cmp	r3, #0
    e2fc:	d0fc      	beq.n	e2f8 <am_hal_itm_print+0x20>
    e2fe:	4288      	cmp	r0, r1
    e300:	f882 c000 	strb.w	ip, [r2]
    e304:	d1f6      	bne.n	e2f4 <am_hal_itm_print+0x1c>
    e306:	4770      	bx	lr

0000e308 <am_hal_pwrctrl_periph_enable>:
    e308:	b570      	push	{r4, r5, r6, lr}
    e30a:	b082      	sub	sp, #8
    e30c:	4604      	mov	r4, r0
    e30e:	f7ff fe13 	bl	df38 <am_hal_interrupt_master_disable>
    e312:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e316:	4e0f      	ldr	r6, [pc, #60]	; (e354 <am_hal_pwrctrl_periph_enable+0x4c>)
    e318:	4d0f      	ldr	r5, [pc, #60]	; (e358 <am_hal_pwrctrl_periph_enable+0x50>)
    e31a:	9001      	str	r0, [sp, #4]
    e31c:	00a4      	lsls	r4, r4, #2
    e31e:	68b3      	ldr	r3, [r6, #8]
    e320:	592a      	ldr	r2, [r5, r4]
    e322:	4313      	orrs	r3, r2
    e324:	60b3      	str	r3, [r6, #8]
    e326:	9801      	ldr	r0, [sp, #4]
    e328:	442c      	add	r4, r5
    e32a:	f7ff fe09 	bl	df40 <am_hal_interrupt_master_set>
    e32e:	20a0      	movs	r0, #160	; 0xa0
    e330:	f7ff fc34 	bl	db9c <am_hal_flash_delay>
    e334:	69b3      	ldr	r3, [r6, #24]
    e336:	6864      	ldr	r4, [r4, #4]
    e338:	4223      	tst	r3, r4
    e33a:	d103      	bne.n	e344 <am_hal_pwrctrl_periph_enable+0x3c>
    e33c:	20a0      	movs	r0, #160	; 0xa0
    e33e:	f7ff fc2d 	bl	db9c <am_hal_flash_delay>
    e342:	69b3      	ldr	r3, [r6, #24]
    e344:	4b03      	ldr	r3, [pc, #12]	; (e354 <am_hal_pwrctrl_periph_enable+0x4c>)
    e346:	699b      	ldr	r3, [r3, #24]
    e348:	4223      	tst	r3, r4
    e34a:	bf0c      	ite	eq
    e34c:	2001      	moveq	r0, #1
    e34e:	2000      	movne	r0, #0
    e350:	b002      	add	sp, #8
    e352:	bd70      	pop	{r4, r5, r6, pc}
    e354:	40021000 	.word	0x40021000
    e358:	0000eadc 	.word	0x0000eadc

0000e35c <am_hal_pwrctrl_periph_disable>:
    e35c:	b570      	push	{r4, r5, r6, lr}
    e35e:	b082      	sub	sp, #8
    e360:	4604      	mov	r4, r0
    e362:	f7ff fde9 	bl	df38 <am_hal_interrupt_master_disable>
    e366:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e36a:	4e10      	ldr	r6, [pc, #64]	; (e3ac <am_hal_pwrctrl_periph_disable+0x50>)
    e36c:	4d10      	ldr	r5, [pc, #64]	; (e3b0 <am_hal_pwrctrl_periph_disable+0x54>)
    e36e:	9001      	str	r0, [sp, #4]
    e370:	00a4      	lsls	r4, r4, #2
    e372:	68b3      	ldr	r3, [r6, #8]
    e374:	592a      	ldr	r2, [r5, r4]
    e376:	ea23 0302 	bic.w	r3, r3, r2
    e37a:	60b3      	str	r3, [r6, #8]
    e37c:	9801      	ldr	r0, [sp, #4]
    e37e:	442c      	add	r4, r5
    e380:	f7ff fdde 	bl	df40 <am_hal_interrupt_master_set>
    e384:	20a0      	movs	r0, #160	; 0xa0
    e386:	f7ff fc09 	bl	db9c <am_hal_flash_delay>
    e38a:	69b3      	ldr	r3, [r6, #24]
    e38c:	6864      	ldr	r4, [r4, #4]
    e38e:	4223      	tst	r3, r4
    e390:	d003      	beq.n	e39a <am_hal_pwrctrl_periph_disable+0x3e>
    e392:	20a0      	movs	r0, #160	; 0xa0
    e394:	f7ff fc02 	bl	db9c <am_hal_flash_delay>
    e398:	69b3      	ldr	r3, [r6, #24]
    e39a:	4b04      	ldr	r3, [pc, #16]	; (e3ac <am_hal_pwrctrl_periph_disable+0x50>)
    e39c:	699b      	ldr	r3, [r3, #24]
    e39e:	4223      	tst	r3, r4
    e3a0:	bf14      	ite	ne
    e3a2:	2001      	movne	r0, #1
    e3a4:	2000      	moveq	r0, #0
    e3a6:	b002      	add	sp, #8
    e3a8:	bd70      	pop	{r4, r5, r6, pc}
    e3aa:	bf00      	nop
    e3ac:	40021000 	.word	0x40021000
    e3b0:	0000eadc 	.word	0x0000eadc

0000e3b4 <am_hal_pwrctrl_low_power_init>:
    e3b4:	b530      	push	{r4, r5, lr}
    e3b6:	4b69      	ldr	r3, [pc, #420]	; (e55c <am_hal_pwrctrl_low_power_init+0x1a8>)
    e3b8:	681a      	ldr	r2, [r3, #0]
    e3ba:	b085      	sub	sp, #20
    e3bc:	b912      	cbnz	r2, e3c4 <am_hal_pwrctrl_low_power_init+0x10>
    e3be:	4a68      	ldr	r2, [pc, #416]	; (e560 <am_hal_pwrctrl_low_power_init+0x1ac>)
    e3c0:	6812      	ldr	r2, [r2, #0]
    e3c2:	601a      	str	r2, [r3, #0]
    e3c4:	4b67      	ldr	r3, [pc, #412]	; (e564 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e3c6:	68db      	ldr	r3, [r3, #12]
    e3c8:	b2db      	uxtb	r3, r3
    e3ca:	2b12      	cmp	r3, #18
    e3cc:	d104      	bne.n	e3d8 <am_hal_pwrctrl_low_power_init+0x24>
    e3ce:	4c66      	ldr	r4, [pc, #408]	; (e568 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e3d0:	6863      	ldr	r3, [r4, #4]
    e3d2:	07d8      	lsls	r0, r3, #31
    e3d4:	f100 8088 	bmi.w	e4e8 <am_hal_pwrctrl_low_power_init+0x134>
    e3d8:	4b62      	ldr	r3, [pc, #392]	; (e564 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e3da:	68da      	ldr	r2, [r3, #12]
    e3dc:	b2d2      	uxtb	r2, r2
    e3de:	2a20      	cmp	r2, #32
    e3e0:	d934      	bls.n	e44c <am_hal_pwrctrl_low_power_init+0x98>
    e3e2:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
    e3e6:	2002      	movs	r0, #2
    e3e8:	f360 4213 	bfi	r2, r0, #16, #4
    e3ec:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    e3f0:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
    e3f4:	2203      	movs	r2, #3
    e3f6:	f362 5117 	bfi	r1, r2, #20, #4
    e3fa:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
    e3fe:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e402:	2405      	movs	r4, #5
    e404:	f364 0103 	bfi	r1, r4, #0, #4
    e408:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e40c:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e410:	f360 1107 	bfi	r1, r0, #4, #4
    e414:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e418:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e41c:	2406      	movs	r4, #6
    e41e:	f364 210b 	bfi	r1, r4, #8, #4
    e422:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e426:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e42a:	2001      	movs	r0, #1
    e42c:	f360 310f 	bfi	r1, r0, #12, #4
    e430:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e434:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e438:	f362 61de 	bfi	r1, r2, #27, #4
    e43c:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e440:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
    e444:	f362 0103 	bfi	r1, r2, #0, #4
    e448:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
    e44c:	4a45      	ldr	r2, [pc, #276]	; (e564 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e44e:	68d3      	ldr	r3, [r2, #12]
    e450:	b2db      	uxtb	r3, r3
    e452:	2b11      	cmp	r3, #17
    e454:	d905      	bls.n	e462 <am_hal_pwrctrl_low_power_init+0xae>
    e456:	f8d2 335c 	ldr.w	r3, [r2, #860]	; 0x35c
    e45a:	f36f 6318 	bfc	r3, #24, #1
    e45e:	f8c2 335c 	str.w	r3, [r2, #860]	; 0x35c
    e462:	2100      	movs	r1, #0
    e464:	200c      	movs	r0, #12
    e466:	f7fe fed5 	bl	d214 <am_hal_cachectrl_control>
    e46a:	4b3f      	ldr	r3, [pc, #252]	; (e568 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e46c:	699b      	ldr	r3, [r3, #24]
    e46e:	f3c3 2500 	ubfx	r5, r3, #8, #1
    e472:	05db      	lsls	r3, r3, #23
    e474:	d420      	bmi.n	e4b8 <am_hal_pwrctrl_low_power_init+0x104>
    e476:	4c3b      	ldr	r4, [pc, #236]	; (e564 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e478:	68e3      	ldr	r3, [r4, #12]
    e47a:	b2db      	uxtb	r3, r3
    e47c:	2b11      	cmp	r3, #17
    e47e:	d84e      	bhi.n	e51e <am_hal_pwrctrl_low_power_init+0x16a>
    e480:	4c38      	ldr	r4, [pc, #224]	; (e564 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e482:	493a      	ldr	r1, [pc, #232]	; (e56c <am_hal_pwrctrl_low_power_init+0x1b8>)
    e484:	7e22      	ldrb	r2, [r4, #24]
    e486:	2001      	movs	r0, #1
    e488:	4302      	orrs	r2, r0
    e48a:	2307      	movs	r3, #7
    e48c:	7622      	strb	r2, [r4, #24]
    e48e:	9000      	str	r0, [sp, #0]
    e490:	461a      	mov	r2, r3
    e492:	f242 7010 	movw	r0, #10000	; 0x2710
    e496:	f7ff fb91 	bl	dbbc <am_hal_flash_delay_status_check>
    e49a:	2800      	cmp	r0, #0
    e49c:	d15a      	bne.n	e554 <am_hal_pwrctrl_low_power_init+0x1a0>
    e49e:	4b32      	ldr	r3, [pc, #200]	; (e568 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e4a0:	681a      	ldr	r2, [r3, #0]
    e4a2:	f042 0201 	orr.w	r2, r2, #1
    e4a6:	601a      	str	r2, [r3, #0]
    e4a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    e4aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    e4ae:	625a      	str	r2, [r3, #36]	; 0x24
    e4b0:	68e3      	ldr	r3, [r4, #12]
    e4b2:	b2db      	uxtb	r3, r3
    e4b4:	2b11      	cmp	r3, #17
    e4b6:	d002      	beq.n	e4be <am_hal_pwrctrl_low_power_init+0x10a>
    e4b8:	2000      	movs	r0, #0
    e4ba:	b005      	add	sp, #20
    e4bc:	bd30      	pop	{r4, r5, pc}
    e4be:	f8d4 335c 	ldr.w	r3, [r4, #860]	; 0x35c
    e4c2:	f360 5356 	bfi	r3, r0, #21, #2
    e4c6:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
    e4ca:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e4ce:	220f      	movs	r2, #15
    e4d0:	f362 138b 	bfi	r3, r2, #6, #6
    e4d4:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e4d8:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e4dc:	f362 0305 	bfi	r3, r2, #0, #6
    e4e0:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e4e4:	b005      	add	sp, #20
    e4e6:	bd30      	pop	{r4, r5, pc}
    e4e8:	f7ff fd26 	bl	df38 <am_hal_interrupt_master_disable>
    e4ec:	9002      	str	r0, [sp, #8]
    e4ee:	68a3      	ldr	r3, [r4, #8]
    e4f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    e4f4:	60a3      	str	r3, [r4, #8]
    e4f6:	9802      	ldr	r0, [sp, #8]
    e4f8:	f7ff fd22 	bl	df40 <am_hal_interrupt_master_set>
    e4fc:	20a0      	movs	r0, #160	; 0xa0
    e4fe:	f7ff fb4d 	bl	db9c <am_hal_flash_delay>
    e502:	69a3      	ldr	r3, [r4, #24]
    e504:	0619      	lsls	r1, r3, #24
    e506:	d403      	bmi.n	e510 <am_hal_pwrctrl_low_power_init+0x15c>
    e508:	20a0      	movs	r0, #160	; 0xa0
    e50a:	f7ff fb47 	bl	db9c <am_hal_flash_delay>
    e50e:	69a3      	ldr	r3, [r4, #24]
    e510:	4b15      	ldr	r3, [pc, #84]	; (e568 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e512:	699b      	ldr	r3, [r3, #24]
    e514:	061a      	lsls	r2, r3, #24
    e516:	f53f af5f 	bmi.w	e3d8 <am_hal_pwrctrl_low_power_init+0x24>
    e51a:	2001      	movs	r0, #1
    e51c:	e7cd      	b.n	e4ba <am_hal_pwrctrl_low_power_init+0x106>
    e51e:	f7ff fd0b 	bl	df38 <am_hal_interrupt_master_disable>
    e522:	9003      	str	r0, [sp, #12]
    e524:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e528:	2219      	movs	r2, #25
    e52a:	f362 138b 	bfi	r3, r2, #6, #6
    e52e:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e532:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
    e536:	210c      	movs	r1, #12
    e538:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e53c:	f361 0205 	bfi	r2, r1, #0, #6
    e540:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
    e544:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    e546:	f365 5296 	bfi	r2, r5, #22, #1
    e54a:	63da      	str	r2, [r3, #60]	; 0x3c
    e54c:	9803      	ldr	r0, [sp, #12]
    e54e:	f7ff fcf7 	bl	df40 <am_hal_interrupt_master_set>
    e552:	e795      	b.n	e480 <am_hal_pwrctrl_low_power_init+0xcc>
    e554:	2004      	movs	r0, #4
    e556:	b005      	add	sp, #20
    e558:	bd30      	pop	{r4, r5, pc}
    e55a:	bf00      	nop
    e55c:	10001150 	.word	0x10001150
    e560:	4ffff000 	.word	0x4ffff000
    e564:	40020000 	.word	0x40020000
    e568:	40021000 	.word	0x40021000
    e56c:	40020018 	.word	0x40020018

0000e570 <am_hal_rtc_osc_disable>:
    e570:	4a03      	ldr	r2, [pc, #12]	; (e580 <am_hal_rtc_osc_disable+0x10>)
    e572:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    e576:	f043 0310 	orr.w	r3, r3, #16
    e57a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    e57e:	4770      	bx	lr
    e580:	40004200 	.word	0x40004200

0000e584 <am_hal_tpiu_enable>:
    e584:	b510      	push	{r4, lr}
    e586:	4b23      	ldr	r3, [pc, #140]	; (e614 <am_hal_tpiu_enable+0x90>)
    e588:	6804      	ldr	r4, [r0, #0]
    e58a:	2200      	movs	r2, #0
    e58c:	b084      	sub	sp, #16
    e58e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    e592:	b334      	cbz	r4, e5e2 <am_hal_tpiu_enable+0x5e>
    e594:	4a20      	ldr	r2, [pc, #128]	; (e618 <am_hal_tpiu_enable+0x94>)
    e596:	4921      	ldr	r1, [pc, #132]	; (e61c <am_hal_tpiu_enable+0x98>)
    e598:	2001      	movs	r0, #1
    e59a:	6058      	str	r0, [r3, #4]
    e59c:	f5a4 4361 	sub.w	r3, r4, #57600	; 0xe100
    e5a0:	a801      	add	r0, sp, #4
    e5a2:	428b      	cmp	r3, r1
    e5a4:	bf88      	it	hi
    e5a6:	4614      	movhi	r4, r2
    e5a8:	f7ff f84a 	bl	d640 <am_hal_clkgen_status_get>
    e5ac:	9b01      	ldr	r3, [sp, #4]
    e5ae:	1c5a      	adds	r2, r3, #1
    e5b0:	d02d      	beq.n	e60e <am_hal_tpiu_enable+0x8a>
    e5b2:	08db      	lsrs	r3, r3, #3
    e5b4:	fbb3 f4f4 	udiv	r4, r3, r4
    e5b8:	3c01      	subs	r4, #1
    e5ba:	b2a4      	uxth	r4, r4
    e5bc:	4b15      	ldr	r3, [pc, #84]	; (e614 <am_hal_tpiu_enable+0x90>)
    e5be:	4a18      	ldr	r2, [pc, #96]	; (e620 <am_hal_tpiu_enable+0x9c>)
    e5c0:	611c      	str	r4, [r3, #16]
    e5c2:	2102      	movs	r1, #2
    e5c4:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
    e5c8:	2000      	movs	r0, #0
    e5ca:	f240 2101 	movw	r1, #513	; 0x201
    e5ce:	f8c3 0f00 	str.w	r0, [r3, #3840]	; 0xf00
    e5d2:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
    e5d6:	f44f 7048 	mov.w	r0, #800	; 0x320
    e5da:	f7ff fadf 	bl	db9c <am_hal_flash_delay>
    e5de:	b004      	add	sp, #16
    e5e0:	bd10      	pop	{r4, pc}
    e5e2:	6902      	ldr	r2, [r0, #16]
    e5e4:	611a      	str	r2, [r3, #16]
    e5e6:	6882      	ldr	r2, [r0, #8]
    e5e8:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    e5ec:	68c1      	ldr	r1, [r0, #12]
    e5ee:	2201      	movs	r2, #1
    e5f0:	3901      	subs	r1, #1
    e5f2:	408a      	lsls	r2, r1
    e5f4:	605a      	str	r2, [r3, #4]
    e5f6:	f8c3 4f00 	str.w	r4, [r3, #3840]	; 0xf00
    e5fa:	4a09      	ldr	r2, [pc, #36]	; (e620 <am_hal_tpiu_enable+0x9c>)
    e5fc:	6843      	ldr	r3, [r0, #4]
    e5fe:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    e602:	f44f 7048 	mov.w	r0, #800	; 0x320
    e606:	f7ff fac9 	bl	db9c <am_hal_flash_delay>
    e60a:	b004      	add	sp, #16
    e60c:	bd10      	pop	{r4, pc}
    e60e:	2405      	movs	r4, #5
    e610:	e7d4      	b.n	e5bc <am_hal_tpiu_enable+0x38>
    e612:	bf00      	nop
    e614:	e0040000 	.word	0xe0040000
    e618:	000f4240 	.word	0x000f4240
    e61c:	001da380 	.word	0x001da380
    e620:	40020000 	.word	0x40020000

0000e624 <am_hal_uart_deinitialize>:
    e624:	b170      	cbz	r0, e644 <am_hal_uart_deinitialize+0x20>
    e626:	6803      	ldr	r3, [r0, #0]
    e628:	4a07      	ldr	r2, [pc, #28]	; (e648 <am_hal_uart_deinitialize+0x24>)
    e62a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e62e:	4293      	cmp	r3, r2
    e630:	d108      	bne.n	e644 <am_hal_uart_deinitialize+0x20>
    e632:	78c2      	ldrb	r2, [r0, #3]
    e634:	2300      	movs	r3, #0
    e636:	f36f 0200 	bfc	r2, #0, #1
    e63a:	70c2      	strb	r2, [r0, #3]
    e63c:	6243      	str	r3, [r0, #36]	; 0x24
    e63e:	7103      	strb	r3, [r0, #4]
    e640:	4618      	mov	r0, r3
    e642:	4770      	bx	lr
    e644:	2002      	movs	r0, #2
    e646:	4770      	bx	lr
    e648:	01ea9e06 	.word	0x01ea9e06

0000e64c <am_hal_uart_power_control>:
    e64c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e64e:	4604      	mov	r4, r0
    e650:	6800      	ldr	r0, [r0, #0]
    e652:	4b39      	ldr	r3, [pc, #228]	; (e738 <am_hal_uart_power_control+0xec>)
    e654:	f020 467e 	bic.w	r6, r0, #4261412864	; 0xfe000000
    e658:	429e      	cmp	r6, r3
    e65a:	b085      	sub	sp, #20
    e65c:	d13f      	bne.n	e6de <am_hal_uart_power_control+0x92>
    e65e:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e660:	f105 0008 	add.w	r0, r5, #8
    e664:	b2c7      	uxtb	r7, r0
    e666:	b189      	cbz	r1, e68c <am_hal_uart_power_control+0x40>
    e668:	3901      	subs	r1, #1
    e66a:	2901      	cmp	r1, #1
    e66c:	d834      	bhi.n	e6d8 <am_hal_uart_power_control+0x8c>
    e66e:	2a00      	cmp	r2, #0
    e670:	d138      	bne.n	e6e4 <am_hal_uart_power_control+0x98>
    e672:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e676:	351c      	adds	r5, #28
    e678:	032d      	lsls	r5, r5, #12
    e67a:	f04f 33ff 	mov.w	r3, #4294967295
    e67e:	646b      	str	r3, [r5, #68]	; 0x44
    e680:	4638      	mov	r0, r7
    e682:	f7ff fe6b 	bl	e35c <am_hal_pwrctrl_periph_disable>
    e686:	2000      	movs	r0, #0
    e688:	b005      	add	sp, #20
    e68a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e68c:	2a00      	cmp	r2, #0
    e68e:	d04a      	beq.n	e726 <am_hal_uart_power_control+0xda>
    e690:	7923      	ldrb	r3, [r4, #4]
    e692:	2b00      	cmp	r3, #0
    e694:	d04e      	beq.n	e734 <am_hal_uart_power_control+0xe8>
    e696:	4638      	mov	r0, r7
    e698:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e69c:	9101      	str	r1, [sp, #4]
    e69e:	351c      	adds	r5, #28
    e6a0:	f7ff fe32 	bl	e308 <am_hal_pwrctrl_periph_enable>
    e6a4:	f7ff fc48 	bl	df38 <am_hal_interrupt_master_disable>
    e6a8:	032d      	lsls	r5, r5, #12
    e6aa:	68a3      	ldr	r3, [r4, #8]
    e6ac:	9002      	str	r0, [sp, #8]
    e6ae:	622b      	str	r3, [r5, #32]
    e6b0:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    e6b4:	626a      	str	r2, [r5, #36]	; 0x24
    e6b6:	62ab      	str	r3, [r5, #40]	; 0x28
    e6b8:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
    e6bc:	62ea      	str	r2, [r5, #44]	; 0x2c
    e6be:	632b      	str	r3, [r5, #48]	; 0x30
    e6c0:	e9d4 2307 	ldrd	r2, r3, [r4, #28]
    e6c4:	9901      	ldr	r1, [sp, #4]
    e6c6:	636a      	str	r2, [r5, #52]	; 0x34
    e6c8:	63ab      	str	r3, [r5, #56]	; 0x38
    e6ca:	9802      	ldr	r0, [sp, #8]
    e6cc:	7121      	strb	r1, [r4, #4]
    e6ce:	f7ff fc37 	bl	df40 <am_hal_interrupt_master_set>
    e6d2:	9901      	ldr	r1, [sp, #4]
    e6d4:	4608      	mov	r0, r1
    e6d6:	e000      	b.n	e6da <am_hal_uart_power_control+0x8e>
    e6d8:	2006      	movs	r0, #6
    e6da:	b005      	add	sp, #20
    e6dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e6de:	2002      	movs	r0, #2
    e6e0:	b005      	add	sp, #20
    e6e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e6e4:	f7ff fc28 	bl	df38 <am_hal_interrupt_master_disable>
    e6e8:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e6ec:	351c      	adds	r5, #28
    e6ee:	032d      	lsls	r5, r5, #12
    e6f0:	9003      	str	r0, [sp, #12]
    e6f2:	6a2b      	ldr	r3, [r5, #32]
    e6f4:	60a3      	str	r3, [r4, #8]
    e6f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e6f8:	60e3      	str	r3, [r4, #12]
    e6fa:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e6fc:	6123      	str	r3, [r4, #16]
    e6fe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    e700:	6163      	str	r3, [r4, #20]
    e702:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    e704:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    e706:	61a3      	str	r3, [r4, #24]
    e708:	6bab      	ldr	r3, [r5, #56]	; 0x38
    e70a:	61e2      	str	r2, [r4, #28]
    e70c:	2201      	movs	r2, #1
    e70e:	6223      	str	r3, [r4, #32]
    e710:	9803      	ldr	r0, [sp, #12]
    e712:	7122      	strb	r2, [r4, #4]
    e714:	f7ff fc14 	bl	df40 <am_hal_interrupt_master_set>
    e718:	6823      	ldr	r3, [r4, #0]
    e71a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e71e:	42b3      	cmp	r3, r6
    e720:	d1ae      	bne.n	e680 <am_hal_uart_power_control+0x34>
    e722:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e724:	e7a5      	b.n	e672 <am_hal_uart_power_control+0x26>
    e726:	4638      	mov	r0, r7
    e728:	9201      	str	r2, [sp, #4]
    e72a:	f7ff fded 	bl	e308 <am_hal_pwrctrl_periph_enable>
    e72e:	9a01      	ldr	r2, [sp, #4]
    e730:	4610      	mov	r0, r2
    e732:	e7d2      	b.n	e6da <am_hal_uart_power_control+0x8e>
    e734:	2007      	movs	r0, #7
    e736:	e7d0      	b.n	e6da <am_hal_uart_power_control+0x8e>
    e738:	01ea9e06 	.word	0x01ea9e06

0000e73c <am_hal_uart_tx_flush>:
    e73c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    e740:	b570      	push	{r4, r5, r6, lr}
    e742:	6a45      	ldr	r5, [r0, #36]	; 0x24
    e744:	4604      	mov	r4, r0
    e746:	b15b      	cbz	r3, e760 <am_hal_uart_tx_flush+0x24>
    e748:	6b43      	ldr	r3, [r0, #52]	; 0x34
    e74a:	b14b      	cbz	r3, e760 <am_hal_uart_tx_flush+0x24>
    e74c:	4e0e      	ldr	r6, [pc, #56]	; (e788 <am_hal_uart_tx_flush+0x4c>)
    e74e:	6e20      	ldr	r0, [r4, #96]	; 0x60
    e750:	fbb6 f0f0 	udiv	r0, r6, r0
    e754:	0100      	lsls	r0, r0, #4
    e756:	f7ff fa21 	bl	db9c <am_hal_flash_delay>
    e75a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e75c:	2b00      	cmp	r3, #0
    e75e:	d1f6      	bne.n	e74e <am_hal_uart_tx_flush+0x12>
    e760:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e764:	351c      	adds	r5, #28
    e766:	032d      	lsls	r5, r5, #12
    e768:	69ab      	ldr	r3, [r5, #24]
    e76a:	071a      	lsls	r2, r3, #28
    e76c:	d509      	bpl.n	e782 <am_hal_uart_tx_flush+0x46>
    e76e:	4e06      	ldr	r6, [pc, #24]	; (e788 <am_hal_uart_tx_flush+0x4c>)
    e770:	6e23      	ldr	r3, [r4, #96]	; 0x60
    e772:	fbb6 f3f3 	udiv	r3, r6, r3
    e776:	0118      	lsls	r0, r3, #4
    e778:	f7ff fa10 	bl	db9c <am_hal_flash_delay>
    e77c:	69ab      	ldr	r3, [r5, #24]
    e77e:	071b      	lsls	r3, r3, #28
    e780:	d4f6      	bmi.n	e770 <am_hal_uart_tx_flush+0x34>
    e782:	2000      	movs	r0, #0
    e784:	bd70      	pop	{r4, r5, r6, pc}
    e786:	bf00      	nop
    e788:	00b71b00 	.word	0x00b71b00
    e78c:	6d695443 	.word	0x6d695443
    e790:	50207265 	.word	0x50207265
    e794:	4f204d57 	.word	0x4f204d57
    e798:	75707475 	.word	0x75707475
    e79c:	78652074 	.word	0x78652074
    e7a0:	6c706d61 	.word	0x6c706d61
    e7a4:	00000a65 	.word	0x00000a65
    e7a8:	636f6c43 	.word	0x636f6c43
    e7ac:	6f73206b 	.word	0x6f73206b
    e7b0:	65637275 	.word	0x65637275
    e7b4:	3a736920 	.word	0x3a736920
    e7b8:	4c415458 	.word	0x4c415458
    e7bc:	00000a2e 	.word	0x00000a2e
    e7c0:	2044454c 	.word	0x2044454c
    e7c4:	70206e6f 	.word	0x70206e6f
    e7c8:	203a6e69 	.word	0x203a6e69
    e7cc:	0a0a6425 	.word	0x0a0a6425
    e7d0:	00000000 	.word	0x00000000
    e7d4:	0a0a0a0a 	.word	0x0a0a0a0a
    e7d8:	0a0a0a0a 	.word	0x0a0a0a0a
    e7dc:	0a0a0a0a 	.word	0x0a0a0a0a
    e7e0:	0a0a0a0a 	.word	0x0a0a0a0a
    e7e4:	00000a0a 	.word	0x00000a0a

0000e7e8 <g_pui8Brightness>:
    e7e8:	0b080502 1715120f 23201d1a 2c2a2825     .......... #%(*,
    e7f8:	3432302e 3a393736 3e3d3c3b 3f3f3f3e     .024679:;<=>>???
    e808:	3e3e3f3f 3a3b3c3d 34363739 2c2e3032     ??>>=<;:976420.,
    e818:	2325282a 171a1d20 0b0f1215 01020508     *(%# ...........

0000e828 <am_hal_cachectrl_defaults>:
    e828:	00000308                                ....

0000e82c <CTx_tbl>:
    e82c:	0219020c 021a020d 021b0212 021c0213     ................
    e83c:	021d0705 021e0506 021f0216 02200217     .............. .
    e84c:	0604022a 0707022b 0518022c 0621022d     *...+...,...-.!.
    e85c:	0227022e 0523022f 07250230 020b0231     ..'./.#.0.%.1...

0000e86c <outcfg_tbl>:
    e86c:	06151a00 1f050010 071e1908 06010818     ................
    e87c:	0d151201 070e0111 0f1d0109 070d0919     ................
    e88c:	0e141302 08040212 061c1b0a 1d0c0a1a     ................
    e89c:	1e180903 1c060313 071f090b 14070b1b     ................
    e8ac:	1b100004 11040f14 1300080c 190c021c     ................
    e8bc:	1a110105 100d0115 1201060d 1805071d     ................
    e8cc:	19010206 12060a1c 11050a0e 1a0e011e     ................
    e8dc:	18150307 1307011d 10140b0f 1b0f061f     ................

0000e8ec <g_AM_HAL_GPIO_DISABLE>:
    e8ec:	00000003                                ....

0000e8f0 <g_AM_HAL_GPIO_OUTPUT>:
    e8f0:	00000403                                ....

0000e8f4 <g_ui8Bit76Capabilities>:
    e8f4:	02800101 80010180 80800101 80808080     ................
    e904:	80808080 80808008 01800180 80808080     ................
    e914:	80808080 01800402 01010401 80808080     ................
    e924:	00000101                                ....

0000e928 <g_ui8Inpen>:
    e928:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
    e938:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
    e948:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
    e958:	00003130                                01..

0000e95c <g_ui8NCEtable>:
    e95c:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    e96c:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    e97c:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    e98c:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    e99c:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    e9ac:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    e9bc:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    e9cc:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    e9dc:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    e9ec:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    e9fc:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    ea0c:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    ea1c:	32221202 43231303                       .."2..#C

0000ea24 <g_ui8nCEpins>:
    ea24:	02070707 00080802 01020202 01010101     ................
    ea34:	01010101 01010101 01010101 01010101     ................
    ea44:	01010101 08010101 01010008 01010101     ................
    ea54:	00000101                                ....

0000ea58 <g_am_hal_mcuctrl_flash_size>:
    ea58:	00004000 00008000 00010000 00020000     .@..............
    ea68:	00040000 00080000 00100000 00200000     .............. .
    ea78:	00180000 00000000 00000000 00000000     ................
	...

0000ea98 <g_am_hal_mcuctrl_sram_size>:
    ea98:	00004000 00008000 00010000 00020000     .@..............
    eaa8:	00040000 00080000 00100000 00060000     ................
    eab8:	000c0000 00000000 00000000 00000000     ................
	...

0000ead8 <g_AM_BSP_GPIO_ITM_SWO>:
    ead8:	00000002                                ....

0000eadc <am_hal_pwrctrl_peripheral_control>:
	...
    eae8:	00000001 00000004 00000004 00000002     ................
    eaf8:	00000008 00000008 00000004 00000008     ................
    eb08:	00000008 00000008 00000008 00000008     ................
    eb18:	00000010 00000010 00000010 00000020     ............ ...
    eb28:	00000010 00000010 00000040 00000010     ........@.......
    eb38:	00000010 00000080 00000004 00000004     ................
    eb48:	00000100 00000004 00000004 00000200     ................
    eb58:	00000020 00000020 00000400 00000004      ... ...........
    eb68:	00000004 00000800 00000040 00000040     ........@...@...
    eb78:	00001000 00000080 00000080 00002000     ............. ..
    eb88:	00000100 00000100                       ........
